external raise_notrace : exn -> 'a = "%raise_notrace"
exception Exit
exception Not_found
external ( == ) : 'a -> 'a -> bool = "%eq"
external ( != ) : 'a -> 'a -> bool = "%noteq"
external __LOC__ : string = "%loc_LOC"
external __FILE__ : string = "%loc_FILE"
external __LINE__ : int = "%loc_LINE"
external __MODULE__ : string = "%loc_MODULE"
external __POS__ : string * int * int * int = "%loc_POS"
external __FUNCTION__ : string = "%loc_FUNCTION"
external __LOC_OF__ : 'a -> string * 'a = "%loc_LOC"
external __LINE_OF__ : 'a -> int * 'a = "%loc_LINE"
external __POS_OF__ : 'a -> (string * int * int * int) * 'a = "%loc_POS"
external ( ~+ ) : int -> int = "%identity"
external succ : int -> int = "%succint"
external pred : int -> int = "%predint"
external ( mod ) : int -> int -> int = "%modint"
val max_int : int
val min_int : int
external ( ~+. ) : float -> float = "%identity"
external sqrt : float -> float = "caml_sqrt_float" "sqrt" [@@unboxed]
  [@@noalloc]
external exp : float -> float = "caml_exp_float" "exp" [@@unboxed]
  [@@noalloc]
external log : float -> float = "caml_log_float" "log" [@@unboxed]
  [@@noalloc]
external log10 : float -> float = "caml_log10_float" "log10" [@@unboxed]
  [@@noalloc]
external expm1 : float -> float = "caml_expm1_float" "caml_expm1" [@@unboxed]
  [@@noalloc]
external log1p : float -> float = "caml_log1p_float" "caml_log1p" [@@unboxed]
  [@@noalloc]
external cos : float -> float = "caml_cos_float" "cos" [@@unboxed]
  [@@noalloc]
external sin : float -> float = "caml_sin_float" "sin" [@@unboxed]
  [@@noalloc]
external tan : float -> float = "caml_tan_float" "tan" [@@unboxed]
  [@@noalloc]
external acos : float -> float = "caml_acos_float" "acos" [@@unboxed]
  [@@noalloc]
external asin : float -> float = "caml_asin_float" "asin" [@@unboxed]
  [@@noalloc]
external atan : float -> float = "caml_atan_float" "atan" [@@unboxed]
  [@@noalloc]
external atan2 : float -> float -> float = "caml_atan2_float" "atan2"
  [@@unboxed] [@@noalloc]
external hypot : float -> float -> float = "caml_hypot_float" "caml_hypot"
  [@@unboxed] [@@noalloc]
external cosh : float -> float = "caml_cosh_float" "cosh" [@@unboxed]
  [@@noalloc]
external sinh : float -> float = "caml_sinh_float" "sinh" [@@unboxed]
  [@@noalloc]
external tanh : float -> float = "caml_tanh_float" "tanh" [@@unboxed]
  [@@noalloc]
external acosh : float -> float = "caml_acosh_float" "caml_acosh" [@@unboxed]
  [@@noalloc]
external asinh : float -> float = "caml_asinh_float" "caml_asinh" [@@unboxed]
  [@@noalloc]
external atanh : float -> float = "caml_atanh_float" "caml_atanh" [@@unboxed]
  [@@noalloc]
external ceil : float -> float = "caml_ceil_float" "ceil" [@@unboxed]
  [@@noalloc]
external floor : float -> float = "caml_floor_float" "floor" [@@unboxed]
  [@@noalloc]
external abs_float : float -> float = "%absfloat"
external copysign : float -> float -> float = "caml_copysign_float"
  "caml_copysign" [@@unboxed] [@@noalloc]
external mod_float : float -> float -> float = "caml_fmod_float" "fmod"
  [@@unboxed] [@@noalloc]
external frexp : float -> float * int = "caml_frexp_float"
external ldexp :
  (float [@unboxed]) -> (int [@untagged]) -> (float [@unboxed])
  = "caml_ldexp_float" "caml_ldexp_float_unboxed" [@@noalloc]
external modf : float -> float * float = "caml_modf_float"
external float : int -> float = "%floatofint"
external float_of_int : int -> float = "%floatofint"
external truncate : float -> int = "%intoffloat"
external int_of_float : float -> int = "%intoffloat"
val infinity : float
val neg_infinity : float
val nan : float
val max_float : float
val min_float : float
val epsilon_float : float
type nonrec fpclass =
  fpclass =
    FP_normal
  | FP_subnormal
  | FP_zero
  | FP_infinite
  | FP_nan
external classify_float : (float [@unboxed]) -> fpclass
  = "caml_classify_float" "caml_classify_float_unboxed" [@@noalloc]
external int_of_char : char -> int = "%identity"
val char_of_int : int -> char
val string_of_bool : bool -> string
val bool_of_string_opt : string -> bool option
val bool_of_string : string -> bool
val string_of_int : int -> string
val int_of_string_opt : string -> int option
external int_of_string : string -> int = "caml_int_of_string"
val string_of_float : float -> string
val float_of_string_opt : string -> float option
external float_of_string : string -> float = "caml_float_of_string"
type nonrec in_channel = in_channel
type nonrec out_channel = out_channel
val stdin : in_channel
val stdout : out_channel
val stderr : out_channel
val print_char : char -> unit
val print_string : string -> unit
val print_bytes : bytes -> unit
val print_int : int -> unit
val print_float : float -> unit
val print_endline : string -> unit
val print_newline : unit -> unit
val prerr_char : char -> unit
val prerr_string : string -> unit
val prerr_bytes : bytes -> unit
val prerr_int : int -> unit
val prerr_float : float -> unit
val prerr_endline : string -> unit
val prerr_newline : unit -> unit
val read_line : unit -> string
val read_int_opt : unit -> int option
val read_int : unit -> int
val read_float_opt : unit -> float option
val read_float : unit -> float
type nonrec open_flag =
  open_flag =
    Open_rdonly
  | Open_wronly
  | Open_append
  | Open_creat
  | Open_trunc
  | Open_excl
  | Open_binary
  | Open_text
  | Open_nonblock
val open_out : string -> out_channel
val open_out_bin : string -> out_channel
val open_out_gen : open_flag list -> int -> string -> out_channel
val flush : out_channel -> unit
val flush_all : unit -> unit
val output_char : out_channel -> char -> unit
val output_string : out_channel -> string -> unit
val output_bytes : out_channel -> bytes -> unit
val output : out_channel -> bytes -> int -> int -> unit
val output_substring : out_channel -> string -> int -> int -> unit
val output_byte : out_channel -> int -> unit
val output_binary_int : out_channel -> int -> unit
val output_value : out_channel -> 'a -> unit
val seek_out : out_channel -> int -> unit
val pos_out : out_channel -> int
val out_channel_length : out_channel -> int
val close_out : out_channel -> unit
val close_out_noerr : out_channel -> unit
val set_binary_mode_out : out_channel -> bool -> unit
val open_in : string -> in_channel
val open_in_bin : string -> in_channel
val open_in_gen : open_flag list -> int -> string -> in_channel
val input_char : in_channel -> char
val input_line : in_channel -> string
val input : in_channel -> bytes -> int -> int -> int
val really_input : in_channel -> bytes -> int -> int -> unit
val really_input_string : in_channel -> int -> string
val input_byte : in_channel -> int
val input_binary_int : in_channel -> int
val input_value : in_channel -> 'a
val seek_in : in_channel -> int -> unit
val pos_in : in_channel -> int
val in_channel_length : in_channel -> int
val close_in : in_channel -> unit
val close_in_noerr : in_channel -> unit
val set_binary_mode_in : in_channel -> bool -> unit
module LargeFile = LargeFile
external incr : int ref -> unit = "%incr"
external decr : int ref -> unit = "%decr"
type nonrec ('a, 'b) result = ('a, 'b) result = Ok of 'a | Error of 'b
val string_of_format : ('a, 'b, 'c, 'd, 'e, 'f) format6 -> string
external format_of_string :
  ('a, 'b, 'c, 'd, 'e, 'f) format6 -> ('a, 'b, 'c, 'd, 'e, 'f) format6
  = "%identity"
val ( ^^ ) :
  ('a, 'b, 'c, 'd, 'e, 'f) format6 ->
  ('f, 'b, 'c, 'e, 'g, 'h) format6 -> ('a, 'b, 'c, 'd, 'g, 'h) format6
val exit : int -> 'a
val at_exit : (unit -> unit) -> unit
val valid_float_lexem : string -> string
val unsafe_really_input : in_channel -> bytes -> int -> int -> unit
val do_at_exit : unit -> unit
val do_domain_local_at_exit : (unit -> unit) ref
module Arg = Arg
module ArrayLabels = ArrayLabels
module BytesLabels = BytesLabels
module Callback = Callback
module Complex = Complex
module Condition = Condition
module Digest = Digest
module Domain = Domain
module Effect = Effect
module Ephemeron = Ephemeron
module Filename = Filename
module Format = Format
module Fun = Fun
module Gc = Gc
module ListLabels = ListLabels
module Marshal = Marshal
module MoreLabels = MoreLabels
module Mutex = Mutex
module Obj = Obj
module Oo = Oo
module Parsing = Parsing
module Printexc = Printexc
module Scanf = Scanf
module Semaphore = Semaphore
module Seq = Seq
module StdLabels = StdLabels
module StringLabels = StringLabels
module Type = Type
module Weak = Weak
module Applicative = Base__.Applicative
module Array = Base__.Array
module Avltree = Base__.Avltree
module Backtrace = Base__.Backtrace
module Binary_search = Base__.Binary_search
module Binary_searchable = Base__.Binary_searchable
module Blit = Base__.Blit
module Bool = Base__.Bool
module Buffer = Base__.Buffer
module Bytes = Base__.Bytes
module Char = Base__.Char
module Comparable = Base__.Comparable
module Comparator = Base__.Comparator
module Comparisons = Base__.Comparisons
module Container = Base__.Container
module Either = Base__.Either
module Equal = Base__.Equal
module Error = Base__.Error
module Exn = Base__.Exn
module Field = Base__.Field
module Float = Base__.Float
module Floatable = Base__.Floatable
module Fn = Base__.Fn
module Formatter = Base__.Formatter
module Hash = Base__.Hash
module Hash_set = Base__.Hash_set
module Hashable = Base__.Hashable
module Hasher = Base__.Hasher
module Hashtbl = Base__.Hashtbl
module Identifiable = Base__.Identifiable
module Indexed_container = Base__.Indexed_container
module Info = Base__.Info
module Int = Base__.Int
module Int_conversions = Base__.Int_conversions
module Int32 = Base__.Int32
module Int63 = Base__.Int63
module Int64 = Base__.Int64
module Intable = Base__.Intable
module Int_math = Base__.Int_math
module Invariant = Base__.Invariant
module Lazy = Base__.Lazy
module List = Base__.List
module Map = Base__.Map
module Maybe_bound = Base__.Maybe_bound
module Monad = Base__.Monad
module Nativeint = Base__.Nativeint
module Nothing = Base__.Nothing
module Option = Base__.Option
module Option_array = Base__.Option_array
module Or_error = Base__.Or_error
module Ordered_collection_common = Base__.Ordered_collection_common
module Ordering = Base__.Ordering
module Poly = Base__.Import.Poly
module Popcount = Base__.Popcount
module Pretty_printer = Base__.Pretty_printer
module Printf = Base__.Printf
module Linked_queue = Base__.Linked_queue
module Queue = Base__.Queue
module Random = Base__.Random
module Ref = Base__.Ref
module Result = Base__.Result
module Sequence = Base__.Sequence
module Set = Base__.Set
module Sexpable = Base__.Sexpable
module Sign = Base__.Sign
module Sign_or_nan = Base__.Sign_or_nan
module Source_code_position = Base__.Source_code_position
module Stack = Base__.Stack
module Staged = Base__.Staged
module String = Base__.String
module Stringable = Base__.Stringable
module Sys = Base__.Sys
module T = Base__.T
module Type_equal = Base__.Type_equal
module Uniform_array = Base__.Uniform_array
module Unit = Base__.Unit
module Uchar = Base__.Uchar
module Variant = Base__.Variant
module With_return = Base__.With_return
module Word_size = Base__.Word_size
module type T = Base__T.T
module type T1 = Base__T.T1
module type T2 = Base__T.T2
module type T3 = Base__T.T3
module Sexp :
  sig
    type t = Sexplib0.Sexp.t = Atom of string | List of t list
    val hash_fold_t : t Base__Ppx_hash_lib.hash_fold
    val hash : t -> Base__Ppx_hash_lib.Std.Hash.hash_value
    val t_of_sexp : Sexplib0.Sexp.t -> Sexplib0.Sexp.t
    val sexp_of_t : Sexplib0.Sexp.t -> Sexplib0.Sexp.t
    exception Not_found_s of Sexplib0.Sexp.t
    exception Of_sexp_error of exn * Sexplib0.Sexp.t
    val message :
      string -> (string * Sexplib0.Sexp.t) list -> Sexplib0.Sexp.t
    val default_indent : int ref
    val pp_hum : Stdlib.Format.formatter -> Sexplib0.Sexp.t -> unit
    val pp_hum_indent :
      int -> Stdlib.Format.formatter -> Sexplib0.Sexp.t -> unit
    val pp_mach : Stdlib.Format.formatter -> Sexplib0.Sexp.t -> unit
    val pp : Stdlib.Format.formatter -> Sexplib0.Sexp.t -> unit
    val to_string_hum : ?indent:int -> Sexplib0.Sexp.t -> string
    val to_string_mach : Sexplib0.Sexp.t -> string
    val to_string : Sexplib0.Sexp.t -> string
    val of_float_style : [ `No_underscores | `Underscores ] ref
    val of_int_style : [ `No_underscores | `Underscores ] ref
    module Private = Base__Sexp.Private
    val t_sexp_grammar : t Sexplib0.Sexp_grammar.t
    val invariant : t -> unit
    val of_string : unit
    val ( >= ) : t -> t -> bool
    val ( <= ) : t -> t -> bool
    val ( = ) : t -> t -> bool
    val ( > ) : t -> t -> bool
    val ( < ) : t -> t -> bool
    val ( <> ) : t -> t -> bool
    val equal : t -> t -> bool
    val compare : t -> t -> int
    val min : t -> t -> t
    val max : t -> t -> t
    val ascending : t -> t -> int
    val descending : t -> t -> int
    val between : t -> low:t -> high:t -> bool
    val clamp_exn : t -> min:t -> max:t -> t
    val clamp : t -> min:t -> max:t -> t Base__.Or_error.t
    type comparator_witness = Base__Sexp_with_comparable.comparator_witness
    val comparator : (t, comparator_witness) Base__Comparator.comparator
  end
module Exported_for_specific_uses :
  sig
    module Fieldslib = Base__.Fieldslib
    module Globalize = Base__.Globalize
    module Obj_local = Base__.Obj_local
    module Ppx_compare_lib = Base__.Ppx_compare_lib
    module Ppx_enumerate_lib = Base__.Ppx_enumerate_lib
    module Ppx_hash_lib = Base__.Ppx_hash_lib
    module Variantslib = Base__.Variantslib
    val am_testing : bool
  end
module Export :
  sig
    type 'a array = 'a Array.t
    val compare_array : ('a -> 'a -> int) -> 'a array -> 'a array -> int
    val equal_array : ('a -> 'a -> bool) -> 'a array -> 'a array -> bool
    val globalize_array : ('a -> 'a) -> 'a array -> 'a array
    val array_of_sexp :
      (Sexplib0.Sexp.t -> 'a) -> Sexplib0.Sexp.t -> 'a array
    val sexp_of_array :
      ('a -> Sexplib0.Sexp.t) -> 'a array -> Sexplib0.Sexp.t
    val array_sexp_grammar :
      'a Sexplib0.Sexp_grammar.t -> 'a array Sexplib0.Sexp_grammar.t
    type bool = Bool.t
    val compare_bool : bool -> bool -> int
    val equal_bool : bool -> bool -> bool
    val globalize_bool : bool -> bool
    val hash_fold_bool :
      Base__.Ppx_hash_lib.Std.Hash.state ->
      bool -> Base__.Ppx_hash_lib.Std.Hash.state
    val hash_bool : bool -> Base__.Ppx_hash_lib.Std.Hash.hash_value
    val bool_of_sexp : Sexplib0.Sexp.t -> bool
    val sexp_of_bool : bool -> Sexplib0.Sexp.t
    val bool_sexp_grammar : bool Sexplib0.Sexp_grammar.t
    type char = Char.t
    val compare_char : char -> char -> int
    val equal_char : char -> char -> bool
    val globalize_char : char -> char
    val hash_fold_char :
      Base__.Ppx_hash_lib.Std.Hash.state ->
      char -> Base__.Ppx_hash_lib.Std.Hash.state
    val hash_char : char -> Base__.Ppx_hash_lib.Std.Hash.hash_value
    val char_of_sexp : Sexplib0.Sexp.t -> char
    val sexp_of_char : char -> Sexplib0.Sexp.t
    val char_sexp_grammar : char Sexplib0.Sexp_grammar.t
    type exn = Exn.t
    val sexp_of_exn : exn -> Sexplib0.Sexp.t
    type float = Float.t
    val compare_float : float -> float -> int
    val equal_float : float -> float -> bool
    val globalize_float : float -> float
    val hash_fold_float :
      Base__.Ppx_hash_lib.Std.Hash.state ->
      float -> Base__.Ppx_hash_lib.Std.Hash.state
    val hash_float : float -> Base__.Ppx_hash_lib.Std.Hash.hash_value
    val float_of_sexp : Sexplib0.Sexp.t -> float
    val sexp_of_float : float -> Sexplib0.Sexp.t
    val float_sexp_grammar : float Sexplib0.Sexp_grammar.t
    type int = Int.t
    val compare_int : int -> int -> int
    val equal_int : int -> int -> bool
    val globalize_int : int -> int
    val hash_fold_int :
      Base__.Ppx_hash_lib.Std.Hash.state ->
      int -> Base__.Ppx_hash_lib.Std.Hash.state
    val hash_int : int -> Base__.Ppx_hash_lib.Std.Hash.hash_value
    val int_of_sexp : Sexplib0.Sexp.t -> int
    val sexp_of_int : int -> Sexplib0.Sexp.t
    val int_sexp_grammar : int Sexplib0.Sexp_grammar.t
    type int32 = Int32.t
    val compare_int32 : int32 -> int32 -> int
    val equal_int32 : int32 -> int32 -> bool
    val globalize_int32 : int32 -> int32
    val hash_fold_int32 :
      Base__.Ppx_hash_lib.Std.Hash.state ->
      int32 -> Base__.Ppx_hash_lib.Std.Hash.state
    val hash_int32 : int32 -> Base__.Ppx_hash_lib.Std.Hash.hash_value
    val int32_of_sexp : Sexplib0.Sexp.t -> int32
    val sexp_of_int32 : int32 -> Sexplib0.Sexp.t
    val int32_sexp_grammar : int32 Sexplib0.Sexp_grammar.t
    type int64 = Int64.t
    val compare_int64 : int64 -> int64 -> int
    val equal_int64 : int64 -> int64 -> bool
    val globalize_int64 : int64 -> int64
    val hash_fold_int64 :
      Base__.Ppx_hash_lib.Std.Hash.state ->
      int64 -> Base__.Ppx_hash_lib.Std.Hash.state
    val hash_int64 : int64 -> Base__.Ppx_hash_lib.Std.Hash.hash_value
    val int64_of_sexp : Sexplib0.Sexp.t -> int64
    val sexp_of_int64 : int64 -> Sexplib0.Sexp.t
    val int64_sexp_grammar : int64 Sexplib0.Sexp_grammar.t
    type 'a list = 'a List.t
    val compare_list : ('a -> 'a -> int) -> 'a list -> 'a list -> int
    val equal_list : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool
    val globalize_list : ('a -> 'a) -> 'a list -> 'a list
    val hash_fold_list :
      (Base__.Ppx_hash_lib.Std.Hash.state ->
       'a -> Base__.Ppx_hash_lib.Std.Hash.state) ->
      Base__.Ppx_hash_lib.Std.Hash.state ->
      'a list -> Base__.Ppx_hash_lib.Std.Hash.state
    val list_of_sexp : (Sexplib0.Sexp.t -> 'a) -> Sexplib0.Sexp.t -> 'a list
    val sexp_of_list : ('a -> Sexplib0.Sexp.t) -> 'a list -> Sexplib0.Sexp.t
    val list_sexp_grammar :
      'a Sexplib0.Sexp_grammar.t -> 'a list Sexplib0.Sexp_grammar.t
    type nativeint = Nativeint.t
    val compare_nativeint : nativeint -> nativeint -> int
    val equal_nativeint : nativeint -> nativeint -> bool
    val globalize_nativeint : nativeint -> nativeint
    val hash_fold_nativeint :
      Base__.Ppx_hash_lib.Std.Hash.state ->
      nativeint -> Base__.Ppx_hash_lib.Std.Hash.state
    val hash_nativeint : nativeint -> Base__.Ppx_hash_lib.Std.Hash.hash_value
    val nativeint_of_sexp : Sexplib0.Sexp.t -> nativeint
    val sexp_of_nativeint : nativeint -> Sexplib0.Sexp.t
    val nativeint_sexp_grammar : nativeint Sexplib0.Sexp_grammar.t
    type 'a option = 'a Option.t
    val compare_option : ('a -> 'a -> int) -> 'a option -> 'a option -> int
    val equal_option : ('a -> 'a -> bool) -> 'a option -> 'a option -> bool
    val globalize_option : ('a -> 'a) -> 'a option -> 'a option
    val hash_fold_option :
      (Base__.Ppx_hash_lib.Std.Hash.state ->
       'a -> Base__.Ppx_hash_lib.Std.Hash.state) ->
      Base__.Ppx_hash_lib.Std.Hash.state ->
      'a option -> Base__.Ppx_hash_lib.Std.Hash.state
    val option_of_sexp :
      (Sexplib0.Sexp.t -> 'a) -> Sexplib0.Sexp.t -> 'a option
    val sexp_of_option :
      ('a -> Sexplib0.Sexp.t) -> 'a option -> Sexplib0.Sexp.t
    val option_sexp_grammar :
      'a Sexplib0.Sexp_grammar.t -> 'a option Sexplib0.Sexp_grammar.t
    type 'a ref = 'a Ref.t
    val compare_ref : ('a -> 'a -> int) -> 'a ref -> 'a ref -> int
    val equal_ref : ('a -> 'a -> bool) -> 'a ref -> 'a ref -> bool
    val globalize_ref : ('a -> 'a) -> 'a ref -> 'a ref
    val ref_of_sexp : (Sexplib0.Sexp.t -> 'a) -> Sexplib0.Sexp.t -> 'a ref
    val sexp_of_ref : ('a -> Sexplib0.Sexp.t) -> 'a ref -> Sexplib0.Sexp.t
    val ref_sexp_grammar :
      'a Sexplib0.Sexp_grammar.t -> 'a ref Sexplib0.Sexp_grammar.t
    type string = String.t
    val compare_string : string -> string -> int
    val equal_string : string -> string -> bool
    val globalize_string : string -> string
    val hash_fold_string :
      Base__.Ppx_hash_lib.Std.Hash.state ->
      string -> Base__.Ppx_hash_lib.Std.Hash.state
    val hash_string : string -> Base__.Ppx_hash_lib.Std.Hash.hash_value
    val string_of_sexp : Sexplib0.Sexp.t -> string
    val sexp_of_string : string -> Sexplib0.Sexp.t
    val string_sexp_grammar : string Sexplib0.Sexp_grammar.t
    type bytes = Bytes.t
    val compare_bytes : bytes -> bytes -> int
    val equal_bytes : bytes -> bytes -> bool
    val globalize_bytes : bytes -> bytes
    val bytes_of_sexp : Sexplib0.Sexp.t -> bytes
    val sexp_of_bytes : bytes -> Sexplib0.Sexp.t
    val bytes_sexp_grammar : bytes Sexplib0.Sexp_grammar.t
    type unit = Unit.t
    val compare_unit : unit -> unit -> int
    val equal_unit : unit -> unit -> bool
    val globalize_unit : unit -> unit
    val hash_fold_unit :
      Base__.Ppx_hash_lib.Std.Hash.state ->
      unit -> Base__.Ppx_hash_lib.Std.Hash.state
    val hash_unit : unit -> Base__.Ppx_hash_lib.Std.Hash.hash_value
    val unit_of_sexp : Sexplib0.Sexp.t -> unit
    val sexp_of_unit : unit -> Sexplib0.Sexp.t
    val unit_sexp_grammar : unit Sexplib0.Sexp_grammar.t
    type nonrec ('a, 'b, 'c) format = ('a, 'b, 'c) format
    type nonrec ('a, 'b, 'c, 'd) format4 = ('a, 'b, 'c, 'd) format4
    type nonrec ('a, 'b, 'c, 'd, 'e, 'f) format6 =
        ('a, 'b, 'c, 'd, 'e, 'f) format6
    val ( @ ) : 'a Base__List.t -> 'a Base__List.t -> 'a Base__List.t
    external ( + ) : Base__Int.t -> Base__Int.t -> Base__Int.t = "%addint"
    external ( - ) : Base__Int.t -> Base__Int.t -> Base__Int.t = "%subint"
    external ( * ) : Base__Int.t -> Base__Int.t -> Base__Int.t = "%mulint"
    external ( / ) : Base__Int.t -> Base__Int.t -> Base__Int.t = "%divint"
    external ( ~- ) : Base__Int.t -> Base__Int.t = "%negint"
    val ( ** ) : Base__Int.t -> Base__Int.t -> Base__Int.t
    external ( land ) : Base__Int.t -> Base__Int.t -> Base__Int.t = "%andint"
    external ( lor ) : Base__Int.t -> Base__Int.t -> Base__Int.t = "%orint"
    external ( lxor ) : Base__Int.t -> Base__Int.t -> Base__Int.t = "%xorint"
    val lnot : Base__Int.t -> Base__Int.t
    val abs : Base__Int.t -> Base__Int.t
    external neg : Base__Int.t -> Base__Int.t = "%negint"
    val zero : Base__Int.t
    val ( % ) : Base__Int.t -> Base__Int.t -> Base__Int.t
    val ( /% ) : Base__Int.t -> Base__Int.t -> Base__Int.t
    val ( // ) : Base__Int.t -> Base__Int.t -> float
    external ( lsl ) : Base__Int.t -> int -> Base__Int.t = "%lslint"
    external ( asr ) : Base__Int.t -> int -> Base__Int.t = "%asrint"
    external ( lsr ) : Base__Int.t -> int -> Base__Int.t = "%lsrint"
    external ( = ) : int -> int -> bool = "%equal"
    external ( <> ) : int -> int -> bool = "%notequal"
    external ( < ) : int -> int -> bool = "%lessthan"
    external ( > ) : int -> int -> bool = "%greaterthan"
    external ( <= ) : int -> int -> bool = "%lessequal"
    external ( >= ) : int -> int -> bool = "%greaterequal"
    external compare : int -> int -> int = "%compare"
    external equal : int -> int -> bool = "%equal"
    val ascending : int -> int -> int
    val descending : int -> int -> int
    val max : int -> int -> int
    val min : int -> int -> int
    val ( +. ) : Base__Float.t -> Base__Float.t -> Base__Float.t
    val ( -. ) : Base__Float.t -> Base__Float.t -> Base__Float.t
    val ( *. ) : Base__Float.t -> Base__Float.t -> Base__Float.t
    val ( /. ) : Base__Float.t -> Base__Float.t -> Base__Float.t
    val ( %. ) : Base__Float.t -> Base__Float.t -> Base__Float.t
    val ( **. ) : Base__Float.t -> Base__Float.t -> Base__Float.t
    val ( ~-. ) : Base__Float.t -> Base__Float.t
    external ( |> ) : 'a -> ('a -> 'b) -> 'b = "%revapply"
    external ( @@ ) : ('a -> 'b) -> 'a -> 'b = "%apply"
    external ( && ) : bool -> bool -> bool = "%sequand"
    external ( || ) : bool -> bool -> bool = "%sequor"
    external not : bool -> bool = "%boolnot"
    external ignore : 'a -> unit = "%ignore"
    val ( ^ ) : String.t -> String.t -> String.t
    external ( ! ) : 'a ref -> 'a = "%field0"
    external ref : 'a -> 'a ref = "%makemutable"
    external ( := ) : 'a ref -> 'a -> unit = "%setfield0"
    val fst : 'a * 'b -> 'a
    val snd : 'a * 'b -> 'b
    external raise : exn -> 'a = "%raise"
    val failwith : string -> 'a
    val invalid_arg : string -> 'a
    val raise_s : Base__.Sexp.t -> 'a
    external phys_equal : 'a -> 'a -> bool = "%eq"
    external force : 'a Lazy.t -> 'a = "%lazy_force"
  end
type 'a array = 'a Array.t
val compare_array : ('a -> 'a -> int) -> 'a array -> 'a array -> int
val equal_array : ('a -> 'a -> bool) -> 'a array -> 'a array -> bool
val globalize_array : ('a -> 'a) -> 'a array -> 'a array
val array_of_sexp : (Sexplib0.Sexp.t -> 'a) -> Sexplib0.Sexp.t -> 'a array
val sexp_of_array : ('a -> Sexplib0.Sexp.t) -> 'a array -> Sexplib0.Sexp.t
val array_sexp_grammar :
  'a Sexplib0.Sexp_grammar.t -> 'a array Sexplib0.Sexp_grammar.t
type bool = Bool.t
val compare_bool : bool -> bool -> int
val equal_bool : bool -> bool -> bool
val globalize_bool : bool -> bool
val hash_fold_bool :
  Base__.Ppx_hash_lib.Std.Hash.state ->
  bool -> Base__.Ppx_hash_lib.Std.Hash.state
val hash_bool : bool -> Base__.Ppx_hash_lib.Std.Hash.hash_value
val bool_of_sexp : Sexplib0.Sexp.t -> bool
val sexp_of_bool : bool -> Sexplib0.Sexp.t
val bool_sexp_grammar : bool Sexplib0.Sexp_grammar.t
type char = Char.t
val compare_char : char -> char -> int
val equal_char : char -> char -> bool
val globalize_char : char -> char
val hash_fold_char :
  Base__.Ppx_hash_lib.Std.Hash.state ->
  char -> Base__.Ppx_hash_lib.Std.Hash.state
val hash_char : char -> Base__.Ppx_hash_lib.Std.Hash.hash_value
val char_of_sexp : Sexplib0.Sexp.t -> char
val sexp_of_char : char -> Sexplib0.Sexp.t
val char_sexp_grammar : char Sexplib0.Sexp_grammar.t
type exn = Exn.t
val sexp_of_exn : exn -> Sexplib0.Sexp.t
type float = Float.t
val compare_float : float -> float -> int
val equal_float : float -> float -> bool
val globalize_float : float -> float
val hash_fold_float :
  Base__.Ppx_hash_lib.Std.Hash.state ->
  float -> Base__.Ppx_hash_lib.Std.Hash.state
val hash_float : float -> Base__.Ppx_hash_lib.Std.Hash.hash_value
val float_of_sexp : Sexplib0.Sexp.t -> float
val sexp_of_float : float -> Sexplib0.Sexp.t
val float_sexp_grammar : float Sexplib0.Sexp_grammar.t
type int = Int.t
val compare_int : int -> int -> int
val equal_int : int -> int -> bool
val globalize_int : int -> int
val hash_fold_int :
  Base__.Ppx_hash_lib.Std.Hash.state ->
  int -> Base__.Ppx_hash_lib.Std.Hash.state
val hash_int : int -> Base__.Ppx_hash_lib.Std.Hash.hash_value
val int_of_sexp : Sexplib0.Sexp.t -> int
val sexp_of_int : int -> Sexplib0.Sexp.t
val int_sexp_grammar : int Sexplib0.Sexp_grammar.t
type int32 = Int32.t
val compare_int32 : int32 -> int32 -> int
val equal_int32 : int32 -> int32 -> bool
val globalize_int32 : int32 -> int32
val hash_fold_int32 :
  Base__.Ppx_hash_lib.Std.Hash.state ->
  int32 -> Base__.Ppx_hash_lib.Std.Hash.state
val hash_int32 : int32 -> Base__.Ppx_hash_lib.Std.Hash.hash_value
val int32_of_sexp : Sexplib0.Sexp.t -> int32
val sexp_of_int32 : int32 -> Sexplib0.Sexp.t
val int32_sexp_grammar : int32 Sexplib0.Sexp_grammar.t
type int64 = Int64.t
val compare_int64 : int64 -> int64 -> int
val equal_int64 : int64 -> int64 -> bool
val globalize_int64 : int64 -> int64
val hash_fold_int64 :
  Base__.Ppx_hash_lib.Std.Hash.state ->
  int64 -> Base__.Ppx_hash_lib.Std.Hash.state
val hash_int64 : int64 -> Base__.Ppx_hash_lib.Std.Hash.hash_value
val int64_of_sexp : Sexplib0.Sexp.t -> int64
val sexp_of_int64 : int64 -> Sexplib0.Sexp.t
val int64_sexp_grammar : int64 Sexplib0.Sexp_grammar.t
type 'a list = 'a List.t
val compare_list : ('a -> 'a -> int) -> 'a list -> 'a list -> int
val equal_list : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool
val globalize_list : ('a -> 'a) -> 'a list -> 'a list
val hash_fold_list :
  (Base__.Ppx_hash_lib.Std.Hash.state ->
   'a -> Base__.Ppx_hash_lib.Std.Hash.state) ->
  Base__.Ppx_hash_lib.Std.Hash.state ->
  'a list -> Base__.Ppx_hash_lib.Std.Hash.state
val list_of_sexp : (Sexplib0.Sexp.t -> 'a) -> Sexplib0.Sexp.t -> 'a list
val sexp_of_list : ('a -> Sexplib0.Sexp.t) -> 'a list -> Sexplib0.Sexp.t
val list_sexp_grammar :
  'a Sexplib0.Sexp_grammar.t -> 'a list Sexplib0.Sexp_grammar.t
type nativeint = Nativeint.t
val compare_nativeint : nativeint -> nativeint -> int
val equal_nativeint : nativeint -> nativeint -> bool
val globalize_nativeint : nativeint -> nativeint
val hash_fold_nativeint :
  Base__.Ppx_hash_lib.Std.Hash.state ->
  nativeint -> Base__.Ppx_hash_lib.Std.Hash.state
val hash_nativeint : nativeint -> Base__.Ppx_hash_lib.Std.Hash.hash_value
val nativeint_of_sexp : Sexplib0.Sexp.t -> nativeint
val sexp_of_nativeint : nativeint -> Sexplib0.Sexp.t
val nativeint_sexp_grammar : nativeint Sexplib0.Sexp_grammar.t
type 'a option = 'a Option.t
val compare_option : ('a -> 'a -> int) -> 'a option -> 'a option -> int
val equal_option : ('a -> 'a -> bool) -> 'a option -> 'a option -> bool
val globalize_option : ('a -> 'a) -> 'a option -> 'a option
val hash_fold_option :
  (Base__.Ppx_hash_lib.Std.Hash.state ->
   'a -> Base__.Ppx_hash_lib.Std.Hash.state) ->
  Base__.Ppx_hash_lib.Std.Hash.state ->
  'a option -> Base__.Ppx_hash_lib.Std.Hash.state
val option_of_sexp : (Sexplib0.Sexp.t -> 'a) -> Sexplib0.Sexp.t -> 'a option
val sexp_of_option : ('a -> Sexplib0.Sexp.t) -> 'a option -> Sexplib0.Sexp.t
val option_sexp_grammar :
  'a Sexplib0.Sexp_grammar.t -> 'a option Sexplib0.Sexp_grammar.t
type 'a ref = 'a Ref.t
val compare_ref : ('a -> 'a -> int) -> 'a ref -> 'a ref -> int
val equal_ref : ('a -> 'a -> bool) -> 'a ref -> 'a ref -> bool
val globalize_ref : ('a -> 'a) -> 'a ref -> 'a ref
val ref_of_sexp : (Sexplib0.Sexp.t -> 'a) -> Sexplib0.Sexp.t -> 'a ref
val sexp_of_ref : ('a -> Sexplib0.Sexp.t) -> 'a ref -> Sexplib0.Sexp.t
val ref_sexp_grammar :
  'a Sexplib0.Sexp_grammar.t -> 'a ref Sexplib0.Sexp_grammar.t
type string = String.t
val compare_string : string -> string -> int
val equal_string : string -> string -> bool
val globalize_string : string -> string
val hash_fold_string :
  Base__.Ppx_hash_lib.Std.Hash.state ->
  string -> Base__.Ppx_hash_lib.Std.Hash.state
val hash_string : string -> Base__.Ppx_hash_lib.Std.Hash.hash_value
val string_of_sexp : Sexplib0.Sexp.t -> string
val sexp_of_string : string -> Sexplib0.Sexp.t
val string_sexp_grammar : string Sexplib0.Sexp_grammar.t
type bytes = Bytes.t
val compare_bytes : bytes -> bytes -> int
val equal_bytes : bytes -> bytes -> bool
val globalize_bytes : bytes -> bytes
val bytes_of_sexp : Sexplib0.Sexp.t -> bytes
val sexp_of_bytes : bytes -> Sexplib0.Sexp.t
val bytes_sexp_grammar : bytes Sexplib0.Sexp_grammar.t
type unit = Unit.t
val compare_unit : unit -> unit -> int
val equal_unit : unit -> unit -> bool
val globalize_unit : unit -> unit
val hash_fold_unit :
  Base__.Ppx_hash_lib.Std.Hash.state ->
  unit -> Base__.Ppx_hash_lib.Std.Hash.state
val hash_unit : unit -> Base__.Ppx_hash_lib.Std.Hash.hash_value
val unit_of_sexp : Sexplib0.Sexp.t -> unit
val sexp_of_unit : unit -> Sexplib0.Sexp.t
val unit_sexp_grammar : unit Sexplib0.Sexp_grammar.t
type nonrec ('a, 'b, 'c) format = ('a, 'b, 'c) format
type nonrec ('a, 'b, 'c, 'd) format4 = ('a, 'b, 'c, 'd) format4
type nonrec ('a, 'b, 'c, 'd, 'e, 'f) format6 =
    ('a, 'b, 'c, 'd, 'e, 'f) format6
val ( @ ) : 'a Base__List.t -> 'a Base__List.t -> 'a Base__List.t
external ( + ) : Base__Int.t -> Base__Int.t -> Base__Int.t = "%addint"
external ( - ) : Base__Int.t -> Base__Int.t -> Base__Int.t = "%subint"
external ( * ) : Base__Int.t -> Base__Int.t -> Base__Int.t = "%mulint"
external ( / ) : Base__Int.t -> Base__Int.t -> Base__Int.t = "%divint"
external ( ~- ) : Base__Int.t -> Base__Int.t = "%negint"
val ( ** ) : Base__Int.t -> Base__Int.t -> Base__Int.t
external ( land ) : Base__Int.t -> Base__Int.t -> Base__Int.t = "%andint"
external ( lor ) : Base__Int.t -> Base__Int.t -> Base__Int.t = "%orint"
external ( lxor ) : Base__Int.t -> Base__Int.t -> Base__Int.t = "%xorint"
val lnot : Base__Int.t -> Base__Int.t
val abs : Base__Int.t -> Base__Int.t
external neg : Base__Int.t -> Base__Int.t = "%negint"
val zero : Base__Int.t
val ( % ) : Base__Int.t -> Base__Int.t -> Base__Int.t
val ( /% ) : Base__Int.t -> Base__Int.t -> Base__Int.t
val ( // ) : Base__Int.t -> Base__Int.t -> float
external ( lsl ) : Base__Int.t -> int -> Base__Int.t = "%lslint"
external ( asr ) : Base__Int.t -> int -> Base__Int.t = "%asrint"
external ( lsr ) : Base__Int.t -> int -> Base__Int.t = "%lsrint"
external ( = ) : int -> int -> bool = "%equal"
external ( <> ) : int -> int -> bool = "%notequal"
external ( < ) : int -> int -> bool = "%lessthan"
external ( > ) : int -> int -> bool = "%greaterthan"
external ( <= ) : int -> int -> bool = "%lessequal"
external ( >= ) : int -> int -> bool = "%greaterequal"
external compare : int -> int -> int = "%compare"
external equal : int -> int -> bool = "%equal"
val ascending : int -> int -> int
val descending : int -> int -> int
val max : int -> int -> int
val min : int -> int -> int
val ( +. ) : Base__Float.t -> Base__Float.t -> Base__Float.t
val ( -. ) : Base__Float.t -> Base__Float.t -> Base__Float.t
val ( *. ) : Base__Float.t -> Base__Float.t -> Base__Float.t
val ( /. ) : Base__Float.t -> Base__Float.t -> Base__Float.t
val ( %. ) : Base__Float.t -> Base__Float.t -> Base__Float.t
val ( **. ) : Base__Float.t -> Base__Float.t -> Base__Float.t
val ( ~-. ) : Base__Float.t -> Base__Float.t
external ( |> ) : 'a -> ('a -> 'b) -> 'b = "%revapply"
external ( @@ ) : ('a -> 'b) -> 'a -> 'b = "%apply"
external ( && ) : bool -> bool -> bool = "%sequand"
external ( || ) : bool -> bool -> bool = "%sequor"
external not : bool -> bool = "%boolnot"
external ignore : 'a -> unit = "%ignore"
val ( ^ ) : String.t -> String.t -> String.t
external ( ! ) : 'a ref -> 'a = "%field0"
external ref : 'a -> 'a ref = "%makemutable"
external ( := ) : 'a ref -> 'a -> unit = "%setfield0"
val fst : 'a * 'b -> 'a
val snd : 'a * 'b -> 'b
external raise : exn -> 'a = "%raise"
val failwith : string -> 'a
val invalid_arg : string -> 'a
val raise_s : Base__.Sexp.t -> 'a
external phys_equal : 'a -> 'a -> bool = "%eq"
external force : 'a Lazy.t -> 'a = "%lazy_force"
module Continue_or_stop = Base__Container_intf.Export.Continue_or_stop
("DEBUG:rule", [(("raise_notrace", 21065), ((Tag1 (0, (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -1283), ((("a")), 100000000, 0, -1282), 0), 100000000, 0, -1281), (("%raise_notrace", 1, 1, "", [0], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 10, 312, 315), ("shadow-stdlib/src/shadow_stdlib.mli", 10, 312, 325), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.raise_notrace] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 10, 312, 327), ("shadow-stdlib/src/shadow_stdlib.mli", 13, 468, 517), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 10, 312, 326), ("shadow-stdlib/src/shadow_stdlib.mli", 13, 468, 518), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 10, 312, 326), ("shadow-stdlib/src/shadow_stdlib.mli", 13, 468, 518), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 10, 312, 312), ("shadow-stdlib/src/shadow_stdlib.mli", 13, 468, 519), 0))], Tag1 ("Shadow_stdlib", 1)), 0); Tag2 (("Exit", 21066), ((Tag3 ("exn", 7)), 0, (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 28, 1006, 1008), ("shadow-stdlib/src/shadow_stdlib.mli", 28, 1006, 1018), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.Exit instead", (("shadow-stdlib/src/shadow_stdlib.mli", 28, 1006, 1020), ("shadow-stdlib/src/shadow_stdlib.mli", 32, 1241, 1285), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 28, 1006, 1019), ("shadow-stdlib/src/shadow_stdlib.mli", 32, 1241, 1286), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 28, 1006, 1019), ("shadow-stdlib/src/shadow_stdlib.mli", 32, 1241, 1286), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 28, 1006, 1006), ("shadow-stdlib/src/shadow_stdlib.mli", 32, 1241, 1287), 0))], Tag1 ("Shadow_stdlib", 4)), 2, 0); Tag2 (("Not_found", 21067), ((Tag3 ("exn", 7)), 0, (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 35, 1309, 1311), ("shadow-stdlib/src/shadow_stdlib.mli", 35, 1309, 1321), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nInstead of raising [Not_found], consider using [raise_s] with an informative error\nmessage.  If code needs to distinguish [Not_found] from other exceptions, please change\nit to handle both [Not_found] and [Not_found_s].  Then, instead of raising [Not_found],\nraise [Not_found_s] with an informative error message.", (("shadow-stdlib/src/shadow_stdlib.mli", 35, 1309, 1323), ("shadow-stdlib/src/shadow_stdlib.mli", 40, 1653, 1707), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 35, 1309, 1322), ("shadow-stdlib/src/shadow_stdlib.mli", 40, 1653, 1708), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 35, 1309, 1322), ("shadow-stdlib/src/shadow_stdlib.mli", 40, 1653, 1708), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 35, 1309, 1309), ("shadow-stdlib/src/shadow_stdlib.mli", 40, 1653, 1709), 0))], Tag1 ("Shadow_stdlib", 5)), 2, 0); (("==", 21068), ((Tag1 (0, ((("a")), 100000000, 0, -1280), (Tag1 (0, ((("a")), 100000000, 0, -1280), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1279), 0), 100000000, 0, -1278), 0), 100000000, 0, -1277), (("%eq", 2, 1, "", [0; 0], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 97, 3958, 3961), ("shadow-stdlib/src/shadow_stdlib.mli", 97, 3958, 3971), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [phys_equal] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 97, 3958, 3973), ("shadow-stdlib/src/shadow_stdlib.mli", 99, 4044, 4069), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 97, 3958, 3972), ("shadow-stdlib/src/shadow_stdlib.mli", 99, 4044, 4070), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 97, 3958, 3972), ("shadow-stdlib/src/shadow_stdlib.mli", 99, 4044, 4070), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 97, 3958, 3958), ("shadow-stdlib/src/shadow_stdlib.mli", 99, 4044, 4071), 0))], Tag1 ("Shadow_stdlib", 15)), 0); (("!=", 21069), ((Tag1 (0, ((("a")), 100000000, 0, -1276), (Tag1 (0, ((("a")), 100000000, 0, -1276), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1275), 0), 100000000, 0, -1274), 0), 100000000, 0, -1273), (("%noteq", 2, 1, "", [0; 0], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 102, 4119, 4122), ("shadow-stdlib/src/shadow_stdlib.mli", 102, 4119, 4132), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [not (phys_equal ...)] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 102, 4119, 4134), ("shadow-stdlib/src/shadow_stdlib.mli", 104, 4205, 4240), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 102, 4119, 4133), ("shadow-stdlib/src/shadow_stdlib.mli", 104, 4205, 4241), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 102, 4119, 4133), ("shadow-stdlib/src/shadow_stdlib.mli", 104, 4205, 4241), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 102, 4119, 4119), ("shadow-stdlib/src/shadow_stdlib.mli", 104, 4205, 4242), 0))], Tag1 ("Shadow_stdlib", 16)), 0); (("__LOC__", 21070), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1272), (("%loc_LOC", 0, 1, "", 0, 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 125, 5030, 5033), ("shadow-stdlib/src/shadow_stdlib.mli", 125, 5030, 5043), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.__LOC__] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 125, 5030, 5045), ("shadow-stdlib/src/shadow_stdlib.mli", 128, 5186, 5229), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 125, 5030, 5044), ("shadow-stdlib/src/shadow_stdlib.mli", 128, 5186, 5230), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 125, 5030, 5044), ("shadow-stdlib/src/shadow_stdlib.mli", 128, 5186, 5230), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 125, 5030, 5030), ("shadow-stdlib/src/shadow_stdlib.mli", 128, 5186, 5231), 0))], Tag1 ("Shadow_stdlib", 20)), 0); (("__FILE__", 21071), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1271), (("%loc_FILE", 0, 1, "", 0, 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 131, 5274, 5277), ("shadow-stdlib/src/shadow_stdlib.mli", 131, 5274, 5287), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.__FILE__] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 131, 5274, 5289), ("shadow-stdlib/src/shadow_stdlib.mli", 134, 5430, 5474), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 131, 5274, 5288), ("shadow-stdlib/src/shadow_stdlib.mli", 134, 5430, 5475), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 131, 5274, 5288), ("shadow-stdlib/src/shadow_stdlib.mli", 134, 5430, 5475), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 131, 5274, 5274), ("shadow-stdlib/src/shadow_stdlib.mli", 134, 5430, 5476), 0))], Tag1 ("Shadow_stdlib", 21)), 0); (("__LINE__", 21072), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1270), (("%loc_LINE", 0, 1, "", 0, 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 137, 5516, 5519), ("shadow-stdlib/src/shadow_stdlib.mli", 137, 5516, 5529), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.__LINE__] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 137, 5516, 5531), ("shadow-stdlib/src/shadow_stdlib.mli", 140, 5672, 5716), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 137, 5516, 5530), ("shadow-stdlib/src/shadow_stdlib.mli", 140, 5672, 5717), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 137, 5516, 5530), ("shadow-stdlib/src/shadow_stdlib.mli", 140, 5672, 5717), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 137, 5516, 5516), ("shadow-stdlib/src/shadow_stdlib.mli", 140, 5672, 5718), 0))], Tag1 ("Shadow_stdlib", 22)), 0); (("__MODULE__", 21073), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1269), (("%loc_MODULE", 0, 1, "", 0, 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 143, 5765, 5768), ("shadow-stdlib/src/shadow_stdlib.mli", 143, 5765, 5778), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.__MODULE__] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 143, 5765, 5780), ("shadow-stdlib/src/shadow_stdlib.mli", 146, 5921, 5967), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 143, 5765, 5779), ("shadow-stdlib/src/shadow_stdlib.mli", 146, 5921, 5968), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 143, 5765, 5779), ("shadow-stdlib/src/shadow_stdlib.mli", 146, 5921, 5968), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 143, 5765, 5765), ("shadow-stdlib/src/shadow_stdlib.mli", 146, 5921, 5969), 0))], Tag1 ("Shadow_stdlib", 23)), 0); (("__POS__", 21074), ((Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1265); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1266); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1267); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1268)]), 100000000, 0, -1264), (("%loc_POS", 0, 1, "", 0, 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 149, 6028, 6031), ("shadow-stdlib/src/shadow_stdlib.mli", 149, 6028, 6041), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.__POS__] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 149, 6028, 6043), ("shadow-stdlib/src/shadow_stdlib.mli", 152, 6184, 6227), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 149, 6028, 6042), ("shadow-stdlib/src/shadow_stdlib.mli", 152, 6184, 6228), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 149, 6028, 6042), ("shadow-stdlib/src/shadow_stdlib.mli", 152, 6184, 6228), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 149, 6028, 6028), ("shadow-stdlib/src/shadow_stdlib.mli", 152, 6184, 6229), 0))], Tag1 ("Shadow_stdlib", 24)), 0); (("__FUNCTION__", 21075), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1263), (("%loc_FUNCTION", 0, 1, "", 0, 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 155, 6280, 6283), ("shadow-stdlib/src/shadow_stdlib.mli", 155, 6280, 6293), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.__FUNCTION__] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 155, 6280, 6295), ("shadow-stdlib/src/shadow_stdlib.mli", 158, 6436, 6484), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 155, 6280, 6294), ("shadow-stdlib/src/shadow_stdlib.mli", 158, 6436, 6485), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 155, 6280, 6294), ("shadow-stdlib/src/shadow_stdlib.mli", 158, 6436, 6485), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 155, 6280, 6280), ("shadow-stdlib/src/shadow_stdlib.mli", 158, 6436, 6486), 0))], Tag1 ("Shadow_stdlib", 25)), 0); (("__LOC_OF__", 21076), ((Tag1 (0, ((("a")), 100000000, 0, -1262), (Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1261); ((("a")), 100000000, 0, -1262)]), 100000000, 0, -1260), 0), 100000000, 0, -1259), (("%loc_LOC", 1, 1, "", [0], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 161, 6541, 6544), ("shadow-stdlib/src/shadow_stdlib.mli", 161, 6541, 6554), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.__LOC_OF__] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 161, 6541, 6556), ("shadow-stdlib/src/shadow_stdlib.mli", 164, 6697, 6743), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 161, 6541, 6555), ("shadow-stdlib/src/shadow_stdlib.mli", 164, 6697, 6744), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 161, 6541, 6555), ("shadow-stdlib/src/shadow_stdlib.mli", 164, 6697, 6744), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 161, 6541, 6541), ("shadow-stdlib/src/shadow_stdlib.mli", 164, 6697, 6745), 0))], Tag1 ("Shadow_stdlib", 26)), 0); (("__LINE_OF__", 21077), ((Tag1 (0, ((("a")), 100000000, 0, -1258), (Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1257); ((("a")), 100000000, 0, -1258)]), 100000000, 0, -1256), 0), 100000000, 0, -1255), (("%loc_LINE", 1, 1, "", [0], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 167, 6799, 6802), ("shadow-stdlib/src/shadow_stdlib.mli", 167, 6799, 6812), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.__LINE_OF__] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 167, 6799, 6814), ("shadow-stdlib/src/shadow_stdlib.mli", 170, 6955, 7002), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 167, 6799, 6813), ("shadow-stdlib/src/shadow_stdlib.mli", 170, 6955, 7003), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 167, 6799, 6813), ("shadow-stdlib/src/shadow_stdlib.mli", 170, 6955, 7003), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 167, 6799, 6799), ("shadow-stdlib/src/shadow_stdlib.mli", 170, 6955, 7004), 0))], Tag1 ("Shadow_stdlib", 27)), 0); (("__POS_OF__", 21078), ((Tag1 (0, ((("a")), 100000000, 0, -1254), (Tag2 ([(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1250); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1251); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1252); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1253)]), 100000000, 0, -1249); ((("a")), 100000000, 0, -1254)]), 100000000, 0, -1248), 0), 100000000, 0, -1247), (("%loc_POS", 1, 1, "", [0], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 173, 7079, 7082), ("shadow-stdlib/src/shadow_stdlib.mli", 173, 7079, 7092), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.__POS_OF__] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 173, 7079, 7094), ("shadow-stdlib/src/shadow_stdlib.mli", 176, 7235, 7281), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 173, 7079, 7093), ("shadow-stdlib/src/shadow_stdlib.mli", 176, 7235, 7282), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 173, 7079, 7093), ("shadow-stdlib/src/shadow_stdlib.mli", 176, 7235, 7282), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 173, 7079, 7079), ("shadow-stdlib/src/shadow_stdlib.mli", 176, 7235, 7283), 0))], Tag1 ("Shadow_stdlib", 28)), 0); (("~+", 21079), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1246), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1245), 0), 100000000, 0, -1244), (("%identity", 1, 1, "", [0], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 197, 8082, 8085), ("shadow-stdlib/src/shadow_stdlib.mli", 197, 8082, 8095), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.( ~+ )] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 197, 8082, 8097), ("shadow-stdlib/src/shadow_stdlib.mli", 200, 8238, 8280), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 197, 8082, 8096), ("shadow-stdlib/src/shadow_stdlib.mli", 200, 8238, 8281), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 197, 8082, 8096), ("shadow-stdlib/src/shadow_stdlib.mli", 200, 8238, 8281), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 197, 8082, 8082), ("shadow-stdlib/src/shadow_stdlib.mli", 200, 8238, 8282), 0))], Tag1 ("Shadow_stdlib", 32)), 0); (("succ", 21080), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1243), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1242), 0), 100000000, 0, -1241), (("%succint", 1, 1, "", [0], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 203, 8324, 8327), ("shadow-stdlib/src/shadow_stdlib.mli", 203, 8324, 8337), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Int.succ] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 203, 8324, 8339), ("shadow-stdlib/src/shadow_stdlib.mli", 205, 8410, 8433), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 203, 8324, 8338), ("shadow-stdlib/src/shadow_stdlib.mli", 205, 8410, 8434), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 203, 8324, 8338), ("shadow-stdlib/src/shadow_stdlib.mli", 205, 8410, 8434), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 203, 8324, 8324), ("shadow-stdlib/src/shadow_stdlib.mli", 205, 8410, 8435), 0))], Tag1 ("Shadow_stdlib", 33)), 0); (("pred", 21081), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1240), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1239), 0), 100000000, 0, -1238), (("%predint", 1, 1, "", [0], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 208, 8477, 8480), ("shadow-stdlib/src/shadow_stdlib.mli", 208, 8477, 8490), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Int.pred] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 208, 8477, 8492), ("shadow-stdlib/src/shadow_stdlib.mli", 210, 8563, 8586), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 208, 8477, 8491), ("shadow-stdlib/src/shadow_stdlib.mli", 210, 8563, 8587), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 208, 8477, 8491), ("shadow-stdlib/src/shadow_stdlib.mli", 210, 8563, 8587), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 208, 8477, 8477), ("shadow-stdlib/src/shadow_stdlib.mli", 210, 8563, 8588), 0))], Tag1 ("Shadow_stdlib", 34)), 0); (("mod", 21082), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1237), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1236), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1235), 0), 100000000, 0, -1234), 0), 100000000, 0, -1233), (("%modint", 2, 1, "", [0; 0], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 237, 9631, 9634), ("shadow-stdlib/src/shadow_stdlib.mli", 237, 9631, 9644), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse (%), which has slightly different semantics, or Int.rem which is equivalent.", (("shadow-stdlib/src/shadow_stdlib.mli", 237, 9631, 9646), ("shadow-stdlib/src/shadow_stdlib.mli", 239, 9717, 9797), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 237, 9631, 9645), ("shadow-stdlib/src/shadow_stdlib.mli", 239, 9717, 9798), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 237, 9631, 9645), ("shadow-stdlib/src/shadow_stdlib.mli", 239, 9717, 9798), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 237, 9631, 9631), ("shadow-stdlib/src/shadow_stdlib.mli", 239, 9717, 9799), 0))], Tag1 ("Shadow_stdlib", 39)), 0); (("max_int", 21083), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1232), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 248, 10039, 10042), ("shadow-stdlib/src/shadow_stdlib.mli", 248, 10039, 10052), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Int.max_value] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 248, 10039, 10054), ("shadow-stdlib/src/shadow_stdlib.mli", 250, 10125, 10153), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 248, 10039, 10053), ("shadow-stdlib/src/shadow_stdlib.mli", 250, 10125, 10154), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 248, 10039, 10053), ("shadow-stdlib/src/shadow_stdlib.mli", 250, 10125, 10154), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 248, 10039, 10039), ("shadow-stdlib/src/shadow_stdlib.mli", 250, 10125, 10155), 0))], Tag1 ("Shadow_stdlib", 41)), 0); (("min_int", 21084), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1231), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 253, 10175, 10178), ("shadow-stdlib/src/shadow_stdlib.mli", 253, 10175, 10188), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Int.min_value] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 253, 10175, 10190), ("shadow-stdlib/src/shadow_stdlib.mli", 255, 10261, 10289), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 253, 10175, 10189), ("shadow-stdlib/src/shadow_stdlib.mli", 255, 10261, 10290), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 253, 10175, 10189), ("shadow-stdlib/src/shadow_stdlib.mli", 255, 10261, 10290), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 253, 10175, 10175), ("shadow-stdlib/src/shadow_stdlib.mli", 255, 10261, 10291), 0))], Tag1 ("Shadow_stdlib", 42)), 0); (("~+.", 21085), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1230), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1229), 0), 100000000, 0, -1228), (("%identity", 1, 1, "", [0], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 306, 12329, 12332), ("shadow-stdlib/src/shadow_stdlib.mli", 306, 12329, 12342), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.( ~+. )] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 306, 12329, 12344), ("shadow-stdlib/src/shadow_stdlib.mli", 309, 12485, 12528), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 306, 12329, 12343), ("shadow-stdlib/src/shadow_stdlib.mli", 309, 12485, 12529), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 306, 12329, 12343), ("shadow-stdlib/src/shadow_stdlib.mli", 309, 12485, 12529), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 306, 12329, 12329), ("shadow-stdlib/src/shadow_stdlib.mli", 309, 12485, 12530), 0))], Tag1 ("Shadow_stdlib", 51)), 0); (("sqrt", 21086), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1227), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1226), 0), 100000000, 0, -1225), (("caml_sqrt_float", 1, 0, "sqrt", [1], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("unboxed", (("shadow-stdlib/src/shadow_stdlib.mli", 340, 13765, 13826), ("shadow-stdlib/src/shadow_stdlib.mli", 340, 13765, 13833), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 340, 13765, 13823), ("shadow-stdlib/src/shadow_stdlib.mli", 340, 13765, 13834), 0)); (("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 340, 13765, 13838), ("shadow-stdlib/src/shadow_stdlib.mli", 340, 13765, 13845), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 340, 13765, 13835), ("shadow-stdlib/src/shadow_stdlib.mli", 340, 13765, 13846), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 341, 13847, 13850), ("shadow-stdlib/src/shadow_stdlib.mli", 341, 13847, 13860), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.sqrt] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 341, 13847, 13862), ("shadow-stdlib/src/shadow_stdlib.mli", 343, 13933, 13958), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 341, 13847, 13861), ("shadow-stdlib/src/shadow_stdlib.mli", 343, 13933, 13959), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 341, 13847, 13861), ("shadow-stdlib/src/shadow_stdlib.mli", 343, 13933, 13959), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 341, 13847, 13847), ("shadow-stdlib/src/shadow_stdlib.mli", 343, 13933, 13960), 0))], Tag1 ("Shadow_stdlib", 57)), 0); (("exp", 21087), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1224), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1223), 0), 100000000, 0, -1222), (("caml_exp_float", 1, 0, "exp", [1], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("unboxed", (("shadow-stdlib/src/shadow_stdlib.mli", 345, 13962, 14020), ("shadow-stdlib/src/shadow_stdlib.mli", 345, 13962, 14027), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 345, 13962, 14017), ("shadow-stdlib/src/shadow_stdlib.mli", 345, 13962, 14028), 0)); (("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 345, 13962, 14032), ("shadow-stdlib/src/shadow_stdlib.mli", 345, 13962, 14039), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 345, 13962, 14029), ("shadow-stdlib/src/shadow_stdlib.mli", 345, 13962, 14040), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 346, 14041, 14044), ("shadow-stdlib/src/shadow_stdlib.mli", 346, 14041, 14054), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.exp] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 346, 14041, 14056), ("shadow-stdlib/src/shadow_stdlib.mli", 348, 14127, 14151), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 346, 14041, 14055), ("shadow-stdlib/src/shadow_stdlib.mli", 348, 14127, 14152), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 346, 14041, 14055), ("shadow-stdlib/src/shadow_stdlib.mli", 348, 14127, 14152), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 346, 14041, 14041), ("shadow-stdlib/src/shadow_stdlib.mli", 348, 14127, 14153), 0))], Tag1 ("Shadow_stdlib", 58)), 0); (("log", 21088), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1221), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1220), 0), 100000000, 0, -1219), (("caml_log_float", 1, 0, "log", [1], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("unboxed", (("shadow-stdlib/src/shadow_stdlib.mli", 350, 14155, 14213), ("shadow-stdlib/src/shadow_stdlib.mli", 350, 14155, 14220), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 350, 14155, 14210), ("shadow-stdlib/src/shadow_stdlib.mli", 350, 14155, 14221), 0)); (("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 350, 14155, 14225), ("shadow-stdlib/src/shadow_stdlib.mli", 350, 14155, 14232), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 350, 14155, 14222), ("shadow-stdlib/src/shadow_stdlib.mli", 350, 14155, 14233), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 351, 14234, 14237), ("shadow-stdlib/src/shadow_stdlib.mli", 351, 14234, 14247), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.log] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 351, 14234, 14249), ("shadow-stdlib/src/shadow_stdlib.mli", 353, 14320, 14344), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 351, 14234, 14248), ("shadow-stdlib/src/shadow_stdlib.mli", 353, 14320, 14345), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 351, 14234, 14248), ("shadow-stdlib/src/shadow_stdlib.mli", 353, 14320, 14345), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 351, 14234, 14234), ("shadow-stdlib/src/shadow_stdlib.mli", 353, 14320, 14346), 0))], Tag1 ("Shadow_stdlib", 59)), 0); (("log10", 21089), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1218), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1217), 0), 100000000, 0, -1216), (("caml_log10_float", 1, 0, "log10", [1], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("unboxed", (("shadow-stdlib/src/shadow_stdlib.mli", 355, 14348, 14412), ("shadow-stdlib/src/shadow_stdlib.mli", 355, 14348, 14419), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 355, 14348, 14409), ("shadow-stdlib/src/shadow_stdlib.mli", 355, 14348, 14420), 0)); (("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 355, 14348, 14424), ("shadow-stdlib/src/shadow_stdlib.mli", 355, 14348, 14431), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 355, 14348, 14421), ("shadow-stdlib/src/shadow_stdlib.mli", 355, 14348, 14432), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 356, 14433, 14436), ("shadow-stdlib/src/shadow_stdlib.mli", 356, 14433, 14446), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.log10] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 356, 14433, 14448), ("shadow-stdlib/src/shadow_stdlib.mli", 358, 14519, 14545), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 356, 14433, 14447), ("shadow-stdlib/src/shadow_stdlib.mli", 358, 14519, 14546), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 356, 14433, 14447), ("shadow-stdlib/src/shadow_stdlib.mli", 358, 14519, 14546), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 356, 14433, 14433), ("shadow-stdlib/src/shadow_stdlib.mli", 358, 14519, 14547), 0))], Tag1 ("Shadow_stdlib", 60)), 0); (("expm1", 21090), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1215), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1214), 0), 100000000, 0, -1213), (("caml_expm1_float", 1, 0, "caml_expm1", [1], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("unboxed", (("shadow-stdlib/src/shadow_stdlib.mli", 360, 14549, 14618), ("shadow-stdlib/src/shadow_stdlib.mli", 360, 14549, 14625), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 360, 14549, 14615), ("shadow-stdlib/src/shadow_stdlib.mli", 360, 14549, 14626), 0)); (("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 360, 14549, 14630), ("shadow-stdlib/src/shadow_stdlib.mli", 360, 14549, 14637), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 360, 14549, 14627), ("shadow-stdlib/src/shadow_stdlib.mli", 360, 14549, 14638), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 361, 14639, 14642), ("shadow-stdlib/src/shadow_stdlib.mli", 361, 14639, 14652), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.expm1] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 361, 14639, 14654), ("shadow-stdlib/src/shadow_stdlib.mli", 363, 14725, 14751), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 361, 14639, 14653), ("shadow-stdlib/src/shadow_stdlib.mli", 363, 14725, 14752), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 361, 14639, 14653), ("shadow-stdlib/src/shadow_stdlib.mli", 363, 14725, 14752), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 361, 14639, 14639), ("shadow-stdlib/src/shadow_stdlib.mli", 363, 14725, 14753), 0))], Tag1 ("Shadow_stdlib", 61)), 0); (("log1p", 21091), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1212), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1211), 0), 100000000, 0, -1210), (("caml_log1p_float", 1, 0, "caml_log1p", [1], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("unboxed", (("shadow-stdlib/src/shadow_stdlib.mli", 365, 14755, 14824), ("shadow-stdlib/src/shadow_stdlib.mli", 365, 14755, 14831), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 365, 14755, 14821), ("shadow-stdlib/src/shadow_stdlib.mli", 365, 14755, 14832), 0)); (("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 365, 14755, 14836), ("shadow-stdlib/src/shadow_stdlib.mli", 365, 14755, 14843), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 365, 14755, 14833), ("shadow-stdlib/src/shadow_stdlib.mli", 365, 14755, 14844), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 366, 14845, 14848), ("shadow-stdlib/src/shadow_stdlib.mli", 366, 14845, 14858), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.log1p] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 366, 14845, 14860), ("shadow-stdlib/src/shadow_stdlib.mli", 368, 14931, 14957), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 366, 14845, 14859), ("shadow-stdlib/src/shadow_stdlib.mli", 368, 14931, 14958), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 366, 14845, 14859), ("shadow-stdlib/src/shadow_stdlib.mli", 368, 14931, 14958), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 366, 14845, 14845), ("shadow-stdlib/src/shadow_stdlib.mli", 368, 14931, 14959), 0))], Tag1 ("Shadow_stdlib", 62)), 0); (("cos", 21092), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1209), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1208), 0), 100000000, 0, -1207), (("caml_cos_float", 1, 0, "cos", [1], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("unboxed", (("shadow-stdlib/src/shadow_stdlib.mli", 370, 14961, 15019), ("shadow-stdlib/src/shadow_stdlib.mli", 370, 14961, 15026), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 370, 14961, 15016), ("shadow-stdlib/src/shadow_stdlib.mli", 370, 14961, 15027), 0)); (("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 370, 14961, 15031), ("shadow-stdlib/src/shadow_stdlib.mli", 370, 14961, 15038), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 370, 14961, 15028), ("shadow-stdlib/src/shadow_stdlib.mli", 370, 14961, 15039), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 371, 15040, 15043), ("shadow-stdlib/src/shadow_stdlib.mli", 371, 15040, 15053), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.cos] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 371, 15040, 15055), ("shadow-stdlib/src/shadow_stdlib.mli", 373, 15126, 15150), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 371, 15040, 15054), ("shadow-stdlib/src/shadow_stdlib.mli", 373, 15126, 15151), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 371, 15040, 15054), ("shadow-stdlib/src/shadow_stdlib.mli", 373, 15126, 15151), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 371, 15040, 15040), ("shadow-stdlib/src/shadow_stdlib.mli", 373, 15126, 15152), 0))], Tag1 ("Shadow_stdlib", 63)), 0); (("sin", 21093), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1206), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1205), 0), 100000000, 0, -1204), (("caml_sin_float", 1, 0, "sin", [1], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("unboxed", (("shadow-stdlib/src/shadow_stdlib.mli", 375, 15154, 15212), ("shadow-stdlib/src/shadow_stdlib.mli", 375, 15154, 15219), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 375, 15154, 15209), ("shadow-stdlib/src/shadow_stdlib.mli", 375, 15154, 15220), 0)); (("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 375, 15154, 15224), ("shadow-stdlib/src/shadow_stdlib.mli", 375, 15154, 15231), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 375, 15154, 15221), ("shadow-stdlib/src/shadow_stdlib.mli", 375, 15154, 15232), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 376, 15233, 15236), ("shadow-stdlib/src/shadow_stdlib.mli", 376, 15233, 15246), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.sin] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 376, 15233, 15248), ("shadow-stdlib/src/shadow_stdlib.mli", 378, 15319, 15343), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 376, 15233, 15247), ("shadow-stdlib/src/shadow_stdlib.mli", 378, 15319, 15344), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 376, 15233, 15247), ("shadow-stdlib/src/shadow_stdlib.mli", 378, 15319, 15344), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 376, 15233, 15233), ("shadow-stdlib/src/shadow_stdlib.mli", 378, 15319, 15345), 0))], Tag1 ("Shadow_stdlib", 64)), 0); (("tan", 21094), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1203), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1202), 0), 100000000, 0, -1201), (("caml_tan_float", 1, 0, "tan", [1], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("unboxed", (("shadow-stdlib/src/shadow_stdlib.mli", 380, 15347, 15405), ("shadow-stdlib/src/shadow_stdlib.mli", 380, 15347, 15412), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 380, 15347, 15402), ("shadow-stdlib/src/shadow_stdlib.mli", 380, 15347, 15413), 0)); (("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 380, 15347, 15417), ("shadow-stdlib/src/shadow_stdlib.mli", 380, 15347, 15424), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 380, 15347, 15414), ("shadow-stdlib/src/shadow_stdlib.mli", 380, 15347, 15425), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 381, 15426, 15429), ("shadow-stdlib/src/shadow_stdlib.mli", 381, 15426, 15439), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.tan] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 381, 15426, 15441), ("shadow-stdlib/src/shadow_stdlib.mli", 383, 15512, 15536), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 381, 15426, 15440), ("shadow-stdlib/src/shadow_stdlib.mli", 383, 15512, 15537), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 381, 15426, 15440), ("shadow-stdlib/src/shadow_stdlib.mli", 383, 15512, 15537), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 381, 15426, 15426), ("shadow-stdlib/src/shadow_stdlib.mli", 383, 15512, 15538), 0))], Tag1 ("Shadow_stdlib", 65)), 0); (("acos", 21095), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1200), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1199), 0), 100000000, 0, -1198), (("caml_acos_float", 1, 0, "acos", [1], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("unboxed", (("shadow-stdlib/src/shadow_stdlib.mli", 385, 15540, 15601), ("shadow-stdlib/src/shadow_stdlib.mli", 385, 15540, 15608), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 385, 15540, 15598), ("shadow-stdlib/src/shadow_stdlib.mli", 385, 15540, 15609), 0)); (("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 385, 15540, 15613), ("shadow-stdlib/src/shadow_stdlib.mli", 385, 15540, 15620), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 385, 15540, 15610), ("shadow-stdlib/src/shadow_stdlib.mli", 385, 15540, 15621), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 386, 15622, 15625), ("shadow-stdlib/src/shadow_stdlib.mli", 386, 15622, 15635), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.acos] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 386, 15622, 15637), ("shadow-stdlib/src/shadow_stdlib.mli", 388, 15708, 15733), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 386, 15622, 15636), ("shadow-stdlib/src/shadow_stdlib.mli", 388, 15708, 15734), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 386, 15622, 15636), ("shadow-stdlib/src/shadow_stdlib.mli", 388, 15708, 15734), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 386, 15622, 15622), ("shadow-stdlib/src/shadow_stdlib.mli", 388, 15708, 15735), 0))], Tag1 ("Shadow_stdlib", 66)), 0); (("asin", 21096), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1197), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1196), 0), 100000000, 0, -1195), (("caml_asin_float", 1, 0, "asin", [1], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("unboxed", (("shadow-stdlib/src/shadow_stdlib.mli", 390, 15737, 15798), ("shadow-stdlib/src/shadow_stdlib.mli", 390, 15737, 15805), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 390, 15737, 15795), ("shadow-stdlib/src/shadow_stdlib.mli", 390, 15737, 15806), 0)); (("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 390, 15737, 15810), ("shadow-stdlib/src/shadow_stdlib.mli", 390, 15737, 15817), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 390, 15737, 15807), ("shadow-stdlib/src/shadow_stdlib.mli", 390, 15737, 15818), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 391, 15819, 15822), ("shadow-stdlib/src/shadow_stdlib.mli", 391, 15819, 15832), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.asin] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 391, 15819, 15834), ("shadow-stdlib/src/shadow_stdlib.mli", 393, 15905, 15930), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 391, 15819, 15833), ("shadow-stdlib/src/shadow_stdlib.mli", 393, 15905, 15931), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 391, 15819, 15833), ("shadow-stdlib/src/shadow_stdlib.mli", 393, 15905, 15931), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 391, 15819, 15819), ("shadow-stdlib/src/shadow_stdlib.mli", 393, 15905, 15932), 0))], Tag1 ("Shadow_stdlib", 67)), 0); (("atan", 21097), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1194), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1193), 0), 100000000, 0, -1192), (("caml_atan_float", 1, 0, "atan", [1], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("unboxed", (("shadow-stdlib/src/shadow_stdlib.mli", 395, 15934, 15995), ("shadow-stdlib/src/shadow_stdlib.mli", 395, 15934, 16002), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 395, 15934, 15992), ("shadow-stdlib/src/shadow_stdlib.mli", 395, 15934, 16003), 0)); (("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 395, 15934, 16007), ("shadow-stdlib/src/shadow_stdlib.mli", 395, 15934, 16014), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 395, 15934, 16004), ("shadow-stdlib/src/shadow_stdlib.mli", 395, 15934, 16015), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 396, 16016, 16019), ("shadow-stdlib/src/shadow_stdlib.mli", 396, 16016, 16029), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.atan] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 396, 16016, 16031), ("shadow-stdlib/src/shadow_stdlib.mli", 398, 16102, 16127), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 396, 16016, 16030), ("shadow-stdlib/src/shadow_stdlib.mli", 398, 16102, 16128), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 396, 16016, 16030), ("shadow-stdlib/src/shadow_stdlib.mli", 398, 16102, 16128), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 396, 16016, 16016), ("shadow-stdlib/src/shadow_stdlib.mli", 398, 16102, 16129), 0))], Tag1 ("Shadow_stdlib", 68)), 0); (("atan2", 21098), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1191), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1190), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1189), 0), 100000000, 0, -1188), 0), 100000000, 0, -1187), (("caml_atan2_float", 2, 0, "atan2", [1; 1], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("unboxed", (("shadow-stdlib/src/shadow_stdlib.mli", 400, 16131, 16204), ("shadow-stdlib/src/shadow_stdlib.mli", 400, 16131, 16211), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 400, 16131, 16201), ("shadow-stdlib/src/shadow_stdlib.mli", 400, 16131, 16212), 0)); (("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 400, 16131, 16216), ("shadow-stdlib/src/shadow_stdlib.mli", 400, 16131, 16223), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 400, 16131, 16213), ("shadow-stdlib/src/shadow_stdlib.mli", 400, 16131, 16224), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 401, 16225, 16228), ("shadow-stdlib/src/shadow_stdlib.mli", 401, 16225, 16238), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.atan2] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 401, 16225, 16240), ("shadow-stdlib/src/shadow_stdlib.mli", 403, 16311, 16337), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 401, 16225, 16239), ("shadow-stdlib/src/shadow_stdlib.mli", 403, 16311, 16338), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 401, 16225, 16239), ("shadow-stdlib/src/shadow_stdlib.mli", 403, 16311, 16338), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 401, 16225, 16225), ("shadow-stdlib/src/shadow_stdlib.mli", 403, 16311, 16339), 0))], Tag1 ("Shadow_stdlib", 69)), 0); (("hypot", 21099), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1186), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1185), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1184), 0), 100000000, 0, -1183), 0), 100000000, 0, -1182), (("caml_hypot_float", 2, 0, "caml_hypot", [1; 1], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("unboxed", (("shadow-stdlib/src/shadow_stdlib.mli", 405, 16341, 16419), ("shadow-stdlib/src/shadow_stdlib.mli", 405, 16341, 16426), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 405, 16341, 16416), ("shadow-stdlib/src/shadow_stdlib.mli", 405, 16341, 16427), 0)); (("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 405, 16341, 16431), ("shadow-stdlib/src/shadow_stdlib.mli", 405, 16341, 16438), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 405, 16341, 16428), ("shadow-stdlib/src/shadow_stdlib.mli", 405, 16341, 16439), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 406, 16440, 16443), ("shadow-stdlib/src/shadow_stdlib.mli", 406, 16440, 16453), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.hypot] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 406, 16440, 16455), ("shadow-stdlib/src/shadow_stdlib.mli", 408, 16526, 16552), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 406, 16440, 16454), ("shadow-stdlib/src/shadow_stdlib.mli", 408, 16526, 16553), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 406, 16440, 16454), ("shadow-stdlib/src/shadow_stdlib.mli", 408, 16526, 16553), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 406, 16440, 16440), ("shadow-stdlib/src/shadow_stdlib.mli", 408, 16526, 16554), 0))], Tag1 ("Shadow_stdlib", 70)), 0); (("cosh", 21100), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1181), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1180), 0), 100000000, 0, -1179), (("caml_cosh_float", 1, 0, "cosh", [1], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("unboxed", (("shadow-stdlib/src/shadow_stdlib.mli", 410, 16556, 16617), ("shadow-stdlib/src/shadow_stdlib.mli", 410, 16556, 16624), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 410, 16556, 16614), ("shadow-stdlib/src/shadow_stdlib.mli", 410, 16556, 16625), 0)); (("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 410, 16556, 16629), ("shadow-stdlib/src/shadow_stdlib.mli", 410, 16556, 16636), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 410, 16556, 16626), ("shadow-stdlib/src/shadow_stdlib.mli", 410, 16556, 16637), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 411, 16638, 16641), ("shadow-stdlib/src/shadow_stdlib.mli", 411, 16638, 16651), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.cosh] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 411, 16638, 16653), ("shadow-stdlib/src/shadow_stdlib.mli", 413, 16724, 16749), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 411, 16638, 16652), ("shadow-stdlib/src/shadow_stdlib.mli", 413, 16724, 16750), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 411, 16638, 16652), ("shadow-stdlib/src/shadow_stdlib.mli", 413, 16724, 16750), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 411, 16638, 16638), ("shadow-stdlib/src/shadow_stdlib.mli", 413, 16724, 16751), 0))], Tag1 ("Shadow_stdlib", 71)), 0); (("sinh", 21101), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1178), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1177), 0), 100000000, 0, -1176), (("caml_sinh_float", 1, 0, "sinh", [1], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("unboxed", (("shadow-stdlib/src/shadow_stdlib.mli", 415, 16753, 16814), ("shadow-stdlib/src/shadow_stdlib.mli", 415, 16753, 16821), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 415, 16753, 16811), ("shadow-stdlib/src/shadow_stdlib.mli", 415, 16753, 16822), 0)); (("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 415, 16753, 16826), ("shadow-stdlib/src/shadow_stdlib.mli", 415, 16753, 16833), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 415, 16753, 16823), ("shadow-stdlib/src/shadow_stdlib.mli", 415, 16753, 16834), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 416, 16835, 16838), ("shadow-stdlib/src/shadow_stdlib.mli", 416, 16835, 16848), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.sinh] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 416, 16835, 16850), ("shadow-stdlib/src/shadow_stdlib.mli", 418, 16921, 16946), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 416, 16835, 16849), ("shadow-stdlib/src/shadow_stdlib.mli", 418, 16921, 16947), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 416, 16835, 16849), ("shadow-stdlib/src/shadow_stdlib.mli", 418, 16921, 16947), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 416, 16835, 16835), ("shadow-stdlib/src/shadow_stdlib.mli", 418, 16921, 16948), 0))], Tag1 ("Shadow_stdlib", 72)), 0); (("tanh", 21102), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1175), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1174), 0), 100000000, 0, -1173), (("caml_tanh_float", 1, 0, "tanh", [1], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("unboxed", (("shadow-stdlib/src/shadow_stdlib.mli", 420, 16950, 17011), ("shadow-stdlib/src/shadow_stdlib.mli", 420, 16950, 17018), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 420, 16950, 17008), ("shadow-stdlib/src/shadow_stdlib.mli", 420, 16950, 17019), 0)); (("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 420, 16950, 17023), ("shadow-stdlib/src/shadow_stdlib.mli", 420, 16950, 17030), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 420, 16950, 17020), ("shadow-stdlib/src/shadow_stdlib.mli", 420, 16950, 17031), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 421, 17032, 17035), ("shadow-stdlib/src/shadow_stdlib.mli", 421, 17032, 17045), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.tanh] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 421, 17032, 17047), ("shadow-stdlib/src/shadow_stdlib.mli", 423, 17118, 17143), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 421, 17032, 17046), ("shadow-stdlib/src/shadow_stdlib.mli", 423, 17118, 17144), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 421, 17032, 17046), ("shadow-stdlib/src/shadow_stdlib.mli", 423, 17118, 17144), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 421, 17032, 17032), ("shadow-stdlib/src/shadow_stdlib.mli", 423, 17118, 17145), 0))], Tag1 ("Shadow_stdlib", 73)), 0); (("acosh", 21103), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1172), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1171), 0), 100000000, 0, -1170), (("caml_acosh_float", 1, 0, "caml_acosh", [1], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("unboxed", (("shadow-stdlib/src/shadow_stdlib.mli", 425, 17147, 17216), ("shadow-stdlib/src/shadow_stdlib.mli", 425, 17147, 17223), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 425, 17147, 17213), ("shadow-stdlib/src/shadow_stdlib.mli", 425, 17147, 17224), 0)); (("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 425, 17147, 17228), ("shadow-stdlib/src/shadow_stdlib.mli", 425, 17147, 17235), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 425, 17147, 17225), ("shadow-stdlib/src/shadow_stdlib.mli", 425, 17147, 17236), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 426, 17237, 17240), ("shadow-stdlib/src/shadow_stdlib.mli", 426, 17237, 17250), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.acosh] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 426, 17237, 17252), ("shadow-stdlib/src/shadow_stdlib.mli", 428, 17323, 17349), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 426, 17237, 17251), ("shadow-stdlib/src/shadow_stdlib.mli", 428, 17323, 17350), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 426, 17237, 17251), ("shadow-stdlib/src/shadow_stdlib.mli", 428, 17323, 17350), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 426, 17237, 17237), ("shadow-stdlib/src/shadow_stdlib.mli", 428, 17323, 17351), 0))], Tag1 ("Shadow_stdlib", 74)), 0); (("asinh", 21104), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1169), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1168), 0), 100000000, 0, -1167), (("caml_asinh_float", 1, 0, "caml_asinh", [1], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("unboxed", (("shadow-stdlib/src/shadow_stdlib.mli", 430, 17353, 17422), ("shadow-stdlib/src/shadow_stdlib.mli", 430, 17353, 17429), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 430, 17353, 17419), ("shadow-stdlib/src/shadow_stdlib.mli", 430, 17353, 17430), 0)); (("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 430, 17353, 17434), ("shadow-stdlib/src/shadow_stdlib.mli", 430, 17353, 17441), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 430, 17353, 17431), ("shadow-stdlib/src/shadow_stdlib.mli", 430, 17353, 17442), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 431, 17443, 17446), ("shadow-stdlib/src/shadow_stdlib.mli", 431, 17443, 17456), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.asinh] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 431, 17443, 17458), ("shadow-stdlib/src/shadow_stdlib.mli", 433, 17529, 17555), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 431, 17443, 17457), ("shadow-stdlib/src/shadow_stdlib.mli", 433, 17529, 17556), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 431, 17443, 17457), ("shadow-stdlib/src/shadow_stdlib.mli", 433, 17529, 17556), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 431, 17443, 17443), ("shadow-stdlib/src/shadow_stdlib.mli", 433, 17529, 17557), 0))], Tag1 ("Shadow_stdlib", 75)), 0); (("atanh", 21105), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1166), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1165), 0), 100000000, 0, -1164), (("caml_atanh_float", 1, 0, "caml_atanh", [1], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("unboxed", (("shadow-stdlib/src/shadow_stdlib.mli", 435, 17559, 17628), ("shadow-stdlib/src/shadow_stdlib.mli", 435, 17559, 17635), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 435, 17559, 17625), ("shadow-stdlib/src/shadow_stdlib.mli", 435, 17559, 17636), 0)); (("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 435, 17559, 17640), ("shadow-stdlib/src/shadow_stdlib.mli", 435, 17559, 17647), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 435, 17559, 17637), ("shadow-stdlib/src/shadow_stdlib.mli", 435, 17559, 17648), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 436, 17649, 17652), ("shadow-stdlib/src/shadow_stdlib.mli", 436, 17649, 17662), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.atanh] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 436, 17649, 17664), ("shadow-stdlib/src/shadow_stdlib.mli", 438, 17735, 17761), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 436, 17649, 17663), ("shadow-stdlib/src/shadow_stdlib.mli", 438, 17735, 17762), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 436, 17649, 17663), ("shadow-stdlib/src/shadow_stdlib.mli", 438, 17735, 17762), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 436, 17649, 17649), ("shadow-stdlib/src/shadow_stdlib.mli", 438, 17735, 17763), 0))], Tag1 ("Shadow_stdlib", 76)), 0); (("ceil", 21106), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1163), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1162), 0), 100000000, 0, -1161), (("caml_ceil_float", 1, 0, "ceil", [1], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("unboxed", (("shadow-stdlib/src/shadow_stdlib.mli", 440, 17765, 17826), ("shadow-stdlib/src/shadow_stdlib.mli", 440, 17765, 17833), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 440, 17765, 17823), ("shadow-stdlib/src/shadow_stdlib.mli", 440, 17765, 17834), 0)); (("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 440, 17765, 17838), ("shadow-stdlib/src/shadow_stdlib.mli", 440, 17765, 17845), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 440, 17765, 17835), ("shadow-stdlib/src/shadow_stdlib.mli", 440, 17765, 17846), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 441, 17847, 17850), ("shadow-stdlib/src/shadow_stdlib.mli", 441, 17847, 17860), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.round_up] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 441, 17847, 17862), ("shadow-stdlib/src/shadow_stdlib.mli", 443, 17933, 17962), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 441, 17847, 17861), ("shadow-stdlib/src/shadow_stdlib.mli", 443, 17933, 17963), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 441, 17847, 17861), ("shadow-stdlib/src/shadow_stdlib.mli", 443, 17933, 17963), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 441, 17847, 17847), ("shadow-stdlib/src/shadow_stdlib.mli", 443, 17933, 17964), 0))], Tag1 ("Shadow_stdlib", 77)), 0); (("floor", 21107), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1160), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1159), 0), 100000000, 0, -1158), (("caml_floor_float", 1, 0, "floor", [1], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("unboxed", (("shadow-stdlib/src/shadow_stdlib.mli", 445, 17966, 18030), ("shadow-stdlib/src/shadow_stdlib.mli", 445, 17966, 18037), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 445, 17966, 18027), ("shadow-stdlib/src/shadow_stdlib.mli", 445, 17966, 18038), 0)); (("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 445, 17966, 18042), ("shadow-stdlib/src/shadow_stdlib.mli", 445, 17966, 18049), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 445, 17966, 18039), ("shadow-stdlib/src/shadow_stdlib.mli", 445, 17966, 18050), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 446, 18051, 18054), ("shadow-stdlib/src/shadow_stdlib.mli", 446, 18051, 18064), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.round_down] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 446, 18051, 18066), ("shadow-stdlib/src/shadow_stdlib.mli", 448, 18137, 18168), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 446, 18051, 18065), ("shadow-stdlib/src/shadow_stdlib.mli", 448, 18137, 18169), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 446, 18051, 18065), ("shadow-stdlib/src/shadow_stdlib.mli", 448, 18137, 18169), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 446, 18051, 18051), ("shadow-stdlib/src/shadow_stdlib.mli", 448, 18137, 18170), 0))], Tag1 ("Shadow_stdlib", 78)), 0); (("abs_float", 21108), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1157), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1156), 0), 100000000, 0, -1155), (("%absfloat", 1, 1, "", [0], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 451, 18222, 18225), ("shadow-stdlib/src/shadow_stdlib.mli", 451, 18222, 18235), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.abs_float] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 451, 18222, 18237), ("shadow-stdlib/src/shadow_stdlib.mli", 454, 18378, 18423), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 451, 18222, 18236), ("shadow-stdlib/src/shadow_stdlib.mli", 454, 18378, 18424), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 451, 18222, 18236), ("shadow-stdlib/src/shadow_stdlib.mli", 454, 18378, 18424), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 451, 18222, 18222), ("shadow-stdlib/src/shadow_stdlib.mli", 454, 18378, 18425), 0))], Tag1 ("Shadow_stdlib", 79)), 0); (("copysign", 21109), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1154), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1153), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1152), 0), 100000000, 0, -1151), 0), 100000000, 0, -1150), (("caml_copysign_float", 2, 0, "caml_copysign", [1; 1], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("unboxed", (("shadow-stdlib/src/shadow_stdlib.mli", 456, 18427, 18514), ("shadow-stdlib/src/shadow_stdlib.mli", 456, 18427, 18521), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 456, 18427, 18511), ("shadow-stdlib/src/shadow_stdlib.mli", 456, 18427, 18522), 0)); (("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 456, 18427, 18526), ("shadow-stdlib/src/shadow_stdlib.mli", 456, 18427, 18533), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 456, 18427, 18523), ("shadow-stdlib/src/shadow_stdlib.mli", 456, 18427, 18534), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 457, 18535, 18538), ("shadow-stdlib/src/shadow_stdlib.mli", 457, 18535, 18548), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.copysign] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 457, 18535, 18550), ("shadow-stdlib/src/shadow_stdlib.mli", 459, 18621, 18650), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 457, 18535, 18549), ("shadow-stdlib/src/shadow_stdlib.mli", 459, 18621, 18651), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 457, 18535, 18549), ("shadow-stdlib/src/shadow_stdlib.mli", 459, 18621, 18651), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 457, 18535, 18535), ("shadow-stdlib/src/shadow_stdlib.mli", 459, 18621, 18652), 0))], Tag1 ("Shadow_stdlib", 80)), 0); (("mod_float", 21110), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1149), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1148), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1147), 0), 100000000, 0, -1146), 0), 100000000, 0, -1145), (("caml_fmod_float", 2, 0, "fmod", [1; 1], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("unboxed", (("shadow-stdlib/src/shadow_stdlib.mli", 461, 18654, 18729), ("shadow-stdlib/src/shadow_stdlib.mli", 461, 18654, 18736), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 461, 18654, 18726), ("shadow-stdlib/src/shadow_stdlib.mli", 461, 18654, 18737), 0)); (("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 461, 18654, 18741), ("shadow-stdlib/src/shadow_stdlib.mli", 461, 18654, 18748), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 461, 18654, 18738), ("shadow-stdlib/src/shadow_stdlib.mli", 461, 18654, 18749), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 462, 18750, 18753), ("shadow-stdlib/src/shadow_stdlib.mli", 462, 18750, 18763), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.mod_float] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 462, 18750, 18765), ("shadow-stdlib/src/shadow_stdlib.mli", 464, 18836, 18866), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 462, 18750, 18764), ("shadow-stdlib/src/shadow_stdlib.mli", 464, 18836, 18867), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 462, 18750, 18764), ("shadow-stdlib/src/shadow_stdlib.mli", 464, 18836, 18867), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 462, 18750, 18750), ("shadow-stdlib/src/shadow_stdlib.mli", 464, 18836, 18868), 0))], Tag1 ("Shadow_stdlib", 81)), 0); (("frexp", 21111), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1144), (Tag2 ([(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1142); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1143)]), 100000000, 0, -1141), 0), 100000000, 0, -1140), (("caml_frexp_float", 1, 1, "", [0], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 467, 18929, 18932), ("shadow-stdlib/src/shadow_stdlib.mli", 467, 18929, 18942), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.frexp] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 467, 18929, 18944), ("shadow-stdlib/src/shadow_stdlib.mli", 469, 19015, 19041), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 467, 18929, 18943), ("shadow-stdlib/src/shadow_stdlib.mli", 469, 19015, 19042), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 467, 18929, 18943), ("shadow-stdlib/src/shadow_stdlib.mli", 469, 19015, 19042), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 467, 18929, 18929), ("shadow-stdlib/src/shadow_stdlib.mli", 469, 19015, 19043), 0))], Tag1 ("Shadow_stdlib", 82)), 0); (("ldexp", 21112), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1139), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1138), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1137), 0), 100000000, 0, -1136), 0), 100000000, 0, -1135), (("caml_ldexp_float", 2, 0, "caml_ldexp_float_unboxed", [1; 2], 1)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 471, 19045, 19175), ("shadow-stdlib/src/shadow_stdlib.mli", 471, 19045, 19182), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 471, 19045, 19172), ("shadow-stdlib/src/shadow_stdlib.mli", 471, 19045, 19183), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 472, 19184, 19187), ("shadow-stdlib/src/shadow_stdlib.mli", 472, 19184, 19197), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.ldexp] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 472, 19184, 19199), ("shadow-stdlib/src/shadow_stdlib.mli", 474, 19270, 19296), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 472, 19184, 19198), ("shadow-stdlib/src/shadow_stdlib.mli", 474, 19270, 19297), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 472, 19184, 19198), ("shadow-stdlib/src/shadow_stdlib.mli", 474, 19270, 19297), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 472, 19184, 19184), ("shadow-stdlib/src/shadow_stdlib.mli", 474, 19270, 19298), 0))], Tag1 ("Shadow_stdlib", 83)), 0); (("modf", 21113), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1134), (Tag2 ([(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1132); (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1133)]), 100000000, 0, -1131), 0), 100000000, 0, -1130), (("caml_modf_float", 1, 1, "", [0], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 477, 19359, 19362), ("shadow-stdlib/src/shadow_stdlib.mli", 477, 19359, 19372), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.modf] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 477, 19359, 19374), ("shadow-stdlib/src/shadow_stdlib.mli", 479, 19445, 19470), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 477, 19359, 19373), ("shadow-stdlib/src/shadow_stdlib.mli", 479, 19445, 19471), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 477, 19359, 19373), ("shadow-stdlib/src/shadow_stdlib.mli", 479, 19445, 19471), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 477, 19359, 19359), ("shadow-stdlib/src/shadow_stdlib.mli", 479, 19445, 19472), 0))], Tag1 ("Shadow_stdlib", 84)), 0); (("float", 21114), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1129), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1128), 0), 100000000, 0, -1127), (("%floatofint", 1, 1, "", [0], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 482, 19520, 19523), ("shadow-stdlib/src/shadow_stdlib.mli", 482, 19520, 19533), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.of_int] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 482, 19520, 19535), ("shadow-stdlib/src/shadow_stdlib.mli", 484, 19606, 19633), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 482, 19520, 19534), ("shadow-stdlib/src/shadow_stdlib.mli", 484, 19606, 19634), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 482, 19520, 19534), ("shadow-stdlib/src/shadow_stdlib.mli", 484, 19606, 19634), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 482, 19520, 19520), ("shadow-stdlib/src/shadow_stdlib.mli", 484, 19606, 19635), 0))], Tag1 ("Shadow_stdlib", 85)), 0); (("float_of_int", 21115), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1126), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1125), 0), 100000000, 0, -1124), (("%floatofint", 1, 1, "", [0], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 487, 19690, 19693), ("shadow-stdlib/src/shadow_stdlib.mli", 487, 19690, 19703), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.of_int] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 487, 19690, 19705), ("shadow-stdlib/src/shadow_stdlib.mli", 489, 19776, 19803), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 487, 19690, 19704), ("shadow-stdlib/src/shadow_stdlib.mli", 489, 19776, 19804), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 487, 19690, 19704), ("shadow-stdlib/src/shadow_stdlib.mli", 489, 19776, 19804), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 487, 19690, 19690), ("shadow-stdlib/src/shadow_stdlib.mli", 489, 19776, 19805), 0))], Tag1 ("Shadow_stdlib", 86)), 0); (("truncate", 21116), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1123), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1122), 0), 100000000, 0, -1121), (("%intoffloat", 1, 1, "", [0], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 492, 19856, 19859), ("shadow-stdlib/src/shadow_stdlib.mli", 492, 19856, 19869), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Int.of_float] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 492, 19856, 19871), ("shadow-stdlib/src/shadow_stdlib.mli", 494, 19942, 19969), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 492, 19856, 19870), ("shadow-stdlib/src/shadow_stdlib.mli", 494, 19942, 19970), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 492, 19856, 19870), ("shadow-stdlib/src/shadow_stdlib.mli", 494, 19942, 19970), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 492, 19856, 19856), ("shadow-stdlib/src/shadow_stdlib.mli", 494, 19942, 19971), 0))], Tag1 ("Shadow_stdlib", 87)), 0); (("int_of_float", 21117), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1120), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1119), 0), 100000000, 0, -1118), (("%intoffloat", 1, 1, "", [0], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 497, 20026, 20029), ("shadow-stdlib/src/shadow_stdlib.mli", 497, 20026, 20039), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Int.of_float] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 497, 20026, 20041), ("shadow-stdlib/src/shadow_stdlib.mli", 499, 20112, 20139), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 497, 20026, 20040), ("shadow-stdlib/src/shadow_stdlib.mli", 499, 20112, 20140), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 497, 20026, 20040), ("shadow-stdlib/src/shadow_stdlib.mli", 499, 20112, 20140), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 497, 20026, 20026), ("shadow-stdlib/src/shadow_stdlib.mli", 499, 20112, 20141), 0))], Tag1 ("Shadow_stdlib", 88)), 0); (("infinity", 21118), ((Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1117), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 502, 20164, 20167), ("shadow-stdlib/src/shadow_stdlib.mli", 502, 20164, 20177), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.infinity] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 502, 20164, 20179), ("shadow-stdlib/src/shadow_stdlib.mli", 504, 20250, 20279), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 502, 20164, 20178), ("shadow-stdlib/src/shadow_stdlib.mli", 504, 20250, 20280), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 502, 20164, 20178), ("shadow-stdlib/src/shadow_stdlib.mli", 504, 20250, 20280), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 502, 20164, 20164), ("shadow-stdlib/src/shadow_stdlib.mli", 504, 20250, 20281), 0))], Tag1 ("Shadow_stdlib", 89)), 0); (("neg_infinity", 21119), ((Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1116), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 507, 20308, 20311), ("shadow-stdlib/src/shadow_stdlib.mli", 507, 20308, 20321), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.neg_infinity] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 507, 20308, 20323), ("shadow-stdlib/src/shadow_stdlib.mli", 509, 20394, 20427), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 507, 20308, 20322), ("shadow-stdlib/src/shadow_stdlib.mli", 509, 20394, 20428), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 507, 20308, 20322), ("shadow-stdlib/src/shadow_stdlib.mli", 509, 20394, 20428), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 507, 20308, 20308), ("shadow-stdlib/src/shadow_stdlib.mli", 509, 20394, 20429), 0))], Tag1 ("Shadow_stdlib", 90)), 0); (("nan", 21120), ((Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1115), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 512, 20447, 20450), ("shadow-stdlib/src/shadow_stdlib.mli", 512, 20447, 20460), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.nan] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 512, 20447, 20462), ("shadow-stdlib/src/shadow_stdlib.mli", 514, 20533, 20557), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 512, 20447, 20461), ("shadow-stdlib/src/shadow_stdlib.mli", 514, 20533, 20558), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 512, 20447, 20461), ("shadow-stdlib/src/shadow_stdlib.mli", 514, 20533, 20558), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 512, 20447, 20447), ("shadow-stdlib/src/shadow_stdlib.mli", 514, 20533, 20559), 0))], Tag1 ("Shadow_stdlib", 91)), 0); (("max_float", 21121), ((Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1114), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 517, 20583, 20586), ("shadow-stdlib/src/shadow_stdlib.mli", 517, 20583, 20596), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.max_finite_value] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 517, 20583, 20598), ("shadow-stdlib/src/shadow_stdlib.mli", 519, 20669, 20706), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 517, 20583, 20597), ("shadow-stdlib/src/shadow_stdlib.mli", 519, 20669, 20707), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 517, 20583, 20597), ("shadow-stdlib/src/shadow_stdlib.mli", 519, 20669, 20707), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 517, 20583, 20583), ("shadow-stdlib/src/shadow_stdlib.mli", 519, 20669, 20708), 0))], Tag1 ("Shadow_stdlib", 92)), 0); (("min_float", 21122), ((Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1113), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 522, 20732, 20735), ("shadow-stdlib/src/shadow_stdlib.mli", 522, 20732, 20745), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.min_positive_normal_value] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 522, 20732, 20747), ("shadow-stdlib/src/shadow_stdlib.mli", 524, 20818, 20864), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 522, 20732, 20746), ("shadow-stdlib/src/shadow_stdlib.mli", 524, 20818, 20865), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 522, 20732, 20746), ("shadow-stdlib/src/shadow_stdlib.mli", 524, 20818, 20865), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 522, 20732, 20732), ("shadow-stdlib/src/shadow_stdlib.mli", 524, 20818, 20866), 0))], Tag1 ("Shadow_stdlib", 93)), 0); (("epsilon_float", 21123), ((Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1112), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 527, 20894, 20897), ("shadow-stdlib/src/shadow_stdlib.mli", 527, 20894, 20907), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.epsilon_float] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 527, 20894, 20909), ("shadow-stdlib/src/shadow_stdlib.mli", 529, 20980, 21014), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 527, 20894, 20908), ("shadow-stdlib/src/shadow_stdlib.mli", 529, 20980, 21015), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 527, 20894, 20908), ("shadow-stdlib/src/shadow_stdlib.mli", 529, 20980, 21015), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 527, 20894, 20894), ("shadow-stdlib/src/shadow_stdlib.mli", 529, 20980, 21016), 0))], Tag1 ("Shadow_stdlib", 94)), 0); Tag1 (("fpclass", 21124), (0, 0, Tag1 ([(("FP_normal", 365), (0), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), 0, Tag1 ("Shadow_stdlib", 96)); (("FP_subnormal", 366), (0), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), 0, Tag1 ("Shadow_stdlib", 97)); (("FP_zero", 367), (0), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), 0, Tag1 ("Shadow_stdlib", 98)); (("FP_infinite", 368), (0), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), 0, Tag1 ("Shadow_stdlib", 99)); (("FP_nan", 369), (0), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), 0, Tag1 ("Shadow_stdlib", 100))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "fpclass"), 0, (0)), 100000000, 0, -1111)), 0, 0, 0, 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 532, 21115, 21118), ("shadow-stdlib/src/shadow_stdlib.mli", 532, 21115, 21128), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.fpclass instead", (("shadow-stdlib/src/shadow_stdlib.mli", 532, 21115, 21130), ("shadow-stdlib/src/shadow_stdlib.mli", 536, 21351, 21398), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 532, 21115, 21129), ("shadow-stdlib/src/shadow_stdlib.mli", 536, 21351, 21399), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 532, 21115, 21129), ("shadow-stdlib/src/shadow_stdlib.mli", 536, 21351, 21399), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 532, 21115, 21115), ("shadow-stdlib/src/shadow_stdlib.mli", 536, 21351, 21400), 0))], 1, 0, Tag1 ("Shadow_stdlib", 95)), 0, 0); (("classify_float", 21125), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1110), (Tag3 ((("fpclass", 21124)), 0, (0)), 100000000, 0, -1109), 0), 100000000, 0, -1108), (("caml_classify_float", 1, 0, "caml_classify_float_unboxed", [1], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("noalloc", (("shadow-stdlib/src/shadow_stdlib.mli", 538, 21402, 21515), ("shadow-stdlib/src/shadow_stdlib.mli", 538, 21402, 21522), 0)), (0), (("shadow-stdlib/src/shadow_stdlib.mli", 538, 21402, 21512), ("shadow-stdlib/src/shadow_stdlib.mli", 538, 21402, 21523), 0)); (("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 539, 21524, 21527), ("shadow-stdlib/src/shadow_stdlib.mli", 539, 21524, 21537), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.classify] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 539, 21524, 21539), ("shadow-stdlib/src/shadow_stdlib.mli", 541, 21610, 21639), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 539, 21524, 21538), ("shadow-stdlib/src/shadow_stdlib.mli", 541, 21610, 21640), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 539, 21524, 21538), ("shadow-stdlib/src/shadow_stdlib.mli", 541, 21610, 21640), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 539, 21524, 21524), ("shadow-stdlib/src/shadow_stdlib.mli", 541, 21610, 21641), 0))], Tag1 ("Shadow_stdlib", 101)), 0); (("int_of_char", 21126), ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -1107), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1106), 0), 100000000, 0, -1105), (("%identity", 1, 1, "", [0], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 550, 21932, 21935), ("shadow-stdlib/src/shadow_stdlib.mli", 550, 21932, 21945), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Char.to_int] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 550, 21932, 21947), ("shadow-stdlib/src/shadow_stdlib.mli", 552, 22018, 22044), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 550, 21932, 21946), ("shadow-stdlib/src/shadow_stdlib.mli", 552, 22018, 22045), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 550, 21932, 21946), ("shadow-stdlib/src/shadow_stdlib.mli", 552, 22018, 22045), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 550, 21932, 21932), ("shadow-stdlib/src/shadow_stdlib.mli", 552, 22018, 22046), 0))], Tag1 ("Shadow_stdlib", 103)), 0); (("char_of_int", 21127), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1104), (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -1103), 0), 100000000, 0, -1102), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 555, 22078, 22081), ("shadow-stdlib/src/shadow_stdlib.mli", 555, 22078, 22091), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Char.of_int_exn] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 555, 22078, 22093), ("shadow-stdlib/src/shadow_stdlib.mli", 557, 22164, 22194), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 555, 22078, 22092), ("shadow-stdlib/src/shadow_stdlib.mli", 557, 22164, 22195), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 555, 22078, 22092), ("shadow-stdlib/src/shadow_stdlib.mli", 557, 22164, 22195), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 555, 22078, 22078), ("shadow-stdlib/src/shadow_stdlib.mli", 557, 22164, 22196), 0))], Tag1 ("Shadow_stdlib", 104)), 0); (("string_of_bool", 21128), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1101), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1100), 0), 100000000, 0, -1099), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 566, 22477, 22480), ("shadow-stdlib/src/shadow_stdlib.mli", 566, 22477, 22490), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Bool.to_string] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 566, 22477, 22492), ("shadow-stdlib/src/shadow_stdlib.mli", 568, 22563, 22592), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 566, 22477, 22491), ("shadow-stdlib/src/shadow_stdlib.mli", 568, 22563, 22593), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 566, 22477, 22491), ("shadow-stdlib/src/shadow_stdlib.mli", 568, 22563, 22593), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 566, 22477, 22477), ("shadow-stdlib/src/shadow_stdlib.mli", 568, 22563, 22594), 0))], Tag1 ("Shadow_stdlib", 106)), 0); (("bool_of_string_opt", 21129), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1098), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1097)], (0)), 100000000, 0, -1096), 0), 100000000, 0, -1095), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 571, 22643, 22646), ("shadow-stdlib/src/shadow_stdlib.mli", 571, 22643, 22656), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.bool_of_string_opt] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 571, 22643, 22658), ("shadow-stdlib/src/shadow_stdlib.mli", 574, 22799, 22853), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 571, 22643, 22657), ("shadow-stdlib/src/shadow_stdlib.mli", 574, 22799, 22854), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 571, 22643, 22657), ("shadow-stdlib/src/shadow_stdlib.mli", 574, 22799, 22854), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 571, 22643, 22643), ("shadow-stdlib/src/shadow_stdlib.mli", 574, 22799, 22855), 0))], Tag1 ("Shadow_stdlib", 107)), 0); (("bool_of_string", 21130), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1094), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1093), 0), 100000000, 0, -1092), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 577, 22893, 22896), ("shadow-stdlib/src/shadow_stdlib.mli", 577, 22893, 22906), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Bool.of_string] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 577, 22893, 22908), ("shadow-stdlib/src/shadow_stdlib.mli", 579, 22979, 23008), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 577, 22893, 22907), ("shadow-stdlib/src/shadow_stdlib.mli", 579, 22979, 23009), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 577, 22893, 22907), ("shadow-stdlib/src/shadow_stdlib.mli", 579, 22979, 23009), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 577, 22893, 22893), ("shadow-stdlib/src/shadow_stdlib.mli", 579, 22979, 23010), 0))], Tag1 ("Shadow_stdlib", 108)), 0); (("string_of_int", 21131), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1091), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1090), 0), 100000000, 0, -1089), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 582, 23046, 23049), ("shadow-stdlib/src/shadow_stdlib.mli", 582, 23046, 23059), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Int.to_string] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 582, 23046, 23061), ("shadow-stdlib/src/shadow_stdlib.mli", 584, 23132, 23160), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 582, 23046, 23060), ("shadow-stdlib/src/shadow_stdlib.mli", 584, 23132, 23161), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 582, 23046, 23060), ("shadow-stdlib/src/shadow_stdlib.mli", 584, 23132, 23161), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 582, 23046, 23046), ("shadow-stdlib/src/shadow_stdlib.mli", 584, 23132, 23162), 0))], Tag1 ("Shadow_stdlib", 109)), 0); (("int_of_string_opt", 21132), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1088), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1087)], (0)), 100000000, 0, -1086), 0), 100000000, 0, -1085), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 587, 23209, 23212), ("shadow-stdlib/src/shadow_stdlib.mli", 587, 23209, 23222), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.int_of_string_opt] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 587, 23209, 23224), ("shadow-stdlib/src/shadow_stdlib.mli", 590, 23365, 23418), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 587, 23209, 23223), ("shadow-stdlib/src/shadow_stdlib.mli", 590, 23365, 23419), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 587, 23209, 23223), ("shadow-stdlib/src/shadow_stdlib.mli", 590, 23365, 23419), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 587, 23209, 23209), ("shadow-stdlib/src/shadow_stdlib.mli", 590, 23365, 23420), 0))], Tag1 ("Shadow_stdlib", 110)), 0); (("int_of_string", 21133), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1084), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1083), 0), 100000000, 0, -1082), (("caml_int_of_string", 1, 1, "", [0], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 593, 23484, 23487), ("shadow-stdlib/src/shadow_stdlib.mli", 593, 23484, 23497), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Int.of_string] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 593, 23484, 23499), ("shadow-stdlib/src/shadow_stdlib.mli", 595, 23570, 23598), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 593, 23484, 23498), ("shadow-stdlib/src/shadow_stdlib.mli", 595, 23570, 23599), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 593, 23484, 23498), ("shadow-stdlib/src/shadow_stdlib.mli", 595, 23570, 23599), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 593, 23484, 23484), ("shadow-stdlib/src/shadow_stdlib.mli", 595, 23570, 23600), 0))], Tag1 ("Shadow_stdlib", 111)), 0); (("string_of_float", 21134), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1081), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1080), 0), 100000000, 0, -1079), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 598, 23640, 23643), ("shadow-stdlib/src/shadow_stdlib.mli", 598, 23640, 23653), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.to_string] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 598, 23640, 23655), ("shadow-stdlib/src/shadow_stdlib.mli", 600, 23726, 23756), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 598, 23640, 23654), ("shadow-stdlib/src/shadow_stdlib.mli", 600, 23726, 23757), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 598, 23640, 23654), ("shadow-stdlib/src/shadow_stdlib.mli", 600, 23726, 23757), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 598, 23640, 23640), ("shadow-stdlib/src/shadow_stdlib.mli", 600, 23726, 23758), 0))], Tag1 ("Shadow_stdlib", 112)), 0); (("float_of_string_opt", 21135), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1078), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1077)], (0)), 100000000, 0, -1076), 0), 100000000, 0, -1075), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 603, 23809, 23812), ("shadow-stdlib/src/shadow_stdlib.mli", 603, 23809, 23822), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.float_of_string_opt] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 603, 23809, 23824), ("shadow-stdlib/src/shadow_stdlib.mli", 606, 23965, 24020), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 603, 23809, 23823), ("shadow-stdlib/src/shadow_stdlib.mli", 606, 23965, 24021), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 603, 23809, 23823), ("shadow-stdlib/src/shadow_stdlib.mli", 606, 23965, 24021), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 603, 23809, 23809), ("shadow-stdlib/src/shadow_stdlib.mli", 606, 23965, 24022), 0))], Tag1 ("Shadow_stdlib", 113)), 0); (("float_of_string", 21136), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1074), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1073), 0), 100000000, 0, -1072), (("caml_float_of_string", 1, 1, "", [0], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 609, 24092, 24095), ("shadow-stdlib/src/shadow_stdlib.mli", 609, 24092, 24105), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Float.of_string] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 609, 24092, 24107), ("shadow-stdlib/src/shadow_stdlib.mli", 611, 24178, 24208), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 609, 24092, 24106), ("shadow-stdlib/src/shadow_stdlib.mli", 611, 24178, 24209), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 609, 24092, 24106), ("shadow-stdlib/src/shadow_stdlib.mli", 611, 24178, 24209), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 609, 24092, 24092), ("shadow-stdlib/src/shadow_stdlib.mli", 611, 24178, 24210), 0))], Tag1 ("Shadow_stdlib", 114)), 0); Tag1 (("in_channel", 21137), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "in_channel"), 0, (0)), 100000000, 0, -1071)), 0, 0, 0, 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 632, 24978, 24981), ("shadow-stdlib/src/shadow_stdlib.mli", 632, 24978, 24991), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.In_channel.t] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 632, 24978, 24993), ("shadow-stdlib/src/shadow_stdlib.mli", 634, 25064, 25097), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 632, 24978, 24992), ("shadow-stdlib/src/shadow_stdlib.mli", 634, 25064, 25098), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 632, 24978, 24992), ("shadow-stdlib/src/shadow_stdlib.mli", 634, 25064, 25098), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 632, 24978, 24978), ("shadow-stdlib/src/shadow_stdlib.mli", 634, 25064, 25099), 0))], 0, 0, Tag1 ("Shadow_stdlib", 118)), 0, 0); Tag1 (("out_channel", 21138), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -1070)), 0, 0, 0, 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 637, 25146, 25149), ("shadow-stdlib/src/shadow_stdlib.mli", 637, 25146, 25159), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.Out_channel.t] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 637, 25146, 25161), ("shadow-stdlib/src/shadow_stdlib.mli", 639, 25232, 25266), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 637, 25146, 25160), ("shadow-stdlib/src/shadow_stdlib.mli", 639, 25232, 25267), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 637, 25146, 25160), ("shadow-stdlib/src/shadow_stdlib.mli", 639, 25232, 25267), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 637, 25146, 25146), ("shadow-stdlib/src/shadow_stdlib.mli", 639, 25232, 25268), 0))], 0, 0, Tag1 ("Shadow_stdlib", 119)), 0, 0); (("stdin", 21139), ((Tag3 ((("in_channel", 21137)), 0, (0)), 100000000, 0, -1069), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 642, 25293, 25296), ("shadow-stdlib/src/shadow_stdlib.mli", 642, 25293, 25306), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.stdin] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 642, 25293, 25308), ("shadow-stdlib/src/shadow_stdlib.mli", 644, 25379, 25405), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 642, 25293, 25307), ("shadow-stdlib/src/shadow_stdlib.mli", 644, 25379, 25406), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 642, 25293, 25307), ("shadow-stdlib/src/shadow_stdlib.mli", 644, 25379, 25406), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 642, 25293, 25293), ("shadow-stdlib/src/shadow_stdlib.mli", 644, 25379, 25407), 0))], Tag1 ("Shadow_stdlib", 120)), 0); (("stdout", 21140), ((Tag3 ((("out_channel", 21138)), 0, (0)), 100000000, 0, -1068), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 647, 25434, 25437), ("shadow-stdlib/src/shadow_stdlib.mli", 647, 25434, 25447), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.stdout] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 647, 25434, 25449), ("shadow-stdlib/src/shadow_stdlib.mli", 649, 25520, 25547), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 647, 25434, 25448), ("shadow-stdlib/src/shadow_stdlib.mli", 649, 25520, 25548), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 647, 25434, 25448), ("shadow-stdlib/src/shadow_stdlib.mli", 649, 25520, 25548), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 647, 25434, 25434), ("shadow-stdlib/src/shadow_stdlib.mli", 649, 25520, 25549), 0))], Tag1 ("Shadow_stdlib", 121)), 0); (("stderr", 21141), ((Tag3 ((("out_channel", 21138)), 0, (0)), 100000000, 0, -1067), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 652, 25576, 25579), ("shadow-stdlib/src/shadow_stdlib.mli", 652, 25576, 25589), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.stderr] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 652, 25576, 25591), ("shadow-stdlib/src/shadow_stdlib.mli", 654, 25662, 25689), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 652, 25576, 25590), ("shadow-stdlib/src/shadow_stdlib.mli", 654, 25662, 25690), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 652, 25576, 25590), ("shadow-stdlib/src/shadow_stdlib.mli", 654, 25662, 25690), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 652, 25576, 25576), ("shadow-stdlib/src/shadow_stdlib.mli", 654, 25662, 25691), 0))], Tag1 ("Shadow_stdlib", 122)), 0); (("print_char", 21142), ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -1066), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1065), 0), 100000000, 0, -1064), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 657, 25723, 25726), ("shadow-stdlib/src/shadow_stdlib.mli", 657, 25723, 25736), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.Out_channel.output_char Stdio.stdout] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 657, 25723, 25738), ("shadow-stdlib/src/shadow_stdlib.mli", 659, 25809, 25866), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 657, 25723, 25737), ("shadow-stdlib/src/shadow_stdlib.mli", 659, 25809, 25867), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 657, 25723, 25737), ("shadow-stdlib/src/shadow_stdlib.mli", 659, 25809, 25867), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 657, 25723, 25723), ("shadow-stdlib/src/shadow_stdlib.mli", 659, 25809, 25868), 0))], Tag1 ("Shadow_stdlib", 123)), 0); (("print_string", 21143), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1063), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1062), 0), 100000000, 0, -1061), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 662, 25904, 25907), ("shadow-stdlib/src/shadow_stdlib.mli", 662, 25904, 25917), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.Out_channel.output_string Stdio.stdout] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 662, 25904, 25919), ("shadow-stdlib/src/shadow_stdlib.mli", 664, 25990, 26049), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 662, 25904, 25918), ("shadow-stdlib/src/shadow_stdlib.mli", 664, 25990, 26050), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 662, 25904, 25918), ("shadow-stdlib/src/shadow_stdlib.mli", 664, 25990, 26050), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 662, 25904, 25904), ("shadow-stdlib/src/shadow_stdlib.mli", 664, 25990, 26051), 0))], Tag1 ("Shadow_stdlib", 124)), 0); (("print_bytes", 21144), ((Tag1 (0, (Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -1060), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1059), 0), 100000000, 0, -1058), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 667, 26085, 26088), ("shadow-stdlib/src/shadow_stdlib.mli", 667, 26085, 26098), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.Out_channel.output_bytes Stdio.stdout] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 667, 26085, 26100), ("shadow-stdlib/src/shadow_stdlib.mli", 669, 26171, 26229), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 667, 26085, 26099), ("shadow-stdlib/src/shadow_stdlib.mli", 669, 26171, 26230), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 667, 26085, 26099), ("shadow-stdlib/src/shadow_stdlib.mli", 669, 26171, 26230), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 667, 26085, 26085), ("shadow-stdlib/src/shadow_stdlib.mli", 669, 26171, 26231), 0))], Tag1 ("Shadow_stdlib", 125)), 0); (("print_int", 21145), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1057), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1056), 0), 100000000, 0, -1055), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 672, 26261, 26264), ("shadow-stdlib/src/shadow_stdlib.mli", 672, 26261, 26274), 0)), ([([(Tag5 ((((("%"), (("shadow-stdlib/src/shadow_stdlib.mli", 674, 26347, 26367), ("shadow-stdlib/src/shadow_stdlib.mli", 674, 26347, 26368), 0))), (("shadow-stdlib/src/shadow_stdlib.mli", 674, 26347, 26367), ("shadow-stdlib/src/shadow_stdlib.mli", 674, 26347, 26368), 0), 0, 0), [(0, (Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.eprintf ", (("shadow-stdlib/src/shadow_stdlib.mli", 672, 26261, 26276), ("shadow-stdlib/src/shadow_stdlib.mli", 674, 26347, 26366), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 672, 26261, 26275), ("shadow-stdlib/src/shadow_stdlib.mli", 674, 26347, 26367), 0), 0, 0)); (0, (Tag5 ((((("d"), (("shadow-stdlib/src/shadow_stdlib.mli", 674, 26347, 26368), ("shadow-stdlib/src/shadow_stdlib.mli", 674, 26347, 26369), 0))), (("shadow-stdlib/src/shadow_stdlib.mli", 674, 26347, 26368), ("shadow-stdlib/src/shadow_stdlib.mli", 674, 26347, 26369), 0), 0, 0), [(0, (Tag1 (Tag2 ("] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 674, 26347, 26370), ("shadow-stdlib/src/shadow_stdlib.mli", 674, 26347, 26380), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 674, 26347, 26369), ("shadow-stdlib/src/shadow_stdlib.mli", 674, 26347, 26381), 0), 0, 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 674, 26347, 26368), ("shadow-stdlib/src/shadow_stdlib.mli", 674, 26347, 26381), 0), 0, 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 672, 26261, 26275), ("shadow-stdlib/src/shadow_stdlib.mli", 674, 26347, 26381), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 672, 26261, 26275), ("shadow-stdlib/src/shadow_stdlib.mli", 674, 26347, 26381), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 672, 26261, 26261), ("shadow-stdlib/src/shadow_stdlib.mli", 674, 26347, 26382), 0))], Tag1 ("Shadow_stdlib", 126)), 0); (("print_float", 21146), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1054), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1053), 0), 100000000, 0, -1052), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 677, 26416, 26419), ("shadow-stdlib/src/shadow_stdlib.mli", 677, 26416, 26429), 0)), ([([(Tag5 ((((("%"), (("shadow-stdlib/src/shadow_stdlib.mli", 679, 26502, 26522), ("shadow-stdlib/src/shadow_stdlib.mli", 679, 26502, 26523), 0))), (("shadow-stdlib/src/shadow_stdlib.mli", 679, 26502, 26522), ("shadow-stdlib/src/shadow_stdlib.mli", 679, 26502, 26523), 0), 0, 0), [(0, (Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.eprintf ", (("shadow-stdlib/src/shadow_stdlib.mli", 677, 26416, 26431), ("shadow-stdlib/src/shadow_stdlib.mli", 679, 26502, 26521), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 677, 26416, 26430), ("shadow-stdlib/src/shadow_stdlib.mli", 679, 26502, 26522), 0), 0, 0)); (0, (Tag5 ((((("f"), (("shadow-stdlib/src/shadow_stdlib.mli", 679, 26502, 26523), ("shadow-stdlib/src/shadow_stdlib.mli", 679, 26502, 26524), 0))), (("shadow-stdlib/src/shadow_stdlib.mli", 679, 26502, 26523), ("shadow-stdlib/src/shadow_stdlib.mli", 679, 26502, 26524), 0), 0, 0), [(0, (Tag1 (Tag2 ("] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 679, 26502, 26525), ("shadow-stdlib/src/shadow_stdlib.mli", 679, 26502, 26535), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 679, 26502, 26524), ("shadow-stdlib/src/shadow_stdlib.mli", 679, 26502, 26536), 0), 0, 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 679, 26502, 26523), ("shadow-stdlib/src/shadow_stdlib.mli", 679, 26502, 26536), 0), 0, 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 677, 26416, 26430), ("shadow-stdlib/src/shadow_stdlib.mli", 679, 26502, 26536), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 677, 26416, 26430), ("shadow-stdlib/src/shadow_stdlib.mli", 679, 26502, 26536), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 677, 26416, 26416), ("shadow-stdlib/src/shadow_stdlib.mli", 679, 26502, 26537), 0))], Tag1 ("Shadow_stdlib", 127)), 0); (("print_endline", 21147), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1051), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1050), 0), 100000000, 0, -1049), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 682, 26574, 26577), ("shadow-stdlib/src/shadow_stdlib.mli", 682, 26574, 26587), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.print_endline] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 682, 26574, 26589), ("shadow-stdlib/src/shadow_stdlib.mli", 684, 26660, 26694), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 682, 26574, 26588), ("shadow-stdlib/src/shadow_stdlib.mli", 684, 26660, 26695), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 682, 26574, 26588), ("shadow-stdlib/src/shadow_stdlib.mli", 684, 26660, 26695), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 682, 26574, 26574), ("shadow-stdlib/src/shadow_stdlib.mli", 684, 26660, 26696), 0))], Tag1 ("Shadow_stdlib", 128)), 0); (("print_newline", 21148), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1048), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1047), 0), 100000000, 0, -1046), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 687, 26731, 26734), ("shadow-stdlib/src/shadow_stdlib.mli", 687, 26731, 26744), 0)), ([([(Tag5 ((((("%!"), (("shadow-stdlib/src/shadow_stdlib.mli", 690, 26838, 26838), ("shadow-stdlib/src/shadow_stdlib.mli", 690, 26838, 26840), 0))), (("shadow-stdlib/src/shadow_stdlib.mli", 690, 26838, 26838), ("shadow-stdlib/src/shadow_stdlib.mli", 690, 26838, 26840), 0), 0, 0), [(0, (Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.eprintf ", (("shadow-stdlib/src/shadow_stdlib.mli", 687, 26731, 26746), ("shadow-stdlib/src/shadow_stdlib.mli", 689, 26817, 26836), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 687, 26731, 26745), ("shadow-stdlib/src/shadow_stdlib.mli", 689, 26817, 26837), 0), 0, 0)); (0, (Tag1 (Tag2 ("] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 690, 26838, 26841), ("shadow-stdlib/src/shadow_stdlib.mli", 690, 26838, 26851), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 690, 26838, 26840), ("shadow-stdlib/src/shadow_stdlib.mli", 690, 26838, 26852), 0), 0, 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 687, 26731, 26745), ("shadow-stdlib/src/shadow_stdlib.mli", 690, 26838, 26852), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 687, 26731, 26745), ("shadow-stdlib/src/shadow_stdlib.mli", 690, 26838, 26852), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 687, 26731, 26731), ("shadow-stdlib/src/shadow_stdlib.mli", 690, 26838, 26853), 0))], Tag1 ("Shadow_stdlib", 129)), 0); (("prerr_char", 21149), ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -1045), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1044), 0), 100000000, 0, -1043), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 693, 26885, 26888), ("shadow-stdlib/src/shadow_stdlib.mli", 693, 26885, 26898), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.Out_channel.output_char Stdio.stderr] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 693, 26885, 26900), ("shadow-stdlib/src/shadow_stdlib.mli", 695, 26971, 27028), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 693, 26885, 26899), ("shadow-stdlib/src/shadow_stdlib.mli", 695, 26971, 27029), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 693, 26885, 26899), ("shadow-stdlib/src/shadow_stdlib.mli", 695, 26971, 27029), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 693, 26885, 26885), ("shadow-stdlib/src/shadow_stdlib.mli", 695, 26971, 27030), 0))], Tag1 ("Shadow_stdlib", 130)), 0); (("prerr_string", 21150), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1042), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1041), 0), 100000000, 0, -1040), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 698, 27066, 27069), ("shadow-stdlib/src/shadow_stdlib.mli", 698, 27066, 27079), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.Out_channel.output_string Stdio.stderr] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 698, 27066, 27081), ("shadow-stdlib/src/shadow_stdlib.mli", 700, 27152, 27211), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 698, 27066, 27080), ("shadow-stdlib/src/shadow_stdlib.mli", 700, 27152, 27212), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 698, 27066, 27080), ("shadow-stdlib/src/shadow_stdlib.mli", 700, 27152, 27212), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 698, 27066, 27066), ("shadow-stdlib/src/shadow_stdlib.mli", 700, 27152, 27213), 0))], Tag1 ("Shadow_stdlib", 131)), 0); (("prerr_bytes", 21151), ((Tag1 (0, (Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -1039), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1038), 0), 100000000, 0, -1037), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 703, 27247, 27250), ("shadow-stdlib/src/shadow_stdlib.mli", 703, 27247, 27260), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.Out_channel.output_bytes Stdio.stderr] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 703, 27247, 27262), ("shadow-stdlib/src/shadow_stdlib.mli", 705, 27333, 27391), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 703, 27247, 27261), ("shadow-stdlib/src/shadow_stdlib.mli", 705, 27333, 27392), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 703, 27247, 27261), ("shadow-stdlib/src/shadow_stdlib.mli", 705, 27333, 27392), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 703, 27247, 27247), ("shadow-stdlib/src/shadow_stdlib.mli", 705, 27333, 27393), 0))], Tag1 ("Shadow_stdlib", 132)), 0); (("prerr_int", 21152), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1036), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1035), 0), 100000000, 0, -1034), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 708, 27423, 27426), ("shadow-stdlib/src/shadow_stdlib.mli", 708, 27423, 27436), 0)), ([([(Tag5 ((((("%"), (("shadow-stdlib/src/shadow_stdlib.mli", 710, 27509, 27529), ("shadow-stdlib/src/shadow_stdlib.mli", 710, 27509, 27530), 0))), (("shadow-stdlib/src/shadow_stdlib.mli", 710, 27509, 27529), ("shadow-stdlib/src/shadow_stdlib.mli", 710, 27509, 27530), 0), 0, 0), [(0, (Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.eprintf ", (("shadow-stdlib/src/shadow_stdlib.mli", 708, 27423, 27438), ("shadow-stdlib/src/shadow_stdlib.mli", 710, 27509, 27528), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 708, 27423, 27437), ("shadow-stdlib/src/shadow_stdlib.mli", 710, 27509, 27529), 0), 0, 0)); (0, (Tag5 ((((("d"), (("shadow-stdlib/src/shadow_stdlib.mli", 710, 27509, 27530), ("shadow-stdlib/src/shadow_stdlib.mli", 710, 27509, 27531), 0))), (("shadow-stdlib/src/shadow_stdlib.mli", 710, 27509, 27530), ("shadow-stdlib/src/shadow_stdlib.mli", 710, 27509, 27531), 0), 0, 0), [(0, (Tag1 (Tag2 ("] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 710, 27509, 27532), ("shadow-stdlib/src/shadow_stdlib.mli", 710, 27509, 27542), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 710, 27509, 27531), ("shadow-stdlib/src/shadow_stdlib.mli", 710, 27509, 27543), 0), 0, 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 710, 27509, 27530), ("shadow-stdlib/src/shadow_stdlib.mli", 710, 27509, 27543), 0), 0, 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 708, 27423, 27437), ("shadow-stdlib/src/shadow_stdlib.mli", 710, 27509, 27543), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 708, 27423, 27437), ("shadow-stdlib/src/shadow_stdlib.mli", 710, 27509, 27543), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 708, 27423, 27423), ("shadow-stdlib/src/shadow_stdlib.mli", 710, 27509, 27544), 0))], Tag1 ("Shadow_stdlib", 133)), 0); (("prerr_float", 21153), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1033), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1032), 0), 100000000, 0, -1031), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 713, 27578, 27581), ("shadow-stdlib/src/shadow_stdlib.mli", 713, 27578, 27591), 0)), ([([(Tag5 ((((("%"), (("shadow-stdlib/src/shadow_stdlib.mli", 715, 27664, 27684), ("shadow-stdlib/src/shadow_stdlib.mli", 715, 27664, 27685), 0))), (("shadow-stdlib/src/shadow_stdlib.mli", 715, 27664, 27684), ("shadow-stdlib/src/shadow_stdlib.mli", 715, 27664, 27685), 0), 0, 0), [(0, (Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.eprintf ", (("shadow-stdlib/src/shadow_stdlib.mli", 713, 27578, 27593), ("shadow-stdlib/src/shadow_stdlib.mli", 715, 27664, 27683), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 713, 27578, 27592), ("shadow-stdlib/src/shadow_stdlib.mli", 715, 27664, 27684), 0), 0, 0)); (0, (Tag5 ((((("f"), (("shadow-stdlib/src/shadow_stdlib.mli", 715, 27664, 27685), ("shadow-stdlib/src/shadow_stdlib.mli", 715, 27664, 27686), 0))), (("shadow-stdlib/src/shadow_stdlib.mli", 715, 27664, 27685), ("shadow-stdlib/src/shadow_stdlib.mli", 715, 27664, 27686), 0), 0, 0), [(0, (Tag1 (Tag2 ("] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 715, 27664, 27687), ("shadow-stdlib/src/shadow_stdlib.mli", 715, 27664, 27697), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 715, 27664, 27686), ("shadow-stdlib/src/shadow_stdlib.mli", 715, 27664, 27698), 0), 0, 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 715, 27664, 27685), ("shadow-stdlib/src/shadow_stdlib.mli", 715, 27664, 27698), 0), 0, 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 713, 27578, 27592), ("shadow-stdlib/src/shadow_stdlib.mli", 715, 27664, 27698), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 713, 27578, 27592), ("shadow-stdlib/src/shadow_stdlib.mli", 715, 27664, 27698), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 713, 27578, 27578), ("shadow-stdlib/src/shadow_stdlib.mli", 715, 27664, 27699), 0))], Tag1 ("Shadow_stdlib", 134)), 0); (("prerr_endline", 21154), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1030), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1029), 0), 100000000, 0, -1028), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 718, 27736, 27739), ("shadow-stdlib/src/shadow_stdlib.mli", 718, 27736, 27749), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.prerr_endline] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 718, 27736, 27751), ("shadow-stdlib/src/shadow_stdlib.mli", 720, 27822, 27856), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 718, 27736, 27750), ("shadow-stdlib/src/shadow_stdlib.mli", 720, 27822, 27857), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 718, 27736, 27750), ("shadow-stdlib/src/shadow_stdlib.mli", 720, 27822, 27857), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 718, 27736, 27736), ("shadow-stdlib/src/shadow_stdlib.mli", 720, 27822, 27858), 0))], Tag1 ("Shadow_stdlib", 135)), 0); (("prerr_newline", 21155), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1027), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1026), 0), 100000000, 0, -1025), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 723, 27893, 27896), ("shadow-stdlib/src/shadow_stdlib.mli", 723, 27893, 27906), 0)), ([([(Tag5 ((((("%!"), (("shadow-stdlib/src/shadow_stdlib.mli", 726, 28000, 28000), ("shadow-stdlib/src/shadow_stdlib.mli", 726, 28000, 28002), 0))), (("shadow-stdlib/src/shadow_stdlib.mli", 726, 28000, 28000), ("shadow-stdlib/src/shadow_stdlib.mli", 726, 28000, 28002), 0), 0, 0), [(0, (Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.eprintf ", (("shadow-stdlib/src/shadow_stdlib.mli", 723, 27893, 27908), ("shadow-stdlib/src/shadow_stdlib.mli", 725, 27979, 27998), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 723, 27893, 27907), ("shadow-stdlib/src/shadow_stdlib.mli", 725, 27979, 27999), 0), 0, 0)); (0, (Tag1 (Tag2 ("] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 726, 28000, 28003), ("shadow-stdlib/src/shadow_stdlib.mli", 726, 28000, 28013), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 726, 28000, 28002), ("shadow-stdlib/src/shadow_stdlib.mli", 726, 28000, 28014), 0), 0, 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 723, 27893, 27907), ("shadow-stdlib/src/shadow_stdlib.mli", 726, 28000, 28014), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 723, 27893, 27907), ("shadow-stdlib/src/shadow_stdlib.mli", 726, 28000, 28014), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 723, 27893, 27893), ("shadow-stdlib/src/shadow_stdlib.mli", 726, 28000, 28015), 0))], Tag1 ("Shadow_stdlib", 136)), 0); (("read_line", 21156), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1024), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1023), 0), 100000000, 0, -1022), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 729, 28048, 28051), ("shadow-stdlib/src/shadow_stdlib.mli", 729, 28048, 28061), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.In_channel.input_line] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 729, 28048, 28063), ("shadow-stdlib/src/shadow_stdlib.mli", 731, 28134, 28176), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 729, 28048, 28062), ("shadow-stdlib/src/shadow_stdlib.mli", 731, 28134, 28177), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 729, 28048, 28062), ("shadow-stdlib/src/shadow_stdlib.mli", 731, 28134, 28177), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 729, 28048, 28048), ("shadow-stdlib/src/shadow_stdlib.mli", 731, 28134, 28178), 0))], Tag1 ("Shadow_stdlib", 137)), 0); (("read_int_opt", 21157), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1021), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1020)], (0)), 100000000, 0, -1019), 0), 100000000, 0, -1018), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 734, 28218, 28221), ("shadow-stdlib/src/shadow_stdlib.mli", 734, 28218, 28231), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.read_int_opt] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 734, 28218, 28233), ("shadow-stdlib/src/shadow_stdlib.mli", 737, 28374, 28422), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 734, 28218, 28232), ("shadow-stdlib/src/shadow_stdlib.mli", 737, 28374, 28423), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 734, 28218, 28232), ("shadow-stdlib/src/shadow_stdlib.mli", 737, 28374, 28423), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 734, 28218, 28218), ("shadow-stdlib/src/shadow_stdlib.mli", 737, 28374, 28424), 0))], Tag1 ("Shadow_stdlib", 138)), 0); (("read_int", 21158), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1017), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1016), 0), 100000000, 0, -1015), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 740, 28453, 28456), ("shadow-stdlib/src/shadow_stdlib.mli", 740, 28453, 28466), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.read_int] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 740, 28453, 28468), ("shadow-stdlib/src/shadow_stdlib.mli", 743, 28609, 28653), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 740, 28453, 28467), ("shadow-stdlib/src/shadow_stdlib.mli", 743, 28609, 28654), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 740, 28453, 28467), ("shadow-stdlib/src/shadow_stdlib.mli", 743, 28609, 28654), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 740, 28453, 28453), ("shadow-stdlib/src/shadow_stdlib.mli", 743, 28609, 28655), 0))], Tag1 ("Shadow_stdlib", 139)), 0); (("read_float_opt", 21159), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1014), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1013)], (0)), 100000000, 0, -1012), 0), 100000000, 0, -1011), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 746, 28699, 28702), ("shadow-stdlib/src/shadow_stdlib.mli", 746, 28699, 28712), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.read_float_opt] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 746, 28699, 28714), ("shadow-stdlib/src/shadow_stdlib.mli", 749, 28855, 28905), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 746, 28699, 28713), ("shadow-stdlib/src/shadow_stdlib.mli", 749, 28855, 28906), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 746, 28699, 28713), ("shadow-stdlib/src/shadow_stdlib.mli", 749, 28855, 28906), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 746, 28699, 28699), ("shadow-stdlib/src/shadow_stdlib.mli", 749, 28855, 28907), 0))], Tag1 ("Shadow_stdlib", 140)), 0); (("read_float", 21160), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1010), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1009), 0), 100000000, 0, -1008), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 752, 28940, 28943), ("shadow-stdlib/src/shadow_stdlib.mli", 752, 28940, 28953), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.read_float] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 752, 28940, 28955), ("shadow-stdlib/src/shadow_stdlib.mli", 755, 29096, 29142), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 752, 28940, 28954), ("shadow-stdlib/src/shadow_stdlib.mli", 755, 29096, 29143), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 752, 28940, 28954), ("shadow-stdlib/src/shadow_stdlib.mli", 755, 29096, 29143), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 752, 28940, 28940), ("shadow-stdlib/src/shadow_stdlib.mli", 755, 29096, 29144), 0))], Tag1 ("Shadow_stdlib", 141)), 0); Tag1 (("open_flag", 21161), (0, 0, Tag1 ([(("Open_rdonly", 412), (0), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), 0, Tag1 ("Shadow_stdlib", 143)); (("Open_wronly", 413), (0), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), 0, Tag1 ("Shadow_stdlib", 144)); (("Open_append", 414), (0), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), 0, Tag1 ("Shadow_stdlib", 145)); (("Open_creat", 415), (0), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), 0, Tag1 ("Shadow_stdlib", 146)); (("Open_trunc", 416), (0), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), 0, Tag1 ("Shadow_stdlib", 147)); (("Open_excl", 417), (0), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), 0, Tag1 ("Shadow_stdlib", 148)); (("Open_binary", 418), (0), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), 0, Tag1 ("Shadow_stdlib", 149)); (("Open_text", 419), (0), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), 0, Tag1 ("Shadow_stdlib", 150)); (("Open_nonblock", 420), (0), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), 0, Tag1 ("Shadow_stdlib", 151))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "open_flag"), 0, (0)), 100000000, 0, -1007)), 0, 0, 0, 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 758, 29309, 29312), ("shadow-stdlib/src/shadow_stdlib.mli", 758, 29309, 29322), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.open_flag instead", (("shadow-stdlib/src/shadow_stdlib.mli", 758, 29309, 29324), ("shadow-stdlib/src/shadow_stdlib.mli", 762, 29545, 29594), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 758, 29309, 29323), ("shadow-stdlib/src/shadow_stdlib.mli", 762, 29545, 29595), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 758, 29309, 29323), ("shadow-stdlib/src/shadow_stdlib.mli", 762, 29545, 29595), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 758, 29309, 29309), ("shadow-stdlib/src/shadow_stdlib.mli", 762, 29545, 29596), 0))], 1, 0, Tag1 ("Shadow_stdlib", 142)), 0, 0); (("open_out", 21162), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1006), (Tag3 ((("out_channel", 21138)), 0, (0)), 100000000, 0, -1005), 0), 100000000, 0, -1004), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 765, 29635, 29638), ("shadow-stdlib/src/shadow_stdlib.mli", 765, 29635, 29648), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.Out_channel.create] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 765, 29635, 29650), ("shadow-stdlib/src/shadow_stdlib.mli", 767, 29721, 29760), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 765, 29635, 29649), ("shadow-stdlib/src/shadow_stdlib.mli", 767, 29721, 29761), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 765, 29635, 29649), ("shadow-stdlib/src/shadow_stdlib.mli", 767, 29721, 29761), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 765, 29635, 29635), ("shadow-stdlib/src/shadow_stdlib.mli", 767, 29721, 29762), 0))], Tag1 ("Shadow_stdlib", 152)), 0); (("open_out_bin", 21163), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1003), (Tag3 ((("out_channel", 21138)), 0, (0)), 100000000, 0, -1002), 0), 100000000, 0, -1001), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 770, 29805, 29808), ("shadow-stdlib/src/shadow_stdlib.mli", 770, 29805, 29818), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.Out_channel.create] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 770, 29805, 29820), ("shadow-stdlib/src/shadow_stdlib.mli", 772, 29891, 29930), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 770, 29805, 29819), ("shadow-stdlib/src/shadow_stdlib.mli", 772, 29891, 29931), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 770, 29805, 29819), ("shadow-stdlib/src/shadow_stdlib.mli", 772, 29891, 29931), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 770, 29805, 29805), ("shadow-stdlib/src/shadow_stdlib.mli", 772, 29891, 29932), 0))], Tag1 ("Shadow_stdlib", 153)), 0); (("open_out_gen", 21164), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("open_flag", 21161)), 0, (0)), 100000000, 0, -1000)], (0)), 100000000, 0, -999), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -998), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -997), (Tag3 ((("out_channel", 21138)), 0, (0)), 100000000, 0, -996), 0), 100000000, 0, -995), 0), 100000000, 0, -994), 0), 100000000, 0, -993), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 775, 30000, 30003), ("shadow-stdlib/src/shadow_stdlib.mli", 775, 30000, 30013), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.open_out_gen] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 775, 30000, 30015), ("shadow-stdlib/src/shadow_stdlib.mli", 778, 30156, 30204), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 775, 30000, 30014), ("shadow-stdlib/src/shadow_stdlib.mli", 778, 30156, 30205), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 775, 30000, 30014), ("shadow-stdlib/src/shadow_stdlib.mli", 778, 30156, 30205), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 775, 30000, 30000), ("shadow-stdlib/src/shadow_stdlib.mli", 778, 30156, 30206), 0))], Tag1 ("Shadow_stdlib", 154)), 0); (("flush", 21165), ((Tag1 (0, (Tag3 ((("out_channel", 21138)), 0, (0)), 100000000, 0, -992), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -991), 0), 100000000, 0, -990), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 781, 30240, 30243), ("shadow-stdlib/src/shadow_stdlib.mli", 781, 30240, 30253), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.Out_channel.flush] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 781, 30240, 30255), ("shadow-stdlib/src/shadow_stdlib.mli", 783, 30326, 30364), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 781, 30240, 30254), ("shadow-stdlib/src/shadow_stdlib.mli", 783, 30326, 30365), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 781, 30240, 30254), ("shadow-stdlib/src/shadow_stdlib.mli", 783, 30326, 30365), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 781, 30240, 30240), ("shadow-stdlib/src/shadow_stdlib.mli", 783, 30326, 30366), 0))], Tag1 ("Shadow_stdlib", 155)), 0); (("flush_all", 21166), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -989), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -988), 0), 100000000, 0, -987), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 786, 30397, 30400), ("shadow-stdlib/src/shadow_stdlib.mli", 786, 30397, 30410), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.flush_all] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 786, 30397, 30412), ("shadow-stdlib/src/shadow_stdlib.mli", 789, 30553, 30598), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 786, 30397, 30411), ("shadow-stdlib/src/shadow_stdlib.mli", 789, 30553, 30599), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 786, 30397, 30411), ("shadow-stdlib/src/shadow_stdlib.mli", 789, 30553, 30599), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 786, 30397, 30397), ("shadow-stdlib/src/shadow_stdlib.mli", 789, 30553, 30600), 0))], Tag1 ("Shadow_stdlib", 156)), 0); (("output_char", 21167), ((Tag1 (0, (Tag3 ((("out_channel", 21138)), 0, (0)), 100000000, 0, -986), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -985), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -984), 0), 100000000, 0, -983), 0), 100000000, 0, -982), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 792, 30648, 30651), ("shadow-stdlib/src/shadow_stdlib.mli", 792, 30648, 30661), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.Out_channel.output_char] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 792, 30648, 30663), ("shadow-stdlib/src/shadow_stdlib.mli", 794, 30734, 30778), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 792, 30648, 30662), ("shadow-stdlib/src/shadow_stdlib.mli", 794, 30734, 30779), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 792, 30648, 30662), ("shadow-stdlib/src/shadow_stdlib.mli", 794, 30734, 30779), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 792, 30648, 30648), ("shadow-stdlib/src/shadow_stdlib.mli", 794, 30734, 30780), 0))], Tag1 ("Shadow_stdlib", 157)), 0); (("output_string", 21168), ((Tag1 (0, (Tag3 ((("out_channel", 21138)), 0, (0)), 100000000, 0, -981), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -980), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -979), 0), 100000000, 0, -978), 0), 100000000, 0, -977), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 797, 30832, 30835), ("shadow-stdlib/src/shadow_stdlib.mli", 797, 30832, 30845), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.Out_channel.output_string] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 797, 30832, 30847), ("shadow-stdlib/src/shadow_stdlib.mli", 799, 30918, 30964), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 797, 30832, 30846), ("shadow-stdlib/src/shadow_stdlib.mli", 799, 30918, 30965), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 797, 30832, 30846), ("shadow-stdlib/src/shadow_stdlib.mli", 799, 30918, 30965), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 797, 30832, 30832), ("shadow-stdlib/src/shadow_stdlib.mli", 799, 30918, 30966), 0))], Tag1 ("Shadow_stdlib", 158)), 0); (("output_bytes", 21169), ((Tag1 (0, (Tag3 ((("out_channel", 21138)), 0, (0)), 100000000, 0, -976), (Tag1 (0, (Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -975), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -974), 0), 100000000, 0, -973), 0), 100000000, 0, -972), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 802, 31016, 31019), ("shadow-stdlib/src/shadow_stdlib.mli", 802, 31016, 31029), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.Out_channel.output_bytes] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 802, 31016, 31031), ("shadow-stdlib/src/shadow_stdlib.mli", 804, 31102, 31147), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 802, 31016, 31030), ("shadow-stdlib/src/shadow_stdlib.mli", 804, 31102, 31148), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 802, 31016, 31030), ("shadow-stdlib/src/shadow_stdlib.mli", 804, 31102, 31148), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 802, 31016, 31016), ("shadow-stdlib/src/shadow_stdlib.mli", 804, 31102, 31149), 0))], Tag1 ("Shadow_stdlib", 159)), 0); (("output", 21170), ((Tag1 (0, (Tag3 ((("out_channel", 21138)), 0, (0)), 100000000, 0, -971), (Tag1 (0, (Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -970), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -969), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -968), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -967), 0), 100000000, 0, -966), 0), 100000000, 0, -965), 0), 100000000, 0, -964), 0), 100000000, 0, -963), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 807, 31207, 31210), ("shadow-stdlib/src/shadow_stdlib.mli", 807, 31207, 31220), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.Out_channel.output] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 807, 31207, 31222), ("shadow-stdlib/src/shadow_stdlib.mli", 809, 31293, 31332), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 807, 31207, 31221), ("shadow-stdlib/src/shadow_stdlib.mli", 809, 31293, 31333), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 807, 31207, 31221), ("shadow-stdlib/src/shadow_stdlib.mli", 809, 31293, 31333), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 807, 31207, 31207), ("shadow-stdlib/src/shadow_stdlib.mli", 809, 31293, 31334), 0))], Tag1 ("Shadow_stdlib", 160)), 0); (("output_substring", 21171), ((Tag1 (0, (Tag3 ((("out_channel", 21138)), 0, (0)), 100000000, 0, -962), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -961), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -960), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -959), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -958), 0), 100000000, 0, -957), 0), 100000000, 0, -956), 0), 100000000, 0, -955), 0), 100000000, 0, -954), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 812, 31403, 31406), ("shadow-stdlib/src/shadow_stdlib.mli", 812, 31403, 31416), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.Out_channel.output] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 812, 31403, 31418), ("shadow-stdlib/src/shadow_stdlib.mli", 814, 31489, 31528), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 812, 31403, 31417), ("shadow-stdlib/src/shadow_stdlib.mli", 814, 31489, 31529), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 812, 31403, 31417), ("shadow-stdlib/src/shadow_stdlib.mli", 814, 31489, 31529), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 812, 31403, 31403), ("shadow-stdlib/src/shadow_stdlib.mli", 814, 31489, 31530), 0))], Tag1 ("Shadow_stdlib", 161)), 0); (("output_byte", 21172), ((Tag1 (0, (Tag3 ((("out_channel", 21138)), 0, (0)), 100000000, 0, -953), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -952), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -951), 0), 100000000, 0, -950), 0), 100000000, 0, -949), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 817, 31577, 31580), ("shadow-stdlib/src/shadow_stdlib.mli", 817, 31577, 31590), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.Out_channel.output_byte] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 817, 31577, 31592), ("shadow-stdlib/src/shadow_stdlib.mli", 819, 31663, 31707), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 817, 31577, 31591), ("shadow-stdlib/src/shadow_stdlib.mli", 819, 31663, 31708), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 817, 31577, 31591), ("shadow-stdlib/src/shadow_stdlib.mli", 819, 31663, 31708), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 817, 31577, 31577), ("shadow-stdlib/src/shadow_stdlib.mli", 819, 31663, 31709), 0))], Tag1 ("Shadow_stdlib", 162)), 0); (("output_binary_int", 21173), ((Tag1 (0, (Tag3 ((("out_channel", 21138)), 0, (0)), 100000000, 0, -948), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -947), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -946), 0), 100000000, 0, -945), 0), 100000000, 0, -944), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 822, 31762, 31765), ("shadow-stdlib/src/shadow_stdlib.mli", 822, 31762, 31775), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.Out_channel.output_binary_int] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 822, 31762, 31777), ("shadow-stdlib/src/shadow_stdlib.mli", 824, 31848, 31898), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 822, 31762, 31776), ("shadow-stdlib/src/shadow_stdlib.mli", 824, 31848, 31899), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 822, 31762, 31776), ("shadow-stdlib/src/shadow_stdlib.mli", 824, 31848, 31899), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 822, 31762, 31762), ("shadow-stdlib/src/shadow_stdlib.mli", 824, 31848, 31900), 0))], Tag1 ("Shadow_stdlib", 163)), 0); (("output_value", 21174), ((Tag1 (0, (Tag3 ((("out_channel", 21138)), 0, (0)), 100000000, 0, -943), (Tag1 (0, ((("a")), 100000000, 0, -942), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -941), 0), 100000000, 0, -940), 0), 100000000, 0, -939), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 827, 31947, 31950), ("shadow-stdlib/src/shadow_stdlib.mli", 827, 31947, 31960), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.Out_channel.output_value] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 827, 31947, 31962), ("shadow-stdlib/src/shadow_stdlib.mli", 829, 32033, 32078), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 827, 31947, 31961), ("shadow-stdlib/src/shadow_stdlib.mli", 829, 32033, 32079), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 827, 31947, 31961), ("shadow-stdlib/src/shadow_stdlib.mli", 829, 32033, 32079), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 827, 31947, 31947), ("shadow-stdlib/src/shadow_stdlib.mli", 829, 32033, 32080), 0))], Tag1 ("Shadow_stdlib", 164)), 0); (("seek_out", 21175), ((Tag1 (0, (Tag3 ((("out_channel", 21138)), 0, (0)), 100000000, 0, -938), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -937), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -936), 0), 100000000, 0, -935), 0), 100000000, 0, -934), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 832, 32124, 32127), ("shadow-stdlib/src/shadow_stdlib.mli", 832, 32124, 32137), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.Out_channel.seek] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 832, 32124, 32139), ("shadow-stdlib/src/shadow_stdlib.mli", 834, 32210, 32247), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 832, 32124, 32138), ("shadow-stdlib/src/shadow_stdlib.mli", 834, 32210, 32248), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 832, 32124, 32138), ("shadow-stdlib/src/shadow_stdlib.mli", 834, 32210, 32248), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 832, 32124, 32124), ("shadow-stdlib/src/shadow_stdlib.mli", 834, 32210, 32249), 0))], Tag1 ("Shadow_stdlib", 165)), 0); (("pos_out", 21176), ((Tag1 (0, (Tag3 ((("out_channel", 21138)), 0, (0)), 100000000, 0, -933), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -932), 0), 100000000, 0, -931), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 837, 32284, 32287), ("shadow-stdlib/src/shadow_stdlib.mli", 837, 32284, 32297), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.Out_channel.pos] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 837, 32284, 32299), ("shadow-stdlib/src/shadow_stdlib.mli", 839, 32370, 32406), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 837, 32284, 32298), ("shadow-stdlib/src/shadow_stdlib.mli", 839, 32370, 32407), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 837, 32284, 32298), ("shadow-stdlib/src/shadow_stdlib.mli", 839, 32370, 32407), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 837, 32284, 32284), ("shadow-stdlib/src/shadow_stdlib.mli", 839, 32370, 32408), 0))], Tag1 ("Shadow_stdlib", 166)), 0); (("out_channel_length", 21177), ((Tag1 (0, (Tag3 ((("out_channel", 21138)), 0, (0)), 100000000, 0, -930), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -929), 0), 100000000, 0, -928), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 842, 32454, 32457), ("shadow-stdlib/src/shadow_stdlib.mli", 842, 32454, 32467), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.Out_channel.length] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 842, 32454, 32469), ("shadow-stdlib/src/shadow_stdlib.mli", 844, 32540, 32579), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 842, 32454, 32468), ("shadow-stdlib/src/shadow_stdlib.mli", 844, 32540, 32580), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 842, 32454, 32468), ("shadow-stdlib/src/shadow_stdlib.mli", 844, 32540, 32580), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 842, 32454, 32454), ("shadow-stdlib/src/shadow_stdlib.mli", 844, 32540, 32581), 0))], Tag1 ("Shadow_stdlib", 167)), 0); (("close_out", 21178), ((Tag1 (0, (Tag3 ((("out_channel", 21138)), 0, (0)), 100000000, 0, -927), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -926), 0), 100000000, 0, -925), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 847, 32619, 32622), ("shadow-stdlib/src/shadow_stdlib.mli", 847, 32619, 32632), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.Out_channel.close] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 847, 32619, 32634), ("shadow-stdlib/src/shadow_stdlib.mli", 849, 32705, 32743), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 847, 32619, 32633), ("shadow-stdlib/src/shadow_stdlib.mli", 849, 32705, 32744), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 847, 32619, 32633), ("shadow-stdlib/src/shadow_stdlib.mli", 849, 32705, 32744), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 847, 32619, 32619), ("shadow-stdlib/src/shadow_stdlib.mli", 849, 32705, 32745), 0))], Tag1 ("Shadow_stdlib", 168)), 0); (("close_out_noerr", 21179), ((Tag1 (0, (Tag3 ((("out_channel", 21138)), 0, (0)), 100000000, 0, -924), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -923), 0), 100000000, 0, -922), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 852, 32789, 32792), ("shadow-stdlib/src/shadow_stdlib.mli", 852, 32789, 32802), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.Out_channel.close] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 852, 32789, 32804), ("shadow-stdlib/src/shadow_stdlib.mli", 854, 32875, 32913), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 852, 32789, 32803), ("shadow-stdlib/src/shadow_stdlib.mli", 854, 32875, 32914), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 852, 32789, 32803), ("shadow-stdlib/src/shadow_stdlib.mli", 854, 32875, 32914), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 852, 32789, 32789), ("shadow-stdlib/src/shadow_stdlib.mli", 854, 32875, 32915), 0))], Tag1 ("Shadow_stdlib", 169)), 0); (("set_binary_mode_out", 21180), ((Tag1 (0, (Tag3 ((("out_channel", 21138)), 0, (0)), 100000000, 0, -921), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -920), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -919), 0), 100000000, 0, -918), 0), 100000000, 0, -917), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 857, 32971, 32974), ("shadow-stdlib/src/shadow_stdlib.mli", 857, 32971, 32984), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.Out_channel.set_binary_mode] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 857, 32971, 32986), ("shadow-stdlib/src/shadow_stdlib.mli", 859, 33057, 33105), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 857, 32971, 32985), ("shadow-stdlib/src/shadow_stdlib.mli", 859, 33057, 33106), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 857, 32971, 32985), ("shadow-stdlib/src/shadow_stdlib.mli", 859, 33057, 33106), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 857, 32971, 32971), ("shadow-stdlib/src/shadow_stdlib.mli", 859, 33057, 33107), 0))], Tag1 ("Shadow_stdlib", 170)), 0); (("open_in", 21181), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -916), (Tag3 ((("in_channel", 21137)), 0, (0)), 100000000, 0, -915), 0), 100000000, 0, -914), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 862, 33144, 33147), ("shadow-stdlib/src/shadow_stdlib.mli", 862, 33144, 33157), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.In_channel.create] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 862, 33144, 33159), ("shadow-stdlib/src/shadow_stdlib.mli", 864, 33230, 33268), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 862, 33144, 33158), ("shadow-stdlib/src/shadow_stdlib.mli", 864, 33230, 33269), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 862, 33144, 33158), ("shadow-stdlib/src/shadow_stdlib.mli", 864, 33230, 33269), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 862, 33144, 33144), ("shadow-stdlib/src/shadow_stdlib.mli", 864, 33230, 33270), 0))], Tag1 ("Shadow_stdlib", 171)), 0); (("open_in_bin", 21182), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -913), (Tag3 ((("in_channel", 21137)), 0, (0)), 100000000, 0, -912), 0), 100000000, 0, -911), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 867, 33311, 33314), ("shadow-stdlib/src/shadow_stdlib.mli", 867, 33311, 33324), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.In_channel.create] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 867, 33311, 33326), ("shadow-stdlib/src/shadow_stdlib.mli", 869, 33397, 33435), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 867, 33311, 33325), ("shadow-stdlib/src/shadow_stdlib.mli", 869, 33397, 33436), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 867, 33311, 33325), ("shadow-stdlib/src/shadow_stdlib.mli", 869, 33397, 33436), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 867, 33311, 33311), ("shadow-stdlib/src/shadow_stdlib.mli", 869, 33397, 33437), 0))], Tag1 ("Shadow_stdlib", 172)), 0); (("open_in_gen", 21183), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("open_flag", 21161)), 0, (0)), 100000000, 0, -910)], (0)), 100000000, 0, -909), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -908), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -907), (Tag3 ((("in_channel", 21137)), 0, (0)), 100000000, 0, -906), 0), 100000000, 0, -905), 0), 100000000, 0, -904), 0), 100000000, 0, -903), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 872, 33503, 33506), ("shadow-stdlib/src/shadow_stdlib.mli", 872, 33503, 33516), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.open_in_gen] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 872, 33503, 33518), ("shadow-stdlib/src/shadow_stdlib.mli", 875, 33659, 33706), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 872, 33503, 33517), ("shadow-stdlib/src/shadow_stdlib.mli", 875, 33659, 33707), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 872, 33503, 33517), ("shadow-stdlib/src/shadow_stdlib.mli", 875, 33659, 33707), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 872, 33503, 33503), ("shadow-stdlib/src/shadow_stdlib.mli", 875, 33659, 33708), 0))], Tag1 ("Shadow_stdlib", 173)), 0); (("input_char", 21184), ((Tag1 (0, (Tag3 ((("in_channel", 21137)), 0, (0)), 100000000, 0, -902), (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -901), 0), 100000000, 0, -900), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 878, 33746, 33749), ("shadow-stdlib/src/shadow_stdlib.mli", 878, 33746, 33759), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.In_channel.input_char] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 878, 33746, 33761), ("shadow-stdlib/src/shadow_stdlib.mli", 880, 33832, 33874), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 878, 33746, 33760), ("shadow-stdlib/src/shadow_stdlib.mli", 880, 33832, 33875), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 878, 33746, 33760), ("shadow-stdlib/src/shadow_stdlib.mli", 880, 33832, 33875), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 878, 33746, 33746), ("shadow-stdlib/src/shadow_stdlib.mli", 880, 33832, 33876), 0))], Tag1 ("Shadow_stdlib", 174)), 0); (("input_line", 21185), ((Tag1 (0, (Tag3 ((("in_channel", 21137)), 0, (0)), 100000000, 0, -899), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -898), 0), 100000000, 0, -897), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 883, 33916, 33919), ("shadow-stdlib/src/shadow_stdlib.mli", 883, 33916, 33929), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.In_channel.input_line] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 883, 33916, 33931), ("shadow-stdlib/src/shadow_stdlib.mli", 885, 34002, 34044), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 883, 33916, 33930), ("shadow-stdlib/src/shadow_stdlib.mli", 885, 34002, 34045), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 883, 33916, 33930), ("shadow-stdlib/src/shadow_stdlib.mli", 885, 34002, 34045), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 883, 33916, 33916), ("shadow-stdlib/src/shadow_stdlib.mli", 885, 34002, 34046), 0))], Tag1 ("Shadow_stdlib", 175)), 0); (("input", 21186), ((Tag1 (0, (Tag3 ((("in_channel", 21137)), 0, (0)), 100000000, 0, -896), (Tag1 (0, (Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -895), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -894), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -893), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -892), 0), 100000000, 0, -891), 0), 100000000, 0, -890), 0), 100000000, 0, -889), 0), 100000000, 0, -888), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 888, 34101, 34104), ("shadow-stdlib/src/shadow_stdlib.mli", 888, 34101, 34114), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.In_channel.input] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 888, 34101, 34116), ("shadow-stdlib/src/shadow_stdlib.mli", 890, 34187, 34224), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 888, 34101, 34115), ("shadow-stdlib/src/shadow_stdlib.mli", 890, 34187, 34225), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 888, 34101, 34115), ("shadow-stdlib/src/shadow_stdlib.mli", 890, 34187, 34225), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 888, 34101, 34101), ("shadow-stdlib/src/shadow_stdlib.mli", 890, 34187, 34226), 0))], Tag1 ("Shadow_stdlib", 176)), 0); (("really_input", 21187), ((Tag1 (0, (Tag3 ((("in_channel", 21137)), 0, (0)), 100000000, 0, -887), (Tag1 (0, (Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -886), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -885), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -884), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -883), 0), 100000000, 0, -882), 0), 100000000, 0, -881), 0), 100000000, 0, -880), 0), 100000000, 0, -879), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 893, 34289, 34292), ("shadow-stdlib/src/shadow_stdlib.mli", 893, 34289, 34302), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.In_channel.really_input] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 893, 34289, 34304), ("shadow-stdlib/src/shadow_stdlib.mli", 895, 34375, 34419), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 893, 34289, 34303), ("shadow-stdlib/src/shadow_stdlib.mli", 895, 34375, 34420), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 893, 34289, 34303), ("shadow-stdlib/src/shadow_stdlib.mli", 895, 34375, 34420), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 893, 34289, 34289), ("shadow-stdlib/src/shadow_stdlib.mli", 895, 34375, 34421), 0))], Tag1 ("Shadow_stdlib", 177)), 0); (("really_input_string", 21188), ((Tag1 (0, (Tag3 ((("in_channel", 21137)), 0, (0)), 100000000, 0, -878), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -877), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -876), 0), 100000000, 0, -875), 0), 100000000, 0, -874), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 898, 34477, 34480), ("shadow-stdlib/src/shadow_stdlib.mli", 898, 34477, 34490), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is no equivalent functionality in Base or Stdio but you can use\n[Stdio.In_channel] instead.\nAlternatively, if you really want to refer the stdlib you can use\n[Stdlib.really_input_string].", (("shadow-stdlib/src/shadow_stdlib.mli", 898, 34477, 34492), ("shadow-stdlib/src/shadow_stdlib.mli", 903, 34727, 34756), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 898, 34477, 34491), ("shadow-stdlib/src/shadow_stdlib.mli", 903, 34727, 34757), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 898, 34477, 34491), ("shadow-stdlib/src/shadow_stdlib.mli", 903, 34727, 34757), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 898, 34477, 34477), ("shadow-stdlib/src/shadow_stdlib.mli", 903, 34727, 34758), 0))], Tag1 ("Shadow_stdlib", 178)), 0); (("input_byte", 21189), ((Tag1 (0, (Tag3 ((("in_channel", 21137)), 0, (0)), 100000000, 0, -873), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -872), 0), 100000000, 0, -871), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 906, 34795, 34798), ("shadow-stdlib/src/shadow_stdlib.mli", 906, 34795, 34808), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.In_channel.input_byte] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 906, 34795, 34810), ("shadow-stdlib/src/shadow_stdlib.mli", 908, 34881, 34923), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 906, 34795, 34809), ("shadow-stdlib/src/shadow_stdlib.mli", 908, 34881, 34924), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 906, 34795, 34809), ("shadow-stdlib/src/shadow_stdlib.mli", 908, 34881, 34924), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 906, 34795, 34795), ("shadow-stdlib/src/shadow_stdlib.mli", 908, 34881, 34925), 0))], Tag1 ("Shadow_stdlib", 179)), 0); (("input_binary_int", 21190), ((Tag1 (0, (Tag3 ((("in_channel", 21137)), 0, (0)), 100000000, 0, -870), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -869), 0), 100000000, 0, -868), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 911, 34968, 34971), ("shadow-stdlib/src/shadow_stdlib.mli", 911, 34968, 34981), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.In_channel.input_binary_int] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 911, 34968, 34983), ("shadow-stdlib/src/shadow_stdlib.mli", 913, 35054, 35102), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 911, 34968, 34982), ("shadow-stdlib/src/shadow_stdlib.mli", 913, 35054, 35103), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 911, 34968, 34982), ("shadow-stdlib/src/shadow_stdlib.mli", 913, 35054, 35103), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 911, 34968, 34968), ("shadow-stdlib/src/shadow_stdlib.mli", 913, 35054, 35104), 0))], Tag1 ("Shadow_stdlib", 180)), 0); (("input_value", 21191), ((Tag1 (0, (Tag3 ((("in_channel", 21137)), 0, (0)), 100000000, 0, -867), ((("a")), 100000000, 0, -866), 0), 100000000, 0, -865), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 916, 35141, 35144), ("shadow-stdlib/src/shadow_stdlib.mli", 916, 35141, 35154), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.In_channel.unsafe_input_value] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 916, 35141, 35156), ("shadow-stdlib/src/shadow_stdlib.mli", 918, 35227, 35277), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 916, 35141, 35155), ("shadow-stdlib/src/shadow_stdlib.mli", 918, 35227, 35278), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 916, 35141, 35155), ("shadow-stdlib/src/shadow_stdlib.mli", 918, 35227, 35278), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 916, 35141, 35141), ("shadow-stdlib/src/shadow_stdlib.mli", 918, 35227, 35279), 0))], Tag1 ("Shadow_stdlib", 181)), 0); (("seek_in", 21192), ((Tag1 (0, (Tag3 ((("in_channel", 21137)), 0, (0)), 100000000, 0, -864), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -863), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -862), 0), 100000000, 0, -861), 0), 100000000, 0, -860), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 921, 35321, 35324), ("shadow-stdlib/src/shadow_stdlib.mli", 921, 35321, 35334), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.In_channel.seek] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 921, 35321, 35336), ("shadow-stdlib/src/shadow_stdlib.mli", 923, 35407, 35443), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 921, 35321, 35335), ("shadow-stdlib/src/shadow_stdlib.mli", 923, 35407, 35444), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 921, 35321, 35335), ("shadow-stdlib/src/shadow_stdlib.mli", 923, 35407, 35444), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 921, 35321, 35321), ("shadow-stdlib/src/shadow_stdlib.mli", 923, 35407, 35445), 0))], Tag1 ("Shadow_stdlib", 182)), 0); (("pos_in", 21193), ((Tag1 (0, (Tag3 ((("in_channel", 21137)), 0, (0)), 100000000, 0, -859), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -858), 0), 100000000, 0, -857), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 926, 35478, 35481), ("shadow-stdlib/src/shadow_stdlib.mli", 926, 35478, 35491), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.In_channel.pos] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 926, 35478, 35493), ("shadow-stdlib/src/shadow_stdlib.mli", 928, 35564, 35599), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 926, 35478, 35492), ("shadow-stdlib/src/shadow_stdlib.mli", 928, 35564, 35600), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 926, 35478, 35492), ("shadow-stdlib/src/shadow_stdlib.mli", 928, 35564, 35600), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 926, 35478, 35478), ("shadow-stdlib/src/shadow_stdlib.mli", 928, 35564, 35601), 0))], Tag1 ("Shadow_stdlib", 183)), 0); (("in_channel_length", 21194), ((Tag1 (0, (Tag3 ((("in_channel", 21137)), 0, (0)), 100000000, 0, -856), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -855), 0), 100000000, 0, -854), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 931, 35645, 35648), ("shadow-stdlib/src/shadow_stdlib.mli", 931, 35645, 35658), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.In_channel.length] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 931, 35645, 35660), ("shadow-stdlib/src/shadow_stdlib.mli", 933, 35731, 35769), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 931, 35645, 35659), ("shadow-stdlib/src/shadow_stdlib.mli", 933, 35731, 35770), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 931, 35645, 35659), ("shadow-stdlib/src/shadow_stdlib.mli", 933, 35731, 35770), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 931, 35645, 35645), ("shadow-stdlib/src/shadow_stdlib.mli", 933, 35731, 35771), 0))], Tag1 ("Shadow_stdlib", 184)), 0); (("close_in", 21195), ((Tag1 (0, (Tag3 ((("in_channel", 21137)), 0, (0)), 100000000, 0, -853), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -852), 0), 100000000, 0, -851), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 936, 35807, 35810), ("shadow-stdlib/src/shadow_stdlib.mli", 936, 35807, 35820), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.In_channel.close] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 936, 35807, 35822), ("shadow-stdlib/src/shadow_stdlib.mli", 938, 35893, 35930), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 936, 35807, 35821), ("shadow-stdlib/src/shadow_stdlib.mli", 938, 35893, 35931), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 936, 35807, 35821), ("shadow-stdlib/src/shadow_stdlib.mli", 938, 35893, 35931), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 936, 35807, 35807), ("shadow-stdlib/src/shadow_stdlib.mli", 938, 35893, 35932), 0))], Tag1 ("Shadow_stdlib", 185)), 0); (("close_in_noerr", 21196), ((Tag1 (0, (Tag3 ((("in_channel", 21137)), 0, (0)), 100000000, 0, -850), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -849), 0), 100000000, 0, -848), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 941, 35974, 35977), ("shadow-stdlib/src/shadow_stdlib.mli", 941, 35974, 35987), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.In_channel.close] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 941, 35974, 35989), ("shadow-stdlib/src/shadow_stdlib.mli", 943, 36060, 36097), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 941, 35974, 35988), ("shadow-stdlib/src/shadow_stdlib.mli", 943, 36060, 36098), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 941, 35974, 35988), ("shadow-stdlib/src/shadow_stdlib.mli", 943, 36060, 36098), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 941, 35974, 35974), ("shadow-stdlib/src/shadow_stdlib.mli", 943, 36060, 36099), 0))], Tag1 ("Shadow_stdlib", 186)), 0); (("set_binary_mode_in", 21197), ((Tag1 (0, (Tag3 ((("in_channel", 21137)), 0, (0)), 100000000, 0, -847), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -846), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -845), 0), 100000000, 0, -844), 0), 100000000, 0, -843), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 946, 36153, 36156), ("shadow-stdlib/src/shadow_stdlib.mli", 946, 36153, 36166), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Stdio.In_channel.set_binary_mode] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 946, 36153, 36168), ("shadow-stdlib/src/shadow_stdlib.mli", 948, 36239, 36286), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 946, 36153, 36167), ("shadow-stdlib/src/shadow_stdlib.mli", 948, 36239, 36287), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 946, 36153, 36167), ("shadow-stdlib/src/shadow_stdlib.mli", 948, 36239, 36287), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 946, 36153, 36153), ("shadow-stdlib/src/shadow_stdlib.mli", 948, 36239, 36288), 0))], Tag1 ("Shadow_stdlib", 187)), 0); Tag3 (("LargeFile", 21198), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "LargeFile")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 951, 36326, 36329), ("shadow-stdlib/src/shadow_stdlib.mli", 951, 36326, 36339), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.LargeFile instead", (("shadow-stdlib/src/shadow_stdlib.mli", 951, 36326, 36341), ("shadow-stdlib/src/shadow_stdlib.mli", 955, 36562, 36611), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 951, 36326, 36340), ("shadow-stdlib/src/shadow_stdlib.mli", 955, 36562, 36612), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 951, 36326, 36340), ("shadow-stdlib/src/shadow_stdlib.mli", 955, 36562, 36612), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 951, 36326, 36326), ("shadow-stdlib/src/shadow_stdlib.mli", 955, 36562, 36613), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 188)), 0, 0); (("incr", 21199), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -842)], (0)), 100000000, 0, -841), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -840), 0), 100000000, 0, -839), (("%incr", 1, 1, "", [0], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 983, 37747, 37750), ("shadow-stdlib/src/shadow_stdlib.mli", 983, 37747, 37760), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Int.incr] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 983, 37747, 37762), ("shadow-stdlib/src/shadow_stdlib.mli", 985, 37833, 37856), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 983, 37747, 37761), ("shadow-stdlib/src/shadow_stdlib.mli", 985, 37833, 37857), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 983, 37747, 37761), ("shadow-stdlib/src/shadow_stdlib.mli", 985, 37833, 37857), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 983, 37747, 37747), ("shadow-stdlib/src/shadow_stdlib.mli", 985, 37833, 37858), 0))], Tag1 ("Shadow_stdlib", 194)), 0); (("decr", 21200), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -838)], (0)), 100000000, 0, -837), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -836), 0), 100000000, 0, -835), (("%decr", 1, 1, "", [0], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 988, 37902, 37905), ("shadow-stdlib/src/shadow_stdlib.mli", 988, 37902, 37915), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Int.decr] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 988, 37902, 37917), ("shadow-stdlib/src/shadow_stdlib.mli", 990, 37988, 38011), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 988, 37902, 37916), ("shadow-stdlib/src/shadow_stdlib.mli", 990, 37988, 38012), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 988, 37902, 37916), ("shadow-stdlib/src/shadow_stdlib.mli", 990, 37988, 38012), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 988, 37902, 37902), ("shadow-stdlib/src/shadow_stdlib.mli", 990, 37988, 38013), 0))], Tag1 ("Shadow_stdlib", 195)), 0); Tag1 (("result", 21201), ([((("a")), 100000000, 0, -833); ((("b")), 100000000, 0, -834)], 2, Tag1 ([(("Ok", 466), ([((("a")), 100000000, 0, -833)]), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), 0, Tag1 ("Shadow_stdlib", 197)); (("Error", 467), ([((("b")), 100000000, 0, -834)]), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), 0, Tag1 ("Shadow_stdlib", 198))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [((("a")), 100000000, 0, -833); ((("b")), 100000000, 0, -834)], (0)), 100000000, 0, -832)), [25; 25], [0; 0], 0, 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 993, 38093, 38096), ("shadow-stdlib/src/shadow_stdlib.mli", 993, 38093, 38106), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Result.t] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 993, 38093, 38108), ("shadow-stdlib/src/shadow_stdlib.mli", 995, 38179, 38202), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 993, 38093, 38107), ("shadow-stdlib/src/shadow_stdlib.mli", 995, 38179, 38203), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 993, 38093, 38107), ("shadow-stdlib/src/shadow_stdlib.mli", 995, 38179, 38203), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 993, 38093, 38093), ("shadow-stdlib/src/shadow_stdlib.mli", 995, 38179, 38204), 0))], 0, 0, Tag1 ("Shadow_stdlib", 196)), 0, 0); (("string_of_format", 21202), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format6"), [((("a")), 100000000, 0, -826); ((("b")), 100000000, 0, -827); ((("c")), 100000000, 0, -828); ((("d")), 100000000, 0, -829); ((("e")), 100000000, 0, -830); ((("f")), 100000000, 0, -831)], (0)), 100000000, 0, -825), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -824), 0), 100000000, 0, -823), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1019, 39351, 39354), ("shadow-stdlib/src/shadow_stdlib.mli", 1019, 39351, 39364), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.string_of_format] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1019, 39351, 39366), ("shadow-stdlib/src/shadow_stdlib.mli", 1022, 39507, 39559), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1019, 39351, 39365), ("shadow-stdlib/src/shadow_stdlib.mli", 1022, 39507, 39560), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1019, 39351, 39365), ("shadow-stdlib/src/shadow_stdlib.mli", 1022, 39507, 39560), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1019, 39351, 39351), ("shadow-stdlib/src/shadow_stdlib.mli", 1022, 39507, 39561), 0))], Tag1 ("Shadow_stdlib", 202)), 0); (("format_of_string", 21203), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format6"), [((("a")), 100000000, 0, -816); ((("b")), 100000000, 0, -817); ((("c")), 100000000, 0, -818); ((("d")), 100000000, 0, -819); ((("e")), 100000000, 0, -820); ((("f")), 100000000, 0, -821)], (0)), 100000000, 0, -822), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format6"), [((("a")), 100000000, 0, -816); ((("b")), 100000000, 0, -817); ((("c")), 100000000, 0, -818); ((("d")), 100000000, 0, -819); ((("e")), 100000000, 0, -820); ((("f")), 100000000, 0, -821)], (0)), 100000000, 0, -815), 0), 100000000, 0, -814), (("%identity", 1, 1, "", [0], 0)), (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1025, 39674, 39677), ("shadow-stdlib/src/shadow_stdlib.mli", 1025, 39674, 39687), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.format_of_string] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1025, 39674, 39689), ("shadow-stdlib/src/shadow_stdlib.mli", 1028, 39830, 39882), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1025, 39674, 39688), ("shadow-stdlib/src/shadow_stdlib.mli", 1028, 39830, 39883), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1025, 39674, 39688), ("shadow-stdlib/src/shadow_stdlib.mli", 1028, 39830, 39883), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1025, 39674, 39674), ("shadow-stdlib/src/shadow_stdlib.mli", 1028, 39830, 39884), 0))], Tag1 ("Shadow_stdlib", 203)), 0); (("^^", 21204), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format6"), [((("a")), 100000000, 0, -804); ((("b")), 100000000, 0, -805); ((("c")), 100000000, 0, -806); ((("d")), 100000000, 0, -807); ((("e")), 100000000, 0, -812); ((("f")), 100000000, 0, -811)], (0)), 100000000, 0, -813), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format6"), [((("f")), 100000000, 0, -811); ((("b")), 100000000, 0, -805); ((("c")), 100000000, 0, -806); ((("e")), 100000000, 0, -812); ((("g")), 100000000, 0, -808); ((("h")), 100000000, 0, -809)], (0)), 100000000, 0, -810), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format6"), [((("a")), 100000000, 0, -804); ((("b")), 100000000, 0, -805); ((("c")), 100000000, 0, -806); ((("d")), 100000000, 0, -807); ((("g")), 100000000, 0, -808); ((("h")), 100000000, 0, -809)], (0)), 100000000, 0, -803), 0), 100000000, 0, -802), 0), 100000000, 0, -801), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1031, 40004, 40007), ("shadow-stdlib/src/shadow_stdlib.mli", 1031, 40004, 40017), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.( ^^ )] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1031, 40004, 40019), ("shadow-stdlib/src/shadow_stdlib.mli", 1034, 40160, 40202), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1031, 40004, 40018), ("shadow-stdlib/src/shadow_stdlib.mli", 1034, 40160, 40203), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1031, 40004, 40018), ("shadow-stdlib/src/shadow_stdlib.mli", 1034, 40160, 40203), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1031, 40004, 40004), ("shadow-stdlib/src/shadow_stdlib.mli", 1034, 40160, 40204), 0))], Tag1 ("Shadow_stdlib", 204)), 0); (("exit", 21205), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -800), ((("a")), 100000000, 0, -799), 0), 100000000, 0, -798), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1037, 40227, 40230), ("shadow-stdlib/src/shadow_stdlib.mli", 1037, 40227, 40240), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.exit] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1037, 40227, 40242), ("shadow-stdlib/src/shadow_stdlib.mli", 1040, 40383, 40423), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1037, 40227, 40241), ("shadow-stdlib/src/shadow_stdlib.mli", 1040, 40383, 40424), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1037, 40227, 40241), ("shadow-stdlib/src/shadow_stdlib.mli", 1040, 40383, 40424), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1037, 40227, 40227), ("shadow-stdlib/src/shadow_stdlib.mli", 1040, 40383, 40425), 0))], Tag1 ("Shadow_stdlib", 205)), 0); (("at_exit", 21206), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -797), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -796), 0), 100000000, 0, -795), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -794), 0), 100000000, 0, -793), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1043, 40464, 40467), ("shadow-stdlib/src/shadow_stdlib.mli", 1043, 40464, 40477), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.at_exit] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1043, 40464, 40479), ("shadow-stdlib/src/shadow_stdlib.mli", 1046, 40620, 40663), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1043, 40464, 40478), ("shadow-stdlib/src/shadow_stdlib.mli", 1046, 40620, 40664), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1043, 40464, 40478), ("shadow-stdlib/src/shadow_stdlib.mli", 1046, 40620, 40664), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1043, 40464, 40464), ("shadow-stdlib/src/shadow_stdlib.mli", 1046, 40620, 40665), 0))], Tag1 ("Shadow_stdlib", 206)), 0); (("valid_float_lexem", 21207), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -792), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -791), 0), 100000000, 0, -790), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1049, 40708, 40711), ("shadow-stdlib/src/shadow_stdlib.mli", 1049, 40708, 40721), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.valid_float_lexem] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1049, 40708, 40723), ("shadow-stdlib/src/shadow_stdlib.mli", 1052, 40864, 40917), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1049, 40708, 40722), ("shadow-stdlib/src/shadow_stdlib.mli", 1052, 40864, 40918), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1049, 40708, 40722), ("shadow-stdlib/src/shadow_stdlib.mli", 1052, 40864, 40918), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1049, 40708, 40708), ("shadow-stdlib/src/shadow_stdlib.mli", 1052, 40864, 40919), 0))], Tag1 ("Shadow_stdlib", 207)), 0); (("unsafe_really_input", 21208), ((Tag1 (0, (Tag3 ((("in_channel", 21137)), 0, (0)), 100000000, 0, -789), (Tag1 (0, (Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -788), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -787), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -786), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -785), 0), 100000000, 0, -784), 0), 100000000, 0, -783), 0), 100000000, 0, -782), 0), 100000000, 0, -781), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1055, 40989, 40992), ("shadow-stdlib/src/shadow_stdlib.mli", 1055, 40989, 41002), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.unsafe_really_input] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1055, 40989, 41004), ("shadow-stdlib/src/shadow_stdlib.mli", 1058, 41145, 41200), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1055, 40989, 41003), ("shadow-stdlib/src/shadow_stdlib.mli", 1058, 41145, 41201), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1055, 40989, 41003), ("shadow-stdlib/src/shadow_stdlib.mli", 1058, 41145, 41201), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1055, 40989, 40989), ("shadow-stdlib/src/shadow_stdlib.mli", 1058, 41145, 41202), 0))], Tag1 ("Shadow_stdlib", 208)), 0); (("do_at_exit", 21209), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -780), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -779), 0), 100000000, 0, -778), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1061, 41234, 41237), ("shadow-stdlib/src/shadow_stdlib.mli", 1061, 41234, 41247), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.do_at_exit] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1061, 41234, 41249), ("shadow-stdlib/src/shadow_stdlib.mli", 1064, 41390, 41436), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1061, 41234, 41248), ("shadow-stdlib/src/shadow_stdlib.mli", 1064, 41390, 41437), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1061, 41234, 41248), ("shadow-stdlib/src/shadow_stdlib.mli", 1064, 41390, 41437), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1061, 41234, 41234), ("shadow-stdlib/src/shadow_stdlib.mli", 1064, 41390, 41438), 0))], Tag1 ("Shadow_stdlib", 209)), 0); (("do_domain_local_at_exit", 21210), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -777), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -776), 0), 100000000, 0, -775)], (0)), 100000000, 0, -774), 0, (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1067, 41489, 41492), ("shadow-stdlib/src/shadow_stdlib.mli", 1067, 41489, 41502), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.do_domain_local_at_exit] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1067, 41489, 41504), ("shadow-stdlib/src/shadow_stdlib.mli", 1070, 41645, 41704), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1067, 41489, 41503), ("shadow-stdlib/src/shadow_stdlib.mli", 1070, 41645, 41705), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1067, 41489, 41503), ("shadow-stdlib/src/shadow_stdlib.mli", 1070, 41645, 41705), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1067, 41489, 41489), ("shadow-stdlib/src/shadow_stdlib.mli", 1070, 41645, 41706), 0))], Tag1 ("Shadow_stdlib", 210)), 0); Tag3 (("Arg", 21211), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "Arg")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1073, 41733, 41736), ("shadow-stdlib/src/shadow_stdlib.mli", 1073, 41733, 41746), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.Arg instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1073, 41733, 41748), ("shadow-stdlib/src/shadow_stdlib.mli", 1077, 41969, 42012), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1073, 41733, 41747), ("shadow-stdlib/src/shadow_stdlib.mli", 1077, 41969, 42013), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1073, 41733, 41747), ("shadow-stdlib/src/shadow_stdlib.mli", 1077, 41969, 42013), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1073, 41733, 41733), ("shadow-stdlib/src/shadow_stdlib.mli", 1077, 41969, 42014), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 211)), 0, 0); Tag3 (("ArrayLabels", 21212), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "ArrayLabels")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1087, 42371, 42374), ("shadow-stdlib/src/shadow_stdlib.mli", 1087, 42371, 42384), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.ArrayLabels instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1087, 42371, 42386), ("shadow-stdlib/src/shadow_stdlib.mli", 1091, 42607, 42658), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1087, 42371, 42385), ("shadow-stdlib/src/shadow_stdlib.mli", 1091, 42607, 42659), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1087, 42371, 42385), ("shadow-stdlib/src/shadow_stdlib.mli", 1091, 42607, 42659), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1087, 42371, 42371), ("shadow-stdlib/src/shadow_stdlib.mli", 1091, 42607, 42660), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 213)), 0, 0); Tag3 (("BytesLabels", 21213), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "BytesLabels")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1122, 43962, 43965), ("shadow-stdlib/src/shadow_stdlib.mli", 1122, 43962, 43975), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.BytesLabels instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1122, 43962, 43977), ("shadow-stdlib/src/shadow_stdlib.mli", 1126, 44198, 44249), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1122, 43962, 43976), ("shadow-stdlib/src/shadow_stdlib.mli", 1126, 44198, 44250), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1122, 43962, 43976), ("shadow-stdlib/src/shadow_stdlib.mli", 1126, 44198, 44250), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1122, 43962, 43962), ("shadow-stdlib/src/shadow_stdlib.mli", 1126, 44198, 44251), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 218)), 0, 0); Tag3 (("Callback", 21214), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "Callback")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1129, 44288, 44291), ("shadow-stdlib/src/shadow_stdlib.mli", 1129, 44288, 44301), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.Callback instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1129, 44288, 44303), ("shadow-stdlib/src/shadow_stdlib.mli", 1133, 44524, 44572), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1129, 44288, 44302), ("shadow-stdlib/src/shadow_stdlib.mli", 1133, 44524, 44573), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1129, 44288, 44302), ("shadow-stdlib/src/shadow_stdlib.mli", 1133, 44524, 44573), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1129, 44288, 44288), ("shadow-stdlib/src/shadow_stdlib.mli", 1133, 44524, 44574), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 219)), 0, 0); Tag3 (("Complex", 21215), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "Complex")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1143, 44920, 44923), ("shadow-stdlib/src/shadow_stdlib.mli", 1143, 44920, 44933), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.Complex instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1143, 44920, 44935), ("shadow-stdlib/src/shadow_stdlib.mli", 1147, 45156, 45203), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1143, 44920, 44934), ("shadow-stdlib/src/shadow_stdlib.mli", 1147, 45156, 45204), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1143, 44920, 44934), ("shadow-stdlib/src/shadow_stdlib.mli", 1147, 45156, 45204), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1143, 44920, 44920), ("shadow-stdlib/src/shadow_stdlib.mli", 1147, 45156, 45205), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 221)), 0, 0); Tag3 (("Condition", 21216), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "Condition")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1150, 45244, 45247), ("shadow-stdlib/src/shadow_stdlib.mli", 1150, 45244, 45257), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.Condition instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1150, 45244, 45259), ("shadow-stdlib/src/shadow_stdlib.mli", 1154, 45480, 45529), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1150, 45244, 45258), ("shadow-stdlib/src/shadow_stdlib.mli", 1154, 45480, 45530), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1150, 45244, 45258), ("shadow-stdlib/src/shadow_stdlib.mli", 1154, 45480, 45530), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1150, 45244, 45244), ("shadow-stdlib/src/shadow_stdlib.mli", 1154, 45480, 45531), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 222)), 0, 0); Tag3 (("Digest", 21217), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "Digest")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1157, 45564, 45567), ("shadow-stdlib/src/shadow_stdlib.mli", 1157, 45564, 45577), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.Digest instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1157, 45564, 45579), ("shadow-stdlib/src/shadow_stdlib.mli", 1161, 45800, 45846), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1157, 45564, 45578), ("shadow-stdlib/src/shadow_stdlib.mli", 1161, 45800, 45847), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1157, 45564, 45578), ("shadow-stdlib/src/shadow_stdlib.mli", 1161, 45800, 45847), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1157, 45564, 45564), ("shadow-stdlib/src/shadow_stdlib.mli", 1161, 45800, 45848), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 223)), 0, 0); Tag3 (("Domain", 21218), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "Domain")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1164, 45881, 45884), ("shadow-stdlib/src/shadow_stdlib.mli", 1164, 45881, 45894), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.Domain instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1164, 45881, 45896), ("shadow-stdlib/src/shadow_stdlib.mli", 1168, 46117, 46163), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1164, 45881, 45895), ("shadow-stdlib/src/shadow_stdlib.mli", 1168, 46117, 46164), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1164, 45881, 45895), ("shadow-stdlib/src/shadow_stdlib.mli", 1168, 46117, 46164), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1164, 45881, 45881), ("shadow-stdlib/src/shadow_stdlib.mli", 1168, 46117, 46165), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 224)), 0, 0); Tag3 (("Effect", 21219), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "Effect")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1171, 46198, 46201), ("shadow-stdlib/src/shadow_stdlib.mli", 1171, 46198, 46211), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.Effect instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1171, 46198, 46213), ("shadow-stdlib/src/shadow_stdlib.mli", 1175, 46434, 46480), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1171, 46198, 46212), ("shadow-stdlib/src/shadow_stdlib.mli", 1175, 46434, 46481), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1171, 46198, 46212), ("shadow-stdlib/src/shadow_stdlib.mli", 1175, 46434, 46481), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1171, 46198, 46198), ("shadow-stdlib/src/shadow_stdlib.mli", 1175, 46434, 46482), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 225)), 0, 0); Tag3 (("Ephemeron", 21220), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "Ephemeron")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1185, 46838, 46841), ("shadow-stdlib/src/shadow_stdlib.mli", 1185, 46838, 46851), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.Ephemeron instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1185, 46838, 46853), ("shadow-stdlib/src/shadow_stdlib.mli", 1189, 47074, 47123), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1185, 46838, 46852), ("shadow-stdlib/src/shadow_stdlib.mli", 1189, 47074, 47124), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1185, 46838, 46852), ("shadow-stdlib/src/shadow_stdlib.mli", 1189, 47074, 47124), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1185, 46838, 46838), ("shadow-stdlib/src/shadow_stdlib.mli", 1189, 47074, 47125), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 227)), 0, 0); Tag3 (("Filename", 21221), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "Filename")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1192, 47162, 47165), ("shadow-stdlib/src/shadow_stdlib.mli", 1192, 47162, 47175), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.Filename instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1192, 47162, 47177), ("shadow-stdlib/src/shadow_stdlib.mli", 1196, 47398, 47446), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1192, 47162, 47176), ("shadow-stdlib/src/shadow_stdlib.mli", 1196, 47398, 47447), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1192, 47162, 47176), ("shadow-stdlib/src/shadow_stdlib.mli", 1196, 47398, 47447), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1192, 47162, 47162), ("shadow-stdlib/src/shadow_stdlib.mli", 1196, 47398, 47448), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 228)), 0, 0); Tag3 (("Format", 21222), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "Format")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1206, 47795, 47798), ("shadow-stdlib/src/shadow_stdlib.mli", 1206, 47795, 47808), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\n[Base] doesn't export a [Format] module, although the \n[Stdlib.Format.formatter] type is available (as [Formatter.t])\nfor interaction with other libraries.", (("shadow-stdlib/src/shadow_stdlib.mli", 1206, 47795, 47810), ("shadow-stdlib/src/shadow_stdlib.mli", 1210, 47999, 48036), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1206, 47795, 47809), ("shadow-stdlib/src/shadow_stdlib.mli", 1210, 47999, 48037), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1206, 47795, 47809), ("shadow-stdlib/src/shadow_stdlib.mli", 1210, 47999, 48037), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1206, 47795, 47795), ("shadow-stdlib/src/shadow_stdlib.mli", 1210, 47999, 48038), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 230)), 0, 0); Tag3 (("Fun", 21223), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "Fun")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1213, 48065, 48068), ("shadow-stdlib/src/shadow_stdlib.mli", 1213, 48065, 48078), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Fn] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 1213, 48065, 48080), ("shadow-stdlib/src/shadow_stdlib.mli", 1215, 48151, 48168), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1213, 48065, 48079), ("shadow-stdlib/src/shadow_stdlib.mli", 1215, 48151, 48169), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1213, 48065, 48079), ("shadow-stdlib/src/shadow_stdlib.mli", 1215, 48151, 48169), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1213, 48065, 48065), ("shadow-stdlib/src/shadow_stdlib.mli", 1215, 48151, 48170), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 231)), 0, 0); Tag3 (("Gc", 21224), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "Gc")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1218, 48195, 48198), ("shadow-stdlib/src/shadow_stdlib.mli", 1218, 48195, 48208), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is not equivalent functionality in Base or Stdio at the moment,\nso you need to use [Stdlib.Gc] instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1218, 48195, 48210), ("shadow-stdlib/src/shadow_stdlib.mli", 1221, 48351, 48389), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1218, 48195, 48209), ("shadow-stdlib/src/shadow_stdlib.mli", 1221, 48351, 48390), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1218, 48195, 48209), ("shadow-stdlib/src/shadow_stdlib.mli", 1221, 48351, 48390), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1218, 48195, 48195), ("shadow-stdlib/src/shadow_stdlib.mli", 1221, 48351, 48391), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 232)), 0, 0); Tag3 (("ListLabels", 21225), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "ListLabels")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1280, 50956, 50959), ("shadow-stdlib/src/shadow_stdlib.mli", 1280, 50956, 50969), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.ListLabels instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1280, 50956, 50971), ("shadow-stdlib/src/shadow_stdlib.mli", 1284, 51192, 51242), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1280, 50956, 50970), ("shadow-stdlib/src/shadow_stdlib.mli", 1284, 51192, 51243), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1280, 50956, 50970), ("shadow-stdlib/src/shadow_stdlib.mli", 1284, 51192, 51243), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1280, 50956, 50956), ("shadow-stdlib/src/shadow_stdlib.mli", 1284, 51192, 51244), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 241)), 0, 0); Tag3 (("Marshal", 21226), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "Marshal")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1294, 51587, 51590), ("shadow-stdlib/src/shadow_stdlib.mli", 1294, 51587, 51600), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.Marshal instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1294, 51587, 51602), ("shadow-stdlib/src/shadow_stdlib.mli", 1298, 51823, 51870), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1294, 51587, 51601), ("shadow-stdlib/src/shadow_stdlib.mli", 1298, 51823, 51871), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1294, 51587, 51601), ("shadow-stdlib/src/shadow_stdlib.mli", 1298, 51823, 51871), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1294, 51587, 51587), ("shadow-stdlib/src/shadow_stdlib.mli", 1298, 51823, 51872), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 243)), 0, 0); Tag3 (("MoreLabels", 21227), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "MoreLabels")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1301, 51913, 51916), ("shadow-stdlib/src/shadow_stdlib.mli", 1301, 51913, 51926), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.MoreLabels instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1301, 51913, 51928), ("shadow-stdlib/src/shadow_stdlib.mli", 1305, 52149, 52199), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1301, 51913, 51927), ("shadow-stdlib/src/shadow_stdlib.mli", 1305, 52149, 52200), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1301, 51913, 51927), ("shadow-stdlib/src/shadow_stdlib.mli", 1305, 52149, 52200), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1301, 51913, 51913), ("shadow-stdlib/src/shadow_stdlib.mli", 1305, 52149, 52201), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 244)), 0, 0); Tag3 (("Mutex", 21228), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "Mutex")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1308, 52232, 52235), ("shadow-stdlib/src/shadow_stdlib.mli", 1308, 52232, 52245), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.Mutex instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1308, 52232, 52247), ("shadow-stdlib/src/shadow_stdlib.mli", 1312, 52468, 52513), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1308, 52232, 52246), ("shadow-stdlib/src/shadow_stdlib.mli", 1312, 52468, 52514), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1308, 52232, 52246), ("shadow-stdlib/src/shadow_stdlib.mli", 1312, 52468, 52514), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1308, 52232, 52232), ("shadow-stdlib/src/shadow_stdlib.mli", 1312, 52468, 52515), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 245)), 0, 0); Tag3 (("Obj", 21229), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "Obj")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1322, 52868, 52871), ("shadow-stdlib/src/shadow_stdlib.mli", 1322, 52868, 52881), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.Obj instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1322, 52868, 52883), ("shadow-stdlib/src/shadow_stdlib.mli", 1326, 53104, 53147), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1322, 52868, 52882), ("shadow-stdlib/src/shadow_stdlib.mli", 1326, 53104, 53148), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1322, 52868, 52882), ("shadow-stdlib/src/shadow_stdlib.mli", 1326, 53104, 53148), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1322, 52868, 52868), ("shadow-stdlib/src/shadow_stdlib.mli", 1326, 53104, 53149), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 247)), 0, 0); Tag3 (("Oo", 21230), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "Oo")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1329, 53174, 53177), ("shadow-stdlib/src/shadow_stdlib.mli", 1329, 53174, 53187), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.Oo instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1329, 53174, 53189), ("shadow-stdlib/src/shadow_stdlib.mli", 1333, 53410, 53452), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1329, 53174, 53188), ("shadow-stdlib/src/shadow_stdlib.mli", 1333, 53410, 53453), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1329, 53174, 53188), ("shadow-stdlib/src/shadow_stdlib.mli", 1333, 53410, 53453), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1329, 53174, 53174), ("shadow-stdlib/src/shadow_stdlib.mli", 1333, 53410, 53454), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 248)), 0, 0); Tag3 (("Parsing", 21231), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "Parsing")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1350, 54138, 54141), ("shadow-stdlib/src/shadow_stdlib.mli", 1350, 54138, 54151), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.Parsing instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1350, 54138, 54153), ("shadow-stdlib/src/shadow_stdlib.mli", 1354, 54374, 54421), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1350, 54138, 54152), ("shadow-stdlib/src/shadow_stdlib.mli", 1354, 54374, 54422), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1350, 54138, 54152), ("shadow-stdlib/src/shadow_stdlib.mli", 1354, 54374, 54422), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1350, 54138, 54138), ("shadow-stdlib/src/shadow_stdlib.mli", 1354, 54374, 54423), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 251)), 0, 0); Tag3 (("Printexc", 21232), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "Printexc")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1357, 54460, 54463), ("shadow-stdlib/src/shadow_stdlib.mli", 1357, 54460, 54473), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nUse [Exn] or [Backtrace] instead.", (("shadow-stdlib/src/shadow_stdlib.mli", 1357, 54460, 54475), ("shadow-stdlib/src/shadow_stdlib.mli", 1359, 54546, 54579), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1357, 54460, 54474), ("shadow-stdlib/src/shadow_stdlib.mli", 1359, 54546, 54580), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1357, 54460, 54474), ("shadow-stdlib/src/shadow_stdlib.mli", 1359, 54546, 54580), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1357, 54460, 54460), ("shadow-stdlib/src/shadow_stdlib.mli", 1359, 54546, 54581), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 252)), 0, 0); Tag3 (("Scanf", 21233), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "Scanf")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1390, 55877, 55880), ("shadow-stdlib/src/shadow_stdlib.mli", 1390, 55877, 55890), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.Scanf instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1390, 55877, 55892), ("shadow-stdlib/src/shadow_stdlib.mli", 1394, 56113, 56158), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1390, 55877, 55891), ("shadow-stdlib/src/shadow_stdlib.mli", 1394, 56113, 56159), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1390, 55877, 55891), ("shadow-stdlib/src/shadow_stdlib.mli", 1394, 56113, 56159), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1390, 55877, 55877), ("shadow-stdlib/src/shadow_stdlib.mli", 1394, 56113, 56160), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 257)), 0, 0); Tag3 (("Semaphore", 21234), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "Semaphore")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1397, 56199, 56202), ("shadow-stdlib/src/shadow_stdlib.mli", 1397, 56199, 56212), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.Semaphore instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1397, 56199, 56214), ("shadow-stdlib/src/shadow_stdlib.mli", 1401, 56435, 56484), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1397, 56199, 56213), ("shadow-stdlib/src/shadow_stdlib.mli", 1401, 56435, 56485), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1397, 56199, 56213), ("shadow-stdlib/src/shadow_stdlib.mli", 1401, 56435, 56485), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1397, 56199, 56199), ("shadow-stdlib/src/shadow_stdlib.mli", 1401, 56435, 56486), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 258)), 0, 0); Tag3 (("Seq", 21235), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "Seq")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1404, 56513, 56516), ("shadow-stdlib/src/shadow_stdlib.mli", 1404, 56513, 56526), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nThere is no equivalent functionality in Base or Stdio but you can use\n[Sequence] instead.\nAlternatively, if you really want to refer the stdlib you can use\n[Stdlib.Seq].", (("shadow-stdlib/src/shadow_stdlib.mli", 1404, 56513, 56528), ("shadow-stdlib/src/shadow_stdlib.mli", 1409, 56755, 56768), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1404, 56513, 56527), ("shadow-stdlib/src/shadow_stdlib.mli", 1409, 56755, 56769), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1404, 56513, 56527), ("shadow-stdlib/src/shadow_stdlib.mli", 1409, 56755, 56769), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1404, 56513, 56513), ("shadow-stdlib/src/shadow_stdlib.mli", 1409, 56755, 56770), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 259)), 0, 0); Tag3 (("StdLabels", 21236), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "StdLabels")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1426, 57431, 57434), ("shadow-stdlib/src/shadow_stdlib.mli", 1426, 57431, 57444), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.StdLabels instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1426, 57431, 57446), ("shadow-stdlib/src/shadow_stdlib.mli", 1430, 57667, 57716), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1426, 57431, 57445), ("shadow-stdlib/src/shadow_stdlib.mli", 1430, 57667, 57717), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1426, 57431, 57445), ("shadow-stdlib/src/shadow_stdlib.mli", 1430, 57667, 57717), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1426, 57431, 57431), ("shadow-stdlib/src/shadow_stdlib.mli", 1430, 57667, 57718), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 262)), 0, 0); Tag3 (("StringLabels", 21237), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "StringLabels")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1440, 58080, 58083), ("shadow-stdlib/src/shadow_stdlib.mli", 1440, 58080, 58093), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.StringLabels instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1440, 58080, 58095), ("shadow-stdlib/src/shadow_stdlib.mli", 1444, 58316, 58368), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1440, 58080, 58094), ("shadow-stdlib/src/shadow_stdlib.mli", 1444, 58316, 58369), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1440, 58080, 58094), ("shadow-stdlib/src/shadow_stdlib.mli", 1444, 58316, 58369), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1440, 58080, 58080), ("shadow-stdlib/src/shadow_stdlib.mli", 1444, 58316, 58370), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 264)), 0, 0); Tag3 (("Type", 21238), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "Type")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1454, 58707, 58710), ("shadow-stdlib/src/shadow_stdlib.mli", 1454, 58707, 58720), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.Type instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1454, 58707, 58722), ("shadow-stdlib/src/shadow_stdlib.mli", 1458, 58943, 58987), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1454, 58707, 58721), ("shadow-stdlib/src/shadow_stdlib.mli", 1458, 58943, 58988), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1454, 58707, 58721), ("shadow-stdlib/src/shadow_stdlib.mli", 1458, 58943, 58988), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1454, 58707, 58707), ("shadow-stdlib/src/shadow_stdlib.mli", 1458, 58943, 58989), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 266)), 0, 0); Tag3 (("Weak", 21239), 1, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "Weak")), [(("deprecated", (("shadow-stdlib/src/shadow_stdlib.mli", 1475, 59643, 59646), ("shadow-stdlib/src/shadow_stdlib.mli", 1475, 59643, 59656), 0)), ([([(Tag1 (Tag2 ("[2016-09] this element comes from the stdlib distributed with OCaml.\nReferring to the stdlib directly is discouraged by Base. You should either\nuse the equivalent functionality offered by Base, or if you really want to\nrefer to the stdlib, use Stdlib.Weak instead", (("shadow-stdlib/src/shadow_stdlib.mli", 1475, 59643, 59658), ("shadow-stdlib/src/shadow_stdlib.mli", 1479, 59879, 59923), 0), 0)), (("shadow-stdlib/src/shadow_stdlib.mli", 1475, 59643, 59657), ("shadow-stdlib/src/shadow_stdlib.mli", 1479, 59879, 59924), 0), 0, 0)], (("shadow-stdlib/src/shadow_stdlib.mli", 1475, 59643, 59657), ("shadow-stdlib/src/shadow_stdlib.mli", 1479, 59879, 59924), 0))]), (("shadow-stdlib/src/shadow_stdlib.mli", 1475, 59643, 59643), ("shadow-stdlib/src/shadow_stdlib.mli", 1479, 59879, 59925), 0))], (("src/base.ml", 33, 1477, 1481), ("src/base.ml", 71, 3121, 3149), 0), Tag1 ("Shadow_stdlib", 269)), 0, 0); Tag3 (("Applicative", 21240), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Applicative")), 0, (("src/base.ml", 77, 3198, 3198), ("src/base.ml", 77, 3198, 3230), 0), Tag1 ("Base", 4)), 0, 0); Tag3 (("Array", 21241), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Array")), 0, (("src/base.ml", 78, 3231, 3231), ("src/base.ml", 78, 3231, 3251), 0), Tag1 ("Base", 5)), 0, 0); Tag3 (("Avltree", 21242), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Avltree")), 0, (("src/base.ml", 79, 3252, 3252), ("src/base.ml", 79, 3252, 3276), 0), Tag1 ("Base", 6)), 0, 0); Tag3 (("Backtrace", 21243), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Backtrace")), 0, (("src/base.ml", 80, 3277, 3277), ("src/base.ml", 80, 3277, 3305), 0), Tag1 ("Base", 7)), 0, 0); Tag3 (("Binary_search", 21244), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Binary_search")), 0, (("src/base.ml", 81, 3306, 3306), ("src/base.ml", 81, 3306, 3342), 0), Tag1 ("Base", 8)), 0, 0); Tag3 (("Binary_searchable", 21245), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Binary_searchable")), 0, (("src/base.ml", 82, 3343, 3343), ("src/base.ml", 82, 3343, 3387), 0), Tag1 ("Base", 9)), 0, 0); Tag3 (("Blit", 21246), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Blit")), 0, (("src/base.ml", 83, 3388, 3388), ("src/base.ml", 83, 3388, 3406), 0), Tag1 ("Base", 10)), 0, 0); Tag3 (("Bool", 21247), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Bool")), 0, (("src/base.ml", 84, 3407, 3407), ("src/base.ml", 84, 3407, 3425), 0), Tag1 ("Base", 11)), 0, 0); Tag3 (("Buffer", 21248), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Buffer")), 0, (("src/base.ml", 85, 3426, 3426), ("src/base.ml", 85, 3426, 3448), 0), Tag1 ("Base", 12)), 0, 0); Tag3 (("Bytes", 21249), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Bytes")), 0, (("src/base.ml", 86, 3449, 3449), ("src/base.ml", 86, 3449, 3469), 0), Tag1 ("Base", 13)), 0, 0); Tag3 (("Char", 21250), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Char")), 0, (("src/base.ml", 87, 3470, 3470), ("src/base.ml", 87, 3470, 3488), 0), Tag1 ("Base", 14)), 0, 0); Tag3 (("Comparable", 21251), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Comparable")), 0, (("src/base.ml", 88, 3489, 3489), ("src/base.ml", 88, 3489, 3519), 0), Tag1 ("Base", 15)), 0, 0); Tag3 (("Comparator", 21252), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Comparator")), 0, (("src/base.ml", 89, 3520, 3520), ("src/base.ml", 89, 3520, 3550), 0), Tag1 ("Base", 16)), 0, 0); Tag3 (("Comparisons", 21253), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Comparisons")), 0, (("src/base.ml", 90, 3551, 3551), ("src/base.ml", 90, 3551, 3583), 0), Tag1 ("Base", 17)), 0, 0); Tag3 (("Container", 21254), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Container")), 0, (("src/base.ml", 91, 3584, 3584), ("src/base.ml", 91, 3584, 3612), 0), Tag1 ("Base", 18)), 0, 0); Tag3 (("Either", 21255), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Either")), 0, (("src/base.ml", 92, 3613, 3613), ("src/base.ml", 92, 3613, 3635), 0), Tag1 ("Base", 19)), 0, 0); Tag3 (("Equal", 21256), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Equal")), 0, (("src/base.ml", 93, 3636, 3636), ("src/base.ml", 93, 3636, 3656), 0), Tag1 ("Base", 20)), 0, 0); Tag3 (("Error", 21257), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Error")), 0, (("src/base.ml", 94, 3657, 3657), ("src/base.ml", 94, 3657, 3677), 0), Tag1 ("Base", 21)), 0, 0); Tag3 (("Exn", 21258), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Exn")), 0, (("src/base.ml", 95, 3678, 3678), ("src/base.ml", 95, 3678, 3694), 0), Tag1 ("Base", 22)), 0, 0); Tag3 (("Field", 21259), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Field")), 0, (("src/base.ml", 96, 3695, 3695), ("src/base.ml", 96, 3695, 3715), 0), Tag1 ("Base", 23)), 0, 0); Tag3 (("Float", 21260), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Float")), 0, (("src/base.ml", 97, 3716, 3716), ("src/base.ml", 97, 3716, 3736), 0), Tag1 ("Base", 24)), 0, 0); Tag3 (("Floatable", 21261), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Floatable")), 0, (("src/base.ml", 98, 3737, 3737), ("src/base.ml", 98, 3737, 3765), 0), Tag1 ("Base", 25)), 0, 0); Tag3 (("Fn", 21262), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Fn")), 0, (("src/base.ml", 99, 3766, 3766), ("src/base.ml", 99, 3766, 3780), 0), Tag1 ("Base", 26)), 0, 0); Tag3 (("Formatter", 21263), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Formatter")), 0, (("src/base.ml", 100, 3781, 3781), ("src/base.ml", 100, 3781, 3809), 0), Tag1 ("Base", 27)), 0, 0); Tag3 (("Hash", 21264), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Hash")), 0, (("src/base.ml", 101, 3810, 3810), ("src/base.ml", 101, 3810, 3828), 0), Tag1 ("Base", 28)), 0, 0); Tag3 (("Hash_set", 21265), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Hash_set")), 0, (("src/base.ml", 102, 3829, 3829), ("src/base.ml", 102, 3829, 3855), 0), Tag1 ("Base", 29)), 0, 0); Tag3 (("Hashable", 21266), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Hashable")), 0, (("src/base.ml", 103, 3856, 3856), ("src/base.ml", 103, 3856, 3882), 0), Tag1 ("Base", 30)), 0, 0); Tag3 (("Hasher", 21267), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Hasher")), 0, (("src/base.ml", 104, 3883, 3883), ("src/base.ml", 104, 3883, 3905), 0), Tag1 ("Base", 31)), 0, 0); Tag3 (("Hashtbl", 21268), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Hashtbl")), 0, (("src/base.ml", 105, 3906, 3906), ("src/base.ml", 105, 3906, 3930), 0), Tag1 ("Base", 32)), 0, 0); Tag3 (("Identifiable", 21269), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Identifiable")), 0, (("src/base.ml", 106, 3931, 3931), ("src/base.ml", 106, 3931, 3965), 0), Tag1 ("Base", 33)), 0, 0); Tag3 (("Indexed_container", 21270), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Indexed_container")), 0, (("src/base.ml", 107, 3966, 3966), ("src/base.ml", 107, 3966, 4010), 0), Tag1 ("Base", 34)), 0, 0); Tag3 (("Info", 21271), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Info")), 0, (("src/base.ml", 108, 4011, 4011), ("src/base.ml", 108, 4011, 4029), 0), Tag1 ("Base", 35)), 0, 0); Tag3 (("Int", 21272), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Int")), 0, (("src/base.ml", 109, 4030, 4030), ("src/base.ml", 109, 4030, 4046), 0), Tag1 ("Base", 36)), 0, 0); Tag3 (("Int_conversions", 21273), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Int_conversions")), 0, (("src/base.ml", 110, 4047, 4047), ("src/base.ml", 110, 4047, 4087), 0), Tag1 ("Base", 37)), 0, 0); Tag3 (("Int32", 21274), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Int32")), 0, (("src/base.ml", 111, 4088, 4088), ("src/base.ml", 111, 4088, 4108), 0), Tag1 ("Base", 38)), 0, 0); Tag3 (("Int63", 21275), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Int63")), 0, (("src/base.ml", 112, 4109, 4109), ("src/base.ml", 112, 4109, 4129), 0), Tag1 ("Base", 39)), 0, 0); Tag3 (("Int64", 21276), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Int64")), 0, (("src/base.ml", 113, 4130, 4130), ("src/base.ml", 113, 4130, 4150), 0), Tag1 ("Base", 40)), 0, 0); Tag3 (("Intable", 21277), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Intable")), 0, (("src/base.ml", 114, 4151, 4151), ("src/base.ml", 114, 4151, 4175), 0), Tag1 ("Base", 41)), 0, 0); Tag3 (("Int_math", 21278), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Int_math")), 0, (("src/base.ml", 115, 4176, 4176), ("src/base.ml", 115, 4176, 4202), 0), Tag1 ("Base", 42)), 0, 0); Tag3 (("Invariant", 21279), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Invariant")), 0, (("src/base.ml", 116, 4203, 4203), ("src/base.ml", 116, 4203, 4231), 0), Tag1 ("Base", 43)), 0, 0); Tag3 (("Lazy", 21280), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Lazy")), 0, (("src/base.ml", 117, 4232, 4232), ("src/base.ml", 117, 4232, 4250), 0), Tag1 ("Base", 44)), 0, 0); Tag3 (("List", 21281), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "List")), 0, (("src/base.ml", 118, 4251, 4251), ("src/base.ml", 118, 4251, 4269), 0), Tag1 ("Base", 45)), 0, 0); Tag3 (("Map", 21282), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Map")), 0, (("src/base.ml", 119, 4270, 4270), ("src/base.ml", 119, 4270, 4286), 0), Tag1 ("Base", 46)), 0, 0); Tag3 (("Maybe_bound", 21283), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Maybe_bound")), 0, (("src/base.ml", 120, 4287, 4287), ("src/base.ml", 120, 4287, 4319), 0), Tag1 ("Base", 47)), 0, 0); Tag3 (("Monad", 21284), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Monad")), 0, (("src/base.ml", 121, 4320, 4320), ("src/base.ml", 121, 4320, 4340), 0), Tag1 ("Base", 48)), 0, 0); Tag3 (("Nativeint", 21285), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Nativeint")), 0, (("src/base.ml", 122, 4341, 4341), ("src/base.ml", 122, 4341, 4369), 0), Tag1 ("Base", 49)), 0, 0); Tag3 (("Nothing", 21286), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Nothing")), 0, (("src/base.ml", 123, 4370, 4370), ("src/base.ml", 123, 4370, 4394), 0), Tag1 ("Base", 50)), 0, 0); Tag3 (("Option", 21287), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Option")), 0, (("src/base.ml", 124, 4395, 4395), ("src/base.ml", 124, 4395, 4417), 0), Tag1 ("Base", 51)), 0, 0); Tag3 (("Option_array", 21288), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Option_array")), 0, (("src/base.ml", 125, 4418, 4418), ("src/base.ml", 125, 4418, 4452), 0), Tag1 ("Base", 52)), 0, 0); Tag3 (("Or_error", 21289), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Or_error")), 0, (("src/base.ml", 126, 4453, 4453), ("src/base.ml", 126, 4453, 4479), 0), Tag1 ("Base", 53)), 0, 0); Tag3 (("Ordered_collection_common", 21290), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Ordered_collection_common")), 0, (("src/base.ml", 127, 4480, 4480), ("src/base.ml", 127, 4480, 4540), 0), Tag1 ("Base", 54)), 0, 0); Tag3 (("Ordering", 21291), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Ordering")), 0, (("src/base.ml", 128, 4541, 4541), ("src/base.ml", 128, 4541, 4567), 0), Tag1 ("Base", 55)), 0, 0); Tag3 (("Poly", 21292), 1, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Import"), "Poly")), 0, (("src/base.ml", 129, 4568, 4568), ("src/base.ml", 129, 4568, 4586), 0), Tag1 ("Base", 56)), 0, 0); Tag3 (("Popcount", 21293), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Popcount")), [(("deprecated", (("src/base.ml", 132, 4615, 4618), ("src/base.ml", 132, 4615, 4628), 0)), ([([(Tag1 (Tag2 ("[since 2018-10] use [popcount] functions in the individual int modules", (("src/base.ml", 132, 4615, 4630), ("src/base.ml", 132, 4615, 4700), 0), 0)), (("src/base.ml", 132, 4615, 4629), ("src/base.ml", 132, 4615, 4701), 0), 0, 0)], (("src/base.ml", 132, 4615, 4629), ("src/base.ml", 132, 4615, 4701), 0))]), (("src/base.ml", 132, 4615, 4615), ("src/base.ml", 132, 4615, 4702), 0))], (("src/base.ml", 131, 4588, 4588), ("src/base.ml", 132, 4615, 4702), 0), Tag1 ("Base", 57)), 0, 0); Tag3 (("Pretty_printer", 21294), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Pretty_printer")), 0, (("src/base.ml", 134, 4704, 4704), ("src/base.ml", 134, 4704, 4742), 0), Tag1 ("Base", 58)), 0, 0); Tag3 (("Printf", 21295), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Printf")), 0, (("src/base.ml", 135, 4743, 4743), ("src/base.ml", 135, 4743, 4765), 0), Tag1 ("Base", 59)), 0, 0); Tag3 (("Linked_queue", 21296), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Linked_queue")), 0, (("src/base.ml", 136, 4766, 4766), ("src/base.ml", 136, 4766, 4800), 0), Tag1 ("Base", 60)), 0, 0); Tag3 (("Queue", 21297), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Queue")), 0, (("src/base.ml", 137, 4801, 4801), ("src/base.ml", 137, 4801, 4821), 0), Tag1 ("Base", 61)), 0, 0); Tag3 (("Random", 21298), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Random")), 0, (("src/base.ml", 138, 4822, 4822), ("src/base.ml", 138, 4822, 4844), 0), Tag1 ("Base", 62)), 0, 0); Tag3 (("Ref", 21299), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Ref")), 0, (("src/base.ml", 139, 4845, 4845), ("src/base.ml", 139, 4845, 4861), 0), Tag1 ("Base", 63)), 0, 0); Tag3 (("Result", 21300), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Result")), 0, (("src/base.ml", 140, 4862, 4862), ("src/base.ml", 140, 4862, 4884), 0), Tag1 ("Base", 64)), 0, 0); Tag3 (("Sequence", 21301), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Sequence")), 0, (("src/base.ml", 141, 4885, 4885), ("src/base.ml", 141, 4885, 4911), 0), Tag1 ("Base", 65)), 0, 0); Tag3 (("Set", 21302), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Set")), 0, (("src/base.ml", 142, 4912, 4912), ("src/base.ml", 142, 4912, 4928), 0), Tag1 ("Base", 66)), 0, 0); Tag3 (("Sexpable", 21303), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Sexpable")), 0, (("src/base.ml", 143, 4929, 4929), ("src/base.ml", 143, 4929, 4955), 0), Tag1 ("Base", 67)), 0, 0); Tag3 (("Sign", 21304), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Sign")), 0, (("src/base.ml", 144, 4956, 4956), ("src/base.ml", 144, 4956, 4974), 0), Tag1 ("Base", 68)), 0, 0); Tag3 (("Sign_or_nan", 21305), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Sign_or_nan")), 0, (("src/base.ml", 145, 4975, 4975), ("src/base.ml", 145, 4975, 5007), 0), Tag1 ("Base", 69)), 0, 0); Tag3 (("Source_code_position", 21306), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Source_code_position")), 0, (("src/base.ml", 146, 5008, 5008), ("src/base.ml", 146, 5008, 5058), 0), Tag1 ("Base", 70)), 0, 0); Tag3 (("Stack", 21307), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Stack")), 0, (("src/base.ml", 147, 5059, 5059), ("src/base.ml", 147, 5059, 5079), 0), Tag1 ("Base", 71)), 0, 0); Tag3 (("Staged", 21308), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Staged")), 0, (("src/base.ml", 148, 5080, 5080), ("src/base.ml", 148, 5080, 5102), 0), Tag1 ("Base", 72)), 0, 0); Tag3 (("String", 21309), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "String")), 0, (("src/base.ml", 149, 5103, 5103), ("src/base.ml", 149, 5103, 5125), 0), Tag1 ("Base", 73)), 0, 0); Tag3 (("Stringable", 21310), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Stringable")), 0, (("src/base.ml", 150, 5126, 5126), ("src/base.ml", 150, 5126, 5156), 0), Tag1 ("Base", 74)), 0, 0); Tag3 (("Sys", 21311), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Sys")), 0, (("src/base.ml", 151, 5157, 5157), ("src/base.ml", 151, 5157, 5173), 0), Tag1 ("Base", 75)), 0, 0); Tag3 (("T", 21312), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "T")), 0, (("src/base.ml", 152, 5174, 5174), ("src/base.ml", 152, 5174, 5186), 0), Tag1 ("Base", 76)), 0, 0); Tag3 (("Type_equal", 21313), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Type_equal")), 0, (("src/base.ml", 153, 5187, 5187), ("src/base.ml", 153, 5187, 5217), 0), Tag1 ("Base", 77)), 0, 0); Tag3 (("Uniform_array", 21314), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Uniform_array")), 0, (("src/base.ml", 154, 5218, 5218), ("src/base.ml", 154, 5218, 5254), 0), Tag1 ("Base", 78)), 0, 0); Tag3 (("Unit", 21315), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Unit")), 0, (("src/base.ml", 155, 5255, 5255), ("src/base.ml", 155, 5255, 5273), 0), Tag1 ("Base", 79)), 0, 0); Tag3 (("Uchar", 21316), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Uchar")), 0, (("src/base.ml", 156, 5274, 5274), ("src/base.ml", 156, 5274, 5294), 0), Tag1 ("Base", 80)), 0, 0); Tag3 (("Variant", 21317), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Variant")), 0, (("src/base.ml", 157, 5295, 5295), ("src/base.ml", 157, 5295, 5319), 0), Tag1 ("Base", 81)), 0, 0); Tag3 (("With_return", 21318), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "With_return")), 0, (("src/base.ml", 158, 5320, 5320), ("src/base.ml", 158, 5320, 5352), 0), Tag1 ("Base", 82)), 0, 0); Tag3 (("Word_size", 21319), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Word_size")), 0, (("src/base.ml", 159, 5353, 5353), ("src/base.ml", 159, 5353, 5381), 0), Tag1 ("Base", 83)), 0, 0); Tag4 (("T", 21320), (((Tag1 ((Tag2 ("Base__T")), "T"))), 0, (("src/t.ml", 7, 232, 232), ("src/t.ml", 9, 261, 264), 0), Tag1 ("Base__T", 1)), 0); Tag4 (("T1", 21321), (((Tag1 ((Tag2 ("Base__T")), "T1"))), 0, (("src/t.ml", 11, 266, 266), ("src/t.ml", 13, 299, 302), 0), Tag1 ("Base__T", 3)), 0); Tag4 (("T2", 21322), (((Tag1 ((Tag2 ("Base__T")), "T2"))), 0, (("src/t.ml", 15, 304, 304), ("src/t.ml", 17, 343, 346), 0), Tag1 ("Base__T", 5)), 0); Tag4 (("T3", 21323), (((Tag1 ((Tag2 ("Base__T")), "T3"))), 0, (("src/t.ml", 19, 348, 348), ("src/t.ml", 21, 391, 394), 0), Tag1 ("Base__T", 7)), 0); Tag3 (("Sexp", 21324), 0, (Tag1 ([Tag1 (("t", 21509), (0, 0, Tag1 ([(("Atom", 405), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1441)]), 0, (("src/sexp.mli", 3, 56, 58), ("src/sexp.mli", 3, 56, 74), 0), 0, Tag1 ("Base__Sexp", 1)); (("List", 406), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 21509)), 0, (0)), 100000000, 0, -1443)], (0)), 100000000, 0, -1442)]), 0, (("src/sexp.mli", 4, 75, 77), ("src/sexp.mli", 4, 75, 93), 0), 0, Tag1 ("Base__Sexp", 2))], 0), 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1440)), 0, 0, 0, 0, (("src/sexp.mli", 2, 29, 29), ("src/sexp.mli", 5, 94, 118), 0), [(("deriving_inline", (("src/sexp.mli", 5, 94, 97), ("src/sexp.mli", 5, 94, 112), 0)), ([([(((("hash"), (("src/sexp.mli", 5, 94, 113), ("src/sexp.mli", 5, 94, 117), 0))), (("src/sexp.mli", 5, 94, 113), ("src/sexp.mli", 5, 94, 117), 0), 0, 0)], (("src/sexp.mli", 5, 94, 113), ("src/sexp.mli", 5, 94, 117), 0))]), (("src/sexp.mli", 5, 94, 94), ("src/sexp.mli", 5, 94, 118), 0))], 0, 0, Tag1 ("Base__Sexp", 0)), 1, 0); (("hash_fold_t", 21510), ((Tag3 (Tag1 ((Tag2 ("Base__Ppx_hash_lib")), "hash_fold"), [(Tag3 ((("t", 21509)), 0, (0)), 100000000, 0, -1439)], (0)), 100000000, 0, -1438), 0, (("src/sexp.mli", 7, 120, 128), ("src/sexp.mli", 7, 120, 168), 0), 0, Tag1 ("Base__Ppx_hash_lib", 4)), 0); (("hash", 21511), ((Tag1 (0, (Tag3 ((("t", 21509)), 0, (0)), 100000000, 0, -1437), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__Ppx_hash_lib")), "Std"), "Hash"), "hash_value"), 0, (0)), 100000000, 0, -1436), 0), 100000000, 0, -1435), 0, (("src/sexp.mli", 7, 120, 128), ("src/sexp.mli", 7, 120, 168), 0), 0, Tag1 ("Base__Ppx_hash_lib", 5)), 0); (("t_of_sexp", 21512), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1434), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1433), 0), 100000000, 0, -1432), 0, (("src/sexp.mli", 11, 180, 188), ("src/sexp.mli", 11, 180, 247), 0), 0, Tag1 ("Sexplib0__Sexp", 3)), 0); (("sexp_of_t", 21513), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1431), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1430), 0), 100000000, 0, -1429), 0, (("src/sexp.mli", 11, 180, 188), ("src/sexp.mli", 11, 180, 247), 0), 0, Tag1 ("Sexplib0__Sexp", 4)), 0); Tag2 (("Not_found_s", 21514), ((Tag3 ("exn", 7)), 0, ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1428)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Sexplib0__Sexp", 7)), 2, 0); Tag2 (("Of_sexp_error", 21515), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -1426); (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1427)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Sexplib0__Sexp", 8)), 2, 0); (("message", 21516), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1425), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1423); (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1424)]), 100000000, 0, -1422)], (0)), 100000000, 0, -1421), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1420), 0), 100000000, 0, -1419), 0), 100000000, 0, -1418), 0, (("src/sexp.mli", 11, 180, 188), ("src/sexp.mli", 11, 180, 247), 0), 0, Tag1 ("Sexplib0__Sexp", 9)), 0); (("default_indent", 21517), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1417)], (0)), 100000000, 0, -1416), 0, (("src/sexp.mli", 11, 180, 188), ("src/sexp.mli", 11, 180, 247), 0), 0, Tag1 ("Sexplib0__Sexp", 10)), 0); (("pp_hum", 21518), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -1415), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1414), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1413), 0), 100000000, 0, -1412), 0), 100000000, 0, -1411), 0, (("src/sexp.mli", 11, 180, 188), ("src/sexp.mli", 11, 180, 247), 0), 0, Tag1 ("Sexplib0__Sexp", 11)), 0); (("pp_hum_indent", 21519), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1410), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -1409), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1408), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1407), 0), 100000000, 0, -1406), 0), 100000000, 0, -1405), 0), 100000000, 0, -1404), 0, (("src/sexp.mli", 11, 180, 188), ("src/sexp.mli", 11, 180, 247), 0), 0, Tag1 ("Sexplib0__Sexp", 12)), 0); (("pp_mach", 21520), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -1403), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1402), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1401), 0), 100000000, 0, -1400), 0), 100000000, 0, -1399), 0, (("src/sexp.mli", 11, 180, 188), ("src/sexp.mli", 11, 180, 247), 0), 0, Tag1 ("Sexplib0__Sexp", 13)), 0); (("pp", 21521), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -1398), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1397), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1396), 0), 100000000, 0, -1395), 0), 100000000, 0, -1394), 0, (("src/sexp.mli", 11, 180, 188), ("src/sexp.mli", 11, 180, 247), 0), 0, Tag1 ("Sexplib0__Sexp", 14)), 0); (("to_string_hum", 21522), ((Tag1 (Tag1 ("indent"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1393)], (0)), 100000000, 0, -1392), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1391), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1390), 0), 100000000, 0, -1389), 0), 100000000, 0, -1388), 0, (("src/sexp.mli", 11, 180, 188), ("src/sexp.mli", 11, 180, 247), 0), 0, Tag1 ("Sexplib0__Sexp", 15)), 0); (("to_string_mach", 21523), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1387), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1386), 0), 100000000, 0, -1385), 0, (("src/sexp.mli", 11, 180, 188), ("src/sexp.mli", 11, 180, 247), 0), 0, Tag1 ("Sexplib0__Sexp", 16)), 0); (("to_string", 21524), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1384), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1383), 0), 100000000, 0, -1382), 0, (("src/sexp.mli", 11, 180, 188), ("src/sexp.mli", 11, 180, 247), 0), 0, Tag1 ("Sexplib0__Sexp", 17)), 0); (("of_float_style", 21525), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag8 (([("No_underscores", (0)); ("Underscores", (0))], (0, 100000000, 0, -1381), 1, 0, 0)), 100000000, 0, -1380)], (0)), 100000000, 0, -1379), 0, (("src/sexp.mli", 11, 180, 188), ("src/sexp.mli", 11, 180, 247), 0), 0, Tag1 ("Sexplib0__Sexp", 18)), 0); (("of_int_style", 21526), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag8 (([("No_underscores", (0)); ("Underscores", (0))], (0, 100000000, 0, -1378), 1, 0, 0)), 100000000, 0, -1377)], (0)), 100000000, 0, -1376), 0, (("src/sexp.mli", 11, 180, 188), ("src/sexp.mli", 11, 180, 247), 0), 0, Tag1 ("Sexplib0__Sexp", 19)), 0); Tag3 (("Private", 21527), 1, (Tag3 (Tag1 ((Tag2 ("Base__Sexp")), "Private")), 0, (("src/sexp.mli", 11, 180, 188), ("src/sexp.mli", 11, 180, 247), 0), Tag1 ("Sexplib0__Sexp", 29)), 0, 0); (("t_sexp_grammar", 21528), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("t", 21509)), 0, (0)), 100000000, 0, -1375)], (0)), 100000000, 0, -1374), 0, (("src/sexp.mli", 13, 249, 249), ("src/sexp.mli", 13, 249, 295), 0), 0, Tag1 ("Base__Sexp", 6)), 0); (("invariant", 21529), ((Tag1 (0, (Tag3 ((("t", 21509)), 0, (0)), 100000000, 0, -1373), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1372), 0), 100000000, 0, -1371), 0, (("src/sexp.mli", 15, 297, 297), ("src/sexp.mli", 15, 297, 322), 0), 0, Tag1 ("Base__Sexp", 7)), 0); (("of_string", 21530), ((Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1370), 0, (("src/sexp.mli", 20, 584, 584), ("src/sexp.mli", 21, 605, 675), 0), [(("deprecated", (("src/sexp.mli", 21, 605, 608), ("src/sexp.mli", 21, 605, 618), 0)), ([([(Tag1 (Tag2 ("[since 2018-02] Use [Parsexp.Single.parse_string_exn]", (("src/sexp.mli", 21, 605, 620), ("src/sexp.mli", 21, 605, 673), 0), 0)), (("src/sexp.mli", 21, 605, 619), ("src/sexp.mli", 21, 605, 674), 0), 0, 0)], (("src/sexp.mli", 21, 605, 619), ("src/sexp.mli", 21, 605, 674), 0))]), (("src/sexp.mli", 21, 605, 605), ("src/sexp.mli", 21, 605, 675), 0))], Tag1 ("Base__Sexp", 8)), 0); ((">=", 21531), ((Tag1 (0, (Tag3 ((("t", 21509)), 0, (0)), 100000000, 0, -1369), (Tag1 (0, (Tag3 ((("t", 21509)), 0, (0)), 100000000, 0, -1368), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1367), 0), 100000000, 0, -1366), 0), 100000000, 0, -1365), 0, (("src/sexp_with_comparable.mli", 9, 174, 182), ("src/sexp_with_comparable.mli", 9, 174, 211), 0), 0, Tag1 ("Base__Comparisons", 1)), 0); (("<=", 21532), ((Tag1 (0, (Tag3 ((("t", 21509)), 0, (0)), 100000000, 0, -1364), (Tag1 (0, (Tag3 ((("t", 21509)), 0, (0)), 100000000, 0, -1363), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1362), 0), 100000000, 0, -1361), 0), 100000000, 0, -1360), 0, (("src/sexp_with_comparable.mli", 9, 174, 182), ("src/sexp_with_comparable.mli", 9, 174, 211), 0), 0, Tag1 ("Base__Comparisons", 2)), 0); (("=", 21533), ((Tag1 (0, (Tag3 ((("t", 21509)), 0, (0)), 100000000, 0, -1359), (Tag1 (0, (Tag3 ((("t", 21509)), 0, (0)), 100000000, 0, -1358), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1357), 0), 100000000, 0, -1356), 0), 100000000, 0, -1355), 0, (("src/sexp_with_comparable.mli", 9, 174, 182), ("src/sexp_with_comparable.mli", 9, 174, 211), 0), 0, Tag1 ("Base__Comparisons", 3)), 0); ((">", 21534), ((Tag1 (0, (Tag3 ((("t", 21509)), 0, (0)), 100000000, 0, -1354), (Tag1 (0, (Tag3 ((("t", 21509)), 0, (0)), 100000000, 0, -1353), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1352), 0), 100000000, 0, -1351), 0), 100000000, 0, -1350), 0, (("src/sexp_with_comparable.mli", 9, 174, 182), ("src/sexp_with_comparable.mli", 9, 174, 211), 0), 0, Tag1 ("Base__Comparisons", 4)), 0); (("<", 21535), ((Tag1 (0, (Tag3 ((("t", 21509)), 0, (0)), 100000000, 0, -1349), (Tag1 (0, (Tag3 ((("t", 21509)), 0, (0)), 100000000, 0, -1348), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1347), 0), 100000000, 0, -1346), 0), 100000000, 0, -1345), 0, (("src/sexp_with_comparable.mli", 9, 174, 182), ("src/sexp_with_comparable.mli", 9, 174, 211), 0), 0, Tag1 ("Base__Comparisons", 5)), 0); (("<>", 21536), ((Tag1 (0, (Tag3 ((("t", 21509)), 0, (0)), 100000000, 0, -1344), (Tag1 (0, (Tag3 ((("t", 21509)), 0, (0)), 100000000, 0, -1343), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1342), 0), 100000000, 0, -1341), 0), 100000000, 0, -1340), 0, (("src/sexp_with_comparable.mli", 9, 174, 182), ("src/sexp_with_comparable.mli", 9, 174, 211), 0), 0, Tag1 ("Base__Comparisons", 6)), 0); (("equal", 21537), ((Tag1 (0, (Tag3 ((("t", 21509)), 0, (0)), 100000000, 0, -1339), (Tag1 (0, (Tag3 ((("t", 21509)), 0, (0)), 100000000, 0, -1338), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1337), 0), 100000000, 0, -1336), 0), 100000000, 0, -1335), 0, (("src/sexp_with_comparable.mli", 9, 174, 182), ("src/sexp_with_comparable.mli", 9, 174, 211), 0), 0, Tag1 ("Base__Comparisons", 8)), 0); (("compare", 21538), ((Tag1 (0, (Tag3 ((("t", 21509)), 0, (0)), 100000000, 0, -1334), (Tag1 (0, (Tag3 ((("t", 21509)), 0, (0)), 100000000, 0, -1333), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1332), 0), 100000000, 0, -1331), 0), 100000000, 0, -1330), 0, (("src/sexp_with_comparable.mli", 9, 174, 182), ("src/sexp_with_comparable.mli", 9, 174, 211), 0), 0, Tag1 ("Base__Comparisons", 9)), 0); (("min", 21539), ((Tag1 (0, (Tag3 ((("t", 21509)), 0, (0)), 100000000, 0, -1329), (Tag1 (0, (Tag3 ((("t", 21509)), 0, (0)), 100000000, 0, -1328), (Tag3 ((("t", 21509)), 0, (0)), 100000000, 0, -1327), 0), 100000000, 0, -1326), 0), 100000000, 0, -1325), 0, (("src/sexp_with_comparable.mli", 9, 174, 182), ("src/sexp_with_comparable.mli", 9, 174, 211), 0), 0, Tag1 ("Base__Comparisons", 10)), 0); (("max", 21540), ((Tag1 (0, (Tag3 ((("t", 21509)), 0, (0)), 100000000, 0, -1324), (Tag1 (0, (Tag3 ((("t", 21509)), 0, (0)), 100000000, 0, -1323), (Tag3 ((("t", 21509)), 0, (0)), 100000000, 0, -1322), 0), 100000000, 0, -1321), 0), 100000000, 0, -1320), 0, (("src/sexp_with_comparable.mli", 9, 174, 182), ("src/sexp_with_comparable.mli", 9, 174, 211), 0), 0, Tag1 ("Base__Comparisons", 11)), 0); (("ascending", 21541), ((Tag1 (0, (Tag3 ((("t", 21509)), 0, (0)), 100000000, 0, -1319), (Tag1 (0, (Tag3 ((("t", 21509)), 0, (0)), 100000000, 0, -1318), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1317), 0), 100000000, 0, -1316), 0), 100000000, 0, -1315), 0, (("src/sexp_with_comparable.mli", 9, 174, 182), ("src/sexp_with_comparable.mli", 9, 174, 211), 0), 0, Tag1 ("Base__Comparable_intf", 19)), 0); (("descending", 21542), ((Tag1 (0, (Tag3 ((("t", 21509)), 0, (0)), 100000000, 0, -1314), (Tag1 (0, (Tag3 ((("t", 21509)), 0, (0)), 100000000, 0, -1313), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1312), 0), 100000000, 0, -1311), 0), 100000000, 0, -1310), 0, (("src/sexp_with_comparable.mli", 9, 174, 182), ("src/sexp_with_comparable.mli", 9, 174, 211), 0), 0, Tag1 ("Base__Comparable_intf", 20)), 0); (("between", 21543), ((Tag1 (0, (Tag3 ((("t", 21509)), 0, (0)), 100000000, 0, -1309), (Tag1 (("low"), (Tag3 ((("t", 21509)), 0, (0)), 100000000, 0, -1308), (Tag1 (("high"), (Tag3 ((("t", 21509)), 0, (0)), 100000000, 0, -1307), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1306), 0), 100000000, 0, -1305), 0), 100000000, 0, -1304), 0), 100000000, 0, -1303), 0, (("src/sexp_with_comparable.mli", 9, 174, 182), ("src/sexp_with_comparable.mli", 9, 174, 211), 0), 0, Tag1 ("Base__Comparable_intf", 21)), 0); (("clamp_exn", 21544), ((Tag1 (0, (Tag3 ((("t", 21509)), 0, (0)), 100000000, 0, -1302), (Tag1 (("min"), (Tag3 ((("t", 21509)), 0, (0)), 100000000, 0, -1301), (Tag1 (("max"), (Tag3 ((("t", 21509)), 0, (0)), 100000000, 0, -1300), (Tag3 ((("t", 21509)), 0, (0)), 100000000, 0, -1299), 0), 100000000, 0, -1298), 0), 100000000, 0, -1297), 0), 100000000, 0, -1296), 0, (("src/sexp_with_comparable.mli", 9, 174, 182), ("src/sexp_with_comparable.mli", 9, 174, 211), 0), 0, Tag1 ("Base__Comparable_intf", 22)), 0); (("clamp", 21545), ((Tag1 (0, (Tag3 ((("t", 21509)), 0, (0)), 100000000, 0, -1295), (Tag1 (("min"), (Tag3 ((("t", 21509)), 0, (0)), 100000000, 0, -1294), (Tag1 (("max"), (Tag3 ((("t", 21509)), 0, (0)), 100000000, 0, -1293), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((("t", 21509)), 0, (0)), 100000000, 0, -1292)], (0)), 100000000, 0, -1291), 0), 100000000, 0, -1290), 0), 100000000, 0, -1289), 0), 100000000, 0, -1288), 0, (("src/sexp_with_comparable.mli", 9, 174, 182), ("src/sexp_with_comparable.mli", 9, 174, 211), 0), 0, Tag1 ("Base__Comparable_intf", 23)), 0); Tag1 (("comparator_witness", 21546), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Base__Sexp_with_comparable")), "comparator_witness"), 0, (0)), 100000000, 0, -1287)), 0, 0, 0, 0, (("src/sexp_with_comparable.mli", 9, 174, 182), ("src/sexp_with_comparable.mli", 9, 174, 211), 0), 0, 0, 0, Tag1 ("Base__Comparator", 5)), 1, 0); (("comparator", 21547), ((Tag3 (Tag1 ((Tag2 ("Base__Comparator")), "comparator"), [(Tag3 ((("t", 21509)), 0, (0)), 100000000, 0, -1285); (Tag3 ((("comparator_witness", 21546)), 0, (0)), 100000000, 0, -1286)], (0)), 100000000, 0, -1284), 0, (("src/sexp_with_comparable.mli", 9, 174, 182), ("src/sexp_with_comparable.mli", 9, 174, 211), 0), 0, Tag1 ("Base__Comparator", 6)), 0)]), 0, (("src/base.ml", 165, 5536, 5536), ("src/base.ml", 167, 5603, 5606), 0), Tag1 ("Base", 84)), 0, 0); Tag3 (("Exported_for_specific_uses", 21325), 0, (Tag1 ([Tag3 (("Fieldslib", 21548), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Fieldslib")), 0, (("src/base.ml", 172, 5660, 5662), ("src/base.ml", 172, 5660, 5690), 0), Tag1 ("Base", 85)), 0, 0); Tag3 (("Globalize", 21549), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Globalize")), 0, (("src/base.ml", 173, 5691, 5693), ("src/base.ml", 173, 5691, 5721), 0), Tag1 ("Base", 86)), 0, 0); Tag3 (("Obj_local", 21550), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Obj_local")), 0, (("src/base.ml", 174, 5722, 5724), ("src/base.ml", 174, 5722, 5752), 0), Tag1 ("Base", 87)), 0, 0); Tag3 (("Ppx_compare_lib", 21551), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Ppx_compare_lib")), 0, (("src/base.ml", 175, 5753, 5755), ("src/base.ml", 175, 5753, 5795), 0), Tag1 ("Base", 88)), 0, 0); Tag3 (("Ppx_enumerate_lib", 21552), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Ppx_enumerate_lib")), 0, (("src/base.ml", 176, 5796, 5798), ("src/base.ml", 176, 5796, 5842), 0), Tag1 ("Base", 89)), 0, 0); Tag3 (("Ppx_hash_lib", 21553), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib")), 0, (("src/base.ml", 177, 5843, 5845), ("src/base.ml", 177, 5843, 5879), 0), Tag1 ("Base", 90)), 0, 0); Tag3 (("Variantslib", 21554), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Variantslib")), 0, (("src/base.ml", 178, 5880, 5882), ("src/base.ml", 178, 5880, 5914), 0), Tag1 ("Base", 91)), 0, 0); (("am_testing", 21555), ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1444), 0, (("src/base.ml", 180, 5916, 5922), ("src/base.ml", 180, 5916, 5932), 0), 0, Tag1 ("Base", 92)), 0)]), 0, (("src/base.ml", 171, 5617, 5617), ("src/base.ml", 181, 5946, 5949), 0), Tag1 ("Base", 93)), 0, 0); Tag3 (("Export", 21326), 0, (Tag1 ([Tag1 (("array", 21556), ([((("a")), 100000000, 0, -2215)], 1, 0, 1, ((Tag3 (Tag1 ((("Array", 21241)), "t"), [((("a")), 100000000, 0, -2215)], (0)), 100000000, 0, -2214)), [63], [0], 0, 0, (("src/base.ml", 187, 6071, 6073), ("src/base.ml", 188, 6100, 6167), 0), [(("deriving_inline", (("src/base.ml", 188, 6100, 6105), ("src/base.ml", 188, 6100, 6120), 0)), ([([(Tag8 ([(((("compare"), (("src/base.ml", 188, 6100, 6121), ("src/base.ml", 188, 6100, 6128), 0))), (("src/base.ml", 188, 6100, 6121), ("src/base.ml", 188, 6100, 6128), 0), 0, 0); (((("equal"), (("src/base.ml", 188, 6100, 6130), ("src/base.ml", 188, 6100, 6135), 0))), (("src/base.ml", 188, 6100, 6130), ("src/base.ml", 188, 6100, 6135), 0), 0, 0); (((("globalize"), (("src/base.ml", 188, 6100, 6137), ("src/base.ml", 188, 6100, 6146), 0))), (("src/base.ml", 188, 6100, 6137), ("src/base.ml", 188, 6100, 6146), 0), 0, 0); (((("sexp"), (("src/base.ml", 188, 6100, 6148), ("src/base.ml", 188, 6100, 6152), 0))), (("src/base.ml", 188, 6100, 6148), ("src/base.ml", 188, 6100, 6152), 0), 0, 0); (((("sexp_grammar"), (("src/base.ml", 188, 6100, 6154), ("src/base.ml", 188, 6100, 6166), 0))), (("src/base.ml", 188, 6100, 6154), ("src/base.ml", 188, 6100, 6166), 0), 0, 0)]), (("src/base.ml", 188, 6100, 6121), ("src/base.ml", 188, 6100, 6166), 0), 0, 0)], (("src/base.ml", 188, 6100, 6121), ("src/base.ml", 188, 6100, 6166), 0))]), (("src/base.ml", 188, 6100, 6102), ("src/base.ml", 188, 6100, 6167), 0))], 0, 0, Tag1 ("Base", 94)), 1, 0); (("compare_array", 21557), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -2209), (Tag1 (0, ((("a")), 100000000, 0, -2209), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -2213), 0), 100000000, 0, -2212), 0), 100000000, 0, -2211), (Tag1 (0, (Tag3 ((("array", 21556)), [((("a")), 100000000, 0, -2209)], (0)), 100000000, 0, -2210), (Tag1 (0, (Tag3 ((("array", 21556)), [((("a")), 100000000, 0, -2209)], (0)), 100000000, 0, -2208), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -2207), 0), 100000000, 0, -2206), 0), 100000000, 0, -2205), 0), 100000000, 0, -2204), 0, (("src/base.ml", 190, 6169, 6175), ("src/base.ml", 190, 6169, 6188), 0), 0, Tag1 ("Base", 95)), 0); (("equal_array", 21558), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -2199), (Tag1 (0, ((("a")), 100000000, 0, -2199), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2203), 0), 100000000, 0, -2202), 0), 100000000, 0, -2201), (Tag1 (0, (Tag3 ((("array", 21556)), [((("a")), 100000000, 0, -2199)], (0)), 100000000, 0, -2200), (Tag1 (0, (Tag3 ((("array", 21556)), [((("a")), 100000000, 0, -2199)], (0)), 100000000, 0, -2198), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2197), 0), 100000000, 0, -2196), 0), 100000000, 0, -2195), 0), 100000000, 0, -2194), 0, (("src/base.ml", 191, 6260, 6266), ("src/base.ml", 191, 6260, 6277), 0), 0, Tag1 ("Base", 96)), 0); (("globalize_array", 21559), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -2191), ((("a")), 100000000, 0, -2191), 0), 100000000, 0, -2193), (Tag1 (0, (Tag3 ((("array", 21556)), [((("a")), 100000000, 0, -2191)], (0)), 100000000, 0, -2192), (Tag3 ((("array", 21556)), [((("a")), 100000000, 0, -2191)], (0)), 100000000, 0, -2190), 0), 100000000, 0, -2189), 0), 100000000, 0, -2188), 0, (("src/base.ml", 193, 6350, 6356), ("src/base.ml", 193, 6350, 6371), 0), 0, Tag1 ("Base", 97)), 0); (("array_of_sexp", 21560), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -2187), ((("a")), 100000000, 0, -2184), 0), 100000000, 0, -2186), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -2185), (Tag3 ((("array", 21556)), [((("a")), 100000000, 0, -2184)], (0)), 100000000, 0, -2183), 0), 100000000, 0, -2182), 0), 100000000, 0, -2181), 0, (("src/base.ml", 202, 6621, 6627), ("src/base.ml", 202, 6621, 6640), 0), 0, Tag1 ("Base", 99)), 0); (("sexp_of_array", 21561), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -2178), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -2180), 0), 100000000, 0, -2179), (Tag1 (0, (Tag3 ((("array", 21556)), [((("a")), 100000000, 0, -2178)], (0)), 100000000, 0, -2177), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -2176), 0), 100000000, 0, -2175), 0), 100000000, 0, -2174), 0, (("src/base.ml", 206, 6730, 6736), ("src/base.ml", 206, 6730, 6749), 0), 0, Tag1 ("Base", 100)), 0); (("array_sexp_grammar", 21562), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [((("a")), 100000000, 0, -2172)], (0)), 100000000, 0, -2173), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("array", 21556)), [((("a")), 100000000, 0, -2172)], (0)), 100000000, 0, -2171)], (0)), 100000000, 0, -2170), 0), 100000000, 0, -2169), 0, (("src/base.ml", 210, 6839, 6845), ("src/base.ml", 210, 6839, 6863), 0), 0, Tag1 ("Base", 102)), 0); Tag1 (("bool", 21563), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Bool", 21247)), "t"), 0, (0)), 100000000, 0, -2168)), 0, 0, 0, 0, (("src/base.ml", 218, 7027, 7029), ("src/base.ml", 219, 7048, 7121), 0), [(("deriving_inline", (("src/base.ml", 219, 7048, 7053), ("src/base.ml", 219, 7048, 7068), 0)), ([([(Tag8 ([(((("compare"), (("src/base.ml", 219, 7048, 7069), ("src/base.ml", 219, 7048, 7076), 0))), (("src/base.ml", 219, 7048, 7069), ("src/base.ml", 219, 7048, 7076), 0), 0, 0); (((("equal"), (("src/base.ml", 219, 7048, 7078), ("src/base.ml", 219, 7048, 7083), 0))), (("src/base.ml", 219, 7048, 7078), ("src/base.ml", 219, 7048, 7083), 0), 0, 0); (((("globalize"), (("src/base.ml", 219, 7048, 7085), ("src/base.ml", 219, 7048, 7094), 0))), (("src/base.ml", 219, 7048, 7085), ("src/base.ml", 219, 7048, 7094), 0), 0, 0); (((("hash"), (("src/base.ml", 219, 7048, 7096), ("src/base.ml", 219, 7048, 7100), 0))), (("src/base.ml", 219, 7048, 7096), ("src/base.ml", 219, 7048, 7100), 0), 0, 0); (((("sexp"), (("src/base.ml", 219, 7048, 7102), ("src/base.ml", 219, 7048, 7106), 0))), (("src/base.ml", 219, 7048, 7102), ("src/base.ml", 219, 7048, 7106), 0), 0, 0); (((("sexp_grammar"), (("src/base.ml", 219, 7048, 7108), ("src/base.ml", 219, 7048, 7120), 0))), (("src/base.ml", 219, 7048, 7108), ("src/base.ml", 219, 7048, 7120), 0), 0, 0)]), (("src/base.ml", 219, 7048, 7069), ("src/base.ml", 219, 7048, 7120), 0), 0, 0)], (("src/base.ml", 219, 7048, 7069), ("src/base.ml", 219, 7048, 7120), 0))]), (("src/base.ml", 219, 7048, 7050), ("src/base.ml", 219, 7048, 7121), 0))], 1, 0, Tag1 ("Base", 105)), 1, 0); (("compare_bool", 21564), ((Tag1 (0, (Tag3 ((("bool", 21563)), 0, (0)), 100000000, 0, -2167), (Tag1 (0, (Tag3 ((("bool", 21563)), 0, (0)), 100000000, 0, -2166), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -2165), 0), 100000000, 0, -2164), 0), 100000000, 0, -2163), 0, (("src/base.ml", 221, 7123, 7129), ("src/base.ml", 221, 7123, 7141), 0), 0, Tag1 ("Base", 106)), 0); (("equal_bool", 21565), ((Tag1 (0, (Tag3 ((("bool", 21563)), 0, (0)), 100000000, 0, -2162), (Tag1 (0, (Tag3 ((("bool", 21563)), 0, (0)), 100000000, 0, -2161), (Tag3 ((("bool", 21563)), 0, (0)), 100000000, 0, -2160), 0), 100000000, 0, -2159), 0), 100000000, 0, -2158), 0, (("src/base.ml", 222, 7181, 7187), ("src/base.ml", 222, 7181, 7197), 0), 0, Tag1 ("Base", 107)), 0); (("globalize_bool", 21566), ((Tag1 (0, (Tag3 ((("bool", 21563)), 0, (0)), 100000000, 0, -2157), (Tag3 ((("bool", 21563)), 0, (0)), 100000000, 0, -2156), 0), 100000000, 0, -2155), 0, (("src/base.ml", 224, 7237, 7244), ("src/base.ml", 224, 7237, 7258), 0), 0, Tag1 ("Base", 108)), 0); (("hash_fold_bool", 21567), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -2154), (Tag1 (0, (Tag3 ((("bool", 21563)), 0, (0)), 100000000, 0, -2153), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -2152), 0), 100000000, 0, -2151), 0), 100000000, 0, -2150), 0, (("src/base.ml", 228, 7351, 7358), ("src/base.ml", 228, 7351, 7372), 0), 0, Tag1 ("Base", 109)), 0); (("hash_bool", 21568), ((Tag1 (0, (Tag3 ((("bool", 21563)), 0, (0)), 100000000, 0, -2149), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "hash_value"), 0, (0)), 100000000, 0, -2148), 0), 100000000, 0, -2147), 0, (("src/base.ml", 233, 7480, 7487), ("src/base.ml", 233, 7480, 7496), 0), 0, Tag1 ("Base", 110)), 0); (("bool_of_sexp", 21569), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -2146), (Tag3 ((("bool", 21563)), 0, (0)), 100000000, 0, -2145), 0), 100000000, 0, -2144), 0, (("src/base.ml", 238, 7597, 7603), ("src/base.ml", 238, 7597, 7615), 0), 0, Tag1 ("Base", 113)), 0); (("sexp_of_bool", 21570), ((Tag1 (0, (Tag3 ((("bool", 21563)), 0, (0)), 100000000, 0, -2143), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -2142), 0), 100000000, 0, -2141), 0, (("src/base.ml", 239, 7661, 7667), ("src/base.ml", 239, 7661, 7679), 0), 0, Tag1 ("Base", 114)), 0); (("bool_sexp_grammar", 21571), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("bool", 21563)), 0, (0)), 100000000, 0, -2140)], (0)), 100000000, 0, -2139), 0, (("src/base.ml", 240, 7725, 7732), ("src/base.ml", 240, 7725, 7749), 0), 0, Tag1 ("Base", 115)), 0); Tag1 (("char", 21572), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Char", 21250)), "t"), 0, (0)), 100000000, 0, -2138)), 0, 0, 0, 0, (("src/base.ml", 244, 7817, 7819), ("src/base.ml", 245, 7838, 7911), 0), [(("deriving_inline", (("src/base.ml", 245, 7838, 7843), ("src/base.ml", 245, 7838, 7858), 0)), ([([(Tag8 ([(((("compare"), (("src/base.ml", 245, 7838, 7859), ("src/base.ml", 245, 7838, 7866), 0))), (("src/base.ml", 245, 7838, 7859), ("src/base.ml", 245, 7838, 7866), 0), 0, 0); (((("equal"), (("src/base.ml", 245, 7838, 7868), ("src/base.ml", 245, 7838, 7873), 0))), (("src/base.ml", 245, 7838, 7868), ("src/base.ml", 245, 7838, 7873), 0), 0, 0); (((("globalize"), (("src/base.ml", 245, 7838, 7875), ("src/base.ml", 245, 7838, 7884), 0))), (("src/base.ml", 245, 7838, 7875), ("src/base.ml", 245, 7838, 7884), 0), 0, 0); (((("hash"), (("src/base.ml", 245, 7838, 7886), ("src/base.ml", 245, 7838, 7890), 0))), (("src/base.ml", 245, 7838, 7886), ("src/base.ml", 245, 7838, 7890), 0), 0, 0); (((("sexp"), (("src/base.ml", 245, 7838, 7892), ("src/base.ml", 245, 7838, 7896), 0))), (("src/base.ml", 245, 7838, 7892), ("src/base.ml", 245, 7838, 7896), 0), 0, 0); (((("sexp_grammar"), (("src/base.ml", 245, 7838, 7898), ("src/base.ml", 245, 7838, 7910), 0))), (("src/base.ml", 245, 7838, 7898), ("src/base.ml", 245, 7838, 7910), 0), 0, 0)]), (("src/base.ml", 245, 7838, 7859), ("src/base.ml", 245, 7838, 7910), 0), 0, 0)], (("src/base.ml", 245, 7838, 7859), ("src/base.ml", 245, 7838, 7910), 0))]), (("src/base.ml", 245, 7838, 7840), ("src/base.ml", 245, 7838, 7911), 0))], 1, 0, Tag1 ("Base", 116)), 1, 0); (("compare_char", 21573), ((Tag1 (0, (Tag3 ((("char", 21572)), 0, (0)), 100000000, 0, -2137), (Tag1 (0, (Tag3 ((("char", 21572)), 0, (0)), 100000000, 0, -2136), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -2135), 0), 100000000, 0, -2134), 0), 100000000, 0, -2133), 0, (("src/base.ml", 247, 7913, 7919), ("src/base.ml", 247, 7913, 7931), 0), 0, Tag1 ("Base", 117)), 0); (("equal_char", 21574), ((Tag1 (0, (Tag3 ((("char", 21572)), 0, (0)), 100000000, 0, -2132), (Tag1 (0, (Tag3 ((("char", 21572)), 0, (0)), 100000000, 0, -2131), (Tag3 ((("bool", 21563)), 0, (0)), 100000000, 0, -2130), 0), 100000000, 0, -2129), 0), 100000000, 0, -2128), 0, (("src/base.ml", 248, 7971, 7977), ("src/base.ml", 248, 7971, 7987), 0), 0, Tag1 ("Base", 118)), 0); (("globalize_char", 21575), ((Tag1 (0, (Tag3 ((("char", 21572)), 0, (0)), 100000000, 0, -2127), (Tag3 ((("char", 21572)), 0, (0)), 100000000, 0, -2126), 0), 100000000, 0, -2125), 0, (("src/base.ml", 250, 8027, 8034), ("src/base.ml", 250, 8027, 8048), 0), 0, Tag1 ("Base", 119)), 0); (("hash_fold_char", 21576), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -2124), (Tag1 (0, (Tag3 ((("char", 21572)), 0, (0)), 100000000, 0, -2123), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -2122), 0), 100000000, 0, -2121), 0), 100000000, 0, -2120), 0, (("src/base.ml", 254, 8141, 8148), ("src/base.ml", 254, 8141, 8162), 0), 0, Tag1 ("Base", 120)), 0); (("hash_char", 21577), ((Tag1 (0, (Tag3 ((("char", 21572)), 0, (0)), 100000000, 0, -2119), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "hash_value"), 0, (0)), 100000000, 0, -2118), 0), 100000000, 0, -2117), 0, (("src/base.ml", 259, 8270, 8277), ("src/base.ml", 259, 8270, 8286), 0), 0, Tag1 ("Base", 121)), 0); (("char_of_sexp", 21578), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -2116), (Tag3 ((("char", 21572)), 0, (0)), 100000000, 0, -2115), 0), 100000000, 0, -2114), 0, (("src/base.ml", 264, 8387, 8393), ("src/base.ml", 264, 8387, 8405), 0), 0, Tag1 ("Base", 124)), 0); (("sexp_of_char", 21579), ((Tag1 (0, (Tag3 ((("char", 21572)), 0, (0)), 100000000, 0, -2113), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -2112), 0), 100000000, 0, -2111), 0, (("src/base.ml", 265, 8451, 8457), ("src/base.ml", 265, 8451, 8469), 0), 0, Tag1 ("Base", 125)), 0); (("char_sexp_grammar", 21580), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("char", 21572)), 0, (0)), 100000000, 0, -2110)], (0)), 100000000, 0, -2109), 0, (("src/base.ml", 266, 8515, 8522), ("src/base.ml", 266, 8515, 8539), 0), 0, Tag1 ("Base", 126)), 0); Tag1 (("exn", 21581), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Exn", 21258)), "t"), 0, (0)), 100000000, 0, -2108)), 0, 0, 0, 0, (("src/base.ml", 270, 8607, 8609), ("src/base.ml", 270, 8607, 8653), 0), [(("deriving_inline", (("src/base.ml", 270, 8607, 8629), ("src/base.ml", 270, 8607, 8644), 0)), ([([(((("sexp_of"), (("src/base.ml", 270, 8607, 8645), ("src/base.ml", 270, 8607, 8652), 0))), (("src/base.ml", 270, 8607, 8645), ("src/base.ml", 270, 8607, 8652), 0), 0, 0)], (("src/base.ml", 270, 8607, 8645), ("src/base.ml", 270, 8607, 8652), 0))]), (("src/base.ml", 270, 8607, 8626), ("src/base.ml", 270, 8607, 8653), 0))], 0, 0, Tag1 ("Base", 127)), 1, 0); (("sexp_of_exn", 21582), ((Tag1 (0, (Tag3 ((("exn", 21581)), 0, (0)), 100000000, 0, -2107), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -2106), 0), 100000000, 0, -2105), 0, (("src/base.ml", 272, 8655, 8661), ("src/base.ml", 272, 8655, 8672), 0), 0, Tag1 ("Base", 128)), 0); Tag1 (("float", 21583), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Float", 21260)), "t"), 0, (0)), 100000000, 0, -2104)), 0, 0, 0, 0, (("src/base.ml", 276, 8729, 8731), ("src/base.ml", 277, 8752, 8825), 0), [(("deriving_inline", (("src/base.ml", 277, 8752, 8757), ("src/base.ml", 277, 8752, 8772), 0)), ([([(Tag8 ([(((("compare"), (("src/base.ml", 277, 8752, 8773), ("src/base.ml", 277, 8752, 8780), 0))), (("src/base.ml", 277, 8752, 8773), ("src/base.ml", 277, 8752, 8780), 0), 0, 0); (((("equal"), (("src/base.ml", 277, 8752, 8782), ("src/base.ml", 277, 8752, 8787), 0))), (("src/base.ml", 277, 8752, 8782), ("src/base.ml", 277, 8752, 8787), 0), 0, 0); (((("globalize"), (("src/base.ml", 277, 8752, 8789), ("src/base.ml", 277, 8752, 8798), 0))), (("src/base.ml", 277, 8752, 8789), ("src/base.ml", 277, 8752, 8798), 0), 0, 0); (((("hash"), (("src/base.ml", 277, 8752, 8800), ("src/base.ml", 277, 8752, 8804), 0))), (("src/base.ml", 277, 8752, 8800), ("src/base.ml", 277, 8752, 8804), 0), 0, 0); (((("sexp"), (("src/base.ml", 277, 8752, 8806), ("src/base.ml", 277, 8752, 8810), 0))), (("src/base.ml", 277, 8752, 8806), ("src/base.ml", 277, 8752, 8810), 0), 0, 0); (((("sexp_grammar"), (("src/base.ml", 277, 8752, 8812), ("src/base.ml", 277, 8752, 8824), 0))), (("src/base.ml", 277, 8752, 8812), ("src/base.ml", 277, 8752, 8824), 0), 0, 0)]), (("src/base.ml", 277, 8752, 8773), ("src/base.ml", 277, 8752, 8824), 0), 0, 0)], (("src/base.ml", 277, 8752, 8773), ("src/base.ml", 277, 8752, 8824), 0))]), (("src/base.ml", 277, 8752, 8754), ("src/base.ml", 277, 8752, 8825), 0))], 0, 0, Tag1 ("Base", 129)), 1, 0); (("compare_float", 21584), ((Tag1 (0, (Tag3 ((("float", 21583)), 0, (0)), 100000000, 0, -2103), (Tag1 (0, (Tag3 ((("float", 21583)), 0, (0)), 100000000, 0, -2102), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -2101), 0), 100000000, 0, -2100), 0), 100000000, 0, -2099), 0, (("src/base.ml", 279, 8827, 8833), ("src/base.ml", 279, 8827, 8846), 0), 0, Tag1 ("Base", 130)), 0); (("equal_float", 21585), ((Tag1 (0, (Tag3 ((("float", 21583)), 0, (0)), 100000000, 0, -2098), (Tag1 (0, (Tag3 ((("float", 21583)), 0, (0)), 100000000, 0, -2097), (Tag3 ((("bool", 21563)), 0, (0)), 100000000, 0, -2096), 0), 100000000, 0, -2095), 0), 100000000, 0, -2094), 0, (("src/base.ml", 280, 8889, 8895), ("src/base.ml", 280, 8889, 8906), 0), 0, Tag1 ("Base", 131)), 0); (("globalize_float", 21586), ((Tag1 (0, (Tag3 ((("float", 21583)), 0, (0)), 100000000, 0, -2093), (Tag3 ((("float", 21583)), 0, (0)), 100000000, 0, -2092), 0), 100000000, 0, -2091), 0, (("src/base.ml", 282, 8949, 8956), ("src/base.ml", 282, 8949, 8971), 0), 0, Tag1 ("Base", 132)), 0); (("hash_fold_float", 21587), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -2090), (Tag1 (0, (Tag3 ((("float", 21583)), 0, (0)), 100000000, 0, -2089), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -2088), 0), 100000000, 0, -2087), 0), 100000000, 0, -2086), 0, (("src/base.ml", 286, 9069, 9076), ("src/base.ml", 286, 9069, 9091), 0), 0, Tag1 ("Base", 133)), 0); (("hash_float", 21588), ((Tag1 (0, (Tag3 ((("float", 21583)), 0, (0)), 100000000, 0, -2085), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "hash_value"), 0, (0)), 100000000, 0, -2084), 0), 100000000, 0, -2083), 0, (("src/base.ml", 291, 9201, 9208), ("src/base.ml", 291, 9201, 9218), 0), 0, Tag1 ("Base", 134)), 0); (("float_of_sexp", 21589), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -2082), (Tag3 ((("float", 21583)), 0, (0)), 100000000, 0, -2081), 0), 100000000, 0, -2080), 0, (("src/base.ml", 296, 9321, 9327), ("src/base.ml", 296, 9321, 9340), 0), 0, Tag1 ("Base", 137)), 0); (("sexp_of_float", 21590), ((Tag1 (0, (Tag3 ((("float", 21583)), 0, (0)), 100000000, 0, -2079), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -2078), 0), 100000000, 0, -2077), 0, (("src/base.ml", 297, 9388, 9394), ("src/base.ml", 297, 9388, 9407), 0), 0, Tag1 ("Base", 138)), 0); (("float_sexp_grammar", 21591), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("float", 21583)), 0, (0)), 100000000, 0, -2076)], (0)), 100000000, 0, -2075), 0, (("src/base.ml", 298, 9455, 9462), ("src/base.ml", 298, 9455, 9480), 0), 0, Tag1 ("Base", 139)), 0); Tag1 (("int", 21592), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Int", 21272)), "t"), 0, (0)), 100000000, 0, -2074)), 0, 0, 0, 0, (("src/base.ml", 302, 9550, 9552), ("src/base.ml", 302, 9550, 9640), 0), [(("deriving_inline", (("src/base.ml", 302, 9550, 9572), ("src/base.ml", 302, 9550, 9587), 0)), ([([(Tag8 ([(((("compare"), (("src/base.ml", 302, 9550, 9588), ("src/base.ml", 302, 9550, 9595), 0))), (("src/base.ml", 302, 9550, 9588), ("src/base.ml", 302, 9550, 9595), 0), 0, 0); (((("equal"), (("src/base.ml", 302, 9550, 9597), ("src/base.ml", 302, 9550, 9602), 0))), (("src/base.ml", 302, 9550, 9597), ("src/base.ml", 302, 9550, 9602), 0), 0, 0); (((("globalize"), (("src/base.ml", 302, 9550, 9604), ("src/base.ml", 302, 9550, 9613), 0))), (("src/base.ml", 302, 9550, 9604), ("src/base.ml", 302, 9550, 9613), 0), 0, 0); (((("hash"), (("src/base.ml", 302, 9550, 9615), ("src/base.ml", 302, 9550, 9619), 0))), (("src/base.ml", 302, 9550, 9615), ("src/base.ml", 302, 9550, 9619), 0), 0, 0); (((("sexp"), (("src/base.ml", 302, 9550, 9621), ("src/base.ml", 302, 9550, 9625), 0))), (("src/base.ml", 302, 9550, 9621), ("src/base.ml", 302, 9550, 9625), 0), 0, 0); (((("sexp_grammar"), (("src/base.ml", 302, 9550, 9627), ("src/base.ml", 302, 9550, 9639), 0))), (("src/base.ml", 302, 9550, 9627), ("src/base.ml", 302, 9550, 9639), 0), 0, 0)]), (("src/base.ml", 302, 9550, 9588), ("src/base.ml", 302, 9550, 9639), 0), 0, 0)], (("src/base.ml", 302, 9550, 9588), ("src/base.ml", 302, 9550, 9639), 0))]), (("src/base.ml", 302, 9550, 9569), ("src/base.ml", 302, 9550, 9640), 0))], 1, 0, Tag1 ("Base", 140)), 1, 0); (("compare_int", 21593), ((Tag1 (0, (Tag3 ((("int", 21592)), 0, (0)), 100000000, 0, -2073), (Tag1 (0, (Tag3 ((("int", 21592)), 0, (0)), 100000000, 0, -2072), (Tag3 ((("int", 21592)), 0, (0)), 100000000, 0, -2071), 0), 100000000, 0, -2070), 0), 100000000, 0, -2069), 0, (("src/base.ml", 304, 9642, 9648), ("src/base.ml", 304, 9642, 9659), 0), 0, Tag1 ("Base", 141)), 0); (("equal_int", 21594), ((Tag1 (0, (Tag3 ((("int", 21592)), 0, (0)), 100000000, 0, -2068), (Tag1 (0, (Tag3 ((("int", 21592)), 0, (0)), 100000000, 0, -2067), (Tag3 ((("bool", 21563)), 0, (0)), 100000000, 0, -2066), 0), 100000000, 0, -2065), 0), 100000000, 0, -2064), 0, (("src/base.ml", 305, 9696, 9702), ("src/base.ml", 305, 9696, 9711), 0), 0, Tag1 ("Base", 142)), 0); (("globalize_int", 21595), ((Tag1 (0, (Tag3 ((("int", 21592)), 0, (0)), 100000000, 0, -2063), (Tag3 ((("int", 21592)), 0, (0)), 100000000, 0, -2062), 0), 100000000, 0, -2061), 0, (("src/base.ml", 307, 9748, 9755), ("src/base.ml", 307, 9748, 9768), 0), 0, Tag1 ("Base", 143)), 0); (("hash_fold_int", 21596), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -2060), (Tag1 (0, (Tag3 ((("int", 21592)), 0, (0)), 100000000, 0, -2059), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -2058), 0), 100000000, 0, -2057), 0), 100000000, 0, -2056), 0, (("src/base.ml", 311, 9856, 9863), ("src/base.ml", 311, 9856, 9876), 0), 0, Tag1 ("Base", 144)), 0); (("hash_int", 21597), ((Tag1 (0, (Tag3 ((("int", 21592)), 0, (0)), 100000000, 0, -2055), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "hash_value"), 0, (0)), 100000000, 0, -2054), 0), 100000000, 0, -2053), 0, (("src/base.ml", 314, 9969, 9976), ("src/base.ml", 314, 9969, 9984), 0), 0, Tag1 ("Base", 145)), 0); (("int_of_sexp", 21598), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -2052), (Tag3 ((("int", 21592)), 0, (0)), 100000000, 0, -2051), 0), 100000000, 0, -2050), 0, (("src/base.ml", 319, 10083, 10089), ("src/base.ml", 319, 10083, 10100), 0), 0, Tag1 ("Base", 148)), 0); (("sexp_of_int", 21599), ((Tag1 (0, (Tag3 ((("int", 21592)), 0, (0)), 100000000, 0, -2049), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -2048), 0), 100000000, 0, -2047), 0, (("src/base.ml", 320, 10144, 10150), ("src/base.ml", 320, 10144, 10161), 0), 0, Tag1 ("Base", 149)), 0); (("int_sexp_grammar", 21600), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("int", 21592)), 0, (0)), 100000000, 0, -2046)], (0)), 100000000, 0, -2045), 0, (("src/base.ml", 321, 10205, 10212), ("src/base.ml", 321, 10205, 10228), 0), 0, Tag1 ("Base", 150)), 0); Tag1 (("int32", 21601), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Int32", 21274)), "t"), 0, (0)), 100000000, 0, -2044)), 0, 0, 0, 0, (("src/base.ml", 325, 10294, 10296), ("src/base.ml", 326, 10317, 10390), 0), [(("deriving_inline", (("src/base.ml", 326, 10317, 10322), ("src/base.ml", 326, 10317, 10337), 0)), ([([(Tag8 ([(((("compare"), (("src/base.ml", 326, 10317, 10338), ("src/base.ml", 326, 10317, 10345), 0))), (("src/base.ml", 326, 10317, 10338), ("src/base.ml", 326, 10317, 10345), 0), 0, 0); (((("equal"), (("src/base.ml", 326, 10317, 10347), ("src/base.ml", 326, 10317, 10352), 0))), (("src/base.ml", 326, 10317, 10347), ("src/base.ml", 326, 10317, 10352), 0), 0, 0); (((("globalize"), (("src/base.ml", 326, 10317, 10354), ("src/base.ml", 326, 10317, 10363), 0))), (("src/base.ml", 326, 10317, 10354), ("src/base.ml", 326, 10317, 10363), 0), 0, 0); (((("hash"), (("src/base.ml", 326, 10317, 10365), ("src/base.ml", 326, 10317, 10369), 0))), (("src/base.ml", 326, 10317, 10365), ("src/base.ml", 326, 10317, 10369), 0), 0, 0); (((("sexp"), (("src/base.ml", 326, 10317, 10371), ("src/base.ml", 326, 10317, 10375), 0))), (("src/base.ml", 326, 10317, 10371), ("src/base.ml", 326, 10317, 10375), 0), 0, 0); (((("sexp_grammar"), (("src/base.ml", 326, 10317, 10377), ("src/base.ml", 326, 10317, 10389), 0))), (("src/base.ml", 326, 10317, 10377), ("src/base.ml", 326, 10317, 10389), 0), 0, 0)]), (("src/base.ml", 326, 10317, 10338), ("src/base.ml", 326, 10317, 10389), 0), 0, 0)], (("src/base.ml", 326, 10317, 10338), ("src/base.ml", 326, 10317, 10389), 0))]), (("src/base.ml", 326, 10317, 10319), ("src/base.ml", 326, 10317, 10390), 0))], 0, 0, Tag1 ("Base", 151)), 1, 0); (("compare_int32", 21602), ((Tag1 (0, (Tag3 ((("int32", 21601)), 0, (0)), 100000000, 0, -2043), (Tag1 (0, (Tag3 ((("int32", 21601)), 0, (0)), 100000000, 0, -2042), (Tag3 ((("int", 21592)), 0, (0)), 100000000, 0, -2041), 0), 100000000, 0, -2040), 0), 100000000, 0, -2039), 0, (("src/base.ml", 328, 10392, 10398), ("src/base.ml", 328, 10392, 10411), 0), 0, Tag1 ("Base", 152)), 0); (("equal_int32", 21603), ((Tag1 (0, (Tag3 ((("int32", 21601)), 0, (0)), 100000000, 0, -2038), (Tag1 (0, (Tag3 ((("int32", 21601)), 0, (0)), 100000000, 0, -2037), (Tag3 ((("bool", 21563)), 0, (0)), 100000000, 0, -2036), 0), 100000000, 0, -2035), 0), 100000000, 0, -2034), 0, (("src/base.ml", 329, 10454, 10460), ("src/base.ml", 329, 10454, 10471), 0), 0, Tag1 ("Base", 153)), 0); (("globalize_int32", 21604), ((Tag1 (0, (Tag3 ((("int32", 21601)), 0, (0)), 100000000, 0, -2033), (Tag3 ((("int32", 21601)), 0, (0)), 100000000, 0, -2032), 0), 100000000, 0, -2031), 0, (("src/base.ml", 331, 10514, 10521), ("src/base.ml", 331, 10514, 10536), 0), 0, Tag1 ("Base", 154)), 0); (("hash_fold_int32", 21605), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -2030), (Tag1 (0, (Tag3 ((("int32", 21601)), 0, (0)), 100000000, 0, -2029), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -2028), 0), 100000000, 0, -2027), 0), 100000000, 0, -2026), 0, (("src/base.ml", 335, 10634, 10641), ("src/base.ml", 335, 10634, 10656), 0), 0, Tag1 ("Base", 155)), 0); (("hash_int32", 21606), ((Tag1 (0, (Tag3 ((("int32", 21601)), 0, (0)), 100000000, 0, -2025), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "hash_value"), 0, (0)), 100000000, 0, -2024), 0), 100000000, 0, -2023), 0, (("src/base.ml", 340, 10766, 10773), ("src/base.ml", 340, 10766, 10783), 0), 0, Tag1 ("Base", 156)), 0); (("int32_of_sexp", 21607), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -2022), (Tag3 ((("int32", 21601)), 0, (0)), 100000000, 0, -2021), 0), 100000000, 0, -2020), 0, (("src/base.ml", 345, 10886, 10892), ("src/base.ml", 345, 10886, 10905), 0), 0, Tag1 ("Base", 159)), 0); (("sexp_of_int32", 21608), ((Tag1 (0, (Tag3 ((("int32", 21601)), 0, (0)), 100000000, 0, -2019), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -2018), 0), 100000000, 0, -2017), 0, (("src/base.ml", 346, 10953, 10959), ("src/base.ml", 346, 10953, 10972), 0), 0, Tag1 ("Base", 160)), 0); (("int32_sexp_grammar", 21609), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("int32", 21601)), 0, (0)), 100000000, 0, -2016)], (0)), 100000000, 0, -2015), 0, (("src/base.ml", 347, 11020, 11027), ("src/base.ml", 347, 11020, 11045), 0), 0, Tag1 ("Base", 161)), 0); Tag1 (("int64", 21610), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Int64", 21276)), "t"), 0, (0)), 100000000, 0, -2014)), 0, 0, 0, 0, (("src/base.ml", 351, 11115, 11117), ("src/base.ml", 352, 11138, 11211), 0), [(("deriving_inline", (("src/base.ml", 352, 11138, 11143), ("src/base.ml", 352, 11138, 11158), 0)), ([([(Tag8 ([(((("compare"), (("src/base.ml", 352, 11138, 11159), ("src/base.ml", 352, 11138, 11166), 0))), (("src/base.ml", 352, 11138, 11159), ("src/base.ml", 352, 11138, 11166), 0), 0, 0); (((("equal"), (("src/base.ml", 352, 11138, 11168), ("src/base.ml", 352, 11138, 11173), 0))), (("src/base.ml", 352, 11138, 11168), ("src/base.ml", 352, 11138, 11173), 0), 0, 0); (((("globalize"), (("src/base.ml", 352, 11138, 11175), ("src/base.ml", 352, 11138, 11184), 0))), (("src/base.ml", 352, 11138, 11175), ("src/base.ml", 352, 11138, 11184), 0), 0, 0); (((("hash"), (("src/base.ml", 352, 11138, 11186), ("src/base.ml", 352, 11138, 11190), 0))), (("src/base.ml", 352, 11138, 11186), ("src/base.ml", 352, 11138, 11190), 0), 0, 0); (((("sexp"), (("src/base.ml", 352, 11138, 11192), ("src/base.ml", 352, 11138, 11196), 0))), (("src/base.ml", 352, 11138, 11192), ("src/base.ml", 352, 11138, 11196), 0), 0, 0); (((("sexp_grammar"), (("src/base.ml", 352, 11138, 11198), ("src/base.ml", 352, 11138, 11210), 0))), (("src/base.ml", 352, 11138, 11198), ("src/base.ml", 352, 11138, 11210), 0), 0, 0)]), (("src/base.ml", 352, 11138, 11159), ("src/base.ml", 352, 11138, 11210), 0), 0, 0)], (("src/base.ml", 352, 11138, 11159), ("src/base.ml", 352, 11138, 11210), 0))]), (("src/base.ml", 352, 11138, 11140), ("src/base.ml", 352, 11138, 11211), 0))], 0, 0, Tag1 ("Base", 162)), 1, 0); (("compare_int64", 21611), ((Tag1 (0, (Tag3 ((("int64", 21610)), 0, (0)), 100000000, 0, -2013), (Tag1 (0, (Tag3 ((("int64", 21610)), 0, (0)), 100000000, 0, -2012), (Tag3 ((("int", 21592)), 0, (0)), 100000000, 0, -2011), 0), 100000000, 0, -2010), 0), 100000000, 0, -2009), 0, (("src/base.ml", 354, 11213, 11219), ("src/base.ml", 354, 11213, 11232), 0), 0, Tag1 ("Base", 163)), 0); (("equal_int64", 21612), ((Tag1 (0, (Tag3 ((("int64", 21610)), 0, (0)), 100000000, 0, -2008), (Tag1 (0, (Tag3 ((("int64", 21610)), 0, (0)), 100000000, 0, -2007), (Tag3 ((("bool", 21563)), 0, (0)), 100000000, 0, -2006), 0), 100000000, 0, -2005), 0), 100000000, 0, -2004), 0, (("src/base.ml", 355, 11275, 11281), ("src/base.ml", 355, 11275, 11292), 0), 0, Tag1 ("Base", 164)), 0); (("globalize_int64", 21613), ((Tag1 (0, (Tag3 ((("int64", 21610)), 0, (0)), 100000000, 0, -2003), (Tag3 ((("int64", 21610)), 0, (0)), 100000000, 0, -2002), 0), 100000000, 0, -2001), 0, (("src/base.ml", 357, 11335, 11342), ("src/base.ml", 357, 11335, 11357), 0), 0, Tag1 ("Base", 165)), 0); (("hash_fold_int64", 21614), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -2000), (Tag1 (0, (Tag3 ((("int64", 21610)), 0, (0)), 100000000, 0, -1999), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -1998), 0), 100000000, 0, -1997), 0), 100000000, 0, -1996), 0, (("src/base.ml", 361, 11455, 11462), ("src/base.ml", 361, 11455, 11477), 0), 0, Tag1 ("Base", 166)), 0); (("hash_int64", 21615), ((Tag1 (0, (Tag3 ((("int64", 21610)), 0, (0)), 100000000, 0, -1995), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "hash_value"), 0, (0)), 100000000, 0, -1994), 0), 100000000, 0, -1993), 0, (("src/base.ml", 366, 11587, 11594), ("src/base.ml", 366, 11587, 11604), 0), 0, Tag1 ("Base", 167)), 0); (("int64_of_sexp", 21616), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1992), (Tag3 ((("int64", 21610)), 0, (0)), 100000000, 0, -1991), 0), 100000000, 0, -1990), 0, (("src/base.ml", 371, 11707, 11713), ("src/base.ml", 371, 11707, 11726), 0), 0, Tag1 ("Base", 170)), 0); (("sexp_of_int64", 21617), ((Tag1 (0, (Tag3 ((("int64", 21610)), 0, (0)), 100000000, 0, -1989), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1988), 0), 100000000, 0, -1987), 0, (("src/base.ml", 372, 11774, 11780), ("src/base.ml", 372, 11774, 11793), 0), 0, Tag1 ("Base", 171)), 0); (("int64_sexp_grammar", 21618), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("int64", 21610)), 0, (0)), 100000000, 0, -1986)], (0)), 100000000, 0, -1985), 0, (("src/base.ml", 373, 11841, 11848), ("src/base.ml", 373, 11841, 11866), 0), 0, Tag1 ("Base", 172)), 0); Tag1 (("list", 21619), ([((("a")), 100000000, 0, -1984)], 1, 0, 1, ((Tag3 (Tag1 ((("List", 21281)), "t"), [((("a")), 100000000, 0, -1984)], (0)), 100000000, 0, -1983)), [25], [0], 0, 0, (("src/base.ml", 377, 11936, 11938), ("src/base.ml", 378, 11963, 12036), 0), [(("deriving_inline", (("src/base.ml", 378, 11963, 11968), ("src/base.ml", 378, 11963, 11983), 0)), ([([(Tag8 ([(((("compare"), (("src/base.ml", 378, 11963, 11984), ("src/base.ml", 378, 11963, 11991), 0))), (("src/base.ml", 378, 11963, 11984), ("src/base.ml", 378, 11963, 11991), 0), 0, 0); (((("equal"), (("src/base.ml", 378, 11963, 11993), ("src/base.ml", 378, 11963, 11998), 0))), (("src/base.ml", 378, 11963, 11993), ("src/base.ml", 378, 11963, 11998), 0), 0, 0); (((("globalize"), (("src/base.ml", 378, 11963, 12000), ("src/base.ml", 378, 11963, 12009), 0))), (("src/base.ml", 378, 11963, 12000), ("src/base.ml", 378, 11963, 12009), 0), 0, 0); (((("hash"), (("src/base.ml", 378, 11963, 12011), ("src/base.ml", 378, 11963, 12015), 0))), (("src/base.ml", 378, 11963, 12011), ("src/base.ml", 378, 11963, 12015), 0), 0, 0); (((("sexp"), (("src/base.ml", 378, 11963, 12017), ("src/base.ml", 378, 11963, 12021), 0))), (("src/base.ml", 378, 11963, 12017), ("src/base.ml", 378, 11963, 12021), 0), 0, 0); (((("sexp_grammar"), (("src/base.ml", 378, 11963, 12023), ("src/base.ml", 378, 11963, 12035), 0))), (("src/base.ml", 378, 11963, 12023), ("src/base.ml", 378, 11963, 12035), 0), 0, 0)]), (("src/base.ml", 378, 11963, 11984), ("src/base.ml", 378, 11963, 12035), 0), 0, 0)], (("src/base.ml", 378, 11963, 11984), ("src/base.ml", 378, 11963, 12035), 0))]), (("src/base.ml", 378, 11963, 11965), ("src/base.ml", 378, 11963, 12036), 0))], 0, 0, Tag1 ("Base", 173)), 1, 0); (("compare_list", 21620), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -1978), (Tag1 (0, ((("a")), 100000000, 0, -1978), (Tag3 ((("int", 21592)), 0, (0)), 100000000, 0, -1982), 0), 100000000, 0, -1981), 0), 100000000, 0, -1980), (Tag1 (0, (Tag3 ((("list", 21619)), [((("a")), 100000000, 0, -1978)], (0)), 100000000, 0, -1979), (Tag1 (0, (Tag3 ((("list", 21619)), [((("a")), 100000000, 0, -1978)], (0)), 100000000, 0, -1977), (Tag3 ((("int", 21592)), 0, (0)), 100000000, 0, -1976), 0), 100000000, 0, -1975), 0), 100000000, 0, -1974), 0), 100000000, 0, -1973), 0, (("src/base.ml", 380, 12038, 12044), ("src/base.ml", 380, 12038, 12056), 0), 0, Tag1 ("Base", 174)), 0); (("equal_list", 21621), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -1968), (Tag1 (0, ((("a")), 100000000, 0, -1968), (Tag3 ((("bool", 21563)), 0, (0)), 100000000, 0, -1972), 0), 100000000, 0, -1971), 0), 100000000, 0, -1970), (Tag1 (0, (Tag3 ((("list", 21619)), [((("a")), 100000000, 0, -1968)], (0)), 100000000, 0, -1969), (Tag1 (0, (Tag3 ((("list", 21619)), [((("a")), 100000000, 0, -1968)], (0)), 100000000, 0, -1967), (Tag3 ((("bool", 21563)), 0, (0)), 100000000, 0, -1966), 0), 100000000, 0, -1965), 0), 100000000, 0, -1964), 0), 100000000, 0, -1963), 0, (("src/base.ml", 381, 12125, 12131), ("src/base.ml", 381, 12125, 12141), 0), 0, Tag1 ("Base", 175)), 0); (("globalize_list", 21622), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -1960), ((("a")), 100000000, 0, -1960), 0), 100000000, 0, -1962), (Tag1 (0, (Tag3 ((("list", 21619)), [((("a")), 100000000, 0, -1960)], (0)), 100000000, 0, -1961), (Tag3 ((("list", 21619)), [((("a")), 100000000, 0, -1960)], (0)), 100000000, 0, -1959), 0), 100000000, 0, -1958), 0), 100000000, 0, -1957), 0, (("src/base.ml", 383, 12211, 12217), ("src/base.ml", 383, 12211, 12231), 0), 0, Tag1 ("Base", 176)), 0); (("hash_fold_list", 21623), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -1956), (Tag1 (0, ((("a")), 100000000, 0, -1951), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -1955), 0), 100000000, 0, -1954), 0), 100000000, 0, -1953), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -1952), (Tag1 (0, (Tag3 ((("list", 21619)), [((("a")), 100000000, 0, -1951)], (0)), 100000000, 0, -1950), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -1949), 0), 100000000, 0, -1948), 0), 100000000, 0, -1947), 0), 100000000, 0, -1946), 0, (("src/base.ml", 392, 12476, 12482), ("src/base.ml", 392, 12476, 12496), 0), 0, Tag1 ("Base", 178)), 0); (("list_of_sexp", 21624), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1945), ((("a")), 100000000, 0, -1942), 0), 100000000, 0, -1944), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1943), (Tag3 ((("list", 21619)), [((("a")), 100000000, 0, -1942)], (0)), 100000000, 0, -1941), 0), 100000000, 0, -1940), 0), 100000000, 0, -1939), 0, (("src/base.ml", 402, 12696, 12702), ("src/base.ml", 402, 12696, 12714), 0), 0, Tag1 ("Base", 179)), 0); (("sexp_of_list", 21625), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -1936), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1938), 0), 100000000, 0, -1937), (Tag1 (0, (Tag3 ((("list", 21619)), [((("a")), 100000000, 0, -1936)], (0)), 100000000, 0, -1935), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1934), 0), 100000000, 0, -1933), 0), 100000000, 0, -1932), 0, (("src/base.ml", 406, 12802, 12808), ("src/base.ml", 406, 12802, 12820), 0), 0, Tag1 ("Base", 180)), 0); (("list_sexp_grammar", 21626), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [((("a")), 100000000, 0, -1930)], (0)), 100000000, 0, -1931), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("list", 21619)), [((("a")), 100000000, 0, -1930)], (0)), 100000000, 0, -1929)], (0)), 100000000, 0, -1928), 0), 100000000, 0, -1927), 0, (("src/base.ml", 410, 12908, 12914), ("src/base.ml", 410, 12908, 12931), 0), 0, Tag1 ("Base", 181)), 0); Tag1 (("nativeint", 21627), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Nativeint", 21285)), "t"), 0, (0)), 100000000, 0, -1926)), 0, 0, 0, 0, (("src/base.ml", 418, 13093, 13095), ("src/base.ml", 419, 13124, 13197), 0), [(("deriving_inline", (("src/base.ml", 419, 13124, 13129), ("src/base.ml", 419, 13124, 13144), 0)), ([([(Tag8 ([(((("compare"), (("src/base.ml", 419, 13124, 13145), ("src/base.ml", 419, 13124, 13152), 0))), (("src/base.ml", 419, 13124, 13145), ("src/base.ml", 419, 13124, 13152), 0), 0, 0); (((("equal"), (("src/base.ml", 419, 13124, 13154), ("src/base.ml", 419, 13124, 13159), 0))), (("src/base.ml", 419, 13124, 13154), ("src/base.ml", 419, 13124, 13159), 0), 0, 0); (((("globalize"), (("src/base.ml", 419, 13124, 13161), ("src/base.ml", 419, 13124, 13170), 0))), (("src/base.ml", 419, 13124, 13161), ("src/base.ml", 419, 13124, 13170), 0), 0, 0); (((("hash"), (("src/base.ml", 419, 13124, 13172), ("src/base.ml", 419, 13124, 13176), 0))), (("src/base.ml", 419, 13124, 13172), ("src/base.ml", 419, 13124, 13176), 0), 0, 0); (((("sexp"), (("src/base.ml", 419, 13124, 13178), ("src/base.ml", 419, 13124, 13182), 0))), (("src/base.ml", 419, 13124, 13178), ("src/base.ml", 419, 13124, 13182), 0), 0, 0); (((("sexp_grammar"), (("src/base.ml", 419, 13124, 13184), ("src/base.ml", 419, 13124, 13196), 0))), (("src/base.ml", 419, 13124, 13184), ("src/base.ml", 419, 13124, 13196), 0), 0, 0)]), (("src/base.ml", 419, 13124, 13145), ("src/base.ml", 419, 13124, 13196), 0), 0, 0)], (("src/base.ml", 419, 13124, 13145), ("src/base.ml", 419, 13124, 13196), 0))]), (("src/base.ml", 419, 13124, 13126), ("src/base.ml", 419, 13124, 13197), 0))], 0, 0, Tag1 ("Base", 183)), 1, 0); (("compare_nativeint", 21628), ((Tag1 (0, (Tag3 ((("nativeint", 21627)), 0, (0)), 100000000, 0, -1925), (Tag1 (0, (Tag3 ((("nativeint", 21627)), 0, (0)), 100000000, 0, -1924), (Tag3 ((("int", 21592)), 0, (0)), 100000000, 0, -1923), 0), 100000000, 0, -1922), 0), 100000000, 0, -1921), 0, (("src/base.ml", 421, 13199, 13205), ("src/base.ml", 421, 13199, 13222), 0), 0, Tag1 ("Base", 184)), 0); (("equal_nativeint", 21629), ((Tag1 (0, (Tag3 ((("nativeint", 21627)), 0, (0)), 100000000, 0, -1920), (Tag1 (0, (Tag3 ((("nativeint", 21627)), 0, (0)), 100000000, 0, -1919), (Tag3 ((("bool", 21563)), 0, (0)), 100000000, 0, -1918), 0), 100000000, 0, -1917), 0), 100000000, 0, -1916), 0, (("src/base.ml", 422, 13277, 13283), ("src/base.ml", 422, 13277, 13298), 0), 0, Tag1 ("Base", 185)), 0); (("globalize_nativeint", 21630), ((Tag1 (0, (Tag3 ((("nativeint", 21627)), 0, (0)), 100000000, 0, -1915), (Tag3 ((("nativeint", 21627)), 0, (0)), 100000000, 0, -1914), 0), 100000000, 0, -1913), 0, (("src/base.ml", 424, 13353, 13360), ("src/base.ml", 424, 13353, 13379), 0), 0, Tag1 ("Base", 186)), 0); (("hash_fold_nativeint", 21631), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -1912), (Tag1 (0, (Tag3 ((("nativeint", 21627)), 0, (0)), 100000000, 0, -1911), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -1910), 0), 100000000, 0, -1909), 0), 100000000, 0, -1908), 0, (("src/base.ml", 428, 13497, 13504), ("src/base.ml", 428, 13497, 13523), 0), 0, Tag1 ("Base", 187)), 0); (("hash_nativeint", 21632), ((Tag1 (0, (Tag3 ((("nativeint", 21627)), 0, (0)), 100000000, 0, -1907), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "hash_value"), 0, (0)), 100000000, 0, -1906), 0), 100000000, 0, -1905), 0, (("src/base.ml", 433, 13641, 13648), ("src/base.ml", 433, 13641, 13662), 0), 0, Tag1 ("Base", 188)), 0); (("nativeint_of_sexp", 21633), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1904), (Tag3 ((("nativeint", 21627)), 0, (0)), 100000000, 0, -1903), 0), 100000000, 0, -1902), 0, (("src/base.ml", 438, 13773, 13779), ("src/base.ml", 438, 13773, 13796), 0), 0, Tag1 ("Base", 191)), 0); (("sexp_of_nativeint", 21634), ((Tag1 (0, (Tag3 ((("nativeint", 21627)), 0, (0)), 100000000, 0, -1901), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1900), 0), 100000000, 0, -1899), 0, (("src/base.ml", 439, 13852, 13858), ("src/base.ml", 439, 13852, 13875), 0), 0, Tag1 ("Base", 192)), 0); (("nativeint_sexp_grammar", 21635), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("nativeint", 21627)), 0, (0)), 100000000, 0, -1898)], (0)), 100000000, 0, -1897), 0, (("src/base.ml", 441, 13932, 13939), ("src/base.ml", 441, 13932, 13961), 0), 0, Tag1 ("Base", 193)), 0); Tag1 (("option", 21636), ([((("a")), 100000000, 0, -1896)], 1, 0, 1, ((Tag3 (Tag1 ((("Option", 21287)), "t"), [((("a")), 100000000, 0, -1896)], (0)), 100000000, 0, -1895)), [25], [0], 0, 0, (("src/base.ml", 447, 14048, 14050), ("src/base.ml", 448, 14079, 14152), 0), [(("deriving_inline", (("src/base.ml", 448, 14079, 14084), ("src/base.ml", 448, 14079, 14099), 0)), ([([(Tag8 ([(((("compare"), (("src/base.ml", 448, 14079, 14100), ("src/base.ml", 448, 14079, 14107), 0))), (("src/base.ml", 448, 14079, 14100), ("src/base.ml", 448, 14079, 14107), 0), 0, 0); (((("equal"), (("src/base.ml", 448, 14079, 14109), ("src/base.ml", 448, 14079, 14114), 0))), (("src/base.ml", 448, 14079, 14109), ("src/base.ml", 448, 14079, 14114), 0), 0, 0); (((("globalize"), (("src/base.ml", 448, 14079, 14116), ("src/base.ml", 448, 14079, 14125), 0))), (("src/base.ml", 448, 14079, 14116), ("src/base.ml", 448, 14079, 14125), 0), 0, 0); (((("hash"), (("src/base.ml", 448, 14079, 14127), ("src/base.ml", 448, 14079, 14131), 0))), (("src/base.ml", 448, 14079, 14127), ("src/base.ml", 448, 14079, 14131), 0), 0, 0); (((("sexp"), (("src/base.ml", 448, 14079, 14133), ("src/base.ml", 448, 14079, 14137), 0))), (("src/base.ml", 448, 14079, 14133), ("src/base.ml", 448, 14079, 14137), 0), 0, 0); (((("sexp_grammar"), (("src/base.ml", 448, 14079, 14139), ("src/base.ml", 448, 14079, 14151), 0))), (("src/base.ml", 448, 14079, 14139), ("src/base.ml", 448, 14079, 14151), 0), 0, 0)]), (("src/base.ml", 448, 14079, 14100), ("src/base.ml", 448, 14079, 14151), 0), 0, 0)], (("src/base.ml", 448, 14079, 14100), ("src/base.ml", 448, 14079, 14151), 0))]), (("src/base.ml", 448, 14079, 14081), ("src/base.ml", 448, 14079, 14152), 0))], 0, 0, Tag1 ("Base", 194)), 1, 0); (("compare_option", 21637), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -1890), (Tag1 (0, ((("a")), 100000000, 0, -1890), (Tag3 ((("int", 21592)), 0, (0)), 100000000, 0, -1894), 0), 100000000, 0, -1893), 0), 100000000, 0, -1892), (Tag1 (0, (Tag3 ((("option", 21636)), [((("a")), 100000000, 0, -1890)], (0)), 100000000, 0, -1891), (Tag1 (0, (Tag3 ((("option", 21636)), [((("a")), 100000000, 0, -1890)], (0)), 100000000, 0, -1889), (Tag3 ((("int", 21592)), 0, (0)), 100000000, 0, -1888), 0), 100000000, 0, -1887), 0), 100000000, 0, -1886), 0), 100000000, 0, -1885), 0, (("src/base.ml", 450, 14154, 14160), ("src/base.ml", 450, 14154, 14174), 0), 0, Tag1 ("Base", 195)), 0); (("equal_option", 21638), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -1880), (Tag1 (0, ((("a")), 100000000, 0, -1880), (Tag3 ((("bool", 21563)), 0, (0)), 100000000, 0, -1884), 0), 100000000, 0, -1883), 0), 100000000, 0, -1882), (Tag1 (0, (Tag3 ((("option", 21636)), [((("a")), 100000000, 0, -1880)], (0)), 100000000, 0, -1881), (Tag1 (0, (Tag3 ((("option", 21636)), [((("a")), 100000000, 0, -1880)], (0)), 100000000, 0, -1879), (Tag3 ((("bool", 21563)), 0, (0)), 100000000, 0, -1878), 0), 100000000, 0, -1877), 0), 100000000, 0, -1876), 0), 100000000, 0, -1875), 0, (("src/base.ml", 454, 14259, 14265), ("src/base.ml", 454, 14259, 14277), 0), 0, Tag1 ("Base", 196)), 0); (("globalize_option", 21639), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -1872), ((("a")), 100000000, 0, -1872), 0), 100000000, 0, -1874), (Tag1 (0, (Tag3 ((("option", 21636)), [((("a")), 100000000, 0, -1872)], (0)), 100000000, 0, -1873), (Tag3 ((("option", 21636)), [((("a")), 100000000, 0, -1872)], (0)), 100000000, 0, -1871), 0), 100000000, 0, -1870), 0), 100000000, 0, -1869), 0, (("src/base.ml", 458, 14362, 14368), ("src/base.ml", 458, 14362, 14384), 0), 0, Tag1 ("Base", 197)), 0); (("hash_fold_option", 21640), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -1868), (Tag1 (0, ((("a")), 100000000, 0, -1863), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -1867), 0), 100000000, 0, -1866), 0), 100000000, 0, -1865), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -1864), (Tag1 (0, (Tag3 ((("option", 21636)), [((("a")), 100000000, 0, -1863)], (0)), 100000000, 0, -1862), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -1861), 0), 100000000, 0, -1860), 0), 100000000, 0, -1859), 0), 100000000, 0, -1858), 0, (("src/base.ml", 467, 14639, 14645), ("src/base.ml", 467, 14639, 14661), 0), 0, Tag1 ("Base", 199)), 0); (("option_of_sexp", 21641), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1857), ((("a")), 100000000, 0, -1854), 0), 100000000, 0, -1856), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1855), (Tag3 ((("option", 21636)), [((("a")), 100000000, 0, -1854)], (0)), 100000000, 0, -1853), 0), 100000000, 0, -1852), 0), 100000000, 0, -1851), 0, (("src/base.ml", 477, 14865, 14871), ("src/base.ml", 477, 14865, 14885), 0), 0, Tag1 ("Base", 200)), 0); (("sexp_of_option", 21642), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -1848), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1850), 0), 100000000, 0, -1849), (Tag1 (0, (Tag3 ((("option", 21636)), [((("a")), 100000000, 0, -1848)], (0)), 100000000, 0, -1847), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1846), 0), 100000000, 0, -1845), 0), 100000000, 0, -1844), 0, (("src/base.ml", 481, 14977, 14983), ("src/base.ml", 481, 14977, 14997), 0), 0, Tag1 ("Base", 201)), 0); (("option_sexp_grammar", 21643), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [((("a")), 100000000, 0, -1842)], (0)), 100000000, 0, -1843), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("option", 21636)), [((("a")), 100000000, 0, -1842)], (0)), 100000000, 0, -1841)], (0)), 100000000, 0, -1840), 0), 100000000, 0, -1839), 0, (("src/base.ml", 485, 15089, 15095), ("src/base.ml", 485, 15089, 15114), 0), 0, Tag1 ("Base", 202)), 0); Tag1 (("ref", 21644), ([((("a")), 100000000, 0, -1838)], 1, 0, 1, ((Tag3 (Tag1 ((("Ref", 21299)), "t"), [((("a")), 100000000, 0, -1838)], (0)), 100000000, 0, -1837)), [63], [0], 0, 0, (("src/base.ml", 493, 15280, 15282), ("src/base.ml", 493, 15280, 15370), 0), [(("deriving_inline", (("src/base.ml", 493, 15280, 15308), ("src/base.ml", 493, 15280, 15323), 0)), ([([(Tag8 ([(((("compare"), (("src/base.ml", 493, 15280, 15324), ("src/base.ml", 493, 15280, 15331), 0))), (("src/base.ml", 493, 15280, 15324), ("src/base.ml", 493, 15280, 15331), 0), 0, 0); (((("equal"), (("src/base.ml", 493, 15280, 15333), ("src/base.ml", 493, 15280, 15338), 0))), (("src/base.ml", 493, 15280, 15333), ("src/base.ml", 493, 15280, 15338), 0), 0, 0); (((("globalize"), (("src/base.ml", 493, 15280, 15340), ("src/base.ml", 493, 15280, 15349), 0))), (("src/base.ml", 493, 15280, 15340), ("src/base.ml", 493, 15280, 15349), 0), 0, 0); (((("sexp"), (("src/base.ml", 493, 15280, 15351), ("src/base.ml", 493, 15280, 15355), 0))), (("src/base.ml", 493, 15280, 15351), ("src/base.ml", 493, 15280, 15355), 0), 0, 0); (((("sexp_grammar"), (("src/base.ml", 493, 15280, 15357), ("src/base.ml", 493, 15280, 15369), 0))), (("src/base.ml", 493, 15280, 15357), ("src/base.ml", 493, 15280, 15369), 0), 0, 0)]), (("src/base.ml", 493, 15280, 15324), ("src/base.ml", 493, 15280, 15369), 0), 0, 0)], (("src/base.ml", 493, 15280, 15324), ("src/base.ml", 493, 15280, 15369), 0))]), (("src/base.ml", 493, 15280, 15305), ("src/base.ml", 493, 15280, 15370), 0))], 0, 0, Tag1 ("Base", 204)), 1, 0); (("compare_ref", 21645), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -1832), (Tag1 (0, ((("a")), 100000000, 0, -1832), (Tag3 ((("int", 21592)), 0, (0)), 100000000, 0, -1836), 0), 100000000, 0, -1835), 0), 100000000, 0, -1834), (Tag1 (0, (Tag3 ((("ref", 21644)), [((("a")), 100000000, 0, -1832)], (0)), 100000000, 0, -1833), (Tag1 (0, (Tag3 ((("ref", 21644)), [((("a")), 100000000, 0, -1832)], (0)), 100000000, 0, -1831), (Tag3 ((("int", 21592)), 0, (0)), 100000000, 0, -1830), 0), 100000000, 0, -1829), 0), 100000000, 0, -1828), 0), 100000000, 0, -1827), 0, (("src/base.ml", 495, 15372, 15378), ("src/base.ml", 495, 15372, 15389), 0), 0, Tag1 ("Base", 205)), 0); (("equal_ref", 21646), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -1822), (Tag1 (0, ((("a")), 100000000, 0, -1822), (Tag3 ((("bool", 21563)), 0, (0)), 100000000, 0, -1826), 0), 100000000, 0, -1825), 0), 100000000, 0, -1824), (Tag1 (0, (Tag3 ((("ref", 21644)), [((("a")), 100000000, 0, -1822)], (0)), 100000000, 0, -1823), (Tag1 (0, (Tag3 ((("ref", 21644)), [((("a")), 100000000, 0, -1822)], (0)), 100000000, 0, -1821), (Tag3 ((("bool", 21563)), 0, (0)), 100000000, 0, -1820), 0), 100000000, 0, -1819), 0), 100000000, 0, -1818), 0), 100000000, 0, -1817), 0, (("src/base.ml", 496, 15455, 15461), ("src/base.ml", 496, 15455, 15470), 0), 0, Tag1 ("Base", 206)), 0); (("globalize_ref", 21647), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -1814), ((("a")), 100000000, 0, -1814), 0), 100000000, 0, -1816), (Tag1 (0, (Tag3 ((("ref", 21644)), [((("a")), 100000000, 0, -1814)], (0)), 100000000, 0, -1815), (Tag3 ((("ref", 21644)), [((("a")), 100000000, 0, -1814)], (0)), 100000000, 0, -1813), 0), 100000000, 0, -1812), 0), 100000000, 0, -1811), 0, (("src/base.ml", 498, 15537, 15543), ("src/base.ml", 498, 15537, 15556), 0), 0, Tag1 ("Base", 207)), 0); (("ref_of_sexp", 21648), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1810), ((("a")), 100000000, 0, -1807), 0), 100000000, 0, -1809), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1808), (Tag3 ((("ref", 21644)), [((("a")), 100000000, 0, -1807)], (0)), 100000000, 0, -1806), 0), 100000000, 0, -1805), 0), 100000000, 0, -1804), 0, (("src/base.ml", 505, 15788, 15794), ("src/base.ml", 505, 15788, 15805), 0), 0, Tag1 ("Base", 209)), 0); (("sexp_of_ref", 21649), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -1801), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1803), 0), 100000000, 0, -1802), (Tag1 (0, (Tag3 ((("ref", 21644)), [((("a")), 100000000, 0, -1801)], (0)), 100000000, 0, -1800), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1799), 0), 100000000, 0, -1798), 0), 100000000, 0, -1797), 0, (("src/base.ml", 509, 15891, 15897), ("src/base.ml", 509, 15891, 15908), 0), 0, Tag1 ("Base", 210)), 0); (("ref_sexp_grammar", 21650), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [((("a")), 100000000, 0, -1795)], (0)), 100000000, 0, -1796), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("ref", 21644)), [((("a")), 100000000, 0, -1795)], (0)), 100000000, 0, -1794)], (0)), 100000000, 0, -1793), 0), 100000000, 0, -1792), 0, (("src/base.ml", 513, 15994, 16000), ("src/base.ml", 513, 15994, 16016), 0), 0, Tag1 ("Base", 211)), 0); Tag1 (("string", 21651), (0, 0, 0, 1, ((Tag3 (Tag1 ((("String", 21309)), "t"), 0, (0)), 100000000, 0, -1791)), 0, 0, 0, 0, (("src/base.ml", 519, 16168, 16170), ("src/base.ml", 520, 16193, 16266), 0), [(("deriving_inline", (("src/base.ml", 520, 16193, 16198), ("src/base.ml", 520, 16193, 16213), 0)), ([([(Tag8 ([(((("compare"), (("src/base.ml", 520, 16193, 16214), ("src/base.ml", 520, 16193, 16221), 0))), (("src/base.ml", 520, 16193, 16214), ("src/base.ml", 520, 16193, 16221), 0), 0, 0); (((("equal"), (("src/base.ml", 520, 16193, 16223), ("src/base.ml", 520, 16193, 16228), 0))), (("src/base.ml", 520, 16193, 16223), ("src/base.ml", 520, 16193, 16228), 0), 0, 0); (((("globalize"), (("src/base.ml", 520, 16193, 16230), ("src/base.ml", 520, 16193, 16239), 0))), (("src/base.ml", 520, 16193, 16230), ("src/base.ml", 520, 16193, 16239), 0), 0, 0); (((("hash"), (("src/base.ml", 520, 16193, 16241), ("src/base.ml", 520, 16193, 16245), 0))), (("src/base.ml", 520, 16193, 16241), ("src/base.ml", 520, 16193, 16245), 0), 0, 0); (((("sexp"), (("src/base.ml", 520, 16193, 16247), ("src/base.ml", 520, 16193, 16251), 0))), (("src/base.ml", 520, 16193, 16247), ("src/base.ml", 520, 16193, 16251), 0), 0, 0); (((("sexp_grammar"), (("src/base.ml", 520, 16193, 16253), ("src/base.ml", 520, 16193, 16265), 0))), (("src/base.ml", 520, 16193, 16253), ("src/base.ml", 520, 16193, 16265), 0), 0, 0)]), (("src/base.ml", 520, 16193, 16214), ("src/base.ml", 520, 16193, 16265), 0), 0, 0)], (("src/base.ml", 520, 16193, 16214), ("src/base.ml", 520, 16193, 16265), 0))]), (("src/base.ml", 520, 16193, 16195), ("src/base.ml", 520, 16193, 16266), 0))], 0, 0, Tag1 ("Base", 213)), 1, 0); (("compare_string", 21652), ((Tag1 (0, (Tag3 ((("string", 21651)), 0, (0)), 100000000, 0, -1790), (Tag1 (0, (Tag3 ((("string", 21651)), 0, (0)), 100000000, 0, -1789), (Tag3 ((("int", 21592)), 0, (0)), 100000000, 0, -1788), 0), 100000000, 0, -1787), 0), 100000000, 0, -1786), 0, (("src/base.ml", 522, 16268, 16274), ("src/base.ml", 522, 16268, 16288), 0), 0, Tag1 ("Base", 214)), 0); (("equal_string", 21653), ((Tag1 (0, (Tag3 ((("string", 21651)), 0, (0)), 100000000, 0, -1785), (Tag1 (0, (Tag3 ((("string", 21651)), 0, (0)), 100000000, 0, -1784), (Tag3 ((("bool", 21563)), 0, (0)), 100000000, 0, -1783), 0), 100000000, 0, -1782), 0), 100000000, 0, -1781), 0, (("src/base.ml", 523, 16334, 16340), ("src/base.ml", 523, 16334, 16352), 0), 0, Tag1 ("Base", 215)), 0); (("globalize_string", 21654), ((Tag1 (0, (Tag3 ((("string", 21651)), 0, (0)), 100000000, 0, -1780), (Tag3 ((("string", 21651)), 0, (0)), 100000000, 0, -1779), 0), 100000000, 0, -1778), 0, (("src/base.ml", 525, 16398, 16405), ("src/base.ml", 525, 16398, 16421), 0), 0, Tag1 ("Base", 216)), 0); (("hash_fold_string", 21655), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -1777), (Tag1 (0, (Tag3 ((("string", 21651)), 0, (0)), 100000000, 0, -1776), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -1775), 0), 100000000, 0, -1774), 0), 100000000, 0, -1773), 0, (("src/base.ml", 529, 16524, 16531), ("src/base.ml", 529, 16524, 16547), 0), 0, Tag1 ("Base", 217)), 0); (("hash_string", 21656), ((Tag1 (0, (Tag3 ((("string", 21651)), 0, (0)), 100000000, 0, -1772), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "hash_value"), 0, (0)), 100000000, 0, -1771), 0), 100000000, 0, -1770), 0, (("src/base.ml", 534, 16659, 16666), ("src/base.ml", 534, 16659, 16677), 0), 0, Tag1 ("Base", 218)), 0); (("string_of_sexp", 21657), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1769), (Tag3 ((("string", 21651)), 0, (0)), 100000000, 0, -1768), 0), 100000000, 0, -1767), 0, (("src/base.ml", 539, 16782, 16788), ("src/base.ml", 539, 16782, 16802), 0), 0, Tag1 ("Base", 221)), 0); (("sexp_of_string", 21658), ((Tag1 (0, (Tag3 ((("string", 21651)), 0, (0)), 100000000, 0, -1766), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1765), 0), 100000000, 0, -1764), 0, (("src/base.ml", 540, 16852, 16858), ("src/base.ml", 540, 16852, 16872), 0), 0, Tag1 ("Base", 222)), 0); (("string_sexp_grammar", 21659), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("string", 21651)), 0, (0)), 100000000, 0, -1763)], (0)), 100000000, 0, -1762), 0, (("src/base.ml", 541, 16922, 16929), ("src/base.ml", 541, 16922, 16948), 0), 0, Tag1 ("Base", 223)), 0); Tag1 (("bytes", 21660), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Bytes", 21249)), "t"), 0, (0)), 100000000, 0, -1761)), 0, 0, 0, 0, (("src/base.ml", 545, 17020, 17022), ("src/base.ml", 545, 17020, 17108), 0), [(("deriving_inline", (("src/base.ml", 545, 17020, 17046), ("src/base.ml", 545, 17020, 17061), 0)), ([([(Tag8 ([(((("compare"), (("src/base.ml", 545, 17020, 17062), ("src/base.ml", 545, 17020, 17069), 0))), (("src/base.ml", 545, 17020, 17062), ("src/base.ml", 545, 17020, 17069), 0), 0, 0); (((("equal"), (("src/base.ml", 545, 17020, 17071), ("src/base.ml", 545, 17020, 17076), 0))), (("src/base.ml", 545, 17020, 17071), ("src/base.ml", 545, 17020, 17076), 0), 0, 0); (((("globalize"), (("src/base.ml", 545, 17020, 17078), ("src/base.ml", 545, 17020, 17087), 0))), (("src/base.ml", 545, 17020, 17078), ("src/base.ml", 545, 17020, 17087), 0), 0, 0); (((("sexp"), (("src/base.ml", 545, 17020, 17089), ("src/base.ml", 545, 17020, 17093), 0))), (("src/base.ml", 545, 17020, 17089), ("src/base.ml", 545, 17020, 17093), 0), 0, 0); (((("sexp_grammar"), (("src/base.ml", 545, 17020, 17095), ("src/base.ml", 545, 17020, 17107), 0))), (("src/base.ml", 545, 17020, 17095), ("src/base.ml", 545, 17020, 17107), 0), 0, 0)]), (("src/base.ml", 545, 17020, 17062), ("src/base.ml", 545, 17020, 17107), 0), 0, 0)], (("src/base.ml", 545, 17020, 17062), ("src/base.ml", 545, 17020, 17107), 0))]), (("src/base.ml", 545, 17020, 17043), ("src/base.ml", 545, 17020, 17108), 0))], 0, 0, Tag1 ("Base", 224)), 1, 0); (("compare_bytes", 21661), ((Tag1 (0, (Tag3 ((("bytes", 21660)), 0, (0)), 100000000, 0, -1760), (Tag1 (0, (Tag3 ((("bytes", 21660)), 0, (0)), 100000000, 0, -1759), (Tag3 ((("int", 21592)), 0, (0)), 100000000, 0, -1758), 0), 100000000, 0, -1757), 0), 100000000, 0, -1756), 0, (("src/base.ml", 547, 17110, 17116), ("src/base.ml", 547, 17110, 17129), 0), 0, Tag1 ("Base", 225)), 0); (("equal_bytes", 21662), ((Tag1 (0, (Tag3 ((("bytes", 21660)), 0, (0)), 100000000, 0, -1755), (Tag1 (0, (Tag3 ((("bytes", 21660)), 0, (0)), 100000000, 0, -1754), (Tag3 ((("bool", 21563)), 0, (0)), 100000000, 0, -1753), 0), 100000000, 0, -1752), 0), 100000000, 0, -1751), 0, (("src/base.ml", 548, 17172, 17178), ("src/base.ml", 548, 17172, 17189), 0), 0, Tag1 ("Base", 226)), 0); (("globalize_bytes", 21663), ((Tag1 (0, (Tag3 ((("bytes", 21660)), 0, (0)), 100000000, 0, -1750), (Tag3 ((("bytes", 21660)), 0, (0)), 100000000, 0, -1749), 0), 100000000, 0, -1748), 0, (("src/base.ml", 550, 17232, 17239), ("src/base.ml", 550, 17232, 17254), 0), 0, Tag1 ("Base", 227)), 0); (("bytes_of_sexp", 21664), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1747), (Tag3 ((("bytes", 21660)), 0, (0)), 100000000, 0, -1746), 0), 100000000, 0, -1745), 0, (("src/base.ml", 554, 17352, 17358), ("src/base.ml", 554, 17352, 17371), 0), 0, Tag1 ("Base", 228)), 0); (("sexp_of_bytes", 21665), ((Tag1 (0, (Tag3 ((("bytes", 21660)), 0, (0)), 100000000, 0, -1744), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1743), 0), 100000000, 0, -1742), 0, (("src/base.ml", 555, 17419, 17425), ("src/base.ml", 555, 17419, 17438), 0), 0, Tag1 ("Base", 229)), 0); (("bytes_sexp_grammar", 21666), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("bytes", 21660)), 0, (0)), 100000000, 0, -1741)], (0)), 100000000, 0, -1740), 0, (("src/base.ml", 556, 17486, 17493), ("src/base.ml", 556, 17486, 17511), 0), 0, Tag1 ("Base", 230)), 0); Tag1 (("unit", 21667), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Unit", 21315)), "t"), 0, (0)), 100000000, 0, -1739)), 0, 0, 0, 0, (("src/base.ml", 560, 17581, 17583), ("src/base.ml", 561, 17602, 17675), 0), [(("deriving_inline", (("src/base.ml", 561, 17602, 17607), ("src/base.ml", 561, 17602, 17622), 0)), ([([(Tag8 ([(((("compare"), (("src/base.ml", 561, 17602, 17623), ("src/base.ml", 561, 17602, 17630), 0))), (("src/base.ml", 561, 17602, 17623), ("src/base.ml", 561, 17602, 17630), 0), 0, 0); (((("equal"), (("src/base.ml", 561, 17602, 17632), ("src/base.ml", 561, 17602, 17637), 0))), (("src/base.ml", 561, 17602, 17632), ("src/base.ml", 561, 17602, 17637), 0), 0, 0); (((("globalize"), (("src/base.ml", 561, 17602, 17639), ("src/base.ml", 561, 17602, 17648), 0))), (("src/base.ml", 561, 17602, 17639), ("src/base.ml", 561, 17602, 17648), 0), 0, 0); (((("hash"), (("src/base.ml", 561, 17602, 17650), ("src/base.ml", 561, 17602, 17654), 0))), (("src/base.ml", 561, 17602, 17650), ("src/base.ml", 561, 17602, 17654), 0), 0, 0); (((("sexp"), (("src/base.ml", 561, 17602, 17656), ("src/base.ml", 561, 17602, 17660), 0))), (("src/base.ml", 561, 17602, 17656), ("src/base.ml", 561, 17602, 17660), 0), 0, 0); (((("sexp_grammar"), (("src/base.ml", 561, 17602, 17662), ("src/base.ml", 561, 17602, 17674), 0))), (("src/base.ml", 561, 17602, 17662), ("src/base.ml", 561, 17602, 17674), 0), 0, 0)]), (("src/base.ml", 561, 17602, 17623), ("src/base.ml", 561, 17602, 17674), 0), 0, 0)], (("src/base.ml", 561, 17602, 17623), ("src/base.ml", 561, 17602, 17674), 0))]), (("src/base.ml", 561, 17602, 17604), ("src/base.ml", 561, 17602, 17675), 0))], 1, 0, Tag1 ("Base", 231)), 1, 0); (("compare_unit", 21668), ((Tag1 (0, (Tag3 ((("unit", 21667)), 0, (0)), 100000000, 0, -1738), (Tag1 (0, (Tag3 ((("unit", 21667)), 0, (0)), 100000000, 0, -1737), (Tag3 ((("int", 21592)), 0, (0)), 100000000, 0, -1736), 0), 100000000, 0, -1735), 0), 100000000, 0, -1734), 0, (("src/base.ml", 563, 17677, 17683), ("src/base.ml", 563, 17677, 17695), 0), 0, Tag1 ("Base", 232)), 0); (("equal_unit", 21669), ((Tag1 (0, (Tag3 ((("unit", 21667)), 0, (0)), 100000000, 0, -1733), (Tag1 (0, (Tag3 ((("unit", 21667)), 0, (0)), 100000000, 0, -1732), (Tag3 ((("bool", 21563)), 0, (0)), 100000000, 0, -1731), 0), 100000000, 0, -1730), 0), 100000000, 0, -1729), 0, (("src/base.ml", 564, 17735, 17741), ("src/base.ml", 564, 17735, 17751), 0), 0, Tag1 ("Base", 233)), 0); (("globalize_unit", 21670), ((Tag1 (0, (Tag3 ((("unit", 21667)), 0, (0)), 100000000, 0, -1728), (Tag3 ((("unit", 21667)), 0, (0)), 100000000, 0, -1727), 0), 100000000, 0, -1726), 0, (("src/base.ml", 566, 17791, 17798), ("src/base.ml", 566, 17791, 17812), 0), 0, Tag1 ("Base", 234)), 0); (("hash_fold_unit", 21671), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -1725), (Tag1 (0, (Tag3 ((("unit", 21667)), 0, (0)), 100000000, 0, -1724), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -1723), 0), 100000000, 0, -1722), 0), 100000000, 0, -1721), 0, (("src/base.ml", 570, 17905, 17912), ("src/base.ml", 570, 17905, 17926), 0), 0, Tag1 ("Base", 235)), 0); (("hash_unit", 21672), ((Tag1 (0, (Tag3 ((("unit", 21667)), 0, (0)), 100000000, 0, -1720), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "hash_value"), 0, (0)), 100000000, 0, -1719), 0), 100000000, 0, -1718), 0, (("src/base.ml", 575, 18034, 18041), ("src/base.ml", 575, 18034, 18050), 0), 0, Tag1 ("Base", 236)), 0); (("unit_of_sexp", 21673), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1717), (Tag3 ((("unit", 21667)), 0, (0)), 100000000, 0, -1716), 0), 100000000, 0, -1715), 0, (("src/base.ml", 580, 18151, 18157), ("src/base.ml", 580, 18151, 18169), 0), 0, Tag1 ("Base", 239)), 0); (("sexp_of_unit", 21674), ((Tag1 (0, (Tag3 ((("unit", 21667)), 0, (0)), 100000000, 0, -1714), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1713), 0), 100000000, 0, -1712), 0, (("src/base.ml", 581, 18215, 18221), ("src/base.ml", 581, 18215, 18233), 0), 0, Tag1 ("Base", 240)), 0); (("unit_sexp_grammar", 21675), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("unit", 21667)), 0, (0)), 100000000, 0, -1711)], (0)), 100000000, 0, -1710), 0, (("src/base.ml", 582, 18279, 18286), ("src/base.ml", 582, 18279, 18303), 0), 0, Tag1 ("Base", 241)), 0); Tag1 (("format", 21676), ([((("a")), 100000000, 0, -1707); ((("b")), 100000000, 0, -1708); ((("c")), 100000000, 0, -1709)], 3, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "format"), [((("a")), 100000000, 0, -1707); ((("b")), 100000000, 0, -1708); ((("c")), 100000000, 0, -1709)], (0)), 100000000, 0, -1706)), [63; 15; 63], [0; 0; 0], 0, 0, (("src/base.ml", 588, 18394, 18396), ("src/base.ml", 588, 18394, 18449), 0), 0, 0, 0, Tag1 ("Base", 242)), 0, 0); Tag1 (("format4", 21677), ([((("a")), 100000000, 0, -1702); ((("b")), 100000000, 0, -1703); ((("c")), 100000000, 0, -1704); ((("d")), 100000000, 0, -1705)], 4, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "format4"), [((("a")), 100000000, 0, -1702); ((("b")), 100000000, 0, -1703); ((("c")), 100000000, 0, -1704); ((("d")), 100000000, 0, -1705)], (0)), 100000000, 0, -1701)), [63; 15; 63; 15], [0; 0; 0; 0], 0, 0, (("src/base.ml", 589, 18450, 18452), ("src/base.ml", 589, 18450, 18515), 0), 0, 0, 0, Tag1 ("Base", 243)), 0, 0); Tag1 (("format6", 21678), ([((("a")), 100000000, 0, -1695); ((("b")), 100000000, 0, -1696); ((("c")), 100000000, 0, -1697); ((("d")), 100000000, 0, -1698); ((("e")), 100000000, 0, -1699); ((("f")), 100000000, 0, -1700)], 6, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "format6"), [((("a")), 100000000, 0, -1695); ((("b")), 100000000, 0, -1696); ((("c")), 100000000, 0, -1697); ((("d")), 100000000, 0, -1698); ((("e")), 100000000, 0, -1699); ((("f")), 100000000, 0, -1700)], (0)), 100000000, 0, -1694)), [63; 15; 15; 63; 15; 15], [0; 0; 0; 0; 0; 0], 0, 0, (("src/base.ml", 590, 18516, 18518), ("src/base.ml", 590, 18516, 18597), 0), 0, 0, 0, Tag1 ("Base", 244)), 0, 0); (("@", 21679), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__List")), "t"), [((("a")), 100000000, 0, -1691)], (0)), 100000000, 0, -1693), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__List")), "t"), [((("a")), 100000000, 0, -1691)], (0)), 100000000, 0, -1692), (Tag3 (Tag1 ((Tag2 ("Base__List")), "t"), [((("a")), 100000000, 0, -1691)], (0)), 100000000, 0, -1690), 0), 100000000, 0, -1689), 0), 100000000, 0, -1688), 0, (("src/list.mli", 506, 20352, 20354), ("src/list.mli", 506, 20352, 20386), 0), 0, Tag1 ("Base__List", 124)), 0); (("+", 21680), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -1687), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -1686), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -1685), 0), 100000000, 0, -1684), 0), 100000000, 0, -1683), (("%addint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 324, 9805, 9809), ("src/int_intf.ml", 324, 9805, 9877), 0), 0, Tag1 ("Base__Int_intf", 115)), 0); (("-", 21681), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -1682), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -1681), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -1680), 0), 100000000, 0, -1679), 0), 100000000, 0, -1678), (("%subint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 325, 9878, 9882), ("src/int_intf.ml", 325, 9878, 9950), 0), 0, Tag1 ("Base__Int_intf", 116)), 0); (("*", 21682), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -1677), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -1676), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -1675), 0), 100000000, 0, -1674), 0), 100000000, 0, -1673), (("%mulint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 326, 9951, 9955), ("src/int_intf.ml", 326, 9951, 10023), 0), 0, Tag1 ("Base__Int_intf", 117)), 0); (("/", 21683), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -1672), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -1671), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -1670), 0), 100000000, 0, -1669), 0), 100000000, 0, -1668), (("%divint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 327, 10024, 10028), ("src/int_intf.ml", 327, 10024, 10096), 0), 0, Tag1 ("Base__Int_intf", 118)), 0); (("~-", 21684), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -1667), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -1666), 0), 100000000, 0, -1665), (("%negint", 1, 1, "", [0], 0)), (("src/int_intf.ml", 328, 10097, 10101), ("src/int_intf.ml", 328, 10097, 10151), 0), 0, Tag1 ("Base__Int_intf", 119)), 0); (("**", 21685), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -1664), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -1663), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -1662), 0), 100000000, 0, -1661), 0), 100000000, 0, -1660), 0, (("src/int_intf.ml", 329, 10152, 10156), ("src/int_intf.ml", 329, 10152, 10180), 0), 0, Tag1 ("Base__Int_intf", 120)), 0); (("land", 21686), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -1659), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -1658), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -1657), 0), 100000000, 0, -1656), 0), 100000000, 0, -1655), (("%andint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 336, 10657, 10661), ("src/int_intf.ml", 336, 10657, 10732), 0), 0, Tag1 ("Base__Int_intf", 127)), 0); (("lor", 21687), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -1654), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -1653), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -1652), 0), 100000000, 0, -1651), 0), 100000000, 0, -1650), (("%orint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 337, 10733, 10737), ("src/int_intf.ml", 337, 10733, 10806), 0), 0, Tag1 ("Base__Int_intf", 128)), 0); (("lxor", 21688), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -1649), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -1648), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -1647), 0), 100000000, 0, -1646), 0), 100000000, 0, -1645), (("%xorint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 338, 10807, 10811), ("src/int_intf.ml", 338, 10807, 10882), 0), 0, Tag1 ("Base__Int_intf", 129)), 0); (("lnot", 21689), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -1644), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -1643), 0), 100000000, 0, -1642), 0, (("src/int_intf.ml", 339, 10883, 10887), ("src/int_intf.ml", 339, 10883, 10904), 0), 0, Tag1 ("Base__Int_intf", 130)), 0); (("abs", 21690), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -1641), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -1640), 0), 100000000, 0, -1639), 0, (("src/int_intf.ml", 340, 10905, 10909), ("src/int_intf.ml", 340, 10905, 10925), 0), 0, Tag1 ("Base__Int_intf", 131)), 0); (("neg", 21691), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -1638), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -1637), 0), 100000000, 0, -1636), (("%negint", 1, 1, "", [0], 0)), (("src/int_intf.ml", 341, 10926, 10930), ("src/int_intf.ml", 341, 10926, 10977), 0), 0, Tag1 ("Base__Int_intf", 132)), 0); (("zero", 21692), ((Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -1635), 0, (("src/int_intf.ml", 342, 10978, 10982), ("src/int_intf.ml", 342, 10978, 10994), 0), 0, Tag1 ("Base__Int_intf", 133)), 0); (("%", 21693), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -1634), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -1633), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -1632), 0), 100000000, 0, -1631), 0), 100000000, 0, -1630), 0, (("src/int_intf.ml", 343, 10995, 10999), ("src/int_intf.ml", 343, 10995, 11022), 0), 0, Tag1 ("Base__Int_intf", 134)), 0); (("/%", 21694), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -1629), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -1628), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -1627), 0), 100000000, 0, -1626), 0), 100000000, 0, -1625), 0, (("src/int_intf.ml", 344, 11023, 11027), ("src/int_intf.ml", 344, 11023, 11051), 0), 0, Tag1 ("Base__Int_intf", 135)), 0); (("//", 21695), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -1624), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -1623), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1622), 0), 100000000, 0, -1621), 0), 100000000, 0, -1620), 0, (("src/int_intf.ml", 345, 11052, 11056), ("src/int_intf.ml", 345, 11052, 11084), 0), 0, Tag1 ("Base__Int_intf", 136)), 0); (("lsl", 21696), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -1619), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1618), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -1617), 0), 100000000, 0, -1616), 0), 100000000, 0, -1615), (("%lslint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 346, 11085, 11089), ("src/int_intf.ml", 346, 11085, 11161), 0), 0, Tag1 ("Base__Int_intf", 137)), 0); (("asr", 21697), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1613), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -1612), 0), 100000000, 0, -1611), 0), 100000000, 0, -1610), (("%asrint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 347, 11162, 11166), ("src/int_intf.ml", 347, 11162, 11238), 0), 0, Tag1 ("Base__Int_intf", 138)), 0); (("lsr", 21698), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -1609), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1608), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -1607), 0), 100000000, 0, -1606), 0), 100000000, 0, -1605), (("%lsrint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 348, 11239, 11243), ("src/int_intf.ml", 348, 11239, 11315), 0), 0, Tag1 ("Base__Int_intf", 139)), 0); (("=", 21699), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1604), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1603), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1602), 0), 100000000, 0, -1601), 0), 100000000, 0, -1600), (("%equal", 2, 1, "", [0; 0], 0)), (("src/import0.ml", 83, 3143, 3145), ("src/import0.ml", 83, 3143, 3219), 0), 0, Tag1 ("Base__Import0", 25)), 0); (("<>", 21700), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1599), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1598), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1597), 0), 100000000, 0, -1596), 0), 100000000, 0, -1595), (("%notequal", 2, 1, "", [0; 0], 0)), (("src/import0.ml", 84, 3220, 3222), ("src/import0.ml", 84, 3220, 3300), 0), 0, Tag1 ("Base__Import0", 26)), 0); (("<", 21701), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1594), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1593), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1592), 0), 100000000, 0, -1591), 0), 100000000, 0, -1590), (("%lessthan", 2, 1, "", [0; 0], 0)), (("src/import0.ml", 85, 3301, 3303), ("src/import0.ml", 85, 3301, 3380), 0), 0, Tag1 ("Base__Import0", 27)), 0); ((">", 21702), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1589), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1588), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1587), 0), 100000000, 0, -1586), 0), 100000000, 0, -1585), (("%greaterthan", 2, 1, "", [0; 0], 0)), (("src/import0.ml", 86, 3381, 3383), ("src/import0.ml", 86, 3381, 3463), 0), 0, Tag1 ("Base__Import0", 28)), 0); (("<=", 21703), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1584), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1583), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1582), 0), 100000000, 0, -1581), 0), 100000000, 0, -1580), (("%lessequal", 2, 1, "", [0; 0], 0)), (("src/import0.ml", 87, 3464, 3466), ("src/import0.ml", 87, 3464, 3545), 0), 0, Tag1 ("Base__Import0", 29)), 0); ((">=", 21704), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1579), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1578), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1577), 0), 100000000, 0, -1576), 0), 100000000, 0, -1575), (("%greaterequal", 2, 1, "", [0; 0], 0)), (("src/import0.ml", 88, 3546, 3548), ("src/import0.ml", 88, 3546, 3630), 0), 0, Tag1 ("Base__Import0", 30)), 0); (("compare", 21705), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1574), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1573), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1572), 0), 100000000, 0, -1571), 0), 100000000, 0, -1570), (("%compare", 2, 1, "", [0; 0], 0)), (("src/import0.ml", 89, 3631, 3633), ("src/import0.ml", 89, 3631, 3710), 0), 0, Tag1 ("Base__Import0", 31)), 0); (("equal", 21706), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1569), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1568), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1567), 0), 100000000, 0, -1566), 0), 100000000, 0, -1565), (("%equal", 2, 1, "", [0; 0], 0)), (("src/import0.ml", 90, 3711, 3713), ("src/import0.ml", 90, 3711, 3787), 0), 0, Tag1 ("Base__Import0", 32)), 0); (("ascending", 21707), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1564), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1563), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1562), 0), 100000000, 0, -1561), 0), 100000000, 0, -1560), 0, (("src/import0.ml", 92, 3789, 3795), ("src/import0.ml", 92, 3789, 3804), 0), 0, Tag1 ("Base__Import0", 33)), 0); (("descending", 21708), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1559), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1558), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1557), 0), 100000000, 0, -1556), 0), 100000000, 0, -1555), 0, (("src/import0.ml", 93, 3831, 3837), ("src/import0.ml", 93, 3831, 3847), 0), 0, Tag1 ("Base__Import0", 36)), 0); (("max", 21709), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1554), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1553), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1553), 0), 100000000, 0, -1552), 0), 100000000, 0, -1551), 0, (("src/import0.ml", 94, 3874, 3880), ("src/import0.ml", 94, 3874, 3883), 0), 0, Tag1 ("Base__Import0", 39)), 0); (("min", 21710), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1550), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1549), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1549), 0), 100000000, 0, -1548), 0), 100000000, 0, -1547), 0, (("src/import0.ml", 95, 3924, 3930), ("src/import0.ml", 95, 3924, 3933), 0), 0, Tag1 ("Base__Import0", 42)), 0); (("+.", 21711), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -1546), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -1545), (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -1544), 0), 100000000, 0, -1543), 0), 100000000, 0, -1542), 0, (("src/float.mli", 338, 10833, 10835), ("src/float.mli", 338, 10833, 10859), 0), 0, Tag1 ("Base__Float", 99)), 0); (("-.", 21712), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -1541), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -1540), (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -1539), 0), 100000000, 0, -1538), 0), 100000000, 0, -1537), 0, (("src/float.mli", 339, 10860, 10862), ("src/float.mli", 339, 10860, 10886), 0), 0, Tag1 ("Base__Float", 100)), 0); (("*.", 21713), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -1536), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -1535), (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -1534), 0), 100000000, 0, -1533), 0), 100000000, 0, -1532), 0, (("src/float.mli", 340, 10887, 10889), ("src/float.mli", 340, 10887, 10913), 0), 0, Tag1 ("Base__Float", 101)), 0); (("/.", 21714), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -1531), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -1530), (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -1529), 0), 100000000, 0, -1528), 0), 100000000, 0, -1527), 0, (("src/float.mli", 341, 10914, 10916), ("src/float.mli", 341, 10914, 10940), 0), 0, Tag1 ("Base__Float", 102)), 0); (("%.", 21715), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -1526), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -1525), (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -1524), 0), 100000000, 0, -1523), 0), 100000000, 0, -1522), 0, (("src/float.mli", 342, 10941, 10943), ("src/float.mli", 342, 10941, 10967), 0), 0, Tag1 ("Base__Float", 103)), 0); (("**.", 21716), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -1521), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -1520), (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -1519), 0), 100000000, 0, -1518), 0), 100000000, 0, -1517), 0, (("src/float.mli", 343, 10968, 10970), ("src/float.mli", 343, 10968, 10995), 0), 0, Tag1 ("Base__Float", 104)), 0); (("~-.", 21717), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -1516), (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -1515), 0), 100000000, 0, -1514), 0, (("src/float.mli", 344, 10996, 10998), ("src/float.mli", 344, 10996, 11018), 0), 0, Tag1 ("Base__Float", 105)), 0); (("|>", 21718), ((Tag1 (0, ((("a")), 100000000, 0, -1513), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -1513), ((("b")), 100000000, 0, -1511), 0), 100000000, 0, -1512), ((("b")), 100000000, 0, -1511), 0), 100000000, 0, -1510), 0), 100000000, 0, -1509), (("%revapply", 2, 1, "", [0; 0], 0)), (("src/base.ml", 608, 18957, 18959), ("src/base.ml", 608, 18957, 19027), 0), 0, Tag1 ("Base", 245)), 0); (("@@", 21719), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -1507), ((("b")), 100000000, 0, -1506), 0), 100000000, 0, -1508), (Tag1 (0, ((("a")), 100000000, 0, -1507), ((("b")), 100000000, 0, -1506), 0), 100000000, 0, -1505), 0), 100000000, 0, -1504), (("%apply", 2, 1, "", [0; 0], 0)), (("src/base.ml", 611, 19104, 19106), ("src/base.ml", 611, 19104, 19171), 0), 0, Tag1 ("Base", 246)), 0); (("&&", 21720), ((Tag1 (0, (Tag3 ((("bool", 21563)), 0, (0)), 100000000, 0, -1503), (Tag1 (0, (Tag3 ((("bool", 21563)), 0, (0)), 100000000, 0, -1502), (Tag3 ((("bool", 21563)), 0, (0)), 100000000, 0, -1501), 0), 100000000, 0, -1500), 0), 100000000, 0, -1499), (("%sequand", 2, 1, "", [0; 0], 0)), (("src/base.ml", 616, 19276, 19278), ("src/base.ml", 616, 19276, 19357), 0), 0, Tag1 ("Base", 247)), 0); (("||", 21721), ((Tag1 (0, (Tag3 ((("bool", 21563)), 0, (0)), 100000000, 0, -1498), (Tag1 (0, (Tag3 ((("bool", 21563)), 0, (0)), 100000000, 0, -1497), (Tag3 ((("bool", 21563)), 0, (0)), 100000000, 0, -1496), 0), 100000000, 0, -1495), 0), 100000000, 0, -1494), (("%sequor", 2, 1, "", [0; 0], 0)), (("src/base.ml", 617, 19358, 19360), ("src/base.ml", 617, 19358, 19438), 0), 0, Tag1 ("Base", 248)), 0); (("not", 21722), ((Tag1 (0, (Tag3 ((("bool", 21563)), 0, (0)), 100000000, 0, -1493), (Tag3 ((("bool", 21563)), 0, (0)), 100000000, 0, -1492), 0), 100000000, 0, -1491), (("%boolnot", 1, 1, "", [0], 0)), (("src/base.ml", 618, 19439, 19441), ("src/base.ml", 618, 19439, 19495), 0), 0, Tag1 ("Base", 249)), 0); (("ignore", 21723), ((Tag1 (0, ((0), 100000000, 0, -1490), (Tag3 ((("unit", 21667)), 0, (0)), 100000000, 0, -1489), 0), 100000000, 0, -1488), (("%ignore", 1, 1, "", [0], 0)), (("src/base.ml", 621, 19577, 19579), ("src/base.ml", 621, 19577, 19632), 0), 0, Tag1 ("Base", 250)), 0); (("^", 21724), ((Tag1 (0, (Tag3 (Tag1 ((("String", 21309)), "t"), 0, (0)), 100000000, 0, -1487), (Tag1 (0, (Tag3 (Tag1 ((("String", 21309)), "t"), 0, (0)), 100000000, 0, -1486), (Tag3 (Tag1 ((("String", 21309)), "t"), 0, (0)), 100000000, 0, -1485), 0), 100000000, 0, -1484), 0), 100000000, 0, -1483), 0, (("src/base.ml", 624, 19668, 19674), ("src/base.ml", 624, 19668, 19679), 0), 0, Tag1 ("Base", 251)), 0); (("!", 21725), ((Tag1 (0, (Tag3 ((("ref", 21644)), [((("a")), 100000000, 0, -1481)], (0)), 100000000, 0, -1482), ((("a")), 100000000, 0, -1481), 0), 100000000, 0, -1480), (("%field0", 1, 1, "", [0], 0)), (("src/base.ml", 630, 19861, 19863), ("src/base.ml", 630, 19861, 19918), 0), 0, Tag1 ("Base", 252)), 0); (("ref", 21726), ((Tag1 (0, ((("a")), 100000000, 0, -1479), (Tag3 ((("ref", 21644)), [((("a")), 100000000, 0, -1479)], (0)), 100000000, 0, -1478), 0), 100000000, 0, -1477), (("%makemutable", 1, 1, "", [0], 0)), (("src/base.ml", 631, 19919, 19921), ("src/base.ml", 631, 19919, 19979), 0), 0, Tag1 ("Base", 253)), 0); ((":=", 21727), ((Tag1 (0, (Tag3 ((("ref", 21644)), [((("a")), 100000000, 0, -1475)], (0)), 100000000, 0, -1476), (Tag1 (0, ((("a")), 100000000, 0, -1475), (Tag3 ((("unit", 21667)), 0, (0)), 100000000, 0, -1474), 0), 100000000, 0, -1473), 0), 100000000, 0, -1472), (("%setfield0", 2, 1, "", [0; 0], 0)), (("src/base.ml", 632, 19980, 19982), ("src/base.ml", 632, 19980, 20049), 0), 0, Tag1 ("Base", 254)), 0); (("fst", 21728), ((Tag1 (0, (Tag2 ([((0), 100000000, 0, -1469); ((0), 100000000, 0, -1471)]), 100000000, 0, -1470), ((0), 100000000, 0, -1469), 0), 100000000, 0, -1468), 0, (("src/base.ml", 636, 20077, 20083), ("src/base.ml", 636, 20077, 20086), 0), 0, Tag1 ("Base", 255)), 0); (("snd", 21729), ((Tag1 (0, (Tag2 ([((0), 100000000, 0, -1467); ((0), 100000000, 0, -1465)]), 100000000, 0, -1466), ((0), 100000000, 0, -1465), 0), 100000000, 0, -1464), 0, (("src/base.ml", 637, 20093, 20099), ("src/base.ml", 637, 20093, 20102), 0), 0, Tag1 ("Base", 256)), 0); (("raise", 21730), ((Tag1 (0, (Tag3 ((("exn", 21581)), 0, (0)), 100000000, 0, -1463), ((0), 100000000, 0, -1462), 0), 100000000, 0, -1461), (("%raise", 1, 1, "", [0], 0)), (("src/base.ml", 642, 20226, 20228), ("src/base.ml", 642, 20226, 20264), 0), 0, Tag1 ("Base", 257)), 0); (("failwith", 21731), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1460), ((0), 100000000, 0, -1459), 0), 100000000, 0, -1458), 0, (("src/base.ml", 644, 20266, 20272), ("src/base.ml", 644, 20266, 20280), 0), 0, Tag1 ("Base", 258)), 0); (("invalid_arg", 21732), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1457), ((0), 100000000, 0, -1456), 0), 100000000, 0, -1455), 0, (("src/base.ml", 645, 20292, 20298), ("src/base.ml", 645, 20292, 20309), 0), 0, Tag1 ("Base", 259)), 0); (("raise_s", 21733), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1454), ((0), 100000000, 0, -1453), 0), 100000000, 0, -1452), 0, (("src/base.ml", 646, 20324, 20330), ("src/base.ml", 646, 20324, 20337), 0), 0, Tag1 ("Base", 260)), 0); (("phys_equal", 21734), ((Tag1 (0, ((("a")), 100000000, 0, -1451), (Tag1 (0, ((("a")), 100000000, 0, -1451), (Tag3 ((("bool", 21563)), 0, (0)), 100000000, 0, -1450), 0), 100000000, 0, -1449), 0), 100000000, 0, -1448), (("%eq", 2, 1, "", [0; 0], 0)), (("src/base.ml", 650, 20370, 20372), ("src/base.ml", 650, 20370, 20446), 0), 0, Tag1 ("Base", 261)), 0); (("force", 21735), ((Tag1 (0, (Tag3 (Tag1 ((("Lazy", 21280)), "t"), [((("a")), 100000000, 0, -1446)], (0)), 100000000, 0, -1447), ((("a")), 100000000, 0, -1446), 0), 100000000, 0, -1445), (("%lazy_force", 1, 1, "", [0], 0)), (("src/base.ml", 651, 20447, 20449), ("src/base.ml", 651, 20447, 20511), 0), 0, Tag1 ("Base", 262)), 0)]), 0, (("src/base.ml", 185, 5960, 5960), ("src/base.ml", 652, 20512, 20515), 0), Tag1 ("Base", 263)), 0, 0); Tag1 (("array", 21327), ([((("a")), 100000000, 0, -773)], 1, 0, 1, ((Tag3 (Tag1 ((("Array", 21241)), "t"), [((("a")), 100000000, 0, -773)], (0)), 100000000, 0, -772)), [63], [0], 0, 0, (("src/base.ml", 187, 6071, 6073), ("src/base.ml", 188, 6100, 6167), 0), [(("deriving_inline", (("src/base.ml", 188, 6100, 6105), ("src/base.ml", 188, 6100, 6120), 0)), ([([(Tag8 ([(((("compare"), (("src/base.ml", 188, 6100, 6121), ("src/base.ml", 188, 6100, 6128), 0))), (("src/base.ml", 188, 6100, 6121), ("src/base.ml", 188, 6100, 6128), 0), 0, 0); (((("equal"), (("src/base.ml", 188, 6100, 6130), ("src/base.ml", 188, 6100, 6135), 0))), (("src/base.ml", 188, 6100, 6130), ("src/base.ml", 188, 6100, 6135), 0), 0, 0); (((("globalize"), (("src/base.ml", 188, 6100, 6137), ("src/base.ml", 188, 6100, 6146), 0))), (("src/base.ml", 188, 6100, 6137), ("src/base.ml", 188, 6100, 6146), 0), 0, 0); (((("sexp"), (("src/base.ml", 188, 6100, 6148), ("src/base.ml", 188, 6100, 6152), 0))), (("src/base.ml", 188, 6100, 6148), ("src/base.ml", 188, 6100, 6152), 0), 0, 0); (((("sexp_grammar"), (("src/base.ml", 188, 6100, 6154), ("src/base.ml", 188, 6100, 6166), 0))), (("src/base.ml", 188, 6100, 6154), ("src/base.ml", 188, 6100, 6166), 0), 0, 0)]), (("src/base.ml", 188, 6100, 6121), ("src/base.ml", 188, 6100, 6166), 0), 0, 0)], (("src/base.ml", 188, 6100, 6121), ("src/base.ml", 188, 6100, 6166), 0))]), (("src/base.ml", 188, 6100, 6102), ("src/base.ml", 188, 6100, 6167), 0))], 0, 0, Tag1 ("Base", 94)), 1, 0); (("compare_array", 21328), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -767), (Tag1 (0, ((("a")), 100000000, 0, -767), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -771), 0), 100000000, 0, -770), 0), 100000000, 0, -769), (Tag1 (0, (Tag3 ((("array", 21327)), [((("a")), 100000000, 0, -767)], (0)), 100000000, 0, -768), (Tag1 (0, (Tag3 ((("array", 21327)), [((("a")), 100000000, 0, -767)], (0)), 100000000, 0, -766), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -765), 0), 100000000, 0, -764), 0), 100000000, 0, -763), 0), 100000000, 0, -762), 0, (("src/base.ml", 190, 6169, 6175), ("src/base.ml", 190, 6169, 6188), 0), 0, Tag1 ("Base", 95)), 0); (("equal_array", 21329), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -757), (Tag1 (0, ((("a")), 100000000, 0, -757), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -761), 0), 100000000, 0, -760), 0), 100000000, 0, -759), (Tag1 (0, (Tag3 ((("array", 21327)), [((("a")), 100000000, 0, -757)], (0)), 100000000, 0, -758), (Tag1 (0, (Tag3 ((("array", 21327)), [((("a")), 100000000, 0, -757)], (0)), 100000000, 0, -756), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -755), 0), 100000000, 0, -754), 0), 100000000, 0, -753), 0), 100000000, 0, -752), 0, (("src/base.ml", 191, 6260, 6266), ("src/base.ml", 191, 6260, 6277), 0), 0, Tag1 ("Base", 96)), 0); (("globalize_array", 21330), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -749), ((("a")), 100000000, 0, -749), 0), 100000000, 0, -751), (Tag1 (0, (Tag3 ((("array", 21327)), [((("a")), 100000000, 0, -749)], (0)), 100000000, 0, -750), (Tag3 ((("array", 21327)), [((("a")), 100000000, 0, -749)], (0)), 100000000, 0, -748), 0), 100000000, 0, -747), 0), 100000000, 0, -746), 0, (("src/base.ml", 193, 6350, 6356), ("src/base.ml", 193, 6350, 6371), 0), 0, Tag1 ("Base", 97)), 0); (("array_of_sexp", 21331), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -745), ((("a")), 100000000, 0, -742), 0), 100000000, 0, -744), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -743), (Tag3 ((("array", 21327)), [((("a")), 100000000, 0, -742)], (0)), 100000000, 0, -741), 0), 100000000, 0, -740), 0), 100000000, 0, -739), 0, (("src/base.ml", 202, 6621, 6627), ("src/base.ml", 202, 6621, 6640), 0), 0, Tag1 ("Base", 99)), 0); (("sexp_of_array", 21332), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -736), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -738), 0), 100000000, 0, -737), (Tag1 (0, (Tag3 ((("array", 21327)), [((("a")), 100000000, 0, -736)], (0)), 100000000, 0, -735), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -734), 0), 100000000, 0, -733), 0), 100000000, 0, -732), 0, (("src/base.ml", 206, 6730, 6736), ("src/base.ml", 206, 6730, 6749), 0), 0, Tag1 ("Base", 100)), 0); (("array_sexp_grammar", 21333), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [((("a")), 100000000, 0, -730)], (0)), 100000000, 0, -731), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("array", 21327)), [((("a")), 100000000, 0, -730)], (0)), 100000000, 0, -729)], (0)), 100000000, 0, -728), 0), 100000000, 0, -727), 0, (("src/base.ml", 210, 6839, 6845), ("src/base.ml", 210, 6839, 6863), 0), 0, Tag1 ("Base", 102)), 0); Tag1 (("bool", 21334), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Bool", 21247)), "t"), 0, (0)), 100000000, 0, -726)), 0, 0, 0, 0, (("src/base.ml", 218, 7027, 7029), ("src/base.ml", 219, 7048, 7121), 0), [(("deriving_inline", (("src/base.ml", 219, 7048, 7053), ("src/base.ml", 219, 7048, 7068), 0)), ([([(Tag8 ([(((("compare"), (("src/base.ml", 219, 7048, 7069), ("src/base.ml", 219, 7048, 7076), 0))), (("src/base.ml", 219, 7048, 7069), ("src/base.ml", 219, 7048, 7076), 0), 0, 0); (((("equal"), (("src/base.ml", 219, 7048, 7078), ("src/base.ml", 219, 7048, 7083), 0))), (("src/base.ml", 219, 7048, 7078), ("src/base.ml", 219, 7048, 7083), 0), 0, 0); (((("globalize"), (("src/base.ml", 219, 7048, 7085), ("src/base.ml", 219, 7048, 7094), 0))), (("src/base.ml", 219, 7048, 7085), ("src/base.ml", 219, 7048, 7094), 0), 0, 0); (((("hash"), (("src/base.ml", 219, 7048, 7096), ("src/base.ml", 219, 7048, 7100), 0))), (("src/base.ml", 219, 7048, 7096), ("src/base.ml", 219, 7048, 7100), 0), 0, 0); (((("sexp"), (("src/base.ml", 219, 7048, 7102), ("src/base.ml", 219, 7048, 7106), 0))), (("src/base.ml", 219, 7048, 7102), ("src/base.ml", 219, 7048, 7106), 0), 0, 0); (((("sexp_grammar"), (("src/base.ml", 219, 7048, 7108), ("src/base.ml", 219, 7048, 7120), 0))), (("src/base.ml", 219, 7048, 7108), ("src/base.ml", 219, 7048, 7120), 0), 0, 0)]), (("src/base.ml", 219, 7048, 7069), ("src/base.ml", 219, 7048, 7120), 0), 0, 0)], (("src/base.ml", 219, 7048, 7069), ("src/base.ml", 219, 7048, 7120), 0))]), (("src/base.ml", 219, 7048, 7050), ("src/base.ml", 219, 7048, 7121), 0))], 1, 0, Tag1 ("Base", 105)), 1, 0); (("compare_bool", 21335), ((Tag1 (0, (Tag3 ((("bool", 21334)), 0, (0)), 100000000, 0, -725), (Tag1 (0, (Tag3 ((("bool", 21334)), 0, (0)), 100000000, 0, -724), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -723), 0), 100000000, 0, -722), 0), 100000000, 0, -721), 0, (("src/base.ml", 221, 7123, 7129), ("src/base.ml", 221, 7123, 7141), 0), 0, Tag1 ("Base", 106)), 0); (("equal_bool", 21336), ((Tag1 (0, (Tag3 ((("bool", 21334)), 0, (0)), 100000000, 0, -720), (Tag1 (0, (Tag3 ((("bool", 21334)), 0, (0)), 100000000, 0, -719), (Tag3 ((("bool", 21334)), 0, (0)), 100000000, 0, -718), 0), 100000000, 0, -717), 0), 100000000, 0, -716), 0, (("src/base.ml", 222, 7181, 7187), ("src/base.ml", 222, 7181, 7197), 0), 0, Tag1 ("Base", 107)), 0); (("globalize_bool", 21337), ((Tag1 (0, (Tag3 ((("bool", 21334)), 0, (0)), 100000000, 0, -715), (Tag3 ((("bool", 21334)), 0, (0)), 100000000, 0, -714), 0), 100000000, 0, -713), 0, (("src/base.ml", 224, 7237, 7244), ("src/base.ml", 224, 7237, 7258), 0), 0, Tag1 ("Base", 108)), 0); (("hash_fold_bool", 21338), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -712), (Tag1 (0, (Tag3 ((("bool", 21334)), 0, (0)), 100000000, 0, -711), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -710), 0), 100000000, 0, -709), 0), 100000000, 0, -708), 0, (("src/base.ml", 228, 7351, 7358), ("src/base.ml", 228, 7351, 7372), 0), 0, Tag1 ("Base", 109)), 0); (("hash_bool", 21339), ((Tag1 (0, (Tag3 ((("bool", 21334)), 0, (0)), 100000000, 0, -707), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "hash_value"), 0, (0)), 100000000, 0, -706), 0), 100000000, 0, -705), 0, (("src/base.ml", 233, 7480, 7487), ("src/base.ml", 233, 7480, 7496), 0), 0, Tag1 ("Base", 110)), 0); (("bool_of_sexp", 21340), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -704), (Tag3 ((("bool", 21334)), 0, (0)), 100000000, 0, -703), 0), 100000000, 0, -702), 0, (("src/base.ml", 238, 7597, 7603), ("src/base.ml", 238, 7597, 7615), 0), 0, Tag1 ("Base", 113)), 0); (("sexp_of_bool", 21341), ((Tag1 (0, (Tag3 ((("bool", 21334)), 0, (0)), 100000000, 0, -701), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -700), 0), 100000000, 0, -699), 0, (("src/base.ml", 239, 7661, 7667), ("src/base.ml", 239, 7661, 7679), 0), 0, Tag1 ("Base", 114)), 0); (("bool_sexp_grammar", 21342), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("bool", 21334)), 0, (0)), 100000000, 0, -698)], (0)), 100000000, 0, -697), 0, (("src/base.ml", 240, 7725, 7732), ("src/base.ml", 240, 7725, 7749), 0), 0, Tag1 ("Base", 115)), 0); Tag1 (("char", 21343), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Char", 21250)), "t"), 0, (0)), 100000000, 0, -696)), 0, 0, 0, 0, (("src/base.ml", 244, 7817, 7819), ("src/base.ml", 245, 7838, 7911), 0), [(("deriving_inline", (("src/base.ml", 245, 7838, 7843), ("src/base.ml", 245, 7838, 7858), 0)), ([([(Tag8 ([(((("compare"), (("src/base.ml", 245, 7838, 7859), ("src/base.ml", 245, 7838, 7866), 0))), (("src/base.ml", 245, 7838, 7859), ("src/base.ml", 245, 7838, 7866), 0), 0, 0); (((("equal"), (("src/base.ml", 245, 7838, 7868), ("src/base.ml", 245, 7838, 7873), 0))), (("src/base.ml", 245, 7838, 7868), ("src/base.ml", 245, 7838, 7873), 0), 0, 0); (((("globalize"), (("src/base.ml", 245, 7838, 7875), ("src/base.ml", 245, 7838, 7884), 0))), (("src/base.ml", 245, 7838, 7875), ("src/base.ml", 245, 7838, 7884), 0), 0, 0); (((("hash"), (("src/base.ml", 245, 7838, 7886), ("src/base.ml", 245, 7838, 7890), 0))), (("src/base.ml", 245, 7838, 7886), ("src/base.ml", 245, 7838, 7890), 0), 0, 0); (((("sexp"), (("src/base.ml", 245, 7838, 7892), ("src/base.ml", 245, 7838, 7896), 0))), (("src/base.ml", 245, 7838, 7892), ("src/base.ml", 245, 7838, 7896), 0), 0, 0); (((("sexp_grammar"), (("src/base.ml", 245, 7838, 7898), ("src/base.ml", 245, 7838, 7910), 0))), (("src/base.ml", 245, 7838, 7898), ("src/base.ml", 245, 7838, 7910), 0), 0, 0)]), (("src/base.ml", 245, 7838, 7859), ("src/base.ml", 245, 7838, 7910), 0), 0, 0)], (("src/base.ml", 245, 7838, 7859), ("src/base.ml", 245, 7838, 7910), 0))]), (("src/base.ml", 245, 7838, 7840), ("src/base.ml", 245, 7838, 7911), 0))], 1, 0, Tag1 ("Base", 116)), 1, 0); (("compare_char", 21344), ((Tag1 (0, (Tag3 ((("char", 21343)), 0, (0)), 100000000, 0, -695), (Tag1 (0, (Tag3 ((("char", 21343)), 0, (0)), 100000000, 0, -694), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -693), 0), 100000000, 0, -692), 0), 100000000, 0, -691), 0, (("src/base.ml", 247, 7913, 7919), ("src/base.ml", 247, 7913, 7931), 0), 0, Tag1 ("Base", 117)), 0); (("equal_char", 21345), ((Tag1 (0, (Tag3 ((("char", 21343)), 0, (0)), 100000000, 0, -690), (Tag1 (0, (Tag3 ((("char", 21343)), 0, (0)), 100000000, 0, -689), (Tag3 ((("bool", 21334)), 0, (0)), 100000000, 0, -688), 0), 100000000, 0, -687), 0), 100000000, 0, -686), 0, (("src/base.ml", 248, 7971, 7977), ("src/base.ml", 248, 7971, 7987), 0), 0, Tag1 ("Base", 118)), 0); (("globalize_char", 21346), ((Tag1 (0, (Tag3 ((("char", 21343)), 0, (0)), 100000000, 0, -685), (Tag3 ((("char", 21343)), 0, (0)), 100000000, 0, -684), 0), 100000000, 0, -683), 0, (("src/base.ml", 250, 8027, 8034), ("src/base.ml", 250, 8027, 8048), 0), 0, Tag1 ("Base", 119)), 0); (("hash_fold_char", 21347), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -682), (Tag1 (0, (Tag3 ((("char", 21343)), 0, (0)), 100000000, 0, -681), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -680), 0), 100000000, 0, -679), 0), 100000000, 0, -678), 0, (("src/base.ml", 254, 8141, 8148), ("src/base.ml", 254, 8141, 8162), 0), 0, Tag1 ("Base", 120)), 0); (("hash_char", 21348), ((Tag1 (0, (Tag3 ((("char", 21343)), 0, (0)), 100000000, 0, -677), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "hash_value"), 0, (0)), 100000000, 0, -676), 0), 100000000, 0, -675), 0, (("src/base.ml", 259, 8270, 8277), ("src/base.ml", 259, 8270, 8286), 0), 0, Tag1 ("Base", 121)), 0); (("char_of_sexp", 21349), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -674), (Tag3 ((("char", 21343)), 0, (0)), 100000000, 0, -673), 0), 100000000, 0, -672), 0, (("src/base.ml", 264, 8387, 8393), ("src/base.ml", 264, 8387, 8405), 0), 0, Tag1 ("Base", 124)), 0); (("sexp_of_char", 21350), ((Tag1 (0, (Tag3 ((("char", 21343)), 0, (0)), 100000000, 0, -671), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -670), 0), 100000000, 0, -669), 0, (("src/base.ml", 265, 8451, 8457), ("src/base.ml", 265, 8451, 8469), 0), 0, Tag1 ("Base", 125)), 0); (("char_sexp_grammar", 21351), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("char", 21343)), 0, (0)), 100000000, 0, -668)], (0)), 100000000, 0, -667), 0, (("src/base.ml", 266, 8515, 8522), ("src/base.ml", 266, 8515, 8539), 0), 0, Tag1 ("Base", 126)), 0); Tag1 (("exn", 21352), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Exn", 21258)), "t"), 0, (0)), 100000000, 0, -666)), 0, 0, 0, 0, (("src/base.ml", 270, 8607, 8609), ("src/base.ml", 270, 8607, 8653), 0), [(("deriving_inline", (("src/base.ml", 270, 8607, 8629), ("src/base.ml", 270, 8607, 8644), 0)), ([([(((("sexp_of"), (("src/base.ml", 270, 8607, 8645), ("src/base.ml", 270, 8607, 8652), 0))), (("src/base.ml", 270, 8607, 8645), ("src/base.ml", 270, 8607, 8652), 0), 0, 0)], (("src/base.ml", 270, 8607, 8645), ("src/base.ml", 270, 8607, 8652), 0))]), (("src/base.ml", 270, 8607, 8626), ("src/base.ml", 270, 8607, 8653), 0))], 0, 0, Tag1 ("Base", 127)), 1, 0); (("sexp_of_exn", 21353), ((Tag1 (0, (Tag3 ((("exn", 21352)), 0, (0)), 100000000, 0, -665), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -664), 0), 100000000, 0, -663), 0, (("src/base.ml", 272, 8655, 8661), ("src/base.ml", 272, 8655, 8672), 0), 0, Tag1 ("Base", 128)), 0); Tag1 (("float", 21354), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Float", 21260)), "t"), 0, (0)), 100000000, 0, -662)), 0, 0, 0, 0, (("src/base.ml", 276, 8729, 8731), ("src/base.ml", 277, 8752, 8825), 0), [(("deriving_inline", (("src/base.ml", 277, 8752, 8757), ("src/base.ml", 277, 8752, 8772), 0)), ([([(Tag8 ([(((("compare"), (("src/base.ml", 277, 8752, 8773), ("src/base.ml", 277, 8752, 8780), 0))), (("src/base.ml", 277, 8752, 8773), ("src/base.ml", 277, 8752, 8780), 0), 0, 0); (((("equal"), (("src/base.ml", 277, 8752, 8782), ("src/base.ml", 277, 8752, 8787), 0))), (("src/base.ml", 277, 8752, 8782), ("src/base.ml", 277, 8752, 8787), 0), 0, 0); (((("globalize"), (("src/base.ml", 277, 8752, 8789), ("src/base.ml", 277, 8752, 8798), 0))), (("src/base.ml", 277, 8752, 8789), ("src/base.ml", 277, 8752, 8798), 0), 0, 0); (((("hash"), (("src/base.ml", 277, 8752, 8800), ("src/base.ml", 277, 8752, 8804), 0))), (("src/base.ml", 277, 8752, 8800), ("src/base.ml", 277, 8752, 8804), 0), 0, 0); (((("sexp"), (("src/base.ml", 277, 8752, 8806), ("src/base.ml", 277, 8752, 8810), 0))), (("src/base.ml", 277, 8752, 8806), ("src/base.ml", 277, 8752, 8810), 0), 0, 0); (((("sexp_grammar"), (("src/base.ml", 277, 8752, 8812), ("src/base.ml", 277, 8752, 8824), 0))), (("src/base.ml", 277, 8752, 8812), ("src/base.ml", 277, 8752, 8824), 0), 0, 0)]), (("src/base.ml", 277, 8752, 8773), ("src/base.ml", 277, 8752, 8824), 0), 0, 0)], (("src/base.ml", 277, 8752, 8773), ("src/base.ml", 277, 8752, 8824), 0))]), (("src/base.ml", 277, 8752, 8754), ("src/base.ml", 277, 8752, 8825), 0))], 0, 0, Tag1 ("Base", 129)), 1, 0); (("compare_float", 21355), ((Tag1 (0, (Tag3 ((("float", 21354)), 0, (0)), 100000000, 0, -661), (Tag1 (0, (Tag3 ((("float", 21354)), 0, (0)), 100000000, 0, -660), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -659), 0), 100000000, 0, -658), 0), 100000000, 0, -657), 0, (("src/base.ml", 279, 8827, 8833), ("src/base.ml", 279, 8827, 8846), 0), 0, Tag1 ("Base", 130)), 0); (("equal_float", 21356), ((Tag1 (0, (Tag3 ((("float", 21354)), 0, (0)), 100000000, 0, -656), (Tag1 (0, (Tag3 ((("float", 21354)), 0, (0)), 100000000, 0, -655), (Tag3 ((("bool", 21334)), 0, (0)), 100000000, 0, -654), 0), 100000000, 0, -653), 0), 100000000, 0, -652), 0, (("src/base.ml", 280, 8889, 8895), ("src/base.ml", 280, 8889, 8906), 0), 0, Tag1 ("Base", 131)), 0); (("globalize_float", 21357), ((Tag1 (0, (Tag3 ((("float", 21354)), 0, (0)), 100000000, 0, -651), (Tag3 ((("float", 21354)), 0, (0)), 100000000, 0, -650), 0), 100000000, 0, -649), 0, (("src/base.ml", 282, 8949, 8956), ("src/base.ml", 282, 8949, 8971), 0), 0, Tag1 ("Base", 132)), 0); (("hash_fold_float", 21358), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -648), (Tag1 (0, (Tag3 ((("float", 21354)), 0, (0)), 100000000, 0, -647), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -646), 0), 100000000, 0, -645), 0), 100000000, 0, -644), 0, (("src/base.ml", 286, 9069, 9076), ("src/base.ml", 286, 9069, 9091), 0), 0, Tag1 ("Base", 133)), 0); (("hash_float", 21359), ((Tag1 (0, (Tag3 ((("float", 21354)), 0, (0)), 100000000, 0, -643), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "hash_value"), 0, (0)), 100000000, 0, -642), 0), 100000000, 0, -641), 0, (("src/base.ml", 291, 9201, 9208), ("src/base.ml", 291, 9201, 9218), 0), 0, Tag1 ("Base", 134)), 0); (("float_of_sexp", 21360), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -640), (Tag3 ((("float", 21354)), 0, (0)), 100000000, 0, -639), 0), 100000000, 0, -638), 0, (("src/base.ml", 296, 9321, 9327), ("src/base.ml", 296, 9321, 9340), 0), 0, Tag1 ("Base", 137)), 0); (("sexp_of_float", 21361), ((Tag1 (0, (Tag3 ((("float", 21354)), 0, (0)), 100000000, 0, -637), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -636), 0), 100000000, 0, -635), 0, (("src/base.ml", 297, 9388, 9394), ("src/base.ml", 297, 9388, 9407), 0), 0, Tag1 ("Base", 138)), 0); (("float_sexp_grammar", 21362), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("float", 21354)), 0, (0)), 100000000, 0, -634)], (0)), 100000000, 0, -633), 0, (("src/base.ml", 298, 9455, 9462), ("src/base.ml", 298, 9455, 9480), 0), 0, Tag1 ("Base", 139)), 0); Tag1 (("int", 21363), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Int", 21272)), "t"), 0, (0)), 100000000, 0, -632)), 0, 0, 0, 0, (("src/base.ml", 302, 9550, 9552), ("src/base.ml", 302, 9550, 9640), 0), [(("deriving_inline", (("src/base.ml", 302, 9550, 9572), ("src/base.ml", 302, 9550, 9587), 0)), ([([(Tag8 ([(((("compare"), (("src/base.ml", 302, 9550, 9588), ("src/base.ml", 302, 9550, 9595), 0))), (("src/base.ml", 302, 9550, 9588), ("src/base.ml", 302, 9550, 9595), 0), 0, 0); (((("equal"), (("src/base.ml", 302, 9550, 9597), ("src/base.ml", 302, 9550, 9602), 0))), (("src/base.ml", 302, 9550, 9597), ("src/base.ml", 302, 9550, 9602), 0), 0, 0); (((("globalize"), (("src/base.ml", 302, 9550, 9604), ("src/base.ml", 302, 9550, 9613), 0))), (("src/base.ml", 302, 9550, 9604), ("src/base.ml", 302, 9550, 9613), 0), 0, 0); (((("hash"), (("src/base.ml", 302, 9550, 9615), ("src/base.ml", 302, 9550, 9619), 0))), (("src/base.ml", 302, 9550, 9615), ("src/base.ml", 302, 9550, 9619), 0), 0, 0); (((("sexp"), (("src/base.ml", 302, 9550, 9621), ("src/base.ml", 302, 9550, 9625), 0))), (("src/base.ml", 302, 9550, 9621), ("src/base.ml", 302, 9550, 9625), 0), 0, 0); (((("sexp_grammar"), (("src/base.ml", 302, 9550, 9627), ("src/base.ml", 302, 9550, 9639), 0))), (("src/base.ml", 302, 9550, 9627), ("src/base.ml", 302, 9550, 9639), 0), 0, 0)]), (("src/base.ml", 302, 9550, 9588), ("src/base.ml", 302, 9550, 9639), 0), 0, 0)], (("src/base.ml", 302, 9550, 9588), ("src/base.ml", 302, 9550, 9639), 0))]), (("src/base.ml", 302, 9550, 9569), ("src/base.ml", 302, 9550, 9640), 0))], 1, 0, Tag1 ("Base", 140)), 1, 0); (("compare_int", 21364), ((Tag1 (0, (Tag3 ((("int", 21363)), 0, (0)), 100000000, 0, -631), (Tag1 (0, (Tag3 ((("int", 21363)), 0, (0)), 100000000, 0, -630), (Tag3 ((("int", 21363)), 0, (0)), 100000000, 0, -629), 0), 100000000, 0, -628), 0), 100000000, 0, -627), 0, (("src/base.ml", 304, 9642, 9648), ("src/base.ml", 304, 9642, 9659), 0), 0, Tag1 ("Base", 141)), 0); (("equal_int", 21365), ((Tag1 (0, (Tag3 ((("int", 21363)), 0, (0)), 100000000, 0, -626), (Tag1 (0, (Tag3 ((("int", 21363)), 0, (0)), 100000000, 0, -625), (Tag3 ((("bool", 21334)), 0, (0)), 100000000, 0, -624), 0), 100000000, 0, -623), 0), 100000000, 0, -622), 0, (("src/base.ml", 305, 9696, 9702), ("src/base.ml", 305, 9696, 9711), 0), 0, Tag1 ("Base", 142)), 0); (("globalize_int", 21366), ((Tag1 (0, (Tag3 ((("int", 21363)), 0, (0)), 100000000, 0, -621), (Tag3 ((("int", 21363)), 0, (0)), 100000000, 0, -620), 0), 100000000, 0, -619), 0, (("src/base.ml", 307, 9748, 9755), ("src/base.ml", 307, 9748, 9768), 0), 0, Tag1 ("Base", 143)), 0); (("hash_fold_int", 21367), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -618), (Tag1 (0, (Tag3 ((("int", 21363)), 0, (0)), 100000000, 0, -617), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -616), 0), 100000000, 0, -615), 0), 100000000, 0, -614), 0, (("src/base.ml", 311, 9856, 9863), ("src/base.ml", 311, 9856, 9876), 0), 0, Tag1 ("Base", 144)), 0); (("hash_int", 21368), ((Tag1 (0, (Tag3 ((("int", 21363)), 0, (0)), 100000000, 0, -613), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "hash_value"), 0, (0)), 100000000, 0, -612), 0), 100000000, 0, -611), 0, (("src/base.ml", 314, 9969, 9976), ("src/base.ml", 314, 9969, 9984), 0), 0, Tag1 ("Base", 145)), 0); (("int_of_sexp", 21369), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -610), (Tag3 ((("int", 21363)), 0, (0)), 100000000, 0, -609), 0), 100000000, 0, -608), 0, (("src/base.ml", 319, 10083, 10089), ("src/base.ml", 319, 10083, 10100), 0), 0, Tag1 ("Base", 148)), 0); (("sexp_of_int", 21370), ((Tag1 (0, (Tag3 ((("int", 21363)), 0, (0)), 100000000, 0, -607), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -606), 0), 100000000, 0, -605), 0, (("src/base.ml", 320, 10144, 10150), ("src/base.ml", 320, 10144, 10161), 0), 0, Tag1 ("Base", 149)), 0); (("int_sexp_grammar", 21371), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("int", 21363)), 0, (0)), 100000000, 0, -604)], (0)), 100000000, 0, -603), 0, (("src/base.ml", 321, 10205, 10212), ("src/base.ml", 321, 10205, 10228), 0), 0, Tag1 ("Base", 150)), 0); Tag1 (("int32", 21372), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Int32", 21274)), "t"), 0, (0)), 100000000, 0, -602)), 0, 0, 0, 0, (("src/base.ml", 325, 10294, 10296), ("src/base.ml", 326, 10317, 10390), 0), [(("deriving_inline", (("src/base.ml", 326, 10317, 10322), ("src/base.ml", 326, 10317, 10337), 0)), ([([(Tag8 ([(((("compare"), (("src/base.ml", 326, 10317, 10338), ("src/base.ml", 326, 10317, 10345), 0))), (("src/base.ml", 326, 10317, 10338), ("src/base.ml", 326, 10317, 10345), 0), 0, 0); (((("equal"), (("src/base.ml", 326, 10317, 10347), ("src/base.ml", 326, 10317, 10352), 0))), (("src/base.ml", 326, 10317, 10347), ("src/base.ml", 326, 10317, 10352), 0), 0, 0); (((("globalize"), (("src/base.ml", 326, 10317, 10354), ("src/base.ml", 326, 10317, 10363), 0))), (("src/base.ml", 326, 10317, 10354), ("src/base.ml", 326, 10317, 10363), 0), 0, 0); (((("hash"), (("src/base.ml", 326, 10317, 10365), ("src/base.ml", 326, 10317, 10369), 0))), (("src/base.ml", 326, 10317, 10365), ("src/base.ml", 326, 10317, 10369), 0), 0, 0); (((("sexp"), (("src/base.ml", 326, 10317, 10371), ("src/base.ml", 326, 10317, 10375), 0))), (("src/base.ml", 326, 10317, 10371), ("src/base.ml", 326, 10317, 10375), 0), 0, 0); (((("sexp_grammar"), (("src/base.ml", 326, 10317, 10377), ("src/base.ml", 326, 10317, 10389), 0))), (("src/base.ml", 326, 10317, 10377), ("src/base.ml", 326, 10317, 10389), 0), 0, 0)]), (("src/base.ml", 326, 10317, 10338), ("src/base.ml", 326, 10317, 10389), 0), 0, 0)], (("src/base.ml", 326, 10317, 10338), ("src/base.ml", 326, 10317, 10389), 0))]), (("src/base.ml", 326, 10317, 10319), ("src/base.ml", 326, 10317, 10390), 0))], 0, 0, Tag1 ("Base", 151)), 1, 0); (("compare_int32", 21373), ((Tag1 (0, (Tag3 ((("int32", 21372)), 0, (0)), 100000000, 0, -601), (Tag1 (0, (Tag3 ((("int32", 21372)), 0, (0)), 100000000, 0, -600), (Tag3 ((("int", 21363)), 0, (0)), 100000000, 0, -599), 0), 100000000, 0, -598), 0), 100000000, 0, -597), 0, (("src/base.ml", 328, 10392, 10398), ("src/base.ml", 328, 10392, 10411), 0), 0, Tag1 ("Base", 152)), 0); (("equal_int32", 21374), ((Tag1 (0, (Tag3 ((("int32", 21372)), 0, (0)), 100000000, 0, -596), (Tag1 (0, (Tag3 ((("int32", 21372)), 0, (0)), 100000000, 0, -595), (Tag3 ((("bool", 21334)), 0, (0)), 100000000, 0, -594), 0), 100000000, 0, -593), 0), 100000000, 0, -592), 0, (("src/base.ml", 329, 10454, 10460), ("src/base.ml", 329, 10454, 10471), 0), 0, Tag1 ("Base", 153)), 0); (("globalize_int32", 21375), ((Tag1 (0, (Tag3 ((("int32", 21372)), 0, (0)), 100000000, 0, -591), (Tag3 ((("int32", 21372)), 0, (0)), 100000000, 0, -590), 0), 100000000, 0, -589), 0, (("src/base.ml", 331, 10514, 10521), ("src/base.ml", 331, 10514, 10536), 0), 0, Tag1 ("Base", 154)), 0); (("hash_fold_int32", 21376), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -588), (Tag1 (0, (Tag3 ((("int32", 21372)), 0, (0)), 100000000, 0, -587), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -586), 0), 100000000, 0, -585), 0), 100000000, 0, -584), 0, (("src/base.ml", 335, 10634, 10641), ("src/base.ml", 335, 10634, 10656), 0), 0, Tag1 ("Base", 155)), 0); (("hash_int32", 21377), ((Tag1 (0, (Tag3 ((("int32", 21372)), 0, (0)), 100000000, 0, -583), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "hash_value"), 0, (0)), 100000000, 0, -582), 0), 100000000, 0, -581), 0, (("src/base.ml", 340, 10766, 10773), ("src/base.ml", 340, 10766, 10783), 0), 0, Tag1 ("Base", 156)), 0); (("int32_of_sexp", 21378), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -580), (Tag3 ((("int32", 21372)), 0, (0)), 100000000, 0, -579), 0), 100000000, 0, -578), 0, (("src/base.ml", 345, 10886, 10892), ("src/base.ml", 345, 10886, 10905), 0), 0, Tag1 ("Base", 159)), 0); (("sexp_of_int32", 21379), ((Tag1 (0, (Tag3 ((("int32", 21372)), 0, (0)), 100000000, 0, -577), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -576), 0), 100000000, 0, -575), 0, (("src/base.ml", 346, 10953, 10959), ("src/base.ml", 346, 10953, 10972), 0), 0, Tag1 ("Base", 160)), 0); (("int32_sexp_grammar", 21380), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("int32", 21372)), 0, (0)), 100000000, 0, -574)], (0)), 100000000, 0, -573), 0, (("src/base.ml", 347, 11020, 11027), ("src/base.ml", 347, 11020, 11045), 0), 0, Tag1 ("Base", 161)), 0); Tag1 (("int64", 21381), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Int64", 21276)), "t"), 0, (0)), 100000000, 0, -572)), 0, 0, 0, 0, (("src/base.ml", 351, 11115, 11117), ("src/base.ml", 352, 11138, 11211), 0), [(("deriving_inline", (("src/base.ml", 352, 11138, 11143), ("src/base.ml", 352, 11138, 11158), 0)), ([([(Tag8 ([(((("compare"), (("src/base.ml", 352, 11138, 11159), ("src/base.ml", 352, 11138, 11166), 0))), (("src/base.ml", 352, 11138, 11159), ("src/base.ml", 352, 11138, 11166), 0), 0, 0); (((("equal"), (("src/base.ml", 352, 11138, 11168), ("src/base.ml", 352, 11138, 11173), 0))), (("src/base.ml", 352, 11138, 11168), ("src/base.ml", 352, 11138, 11173), 0), 0, 0); (((("globalize"), (("src/base.ml", 352, 11138, 11175), ("src/base.ml", 352, 11138, 11184), 0))), (("src/base.ml", 352, 11138, 11175), ("src/base.ml", 352, 11138, 11184), 0), 0, 0); (((("hash"), (("src/base.ml", 352, 11138, 11186), ("src/base.ml", 352, 11138, 11190), 0))), (("src/base.ml", 352, 11138, 11186), ("src/base.ml", 352, 11138, 11190), 0), 0, 0); (((("sexp"), (("src/base.ml", 352, 11138, 11192), ("src/base.ml", 352, 11138, 11196), 0))), (("src/base.ml", 352, 11138, 11192), ("src/base.ml", 352, 11138, 11196), 0), 0, 0); (((("sexp_grammar"), (("src/base.ml", 352, 11138, 11198), ("src/base.ml", 352, 11138, 11210), 0))), (("src/base.ml", 352, 11138, 11198), ("src/base.ml", 352, 11138, 11210), 0), 0, 0)]), (("src/base.ml", 352, 11138, 11159), ("src/base.ml", 352, 11138, 11210), 0), 0, 0)], (("src/base.ml", 352, 11138, 11159), ("src/base.ml", 352, 11138, 11210), 0))]), (("src/base.ml", 352, 11138, 11140), ("src/base.ml", 352, 11138, 11211), 0))], 0, 0, Tag1 ("Base", 162)), 1, 0); (("compare_int64", 21382), ((Tag1 (0, (Tag3 ((("int64", 21381)), 0, (0)), 100000000, 0, -571), (Tag1 (0, (Tag3 ((("int64", 21381)), 0, (0)), 100000000, 0, -570), (Tag3 ((("int", 21363)), 0, (0)), 100000000, 0, -569), 0), 100000000, 0, -568), 0), 100000000, 0, -567), 0, (("src/base.ml", 354, 11213, 11219), ("src/base.ml", 354, 11213, 11232), 0), 0, Tag1 ("Base", 163)), 0); (("equal_int64", 21383), ((Tag1 (0, (Tag3 ((("int64", 21381)), 0, (0)), 100000000, 0, -566), (Tag1 (0, (Tag3 ((("int64", 21381)), 0, (0)), 100000000, 0, -565), (Tag3 ((("bool", 21334)), 0, (0)), 100000000, 0, -564), 0), 100000000, 0, -563), 0), 100000000, 0, -562), 0, (("src/base.ml", 355, 11275, 11281), ("src/base.ml", 355, 11275, 11292), 0), 0, Tag1 ("Base", 164)), 0); (("globalize_int64", 21384), ((Tag1 (0, (Tag3 ((("int64", 21381)), 0, (0)), 100000000, 0, -561), (Tag3 ((("int64", 21381)), 0, (0)), 100000000, 0, -560), 0), 100000000, 0, -559), 0, (("src/base.ml", 357, 11335, 11342), ("src/base.ml", 357, 11335, 11357), 0), 0, Tag1 ("Base", 165)), 0); (("hash_fold_int64", 21385), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -558), (Tag1 (0, (Tag3 ((("int64", 21381)), 0, (0)), 100000000, 0, -557), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -556), 0), 100000000, 0, -555), 0), 100000000, 0, -554), 0, (("src/base.ml", 361, 11455, 11462), ("src/base.ml", 361, 11455, 11477), 0), 0, Tag1 ("Base", 166)), 0); (("hash_int64", 21386), ((Tag1 (0, (Tag3 ((("int64", 21381)), 0, (0)), 100000000, 0, -553), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "hash_value"), 0, (0)), 100000000, 0, -552), 0), 100000000, 0, -551), 0, (("src/base.ml", 366, 11587, 11594), ("src/base.ml", 366, 11587, 11604), 0), 0, Tag1 ("Base", 167)), 0); (("int64_of_sexp", 21387), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -550), (Tag3 ((("int64", 21381)), 0, (0)), 100000000, 0, -549), 0), 100000000, 0, -548), 0, (("src/base.ml", 371, 11707, 11713), ("src/base.ml", 371, 11707, 11726), 0), 0, Tag1 ("Base", 170)), 0); (("sexp_of_int64", 21388), ((Tag1 (0, (Tag3 ((("int64", 21381)), 0, (0)), 100000000, 0, -547), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -546), 0), 100000000, 0, -545), 0, (("src/base.ml", 372, 11774, 11780), ("src/base.ml", 372, 11774, 11793), 0), 0, Tag1 ("Base", 171)), 0); (("int64_sexp_grammar", 21389), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("int64", 21381)), 0, (0)), 100000000, 0, -544)], (0)), 100000000, 0, -543), 0, (("src/base.ml", 373, 11841, 11848), ("src/base.ml", 373, 11841, 11866), 0), 0, Tag1 ("Base", 172)), 0); Tag1 (("list", 21390), ([((("a")), 100000000, 0, -542)], 1, 0, 1, ((Tag3 (Tag1 ((("List", 21281)), "t"), [((("a")), 100000000, 0, -542)], (0)), 100000000, 0, -541)), [25], [0], 0, 0, (("src/base.ml", 377, 11936, 11938), ("src/base.ml", 378, 11963, 12036), 0), [(("deriving_inline", (("src/base.ml", 378, 11963, 11968), ("src/base.ml", 378, 11963, 11983), 0)), ([([(Tag8 ([(((("compare"), (("src/base.ml", 378, 11963, 11984), ("src/base.ml", 378, 11963, 11991), 0))), (("src/base.ml", 378, 11963, 11984), ("src/base.ml", 378, 11963, 11991), 0), 0, 0); (((("equal"), (("src/base.ml", 378, 11963, 11993), ("src/base.ml", 378, 11963, 11998), 0))), (("src/base.ml", 378, 11963, 11993), ("src/base.ml", 378, 11963, 11998), 0), 0, 0); (((("globalize"), (("src/base.ml", 378, 11963, 12000), ("src/base.ml", 378, 11963, 12009), 0))), (("src/base.ml", 378, 11963, 12000), ("src/base.ml", 378, 11963, 12009), 0), 0, 0); (((("hash"), (("src/base.ml", 378, 11963, 12011), ("src/base.ml", 378, 11963, 12015), 0))), (("src/base.ml", 378, 11963, 12011), ("src/base.ml", 378, 11963, 12015), 0), 0, 0); (((("sexp"), (("src/base.ml", 378, 11963, 12017), ("src/base.ml", 378, 11963, 12021), 0))), (("src/base.ml", 378, 11963, 12017), ("src/base.ml", 378, 11963, 12021), 0), 0, 0); (((("sexp_grammar"), (("src/base.ml", 378, 11963, 12023), ("src/base.ml", 378, 11963, 12035), 0))), (("src/base.ml", 378, 11963, 12023), ("src/base.ml", 378, 11963, 12035), 0), 0, 0)]), (("src/base.ml", 378, 11963, 11984), ("src/base.ml", 378, 11963, 12035), 0), 0, 0)], (("src/base.ml", 378, 11963, 11984), ("src/base.ml", 378, 11963, 12035), 0))]), (("src/base.ml", 378, 11963, 11965), ("src/base.ml", 378, 11963, 12036), 0))], 0, 0, Tag1 ("Base", 173)), 1, 0); (("compare_list", 21391), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -536), (Tag1 (0, ((("a")), 100000000, 0, -536), (Tag3 ((("int", 21363)), 0, (0)), 100000000, 0, -540), 0), 100000000, 0, -539), 0), 100000000, 0, -538), (Tag1 (0, (Tag3 ((("list", 21390)), [((("a")), 100000000, 0, -536)], (0)), 100000000, 0, -537), (Tag1 (0, (Tag3 ((("list", 21390)), [((("a")), 100000000, 0, -536)], (0)), 100000000, 0, -535), (Tag3 ((("int", 21363)), 0, (0)), 100000000, 0, -534), 0), 100000000, 0, -533), 0), 100000000, 0, -532), 0), 100000000, 0, -531), 0, (("src/base.ml", 380, 12038, 12044), ("src/base.ml", 380, 12038, 12056), 0), 0, Tag1 ("Base", 174)), 0); (("equal_list", 21392), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -526), (Tag1 (0, ((("a")), 100000000, 0, -526), (Tag3 ((("bool", 21334)), 0, (0)), 100000000, 0, -530), 0), 100000000, 0, -529), 0), 100000000, 0, -528), (Tag1 (0, (Tag3 ((("list", 21390)), [((("a")), 100000000, 0, -526)], (0)), 100000000, 0, -527), (Tag1 (0, (Tag3 ((("list", 21390)), [((("a")), 100000000, 0, -526)], (0)), 100000000, 0, -525), (Tag3 ((("bool", 21334)), 0, (0)), 100000000, 0, -524), 0), 100000000, 0, -523), 0), 100000000, 0, -522), 0), 100000000, 0, -521), 0, (("src/base.ml", 381, 12125, 12131), ("src/base.ml", 381, 12125, 12141), 0), 0, Tag1 ("Base", 175)), 0); (("globalize_list", 21393), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -518), ((("a")), 100000000, 0, -518), 0), 100000000, 0, -520), (Tag1 (0, (Tag3 ((("list", 21390)), [((("a")), 100000000, 0, -518)], (0)), 100000000, 0, -519), (Tag3 ((("list", 21390)), [((("a")), 100000000, 0, -518)], (0)), 100000000, 0, -517), 0), 100000000, 0, -516), 0), 100000000, 0, -515), 0, (("src/base.ml", 383, 12211, 12217), ("src/base.ml", 383, 12211, 12231), 0), 0, Tag1 ("Base", 176)), 0); (("hash_fold_list", 21394), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -514), (Tag1 (0, ((("a")), 100000000, 0, -509), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -513), 0), 100000000, 0, -512), 0), 100000000, 0, -511), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -510), (Tag1 (0, (Tag3 ((("list", 21390)), [((("a")), 100000000, 0, -509)], (0)), 100000000, 0, -508), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -507), 0), 100000000, 0, -506), 0), 100000000, 0, -505), 0), 100000000, 0, -504), 0, (("src/base.ml", 392, 12476, 12482), ("src/base.ml", 392, 12476, 12496), 0), 0, Tag1 ("Base", 178)), 0); (("list_of_sexp", 21395), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -503), ((("a")), 100000000, 0, -500), 0), 100000000, 0, -502), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -501), (Tag3 ((("list", 21390)), [((("a")), 100000000, 0, -500)], (0)), 100000000, 0, -499), 0), 100000000, 0, -498), 0), 100000000, 0, -497), 0, (("src/base.ml", 402, 12696, 12702), ("src/base.ml", 402, 12696, 12714), 0), 0, Tag1 ("Base", 179)), 0); (("sexp_of_list", 21396), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -494), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -496), 0), 100000000, 0, -495), (Tag1 (0, (Tag3 ((("list", 21390)), [((("a")), 100000000, 0, -494)], (0)), 100000000, 0, -493), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -492), 0), 100000000, 0, -491), 0), 100000000, 0, -490), 0, (("src/base.ml", 406, 12802, 12808), ("src/base.ml", 406, 12802, 12820), 0), 0, Tag1 ("Base", 180)), 0); (("list_sexp_grammar", 21397), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [((("a")), 100000000, 0, -488)], (0)), 100000000, 0, -489), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("list", 21390)), [((("a")), 100000000, 0, -488)], (0)), 100000000, 0, -487)], (0)), 100000000, 0, -486), 0), 100000000, 0, -485), 0, (("src/base.ml", 410, 12908, 12914), ("src/base.ml", 410, 12908, 12931), 0), 0, Tag1 ("Base", 181)), 0); Tag1 (("nativeint", 21398), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Nativeint", 21285)), "t"), 0, (0)), 100000000, 0, -484)), 0, 0, 0, 0, (("src/base.ml", 418, 13093, 13095), ("src/base.ml", 419, 13124, 13197), 0), [(("deriving_inline", (("src/base.ml", 419, 13124, 13129), ("src/base.ml", 419, 13124, 13144), 0)), ([([(Tag8 ([(((("compare"), (("src/base.ml", 419, 13124, 13145), ("src/base.ml", 419, 13124, 13152), 0))), (("src/base.ml", 419, 13124, 13145), ("src/base.ml", 419, 13124, 13152), 0), 0, 0); (((("equal"), (("src/base.ml", 419, 13124, 13154), ("src/base.ml", 419, 13124, 13159), 0))), (("src/base.ml", 419, 13124, 13154), ("src/base.ml", 419, 13124, 13159), 0), 0, 0); (((("globalize"), (("src/base.ml", 419, 13124, 13161), ("src/base.ml", 419, 13124, 13170), 0))), (("src/base.ml", 419, 13124, 13161), ("src/base.ml", 419, 13124, 13170), 0), 0, 0); (((("hash"), (("src/base.ml", 419, 13124, 13172), ("src/base.ml", 419, 13124, 13176), 0))), (("src/base.ml", 419, 13124, 13172), ("src/base.ml", 419, 13124, 13176), 0), 0, 0); (((("sexp"), (("src/base.ml", 419, 13124, 13178), ("src/base.ml", 419, 13124, 13182), 0))), (("src/base.ml", 419, 13124, 13178), ("src/base.ml", 419, 13124, 13182), 0), 0, 0); (((("sexp_grammar"), (("src/base.ml", 419, 13124, 13184), ("src/base.ml", 419, 13124, 13196), 0))), (("src/base.ml", 419, 13124, 13184), ("src/base.ml", 419, 13124, 13196), 0), 0, 0)]), (("src/base.ml", 419, 13124, 13145), ("src/base.ml", 419, 13124, 13196), 0), 0, 0)], (("src/base.ml", 419, 13124, 13145), ("src/base.ml", 419, 13124, 13196), 0))]), (("src/base.ml", 419, 13124, 13126), ("src/base.ml", 419, 13124, 13197), 0))], 0, 0, Tag1 ("Base", 183)), 1, 0); (("compare_nativeint", 21399), ((Tag1 (0, (Tag3 ((("nativeint", 21398)), 0, (0)), 100000000, 0, -483), (Tag1 (0, (Tag3 ((("nativeint", 21398)), 0, (0)), 100000000, 0, -482), (Tag3 ((("int", 21363)), 0, (0)), 100000000, 0, -481), 0), 100000000, 0, -480), 0), 100000000, 0, -479), 0, (("src/base.ml", 421, 13199, 13205), ("src/base.ml", 421, 13199, 13222), 0), 0, Tag1 ("Base", 184)), 0); (("equal_nativeint", 21400), ((Tag1 (0, (Tag3 ((("nativeint", 21398)), 0, (0)), 100000000, 0, -478), (Tag1 (0, (Tag3 ((("nativeint", 21398)), 0, (0)), 100000000, 0, -477), (Tag3 ((("bool", 21334)), 0, (0)), 100000000, 0, -476), 0), 100000000, 0, -475), 0), 100000000, 0, -474), 0, (("src/base.ml", 422, 13277, 13283), ("src/base.ml", 422, 13277, 13298), 0), 0, Tag1 ("Base", 185)), 0); (("globalize_nativeint", 21401), ((Tag1 (0, (Tag3 ((("nativeint", 21398)), 0, (0)), 100000000, 0, -473), (Tag3 ((("nativeint", 21398)), 0, (0)), 100000000, 0, -472), 0), 100000000, 0, -471), 0, (("src/base.ml", 424, 13353, 13360), ("src/base.ml", 424, 13353, 13379), 0), 0, Tag1 ("Base", 186)), 0); (("hash_fold_nativeint", 21402), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -470), (Tag1 (0, (Tag3 ((("nativeint", 21398)), 0, (0)), 100000000, 0, -469), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -468), 0), 100000000, 0, -467), 0), 100000000, 0, -466), 0, (("src/base.ml", 428, 13497, 13504), ("src/base.ml", 428, 13497, 13523), 0), 0, Tag1 ("Base", 187)), 0); (("hash_nativeint", 21403), ((Tag1 (0, (Tag3 ((("nativeint", 21398)), 0, (0)), 100000000, 0, -465), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "hash_value"), 0, (0)), 100000000, 0, -464), 0), 100000000, 0, -463), 0, (("src/base.ml", 433, 13641, 13648), ("src/base.ml", 433, 13641, 13662), 0), 0, Tag1 ("Base", 188)), 0); (("nativeint_of_sexp", 21404), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -462), (Tag3 ((("nativeint", 21398)), 0, (0)), 100000000, 0, -461), 0), 100000000, 0, -460), 0, (("src/base.ml", 438, 13773, 13779), ("src/base.ml", 438, 13773, 13796), 0), 0, Tag1 ("Base", 191)), 0); (("sexp_of_nativeint", 21405), ((Tag1 (0, (Tag3 ((("nativeint", 21398)), 0, (0)), 100000000, 0, -459), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -458), 0), 100000000, 0, -457), 0, (("src/base.ml", 439, 13852, 13858), ("src/base.ml", 439, 13852, 13875), 0), 0, Tag1 ("Base", 192)), 0); (("nativeint_sexp_grammar", 21406), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("nativeint", 21398)), 0, (0)), 100000000, 0, -456)], (0)), 100000000, 0, -455), 0, (("src/base.ml", 441, 13932, 13939), ("src/base.ml", 441, 13932, 13961), 0), 0, Tag1 ("Base", 193)), 0); Tag1 (("option", 21407), ([((("a")), 100000000, 0, -454)], 1, 0, 1, ((Tag3 (Tag1 ((("Option", 21287)), "t"), [((("a")), 100000000, 0, -454)], (0)), 100000000, 0, -453)), [25], [0], 0, 0, (("src/base.ml", 447, 14048, 14050), ("src/base.ml", 448, 14079, 14152), 0), [(("deriving_inline", (("src/base.ml", 448, 14079, 14084), ("src/base.ml", 448, 14079, 14099), 0)), ([([(Tag8 ([(((("compare"), (("src/base.ml", 448, 14079, 14100), ("src/base.ml", 448, 14079, 14107), 0))), (("src/base.ml", 448, 14079, 14100), ("src/base.ml", 448, 14079, 14107), 0), 0, 0); (((("equal"), (("src/base.ml", 448, 14079, 14109), ("src/base.ml", 448, 14079, 14114), 0))), (("src/base.ml", 448, 14079, 14109), ("src/base.ml", 448, 14079, 14114), 0), 0, 0); (((("globalize"), (("src/base.ml", 448, 14079, 14116), ("src/base.ml", 448, 14079, 14125), 0))), (("src/base.ml", 448, 14079, 14116), ("src/base.ml", 448, 14079, 14125), 0), 0, 0); (((("hash"), (("src/base.ml", 448, 14079, 14127), ("src/base.ml", 448, 14079, 14131), 0))), (("src/base.ml", 448, 14079, 14127), ("src/base.ml", 448, 14079, 14131), 0), 0, 0); (((("sexp"), (("src/base.ml", 448, 14079, 14133), ("src/base.ml", 448, 14079, 14137), 0))), (("src/base.ml", 448, 14079, 14133), ("src/base.ml", 448, 14079, 14137), 0), 0, 0); (((("sexp_grammar"), (("src/base.ml", 448, 14079, 14139), ("src/base.ml", 448, 14079, 14151), 0))), (("src/base.ml", 448, 14079, 14139), ("src/base.ml", 448, 14079, 14151), 0), 0, 0)]), (("src/base.ml", 448, 14079, 14100), ("src/base.ml", 448, 14079, 14151), 0), 0, 0)], (("src/base.ml", 448, 14079, 14100), ("src/base.ml", 448, 14079, 14151), 0))]), (("src/base.ml", 448, 14079, 14081), ("src/base.ml", 448, 14079, 14152), 0))], 0, 0, Tag1 ("Base", 194)), 1, 0); (("compare_option", 21408), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -448), (Tag1 (0, ((("a")), 100000000, 0, -448), (Tag3 ((("int", 21363)), 0, (0)), 100000000, 0, -452), 0), 100000000, 0, -451), 0), 100000000, 0, -450), (Tag1 (0, (Tag3 ((("option", 21407)), [((("a")), 100000000, 0, -448)], (0)), 100000000, 0, -449), (Tag1 (0, (Tag3 ((("option", 21407)), [((("a")), 100000000, 0, -448)], (0)), 100000000, 0, -447), (Tag3 ((("int", 21363)), 0, (0)), 100000000, 0, -446), 0), 100000000, 0, -445), 0), 100000000, 0, -444), 0), 100000000, 0, -443), 0, (("src/base.ml", 450, 14154, 14160), ("src/base.ml", 450, 14154, 14174), 0), 0, Tag1 ("Base", 195)), 0); (("equal_option", 21409), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -438), (Tag1 (0, ((("a")), 100000000, 0, -438), (Tag3 ((("bool", 21334)), 0, (0)), 100000000, 0, -442), 0), 100000000, 0, -441), 0), 100000000, 0, -440), (Tag1 (0, (Tag3 ((("option", 21407)), [((("a")), 100000000, 0, -438)], (0)), 100000000, 0, -439), (Tag1 (0, (Tag3 ((("option", 21407)), [((("a")), 100000000, 0, -438)], (0)), 100000000, 0, -437), (Tag3 ((("bool", 21334)), 0, (0)), 100000000, 0, -436), 0), 100000000, 0, -435), 0), 100000000, 0, -434), 0), 100000000, 0, -433), 0, (("src/base.ml", 454, 14259, 14265), ("src/base.ml", 454, 14259, 14277), 0), 0, Tag1 ("Base", 196)), 0); (("globalize_option", 21410), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -430), ((("a")), 100000000, 0, -430), 0), 100000000, 0, -432), (Tag1 (0, (Tag3 ((("option", 21407)), [((("a")), 100000000, 0, -430)], (0)), 100000000, 0, -431), (Tag3 ((("option", 21407)), [((("a")), 100000000, 0, -430)], (0)), 100000000, 0, -429), 0), 100000000, 0, -428), 0), 100000000, 0, -427), 0, (("src/base.ml", 458, 14362, 14368), ("src/base.ml", 458, 14362, 14384), 0), 0, Tag1 ("Base", 197)), 0); (("hash_fold_option", 21411), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -426), (Tag1 (0, ((("a")), 100000000, 0, -421), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -425), 0), 100000000, 0, -424), 0), 100000000, 0, -423), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -422), (Tag1 (0, (Tag3 ((("option", 21407)), [((("a")), 100000000, 0, -421)], (0)), 100000000, 0, -420), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -419), 0), 100000000, 0, -418), 0), 100000000, 0, -417), 0), 100000000, 0, -416), 0, (("src/base.ml", 467, 14639, 14645), ("src/base.ml", 467, 14639, 14661), 0), 0, Tag1 ("Base", 199)), 0); (("option_of_sexp", 21412), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -415), ((("a")), 100000000, 0, -412), 0), 100000000, 0, -414), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -413), (Tag3 ((("option", 21407)), [((("a")), 100000000, 0, -412)], (0)), 100000000, 0, -411), 0), 100000000, 0, -410), 0), 100000000, 0, -409), 0, (("src/base.ml", 477, 14865, 14871), ("src/base.ml", 477, 14865, 14885), 0), 0, Tag1 ("Base", 200)), 0); (("sexp_of_option", 21413), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -406), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -408), 0), 100000000, 0, -407), (Tag1 (0, (Tag3 ((("option", 21407)), [((("a")), 100000000, 0, -406)], (0)), 100000000, 0, -405), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -404), 0), 100000000, 0, -403), 0), 100000000, 0, -402), 0, (("src/base.ml", 481, 14977, 14983), ("src/base.ml", 481, 14977, 14997), 0), 0, Tag1 ("Base", 201)), 0); (("option_sexp_grammar", 21414), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [((("a")), 100000000, 0, -400)], (0)), 100000000, 0, -401), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("option", 21407)), [((("a")), 100000000, 0, -400)], (0)), 100000000, 0, -399)], (0)), 100000000, 0, -398), 0), 100000000, 0, -397), 0, (("src/base.ml", 485, 15089, 15095), ("src/base.ml", 485, 15089, 15114), 0), 0, Tag1 ("Base", 202)), 0); Tag1 (("ref", 21415), ([((("a")), 100000000, 0, -396)], 1, 0, 1, ((Tag3 (Tag1 ((("Ref", 21299)), "t"), [((("a")), 100000000, 0, -396)], (0)), 100000000, 0, -395)), [63], [0], 0, 0, (("src/base.ml", 493, 15280, 15282), ("src/base.ml", 493, 15280, 15370), 0), [(("deriving_inline", (("src/base.ml", 493, 15280, 15308), ("src/base.ml", 493, 15280, 15323), 0)), ([([(Tag8 ([(((("compare"), (("src/base.ml", 493, 15280, 15324), ("src/base.ml", 493, 15280, 15331), 0))), (("src/base.ml", 493, 15280, 15324), ("src/base.ml", 493, 15280, 15331), 0), 0, 0); (((("equal"), (("src/base.ml", 493, 15280, 15333), ("src/base.ml", 493, 15280, 15338), 0))), (("src/base.ml", 493, 15280, 15333), ("src/base.ml", 493, 15280, 15338), 0), 0, 0); (((("globalize"), (("src/base.ml", 493, 15280, 15340), ("src/base.ml", 493, 15280, 15349), 0))), (("src/base.ml", 493, 15280, 15340), ("src/base.ml", 493, 15280, 15349), 0), 0, 0); (((("sexp"), (("src/base.ml", 493, 15280, 15351), ("src/base.ml", 493, 15280, 15355), 0))), (("src/base.ml", 493, 15280, 15351), ("src/base.ml", 493, 15280, 15355), 0), 0, 0); (((("sexp_grammar"), (("src/base.ml", 493, 15280, 15357), ("src/base.ml", 493, 15280, 15369), 0))), (("src/base.ml", 493, 15280, 15357), ("src/base.ml", 493, 15280, 15369), 0), 0, 0)]), (("src/base.ml", 493, 15280, 15324), ("src/base.ml", 493, 15280, 15369), 0), 0, 0)], (("src/base.ml", 493, 15280, 15324), ("src/base.ml", 493, 15280, 15369), 0))]), (("src/base.ml", 493, 15280, 15305), ("src/base.ml", 493, 15280, 15370), 0))], 0, 0, Tag1 ("Base", 204)), 1, 0); (("compare_ref", 21416), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -390), (Tag1 (0, ((("a")), 100000000, 0, -390), (Tag3 ((("int", 21363)), 0, (0)), 100000000, 0, -394), 0), 100000000, 0, -393), 0), 100000000, 0, -392), (Tag1 (0, (Tag3 ((("ref", 21415)), [((("a")), 100000000, 0, -390)], (0)), 100000000, 0, -391), (Tag1 (0, (Tag3 ((("ref", 21415)), [((("a")), 100000000, 0, -390)], (0)), 100000000, 0, -389), (Tag3 ((("int", 21363)), 0, (0)), 100000000, 0, -388), 0), 100000000, 0, -387), 0), 100000000, 0, -386), 0), 100000000, 0, -385), 0, (("src/base.ml", 495, 15372, 15378), ("src/base.ml", 495, 15372, 15389), 0), 0, Tag1 ("Base", 205)), 0); (("equal_ref", 21417), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -380), (Tag1 (0, ((("a")), 100000000, 0, -380), (Tag3 ((("bool", 21334)), 0, (0)), 100000000, 0, -384), 0), 100000000, 0, -383), 0), 100000000, 0, -382), (Tag1 (0, (Tag3 ((("ref", 21415)), [((("a")), 100000000, 0, -380)], (0)), 100000000, 0, -381), (Tag1 (0, (Tag3 ((("ref", 21415)), [((("a")), 100000000, 0, -380)], (0)), 100000000, 0, -379), (Tag3 ((("bool", 21334)), 0, (0)), 100000000, 0, -378), 0), 100000000, 0, -377), 0), 100000000, 0, -376), 0), 100000000, 0, -375), 0, (("src/base.ml", 496, 15455, 15461), ("src/base.ml", 496, 15455, 15470), 0), 0, Tag1 ("Base", 206)), 0); (("globalize_ref", 21418), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -372), ((("a")), 100000000, 0, -372), 0), 100000000, 0, -374), (Tag1 (0, (Tag3 ((("ref", 21415)), [((("a")), 100000000, 0, -372)], (0)), 100000000, 0, -373), (Tag3 ((("ref", 21415)), [((("a")), 100000000, 0, -372)], (0)), 100000000, 0, -371), 0), 100000000, 0, -370), 0), 100000000, 0, -369), 0, (("src/base.ml", 498, 15537, 15543), ("src/base.ml", 498, 15537, 15556), 0), 0, Tag1 ("Base", 207)), 0); (("ref_of_sexp", 21419), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -368), ((("a")), 100000000, 0, -365), 0), 100000000, 0, -367), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -366), (Tag3 ((("ref", 21415)), [((("a")), 100000000, 0, -365)], (0)), 100000000, 0, -364), 0), 100000000, 0, -363), 0), 100000000, 0, -362), 0, (("src/base.ml", 505, 15788, 15794), ("src/base.ml", 505, 15788, 15805), 0), 0, Tag1 ("Base", 209)), 0); (("sexp_of_ref", 21420), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -359), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -361), 0), 100000000, 0, -360), (Tag1 (0, (Tag3 ((("ref", 21415)), [((("a")), 100000000, 0, -359)], (0)), 100000000, 0, -358), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -357), 0), 100000000, 0, -356), 0), 100000000, 0, -355), 0, (("src/base.ml", 509, 15891, 15897), ("src/base.ml", 509, 15891, 15908), 0), 0, Tag1 ("Base", 210)), 0); (("ref_sexp_grammar", 21421), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [((("a")), 100000000, 0, -353)], (0)), 100000000, 0, -354), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("ref", 21415)), [((("a")), 100000000, 0, -353)], (0)), 100000000, 0, -352)], (0)), 100000000, 0, -351), 0), 100000000, 0, -350), 0, (("src/base.ml", 513, 15994, 16000), ("src/base.ml", 513, 15994, 16016), 0), 0, Tag1 ("Base", 211)), 0); Tag1 (("string", 21422), (0, 0, 0, 1, ((Tag3 (Tag1 ((("String", 21309)), "t"), 0, (0)), 100000000, 0, -349)), 0, 0, 0, 0, (("src/base.ml", 519, 16168, 16170), ("src/base.ml", 520, 16193, 16266), 0), [(("deriving_inline", (("src/base.ml", 520, 16193, 16198), ("src/base.ml", 520, 16193, 16213), 0)), ([([(Tag8 ([(((("compare"), (("src/base.ml", 520, 16193, 16214), ("src/base.ml", 520, 16193, 16221), 0))), (("src/base.ml", 520, 16193, 16214), ("src/base.ml", 520, 16193, 16221), 0), 0, 0); (((("equal"), (("src/base.ml", 520, 16193, 16223), ("src/base.ml", 520, 16193, 16228), 0))), (("src/base.ml", 520, 16193, 16223), ("src/base.ml", 520, 16193, 16228), 0), 0, 0); (((("globalize"), (("src/base.ml", 520, 16193, 16230), ("src/base.ml", 520, 16193, 16239), 0))), (("src/base.ml", 520, 16193, 16230), ("src/base.ml", 520, 16193, 16239), 0), 0, 0); (((("hash"), (("src/base.ml", 520, 16193, 16241), ("src/base.ml", 520, 16193, 16245), 0))), (("src/base.ml", 520, 16193, 16241), ("src/base.ml", 520, 16193, 16245), 0), 0, 0); (((("sexp"), (("src/base.ml", 520, 16193, 16247), ("src/base.ml", 520, 16193, 16251), 0))), (("src/base.ml", 520, 16193, 16247), ("src/base.ml", 520, 16193, 16251), 0), 0, 0); (((("sexp_grammar"), (("src/base.ml", 520, 16193, 16253), ("src/base.ml", 520, 16193, 16265), 0))), (("src/base.ml", 520, 16193, 16253), ("src/base.ml", 520, 16193, 16265), 0), 0, 0)]), (("src/base.ml", 520, 16193, 16214), ("src/base.ml", 520, 16193, 16265), 0), 0, 0)], (("src/base.ml", 520, 16193, 16214), ("src/base.ml", 520, 16193, 16265), 0))]), (("src/base.ml", 520, 16193, 16195), ("src/base.ml", 520, 16193, 16266), 0))], 0, 0, Tag1 ("Base", 213)), 1, 0); (("compare_string", 21423), ((Tag1 (0, (Tag3 ((("string", 21422)), 0, (0)), 100000000, 0, -348), (Tag1 (0, (Tag3 ((("string", 21422)), 0, (0)), 100000000, 0, -347), (Tag3 ((("int", 21363)), 0, (0)), 100000000, 0, -346), 0), 100000000, 0, -345), 0), 100000000, 0, -344), 0, (("src/base.ml", 522, 16268, 16274), ("src/base.ml", 522, 16268, 16288), 0), 0, Tag1 ("Base", 214)), 0); (("equal_string", 21424), ((Tag1 (0, (Tag3 ((("string", 21422)), 0, (0)), 100000000, 0, -343), (Tag1 (0, (Tag3 ((("string", 21422)), 0, (0)), 100000000, 0, -342), (Tag3 ((("bool", 21334)), 0, (0)), 100000000, 0, -341), 0), 100000000, 0, -340), 0), 100000000, 0, -339), 0, (("src/base.ml", 523, 16334, 16340), ("src/base.ml", 523, 16334, 16352), 0), 0, Tag1 ("Base", 215)), 0); (("globalize_string", 21425), ((Tag1 (0, (Tag3 ((("string", 21422)), 0, (0)), 100000000, 0, -338), (Tag3 ((("string", 21422)), 0, (0)), 100000000, 0, -337), 0), 100000000, 0, -336), 0, (("src/base.ml", 525, 16398, 16405), ("src/base.ml", 525, 16398, 16421), 0), 0, Tag1 ("Base", 216)), 0); (("hash_fold_string", 21426), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -335), (Tag1 (0, (Tag3 ((("string", 21422)), 0, (0)), 100000000, 0, -334), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -333), 0), 100000000, 0, -332), 0), 100000000, 0, -331), 0, (("src/base.ml", 529, 16524, 16531), ("src/base.ml", 529, 16524, 16547), 0), 0, Tag1 ("Base", 217)), 0); (("hash_string", 21427), ((Tag1 (0, (Tag3 ((("string", 21422)), 0, (0)), 100000000, 0, -330), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "hash_value"), 0, (0)), 100000000, 0, -329), 0), 100000000, 0, -328), 0, (("src/base.ml", 534, 16659, 16666), ("src/base.ml", 534, 16659, 16677), 0), 0, Tag1 ("Base", 218)), 0); (("string_of_sexp", 21428), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -327), (Tag3 ((("string", 21422)), 0, (0)), 100000000, 0, -326), 0), 100000000, 0, -325), 0, (("src/base.ml", 539, 16782, 16788), ("src/base.ml", 539, 16782, 16802), 0), 0, Tag1 ("Base", 221)), 0); (("sexp_of_string", 21429), ((Tag1 (0, (Tag3 ((("string", 21422)), 0, (0)), 100000000, 0, -324), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -323), 0), 100000000, 0, -322), 0, (("src/base.ml", 540, 16852, 16858), ("src/base.ml", 540, 16852, 16872), 0), 0, Tag1 ("Base", 222)), 0); (("string_sexp_grammar", 21430), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("string", 21422)), 0, (0)), 100000000, 0, -321)], (0)), 100000000, 0, -320), 0, (("src/base.ml", 541, 16922, 16929), ("src/base.ml", 541, 16922, 16948), 0), 0, Tag1 ("Base", 223)), 0); Tag1 (("bytes", 21431), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Bytes", 21249)), "t"), 0, (0)), 100000000, 0, -319)), 0, 0, 0, 0, (("src/base.ml", 545, 17020, 17022), ("src/base.ml", 545, 17020, 17108), 0), [(("deriving_inline", (("src/base.ml", 545, 17020, 17046), ("src/base.ml", 545, 17020, 17061), 0)), ([([(Tag8 ([(((("compare"), (("src/base.ml", 545, 17020, 17062), ("src/base.ml", 545, 17020, 17069), 0))), (("src/base.ml", 545, 17020, 17062), ("src/base.ml", 545, 17020, 17069), 0), 0, 0); (((("equal"), (("src/base.ml", 545, 17020, 17071), ("src/base.ml", 545, 17020, 17076), 0))), (("src/base.ml", 545, 17020, 17071), ("src/base.ml", 545, 17020, 17076), 0), 0, 0); (((("globalize"), (("src/base.ml", 545, 17020, 17078), ("src/base.ml", 545, 17020, 17087), 0))), (("src/base.ml", 545, 17020, 17078), ("src/base.ml", 545, 17020, 17087), 0), 0, 0); (((("sexp"), (("src/base.ml", 545, 17020, 17089), ("src/base.ml", 545, 17020, 17093), 0))), (("src/base.ml", 545, 17020, 17089), ("src/base.ml", 545, 17020, 17093), 0), 0, 0); (((("sexp_grammar"), (("src/base.ml", 545, 17020, 17095), ("src/base.ml", 545, 17020, 17107), 0))), (("src/base.ml", 545, 17020, 17095), ("src/base.ml", 545, 17020, 17107), 0), 0, 0)]), (("src/base.ml", 545, 17020, 17062), ("src/base.ml", 545, 17020, 17107), 0), 0, 0)], (("src/base.ml", 545, 17020, 17062), ("src/base.ml", 545, 17020, 17107), 0))]), (("src/base.ml", 545, 17020, 17043), ("src/base.ml", 545, 17020, 17108), 0))], 0, 0, Tag1 ("Base", 224)), 1, 0); (("compare_bytes", 21432), ((Tag1 (0, (Tag3 ((("bytes", 21431)), 0, (0)), 100000000, 0, -318), (Tag1 (0, (Tag3 ((("bytes", 21431)), 0, (0)), 100000000, 0, -317), (Tag3 ((("int", 21363)), 0, (0)), 100000000, 0, -316), 0), 100000000, 0, -315), 0), 100000000, 0, -314), 0, (("src/base.ml", 547, 17110, 17116), ("src/base.ml", 547, 17110, 17129), 0), 0, Tag1 ("Base", 225)), 0); (("equal_bytes", 21433), ((Tag1 (0, (Tag3 ((("bytes", 21431)), 0, (0)), 100000000, 0, -313), (Tag1 (0, (Tag3 ((("bytes", 21431)), 0, (0)), 100000000, 0, -312), (Tag3 ((("bool", 21334)), 0, (0)), 100000000, 0, -311), 0), 100000000, 0, -310), 0), 100000000, 0, -309), 0, (("src/base.ml", 548, 17172, 17178), ("src/base.ml", 548, 17172, 17189), 0), 0, Tag1 ("Base", 226)), 0); (("globalize_bytes", 21434), ((Tag1 (0, (Tag3 ((("bytes", 21431)), 0, (0)), 100000000, 0, -308), (Tag3 ((("bytes", 21431)), 0, (0)), 100000000, 0, -307), 0), 100000000, 0, -306), 0, (("src/base.ml", 550, 17232, 17239), ("src/base.ml", 550, 17232, 17254), 0), 0, Tag1 ("Base", 227)), 0); (("bytes_of_sexp", 21435), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -305), (Tag3 ((("bytes", 21431)), 0, (0)), 100000000, 0, -304), 0), 100000000, 0, -303), 0, (("src/base.ml", 554, 17352, 17358), ("src/base.ml", 554, 17352, 17371), 0), 0, Tag1 ("Base", 228)), 0); (("sexp_of_bytes", 21436), ((Tag1 (0, (Tag3 ((("bytes", 21431)), 0, (0)), 100000000, 0, -302), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -301), 0), 100000000, 0, -300), 0, (("src/base.ml", 555, 17419, 17425), ("src/base.ml", 555, 17419, 17438), 0), 0, Tag1 ("Base", 229)), 0); (("bytes_sexp_grammar", 21437), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("bytes", 21431)), 0, (0)), 100000000, 0, -299)], (0)), 100000000, 0, -298), 0, (("src/base.ml", 556, 17486, 17493), ("src/base.ml", 556, 17486, 17511), 0), 0, Tag1 ("Base", 230)), 0); Tag1 (("unit", 21438), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Unit", 21315)), "t"), 0, (0)), 100000000, 0, -297)), 0, 0, 0, 0, (("src/base.ml", 560, 17581, 17583), ("src/base.ml", 561, 17602, 17675), 0), [(("deriving_inline", (("src/base.ml", 561, 17602, 17607), ("src/base.ml", 561, 17602, 17622), 0)), ([([(Tag8 ([(((("compare"), (("src/base.ml", 561, 17602, 17623), ("src/base.ml", 561, 17602, 17630), 0))), (("src/base.ml", 561, 17602, 17623), ("src/base.ml", 561, 17602, 17630), 0), 0, 0); (((("equal"), (("src/base.ml", 561, 17602, 17632), ("src/base.ml", 561, 17602, 17637), 0))), (("src/base.ml", 561, 17602, 17632), ("src/base.ml", 561, 17602, 17637), 0), 0, 0); (((("globalize"), (("src/base.ml", 561, 17602, 17639), ("src/base.ml", 561, 17602, 17648), 0))), (("src/base.ml", 561, 17602, 17639), ("src/base.ml", 561, 17602, 17648), 0), 0, 0); (((("hash"), (("src/base.ml", 561, 17602, 17650), ("src/base.ml", 561, 17602, 17654), 0))), (("src/base.ml", 561, 17602, 17650), ("src/base.ml", 561, 17602, 17654), 0), 0, 0); (((("sexp"), (("src/base.ml", 561, 17602, 17656), ("src/base.ml", 561, 17602, 17660), 0))), (("src/base.ml", 561, 17602, 17656), ("src/base.ml", 561, 17602, 17660), 0), 0, 0); (((("sexp_grammar"), (("src/base.ml", 561, 17602, 17662), ("src/base.ml", 561, 17602, 17674), 0))), (("src/base.ml", 561, 17602, 17662), ("src/base.ml", 561, 17602, 17674), 0), 0, 0)]), (("src/base.ml", 561, 17602, 17623), ("src/base.ml", 561, 17602, 17674), 0), 0, 0)], (("src/base.ml", 561, 17602, 17623), ("src/base.ml", 561, 17602, 17674), 0))]), (("src/base.ml", 561, 17602, 17604), ("src/base.ml", 561, 17602, 17675), 0))], 1, 0, Tag1 ("Base", 231)), 1, 0); (("compare_unit", 21439), ((Tag1 (0, (Tag3 ((("unit", 21438)), 0, (0)), 100000000, 0, -296), (Tag1 (0, (Tag3 ((("unit", 21438)), 0, (0)), 100000000, 0, -295), (Tag3 ((("int", 21363)), 0, (0)), 100000000, 0, -294), 0), 100000000, 0, -293), 0), 100000000, 0, -292), 0, (("src/base.ml", 563, 17677, 17683), ("src/base.ml", 563, 17677, 17695), 0), 0, Tag1 ("Base", 232)), 0); (("equal_unit", 21440), ((Tag1 (0, (Tag3 ((("unit", 21438)), 0, (0)), 100000000, 0, -291), (Tag1 (0, (Tag3 ((("unit", 21438)), 0, (0)), 100000000, 0, -290), (Tag3 ((("bool", 21334)), 0, (0)), 100000000, 0, -289), 0), 100000000, 0, -288), 0), 100000000, 0, -287), 0, (("src/base.ml", 564, 17735, 17741), ("src/base.ml", 564, 17735, 17751), 0), 0, Tag1 ("Base", 233)), 0); (("globalize_unit", 21441), ((Tag1 (0, (Tag3 ((("unit", 21438)), 0, (0)), 100000000, 0, -286), (Tag3 ((("unit", 21438)), 0, (0)), 100000000, 0, -285), 0), 100000000, 0, -284), 0, (("src/base.ml", 566, 17791, 17798), ("src/base.ml", 566, 17791, 17812), 0), 0, Tag1 ("Base", 234)), 0); (("hash_fold_unit", 21442), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -283), (Tag1 (0, (Tag3 ((("unit", 21438)), 0, (0)), 100000000, 0, -282), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -281), 0), 100000000, 0, -280), 0), 100000000, 0, -279), 0, (("src/base.ml", 570, 17905, 17912), ("src/base.ml", 570, 17905, 17926), 0), 0, Tag1 ("Base", 235)), 0); (("hash_unit", 21443), ((Tag1 (0, (Tag3 ((("unit", 21438)), 0, (0)), 100000000, 0, -278), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "hash_value"), 0, (0)), 100000000, 0, -277), 0), 100000000, 0, -276), 0, (("src/base.ml", 575, 18034, 18041), ("src/base.ml", 575, 18034, 18050), 0), 0, Tag1 ("Base", 236)), 0); (("unit_of_sexp", 21444), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -275), (Tag3 ((("unit", 21438)), 0, (0)), 100000000, 0, -274), 0), 100000000, 0, -273), 0, (("src/base.ml", 580, 18151, 18157), ("src/base.ml", 580, 18151, 18169), 0), 0, Tag1 ("Base", 239)), 0); (("sexp_of_unit", 21445), ((Tag1 (0, (Tag3 ((("unit", 21438)), 0, (0)), 100000000, 0, -272), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -271), 0), 100000000, 0, -270), 0, (("src/base.ml", 581, 18215, 18221), ("src/base.ml", 581, 18215, 18233), 0), 0, Tag1 ("Base", 240)), 0); (("unit_sexp_grammar", 21446), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("unit", 21438)), 0, (0)), 100000000, 0, -269)], (0)), 100000000, 0, -268), 0, (("src/base.ml", 582, 18279, 18286), ("src/base.ml", 582, 18279, 18303), 0), 0, Tag1 ("Base", 241)), 0); Tag1 (("format", 21447), ([((("a")), 100000000, 0, -265); ((("b")), 100000000, 0, -266); ((("c")), 100000000, 0, -267)], 3, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "format"), [((("a")), 100000000, 0, -265); ((("b")), 100000000, 0, -266); ((("c")), 100000000, 0, -267)], (0)), 100000000, 0, -264)), [63; 15; 63], [0; 0; 0], 0, 0, (("src/base.ml", 588, 18394, 18396), ("src/base.ml", 588, 18394, 18449), 0), 0, 0, 0, Tag1 ("Base", 242)), 0, 0); Tag1 (("format4", 21448), ([((("a")), 100000000, 0, -260); ((("b")), 100000000, 0, -261); ((("c")), 100000000, 0, -262); ((("d")), 100000000, 0, -263)], 4, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "format4"), [((("a")), 100000000, 0, -260); ((("b")), 100000000, 0, -261); ((("c")), 100000000, 0, -262); ((("d")), 100000000, 0, -263)], (0)), 100000000, 0, -259)), [63; 15; 63; 15], [0; 0; 0; 0], 0, 0, (("src/base.ml", 589, 18450, 18452), ("src/base.ml", 589, 18450, 18515), 0), 0, 0, 0, Tag1 ("Base", 243)), 0, 0); Tag1 (("format6", 21449), ([((("a")), 100000000, 0, -253); ((("b")), 100000000, 0, -254); ((("c")), 100000000, 0, -255); ((("d")), 100000000, 0, -256); ((("e")), 100000000, 0, -257); ((("f")), 100000000, 0, -258)], 6, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "format6"), [((("a")), 100000000, 0, -253); ((("b")), 100000000, 0, -254); ((("c")), 100000000, 0, -255); ((("d")), 100000000, 0, -256); ((("e")), 100000000, 0, -257); ((("f")), 100000000, 0, -258)], (0)), 100000000, 0, -252)), [63; 15; 15; 63; 15; 15], [0; 0; 0; 0; 0; 0], 0, 0, (("src/base.ml", 590, 18516, 18518), ("src/base.ml", 590, 18516, 18597), 0), 0, 0, 0, Tag1 ("Base", 244)), 0, 0); (("@", 21450), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__List")), "t"), [((("a")), 100000000, 0, -249)], (0)), 100000000, 0, -251), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__List")), "t"), [((("a")), 100000000, 0, -249)], (0)), 100000000, 0, -250), (Tag3 (Tag1 ((Tag2 ("Base__List")), "t"), [((("a")), 100000000, 0, -249)], (0)), 100000000, 0, -248), 0), 100000000, 0, -247), 0), 100000000, 0, -246), 0, (("src/list.mli", 506, 20352, 20354), ("src/list.mli", 506, 20352, 20386), 0), 0, Tag1 ("Base__List", 124)), 0); (("+", 21451), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -245), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -244), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -243), 0), 100000000, 0, -242), 0), 100000000, 0, -241), (("%addint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 324, 9805, 9809), ("src/int_intf.ml", 324, 9805, 9877), 0), 0, Tag1 ("Base__Int_intf", 115)), 0); (("-", 21452), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -240), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -239), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -238), 0), 100000000, 0, -237), 0), 100000000, 0, -236), (("%subint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 325, 9878, 9882), ("src/int_intf.ml", 325, 9878, 9950), 0), 0, Tag1 ("Base__Int_intf", 116)), 0); (("*", 21453), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -235), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -234), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -233), 0), 100000000, 0, -232), 0), 100000000, 0, -231), (("%mulint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 326, 9951, 9955), ("src/int_intf.ml", 326, 9951, 10023), 0), 0, Tag1 ("Base__Int_intf", 117)), 0); (("/", 21454), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -230), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -229), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -228), 0), 100000000, 0, -227), 0), 100000000, 0, -226), (("%divint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 327, 10024, 10028), ("src/int_intf.ml", 327, 10024, 10096), 0), 0, Tag1 ("Base__Int_intf", 118)), 0); (("~-", 21455), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -225), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -224), 0), 100000000, 0, -223), (("%negint", 1, 1, "", [0], 0)), (("src/int_intf.ml", 328, 10097, 10101), ("src/int_intf.ml", 328, 10097, 10151), 0), 0, Tag1 ("Base__Int_intf", 119)), 0); (("**", 21456), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -222), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -221), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -220), 0), 100000000, 0, -219), 0), 100000000, 0, -218), 0, (("src/int_intf.ml", 329, 10152, 10156), ("src/int_intf.ml", 329, 10152, 10180), 0), 0, Tag1 ("Base__Int_intf", 120)), 0); (("land", 21457), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -217), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -216), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -215), 0), 100000000, 0, -214), 0), 100000000, 0, -213), (("%andint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 336, 10657, 10661), ("src/int_intf.ml", 336, 10657, 10732), 0), 0, Tag1 ("Base__Int_intf", 127)), 0); (("lor", 21458), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -212), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -211), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -210), 0), 100000000, 0, -209), 0), 100000000, 0, -208), (("%orint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 337, 10733, 10737), ("src/int_intf.ml", 337, 10733, 10806), 0), 0, Tag1 ("Base__Int_intf", 128)), 0); (("lxor", 21459), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -207), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -206), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -205), 0), 100000000, 0, -204), 0), 100000000, 0, -203), (("%xorint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 338, 10807, 10811), ("src/int_intf.ml", 338, 10807, 10882), 0), 0, Tag1 ("Base__Int_intf", 129)), 0); (("lnot", 21460), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -202), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -201), 0), 100000000, 0, -200), 0, (("src/int_intf.ml", 339, 10883, 10887), ("src/int_intf.ml", 339, 10883, 10904), 0), 0, Tag1 ("Base__Int_intf", 130)), 0); (("abs", 21461), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -199), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -198), 0), 100000000, 0, -197), 0, (("src/int_intf.ml", 340, 10905, 10909), ("src/int_intf.ml", 340, 10905, 10925), 0), 0, Tag1 ("Base__Int_intf", 131)), 0); (("neg", 21462), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -196), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -195), 0), 100000000, 0, -194), (("%negint", 1, 1, "", [0], 0)), (("src/int_intf.ml", 341, 10926, 10930), ("src/int_intf.ml", 341, 10926, 10977), 0), 0, Tag1 ("Base__Int_intf", 132)), 0); (("zero", 21463), ((Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -193), 0, (("src/int_intf.ml", 342, 10978, 10982), ("src/int_intf.ml", 342, 10978, 10994), 0), 0, Tag1 ("Base__Int_intf", 133)), 0); (("%", 21464), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -192), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -191), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -190), 0), 100000000, 0, -189), 0), 100000000, 0, -188), 0, (("src/int_intf.ml", 343, 10995, 10999), ("src/int_intf.ml", 343, 10995, 11022), 0), 0, Tag1 ("Base__Int_intf", 134)), 0); (("/%", 21465), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -187), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -186), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -185), 0), 100000000, 0, -184), 0), 100000000, 0, -183), 0, (("src/int_intf.ml", 344, 11023, 11027), ("src/int_intf.ml", 344, 11023, 11051), 0), 0, Tag1 ("Base__Int_intf", 135)), 0); (("//", 21466), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -182), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -181), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -180), 0), 100000000, 0, -179), 0), 100000000, 0, -178), 0, (("src/int_intf.ml", 345, 11052, 11056), ("src/int_intf.ml", 345, 11052, 11084), 0), 0, Tag1 ("Base__Int_intf", 136)), 0); (("lsl", 21467), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -177), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -176), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -175), 0), 100000000, 0, -174), 0), 100000000, 0, -173), (("%lslint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 346, 11085, 11089), ("src/int_intf.ml", 346, 11085, 11161), 0), 0, Tag1 ("Base__Int_intf", 137)), 0); (("asr", 21468), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -172), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -171), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -170), 0), 100000000, 0, -169), 0), 100000000, 0, -168), (("%asrint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 347, 11162, 11166), ("src/int_intf.ml", 347, 11162, 11238), 0), 0, Tag1 ("Base__Int_intf", 138)), 0); (("lsr", 21469), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -167), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -166), (Tag3 (Tag1 ((Tag2 ("Base__Int")), "t"), 0, (0)), 100000000, 0, -165), 0), 100000000, 0, -164), 0), 100000000, 0, -163), (("%lsrint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 348, 11239, 11243), ("src/int_intf.ml", 348, 11239, 11315), 0), 0, Tag1 ("Base__Int_intf", 139)), 0); (("=", 21470), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -162), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -161), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -160), 0), 100000000, 0, -159), 0), 100000000, 0, -158), (("%equal", 2, 1, "", [0; 0], 0)), (("src/import0.ml", 83, 3143, 3145), ("src/import0.ml", 83, 3143, 3219), 0), 0, Tag1 ("Base__Import0", 25)), 0); (("<>", 21471), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -157), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -156), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -155), 0), 100000000, 0, -154), 0), 100000000, 0, -153), (("%notequal", 2, 1, "", [0; 0], 0)), (("src/import0.ml", 84, 3220, 3222), ("src/import0.ml", 84, 3220, 3300), 0), 0, Tag1 ("Base__Import0", 26)), 0); (("<", 21472), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -152), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -151), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -150), 0), 100000000, 0, -149), 0), 100000000, 0, -148), (("%lessthan", 2, 1, "", [0; 0], 0)), (("src/import0.ml", 85, 3301, 3303), ("src/import0.ml", 85, 3301, 3380), 0), 0, Tag1 ("Base__Import0", 27)), 0); ((">", 21473), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -147), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -146), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -145), 0), 100000000, 0, -144), 0), 100000000, 0, -143), (("%greaterthan", 2, 1, "", [0; 0], 0)), (("src/import0.ml", 86, 3381, 3383), ("src/import0.ml", 86, 3381, 3463), 0), 0, Tag1 ("Base__Import0", 28)), 0); (("<=", 21474), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -142), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -141), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -140), 0), 100000000, 0, -139), 0), 100000000, 0, -138), (("%lessequal", 2, 1, "", [0; 0], 0)), (("src/import0.ml", 87, 3464, 3466), ("src/import0.ml", 87, 3464, 3545), 0), 0, Tag1 ("Base__Import0", 29)), 0); ((">=", 21475), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -137), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -136), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -135), 0), 100000000, 0, -134), 0), 100000000, 0, -133), (("%greaterequal", 2, 1, "", [0; 0], 0)), (("src/import0.ml", 88, 3546, 3548), ("src/import0.ml", 88, 3546, 3630), 0), 0, Tag1 ("Base__Import0", 30)), 0); (("compare", 21476), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -132), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -131), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -130), 0), 100000000, 0, -129), 0), 100000000, 0, -128), (("%compare", 2, 1, "", [0; 0], 0)), (("src/import0.ml", 89, 3631, 3633), ("src/import0.ml", 89, 3631, 3710), 0), 0, Tag1 ("Base__Import0", 31)), 0); (("equal", 21477), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -127), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -126), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -125), 0), 100000000, 0, -124), 0), 100000000, 0, -123), (("%equal", 2, 1, "", [0; 0], 0)), (("src/import0.ml", 90, 3711, 3713), ("src/import0.ml", 90, 3711, 3787), 0), 0, Tag1 ("Base__Import0", 32)), 0); (("ascending", 21478), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -122), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -121), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -120), 0), 100000000, 0, -119), 0), 100000000, 0, -118), 0, (("src/import0.ml", 92, 3789, 3795), ("src/import0.ml", 92, 3789, 3804), 0), 0, Tag1 ("Base__Import0", 33)), 0); (("descending", 21479), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -117), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -116), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -115), 0), 100000000, 0, -114), 0), 100000000, 0, -113), 0, (("src/import0.ml", 93, 3831, 3837), ("src/import0.ml", 93, 3831, 3847), 0), 0, Tag1 ("Base__Import0", 36)), 0); (("max", 21480), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -112), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -111), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -111), 0), 100000000, 0, -110), 0), 100000000, 0, -109), 0, (("src/import0.ml", 94, 3874, 3880), ("src/import0.ml", 94, 3874, 3883), 0), 0, Tag1 ("Base__Import0", 39)), 0); (("min", 21481), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -108), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -107), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -107), 0), 100000000, 0, -106), 0), 100000000, 0, -105), 0, (("src/import0.ml", 95, 3924, 3930), ("src/import0.ml", 95, 3924, 3933), 0), 0, Tag1 ("Base__Import0", 42)), 0); (("+.", 21482), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -104), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -103), (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -102), 0), 100000000, 0, -101), 0), 100000000, 0, -100), 0, (("src/float.mli", 338, 10833, 10835), ("src/float.mli", 338, 10833, 10859), 0), 0, Tag1 ("Base__Float", 99)), 0); (("-.", 21483), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -99), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -98), (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -97), 0), 100000000, 0, -96), 0), 100000000, 0, -95), 0, (("src/float.mli", 339, 10860, 10862), ("src/float.mli", 339, 10860, 10886), 0), 0, Tag1 ("Base__Float", 100)), 0); (("*.", 21484), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -94), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -93), (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -92), 0), 100000000, 0, -91), 0), 100000000, 0, -90), 0, (("src/float.mli", 340, 10887, 10889), ("src/float.mli", 340, 10887, 10913), 0), 0, Tag1 ("Base__Float", 101)), 0); (("/.", 21485), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -89), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -88), (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -87), 0), 100000000, 0, -86), 0), 100000000, 0, -85), 0, (("src/float.mli", 341, 10914, 10916), ("src/float.mli", 341, 10914, 10940), 0), 0, Tag1 ("Base__Float", 102)), 0); (("%.", 21486), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -84), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -83), (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -82), 0), 100000000, 0, -81), 0), 100000000, 0, -80), 0, (("src/float.mli", 342, 10941, 10943), ("src/float.mli", 342, 10941, 10967), 0), 0, Tag1 ("Base__Float", 103)), 0); (("**.", 21487), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -79), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -78), (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -77), 0), 100000000, 0, -76), 0), 100000000, 0, -75), 0, (("src/float.mli", 343, 10968, 10970), ("src/float.mli", 343, 10968, 10995), 0), 0, Tag1 ("Base__Float", 104)), 0); (("~-.", 21488), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -74), (Tag3 (Tag1 ((Tag2 ("Base__Float")), "t"), 0, (0)), 100000000, 0, -73), 0), 100000000, 0, -72), 0, (("src/float.mli", 344, 10996, 10998), ("src/float.mli", 344, 10996, 11018), 0), 0, Tag1 ("Base__Float", 105)), 0); (("|>", 21489), ((Tag1 (0, ((("a")), 100000000, 0, -71), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -71), ((("b")), 100000000, 0, -69), 0), 100000000, 0, -70), ((("b")), 100000000, 0, -69), 0), 100000000, 0, -68), 0), 100000000, 0, -67), (("%revapply", 2, 1, "", [0; 0], 0)), (("src/base.ml", 608, 18957, 18959), ("src/base.ml", 608, 18957, 19027), 0), 0, Tag1 ("Base", 245)), 0); (("@@", 21490), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -65), ((("b")), 100000000, 0, -64), 0), 100000000, 0, -66), (Tag1 (0, ((("a")), 100000000, 0, -65), ((("b")), 100000000, 0, -64), 0), 100000000, 0, -63), 0), 100000000, 0, -62), (("%apply", 2, 1, "", [0; 0], 0)), (("src/base.ml", 611, 19104, 19106), ("src/base.ml", 611, 19104, 19171), 0), 0, Tag1 ("Base", 246)), 0); (("&&", 21491), ((Tag1 (0, (Tag3 ((("bool", 21334)), 0, (0)), 100000000, 0, -61), (Tag1 (0, (Tag3 ((("bool", 21334)), 0, (0)), 100000000, 0, -60), (Tag3 ((("bool", 21334)), 0, (0)), 100000000, 0, -59), 0), 100000000, 0, -58), 0), 100000000, 0, -57), (("%sequand", 2, 1, "", [0; 0], 0)), (("src/base.ml", 616, 19276, 19278), ("src/base.ml", 616, 19276, 19357), 0), 0, Tag1 ("Base", 247)), 0); (("||", 21492), ((Tag1 (0, (Tag3 ((("bool", 21334)), 0, (0)), 100000000, 0, -56), (Tag1 (0, (Tag3 ((("bool", 21334)), 0, (0)), 100000000, 0, -55), (Tag3 ((("bool", 21334)), 0, (0)), 100000000, 0, -54), 0), 100000000, 0, -53), 0), 100000000, 0, -52), (("%sequor", 2, 1, "", [0; 0], 0)), (("src/base.ml", 617, 19358, 19360), ("src/base.ml", 617, 19358, 19438), 0), 0, Tag1 ("Base", 248)), 0); (("not", 21493), ((Tag1 (0, (Tag3 ((("bool", 21334)), 0, (0)), 100000000, 0, -51), (Tag3 ((("bool", 21334)), 0, (0)), 100000000, 0, -50), 0), 100000000, 0, -49), (("%boolnot", 1, 1, "", [0], 0)), (("src/base.ml", 618, 19439, 19441), ("src/base.ml", 618, 19439, 19495), 0), 0, Tag1 ("Base", 249)), 0); (("ignore", 21494), ((Tag1 (0, ((0), 100000000, 0, -48), (Tag3 ((("unit", 21438)), 0, (0)), 100000000, 0, -47), 0), 100000000, 0, -46), (("%ignore", 1, 1, "", [0], 0)), (("src/base.ml", 621, 19577, 19579), ("src/base.ml", 621, 19577, 19632), 0), 0, Tag1 ("Base", 250)), 0); (("^", 21495), ((Tag1 (0, (Tag3 (Tag1 ((("String", 21309)), "t"), 0, (0)), 100000000, 0, -45), (Tag1 (0, (Tag3 (Tag1 ((("String", 21309)), "t"), 0, (0)), 100000000, 0, -44), (Tag3 (Tag1 ((("String", 21309)), "t"), 0, (0)), 100000000, 0, -43), 0), 100000000, 0, -42), 0), 100000000, 0, -41), 0, (("src/base.ml", 624, 19668, 19674), ("src/base.ml", 624, 19668, 19679), 0), 0, Tag1 ("Base", 251)), 0); (("!", 21496), ((Tag1 (0, (Tag3 ((("ref", 21415)), [((("a")), 100000000, 0, -39)], (0)), 100000000, 0, -40), ((("a")), 100000000, 0, -39), 0), 100000000, 0, -38), (("%field0", 1, 1, "", [0], 0)), (("src/base.ml", 630, 19861, 19863), ("src/base.ml", 630, 19861, 19918), 0), 0, Tag1 ("Base", 252)), 0); (("ref", 21497), ((Tag1 (0, ((("a")), 100000000, 0, -37), (Tag3 ((("ref", 21415)), [((("a")), 100000000, 0, -37)], (0)), 100000000, 0, -36), 0), 100000000, 0, -35), (("%makemutable", 1, 1, "", [0], 0)), (("src/base.ml", 631, 19919, 19921), ("src/base.ml", 631, 19919, 19979), 0), 0, Tag1 ("Base", 253)), 0); ((":=", 21498), ((Tag1 (0, (Tag3 ((("ref", 21415)), [((("a")), 100000000, 0, -33)], (0)), 100000000, 0, -34), (Tag1 (0, ((("a")), 100000000, 0, -33), (Tag3 ((("unit", 21438)), 0, (0)), 100000000, 0, -32), 0), 100000000, 0, -31), 0), 100000000, 0, -30), (("%setfield0", 2, 1, "", [0; 0], 0)), (("src/base.ml", 632, 19980, 19982), ("src/base.ml", 632, 19980, 20049), 0), 0, Tag1 ("Base", 254)), 0); (("fst", 21499), ((Tag1 (0, (Tag2 ([((0), 100000000, 0, -27); ((0), 100000000, 0, -29)]), 100000000, 0, -28), ((0), 100000000, 0, -27), 0), 100000000, 0, -26), 0, (("src/base.ml", 636, 20077, 20083), ("src/base.ml", 636, 20077, 20086), 0), 0, Tag1 ("Base", 255)), 0); (("snd", 21500), ((Tag1 (0, (Tag2 ([((0), 100000000, 0, -25); ((0), 100000000, 0, -23)]), 100000000, 0, -24), ((0), 100000000, 0, -23), 0), 100000000, 0, -22), 0, (("src/base.ml", 637, 20093, 20099), ("src/base.ml", 637, 20093, 20102), 0), 0, Tag1 ("Base", 256)), 0); (("raise", 21501), ((Tag1 (0, (Tag3 ((("exn", 21352)), 0, (0)), 100000000, 0, -21), ((0), 100000000, 0, -20), 0), 100000000, 0, -19), (("%raise", 1, 1, "", [0], 0)), (("src/base.ml", 642, 20226, 20228), ("src/base.ml", 642, 20226, 20264), 0), 0, Tag1 ("Base", 257)), 0); (("failwith", 21502), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -18), ((0), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("src/base.ml", 644, 20266, 20272), ("src/base.ml", 644, 20266, 20280), 0), 0, Tag1 ("Base", 258)), 0); (("invalid_arg", 21503), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -15), ((0), 100000000, 0, -14), 0), 100000000, 0, -13), 0, (("src/base.ml", 645, 20292, 20298), ("src/base.ml", 645, 20292, 20309), 0), 0, Tag1 ("Base", 259)), 0); (("raise_s", 21504), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -12), ((0), 100000000, 0, -11), 0), 100000000, 0, -10), 0, (("src/base.ml", 646, 20324, 20330), ("src/base.ml", 646, 20324, 20337), 0), 0, Tag1 ("Base", 260)), 0); (("phys_equal", 21505), ((Tag1 (0, ((("a")), 100000000, 0, -9), (Tag1 (0, ((("a")), 100000000, 0, -9), (Tag3 ((("bool", 21334)), 0, (0)), 100000000, 0, -8), 0), 100000000, 0, -7), 0), 100000000, 0, -6), (("%eq", 2, 1, "", [0; 0], 0)), (("src/base.ml", 650, 20370, 20372), ("src/base.ml", 650, 20370, 20446), 0), 0, Tag1 ("Base", 261)), 0); (("force", 21506), ((Tag1 (0, (Tag3 (Tag1 ((("Lazy", 21280)), "t"), [((("a")), 100000000, 0, -4)], (0)), 100000000, 0, -5), ((("a")), 100000000, 0, -4), 0), 100000000, 0, -3), (("%lazy_force", 1, 1, "", [0], 0)), (("src/base.ml", 651, 20447, 20449), ("src/base.ml", 651, 20447, 20511), 0), 0, Tag1 ("Base", 262)), 0); Tag3 (("Continue_or_stop", 21507), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Container_intf")), "Export"), "Continue_or_stop")), 0, (("src/container_intf.ml", 16, 623, 625), ("src/container_intf.ml", 20, 722, 727), 0), Tag1 ("Base__Container_intf", 3)), 0, 0); Tag2 (("Not_found_s", 21508), ((Tag3 ("exn", 7)), 0, ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -2)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Base", 264)), 2, 0)], "Base", [("Base", ("\167SY\027Q9E\005r,\198\164\161\023\170\151")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__StringLabels", ("\134F\024\226\216Is#\223\230\234\169Z\206Gc")); ("Stdlib__StdLabels", (".\193\n\229\139\017\212C-ZA\\kz-\128")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Printf", ("\215<\139]\021\142\224E\245m\198qc(W\229")); ("Stdlib__Printexc", ("\217u\168\235\179oi\167\235\255\025\017%d\192s")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__MoreLabels", ("\248\232\248\254`<\230\241\161U\193U\1466J\238")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__ListLabels", ("*\194\012\191\020%\170\249m\002\180\178hk\205\220")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shadow_stdlib", ("\219zi\164\203\158e)\232\221\196\168\138x\142\018")); ("Sexplib0__Sexpable", ("\251${\207(\249/z\242\255\250^\141\156\210e")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv_error", ("kzv!\151~\198P\000\165\176d\007\251p\232")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Base_internalhash_types", ("0\148#2\226\223\018\135\173>!\020\237\017\255\149")); ("Base__Unit", ("\247\n\178\171]m\169\231\139\171\148\189\254\236l'")); ("Base__T", ("+t\159\169\027\152\205\235\003\237\133\177\024\n6'")); ("Base__Sys0", ("\206z\231\154s\\\136\2364\131\005\014\031\152m3")); ("Base__Stringable", ("\170\025\162\136\234\162\n\161\1491>\145\210@\237t")); ("Base__String0", ("\212\221L\220\245\255\162P\228\224\189\216\135H\149O")); ("Base__String", ("|q\181\r\14787\130\127\191\025\137\203\217\250\196")); ("Base__Staged", ("\203J\011+\249\0115\1338\023\209\142\159\240V.")); ("Base__Source_code_position0", ("_\003P6\254\029\206\005\130\136\180\019\145\230\000M")); ("Base__Sign_or_nan", ("\2287\251,\197\017qf\179Y\025h\190\131W%")); ("Base__Sign0", ("\152\138\204\175\244\128J\165\221\165\160\150y\1305i")); ("Base__Sign", ("^\255.Q;\215fi\134\192\182\241Z\2425l")); ("Base__Sexpable", ("\155?\169\178\246\242*\232\206\018Y\174\203h\217i")); ("Base__Sexp_with_comparable", ("\171\173\137y\1855\006y\146\248\141@@\191[W")); ("Base__Sexp", ("\154\187\171&\209=\153[\236\250!U\174`\190T")); ("Base__Sequence", ("{L\140\211\223\183\000\030\151\247FnY\196\210\201")); ("Base__Result", ("\204|\215\173FMa\2511<&\215T\194$\228")); ("Base__Ref", ("\250\254R\158s\203c\0025\029I6\149\179s\158")); ("Base__Random", (" \216\153fc\243\1430\155\211\169?\022\\\231\011")); ("Base__Printf", ("\000\196c,\214\127\226\174\220\190\253z!\242\028\250")); ("Base__Pretty_printer", ("\175\005\031\018\015a\159\220\154c'(a\239j\233")); ("Base__Ppx_hash_lib", ("\199\141\178\193\006\209L\007^\020(\131\224sn8")); ("Base__Ppx_enumerate_lib", ("G\171\178\012Em\142\235@\152fg\020\140~(")); ("Base__Ppx_compare_lib", ("\243\186~\233\228\199Ah\181.\223\004e\231\129S")); ("Base__Poly0", ("\230;\143\234\255.H\132KOe7\155\\\023f")); ("Base__Or_error", ("\193\133)\bO\210\2517\168*\203\148\143\200\127\177")); ("Base__Option", ("\242!\176\142\168\247\163Jg\0254\180\224\\A\210")); ("Base__Nativeint", ("\252/\181U\214\229\029?.\130\145\237\"qFj")); ("Base__Monad_intf", ("\208\203\163\152\184O\130?\012:\168\247}\018\253\155")); ("Base__Monad", ("!\244\168\2352=\137Lm\219\129K\216\199\145\\")); ("Base__List", ("}\029h\158/\153\229\161]0\224Y\003Z\250\210")); ("Base__Lazy", ("@`\165\196 \235)\136ANe:p\169$\185")); ("Base__Invariant_intf", ("\213\204\238\235\236[\198\145\028\2392\015\243\177S\249")); ("Base__Invariant", ("\135\153\136\\\129SD\228\202l\255\152\139\253\015\201")); ("Base__Intable", ("\028\249=Y\003]\231qd\238\172\004b\170\142\255")); ("Base__Int_intf", ("\238Q\2457\239\156\018\183J\015\240\178\193b\166@")); ("Base__Int64", ("\252B\186\239\245\155\209\227\136CIX@\189\003\029")); ("Base__Int63_emul", ("'\210s\232\177\204\254\024C\215\014\231\210\227n\235")); ("Base__Int63", ("\165\016\236\214m\014a\226A{\191\235@O\1695")); ("Base__Int32", ("\244*\172\133\227\025$@\180\027\024\132\195yO\027")); ("Base__Int0", ("N\1310\012\227\254\000\255_\222!\018\016\003\1779")); ("Base__Int", ("\165Z\179\140\230$\131\175\209\172\214\"\170\214{\250")); ("Base__Info_intf", ("\184\209'\173\251\219\167X|v\188]\190o5X")); ("Base__Info", ("-\011\149\203\248\030\2301\1907\1630\189\128\209\170")); ("Base__Indexed_container_intf", ("\179\2213\145j\\\136\tl2\240\006\188j$r")); ("Base__Indexed_container", ("\196\246\213\141\196d\130\002\232\162\144y\149\236\145\218")); ("Base__Import0", ("\156\129U\197Y[\\\153\017Ho\203\173\204\220\020")); ("Base__Import", ("\014\187\247\141\187\181\142g\176:s_,\181\219\209")); ("Base__Identifiable_intf", ("hK7}\187\129\022-r\233\241\192Q\161=j")); ("Base__Identifiable", ("L\020\162\189\228\217^\171\158H_\157\164c\130\242")); ("Base__Hashable_intf", ("\128\015G\244\135R\026\202\128F?)\193\004\195\181")); ("Base__Hashable", ("\027\187\158\245r}\018\193dbq\196\005\170g\252")); ("Base__Hash_intf", ("h\004P\218\1531G\127\212\208A\024\140\164iq")); ("Base__Hash", ("\206Rc\194\234{s3\248\165\024\162\203{\206\206")); ("Base__Globalize", ("<\243w~.\180\196t\159\193\174[\227\139\215G")); ("Base__Formatter", ("\193\149\030\140\154\1505b\162a`%\243\185'%")); ("Base__Floatable", ("\239\176\151\139\173ft(q\190\205\030C\170\197\177")); ("Base__Float", ("tR$\252\165\134g\024>\127\254\245\212-\018\141")); ("Base__Field", ("8In\234X\202\188G\186\208$\192\175\136\214v")); ("Base__Exn", ("?\191\202\221\228\185\154\127\240\191o\134\020\186b\173")); ("Base__Error", ("\199\218\231n\155/\159\156\146\247\148t\237\003\t\153")); ("Base__Equal", ("\193\217Z\127he\141N\000\1447\030\236%\131\b")); ("Base__Either0", ("!9-\011n\2077eZ\212\031c\227\029\206\t")); ("Base__Container_intf", ("\170vo*\208\209\141\219\196\168\236l\016\246\012c")); ("Base__Container", ("\191|>_\153W\235M\180uKz\214w`q")); ("Base__Comparisons", ("\196\196Y\"{\163~)\\G/\155:\004\141;")); ("Base__Comparator", ("\002\135z7b\025&\207\t\188\239&U3R\167")); ("Base__Comparable_intf", ("\252n\002\221\246\143r\235oJ\240\151\202\211\161\254")); ("Base__Comparable", (":\134'\156u#\215\225\129\191\162\229\200\185l\012")); ("Base__Char", ("\206\224\186\000'\157$\023\023\190\198{\250\141a\216")); ("Base__Bytes", ("\028\001\232X(\240\139\227s\152\156\138\023\030\r\188")); ("Base__Bool0", ("\177f\254p\023\143&\239\020\136\206\242~\018F\251")); ("Base__Bool", ("\162+\012Rx\183c\226\131\190@Z\016q\138@")); ("Base__Blit_intf", ("\171\129\t\214\130\131O\210\251F\228.\168\004Vo")); ("Base__Blit", ("}g\242\161\000\216\132\220\195\230C\002jg\234j")); ("Base__Binary_searchable_intf", ("/\213\237\209\200\192$w\158\234\169\148\012\221W\019")); ("Base__Binary_searchable", ("V\022B_\233\194\145K\248\233\025\175U\155i\197")); ("Base__Backtrace", ("\212~\253E\024|\228\141\015\169\012\006\022\0065\181")); ("Base__Array", ("P\252F\172\242{\241\226#uu\207\2068\218\015")); ("Base__Applicative_intf", ("J\176\203\159\235N(\235\027\232\198+\224\205*A")); ("Base__Applicative", ("\157\024\176\241a\165\204\133\003s3\214\007\131\244\n")); ("Base__", ("p\252\007\139\128\163W\025+\0225\001\246|P\158"))], [(0)])
exception Not_found_s of Sexplib0.Sexp.t

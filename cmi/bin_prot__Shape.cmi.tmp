type t = Bin_shape.t
val sexp_of_t : t -> Sexplib0.Sexp.t
module Tid = Bin_shape.Tid
module Vid = Bin_shape.Vid
module Location = Bin_shape.Location
module Uuid = Bin_shape.Uuid
type group = Bin_shape.group
val group : Location.t -> (Tid.t * Vid.t list * t) list -> group
val tuple : t list -> t
val record : (string * t) list -> t
val variant : (string * t list) list -> t
type poly_variant_row = Bin_shape.poly_variant_row
val constr : string -> t option -> poly_variant_row
val inherit_ : Location.t -> t -> poly_variant_row
val poly_variant : Location.t -> poly_variant_row list -> t
val rec_app : Tid.t -> t list -> t
val top_app : group -> Tid.t -> t list -> t
val var : Location.t -> Vid.t -> t
val basetype : Uuid.t -> t list -> t
val annotate : Uuid.t -> t -> t
module Stable = Bin_shape.Stable
module Digest = Bin_shape.Digest
module Expert = Bin_shape.Expert
module Canonical = Bin_shape.Canonical
val eval : t -> Canonical.t
val eval_to_digest : t -> Digest.t
val eval_to_digest_string : t -> string
module For_typerep = Bin_shape.For_typerep
val bin_shape_unit : t
val bin_shape_bool : t
val bin_shape_string : t
val bin_shape_bytes : t
val bin_shape_char : t
val bin_shape_float : t
val bin_shape_int : t
val bin_shape_int32 : t
val bin_shape_int63 : t
val bin_shape_int64 : t
val bin_shape_nativeint : t
val bin_shape_nat0 : t
val bin_shape_digest : t
val bin_shape_float32_vec : t
val bin_shape_float64_vec : t
val bin_shape_vec : t
val bin_shape_float32_mat : t
val bin_shape_float64_mat : t
val bin_shape_mat : t
val bin_shape_bigstring : t
val bin_shape_floatarray : t
val bin_shape_variant_int : t
val bin_shape_int_8bit : t
val bin_shape_int_16bit : t
val bin_shape_int_32bit : t
val bin_shape_int_64bit : t
val bin_shape_int64_bits : t
val bin_shape_network16_int : t
val bin_shape_network32_int : t
val bin_shape_network32_int32 : t
val bin_shape_network64_int : t
val bin_shape_network64_int64 : t
val bin_shape_ref : t -> t
val bin_shape_option : t -> t
val bin_shape_list : t -> t
val bin_shape_array : t -> t
val bin_shape_hashtbl : t -> t -> t
val bin_shape_lazy : t -> t
val bin_shape_pair : t -> t -> t("DEBUG:rule", [Tag1 (("t", 434), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Bin_shape")), "t"), 0, (0)), 100000000, 0, -154)), 0, 0, 0, 0, (("shape/src/bin_shape.mli", 7, 290, 290), ("shape/src/bin_shape.mli", 7, 290, 317), 0), [(("deriving", (("shape/src/bin_shape.mli", 7, 290, 300), ("shape/src/bin_shape.mli", 7, 290, 308), 0)), ([([(((("sexp_of"), (("shape/src/bin_shape.mli", 7, 290, 309), ("shape/src/bin_shape.mli", 7, 290, 316), 0))), (("shape/src/bin_shape.mli", 7, 290, 309), ("shape/src/bin_shape.mli", 7, 290, 316), 0), 0, 0)], (("shape/src/bin_shape.mli", 7, 290, 309), ("shape/src/bin_shape.mli", 7, 290, 316), 0))]), (("shape/src/bin_shape.mli", 7, 290, 297), ("shape/src/bin_shape.mli", 7, 290, 317), 0))], 0, 0, Tag1 ("Bin_shape", 0)), 1, 0); (("sexp_of_t", 435), ((Tag1 (0, (Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -153), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -152), 0), 100000000, 0, -151), 0, (("shape/src/bin_shape.mli", 7, 290, 290), ("shape/src/bin_shape.mli", 7, 290, 317), 0), 0, Tag1 ("Bin_shape", 1)), 0); Tag3 (("Tid", 436), 1, (Tag3 (Tag1 ((Tag2 ("Bin_shape")), "Tid")), 0, (("shape/src/bin_shape.mli", 12, 430, 430), ("shape/src/bin_shape.mli", 17, 499, 502), 0), Tag1 ("Bin_shape", 4)), 0, 0); Tag3 (("Vid", 437), 1, (Tag3 (Tag1 ((Tag2 ("Bin_shape")), "Vid")), 0, (("shape/src/bin_shape.mli", 19, 504, 504), ("shape/src/bin_shape.mli", 24, 574, 577), 0), Tag1 ("Bin_shape", 7)), 0, 0); Tag3 (("Location", 438), 1, (Tag3 (Tag1 ((Tag2 ("Bin_shape")), "Location")), 0, (("shape/src/bin_shape.mli", 27, 669, 669), ("shape/src/bin_shape.mli", 31, 731, 734), 0), Tag1 ("Bin_shape", 10)), 0, 0); Tag3 (("Uuid", 439), 1, (Tag3 (Tag1 ((Tag2 ("Bin_shape")), "Uuid")), 0, (("shape/src/bin_shape.mli", 34, 790, 790), ("shape/src/bin_shape.mli", 44, 1156, 1159), 0), Tag1 ("Bin_shape", 14)), 0, 0); Tag1 (("group", 440), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Bin_shape")), "group"), 0, (0)), 100000000, 0, -150)), 0, 0, 0, 0, (("shape/src/bin_shape.mli", 47, 1213, 1213), ("shape/src/bin_shape.mli", 47, 1213, 1223), 0), 0, 0, 0, Tag1 ("Bin_shape", 15)), 1, 0); (("group", 441), ((Tag1 (0, (Tag3 (Tag1 ((("Location", 438)), "t"), 0, (0)), 100000000, 0, -149), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((("Tid", 436)), "t"), 0, (0)), 100000000, 0, -145); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Vid", 437)), "t"), 0, (0)), 100000000, 0, -147)], (0)), 100000000, 0, -146); (Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -148)]), 100000000, 0, -144)], (0)), 100000000, 0, -143), (Tag3 ((("group", 440)), 0, (0)), 100000000, 0, -142), 0), 100000000, 0, -141), 0), 100000000, 0, -140), 0, (("shape/src/bin_shape.mli", 50, 1299, 1299), ("shape/src/bin_shape.mli", 50, 1299, 1363), 0), 0, Tag1 ("Bin_shape", 16)), 0); (("tuple", 442), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -139)], (0)), 100000000, 0, -138), (Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -137), 0), 100000000, 0, -136), 0, (("shape/src/bin_shape.mli", 52, 1365, 1365), ("shape/src/bin_shape.mli", 52, 1365, 1388), 0), 0, Tag1 ("Bin_shape", 17)), 0); (("record", 443), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -134); (Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -135)]), 100000000, 0, -133)], (0)), 100000000, 0, -132), (Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -131), 0), 100000000, 0, -130), 0, (("shape/src/bin_shape.mli", 53, 1389, 1389), ("shape/src/bin_shape.mli", 53, 1389, 1424), 0), 0, Tag1 ("Bin_shape", 18)), 0); (("variant", 444), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -127); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -129)], (0)), 100000000, 0, -128)]), 100000000, 0, -126)], (0)), 100000000, 0, -125), (Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -124), 0), 100000000, 0, -123), 0, (("shape/src/bin_shape.mli", 54, 1425, 1425), ("shape/src/bin_shape.mli", 54, 1425, 1466), 0), 0, Tag1 ("Bin_shape", 19)), 0); Tag1 (("poly_variant_row", 445), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Bin_shape")), "poly_variant_row"), 0, (0)), 100000000, 0, -122)), 0, 0, 0, 0, (("shape/src/bin_shape.mli", 56, 1468, 1468), ("shape/src/bin_shape.mli", 56, 1468, 1489), 0), 0, 0, 0, Tag1 ("Bin_shape", 20)), 1, 0); (("constr", 446), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -121), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -120)], (0)), 100000000, 0, -119), (Tag3 ((("poly_variant_row", 445)), 0, (0)), 100000000, 0, -118), 0), 100000000, 0, -117), 0), 100000000, 0, -116), 0, (("shape/src/bin_shape.mli", 58, 1491, 1491), ("shape/src/bin_shape.mli", 58, 1491, 1542), 0), 0, Tag1 ("Bin_shape", 21)), 0); (("inherit_", 447), ((Tag1 (0, (Tag3 (Tag1 ((("Location", 438)), "t"), 0, (0)), 100000000, 0, -115), (Tag1 (0, (Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -114), (Tag3 ((("poly_variant_row", 445)), 0, (0)), 100000000, 0, -113), 0), 100000000, 0, -112), 0), 100000000, 0, -111), 0, (("shape/src/bin_shape.mli", 59, 1543, 1543), ("shape/src/bin_shape.mli", 59, 1543, 1593), 0), 0, Tag1 ("Bin_shape", 22)), 0); (("poly_variant", 448), ((Tag1 (0, (Tag3 (Tag1 ((("Location", 438)), "t"), 0, (0)), 100000000, 0, -110), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("poly_variant_row", 445)), 0, (0)), 100000000, 0, -109)], (0)), 100000000, 0, -108), (Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -107), 0), 100000000, 0, -106), 0), 100000000, 0, -105), 0, (("shape/src/bin_shape.mli", 60, 1594, 1594), ("shape/src/bin_shape.mli", 60, 1594, 1653), 0), 0, Tag1 ("Bin_shape", 23)), 0); (("rec_app", 449), ((Tag1 (0, (Tag3 (Tag1 ((("Tid", 436)), "t"), 0, (0)), 100000000, 0, -104), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -103)], (0)), 100000000, 0, -102), (Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -101), 0), 100000000, 0, -100), 0), 100000000, 0, -99), 0, (("shape/src/bin_shape.mli", 63, 1702, 1702), ("shape/src/bin_shape.mli", 63, 1702, 1736), 0), 0, Tag1 ("Bin_shape", 24)), 0); (("top_app", 450), ((Tag1 (0, (Tag3 ((("group", 440)), 0, (0)), 100000000, 0, -98), (Tag1 (0, (Tag3 (Tag1 ((("Tid", 436)), "t"), 0, (0)), 100000000, 0, -97), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -96)], (0)), 100000000, 0, -95), (Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -94), 0), 100000000, 0, -93), 0), 100000000, 0, -92), 0), 100000000, 0, -91), 0, (("shape/src/bin_shape.mli", 66, 1773, 1773), ("shape/src/bin_shape.mli", 66, 1773, 1816), 0), 0, Tag1 ("Bin_shape", 25)), 0); (("var", 451), ((Tag1 (0, (Tag3 (Tag1 ((("Location", 438)), "t"), 0, (0)), 100000000, 0, -90), (Tag1 (0, (Tag3 (Tag1 ((("Vid", 437)), "t"), 0, (0)), 100000000, 0, -89), (Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -88), 0), 100000000, 0, -87), 0), 100000000, 0, -86), 0, (("shape/src/bin_shape.mli", 68, 1818, 1818), ("shape/src/bin_shape.mli", 68, 1818, 1852), 0), 0, Tag1 ("Bin_shape", 26)), 0); (("basetype", 452), ((Tag1 (0, (Tag3 (Tag1 ((("Uuid", 439)), "t"), 0, (0)), 100000000, 0, -85), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -84)], (0)), 100000000, 0, -83), (Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -82), 0), 100000000, 0, -81), 0), 100000000, 0, -80), 0, (("shape/src/bin_shape.mli", 72, 2017, 2017), ("shape/src/bin_shape.mli", 72, 2017, 2053), 0), 0, Tag1 ("Bin_shape", 27)), 0); (("annotate", 453), ((Tag1 (0, (Tag3 (Tag1 ((("Uuid", 439)), "t"), 0, (0)), 100000000, 0, -79), (Tag1 (0, (Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -78), (Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -77), 0), 100000000, 0, -76), 0), 100000000, 0, -75), 0, (("shape/src/bin_shape.mli", 77, 2246, 2246), ("shape/src/bin_shape.mli", 77, 2246, 2277), 0), 0, Tag1 ("Bin_shape", 28)), 0); Tag3 (("Stable", 454), 1, (Tag3 (Tag1 ((Tag2 ("Bin_shape")), "Stable")), 0, (("shape/src/bin_shape.mli", 79, 2279, 2279), ("shape/src/bin_shape.mli", 83, 2370, 2373), 0), Tag1 ("Bin_shape", 33)), 0, 0); Tag3 (("Digest", 455), 1, (Tag3 (Tag1 ((Tag2 ("Bin_shape")), "Digest")), 0, (("shape/src/bin_shape.mli", 103, 3304, 3304), ("shape/src/bin_shape.mli", 109, 3448, 3451), 0), Tag1 ("Bin_shape", 40)), 0, 0); Tag3 (("Expert", 456), 1, (Tag3 (Tag1 ((Tag2 ("Bin_shape")), "Expert")), 0, (("shape/src/bin_shape.mli", 111, 3453, 3453), ("shape/src/bin_shape.mli", 139, 4199, 4202), 0), Tag1 ("Bin_shape", 68)), 0, 0); Tag3 (("Canonical", 457), 1, (Tag3 (Tag1 ((Tag2 ("Bin_shape")), "Canonical")), 0, (("shape/src/bin_shape.mli", 141, 4204, 4204), ("shape/src/bin_shape.mli", 178, 5468, 5471), 0), Tag1 ("Bin_shape", 90)), 0, 0); (("eval", 458), ((Tag1 (0, (Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -74), (Tag3 (Tag1 ((("Canonical", 457)), "t"), 0, (0)), 100000000, 0, -73), 0), 100000000, 0, -72), 0, (("shape/src/bin_shape.mli", 184, 5793, 5793), ("shape/src/bin_shape.mli", 184, 5793, 5820), 0), 0, Tag1 ("Bin_shape", 91)), 0); (("eval_to_digest", 459), ((Tag1 (0, (Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -71), (Tag3 (Tag1 ((("Digest", 455)), "t"), 0, (0)), 100000000, 0, -70), 0), 100000000, 0, -69), 0, (("shape/src/bin_shape.mli", 191, 6193, 6193), ("shape/src/bin_shape.mli", 191, 6193, 6227), 0), 0, Tag1 ("Bin_shape", 92)), 0); (("eval_to_digest_string", 460), ((Tag1 (0, (Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -68), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -67), 0), 100000000, 0, -66), 0, (("shape/src/bin_shape.mli", 195, 6357, 6357), ("shape/src/bin_shape.mli", 195, 6357, 6396), 0), 0, Tag1 ("Bin_shape", 93)), 0); Tag3 (("For_typerep", 461), 1, (Tag3 (Tag1 ((Tag2 ("Bin_shape")), "For_typerep")), 0, (("shape/src/bin_shape.mli", 197, 6398, 6398), ("shape/src/bin_shape.mli", 199, 6465, 6468), 0), Tag1 ("Bin_shape", 95)), 0, 0); (("bin_shape_unit", 462), ((Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -65), 0, (("src/shape.mli", 5, 55, 55), ("src/shape.mli", 5, 55, 77), 0), 0, Tag1 ("Bin_prot__Shape", 0)), 0); (("bin_shape_bool", 463), ((Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -64), 0, (("src/shape.mli", 6, 78, 78), ("src/shape.mli", 6, 78, 100), 0), 0, Tag1 ("Bin_prot__Shape", 1)), 0); (("bin_shape_string", 464), ((Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -63), 0, (("src/shape.mli", 7, 101, 101), ("src/shape.mli", 7, 101, 125), 0), 0, Tag1 ("Bin_prot__Shape", 2)), 0); (("bin_shape_bytes", 465), ((Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -62), 0, (("src/shape.mli", 8, 126, 126), ("src/shape.mli", 8, 126, 149), 0), 0, Tag1 ("Bin_prot__Shape", 3)), 0); (("bin_shape_char", 466), ((Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -61), 0, (("src/shape.mli", 9, 150, 150), ("src/shape.mli", 9, 150, 172), 0), 0, Tag1 ("Bin_prot__Shape", 4)), 0); (("bin_shape_float", 467), ((Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -60), 0, (("src/shape.mli", 10, 173, 173), ("src/shape.mli", 10, 173, 196), 0), 0, Tag1 ("Bin_prot__Shape", 5)), 0); (("bin_shape_int", 468), ((Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -59), 0, (("src/shape.mli", 11, 197, 197), ("src/shape.mli", 11, 197, 218), 0), 0, Tag1 ("Bin_prot__Shape", 6)), 0); (("bin_shape_int32", 469), ((Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -58), 0, (("src/shape.mli", 12, 219, 219), ("src/shape.mli", 12, 219, 242), 0), 0, Tag1 ("Bin_prot__Shape", 7)), 0); (("bin_shape_int63", 470), ((Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -57), 0, (("src/shape.mli", 13, 243, 243), ("src/shape.mli", 13, 243, 266), 0), 0, Tag1 ("Bin_prot__Shape", 8)), 0); (("bin_shape_int64", 471), ((Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -56), 0, (("src/shape.mli", 14, 267, 267), ("src/shape.mli", 14, 267, 290), 0), 0, Tag1 ("Bin_prot__Shape", 9)), 0); (("bin_shape_nativeint", 472), ((Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -55), 0, (("src/shape.mli", 15, 291, 291), ("src/shape.mli", 15, 291, 318), 0), 0, Tag1 ("Bin_prot__Shape", 10)), 0); (("bin_shape_nat0", 473), ((Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -54), 0, (("src/shape.mli", 16, 319, 319), ("src/shape.mli", 16, 319, 341), 0), 0, Tag1 ("Bin_prot__Shape", 11)), 0); (("bin_shape_digest", 474), ((Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -53), 0, (("src/shape.mli", 17, 342, 342), ("src/shape.mli", 17, 342, 366), 0), 0, Tag1 ("Bin_prot__Shape", 12)), 0); (("bin_shape_float32_vec", 475), ((Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -52), 0, (("src/shape.mli", 18, 367, 367), ("src/shape.mli", 18, 367, 396), 0), 0, Tag1 ("Bin_prot__Shape", 13)), 0); (("bin_shape_float64_vec", 476), ((Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -51), 0, (("src/shape.mli", 19, 397, 397), ("src/shape.mli", 19, 397, 426), 0), 0, Tag1 ("Bin_prot__Shape", 14)), 0); (("bin_shape_vec", 477), ((Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -50), 0, (("src/shape.mli", 20, 427, 427), ("src/shape.mli", 20, 427, 448), 0), 0, Tag1 ("Bin_prot__Shape", 15)), 0); (("bin_shape_float32_mat", 478), ((Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -49), 0, (("src/shape.mli", 21, 449, 449), ("src/shape.mli", 21, 449, 478), 0), 0, Tag1 ("Bin_prot__Shape", 16)), 0); (("bin_shape_float64_mat", 479), ((Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -48), 0, (("src/shape.mli", 22, 479, 479), ("src/shape.mli", 22, 479, 508), 0), 0, Tag1 ("Bin_prot__Shape", 17)), 0); (("bin_shape_mat", 480), ((Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -47), 0, (("src/shape.mli", 23, 509, 509), ("src/shape.mli", 23, 509, 530), 0), 0, Tag1 ("Bin_prot__Shape", 18)), 0); (("bin_shape_bigstring", 481), ((Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -46), 0, (("src/shape.mli", 24, 531, 531), ("src/shape.mli", 24, 531, 558), 0), 0, Tag1 ("Bin_prot__Shape", 19)), 0); (("bin_shape_floatarray", 482), ((Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -45), 0, (("src/shape.mli", 25, 559, 559), ("src/shape.mli", 25, 559, 587), 0), 0, Tag1 ("Bin_prot__Shape", 20)), 0); (("bin_shape_variant_int", 483), ((Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -44), 0, (("src/shape.mli", 26, 588, 588), ("src/shape.mli", 26, 588, 617), 0), 0, Tag1 ("Bin_prot__Shape", 21)), 0); (("bin_shape_int_8bit", 484), ((Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -43), 0, (("src/shape.mli", 27, 618, 618), ("src/shape.mli", 27, 618, 644), 0), 0, Tag1 ("Bin_prot__Shape", 22)), 0); (("bin_shape_int_16bit", 485), ((Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -42), 0, (("src/shape.mli", 28, 645, 645), ("src/shape.mli", 28, 645, 672), 0), 0, Tag1 ("Bin_prot__Shape", 23)), 0); (("bin_shape_int_32bit", 486), ((Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -41), 0, (("src/shape.mli", 29, 673, 673), ("src/shape.mli", 29, 673, 700), 0), 0, Tag1 ("Bin_prot__Shape", 24)), 0); (("bin_shape_int_64bit", 487), ((Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -40), 0, (("src/shape.mli", 30, 701, 701), ("src/shape.mli", 30, 701, 728), 0), 0, Tag1 ("Bin_prot__Shape", 25)), 0); (("bin_shape_int64_bits", 488), ((Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -39), 0, (("src/shape.mli", 31, 729, 729), ("src/shape.mli", 31, 729, 757), 0), 0, Tag1 ("Bin_prot__Shape", 26)), 0); (("bin_shape_network16_int", 489), ((Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -38), 0, (("src/shape.mli", 32, 758, 758), ("src/shape.mli", 32, 758, 789), 0), 0, Tag1 ("Bin_prot__Shape", 27)), 0); (("bin_shape_network32_int", 490), ((Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -37), 0, (("src/shape.mli", 33, 790, 790), ("src/shape.mli", 33, 790, 821), 0), 0, Tag1 ("Bin_prot__Shape", 28)), 0); (("bin_shape_network32_int32", 491), ((Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -36), 0, (("src/shape.mli", 34, 822, 822), ("src/shape.mli", 34, 822, 855), 0), 0, Tag1 ("Bin_prot__Shape", 29)), 0); (("bin_shape_network64_int", 492), ((Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -35), 0, (("src/shape.mli", 35, 856, 856), ("src/shape.mli", 35, 856, 887), 0), 0, Tag1 ("Bin_prot__Shape", 30)), 0); (("bin_shape_network64_int64", 493), ((Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -34), 0, (("src/shape.mli", 36, 888, 888), ("src/shape.mli", 36, 888, 921), 0), 0, Tag1 ("Bin_prot__Shape", 31)), 0); (("bin_shape_ref", 494), ((Tag1 (0, (Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -33), (Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -32), 0), 100000000, 0, -31), 0, (("src/shape.mli", 37, 922, 922), ("src/shape.mli", 37, 922, 948), 0), 0, Tag1 ("Bin_prot__Shape", 32)), 0); (("bin_shape_option", 495), ((Tag1 (0, (Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -30), (Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -29), 0), 100000000, 0, -28), 0, (("src/shape.mli", 38, 949, 949), ("src/shape.mli", 38, 949, 978), 0), 0, Tag1 ("Bin_prot__Shape", 33)), 0); (("bin_shape_list", 496), ((Tag1 (0, (Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -27), (Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -26), 0), 100000000, 0, -25), 0, (("src/shape.mli", 39, 979, 979), ("src/shape.mli", 39, 979, 1006), 0), 0, Tag1 ("Bin_prot__Shape", 34)), 0); (("bin_shape_array", 497), ((Tag1 (0, (Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -24), (Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -23), 0), 100000000, 0, -22), 0, (("src/shape.mli", 40, 1007, 1007), ("src/shape.mli", 40, 1007, 1035), 0), 0, Tag1 ("Bin_prot__Shape", 35)), 0); (("bin_shape_hashtbl", 498), ((Tag1 (0, (Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -21), (Tag1 (0, (Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -20), (Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("src/shape.mli", 41, 1036, 1036), ("src/shape.mli", 41, 1036, 1071), 0), 0, Tag1 ("Bin_prot__Shape", 36)), 0); (("bin_shape_lazy", 499), ((Tag1 (0, (Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -16), (Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -15), 0), 100000000, 0, -14), 0, (("src/shape.mli", 42, 1072, 1072), ("src/shape.mli", 42, 1072, 1099), 0), 0, Tag1 ("Bin_prot__Shape", 37)), 0); (("bin_shape_pair", 500), ((Tag1 (0, (Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -13), (Tag1 (0, (Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -12), (Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -11), 0), 100000000, 0, -10), 0), 100000000, 0, -9), 0, (("src/shape.mli", 43, 1100, 1100), ("src/shape.mli", 43, 1100, 1132), 0), 0, Tag1 ("Bin_prot__Shape", 38)), 0); (("bin_shape_triple", 501), ((Tag1 (0, (Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -8), (Tag1 (0, (Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -7), (Tag1 (0, (Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -6), (Tag3 ((("t", 434)), 0, (0)), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/shape.mli", 44, 1133, 1133), ("src/shape.mli", 44, 1133, 1172), 0), 0, Tag1 ("Bin_prot__Shape", 39)), 0)], "Bin_prot__Shape", [("Bin_prot__Shape", ("\160\0115[[\165\171\136\188\247+\007\155V\173(")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__StringLabels", ("\134F\024\226\216Is#\223\230\234\169Z\206Gc")); ("Stdlib__StdLabels", (".\193\n\229\139\017\212C-ZA\\kz-\128")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Printf", ("\215<\139]\021\142\224E\245m\198qc(W\229")); ("Stdlib__Printexc", ("\217u\168\235\179oi\167\235\255\025\017%d\192s")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__MoreLabels", ("\248\232\248\254`<\230\241\161U\193U\1466J\238")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__ListLabels", ("*\194\012\191\020%\170\249m\002\180\178hk\205\220")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shadow_stdlib", ("\219zi\164\203\158e)\232\221\196\168\138x\142\018")); ("Sexplib0__Sexpable", ("\251${\207(\249/z\242\255\250^\141\156\210e")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv_error", ("kzv!\151~\198P\000\165\176d\007\251p\232")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("Ppx_compare_lib", ("\160z\210W\001\239\141\222\242\213'\241\211\218\215y")); ("Md5_lib", ("\027\247~\199'\195O\175\232\149\147\228\248S\0073")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Bin_shape", ("\186\129\213n:\153\165\244L\187\167M\205\189Ez")); ("Bin_prot__", ("N\162)\214\210X\006\190\194\220\b\004\164\226\022\181")); ("Base_internalhash_types", ("0\148#2\226\223\018\135\173>!\020\237\017\255\149")); ("Base__Unit", ("\247\n\178\171]m\169\231\139\171\148\189\254\236l'")); ("Base__T", ("+t\159\169\027\152\205\235\003\237\133\177\024\n6'")); ("Base__Sys0", ("\206z\231\154s\\\136\2364\131\005\014\031\152m3")); ("Base__Stringable", ("\170\025\162\136\234\162\n\161\1491>\145\210@\237t")); ("Base__String0", ("\212\221L\220\245\255\162P\228\224\189\216\135H\149O")); ("Base__String", ("|q\181\r\14787\130\127\191\025\137\203\217\250\196")); ("Base__Staged", ("\203J\011+\249\0115\1338\023\209\142\159\240V.")); ("Base__Source_code_position0", ("_\003P6\254\029\206\005\130\136\180\019\145\230\000M")); ("Base__Sign_or_nan", ("\2287\251,\197\017qf\179Y\025h\190\131W%")); ("Base__Sign0", ("\152\138\204\175\244\128J\165\221\165\160\150y\1305i")); ("Base__Sign", ("^\255.Q;\215fi\134\192\182\241Z\2425l")); ("Base__Sexpable", ("\155?\169\178\246\242*\232\206\018Y\174\203h\217i")); ("Base__Sexp_with_comparable", ("\171\173\137y\1855\006y\146\248\141@@\191[W")); ("Base__Sexp", ("\154\187\171&\209=\153[\236\250!U\174`\190T")); ("Base__Sequence", ("{L\140\211\223\183\000\030\151\247FnY\196\210\201")); ("Base__Result", ("\204|\215\173FMa\2511<&\215T\194$\228")); ("Base__Ref", ("\250\254R\158s\203c\0025\029I6\149\179s\158")); ("Base__Random", (" \216\153fc\243\1430\155\211\169?\022\\\231\011")); ("Base__Printf", ("\000\196c,\214\127\226\174\220\190\253z!\242\028\250")); ("Base__Pretty_printer", ("\175\005\031\018\015a\159\220\154c'(a\239j\233")); ("Base__Ppx_hash_lib", ("\199\141\178\193\006\209L\007^\020(\131\224sn8")); ("Base__Ppx_enumerate_lib", ("G\171\178\012Em\142\235@\152fg\020\140~(")); ("Base__Ppx_compare_lib", ("\243\186~\233\228\199Ah\181.\223\004e\231\129S")); ("Base__Poly0", ("\230;\143\234\255.H\132KOe7\155\\\023f")); ("Base__Or_error", ("\193\133)\bO\210\2517\168*\203\148\143\200\127\177")); ("Base__Option", ("\242!\176\142\168\247\163Jg\0254\180\224\\A\210")); ("Base__Nativeint", ("\252/\181U\214\229\029?.\130\145\237\"qFj")); ("Base__Monad_intf", ("\208\203\163\152\184O\130?\012:\168\247}\018\253\155")); ("Base__Monad", ("!\244\168\2352=\137Lm\219\129K\216\199\145\\")); ("Base__List", ("}\029h\158/\153\229\161]0\224Y\003Z\250\210")); ("Base__Lazy", ("@`\165\196 \235)\136ANe:p\169$\185")); ("Base__Invariant_intf", ("\213\204\238\235\236[\198\145\028\2392\015\243\177S\249")); ("Base__Invariant", ("\135\153\136\\\129SD\228\202l\255\152\139\253\015\201")); ("Base__Intable", ("\028\249=Y\003]\231qd\238\172\004b\170\142\255")); ("Base__Int_intf", ("\238Q\2457\239\156\018\183J\015\240\178\193b\166@")); ("Base__Int64", ("\252B\186\239\245\155\209\227\136CIX@\189\003\029")); ("Base__Int63_emul", ("'\210s\232\177\204\254\024C\215\014\231\210\227n\235")); ("Base__Int63", ("\165\016\236\214m\014a\226A{\191\235@O\1695")); ("Base__Int32", ("\244*\172\133\227\025$@\180\027\024\132\195yO\027")); ("Base__Int0", ("N\1310\012\227\254\000\255_\222!\018\016\003\1779")); ("Base__Int", ("\165Z\179\140\230$\131\175\209\172\214\"\170\214{\250")); ("Base__Info_intf", ("\184\209'\173\251\219\167X|v\188]\190o5X")); ("Base__Info", ("-\011\149\203\248\030\2301\1907\1630\189\128\209\170")); ("Base__Indexed_container_intf", ("\179\2213\145j\\\136\tl2\240\006\188j$r")); ("Base__Indexed_container", ("\196\246\213\141\196d\130\002\232\162\144y\149\236\145\218")); ("Base__Import0", ("\156\129U\197Y[\\\153\017Ho\203\173\204\220\020")); ("Base__Import", ("\014\187\247\141\187\181\142g\176:s_,\181\219\209")); ("Base__Identifiable_intf", ("hK7}\187\129\022-r\233\241\192Q\161=j")); ("Base__Identifiable", ("L\020\162\189\228\217^\171\158H_\157\164c\130\242")); ("Base__Hashable_intf", ("\128\015G\244\135R\026\202\128F?)\193\004\195\181")); ("Base__Hashable", ("\027\187\158\245r}\018\193dbq\196\005\170g\252")); ("Base__Hash_intf", ("h\004P\218\1531G\127\212\208A\024\140\164iq")); ("Base__Hash", ("\206Rc\194\234{s3\248\165\024\162\203{\206\206")); ("Base__Globalize", ("<\243w~.\180\196t\159\193\174[\227\139\215G")); ("Base__Formatter", ("\193\149\030\140\154\1505b\162a`%\243\185'%")); ("Base__Floatable", ("\239\176\151\139\173ft(q\190\205\030C\170\197\177")); ("Base__Float", ("tR$\252\165\134g\024>\127\254\245\212-\018\141")); ("Base__Field", ("8In\234X\202\188G\186\208$\192\175\136\214v")); ("Base__Exn", ("?\191\202\221\228\185\154\127\240\191o\134\020\186b\173")); ("Base__Error", ("\199\218\231n\155/\159\156\146\247\148t\237\003\t\153")); ("Base__Equal", ("\193\217Z\127he\141N\000\1447\030\236%\131\b")); ("Base__Either0", ("!9-\011n\2077eZ\212\031c\227\029\206\t")); ("Base__Container_intf", ("\170vo*\208\209\141\219\196\168\236l\016\246\012c")); ("Base__Container", ("\191|>_\153W\235M\180uKz\214w`q")); ("Base__Comparisons", ("\196\196Y\"{\163~)\\G/\155:\004\141;")); ("Base__Comparator", ("\002\135z7b\025&\207\t\188\239&U3R\167")); ("Base__Comparable_intf", ("\252n\002\221\246\143r\235oJ\240\151\202\211\161\254")); ("Base__Comparable", (":\134'\156u#\215\225\129\191\162\229\200\185l\012")); ("Base__Char", ("\206\224\186\000'\157$\023\023\190\198{\250\141a\216")); ("Base__Bytes", ("\028\001\232X(\240\139\227s\152\156\138\023\030\r\188")); ("Base__Bool0", ("\177f\254p\023\143&\239\020\136\206\242~\018F\251")); ("Base__Bool", ("\162+\012Rx\183c\226\131\190@Z\016q\138@")); ("Base__Blit_intf", ("\171\129\t\214\130\131O\210\251F\228.\168\004Vo")); ("Base__Blit", ("}g\242\161\000\216\132\220\195\230C\002jg\234j")); ("Base__Binary_searchable_intf", ("/\213\237\209\200\192$w\158\234\169\148\012\221W\019")); ("Base__Binary_searchable", ("V\022B_\233\194\145K\248\233\025\175U\155i\197")); ("Base__Backtrace", ("\212~\253E\024|\228\141\015\169\012\006\022\0065\181")); ("Base__Array", ("P\252F\172\242{\241\226#uu\207\2068\218\015")); ("Base__Applicative_intf", ("J\176\203\159\235N(\235\027\232\198+\224\205*A")); ("Base__Applicative", ("\157\024\176\241a\165\204\133\003s3\214\007\131\244\n")); ("Base__", ("p\252\007\139\128\163W\025+\0225\001\246|P\158")); ("Base", ("\167SY\027Q9E\005r,\198\164\161\023\170\151"))], [(0)])

val bin_shape_triple : t -> t -> t -> t

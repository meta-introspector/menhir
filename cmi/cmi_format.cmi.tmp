type pers_flags = Rectypes | Alerts of Misc.alerts | Opaque
type cmi_infos = {
  cmi_name : Misc.modname;
  cmi_sign : Types.signature_item list;
  cmi_crcs : Misc.crcs;
  cmi_flags : pers_flags list;
}
val output_cmi : string -> out_channel -> cmi_infos -> Digest.t
val input_cmi : in_channel -> cmi_infos
val read_cmi : string -> cmi_infos
type error =
    Not_an_interface of Misc.filepath
  | Wrong_version_interface of Misc.filepath * string
  | Corrupted_interface of Misc.filepath
exception Error of error("DEBUG:rule", [Tag1 (("pers_flags", 756), (0, 0, Tag1 ([(("Rectypes", 341), (0), 0, (("file_formats/cmi_format.mli", 19, 1108, 1110), ("file_formats/cmi_format.mli", 19, 1108, 1120), 0), 0, Tag1 ("Cmi_format", 1)); (("Alerts", 342), ([(Tag3 (Tag1 ((Tag2 ("Misc")), "alerts"), 0, (0)), 100000000, 0, -31)]), 0, (("file_formats/cmi_format.mli", 20, 1121, 1123), ("file_formats/cmi_format.mli", 20, 1121, 1141), 0), 0, Tag1 ("Cmi_format", 2)); (("Opaque", 343), (0), 0, (("file_formats/cmi_format.mli", 21, 1142, 1144), ("file_formats/cmi_format.mli", 21, 1142, 1152), 0), 0, Tag1 ("Cmi_format", 3))], 0), 1, 0, 0, 0, 0, 0, (("file_formats/cmi_format.mli", 18, 1090, 1090), ("file_formats/cmi_format.mli", 21, 1142, 1152), 0), 0, 0, 0, Tag1 ("Cmi_format", 0)), 1, 0); Tag1 (("cmi_infos", 757), (0, 0, [[(("cmi_name", 468), 0, (Tag3 (Tag1 ((Tag2 ("Misc")), "modname"), 0, (0)), 100000000, 0, -25), (("file_formats/cmi_format.mli", 24, 1173, 1177), ("file_formats/cmi_format.mli", 24, 1173, 1196), 0), 0, Tag1 ("Cmi_format", 6)); (("cmi_sign", 575), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "signature_item"), 0, (0)), 100000000, 0, -27)], (0)), 100000000, 0, -26), (("file_formats/cmi_format.mli", 25, 1197, 1201), ("file_formats/cmi_format.mli", 25, 1197, 1238), 0), 0, Tag1 ("Cmi_format", 7)); (("cmi_crcs", 576), 0, (Tag3 (Tag1 ((Tag2 ("Misc")), "crcs"), 0, (0)), 100000000, 0, -28), (("file_formats/cmi_format.mli", 26, 1239, 1243), ("file_formats/cmi_format.mli", 26, 1239, 1259), 0), 0, Tag1 ("Cmi_format", 8)); (("cmi_flags", 577), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("pers_flags", 756)), 0, (0)), 100000000, 0, -30)], (0)), 100000000, 0, -29), (("file_formats/cmi_format.mli", 27, 1260, 1264), ("file_formats/cmi_format.mli", 27, 1260, 1292), 0), 0, Tag1 ("Cmi_format", 9))]], 1, 0, 0, 0, 0, 0, (("file_formats/cmi_format.mli", 23, 1154, 1154), ("file_formats/cmi_format.mli", 28, 1293, 1294), 0), 0, 0, 0, Tag1 ("Cmi_format", 4)), 1, 0); (("output_cmi", 758), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -24), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -23), (Tag1 (0, (Tag3 ((("cmi_infos", 757)), 0, (0)), 100000000, 0, -22), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Digest"), "t"), 0, (0)), 100000000, 0, -21), 0), 100000000, 0, -20), 0), 100000000, 0, -19), 0), 100000000, 0, -18), 0, (("file_formats/cmi_format.mli", 31, 1340, 1340), ("file_formats/cmi_format.mli", 31, 1340, 1403), 0), 0, Tag1 ("Cmi_format", 10)), 0); (("input_cmi", 759), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "in_channel"), 0, (0)), 100000000, 0, -17), (Tag3 ((("cmi_infos", 757)), 0, (0)), 100000000, 0, -16), 0), 100000000, 0, -15), 0, (("file_formats/cmi_format.mli", 34, 1486, 1486), ("file_formats/cmi_format.mli", 34, 1486, 1525), 0), 0, Tag1 ("Cmi_format", 11)), 0); (("read_cmi", 760), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -14), (Tag3 ((("cmi_infos", 757)), 0, (0)), 100000000, 0, -13), 0), 100000000, 0, -12), 0, (("file_formats/cmi_format.mli", 37, 1580, 1580), ("file_formats/cmi_format.mli", 37, 1580, 1614), 0), 0, Tag1 ("Cmi_format", 12)), 0); Tag1 (("error", 761), (0, 0, Tag1 ([(("Not_an_interface", 595), ([(Tag3 (Tag1 ((Tag2 ("Misc")), "filepath"), 0, (0)), 100000000, 0, -8)]), 0, (("file_formats/cmi_format.mli", 42, 1649, 1651), ("file_formats/cmi_format.mli", 42, 1649, 1681), 0), 0, Tag1 ("Cmi_format", 14)); (("Wrong_version_interface", 596), ([(Tag3 (Tag1 ((Tag2 ("Misc")), "filepath"), 0, (0)), 100000000, 0, -9); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10)]), 0, (("file_formats/cmi_format.mli", 43, 1682, 1684), ("file_formats/cmi_format.mli", 43, 1682, 1730), 0), 0, Tag1 ("Cmi_format", 15)); (("Corrupted_interface", 597), ([(Tag3 (Tag1 ((Tag2 ("Misc")), "filepath"), 0, (0)), 100000000, 0, -11)]), 0, (("file_formats/cmi_format.mli", 44, 1731, 1733), ("file_formats/cmi_format.mli", 44, 1731, 1766), 0), 0, Tag1 ("Cmi_format", 16))], 0), 1, 0, 0, 0, 0, 0, (("file_formats/cmi_format.mli", 41, 1636, 1636), ("file_formats/cmi_format.mli", 44, 1731, 1766), 0), 0, 0, 0, Tag1 ("Cmi_format", 13)), 1, 0); Tag2 (("Error", 762), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((("error", 761)), 0, (0)), 100000000, 0, -7)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Cmi_format", 17)), 2, 0); (("report_error", 763), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -6), (Tag1 (0, (Tag3 ((("error", 761)), 0, (0)), 100000000, 0, -5), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("file_formats/cmi_format.mli", 50, 1807, 1807), ("file_formats/cmi_format.mli", 50, 1807, 1851), 0), 0, Tag1 ("Cmi_format", 18)), 0)], "Cmi_format", [("Cmi_format", ("6\177\bU\139\"\023\152=\249\135\174\b\011Cg")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Types", ("\177\238\029.\220\006\163!\230\015\006\182\133\155\194\166")); ("Type_immediacy", ("\"\127k\011Q\241\211\138\193;8\142\129\141#\251")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shape", ("\235\127Y\213\025\137=\244\218\181\248N\189\188\216p")); ("Primitive", ("}Shh\162\015|\220A\203\249\232\245G\213\019")); ("Path", ("\012\183\178\025\1298\228*\021r\185\160Y\252\n\026")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Outcometree", ("9\021%\234\211\206\210\004H\165\208\2014\234Q\142")); ("Misc", ("*\026\026\234c\191\131\161\\\203\183\012O\252\153\198")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Identifiable", ("\004F\207\014\158GU\001\184\214\187%/#;\211")); ("Ident", ("\b9;!\187.\220\163(x\b\174\\\223\020\004")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Build_path_prefix_map", ("y\028\167\207D\220\198\216\011\208\172\149\2416\bc")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216"))], [(0)])

val report_error : Format.formatter -> error -> unit

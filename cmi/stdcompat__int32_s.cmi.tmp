module type S =
  sig
    type t = int32
    val min : t -> t -> t
    val max : t -> t -> t
    val unsigned_div : int32 -> int32 -> int32
    val unsigned_rem : int32 -> int32 -> int32
    val unsigned_to_int : int32 -> int option
    val unsigned_compare : t -> t -> int
    val of_string_opt : string -> int32 option
    val equal : t -> t -> bool
    external bits_of_float : float -> int32 = "caml_int32_bits_of_float"
      "caml_int32_bits_of_float_unboxed" [@@unboxed] [@@noalloc]
    external float_of_bits : int32 -> float = "caml_int32_float_of_bits"
      "caml_int32_float_of_bits_unboxed" [@@unboxed] [@@noalloc]
    val zero : int32
    val one : int32
    val minus_one : int32
    external neg : int32 -> int32 = "%int32_neg"
    external add : int32 -> int32 -> int32 = "%int32_add"
    external sub : int32 -> int32 -> int32 = "%int32_sub"
    external mul : int32 -> int32 -> int32 = "%int32_mul"
    external div : int32 -> int32 -> int32 = "%int32_div"
    external rem : int32 -> int32 -> int32 = "%int32_mod"
    val succ : int32 -> int32
    val pred : int32 -> int32
    val abs : int32 -> int32
    val max_int : int32
    val min_int : int32
    external logand : int32 -> int32 -> int32 = "%int32_and"
    external logor : int32 -> int32 -> int32 = "%int32_or"
    external logxor : int32 -> int32 -> int32 = "%int32_xor"
    val lognot : int32 -> int32
    external shift_left : int32 -> int -> int32 = "%int32_lsl"
    external shift_right : int32 -> int -> int32 = "%int32_asr"
    external shift_right_logical : int32 -> int -> int32 = "%int32_lsr"
    external of_int : int -> int32 = "%int32_of_int"
    external to_int : int32 -> int = "%int32_to_int"
    external of_float : float -> int32 = "caml_int32_of_float"
      "caml_int32_of_float_unboxed" [@@unboxed] [@@noalloc]
    external to_float : int32 -> float = "caml_int32_to_float"
      "caml_int32_to_float_unboxed" [@@unboxed] [@@noalloc]
    external of_string : string -> int32 = "caml_int32_of_string"
    val to_string : int32 -> string
    val compare : t -> t -> int("DEBUG:rule", [Tag4 (("S", 348), ((Tag1 ([Tag1 (("t", 349), (0, 0, 0, 1, ((Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -144)), 0, 0, 0, 0, (("stdcompat__int32_s.mli", 2, 20, 20), ("stdcompat__int32_s.mli", 2, 20, 34), 0), 0, 0, 0, Tag1 ("Stdcompat__int32_s", 0)), 1, 0); (("min", 350), ((Tag1 (0, (Tag3 ((("t", 349)), 0, (0)), 100000000, 0, -143), (Tag1 (0, (Tag3 ((("t", 349)), 0, (0)), 100000000, 0, -142), (Tag3 ((("t", 349)), 0, (0)), 100000000, 0, -141), 0), 100000000, 0, -140), 0), 100000000, 0, -139), 0, (("stdcompat__int32_s.mli", 5, 64, 64), ("stdcompat__int32_s.mli", 5, 64, 85), 0), 0, Tag1 ("Stdcompat__int32_s", 1)), 0); (("max", 351), ((Tag1 (0, (Tag3 ((("t", 349)), 0, (0)), 100000000, 0, -138), (Tag1 (0, (Tag3 ((("t", 349)), 0, (0)), 100000000, 0, -137), (Tag3 ((("t", 349)), 0, (0)), 100000000, 0, -136), 0), 100000000, 0, -135), 0), 100000000, 0, -134), 0, (("stdcompat__int32_s.mli", 8, 131, 131), ("stdcompat__int32_s.mli", 8, 131, 152), 0), 0, Tag1 ("Stdcompat__int32_s", 2)), 0); (("unsigned_div", 352), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -133), (Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -132), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -131), 0), 100000000, 0, -130), 0), 100000000, 0, -129), 0, (("stdcompat__int32_s.mli", 11, 198, 198), ("stdcompat__int32_s.mli", 11, 198, 240), 0), 0, Tag1 ("Stdcompat__int32_s", 3)), 0); (("unsigned_rem", 353), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -128), (Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -127), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -126), 0), 100000000, 0, -125), 0), 100000000, 0, -124), 0, (("stdcompat__int32_s.mli", 14, 307, 307), ("stdcompat__int32_s.mli", 14, 307, 349), 0), 0, Tag1 ("Stdcompat__int32_s", 4)), 0); (("unsigned_to_int", 354), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -123), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -122)], (0)), 100000000, 0, -121), 0), 100000000, 0, -120), 0, (("stdcompat__int32_s.mli", 17, 416, 416), ("stdcompat__int32_s.mli", 17, 416, 457), 0), 0, Tag1 ("Stdcompat__int32_s", 5)), 0); (("unsigned_compare", 355), ((Tag1 (0, (Tag3 ((("t", 349)), 0, (0)), 100000000, 0, -119), (Tag1 (0, (Tag3 ((("t", 349)), 0, (0)), 100000000, 0, -118), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -117), 0), 100000000, 0, -116), 0), 100000000, 0, -115), 0, (("stdcompat__int32_s.mli", 20, 523, 523), ("stdcompat__int32_s.mli", 20, 523, 559), 0), 0, Tag1 ("Stdcompat__int32_s", 6)), 0); (("of_string_opt", 356), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -114), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -113)], (0)), 100000000, 0, -112), 0), 100000000, 0, -111), 0, (("stdcompat__int32_s.mli", 23, 620, 620), ("stdcompat__int32_s.mli", 23, 620, 662), 0), 0, Tag1 ("Stdcompat__int32_s", 7)), 0); (("equal", 357), ((Tag1 (0, (Tag3 ((("t", 349)), 0, (0)), 100000000, 0, -110), (Tag1 (0, (Tag3 ((("t", 349)), 0, (0)), 100000000, 0, -109), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -108), 0), 100000000, 0, -107), 0), 100000000, 0, -106), 0, (("stdcompat__int32_s.mli", 26, 729, 729), ("stdcompat__int32_s.mli", 26, 729, 755), 0), 0, Tag1 ("Stdcompat__int32_s", 8)), 0); (("bits_of_float", 358), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -105), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -104), 0), 100000000, 0, -103), (("caml_int32_bits_of_float", 1, 0, "caml_int32_bits_of_float_unboxed", [1], (1))), (("stdcompat__int32_s.mli", 30, 807, 807), ("stdcompat__int32_s.mli", 32, 878, 940), 0), [(("unboxed", (("stdcompat__int32_s.mli", 32, 878, 919), ("stdcompat__int32_s.mli", 32, 878, 926), 0)), (0), (("stdcompat__int32_s.mli", 32, 878, 916), ("stdcompat__int32_s.mli", 32, 878, 928), 0)); (("noalloc", (("stdcompat__int32_s.mli", 32, 878, 931), ("stdcompat__int32_s.mli", 32, 878, 938), 0)), (0), (("stdcompat__int32_s.mli", 32, 878, 928), ("stdcompat__int32_s.mli", 32, 878, 940), 0))], Tag1 ("Stdcompat__int32_s", 9)), 0); (("float_of_bits", 359), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -102), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -101), 0), 100000000, 0, -100), (("caml_int32_float_of_bits", 1, 0, "caml_int32_float_of_bits_unboxed", [(1)], 1)), (("stdcompat__int32_s.mli", 52, 1316, 1316), ("stdcompat__int32_s.mli", 54, 1387, 1449), 0), [(("unboxed", (("stdcompat__int32_s.mli", 54, 1387, 1428), ("stdcompat__int32_s.mli", 54, 1387, 1435), 0)), (0), (("stdcompat__int32_s.mli", 54, 1387, 1425), ("stdcompat__int32_s.mli", 54, 1387, 1437), 0)); (("noalloc", (("stdcompat__int32_s.mli", 54, 1387, 1440), ("stdcompat__int32_s.mli", 54, 1387, 1447), 0)), (0), (("stdcompat__int32_s.mli", 54, 1387, 1437), ("stdcompat__int32_s.mli", 54, 1387, 1449), 0))], Tag1 ("Stdcompat__int32_s", 10)), 0); (("zero", 360), ((Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -99), 0, (("stdcompat__int32_s.mli", 73, 1824, 1824), ("stdcompat__int32_s.mli", 73, 1824, 1840), 0), 0, Tag1 ("Stdcompat__int32_s", 11)), 0); (("one", 361), ((Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -98), 0, (("stdcompat__int32_s.mli", 76, 1873, 1873), ("stdcompat__int32_s.mli", 76, 1873, 1888), 0), 0, Tag1 ("Stdcompat__int32_s", 12)), 0); (("minus_one", 362), ((Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -97), 0, (("stdcompat__int32_s.mli", 79, 1920, 1920), ("stdcompat__int32_s.mli", 79, 1920, 1941), 0), 0, Tag1 ("Stdcompat__int32_s", 13)), 0); (("neg", 363), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -96), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -95), 0), 100000000, 0, -94), (("%int32_neg", 1, 1, "", [0], 0)), (("stdcompat__int32_s.mli", 82, 1979, 1979), ("stdcompat__int32_s.mli", 82, 1979, 2023), 0), 0, Tag1 ("Stdcompat__int32_s", 14)), 0); (("add", 364), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -93), (Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -92), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -91), 0), 100000000, 0, -90), 0), 100000000, 0, -89), (("%int32_add", 2, 1, "", [0; 0], 0)), (("stdcompat__int32_s.mli", 85, 2055, 2055), ("stdcompat__int32_s.mli", 85, 2055, 2108), 0), 0, Tag1 ("Stdcompat__int32_s", 15)), 0); (("sub", 365), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -88), (Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -87), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -86), 0), 100000000, 0, -85), 0), 100000000, 0, -84), (("%int32_sub", 2, 1, "", [0; 0], 0)), (("stdcompat__int32_s.mli", 88, 2140, 2140), ("stdcompat__int32_s.mli", 88, 2140, 2193), 0), 0, Tag1 ("Stdcompat__int32_s", 16)), 0); (("mul", 366), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -83), (Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -82), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -81), 0), 100000000, 0, -80), 0), 100000000, 0, -79), (("%int32_mul", 2, 1, "", [0; 0], 0)), (("stdcompat__int32_s.mli", 91, 2225, 2225), ("stdcompat__int32_s.mli", 91, 2225, 2278), 0), 0, Tag1 ("Stdcompat__int32_s", 17)), 0); (("div", 367), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -78), (Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -77), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -76), 0), 100000000, 0, -75), 0), 100000000, 0, -74), (("%int32_div", 2, 1, "", [0; 0], 0)), (("stdcompat__int32_s.mli", 94, 2310, 2310), ("stdcompat__int32_s.mli", 94, 2310, 2363), 0), 0, Tag1 ("Stdcompat__int32_s", 18)), 0); (("rem", 368), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -73), (Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -72), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -71), 0), 100000000, 0, -70), 0), 100000000, 0, -69), (("%int32_mod", 2, 1, "", [0; 0], 0)), (("stdcompat__int32_s.mli", 97, 2395, 2395), ("stdcompat__int32_s.mli", 97, 2395, 2448), 0), 0, Tag1 ("Stdcompat__int32_s", 19)), 0); (("succ", 369), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -68), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -67), 0), 100000000, 0, -66), 0, (("stdcompat__int32_s.mli", 100, 2480, 2480), ("stdcompat__int32_s.mli", 100, 2480, 2505), 0), 0, Tag1 ("Stdcompat__int32_s", 20)), 0); (("pred", 370), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -65), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -64), 0), 100000000, 0, -63), 0, (("stdcompat__int32_s.mli", 103, 2538, 2538), ("stdcompat__int32_s.mli", 103, 2538, 2563), 0), 0, Tag1 ("Stdcompat__int32_s", 21)), 0); (("abs", 371), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -62), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -61), 0), 100000000, 0, -60), 0, (("stdcompat__int32_s.mli", 106, 2596, 2596), ("stdcompat__int32_s.mli", 106, 2596, 2620), 0), 0, Tag1 ("Stdcompat__int32_s", 22)), 0); (("max_int", 372), ((Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -59), 0, (("stdcompat__int32_s.mli", 109, 2652, 2652), ("stdcompat__int32_s.mli", 109, 2652, 2671), 0), 0, Tag1 ("Stdcompat__int32_s", 23)), 0); (("min_int", 373), ((Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -58), 0, (("stdcompat__int32_s.mli", 112, 2707, 2707), ("stdcompat__int32_s.mli", 112, 2707, 2726), 0), 0, Tag1 ("Stdcompat__int32_s", 24)), 0); (("logand", 374), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -57), (Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -56), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -55), 0), 100000000, 0, -54), 0), 100000000, 0, -53), (("%int32_and", 2, 1, "", [0; 0], 0)), (("stdcompat__int32_s.mli", 115, 2762, 2762), ("stdcompat__int32_s.mli", 115, 2762, 2818), 0), 0, Tag1 ("Stdcompat__int32_s", 25)), 0); (("logor", 375), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -52), (Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -51), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -50), 0), 100000000, 0, -49), 0), 100000000, 0, -48), (("%int32_or", 2, 1, "", [0; 0], 0)), (("stdcompat__int32_s.mli", 118, 2853, 2853), ("stdcompat__int32_s.mli", 118, 2853, 2907), 0), 0, Tag1 ("Stdcompat__int32_s", 26)), 0); (("logxor", 376), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -47), (Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -46), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -45), 0), 100000000, 0, -44), 0), 100000000, 0, -43), (("%int32_xor", 2, 1, "", [0; 0], 0)), (("stdcompat__int32_s.mli", 121, 2941, 2941), ("stdcompat__int32_s.mli", 121, 2941, 2997), 0), 0, Tag1 ("Stdcompat__int32_s", 27)), 0); (("lognot", 377), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -42), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -41), 0), 100000000, 0, -40), 0, (("stdcompat__int32_s.mli", 124, 3032, 3032), ("stdcompat__int32_s.mli", 124, 3032, 3059), 0), 0, Tag1 ("Stdcompat__int32_s", 28)), 0); (("shift_left", 378), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -39), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -38), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -37), 0), 100000000, 0, -36), 0), 100000000, 0, -35), (("%int32_lsl", 2, 1, "", [0; 0], 0)), (("stdcompat__int32_s.mli", 127, 3094, 3094), ("stdcompat__int32_s.mli", 127, 3094, 3152), 0), 0, Tag1 ("Stdcompat__int32_s", 29)), 0); (("shift_right", 379), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -34), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -33), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -32), 0), 100000000, 0, -31), 0), 100000000, 0, -30), (("%int32_asr", 2, 1, "", [0; 0], 0)), (("stdcompat__int32_s.mli", 130, 3191, 3191), ("stdcompat__int32_s.mli", 130, 3191, 3250), 0), 0, Tag1 ("Stdcompat__int32_s", 30)), 0); (("shift_right_logical", 380), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -29), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -28), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -27), 0), 100000000, 0, -26), 0), 100000000, 0, -25), (("%int32_lsr", 2, 1, "", [0; 0], 0)), (("stdcompat__int32_s.mli", 133, 3290, 3290), ("stdcompat__int32_s.mli", 133, 3290, 3357), 0), 0, Tag1 ("Stdcompat__int32_s", 31)), 0); (("of_int", 381), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -24), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -23), 0), 100000000, 0, -22), (("%int32_of_int", 1, 1, "", [0], 0)), (("stdcompat__int32_s.mli", 136, 3405, 3405), ("stdcompat__int32_s.mli", 136, 3405, 3453), 0), 0, Tag1 ("Stdcompat__int32_s", 32)), 0); (("to_int", 382), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -21), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -20), 0), 100000000, 0, -19), (("%int32_to_int", 1, 1, "", [0], 0)), (("stdcompat__int32_s.mli", 139, 3488, 3488), ("stdcompat__int32_s.mli", 139, 3488, 3536), 0), 0, Tag1 ("Stdcompat__int32_s", 33)), 0); (("of_float", 383), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -18), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -17), 0), 100000000, 0, -16), (("caml_int32_of_float", 1, 0, "caml_int32_of_float_unboxed", [1], (1))), (("stdcompat__int32_s.mli", 143, 3572, 3572), ("stdcompat__int32_s.mli", 145, 3663, 3687), 0), [(("unboxed", (("stdcompat__int32_s.mli", 145, 3663, 3666), ("stdcompat__int32_s.mli", 145, 3663, 3673), 0)), (0), (("stdcompat__int32_s.mli", 145, 3663, 3663), ("stdcompat__int32_s.mli", 145, 3663, 3675), 0)); (("noalloc", (("stdcompat__int32_s.mli", 145, 3663, 3678), ("stdcompat__int32_s.mli", 145, 3663, 3685), 0)), (0), (("stdcompat__int32_s.mli", 145, 3663, 3675), ("stdcompat__int32_s.mli", 145, 3663, 3687), 0))], Tag1 ("Stdcompat__int32_s", 34)), 0); (("to_float", 384), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -15), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -14), 0), 100000000, 0, -13), (("caml_int32_to_float", 1, 0, "caml_int32_to_float_unboxed", [(1)], 1)), (("stdcompat__int32_s.mli", 165, 4113, 4113), ("stdcompat__int32_s.mli", 167, 4204, 4228), 0), [(("unboxed", (("stdcompat__int32_s.mli", 167, 4204, 4207), ("stdcompat__int32_s.mli", 167, 4204, 4214), 0)), (0), (("stdcompat__int32_s.mli", 167, 4204, 4204), ("stdcompat__int32_s.mli", 167, 4204, 4216), 0)); (("noalloc", (("stdcompat__int32_s.mli", 167, 4204, 4219), ("stdcompat__int32_s.mli", 167, 4204, 4226), 0)), (0), (("stdcompat__int32_s.mli", 167, 4204, 4216), ("stdcompat__int32_s.mli", 167, 4204, 4228), 0))], Tag1 ("Stdcompat__int32_s", 35)), 0); (("of_string", 385), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -11), 0), 100000000, 0, -10), (("caml_int32_of_string", 1, 1, "", [0], 0)), (("stdcompat__int32_s.mli", 187, 4654, 4654), ("stdcompat__int32_s.mli", 187, 4654, 4715), 0), 0, Tag1 ("Stdcompat__int32_s", 36)), 0); (("to_string", 386), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -9), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -8), 0), 100000000, 0, -7), 0, (("stdcompat__int32_s.mli", 197, 4942, 4942), ("stdcompat__int32_s.mli", 197, 4942, 4973), 0), 0, Tag1 ("Stdcompat__int32_s", 37)), 0); (("compare", 387), ((Tag1 (0, (Tag3 ((("t", 349)), 0, (0)), 100000000, 0, -6), (Tag1 (0, (Tag3 ((("t", 349)), 0, (0)), 100000000, 0, -5), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("stdcompat__int32_s.mli", 200, 5011, 5011), ("stdcompat__int32_s.mli", 200, 5011, 5038), 0), 0, Tag1 ("Stdcompat__int32_s", 38)), 0)])), 0, (("stdcompat__int32_s.mli", 1, 0, 0), ("stdcompat__int32_s.mli", 203, 5074, 5077), 0), Tag1 ("Stdcompat__int32_s", 39)), 0)], "Stdcompat__int32_s", [("Stdcompat__int32_s", ("\141\190\213\02368\239T\149\239S\166\025\170\189\146")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

  end

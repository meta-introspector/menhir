val sort_name_expr_eq :
  Constrexpr.sort_name_expr -> Constrexpr.sort_name_expr -> bool
val univ_level_expr_eq :
  Constrexpr.univ_level_expr -> Constrexpr.univ_level_expr -> bool
val sort_expr_eq : Constrexpr.sort_expr -> Constrexpr.sort_expr -> bool
val explicitation_eq :
  Constrexpr.explicitation -> Constrexpr.explicitation -> bool
val constr_expr_eq_gen :
  (Constrexpr.constr_expr -> Constrexpr.constr_expr -> bool) ->
  Constrexpr.constr_expr -> Constrexpr.constr_expr -> bool
val constr_expr_eq : Constrexpr.constr_expr -> Constrexpr.constr_expr -> bool
val local_binder_eq :
  Constrexpr.local_binder_expr -> Constrexpr.local_binder_expr -> bool
val binder_kind_eq : Constrexpr.binder_kind -> Constrexpr.binder_kind -> bool
val constr_loc : Constrexpr.constr_expr -> Loc.t option
val cases_pattern_expr_loc : Constrexpr.cases_pattern_expr -> Loc.t option
val local_binders_loc : Constrexpr.local_binder_expr list -> Loc.t option
val mkIdentC : Names.Id.t -> Constrexpr.constr_expr
val mkRefC : Libnames.qualid -> Constrexpr.constr_expr
val mkCastC :
  Constrexpr.constr_expr * Constr.cast_kind option * Constrexpr.constr_expr ->
  Constrexpr.constr_expr
val mkLambdaC :
  Names.lname list * Constrexpr.binder_kind * Constrexpr.constr_expr *
  Constrexpr.constr_expr -> Constrexpr.constr_expr
val mkLetInC :
  Names.lname * Constrexpr.constr_expr * Constrexpr.constr_expr option *
  Constrexpr.constr_expr -> Constrexpr.constr_expr
val mkProdC :
  Names.lname list * Constrexpr.binder_kind * Constrexpr.constr_expr *
  Constrexpr.constr_expr -> Constrexpr.constr_expr
val mkAppC :
  Constrexpr.constr_expr * Constrexpr.constr_expr list ->
  Constrexpr.constr_expr
val mkLambdaCN :
  ?loc:Loc.t ->
  Constrexpr.local_binder_expr list ->
  Constrexpr.constr_expr -> Constrexpr.constr_expr
val mkProdCN :
  ?loc:Loc.t ->
  Constrexpr.local_binder_expr list ->
  Constrexpr.constr_expr -> Constrexpr.constr_expr
val mkCLambdaN :
  ?loc:Loc.t ->
  Constrexpr.local_binder_expr list ->
  Constrexpr.constr_expr -> Constrexpr.constr_expr
val mkCProdN :
  ?loc:Loc.t ->
  Constrexpr.local_binder_expr list ->
  Constrexpr.constr_expr -> Constrexpr.constr_expr
val mkCPatOr :
  ?loc:Loc.t ->
  Constrexpr.cases_pattern_expr list -> Constrexpr.cases_pattern_expr
val mkAppPattern :
  ?loc:Loc.t ->
  Constrexpr.cases_pattern_expr ->
  Constrexpr.cases_pattern_expr list -> Constrexpr.cases_pattern_expr
val coerce_reference_to_id : Libnames.qualid -> Names.Id.t
val coerce_to_id : Constrexpr.constr_expr -> Names.lident
val coerce_to_name : Constrexpr.constr_expr -> Names.lname
val coerce_to_cases_pattern_expr :
  Constrexpr.constr_expr -> Constrexpr.cases_pattern_expr
val default_binder_kind : Constrexpr.binder_kind
val names_of_local_binders :
  Constrexpr.local_binder_expr list -> Names.lname list
val names_of_local_assums :
  Constrexpr.local_binder_expr list -> Names.lname list
val fold_constr_expr_with_binders :
  (Names.Id.t -> 'a -> 'a) ->
  ('a -> 'b -> Constrexpr.constr_expr -> 'b) ->
  'a -> 'b -> Constrexpr.constr_expr -> 'b
val map_constr_expr_with_binders :
  (Names.Id.t -> 'a -> 'a) ->
  ('a -> Constrexpr.constr_expr -> Constrexpr.constr_expr) ->
  'a -> Constrexpr.constr_expr -> Constrexpr.constr_expr
val replace_vars_constr_expr :
  Names.Id.t Names.Id.Map.t ->
  Constrexpr.constr_expr -> Constrexpr.constr_expr
val free_vars_of_constr_expr : Constrexpr.constr_expr -> Names.Id.Set.t
val occur_var_constr_expr : Names.Id.t -> Constrexpr.constr_expr -> bool
val names_of_constr_expr : Constrexpr.constr_expr -> Names.Id.Set.t
val split_at_annot :
  Constrexpr.local_binder_expr list ->
  Names.lident option ->
  Constrexpr.local_binder_expr list * Constrexpr.local_binder_expr list
val ntn_loc :
  ?loc:Loc.t ->
  Constrexpr.constr_notation_substitution ->
  Constrexpr.notation -> (int * int) list
val patntn_loc :
  ?loc:Loc.t ->
  Constrexpr.cases_pattern_notation_substitution ->
  Constrexpr.notation -> (int * int) list
("DEBUG:rule", [(("sort_name_expr_eq", 762), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "sort_name_expr"), 0, (0)), 100000000, 0, -263), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "sort_name_expr"), 0, (0)), 100000000, 0, -262), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -261), 0), 100000000, 0, -260), 0), 100000000, 0, -259), 0, (("interp/constrexpr_ops.mli", 19, 823, 823), ("interp/constrexpr_ops.mli", 19, 823, 887), 0), 0, Tag1 ("Constrexpr_ops", 0)), 0); (("univ_level_expr_eq", 763), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "univ_level_expr"), 0, (0)), 100000000, 0, -258), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "univ_level_expr"), 0, (0)), 100000000, 0, -257), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -256), 0), 100000000, 0, -255), 0), 100000000, 0, -254), 0, (("interp/constrexpr_ops.mli", 20, 888, 888), ("interp/constrexpr_ops.mli", 20, 888, 955), 0), 0, Tag1 ("Constrexpr_ops", 1)), 0); (("sort_expr_eq", 764), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "sort_expr"), 0, (0)), 100000000, 0, -253), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "sort_expr"), 0, (0)), 100000000, 0, -252), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -251), 0), 100000000, 0, -250), 0), 100000000, 0, -249), 0, (("interp/constrexpr_ops.mli", 21, 956, 956), ("interp/constrexpr_ops.mli", 21, 956, 1005), 0), 0, Tag1 ("Constrexpr_ops", 2)), 0); (("explicitation_eq", 765), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "explicitation"), 0, (0)), 100000000, 0, -248), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "explicitation"), 0, (0)), 100000000, 0, -247), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -246), 0), 100000000, 0, -245), 0), 100000000, 0, -244), 0, (("interp/constrexpr_ops.mli", 23, 1007, 1007), ("interp/constrexpr_ops.mli", 23, 1007, 1068), 0), 0, Tag1 ("Constrexpr_ops", 3)), 0); (("constr_expr_eq_gen", 766), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -243), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -242), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -241), 0), 100000000, 0, -240), 0), 100000000, 0, -239), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -238), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -237), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -236), 0), 100000000, 0, -235), 0), 100000000, 0, -234), 0), 100000000, 0, -233), 0, (("interp/constrexpr_ops.mli", 26, 1106, 1106), ("interp/constrexpr_ops.mli", 26, 1106, 1205), 0), 0, Tag1 ("Constrexpr_ops", 4)), 0); (("constr_expr_eq", 767), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -232), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -231), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -230), 0), 100000000, 0, -229), 0), 100000000, 0, -228), 0, (("interp/constrexpr_ops.mli", 28, 1207, 1207), ("interp/constrexpr_ops.mli", 28, 1207, 1262), 0), 0, Tag1 ("Constrexpr_ops", 5)), 0); (("local_binder_eq", 768), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "local_binder_expr"), 0, (0)), 100000000, 0, -227), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "local_binder_expr"), 0, (0)), 100000000, 0, -226), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -225), 0), 100000000, 0, -224), 0), 100000000, 0, -223), 0, (("interp/constrexpr_ops.mli", 32, 1394, 1394), ("interp/constrexpr_ops.mli", 32, 1394, 1462), 0), 0, Tag1 ("Constrexpr_ops", 6)), 0); (("binder_kind_eq", 769), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "binder_kind"), 0, (0)), 100000000, 0, -222), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "binder_kind"), 0, (0)), 100000000, 0, -221), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -220), 0), 100000000, 0, -219), 0), 100000000, 0, -218), 0, (("interp/constrexpr_ops.mli", 35, 1541, 1541), ("interp/constrexpr_ops.mli", 35, 1541, 1596), 0), 0, Tag1 ("Constrexpr_ops", 7)), 0); (("constr_loc", 770), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -217), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -216)], (0)), 100000000, 0, -215), 0), 100000000, 0, -214), 0, (("interp/constrexpr_ops.mli", 40, 1664, 1664), ("interp/constrexpr_ops.mli", 40, 1664, 1708), 0), 0, Tag1 ("Constrexpr_ops", 9)), 0); (("cases_pattern_expr_loc", 771), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "cases_pattern_expr"), 0, (0)), 100000000, 0, -213), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -212)], (0)), 100000000, 0, -211), 0), 100000000, 0, -210), 0, (("interp/constrexpr_ops.mli", 41, 1709, 1709), ("interp/constrexpr_ops.mli", 41, 1709, 1772), 0), 0, Tag1 ("Constrexpr_ops", 10)), 0); (("local_binders_loc", 772), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "local_binder_expr"), 0, (0)), 100000000, 0, -209)], (0)), 100000000, 0, -208), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -207)], (0)), 100000000, 0, -206), 0), 100000000, 0, -205), 0, (("interp/constrexpr_ops.mli", 42, 1773, 1773), ("interp/constrexpr_ops.mli", 42, 1773, 1835), 0), 0, Tag1 ("Constrexpr_ops", 11)), 0); (("mkIdentC", 773), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -204), (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -203), 0), 100000000, 0, -202), 0, (("interp/constrexpr_ops.mli", 50, 1945, 1945), ("interp/constrexpr_ops.mli", 50, 1945, 1979), 0), 0, Tag1 ("Constrexpr_ops", 12)), 0); (("mkRefC", 774), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -201), (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -200), 0), 100000000, 0, -199), 0, (("interp/constrexpr_ops.mli", 51, 1980, 1980), ("interp/constrexpr_ops.mli", 51, 1980, 2014), 0), 0, Tag1 ("Constrexpr_ops", 13)), 0); (("mkCastC", 775), ((Tag1 (0, (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -195); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "cast_kind"), 0, (0)), 100000000, 0, -197)], (0)), 100000000, 0, -196); (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -198)]), 100000000, 0, -194), (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -193), 0), 100000000, 0, -192), 0, (("interp/constrexpr_ops.mli", 52, 2015, 2015), ("interp/constrexpr_ops.mli", 52, 2015, 2095), 0), 0, Tag1 ("Constrexpr_ops", 15)), 0); (("mkLambdaC", 776), ((Tag1 (0, (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Names")), "lname"), 0, (0)), 100000000, 0, -188)], (0)), 100000000, 0, -187); (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "binder_kind"), 0, (0)), 100000000, 0, -189); (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -190); (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -191)]), 100000000, 0, -186), (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -185), 0), 100000000, 0, -184), 0, (("interp/constrexpr_ops.mli", 53, 2096, 2096), ("interp/constrexpr_ops.mli", 53, 2096, 2179), 0), 0, Tag1 ("Constrexpr_ops", 16)), 0); (("mkLetInC", 777), ((Tag1 (0, (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Names")), "lname"), 0, (0)), 100000000, 0, -179); (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -180); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -182)], (0)), 100000000, 0, -181); (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -183)]), 100000000, 0, -178), (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -177), 0), 100000000, 0, -176), 0, (("interp/constrexpr_ops.mli", 54, 2180, 2180), ("interp/constrexpr_ops.mli", 54, 2180, 2264), 0), 0, Tag1 ("Constrexpr_ops", 17)), 0); (("mkProdC", 778), ((Tag1 (0, (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Names")), "lname"), 0, (0)), 100000000, 0, -172)], (0)), 100000000, 0, -171); (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "binder_kind"), 0, (0)), 100000000, 0, -173); (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -174); (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -175)]), 100000000, 0, -170), (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -169), 0), 100000000, 0, -168), 0, (("interp/constrexpr_ops.mli", 55, 2265, 2265), ("interp/constrexpr_ops.mli", 55, 2265, 2346), 0), 0, Tag1 ("Constrexpr_ops", 18)), 0); (("mkAppC", 779), ((Tag1 (0, (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -165); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -167)], (0)), 100000000, 0, -166)]), 100000000, 0, -164), (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -163), 0), 100000000, 0, -162), 0, (("interp/constrexpr_ops.mli", 57, 2348, 2348), ("interp/constrexpr_ops.mli", 57, 2348, 2406), 0), 0, Tag1 ("Constrexpr_ops", 19)), 0); (("mkLambdaCN", 780), ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -161)], (0)), 100000000, 0, -160), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "local_binder_expr"), 0, (0)), 100000000, 0, -159)], (0)), 100000000, 0, -158), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -157), (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -156), 0), 100000000, 0, -155), 0), 100000000, 0, -154), 0), 100000000, 0, -153), 0, (("interp/constrexpr_ops.mli", 62, 2557, 2557), ("interp/constrexpr_ops.mli", 62, 2557, 2640), 0), 0, Tag1 ("Constrexpr_ops", 20)), 0); (("mkProdCN", 781), ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -152)], (0)), 100000000, 0, -151), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "local_binder_expr"), 0, (0)), 100000000, 0, -150)], (0)), 100000000, 0, -149), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -148), (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -147), 0), 100000000, 0, -146), 0), 100000000, 0, -145), 0), 100000000, 0, -144), 0, (("interp/constrexpr_ops.mli", 63, 2641, 2641), ("interp/constrexpr_ops.mli", 63, 2641, 2722), 0), 0, Tag1 ("Constrexpr_ops", 21)), 0); (("mkCLambdaN", 782), ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -143)], (0)), 100000000, 0, -142), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "local_binder_expr"), 0, (0)), 100000000, 0, -141)], (0)), 100000000, 0, -140), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -139), (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -138), 0), 100000000, 0, -137), 0), 100000000, 0, -136), 0), 100000000, 0, -135), 0, (("interp/constrexpr_ops.mli", 68, 2838, 2838), ("interp/constrexpr_ops.mli", 68, 2838, 2921), 0), 0, Tag1 ("Constrexpr_ops", 22)), 0); (("mkCProdN", 783), ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -134)], (0)), 100000000, 0, -133), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "local_binder_expr"), 0, (0)), 100000000, 0, -132)], (0)), 100000000, 0, -131), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -130), (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -129), 0), 100000000, 0, -128), 0), 100000000, 0, -127), 0), 100000000, 0, -126), 0, (("interp/constrexpr_ops.mli", 69, 2922, 2922), ("interp/constrexpr_ops.mli", 69, 2922, 3003), 0), 0, Tag1 ("Constrexpr_ops", 23)), 0); (("mkCPatOr", 784), ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -125)], (0)), 100000000, 0, -124), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "cases_pattern_expr"), 0, (0)), 100000000, 0, -123)], (0)), 100000000, 0, -122), (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "cases_pattern_expr"), 0, (0)), 100000000, 0, -121), 0), 100000000, 0, -120), 0), 100000000, 0, -119), 0, (("interp/constrexpr_ops.mli", 74, 3119, 3119), ("interp/constrexpr_ops.mli", 74, 3119, 3193), 0), 0, Tag1 ("Constrexpr_ops", 24)), 0); (("mkAppPattern", 785), ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -118)], (0)), 100000000, 0, -117), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "cases_pattern_expr"), 0, (0)), 100000000, 0, -116), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "cases_pattern_expr"), 0, (0)), 100000000, 0, -115)], (0)), 100000000, 0, -114), (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "cases_pattern_expr"), 0, (0)), 100000000, 0, -113), 0), 100000000, 0, -112), 0), 100000000, 0, -111), 0), 100000000, 0, -110), 0, (("interp/constrexpr_ops.mli", 76, 3195, 3195), ("interp/constrexpr_ops.mli", 76, 3195, 3295), 0), 0, Tag1 ("Constrexpr_ops", 25)), 0); (("coerce_reference_to_id", 786), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -109), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -108), 0), 100000000, 0, -107), 0, (("interp/constrexpr_ops.mli", 81, 3374, 3374), ("interp/constrexpr_ops.mli", 81, 3374, 3417), 0), 0, Tag1 ("Constrexpr_ops", 26)), 0); (("coerce_to_id", 787), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -106), (Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -105), 0), 100000000, 0, -104), 0, (("interp/constrexpr_ops.mli", 84, 3452, 3452), ("interp/constrexpr_ops.mli", 84, 3452, 3492), 0), 0, Tag1 ("Constrexpr_ops", 27)), 0); (("coerce_to_name", 788), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -103), (Tag3 (Tag1 ((Tag2 ("Names")), "lname"), 0, (0)), 100000000, 0, -102), 0), 100000000, 0, -101), 0, (("interp/constrexpr_ops.mli", 87, 3546, 3546), ("interp/constrexpr_ops.mli", 87, 3546, 3587), 0), 0, Tag1 ("Constrexpr_ops", 28)), 0); (("coerce_to_cases_pattern_expr", 789), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -100), (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "cases_pattern_expr"), 0, (0)), 100000000, 0, -99), 0), 100000000, 0, -98), 0, (("interp/constrexpr_ops.mli", 90, 3654, 3654), ("interp/constrexpr_ops.mli", 90, 3654, 3722), 0), 0, Tag1 ("Constrexpr_ops", 29)), 0); (("default_binder_kind", 790), ((Tag3 (Tag1 ((Tag2 ("Constrexpr")), "binder_kind"), 0, (0)), 100000000, 0, -97), 0, (("interp/constrexpr_ops.mli", 94, 3756, 3756), ("interp/constrexpr_ops.mli", 94, 3756, 3793), 0), 0, Tag1 ("Constrexpr_ops", 30)), 0); (("names_of_local_binders", 791), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "local_binder_expr"), 0, (0)), 100000000, 0, -96)], (0)), 100000000, 0, -95), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Names")), "lname"), 0, (0)), 100000000, 0, -94)], (0)), 100000000, 0, -93), 0), 100000000, 0, -92), 0, (("interp/constrexpr_ops.mli", 96, 3795, 3795), ("interp/constrexpr_ops.mli", 96, 3795, 3860), 0), 0, Tag1 ("Constrexpr_ops", 31)), 0); (("names_of_local_assums", 792), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "local_binder_expr"), 0, (0)), 100000000, 0, -91)], (0)), 100000000, 0, -90), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Names")), "lname"), 0, (0)), 100000000, 0, -89)], (0)), 100000000, 0, -88), 0), 100000000, 0, -87), 0, (("interp/constrexpr_ops.mli", 99, 3926, 3926), ("interp/constrexpr_ops.mli", 99, 3926, 3990), 0), 0, Tag1 ("Constrexpr_ops", 32)), 0); (("fold_constr_expr_with_binders", 793), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -86), (Tag1 (0, ((("a")), 100000000, 0, -79), ((("a")), 100000000, 0, -79), 0), 100000000, 0, -85), 0), 100000000, 0, -84), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -79), (Tag1 (0, ((("b")), 100000000, 0, -77), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -83), ((("b")), 100000000, 0, -77), 0), 100000000, 0, -82), 0), 100000000, 0, -81), 0), 100000000, 0, -80), (Tag1 (0, ((("a")), 100000000, 0, -79), (Tag1 (0, ((("b")), 100000000, 0, -77), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -78), ((("b")), 100000000, 0, -77), 0), 100000000, 0, -76), 0), 100000000, 0, -75), 0), 100000000, 0, -74), 0), 100000000, 0, -73), 0), 100000000, 0, -72), 0, (("interp/constrexpr_ops.mli", 106, 4147, 4147), ("interp/constrexpr_ops.mli", 107, 4205, 4272), 0), 0, Tag1 ("Constrexpr_ops", 33)), 0); (("map_constr_expr_with_binders", 794), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -71), (Tag1 (0, ((("a")), 100000000, 0, -64), ((("a")), 100000000, 0, -64), 0), 100000000, 0, -70), 0), 100000000, 0, -69), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -64), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -68), (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -67), 0), 100000000, 0, -66), 0), 100000000, 0, -65), (Tag1 (0, ((("a")), 100000000, 0, -64), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -63), (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -62), 0), 100000000, 0, -61), 0), 100000000, 0, -60), 0), 100000000, 0, -59), 0), 100000000, 0, -58), 0, (("interp/constrexpr_ops.mli", 112, 4424, 4424), ("interp/constrexpr_ops.mli", 114, 4521, 4559), 0), 0, Tag1 ("Constrexpr_ops", 34)), 0); (("replace_vars_constr_expr", 795), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "Map"), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -57)], (0)), 100000000, 0, -56), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -55), (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -54), 0), 100000000, 0, -53), 0), 100000000, 0, -52), 0, (("interp/constrexpr_ops.mli", 116, 4561, 4561), ("interp/constrexpr_ops.mli", 117, 4592, 4637), 0), 0, Tag1 ("Constrexpr_ops", 35)), 0); (("free_vars_of_constr_expr", 796), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -51), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "Set"), "t"), 0, (0)), 100000000, 0, -50), 0), 100000000, 0, -49), 0, (("interp/constrexpr_ops.mli", 119, 4639, 4639), ("interp/constrexpr_ops.mli", 119, 4639, 4693), 0), 0, Tag1 ("Constrexpr_ops", 36)), 0); (("occur_var_constr_expr", 797), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -48), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -47), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -46), 0), 100000000, 0, -45), 0), 100000000, 0, -44), 0, (("interp/constrexpr_ops.mli", 120, 4694, 4694), ("interp/constrexpr_ops.mli", 120, 4694, 4749), 0), 0, Tag1 ("Constrexpr_ops", 37)), 0); (("names_of_constr_expr", 798), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -43), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "Set"), "t"), 0, (0)), 100000000, 0, -42), 0), 100000000, 0, -41), 0, (("interp/constrexpr_ops.mli", 123, 4817, 4817), ("interp/constrexpr_ops.mli", 123, 4817, 4867), 0), 0, Tag1 ("Constrexpr_ops", 38)), 0); (("split_at_annot", 799), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "local_binder_expr"), 0, (0)), 100000000, 0, -40)], (0)), 100000000, 0, -39), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -38)], (0)), 100000000, 0, -37), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "local_binder_expr"), 0, (0)), 100000000, 0, -34)], (0)), 100000000, 0, -33); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "local_binder_expr"), 0, (0)), 100000000, 0, -36)], (0)), 100000000, 0, -35)]), 100000000, 0, -32), 0), 100000000, 0, -31), 0), 100000000, 0, -30), 0, (("interp/constrexpr_ops.mli", 125, 4869, 4869), ("interp/constrexpr_ops.mli", 125, 4869, 4980), 0), 0, Tag1 ("Constrexpr_ops", 39)), 0); (("ntn_loc", 800), ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -29)], (0)), 100000000, 0, -28), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_notation_substitution"), 0, (0)), 100000000, 0, -27), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "notation"), 0, (0)), 100000000, 0, -26), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -24); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -25)]), 100000000, 0, -23)], (0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0), 100000000, 0, -20), 0), 100000000, 0, -19), 0, (("interp/constrexpr_ops.mli", 127, 4982, 4982), ("interp/constrexpr_ops.mli", 127, 4982, 5070), 0), 0, Tag1 ("Constrexpr_ops", 40)), 0); (("patntn_loc", 801), ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -18)], (0)), 100000000, 0, -17), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "cases_pattern_notation_substitution"), 0, (0)), 100000000, 0, -16), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "notation"), 0, (0)), 100000000, 0, -15), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -13); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -14)]), 100000000, 0, -12)], (0)), 100000000, 0, -11), 0), 100000000, 0, -10), 0), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("interp/constrexpr_ops.mli", 128, 5071, 5071), ("interp/constrexpr_ops.mli", 128, 5071, 5169), 0), 0, Tag1 ("Constrexpr_ops", 41)), 0); (("error_invalid_pattern_notation", 802), ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -7)], (0)), 100000000, 0, -6), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5), ((("a")), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("interp/constrexpr_ops.mli", 131, 5211, 5211), ("interp/constrexpr_ops.mli", 131, 5211, 5272), 0), 0, Tag1 ("Constrexpr_ops", 42)), 0)], "Constrexpr_ops", [("Constrexpr_ops", ("\213\184\168\250V~\005\238\191\016;\1330\250\207(")); ("Z", ("\253\196\2168\027\199O\134\220\218\031'\1484\233o")); ("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Vmemitcodes", ("wCd\138\165\158DD\241gH\236.\210\197\247")); ("Vmbytecodes", ("\025\021\151\137Dx\149W\236+[\143f\208\160\016")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Unix", (":B72R\011\005Sj\189)\011\239PH\254")); ("UnivSubst", ("\190qu\031mc\130\181\003G]\132\"\219m)")); ("UnivProblem", ("6'\161\018\181\001.\253\000\141a6\171\1727\155")); ("UnivNames", ("%\151_\209%+JM$n\001\232\194n\178N")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UState", ("SD\203\215|\136\n\251\239\208\148\215C\n\167\005")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Summary", ("\148G\135\226\024L3\246\021\028U\146\164`\253\250")); ("Store", ("/dT\252\145\179pq\216{\181\206\190K+U")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Random", ("\020\005Xq\171\026\218\152X\135\254\023\133zK\200")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("Section", ("\245\207\b\021\142v=\155#w\246}\"4b\006")); ("Safe_typing", (")\250?\164\145\132\241\127\186\152h+\145\"\237l")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("Range", ("\218\130\001r\237\r\144\171\164\021l\155\196\143sg")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Pattern", ("\195C\140Wb=\022\222\208\227^K\003\020\215X")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("NumTok", ("vd\023^\251\244B\166\145'\156\196-0\027\169")); ("Nativevalues", ("8:\007\025e\226c,\001\171\146#l\210\171\152")); ("Nativelib", ("V\239\205Y1\147E:,\176\196Hy\1483|")); ("Nativecode", ("\190\185\255\006m\012\210\163\138Rz\247\15283\183")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Namegen", ("\187\222\224T\255\020\1808-\212*\164\131\177\157x")); ("Monad", ("\244\171T\157\194p\187\160\149\195{\132\222\020\253\148")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Libnames", ("fp\0255\167\162\209\153\137\161\169#\246\193\003\198")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hook", ("\183\194\223\003\155\169',\187\240a;E\b\1396")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Gramlib__Stream", ("\248\\H\205_76\253\136\146\200\031\165\021=t")); ("Gramlib", ("\154\143\210e\021i\246\176\224\194\220\217\007\145\139A")); ("Glob_term", ("\165=a\227\160\153.\021_$\232\209T\236\153O")); ("Genlambda", ("\170}\024\241\141\222\136S\169\219\2212i\134KI")); ("Genarg", ("\1434\015\001\152\196\005s\156\136\195\185\247\b3\t")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evd", ("\211\205p\193\216\129r\006\239oN\142ar\196\175")); ("Evar_kinds", ("\023L\186\132\218}\254\221\185\198\220\200h\003{\021")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Environ", ("\171b\1579\229<\003Z\147IL\225X\254\182\204")); ("Entries", ("\172\201\198\221Ap\027_{\174\141C\021\";p")); ("EConstr", ("\201aW\156\157;N\004\201V\208\006L\166\211)")); ("Dyn", ("\131z`\205v\2306\007x\027&K.?;\169")); ("Declarations", ("\239\137n\019\030w$\182\166z^{\b\206\163\175")); ("DAst", ("\224/\200)\007\184ni\134\b\139\204\241\005w\212")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Conversion", ("\158\150&\195M\tv\127|\029\158RRK\211A")); ("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constrexpr", ("p'r\245\184chL\183\249\"\213]\1741\237")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CUnix", ("\140Zl\153\167\011J\015\005|th\247OTu")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CEphemeron", ("\204I\179-\206(x4\173\229\250\001PkH\151")); ("CDebug", ("^4\210p7\239!3\138\138\213?\239`\250\157")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])
val error_invalid_pattern_notation : ?loc:Loc.t -> unit -> 'a

val allocc : Ssreflect_plugin.Ssrast.ssrocc
val hyp_id : Ssreflect_plugin.Ssrast.ssrhyp -> Names.Id.t
val hyps_ids : Ssreflect_plugin.Ssrast.ssrhyps -> Names.Id.t list
val check_hyp_exists :
  ('a, 'b) Context.Named.pt -> Ssreflect_plugin.Ssrast.ssrhyp -> unit
val test_hyp_exists :
  ('a, 'b) Context.Named.pt -> Ssreflect_plugin.Ssrast.ssrhyp -> bool
val check_hyps_uniq :
  Names.Id.t list -> Ssreflect_plugin.Ssrast.ssrhyps -> unit
val not_section_id : Names.Id.t -> bool
val hyp_err : ?loc:Loc.t -> string -> Names.Id.t -> 'a
val hoik :
  (Ssreflect_plugin.Ssrast.ssrhyp -> 'a) ->
  Ssreflect_plugin.Ssrast.ssrhyp_or_id -> 'a
val hoi_id : Ssreflect_plugin.Ssrast.ssrhyp_or_id -> Names.Id.t
val mk_hint : 'a -> 'a Ssreflect_plugin.Ssrast.ssrhint
val mk_orhint : 'a -> bool * 'a
val nullhint : bool * 'a list
val nohint : 'a Ssreflect_plugin.Ssrast.ssrhint
val errorstrm : Pp.t -> 'a
val anomaly : string -> 'a
val array_app_tl : 'a array -> 'a list -> 'a list
val array_list_of_tl : 'a array -> 'a list
val array_fold_right_from : int -> ('a -> 'b -> 'b) -> 'a array -> 'b -> 'b
val option_assert_get : 'a option -> Pp.t -> 'a
val mkRHole : Glob_term.glob_constr
val mkRHoles : int -> Glob_term.glob_constr list
val isRHoles : Glob_term.glob_constr list -> bool
val mkRApp :
  Glob_term.glob_constr ->
  Glob_term.glob_constr list -> Glob_term.glob_constr
val mkRVar : Names.Id.t -> Glob_term.glob_constr
val mkRltacVar : Names.Id.t -> Glob_term.glob_constr
val mkRCast :
  Glob_term.glob_constr -> Glob_term.glob_constr -> Glob_term.glob_constr
val mkRType : Glob_term.glob_constr
val mkRProp : Glob_term.glob_constr
val mkRArrow :
  Glob_term.glob_constr -> Glob_term.glob_constr -> Glob_term.glob_constr
val mkRConstruct : Names.constructor -> Glob_term.glob_constr
val mkRInd : Names.inductive -> Glob_term.glob_constr
val mkRLambda :
  Names.Name.t ->
  Glob_term.glob_constr -> Glob_term.glob_constr -> Glob_term.glob_constr
val mkRnat : int -> Glob_term.glob_constr
val mkCHole : Loc.t option -> Constrexpr.constr_expr
val mkCHoles : ?loc:Loc.t -> int -> Constrexpr.constr_expr list
val mkCVar : ?loc:Loc.t -> Names.Id.t -> Constrexpr.constr_expr
val mkCCast :
  ?loc:Loc.t ->
  Constrexpr.constr_expr -> Constrexpr.constr_expr -> Constrexpr.constr_expr
val mkCType : Loc.t option -> Constrexpr.constr_expr
val mkCProp : Loc.t option -> Constrexpr.constr_expr
val mkCArrow :
  ?loc:Loc.t ->
  Constrexpr.constr_expr -> Constrexpr.constr_expr -> Constrexpr.constr_expr
val mkCLambda :
  ?loc:Loc.t ->
  Names.Name.t ->
  Constrexpr.constr_expr -> Constrexpr.constr_expr -> Constrexpr.constr_expr
val isCHoles : Constrexpr.constr_expr list -> bool
val isCxHoles : (Constrexpr.constr_expr * 'a option) list -> bool
val intern_term :
  Ltac_plugin.Tacinterp.interp_sign ->
  Environ.env -> Ssreflect_plugin.Ssrast.ssrterm -> Glob_term.glob_constr
val interp_term :
  Environ.env ->
  Evd.evar_map ->
  Ltac_plugin.Tacinterp.interp_sign ->
  Ssreflect_plugin.Ssrast.ssrterm -> Evd.evar_map * EConstr.t
val interp_hyp :
  Ssreflect_plugin.Ssrast.ist ->
  Environ.env ->
  Evd.evar_map ->
  Ssreflect_plugin.Ssrast.ssrhyp -> Ssreflect_plugin.Ssrast.ssrhyp
val interp_hyps :
  Ssreflect_plugin.Ssrast.ist ->
  Environ.env ->
  Evd.evar_map ->
  Ssreflect_plugin.Ssrast.ssrhyps -> Ssreflect_plugin.Ssrast.ssrhyps
val interp_refine :
  Environ.env ->
  Evd.evar_map ->
  Ltac_plugin.Tacinterp.interp_sign ->
  concl:EConstr.constr ->
  Glob_term.glob_constr -> Evd.evar_map * EConstr.constr
val interp_open_constr :
  Environ.env ->
  Evd.evar_map ->
  Ltac_plugin.Tacinterp.interp_sign ->
  Genintern.glob_constr_and_expr -> Evd.evar_map * EConstr.t
val splay_open_constr :
  Environ.env ->
  Evd.evar_map * EConstr.t ->
  (Names.Name.t Context.binder_annot * EConstr.t) list * EConstr.t
val isAppInd : Environ.env -> Evd.evar_map -> EConstr.types -> bool
val mk_term :
  Ssreflect_plugin.Ssrast.ssrtermkind ->
  Constrexpr.constr_expr -> Ssreflect_plugin.Ssrast.ssrterm
val mk_lterm : Constrexpr.constr_expr -> Ssreflect_plugin.Ssrast.ssrterm
val mk_ast_closure_term :
  [ `At | `DoubleParens | `None | `Parens ] ->
  Constrexpr.constr_expr -> Ssreflect_plugin.Ssrast.ast_closure_term
val interp_ast_closure_term :
  Geninterp.interp_sign ->
  Environ.env ->
  Evd.evar_map ->
  Ssreflect_plugin.Ssrast.ast_closure_term ->
  Ssreflect_plugin.Ssrast.ast_closure_term
val subst_ast_closure_term :
  Mod_subst.substitution ->
  Ssreflect_plugin.Ssrast.ast_closure_term ->
  Ssreflect_plugin.Ssrast.ast_closure_term
val glob_ast_closure_term :
  Genintern.glob_sign ->
  Ssreflect_plugin.Ssrast.ast_closure_term ->
  Ssreflect_plugin.Ssrast.ast_closure_term
val ssrterm_of_ast_closure_term :
  Ssreflect_plugin.Ssrast.ast_closure_term -> Ssreflect_plugin.Ssrast.ssrterm
val ssrdgens_of_parsed_dgens :
  (Ssreflect_plugin.Ssrast.ssrdocc * Ssrmatching_plugin.Ssrmatching.cpattern)
  list list * Ssreflect_plugin.Ssrast.ssrclear ->
  Ssreflect_plugin.Ssrast.ssrdgens
val is_internal_name : string -> bool
val add_internal_name : (string -> bool) -> unit
val mk_internal_id : string -> Names.Id.t
val mk_tagged_id : string -> int -> Names.Id.t
val mk_evar_name : int -> Names.Name.t
val ssr_anon_hyp : string
val type_id : Environ.env -> Evd.evar_map -> EConstr.types -> Names.Id.t
val abs_evars :
  Environ.env ->
  Evd.evar_map ->
  ?rigid:Evar.t list ->
  Evd.evar_map * EConstr.t -> EConstr.t * Evar.t list * UState.t
val abs_cterm : Environ.env -> Evd.evar_map -> int -> EConstr.t -> EConstr.t
val constr_name : Evd.evar_map -> EConstr.t -> Names.Name.t
val mkSsrRef : string -> Names.GlobRef.t
val mkSsrRRef : string -> Glob_term.glob_constr * 'a option
val mkSsrConst :
  Environ.env -> Evd.evar_map -> string -> Evd.evar_map * EConstr.t
val is_discharged_id : Names.Id.t -> bool
val mk_discharged_id : Names.Id.t -> Names.Id.t
val is_tagged : string -> string -> bool
val has_discharged_tag : string -> bool
val ssrqid : string -> Libnames.qualid
val mk_anon_id : string -> Names.Id.t list -> Names.Id.t
val nbargs_open_constr : Environ.env -> Evd.evar_map * EConstr.t -> int
val pf_nbargs : Environ.env -> Evd.evar_map -> EConstr.t -> int
val ssrevaltac :
  Ltac_plugin.Tacinterp.interp_sign ->
  Ltac_plugin.Tacinterp.Value.t -> unit Proofview.tactic
val convert_concl_no_check : EConstr.t -> unit Proofview.tactic
val convert_concl : check:bool -> EConstr.t -> unit Proofview.tactic
val red_safe :
  Reductionops.reduction_function ->
  Environ.env -> Evd.evar_map -> EConstr.t -> EConstr.t
val red_product_skip_id :
  Environ.env -> Evd.evar_map -> EConstr.t -> EConstr.t
val ssrautoprop_tac : unit Proofview.tactic ref
val mkProt :
  Environ.env ->
  Evd.evar_map -> EConstr.t -> EConstr.t -> Evd.evar_map * EConstr.t
val mkEtaApp : EConstr.t -> int -> int -> EConstr.t
val mkRefl :
  Environ.env ->
  Evd.evar_map -> EConstr.t -> EConstr.t -> Evd.evar_map * EConstr.t
val discharge_hyp :
  Names.Id.t * (Names.Id.t * string) -> unit Proofview.tactic
val view_error :
  string -> Ssreflect_plugin.Ssrast.ssrterm -> 'a Proofview.tactic
val top_id : Names.Id.t
val abs_ssrterm :
  ?resolve_typeclasses:bool ->
  Ssreflect_plugin.Ssrast.ist ->
  Environ.env ->
  Evd.evar_map ->
  Ssreflect_plugin.Ssrast.ssrterm -> Evd.evar_map * EConstr.t * int
val pf_interp_ty :
  ?resolve_typeclasses:bool ->
  Environ.env ->
  Evd.evar_map ->
  Ltac_plugin.Tacinterp.interp_sign ->
  Ssreflect_plugin.Ssrast.ssrtermkind *
  (Glob_term.glob_constr * Constrexpr.constr_expr option) ->
  Evd.evar_map * int * EConstr.t * EConstr.t
val ssr_n_tac : string -> int -> unit Proofview.tactic
val donetac : int -> unit Proofview.tactic
val applyn :
  with_evars:bool ->
  ?beta:bool ->
  ?with_shelve:bool ->
  ?first_goes_last:bool -> int -> EConstr.t -> unit Proofview.tactic
exception NotEnoughProducts
val saturate :
  ?beta:bool ->
  ?bi_types:bool ->
  Environ.env ->
  Evd.evar_map ->
  EConstr.constr ->
  ?ty:EConstr.types ->
  int ->
  EConstr.constr * EConstr.types *
  (int * EConstr.constr * EConstr.types) list * Evd.evar_map
val refine_with :
  ?first_goes_last:bool ->
  ?beta:bool ->
  ?with_evars:bool -> Evd.evar_map * EConstr.t -> unit Proofview.tactic
val resolve_typeclasses :
  Environ.env -> Evd.evar_map -> where:EConstr.t -> fail:bool -> Evd.evar_map
val rewritetac :
  ?under:bool ->
  Ssreflect_plugin.Ssrast.ssrdir -> EConstr.t -> unit Proofview.tactic
type name_hint = (int * EConstr.types array) option ref
val gentac :
  Ssreflect_plugin.Ssrast.ssrdocc * Ssrmatching_plugin.Ssrmatching.cpattern ->
  unit Proofview.tactic
val genstac :
  ((Ssreflect_plugin.Ssrast.ssrhyp list option *
    Ssrmatching_plugin.Ssrmatching.occ) *
   Ssrmatching_plugin.Ssrmatching.cpattern)
  list * Ssreflect_plugin.Ssrast.ssrhyp list -> unit Proofview.tactic
val interp_gen :
  Environ.env ->
  Evd.evar_map ->
  concl:EConstr.t ->
  bool ->
  (Ssreflect_plugin.Ssrast.ssrhyp list option *
   Ssrmatching_plugin.Ssrmatching.occ) *
  Ssrmatching_plugin.Ssrmatching.cpattern ->
  Evd.evar_map *
  (EConstr.t * EConstr.t * Ssreflect_plugin.Ssrast.ssrhyp list)
val introid : ?orig:Names.Name.t ref -> Names.Id.t -> unit Proofview.tactic
val intro_anon : unit Proofview.tactic
val interp_clr :
  Evd.evar_map ->
  Ssreflect_plugin.Ssrast.ssrhyps option *
  (Ssreflect_plugin.Ssrast.ssrtermkind * EConstr.t) ->
  Ssreflect_plugin.Ssrast.ssrhyps
val genclrtac :
  EConstr.constr ->
  EConstr.constr list ->
  Ssreflect_plugin.Ssrast.ssrhyp list -> unit Proofview.tactic
val cleartac : Ssreflect_plugin.Ssrast.ssrhyps -> unit Proofview.tactic
val tclMULT :
  int * Ssreflect_plugin.Ssrast.ssrmmod ->
  unit Proofview.tactic -> unit Proofview.tactic
val unprotecttac : unit Proofview.tactic
val is_protect : EConstr.t -> Environ.env -> Evd.evar_map -> bool
val abs_wgen :
  Environ.env ->
  Evd.evar_map ->
  bool ->
  (Names.Id.t -> Names.Id.t) ->
  'a *
  ((Ssreflect_plugin.Ssrast.ssrhyp_or_id * string) *
   Ssrmatching_plugin.Ssrmatching.cpattern option)
  option ->
  EConstr.t list * EConstr.t -> Evd.evar_map * EConstr.t list * EConstr.t
val clr_of_wgen :
  Ssreflect_plugin.Ssrast.ssrhyps *
  ((Ssreflect_plugin.Ssrast.ssrhyp_or_id * 'a) * 'b option) option ->
  unit Proofview.tactic list -> unit Proofview.tactic list
val unfold : EConstr.t list -> unit Proofview.tactic
val tclINTERP_AST_CLOSURE_TERM_AS_CONSTR :
  Ssreflect_plugin.Ssrast.ast_closure_term -> EConstr.t list Proofview.tactic
val tacTYPEOF : EConstr.t -> EConstr.types Proofview.tactic
val tclINTRO_ID : Names.Id.t -> unit Proofview.tactic
val tclINTRO_ANON : ?seed:string -> unit -> unit Proofview.tactic
type intro_id = Anon | Id of Names.Id.t | Seed of string
val tclINTRO :
  id:intro_id ->
  conclusion:(orig_name:Names.Name.t ->
              new_name:Names.Id.t -> unit Proofview.tactic) ->
  unit Proofview.tactic
val tclRENAME_HD_PROD : Names.Name.t -> unit Proofview.tactic
val tcl0G : default:'a -> 'a Proofview.tactic -> 'a Proofview.tactic
val tclFIRSTa : 'a Proofview.tactic list -> 'a Proofview.tactic
val tclFIRSTi : (int -> 'a Proofview.tactic) -> int -> 'a Proofview.tactic
val tacCONSTR_NAME :
  ?name:Names.Name.t -> EConstr.t -> Names.Name.t Proofview.tactic
val tacMKPROD :
  EConstr.t ->
  ?name:Names.Name.t -> EConstr.types -> EConstr.types Proofview.tactic
val tacINTERP_CPATTERN :
  Ssrmatching_plugin.Ssrmatching.cpattern ->
  Ssrmatching_plugin.Ssrmatching.pattern Proofview.tactic
val tacUNIFY : EConstr.t -> EConstr.t -> unit Proofview.tactic
val tacIS_INJECTION_CASE :
  ?ty:EConstr.types -> EConstr.t -> bool Proofview.tactic
val tclWITHTOP :
  (EConstr.t -> unit Proofview.tactic) -> unit Proofview.tactic
val tacMK_SSR_CONST : string -> EConstr.t Proofview.tactic
module type StateType = sig type state val init : state end
module MakeState :
  functor (S : StateType) ->
    sig
      val tclGET :
        (S.state -> unit Proofview.tactic) -> unit Proofview.tactic
      val tclGET1 : (S.state -> 'a Proofview.tactic) -> 'a Proofview.tactic
      val tclSET : S.state -> unit Proofview.tactic
      val tacUPDATE :
        (S.state -> S.state Proofview.tactic) -> unit Proofview.tactic
      val get : Proofview.Goal.t -> S.state
    end
val is_ind_ref :
  Environ.env -> Evd.evar_map -> EConstr.t -> Names.GlobRef.t -> bool
val is_construct_ref :
  Environ.env -> Evd.evar_map -> EConstr.t -> Names.GlobRef.t -> bool
val is_const_ref :
  ("DEBUG:rule", [(("allocc", 1903), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ssrocc"), 0, (0)), 100000000, 0, -922), 0, (("plugins/ssr/ssrcommon.mli", 23, 858, 858), ("plugins/ssr/ssrcommon.mli", 23, 858, 877), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 0)), 0); (("hyp_id", 1904), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ssrhyp"), 0, (0)), 100000000, 0, -921), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -920), 0), 100000000, 0, -919), 0, (("plugins/ssr/ssrcommon.mli", 27, 957, 957), ("plugins/ssr/ssrcommon.mli", 27, 957, 984), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 1)), 0); (("hyps_ids", 1905), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ssrhyps"), 0, (0)), 100000000, 0, -918), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -917)], (0)), 100000000, 0, -916), 0), 100000000, 0, -915), 0, (("plugins/ssr/ssrcommon.mli", 28, 985, 985), ("plugins/ssr/ssrcommon.mli", 28, 985, 1020), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 2)), 0); (("check_hyp_exists", 1906), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Context")), "Named"), "pt"), [((("a")), 100000000, 0, -913); ((("b")), 100000000, 0, -914)], (0)), 100000000, 0, -912), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ssrhyp"), 0, (0)), 100000000, 0, -911), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -910), 0), 100000000, 0, -909), 0), 100000000, 0, -908), 0, (("plugins/ssr/ssrcommon.mli", 29, 1021, 1021), ("plugins/ssr/ssrcommon.mli", 29, 1021, 1087), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 3)), 0); (("test_hyp_exists", 1907), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Context")), "Named"), "pt"), [((("a")), 100000000, 0, -906); ((("b")), 100000000, 0, -907)], (0)), 100000000, 0, -905), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ssrhyp"), 0, (0)), 100000000, 0, -904), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -903), 0), 100000000, 0, -902), 0), 100000000, 0, -901), 0, (("plugins/ssr/ssrcommon.mli", 30, 1088, 1088), ("plugins/ssr/ssrcommon.mli", 30, 1088, 1153), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 4)), 0); (("check_hyps_uniq", 1908), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -900)], (0)), 100000000, 0, -899), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ssrhyps"), 0, (0)), 100000000, 0, -898), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -897), 0), 100000000, 0, -896), 0), 100000000, 0, -895), 0, (("plugins/ssr/ssrcommon.mli", 31, 1154, 1154), ("plugins/ssr/ssrcommon.mli", 31, 1154, 1204), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 5)), 0); (("not_section_id", 1909), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -894), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -893), 0), 100000000, 0, -892), 0, (("plugins/ssr/ssrcommon.mli", 32, 1205, 1205), ("plugins/ssr/ssrcommon.mli", 32, 1205, 1238), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 6)), 0); (("hyp_err", 1910), ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -891)], (0)), 100000000, 0, -890), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -889), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -888), ((("a")), 100000000, 0, -887), 0), 100000000, 0, -886), 0), 100000000, 0, -885), 0), 100000000, 0, -884), 0, (("plugins/ssr/ssrcommon.mli", 33, 1239, 1239), ("plugins/ssr/ssrcommon.mli", 33, 1239, 1287), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 8)), 0); (("hoik", 1911), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ssrhyp"), 0, (0)), 100000000, 0, -883), ((("a")), 100000000, 0, -880), 0), 100000000, 0, -882), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ssrhyp_or_id"), 0, (0)), 100000000, 0, -881), ((("a")), 100000000, 0, -880), 0), 100000000, 0, -879), 0), 100000000, 0, -878), 0, (("plugins/ssr/ssrcommon.mli", 34, 1288, 1288), ("plugins/ssr/ssrcommon.mli", 34, 1288, 1335), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 9)), 0); (("hoi_id", 1912), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ssrhyp_or_id"), 0, (0)), 100000000, 0, -877), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -876), 0), 100000000, 0, -875), 0, (("plugins/ssr/ssrcommon.mli", 35, 1336, 1336), ("plugins/ssr/ssrcommon.mli", 35, 1336, 1369), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 10)), 0); (("mk_hint", 1913), ((Tag1 (0, ((("a")), 100000000, 0, -874), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ssrhint"), [((("a")), 100000000, 0, -874)], (0)), 100000000, 0, -873), 0), 100000000, 0, -872), 0, (("plugins/ssr/ssrcommon.mli", 39, 1448, 1448), ("plugins/ssr/ssrcommon.mli", 39, 1448, 1478), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 11)), 0); (("mk_orhint", 1914), ((Tag1 (0, ((("a")), 100000000, 0, -871), (Tag2 ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -870); ((("a")), 100000000, 0, -871)]), 100000000, 0, -869), 0), 100000000, 0, -868), 0, (("plugins/ssr/ssrcommon.mli", 40, 1479, 1479), ("plugins/ssr/ssrcommon.mli", 40, 1479, 1510), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 12)), 0); (("nullhint", 1915), ((Tag2 ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -865); (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -867)], (0)), 100000000, 0, -866)]), 100000000, 0, -864), 0, (("plugins/ssr/ssrcommon.mli", 41, 1511, 1511), ("plugins/ssr/ssrcommon.mli", 41, 1511, 1540), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 13)), 0); (("nohint", 1916), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ssrhint"), [((("a")), 100000000, 0, -863)], (0)), 100000000, 0, -862), 0, (("plugins/ssr/ssrcommon.mli", 42, 1541, 1541), ("plugins/ssr/ssrcommon.mli", 42, 1541, 1564), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 14)), 0); (("errorstrm", 1917), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -861), ((("a")), 100000000, 0, -860), 0), 100000000, 0, -859), 0, (("plugins/ssr/ssrcommon.mli", 46, 1644, 1644), ("plugins/ssr/ssrcommon.mli", 46, 1644, 1670), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 15)), 0); (("anomaly", 1918), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -858), ((("a")), 100000000, 0, -857), 0), 100000000, 0, -856), 0, (("plugins/ssr/ssrcommon.mli", 47, 1671, 1671), ("plugins/ssr/ssrcommon.mli", 47, 1671, 1697), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 16)), 0); (("array_app_tl", 1919), ((Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -853)], (0)), 100000000, 0, -855), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -853)], (0)), 100000000, 0, -854), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -853)], (0)), 100000000, 0, -852), 0), 100000000, 0, -851), 0), 100000000, 0, -850), 0, (("plugins/ssr/ssrcommon.mli", 49, 1699, 1699), ("plugins/ssr/ssrcommon.mli", 49, 1699, 1748), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 17)), 0); (("array_list_of_tl", 1920), ((Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -848)], (0)), 100000000, 0, -849), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -848)], (0)), 100000000, 0, -847), 0), 100000000, 0, -846), 0, (("plugins/ssr/ssrcommon.mli", 50, 1749, 1749), ("plugins/ssr/ssrcommon.mli", 50, 1749, 1791), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 18)), 0); (("array_fold_right_from", 1921), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -845), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -842), (Tag1 (0, ((("b")), 100000000, 0, -840), ((("b")), 100000000, 0, -840), 0), 100000000, 0, -844), 0), 100000000, 0, -843), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -842)], (0)), 100000000, 0, -841), (Tag1 (0, ((("b")), 100000000, 0, -840), ((("b")), 100000000, 0, -840), 0), 100000000, 0, -839), 0), 100000000, 0, -838), 0), 100000000, 0, -837), 0), 100000000, 0, -836), 0, (("plugins/ssr/ssrcommon.mli", 51, 1792, 1792), ("plugins/ssr/ssrcommon.mli", 51, 1792, 1867), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 19)), 0); (("option_assert_get", 1922), ((Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -833)], (0)), 100000000, 0, -835), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -834), ((("a")), 100000000, 0, -833), 0), 100000000, 0, -832), 0), 100000000, 0, -831), 0, (("plugins/ssr/ssrcommon.mli", 53, 1869, 1869), ("plugins/ssr/ssrcommon.mli", 53, 1869, 1916), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 20)), 0); (("mkRHole", 1923), ((Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -830), 0, (("plugins/ssr/ssrcommon.mli", 59, 2068, 2068), ("plugins/ssr/ssrcommon.mli", 59, 2068, 2103), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 22)), 0); (("mkRHoles", 1924), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -829), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -828)], (0)), 100000000, 0, -827), 0), 100000000, 0, -826), 0, (("plugins/ssr/ssrcommon.mli", 60, 2104, 2104), ("plugins/ssr/ssrcommon.mli", 60, 2104, 2152), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 23)), 0); (("isRHoles", 1925), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -825)], (0)), 100000000, 0, -824), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -823), 0), 100000000, 0, -822), 0, (("plugins/ssr/ssrcommon.mli", 61, 2153, 2153), ("plugins/ssr/ssrcommon.mli", 61, 2153, 2202), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 24)), 0); (("mkRApp", 1926), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -821), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -820)], (0)), 100000000, 0, -819), (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -818), 0), 100000000, 0, -817), 0), 100000000, 0, -816), 0, (("plugins/ssr/ssrcommon.mli", 62, 2203, 2203), ("plugins/ssr/ssrcommon.mli", 62, 2203, 2292), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 25)), 0); (("mkRVar", 1927), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -815), (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -814), 0), 100000000, 0, -813), 0, (("plugins/ssr/ssrcommon.mli", 63, 2293, 2293), ("plugins/ssr/ssrcommon.mli", 63, 2293, 2335), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 26)), 0); (("mkRltacVar", 1928), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -812), (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -811), 0), 100000000, 0, -810), 0, (("plugins/ssr/ssrcommon.mli", 64, 2336, 2336), ("plugins/ssr/ssrcommon.mli", 64, 2336, 2382), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 27)), 0); (("mkRCast", 1929), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -809), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -808), (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -807), 0), 100000000, 0, -806), 0), 100000000, 0, -805), 0, (("plugins/ssr/ssrcommon.mli", 65, 2383, 2383), ("plugins/ssr/ssrcommon.mli", 65, 2383, 2470), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 28)), 0); (("mkRType", 1930), ((Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -804), 0, (("plugins/ssr/ssrcommon.mli", 66, 2471, 2471), ("plugins/ssr/ssrcommon.mli", 66, 2471, 2506), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 29)), 0); (("mkRProp", 1931), ((Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -803), 0, (("plugins/ssr/ssrcommon.mli", 67, 2507, 2507), ("plugins/ssr/ssrcommon.mli", 67, 2507, 2542), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 30)), 0); (("mkRArrow", 1932), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -802), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -801), (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -800), 0), 100000000, 0, -799), 0), 100000000, 0, -798), 0, (("plugins/ssr/ssrcommon.mli", 68, 2543, 2543), ("plugins/ssr/ssrcommon.mli", 68, 2543, 2631), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 31)), 0); (("mkRConstruct", 1933), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Names")), "constructor"), 0, (0)), 100000000, 0, -797), (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -796), 0), 100000000, 0, -795), 0, (("plugins/ssr/ssrcommon.mli", 69, 2632, 2632), ("plugins/ssr/ssrcommon.mli", 69, 2632, 2693), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 32)), 0); (("mkRInd", 1934), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -794), (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -793), 0), 100000000, 0, -792), 0, (("plugins/ssr/ssrcommon.mli", 70, 2694, 2694), ("plugins/ssr/ssrcommon.mli", 70, 2694, 2747), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 33)), 0); (("mkRLambda", 1935), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -791), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -790), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -789), (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -788), 0), 100000000, 0, -787), 0), 100000000, 0, -786), 0), 100000000, 0, -785), 0, (("plugins/ssr/ssrcommon.mli", 71, 2748, 2748), ("plugins/ssr/ssrcommon.mli", 71, 2748, 2847), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 34)), 0); (("mkRnat", 1936), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -784), (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -783), 0), 100000000, 0, -782), 0, (("plugins/ssr/ssrcommon.mli", 72, 2848, 2848), ("plugins/ssr/ssrcommon.mli", 72, 2848, 2889), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 35)), 0); (("mkCHole", 1937), ((Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -781)], (0)), 100000000, 0, -780), (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -779), 0), 100000000, 0, -778), 0, (("plugins/ssr/ssrcommon.mli", 75, 2892, 2892), ("plugins/ssr/ssrcommon.mli", 75, 2892, 2933), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 36)), 0); (("mkCHoles", 1938), ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -777)], (0)), 100000000, 0, -776), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -775), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -774)], (0)), 100000000, 0, -773), 0), 100000000, 0, -772), 0), 100000000, 0, -771), 0, (("plugins/ssr/ssrcommon.mli", 76, 2934, 2934), ("plugins/ssr/ssrcommon.mli", 76, 2934, 2986), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 37)), 0); (("mkCVar", 1939), ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -770)], (0)), 100000000, 0, -769), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -768), (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -767), 0), 100000000, 0, -766), 0), 100000000, 0, -765), 0, (("plugins/ssr/ssrcommon.mli", 77, 2987, 2987), ("plugins/ssr/ssrcommon.mli", 77, 2987, 3033), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 38)), 0); (("mkCCast", 1940), ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -764)], (0)), 100000000, 0, -763), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -762), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -761), (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -760), 0), 100000000, 0, -759), 0), 100000000, 0, -758), 0), 100000000, 0, -757), 0, (("plugins/ssr/ssrcommon.mli", 78, 3034, 3034), ("plugins/ssr/ssrcommon.mli", 78, 3034, 3105), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 39)), 0); (("mkCType", 1941), ((Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -756)], (0)), 100000000, 0, -755), (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -754), 0), 100000000, 0, -753), 0, (("plugins/ssr/ssrcommon.mli", 79, 3106, 3106), ("plugins/ssr/ssrcommon.mli", 79, 3106, 3147), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 40)), 0); (("mkCProp", 1942), ((Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -752)], (0)), 100000000, 0, -751), (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -750), 0), 100000000, 0, -749), 0, (("plugins/ssr/ssrcommon.mli", 80, 3148, 3148), ("plugins/ssr/ssrcommon.mli", 80, 3148, 3189), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 41)), 0); (("mkCArrow", 1943), ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -748)], (0)), 100000000, 0, -747), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -746), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -745), (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -744), 0), 100000000, 0, -743), 0), 100000000, 0, -742), 0), 100000000, 0, -741), 0, (("plugins/ssr/ssrcommon.mli", 81, 3190, 3190), ("plugins/ssr/ssrcommon.mli", 81, 3190, 3262), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 42)), 0); (("mkCLambda", 1944), ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -740)], (0)), 100000000, 0, -739), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -738), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -737), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -736), (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -735), 0), 100000000, 0, -734), 0), 100000000, 0, -733), 0), 100000000, 0, -732), 0), 100000000, 0, -731), 0, (("plugins/ssr/ssrcommon.mli", 82, 3263, 3263), ("plugins/ssr/ssrcommon.mli", 82, 3263, 3346), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 43)), 0); (("isCHoles", 1945), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -730)], (0)), 100000000, 0, -729), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -728), 0), 100000000, 0, -727), 0, (("plugins/ssr/ssrcommon.mli", 84, 3348, 3348), ("plugins/ssr/ssrcommon.mli", 84, 3348, 3387), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 44)), 0); (("isCxHoles", 1946), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -724); (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -726)], (0)), 100000000, 0, -725)]), 100000000, 0, -723)], (0)), 100000000, 0, -722), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -721), 0), 100000000, 0, -720), 0, (("plugins/ssr/ssrcommon.mli", 85, 3388, 3388), ("plugins/ssr/ssrcommon.mli", 85, 3388, 3442), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 45)), 0); (("intern_term", 1947), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac_plugin")), "Tacinterp"), "interp_sign"), 0, (0)), 100000000, 0, -719), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -718), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ssrterm"), 0, (0)), 100000000, 0, -717), (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -716), 0), 100000000, 0, -715), 0), 100000000, 0, -714), 0), 100000000, 0, -713), 0, (("plugins/ssr/ssrcommon.mli", 87, 3444, 3444), ("plugins/ssr/ssrcommon.mli", 89, 3496, 3532), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 46)), 0); (("interp_term", 1948), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -712), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -711), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac_plugin")), "Tacinterp"), "interp_sign"), 0, (0)), 100000000, 0, -710), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ssrterm"), 0, (0)), 100000000, 0, -709), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -707); (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -708)]), 100000000, 0, -706), 0), 100000000, 0, -705), 0), 100000000, 0, -704), 0), 100000000, 0, -703), 0), 100000000, 0, -702), 0, (("plugins/ssr/ssrcommon.mli", 91, 3534, 3534), ("plugins/ssr/ssrcommon.mli", 94, 3612, 3647), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 47)), 0); (("interp_hyp", 1949), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ist"), 0, (0)), 100000000, 0, -701), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -700), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -699), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ssrhyp"), 0, (0)), 100000000, 0, -698), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ssrhyp"), 0, (0)), 100000000, 0, -697), 0), 100000000, 0, -696), 0), 100000000, 0, -695), 0), 100000000, 0, -694), 0), 100000000, 0, -693), 0, (("plugins/ssr/ssrcommon.mli", 96, 3649, 3649), ("plugins/ssr/ssrcommon.mli", 96, 3649, 3708), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 48)), 0); (("interp_hyps", 1950), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ist"), 0, (0)), 100000000, 0, -692), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -691), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -690), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ssrhyps"), 0, (0)), 100000000, 0, -689), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ssrhyps"), 0, (0)), 100000000, 0, -688), 0), 100000000, 0, -687), 0), 100000000, 0, -686), 0), 100000000, 0, -685), 0), 100000000, 0, -684), 0, (("plugins/ssr/ssrcommon.mli", 97, 3709, 3709), ("plugins/ssr/ssrcommon.mli", 97, 3709, 3771), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 49)), 0); (("interp_refine", 1951), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -683), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -682), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac_plugin")), "Tacinterp"), "interp_sign"), 0, (0)), 100000000, 0, -681), (Tag1 (("concl"), (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -680), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -679), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -677); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -678)]), 100000000, 0, -676), 0), 100000000, 0, -675), 0), 100000000, 0, -674), 0), 100000000, 0, -673), 0), 100000000, 0, -672), 0), 100000000, 0, -671), 0, (("plugins/ssr/ssrcommon.mli", 99, 3773, 3773), ("plugins/ssr/ssrcommon.mli", 101, 3875, 3929), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 50)), 0); (("interp_open_constr", 1952), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -670), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -669), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac_plugin")), "Tacinterp"), "interp_sign"), 0, (0)), 100000000, 0, -668), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Genintern")), "glob_constr_and_expr"), 0, (0)), 100000000, 0, -667), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -665); (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -666)]), 100000000, 0, -664), 0), 100000000, 0, -663), 0), 100000000, 0, -662), 0), 100000000, 0, -661), 0), 100000000, 0, -660), 0, (("plugins/ssr/ssrcommon.mli", 103, 3931, 3931), ("plugins/ssr/ssrcommon.mli", 106, 4016, 4074), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 51)), 0); (("splay_open_constr", 1953), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -659), (Tag1 (0, (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -657); (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -658)]), 100000000, 0, -656), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -653)], (0)), 100000000, 0, -652); (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -654)]), 100000000, 0, -651)], (0)), 100000000, 0, -650); (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -655)]), 100000000, 0, -649), 0), 100000000, 0, -648), 0), 100000000, 0, -647), 0, (("plugins/ssr/ssrcommon.mli", 108, 4076, 4076), ("plugins/ssr/ssrcommon.mli", 111, 4161, 4236), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 52)), 0); (("isAppInd", 1954), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -646), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -645), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -644), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -643), 0), 100000000, 0, -642), 0), 100000000, 0, -641), 0), 100000000, 0, -640), 0, (("plugins/ssr/ssrcommon.mli", 112, 4237, 4237), ("plugins/ssr/ssrcommon.mli", 112, 4237, 4304), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 53)), 0); (("mk_term", 1955), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ssrtermkind"), 0, (0)), 100000000, 0, -639), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -638), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ssrterm"), 0, (0)), 100000000, 0, -637), 0), 100000000, 0, -636), 0), 100000000, 0, -635), 0, (("plugins/ssr/ssrcommon.mli", 114, 4306, 4306), ("plugins/ssr/ssrcommon.mli", 114, 4306, 4357), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 54)), 0); (("mk_lterm", 1956), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -634), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ssrterm"), 0, (0)), 100000000, 0, -633), 0), 100000000, 0, -632), 0, (("plugins/ssr/ssrcommon.mli", 115, 4358, 4358), ("plugins/ssr/ssrcommon.mli", 115, 4358, 4395), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 55)), 0); (("mk_ast_closure_term", 1957), ((Tag1 (0, (Tag8 (([("At", (0)); ("DoubleParens", (0)); ("None", (0)); ("Parens", (0))], (0, 100000000, 0, -631), 1, 0, 0)), 100000000, 0, -630), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -629), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ast_closure_term"), 0, (0)), 100000000, 0, -628), 0), 100000000, 0, -627), 0), 100000000, 0, -626), 0, (("plugins/ssr/ssrcommon.mli", 117, 4397, 4397), ("plugins/ssr/ssrcommon.mli", 119, 4470, 4514), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 56)), 0); (("interp_ast_closure_term", 1958), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Geninterp")), "interp_sign"), 0, (0)), 100000000, 0, -625), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -624), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -623), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ast_closure_term"), 0, (0)), 100000000, 0, -622), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ast_closure_term"), 0, (0)), 100000000, 0, -621), 0), 100000000, 0, -620), 0), 100000000, 0, -619), 0), 100000000, 0, -618), 0), 100000000, 0, -617), 0, (("plugins/ssr/ssrcommon.mli", 120, 4515, 4515), ("plugins/ssr/ssrcommon.mli", 120, 4515, 4625), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 57)), 0); (("subst_ast_closure_term", 1959), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Mod_subst")), "substitution"), 0, (0)), 100000000, 0, -616), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ast_closure_term"), 0, (0)), 100000000, 0, -615), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ast_closure_term"), 0, (0)), 100000000, 0, -614), 0), 100000000, 0, -613), 0), 100000000, 0, -612), 0, (("plugins/ssr/ssrcommon.mli", 121, 4626, 4626), ("plugins/ssr/ssrcommon.mli", 121, 4626, 4717), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 58)), 0); (("glob_ast_closure_term", 1960), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Genintern")), "glob_sign"), 0, (0)), 100000000, 0, -611), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ast_closure_term"), 0, (0)), 100000000, 0, -610), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ast_closure_term"), 0, (0)), 100000000, 0, -609), 0), 100000000, 0, -608), 0), 100000000, 0, -607), 0, (("plugins/ssr/ssrcommon.mli", 122, 4718, 4718), ("plugins/ssr/ssrcommon.mli", 122, 4718, 4805), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 59)), 0); (("ssrterm_of_ast_closure_term", 1961), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ast_closure_term"), 0, (0)), 100000000, 0, -606), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ssrterm"), 0, (0)), 100000000, 0, -605), 0), 100000000, 0, -604), 0, (("plugins/ssr/ssrcommon.mli", 123, 4806, 4806), ("plugins/ssr/ssrcommon.mli", 123, 4806, 4867), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 60)), 0); (("ssrdgens_of_parsed_dgens", 1962), ((Tag1 (0, (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ssrdocc"), 0, (0)), 100000000, 0, -601); (Tag3 (Tag1 (Tag1 ((Tag2 ("Ssrmatching_plugin")), "Ssrmatching"), "cpattern"), 0, (0)), 100000000, 0, -602)]), 100000000, 0, -600)], (0)), 100000000, 0, -599)], (0)), 100000000, 0, -598); (Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ssrclear"), 0, (0)), 100000000, 0, -603)]), 100000000, 0, -597), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ssrdgens"), 0, (0)), 100000000, 0, -596), 0), 100000000, 0, -595), 0, (("plugins/ssr/ssrcommon.mli", 125, 4869, 4869), ("plugins/ssr/ssrcommon.mli", 126, 4900, 4967), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 61)), 0); (("is_internal_name", 1963), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -594), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -593), 0), 100000000, 0, -592), 0, (("plugins/ssr/ssrcommon.mli", 128, 4969, 4969), ("plugins/ssr/ssrcommon.mli", 128, 4969, 5006), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 62)), 0); (("add_internal_name", 1964), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -591), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -590), 0), 100000000, 0, -589), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -588), 0), 100000000, 0, -587), 0, (("plugins/ssr/ssrcommon.mli", 129, 5007, 5007), ("plugins/ssr/ssrcommon.mli", 129, 5007, 5055), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 63)), 0); (("mk_internal_id", 1965), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -586), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -585), 0), 100000000, 0, -584), 0, (("plugins/ssr/ssrcommon.mli", 130, 5056, 5056), ("plugins/ssr/ssrcommon.mli", 130, 5056, 5091), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 64)), 0); (("mk_tagged_id", 1966), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -583), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -582), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -581), 0), 100000000, 0, -580), 0), 100000000, 0, -579), 0, (("plugins/ssr/ssrcommon.mli", 131, 5092, 5092), ("plugins/ssr/ssrcommon.mli", 131, 5092, 5132), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 65)), 0); (("mk_evar_name", 1967), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -578), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -577), 0), 100000000, 0, -576), 0, (("plugins/ssr/ssrcommon.mli", 132, 5133, 5133), ("plugins/ssr/ssrcommon.mli", 132, 5133, 5165), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 66)), 0); (("ssr_anon_hyp", 1968), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -575), 0, (("plugins/ssr/ssrcommon.mli", 133, 5166, 5166), ("plugins/ssr/ssrcommon.mli", 133, 5166, 5191), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 67)), 0); (("type_id", 1969), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -574), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -573), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -572), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -571), 0), 100000000, 0, -570), 0), 100000000, 0, -569), 0), 100000000, 0, -568), 0, (("plugins/ssr/ssrcommon.mli", 134, 5192, 5192), ("plugins/ssr/ssrcommon.mli", 134, 5192, 5258), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 68)), 0); (("abs_evars", 1970), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -567), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -566), (Tag1 (Tag1 ("rigid"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Evar")), "t"), 0, (0)), 100000000, 0, -565)], (0)), 100000000, 0, -564)], (0)), 100000000, 0, -563), (Tag1 (0, (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -561); (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -562)]), 100000000, 0, -560), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -556); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Evar")), "t"), 0, (0)), 100000000, 0, -558)], (0)), 100000000, 0, -557); (Tag3 (Tag1 ((Tag2 ("UState")), "t"), 0, (0)), 100000000, 0, -559)]), 100000000, 0, -555), 0), 100000000, 0, -554), 0), 100000000, 0, -553), 0), 100000000, 0, -552), 0), 100000000, 0, -551), 0, (("plugins/ssr/ssrcommon.mli", 136, 5260, 5260), ("plugins/ssr/ssrcommon.mli", 140, 5412, 5431), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 69)), 0); (("abs_cterm", 1971), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -550), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -549), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -548), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -547), (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -546), 0), 100000000, 0, -545), 0), 100000000, 0, -544), 0), 100000000, 0, -543), 0), 100000000, 0, -542), 0, (("plugins/ssr/ssrcommon.mli", 141, 5432, 5432), ("plugins/ssr/ssrcommon.mli", 142, 5448, 5519), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 70)), 0); (("constr_name", 1972), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -541), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -540), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -539), 0), 100000000, 0, -538), 0), 100000000, 0, -537), 0, (("plugins/ssr/ssrcommon.mli", 144, 5521, 5521), ("plugins/ssr/ssrcommon.mli", 144, 5521, 5570), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 71)), 0); (("mkSsrRef", 1973), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -536), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -535), 0), 100000000, 0, -534), 0, (("plugins/ssr/ssrcommon.mli", 146, 5572, 5572), ("plugins/ssr/ssrcommon.mli", 146, 5572, 5606), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 72)), 0); (("mkSsrRRef", 1974), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -533), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -530); (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -532)], (0)), 100000000, 0, -531)]), 100000000, 0, -529), 0), 100000000, 0, -528), 0, (("plugins/ssr/ssrcommon.mli", 147, 5607, 5607), ("plugins/ssr/ssrcommon.mli", 147, 5607, 5666), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 73)), 0); (("mkSsrConst", 1975), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -527), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -526), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -525), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -523); (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -524)]), 100000000, 0, -522), 0), 100000000, 0, -521), 0), 100000000, 0, -520), 0), 100000000, 0, -519), 0, (("plugins/ssr/ssrcommon.mli", 148, 5667, 5667), ("plugins/ssr/ssrcommon.mli", 148, 5667, 5749), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 74)), 0); (("is_discharged_id", 1976), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -518), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -517), 0), 100000000, 0, -516), 0, (("plugins/ssr/ssrcommon.mli", 150, 5751, 5751), ("plugins/ssr/ssrcommon.mli", 150, 5751, 5786), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 75)), 0); (("mk_discharged_id", 1977), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -515), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -514), 0), 100000000, 0, -513), 0, (("plugins/ssr/ssrcommon.mli", 151, 5787, 5787), ("plugins/ssr/ssrcommon.mli", 151, 5787, 5822), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 76)), 0); (("is_tagged", 1978), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -512), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -511), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -510), 0), 100000000, 0, -509), 0), 100000000, 0, -508), 0, (("plugins/ssr/ssrcommon.mli", 152, 5823, 5823), ("plugins/ssr/ssrcommon.mli", 152, 5823, 5863), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 77)), 0); (("has_discharged_tag", 1979), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -507), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -506), 0), 100000000, 0, -505), 0, (("plugins/ssr/ssrcommon.mli", 153, 5864, 5864), ("plugins/ssr/ssrcommon.mli", 153, 5864, 5903), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 78)), 0); (("ssrqid", 1980), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -504), (Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -503), 0), 100000000, 0, -502), 0, (("plugins/ssr/ssrcommon.mli", 154, 5904, 5904), ("plugins/ssr/ssrcommon.mli", 154, 5904, 5942), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 79)), 0); (("mk_anon_id", 1981), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -501), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -500)], (0)), 100000000, 0, -499), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -498), 0), 100000000, 0, -497), 0), 100000000, 0, -496), 0, (("plugins/ssr/ssrcommon.mli", 155, 5943, 5943), ("plugins/ssr/ssrcommon.mli", 155, 5943, 5987), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 80)), 0); (("nbargs_open_constr", 1982), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -495), (Tag1 (0, (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -493); (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -494)]), 100000000, 0, -492), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -491), 0), 100000000, 0, -490), 0), 100000000, 0, -489), 0, (("plugins/ssr/ssrcommon.mli", 156, 5988, 5988), ("plugins/ssr/ssrcommon.mli", 156, 5988, 6059), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 81)), 0); (("pf_nbargs", 1983), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -488), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -487), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -486), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -485), 0), 100000000, 0, -484), 0), 100000000, 0, -483), 0), 100000000, 0, -482), 0, (("plugins/ssr/ssrcommon.mli", 157, 6060, 6060), ("plugins/ssr/ssrcommon.mli", 157, 6060, 6123), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 82)), 0); (("ssrevaltac", 1984), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac_plugin")), "Tacinterp"), "interp_sign"), 0, (0)), 100000000, 0, -481), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ltac_plugin")), "Tacinterp"), "Value"), "t"), 0, (0)), 100000000, 0, -480), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -479)], (0)), 100000000, 0, -478), 0), 100000000, 0, -477), 0), 100000000, 0, -476), 0, (("plugins/ssr/ssrcommon.mli", 159, 6125, 6125), ("plugins/ssr/ssrcommon.mli", 160, 6142, 6211), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 83)), 0); (("convert_concl_no_check", 1985), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -475), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -474)], (0)), 100000000, 0, -473), 0), 100000000, 0, -472), 0, (("plugins/ssr/ssrcommon.mli", 162, 6213, 6213), ("plugins/ssr/ssrcommon.mli", 162, 6213, 6276), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 84)), 0); (("convert_concl", 1986), ((Tag1 (("check"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -471), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -470), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -469)], (0)), 100000000, 0, -468), 0), 100000000, 0, -467), 0), 100000000, 0, -466), 0, (("plugins/ssr/ssrcommon.mli", 163, 6277, 6277), ("plugins/ssr/ssrcommon.mli", 163, 6277, 6345), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 85)), 0); (("red_safe", 1987), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Reductionops")), "reduction_function"), 0, (0)), 100000000, 0, -465), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -464), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -463), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -462), (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -461), 0), 100000000, 0, -460), 0), 100000000, 0, -459), 0), 100000000, 0, -458), 0), 100000000, 0, -457), 0, (("plugins/ssr/ssrcommon.mli", 165, 6347, 6347), ("plugins/ssr/ssrcommon.mli", 167, 6399, 6442), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 86)), 0); (("red_product_skip_id", 1988), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -456), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -455), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -454), (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -453), 0), 100000000, 0, -452), 0), 100000000, 0, -451), 0), 100000000, 0, -450), 0, (("plugins/ssr/ssrcommon.mli", 169, 6444, 6444), ("plugins/ssr/ssrcommon.mli", 170, 6470, 6513), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 87)), 0); (("ssrautoprop_tac", 1989), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -449)], (0)), 100000000, 0, -448)], (0)), 100000000, 0, -447), 0, (("plugins/ssr/ssrcommon.mli", 172, 6515, 6515), ("plugins/ssr/ssrcommon.mli", 173, 6537, 6573), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 88)), 0); (("mkProt", 1990), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -446), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -445), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -444), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -443), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -441); (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -442)]), 100000000, 0, -440), 0), 100000000, 0, -439), 0), 100000000, 0, -438), 0), 100000000, 0, -437), 0), 100000000, 0, -436), 0, (("plugins/ssr/ssrcommon.mli", 175, 6575, 6575), ("plugins/ssr/ssrcommon.mli", 180, 6653, 6679), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 89)), 0); (("mkEtaApp", 1991), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -435), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -434), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -433), (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -432), 0), 100000000, 0, -431), 0), 100000000, 0, -430), 0), 100000000, 0, -429), 0, (("plugins/ssr/ssrcommon.mli", 182, 6681, 6681), ("plugins/ssr/ssrcommon.mli", 182, 6681, 6732), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 90)), 0); (("mkRefl", 1992), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -428), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -427), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -426), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -425), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -423); (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -424)]), 100000000, 0, -422), 0), 100000000, 0, -421), 0), 100000000, 0, -420), 0), 100000000, 0, -419), 0), 100000000, 0, -418), 0, (("plugins/ssr/ssrcommon.mli", 184, 6734, 6734), ("plugins/ssr/ssrcommon.mli", 189, 6812, 6838), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 91)), 0); (("discharge_hyp", 1993), ((Tag1 (0, (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -414); (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -416); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -417)]), 100000000, 0, -415)]), 100000000, 0, -413), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -412)], (0)), 100000000, 0, -411), 0), 100000000, 0, -410), 0, (("plugins/ssr/ssrcommon.mli", 191, 6840, 6840), ("plugins/ssr/ssrcommon.mli", 192, 6860, 6918), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 92)), 0); (("view_error", 1994), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -409), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ssrterm"), 0, (0)), 100000000, 0, -408), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [((("a")), 100000000, 0, -407)], (0)), 100000000, 0, -406), 0), 100000000, 0, -405), 0), 100000000, 0, -404), 0, (("plugins/ssr/ssrcommon.mli", 194, 6920, 6920), ("plugins/ssr/ssrcommon.mli", 194, 6920, 6977), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 93)), 0); (("top_id", 1995), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -403), 0, (("plugins/ssr/ssrcommon.mli", 197, 6980, 6980), ("plugins/ssr/ssrcommon.mli", 197, 6980, 6997), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 94)), 0); (("abs_ssrterm", 1996), ((Tag1 (Tag1 ("resolve_typeclasses"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -402)], (0)), 100000000, 0, -401), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ist"), 0, (0)), 100000000, 0, -400), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -399), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -398), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ssrterm"), 0, (0)), 100000000, 0, -397), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -394); (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -395); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -396)]), 100000000, 0, -393), 0), 100000000, 0, -392), 0), 100000000, 0, -391), 0), 100000000, 0, -390), 0), 100000000, 0, -389), 0), 100000000, 0, -388), 0, (("plugins/ssr/ssrcommon.mli", 199, 6999, 6999), ("plugins/ssr/ssrcommon.mli", 204, 7139, 7180), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 95)), 0); (("pf_interp_ty", 1997), ((Tag1 (Tag1 ("resolve_typeclasses"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -387)], (0)), 100000000, 0, -386), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -385), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -384), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac_plugin")), "Tacinterp"), "interp_sign"), 0, (0)), 100000000, 0, -383), (Tag1 (0, (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ssrtermkind"), 0, (0)), 100000000, 0, -378); (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -380); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -382)], (0)), 100000000, 0, -381)]), 100000000, 0, -379)]), 100000000, 0, -377), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -373); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -374); (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -375); (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -376)]), 100000000, 0, -372), 0), 100000000, 0, -371), 0), 100000000, 0, -370), 0), 100000000, 0, -369), 0), 100000000, 0, -368), 0), 100000000, 0, -367), 0, (("plugins/ssr/ssrcommon.mli", 206, 7182, 7182), ("plugins/ssr/ssrcommon.mli", 213, 7432, 7485), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 96)), 0); (("ssr_n_tac", 1998), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -366), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -365), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -364)], (0)), 100000000, 0, -363), 0), 100000000, 0, -362), 0), 100000000, 0, -361), 0, (("plugins/ssr/ssrcommon.mli", 215, 7487, 7487), ("plugins/ssr/ssrcommon.mli", 215, 7487, 7541), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 97)), 0); (("donetac", 1999), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -360), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -359)], (0)), 100000000, 0, -358), 0), 100000000, 0, -357), 0, (("plugins/ssr/ssrcommon.mli", 216, 7542, 7542), ("plugins/ssr/ssrcommon.mli", 216, 7542, 7584), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 98)), 0); (("applyn", 2000), ((Tag1 (("with_evars"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -356), (Tag1 (Tag1 ("beta"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -355)], (0)), 100000000, 0, -354), (Tag1 (Tag1 ("with_shelve"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -353)], (0)), 100000000, 0, -352), (Tag1 (Tag1 ("first_goes_last"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -351)], (0)), 100000000, 0, -350), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -349), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -348), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -347)], (0)), 100000000, 0, -346), 0), 100000000, 0, -345), 0), 100000000, 0, -344), 0), 100000000, 0, -343), 0), 100000000, 0, -342), 0), 100000000, 0, -341), 0), 100000000, 0, -340), 0, (("plugins/ssr/ssrcommon.mli", 218, 7586, 7586), ("plugins/ssr/ssrcommon.mli", 224, 7740, 7785), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 99)), 0); Tag2 (("NotEnoughProducts", 2001), ((Tag3 ("exn", 7)), 0, (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 100)), 2, 0); (("saturate", 2002), ((Tag1 (Tag1 ("beta"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -339)], (0)), 100000000, 0, -338), (Tag1 (Tag1 ("bi_types"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -337)], (0)), 100000000, 0, -336), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -335), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -334), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -333), (Tag1 (Tag1 ("ty"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -332)], (0)), 100000000, 0, -331), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -330), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -322); (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -323); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -326); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -327); (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -328)]), 100000000, 0, -325)], (0)), 100000000, 0, -324); (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -329)]), 100000000, 0, -321), 0), 100000000, 0, -320), 0), 100000000, 0, -319), 0), 100000000, 0, -318), 0), 100000000, 0, -317), 0), 100000000, 0, -316), 0), 100000000, 0, -315), 0), 100000000, 0, -314), 0, (("plugins/ssr/ssrcommon.mli", 226, 7814, 7814), ("plugins/ssr/ssrcommon.mli", 234, 8003, 8101), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 101)), 0); (("refine_with", 2003), ((Tag1 (Tag1 ("first_goes_last"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -313)], (0)), 100000000, 0, -312), (Tag1 (Tag1 ("beta"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -311)], (0)), 100000000, 0, -310), (Tag1 (Tag1 ("with_evars"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -309)], (0)), 100000000, 0, -308), (Tag1 (0, (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -306); (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -307)]), 100000000, 0, -305), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -304)], (0)), 100000000, 0, -303), 0), 100000000, 0, -302), 0), 100000000, 0, -301), 0), 100000000, 0, -300), 0), 100000000, 0, -299), 0, (("plugins/ssr/ssrcommon.mli", 235, 8102, 8102), ("plugins/ssr/ssrcommon.mli", 239, 8212, 8268), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 102)), 0); (("resolve_typeclasses", 2004), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -298), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -297), (Tag1 (("where"), (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -296), (Tag1 (("fail"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -295), (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -294), 0), 100000000, 0, -293), 0), 100000000, 0, -292), 0), 100000000, 0, -291), 0), 100000000, 0, -290), 0, (("plugins/ssr/ssrcommon.mli", 241, 8270, 8270), ("plugins/ssr/ssrcommon.mli", 244, 8350, 8377), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 103)), 0); (("rewritetac", 2005), ((Tag1 (Tag1 ("under"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -289)], (0)), 100000000, 0, -288), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ssrdir"), 0, (0)), 100000000, 0, -287), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -286), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -285)], (0)), 100000000, 0, -284), 0), 100000000, 0, -283), 0), 100000000, 0, -282), 0), 100000000, 0, -281), 0, (("plugins/ssr/ssrcommon.mli", 248, 8457, 8457), ("plugins/ssr/ssrcommon.mli", 248, 8457, 8533), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 104)), 0); Tag1 (("name_hint", 2006), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -278); (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -280)], (0)), 100000000, 0, -279)]), 100000000, 0, -277)], (0)), 100000000, 0, -276)], (0)), 100000000, 0, -275)), 0, 0, 0, 0, (("plugins/ssr/ssrcommon.mli", 250, 8535, 8535), ("plugins/ssr/ssrcommon.mli", 250, 8535, 8590), 0), 0, 0, 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 105)), 1, 0); (("gentac", 2007), ((Tag1 (0, (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ssrdocc"), 0, (0)), 100000000, 0, -273); (Tag3 (Tag1 (Tag1 ((Tag2 ("Ssrmatching_plugin")), "Ssrmatching"), "cpattern"), 0, (0)), 100000000, 0, -274)]), 100000000, 0, -272), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -271)], (0)), 100000000, 0, -270), 0), 100000000, 0, -269), 0, (("plugins/ssr/ssrcommon.mli", 252, 8592, 8592), ("plugins/ssr/ssrcommon.mli", 253, 8605, 8670), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 106)), 0); (("genstac", 2008), ((Tag1 (0, (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag2 ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ssrhyp"), 0, (0)), 100000000, 0, -264)], (0)), 100000000, 0, -263)], (0)), 100000000, 0, -262); (Tag3 (Tag1 (Tag1 ((Tag2 ("Ssrmatching_plugin")), "Ssrmatching"), "occ"), 0, (0)), 100000000, 0, -265)]), 100000000, 0, -261); (Tag3 (Tag1 (Tag1 ((Tag2 ("Ssrmatching_plugin")), "Ssrmatching"), "cpattern"), 0, (0)), 100000000, 0, -266)]), 100000000, 0, -260)], (0)), 100000000, 0, -259); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ssrhyp"), 0, (0)), 100000000, 0, -268)], (0)), 100000000, 0, -267)]), 100000000, 0, -258), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -257)], (0)), 100000000, 0, -256), 0), 100000000, 0, -255), 0, (("plugins/ssr/ssrcommon.mli", 255, 8672, 8672), ("plugins/ssr/ssrcommon.mli", 259, 8797, 8820), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 107)), 0); (("interp_gen", 2009), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -254), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -253), (Tag1 (("concl"), (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -252), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -251), (Tag1 (0, (Tag2 ([(Tag2 ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ssrhyp"), 0, (0)), 100000000, 0, -248)], (0)), 100000000, 0, -247)], (0)), 100000000, 0, -246); (Tag3 (Tag1 (Tag1 ((Tag2 ("Ssrmatching_plugin")), "Ssrmatching"), "occ"), 0, (0)), 100000000, 0, -249)]), 100000000, 0, -245); (Tag3 (Tag1 (Tag1 ((Tag2 ("Ssrmatching_plugin")), "Ssrmatching"), "cpattern"), 0, (0)), 100000000, 0, -250)]), 100000000, 0, -244), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -238); (Tag2 ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -240); (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -241); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ssrhyp"), 0, (0)), 100000000, 0, -243)], (0)), 100000000, 0, -242)]), 100000000, 0, -239)]), 100000000, 0, -237), 0), 100000000, 0, -236), 0), 100000000, 0, -235), 0), 100000000, 0, -234), 0), 100000000, 0, -233), 0), 100000000, 0, -232), 0, (("plugins/ssr/ssrcommon.mli", 261, 8822, 8822), ("plugins/ssr/ssrcommon.mli", 268, 8983, 9044), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 108)), 0); (("introid", 2010), ((Tag1 (Tag1 ("orig"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -231)], (0)), 100000000, 0, -230)], (0)), 100000000, 0, -229), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -228), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -227)], (0)), 100000000, 0, -226), 0), 100000000, 0, -225), 0), 100000000, 0, -224), 0, (("plugins/ssr/ssrcommon.mli", 272, 9068, 9068), ("plugins/ssr/ssrcommon.mli", 272, 9068, 9131), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 109)), 0); (("intro_anon", 2011), ((Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -223)], (0)), 100000000, 0, -222), 0, (("plugins/ssr/ssrcommon.mli", 273, 9132, 9132), ("plugins/ssr/ssrcommon.mli", 273, 9132, 9170), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 110)), 0); (("interp_clr", 2012), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -221), (Tag1 (0, (Tag2 ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ssrhyps"), 0, (0)), 100000000, 0, -217)], (0)), 100000000, 0, -216); (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ssrtermkind"), 0, (0)), 100000000, 0, -219); (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -220)]), 100000000, 0, -218)]), 100000000, 0, -215), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ssrhyps"), 0, (0)), 100000000, 0, -214), 0), 100000000, 0, -213), 0), 100000000, 0, -212), 0, (("plugins/ssr/ssrcommon.mli", 275, 9172, 9172), ("plugins/ssr/ssrcommon.mli", 276, 9189, 9256), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 111)), 0); (("genclrtac", 2013), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -211), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -210)], (0)), 100000000, 0, -209), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ssrhyp"), 0, (0)), 100000000, 0, -208)], (0)), 100000000, 0, -207), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -206)], (0)), 100000000, 0, -205), 0), 100000000, 0, -204), 0), 100000000, 0, -203), 0), 100000000, 0, -202), 0, (("plugins/ssr/ssrcommon.mli", 278, 9258, 9258), ("plugins/ssr/ssrcommon.mli", 280, 9294, 9362), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 112)), 0); (("cleartac", 2014), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ssrhyps"), 0, (0)), 100000000, 0, -201), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -200)], (0)), 100000000, 0, -199), 0), 100000000, 0, -198), 0, (("plugins/ssr/ssrcommon.mli", 281, 9363, 9363), ("plugins/ssr/ssrcommon.mli", 281, 9363, 9410), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 113)), 0); (("tclMULT", 2015), ((Tag1 (0, (Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -196); (Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ssrmmod"), 0, (0)), 100000000, 0, -197)]), 100000000, 0, -195), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -194)], (0)), 100000000, 0, -193), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -192)], (0)), 100000000, 0, -191), 0), 100000000, 0, -190), 0), 100000000, 0, -189), 0, (("plugins/ssr/ssrcommon.mli", 283, 9412, 9412), ("plugins/ssr/ssrcommon.mli", 283, 9412, 9489), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 114)), 0); (("unprotecttac", 2016), ((Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -188)], (0)), 100000000, 0, -187), 0, (("plugins/ssr/ssrcommon.mli", 285, 9491, 9491), ("plugins/ssr/ssrcommon.mli", 285, 9491, 9531), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 115)), 0); (("is_protect", 2017), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -186), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -185), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -184), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -183), 0), 100000000, 0, -182), 0), 100000000, 0, -181), 0), 100000000, 0, -180), 0, (("plugins/ssr/ssrcommon.mli", 286, 9532, 9532), ("plugins/ssr/ssrcommon.mli", 286, 9532, 9597), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 116)), 0); (("abs_wgen", 2018), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -179), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -178), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -177), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -176), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -175), 0), 100000000, 0, -174), (Tag1 (0, (Tag2 ([((("a")), 100000000, 0, -166); (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ssrhyp_or_id"), 0, (0)), 100000000, 0, -170); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -171)]), 100000000, 0, -169); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ssrmatching_plugin")), "Ssrmatching"), "cpattern"), 0, (0)), 100000000, 0, -173)], (0)), 100000000, 0, -172)]), 100000000, 0, -168)], (0)), 100000000, 0, -167)]), 100000000, 0, -165), (Tag1 (0, (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -163)], (0)), 100000000, 0, -162); (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -164)]), 100000000, 0, -161), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -157); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -159)], (0)), 100000000, 0, -158); (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -160)]), 100000000, 0, -156), 0), 100000000, 0, -155), 0), 100000000, 0, -154), 0), 100000000, 0, -153), 0), 100000000, 0, -152), 0), 100000000, 0, -151), 0), 100000000, 0, -150), 0, (("plugins/ssr/ssrcommon.mli", 288, 9599, 9599), ("plugins/ssr/ssrcommon.mli", 298, 9808, 9851), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 117)), 0); (("clr_of_wgen", 2019), ((Tag1 (0, (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ssrhyps"), 0, (0)), 100000000, 0, -142); (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ssrhyp_or_id"), 0, (0)), 100000000, 0, -146); ((("a")), 100000000, 0, -147)]), 100000000, 0, -145); (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -149)], (0)), 100000000, 0, -148)]), 100000000, 0, -144)], (0)), 100000000, 0, -143)]), 100000000, 0, -141), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -140)], (0)), 100000000, 0, -139)], (0)), 100000000, 0, -138), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -137)], (0)), 100000000, 0, -136)], (0)), 100000000, 0, -135), 0), 100000000, 0, -134), 0), 100000000, 0, -133), 0, (("plugins/ssr/ssrcommon.mli", 300, 9853, 9853), ("plugins/ssr/ssrcommon.mli", 302, 9927, 9985), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 118)), 0); (("unfold", 2020), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -132)], (0)), 100000000, 0, -131), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -130)], (0)), 100000000, 0, -129), 0), 100000000, 0, -128), 0, (("plugins/ssr/ssrcommon.mli", 305, 9988, 9988), ("plugins/ssr/ssrcommon.mli", 305, 9988, 10040), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 119)), 0); (("tclINTERP_AST_CLOSURE_TERM_AS_CONSTR", 2021), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ssreflect_plugin")), "Ssrast"), "ast_closure_term"), 0, (0)), 100000000, 0, -127), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -126)], (0)), 100000000, 0, -125)], (0)), 100000000, 0, -124), 0), 100000000, 0, -123), 0, (("plugins/ssr/ssrcommon.mli", 309, 10121, 10121), ("plugins/ssr/ssrcommon.mli", 310, 10164, 10217), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 120)), 0); (("tacTYPEOF", 2022), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -122), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -121)], (0)), 100000000, 0, -120), 0), 100000000, 0, -119), 0, (("plugins/ssr/ssrcommon.mli", 312, 10219, 10219), ("plugins/ssr/ssrcommon.mli", 312, 10219, 10278), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 121)), 0); (("tclINTRO_ID", 2023), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -118), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -117)], (0)), 100000000, 0, -116), 0), 100000000, 0, -115), 0, (("plugins/ssr/ssrcommon.mli", 314, 10280, 10280), ("plugins/ssr/ssrcommon.mli", 314, 10280, 10327), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 122)), 0); (("tclINTRO_ANON", 2024), ((Tag1 (Tag1 ("seed"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -114)], (0)), 100000000, 0, -113), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -112), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -111)], (0)), 100000000, 0, -110), 0), 100000000, 0, -109), 0), 100000000, 0, -108), 0, (("plugins/ssr/ssrcommon.mli", 315, 10328, 10328), ("plugins/ssr/ssrcommon.mli", 315, 10328, 10393), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 123)), 0); Tag1 (("intro_id", 2025), (0, 0, Tag1 ([(("Anon", 1836), (0), 0, (("plugins/ssr/ssrcommon.mli", 319, 10485, 10487), ("plugins/ssr/ssrcommon.mli", 319, 10485, 10493), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 125)); (("Id", 1837), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -106)]), 0, (("plugins/ssr/ssrcommon.mli", 320, 10494, 10496), ("plugins/ssr/ssrcommon.mli", 320, 10494, 10508), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 126)); (("Seed", 1838), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -107)]), 0, (("plugins/ssr/ssrcommon.mli", 321, 10509, 10511), ("plugins/ssr/ssrcommon.mli", 321, 10509, 10527), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 127))], 0), 1, 0, 0, 0, 0, 0, (("plugins/ssr/ssrcommon.mli", 318, 10469, 10469), ("plugins/ssr/ssrcommon.mli", 321, 10509, 10527), 0), 0, 0, 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 124)), 1, 0); (("tclINTRO", 2026), ((Tag1 (("id"), (Tag3 ((("intro_id", 2025)), 0, (0)), 100000000, 0, -105), (Tag1 (("conclusion"), (Tag1 (("orig_name"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -104), (Tag1 (("new_name"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -103), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -102)], (0)), 100000000, 0, -101), 0), 100000000, 0, -100), 0), 100000000, 0, -99), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -98)], (0)), 100000000, 0, -97), 0), 100000000, 0, -96), 0), 100000000, 0, -95), 0, (("plugins/ssr/ssrcommon.mli", 323, 10529, 10529), ("plugins/ssr/ssrcommon.mli", 326, 10638, 10661), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 128)), 0); (("tclRENAME_HD_PROD", 2027), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -94), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -93)], (0)), 100000000, 0, -92), 0), 100000000, 0, -91), 0, (("plugins/ssr/ssrcommon.mli", 328, 10663, 10663), ("plugins/ssr/ssrcommon.mli", 328, 10663, 10718), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 129)), 0); (("tcl0G", 2028), ((Tag1 (("default"), ((("a")), 100000000, 0, -89), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [((("a")), 100000000, 0, -89)], (0)), 100000000, 0, -90), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [((("a")), 100000000, 0, -89)], (0)), 100000000, 0, -88), 0), 100000000, 0, -87), 0), 100000000, 0, -86), 0, (("plugins/ssr/ssrcommon.mli", 331, 10779, 10779), ("plugins/ssr/ssrcommon.mli", 331, 10779, 10847), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 130)), 0); (("tclFIRSTa", 2029), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [((("a")), 100000000, 0, -83)], (0)), 100000000, 0, -85)], (0)), 100000000, 0, -84), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [((("a")), 100000000, 0, -83)], (0)), 100000000, 0, -82), 0), 100000000, 0, -81), 0, (("plugins/ssr/ssrcommon.mli", 334, 10888, 10888), ("plugins/ssr/ssrcommon.mli", 334, 10888, 10951), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 131)), 0); (("tclFIRSTi", 2030), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -80), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [((("a")), 100000000, 0, -76)], (0)), 100000000, 0, -79), 0), 100000000, 0, -78), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -77), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [((("a")), 100000000, 0, -76)], (0)), 100000000, 0, -75), 0), 100000000, 0, -74), 0), 100000000, 0, -73), 0, (("plugins/ssr/ssrcommon.mli", 335, 10952, 10952), ("plugins/ssr/ssrcommon.mli", 335, 10952, 11026), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 132)), 0); (("tacCONSTR_NAME", 2031), ((Tag1 (Tag1 ("name"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -72)], (0)), 100000000, 0, -71), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -70), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -69)], (0)), 100000000, 0, -68), 0), 100000000, 0, -67), 0), 100000000, 0, -66), 0, (("plugins/ssr/ssrcommon.mli", 337, 11028, 11028), ("plugins/ssr/ssrcommon.mli", 337, 11028, 11101), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 133)), 0); (("tacMKPROD", 2032), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -65), (Tag1 (Tag1 ("name"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -64)], (0)), 100000000, 0, -63), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -62), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -61)], (0)), 100000000, 0, -60), 0), 100000000, 0, -59), 0), 100000000, 0, -58), 0), 100000000, 0, -57), 0, (("plugins/ssr/ssrcommon.mli", 341, 11227, 11227), ("plugins/ssr/ssrcommon.mli", 342, 11243, 11321), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 134)), 0); (("tacINTERP_CPATTERN", 2033), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ssrmatching_plugin")), "Ssrmatching"), "cpattern"), 0, (0)), 100000000, 0, -56), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ssrmatching_plugin")), "Ssrmatching"), "pattern"), 0, (0)), 100000000, 0, -55)], (0)), 100000000, 0, -54), 0), 100000000, 0, -53), 0, (("plugins/ssr/ssrcommon.mli", 344, 11323, 11323), ("plugins/ssr/ssrcommon.mli", 344, 11323, 11408), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 135)), 0); (("tacUNIFY", 2034), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -52), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -51), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -50)], (0)), 100000000, 0, -49), 0), 100000000, 0, -48), 0), 100000000, 0, -47), 0, (("plugins/ssr/ssrcommon.mli", 345, 11409, 11409), ("plugins/ssr/ssrcommon.mli", 345, 11409, 11471), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 136)), 0); (("tacIS_INJECTION_CASE", 2035), ((Tag1 (Tag1 ("ty"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -46)], (0)), 100000000, 0, -45), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -44), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -43)], (0)), 100000000, 0, -42), 0), 100000000, 0, -41), 0), 100000000, 0, -40), 0, (("plugins/ssr/ssrcommon.mli", 348, 11521, 11521), ("plugins/ssr/ssrcommon.mli", 348, 11521, 11603), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 137)), 0); (("tclWITHTOP", 2036), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -39), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -38)], (0)), 100000000, 0, -37), 0), 100000000, 0, -36), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -35)], (0)), 100000000, 0, -34), 0), 100000000, 0, -33), 0, (("plugins/ssr/ssrcommon.mli", 351, 11666, 11666), ("plugins/ssr/ssrcommon.mli", 351, 11666, 11744), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 138)), 0); (("tacMK_SSR_CONST", 2037), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -32), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -31)], (0)), 100000000, 0, -30), 0), 100000000, 0, -29), 0, (("plugins/ssr/ssrcommon.mli", 353, 11746, 11746), ("plugins/ssr/ssrcommon.mli", 353, 11746, 11804), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 139)), 0); Tag4 (("StateType", 2038), ((Tag1 ([Tag1 (("state", 2044), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("plugins/ssr/ssrcommon.mli", 356, 11834, 11836), ("plugins/ssr/ssrcommon.mli", 356, 11834, 11846), 0), 0, 0, 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 140)), 1, 0); (("init", 2045), ((Tag3 ((("state", 2044)), 0, (0)), 100000000, 0, -923), 0, (("plugins/ssr/ssrcommon.mli", 357, 11847, 11849), ("plugins/ssr/ssrcommon.mli", 357, 11847, 11865), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 141)), 0)])), 0, (("plugins/ssr/ssrcommon.mli", 355, 11806, 11806), ("plugins/ssr/ssrcommon.mli", 358, 11866, 11869), 0), Tag1 ("Ssreflect_plugin__Ssrcommon", 142)), 0); Tag3 (("MakeState", 2039), 0, (Tag2 (((("S", 2043)), ((("StateType", 2038)))), Tag1 ([(("tclGET", 2046), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((("S", 2043)), "state"), 0, (0)), 100000000, 0, -950), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -949)], (0)), 100000000, 0, -948), 0), 100000000, 0, -947), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -946)], (0)), 100000000, 0, -945), 0), 100000000, 0, -944), 0, (("plugins/ssr/ssrcommon.mli", 362, 11910, 11912), ("plugins/ssr/ssrcommon.mli", 362, 11910, 11984), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 144)), 0); (("tclGET1", 2047), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((("S", 2043)), "state"), 0, (0)), 100000000, 0, -943), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [((("a")), 100000000, 0, -940)], (0)), 100000000, 0, -942), 0), 100000000, 0, -941), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [((("a")), 100000000, 0, -940)], (0)), 100000000, 0, -939), 0), 100000000, 0, -938), 0, (("plugins/ssr/ssrcommon.mli", 363, 11985, 11987), ("plugins/ssr/ssrcommon.mli", 363, 11985, 12056), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 145)), 0); (("tclSET", 2048), ((Tag1 (0, (Tag3 (Tag1 ((("S", 2043)), "state"), 0, (0)), 100000000, 0, -937), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -936)], (0)), 100000000, 0, -935), 0), 100000000, 0, -934), 0, (("plugins/ssr/ssrcommon.mli", 364, 12057, 12059), ("plugins/ssr/ssrcommon.mli", 364, 12057, 12104), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 146)), 0); (("tacUPDATE", 2049), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((("S", 2043)), "state"), 0, (0)), 100000000, 0, -933), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 (Tag1 ((("S", 2043)), "state"), 0, (0)), 100000000, 0, -932)], (0)), 100000000, 0, -931), 0), 100000000, 0, -930), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -929)], (0)), 100000000, 0, -928), 0), 100000000, 0, -927), 0, (("plugins/ssr/ssrcommon.mli", 365, 12105, 12107), ("plugins/ssr/ssrcommon.mli", 365, 12105, 12185), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 147)), 0); (("get", 2050), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Proofview")), "Goal"), "t"), 0, (0)), 100000000, 0, -926), (Tag3 (Tag1 ((("S", 2043)), "state"), 0, (0)), 100000000, 0, -925), 0), 100000000, 0, -924), 0, (("plugins/ssr/ssrcommon.mli", 367, 12187, 12189), ("plugins/ssr/ssrcommon.mli", 367, 12187, 12226), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 148)), 0)])), 0, (("plugins/ssr/ssrcommon.mli", 360, 11871, 11871), ("plugins/ssr/ssrcommon.mli", 369, 12228, 12231), 0), Tag1 ("Ssreflect_plugin__Ssrcommon", 149)), 0, 0); (("is_ind_ref", 2040), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -28), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -27), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -26), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -25), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -24), 0), 100000000, 0, -23), 0), 100000000, 0, -22), 0), 100000000, 0, -21), 0), 100000000, 0, -20), 0, (("plugins/ssr/ssrcommon.mli", 371, 12233, 12233), ("plugins/ssr/ssrcommon.mli", 371, 12233, 12317), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 150)), 0); (("is_construct_ref", 2041), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -19), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -18), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -17), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -16), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -15), 0), 100000000, 0, -14), 0), 100000000, 0, -13), 0), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("plugins/ssr/ssrcommon.mli", 372, 12318, 12318), ("plugins/ssr/ssrcommon.mli", 372, 12318, 12408), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 151)), 0); (("is_const_ref", 2042), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -10), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -9), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -8), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -7), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("plugins/ssr/ssrcommon.mli", 373, 12409, 12409), ("plugins/ssr/ssrcommon.mli", 373, 12409, 12495), 0), 0, Tag1 ("Ssreflect_plugin__Ssrcommon", 152)), 0)], "Ssreflect_plugin__Ssrcommon", [("Ssreflect_plugin__Ssrcommon", ("\185\186\026\188\023\255\225|\195X`\236m)\012\245")); ("Z", ("\253\196\2168\027\199O\134\220\218\031'\1484\233o")); ("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Vmemitcodes", ("wCd\138\165\158DD\241gH\236.\210\197\247")); ("Vmbytecodes", ("\025\021\151\137Dx\149W\236+[\143f\208\160\016")); ("Vernacexpr", ("Lu|g\028\024j\193\000\234\175\209&\211]\137")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Unix", (":B72R\011\005Sj\189)\011\239PH\254")); ("UnivSubst", ("\190qu\031mc\130\181\003G]\132\"\219m)")); ("UnivProblem", ("6'\161\018\181\001.\253\000\141a6\171\1727\155")); ("UnivNames", ("%\151_\209%+JM$n\001\232\194n\178N")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Unification", ("\017\027\157=\255\1914L\020\213h\154.\219\005\170")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UState", ("SD\203\215|\136\n\251\239\208\148\215C\n\167\005")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("Typeclasses", ("KO\1297x\192\210\231\001\1824l\135\192\160|")); ("Type_errors", ("7\157\162-\214M\206\196\228\191\005v\134\177\144\134")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Tactypes", ("\143E\135*\195\151\144H\151M\011($\017\159\203")); ("Tactics", ("7\154?u\169\241\190R\245\187\153\020GE\029\215")); ("Tacred", ("\133d\143\1310z\030\237\232\002\001\025\147\140\215:")); ("Summary", ("\148G\135\226\024L3\246\021\028U\146\164`\253\250")); ("Store", ("/dT\252\145\179pq\216{\181\206\190K+U")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Random", ("\020\005Xq\171\026\218\152X\135\254\023\133zK\200")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Stateid", ("\183\165\247\166~\005\017.\179f.\178n\255(\137")); ("Ssrmatching_plugin__Ssrmatching", ("\179w\221\183\206\226D\143q\135,U\132/XF")); ("Ssrmatching_plugin", ("\252\165\024\163\228\161\025W>W\211\000y\230d\014")); ("Ssreflect_plugin__Ssrast", ("\164x\017\007&\191K\149\230\001KN\217\151]\027")); ("Ssreflect_plugin", ("\133\1322\143\136Gn\253\214\246\163\030'\138\207$")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("Section", ("\245\207\b\021\142v=\155#w\246}\"4b\006")); ("Safe_typing", (")\250?\164\145\132\241\127\186\152h+\145\"\237l")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("RetrieveObl", ("\181(\0225\214z\024#d\246.M\015.i\210")); ("Reductionops", ("\179\023P\218\146Uh\014IS\196C\031q~#")); ("Redexpr", ("\181\250o\134\007\001\242+$\149)\204\226\"\0240")); ("Range", ("\218\130\001r\237\r\144\171\164\021l\155\196\143sg")); ("Proofview_monad", ("\218\196\189S\147\216\129\221\231\224v\228O\024*\239")); ("Proofview", ("\245\140U\027\236\199\199&\242\156\199YG\250tA")); ("Proof_using", ("\015\162\022\031Y\152\208\231;\015\140;\163\177\251\196")); ("Proof_bullet", ("\249\179=\253g\211\149\212\t\217_0\179\197k\179")); ("Proof", ("\249\030\200g\248\164o&\tS\132\rTl\1736")); ("Primred", ("\158G\192\182\224\196\144*\174y_E\165\012\137C")); ("Pretyping", ("\151\160\191\149\149Ff\195\171g\189\156\r\166n\189")); ("Pretype_errors", ("\155\229\201\176\163\234\203C\127\227\141\174j\199\200H")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Pattern", ("\195C\140Wb=\022\222\208\227^K\003\020\215X")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("NumTok", ("vd\023^\251\244B\166\145'\156\196-0\027\169")); ("Notationextern", ("\000\022b5`t\134]\192f4\131\187\192\152\160")); ("Notation_term", ("5\002\017\217b\193nc>\239\239\237\244\031\173?")); ("Notation", ("\243\219),\220\160v\230\t$\246\188\252\172\152\147")); ("Nativevalues", ("8:\007\025e\226c,\001\171\146#l\210\171\152")); ("Nativelib", ("V\239\205Y1\147E:,\176\196Hy\1483|")); ("Nativecode", ("\190\185\255\006m\012\210\163\138Rz\247\15283\183")); ("Nametab", ("1\018\163\254\225\2178\025DI\0271Q\198\134\140")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Namegen", ("\187\222\224T\255\020\1808-\212*\164\131\177\157x")); ("Monad", ("\244\171T\157\194p\187\160\149\195{\132\222\020\253\148")); ("Modintern", ("F\222V\246R\143{\n\240\004;;;\011\026\223")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Metasyntax", ("\177D\147\n?i\139\193\238 \018\030)\\\244\\")); ("Ltac_pretype", ("\224\"\167\018i:U\172>\188\128$\r\252\020T")); ("Ltac_plugin__Tactic_debug", ("R\229\014\188\018`\180+\230\159\224\202\223\152\0175")); ("Ltac_plugin__Tacinterp", ("\1683!H\190\162R\184\017-\198\198\188\192\223B")); ("Ltac_plugin__Tacintern", ("\212\187Qm4\192\242\208\133\229\134T\215``\030")); ("Ltac_plugin__Tacexpr", ("lM\188\244SSB<\139\160F_\240|\128[")); ("Ltac_plugin", ("\1495\201\148\025F\172$\016P\190\1821b4-")); ("Logic_monad", ("\130\157\160Q\163vQ\137\184\2242\209\128\024\220i")); ("Logic", ("\214\234\234\223\014\197\147\165\158f.$\163\164\245Z")); ("Locus", ("_\002\003W\246\181\225\242Uf\139\226\176\174\192I")); ("Locality", ("\204\134r\227\235'\016\197\215r\210\133\242\226U%")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Libobject", ("\132}t\226hl\213L\210\172\167pc\012~\129")); ("Libnames", ("fp\0255\167\162\209\153\137\161\169#\246\193\003\198")); ("Lib", ("8\018\021\210\020\136$\149\164=\007\002\218\026RX")); ("Inv", ("\249\160_\012\n1\202C\204\171\024\017$\025\226\138")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Ind_tables", ("\1586xu\131C\135\176\222\242\178r\031D,\196")); ("Impargs", ("\021\197\1992>\rm\185\141\"iHY\133\138/")); ("Hook", ("\183\194\223\003\155\169',\187\240a;E\b\1396")); ("Hints", ("\007\130]H\\t(\131\000}\205\137H\148\250\166")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Gramlib__Stream", ("\248\\H\205_76\253\136\146\200\031\165\021=t")); ("Gramlib__Gramext", ("B\171oA\172\212\187>\175\233Q\145\"\176TM")); ("Gramlib", ("\154\143\210e\021i\246\176\224\194\220\217\007\145\139A")); ("Goptions", ("i>Rt=\183g\153\190\144\235u\248\247*e")); ("Goal_select", ("\235$\175\023t\178\194.Ivlz\005\211\173\n")); ("Globnames", ("W\004\172T\214\181H\220\232\160LSW\006\130\226")); ("Glob_term", ("\165=a\227\160\153.\021_$\232\209T\236\153O")); ("GlobEnv", ("(\152\019ok\006R\183\193\145\137\133<\171\005\231")); ("Genredexpr", ("rz\204\143\007`VgI\195P\168sO\198\012")); ("Genlambda", ("\170}\024\241\141\222\136S\169\219\2212i\134KI")); ("Geninterp", ("2S\151\191\189\159\004\188;\224d\199|U\004\028")); ("Genintern", ("\152Ac\019=n\235\197\141\224T\162\192\148eg")); ("Genarg", ("\1434\015\001\152\196\005s\156\136\195\185\247\b3\t")); ("Future", ("\158b\028\190\203\016U\128\195O\140\249\240\129\252s")); ("Ftactic", ("K\172\205\128\241\162\160\201\202\1561o\180L\206:")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Extend", ("\179&!W\163V\006\245\018\168\021\001\224s\168\234")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evd", ("\211\205p\193\216\129r\006\239oN\142ar\196\175")); ("Evarutil", ("\005\175\132e\164O\223svi \252\232\138\022\137")); ("Evarsolve", ("\000&\228\016}j\199\t\229\173\127\024\219\199\184\178")); ("Evardefine", ("\178\167R\199\158\242\001Y\215<\151\020\206\153\227\019")); ("Evar_kinds", ("\023L\186\132\218}\254\221\185\198\220\200h\003{\021")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Equality", ("M\157\199R]=\020;\029s@\210\1789y\163")); ("Environ", ("\171b\1579\229<\003Z\147IL\225X\254\182\204")); ("Entries", ("\172\201\198\221Ap\027_{\174\141C\021\";p")); ("EConstr", ("\201aW\156\157;N\004\201V\208\006L\166\211)")); ("Dyn", ("\131z`\205v\2306\007x\027&K.?;\169")); ("Deprecation", ("\226:\146\245\190;\1929\254@\247a\218\244\134\189")); ("Decls", ("\140C{$\142?\215\153\180\186h;\153\139\187\129")); ("Declaremods", ("\019d|\168<\144\239o\017\222\248K^\157\198\179")); ("Declare", ("\ndh\139\180\185\245\190\133\240\127A\190b\197\023")); ("Declarations", ("\239\137n\019\030w$\182\166z^{\b\206\163\175")); ("DAst", ("\224/\200)\007\184ni\134\b\139\204\241\005w\212")); ("Coqlib", ("'\226\164\143\129\221\158\224\247\247\160\190~\171\191\198")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Conversion", ("\158\150&\195M\tv\127|\029\158RRK\211A")); ("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constrintern", ("\221\031i\248\218\212\161/UQA\147\1348GM")); ("Constrexpr", ("p'r\245\184chL\183\249\"\213]\1741\237")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("ComTactic", ("\152\229\255\156\2543\015\018\211s\158_]Z\189\017")); ("Coercionops", ("\238\240\220\191\201\bMazv\159\227\236?\147>")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CWarnings", ("\132\220\150\227\215\239t\217\132\220'JX\188\246c")); ("CUnix", ("\140Zl\153\167\011J\015\005|th\247OTu")); ("CString", ("\243~4C\023~\169\148x\206\165\207\195\177Q\184")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CEphemeron", ("\204I\179-\206(x4\173\229\250\001PkH\151")); ("CDebug", ("^4\210p7\239!3\138\138\213?\239`\250\157")); ("CClosure", ("\167\b\022\241V-\r\253\b\002\000j]\223%\142")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("Attributes", ("\2145\146P\224\163B1\135\232\204SD\129^\141")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])
Environ.env -> Evd.evar_map -> EConstr.t -> Names.GlobRef.t -> bool

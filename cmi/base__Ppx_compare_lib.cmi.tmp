type 'a compare = 'a -> 'a -> int
type 'a equal = 'a -> 'a -> bool
val compare_abstract : type_name:string -> 'a compare
val equal_abstract : type_name:string -> 'a equal
module Comparable :
  sig
    module type S = sig type t val compare : t compare end
    module type S1 =
      sig type 'a t val compare : 'a compare -> 'a t compare end
    module type S2 =
      sig
        type ('a, 'b) t
        val compare : 'a compare -> 'b compare -> ('a, 'b) t compare
      end
    module type S3 =
      sig
        type ('a, 'b, 'c) t
        val compare :
          'a compare -> 'b compare -> 'c compare -> ('a, 'b, 'c) t compare
      end
  end
module Equal :
  sig
    module type S = sig type t val equal : t equal end
    module type S1 = sig type 'a t val equal : 'a equal -> 'a t equal end
    module type S2 =
      sig
        type ('a, 'b) t
        val equal : 'a equal -> 'b equal -> ('a, 'b) t equal
      end
    module type S3 =
      sig
        type ('a, 'b, 'c) t
        val equal : 'a equal -> 'b equal -> 'c equal -> ('a, 'b, 'c) t equal
      end
  end
module Builtin :
  sig
    val compare_bool : bool compare
    val compare_char : char compare
    val compare_float : float compare
    val compare_int : int compare
    val compare_int32 : int32 compare
    val compare_int64 : int64 compare
    val compare_nativeint : nativeint compare
    val compare_string : string compare
    val compare_unit : unit compare
    val compare_array : 'a compare -> 'a array compare
    val compare_list : 'a compare -> 'a list compare
    val compare_option : 'a compare -> 'a option compare
    val compare_ref : 'a compare -> 'a ref compare
    val equal_bool : bool equal
    val equal_char : char equal
    val equal_float : float equal
    val equal_int : int equal
    val equal_int32 : int32 equal
    val equal_int64 : int64 equal
    val equal_nativeint : nativeint equal
    val equal_string : string equal
    val equal_unit : unit equal
    val equal_array : 'a equal -> 'a array equal
    val equal_list : 'a equal -> 'a list equal
    val equal_option : 'a equal -> 'a option equal
    val equal_ref : 'a equal -> 'a ref equal("DEBUG:rule", [Tag1 (("compare", 493), ([((("a")), 100000000, 0, -17)], 1, 0, 1, ((Tag1 (0, ((("a")), 100000000, 0, -17), (Tag1 (0, ((("a")), 100000000, 0, -17), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -16), 0), 100000000, 0, -15), 0), 100000000, 0, -14)), [46], [0], 0, 0, (("src/ppx_compare_lib.mli", 4, 113, 113), ("src/ppx_compare_lib.mli", 4, 113, 146), 0), 0, 0, 0, Tag1 ("Base__Ppx_compare_lib", 0)), 1, 0); Tag1 (("equal", 494), ([((("a")), 100000000, 0, -13)], 1, 0, 1, ((Tag1 (0, ((("a")), 100000000, 0, -13), (Tag1 (0, ((("a")), 100000000, 0, -13), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0), 100000000, 0, -10)), [46], [0], 0, 0, (("src/ppx_compare_lib.mli", 5, 147, 147), ("src/ppx_compare_lib.mli", 5, 147, 179), 0), 0, 0, 0, Tag1 ("Base__Ppx_compare_lib", 1)), 1, 0); (("compare_abstract", 495), ((Tag1 (("type_name"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -9), (Tag3 ((("compare", 493)), [((0), 100000000, 0, -8)], (0)), 100000000, 0, -7), 0), 100000000, 0, -6), 0, (("src/ppx_compare_lib.mli", 8, 213, 213), ("src/ppx_compare_lib.mli", 8, 213, 265), 0), 0, Tag1 ("Base__Ppx_compare_lib", 2)), 0); (("equal_abstract", 496), ((Tag1 (("type_name"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5), (Tag3 ((("equal", 494)), [((0), 100000000, 0, -4)], (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/ppx_compare_lib.mli", 10, 267, 267), ("src/ppx_compare_lib.mli", 10, 267, 315), 0), 0, Tag1 ("Base__Ppx_compare_lib", 3)), 0); Tag3 (("Comparable", 497), 0, (Tag1 ([Tag4 (("S", 500), ((Tag1 ([Tag1 (("t", 504), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/ppx_compare_lib.mli", 14, 363, 367), ("src/ppx_compare_lib.mli", 14, 363, 373), 0), 0, 0, 0, Tag1 ("Base__Ppx_compare_lib", 4)), 1, 0); (("compare", 505), ((Tag3 ((("compare", 493)), [(Tag3 ((("t", 504)), 0, (0)), 100000000, 0, -19)], (0)), 100000000, 0, -18), 0, (("src/ppx_compare_lib.mli", 16, 375, 379), ("src/ppx_compare_lib.mli", 16, 375, 402), 0), 0, Tag1 ("Base__Ppx_compare_lib", 5)), 0)])), 0, (("src/ppx_compare_lib.mli", 13, 341, 343), ("src/ppx_compare_lib.mli", 17, 403, 408), 0), Tag1 ("Base__Ppx_compare_lib", 6)), 0); Tag4 (("S1", 501), ((Tag1 ([Tag1 (("t", 506), ([((("a")), 100000000, 0, -25)], 1, 0, 1, 0, [7], [2], 0, 0, (("src/ppx_compare_lib.mli", 20, 433, 437), ("src/ppx_compare_lib.mli", 20, 433, 446), 0), 0, 0, 0, Tag1 ("Base__Ppx_compare_lib", 7)), 1, 0); (("compare", 507), ((Tag1 (0, (Tag3 ((("compare", 493)), [((("a")), 100000000, 0, -23)], (0)), 100000000, 0, -24), (Tag3 ((("compare", 493)), [(Tag3 ((("t", 506)), [((("a")), 100000000, 0, -23)], (0)), 100000000, 0, -22)], (0)), 100000000, 0, -21), 0), 100000000, 0, -20), 0, (("src/ppx_compare_lib.mli", 22, 448, 452), ("src/ppx_compare_lib.mli", 22, 448, 492), 0), 0, Tag1 ("Base__Ppx_compare_lib", 8)), 0)])), 0, (("src/ppx_compare_lib.mli", 19, 410, 412), ("src/ppx_compare_lib.mli", 23, 493, 498), 0), Tag1 ("Base__Ppx_compare_lib", 9)), 0); Tag4 (("S2", 502), ((Tag1 ([Tag1 (("t", 508), ([((("a")), 100000000, 0, -34); ((("b")), 100000000, 0, -35)], 2, 0, 1, 0, [7; 7], [2; 2], 0, 0, (("src/ppx_compare_lib.mli", 26, 523, 527), ("src/ppx_compare_lib.mli", 26, 523, 542), 0), 0, 0, 0, Tag1 ("Base__Ppx_compare_lib", 10)), 1, 0); (("compare", 509), ((Tag1 (0, (Tag3 ((("compare", 493)), [((("a")), 100000000, 0, -30)], (0)), 100000000, 0, -33), (Tag1 (0, (Tag3 ((("compare", 493)), [((("b")), 100000000, 0, -31)], (0)), 100000000, 0, -32), (Tag3 ((("compare", 493)), [(Tag3 ((("t", 508)), [((("a")), 100000000, 0, -30); ((("b")), 100000000, 0, -31)], (0)), 100000000, 0, -29)], (0)), 100000000, 0, -28), 0), 100000000, 0, -27), 0), 100000000, 0, -26), 0, (("src/ppx_compare_lib.mli", 28, 544, 548), ("src/ppx_compare_lib.mli", 28, 544, 608), 0), 0, Tag1 ("Base__Ppx_compare_lib", 11)), 0)])), 0, (("src/ppx_compare_lib.mli", 25, 500, 502), ("src/ppx_compare_lib.mli", 29, 609, 614), 0), Tag1 ("Base__Ppx_compare_lib", 12)), 0); Tag4 (("S3", 503), ((Tag1 ([Tag1 (("t", 510), ([((("a")), 100000000, 0, -47); ((("b")), 100000000, 0, -48); ((("c")), 100000000, 0, -49)], 3, 0, 1, 0, [7; 7; 7], [2; 2; 2], 0, 0, (("src/ppx_compare_lib.mli", 32, 639, 643), ("src/ppx_compare_lib.mli", 32, 639, 662), 0), 0, 0, 0, Tag1 ("Base__Ppx_compare_lib", 13)), 1, 0); (("compare", 511), ((Tag1 (0, (Tag3 ((("compare", 493)), [((("a")), 100000000, 0, -41)], (0)), 100000000, 0, -46), (Tag1 (0, (Tag3 ((("compare", 493)), [((("b")), 100000000, 0, -42)], (0)), 100000000, 0, -45), (Tag1 (0, (Tag3 ((("compare", 493)), [((("c")), 100000000, 0, -43)], (0)), 100000000, 0, -44), (Tag3 ((("compare", 493)), [(Tag3 ((("t", 510)), [((("a")), 100000000, 0, -41); ((("b")), 100000000, 0, -42); ((("c")), 100000000, 0, -43)], (0)), 100000000, 0, -40)], (0)), 100000000, 0, -39), 0), 100000000, 0, -38), 0), 100000000, 0, -37), 0), 100000000, 0, -36), 0, (("src/ppx_compare_lib.mli", 34, 664, 668), ("src/ppx_compare_lib.mli", 34, 664, 746), 0), 0, Tag1 ("Base__Ppx_compare_lib", 14)), 0)])), 0, (("src/ppx_compare_lib.mli", 31, 616, 618), ("src/ppx_compare_lib.mli", 35, 747, 752), 0), Tag1 ("Base__Ppx_compare_lib", 15)), 0)]), 0, (("src/ppx_compare_lib.mli", 12, 317, 317), ("src/ppx_compare_lib.mli", 36, 753, 756), 0), Tag1 ("Base__Ppx_compare_lib", 16)), 0, 0); Tag3 (("Equal", 498), 0, (Tag1 ([Tag4 (("S", 512), ((Tag1 ([Tag1 (("t", 516), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/ppx_compare_lib.mli", 40, 799, 803), ("src/ppx_compare_lib.mli", 40, 799, 809), 0), 0, 0, 0, Tag1 ("Base__Ppx_compare_lib", 17)), 1, 0); (("equal", 517), ((Tag3 ((("equal", 494)), [(Tag3 ((("t", 516)), 0, (0)), 100000000, 0, -51)], (0)), 100000000, 0, -50), 0, (("src/ppx_compare_lib.mli", 42, 811, 815), ("src/ppx_compare_lib.mli", 42, 811, 834), 0), 0, Tag1 ("Base__Ppx_compare_lib", 18)), 0)])), 0, (("src/ppx_compare_lib.mli", 39, 777, 779), ("src/ppx_compare_lib.mli", 43, 835, 840), 0), Tag1 ("Base__Ppx_compare_lib", 19)), 0); Tag4 (("S1", 513), ((Tag1 ([Tag1 (("t", 518), ([((("a")), 100000000, 0, -57)], 1, 0, 1, 0, [7], [2], 0, 0, (("src/ppx_compare_lib.mli", 46, 865, 869), ("src/ppx_compare_lib.mli", 46, 865, 878), 0), 0, 0, 0, Tag1 ("Base__Ppx_compare_lib", 20)), 1, 0); (("equal", 519), ((Tag1 (0, (Tag3 ((("equal", 494)), [((("a")), 100000000, 0, -55)], (0)), 100000000, 0, -56), (Tag3 ((("equal", 494)), [(Tag3 ((("t", 518)), [((("a")), 100000000, 0, -55)], (0)), 100000000, 0, -54)], (0)), 100000000, 0, -53), 0), 100000000, 0, -52), 0, (("src/ppx_compare_lib.mli", 48, 880, 884), ("src/ppx_compare_lib.mli", 48, 880, 918), 0), 0, Tag1 ("Base__Ppx_compare_lib", 21)), 0)])), 0, (("src/ppx_compare_lib.mli", 45, 842, 844), ("src/ppx_compare_lib.mli", 49, 919, 924), 0), Tag1 ("Base__Ppx_compare_lib", 22)), 0); Tag4 (("S2", 514), ((Tag1 ([Tag1 (("t", 520), ([((("a")), 100000000, 0, -66); ((("b")), 100000000, 0, -67)], 2, 0, 1, 0, [7; 7], [2; 2], 0, 0, (("src/ppx_compare_lib.mli", 52, 949, 953), ("src/ppx_compare_lib.mli", 52, 949, 968), 0), 0, 0, 0, Tag1 ("Base__Ppx_compare_lib", 23)), 1, 0); (("equal", 521), ((Tag1 (0, (Tag3 ((("equal", 494)), [((("a")), 100000000, 0, -62)], (0)), 100000000, 0, -65), (Tag1 (0, (Tag3 ((("equal", 494)), [((("b")), 100000000, 0, -63)], (0)), 100000000, 0, -64), (Tag3 ((("equal", 494)), [(Tag3 ((("t", 520)), [((("a")), 100000000, 0, -62); ((("b")), 100000000, 0, -63)], (0)), 100000000, 0, -61)], (0)), 100000000, 0, -60), 0), 100000000, 0, -59), 0), 100000000, 0, -58), 0, (("src/ppx_compare_lib.mli", 54, 970, 974), ("src/ppx_compare_lib.mli", 54, 970, 1026), 0), 0, Tag1 ("Base__Ppx_compare_lib", 24)), 0)])), 0, (("src/ppx_compare_lib.mli", 51, 926, 928), ("src/ppx_compare_lib.mli", 55, 1027, 1032), 0), Tag1 ("Base__Ppx_compare_lib", 25)), 0); Tag4 (("S3", 515), ((Tag1 ([Tag1 (("t", 522), ([((("a")), 100000000, 0, -79); ((("b")), 100000000, 0, -80); ((("c")), 100000000, 0, -81)], 3, 0, 1, 0, [7; 7; 7], [2; 2; 2], 0, 0, (("src/ppx_compare_lib.mli", 58, 1057, 1061), ("src/ppx_compare_lib.mli", 58, 1057, 1080), 0), 0, 0, 0, Tag1 ("Base__Ppx_compare_lib", 26)), 1, 0); (("equal", 523), ((Tag1 (0, (Tag3 ((("equal", 494)), [((("a")), 100000000, 0, -73)], (0)), 100000000, 0, -78), (Tag1 (0, (Tag3 ((("equal", 494)), [((("b")), 100000000, 0, -74)], (0)), 100000000, 0, -77), (Tag1 (0, (Tag3 ((("equal", 494)), [((("c")), 100000000, 0, -75)], (0)), 100000000, 0, -76), (Tag3 ((("equal", 494)), [(Tag3 ((("t", 522)), [((("a")), 100000000, 0, -73); ((("b")), 100000000, 0, -74); ((("c")), 100000000, 0, -75)], (0)), 100000000, 0, -72)], (0)), 100000000, 0, -71), 0), 100000000, 0, -70), 0), 100000000, 0, -69), 0), 100000000, 0, -68), 0, (("src/ppx_compare_lib.mli", 60, 1082, 1086), ("src/ppx_compare_lib.mli", 60, 1082, 1154), 0), 0, Tag1 ("Base__Ppx_compare_lib", 27)), 0)])), 0, (("src/ppx_compare_lib.mli", 57, 1034, 1036), ("src/ppx_compare_lib.mli", 61, 1155, 1160), 0), Tag1 ("Base__Ppx_compare_lib", 28)), 0)]), 0, (("src/ppx_compare_lib.mli", 38, 758, 758), ("src/ppx_compare_lib.mli", 62, 1161, 1164), 0), Tag1 ("Base__Ppx_compare_lib", 29)), 0, 0); Tag3 (("Builtin", 499), 0, (Tag1 ([(("compare_bool", 524), ((Tag3 ((("compare", 493)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -157)], (0)), 100000000, 0, -156), 0, (("src/ppx_compare_lib.mli", 65, 1187, 1189), ("src/ppx_compare_lib.mli", 65, 1187, 1220), 0), 0, Tag1 ("Base__Ppx_compare_lib", 30)), 0); (("compare_char", 525), ((Tag3 ((("compare", 493)), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -155)], (0)), 100000000, 0, -154), 0, (("src/ppx_compare_lib.mli", 66, 1221, 1223), ("src/ppx_compare_lib.mli", 66, 1221, 1254), 0), 0, Tag1 ("Base__Ppx_compare_lib", 31)), 0); (("compare_float", 526), ((Tag3 ((("compare", 493)), [(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -153)], (0)), 100000000, 0, -152), 0, (("src/ppx_compare_lib.mli", 67, 1255, 1257), ("src/ppx_compare_lib.mli", 67, 1255, 1290), 0), 0, Tag1 ("Base__Ppx_compare_lib", 32)), 0); (("compare_int", 527), ((Tag3 ((("compare", 493)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -151)], (0)), 100000000, 0, -150), 0, (("src/ppx_compare_lib.mli", 68, 1291, 1293), ("src/ppx_compare_lib.mli", 68, 1291, 1322), 0), 0, Tag1 ("Base__Ppx_compare_lib", 33)), 0); (("compare_int32", 528), ((Tag3 ((("compare", 493)), [(Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -149)], (0)), 100000000, 0, -148), 0, (("src/ppx_compare_lib.mli", 69, 1323, 1325), ("src/ppx_compare_lib.mli", 69, 1323, 1358), 0), 0, Tag1 ("Base__Ppx_compare_lib", 34)), 0); (("compare_int64", 529), ((Tag3 ((("compare", 493)), [(Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -147)], (0)), 100000000, 0, -146), 0, (("src/ppx_compare_lib.mli", 70, 1359, 1361), ("src/ppx_compare_lib.mli", 70, 1359, 1394), 0), 0, Tag1 ("Base__Ppx_compare_lib", 35)), 0); (("compare_nativeint", 530), ((Tag3 ((("compare", 493)), [(Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -145)], (0)), 100000000, 0, -144), 0, (("src/ppx_compare_lib.mli", 71, 1395, 1397), ("src/ppx_compare_lib.mli", 71, 1395, 1438), 0), 0, Tag1 ("Base__Ppx_compare_lib", 36)), 0); (("compare_string", 531), ((Tag3 ((("compare", 493)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -143)], (0)), 100000000, 0, -142), 0, (("src/ppx_compare_lib.mli", 72, 1439, 1441), ("src/ppx_compare_lib.mli", 72, 1439, 1476), 0), 0, Tag1 ("Base__Ppx_compare_lib", 37)), 0); (("compare_unit", 532), ((Tag3 ((("compare", 493)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -141)], (0)), 100000000, 0, -140), 0, (("src/ppx_compare_lib.mli", 73, 1477, 1479), ("src/ppx_compare_lib.mli", 73, 1477, 1510), 0), 0, Tag1 ("Base__Ppx_compare_lib", 38)), 0); (("compare_array", 533), ((Tag1 (0, (Tag3 ((("compare", 493)), [((("a")), 100000000, 0, -138)], (0)), 100000000, 0, -139), (Tag3 ((("compare", 493)), [(Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -138)], (0)), 100000000, 0, -137)], (0)), 100000000, 0, -136), 0), 100000000, 0, -135), 0, (("src/ppx_compare_lib.mli", 74, 1511, 1513), ("src/ppx_compare_lib.mli", 74, 1511, 1563), 0), 0, Tag1 ("Base__Ppx_compare_lib", 39)), 0); (("compare_list", 534), ((Tag1 (0, (Tag3 ((("compare", 493)), [((("a")), 100000000, 0, -133)], (0)), 100000000, 0, -134), (Tag3 ((("compare", 493)), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -133)], (0)), 100000000, 0, -132)], (0)), 100000000, 0, -131), 0), 100000000, 0, -130), 0, (("src/ppx_compare_lib.mli", 75, 1564, 1566), ("src/ppx_compare_lib.mli", 75, 1564, 1614), 0), 0, Tag1 ("Base__Ppx_compare_lib", 40)), 0); (("compare_option", 535), ((Tag1 (0, (Tag3 ((("compare", 493)), [((("a")), 100000000, 0, -128)], (0)), 100000000, 0, -129), (Tag3 ((("compare", 493)), [(Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -128)], (0)), 100000000, 0, -127)], (0)), 100000000, 0, -126), 0), 100000000, 0, -125), 0, (("src/ppx_compare_lib.mli", 76, 1615, 1617), ("src/ppx_compare_lib.mli", 76, 1615, 1669), 0), 0, Tag1 ("Base__Ppx_compare_lib", 41)), 0); (("compare_ref", 536), ((Tag1 (0, (Tag3 ((("compare", 493)), [((("a")), 100000000, 0, -123)], (0)), 100000000, 0, -124), (Tag3 ((("compare", 493)), [(Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [((("a")), 100000000, 0, -123)], (0)), 100000000, 0, -122)], (0)), 100000000, 0, -121), 0), 100000000, 0, -120), 0, (("src/ppx_compare_lib.mli", 77, 1670, 1672), ("src/ppx_compare_lib.mli", 77, 1670, 1718), 0), 0, Tag1 ("Base__Ppx_compare_lib", 42)), 0); (("equal_bool", 537), ((Tag3 ((("equal", 494)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -119)], (0)), 100000000, 0, -118), 0, (("src/ppx_compare_lib.mli", 78, 1719, 1721), ("src/ppx_compare_lib.mli", 78, 1719, 1748), 0), 0, Tag1 ("Base__Ppx_compare_lib", 43)), 0); (("equal_char", 538), ((Tag3 ((("equal", 494)), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -117)], (0)), 100000000, 0, -116), 0, (("src/ppx_compare_lib.mli", 79, 1749, 1751), ("src/ppx_compare_lib.mli", 79, 1749, 1778), 0), 0, Tag1 ("Base__Ppx_compare_lib", 44)), 0); (("equal_float", 539), ((Tag3 ((("equal", 494)), [(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -115)], (0)), 100000000, 0, -114), 0, (("src/ppx_compare_lib.mli", 80, 1779, 1781), ("src/ppx_compare_lib.mli", 80, 1779, 1810), 0), 0, Tag1 ("Base__Ppx_compare_lib", 45)), 0); (("equal_int", 540), ((Tag3 ((("equal", 494)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -113)], (0)), 100000000, 0, -112), 0, (("src/ppx_compare_lib.mli", 81, 1811, 1813), ("src/ppx_compare_lib.mli", 81, 1811, 1838), 0), 0, Tag1 ("Base__Ppx_compare_lib", 46)), 0); (("equal_int32", 541), ((Tag3 ((("equal", 494)), [(Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -111)], (0)), 100000000, 0, -110), 0, (("src/ppx_compare_lib.mli", 82, 1839, 1841), ("src/ppx_compare_lib.mli", 82, 1839, 1870), 0), 0, Tag1 ("Base__Ppx_compare_lib", 47)), 0); (("equal_int64", 542), ((Tag3 ((("equal", 494)), [(Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -109)], (0)), 100000000, 0, -108), 0, (("src/ppx_compare_lib.mli", 83, 1871, 1873), ("src/ppx_compare_lib.mli", 83, 1871, 1902), 0), 0, Tag1 ("Base__Ppx_compare_lib", 48)), 0); (("equal_nativeint", 543), ((Tag3 ((("equal", 494)), [(Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -107)], (0)), 100000000, 0, -106), 0, (("src/ppx_compare_lib.mli", 84, 1903, 1905), ("src/ppx_compare_lib.mli", 84, 1903, 1942), 0), 0, Tag1 ("Base__Ppx_compare_lib", 49)), 0); (("equal_string", 544), ((Tag3 ((("equal", 494)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -105)], (0)), 100000000, 0, -104), 0, (("src/ppx_compare_lib.mli", 85, 1943, 1945), ("src/ppx_compare_lib.mli", 85, 1943, 1976), 0), 0, Tag1 ("Base__Ppx_compare_lib", 50)), 0); (("equal_unit", 545), ((Tag3 ((("equal", 494)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -103)], (0)), 100000000, 0, -102), 0, (("src/ppx_compare_lib.mli", 86, 1977, 1979), ("src/ppx_compare_lib.mli", 86, 1977, 2006), 0), 0, Tag1 ("Base__Ppx_compare_lib", 51)), 0); (("equal_array", 546), ((Tag1 (0, (Tag3 ((("equal", 494)), [((("a")), 100000000, 0, -100)], (0)), 100000000, 0, -101), (Tag3 ((("equal", 494)), [(Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -100)], (0)), 100000000, 0, -99)], (0)), 100000000, 0, -98), 0), 100000000, 0, -97), 0, (("src/ppx_compare_lib.mli", 87, 2007, 2009), ("src/ppx_compare_lib.mli", 87, 2007, 2053), 0), 0, Tag1 ("Base__Ppx_compare_lib", 52)), 0); (("equal_list", 547), ((Tag1 (0, (Tag3 ((("equal", 494)), [((("a")), 100000000, 0, -95)], (0)), 100000000, 0, -96), (Tag3 ((("equal", 494)), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -95)], (0)), 100000000, 0, -94)], (0)), 100000000, 0, -93), 0), 100000000, 0, -92), 0, (("src/ppx_compare_lib.mli", 88, 2054, 2056), ("src/ppx_compare_lib.mli", 88, 2054, 2098), 0), 0, Tag1 ("Base__Ppx_compare_lib", 53)), 0); (("equal_option", 548), ((Tag1 (0, (Tag3 ((("equal", 494)), [((("a")), 100000000, 0, -90)], (0)), 100000000, 0, -91), (Tag3 ((("equal", 494)), [(Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -90)], (0)), 100000000, 0, -89)], (0)), 100000000, 0, -88), 0), 100000000, 0, -87), 0, (("src/ppx_compare_lib.mli", 89, 2099, 2101), ("src/ppx_compare_lib.mli", 89, 2099, 2147), 0), 0, Tag1 ("Base__Ppx_compare_lib", 54)), 0); (("equal_ref", 549), ((Tag1 (0, (Tag3 ((("equal", 494)), [((("a")), 100000000, 0, -85)], (0)), 100000000, 0, -86), (Tag3 ((("equal", 494)), [(Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [((("a")), 100000000, 0, -85)], (0)), 100000000, 0, -84)], (0)), 100000000, 0, -83), 0), 100000000, 0, -82), 0, (("src/ppx_compare_lib.mli", 90, 2148, 2150), ("src/ppx_compare_lib.mli", 90, 2148, 2190), 0), 0, Tag1 ("Base__Ppx_compare_lib", 55)), 0)]), 0, (("src/ppx_compare_lib.mli", 64, 1166, 1166), ("src/ppx_compare_lib.mli", 91, 2191, 2194), 0), Tag1 ("Base__Ppx_compare_lib", 56)), 0, 0)], "Base__Ppx_compare_lib", [("Base__Ppx_compare_lib", ("\243\186~\233\228\199Ah\181.\223\004e\231\129S")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Base__", ("p\252\007\139\128\163W\025+\0225\001\246|P\158"))], [(0)])

  end

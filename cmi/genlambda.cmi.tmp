type reloc_table = (int * int) array
type case_annot =
    Constr.case_info * reloc_table * Declarations.recursivity_kind
type 'v lambda =
    Lrel of Names.Name.t * int
  | Lvar of Names.Id.t
  | Levar of Evar.t * 'v lambda array
  | Lprod of 'v lambda * 'v lambda
  | Llam of Names.Name.t Context.binder_annot array * 'v lambda
  | Llet of Names.Name.t Context.binder_annot * 'v lambda * 'v lambda
  | Lapp of 'v lambda * 'v lambda array
  | Lconst of Constr.pconstant
  | Lproj of Names.Projection.Repr.t * 'v lambda
  | Lprim of Constr.pconstant * CPrimitives.t * 'v lambda array
  | Lcase of case_annot * 'v lambda * 'v lambda * 'v lam_branches
  | Lfix of (int array * Names.inductive array * int) * 'v fix_decl
  | Lcofix of int * 'v fix_decl
  | Lint of int
  | Lparray of 'v lambda array * 'v lambda
  | Lmakeblock of Names.inductive * int * 'v lambda array
  | Luint of Uint63.t
  | Lfloat of Float64.t
  | Lval of 'v
  | Lsort of Sorts.t
  | Lind of Constr.pinductive
  | Lforce
and 'v lam_branches = {
  constant_branches : 'v lambda array;
  nonconstant_branches :
    (Names.Name.t Context.binder_annot array * 'v lambda) array;
}
and 'v fix_decl =
    Names.Name.t Context.binder_annot array * 'v lambda array *
    'v lambda array
type evars = { evars_val : Constr.constr Constr.evar_handler; }
val empty_evars : evars
val mkLapp : 'v lambda -> 'v lambda array -> 'v lambda
val mkLlam :
  Names.Name.t Context.binder_annot array -> 'v lambda -> 'v lambda
val decompose_Llam :
  'v lambda -> Names.Name.t Context.binder_annot array * 'v lambda
val decompose_Llam_Llet :
  'v lambda ->
  (Names.Name.t Context.binder_annot * 'v lambda option) array * 'v lambda
val map_lam_with_binders :
  (int -> 'a -> 'a) ->
  ('a -> 'v lambda -> 'v lambda) -> 'a -> 'v lambda -> 'v lambda
val lam_exlift : Esubst.lift -> 'v lambda -> 'v lambda
val lam_lift : int -> 'v lambda -> 'v lambda
val lam_subst_rel :
  'v lambda -> Names.Name.t -> int -> 'v lambda Esubst.subs -> 'v lambda
val lam_exsubst : 'v lambda Esubst.subs -> 'v lambda -> 'v lambda
val lam_subst_args :
  'v lambda Esubst.subs -> 'v lambda array -> 'v lambda array
val simplify :
  ('v lambda -> bool) -> 'v lambda Esubst.subs -> 'v lambda -> 'v lambda
val remove_let : 'v lambda Esubst.subs -> 'v lambda -> 'v lambda
val get_alias : Environ.env -> Names.Constant.t -> Names.Constant.t
val make_args : int -> int -> 'v lambda array
val makeblock :
  (int -> 'v lambda array -> 'v option) ->
  Names.inductive -> int -> int -> int -> 'v lambda array -> 'v lambda
val lambda_of_prim :
  Environ.env ->
  Constr.pconstant -> CPrimitives.t -> 'v lambda array -> 'v lambda
module type S =
  sig
    type value
    val as_value : int -> value lambda array -> value option
    val get_constant :
      Constr.pconstant -> Declarations.constant_body -> value lambda
    val check_inductive :
      Names.inductive -> Declarations.mutual_inductive_body -> unit
  end
module Make :
  functor (Val : S) ->
    sig
      val lambda_of_constr :
        Environ.env -> evars -> Constr.constr -> Val.value lambda
    end("DEBUG:rule", [Tag1 (("reloc_table", 1171), (0, 0, 0, 1, ((Tag3 ((Tag3 ("array", 8)), [(Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -234); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -235)]), 100000000, 0, -233)], (0)), 100000000, 0, -232)), 0, 0, 0, 0, (("kernel/genlambda.mli", 16, 762, 762), ("kernel/genlambda.mli", 16, 762, 798), 0), 0, 0, 0, Tag1 ("Genlambda", 1)), 1, 0); Tag1 (("case_annot", 1172), (0, 0, 0, 1, ((Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constr")), "case_info"), 0, (0)), 100000000, 0, -229); (Tag3 ((("reloc_table", 1171)), 0, (0)), 100000000, 0, -230); (Tag3 (Tag1 ((Tag2 ("Declarations")), "recursivity_kind"), 0, (0)), 100000000, 0, -231)]), 100000000, 0, -228)), 0, 0, 0, 0, (("kernel/genlambda.mli", 18, 800, 800), ("kernel/genlambda.mli", 18, 800, 873), 0), 0, 0, 0, Tag1 ("Genlambda", 2)), 1, 0); Tag1 (("lambda", 1173), ([((("v")), 100000000, 0, -182)], 1, Tag1 ([(("Lrel", 548), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -176); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -177)]), 0, (("kernel/genlambda.mli", 21, 892, 892), ("kernel/genlambda.mli", 21, 892, 923), 0), 0, Tag1 ("Genlambda", 6)); (("Lvar", 558), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -178)]), 0, (("kernel/genlambda.mli", 22, 924, 924), ("kernel/genlambda.mli", 22, 924, 947), 0), 0, Tag1 ("Genlambda", 7)); (("Levar", 575), ([(Tag3 (Tag1 ((Tag2 ("Evar")), "t"), 0, (0)), 100000000, 0, -179); (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -182)], (0)), 100000000, 0, -181)], (0)), 100000000, 0, -180)]), 0, (("kernel/genlambda.mli", 23, 948, 948), ("kernel/genlambda.mli", 23, 948, 991), 0), 0, Tag1 ("Genlambda", 8)); (("Lprod", 585), ([(Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -182)], (0)), 100000000, 0, -183); (Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -182)], (0)), 100000000, 0, -184)]), 0, (("kernel/genlambda.mli", 24, 1008, 1008), ("kernel/genlambda.mli", 24, 1008, 1048), 0), 0, Tag1 ("Genlambda", 9)); (("Llam", 586), ([(Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -187)], (0)), 100000000, 0, -186)], (0)), 100000000, 0, -185); (Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -182)], (0)), 100000000, 0, -188)]), 0, (("kernel/genlambda.mli", 25, 1049, 1049), ("kernel/genlambda.mli", 25, 1049, 1113), 0), 0, Tag1 ("Genlambda", 10)); (("Llet", 600), ([(Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -190)], (0)), 100000000, 0, -189); (Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -182)], (0)), 100000000, 0, -191); (Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -182)], (0)), 100000000, 0, -192)]), 0, (("kernel/genlambda.mli", 26, 1114, 1114), ("kernel/genlambda.mli", 26, 1114, 1184), 0), 0, Tag1 ("Genlambda", 11)); (("Lapp", 601), ([(Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -182)], (0)), 100000000, 0, -193); (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -182)], (0)), 100000000, 0, -195)], (0)), 100000000, 0, -194)]), 0, (("kernel/genlambda.mli", 27, 1185, 1185), ("kernel/genlambda.mli", 27, 1185, 1231), 0), 0, Tag1 ("Genlambda", 12)); (("Lconst", 602), ([(Tag3 (Tag1 ((Tag2 ("Constr")), "pconstant"), 0, (0)), 100000000, 0, -196)]), 0, (("kernel/genlambda.mli", 28, 1232, 1232), ("kernel/genlambda.mli", 28, 1232, 1260), 0), 0, Tag1 ("Genlambda", 13)); (("Lproj", 603), ([(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Projection"), "Repr"), "t"), 0, (0)), 100000000, 0, -197); (Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -182)], (0)), 100000000, 0, -198)]), 0, (("kernel/genlambda.mli", 29, 1261, 1261), ("kernel/genlambda.mli", 29, 1261, 1309), 0), 0, Tag1 ("Genlambda", 14)); (("Lprim", 647), ([(Tag3 (Tag1 ((Tag2 ("Constr")), "pconstant"), 0, (0)), 100000000, 0, -199); (Tag3 (Tag1 ((Tag2 ("CPrimitives")), "t"), 0, (0)), 100000000, 0, -200); (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -182)], (0)), 100000000, 0, -202)], (0)), 100000000, 0, -201)]), 0, (("kernel/genlambda.mli", 30, 1310, 1310), ("kernel/genlambda.mli", 30, 1310, 1372), 0), 0, Tag1 ("Genlambda", 15)); (("Lcase", 676), ([(Tag3 ((("case_annot", 1172)), 0, (0)), 100000000, 0, -203); (Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -182)], (0)), 100000000, 0, -204); (Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -182)], (0)), 100000000, 0, -205); (Tag3 ((("lam_branches", 1174)), [((("v")), 100000000, 0, -182)], (0)), 100000000, 0, -206)]), 0, (("kernel/genlambda.mli", 31, 1373, 1373), ("kernel/genlambda.mli", 31, 1373, 1444), 0), 0, Tag1 ("Genlambda", 16)); (("Lfix", 677), ([(Tag2 ([(Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -209)], (0)), 100000000, 0, -208); (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -211)], (0)), 100000000, 0, -210); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -212)]), 100000000, 0, -207); (Tag3 ((("fix_decl", 1175)), [((("v")), 100000000, 0, -182)], (0)), 100000000, 0, -213)]), 0, (("kernel/genlambda.mli", 33, 1501, 1501), ("kernel/genlambda.mli", 33, 1501, 1569), 0), 0, Tag1 ("Genlambda", 17)); (("Lcofix", 678), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -214); (Tag3 ((("fix_decl", 1175)), [((("v")), 100000000, 0, -182)], (0)), 100000000, 0, -215)]), 0, (("kernel/genlambda.mli", 34, 1570, 1570), ("kernel/genlambda.mli", 34, 1570, 1606), 0), 0, Tag1 ("Genlambda", 18)); (("Lint", 679), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -216)]), 0, (("kernel/genlambda.mli", 35, 1607, 1607), ("kernel/genlambda.mli", 35, 1607, 1629), 0), 0, Tag1 ("Genlambda", 19)); (("Lparray", 680), ([(Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -182)], (0)), 100000000, 0, -218)], (0)), 100000000, 0, -217); (Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -182)], (0)), 100000000, 0, -219)]), 0, (("kernel/genlambda.mli", 36, 1630, 1630), ("kernel/genlambda.mli", 36, 1630, 1676), 0), 0, Tag1 ("Genlambda", 20)); (("Lmakeblock", 681), ([(Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -220); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -221); (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -182)], (0)), 100000000, 0, -223)], (0)), 100000000, 0, -222)]), 0, (("kernel/genlambda.mli", 37, 1677, 1677), ("kernel/genlambda.mli", 37, 1677, 1729), 0), 0, Tag1 ("Genlambda", 21)); (("Luint", 682), ([(Tag3 (Tag1 ((Tag2 ("Uint63")), "t"), 0, (0)), 100000000, 0, -224)]), 0, (("kernel/genlambda.mli", 39, 1781, 1781), ("kernel/genlambda.mli", 39, 1781, 1808), 0), 0, Tag1 ("Genlambda", 22)); (("Lfloat", 730), ([(Tag3 (Tag1 ((Tag2 ("Float64")), "t"), 0, (0)), 100000000, 0, -225)]), 0, (("kernel/genlambda.mli", 40, 1809, 1809), ("kernel/genlambda.mli", 40, 1809, 1837), 0), 0, Tag1 ("Genlambda", 23)); (("Lval", 767), ([((("v")), 100000000, 0, -182)]), 0, (("kernel/genlambda.mli", 41, 1838, 1838), ("kernel/genlambda.mli", 41, 1838, 1859), 0), 0, Tag1 ("Genlambda", 24)); (("Lsort", 768), ([(Tag3 (Tag1 ((Tag2 ("Sorts")), "t"), 0, (0)), 100000000, 0, -226)]), 0, (("kernel/genlambda.mli", 42, 1860, 1860), ("kernel/genlambda.mli", 42, 1860, 1886), 0), 0, Tag1 ("Genlambda", 25)); (("Lind", 801), ([(Tag3 (Tag1 ((Tag2 ("Constr")), "pinductive"), 0, (0)), 100000000, 0, -227)]), 0, (("kernel/genlambda.mli", 43, 1887, 1887), ("kernel/genlambda.mli", 43, 1887, 1916), 0), 0, Tag1 ("Genlambda", 26)); (("Lforce", 802), (0), 0, (("kernel/genlambda.mli", 44, 1917, 1917), ("kernel/genlambda.mli", 44, 1917, 1925), 0), 0, Tag1 ("Genlambda", 27))], 0), 1, 0, [63], [0], 0, 0, (("kernel/genlambda.mli", 20, 875, 875), ("kernel/genlambda.mli", 44, 1917, 1925), 0), 0, 0, 0, Tag1 ("Genlambda", 3)), 1, 0); Tag1 (("lam_branches", 1174), ([((("v")), 100000000, 0, -169)], 1, [[(("constant_branches", 803), 0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -169)], (0)), 100000000, 0, -168)], (0)), 100000000, 0, -167), (("kernel/genlambda.mli", 47, 1949, 1953), ("kernel/genlambda.mli", 47, 1949, 1989), 0), 0, Tag1 ("Genlambda", 28)); (("nonconstant_branches", 804), 0, (Tag3 ((Tag3 ("array", 8)), [(Tag2 ([(Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -174)], (0)), 100000000, 0, -173)], (0)), 100000000, 0, -172); (Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -169)], (0)), 100000000, 0, -175)]), 100000000, 0, -171)], (0)), 100000000, 0, -170), (("kernel/genlambda.mli", 48, 1990, 1994), ("kernel/genlambda.mli", 48, 1990, 2070), 0), 0, Tag1 ("Genlambda", 29))]], 1, 0, [63], [0], 0, 0, (("kernel/genlambda.mli", 46, 1927, 1927), ("kernel/genlambda.mli", 48, 1990, 2072), 0), 0, 0, 0, Tag1 ("Genlambda", 4)), 2, 0); Tag1 (("fix_decl", 1175), ([((("v")), 100000000, 0, -164)], 1, 0, 1, ((Tag2 ([(Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -161)], (0)), 100000000, 0, -160)], (0)), 100000000, 0, -159); (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -164)], (0)), 100000000, 0, -163)], (0)), 100000000, 0, -162); (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -164)], (0)), 100000000, 0, -166)], (0)), 100000000, 0, -165)]), 100000000, 0, -158)), [63], [0], 0, 0, (("kernel/genlambda.mli", 50, 2074, 2074), ("kernel/genlambda.mli", 50, 2074, 2161), 0), 0, 0, 0, Tag1 ("Genlambda", 5)), 2, 0); Tag1 (("evars", 1176), (0, 0, [[(("evars_val", 915), 0, (Tag3 (Tag1 ((Tag2 ("Constr")), "evar_handler"), [(Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -157)], (0)), 100000000, 0, -156), (("kernel/genlambda.mli", 53, 2176, 2180), ("kernel/genlambda.mli", 53, 2176, 2211), 0), 0, Tag1 ("Genlambda", 31))]], 1, 0, 0, 0, 0, 0, (("kernel/genlambda.mli", 52, 2163, 2163), ("kernel/genlambda.mli", 53, 2176, 2213), 0), 0, 0, 1, Tag1 ("Genlambda", 30)), 1, 0); (("empty_evars", 1177), ((Tag3 ((("evars", 1176)), 0, (0)), 100000000, 0, -155), 0, (("kernel/genlambda.mli", 55, 2215, 2215), ("kernel/genlambda.mli", 55, 2215, 2238), 0), 0, Tag1 ("Genlambda", 32)), 0); (("mkLapp", 1178), ((Tag1 (0, (Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -151)], (0)), 100000000, 0, -154), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -151)], (0)), 100000000, 0, -153)], (0)), 100000000, 0, -152), (Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -151)], (0)), 100000000, 0, -150), 0), 100000000, 0, -149), 0), 100000000, 0, -148), 0, (("kernel/genlambda.mli", 59, 2275, 2275), ("kernel/genlambda.mli", 59, 2275, 2329), 0), 0, Tag1 ("Genlambda", 33)), 0); (("mkLlam", 1179), ((Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -147)], (0)), 100000000, 0, -146)], (0)), 100000000, 0, -145), (Tag1 (0, (Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -143)], (0)), 100000000, 0, -144), (Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -143)], (0)), 100000000, 0, -142), 0), 100000000, 0, -141), 0), 100000000, 0, -140), 0, (("kernel/genlambda.mli", 60, 2330, 2330), ("kernel/genlambda.mli", 60, 2330, 2402), 0), 0, Tag1 ("Genlambda", 34)), 0); (("decompose_Llam", 1180), ((Tag1 (0, (Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -138)], (0)), 100000000, 0, -139), (Tag2 ([(Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -136)], (0)), 100000000, 0, -135)], (0)), 100000000, 0, -134); (Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -138)], (0)), 100000000, 0, -137)]), 100000000, 0, -133), 0), 100000000, 0, -132), 0, (("kernel/genlambda.mli", 61, 2403, 2403), ("kernel/genlambda.mli", 61, 2403, 2482), 0), 0, Tag1 ("Genlambda", 35)), 0); (("decompose_Llam_Llet", 1181), ((Tag1 (0, (Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -129)], (0)), 100000000, 0, -131), (Tag2 ([(Tag3 ((Tag3 ("array", 8)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -126)], (0)), 100000000, 0, -125); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -129)], (0)), 100000000, 0, -128)], (0)), 100000000, 0, -127)]), 100000000, 0, -124)], (0)), 100000000, 0, -123); (Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -129)], (0)), 100000000, 0, -130)]), 100000000, 0, -122), 0), 100000000, 0, -121), 0, (("kernel/genlambda.mli", 62, 2483, 2483), ("kernel/genlambda.mli", 62, 2483, 2588), 0), 0, Tag1 ("Genlambda", 36)), 0); (("map_lam_with_binders", 1182), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -120), (Tag1 (0, ((("a")), 100000000, 0, -113), ((("a")), 100000000, 0, -113), 0), 100000000, 0, -119), 0), 100000000, 0, -118), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -113), (Tag1 (0, (Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -111)], (0)), 100000000, 0, -117), (Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -111)], (0)), 100000000, 0, -116), 0), 100000000, 0, -115), 0), 100000000, 0, -114), (Tag1 (0, ((("a")), 100000000, 0, -113), (Tag1 (0, (Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -111)], (0)), 100000000, 0, -112), (Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -111)], (0)), 100000000, 0, -110), 0), 100000000, 0, -109), 0), 100000000, 0, -108), 0), 100000000, 0, -107), 0), 100000000, 0, -106), 0, (("kernel/genlambda.mli", 64, 2590, 2590), ("kernel/genlambda.mli", 65, 2672, 2702), 0), 0, Tag1 ("Genlambda", 37)), 0); (("lam_exlift", 1183), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Esubst")), "lift"), 0, (0)), 100000000, 0, -105), (Tag1 (0, (Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -103)], (0)), 100000000, 0, -104), (Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -103)], (0)), 100000000, 0, -102), 0), 100000000, 0, -101), 0), 100000000, 0, -100), 0, (("kernel/genlambda.mli", 69, 2737, 2737), ("kernel/genlambda.mli", 69, 2737, 2791), 0), 0, Tag1 ("Genlambda", 38)), 0); (("lam_lift", 1184), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -99), (Tag1 (0, (Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -97)], (0)), 100000000, 0, -98), (Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -97)], (0)), 100000000, 0, -96), 0), 100000000, 0, -95), 0), 100000000, 0, -94), 0, (("kernel/genlambda.mli", 70, 2792, 2792), ("kernel/genlambda.mli", 70, 2792, 2836), 0), 0, Tag1 ("Genlambda", 39)), 0); (("lam_subst_rel", 1185), ((Tag1 (0, (Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -88)], (0)), 100000000, 0, -93), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -92), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -91), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Esubst")), "subs"), [(Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -88)], (0)), 100000000, 0, -90)], (0)), 100000000, 0, -89), (Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -88)], (0)), 100000000, 0, -87), 0), 100000000, 0, -86), 0), 100000000, 0, -85), 0), 100000000, 0, -84), 0), 100000000, 0, -83), 0, (("kernel/genlambda.mli", 71, 2837, 2837), ("kernel/genlambda.mli", 71, 2837, 2921), 0), 0, Tag1 ("Genlambda", 40)), 0); (("lam_exsubst", 1186), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Esubst")), "subs"), [(Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -79)], (0)), 100000000, 0, -82)], (0)), 100000000, 0, -81), (Tag1 (0, (Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -79)], (0)), 100000000, 0, -80), (Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -79)], (0)), 100000000, 0, -78), 0), 100000000, 0, -77), 0), 100000000, 0, -76), 0, (("kernel/genlambda.mli", 72, 2922, 2922), ("kernel/genlambda.mli", 72, 2922, 2987), 0), 0, Tag1 ("Genlambda", 41)), 0); (("lam_subst_args", 1187), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Esubst")), "subs"), [(Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -71)], (0)), 100000000, 0, -75)], (0)), 100000000, 0, -74), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -71)], (0)), 100000000, 0, -73)], (0)), 100000000, 0, -72), (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -71)], (0)), 100000000, 0, -70)], (0)), 100000000, 0, -69), 0), 100000000, 0, -68), 0), 100000000, 0, -67), 0, (("kernel/genlambda.mli", 73, 2988, 2988), ("kernel/genlambda.mli", 73, 2988, 3068), 0), 0, Tag1 ("Genlambda", 42)), 0); (("simplify", 1188), ((Tag1 (0, (Tag1 (0, (Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -60)], (0)), 100000000, 0, -66), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -65), 0), 100000000, 0, -64), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Esubst")), "subs"), [(Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -60)], (0)), 100000000, 0, -63)], (0)), 100000000, 0, -62), (Tag1 (0, (Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -60)], (0)), 100000000, 0, -61), (Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -60)], (0)), 100000000, 0, -59), 0), 100000000, 0, -58), 0), 100000000, 0, -57), 0), 100000000, 0, -56), 0, (("kernel/genlambda.mli", 77, 3096, 3096), ("kernel/genlambda.mli", 77, 3096, 3181), 0), 0, Tag1 ("Genlambda", 43)), 0); (("remove_let", 1189), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Esubst")), "subs"), [(Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -52)], (0)), 100000000, 0, -55)], (0)), 100000000, 0, -54), (Tag1 (0, (Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -52)], (0)), 100000000, 0, -53), (Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -52)], (0)), 100000000, 0, -51), 0), 100000000, 0, -50), 0), 100000000, 0, -49), 0, (("kernel/genlambda.mli", 79, 3183, 3183), ("kernel/genlambda.mli", 79, 3183, 3247), 0), 0, Tag1 ("Genlambda", 44)), 0); (("get_alias", 1190), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -48), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -47), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -46), 0), 100000000, 0, -45), 0), 100000000, 0, -44), 0, (("kernel/genlambda.mli", 83, 3283, 3283), ("kernel/genlambda.mli", 83, 3283, 3338), 0), 0, Tag1 ("Genlambda", 45)), 0); (("make_args", 1191), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -43), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -42), (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -41)], (0)), 100000000, 0, -40)], (0)), 100000000, 0, -39), 0), 100000000, 0, -38), 0), 100000000, 0, -37), 0, (("kernel/genlambda.mli", 84, 3339, 3339), ("kernel/genlambda.mli", 84, 3339, 3384), 0), 0, Tag1 ("Genlambda", 46)), 0); (("makeblock", 1192), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -36), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -24)], (0)), 100000000, 0, -35)], (0)), 100000000, 0, -34), (Tag3 ((Tag3 ("option", 10)), [((("v")), 100000000, 0, -24)], (0)), 100000000, 0, -33), 0), 100000000, 0, -32), 0), 100000000, 0, -31), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -30), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -29), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -28), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -27), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -24)], (0)), 100000000, 0, -26)], (0)), 100000000, 0, -25), (Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -24)], (0)), 100000000, 0, -23), 0), 100000000, 0, -22), 0), 100000000, 0, -21), 0), 100000000, 0, -20), 0), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("kernel/genlambda.mli", 85, 3385, 3385), ("kernel/genlambda.mli", 86, 3442, 3506), 0), 0, Tag1 ("Genlambda", 47)), 0); (("lambda_of_prim", 1193), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -16), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "pconstant"), 0, (0)), 100000000, 0, -15), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("CPrimitives")), "t"), 0, (0)), 100000000, 0, -14), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -11)], (0)), 100000000, 0, -13)], (0)), 100000000, 0, -12), (Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -11)], (0)), 100000000, 0, -10), 0), 100000000, 0, -9), 0), 100000000, 0, -8), 0), 100000000, 0, -7), 0), 100000000, 0, -6), 0, (("kernel/genlambda.mli", 88, 3508, 3508), ("kernel/genlambda.mli", 88, 3508, 3602), 0), 0, Tag1 ("Genlambda", 48)), 0); Tag4 (("S", 1194), ((Tag1 ([Tag1 (("value", 1198), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("kernel/genlambda.mli", 92, 3624, 3626), ("kernel/genlambda.mli", 92, 3624, 3636), 0), 0, 0, 0, Tag1 ("Genlambda", 49)), 1, 0); (("as_value", 1199), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -254), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("lambda", 1173)), [(Tag3 ((("value", 1198)), 0, (0)), 100000000, 0, -253)], (0)), 100000000, 0, -252)], (0)), 100000000, 0, -251), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("value", 1198)), 0, (0)), 100000000, 0, -250)], (0)), 100000000, 0, -249), 0), 100000000, 0, -248), 0), 100000000, 0, -247), 0, (("kernel/genlambda.mli", 93, 3637, 3639), ("kernel/genlambda.mli", 93, 3637, 3695), 0), 0, Tag1 ("Genlambda", 50)), 0); (("get_constant", 1200), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "pconstant"), 0, (0)), 100000000, 0, -246), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "constant_body"), 0, (0)), 100000000, 0, -245), (Tag3 ((("lambda", 1173)), [(Tag3 ((("value", 1198)), 0, (0)), 100000000, 0, -244)], (0)), 100000000, 0, -243), 0), 100000000, 0, -242), 0), 100000000, 0, -241), 0, (("kernel/genlambda.mli", 94, 3696, 3698), ("kernel/genlambda.mli", 94, 3696, 3772), 0), 0, Tag1 ("Genlambda", 51)), 0); (("check_inductive", 1201), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -240), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "mutual_inductive_body"), 0, (0)), 100000000, 0, -239), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -238), 0), 100000000, 0, -237), 0), 100000000, 0, -236), 0, (("kernel/genlambda.mli", 95, 3773, 3775), ("kernel/genlambda.mli", 95, 3773, 3852), 0), 0, Tag1 ("Genlambda", 52)), 0)])), 0, (("kernel/genlambda.mli", 90, 3604, 3604), ("kernel/genlambda.mli", 96, 3853, 3856), 0), Tag1 ("Genlambda", 53)), 0); Tag3 (("Make", 1195), 0, (Tag2 (((("Val", 1197)), ((("S", 1194)))), Tag1 ([(("lambda_of_constr", 1202), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -262), (Tag1 (0, (Tag3 ((("evars", 1176)), 0, (0)), 100000000, 0, -261), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -260), (Tag3 ((("lambda", 1173)), [(Tag3 (Tag1 ((("Val", 1197)), "value"), 0, (0)), 100000000, 0, -259)], (0)), 100000000, 0, -258), 0), 100000000, 0, -257), 0), 100000000, 0, -256), 0), 100000000, 0, -255), 0, (("kernel/genlambda.mli", 100, 3886, 3888), ("kernel/genlambda.mli", 100, 3886, 3968), 0), 0, Tag1 ("Genlambda", 55)), 0)])), 0, (("kernel/genlambda.mli", 98, 3858, 3858), ("kernel/genlambda.mli", 101, 3969, 3972), 0), Tag1 ("Genlambda", 56)), 0, 0); (("pp_lam", 1196), ((Tag1 (0, (Tag3 ((("lambda", 1173)), [((("v")), 100000000, 0, -5)], (0)), 100000000, 0, -4), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("kernel/genlambda.mli", 105, 3995, 3995), ("kernel/genlambda.mli", 105, 3995, 4025), 0), 0, Tag1 ("Genlambda", 57)), 0)], "Genlambda", [("Genlambda", ("\170}\024\241\141\222\136S\169\219\2212i\134KI")); ("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Vmemitcodes", ("wCd\138\165\158DD\241gH\236.\210\197\247")); ("Vmbytecodes", ("\025\021\151\137Dx\149W\236+[\143f\208\160\016")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("Range", ("\218\130\001r\237\r\144\171\164\021l\155\196\143sg")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Environ", ("\171b\1579\229<\003Z\147IL\225X\254\182\204")); ("Declarations", ("\239\137n\019\030w$\182\166z^{\b\206\163\175")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CEphemeron", ("\204I\179-\206(x4\173\229\250\001PkH\151")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])

val pp_lam : 'v lambda -> Pp.t

type t
val make : LDouble.t -> LDouble.t -> t
val of_complex : Complex.t -> t
val to_complex : t -> Complex.t
val zero : t
val one : t
val i : t
val re : t -> LDouble.t
val im : t -> LDouble.t
val neg : t -> t
val conj : t -> t
val add : t -> t -> t
val sub : t -> t -> t
val mul : t -> t -> t
val div : t -> t -> t
val inv : t -> t
val sqrt : t -> t
val norm2 : t -> LDouble.t
val norm : t -> LDouble.t
val polar : LDouble.t -> LDouble.t -> t
val arg : t -> LDouble.t
val exp : t -> t
val log : t -> t("DEBUG:rule", [Tag1 (("t", 364), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/ctypes/complexL.mli", 1, 0, 0), ("src/ctypes/complexL.mli", 1, 0, 6), 0), 0, 0, 0, Tag1 ("ComplexL", 0)), 1, 0); (("make", 365), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("LDouble")), "t"), 0, (0)), 100000000, 0, -78), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("LDouble")), "t"), 0, (0)), 100000000, 0, -77), (Tag3 ((("t", 364)), 0, (0)), 100000000, 0, -76), 0), 100000000, 0, -75), 0), 100000000, 0, -74), 0, (("src/ctypes/complexL.mli", 4, 54, 54), ("src/ctypes/complexL.mli", 4, 54, 92), 0), 0, Tag1 ("ComplexL", 1)), 0); (("of_complex", 366), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Complex"), "t"), 0, (0)), 100000000, 0, -73), (Tag3 ((("t", 364)), 0, (0)), 100000000, 0, -72), 0), 100000000, 0, -71), 0, (("src/ctypes/complexL.mli", 7, 162, 162), ("src/ctypes/complexL.mli", 7, 162, 193), 0), 0, Tag1 ("ComplexL", 2)), 0); (("to_complex", 367), ((Tag1 (0, (Tag3 ((("t", 364)), 0, (0)), 100000000, 0, -70), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Complex"), "t"), 0, (0)), 100000000, 0, -69), 0), 100000000, 0, -68), 0, (("src/ctypes/complexL.mli", 10, 248, 248), ("src/ctypes/complexL.mli", 10, 248, 279), 0), 0, Tag1 ("ComplexL", 3)), 0); (("zero", 368), ((Tag3 ((("t", 364)), 0, (0)), 100000000, 0, -67), 0, (("src/ctypes/complexL.mli", 14, 457, 457), ("src/ctypes/complexL.mli", 14, 457, 469), 0), 0, Tag1 ("ComplexL", 4)), 0); (("one", 369), ((Tag3 ((("t", 364)), 0, (0)), 100000000, 0, -66), 0, (("src/ctypes/complexL.mli", 17, 487, 487), ("src/ctypes/complexL.mli", 17, 487, 498), 0), 0, Tag1 ("ComplexL", 5)), 0); (("i", 370), ((Tag3 ((("t", 364)), 0, (0)), 100000000, 0, -65), 0, (("src/ctypes/complexL.mli", 20, 516, 516), ("src/ctypes/complexL.mli", 20, 516, 525), 0), 0, Tag1 ("ComplexL", 6)), 0); (("re", 371), ((Tag1 (0, (Tag3 ((("t", 364)), 0, (0)), 100000000, 0, -64), (Tag3 (Tag1 ((Tag2 ("LDouble")), "t"), 0, (0)), 100000000, 0, -63), 0), 100000000, 0, -62), 0, (("src/ctypes/complexL.mli", 23, 542, 542), ("src/ctypes/complexL.mli", 23, 542, 565), 0), 0, Tag1 ("ComplexL", 7)), 0); (("im", 372), ((Tag1 (0, (Tag3 ((("t", 364)), 0, (0)), 100000000, 0, -61), (Tag3 (Tag1 ((Tag2 ("LDouble")), "t"), 0, (0)), 100000000, 0, -60), 0), 100000000, 0, -59), 0, (("src/ctypes/complexL.mli", 26, 623, 623), ("src/ctypes/complexL.mli", 26, 623, 646), 0), 0, Tag1 ("ComplexL", 8)), 0); (("neg", 373), ((Tag1 (0, (Tag3 ((("t", 364)), 0, (0)), 100000000, 0, -58), (Tag3 ((("t", 364)), 0, (0)), 100000000, 0, -57), 0), 100000000, 0, -56), 0, (("src/ctypes/complexL.mli", 29, 709, 709), ("src/ctypes/complexL.mli", 29, 709, 725), 0), 0, Tag1 ("ComplexL", 9)), 0); (("conj", 374), ((Tag1 (0, (Tag3 ((("t", 364)), 0, (0)), 100000000, 0, -55), (Tag3 ((("t", 364)), 0, (0)), 100000000, 0, -54), 0), 100000000, 0, -53), 0, (("src/ctypes/complexL.mli", 32, 749, 749), ("src/ctypes/complexL.mli", 32, 749, 766), 0), 0, Tag1 ("ComplexL", 10)), 0); (("add", 375), ((Tag1 (0, (Tag3 ((("t", 364)), 0, (0)), 100000000, 0, -52), (Tag1 (0, (Tag3 ((("t", 364)), 0, (0)), 100000000, 0, -51), (Tag3 ((("t", 364)), 0, (0)), 100000000, 0, -50), 0), 100000000, 0, -49), 0), 100000000, 0, -48), 0, (("src/ctypes/complexL.mli", 35, 835, 835), ("src/ctypes/complexL.mli", 35, 835, 856), 0), 0, Tag1 ("ComplexL", 11)), 0); (("sub", 376), ((Tag1 (0, (Tag3 ((("t", 364)), 0, (0)), 100000000, 0, -47), (Tag1 (0, (Tag3 ((("t", 364)), 0, (0)), 100000000, 0, -46), (Tag3 ((("t", 364)), 0, (0)), 100000000, 0, -45), 0), 100000000, 0, -44), 0), 100000000, 0, -43), 0, (("src/ctypes/complexL.mli", 38, 874, 874), ("src/ctypes/complexL.mli", 38, 874, 895), 0), 0, Tag1 ("ComplexL", 12)), 0); (("mul", 377), ((Tag1 (0, (Tag3 ((("t", 364)), 0, (0)), 100000000, 0, -42), (Tag1 (0, (Tag3 ((("t", 364)), 0, (0)), 100000000, 0, -41), (Tag3 ((("t", 364)), 0, (0)), 100000000, 0, -40), 0), 100000000, 0, -39), 0), 100000000, 0, -38), 0, (("src/ctypes/complexL.mli", 41, 916, 916), ("src/ctypes/complexL.mli", 41, 916, 937), 0), 0, Tag1 ("ComplexL", 13)), 0); (("div", 378), ((Tag1 (0, (Tag3 ((("t", 364)), 0, (0)), 100000000, 0, -37), (Tag1 (0, (Tag3 ((("t", 364)), 0, (0)), 100000000, 0, -36), (Tag3 ((("t", 364)), 0, (0)), 100000000, 0, -35), 0), 100000000, 0, -34), 0), 100000000, 0, -33), 0, (("src/ctypes/complexL.mli", 44, 961, 961), ("src/ctypes/complexL.mli", 44, 961, 982), 0), 0, Tag1 ("ComplexL", 14)), 0); (("inv", 379), ((Tag1 (0, (Tag3 ((("t", 364)), 0, (0)), 100000000, 0, -32), (Tag3 ((("t", 364)), 0, (0)), 100000000, 0, -31), 0), 100000000, 0, -30), 0, (("src/ctypes/complexL.mli", 47, 1000, 1000), ("src/ctypes/complexL.mli", 47, 1000, 1016), 0), 0, Tag1 ("ComplexL", 15)), 0); (("sqrt", 380), ((Tag1 (0, (Tag3 ((("t", 364)), 0, (0)), 100000000, 0, -29), (Tag3 ((("t", 364)), 0, (0)), 100000000, 0, -28), 0), 100000000, 0, -27), 0, (("src/ctypes/complexL.mli", 50, 1057, 1057), ("src/ctypes/complexL.mli", 50, 1057, 1074), 0), 0, Tag1 ("ComplexL", 16)), 0); (("norm2", 381), ((Tag1 (0, (Tag3 ((("t", 364)), 0, (0)), 100000000, 0, -26), (Tag3 (Tag1 ((Tag2 ("LDouble")), "t"), 0, (0)), 100000000, 0, -25), 0), 100000000, 0, -24), 0, (("src/ctypes/complexL.mli", 53, 1096, 1096), ("src/ctypes/complexL.mli", 53, 1096, 1122), 0), 0, Tag1 ("ComplexL", 17)), 0); (("norm", 382), ((Tag1 (0, (Tag3 ((("t", 364)), 0, (0)), 100000000, 0, -23), (Tag3 (Tag1 ((Tag2 ("LDouble")), "t"), 0, (0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0, (("src/ctypes/complexL.mli", 56, 1183, 1183), ("src/ctypes/complexL.mli", 56, 1183, 1208), 0), 0, Tag1 ("ComplexL", 18)), 0); (("polar", 383), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("LDouble")), "t"), 0, (0)), 100000000, 0, -20), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("LDouble")), "t"), 0, (0)), 100000000, 0, -19), (Tag3 ((("t", 364)), 0, (0)), 100000000, 0, -18), 0), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("src/ctypes/complexL.mli", 59, 1267, 1267), ("src/ctypes/complexL.mli", 59, 1267, 1306), 0), 0, Tag1 ("ComplexL", 19)), 0); (("arg", 384), ((Tag1 (0, (Tag3 ((("t", 364)), 0, (0)), 100000000, 0, -15), (Tag3 (Tag1 ((Tag2 ("LDouble")), "t"), 0, (0)), 100000000, 0, -14), 0), 100000000, 0, -13), 0, (("src/ctypes/complexL.mli", 62, 1391, 1391), ("src/ctypes/complexL.mli", 62, 1391, 1415), 0), 0, Tag1 ("ComplexL", 20)), 0); (("exp", 385), ((Tag1 (0, (Tag3 ((("t", 364)), 0, (0)), 100000000, 0, -12), (Tag3 ((("t", 364)), 0, (0)), 100000000, 0, -11), 0), 100000000, 0, -10), 0, (("src/ctypes/complexL.mli", 67, 1589, 1589), ("src/ctypes/complexL.mli", 67, 1589, 1605), 0), 0, Tag1 ("ComplexL", 21)), 0); (("log", 386), ((Tag1 (0, (Tag3 ((("t", 364)), 0, (0)), 100000000, 0, -9), (Tag3 ((("t", 364)), 0, (0)), 100000000, 0, -8), 0), 100000000, 0, -7), 0, (("src/ctypes/complexL.mli", 70, 1670, 1670), ("src/ctypes/complexL.mli", 70, 1670, 1686), 0), 0, Tag1 ("ComplexL", 22)), 0); (("pow", 387), ((Tag1 (0, (Tag3 ((("t", 364)), 0, (0)), 100000000, 0, -6), (Tag1 (0, (Tag3 ((("t", 364)), 0, (0)), 100000000, 0, -5), (Tag3 ((("t", 364)), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/ctypes/complexL.mli", 73, 1729, 1729), ("src/ctypes/complexL.mli", 73, 1729, 1750), 0), 0, Tag1 ("ComplexL", 23)), 0)], "ComplexL", [("ComplexL", ("\n\230\139\192\213\0226\203\176\242\200\205c\155ag")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("LDouble", ("j\251\140\230^u\251\210\143\236T\207\022\147\011\211")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

val pow : t -> t -> t

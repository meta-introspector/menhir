type 'a t = private { v : 'a; loc : Loc.t option; }
val make : ?loc:Loc.t -> 'a -> 'a t
val map : ('a -> 'b) -> 'a t -> 'b t
val map_with_loc : (?loc:Loc.t -> 'a -> 'b) -> 'a t -> 'b t
val map_from_loc : (?loc:Loc.t -> 'a -> 'b) -> 'a Loc.located -> 'b t
val with_val : ('a -> 'b) -> 'a t -> 'b
val with_loc_val : (?loc:Loc.t -> 'a -> 'b) -> 'a t -> 'b
val eq : ('a -> 'a -> bool) -> 'a t -> 'a t -> bool
("DEBUG:rule", [Tag1 (("t", 300), ([((("a")), 100000000, 0, -60)], 1, [[(("v", 270), 0, ((("a")), 100000000, 0, -60), (("lib/cAst.mli", 13, 758, 760), ("lib/cAst.mli", 13, 758, 769), 0), 0, Tag1 ("CAst", 2)); (("loc", 290), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -62)], (0)), 100000000, 0, -61), (("lib/cAst.mli", 14, 770, 772), ("lib/cAst.mli", 14, 770, 791), 0), 0, Tag1 ("CAst", 3))]], 0, 0, [31], [0], 0, 0, (("lib/cAst.mli", 12, 736, 736), ("lib/cAst.mli", 15, 792, 793), 0), 0, 0, 0, Tag1 ("CAst", 0)), 1, 0); (("make", 301), ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -59)], (0)), 100000000, 0, -58), (Tag1 (0, ((("a")), 100000000, 0, -57), (Tag3 ((("t", 300)), [((("a")), 100000000, 0, -57)], (0)), 100000000, 0, -56), 0), 100000000, 0, -55), 0), 100000000, 0, -54), 0, (("lib/cAst.mli", 17, 795, 795), ("lib/cAst.mli", 17, 795, 830), 0), 0, Tag1 ("CAst", 4)), 0); (("map", 302), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -52), ((("b")), 100000000, 0, -50), 0), 100000000, 0, -53), (Tag1 (0, (Tag3 ((("t", 300)), [((("a")), 100000000, 0, -52)], (0)), 100000000, 0, -51), (Tag3 ((("t", 300)), [((("b")), 100000000, 0, -50)], (0)), 100000000, 0, -49), 0), 100000000, 0, -48), 0), 100000000, 0, -47), 0, (("lib/cAst.mli", 19, 832, 832), ("lib/cAst.mli", 19, 832, 868), 0), 0, Tag1 ("CAst", 5)), 0); (("map_with_loc", 303), ((Tag1 (0, (Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -46)], (0)), 100000000, 0, -45), (Tag1 (0, ((("a")), 100000000, 0, -42), ((("b")), 100000000, 0, -40), 0), 100000000, 0, -44), 0), 100000000, 0, -43), (Tag1 (0, (Tag3 ((("t", 300)), [((("a")), 100000000, 0, -42)], (0)), 100000000, 0, -41), (Tag3 ((("t", 300)), [((("b")), 100000000, 0, -40)], (0)), 100000000, 0, -39), 0), 100000000, 0, -38), 0), 100000000, 0, -37), 0, (("lib/cAst.mli", 20, 869, 869), ("lib/cAst.mli", 20, 869, 928), 0), 0, Tag1 ("CAst", 6)), 0); (("map_from_loc", 304), ((Tag1 (0, (Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -36)], (0)), 100000000, 0, -35), (Tag1 (0, ((("a")), 100000000, 0, -32), ((("b")), 100000000, 0, -30), 0), 100000000, 0, -34), 0), 100000000, 0, -33), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Loc")), "located"), [((("a")), 100000000, 0, -32)], (0)), 100000000, 0, -31), (Tag3 ((("t", 300)), [((("b")), 100000000, 0, -30)], (0)), 100000000, 0, -29), 0), 100000000, 0, -28), 0), 100000000, 0, -27), 0, (("lib/cAst.mli", 21, 929, 929), ("lib/cAst.mli", 21, 929, 998), 0), 0, Tag1 ("CAst", 7)), 0); (("with_val", 305), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -25), ((("b")), 100000000, 0, -23), 0), 100000000, 0, -26), (Tag1 (0, (Tag3 ((("t", 300)), [((("a")), 100000000, 0, -25)], (0)), 100000000, 0, -24), ((("b")), 100000000, 0, -23), 0), 100000000, 0, -22), 0), 100000000, 0, -21), 0, (("lib/cAst.mli", 23, 1000, 1000), ("lib/cAst.mli", 23, 1000, 1039), 0), 0, Tag1 ("CAst", 8)), 0); (("with_loc_val", 306), ((Tag1 (0, (Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -20)], (0)), 100000000, 0, -19), (Tag1 (0, ((("a")), 100000000, 0, -16), ((("b")), 100000000, 0, -14), 0), 100000000, 0, -18), 0), 100000000, 0, -17), (Tag1 (0, (Tag3 ((("t", 300)), [((("a")), 100000000, 0, -16)], (0)), 100000000, 0, -15), ((("b")), 100000000, 0, -14), 0), 100000000, 0, -13), 0), 100000000, 0, -12), 0, (("lib/cAst.mli", 24, 1040, 1040), ("lib/cAst.mli", 24, 1040, 1097), 0), 0, Tag1 ("CAst", 9)), 0); (("eq", 307), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -7), (Tag1 (0, ((("a")), 100000000, 0, -7), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -11), 0), 100000000, 0, -10), 0), 100000000, 0, -9), (Tag1 (0, (Tag3 ((("t", 300)), [((("a")), 100000000, 0, -7)], (0)), 100000000, 0, -8), (Tag1 (0, (Tag3 ((("t", 300)), [((("a")), 100000000, 0, -7)], (0)), 100000000, 0, -6), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("lib/cAst.mli", 26, 1099, 1099), ("lib/cAst.mli", 26, 1099, 1150), 0), 0, Tag1 ("CAst", 10)), 0); Tag3 (("Smart", 308), 0, (Tag1 ([(("map", 309), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -66), ((("a")), 100000000, 0, -66), 0), 100000000, 0, -68), (Tag1 (0, (Tag3 ((("t", 300)), [((("a")), 100000000, 0, -66)], (0)), 100000000, 0, -67), (Tag3 ((("t", 300)), [((("a")), 100000000, 0, -66)], (0)), 100000000, 0, -65), 0), 100000000, 0, -64), 0), 100000000, 0, -63), 0, (("lib/cAst.mli", 29, 1171, 1173), ("lib/cAst.mli", 29, 1171, 1209), 0), 0, Tag1 ("CAst", 11)), 0)]), 0, (("lib/cAst.mli", 28, 1152, 1152), ("lib/cAst.mli", 30, 1210, 1213), 0), Tag1 ("CAst", 12)), 0, 0)], "CAst", [("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
module Smart : sig val map : ('a -> 'a) -> 'a t -> 'a t end

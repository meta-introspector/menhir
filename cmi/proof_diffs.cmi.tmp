val opt_name : string list
val show_diffs : unit -> bool
val show_removed : unit -> bool
val write_color_enabled : bool -> unit
val color_enabled : unit -> bool
type diffOpt = DiffOff | DiffOn | DiffRemoved
val string_to_diffs : string -> diffOpt
type goal
val make_goal : Environ.env -> Evd.evar_map -> Evar.t -> goal
val diff_goal : ?short:bool -> ?og_s:goal -> goal -> Pp.t list * Pp.t
val tokenize_string : string -> string list
val diff_concl : ?og_s:goal -> goal -> Pp.t
type goal_map
val make_goal_map : Proof.t -> Proof.t -> goal_map
val map_goal : Evar.t -> goal_map -> goal option
val log_out_ch : out_channel ref
type hyp_info = { idents : string list; rhs_pp : Pp.t; }
val diff_hyps :
  string list list ->
  hyp_info CString.Map.t ->
  string list list -> hyp_info CString.Map.t -> Pp.t list
val diff_proofs : diff_opt:diffOpt -> ?old:Proof.t -> Proof.t -> Pp.t
("DEBUG:rule", [(("opt_name", 892), ((Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -90)], (0)), 100000000, 0, -89), 0, (("printing/proof_diffs.mli", 14, 724, 724), ("printing/proof_diffs.mli", 14, 724, 750), 0), 0, Tag1 ("Proof_diffs", 0)), 0); (("show_diffs", 893), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -88), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -87), 0), 100000000, 0, -86), 0, (("printing/proof_diffs.mli", 17, 813, 813), ("printing/proof_diffs.mli", 17, 813, 842), 0), 0, Tag1 ("Proof_diffs", 1)), 0); (("show_removed", 894), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -85), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -84), 0), 100000000, 0, -83), 0, (("printing/proof_diffs.mli", 20, 897, 897), ("printing/proof_diffs.mli", 20, 897, 928), 0), 0, Tag1 ("Proof_diffs", 2)), 0); (("write_color_enabled", 895), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -82), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -81), 0), 100000000, 0, -80), 0, (("printing/proof_diffs.mli", 23, 978, 978), ("printing/proof_diffs.mli", 23, 978, 1016), 0), 0, Tag1 ("Proof_diffs", 3)), 0); (("color_enabled", 896), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -79), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -78), 0), 100000000, 0, -77), 0, (("printing/proof_diffs.mli", 26, 1069, 1069), ("printing/proof_diffs.mli", 26, 1069, 1101), 0), 0, Tag1 ("Proof_diffs", 4)), 0); Tag1 (("diffOpt", 897), (0, 0, Tag1 ([(("DiffOff", 275), (0), 0, (("printing/proof_diffs.mli", 28, 1103, 1118), ("printing/proof_diffs.mli", 28, 1103, 1125), 0), 0, Tag1 ("Proof_diffs", 6)); (("DiffOn", 276), (0), 0, (("printing/proof_diffs.mli", 28, 1103, 1126), ("printing/proof_diffs.mli", 28, 1103, 1134), 0), 0, Tag1 ("Proof_diffs", 7)); (("DiffRemoved", 277), (0), 0, (("printing/proof_diffs.mli", 28, 1103, 1135), ("printing/proof_diffs.mli", 28, 1103, 1148), 0), 0, Tag1 ("Proof_diffs", 8))], 0), 1, 0, 0, 0, 0, 0, (("printing/proof_diffs.mli", 28, 1103, 1103), ("printing/proof_diffs.mli", 28, 1103, 1148), 0), 0, 1, 0, Tag1 ("Proof_diffs", 5)), 1, 0); (("string_to_diffs", 898), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -76), (Tag3 ((("diffOpt", 897)), 0, (0)), 100000000, 0, -75), 0), 100000000, 0, -74), 0, (("printing/proof_diffs.mli", 30, 1150, 1150), ("printing/proof_diffs.mli", 30, 1150, 1189), 0), 0, Tag1 ("Proof_diffs", 9)), 0); Tag1 (("goal", 899), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("printing/proof_diffs.mli", 32, 1191, 1191), ("printing/proof_diffs.mli", 32, 1191, 1200), 0), 0, 0, 0, Tag1 ("Proof_diffs", 10)), 1, 0); (("make_goal", 900), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -73), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -72), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evar")), "t"), 0, (0)), 100000000, 0, -71), (Tag3 ((("goal", 899)), 0, (0)), 100000000, 0, -70), 0), 100000000, 0, -69), 0), 100000000, 0, -68), 0), 100000000, 0, -67), 0, (("printing/proof_diffs.mli", 34, 1202, 1202), ("printing/proof_diffs.mli", 34, 1202, 1263), 0), 0, Tag1 ("Proof_diffs", 11)), 0); (("diff_goal", 901), ((Tag1 (Tag1 ("short"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -66)], (0)), 100000000, 0, -65), (Tag1 (Tag1 ("og_s"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("goal", 899)), 0, (0)), 100000000, 0, -64)], (0)), 100000000, 0, -63), (Tag1 (0, (Tag3 ((("goal", 899)), 0, (0)), 100000000, 0, -62), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -60)], (0)), 100000000, 0, -59); (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -61)]), 100000000, 0, -58), 0), 100000000, 0, -57), 0), 100000000, 0, -56), 0), 100000000, 0, -55), 0, (("printing/proof_diffs.mli", 52, 2070, 2070), ("printing/proof_diffs.mli", 52, 2070, 2139), 0), 0, Tag1 ("Proof_diffs", 12)), 0); (("tokenize_string", 902), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -54), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -53)], (0)), 100000000, 0, -52), 0), 100000000, 0, -51), 0, (("printing/proof_diffs.mli", 55, 2208, 2208), ("printing/proof_diffs.mli", 55, 2208, 2251), 0), 0, Tag1 ("Proof_diffs", 13)), 0); (("diff_concl", 903), ((Tag1 (Tag1 ("og_s"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("goal", 899)), 0, (0)), 100000000, 0, -50)], (0)), 100000000, 0, -49), (Tag1 (0, (Tag3 ((("goal", 899)), 0, (0)), 100000000, 0, -48), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -47), 0), 100000000, 0, -46), 0), 100000000, 0, -45), 0, (("printing/proof_diffs.mli", 58, 2299, 2299), ("printing/proof_diffs.mli", 58, 2299, 2342), 0), 0, Tag1 ("Proof_diffs", 14)), 0); Tag1 (("goal_map", 904), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("printing/proof_diffs.mli", 60, 2344, 2344), ("printing/proof_diffs.mli", 60, 2344, 2357), 0), 0, 0, 0, Tag1 ("Proof_diffs", 15)), 1, 0); (("make_goal_map", 905), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proof")), "t"), 0, (0)), 100000000, 0, -44), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proof")), "t"), 0, (0)), 100000000, 0, -43), (Tag3 ((("goal_map", 904)), 0, (0)), 100000000, 0, -42), 0), 100000000, 0, -41), 0), 100000000, 0, -40), 0, (("printing/proof_diffs.mli", 68, 2655, 2655), ("printing/proof_diffs.mli", 68, 2655, 2705), 0), 0, Tag1 ("Proof_diffs", 16)), 0); (("map_goal", 906), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evar")), "t"), 0, (0)), 100000000, 0, -39), (Tag1 (0, (Tag3 ((("goal_map", 904)), 0, (0)), 100000000, 0, -38), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("goal", 899)), 0, (0)), 100000000, 0, -37)], (0)), 100000000, 0, -36), 0), 100000000, 0, -35), 0), 100000000, 0, -34), 0, (("printing/proof_diffs.mli", 70, 2707, 2707), ("printing/proof_diffs.mli", 70, 2707, 2755), 0), 0, Tag1 ("Proof_diffs", 17)), 0); (("log_out_ch", 907), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -33)], (0)), 100000000, 0, -32), 0, (("printing/proof_diffs.mli", 74, 2855, 2855), ("printing/proof_diffs.mli", 74, 2855, 2887), 0), 0, Tag1 ("Proof_diffs", 18)), 0); Tag1 (("hyp_info", 908), (0, 0, [[(("idents", 754), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -30)], (0)), 100000000, 0, -29), (("printing/proof_diffs.mli", 78, 2908, 2910), ("printing/proof_diffs.mli", 78, 2908, 2930), 0), 0, Tag1 ("Proof_diffs", 20)); (("rhs_pp", 755), 0, (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -31), (("printing/proof_diffs.mli", 79, 2931, 2933), ("printing/proof_diffs.mli", 79, 2931, 2946), 0), 0, Tag1 ("Proof_diffs", 21))]], 1, 0, 0, 0, 0, 0, (("printing/proof_diffs.mli", 77, 2890, 2890), ("printing/proof_diffs.mli", 80, 2947, 2948), 0), 0, 0, 0, Tag1 ("Proof_diffs", 19)), 1, 0); (("diff_hyps", 909), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -28)], (0)), 100000000, 0, -27)], (0)), 100000000, 0, -26), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("CString")), "Map"), "t"), [(Tag3 ((("hyp_info", 908)), 0, (0)), 100000000, 0, -25)], (0)), 100000000, 0, -24), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -23)], (0)), 100000000, 0, -22)], (0)), 100000000, 0, -21), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("CString")), "Map"), "t"), [(Tag3 ((("hyp_info", 908)), 0, (0)), 100000000, 0, -20)], (0)), 100000000, 0, -19), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -18)], (0)), 100000000, 0, -17), 0), 100000000, 0, -16), 0), 100000000, 0, -15), 0), 100000000, 0, -14), 0), 100000000, 0, -13), 0, (("printing/proof_diffs.mli", 82, 2950, 2950), ("printing/proof_diffs.mli", 82, 2950, 3067), 0), 0, Tag1 ("Proof_diffs", 22)), 0); (("diff_proofs", 910), ((Tag1 (("diff_opt"), (Tag3 ((("diffOpt", 897)), 0, (0)), 100000000, 0, -12), (Tag1 (Tag1 ("old"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Proof")), "t"), 0, (0)), 100000000, 0, -11)], (0)), 100000000, 0, -10), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proof")), "t"), 0, (0)), 100000000, 0, -9), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -8), 0), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("printing/proof_diffs.mli", 84, 3069, 3069), ("printing/proof_diffs.mli", 84, 3069, 3138), 0), 0, Tag1 ("Proof_diffs", 23)), 0); (("notify_proof_diff_failure", 911), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("printing/proof_diffs.mli", 86, 3140, 3140), ("printing/proof_diffs.mli", 86, 3140, 3186), 0), 0, Tag1 ("Proof_diffs", 24)), 0)], "Proof_diffs", [("Proof_diffs", ("\128d\2310\\\177\220\184'\134\152\029\186tdD")); ("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Vmemitcodes", ("wCd\138\165\158DD\241gH\236.\210\197\247")); ("Vmbytecodes", ("\025\021\151\137Dx\149W\236+[\143f\208\160\016")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Unix", (":B72R\011\005Sj\189)\011\239PH\254")); ("UnivSubst", ("\190qu\031mc\130\181\003G]\132\"\219m)")); ("UnivProblem", ("6'\161\018\181\001.\253\000\141a6\171\1727\155")); ("UnivNames", ("%\151_\209%+JM$n\001\232\194n\178N")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UState", ("SD\203\215|\136\n\251\239\208\148\215C\n\167\005")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Summary", ("\148G\135\226\024L3\246\021\028U\146\164`\253\250")); ("Store", ("/dT\252\145\179pq\216{\181\206\190K+U")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("Section", ("\245\207\b\021\142v=\155#w\246}\"4b\006")); ("Safe_typing", (")\250?\164\145\132\241\127\186\152h+\145\"\237l")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("Range", ("\218\130\001r\237\r\144\171\164\021l\155\196\143sg")); ("Proofview_monad", ("\218\196\189S\147\216\129\221\231\224v\228O\024*\239")); ("Proofview", ("\245\140U\027\236\199\199&\242\156\199YG\250tA")); ("Proof", ("\249\030\200g\248\164o&\tS\132\rTl\1736")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("Nativevalues", ("8:\007\025e\226c,\001\171\146#l\210\171\152")); ("Nativelib", ("V\239\205Y1\147E:,\176\196Hy\1483|")); ("Nativecode", ("\190\185\255\006m\012\210\163\138Rz\247\15283\183")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Monad", ("\244\171T\157\194p\187\160\149\195{\132\222\020\253\148")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Logic_monad", ("\130\157\160Q\163vQ\137\184\2242\209\128\024\220i")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Libnames", ("fp\0255\167\162\209\153\137\161\169#\246\193\003\198")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hook", ("\183\194\223\003\155\169',\187\240a;E\b\1396")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Goal_select", ("\235$\175\023t\178\194.Ivlz\005\211\173\n")); ("Genlambda", ("\170}\024\241\141\222\136S\169\219\2212i\134KI")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evd", ("\211\205p\193\216\129r\006\239oN\142ar\196\175")); ("Evar_kinds", ("\023L\186\132\218}\254\221\185\198\220\200h\003{\021")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Environ", ("\171b\1579\229<\003Z\147IL\225X\254\182\204")); ("Entries", ("\172\201\198\221Ap\027_{\174\141C\021\";p")); ("EConstr", ("\201aW\156\157;N\004\201V\208\006L\166\211)")); ("Dyn", ("\131z`\205v\2306\007x\027&K.?;\169")); ("Declarations", ("\239\137n\019\030w$\182\166z^{\b\206\163\175")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Conversion", ("\158\150&\195M\tv\127|\029\158RRK\211A")); ("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CUnix", ("\140Zl\153\167\011J\015\005|th\247OTu")); ("CString", ("\243~4C\023~\169\148x\206\165\207\195\177Q\184")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CEphemeron", ("\204I\179-\206(x4\173\229\250\001PkH\151")); ("CDebug", ("^4\210p7\239!3\138\138\213?\239`\250\157")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])
val notify_proof_diff_failure : string -> unit

module Int_arg_helper :
  sig
    type parsed
    val parse : string -> string -> parsed ref -> unit
    type parse_result = Ok | Parse_failed of exn
    val parse_no_error : string -> parsed ref -> parse_result
    val get : key:int -> parsed -> int
  end
module Float_arg_helper :
  sig
    type parsed
    val parse : string -> string -> parsed ref -> unit
    type parse_result = Ok | Parse_failed of exn
    val parse_no_error : string -> parsed ref -> parse_result
    val get : key:int -> parsed -> float
  end
type inlining_arguments = {
  inline_call_cost : int option;
  inline_alloc_cost : int option;
  inline_prim_cost : int option;
  inline_branch_cost : int option;
  inline_indirect_cost : int option;
  inline_lifting_benefit : int option;
  inline_branch_factor : float option;
  inline_max_depth : int option;
  inline_max_unroll : int option;
  inline_threshold : float option;
  inline_toplevel_threshold : int option;
}
val classic_arguments : inlining_arguments
val o1_arguments : inlining_arguments
val o2_arguments : inlining_arguments
val o3_arguments : inlining_arguments
val use_inlining_arguments_set : ?round:int -> inlining_arguments -> unit
val objfiles : string list ref
val ccobjs : string list ref
val dllibs : string list ref
val cmi_file : string option ref
val compile_only : bool ref
val output_name : string option ref
val include_dirs : string list ref
val no_std_include : bool ref
val no_cwd : bool ref
val print_types : bool ref
val make_archive : bool ref
val debug : bool ref
val debug_full : bool ref
val unsafe : bool ref
val use_linscan : bool ref
val link_everything : bool ref
val custom_runtime : bool ref
val no_check_prims : bool ref
val bytecode_compatible_32 : bool ref
val output_c_object : bool ref
val output_complete_object : bool ref
val output_complete_executable : bool ref
val all_ccopts : string list ref
val classic : bool ref
val nopervasives : bool ref
val match_context_rows : int ref
val safer_matching : bool ref
val open_modules : string list ref
val preprocessor : string option ref
val all_ppx : string list ref
val absname : bool ref
val annotations : bool ref
val binary_annotations : bool ref
val use_threads : bool ref
val noassert : bool ref
val verbose : bool ref
val noprompt : bool ref
val nopromptcont : bool ref
val init_file : string option ref
val noinit : bool ref
val noversion : bool ref
val use_prims : string ref
val use_runtime : string ref
val plugin : bool ref
val principal : bool ref
val real_paths : bool ref
val recursive_types : bool ref
val strict_sequence : bool ref
val strict_formats : bool ref
val applicative_functors : bool ref
val make_runtime : bool ref
val c_compiler : string option ref
val no_auto_link : bool ref
val dllpaths : string list ref
val make_package : bool ref
val for_package : string option ref
val error_size : int ref
val float_const_prop : bool ref
val transparent_modules : bool ref
val unique_ids : bool ref
val locations : bool ref
val dump_source : bool ref
val dump_parsetree : bool ref
val dump_typedtree : bool ref
val dump_shape : bool ref
val dump_rawlambda : bool ref
val dump_lambda : bool ref
val dump_rawclambda : bool ref
val dump_clambda : bool ref
val dump_rawflambda : bool ref
val dump_flambda : bool ref
val dump_flambda_let : int option ref
val dump_instr : bool ref
val keep_camlprimc_file : bool ref
val keep_asm_file : bool ref
val optimize_for_speed : bool ref
val dump_cmm : bool ref
val dump_selection : bool ref
val dump_cse : bool ref
val dump_live : bool ref
val dump_spill : bool ref
val dump_split : bool ref
val dump_interf : bool ref
val dump_prefer : bool ref
val dump_regalloc : bool ref
val dump_reload : bool ref
val dump_scheduling : bool ref
val dump_linear : bool ref
val dump_interval : bool ref
val keep_startup_file : bool ref
val dump_combine : bool ref
val native_code : bool ref
val default_inline_threshold : float
val inline_threshold : Float_arg_helper.parsed ref
val inlining_report : bool ref
val simplify_rounds : int option ref
val default_simplify_rounds : int ref
val rounds : unit -> int
val default_inline_max_unroll : int
val inline_max_unroll : Int_arg_helper.parsed ref
val default_inline_toplevel_threshold : int
val inline_toplevel_threshold : Int_arg_helper.parsed ref
val default_inline_call_cost : int
val default_inline_alloc_cost : int
val default_inline_prim_cost : int
val default_inline_branch_cost : int
val default_inline_indirect_cost : int
val default_inline_lifting_benefit : int
val inline_call_cost : Int_arg_helper.parsed ref
val inline_alloc_cost : Int_arg_helper.parsed ref
val inline_prim_cost : Int_arg_helper.parsed ref
val inline_branch_cost : Int_arg_helper.parsed ref
val inline_indirect_cost : Int_arg_helper.parsed ref
val inline_lifting_benefit : Int_arg_helper.parsed ref
val default_inline_branch_factor : float
val inline_branch_factor : Float_arg_helper.parsed ref
val dont_write_files : bool ref
val std_include_flag : string -> string
val std_include_dir : unit -> string list
val shared : bool ref
val dlcode : bool ref
val pic_code : bool ref
val runtime_variant : string ref
val with_runtime : bool ref
val force_slash : bool ref
val keep_docs : bool ref
val keep_locs : bool ref
val opaque : bool ref
val profile_columns : Profile.column list ref
val flambda_invariant_checks : bool ref
val unbox_closures : bool ref
val unbox_closures_factor : int ref
val default_unbox_closures_factor : int
val unbox_free_vars_of_closures : bool ref
val unbox_specialised_args : bool ref
val clambda_checks : bool ref
val cmm_invariants : bool ref
val default_inline_max_depth : int
val inline_max_depth : Int_arg_helper.parsed ref
val remove_unused_arguments : bool ref
val dump_flambda_verbose : bool ref
val classic_inlining : bool ref
val afl_instrument : bool ref
val afl_inst_ratio : int ref
val function_sections : bool ref
val all_passes : string list ref
val dumped_pass : string -> bool
val set_dumped_pass : string -> bool -> unit
val dump_into_file : bool ref
val dump_dir : string option ref
type 'a env_reader = {
  parse : string -> 'a option;
  print : 'a -> string;
  usage : string;
  env_var : string;
}
val color : Misc.Color.setting option ref
val color_reader : Misc.Color.setting env_reader
val error_style : Misc.Error_style.setting option ref
val error_style_reader : Misc.Error_style.setting env_reader
val unboxed_types : bool ref
val insn_sched : bool ref
val insn_sched_default : bool
module Compiler_pass :
  sig
    type t = Parsing | Typing | Lambda | Scheduling | Emit
    val of_string : string -> t option
    val to_string : t -> string
    val is_compilation_pass : t -> bool
    val available_pass_names :
      filter:(t -> bool) -> native:bool -> string list
    val can_save_ir_after : t -> bool
    val compare : t -> t -> int
    val to_output_filename : t -> prefix:string -> string
    val of_input_filename : string -> t option
  end
val stop_after : Compiler_pass.t option ref
val should_stop_after : Compiler_pass.t -> bool
val set_save_ir_after : Compiler_pass.t -> bool -> unit
val should_save_ir_after : Compiler_pass.t -> bool
val arg_spec : (string * Arg.spec * string) list ref
val add_arguments : string -> (string * Arg.spec * string) list -> unit
val create_usage_msg : string -> string
val print_arguments : string -> unit("DEBUG:rule", [Tag3 (("Int_arg_helper", 605), 0, (Tag1 ([Tag1 (("parsed", 781), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("utils/clflags.mli", 22, 1212, 1214), ("utils/clflags.mli", 22, 1212, 1225), 0), 0, 0, 0, Tag1 ("Clflags", 0)), 1, 0); (("parse", 782), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -429), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -428), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("parsed", 781)), 0, (0)), 100000000, 0, -427)], (0)), 100000000, 0, -426), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -425), 0), 100000000, 0, -424), 0), 100000000, 0, -423), 0), 100000000, 0, -422), 0, (("utils/clflags.mli", 24, 1227, 1229), ("utils/clflags.mli", 24, 1227, 1279), 0), 0, Tag1 ("Clflags", 1)), 0); Tag1 (("parse_result", 783), (0, 0, Tag1 ([(("Ok", 272), (0), 0, (("utils/clflags.mli", 27, 1303, 1307), ("utils/clflags.mli", 27, 1303, 1311), 0), 0, Tag1 ("Clflags", 3)); (("Parse_failed", 273), ([(Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -421)]), 0, (("utils/clflags.mli", 28, 1312, 1316), ("utils/clflags.mli", 28, 1312, 1337), 0), 0, Tag1 ("Clflags", 4))], 0), 1, 0, 0, 0, 0, 0, (("utils/clflags.mli", 26, 1281, 1283), ("utils/clflags.mli", 28, 1312, 1337), 0), 0, 0, 0, Tag1 ("Clflags", 2)), 1, 0); (("parse_no_error", 784), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -420), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("parsed", 781)), 0, (0)), 100000000, 0, -419)], (0)), 100000000, 0, -418), (Tag3 ((("parse_result", 783)), 0, (0)), 100000000, 0, -417), 0), 100000000, 0, -416), 0), 100000000, 0, -415), 0, (("utils/clflags.mli", 29, 1338, 1340), ("utils/clflags.mli", 29, 1338, 1397), 0), 0, Tag1 ("Clflags", 5)), 0); (("get", 785), ((Tag1 (("key"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -414), (Tag1 (0, (Tag3 ((("parsed", 781)), 0, (0)), 100000000, 0, -413), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -412), 0), 100000000, 0, -411), 0), 100000000, 0, -410), 0, (("utils/clflags.mli", 31, 1399, 1401), ("utils/clflags.mli", 31, 1399, 1435), 0), 0, Tag1 ("Clflags", 6)), 0)]), 0, (("utils/clflags.mli", 21, 1184, 1184), ("utils/clflags.mli", 32, 1436, 1439), 0), Tag1 ("Clflags", 7)), 0, 0); Tag3 (("Float_arg_helper", 606), 0, (Tag1 ([Tag1 (("parsed", 786), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("utils/clflags.mli", 36, 1549, 1551), ("utils/clflags.mli", 36, 1549, 1562), 0), 0, 0, 0, Tag1 ("Clflags", 8)), 1, 0); (("parse", 787), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -449), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -448), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("parsed", 786)), 0, (0)), 100000000, 0, -447)], (0)), 100000000, 0, -446), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -445), 0), 100000000, 0, -444), 0), 100000000, 0, -443), 0), 100000000, 0, -442), 0, (("utils/clflags.mli", 38, 1564, 1566), ("utils/clflags.mli", 38, 1564, 1616), 0), 0, Tag1 ("Clflags", 9)), 0); Tag1 (("parse_result", 788), (0, 0, Tag1 ([(("Ok", 280), (0), 0, (("utils/clflags.mli", 41, 1640, 1644), ("utils/clflags.mli", 41, 1640, 1648), 0), 0, Tag1 ("Clflags", 11)); (("Parse_failed", 281), ([(Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -441)]), 0, (("utils/clflags.mli", 42, 1649, 1653), ("utils/clflags.mli", 42, 1649, 1674), 0), 0, Tag1 ("Clflags", 12))], 0), 1, 0, 0, 0, 0, 0, (("utils/clflags.mli", 40, 1618, 1620), ("utils/clflags.mli", 42, 1649, 1674), 0), 0, 0, 0, Tag1 ("Clflags", 10)), 1, 0); (("parse_no_error", 789), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -440), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("parsed", 786)), 0, (0)), 100000000, 0, -439)], (0)), 100000000, 0, -438), (Tag3 ((("parse_result", 788)), 0, (0)), 100000000, 0, -437), 0), 100000000, 0, -436), 0), 100000000, 0, -435), 0, (("utils/clflags.mli", 43, 1675, 1677), ("utils/clflags.mli", 43, 1675, 1734), 0), 0, Tag1 ("Clflags", 13)), 0); (("get", 790), ((Tag1 (("key"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -434), (Tag1 (0, (Tag3 ((("parsed", 786)), 0, (0)), 100000000, 0, -433), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -432), 0), 100000000, 0, -431), 0), 100000000, 0, -430), 0, (("utils/clflags.mli", 45, 1736, 1738), ("utils/clflags.mli", 45, 1736, 1774), 0), 0, Tag1 ("Clflags", 14)), 0)]), 0, (("utils/clflags.mli", 35, 1519, 1519), ("utils/clflags.mli", 46, 1775, 1778), 0), Tag1 ("Clflags", 15)), 0, 0); Tag1 (("inlining_arguments", 607), (0, 0, [[(("inline_call_cost", 286), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -389)], (0)), 100000000, 0, -388), (("utils/clflags.mli", 49, 1808, 1810), ("utils/clflags.mli", 49, 1808, 1840), 0), 0, Tag1 ("Clflags", 17)); (("inline_alloc_cost", 287), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -391)], (0)), 100000000, 0, -390), (("utils/clflags.mli", 50, 1841, 1843), ("utils/clflags.mli", 50, 1841, 1874), 0), 0, Tag1 ("Clflags", 18)); (("inline_prim_cost", 288), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -393)], (0)), 100000000, 0, -392), (("utils/clflags.mli", 51, 1875, 1877), ("utils/clflags.mli", 51, 1875, 1907), 0), 0, Tag1 ("Clflags", 19)); (("inline_branch_cost", 289), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -395)], (0)), 100000000, 0, -394), (("utils/clflags.mli", 52, 1908, 1910), ("utils/clflags.mli", 52, 1908, 1942), 0), 0, Tag1 ("Clflags", 20)); (("inline_indirect_cost", 290), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -397)], (0)), 100000000, 0, -396), (("utils/clflags.mli", 53, 1943, 1945), ("utils/clflags.mli", 53, 1943, 1979), 0), 0, Tag1 ("Clflags", 21)); (("inline_lifting_benefit", 291), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -399)], (0)), 100000000, 0, -398), (("utils/clflags.mli", 54, 1980, 1982), ("utils/clflags.mli", 54, 1980, 2018), 0), 0, Tag1 ("Clflags", 22)); (("inline_branch_factor", 292), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -401)], (0)), 100000000, 0, -400), (("utils/clflags.mli", 55, 2019, 2021), ("utils/clflags.mli", 55, 2019, 2057), 0), 0, Tag1 ("Clflags", 23)); (("inline_max_depth", 293), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -403)], (0)), 100000000, 0, -402), (("utils/clflags.mli", 56, 2058, 2060), ("utils/clflags.mli", 56, 2058, 2090), 0), 0, Tag1 ("Clflags", 24)); (("inline_max_unroll", 294), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -405)], (0)), 100000000, 0, -404), (("utils/clflags.mli", 57, 2091, 2093), ("utils/clflags.mli", 57, 2091, 2124), 0), 0, Tag1 ("Clflags", 25)); (("inline_threshold", 295), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -407)], (0)), 100000000, 0, -406), (("utils/clflags.mli", 58, 2125, 2127), ("utils/clflags.mli", 58, 2125, 2159), 0), 0, Tag1 ("Clflags", 26)); (("inline_toplevel_threshold", 296), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -409)], (0)), 100000000, 0, -408), (("utils/clflags.mli", 59, 2160, 2162), ("utils/clflags.mli", 59, 2160, 2201), 0), 0, Tag1 ("Clflags", 27))]], 1, 0, 0, 0, 0, 0, (("utils/clflags.mli", 48, 1780, 1780), ("utils/clflags.mli", 60, 2202, 2203), 0), 0, 0, 0, Tag1 ("Clflags", 16)), 1, 0); (("classic_arguments", 608), ((Tag3 ((("inlining_arguments", 607)), 0, (0)), 100000000, 0, -387), 0, (("utils/clflags.mli", 62, 2205, 2205), ("utils/clflags.mli", 62, 2205, 2247), 0), 0, Tag1 ("Clflags", 28)), 0); (("o1_arguments", 609), ((Tag3 ((("inlining_arguments", 607)), 0, (0)), 100000000, 0, -386), 0, (("utils/clflags.mli", 63, 2248, 2248), ("utils/clflags.mli", 63, 2248, 2285), 0), 0, Tag1 ("Clflags", 29)), 0); (("o2_arguments", 610), ((Tag3 ((("inlining_arguments", 607)), 0, (0)), 100000000, 0, -385), 0, (("utils/clflags.mli", 64, 2286, 2286), ("utils/clflags.mli", 64, 2286, 2323), 0), 0, Tag1 ("Clflags", 30)), 0); (("o3_arguments", 611), ((Tag3 ((("inlining_arguments", 607)), 0, (0)), 100000000, 0, -384), 0, (("utils/clflags.mli", 65, 2324, 2324), ("utils/clflags.mli", 65, 2324, 2361), 0), 0, Tag1 ("Clflags", 31)), 0); (("use_inlining_arguments_set", 612), ((Tag1 (Tag1 ("round"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -383)], (0)), 100000000, 0, -382), (Tag1 (0, (Tag3 ((("inlining_arguments", 607)), 0, (0)), 100000000, 0, -381), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -380), 0), 100000000, 0, -379), 0), 100000000, 0, -378), 0, (("utils/clflags.mli", 69, 2462, 2462), ("utils/clflags.mli", 69, 2462, 2535), 0), 0, Tag1 ("Clflags", 32)), 0); (("objfiles", 613), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -377)], (0)), 100000000, 0, -376)], (0)), 100000000, 0, -375), 0, (("utils/clflags.mli", 71, 2537, 2537), ("utils/clflags.mli", 71, 2537, 2567), 0), 0, Tag1 ("Clflags", 33)), 0); (("ccobjs", 614), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -374)], (0)), 100000000, 0, -373)], (0)), 100000000, 0, -372), 0, (("utils/clflags.mli", 72, 2568, 2568), ("utils/clflags.mli", 72, 2568, 2596), 0), 0, Tag1 ("Clflags", 34)), 0); (("dllibs", 615), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -371)], (0)), 100000000, 0, -370)], (0)), 100000000, 0, -369), 0, (("utils/clflags.mli", 73, 2597, 2597), ("utils/clflags.mli", 73, 2597, 2625), 0), 0, Tag1 ("Clflags", 35)), 0); (("cmi_file", 616), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -368)], (0)), 100000000, 0, -367)], (0)), 100000000, 0, -366), 0, (("utils/clflags.mli", 74, 2626, 2626), ("utils/clflags.mli", 74, 2626, 2658), 0), 0, Tag1 ("Clflags", 36)), 0); (("compile_only", 617), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -365)], (0)), 100000000, 0, -364), 0, (("utils/clflags.mli", 75, 2659, 2659), ("utils/clflags.mli", 75, 2659, 2686), 0), 0, Tag1 ("Clflags", 37)), 0); (("output_name", 618), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -363)], (0)), 100000000, 0, -362)], (0)), 100000000, 0, -361), 0, (("utils/clflags.mli", 76, 2687, 2687), ("utils/clflags.mli", 76, 2687, 2722), 0), 0, Tag1 ("Clflags", 38)), 0); (("include_dirs", 619), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -360)], (0)), 100000000, 0, -359)], (0)), 100000000, 0, -358), 0, (("utils/clflags.mli", 77, 2723, 2723), ("utils/clflags.mli", 77, 2723, 2757), 0), 0, Tag1 ("Clflags", 39)), 0); (("no_std_include", 620), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -357)], (0)), 100000000, 0, -356), 0, (("utils/clflags.mli", 78, 2758, 2758), ("utils/clflags.mli", 78, 2758, 2787), 0), 0, Tag1 ("Clflags", 40)), 0); (("no_cwd", 621), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -355)], (0)), 100000000, 0, -354), 0, (("utils/clflags.mli", 79, 2788, 2788), ("utils/clflags.mli", 79, 2788, 2809), 0), 0, Tag1 ("Clflags", 41)), 0); (("print_types", 622), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -353)], (0)), 100000000, 0, -352), 0, (("utils/clflags.mli", 80, 2810, 2810), ("utils/clflags.mli", 80, 2810, 2836), 0), 0, Tag1 ("Clflags", 42)), 0); (("make_archive", 623), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -351)], (0)), 100000000, 0, -350), 0, (("utils/clflags.mli", 81, 2837, 2837), ("utils/clflags.mli", 81, 2837, 2864), 0), 0, Tag1 ("Clflags", 43)), 0); (("debug", 624), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -349)], (0)), 100000000, 0, -348), 0, (("utils/clflags.mli", 82, 2865, 2865), ("utils/clflags.mli", 82, 2865, 2885), 0), 0, Tag1 ("Clflags", 44)), 0); (("debug_full", 625), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -347)], (0)), 100000000, 0, -346), 0, (("utils/clflags.mli", 83, 2886, 2886), ("utils/clflags.mli", 83, 2886, 2911), 0), 0, Tag1 ("Clflags", 45)), 0); (("unsafe", 626), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -345)], (0)), 100000000, 0, -344), 0, (("utils/clflags.mli", 84, 2912, 2912), ("utils/clflags.mli", 84, 2912, 2933), 0), 0, Tag1 ("Clflags", 46)), 0); (("use_linscan", 627), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -343)], (0)), 100000000, 0, -342), 0, (("utils/clflags.mli", 85, 2934, 2934), ("utils/clflags.mli", 85, 2934, 2960), 0), 0, Tag1 ("Clflags", 47)), 0); (("link_everything", 628), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -341)], (0)), 100000000, 0, -340), 0, (("utils/clflags.mli", 86, 2961, 2961), ("utils/clflags.mli", 86, 2961, 2991), 0), 0, Tag1 ("Clflags", 48)), 0); (("custom_runtime", 629), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -339)], (0)), 100000000, 0, -338), 0, (("utils/clflags.mli", 87, 2992, 2992), ("utils/clflags.mli", 87, 2992, 3021), 0), 0, Tag1 ("Clflags", 49)), 0); (("no_check_prims", 630), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -337)], (0)), 100000000, 0, -336), 0, (("utils/clflags.mli", 88, 3022, 3022), ("utils/clflags.mli", 88, 3022, 3051), 0), 0, Tag1 ("Clflags", 50)), 0); (("bytecode_compatible_32", 631), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -335)], (0)), 100000000, 0, -334), 0, (("utils/clflags.mli", 89, 3052, 3052), ("utils/clflags.mli", 89, 3052, 3089), 0), 0, Tag1 ("Clflags", 51)), 0); (("output_c_object", 632), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -333)], (0)), 100000000, 0, -332), 0, (("utils/clflags.mli", 90, 3090, 3090), ("utils/clflags.mli", 90, 3090, 3120), 0), 0, Tag1 ("Clflags", 52)), 0); (("output_complete_object", 633), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -331)], (0)), 100000000, 0, -330), 0, (("utils/clflags.mli", 91, 3121, 3121), ("utils/clflags.mli", 91, 3121, 3158), 0), 0, Tag1 ("Clflags", 53)), 0); (("output_complete_executable", 634), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -329)], (0)), 100000000, 0, -328), 0, (("utils/clflags.mli", 92, 3159, 3159), ("utils/clflags.mli", 92, 3159, 3200), 0), 0, Tag1 ("Clflags", 54)), 0); (("all_ccopts", 635), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -327)], (0)), 100000000, 0, -326)], (0)), 100000000, 0, -325), 0, (("utils/clflags.mli", 93, 3201, 3201), ("utils/clflags.mli", 93, 3201, 3233), 0), 0, Tag1 ("Clflags", 55)), 0); (("classic", 636), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -324)], (0)), 100000000, 0, -323), 0, (("utils/clflags.mli", 94, 3234, 3234), ("utils/clflags.mli", 94, 3234, 3256), 0), 0, Tag1 ("Clflags", 56)), 0); (("nopervasives", 637), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -322)], (0)), 100000000, 0, -321), 0, (("utils/clflags.mli", 95, 3257, 3257), ("utils/clflags.mli", 95, 3257, 3284), 0), 0, Tag1 ("Clflags", 57)), 0); (("match_context_rows", 638), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -320)], (0)), 100000000, 0, -319), 0, (("utils/clflags.mli", 96, 3285, 3285), ("utils/clflags.mli", 96, 3285, 3317), 0), 0, Tag1 ("Clflags", 58)), 0); (("safer_matching", 639), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -318)], (0)), 100000000, 0, -317), 0, (("utils/clflags.mli", 97, 3318, 3318), ("utils/clflags.mli", 97, 3318, 3347), 0), 0, Tag1 ("Clflags", 59)), 0); (("open_modules", 640), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -316)], (0)), 100000000, 0, -315)], (0)), 100000000, 0, -314), 0, (("utils/clflags.mli", 98, 3348, 3348), ("utils/clflags.mli", 98, 3348, 3382), 0), 0, Tag1 ("Clflags", 60)), 0); (("preprocessor", 641), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -313)], (0)), 100000000, 0, -312)], (0)), 100000000, 0, -311), 0, (("utils/clflags.mli", 99, 3383, 3383), ("utils/clflags.mli", 99, 3383, 3419), 0), 0, Tag1 ("Clflags", 61)), 0); (("all_ppx", 642), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -310)], (0)), 100000000, 0, -309)], (0)), 100000000, 0, -308), 0, (("utils/clflags.mli", 100, 3420, 3420), ("utils/clflags.mli", 100, 3420, 3449), 0), 0, Tag1 ("Clflags", 62)), 0); (("absname", 643), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -307)], (0)), 100000000, 0, -306), 0, (("utils/clflags.mli", 101, 3450, 3450), ("utils/clflags.mli", 101, 3450, 3472), 0), 0, Tag1 ("Clflags", 63)), 0); (("annotations", 644), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -305)], (0)), 100000000, 0, -304), 0, (("utils/clflags.mli", 102, 3473, 3473), ("utils/clflags.mli", 102, 3473, 3499), 0), 0, Tag1 ("Clflags", 64)), 0); (("binary_annotations", 645), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -303)], (0)), 100000000, 0, -302), 0, (("utils/clflags.mli", 103, 3500, 3500), ("utils/clflags.mli", 103, 3500, 3533), 0), 0, Tag1 ("Clflags", 65)), 0); (("use_threads", 646), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -301)], (0)), 100000000, 0, -300), 0, (("utils/clflags.mli", 104, 3534, 3534), ("utils/clflags.mli", 104, 3534, 3560), 0), 0, Tag1 ("Clflags", 66)), 0); (("noassert", 647), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -299)], (0)), 100000000, 0, -298), 0, (("utils/clflags.mli", 105, 3561, 3561), ("utils/clflags.mli", 105, 3561, 3584), 0), 0, Tag1 ("Clflags", 67)), 0); (("verbose", 648), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -297)], (0)), 100000000, 0, -296), 0, (("utils/clflags.mli", 106, 3585, 3585), ("utils/clflags.mli", 106, 3585, 3607), 0), 0, Tag1 ("Clflags", 68)), 0); (("noprompt", 649), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -295)], (0)), 100000000, 0, -294), 0, (("utils/clflags.mli", 107, 3608, 3608), ("utils/clflags.mli", 107, 3608, 3631), 0), 0, Tag1 ("Clflags", 69)), 0); (("nopromptcont", 650), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -293)], (0)), 100000000, 0, -292), 0, (("utils/clflags.mli", 108, 3632, 3632), ("utils/clflags.mli", 108, 3632, 3659), 0), 0, Tag1 ("Clflags", 70)), 0); (("init_file", 651), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -291)], (0)), 100000000, 0, -290)], (0)), 100000000, 0, -289), 0, (("utils/clflags.mli", 109, 3660, 3660), ("utils/clflags.mli", 109, 3660, 3693), 0), 0, Tag1 ("Clflags", 71)), 0); (("noinit", 652), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -288)], (0)), 100000000, 0, -287), 0, (("utils/clflags.mli", 110, 3694, 3694), ("utils/clflags.mli", 110, 3694, 3715), 0), 0, Tag1 ("Clflags", 72)), 0); (("noversion", 653), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -286)], (0)), 100000000, 0, -285), 0, (("utils/clflags.mli", 111, 3716, 3716), ("utils/clflags.mli", 111, 3716, 3740), 0), 0, Tag1 ("Clflags", 73)), 0); (("use_prims", 654), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -284)], (0)), 100000000, 0, -283), 0, (("utils/clflags.mli", 112, 3741, 3741), ("utils/clflags.mli", 112, 3741, 3767), 0), 0, Tag1 ("Clflags", 74)), 0); (("use_runtime", 655), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -282)], (0)), 100000000, 0, -281), 0, (("utils/clflags.mli", 113, 3768, 3768), ("utils/clflags.mli", 113, 3768, 3796), 0), 0, Tag1 ("Clflags", 75)), 0); (("plugin", 656), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -280)], (0)), 100000000, 0, -279), 0, (("utils/clflags.mli", 114, 3797, 3797), ("utils/clflags.mli", 114, 3797, 3818), 0), 0, Tag1 ("Clflags", 76)), 0); (("principal", 657), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -278)], (0)), 100000000, 0, -277), 0, (("utils/clflags.mli", 115, 3819, 3819), ("utils/clflags.mli", 115, 3819, 3843), 0), 0, Tag1 ("Clflags", 77)), 0); (("real_paths", 658), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -276)], (0)), 100000000, 0, -275), 0, (("utils/clflags.mli", 116, 3844, 3844), ("utils/clflags.mli", 116, 3844, 3869), 0), 0, Tag1 ("Clflags", 78)), 0); (("recursive_types", 659), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -274)], (0)), 100000000, 0, -273), 0, (("utils/clflags.mli", 117, 3870, 3870), ("utils/clflags.mli", 117, 3870, 3900), 0), 0, Tag1 ("Clflags", 79)), 0); (("strict_sequence", 660), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -272)], (0)), 100000000, 0, -271), 0, (("utils/clflags.mli", 118, 3901, 3901), ("utils/clflags.mli", 118, 3901, 3931), 0), 0, Tag1 ("Clflags", 80)), 0); (("strict_formats", 661), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -270)], (0)), 100000000, 0, -269), 0, (("utils/clflags.mli", 119, 3932, 3932), ("utils/clflags.mli", 119, 3932, 3961), 0), 0, Tag1 ("Clflags", 81)), 0); (("applicative_functors", 662), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -268)], (0)), 100000000, 0, -267), 0, (("utils/clflags.mli", 120, 3962, 3962), ("utils/clflags.mli", 120, 3962, 3997), 0), 0, Tag1 ("Clflags", 82)), 0); (("make_runtime", 663), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -266)], (0)), 100000000, 0, -265), 0, (("utils/clflags.mli", 121, 3998, 3998), ("utils/clflags.mli", 121, 3998, 4025), 0), 0, Tag1 ("Clflags", 83)), 0); (("c_compiler", 664), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -264)], (0)), 100000000, 0, -263)], (0)), 100000000, 0, -262), 0, (("utils/clflags.mli", 122, 4026, 4026), ("utils/clflags.mli", 122, 4026, 4060), 0), 0, Tag1 ("Clflags", 84)), 0); (("no_auto_link", 665), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -261)], (0)), 100000000, 0, -260), 0, (("utils/clflags.mli", 123, 4061, 4061), ("utils/clflags.mli", 123, 4061, 4088), 0), 0, Tag1 ("Clflags", 85)), 0); (("dllpaths", 666), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -259)], (0)), 100000000, 0, -258)], (0)), 100000000, 0, -257), 0, (("utils/clflags.mli", 124, 4089, 4089), ("utils/clflags.mli", 124, 4089, 4119), 0), 0, Tag1 ("Clflags", 86)), 0); (("make_package", 667), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -256)], (0)), 100000000, 0, -255), 0, (("utils/clflags.mli", 125, 4120, 4120), ("utils/clflags.mli", 125, 4120, 4147), 0), 0, Tag1 ("Clflags", 87)), 0); (("for_package", 668), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -254)], (0)), 100000000, 0, -253)], (0)), 100000000, 0, -252), 0, (("utils/clflags.mli", 126, 4148, 4148), ("utils/clflags.mli", 126, 4148, 4183), 0), 0, Tag1 ("Clflags", 88)), 0); (("error_size", 669), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -251)], (0)), 100000000, 0, -250), 0, (("utils/clflags.mli", 127, 4184, 4184), ("utils/clflags.mli", 127, 4184, 4208), 0), 0, Tag1 ("Clflags", 89)), 0); (("float_const_prop", 670), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -249)], (0)), 100000000, 0, -248), 0, (("utils/clflags.mli", 128, 4209, 4209), ("utils/clflags.mli", 128, 4209, 4240), 0), 0, Tag1 ("Clflags", 90)), 0); (("transparent_modules", 671), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -247)], (0)), 100000000, 0, -246), 0, (("utils/clflags.mli", 129, 4241, 4241), ("utils/clflags.mli", 129, 4241, 4275), 0), 0, Tag1 ("Clflags", 91)), 0); (("unique_ids", 672), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -245)], (0)), 100000000, 0, -244), 0, (("utils/clflags.mli", 130, 4276, 4276), ("utils/clflags.mli", 130, 4276, 4301), 0), 0, Tag1 ("Clflags", 92)), 0); (("locations", 673), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -243)], (0)), 100000000, 0, -242), 0, (("utils/clflags.mli", 131, 4302, 4302), ("utils/clflags.mli", 131, 4302, 4326), 0), 0, Tag1 ("Clflags", 93)), 0); (("dump_source", 674), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -241)], (0)), 100000000, 0, -240), 0, (("utils/clflags.mli", 132, 4327, 4327), ("utils/clflags.mli", 132, 4327, 4353), 0), 0, Tag1 ("Clflags", 94)), 0); (("dump_parsetree", 675), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -239)], (0)), 100000000, 0, -238), 0, (("utils/clflags.mli", 133, 4354, 4354), ("utils/clflags.mli", 133, 4354, 4383), 0), 0, Tag1 ("Clflags", 95)), 0); (("dump_typedtree", 676), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -237)], (0)), 100000000, 0, -236), 0, (("utils/clflags.mli", 134, 4384, 4384), ("utils/clflags.mli", 134, 4384, 4413), 0), 0, Tag1 ("Clflags", 96)), 0); (("dump_shape", 677), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -235)], (0)), 100000000, 0, -234), 0, (("utils/clflags.mli", 135, 4414, 4414), ("utils/clflags.mli", 135, 4414, 4439), 0), 0, Tag1 ("Clflags", 97)), 0); (("dump_rawlambda", 678), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -233)], (0)), 100000000, 0, -232), 0, (("utils/clflags.mli", 136, 4440, 4440), ("utils/clflags.mli", 136, 4440, 4469), 0), 0, Tag1 ("Clflags", 98)), 0); (("dump_lambda", 679), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -231)], (0)), 100000000, 0, -230), 0, (("utils/clflags.mli", 137, 4470, 4470), ("utils/clflags.mli", 137, 4470, 4496), 0), 0, Tag1 ("Clflags", 99)), 0); (("dump_rawclambda", 680), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -229)], (0)), 100000000, 0, -228), 0, (("utils/clflags.mli", 138, 4497, 4497), ("utils/clflags.mli", 138, 4497, 4527), 0), 0, Tag1 ("Clflags", 100)), 0); (("dump_clambda", 681), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -227)], (0)), 100000000, 0, -226), 0, (("utils/clflags.mli", 139, 4528, 4528), ("utils/clflags.mli", 139, 4528, 4555), 0), 0, Tag1 ("Clflags", 101)), 0); (("dump_rawflambda", 682), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -225)], (0)), 100000000, 0, -224), 0, (("utils/clflags.mli", 140, 4556, 4556), ("utils/clflags.mli", 140, 4556, 4586), 0), 0, Tag1 ("Clflags", 102)), 0); (("dump_flambda", 683), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -223)], (0)), 100000000, 0, -222), 0, (("utils/clflags.mli", 141, 4587, 4587), ("utils/clflags.mli", 141, 4587, 4614), 0), 0, Tag1 ("Clflags", 103)), 0); (("dump_flambda_let", 684), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -221)], (0)), 100000000, 0, -220)], (0)), 100000000, 0, -219), 0, (("utils/clflags.mli", 142, 4615, 4615), ("utils/clflags.mli", 142, 4615, 4652), 0), 0, Tag1 ("Clflags", 104)), 0); (("dump_instr", 685), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -218)], (0)), 100000000, 0, -217), 0, (("utils/clflags.mli", 143, 4653, 4653), ("utils/clflags.mli", 143, 4653, 4678), 0), 0, Tag1 ("Clflags", 105)), 0); (("keep_camlprimc_file", 686), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -216)], (0)), 100000000, 0, -215), 0, (("utils/clflags.mli", 144, 4679, 4679), ("utils/clflags.mli", 144, 4679, 4713), 0), 0, Tag1 ("Clflags", 106)), 0); (("keep_asm_file", 687), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -214)], (0)), 100000000, 0, -213), 0, (("utils/clflags.mli", 145, 4714, 4714), ("utils/clflags.mli", 145, 4714, 4742), 0), 0, Tag1 ("Clflags", 107)), 0); (("optimize_for_speed", 688), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -212)], (0)), 100000000, 0, -211), 0, (("utils/clflags.mli", 146, 4743, 4743), ("utils/clflags.mli", 146, 4743, 4776), 0), 0, Tag1 ("Clflags", 108)), 0); (("dump_cmm", 689), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -210)], (0)), 100000000, 0, -209), 0, (("utils/clflags.mli", 147, 4777, 4777), ("utils/clflags.mli", 147, 4777, 4800), 0), 0, Tag1 ("Clflags", 109)), 0); (("dump_selection", 690), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -208)], (0)), 100000000, 0, -207), 0, (("utils/clflags.mli", 148, 4801, 4801), ("utils/clflags.mli", 148, 4801, 4830), 0), 0, Tag1 ("Clflags", 110)), 0); (("dump_cse", 691), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -206)], (0)), 100000000, 0, -205), 0, (("utils/clflags.mli", 149, 4831, 4831), ("utils/clflags.mli", 149, 4831, 4854), 0), 0, Tag1 ("Clflags", 111)), 0); (("dump_live", 692), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -204)], (0)), 100000000, 0, -203), 0, (("utils/clflags.mli", 150, 4855, 4855), ("utils/clflags.mli", 150, 4855, 4879), 0), 0, Tag1 ("Clflags", 112)), 0); (("dump_spill", 693), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -202)], (0)), 100000000, 0, -201), 0, (("utils/clflags.mli", 151, 4880, 4880), ("utils/clflags.mli", 151, 4880, 4905), 0), 0, Tag1 ("Clflags", 113)), 0); (("dump_split", 694), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -200)], (0)), 100000000, 0, -199), 0, (("utils/clflags.mli", 152, 4906, 4906), ("utils/clflags.mli", 152, 4906, 4931), 0), 0, Tag1 ("Clflags", 114)), 0); (("dump_interf", 695), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -198)], (0)), 100000000, 0, -197), 0, (("utils/clflags.mli", 153, 4932, 4932), ("utils/clflags.mli", 153, 4932, 4958), 0), 0, Tag1 ("Clflags", 115)), 0); (("dump_prefer", 696), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -196)], (0)), 100000000, 0, -195), 0, (("utils/clflags.mli", 154, 4959, 4959), ("utils/clflags.mli", 154, 4959, 4985), 0), 0, Tag1 ("Clflags", 116)), 0); (("dump_regalloc", 697), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -194)], (0)), 100000000, 0, -193), 0, (("utils/clflags.mli", 155, 4986, 4986), ("utils/clflags.mli", 155, 4986, 5014), 0), 0, Tag1 ("Clflags", 117)), 0); (("dump_reload", 698), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -192)], (0)), 100000000, 0, -191), 0, (("utils/clflags.mli", 156, 5015, 5015), ("utils/clflags.mli", 156, 5015, 5041), 0), 0, Tag1 ("Clflags", 118)), 0); (("dump_scheduling", 699), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -190)], (0)), 100000000, 0, -189), 0, (("utils/clflags.mli", 157, 5042, 5042), ("utils/clflags.mli", 157, 5042, 5072), 0), 0, Tag1 ("Clflags", 119)), 0); (("dump_linear", 700), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -188)], (0)), 100000000, 0, -187), 0, (("utils/clflags.mli", 158, 5073, 5073), ("utils/clflags.mli", 158, 5073, 5099), 0), 0, Tag1 ("Clflags", 120)), 0); (("dump_interval", 701), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -186)], (0)), 100000000, 0, -185), 0, (("utils/clflags.mli", 159, 5100, 5100), ("utils/clflags.mli", 159, 5100, 5128), 0), 0, Tag1 ("Clflags", 121)), 0); (("keep_startup_file", 702), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -184)], (0)), 100000000, 0, -183), 0, (("utils/clflags.mli", 160, 5129, 5129), ("utils/clflags.mli", 160, 5129, 5161), 0), 0, Tag1 ("Clflags", 122)), 0); (("dump_combine", 703), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -182)], (0)), 100000000, 0, -181), 0, (("utils/clflags.mli", 161, 5162, 5162), ("utils/clflags.mli", 161, 5162, 5189), 0), 0, Tag1 ("Clflags", 123)), 0); (("native_code", 704), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -180)], (0)), 100000000, 0, -179), 0, (("utils/clflags.mli", 162, 5190, 5190), ("utils/clflags.mli", 162, 5190, 5216), 0), 0, Tag1 ("Clflags", 124)), 0); (("default_inline_threshold", 705), ((Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -178), 0, (("utils/clflags.mli", 163, 5217, 5217), ("utils/clflags.mli", 163, 5217, 5253), 0), 0, Tag1 ("Clflags", 125)), 0); (("inline_threshold", 706), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 (Tag1 ((("Float_arg_helper", 606)), "parsed"), 0, (0)), 100000000, 0, -177)], (0)), 100000000, 0, -176), 0, (("utils/clflags.mli", 164, 5254, 5254), ("utils/clflags.mli", 164, 5254, 5304), 0), 0, Tag1 ("Clflags", 126)), 0); (("inlining_report", 707), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -175)], (0)), 100000000, 0, -174), 0, (("utils/clflags.mli", 165, 5305, 5305), ("utils/clflags.mli", 165, 5305, 5335), 0), 0, Tag1 ("Clflags", 127)), 0); (("simplify_rounds", 708), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -173)], (0)), 100000000, 0, -172)], (0)), 100000000, 0, -171), 0, (("utils/clflags.mli", 166, 5336, 5336), ("utils/clflags.mli", 166, 5336, 5372), 0), 0, Tag1 ("Clflags", 128)), 0); (("default_simplify_rounds", 709), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -170)], (0)), 100000000, 0, -169), 0, (("utils/clflags.mli", 167, 5373, 5373), ("utils/clflags.mli", 167, 5373, 5410), 0), 0, Tag1 ("Clflags", 129)), 0); (("rounds", 710), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -168), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -167), 0), 100000000, 0, -166), 0, (("utils/clflags.mli", 168, 5411, 5411), ("utils/clflags.mli", 168, 5411, 5435), 0), 0, Tag1 ("Clflags", 130)), 0); (("default_inline_max_unroll", 711), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -165), 0, (("utils/clflags.mli", 169, 5436, 5436), ("utils/clflags.mli", 169, 5436, 5471), 0), 0, Tag1 ("Clflags", 131)), 0); (("inline_max_unroll", 712), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 (Tag1 ((("Int_arg_helper", 605)), "parsed"), 0, (0)), 100000000, 0, -164)], (0)), 100000000, 0, -163), 0, (("utils/clflags.mli", 170, 5472, 5472), ("utils/clflags.mli", 170, 5472, 5521), 0), 0, Tag1 ("Clflags", 132)), 0); (("default_inline_toplevel_threshold", 713), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -162), 0, (("utils/clflags.mli", 171, 5522, 5522), ("utils/clflags.mli", 171, 5522, 5565), 0), 0, Tag1 ("Clflags", 133)), 0); (("inline_toplevel_threshold", 714), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 (Tag1 ((("Int_arg_helper", 605)), "parsed"), 0, (0)), 100000000, 0, -161)], (0)), 100000000, 0, -160), 0, (("utils/clflags.mli", 172, 5566, 5566), ("utils/clflags.mli", 172, 5566, 5623), 0), 0, Tag1 ("Clflags", 134)), 0); (("default_inline_call_cost", 715), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -159), 0, (("utils/clflags.mli", 173, 5624, 5624), ("utils/clflags.mli", 173, 5624, 5658), 0), 0, Tag1 ("Clflags", 135)), 0); (("default_inline_alloc_cost", 716), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -158), 0, (("utils/clflags.mli", 174, 5659, 5659), ("utils/clflags.mli", 174, 5659, 5694), 0), 0, Tag1 ("Clflags", 136)), 0); (("default_inline_prim_cost", 717), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -157), 0, (("utils/clflags.mli", 175, 5695, 5695), ("utils/clflags.mli", 175, 5695, 5729), 0), 0, Tag1 ("Clflags", 137)), 0); (("default_inline_branch_cost", 718), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -156), 0, (("utils/clflags.mli", 176, 5730, 5730), ("utils/clflags.mli", 176, 5730, 5766), 0), 0, Tag1 ("Clflags", 138)), 0); (("default_inline_indirect_cost", 719), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -155), 0, (("utils/clflags.mli", 177, 5767, 5767), ("utils/clflags.mli", 177, 5767, 5805), 0), 0, Tag1 ("Clflags", 139)), 0); (("default_inline_lifting_benefit", 720), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -154), 0, (("utils/clflags.mli", 178, 5806, 5806), ("utils/clflags.mli", 178, 5806, 5846), 0), 0, Tag1 ("Clflags", 140)), 0); (("inline_call_cost", 721), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 (Tag1 ((("Int_arg_helper", 605)), "parsed"), 0, (0)), 100000000, 0, -153)], (0)), 100000000, 0, -152), 0, (("utils/clflags.mli", 179, 5847, 5847), ("utils/clflags.mli", 179, 5847, 5895), 0), 0, Tag1 ("Clflags", 141)), 0); (("inline_alloc_cost", 722), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 (Tag1 ((("Int_arg_helper", 605)), "parsed"), 0, (0)), 100000000, 0, -151)], (0)), 100000000, 0, -150), 0, (("utils/clflags.mli", 180, 5896, 5896), ("utils/clflags.mli", 180, 5896, 5945), 0), 0, Tag1 ("Clflags", 142)), 0); (("inline_prim_cost", 723), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 (Tag1 ((("Int_arg_helper", 605)), "parsed"), 0, (0)), 100000000, 0, -149)], (0)), 100000000, 0, -148), 0, (("utils/clflags.mli", 181, 5946, 5946), ("utils/clflags.mli", 181, 5946, 5994), 0), 0, Tag1 ("Clflags", 143)), 0); (("inline_branch_cost", 724), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 (Tag1 ((("Int_arg_helper", 605)), "parsed"), 0, (0)), 100000000, 0, -147)], (0)), 100000000, 0, -146), 0, (("utils/clflags.mli", 182, 5995, 5995), ("utils/clflags.mli", 182, 5995, 6045), 0), 0, Tag1 ("Clflags", 144)), 0); (("inline_indirect_cost", 725), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 (Tag1 ((("Int_arg_helper", 605)), "parsed"), 0, (0)), 100000000, 0, -145)], (0)), 100000000, 0, -144), 0, (("utils/clflags.mli", 183, 6046, 6046), ("utils/clflags.mli", 183, 6046, 6098), 0), 0, Tag1 ("Clflags", 145)), 0); (("inline_lifting_benefit", 726), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 (Tag1 ((("Int_arg_helper", 605)), "parsed"), 0, (0)), 100000000, 0, -143)], (0)), 100000000, 0, -142), 0, (("utils/clflags.mli", 184, 6099, 6099), ("utils/clflags.mli", 184, 6099, 6153), 0), 0, Tag1 ("Clflags", 146)), 0); (("default_inline_branch_factor", 727), ((Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -141), 0, (("utils/clflags.mli", 185, 6154, 6154), ("utils/clflags.mli", 185, 6154, 6194), 0), 0, Tag1 ("Clflags", 147)), 0); (("inline_branch_factor", 728), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 (Tag1 ((("Float_arg_helper", 606)), "parsed"), 0, (0)), 100000000, 0, -140)], (0)), 100000000, 0, -139), 0, (("utils/clflags.mli", 186, 6195, 6195), ("utils/clflags.mli", 186, 6195, 6249), 0), 0, Tag1 ("Clflags", 148)), 0); (("dont_write_files", 729), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -138)], (0)), 100000000, 0, -137), 0, (("utils/clflags.mli", 187, 6250, 6250), ("utils/clflags.mli", 187, 6250, 6281), 0), 0, Tag1 ("Clflags", 149)), 0); (("std_include_flag", 730), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -136), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -135), 0), 100000000, 0, -134), 0, (("utils/clflags.mli", 188, 6282, 6282), ("utils/clflags.mli", 188, 6282, 6321), 0), 0, Tag1 ("Clflags", 150)), 0); (("std_include_dir", 731), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -133), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -132)], (0)), 100000000, 0, -131), 0), 100000000, 0, -130), 0, (("utils/clflags.mli", 189, 6322, 6322), ("utils/clflags.mli", 189, 6322, 6363), 0), 0, Tag1 ("Clflags", 151)), 0); (("shared", 732), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -129)], (0)), 100000000, 0, -128), 0, (("utils/clflags.mli", 190, 6364, 6364), ("utils/clflags.mli", 190, 6364, 6385), 0), 0, Tag1 ("Clflags", 152)), 0); (("dlcode", 733), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -127)], (0)), 100000000, 0, -126), 0, (("utils/clflags.mli", 191, 6386, 6386), ("utils/clflags.mli", 191, 6386, 6407), 0), 0, Tag1 ("Clflags", 153)), 0); (("pic_code", 734), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -125)], (0)), 100000000, 0, -124), 0, (("utils/clflags.mli", 192, 6408, 6408), ("utils/clflags.mli", 192, 6408, 6431), 0), 0, Tag1 ("Clflags", 154)), 0); (("runtime_variant", 735), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -123)], (0)), 100000000, 0, -122), 0, (("utils/clflags.mli", 193, 6432, 6432), ("utils/clflags.mli", 193, 6432, 6464), 0), 0, Tag1 ("Clflags", 155)), 0); (("with_runtime", 736), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -121)], (0)), 100000000, 0, -120), 0, (("utils/clflags.mli", 194, 6465, 6465), ("utils/clflags.mli", 194, 6465, 6492), 0), 0, Tag1 ("Clflags", 156)), 0); (("force_slash", 737), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -119)], (0)), 100000000, 0, -118), 0, (("utils/clflags.mli", 195, 6493, 6493), ("utils/clflags.mli", 195, 6493, 6519), 0), 0, Tag1 ("Clflags", 157)), 0); (("keep_docs", 738), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -117)], (0)), 100000000, 0, -116), 0, (("utils/clflags.mli", 196, 6520, 6520), ("utils/clflags.mli", 196, 6520, 6544), 0), 0, Tag1 ("Clflags", 158)), 0); (("keep_locs", 739), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -115)], (0)), 100000000, 0, -114), 0, (("utils/clflags.mli", 197, 6545, 6545), ("utils/clflags.mli", 197, 6545, 6569), 0), 0, Tag1 ("Clflags", 159)), 0); (("opaque", 740), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -113)], (0)), 100000000, 0, -112), 0, (("utils/clflags.mli", 198, 6570, 6570), ("utils/clflags.mli", 198, 6570, 6591), 0), 0, Tag1 ("Clflags", 160)), 0); (("profile_columns", 741), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Profile")), "column"), 0, (0)), 100000000, 0, -111)], (0)), 100000000, 0, -110)], (0)), 100000000, 0, -109), 0, (("utils/clflags.mli", 199, 6592, 6592), ("utils/clflags.mli", 199, 6592, 6637), 0), 0, Tag1 ("Clflags", 161)), 0); (("flambda_invariant_checks", 742), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -108)], (0)), 100000000, 0, -107), 0, (("utils/clflags.mli", 200, 6638, 6638), ("utils/clflags.mli", 200, 6638, 6677), 0), 0, Tag1 ("Clflags", 162)), 0); (("unbox_closures", 743), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -106)], (0)), 100000000, 0, -105), 0, (("utils/clflags.mli", 201, 6678, 6678), ("utils/clflags.mli", 201, 6678, 6707), 0), 0, Tag1 ("Clflags", 163)), 0); (("unbox_closures_factor", 744), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -104)], (0)), 100000000, 0, -103), 0, (("utils/clflags.mli", 202, 6708, 6708), ("utils/clflags.mli", 202, 6708, 6743), 0), 0, Tag1 ("Clflags", 164)), 0); (("default_unbox_closures_factor", 745), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -102), 0, (("utils/clflags.mli", 203, 6744, 6744), ("utils/clflags.mli", 203, 6744, 6783), 0), 0, Tag1 ("Clflags", 165)), 0); (("unbox_free_vars_of_closures", 746), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -101)], (0)), 100000000, 0, -100), 0, (("utils/clflags.mli", 204, 6784, 6784), ("utils/clflags.mli", 204, 6784, 6826), 0), 0, Tag1 ("Clflags", 166)), 0); (("unbox_specialised_args", 747), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -99)], (0)), 100000000, 0, -98), 0, (("utils/clflags.mli", 205, 6827, 6827), ("utils/clflags.mli", 205, 6827, 6864), 0), 0, Tag1 ("Clflags", 167)), 0); (("clambda_checks", 748), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -97)], (0)), 100000000, 0, -96), 0, (("utils/clflags.mli", 206, 6865, 6865), ("utils/clflags.mli", 206, 6865, 6894), 0), 0, Tag1 ("Clflags", 168)), 0); (("cmm_invariants", 749), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -95)], (0)), 100000000, 0, -94), 0, (("utils/clflags.mli", 207, 6895, 6895), ("utils/clflags.mli", 207, 6895, 6924), 0), 0, Tag1 ("Clflags", 169)), 0); (("default_inline_max_depth", 750), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -93), 0, (("utils/clflags.mli", 208, 6925, 6925), ("utils/clflags.mli", 208, 6925, 6959), 0), 0, Tag1 ("Clflags", 170)), 0); (("inline_max_depth", 751), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 (Tag1 ((("Int_arg_helper", 605)), "parsed"), 0, (0)), 100000000, 0, -92)], (0)), 100000000, 0, -91), 0, (("utils/clflags.mli", 209, 6960, 6960), ("utils/clflags.mli", 209, 6960, 7008), 0), 0, Tag1 ("Clflags", 171)), 0); (("remove_unused_arguments", 752), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -90)], (0)), 100000000, 0, -89), 0, (("utils/clflags.mli", 210, 7009, 7009), ("utils/clflags.mli", 210, 7009, 7047), 0), 0, Tag1 ("Clflags", 172)), 0); (("dump_flambda_verbose", 753), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -88)], (0)), 100000000, 0, -87), 0, (("utils/clflags.mli", 211, 7048, 7048), ("utils/clflags.mli", 211, 7048, 7083), 0), 0, Tag1 ("Clflags", 173)), 0); (("classic_inlining", 754), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -86)], (0)), 100000000, 0, -85), 0, (("utils/clflags.mli", 212, 7084, 7084), ("utils/clflags.mli", 212, 7084, 7115), 0), 0, Tag1 ("Clflags", 174)), 0); (("afl_instrument", 755), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -84)], (0)), 100000000, 0, -83), 0, (("utils/clflags.mli", 213, 7116, 7116), ("utils/clflags.mli", 213, 7116, 7145), 0), 0, Tag1 ("Clflags", 175)), 0); (("afl_inst_ratio", 756), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -82)], (0)), 100000000, 0, -81), 0, (("utils/clflags.mli", 214, 7146, 7146), ("utils/clflags.mli", 214, 7146, 7174), 0), 0, Tag1 ("Clflags", 176)), 0); (("function_sections", 757), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -80)], (0)), 100000000, 0, -79), 0, (("utils/clflags.mli", 215, 7175, 7175), ("utils/clflags.mli", 215, 7175, 7207), 0), 0, Tag1 ("Clflags", 177)), 0); (("all_passes", 758), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -78)], (0)), 100000000, 0, -77)], (0)), 100000000, 0, -76), 0, (("utils/clflags.mli", 217, 7209, 7209), ("utils/clflags.mli", 217, 7209, 7241), 0), 0, Tag1 ("Clflags", 178)), 0); (("dumped_pass", 759), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -75), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -74), 0), 100000000, 0, -73), 0, (("utils/clflags.mli", 218, 7242, 7242), ("utils/clflags.mli", 218, 7242, 7274), 0), 0, Tag1 ("Clflags", 179)), 0); (("set_dumped_pass", 760), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -72), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -71), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -70), 0), 100000000, 0, -69), 0), 100000000, 0, -68), 0, (("utils/clflags.mli", 219, 7275, 7275), ("utils/clflags.mli", 219, 7275, 7319), 0), 0, Tag1 ("Clflags", 180)), 0); (("dump_into_file", 761), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -67)], (0)), 100000000, 0, -66), 0, (("utils/clflags.mli", 221, 7321, 7321), ("utils/clflags.mli", 221, 7321, 7350), 0), 0, Tag1 ("Clflags", 181)), 0); (("dump_dir", 762), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -65)], (0)), 100000000, 0, -64)], (0)), 100000000, 0, -63), 0, (("utils/clflags.mli", 222, 7351, 7351), ("utils/clflags.mli", 222, 7351, 7383), 0), 0, Tag1 ("Clflags", 182)), 0); Tag1 (("env_reader", 763), ([((("a")), 100000000, 0, -57)], 1, [[(("parse", 464), 0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -58), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -57)], (0)), 100000000, 0, -56), 0), 100000000, 0, -55), (("utils/clflags.mli", 226, 7482, 7484), ("utils/clflags.mli", 226, 7482, 7512), 0), 0, Tag1 ("Clflags", 184)); (("print", 465), 0, (Tag1 (0, ((("a")), 100000000, 0, -57), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -60), 0), 100000000, 0, -59), (("utils/clflags.mli", 227, 7513, 7515), ("utils/clflags.mli", 227, 7513, 7536), 0), 0, Tag1 ("Clflags", 185)); (("usage", 466), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -61), (("utils/clflags.mli", 228, 7537, 7539), ("utils/clflags.mli", 228, 7537, 7554), 0), 0, Tag1 ("Clflags", 186)); (("env_var", 467), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -62), (("utils/clflags.mli", 229, 7555, 7557), ("utils/clflags.mli", 229, 7555, 7574), 0), 0, Tag1 ("Clflags", 187))]], 1, 0, [63], [0], 0, 0, (("utils/clflags.mli", 225, 7459, 7459), ("utils/clflags.mli", 230, 7575, 7576), 0), 0, 0, 0, Tag1 ("Clflags", 183)), 1, 0); (("color", 764), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Misc")), "Color"), "setting"), 0, (0)), 100000000, 0, -54)], (0)), 100000000, 0, -53)], (0)), 100000000, 0, -52), 0, (("utils/clflags.mli", 232, 7578, 7578), ("utils/clflags.mli", 232, 7578, 7619), 0), 0, Tag1 ("Clflags", 188)), 0); (("color_reader", 765), ((Tag3 ((("env_reader", 763)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Misc")), "Color"), "setting"), 0, (0)), 100000000, 0, -51)], (0)), 100000000, 0, -50), 0, (("utils/clflags.mli", 233, 7620, 7620), ("utils/clflags.mli", 233, 7620, 7668), 0), 0, Tag1 ("Clflags", 189)), 0); (("error_style", 766), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Misc")), "Error_style"), "setting"), 0, (0)), 100000000, 0, -49)], (0)), 100000000, 0, -48)], (0)), 100000000, 0, -47), 0, (("utils/clflags.mli", 235, 7670, 7670), ("utils/clflags.mli", 235, 7670, 7723), 0), 0, Tag1 ("Clflags", 190)), 0); (("error_style_reader", 767), ((Tag3 ((("env_reader", 763)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Misc")), "Error_style"), "setting"), 0, (0)), 100000000, 0, -46)], (0)), 100000000, 0, -45), 0, (("utils/clflags.mli", 236, 7724, 7724), ("utils/clflags.mli", 236, 7724, 7784), 0), 0, Tag1 ("Clflags", 191)), 0); (("unboxed_types", 768), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -44)], (0)), 100000000, 0, -43), 0, (("utils/clflags.mli", 238, 7786, 7786), ("utils/clflags.mli", 238, 7786, 7814), 0), 0, Tag1 ("Clflags", 192)), 0); (("insn_sched", 769), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -42)], (0)), 100000000, 0, -41), 0, (("utils/clflags.mli", 240, 7816, 7816), ("utils/clflags.mli", 240, 7816, 7841), 0), 0, Tag1 ("Clflags", 193)), 0); (("insn_sched_default", 770), ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -40), 0, (("utils/clflags.mli", 241, 7842, 7842), ("utils/clflags.mli", 241, 7842, 7871), 0), 0, Tag1 ("Clflags", 194)), 0); Tag3 (("Compiler_pass", 771), 0, (Tag1 ([Tag1 (("t", 791), (0, 0, Tag1 ([(("Parsing", 561), (0), 0, (("utils/clflags.mli", 244, 7900, 7911), ("utils/clflags.mli", 244, 7900, 7918), 0), 0, Tag1 ("Clflags", 196)); (("Typing", 562), (0), 0, (("utils/clflags.mli", 244, 7900, 7919), ("utils/clflags.mli", 244, 7900, 7927), 0), 0, Tag1 ("Clflags", 197)); (("Lambda", 563), (0), 0, (("utils/clflags.mli", 244, 7900, 7928), ("utils/clflags.mli", 244, 7900, 7936), 0), 0, Tag1 ("Clflags", 198)); (("Scheduling", 564), (0), 0, (("utils/clflags.mli", 244, 7900, 7937), ("utils/clflags.mli", 244, 7900, 7949), 0), 0, Tag1 ("Clflags", 199)); (("Emit", 565), (0), 0, (("utils/clflags.mli", 244, 7900, 7950), ("utils/clflags.mli", 244, 7900, 7956), 0), 0, Tag1 ("Clflags", 200))], 0), 1, 0, 0, 0, 0, 0, (("utils/clflags.mli", 244, 7900, 7902), ("utils/clflags.mli", 244, 7900, 7956), 0), 0, 1, 0, Tag1 ("Clflags", 195)), 1, 0); (("of_string", 792), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -484), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 791)), 0, (0)), 100000000, 0, -483)], (0)), 100000000, 0, -482), 0), 100000000, 0, -481), 0, (("utils/clflags.mli", 245, 7957, 7959), ("utils/clflags.mli", 245, 7957, 7993), 0), 0, Tag1 ("Clflags", 201)), 0); (("to_string", 793), ((Tag1 (0, (Tag3 ((("t", 791)), 0, (0)), 100000000, 0, -480), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -479), 0), 100000000, 0, -478), 0, (("utils/clflags.mli", 246, 7994, 7996), ("utils/clflags.mli", 246, 7994, 8023), 0), 0, Tag1 ("Clflags", 202)), 0); (("is_compilation_pass", 794), ((Tag1 (0, (Tag3 ((("t", 791)), 0, (0)), 100000000, 0, -477), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -476), 0), 100000000, 0, -475), 0, (("utils/clflags.mli", 247, 8024, 8026), ("utils/clflags.mli", 247, 8024, 8061), 0), 0, Tag1 ("Clflags", 203)), 0); (("available_pass_names", 795), ((Tag1 (("filter"), (Tag1 (0, (Tag3 ((("t", 791)), 0, (0)), 100000000, 0, -474), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -473), 0), 100000000, 0, -472), (Tag1 (("native"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -471), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -470)], (0)), 100000000, 0, -469), 0), 100000000, 0, -468), 0), 100000000, 0, -467), 0, (("utils/clflags.mli", 248, 8062, 8064), ("utils/clflags.mli", 248, 8062, 8139), 0), 0, Tag1 ("Clflags", 204)), 0); (("can_save_ir_after", 796), ((Tag1 (0, (Tag3 ((("t", 791)), 0, (0)), 100000000, 0, -466), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -465), 0), 100000000, 0, -464), 0, (("utils/clflags.mli", 249, 8140, 8142), ("utils/clflags.mli", 249, 8140, 8175), 0), 0, Tag1 ("Clflags", 205)), 0); (("compare", 797), ((Tag1 (0, (Tag3 ((("t", 791)), 0, (0)), 100000000, 0, -463), (Tag1 (0, (Tag3 ((("t", 791)), 0, (0)), 100000000, 0, -462), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -461), 0), 100000000, 0, -460), 0), 100000000, 0, -459), 0, (("utils/clflags.mli", 250, 8176, 8178), ("utils/clflags.mli", 250, 8176, 8205), 0), 0, Tag1 ("Clflags", 206)), 0); (("to_output_filename", 798), ((Tag1 (0, (Tag3 ((("t", 791)), 0, (0)), 100000000, 0, -458), (Tag1 (("prefix"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -457), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -456), 0), 100000000, 0, -455), 0), 100000000, 0, -454), 0, (("utils/clflags.mli", 251, 8206, 8208), ("utils/clflags.mli", 251, 8206, 8260), 0), 0, Tag1 ("Clflags", 207)), 0); (("of_input_filename", 799), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -453), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 791)), 0, (0)), 100000000, 0, -452)], (0)), 100000000, 0, -451), 0), 100000000, 0, -450), 0, (("utils/clflags.mli", 252, 8261, 8263), ("utils/clflags.mli", 252, 8261, 8304), 0), 0, Tag1 ("Clflags", 208)), 0)]), 0, (("utils/clflags.mli", 243, 7873, 7873), ("utils/clflags.mli", 253, 8305, 8308), 0), Tag1 ("Clflags", 209)), 0, 0); (("stop_after", 772), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("Compiler_pass", 771)), "t"), 0, (0)), 100000000, 0, -39)], (0)), 100000000, 0, -38)], (0)), 100000000, 0, -37), 0, (("utils/clflags.mli", 254, 8309, 8309), ("utils/clflags.mli", 254, 8309, 8352), 0), 0, Tag1 ("Clflags", 210)), 0); (("should_stop_after", 773), ((Tag1 (0, (Tag3 (Tag1 ((("Compiler_pass", 771)), "t"), 0, (0)), 100000000, 0, -36), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -35), 0), 100000000, 0, -34), 0, (("utils/clflags.mli", 255, 8353, 8353), ("utils/clflags.mli", 255, 8353, 8400), 0), 0, Tag1 ("Clflags", 211)), 0); (("set_save_ir_after", 774), ((Tag1 (0, (Tag3 (Tag1 ((("Compiler_pass", 771)), "t"), 0, (0)), 100000000, 0, -33), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -32), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -31), 0), 100000000, 0, -30), 0), 100000000, 0, -29), 0, (("utils/clflags.mli", 256, 8401, 8401), ("utils/clflags.mli", 256, 8401, 8456), 0), 0, Tag1 ("Clflags", 212)), 0); (("should_save_ir_after", 775), ((Tag1 (0, (Tag3 (Tag1 ((("Compiler_pass", 771)), "t"), 0, (0)), 100000000, 0, -28), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -27), 0), 100000000, 0, -26), 0, (("utils/clflags.mli", 257, 8457, 8457), ("utils/clflags.mli", 257, 8457, 8507), 0), 0, Tag1 ("Clflags", 213)), 0); (("arg_spec", 776), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -23); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Arg"), "spec"), 0, (0)), 100000000, 0, -24); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -25)]), 100000000, 0, -22)], (0)), 100000000, 0, -21)], (0)), 100000000, 0, -20), 0, (("utils/clflags.mli", 259, 8509, 8509), ("utils/clflags.mli", 259, 8509, 8561), 0), 0, Tag1 ("Clflags", 214)), 0); (("add_arguments", 777), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -19), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -16); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Arg"), "spec"), 0, (0)), 100000000, 0, -17); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -18)]), 100000000, 0, -15)], (0)), 100000000, 0, -14), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -13), 0), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("utils/clflags.mli", 266, 8850, 8850), ("utils/clflags.mli", 266, 8850, 8921), 0), 0, Tag1 ("Clflags", 215)), 0); (("create_usage_msg", 778), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("utils/clflags.mli", 269, 8994, 8994), ("utils/clflags.mli", 269, 8994, 9032), 0), 0, Tag1 ("Clflags", 216)), 0); (("print_arguments", 779), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -7), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("utils/clflags.mli", 271, 9096, 9096), ("utils/clflags.mli", 271, 9096, 9132), 0), 0, Tag1 ("Clflags", 217)), 0); (("reset_arguments", 780), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("utils/clflags.mli", 274, 9190, 9190), ("utils/clflags.mli", 274, 9190, 9224), 0), 0, Tag1 ("Clflags", 218)), 0)], "Clflags", [("Clflags", ("\162v\193G\199E|\029\023{\b\243]B\144;")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Arg", ("\024%=\206\198p\149Y\007\004\216,&\254#\207")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Profile", ("\201i\132?<qM\169\011\239@\142\202\182\023,")); ("Misc", ("*\026\026\234c\191\131\161\\\203\183\012O\252\153\198")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Build_path_prefix_map", ("y\028\167\207D\220\198\216\011\208\172\149\2416\bc"))], [(0)])

val reset_arguments : unit -> unit

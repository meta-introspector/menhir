val zero : int64
val one : int64
val minus_one : int64
external neg : int64 -> int64 = "%int64_neg"
external add : int64 -> int64 -> int64 = "%int64_add"
external sub : int64 -> int64 -> int64 = "%int64_sub"
external mul : int64 -> int64 -> int64 = "%int64_mul"
external div : int64 -> int64 -> int64 = "%int64_div"
val unsigned_div : int64 -> int64 -> int64
external rem : int64 -> int64 -> int64 = "%int64_mod"
val unsigned_rem : int64 -> int64 -> int64
val succ : int64 -> int64
val pred : int64 -> int64
val abs : int64 -> int64
val max_int : int64
val min_int : int64
external logand : int64 -> int64 -> int64 = "%int64_and"
external logor : int64 -> int64 -> int64 = "%int64_or"
external logxor : int64 -> int64 -> int64 = "%int64_xor"
val lognot : int64 -> int64
external shift_left : int64 -> int -> int64 = "%int64_lsl"
external shift_right : int64 -> int -> int64 = "%int64_asr"
external shift_right_logical : int64 -> int -> int64 = "%int64_lsr"
external of_int : int -> int64 = "%int64_of_int"
external to_int : int64 -> int = "%int64_to_int"
val unsigned_to_int : int64 -> int option
external of_float : float -> int64 = "caml_int64_of_float"
  "caml_int64_of_float_unboxed" [@@unboxed] [@@noalloc]
external to_float : int64 -> float = "caml_int64_to_float"
  "caml_int64_to_float_unboxed" [@@unboxed] [@@noalloc]
external of_int32 : int32 -> int64 = "%int64_of_int32"
external to_int32 : int64 -> int32 = "%int64_to_int32"
external of_nativeint : nativeint -> int64 = "%int64_of_nativeint"
external to_nativeint : int64 -> nativeint = "%int64_to_nativeint"
external of_string : string -> int64 = "caml_int64_of_string"
val of_string_opt : string -> int64 option
val to_string : int64 -> string
external bits_of_float : float -> int64 = "caml_int64_bits_of_float"
  "caml_int64_bits_of_float_unboxed" [@@unboxed] [@@noalloc]
external float_of_bits : int64 -> float = "caml_int64_float_of_bits"
  "caml_int64_float_of_bits_unboxed" [@@unboxed] [@@noalloc]
type t = int64
val compare : t -> t -> int
val unsigned_compare : t -> t -> int
val equal : t -> t -> bool
val min : t -> t -> t
val max : t -> t -> t
val seeded_hash : int -> t -> int("DEBUG:rule", [(("zero", 314), ((Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -164), 0, (("int64.mli", 37, 1780, 1780), ("int64.mli", 37, 1780, 1796), 0), 0, Tag1 ("Stdlib__Int64", 0)), 0); (("one", 315), ((Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -163), 0, (("int64.mli", 40, 1827, 1827), ("int64.mli", 40, 1827, 1842), 0), 0, Tag1 ("Stdlib__Int64", 1)), 0); (("minus_one", 316), ((Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -162), 0, (("int64.mli", 43, 1873, 1873), ("int64.mli", 43, 1873, 1894), 0), 0, Tag1 ("Stdlib__Int64", 2)), 0); (("neg", 317), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -161), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -160), 0), 100000000, 0, -159), (("%int64_neg", 1, 1, "", [0], 0)), (("int64.mli", 46, 1926, 1926), ("int64.mli", 46, 1926, 1970), 0), 0, Tag1 ("Stdlib__Int64", 3)), 0); (("add", 318), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -158), (Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -157), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -156), 0), 100000000, 0, -155), 0), 100000000, 0, -154), (("%int64_add", 2, 1, "", [0; 0], 0)), (("int64.mli", 49, 1995, 1995), ("int64.mli", 49, 1995, 2048), 0), 0, Tag1 ("Stdlib__Int64", 4)), 0); (("sub", 319), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -153), (Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -152), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -151), 0), 100000000, 0, -150), 0), 100000000, 0, -149), (("%int64_sub", 2, 1, "", [0; 0], 0)), (("int64.mli", 52, 2067, 2067), ("int64.mli", 52, 2067, 2120), 0), 0, Tag1 ("Stdlib__Int64", 5)), 0); (("mul", 320), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -148), (Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -147), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -146), 0), 100000000, 0, -145), 0), 100000000, 0, -144), (("%int64_mul", 2, 1, "", [0; 0], 0)), (("int64.mli", 55, 2142, 2142), ("int64.mli", 55, 2142, 2195), 0), 0, Tag1 ("Stdlib__Int64", 6)), 0); (("div", 321), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -143), (Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -142), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -141), 0), 100000000, 0, -140), 0), 100000000, 0, -139), (("%int64_div", 2, 1, "", [0; 0], 0)), (("int64.mli", 58, 2220, 2220), ("int64.mli", 58, 2220, 2273), 0), 0, Tag1 ("Stdlib__Int64", 7)), 0); (("unsigned_div", 322), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -138), (Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -137), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -136), 0), 100000000, 0, -135), 0), 100000000, 0, -134), 0, (("int64.mli", 64, 2468, 2468), ("int64.mli", 64, 2468, 2510), 0), 0, Tag1 ("Stdlib__Int64", 8)), 0); (("rem", 323), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -133), (Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -132), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -131), 0), 100000000, 0, -130), 0), 100000000, 0, -129), (("%int64_mod", 2, 1, "", [0; 0], 0)), (("int64.mli", 70, 2638, 2638), ("int64.mli", 70, 2638, 2691), 0), 0, Tag1 ("Stdlib__Int64", 9)), 0); (("unsigned_rem", 324), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -128), (Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -127), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -126), 0), 100000000, 0, -125), 0), 100000000, 0, -124), 0, (("int64.mli", 76, 2931, 2931), ("int64.mli", 76, 2931, 2973), 0), 0, Tag1 ("Stdlib__Int64", 10)), 0); (("succ", 325), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -123), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -122), 0), 100000000, 0, -121), 0, (("int64.mli", 82, 3101, 3101), ("int64.mli", 82, 3101, 3126), 0), 0, Tag1 ("Stdlib__Int64", 11)), 0); (("pred", 326), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -120), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -119), 0), 100000000, 0, -118), 0, (("int64.mli", 85, 3190, 3190), ("int64.mli", 85, 3190, 3215), 0), 0, Tag1 ("Stdlib__Int64", 12)), 0); (("abs", 327), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -117), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -116), 0), 100000000, 0, -115), 0, (("int64.mli", 88, 3281, 3281), ("int64.mli", 88, 3281, 3305), 0), 0, Tag1 ("Stdlib__Int64", 13)), 0); (("max_int", 328), ((Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -114), 0, (("int64.mli", 92, 3420, 3420), ("int64.mli", 92, 3420, 3439), 0), 0, Tag1 ("Stdlib__Int64", 14)), 0); (("min_int", 329), ((Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -113), 0, (("int64.mli", 95, 3503, 3503), ("int64.mli", 95, 3503, 3522), 0), 0, Tag1 ("Stdlib__Int64", 15)), 0); (("logand", 330), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -112), (Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -111), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -110), 0), 100000000, 0, -109), 0), 100000000, 0, -108), (("%int64_and", 2, 1, "", [0; 0], 0)), (("int64.mli", 98, 3583, 3583), ("int64.mli", 98, 3583, 3639), 0), 0, Tag1 ("Stdlib__Int64", 16)), 0); (("logor", 331), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -107), (Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -106), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -105), 0), 100000000, 0, -104), 0), 100000000, 0, -103), (("%int64_or", 2, 1, "", [0; 0], 0)), (("int64.mli", 101, 3669, 3669), ("int64.mli", 101, 3669, 3723), 0), 0, Tag1 ("Stdlib__Int64", 17)), 0); (("logxor", 332), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -102), (Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -101), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -100), 0), 100000000, 0, -99), 0), 100000000, 0, -98), (("%int64_xor", 2, 1, "", [0; 0], 0)), (("int64.mli", 104, 3752, 3752), ("int64.mli", 104, 3752, 3808), 0), 0, Tag1 ("Stdlib__Int64", 18)), 0); (("lognot", 333), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -97), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -96), 0), 100000000, 0, -95), 0, (("int64.mli", 107, 3847, 3847), ("int64.mli", 107, 3847, 3874), 0), 0, Tag1 ("Stdlib__Int64", 19)), 0); (("shift_left", 334), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -94), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -93), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -92), 0), 100000000, 0, -91), 0), 100000000, 0, -90), (("%int64_lsl", 2, 1, "", [0; 0], 0)), (("int64.mli", 110, 3909, 3909), ("int64.mli", 110, 3909, 3967), 0), 0, Tag1 ("Stdlib__Int64", 20)), 0); (("shift_right", 335), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -89), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -88), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -87), 0), 100000000, 0, -86), 0), 100000000, 0, -85), (("%int64_asr", 2, 1, "", [0; 0], 0)), (("int64.mli", 114, 4089, 4089), ("int64.mli", 114, 4089, 4148), 0), 0, Tag1 ("Stdlib__Int64", 21)), 0); (("shift_right_logical", 336), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -84), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -83), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -82), 0), 100000000, 0, -81), 0), 100000000, 0, -80), (("%int64_lsr", 2, 1, "", [0; 0], 0)), (("int64.mli", 120, 4375, 4375), ("int64.mli", 120, 4375, 4442), 0), 0, Tag1 ("Stdlib__Int64", 22)), 0); (("of_int", 337), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -79), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -78), 0), 100000000, 0, -77), (("%int64_of_int", 1, 1, "", [0], 0)), (("int64.mli", 126, 4676, 4676), ("int64.mli", 126, 4676, 4724), 0), 0, Tag1 ("Stdlib__Int64", 23)), 0); (("to_int", 338), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -76), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -75), 0), 100000000, 0, -74), (("%int64_to_int", 1, 1, "", [0], 0)), (("int64.mli", 130, 4812, 4812), ("int64.mli", 130, 4812, 4860), 0), 0, Tag1 ("Stdlib__Int64", 24)), 0); (("unsigned_to_int", 339), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -73), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -72)], (0)), 100000000, 0, -71), 0), 100000000, 0, -70), 0, (("int64.mli", 138, 5198, 5198), ("int64.mli", 138, 5198, 5239), 0), 0, Tag1 ("Stdlib__Int64", 25)), 0); (("of_float", 340), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -69), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -68), 0), 100000000, 0, -67), (("caml_int64_of_float", 1, 0, "caml_int64_of_float_unboxed", [1], (2))), (("int64.mli", 145, 5427, 5427), ("int64.mli", 147, 5518, 5543), 0), [(("unboxed", (("int64.mli", 147, 5518, 5523), ("int64.mli", 147, 5518, 5530), 0)), (0), (("int64.mli", 147, 5518, 5520), ("int64.mli", 147, 5518, 5531), 0)); (("noalloc", (("int64.mli", 147, 5518, 5535), ("int64.mli", 147, 5518, 5542), 0)), (0), (("int64.mli", 147, 5518, 5532), ("int64.mli", 147, 5518, 5543), 0))], Tag1 ("Stdlib__Int64", 26)), 0); (("to_float", 341), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -66), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -65), 0), 100000000, 0, -64), (("caml_int64_to_float", 1, 0, "caml_int64_to_float_unboxed", [(2)], 1)), (("int64.mli", 154, 5862, 5862), ("int64.mli", 156, 5953, 5978), 0), [(("unboxed", (("int64.mli", 156, 5953, 5958), ("int64.mli", 156, 5953, 5965), 0)), (0), (("int64.mli", 156, 5953, 5955), ("int64.mli", 156, 5953, 5966), 0)); (("noalloc", (("int64.mli", 156, 5953, 5970), ("int64.mli", 156, 5953, 5977), 0)), (0), (("int64.mli", 156, 5953, 5967), ("int64.mli", 156, 5953, 5978), 0))], Tag1 ("Stdlib__Int64", 27)), 0); (("of_int32", 342), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -63), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -62), 0), 100000000, 0, -61), (("%int64_of_int32", 1, 1, "", [0], 0)), (("int64.mli", 160, 6049, 6049), ("int64.mli", 160, 6049, 6103), 0), 0, Tag1 ("Stdlib__Int64", 28)), 0); (("to_int32", 343), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -60), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -59), 0), 100000000, 0, -58), (("%int64_to_int32", 1, 1, "", [0], 0)), (("int64.mli", 164, 6199, 6199), ("int64.mli", 164, 6199, 6253), 0), 0, Tag1 ("Stdlib__Int64", 29)), 0); (("of_nativeint", 344), ((Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -57), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -56), 0), 100000000, 0, -55), (("%int64_of_nativeint", 1, 1, "", [0], 0)), (("int64.mli", 170, 6452, 6452), ("int64.mli", 170, 6452, 6518), 0), 0, Tag1 ("Stdlib__Int64", 30)), 0); (("to_nativeint", 345), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -54), (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -53), 0), 100000000, 0, -52), (("%int64_to_nativeint", 1, 1, "", [0], 0)), (("int64.mli", 174, 6618, 6618), ("int64.mli", 174, 6618, 6684), 0), 0, Tag1 ("Stdlib__Int64", 31)), 0); (("of_string", 346), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -51), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -50), 0), 100000000, 0, -49), (("caml_int64_of_string", 1, 1, "", [0], 0)), (("int64.mli", 180, 6883, 6883), ("int64.mli", 180, 6883, 6944), 0), 0, Tag1 ("Stdlib__Int64", 32)), 0); (("of_string_opt", 347), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -48), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -47)], (0)), 100000000, 0, -46), 0), 100000000, 0, -45), 0, (("int64.mli", 197, 7677, 7677), ("int64.mli", 197, 7677, 7718), 0), 0, Tag1 ("Stdlib__Int64", 33)), 0); (("to_string", 348), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -44), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -43), 0), 100000000, 0, -42), 0, (("int64.mli", 201, 7802, 7802), ("int64.mli", 201, 7802, 7833), 0), 0, Tag1 ("Stdlib__Int64", 34)), 0); (("bits_of_float", 349), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -41), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -40), 0), 100000000, 0, -39), (("caml_int64_bits_of_float", 1, 0, "caml_int64_bits_of_float_unboxed", [1], (2))), (("int64.mli", 204, 7904, 7904), ("int64.mli", 206, 8010, 8035), 0), [(("unboxed", (("int64.mli", 206, 8010, 8015), ("int64.mli", 206, 8010, 8022), 0)), (0), (("int64.mli", 206, 8010, 8012), ("int64.mli", 206, 8010, 8023), 0)); (("noalloc", (("int64.mli", 206, 8010, 8027), ("int64.mli", 206, 8010, 8034), 0)), (0), (("int64.mli", 206, 8010, 8024), ("int64.mli", 206, 8010, 8035), 0))], Tag1 ("Stdlib__Int64", 35)), 0); (("float_of_bits", 350), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -38), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -37), 0), 100000000, 0, -36), (("caml_int64_float_of_bits", 1, 0, "caml_int64_float_of_bits_unboxed", [(2)], 1)), (("int64.mli", 213, 8318, 8318), ("int64.mli", 215, 8424, 8449), 0), [(("unboxed", (("int64.mli", 215, 8424, 8429), ("int64.mli", 215, 8424, 8436), 0)), (0), (("int64.mli", 215, 8424, 8426), ("int64.mli", 215, 8424, 8437), 0)); (("noalloc", (("int64.mli", 215, 8424, 8441), ("int64.mli", 215, 8424, 8448), 0)), (0), (("int64.mli", 215, 8424, 8438), ("int64.mli", 215, 8424, 8449), 0))], Tag1 ("Stdlib__Int64", 36)), 0); Tag1 (("t", 351), (0, 0, 0, 1, ((Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -35)), 0, 0, 0, 0, (("int64.mli", 220, 8619, 8619), ("int64.mli", 220, 8619, 8633), 0), 0, 0, 0, Tag1 ("Stdlib__Int64", 37)), 1, 0); (("compare", 352), ((Tag1 (0, (Tag3 ((("t", 351)), 0, (0)), 100000000, 0, -34), (Tag1 (0, (Tag3 ((("t", 351)), 0, (0)), 100000000, 0, -33), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -32), 0), 100000000, 0, -31), 0), 100000000, 0, -30), 0, (("int64.mli", 223, 8684, 8684), ("int64.mli", 223, 8684, 8710), 0), 0, Tag1 ("Stdlib__Int64", 38)), 0); (("unsigned_compare", 353), ((Tag1 (0, (Tag3 ((("t", 351)), 0, (0)), 100000000, 0, -29), (Tag1 (0, (Tag3 ((("t", 351)), 0, (0)), 100000000, 0, -28), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -27), 0), 100000000, 0, -26), 0), 100000000, 0, -25), 0, (("int64.mli", 229, 8972, 8972), ("int64.mli", 229, 8972, 9007), 0), 0, Tag1 ("Stdlib__Int64", 39)), 0); (("equal", 354), ((Tag1 (0, (Tag3 ((("t", 351)), 0, (0)), 100000000, 0, -24), (Tag1 (0, (Tag3 ((("t", 351)), 0, (0)), 100000000, 0, -23), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0), 100000000, 0, -20), 0, (("int64.mli", 235, 9128, 9128), ("int64.mli", 235, 9128, 9153), 0), 0, Tag1 ("Stdlib__Int64", 40)), 0); (("min", 355), ((Tag1 (0, (Tag3 ((("t", 351)), 0, (0)), 100000000, 0, -19), (Tag1 (0, (Tag3 ((("t", 351)), 0, (0)), 100000000, 0, -18), (Tag3 ((("t", 351)), 0, (0)), 100000000, 0, -17), 0), 100000000, 0, -16), 0), 100000000, 0, -15), 0, (("int64.mli", 239, 9209, 9209), ("int64.mli", 239, 9209, 9229), 0), 0, Tag1 ("Stdlib__Int64", 41)), 0); (("max", 356), ((Tag1 (0, (Tag3 ((("t", 351)), 0, (0)), 100000000, 0, -14), (Tag1 (0, (Tag3 ((("t", 351)), 0, (0)), 100000000, 0, -13), (Tag3 ((("t", 351)), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0), 100000000, 0, -10), 0, (("int64.mli", 244, 9295, 9295), ("int64.mli", 244, 9295, 9315), 0), 0, Tag1 ("Stdlib__Int64", 42)), 0); (("seeded_hash", 357), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -9), (Tag1 (0, (Tag3 ((("t", 351)), 0, (0)), 100000000, 0, -8), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("int64.mli", 249, 9382, 9382), ("int64.mli", 249, 9382, 9415), 0), 0, Tag1 ("Stdlib__Int64", 43)), 0); (("hash", 358), ((Tag1 (0, (Tag3 ((("t", 351)), 0, (0)), 100000000, 0, -4), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("int64.mli", 256, 9638, 9638), ("int64.mli", 256, 9638, 9657), 0), 0, Tag1 ("Stdlib__Int64", 44)), 0)], "Stdlib__Int64", [("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

val hash : t -> int

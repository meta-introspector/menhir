module type S =
  sig
    type 'a t = unit -> 'a node
    and 'a node = 'a Stdcompat__init.seq_node = Nil | Cons of 'a * 'a t
    exception Forced_twice
    val is_empty : 'a t -> bool
    val uncons : 'a t -> ('a * 'a t) option
    val length : 'a t -> int
    val iteri : (int -> 'a -> unit) -> 'a t -> unit
    val fold_lefti : ('b -> int -> 'a -> 'b) -> 'b -> 'a t -> 'b
    val for_all : ('a -> bool) -> 'a t -> bool
    val exists : ('a -> bool) -> 'a t -> bool
    val find : ('a -> bool) -> 'a t -> 'a option
    val find_map : ('a -> 'b option) -> 'a t -> 'b option
    val iter2 : ('a -> 'b -> unit) -> 'a t -> 'b t -> unit
    val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b t -> 'c t -> 'a
    val for_all2 : ('a -> 'b -> bool) -> 'a t -> 'b t -> bool
    val exists2 : ('a -> 'b -> bool) -> 'a t -> 'b t -> bool
    val equal : ('a -> 'b -> bool) -> 'a t -> 'b t -> bool
    val compare : ('a -> 'b -> int) -> 'a t -> 'b t -> int
    val init : int -> (int -> 'a) -> 'a t
    val repeat : 'a -> 'a t
    val forever : (unit -> 'a) -> 'a t
    val cycle : 'a t -> 'a t
    val iterate : ('a -> 'a) -> 'a -> 'a t
    val mapi : (int -> 'a -> 'b) -> 'a t -> 'b t
    val scan : ('b -> 'a -> 'b) -> 'b -> 'a t -> 'b t
    val take : int -> 'a t -> 'a t
    val drop : int -> 'a t -> 'a t
    val take_while : ('a -> bool) -> 'a t -> 'a t
    val drop_while : ('a -> bool) -> 'a t -> 'a t
    val group : ('a -> 'a -> bool) -> 'a t -> 'a t t
    val memoize : 'a t -> 'a t
    val once : 'a t -> 'a t
    val transpose : 'a t t -> 'a t t
    val zip : 'a t -> 'b t -> ('a * 'b) t
    val map2 : ('a -> 'b -> 'c) -> 'a t -> 'b t -> 'c t
    val interleave : 'a t -> 'a t -> 'a t
    val sorted_merge : ('a -> 'a -> int) -> 'a t -> 'a t -> 'a t
    val product : 'a t -> 'b t -> ('a * 'b) t
    val map_product : ('a -> 'b -> 'c) -> 'a t -> 'b t -> 'c t
    val unzip : ('a * 'b) t -> 'a t * 'b t
    val split : ('a * 'b) t -> 'a t * 'b t
    val partition_map : ('a -> ('b, 'c) Either.t) -> 'a t -> 'b t * 'c t
    val partition : ('a -> bool) -> 'a t -> 'a t * 'a t
    val of_dispenser : (unit -> 'a option) -> 'a t
    val to_dispenser : 'a t -> unit -> 'a option
    val ints : int -> int t
    val concat : 'a t t -> 'a t
    val concat_map : ('a -> 'b t) -> 'a t -> 'b t
    val cons : 'a -> 'a t -> 'a t
    val unfold : ('b -> ('a * 'b) option) -> 'b -> 'a t
    val append : 'a t -> 'a t -> 'a t
    val iter : ('a -> unit) -> 'a t -> unit
    val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b t -> 'a
    val empty : 'a t
    val return : 'a -> 'a t
    val map : ('a -> 'b) -> 'a t -> 'b t
    val filter : ('a -> bool) -> 'a t -> 'a t
    val filter_map : ('a -> 'b option) -> 'a t -> 'b t
    val flat_map : ('a -> 'b t) -> 'a t -> 'b t("DEBUG:rule", [Tag4 (("S", 554), ((Tag1 ([Tag1 (("t", 555), ([((("a")), 100000000, 0, -415)], 1, 0, 1, ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -416), (Tag3 ((("node", 556)), [((("a")), 100000000, 0, -415)], (0)), 100000000, 0, -414), 0), 100000000, 0, -413)), [25], [0], 0, 0, (("stdcompat__seq_s.mli", 3, 21, 21), ("stdcompat__seq_s.mli", 3, 21, 48), 0), 0, 0, 0, Tag1 ("Stdcompat__seq_s", 0)), 1, 0); Tag1 (("node", 556), ([((("a")), 100000000, 0, -411)], 1, Tag1 ([(("Nil", 271), (0), 0, (("stdcompat__seq_s.mli", 5, 93, 95), ("stdcompat__seq_s.mli", 5, 93, 100), 0), 0, Tag1 ("Stdcompat__seq_s", 2)); (("Cons", 272), ([((("a")), 100000000, 0, -411); (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -411)], (0)), 100000000, 0, -412)]), 0, (("stdcompat__seq_s.mli", 6, 101, 103), ("stdcompat__seq_s.mli", 6, 101, 122), 0), 0, Tag1 ("Stdcompat__seq_s", 3))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Stdcompat__init")), "seq_node"), [((("a")), 100000000, 0, -411)], (0)), 100000000, 0, -410)), [25], [0], 0, 0, (("stdcompat__seq_s.mli", 4, 49, 49), ("stdcompat__seq_s.mli", 6, 101, 122), 0), 0, 0, 0, Tag1 ("Stdcompat__seq_s", 1)), 2, 0); Tag2 (("Forced_twice", 557), ((Tag3 ("exn", 7)), 0, (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Stdcompat__seq_s", 4)), 2, 0); (("is_empty", 558), ((Tag1 (0, (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -409)], (0)), 100000000, 0, -408), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -407), 0), 100000000, 0, -406), 0, (("stdcompat__seq_s.mli", 24, 408, 408), ("stdcompat__seq_s.mli", 24, 408, 435), 0), 0, Tag1 ("Stdcompat__seq_s", 5)), 0); (("uncons", 559), ((Tag1 (0, (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -403)], (0)), 100000000, 0, -405), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([((("a")), 100000000, 0, -403); (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -403)], (0)), 100000000, 0, -404)]), 100000000, 0, -402)], (0)), 100000000, 0, -401), 0), 100000000, 0, -400), 0, (("stdcompat__seq_s.mli", 27, 487, 487), ("stdcompat__seq_s.mli", 27, 487, 526), 0), 0, Tag1 ("Stdcompat__seq_s", 6)), 0); (("length", 560), ((Tag1 (0, (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -399)], (0)), 100000000, 0, -398), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -397), 0), 100000000, 0, -396), 0, (("stdcompat__seq_s.mli", 30, 590, 590), ("stdcompat__seq_s.mli", 30, 590, 614), 0), 0, Tag1 ("Stdcompat__seq_s", 7)), 0); (("iteri", 561), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -395), (Tag1 (0, ((("a")), 100000000, 0, -391), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -394), 0), 100000000, 0, -393), 0), 100000000, 0, -392), (Tag1 (0, (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -391)], (0)), 100000000, 0, -390), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -389), 0), 100000000, 0, -388), 0), 100000000, 0, -387), 0, (("stdcompat__seq_s.mli", 33, 663, 663), ("stdcompat__seq_s.mli", 33, 663, 710), 0), 0, Tag1 ("Stdcompat__seq_s", 8)), 0); (("fold_lefti", 562), ((Tag1 (0, (Tag1 (0, ((("b")), 100000000, 0, -380), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -386), (Tag1 (0, ((("a")), 100000000, 0, -382), ((("b")), 100000000, 0, -380), 0), 100000000, 0, -385), 0), 100000000, 0, -384), 0), 100000000, 0, -383), (Tag1 (0, ((("b")), 100000000, 0, -380), (Tag1 (0, (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -382)], (0)), 100000000, 0, -381), ((("b")), 100000000, 0, -380), 0), 100000000, 0, -379), 0), 100000000, 0, -378), 0), 100000000, 0, -377), 0, (("stdcompat__seq_s.mli", 36, 782, 782), ("stdcompat__seq_s.mli", 36, 782, 842), 0), 0, Tag1 ("Stdcompat__seq_s", 9)), 0); (("for_all", 563), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -374), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -376), 0), 100000000, 0, -375), (Tag1 (0, (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -374)], (0)), 100000000, 0, -373), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -372), 0), 100000000, 0, -371), 0), 100000000, 0, -370), 0, (("stdcompat__seq_s.mli", 40, 931, 931), ("stdcompat__seq_s.mli", 40, 931, 973), 0), 0, Tag1 ("Stdcompat__seq_s", 10)), 0); (("exists", 564), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -367), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -369), 0), 100000000, 0, -368), (Tag1 (0, (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -367)], (0)), 100000000, 0, -366), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -365), 0), 100000000, 0, -364), 0), 100000000, 0, -363), 0, (("stdcompat__seq_s.mli", 43, 1040, 1040), ("stdcompat__seq_s.mli", 43, 1040, 1081), 0), 0, Tag1 ("Stdcompat__seq_s", 11)), 0); (("find", 565), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -359), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -362), 0), 100000000, 0, -361), (Tag1 (0, (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -359)], (0)), 100000000, 0, -360), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -359)], (0)), 100000000, 0, -358), 0), 100000000, 0, -357), 0), 100000000, 0, -356), 0, (("stdcompat__seq_s.mli", 46, 1147, 1147), ("stdcompat__seq_s.mli", 46, 1147, 1191), 0), 0, Tag1 ("Stdcompat__seq_s", 12)), 0); (("find_map", 566), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -353), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -351)], (0)), 100000000, 0, -355), 0), 100000000, 0, -354), (Tag1 (0, (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -353)], (0)), 100000000, 0, -352), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -351)], (0)), 100000000, 0, -350), 0), 100000000, 0, -349), 0), 100000000, 0, -348), 0, (("stdcompat__seq_s.mli", 49, 1260, 1260), ("stdcompat__seq_s.mli", 49, 1260, 1313), 0), 0, Tag1 ("Stdcompat__seq_s", 13)), 0); (("iter2", 567), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -344), (Tag1 (0, ((("b")), 100000000, 0, -342), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -347), 0), 100000000, 0, -346), 0), 100000000, 0, -345), (Tag1 (0, (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -344)], (0)), 100000000, 0, -343), (Tag1 (0, (Tag3 ((("t", 555)), [((("b")), 100000000, 0, -342)], (0)), 100000000, 0, -341), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -340), 0), 100000000, 0, -339), 0), 100000000, 0, -338), 0), 100000000, 0, -337), 0, (("stdcompat__seq_s.mli", 52, 1391, 1391), ("stdcompat__seq_s.mli", 52, 1391, 1445), 0), 0, Tag1 ("Stdcompat__seq_s", 14)), 0); (("fold_left2", 568), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -329), (Tag1 (0, ((("b")), 100000000, 0, -333), (Tag1 (0, ((("c")), 100000000, 0, -331), ((("a")), 100000000, 0, -329), 0), 100000000, 0, -336), 0), 100000000, 0, -335), 0), 100000000, 0, -334), (Tag1 (0, ((("a")), 100000000, 0, -329), (Tag1 (0, (Tag3 ((("t", 555)), [((("b")), 100000000, 0, -333)], (0)), 100000000, 0, -332), (Tag1 (0, (Tag3 ((("t", 555)), [((("c")), 100000000, 0, -331)], (0)), 100000000, 0, -330), ((("a")), 100000000, 0, -329), 0), 100000000, 0, -328), 0), 100000000, 0, -327), 0), 100000000, 0, -326), 0), 100000000, 0, -325), 0, (("stdcompat__seq_s.mli", 55, 1524, 1524), ("stdcompat__seq_s.mli", 55, 1524, 1591), 0), 0, Tag1 ("Stdcompat__seq_s", 15)), 0); (("for_all2", 569), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -321), (Tag1 (0, ((("b")), 100000000, 0, -319), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -324), 0), 100000000, 0, -323), 0), 100000000, 0, -322), (Tag1 (0, (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -321)], (0)), 100000000, 0, -320), (Tag1 (0, (Tag3 ((("t", 555)), [((("b")), 100000000, 0, -319)], (0)), 100000000, 0, -318), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -317), 0), 100000000, 0, -316), 0), 100000000, 0, -315), 0), 100000000, 0, -314), 0, (("stdcompat__seq_s.mli", 59, 1687, 1687), ("stdcompat__seq_s.mli", 59, 1687, 1744), 0), 0, Tag1 ("Stdcompat__seq_s", 16)), 0); (("exists2", 570), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -310), (Tag1 (0, ((("b")), 100000000, 0, -308), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -313), 0), 100000000, 0, -312), 0), 100000000, 0, -311), (Tag1 (0, (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -310)], (0)), 100000000, 0, -309), (Tag1 (0, (Tag3 ((("t", 555)), [((("b")), 100000000, 0, -308)], (0)), 100000000, 0, -307), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -306), 0), 100000000, 0, -305), 0), 100000000, 0, -304), 0), 100000000, 0, -303), 0, (("stdcompat__seq_s.mli", 62, 1826, 1826), ("stdcompat__seq_s.mli", 62, 1826, 1882), 0), 0, Tag1 ("Stdcompat__seq_s", 17)), 0); (("equal", 571), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -299), (Tag1 (0, ((("b")), 100000000, 0, -297), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -302), 0), 100000000, 0, -301), 0), 100000000, 0, -300), (Tag1 (0, (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -299)], (0)), 100000000, 0, -298), (Tag1 (0, (Tag3 ((("t", 555)), [((("b")), 100000000, 0, -297)], (0)), 100000000, 0, -296), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -295), 0), 100000000, 0, -294), 0), 100000000, 0, -293), 0), 100000000, 0, -292), 0, (("stdcompat__seq_s.mli", 65, 1963, 1963), ("stdcompat__seq_s.mli", 65, 1963, 2017), 0), 0, Tag1 ("Stdcompat__seq_s", 18)), 0); (("compare", 572), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -288), (Tag1 (0, ((("b")), 100000000, 0, -286), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -291), 0), 100000000, 0, -290), 0), 100000000, 0, -289), (Tag1 (0, (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -288)], (0)), 100000000, 0, -287), (Tag1 (0, (Tag3 ((("t", 555)), [((("b")), 100000000, 0, -286)], (0)), 100000000, 0, -285), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -284), 0), 100000000, 0, -283), 0), 100000000, 0, -282), 0), 100000000, 0, -281), 0, (("stdcompat__seq_s.mli", 68, 2096, 2096), ("stdcompat__seq_s.mli", 68, 2096, 2150), 0), 0, Tag1 ("Stdcompat__seq_s", 19)), 0); (("init", 573), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -280), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -279), ((("a")), 100000000, 0, -277), 0), 100000000, 0, -278), (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -277)], (0)), 100000000, 0, -276), 0), 100000000, 0, -275), 0), 100000000, 0, -274), 0, (("stdcompat__seq_s.mli", 71, 2229, 2229), ("stdcompat__seq_s.mli", 71, 2229, 2266), 0), 0, Tag1 ("Stdcompat__seq_s", 20)), 0); (("repeat", 574), ((Tag1 (0, ((("a")), 100000000, 0, -273), (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -273)], (0)), 100000000, 0, -272), 0), 100000000, 0, -271), 0, (("stdcompat__seq_s.mli", 74, 2328, 2328), ("stdcompat__seq_s.mli", 74, 2328, 2351), 0), 0, Tag1 ("Stdcompat__seq_s", 21)), 0); (("forever", 575), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -270), ((("a")), 100000000, 0, -268), 0), 100000000, 0, -269), (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -268)], (0)), 100000000, 0, -267), 0), 100000000, 0, -266), 0, (("stdcompat__seq_s.mli", 77, 2399, 2399), ("stdcompat__seq_s.mli", 77, 2399, 2433), 0), 0, Tag1 ("Stdcompat__seq_s", 22)), 0); (("cycle", 576), ((Tag1 (0, (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -264)], (0)), 100000000, 0, -265), (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -264)], (0)), 100000000, 0, -263), 0), 100000000, 0, -262), 0, (("stdcompat__seq_s.mli", 80, 2492, 2492), ("stdcompat__seq_s.mli", 80, 2492, 2516), 0), 0, Tag1 ("Stdcompat__seq_s", 23)), 0); (("iterate", 577), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -260), ((("a")), 100000000, 0, -260), 0), 100000000, 0, -261), (Tag1 (0, ((("a")), 100000000, 0, -260), (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -260)], (0)), 100000000, 0, -259), 0), 100000000, 0, -258), 0), 100000000, 0, -257), 0, (("stdcompat__seq_s.mli", 83, 2565, 2565), ("stdcompat__seq_s.mli", 83, 2565, 2603), 0), 0, Tag1 ("Stdcompat__seq_s", 24)), 0); (("mapi", 578), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -256), (Tag1 (0, ((("a")), 100000000, 0, -253), ((("b")), 100000000, 0, -251), 0), 100000000, 0, -255), 0), 100000000, 0, -254), (Tag1 (0, (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -253)], (0)), 100000000, 0, -252), (Tag3 ((("t", 555)), [((("b")), 100000000, 0, -251)], (0)), 100000000, 0, -250), 0), 100000000, 0, -249), 0), 100000000, 0, -248), 0, (("stdcompat__seq_s.mli", 86, 2666, 2666), ("stdcompat__seq_s.mli", 86, 2666, 2710), 0), 0, Tag1 ("Stdcompat__seq_s", 25)), 0); (("scan", 579), ((Tag1 (0, (Tag1 (0, ((("b")), 100000000, 0, -243), (Tag1 (0, ((("a")), 100000000, 0, -245), ((("b")), 100000000, 0, -243), 0), 100000000, 0, -247), 0), 100000000, 0, -246), (Tag1 (0, ((("b")), 100000000, 0, -243), (Tag1 (0, (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -245)], (0)), 100000000, 0, -244), (Tag3 ((("t", 555)), [((("b")), 100000000, 0, -243)], (0)), 100000000, 0, -242), 0), 100000000, 0, -241), 0), 100000000, 0, -240), 0), 100000000, 0, -239), 0, (("stdcompat__seq_s.mli", 89, 2779, 2779), ("stdcompat__seq_s.mli", 89, 2779, 2828), 0), 0, Tag1 ("Stdcompat__seq_s", 26)), 0); (("take", 580), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -238), (Tag1 (0, (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -236)], (0)), 100000000, 0, -237), (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -236)], (0)), 100000000, 0, -235), 0), 100000000, 0, -234), 0), 100000000, 0, -233), 0, (("stdcompat__seq_s.mli", 92, 2902, 2902), ("stdcompat__seq_s.mli", 92, 2902, 2932), 0), 0, Tag1 ("Stdcompat__seq_s", 27)), 0); (("drop", 581), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -232), (Tag1 (0, (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -230)], (0)), 100000000, 0, -231), (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -230)], (0)), 100000000, 0, -229), 0), 100000000, 0, -228), 0), 100000000, 0, -227), 0, (("stdcompat__seq_s.mli", 95, 2987, 2987), ("stdcompat__seq_s.mli", 95, 2987, 3017), 0), 0, Tag1 ("Stdcompat__seq_s", 28)), 0); (("take_while", 582), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -223), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -226), 0), 100000000, 0, -225), (Tag1 (0, (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -223)], (0)), 100000000, 0, -224), (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -223)], (0)), 100000000, 0, -222), 0), 100000000, 0, -221), 0), 100000000, 0, -220), 0, (("stdcompat__seq_s.mli", 98, 3072, 3072), ("stdcompat__seq_s.mli", 98, 3072, 3117), 0), 0, Tag1 ("Stdcompat__seq_s", 29)), 0); (("drop_while", 583), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -216), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -219), 0), 100000000, 0, -218), (Tag1 (0, (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -216)], (0)), 100000000, 0, -217), (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -216)], (0)), 100000000, 0, -215), 0), 100000000, 0, -214), 0), 100000000, 0, -213), 0, (("stdcompat__seq_s.mli", 101, 3187, 3187), ("stdcompat__seq_s.mli", 101, 3187, 3232), 0), 0, Tag1 ("Stdcompat__seq_s", 30)), 0); (("group", 584), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -208), (Tag1 (0, ((("a")), 100000000, 0, -208), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -212), 0), 100000000, 0, -211), 0), 100000000, 0, -210), (Tag1 (0, (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -208)], (0)), 100000000, 0, -209), (Tag3 ((("t", 555)), [(Tag3 ((("t", 555)), [((("a")), 100000000, 0, -208)], (0)), 100000000, 0, -207)], (0)), 100000000, 0, -206), 0), 100000000, 0, -205), 0), 100000000, 0, -204), 0, (("stdcompat__seq_s.mli", 104, 3302, 3302), ("stdcompat__seq_s.mli", 104, 3302, 3350), 0), 0, Tag1 ("Stdcompat__seq_s", 31)), 0); (("memoize", 585), ((Tag1 (0, (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -202)], (0)), 100000000, 0, -203), (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -202)], (0)), 100000000, 0, -201), 0), 100000000, 0, -200), 0, (("stdcompat__seq_s.mli", 107, 3423, 3423), ("stdcompat__seq_s.mli", 107, 3423, 3449), 0), 0, Tag1 ("Stdcompat__seq_s", 32)), 0); (("once", 586), ((Tag1 (0, (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -198)], (0)), 100000000, 0, -199), (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -198)], (0)), 100000000, 0, -197), 0), 100000000, 0, -196), 0, (("stdcompat__seq_s.mli", 110, 3500, 3500), ("stdcompat__seq_s.mli", 110, 3500, 3523), 0), 0, Tag1 ("Stdcompat__seq_s", 33)), 0); (("transpose", 587), ((Tag1 (0, (Tag3 ((("t", 555)), [(Tag3 ((("t", 555)), [((("a")), 100000000, 0, -193)], (0)), 100000000, 0, -195)], (0)), 100000000, 0, -194), (Tag3 ((("t", 555)), [(Tag3 ((("t", 555)), [((("a")), 100000000, 0, -193)], (0)), 100000000, 0, -192)], (0)), 100000000, 0, -191), 0), 100000000, 0, -190), 0, (("stdcompat__seq_s.mli", 113, 3571, 3571), ("stdcompat__seq_s.mli", 113, 3571, 3603), 0), 0, Tag1 ("Stdcompat__seq_s", 34)), 0); (("zip", 588), ((Tag1 (0, (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -186)], (0)), 100000000, 0, -189), (Tag1 (0, (Tag3 ((("t", 555)), [((("b")), 100000000, 0, -187)], (0)), 100000000, 0, -188), (Tag3 ((("t", 555)), [(Tag2 ([((("a")), 100000000, 0, -186); ((("b")), 100000000, 0, -187)]), 100000000, 0, -185)], (0)), 100000000, 0, -184), 0), 100000000, 0, -183), 0), 100000000, 0, -182), 0, (("stdcompat__seq_s.mli", 116, 3660, 3660), ("stdcompat__seq_s.mli", 116, 3660, 3697), 0), 0, Tag1 ("Stdcompat__seq_s", 35)), 0); (("map2", 589), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -179), (Tag1 (0, ((("b")), 100000000, 0, -177), ((("c")), 100000000, 0, -175), 0), 100000000, 0, -181), 0), 100000000, 0, -180), (Tag1 (0, (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -179)], (0)), 100000000, 0, -178), (Tag1 (0, (Tag3 ((("t", 555)), [((("b")), 100000000, 0, -177)], (0)), 100000000, 0, -176), (Tag3 ((("t", 555)), [((("c")), 100000000, 0, -175)], (0)), 100000000, 0, -174), 0), 100000000, 0, -173), 0), 100000000, 0, -172), 0), 100000000, 0, -171), 0, (("stdcompat__seq_s.mli", 119, 3759, 3759), ("stdcompat__seq_s.mli", 119, 3759, 3810), 0), 0, Tag1 ("Stdcompat__seq_s", 36)), 0); (("interleave", 590), ((Tag1 (0, (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -168)], (0)), 100000000, 0, -170), (Tag1 (0, (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -168)], (0)), 100000000, 0, -169), (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -168)], (0)), 100000000, 0, -167), 0), 100000000, 0, -166), 0), 100000000, 0, -165), 0, (("stdcompat__seq_s.mli", 122, 3886, 3886), ("stdcompat__seq_s.mli", 122, 3886, 3923), 0), 0, Tag1 ("Stdcompat__seq_s", 37)), 0); (("sorted_merge", 591), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -159), (Tag1 (0, ((("a")), 100000000, 0, -159), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -164), 0), 100000000, 0, -163), 0), 100000000, 0, -162), (Tag1 (0, (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -159)], (0)), 100000000, 0, -161), (Tag1 (0, (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -159)], (0)), 100000000, 0, -160), (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -159)], (0)), 100000000, 0, -158), 0), 100000000, 0, -157), 0), 100000000, 0, -156), 0), 100000000, 0, -155), 0, (("stdcompat__seq_s.mli", 125, 3985, 3985), ("stdcompat__seq_s.mli", 125, 3985, 4045), 0), 0, Tag1 ("Stdcompat__seq_s", 38)), 0); (("product", 592), ((Tag1 (0, (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -151)], (0)), 100000000, 0, -154), (Tag1 (0, (Tag3 ((("t", 555)), [((("b")), 100000000, 0, -152)], (0)), 100000000, 0, -153), (Tag3 ((("t", 555)), [(Tag2 ([((("a")), 100000000, 0, -151); ((("b")), 100000000, 0, -152)]), 100000000, 0, -150)], (0)), 100000000, 0, -149), 0), 100000000, 0, -148), 0), 100000000, 0, -147), 0, (("stdcompat__seq_s.mli", 129, 4134, 4134), ("stdcompat__seq_s.mli", 129, 4134, 4175), 0), 0, Tag1 ("Stdcompat__seq_s", 39)), 0); (("map_product", 593), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -144), (Tag1 (0, ((("b")), 100000000, 0, -142), ((("c")), 100000000, 0, -140), 0), 100000000, 0, -146), 0), 100000000, 0, -145), (Tag1 (0, (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -144)], (0)), 100000000, 0, -143), (Tag1 (0, (Tag3 ((("t", 555)), [((("b")), 100000000, 0, -142)], (0)), 100000000, 0, -141), (Tag3 ((("t", 555)), [((("c")), 100000000, 0, -140)], (0)), 100000000, 0, -139), 0), 100000000, 0, -138), 0), 100000000, 0, -137), 0), 100000000, 0, -136), 0, (("stdcompat__seq_s.mli", 132, 4241, 4241), ("stdcompat__seq_s.mli", 132, 4241, 4299), 0), 0, Tag1 ("Stdcompat__seq_s", 40)), 0); (("unzip", 594), ((Tag1 (0, (Tag3 ((("t", 555)), [(Tag2 ([((("a")), 100000000, 0, -131); ((("b")), 100000000, 0, -133)]), 100000000, 0, -135)], (0)), 100000000, 0, -134), (Tag2 ([(Tag3 ((("t", 555)), [((("a")), 100000000, 0, -131)], (0)), 100000000, 0, -130); (Tag3 ((("t", 555)), [((("b")), 100000000, 0, -133)], (0)), 100000000, 0, -132)]), 100000000, 0, -129), 0), 100000000, 0, -128), 0, (("stdcompat__seq_s.mli", 135, 4382, 4382), ("stdcompat__seq_s.mli", 135, 4382, 4422), 0), 0, Tag1 ("Stdcompat__seq_s", 41)), 0); (("split", 595), ((Tag1 (0, (Tag3 ((("t", 555)), [(Tag2 ([((("a")), 100000000, 0, -123); ((("b")), 100000000, 0, -125)]), 100000000, 0, -127)], (0)), 100000000, 0, -126), (Tag2 ([(Tag3 ((("t", 555)), [((("a")), 100000000, 0, -123)], (0)), 100000000, 0, -122); (Tag3 ((("t", 555)), [((("b")), 100000000, 0, -125)], (0)), 100000000, 0, -124)]), 100000000, 0, -121), 0), 100000000, 0, -120), 0, (("stdcompat__seq_s.mli", 138, 4487, 4487), ("stdcompat__seq_s.mli", 138, 4487, 4527), 0), 0, Tag1 ("Stdcompat__seq_s", 42)), 0); (("partition_map", 596), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -117), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Either"), "t"), [((("b")), 100000000, 0, -113); ((("c")), 100000000, 0, -115)], (0)), 100000000, 0, -119), 0), 100000000, 0, -118), (Tag1 (0, (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -117)], (0)), 100000000, 0, -116), (Tag2 ([(Tag3 ((("t", 555)), [((("b")), 100000000, 0, -113)], (0)), 100000000, 0, -112); (Tag3 ((("t", 555)), [((("c")), 100000000, 0, -115)], (0)), 100000000, 0, -114)]), 100000000, 0, -111), 0), 100000000, 0, -110), 0), 100000000, 0, -109), 0, (("stdcompat__seq_s.mli", 142, 4593, 4593), ("stdcompat__seq_s.mli", 142, 4593, 4663), 0), 0, Tag1 ("Stdcompat__seq_s", 43)), 0); (("partition", 597), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -104), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -108), 0), 100000000, 0, -107), (Tag1 (0, (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -104)], (0)), 100000000, 0, -106), (Tag2 ([(Tag3 ((("t", 555)), [((("a")), 100000000, 0, -104)], (0)), 100000000, 0, -103); (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -104)], (0)), 100000000, 0, -105)]), 100000000, 0, -102), 0), 100000000, 0, -101), 0), 100000000, 0, -100), 0, (("stdcompat__seq_s.mli", 152, 4854, 4854), ("stdcompat__seq_s.mli", 152, 4854, 4907), 0), 0, Tag1 ("Stdcompat__seq_s", 44)), 0); (("of_dispenser", 598), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -99), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -96)], (0)), 100000000, 0, -98), 0), 100000000, 0, -97), (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -96)], (0)), 100000000, 0, -95), 0), 100000000, 0, -94), 0, (("stdcompat__seq_s.mli", 155, 4985, 4985), ("stdcompat__seq_s.mli", 155, 4985, 5031), 0), 0, Tag1 ("Stdcompat__seq_s", 45)), 0); (("to_dispenser", 599), ((Tag1 (0, (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -91)], (0)), 100000000, 0, -93), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -92), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -91)], (0)), 100000000, 0, -90), 0), 100000000, 0, -89), 0), 100000000, 0, -88), 0, (("stdcompat__seq_s.mli", 158, 5102, 5102), ("stdcompat__seq_s.mli", 158, 5102, 5146), 0), 0, Tag1 ("Stdcompat__seq_s", 46)), 0); (("ints", 600), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -87), (Tag3 ((("t", 555)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -86)], (0)), 100000000, 0, -85), 0), 100000000, 0, -84), 0, (("stdcompat__seq_s.mli", 161, 5215, 5215), ("stdcompat__seq_s.mli", 161, 5215, 5238), 0), 0, Tag1 ("Stdcompat__seq_s", 47)), 0); (("concat", 601), ((Tag1 (0, (Tag3 ((("t", 555)), [(Tag3 ((("t", 555)), [((("a")), 100000000, 0, -81)], (0)), 100000000, 0, -83)], (0)), 100000000, 0, -82), (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -81)], (0)), 100000000, 0, -80), 0), 100000000, 0, -79), 0, (("stdcompat__seq_s.mli", 164, 5286, 5286), ("stdcompat__seq_s.mli", 164, 5286, 5313), 0), 0, Tag1 ("Stdcompat__seq_s", 48)), 0); (("concat_map", 602), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -76), (Tag3 ((("t", 555)), [((("b")), 100000000, 0, -74)], (0)), 100000000, 0, -78), 0), 100000000, 0, -77), (Tag1 (0, (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -76)], (0)), 100000000, 0, -75), (Tag3 ((("t", 555)), [((("b")), 100000000, 0, -74)], (0)), 100000000, 0, -73), 0), 100000000, 0, -72), 0), 100000000, 0, -71), 0, (("stdcompat__seq_s.mli", 167, 5365, 5365), ("stdcompat__seq_s.mli", 167, 5365, 5410), 0), 0, Tag1 ("Stdcompat__seq_s", 49)), 0); (("cons", 603), ((Tag1 (0, ((("a")), 100000000, 0, -69), (Tag1 (0, (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -69)], (0)), 100000000, 0, -70), (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -69)], (0)), 100000000, 0, -68), 0), 100000000, 0, -67), 0), 100000000, 0, -66), 0, (("stdcompat__seq_s.mli", 170, 5480, 5480), ("stdcompat__seq_s.mli", 170, 5480, 5509), 0), 0, Tag1 ("Stdcompat__seq_s", 50)), 0); (("unfold", 604), ((Tag1 (0, (Tag1 (0, ((("b")), 100000000, 0, -62), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([((("a")), 100000000, 0, -61); ((("b")), 100000000, 0, -62)]), 100000000, 0, -65)], (0)), 100000000, 0, -64), 0), 100000000, 0, -63), (Tag1 (0, ((("b")), 100000000, 0, -62), (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -61)], (0)), 100000000, 0, -60), 0), 100000000, 0, -59), 0), 100000000, 0, -58), 0, (("stdcompat__seq_s.mli", 173, 5563, 5563), ("stdcompat__seq_s.mli", 173, 5563, 5614), 0), 0, Tag1 ("Stdcompat__seq_s", 51)), 0); (("append", 605), ((Tag1 (0, (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -55)], (0)), 100000000, 0, -57), (Tag1 (0, (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -55)], (0)), 100000000, 0, -56), (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -55)], (0)), 100000000, 0, -54), 0), 100000000, 0, -53), 0), 100000000, 0, -52), 0, (("stdcompat__seq_s.mli", 176, 5690, 5690), ("stdcompat__seq_s.mli", 176, 5690, 5723), 0), 0, Tag1 ("Stdcompat__seq_s", 52)), 0); (("iter", 606), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -49), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -51), 0), 100000000, 0, -50), (Tag1 (0, (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -49)], (0)), 100000000, 0, -48), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -47), 0), 100000000, 0, -46), 0), 100000000, 0, -45), 0, (("stdcompat__seq_s.mli", 179, 5781, 5781), ("stdcompat__seq_s.mli", 179, 5781, 5820), 0), 0, Tag1 ("Stdcompat__seq_s", 53)), 0); (("fold_left", 607), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -40), (Tag1 (0, ((("b")), 100000000, 0, -42), ((("a")), 100000000, 0, -40), 0), 100000000, 0, -44), 0), 100000000, 0, -43), (Tag1 (0, ((("a")), 100000000, 0, -40), (Tag1 (0, (Tag3 ((("t", 555)), [((("b")), 100000000, 0, -42)], (0)), 100000000, 0, -41), ((("a")), 100000000, 0, -40), 0), 100000000, 0, -39), 0), 100000000, 0, -38), 0), 100000000, 0, -37), 0, (("stdcompat__seq_s.mli", 182, 5884, 5884), ("stdcompat__seq_s.mli", 182, 5884, 5936), 0), 0, Tag1 ("Stdcompat__seq_s", 54)), 0); (("empty", 608), ((Tag3 ((("t", 555)), [((("a")), 100000000, 0, -36)], (0)), 100000000, 0, -35), 0, (("stdcompat__seq_s.mli", 185, 6013, 6013), ("stdcompat__seq_s.mli", 185, 6013, 6029), 0), 0, Tag1 ("Stdcompat__seq_s", 55)), 0); (("return", 609), ((Tag1 (0, ((("a")), 100000000, 0, -34), (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -34)], (0)), 100000000, 0, -33), 0), 100000000, 0, -32), 0, (("stdcompat__seq_s.mli", 188, 6070, 6070), ("stdcompat__seq_s.mli", 188, 6070, 6093), 0), 0, Tag1 ("Stdcompat__seq_s", 56)), 0); (("map", 610), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -30), ((("b")), 100000000, 0, -28), 0), 100000000, 0, -31), (Tag1 (0, (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -30)], (0)), 100000000, 0, -29), (Tag3 ((("t", 555)), [((("b")), 100000000, 0, -28)], (0)), 100000000, 0, -27), 0), 100000000, 0, -26), 0), 100000000, 0, -25), 0, (("stdcompat__seq_s.mli", 191, 6141, 6141), ("stdcompat__seq_s.mli", 191, 6141, 6177), 0), 0, Tag1 ("Stdcompat__seq_s", 57)), 0); (("filter", 611), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -21), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -24), 0), 100000000, 0, -23), (Tag1 (0, (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -21)], (0)), 100000000, 0, -22), (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -21)], (0)), 100000000, 0, -20), 0), 100000000, 0, -19), 0), 100000000, 0, -18), 0, (("stdcompat__seq_s.mli", 194, 6238, 6238), ("stdcompat__seq_s.mli", 194, 6238, 6279), 0), 0, Tag1 ("Stdcompat__seq_s", 58)), 0); (("filter_map", 612), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -15), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -13)], (0)), 100000000, 0, -17), 0), 100000000, 0, -16), (Tag1 (0, (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -15)], (0)), 100000000, 0, -14), (Tag3 ((("t", 555)), [((("b")), 100000000, 0, -13)], (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0), 100000000, 0, -10), 0, (("stdcompat__seq_s.mli", 197, 6345, 6345), ("stdcompat__seq_s.mli", 197, 6345, 6395), 0), 0, Tag1 ("Stdcompat__seq_s", 59)), 0); (("flat_map", 613), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -7), (Tag3 ((("t", 555)), [((("b")), 100000000, 0, -5)], (0)), 100000000, 0, -9), 0), 100000000, 0, -8), (Tag1 (0, (Tag3 ((("t", 555)), [((("a")), 100000000, 0, -7)], (0)), 100000000, 0, -6), (Tag3 ((("t", 555)), [((("b")), 100000000, 0, -5)], (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("stdcompat__seq_s.mli", 200, 6470, 6470), ("stdcompat__seq_s.mli", 200, 6470, 6513), 0), 0, Tag1 ("Stdcompat__seq_s", 60)), 0)])), 0, (("stdcompat__seq_s.mli", 1, 0, 0), ("stdcompat__seq_s.mli", 203, 6581, 6584), 0), Tag1 ("Stdcompat__seq_s", 61)), 0)], "Stdcompat__seq_s", [("Stdcompat__seq_s", ("@o]\163\253\203\166\003\01684\225\228\153\246\189")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Stdcompat__init", ("r\254q\255\217]\232\239'\192d\165\222\016\157\133")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

  end

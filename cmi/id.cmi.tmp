type core
type t = Id of core [@@unboxed]
val compare : t -> t -> int
val pp : t Pp.t
val sch : t Schematic.t
type seed
val create_seed : Pkg.t -> seed("DEBUG:rule", [Tag1 (("core", 371), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("lib/id.mli", 1, 0, 0), ("lib/id.mli", 1, 0, 9), 0), 0, 0, 0, Tag1 ("Id", 0)), 1, 0); Tag1 (("t", 372), (0, 0, Tag1 ([(("Id", 271), ([(Tag3 ((("core", 371)), 0, (0)), 100000000, 0, -17)]), 0, (("lib/id.mli", 2, 10, 19), ("lib/id.mli", 2, 10, 29), 0), 0, Tag1 ("Id", 2))], 1), 1, 0, 0, 0, 0, 0, (("lib/id.mli", 2, 10, 10), ("lib/id.mli", 2, 10, 41), 0), [(("unboxed", (("lib/id.mli", 2, 10, 33), ("lib/id.mli", 2, 10, 40), 0)), (0), (("lib/id.mli", 2, 10, 30), ("lib/id.mli", 2, 10, 41), 0))], 0, 0, Tag1 ("Id", 1)), 1, 0); (("compare", 373), ((Tag1 (0, (Tag3 ((("t", 372)), 0, (0)), 100000000, 0, -16), (Tag1 (0, (Tag3 ((("t", 372)), 0, (0)), 100000000, 0, -15), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -14), 0), 100000000, 0, -13), 0), 100000000, 0, -12), 0, (("lib/id.mli", 4, 43, 43), ("lib/id.mli", 4, 43, 69), 0), 0, Tag1 ("Id", 3)), 0); (("pp", 374), ((Tag3 (Tag1 ((Tag2 ("Pp")), "t"), [(Tag3 ((("t", 372)), 0, (0)), 100000000, 0, -11)], (0)), 100000000, 0, -10), 0, (("lib/id.mli", 6, 71, 71), ("lib/id.mli", 6, 71, 85), 0), 0, Tag1 ("Id", 4)), 0); (("sch", 375), ((Tag3 (Tag1 ((Tag2 ("Schematic")), "t"), [(Tag3 ((("t", 372)), 0, (0)), 100000000, 0, -9)], (0)), 100000000, 0, -8), 0, (("lib/id.mli", 7, 86, 86), ("lib/id.mli", 7, 86, 108), 0), 0, Tag1 ("Id", 6)), 0); Tag1 (("seed", 376), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("lib/id.mli", 8, 109, 109), ("lib/id.mli", 8, 109, 118), 0), 0, 0, 0, Tag1 ("Id", 7)), 1, 0); (("create_seed", 377), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Pkg")), "t"), 0, (0)), 100000000, 0, -7), (Tag3 ((("seed", 376)), 0, (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("lib/id.mli", 9, 119, 119), ("lib/id.mli", 9, 119, 149), 0), 0, Tag1 ("Id", 8)), 0); (("create", 378), ((Tag1 (0, (Tag3 ((("seed", 376)), 0, (0)), 100000000, 0, -4), (Tag3 ((("t", 372)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("lib/id.mli", 10, 150, 150), ("lib/id.mli", 10, 150, 171), 0), 0, Tag1 ("Id", 9)), 0)], "Id", [("Id", ("w\207`(\179n\181\161\155\252\243\195\006\139NO")); ("Unitname", ("\155n\201\211\249\229\028$\220J\172\018<\249\171\158")); ("Support", ("YA;\029\006a\255\202R\137\181\133\184\209)\005")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Schematic", ("\180\179\011\178\017I\241^\235\149h\161k\b\209\142")); ("Pp", ("\167zCQ\134\167\215\2517\247\158\219\250\223.\197")); ("Pkg", ("SneaP\023\210\210\240\218\128bA\te\239")); ("Paths", ("\000\152\242H\139l\222\245\245Ndb\202P^\175")); ("Namespaced", ("%\208\253;3\161W$\236\1838K\195z\1493")); ("Name", ("4? \167\131n\184\000\214\031\017\027\153\002]^")); ("Modname", ("v\160\183\003\212\232\177\007\228-\002\145i\230\255\248")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

val create : seed -> t

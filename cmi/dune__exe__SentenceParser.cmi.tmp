type token =
    COLON
  | EOF
  | EOL
  | TERMINAL of Dune__exe.SentenceParserAux.raw_symbol
  | NONTERMINAL of Dune__exe.SentenceParserAux.raw_symbol
  | COMMENT of string
val optional_sentence :
  (Lexing.lexbuf -> token) ->
  Lexing.lexbuf -> Dune__exe.SentenceParserAux.raw_sentence option
val entry :
  (Lexing.lexbuf -> token) ->
  Lexing.lexbuf ->
  Dune__exe.SentenceParserAux.located_raw_sentence
  Dune__exe.SentenceParserAux.or_comment("DEBUG:rule", [Tag1 (("token", 483), (0, 0, Tag1 ([(("COLON", 397), (0), 0, (("src/sentenceParser.mli", 2, 42, 44), ("src/sentenceParser.mli", 2, 42, 51), 0), 0, Tag1 ("Dune__exe__SentenceParser", 1)); (("EOF", 398), (0), 0, (("src/sentenceParser.mli", 3, 52, 54), ("src/sentenceParser.mli", 3, 52, 59), 0), 0, Tag1 ("Dune__exe__SentenceParser", 2)); (("EOL", 399), (0), 0, (("src/sentenceParser.mli", 4, 60, 62), ("src/sentenceParser.mli", 4, 60, 67), 0), 0, Tag1 ("Dune__exe__SentenceParser", 3)); (("TERMINAL", 400), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "SentenceParserAux"), "raw_symbol"), 0, (0)), 100000000, 0, -19)]), 0, (("src/sentenceParser.mli", 5, 68, 70), ("src/sentenceParser.mli", 9, 181, 182), 0), 0, Tag1 ("Dune__exe__SentenceParser", 4)); (("NONTERMINAL", 416), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "SentenceParserAux"), "raw_symbol"), 0, (0)), 100000000, 0, -20)]), 0, (("src/sentenceParser.mli", 10, 183, 185), ("src/sentenceParser.mli", 14, 300, 301), 0), 0, Tag1 ("Dune__exe__SentenceParser", 5)); (("COMMENT", 417), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -21)]), 0, (("src/sentenceParser.mli", 15, 302, 304), ("src/sentenceParser.mli", 19, 393, 394), 0), 0, Tag1 ("Dune__exe__SentenceParser", 6))], 0), 1, 0, 0, 0, 0, 0, (("src/sentenceParser.mli", 1, 29, 29), ("src/sentenceParser.mli", 19, 393, 394), 0), 0, 0, 0, Tag1 ("Dune__exe__SentenceParser", 0)), 1, 0); (("optional_sentence", 484), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -18), (Tag3 ((("token", 483)), 0, (0)), 100000000, 0, -17), 0), 100000000, 0, -16), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -15), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "SentenceParserAux"), "raw_sentence"), 0, (0)), 100000000, 0, -14)], (0)), 100000000, 0, -13), 0), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("src/sentenceParser.mli", 21, 396, 396), ("src/sentenceParser.mli", 22, 420, 505), 0), 0, Tag1 ("Dune__exe__SentenceParser", 7)), 0); (("entry", 485), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -10), (Tag3 ((("token", 483)), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -7), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "SentenceParserAux"), "or_comment"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "SentenceParserAux"), "located_raw_sentence"), 0, (0)), 100000000, 0, -6)], (0)), 100000000, 0, -5)], (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/sentenceParser.mli", 23, 506, 506), ("src/sentenceParser.mli", 24, 518, 638), 0), 0, Tag1 ("Dune__exe__SentenceParser", 8)), 0)], "Dune__exe__SentenceParser", [("Dune__exe__SentenceParser", ("\181\195q\005\162\139\187V\188u0i\245\216g.")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("MenhirSdk__Keyword", ("\171\145\177^\199\189\197f\150\136y\144\252\234>\178")); ("MenhirSdk", ("F\232\012\196l\143\145[\255\2193U\197\027\176\139")); ("Dune__exe__Syntax", ("\002\205\007\164\2347\133\182\245*x\171\004\190\178\171")); ("Dune__exe__StringSet", ("uB\206\020%\219\199\135&\196,\015\190\015^\230")); ("Dune__exe__StringMap", ("\157\157\161k*M\030\254|\006>\144X\147j\222")); ("Dune__exe__Stretch", ("\003\145~\207\198HL&\187\195e'0\204\200\156")); ("Dune__exe__Settings", ("I\214\245\150\238/\2211\219\145S\218\004a:1")); ("Dune__exe__SentenceParserAux", ("\173\219\129yp\006^\210\134-%\228H\017J\250")); ("Dune__exe__Positions", ("\137nS\236\011\187\r[\024:\162/\201\139\237}")); ("Dune__exe__InputFile", (",\0246\029z@\127T\235\227k~\t\138\213%")); ("Dune__exe__IL", ("\194\228\178\190\251\254\231\226\207\197c\133\253i\220\170")); ("Dune__exe__GrammarFunctor", ("\139\015m\230\161\218\014\241\156v\017\182\017=\215\030")); ("Dune__exe__Grammar", ("\206h\026\183\149X\202a=\181,\16851\132e")); ("Dune__exe__GSet", ("\246\0066\220ky~\0042_c\205p\186\249\170")); ("Dune__exe__GMap", ("z5C\250t+\028\210\224\015Z'{U-\242")); ("Dune__exe__Front", ("\148\176\180\242\232x\020\016\239\205>I\021\\n*")); ("Dune__exe__BasicSyntax", ("\219\025F6\236\222\186\020\209\135\130+\131\228\012\003")); ("Dune__exe__Action", ("c\225H \249\179\190\007`[X\019\132@\208\193")); ("Dune__exe", ("\137\000\197\175$\007]\218\141\248\172\212\146c\153\212")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
 list

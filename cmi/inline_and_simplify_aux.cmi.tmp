module Env :
  sig
    type t
    val create :
      never_inline:bool ->
      backend:(module Backend_intf.S) ->
      round:int -> ppf_dump:Format.formatter -> t
    val backend : t -> (module Backend_intf.S)
    val really_import_approx :
      t -> Simple_value_approx.t -> Simple_value_approx.t
    val round : t -> int
    val ppf_dump : t -> Format.formatter
    val add : t -> Variable.t -> Simple_value_approx.t -> t
    val add_outer_scope : t -> Variable.t -> Simple_value_approx.t -> t
    val add_mutable : t -> Mutable_variable.t -> Simple_value_approx.t -> t
    val find_exn : t -> Variable.t -> Simple_value_approx.t
    val find_mutable_exn : t -> Mutable_variable.t -> Simple_value_approx.t
    type scope = Current | Outer
    val find_with_scope_exn :
      t -> Variable.t -> scope * Simple_value_approx.t
    val find_opt : t -> Variable.t -> Simple_value_approx.t option
    val find_list_exn : t -> Variable.t list -> Simple_value_approx.t list
    val does_not_bind : t -> Variable.t list -> bool
    val does_not_freshen : t -> Variable.t list -> bool
    val add_symbol : t -> Symbol.t -> Simple_value_approx.t -> t
    val redefine_symbol : t -> Symbol.t -> Simple_value_approx.t -> t
    val find_symbol_exn : t -> Symbol.t -> Simple_value_approx.t
    val find_symbol_opt : t -> Symbol.t -> Simple_value_approx.t option
    val find_symbol_fatal : t -> Symbol.t -> Simple_value_approx.t
    val find_or_load_symbol : t -> Symbol.t -> Simple_value_approx.t
    val add_projection :
      t -> projection:Projection.t -> bound_to:Variable.t -> t
    val find_projection : t -> projection:Projection.t -> Variable.t option
    val mem : t -> Variable.t -> bool
    val freshening : t -> Freshening.t
    val set_freshening : t -> Freshening.t -> t
    val activate_freshening : t -> t
    val local : t -> t
    val inside_set_of_closures_declaration :
      Set_of_closures_origin.t -> t -> bool
    val at_toplevel : t -> bool
    val is_inside_branch : t -> bool
    val branch_depth : t -> int
    val inside_branch : t -> t
    val increase_closure_depth : t -> t
    val set_never_inline : t -> t
    val set_never_inline_inside_closures : t -> t
    val unset_never_inline_inside_closures : t -> t
    val set_never_inline_outside_closures : t -> t
    val unset_never_inline_outside_closures : t -> t
    val never_inline : t -> bool
    val inlining_level : t -> int
    val inlining_level_up : t -> t
    val actively_unrolling : t -> Set_of_closures_origin.t -> int option
    val start_actively_unrolling : t -> Set_of_closures_origin.t -> int -> t
    val continue_actively_unrolling : t -> Set_of_closures_origin.t -> t
    val unrolling_allowed : t -> Set_of_closures_origin.t -> bool
    val inside_unrolled_function : t -> Set_of_closures_origin.t -> t
    val inlining_allowed : t -> Closure_origin.t -> bool
    val inside_inlined_function : t -> Closure_origin.t -> t
    val note_entering_closure :
      t -> closure_id:Closure_id.t -> dbg:Debuginfo.t -> t
    val note_entering_call :
      t -> closure_id:Closure_id.t -> dbg:Debuginfo.t -> t
    val note_entering_inlined : t -> t
    val note_entering_specialised : t -> closure_ids:Closure_id.Set.t -> t
    val enter_closure :
      t ->
      closure_id:Closure_id.t ->
      inline_inside:bool -> dbg:Debuginfo.t -> f:(t -> 'a) -> 'a
    val record_decision : t -> Inlining_stats_types.Decision.t -> unit
    val print : Format.formatter -> t -> unit
    val set_inline_debuginfo : t -> dbg:Debuginfo.t -> t
    val add_inlined_debuginfo : t -> dbg:Debuginfo.t -> Debuginfo.t
  end
module Result :
  sig
    type t
    val create : unit -> t
    val approx : t -> Simple_value_approx.t
    val set_approx : t -> Simple_value_approx.t -> t
    val meet_approx : t -> Env.t -> Simple_value_approx.t -> t
    val used_static_exceptions : t -> Static_exception.Set.t
    val use_static_exception : t -> Static_exception.t -> t
    val exit_scope_catch : t -> Static_exception.t -> t
    val benefit : t -> Inlining_cost.Benefit.t
    val map_benefit :
      t -> (Inlining_cost.Benefit.t -> Inlining_cost.Benefit.t) -> t
    val add_benefit : t -> Inlining_cost.Benefit.t -> t
    val reset_benefit : t -> t
    val set_inlining_threshold : t -> Inlining_cost.Threshold.t option -> t
    val add_inlining_threshold : t -> Inlining_cost.Threshold.t -> t
    val sub_inlining_threshold : t -> Inlining_cost.Threshold.t -> t
    val inlining_threshold : t -> Inlining_cost.Threshold.t option
    val seen_direct_application : t -> t
    val num_direct_applications : t -> int
  end
val initial_inlining_threshold : round:int -> Inlining_cost.Threshold.t
val initial_inlining_toplevel_threshold :
  round:int -> Inlining_cost.Threshold.t
val prepare_to_simplify_set_of_closures :
  env:Env.t ->
  set_of_closures:Flambda.set_of_closures ->
  function_decls:Flambda.function_declarations ->
  freshen:bool ->
  only_for_function_decl:Flambda.function_declaration option ->
  (Flambda.specialised_to * Simple_value_approx.t) Variable.Map.t *
  Flambda.specialised_to Variable.Map.t * Flambda.function_declarations *
  Simple_value_approx.t Variable.Map.t *
  Simple_value_approx.value_set_of_closures * Env.t
val prepare_to_simplify_closure :
  function_decl:Flambda.function_declaration ->
  free_vars:(Flambda.specialised_to * Simple_value_approx.t) Variable.Map.t ->
  specialised_args:Flambda.specialised_to Variable.Map.t ->
  parameter_approximations:Simple_value_approx.t Variable.Map.t ->
  set_of_closures_env:Env.t -> Env.t
val keep_body_check :
  is_classic_mode:bool ->
  recursive:Variable.Set.t Lazy.t ->
  ("DEBUG:rule", [Tag3 (("Env", 1343), 0, (Tag1 ([Tag1 (("t", 1350), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 24, 1397, 1399), ("middle_end/flambda/inline_and_simplify_aux.mli", 24, 1397, 1405), 0), 0, 0, 0, Tag1 ("Inline_and_simplify_aux", 0)), 1, 0); (("create", 1351), ((Tag1 (("never_inline"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -345), (Tag1 (("backend"), (Tag11 (Tag1 ((Tag2 ("Backend_intf")), "S"), 0), 100000000, 0, -344), (Tag1 (("round"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -343), (Tag1 (("ppf_dump"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -342), (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -341), 0), 100000000, 0, -340), 0), 100000000, 0, -339), 0), 100000000, 0, -338), 0), 100000000, 0, -337), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 32, 1799, 1801), ("middle_end/flambda/inline_and_simplify_aux.mli", 37, 1926, 1934), 0), 0, Tag1 ("Inline_and_simplify_aux", 1)), 0); (("backend", 1352), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -336), (Tag11 (Tag1 ((Tag2 ("Backend_intf")), "S"), 0), 100000000, 0, -335), 0), 100000000, 0, -334), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 41, 2059, 2061), ("middle_end/flambda/inline_and_simplify_aux.mli", 41, 2059, 2103), 0), 0, Tag1 ("Inline_and_simplify_aux", 2)), 0); (("really_import_approx", 1353), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -333), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Simple_value_approx")), "t"), 0, (0)), 100000000, 0, -332), (Tag3 (Tag1 ((Tag2 ("Simple_value_approx")), "t"), 0, (0)), 100000000, 0, -331), 0), 100000000, 0, -330), 0), 100000000, 0, -329), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 44, 2180, 2182), ("middle_end/flambda/inline_and_simplify_aux.mli", 46, 2216, 2271), 0), 0, Tag1 ("Inline_and_simplify_aux", 3)), 0); (("round", 1354), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -328), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -327), 0), 100000000, 0, -326), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 49, 2330, 2332), ("middle_end/flambda/inline_and_simplify_aux.mli", 49, 2330, 2352), 0), 0, Tag1 ("Inline_and_simplify_aux", 4)), 0); (("ppf_dump", 1355), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -325), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -324), 0), 100000000, 0, -323), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 52, 2426, 2428), ("middle_end/flambda/inline_and_simplify_aux.mli", 52, 2426, 2464), 0), 0, Tag1 ("Inline_and_simplify_aux", 5)), 0); (("add", 1356), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -322), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -321), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Simple_value_approx")), "t"), 0, (0)), 100000000, 0, -320), (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -319), 0), 100000000, 0, -318), 0), 100000000, 0, -317), 0), 100000000, 0, -316), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 57, 2633, 2635), ("middle_end/flambda/inline_and_simplify_aux.mli", 57, 2633, 2690), 0), 0, Tag1 ("Inline_and_simplify_aux", 6)), 0); (("add_outer_scope", 1357), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -315), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -314), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Simple_value_approx")), "t"), 0, (0)), 100000000, 0, -313), (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -312), 0), 100000000, 0, -311), 0), 100000000, 0, -310), 0), 100000000, 0, -309), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 59, 2692, 2694), ("middle_end/flambda/inline_and_simplify_aux.mli", 59, 2692, 2761), 0), 0, Tag1 ("Inline_and_simplify_aux", 7)), 0); (("add_mutable", 1358), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -308), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Mutable_variable")), "t"), 0, (0)), 100000000, 0, -307), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Simple_value_approx")), "t"), 0, (0)), 100000000, 0, -306), (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -305), 0), 100000000, 0, -304), 0), 100000000, 0, -303), 0), 100000000, 0, -302), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 62, 2811, 2813), ("middle_end/flambda/inline_and_simplify_aux.mli", 62, 2811, 2884), 0), 0, Tag1 ("Inline_and_simplify_aux", 8)), 0); (("find_exn", 1359), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -301), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -300), (Tag3 (Tag1 ((Tag2 ("Simple_value_approx")), "t"), 0, (0)), 100000000, 0, -299), 0), 100000000, 0, -298), 0), 100000000, 0, -297), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 67, 3089, 3091), ("middle_end/flambda/inline_and_simplify_aux.mli", 67, 3089, 3146), 0), 0, Tag1 ("Inline_and_simplify_aux", 9)), 0); (("find_mutable_exn", 1360), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -296), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Mutable_variable")), "t"), 0, (0)), 100000000, 0, -295), (Tag3 (Tag1 ((Tag2 ("Simple_value_approx")), "t"), 0, (0)), 100000000, 0, -294), 0), 100000000, 0, -293), 0), 100000000, 0, -292), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 70, 3201, 3203), ("middle_end/flambda/inline_and_simplify_aux.mli", 70, 3201, 3274), 0), 0, Tag1 ("Inline_and_simplify_aux", 10)), 0); Tag1 (("scope", 1361), (0, 0, Tag1 ([(("Current", 577), (0), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 72, 3276, 3291), ("middle_end/flambda/inline_and_simplify_aux.mli", 72, 3276, 3298), 0), 0, Tag1 ("Inline_and_simplify_aux", 12)); (("Outer", 578), (0), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 72, 3276, 3299), ("middle_end/flambda/inline_and_simplify_aux.mli", 72, 3276, 3306), 0), 0, Tag1 ("Inline_and_simplify_aux", 13))], 0), 1, 0, 0, 0, 0, 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 72, 3276, 3278), ("middle_end/flambda/inline_and_simplify_aux.mli", 72, 3276, 3306), 0), 0, 1, 0, Tag1 ("Inline_and_simplify_aux", 11)), 1, 0); (("find_with_scope_exn", 1362), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -291), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -290), (Tag2 ([(Tag3 ((("scope", 1361)), 0, (0)), 100000000, 0, -288); (Tag3 (Tag1 ((Tag2 ("Simple_value_approx")), "t"), 0, (0)), 100000000, 0, -289)]), 100000000, 0, -287), 0), 100000000, 0, -286), 0), 100000000, 0, -285), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 74, 3308, 3310), ("middle_end/flambda/inline_and_simplify_aux.mli", 74, 3308, 3384), 0), 0, Tag1 ("Inline_and_simplify_aux", 14)), 0); (("find_opt", 1363), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -284), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -283), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Simple_value_approx")), "t"), 0, (0)), 100000000, 0, -282)], (0)), 100000000, 0, -281), 0), 100000000, 0, -280), 0), 100000000, 0, -279), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 78, 3515, 3517), ("middle_end/flambda/inline_and_simplify_aux.mli", 78, 3515, 3579), 0), 0, Tag1 ("Inline_and_simplify_aux", 15)), 0); (("find_list_exn", 1364), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -278), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -277)], (0)), 100000000, 0, -276), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Simple_value_approx")), "t"), 0, (0)), 100000000, 0, -275)], (0)), 100000000, 0, -274), 0), 100000000, 0, -273), 0), 100000000, 0, -272), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 81, 3636, 3638), ("middle_end/flambda/inline_and_simplify_aux.mli", 81, 3636, 3708), 0), 0, Tag1 ("Inline_and_simplify_aux", 16)), 0); (("does_not_bind", 1365), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -271), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -270)], (0)), 100000000, 0, -269), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -268), 0), 100000000, 0, -267), 0), 100000000, 0, -266), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 83, 3710, 3712), ("middle_end/flambda/inline_and_simplify_aux.mli", 83, 3710, 3760), 0), 0, Tag1 ("Inline_and_simplify_aux", 17)), 0); (("does_not_freshen", 1366), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -265), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -264)], (0)), 100000000, 0, -263), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -262), 0), 100000000, 0, -261), 0), 100000000, 0, -260), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 85, 3762, 3764), ("middle_end/flambda/inline_and_simplify_aux.mli", 85, 3762, 3815), 0), 0, Tag1 ("Inline_and_simplify_aux", 18)), 0); (("add_symbol", 1367), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -259), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Symbol")), "t"), 0, (0)), 100000000, 0, -258), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Simple_value_approx")), "t"), 0, (0)), 100000000, 0, -257), (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -256), 0), 100000000, 0, -255), 0), 100000000, 0, -254), 0), 100000000, 0, -253), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 87, 3817, 3819), ("middle_end/flambda/inline_and_simplify_aux.mli", 87, 3817, 3879), 0), 0, Tag1 ("Inline_and_simplify_aux", 19)), 0); (("redefine_symbol", 1368), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -252), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Symbol")), "t"), 0, (0)), 100000000, 0, -251), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Simple_value_approx")), "t"), 0, (0)), 100000000, 0, -250), (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -249), 0), 100000000, 0, -248), 0), 100000000, 0, -247), 0), 100000000, 0, -246), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 88, 3880, 3882), ("middle_end/flambda/inline_and_simplify_aux.mli", 88, 3880, 3947), 0), 0, Tag1 ("Inline_and_simplify_aux", 20)), 0); (("find_symbol_exn", 1369), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -245), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Symbol")), "t"), 0, (0)), 100000000, 0, -244), (Tag3 (Tag1 ((Tag2 ("Simple_value_approx")), "t"), 0, (0)), 100000000, 0, -243), 0), 100000000, 0, -242), 0), 100000000, 0, -241), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 89, 3948, 3950), ("middle_end/flambda/inline_and_simplify_aux.mli", 89, 3948, 4010), 0), 0, Tag1 ("Inline_and_simplify_aux", 21)), 0); (("find_symbol_opt", 1370), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -240), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Symbol")), "t"), 0, (0)), 100000000, 0, -239), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Simple_value_approx")), "t"), 0, (0)), 100000000, 0, -238)], (0)), 100000000, 0, -237), 0), 100000000, 0, -236), 0), 100000000, 0, -235), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 90, 4011, 4013), ("middle_end/flambda/inline_and_simplify_aux.mli", 90, 4011, 4080), 0), 0, Tag1 ("Inline_and_simplify_aux", 22)), 0); (("find_symbol_fatal", 1371), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -234), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Symbol")), "t"), 0, (0)), 100000000, 0, -233), (Tag3 (Tag1 ((Tag2 ("Simple_value_approx")), "t"), 0, (0)), 100000000, 0, -232), 0), 100000000, 0, -231), 0), 100000000, 0, -230), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 91, 4081, 4083), ("middle_end/flambda/inline_and_simplify_aux.mli", 91, 4081, 4145), 0), 0, Tag1 ("Inline_and_simplify_aux", 23)), 0); (("find_or_load_symbol", 1372), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -229), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Symbol")), "t"), 0, (0)), 100000000, 0, -228), (Tag3 (Tag1 ((Tag2 ("Simple_value_approx")), "t"), 0, (0)), 100000000, 0, -227), 0), 100000000, 0, -226), 0), 100000000, 0, -225), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 95, 4273, 4275), ("middle_end/flambda/inline_and_simplify_aux.mli", 95, 4273, 4339), 0), 0, Tag1 ("Inline_and_simplify_aux", 24)), 0); (("add_projection", 1373), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -224), (Tag1 (("projection"), (Tag3 (Tag1 ((Tag2 ("Projection")), "t"), 0, (0)), 100000000, 0, -223), (Tag1 (("bound_to"), (Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -222), (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -221), 0), 100000000, 0, -220), 0), 100000000, 0, -219), 0), 100000000, 0, -218), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 98, 4411, 4413), ("middle_end/flambda/inline_and_simplify_aux.mli", 102, 4499, 4507), 0), 0, Tag1 ("Inline_and_simplify_aux", 25)), 0); (("find_projection", 1374), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -217), (Tag1 (("projection"), (Tag3 (Tag1 ((Tag2 ("Projection")), "t"), 0, (0)), 100000000, 0, -216), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -215)], (0)), 100000000, 0, -214), 0), 100000000, 0, -213), 0), 100000000, 0, -212), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 106, 4617, 4619), ("middle_end/flambda/inline_and_simplify_aux.mli", 109, 4679, 4703), 0), 0, Tag1 ("Inline_and_simplify_aux", 26)), 0); (("mem", 1375), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -211), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -210), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -209), 0), 100000000, 0, -208), 0), 100000000, 0, -207), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 112, 4783, 4785), ("middle_end/flambda/inline_and_simplify_aux.mli", 112, 4783, 4818), 0), 0, Tag1 ("Inline_and_simplify_aux", 27)), 0); (("freshening", 1376), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -206), (Tag3 (Tag1 ((Tag2 ("Freshening")), "t"), 0, (0)), 100000000, 0, -205), 0), 100000000, 0, -204), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 117, 4981, 4983), ("middle_end/flambda/inline_and_simplify_aux.mli", 117, 4981, 5017), 0), 0, Tag1 ("Inline_and_simplify_aux", 28)), 0); (("set_freshening", 1377), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -203), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Freshening")), "t"), 0, (0)), 100000000, 0, -202), (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -201), 0), 100000000, 0, -200), 0), 100000000, 0, -199), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 120, 5095, 5097), ("middle_end/flambda/inline_and_simplify_aux.mli", 120, 5095, 5140), 0), 0, Tag1 ("Inline_and_simplify_aux", 29)), 0); (("activate_freshening", 1378), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -198), (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -197), 0), 100000000, 0, -196), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 126, 5386, 5388), ("middle_end/flambda/inline_and_simplify_aux.mli", 126, 5386, 5420), 0), 0, Tag1 ("Inline_and_simplify_aux", 30)), 0); (("local", 1379), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -195), (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -194), 0), 100000000, 0, -193), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 133, 5784, 5786), ("middle_end/flambda/inline_and_simplify_aux.mli", 133, 5784, 5804), 0), 0, Tag1 ("Inline_and_simplify_aux", 31)), 0); (("inside_set_of_closures_declaration", 1380), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Set_of_closures_origin")), "t"), 0, (0)), 100000000, 0, -192), (Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -191), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -190), 0), 100000000, 0, -189), 0), 100000000, 0, -188), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 139, 6060, 6062), ("middle_end/flambda/inline_and_simplify_aux.mli", 139, 6060, 6140), 0), 0, Tag1 ("Inline_and_simplify_aux", 32)), 0); (("at_toplevel", 1381), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -187), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -186), 0), 100000000, 0, -185), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 144, 6268, 6270), ("middle_end/flambda/inline_and_simplify_aux.mli", 144, 6268, 6297), 0), 0, Tag1 ("Inline_and_simplify_aux", 33)), 0); (("is_inside_branch", 1382), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -184), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -183), 0), 100000000, 0, -182), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 146, 6299, 6301), ("middle_end/flambda/inline_and_simplify_aux.mli", 146, 6299, 6333), 0), 0, Tag1 ("Inline_and_simplify_aux", 34)), 0); (("branch_depth", 1383), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -181), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -180), 0), 100000000, 0, -179), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 147, 6334, 6336), ("middle_end/flambda/inline_and_simplify_aux.mli", 147, 6334, 6363), 0), 0, Tag1 ("Inline_and_simplify_aux", 35)), 0); (("inside_branch", 1384), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -178), (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -177), 0), 100000000, 0, -176), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 148, 6364, 6366), ("middle_end/flambda/inline_and_simplify_aux.mli", 148, 6364, 6392), 0), 0, Tag1 ("Inline_and_simplify_aux", 36)), 0); (("increase_closure_depth", 1385), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -175), (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -174), 0), 100000000, 0, -173), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 150, 6394, 6396), ("middle_end/flambda/inline_and_simplify_aux.mli", 150, 6394, 6431), 0), 0, Tag1 ("Inline_and_simplify_aux", 37)), 0); (("set_never_inline", 1386), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -172), (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -171), 0), 100000000, 0, -170), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 155, 6612, 6614), ("middle_end/flambda/inline_and_simplify_aux.mli", 155, 6612, 6643), 0), 0, Tag1 ("Inline_and_simplify_aux", 38)), 0); (("set_never_inline_inside_closures", 1387), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -169), (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -168), 0), 100000000, 0, -167), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 159, 6744, 6746), ("middle_end/flambda/inline_and_simplify_aux.mli", 159, 6744, 6791), 0), 0, Tag1 ("Inline_and_simplify_aux", 39)), 0); (("unset_never_inline_inside_closures", 1388), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -166), (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -165), 0), 100000000, 0, -164), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 162, 6864, 6866), ("middle_end/flambda/inline_and_simplify_aux.mli", 162, 6864, 6913), 0), 0, Tag1 ("Inline_and_simplify_aux", 40)), 0); (("set_never_inline_outside_closures", 1389), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -163), (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -162), 0), 100000000, 0, -161), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 166, 7016, 7018), ("middle_end/flambda/inline_and_simplify_aux.mli", 166, 7016, 7064), 0), 0, Tag1 ("Inline_and_simplify_aux", 41)), 0); (("unset_never_inline_outside_closures", 1390), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -160), (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -159), 0), 100000000, 0, -158), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 169, 7138, 7140), ("middle_end/flambda/inline_and_simplify_aux.mli", 169, 7138, 7188), 0), 0, Tag1 ("Inline_and_simplify_aux", 42)), 0); (("never_inline", 1391), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -157), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -156), 0), 100000000, 0, -155), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 173, 7288, 7290), ("middle_end/flambda/inline_and_simplify_aux.mli", 173, 7288, 7318), 0), 0, Tag1 ("Inline_and_simplify_aux", 43)), 0); (("inlining_level", 1392), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -154), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -153), 0), 100000000, 0, -152), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 175, 7320, 7322), ("middle_end/flambda/inline_and_simplify_aux.mli", 175, 7320, 7351), 0), 0, Tag1 ("Inline_and_simplify_aux", 44)), 0); (("inlining_level_up", 1393), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -151), (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -150), 0), 100000000, 0, -149), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 180, 7567, 7569), ("middle_end/flambda/inline_and_simplify_aux.mli", 180, 7567, 7599), 0), 0, Tag1 ("Inline_and_simplify_aux", 45)), 0); (("actively_unrolling", 1394), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -148), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Set_of_closures_origin")), "t"), 0, (0)), 100000000, 0, -147), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -146)], (0)), 100000000, 0, -145), 0), 100000000, 0, -144), 0), 100000000, 0, -143), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 183, 7662, 7664), ("middle_end/flambda/inline_and_simplify_aux.mli", 183, 7662, 7732), 0), 0, Tag1 ("Inline_and_simplify_aux", 46)), 0); (("start_actively_unrolling", 1395), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -142), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Set_of_closures_origin")), "t"), 0, (0)), 100000000, 0, -141), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -140), (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -139), 0), 100000000, 0, -138), 0), 100000000, 0, -137), 0), 100000000, 0, -136), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 186, 7796, 7798), ("middle_end/flambda/inline_and_simplify_aux.mli", 186, 7796, 7870), 0), 0, Tag1 ("Inline_and_simplify_aux", 47)), 0); (("continue_actively_unrolling", 1396), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -135), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Set_of_closures_origin")), "t"), 0, (0)), 100000000, 0, -134), (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -133), 0), 100000000, 0, -132), 0), 100000000, 0, -131), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 189, 7934, 7936), ("middle_end/flambda/inline_and_simplify_aux.mli", 189, 7934, 8004), 0), 0, Tag1 ("Inline_and_simplify_aux", 48)), 0); (("unrolling_allowed", 1397), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -130), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Set_of_closures_origin")), "t"), 0, (0)), 100000000, 0, -129), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -128), 0), 100000000, 0, -127), 0), 100000000, 0, -126), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 193, 8114, 8116), ("middle_end/flambda/inline_and_simplify_aux.mli", 193, 8114, 8177), 0), 0, Tag1 ("Inline_and_simplify_aux", 49)), 0); (("inside_unrolled_function", 1398), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -125), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Set_of_closures_origin")), "t"), 0, (0)), 100000000, 0, -124), (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -123), 0), 100000000, 0, -122), 0), 100000000, 0, -121), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 197, 8303, 8305), ("middle_end/flambda/inline_and_simplify_aux.mli", 197, 8303, 8370), 0), 0, Tag1 ("Inline_and_simplify_aux", 50)), 0); (("inlining_allowed", 1399), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -120), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Closure_origin")), "t"), 0, (0)), 100000000, 0, -119), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -118), 0), 100000000, 0, -117), 0), 100000000, 0, -116), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 201, 8470, 8472), ("middle_end/flambda/inline_and_simplify_aux.mli", 201, 8470, 8524), 0), 0, Tag1 ("Inline_and_simplify_aux", 51)), 0); (("inside_inlined_function", 1400), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -115), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Closure_origin")), "t"), 0, (0)), 100000000, 0, -114), (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -113), 0), 100000000, 0, -112), 0), 100000000, 0, -111), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 205, 8639, 8641), ("middle_end/flambda/inline_and_simplify_aux.mli", 205, 8639, 8697), 0), 0, Tag1 ("Inline_and_simplify_aux", 52)), 0); (("note_entering_closure", 1401), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -110), (Tag1 (("closure_id"), (Tag3 (Tag1 ((Tag2 ("Closure_id")), "t"), 0, (0)), 100000000, 0, -109), (Tag1 (("dbg"), (Tag3 (Tag1 ((Tag2 ("Debuginfo")), "t"), 0, (0)), 100000000, 0, -108), (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -107), 0), 100000000, 0, -106), 0), 100000000, 0, -105), 0), 100000000, 0, -104), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 211, 8947, 8949), ("middle_end/flambda/inline_and_simplify_aux.mli", 215, 9038, 9046), 0), 0, Tag1 ("Inline_and_simplify_aux", 53)), 0); (("note_entering_call", 1402), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -103), (Tag1 (("closure_id"), (Tag3 (Tag1 ((Tag2 ("Closure_id")), "t"), 0, (0)), 100000000, 0, -102), (Tag1 (("dbg"), (Tag3 (Tag1 ((Tag2 ("Debuginfo")), "t"), 0, (0)), 100000000, 0, -101), (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -100), 0), 100000000, 0, -99), 0), 100000000, 0, -98), 0), 100000000, 0, -97), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 221, 9310, 9312), ("middle_end/flambda/inline_and_simplify_aux.mli", 225, 9398, 9406), 0), 0, Tag1 ("Inline_and_simplify_aux", 54)), 0); (("note_entering_inlined", 1403), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -96), (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -95), 0), 100000000, 0, -94), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 230, 9630, 9632), ("middle_end/flambda/inline_and_simplify_aux.mli", 230, 9630, 9666), 0), 0, Tag1 ("Inline_and_simplify_aux", 55)), 0); (("note_entering_specialised", 1404), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -93), (Tag1 (("closure_ids"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Closure_id")), "Set"), "t"), 0, (0)), 100000000, 0, -92), (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -91), 0), 100000000, 0, -90), 0), 100000000, 0, -89), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 235, 9899, 9901), ("middle_end/flambda/inline_and_simplify_aux.mli", 235, 9899, 9971), 0), 0, Tag1 ("Inline_and_simplify_aux", 56)), 0); (("enter_closure", 1405), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -88), (Tag1 (("closure_id"), (Tag3 (Tag1 ((Tag2 ("Closure_id")), "t"), 0, (0)), 100000000, 0, -87), (Tag1 (("inline_inside"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -86), (Tag1 (("dbg"), (Tag3 (Tag1 ((Tag2 ("Debuginfo")), "t"), 0, (0)), 100000000, 0, -85), (Tag1 (("f"), (Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -84), ((("a")), 100000000, 0, -82), 0), 100000000, 0, -83), ((("a")), 100000000, 0, -82), 0), 100000000, 0, -81), 0), 100000000, 0, -80), 0), 100000000, 0, -79), 0), 100000000, 0, -78), 0), 100000000, 0, -77), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 241, 10246, 10248), ("middle_end/flambda/inline_and_simplify_aux.mli", 247, 10374, 10383), 0), 0, Tag1 ("Inline_and_simplify_aux", 57)), 0); (("record_decision", 1406), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -76), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Inlining_stats_types")), "Decision"), "t"), 0, (0)), 100000000, 0, -75), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -74), 0), 100000000, 0, -73), 0), 100000000, 0, -72), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 252, 10554, 10556), ("middle_end/flambda/inline_and_simplify_aux.mli", 255, 10624, 10635), 0), 0, Tag1 ("Inline_and_simplify_aux", 58)), 0); (("print", 1407), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -71), (Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -70), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -69), 0), 100000000, 0, -68), 0), 100000000, 0, -67), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 258, 10703, 10705), ("middle_end/flambda/inline_and_simplify_aux.mli", 258, 10703, 10746), 0), 0, Tag1 ("Inline_and_simplify_aux", 59)), 0); (("set_inline_debuginfo", 1408), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -66), (Tag1 (("dbg"), (Tag3 (Tag1 ((Tag2 ("Debuginfo")), "t"), 0, (0)), 100000000, 0, -65), (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -64), 0), 100000000, 0, -63), 0), 100000000, 0, -62), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 263, 10918, 10920), ("middle_end/flambda/inline_and_simplify_aux.mli", 263, 10918, 10972), 0), 0, Tag1 ("Inline_and_simplify_aux", 60)), 0); (("add_inlined_debuginfo", 1409), ((Tag1 (0, (Tag3 ((("t", 1350)), 0, (0)), 100000000, 0, -61), (Tag1 (("dbg"), (Tag3 (Tag1 ((Tag2 ("Debuginfo")), "t"), 0, (0)), 100000000, 0, -60), (Tag3 (Tag1 ((Tag2 ("Debuginfo")), "t"), 0, (0)), 100000000, 0, -59), 0), 100000000, 0, -58), 0), 100000000, 0, -57), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 266, 11050, 11052), ("middle_end/flambda/inline_and_simplify_aux.mli", 266, 11050, 11115), 0), 0, Tag1 ("Inline_and_simplify_aux", 61)), 0)]), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 22, 1316, 1316), ("middle_end/flambda/inline_and_simplify_aux.mli", 267, 11116, 11119), 0), Tag1 ("Inline_and_simplify_aux", 62)), 0, 0); Tag3 (("Result", 1344), 0, (Tag1 ([Tag1 (("t", 1410), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 273, 11325, 11327), ("middle_end/flambda/inline_and_simplify_aux.mli", 273, 11325, 11333), 0), 0, 0, 0, Tag1 ("Inline_and_simplify_aux", 63)), 1, 0); (("create", 1411), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -420), (Tag3 ((("t", 1410)), 0, (0)), 100000000, 0, -419), 0), 100000000, 0, -418), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 275, 11335, 11337), ("middle_end/flambda/inline_and_simplify_aux.mli", 275, 11335, 11359), 0), 0, Tag1 ("Inline_and_simplify_aux", 64)), 0); (("approx", 1412), ((Tag1 (0, (Tag3 ((("t", 1410)), 0, (0)), 100000000, 0, -417), (Tag3 (Tag1 ((Tag2 ("Simple_value_approx")), "t"), 0, (0)), 100000000, 0, -416), 0), 100000000, 0, -415), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 279, 11446, 11448), ("middle_end/flambda/inline_and_simplify_aux.mli", 279, 11446, 11487), 0), 0, Tag1 ("Inline_and_simplify_aux", 65)), 0); (("set_approx", 1413), ((Tag1 (0, (Tag3 ((("t", 1410)), 0, (0)), 100000000, 0, -414), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Simple_value_approx")), "t"), 0, (0)), 100000000, 0, -413), (Tag3 ((("t", 1410)), 0, (0)), 100000000, 0, -412), 0), 100000000, 0, -411), 0), 100000000, 0, -410), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 284, 11667, 11669), ("middle_end/flambda/inline_and_simplify_aux.mli", 284, 11667, 11717), 0), 0, Tag1 ("Inline_and_simplify_aux", 66)), 0); (("meet_approx", 1414), ((Tag1 (0, (Tag3 ((("t", 1410)), 0, (0)), 100000000, 0, -409), (Tag1 (0, (Tag3 (Tag1 ((("Env", 1343)), "t"), 0, (0)), 100000000, 0, -408), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Simple_value_approx")), "t"), 0, (0)), 100000000, 0, -407), (Tag3 ((("t", 1410)), 0, (0)), 100000000, 0, -406), 0), 100000000, 0, -405), 0), 100000000, 0, -404), 0), 100000000, 0, -403), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 290, 11948, 11950), ("middle_end/flambda/inline_and_simplify_aux.mli", 290, 11948, 12008), 0), 0, Tag1 ("Inline_and_simplify_aux", 67)), 0); (("used_static_exceptions", 1415), ((Tag1 (0, (Tag3 ((("t", 1410)), 0, (0)), 100000000, 0, -402), (Tag3 (Tag1 (Tag1 ((Tag2 ("Static_exception")), "Set"), "t"), 0, (0)), 100000000, 0, -401), 0), 100000000, 0, -400), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 294, 12121, 12123), ("middle_end/flambda/inline_and_simplify_aux.mli", 294, 12121, 12179), 0), 0, Tag1 ("Inline_and_simplify_aux", 68)), 0); (("use_static_exception", 1416), ((Tag1 (0, (Tag3 ((("t", 1410)), 0, (0)), 100000000, 0, -399), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Static_exception")), "t"), 0, (0)), 100000000, 0, -398), (Tag3 ((("t", 1410)), 0, (0)), 100000000, 0, -397), 0), 100000000, 0, -396), 0), 100000000, 0, -395), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 297, 12242, 12244), ("middle_end/flambda/inline_and_simplify_aux.mli", 297, 12242, 12299), 0), 0, Tag1 ("Inline_and_simplify_aux", 69)), 0); (("exit_scope_catch", 1417), ((Tag1 (0, (Tag3 ((("t", 1410)), 0, (0)), 100000000, 0, -394), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Static_exception")), "t"), 0, (0)), 100000000, 0, -393), (Tag3 ((("t", 1410)), 0, (0)), 100000000, 0, -392), 0), 100000000, 0, -391), 0), 100000000, 0, -390), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 302, 12522, 12524), ("middle_end/flambda/inline_and_simplify_aux.mli", 302, 12522, 12575), 0), 0, Tag1 ("Inline_and_simplify_aux", 70)), 0); (("benefit", 1418), ((Tag1 (0, (Tag3 ((("t", 1410)), 0, (0)), 100000000, 0, -389), (Tag3 (Tag1 (Tag1 ((Tag2 ("Inlining_cost")), "Benefit"), "t"), 0, (0)), 100000000, 0, -388), 0), 100000000, 0, -387), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 306, 12704, 12706), ("middle_end/flambda/inline_and_simplify_aux.mli", 306, 12704, 12748), 0), 0, Tag1 ("Inline_and_simplify_aux", 71)), 0); (("map_benefit", 1419), ((Tag1 (0, (Tag3 ((("t", 1410)), 0, (0)), 100000000, 0, -386), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Inlining_cost")), "Benefit"), "t"), 0, (0)), 100000000, 0, -385), (Tag3 (Tag1 (Tag1 ((Tag2 ("Inlining_cost")), "Benefit"), "t"), 0, (0)), 100000000, 0, -384), 0), 100000000, 0, -383), (Tag3 ((("t", 1410)), 0, (0)), 100000000, 0, -382), 0), 100000000, 0, -381), 0), 100000000, 0, -380), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 310, 12854, 12856), ("middle_end/flambda/inline_and_simplify_aux.mli", 313, 12940, 12948), 0), 0, Tag1 ("Inline_and_simplify_aux", 72)), 0); (("add_benefit", 1420), ((Tag1 (0, (Tag3 ((("t", 1410)), 0, (0)), 100000000, 0, -379), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Inlining_cost")), "Benefit"), "t"), 0, (0)), 100000000, 0, -378), (Tag3 ((("t", 1410)), 0, (0)), 100000000, 0, -377), 0), 100000000, 0, -376), 0), 100000000, 0, -375), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 317, 13048, 13050), ("middle_end/flambda/inline_and_simplify_aux.mli", 317, 13048, 13101), 0), 0, Tag1 ("Inline_and_simplify_aux", 73)), 0); (("reset_benefit", 1421), ((Tag1 (0, (Tag3 ((("t", 1410)), 0, (0)), 100000000, 0, -374), (Tag3 ((("t", 1410)), 0, (0)), 100000000, 0, -373), 0), 100000000, 0, -372), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 321, 13217, 13219), ("middle_end/flambda/inline_and_simplify_aux.mli", 321, 13217, 13245), 0), 0, Tag1 ("Inline_and_simplify_aux", 74)), 0); (("set_inlining_threshold", 1422), ((Tag1 (0, (Tag3 ((("t", 1410)), 0, (0)), 100000000, 0, -371), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Inlining_cost")), "Threshold"), "t"), 0, (0)), 100000000, 0, -370)], (0)), 100000000, 0, -369), (Tag3 ((("t", 1410)), 0, (0)), 100000000, 0, -368), 0), 100000000, 0, -367), 0), 100000000, 0, -366), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 323, 13247, 13249), ("middle_end/flambda/inline_and_simplify_aux.mli", 324, 13278, 13324), 0), 0, Tag1 ("Inline_and_simplify_aux", 75)), 0); (("add_inlining_threshold", 1423), ((Tag1 (0, (Tag3 ((("t", 1410)), 0, (0)), 100000000, 0, -365), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Inlining_cost")), "Threshold"), "t"), 0, (0)), 100000000, 0, -364), (Tag3 ((("t", 1410)), 0, (0)), 100000000, 0, -363), 0), 100000000, 0, -362), 0), 100000000, 0, -361), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 325, 13325, 13327), ("middle_end/flambda/inline_and_simplify_aux.mli", 326, 13356, 13395), 0), 0, Tag1 ("Inline_and_simplify_aux", 76)), 0); (("sub_inlining_threshold", 1424), ((Tag1 (0, (Tag3 ((("t", 1410)), 0, (0)), 100000000, 0, -360), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Inlining_cost")), "Threshold"), "t"), 0, (0)), 100000000, 0, -359), (Tag3 ((("t", 1410)), 0, (0)), 100000000, 0, -358), 0), 100000000, 0, -357), 0), 100000000, 0, -356), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 327, 13396, 13398), ("middle_end/flambda/inline_and_simplify_aux.mli", 328, 13427, 13466), 0), 0, Tag1 ("Inline_and_simplify_aux", 77)), 0); (("inlining_threshold", 1425), ((Tag1 (0, (Tag3 ((("t", 1410)), 0, (0)), 100000000, 0, -355), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Inlining_cost")), "Threshold"), "t"), 0, (0)), 100000000, 0, -354)], (0)), 100000000, 0, -353), 0), 100000000, 0, -352), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 329, 13467, 13469), ("middle_end/flambda/inline_and_simplify_aux.mli", 329, 13467, 13531), 0), 0, Tag1 ("Inline_and_simplify_aux", 78)), 0); (("seen_direct_application", 1426), ((Tag1 (0, (Tag3 ((("t", 1410)), 0, (0)), 100000000, 0, -351), (Tag3 ((("t", 1410)), 0, (0)), 100000000, 0, -350), 0), 100000000, 0, -349), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 331, 13533, 13535), ("middle_end/flambda/inline_and_simplify_aux.mli", 331, 13533, 13571), 0), 0, Tag1 ("Inline_and_simplify_aux", 79)), 0); (("num_direct_applications", 1427), ((Tag1 (0, (Tag3 ((("t", 1410)), 0, (0)), 100000000, 0, -348), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -347), 0), 100000000, 0, -346), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 332, 13572, 13574), ("middle_end/flambda/inline_and_simplify_aux.mli", 332, 13572, 13612), 0), 0, Tag1 ("Inline_and_simplify_aux", 80)), 0)]), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 269, 11121, 11121), ("middle_end/flambda/inline_and_simplify_aux.mli", 333, 13613, 13616), 0), Tag1 ("Inline_and_simplify_aux", 81)), 0, 0); (("initial_inlining_threshold", 1345), ((Tag1 (("round"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -56), (Tag3 (Tag1 (Tag1 ((Tag2 ("Inlining_cost")), "Threshold"), "t"), 0, (0)), 100000000, 0, -55), 0), 100000000, 0, -54), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 336, 13655, 13655), ("middle_end/flambda/inline_and_simplify_aux.mli", 336, 13655, 13726), 0), 0, Tag1 ("Inline_and_simplify_aux", 82)), 0); (("initial_inlining_toplevel_threshold", 1346), ((Tag1 (("round"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -53), (Tag3 (Tag1 (Tag1 ((Tag2 ("Inlining_cost")), "Threshold"), "t"), 0, (0)), 100000000, 0, -52), 0), 100000000, 0, -51), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 339, 13774, 13774), ("middle_end/flambda/inline_and_simplify_aux.mli", 340, 13814, 13856), 0), 0, Tag1 ("Inline_and_simplify_aux", 83)), 0); (("prepare_to_simplify_set_of_closures", 1347), ((Tag1 (("env"), (Tag3 (Tag1 ((("Env", 1343)), "t"), 0, (0)), 100000000, 0, -50), (Tag1 (("set_of_closures"), (Tag3 (Tag1 ((Tag2 ("Flambda")), "set_of_closures"), 0, (0)), 100000000, 0, -49), (Tag1 (("function_decls"), (Tag3 (Tag1 ((Tag2 ("Flambda")), "function_declarations"), 0, (0)), 100000000, 0, -48), (Tag1 (("freshen"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -47), (Tag1 (("only_for_function_decl"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Flambda")), "function_declaration"), 0, (0)), 100000000, 0, -46)], (0)), 100000000, 0, -45), (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Map"), "t"), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Flambda")), "specialised_to"), 0, (0)), 100000000, 0, -36); (Tag3 (Tag1 ((Tag2 ("Simple_value_approx")), "t"), 0, (0)), 100000000, 0, -37)]), 100000000, 0, -35)], (0)), 100000000, 0, -34); (Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Map"), "t"), [(Tag3 (Tag1 ((Tag2 ("Flambda")), "specialised_to"), 0, (0)), 100000000, 0, -39)], (0)), 100000000, 0, -38); (Tag3 (Tag1 ((Tag2 ("Flambda")), "function_declarations"), 0, (0)), 100000000, 0, -40); (Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Map"), "t"), [(Tag3 (Tag1 ((Tag2 ("Simple_value_approx")), "t"), 0, (0)), 100000000, 0, -42)], (0)), 100000000, 0, -41); (Tag3 (Tag1 ((Tag2 ("Simple_value_approx")), "value_set_of_closures"), 0, (0)), 100000000, 0, -43); (Tag3 (Tag1 ((("Env", 1343)), "t"), 0, (0)), 100000000, 0, -44)]), 100000000, 0, -33), 0), 100000000, 0, -32), 0), 100000000, 0, -31), 0), 100000000, 0, -30), 0), 100000000, 0, -29), 0), 100000000, 0, -28), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 342, 13858, 13858), ("middle_end/flambda/inline_and_simplify_aux.mli", 353, 14414, 14425), 0), 0, Tag1 ("Inline_and_simplify_aux", 84)), 0); (("prepare_to_simplify_closure", 1348), ((Tag1 (("function_decl"), (Tag3 (Tag1 ((Tag2 ("Flambda")), "function_declaration"), 0, (0)), 100000000, 0, -27), (Tag1 (("free_vars"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Map"), "t"), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Flambda")), "specialised_to"), 0, (0)), 100000000, 0, -25); (Tag3 (Tag1 ((Tag2 ("Simple_value_approx")), "t"), 0, (0)), 100000000, 0, -26)]), 100000000, 0, -24)], (0)), 100000000, 0, -23), (Tag1 (("specialised_args"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Map"), "t"), [(Tag3 (Tag1 ((Tag2 ("Flambda")), "specialised_to"), 0, (0)), 100000000, 0, -22)], (0)), 100000000, 0, -21), (Tag1 (("parameter_approximations"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Map"), "t"), [(Tag3 (Tag1 ((Tag2 ("Simple_value_approx")), "t"), 0, (0)), 100000000, 0, -20)], (0)), 100000000, 0, -19), (Tag1 (("set_of_closures_env"), (Tag3 (Tag1 ((("Env", 1343)), "t"), 0, (0)), 100000000, 0, -18), (Tag3 (Tag1 ((("Env", 1343)), "t"), 0, (0)), 100000000, 0, -17), 0), 100000000, 0, -16), 0), 100000000, 0, -15), 0), 100000000, 0, -14), 0), 100000000, 0, -13), 0), 100000000, 0, -12), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 355, 14427, 14427), ("middle_end/flambda/inline_and_simplify_aux.mli", 361, 14744, 14754), 0), 0, Tag1 ("Inline_and_simplify_aux", 85)), 0); (("keep_body_check", 1349), ((Tag1 (("is_classic_mode"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -11), (Tag1 (("recursive"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lazy"), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Set"), "t"), 0, (0)), 100000000, 0, -10)], (0)), 100000000, 0, -9), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -8), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Flambda")), "function_declaration"), 0, (0)), 100000000, 0, -7), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("middle_end/flambda/inline_and_simplify_aux.mli", 363, 14756, 14756), ("middle_end/flambda/inline_and_simplify_aux.mli", 368, 14889, 14898), 0), 0, Tag1 ("Inline_and_simplify_aux", 86)), 0)], "Inline_and_simplify_aux", [("Inline_and_simplify_aux", ("1\249\156\225\205\207\024j\237\130\169A-\022\158,")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Variable", ("\228'\154\1834\146\207\147+\193Aq\209h\190\220")); ("Var_within_closure", ("vQ\173\251u\026\012+}j\020C}T\151\220")); ("Types", ("\177\238\029.\220\006\163!\230\015\006\182\133\155\194\166")); ("Type_immediacy", ("\"\127k\011Q\241\211\138\193;8\142\129\141#\251")); ("Tag", ("\252\157\132\005\195\228\232\133\246\237\233\224\012\143\192\218")); ("Symbol", ("\179q\177\031_\169\139a\192\019\188\000V\236\232\t")); ("Subst", ("\021\031\148\223\127\186\189\135\027}\145r\216\143\177\156")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Static_exception", ("2{#\175\226\185\147\146\176\140\029O\023p\024\\")); ("Simple_value_approx", ("\019\b\\\255\223\2510j\n?G\183\243\154v\213")); ("Shape", ("\235\127Y\213\025\137=\244\218\181\248N\189\188\216p")); ("Set_of_closures_origin", ("$n\234\014\162\130\210K\171\btrA\244\254\195")); ("Set_of_closures_id", ("\178\228\011\028\027~\211\166\244\180\220-W\145_\243")); ("Projection", ("\250\207\030\021*\193\225\168\189!\224\228\192\212\236\224")); ("Primitive", ("}Shh\162\015|\220A\203\249\232\245G\213\019")); ("Path", ("\012\183\178\025\1298\228*\021r\185\160Y\252\n\026")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Parameter", ("*\152\238G\163\217\2377/\t\206\131\226\216K0")); ("Outcometree", ("9\021%\234\211\206\210\004H\165\208\2014\234Q\142")); ("Numbers", ("\004\020\227\212|\031Q6\146\217\211\156\221\234\254\195")); ("Mutable_variable", ("B^*^9`\212\152j\145_\017i.\128?")); ("Misc", ("*\026\026\234c\191\131\161\\\203\183\012O\252\153\198")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Load_path", ("\012@\228l\230\164S\172h\1726X\020\252o}")); ("Linkage_name", ("\023\000\172\166 s\214\ns\155s\156\005\252\154\207")); ("Lambda", ("\180\1419\236'\146K$\128\006\135q\135V\029\180")); ("Internal_variable_names", ("\024|\208(\224\206\012\006\179\203\020\000\179\228\154\218")); ("Inlining_stats_types", ("\214\002y3\241\149\006{y\027\147\198G\202R\217")); ("Inlining_cost", ("\201\242\005^\174x14\154\227\239\214\167U\011\134")); ("Identifiable", ("\004F\207\014\158GU\001\184\214\187%/#;\211")); ("Ident", ("\b9;!\187.\220\163(x\b\174\\\223\020\004")); ("Freshening", ("@\017\191q\232\253\236\139\131\160Z\000b\223\184\228")); ("Flambda", ("\195J|\022>U\206!\211\212\185N\180zh\241")); ("Export_id", ("\017\209\152\144X\251!\178\238\152t\173\191Kl\232")); ("Env", ("\021\n\181\142x\b\169j\227\"\017\248*\178\245\223")); ("Debuginfo", ("\131\251\175\217P\194M\163\022\151\002\005\006\185:\185")); ("Compilation_unit", ("\007\240\020\003jK\000\210\174\021\189.8^\028K")); ("Cmi_format", ("6\177\bU\139\"\023\152=\249\135\174\b\011Cg")); ("Closure_origin", ("G\222\200`\213\247\022M|O\1488\194\030\187\229")); ("Closure_id", ("k\221yCH\015\186G\246]\003\233\198\179\217A")); ("Closure_element", ("a\194\018\239D1\143{\156A\011\219H#\149A")); ("Clambda_primitives", ("\199\176\237Hv\205\152\14717\179\017\246\221x`")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Build_path_prefix_map", ("y\028\167\207D\220\198\216\011\208\172\149\2416\bc")); ("Backend_intf", ("[e)\161\171\162\229\195\205D\138\187K\143\148\146")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216")); ("Allocated_const", ("\029\027.W\160\170!\199Q2\235\240\167\031,\004"))], [(0)])
Variable.t -> Flambda.function_declaration -> bool

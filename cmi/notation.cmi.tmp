val notation_cat : Libobject.category
val pr_notation : Constrexpr.notation -> Pp.t
module NotationSet :
  sig
    type elt = Constrexpr.notation
    type t
    val empty : t
    val add : elt -> t -> t
    val singleton : elt -> t
    val remove : elt -> t -> t
    val union : t -> t -> t
    val inter : t -> t -> t
    val disjoint : t -> t -> bool
    val diff : t -> t -> t
    val cardinal : t -> int
    val elements : t -> elt list
    val min_elt : t -> elt
    val min_elt_opt : t -> elt option
    val max_elt : t -> elt
    val max_elt_opt : t -> elt option
    val choose : t -> elt
    val choose_opt : t -> elt option
    val find : elt -> t -> elt
    val find_opt : elt -> t -> elt option
    val find_first : (elt -> bool) -> t -> elt
    val find_first_opt : (elt -> bool) -> t -> elt option
    val find_last : (elt -> bool) -> t -> elt
    val find_last_opt : (elt -> bool) -> t -> elt option
    val iter : (elt -> unit) -> t -> unit
    val fold : (elt -> 'acc -> 'acc) -> t -> 'acc -> 'acc
    val map : (elt -> elt) -> t -> t
    val filter : (elt -> bool) -> t -> t
    val filter_map : (elt -> elt option) -> t -> t
    val partition : (elt -> bool) -> t -> t * t
    val split : elt -> t -> t * bool * t
    val is_empty : t -> bool
    val mem : elt -> t -> bool
    val equal : t -> t -> bool
    val compare : t -> t -> int
    val subset : t -> t -> bool
    val for_all : (elt -> bool) -> t -> bool
    val exists : (elt -> bool) -> t -> bool
    val to_list : t -> elt list
    val of_list : elt list -> t
    val to_seq_from : elt -> t -> elt Seq.t
    val to_seq : t -> elt Seq.t
    val to_rev_seq : t -> elt Seq.t
    val add_seq : elt Seq.t -> t -> t
    val of_seq : elt Seq.t -> t
  end
module NotationMap :
  sig
    type key = Constrexpr.notation
    type +'a t
    val empty : 'a t
    val is_empty : 'a t -> bool
    val mem : key -> 'a t -> bool
    val add : key -> 'a -> 'a t -> 'a t
    val update : key -> ('a option -> 'a option) -> 'a t -> 'a t
    val singleton : key -> 'a -> 'a t
    val remove : key -> 'a t -> 'a t
    val merge :
      (key -> 'a option -> 'b option -> 'c option) -> 'a t -> 'b t -> 'c t
    val union : (key -> 'a -> 'a -> 'a option) -> 'a t -> 'a t -> 'a t
    val compare : ('a -> 'a -> int) -> 'a t -> 'a t -> int
    val equal : ('a -> 'a -> bool) -> 'a t -> 'a t -> bool
    val iter : (key -> 'a -> unit) -> 'a t -> unit
    val fold : (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b
    val for_all : (key -> 'a -> bool) -> 'a t -> bool
    val exists : (key -> 'a -> bool) -> 'a t -> bool
    val filter : (key -> 'a -> bool) -> 'a t -> 'a t
    val partition : (key -> 'a -> bool) -> 'a t -> 'a t * 'a t
    val cardinal : 'a t -> int
    val bindings : 'a t -> (key * 'a) list
    val min_binding : 'a t -> key * 'a
    val max_binding : 'a t -> key * 'a
    val choose : 'a t -> key * 'a
    val choose_opt : 'a t -> (key * 'a) option
    val split : key -> 'a t -> 'a t * 'a option * 'a t
    val find : key -> 'a t -> 'a
    val find_opt : key -> 'a t -> 'a option
    val map : ('a -> 'b) -> 'a t -> 'b t
    val mapi : (key -> 'a -> 'b) -> 'a t -> 'b t
    val get : key -> 'a t -> 'a
    val set : key -> 'a -> 'a t -> 'a t
    val modify : key -> (key -> 'a -> 'a) -> 'a t -> 'a t
    val domain : 'a t -> NotationSet.t
    val bind : (key -> 'a) -> NotationSet.t -> 'a t
    val fold_left : (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b
    val fold_right : (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b
    val height : 'a t -> int
    val filter_range : (key -> int) -> 'a t -> 'a t
    val of_list : (key * 'a) list -> 'a t
    val symmetric_diff_fold :
      (key -> 'a option -> 'a option -> 'b -> 'b) -> 'a t -> 'a t -> 'b -> 'b
    module Smart :
      sig
        val map : ('a -> 'a) -> 'a t -> 'a t
        val mapi : (key -> 'a -> 'a) -> 'a t -> 'a t
      end
    module Monad :
      functor (M : CMap.MonadS) ->
        sig
          val fold : (key -> 'a -> 'b -> 'b M.t) -> 'a t -> 'b -> 'b M.t
          val fold_left : (key -> 'a -> 'b -> 'b M.t) -> 'a t -> 'b -> 'b M.t
          val fold_right :
            (key -> 'a -> 'b -> 'b M.t) -> 'a t -> 'b -> 'b M.t
          val mapi : (key -> 'a -> 'b M.t) -> 'a t -> 'b t M.t
        end
  end
module SpecificNotationSet :
  sig
    type elt = Constrexpr.specific_notation
    type t
    val empty : t
    val add : elt -> t -> t
    val singleton : elt -> t
    val remove : elt -> t -> t
    val union : t -> t -> t
    val inter : t -> t -> t
    val disjoint : t -> t -> bool
    val diff : t -> t -> t
    val cardinal : t -> int
    val elements : t -> elt list
    val min_elt : t -> elt
    val min_elt_opt : t -> elt option
    val max_elt : t -> elt
    val max_elt_opt : t -> elt option
    val choose : t -> elt
    val choose_opt : t -> elt option
    val find : elt -> t -> elt
    val find_opt : elt -> t -> elt option
    val find_first : (elt -> bool) -> t -> elt
    val find_first_opt : (elt -> bool) -> t -> elt option
    val find_last : (elt -> bool) -> t -> elt
    val find_last_opt : (elt -> bool) -> t -> elt option
    val iter : (elt -> unit) -> t -> unit
    val fold : (elt -> 'acc -> 'acc) -> t -> 'acc -> 'acc
    val map : (elt -> elt) -> t -> t
    val filter : (elt -> bool) -> t -> t
    val filter_map : (elt -> elt option) -> t -> t
    val partition : (elt -> bool) -> t -> t * t
    val split : elt -> t -> t * bool * t
    val is_empty : t -> bool
    val mem : elt -> t -> bool
    val equal : t -> t -> bool
    val compare : t -> t -> int
    val subset : t -> t -> bool
    val for_all : (elt -> bool) -> t -> bool
    val exists : (elt -> bool) -> t -> bool
    val to_list : t -> elt list
    val of_list : elt list -> t
    val to_seq_from : elt -> t -> elt Seq.t
    val to_seq : t -> elt Seq.t
    val to_rev_seq : t -> elt Seq.t
    val add_seq : elt Seq.t -> t -> t
    val of_seq : elt Seq.t -> t
  end
module SpecificNotationMap :
  sig
    type key = Constrexpr.specific_notation
    type +'a t
    val empty : 'a t
    val is_empty : 'a t -> bool
    val mem : key -> 'a t -> bool
    val add : key -> 'a -> 'a t -> 'a t
    val update : key -> ('a option -> 'a option) -> 'a t -> 'a t
    val singleton : key -> 'a -> 'a t
    val remove : key -> 'a t -> 'a t
    val merge :
      (key -> 'a option -> 'b option -> 'c option) -> 'a t -> 'b t -> 'c t
    val union : (key -> 'a -> 'a -> 'a option) -> 'a t -> 'a t -> 'a t
    val compare : ('a -> 'a -> int) -> 'a t -> 'a t -> int
    val equal : ('a -> 'a -> bool) -> 'a t -> 'a t -> bool
    val iter : (key -> 'a -> unit) -> 'a t -> unit
    val fold : (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b
    val for_all : (key -> 'a -> bool) -> 'a t -> bool
    val exists : (key -> 'a -> bool) -> 'a t -> bool
    val filter : (key -> 'a -> bool) -> 'a t -> 'a t
    val partition : (key -> 'a -> bool) -> 'a t -> 'a t * 'a t
    val cardinal : 'a t -> int
    val bindings : 'a t -> (key * 'a) list
    val min_binding : 'a t -> key * 'a
    val max_binding : 'a t -> key * 'a
    val choose : 'a t -> key * 'a
    val choose_opt : 'a t -> (key * 'a) option
    val split : key -> 'a t -> 'a t * 'a option * 'a t
    val find : key -> 'a t -> 'a
    val find_opt : key -> 'a t -> 'a option
    val map : ('a -> 'b) -> 'a t -> 'b t
    val mapi : (key -> 'a -> 'b) -> 'a t -> 'b t
    val get : key -> 'a t -> 'a
    val set : key -> 'a -> 'a t -> 'a t
    val modify : key -> (key -> 'a -> 'a) -> 'a t -> 'a t
    val domain : 'a t -> SpecificNotationSet.t
    val bind : (key -> 'a) -> SpecificNotationSet.t -> 'a t
    val fold_left : (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b
    val fold_right : (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b
    val height : 'a t -> int
    val filter_range : (key -> int) -> 'a t -> 'a t
    val of_list : (key * 'a) list -> 'a t
    val symmetric_diff_fold :
      (key -> 'a option -> 'a option -> 'b -> 'b) -> 'a t -> 'a t -> 'b -> 'b
    module Smart :
      sig
        val map : ('a -> 'a) -> 'a t -> 'a t
        val mapi : (key -> 'a -> 'a) -> 'a t -> 'a t
      end
    module Monad :
      functor (M : CMap.MonadS) ->
        sig
          val fold : (key -> 'a -> 'b -> 'b M.t) -> 'a t -> 'b -> 'b M.t
          val fold_left : (key -> 'a -> 'b -> 'b M.t) -> 'a t -> 'b -> 'b M.t
          val fold_right :
            (key -> 'a -> 'b -> 'b M.t) -> 'a t -> 'b -> 'b M.t
          val mapi : (key -> 'a -> 'b M.t) -> 'a t -> 'b t M.t
        end
  end
type delimiters = string
type scope
type scopes
val declare_scope : Notation_term.scope_name -> unit
val ensure_scope : Notation_term.scope_name -> unit
val current_scopes : unit -> scopes
val scope_is_open_in_scopes : Notation_term.scope_name -> scopes -> bool
val scope_is_open : Notation_term.scope_name -> bool
val open_scope : Notation_term.scope_name -> unit
val close_scope : Notation_term.scope_name -> unit
val normalize_scope : string -> Notation_term.scope_name
val empty_scope_stack : scopes
val push_scope : Notation_term.scope_name -> scopes -> scopes
val find_scope : Notation_term.scope_name -> scope
val declare_delimiters : Notation_term.scope_name -> delimiters -> unit
val remove_delimiters : Notation_term.scope_name -> unit
val find_delimiters_scope :
  ?loc:Loc.t -> delimiters -> Notation_term.scope_name
type notation_location = (Names.DirPath.t * Names.DirPath.t) * string
type required_module = Libnames.full_path * string list
type rawnum = NumTok.Signed.t
type prim_token_uid = string
type 'a prim_token_interpreter = ?loc:Loc.t -> 'a -> Glob_term.glob_constr
type 'a prim_token_uninterpreter = Glob_term.any_glob_constr -> 'a option
type 'a prim_token_interpretation =
    'a prim_token_interpreter * 'a prim_token_uninterpreter
val register_rawnumeral_interpretation :
  ?allow_overwrite:bool ->
  prim_token_uid -> rawnum prim_token_interpretation -> unit
val register_bignumeral_interpretation :
  ?allow_overwrite:bool ->
  prim_token_uid -> Z.t prim_token_interpretation -> unit
val register_string_interpretation :
  ?allow_overwrite:bool ->
  prim_token_uid -> string prim_token_interpretation -> unit
type prim_token_notation_error =
    UnexpectedTerm of Constr.t
  | UnexpectedNonOptionTerm of Constr.t
exception PrimTokenNotationError of string * Environ.env * Evd.evar_map *
            prim_token_notation_error
type numnot_option =
    Nop
  | Warning of NumTok.UnsignedNat.t
  | Abstract of NumTok.UnsignedNat.t
type int_ty = {
  dec_uint : Names.inductive;
  dec_int : Names.inductive;
  hex_uint : Names.inductive;
  hex_int : Names.inductive;
  uint : Names.inductive;
  int : Names.inductive;
}
type z_pos_ty = { z_ty : Names.inductive; pos_ty : Names.inductive; }
type number_ty = {
  int : int_ty;
  decimal : Names.inductive;
  hexadecimal : Names.inductive;
  number : Names.inductive;
}
type pos_neg_int63_ty = { pos_neg_int63_ty : Names.inductive; }
type target_kind =
    Int of int_ty
  | UInt of int_ty
  | Z of z_pos_ty
  | Int63 of pos_neg_int63_ty
  | Float64
  | Number of number_ty
type string_target_kind = ListByte | Byte
type option_kind = Option | Direct
type 'target conversion_kind = 'target * option_kind
type to_post_arg =
    ToPostCopy
  | ToPostAs of int
  | ToPostHole
  | ToPostCheck of Constr.t
type ('target, 'warning) prim_token_notation_obj = {
  to_kind : 'target conversion_kind;
  to_ty : Names.GlobRef.t;
  to_post : (Names.GlobRef.t * Names.GlobRef.t * to_post_arg list) list array;
  of_kind : 'target conversion_kind;
  of_ty : Names.GlobRef.t;
  ty_name : Libnames.qualid;
  warning : 'warning;
}
type number_notation_obj =
    (target_kind, numnot_option) prim_token_notation_obj
type string_notation_obj = (string_target_kind, unit) prim_token_notation_obj
type prim_token_interp_info =
    Uid of prim_token_uid
  | NumberNotation of number_notation_obj
  | StringNotation of string_notation_obj
type prim_token_infos = {
  pt_local : bool;
  pt_scope : Notation_term.scope_name;
  pt_interp_info : prim_token_interp_info;
  pt_required : required_module;
  pt_refs : Names.GlobRef.t list;
  pt_in_match : bool;
}
val enable_prim_token_interpretation : prim_token_infos -> unit
val declare_numeral_interpreter :
  ?local:bool ->
  Notation_term.scope_name ->
  required_module ->
  Z.t prim_token_interpreter ->
  Glob_term.glob_constr list * Z.t prim_token_uninterpreter * bool -> unit
val declare_string_interpreter :
  ?local:bool ->
  Notation_term.scope_name ->
  required_module ->
  string prim_token_interpreter ->
  Glob_term.glob_constr list * string prim_token_uninterpreter * bool -> unit
val interp_prim_token :
  ?loc:Loc.t ->
  Constrexpr.prim_token ->
  Notation_term.subscopes ->
  Glob_term.glob_constr * Notation_term.scope_name option
val interp_prim_token_cases_pattern_expr :
  ?loc:Loc.t ->
  (Names.GlobRef.t -> unit) ->
  Constrexpr.prim_token ->
  Notation_term.subscopes ->
  Glob_term.glob_constr * Notation_term.scope_name option
val uninterp_prim_token :
  'a Glob_term.glob_constr_g ->
  Notation_term.subscopes -> Constrexpr.prim_token * delimiters option
val uninterp_prim_token_cases_pattern :
  'a Glob_term.cases_pattern_g ->
  Notation_term.subscopes ->
  Names.Name.t * Constrexpr.prim_token * delimiters option
val availability_of_prim_token :
  Constrexpr.prim_token ->
  Notation_term.scope_name ->
  Notation_term.subscopes -> delimiters option option
type entry_coercion_kind =
    IsEntryCoercion of Constrexpr.notation_entry_level *
      Constrexpr.notation_entry_relative_level
  | IsEntryGlobal of string * int
  | IsEntryIdent of string * int
val declare_notation :
  Constrexpr.notation_with_optional_scope * Constrexpr.notation ->
  Notation_term.interpretation ->
  notation_location ->
  use:Notationextern.notation_use ->
  also_in_cases_pattern:bool ->
  entry_coercion_kind option -> Deprecation.t option -> unit
val interp_notation :
  ?loc:Loc.t ->
  Constrexpr.notation ->
  Notation_term.subscopes ->
  Notation_term.interpretation *
  (notation_location * Notation_term.scope_name option)
val availability_of_notation :
  Constrexpr.specific_notation ->
  Notation_term.subscopes ->
  (Notation_term.scope_name option * delimiters option) option
val is_printing_inactive_rule :
  Notationextern.interp_rule -> Notation_term.interpretation -> bool
type 'a notation_query_pattern_gen = {
  notation_entry_pattern : Constrexpr.notation_entry list;
  interp_rule_key_pattern : (Constrexpr.notation_key, 'a) Util.union option;
  use_pattern : Notationextern.notation_use;
  scope_pattern : Constrexpr.notation_with_optional_scope option;
  interpretation_pattern : Notation_term.interpretation option;
}
type notation_query_pattern = Libnames.qualid notation_query_pattern_gen
val toggle_notations :
  on:bool ->
  all:bool ->
  (Glob_term.glob_constr -> Pp.t) -> notation_query_pattern -> unit
val interpret_notation_string : string -> string
val interp_notation_as_global_reference :
  ?loc:Loc.t ->
  head:bool ->
  (Names.GlobRef.t -> bool) ->
  Constrexpr.notation_key -> delimiters option -> Names.GlobRef.t
val declare_arguments_scope :
  bool -> Names.GlobRef.t -> Notation_term.scope_name list list -> unit
val find_arguments_scope :
  Names.GlobRef.t -> Notation_term.scope_name list list
type scope_class
val scope_class_compare : scope_class -> scope_class -> int
val subst_scope_class :
  Environ.env -> Mod_subst.substitution -> scope_class -> scope_class option
type add_scope_where = AddScopeTop | AddScopeBottom
val declare_scope_class :
  Notation_term.scope_name -> ?where:add_scope_where -> scope_class -> unit
val declare_ref_arguments_scope : Names.GlobRef.t -> unit
val compute_arguments_scope :
  Environ.env ->
  Evd.evar_map -> EConstr.types -> Notation_term.scope_name list list
val compute_type_scope :
  Environ.env ->
  Evd.evar_map -> EConstr.types -> Notation_term.scope_name list
val current_type_scope_names : unit -> Notation_term.scope_name list
val scope_class_of_class : Coercionops.cl_typ -> scope_class
type symbol =
    Terminal of string
  | NonTerminal of Names.Id.t
  | SProdList of Names.Id.t * symbol list
  | Break of int
val symbol_eq : symbol -> symbol -> bool
val make_notation_key :
  Constrexpr.notation_entry -> symbol list -> Constrexpr.notation
val decompose_notation_key :
  Constrexpr.notation -> Constrexpr.notation_entry * symbol list
type notation_symbols = {
  recvars : (Names.Id.t * Names.Id.t) list;
  mainvars : Names.Id.t list;
  symbols : symbol list;
}
val decompose_raw_notation : string -> notation_symbols
val pr_scope_class : scope_class -> Pp.t
val pr_scope :
  (Glob_term.glob_constr -> Pp.t) -> Notation_term.scope_name -> Pp.t
val pr_scopes : (Glob_term.glob_constr -> Pp.t) -> Pp.t
val locate_notation :
  (Glob_term.glob_constr -> Pp.t) ->
  Constrexpr.notation_key -> Notation_term.scope_name option -> Pp.t
val pr_visibility :
  (Glob_term.glob_constr -> Pp.t) -> Notation_term.scope_name option -> Pp.t
val is_coercion :
  Constrexpr.notation_entry_level ->
  Constrexpr.notation_entry_relative_level -> bool
val declare_entry_coercion :
  Constrexpr.specific_notation ->
  Constrexpr.notation_entry_level ->
  Constrexpr.notation_entry_relative_level -> unit
type entry_coercion =
    (Constrexpr.notation_with_optional_scope * Constrexpr.notation) list
val availability_of_entry_coercion :
  Constrexpr.notation_entry_relative_level ->
  Constrexpr.notation_entry_level -> entry_coercion option
val declare_custom_entry_has_global : string -> int -> unit
val declare_custom_entry_has_ident : string -> int -> unit
val entry_has_global : Constrexpr.notation_entry_relative_level -> bool
val entry_has_ident : Constrexpr.notation_entry_relative_level -> bool
val declare_notation_level :
  Constrexpr.notation -> Notationextern.level -> unit
val level_of_notation : Constrexpr.notation -> Notationextern.level
val with_notation_protection : ('a -> 'b) -> 'a -> 'b
("DEBUG:rule", [(("notation_cat", 2601), ((Tag3 (Tag1 ((Tag2 ("Libobject")), "category"), 0, (0)), 100000000, 0, -539), 0, (("interp/notation.mli", 20, 790, 790), ("interp/notation.mli", 20, 790, 827), 0), 0, Tag1 ("Notation", 2)), 0); (("pr_notation", 2602), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "notation"), 0, (0)), 100000000, 0, -538), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -537), 0), 100000000, 0, -536), 0, (("interp/notation.mli", 22, 829, 829), ("interp/notation.mli", 22, 829, 863), 0), 0, Tag1 ("Notation", 3)), 0); Tag3 (("NotationSet", 2603), 0, (Tag1 ([Tag1 (("elt", 2704), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Constrexpr")), "notation"), 0, (0)), 100000000, 0, -766)), 0, 0, 0, 0, (("interp/notation.mli", 25, 881, 913), ("interp/notation.mli", 25, 881, 932), 0), 0, 0, 0, Tag1 ("Notation", 4)), 1, 0); Tag1 (("t", 2705), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("set.mli", 74, 2901, 2905), ("set.mli", 74, 2901, 2911), 0), 0, 0, 0, Tag1 ("Stdlib__Set", 4)), 1, 0); (("empty", 2706), ((Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -765), 0, (("set.mli", 77, 2942, 2946), ("set.mli", 77, 2942, 2958), 0), 0, Tag1 ("Stdlib__Set", 5)), 0); (("add", 2707), ((Tag1 (0, (Tag3 ((("elt", 2704)), 0, (0)), 100000000, 0, -764), (Tag1 (0, (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -763), (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -762), 0), 100000000, 0, -761), 0), 100000000, 0, -760), 0, (("set.mli", 80, 2986, 2990), ("set.mli", 80, 2986, 3012), 0), 0, Tag1 ("Stdlib__Set", 6)), 0); (("singleton", 2708), ((Tag1 (0, (Tag3 ((("elt", 2704)), 0, (0)), 100000000, 0, -759), (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -758), 0), 100000000, 0, -757), 0, (("set.mli", 86, 3278, 3282), ("set.mli", 86, 3278, 3305), 0), 0, Tag1 ("Stdlib__Set", 7)), 0); (("remove", 2709), ((Tag1 (0, (Tag3 ((("elt", 2704)), 0, (0)), 100000000, 0, -756), (Tag1 (0, (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -755), (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -754), 0), 100000000, 0, -753), 0), 100000000, 0, -752), 0, (("set.mli", 89, 3381, 3385), ("set.mli", 89, 3381, 3410), 0), 0, Tag1 ("Stdlib__Set", 8)), 0); (("union", 2710), ((Tag1 (0, (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -751), (Tag1 (0, (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -750), (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -749), 0), 100000000, 0, -748), 0), 100000000, 0, -747), 0, (("set.mli", 95, 3677, 3681), ("set.mli", 95, 3677, 3703), 0), 0, Tag1 ("Stdlib__Set", 9)), 0); (("inter", 2711), ((Tag1 (0, (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -746), (Tag1 (0, (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -745), (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -744), 0), 100000000, 0, -743), 0), 100000000, 0, -742), 0, (("set.mli", 98, 3727, 3731), ("set.mli", 98, 3727, 3753), 0), 0, Tag1 ("Stdlib__Set", 10)), 0); (("disjoint", 2712), ((Tag1 (0, (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -741), (Tag1 (0, (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -740), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -739), 0), 100000000, 0, -738), 0), 100000000, 0, -737), 0, (("set.mli", 101, 3784, 3788), ("set.mli", 101, 3784, 3816), 0), 0, Tag1 ("Stdlib__Set", 11)), 0); (("diff", 2713), ((Tag1 (0, (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -736), (Tag1 (0, (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -735), (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -734), 0), 100000000, 0, -733), 0), 100000000, 0, -732), 0, (("set.mli", 105, 3880, 3884), ("set.mli", 105, 3880, 3905), 0), 0, Tag1 ("Stdlib__Set", 12)), 0); (("cardinal", 2714), ((Tag1 (0, (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -731), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -730), 0), 100000000, 0, -729), 0, (("set.mli", 109, 4007, 4011), ("set.mli", 109, 4007, 4033), 0), 0, Tag1 ("Stdlib__Set", 13)), 0); (("elements", 2715), ((Tag1 (0, (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -728), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 2704)), 0, (0)), 100000000, 0, -727)], (0)), 100000000, 0, -726), 0), 100000000, 0, -725), 0, (("set.mli", 114, 4120, 4124), ("set.mli", 114, 4120, 4151), 0), 0, Tag1 ("Stdlib__Set", 14)), 0); (("min_elt", 2716), ((Tag1 (0, (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -724), (Tag3 ((("elt", 2704)), 0, (0)), 100000000, 0, -723), 0), 100000000, 0, -722), 0, (("set.mli", 120, 4380, 4384), ("set.mli", 120, 4380, 4405), 0), 0, Tag1 ("Stdlib__Set", 15)), 0); (("min_elt_opt", 2717), ((Tag1 (0, (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -721), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2704)), 0, (0)), 100000000, 0, -720)], (0)), 100000000, 0, -719), 0), 100000000, 0, -718), 0, (("set.mli", 125, 4567, 4571), ("set.mli", 125, 4567, 4603), 0), 0, Tag1 ("Stdlib__Set", 16)), 0); (("max_elt", 2718), ((Tag1 (0, (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -717), (Tag3 ((("elt", 2704)), 0, (0)), 100000000, 0, -716), 0), 100000000, 0, -715), 0, (("set.mli", 131, 4774, 4778), ("set.mli", 131, 4774, 4799), 0), 0, Tag1 ("Stdlib__Set", 17)), 0); (("max_elt_opt", 2719), ((Tag1 (0, (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -714), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2704)), 0, (0)), 100000000, 0, -713)], (0)), 100000000, 0, -712), 0), 100000000, 0, -711), 0, (("set.mli", 135, 4890, 4894), ("set.mli", 135, 4890, 4926), 0), 0, Tag1 ("Stdlib__Set", 18)), 0); (("choose", 2720), ((Tag1 (0, (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -710), (Tag3 ((("elt", 2704)), 0, (0)), 100000000, 0, -709), 0), 100000000, 0, -708), 0, (("set.mli", 140, 5041, 5045), ("set.mli", 140, 5041, 5065), 0), 0, Tag1 ("Stdlib__Set", 19)), 0); (("choose_opt", 2721), ((Tag1 (0, (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -707), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2704)), 0, (0)), 100000000, 0, -706)], (0)), 100000000, 0, -705), 0), 100000000, 0, -704), 0, (("set.mli", 145, 5263, 5267), ("set.mli", 145, 5263, 5298), 0), 0, Tag1 ("Stdlib__Set", 20)), 0); (("find", 2722), ((Tag1 (0, (Tag3 ((("elt", 2704)), 0, (0)), 100000000, 0, -703), (Tag1 (0, (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -702), (Tag3 ((("elt", 2704)), 0, (0)), 100000000, 0, -701), 0), 100000000, 0, -700), 0), 100000000, 0, -699), 0, (("set.mli", 153, 5541, 5549), ("set.mli", 153, 5541, 5574), 0), 0, Tag1 ("Stdlib__Set", 21)), 0); (("find_opt", 2723), ((Tag1 (0, (Tag3 ((("elt", 2704)), 0, (0)), 100000000, 0, -698), (Tag1 (0, (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -697), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2704)), 0, (0)), 100000000, 0, -696)], (0)), 100000000, 0, -695), 0), 100000000, 0, -694), 0), 100000000, 0, -693), 0, (("set.mli", 159, 5752, 5756), ("set.mli", 159, 5752, 5792), 0), 0, Tag1 ("Stdlib__Set", 22)), 0); (("find_first", 2724), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2704)), 0, (0)), 100000000, 0, -692), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -691), 0), 100000000, 0, -690), (Tag1 (0, (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -689), (Tag3 ((("elt", 2704)), 0, (0)), 100000000, 0, -688), 0), 100000000, 0, -687), 0), 100000000, 0, -686), 0, (("set.mli", 165, 5963, 5967), ("set.mli", 165, 5963, 6008), 0), 0, Tag1 ("Stdlib__Set", 23)), 0); (("find_first_opt", 2725), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2704)), 0, (0)), 100000000, 0, -685), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -684), 0), 100000000, 0, -683), (Tag1 (0, (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -682), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2704)), 0, (0)), 100000000, 0, -681)], (0)), 100000000, 0, -680), 0), 100000000, 0, -679), 0), 100000000, 0, -678), 0, (("set.mli", 177, 6482, 6486), ("set.mli", 177, 6482, 6538), 0), 0, Tag1 ("Stdlib__Set", 24)), 0); (("find_last", 2726), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2704)), 0, (0)), 100000000, 0, -677), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -676), 0), 100000000, 0, -675), (Tag1 (0, (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -674), (Tag3 ((("elt", 2704)), 0, (0)), 100000000, 0, -673), 0), 100000000, 0, -672), 0), 100000000, 0, -671), 0, (("set.mli", 184, 6779, 6783), ("set.mli", 184, 6779, 6823), 0), 0, Tag1 ("Stdlib__Set", 25)), 0); (("find_last_opt", 2727), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2704)), 0, (0)), 100000000, 0, -670), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -669), 0), 100000000, 0, -668), (Tag1 (0, (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -667), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2704)), 0, (0)), 100000000, 0, -666)], (0)), 100000000, 0, -665), 0), 100000000, 0, -664), 0), 100000000, 0, -663), 0, (("set.mli", 190, 7044, 7048), ("set.mli", 190, 7044, 7099), 0), 0, Tag1 ("Stdlib__Set", 26)), 0); (("iter", 2728), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2704)), 0, (0)), 100000000, 0, -662), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -661), 0), 100000000, 0, -660), (Tag1 (0, (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -659), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -658), 0), 100000000, 0, -657), 0), 100000000, 0, -656), 0, (("set.mli", 198, 7371, 7375), ("set.mli", 198, 7371, 7411), 0), 0, Tag1 ("Stdlib__Set", 27)), 0); (("fold", 2729), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2704)), 0, (0)), 100000000, 0, -655), (Tag1 (0, ((("acc")), 100000000, 0, -651), ((("acc")), 100000000, 0, -651), 0), 100000000, 0, -654), 0), 100000000, 0, -653), (Tag1 (0, (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -652), (Tag1 (0, ((("acc")), 100000000, 0, -651), ((("acc")), 100000000, 0, -651), 0), 100000000, 0, -650), 0), 100000000, 0, -649), 0), 100000000, 0, -648), 0, (("set.mli", 203, 7616, 7620), ("set.mli", 203, 7616, 7672), 0), 0, Tag1 ("Stdlib__Set", 28)), 0); (("map", 2730), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2704)), 0, (0)), 100000000, 0, -647), (Tag3 ((("elt", 2704)), 0, (0)), 100000000, 0, -646), 0), 100000000, 0, -645), (Tag1 (0, (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -644), (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -643), 0), 100000000, 0, -642), 0), 100000000, 0, -641), 0, (("set.mli", 209, 7860, 7864), ("set.mli", 209, 7860, 7895), 0), 0, Tag1 ("Stdlib__Set", 29)), 0); (("filter", 2731), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2704)), 0, (0)), 100000000, 0, -640), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -639), 0), 100000000, 0, -638), (Tag1 (0, (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -637), (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -636), 0), 100000000, 0, -635), 0), 100000000, 0, -634), 0, (("set.mli", 221, 8372, 8376), ("set.mli", 221, 8372, 8411), 0), 0, Tag1 ("Stdlib__Set", 30)), 0); (("filter_map", 2732), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2704)), 0, (0)), 100000000, 0, -633), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2704)), 0, (0)), 100000000, 0, -632)], (0)), 100000000, 0, -631), 0), 100000000, 0, -630), (Tag1 (0, (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -629), (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -628), 0), 100000000, 0, -627), 0), 100000000, 0, -626), 0, (("set.mli", 228, 8710, 8714), ("set.mli", 228, 8710, 8759), 0), 0, Tag1 ("Stdlib__Set", 31)), 0); (("partition", 2733), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2704)), 0, (0)), 100000000, 0, -625), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -624), 0), 100000000, 0, -623), (Tag1 (0, (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -622), (Tag2 ([(Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -620); (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -621)]), 100000000, 0, -619), 0), 100000000, 0, -618), 0), 100000000, 0, -617), 0, (("set.mli", 243, 9275, 9279), ("set.mli", 243, 9275, 9321), 0), 0, Tag1 ("Stdlib__Set", 32)), 0); (("split", 2734), ((Tag1 (0, (Tag3 ((("elt", 2704)), 0, (0)), 100000000, 0, -616), (Tag1 (0, (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -615), (Tag2 ([(Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -612); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -613); (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -614)]), 100000000, 0, -611), 0), 100000000, 0, -610), 0), 100000000, 0, -609), 0, (("set.mli", 249, 9562, 9566), ("set.mli", 249, 9562, 9601), 0), 0, Tag1 ("Stdlib__Set", 33)), 0); (("is_empty", 2735), ((Tag1 (0, (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -608), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -607), 0), 100000000, 0, -606), 0, (("set.mli", 260, 10020, 10024), ("set.mli", 260, 10020, 10047), 0), 0, Tag1 ("Stdlib__Set", 34)), 0); (("mem", 2736), ((Tag1 (0, (Tag3 ((("elt", 2704)), 0, (0)), 100000000, 0, -605), (Tag1 (0, (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -604), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -603), 0), 100000000, 0, -602), 0), 100000000, 0, -601), 0, (("set.mli", 263, 10096, 10100), ("set.mli", 263, 10096, 10125), 0), 0, Tag1 ("Stdlib__Set", 35)), 0); (("equal", 2737), ((Tag1 (0, (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -600), (Tag1 (0, (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -599), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -598), 0), 100000000, 0, -597), 0), 100000000, 0, -596), 0, (("set.mli", 266, 10190, 10194), ("set.mli", 266, 10190, 10219), 0), 0, Tag1 ("Stdlib__Set", 36)), 0); (("compare", 2738), ((Tag1 (0, (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -595), (Tag1 (0, (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -594), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -593), 0), 100000000, 0, -592), 0), 100000000, 0, -591), 0, (("set.mli", 270, 10335, 10339), ("set.mli", 270, 10335, 10365), 0), 0, Tag1 ("Stdlib__Set", 37)), 0); (("subset", 2739), ((Tag1 (0, (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -590), (Tag1 (0, (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -589), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -588), 0), 100000000, 0, -587), 0), 100000000, 0, -586), 0, (("set.mli", 274, 10476, 10480), ("set.mli", 274, 10476, 10506), 0), 0, Tag1 ("Stdlib__Set", 38)), 0); (("for_all", 2740), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2704)), 0, (0)), 100000000, 0, -585), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -584), 0), 100000000, 0, -583), (Tag1 (0, (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -582), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -581), 0), 100000000, 0, -580), 0), 100000000, 0, -579), 0, (("set.mli", 278, 10598, 10602), ("set.mli", 278, 10598, 10641), 0), 0, Tag1 ("Stdlib__Set", 39)), 0); (("exists", 2741), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2704)), 0, (0)), 100000000, 0, -578), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -577), 0), 100000000, 0, -576), (Tag1 (0, (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -575), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -574), 0), 100000000, 0, -573), 0), 100000000, 0, -572), 0, (("set.mli", 282, 10737, 10741), ("set.mli", 282, 10737, 10779), 0), 0, Tag1 ("Stdlib__Set", 40)), 0); (("to_list", 2742), ((Tag1 (0, (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -571), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 2704)), 0, (0)), 100000000, 0, -570)], (0)), 100000000, 0, -569), 0), 100000000, 0, -568), 0, (("set.mli", 288, 10922, 10926), ("set.mli", 288, 10922, 10953), 0), 0, Tag1 ("Stdlib__Set", 41)), 0); (("of_list", 2743), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 2704)), 0, (0)), 100000000, 0, -567)], (0)), 100000000, 0, -566), (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -565), 0), 100000000, 0, -564), 0, (("set.mli", 292, 11017, 11021), ("set.mli", 292, 11017, 11047), 0), 0, Tag1 ("Stdlib__Set", 42)), 0); (("to_seq_from", 2744), ((Tag1 (0, (Tag3 ((("elt", 2704)), 0, (0)), 100000000, 0, -563), (Tag1 (0, (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -562), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2704)), 0, (0)), 100000000, 0, -561)], (0)), 100000000, 0, -560), 0), 100000000, 0, -559), 0), 100000000, 0, -558), 0, (("set.mli", 298, 11268, 11272), ("set.mli", 298, 11268, 11311), 0), 0, Tag1 ("Stdlib__Set", 43)), 0); (("to_seq", 2745), ((Tag1 (0, (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -557), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2704)), 0, (0)), 100000000, 0, -556)], (0)), 100000000, 0, -555), 0), 100000000, 0, -554), 0, (("set.mli", 303, 11453, 11457), ("set.mli", 303, 11453, 11484), 0), 0, Tag1 ("Stdlib__Set", 44)), 0); (("to_rev_seq", 2746), ((Tag1 (0, (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -553), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2704)), 0, (0)), 100000000, 0, -552)], (0)), 100000000, 0, -551), 0), 100000000, 0, -550), 0, (("set.mli", 307, 11562, 11566), ("set.mli", 307, 11562, 11597), 0), 0, Tag1 ("Stdlib__Set", 45)), 0); (("add_seq", 2747), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2704)), 0, (0)), 100000000, 0, -549)], (0)), 100000000, 0, -548), (Tag1 (0, (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -547), (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -546), 0), 100000000, 0, -545), 0), 100000000, 0, -544), 0, (("set.mli", 311, 11676, 11680), ("set.mli", 311, 11676, 11713), 0), 0, Tag1 ("Stdlib__Set", 46)), 0); (("of_seq", 2748), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2704)), 0, (0)), 100000000, 0, -543)], (0)), 100000000, 0, -542), (Tag3 ((("t", 2705)), 0, (0)), 100000000, 0, -541), 0), 100000000, 0, -540), 0, (("set.mli", 315, 11791, 11795), ("set.mli", 315, 11791, 11822), 0), 0, Tag1 ("Stdlib__Set", 47)), 0)]), 0, (("interp/notation.mli", 25, 881, 881), ("interp/notation.mli", 25, 881, 932), 0), Tag1 ("Notation", 5)), 0, 0); Tag3 (("NotationMap", 2604), 0, (Tag1 ([Tag1 (("key", 2749), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Constrexpr")), "notation"), 0, (0)), 100000000, 0, -1066)), 0, 0, 0, 0, (("interp/notation.mli", 26, 933, 954), ("interp/notation.mli", 26, 933, 1018), 0), 0, 0, 0, Tag1 ("Notation", 6)), 1, 0); Tag1 (("t", 2750), ([((("a")), 100000000, 0, -1065)], 1, 0, 1, 0, [1], [2], 0, 0, (("interp/notation.mli", 26, 933, 954), ("interp/notation.mli", 26, 933, 1018), 0), 0, 0, 0, Tag1 ("CSig", 36)), 1, 0); (("empty", 2751), ((Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -1064)], (0)), 100000000, 0, -1063), 0, (("interp/notation.mli", 26, 933, 954), ("interp/notation.mli", 26, 933, 1018), 0), 0, Tag1 ("CSig", 37)), 0); (("is_empty", 2752), ((Tag1 (0, (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -1062)], (0)), 100000000, 0, -1061), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1060), 0), 100000000, 0, -1059), 0, (("interp/notation.mli", 26, 933, 954), ("interp/notation.mli", 26, 933, 1018), 0), 0, Tag1 ("CSig", 38)), 0); (("mem", 2753), ((Tag1 (0, (Tag3 ((("key", 2749)), 0, (0)), 100000000, 0, -1058), (Tag1 (0, (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -1057)], (0)), 100000000, 0, -1056), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1055), 0), 100000000, 0, -1054), 0), 100000000, 0, -1053), 0, (("interp/notation.mli", 26, 933, 954), ("interp/notation.mli", 26, 933, 1018), 0), 0, Tag1 ("CSig", 39)), 0); (("add", 2754), ((Tag1 (0, (Tag3 ((("key", 2749)), 0, (0)), 100000000, 0, -1052), (Tag1 (0, ((("a")), 100000000, 0, -1050), (Tag1 (0, (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -1050)], (0)), 100000000, 0, -1051), (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -1050)], (0)), 100000000, 0, -1049), 0), 100000000, 0, -1048), 0), 100000000, 0, -1047), 0), 100000000, 0, -1046), 0, (("interp/notation.mli", 26, 933, 954), ("interp/notation.mli", 26, 933, 1018), 0), 0, Tag1 ("CSig", 40)), 0); (("update", 2755), ((Tag1 (0, (Tag3 ((("key", 2749)), 0, (0)), 100000000, 0, -1045), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1040)], (0)), 100000000, 0, -1044), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1040)], (0)), 100000000, 0, -1043), 0), 100000000, 0, -1042), (Tag1 (0, (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -1040)], (0)), 100000000, 0, -1041), (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -1040)], (0)), 100000000, 0, -1039), 0), 100000000, 0, -1038), 0), 100000000, 0, -1037), 0), 100000000, 0, -1036), 0, (("interp/notation.mli", 26, 933, 954), ("interp/notation.mli", 26, 933, 1018), 0), 0, Tag1 ("CSig", 41)), 0); (("singleton", 2756), ((Tag1 (0, (Tag3 ((("key", 2749)), 0, (0)), 100000000, 0, -1035), (Tag1 (0, ((("a")), 100000000, 0, -1034), (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -1034)], (0)), 100000000, 0, -1033), 0), 100000000, 0, -1032), 0), 100000000, 0, -1031), 0, (("interp/notation.mli", 26, 933, 954), ("interp/notation.mli", 26, 933, 1018), 0), 0, Tag1 ("CSig", 42)), 0); (("remove", 2757), ((Tag1 (0, (Tag3 ((("key", 2749)), 0, (0)), 100000000, 0, -1030), (Tag1 (0, (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -1028)], (0)), 100000000, 0, -1029), (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -1028)], (0)), 100000000, 0, -1027), 0), 100000000, 0, -1026), 0), 100000000, 0, -1025), 0, (("interp/notation.mli", 26, 933, 954), ("interp/notation.mli", 26, 933, 1018), 0), 0, Tag1 ("CSig", 43)), 0); (("merge", 2758), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 2749)), 0, (0)), 100000000, 0, -1024), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1017)], (0)), 100000000, 0, -1023), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -1015)], (0)), 100000000, 0, -1022), (Tag3 ((Tag3 ("option", 10)), [((("c")), 100000000, 0, -1013)], (0)), 100000000, 0, -1021), 0), 100000000, 0, -1020), 0), 100000000, 0, -1019), 0), 100000000, 0, -1018), (Tag1 (0, (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -1017)], (0)), 100000000, 0, -1016), (Tag1 (0, (Tag3 ((("t", 2750)), [((("b")), 100000000, 0, -1015)], (0)), 100000000, 0, -1014), (Tag3 ((("t", 2750)), [((("c")), 100000000, 0, -1013)], (0)), 100000000, 0, -1012), 0), 100000000, 0, -1011), 0), 100000000, 0, -1010), 0), 100000000, 0, -1009), 0, (("interp/notation.mli", 26, 933, 954), ("interp/notation.mli", 26, 933, 1018), 0), 0, Tag1 ("CSig", 44)), 0); (("union", 2759), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 2749)), 0, (0)), 100000000, 0, -1008), (Tag1 (0, ((("a")), 100000000, 0, -1001), (Tag1 (0, ((("a")), 100000000, 0, -1001), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1001)], (0)), 100000000, 0, -1007), 0), 100000000, 0, -1006), 0), 100000000, 0, -1005), 0), 100000000, 0, -1004), (Tag1 (0, (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -1001)], (0)), 100000000, 0, -1003), (Tag1 (0, (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -1001)], (0)), 100000000, 0, -1002), (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -1001)], (0)), 100000000, 0, -1000), 0), 100000000, 0, -999), 0), 100000000, 0, -998), 0), 100000000, 0, -997), 0, (("interp/notation.mli", 26, 933, 954), ("interp/notation.mli", 26, 933, 1018), 0), 0, Tag1 ("CSig", 45)), 0); (("compare", 2760), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -992), (Tag1 (0, ((("a")), 100000000, 0, -992), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -996), 0), 100000000, 0, -995), 0), 100000000, 0, -994), (Tag1 (0, (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -992)], (0)), 100000000, 0, -993), (Tag1 (0, (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -992)], (0)), 100000000, 0, -991), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -990), 0), 100000000, 0, -989), 0), 100000000, 0, -988), 0), 100000000, 0, -987), 0, (("interp/notation.mli", 26, 933, 954), ("interp/notation.mli", 26, 933, 1018), 0), 0, Tag1 ("CSig", 46)), 0); (("equal", 2761), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -982), (Tag1 (0, ((("a")), 100000000, 0, -982), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -986), 0), 100000000, 0, -985), 0), 100000000, 0, -984), (Tag1 (0, (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -982)], (0)), 100000000, 0, -983), (Tag1 (0, (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -982)], (0)), 100000000, 0, -981), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -980), 0), 100000000, 0, -979), 0), 100000000, 0, -978), 0), 100000000, 0, -977), 0, (("interp/notation.mli", 26, 933, 954), ("interp/notation.mli", 26, 933, 1018), 0), 0, Tag1 ("CSig", 47)), 0); (("iter", 2762), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 2749)), 0, (0)), 100000000, 0, -976), (Tag1 (0, ((("a")), 100000000, 0, -972), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -975), 0), 100000000, 0, -974), 0), 100000000, 0, -973), (Tag1 (0, (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -972)], (0)), 100000000, 0, -971), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -970), 0), 100000000, 0, -969), 0), 100000000, 0, -968), 0, (("interp/notation.mli", 26, 933, 954), ("interp/notation.mli", 26, 933, 1018), 0), 0, Tag1 ("CSig", 48)), 0); (("fold", 2763), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 2749)), 0, (0)), 100000000, 0, -967), (Tag1 (0, ((("a")), 100000000, 0, -963), (Tag1 (0, ((("b")), 100000000, 0, -961), ((("b")), 100000000, 0, -961), 0), 100000000, 0, -966), 0), 100000000, 0, -965), 0), 100000000, 0, -964), (Tag1 (0, (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -963)], (0)), 100000000, 0, -962), (Tag1 (0, ((("b")), 100000000, 0, -961), ((("b")), 100000000, 0, -961), 0), 100000000, 0, -960), 0), 100000000, 0, -959), 0), 100000000, 0, -958), 0, (("interp/notation.mli", 26, 933, 954), ("interp/notation.mli", 26, 933, 1018), 0), 0, Tag1 ("CSig", 49)), 0); (("for_all", 2764), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 2749)), 0, (0)), 100000000, 0, -957), (Tag1 (0, ((("a")), 100000000, 0, -953), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -956), 0), 100000000, 0, -955), 0), 100000000, 0, -954), (Tag1 (0, (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -953)], (0)), 100000000, 0, -952), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -951), 0), 100000000, 0, -950), 0), 100000000, 0, -949), 0, (("interp/notation.mli", 26, 933, 954), ("interp/notation.mli", 26, 933, 1018), 0), 0, Tag1 ("CSig", 50)), 0); (("exists", 2765), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 2749)), 0, (0)), 100000000, 0, -948), (Tag1 (0, ((("a")), 100000000, 0, -944), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -947), 0), 100000000, 0, -946), 0), 100000000, 0, -945), (Tag1 (0, (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -944)], (0)), 100000000, 0, -943), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -942), 0), 100000000, 0, -941), 0), 100000000, 0, -940), 0, (("interp/notation.mli", 26, 933, 954), ("interp/notation.mli", 26, 933, 1018), 0), 0, Tag1 ("CSig", 51)), 0); (("filter", 2766), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 2749)), 0, (0)), 100000000, 0, -939), (Tag1 (0, ((("a")), 100000000, 0, -934), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -938), 0), 100000000, 0, -937), 0), 100000000, 0, -936), (Tag1 (0, (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -934)], (0)), 100000000, 0, -935), (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -934)], (0)), 100000000, 0, -933), 0), 100000000, 0, -932), 0), 100000000, 0, -931), 0, (("interp/notation.mli", 26, 933, 954), ("interp/notation.mli", 26, 933, 1018), 0), 0, Tag1 ("CSig", 52)), 0); (("partition", 2767), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 2749)), 0, (0)), 100000000, 0, -930), (Tag1 (0, ((("a")), 100000000, 0, -924), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -929), 0), 100000000, 0, -928), 0), 100000000, 0, -927), (Tag1 (0, (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -924)], (0)), 100000000, 0, -926), (Tag2 ([(Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -924)], (0)), 100000000, 0, -923); (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -924)], (0)), 100000000, 0, -925)]), 100000000, 0, -922), 0), 100000000, 0, -921), 0), 100000000, 0, -920), 0, (("interp/notation.mli", 26, 933, 954), ("interp/notation.mli", 26, 933, 1018), 0), 0, Tag1 ("CSig", 53)), 0); (("cardinal", 2768), ((Tag1 (0, (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -919)], (0)), 100000000, 0, -918), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -917), 0), 100000000, 0, -916), 0, (("interp/notation.mli", 26, 933, 954), ("interp/notation.mli", 26, 933, 1018), 0), 0, Tag1 ("CSig", 54)), 0); (("bindings", 2769), ((Tag1 (0, (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -914)], (0)), 100000000, 0, -915), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("key", 2749)), 0, (0)), 100000000, 0, -913); ((("a")), 100000000, 0, -914)]), 100000000, 0, -912)], (0)), 100000000, 0, -911), 0), 100000000, 0, -910), 0, (("interp/notation.mli", 26, 933, 954), ("interp/notation.mli", 26, 933, 1018), 0), 0, Tag1 ("CSig", 55)), 0); (("min_binding", 2770), ((Tag1 (0, (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -908)], (0)), 100000000, 0, -909), (Tag2 ([(Tag3 ((("key", 2749)), 0, (0)), 100000000, 0, -907); ((("a")), 100000000, 0, -908)]), 100000000, 0, -906), 0), 100000000, 0, -905), 0, (("interp/notation.mli", 26, 933, 954), ("interp/notation.mli", 26, 933, 1018), 0), 0, Tag1 ("CSig", 56)), 0); (("max_binding", 2771), ((Tag1 (0, (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -903)], (0)), 100000000, 0, -904), (Tag2 ([(Tag3 ((("key", 2749)), 0, (0)), 100000000, 0, -902); ((("a")), 100000000, 0, -903)]), 100000000, 0, -901), 0), 100000000, 0, -900), 0, (("interp/notation.mli", 26, 933, 954), ("interp/notation.mli", 26, 933, 1018), 0), 0, Tag1 ("CSig", 57)), 0); (("choose", 2772), ((Tag1 (0, (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -898)], (0)), 100000000, 0, -899), (Tag2 ([(Tag3 ((("key", 2749)), 0, (0)), 100000000, 0, -897); ((("a")), 100000000, 0, -898)]), 100000000, 0, -896), 0), 100000000, 0, -895), 0, (("interp/notation.mli", 26, 933, 954), ("interp/notation.mli", 26, 933, 1018), 0), 0, Tag1 ("CSig", 58)), 0); (("choose_opt", 2773), ((Tag1 (0, (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -893)], (0)), 100000000, 0, -894), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("key", 2749)), 0, (0)), 100000000, 0, -892); ((("a")), 100000000, 0, -893)]), 100000000, 0, -891)], (0)), 100000000, 0, -890), 0), 100000000, 0, -889), 0, (("interp/notation.mli", 26, 933, 954), ("interp/notation.mli", 26, 933, 1018), 0), 0, Tag1 ("CSig", 59)), 0); (("split", 2774), ((Tag1 (0, (Tag3 ((("key", 2749)), 0, (0)), 100000000, 0, -888), (Tag1 (0, (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -884)], (0)), 100000000, 0, -887), (Tag2 ([(Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -884)], (0)), 100000000, 0, -883); (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -884)], (0)), 100000000, 0, -885); (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -884)], (0)), 100000000, 0, -886)]), 100000000, 0, -882), 0), 100000000, 0, -881), 0), 100000000, 0, -880), 0, (("interp/notation.mli", 26, 933, 954), ("interp/notation.mli", 26, 933, 1018), 0), 0, Tag1 ("CSig", 60)), 0); (("find", 2775), ((Tag1 (0, (Tag3 ((("key", 2749)), 0, (0)), 100000000, 0, -879), (Tag1 (0, (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -877)], (0)), 100000000, 0, -878), ((("a")), 100000000, 0, -877), 0), 100000000, 0, -876), 0), 100000000, 0, -875), 0, (("interp/notation.mli", 26, 933, 954), ("interp/notation.mli", 26, 933, 1018), 0), 0, Tag1 ("CSig", 61)), 0); (("find_opt", 2776), ((Tag1 (0, (Tag3 ((("key", 2749)), 0, (0)), 100000000, 0, -874), (Tag1 (0, (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -872)], (0)), 100000000, 0, -873), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -872)], (0)), 100000000, 0, -871), 0), 100000000, 0, -870), 0), 100000000, 0, -869), 0, (("interp/notation.mli", 26, 933, 954), ("interp/notation.mli", 26, 933, 1018), 0), 0, Tag1 ("CSig", 62)), 0); (("map", 2777), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -867), ((("b")), 100000000, 0, -865), 0), 100000000, 0, -868), (Tag1 (0, (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -867)], (0)), 100000000, 0, -866), (Tag3 ((("t", 2750)), [((("b")), 100000000, 0, -865)], (0)), 100000000, 0, -864), 0), 100000000, 0, -863), 0), 100000000, 0, -862), 0, (("interp/notation.mli", 26, 933, 954), ("interp/notation.mli", 26, 933, 1018), 0), 0, Tag1 ("CSig", 63)), 0); (("mapi", 2778), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 2749)), 0, (0)), 100000000, 0, -861), (Tag1 (0, ((("a")), 100000000, 0, -858), ((("b")), 100000000, 0, -856), 0), 100000000, 0, -860), 0), 100000000, 0, -859), (Tag1 (0, (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -858)], (0)), 100000000, 0, -857), (Tag3 ((("t", 2750)), [((("b")), 100000000, 0, -856)], (0)), 100000000, 0, -855), 0), 100000000, 0, -854), 0), 100000000, 0, -853), 0, (("interp/notation.mli", 26, 933, 954), ("interp/notation.mli", 26, 933, 1018), 0), 0, Tag1 ("CSig", 64)), 0); (("get", 2779), ((Tag1 (0, (Tag3 ((("key", 2749)), 0, (0)), 100000000, 0, -852), (Tag1 (0, (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -850)], (0)), 100000000, 0, -851), ((("a")), 100000000, 0, -850), 0), 100000000, 0, -849), 0), 100000000, 0, -848), 0, (("interp/notation.mli", 26, 933, 954), ("interp/notation.mli", 26, 933, 1018), 0), 0, Tag1 ("CMap", 10)), 0); (("set", 2780), ((Tag1 (0, (Tag3 ((("key", 2749)), 0, (0)), 100000000, 0, -847), (Tag1 (0, ((("a")), 100000000, 0, -845), (Tag1 (0, (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -845)], (0)), 100000000, 0, -846), (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -845)], (0)), 100000000, 0, -844), 0), 100000000, 0, -843), 0), 100000000, 0, -842), 0), 100000000, 0, -841), 0, (("interp/notation.mli", 26, 933, 954), ("interp/notation.mli", 26, 933, 1018), 0), 0, Tag1 ("CMap", 11)), 0); (("modify", 2781), ((Tag1 (0, (Tag3 ((("key", 2749)), 0, (0)), 100000000, 0, -840), (Tag1 (0, (Tag1 (0, (Tag3 ((("key", 2749)), 0, (0)), 100000000, 0, -839), (Tag1 (0, ((("a")), 100000000, 0, -835), ((("a")), 100000000, 0, -835), 0), 100000000, 0, -838), 0), 100000000, 0, -837), (Tag1 (0, (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -835)], (0)), 100000000, 0, -836), (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -835)], (0)), 100000000, 0, -834), 0), 100000000, 0, -833), 0), 100000000, 0, -832), 0), 100000000, 0, -831), 0, (("interp/notation.mli", 26, 933, 954), ("interp/notation.mli", 26, 933, 1018), 0), 0, Tag1 ("CMap", 12)), 0); (("domain", 2782), ((Tag1 (0, (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -830)], (0)), 100000000, 0, -829), (Tag3 (Tag1 ((("NotationSet", 2603)), "t"), 0, (0)), 100000000, 0, -828), 0), 100000000, 0, -827), 0, (("interp/notation.mli", 26, 933, 954), ("interp/notation.mli", 26, 933, 1018), 0), 0, Tag1 ("CMap", 13)), 0); (("bind", 2783), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 2749)), 0, (0)), 100000000, 0, -826), ((("a")), 100000000, 0, -823), 0), 100000000, 0, -825), (Tag1 (0, (Tag3 (Tag1 ((("NotationSet", 2603)), "t"), 0, (0)), 100000000, 0, -824), (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -823)], (0)), 100000000, 0, -822), 0), 100000000, 0, -821), 0), 100000000, 0, -820), 0, (("interp/notation.mli", 26, 933, 954), ("interp/notation.mli", 26, 933, 1018), 0), 0, Tag1 ("CMap", 14)), 0); (("fold_left", 2784), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 2749)), 0, (0)), 100000000, 0, -819), (Tag1 (0, ((("a")), 100000000, 0, -815), (Tag1 (0, ((("b")), 100000000, 0, -813), ((("b")), 100000000, 0, -813), 0), 100000000, 0, -818), 0), 100000000, 0, -817), 0), 100000000, 0, -816), (Tag1 (0, (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -815)], (0)), 100000000, 0, -814), (Tag1 (0, ((("b")), 100000000, 0, -813), ((("b")), 100000000, 0, -813), 0), 100000000, 0, -812), 0), 100000000, 0, -811), 0), 100000000, 0, -810), 0, (("interp/notation.mli", 26, 933, 954), ("interp/notation.mli", 26, 933, 1018), 0), 0, Tag1 ("CMap", 15)), 0); (("fold_right", 2785), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 2749)), 0, (0)), 100000000, 0, -809), (Tag1 (0, ((("a")), 100000000, 0, -805), (Tag1 (0, ((("b")), 100000000, 0, -803), ((("b")), 100000000, 0, -803), 0), 100000000, 0, -808), 0), 100000000, 0, -807), 0), 100000000, 0, -806), (Tag1 (0, (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -805)], (0)), 100000000, 0, -804), (Tag1 (0, ((("b")), 100000000, 0, -803), ((("b")), 100000000, 0, -803), 0), 100000000, 0, -802), 0), 100000000, 0, -801), 0), 100000000, 0, -800), 0, (("interp/notation.mli", 26, 933, 954), ("interp/notation.mli", 26, 933, 1018), 0), 0, Tag1 ("CMap", 16)), 0); (("height", 2786), ((Tag1 (0, (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -799)], (0)), 100000000, 0, -798), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -797), 0), 100000000, 0, -796), 0, (("interp/notation.mli", 26, 933, 954), ("interp/notation.mli", 26, 933, 1018), 0), 0, Tag1 ("CMap", 17)), 0); (("filter_range", 2787), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 2749)), 0, (0)), 100000000, 0, -795), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -794), 0), 100000000, 0, -793), (Tag1 (0, (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -791)], (0)), 100000000, 0, -792), (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -791)], (0)), 100000000, 0, -790), 0), 100000000, 0, -789), 0), 100000000, 0, -788), 0, (("interp/notation.mli", 26, 933, 954), ("interp/notation.mli", 26, 933, 1018), 0), 0, Tag1 ("CMap", 18)), 0); (("of_list", 2788), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("key", 2749)), 0, (0)), 100000000, 0, -787); ((("a")), 100000000, 0, -784)]), 100000000, 0, -786)], (0)), 100000000, 0, -785), (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -784)], (0)), 100000000, 0, -783), 0), 100000000, 0, -782), 0, (("interp/notation.mli", 26, 933, 954), ("interp/notation.mli", 26, 933, 1018), 0), 0, Tag1 ("CMap", 19)), 0); (("symmetric_diff_fold", 2789), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 2749)), 0, (0)), 100000000, 0, -781), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -773)], (0)), 100000000, 0, -780), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -773)], (0)), 100000000, 0, -779), (Tag1 (0, ((("b")), 100000000, 0, -771), ((("b")), 100000000, 0, -771), 0), 100000000, 0, -778), 0), 100000000, 0, -777), 0), 100000000, 0, -776), 0), 100000000, 0, -775), (Tag1 (0, (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -773)], (0)), 100000000, 0, -774), (Tag1 (0, (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -773)], (0)), 100000000, 0, -772), (Tag1 (0, ((("b")), 100000000, 0, -771), ((("b")), 100000000, 0, -771), 0), 100000000, 0, -770), 0), 100000000, 0, -769), 0), 100000000, 0, -768), 0), 100000000, 0, -767), 0, (("interp/notation.mli", 26, 933, 954), ("interp/notation.mli", 26, 933, 1018), 0), 0, Tag1 ("CMap", 20)), 0); Tag3 (("Smart", 2790), 0, (Tag1 ([(("map", 2793), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -1078), ((("a")), 100000000, 0, -1078), 0), 100000000, 0, -1080), (Tag1 (0, (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -1078)], (0)), 100000000, 0, -1079), (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -1078)], (0)), 100000000, 0, -1077), 0), 100000000, 0, -1076), 0), 100000000, 0, -1075), 0, (("interp/notation.mli", 26, 933, 954), ("interp/notation.mli", 26, 933, 1018), 0), 0, Tag1 ("CMap", 21)), 0); (("mapi", 2794), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 2749)), 0, (0)), 100000000, 0, -1074), (Tag1 (0, ((("a")), 100000000, 0, -1070), ((("a")), 100000000, 0, -1070), 0), 100000000, 0, -1073), 0), 100000000, 0, -1072), (Tag1 (0, (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -1070)], (0)), 100000000, 0, -1071), (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -1070)], (0)), 100000000, 0, -1069), 0), 100000000, 0, -1068), 0), 100000000, 0, -1067), 0, (("interp/notation.mli", 26, 933, 954), ("interp/notation.mli", 26, 933, 1018), 0), 0, Tag1 ("CMap", 22)), 0)]), 0, (("interp/notation.mli", 26, 933, 954), ("interp/notation.mli", 26, 933, 1018), 0), Tag1 ("CMap", 23)), 0, 0); Tag3 (("Monad", 2791), 0, (Tag2 (((("M", 2792)), (Tag1 ((Tag2 ("CMap")), "MonadS"))), Tag1 ([(("fold", 2795), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 2749)), 0, (0)), 100000000, 0, -1127), (Tag1 (0, ((("a")), 100000000, 0, -1122), (Tag1 (0, ((("b")), 100000000, 0, -1120), (Tag3 (Tag1 ((("M", 2792)), "t"), [((("b")), 100000000, 0, -1120)], (0)), 100000000, 0, -1126), 0), 100000000, 0, -1125), 0), 100000000, 0, -1124), 0), 100000000, 0, -1123), (Tag1 (0, (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -1122)], (0)), 100000000, 0, -1121), (Tag1 (0, ((("b")), 100000000, 0, -1120), (Tag3 (Tag1 ((("M", 2792)), "t"), [((("b")), 100000000, 0, -1120)], (0)), 100000000, 0, -1119), 0), 100000000, 0, -1118), 0), 100000000, 0, -1117), 0), 100000000, 0, -1116), 0, (("interp/notation.mli", 26, 933, 954), ("interp/notation.mli", 26, 933, 1018), 0), 0, Tag1 ("CMap", 25)), 0); (("fold_left", 2796), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 2749)), 0, (0)), 100000000, 0, -1115), (Tag1 (0, ((("a")), 100000000, 0, -1110), (Tag1 (0, ((("b")), 100000000, 0, -1108), (Tag3 (Tag1 ((("M", 2792)), "t"), [((("b")), 100000000, 0, -1108)], (0)), 100000000, 0, -1114), 0), 100000000, 0, -1113), 0), 100000000, 0, -1112), 0), 100000000, 0, -1111), (Tag1 (0, (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -1110)], (0)), 100000000, 0, -1109), (Tag1 (0, ((("b")), 100000000, 0, -1108), (Tag3 (Tag1 ((("M", 2792)), "t"), [((("b")), 100000000, 0, -1108)], (0)), 100000000, 0, -1107), 0), 100000000, 0, -1106), 0), 100000000, 0, -1105), 0), 100000000, 0, -1104), 0, (("interp/notation.mli", 26, 933, 954), ("interp/notation.mli", 26, 933, 1018), 0), 0, Tag1 ("CMap", 26)), 0); (("fold_right", 2797), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 2749)), 0, (0)), 100000000, 0, -1103), (Tag1 (0, ((("a")), 100000000, 0, -1098), (Tag1 (0, ((("b")), 100000000, 0, -1096), (Tag3 (Tag1 ((("M", 2792)), "t"), [((("b")), 100000000, 0, -1096)], (0)), 100000000, 0, -1102), 0), 100000000, 0, -1101), 0), 100000000, 0, -1100), 0), 100000000, 0, -1099), (Tag1 (0, (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -1098)], (0)), 100000000, 0, -1097), (Tag1 (0, ((("b")), 100000000, 0, -1096), (Tag3 (Tag1 ((("M", 2792)), "t"), [((("b")), 100000000, 0, -1096)], (0)), 100000000, 0, -1095), 0), 100000000, 0, -1094), 0), 100000000, 0, -1093), 0), 100000000, 0, -1092), 0, (("interp/notation.mli", 26, 933, 954), ("interp/notation.mli", 26, 933, 1018), 0), 0, Tag1 ("CMap", 27)), 0); (("mapi", 2798), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 2749)), 0, (0)), 100000000, 0, -1091), (Tag1 (0, ((("a")), 100000000, 0, -1087), (Tag3 (Tag1 ((("M", 2792)), "t"), [((("b")), 100000000, 0, -1085)], (0)), 100000000, 0, -1090), 0), 100000000, 0, -1089), 0), 100000000, 0, -1088), (Tag1 (0, (Tag3 ((("t", 2750)), [((("a")), 100000000, 0, -1087)], (0)), 100000000, 0, -1086), (Tag3 (Tag1 ((("M", 2792)), "t"), [(Tag3 ((("t", 2750)), [((("b")), 100000000, 0, -1085)], (0)), 100000000, 0, -1084)], (0)), 100000000, 0, -1083), 0), 100000000, 0, -1082), 0), 100000000, 0, -1081), 0, (("interp/notation.mli", 26, 933, 954), ("interp/notation.mli", 26, 933, 1018), 0), 0, Tag1 ("CMap", 28)), 0)])), 0, (("interp/notation.mli", 26, 933, 954), ("interp/notation.mli", 26, 933, 1018), 0), Tag1 ("CMap", 29)), 0, 0)]), 0, (("interp/notation.mli", 26, 933, 933), ("interp/notation.mli", 26, 933, 1018), 0), Tag1 ("Notation", 7)), 0, 0); Tag3 (("SpecificNotationSet", 2605), 0, (Tag1 ([Tag1 (("elt", 2799), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Constrexpr")), "specific_notation"), 0, (0)), 100000000, 0, -1354)), 0, 0, 0, 0, (("interp/notation.mli", 27, 1019, 1059), ("interp/notation.mli", 27, 1019, 1087), 0), 0, 0, 0, Tag1 ("Notation", 8)), 1, 0); Tag1 (("t", 2800), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("set.mli", 74, 2901, 2905), ("set.mli", 74, 2901, 2911), 0), 0, 0, 0, Tag1 ("Stdlib__Set", 4)), 1, 0); (("empty", 2801), ((Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1353), 0, (("set.mli", 77, 2942, 2946), ("set.mli", 77, 2942, 2958), 0), 0, Tag1 ("Stdlib__Set", 5)), 0); (("add", 2802), ((Tag1 (0, (Tag3 ((("elt", 2799)), 0, (0)), 100000000, 0, -1352), (Tag1 (0, (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1351), (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1350), 0), 100000000, 0, -1349), 0), 100000000, 0, -1348), 0, (("set.mli", 80, 2986, 2990), ("set.mli", 80, 2986, 3012), 0), 0, Tag1 ("Stdlib__Set", 6)), 0); (("singleton", 2803), ((Tag1 (0, (Tag3 ((("elt", 2799)), 0, (0)), 100000000, 0, -1347), (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1346), 0), 100000000, 0, -1345), 0, (("set.mli", 86, 3278, 3282), ("set.mli", 86, 3278, 3305), 0), 0, Tag1 ("Stdlib__Set", 7)), 0); (("remove", 2804), ((Tag1 (0, (Tag3 ((("elt", 2799)), 0, (0)), 100000000, 0, -1344), (Tag1 (0, (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1343), (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1342), 0), 100000000, 0, -1341), 0), 100000000, 0, -1340), 0, (("set.mli", 89, 3381, 3385), ("set.mli", 89, 3381, 3410), 0), 0, Tag1 ("Stdlib__Set", 8)), 0); (("union", 2805), ((Tag1 (0, (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1339), (Tag1 (0, (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1338), (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1337), 0), 100000000, 0, -1336), 0), 100000000, 0, -1335), 0, (("set.mli", 95, 3677, 3681), ("set.mli", 95, 3677, 3703), 0), 0, Tag1 ("Stdlib__Set", 9)), 0); (("inter", 2806), ((Tag1 (0, (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1334), (Tag1 (0, (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1333), (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1332), 0), 100000000, 0, -1331), 0), 100000000, 0, -1330), 0, (("set.mli", 98, 3727, 3731), ("set.mli", 98, 3727, 3753), 0), 0, Tag1 ("Stdlib__Set", 10)), 0); (("disjoint", 2807), ((Tag1 (0, (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1329), (Tag1 (0, (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1328), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1327), 0), 100000000, 0, -1326), 0), 100000000, 0, -1325), 0, (("set.mli", 101, 3784, 3788), ("set.mli", 101, 3784, 3816), 0), 0, Tag1 ("Stdlib__Set", 11)), 0); (("diff", 2808), ((Tag1 (0, (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1324), (Tag1 (0, (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1323), (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1322), 0), 100000000, 0, -1321), 0), 100000000, 0, -1320), 0, (("set.mli", 105, 3880, 3884), ("set.mli", 105, 3880, 3905), 0), 0, Tag1 ("Stdlib__Set", 12)), 0); (("cardinal", 2809), ((Tag1 (0, (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1319), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1318), 0), 100000000, 0, -1317), 0, (("set.mli", 109, 4007, 4011), ("set.mli", 109, 4007, 4033), 0), 0, Tag1 ("Stdlib__Set", 13)), 0); (("elements", 2810), ((Tag1 (0, (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1316), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 2799)), 0, (0)), 100000000, 0, -1315)], (0)), 100000000, 0, -1314), 0), 100000000, 0, -1313), 0, (("set.mli", 114, 4120, 4124), ("set.mli", 114, 4120, 4151), 0), 0, Tag1 ("Stdlib__Set", 14)), 0); (("min_elt", 2811), ((Tag1 (0, (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1312), (Tag3 ((("elt", 2799)), 0, (0)), 100000000, 0, -1311), 0), 100000000, 0, -1310), 0, (("set.mli", 120, 4380, 4384), ("set.mli", 120, 4380, 4405), 0), 0, Tag1 ("Stdlib__Set", 15)), 0); (("min_elt_opt", 2812), ((Tag1 (0, (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1309), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2799)), 0, (0)), 100000000, 0, -1308)], (0)), 100000000, 0, -1307), 0), 100000000, 0, -1306), 0, (("set.mli", 125, 4567, 4571), ("set.mli", 125, 4567, 4603), 0), 0, Tag1 ("Stdlib__Set", 16)), 0); (("max_elt", 2813), ((Tag1 (0, (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1305), (Tag3 ((("elt", 2799)), 0, (0)), 100000000, 0, -1304), 0), 100000000, 0, -1303), 0, (("set.mli", 131, 4774, 4778), ("set.mli", 131, 4774, 4799), 0), 0, Tag1 ("Stdlib__Set", 17)), 0); (("max_elt_opt", 2814), ((Tag1 (0, (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1302), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2799)), 0, (0)), 100000000, 0, -1301)], (0)), 100000000, 0, -1300), 0), 100000000, 0, -1299), 0, (("set.mli", 135, 4890, 4894), ("set.mli", 135, 4890, 4926), 0), 0, Tag1 ("Stdlib__Set", 18)), 0); (("choose", 2815), ((Tag1 (0, (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1298), (Tag3 ((("elt", 2799)), 0, (0)), 100000000, 0, -1297), 0), 100000000, 0, -1296), 0, (("set.mli", 140, 5041, 5045), ("set.mli", 140, 5041, 5065), 0), 0, Tag1 ("Stdlib__Set", 19)), 0); (("choose_opt", 2816), ((Tag1 (0, (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1295), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2799)), 0, (0)), 100000000, 0, -1294)], (0)), 100000000, 0, -1293), 0), 100000000, 0, -1292), 0, (("set.mli", 145, 5263, 5267), ("set.mli", 145, 5263, 5298), 0), 0, Tag1 ("Stdlib__Set", 20)), 0); (("find", 2817), ((Tag1 (0, (Tag3 ((("elt", 2799)), 0, (0)), 100000000, 0, -1291), (Tag1 (0, (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1290), (Tag3 ((("elt", 2799)), 0, (0)), 100000000, 0, -1289), 0), 100000000, 0, -1288), 0), 100000000, 0, -1287), 0, (("set.mli", 153, 5541, 5549), ("set.mli", 153, 5541, 5574), 0), 0, Tag1 ("Stdlib__Set", 21)), 0); (("find_opt", 2818), ((Tag1 (0, (Tag3 ((("elt", 2799)), 0, (0)), 100000000, 0, -1286), (Tag1 (0, (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1285), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2799)), 0, (0)), 100000000, 0, -1284)], (0)), 100000000, 0, -1283), 0), 100000000, 0, -1282), 0), 100000000, 0, -1281), 0, (("set.mli", 159, 5752, 5756), ("set.mli", 159, 5752, 5792), 0), 0, Tag1 ("Stdlib__Set", 22)), 0); (("find_first", 2819), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2799)), 0, (0)), 100000000, 0, -1280), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1279), 0), 100000000, 0, -1278), (Tag1 (0, (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1277), (Tag3 ((("elt", 2799)), 0, (0)), 100000000, 0, -1276), 0), 100000000, 0, -1275), 0), 100000000, 0, -1274), 0, (("set.mli", 165, 5963, 5967), ("set.mli", 165, 5963, 6008), 0), 0, Tag1 ("Stdlib__Set", 23)), 0); (("find_first_opt", 2820), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2799)), 0, (0)), 100000000, 0, -1273), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1272), 0), 100000000, 0, -1271), (Tag1 (0, (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1270), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2799)), 0, (0)), 100000000, 0, -1269)], (0)), 100000000, 0, -1268), 0), 100000000, 0, -1267), 0), 100000000, 0, -1266), 0, (("set.mli", 177, 6482, 6486), ("set.mli", 177, 6482, 6538), 0), 0, Tag1 ("Stdlib__Set", 24)), 0); (("find_last", 2821), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2799)), 0, (0)), 100000000, 0, -1265), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1264), 0), 100000000, 0, -1263), (Tag1 (0, (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1262), (Tag3 ((("elt", 2799)), 0, (0)), 100000000, 0, -1261), 0), 100000000, 0, -1260), 0), 100000000, 0, -1259), 0, (("set.mli", 184, 6779, 6783), ("set.mli", 184, 6779, 6823), 0), 0, Tag1 ("Stdlib__Set", 25)), 0); (("find_last_opt", 2822), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2799)), 0, (0)), 100000000, 0, -1258), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1257), 0), 100000000, 0, -1256), (Tag1 (0, (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1255), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2799)), 0, (0)), 100000000, 0, -1254)], (0)), 100000000, 0, -1253), 0), 100000000, 0, -1252), 0), 100000000, 0, -1251), 0, (("set.mli", 190, 7044, 7048), ("set.mli", 190, 7044, 7099), 0), 0, Tag1 ("Stdlib__Set", 26)), 0); (("iter", 2823), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2799)), 0, (0)), 100000000, 0, -1250), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1249), 0), 100000000, 0, -1248), (Tag1 (0, (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1247), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1246), 0), 100000000, 0, -1245), 0), 100000000, 0, -1244), 0, (("set.mli", 198, 7371, 7375), ("set.mli", 198, 7371, 7411), 0), 0, Tag1 ("Stdlib__Set", 27)), 0); (("fold", 2824), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2799)), 0, (0)), 100000000, 0, -1243), (Tag1 (0, ((("acc")), 100000000, 0, -1239), ((("acc")), 100000000, 0, -1239), 0), 100000000, 0, -1242), 0), 100000000, 0, -1241), (Tag1 (0, (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1240), (Tag1 (0, ((("acc")), 100000000, 0, -1239), ((("acc")), 100000000, 0, -1239), 0), 100000000, 0, -1238), 0), 100000000, 0, -1237), 0), 100000000, 0, -1236), 0, (("set.mli", 203, 7616, 7620), ("set.mli", 203, 7616, 7672), 0), 0, Tag1 ("Stdlib__Set", 28)), 0); (("map", 2825), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2799)), 0, (0)), 100000000, 0, -1235), (Tag3 ((("elt", 2799)), 0, (0)), 100000000, 0, -1234), 0), 100000000, 0, -1233), (Tag1 (0, (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1232), (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1231), 0), 100000000, 0, -1230), 0), 100000000, 0, -1229), 0, (("set.mli", 209, 7860, 7864), ("set.mli", 209, 7860, 7895), 0), 0, Tag1 ("Stdlib__Set", 29)), 0); (("filter", 2826), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2799)), 0, (0)), 100000000, 0, -1228), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1227), 0), 100000000, 0, -1226), (Tag1 (0, (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1225), (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1224), 0), 100000000, 0, -1223), 0), 100000000, 0, -1222), 0, (("set.mli", 221, 8372, 8376), ("set.mli", 221, 8372, 8411), 0), 0, Tag1 ("Stdlib__Set", 30)), 0); (("filter_map", 2827), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2799)), 0, (0)), 100000000, 0, -1221), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2799)), 0, (0)), 100000000, 0, -1220)], (0)), 100000000, 0, -1219), 0), 100000000, 0, -1218), (Tag1 (0, (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1217), (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1216), 0), 100000000, 0, -1215), 0), 100000000, 0, -1214), 0, (("set.mli", 228, 8710, 8714), ("set.mli", 228, 8710, 8759), 0), 0, Tag1 ("Stdlib__Set", 31)), 0); (("partition", 2828), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2799)), 0, (0)), 100000000, 0, -1213), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1212), 0), 100000000, 0, -1211), (Tag1 (0, (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1210), (Tag2 ([(Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1208); (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1209)]), 100000000, 0, -1207), 0), 100000000, 0, -1206), 0), 100000000, 0, -1205), 0, (("set.mli", 243, 9275, 9279), ("set.mli", 243, 9275, 9321), 0), 0, Tag1 ("Stdlib__Set", 32)), 0); (("split", 2829), ((Tag1 (0, (Tag3 ((("elt", 2799)), 0, (0)), 100000000, 0, -1204), (Tag1 (0, (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1203), (Tag2 ([(Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1200); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1201); (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1202)]), 100000000, 0, -1199), 0), 100000000, 0, -1198), 0), 100000000, 0, -1197), 0, (("set.mli", 249, 9562, 9566), ("set.mli", 249, 9562, 9601), 0), 0, Tag1 ("Stdlib__Set", 33)), 0); (("is_empty", 2830), ((Tag1 (0, (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1196), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1195), 0), 100000000, 0, -1194), 0, (("set.mli", 260, 10020, 10024), ("set.mli", 260, 10020, 10047), 0), 0, Tag1 ("Stdlib__Set", 34)), 0); (("mem", 2831), ((Tag1 (0, (Tag3 ((("elt", 2799)), 0, (0)), 100000000, 0, -1193), (Tag1 (0, (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1192), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1191), 0), 100000000, 0, -1190), 0), 100000000, 0, -1189), 0, (("set.mli", 263, 10096, 10100), ("set.mli", 263, 10096, 10125), 0), 0, Tag1 ("Stdlib__Set", 35)), 0); (("equal", 2832), ((Tag1 (0, (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1188), (Tag1 (0, (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1187), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1186), 0), 100000000, 0, -1185), 0), 100000000, 0, -1184), 0, (("set.mli", 266, 10190, 10194), ("set.mli", 266, 10190, 10219), 0), 0, Tag1 ("Stdlib__Set", 36)), 0); (("compare", 2833), ((Tag1 (0, (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1183), (Tag1 (0, (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1182), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1181), 0), 100000000, 0, -1180), 0), 100000000, 0, -1179), 0, (("set.mli", 270, 10335, 10339), ("set.mli", 270, 10335, 10365), 0), 0, Tag1 ("Stdlib__Set", 37)), 0); (("subset", 2834), ((Tag1 (0, (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1178), (Tag1 (0, (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1177), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1176), 0), 100000000, 0, -1175), 0), 100000000, 0, -1174), 0, (("set.mli", 274, 10476, 10480), ("set.mli", 274, 10476, 10506), 0), 0, Tag1 ("Stdlib__Set", 38)), 0); (("for_all", 2835), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2799)), 0, (0)), 100000000, 0, -1173), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1172), 0), 100000000, 0, -1171), (Tag1 (0, (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1170), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1169), 0), 100000000, 0, -1168), 0), 100000000, 0, -1167), 0, (("set.mli", 278, 10598, 10602), ("set.mli", 278, 10598, 10641), 0), 0, Tag1 ("Stdlib__Set", 39)), 0); (("exists", 2836), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2799)), 0, (0)), 100000000, 0, -1166), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1165), 0), 100000000, 0, -1164), (Tag1 (0, (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1163), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1162), 0), 100000000, 0, -1161), 0), 100000000, 0, -1160), 0, (("set.mli", 282, 10737, 10741), ("set.mli", 282, 10737, 10779), 0), 0, Tag1 ("Stdlib__Set", 40)), 0); (("to_list", 2837), ((Tag1 (0, (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1159), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 2799)), 0, (0)), 100000000, 0, -1158)], (0)), 100000000, 0, -1157), 0), 100000000, 0, -1156), 0, (("set.mli", 288, 10922, 10926), ("set.mli", 288, 10922, 10953), 0), 0, Tag1 ("Stdlib__Set", 41)), 0); (("of_list", 2838), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 2799)), 0, (0)), 100000000, 0, -1155)], (0)), 100000000, 0, -1154), (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1153), 0), 100000000, 0, -1152), 0, (("set.mli", 292, 11017, 11021), ("set.mli", 292, 11017, 11047), 0), 0, Tag1 ("Stdlib__Set", 42)), 0); (("to_seq_from", 2839), ((Tag1 (0, (Tag3 ((("elt", 2799)), 0, (0)), 100000000, 0, -1151), (Tag1 (0, (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1150), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2799)), 0, (0)), 100000000, 0, -1149)], (0)), 100000000, 0, -1148), 0), 100000000, 0, -1147), 0), 100000000, 0, -1146), 0, (("set.mli", 298, 11268, 11272), ("set.mli", 298, 11268, 11311), 0), 0, Tag1 ("Stdlib__Set", 43)), 0); (("to_seq", 2840), ((Tag1 (0, (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1145), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2799)), 0, (0)), 100000000, 0, -1144)], (0)), 100000000, 0, -1143), 0), 100000000, 0, -1142), 0, (("set.mli", 303, 11453, 11457), ("set.mli", 303, 11453, 11484), 0), 0, Tag1 ("Stdlib__Set", 44)), 0); (("to_rev_seq", 2841), ((Tag1 (0, (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1141), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2799)), 0, (0)), 100000000, 0, -1140)], (0)), 100000000, 0, -1139), 0), 100000000, 0, -1138), 0, (("set.mli", 307, 11562, 11566), ("set.mli", 307, 11562, 11597), 0), 0, Tag1 ("Stdlib__Set", 45)), 0); (("add_seq", 2842), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2799)), 0, (0)), 100000000, 0, -1137)], (0)), 100000000, 0, -1136), (Tag1 (0, (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1135), (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1134), 0), 100000000, 0, -1133), 0), 100000000, 0, -1132), 0, (("set.mli", 311, 11676, 11680), ("set.mli", 311, 11676, 11713), 0), 0, Tag1 ("Stdlib__Set", 46)), 0); (("of_seq", 2843), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2799)), 0, (0)), 100000000, 0, -1131)], (0)), 100000000, 0, -1130), (Tag3 ((("t", 2800)), 0, (0)), 100000000, 0, -1129), 0), 100000000, 0, -1128), 0, (("set.mli", 315, 11791, 11795), ("set.mli", 315, 11791, 11822), 0), 0, Tag1 ("Stdlib__Set", 47)), 0)]), 0, (("interp/notation.mli", 27, 1019, 1019), ("interp/notation.mli", 27, 1019, 1087), 0), Tag1 ("Notation", 9)), 0, 0); Tag3 (("SpecificNotationMap", 2606), 0, (Tag1 ([Tag1 (("key", 2844), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Constrexpr")), "specific_notation"), 0, (0)), 100000000, 0, -1654)), 0, 0, 0, 0, (("interp/notation.mli", 28, 1088, 1117), ("interp/notation.mli", 28, 1088, 1198), 0), 0, 0, 0, Tag1 ("Notation", 10)), 1, 0); Tag1 (("t", 2845), ([((("a")), 100000000, 0, -1653)], 1, 0, 1, 0, [1], [2], 0, 0, (("interp/notation.mli", 28, 1088, 1117), ("interp/notation.mli", 28, 1088, 1198), 0), 0, 0, 0, Tag1 ("CSig", 36)), 1, 0); (("empty", 2846), ((Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1652)], (0)), 100000000, 0, -1651), 0, (("interp/notation.mli", 28, 1088, 1117), ("interp/notation.mli", 28, 1088, 1198), 0), 0, Tag1 ("CSig", 37)), 0); (("is_empty", 2847), ((Tag1 (0, (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1650)], (0)), 100000000, 0, -1649), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1648), 0), 100000000, 0, -1647), 0, (("interp/notation.mli", 28, 1088, 1117), ("interp/notation.mli", 28, 1088, 1198), 0), 0, Tag1 ("CSig", 38)), 0); (("mem", 2848), ((Tag1 (0, (Tag3 ((("key", 2844)), 0, (0)), 100000000, 0, -1646), (Tag1 (0, (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1645)], (0)), 100000000, 0, -1644), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1643), 0), 100000000, 0, -1642), 0), 100000000, 0, -1641), 0, (("interp/notation.mli", 28, 1088, 1117), ("interp/notation.mli", 28, 1088, 1198), 0), 0, Tag1 ("CSig", 39)), 0); (("add", 2849), ((Tag1 (0, (Tag3 ((("key", 2844)), 0, (0)), 100000000, 0, -1640), (Tag1 (0, ((("a")), 100000000, 0, -1638), (Tag1 (0, (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1638)], (0)), 100000000, 0, -1639), (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1638)], (0)), 100000000, 0, -1637), 0), 100000000, 0, -1636), 0), 100000000, 0, -1635), 0), 100000000, 0, -1634), 0, (("interp/notation.mli", 28, 1088, 1117), ("interp/notation.mli", 28, 1088, 1198), 0), 0, Tag1 ("CSig", 40)), 0); (("update", 2850), ((Tag1 (0, (Tag3 ((("key", 2844)), 0, (0)), 100000000, 0, -1633), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1628)], (0)), 100000000, 0, -1632), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1628)], (0)), 100000000, 0, -1631), 0), 100000000, 0, -1630), (Tag1 (0, (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1628)], (0)), 100000000, 0, -1629), (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1628)], (0)), 100000000, 0, -1627), 0), 100000000, 0, -1626), 0), 100000000, 0, -1625), 0), 100000000, 0, -1624), 0, (("interp/notation.mli", 28, 1088, 1117), ("interp/notation.mli", 28, 1088, 1198), 0), 0, Tag1 ("CSig", 41)), 0); (("singleton", 2851), ((Tag1 (0, (Tag3 ((("key", 2844)), 0, (0)), 100000000, 0, -1623), (Tag1 (0, ((("a")), 100000000, 0, -1622), (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1622)], (0)), 100000000, 0, -1621), 0), 100000000, 0, -1620), 0), 100000000, 0, -1619), 0, (("interp/notation.mli", 28, 1088, 1117), ("interp/notation.mli", 28, 1088, 1198), 0), 0, Tag1 ("CSig", 42)), 0); (("remove", 2852), ((Tag1 (0, (Tag3 ((("key", 2844)), 0, (0)), 100000000, 0, -1618), (Tag1 (0, (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1616)], (0)), 100000000, 0, -1617), (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1616)], (0)), 100000000, 0, -1615), 0), 100000000, 0, -1614), 0), 100000000, 0, -1613), 0, (("interp/notation.mli", 28, 1088, 1117), ("interp/notation.mli", 28, 1088, 1198), 0), 0, Tag1 ("CSig", 43)), 0); (("merge", 2853), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 2844)), 0, (0)), 100000000, 0, -1612), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1605)], (0)), 100000000, 0, -1611), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -1603)], (0)), 100000000, 0, -1610), (Tag3 ((Tag3 ("option", 10)), [((("c")), 100000000, 0, -1601)], (0)), 100000000, 0, -1609), 0), 100000000, 0, -1608), 0), 100000000, 0, -1607), 0), 100000000, 0, -1606), (Tag1 (0, (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1605)], (0)), 100000000, 0, -1604), (Tag1 (0, (Tag3 ((("t", 2845)), [((("b")), 100000000, 0, -1603)], (0)), 100000000, 0, -1602), (Tag3 ((("t", 2845)), [((("c")), 100000000, 0, -1601)], (0)), 100000000, 0, -1600), 0), 100000000, 0, -1599), 0), 100000000, 0, -1598), 0), 100000000, 0, -1597), 0, (("interp/notation.mli", 28, 1088, 1117), ("interp/notation.mli", 28, 1088, 1198), 0), 0, Tag1 ("CSig", 44)), 0); (("union", 2854), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 2844)), 0, (0)), 100000000, 0, -1596), (Tag1 (0, ((("a")), 100000000, 0, -1589), (Tag1 (0, ((("a")), 100000000, 0, -1589), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1589)], (0)), 100000000, 0, -1595), 0), 100000000, 0, -1594), 0), 100000000, 0, -1593), 0), 100000000, 0, -1592), (Tag1 (0, (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1589)], (0)), 100000000, 0, -1591), (Tag1 (0, (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1589)], (0)), 100000000, 0, -1590), (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1589)], (0)), 100000000, 0, -1588), 0), 100000000, 0, -1587), 0), 100000000, 0, -1586), 0), 100000000, 0, -1585), 0, (("interp/notation.mli", 28, 1088, 1117), ("interp/notation.mli", 28, 1088, 1198), 0), 0, Tag1 ("CSig", 45)), 0); (("compare", 2855), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -1580), (Tag1 (0, ((("a")), 100000000, 0, -1580), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1584), 0), 100000000, 0, -1583), 0), 100000000, 0, -1582), (Tag1 (0, (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1580)], (0)), 100000000, 0, -1581), (Tag1 (0, (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1580)], (0)), 100000000, 0, -1579), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1578), 0), 100000000, 0, -1577), 0), 100000000, 0, -1576), 0), 100000000, 0, -1575), 0, (("interp/notation.mli", 28, 1088, 1117), ("interp/notation.mli", 28, 1088, 1198), 0), 0, Tag1 ("CSig", 46)), 0); (("equal", 2856), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -1570), (Tag1 (0, ((("a")), 100000000, 0, -1570), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1574), 0), 100000000, 0, -1573), 0), 100000000, 0, -1572), (Tag1 (0, (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1570)], (0)), 100000000, 0, -1571), (Tag1 (0, (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1570)], (0)), 100000000, 0, -1569), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1568), 0), 100000000, 0, -1567), 0), 100000000, 0, -1566), 0), 100000000, 0, -1565), 0, (("interp/notation.mli", 28, 1088, 1117), ("interp/notation.mli", 28, 1088, 1198), 0), 0, Tag1 ("CSig", 47)), 0); (("iter", 2857), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 2844)), 0, (0)), 100000000, 0, -1564), (Tag1 (0, ((("a")), 100000000, 0, -1560), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1563), 0), 100000000, 0, -1562), 0), 100000000, 0, -1561), (Tag1 (0, (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1560)], (0)), 100000000, 0, -1559), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1558), 0), 100000000, 0, -1557), 0), 100000000, 0, -1556), 0, (("interp/notation.mli", 28, 1088, 1117), ("interp/notation.mli", 28, 1088, 1198), 0), 0, Tag1 ("CSig", 48)), 0); (("fold", 2858), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 2844)), 0, (0)), 100000000, 0, -1555), (Tag1 (0, ((("a")), 100000000, 0, -1551), (Tag1 (0, ((("b")), 100000000, 0, -1549), ((("b")), 100000000, 0, -1549), 0), 100000000, 0, -1554), 0), 100000000, 0, -1553), 0), 100000000, 0, -1552), (Tag1 (0, (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1551)], (0)), 100000000, 0, -1550), (Tag1 (0, ((("b")), 100000000, 0, -1549), ((("b")), 100000000, 0, -1549), 0), 100000000, 0, -1548), 0), 100000000, 0, -1547), 0), 100000000, 0, -1546), 0, (("interp/notation.mli", 28, 1088, 1117), ("interp/notation.mli", 28, 1088, 1198), 0), 0, Tag1 ("CSig", 49)), 0); (("for_all", 2859), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 2844)), 0, (0)), 100000000, 0, -1545), (Tag1 (0, ((("a")), 100000000, 0, -1541), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1544), 0), 100000000, 0, -1543), 0), 100000000, 0, -1542), (Tag1 (0, (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1541)], (0)), 100000000, 0, -1540), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1539), 0), 100000000, 0, -1538), 0), 100000000, 0, -1537), 0, (("interp/notation.mli", 28, 1088, 1117), ("interp/notation.mli", 28, 1088, 1198), 0), 0, Tag1 ("CSig", 50)), 0); (("exists", 2860), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 2844)), 0, (0)), 100000000, 0, -1536), (Tag1 (0, ((("a")), 100000000, 0, -1532), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1535), 0), 100000000, 0, -1534), 0), 100000000, 0, -1533), (Tag1 (0, (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1532)], (0)), 100000000, 0, -1531), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1530), 0), 100000000, 0, -1529), 0), 100000000, 0, -1528), 0, (("interp/notation.mli", 28, 1088, 1117), ("interp/notation.mli", 28, 1088, 1198), 0), 0, Tag1 ("CSig", 51)), 0); (("filter", 2861), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 2844)), 0, (0)), 100000000, 0, -1527), (Tag1 (0, ((("a")), 100000000, 0, -1522), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1526), 0), 100000000, 0, -1525), 0), 100000000, 0, -1524), (Tag1 (0, (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1522)], (0)), 100000000, 0, -1523), (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1522)], (0)), 100000000, 0, -1521), 0), 100000000, 0, -1520), 0), 100000000, 0, -1519), 0, (("interp/notation.mli", 28, 1088, 1117), ("interp/notation.mli", 28, 1088, 1198), 0), 0, Tag1 ("CSig", 52)), 0); (("partition", 2862), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 2844)), 0, (0)), 100000000, 0, -1518), (Tag1 (0, ((("a")), 100000000, 0, -1512), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1517), 0), 100000000, 0, -1516), 0), 100000000, 0, -1515), (Tag1 (0, (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1512)], (0)), 100000000, 0, -1514), (Tag2 ([(Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1512)], (0)), 100000000, 0, -1511); (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1512)], (0)), 100000000, 0, -1513)]), 100000000, 0, -1510), 0), 100000000, 0, -1509), 0), 100000000, 0, -1508), 0, (("interp/notation.mli", 28, 1088, 1117), ("interp/notation.mli", 28, 1088, 1198), 0), 0, Tag1 ("CSig", 53)), 0); (("cardinal", 2863), ((Tag1 (0, (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1507)], (0)), 100000000, 0, -1506), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1505), 0), 100000000, 0, -1504), 0, (("interp/notation.mli", 28, 1088, 1117), ("interp/notation.mli", 28, 1088, 1198), 0), 0, Tag1 ("CSig", 54)), 0); (("bindings", 2864), ((Tag1 (0, (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1502)], (0)), 100000000, 0, -1503), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("key", 2844)), 0, (0)), 100000000, 0, -1501); ((("a")), 100000000, 0, -1502)]), 100000000, 0, -1500)], (0)), 100000000, 0, -1499), 0), 100000000, 0, -1498), 0, (("interp/notation.mli", 28, 1088, 1117), ("interp/notation.mli", 28, 1088, 1198), 0), 0, Tag1 ("CSig", 55)), 0); (("min_binding", 2865), ((Tag1 (0, (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1496)], (0)), 100000000, 0, -1497), (Tag2 ([(Tag3 ((("key", 2844)), 0, (0)), 100000000, 0, -1495); ((("a")), 100000000, 0, -1496)]), 100000000, 0, -1494), 0), 100000000, 0, -1493), 0, (("interp/notation.mli", 28, 1088, 1117), ("interp/notation.mli", 28, 1088, 1198), 0), 0, Tag1 ("CSig", 56)), 0); (("max_binding", 2866), ((Tag1 (0, (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1491)], (0)), 100000000, 0, -1492), (Tag2 ([(Tag3 ((("key", 2844)), 0, (0)), 100000000, 0, -1490); ((("a")), 100000000, 0, -1491)]), 100000000, 0, -1489), 0), 100000000, 0, -1488), 0, (("interp/notation.mli", 28, 1088, 1117), ("interp/notation.mli", 28, 1088, 1198), 0), 0, Tag1 ("CSig", 57)), 0); (("choose", 2867), ((Tag1 (0, (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1486)], (0)), 100000000, 0, -1487), (Tag2 ([(Tag3 ((("key", 2844)), 0, (0)), 100000000, 0, -1485); ((("a")), 100000000, 0, -1486)]), 100000000, 0, -1484), 0), 100000000, 0, -1483), 0, (("interp/notation.mli", 28, 1088, 1117), ("interp/notation.mli", 28, 1088, 1198), 0), 0, Tag1 ("CSig", 58)), 0); (("choose_opt", 2868), ((Tag1 (0, (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1481)], (0)), 100000000, 0, -1482), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("key", 2844)), 0, (0)), 100000000, 0, -1480); ((("a")), 100000000, 0, -1481)]), 100000000, 0, -1479)], (0)), 100000000, 0, -1478), 0), 100000000, 0, -1477), 0, (("interp/notation.mli", 28, 1088, 1117), ("interp/notation.mli", 28, 1088, 1198), 0), 0, Tag1 ("CSig", 59)), 0); (("split", 2869), ((Tag1 (0, (Tag3 ((("key", 2844)), 0, (0)), 100000000, 0, -1476), (Tag1 (0, (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1472)], (0)), 100000000, 0, -1475), (Tag2 ([(Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1472)], (0)), 100000000, 0, -1471); (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1472)], (0)), 100000000, 0, -1473); (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1472)], (0)), 100000000, 0, -1474)]), 100000000, 0, -1470), 0), 100000000, 0, -1469), 0), 100000000, 0, -1468), 0, (("interp/notation.mli", 28, 1088, 1117), ("interp/notation.mli", 28, 1088, 1198), 0), 0, Tag1 ("CSig", 60)), 0); (("find", 2870), ((Tag1 (0, (Tag3 ((("key", 2844)), 0, (0)), 100000000, 0, -1467), (Tag1 (0, (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1465)], (0)), 100000000, 0, -1466), ((("a")), 100000000, 0, -1465), 0), 100000000, 0, -1464), 0), 100000000, 0, -1463), 0, (("interp/notation.mli", 28, 1088, 1117), ("interp/notation.mli", 28, 1088, 1198), 0), 0, Tag1 ("CSig", 61)), 0); (("find_opt", 2871), ((Tag1 (0, (Tag3 ((("key", 2844)), 0, (0)), 100000000, 0, -1462), (Tag1 (0, (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1460)], (0)), 100000000, 0, -1461), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1460)], (0)), 100000000, 0, -1459), 0), 100000000, 0, -1458), 0), 100000000, 0, -1457), 0, (("interp/notation.mli", 28, 1088, 1117), ("interp/notation.mli", 28, 1088, 1198), 0), 0, Tag1 ("CSig", 62)), 0); (("map", 2872), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -1455), ((("b")), 100000000, 0, -1453), 0), 100000000, 0, -1456), (Tag1 (0, (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1455)], (0)), 100000000, 0, -1454), (Tag3 ((("t", 2845)), [((("b")), 100000000, 0, -1453)], (0)), 100000000, 0, -1452), 0), 100000000, 0, -1451), 0), 100000000, 0, -1450), 0, (("interp/notation.mli", 28, 1088, 1117), ("interp/notation.mli", 28, 1088, 1198), 0), 0, Tag1 ("CSig", 63)), 0); (("mapi", 2873), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 2844)), 0, (0)), 100000000, 0, -1449), (Tag1 (0, ((("a")), 100000000, 0, -1446), ((("b")), 100000000, 0, -1444), 0), 100000000, 0, -1448), 0), 100000000, 0, -1447), (Tag1 (0, (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1446)], (0)), 100000000, 0, -1445), (Tag3 ((("t", 2845)), [((("b")), 100000000, 0, -1444)], (0)), 100000000, 0, -1443), 0), 100000000, 0, -1442), 0), 100000000, 0, -1441), 0, (("interp/notation.mli", 28, 1088, 1117), ("interp/notation.mli", 28, 1088, 1198), 0), 0, Tag1 ("CSig", 64)), 0); (("get", 2874), ((Tag1 (0, (Tag3 ((("key", 2844)), 0, (0)), 100000000, 0, -1440), (Tag1 (0, (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1438)], (0)), 100000000, 0, -1439), ((("a")), 100000000, 0, -1438), 0), 100000000, 0, -1437), 0), 100000000, 0, -1436), 0, (("interp/notation.mli", 28, 1088, 1117), ("interp/notation.mli", 28, 1088, 1198), 0), 0, Tag1 ("CMap", 10)), 0); (("set", 2875), ((Tag1 (0, (Tag3 ((("key", 2844)), 0, (0)), 100000000, 0, -1435), (Tag1 (0, ((("a")), 100000000, 0, -1433), (Tag1 (0, (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1433)], (0)), 100000000, 0, -1434), (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1433)], (0)), 100000000, 0, -1432), 0), 100000000, 0, -1431), 0), 100000000, 0, -1430), 0), 100000000, 0, -1429), 0, (("interp/notation.mli", 28, 1088, 1117), ("interp/notation.mli", 28, 1088, 1198), 0), 0, Tag1 ("CMap", 11)), 0); (("modify", 2876), ((Tag1 (0, (Tag3 ((("key", 2844)), 0, (0)), 100000000, 0, -1428), (Tag1 (0, (Tag1 (0, (Tag3 ((("key", 2844)), 0, (0)), 100000000, 0, -1427), (Tag1 (0, ((("a")), 100000000, 0, -1423), ((("a")), 100000000, 0, -1423), 0), 100000000, 0, -1426), 0), 100000000, 0, -1425), (Tag1 (0, (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1423)], (0)), 100000000, 0, -1424), (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1423)], (0)), 100000000, 0, -1422), 0), 100000000, 0, -1421), 0), 100000000, 0, -1420), 0), 100000000, 0, -1419), 0, (("interp/notation.mli", 28, 1088, 1117), ("interp/notation.mli", 28, 1088, 1198), 0), 0, Tag1 ("CMap", 12)), 0); (("domain", 2877), ((Tag1 (0, (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1418)], (0)), 100000000, 0, -1417), (Tag3 (Tag1 ((("SpecificNotationSet", 2605)), "t"), 0, (0)), 100000000, 0, -1416), 0), 100000000, 0, -1415), 0, (("interp/notation.mli", 28, 1088, 1117), ("interp/notation.mli", 28, 1088, 1198), 0), 0, Tag1 ("CMap", 13)), 0); (("bind", 2878), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 2844)), 0, (0)), 100000000, 0, -1414), ((("a")), 100000000, 0, -1411), 0), 100000000, 0, -1413), (Tag1 (0, (Tag3 (Tag1 ((("SpecificNotationSet", 2605)), "t"), 0, (0)), 100000000, 0, -1412), (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1411)], (0)), 100000000, 0, -1410), 0), 100000000, 0, -1409), 0), 100000000, 0, -1408), 0, (("interp/notation.mli", 28, 1088, 1117), ("interp/notation.mli", 28, 1088, 1198), 0), 0, Tag1 ("CMap", 14)), 0); (("fold_left", 2879), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 2844)), 0, (0)), 100000000, 0, -1407), (Tag1 (0, ((("a")), 100000000, 0, -1403), (Tag1 (0, ((("b")), 100000000, 0, -1401), ((("b")), 100000000, 0, -1401), 0), 100000000, 0, -1406), 0), 100000000, 0, -1405), 0), 100000000, 0, -1404), (Tag1 (0, (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1403)], (0)), 100000000, 0, -1402), (Tag1 (0, ((("b")), 100000000, 0, -1401), ((("b")), 100000000, 0, -1401), 0), 100000000, 0, -1400), 0), 100000000, 0, -1399), 0), 100000000, 0, -1398), 0, (("interp/notation.mli", 28, 1088, 1117), ("interp/notation.mli", 28, 1088, 1198), 0), 0, Tag1 ("CMap", 15)), 0); (("fold_right", 2880), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 2844)), 0, (0)), 100000000, 0, -1397), (Tag1 (0, ((("a")), 100000000, 0, -1393), (Tag1 (0, ((("b")), 100000000, 0, -1391), ((("b")), 100000000, 0, -1391), 0), 100000000, 0, -1396), 0), 100000000, 0, -1395), 0), 100000000, 0, -1394), (Tag1 (0, (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1393)], (0)), 100000000, 0, -1392), (Tag1 (0, ((("b")), 100000000, 0, -1391), ((("b")), 100000000, 0, -1391), 0), 100000000, 0, -1390), 0), 100000000, 0, -1389), 0), 100000000, 0, -1388), 0, (("interp/notation.mli", 28, 1088, 1117), ("interp/notation.mli", 28, 1088, 1198), 0), 0, Tag1 ("CMap", 16)), 0); (("height", 2881), ((Tag1 (0, (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1387)], (0)), 100000000, 0, -1386), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1385), 0), 100000000, 0, -1384), 0, (("interp/notation.mli", 28, 1088, 1117), ("interp/notation.mli", 28, 1088, 1198), 0), 0, Tag1 ("CMap", 17)), 0); (("filter_range", 2882), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 2844)), 0, (0)), 100000000, 0, -1383), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1382), 0), 100000000, 0, -1381), (Tag1 (0, (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1379)], (0)), 100000000, 0, -1380), (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1379)], (0)), 100000000, 0, -1378), 0), 100000000, 0, -1377), 0), 100000000, 0, -1376), 0, (("interp/notation.mli", 28, 1088, 1117), ("interp/notation.mli", 28, 1088, 1198), 0), 0, Tag1 ("CMap", 18)), 0); (("of_list", 2883), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("key", 2844)), 0, (0)), 100000000, 0, -1375); ((("a")), 100000000, 0, -1372)]), 100000000, 0, -1374)], (0)), 100000000, 0, -1373), (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1372)], (0)), 100000000, 0, -1371), 0), 100000000, 0, -1370), 0, (("interp/notation.mli", 28, 1088, 1117), ("interp/notation.mli", 28, 1088, 1198), 0), 0, Tag1 ("CMap", 19)), 0); (("symmetric_diff_fold", 2884), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 2844)), 0, (0)), 100000000, 0, -1369), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1361)], (0)), 100000000, 0, -1368), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1361)], (0)), 100000000, 0, -1367), (Tag1 (0, ((("b")), 100000000, 0, -1359), ((("b")), 100000000, 0, -1359), 0), 100000000, 0, -1366), 0), 100000000, 0, -1365), 0), 100000000, 0, -1364), 0), 100000000, 0, -1363), (Tag1 (0, (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1361)], (0)), 100000000, 0, -1362), (Tag1 (0, (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1361)], (0)), 100000000, 0, -1360), (Tag1 (0, ((("b")), 100000000, 0, -1359), ((("b")), 100000000, 0, -1359), 0), 100000000, 0, -1358), 0), 100000000, 0, -1357), 0), 100000000, 0, -1356), 0), 100000000, 0, -1355), 0, (("interp/notation.mli", 28, 1088, 1117), ("interp/notation.mli", 28, 1088, 1198), 0), 0, Tag1 ("CMap", 20)), 0); Tag3 (("Smart", 2885), 0, (Tag1 ([(("map", 2888), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -1666), ((("a")), 100000000, 0, -1666), 0), 100000000, 0, -1668), (Tag1 (0, (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1666)], (0)), 100000000, 0, -1667), (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1666)], (0)), 100000000, 0, -1665), 0), 100000000, 0, -1664), 0), 100000000, 0, -1663), 0, (("interp/notation.mli", 28, 1088, 1117), ("interp/notation.mli", 28, 1088, 1198), 0), 0, Tag1 ("CMap", 21)), 0); (("mapi", 2889), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 2844)), 0, (0)), 100000000, 0, -1662), (Tag1 (0, ((("a")), 100000000, 0, -1658), ((("a")), 100000000, 0, -1658), 0), 100000000, 0, -1661), 0), 100000000, 0, -1660), (Tag1 (0, (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1658)], (0)), 100000000, 0, -1659), (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1658)], (0)), 100000000, 0, -1657), 0), 100000000, 0, -1656), 0), 100000000, 0, -1655), 0, (("interp/notation.mli", 28, 1088, 1117), ("interp/notation.mli", 28, 1088, 1198), 0), 0, Tag1 ("CMap", 22)), 0)]), 0, (("interp/notation.mli", 28, 1088, 1117), ("interp/notation.mli", 28, 1088, 1198), 0), Tag1 ("CMap", 23)), 0, 0); Tag3 (("Monad", 2886), 0, (Tag2 (((("M", 2887)), (Tag1 ((Tag2 ("CMap")), "MonadS"))), Tag1 ([(("fold", 2890), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 2844)), 0, (0)), 100000000, 0, -1715), (Tag1 (0, ((("a")), 100000000, 0, -1710), (Tag1 (0, ((("b")), 100000000, 0, -1708), (Tag3 (Tag1 ((("M", 2887)), "t"), [((("b")), 100000000, 0, -1708)], (0)), 100000000, 0, -1714), 0), 100000000, 0, -1713), 0), 100000000, 0, -1712), 0), 100000000, 0, -1711), (Tag1 (0, (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1710)], (0)), 100000000, 0, -1709), (Tag1 (0, ((("b")), 100000000, 0, -1708), (Tag3 (Tag1 ((("M", 2887)), "t"), [((("b")), 100000000, 0, -1708)], (0)), 100000000, 0, -1707), 0), 100000000, 0, -1706), 0), 100000000, 0, -1705), 0), 100000000, 0, -1704), 0, (("interp/notation.mli", 28, 1088, 1117), ("interp/notation.mli", 28, 1088, 1198), 0), 0, Tag1 ("CMap", 25)), 0); (("fold_left", 2891), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 2844)), 0, (0)), 100000000, 0, -1703), (Tag1 (0, ((("a")), 100000000, 0, -1698), (Tag1 (0, ((("b")), 100000000, 0, -1696), (Tag3 (Tag1 ((("M", 2887)), "t"), [((("b")), 100000000, 0, -1696)], (0)), 100000000, 0, -1702), 0), 100000000, 0, -1701), 0), 100000000, 0, -1700), 0), 100000000, 0, -1699), (Tag1 (0, (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1698)], (0)), 100000000, 0, -1697), (Tag1 (0, ((("b")), 100000000, 0, -1696), (Tag3 (Tag1 ((("M", 2887)), "t"), [((("b")), 100000000, 0, -1696)], (0)), 100000000, 0, -1695), 0), 100000000, 0, -1694), 0), 100000000, 0, -1693), 0), 100000000, 0, -1692), 0, (("interp/notation.mli", 28, 1088, 1117), ("interp/notation.mli", 28, 1088, 1198), 0), 0, Tag1 ("CMap", 26)), 0); (("fold_right", 2892), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 2844)), 0, (0)), 100000000, 0, -1691), (Tag1 (0, ((("a")), 100000000, 0, -1686), (Tag1 (0, ((("b")), 100000000, 0, -1684), (Tag3 (Tag1 ((("M", 2887)), "t"), [((("b")), 100000000, 0, -1684)], (0)), 100000000, 0, -1690), 0), 100000000, 0, -1689), 0), 100000000, 0, -1688), 0), 100000000, 0, -1687), (Tag1 (0, (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1686)], (0)), 100000000, 0, -1685), (Tag1 (0, ((("b")), 100000000, 0, -1684), (Tag3 (Tag1 ((("M", 2887)), "t"), [((("b")), 100000000, 0, -1684)], (0)), 100000000, 0, -1683), 0), 100000000, 0, -1682), 0), 100000000, 0, -1681), 0), 100000000, 0, -1680), 0, (("interp/notation.mli", 28, 1088, 1117), ("interp/notation.mli", 28, 1088, 1198), 0), 0, Tag1 ("CMap", 27)), 0); (("mapi", 2893), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 2844)), 0, (0)), 100000000, 0, -1679), (Tag1 (0, ((("a")), 100000000, 0, -1675), (Tag3 (Tag1 ((("M", 2887)), "t"), [((("b")), 100000000, 0, -1673)], (0)), 100000000, 0, -1678), 0), 100000000, 0, -1677), 0), 100000000, 0, -1676), (Tag1 (0, (Tag3 ((("t", 2845)), [((("a")), 100000000, 0, -1675)], (0)), 100000000, 0, -1674), (Tag3 (Tag1 ((("M", 2887)), "t"), [(Tag3 ((("t", 2845)), [((("b")), 100000000, 0, -1673)], (0)), 100000000, 0, -1672)], (0)), 100000000, 0, -1671), 0), 100000000, 0, -1670), 0), 100000000, 0, -1669), 0, (("interp/notation.mli", 28, 1088, 1117), ("interp/notation.mli", 28, 1088, 1198), 0), 0, Tag1 ("CMap", 28)), 0)])), 0, (("interp/notation.mli", 28, 1088, 1117), ("interp/notation.mli", 28, 1088, 1198), 0), Tag1 ("CMap", 29)), 0, 0)]), 0, (("interp/notation.mli", 28, 1088, 1088), ("interp/notation.mli", 28, 1088, 1198), 0), Tag1 ("Notation", 11)), 0, 0); Tag1 (("delimiters", 2607), (0, 0, 0, 1, ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -535)), 0, 0, 0, 0, (("interp/notation.mli", 34, 1346, 1346), ("interp/notation.mli", 34, 1346, 1370), 0), 0, 0, 0, Tag1 ("Notation", 12)), 1, 0); Tag1 (("scope", 2608), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("interp/notation.mli", 35, 1371, 1371), ("interp/notation.mli", 35, 1371, 1381), 0), 0, 0, 0, Tag1 ("Notation", 13)), 1, 0); Tag1 (("scopes", 2609), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("interp/notation.mli", 36, 1382, 1382), ("interp/notation.mli", 36, 1382, 1393), 0), 0, 0, 0, Tag1 ("Notation", 14)), 1, 0); (("declare_scope", 2610), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Notation_term")), "scope_name"), 0, (0)), 100000000, 0, -534), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -533), 0), 100000000, 0, -532), 0, (("interp/notation.mli", 38, 1422, 1422), ("interp/notation.mli", 38, 1422, 1460), 0), 0, Tag1 ("Notation", 15)), 0); (("ensure_scope", 2611), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Notation_term")), "scope_name"), 0, (0)), 100000000, 0, -531), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -530), 0), 100000000, 0, -529), 0, (("interp/notation.mli", 41, 1506, 1506), ("interp/notation.mli", 41, 1506, 1543), 0), 0, Tag1 ("Notation", 16)), 0); (("current_scopes", 2612), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -528), (Tag3 ((("scopes", 2609)), 0, (0)), 100000000, 0, -527), 0), 100000000, 0, -526), 0, (("interp/notation.mli", 43, 1545, 1545), ("interp/notation.mli", 43, 1545, 1580), 0), 0, Tag1 ("Notation", 17)), 0); (("scope_is_open_in_scopes", 2613), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Notation_term")), "scope_name"), 0, (0)), 100000000, 0, -525), (Tag1 (0, (Tag3 ((("scopes", 2609)), 0, (0)), 100000000, 0, -524), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -523), 0), 100000000, 0, -522), 0), 100000000, 0, -521), 0, (("interp/notation.mli", 47, 1678, 1678), ("interp/notation.mli", 47, 1678, 1736), 0), 0, Tag1 ("Notation", 18)), 0); (("scope_is_open", 2614), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Notation_term")), "scope_name"), 0, (0)), 100000000, 0, -520), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -519), 0), 100000000, 0, -518), 0, (("interp/notation.mli", 48, 1737, 1737), ("interp/notation.mli", 48, 1737, 1775), 0), 0, Tag1 ("Notation", 19)), 0); (("open_scope", 2615), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Notation_term")), "scope_name"), 0, (0)), 100000000, 0, -517), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -516), 0), 100000000, 0, -515), 0, (("interp/notation.mli", 51, 1795, 1795), ("interp/notation.mli", 51, 1795, 1830), 0), 0, Tag1 ("Notation", 20)), 0); (("close_scope", 2616), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Notation_term")), "scope_name"), 0, (0)), 100000000, 0, -514), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -513), 0), 100000000, 0, -512), 0, (("interp/notation.mli", 52, 1831, 1831), ("interp/notation.mli", 52, 1831, 1867), 0), 0, Tag1 ("Notation", 21)), 0); (("normalize_scope", 2617), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -511), (Tag3 (Tag1 ((Tag2 ("Notation_term")), "scope_name"), 0, (0)), 100000000, 0, -510), 0), 100000000, 0, -509), 0, (("interp/notation.mli", 55, 1931, 1931), ("interp/notation.mli", 55, 1931, 1973), 0), 0, Tag1 ("Notation", 22)), 0); (("empty_scope_stack", 2618), ((Tag3 ((("scopes", 2609)), 0, (0)), 100000000, 0, -508), 0, (("interp/notation.mli", 58, 2006, 2006), ("interp/notation.mli", 58, 2006, 2036), 0), 0, Tag1 ("Notation", 23)), 0); (("push_scope", 2619), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Notation_term")), "scope_name"), 0, (0)), 100000000, 0, -507), (Tag1 (0, (Tag3 ((("scopes", 2609)), 0, (0)), 100000000, 0, -506), (Tag3 ((("scopes", 2609)), 0, (0)), 100000000, 0, -505), 0), 100000000, 0, -504), 0), 100000000, 0, -503), 0, (("interp/notation.mli", 59, 2037, 2037), ("interp/notation.mli", 59, 2037, 2084), 0), 0, Tag1 ("Notation", 24)), 0); (("find_scope", 2620), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Notation_term")), "scope_name"), 0, (0)), 100000000, 0, -502), (Tag3 ((("scope", 2608)), 0, (0)), 100000000, 0, -501), 0), 100000000, 0, -500), 0, (("interp/notation.mli", 61, 2086, 2086), ("interp/notation.mli", 61, 2086, 2122), 0), 0, Tag1 ("Notation", 25)), 0); (("declare_delimiters", 2621), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Notation_term")), "scope_name"), 0, (0)), 100000000, 0, -499), (Tag1 (0, (Tag3 ((("delimiters", 2607)), 0, (0)), 100000000, 0, -498), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -497), 0), 100000000, 0, -496), 0), 100000000, 0, -495), 0, (("interp/notation.mli", 65, 2164, 2164), ("interp/notation.mli", 65, 2164, 2221), 0), 0, Tag1 ("Notation", 26)), 0); (("remove_delimiters", 2622), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Notation_term")), "scope_name"), 0, (0)), 100000000, 0, -494), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -493), 0), 100000000, 0, -492), 0, (("interp/notation.mli", 66, 2222, 2222), ("interp/notation.mli", 66, 2222, 2264), 0), 0, Tag1 ("Notation", 27)), 0); (("find_delimiters_scope", 2623), ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -491)], (0)), 100000000, 0, -490), (Tag1 (0, (Tag3 ((("delimiters", 2607)), 0, (0)), 100000000, 0, -489), (Tag3 (Tag1 ((Tag2 ("Notation_term")), "scope_name"), 0, (0)), 100000000, 0, -488), 0), 100000000, 0, -487), 0), 100000000, 0, -486), 0, (("interp/notation.mli", 67, 2265, 2265), ("interp/notation.mli", 67, 2265, 2331), 0), 0, Tag1 ("Notation", 29)), 0); Tag1 (("notation_location", 2624), (0, 0, 0, 1, ((Tag2 ([(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "DirPath"), "t"), 0, (0)), 100000000, 0, -483); (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "DirPath"), "t"), 0, (0)), 100000000, 0, -484)]), 100000000, 0, -482); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -485)]), 100000000, 0, -481)), 0, 0, 0, 0, (("interp/notation.mli", 76, 2676, 2676), ("interp/notation.mli", 76, 2676, 2733), 0), 0, 0, 0, Tag1 ("Notation", 30)), 1, 0); Tag1 (("required_module", 2625), (0, 0, 0, 1, ((Tag2 ([(Tag3 (Tag1 ((Tag2 ("Libnames")), "full_path"), 0, (0)), 100000000, 0, -478); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -480)], (0)), 100000000, 0, -479)]), 100000000, 0, -477)), 0, 0, 0, 0, (("interp/notation.mli", 84, 2984, 2984), ("interp/notation.mli", 84, 2984, 3030), 0), 0, 0, 0, Tag1 ("Notation", 31)), 1, 0); Tag1 (("rawnum", 2626), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("NumTok")), "Signed"), "t"), 0, (0)), 100000000, 0, -476)), 0, 0, 0, 0, (("interp/notation.mli", 85, 3031, 3031), ("interp/notation.mli", 85, 3031, 3060), 0), 0, 0, 0, Tag1 ("Notation", 32)), 1, 0); Tag1 (("prim_token_uid", 2627), (0, 0, 0, 1, ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -475)), 0, 0, 0, 0, (("interp/notation.mli", 93, 3390, 3390), ("interp/notation.mli", 93, 3390, 3418), 0), 0, 0, 0, Tag1 ("Notation", 33)), 1, 0); Tag1 (("prim_token_interpreter", 2628), ([((("a")), 100000000, 0, -472)], 1, 0, 1, ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -474)], (0)), 100000000, 0, -473), (Tag1 (0, ((("a")), 100000000, 0, -472), (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -471), 0), 100000000, 0, -470), 0), 100000000, 0, -469)), [46], [0], 0, 0, (("interp/notation.mli", 95, 3420, 3420), ("interp/notation.mli", 95, 3420, 3484), 0), 0, 0, 0, Tag1 ("Notation", 34)), 1, 0); Tag1 (("prim_token_uninterpreter", 2629), ([((("a")), 100000000, 0, -467)], 1, 0, 1, ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Glob_term")), "any_glob_constr"), 0, (0)), 100000000, 0, -468), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -467)], (0)), 100000000, 0, -466), 0), 100000000, 0, -465)), [25], [0], 0, 0, (("interp/notation.mli", 96, 3485, 3485), ("interp/notation.mli", 96, 3485, 3548), 0), 0, 0, 0, Tag1 ("Notation", 35)), 1, 0); Tag1 (("prim_token_interpretation", 2630), ([((("a")), 100000000, 0, -463)], 1, 0, 1, ((Tag2 ([(Tag3 ((("prim_token_interpreter", 2628)), [((("a")), 100000000, 0, -463)], (0)), 100000000, 0, -462); (Tag3 ((("prim_token_uninterpreter", 2629)), [((("a")), 100000000, 0, -463)], (0)), 100000000, 0, -464)]), 100000000, 0, -461)), [63], [0], 0, 0, (("interp/notation.mli", 98, 3550, 3550), ("interp/notation.mli", 99, 3586, 3643), 0), 0, 0, 0, Tag1 ("Notation", 36)), 1, 0); (("register_rawnumeral_interpretation", 2631), ((Tag1 (Tag1 ("allow_overwrite"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -460)], (0)), 100000000, 0, -459), (Tag1 (0, (Tag3 ((("prim_token_uid", 2627)), 0, (0)), 100000000, 0, -458), (Tag1 (0, (Tag3 ((("prim_token_interpretation", 2630)), [(Tag3 ((("rawnum", 2626)), 0, (0)), 100000000, 0, -457)], (0)), 100000000, 0, -456), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -455), 0), 100000000, 0, -454), 0), 100000000, 0, -453), 0), 100000000, 0, -452), 0, (("interp/notation.mli", 101, 3645, 3645), ("interp/notation.mli", 102, 3686, 3771), 0), 0, Tag1 ("Notation", 37)), 0); (("register_bignumeral_interpretation", 2632), ((Tag1 (Tag1 ("allow_overwrite"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -451)], (0)), 100000000, 0, -450), (Tag1 (0, (Tag3 ((("prim_token_uid", 2627)), 0, (0)), 100000000, 0, -449), (Tag1 (0, (Tag3 ((("prim_token_interpretation", 2630)), [(Tag3 (Tag1 ((Tag2 ("Z")), "t"), 0, (0)), 100000000, 0, -448)], (0)), 100000000, 0, -447), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -446), 0), 100000000, 0, -445), 0), 100000000, 0, -444), 0), 100000000, 0, -443), 0, (("interp/notation.mli", 104, 3773, 3773), ("interp/notation.mli", 105, 3814, 3896), 0), 0, Tag1 ("Notation", 38)), 0); (("register_string_interpretation", 2633), ((Tag1 (Tag1 ("allow_overwrite"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -442)], (0)), 100000000, 0, -441), (Tag1 (0, (Tag3 ((("prim_token_uid", 2627)), 0, (0)), 100000000, 0, -440), (Tag1 (0, (Tag3 ((("prim_token_interpretation", 2630)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -439)], (0)), 100000000, 0, -438), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -437), 0), 100000000, 0, -436), 0), 100000000, 0, -435), 0), 100000000, 0, -434), 0, (("interp/notation.mli", 107, 3898, 3898), ("interp/notation.mli", 108, 3935, 4020), 0), 0, Tag1 ("Notation", 39)), 0); Tag1 (("prim_token_notation_error", 2634), (0, 0, Tag1 ([(("UnexpectedTerm", 1373), ([(Tag3 (Tag1 ((Tag2 ("Constr")), "t"), 0, (0)), 100000000, 0, -432)]), 0, (("interp/notation.mli", 113, 4081, 4083), ("interp/notation.mli", 113, 4081, 4111), 0), 0, Tag1 ("Notation", 42)); (("UnexpectedNonOptionTerm", 1531), ([(Tag3 (Tag1 ((Tag2 ("Constr")), "t"), 0, (0)), 100000000, 0, -433)]), 0, (("interp/notation.mli", 114, 4112, 4114), ("interp/notation.mli", 114, 4112, 4151), 0), 0, Tag1 ("Notation", 43))], 0), 1, 0, 0, 0, 0, 0, (("interp/notation.mli", 112, 4048, 4048), ("interp/notation.mli", 114, 4112, 4151), 0), 0, 0, 0, Tag1 ("Notation", 40)), 1, 0); Tag2 (("PrimTokenNotationError", 2635), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -428); (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -429); (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -430); (Tag3 ((("prim_token_notation_error", 2634)), 0, (0)), 100000000, 0, -431)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Notation", 44)), 2, 0); Tag1 (("numnot_option", 2636), (0, 0, Tag1 ([(("Nop", 1885), (0), 0, (("interp/notation.mli", 119, 4275, 4277), ("interp/notation.mli", 119, 4275, 4282), 0), 0, Tag1 ("Notation", 46)); (("Warning", 1886), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("NumTok")), "UnsignedNat"), "t"), 0, (0)), 100000000, 0, -426)]), 0, (("interp/notation.mli", 120, 4283, 4285), ("interp/notation.mli", 120, 4283, 4318), 0), 0, Tag1 ("Notation", 47)); (("Abstract", 1894), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("NumTok")), "UnsignedNat"), "t"), 0, (0)), 100000000, 0, -427)]), 0, (("interp/notation.mli", 121, 4319, 4321), ("interp/notation.mli", 121, 4319, 4355), 0), 0, Tag1 ("Notation", 48))], 0), 1, 0, 0, 0, 0, 0, (("interp/notation.mli", 118, 4254, 4254), ("interp/notation.mli", 121, 4319, 4355), 0), 0, 0, 0, Tag1 ("Notation", 45)), 1, 0); Tag1 (("int_ty", 2637), (0, 0, [[(("dec_uint", 1896), 0, (Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -420), (("interp/notation.mli", 124, 4371, 4375), ("interp/notation.mli", 124, 4371, 4402), 0), 0, Tag1 ("Notation", 50)); (("dec_int", 1897), 0, (Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -421), (("interp/notation.mli", 125, 4403, 4407), ("interp/notation.mli", 125, 4403, 4433), 0), 0, Tag1 ("Notation", 51)); (("hex_uint", 1898), 0, (Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -422), (("interp/notation.mli", 126, 4434, 4438), ("interp/notation.mli", 126, 4434, 4465), 0), 0, Tag1 ("Notation", 52)); (("hex_int", 1899), 0, (Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -423), (("interp/notation.mli", 127, 4466, 4470), ("interp/notation.mli", 127, 4466, 4496), 0), 0, Tag1 ("Notation", 53)); (("uint", 1900), 0, (Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -424), (("interp/notation.mli", 128, 4497, 4501), ("interp/notation.mli", 128, 4497, 4524), 0), 0, Tag1 ("Notation", 54)); (("int", 1901), 0, (Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -425), (("interp/notation.mli", 129, 4525, 4529), ("interp/notation.mli", 129, 4525, 4550), 0), 0, Tag1 ("Notation", 55))]], 1, 0, 0, 0, 0, 0, (("interp/notation.mli", 123, 4357, 4357), ("interp/notation.mli", 129, 4525, 4552), 0), 0, 0, 0, Tag1 ("Notation", 49)), 1, 0); Tag1 (("z_pos_ty", 2638), (0, 0, [[(("z_ty", 1925), 0, (Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -418), (("interp/notation.mli", 132, 4570, 4574), ("interp/notation.mli", 132, 4570, 4597), 0), 0, Tag1 ("Notation", 57)); (("pos_ty", 1926), 0, (Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -419), (("interp/notation.mli", 133, 4598, 4602), ("interp/notation.mli", 133, 4598, 4626), 0), 0, Tag1 ("Notation", 58))]], 1, 0, 0, 0, 0, 0, (("interp/notation.mli", 131, 4554, 4554), ("interp/notation.mli", 133, 4598, 4628), 0), 0, 0, 0, Tag1 ("Notation", 56)), 1, 0); Tag1 (("number_ty", 2639), (0, 0, [[(("int", 1928), 0, (Tag3 ((("int_ty", 2637)), 0, (0)), 100000000, 0, -414), (("interp/notation.mli", 136, 4647, 4651), ("interp/notation.mli", 136, 4647, 4664), 0), 0, Tag1 ("Notation", 60)); (("decimal", 1929), 0, (Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -415), (("interp/notation.mli", 137, 4665, 4669), ("interp/notation.mli", 137, 4665, 4695), 0), 0, Tag1 ("Notation", 61)); (("hexadecimal", 1930), 0, (Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -416), (("interp/notation.mli", 138, 4696, 4700), ("interp/notation.mli", 138, 4696, 4730), 0), 0, Tag1 ("Notation", 62)); (("number", 1931), 0, (Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -417), (("interp/notation.mli", 139, 4731, 4735), ("interp/notation.mli", 139, 4731, 4759), 0), 0, Tag1 ("Notation", 63))]], 1, 0, 0, 0, 0, 0, (("interp/notation.mli", 135, 4630, 4630), ("interp/notation.mli", 139, 4731, 4761), 0), 0, 0, 0, Tag1 ("Notation", 59)), 1, 0); Tag1 (("pos_neg_int63_ty", 2640), (0, 0, [[(("pos_neg_int63_ty", 1933), 0, (Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -413), (("interp/notation.mli", 142, 4787, 4791), ("interp/notation.mli", 142, 4787, 4825), 0), 0, Tag1 ("Notation", 65))]], 1, 0, 0, 0, 0, 0, (("interp/notation.mli", 141, 4763, 4763), ("interp/notation.mli", 142, 4787, 4827), 0), 0, 0, 1, Tag1 ("Notation", 64)), 1, 0); Tag1 (("target_kind", 2641), (0, 0, Tag1 ([(("Int", 1935), ([(Tag3 ((("int_ty", 2637)), 0, (0)), 100000000, 0, -408)]), 0, (("interp/notation.mli", 145, 4848, 4850), ("interp/notation.mli", 145, 4848, 4865), 0), 0, Tag1 ("Notation", 67)); (("UInt", 1936), ([(Tag3 ((("int_ty", 2637)), 0, (0)), 100000000, 0, -409)]), 0, (("interp/notation.mli", 146, 4899, 4901), ("interp/notation.mli", 146, 4899, 4917), 0), 0, Tag1 ("Notation", 68)); (("Z", 1937), ([(Tag3 ((("z_pos_ty", 2638)), 0, (0)), 100000000, 0, -410)]), 0, (("interp/notation.mli", 147, 4945, 4947), ("interp/notation.mli", 147, 4945, 4962), 0), 0, Tag1 ("Notation", 69)); (("Int63", 1938), ([(Tag3 ((("pos_neg_int63_ty", 2640)), 0, (0)), 100000000, 0, -411)]), 0, (("interp/notation.mli", 148, 5004, 5006), ("interp/notation.mli", 148, 5004, 5033), 0), 0, Tag1 ("Notation", 70)); (("Float64", 1939), (0), 0, (("interp/notation.mli", 149, 5089, 5091), ("interp/notation.mli", 149, 5089, 5100), 0), 0, Tag1 ("Notation", 71)); (("Number", 1940), ([(Tag3 ((("number_ty", 2639)), 0, (0)), 100000000, 0, -412)]), 0, (("interp/notation.mli", 150, 5134, 5136), ("interp/notation.mli", 150, 5134, 5157), 0), 0, Tag1 ("Notation", 72))], 0), 1, 0, 0, 0, 0, 0, (("interp/notation.mli", 144, 4829, 4829), ("interp/notation.mli", 150, 5134, 5157), 0), 0, 0, 0, Tag1 ("Notation", 66)), 1, 0); Tag1 (("string_target_kind", 2642), (0, 0, Tag1 ([(("ListByte", 1942), (0), 0, (("interp/notation.mli", 153, 5227, 5229), ("interp/notation.mli", 153, 5227, 5239), 0), 0, Tag1 ("Notation", 74)); (("Byte", 1943), (0), 0, (("interp/notation.mli", 154, 5240, 5242), ("interp/notation.mli", 154, 5240, 5248), 0), 0, Tag1 ("Notation", 75))], 0), 1, 0, 0, 0, 0, 0, (("interp/notation.mli", 152, 5201, 5201), ("interp/notation.mli", 154, 5240, 5248), 0), 0, 1, 0, Tag1 ("Notation", 73)), 1, 0); Tag1 (("option_kind", 2643), (0, 0, Tag1 ([(("Option", 1945), (0), 0, (("interp/notation.mli", 156, 5250, 5269), ("interp/notation.mli", 156, 5250, 5275), 0), 0, Tag1 ("Notation", 77)); (("Direct", 1946), (0), 0, (("interp/notation.mli", 156, 5250, 5276), ("interp/notation.mli", 156, 5250, 5284), 0), 0, Tag1 ("Notation", 78))], 0), 1, 0, 0, 0, 0, 0, (("interp/notation.mli", 156, 5250, 5250), ("interp/notation.mli", 156, 5250, 5284), 0), 0, 1, 0, Tag1 ("Notation", 76)), 1, 0); Tag1 (("conversion_kind", 2644), ([((("target")), 100000000, 0, -406)], 1, 0, 1, ((Tag2 ([((("target")), 100000000, 0, -406); (Tag3 ((("option_kind", 2643)), 0, (0)), 100000000, 0, -407)]), 100000000, 0, -405)), [25], [0], 0, 0, (("interp/notation.mli", 157, 5285, 5285), ("interp/notation.mli", 157, 5285, 5337), 0), 0, 0, 0, Tag1 ("Notation", 79)), 1, 0); Tag1 (("to_post_arg", 2645), (0, 0, Tag1 ([(("ToPostCopy", 1949), (0), 0, (("interp/notation.mli", 174, 6220, 6239), ("interp/notation.mli", 174, 6220, 6249), 0), 0, Tag1 ("Notation", 81)); (("ToPostAs", 1950), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -403)]), 0, (("interp/notation.mli", 174, 6220, 6250), ("interp/notation.mli", 174, 6220, 6267), 0), 0, Tag1 ("Notation", 82)); (("ToPostHole", 1951), (0), 0, (("interp/notation.mli", 174, 6220, 6268), ("interp/notation.mli", 174, 6220, 6280), 0), 0, Tag1 ("Notation", 83)); (("ToPostCheck", 1952), ([(Tag3 (Tag1 ((Tag2 ("Constr")), "t"), 0, (0)), 100000000, 0, -404)]), 0, (("interp/notation.mli", 174, 6220, 6281), ("interp/notation.mli", 174, 6220, 6306), 0), 0, Tag1 ("Notation", 84))], 0), 1, 0, 0, 0, 0, 0, (("interp/notation.mli", 174, 6220, 6220), ("interp/notation.mli", 174, 6220, 6306), 0), 0, 0, 0, Tag1 ("Notation", 80)), 1, 0); Tag1 (("prim_token_notation_obj", 2646), ([((("target")), 100000000, 0, -390); ((("warning")), 100000000, 0, -402)], 2, [[(("to_kind", 1954), 0, (Tag3 ((("conversion_kind", 2644)), [((("target")), 100000000, 0, -390)], (0)), 100000000, 0, -389), (("interp/notation.mli", 176, 6358, 6362), ("interp/notation.mli", 176, 6358, 6396), 0), 0, Tag1 ("Notation", 86)); (("to_ty", 1966), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -391), (("interp/notation.mli", 177, 6397, 6401), ("interp/notation.mli", 177, 6397, 6419), 0), 0, Tag1 ("Notation", 87)); (("to_post", 1967), 0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -395); (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -396); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("to_post_arg", 2645)), 0, (0)), 100000000, 0, -398)], (0)), 100000000, 0, -397)]), 100000000, 0, -394)], (0)), 100000000, 0, -393)], (0)), 100000000, 0, -392), (("interp/notation.mli", 178, 6420, 6424), ("interp/notation.mli", 178, 6420, 6490), 0), 0, Tag1 ("Notation", 88)); (("of_kind", 1968), 0, (Tag3 ((("conversion_kind", 2644)), [((("target")), 100000000, 0, -390)], (0)), 100000000, 0, -399), (("interp/notation.mli", 179, 6491, 6495), ("interp/notation.mli", 179, 6491, 6529), 0), 0, Tag1 ("Notation", 89)); (("of_ty", 1969), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -400), (("interp/notation.mli", 180, 6530, 6534), ("interp/notation.mli", 180, 6530, 6552), 0), 0, Tag1 ("Notation", 90)); (("ty_name", 1970), 0, (Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -401), (("interp/notation.mli", 181, 6553, 6557), ("interp/notation.mli", 181, 6553, 6583), 0), 0, Tag1 ("Notation", 91)); (("warning", 1971), 0, ((("warning")), 100000000, 0, -402), (("interp/notation.mli", 182, 6620, 6624), ("interp/notation.mli", 182, 6620, 6642), 0), 0, Tag1 ("Notation", 92))]], 1, 0, [25; 25], [0; 0], 0, 0, (("interp/notation.mli", 175, 6307, 6307), ("interp/notation.mli", 182, 6620, 6644), 0), 0, 0, 0, Tag1 ("Notation", 85)), 1, 0); Tag1 (("number_notation_obj", 2647), (0, 0, 0, 1, ((Tag3 ((("prim_token_notation_obj", 2646)), [(Tag3 ((("target_kind", 2641)), 0, (0)), 100000000, 0, -387); (Tag3 ((("numnot_option", 2636)), 0, (0)), 100000000, 0, -388)], (0)), 100000000, 0, -386)), 0, 0, 0, 0, (("interp/notation.mli", 184, 6646, 6646), ("interp/notation.mli", 184, 6646, 6725), 0), 0, 0, 0, Tag1 ("Notation", 93)), 1, 0); Tag1 (("string_notation_obj", 2648), (0, 0, 0, 1, ((Tag3 ((("prim_token_notation_obj", 2646)), [(Tag3 ((("string_target_kind", 2642)), 0, (0)), 100000000, 0, -384); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -385)], (0)), 100000000, 0, -383)), 0, 0, 0, 0, (("interp/notation.mli", 185, 6726, 6726), ("interp/notation.mli", 185, 6726, 6803), 0), 0, 0, 0, Tag1 ("Notation", 94)), 1, 0); Tag1 (("prim_token_interp_info", 2649), (0, 0, Tag1 ([(("Uid", 1975), ([(Tag3 ((("prim_token_uid", 2627)), 0, (0)), 100000000, 0, -380)]), 0, (("interp/notation.mli", 188, 6835, 6839), ("interp/notation.mli", 188, 6835, 6860), 0), 0, Tag1 ("Notation", 96)); (("NumberNotation", 1976), ([(Tag3 ((("number_notation_obj", 2647)), 0, (0)), 100000000, 0, -381)]), 0, (("interp/notation.mli", 189, 6861, 6863), ("interp/notation.mli", 189, 6861, 6902), 0), 0, Tag1 ("Notation", 97)); (("StringNotation", 1977), ([(Tag3 ((("string_notation_obj", 2648)), 0, (0)), 100000000, 0, -382)]), 0, (("interp/notation.mli", 190, 6903, 6905), ("interp/notation.mli", 190, 6903, 6944), 0), 0, Tag1 ("Notation", 98))], 0), 1, 0, 0, 0, 0, 0, (("interp/notation.mli", 187, 6805, 6805), ("interp/notation.mli", 190, 6903, 6944), 0), 0, 0, 0, Tag1 ("Notation", 95)), 1, 0); Tag1 (("prim_token_infos", 2650), (0, 0, [[(("pt_local", 1979), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -373), (("interp/notation.mli", 193, 6972, 6974), ("interp/notation.mli", 193, 6972, 6990), 0), 0, Tag1 ("Notation", 100)); (("pt_scope", 1980), 0, (Tag3 (Tag1 ((Tag2 ("Notation_term")), "scope_name"), 0, (0)), 100000000, 0, -374), (("interp/notation.mli", 194, 7028, 7030), ("interp/notation.mli", 194, 7028, 7052), 0), 0, Tag1 ("Notation", 101)); (("pt_interp_info", 1981), 0, (Tag3 ((("prim_token_interp_info", 2649)), 0, (0)), 100000000, 0, -375), (("interp/notation.mli", 195, 7076, 7078), ("interp/notation.mli", 195, 7076, 7118), 0), 0, Tag1 ("Notation", 102)); (("pt_required", 1982), 0, (Tag3 ((("required_module", 2625)), 0, (0)), 100000000, 0, -376), (("interp/notation.mli", 196, 7232, 7234), ("interp/notation.mli", 196, 7232, 7264), 0), 0, Tag1 ("Notation", 103)); (("pt_refs", 1983), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -378)], (0)), 100000000, 0, -377), (("interp/notation.mli", 197, 7307, 7309), ("interp/notation.mli", 197, 7307, 7334), 0), 0, Tag1 ("Notation", 104)); (("pt_in_match", 1984), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -379), (("interp/notation.mli", 198, 7379, 7381), ("interp/notation.mli", 198, 7379, 7399), 0), 0, Tag1 ("Notation", 105))]], 1, 0, 0, 0, 0, 0, (("interp/notation.mli", 192, 6946, 6946), ("interp/notation.mli", 199, 7452, 7453), 0), 0, 0, 0, Tag1 ("Notation", 99)), 1, 0); (("enable_prim_token_interpretation", 2651), ((Tag1 (0, (Tag3 ((("prim_token_infos", 2650)), 0, (0)), 100000000, 0, -372), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -371), 0), 100000000, 0, -370), 0, (("interp/notation.mli", 208, 7754, 7754), ("interp/notation.mli", 208, 7754, 7817), 0), 0, Tag1 ("Notation", 106)), 0); (("declare_numeral_interpreter", 2652), ((Tag1 (Tag1 ("local"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -369)], (0)), 100000000, 0, -368), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Notation_term")), "scope_name"), 0, (0)), 100000000, 0, -367), (Tag1 (0, (Tag3 ((("required_module", 2625)), 0, (0)), 100000000, 0, -366), (Tag1 (0, (Tag3 ((("prim_token_interpreter", 2628)), [(Tag3 (Tag1 ((Tag2 ("Z")), "t"), 0, (0)), 100000000, 0, -365)], (0)), 100000000, 0, -364), (Tag1 (0, (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -360)], (0)), 100000000, 0, -359); (Tag3 ((("prim_token_uninterpreter", 2629)), [(Tag3 (Tag1 ((Tag2 ("Z")), "t"), 0, (0)), 100000000, 0, -362)], (0)), 100000000, 0, -361); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -363)]), 100000000, 0, -358), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -357), 0), 100000000, 0, -356), 0), 100000000, 0, -355), 0), 100000000, 0, -354), 0), 100000000, 0, -353), 0), 100000000, 0, -352), 0, (("interp/notation.mli", 217, 8085, 8085), ("interp/notation.mli", 219, 8199, 8263), 0), 0, Tag1 ("Notation", 107)), 0); (("declare_string_interpreter", 2653), ((Tag1 (Tag1 ("local"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -351)], (0)), 100000000, 0, -350), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Notation_term")), "scope_name"), 0, (0)), 100000000, 0, -349), (Tag1 (0, (Tag3 ((("required_module", 2625)), 0, (0)), 100000000, 0, -348), (Tag1 (0, (Tag3 ((("prim_token_interpreter", 2628)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -347)], (0)), 100000000, 0, -346), (Tag1 (0, (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -342)], (0)), 100000000, 0, -341); (Tag3 ((("prim_token_uninterpreter", 2629)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -344)], (0)), 100000000, 0, -343); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -345)]), 100000000, 0, -340), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -339), 0), 100000000, 0, -338), 0), 100000000, 0, -337), 0), 100000000, 0, -336), 0), 100000000, 0, -335), 0), 100000000, 0, -334), 0, (("interp/notation.mli", 220, 8264, 8264), ("interp/notation.mli", 222, 8380, 8447), 0), 0, Tag1 ("Notation", 108)), 0); (("interp_prim_token", 2654), ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -333)], (0)), 100000000, 0, -332), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "prim_token"), 0, (0)), 100000000, 0, -331), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Notation_term")), "subscopes"), 0, (0)), 100000000, 0, -330), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -327); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Notation_term")), "scope_name"), 0, (0)), 100000000, 0, -329)], (0)), 100000000, 0, -328)]), 100000000, 0, -326), 0), 100000000, 0, -325), 0), 100000000, 0, -324), 0), 100000000, 0, -323), 0, (("interp/notation.mli", 227, 8545, 8545), ("interp/notation.mli", 228, 8610, 8643), 0), 0, Tag1 ("Notation", 109)), 0); (("interp_prim_token_cases_pattern_expr", 2655), ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -322)], (0)), 100000000, 0, -321), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -320), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -319), 0), 100000000, 0, -318), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "prim_token"), 0, (0)), 100000000, 0, -317), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Notation_term")), "subscopes"), 0, (0)), 100000000, 0, -316), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -313); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Notation_term")), "scope_name"), 0, (0)), 100000000, 0, -315)], (0)), 100000000, 0, -314)]), 100000000, 0, -312), 0), 100000000, 0, -311), 0), 100000000, 0, -310), 0), 100000000, 0, -309), 0), 100000000, 0, -308), 0, (("interp/notation.mli", 230, 8708, 8708), ("interp/notation.mli", 231, 8802, 8848), 0), 0, Tag1 ("Notation", 110)), 0); (("uninterp_prim_token", 2656), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr_g"), [((("a")), 100000000, 0, -307)], (0)), 100000000, 0, -306), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Notation_term")), "subscopes"), 0, (0)), 100000000, 0, -305), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "prim_token"), 0, (0)), 100000000, 0, -302); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("delimiters", 2607)), 0, (0)), 100000000, 0, -304)], (0)), 100000000, 0, -303)]), 100000000, 0, -301), 0), 100000000, 0, -300), 0), 100000000, 0, -299), 0, (("interp/notation.mli", 236, 8962, 8962), ("interp/notation.mli", 237, 8988, 9053), 0), 0, Tag1 ("Notation", 111)), 0); (("uninterp_prim_token_cases_pattern", 2657), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Glob_term")), "cases_pattern_g"), [((("a")), 100000000, 0, -298)], (0)), 100000000, 0, -297), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Notation_term")), "subscopes"), 0, (0)), 100000000, 0, -296), (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -292); (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "prim_token"), 0, (0)), 100000000, 0, -293); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("delimiters", 2607)), 0, (0)), 100000000, 0, -295)], (0)), 100000000, 0, -294)]), 100000000, 0, -291), 0), 100000000, 0, -290), 0), 100000000, 0, -289), 0, (("interp/notation.mli", 238, 9054, 9054), ("interp/notation.mli", 239, 9094, 9170), 0), 0, Tag1 ("Notation", 112)), 0); (("availability_of_prim_token", 2658), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "prim_token"), 0, (0)), 100000000, 0, -288), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Notation_term")), "scope_name"), 0, (0)), 100000000, 0, -287), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Notation_term")), "subscopes"), 0, (0)), 100000000, 0, -286), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("delimiters", 2607)), 0, (0)), 100000000, 0, -285)], (0)), 100000000, 0, -284)], (0)), 100000000, 0, -283), 0), 100000000, 0, -282), 0), 100000000, 0, -281), 0), 100000000, 0, -280), 0, (("interp/notation.mli", 241, 9172, 9172), ("interp/notation.mli", 242, 9205, 9272), 0), 0, Tag1 ("Notation", 113)), 0); Tag1 (("entry_coercion_kind", 2659), (0, 0, Tag1 ([(("IsEntryCoercion", 2003), ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "notation_entry_level"), 0, (0)), 100000000, 0, -274); (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "notation_entry_relative_level"), 0, (0)), 100000000, 0, -275)]), 0, (("interp/notation.mli", 247, 9362, 9364), ("interp/notation.mli", 247, 9362, 9437), 0), 0, Tag1 ("Notation", 115)); (("IsEntryGlobal", 2004), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -276); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -277)]), 0, (("interp/notation.mli", 248, 9438, 9440), ("interp/notation.mli", 248, 9438, 9471), 0), 0, Tag1 ("Notation", 116)); (("IsEntryIdent", 2005), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -278); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -279)]), 0, (("interp/notation.mli", 249, 9472, 9474), ("interp/notation.mli", 249, 9472, 9504), 0), 0, Tag1 ("Notation", 117))], 0), 1, 0, 0, 0, 0, 0, (("interp/notation.mli", 246, 9335, 9335), ("interp/notation.mli", 249, 9472, 9504), 0), 0, 0, 0, Tag1 ("Notation", 114)), 1, 0); (("declare_notation", 2660), ((Tag1 (0, (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "notation_with_optional_scope"), 0, (0)), 100000000, 0, -272); (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "notation"), 0, (0)), 100000000, 0, -273)]), 100000000, 0, -271), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Notation_term")), "interpretation"), 0, (0)), 100000000, 0, -270), (Tag1 (0, (Tag3 ((("notation_location", 2624)), 0, (0)), 100000000, 0, -269), (Tag1 (("use"), (Tag3 (Tag1 ((Tag2 ("Notationextern")), "notation_use"), 0, (0)), 100000000, 0, -268), (Tag1 (("also_in_cases_pattern"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -267), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("entry_coercion_kind", 2659)), 0, (0)), 100000000, 0, -266)], (0)), 100000000, 0, -265), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Deprecation")), "t"), 0, (0)), 100000000, 0, -264)], (0)), 100000000, 0, -263), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -262), 0), 100000000, 0, -261), 0), 100000000, 0, -260), 0), 100000000, 0, -259), 0), 100000000, 0, -258), 0), 100000000, 0, -257), 0), 100000000, 0, -256), 0), 100000000, 0, -255), 0, (("interp/notation.mli", 251, 9506, 9506), ("interp/notation.mli", 255, 9697, 9727), 0), 0, Tag1 ("Notation", 118)), 0); (("interp_notation", 2661), ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -254)], (0)), 100000000, 0, -253), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "notation"), 0, (0)), 100000000, 0, -252), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Notation_term")), "subscopes"), 0, (0)), 100000000, 0, -251), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Notation_term")), "interpretation"), 0, (0)), 100000000, 0, -246); (Tag2 ([(Tag3 ((("notation_location", 2624)), 0, (0)), 100000000, 0, -248); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Notation_term")), "scope_name"), 0, (0)), 100000000, 0, -250)], (0)), 100000000, 0, -249)]), 100000000, 0, -247)]), 100000000, 0, -245), 0), 100000000, 0, -244), 0), 100000000, 0, -243), 0), 100000000, 0, -242), 0, (("interp/notation.mli", 259, 9783, 9783), ("interp/notation.mli", 260, 9844, 9906), 0), 0, Tag1 ("Notation", 119)), 0); (("availability_of_notation", 2662), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "specific_notation"), 0, (0)), 100000000, 0, -241), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Notation_term")), "subscopes"), 0, (0)), 100000000, 0, -240), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Notation_term")), "scope_name"), 0, (0)), 100000000, 0, -237)], (0)), 100000000, 0, -236); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("delimiters", 2607)), 0, (0)), 100000000, 0, -239)], (0)), 100000000, 0, -238)]), 100000000, 0, -235)], (0)), 100000000, 0, -234), 0), 100000000, 0, -233), 0), 100000000, 0, -232), 0, (("interp/notation.mli", 265, 10087, 10087), ("interp/notation.mli", 266, 10152, 10200), 0), 0, Tag1 ("Notation", 120)), 0); (("is_printing_inactive_rule", 2663), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Notationextern")), "interp_rule"), 0, (0)), 100000000, 0, -231), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Notation_term")), "interpretation"), 0, (0)), 100000000, 0, -230), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -229), 0), 100000000, 0, -228), 0), 100000000, 0, -227), 0, (("interp/notation.mli", 268, 10202, 10202), ("interp/notation.mli", 268, 10202, 10286), 0), 0, Tag1 ("Notation", 121)), 0); Tag1 (("notation_query_pattern_gen", 2664), ([((("a")), 100000000, 0, -221)], 1, [[(("notation_entry_pattern", 2015), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "notation_entry"), 0, (0)), 100000000, 0, -217)], (0)), 100000000, 0, -216), (("interp/notation.mli", 271, 10327, 10331), ("interp/notation.mli", 271, 10327, 10376), 0), 0, Tag1 ("Notation", 123)); (("interp_rule_key_pattern", 2063), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Util")), "union"), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "notation_key"), 0, (0)), 100000000, 0, -220); ((("a")), 100000000, 0, -221)], (0)), 100000000, 0, -219)], (0)), 100000000, 0, -218), (("interp/notation.mli", 272, 10377, 10381), ("interp/notation.mli", 272, 10377, 10444), 0), 0, Tag1 ("Notation", 124)); (("use_pattern", 2064), 0, (Tag3 (Tag1 ((Tag2 ("Notationextern")), "notation_use"), 0, (0)), 100000000, 0, -222), (("interp/notation.mli", 273, 10445, 10449), ("interp/notation.mli", 273, 10445, 10476), 0), 0, Tag1 ("Notation", 125)); (("scope_pattern", 2065), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "notation_with_optional_scope"), 0, (0)), 100000000, 0, -224)], (0)), 100000000, 0, -223), (("interp/notation.mli", 274, 10477, 10481), ("interp/notation.mli", 274, 10477, 10533), 0), 0, Tag1 ("Notation", 126)); (("interpretation_pattern", 2066), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Notation_term")), "interpretation"), 0, (0)), 100000000, 0, -226)], (0)), 100000000, 0, -225), (("interp/notation.mli", 275, 10534, 10538), ("interp/notation.mli", 275, 10534, 10585), 0), 0, Tag1 ("Notation", 127))]], 1, 0, [25], [0], 0, 0, (("interp/notation.mli", 270, 10288, 10288), ("interp/notation.mli", 276, 10586, 10589), 0), 0, 0, 0, Tag1 ("Notation", 122)), 1, 0); Tag1 (("notation_query_pattern", 2665), (0, 0, 0, 1, ((Tag3 ((("notation_query_pattern_gen", 2664)), [(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -215)], (0)), 100000000, 0, -214)), 0, 0, 0, 0, (("interp/notation.mli", 278, 10591, 10591), ("interp/notation.mli", 278, 10591, 10654), 0), 0, 0, 0, Tag1 ("Notation", 128)), 1, 0); (("toggle_notations", 2666), ((Tag1 (("on"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -213), (Tag1 (("all"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -212), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -211), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -210), 0), 100000000, 0, -209), (Tag1 (0, (Tag3 ((("notation_query_pattern", 2665)), 0, (0)), 100000000, 0, -208), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -207), 0), 100000000, 0, -206), 0), 100000000, 0, -205), 0), 100000000, 0, -204), 0), 100000000, 0, -203), 0, (("interp/notation.mli", 280, 10656, 10656), ("interp/notation.mli", 280, 10656, 10757), 0), 0, Tag1 ("Notation", 129)), 0); (("interpret_notation_string", 2667), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -202), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -201), 0), 100000000, 0, -200), 0, (("interp/notation.mli", 285, 10882, 10882), ("interp/notation.mli", 285, 10882, 10930), 0), 0, Tag1 ("Notation", 130)), 0); (("interp_notation_as_global_reference", 2668), ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -199)], (0)), 100000000, 0, -198), (Tag1 (("head"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -197), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -196), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -195), 0), 100000000, 0, -194), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "notation_key"), 0, (0)), 100000000, 0, -193), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("delimiters", 2607)), 0, (0)), 100000000, 0, -192)], (0)), 100000000, 0, -191), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -190), 0), 100000000, 0, -189), 0), 100000000, 0, -188), 0), 100000000, 0, -187), 0), 100000000, 0, -186), 0), 100000000, 0, -185), 0, (("interp/notation.mli", 288, 10995, 10995), ("interp/notation.mli", 289, 11087, 11139), 0), 0, Tag1 ("Notation", 131)), 0); (("declare_arguments_scope", 2669), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -184), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -183), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Notation_term")), "scope_name"), 0, (0)), 100000000, 0, -182)], (0)), 100000000, 0, -181)], (0)), 100000000, 0, -180), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -179), 0), 100000000, 0, -178), 0), 100000000, 0, -177), 0), 100000000, 0, -176), 0, (("interp/notation.mli", 292, 11218, 11218), ("interp/notation.mli", 293, 11248, 11317), 0), 0, Tag1 ("Notation", 132)), 0); (("find_arguments_scope", 2670), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -175), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Notation_term")), "scope_name"), 0, (0)), 100000000, 0, -174)], (0)), 100000000, 0, -173)], (0)), 100000000, 0, -172), 0), 100000000, 0, -171), 0, (("interp/notation.mli", 295, 11319, 11319), ("interp/notation.mli", 295, 11319, 11379), 0), 0, Tag1 ("Notation", 133)), 0); Tag1 (("scope_class", 2671), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("interp/notation.mli", 297, 11381, 11381), ("interp/notation.mli", 297, 11381, 11397), 0), 0, 0, 0, Tag1 ("Notation", 134)), 1, 0); (("scope_class_compare", 2672), ((Tag1 (0, (Tag3 ((("scope_class", 2671)), 0, (0)), 100000000, 0, -170), (Tag1 (0, (Tag3 ((("scope_class", 2671)), 0, (0)), 100000000, 0, -169), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -168), 0), 100000000, 0, -167), 0), 100000000, 0, -166), 0, (("interp/notation.mli", 300, 11432, 11432), ("interp/notation.mli", 300, 11432, 11491), 0), 0, Tag1 ("Notation", 135)), 0); (("subst_scope_class", 2673), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -165), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Mod_subst")), "substitution"), 0, (0)), 100000000, 0, -164), (Tag1 (0, (Tag3 ((("scope_class", 2671)), 0, (0)), 100000000, 0, -163), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("scope_class", 2671)), 0, (0)), 100000000, 0, -162)], (0)), 100000000, 0, -161), 0), 100000000, 0, -160), 0), 100000000, 0, -159), 0), 100000000, 0, -158), 0, (("interp/notation.mli", 302, 11493, 11493), ("interp/notation.mli", 303, 11517, 11593), 0), 0, Tag1 ("Notation", 136)), 0); Tag1 (("add_scope_where", 2674), (0, 0, Tag1 ([(("AddScopeTop", 2143), (0), 0, (("interp/notation.mli", 305, 11595, 11618), ("interp/notation.mli", 305, 11595, 11629), 0), 0, Tag1 ("Notation", 138)); (("AddScopeBottom", 2144), (0), 0, (("interp/notation.mli", 305, 11595, 11630), ("interp/notation.mli", 305, 11595, 11646), 0), 0, Tag1 ("Notation", 139))], 0), 1, 0, 0, 0, 0, 0, (("interp/notation.mli", 305, 11595, 11595), ("interp/notation.mli", 305, 11595, 11646), 0), 0, 1, 0, Tag1 ("Notation", 137)), 1, 0); (("declare_scope_class", 2675), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Notation_term")), "scope_name"), 0, (0)), 100000000, 0, -157), (Tag1 (Tag1 ("where"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("add_scope_where", 2674)), 0, (0)), 100000000, 0, -156)], (0)), 100000000, 0, -155), (Tag1 (0, (Tag3 ((("scope_class", 2671)), 0, (0)), 100000000, 0, -154), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -153), 0), 100000000, 0, -152), 0), 100000000, 0, -151), 0), 100000000, 0, -150), 0, (("interp/notation.mli", 307, 11722, 11722), ("interp/notation.mli", 307, 11722, 11807), 0), 0, Tag1 ("Notation", 140)), 0); (("declare_ref_arguments_scope", 2676), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -149), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -148), 0), 100000000, 0, -147), 0, (("interp/notation.mli", 308, 11808, 11808), ("interp/notation.mli", 308, 11808, 11859), 0), 0, Tag1 ("Notation", 141)), 0); (("compute_arguments_scope", 2677), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -146), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -145), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -144), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Notation_term")), "scope_name"), 0, (0)), 100000000, 0, -143)], (0)), 100000000, 0, -142)], (0)), 100000000, 0, -141), 0), 100000000, 0, -140), 0), 100000000, 0, -139), 0), 100000000, 0, -138), 0, (("interp/notation.mli", 310, 11861, 11861), ("interp/notation.mli", 310, 11861, 11959), 0), 0, Tag1 ("Notation", 142)), 0); (("compute_type_scope", 2678), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -137), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -136), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -135), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Notation_term")), "scope_name"), 0, (0)), 100000000, 0, -134)], (0)), 100000000, 0, -133), 0), 100000000, 0, -132), 0), 100000000, 0, -131), 0), 100000000, 0, -130), 0, (("interp/notation.mli", 311, 11960, 11960), ("interp/notation.mli", 311, 11960, 12048), 0), 0, Tag1 ("Notation", 143)), 0); (("current_type_scope_names", 2679), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -129), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Notation_term")), "scope_name"), 0, (0)), 100000000, 0, -128)], (0)), 100000000, 0, -127), 0), 100000000, 0, -126), 0, (("interp/notation.mli", 314, 12099, 12099), ("interp/notation.mli", 314, 12099, 12153), 0), 0, Tag1 ("Notation", 144)), 0); (("scope_class_of_class", 2680), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Coercionops")), "cl_typ"), 0, (0)), 100000000, 0, -125), (Tag3 ((("scope_class", 2671)), 0, (0)), 100000000, 0, -124), 0), 100000000, 0, -123), 0, (("interp/notation.mli", 316, 12155, 12155), ("interp/notation.mli", 316, 12155, 12215), 0), 0, Tag1 ("Notation", 145)), 0); Tag1 (("symbol", 2681), (0, 0, Tag1 ([(("Terminal", 2384), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -117)]), 0, (("interp/notation.mli", 321, 12261, 12263), ("interp/notation.mli", 321, 12261, 12283), 0), 0, Tag1 ("Notation", 147)); (("NonTerminal", 2385), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -118)]), 0, (("interp/notation.mli", 322, 12379, 12381), ("interp/notation.mli", 322, 12379, 12402), 0), 0, Tag1 ("Notation", 148)); (("SProdList", 2386), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -119); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("symbol", 2681)), 0, (0)), 100000000, 0, -121)], (0)), 100000000, 0, -120)]), 0, (("interp/notation.mli", 323, 12439, 12441), ("interp/notation.mli", 323, 12439, 12474), 0), 0, Tag1 ("Notation", 149)); (("Break", 2387), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -122)]), 0, (("interp/notation.mli", 324, 12542, 12544), ("interp/notation.mli", 324, 12542, 12558), 0), 0, Tag1 ("Notation", 150))], 0), 1, 0, 0, 0, 0, 0, (("interp/notation.mli", 320, 12247, 12247), ("interp/notation.mli", 324, 12542, 12558), 0), 0, 0, 0, Tag1 ("Notation", 146)), 1, 0); (("symbol_eq", 2682), ((Tag1 (0, (Tag3 ((("symbol", 2681)), 0, (0)), 100000000, 0, -116), (Tag1 (0, (Tag3 ((("symbol", 2681)), 0, (0)), 100000000, 0, -115), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -114), 0), 100000000, 0, -113), 0), 100000000, 0, -112), 0, (("interp/notation.mli", 326, 12622, 12622), ("interp/notation.mli", 326, 12622, 12662), 0), 0, Tag1 ("Notation", 151)), 0); (("make_notation_key", 2683), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "notation_entry"), 0, (0)), 100000000, 0, -111), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("symbol", 2681)), 0, (0)), 100000000, 0, -110)], (0)), 100000000, 0, -109), (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "notation"), 0, (0)), 100000000, 0, -108), 0), 100000000, 0, -107), 0), 100000000, 0, -106), 0, (("interp/notation.mli", 329, 12717, 12717), ("interp/notation.mli", 329, 12717, 12782), 0), 0, Tag1 ("Notation", 152)), 0); (("decompose_notation_key", 2684), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "notation"), 0, (0)), 100000000, 0, -105), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "notation_entry"), 0, (0)), 100000000, 0, -102); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("symbol", 2681)), 0, (0)), 100000000, 0, -104)], (0)), 100000000, 0, -103)]), 100000000, 0, -101), 0), 100000000, 0, -100), 0, (("interp/notation.mli", 330, 12783, 12783), ("interp/notation.mli", 330, 12783, 12852), 0), 0, Tag1 ("Notation", 153)), 0); Tag1 (("notation_symbols", 2685), (0, 0, [[(("recvars", 2392), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -94); (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -95)]), 100000000, 0, -93)], (0)), 100000000, 0, -92), (("interp/notation.mli", 333, 12880, 12882), ("interp/notation.mli", 333, 12880, 12911), 0), 0, Tag1 ("Notation", 155)); (("mainvars", 2393), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -97)], (0)), 100000000, 0, -96), (("interp/notation.mli", 334, 12951, 12953), ("interp/notation.mli", 334, 12951, 12974), 0), 0, Tag1 ("Notation", 156)); (("symbols", 2394), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("symbol", 2681)), 0, (0)), 100000000, 0, -99)], (0)), 100000000, 0, -98), (("interp/notation.mli", 335, 13027, 13029), ("interp/notation.mli", 335, 13027, 13051), 0), 0, Tag1 ("Notation", 157))]], 1, 0, 0, 0, 0, 0, (("interp/notation.mli", 332, 12854, 12854), ("interp/notation.mli", 336, 13124, 13125), 0), 0, 0, 0, Tag1 ("Notation", 154)), 1, 0); (("decompose_raw_notation", 2686), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -91), (Tag3 ((("notation_symbols", 2685)), 0, (0)), 100000000, 0, -90), 0), 100000000, 0, -89), 0, (("interp/notation.mli", 341, 13295, 13295), ("interp/notation.mli", 341, 13295, 13350), 0), 0, Tag1 ("Notation", 158)), 0); (("pr_scope_class", 2687), ((Tag1 (0, (Tag3 ((("scope_class", 2671)), 0, (0)), 100000000, 0, -88), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -87), 0), 100000000, 0, -86), 0, (("interp/notation.mli", 344, 13406, 13406), ("interp/notation.mli", 344, 13406, 13446), 0), 0, Tag1 ("Notation", 159)), 0); (("pr_scope", 2688), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -85), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -84), 0), 100000000, 0, -83), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Notation_term")), "scope_name"), 0, (0)), 100000000, 0, -82), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -81), 0), 100000000, 0, -80), 0), 100000000, 0, -79), 0, (("interp/notation.mli", 345, 13447, 13447), ("interp/notation.mli", 345, 13447, 13505), 0), 0, Tag1 ("Notation", 160)), 0); (("pr_scopes", 2689), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -78), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -77), 0), 100000000, 0, -76), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -75), 0), 100000000, 0, -74), 0, (("interp/notation.mli", 346, 13506, 13506), ("interp/notation.mli", 346, 13506, 13551), 0), 0, Tag1 ("Notation", 161)), 0); (("locate_notation", 2690), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -73), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -72), 0), 100000000, 0, -71), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "notation_key"), 0, (0)), 100000000, 0, -70), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Notation_term")), "scope_name"), 0, (0)), 100000000, 0, -69)], (0)), 100000000, 0, -68), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -67), 0), 100000000, 0, -66), 0), 100000000, 0, -65), 0), 100000000, 0, -64), 0, (("interp/notation.mli", 347, 13552, 13552), ("interp/notation.mli", 348, 13615, 13646), 0), 0, Tag1 ("Notation", 162)), 0); (("pr_visibility", 2691), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -63), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -62), 0), 100000000, 0, -61), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Notation_term")), "scope_name"), 0, (0)), 100000000, 0, -60)], (0)), 100000000, 0, -59), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -58), 0), 100000000, 0, -57), 0), 100000000, 0, -56), 0, (("interp/notation.mli", 350, 13648, 13648), ("interp/notation.mli", 350, 13648, 13717), 0), 0, Tag1 ("Notation", 163)), 0); (("is_coercion", 2692), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "notation_entry_level"), 0, (0)), 100000000, 0, -55), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "notation_entry_relative_level"), 0, (0)), 100000000, 0, -54), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -53), 0), 100000000, 0, -52), 0), 100000000, 0, -51), 0, (("interp/notation.mli", 354, 13753, 13753), ("interp/notation.mli", 354, 13753, 13832), 0), 0, Tag1 ("Notation", 164)), 0); (("declare_entry_coercion", 2693), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "specific_notation"), 0, (0)), 100000000, 0, -50), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "notation_entry_level"), 0, (0)), 100000000, 0, -49), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "notation_entry_relative_level"), 0, (0)), 100000000, 0, -48), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -47), 0), 100000000, 0, -46), 0), 100000000, 0, -45), 0), 100000000, 0, -44), 0, (("interp/notation.mli", 359, 14009, 14009), ("interp/notation.mli", 359, 14009, 14120), 0), 0, Tag1 ("Notation", 165)), 0); Tag1 (("entry_coercion", 2694), (0, 0, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "notation_with_optional_scope"), 0, (0)), 100000000, 0, -42); (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "notation"), 0, (0)), 100000000, 0, -43)]), 100000000, 0, -41)], (0)), 100000000, 0, -40)), 0, 0, 0, 0, (("interp/notation.mli", 362, 14185, 14185), ("interp/notation.mli", 362, 14185, 14253), 0), 0, 0, 0, Tag1 ("Notation", 166)), 1, 0); (("availability_of_entry_coercion", 2695), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "notation_entry_relative_level"), 0, (0)), 100000000, 0, -39), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "notation_entry_level"), 0, (0)), 100000000, 0, -38), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("entry_coercion", 2694)), 0, (0)), 100000000, 0, -37)], (0)), 100000000, 0, -36), 0), 100000000, 0, -35), 0), 100000000, 0, -34), 0, (("interp/notation.mli", 363, 14254, 14254), ("interp/notation.mli", 363, 14254, 14369), 0), 0, Tag1 ("Notation", 167)), 0); (("declare_custom_entry_has_global", 2696), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -33), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -32), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -31), 0), 100000000, 0, -30), 0), 100000000, 0, -29), 0, (("interp/notation.mli", 368, 14496, 14496), ("interp/notation.mli", 368, 14496, 14555), 0), 0, Tag1 ("Notation", 168)), 0); (("declare_custom_entry_has_ident", 2697), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -28), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -27), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -26), 0), 100000000, 0, -25), 0), 100000000, 0, -24), 0, (("interp/notation.mli", 369, 14556, 14556), ("interp/notation.mli", 369, 14556, 14614), 0), 0, Tag1 ("Notation", 169)), 0); (("entry_has_global", 2698), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "notation_entry_relative_level"), 0, (0)), 100000000, 0, -23), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0, (("interp/notation.mli", 371, 14616, 14616), ("interp/notation.mli", 371, 14616, 14676), 0), 0, Tag1 ("Notation", 170)), 0); (("entry_has_ident", 2699), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "notation_entry_relative_level"), 0, (0)), 100000000, 0, -20), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -19), 0), 100000000, 0, -18), 0, (("interp/notation.mli", 372, 14677, 14677), ("interp/notation.mli", 372, 14677, 14736), 0), 0, Tag1 ("Notation", 171)), 0); (("declare_notation_level", 2700), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "notation"), 0, (0)), 100000000, 0, -17), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Notationextern")), "level"), 0, (0)), 100000000, 0, -16), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -15), 0), 100000000, 0, -14), 0), 100000000, 0, -13), 0, (("interp/notation.mli", 376, 14817, 14817), ("interp/notation.mli", 376, 14817, 14871), 0), 0, Tag1 ("Notation", 172)), 0); (("level_of_notation", 2701), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "notation"), 0, (0)), 100000000, 0, -12), (Tag3 (Tag1 ((Tag2 ("Notationextern")), "level"), 0, (0)), 100000000, 0, -11), 0), 100000000, 0, -10), 0, (("interp/notation.mli", 377, 14872, 14872), ("interp/notation.mli", 377, 14872, 14913), 0), 0, Tag1 ("Notation", 173)), 0); (("with_notation_protection", 2702), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -8), ((("b")), 100000000, 0, -7), 0), 100000000, 0, -9), (Tag1 (0, ((("a")), 100000000, 0, -8), ((("b")), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("interp/notation.mli", 382, 15020, 15020), ("interp/notation.mli", 382, 15020, 15073), 0), 0, Tag1 ("Notation", 174)), 0); (("int63_of_pos_bigint", 2703), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Z")), "t"), 0, (0)), 100000000, 0, -4), (Tag3 (Tag1 ((Tag2 ("Uint63")), "t"), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("interp/notation.mli", 385, 15114, 15114), ("interp/notation.mli", 385, 15114, 15155), 0), 0, Tag1 ("Notation", 175)), 0)], "Notation", [("Notation", ("\243\219),\220\160v\230\t$\246\188\252\172\152\147")); ("Z", ("\253\196\2168\027\199O\134\220\218\031'\1484\233o")); ("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Vmemitcodes", ("wCd\138\165\158DD\241gH\236.\210\197\247")); ("Vmbytecodes", ("\025\021\151\137Dx\149W\236+[\143f\208\160\016")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Unix", (":B72R\011\005Sj\189)\011\239PH\254")); ("UnivSubst", ("\190qu\031mc\130\181\003G]\132\"\219m)")); ("UnivProblem", ("6'\161\018\181\001.\253\000\141a6\171\1727\155")); ("UnivNames", ("%\151_\209%+JM$n\001\232\194n\178N")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UState", ("SD\203\215|\136\n\251\239\208\148\215C\n\167\005")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Summary", ("\148G\135\226\024L3\246\021\028U\146\164`\253\250")); ("Store", ("/dT\252\145\179pq\216{\181\206\190K+U")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Random", ("\020\005Xq\171\026\218\152X\135\254\023\133zK\200")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("Section", ("\245\207\b\021\142v=\155#w\246}\"4b\006")); ("Safe_typing", (")\250?\164\145\132\241\127\186\152h+\145\"\237l")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("Range", ("\218\130\001r\237\r\144\171\164\021l\155\196\143sg")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Pattern", ("\195C\140Wb=\022\222\208\227^K\003\020\215X")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("NumTok", ("vd\023^\251\244B\166\145'\156\196-0\027\169")); ("Notationextern", ("\000\022b5`t\134]\192f4\131\187\192\152\160")); ("Notation_term", ("5\002\017\217b\193nc>\239\239\237\244\031\173?")); ("Nativevalues", ("8:\007\025e\226c,\001\171\146#l\210\171\152")); ("Nativelib", ("V\239\205Y1\147E:,\176\196Hy\1483|")); ("Nativecode", ("\190\185\255\006m\012\210\163\138Rz\247\15283\183")); ("Nametab", ("1\018\163\254\225\2178\025DI\0271Q\198\134\140")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Namegen", ("\187\222\224T\255\020\1808-\212*\164\131\177\157x")); ("Monad", ("\244\171T\157\194p\187\160\149\195{\132\222\020\253\148")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Libobject", ("\132}t\226hl\213L\210\172\167pc\012~\129")); ("Libnames", ("fp\0255\167\162\209\153\137\161\169#\246\193\003\198")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hook", ("\183\194\223\003\155\169',\187\240a;E\b\1396")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Gramlib__Stream", ("\248\\H\205_76\253\136\146\200\031\165\021=t")); ("Gramlib", ("\154\143\210e\021i\246\176\224\194\220\217\007\145\139A")); ("Globnames", ("W\004\172T\214\181H\220\232\160LSW\006\130\226")); ("Glob_term", ("\165=a\227\160\153.\021_$\232\209T\236\153O")); ("Genlambda", ("\170}\024\241\141\222\136S\169\219\2212i\134KI")); ("Genarg", ("\1434\015\001\152\196\005s\156\136\195\185\247\b3\t")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evd", ("\211\205p\193\216\129r\006\239oN\142ar\196\175")); ("Evar_kinds", ("\023L\186\132\218}\254\221\185\198\220\200h\003{\021")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Environ", ("\171b\1579\229<\003Z\147IL\225X\254\182\204")); ("Entries", ("\172\201\198\221Ap\027_{\174\141C\021\";p")); ("EConstr", ("\201aW\156\157;N\004\201V\208\006L\166\211)")); ("Dyn", ("\131z`\205v\2306\007x\027&K.?;\169")); ("Deprecation", ("\226:\146\245\190;\1929\254@\247a\218\244\134\189")); ("Declarations", ("\239\137n\019\030w$\182\166z^{\b\206\163\175")); ("DAst", ("\224/\200)\007\184ni\134\b\139\204\241\005w\212")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Conversion", ("\158\150&\195M\tv\127|\029\158RRK\211A")); ("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constrexpr", ("p'r\245\184chL\183\249\"\213]\1741\237")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("Coercionops", ("\238\240\220\191\201\bMazv\159\227\236?\147>")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CWarnings", ("\132\220\150\227\215\239t\217\132\220'JX\188\246c")); ("CUnix", ("\140Zl\153\167\011J\015\005|th\247OTu")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CEphemeron", ("\204I\179-\206(x4\173\229\250\001PkH\151")); ("CDebug", ("^4\210p7\239!3\138\138\213?\239`\250\157")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])
val int63_of_pos_bigint : Z.t -> Uint63.t

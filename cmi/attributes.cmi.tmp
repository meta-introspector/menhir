type vernac_flag_type = FlagIdent of string | FlagString of string
type vernac_flags = vernac_flag list
and vernac_flag = (string * vernac_flag_value) CAst.t
and vernac_flag_value =
    VernacFlagEmpty
  | VernacFlagLeaf of vernac_flag_type
  | VernacFlagList of vernac_flags
val pr_vernac_flag : vernac_flag -> Pp.t
type +'a attribute
val parse : 'a attribute -> vernac_flags -> 'a
val unsupported_attributes : vernac_flags -> unit
module Notations :
  sig
    type 'a t = 'a attribute
    val return : 'a -> 'a t
    val ( >>= ) : 'a t -> ('a -> 'b t) -> 'b t
    val ( >> ) : unit t -> 'a t -> 'a t
    val map : ('a -> 'b) -> 'a t -> 'b t
    val ( ++ ) : 'a attribute -> 'b attribute -> ('a * 'b) attribute
  end
val raw_attributes : vernac_flags attribute
val polymorphic : bool attribute
val program : bool attribute
val template : bool option attribute
val locality : bool option attribute
val option_locality : Goptions.option_locality attribute
val deprecation : Deprecation.t option attribute
val reversible : bool option attribute
val canonical_field : bool attribute
val canonical_instance : bool attribute
val using : string option attribute
val hint_locality :
  default:(unit -> Hints.hint_locality) -> Hints.hint_locality attribute
val bind_scope_where : Notation.add_scope_where option attribute
val really_hint_locality : Hints.hint_locality attribute
val typing_flags : Declarations.typing_flags option attribute
val program_mode_option_name : string list
val only_locality : vernac_flags -> bool option
val only_polymorphism : vernac_flags -> bool
val parse_drop_extra : 'a attribute -> vernac_flags -> 'a
val parse_with_extra : 'a attribute -> vernac_flags -> vernac_flags * 'a
type 'a key_parser = ?loc:Loc.t -> 'a option -> vernac_flag_value -> 'a
val attribute_of_list : (string * 'a key_parser) list -> 'a option attribute
val payload_parser :
  ?cat:(string -> string -> string) -> name:string -> string key_parser
val payload_attribute :
  ?cat:(string -> string -> string) -> name:string -> string option attribute
val bool_attribute : name:string -> bool option attribute
val qualify_attribute : string -> 'a attribute -> 'a attribute
val assert_empty : ?loc:Loc.t -> string -> vernac_flag_value -> unit
val assert_once : ?loc:Loc.t -> name:string -> 'a option -> unit
val single_key_parser : name:string -> key:string -> 'a -> 'a key_parser
val make_attribute : (vernac_flags -> vernac_flags * 'a) -> 'a attribute
val vernac_polymorphic_flag : Loc.t option -> vernac_flag
val vernac_monomorphic_flag : Loc.t option -> vernac_flag
val universe_polymorphism_option_name : string list
("DEBUG:rule", [Tag1 (("vernac_flag_type", 672), (0, 0, Tag1 ([(("FlagIdent", 270), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -178)]), 0, (("vernac/attributes.mli", 13, 742, 744), ("vernac/attributes.mli", 13, 742, 765), 0), 0, Tag1 ("Attributes", 1)); (("FlagString", 271), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -179)]), 0, (("vernac/attributes.mli", 14, 766, 768), ("vernac/attributes.mli", 14, 766, 790), 0), 0, Tag1 ("Attributes", 2))], 0), 1, 0, 0, 0, 0, 0, (("vernac/attributes.mli", 12, 718, 718), ("vernac/attributes.mli", 14, 766, 790), 0), 0, 0, 0, Tag1 ("Attributes", 0)), 1, 0); Tag1 (("vernac_flags", 673), (0, 0, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("vernac_flag", 674)), 0, (0)), 100000000, 0, -177)], (0)), 100000000, 0, -176)), 0, 0, 0, 0, (("vernac/attributes.mli", 16, 792, 792), ("vernac/attributes.mli", 16, 792, 828), 0), 0, 0, 0, Tag1 ("Attributes", 3)), 1, 0); Tag1 (("vernac_flag", 674), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -174); (Tag3 ((("vernac_flag_value", 675)), 0, (0)), 100000000, 0, -175)]), 100000000, 0, -173)], (0)), 100000000, 0, -172)), 0, 0, 0, 0, (("vernac/attributes.mli", 17, 829, 829), ("vernac/attributes.mli", 17, 829, 882), 0), 0, 0, 0, Tag1 ("Attributes", 4)), 2, 0); Tag1 (("vernac_flag_value", 675), (0, 0, Tag1 ([(("VernacFlagEmpty", 284), (0), 0, (("vernac/attributes.mli", 19, 907, 909), ("vernac/attributes.mli", 19, 907, 926), 0), 0, Tag1 ("Attributes", 6)); (("VernacFlagLeaf", 285), ([(Tag3 ((("vernac_flag_type", 672)), 0, (0)), 100000000, 0, -170)]), 0, (("vernac/attributes.mli", 20, 927, 929), ("vernac/attributes.mli", 20, 927, 965), 0), 0, Tag1 ("Attributes", 7)); (("VernacFlagList", 286), ([(Tag3 ((("vernac_flags", 673)), 0, (0)), 100000000, 0, -171)]), 0, (("vernac/attributes.mli", 21, 966, 968), ("vernac/attributes.mli", 21, 966, 1000), 0), 0, Tag1 ("Attributes", 8))], 0), 1, 0, 0, 0, 0, 0, (("vernac/attributes.mli", 18, 883, 883), ("vernac/attributes.mli", 21, 966, 1000), 0), 0, 0, 0, Tag1 ("Attributes", 5)), 2, 0); (("pr_vernac_flag", 676), ((Tag1 (0, (Tag3 ((("vernac_flag", 674)), 0, (0)), 100000000, 0, -169), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -168), 0), 100000000, 0, -167), 0, (("vernac/attributes.mli", 23, 1002, 1002), ("vernac/attributes.mli", 23, 1002, 1042), 0), 0, Tag1 ("Attributes", 9)), 0); Tag1 (("attribute", 677), ([((("a")), 100000000, 0, -166)], 1, 0, 1, 0, [1], [2], 0, 0, (("vernac/attributes.mli", 25, 1044, 1044), ("vernac/attributes.mli", 25, 1044, 1062), 0), 0, 0, 0, Tag1 ("Attributes", 10)), 1, 0); (("parse", 678), ((Tag1 (0, (Tag3 ((("attribute", 677)), [((("a")), 100000000, 0, -163)], (0)), 100000000, 0, -165), (Tag1 (0, (Tag3 ((("vernac_flags", 673)), 0, (0)), 100000000, 0, -164), ((("a")), 100000000, 0, -163), 0), 100000000, 0, -162), 0), 100000000, 0, -161), 0, (("vernac/attributes.mli", 31, 1284, 1284), ("vernac/attributes.mli", 31, 1284, 1330), 0), 0, Tag1 ("Attributes", 11)), 0); (("unsupported_attributes", 679), ((Tag1 (0, (Tag3 ((("vernac_flags", 673)), 0, (0)), 100000000, 0, -160), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -159), 0), 100000000, 0, -158), 0, (("vernac/attributes.mli", 34, 1373, 1373), ("vernac/attributes.mli", 34, 1373, 1422), 0), 0, Tag1 ("Attributes", 12)), 0); Tag3 (("Notations", 680), 0, (Tag1 ([Tag1 (("t", 715), ([((("a")), 100000000, 0, -214)], 1, 0, 1, ((Tag3 ((("attribute", 677)), [((("a")), 100000000, 0, -214)], (0)), 100000000, 0, -213)), [1], [2], 0, 0, (("vernac/attributes.mli", 40, 1538, 1563), ("vernac/attributes.mli", 40, 1538, 1587), 0), 0, 0, 0, Tag1 ("Attributes", 13)), 1, 0); (("return", 716), ((Tag1 (0, ((("a")), 100000000, 0, -212), (Tag3 ((("t", 715)), [((("a")), 100000000, 0, -212)], (0)), 100000000, 0, -211), 0), 100000000, 0, -210), 0, (("clib/monad.mli", 20, 849, 851), ("clib/monad.mli", 20, 849, 874), 0), 0, Tag1 ("Monad", 1)), 0); ((">>=", 717), ((Tag1 (0, (Tag3 ((("t", 715)), [((("a")), 100000000, 0, -208)], (0)), 100000000, 0, -209), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -208), (Tag3 ((("t", 715)), [((("b")), 100000000, 0, -205)], (0)), 100000000, 0, -207), 0), 100000000, 0, -206), (Tag3 ((("t", 715)), [((("b")), 100000000, 0, -205)], (0)), 100000000, 0, -204), 0), 100000000, 0, -203), 0), 100000000, 0, -202), 0, (("clib/monad.mli", 21, 875, 877), ("clib/monad.mli", 21, 875, 917), 0), 0, Tag1 ("Monad", 2)), 0); ((">>", 718), ((Tag1 (0, (Tag3 ((("t", 715)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -201)], (0)), 100000000, 0, -200), (Tag1 (0, (Tag3 ((("t", 715)), [((("a")), 100000000, 0, -198)], (0)), 100000000, 0, -199), (Tag3 ((("t", 715)), [((("a")), 100000000, 0, -198)], (0)), 100000000, 0, -197), 0), 100000000, 0, -196), 0), 100000000, 0, -195), 0, (("clib/monad.mli", 22, 918, 920), ("clib/monad.mli", 22, 918, 953), 0), 0, Tag1 ("Monad", 3)), 0); (("map", 719), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -193), ((("b")), 100000000, 0, -191), 0), 100000000, 0, -194), (Tag1 (0, (Tag3 ((("t", 715)), [((("a")), 100000000, 0, -193)], (0)), 100000000, 0, -192), (Tag3 ((("t", 715)), [((("b")), 100000000, 0, -191)], (0)), 100000000, 0, -190), 0), 100000000, 0, -189), 0), 100000000, 0, -188), 0, (("clib/monad.mli", 23, 954, 956), ("clib/monad.mli", 23, 954, 992), 0), 0, Tag1 ("Monad", 4)), 0); (("++", 720), ((Tag1 (0, (Tag3 ((("attribute", 677)), [((("a")), 100000000, 0, -184)], (0)), 100000000, 0, -187), (Tag1 (0, (Tag3 ((("attribute", 677)), [((("b")), 100000000, 0, -185)], (0)), 100000000, 0, -186), (Tag3 ((("attribute", 677)), [(Tag2 ([((("a")), 100000000, 0, -184); ((("b")), 100000000, 0, -185)]), 100000000, 0, -183)], (0)), 100000000, 0, -182), 0), 100000000, 0, -181), 0), 100000000, 0, -180), 0, (("vernac/attributes.mli", 45, 1800, 1802), ("vernac/attributes.mli", 45, 1800, 1864), 0), 0, Tag1 ("Attributes", 14)), 0)]), 0, (("vernac/attributes.mli", 37, 1472, 1472), ("vernac/attributes.mli", 48, 1948, 1951), 0), Tag1 ("Attributes", 15)), 0, 0); (("raw_attributes", 681), ((Tag3 ((("attribute", 677)), [(Tag3 ((("vernac_flags", 673)), 0, (0)), 100000000, 0, -157)], (0)), 100000000, 0, -156), 0, (("vernac/attributes.mli", 52, 2003, 2003), ("vernac/attributes.mli", 52, 2003, 2046), 0), 0, Tag1 ("Attributes", 16)), 0); (("polymorphic", 682), ((Tag3 ((("attribute", 677)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -155)], (0)), 100000000, 0, -154), 0, (("vernac/attributes.mli", 54, 2048, 2048), ("vernac/attributes.mli", 54, 2048, 2080), 0), 0, Tag1 ("Attributes", 17)), 0); (("program", 683), ((Tag3 ((("attribute", 677)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -153)], (0)), 100000000, 0, -152), 0, (("vernac/attributes.mli", 55, 2081, 2081), ("vernac/attributes.mli", 55, 2081, 2109), 0), 0, Tag1 ("Attributes", 18)), 0); (("template", 684), ((Tag3 ((("attribute", 677)), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -151)], (0)), 100000000, 0, -150)], (0)), 100000000, 0, -149), 0, (("vernac/attributes.mli", 56, 2110, 2110), ("vernac/attributes.mli", 56, 2110, 2146), 0), 0, Tag1 ("Attributes", 19)), 0); (("locality", 685), ((Tag3 ((("attribute", 677)), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -148)], (0)), 100000000, 0, -147)], (0)), 100000000, 0, -146), 0, (("vernac/attributes.mli", 57, 2147, 2147), ("vernac/attributes.mli", 57, 2147, 2183), 0), 0, Tag1 ("Attributes", 20)), 0); (("option_locality", 686), ((Tag3 ((("attribute", 677)), [(Tag3 (Tag1 ((Tag2 ("Goptions")), "option_locality"), 0, (0)), 100000000, 0, -145)], (0)), 100000000, 0, -144), 0, (("vernac/attributes.mli", 58, 2184, 2184), ("vernac/attributes.mli", 58, 2184, 2240), 0), 0, Tag1 ("Attributes", 21)), 0); (("deprecation", 687), ((Tag3 ((("attribute", 677)), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Deprecation")), "t"), 0, (0)), 100000000, 0, -143)], (0)), 100000000, 0, -142)], (0)), 100000000, 0, -141), 0, (("vernac/attributes.mli", 59, 2241, 2241), ("vernac/attributes.mli", 59, 2241, 2289), 0), 0, Tag1 ("Attributes", 22)), 0); (("reversible", 688), ((Tag3 ((("attribute", 677)), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -140)], (0)), 100000000, 0, -139)], (0)), 100000000, 0, -138), 0, (("vernac/attributes.mli", 60, 2290, 2290), ("vernac/attributes.mli", 60, 2290, 2328), 0), 0, Tag1 ("Attributes", 23)), 0); (("canonical_field", 689), ((Tag3 ((("attribute", 677)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -137)], (0)), 100000000, 0, -136), 0, (("vernac/attributes.mli", 61, 2329, 2329), ("vernac/attributes.mli", 61, 2329, 2365), 0), 0, Tag1 ("Attributes", 24)), 0); (("canonical_instance", 690), ((Tag3 ((("attribute", 677)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -135)], (0)), 100000000, 0, -134), 0, (("vernac/attributes.mli", 62, 2366, 2366), ("vernac/attributes.mli", 62, 2366, 2405), 0), 0, Tag1 ("Attributes", 25)), 0); (("using", 691), ((Tag3 ((("attribute", 677)), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -133)], (0)), 100000000, 0, -132)], (0)), 100000000, 0, -131), 0, (("vernac/attributes.mli", 63, 2406, 2406), ("vernac/attributes.mli", 63, 2406, 2441), 0), 0, Tag1 ("Attributes", 26)), 0); (("hint_locality", 692), ((Tag1 (("default"), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -130), (Tag3 (Tag1 ((Tag2 ("Hints")), "hint_locality"), 0, (0)), 100000000, 0, -129), 0), 100000000, 0, -128), (Tag3 ((("attribute", 677)), [(Tag3 (Tag1 ((Tag2 ("Hints")), "hint_locality"), 0, (0)), 100000000, 0, -127)], (0)), 100000000, 0, -126), 0), 100000000, 0, -125), 0, (("vernac/attributes.mli", 64, 2442, 2442), ("vernac/attributes.mli", 64, 2442, 2532), 0), 0, Tag1 ("Attributes", 27)), 0); (("bind_scope_where", 693), ((Tag3 ((("attribute", 677)), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Notation")), "add_scope_where"), 0, (0)), 100000000, 0, -124)], (0)), 100000000, 0, -123)], (0)), 100000000, 0, -122), 0, (("vernac/attributes.mli", 65, 2533, 2533), ("vernac/attributes.mli", 65, 2533, 2597), 0), 0, Tag1 ("Attributes", 28)), 0); (("really_hint_locality", 694), ((Tag3 ((("attribute", 677)), [(Tag3 (Tag1 ((Tag2 ("Hints")), "hint_locality"), 0, (0)), 100000000, 0, -121)], (0)), 100000000, 0, -120), 0, (("vernac/attributes.mli", 68, 2659, 2659), ("vernac/attributes.mli", 68, 2659, 2715), 0), 0, Tag1 ("Attributes", 29)), 0); (("typing_flags", 695), ((Tag3 ((("attribute", 677)), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Declarations")), "typing_flags"), 0, (0)), 100000000, 0, -119)], (0)), 100000000, 0, -118)], (0)), 100000000, 0, -117), 0, (("vernac/attributes.mli", 71, 2757, 2757), ("vernac/attributes.mli", 71, 2757, 2818), 0), 0, Tag1 ("Attributes", 30)), 0); (("program_mode_option_name", 696), ((Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -116)], (0)), 100000000, 0, -115), 0, (("vernac/attributes.mli", 73, 2820, 2820), ("vernac/attributes.mli", 73, 2820, 2862), 0), 0, Tag1 ("Attributes", 31)), 0); (("only_locality", 697), ((Tag1 (0, (Tag3 ((("vernac_flags", 673)), 0, (0)), 100000000, 0, -114), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -113)], (0)), 100000000, 0, -112), 0), 100000000, 0, -111), 0, (("vernac/attributes.mli", 76, 2925, 2925), ("vernac/attributes.mli", 76, 2925, 2972), 0), 0, Tag1 ("Attributes", 32)), 0); (("only_polymorphism", 698), ((Tag1 (0, (Tag3 ((("vernac_flags", 673)), 0, (0)), 100000000, 0, -110), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -109), 0), 100000000, 0, -108), 0, (("vernac/attributes.mli", 79, 3022, 3022), ("vernac/attributes.mli", 79, 3022, 3066), 0), 0, Tag1 ("Attributes", 33)), 0); (("parse_drop_extra", 699), ((Tag1 (0, (Tag3 ((("attribute", 677)), [((("a")), 100000000, 0, -105)], (0)), 100000000, 0, -107), (Tag1 (0, (Tag3 ((("vernac_flags", 673)), 0, (0)), 100000000, 0, -106), ((("a")), 100000000, 0, -105), 0), 100000000, 0, -104), 0), 100000000, 0, -103), 0, (("vernac/attributes.mli", 83, 3168, 3168), ("vernac/attributes.mli", 83, 3168, 3225), 0), 0, Tag1 ("Attributes", 34)), 0); (("parse_with_extra", 700), ((Tag1 (0, (Tag3 ((("attribute", 677)), [((("a")), 100000000, 0, -100)], (0)), 100000000, 0, -102), (Tag1 (0, (Tag3 ((("vernac_flags", 673)), 0, (0)), 100000000, 0, -101), (Tag2 ([(Tag3 ((("vernac_flags", 673)), 0, (0)), 100000000, 0, -99); ((("a")), 100000000, 0, -100)]), 100000000, 0, -98), 0), 100000000, 0, -97), 0), 100000000, 0, -96), 0, (("vernac/attributes.mli", 86, 3266, 3266), ("vernac/attributes.mli", 86, 3266, 3338), 0), 0, Tag1 ("Attributes", 35)), 0); Tag1 (("key_parser", 701), ([((("a")), 100000000, 0, -91)], 1, 0, 1, ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -95)], (0)), 100000000, 0, -94), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -91)], (0)), 100000000, 0, -93), (Tag1 (0, (Tag3 ((("vernac_flag_value", 675)), 0, (0)), 100000000, 0, -92), ((("a")), 100000000, 0, -91), 0), 100000000, 0, -90), 0), 100000000, 0, -89), 0), 100000000, 0, -88)), [63], [0], 0, 0, (("vernac/attributes.mli", 91, 3410, 3410), ("vernac/attributes.mli", 91, 3410, 3481), 0), 0, 0, 0, Tag1 ("Attributes", 36)), 1, 0); (("attribute_of_list", 702), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -86); (Tag3 ((("key_parser", 701)), [((("a")), 100000000, 0, -83)], (0)), 100000000, 0, -87)]), 100000000, 0, -85)], (0)), 100000000, 0, -84), (Tag3 ((("attribute", 677)), [(Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -83)], (0)), 100000000, 0, -82)], (0)), 100000000, 0, -81), 0), 100000000, 0, -80), 0, (("vernac/attributes.mli", 98, 3744, 3744), ("vernac/attributes.mli", 98, 3744, 3820), 0), 0, Tag1 ("Attributes", 38)), 0); (("payload_parser", 703), ((Tag1 (Tag1 ("cat"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -79), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -78), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -77), 0), 100000000, 0, -76), 0), 100000000, 0, -75)], (0)), 100000000, 0, -74), (Tag1 (("name"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -73), (Tag3 ((("key_parser", 701)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -72)], (0)), 100000000, 0, -71), 0), 100000000, 0, -70), 0), 100000000, 0, -69), 0, (("vernac/attributes.mli", 102, 3913, 3913), ("vernac/attributes.mli", 102, 3913, 4003), 0), 0, Tag1 ("Attributes", 39)), 0); (("payload_attribute", 704), ((Tag1 (Tag1 ("cat"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -68), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -67), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -66), 0), 100000000, 0, -65), 0), 100000000, 0, -64)], (0)), 100000000, 0, -63), (Tag1 (("name"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -62), (Tag3 ((("attribute", 677)), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -61)], (0)), 100000000, 0, -60)], (0)), 100000000, 0, -59), 0), 100000000, 0, -58), 0), 100000000, 0, -57), 0, (("vernac/attributes.mli", 108, 4275, 4275), ("vernac/attributes.mli", 108, 4275, 4374), 0), 0, Tag1 ("Attributes", 40)), 0); (("bool_attribute", 705), ((Tag1 (("name"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -56), (Tag3 ((("attribute", 677)), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -55)], (0)), 100000000, 0, -54)], (0)), 100000000, 0, -53), 0), 100000000, 0, -52), 0, (("vernac/attributes.mli", 113, 4569, 4569), ("vernac/attributes.mli", 113, 4569, 4626), 0), 0, Tag1 ("Attributes", 41)), 0); (("qualify_attribute", 706), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -51), (Tag1 (0, (Tag3 ((("attribute", 677)), [((("a")), 100000000, 0, -49)], (0)), 100000000, 0, -50), (Tag3 ((("attribute", 677)), [((("a")), 100000000, 0, -49)], (0)), 100000000, 0, -48), 0), 100000000, 0, -47), 0), 100000000, 0, -46), 0, (("vernac/attributes.mli", 115, 4628, 4628), ("vernac/attributes.mli", 115, 4628, 4690), 0), 0, Tag1 ("Attributes", 42)), 0); (("assert_empty", 707), ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -45)], (0)), 100000000, 0, -44), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -43), (Tag1 (0, (Tag3 ((("vernac_flag_value", 675)), 0, (0)), 100000000, 0, -42), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -41), 0), 100000000, 0, -40), 0), 100000000, 0, -39), 0), 100000000, 0, -38), 0, (("vernac/attributes.mli", 122, 4900, 4900), ("vernac/attributes.mli", 122, 4900, 4968), 0), 0, Tag1 ("Attributes", 43)), 0); (("assert_once", 708), ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -37)], (0)), 100000000, 0, -36), (Tag1 (("name"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -35), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -34)], (0)), 100000000, 0, -33), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -32), 0), 100000000, 0, -31), 0), 100000000, 0, -30), 0), 100000000, 0, -29), 0, (("vernac/attributes.mli", 126, 5094, 5094), ("vernac/attributes.mli", 126, 5094, 5158), 0), 0, Tag1 ("Attributes", 44)), 0); (("single_key_parser", 709), ((Tag1 (("name"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -28), (Tag1 (("key"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -27), (Tag1 (0, ((("a")), 100000000, 0, -26), (Tag3 ((("key_parser", 701)), [((("a")), 100000000, 0, -26)], (0)), 100000000, 0, -25), 0), 100000000, 0, -24), 0), 100000000, 0, -23), 0), 100000000, 0, -22), 0, (("vernac/attributes.mli", 131, 5345, 5345), ("vernac/attributes.mli", 131, 5345, 5417), 0), 0, Tag1 ("Attributes", 45)), 0); (("make_attribute", 710), ((Tag1 (0, (Tag1 (0, (Tag3 ((("vernac_flags", 673)), 0, (0)), 100000000, 0, -21), (Tag2 ([(Tag3 ((("vernac_flags", 673)), 0, (0)), 100000000, 0, -20); ((("a")), 100000000, 0, -17)]), 100000000, 0, -19), 0), 100000000, 0, -18), (Tag3 ((("attribute", 677)), [((("a")), 100000000, 0, -17)], (0)), 100000000, 0, -16), 0), 100000000, 0, -15), 0, (("vernac/attributes.mli", 136, 5599, 5599), ("vernac/attributes.mli", 136, 5599, 5671), 0), 0, Tag1 ("Attributes", 46)), 0); (("vernac_polymorphic_flag", 711), ((Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -14)], (0)), 100000000, 0, -13), (Tag3 ((("vernac_flag", 674)), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("vernac/attributes.mli", 141, 5851, 5851), ("vernac/attributes.mli", 141, 5851, 5908), 0), 0, Tag1 ("Attributes", 47)), 0); (("vernac_monomorphic_flag", 712), ((Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -10)], (0)), 100000000, 0, -9), (Tag3 ((("vernac_flag", 674)), 0, (0)), 100000000, 0, -8), 0), 100000000, 0, -7), 0, (("vernac/attributes.mli", 142, 5909, 5909), ("vernac/attributes.mli", 142, 5909, 5966), 0), 0, Tag1 ("Attributes", 48)), 0); (("universe_polymorphism_option_name", 713), ((Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6)], (0)), 100000000, 0, -5), 0, (("vernac/attributes.mli", 145, 5993, 5993), ("vernac/attributes.mli", 145, 5993, 6044), 0), 0, Tag1 ("Attributes", 49)), 0); (("is_universe_polymorphism", 714), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("vernac/attributes.mli", 146, 6045, 6045), ("vernac/attributes.mli", 146, 6045, 6088), 0), 0, Tag1 ("Attributes", 50)), 0)], "Attributes", [("Attributes", ("\2145\146P\224\163B1\135\232\204SD\129^\141")); ("Z", ("\253\196\2168\027\199O\134\220\218\031'\1484\233o")); ("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Vmemitcodes", ("wCd\138\165\158DD\241gH\236.\210\197\247")); ("Vmbytecodes", ("\025\021\151\137Dx\149W\236+[\143f\208\160\016")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Unix", (":B72R\011\005Sj\189)\011\239PH\254")); ("UnivSubst", ("\190qu\031mc\130\181\003G]\132\"\219m)")); ("UnivProblem", ("6'\161\018\181\001.\253\000\141a6\171\1727\155")); ("UnivNames", ("%\151_\209%+JM$n\001\232\194n\178N")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Unification", ("\017\027\157=\255\1914L\020\213h\154.\219\005\170")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UState", ("SD\203\215|\136\n\251\239\208\148\215C\n\167\005")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("Typeclasses", ("KO\1297x\192\210\231\001\1824l\135\192\160|")); ("Type_errors", ("7\157\162-\214M\206\196\228\191\005v\134\177\144\134")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Tactypes", ("\143E\135*\195\151\144H\151M\011($\017\159\203")); ("Tacred", ("\133d\143\1310z\030\237\232\002\001\025\147\140\215:")); ("Summary", ("\148G\135\226\024L3\246\021\028U\146\164`\253\250")); ("Store", ("/dT\252\145\179pq\216{\181\206\190K+U")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Random", ("\020\005Xq\171\026\218\152X\135\254\023\133zK\200")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("Section", ("\245\207\b\021\142v=\155#w\246}\"4b\006")); ("Safe_typing", (")\250?\164\145\132\241\127\186\152h+\145\"\237l")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("Reductionops", ("\179\023P\218\146Uh\014IS\196C\031q~#")); ("Range", ("\218\130\001r\237\r\144\171\164\021l\155\196\143sg")); ("Proofview_monad", ("\218\196\189S\147\216\129\221\231\224v\228O\024*\239")); ("Proofview", ("\245\140U\027\236\199\199&\242\156\199YG\250tA")); ("Proof", ("\249\030\200g\248\164o&\tS\132\rTl\1736")); ("Primred", ("\158G\192\182\224\196\144*\174y_E\165\012\137C")); ("Pretype_errors", ("\155\229\201\176\163\234\203C\127\227\141\174j\199\200H")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Pattern", ("\195C\140Wb=\022\222\208\227^K\003\020\215X")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("NumTok", ("vd\023^\251\244B\166\145'\156\196-0\027\169")); ("Notationextern", ("\000\022b5`t\134]\192f4\131\187\192\152\160")); ("Notation_term", ("5\002\017\217b\193nc>\239\239\237\244\031\173?")); ("Notation", ("\243\219),\220\160v\230\t$\246\188\252\172\152\147")); ("Nativevalues", ("8:\007\025e\226c,\001\171\146#l\210\171\152")); ("Nativelib", ("V\239\205Y1\147E:,\176\196Hy\1483|")); ("Nativecode", ("\190\185\255\006m\012\210\163\138Rz\247\15283\183")); ("Nametab", ("1\018\163\254\225\2178\025DI\0271Q\198\134\140")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Namegen", ("\187\222\224T\255\020\1808-\212*\164\131\177\157x")); ("Monad", ("\244\171T\157\194p\187\160\149\195{\132\222\020\253\148")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Ltac_pretype", ("\224\"\167\018i:U\172>\188\128$\r\252\020T")); ("Logic_monad", ("\130\157\160Q\163vQ\137\184\2242\209\128\024\220i")); ("Locus", ("_\002\003W\246\181\225\242Uf\139\226\176\174\192I")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Libobject", ("\132}t\226hl\213L\210\172\167pc\012~\129")); ("Libnames", ("fp\0255\167\162\209\153\137\161\169#\246\193\003\198")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hook", ("\183\194\223\003\155\169',\187\240a;E\b\1396")); ("Hints", ("\007\130]H\\t(\131\000}\205\137H\148\250\166")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Gramlib__Stream", ("\248\\H\205_76\253\136\146\200\031\165\021=t")); ("Gramlib", ("\154\143\210e\021i\246\176\224\194\220\217\007\145\139A")); ("Goptions", ("i>Rt=\183g\153\190\144\235u\248\247*e")); ("Goal_select", ("\235$\175\023t\178\194.Ivlz\005\211\173\n")); ("Globnames", ("W\004\172T\214\181H\220\232\160LSW\006\130\226")); ("Glob_term", ("\165=a\227\160\153.\021_$\232\209T\236\153O")); ("Genlambda", ("\170}\024\241\141\222\136S\169\219\2212i\134KI")); ("Geninterp", ("2S\151\191\189\159\004\188;\224d\199|U\004\028")); ("Genarg", ("\1434\015\001\152\196\005s\156\136\195\185\247\b3\t")); ("Ftactic", ("K\172\205\128\241\162\160\201\202\1561o\180L\206:")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evd", ("\211\205p\193\216\129r\006\239oN\142ar\196\175")); ("Evarsolve", ("\000&\228\016}j\199\t\229\173\127\024\219\199\184\178")); ("Evar_kinds", ("\023L\186\132\218}\254\221\185\198\220\200h\003{\021")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Environ", ("\171b\1579\229<\003Z\147IL\225X\254\182\204")); ("Entries", ("\172\201\198\221Ap\027_{\174\141C\021\";p")); ("EConstr", ("\201aW\156\157;N\004\201V\208\006L\166\211)")); ("Dyn", ("\131z`\205v\2306\007x\027&K.?;\169")); ("Deprecation", ("\226:\146\245\190;\1929\254@\247a\218\244\134\189")); ("Declarations", ("\239\137n\019\030w$\182\166z^{\b\206\163\175")); ("DAst", ("\224/\200)\007\184ni\134\b\139\204\241\005w\212")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Conversion", ("\158\150&\195M\tv\127|\029\158RRK\211A")); ("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constrexpr", ("p'r\245\184chL\183\249\"\213]\1741\237")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("Coercionops", ("\238\240\220\191\201\bMazv\159\227\236?\147>")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CWarnings", ("\132\220\150\227\215\239t\217\132\220'JX\188\246c")); ("CUnix", ("\140Zl\153\167\011J\015\005|th\247OTu")); ("CString", ("\243~4C\023~\169\148x\206\165\207\195\177Q\184")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CEphemeron", ("\204I\179-\206(x4\173\229\250\001PkH\151")); ("CDebug", ("^4\210p7\239!3\138\138\213?\239`\250\157")); ("CClosure", ("\167\b\022\241V-\r\253\b\002\000j]\223%\142")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])
val is_universe_polymorphism : unit -> bool

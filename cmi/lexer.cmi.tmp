val init : unit -> unit
val token : Lexing.lexbuf -> Parser.token
val skip_hash_bang : Lexing.lexbuf -> unit
type error =
    Illegal_character of char
  | Illegal_escape of string * string option
  | Reserved_sequence of string * string option
  | Unterminated_comment of Location.t
  | Unterminated_string
  | Unterminated_string_in_comment of Location.t * Location.t
  | Empty_character_literal
  | Keyword_as_label of string
  | Invalid_literal of string
  | Invalid_directive of string * string option
exception Error of error * Location.t
val in_comment : unit -> bool
val in_string : unit -> bool
val print_warnings : bool ref
val handle_docstrings : bool ref
val comments : unit -> (string * Location.t) list
val token_with_comments : Lexing.lexbuf -> Parser.token
val set_preprocessor :
  (unit -> unit) ->
  ("DEBUG:rule", [(("init", 427), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -59), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -58), 0), 100000000, 0, -57), 0, (("parsing/lexer.mli", 23, 1196, 1196), ("parsing/lexer.mli", 23, 1196, 1219), 0), 0, Tag1 ("Lexer", 0)), 0); (("token", 428), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -56), (Tag3 (Tag1 ((Tag2 ("Parser")), "token"), 0, (0)), 100000000, 0, -55), 0), 100000000, 0, -54), 0, (("parsing/lexer.mli", 24, 1220, 1220), ("parsing/lexer.mli", 24, 1220, 1260), 0), 0, Tag1 ("Lexer", 1)), 0); (("skip_hash_bang", 429), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -53), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -52), 0), 100000000, 0, -51), 0, (("parsing/lexer.mli", 25, 1261, 1261), ("parsing/lexer.mli", 25, 1261, 1302), 0), 0, Tag1 ("Lexer", 2)), 0); Tag1 (("error", 430), (0, 0, Tag1 ([(("Illegal_character", 316), ([(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -36)]), 0, (("parsing/lexer.mli", 28, 1317, 1319), ("parsing/lexer.mli", 28, 1317, 1346), 0), 0, Tag1 ("Lexer", 4)); (("Illegal_escape", 317), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -37); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -39)], (0)), 100000000, 0, -38)]), 0, (("parsing/lexer.mli", 29, 1347, 1349), ("parsing/lexer.mli", 29, 1347, 1391), 0), 0, Tag1 ("Lexer", 5)); (("Reserved_sequence", 318), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -40); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -42)], (0)), 100000000, 0, -41)]), 0, (("parsing/lexer.mli", 30, 1392, 1394), ("parsing/lexer.mli", 30, 1392, 1439), 0), 0, Tag1 ("Lexer", 6)); (("Unterminated_comment", 319), ([(Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -43)]), 0, (("parsing/lexer.mli", 31, 1440, 1442), ("parsing/lexer.mli", 31, 1440, 1478), 0), 0, Tag1 ("Lexer", 7)); (("Unterminated_string", 386), (0), 0, (("parsing/lexer.mli", 32, 1479, 1481), ("parsing/lexer.mli", 32, 1479, 1502), 0), 0, Tag1 ("Lexer", 8)); (("Unterminated_string_in_comment", 387), ([(Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -44); (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -45)]), 0, (("parsing/lexer.mli", 33, 1503, 1505), ("parsing/lexer.mli", 33, 1503, 1564), 0), 0, Tag1 ("Lexer", 9)); (("Empty_character_literal", 388), (0), 0, (("parsing/lexer.mli", 34, 1565, 1567), ("parsing/lexer.mli", 34, 1565, 1592), 0), 0, Tag1 ("Lexer", 10)); (("Keyword_as_label", 389), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -46)]), 0, (("parsing/lexer.mli", 35, 1593, 1595), ("parsing/lexer.mli", 35, 1593, 1623), 0), 0, Tag1 ("Lexer", 11)); (("Invalid_literal", 390), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -47)]), 0, (("parsing/lexer.mli", 36, 1624, 1626), ("parsing/lexer.mli", 36, 1624, 1653), 0), 0, Tag1 ("Lexer", 12)); (("Invalid_directive", 391), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -48); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -50)], (0)), 100000000, 0, -49)]), 0, (("parsing/lexer.mli", 37, 1654, 1656), ("parsing/lexer.mli", 37, 1654, 1701), 0), 0, Tag1 ("Lexer", 13))], 0), 1, 0, 0, 0, 0, 0, (("parsing/lexer.mli", 27, 1304, 1304), ("parsing/lexer.mli", 37, 1654, 1701), 0), 0, 0, 0, Tag1 ("Lexer", 3)), 1, 0); Tag2 (("Error", 431), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((("error", 430)), 0, (0)), 100000000, 0, -34); (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -35)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Lexer", 14)), 2, 0); (("in_comment", 432), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -33), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -32), 0), 100000000, 0, -31), 0, (("parsing/lexer.mli", 41, 1742, 1742), ("parsing/lexer.mli", 41, 1742, 1771), 0), 0, Tag1 ("Lexer", 15)), 0); (("in_string", 433), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -30), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -29), 0), 100000000, 0, -28), 0, (("parsing/lexer.mli", 42, 1772, 1772), ("parsing/lexer.mli", 42, 1772, 1800), 0), 0, Tag1 ("Lexer", 16)), 0); (("print_warnings", 434), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -27)], (0)), 100000000, 0, -26), 0, (("parsing/lexer.mli", 45, 1803, 1803), ("parsing/lexer.mli", 45, 1803, 1832), 0), 0, Tag1 ("Lexer", 17)), 0); (("handle_docstrings", 435), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -25)], (0)), 100000000, 0, -24), 0, (("parsing/lexer.mli", 46, 1833, 1833), ("parsing/lexer.mli", 46, 1833, 1864), 0), 0, Tag1 ("Lexer", 18)), 0); (("comments", 436), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -23), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -21); (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -22)]), 100000000, 0, -20)], (0)), 100000000, 0, -19), 0), 100000000, 0, -18), 0, (("parsing/lexer.mli", 47, 1865, 1865), ("parsing/lexer.mli", 47, 1865, 1914), 0), 0, Tag1 ("Lexer", 19)), 0); (("token_with_comments", 437), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -17), (Tag3 (Tag1 ((Tag2 ("Parser")), "token"), 0, (0)), 100000000, 0, -16), 0), 100000000, 0, -15), 0, (("parsing/lexer.mli", 48, 1915, 1915), ("parsing/lexer.mli", 48, 1915, 1970), 0), 0, Tag1 ("Lexer", 20)), 0); (("set_preprocessor", 438), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -14), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -13), 0), 100000000, 0, -12), (Tag1 (0, (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -11), (Tag3 (Tag1 ((Tag2 ("Parser")), "token"), 0, (0)), 100000000, 0, -10), 0), 100000000, 0, -9), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -8), (Tag3 (Tag1 ((Tag2 ("Parser")), "token"), 0, (0)), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("parsing/lexer.mli", 61, 2431, 2431), ("parsing/lexer.mli", 64, 2546, 2552), 0), 0, Tag1 ("Lexer", 21)), 0)], "Lexer", [("Lexer", ("d\166[g\003\193p\201\147\190pL\152^\136A")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Parser", ("7'\1782\253\248\214\163]8\227\231&\145\183;")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Docstrings", ("\216\171\176\031*\203\162\186%\175\201qq\189\139U")); ("CamlinternalMenhirLib", ("\171m\238\135\252\210\222v\200\202\178\241L\143\025\153")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216"))], [(0)])
((Lexing.lexbuf -> Parser.token) -> Lexing.lexbuf -> Parser.token) -> unit

type t = {
  src : string option;
  name : string option;
  col : int;
  line : int;
  idx : int;
}
val zero : t
val t_of_lexbuf : Lexing.lexbuf -> t
val t_of_pos : Lexing.position -> t
val start_position : t -> Lexing.position
("DEBUG:rule", [Tag1 (("t", 371), (0, 0, [[(("src", 337), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -19)], (0)), 100000000, 0, -18), (("compiler/lib/parse_info.mli", 21, 876, 880), ("compiler/lib/parse_info.mli", 22, 900, 903), 0), 0, Tag1 ("Js_of_ocaml_compiler__Parse_info", 1)); (("name", 338), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -21)], (0)), 100000000, 0, -20), (("compiler/lib/parse_info.mli", 22, 900, 904), ("compiler/lib/parse_info.mli", 23, 925, 928), 0), 0, Tag1 ("Js_of_ocaml_compiler__Parse_info", 2)); (("col", 339), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -22), (("compiler/lib/parse_info.mli", 23, 925, 929), ("compiler/lib/parse_info.mli", 24, 939, 942), 0), 0, Tag1 ("Js_of_ocaml_compiler__Parse_info", 3)); (("line", 340), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -23), (("compiler/lib/parse_info.mli", 24, 939, 943), ("compiler/lib/parse_info.mli", 25, 954, 957), 0), 0, Tag1 ("Js_of_ocaml_compiler__Parse_info", 4)); (("idx", 341), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -24), (("compiler/lib/parse_info.mli", 25, 954, 958), ("compiler/lib/parse_info.mli", 25, 954, 967), 0), 0, Tag1 ("Js_of_ocaml_compiler__Parse_info", 5))]], 1, 0, 0, 0, 0, 0, (("compiler/lib/parse_info.mli", 20, 867, 867), ("compiler/lib/parse_info.mli", 26, 968, 971), 0), 0, 0, 0, Tag1 ("Js_of_ocaml_compiler__Parse_info", 0)), 1, 0); (("zero", 372), ((Tag3 ((("t", 371)), 0, (0)), 100000000, 0, -17), 0, (("compiler/lib/parse_info.mli", 28, 973, 973), ("compiler/lib/parse_info.mli", 28, 973, 985), 0), 0, Tag1 ("Js_of_ocaml_compiler__Parse_info", 6)), 0); (("t_of_lexbuf", 373), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -16), (Tag3 ((("t", 371)), 0, (0)), 100000000, 0, -15), 0), 100000000, 0, -14), 0, (("compiler/lib/parse_info.mli", 30, 987, 987), ("compiler/lib/parse_info.mli", 30, 987, 1023), 0), 0, Tag1 ("Js_of_ocaml_compiler__Parse_info", 7)), 0); (("t_of_pos", 374), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -13), (Tag3 ((("t", 371)), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("compiler/lib/parse_info.mli", 32, 1025, 1025), ("compiler/lib/parse_info.mli", 32, 1025, 1060), 0), 0, Tag1 ("Js_of_ocaml_compiler__Parse_info", 8)), 0); (("start_position", 375), ((Tag1 (0, (Tag3 ((("t", 371)), 0, (0)), 100000000, 0, -10), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("compiler/lib/parse_info.mli", 34, 1062, 1062), ("compiler/lib/parse_info.mli", 34, 1062, 1103), 0), 0, Tag1 ("Js_of_ocaml_compiler__Parse_info", 9)), 0); (("t_of_position", 376), ((Tag1 (("src"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -7)], (0)), 100000000, 0, -6), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -5), (Tag3 ((("t", 371)), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("compiler/lib/parse_info.mli", 36, 1105, 1105), ("compiler/lib/parse_info.mli", 36, 1105, 1166), 0), 0, Tag1 ("Js_of_ocaml_compiler__Parse_info", 10)), 0)], "Js_of_ocaml_compiler__Parse_info", [("Js_of_ocaml_compiler__Parse_info", ("`+\018\231C(v\197\016 .\222N\n\219\229")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Js_of_ocaml_compiler", ("\140\150\022\231\129$!^\139\156\170\236r\184~q")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
val t_of_position : src:string option -> Lexing.position -> t

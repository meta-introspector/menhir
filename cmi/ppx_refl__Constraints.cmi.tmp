module type PropertyWithLub =
  sig
    type property
    val bottom : property
    val equal : property -> property -> bool
    val is_maximal : property -> bool
    type t = property
    val union : property -> property -> property
  end
module Transfer :
  sig
    type t = Present | Absent | Constr of Longident.t * t * t
    val compose : t -> t -> t
    val compare : 'a -> 'a -> int
    val to_type : t -> Ppxlib.core_type
  end
module PropertyOfSet :
  functor (X : Stdcompat.Set.S) ->
    sig
      type property = X.t
      val bottom : property
      val equal : property -> property -> bool
      val is_maximal : property -> bool
      type t = property
      val union : property -> property -> property
    end
val compare_pair :
  ('a -> 'b -> int) -> ('c -> 'd -> int) -> 'a * 'c -> 'b * 'd -> int
module PairOfOrderedType :
  functor (X : Stdcompat.Set.OrderedType) (Y : Stdcompat.Set.OrderedType) ->
    sig type t = X.t * Y.t val compare : t -> t -> int end
module PropertyOfPair :
  functor (X : PropertyWithLub) (Y : PropertyWithLub) ->
    sig
      type property = X.t * Y.t
      val bottom : property
      val equal : property -> property -> bool
      val is_maximal : property -> bool
      type t = property
      val union : property -> property -> property
    end
val compare_list : ('a -> 'b -> int) -> 'a list -> 'b list -> int
module TransferSet :
  sig
    type elt = Transfer.t
    type t = Stdlib__Set.Make(Transfer).t
    val empty : t
    val add : elt -> t -> t
    val singleton : elt -> t
    val remove : elt -> t -> t
    val union : t -> t -> t
    val inter : t -> t -> t
    val disjoint : t -> t -> bool
    val diff : t -> t -> t
    val cardinal : t -> int
    val elements : t -> elt list
    val min_elt : t -> elt
    val min_elt_opt : t -> elt option
    val max_elt : t -> elt
    val max_elt_opt : t -> elt option
    val choose : t -> elt
    val choose_opt : t -> elt option
    val find : elt -> t -> elt
    val find_opt : elt -> t -> elt option
    val find_first : (elt -> bool) -> t -> elt
    val find_first_opt : (elt -> bool) -> t -> elt option
    val find_last : (elt -> bool) -> t -> elt
    val find_last_opt : (elt -> bool) -> t -> elt option
    val iter : (elt -> unit) -> t -> unit
    val fold : (elt -> 'acc -> 'acc) -> t -> 'acc -> 'acc
    val map : (elt -> elt) -> t -> t
    val filter : (elt -> bool) -> t -> t
    val filter_map : (elt -> elt option) -> t -> t
    val partition : (elt -> bool) -> t -> t * t
    val split : elt -> t -> t * bool * t
    val is_empty : t -> bool
    val mem : elt -> t -> bool
    val equal : t -> t -> bool
    val compare : t -> t -> int
    val subset : t -> t -> bool
    val for_all : (elt -> bool) -> t -> bool
    val exists : (elt -> bool) -> t -> bool
    val to_list : t -> elt list
    val of_list : elt list -> t
    val to_seq_from : elt -> t -> elt Seq.t
    val to_seq : t -> elt Seq.t
    val to_rev_seq : t -> elt Seq.t
    val add_seq : elt Seq.t -> t -> t
    val of_seq : elt Seq.t -> t
  end
module Kinds :
  sig
    type property =
        PropertyOfSet(TransferSet).t *
        PropertyOfPair(PropertyOfSet(Ppx_refl__.Common.StringSet))(PropertyOfSet(Ppx_refl__.Common.LongidentSet)).t
    val bottom : property
    val equal : property -> property -> bool
    val is_maximal : property -> bool
    type t = property
    val union : property -> property -> property
    val to_type :
      TransferSet.t *
      (Ppx_refl__.Common.StringSet.t * Ppx_refl__.Common.LongidentSet.t) ->
      Astlib.Ast_500.Parsetree.core_type
  end
module Variables :
  sig
    module Path :
      sig
        module PathItem :
          sig
            type t = Ppx_refl__.Common.OrderedLongident.t * Stdcompat.Int.t
            val compare : t -> t -> int
          end
        type t = origin * selector
        and selector = Left | Right | Direct
        and origin = PathItem.t list
        val left : selector -> selector
        val right : selector -> selector
        val compare : t -> t -> int
      end
    module PathSet :
      sig
        type elt = Path.t
        type t = Stdlib__Set.Make(Path).t
        val empty : t
        val add : elt -> t -> t
        val singleton : elt -> t
        val remove : elt -> t -> t
        val union : t -> t -> t
        val inter : t -> t -> t
        val disjoint : t -> t -> bool
        val diff : t -> t -> t
        val cardinal : t -> int
        val elements : t -> elt list
        val min_elt : t -> elt
        val min_elt_opt : t -> elt option
        val max_elt : t -> elt
        val max_elt_opt : t -> elt option
        val choose : t -> elt
        val choose_opt : t -> elt option
        val find : elt -> t -> elt
        val find_opt : elt -> t -> elt option
        val find_first : (elt -> bool) -> t -> elt
        val find_first_opt : (elt -> bool) -> t -> elt option
        val find_last : (elt -> bool) -> t -> elt
        val find_last_opt : (elt -> bool) -> t -> elt option
        val iter : (elt -> unit) -> t -> unit
        val fold : (elt -> 'acc -> 'acc) -> t -> 'acc -> 'acc
        val map : (elt -> elt) -> t -> t
        val filter : (elt -> bool) -> t -> t
        val filter_map : (elt -> elt option) -> t -> t
        val partition : (elt -> bool) -> t -> t * t
        val split : elt -> t -> t * bool * t
        val is_empty : t -> bool
        val mem : elt -> t -> bool
        val equal : t -> t -> bool
        val compare : t -> t -> int
        val subset : t -> t -> bool
        val for_all : (elt -> bool) -> t -> bool
        val exists : (elt -> bool) -> t -> bool
        val to_list : t -> elt list
        val of_list : elt list -> t
        val to_seq_from : elt -> t -> elt Seq.t
        val to_seq : t -> elt Seq.t
        val to_rev_seq : t -> elt Seq.t
        val add_seq : elt Seq.t -> t -> t
        val of_seq : elt Seq.t -> t
      end
    type t = PathSet.t Ppx_refl__.Common.IntMap.t
    val find :
      Ppx_refl__.Common.IntMap.key ->
      PathSet.t Ppx_refl__.Common.IntMap.t -> PathSet.t
    val add :
      Ppx_refl__.Common.IntMap.key ->
      PathSet.elt ->
      PathSet.t Ppx_refl__.Common.IntMap.t ->
      PathSet.t Ppx_refl__.Common.IntMap.t
    val offset :
      Ppx_refl__.Common.IntMap.key ->
      'a Ppx_refl__.Common.IntMap.t -> 'a Ppx_refl__.Common.IntMap.t
    type property = t
    val bottom : 'a Ppx_refl__.Common.IntMap.t
    val equal :
      PathSet.t Ppx_refl__.Common.IntMap.t ->
      PathSet.t Ppx_refl__.Common.IntMap.t -> bool
    val union :
      PathSet.t Ppx_refl__.Common.IntMap.t ->
      PathSet.t Ppx_refl__.Common.IntMap.t ->
      PathSet.t Ppx_refl__.Common.IntMap.t
    val is_maximal : 'a -> bool
    val variable_name : string -> string -> int -> string
    val positive_name : string -> int -> string
    val negative_name : string -> int -> string
    val direct_name : string -> int -> string
    val gadt_name : string -> int -> string
    type transfer = Present | Depend of Longident.t list list
    val make_transfer :
      PathSet.t Ppx_refl__.Common.IntMap.t ->
      Path.selector -> Ppx_refl__.Common.IntMap.key -> transfer
    type transfers = (Longident.t * transfer) list
    val make_transfers :
      string ->
      int -> PathSet.t Ppx_refl__.Common.IntMap.t -> (string * transfer) list
  end
type property = Kinds.t * Variables.t
val bottom : property
val equal : property -> property -> bool
val is_maximal : property -> bool
type t = property
val union : property -> property -> property
val add_direct_kind :
  Ppx_refl__.Common.StringSet.elt ->
  ('a * (Ppx_refl__.Common.StringSet.t * 'b)) * 'c ->
  ('a * (Ppx_refl__.Common.StringSet.t * 'b)) * 'c
val add_inherited_kind :
  Ppx_refl__.Common.LongidentSet.elt ->
  ('a * ('b * Ppx_refl__.Common.LongidentSet.t)) * 'c ->
  ('a * ('b * Ppx_refl__.Common.LongidentSet.t)) * 'c
val add_exists_kind :
  TransferSet.elt -> (TransferSet.t * 'a) * 'b -> (TransferSet.t * 'a) * 'b
val add_variable :
  Ppx_refl__.Common.IntMap.key ->
  Variables.PathSet.elt ->
  t -> Kinds.t * Variables.PathSet.t Ppx_refl__.Common.IntMap.t
val offset_variables :
  Ppx_refl__.Common.IntMap.key ->
  ("DEBUG:rule", [Tag4 (("PropertyWithLub", 3740), ((Tag1 ([Tag1 (("property", 3766), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/Sigs.ml", 135, 4081, 4083), ("src/Sigs.ml", 135, 4081, 4096), 0), 0, 0, 0, Tag1 ("Fix__Sigs", 28)), 1, 0); (("bottom", 3767), ((Tag3 ((("property", 3766)), 0, (0)), 100000000, 0, -116), 0, (("src/Sigs.ml", 138, 4139, 4141), ("src/Sigs.ml", 138, 4139, 4161), 0), 0, Tag1 ("Fix__Sigs", 29)), 0); (("equal", 3768), ((Tag1 (0, (Tag3 ((("property", 3766)), 0, (0)), 100000000, 0, -115), (Tag1 (0, (Tag3 ((("property", 3766)), 0, (0)), 100000000, 0, -114), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -113), 0), 100000000, 0, -112), 0), 100000000, 0, -111), 0, (("src/Sigs.ml", 143, 4333, 4335), ("src/Sigs.ml", 143, 4333, 4374), 0), 0, Tag1 ("Fix__Sigs", 30)), 0); (("is_maximal", 3769), ((Tag1 (0, (Tag3 ((("property", 3766)), 0, (0)), 100000000, 0, -110), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -109), 0), 100000000, 0, -108), 0, (("src/Sigs.ml", 151, 4789, 4791), ("src/Sigs.ml", 151, 4789, 4823), 0), 0, Tag1 ("Fix__Sigs", 31)), 0); Tag1 (("t", 3770), (0, 0, 0, 1, ((Tag3 ((("property", 3766)), 0, (0)), 100000000, 0, -107)), 0, 0, 0, 0, (("ppx/constraints.ml", 6, 71, 73), ("ppx/constraints.ml", 6, 71, 90), 0), 0, 0, 0, Tag1 ("Ppx_refl__Constraints", 0)), 1, 0); (("union", 3771), ((Tag1 (0, (Tag3 ((("property", 3766)), 0, (0)), 100000000, 0, -106), (Tag1 (0, (Tag3 ((("property", 3766)), 0, (0)), 100000000, 0, -105), (Tag3 ((("property", 3766)), 0, (0)), 100000000, 0, -104), 0), 100000000, 0, -103), 0), 100000000, 0, -102), 0, (("ppx/constraints.ml", 8, 92, 94), ("ppx/constraints.ml", 8, 92, 138), 0), 0, Tag1 ("Ppx_refl__Constraints", 1)), 0)])), 0, (("ppx/constraints.ml", 3, 13, 13), ("ppx/constraints.ml", 9, 139, 142), 0), Tag1 ("Ppx_refl__Constraints", 2)), 0); Tag3 (("Transfer", 3741), 0, (Tag1 ([Tag1 (("t", 3772), (0, 0, Tag1 ([(("Present", 621), (0), 0, (("ppx/constraints.ml", 13, 180, 184), ("ppx/constraints.ml", 13, 180, 193), 0), 0, Tag1 ("Ppx_refl__Constraints", 4)); (("Absent", 622), (0), 0, (("ppx/constraints.ml", 14, 194, 198), ("ppx/constraints.ml", 14, 194, 206), 0), 0, Tag1 ("Ppx_refl__Constraints", 5)); (("Constr", 623), ([(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -127); (Tag3 ((("t", 3772)), 0, (0)), 100000000, 0, -128); (Tag3 ((("t", 3772)), 0, (0)), 100000000, 0, -129)]), 0, (("ppx/constraints.ml", 15, 207, 211), ("ppx/constraints.ml", 15, 207, 242), 0), 0, Tag1 ("Ppx_refl__Constraints", 6))], 0), 1, 0, 0, 0, 0, 0, (("ppx/constraints.ml", 12, 169, 171), ("ppx/constraints.ml", 15, 207, 242), 0), 0, 0, 0, Tag1 ("Ppx_refl__Constraints", 3)), 1, 0); (("compose", 3773), ((Tag1 (0, (Tag3 ((("t", 3772)), 0, (0)), 100000000, 0, -126), (Tag1 (0, (Tag3 ((("t", 3772)), 0, (0)), 100000000, 0, -126), (Tag3 ((("t", 3772)), 0, (0)), 100000000, 0, -126), 0), 100000000, 0, -125), 0), 100000000, 0, -124), 0, (("ppx/constraints.ml", 17, 244, 254), ("ppx/constraints.ml", 17, 244, 261), 0), 0, Tag1 ("Ppx_refl__Constraints", 7)), 0); (("compare", 3774), ((Tag1 (0, ((0), 100000000, 0, -123), (Tag1 (0, ((0), 100000000, 0, -123), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -122), 0), 100000000, 0, -121), 0), 100000000, 0, -120), 0, (("ppx/constraints.ml", 25, 462, 468), ("ppx/constraints.ml", 25, 462, 475), 0), 0, Tag1 ("Ppx_refl__Constraints", 13)), 0); (("to_type", 3775), ((Tag1 (0, (Tag3 ((("t", 3772)), 0, (0)), 100000000, 0, -119), (Tag3 (Tag1 ((Tag2 ("Ppxlib")), "core_type"), 0, (0)), 100000000, 0, -118), 0), 100000000, 0, -117), 0, (("ppx/constraints.ml", 27, 494, 504), ("ppx/constraints.ml", 27, 494, 511), 0), 0, Tag1 ("Ppx_refl__Constraints", 14)), 0)]), 0, (("ppx/constraints.ml", 11, 144, 144), ("ppx/constraints.ml", 35, 779, 782), 0), Tag1 ("Ppx_refl__Constraints", 20)), 0, 0); Tag3 (("PropertyOfSet", 3742), 0, (Tag2 (((("X", 3765)), (Tag1 (Tag1 ((Tag2 ("Stdcompat")), "Set"), "S"))), Tag1 ([Tag1 (("property", 3776), (0, 0, 0, 1, ((Tag3 (Tag1 ((("X", 3765)), "t"), 0, (0)), 100000000, 0, -145)), 0, 0, 0, 0, (("ppx/constraints.ml", 38, 817, 844), ("ppx/constraints.ml", 38, 817, 863), 0), 0, 0, 0, Tag1 ("Ppx_refl__Constraints", 28)), 1, 0); (("bottom", 3777), ((Tag3 ((("property", 3776)), 0, (0)), 100000000, 0, -144), 0, (("src/Sigs.ml", 138, 4139, 4141), ("src/Sigs.ml", 138, 4139, 4161), 0), 0, Tag1 ("Fix__Sigs", 29)), 0); (("equal", 3778), ((Tag1 (0, (Tag3 ((("property", 3776)), 0, (0)), 100000000, 0, -143), (Tag1 (0, (Tag3 ((("property", 3776)), 0, (0)), 100000000, 0, -142), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -141), 0), 100000000, 0, -140), 0), 100000000, 0, -139), 0, (("src/Sigs.ml", 143, 4333, 4335), ("src/Sigs.ml", 143, 4333, 4374), 0), 0, Tag1 ("Fix__Sigs", 30)), 0); (("is_maximal", 3779), ((Tag1 (0, (Tag3 ((("property", 3776)), 0, (0)), 100000000, 0, -138), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -137), 0), 100000000, 0, -136), 0, (("src/Sigs.ml", 151, 4789, 4791), ("src/Sigs.ml", 151, 4789, 4823), 0), 0, Tag1 ("Fix__Sigs", 31)), 0); Tag1 (("t", 3780), (0, 0, 0, 1, ((Tag3 ((("property", 3776)), 0, (0)), 100000000, 0, -135)), 0, 0, 0, 0, (("ppx/constraints.ml", 6, 71, 73), ("ppx/constraints.ml", 6, 71, 90), 0), 0, 0, 0, Tag1 ("Ppx_refl__Constraints", 0)), 1, 0); (("union", 3781), ((Tag1 (0, (Tag3 ((("property", 3776)), 0, (0)), 100000000, 0, -134), (Tag1 (0, (Tag3 ((("property", 3776)), 0, (0)), 100000000, 0, -133), (Tag3 ((("property", 3776)), 0, (0)), 100000000, 0, -132), 0), 100000000, 0, -131), 0), 100000000, 0, -130), 0, (("ppx/constraints.ml", 8, 92, 94), ("ppx/constraints.ml", 8, 92, 138), 0), 0, Tag1 ("Ppx_refl__Constraints", 1)), 0)])), 0, (("ppx/constraints.ml", 37, 784, 784), ("ppx/constraints.ml", 50, 1009, 1012), 0), Tag1 ("Ppx_refl__Constraints", 29)), 0, 0); (("compare_pair", 3743), ((Tag1 (0, (Tag1 (0, ((0), 100000000, 0, -96), (Tag1 (0, ((0), 100000000, 0, -93), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -91), (1)), 100000000, 0, -101), (1)), 100000000, 0, -100), (Tag1 (0, (Tag1 (0, ((0), 100000000, 0, -97), (Tag1 (0, ((0), 100000000, 0, -94), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -91), (1)), 100000000, 0, -99), (1)), 100000000, 0, -98), (Tag1 (0, (Tag2 ([((0), 100000000, 0, -96); ((0), 100000000, 0, -97)]), 100000000, 0, -95), (Tag1 (0, (Tag2 ([((0), 100000000, 0, -93); ((0), 100000000, 0, -94)]), 100000000, 0, -92), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -91), 0), 100000000, 0, -90), 0), 100000000, 0, -89), 0), 100000000, 0, -88), 0), 100000000, 0, -87), 0, (("ppx/constraints.ml", 52, 1014, 1018), ("ppx/constraints.ml", 52, 1014, 1030), 0), 0, Tag1 ("Ppx_refl__Constraints", 30)), 0); Tag3 (("PairOfOrderedType", 3744), 0, (Tag2 (((("X", 3763)), (Tag1 (Tag1 ((Tag2 ("Stdcompat")), "Set"), "OrderedType"))), Tag2 (((("Y", 3764)), (Tag1 (Tag1 ((Tag2 ("Stdcompat")), "Set"), "OrderedType"))), Tag1 ([Tag1 (("t", 3782), (0, 0, 0, 1, ((Tag2 ([(Tag3 (Tag1 ((("X", 3763)), "t"), 0, (0)), 100000000, 0, -152); (Tag3 (Tag1 ((("Y", 3764)), "t"), 0, (0)), 100000000, 0, -153)]), 100000000, 0, -151)), 0, 0, 0, 0, (("ppx/constraints.ml", 58, 1212, 1237), ("ppx/constraints.ml", 58, 1212, 1255), 0), 0, 0, 0, Tag1 ("Ppx_refl__Constraints", 42)), 1, 0); (("compare", 3783), ((Tag1 (0, (Tag3 ((("t", 3782)), 0, (0)), 100000000, 0, -150), (Tag1 (0, (Tag3 ((("t", 3782)), 0, (0)), 100000000, 0, -149), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -148), 0), 100000000, 0, -147), 0), 100000000, 0, -146), 0, (("set.mli", 55, 2255, 2259), ("set.mli", 55, 2255, 2286), 0), 0, Tag1 ("Stdlib__Set", 1)), 0)]))), 0, (("ppx/constraints.ml", 57, 1143, 1143), ("ppx/constraints.ml", 62, 1336, 1339), 0), Tag1 ("Ppx_refl__Constraints", 43)), 0, 0); Tag3 (("PropertyOfPair", 3745), 0, (Tag2 (((("X", 3761)), ((("PropertyWithLub", 3740)))), Tag2 (((("Y", 3762)), ((("PropertyWithLub", 3740)))), Tag1 ([Tag1 (("property", 3784), (0, 0, 0, 1, ((Tag2 ([(Tag3 (Tag1 ((("X", 3761)), "t"), 0, (0)), 100000000, 0, -170); (Tag3 (Tag1 ((("Y", 3762)), "t"), 0, (0)), 100000000, 0, -171)]), 100000000, 0, -169)), 0, 0, 0, 0, (("ppx/constraints.ml", 65, 1407, 1434), ("ppx/constraints.ml", 65, 1407, 1459), 0), 0, 0, 0, Tag1 ("Ppx_refl__Constraints", 62)), 1, 0); (("bottom", 3785), ((Tag3 ((("property", 3784)), 0, (0)), 100000000, 0, -168), 0, (("src/Sigs.ml", 138, 4139, 4141), ("src/Sigs.ml", 138, 4139, 4161), 0), 0, Tag1 ("Fix__Sigs", 29)), 0); (("equal", 3786), ((Tag1 (0, (Tag3 ((("property", 3784)), 0, (0)), 100000000, 0, -167), (Tag1 (0, (Tag3 ((("property", 3784)), 0, (0)), 100000000, 0, -166), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -165), 0), 100000000, 0, -164), 0), 100000000, 0, -163), 0, (("src/Sigs.ml", 143, 4333, 4335), ("src/Sigs.ml", 143, 4333, 4374), 0), 0, Tag1 ("Fix__Sigs", 30)), 0); (("is_maximal", 3787), ((Tag1 (0, (Tag3 ((("property", 3784)), 0, (0)), 100000000, 0, -162), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -161), 0), 100000000, 0, -160), 0, (("src/Sigs.ml", 151, 4789, 4791), ("src/Sigs.ml", 151, 4789, 4823), 0), 0, Tag1 ("Fix__Sigs", 31)), 0); Tag1 (("t", 3788), (0, 0, 0, 1, ((Tag3 ((("property", 3784)), 0, (0)), 100000000, 0, -159)), 0, 0, 0, 0, (("ppx/constraints.ml", 6, 71, 73), ("ppx/constraints.ml", 6, 71, 90), 0), 0, 0, 0, Tag1 ("Ppx_refl__Constraints", 0)), 1, 0); (("union", 3789), ((Tag1 (0, (Tag3 ((("property", 3784)), 0, (0)), 100000000, 0, -158), (Tag1 (0, (Tag3 ((("property", 3784)), 0, (0)), 100000000, 0, -157), (Tag3 ((("property", 3784)), 0, (0)), 100000000, 0, -156), 0), 100000000, 0, -155), 0), 100000000, 0, -154), 0, (("ppx/constraints.ml", 8, 92, 94), ("ppx/constraints.ml", 8, 92, 138), 0), 0, Tag1 ("Ppx_refl__Constraints", 1)), 0)]))), 0, (("ppx/constraints.ml", 64, 1341, 1341), ("ppx/constraints.ml", 79, 1736, 1739), 0), Tag1 ("Ppx_refl__Constraints", 63)), 0, 0); (("compare_list", 3746), ((Tag1 (0, (Tag1 (0, ((0), 100000000, 0, -84), (Tag1 (0, ((0), 100000000, 0, -82), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -80), (1)), 100000000, 0, -86), (1)), 100000000, 0, -85), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -84)], (0)), 100000000, 0, -83), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -82)], (0)), 100000000, 0, -81), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -80), 0), 100000000, 0, -79), 0), 100000000, 0, -78), 0), 100000000, 0, -77), 0, (("ppx/constraints.ml", 81, 1741, 1749), ("ppx/constraints.ml", 81, 1741, 1761), 0), 0, Tag1 ("Ppx_refl__Constraints", 64)), 0); Tag3 (("TransferSet", 3747), 0, (Tag1 ([Tag1 (("elt", 3790), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Transfer", 3741)), "t"), 0, (0)), 100000000, 0, -399)), 0, 0, 0, 0, (("set.mli", 321, 11945, 11986), ("set.mli", 321, 11945, 12002), 0), 0, 0, 0, Tag1 ("Stdlib__Set", 50)), 1, 0); Tag1 (("t", 3791), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag2 (Tag1 ((Tag2 ("Stdlib__Set")), "Make"), (("Transfer", 3741))), "t"), 0, (0)), 100000000, 0, -398)), 0, 0, 0, 0, (("set.mli", 74, 2901, 2905), ("set.mli", 74, 2901, 2911), 0), 0, 0, 0, Tag1 ("Stdlib__Set", 4)), 1, 0); (("empty", 3792), ((Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -397), 0, (("set.mli", 77, 2942, 2946), ("set.mli", 77, 2942, 2958), 0), 0, Tag1 ("Stdlib__Set", 5)), 0); (("add", 3793), ((Tag1 (0, (Tag3 ((("elt", 3790)), 0, (0)), 100000000, 0, -396), (Tag1 (0, (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -395), (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -394), 0), 100000000, 0, -393), 0), 100000000, 0, -392), 0, (("set.mli", 80, 2986, 2990), ("set.mli", 80, 2986, 3012), 0), 0, Tag1 ("Stdlib__Set", 6)), 0); (("singleton", 3794), ((Tag1 (0, (Tag3 ((("elt", 3790)), 0, (0)), 100000000, 0, -391), (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -390), 0), 100000000, 0, -389), 0, (("set.mli", 86, 3278, 3282), ("set.mli", 86, 3278, 3305), 0), 0, Tag1 ("Stdlib__Set", 7)), 0); (("remove", 3795), ((Tag1 (0, (Tag3 ((("elt", 3790)), 0, (0)), 100000000, 0, -388), (Tag1 (0, (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -387), (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -386), 0), 100000000, 0, -385), 0), 100000000, 0, -384), 0, (("set.mli", 89, 3381, 3385), ("set.mli", 89, 3381, 3410), 0), 0, Tag1 ("Stdlib__Set", 8)), 0); (("union", 3796), ((Tag1 (0, (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -383), (Tag1 (0, (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -382), (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -381), 0), 100000000, 0, -380), 0), 100000000, 0, -379), 0, (("set.mli", 95, 3677, 3681), ("set.mli", 95, 3677, 3703), 0), 0, Tag1 ("Stdlib__Set", 9)), 0); (("inter", 3797), ((Tag1 (0, (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -378), (Tag1 (0, (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -377), (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -376), 0), 100000000, 0, -375), 0), 100000000, 0, -374), 0, (("set.mli", 98, 3727, 3731), ("set.mli", 98, 3727, 3753), 0), 0, Tag1 ("Stdlib__Set", 10)), 0); (("disjoint", 3798), ((Tag1 (0, (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -373), (Tag1 (0, (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -372), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -371), 0), 100000000, 0, -370), 0), 100000000, 0, -369), 0, (("set.mli", 101, 3784, 3788), ("set.mli", 101, 3784, 3816), 0), 0, Tag1 ("Stdlib__Set", 11)), 0); (("diff", 3799), ((Tag1 (0, (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -368), (Tag1 (0, (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -367), (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -366), 0), 100000000, 0, -365), 0), 100000000, 0, -364), 0, (("set.mli", 105, 3880, 3884), ("set.mli", 105, 3880, 3905), 0), 0, Tag1 ("Stdlib__Set", 12)), 0); (("cardinal", 3800), ((Tag1 (0, (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -363), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -362), 0), 100000000, 0, -361), 0, (("set.mli", 109, 4007, 4011), ("set.mli", 109, 4007, 4033), 0), 0, Tag1 ("Stdlib__Set", 13)), 0); (("elements", 3801), ((Tag1 (0, (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -360), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 3790)), 0, (0)), 100000000, 0, -359)], (0)), 100000000, 0, -358), 0), 100000000, 0, -357), 0, (("set.mli", 114, 4120, 4124), ("set.mli", 114, 4120, 4151), 0), 0, Tag1 ("Stdlib__Set", 14)), 0); (("min_elt", 3802), ((Tag1 (0, (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -356), (Tag3 ((("elt", 3790)), 0, (0)), 100000000, 0, -355), 0), 100000000, 0, -354), 0, (("set.mli", 120, 4380, 4384), ("set.mli", 120, 4380, 4405), 0), 0, Tag1 ("Stdlib__Set", 15)), 0); (("min_elt_opt", 3803), ((Tag1 (0, (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -353), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 3790)), 0, (0)), 100000000, 0, -352)], (0)), 100000000, 0, -351), 0), 100000000, 0, -350), 0, (("set.mli", 125, 4567, 4571), ("set.mli", 125, 4567, 4603), 0), 0, Tag1 ("Stdlib__Set", 16)), 0); (("max_elt", 3804), ((Tag1 (0, (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -349), (Tag3 ((("elt", 3790)), 0, (0)), 100000000, 0, -348), 0), 100000000, 0, -347), 0, (("set.mli", 131, 4774, 4778), ("set.mli", 131, 4774, 4799), 0), 0, Tag1 ("Stdlib__Set", 17)), 0); (("max_elt_opt", 3805), ((Tag1 (0, (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -346), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 3790)), 0, (0)), 100000000, 0, -345)], (0)), 100000000, 0, -344), 0), 100000000, 0, -343), 0, (("set.mli", 135, 4890, 4894), ("set.mli", 135, 4890, 4926), 0), 0, Tag1 ("Stdlib__Set", 18)), 0); (("choose", 3806), ((Tag1 (0, (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -342), (Tag3 ((("elt", 3790)), 0, (0)), 100000000, 0, -341), 0), 100000000, 0, -340), 0, (("set.mli", 140, 5041, 5045), ("set.mli", 140, 5041, 5065), 0), 0, Tag1 ("Stdlib__Set", 19)), 0); (("choose_opt", 3807), ((Tag1 (0, (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -339), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 3790)), 0, (0)), 100000000, 0, -338)], (0)), 100000000, 0, -337), 0), 100000000, 0, -336), 0, (("set.mli", 145, 5263, 5267), ("set.mli", 145, 5263, 5298), 0), 0, Tag1 ("Stdlib__Set", 20)), 0); (("find", 3808), ((Tag1 (0, (Tag3 ((("elt", 3790)), 0, (0)), 100000000, 0, -335), (Tag1 (0, (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -334), (Tag3 ((("elt", 3790)), 0, (0)), 100000000, 0, -333), 0), 100000000, 0, -332), 0), 100000000, 0, -331), 0, (("set.mli", 153, 5541, 5549), ("set.mli", 153, 5541, 5574), 0), 0, Tag1 ("Stdlib__Set", 21)), 0); (("find_opt", 3809), ((Tag1 (0, (Tag3 ((("elt", 3790)), 0, (0)), 100000000, 0, -330), (Tag1 (0, (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -329), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 3790)), 0, (0)), 100000000, 0, -328)], (0)), 100000000, 0, -327), 0), 100000000, 0, -326), 0), 100000000, 0, -325), 0, (("set.mli", 159, 5752, 5756), ("set.mli", 159, 5752, 5792), 0), 0, Tag1 ("Stdlib__Set", 22)), 0); (("find_first", 3810), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 3790)), 0, (0)), 100000000, 0, -324), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -323), 0), 100000000, 0, -322), (Tag1 (0, (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -321), (Tag3 ((("elt", 3790)), 0, (0)), 100000000, 0, -320), 0), 100000000, 0, -319), 0), 100000000, 0, -318), 0, (("set.mli", 165, 5963, 5967), ("set.mli", 165, 5963, 6008), 0), 0, Tag1 ("Stdlib__Set", 23)), 0); (("find_first_opt", 3811), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 3790)), 0, (0)), 100000000, 0, -317), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -316), 0), 100000000, 0, -315), (Tag1 (0, (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -314), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 3790)), 0, (0)), 100000000, 0, -313)], (0)), 100000000, 0, -312), 0), 100000000, 0, -311), 0), 100000000, 0, -310), 0, (("set.mli", 177, 6482, 6486), ("set.mli", 177, 6482, 6538), 0), 0, Tag1 ("Stdlib__Set", 24)), 0); (("find_last", 3812), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 3790)), 0, (0)), 100000000, 0, -309), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -308), 0), 100000000, 0, -307), (Tag1 (0, (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -306), (Tag3 ((("elt", 3790)), 0, (0)), 100000000, 0, -305), 0), 100000000, 0, -304), 0), 100000000, 0, -303), 0, (("set.mli", 184, 6779, 6783), ("set.mli", 184, 6779, 6823), 0), 0, Tag1 ("Stdlib__Set", 25)), 0); (("find_last_opt", 3813), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 3790)), 0, (0)), 100000000, 0, -302), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -301), 0), 100000000, 0, -300), (Tag1 (0, (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -299), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 3790)), 0, (0)), 100000000, 0, -298)], (0)), 100000000, 0, -297), 0), 100000000, 0, -296), 0), 100000000, 0, -295), 0, (("set.mli", 190, 7044, 7048), ("set.mli", 190, 7044, 7099), 0), 0, Tag1 ("Stdlib__Set", 26)), 0); (("iter", 3814), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 3790)), 0, (0)), 100000000, 0, -294), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -293), 0), 100000000, 0, -292), (Tag1 (0, (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -291), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -290), 0), 100000000, 0, -289), 0), 100000000, 0, -288), 0, (("set.mli", 198, 7371, 7375), ("set.mli", 198, 7371, 7411), 0), 0, Tag1 ("Stdlib__Set", 27)), 0); (("fold", 3815), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 3790)), 0, (0)), 100000000, 0, -287), (Tag1 (0, ((("acc")), 100000000, 0, -283), ((("acc")), 100000000, 0, -283), 0), 100000000, 0, -286), 0), 100000000, 0, -285), (Tag1 (0, (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -284), (Tag1 (0, ((("acc")), 100000000, 0, -283), ((("acc")), 100000000, 0, -283), 0), 100000000, 0, -282), 0), 100000000, 0, -281), 0), 100000000, 0, -280), 0, (("set.mli", 203, 7616, 7620), ("set.mli", 203, 7616, 7672), 0), 0, Tag1 ("Stdlib__Set", 28)), 0); (("map", 3816), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 3790)), 0, (0)), 100000000, 0, -279), (Tag3 ((("elt", 3790)), 0, (0)), 100000000, 0, -278), 0), 100000000, 0, -277), (Tag1 (0, (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -276), (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -275), 0), 100000000, 0, -274), 0), 100000000, 0, -273), 0, (("set.mli", 209, 7860, 7864), ("set.mli", 209, 7860, 7895), 0), 0, Tag1 ("Stdlib__Set", 29)), 0); (("filter", 3817), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 3790)), 0, (0)), 100000000, 0, -272), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -271), 0), 100000000, 0, -270), (Tag1 (0, (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -269), (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -268), 0), 100000000, 0, -267), 0), 100000000, 0, -266), 0, (("set.mli", 221, 8372, 8376), ("set.mli", 221, 8372, 8411), 0), 0, Tag1 ("Stdlib__Set", 30)), 0); (("filter_map", 3818), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 3790)), 0, (0)), 100000000, 0, -265), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 3790)), 0, (0)), 100000000, 0, -264)], (0)), 100000000, 0, -263), 0), 100000000, 0, -262), (Tag1 (0, (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -261), (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -260), 0), 100000000, 0, -259), 0), 100000000, 0, -258), 0, (("set.mli", 228, 8710, 8714), ("set.mli", 228, 8710, 8759), 0), 0, Tag1 ("Stdlib__Set", 31)), 0); (("partition", 3819), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 3790)), 0, (0)), 100000000, 0, -257), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -256), 0), 100000000, 0, -255), (Tag1 (0, (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -254), (Tag2 ([(Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -252); (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -253)]), 100000000, 0, -251), 0), 100000000, 0, -250), 0), 100000000, 0, -249), 0, (("set.mli", 243, 9275, 9279), ("set.mli", 243, 9275, 9321), 0), 0, Tag1 ("Stdlib__Set", 32)), 0); (("split", 3820), ((Tag1 (0, (Tag3 ((("elt", 3790)), 0, (0)), 100000000, 0, -248), (Tag1 (0, (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -247), (Tag2 ([(Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -244); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -245); (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -246)]), 100000000, 0, -243), 0), 100000000, 0, -242), 0), 100000000, 0, -241), 0, (("set.mli", 249, 9562, 9566), ("set.mli", 249, 9562, 9601), 0), 0, Tag1 ("Stdlib__Set", 33)), 0); (("is_empty", 3821), ((Tag1 (0, (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -240), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -239), 0), 100000000, 0, -238), 0, (("set.mli", 260, 10020, 10024), ("set.mli", 260, 10020, 10047), 0), 0, Tag1 ("Stdlib__Set", 34)), 0); (("mem", 3822), ((Tag1 (0, (Tag3 ((("elt", 3790)), 0, (0)), 100000000, 0, -237), (Tag1 (0, (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -236), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -235), 0), 100000000, 0, -234), 0), 100000000, 0, -233), 0, (("set.mli", 263, 10096, 10100), ("set.mli", 263, 10096, 10125), 0), 0, Tag1 ("Stdlib__Set", 35)), 0); (("equal", 3823), ((Tag1 (0, (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -232), (Tag1 (0, (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -231), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -230), 0), 100000000, 0, -229), 0), 100000000, 0, -228), 0, (("set.mli", 266, 10190, 10194), ("set.mli", 266, 10190, 10219), 0), 0, Tag1 ("Stdlib__Set", 36)), 0); (("compare", 3824), ((Tag1 (0, (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -227), (Tag1 (0, (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -226), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -225), 0), 100000000, 0, -224), 0), 100000000, 0, -223), 0, (("set.mli", 270, 10335, 10339), ("set.mli", 270, 10335, 10365), 0), 0, Tag1 ("Stdlib__Set", 37)), 0); (("subset", 3825), ((Tag1 (0, (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -222), (Tag1 (0, (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -221), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -220), 0), 100000000, 0, -219), 0), 100000000, 0, -218), 0, (("set.mli", 274, 10476, 10480), ("set.mli", 274, 10476, 10506), 0), 0, Tag1 ("Stdlib__Set", 38)), 0); (("for_all", 3826), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 3790)), 0, (0)), 100000000, 0, -217), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -216), 0), 100000000, 0, -215), (Tag1 (0, (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -214), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -213), 0), 100000000, 0, -212), 0), 100000000, 0, -211), 0, (("set.mli", 278, 10598, 10602), ("set.mli", 278, 10598, 10641), 0), 0, Tag1 ("Stdlib__Set", 39)), 0); (("exists", 3827), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 3790)), 0, (0)), 100000000, 0, -210), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -209), 0), 100000000, 0, -208), (Tag1 (0, (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -207), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -206), 0), 100000000, 0, -205), 0), 100000000, 0, -204), 0, (("set.mli", 282, 10737, 10741), ("set.mli", 282, 10737, 10779), 0), 0, Tag1 ("Stdlib__Set", 40)), 0); (("to_list", 3828), ((Tag1 (0, (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -203), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 3790)), 0, (0)), 100000000, 0, -202)], (0)), 100000000, 0, -201), 0), 100000000, 0, -200), 0, (("set.mli", 288, 10922, 10926), ("set.mli", 288, 10922, 10953), 0), 0, Tag1 ("Stdlib__Set", 41)), 0); (("of_list", 3829), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 3790)), 0, (0)), 100000000, 0, -199)], (0)), 100000000, 0, -198), (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -197), 0), 100000000, 0, -196), 0, (("set.mli", 292, 11017, 11021), ("set.mli", 292, 11017, 11047), 0), 0, Tag1 ("Stdlib__Set", 42)), 0); (("to_seq_from", 3830), ((Tag1 (0, (Tag3 ((("elt", 3790)), 0, (0)), 100000000, 0, -195), (Tag1 (0, (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -194), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 3790)), 0, (0)), 100000000, 0, -193)], (0)), 100000000, 0, -192), 0), 100000000, 0, -191), 0), 100000000, 0, -190), 0, (("set.mli", 298, 11268, 11272), ("set.mli", 298, 11268, 11311), 0), 0, Tag1 ("Stdlib__Set", 43)), 0); (("to_seq", 3831), ((Tag1 (0, (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -189), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 3790)), 0, (0)), 100000000, 0, -188)], (0)), 100000000, 0, -187), 0), 100000000, 0, -186), 0, (("set.mli", 303, 11453, 11457), ("set.mli", 303, 11453, 11484), 0), 0, Tag1 ("Stdlib__Set", 44)), 0); (("to_rev_seq", 3832), ((Tag1 (0, (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -185), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 3790)), 0, (0)), 100000000, 0, -184)], (0)), 100000000, 0, -183), 0), 100000000, 0, -182), 0, (("set.mli", 307, 11562, 11566), ("set.mli", 307, 11562, 11597), 0), 0, Tag1 ("Stdlib__Set", 45)), 0); (("add_seq", 3833), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 3790)), 0, (0)), 100000000, 0, -181)], (0)), 100000000, 0, -180), (Tag1 (0, (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -179), (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -178), 0), 100000000, 0, -177), 0), 100000000, 0, -176), 0, (("set.mli", 311, 11676, 11680), ("set.mli", 311, 11676, 11713), 0), 0, Tag1 ("Stdlib__Set", 46)), 0); (("of_seq", 3834), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 3790)), 0, (0)), 100000000, 0, -175)], (0)), 100000000, 0, -174), (Tag3 ((("t", 3791)), 0, (0)), 100000000, 0, -173), 0), 100000000, 0, -172), 0, (("set.mli", 315, 11791, 11795), ("set.mli", 315, 11791, 11822), 0), 0, Tag1 ("Stdlib__Set", 47)), 0)]), 0, (("ppx/constraints.ml", 89, 1957, 1957), ("ppx/constraints.ml", 89, 1957, 1997), 0), Tag1 ("Ppx_refl__Constraints", 72)), 0, 0); Tag3 (("Kinds", 3748), 0, (Tag1 ([Tag1 (("property", 3835), (0, 0, 0, 1, ((Tag2 ([(Tag3 (Tag1 (Tag2 ((("PropertyOfSet", 3742)), (("TransferSet", 3747))), "t"), 0, (0)), 100000000, 0, -423); (Tag3 (Tag1 (Tag2 (Tag2 ((("PropertyOfPair", 3745)), Tag2 ((("PropertyOfSet", 3742)), Tag1 (Tag1 ((Tag2 ("Ppx_refl__")), "Common"), "StringSet"))), Tag2 ((("PropertyOfSet", 3742)), Tag1 (Tag1 ((Tag2 ("Ppx_refl__")), "Common"), "LongidentSet"))), "t"), 0, (0)), 100000000, 0, -424)]), 100000000, 0, -422)), 0, 0, 0, 0, (("ppx/constraints.ml", 65, 1407, 1434), ("ppx/constraints.ml", 65, 1407, 1459), 0), 0, 0, 0, Tag1 ("Ppx_refl__Constraints", 62)), 1, 0); (("bottom", 3836), ((Tag3 ((("property", 3835)), 0, (0)), 100000000, 0, -421), 0, (("src/Sigs.ml", 138, 4139, 4141), ("src/Sigs.ml", 138, 4139, 4161), 0), 0, Tag1 ("Fix__Sigs", 29)), 0); (("equal", 3837), ((Tag1 (0, (Tag3 ((("property", 3835)), 0, (0)), 100000000, 0, -420), (Tag1 (0, (Tag3 ((("property", 3835)), 0, (0)), 100000000, 0, -419), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -418), 0), 100000000, 0, -417), 0), 100000000, 0, -416), 0, (("src/Sigs.ml", 143, 4333, 4335), ("src/Sigs.ml", 143, 4333, 4374), 0), 0, Tag1 ("Fix__Sigs", 30)), 0); (("is_maximal", 3838), ((Tag1 (0, (Tag3 ((("property", 3835)), 0, (0)), 100000000, 0, -415), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -414), 0), 100000000, 0, -413), 0, (("src/Sigs.ml", 151, 4789, 4791), ("src/Sigs.ml", 151, 4789, 4823), 0), 0, Tag1 ("Fix__Sigs", 31)), 0); Tag1 (("t", 3839), (0, 0, 0, 1, ((Tag3 ((("property", 3835)), 0, (0)), 100000000, 0, -412)), 0, 0, 0, 0, (("ppx/constraints.ml", 6, 71, 73), ("ppx/constraints.ml", 6, 71, 90), 0), 0, 0, 0, Tag1 ("Ppx_refl__Constraints", 0)), 1, 0); (("union", 3840), ((Tag1 (0, (Tag3 ((("property", 3835)), 0, (0)), 100000000, 0, -411), (Tag1 (0, (Tag3 ((("property", 3835)), 0, (0)), 100000000, 0, -410), (Tag3 ((("property", 3835)), 0, (0)), 100000000, 0, -409), 0), 100000000, 0, -408), 0), 100000000, 0, -407), 0, (("ppx/constraints.ml", 8, 92, 94), ("ppx/constraints.ml", 8, 92, 138), 0), 0, Tag1 ("Ppx_refl__Constraints", 1)), 0); (("to_type", 3841), ((Tag1 (0, (Tag2 ([(Tag3 (Tag1 ((("TransferSet", 3747)), "t"), 0, (0)), 100000000, 0, -403); (Tag2 ([(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppx_refl__")), "Common"), "StringSet"), "t"), 0, (0)), 100000000, 0, -405); (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppx_refl__")), "Common"), "LongidentSet"), "t"), 0, (0)), 100000000, 0, -406)]), 100000000, 0, -404)]), 100000000, 0, -402), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Astlib")), "Ast_500"), "Parsetree"), "core_type"), 0, (0)), 100000000, 0, -401), 0), 100000000, 0, -400), 0, (("ppx/constraints.ml", 96, 2165, 2171), ("ppx/constraints.ml", 96, 2165, 2178), 0), 0, Tag1 ("Ppx_refl__Constraints", 73)), 0)]), 0, (("ppx/constraints.ml", 91, 1999, 1999), ("ppx/constraints.ml", 118, 3007, 3010), 0), Tag1 ("Ppx_refl__Constraints", 87)), 0, 0); Tag3 (("Variables", 3749), 0, (Tag1 ([Tag3 (("Path", 3842), 0, (Tag1 ([Tag3 (("PathItem", 3862), 0, (Tag1 ([Tag1 (("t", 3869), (0, 0, 0, 1, ((Tag2 ([(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppx_refl__")), "Common"), "OrderedLongident"), "t"), 0, (0)), 100000000, 0, -539); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdcompat")), "Int"), "t"), 0, (0)), 100000000, 0, -540)]), 100000000, 0, -538)), 0, 0, 0, 0, (("ppx/constraints.ml", 58, 1212, 1237), ("ppx/constraints.ml", 58, 1212, 1255), 0), 0, 0, 0, Tag1 ("Ppx_refl__Constraints", 42)), 1, 0); (("compare", 3870), ((Tag1 (0, (Tag3 ((("t", 3869)), 0, (0)), 100000000, 0, -537), (Tag1 (0, (Tag3 ((("t", 3869)), 0, (0)), 100000000, 0, -536), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -535), 0), 100000000, 0, -534), 0), 100000000, 0, -533), 0, (("set.mli", 55, 2255, 2259), ("set.mli", 55, 2255, 2286), 0), 0, Tag1 ("Stdlib__Set", 1)), 0)]), 0, (("ppx/constraints.ml", 123, 3062, 3066), ("ppx/constraints.ml", 123, 3062, 3126), 0), Tag1 ("Ppx_refl__Constraints", 88)), 0, 0); Tag1 (("t", 3863), (0, 0, 0, 1, ((Tag2 ([(Tag3 ((("origin", 3865)), 0, (0)), 100000000, 0, -531); (Tag3 ((("selector", 3864)), 0, (0)), 100000000, 0, -532)]), 100000000, 0, -530)), 0, 0, 0, 0, (("ppx/constraints.ml", 125, 3128, 3132), ("ppx/constraints.ml", 125, 3128, 3158), 0), 0, 0, 0, Tag1 ("Ppx_refl__Constraints", 89)), 1, 0); Tag1 (("selector", 3864), (0, 0, Tag1 ([(("Left", 3215), (0), 0, (("ppx/constraints.ml", 127, 3178, 3184), ("ppx/constraints.ml", 127, 3178, 3190), 0), 0, Tag1 ("Ppx_refl__Constraints", 92)); (("Right", 3216), (0), 0, (("ppx/constraints.ml", 128, 3191, 3197), ("ppx/constraints.ml", 128, 3191, 3204), 0), 0, Tag1 ("Ppx_refl__Constraints", 93)); (("Direct", 3217), (0), 0, (("ppx/constraints.ml", 129, 3205, 3211), ("ppx/constraints.ml", 129, 3205, 3219), 0), 0, Tag1 ("Ppx_refl__Constraints", 94))], 0), 1, 0, 0, 0, 0, 0, (("ppx/constraints.ml", 126, 3159, 3163), ("ppx/constraints.ml", 129, 3205, 3219), 0), 0, 1, 0, Tag1 ("Ppx_refl__Constraints", 90)), 2, 0); Tag1 (("origin", 3865), (0, 0, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("PathItem", 3862)), "t"), 0, (0)), 100000000, 0, -529)], (0)), 100000000, 0, -528)), 0, 0, 0, 0, (("ppx/constraints.ml", 130, 3220, 3224), ("ppx/constraints.ml", 130, 3220, 3252), 0), 0, 0, 0, Tag1 ("Ppx_refl__Constraints", 91)), 2, 0); (("left", 3866), ((Tag1 (0, (Tag3 ((("selector", 3864)), 0, (0)), 100000000, 0, -527), (Tag3 ((("selector", 3864)), 0, (0)), 100000000, 0, -526), 0), 100000000, 0, -525), 0, (("ppx/constraints.ml", 132, 3254, 3262), ("ppx/constraints.ml", 132, 3254, 3266), 0), 0, Tag1 ("Ppx_refl__Constraints", 95)), 0); (("right", 3867), ((Tag1 (0, (Tag3 ((("selector", 3864)), 0, (0)), 100000000, 0, -524), (Tag3 ((("selector", 3864)), 0, (0)), 100000000, 0, -523), 0), 100000000, 0, -522), 0, (("ppx/constraints.ml", 138, 3364, 3372), ("ppx/constraints.ml", 138, 3364, 3377), 0), 0, Tag1 ("Ppx_refl__Constraints", 97)), 0); (("compare", 3868), ((Tag1 (0, (Tag3 ((("t", 3863)), 0, (0)), 100000000, 0, -521), (Tag1 (0, (Tag3 ((("t", 3863)), 0, (0)), 100000000, 0, -520), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -519), 0), 100000000, 0, -518), 0), 100000000, 0, -517), 0, (("ppx/constraints.ml", 144, 3475, 3483), ("ppx/constraints.ml", 144, 3475, 3490), 0), 0, Tag1 ("Ppx_refl__Constraints", 99)), 0)]), 0, (("ppx/constraints.ml", 122, 3039, 3041), ("ppx/constraints.ml", 146, 3568, 3573), 0), Tag1 ("Ppx_refl__Constraints", 100)), 0, 0); Tag3 (("PathSet", 3843), 0, (Tag1 ([Tag1 (("elt", 3871), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Path", 3842)), "t"), 0, (0)), 100000000, 0, -768)), 0, 0, 0, 0, (("set.mli", 321, 11945, 11986), ("set.mli", 321, 11945, 12002), 0), 0, 0, 0, Tag1 ("Stdlib__Set", 50)), 1, 0); Tag1 (("t", 3872), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag2 (Tag1 ((Tag2 ("Stdlib__Set")), "Make"), (("Path", 3842))), "t"), 0, (0)), 100000000, 0, -767)), 0, 0, 0, 0, (("set.mli", 74, 2901, 2905), ("set.mli", 74, 2901, 2911), 0), 0, 0, 0, Tag1 ("Stdlib__Set", 4)), 1, 0); (("empty", 3873), ((Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -766), 0, (("set.mli", 77, 2942, 2946), ("set.mli", 77, 2942, 2958), 0), 0, Tag1 ("Stdlib__Set", 5)), 0); (("add", 3874), ((Tag1 (0, (Tag3 ((("elt", 3871)), 0, (0)), 100000000, 0, -765), (Tag1 (0, (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -764), (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -763), 0), 100000000, 0, -762), 0), 100000000, 0, -761), 0, (("set.mli", 80, 2986, 2990), ("set.mli", 80, 2986, 3012), 0), 0, Tag1 ("Stdlib__Set", 6)), 0); (("singleton", 3875), ((Tag1 (0, (Tag3 ((("elt", 3871)), 0, (0)), 100000000, 0, -760), (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -759), 0), 100000000, 0, -758), 0, (("set.mli", 86, 3278, 3282), ("set.mli", 86, 3278, 3305), 0), 0, Tag1 ("Stdlib__Set", 7)), 0); (("remove", 3876), ((Tag1 (0, (Tag3 ((("elt", 3871)), 0, (0)), 100000000, 0, -757), (Tag1 (0, (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -756), (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -755), 0), 100000000, 0, -754), 0), 100000000, 0, -753), 0, (("set.mli", 89, 3381, 3385), ("set.mli", 89, 3381, 3410), 0), 0, Tag1 ("Stdlib__Set", 8)), 0); (("union", 3877), ((Tag1 (0, (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -752), (Tag1 (0, (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -751), (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -750), 0), 100000000, 0, -749), 0), 100000000, 0, -748), 0, (("set.mli", 95, 3677, 3681), ("set.mli", 95, 3677, 3703), 0), 0, Tag1 ("Stdlib__Set", 9)), 0); (("inter", 3878), ((Tag1 (0, (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -747), (Tag1 (0, (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -746), (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -745), 0), 100000000, 0, -744), 0), 100000000, 0, -743), 0, (("set.mli", 98, 3727, 3731), ("set.mli", 98, 3727, 3753), 0), 0, Tag1 ("Stdlib__Set", 10)), 0); (("disjoint", 3879), ((Tag1 (0, (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -742), (Tag1 (0, (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -741), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -740), 0), 100000000, 0, -739), 0), 100000000, 0, -738), 0, (("set.mli", 101, 3784, 3788), ("set.mli", 101, 3784, 3816), 0), 0, Tag1 ("Stdlib__Set", 11)), 0); (("diff", 3880), ((Tag1 (0, (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -737), (Tag1 (0, (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -736), (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -735), 0), 100000000, 0, -734), 0), 100000000, 0, -733), 0, (("set.mli", 105, 3880, 3884), ("set.mli", 105, 3880, 3905), 0), 0, Tag1 ("Stdlib__Set", 12)), 0); (("cardinal", 3881), ((Tag1 (0, (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -732), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -731), 0), 100000000, 0, -730), 0, (("set.mli", 109, 4007, 4011), ("set.mli", 109, 4007, 4033), 0), 0, Tag1 ("Stdlib__Set", 13)), 0); (("elements", 3882), ((Tag1 (0, (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -729), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 3871)), 0, (0)), 100000000, 0, -728)], (0)), 100000000, 0, -727), 0), 100000000, 0, -726), 0, (("set.mli", 114, 4120, 4124), ("set.mli", 114, 4120, 4151), 0), 0, Tag1 ("Stdlib__Set", 14)), 0); (("min_elt", 3883), ((Tag1 (0, (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -725), (Tag3 ((("elt", 3871)), 0, (0)), 100000000, 0, -724), 0), 100000000, 0, -723), 0, (("set.mli", 120, 4380, 4384), ("set.mli", 120, 4380, 4405), 0), 0, Tag1 ("Stdlib__Set", 15)), 0); (("min_elt_opt", 3884), ((Tag1 (0, (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -722), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 3871)), 0, (0)), 100000000, 0, -721)], (0)), 100000000, 0, -720), 0), 100000000, 0, -719), 0, (("set.mli", 125, 4567, 4571), ("set.mli", 125, 4567, 4603), 0), 0, Tag1 ("Stdlib__Set", 16)), 0); (("max_elt", 3885), ((Tag1 (0, (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -718), (Tag3 ((("elt", 3871)), 0, (0)), 100000000, 0, -717), 0), 100000000, 0, -716), 0, (("set.mli", 131, 4774, 4778), ("set.mli", 131, 4774, 4799), 0), 0, Tag1 ("Stdlib__Set", 17)), 0); (("max_elt_opt", 3886), ((Tag1 (0, (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -715), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 3871)), 0, (0)), 100000000, 0, -714)], (0)), 100000000, 0, -713), 0), 100000000, 0, -712), 0, (("set.mli", 135, 4890, 4894), ("set.mli", 135, 4890, 4926), 0), 0, Tag1 ("Stdlib__Set", 18)), 0); (("choose", 3887), ((Tag1 (0, (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -711), (Tag3 ((("elt", 3871)), 0, (0)), 100000000, 0, -710), 0), 100000000, 0, -709), 0, (("set.mli", 140, 5041, 5045), ("set.mli", 140, 5041, 5065), 0), 0, Tag1 ("Stdlib__Set", 19)), 0); (("choose_opt", 3888), ((Tag1 (0, (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -708), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 3871)), 0, (0)), 100000000, 0, -707)], (0)), 100000000, 0, -706), 0), 100000000, 0, -705), 0, (("set.mli", 145, 5263, 5267), ("set.mli", 145, 5263, 5298), 0), 0, Tag1 ("Stdlib__Set", 20)), 0); (("find", 3889), ((Tag1 (0, (Tag3 ((("elt", 3871)), 0, (0)), 100000000, 0, -704), (Tag1 (0, (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -703), (Tag3 ((("elt", 3871)), 0, (0)), 100000000, 0, -702), 0), 100000000, 0, -701), 0), 100000000, 0, -700), 0, (("set.mli", 153, 5541, 5549), ("set.mli", 153, 5541, 5574), 0), 0, Tag1 ("Stdlib__Set", 21)), 0); (("find_opt", 3890), ((Tag1 (0, (Tag3 ((("elt", 3871)), 0, (0)), 100000000, 0, -699), (Tag1 (0, (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -698), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 3871)), 0, (0)), 100000000, 0, -697)], (0)), 100000000, 0, -696), 0), 100000000, 0, -695), 0), 100000000, 0, -694), 0, (("set.mli", 159, 5752, 5756), ("set.mli", 159, 5752, 5792), 0), 0, Tag1 ("Stdlib__Set", 22)), 0); (("find_first", 3891), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 3871)), 0, (0)), 100000000, 0, -693), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -692), 0), 100000000, 0, -691), (Tag1 (0, (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -690), (Tag3 ((("elt", 3871)), 0, (0)), 100000000, 0, -689), 0), 100000000, 0, -688), 0), 100000000, 0, -687), 0, (("set.mli", 165, 5963, 5967), ("set.mli", 165, 5963, 6008), 0), 0, Tag1 ("Stdlib__Set", 23)), 0); (("find_first_opt", 3892), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 3871)), 0, (0)), 100000000, 0, -686), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -685), 0), 100000000, 0, -684), (Tag1 (0, (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -683), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 3871)), 0, (0)), 100000000, 0, -682)], (0)), 100000000, 0, -681), 0), 100000000, 0, -680), 0), 100000000, 0, -679), 0, (("set.mli", 177, 6482, 6486), ("set.mli", 177, 6482, 6538), 0), 0, Tag1 ("Stdlib__Set", 24)), 0); (("find_last", 3893), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 3871)), 0, (0)), 100000000, 0, -678), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -677), 0), 100000000, 0, -676), (Tag1 (0, (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -675), (Tag3 ((("elt", 3871)), 0, (0)), 100000000, 0, -674), 0), 100000000, 0, -673), 0), 100000000, 0, -672), 0, (("set.mli", 184, 6779, 6783), ("set.mli", 184, 6779, 6823), 0), 0, Tag1 ("Stdlib__Set", 25)), 0); (("find_last_opt", 3894), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 3871)), 0, (0)), 100000000, 0, -671), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -670), 0), 100000000, 0, -669), (Tag1 (0, (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -668), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 3871)), 0, (0)), 100000000, 0, -667)], (0)), 100000000, 0, -666), 0), 100000000, 0, -665), 0), 100000000, 0, -664), 0, (("set.mli", 190, 7044, 7048), ("set.mli", 190, 7044, 7099), 0), 0, Tag1 ("Stdlib__Set", 26)), 0); (("iter", 3895), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 3871)), 0, (0)), 100000000, 0, -663), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -662), 0), 100000000, 0, -661), (Tag1 (0, (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -660), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -659), 0), 100000000, 0, -658), 0), 100000000, 0, -657), 0, (("set.mli", 198, 7371, 7375), ("set.mli", 198, 7371, 7411), 0), 0, Tag1 ("Stdlib__Set", 27)), 0); (("fold", 3896), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 3871)), 0, (0)), 100000000, 0, -656), (Tag1 (0, ((("acc")), 100000000, 0, -652), ((("acc")), 100000000, 0, -652), 0), 100000000, 0, -655), 0), 100000000, 0, -654), (Tag1 (0, (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -653), (Tag1 (0, ((("acc")), 100000000, 0, -652), ((("acc")), 100000000, 0, -652), 0), 100000000, 0, -651), 0), 100000000, 0, -650), 0), 100000000, 0, -649), 0, (("set.mli", 203, 7616, 7620), ("set.mli", 203, 7616, 7672), 0), 0, Tag1 ("Stdlib__Set", 28)), 0); (("map", 3897), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 3871)), 0, (0)), 100000000, 0, -648), (Tag3 ((("elt", 3871)), 0, (0)), 100000000, 0, -647), 0), 100000000, 0, -646), (Tag1 (0, (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -645), (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -644), 0), 100000000, 0, -643), 0), 100000000, 0, -642), 0, (("set.mli", 209, 7860, 7864), ("set.mli", 209, 7860, 7895), 0), 0, Tag1 ("Stdlib__Set", 29)), 0); (("filter", 3898), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 3871)), 0, (0)), 100000000, 0, -641), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -640), 0), 100000000, 0, -639), (Tag1 (0, (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -638), (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -637), 0), 100000000, 0, -636), 0), 100000000, 0, -635), 0, (("set.mli", 221, 8372, 8376), ("set.mli", 221, 8372, 8411), 0), 0, Tag1 ("Stdlib__Set", 30)), 0); (("filter_map", 3899), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 3871)), 0, (0)), 100000000, 0, -634), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 3871)), 0, (0)), 100000000, 0, -633)], (0)), 100000000, 0, -632), 0), 100000000, 0, -631), (Tag1 (0, (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -630), (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -629), 0), 100000000, 0, -628), 0), 100000000, 0, -627), 0, (("set.mli", 228, 8710, 8714), ("set.mli", 228, 8710, 8759), 0), 0, Tag1 ("Stdlib__Set", 31)), 0); (("partition", 3900), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 3871)), 0, (0)), 100000000, 0, -626), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -625), 0), 100000000, 0, -624), (Tag1 (0, (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -623), (Tag2 ([(Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -621); (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -622)]), 100000000, 0, -620), 0), 100000000, 0, -619), 0), 100000000, 0, -618), 0, (("set.mli", 243, 9275, 9279), ("set.mli", 243, 9275, 9321), 0), 0, Tag1 ("Stdlib__Set", 32)), 0); (("split", 3901), ((Tag1 (0, (Tag3 ((("elt", 3871)), 0, (0)), 100000000, 0, -617), (Tag1 (0, (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -616), (Tag2 ([(Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -613); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -614); (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -615)]), 100000000, 0, -612), 0), 100000000, 0, -611), 0), 100000000, 0, -610), 0, (("set.mli", 249, 9562, 9566), ("set.mli", 249, 9562, 9601), 0), 0, Tag1 ("Stdlib__Set", 33)), 0); (("is_empty", 3902), ((Tag1 (0, (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -609), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -608), 0), 100000000, 0, -607), 0, (("set.mli", 260, 10020, 10024), ("set.mli", 260, 10020, 10047), 0), 0, Tag1 ("Stdlib__Set", 34)), 0); (("mem", 3903), ((Tag1 (0, (Tag3 ((("elt", 3871)), 0, (0)), 100000000, 0, -606), (Tag1 (0, (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -605), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -604), 0), 100000000, 0, -603), 0), 100000000, 0, -602), 0, (("set.mli", 263, 10096, 10100), ("set.mli", 263, 10096, 10125), 0), 0, Tag1 ("Stdlib__Set", 35)), 0); (("equal", 3904), ((Tag1 (0, (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -601), (Tag1 (0, (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -600), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -599), 0), 100000000, 0, -598), 0), 100000000, 0, -597), 0, (("set.mli", 266, 10190, 10194), ("set.mli", 266, 10190, 10219), 0), 0, Tag1 ("Stdlib__Set", 36)), 0); (("compare", 3905), ((Tag1 (0, (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -596), (Tag1 (0, (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -595), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -594), 0), 100000000, 0, -593), 0), 100000000, 0, -592), 0, (("set.mli", 270, 10335, 10339), ("set.mli", 270, 10335, 10365), 0), 0, Tag1 ("Stdlib__Set", 37)), 0); (("subset", 3906), ((Tag1 (0, (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -591), (Tag1 (0, (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -590), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -589), 0), 100000000, 0, -588), 0), 100000000, 0, -587), 0, (("set.mli", 274, 10476, 10480), ("set.mli", 274, 10476, 10506), 0), 0, Tag1 ("Stdlib__Set", 38)), 0); (("for_all", 3907), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 3871)), 0, (0)), 100000000, 0, -586), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -585), 0), 100000000, 0, -584), (Tag1 (0, (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -583), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -582), 0), 100000000, 0, -581), 0), 100000000, 0, -580), 0, (("set.mli", 278, 10598, 10602), ("set.mli", 278, 10598, 10641), 0), 0, Tag1 ("Stdlib__Set", 39)), 0); (("exists", 3908), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 3871)), 0, (0)), 100000000, 0, -579), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -578), 0), 100000000, 0, -577), (Tag1 (0, (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -576), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -575), 0), 100000000, 0, -574), 0), 100000000, 0, -573), 0, (("set.mli", 282, 10737, 10741), ("set.mli", 282, 10737, 10779), 0), 0, Tag1 ("Stdlib__Set", 40)), 0); (("to_list", 3909), ((Tag1 (0, (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -572), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 3871)), 0, (0)), 100000000, 0, -571)], (0)), 100000000, 0, -570), 0), 100000000, 0, -569), 0, (("set.mli", 288, 10922, 10926), ("set.mli", 288, 10922, 10953), 0), 0, Tag1 ("Stdlib__Set", 41)), 0); (("of_list", 3910), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 3871)), 0, (0)), 100000000, 0, -568)], (0)), 100000000, 0, -567), (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -566), 0), 100000000, 0, -565), 0, (("set.mli", 292, 11017, 11021), ("set.mli", 292, 11017, 11047), 0), 0, Tag1 ("Stdlib__Set", 42)), 0); (("to_seq_from", 3911), ((Tag1 (0, (Tag3 ((("elt", 3871)), 0, (0)), 100000000, 0, -564), (Tag1 (0, (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -563), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 3871)), 0, (0)), 100000000, 0, -562)], (0)), 100000000, 0, -561), 0), 100000000, 0, -560), 0), 100000000, 0, -559), 0, (("set.mli", 298, 11268, 11272), ("set.mli", 298, 11268, 11311), 0), 0, Tag1 ("Stdlib__Set", 43)), 0); (("to_seq", 3912), ((Tag1 (0, (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -558), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 3871)), 0, (0)), 100000000, 0, -557)], (0)), 100000000, 0, -556), 0), 100000000, 0, -555), 0, (("set.mli", 303, 11453, 11457), ("set.mli", 303, 11453, 11484), 0), 0, Tag1 ("Stdlib__Set", 44)), 0); (("to_rev_seq", 3913), ((Tag1 (0, (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -554), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 3871)), 0, (0)), 100000000, 0, -553)], (0)), 100000000, 0, -552), 0), 100000000, 0, -551), 0, (("set.mli", 307, 11562, 11566), ("set.mli", 307, 11562, 11597), 0), 0, Tag1 ("Stdlib__Set", 45)), 0); (("add_seq", 3914), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 3871)), 0, (0)), 100000000, 0, -550)], (0)), 100000000, 0, -549), (Tag1 (0, (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -548), (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -547), 0), 100000000, 0, -546), 0), 100000000, 0, -545), 0, (("set.mli", 311, 11676, 11680), ("set.mli", 311, 11676, 11713), 0), 0, Tag1 ("Stdlib__Set", 46)), 0); (("of_seq", 3915), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 3871)), 0, (0)), 100000000, 0, -544)], (0)), 100000000, 0, -543), (Tag3 ((("t", 3872)), 0, (0)), 100000000, 0, -542), 0), 100000000, 0, -541), 0, (("set.mli", 315, 11791, 11795), ("set.mli", 315, 11791, 11822), 0), 0, Tag1 ("Stdlib__Set", 47)), 0)]), 0, (("ppx/constraints.ml", 148, 3575, 3577), ("ppx/constraints.ml", 148, 3575, 3609), 0), Tag1 ("Ppx_refl__Constraints", 101)), 0, 0); Tag1 (("t", 3844), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppx_refl__")), "Common"), "IntMap"), "t"), [(Tag3 (Tag1 ((("PathSet", 3843)), "t"), 0, (0)), 100000000, 0, -516)], (0)), 100000000, 0, -515)), 0, 0, 0, 0, (("ppx/constraints.ml", 150, 3611, 3613), ("ppx/constraints.ml", 150, 3611, 3640), 0), 0, 0, 0, Tag1 ("Ppx_refl__Constraints", 102)), 1, 0); (("find", 3845), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppx_refl__")), "Common"), "IntMap"), "key"), 0, (0)), 100000000, 0, -514), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppx_refl__")), "Common"), "IntMap"), "t"), [(Tag3 (Tag1 ((("PathSet", 3843)), "t"), 0, (0)), 100000000, 0, -512)], (0)), 100000000, 0, -513), (Tag3 (Tag1 ((("PathSet", 3843)), "t"), 0, (0)), 100000000, 0, -512), 0), 100000000, 0, -511), 0), 100000000, 0, -510), 0, (("ppx/constraints.ml", 152, 3642, 3648), ("ppx/constraints.ml", 152, 3642, 3652), 0), 0, Tag1 ("Ppx_refl__Constraints", 103)), 0); (("add", 3846), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppx_refl__")), "Common"), "IntMap"), "key"), 0, (0)), 100000000, 0, -509), (Tag1 (0, (Tag3 (Tag1 ((("PathSet", 3843)), "elt"), 0, (0)), 100000000, 0, -508), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppx_refl__")), "Common"), "IntMap"), "t"), [(Tag3 (Tag1 ((("PathSet", 3843)), "t"), 0, (0)), 100000000, 0, -506)], (0)), 100000000, 0, -507), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppx_refl__")), "Common"), "IntMap"), "t"), [(Tag3 (Tag1 ((("PathSet", 3843)), "t"), 0, (0)), 100000000, 0, -506)], (0)), 100000000, 0, -505), 0), 100000000, 0, -504), 0), 100000000, 0, -503), 0), 100000000, 0, -502), 0, (("ppx/constraints.ml", 156, 3736, 3742), ("ppx/constraints.ml", 156, 3736, 3745), 0), 0, Tag1 ("Ppx_refl__Constraints", 106)), 0); (("offset", 3847), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppx_refl__")), "Common"), "IntMap"), "key"), 0, (0)), 100000000, 0, -501), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppx_refl__")), "Common"), "IntMap"), "t"), [((0), 100000000, 0, -499)], (0)), 100000000, 0, -500), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppx_refl__")), "Common"), "IntMap"), "t"), [((0), 100000000, 0, -499)], (0)), 100000000, 0, -498), 0), 100000000, 0, -497), 0), 100000000, 0, -496), 0, (("ppx/constraints.ml", 160, 3860, 3866), ("ppx/constraints.ml", 160, 3860, 3872), 0), 0, Tag1 ("Ppx_refl__Constraints", 111)), 0); Tag1 (("property", 3848), (0, 0, 0, 1, ((Tag3 ((("t", 3844)), 0, (0)), 100000000, 0, -495)), 0, 0, 0, 0, (("ppx/constraints.ml", 167, 4047, 4049), ("ppx/constraints.ml", 167, 4047, 4066), 0), 0, 0, 0, Tag1 ("Ppx_refl__Constraints", 117)), 1, 0); (("bottom", 3849), ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppx_refl__")), "Common"), "IntMap"), "t"), [((0), 100000000, 0, -494)], (0)), 100000000, 0, -493), 0, (("ppx/constraints.ml", 169, 4068, 4074), ("ppx/constraints.ml", 169, 4068, 4080), 0), 0, Tag1 ("Ppx_refl__Constraints", 118)), 0); (("equal", 3850), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppx_refl__")), "Common"), "IntMap"), "t"), [(Tag3 (Tag1 ((("PathSet", 3843)), "t"), 0, (0)), 100000000, 0, -491)], (0)), 100000000, 0, -492), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppx_refl__")), "Common"), "IntMap"), "t"), [(Tag3 (Tag1 ((("PathSet", 3843)), "t"), 0, (0)), 100000000, 0, -491)], (0)), 100000000, 0, -490), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -489), 0), 100000000, 0, -488), 0), 100000000, 0, -487), 0, (("ppx/constraints.ml", 171, 4097, 4103), ("ppx/constraints.ml", 171, 4097, 4108), 0), 0, Tag1 ("Ppx_refl__Constraints", 119)), 0); (("union", 3851), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppx_refl__")), "Common"), "IntMap"), "t"), [(Tag3 (Tag1 ((("PathSet", 3843)), "t"), 0, (0)), 100000000, 0, -484)], (0)), 100000000, 0, -486), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppx_refl__")), "Common"), "IntMap"), "t"), [(Tag3 (Tag1 ((("PathSet", 3843)), "t"), 0, (0)), 100000000, 0, -484)], (0)), 100000000, 0, -485), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppx_refl__")), "Common"), "IntMap"), "t"), [(Tag3 (Tag1 ((("PathSet", 3843)), "t"), 0, (0)), 100000000, 0, -484)], (0)), 100000000, 0, -483), 0), 100000000, 0, -482), 0), 100000000, 0, -481), 0, (("ppx/constraints.ml", 174, 4143, 4149), ("ppx/constraints.ml", 174, 4143, 4154), 0), 0, Tag1 ("Ppx_refl__Constraints", 120)), 0); (("is_maximal", 3852), ((Tag1 (0, ((0), 100000000, 0, -480), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -479), 0), 100000000, 0, -478), 0, (("ppx/constraints.ml", 177, 4217, 4223), ("ppx/constraints.ml", 177, 4217, 4233), 0), 0, Tag1 ("Ppx_refl__Constraints", 123)), 0); (("variable_name", 3853), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -477), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -476), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -475), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -474), 0), 100000000, 0, -473), 0), 100000000, 0, -472), 0), 100000000, 0, -471), 0, (("ppx/constraints.ml", 179, 4245, 4251), ("ppx/constraints.ml", 179, 4245, 4264), 0), 0, Tag1 ("Ppx_refl__Constraints", 124)), 0); (("positive_name", 3854), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -470), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -469), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -468), 0), 100000000, 0, -467), 0), 100000000, 0, -466), 0, (("ppx/constraints.ml", 182, 4343, 4349), ("ppx/constraints.ml", 182, 4343, 4362), 0), 0, Tag1 ("Ppx_refl__Constraints", 128)), 0); (("negative_name", 3855), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -465), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -464), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -463), 0), 100000000, 0, -462), 0), 100000000, 0, -461), 0, (("ppx/constraints.ml", 184, 4391, 4397), ("ppx/constraints.ml", 184, 4391, 4410), 0), 0, Tag1 ("Ppx_refl__Constraints", 129)), 0); (("direct_name", 3856), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -460), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -459), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -458), 0), 100000000, 0, -457), 0), 100000000, 0, -456), 0, (("ppx/constraints.ml", 186, 4439, 4445), ("ppx/constraints.ml", 186, 4439, 4456), 0), 0, Tag1 ("Ppx_refl__Constraints", 130)), 0); (("gadt_name", 3857), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -455), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -454), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -453), 0), 100000000, 0, -452), 0), 100000000, 0, -451), 0, (("ppx/constraints.ml", 188, 4483, 4489), ("ppx/constraints.ml", 188, 4483, 4498), 0), 0, Tag1 ("Ppx_refl__Constraints", 131)), 0); Tag1 (("transfer", 3858), (0, 0, Tag1 ([(("Present", 3540), (0), 0, (("ppx/constraints.ml", 191, 4541, 4545), ("ppx/constraints.ml", 191, 4541, 4554), 0), 0, Tag1 ("Ppx_refl__Constraints", 133)); (("Depend", 3541), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -450)], (0)), 100000000, 0, -449)], (0)), 100000000, 0, -448)]), 0, (("ppx/constraints.ml", 192, 4555, 4559), ("ppx/constraints.ml", 192, 4555, 4592), 0), 0, Tag1 ("Ppx_refl__Constraints", 134))], 0), 1, 0, 0, 0, 0, 0, (("ppx/constraints.ml", 190, 4523, 4525), ("ppx/constraints.ml", 192, 4555, 4592), 0), 0, 0, 0, Tag1 ("Ppx_refl__Constraints", 132)), 1, 0); (("make_transfer", 3859), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppx_refl__")), "Common"), "IntMap"), "t"), [(Tag3 (Tag1 ((("PathSet", 3843)), "t"), 0, (0)), 100000000, 0, -447)], (0)), 100000000, 0, -446), (Tag1 (0, (Tag3 (Tag1 ((("Path", 3842)), "selector"), 0, (0)), 100000000, 0, -445), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppx_refl__")), "Common"), "IntMap"), "key"), 0, (0)), 100000000, 0, -444), (Tag3 ((("transfer", 3858)), 0, (0)), 100000000, 0, -443), 0), 100000000, 0, -442), 0), 100000000, 0, -441), 0), 100000000, 0, -440), 0, (("ppx/constraints.ml", 194, 4594, 4600), ("ppx/constraints.ml", 194, 4594, 4613), 0), 0, Tag1 ("Ppx_refl__Constraints", 135)), 0); Tag1 (("transfers", 3860), (0, 0, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -438); (Tag3 ((("transfer", 3858)), 0, (0)), 100000000, 0, -439)]), 100000000, 0, -437)], (0)), 100000000, 0, -436)), 0, 0, 0, 0, (("ppx/constraints.ml", 222, 5668, 5670), ("ppx/constraints.ml", 222, 5668, 5716), 0), 0, 0, 0, Tag1 ("Ppx_refl__Constraints", 155)), 1, 0); (("make_transfers", 3861), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -435), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -434), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppx_refl__")), "Common"), "IntMap"), "t"), [(Tag3 (Tag1 ((("PathSet", 3843)), "t"), 0, (0)), 100000000, 0, -433)], (0)), 100000000, 0, -432), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -430); (Tag3 ((("transfer", 3858)), 0, (0)), 100000000, 0, -431)]), 100000000, 0, -429)], (0)), 100000000, 0, -428), 0), 100000000, 0, -427), 0), 100000000, 0, -426), 0), 100000000, 0, -425), 0, (("ppx/constraints.ml", 224, 5718, 5724), ("ppx/constraints.ml", 224, 5718, 5738), 0), 0, Tag1 ("Ppx_refl__Constraints", 156)), 0)]), 0, (("ppx/constraints.ml", 121, 3013, 3013), ("ppx/constraints.ml", 230, 5999, 6002), 0), Tag1 ("Ppx_refl__Constraints", 164)), 0, 0); Tag1 (("property", 3750), (0, 0, 0, 1, ((Tag2 ([(Tag3 (Tag1 ((("Kinds", 3748)), "t"), 0, (0)), 100000000, 0, -75); (Tag3 (Tag1 ((("Variables", 3749)), "t"), 0, (0)), 100000000, 0, -76)]), 100000000, 0, -74)), 0, 0, 0, 0, (("ppx/constraints.ml", 65, 1407, 1434), ("ppx/constraints.ml", 65, 1407, 1459), 0), 0, 0, 0, Tag1 ("Ppx_refl__Constraints", 62)), 1, 0); (("bottom", 3751), ((Tag3 ((("property", 3750)), 0, (0)), 100000000, 0, -73), 0, (("src/Sigs.ml", 138, 4139, 4141), ("src/Sigs.ml", 138, 4139, 4161), 0), 0, Tag1 ("Fix__Sigs", 29)), 0); (("equal", 3752), ((Tag1 (0, (Tag3 ((("property", 3750)), 0, (0)), 100000000, 0, -72), (Tag1 (0, (Tag3 ((("property", 3750)), 0, (0)), 100000000, 0, -71), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -70), 0), 100000000, 0, -69), 0), 100000000, 0, -68), 0, (("src/Sigs.ml", 143, 4333, 4335), ("src/Sigs.ml", 143, 4333, 4374), 0), 0, Tag1 ("Fix__Sigs", 30)), 0); (("is_maximal", 3753), ((Tag1 (0, (Tag3 ((("property", 3750)), 0, (0)), 100000000, 0, -67), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -66), 0), 100000000, 0, -65), 0, (("src/Sigs.ml", 151, 4789, 4791), ("src/Sigs.ml", 151, 4789, 4823), 0), 0, Tag1 ("Fix__Sigs", 31)), 0); Tag1 (("t", 3754), (0, 0, 0, 1, ((Tag3 ((("property", 3750)), 0, (0)), 100000000, 0, -64)), 0, 0, 0, 0, (("ppx/constraints.ml", 6, 71, 73), ("ppx/constraints.ml", 6, 71, 90), 0), 0, 0, 0, Tag1 ("Ppx_refl__Constraints", 0)), 1, 0); (("union", 3755), ((Tag1 (0, (Tag3 ((("property", 3750)), 0, (0)), 100000000, 0, -63), (Tag1 (0, (Tag3 ((("property", 3750)), 0, (0)), 100000000, 0, -62), (Tag3 ((("property", 3750)), 0, (0)), 100000000, 0, -61), 0), 100000000, 0, -60), 0), 100000000, 0, -59), 0, (("ppx/constraints.ml", 8, 92, 94), ("ppx/constraints.ml", 8, 92, 138), 0), 0, Tag1 ("Ppx_refl__Constraints", 1)), 0); (("add_direct_kind", 3756), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppx_refl__")), "Common"), "StringSet"), "elt"), 0, (0)), 100000000, 0, -58), (Tag1 (0, (Tag2 ([(Tag2 ([((0), 100000000, 0, -49); (Tag2 ([(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppx_refl__")), "Common"), "StringSet"), "t"), 0, (0)), 100000000, 0, -57); ((0), 100000000, 0, -52)]), 100000000, 0, -56)]), 100000000, 0, -55); ((0), 100000000, 0, -53)]), 100000000, 0, -54), (Tag2 ([(Tag2 ([((0), 100000000, 0, -49); (Tag2 ([(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppx_refl__")), "Common"), "StringSet"), "t"), 0, (0)), 100000000, 0, -51); ((0), 100000000, 0, -52)]), 100000000, 0, -50)]), 100000000, 0, -48); ((0), 100000000, 0, -53)]), 100000000, 0, -47), 0), 100000000, 0, -46), 0), 100000000, 0, -45), 0, (("ppx/constraints.ml", 234, 6048, 6052), ("ppx/constraints.ml", 234, 6048, 6067), 0), 0, Tag1 ("Ppx_refl__Constraints", 165)), 0); (("add_inherited_kind", 3757), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppx_refl__")), "Common"), "LongidentSet"), "elt"), 0, (0)), 100000000, 0, -44), (Tag1 (0, (Tag2 ([(Tag2 ([((0), 100000000, 0, -35); (Tag2 ([((0), 100000000, 0, -37); (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppx_refl__")), "Common"), "LongidentSet"), "t"), 0, (0)), 100000000, 0, -43)]), 100000000, 0, -42)]), 100000000, 0, -41); ((0), 100000000, 0, -39)]), 100000000, 0, -40), (Tag2 ([(Tag2 ([((0), 100000000, 0, -35); (Tag2 ([((0), 100000000, 0, -37); (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppx_refl__")), "Common"), "LongidentSet"), "t"), 0, (0)), 100000000, 0, -38)]), 100000000, 0, -36)]), 100000000, 0, -34); ((0), 100000000, 0, -39)]), 100000000, 0, -33), 0), 100000000, 0, -32), 0), 100000000, 0, -31), 0, (("ppx/constraints.ml", 237, 6183, 6187), ("ppx/constraints.ml", 237, 6183, 6205), 0), 0, Tag1 ("Ppx_refl__Constraints", 171)), 0); (("add_exists_kind", 3758), ((Tag1 (0, (Tag3 (Tag1 ((("TransferSet", 3747)), "elt"), 0, (0)), 100000000, 0, -30), (Tag1 (0, (Tag2 ([(Tag2 ([(Tag3 (Tag1 ((("TransferSet", 3747)), "t"), 0, (0)), 100000000, 0, -29); ((0), 100000000, 0, -25)]), 100000000, 0, -28); ((0), 100000000, 0, -26)]), 100000000, 0, -27), (Tag2 ([(Tag2 ([(Tag3 (Tag1 ((("TransferSet", 3747)), "t"), 0, (0)), 100000000, 0, -24); ((0), 100000000, 0, -25)]), 100000000, 0, -23); ((0), 100000000, 0, -26)]), 100000000, 0, -22), 0), 100000000, 0, -21), 0), 100000000, 0, -20), 0, (("ppx/constraints.ml", 240, 6334, 6338), ("ppx/constraints.ml", 240, 6334, 6353), 0), 0, Tag1 ("Ppx_refl__Constraints", 177)), 0); (("add_variable", 3759), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppx_refl__")), "Common"), "IntMap"), "key"), 0, (0)), 100000000, 0, -19), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((("Variables", 3749)), "PathSet"), "elt"), 0, (0)), 100000000, 0, -18), (Tag1 (0, (Tag3 ((("t", 3754)), 0, (0)), 100000000, 0, -17), (Tag2 ([(Tag3 (Tag1 ((("Kinds", 3748)), "t"), 0, (0)), 100000000, 0, -14); (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppx_refl__")), "Common"), "IntMap"), "t"), [(Tag3 (Tag1 (Tag1 ((("Variables", 3749)), "PathSet"), "t"), 0, (0)), 100000000, 0, -16)], (0)), 100000000, 0, -15)]), 100000000, 0, -13), 0), 100000000, 0, -12), 0), 100000000, 0, -11), 0), 100000000, 0, -10), 0, (("ppx/constraints.ml", 243, 6453, 6457), ("ppx/constraints.ml", 243, 6453, 6469), 0), 0, Tag1 ("Ppx_refl__Constraints", 182)), 0); (("offset_variables", 3760), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppx_refl__")), "Common"), "IntMap"), "key"), 0, (0)), 100000000, 0, -9), (Tag1 (0, (Tag3 ((("t", 3754)), 0, (0)), 100000000, 0, -8), (Tag2 ([(Tag3 (Tag1 ((("Kinds", 3748)), "t"), 0, (0)), 100000000, 0, -5); (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppx_refl__")), "Common"), "IntMap"), "t"), [(Tag3 (Tag1 (Tag1 ((("Variables", 3749)), "PathSet"), "t"), 0, (0)), 100000000, 0, -7)], (0)), 100000000, 0, -6)]), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("ppx/constraints.ml", 246, 6561, 6565), ("ppx/constraints.ml", 246, 6561, 6581), 0), 0, Tag1 ("Ppx_refl__Constraints", 187)), 0)], "Ppx_refl__Constraints", [("Ppx_refl__Constraints", ("ewd\196x\144\030\197S\2026\225\251\182\166k")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Types", ("\177\238\029.\220\006\163!\230\015\006\182\133\155\194\166")); ("Type_immediacy", ("\"\127k\011Q\241\211\138\193;8\142\129\141#\251")); ("Subst", ("\021\031\148\223\127\186\189\135\027}\145r\216\143\177\156")); ("Stdppx", ("=:\209>\156\207\149\181\248\131\161P-\254\025q")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__StringLabels", ("\134F\024\226\216Is#\223\230\234\169Z\206Gc")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__StdLabels", (".\193\n\229\139\017\212C-ZA\\kz-\128")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__ListLabels", ("*\194\012\191\020%\170\249m\002\180\178hk\205\220")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int", ("\138\204\199=\014\030\225/?\217\132\209;\235G\145")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Char", ("\1794\1468\190\138\150g\231\240\140d\191.\212e")); ("Stdlib__BytesLabels", ("\145\128\000\239\186Z.\0310^\247\201\174\\\137R")); ("Stdlib__Bytes", ("C\134\194)\175\222\137p\205\246\244\r\241\164P\209")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib__Arg", ("\024%=\206\198p\149Y\007\004\216,&\254#\207")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Stdcompat__stdlib_s", ("?\143\027\238\145\138\139e`\216P\248\156\178=\206")); ("Stdcompat__init", ("r\254q\255\217]\232\239'\192d\165\222\016\157\133")); ("Stdcompat", ("\139\1989\181:\137\230\132\240\223\206\210Y\135S\\")); ("Shape", ("\235\127Y\213\025\137=\244\218\181\248N\189\188\216p")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("Profile", ("\201i\132?<qM\169\011\239@\142\202\182\023,")); ("Primitive", ("}Shh\162\015|\220A\203\249\232\245G\213\019")); ("Ppxlib_traverse_builtins", ("\237\218tx\250&^T{\197#\019<\250_\r")); ("Ppxlib_ast__Versions", ("\005+\189\023\165C\208\138FX6X\224\005\223\t")); ("Ppxlib_ast__Import", ("\027\222\n&\137\144M\230R\150g=Y\198\007\233")); ("Ppxlib_ast__Ast_helper_lite", ("\182\200X/\012\170l3W`\200\143\002`\232\016")); ("Ppxlib_ast__Ast", ("?\026\134=\154d\183u\023\212\177\192\b]\250E")); ("Ppxlib_ast__", ("\182{\159J6;\249\149\208}`\139\002r\020x")); ("Ppxlib_ast", ("\002y:\229,^V\247~U\236~\232\131I\154")); ("Ppxlib__Utils", ("l\219q\2089\252\011\193\194^N&B\192T\223")); ("Ppxlib__Name", ("\202C\151nm\153EG\200\214[;s!)\140")); ("Ppxlib__Longident", ("\236#\230\012\180\203D\156\209\2282-p1H\132")); ("Ppxlib__Location", ("\r\139A\176n\135\029#\213\194&\153}\132\b\193")); ("Ppxlib__Loc", ("\183\208\004g\131\162\223\177\235#:\182\128\020\166\155")); ("Ppxlib__Import", ("\146|\185\205\005c\141\174\165\006\1517\177}\\\241")); ("Ppxlib__Expansion_context", ("\210<\144_\134\203\172\219N:6H\156{\220U")); ("Ppxlib__Common", (">S\244L\148\145\200\134\1298\249\200b\014\193\147")); ("Ppxlib__Code_path", ("\029\211r\143\213`\240\244{Na\007Ii^J")); ("Ppxlib__Attribute", ("\162~~\178\183\027\245`\231\215\181\235qHm\b")); ("Ppxlib__Ast_traverse0", ("r\177\171e\003\155\241]D\149FKy\174\023\225")); ("Ppxlib__Ast_traverse", ("B\b\r\176z\\s\1809\129\156\127?\011Qo")); ("Ppxlib__Ast_pattern_generated", (":\216\170\153\005\218jM\167\138\2111!\b\020K")); ("Ppxlib__Ast_pattern0", ("\255\203\196\229\159\201Q*\230\238\"\198(Q\154\029")); ("Ppxlib__Ast_pattern", ("\023,&Ow\159\019\144Rw\158\143\213Mo\203")); ("Ppxlib__", ("JQ\224\000Y\175_]O\b\254O\194|\017\237")); ("Ppxlib", ("\216\128\187K\006\011\165\149s\168&\180\1515\181\007")); ("Ppx_refl__Common", ("\227D\189]\212B\222w\196\206|h\243\206\134)")); ("Ppx_refl__", ("\216-\189\165\031\139\026L\251\2389?\165\194\n/")); ("Path", ("\012\183\178\025\1298\228*\021r\185\160Y\252\n\026")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Outcometree", ("9\021%\234\211\206\210\004H\165\208\2014\234Q\142")); ("Ocaml_shadow", ("\148\171\169\197\t\188z\207\155\180N\151 \195\173\206")); ("Ocaml_common", ("1\212\195\020\163\232\187\142G\192\221\180@\1278u")); ("Misc", ("*\026\026\234c\191\131\161\\\203\183\012O\252\153\198")); ("Metapp", ("\254\224\156\r\215\168\191$\169\223\161\187\153\000j<")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Load_path", ("\012@\228l\230\164S\172h\1726X\020\252o}")); ("Identifiable", ("\004F\207\014\158GU\001\184\214\187%/#;\211")); ("Ident", ("\b9;!\187.\220\163(x\b\174\\\223\020\004")); ("Fix__Sigs", (")\t\216|\023F\223*n\133c\172iG\005\154")); ("Fix__Set", ("\165F\201b\237\012\240\135\159\197\137i\206u\231\160")); ("Fix__Option", ("\137\176>)\203\250\177\153m\246tB\255\161\031\228")); ("Fix__Core", ("\005\245\172D*!\210i\000o>\171\192\1638\239")); ("Fix__", ("\229-\006A\166\175\208\201Y\246\249k\r\n\155i")); ("Fix", ("\235/M\nO?W\169\030\003\188A:\186\131\162")); ("Env", ("\021\n\181\142x\b\169j\227\"\017\248*\178\245\223")); ("Docstrings", ("\216\171\176\031*\203\162\186%\175\201qq\189\139U")); ("Compmisc", ("B\127\\\174\004T\179\002\242}-C\214\152H*")); ("Cmi_format", ("6\177\bU\139\"\023\152=\249\135\174\b\011Cg")); ("Clflags", ("\162v\193G\199E|\029\023{\b\243]B\144;")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Build_path_prefix_map", ("y\028\167\207D\220\198\216\011\208\172\149\2416\bc")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216")); ("Astlib__Parse", ("\203iQ\135d.\147$\t\207\203C\131\175\193\171")); ("Astlib__Longident", ("\n\192\233\142\177n\225\191\238\161#\150\204n\"Y")); ("Astlib__Location", ("nn\153\250\162\2239\215\129\229e\026xg\000U")); ("Astlib__Ast_501", ("\207\"A\188\024\242Q\223\153\146\239\128\168h\148&")); ("Astlib__Ast_500", ("\202\202\240\178Ep\168 [f\246\t\162T\141\254")); ("Astlib__Ast_414", ("i\179p\208\134r\2177\243\167\157nF\235\143\179")); ("Astlib__Ast_413", ("\240P\019\205\016\157\177\177O)\172\193\028\192\011\190")); ("Astlib__Ast_412", (">\181S\020\t\004\1998\163p\025\210s\216\251\169")); ("Astlib__Ast_411", ("\030\186y\191\005D\180nv\183\b@1\225\168+")); ("Astlib__Ast_410", ("\023\030O]m0\005\214X\n/\226c\201\214\232")); ("Astlib__Ast_409", ("P\147I\234\185H\181\153\207\221\003\165\139\161\150\027")); ("Astlib__Ast_408", ("\225\220%%\162\188\006W\007\252\001X\158\165,\004")); ("Astlib__Ast_407", ("\163\202\2018`\230bGY\138/\021'\148:\018")); ("Astlib__Ast_406", ("v\152\031Q\232\244\141\011p\012\161\164hy\203\151")); ("Astlib__Ast_405", ("\145;\017\238\241\127\173z\138\142Q4>\198\186\207")); ("Astlib__Ast_404", ("I\027\143Zr\250\2468\193\167uOo\029\236\148")); ("Astlib__Ast_403", ("\206M\242\247\155X\251\127\002Ly\024\154\245\153\180")); ("Astlib__Ast_402", ("\178]\161\230\193\144:\005/\\~\127'|\207\189")); ("Astlib__", ("\246\155.n\143$\1435\bi\005\019C\219\191A")); ("Astlib", ("\002*Xp\193\003\201C\234Q\143\029\232\1569\007")); ("Ast_helper", ("\242\224\238/\155\176+\170\014\015\024\006\147\133f1"))], [(0)])
t -> Kinds.t * Variables.PathSet.t Ppx_refl__.Common.IntMap.t

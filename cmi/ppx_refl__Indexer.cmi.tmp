module Make :
  functor (T : Stdcompat.Map.OrderedType) ->
    sig
      type t = { count : int; map : int Stdcompat.Map.Make(T).t; }
      val empty : t
      val of_fresh : int -> t
      val to_map : t -> int Stdcompat.Map.Make(T).t
      val count : t -> int
      val fresh : t -> int * t
      val force_add : T.t -> t -> int * t
      val mem : T.t -> t -> bool
      val find : T.t -> t -> int
      val find_opt : T.t -> t -> int option
      val add : T.t -> t -> int * t
      val of_list : T.t option list -> t
      val union : t -> t -> t("DEBUG:rule", [Tag3 (("Make", 795), 0, (Tag2 (((("T", 796)), (Tag1 (Tag1 ((Tag2 ("Stdcompat")), "Map"), "OrderedType"))), Tag1 ([Tag1 (("t", 797), (0, 0, [[(("count", 554), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -58), (("ppx/indexer.mli", 3, 53, 59), ("ppx/indexer.mli", 3, 53, 71), 0), 0, Tag1 ("Ppx_refl__Indexer", 2)); (("map", 690), 0, (Tag3 (Tag1 (Tag2 (Tag1 (Tag1 ((Tag2 ("Stdcompat")), "Map"), "Make"), (("T", 796))), "t"), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -60)], (0)), 100000000, 0, -59), (("ppx/indexer.mli", 4, 72, 78), ("ppx/indexer.mli", 4, 72, 103), 0), 0, Tag1 ("Ppx_refl__Indexer", 3))]], 1, 0, 0, 0, 0, 0, (("ppx/indexer.mli", 2, 40, 42), ("ppx/indexer.mli", 5, 104, 109), 0), 0, 0, 0, Tag1 ("Ppx_refl__Indexer", 1)), 1, 0); (("empty", 798), ((Tag3 ((("t", 797)), 0, (0)), 100000000, 0, -57), 0, (("ppx/indexer.mli", 7, 111, 113), ("ppx/indexer.mli", 7, 111, 126), 0), 0, Tag1 ("Ppx_refl__Indexer", 4)), 0); (("of_fresh", 799), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -56), (Tag3 ((("t", 797)), 0, (0)), 100000000, 0, -55), 0), 100000000, 0, -54), 0, (("ppx/indexer.mli", 9, 128, 130), ("ppx/indexer.mli", 9, 128, 153), 0), 0, Tag1 ("Ppx_refl__Indexer", 5)), 0); (("to_map", 800), ((Tag1 (0, (Tag3 ((("t", 797)), 0, (0)), 100000000, 0, -53), (Tag3 (Tag1 (Tag2 (Tag1 (Tag1 ((Tag2 ("Stdcompat")), "Map"), "Make"), (("T", 796))), "t"), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -52)], (0)), 100000000, 0, -51), 0), 100000000, 0, -50), 0, (("ppx/indexer.mli", 11, 155, 157), ("ppx/indexer.mli", 11, 155, 193), 0), 0, Tag1 ("Ppx_refl__Indexer", 6)), 0); (("count", 801), ((Tag1 (0, (Tag3 ((("t", 797)), 0, (0)), 100000000, 0, -49), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -48), 0), 100000000, 0, -47), 0, (("ppx/indexer.mli", 13, 195, 197), ("ppx/indexer.mli", 13, 195, 217), 0), 0, Tag1 ("Ppx_refl__Indexer", 7)), 0); (("fresh", 802), ((Tag1 (0, (Tag3 ((("t", 797)), 0, (0)), 100000000, 0, -46), (Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -44); (Tag3 ((("t", 797)), 0, (0)), 100000000, 0, -45)]), 100000000, 0, -43), 0), 100000000, 0, -42), 0, (("ppx/indexer.mli", 15, 219, 221), ("ppx/indexer.mli", 15, 219, 245), 0), 0, Tag1 ("Ppx_refl__Indexer", 8)), 0); (("force_add", 803), ((Tag1 (0, (Tag3 (Tag1 ((("T", 796)), "t"), 0, (0)), 100000000, 0, -41), (Tag1 (0, (Tag3 ((("t", 797)), 0, (0)), 100000000, 0, -40), (Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -38); (Tag3 ((("t", 797)), 0, (0)), 100000000, 0, -39)]), 100000000, 0, -37), 0), 100000000, 0, -36), 0), 100000000, 0, -35), 0, (("ppx/indexer.mli", 17, 247, 249), ("ppx/indexer.mli", 17, 247, 284), 0), 0, Tag1 ("Ppx_refl__Indexer", 9)), 0); (("mem", 804), ((Tag1 (0, (Tag3 (Tag1 ((("T", 796)), "t"), 0, (0)), 100000000, 0, -34), (Tag1 (0, (Tag3 ((("t", 797)), 0, (0)), 100000000, 0, -33), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -32), 0), 100000000, 0, -31), 0), 100000000, 0, -30), 0, (("ppx/indexer.mli", 19, 286, 288), ("ppx/indexer.mli", 19, 286, 314), 0), 0, Tag1 ("Ppx_refl__Indexer", 10)), 0); (("find", 805), ((Tag1 (0, (Tag3 (Tag1 ((("T", 796)), "t"), 0, (0)), 100000000, 0, -29), (Tag1 (0, (Tag3 ((("t", 797)), 0, (0)), 100000000, 0, -28), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -27), 0), 100000000, 0, -26), 0), 100000000, 0, -25), 0, (("ppx/indexer.mli", 21, 316, 318), ("ppx/indexer.mli", 21, 316, 344), 0), 0, Tag1 ("Ppx_refl__Indexer", 11)), 0); (("find_opt", 806), ((Tag1 (0, (Tag3 (Tag1 ((("T", 796)), "t"), 0, (0)), 100000000, 0, -24), (Tag1 (0, (Tag3 ((("t", 797)), 0, (0)), 100000000, 0, -23), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -22)], (0)), 100000000, 0, -21), 0), 100000000, 0, -20), 0), 100000000, 0, -19), 0, (("ppx/indexer.mli", 23, 346, 348), ("ppx/indexer.mli", 23, 346, 385), 0), 0, Tag1 ("Ppx_refl__Indexer", 12)), 0); (("add", 807), ((Tag1 (0, (Tag3 (Tag1 ((("T", 796)), "t"), 0, (0)), 100000000, 0, -18), (Tag1 (0, (Tag3 ((("t", 797)), 0, (0)), 100000000, 0, -17), (Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -15); (Tag3 ((("t", 797)), 0, (0)), 100000000, 0, -16)]), 100000000, 0, -14), 0), 100000000, 0, -13), 0), 100000000, 0, -12), 0, (("ppx/indexer.mli", 25, 387, 389), ("ppx/indexer.mli", 25, 387, 418), 0), 0, Tag1 ("Ppx_refl__Indexer", 13)), 0); (("of_list", 808), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("T", 796)), "t"), 0, (0)), 100000000, 0, -11)], (0)), 100000000, 0, -10)], (0)), 100000000, 0, -9), (Tag3 ((("t", 797)), 0, (0)), 100000000, 0, -8), 0), 100000000, 0, -7), 0, (("ppx/indexer.mli", 27, 420, 422), ("ppx/indexer.mli", 27, 420, 456), 0), 0, Tag1 ("Ppx_refl__Indexer", 14)), 0); (("union", 809), ((Tag1 (0, (Tag3 ((("t", 797)), 0, (0)), 100000000, 0, -6), (Tag1 (0, (Tag3 ((("t", 797)), 0, (0)), 100000000, 0, -5), (Tag3 ((("t", 797)), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("ppx/indexer.mli", 29, 458, 460), ("ppx/indexer.mli", 29, 458, 483), 0), 0, Tag1 ("Ppx_refl__Indexer", 15)), 0)])), 0, (("ppx/indexer.mli", 1, 0, 0), ("ppx/indexer.mli", 30, 484, 487), 0), Tag1 ("Ppx_refl__Indexer", 16)), 0, 0)], "Ppx_refl__Indexer", [("Ppx_refl__Indexer", ("P\029\164A\016\204|\222\247\187_.\"\185\202s")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Stdcompat__stdlib_s", ("?\143\027\238\145\138\139e`\216P\248\156\178=\206")); ("Stdcompat__init", ("r\254q\255\217]\232\239'\192d\165\222\016\157\133")); ("Stdcompat", ("\139\1989\181:\137\230\132\240\223\206\210Y\135S\\")); ("Ppx_refl__", ("\216-\189\165\031\139\026L\251\2389?\165\194\n/")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

    end

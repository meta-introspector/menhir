type t =
    Parse_error of Parsexp__.Parse_error.t
  | Of_sexp_error of Parsexp__.Of_sexp_error.t
val sexp_of_t : t -> Sexplib0.Sexp.t
("DEBUG:rule", [Tag1 (("t", 591), (0, 0, Tag1 ([(("Parse_error", 368), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Parsexp__")), "Parse_error"), "t"), 0, (0)), 100000000, 0, -12)]), 0, (("src/conv_error.mli", 4, 23, 25), ("src/conv_error.mli", 4, 23, 55), 0), 0, Tag1 ("Parsexp__Conv_error", 1)); (("Of_sexp_error", 376), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Parsexp__")), "Of_sexp_error"), "t"), 0, (0)), 100000000, 0, -13)]), 0, (("src/conv_error.mli", 5, 56, 58), ("src/conv_error.mli", 5, 56, 92), 0), 0, Tag1 ("Parsexp__Conv_error", 2))], 0), 1, 0, 0, 0, 0, 0, (("src/conv_error.mli", 3, 14, 14), ("src/conv_error.mli", 6, 93, 120), 0), [(("deriving_inline", (("src/conv_error.mli", 6, 93, 96), ("src/conv_error.mli", 6, 93, 111), 0)), ([([(((("sexp_of"), (("src/conv_error.mli", 6, 93, 112), ("src/conv_error.mli", 6, 93, 119), 0))), (("src/conv_error.mli", 6, 93, 112), ("src/conv_error.mli", 6, 93, 119), 0), 0, 0)], (("src/conv_error.mli", 6, 93, 112), ("src/conv_error.mli", 6, 93, 119), 0))]), (("src/conv_error.mli", 6, 93, 93), ("src/conv_error.mli", 6, 93, 120), 0))], 0, 0, Tag1 ("Parsexp__Conv_error", 0)), 1, 0); (("sexp_of_t", 592), ((Tag1 (0, (Tag3 ((("t", 591)), 0, (0)), 100000000, 0, -11), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -10), 0), 100000000, 0, -9), 0, (("src/conv_error.mli", 11, 162, 164), ("src/conv_error.mli", 11, 162, 200), 0), 0, Tag1 ("Parsexp__Conv_error", 3)), 0); (("report", 593), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -8), (Tag1 (("filename"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -7), (Tag1 (0, (Tag3 ((("t", 591)), 0, (0)), 100000000, 0, -6), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/conv_error.mli", 18, 279, 279), ("src/conv_error.mli", 18, 279, 340), 0), 0, Tag1 ("Parsexp__Conv_error", 4)), 0)], "Parsexp__Conv_error", [("Parsexp__Conv_error", ("\195Bo\140A|\220\136\210\137\165&!\164\134\021")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("Parsexp__Positions", ("BE\135\222xW\224\233\184\004o\169\248\bH\230")); ("Parsexp__Parse_error_intf", ("\011\229\182\179W\161\176\160P\249\165\214ef\011\229")); ("Parsexp__Parse_error", ("*\031\166\142M\171\026\030\\K7\157Y\232\208\234")); ("Parsexp__Of_sexp_error", ("\253\171Y\150\210\218\191\255\160\211\134d/l\132\228")); ("Parsexp__Import", ("\017\029\157\225\239\135p*0\207\146\197\020\128\195!")); ("Parsexp__", ("\182\180\203\030\218\020\246\196\221\171_\030GE\171\192")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
val report : Format.formatter -> filename:string -> t -> unit

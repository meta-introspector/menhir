type 'a or_anti = QExpr of 'a | QAnti of Names.Id.t CAst.t
type reference_r = QReference of Libnames.qualid | QHypothesis of Names.Id.t
type reference = reference_r CAst.t
type quantified_hypothesis =
    QAnonHyp of int CAst.t
  | QNamedHyp of Names.Id.t CAst.t
type bindings_r =
    QImplicitBindings of Constrexpr.constr_expr list
  | QExplicitBindings of
      (quantified_hypothesis CAst.t or_anti * Constrexpr.constr_expr) CAst.t
      list
  | QNoBindings
type bindings = bindings_r CAst.t
type intro_pattern_r =
    QIntroForthcoming of bool
  | QIntroNaming of intro_pattern_naming
  | QIntroAction of intro_pattern_action
and intro_pattern_naming_r =
    QIntroIdentifier of Names.Id.t CAst.t or_anti
  | QIntroFresh of Names.Id.t CAst.t or_anti
  | QIntroAnonymous
and intro_pattern_action_r =
    QIntroWildcard
  | QIntroOrAndPattern of or_and_intro_pattern
  | QIntroInjection of intro_pattern list CAst.t
  | QIntroRewrite of bool
and or_and_intro_pattern_r =
    QIntroOrPattern of intro_pattern list CAst.t list
  | QIntroAndPattern of intro_pattern list CAst.t
and intro_pattern = intro_pattern_r CAst.t
and intro_pattern_naming = intro_pattern_naming_r CAst.t
and intro_pattern_action = intro_pattern_action_r CAst.t
and or_and_intro_pattern = or_and_intro_pattern_r CAst.t
type occurrences_r =
    QAllOccurrences
  | QAllOccurrencesBut of int CAst.t or_anti list
  | QNoOccurrences
  | QOnlyOccurrences of int CAst.t or_anti list
type occurrences = occurrences_r CAst.t
type hyp_location =
    (occurrences * Names.Id.t CAst.t or_anti) * Locus.hyp_location_flag
type clause_r = {
  q_onhyps : hyp_location list option;
  q_concl_occs : occurrences;
}
type clause = clause_r CAst.t
type constr_with_bindings = (Constrexpr.constr_expr * bindings) CAst.t
type destruction_arg_r =
    QElimOnConstr of constr_with_bindings
  | QElimOnIdent of Names.Id.t CAst.t
  | QElimOnAnonHyp of int CAst.t
type destruction_arg = destruction_arg_r CAst.t
type induction_clause_r = {
  indcl_arg : destruction_arg;
  indcl_eqn : intro_pattern_naming option;
  indcl_as : or_and_intro_pattern option;
  indcl_in : clause option;
}
type induction_clause = induction_clause_r CAst.t
type conversion_r =
    QConvert of Constrexpr.constr_expr
  | QConvertWith of Constrexpr.constr_expr * Constrexpr.constr_expr
type conversion = conversion_r CAst.t
type multi_r =
    QPrecisely of int CAst.t
  | QUpTo of int CAst.t
  | QRepeatStar
  | QRepeatPlus
type multi = multi_r CAst.t
type rewriting_r = {
  rew_orient : bool option CAst.t;
  rew_repeat : multi;
  rew_equatn : constr_with_bindings;
}
type rewriting = rewriting_r CAst.t
type dispatch_r =
    Ltac2_plugin.Tac2expr.raw_tacexpr option list *
    (Ltac2_plugin.Tac2expr.raw_tacexpr option *
     Ltac2_plugin.Tac2expr.raw_tacexpr option list)
    option
type dispatch = dispatch_r CAst.t
type red_flag_r =
    QBeta
  | QIota
  | QMatch
  | QFix
  | QCofix
  | QZeta
  | QConst of reference or_anti list CAst.t
  | QDeltaBut of reference or_anti list CAst.t
type red_flag = red_flag_r CAst.t
type strategy_flag = red_flag list CAst.t
type constr_match_pattern_r =
    QConstrMatchPattern of Constrexpr.constr_expr
  | QConstrMatchContext of Names.Id.t option * Constrexpr.constr_expr
type constr_match_pattern = constr_match_pattern_r CAst.t
type constr_match_branch =
    (constr_match_pattern * Ltac2_plugin.Tac2expr.raw_tacexpr) CAst.t
type constr_matching = constr_match_branch list CAst.t
type goal_match_pattern_r = {
  q_goal_match_concl : constr_match_pattern;
  q_goal_match_hyps :
    (Names.lname * constr_match_pattern option * constr_match_pattern) list;
}
type goal_match_pattern = goal_match_pattern_r CAst.t
type goal_match_branch =
    (goal_match_pattern * Ltac2_plugin.Tac2expr.raw_tacexpr) CAst.t
type goal_matching = goal_match_branch list CAst.t
type hintdb_r = QHintAll | QHintDbs of Names.Id.t CAst.t or_anti list
type hintdb = hintdb_r CAst.t
type move_location_r =
    QMoveAfter of Names.Id.t CAst.t or_anti
  | QMoveBefore of Names.Id.t CAst.t or_anti
  | QMoveFirst
  | QMoveLast
type move_location = move_location_r CAst.t
type pose =
    (Names.Id.t CAst.t or_anti option * Constrexpr.constr_expr) CAst.t
type assertion_r =
    QAssertType of intro_pattern option * Constrexpr.constr_expr *
      Ltac2_plugin.Tac2expr.raw_tacexpr option
  | QAssertValue of Names.Id.t CAst.t or_anti * Constrexpr.constr_expr
("DEBUG:rule", [Tag1 (("or_anti", 706), ([((("a")), 100000000, 0, -198)], 1, Tag1 ([(("QExpr", 417), ([((("a")), 100000000, 0, -198)]), 0, (("plugins/ltac2/tac2qexpr.mli", 18, 868, 868), ("plugins/ltac2/tac2qexpr.mli", 18, 868, 881), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 1)); (("QAnti", 418), ([(Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -200)], (0)), 100000000, 0, -199)]), 0, (("plugins/ltac2/tac2qexpr.mli", 19, 882, 882), ("plugins/ltac2/tac2qexpr.mli", 19, 882, 904), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 2))], 0), 1, 0, [25], [0], 0, 0, (("plugins/ltac2/tac2qexpr.mli", 17, 850, 850), ("plugins/ltac2/tac2qexpr.mli", 19, 882, 904), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 0)), 1, 0); Tag1 (("reference_r", 707), (0, 0, Tag1 ([(("QReference", 445), ([(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -196)]), 0, (("plugins/ltac2/tac2qexpr.mli", 22, 925, 925), ("plugins/ltac2/tac2qexpr.mli", 22, 925, 956), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 4)); (("QHypothesis", 487), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -197)]), 0, (("plugins/ltac2/tac2qexpr.mli", 23, 957, 957), ("plugins/ltac2/tac2qexpr.mli", 23, 957, 978), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 5))], 0), 1, 0, 0, 0, 0, 0, (("plugins/ltac2/tac2qexpr.mli", 21, 906, 906), ("plugins/ltac2/tac2qexpr.mli", 23, 957, 978), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 3)), 1, 0); Tag1 (("reference", 708), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((("reference_r", 707)), 0, (0)), 100000000, 0, -195)], (0)), 100000000, 0, -194)), 0, 0, 0, 0, (("plugins/ltac2/tac2qexpr.mli", 25, 980, 980), ("plugins/ltac2/tac2qexpr.mli", 25, 980, 1015), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 6)), 1, 0); Tag1 (("quantified_hypothesis", 709), (0, 0, Tag1 ([(("QAnonHyp", 490), ([(Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -191)], (0)), 100000000, 0, -190)]), 0, (("plugins/ltac2/tac2qexpr.mli", 28, 1046, 1046), ("plugins/ltac2/tac2qexpr.mli", 28, 1046, 1070), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 8)); (("QNamedHyp", 491), ([(Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -193)], (0)), 100000000, 0, -192)]), 0, (("plugins/ltac2/tac2qexpr.mli", 29, 1071, 1071), ("plugins/ltac2/tac2qexpr.mli", 29, 1071, 1097), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 9))], 0), 1, 0, 0, 0, 0, 0, (("plugins/ltac2/tac2qexpr.mli", 27, 1017, 1017), ("plugins/ltac2/tac2qexpr.mli", 29, 1071, 1097), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 7)), 1, 0); Tag1 (("bindings_r", 710), (0, 0, Tag1 ([(("QImplicitBindings", 493), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -182)], (0)), 100000000, 0, -181)]), 0, (("plugins/ltac2/tac2qexpr.mli", 32, 1117, 1117), ("plugins/ltac2/tac2qexpr.mli", 32, 1117, 1167), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 11)); (("QExplicitBindings", 538), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag2 ([(Tag3 ((("or_anti", 706)), [(Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((("quantified_hypothesis", 709)), 0, (0)), 100000000, 0, -188)], (0)), 100000000, 0, -187)], (0)), 100000000, 0, -186); (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -189)]), 100000000, 0, -185)], (0)), 100000000, 0, -184)], (0)), 100000000, 0, -183)]), 0, (("plugins/ltac2/tac2qexpr.mli", 33, 1168, 1168), ("plugins/ltac2/tac2qexpr.mli", 33, 1168, 1266), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 12)); (("QNoBindings", 539), (0), 0, (("plugins/ltac2/tac2qexpr.mli", 34, 1267, 1267), ("plugins/ltac2/tac2qexpr.mli", 34, 1267, 1280), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 13))], 0), 1, 0, 0, 0, 0, 0, (("plugins/ltac2/tac2qexpr.mli", 31, 1099, 1099), ("plugins/ltac2/tac2qexpr.mli", 34, 1267, 1280), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 10)), 1, 0); Tag1 (("bindings", 711), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((("bindings_r", 710)), 0, (0)), 100000000, 0, -180)], (0)), 100000000, 0, -179)), 0, 0, 0, 0, (("plugins/ltac2/tac2qexpr.mli", 36, 1282, 1282), ("plugins/ltac2/tac2qexpr.mli", 36, 1282, 1315), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 14)), 1, 0); Tag1 (("intro_pattern_r", 712), (0, 0, Tag1 ([(("QIntroForthcoming", 549), ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -176)]), 0, (("plugins/ltac2/tac2qexpr.mli", 39, 1340, 1340), ("plugins/ltac2/tac2qexpr.mli", 39, 1340, 1367), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 23)); (("QIntroNaming", 550), ([(Tag3 ((("intro_pattern_naming", 717)), 0, (0)), 100000000, 0, -177)]), 0, (("plugins/ltac2/tac2qexpr.mli", 40, 1368, 1368), ("plugins/ltac2/tac2qexpr.mli", 40, 1368, 1406), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 24)); (("QIntroAction", 551), ([(Tag3 ((("intro_pattern_action", 718)), 0, (0)), 100000000, 0, -178)]), 0, (("plugins/ltac2/tac2qexpr.mli", 41, 1407, 1407), ("plugins/ltac2/tac2qexpr.mli", 41, 1407, 1445), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 25))], 0), 1, 0, 0, 0, 0, 0, (("plugins/ltac2/tac2qexpr.mli", 38, 1317, 1317), ("plugins/ltac2/tac2qexpr.mli", 41, 1407, 1445), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 15)), 1, 0); Tag1 (("intro_pattern_naming_r", 713), (0, 0, Tag1 ([(("QIntroIdentifier", 552), ([(Tag3 ((("or_anti", 706)), [(Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -172)], (0)), 100000000, 0, -171)], (0)), 100000000, 0, -170)]), 0, (("plugins/ltac2/tac2qexpr.mli", 43, 1475, 1475), ("plugins/ltac2/tac2qexpr.mli", 43, 1475, 1516), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 26)); (("QIntroFresh", 553), ([(Tag3 ((("or_anti", 706)), [(Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -175)], (0)), 100000000, 0, -174)], (0)), 100000000, 0, -173)]), 0, (("plugins/ltac2/tac2qexpr.mli", 44, 1517, 1517), ("plugins/ltac2/tac2qexpr.mli", 44, 1517, 1553), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 27)); (("QIntroAnonymous", 554), (0), 0, (("plugins/ltac2/tac2qexpr.mli", 45, 1554, 1554), ("plugins/ltac2/tac2qexpr.mli", 45, 1554, 1571), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 28))], 0), 1, 0, 0, 0, 0, 0, (("plugins/ltac2/tac2qexpr.mli", 42, 1446, 1446), ("plugins/ltac2/tac2qexpr.mli", 45, 1554, 1571), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 16)), 2, 0); Tag1 (("intro_pattern_action_r", 714), (0, 0, Tag1 ([(("QIntroWildcard", 555), (0), 0, (("plugins/ltac2/tac2qexpr.mli", 47, 1601, 1601), ("plugins/ltac2/tac2qexpr.mli", 47, 1601, 1617), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 29)); (("QIntroOrAndPattern", 556), ([(Tag3 ((("or_and_intro_pattern", 719)), 0, (0)), 100000000, 0, -165)]), 0, (("plugins/ltac2/tac2qexpr.mli", 48, 1618, 1618), ("plugins/ltac2/tac2qexpr.mli", 48, 1618, 1662), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 30)); (("QIntroInjection", 557), ([(Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("intro_pattern", 716)), 0, (0)), 100000000, 0, -168)], (0)), 100000000, 0, -167)], (0)), 100000000, 0, -166)]), 0, (("plugins/ltac2/tac2qexpr.mli", 49, 1663, 1663), ("plugins/ltac2/tac2qexpr.mli", 49, 1663, 1709), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 31)); (("QIntroRewrite", 558), ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -169)]), 0, (("plugins/ltac2/tac2qexpr.mli", 51, 1770, 1770), ("plugins/ltac2/tac2qexpr.mli", 51, 1770, 1793), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 32))], 0), 1, 0, 0, 0, 0, 0, (("plugins/ltac2/tac2qexpr.mli", 46, 1572, 1572), ("plugins/ltac2/tac2qexpr.mli", 51, 1770, 1793), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 17)), 2, 0); Tag1 (("or_and_intro_pattern_r", 715), (0, 0, Tag1 ([(("QIntroOrPattern", 559), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("intro_pattern", 716)), 0, (0)), 100000000, 0, -161)], (0)), 100000000, 0, -160)], (0)), 100000000, 0, -159)], (0)), 100000000, 0, -158)]), 0, (("plugins/ltac2/tac2qexpr.mli", 53, 1823, 1823), ("plugins/ltac2/tac2qexpr.mli", 53, 1823, 1874), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 33)); (("QIntroAndPattern", 560), ([(Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("intro_pattern", 716)), 0, (0)), 100000000, 0, -164)], (0)), 100000000, 0, -163)], (0)), 100000000, 0, -162)]), 0, (("plugins/ltac2/tac2qexpr.mli", 54, 1875, 1875), ("plugins/ltac2/tac2qexpr.mli", 54, 1875, 1922), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 34))], 0), 1, 0, 0, 0, 0, 0, (("plugins/ltac2/tac2qexpr.mli", 52, 1794, 1794), ("plugins/ltac2/tac2qexpr.mli", 54, 1875, 1922), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 18)), 2, 0); Tag1 (("intro_pattern", 716), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((("intro_pattern_r", 712)), 0, (0)), 100000000, 0, -157)], (0)), 100000000, 0, -156)), 0, 0, 0, 0, (("plugins/ltac2/tac2qexpr.mli", 56, 1924, 1924), ("plugins/ltac2/tac2qexpr.mli", 56, 1924, 1966), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 19)), 2, 0); Tag1 (("intro_pattern_naming", 717), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((("intro_pattern_naming_r", 713)), 0, (0)), 100000000, 0, -155)], (0)), 100000000, 0, -154)), 0, 0, 0, 0, (("plugins/ltac2/tac2qexpr.mli", 57, 1967, 1967), ("plugins/ltac2/tac2qexpr.mli", 57, 1967, 2023), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 20)), 2, 0); Tag1 (("intro_pattern_action", 718), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((("intro_pattern_action_r", 714)), 0, (0)), 100000000, 0, -153)], (0)), 100000000, 0, -152)), 0, 0, 0, 0, (("plugins/ltac2/tac2qexpr.mli", 58, 2024, 2024), ("plugins/ltac2/tac2qexpr.mli", 58, 2024, 2080), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 21)), 2, 0); Tag1 (("or_and_intro_pattern", 719), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((("or_and_intro_pattern_r", 715)), 0, (0)), 100000000, 0, -151)], (0)), 100000000, 0, -150)), 0, 0, 0, 0, (("plugins/ltac2/tac2qexpr.mli", 59, 2081, 2081), ("plugins/ltac2/tac2qexpr.mli", 59, 2081, 2137), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 22)), 2, 0); Tag1 (("occurrences_r", 720), (0, 0, Tag1 ([(("QAllOccurrences", 562), (0), 0, (("plugins/ltac2/tac2qexpr.mli", 62, 2160, 2160), ("plugins/ltac2/tac2qexpr.mli", 62, 2160, 2177), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 36)); (("QAllOccurrencesBut", 563), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("or_anti", 706)), [(Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -145)], (0)), 100000000, 0, -144)], (0)), 100000000, 0, -143)], (0)), 100000000, 0, -142)]), 0, (("plugins/ltac2/tac2qexpr.mli", 63, 2178, 2178), ("plugins/ltac2/tac2qexpr.mli", 63, 2178, 2225), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 37)); (("QNoOccurrences", 564), (0), 0, (("plugins/ltac2/tac2qexpr.mli", 64, 2226, 2226), ("plugins/ltac2/tac2qexpr.mli", 64, 2226, 2242), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 38)); (("QOnlyOccurrences", 565), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("or_anti", 706)), [(Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -149)], (0)), 100000000, 0, -148)], (0)), 100000000, 0, -147)], (0)), 100000000, 0, -146)]), 0, (("plugins/ltac2/tac2qexpr.mli", 65, 2243, 2243), ("plugins/ltac2/tac2qexpr.mli", 65, 2243, 2288), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 39))], 0), 1, 0, 0, 0, 0, 0, (("plugins/ltac2/tac2qexpr.mli", 61, 2139, 2139), ("plugins/ltac2/tac2qexpr.mli", 65, 2243, 2288), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 35)), 1, 0); Tag1 (("occurrences", 721), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((("occurrences_r", 720)), 0, (0)), 100000000, 0, -141)], (0)), 100000000, 0, -140)), 0, 0, 0, 0, (("plugins/ltac2/tac2qexpr.mli", 67, 2290, 2290), ("plugins/ltac2/tac2qexpr.mli", 67, 2290, 2329), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 40)), 1, 0); Tag1 (("hyp_location", 722), (0, 0, 0, 1, ((Tag2 ([(Tag2 ([(Tag3 ((("occurrences", 721)), 0, (0)), 100000000, 0, -135); (Tag3 ((("or_anti", 706)), [(Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -138)], (0)), 100000000, 0, -137)], (0)), 100000000, 0, -136)]), 100000000, 0, -134); (Tag3 (Tag1 ((Tag2 ("Locus")), "hyp_location_flag"), 0, (0)), 100000000, 0, -139)]), 100000000, 0, -133)), 0, 0, 0, 0, (("plugins/ltac2/tac2qexpr.mli", 69, 2331, 2331), ("plugins/ltac2/tac2qexpr.mli", 69, 2331, 2412), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 41)), 1, 0); Tag1 (("clause_r", 723), (0, 0, [[(("q_onhyps", 584), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("hyp_location", 722)), 0, (0)), 100000000, 0, -131)], (0)), 100000000, 0, -130)], (0)), 100000000, 0, -129), (("plugins/ltac2/tac2qexpr.mli", 72, 2430, 2434), ("plugins/ltac2/tac2qexpr.mli", 72, 2430, 2470), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 43)); (("q_concl_occs", 585), 0, (Tag3 ((("occurrences", 721)), 0, (0)), 100000000, 0, -132), (("plugins/ltac2/tac2qexpr.mli", 72, 2430, 2471), ("plugins/ltac2/tac2qexpr.mli", 72, 2430, 2498), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 44))]], 1, 0, 0, 0, 0, 0, (("plugins/ltac2/tac2qexpr.mli", 71, 2414, 2414), ("plugins/ltac2/tac2qexpr.mli", 72, 2430, 2500), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 42)), 1, 0); Tag1 (("clause", 724), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((("clause_r", 723)), 0, (0)), 100000000, 0, -128)], (0)), 100000000, 0, -127)), 0, 0, 0, 0, (("plugins/ltac2/tac2qexpr.mli", 74, 2502, 2502), ("plugins/ltac2/tac2qexpr.mli", 74, 2502, 2531), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 45)), 1, 0); Tag1 (("constr_with_bindings", 725), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -125); (Tag3 ((("bindings", 711)), 0, (0)), 100000000, 0, -126)]), 100000000, 0, -124)], (0)), 100000000, 0, -123)), 0, 0, 0, 0, (("plugins/ltac2/tac2qexpr.mli", 76, 2533, 2533), ("plugins/ltac2/tac2qexpr.mli", 76, 2533, 2603), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 46)), 1, 0); Tag1 (("destruction_arg_r", 726), (0, 0, Tag1 ([(("QElimOnConstr", 589), ([(Tag3 ((("constr_with_bindings", 725)), 0, (0)), 100000000, 0, -118)]), 0, (("plugins/ltac2/tac2qexpr.mli", 79, 2630, 2630), ("plugins/ltac2/tac2qexpr.mli", 79, 2630, 2669), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 48)); (("QElimOnIdent", 590), ([(Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -120)], (0)), 100000000, 0, -119)]), 0, (("plugins/ltac2/tac2qexpr.mli", 80, 2670, 2670), ("plugins/ltac2/tac2qexpr.mli", 80, 2670, 2699), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 49)); (("QElimOnAnonHyp", 591), ([(Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -122)], (0)), 100000000, 0, -121)]), 0, (("plugins/ltac2/tac2qexpr.mli", 81, 2700, 2700), ("plugins/ltac2/tac2qexpr.mli", 81, 2700, 2730), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 50))], 0), 1, 0, 0, 0, 0, 0, (("plugins/ltac2/tac2qexpr.mli", 78, 2605, 2605), ("plugins/ltac2/tac2qexpr.mli", 81, 2700, 2730), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 47)), 1, 0); Tag1 (("destruction_arg", 727), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((("destruction_arg_r", 726)), 0, (0)), 100000000, 0, -117)], (0)), 100000000, 0, -116)), 0, 0, 0, 0, (("plugins/ltac2/tac2qexpr.mli", 83, 2732, 2732), ("plugins/ltac2/tac2qexpr.mli", 83, 2732, 2779), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 51)), 1, 0); Tag1 (("induction_clause_r", 728), (0, 0, [[(("indcl_arg", 594), 0, (Tag3 ((("destruction_arg", 727)), 0, (0)), 100000000, 0, -109), (("plugins/ltac2/tac2qexpr.mli", 86, 2809, 2811), ("plugins/ltac2/tac2qexpr.mli", 86, 2809, 2839), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 53)); (("indcl_eqn", 595), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("intro_pattern_naming", 717)), 0, (0)), 100000000, 0, -111)], (0)), 100000000, 0, -110), (("plugins/ltac2/tac2qexpr.mli", 87, 2840, 2842), ("plugins/ltac2/tac2qexpr.mli", 87, 2840, 2882), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 54)); (("indcl_as", 596), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("or_and_intro_pattern", 719)), 0, (0)), 100000000, 0, -113)], (0)), 100000000, 0, -112), (("plugins/ltac2/tac2qexpr.mli", 88, 2883, 2885), ("plugins/ltac2/tac2qexpr.mli", 88, 2883, 2924), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 55)); (("indcl_in", 597), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("clause", 724)), 0, (0)), 100000000, 0, -115)], (0)), 100000000, 0, -114), (("plugins/ltac2/tac2qexpr.mli", 89, 2925, 2927), ("plugins/ltac2/tac2qexpr.mli", 89, 2925, 2952), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 56))]], 1, 0, 0, 0, 0, 0, (("plugins/ltac2/tac2qexpr.mli", 85, 2781, 2781), ("plugins/ltac2/tac2qexpr.mli", 90, 2953, 2954), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 52)), 1, 0); Tag1 (("induction_clause", 729), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((("induction_clause_r", 728)), 0, (0)), 100000000, 0, -108)], (0)), 100000000, 0, -107)), 0, 0, 0, 0, (("plugins/ltac2/tac2qexpr.mli", 92, 2956, 2956), ("plugins/ltac2/tac2qexpr.mli", 92, 2956, 3005), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 57)), 1, 0); Tag1 (("conversion_r", 730), (0, 0, Tag1 ([(("QConvert", 600), ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -104)]), 0, (("plugins/ltac2/tac2qexpr.mli", 95, 3027, 3027), ("plugins/ltac2/tac2qexpr.mli", 95, 3027, 3063), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 59)); (("QConvertWith", 601), ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -105); (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -106)]), 0, (("plugins/ltac2/tac2qexpr.mli", 96, 3064, 3064), ("plugins/ltac2/tac2qexpr.mli", 96, 3064, 3129), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 60))], 0), 1, 0, 0, 0, 0, 0, (("plugins/ltac2/tac2qexpr.mli", 94, 3007, 3007), ("plugins/ltac2/tac2qexpr.mli", 96, 3064, 3129), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 58)), 1, 0); Tag1 (("conversion", 731), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((("conversion_r", 730)), 0, (0)), 100000000, 0, -103)], (0)), 100000000, 0, -102)), 0, 0, 0, 0, (("plugins/ltac2/tac2qexpr.mli", 98, 3131, 3131), ("plugins/ltac2/tac2qexpr.mli", 98, 3131, 3168), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 61)), 1, 0); Tag1 (("multi_r", 732), (0, 0, Tag1 ([(("QPrecisely", 604), ([(Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -99)], (0)), 100000000, 0, -98)]), 0, (("plugins/ltac2/tac2qexpr.mli", 101, 3185, 3185), ("plugins/ltac2/tac2qexpr.mli", 101, 3185, 3211), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 63)); (("QUpTo", 605), ([(Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -101)], (0)), 100000000, 0, -100)]), 0, (("plugins/ltac2/tac2qexpr.mli", 102, 3212, 3212), ("plugins/ltac2/tac2qexpr.mli", 102, 3212, 3233), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 64)); (("QRepeatStar", 606), (0), 0, (("plugins/ltac2/tac2qexpr.mli", 103, 3234, 3234), ("plugins/ltac2/tac2qexpr.mli", 103, 3234, 3247), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 65)); (("QRepeatPlus", 607), (0), 0, (("plugins/ltac2/tac2qexpr.mli", 104, 3248, 3248), ("plugins/ltac2/tac2qexpr.mli", 104, 3248, 3261), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 66))], 0), 1, 0, 0, 0, 0, 0, (("plugins/ltac2/tac2qexpr.mli", 100, 3170, 3170), ("plugins/ltac2/tac2qexpr.mli", 104, 3248, 3261), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 62)), 1, 0); Tag1 (("multi", 733), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((("multi_r", 732)), 0, (0)), 100000000, 0, -97)], (0)), 100000000, 0, -96)), 0, 0, 0, 0, (("plugins/ltac2/tac2qexpr.mli", 106, 3263, 3263), ("plugins/ltac2/tac2qexpr.mli", 106, 3263, 3290), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 67)), 1, 0); Tag1 (("rewriting_r", 734), (0, 0, [[(("rew_orient", 610), 0, (Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -93)], (0)), 100000000, 0, -92)], (0)), 100000000, 0, -91), (("plugins/ltac2/tac2qexpr.mli", 109, 3313, 3315), ("plugins/ltac2/tac2qexpr.mli", 109, 3313, 3347), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 69)); (("rew_repeat", 611), 0, (Tag3 ((("multi", 733)), 0, (0)), 100000000, 0, -94), (("plugins/ltac2/tac2qexpr.mli", 110, 3348, 3350), ("plugins/ltac2/tac2qexpr.mli", 110, 3348, 3369), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 70)); (("rew_equatn", 612), 0, (Tag3 ((("constr_with_bindings", 725)), 0, (0)), 100000000, 0, -95), (("plugins/ltac2/tac2qexpr.mli", 111, 3370, 3372), ("plugins/ltac2/tac2qexpr.mli", 111, 3370, 3406), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 71))]], 1, 0, 0, 0, 0, 0, (("plugins/ltac2/tac2qexpr.mli", 108, 3292, 3292), ("plugins/ltac2/tac2qexpr.mli", 112, 3407, 3408), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 68)), 1, 0); Tag1 (("rewriting", 735), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((("rewriting_r", 734)), 0, (0)), 100000000, 0, -90)], (0)), 100000000, 0, -89)), 0, 0, 0, 0, (("plugins/ltac2/tac2qexpr.mli", 114, 3410, 3410), ("plugins/ltac2/tac2qexpr.mli", 114, 3410, 3445), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 72)), 1, 0); Tag1 (("dispatch_r", 736), (0, 0, 0, 1, ((Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac2_plugin")), "Tac2expr"), "raw_tacexpr"), 0, (0)), 100000000, 0, -81)], (0)), 100000000, 0, -80)], (0)), 100000000, 0, -79); (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac2_plugin")), "Tac2expr"), "raw_tacexpr"), 0, (0)), 100000000, 0, -85)], (0)), 100000000, 0, -84); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac2_plugin")), "Tac2expr"), "raw_tacexpr"), 0, (0)), 100000000, 0, -88)], (0)), 100000000, 0, -87)], (0)), 100000000, 0, -86)]), 100000000, 0, -83)], (0)), 100000000, 0, -82)]), 100000000, 0, -78)), 0, 0, 0, 0, (("plugins/ltac2/tac2qexpr.mli", 116, 3447, 3447), ("plugins/ltac2/tac2qexpr.mli", 116, 3447, 3544), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 73)), 1, 0); Tag1 (("dispatch", 737), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((("dispatch_r", 736)), 0, (0)), 100000000, 0, -77)], (0)), 100000000, 0, -76)), 0, 0, 0, 0, (("plugins/ltac2/tac2qexpr.mli", 118, 3546, 3546), ("plugins/ltac2/tac2qexpr.mli", 118, 3546, 3579), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 74)), 1, 0); Tag1 (("red_flag_r", 738), (0, 0, Tag1 ([(("QBeta", 660), (0), 0, (("plugins/ltac2/tac2qexpr.mli", 121, 3599, 3599), ("plugins/ltac2/tac2qexpr.mli", 121, 3599, 3606), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 76)); (("QIota", 661), (0), 0, (("plugins/ltac2/tac2qexpr.mli", 122, 3607, 3607), ("plugins/ltac2/tac2qexpr.mli", 122, 3607, 3614), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 77)); (("QMatch", 662), (0), 0, (("plugins/ltac2/tac2qexpr.mli", 123, 3615, 3615), ("plugins/ltac2/tac2qexpr.mli", 123, 3615, 3623), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 78)); (("QFix", 663), (0), 0, (("plugins/ltac2/tac2qexpr.mli", 124, 3624, 3624), ("plugins/ltac2/tac2qexpr.mli", 124, 3624, 3630), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 79)); (("QCofix", 664), (0), 0, (("plugins/ltac2/tac2qexpr.mli", 125, 3631, 3631), ("plugins/ltac2/tac2qexpr.mli", 125, 3631, 3639), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 80)); (("QZeta", 665), (0), 0, (("plugins/ltac2/tac2qexpr.mli", 126, 3640, 3640), ("plugins/ltac2/tac2qexpr.mli", 126, 3640, 3647), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 81)); (("QConst", 666), ([(Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("or_anti", 706)), [(Tag3 ((("reference", 708)), 0, (0)), 100000000, 0, -71)], (0)), 100000000, 0, -70)], (0)), 100000000, 0, -69)], (0)), 100000000, 0, -68)]), 0, (("plugins/ltac2/tac2qexpr.mli", 127, 3648, 3648), ("plugins/ltac2/tac2qexpr.mli", 127, 3648, 3689), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 82)); (("QDeltaBut", 667), ([(Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("or_anti", 706)), [(Tag3 ((("reference", 708)), 0, (0)), 100000000, 0, -75)], (0)), 100000000, 0, -74)], (0)), 100000000, 0, -73)], (0)), 100000000, 0, -72)]), 0, (("plugins/ltac2/tac2qexpr.mli", 128, 3690, 3690), ("plugins/ltac2/tac2qexpr.mli", 128, 3690, 3734), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 83))], 0), 1, 0, 0, 0, 0, 0, (("plugins/ltac2/tac2qexpr.mli", 120, 3581, 3581), ("plugins/ltac2/tac2qexpr.mli", 128, 3690, 3734), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 75)), 1, 0); Tag1 (("red_flag", 739), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((("red_flag_r", 738)), 0, (0)), 100000000, 0, -67)], (0)), 100000000, 0, -66)), 0, 0, 0, 0, (("plugins/ltac2/tac2qexpr.mli", 130, 3736, 3736), ("plugins/ltac2/tac2qexpr.mli", 130, 3736, 3769), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 84)), 1, 0); Tag1 (("strategy_flag", 740), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("red_flag", 739)), 0, (0)), 100000000, 0, -65)], (0)), 100000000, 0, -64)], (0)), 100000000, 0, -63)), 0, 0, 0, 0, (("plugins/ltac2/tac2qexpr.mli", 132, 3771, 3771), ("plugins/ltac2/tac2qexpr.mli", 132, 3771, 3812), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 85)), 1, 0); Tag1 (("constr_match_pattern_r", 741), (0, 0, Tag1 ([(("QConstrMatchPattern", 671), ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -59)]), 0, (("plugins/ltac2/tac2qexpr.mli", 135, 3844, 3844), ("plugins/ltac2/tac2qexpr.mli", 135, 3844, 3891), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 87)); (("QConstrMatchContext", 672), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -61)], (0)), 100000000, 0, -60); (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -62)]), 0, (("plugins/ltac2/tac2qexpr.mli", 136, 3892, 3892), ("plugins/ltac2/tac2qexpr.mli", 136, 3892, 3953), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 88))], 0), 1, 0, 0, 0, 0, 0, (("plugins/ltac2/tac2qexpr.mli", 134, 3814, 3814), ("plugins/ltac2/tac2qexpr.mli", 136, 3892, 3953), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 86)), 1, 0); Tag1 (("constr_match_pattern", 742), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((("constr_match_pattern_r", 741)), 0, (0)), 100000000, 0, -58)], (0)), 100000000, 0, -57)), 0, 0, 0, 0, (("plugins/ltac2/tac2qexpr.mli", 138, 3955, 3955), ("plugins/ltac2/tac2qexpr.mli", 138, 3955, 4012), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 89)), 1, 0); Tag1 (("constr_match_branch", 743), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag2 ([(Tag3 ((("constr_match_pattern", 742)), 0, (0)), 100000000, 0, -55); (Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac2_plugin")), "Tac2expr"), "raw_tacexpr"), 0, (0)), 100000000, 0, -56)]), 100000000, 0, -54)], (0)), 100000000, 0, -53)), 0, 0, 0, 0, (("plugins/ltac2/tac2qexpr.mli", 140, 4014, 4014), ("plugins/ltac2/tac2qexpr.mli", 140, 4014, 4084), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 90)), 1, 0); Tag1 (("constr_matching", 744), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("constr_match_branch", 743)), 0, (0)), 100000000, 0, -52)], (0)), 100000000, 0, -51)], (0)), 100000000, 0, -50)), 0, 0, 0, 0, (("plugins/ltac2/tac2qexpr.mli", 142, 4086, 4086), ("plugins/ltac2/tac2qexpr.mli", 142, 4086, 4140), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 91)), 1, 0); Tag1 (("goal_match_pattern_r", 745), (0, 0, [[(("q_goal_match_concl", 677), 0, (Tag3 ((("constr_match_pattern", 742)), 0, (0)), 100000000, 0, -43), (("plugins/ltac2/tac2qexpr.mli", 145, 4172, 4174), ("plugins/ltac2/tac2qexpr.mli", 145, 4172, 4216), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 93)); (("q_goal_match_hyps", 678), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Names")), "lname"), 0, (0)), 100000000, 0, -46); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("constr_match_pattern", 742)), 0, (0)), 100000000, 0, -48)], (0)), 100000000, 0, -47); (Tag3 ((("constr_match_pattern", 742)), 0, (0)), 100000000, 0, -49)]), 100000000, 0, -45)], (0)), 100000000, 0, -44), (("plugins/ltac2/tac2qexpr.mli", 146, 4217, 4219), ("plugins/ltac2/tac2qexpr.mli", 146, 4217, 4311), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 94))]], 1, 0, 0, 0, 0, 0, (("plugins/ltac2/tac2qexpr.mli", 144, 4142, 4142), ("plugins/ltac2/tac2qexpr.mli", 147, 4312, 4313), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 92)), 1, 0); Tag1 (("goal_match_pattern", 746), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((("goal_match_pattern_r", 745)), 0, (0)), 100000000, 0, -42)], (0)), 100000000, 0, -41)), 0, 0, 0, 0, (("plugins/ltac2/tac2qexpr.mli", 149, 4315, 4315), ("plugins/ltac2/tac2qexpr.mli", 149, 4315, 4368), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 95)), 1, 0); Tag1 (("goal_match_branch", 747), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag2 ([(Tag3 ((("goal_match_pattern", 746)), 0, (0)), 100000000, 0, -39); (Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac2_plugin")), "Tac2expr"), "raw_tacexpr"), 0, (0)), 100000000, 0, -40)]), 100000000, 0, -38)], (0)), 100000000, 0, -37)), 0, 0, 0, 0, (("plugins/ltac2/tac2qexpr.mli", 151, 4370, 4370), ("plugins/ltac2/tac2qexpr.mli", 151, 4370, 4436), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 96)), 1, 0); Tag1 (("goal_matching", 748), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("goal_match_branch", 747)), 0, (0)), 100000000, 0, -36)], (0)), 100000000, 0, -35)], (0)), 100000000, 0, -34)), 0, 0, 0, 0, (("plugins/ltac2/tac2qexpr.mli", 153, 4438, 4438), ("plugins/ltac2/tac2qexpr.mli", 153, 4438, 4488), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 97)), 1, 0); Tag1 (("hintdb_r", 749), (0, 0, Tag1 ([(("QHintAll", 692), (0), 0, (("plugins/ltac2/tac2qexpr.mli", 156, 4506, 4506), ("plugins/ltac2/tac2qexpr.mli", 156, 4506, 4516), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 99)); (("QHintDbs", 693), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("or_anti", 706)), [(Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -33)], (0)), 100000000, 0, -32)], (0)), 100000000, 0, -31)], (0)), 100000000, 0, -30)]), 0, (("plugins/ltac2/tac2qexpr.mli", 157, 4517, 4517), ("plugins/ltac2/tac2qexpr.mli", 157, 4517, 4555), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 100))], 0), 1, 0, 0, 0, 0, 0, (("plugins/ltac2/tac2qexpr.mli", 155, 4490, 4490), ("plugins/ltac2/tac2qexpr.mli", 157, 4517, 4555), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 98)), 1, 0); Tag1 (("hintdb", 750), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((("hintdb_r", 749)), 0, (0)), 100000000, 0, -29)], (0)), 100000000, 0, -28)), 0, 0, 0, 0, (("plugins/ltac2/tac2qexpr.mli", 159, 4557, 4557), ("plugins/ltac2/tac2qexpr.mli", 159, 4557, 4586), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 101)), 1, 0); Tag1 (("move_location_r", 751), (0, 0, Tag1 ([(("QMoveAfter", 696), ([(Tag3 ((("or_anti", 706)), [(Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -24)], (0)), 100000000, 0, -23)], (0)), 100000000, 0, -22)]), 0, (("plugins/ltac2/tac2qexpr.mli", 162, 4611, 4611), ("plugins/ltac2/tac2qexpr.mli", 162, 4611, 4646), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 103)); (("QMoveBefore", 697), ([(Tag3 ((("or_anti", 706)), [(Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -27)], (0)), 100000000, 0, -26)], (0)), 100000000, 0, -25)]), 0, (("plugins/ltac2/tac2qexpr.mli", 163, 4647, 4647), ("plugins/ltac2/tac2qexpr.mli", 163, 4647, 4683), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 104)); (("QMoveFirst", 698), (0), 0, (("plugins/ltac2/tac2qexpr.mli", 164, 4684, 4684), ("plugins/ltac2/tac2qexpr.mli", 164, 4684, 4696), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 105)); (("QMoveLast", 699), (0), 0, (("plugins/ltac2/tac2qexpr.mli", 165, 4697, 4697), ("plugins/ltac2/tac2qexpr.mli", 165, 4697, 4708), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 106))], 0), 1, 0, 0, 0, 0, 0, (("plugins/ltac2/tac2qexpr.mli", 161, 4588, 4588), ("plugins/ltac2/tac2qexpr.mli", 165, 4697, 4708), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 102)), 1, 0); Tag1 (("move_location", 752), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((("move_location_r", 751)), 0, (0)), 100000000, 0, -21)], (0)), 100000000, 0, -20)), 0, 0, 0, 0, (("plugins/ltac2/tac2qexpr.mli", 167, 4710, 4710), ("plugins/ltac2/tac2qexpr.mli", 167, 4710, 4753), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 107)), 1, 0); Tag1 (("pose", 753), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag2 ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("or_anti", 706)), [(Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -18)], (0)), 100000000, 0, -17)], (0)), 100000000, 0, -16)], (0)), 100000000, 0, -15); (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -19)]), 100000000, 0, -14)], (0)), 100000000, 0, -13)), 0, 0, 0, 0, (("plugins/ltac2/tac2qexpr.mli", 169, 4755, 4755), ("plugins/ltac2/tac2qexpr.mli", 169, 4755, 4827), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 108)), 1, 0); Tag1 (("assertion_r", 754), (0, 0, Tag1 ([(("QAssertType", 703), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("intro_pattern", 716)), 0, (0)), 100000000, 0, -5)], (0)), 100000000, 0, -4); (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -6); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac2_plugin")), "Tac2expr"), "raw_tacexpr"), 0, (0)), 100000000, 0, -8)], (0)), 100000000, 0, -7)]), 0, (("plugins/ltac2/tac2qexpr.mli", 172, 4848, 4848), ("plugins/ltac2/tac2qexpr.mli", 172, 4848, 4931), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 110)); (("QAssertValue", 704), ([(Tag3 ((("or_anti", 706)), [(Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -11)], (0)), 100000000, 0, -10)], (0)), 100000000, 0, -9); (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -12)]), 0, (("plugins/ltac2/tac2qexpr.mli", 173, 4932, 4932), ("plugins/ltac2/tac2qexpr.mli", 173, 4932, 4994), 0), 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 111))], 0), 1, 0, 0, 0, 0, 0, (("plugins/ltac2/tac2qexpr.mli", 171, 4829, 4829), ("plugins/ltac2/tac2qexpr.mli", 173, 4932, 4994), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 109)), 1, 0); Tag1 (("assertion", 755), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((("assertion_r", 754)), 0, (0)), 100000000, 0, -3)], (0)), 100000000, 0, -2)), 0, 0, 0, 0, (("plugins/ltac2/tac2qexpr.mli", 175, 4996, 4996), ("plugins/ltac2/tac2qexpr.mli", 175, 4996, 5031), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2qexpr", 112)), 1, 0)], "Ltac2_plugin__Tac2qexpr", [("Ltac2_plugin__Tac2qexpr", ("\215\137\163\233\241P\212#\198\182\130\138\014\246\026\205")); ("Z", ("\253\196\2168\027\199O\134\220\218\031'\1484\233o")); ("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Vmemitcodes", ("wCd\138\165\158DD\241gH\236.\210\197\247")); ("Vmbytecodes", ("\025\021\151\137Dx\149W\236+[\143f\208\160\016")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Unix", (":B72R\011\005Sj\189)\011\239PH\254")); ("UnivSubst", ("\190qu\031mc\130\181\003G]\132\"\219m)")); ("UnivProblem", ("6'\161\018\181\001.\253\000\141a6\171\1727\155")); ("UnivNames", ("%\151_\209%+JM$n\001\232\194n\178N")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UState", ("SD\203\215|\136\n\251\239\208\148\215C\n\167\005")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Summary", ("\148G\135\226\024L3\246\021\028U\146\164`\253\250")); ("Store", ("/dT\252\145\179pq\216{\181\206\190K+U")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Random", ("\020\005Xq\171\026\218\152X\135\254\023\133zK\200")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("Section", ("\245\207\b\021\142v=\155#w\246}\"4b\006")); ("Safe_typing", (")\250?\164\145\132\241\127\186\152h+\145\"\237l")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("Range", ("\218\130\001r\237\r\144\171\164\021l\155\196\143sg")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Pattern", ("\195C\140Wb=\022\222\208\227^K\003\020\215X")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("NumTok", ("vd\023^\251\244B\166\145'\156\196-0\027\169")); ("Nativevalues", ("8:\007\025e\226c,\001\171\146#l\210\171\152")); ("Nativelib", ("V\239\205Y1\147E:,\176\196Hy\1483|")); ("Nativecode", ("\190\185\255\006m\012\210\163\138Rz\247\15283\183")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Namegen", ("\187\222\224T\255\020\1808-\212*\164\131\177\157x")); ("Monad", ("\244\171T\157\194p\187\160\149\195{\132\222\020\253\148")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Ltac2_plugin__Tac2expr", ("T\154\246\018\232\196\182\229\012\167v}\1367|\157")); ("Ltac2_plugin__Tac2dyn", ("\003M~\173\240\228^\184[\135\224\206\1576\163 ")); ("Ltac2_plugin", ("\165R\230\016\178\131\154\196w\014@m\191\218\194\020")); ("Locus", ("_\002\003W\246\181\225\242Uf\139\226\176\174\192I")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Libnames", ("fp\0255\167\162\209\153\137\161\169#\246\193\003\198")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hook", ("\183\194\223\003\155\169',\187\240a;E\b\1396")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Gramlib__Stream", ("\248\\H\205_76\253\136\146\200\031\165\021=t")); ("Gramlib", ("\154\143\210e\021i\246\176\224\194\220\217\007\145\139A")); ("Glob_term", ("\165=a\227\160\153.\021_$\232\209T\236\153O")); ("Genlambda", ("\170}\024\241\141\222\136S\169\219\2212i\134KI")); ("Genarg", ("\1434\015\001\152\196\005s\156\136\195\185\247\b3\t")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evd", ("\211\205p\193\216\129r\006\239oN\142ar\196\175")); ("Evar_kinds", ("\023L\186\132\218}\254\221\185\198\220\200h\003{\021")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Environ", ("\171b\1579\229<\003Z\147IL\225X\254\182\204")); ("Entries", ("\172\201\198\221Ap\027_{\174\141C\021\";p")); ("EConstr", ("\201aW\156\157;N\004\201V\208\006L\166\211)")); ("Dyn", ("\131z`\205v\2306\007x\027&K.?;\169")); ("Declarations", ("\239\137n\019\030w$\182\166z^{\b\206\163\175")); ("DAst", ("\224/\200)\007\184ni\134\b\139\204\241\005w\212")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Conversion", ("\158\150&\195M\tv\127|\029\158RRK\211A")); ("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constrexpr", ("p'r\245\184chL\183\249\"\213]\1741\237")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CUnix", ("\140Zl\153\167\011J\015\005|th\247OTu")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CEphemeron", ("\204I\179-\206(x4\173\229\250\001PkH\151")); ("CDebug", ("^4\210p7\239!3\138\138\213?\239`\250\157")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [1; (0)])
type assertion = assertion_r CAst.t

exception Parse_error of string
type v = { major : int; minor : int; }
type version = Finite of v | Inf
val parse_error : ('a, unit, string, 'b) format4 -> 'a
type 'a parse = { pos : int; x : 'a; }
val scan : string parse -> char option
val incr : 'a parse -> 'a parse
val skip : char -> string parse -> string parse
val skip_dot : string parse -> string parse
val parse_integer : string parse -> int * string parse
val parse_version : string parse -> version * string parse
type interval = { left : version; right : version; }
type test = interval
val mem : interval -> v -> bool
val ( <: ) : v -> interval list -> bool
type annot = Start of test | End
val sub : string parse -> string -> bool
val parse : string parse -> annot
val conditional : string -> annot option
val version : v
exception Missing_end
val line :
  (unit -> string) -> (string -> unit) -> test list -> bool * test list
val before : string -> string
val preprocess : string -> unit
val files : string list("DEBUG:rule", [Tag2 (("Parse_error", 823), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -93)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Dune__exe__Preprocessor", 0)), 2, 0); Tag1 (("v", 824), (0, 0, [[(("major", 271), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -91), (("preprocessor.ml", 3, 33, 43), ("preprocessor.ml", 3, 33, 53), 0), 0, Tag1 ("Dune__exe__Preprocessor", 2)); (("minor", 272), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -92), (("preprocessor.ml", 3, 33, 54), ("preprocessor.ml", 3, 33, 63), 0), 0, Tag1 ("Dune__exe__Preprocessor", 3))]], 1, 0, 0, 0, 0, 0, (("preprocessor.ml", 3, 33, 33), ("preprocessor.ml", 3, 33, 64), 0), 0, 0, 0, Tag1 ("Dune__exe__Preprocessor", 1)), 1, 0); Tag1 (("version", 825), (0, 0, Tag1 ([(("Finite", 274), ([(Tag3 ((("v", 824)), 0, (0)), 100000000, 0, -90)]), 0, (("preprocessor.ml", 5, 80, 82), ("preprocessor.ml", 5, 80, 95), 0), 0, Tag1 ("Dune__exe__Preprocessor", 5)); (("Inf", 275), (0), 0, (("preprocessor.ml", 6, 96, 98), ("preprocessor.ml", 6, 96, 103), 0), 0, Tag1 ("Dune__exe__Preprocessor", 6))], 0), 1, 0, 0, 0, 0, 0, (("preprocessor.ml", 4, 65, 65), ("preprocessor.ml", 6, 96, 103), 0), 0, 0, 0, Tag1 ("Dune__exe__Preprocessor", 4)), 1, 0); (("parse_error", 826), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format4"), [((0), 100000000, 0, -85); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -87); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -88); ((0), 100000000, 0, -89)], (0)), 100000000, 0, -86), ((0), 100000000, 0, -85), 0), 100000000, 0, -84), 0, (("preprocessor.ml", 8, 105, 109), ("preprocessor.ml", 8, 105, 120), 0), 0, Tag1 ("Dune__exe__Preprocessor", 7)), 0); Tag1 (("parse", 827), ([((("a")), 100000000, 0, -83)], 1, [[(("pos", 460), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -82), (("preprocessor.ml", 10, 182, 199), ("preprocessor.ml", 10, 182, 207), 0), 0, Tag1 ("Dune__exe__Preprocessor", 11)); (("x", 461), 0, ((("a")), 100000000, 0, -83), (("preprocessor.ml", 10, 182, 208), ("preprocessor.ml", 10, 182, 212), 0), 0, Tag1 ("Dune__exe__Preprocessor", 12))]], 1, 0, [25], [0], 0, 0, (("preprocessor.ml", 10, 182, 182), ("preprocessor.ml", 10, 182, 213), 0), 0, 0, 0, Tag1 ("Dune__exe__Preprocessor", 10)), 1, 0); (("scan", 828), ((Tag1 (0, (Tag3 ((("parse", 827)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -81)], (0)), 100000000, 0, -80), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -79)], (0)), 100000000, 0, -78), 0), 100000000, 0, -77), 0, (("preprocessor.ml", 11, 214, 218), ("preprocessor.ml", 11, 214, 222), 0), 0, Tag1 ("Dune__exe__Preprocessor", 13)), 0); (("incr", 829), ((Tag1 (0, (Tag3 ((("parse", 827)), [((0), 100000000, 0, -75)], (0)), 100000000, 0, -76), (Tag3 ((("parse", 827)), [((0), 100000000, 0, -75)], (0)), 100000000, 0, -74), 0), 100000000, 0, -73), 0, (("preprocessor.ml", 12, 287, 291), ("preprocessor.ml", 12, 287, 295), 0), 0, Tag1 ("Dune__exe__Preprocessor", 16)), 0); (("skip", 830), ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -72), (Tag1 (0, (Tag3 ((("parse", 827)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -71)], (0)), 100000000, 0, -70), (Tag3 ((("parse", 827)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -71)], (0)), 100000000, 0, -70), 0), 100000000, 0, -69), 0), 100000000, 0, -68), 0, (("preprocessor.ml", 14, 326, 334), ("preprocessor.ml", 14, 326, 338), 0), 0, Tag1 ("Dune__exe__Preprocessor", 19)), 0); (("skip_dot", 831), ((Tag1 (0, (Tag3 ((("parse", 827)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -67)], (0)), 100000000, 0, -66), (Tag3 ((("parse", 827)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -67)], (0)), 100000000, 0, -66), 0), 100000000, 0, -65), 0, (("preprocessor.ml", 16, 394, 398), ("preprocessor.ml", 16, 394, 406), 0), 0, Tag1 ("Dune__exe__Preprocessor", 22)), 0); (("parse_integer", 832), ((Tag1 (0, (Tag3 ((("parse", 827)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -64)], (0)), 100000000, 0, -63), (Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -62); (Tag3 ((("parse", 827)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -64)], (0)), 100000000, 0, -63)]), 100000000, 0, -61), 0), 100000000, 0, -60), 0, (("preprocessor.ml", 19, 420, 424), ("preprocessor.ml", 19, 420, 437), 0), 0, Tag1 ("Dune__exe__Preprocessor", 23)), 0); (("parse_version", 833), ((Tag1 (0, (Tag3 ((("parse", 827)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -59)], (0)), 100000000, 0, -58), (Tag2 ([(Tag3 ((("version", 825)), 0, (0)), 100000000, 0, -57); (Tag3 ((("parse", 827)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -59)], (0)), 100000000, 0, -58)]), 100000000, 0, -56), 0), 100000000, 0, -55), 0, (("preprocessor.ml", 28, 650, 654), ("preprocessor.ml", 28, 650, 667), 0), 0, Tag1 ("Dune__exe__Preprocessor", 29)), 0); Tag1 (("interval", 834), (0, 0, [[(("left", 570), 0, (Tag3 ((("version", 825)), 0, (0)), 100000000, 0, -53), (("preprocessor.ml", 37, 883, 900), ("preprocessor.ml", 37, 883, 913), 0), 0, Tag1 ("Dune__exe__Preprocessor", 37)); (("right", 571), 0, (Tag3 ((("version", 825)), 0, (0)), 100000000, 0, -54), (("preprocessor.ml", 37, 883, 914), ("preprocessor.ml", 37, 883, 927), 0), 0, Tag1 ("Dune__exe__Preprocessor", 38))]], 1, 0, 0, 0, 0, 0, (("preprocessor.ml", 37, 883, 883), ("preprocessor.ml", 37, 883, 928), 0), 0, 0, 0, Tag1 ("Dune__exe__Preprocessor", 36)), 1, 0); Tag1 (("test", 835), (0, 0, 0, 1, ((Tag3 ((("interval", 834)), 0, (0)), 100000000, 0, -52)), 0, 0, 0, 0, (("preprocessor.ml", 38, 929, 929), ("preprocessor.ml", 38, 929, 949), 0), 0, 0, 0, Tag1 ("Dune__exe__Preprocessor", 39)), 1, 0); (("mem", 836), ((Tag1 (0, (Tag3 ((("interval", 834)), 0, (0)), 100000000, 0, -51), (Tag1 (0, (Tag3 ((("v", 824)), 0, (0)), 100000000, 0, -50), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -49), 0), 100000000, 0, -48), 0), 100000000, 0, -47), 0, (("preprocessor.ml", 40, 951, 955), ("preprocessor.ml", 40, 951, 958), 0), 0, Tag1 ("Dune__exe__Preprocessor", 40)), 0); (("<:", 837), ((Tag1 (0, (Tag3 ((("v", 824)), 0, (0)), 100000000, 0, -46), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("interval", 834)), 0, (0)), 100000000, 0, -45)], (0)), 100000000, 0, -44), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -43), 0), 100000000, 0, -42), 0), 100000000, 0, -41), 0, (("preprocessor.ml", 46, 1133, 1137), ("preprocessor.ml", 46, 1133, 1141), 0), 0, Tag1 ("Dune__exe__Preprocessor", 47)), 0); Tag1 (("annot", 838), (0, 0, Tag1 ([(("Start", 653), ([(Tag3 ((("test", 835)), 0, (0)), 100000000, 0, -40)]), 0, (("preprocessor.ml", 49, 1218, 1220), ("preprocessor.ml", 49, 1218, 1235), 0), 0, Tag1 ("Dune__exe__Preprocessor", 52)); (("End", 654), (0), 0, (("preprocessor.ml", 50, 1236, 1238), ("preprocessor.ml", 50, 1236, 1243), 0), 0, Tag1 ("Dune__exe__Preprocessor", 53))], 0), 1, 0, 0, 0, 0, 0, (("preprocessor.ml", 48, 1205, 1205), ("preprocessor.ml", 50, 1236, 1243), 0), 0, 0, 0, Tag1 ("Dune__exe__Preprocessor", 51)), 1, 0); (("sub", 839), ((Tag1 (0, (Tag3 ((("parse", 827)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -39)], (0)), 100000000, 0, -38), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -37), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -36), 0), 100000000, 0, -35), 0), 100000000, 0, -34), 0, (("preprocessor.ml", 52, 1245, 1249), ("preprocessor.ml", 52, 1245, 1252), 0), 0, Tag1 ("Dune__exe__Preprocessor", 54)), 0); (("parse", 840), ((Tag1 (0, (Tag3 ((("parse", 827)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -33)], (0)), 100000000, 0, -32), (Tag3 ((("annot", 838)), 0, (0)), 100000000, 0, -31), 0), 100000000, 0, -30), 0, (("preprocessor.ml", 55, 1307, 1311), ("preprocessor.ml", 55, 1307, 1316), 0), 0, Tag1 ("Dune__exe__Preprocessor", 58)), 0); (("conditional", 841), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -29), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("annot", 838)), 0, (0)), 100000000, 0, -28)], (0)), 100000000, 0, -27), 0), 100000000, 0, -26), 0, (("preprocessor.ml", 92, 2595, 2599), ("preprocessor.ml", 92, 2595, 2610), 0), 0, Tag1 ("Dune__exe__Preprocessor", 67)), 0); (("version", 842), ((Tag3 ((("v", 824)), 0, (0)), 100000000, 0, -25), 0, (("preprocessor.ml", 97, 2712, 2716), ("preprocessor.ml", 97, 2712, 2723), 0), 0, Tag1 ("Dune__exe__Preprocessor", 69)), 0); Tag2 (("Missing_end", 843), ((Tag3 ("exn", 7)), 0, (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Dune__exe__Preprocessor", 71)), 2, 0); (("line", 844), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -24), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -22), (1)), 100000000, 0, -23), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -22), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -21), (1)), 100000000, 0, -20), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("test", 835)), 0, (0)), 100000000, 0, -19)], (0)), 100000000, 0, -18), (Tag2 ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -17); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("test", 835)), 0, (0)), 100000000, 0, -19)], (0)), 100000000, 0, -18)]), 100000000, 0, -16), 0), 100000000, 0, -15), 0), 100000000, 0, -14), 0), 100000000, 0, -13), 0, (("preprocessor.ml", 103, 2851, 2855), ("preprocessor.ml", 103, 2851, 2859), 0), 0, Tag1 ("Dune__exe__Preprocessor", 72)), 0); (("before", 845), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -11), 0), 100000000, 0, -10), 0, (("preprocessor.ml", 114, 3127, 3131), ("preprocessor.ml", 114, 3127, 3137), 0), 0, Tag1 ("Dune__exe__Preprocessor", 80)), 0); (("preprocess", 846), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -9), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8), 0), 100000000, 0, -7), 0, (("preprocessor.ml", 115, 3150, 3154), ("preprocessor.ml", 115, 3150, 3164), 0), 0, Tag1 ("Dune__exe__Preprocessor", 82)), 0); (("files", 847), ((Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6)], (0)), 100000000, 0, -5), 0, (("preprocessor.ml", 138, 3826, 3830), ("preprocessor.ml", 138, 3826, 3835), 0), 0, Tag1 ("Dune__exe__Preprocessor", 98)), 0); (("targets", 848), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4)], (0)), 100000000, 0, -3)], (0)), 100000000, 0, -2), 0, (("preprocessor.ml", 143, 4017, 4021), ("preprocessor.ml", 143, 4017, 4028), 0), 0, Tag1 ("Dune__exe__Preprocessor", 99)), 0)], "Dune__exe__Preprocessor", [("Dune__exe__Preprocessor", ("\1455X\214\"`4\217\187s\224\144\157\031\021\164")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Printf", ("\215<\139]\021\142\224E\245m\198qc(W\229")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Char", ("\1794\1468\190\138\150g\231\240\140d\191.\212e")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Arg", ("\024%=\206\198p\149Y\007\004\216,&\254#\207")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

val targets : string list ref

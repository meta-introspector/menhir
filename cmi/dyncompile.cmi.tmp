module Options = Dyncompile__.Options
val output_structure : Stdcompat.out_channel -> Parsetree.structure -> unit
type compiler = {
  command : string;
  archive_option : string;
  archive_suffix : string;
}
val compiler : compiler
val try_commands : verbose:bool -> (string * string list) list -> unit
val compile : Options.t -> string -> string -> unit
val write_ast : bool -> Stdcompat.out_channel -> Parsetree.structure -> unit
("DEBUG:rule", [Tag3 (("Options", 1489), 1, (Tag3 (Tag1 ((Tag2 ("Dyncompile__")), "Options")), 0, (("dyncompile/dyncompile.ml", 1, 0, 0), ("dyncompile/dyncompile.ml", 1, 0, 24), 0), Tag1 ("Dyncompile", 0)), 0, 0); (("output_structure", 1490), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdcompat")), "out_channel"), 0, (0)), 100000000, 0, -38), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "structure"), 0, (0)), 100000000, 0, -37), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -36), 0), 100000000, 0, -35), 0), 100000000, 0, -34), 0, (("dyncompile/dyncompile.ml", 3, 26, 30), ("dyncompile/dyncompile.ml", 3, 26, 46), 0), 0, Tag1 ("Dyncompile", 1)), 0); Tag1 (("compiler", 1491), (0, 0, [[(("command", 952), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -31), (("dyncompile/dyncompile.ml", 9, 233, 237), ("dyncompile/dyncompile.ml", 9, 233, 254), 0), 0, Tag1 ("Dyncompile", 8)); (("archive_option", 953), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -32), (("dyncompile/dyncompile.ml", 10, 255, 259), ("dyncompile/dyncompile.ml", 10, 255, 283), 0), 0, Tag1 ("Dyncompile", 9)); (("archive_suffix", 954), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -33), (("dyncompile/dyncompile.ml", 11, 284, 288), ("dyncompile/dyncompile.ml", 11, 284, 312), 0), 0, Tag1 ("Dyncompile", 10))]], 1, 0, 0, 0, 0, 0, (("dyncompile/dyncompile.ml", 8, 215, 215), ("dyncompile/dyncompile.ml", 12, 313, 316), 0), 0, 0, 0, Tag1 ("Dyncompile", 7)), 1, 0); (("compiler", 1492), ((Tag3 ((("compiler", 1491)), 0, (0)), 100000000, 0, -30), 0, (("dyncompile/dyncompile.ml", 14, 318, 322), ("dyncompile/dyncompile.ml", 14, 318, 330), 0), 0, Tag1 ("Dyncompile", 11)), 0); (("try_commands", 1493), ((Tag1 (("verbose"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -29), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -26); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -28)], (0)), 100000000, 0, -27)]), 100000000, 0, -25)], (0)), 100000000, 0, -24), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -23), 0), 100000000, 0, -22), 0), 100000000, 0, -21), 0, (("dyncompile/dyncompile.ml", 26, 560, 568), ("dyncompile/dyncompile.ml", 26, 560, 580), 0), 0, Tag1 ("Dyncompile", 12)), 0); (("compile", 1494), ((Tag1 (0, (Tag3 (Tag1 ((("Options", 1489)), "t"), 0, (0)), 100000000, 0, -20), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -19), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -18), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -17), 0), 100000000, 0, -16), 0), 100000000, 0, -15), 0), 100000000, 0, -14), 0, (("dyncompile/dyncompile.ml", 42, 1158, 1162), ("dyncompile/dyncompile.ml", 42, 1158, 1169), 0), 0, Tag1 ("Dyncompile", 20)), 0); (("write_ast", 1495), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -13), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdcompat")), "out_channel"), 0, (0)), 100000000, 0, -12), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "structure"), 0, (0)), 100000000, 0, -11), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10), 0), 100000000, 0, -9), 0), 100000000, 0, -8), 0), 100000000, 0, -7), 0, (("dyncompile/dyncompile.ml", 75, 2604, 2608), ("dyncompile/dyncompile.ml", 75, 2604, 2617), 0), 0, Tag1 ("Dyncompile", 33)), 0); (("compile_and_load", 1496), ((Tag1 (0, (Tag3 (Tag1 ((("Options", 1489)), "t"), 0, (0)), 100000000, 0, -6), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "structure"), 0, (0)), 100000000, 0, -5), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("dyncompile/dyncompile.ml", 86, 2941, 2945), ("dyncompile/dyncompile.ml", 86, 2941, 2961), 0), 0, Tag1 ("Dyncompile", 37)), 0)], "Dyncompile", [("Dyncompile", ("\226\186\157\178z7\027\027\006\209S\199\221\015\254E")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Fun", ("\234t\181\000iQ\251,\b\020$\224\233\160\142\210")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Filename", ("z\163\210n\195\247\255\129\029SI\180\152\141h ")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Stdcompat__stdlib_s", ("?\143\027\238\145\138\139e`\216P\248\156\178=\206")); ("Stdcompat__init", ("r\254q\255\217]\232\239'\192d\165\222\016\157\133")); ("Stdcompat", ("\139\1989\181:\137\230\132\240\223\206\210Y\135S\\")); ("Pprintast", ("KT\1966\150\217D\247:z\221\139\230\016\153\020")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Dynlink", ("\195\162y\r\128\204:\177\142\246\213'\148\132$\127")); ("Dyncompile__Options", ("\163\139\247\166g\011\173\203\227\148\153\222\205QE\161")); ("Dyncompile__", ("L\225e(\173\007\190v\215\238\232\n\203\000\154]")); ("Docstrings", ("\216\171\176\031*\203\162\186%\175\201qq\189\139U")); ("Config", ("\161i<\167\240O\230f\157l9\006u\142\185\026")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216")); ("Ast_helper", ("\242\224\238/\155\176+\170\014\015\024\006\147\133f1"))], [(0)])
val compile_and_load : Options.t -> Parsetree.structure -> unit

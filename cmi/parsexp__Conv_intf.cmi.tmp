module type S =
  sig
    type 'a res
    type chunk_to_conv
    type parsed_sexp
    val parse_string :
      string ->
      (chunk_to_conv -> 'a) -> ('a res, Parsexp__.Conv_error.t) result
    val parse_string_exn : string -> (chunk_to_conv -> 'a) -> 'a res
    val conv :
      parsed_sexp * Parsexp__.Positions.t ->
      (chunk_to_conv -> 'a) -> ('a res, Parsexp__.Of_sexp_error.t) result
    val conv_exn :
      parsed_sexp * Parsexp__.Positions.t -> (chunk_to_conv -> 'a) -> 'a res
    val conv_combine :
      (parsed_sexp * Parsexp__.Positions.t, Parsexp__.Parse_error.t) result ->
      (chunk_to_conv -> 'a) -> ('a res, Parsexp__.Conv_error.t) result
  end
module type Mode =
  sig
    type parsed_sexp
    type 'a res
    type chunk_to_conv
    val apply_f : parsed_sexp -> f:(chunk_to_conv -> 'r) -> 'r res
    val find :
      Parsexp__.Positions.t ->
      parsed_sexp ->
      sub:Parsexp__.Import.Sexp.t -> Parsexp__.Positions.range option
  end
module type Conv =
  sig
    module type Mode = Mode
    module type S = S
    module Make :
      functor (Mode : Mode)
        (Sexp_parser : sig
                         type parsed_value = Mode.parsed_sexp
                         module State : Parsexp__Parser_intf.State
                         module Stack : Parsexp__Parser_intf.Stack
                         val feed : State.t -> char -> Stack.t -> Stack.t
                         val feed_eoi : State.t -> Stack.t -> parsed_value
                         val feed_string :
                           State.t -> string -> Stack.t -> Stack.t
                         val feed_substring :
                           State.t ->
                           string -> pos:int -> len:int -> Stack.t -> Stack.t
                         val feed_bytes :
                           State.t -> bytes -> Stack.t -> Stack.t
                         val feed_subbytes :
                           State.t ->
                           bytes -> pos:int -> len:int -> Stack.t -> Stack.t
                         val parse_string :
                           string ->
                           (parsed_value, Parsexp__.Parse_error.t) result
                         val parse_string_exn : string -> parsed_value
                       end)
        (Positions_parser : sig
                              type parsed_value = Parsexp__.Positions.t
                              module State : Parsexp__Parser_intf.State
                              module Stack : Parsexp__Parser_intf.Stack
                              val feed :
                                State.t -> char -> Stack.t -> Stack.t
                              val feed_eoi :
                                State.t -> Stack.t -> parsed_value
                              val feed_string :
                                State.t -> string -> Stack.t -> Stack.t
                              val feed_substring :
                                State.t ->
                                string ->
                                pos:int -> len:int -> Stack.t -> Stack.t
                              val feed_bytes :
                                State.t -> bytes -> Stack.t -> Stack.t
                              val feed_subbytes :
                                State.t ->
                                bytes ->
                                pos:int -> len:int -> Stack.t -> Stack.t
                              val parse_string :
                                string ->
                                (parsed_value, Parsexp__.Parse_error.t)
                                result
                              val parse_string_exn : string -> parsed_value
                            end)
        ->
        sig
          val parse_string :
            string ->
            (Mode.chunk_to_conv -> 'a) ->
            ('a Mode.res, Parsexp__.Conv_error.t) result
          val parse_string_exn :
            string -> (Mode.chunk_to_conv -> 'a) -> 'a Mode.res
          val conv :
            Mode.parsed_sexp * Parsexp__.Positions.t ->
            (Mode.chunk_to_conv -> 'a) ->
            ('a Mode.res, Parsexp__.Of_sexp_error.t) result
          val conv_exn :
            Mode.parsed_sexp * Parsexp__.Positions.t ->
            (Mode.chunk_to_conv -> 'a) -> 'a Mode.res
          val conv_combine :
            (Mode.parsed_sexp * Parsexp__.Positions.t,
             Parsexp__.Parse_error.t)
            result ->
            (Mode.chunk_to_conv -> 'a) ->
            ('a Mode.res, Parsexp__.Conv_error.t) result
        end("DEBUG:rule", [Tag4 (("S", 674), ((Tag1 ([Tag1 (("res", 677), ([((("a")), 100000000, 0, -51)], 1, 0, 1, 0, [7], [2], 0, 0, (("src/conv_intf.ml", 4, 34, 36), ("src/conv_intf.ml", 4, 34, 47), 0), 0, 0, 0, Tag1 ("Parsexp__Conv_intf", 0)), 1, 0); Tag1 (("chunk_to_conv", 678), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/conv_intf.ml", 5, 48, 50), ("src/conv_intf.ml", 5, 48, 68), 0), 0, 0, 0, Tag1 ("Parsexp__Conv_intf", 1)), 1, 0); Tag1 (("parsed_sexp", 679), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/conv_intf.ml", 6, 69, 71), ("src/conv_intf.ml", 6, 69, 87), 0), 0, 0, 0, Tag1 ("Parsexp__Conv_intf", 2)), 1, 0); (("parse_string", 680), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -50), (Tag1 (0, (Tag1 (0, (Tag3 ((("chunk_to_conv", 678)), 0, (0)), 100000000, 0, -49), ((("a")), 100000000, 0, -46), 0), 100000000, 0, -48), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((("res", 677)), [((("a")), 100000000, 0, -46)], (0)), 100000000, 0, -45); (Tag3 (Tag1 (Tag1 ((Tag2 ("Parsexp__")), "Conv_error"), "t"), 0, (0)), 100000000, 0, -47)], (0)), 100000000, 0, -44), 0), 100000000, 0, -43), 0), 100000000, 0, -42), 0, (("src/conv_intf.ml", 8, 89, 91), ("src/conv_intf.ml", 8, 89, 174), 0), 0, Tag1 ("Parsexp__Conv_intf", 3)), 0); (("parse_string_exn", 681), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -41), (Tag1 (0, (Tag1 (0, (Tag3 ((("chunk_to_conv", 678)), 0, (0)), 100000000, 0, -40), ((("a")), 100000000, 0, -38), 0), 100000000, 0, -39), (Tag3 ((("res", 677)), [((("a")), 100000000, 0, -38)], (0)), 100000000, 0, -37), 0), 100000000, 0, -36), 0), 100000000, 0, -35), 0, (("src/conv_intf.ml", 9, 175, 177), ("src/conv_intf.ml", 9, 175, 241), 0), 0, Tag1 ("Parsexp__Conv_intf", 4)), 0); (("conv", 682), ((Tag1 (0, (Tag2 ([(Tag3 ((("parsed_sexp", 679)), 0, (0)), 100000000, 0, -33); (Tag3 (Tag1 (Tag1 ((Tag2 ("Parsexp__")), "Positions"), "t"), 0, (0)), 100000000, 0, -34)]), 100000000, 0, -32), (Tag1 (0, (Tag1 (0, (Tag3 ((("chunk_to_conv", 678)), 0, (0)), 100000000, 0, -31), ((("a")), 100000000, 0, -28), 0), 100000000, 0, -30), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((("res", 677)), [((("a")), 100000000, 0, -28)], (0)), 100000000, 0, -27); (Tag3 (Tag1 (Tag1 ((Tag2 ("Parsexp__")), "Of_sexp_error"), "t"), 0, (0)), 100000000, 0, -29)], (0)), 100000000, 0, -26), 0), 100000000, 0, -25), 0), 100000000, 0, -24), 0, (("src/conv_intf.ml", 11, 243, 245), ("src/conv_intf.ml", 14, 316, 355), 0), 0, Tag1 ("Parsexp__Conv_intf", 5)), 0); (("conv_exn", 683), ((Tag1 (0, (Tag2 ([(Tag3 ((("parsed_sexp", 679)), 0, (0)), 100000000, 0, -22); (Tag3 (Tag1 (Tag1 ((Tag2 ("Parsexp__")), "Positions"), "t"), 0, (0)), 100000000, 0, -23)]), 100000000, 0, -21), (Tag1 (0, (Tag1 (0, (Tag3 ((("chunk_to_conv", 678)), 0, (0)), 100000000, 0, -20), ((("a")), 100000000, 0, -18), 0), 100000000, 0, -19), (Tag3 ((("res", 677)), [((("a")), 100000000, 0, -18)], (0)), 100000000, 0, -17), 0), 100000000, 0, -16), 0), 100000000, 0, -15), 0, (("src/conv_intf.ml", 16, 357, 359), ("src/conv_intf.ml", 16, 357, 434), 0), 0, Tag1 ("Parsexp__Conv_intf", 6)), 0); (("conv_combine", 684), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag2 ([(Tag3 ((("parsed_sexp", 679)), 0, (0)), 100000000, 0, -12); (Tag3 (Tag1 (Tag1 ((Tag2 ("Parsexp__")), "Positions"), "t"), 0, (0)), 100000000, 0, -13)]), 100000000, 0, -11); (Tag3 (Tag1 (Tag1 ((Tag2 ("Parsexp__")), "Parse_error"), "t"), 0, (0)), 100000000, 0, -14)], (0)), 100000000, 0, -10), (Tag1 (0, (Tag1 (0, (Tag3 ((("chunk_to_conv", 678)), 0, (0)), 100000000, 0, -9), ((("a")), 100000000, 0, -6), 0), 100000000, 0, -8), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((("res", 677)), [((("a")), 100000000, 0, -6)], (0)), 100000000, 0, -5); (Tag3 (Tag1 (Tag1 ((Tag2 ("Parsexp__")), "Conv_error"), "t"), 0, (0)), 100000000, 0, -7)], (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/conv_intf.ml", 33, 894, 896), ("src/conv_intf.ml", 36, 999, 1035), 0), 0, Tag1 ("Parsexp__Conv_intf", 7)), 0)])), 0, (("src/conv_intf.ml", 3, 14, 14), ("src/conv_intf.ml", 37, 1036, 1039), 0), Tag1 ("Parsexp__Conv_intf", 8)), 0); Tag4 (("Mode", 675), ((Tag1 ([Tag1 (("parsed_sexp", 685), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/conv_intf.ml", 40, 1064, 1066), ("src/conv_intf.ml", 40, 1064, 1082), 0), 0, 0, 0, Tag1 ("Parsexp__Conv_intf", 9)), 1, 0); Tag1 (("res", 686), ([((("a")), 100000000, 0, -67)], 1, 0, 1, 0, [7], [2], 0, 0, (("src/conv_intf.ml", 41, 1083, 1085), ("src/conv_intf.ml", 41, 1083, 1096), 0), 0, 0, 0, Tag1 ("Parsexp__Conv_intf", 10)), 1, 0); Tag1 (("chunk_to_conv", 687), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/conv_intf.ml", 42, 1097, 1099), ("src/conv_intf.ml", 42, 1097, 1117), 0), 0, 0, 0, Tag1 ("Parsexp__Conv_intf", 11)), 1, 0); (("apply_f", 688), ((Tag1 (0, (Tag3 ((("parsed_sexp", 685)), 0, (0)), 100000000, 0, -66), (Tag1 (("f"), (Tag1 (0, (Tag3 ((("chunk_to_conv", 687)), 0, (0)), 100000000, 0, -65), ((("r")), 100000000, 0, -63), 0), 100000000, 0, -64), (Tag3 ((("res", 686)), [((("r")), 100000000, 0, -63)], (0)), 100000000, 0, -62), 0), 100000000, 0, -61), 0), 100000000, 0, -60), 0, (("src/conv_intf.ml", 44, 1119, 1121), ("src/conv_intf.ml", 44, 1119, 1183), 0), 0, Tag1 ("Parsexp__Conv_intf", 12)), 0); (("find", 689), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Parsexp__")), "Positions"), "t"), 0, (0)), 100000000, 0, -59), (Tag1 (0, (Tag3 ((("parsed_sexp", 685)), 0, (0)), 100000000, 0, -58), (Tag1 (("sub"), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Parsexp__")), "Import"), "Sexp"), "t"), 0, (0)), 100000000, 0, -57), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Parsexp__")), "Positions"), "range"), 0, (0)), 100000000, 0, -56)], (0)), 100000000, 0, -55), 0), 100000000, 0, -54), 0), 100000000, 0, -53), 0), 100000000, 0, -52), 0, (("src/conv_intf.ml", 45, 1184, 1186), ("src/conv_intf.ml", 45, 1184, 1263), 0), 0, Tag1 ("Parsexp__Conv_intf", 13)), 0)])), 0, (("src/conv_intf.ml", 39, 1041, 1041), ("src/conv_intf.ml", 46, 1264, 1267), 0), Tag1 ("Parsexp__Conv_intf", 14)), 0); Tag4 (("Conv", 676), ((Tag1 ([Tag4 (("Mode", 690), ((((("Mode", 675)))), 0, (("src/conv_intf.ml", 49, 1292, 1294), ("src/conv_intf.ml", 49, 1292, 1317), 0), Tag1 ("Parsexp__Conv_intf", 15)), 0); Tag4 (("S", 691), ((((("S", 674)))), 0, (("src/conv_intf.ml", 50, 1318, 1320), ("src/conv_intf.ml", 50, 1318, 1337), 0), Tag1 ("Parsexp__Conv_intf", 16)), 0); Tag3 (("Make", 692), 0, (Tag2 (((("Mode", 693)), ((("Mode", 690)))), Tag2 (((("Sexp_parser", 694)), Tag1 ([Tag1 (("parsed_value", 696), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Mode", 693)), "parsed_sexp"), 0, (0)), 100000000, 0, -124)), 0, 0, 0, 0, (("src/conv_intf.ml", 54, 1373, 1408), ("src/conv_intf.ml", 54, 1373, 1444), 0), 0, 0, 0, Tag1 ("Parsexp__Conv_intf", 18)), 1, 0); Tag3 (("State", 697), 0, ((Tag1 ((Tag2 ("Parsexp__Parser_intf")), "State")), 0, (("src/parser_intf.ml", 45, 1020, 1022), ("src/parser_intf.ml", 45, 1020, 1042), 0), Tag1 ("Parsexp__Parser_intf", 13)), 0, 0); Tag3 (("Stack", 698), 0, ((Tag1 ((Tag2 ("Parsexp__Parser_intf")), "Stack")), 0, (("src/parser_intf.ml", 46, 1043, 1045), ("src/parser_intf.ml", 46, 1043, 1065), 0), Tag1 ("Parsexp__Parser_intf", 14)), 0, 0); (("feed", 699), ((Tag1 (0, (Tag3 (Tag1 ((("State", 697)), "t"), 0, (0)), 100000000, 0, -123), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -122), (Tag1 (0, (Tag3 (Tag1 ((("Stack", 698)), "t"), 0, (0)), 100000000, 0, -121), (Tag3 (Tag1 ((("Stack", 698)), "t"), 0, (0)), 100000000, 0, -120), 0), 100000000, 0, -119), 0), 100000000, 0, -118), 0), 100000000, 0, -117), 0, (("src/parser_intf.ml", 49, 1152, 1154), ("src/parser_intf.ml", 49, 1152, 1202), 0), 0, Tag1 ("Parsexp__Parser_intf", 15)), 0); (("feed_eoi", 700), ((Tag1 (0, (Tag3 (Tag1 ((("State", 697)), "t"), 0, (0)), 100000000, 0, -116), (Tag1 (0, (Tag3 (Tag1 ((("Stack", 698)), "t"), 0, (0)), 100000000, 0, -115), (Tag3 ((("parsed_value", 696)), 0, (0)), 100000000, 0, -114), 0), 100000000, 0, -113), 0), 100000000, 0, -112), 0, (("src/parser_intf.ml", 53, 1316, 1318), ("src/parser_intf.ml", 53, 1316, 1367), 0), 0, Tag1 ("Parsexp__Parser_intf", 16)), 0); (("feed_string", 701), ((Tag1 (0, (Tag3 (Tag1 ((("State", 697)), "t"), 0, (0)), 100000000, 0, -111), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -110), (Tag1 (0, (Tag3 (Tag1 ((("Stack", 698)), "t"), 0, (0)), 100000000, 0, -109), (Tag3 (Tag1 ((("Stack", 698)), "t"), 0, (0)), 100000000, 0, -108), 0), 100000000, 0, -107), 0), 100000000, 0, -106), 0), 100000000, 0, -105), 0, (("src/parser_intf.ml", 57, 1405, 1407), ("src/parser_intf.ml", 57, 1405, 1464), 0), 0, Tag1 ("Parsexp__Parser_intf", 17)), 0); (("feed_substring", 702), ((Tag1 (0, (Tag3 (Tag1 ((("State", 697)), "t"), 0, (0)), 100000000, 0, -104), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -103), (Tag1 (("pos"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -102), (Tag1 (("len"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -101), (Tag1 (0, (Tag3 (Tag1 ((("Stack", 698)), "t"), 0, (0)), 100000000, 0, -100), (Tag3 (Tag1 ((("Stack", 698)), "t"), 0, (0)), 100000000, 0, -99), 0), 100000000, 0, -98), 0), 100000000, 0, -97), 0), 100000000, 0, -96), 0), 100000000, 0, -95), 0), 100000000, 0, -94), 0, (("src/parser_intf.ml", 58, 1465, 1467), ("src/parser_intf.ml", 58, 1465, 1549), 0), 0, Tag1 ("Parsexp__Parser_intf", 18)), 0); (("feed_bytes", 703), ((Tag1 (0, (Tag3 (Tag1 ((("State", 697)), "t"), 0, (0)), 100000000, 0, -93), (Tag1 (0, (Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -92), (Tag1 (0, (Tag3 (Tag1 ((("Stack", 698)), "t"), 0, (0)), 100000000, 0, -91), (Tag3 (Tag1 ((("Stack", 698)), "t"), 0, (0)), 100000000, 0, -90), 0), 100000000, 0, -89), 0), 100000000, 0, -88), 0), 100000000, 0, -87), 0, (("src/parser_intf.ml", 59, 1550, 1552), ("src/parser_intf.ml", 59, 1550, 1607), 0), 0, Tag1 ("Parsexp__Parser_intf", 19)), 0); (("feed_subbytes", 704), ((Tag1 (0, (Tag3 (Tag1 ((("State", 697)), "t"), 0, (0)), 100000000, 0, -86), (Tag1 (0, (Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -85), (Tag1 (("pos"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -84), (Tag1 (("len"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -83), (Tag1 (0, (Tag3 (Tag1 ((("Stack", 698)), "t"), 0, (0)), 100000000, 0, -82), (Tag3 (Tag1 ((("Stack", 698)), "t"), 0, (0)), 100000000, 0, -81), 0), 100000000, 0, -80), 0), 100000000, 0, -79), 0), 100000000, 0, -78), 0), 100000000, 0, -77), 0), 100000000, 0, -76), 0, (("src/parser_intf.ml", 60, 1608, 1610), ("src/parser_intf.ml", 60, 1608, 1690), 0), 0, Tag1 ("Parsexp__Parser_intf", 20)), 0); (("parse_string", 705), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -75), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((("parsed_value", 696)), 0, (0)), 100000000, 0, -73); (Tag3 (Tag1 (Tag1 ((Tag2 ("Parsexp__")), "Parse_error"), "t"), 0, (0)), 100000000, 0, -74)], (0)), 100000000, 0, -72), 0), 100000000, 0, -71), 0, (("src/parser_intf.ml", 64, 1727, 1729), ("src/parser_intf.ml", 64, 1727, 1794), 0), 0, Tag1 ("Parsexp__Parser_intf", 21)), 0); (("parse_string_exn", 706), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -70), (Tag3 ((("parsed_value", 696)), 0, (0)), 100000000, 0, -69), 0), 100000000, 0, -68), 0, (("src/parser_intf.ml", 65, 1795, 1797), ("src/parser_intf.ml", 65, 1795, 1842), 0), 0, Tag1 ("Parsexp__Parser_intf", 22)), 0)])), Tag2 (((("Positions_parser", 695)), Tag1 ([Tag1 (("parsed_value", 707), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Parsexp__")), "Positions"), "t"), 0, (0)), 100000000, 0, -181)), 0, 0, 0, 0, (("src/conv_intf.ml", 55, 1446, 1486), ("src/conv_intf.ml", 55, 1446, 1517), 0), 0, 0, 0, Tag1 ("Parsexp__Conv_intf", 20)), 1, 0); Tag3 (("State", 708), 0, ((Tag1 ((Tag2 ("Parsexp__Parser_intf")), "State")), 0, (("src/parser_intf.ml", 45, 1020, 1022), ("src/parser_intf.ml", 45, 1020, 1042), 0), Tag1 ("Parsexp__Parser_intf", 13)), 0, 0); Tag3 (("Stack", 709), 0, ((Tag1 ((Tag2 ("Parsexp__Parser_intf")), "Stack")), 0, (("src/parser_intf.ml", 46, 1043, 1045), ("src/parser_intf.ml", 46, 1043, 1065), 0), Tag1 ("Parsexp__Parser_intf", 14)), 0, 0); (("feed", 710), ((Tag1 (0, (Tag3 (Tag1 ((("State", 708)), "t"), 0, (0)), 100000000, 0, -180), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -179), (Tag1 (0, (Tag3 (Tag1 ((("Stack", 709)), "t"), 0, (0)), 100000000, 0, -178), (Tag3 (Tag1 ((("Stack", 709)), "t"), 0, (0)), 100000000, 0, -177), 0), 100000000, 0, -176), 0), 100000000, 0, -175), 0), 100000000, 0, -174), 0, (("src/parser_intf.ml", 49, 1152, 1154), ("src/parser_intf.ml", 49, 1152, 1202), 0), 0, Tag1 ("Parsexp__Parser_intf", 15)), 0); (("feed_eoi", 711), ((Tag1 (0, (Tag3 (Tag1 ((("State", 708)), "t"), 0, (0)), 100000000, 0, -173), (Tag1 (0, (Tag3 (Tag1 ((("Stack", 709)), "t"), 0, (0)), 100000000, 0, -172), (Tag3 ((("parsed_value", 707)), 0, (0)), 100000000, 0, -171), 0), 100000000, 0, -170), 0), 100000000, 0, -169), 0, (("src/parser_intf.ml", 53, 1316, 1318), ("src/parser_intf.ml", 53, 1316, 1367), 0), 0, Tag1 ("Parsexp__Parser_intf", 16)), 0); (("feed_string", 712), ((Tag1 (0, (Tag3 (Tag1 ((("State", 708)), "t"), 0, (0)), 100000000, 0, -168), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -167), (Tag1 (0, (Tag3 (Tag1 ((("Stack", 709)), "t"), 0, (0)), 100000000, 0, -166), (Tag3 (Tag1 ((("Stack", 709)), "t"), 0, (0)), 100000000, 0, -165), 0), 100000000, 0, -164), 0), 100000000, 0, -163), 0), 100000000, 0, -162), 0, (("src/parser_intf.ml", 57, 1405, 1407), ("src/parser_intf.ml", 57, 1405, 1464), 0), 0, Tag1 ("Parsexp__Parser_intf", 17)), 0); (("feed_substring", 713), ((Tag1 (0, (Tag3 (Tag1 ((("State", 708)), "t"), 0, (0)), 100000000, 0, -161), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -160), (Tag1 (("pos"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -159), (Tag1 (("len"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -158), (Tag1 (0, (Tag3 (Tag1 ((("Stack", 709)), "t"), 0, (0)), 100000000, 0, -157), (Tag3 (Tag1 ((("Stack", 709)), "t"), 0, (0)), 100000000, 0, -156), 0), 100000000, 0, -155), 0), 100000000, 0, -154), 0), 100000000, 0, -153), 0), 100000000, 0, -152), 0), 100000000, 0, -151), 0, (("src/parser_intf.ml", 58, 1465, 1467), ("src/parser_intf.ml", 58, 1465, 1549), 0), 0, Tag1 ("Parsexp__Parser_intf", 18)), 0); (("feed_bytes", 714), ((Tag1 (0, (Tag3 (Tag1 ((("State", 708)), "t"), 0, (0)), 100000000, 0, -150), (Tag1 (0, (Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -149), (Tag1 (0, (Tag3 (Tag1 ((("Stack", 709)), "t"), 0, (0)), 100000000, 0, -148), (Tag3 (Tag1 ((("Stack", 709)), "t"), 0, (0)), 100000000, 0, -147), 0), 100000000, 0, -146), 0), 100000000, 0, -145), 0), 100000000, 0, -144), 0, (("src/parser_intf.ml", 59, 1550, 1552), ("src/parser_intf.ml", 59, 1550, 1607), 0), 0, Tag1 ("Parsexp__Parser_intf", 19)), 0); (("feed_subbytes", 715), ((Tag1 (0, (Tag3 (Tag1 ((("State", 708)), "t"), 0, (0)), 100000000, 0, -143), (Tag1 (0, (Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -142), (Tag1 (("pos"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -141), (Tag1 (("len"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -140), (Tag1 (0, (Tag3 (Tag1 ((("Stack", 709)), "t"), 0, (0)), 100000000, 0, -139), (Tag3 (Tag1 ((("Stack", 709)), "t"), 0, (0)), 100000000, 0, -138), 0), 100000000, 0, -137), 0), 100000000, 0, -136), 0), 100000000, 0, -135), 0), 100000000, 0, -134), 0), 100000000, 0, -133), 0, (("src/parser_intf.ml", 60, 1608, 1610), ("src/parser_intf.ml", 60, 1608, 1690), 0), 0, Tag1 ("Parsexp__Parser_intf", 20)), 0); (("parse_string", 716), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -132), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((("parsed_value", 707)), 0, (0)), 100000000, 0, -130); (Tag3 (Tag1 (Tag1 ((Tag2 ("Parsexp__")), "Parse_error"), "t"), 0, (0)), 100000000, 0, -131)], (0)), 100000000, 0, -129), 0), 100000000, 0, -128), 0, (("src/parser_intf.ml", 64, 1727, 1729), ("src/parser_intf.ml", 64, 1727, 1794), 0), 0, Tag1 ("Parsexp__Parser_intf", 21)), 0); (("parse_string_exn", 717), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -127), (Tag3 ((("parsed_value", 707)), 0, (0)), 100000000, 0, -126), 0), 100000000, 0, -125), 0, (("src/parser_intf.ml", 65, 1795, 1797), ("src/parser_intf.ml", 65, 1795, 1842), 0), 0, Tag1 ("Parsexp__Parser_intf", 22)), 0)])), Tag1 ([(("parse_string", 718), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -230), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((("Mode", 693)), "chunk_to_conv"), 0, (0)), 100000000, 0, -229), ((("a")), 100000000, 0, -226), 0), 100000000, 0, -228), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 (Tag1 ((("Mode", 693)), "res"), [((("a")), 100000000, 0, -226)], (0)), 100000000, 0, -225); (Tag3 (Tag1 (Tag1 ((Tag2 ("Parsexp__")), "Conv_error"), "t"), 0, (0)), 100000000, 0, -227)], (0)), 100000000, 0, -224), 0), 100000000, 0, -223), 0), 100000000, 0, -222), 0, (("src/conv_intf.ml", 56, 1521, 1525), ("src/conv_intf.ml", 59, 1623, 1658), 0), 0, Tag1 ("Parsexp__Conv_intf", 3)), 0); (("parse_string_exn", 719), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -221), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((("Mode", 693)), "chunk_to_conv"), 0, (0)), 100000000, 0, -220), ((("a")), 100000000, 0, -218), 0), 100000000, 0, -219), (Tag3 (Tag1 ((("Mode", 693)), "res"), [((("a")), 100000000, 0, -218)], (0)), 100000000, 0, -217), 0), 100000000, 0, -216), 0), 100000000, 0, -215), 0, (("src/conv_intf.ml", 56, 1521, 1525), ("src/conv_intf.ml", 59, 1623, 1658), 0), 0, Tag1 ("Parsexp__Conv_intf", 4)), 0); (("conv", 720), ((Tag1 (0, (Tag2 ([(Tag3 (Tag1 ((("Mode", 693)), "parsed_sexp"), 0, (0)), 100000000, 0, -213); (Tag3 (Tag1 (Tag1 ((Tag2 ("Parsexp__")), "Positions"), "t"), 0, (0)), 100000000, 0, -214)]), 100000000, 0, -212), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((("Mode", 693)), "chunk_to_conv"), 0, (0)), 100000000, 0, -211), ((("a")), 100000000, 0, -208), 0), 100000000, 0, -210), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 (Tag1 ((("Mode", 693)), "res"), [((("a")), 100000000, 0, -208)], (0)), 100000000, 0, -207); (Tag3 (Tag1 (Tag1 ((Tag2 ("Parsexp__")), "Of_sexp_error"), "t"), 0, (0)), 100000000, 0, -209)], (0)), 100000000, 0, -206), 0), 100000000, 0, -205), 0), 100000000, 0, -204), 0, (("src/conv_intf.ml", 56, 1521, 1525), ("src/conv_intf.ml", 59, 1623, 1658), 0), 0, Tag1 ("Parsexp__Conv_intf", 5)), 0); (("conv_exn", 721), ((Tag1 (0, (Tag2 ([(Tag3 (Tag1 ((("Mode", 693)), "parsed_sexp"), 0, (0)), 100000000, 0, -202); (Tag3 (Tag1 (Tag1 ((Tag2 ("Parsexp__")), "Positions"), "t"), 0, (0)), 100000000, 0, -203)]), 100000000, 0, -201), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((("Mode", 693)), "chunk_to_conv"), 0, (0)), 100000000, 0, -200), ((("a")), 100000000, 0, -198), 0), 100000000, 0, -199), (Tag3 (Tag1 ((("Mode", 693)), "res"), [((("a")), 100000000, 0, -198)], (0)), 100000000, 0, -197), 0), 100000000, 0, -196), 0), 100000000, 0, -195), 0, (("src/conv_intf.ml", 56, 1521, 1525), ("src/conv_intf.ml", 59, 1623, 1658), 0), 0, Tag1 ("Parsexp__Conv_intf", 6)), 0); (("conv_combine", 722), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag2 ([(Tag3 (Tag1 ((("Mode", 693)), "parsed_sexp"), 0, (0)), 100000000, 0, -192); (Tag3 (Tag1 (Tag1 ((Tag2 ("Parsexp__")), "Positions"), "t"), 0, (0)), 100000000, 0, -193)]), 100000000, 0, -191); (Tag3 (Tag1 (Tag1 ((Tag2 ("Parsexp__")), "Parse_error"), "t"), 0, (0)), 100000000, 0, -194)], (0)), 100000000, 0, -190), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((("Mode", 693)), "chunk_to_conv"), 0, (0)), 100000000, 0, -189), ((("a")), 100000000, 0, -186), 0), 100000000, 0, -188), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 (Tag1 ((("Mode", 693)), "res"), [((("a")), 100000000, 0, -186)], (0)), 100000000, 0, -185); (Tag3 (Tag1 (Tag1 ((Tag2 ("Parsexp__")), "Conv_error"), "t"), 0, (0)), 100000000, 0, -187)], (0)), 100000000, 0, -184), 0), 100000000, 0, -183), 0), 100000000, 0, -182), 0, (("src/conv_intf.ml", 56, 1521, 1525), ("src/conv_intf.ml", 59, 1623, 1658), 0), 0, Tag1 ("Parsexp__Conv_intf", 7)), 0)])))), 0, (("src/conv_intf.ml", 52, 1339, 1341), ("src/conv_intf.ml", 59, 1623, 1658), 0), Tag1 ("Parsexp__Conv_intf", 25)), 0, 0)])), 0, (("src/conv_intf.ml", 48, 1269, 1269), ("src/conv_intf.ml", 60, 1659, 1662), 0), Tag1 ("Parsexp__Conv_intf", 26)), 0)], "Parsexp__Conv_intf", [("Parsexp__Conv_intf", ("\004r\193,k\2254\168\149\229+hmw\134\228")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("Parsexp__Positions", ("BE\135\222xW\224\233\184\004o\169\248\bH\230")); ("Parsexp__Parser_intf", ("\154\197J\002\004\252i\162\190\241\151\210\157\024\167e")); ("Parsexp__Parser", ("n\164F;=\199\178\019\150]\2502\176\014a\165")); ("Parsexp__Parse_error_intf", ("\011\229\182\179W\161\176\160P\249\165\214ef\011\229")); ("Parsexp__Parse_error", ("*\031\166\142M\171\026\030\\K7\157Y\232\208\234")); ("Parsexp__Old_parser_cont_state", ("\2535&90\136_\154\027}Oc0\138%X")); ("Parsexp__Of_sexp_error", ("\253\171Y\150\210\218\191\255\160\211\134d/l\132\228")); ("Parsexp__Import", ("\017\029\157\225\239\135p*0\207\146\197\020\128\195!")); ("Parsexp__Cst", (")\228;6o~\227\000pRf\153\216\244sD")); ("Parsexp__Conv_error", ("\195Bo\140A|\220\136\210\137\165&!\164\134\021")); ("Parsexp__Automaton_state_intf", ("\196\146]2\143u|+%\027\185v2\225\r\229")); ("Parsexp__Automaton_state", ("L#\030=\218R\022 \228<\188-\r\211\157_")); ("Parsexp__Automaton_stack_intf", ("\235\204\0296]\2449F\029\b:\006\217\162f\024")); ("Parsexp__Automaton_stack", ("\246/\135\251\031)\015r\003\237\254S$\181\243\201")); ("Parsexp__", ("\182\180\203\030\218\020\246\196\221\171_\030GE\171\192")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

  end

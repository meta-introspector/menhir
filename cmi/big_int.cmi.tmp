type big_int
val zero_big_int : big_int
val unit_big_int : big_int
val minus_big_int : big_int -> big_int
val abs_big_int : big_int -> big_int
val add_big_int : big_int -> big_int -> big_int
val succ_big_int : big_int -> big_int
val add_int_big_int : int -> big_int -> big_int
val sub_big_int : big_int -> big_int -> big_int
val pred_big_int : big_int -> big_int
val mult_big_int : big_int -> big_int -> big_int
val mult_int_big_int : int -> big_int -> big_int
val square_big_int : big_int -> big_int
val sqrt_big_int : big_int -> big_int
val quomod_big_int : big_int -> big_int -> big_int * big_int
val div_big_int : big_int -> big_int -> big_int
val mod_big_int : big_int -> big_int -> big_int
val gcd_big_int : big_int -> big_int -> big_int
val power_int_positive_int : int -> int -> big_int
val power_big_int_positive_int : big_int -> int -> big_int
val power_int_positive_big_int : int -> big_int -> big_int
val power_big_int_positive_big_int : big_int -> big_int -> big_int
val sign_big_int : big_int -> int
val compare_big_int : big_int -> big_int -> int
val eq_big_int : big_int -> big_int -> bool
val le_big_int : big_int -> big_int -> bool
val ge_big_int : big_int -> big_int -> bool
val lt_big_int : big_int -> big_int -> bool
val gt_big_int : big_int -> big_int -> bool
val max_big_int : big_int -> big_int -> big_int
val min_big_int : big_int -> big_int -> big_int
val num_digits_big_int : big_int -> int
val num_bits_big_int : big_int -> int
val string_of_big_int : big_int -> string
val big_int_of_string : string -> big_int
val big_int_of_string_opt : string -> big_int option
val big_int_of_int : int -> big_int
val is_int_big_int : big_int -> bool
val int_of_big_int : big_int -> int
val int_of_big_int_opt : big_int -> int option
val big_int_of_int32 : int32 -> big_int
val big_int_of_nativeint : nativeint -> big_int
val big_int_of_int64 : int64 -> big_int
val int32_of_big_int : big_int -> int32
val int32_of_big_int_opt : big_int -> int32 option
val nativeint_of_big_int : big_int -> nativeint
val nativeint_of_big_int_opt : big_int -> nativeint option
val int64_of_big_int : big_int -> int64
val int64_of_big_int_opt : big_int -> int64 option
val float_of_big_int : big_int -> float
val and_big_int : big_int -> big_int -> big_int
val or_big_int : big_int -> big_int -> big_int
val xor_big_int : big_int -> big_int -> big_int
val shift_left_big_int : big_int -> int -> big_int
val shift_right_big_int : big_int -> int -> big_int
val shift_right_towards_zero_big_int : big_int -> int -> big_int
val extract_big_int : big_int -> int -> int -> big_int
val nat_of_big_int : big_int -> Nat.nat
val big_int_of_nat : Nat.nat -> big_int
val base_power_big_int : int -> int -> big_int -> big_int
val sys_big_int_of_string : string -> int -> int -> big_int
val round_futur_last_digit : bytes -> int -> int -> bool
val approx_big_int : int -> big_int -> string
("DEBUG:rule", [Tag1 (("big_int", 385), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("big_int.mli", 23, 1214, 1214), ("big_int.mli", 23, 1214, 1226), 0), 0, 0, 0, Tag1 ("Big_int", 0)), 1, 0); (("zero_big_int", 386), ((Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -267), 0, (("big_int.mli", 26, 1269, 1269), ("big_int.mli", 26, 1269, 1295), 0), 0, Tag1 ("Big_int", 1)), 0); (("unit_big_int", 387), ((Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -266), 0, (("big_int.mli", 29, 1325, 1325), ("big_int.mli", 29, 1325, 1351), 0), 0, Tag1 ("Big_int", 2)), 0); (("minus_big_int", 388), ((Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -265), (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -264), 0), 100000000, 0, -263), 0, (("big_int.mli", 34, 1423, 1423), ("big_int.mli", 34, 1423, 1461), 0), 0, Tag1 ("Big_int", 3)), 0); (("abs_big_int", 389), ((Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -262), (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -261), 0), 100000000, 0, -260), 0, (("big_int.mli", 37, 1486, 1486), ("big_int.mli", 37, 1486, 1522), 0), 0, Tag1 ("Big_int", 4)), 0); (("add_big_int", 390), ((Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -259), (Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -258), (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -257), 0), 100000000, 0, -256), 0), 100000000, 0, -255), 0, (("big_int.mli", 40, 1547, 1547), ("big_int.mli", 40, 1547, 1594), 0), 0, Tag1 ("Big_int", 5)), 0); (("succ_big_int", 391), ((Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -254), (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -253), 0), 100000000, 0, -252), 0, (("big_int.mli", 43, 1613, 1613), ("big_int.mli", 43, 1613, 1650), 0), 0, Tag1 ("Big_int", 6)), 0); (("add_int_big_int", 392), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -251), (Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -250), (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -249), 0), 100000000, 0, -248), 0), 100000000, 0, -247), 0, (("big_int.mli", 46, 1678, 1678), ("big_int.mli", 46, 1678, 1725), 0), 0, Tag1 ("Big_int", 7)), 0); (("sub_big_int", 393), ((Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -246), (Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -245), (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -244), 0), 100000000, 0, -243), 0), 100000000, 0, -242), 0, (("big_int.mli", 49, 1780, 1780), ("big_int.mli", 49, 1780, 1827), 0), 0, Tag1 ("Big_int", 8)), 0); (("pred_big_int", 394), ((Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -241), (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -240), 0), 100000000, 0, -239), 0, (("big_int.mli", 52, 1849, 1849), ("big_int.mli", 52, 1849, 1886), 0), 0, Tag1 ("Big_int", 9)), 0); (("mult_big_int", 395), ((Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -238), (Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -237), (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -236), 0), 100000000, 0, -235), 0), 100000000, 0, -234), 0, (("big_int.mli", 55, 1921, 1921), ("big_int.mli", 55, 1921, 1969), 0), 0, Tag1 ("Big_int", 10)), 0); (("mult_int_big_int", 396), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -233), (Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -232), (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -231), 0), 100000000, 0, -230), 0), 100000000, 0, -229), 0, (("big_int.mli", 58, 2014, 2014), ("big_int.mli", 58, 2014, 2062), 0), 0, Tag1 ("Big_int", 11)), 0); (("square_big_int", 397), ((Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -228), (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -227), 0), 100000000, 0, -226), 0, (("big_int.mli", 61, 2122, 2122), ("big_int.mli", 61, 2122, 2160), 0), 0, Tag1 ("Big_int", 12)), 0); (("sqrt_big_int", 398), ((Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -225), (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -224), 0), 100000000, 0, -223), 0, (("big_int.mli", 64, 2212, 2212), ("big_int.mli", 64, 2212, 2248), 0), 0, Tag1 ("Big_int", 13)), 0); (("quomod_big_int", 399), ((Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -222), (Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -221), (Tag2 ([(Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -219); (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -220)]), 100000000, 0, -218), 0), 100000000, 0, -217), 0), 100000000, 0, -216), 0, (("big_int.mli", 69, 2451, 2451), ("big_int.mli", 69, 2451, 2511), 0), 0, Tag1 ("Big_int", 14)), 0); (("div_big_int", 400), ((Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -215), (Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -214), (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -213), 0), 100000000, 0, -212), 0), 100000000, 0, -211), 0, (("big_int.mli", 77, 2835, 2835), ("big_int.mli", 77, 2835, 2882), 0), 0, Tag1 ("Big_int", 15)), 0); (("mod_big_int", 401), ((Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -210), (Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -209), (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -208), 0), 100000000, 0, -207), 0), 100000000, 0, -206), 0, (("big_int.mli", 81, 3013, 3013), ("big_int.mli", 81, 3013, 3060), 0), 0, Tag1 ("Big_int", 16)), 0); (("gcd_big_int", 402), ((Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -205), (Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -204), (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -203), 0), 100000000, 0, -202), 0), 100000000, 0, -201), 0, (("big_int.mli", 85, 3191, 3191), ("big_int.mli", 85, 3191, 3238), 0), 0, Tag1 ("Big_int", 17)), 0); (("power_int_positive_int", 403), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -200), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -199), (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -198), 0), 100000000, 0, -197), 0), 100000000, 0, -196), 0, (("big_int.mli", 88, 3292, 3292), ("big_int.mli", 88, 3292, 3341), 0), 0, Tag1 ("Big_int", 18)), 0); (("power_big_int_positive_int", 404), ((Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -195), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -194), (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -193), 0), 100000000, 0, -192), 0), 100000000, 0, -191), 0, (("big_int.mli", 89, 3342, 3342), ("big_int.mli", 89, 3342, 3399), 0), 0, Tag1 ("Big_int", 19)), 0); (("power_int_positive_big_int", 405), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -190), (Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -189), (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -188), 0), 100000000, 0, -187), 0), 100000000, 0, -186), 0, (("big_int.mli", 90, 3400, 3400), ("big_int.mli", 90, 3400, 3457), 0), 0, Tag1 ("Big_int", 20)), 0); (("power_big_int_positive_big_int", 406), ((Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -185), (Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -184), (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -183), 0), 100000000, 0, -182), 0), 100000000, 0, -181), 0, (("big_int.mli", 91, 3458, 3458), ("big_int.mli", 91, 3458, 3523), 0), 0, Tag1 ("Big_int", 21)), 0); (("sign_big_int", 407), ((Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -180), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -179), 0), 100000000, 0, -178), 0, (("big_int.mli", 100, 3883, 3883), ("big_int.mli", 100, 3883, 3916), 0), 0, Tag1 ("Big_int", 22)), 0); (("compare_big_int", 408), ((Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -177), (Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -176), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -175), 0), 100000000, 0, -174), 0), 100000000, 0, -173), 0, (("big_int.mli", 104, 4041, 4041), ("big_int.mli", 104, 4041, 4088), 0), 0, Tag1 ("Big_int", 23)), 0); (("eq_big_int", 409), ((Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -172), (Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -171), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -170), 0), 100000000, 0, -169), 0), 100000000, 0, -168), 0, (("big_int.mli", 109, 4257, 4257), ("big_int.mli", 109, 4257, 4300), 0), 0, Tag1 ("Big_int", 24)), 0); (("le_big_int", 410), ((Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -167), (Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -166), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -165), 0), 100000000, 0, -164), 0), 100000000, 0, -163), 0, (("big_int.mli", 110, 4301, 4301), ("big_int.mli", 110, 4301, 4344), 0), 0, Tag1 ("Big_int", 25)), 0); (("ge_big_int", 411), ((Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -162), (Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -161), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -160), 0), 100000000, 0, -159), 0), 100000000, 0, -158), 0, (("big_int.mli", 111, 4345, 4345), ("big_int.mli", 111, 4345, 4388), 0), 0, Tag1 ("Big_int", 26)), 0); (("lt_big_int", 412), ((Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -157), (Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -156), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -155), 0), 100000000, 0, -154), 0), 100000000, 0, -153), 0, (("big_int.mli", 112, 4389, 4389), ("big_int.mli", 112, 4389, 4432), 0), 0, Tag1 ("Big_int", 27)), 0); (("gt_big_int", 413), ((Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -152), (Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -151), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -150), 0), 100000000, 0, -149), 0), 100000000, 0, -148), 0, (("big_int.mli", 113, 4433, 4433), ("big_int.mli", 113, 4433, 4476), 0), 0, Tag1 ("Big_int", 28)), 0); (("max_big_int", 414), ((Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -147), (Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -146), (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -145), 0), 100000000, 0, -144), 0), 100000000, 0, -143), 0, (("big_int.mli", 116, 4537, 4537), ("big_int.mli", 116, 4537, 4584), 0), 0, Tag1 ("Big_int", 29)), 0); (("min_big_int", 415), ((Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -142), (Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -141), (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -140), 0), 100000000, 0, -139), 0), 100000000, 0, -138), 0, (("big_int.mli", 119, 4634, 4634), ("big_int.mli", 119, 4634, 4681), 0), 0, Tag1 ("Big_int", 30)), 0); (("num_digits_big_int", 416), ((Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -137), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -136), 0), 100000000, 0, -135), 0, (("big_int.mli", 122, 4731, 4731), ("big_int.mli", 122, 4731, 4770), 0), 0, Tag1 ("Big_int", 31)), 0); (("num_bits_big_int", 417), ((Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -134), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -133), 0), 100000000, 0, -132), 0, (("big_int.mli", 126, 4872, 4872), ("big_int.mli", 126, 4872, 4909), 0), 0, Tag1 ("Big_int", 32)), 0); (("string_of_big_int", 418), ((Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -131), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -130), 0), 100000000, 0, -129), 0, (("big_int.mli", 136, 5242, 5242), ("big_int.mli", 136, 5242, 5283), 0), 0, Tag1 ("Big_int", 33)), 0); (("big_int_of_string", 419), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -128), (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -127), 0), 100000000, 0, -126), 0, (("big_int.mli", 140, 5393, 5393), ("big_int.mli", 140, 5393, 5434), 0), 0, Tag1 ("Big_int", 34)), 0); (("big_int_of_string_opt", 420), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -125), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -124)], (0)), 100000000, 0, -123), 0), 100000000, 0, -122), 0, (("big_int.mli", 146, 5653, 5653), ("big_int.mli", 146, 5653, 5704), 0), 0, Tag1 ("Big_int", 35)), 0); (("big_int_of_int", 421), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -121), (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -120), 0), 100000000, 0, -119), 0, (("big_int.mli", 157, 5977, 5977), ("big_int.mli", 157, 5977, 6012), 0), 0, Tag1 ("Big_int", 36)), 0); (("is_int_big_int", 422), ((Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -118), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -117), 0), 100000000, 0, -116), 0, (("big_int.mli", 160, 6063, 6063), ("big_int.mli", 160, 6063, 6099), 0), 0, Tag1 ("Big_int", 37)), 0); (("int_of_big_int", 423), ((Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -115), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -114), 0), 100000000, 0, -113), 0, (("big_int.mli", 169, 6530, 6530), ("big_int.mli", 169, 6530, 6565), 0), 0, Tag1 ("Big_int", 38)), 0); (("int_of_big_int_opt", 424), ((Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -112), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -111)], (0)), 100000000, 0, -110), 0), 100000000, 0, -109), 0, (("big_int.mli", 174, 6753, 6753), ("big_int.mli", 174, 6753, 6798), 0), 0, Tag1 ("Big_int", 39)), 0); (("big_int_of_int32", 425), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -108), (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -107), 0), 100000000, 0, -106), 0, (("big_int.mli", 181, 6961, 6961), ("big_int.mli", 181, 6961, 7000), 0), 0, Tag1 ("Big_int", 40)), 0); (("big_int_of_nativeint", 426), ((Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -105), (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -104), 0), 100000000, 0, -103), 0, (("big_int.mli", 184, 7052, 7052), ("big_int.mli", 184, 7052, 7099), 0), 0, Tag1 ("Big_int", 41)), 0); (("big_int_of_int64", 427), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -102), (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -101), 0), 100000000, 0, -100), 0, (("big_int.mli", 187, 7151, 7151), ("big_int.mli", 187, 7151, 7190), 0), 0, Tag1 ("Big_int", 42)), 0); (("int32_of_big_int", 428), ((Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -99), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -98), 0), 100000000, 0, -97), 0, (("big_int.mli", 190, 7242, 7242), ("big_int.mli", 190, 7242, 7281), 0), 0, Tag1 ("Big_int", 43)), 0); (("int32_of_big_int_opt", 429), ((Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -96), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -95)], (0)), 100000000, 0, -94), 0), 100000000, 0, -93), 0, (("big_int.mli", 195, 7445, 7445), ("big_int.mli", 195, 7445, 7494), 0), 0, Tag1 ("Big_int", 44)), 0); (("nativeint_of_big_int", 430), ((Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -92), (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -91), 0), 100000000, 0, -90), 0, (("big_int.mli", 201, 7644, 7644), ("big_int.mli", 201, 7644, 7691), 0), 0, Tag1 ("Big_int", 45)), 0); (("nativeint_of_big_int_opt", 431), ((Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -89), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -88)], (0)), 100000000, 0, -87), 0), 100000000, 0, -86), 0, (("big_int.mli", 206, 7874, 7874), ("big_int.mli", 206, 7874, 7931), 0), 0, Tag1 ("Big_int", 46)), 0); (("int64_of_big_int", 432), ((Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -85), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -84), 0), 100000000, 0, -83), 0, (("big_int.mli", 213, 8103, 8103), ("big_int.mli", 213, 8103, 8142), 0), 0, Tag1 ("Big_int", 47)), 0); (("int64_of_big_int_opt", 433), ((Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -82), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -81)], (0)), 100000000, 0, -80), 0), 100000000, 0, -79), 0, (("big_int.mli", 218, 8306, 8306), ("big_int.mli", 218, 8306, 8355), 0), 0, Tag1 ("Big_int", 48)), 0); (("float_of_big_int", 434), ((Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -78), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -77), 0), 100000000, 0, -76), 0, (("big_int.mli", 224, 8504, 8504), ("big_int.mli", 224, 8504, 8543), 0), 0, Tag1 ("Big_int", 49)), 0); (("and_big_int", 435), ((Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -75), (Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -74), (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -73), 0), 100000000, 0, -72), 0), 100000000, 0, -71), 0, (("big_int.mli", 230, 8676, 8676), ("big_int.mli", 230, 8676, 8723), 0), 0, Tag1 ("Big_int", 50)), 0); (("or_big_int", 436), ((Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -70), (Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -69), (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -68), 0), 100000000, 0, -67), 0), 100000000, 0, -66), 0, (("big_int.mli", 234, 8815, 8815), ("big_int.mli", 234, 8815, 8861), 0), 0, Tag1 ("Big_int", 51)), 0); (("xor_big_int", 437), ((Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -65), (Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -64), (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -63), 0), 100000000, 0, -62), 0), 100000000, 0, -61), 0, (("big_int.mli", 238, 8952, 8952), ("big_int.mli", 238, 8952, 8999), 0), 0, Tag1 ("Big_int", 52)), 0); (("shift_left_big_int", 438), ((Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -60), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -59), (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -58), 0), 100000000, 0, -57), 0), 100000000, 0, -56), 0, (("big_int.mli", 242, 9100, 9100), ("big_int.mli", 242, 9100, 9150), 0), 0, Tag1 ("Big_int", 53)), 0); (("shift_right_big_int", 439), ((Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -55), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -54), (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -53), 0), 100000000, 0, -52), 0), 100000000, 0, -51), 0, (("big_int.mli", 246, 9279, 9279), ("big_int.mli", 246, 9279, 9330), 0), 0, Tag1 ("Big_int", 54)), 0); (("shift_right_towards_zero_big_int", 440), ((Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -50), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -49), (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -48), 0), 100000000, 0, -47), 0), 100000000, 0, -46), 0, (("big_int.mli", 251, 9520, 9520), ("big_int.mli", 251, 9520, 9584), 0), 0, Tag1 ("Big_int", 55)), 0); (("extract_big_int", 441), ((Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -45), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -44), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -43), (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -42), 0), 100000000, 0, -41), 0), 100000000, 0, -40), 0), 100000000, 0, -39), 0, (("big_int.mli", 258, 9896, 9896), ("big_int.mli", 258, 9896, 9950), 0), 0, Tag1 ("Big_int", 56)), 0); (("nat_of_big_int", 442), ((Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -38), (Tag3 (Tag1 ((Tag2 ("Nat")), "nat"), 0, (0)), 100000000, 0, -37), 0), 100000000, 0, -36), 0, (("big_int.mli", 268, 10245, 10245), ("big_int.mli", 268, 10245, 10280), 0), 0, Tag1 ("Big_int", 57)), 0); (("big_int_of_nat", 443), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Nat")), "nat"), 0, (0)), 100000000, 0, -35), (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -34), 0), 100000000, 0, -33), 0, (("big_int.mli", 269, 10281, 10281), ("big_int.mli", 269, 10281, 10316), 0), 0, Tag1 ("Big_int", 58)), 0); (("base_power_big_int", 444), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -32), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -31), (Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -30), (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -29), 0), 100000000, 0, -28), 0), 100000000, 0, -27), 0), 100000000, 0, -26), 0, (("big_int.mli", 270, 10317, 10317), ("big_int.mli", 270, 10317, 10373), 0), 0, Tag1 ("Big_int", 59)), 0); (("sys_big_int_of_string", 445), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -25), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -24), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -23), (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0), 100000000, 0, -20), 0), 100000000, 0, -19), 0, (("big_int.mli", 271, 10374, 10374), ("big_int.mli", 271, 10374, 10432), 0), 0, Tag1 ("Big_int", 60)), 0); (("round_futur_last_digit", 446), ((Tag1 (0, (Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -18), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -17), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -16), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -15), 0), 100000000, 0, -14), 0), 100000000, 0, -13), 0), 100000000, 0, -12), 0, (("big_int.mli", 272, 10433, 10433), ("big_int.mli", 272, 10433, 10489), 0), 0, Tag1 ("Big_int", 61)), 0); (("approx_big_int", 447), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -11), (Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -10), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0), 100000000, 0, -7), 0, (("big_int.mli", 273, 10490, 10490), ("big_int.mli", 273, 10490, 10534), 0), 0, Tag1 ("Big_int", 62)), 0); (("round_big_int_to_float", 448), ((Tag1 (0, (Tag3 ((("big_int", 385)), 0, (0)), 100000000, 0, -6), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -5), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("big_int.mli", 275, 10536, 10536), ("big_int.mli", 275, 10536, 10588), 0), 0, Tag1 ("Big_int", 63)), 0)], "Big_int", [("Big_int", ("t\020\020^p\161P\198\185\167\t\215\248\017\232\207")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Nat", ("\158\218\202\184\174E)\133)>\025\209\140\204/Z")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
val round_big_int_to_float : big_int -> bool -> float

type ('a, 'b) result = Ok of 'a | Error of 'b
type alphabet
type sub = string * int * int
val default_alphabet : alphabet
val uri_safe_alphabet : alphabet
val make_alphabet : string -> alphabet
val length_alphabet : alphabet -> int
val alphabet : alphabet -> int array
val decode_exn :
  ?pad:bool -> ?alphabet:alphabet -> ?off:int -> ?len:int -> string -> string
val decode_sub :
  ?pad:bool ->
  ?alphabet:alphabet ->
  ?off:int -> ?len:int -> string -> (sub, [ `Msg of string ]) result
val decode :
  ?pad:bool ->
  ?alphabet:alphabet ->
  ?off:int -> ?len:int -> string -> (string, [ `Msg of string ]) result
val encode :
  ?pad:bool ->
  ?alphabet:alphabet ->
  ?off:int -> ?len:int -> string -> (string, [ `Msg of string ]) result
val encode_string : ?pad:bool -> ?alphabet:alphabet -> string -> string
val encode_sub :
  ?pad:bool ->
  ?alphabet:alphabet ->
  ?off:int -> ?len:int -> string -> (sub, [ `Msg of string ]) result
val encode_exn :
  ("DEBUG:rule", [Tag1 (("result", 353), ([((("a")), 100000000, 0, -133); ((("b")), 100000000, 0, -134)], 2, Tag1 ([(("Ok", 337), ([((("a")), 100000000, 0, -133)]), 0, (("compiler/lib/base64.mli", 30, 1336, 1338), ("compiler/lib/base64.mli", 30, 1336, 1348), 0), 0, Tag1 ("Js_of_ocaml_compiler__Base64", 1)); (("Error", 338), ([((("b")), 100000000, 0, -134)]), 0, (("compiler/lib/base64.mli", 31, 1349, 1351), ("compiler/lib/base64.mli", 31, 1349, 1364), 0), 0, Tag1 ("Js_of_ocaml_compiler__Base64", 2))], 0), 1, 0, [25; 25], [0; 0], 0, 0, (("compiler/lib/base64.mli", 29, 1313, 1313), ("compiler/lib/base64.mli", 31, 1349, 1364), 0), 0, 0, 0, Tag1 ("Js_of_ocaml_compiler__Base64", 0)), 1, 0); Tag1 (("alphabet", 354), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("compiler/lib/base64.mli", 33, 1366, 1366), ("compiler/lib/base64.mli", 33, 1366, 1379), 0), 0, 0, 0, Tag1 ("Js_of_ocaml_compiler__Base64", 3)), 1, 0); Tag1 (("sub", 355), (0, 0, 0, 1, ((Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -130); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -131); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -132)]), 100000000, 0, -129)), 0, 0, 0, 0, (("compiler/lib/base64.mli", 36, 1406, 1406), ("compiler/lib/base64.mli", 36, 1406, 1435), 0), 0, 0, 0, Tag1 ("Js_of_ocaml_compiler__Base64", 4)), 1, 0); (("default_alphabet", 356), ((Tag3 ((("alphabet", 354)), 0, (0)), 100000000, 0, -128), 0, (("compiler/lib/base64.mli", 39, 1481, 1481), ("compiler/lib/base64.mli", 39, 1481, 1512), 0), 0, Tag1 ("Js_of_ocaml_compiler__Base64", 5)), 0); (("uri_safe_alphabet", 357), ((Tag3 ((("alphabet", 354)), 0, (0)), 100000000, 0, -127), 0, (("compiler/lib/base64.mli", 42, 1585, 1585), ("compiler/lib/base64.mli", 42, 1585, 1617), 0), 0, Tag1 ("Js_of_ocaml_compiler__Base64", 6)), 0); (("make_alphabet", 358), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -126), (Tag3 ((("alphabet", 354)), 0, (0)), 100000000, 0, -125), 0), 100000000, 0, -124), 0, (("compiler/lib/base64.mli", 46, 1709, 1709), ("compiler/lib/base64.mli", 46, 1709, 1747), 0), 0, Tag1 ("Js_of_ocaml_compiler__Base64", 7)), 0); (("length_alphabet", 359), ((Tag1 (0, (Tag3 ((("alphabet", 354)), 0, (0)), 100000000, 0, -123), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -122), 0), 100000000, 0, -121), 0, (("compiler/lib/base64.mli", 49, 1777, 1777), ("compiler/lib/base64.mli", 49, 1777, 1814), 0), 0, Tag1 ("Js_of_ocaml_compiler__Base64", 8)), 0); (("alphabet", 360), ((Tag1 (0, (Tag3 ((("alphabet", 354)), 0, (0)), 100000000, 0, -120), (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -119)], (0)), 100000000, 0, -118), 0), 100000000, 0, -117), 0, (("compiler/lib/base64.mli", 52, 1869, 1869), ("compiler/lib/base64.mli", 52, 1869, 1905), 0), 0, Tag1 ("Js_of_ocaml_compiler__Base64", 9)), 0); (("decode_exn", 361), ((Tag1 (Tag1 ("pad"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -116)], (0)), 100000000, 0, -115), (Tag1 (Tag1 ("alphabet"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("alphabet", 354)), 0, (0)), 100000000, 0, -114)], (0)), 100000000, 0, -113), (Tag1 (Tag1 ("off"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -112)], (0)), 100000000, 0, -111), (Tag1 (Tag1 ("len"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -110)], (0)), 100000000, 0, -109), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -108), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -107), 0), 100000000, 0, -106), 0), 100000000, 0, -105), 0), 100000000, 0, -104), 0), 100000000, 0, -103), 0), 100000000, 0, -102), 0, (("compiler/lib/base64.mli", 55, 1936, 1936), ("compiler/lib/base64.mli", 56, 1953, 2030), 0), 0, Tag1 ("Js_of_ocaml_compiler__Base64", 10)), 0); (("decode_sub", 362), ((Tag1 (Tag1 ("pad"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -101)], (0)), 100000000, 0, -100), (Tag1 (Tag1 ("alphabet"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("alphabet", 354)), 0, (0)), 100000000, 0, -99)], (0)), 100000000, 0, -98), (Tag1 (Tag1 ("off"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -97)], (0)), 100000000, 0, -96), (Tag1 (Tag1 ("len"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -95)], (0)), 100000000, 0, -94), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -93), (Tag3 ((("result", 353)), [(Tag3 ((("sub", 355)), 0, (0)), 100000000, 0, -89); (Tag8 (([("Msg", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -92))))], (0, 100000000, 0, -91), 1, 0, 0)), 100000000, 0, -90)], (0)), 100000000, 0, -88), 0), 100000000, 0, -87), 0), 100000000, 0, -86), 0), 100000000, 0, -85), 0), 100000000, 0, -84), 0), 100000000, 0, -83), 0, (("compiler/lib/base64.mli", 70, 2758, 2758), ("compiler/lib/base64.mli", 76, 2854, 2891), 0), 0, Tag1 ("Js_of_ocaml_compiler__Base64", 11)), 0); (("decode", 363), ((Tag1 (Tag1 ("pad"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -82)], (0)), 100000000, 0, -81), (Tag1 (Tag1 ("alphabet"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("alphabet", 354)), 0, (0)), 100000000, 0, -80)], (0)), 100000000, 0, -79), (Tag1 (Tag1 ("off"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -78)], (0)), 100000000, 0, -77), (Tag1 (Tag1 ("len"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -76)], (0)), 100000000, 0, -75), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -74), (Tag3 ((("result", 353)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -70); (Tag8 (([("Msg", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -73))))], (0, 100000000, 0, -72), 1, 0, 0)), 100000000, 0, -71)], (0)), 100000000, 0, -69), 0), 100000000, 0, -68), 0), 100000000, 0, -67), 0), 100000000, 0, -66), 0), 100000000, 0, -65), 0), 100000000, 0, -64), 0, (("compiler/lib/base64.mli", 82, 3168, 3168), ("compiler/lib/base64.mli", 88, 3260, 3300), 0), 0, Tag1 ("Js_of_ocaml_compiler__Base64", 12)), 0); (("encode", 364), ((Tag1 (Tag1 ("pad"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -63)], (0)), 100000000, 0, -62), (Tag1 (Tag1 ("alphabet"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("alphabet", 354)), 0, (0)), 100000000, 0, -61)], (0)), 100000000, 0, -60), (Tag1 (Tag1 ("off"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -59)], (0)), 100000000, 0, -58), (Tag1 (Tag1 ("len"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -57)], (0)), 100000000, 0, -56), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -55), (Tag3 ((("result", 353)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -51); (Tag8 (([("Msg", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -54))))], (0, 100000000, 0, -53), 1, 0, 0)), 100000000, 0, -52)], (0)), 100000000, 0, -50), 0), 100000000, 0, -49), 0), 100000000, 0, -48), 0), 100000000, 0, -47), 0), 100000000, 0, -46), 0), 100000000, 0, -45), 0, (("compiler/lib/base64.mli", 91, 3393, 3393), ("compiler/lib/base64.mli", 97, 3485, 3525), 0), 0, Tag1 ("Js_of_ocaml_compiler__Base64", 13)), 0); (("encode_string", 365), ((Tag1 (Tag1 ("pad"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -44)], (0)), 100000000, 0, -43), (Tag1 (Tag1 ("alphabet"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("alphabet", 354)), 0, (0)), 100000000, 0, -42)], (0)), 100000000, 0, -41), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -40), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -39), 0), 100000000, 0, -38), 0), 100000000, 0, -37), 0), 100000000, 0, -36), 0, (("compiler/lib/base64.mli", 104, 3783, 3783), ("compiler/lib/base64.mli", 104, 3783, 3854), 0), 0, Tag1 ("Js_of_ocaml_compiler__Base64", 14)), 0); (("encode_sub", 366), ((Tag1 (Tag1 ("pad"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -35)], (0)), 100000000, 0, -34), (Tag1 (Tag1 ("alphabet"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("alphabet", 354)), 0, (0)), 100000000, 0, -33)], (0)), 100000000, 0, -32), (Tag1 (Tag1 ("off"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -31)], (0)), 100000000, 0, -30), (Tag1 (Tag1 ("len"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -29)], (0)), 100000000, 0, -28), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -27), (Tag3 ((("result", 353)), [(Tag3 ((("sub", 355)), 0, (0)), 100000000, 0, -23); (Tag8 (([("Msg", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -26))))], (0, 100000000, 0, -25), 1, 0, 0)), 100000000, 0, -24)], (0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0), 100000000, 0, -20), 0), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("compiler/lib/base64.mli", 109, 4039, 4039), ("compiler/lib/base64.mli", 115, 4135, 4172), 0), 0, Tag1 ("Js_of_ocaml_compiler__Base64", 15)), 0); (("encode_exn", 367), ((Tag1 (Tag1 ("pad"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -16)], (0)), 100000000, 0, -15), (Tag1 (Tag1 ("alphabet"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("alphabet", 354)), 0, (0)), 100000000, 0, -14)], (0)), 100000000, 0, -13), (Tag1 (Tag1 ("off"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12)], (0)), 100000000, 0, -11), (Tag1 (Tag1 ("len"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -10)], (0)), 100000000, 0, -9), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -8), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("compiler/lib/base64.mli", 119, 4311, 4311), ("compiler/lib/base64.mli", 120, 4328, 4405), 0), 0, Tag1 ("Js_of_ocaml_compiler__Base64", 16)), 0)], "Js_of_ocaml_compiler__Base64", [("Js_of_ocaml_compiler__Base64", ("f}\251i\154\226\207\216\246\244\214\229\164v;\137")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Js_of_ocaml_compiler", ("\140\150\022\231\129$!^\139\156\170\236r\184~q")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
?pad:bool -> ?alphabet:alphabet -> ?off:int -> ?len:int -> string -> string

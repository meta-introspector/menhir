type 'a t = 'a option = None | Some of 'a
val compare :
  'a Base__Ppx_compare_lib.compare -> 'a t Base__Ppx_compare_lib.compare
val globalize : ('a -> 'a) -> 'a t -> 'a t
val hash_fold_t :
  'a Base__Ppx_hash_lib.hash_fold -> 'a t Base__Ppx_hash_lib.hash_fold
val t_sexp_grammar :
  'a Sexplib0.Sexp_grammar.t -> 'a t Sexplib0.Sexp_grammar.t
val equal : 'a Base__Equal.equal -> 'a t Base__Equal.equal
val invariant : 'a Base__Invariant_intf.inv -> 'a t Base__Invariant_intf.inv
val t_of_sexp : (Sexplib0__.Sexp.t -> 'a) -> Sexplib0__.Sexp.t -> 'a t
val sexp_of_t : ('a -> Sexplib0__.Sexp.t) -> 'a t -> Sexplib0__.Sexp.t
val both : 'a t -> 'b t -> ('a * 'b) t
val ( <*> ) : ('a -> 'b) t -> 'a t -> 'b t
val ( <* ) : 'a t -> unit t -> 'a t
val ( *> ) : unit t -> 'a t -> 'a t
val apply : ('a -> 'b) t -> 'a t -> 'b t
val map2 : 'a t -> 'b t -> f:('a -> 'b -> 'c) -> 'c t
val map3 : 'a t -> 'b t -> 'c t -> f:('a -> 'b -> 'c -> 'd) -> 'd t
module Applicative_infix :
  sig
    val ( <*> ) : ('a -> 'b) t -> 'a t -> 'b t
    val ( <* ) : 'a t -> unit t -> 'a t
    val ( *> ) : unit t -> 'a t -> 'a t
    val ( >>| ) : 'a t -> ('a -> 'b) -> 'b t
  end
val ( >>= ) : 'a t -> ('a -> 'b t) -> 'b t
val ( >>| ) : 'a t -> ('a -> 'b) -> 'b t
module Monad_infix :
  sig
    val ( >>= ) : 'a t -> ('a -> 'b t) -> 'b t
    val ( >>| ) : 'a t -> ('a -> 'b) -> 'b t
  end
val bind : 'a t -> f:('a -> 'b t) -> 'b t
val return : 'a -> 'a t
val map : 'a t -> f:('a -> 'b) -> 'b t
val join : 'a t t -> 'a t
val ignore_m : 'a t -> unit t
val all : 'a t list -> 'a list t
val all_unit : unit t list -> unit t
module Let_syntax :
  sig
    val return : 'a -> 'a t
    val ( >>= ) : 'a t -> ('a -> 'b t) -> 'b t
    val ( >>| ) : 'a t -> ('a -> 'b) -> 'b t
    module Let_syntax :
      sig
        val return : 'a -> 'a t
        val bind : 'a t -> f:('a -> 'b t) -> 'b t
        val map : 'a t -> f:('a -> 'b) -> 'b t
        val both : 'a t -> 'b t -> ('a * 'b) t
        module Open_on_rhs : sig end
      end
  end
val value : 'a t -> default:'a -> 'a
val value_exn :
  ?here:Base__.Source_code_position0.t ->
  ?error:Base__.Error.t -> ?message:string -> 'a t -> 'a
val value_map : 'a t -> default:'b -> f:('a -> 'b) -> 'b
val value_or_thunk : 'a t -> default:(unit -> 'a) -> 'a
val fold : 'a t -> init:'acc -> f:('acc -> 'a -> 'acc) -> 'acc
val mem : 'a t -> 'a -> equal:('a -> 'a -> bool) -> bool
val length : 'a t -> int
val iter : 'a t -> f:('a -> unit) -> unit
val exists : 'a t -> f:('a -> bool) -> bool
val for_all : 'a t -> f:('a -> bool) -> bool
val find : 'a t -> f:('a -> bool) -> 'a option
val find_map : 'a t -> f:('a -> 'b option) -> 'b option
val to_list : 'a t -> 'a list
val to_array : 'a t -> 'a array
val call : 'a -> f:('a -> unit) t -> unit
val merge : 'a t -> 'a t -> f:('a -> 'a -> 'a) -> 'a t
val filter : 'a t -> f:('a -> bool) -> 'a t
val try_with : (unit -> 'a) -> 'a t
val try_with_join : (unit -> 'a t) -> 'a t
val some : 'a -> 'a t
val first_some : 'a t -> 'a t -> 'a t
val some_if : bool -> 'a -> 'a t
val is_none : 'a t -> bool
val is_some : 'a t -> bool
val is_empty : 'a t -> bool
val fold_result :
  'a t ->
  init:'acc ->
  f:('acc -> 'a -> ('acc, 'e) Base__.Result.t) -> ('acc, 'e) Base__.Result.t
val fold_until :
  'a t ->
  init:'acc ->
  f:('acc -> 'a -> ('acc, 'final) Base__.Container.Continue_or_stop.t) ->
  finish:('acc -> 'final) -> 'final
val min_elt : 'a t -> compare:('a -> 'a -> int) -> 'a option
val max_elt : 'a t -> compare:('a -> 'a -> int) -> 'a option
val count : 'a t -> f:('a -> bool) -> int
val sum :
  (module Base__.Container.Summable with type t = 'sum) ->
  ("DEBUG:rule", [Tag1 (("t", 2317), ([((("a")), 100000000, 0, -375)], 1, Tag1 ([(("None", 783), (0), 0, (("src/option.mli", 23, 748, 750), ("src/option.mli", 23, 748, 756), 0), 0, Tag1 ("Base__Option", 1)); (("Some", 784), ([((("a")), 100000000, 0, -375)]), 0, (("src/option.mli", 24, 757, 759), ("src/option.mli", 24, 757, 771), 0), 0, Tag1 ("Base__Option", 2))], 0), 1, ((Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -375)], (0)), 100000000, 0, -374)), [25], [0], 0, 0, (("src/option.mli", 22, 724, 724), ("src/option.mli", 25, 772, 830), 0), [(("deriving_inline", (("src/option.mli", 25, 772, 775), ("src/option.mli", 25, 772, 790), 0)), ([([(Tag8 ([(((("compare"), (("src/option.mli", 25, 772, 791), ("src/option.mli", 25, 772, 798), 0))), (("src/option.mli", 25, 772, 791), ("src/option.mli", 25, 772, 798), 0), 0, 0); (((("globalize"), (("src/option.mli", 25, 772, 800), ("src/option.mli", 25, 772, 809), 0))), (("src/option.mli", 25, 772, 800), ("src/option.mli", 25, 772, 809), 0), 0, 0); (((("hash"), (("src/option.mli", 25, 772, 811), ("src/option.mli", 25, 772, 815), 0))), (("src/option.mli", 25, 772, 811), ("src/option.mli", 25, 772, 815), 0), 0, 0); (((("sexp_grammar"), (("src/option.mli", 25, 772, 817), ("src/option.mli", 25, 772, 829), 0))), (("src/option.mli", 25, 772, 817), ("src/option.mli", 25, 772, 829), 0), 0, 0)]), (("src/option.mli", 25, 772, 791), ("src/option.mli", 25, 772, 829), 0), 0, 0)], (("src/option.mli", 25, 772, 791), ("src/option.mli", 25, 772, 829), 0))]), (("src/option.mli", 25, 772, 772), ("src/option.mli", 25, 772, 830), 0))], 0, 0, Tag1 ("Base__Option", 0)), 1, 0); (("compare", 2318), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "compare"), [((("a")), 100000000, 0, -372)], (0)), 100000000, 0, -373), (Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "compare"), [(Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -372)], (0)), 100000000, 0, -371)], (0)), 100000000, 0, -370), 0), 100000000, 0, -369), 0, (("src/option.mli", 27, 832, 840), ("src/option.mli", 27, 832, 892), 0), 0, Tag1 ("Base__Ppx_compare_lib", 8)), 0); (("globalize", 2319), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -366), ((("a")), 100000000, 0, -366), 0), 100000000, 0, -368), (Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -366)], (0)), 100000000, 0, -367), (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -366)], (0)), 100000000, 0, -365), 0), 100000000, 0, -364), 0), 100000000, 0, -363), 0, (("src/option.mli", 29, 894, 894), ("src/option.mli", 29, 894, 968), 0), 0, Tag1 ("Base__Option", 4)), 0); (("hash_fold_t", 2320), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Ppx_hash_lib")), "hash_fold"), [((("a")), 100000000, 0, -361)], (0)), 100000000, 0, -362), (Tag3 (Tag1 ((Tag2 ("Base__Ppx_hash_lib")), "hash_fold"), [(Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -361)], (0)), 100000000, 0, -360)], (0)), 100000000, 0, -359), 0), 100000000, 0, -358), 0, (("src/option.mli", 31, 970, 978), ("src/option.mli", 31, 970, 1025), 0), 0, Tag1 ("Base__Ppx_hash_lib", 8)), 0); (("t_sexp_grammar", 2321), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [((("a")), 100000000, 0, -356)], (0)), 100000000, 0, -357), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -356)], (0)), 100000000, 0, -355)], (0)), 100000000, 0, -354), 0), 100000000, 0, -353), 0, (("src/option.mli", 33, 1027, 1027), ("src/option.mli", 33, 1027, 1106), 0), 0, Tag1 ("Base__Option", 7)), 0); (("equal", 2322), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Equal")), "equal"), [((("a")), 100000000, 0, -351)], (0)), 100000000, 0, -352), (Tag3 (Tag1 ((Tag2 ("Base__Equal")), "equal"), [(Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -351)], (0)), 100000000, 0, -350)], (0)), 100000000, 0, -349), 0), 100000000, 0, -348), 0, (("src/option.mli", 37, 1118, 1126), ("src/option.mli", 37, 1118, 1157), 0), 0, Tag1 ("Base__Equal", 6)), 0); (("invariant", 2323), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Invariant_intf")), "inv"), [((("a")), 100000000, 0, -346)], (0)), 100000000, 0, -347), (Tag3 (Tag1 ((Tag2 ("Base__Invariant_intf")), "inv"), [(Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -346)], (0)), 100000000, 0, -345)], (0)), 100000000, 0, -344), 0), 100000000, 0, -343), 0, (("src/option.mli", 38, 1158, 1166), ("src/option.mli", 38, 1158, 1201), 0), 0, Tag1 ("Base__Invariant_intf", 6)), 0); (("t_of_sexp", 2324), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -342), ((("a")), 100000000, 0, -339), 0), 100000000, 0, -341), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -340), (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -339)], (0)), 100000000, 0, -338), 0), 100000000, 0, -337), 0), 100000000, 0, -336), 0, (("src/option.mli", 39, 1202, 1210), ("src/option.mli", 39, 1202, 1244), 0), 0, Tag1 ("Sexplib0__Sexpable", 5)), 0); (("sexp_of_t", 2325), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -333), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -335), 0), 100000000, 0, -334), (Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -333)], (0)), 100000000, 0, -332), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -331), 0), 100000000, 0, -330), 0), 100000000, 0, -329), 0, (("src/option.mli", 39, 1202, 1210), ("src/option.mli", 39, 1202, 1244), 0), 0, Tag1 ("Sexplib0__Sexpable", 6)), 0); (("both", 2326), ((Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -325)], (0)), 100000000, 0, -328), (Tag1 (0, (Tag3 ((("t", 2317)), [((("b")), 100000000, 0, -326)], (0)), 100000000, 0, -327), (Tag3 ((("t", 2317)), [(Tag2 ([((("a")), 100000000, 0, -325); ((("b")), 100000000, 0, -326)]), 100000000, 0, -324)], (0)), 100000000, 0, -323), 0), 100000000, 0, -322), 0), 100000000, 0, -321), 0, (("src/option.mli", 52, 1465, 1473), ("src/option.mli", 52, 1465, 1515), 0), 0, Tag1 ("Base__Applicative_intf", 36)), 0); (("<*>", 2327), ((Tag1 (0, (Tag3 ((("t", 2317)), [(Tag1 (0, ((("a")), 100000000, 0, -318), ((("b")), 100000000, 0, -316), 0), 100000000, 0, -320)], (0)), 100000000, 0, -319), (Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -318)], (0)), 100000000, 0, -317), (Tag3 ((("t", 2317)), [((("b")), 100000000, 0, -316)], (0)), 100000000, 0, -315), 0), 100000000, 0, -314), 0), 100000000, 0, -313), 0, (("src/option.mli", 52, 1465, 1473), ("src/option.mli", 52, 1465, 1515), 0), 0, Tag1 ("Base__Applicative_intf", 22)), 0); (("<*", 2328), ((Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -309)], (0)), 100000000, 0, -312), (Tag1 (0, (Tag3 ((("t", 2317)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -311)], (0)), 100000000, 0, -310), (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -309)], (0)), 100000000, 0, -308), 0), 100000000, 0, -307), 0), 100000000, 0, -306), 0, (("src/option.mli", 52, 1465, 1473), ("src/option.mli", 52, 1465, 1515), 0), 0, Tag1 ("Base__Applicative_intf", 23)), 0); (("*>", 2329), ((Tag1 (0, (Tag3 ((("t", 2317)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -305)], (0)), 100000000, 0, -304), (Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -302)], (0)), 100000000, 0, -303), (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -302)], (0)), 100000000, 0, -301), 0), 100000000, 0, -300), 0), 100000000, 0, -299), 0, (("src/option.mli", 52, 1465, 1473), ("src/option.mli", 52, 1465, 1515), 0), 0, Tag1 ("Base__Applicative_intf", 24)), 0); (("apply", 2330), ((Tag1 (0, (Tag3 ((("t", 2317)), [(Tag1 (0, ((("a")), 100000000, 0, -296), ((("b")), 100000000, 0, -294), 0), 100000000, 0, -298)], (0)), 100000000, 0, -297), (Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -296)], (0)), 100000000, 0, -295), (Tag3 ((("t", 2317)), [((("b")), 100000000, 0, -294)], (0)), 100000000, 0, -293), 0), 100000000, 0, -292), 0), 100000000, 0, -291), 0, (("src/option.mli", 52, 1465, 1473), ("src/option.mli", 52, 1465, 1515), 0), 0, Tag1 ("Base__Applicative_intf", 48)), 0); (("map2", 2331), ((Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -288)], (0)), 100000000, 0, -290), (Tag1 (0, (Tag3 ((("t", 2317)), [((("b")), 100000000, 0, -287)], (0)), 100000000, 0, -289), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -288), (Tag1 (0, ((("b")), 100000000, 0, -287), ((("c")), 100000000, 0, -284), 0), 100000000, 0, -286), 0), 100000000, 0, -285), (Tag3 ((("t", 2317)), [((("c")), 100000000, 0, -284)], (0)), 100000000, 0, -283), 0), 100000000, 0, -282), 0), 100000000, 0, -281), 0), 100000000, 0, -280), 0, (("src/option.mli", 52, 1465, 1473), ("src/option.mli", 52, 1465, 1515), 0), 0, Tag1 ("Base__Applicative_intf", 49)), 0); (("map3", 2332), ((Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -276)], (0)), 100000000, 0, -279), (Tag1 (0, (Tag3 ((("t", 2317)), [((("b")), 100000000, 0, -275)], (0)), 100000000, 0, -278), (Tag1 (0, (Tag3 ((("t", 2317)), [((("c")), 100000000, 0, -274)], (0)), 100000000, 0, -277), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -276), (Tag1 (0, ((("b")), 100000000, 0, -275), (Tag1 (0, ((("c")), 100000000, 0, -274), ((("d")), 100000000, 0, -270), 0), 100000000, 0, -273), 0), 100000000, 0, -272), 0), 100000000, 0, -271), (Tag3 ((("t", 2317)), [((("d")), 100000000, 0, -270)], (0)), 100000000, 0, -269), 0), 100000000, 0, -268), 0), 100000000, 0, -267), 0), 100000000, 0, -266), 0), 100000000, 0, -265), 0, (("src/option.mli", 52, 1465, 1473), ("src/option.mli", 52, 1465, 1515), 0), 0, Tag1 ("Base__Applicative_intf", 50)), 0); Tag3 (("Applicative_infix", 2333), 0, (Tag1 ([(("<*>", 2376), ((Tag1 (0, (Tag3 ((("t", 2317)), [(Tag1 (0, ((("a")), 100000000, 0, -402), ((("b")), 100000000, 0, -400), 0), 100000000, 0, -404)], (0)), 100000000, 0, -403), (Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -402)], (0)), 100000000, 0, -401), (Tag3 ((("t", 2317)), [((("b")), 100000000, 0, -400)], (0)), 100000000, 0, -399), 0), 100000000, 0, -398), 0), 100000000, 0, -397), 0, (("src/option.mli", 52, 1465, 1473), ("src/option.mli", 52, 1465, 1515), 0), 0, Tag1 ("Base__Applicative_intf", 22)), 0); (("<*", 2377), ((Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -393)], (0)), 100000000, 0, -396), (Tag1 (0, (Tag3 ((("t", 2317)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -395)], (0)), 100000000, 0, -394), (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -393)], (0)), 100000000, 0, -392), 0), 100000000, 0, -391), 0), 100000000, 0, -390), 0, (("src/option.mli", 52, 1465, 1473), ("src/option.mli", 52, 1465, 1515), 0), 0, Tag1 ("Base__Applicative_intf", 23)), 0); (("*>", 2378), ((Tag1 (0, (Tag3 ((("t", 2317)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -389)], (0)), 100000000, 0, -388), (Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -386)], (0)), 100000000, 0, -387), (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -386)], (0)), 100000000, 0, -385), 0), 100000000, 0, -384), 0), 100000000, 0, -383), 0, (("src/option.mli", 52, 1465, 1473), ("src/option.mli", 52, 1465, 1515), 0), 0, Tag1 ("Base__Applicative_intf", 24)), 0); ((">>|", 2379), ((Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -381)], (0)), 100000000, 0, -382), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -381), ((("b")), 100000000, 0, -379), 0), 100000000, 0, -380), (Tag3 ((("t", 2317)), [((("b")), 100000000, 0, -379)], (0)), 100000000, 0, -378), 0), 100000000, 0, -377), 0), 100000000, 0, -376), 0, (("src/option.mli", 52, 1465, 1473), ("src/option.mli", 52, 1465, 1515), 0), 0, Tag1 ("Base__Applicative_intf", 25)), 0)]), 0, (("src/option.mli", 52, 1465, 1473), ("src/option.mli", 52, 1465, 1515), 0), Tag1 ("Base__Applicative_intf", 55)), 0, 0); ((">>=", 2334), ((Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -263)], (0)), 100000000, 0, -264), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -263), (Tag3 ((("t", 2317)), [((("b")), 100000000, 0, -260)], (0)), 100000000, 0, -262), 0), 100000000, 0, -261), (Tag3 ((("t", 2317)), [((("b")), 100000000, 0, -260)], (0)), 100000000, 0, -259), 0), 100000000, 0, -258), 0), 100000000, 0, -257), 0, (("src/option.mli", 64, 1680, 1688), ("src/option.mli", 64, 1680, 1724), 0), 0, Tag1 ("Base__Monad_intf", 12)), 0); ((">>|", 2335), ((Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -255)], (0)), 100000000, 0, -256), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -255), ((("b")), 100000000, 0, -253), 0), 100000000, 0, -254), (Tag3 ((("t", 2317)), [((("b")), 100000000, 0, -253)], (0)), 100000000, 0, -252), 0), 100000000, 0, -251), 0), 100000000, 0, -250), 0, (("src/option.mli", 64, 1680, 1688), ("src/option.mli", 64, 1680, 1724), 0), 0, Tag1 ("Base__Monad_intf", 13)), 0); Tag3 (("Monad_infix", 2336), 0, (Tag1 ([((">>=", 2380), ((Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -418)], (0)), 100000000, 0, -419), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -418), (Tag3 ((("t", 2317)), [((("b")), 100000000, 0, -415)], (0)), 100000000, 0, -417), 0), 100000000, 0, -416), (Tag3 ((("t", 2317)), [((("b")), 100000000, 0, -415)], (0)), 100000000, 0, -414), 0), 100000000, 0, -413), 0), 100000000, 0, -412), 0, (("src/option.mli", 64, 1680, 1688), ("src/option.mli", 64, 1680, 1724), 0), 0, Tag1 ("Base__Monad_intf", 12)), 0); ((">>|", 2381), ((Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -410)], (0)), 100000000, 0, -411), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -410), ((("b")), 100000000, 0, -408), 0), 100000000, 0, -409), (Tag3 ((("t", 2317)), [((("b")), 100000000, 0, -408)], (0)), 100000000, 0, -407), 0), 100000000, 0, -406), 0), 100000000, 0, -405), 0, (("src/option.mli", 64, 1680, 1688), ("src/option.mli", 64, 1680, 1724), 0), 0, Tag1 ("Base__Monad_intf", 13)), 0)]), 0, (("src/option.mli", 64, 1680, 1688), ("src/option.mli", 64, 1680, 1724), 0), Tag1 ("Base__Monad_intf", 46)), 0, 0); (("bind", 2337), ((Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -248)], (0)), 100000000, 0, -249), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -248), (Tag3 ((("t", 2317)), [((("b")), 100000000, 0, -245)], (0)), 100000000, 0, -247), 0), 100000000, 0, -246), (Tag3 ((("t", 2317)), [((("b")), 100000000, 0, -245)], (0)), 100000000, 0, -244), 0), 100000000, 0, -243), 0), 100000000, 0, -242), 0, (("src/option.mli", 64, 1680, 1688), ("src/option.mli", 64, 1680, 1724), 0), 0, Tag1 ("Base__Monad_intf", 47)), 0); (("return", 2338), ((Tag1 (0, ((("a")), 100000000, 0, -241), (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -241)], (0)), 100000000, 0, -240), 0), 100000000, 0, -239), 0, (("src/option.mli", 64, 1680, 1688), ("src/option.mli", 64, 1680, 1724), 0), 0, Tag1 ("Base__Monad_intf", 48)), 0); (("map", 2339), ((Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -237)], (0)), 100000000, 0, -238), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -237), ((("b")), 100000000, 0, -235), 0), 100000000, 0, -236), (Tag3 ((("t", 2317)), [((("b")), 100000000, 0, -235)], (0)), 100000000, 0, -234), 0), 100000000, 0, -233), 0), 100000000, 0, -232), 0, (("src/option.mli", 64, 1680, 1688), ("src/option.mli", 64, 1680, 1724), 0), 0, Tag1 ("Base__Monad_intf", 49)), 0); (("join", 2340), ((Tag1 (0, (Tag3 ((("t", 2317)), [(Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -229)], (0)), 100000000, 0, -231)], (0)), 100000000, 0, -230), (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -229)], (0)), 100000000, 0, -228), 0), 100000000, 0, -227), 0, (("src/option.mli", 64, 1680, 1688), ("src/option.mli", 64, 1680, 1724), 0), 0, Tag1 ("Base__Monad_intf", 50)), 0); (("ignore_m", 2341), ((Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -226)], (0)), 100000000, 0, -225), (Tag3 ((("t", 2317)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -224)], (0)), 100000000, 0, -223), 0), 100000000, 0, -222), 0, (("src/option.mli", 64, 1680, 1688), ("src/option.mli", 64, 1680, 1724), 0), 0, Tag1 ("Base__Monad_intf", 51)), 0); (("all", 2342), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -219)], (0)), 100000000, 0, -221)], (0)), 100000000, 0, -220), (Tag3 ((("t", 2317)), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -219)], (0)), 100000000, 0, -218)], (0)), 100000000, 0, -217), 0), 100000000, 0, -216), 0, (("src/option.mli", 64, 1680, 1688), ("src/option.mli", 64, 1680, 1724), 0), 0, Tag1 ("Base__Monad_intf", 52)), 0); (("all_unit", 2343), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 2317)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -215)], (0)), 100000000, 0, -214)], (0)), 100000000, 0, -213), (Tag3 ((("t", 2317)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -212)], (0)), 100000000, 0, -211), 0), 100000000, 0, -210), 0, (("src/option.mli", 64, 1680, 1688), ("src/option.mli", 64, 1680, 1724), 0), 0, Tag1 ("Base__Monad_intf", 53)), 0); Tag3 (("Let_syntax", 2344), 0, (Tag1 ([(("return", 2382), ((Tag1 (0, ((("a")), 100000000, 0, -437), (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -437)], (0)), 100000000, 0, -436), 0), 100000000, 0, -435), 0, (("src/option.mli", 64, 1680, 1688), ("src/option.mli", 64, 1680, 1724), 0), 0, Tag1 ("Base__Monad_intf", 22)), 0); ((">>=", 2383), ((Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -433)], (0)), 100000000, 0, -434), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -433), (Tag3 ((("t", 2317)), [((("b")), 100000000, 0, -430)], (0)), 100000000, 0, -432), 0), 100000000, 0, -431), (Tag3 ((("t", 2317)), [((("b")), 100000000, 0, -430)], (0)), 100000000, 0, -429), 0), 100000000, 0, -428), 0), 100000000, 0, -427), 0, (("src/option.mli", 64, 1680, 1688), ("src/option.mli", 64, 1680, 1724), 0), 0, Tag1 ("Base__Monad_intf", 12)), 0); ((">>|", 2384), ((Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -425)], (0)), 100000000, 0, -426), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -425), ((("b")), 100000000, 0, -423), 0), 100000000, 0, -424), (Tag3 ((("t", 2317)), [((("b")), 100000000, 0, -423)], (0)), 100000000, 0, -422), 0), 100000000, 0, -421), 0), 100000000, 0, -420), 0, (("src/option.mli", 64, 1680, 1688), ("src/option.mli", 64, 1680, 1724), 0), 0, Tag1 ("Base__Monad_intf", 13)), 0); Tag3 (("Let_syntax", 2385), 0, (Tag1 ([(("return", 2386), ((Tag1 (0, ((("a")), 100000000, 0, -463), (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -463)], (0)), 100000000, 0, -462), 0), 100000000, 0, -461), 0, (("src/option.mli", 64, 1680, 1688), ("src/option.mli", 64, 1680, 1724), 0), 0, Tag1 ("Base__Monad_intf", 25)), 0); (("bind", 2387), ((Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -459)], (0)), 100000000, 0, -460), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -459), (Tag3 ((("t", 2317)), [((("b")), 100000000, 0, -456)], (0)), 100000000, 0, -458), 0), 100000000, 0, -457), (Tag3 ((("t", 2317)), [((("b")), 100000000, 0, -456)], (0)), 100000000, 0, -455), 0), 100000000, 0, -454), 0), 100000000, 0, -453), 0, (("src/option.mli", 64, 1680, 1688), ("src/option.mli", 64, 1680, 1724), 0), 0, Tag1 ("Base__Monad_intf", 26)), 0); (("map", 2388), ((Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -451)], (0)), 100000000, 0, -452), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -451), ((("b")), 100000000, 0, -449), 0), 100000000, 0, -450), (Tag3 ((("t", 2317)), [((("b")), 100000000, 0, -449)], (0)), 100000000, 0, -448), 0), 100000000, 0, -447), 0), 100000000, 0, -446), 0, (("src/option.mli", 64, 1680, 1688), ("src/option.mli", 64, 1680, 1724), 0), 0, Tag1 ("Base__Monad_intf", 27)), 0); (("both", 2389), ((Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -442)], (0)), 100000000, 0, -445), (Tag1 (0, (Tag3 ((("t", 2317)), [((("b")), 100000000, 0, -443)], (0)), 100000000, 0, -444), (Tag3 ((("t", 2317)), [(Tag2 ([((("a")), 100000000, 0, -442); ((("b")), 100000000, 0, -443)]), 100000000, 0, -441)], (0)), 100000000, 0, -440), 0), 100000000, 0, -439), 0), 100000000, 0, -438), 0, (("src/option.mli", 64, 1680, 1688), ("src/option.mli", 64, 1680, 1724), 0), 0, Tag1 ("Base__Monad_intf", 28)), 0); Tag3 (("Open_on_rhs", 2390), 0, (Tag1 (0), 0, (("src/option.mli", 64, 1680, 1688), ("src/option.mli", 64, 1680, 1724), 0), Tag1 ("Base__Monad_intf", 29)), 0, 0)]), 0, (("src/option.mli", 64, 1680, 1688), ("src/option.mli", 64, 1680, 1724), 0), Tag1 ("Base__Monad_intf", 30)), 0, 0)]), 0, (("src/option.mli", 64, 1680, 1688), ("src/option.mli", 64, 1680, 1724), 0), Tag1 ("Base__Monad_intf", 31)), 0, 0); (("value", 2345), ((Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -208)], (0)), 100000000, 0, -209), (Tag1 (("default"), ((("a")), 100000000, 0, -208), ((("a")), 100000000, 0, -208), 0), 100000000, 0, -207), 0), 100000000, 0, -206), 0, (("src/option.mli", 69, 1845, 1845), ("src/option.mli", 69, 1845, 1881), 0), 0, Tag1 ("Base__Option", 13)), 0); (("value_exn", 2346), ((Tag1 (Tag1 ("here"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Source_code_position0"), "t"), 0, (0)), 100000000, 0, -205)], (0)), 100000000, 0, -204), (Tag1 (Tag1 ("error"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Error"), "t"), 0, (0)), 100000000, 0, -203)], (0)), 100000000, 0, -202), (Tag1 (Tag1 ("message"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -201)], (0)), 100000000, 0, -200), (Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -198)], (0)), 100000000, 0, -199), ((("a")), 100000000, 0, -198), 0), 100000000, 0, -197), 0), 100000000, 0, -196), 0), 100000000, 0, -195), 0), 100000000, 0, -194), 0, (("src/option.mli", 74, 2067, 2067), ("src/option.mli", 79, 2167, 2174), 0), 0, Tag1 ("Base__Option", 14)), 0); (("value_map", 2347), ((Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -192)], (0)), 100000000, 0, -193), (Tag1 (("default"), ((("b")), 100000000, 0, -190), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -192), ((("b")), 100000000, 0, -190), 0), 100000000, 0, -191), ((("b")), 100000000, 0, -190), 0), 100000000, 0, -189), 0), 100000000, 0, -188), 0), 100000000, 0, -187), 0, (("src/option.mli", 83, 2280, 2280), ("src/option.mli", 83, 2280, 2346), 0), 0, Tag1 ("Base__Option", 15)), 0); (("value_or_thunk", 2348), ((Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -183)], (0)), 100000000, 0, -186), (Tag1 (("default"), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -185), ((("a")), 100000000, 0, -183), 0), 100000000, 0, -184), ((("a")), 100000000, 0, -183), 0), 100000000, 0, -182), 0), 100000000, 0, -181), 0, (("src/option.mli", 87, 2519, 2519), ("src/option.mli", 87, 2519, 2584), 0), 0, Tag1 ("Base__Option", 16)), 0); (("fold", 2349), ((Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -179)], (0)), 100000000, 0, -180), (Tag1 (("init"), ((("acc")), 100000000, 0, -176), (Tag1 (("f"), (Tag1 (0, ((("acc")), 100000000, 0, -176), (Tag1 (0, ((("a")), 100000000, 0, -179), ((("acc")), 100000000, 0, -176), 0), 100000000, 0, -178), 0), 100000000, 0, -177), ((("acc")), 100000000, 0, -176), 0), 100000000, 0, -175), 0), 100000000, 0, -174), 0), 100000000, 0, -173), 0, (("src/option.mli", 91, 2654, 2654), ("src/option.mli", 91, 2654, 2726), 0), 0, Tag1 ("Base__Option", 17)), 0); (("mem", 2350), ((Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -171)], (0)), 100000000, 0, -172), (Tag1 (0, ((("a")), 100000000, 0, -171), (Tag1 (("equal"), (Tag1 (0, ((("a")), 100000000, 0, -171), (Tag1 (0, ((("a")), 100000000, 0, -171), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -170), 0), 100000000, 0, -169), 0), 100000000, 0, -168), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -167), 0), 100000000, 0, -166), 0), 100000000, 0, -165), 0), 100000000, 0, -164), 0, (("src/option.mli", 94, 2796, 2796), ("src/option.mli", 94, 2796, 2862), 0), 0, Tag1 ("Base__Option", 18)), 0); (("length", 2351), ((Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -163)], (0)), 100000000, 0, -162), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -161), 0), 100000000, 0, -160), 0, (("src/option.mli", 96, 2864, 2864), ("src/option.mli", 96, 2864, 2888), 0), 0, Tag1 ("Base__Option", 19)), 0); (("iter", 2352), ((Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -158)], (0)), 100000000, 0, -159), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -158), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -157), 0), 100000000, 0, -156), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -155), 0), 100000000, 0, -154), 0), 100000000, 0, -153), 0, (("src/option.mli", 97, 2889, 2889), ("src/option.mli", 97, 2889, 2940), 0), 0, Tag1 ("Base__Option", 20)), 0); (("exists", 2353), ((Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -151)], (0)), 100000000, 0, -152), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -151), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -150), 0), 100000000, 0, -149), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -148), 0), 100000000, 0, -147), 0), 100000000, 0, -146), 0, (("src/option.mli", 100, 3005, 3005), ("src/option.mli", 100, 3005, 3058), 0), 0, Tag1 ("Base__Option", 21)), 0); (("for_all", 2354), ((Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -144)], (0)), 100000000, 0, -145), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -144), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -143), 0), 100000000, 0, -142), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -141), 0), 100000000, 0, -140), 0), 100000000, 0, -139), 0, (("src/option.mli", 103, 3122, 3122), ("src/option.mli", 103, 3122, 3176), 0), 0, Tag1 ("Base__Option", 22)), 0); (("find", 2355), ((Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -135)], (0)), 100000000, 0, -138), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -135), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -137), 0), 100000000, 0, -136), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -135)], (0)), 100000000, 0, -134), 0), 100000000, 0, -133), 0), 100000000, 0, -132), 0, (("src/option.mli", 107, 3281, 3281), ("src/option.mli", 107, 3281, 3337), 0), 0, Tag1 ("Base__Option", 23)), 0); (("find_map", 2356), ((Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -130)], (0)), 100000000, 0, -131), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -130), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -127)], (0)), 100000000, 0, -129), 0), 100000000, 0, -128), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -127)], (0)), 100000000, 0, -126), 0), 100000000, 0, -125), 0), 100000000, 0, -124), 0, (("src/option.mli", 110, 3401, 3401), ("src/option.mli", 110, 3401, 3466), 0), 0, Tag1 ("Base__Option", 24)), 0); (("to_list", 2357), ((Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -122)], (0)), 100000000, 0, -123), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -122)], (0)), 100000000, 0, -121), 0), 100000000, 0, -120), 0, (("src/option.mli", 112, 3468, 3468), ("src/option.mli", 112, 3468, 3497), 0), 0, Tag1 ("Base__Option", 25)), 0); (("to_array", 2358), ((Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -118)], (0)), 100000000, 0, -119), (Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -118)], (0)), 100000000, 0, -117), 0), 100000000, 0, -116), 0, (("src/option.mli", 113, 3498, 3498), ("src/option.mli", 113, 3498, 3529), 0), 0, Tag1 ("Base__Option", 26)), 0); (("call", 2359), ((Tag1 (0, ((("a")), 100000000, 0, -115), (Tag1 (("f"), (Tag3 ((("t", 2317)), [(Tag1 (0, ((("a")), 100000000, 0, -115), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -114), 0), 100000000, 0, -113)], (0)), 100000000, 0, -112), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -111), 0), 100000000, 0, -110), 0), 100000000, 0, -109), 0, (("src/option.mli", 116, 3597, 3597), ("src/option.mli", 116, 3597, 3648), 0), 0, Tag1 ("Base__Option", 27)), 0); (("merge", 2360), ((Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -104)], (0)), 100000000, 0, -108), (Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -104)], (0)), 100000000, 0, -107), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -104), (Tag1 (0, ((("a")), 100000000, 0, -104), ((("a")), 100000000, 0, -104), 0), 100000000, 0, -106), 0), 100000000, 0, -105), (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -104)], (0)), 100000000, 0, -103), 0), 100000000, 0, -102), 0), 100000000, 0, -101), 0), 100000000, 0, -100), 0, (("src/option.mli", 122, 3931, 3931), ("src/option.mli", 122, 3931, 3995), 0), 0, Tag1 ("Base__Option", 28)), 0); (("filter", 2361), ((Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -96)], (0)), 100000000, 0, -99), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -96), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -98), 0), 100000000, 0, -97), (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -96)], (0)), 100000000, 0, -95), 0), 100000000, 0, -94), 0), 100000000, 0, -93), 0, (("src/option.mli", 124, 3997, 3997), ("src/option.mli", 124, 3997, 4050), 0), 0, Tag1 ("Base__Option", 29)), 0); (("try_with", 2362), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -92), ((("a")), 100000000, 0, -90), 0), 100000000, 0, -91), (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -90)], (0)), 100000000, 0, -89), 0), 100000000, 0, -88), 0, (("src/option.mli", 130, 4238, 4238), ("src/option.mli", 130, 4238, 4283), 0), 0, Tag1 ("Base__Option", 30)), 0); (("try_with_join", 2363), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -87), (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -84)], (0)), 100000000, 0, -86), 0), 100000000, 0, -85), (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -84)], (0)), 100000000, 0, -83), 0), 100000000, 0, -82), 0, (("src/option.mli", 134, 4418, 4418), ("src/option.mli", 134, 4418, 4470), 0), 0, Tag1 ("Base__Option", 31)), 0); (("some", 2364), ((Tag1 (0, ((("a")), 100000000, 0, -81), (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -81)], (0)), 100000000, 0, -80), 0), 100000000, 0, -79), 0, (("src/option.mli", 137, 4523, 4523), ("src/option.mli", 137, 4523, 4544), 0), 0, Tag1 ("Base__Option", 32)), 0); (("first_some", 2365), ((Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -76)], (0)), 100000000, 0, -78), (Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -76)], (0)), 100000000, 0, -77), (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -76)], (0)), 100000000, 0, -75), 0), 100000000, 0, -74), 0), 100000000, 0, -73), 0, (("src/option.mli", 141, 4639, 4639), ("src/option.mli", 141, 4639, 4676), 0), 0, Tag1 ("Base__Option", 33)), 0); (("some_if", 2366), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -72), (Tag1 (0, ((("a")), 100000000, 0, -71), (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -71)], (0)), 100000000, 0, -70), 0), 100000000, 0, -69), 0), 100000000, 0, -68), 0, (("src/option.mli", 145, 4766, 4766), ("src/option.mli", 145, 4766, 4798), 0), 0, Tag1 ("Base__Option", 34)), 0); (("is_none", 2367), ((Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -67)], (0)), 100000000, 0, -66), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -65), 0), 100000000, 0, -64), 0, (("src/option.mli", 150, 4871, 4871), ("src/option.mli", 150, 4871, 4897), 0), 0, Tag1 ("Base__Option", 35)), 0); (("is_some", 2368), ((Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -63)], (0)), 100000000, 0, -62), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -61), 0), 100000000, 0, -60), 0, (("src/option.mli", 153, 4949, 4949), ("src/option.mli", 153, 4949, 4975), 0), 0, Tag1 ("Base__Option", 36)), 0); (("is_empty", 2369), ((Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -59)], (0)), 100000000, 0, -58), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -57), 0), 100000000, 0, -56), 0, (("src/option.mli", 157, 4986, 4986), ("src/option.mli", 157, 4986, 5068), 0), [(("deprecated", (("src/option.mli", 157, 4986, 5017), ("src/option.mli", 157, 4986, 5027), 0)), ([([(Tag1 (Tag2 ("[since 2019-07] Use [is_none] instead", (("src/option.mli", 157, 4986, 5029), ("src/option.mli", 157, 4986, 5066), 0), 0)), (("src/option.mli", 157, 4986, 5028), ("src/option.mli", 157, 4986, 5067), 0), 0, 0)], (("src/option.mli", 157, 4986, 5028), ("src/option.mli", 157, 4986, 5067), 0))]), (("src/option.mli", 157, 4986, 5014), ("src/option.mli", 157, 4986, 5068), 0))], Tag1 ("Base__Option", 37)), 0); (("fold_result", 2370), ((Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -54)], (0)), 100000000, 0, -55), (Tag1 (("init"), ((("acc")), 100000000, 0, -49), (Tag1 (("f"), (Tag1 (0, ((("acc")), 100000000, 0, -49), (Tag1 (0, ((("a")), 100000000, 0, -54), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Result"), "t"), [((("acc")), 100000000, 0, -49); ((("e")), 100000000, 0, -50)], (0)), 100000000, 0, -53), 0), 100000000, 0, -52), 0), 100000000, 0, -51), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Result"), "t"), [((("acc")), 100000000, 0, -49); ((("e")), 100000000, 0, -50)], (0)), 100000000, 0, -48), 0), 100000000, 0, -47), 0), 100000000, 0, -46), 0), 100000000, 0, -45), 0, (("src/option.mli", 159, 5070, 5070), ("src/option.mli", 164, 5189, 5249), 0), [(("deprecated", (("src/option.mli", 164, 5189, 5192), ("src/option.mli", 164, 5189, 5202), 0)), ([([(Tag1 (Tag2 ("[since 2019-07] It is not a useful function", (("src/option.mli", 164, 5189, 5204), ("src/option.mli", 164, 5189, 5247), 0), 0)), (("src/option.mli", 164, 5189, 5203), ("src/option.mli", 164, 5189, 5248), 0), 0, 0)], (("src/option.mli", 164, 5189, 5203), ("src/option.mli", 164, 5189, 5248), 0))]), (("src/option.mli", 164, 5189, 5189), ("src/option.mli", 164, 5189, 5249), 0))], Tag1 ("Base__Option", 38)), 0); (("fold_until", 2371), ((Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -43)], (0)), 100000000, 0, -44), (Tag1 (("init"), ((("acc")), 100000000, 0, -39), (Tag1 (("f"), (Tag1 (0, ((("acc")), 100000000, 0, -39), (Tag1 (0, ((("a")), 100000000, 0, -43), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Container"), "Continue_or_stop"), "t"), [((("acc")), 100000000, 0, -39); ((("final")), 100000000, 0, -37)], (0)), 100000000, 0, -42), 0), 100000000, 0, -41), 0), 100000000, 0, -40), (Tag1 (("finish"), (Tag1 (0, ((("acc")), 100000000, 0, -39), ((("final")), 100000000, 0, -37), 0), 100000000, 0, -38), ((("final")), 100000000, 0, -37), 0), 100000000, 0, -36), 0), 100000000, 0, -35), 0), 100000000, 0, -34), 0), 100000000, 0, -33), 0, (("src/option.mli", 166, 5251, 5251), ("src/option.mli", 172, 5419, 5479), 0), [(("deprecated", (("src/option.mli", 172, 5419, 5422), ("src/option.mli", 172, 5419, 5432), 0)), ([([(Tag1 (Tag2 ("[since 2019-07] It is not a useful function", (("src/option.mli", 172, 5419, 5434), ("src/option.mli", 172, 5419, 5477), 0), 0)), (("src/option.mli", 172, 5419, 5433), ("src/option.mli", 172, 5419, 5478), 0), 0, 0)], (("src/option.mli", 172, 5419, 5433), ("src/option.mli", 172, 5419, 5478), 0))]), (("src/option.mli", 172, 5419, 5419), ("src/option.mli", 172, 5419, 5479), 0))], Tag1 ("Base__Option", 39)), 0); (("min_elt", 2372), ((Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -28)], (0)), 100000000, 0, -32), (Tag1 (("compare"), (Tag1 (0, ((("a")), 100000000, 0, -28), (Tag1 (0, ((("a")), 100000000, 0, -28), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -31), 0), 100000000, 0, -30), 0), 100000000, 0, -29), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -28)], (0)), 100000000, 0, -27), 0), 100000000, 0, -26), 0), 100000000, 0, -25), 0, (("src/option.mli", 174, 5481, 5481), ("src/option.mli", 175, 5552, 5604), 0), [(("deprecated", (("src/option.mli", 175, 5552, 5555), ("src/option.mli", 175, 5552, 5565), 0)), ([([(Tag1 (Tag2 ("[since 2019-07] Use [Fn.id] instead", (("src/option.mli", 175, 5552, 5567), ("src/option.mli", 175, 5552, 5602), 0), 0)), (("src/option.mli", 175, 5552, 5566), ("src/option.mli", 175, 5552, 5603), 0), 0, 0)], (("src/option.mli", 175, 5552, 5566), ("src/option.mli", 175, 5552, 5603), 0))]), (("src/option.mli", 175, 5552, 5552), ("src/option.mli", 175, 5552, 5604), 0))], Tag1 ("Base__Option", 40)), 0); (("max_elt", 2373), ((Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -20)], (0)), 100000000, 0, -24), (Tag1 (("compare"), (Tag1 (0, ((("a")), 100000000, 0, -20), (Tag1 (0, ((("a")), 100000000, 0, -20), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -23), 0), 100000000, 0, -22), 0), 100000000, 0, -21), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -20)], (0)), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("src/option.mli", 177, 5606, 5606), ("src/option.mli", 178, 5677, 5729), 0), [(("deprecated", (("src/option.mli", 178, 5677, 5680), ("src/option.mli", 178, 5677, 5690), 0)), ([([(Tag1 (Tag2 ("[since 2019-07] Use [Fn.id] instead", (("src/option.mli", 178, 5677, 5692), ("src/option.mli", 178, 5677, 5727), 0), 0)), (("src/option.mli", 178, 5677, 5691), ("src/option.mli", 178, 5677, 5728), 0), 0, 0)], (("src/option.mli", 178, 5677, 5691), ("src/option.mli", 178, 5677, 5728), 0))]), (("src/option.mli", 178, 5677, 5677), ("src/option.mli", 178, 5677, 5729), 0))], Tag1 ("Base__Option", 41)), 0); (("count", 2374), ((Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -15)], (0)), 100000000, 0, -16), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -15), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -14), 0), 100000000, 0, -13), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0), 100000000, 0, -10), 0, (("src/option.mli", 180, 5731, 5731), ("src/option.mli", 181, 5783, 5844), 0), [(("deprecated", (("src/option.mli", 181, 5783, 5786), ("src/option.mli", 181, 5783, 5796), 0)), ([([(Tag1 (Tag2 ("[since 2019-07] Use pattern matching instead", (("src/option.mli", 181, 5783, 5798), ("src/option.mli", 181, 5783, 5842), 0), 0)), (("src/option.mli", 181, 5783, 5797), ("src/option.mli", 181, 5783, 5843), 0), 0, 0)], (("src/option.mli", 181, 5783, 5797), ("src/option.mli", 181, 5783, 5843), 0))]), (("src/option.mli", 181, 5783, 5783), ("src/option.mli", 181, 5783, 5844), 0))], Tag1 ("Base__Option", 42)), 0); (("sum", 2375), ((Tag1 (0, (Tag11 (Tag1 (Tag1 ((Tag2 ("Base__")), "Container"), "Summable"), [(("t"), ((("sum")), 100000000, 0, -5))]), 100000000, 0, -9), (Tag1 (0, (Tag3 ((("t", 2317)), [((("a")), 100000000, 0, -7)], (0)), 100000000, 0, -8), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -7), ((("sum")), 100000000, 0, -5), 0), 100000000, 0, -6), ((("sum")), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/option.mli", 183, 5846, 5846), ("src/option.mli", 188, 5956, 6038), 0), [(("deprecated", (("src/option.mli", 188, 5956, 5959), ("src/option.mli", 188, 5956, 5969), 0)), ([([(Tag1 (Tag2 ("[since 2019-07] Use [value_map ~default:Summable.zero ~f] instead", (("src/option.mli", 188, 5956, 5971), ("src/option.mli", 188, 5956, 6036), 0), 0)), (("src/option.mli", 188, 5956, 5970), ("src/option.mli", 188, 5956, 6037), 0), 0, 0)], (("src/option.mli", 188, 5956, 5970), ("src/option.mli", 188, 5956, 6037), 0))]), (("src/option.mli", 188, 5956, 5956), ("src/option.mli", 188, 5956, 6038), 0))], Tag1 ("Base__Option", 44)), 0)], "Base__Option", [("Base__Option", ("\242!\176\142\168\247\163Jg\0254\180\224\\A\210")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__StringLabels", ("\134F\024\226\216Is#\223\230\234\169Z\206Gc")); ("Stdlib__StdLabels", (".\193\n\229\139\017\212C-ZA\\kz-\128")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Printf", ("\215<\139]\021\142\224E\245m\198qc(W\229")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__MoreLabels", ("\248\232\248\254`<\230\241\161U\193U\1466J\238")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__ListLabels", ("*\194\012\191\020%\170\249m\002\180\178hk\205\220")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shadow_stdlib", ("\219zi\164\203\158e)\232\221\196\168\138x\142\018")); ("Sexplib0__Sexpable", ("\251${\207(\249/z\242\255\250^\141\156\210e")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv_error", ("kzv!\151~\198P\000\165\176d\007\251p\232")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Base_internalhash_types", ("0\148#2\226\223\018\135\173>!\020\237\017\255\149")); ("Base__T", ("+t\159\169\027\152\205\235\003\237\133\177\024\n6'")); ("Base__Sys0", ("\206z\231\154s\\\136\2364\131\005\014\031\152m3")); ("Base__Stringable", ("\170\025\162\136\234\162\n\161\1491>\145\210@\237t")); ("Base__String0", ("\212\221L\220\245\255\162P\228\224\189\216\135H\149O")); ("Base__Source_code_position0", ("_\003P6\254\029\206\005\130\136\180\019\145\230\000M")); ("Base__Sexpable", ("\155?\169\178\246\242*\232\206\018Y\174\203h\217i")); ("Base__Sexp", ("\154\187\171&\209=\153[\236\250!U\174`\190T")); ("Base__Result", ("\204|\215\173FMa\2511<&\215T\194$\228")); ("Base__Printf", ("\000\196c,\214\127\226\174\220\190\253z!\242\028\250")); ("Base__Ppx_hash_lib", ("\199\141\178\193\006\209L\007^\020(\131\224sn8")); ("Base__Ppx_compare_lib", ("\243\186~\233\228\199Ah\181.\223\004e\231\129S")); ("Base__Poly0", ("\230;\143\234\255.H\132KOe7\155\\\023f")); ("Base__Monad_intf", ("\208\203\163\152\184O\130?\012:\168\247}\018\253\155")); ("Base__Monad", ("!\244\168\2352=\137Lm\219\129K\216\199\145\\")); ("Base__Lazy", ("@`\165\196 \235)\136ANe:p\169$\185")); ("Base__Invariant_intf", ("\213\204\238\235\236[\198\145\028\2392\015\243\177S\249")); ("Base__Invariant", ("\135\153\136\\\129SD\228\202l\255\152\139\253\015\201")); ("Base__Int0", ("N\1310\012\227\254\000\255_\222!\018\016\003\1779")); ("Base__Info_intf", ("\184\209'\173\251\219\167X|v\188]\190o5X")); ("Base__Info", ("-\011\149\203\248\030\2301\1907\1630\189\128\209\170")); ("Base__Import0", ("\156\129U\197Y[\\\153\017Ho\203\173\204\220\020")); ("Base__Import", ("\014\187\247\141\187\181\142g\176:s_,\181\219\209")); ("Base__Hash_intf", ("h\004P\218\1531G\127\212\208A\024\140\164iq")); ("Base__Hash", ("\206Rc\194\234{s3\248\165\024\162\203{\206\206")); ("Base__Globalize", ("<\243w~.\180\196t\159\193\174[\227\139\215G")); ("Base__Formatter", ("\193\149\030\140\154\1505b\162a`%\243\185'%")); ("Base__Field", ("8In\234X\202\188G\186\208$\192\175\136\214v")); ("Base__Error", ("\199\218\231n\155/\159\156\146\247\148t\237\003\t\153")); ("Base__Equal", ("\193\217Z\127he\141N\000\1447\030\236%\131\b")); ("Base__Either0", ("!9-\011n\2077eZ\212\031c\227\029\206\t")); ("Base__Container_intf", ("\170vo*\208\209\141\219\196\168\236l\016\246\012c")); ("Base__Container", ("\191|>_\153W\235M\180uKz\214w`q")); ("Base__Comparator", ("\002\135z7b\025&\207\t\188\239&U3R\167")); ("Base__Bool0", ("\177f\254p\023\143&\239\020\136\206\242~\018F\251")); ("Base__Applicative_intf", ("J\176\203\159\235N(\235\027\232\198+\224\205*A")); ("Base__Applicative", ("\157\024\176\241a\165\204\133\003s3\214\007\131\244\n")); ("Base__", ("p\252\007\139\128\163W\025+\0225\001\246|P\158"))], [(0)])
'a t -> f:('a -> 'sum) -> 'sum

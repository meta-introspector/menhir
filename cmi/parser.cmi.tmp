type token =
    WITH
  | WHILE
  | WHEN
  | VIRTUAL
  | VAL
  | UNDERSCORE
  | UIDENT of string
  | TYPE
  | TRY
  | TRUE
  | TO
  | TILDE
  | THEN
  | STRUCT
  | STRING of (string * Location.t * string option)
  | STAR
  | SIG
  | SEMISEMI
  | SEMI
  | RPAREN
  | REC
  | RBRACKET
  | RBRACE
  | QUOTED_STRING_ITEM of
      (string * Location.t * string * Location.t * string option)
  | QUOTED_STRING_EXPR of
      (string * Location.t * string * Location.t * string option)
  | QUOTE
  | QUESTION
  | PRIVATE
  | PREFIXOP of string
  | PLUSEQ
  | PLUSDOT
  | PLUS
  | PERCENT
  | OR
  | OPTLABEL of string
  | OPEN
  | OF
  | OBJECT
  | NONREC
  | NEW
  | MUTABLE
  | MODULE
  | MINUSGREATER
  | MINUSDOT
  | MINUS
  | METHOD
  | MATCH
  | LPAREN
  | LIDENT of string
  | LETOP of string
  | LET
  | LESSMINUS
  | LESS
  | LBRACKETPERCENTPERCENT
  | LBRACKETPERCENT
  | LBRACKETLESS
  | LBRACKETGREATER
  | LBRACKETBAR
  | LBRACKETATATAT
  | LBRACKETATAT
  | LBRACKETAT
  | LBRACKET
  | LBRACELESS
  | LBRACE
  | LAZY
  | LABEL of string
  | INT of (string * char option)
  | INITIALIZER
  | INHERIT
  | INFIXOP4 of string
  | INFIXOP3 of string
  | INFIXOP2 of string
  | INFIXOP1 of string
  | INFIXOP0 of string
  | INCLUDE
  | IN
  | IF
  | HASHOP of string
  | HASH
  | GREATERRBRACKET
  | GREATERRBRACE
  | GREATER
  | FUNCTOR
  | FUNCTION
  | FUN
  | FOR
  | FLOAT of (string * char option)
  | FALSE
  | EXTERNAL
  | EXCEPTION
  | EQUAL
  | EOL
  | EOF
  | END
  | ELSE
  | DOWNTO
  | DOTOP of string
  | DOTDOT
  | DOT
  | DONE
  | DOCSTRING of Docstrings.docstring
  | DO
  | CONSTRAINT
  | COMMENT of (string * Location.t)
  | COMMA
  | COLONGREATER
  | COLONEQUAL
  | COLONCOLON
  | COLON
  | CLASS
  | CHAR of char
  | BEGIN
  | BARRBRACKET
  | BARBAR
  | BAR
  | BANG
  | BACKQUOTE
  | ASSERT
  | AS
  | ANDOP of string
  | AND
  | AMPERSAND
  | AMPERAMPER
exception Error
val use_file :
  (Lexing.lexbuf -> token) -> Lexing.lexbuf -> Parsetree.toplevel_phrase list
val toplevel_phrase :
  (Lexing.lexbuf -> token) -> Lexing.lexbuf -> Parsetree.toplevel_phrase
val parse_val_longident :
  (Lexing.lexbuf -> token) -> Lexing.lexbuf -> Longident.t
val parse_pattern :
  (Lexing.lexbuf -> token) -> Lexing.lexbuf -> Parsetree.pattern
val parse_mty_longident :
  (Lexing.lexbuf -> token) -> Lexing.lexbuf -> Longident.t
val parse_module_type :
  (Lexing.lexbuf -> token) -> Lexing.lexbuf -> Parsetree.module_type
val parse_module_expr :
  (Lexing.lexbuf -> token) -> Lexing.lexbuf -> Parsetree.module_expr
val parse_mod_longident :
  (Lexing.lexbuf -> token) -> Lexing.lexbuf -> Longident.t
val parse_mod_ext_longident :
  (Lexing.lexbuf -> token) -> Lexing.lexbuf -> Longident.t
val parse_expression :
  (Lexing.lexbuf -> token) -> Lexing.lexbuf -> Parsetree.expression
val parse_core_type :
  (Lexing.lexbuf -> token) -> Lexing.lexbuf -> Parsetree.core_type
val parse_constr_longident :
  (Lexing.lexbuf -> token) -> Lexing.lexbuf -> Longident.t
val parse_any_longident :
  (Lexing.lexbuf -> token) -> Lexing.lexbuf -> Longident.t
val interface :
  (Lexing.lexbuf -> token) -> Lexing.lexbuf -> Parsetree.signature
val implementation :
  (Lexing.lexbuf -> token) -> Lexing.lexbuf -> Parsetree.structure
module MenhirInterpreter :
  sig
    type token = token/2
    type production
    type 'a env
    type 'a checkpoint = private
        InputNeeded of 'a env
      | Shifting of 'a env * 'a env * bool
      | AboutToReduce of 'a env * production
      | HandlingError of 'a env
      | Accepted of 'a
      | Rejected
    val offer :
      'a checkpoint ->
      token * CamlinternalMenhirLib.IncrementalEngine.position *
      CamlinternalMenhirLib.IncrementalEngine.position -> 'a checkpoint
    type strategy = [ `Legacy | `Simplified ]
    val resume : ?strategy:strategy -> 'a checkpoint -> 'a checkpoint
    type supplier =
        unit ->
        token * CamlinternalMenhirLib.IncrementalEngine.position *
        CamlinternalMenhirLib.IncrementalEngine.position
    val lexer_lexbuf_to_supplier :
      (Lexing.lexbuf -> token) -> Lexing.lexbuf -> supplier
    val loop : ?strategy:strategy -> supplier -> 'a checkpoint -> 'a
    val loop_handle :
      ('a -> 'answer) ->
      ('a checkpoint -> 'answer) -> supplier -> 'a checkpoint -> 'answer
    val loop_handle_undo :
      ('a -> 'answer) ->
      ('a checkpoint -> 'a checkpoint -> 'answer) ->
      supplier -> 'a checkpoint -> 'answer
    val shifts : 'a checkpoint -> 'a env option
    val acceptable :
      'a checkpoint ->
      token -> CamlinternalMenhirLib.IncrementalEngine.position -> bool
    type 'a lr1state
    val number : 'a lr1state -> int
    val production_index : production -> int
    val find_production : int -> production
    type element =
        Element : 'a lr1state * 'a *
          CamlinternalMenhirLib.IncrementalEngine.position *
          CamlinternalMenhirLib.IncrementalEngine.position -> element
    type stack = element CamlinternalMenhirLib.General.stream
    val stack : 'a env -> stack
    val top : 'a env -> element option
    val pop_many : int -> 'a env -> 'a env option
    val get : int -> 'a env -> element option
    val current_state_number : 'a env -> int
    val equal : 'a env -> 'a env -> bool
    val positions :
      'a env ->
      CamlinternalMenhirLib.IncrementalEngine.position *
      CamlinternalMenhirLib.IncrementalEngine.position
    val env_has_default_reduction : 'a env -> bool
    val state_has_default_reduction : 'a lr1state -> bool
    val pop : 'a env -> 'a env option
    val force_reduction : production -> 'a env -> 'a env
    val input_needed : 'a env -> 'a checkpoint
  end
module Incremental :
  sig
    val use_file :
      Lexing.position ->
      Parsetree.toplevel_phrase list MenhirInterpreter.checkpoint
    val toplevel_phrase :
      Lexing.position ->
      Parsetree.toplevel_phrase MenhirInterpreter.checkpoint
    val parse_val_longident :
      Lexing.position -> Longident.t MenhirInterpreter.checkpoint
    val parse_pattern :
      Lexing.position -> Parsetree.pattern MenhirInterpreter.checkpoint
    val parse_mty_longident :
      Lexing.position -> Longident.t MenhirInterpreter.checkpoint
    val parse_module_type :
      Lexing.position -> Parsetree.module_type MenhirInterpreter.checkpoint
    val parse_module_expr :
      Lexing.position -> Parsetree.module_expr MenhirInterpreter.checkpoint
    val parse_mod_longident :
      Lexing.position -> Longident.t MenhirInterpreter.checkpoint
    val parse_mod_ext_longident :
      Lexing.position -> Longident.t MenhirInterpreter.checkpoint
    val parse_expression :
      Lexing.position -> Parsetree.expression MenhirInterpreter.checkpoint
    val parse_core_type :
      Lexing.position -> Parsetree.core_type MenhirInterpreter.checkpoint
    val parse_constr_longident :
      Lexing.position -> Longident.t MenhirInterpreter.checkpoint
    val parse_any_longident :
      Lexing.position -> Longident.t MenhirInterpreter.checkpoint
    val interface :
      Lexing.position -> Parsetree.signature MenhirInterpreter.checkpoint
    val implementation :
      Lexing.position -> Parsetree.structure MenhirInterpreter.checkpoint("DEBUG:rule", [Tag1 (("token", 804), (0, 0, Tag1 ([(("WITH", 270), (0), 0, (("parsing/parser.mli", 5, 42, 44), ("parsing/parser.mli", 5, 42, 50), 0), 0, Tag1 ("Parser", 1)); (("WHILE", 271), (0), 0, (("parsing/parser.mli", 6, 51, 53), ("parsing/parser.mli", 6, 51, 60), 0), 0, Tag1 ("Parser", 2)); (("WHEN", 272), (0), 0, (("parsing/parser.mli", 7, 61, 63), ("parsing/parser.mli", 7, 61, 69), 0), 0, Tag1 ("Parser", 3)); (("VIRTUAL", 273), (0), 0, (("parsing/parser.mli", 8, 70, 72), ("parsing/parser.mli", 8, 70, 81), 0), 0, Tag1 ("Parser", 4)); (("VAL", 274), (0), 0, (("parsing/parser.mli", 9, 82, 84), ("parsing/parser.mli", 9, 82, 89), 0), 0, Tag1 ("Parser", 5)); (("UNDERSCORE", 275), (0), 0, (("parsing/parser.mli", 10, 90, 92), ("parsing/parser.mli", 10, 90, 104), 0), 0, Tag1 ("Parser", 6)); (("UIDENT", 276), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -108)]), 0, (("parsing/parser.mli", 11, 105, 107), ("parsing/parser.mli", 11, 105, 127), 0), 0, Tag1 ("Parser", 7)); (("TYPE", 277), (0), 0, (("parsing/parser.mli", 12, 128, 130), ("parsing/parser.mli", 12, 128, 136), 0), 0, Tag1 ("Parser", 8)); (("TRY", 278), (0), 0, (("parsing/parser.mli", 13, 137, 139), ("parsing/parser.mli", 13, 137, 144), 0), 0, Tag1 ("Parser", 9)); (("TRUE", 279), (0), 0, (("parsing/parser.mli", 14, 145, 147), ("parsing/parser.mli", 14, 145, 153), 0), 0, Tag1 ("Parser", 10)); (("TO", 280), (0), 0, (("parsing/parser.mli", 15, 154, 156), ("parsing/parser.mli", 15, 154, 160), 0), 0, Tag1 ("Parser", 11)); (("TILDE", 281), (0), 0, (("parsing/parser.mli", 16, 161, 163), ("parsing/parser.mli", 16, 161, 170), 0), 0, Tag1 ("Parser", 12)); (("THEN", 282), (0), 0, (("parsing/parser.mli", 17, 171, 173), ("parsing/parser.mli", 17, 171, 179), 0), 0, Tag1 ("Parser", 13)); (("STRUCT", 283), (0), 0, (("parsing/parser.mli", 18, 180, 182), ("parsing/parser.mli", 18, 180, 190), 0), 0, Tag1 ("Parser", 14)); (("STRING", 284), ([(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -110); (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -111); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -113)], (0)), 100000000, 0, -112)]), 100000000, 0, -109)]), 0, (("parsing/parser.mli", 19, 191, 193), ("parsing/parser.mli", 19, 191, 242), 0), 0, Tag1 ("Parser", 15)); (("STAR", 351), (0), 0, (("parsing/parser.mli", 20, 243, 245), ("parsing/parser.mli", 20, 243, 251), 0), 0, Tag1 ("Parser", 16)); (("SIG", 352), (0), 0, (("parsing/parser.mli", 21, 252, 254), ("parsing/parser.mli", 21, 252, 259), 0), 0, Tag1 ("Parser", 17)); (("SEMISEMI", 353), (0), 0, (("parsing/parser.mli", 22, 260, 262), ("parsing/parser.mli", 22, 260, 272), 0), 0, Tag1 ("Parser", 18)); (("SEMI", 354), (0), 0, (("parsing/parser.mli", 23, 273, 275), ("parsing/parser.mli", 23, 273, 281), 0), 0, Tag1 ("Parser", 19)); (("RPAREN", 355), (0), 0, (("parsing/parser.mli", 24, 282, 284), ("parsing/parser.mli", 24, 282, 292), 0), 0, Tag1 ("Parser", 20)); (("REC", 356), (0), 0, (("parsing/parser.mli", 25, 293, 295), ("parsing/parser.mli", 25, 293, 300), 0), 0, Tag1 ("Parser", 21)); (("RBRACKET", 357), (0), 0, (("parsing/parser.mli", 26, 301, 303), ("parsing/parser.mli", 26, 301, 313), 0), 0, Tag1 ("Parser", 22)); (("RBRACE", 358), (0), 0, (("parsing/parser.mli", 27, 314, 316), ("parsing/parser.mli", 27, 314, 324), 0), 0, Tag1 ("Parser", 23)); (("QUOTED_STRING_ITEM", 359), ([(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -115); (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -116); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -117); (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -118); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -120)], (0)), 100000000, 0, -119)]), 100000000, 0, -114)]), 0, (("parsing/parser.mli", 28, 325, 327), ("parsing/parser.mli", 28, 325, 410), 0), 0, Tag1 ("Parser", 24)); (("QUOTED_STRING_EXPR", 360), ([(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -122); (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -123); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -124); (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -125); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -127)], (0)), 100000000, 0, -126)]), 100000000, 0, -121)]), 0, (("parsing/parser.mli", 29, 411, 413), ("parsing/parser.mli", 29, 411, 496), 0), 0, Tag1 ("Parser", 25)); (("QUOTE", 361), (0), 0, (("parsing/parser.mli", 30, 497, 499), ("parsing/parser.mli", 30, 497, 506), 0), 0, Tag1 ("Parser", 26)); (("QUESTION", 362), (0), 0, (("parsing/parser.mli", 31, 507, 509), ("parsing/parser.mli", 31, 507, 519), 0), 0, Tag1 ("Parser", 27)); (("PRIVATE", 363), (0), 0, (("parsing/parser.mli", 32, 520, 522), ("parsing/parser.mli", 32, 520, 531), 0), 0, Tag1 ("Parser", 28)); (("PREFIXOP", 364), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -128)]), 0, (("parsing/parser.mli", 33, 532, 534), ("parsing/parser.mli", 33, 532, 556), 0), 0, Tag1 ("Parser", 29)); (("PLUSEQ", 365), (0), 0, (("parsing/parser.mli", 34, 557, 559), ("parsing/parser.mli", 34, 557, 567), 0), 0, Tag1 ("Parser", 30)); (("PLUSDOT", 366), (0), 0, (("parsing/parser.mli", 35, 568, 570), ("parsing/parser.mli", 35, 568, 579), 0), 0, Tag1 ("Parser", 31)); (("PLUS", 367), (0), 0, (("parsing/parser.mli", 36, 580, 582), ("parsing/parser.mli", 36, 580, 588), 0), 0, Tag1 ("Parser", 32)); (("PERCENT", 368), (0), 0, (("parsing/parser.mli", 37, 589, 591), ("parsing/parser.mli", 37, 589, 600), 0), 0, Tag1 ("Parser", 33)); (("OR", 369), (0), 0, (("parsing/parser.mli", 38, 601, 603), ("parsing/parser.mli", 38, 601, 607), 0), 0, Tag1 ("Parser", 34)); (("OPTLABEL", 370), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -129)]), 0, (("parsing/parser.mli", 39, 608, 610), ("parsing/parser.mli", 39, 608, 632), 0), 0, Tag1 ("Parser", 35)); (("OPEN", 371), (0), 0, (("parsing/parser.mli", 40, 633, 635), ("parsing/parser.mli", 40, 633, 641), 0), 0, Tag1 ("Parser", 36)); (("OF", 372), (0), 0, (("parsing/parser.mli", 41, 642, 644), ("parsing/parser.mli", 41, 642, 648), 0), 0, Tag1 ("Parser", 37)); (("OBJECT", 373), (0), 0, (("parsing/parser.mli", 42, 649, 651), ("parsing/parser.mli", 42, 649, 659), 0), 0, Tag1 ("Parser", 38)); (("NONREC", 374), (0), 0, (("parsing/parser.mli", 43, 660, 662), ("parsing/parser.mli", 43, 660, 670), 0), 0, Tag1 ("Parser", 39)); (("NEW", 375), (0), 0, (("parsing/parser.mli", 44, 671, 673), ("parsing/parser.mli", 44, 671, 678), 0), 0, Tag1 ("Parser", 40)); (("MUTABLE", 376), (0), 0, (("parsing/parser.mli", 45, 679, 681), ("parsing/parser.mli", 45, 679, 690), 0), 0, Tag1 ("Parser", 41)); (("MODULE", 377), (0), 0, (("parsing/parser.mli", 46, 691, 693), ("parsing/parser.mli", 46, 691, 701), 0), 0, Tag1 ("Parser", 42)); (("MINUSGREATER", 378), (0), 0, (("parsing/parser.mli", 47, 702, 704), ("parsing/parser.mli", 47, 702, 718), 0), 0, Tag1 ("Parser", 43)); (("MINUSDOT", 379), (0), 0, (("parsing/parser.mli", 48, 719, 721), ("parsing/parser.mli", 48, 719, 731), 0), 0, Tag1 ("Parser", 44)); (("MINUS", 380), (0), 0, (("parsing/parser.mli", 49, 732, 734), ("parsing/parser.mli", 49, 732, 741), 0), 0, Tag1 ("Parser", 45)); (("METHOD", 381), (0), 0, (("parsing/parser.mli", 50, 742, 744), ("parsing/parser.mli", 50, 742, 752), 0), 0, Tag1 ("Parser", 46)); (("MATCH", 382), (0), 0, (("parsing/parser.mli", 51, 753, 755), ("parsing/parser.mli", 51, 753, 762), 0), 0, Tag1 ("Parser", 47)); (("LPAREN", 383), (0), 0, (("parsing/parser.mli", 52, 763, 765), ("parsing/parser.mli", 52, 763, 773), 0), 0, Tag1 ("Parser", 48)); (("LIDENT", 384), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -130)]), 0, (("parsing/parser.mli", 53, 774, 776), ("parsing/parser.mli", 53, 774, 796), 0), 0, Tag1 ("Parser", 49)); (("LETOP", 385), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -131)]), 0, (("parsing/parser.mli", 54, 797, 799), ("parsing/parser.mli", 54, 797, 818), 0), 0, Tag1 ("Parser", 50)); (("LET", 386), (0), 0, (("parsing/parser.mli", 55, 819, 821), ("parsing/parser.mli", 55, 819, 826), 0), 0, Tag1 ("Parser", 51)); (("LESSMINUS", 387), (0), 0, (("parsing/parser.mli", 56, 827, 829), ("parsing/parser.mli", 56, 827, 840), 0), 0, Tag1 ("Parser", 52)); (("LESS", 388), (0), 0, (("parsing/parser.mli", 57, 841, 843), ("parsing/parser.mli", 57, 841, 849), 0), 0, Tag1 ("Parser", 53)); (("LBRACKETPERCENTPERCENT", 389), (0), 0, (("parsing/parser.mli", 58, 850, 852), ("parsing/parser.mli", 58, 850, 876), 0), 0, Tag1 ("Parser", 54)); (("LBRACKETPERCENT", 390), (0), 0, (("parsing/parser.mli", 59, 877, 879), ("parsing/parser.mli", 59, 877, 896), 0), 0, Tag1 ("Parser", 55)); (("LBRACKETLESS", 391), (0), 0, (("parsing/parser.mli", 60, 897, 899), ("parsing/parser.mli", 60, 897, 913), 0), 0, Tag1 ("Parser", 56)); (("LBRACKETGREATER", 392), (0), 0, (("parsing/parser.mli", 61, 914, 916), ("parsing/parser.mli", 61, 914, 933), 0), 0, Tag1 ("Parser", 57)); (("LBRACKETBAR", 393), (0), 0, (("parsing/parser.mli", 62, 934, 936), ("parsing/parser.mli", 62, 934, 949), 0), 0, Tag1 ("Parser", 58)); (("LBRACKETATATAT", 394), (0), 0, (("parsing/parser.mli", 63, 950, 952), ("parsing/parser.mli", 63, 950, 968), 0), 0, Tag1 ("Parser", 59)); (("LBRACKETATAT", 395), (0), 0, (("parsing/parser.mli", 64, 969, 971), ("parsing/parser.mli", 64, 969, 985), 0), 0, Tag1 ("Parser", 60)); (("LBRACKETAT", 396), (0), 0, (("parsing/parser.mli", 65, 986, 988), ("parsing/parser.mli", 65, 986, 1000), 0), 0, Tag1 ("Parser", 61)); (("LBRACKET", 397), (0), 0, (("parsing/parser.mli", 66, 1001, 1003), ("parsing/parser.mli", 66, 1001, 1013), 0), 0, Tag1 ("Parser", 62)); (("LBRACELESS", 398), (0), 0, (("parsing/parser.mli", 67, 1014, 1016), ("parsing/parser.mli", 67, 1014, 1028), 0), 0, Tag1 ("Parser", 63)); (("LBRACE", 399), (0), 0, (("parsing/parser.mli", 68, 1029, 1031), ("parsing/parser.mli", 68, 1029, 1039), 0), 0, Tag1 ("Parser", 64)); (("LAZY", 400), (0), 0, (("parsing/parser.mli", 69, 1040, 1042), ("parsing/parser.mli", 69, 1040, 1048), 0), 0, Tag1 ("Parser", 65)); (("LABEL", 401), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -132)]), 0, (("parsing/parser.mli", 70, 1049, 1051), ("parsing/parser.mli", 70, 1049, 1070), 0), 0, Tag1 ("Parser", 66)); (("INT", 402), ([(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -134); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -136)], (0)), 100000000, 0, -135)]), 100000000, 0, -133)]), 0, (("parsing/parser.mli", 71, 1071, 1073), ("parsing/parser.mli", 71, 1071, 1104), 0), 0, Tag1 ("Parser", 67)); (("INITIALIZER", 403), (0), 0, (("parsing/parser.mli", 72, 1105, 1107), ("parsing/parser.mli", 72, 1105, 1120), 0), 0, Tag1 ("Parser", 68)); (("INHERIT", 404), (0), 0, (("parsing/parser.mli", 73, 1121, 1123), ("parsing/parser.mli", 73, 1121, 1132), 0), 0, Tag1 ("Parser", 69)); (("INFIXOP4", 405), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -137)]), 0, (("parsing/parser.mli", 74, 1133, 1135), ("parsing/parser.mli", 74, 1133, 1157), 0), 0, Tag1 ("Parser", 70)); (("INFIXOP3", 406), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -138)]), 0, (("parsing/parser.mli", 75, 1158, 1160), ("parsing/parser.mli", 75, 1158, 1182), 0), 0, Tag1 ("Parser", 71)); (("INFIXOP2", 407), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -139)]), 0, (("parsing/parser.mli", 76, 1183, 1185), ("parsing/parser.mli", 76, 1183, 1207), 0), 0, Tag1 ("Parser", 72)); (("INFIXOP1", 408), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -140)]), 0, (("parsing/parser.mli", 77, 1208, 1210), ("parsing/parser.mli", 77, 1208, 1232), 0), 0, Tag1 ("Parser", 73)); (("INFIXOP0", 409), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -141)]), 0, (("parsing/parser.mli", 78, 1233, 1235), ("parsing/parser.mli", 78, 1233, 1257), 0), 0, Tag1 ("Parser", 74)); (("INCLUDE", 410), (0), 0, (("parsing/parser.mli", 79, 1258, 1260), ("parsing/parser.mli", 79, 1258, 1269), 0), 0, Tag1 ("Parser", 75)); (("IN", 411), (0), 0, (("parsing/parser.mli", 80, 1270, 1272), ("parsing/parser.mli", 80, 1270, 1276), 0), 0, Tag1 ("Parser", 76)); (("IF", 412), (0), 0, (("parsing/parser.mli", 81, 1277, 1279), ("parsing/parser.mli", 81, 1277, 1283), 0), 0, Tag1 ("Parser", 77)); (("HASHOP", 413), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -142)]), 0, (("parsing/parser.mli", 82, 1284, 1286), ("parsing/parser.mli", 82, 1284, 1306), 0), 0, Tag1 ("Parser", 78)); (("HASH", 414), (0), 0, (("parsing/parser.mli", 83, 1307, 1309), ("parsing/parser.mli", 83, 1307, 1315), 0), 0, Tag1 ("Parser", 79)); (("GREATERRBRACKET", 415), (0), 0, (("parsing/parser.mli", 84, 1316, 1318), ("parsing/parser.mli", 84, 1316, 1335), 0), 0, Tag1 ("Parser", 80)); (("GREATERRBRACE", 416), (0), 0, (("parsing/parser.mli", 85, 1336, 1338), ("parsing/parser.mli", 85, 1336, 1353), 0), 0, Tag1 ("Parser", 81)); (("GREATER", 417), (0), 0, (("parsing/parser.mli", 86, 1354, 1356), ("parsing/parser.mli", 86, 1354, 1365), 0), 0, Tag1 ("Parser", 82)); (("FUNCTOR", 418), (0), 0, (("parsing/parser.mli", 87, 1366, 1368), ("parsing/parser.mli", 87, 1366, 1377), 0), 0, Tag1 ("Parser", 83)); (("FUNCTION", 419), (0), 0, (("parsing/parser.mli", 88, 1378, 1380), ("parsing/parser.mli", 88, 1378, 1390), 0), 0, Tag1 ("Parser", 84)); (("FUN", 420), (0), 0, (("parsing/parser.mli", 89, 1391, 1393), ("parsing/parser.mli", 89, 1391, 1398), 0), 0, Tag1 ("Parser", 85)); (("FOR", 421), (0), 0, (("parsing/parser.mli", 90, 1399, 1401), ("parsing/parser.mli", 90, 1399, 1406), 0), 0, Tag1 ("Parser", 86)); (("FLOAT", 422), ([(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -144); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -146)], (0)), 100000000, 0, -145)]), 100000000, 0, -143)]), 0, (("parsing/parser.mli", 91, 1407, 1409), ("parsing/parser.mli", 91, 1407, 1442), 0), 0, Tag1 ("Parser", 87)); (("FALSE", 423), (0), 0, (("parsing/parser.mli", 92, 1443, 1445), ("parsing/parser.mli", 92, 1443, 1452), 0), 0, Tag1 ("Parser", 88)); (("EXTERNAL", 424), (0), 0, (("parsing/parser.mli", 93, 1453, 1455), ("parsing/parser.mli", 93, 1453, 1465), 0), 0, Tag1 ("Parser", 89)); (("EXCEPTION", 425), (0), 0, (("parsing/parser.mli", 94, 1466, 1468), ("parsing/parser.mli", 94, 1466, 1479), 0), 0, Tag1 ("Parser", 90)); (("EQUAL", 426), (0), 0, (("parsing/parser.mli", 95, 1480, 1482), ("parsing/parser.mli", 95, 1480, 1489), 0), 0, Tag1 ("Parser", 91)); (("EOL", 427), (0), 0, (("parsing/parser.mli", 96, 1490, 1492), ("parsing/parser.mli", 96, 1490, 1497), 0), 0, Tag1 ("Parser", 92)); (("EOF", 428), (0), 0, (("parsing/parser.mli", 97, 1498, 1500), ("parsing/parser.mli", 97, 1498, 1505), 0), 0, Tag1 ("Parser", 93)); (("END", 429), (0), 0, (("parsing/parser.mli", 98, 1506, 1508), ("parsing/parser.mli", 98, 1506, 1513), 0), 0, Tag1 ("Parser", 94)); (("ELSE", 430), (0), 0, (("parsing/parser.mli", 99, 1514, 1516), ("parsing/parser.mli", 99, 1514, 1522), 0), 0, Tag1 ("Parser", 95)); (("DOWNTO", 431), (0), 0, (("parsing/parser.mli", 100, 1523, 1525), ("parsing/parser.mli", 100, 1523, 1533), 0), 0, Tag1 ("Parser", 96)); (("DOTOP", 432), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -147)]), 0, (("parsing/parser.mli", 101, 1534, 1536), ("parsing/parser.mli", 101, 1534, 1555), 0), 0, Tag1 ("Parser", 97)); (("DOTDOT", 433), (0), 0, (("parsing/parser.mli", 102, 1556, 1558), ("parsing/parser.mli", 102, 1556, 1566), 0), 0, Tag1 ("Parser", 98)); (("DOT", 434), (0), 0, (("parsing/parser.mli", 103, 1567, 1569), ("parsing/parser.mli", 103, 1567, 1574), 0), 0, Tag1 ("Parser", 99)); (("DONE", 435), (0), 0, (("parsing/parser.mli", 104, 1575, 1577), ("parsing/parser.mli", 104, 1575, 1583), 0), 0, Tag1 ("Parser", 100)); (("DOCSTRING", 436), ([(Tag3 (Tag1 ((Tag2 ("Docstrings")), "docstring"), 0, (0)), 100000000, 0, -148)]), 0, (("parsing/parser.mli", 105, 1584, 1586), ("parsing/parser.mli", 105, 1584, 1623), 0), 0, Tag1 ("Parser", 101)); (("DO", 480), (0), 0, (("parsing/parser.mli", 106, 1624, 1626), ("parsing/parser.mli", 106, 1624, 1630), 0), 0, Tag1 ("Parser", 102)); (("CONSTRAINT", 481), (0), 0, (("parsing/parser.mli", 107, 1631, 1633), ("parsing/parser.mli", 107, 1631, 1645), 0), 0, Tag1 ("Parser", 103)); (("COMMENT", 482), ([(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -150); (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -151)]), 100000000, 0, -149)]), 0, (("parsing/parser.mli", 108, 1646, 1648), ("parsing/parser.mli", 108, 1646, 1682), 0), 0, Tag1 ("Parser", 104)); (("COMMA", 483), (0), 0, (("parsing/parser.mli", 109, 1683, 1685), ("parsing/parser.mli", 109, 1683, 1692), 0), 0, Tag1 ("Parser", 105)); (("COLONGREATER", 484), (0), 0, (("parsing/parser.mli", 110, 1693, 1695), ("parsing/parser.mli", 110, 1693, 1709), 0), 0, Tag1 ("Parser", 106)); (("COLONEQUAL", 485), (0), 0, (("parsing/parser.mli", 111, 1710, 1712), ("parsing/parser.mli", 111, 1710, 1724), 0), 0, Tag1 ("Parser", 107)); (("COLONCOLON", 486), (0), 0, (("parsing/parser.mli", 112, 1725, 1727), ("parsing/parser.mli", 112, 1725, 1739), 0), 0, Tag1 ("Parser", 108)); (("COLON", 487), (0), 0, (("parsing/parser.mli", 113, 1740, 1742), ("parsing/parser.mli", 113, 1740, 1749), 0), 0, Tag1 ("Parser", 109)); (("CLASS", 488), (0), 0, (("parsing/parser.mli", 114, 1750, 1752), ("parsing/parser.mli", 114, 1750, 1759), 0), 0, Tag1 ("Parser", 110)); (("CHAR", 489), ([(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -152)]), 0, (("parsing/parser.mli", 115, 1760, 1762), ("parsing/parser.mli", 115, 1760, 1778), 0), 0, Tag1 ("Parser", 111)); (("BEGIN", 490), (0), 0, (("parsing/parser.mli", 116, 1779, 1781), ("parsing/parser.mli", 116, 1779, 1788), 0), 0, Tag1 ("Parser", 112)); (("BARRBRACKET", 491), (0), 0, (("parsing/parser.mli", 117, 1789, 1791), ("parsing/parser.mli", 117, 1789, 1804), 0), 0, Tag1 ("Parser", 113)); (("BARBAR", 492), (0), 0, (("parsing/parser.mli", 118, 1805, 1807), ("parsing/parser.mli", 118, 1805, 1815), 0), 0, Tag1 ("Parser", 114)); (("BAR", 493), (0), 0, (("parsing/parser.mli", 119, 1816, 1818), ("parsing/parser.mli", 119, 1816, 1823), 0), 0, Tag1 ("Parser", 115)); (("BANG", 494), (0), 0, (("parsing/parser.mli", 120, 1824, 1826), ("parsing/parser.mli", 120, 1824, 1832), 0), 0, Tag1 ("Parser", 116)); (("BACKQUOTE", 495), (0), 0, (("parsing/parser.mli", 121, 1833, 1835), ("parsing/parser.mli", 121, 1833, 1846), 0), 0, Tag1 ("Parser", 117)); (("ASSERT", 496), (0), 0, (("parsing/parser.mli", 122, 1847, 1849), ("parsing/parser.mli", 122, 1847, 1857), 0), 0, Tag1 ("Parser", 118)); (("AS", 497), (0), 0, (("parsing/parser.mli", 123, 1858, 1860), ("parsing/parser.mli", 123, 1858, 1864), 0), 0, Tag1 ("Parser", 119)); (("ANDOP", 498), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -153)]), 0, (("parsing/parser.mli", 124, 1865, 1867), ("parsing/parser.mli", 124, 1865, 1886), 0), 0, Tag1 ("Parser", 120)); (("AND", 499), (0), 0, (("parsing/parser.mli", 125, 1887, 1889), ("parsing/parser.mli", 125, 1887, 1894), 0), 0, Tag1 ("Parser", 121)); (("AMPERSAND", 500), (0), 0, (("parsing/parser.mli", 126, 1895, 1897), ("parsing/parser.mli", 126, 1895, 1908), 0), 0, Tag1 ("Parser", 122)); (("AMPERAMPER", 501), (0), 0, (("parsing/parser.mli", 127, 1909, 1911), ("parsing/parser.mli", 127, 1909, 1923), 0), 0, Tag1 ("Parser", 123))], 0), 1, 0, 0, 0, 0, 0, (("parsing/parser.mli", 4, 28, 28), ("parsing/parser.mli", 127, 1909, 1923), 0), 0, 0, 0, Tag1 ("Parser", 0)), 1, 0); Tag2 (("Error", 805), ((Tag3 ("exn", 7)), 0, (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Parser", 124)), 2, 0); (("use_file", 806), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -107), (Tag3 ((("token", 804)), 0, (0)), 100000000, 0, -106), 0), 100000000, 0, -105), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -104), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Parsetree")), "toplevel_phrase"), 0, (0)), 100000000, 0, -103)], (0)), 100000000, 0, -102), 0), 100000000, 0, -101), 0), 100000000, 0, -100), 0, (("parsing/parser.mli", 135, 2034, 2034), ("parsing/parser.mli", 135, 2034, 2125), 0), 0, Tag1 ("Parser", 127)), 0); (("toplevel_phrase", 807), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -99), (Tag3 ((("token", 804)), 0, (0)), 100000000, 0, -98), 0), 100000000, 0, -97), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -96), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "toplevel_phrase"), 0, (0)), 100000000, 0, -95), 0), 100000000, 0, -94), 0), 100000000, 0, -93), 0, (("parsing/parser.mli", 137, 2127, 2127), ("parsing/parser.mli", 137, 2127, 2220), 0), 0, Tag1 ("Parser", 128)), 0); (("parse_val_longident", 808), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -92), (Tag3 ((("token", 804)), 0, (0)), 100000000, 0, -91), 0), 100000000, 0, -90), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -89), (Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -88), 0), 100000000, 0, -87), 0), 100000000, 0, -86), 0, (("parsing/parser.mli", 139, 2222, 2222), ("parsing/parser.mli", 139, 2222, 2305), 0), 0, Tag1 ("Parser", 129)), 0); (("parse_pattern", 809), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -85), (Tag3 ((("token", 804)), 0, (0)), 100000000, 0, -84), 0), 100000000, 0, -83), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -82), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "pattern"), 0, (0)), 100000000, 0, -81), 0), 100000000, 0, -80), 0), 100000000, 0, -79), 0, (("parsing/parser.mli", 141, 2307, 2307), ("parsing/parser.mli", 141, 2307, 2390), 0), 0, Tag1 ("Parser", 130)), 0); (("parse_mty_longident", 810), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -78), (Tag3 ((("token", 804)), 0, (0)), 100000000, 0, -77), 0), 100000000, 0, -76), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -75), (Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -74), 0), 100000000, 0, -73), 0), 100000000, 0, -72), 0, (("parsing/parser.mli", 143, 2392, 2392), ("parsing/parser.mli", 143, 2392, 2475), 0), 0, Tag1 ("Parser", 131)), 0); (("parse_module_type", 811), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -71), (Tag3 ((("token", 804)), 0, (0)), 100000000, 0, -70), 0), 100000000, 0, -69), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -68), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "module_type"), 0, (0)), 100000000, 0, -67), 0), 100000000, 0, -66), 0), 100000000, 0, -65), 0, (("parsing/parser.mli", 145, 2477, 2477), ("parsing/parser.mli", 145, 2477, 2568), 0), 0, Tag1 ("Parser", 132)), 0); (("parse_module_expr", 812), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -64), (Tag3 ((("token", 804)), 0, (0)), 100000000, 0, -63), 0), 100000000, 0, -62), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -61), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "module_expr"), 0, (0)), 100000000, 0, -60), 0), 100000000, 0, -59), 0), 100000000, 0, -58), 0, (("parsing/parser.mli", 147, 2570, 2570), ("parsing/parser.mli", 147, 2570, 2661), 0), 0, Tag1 ("Parser", 133)), 0); (("parse_mod_longident", 813), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -57), (Tag3 ((("token", 804)), 0, (0)), 100000000, 0, -56), 0), 100000000, 0, -55), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -54), (Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -53), 0), 100000000, 0, -52), 0), 100000000, 0, -51), 0, (("parsing/parser.mli", 149, 2663, 2663), ("parsing/parser.mli", 149, 2663, 2746), 0), 0, Tag1 ("Parser", 134)), 0); (("parse_mod_ext_longident", 814), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -50), (Tag3 ((("token", 804)), 0, (0)), 100000000, 0, -49), 0), 100000000, 0, -48), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -47), (Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -46), 0), 100000000, 0, -45), 0), 100000000, 0, -44), 0, (("parsing/parser.mli", 151, 2748, 2748), ("parsing/parser.mli", 151, 2748, 2835), 0), 0, Tag1 ("Parser", 135)), 0); (("parse_expression", 815), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -43), (Tag3 ((("token", 804)), 0, (0)), 100000000, 0, -42), 0), 100000000, 0, -41), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -40), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "expression"), 0, (0)), 100000000, 0, -39), 0), 100000000, 0, -38), 0), 100000000, 0, -37), 0, (("parsing/parser.mli", 153, 2837, 2837), ("parsing/parser.mli", 153, 2837, 2926), 0), 0, Tag1 ("Parser", 136)), 0); (("parse_core_type", 816), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -36), (Tag3 ((("token", 804)), 0, (0)), 100000000, 0, -35), 0), 100000000, 0, -34), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -33), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "core_type"), 0, (0)), 100000000, 0, -32), 0), 100000000, 0, -31), 0), 100000000, 0, -30), 0, (("parsing/parser.mli", 155, 2928, 2928), ("parsing/parser.mli", 155, 2928, 3015), 0), 0, Tag1 ("Parser", 137)), 0); (("parse_constr_longident", 817), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -29), (Tag3 ((("token", 804)), 0, (0)), 100000000, 0, -28), 0), 100000000, 0, -27), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -26), (Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -25), 0), 100000000, 0, -24), 0), 100000000, 0, -23), 0, (("parsing/parser.mli", 157, 3017, 3017), ("parsing/parser.mli", 157, 3017, 3103), 0), 0, Tag1 ("Parser", 138)), 0); (("parse_any_longident", 818), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -22), (Tag3 ((("token", 804)), 0, (0)), 100000000, 0, -21), 0), 100000000, 0, -20), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -19), (Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -18), 0), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("parsing/parser.mli", 159, 3105, 3105), ("parsing/parser.mli", 159, 3105, 3188), 0), 0, Tag1 ("Parser", 139)), 0); (("interface", 819), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -15), (Tag3 ((("token", 804)), 0, (0)), 100000000, 0, -14), 0), 100000000, 0, -13), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -12), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "signature"), 0, (0)), 100000000, 0, -11), 0), 100000000, 0, -10), 0), 100000000, 0, -9), 0, (("parsing/parser.mli", 161, 3190, 3190), ("parsing/parser.mli", 161, 3190, 3271), 0), 0, Tag1 ("Parser", 140)), 0); (("implementation", 820), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -8), (Tag3 ((("token", 804)), 0, (0)), 100000000, 0, -7), 0), 100000000, 0, -6), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -5), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "structure"), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("parsing/parser.mli", 163, 3273, 3273), ("parsing/parser.mli", 163, 3273, 3359), 0), 0, Tag1 ("Parser", 141)), 0); Tag3 (("MenhirInterpreter", 821), 0, (Tag1 ([Tag1 (("token", 823), (0, 0, 0, 1, ((Tag3 ((("token", 804)), 0, (0)), 100000000, 0, -319)), 0, 0, 0, 0, (("parsing/parser.mli", 170, 3496, 3505), ("parsing/parser.mli", 170, 3496, 3523), 0), 0, 0, 0, Tag1 ("Parser", 142)), 1, 0); Tag1 (("production", 824), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("parsing/camlinternalMenhirLib.mli", 176, 7413, 7415), ("parsing/camlinternalMenhirLib.mli", 176, 7413, 7430), 0), 0, 0, 0, Tag1 ("CamlinternalMenhirLib", 21)), 1, 0); Tag1 (("env", 825), ([((("a")), 100000000, 0, -318)], 1, 0, 1, 0, [7], [2], 0, 0, (("parsing/camlinternalMenhirLib.mli", 215, 9422, 9424), ("parsing/camlinternalMenhirLib.mli", 215, 9422, 9435), 0), 0, 0, 0, Tag1 ("CamlinternalMenhirLib", 22)), 1, 0); Tag1 (("checkpoint", 826), ([((("a")), 100000000, 0, -311)], 1, Tag1 ([(("InputNeeded", 354), ([(Tag3 ((("env", 825)), [((("a")), 100000000, 0, -311)], (0)), 100000000, 0, -310)]), 0, (("parsing/camlinternalMenhirLib.mli", 218, 9468, 9472), ("parsing/camlinternalMenhirLib.mli", 218, 9468, 9495), 0), 0, Tag1 ("CamlinternalMenhirLib", 24)); (("Shifting", 355), ([(Tag3 ((("env", 825)), [((("a")), 100000000, 0, -311)], (0)), 100000000, 0, -312); (Tag3 ((("env", 825)), [((("a")), 100000000, 0, -311)], (0)), 100000000, 0, -313); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -314)]), 0, (("parsing/camlinternalMenhirLib.mli", 219, 9496, 9500), ("parsing/camlinternalMenhirLib.mli", 219, 9496, 9536), 0), 0, Tag1 ("CamlinternalMenhirLib", 25)); (("AboutToReduce", 356), ([(Tag3 ((("env", 825)), [((("a")), 100000000, 0, -311)], (0)), 100000000, 0, -315); (Tag3 ((("production", 824)), 0, (0)), 100000000, 0, -316)]), 0, (("parsing/camlinternalMenhirLib.mli", 220, 9537, 9541), ("parsing/camlinternalMenhirLib.mli", 220, 9537, 9579), 0), 0, Tag1 ("CamlinternalMenhirLib", 26)); (("HandlingError", 357), ([(Tag3 ((("env", 825)), [((("a")), 100000000, 0, -311)], (0)), 100000000, 0, -317)]), 0, (("parsing/camlinternalMenhirLib.mli", 221, 9580, 9584), ("parsing/camlinternalMenhirLib.mli", 221, 9580, 9609), 0), 0, Tag1 ("CamlinternalMenhirLib", 27)); (("Accepted", 358), ([((("a")), 100000000, 0, -311)]), 0, (("parsing/camlinternalMenhirLib.mli", 222, 9610, 9614), ("parsing/camlinternalMenhirLib.mli", 222, 9610, 9630), 0), 0, Tag1 ("CamlinternalMenhirLib", 28)); (("Rejected", 359), (0), 0, (("parsing/camlinternalMenhirLib.mli", 223, 9631, 9635), ("parsing/camlinternalMenhirLib.mli", 223, 9631, 9645), 0), 0, Tag1 ("CamlinternalMenhirLib", 29))], 0), 0, 0, [31], [0], 0, 0, (("parsing/camlinternalMenhirLib.mli", 217, 9437, 9439), ("parsing/camlinternalMenhirLib.mli", 223, 9631, 9645), 0), 0, 0, 0, Tag1 ("CamlinternalMenhirLib", 23)), 1, 0); (("offer", 827), ((Tag1 (0, (Tag3 ((("checkpoint", 826)), [((("a")), 100000000, 0, -304)], (0)), 100000000, 0, -309), (Tag1 (0, (Tag2 ([(Tag3 ((("token", 823)), 0, (0)), 100000000, 0, -306); (Tag3 (Tag1 (Tag1 ((Tag2 ("CamlinternalMenhirLib")), "IncrementalEngine"), "position"), 0, (0)), 100000000, 0, -307); (Tag3 (Tag1 (Tag1 ((Tag2 ("CamlinternalMenhirLib")), "IncrementalEngine"), "position"), 0, (0)), 100000000, 0, -308)]), 100000000, 0, -305), (Tag3 ((("checkpoint", 826)), [((("a")), 100000000, 0, -304)], (0)), 100000000, 0, -303), 0), 100000000, 0, -302), 0), 100000000, 0, -301), 0, (("parsing/camlinternalMenhirLib.mli", 230, 9917, 9919), ("parsing/camlinternalMenhirLib.mli", 233, 9986, 10003), 0), 0, Tag1 ("CamlinternalMenhirLib", 30)), 0); Tag1 (("strategy", 828), (0, 0, 0, 1, ((Tag8 (([("Legacy", (0)); ("Simplified", (0))], (0, 100000000, 0, -300), 1, 0, 0)), 100000000, 0, -299)), 0, 0, 0, 0, (("parsing/camlinternalMenhirLib.mli", 256, 11084, 11086), ("parsing/camlinternalMenhirLib.mli", 257, 11102, 11131), 0), 0, 1, 0, Tag1 ("CamlinternalMenhirLib", 31)), 1, 0); (("resume", 829), ((Tag1 (Tag1 ("strategy"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("strategy", 828)), 0, (0)), 100000000, 0, -298)], (0)), 100000000, 0, -297), (Tag1 (0, (Tag3 ((("checkpoint", 826)), [((("a")), 100000000, 0, -295)], (0)), 100000000, 0, -296), (Tag3 ((("checkpoint", 826)), [((("a")), 100000000, 0, -295)], (0)), 100000000, 0, -294), 0), 100000000, 0, -293), 0), 100000000, 0, -292), 0, (("parsing/camlinternalMenhirLib.mli", 259, 11133, 11135), ("parsing/camlinternalMenhirLib.mli", 262, 11194, 11211), 0), 0, Tag1 ("CamlinternalMenhirLib", 32)), 0); Tag1 (("supplier", 830), (0, 0, 0, 1, ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -291), (Tag2 ([(Tag3 ((("token", 823)), 0, (0)), 100000000, 0, -288); (Tag3 (Tag1 (Tag1 ((Tag2 ("CamlinternalMenhirLib")), "IncrementalEngine"), "position"), 0, (0)), 100000000, 0, -289); (Tag3 (Tag1 (Tag1 ((Tag2 ("CamlinternalMenhirLib")), "IncrementalEngine"), "position"), 0, (0)), 100000000, 0, -290)]), 100000000, 0, -287), 0), 100000000, 0, -286)), 0, 0, 0, 0, (("parsing/camlinternalMenhirLib.mli", 267, 11370, 11372), ("parsing/camlinternalMenhirLib.mli", 268, 11388, 11427), 0), 0, 0, 0, Tag1 ("CamlinternalMenhirLib", 33)), 1, 0); (("lexer_lexbuf_to_supplier", 831), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -285), (Tag3 ((("token", 823)), 0, (0)), 100000000, 0, -284), 0), 100000000, 0, -283), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -282), (Tag3 ((("supplier", 830)), 0, (0)), 100000000, 0, -281), 0), 100000000, 0, -280), 0), 100000000, 0, -279), 0, (("parsing/camlinternalMenhirLib.mli", 273, 11519, 11521), ("parsing/camlinternalMenhirLib.mli", 276, 11604, 11616), 0), 0, Tag1 ("CamlinternalMenhirLib", 34)), 0); (("loop", 832), ((Tag1 (Tag1 ("strategy"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("strategy", 828)), 0, (0)), 100000000, 0, -278)], (0)), 100000000, 0, -277), (Tag1 (0, (Tag3 ((("supplier", 830)), 0, (0)), 100000000, 0, -276), (Tag1 (0, (Tag3 ((("checkpoint", 826)), [((("a")), 100000000, 0, -274)], (0)), 100000000, 0, -275), ((("a")), 100000000, 0, -274), 0), 100000000, 0, -273), 0), 100000000, 0, -272), 0), 100000000, 0, -271), 0, (("parsing/camlinternalMenhirLib.mli", 290, 12316, 12318), ("parsing/camlinternalMenhirLib.mli", 290, 12316, 12381), 0), 0, Tag1 ("CamlinternalMenhirLib", 35)), 0); (("loop_handle", 833), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -266), ((("answer")), 100000000, 0, -264), 0), 100000000, 0, -270), (Tag1 (0, (Tag1 (0, (Tag3 ((("checkpoint", 826)), [((("a")), 100000000, 0, -266)], (0)), 100000000, 0, -269), ((("answer")), 100000000, 0, -264), 0), 100000000, 0, -268), (Tag1 (0, (Tag3 ((("supplier", 830)), 0, (0)), 100000000, 0, -267), (Tag1 (0, (Tag3 ((("checkpoint", 826)), [((("a")), 100000000, 0, -266)], (0)), 100000000, 0, -265), ((("answer")), 100000000, 0, -264), 0), 100000000, 0, -263), 0), 100000000, 0, -262), 0), 100000000, 0, -261), 0), 100000000, 0, -260), 0, (("parsing/camlinternalMenhirLib.mli", 304, 13085, 13087), ("parsing/camlinternalMenhirLib.mli", 307, 13161, 13201), 0), 0, Tag1 ("CamlinternalMenhirLib", 36)), 0); (("loop_handle_undo", 834), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -253), ((("answer")), 100000000, 0, -251), 0), 100000000, 0, -259), (Tag1 (0, (Tag1 (0, (Tag3 ((("checkpoint", 826)), [((("a")), 100000000, 0, -253)], (0)), 100000000, 0, -258), (Tag1 (0, (Tag3 ((("checkpoint", 826)), [((("a")), 100000000, 0, -253)], (0)), 100000000, 0, -257), ((("answer")), 100000000, 0, -251), 0), 100000000, 0, -256), 0), 100000000, 0, -255), (Tag1 (0, (Tag3 ((("supplier", 830)), 0, (0)), 100000000, 0, -254), (Tag1 (0, (Tag3 ((("checkpoint", 826)), [((("a")), 100000000, 0, -253)], (0)), 100000000, 0, -252), ((("answer")), 100000000, 0, -251), 0), 100000000, 0, -250), 0), 100000000, 0, -249), 0), 100000000, 0, -248), 0), 100000000, 0, -247), 0, (("parsing/camlinternalMenhirLib.mli", 322, 13929, 13931), ("parsing/camlinternalMenhirLib.mli", 325, 14027, 14067), 0), 0, Tag1 ("CamlinternalMenhirLib", 37)), 0); (("shifts", 835), ((Tag1 (0, (Tag3 ((("checkpoint", 826)), [((("a")), 100000000, 0, -245)], (0)), 100000000, 0, -246), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("env", 825)), [((("a")), 100000000, 0, -245)], (0)), 100000000, 0, -244)], (0)), 100000000, 0, -243), 0), 100000000, 0, -242), 0, (("parsing/camlinternalMenhirLib.mli", 338, 14666, 14668), ("parsing/camlinternalMenhirLib.mli", 338, 14666, 14710), 0), 0, Tag1 ("CamlinternalMenhirLib", 38)), 0); (("acceptable", 836), ((Tag1 (0, (Tag3 ((("checkpoint", 826)), [((("a")), 100000000, 0, -241)], (0)), 100000000, 0, -240), (Tag1 (0, (Tag3 ((("token", 823)), 0, (0)), 100000000, 0, -239), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("CamlinternalMenhirLib")), "IncrementalEngine"), "position"), 0, (0)), 100000000, 0, -238), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -237), 0), 100000000, 0, -236), 0), 100000000, 0, -235), 0), 100000000, 0, -234), 0, (("parsing/camlinternalMenhirLib.mli", 356, 15551, 15553), ("parsing/camlinternalMenhirLib.mli", 356, 15551, 15611), 0), 0, Tag1 ("CamlinternalMenhirLib", 39)), 0); Tag1 (("lr1state", 837), ([((("a")), 100000000, 0, -233)], 1, 0, 1, 0, [7], [2], 0, 0, (("parsing/camlinternalMenhirLib.mli", 362, 15824, 15826), ("parsing/camlinternalMenhirLib.mli", 362, 15824, 15842), 0), 0, 0, 0, Tag1 ("CamlinternalMenhirLib", 40)), 1, 0); (("number", 838), ((Tag1 (0, (Tag3 ((("lr1state", 837)), [((0), 100000000, 0, -232)], (0)), 100000000, 0, -231), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -230), 0), 100000000, 0, -229), 0, (("parsing/camlinternalMenhirLib.mli", 366, 15917, 15919), ("parsing/camlinternalMenhirLib.mli", 366, 15917, 15948), 0), 0, Tag1 ("CamlinternalMenhirLib", 41)), 0); (("production_index", 839), ((Tag1 (0, (Tag3 ((("production", 824)), 0, (0)), 100000000, 0, -228), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -227), 0), 100000000, 0, -226), 0, (("parsing/camlinternalMenhirLib.mli", 372, 16065, 16067), ("parsing/camlinternalMenhirLib.mli", 372, 16065, 16106), 0), 0, Tag1 ("CamlinternalMenhirLib", 42)), 0); (("find_production", 840), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -225), (Tag3 ((("production", 824)), 0, (0)), 100000000, 0, -224), 0), 100000000, 0, -223), 0, (("parsing/camlinternalMenhirLib.mli", 373, 16107, 16109), ("parsing/camlinternalMenhirLib.mli", 373, 16107, 16147), 0), 0, Tag1 ("CamlinternalMenhirLib", 43)), 0); Tag1 (("element", 841), (0, 0, Tag1 ([(("Element", 375), ([(Tag3 ((("lr1state", 837)), [((("a")), 100000000, 0, -220)], (0)), 100000000, 0, -219); ((("a")), 100000000, 0, -220); (Tag3 (Tag1 (Tag1 ((Tag2 ("CamlinternalMenhirLib")), "IncrementalEngine"), "position"), 0, (0)), 100000000, 0, -221); (Tag3 (Tag1 (Tag1 ((Tag2 ("CamlinternalMenhirLib")), "IncrementalEngine"), "position"), 0, (0)), 100000000, 0, -222)]), ((Tag3 ((("element", 841)), 0, (0)), 100000000, 0, -218)), (("parsing/camlinternalMenhirLib.mli", 382, 16566, 16570), ("parsing/camlinternalMenhirLib.mli", 382, 16566, 16630), 0), 0, Tag1 ("CamlinternalMenhirLib", 45))], 0), 1, 0, 0, 0, 0, 0, (("parsing/camlinternalMenhirLib.mli", 381, 16549, 16551), ("parsing/camlinternalMenhirLib.mli", 382, 16566, 16630), 0), 0, 0, 0, Tag1 ("CamlinternalMenhirLib", 44)), 1, 0); Tag1 (("stack", 842), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("CamlinternalMenhirLib")), "General"), "stream"), [(Tag3 ((("element", 841)), 0, (0)), 100000000, 0, -217)], (0)), 100000000, 0, -216)), 0, 0, 0, 0, (("parsing/camlinternalMenhirLib.mli", 391, 17010, 17012), ("parsing/camlinternalMenhirLib.mli", 392, 17042, 17060), 0), 0, 0, 0, Tag1 ("CamlinternalMenhirLib", 46)), 1, 0); (("stack", 843), ((Tag1 (0, (Tag3 ((("env", 825)), [((("a")), 100000000, 0, -215)], (0)), 100000000, 0, -214), (Tag3 ((("stack", 842)), 0, (0)), 100000000, 0, -213), 0), 100000000, 0, -212), 0, (("parsing/camlinternalMenhirLib.mli", 399, 17310, 17312), ("parsing/camlinternalMenhirLib.mli", 399, 17310, 17338), 0), 0, Tag1 ("CamlinternalMenhirLib", 47)), 0); (("top", 844), ((Tag1 (0, (Tag3 ((("env", 825)), [((("a")), 100000000, 0, -211)], (0)), 100000000, 0, -210), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("element", 841)), 0, (0)), 100000000, 0, -209)], (0)), 100000000, 0, -208), 0), 100000000, 0, -207), 0, (("parsing/camlinternalMenhirLib.mli", 406, 17630, 17632), ("parsing/camlinternalMenhirLib.mli", 406, 17630, 17665), 0), 0, Tag1 ("CamlinternalMenhirLib", 48)), 0); (("pop_many", 845), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -206), (Tag1 (0, (Tag3 ((("env", 825)), [((("a")), 100000000, 0, -204)], (0)), 100000000, 0, -205), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("env", 825)), [((("a")), 100000000, 0, -204)], (0)), 100000000, 0, -203)], (0)), 100000000, 0, -202), 0), 100000000, 0, -201), 0), 100000000, 0, -200), 0, (("parsing/camlinternalMenhirLib.mli", 412, 17892, 17894), ("parsing/camlinternalMenhirLib.mli", 412, 17892, 17938), 0), 0, Tag1 ("CamlinternalMenhirLib", 49)), 0); (("get", 846), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -199), (Tag1 (0, (Tag3 ((("env", 825)), [((("a")), 100000000, 0, -198)], (0)), 100000000, 0, -197), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("element", 841)), 0, (0)), 100000000, 0, -196)], (0)), 100000000, 0, -195), 0), 100000000, 0, -194), 0), 100000000, 0, -193), 0, (("parsing/camlinternalMenhirLib.mli", 419, 18190, 18192), ("parsing/camlinternalMenhirLib.mli", 419, 18190, 18232), 0), 0, Tag1 ("CamlinternalMenhirLib", 50)), 0); (("current_state_number", 847), ((Tag1 (0, (Tag3 ((("env", 825)), [((("a")), 100000000, 0, -192)], (0)), 100000000, 0, -191), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -190), 0), 100000000, 0, -189), 0, (("parsing/camlinternalMenhirLib.mli", 427, 18557, 18559), ("parsing/camlinternalMenhirLib.mli", 427, 18557, 18598), 0), 0, Tag1 ("CamlinternalMenhirLib", 51)), 0); (("equal", 848), ((Tag1 (0, (Tag3 ((("env", 825)), [((("a")), 100000000, 0, -187)], (0)), 100000000, 0, -188), (Tag1 (0, (Tag3 ((("env", 825)), [((("a")), 100000000, 0, -187)], (0)), 100000000, 0, -186), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -185), 0), 100000000, 0, -184), 0), 100000000, 0, -183), 0, (("parsing/camlinternalMenhirLib.mli", 438, 19183, 19185), ("parsing/camlinternalMenhirLib.mli", 438, 19183, 19220), 0), 0, Tag1 ("CamlinternalMenhirLib", 52)), 0); (("positions", 849), ((Tag1 (0, (Tag3 ((("env", 825)), [((("a")), 100000000, 0, -182)], (0)), 100000000, 0, -181), (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("CamlinternalMenhirLib")), "IncrementalEngine"), "position"), 0, (0)), 100000000, 0, -179); (Tag3 (Tag1 (Tag1 ((Tag2 ("CamlinternalMenhirLib")), "IncrementalEngine"), "position"), 0, (0)), 100000000, 0, -180)]), 100000000, 0, -178), 0), 100000000, 0, -177), 0, (("parsing/camlinternalMenhirLib.mli", 444, 19403, 19405), ("parsing/camlinternalMenhirLib.mli", 444, 19403, 19449), 0), 0, Tag1 ("CamlinternalMenhirLib", 53)), 0); (("env_has_default_reduction", 850), ((Tag1 (0, (Tag3 ((("env", 825)), [((("a")), 100000000, 0, -176)], (0)), 100000000, 0, -175), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -174), 0), 100000000, 0, -173), 0, (("parsing/camlinternalMenhirLib.mli", 451, 19692, 19694), ("parsing/camlinternalMenhirLib.mli", 451, 19692, 19739), 0), 0, Tag1 ("CamlinternalMenhirLib", 54)), 0); (("state_has_default_reduction", 851), ((Tag1 (0, (Tag3 ((("lr1state", 837)), [((0), 100000000, 0, -172)], (0)), 100000000, 0, -171), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -170), 0), 100000000, 0, -169), 0, (("parsing/camlinternalMenhirLib.mli", 456, 19896, 19898), ("parsing/camlinternalMenhirLib.mli", 456, 19896, 19949), 0), 0, Tag1 ("CamlinternalMenhirLib", 55)), 0); (("pop", 852), ((Tag1 (0, (Tag3 ((("env", 825)), [((("a")), 100000000, 0, -167)], (0)), 100000000, 0, -168), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("env", 825)), [((("a")), 100000000, 0, -167)], (0)), 100000000, 0, -166)], (0)), 100000000, 0, -165), 0), 100000000, 0, -164), 0, (("parsing/camlinternalMenhirLib.mli", 463, 20236, 20238), ("parsing/camlinternalMenhirLib.mli", 463, 20236, 20270), 0), 0, Tag1 ("CamlinternalMenhirLib", 56)), 0); (("force_reduction", 853), ((Tag1 (0, (Tag3 ((("production", 824)), 0, (0)), 100000000, 0, -163), (Tag1 (0, (Tag3 ((("env", 825)), [((("a")), 100000000, 0, -161)], (0)), 100000000, 0, -162), (Tag3 ((("env", 825)), [((("a")), 100000000, 0, -161)], (0)), 100000000, 0, -160), 0), 100000000, 0, -159), 0), 100000000, 0, -158), 0, (("parsing/camlinternalMenhirLib.mli", 472, 20703, 20705), ("parsing/camlinternalMenhirLib.mli", 472, 20703, 20756), 0), 0, Tag1 ("CamlinternalMenhirLib", 57)), 0); (("input_needed", 854), ((Tag1 (0, (Tag3 ((("env", 825)), [((("a")), 100000000, 0, -156)], (0)), 100000000, 0, -157), (Tag3 ((("checkpoint", 826)), [((("a")), 100000000, 0, -156)], (0)), 100000000, 0, -155), 0), 100000000, 0, -154), 0, (("parsing/camlinternalMenhirLib.mli", 488, 21620, 21622), ("parsing/camlinternalMenhirLib.mli", 488, 21620, 21663), 0), 0, Tag1 ("CamlinternalMenhirLib", 58)), 0)]), 0, (("parsing/parser.mli", 165, 3361, 3361), ("parsing/parser.mli", 172, 3527, 3530), 0), Tag1 ("Parser", 143)), 0, 0); Tag3 (("Incremental", 822), 0, (Tag1 ([(("use_file", 855), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -380), (Tag3 (Tag1 ((("MenhirInterpreter", 821)), "checkpoint"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Parsetree")), "toplevel_phrase"), 0, (0)), 100000000, 0, -379)], (0)), 100000000, 0, -378)], (0)), 100000000, 0, -377), 0), 100000000, 0, -376), 0, (("parsing/parser.mli", 178, 3610, 3612), ("parsing/parser.mli", 178, 3610, 3706), 0), 0, Tag1 ("Parser", 144)), 0); (("toplevel_phrase", 856), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -375), (Tag3 (Tag1 ((("MenhirInterpreter", 821)), "checkpoint"), [(Tag3 (Tag1 ((Tag2 ("Parsetree")), "toplevel_phrase"), 0, (0)), 100000000, 0, -374)], (0)), 100000000, 0, -373), 0), 100000000, 0, -372), 0, (("parsing/parser.mli", 180, 3710, 3712), ("parsing/parser.mli", 180, 3710, 3808), 0), 0, Tag1 ("Parser", 145)), 0); (("parse_val_longident", 857), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -371), (Tag3 (Tag1 ((("MenhirInterpreter", 821)), "checkpoint"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -370)], (0)), 100000000, 0, -369), 0), 100000000, 0, -368), 0, (("parsing/parser.mli", 182, 3812, 3814), ("parsing/parser.mli", 182, 3812, 3900), 0), 0, Tag1 ("Parser", 146)), 0); (("parse_pattern", 858), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -367), (Tag3 (Tag1 ((("MenhirInterpreter", 821)), "checkpoint"), [(Tag3 (Tag1 ((Tag2 ("Parsetree")), "pattern"), 0, (0)), 100000000, 0, -366)], (0)), 100000000, 0, -365), 0), 100000000, 0, -364), 0, (("parsing/parser.mli", 184, 3904, 3906), ("parsing/parser.mli", 184, 3904, 3992), 0), 0, Tag1 ("Parser", 147)), 0); (("parse_mty_longident", 859), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -363), (Tag3 (Tag1 ((("MenhirInterpreter", 821)), "checkpoint"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -362)], (0)), 100000000, 0, -361), 0), 100000000, 0, -360), 0, (("parsing/parser.mli", 186, 3996, 3998), ("parsing/parser.mli", 186, 3996, 4084), 0), 0, Tag1 ("Parser", 148)), 0); (("parse_module_type", 860), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -359), (Tag3 (Tag1 ((("MenhirInterpreter", 821)), "checkpoint"), [(Tag3 (Tag1 ((Tag2 ("Parsetree")), "module_type"), 0, (0)), 100000000, 0, -358)], (0)), 100000000, 0, -357), 0), 100000000, 0, -356), 0, (("parsing/parser.mli", 188, 4088, 4090), ("parsing/parser.mli", 188, 4088, 4184), 0), 0, Tag1 ("Parser", 149)), 0); (("parse_module_expr", 861), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -355), (Tag3 (Tag1 ((("MenhirInterpreter", 821)), "checkpoint"), [(Tag3 (Tag1 ((Tag2 ("Parsetree")), "module_expr"), 0, (0)), 100000000, 0, -354)], (0)), 100000000, 0, -353), 0), 100000000, 0, -352), 0, (("parsing/parser.mli", 190, 4188, 4190), ("parsing/parser.mli", 190, 4188, 4284), 0), 0, Tag1 ("Parser", 150)), 0); (("parse_mod_longident", 862), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -351), (Tag3 (Tag1 ((("MenhirInterpreter", 821)), "checkpoint"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -350)], (0)), 100000000, 0, -349), 0), 100000000, 0, -348), 0, (("parsing/parser.mli", 192, 4288, 4290), ("parsing/parser.mli", 192, 4288, 4376), 0), 0, Tag1 ("Parser", 151)), 0); (("parse_mod_ext_longident", 863), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -347), (Tag3 (Tag1 ((("MenhirInterpreter", 821)), "checkpoint"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -346)], (0)), 100000000, 0, -345), 0), 100000000, 0, -344), 0, (("parsing/parser.mli", 194, 4380, 4382), ("parsing/parser.mli", 194, 4380, 4472), 0), 0, Tag1 ("Parser", 152)), 0); (("parse_expression", 864), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -343), (Tag3 (Tag1 ((("MenhirInterpreter", 821)), "checkpoint"), [(Tag3 (Tag1 ((Tag2 ("Parsetree")), "expression"), 0, (0)), 100000000, 0, -342)], (0)), 100000000, 0, -341), 0), 100000000, 0, -340), 0, (("parsing/parser.mli", 196, 4476, 4478), ("parsing/parser.mli", 196, 4476, 4570), 0), 0, Tag1 ("Parser", 153)), 0); (("parse_core_type", 865), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -339), (Tag3 (Tag1 ((("MenhirInterpreter", 821)), "checkpoint"), [(Tag3 (Tag1 ((Tag2 ("Parsetree")), "core_type"), 0, (0)), 100000000, 0, -338)], (0)), 100000000, 0, -337), 0), 100000000, 0, -336), 0, (("parsing/parser.mli", 198, 4574, 4576), ("parsing/parser.mli", 198, 4574, 4666), 0), 0, Tag1 ("Parser", 154)), 0); (("parse_constr_longident", 866), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -335), (Tag3 (Tag1 ((("MenhirInterpreter", 821)), "checkpoint"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -334)], (0)), 100000000, 0, -333), 0), 100000000, 0, -332), 0, (("parsing/parser.mli", 200, 4670, 4672), ("parsing/parser.mli", 200, 4670, 4761), 0), 0, Tag1 ("Parser", 155)), 0); (("parse_any_longident", 867), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -331), (Tag3 (Tag1 ((("MenhirInterpreter", 821)), "checkpoint"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -330)], (0)), 100000000, 0, -329), 0), 100000000, 0, -328), 0, (("parsing/parser.mli", 202, 4765, 4767), ("parsing/parser.mli", 202, 4765, 4853), 0), 0, Tag1 ("Parser", 156)), 0); (("interface", 868), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -327), (Tag3 (Tag1 ((("MenhirInterpreter", 821)), "checkpoint"), [(Tag3 (Tag1 ((Tag2 ("Parsetree")), "signature"), 0, (0)), 100000000, 0, -326)], (0)), 100000000, 0, -325), 0), 100000000, 0, -324), 0, (("parsing/parser.mli", 204, 4857, 4859), ("parsing/parser.mli", 204, 4857, 4943), 0), 0, Tag1 ("Parser", 157)), 0); (("implementation", 869), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -323), (Tag3 (Tag1 ((("MenhirInterpreter", 821)), "checkpoint"), [(Tag3 (Tag1 ((Tag2 ("Parsetree")), "structure"), 0, (0)), 100000000, 0, -322)], (0)), 100000000, 0, -321), 0), 100000000, 0, -320), 0, (("parsing/parser.mli", 206, 4947, 4949), ("parsing/parser.mli", 206, 4947, 5038), 0), 0, Tag1 ("Parser", 158)), 0)]), 0, (("parsing/parser.mli", 176, 3582, 3582), ("parsing/parser.mli", 208, 5042, 5045), 0), Tag1 ("Parser", 159)), 0, 0)], "Parser", [("Parser", ("7'\1782\253\248\214\163]8\227\231&\145\183;")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Docstrings", ("\216\171\176\031*\203\162\186%\175\201qq\189\139U")); ("CamlinternalMenhirLib", ("\171m\238\135\252\210\222v\200\202\178\241L\143\025\153")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216"))], [(0)])

  end

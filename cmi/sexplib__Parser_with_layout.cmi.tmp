type token =
    STRING of (string * (Lexing.position * string) option)
  | COMMENT of (string * Lexing.position option)
  | LPAREN
  | RPAREN
  | EOF
  | HASH_SEMI
val sexp :
  (Lexing.lexbuf -> token) ->
  Lexing.lexbuf -> Sexplib.Type_with_layout.t_or_comment
val sexp_opt :
  (Lexing.lexbuf -> token) ->
  Lexing.lexbuf -> Sexplib.Type_with_layout.t_or_comment option
val sexps :
  (Lexing.lexbuf -> token) ->
  Lexing.lexbuf -> Sexplib.Type_with_layout.t_or_comment list
val sexps_abs :
  (Lexing.lexbuf -> token) ->
  Lexing.lexbuf -> Sexplib.Type_with_layout.Parsed.t_or_comment list
val rev_sexps :
  (Lexing.lexbuf -> token) ->
  ("DEBUG:rule", [Tag1 (("token", 389), (0, 0, Tag1 ([(("STRING", 287), ([(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -42); (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -45); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -46)]), 100000000, 0, -44)], (0)), 100000000, 0, -43)]), 100000000, 0, -41)]), 0, (("src/parser_with_layout.mli", 2, 13, 15), ("src/parser_with_layout.mli", 6, 147, 148), 0), 0, Tag1 ("Sexplib__Parser_with_layout", 1)); (("COMMENT", 312), ([(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -48); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -50)], (0)), 100000000, 0, -49)]), 100000000, 0, -47)]), 0, (("src/parser_with_layout.mli", 7, 149, 151), ("src/parser_with_layout.mli", 11, 274, 275), 0), 0, Tag1 ("Sexplib__Parser_with_layout", 2)); (("LPAREN", 313), (0), 0, (("src/parser_with_layout.mli", 12, 276, 278), ("src/parser_with_layout.mli", 12, 276, 286), 0), 0, Tag1 ("Sexplib__Parser_with_layout", 3)); (("RPAREN", 314), (0), 0, (("src/parser_with_layout.mli", 13, 287, 289), ("src/parser_with_layout.mli", 13, 287, 297), 0), 0, Tag1 ("Sexplib__Parser_with_layout", 4)); (("EOF", 315), (0), 0, (("src/parser_with_layout.mli", 14, 298, 300), ("src/parser_with_layout.mli", 14, 298, 305), 0), 0, Tag1 ("Sexplib__Parser_with_layout", 5)); (("HASH_SEMI", 316), (0), 0, (("src/parser_with_layout.mli", 15, 306, 308), ("src/parser_with_layout.mli", 15, 306, 319), 0), 0, Tag1 ("Sexplib__Parser_with_layout", 6))], 0), 1, 0, 0, 0, 0, 0, (("src/parser_with_layout.mli", 1, 0, 0), ("src/parser_with_layout.mli", 15, 306, 319), 0), 0, 0, 0, Tag1 ("Sexplib__Parser_with_layout", 0)), 1, 0); (("sexp", 390), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -40), (Tag3 ((("token", 389)), 0, (0)), 100000000, 0, -39), 0), 100000000, 0, -38), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -37), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Type_with_layout"), "t_or_comment"), 0, (0)), 100000000, 0, -36), 0), 100000000, 0, -35), 0), 100000000, 0, -34), 0, (("src/parser_with_layout.mli", 17, 321, 321), ("src/parser_with_layout.mli", 18, 332, 409), 0), 0, Tag1 ("Sexplib__Parser_with_layout", 7)), 0); (("sexp_opt", 391), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -33), (Tag3 ((("token", 389)), 0, (0)), 100000000, 0, -32), 0), 100000000, 0, -31), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -30), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Type_with_layout"), "t_or_comment"), 0, (0)), 100000000, 0, -29)], (0)), 100000000, 0, -28), 0), 100000000, 0, -27), 0), 100000000, 0, -26), 0, (("src/parser_with_layout.mli", 19, 410, 410), ("src/parser_with_layout.mli", 20, 425, 509), 0), 0, Tag1 ("Sexplib__Parser_with_layout", 8)), 0); (("sexps", 392), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -25), (Tag3 ((("token", 389)), 0, (0)), 100000000, 0, -24), 0), 100000000, 0, -23), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -22), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Type_with_layout"), "t_or_comment"), 0, (0)), 100000000, 0, -21)], (0)), 100000000, 0, -20), 0), 100000000, 0, -19), 0), 100000000, 0, -18), 0, (("src/parser_with_layout.mli", 21, 510, 510), ("src/parser_with_layout.mli", 22, 522, 604), 0), 0, Tag1 ("Sexplib__Parser_with_layout", 9)), 0); (("sexps_abs", 393), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -17), (Tag3 ((("token", 389)), 0, (0)), 100000000, 0, -16), 0), 100000000, 0, -15), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -14), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Type_with_layout"), "Parsed"), "t_or_comment"), 0, (0)), 100000000, 0, -13)], (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0), 100000000, 0, -10), 0, (("src/parser_with_layout.mli", 23, 605, 605), ("src/parser_with_layout.mli", 24, 621, 710), 0), 0, Tag1 ("Sexplib__Parser_with_layout", 10)), 0); (("rev_sexps", 394), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -9), (Tag3 ((("token", 389)), 0, (0)), 100000000, 0, -8), 0), 100000000, 0, -7), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -6), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Type_with_layout"), "t_or_comment"), 0, (0)), 100000000, 0, -5)], (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/parser_with_layout.mli", 25, 711, 711), ("src/parser_with_layout.mli", 26, 727, 809), 0), 0, Tag1 ("Sexplib__Parser_with_layout", 11)), 0)], "Sexplib__Parser_with_layout", [("Sexplib__Parser_with_layout", ("W\155\134\171aBJ\251|G6\192'S\210<")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sexplib__Type_with_layout", ("Q\170\019\238\156\246\192\156\b`\250o[6g\024")); ("Sexplib__Type", ("\147\252\252\167_\149\137\235\001d\241\255`\173Cs")); ("Sexplib__Src_pos", ("\157\022\246\144K\127\174bk\214\128&E\nh\213")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("Sexplib", ("\249\031\145\178\014\020\n\209\129\143\012\015<K\177\189")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
Lexing.lexbuf -> Sexplib.Type_with_layout.t_or_comment list

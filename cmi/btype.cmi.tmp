module TypeSet :
  sig
    type elt = Types.transient_expr
    type t
    val empty : t
    val remove : elt -> t -> t
    val union : t -> t -> t
    val inter : t -> t -> t
    val disjoint : t -> t -> bool
    val diff : t -> t -> t
    val cardinal : t -> int
    val min_elt : t -> elt
    val min_elt_opt : t -> elt option
    val max_elt : t -> elt
    val max_elt_opt : t -> elt option
    val choose : t -> elt
    val choose_opt : t -> elt option
    val find : elt -> t -> elt
    val find_opt : elt -> t -> elt option
    val find_first : (elt -> bool) -> t -> elt
    val find_first_opt : (elt -> bool) -> t -> elt option
    val find_last : (elt -> bool) -> t -> elt
    val find_last_opt : (elt -> bool) -> t -> elt option
    val iter : (elt -> unit) -> t -> unit
    val fold : (elt -> 'acc -> 'acc) -> t -> 'acc -> 'acc
    val map : (elt -> elt) -> t -> t
    val filter : (elt -> bool) -> t -> t
    val filter_map : (elt -> elt option) -> t -> t
    val partition : (elt -> bool) -> t -> t * t
    val split : elt -> t -> t * bool * t
    val is_empty : t -> bool
    val equal : t -> t -> bool
    val compare : t -> t -> int
    val subset : t -> t -> bool
    val for_all : (elt -> bool) -> t -> bool
    val to_list : t -> elt list
    val of_list : elt list -> t
    val to_seq_from : elt -> t -> elt Seq.t
    val to_seq : t -> elt Seq.t
    val to_rev_seq : t -> elt Seq.t
    val add_seq : elt Seq.t -> t -> t
    val of_seq : elt Seq.t -> t
    val add : Types.type_expr -> t -> t
    val mem : Types.type_expr -> t -> bool
    val singleton : Types.type_expr -> t
    val exists : (Types.type_expr -> bool) -> t -> bool
    val elements : t -> Types.type_expr list
  end
module TransientTypeMap :
  sig
    type key = Types.transient_expr
    type +!'a t
    val empty : 'a t
    val add : key -> 'a -> 'a t -> 'a t
    val add_to_list : key -> 'a -> 'a list t -> 'a list t
    val update : key -> ('a option -> 'a option) -> 'a t -> 'a t
    val singleton : key -> 'a -> 'a t
    val remove : key -> 'a t -> 'a t
    val merge :
      (key -> 'a option -> 'b option -> 'c option) -> 'a t -> 'b t -> 'c t
    val union : (key -> 'a -> 'a -> 'a option) -> 'a t -> 'a t -> 'a t
    val cardinal : 'a t -> int
    val bindings : 'a t -> (key * 'a) list
    val min_binding : 'a t -> key * 'a
    val min_binding_opt : 'a t -> (key * 'a) option
    val max_binding : 'a t -> key * 'a
    val max_binding_opt : 'a t -> (key * 'a) option
    val choose : 'a t -> key * 'a
    val choose_opt : 'a t -> (key * 'a) option
    val find : key -> 'a t -> 'a
    val find_opt : key -> 'a t -> 'a option
    val find_first : (key -> bool) -> 'a t -> key * 'a
    val find_first_opt : (key -> bool) -> 'a t -> (key * 'a) option
    val find_last : (key -> bool) -> 'a t -> key * 'a
    val find_last_opt : (key -> bool) -> 'a t -> (key * 'a) option
    val iter : (key -> 'a -> unit) -> 'a t -> unit
    val fold : (key -> 'a -> 'acc -> 'acc) -> 'a t -> 'acc -> 'acc
    val map : ('a -> 'b) -> 'a t -> 'b t
    val mapi : (key -> 'a -> 'b) -> 'a t -> 'b t
    val filter : (key -> 'a -> bool) -> 'a t -> 'a t
    val filter_map : (key -> 'a -> 'b option) -> 'a t -> 'b t
    val partition : (key -> 'a -> bool) -> 'a t -> 'a t * 'a t
    val split : key -> 'a t -> 'a t * 'a option * 'a t
    val is_empty : 'a t -> bool
    val mem : key -> 'a t -> bool
    val equal : ('a -> 'a -> bool) -> 'a t -> 'a t -> bool
    val compare : ('a -> 'a -> int) -> 'a t -> 'a t -> int
    val for_all : (key -> 'a -> bool) -> 'a t -> bool
    val exists : (key -> 'a -> bool) -> 'a t -> bool
    val to_list : 'a t -> (key * 'a) list
    val of_list : (key * 'a) list -> 'a t
    val to_seq : 'a t -> (key * 'a) Seq.t
    val to_rev_seq : 'a t -> (key * 'a) Seq.t
    val to_seq_from : key -> 'a t -> (key * 'a) Seq.t
    val add_seq : (key * 'a) Seq.t -> 'a t -> 'a t
    val of_seq : (key * 'a) Seq.t -> 'a t
  end
module TypeMap :
  sig
    type key = Types.transient_expr
    type 'a t = 'a TransientTypeMap.t
    val empty : 'a t
    val add_to_list : key -> 'a -> 'a list t -> 'a list t
    val update : key -> ('a option -> 'a option) -> 'a t -> 'a t
    val remove : key -> 'a t -> 'a t
    val merge :
      (key -> 'a option -> 'b option -> 'c option) -> 'a t -> 'b t -> 'c t
    val union : (key -> 'a -> 'a -> 'a option) -> 'a t -> 'a t -> 'a t
    val cardinal : 'a t -> int
    val bindings : 'a t -> (key * 'a) list
    val min_binding : 'a t -> key * 'a
    val min_binding_opt : 'a t -> (key * 'a) option
    val max_binding : 'a t -> key * 'a
    val max_binding_opt : 'a t -> (key * 'a) option
    val choose : 'a t -> key * 'a
    val choose_opt : 'a t -> (key * 'a) option
    val find_opt : key -> 'a t -> 'a option
    val find_first : (key -> bool) -> 'a t -> key * 'a
    val find_first_opt : (key -> bool) -> 'a t -> (key * 'a) option
    val find_last : (key -> bool) -> 'a t -> key * 'a
    val find_last_opt : (key -> bool) -> 'a t -> (key * 'a) option
    val iter : (key -> 'a -> unit) -> 'a t -> unit
    val map : ('a -> 'b) -> 'a t -> 'b t
    val mapi : (key -> 'a -> 'b) -> 'a t -> 'b t
    val filter : (key -> 'a -> bool) -> 'a t -> 'a t
    val filter_map : (key -> 'a -> 'b option) -> 'a t -> 'b t
    val partition : (key -> 'a -> bool) -> 'a t -> 'a t * 'a t
    val split : key -> 'a t -> 'a t * 'a option * 'a t
    val is_empty : 'a t -> bool
    val mem : key -> 'a t -> bool
    val equal : ('a -> 'a -> bool) -> 'a t -> 'a t -> bool
    val compare : ('a -> 'a -> int) -> 'a t -> 'a t -> int
    val for_all : (key -> 'a -> bool) -> 'a t -> bool
    val exists : (key -> 'a -> bool) -> 'a t -> bool
    val to_list : 'a t -> (key * 'a) list
    val of_list : (key * 'a) list -> 'a t
    val to_seq : 'a t -> (key * 'a) Seq.t
    val to_rev_seq : 'a t -> (key * 'a) Seq.t
    val to_seq_from : key -> 'a t -> (key * 'a) Seq.t
    val add_seq : (key * 'a) Seq.t -> 'a t -> 'a t
    val of_seq : (key * 'a) Seq.t -> 'a t
    val add : Types.type_expr -> 'a -> 'a t -> 'a t
    val find : Types.type_expr -> 'a t -> 'a
    val singleton : Types.type_expr -> 'a -> 'a t
    val fold : (Types.type_expr -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b
  end
module TypeHash :
  sig
    type key = Types.transient_expr
    type !'a t
    val create : int -> 'a t
    val clear : 'a t -> unit
    val reset : 'a t -> unit
    val copy : 'a t -> 'a t
    val find_opt : 'a t -> key -> 'a option
    val find_all : 'a t -> key -> 'a list
    val replace : 'a t -> key -> 'a -> unit
    val mem : 'a t -> key -> bool
    val filter_map_inplace : (key -> 'a -> 'a option) -> 'a t -> unit
    val fold : (key -> 'a -> 'acc -> 'acc) -> 'a t -> 'acc -> 'acc
    val length : 'a t -> int
    val stats : 'a t -> Stdlib__Hashtbl.statistics
    val to_seq : 'a t -> (key * 'a) Seq.t
    val to_seq_keys : 'a t -> key Seq.t
    val to_seq_values : 'a t -> 'a Seq.t
    val add_seq : 'a t -> (key * 'a) Seq.t -> unit
    val replace_seq : 'a t -> (key * 'a) Seq.t -> unit
    val of_seq : (key * 'a) Seq.t -> 'a t
    val add : 'a t -> Types.type_expr -> 'a -> unit
    val remove : 'a t -> Types.type_expr -> unit
    val find : 'a t -> Types.type_expr -> 'a
    val iter : (Types.type_expr -> 'a -> unit) -> 'a t -> unit
  end
module TypePairs :
  sig
    type t
    val create : int -> t
    val clear : t -> unit
    val add : t -> Types.type_expr * Types.type_expr -> unit
    val mem : t -> Types.type_expr * Types.type_expr -> bool
    val iter : (Types.type_expr * Types.type_expr -> unit) -> t -> unit
  end
val generic_level : int
val newgenty : Types.type_desc -> Types.type_expr
val newgenvar : ?name:string -> unit -> Types.type_expr
val newgenstub : scope:int -> Types.type_expr
val is_Tvar : Types.type_expr -> bool
val is_Tunivar : Types.type_expr -> bool
val is_Tconstr : Types.type_expr -> bool
val dummy_method : Asttypes.label
val is_fixed : Types.row_desc -> bool
val has_fixed_explanation : Types.row_desc -> bool
val fixed_explanation : Types.row_desc -> Types.fixed_explanation option
val merge_fixed_explanation :
  Types.fixed_explanation option ->
  Types.fixed_explanation option -> Types.fixed_explanation option
val static_row : Types.row_desc -> bool
val hash_variant : Asttypes.label -> int
val proxy : Types.type_expr -> Types.type_expr
val row_of_type : Types.type_expr -> Types.type_expr
val has_constr_row : Types.type_expr -> bool
val is_row_name : string -> bool
val is_constr_row : allow_ident:bool -> Types.type_expr -> bool
val set_static_row_name : Types.type_declaration -> Path.t -> unit
val iter_type_expr : (Types.type_expr -> unit) -> Types.type_expr -> unit
val fold_type_expr :
  ('a -> Types.type_expr -> 'a) -> 'a -> Types.type_expr -> 'a
val iter_row : (Types.type_expr -> unit) -> Types.row_desc -> unit
val fold_row : ('a -> Types.type_expr -> 'a) -> 'a -> Types.row_desc -> 'a
val iter_abbrev : (Types.type_expr -> unit) -> Types.abbrev_memo -> unit
val iter_type_expr_kind :
  (Types.type_expr -> unit) -> Types.type_decl_kind -> unit
val iter_type_expr_cstr_args :
  (Types.type_expr -> unit) -> Types.constructor_arguments -> unit
val map_type_expr_cstr_args :
  (Types.type_expr -> Types.type_expr) ->
  Types.constructor_arguments -> Types.constructor_arguments
type type_iterators = {
  it_signature : type_iterators -> Types.signature -> unit;
  it_signature_item : type_iterators -> Types.signature_item -> unit;
  it_value_description : type_iterators -> Types.value_description -> unit;
  it_type_declaration : type_iterators -> Types.type_declaration -> unit;
  it_extension_constructor :
    type_iterators -> Types.extension_constructor -> unit;
  it_module_declaration : type_iterators -> Types.module_declaration -> unit;
  it_modtype_declaration :
    type_iterators -> Types.modtype_declaration -> unit;
  it_class_declaration : type_iterators -> Types.class_declaration -> unit;
  it_class_type_declaration :
    type_iterators -> Types.class_type_declaration -> unit;
  it_functor_param : type_iterators -> Types.functor_parameter -> unit;
  it_module_type : type_iterators -> Types.module_type -> unit;
  it_class_type : type_iterators -> Types.class_type -> unit;
  it_type_kind : type_iterators -> Types.type_decl_kind -> unit;
  it_do_type_expr : type_iterators -> Types.type_expr -> unit;
  it_type_expr : type_iterators -> Types.type_expr -> unit;
  it_path : Path.t -> unit;
}
val type_iterators : type_iterators
val unmark_iterators : type_iterators
val copy_type_desc :
  ?keep_names:bool ->
  (Types.type_expr -> Types.type_expr) -> Types.type_desc -> Types.type_desc
val copy_row :
  (Types.type_expr -> Types.type_expr) ->
  bool -> Types.row_desc -> bool -> Types.type_expr -> Types.row_desc
module For_copy :
  sig
    type copy_scope
    val redirect_desc :
      copy_scope -> Types.type_expr -> Types.type_desc -> unit
    val with_scope : (copy_scope -> 'a) -> 'a
  end
val lowest_level : int
val not_marked_node : Types.type_expr -> bool
val logged_mark_node : Types.type_expr -> unit
val try_logged_mark_node : Types.type_expr -> bool
val flip_mark_node : Types.type_expr -> unit
val try_mark_node : Types.type_expr -> bool
val mark_type : Types.type_expr -> unit
val mark_type_params : Types.type_expr -> unit
val unmark_type : Types.type_expr -> unit
val unmark_type_decl : Types.type_declaration -> unit
val unmark_extension_constructor : Types.extension_constructor -> unit
val unmark_class_type : Types.class_type -> unit
val unmark_class_signature : Types.class_signature -> unit
val find_expans :
  Asttypes.private_flag ->
  Path.t -> Types.abbrev_memo -> Types.type_expr option
val cleanup_abbrev : unit -> unit
val memorize_abbrev :
  Types.abbrev_memo ref ->
  Asttypes.private_flag ->
  Path.t -> Types.type_expr -> Types.type_expr -> unit
val forget_abbrev : Types.abbrev_memo ref -> Path.t -> unit
val snapshot : unit -> Types.snapshot
val backtrack : Types.snapshot -> unit
val is_optional : Asttypes.arg_label -> bool
val label_name : Asttypes.arg_label -> Asttypes.label
val prefixed_label_name : Asttypes.arg_label -> Asttypes.label
val extract_label :
  Asttypes.label ->
  (Asttypes.arg_label * 'a) list ->
  (Asttypes.arg_label * 'a * bool * (Asttypes.arg_label * 'a) list) option
val signature_of_class_type : Types.class_type -> Types.class_signature
val class_body : Types.class_type -> Types.class_type
val scrape_class_type : Types.class_type -> Types.class_type
val class_type_arity : Types.class_type -> int
val abbreviate_class_type :
  Path.t -> Types.type_expr list -> Types.class_type -> Types.class_type
val self_type : Types.class_type -> Types.type_expr
val self_type_row : Types.class_type -> Types.type_expr
val methods : Types.class_signature -> string list
val virtual_methods : Types.class_signature -> string list
val concrete_methods : Types.class_signature -> Types.MethSet.t
val public_methods : Types.class_signature -> string list
val instance_vars : Types.class_signature -> string list
val virtual_instance_vars : Types.class_signature -> string list
val concrete_instance_vars : Types.class_signature -> Types.VarSet.t
val method_type : Asttypes.label -> Types.class_signature -> Types.type_expr
val instance_variable_type :
  Asttypes.label -> Types.class_signature -> Types.type_expr
val print_raw : (Format.formatter -> Types.type_expr -> unit) ref
("DEBUG:rule", [Tag3 (("TypeSet", 1381), 0, (Tag1 ([Tag1 (("elt", 1461), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Types")), "transient_expr"), 0, (0)), 100000000, 0, -624)), 0, 0, 0, 0, (("typing/btype.mli", 24, 1212, 1233), ("typing/btype.mli", 24, 1212, 1258), 0), 0, 0, 0, Tag1 ("Btype", 1)), 1, 0); Tag1 (("t", 1462), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("set.mli", 74, 2901, 2905), ("set.mli", 74, 2901, 2911), 0), 0, 0, 0, Tag1 ("Stdlib__Set", 4)), 1, 0); (("empty", 1463), ((Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -623), 0, (("set.mli", 77, 2942, 2946), ("set.mli", 77, 2942, 2958), 0), 0, Tag1 ("Stdlib__Set", 5)), 0); (("remove", 1464), ((Tag1 (0, (Tag3 ((("elt", 1461)), 0, (0)), 100000000, 0, -622), (Tag1 (0, (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -621), (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -620), 0), 100000000, 0, -619), 0), 100000000, 0, -618), 0, (("set.mli", 89, 3381, 3385), ("set.mli", 89, 3381, 3410), 0), 0, Tag1 ("Stdlib__Set", 8)), 0); (("union", 1465), ((Tag1 (0, (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -617), (Tag1 (0, (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -616), (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -615), 0), 100000000, 0, -614), 0), 100000000, 0, -613), 0, (("set.mli", 95, 3677, 3681), ("set.mli", 95, 3677, 3703), 0), 0, Tag1 ("Stdlib__Set", 9)), 0); (("inter", 1466), ((Tag1 (0, (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -612), (Tag1 (0, (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -611), (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -610), 0), 100000000, 0, -609), 0), 100000000, 0, -608), 0, (("set.mli", 98, 3727, 3731), ("set.mli", 98, 3727, 3753), 0), 0, Tag1 ("Stdlib__Set", 10)), 0); (("disjoint", 1467), ((Tag1 (0, (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -607), (Tag1 (0, (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -606), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -605), 0), 100000000, 0, -604), 0), 100000000, 0, -603), 0, (("set.mli", 101, 3784, 3788), ("set.mli", 101, 3784, 3816), 0), 0, Tag1 ("Stdlib__Set", 11)), 0); (("diff", 1468), ((Tag1 (0, (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -602), (Tag1 (0, (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -601), (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -600), 0), 100000000, 0, -599), 0), 100000000, 0, -598), 0, (("set.mli", 105, 3880, 3884), ("set.mli", 105, 3880, 3905), 0), 0, Tag1 ("Stdlib__Set", 12)), 0); (("cardinal", 1469), ((Tag1 (0, (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -597), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -596), 0), 100000000, 0, -595), 0, (("set.mli", 109, 4007, 4011), ("set.mli", 109, 4007, 4033), 0), 0, Tag1 ("Stdlib__Set", 13)), 0); (("min_elt", 1470), ((Tag1 (0, (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -594), (Tag3 ((("elt", 1461)), 0, (0)), 100000000, 0, -593), 0), 100000000, 0, -592), 0, (("set.mli", 120, 4380, 4384), ("set.mli", 120, 4380, 4405), 0), 0, Tag1 ("Stdlib__Set", 15)), 0); (("min_elt_opt", 1471), ((Tag1 (0, (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -591), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1461)), 0, (0)), 100000000, 0, -590)], (0)), 100000000, 0, -589), 0), 100000000, 0, -588), 0, (("set.mli", 125, 4567, 4571), ("set.mli", 125, 4567, 4603), 0), 0, Tag1 ("Stdlib__Set", 16)), 0); (("max_elt", 1472), ((Tag1 (0, (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -587), (Tag3 ((("elt", 1461)), 0, (0)), 100000000, 0, -586), 0), 100000000, 0, -585), 0, (("set.mli", 131, 4774, 4778), ("set.mli", 131, 4774, 4799), 0), 0, Tag1 ("Stdlib__Set", 17)), 0); (("max_elt_opt", 1473), ((Tag1 (0, (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -584), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1461)), 0, (0)), 100000000, 0, -583)], (0)), 100000000, 0, -582), 0), 100000000, 0, -581), 0, (("set.mli", 135, 4890, 4894), ("set.mli", 135, 4890, 4926), 0), 0, Tag1 ("Stdlib__Set", 18)), 0); (("choose", 1474), ((Tag1 (0, (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -580), (Tag3 ((("elt", 1461)), 0, (0)), 100000000, 0, -579), 0), 100000000, 0, -578), 0, (("set.mli", 140, 5041, 5045), ("set.mli", 140, 5041, 5065), 0), 0, Tag1 ("Stdlib__Set", 19)), 0); (("choose_opt", 1475), ((Tag1 (0, (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -577), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1461)), 0, (0)), 100000000, 0, -576)], (0)), 100000000, 0, -575), 0), 100000000, 0, -574), 0, (("set.mli", 145, 5263, 5267), ("set.mli", 145, 5263, 5298), 0), 0, Tag1 ("Stdlib__Set", 20)), 0); (("find", 1476), ((Tag1 (0, (Tag3 ((("elt", 1461)), 0, (0)), 100000000, 0, -573), (Tag1 (0, (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -572), (Tag3 ((("elt", 1461)), 0, (0)), 100000000, 0, -571), 0), 100000000, 0, -570), 0), 100000000, 0, -569), 0, (("set.mli", 153, 5541, 5549), ("set.mli", 153, 5541, 5574), 0), 0, Tag1 ("Stdlib__Set", 21)), 0); (("find_opt", 1477), ((Tag1 (0, (Tag3 ((("elt", 1461)), 0, (0)), 100000000, 0, -568), (Tag1 (0, (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -567), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1461)), 0, (0)), 100000000, 0, -566)], (0)), 100000000, 0, -565), 0), 100000000, 0, -564), 0), 100000000, 0, -563), 0, (("set.mli", 159, 5752, 5756), ("set.mli", 159, 5752, 5792), 0), 0, Tag1 ("Stdlib__Set", 22)), 0); (("find_first", 1478), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1461)), 0, (0)), 100000000, 0, -562), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -561), 0), 100000000, 0, -560), (Tag1 (0, (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -559), (Tag3 ((("elt", 1461)), 0, (0)), 100000000, 0, -558), 0), 100000000, 0, -557), 0), 100000000, 0, -556), 0, (("set.mli", 165, 5963, 5967), ("set.mli", 165, 5963, 6008), 0), 0, Tag1 ("Stdlib__Set", 23)), 0); (("find_first_opt", 1479), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1461)), 0, (0)), 100000000, 0, -555), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -554), 0), 100000000, 0, -553), (Tag1 (0, (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -552), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1461)), 0, (0)), 100000000, 0, -551)], (0)), 100000000, 0, -550), 0), 100000000, 0, -549), 0), 100000000, 0, -548), 0, (("set.mli", 177, 6482, 6486), ("set.mli", 177, 6482, 6538), 0), 0, Tag1 ("Stdlib__Set", 24)), 0); (("find_last", 1480), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1461)), 0, (0)), 100000000, 0, -547), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -546), 0), 100000000, 0, -545), (Tag1 (0, (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -544), (Tag3 ((("elt", 1461)), 0, (0)), 100000000, 0, -543), 0), 100000000, 0, -542), 0), 100000000, 0, -541), 0, (("set.mli", 184, 6779, 6783), ("set.mli", 184, 6779, 6823), 0), 0, Tag1 ("Stdlib__Set", 25)), 0); (("find_last_opt", 1481), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1461)), 0, (0)), 100000000, 0, -540), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -539), 0), 100000000, 0, -538), (Tag1 (0, (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -537), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1461)), 0, (0)), 100000000, 0, -536)], (0)), 100000000, 0, -535), 0), 100000000, 0, -534), 0), 100000000, 0, -533), 0, (("set.mli", 190, 7044, 7048), ("set.mli", 190, 7044, 7099), 0), 0, Tag1 ("Stdlib__Set", 26)), 0); (("iter", 1482), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1461)), 0, (0)), 100000000, 0, -532), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -531), 0), 100000000, 0, -530), (Tag1 (0, (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -529), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -528), 0), 100000000, 0, -527), 0), 100000000, 0, -526), 0, (("set.mli", 198, 7371, 7375), ("set.mli", 198, 7371, 7411), 0), 0, Tag1 ("Stdlib__Set", 27)), 0); (("fold", 1483), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1461)), 0, (0)), 100000000, 0, -525), (Tag1 (0, ((("acc")), 100000000, 0, -521), ((("acc")), 100000000, 0, -521), 0), 100000000, 0, -524), 0), 100000000, 0, -523), (Tag1 (0, (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -522), (Tag1 (0, ((("acc")), 100000000, 0, -521), ((("acc")), 100000000, 0, -521), 0), 100000000, 0, -520), 0), 100000000, 0, -519), 0), 100000000, 0, -518), 0, (("set.mli", 203, 7616, 7620), ("set.mli", 203, 7616, 7672), 0), 0, Tag1 ("Stdlib__Set", 28)), 0); (("map", 1484), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1461)), 0, (0)), 100000000, 0, -517), (Tag3 ((("elt", 1461)), 0, (0)), 100000000, 0, -516), 0), 100000000, 0, -515), (Tag1 (0, (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -514), (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -513), 0), 100000000, 0, -512), 0), 100000000, 0, -511), 0, (("set.mli", 209, 7860, 7864), ("set.mli", 209, 7860, 7895), 0), 0, Tag1 ("Stdlib__Set", 29)), 0); (("filter", 1485), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1461)), 0, (0)), 100000000, 0, -510), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -509), 0), 100000000, 0, -508), (Tag1 (0, (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -507), (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -506), 0), 100000000, 0, -505), 0), 100000000, 0, -504), 0, (("set.mli", 221, 8372, 8376), ("set.mli", 221, 8372, 8411), 0), 0, Tag1 ("Stdlib__Set", 30)), 0); (("filter_map", 1486), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1461)), 0, (0)), 100000000, 0, -503), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1461)), 0, (0)), 100000000, 0, -502)], (0)), 100000000, 0, -501), 0), 100000000, 0, -500), (Tag1 (0, (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -499), (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -498), 0), 100000000, 0, -497), 0), 100000000, 0, -496), 0, (("set.mli", 228, 8710, 8714), ("set.mli", 228, 8710, 8759), 0), 0, Tag1 ("Stdlib__Set", 31)), 0); (("partition", 1487), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1461)), 0, (0)), 100000000, 0, -495), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -494), 0), 100000000, 0, -493), (Tag1 (0, (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -492), (Tag2 ([(Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -490); (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -491)]), 100000000, 0, -489), 0), 100000000, 0, -488), 0), 100000000, 0, -487), 0, (("set.mli", 243, 9275, 9279), ("set.mli", 243, 9275, 9321), 0), 0, Tag1 ("Stdlib__Set", 32)), 0); (("split", 1488), ((Tag1 (0, (Tag3 ((("elt", 1461)), 0, (0)), 100000000, 0, -486), (Tag1 (0, (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -485), (Tag2 ([(Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -482); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -483); (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -484)]), 100000000, 0, -481), 0), 100000000, 0, -480), 0), 100000000, 0, -479), 0, (("set.mli", 249, 9562, 9566), ("set.mli", 249, 9562, 9601), 0), 0, Tag1 ("Stdlib__Set", 33)), 0); (("is_empty", 1489), ((Tag1 (0, (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -478), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -477), 0), 100000000, 0, -476), 0, (("set.mli", 260, 10020, 10024), ("set.mli", 260, 10020, 10047), 0), 0, Tag1 ("Stdlib__Set", 34)), 0); (("equal", 1490), ((Tag1 (0, (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -475), (Tag1 (0, (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -474), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -473), 0), 100000000, 0, -472), 0), 100000000, 0, -471), 0, (("set.mli", 266, 10190, 10194), ("set.mli", 266, 10190, 10219), 0), 0, Tag1 ("Stdlib__Set", 36)), 0); (("compare", 1491), ((Tag1 (0, (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -470), (Tag1 (0, (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -469), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -468), 0), 100000000, 0, -467), 0), 100000000, 0, -466), 0, (("set.mli", 270, 10335, 10339), ("set.mli", 270, 10335, 10365), 0), 0, Tag1 ("Stdlib__Set", 37)), 0); (("subset", 1492), ((Tag1 (0, (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -465), (Tag1 (0, (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -464), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -463), 0), 100000000, 0, -462), 0), 100000000, 0, -461), 0, (("set.mli", 274, 10476, 10480), ("set.mli", 274, 10476, 10506), 0), 0, Tag1 ("Stdlib__Set", 38)), 0); (("for_all", 1493), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1461)), 0, (0)), 100000000, 0, -460), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -459), 0), 100000000, 0, -458), (Tag1 (0, (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -457), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -456), 0), 100000000, 0, -455), 0), 100000000, 0, -454), 0, (("set.mli", 278, 10598, 10602), ("set.mli", 278, 10598, 10641), 0), 0, Tag1 ("Stdlib__Set", 39)), 0); (("to_list", 1494), ((Tag1 (0, (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -453), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 1461)), 0, (0)), 100000000, 0, -452)], (0)), 100000000, 0, -451), 0), 100000000, 0, -450), 0, (("set.mli", 288, 10922, 10926), ("set.mli", 288, 10922, 10953), 0), 0, Tag1 ("Stdlib__Set", 41)), 0); (("of_list", 1495), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 1461)), 0, (0)), 100000000, 0, -449)], (0)), 100000000, 0, -448), (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -447), 0), 100000000, 0, -446), 0, (("set.mli", 292, 11017, 11021), ("set.mli", 292, 11017, 11047), 0), 0, Tag1 ("Stdlib__Set", 42)), 0); (("to_seq_from", 1496), ((Tag1 (0, (Tag3 ((("elt", 1461)), 0, (0)), 100000000, 0, -445), (Tag1 (0, (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -444), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 1461)), 0, (0)), 100000000, 0, -443)], (0)), 100000000, 0, -442), 0), 100000000, 0, -441), 0), 100000000, 0, -440), 0, (("set.mli", 298, 11268, 11272), ("set.mli", 298, 11268, 11311), 0), 0, Tag1 ("Stdlib__Set", 43)), 0); (("to_seq", 1497), ((Tag1 (0, (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -439), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 1461)), 0, (0)), 100000000, 0, -438)], (0)), 100000000, 0, -437), 0), 100000000, 0, -436), 0, (("set.mli", 303, 11453, 11457), ("set.mli", 303, 11453, 11484), 0), 0, Tag1 ("Stdlib__Set", 44)), 0); (("to_rev_seq", 1498), ((Tag1 (0, (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -435), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 1461)), 0, (0)), 100000000, 0, -434)], (0)), 100000000, 0, -433), 0), 100000000, 0, -432), 0, (("set.mli", 307, 11562, 11566), ("set.mli", 307, 11562, 11597), 0), 0, Tag1 ("Stdlib__Set", 45)), 0); (("add_seq", 1499), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 1461)), 0, (0)), 100000000, 0, -431)], (0)), 100000000, 0, -430), (Tag1 (0, (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -429), (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -428), 0), 100000000, 0, -427), 0), 100000000, 0, -426), 0, (("set.mli", 311, 11676, 11680), ("set.mli", 311, 11676, 11713), 0), 0, Tag1 ("Stdlib__Set", 46)), 0); (("of_seq", 1500), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 1461)), 0, (0)), 100000000, 0, -425)], (0)), 100000000, 0, -424), (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -423), 0), 100000000, 0, -422), 0, (("set.mli", 315, 11791, 11795), ("set.mli", 315, 11791, 11822), 0), 0, Tag1 ("Stdlib__Set", 47)), 0); (("add", 1501), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -421), (Tag1 (0, (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -420), (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -419), 0), 100000000, 0, -418), 0), 100000000, 0, -417), 0, (("typing/btype.mli", 25, 1259, 1261), ("typing/btype.mli", 25, 1259, 1289), 0), 0, Tag1 ("Btype", 2)), 0); (("mem", 1502), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -416), (Tag1 (0, (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -415), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -414), 0), 100000000, 0, -413), 0), 100000000, 0, -412), 0, (("typing/btype.mli", 26, 1290, 1292), ("typing/btype.mli", 26, 1290, 1323), 0), 0, Tag1 ("Btype", 3)), 0); (("singleton", 1503), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -411), (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -410), 0), 100000000, 0, -409), 0, (("typing/btype.mli", 27, 1324, 1326), ("typing/btype.mli", 27, 1324, 1355), 0), 0, Tag1 ("Btype", 4)), 0); (("exists", 1504), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -408), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -407), 0), 100000000, 0, -406), (Tag1 (0, (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -405), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -404), 0), 100000000, 0, -403), 0), 100000000, 0, -402), 0, (("typing/btype.mli", 28, 1356, 1358), ("typing/btype.mli", 28, 1356, 1402), 0), 0, Tag1 ("Btype", 5)), 0); (("elements", 1505), ((Tag1 (0, (Tag3 ((("t", 1462)), 0, (0)), 100000000, 0, -401), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -400)], (0)), 100000000, 0, -399), 0), 100000000, 0, -398), 0, (("typing/btype.mli", 29, 1403, 1405), ("typing/btype.mli", 29, 1403, 1438), 0), 0, Tag1 ("Btype", 6)), 0)]), 0, (("typing/btype.mli", 23, 1191, 1191), ("typing/btype.mli", 30, 1439, 1442), 0), Tag1 ("Btype", 7)), 0, 0); Tag3 (("TransientTypeMap", 1382), 0, (Tag1 ([Tag1 (("key", 1506), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Types")), "transient_expr"), 0, (0)), 100000000, 0, -953)), 0, 0, 0, 0, (("typing/btype.mli", 31, 1443, 1480), ("typing/btype.mli", 31, 1443, 1505), 0), 0, 0, 0, Tag1 ("Btype", 8)), 1, 0); Tag1 (("t", 1507), ([((("a")), 100000000, 0, -952)], 1, 0, 1, 0, [9], [2], 0, 0, (("map.mli", 73, 2902, 2906), ("map.mli", 73, 2902, 2917), 0), 0, 0, 0, Tag1 ("Stdlib__Map", 4)), 1, 0); (("empty", 1508), ((Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -951)], (0)), 100000000, 0, -950), 0, (("map.mli", 76, 2977, 2981), ("map.mli", 76, 2977, 2996), 0), 0, Tag1 ("Stdlib__Map", 5)), 0); (("add", 1509), ((Tag1 (0, (Tag3 ((("key", 1506)), 0, (0)), 100000000, 0, -949), (Tag1 (0, ((("a")), 100000000, 0, -947), (Tag1 (0, (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -947)], (0)), 100000000, 0, -948), (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -947)], (0)), 100000000, 0, -946), 0), 100000000, 0, -945), 0), 100000000, 0, -944), 0), 100000000, 0, -943), 0, (("map.mli", 79, 3024, 3028), ("map.mli", 79, 3024, 3062), 0), 0, Tag1 ("Stdlib__Map", 6)), 0); (("add_to_list", 1510), ((Tag1 (0, (Tag3 ((("key", 1506)), 0, (0)), 100000000, 0, -942), (Tag1 (0, ((("a")), 100000000, 0, -939), (Tag1 (0, (Tag3 ((("t", 1507)), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -939)], (0)), 100000000, 0, -941)], (0)), 100000000, 0, -940), (Tag3 ((("t", 1507)), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -939)], (0)), 100000000, 0, -938)], (0)), 100000000, 0, -937), 0), 100000000, 0, -936), 0), 100000000, 0, -935), 0), 100000000, 0, -934), 0, (("map.mli", 88, 3503, 3507), ("map.mli", 88, 3503, 3559), 0), 0, Tag1 ("Stdlib__Map", 7)), 0); (("update", 1511), ((Tag1 (0, (Tag3 ((("key", 1506)), 0, (0)), 100000000, 0, -933), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -928)], (0)), 100000000, 0, -932), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -928)], (0)), 100000000, 0, -931), 0), 100000000, 0, -930), (Tag1 (0, (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -928)], (0)), 100000000, 0, -929), (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -928)], (0)), 100000000, 0, -927), 0), 100000000, 0, -926), 0), 100000000, 0, -925), 0), 100000000, 0, -924), 0, (("map.mli", 94, 3753, 3757), ("map.mli", 94, 3753, 3816), 0), 0, Tag1 ("Stdlib__Map", 8)), 0); (("singleton", 1512), ((Tag1 (0, (Tag3 ((("key", 1506)), 0, (0)), 100000000, 0, -923), (Tag1 (0, ((("a")), 100000000, 0, -922), (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -922)], (0)), 100000000, 0, -921), 0), 100000000, 0, -920), 0), 100000000, 0, -919), 0, (("map.mli", 106, 4436, 4440), ("map.mli", 106, 4436, 4472), 0), 0, Tag1 ("Stdlib__Map", 9)), 0); (("remove", 1513), ((Tag1 (0, (Tag3 ((("key", 1506)), 0, (0)), 100000000, 0, -918), (Tag1 (0, (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -916)], (0)), 100000000, 0, -917), (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -916)], (0)), 100000000, 0, -915), 0), 100000000, 0, -914), 0), 100000000, 0, -913), 0, (("map.mli", 111, 4594, 4598), ("map.mli", 111, 4594, 4629), 0), 0, Tag1 ("Stdlib__Map", 10)), 0); (("merge", 1514), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1506)), 0, (0)), 100000000, 0, -912), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -905)], (0)), 100000000, 0, -911), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -903)], (0)), 100000000, 0, -910), (Tag3 ((Tag3 ("option", 10)), [((("c")), 100000000, 0, -901)], (0)), 100000000, 0, -909), 0), 100000000, 0, -908), 0), 100000000, 0, -907), 0), 100000000, 0, -906), (Tag1 (0, (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -905)], (0)), 100000000, 0, -904), (Tag1 (0, (Tag3 ((("t", 1507)), [((("b")), 100000000, 0, -903)], (0)), 100000000, 0, -902), (Tag3 ((("t", 1507)), [((("c")), 100000000, 0, -901)], (0)), 100000000, 0, -900), 0), 100000000, 0, -899), 0), 100000000, 0, -898), 0), 100000000, 0, -897), 0, (("map.mli", 118, 4950, 4954), ("map.mli", 120, 5019, 5045), 0), 0, Tag1 ("Stdlib__Map", 11)), 0); (("union", 1515), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1506)), 0, (0)), 100000000, 0, -896), (Tag1 (0, ((("a")), 100000000, 0, -889), (Tag1 (0, ((("a")), 100000000, 0, -889), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -889)], (0)), 100000000, 0, -895), 0), 100000000, 0, -894), 0), 100000000, 0, -893), 0), 100000000, 0, -892), (Tag1 (0, (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -889)], (0)), 100000000, 0, -891), (Tag1 (0, (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -889)], (0)), 100000000, 0, -890), (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -889)], (0)), 100000000, 0, -888), 0), 100000000, 0, -887), 0), 100000000, 0, -886), 0), 100000000, 0, -885), 0, (("map.mli", 129, 5475, 5479), ("map.mli", 129, 5475, 5544), 0), 0, Tag1 ("Stdlib__Map", 12)), 0); (("cardinal", 1516), ((Tag1 (0, (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -884)], (0)), 100000000, 0, -883), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -882), 0), 100000000, 0, -881), 0, (("map.mli", 142, 6061, 6065), ("map.mli", 142, 6061, 6090), 0), 0, Tag1 ("Stdlib__Map", 13)), 0); (("bindings", 1517), ((Tag1 (0, (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -879)], (0)), 100000000, 0, -880), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("key", 1506)), 0, (0)), 100000000, 0, -878); ((("a")), 100000000, 0, -879)]), 100000000, 0, -877)], (0)), 100000000, 0, -876), 0), 100000000, 0, -875), 0, (("map.mli", 148, 6197, 6201), ("map.mli", 148, 6197, 6238), 0), 0, Tag1 ("Stdlib__Map", 14)), 0); (("min_binding", 1518), ((Tag1 (0, (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -873)], (0)), 100000000, 0, -874), (Tag2 ([(Tag3 ((("key", 1506)), 0, (0)), 100000000, 0, -872); ((("a")), 100000000, 0, -873)]), 100000000, 0, -871), 0), 100000000, 0, -870), 0, (("map.mli", 155, 6495, 6499), ("map.mli", 155, 6495, 6534), 0), 0, Tag1 ("Stdlib__Map", 15)), 0); (("min_binding_opt", 1519), ((Tag1 (0, (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -868)], (0)), 100000000, 0, -869), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("key", 1506)), 0, (0)), 100000000, 0, -867); ((("a")), 100000000, 0, -868)]), 100000000, 0, -866)], (0)), 100000000, 0, -865), 0), 100000000, 0, -864), 0, (("map.mli", 161, 6727, 6731), ("map.mli", 161, 6727, 6777), 0), 0, Tag1 ("Stdlib__Map", 16)), 0); (("max_binding", 1520), ((Tag1 (0, (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -862)], (0)), 100000000, 0, -863), (Tag2 ([(Tag3 ((("key", 1506)), 0, (0)), 100000000, 0, -861); ((("a")), 100000000, 0, -862)]), 100000000, 0, -860), 0), 100000000, 0, -859), 0, (("map.mli", 167, 6961, 6965), ("map.mli", 167, 6961, 7000), 0), 0, Tag1 ("Stdlib__Map", 17)), 0); (("max_binding_opt", 1521), ((Tag1 (0, (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -857)], (0)), 100000000, 0, -858), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("key", 1506)), 0, (0)), 100000000, 0, -856); ((("a")), 100000000, 0, -857)]), 100000000, 0, -855)], (0)), 100000000, 0, -854), 0), 100000000, 0, -853), 0, (("map.mli", 172, 7128, 7132), ("map.mli", 172, 7128, 7178), 0), 0, Tag1 ("Stdlib__Map", 18)), 0); (("choose", 1522), ((Tag1 (0, (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -851)], (0)), 100000000, 0, -852), (Tag2 ([(Tag3 ((("key", 1506)), 0, (0)), 100000000, 0, -850); ((("a")), 100000000, 0, -851)]), 100000000, 0, -849), 0), 100000000, 0, -848), 0, (("map.mli", 177, 7310, 7314), ("map.mli", 177, 7310, 7344), 0), 0, Tag1 ("Stdlib__Map", 19)), 0); (("choose_opt", 1523), ((Tag1 (0, (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -846)], (0)), 100000000, 0, -847), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("key", 1506)), 0, (0)), 100000000, 0, -845); ((("a")), 100000000, 0, -846)]), 100000000, 0, -844)], (0)), 100000000, 0, -843), 0), 100000000, 0, -842), 0, (("map.mli", 183, 7562, 7566), ("map.mli", 183, 7562, 7607), 0), 0, Tag1 ("Stdlib__Map", 20)), 0); (("find", 1524), ((Tag1 (0, (Tag3 ((("key", 1506)), 0, (0)), 100000000, 0, -841), (Tag1 (0, (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -839)], (0)), 100000000, 0, -840), ((("a")), 100000000, 0, -839), 0), 100000000, 0, -838), 0), 100000000, 0, -837), 0, (("map.mli", 191, 7850, 7854), ("map.mli", 191, 7850, 7881), 0), 0, Tag1 ("Stdlib__Map", 21)), 0); (("find_opt", 1525), ((Tag1 (0, (Tag3 ((("key", 1506)), 0, (0)), 100000000, 0, -836), (Tag1 (0, (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -834)], (0)), 100000000, 0, -835), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -834)], (0)), 100000000, 0, -833), 0), 100000000, 0, -832), 0), 100000000, 0, -831), 0, (("map.mli", 195, 8006, 8010), ("map.mli", 195, 8006, 8048), 0), 0, Tag1 ("Stdlib__Map", 22)), 0); (("find_first", 1526), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1506)), 0, (0)), 100000000, 0, -830), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -829), 0), 100000000, 0, -828), (Tag1 (0, (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -826)], (0)), 100000000, 0, -827), (Tag2 ([(Tag3 ((("key", 1506)), 0, (0)), 100000000, 0, -825); ((("a")), 100000000, 0, -826)]), 100000000, 0, -824), 0), 100000000, 0, -823), 0), 100000000, 0, -822), 0, (("map.mli", 200, 8204, 8208), ("map.mli", 200, 8204, 8257), 0), 0, Tag1 ("Stdlib__Map", 23)), 0); (("find_first_opt", 1527), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1506)), 0, (0)), 100000000, 0, -821), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -820), 0), 100000000, 0, -819), (Tag1 (0, (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -817)], (0)), 100000000, 0, -818), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("key", 1506)), 0, (0)), 100000000, 0, -816); ((("a")), 100000000, 0, -817)]), 100000000, 0, -815)], (0)), 100000000, 0, -814), 0), 100000000, 0, -813), 0), 100000000, 0, -812), 0, (("map.mli", 212, 8743, 8747), ("map.mli", 212, 8743, 8809), 0), 0, Tag1 ("Stdlib__Map", 24)), 0); (("find_last", 1528), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1506)), 0, (0)), 100000000, 0, -811), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -810), 0), 100000000, 0, -809), (Tag1 (0, (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -807)], (0)), 100000000, 0, -808), (Tag2 ([(Tag3 ((("key", 1506)), 0, (0)), 100000000, 0, -806); ((("a")), 100000000, 0, -807)]), 100000000, 0, -805), 0), 100000000, 0, -804), 0), 100000000, 0, -803), 0, (("map.mli", 218, 9052, 9056), ("map.mli", 218, 9052, 9104), 0), 0, Tag1 ("Stdlib__Map", 25)), 0); (("find_last_opt", 1529), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1506)), 0, (0)), 100000000, 0, -802), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -801), 0), 100000000, 0, -800), (Tag1 (0, (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -798)], (0)), 100000000, 0, -799), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("key", 1506)), 0, (0)), 100000000, 0, -797); ((("a")), 100000000, 0, -798)]), 100000000, 0, -796)], (0)), 100000000, 0, -795), 0), 100000000, 0, -794), 0), 100000000, 0, -793), 0, (("map.mli", 224, 9334, 9338), ("map.mli", 224, 9334, 9399), 0), 0, Tag1 ("Stdlib__Map", 26)), 0); (("iter", 1530), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1506)), 0, (0)), 100000000, 0, -792), (Tag1 (0, ((("a")), 100000000, 0, -788), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -791), 0), 100000000, 0, -790), 0), 100000000, 0, -789), (Tag1 (0, (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -788)], (0)), 100000000, 0, -787), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -786), 0), 100000000, 0, -785), 0), 100000000, 0, -784), 0, (("map.mli", 233, 9688, 9692), ("map.mli", 233, 9688, 9737), 0), 0, Tag1 ("Stdlib__Map", 27)), 0); (("fold", 1531), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1506)), 0, (0)), 100000000, 0, -783), (Tag1 (0, ((("a")), 100000000, 0, -779), (Tag1 (0, ((("acc")), 100000000, 0, -777), ((("acc")), 100000000, 0, -777), 0), 100000000, 0, -782), 0), 100000000, 0, -781), 0), 100000000, 0, -780), (Tag1 (0, (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -779)], (0)), 100000000, 0, -778), (Tag1 (0, ((("acc")), 100000000, 0, -777), ((("acc")), 100000000, 0, -777), 0), 100000000, 0, -776), 0), 100000000, 0, -775), 0), 100000000, 0, -774), 0, (("map.mli", 239, 10018, 10022), ("map.mli", 240, 10032, 10089), 0), 0, Tag1 ("Stdlib__Map", 28)), 0); (("map", 1532), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -772), ((("b")), 100000000, 0, -770), 0), 100000000, 0, -773), (Tag1 (0, (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -772)], (0)), 100000000, 0, -771), (Tag3 ((("t", 1507)), [((("b")), 100000000, 0, -770)], (0)), 100000000, 0, -769), 0), 100000000, 0, -768), 0), 100000000, 0, -767), 0, (("map.mli", 247, 10338, 10342), ("map.mli", 247, 10338, 10377), 0), 0, Tag1 ("Stdlib__Map", 29)), 0); (("mapi", 1533), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1506)), 0, (0)), 100000000, 0, -766), (Tag1 (0, ((("a")), 100000000, 0, -763), ((("b")), 100000000, 0, -761), 0), 100000000, 0, -765), 0), 100000000, 0, -764), (Tag1 (0, (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -763)], (0)), 100000000, 0, -762), (Tag3 ((("t", 1507)), [((("b")), 100000000, 0, -761)], (0)), 100000000, 0, -760), 0), 100000000, 0, -759), 0), 100000000, 0, -758), 0, (("map.mli", 254, 10698, 10702), ("map.mli", 254, 10698, 10745), 0), 0, Tag1 ("Stdlib__Map", 30)), 0); (("filter", 1534), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1506)), 0, (0)), 100000000, 0, -757), (Tag1 (0, ((("a")), 100000000, 0, -752), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -756), 0), 100000000, 0, -755), 0), 100000000, 0, -754), (Tag1 (0, (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -752)], (0)), 100000000, 0, -753), (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -752)], (0)), 100000000, 0, -751), 0), 100000000, 0, -750), 0), 100000000, 0, -749), 0, (("map.mli", 258, 10888, 10892), ("map.mli", 258, 10888, 10939), 0), 0, Tag1 ("Stdlib__Map", 31)), 0); (("filter_map", 1535), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1506)), 0, (0)), 100000000, 0, -748), (Tag1 (0, ((("a")), 100000000, 0, -744), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -742)], (0)), 100000000, 0, -747), 0), 100000000, 0, -746), 0), 100000000, 0, -745), (Tag1 (0, (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -744)], (0)), 100000000, 0, -743), (Tag3 ((("t", 1507)), [((("b")), 100000000, 0, -742)], (0)), 100000000, 0, -741), 0), 100000000, 0, -740), 0), 100000000, 0, -739), 0, (("map.mli", 266, 11264, 11268), ("map.mli", 266, 11264, 11324), 0), 0, Tag1 ("Stdlib__Map", 32)), 0); (("partition", 1536), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1506)), 0, (0)), 100000000, 0, -738), (Tag1 (0, ((("a")), 100000000, 0, -732), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -737), 0), 100000000, 0, -736), 0), 100000000, 0, -735), (Tag1 (0, (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -732)], (0)), 100000000, 0, -734), (Tag2 ([(Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -732)], (0)), 100000000, 0, -731); (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -732)], (0)), 100000000, 0, -733)]), 100000000, 0, -730), 0), 100000000, 0, -729), 0), 100000000, 0, -728), 0, (("map.mli", 285, 12005, 12009), ("map.mli", 285, 12005, 12066), 0), 0, Tag1 ("Stdlib__Map", 33)), 0); (("split", 1537), ((Tag1 (0, (Tag3 ((("key", 1506)), 0, (0)), 100000000, 0, -727), (Tag1 (0, (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -723)], (0)), 100000000, 0, -726), (Tag2 ([(Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -723)], (0)), 100000000, 0, -722); (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -723)], (0)), 100000000, 0, -724); (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -723)], (0)), 100000000, 0, -725)]), 100000000, 0, -721), 0), 100000000, 0, -720), 0), 100000000, 0, -719), 0, (("map.mli", 292, 12324, 12328), ("map.mli", 292, 12324, 12377), 0), 0, Tag1 ("Stdlib__Map", 34)), 0); (("is_empty", 1538), ((Tag1 (0, (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -718)], (0)), 100000000, 0, -717), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -716), 0), 100000000, 0, -715), 0, (("map.mli", 304, 12826, 12830), ("map.mli", 304, 12826, 12856), 0), 0, Tag1 ("Stdlib__Map", 35)), 0); (("mem", 1539), ((Tag1 (0, (Tag3 ((("key", 1506)), 0, (0)), 100000000, 0, -714), (Tag1 (0, (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -713)], (0)), 100000000, 0, -712), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -711), 0), 100000000, 0, -710), 0), 100000000, 0, -709), 0, (("map.mli", 307, 12905, 12909), ("map.mli", 307, 12905, 12937), 0), 0, Tag1 ("Stdlib__Map", 36)), 0); (("equal", 1540), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -704), (Tag1 (0, ((("a")), 100000000, 0, -704), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -708), 0), 100000000, 0, -707), 0), 100000000, 0, -706), (Tag1 (0, (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -704)], (0)), 100000000, 0, -705), (Tag1 (0, (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -704)], (0)), 100000000, 0, -703), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -702), 0), 100000000, 0, -701), 0), 100000000, 0, -700), 0), 100000000, 0, -699), 0, (("map.mli", 311, 13041, 13045), ("map.mli", 311, 13041, 13098), 0), 0, Tag1 ("Stdlib__Map", 37)), 0); (("compare", 1541), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -694), (Tag1 (0, ((("a")), 100000000, 0, -694), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -698), 0), 100000000, 0, -697), 0), 100000000, 0, -696), (Tag1 (0, (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -694)], (0)), 100000000, 0, -695), (Tag1 (0, (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -694)], (0)), 100000000, 0, -693), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -692), 0), 100000000, 0, -691), 0), 100000000, 0, -690), 0), 100000000, 0, -689), 0, (("map.mli", 317, 13349, 13353), ("map.mli", 317, 13349, 13406), 0), 0, Tag1 ("Stdlib__Map", 38)), 0); (("for_all", 1542), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1506)), 0, (0)), 100000000, 0, -688), (Tag1 (0, ((("a")), 100000000, 0, -684), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -687), 0), 100000000, 0, -686), 0), 100000000, 0, -685), (Tag1 (0, (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -684)], (0)), 100000000, 0, -683), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -682), 0), 100000000, 0, -681), 0), 100000000, 0, -680), 0, (("map.mli", 321, 13561, 13565), ("map.mli", 321, 13561, 13613), 0), 0, Tag1 ("Stdlib__Map", 39)), 0); (("exists", 1543), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1506)), 0, (0)), 100000000, 0, -679), (Tag1 (0, ((("a")), 100000000, 0, -675), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -678), 0), 100000000, 0, -677), 0), 100000000, 0, -676), (Tag1 (0, (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -675)], (0)), 100000000, 0, -674), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -673), 0), 100000000, 0, -672), 0), 100000000, 0, -671), 0, (("map.mli", 326, 13733, 13737), ("map.mli", 326, 13733, 13784), 0), 0, Tag1 ("Stdlib__Map", 40)), 0); (("to_list", 1544), ((Tag1 (0, (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -669)], (0)), 100000000, 0, -670), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("key", 1506)), 0, (0)), 100000000, 0, -668); ((("a")), 100000000, 0, -669)]), 100000000, 0, -667)], (0)), 100000000, 0, -666), 0), 100000000, 0, -665), 0, (("map.mli", 333, 13947, 13951), ("map.mli", 333, 13947, 13988), 0), 0, Tag1 ("Stdlib__Map", 41)), 0); (("of_list", 1545), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("key", 1506)), 0, (0)), 100000000, 0, -664); ((("a")), 100000000, 0, -661)]), 100000000, 0, -663)], (0)), 100000000, 0, -662), (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -661)], (0)), 100000000, 0, -660), 0), 100000000, 0, -659), 0, (("map.mli", 337, 14052, 14056), ("map.mli", 337, 14052, 14093), 0), 0, Tag1 ("Stdlib__Map", 42)), 0); (("to_seq", 1546), ((Tag1 (0, (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -657)], (0)), 100000000, 0, -658), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 1506)), 0, (0)), 100000000, 0, -656); ((("a")), 100000000, 0, -657)]), 100000000, 0, -655)], (0)), 100000000, 0, -654), 0), 100000000, 0, -653), 0, (("map.mli", 343, 14271, 14275), ("map.mli", 343, 14271, 14312), 0), 0, Tag1 ("Stdlib__Map", 43)), 0); (("to_rev_seq", 1547), ((Tag1 (0, (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -651)], (0)), 100000000, 0, -652), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 1506)), 0, (0)), 100000000, 0, -650); ((("a")), 100000000, 0, -651)]), 100000000, 0, -649)], (0)), 100000000, 0, -648), 0), 100000000, 0, -647), 0, (("map.mli", 347, 14398, 14402), ("map.mli", 347, 14398, 14443), 0), 0, Tag1 ("Stdlib__Map", 44)), 0); (("to_seq_from", 1548), ((Tag1 (0, (Tag3 ((("key", 1506)), 0, (0)), 100000000, 0, -646), (Tag1 (0, (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -644)], (0)), 100000000, 0, -645), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 1506)), 0, (0)), 100000000, 0, -643); ((("a")), 100000000, 0, -644)]), 100000000, 0, -642)], (0)), 100000000, 0, -641), 0), 100000000, 0, -640), 0), 100000000, 0, -639), 0, (("map.mli", 351, 14530, 14534), ("map.mli", 351, 14530, 14583), 0), 0, Tag1 ("Stdlib__Map", 45)), 0); (("add_seq", 1549), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 1506)), 0, (0)), 100000000, 0, -638); ((("a")), 100000000, 0, -634)]), 100000000, 0, -637)], (0)), 100000000, 0, -636), (Tag1 (0, (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -634)], (0)), 100000000, 0, -635), (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -634)], (0)), 100000000, 0, -633), 0), 100000000, 0, -632), 0), 100000000, 0, -631), 0, (("map.mli", 356, 14738, 14742), ("map.mli", 356, 14738, 14788), 0), 0, Tag1 ("Stdlib__Map", 46)), 0); (("of_seq", 1550), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 1506)), 0, (0)), 100000000, 0, -630); ((("a")), 100000000, 0, -627)]), 100000000, 0, -629)], (0)), 100000000, 0, -628), (Tag3 ((("t", 1507)), [((("a")), 100000000, 0, -627)], (0)), 100000000, 0, -626), 0), 100000000, 0, -625), 0, (("map.mli", 360, 14866, 14870), ("map.mli", 360, 14866, 14907), 0), 0, Tag1 ("Stdlib__Map", 47)), 0)]), 0, (("typing/btype.mli", 31, 1443, 1443), ("typing/btype.mli", 31, 1443, 1505), 0), Tag1 ("Btype", 9)), 0, 0); Tag3 (("TypeMap", 1383), 0, (Tag1 ([Tag1 (("key", 1551), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Types")), "transient_expr"), 0, (0)), 100000000, 0, -1283)), 0, 0, 0, 0, (("typing/btype.mli", 33, 1527, 1548), ("typing/btype.mli", 33, 1527, 1573), 0), 0, 0, 0, Tag1 ("Btype", 10)), 1, 0); Tag1 (("t", 1552), ([((("a")), 100000000, 0, -1282)], 1, 0, 1, ((Tag3 (Tag1 ((("TransientTypeMap", 1382)), "t"), [((("a")), 100000000, 0, -1282)], (0)), 100000000, 0, -1281)), [9], [2], 0, 0, (("typing/btype.mli", 34, 1574, 1599), ("typing/btype.mli", 34, 1574, 1632), 0), 0, 0, 0, Tag1 ("Btype", 11)), 1, 0); (("empty", 1553), ((Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -1280)], (0)), 100000000, 0, -1279), 0, (("map.mli", 76, 2977, 2981), ("map.mli", 76, 2977, 2996), 0), 0, Tag1 ("Stdlib__Map", 5)), 0); (("add_to_list", 1554), ((Tag1 (0, (Tag3 ((("key", 1551)), 0, (0)), 100000000, 0, -1278), (Tag1 (0, ((("a")), 100000000, 0, -1275), (Tag1 (0, (Tag3 ((("t", 1552)), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -1275)], (0)), 100000000, 0, -1277)], (0)), 100000000, 0, -1276), (Tag3 ((("t", 1552)), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -1275)], (0)), 100000000, 0, -1274)], (0)), 100000000, 0, -1273), 0), 100000000, 0, -1272), 0), 100000000, 0, -1271), 0), 100000000, 0, -1270), 0, (("map.mli", 88, 3503, 3507), ("map.mli", 88, 3503, 3559), 0), 0, Tag1 ("Stdlib__Map", 7)), 0); (("update", 1555), ((Tag1 (0, (Tag3 ((("key", 1551)), 0, (0)), 100000000, 0, -1269), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1264)], (0)), 100000000, 0, -1268), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1264)], (0)), 100000000, 0, -1267), 0), 100000000, 0, -1266), (Tag1 (0, (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -1264)], (0)), 100000000, 0, -1265), (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -1264)], (0)), 100000000, 0, -1263), 0), 100000000, 0, -1262), 0), 100000000, 0, -1261), 0), 100000000, 0, -1260), 0, (("map.mli", 94, 3753, 3757), ("map.mli", 94, 3753, 3816), 0), 0, Tag1 ("Stdlib__Map", 8)), 0); (("remove", 1556), ((Tag1 (0, (Tag3 ((("key", 1551)), 0, (0)), 100000000, 0, -1259), (Tag1 (0, (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -1257)], (0)), 100000000, 0, -1258), (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -1257)], (0)), 100000000, 0, -1256), 0), 100000000, 0, -1255), 0), 100000000, 0, -1254), 0, (("map.mli", 111, 4594, 4598), ("map.mli", 111, 4594, 4629), 0), 0, Tag1 ("Stdlib__Map", 10)), 0); (("merge", 1557), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1551)), 0, (0)), 100000000, 0, -1253), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1246)], (0)), 100000000, 0, -1252), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -1244)], (0)), 100000000, 0, -1251), (Tag3 ((Tag3 ("option", 10)), [((("c")), 100000000, 0, -1242)], (0)), 100000000, 0, -1250), 0), 100000000, 0, -1249), 0), 100000000, 0, -1248), 0), 100000000, 0, -1247), (Tag1 (0, (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -1246)], (0)), 100000000, 0, -1245), (Tag1 (0, (Tag3 ((("t", 1552)), [((("b")), 100000000, 0, -1244)], (0)), 100000000, 0, -1243), (Tag3 ((("t", 1552)), [((("c")), 100000000, 0, -1242)], (0)), 100000000, 0, -1241), 0), 100000000, 0, -1240), 0), 100000000, 0, -1239), 0), 100000000, 0, -1238), 0, (("map.mli", 118, 4950, 4954), ("map.mli", 120, 5019, 5045), 0), 0, Tag1 ("Stdlib__Map", 11)), 0); (("union", 1558), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1551)), 0, (0)), 100000000, 0, -1237), (Tag1 (0, ((("a")), 100000000, 0, -1230), (Tag1 (0, ((("a")), 100000000, 0, -1230), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1230)], (0)), 100000000, 0, -1236), 0), 100000000, 0, -1235), 0), 100000000, 0, -1234), 0), 100000000, 0, -1233), (Tag1 (0, (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -1230)], (0)), 100000000, 0, -1232), (Tag1 (0, (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -1230)], (0)), 100000000, 0, -1231), (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -1230)], (0)), 100000000, 0, -1229), 0), 100000000, 0, -1228), 0), 100000000, 0, -1227), 0), 100000000, 0, -1226), 0, (("map.mli", 129, 5475, 5479), ("map.mli", 129, 5475, 5544), 0), 0, Tag1 ("Stdlib__Map", 12)), 0); (("cardinal", 1559), ((Tag1 (0, (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -1225)], (0)), 100000000, 0, -1224), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1223), 0), 100000000, 0, -1222), 0, (("map.mli", 142, 6061, 6065), ("map.mli", 142, 6061, 6090), 0), 0, Tag1 ("Stdlib__Map", 13)), 0); (("bindings", 1560), ((Tag1 (0, (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -1220)], (0)), 100000000, 0, -1221), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("key", 1551)), 0, (0)), 100000000, 0, -1219); ((("a")), 100000000, 0, -1220)]), 100000000, 0, -1218)], (0)), 100000000, 0, -1217), 0), 100000000, 0, -1216), 0, (("map.mli", 148, 6197, 6201), ("map.mli", 148, 6197, 6238), 0), 0, Tag1 ("Stdlib__Map", 14)), 0); (("min_binding", 1561), ((Tag1 (0, (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -1214)], (0)), 100000000, 0, -1215), (Tag2 ([(Tag3 ((("key", 1551)), 0, (0)), 100000000, 0, -1213); ((("a")), 100000000, 0, -1214)]), 100000000, 0, -1212), 0), 100000000, 0, -1211), 0, (("map.mli", 155, 6495, 6499), ("map.mli", 155, 6495, 6534), 0), 0, Tag1 ("Stdlib__Map", 15)), 0); (("min_binding_opt", 1562), ((Tag1 (0, (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -1209)], (0)), 100000000, 0, -1210), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("key", 1551)), 0, (0)), 100000000, 0, -1208); ((("a")), 100000000, 0, -1209)]), 100000000, 0, -1207)], (0)), 100000000, 0, -1206), 0), 100000000, 0, -1205), 0, (("map.mli", 161, 6727, 6731), ("map.mli", 161, 6727, 6777), 0), 0, Tag1 ("Stdlib__Map", 16)), 0); (("max_binding", 1563), ((Tag1 (0, (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -1203)], (0)), 100000000, 0, -1204), (Tag2 ([(Tag3 ((("key", 1551)), 0, (0)), 100000000, 0, -1202); ((("a")), 100000000, 0, -1203)]), 100000000, 0, -1201), 0), 100000000, 0, -1200), 0, (("map.mli", 167, 6961, 6965), ("map.mli", 167, 6961, 7000), 0), 0, Tag1 ("Stdlib__Map", 17)), 0); (("max_binding_opt", 1564), ((Tag1 (0, (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -1198)], (0)), 100000000, 0, -1199), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("key", 1551)), 0, (0)), 100000000, 0, -1197); ((("a")), 100000000, 0, -1198)]), 100000000, 0, -1196)], (0)), 100000000, 0, -1195), 0), 100000000, 0, -1194), 0, (("map.mli", 172, 7128, 7132), ("map.mli", 172, 7128, 7178), 0), 0, Tag1 ("Stdlib__Map", 18)), 0); (("choose", 1565), ((Tag1 (0, (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -1192)], (0)), 100000000, 0, -1193), (Tag2 ([(Tag3 ((("key", 1551)), 0, (0)), 100000000, 0, -1191); ((("a")), 100000000, 0, -1192)]), 100000000, 0, -1190), 0), 100000000, 0, -1189), 0, (("map.mli", 177, 7310, 7314), ("map.mli", 177, 7310, 7344), 0), 0, Tag1 ("Stdlib__Map", 19)), 0); (("choose_opt", 1566), ((Tag1 (0, (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -1187)], (0)), 100000000, 0, -1188), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("key", 1551)), 0, (0)), 100000000, 0, -1186); ((("a")), 100000000, 0, -1187)]), 100000000, 0, -1185)], (0)), 100000000, 0, -1184), 0), 100000000, 0, -1183), 0, (("map.mli", 183, 7562, 7566), ("map.mli", 183, 7562, 7607), 0), 0, Tag1 ("Stdlib__Map", 20)), 0); (("find_opt", 1567), ((Tag1 (0, (Tag3 ((("key", 1551)), 0, (0)), 100000000, 0, -1182), (Tag1 (0, (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -1180)], (0)), 100000000, 0, -1181), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1180)], (0)), 100000000, 0, -1179), 0), 100000000, 0, -1178), 0), 100000000, 0, -1177), 0, (("map.mli", 195, 8006, 8010), ("map.mli", 195, 8006, 8048), 0), 0, Tag1 ("Stdlib__Map", 22)), 0); (("find_first", 1568), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1551)), 0, (0)), 100000000, 0, -1176), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1175), 0), 100000000, 0, -1174), (Tag1 (0, (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -1172)], (0)), 100000000, 0, -1173), (Tag2 ([(Tag3 ((("key", 1551)), 0, (0)), 100000000, 0, -1171); ((("a")), 100000000, 0, -1172)]), 100000000, 0, -1170), 0), 100000000, 0, -1169), 0), 100000000, 0, -1168), 0, (("map.mli", 200, 8204, 8208), ("map.mli", 200, 8204, 8257), 0), 0, Tag1 ("Stdlib__Map", 23)), 0); (("find_first_opt", 1569), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1551)), 0, (0)), 100000000, 0, -1167), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1166), 0), 100000000, 0, -1165), (Tag1 (0, (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -1163)], (0)), 100000000, 0, -1164), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("key", 1551)), 0, (0)), 100000000, 0, -1162); ((("a")), 100000000, 0, -1163)]), 100000000, 0, -1161)], (0)), 100000000, 0, -1160), 0), 100000000, 0, -1159), 0), 100000000, 0, -1158), 0, (("map.mli", 212, 8743, 8747), ("map.mli", 212, 8743, 8809), 0), 0, Tag1 ("Stdlib__Map", 24)), 0); (("find_last", 1570), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1551)), 0, (0)), 100000000, 0, -1157), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1156), 0), 100000000, 0, -1155), (Tag1 (0, (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -1153)], (0)), 100000000, 0, -1154), (Tag2 ([(Tag3 ((("key", 1551)), 0, (0)), 100000000, 0, -1152); ((("a")), 100000000, 0, -1153)]), 100000000, 0, -1151), 0), 100000000, 0, -1150), 0), 100000000, 0, -1149), 0, (("map.mli", 218, 9052, 9056), ("map.mli", 218, 9052, 9104), 0), 0, Tag1 ("Stdlib__Map", 25)), 0); (("find_last_opt", 1571), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1551)), 0, (0)), 100000000, 0, -1148), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1147), 0), 100000000, 0, -1146), (Tag1 (0, (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -1144)], (0)), 100000000, 0, -1145), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("key", 1551)), 0, (0)), 100000000, 0, -1143); ((("a")), 100000000, 0, -1144)]), 100000000, 0, -1142)], (0)), 100000000, 0, -1141), 0), 100000000, 0, -1140), 0), 100000000, 0, -1139), 0, (("map.mli", 224, 9334, 9338), ("map.mli", 224, 9334, 9399), 0), 0, Tag1 ("Stdlib__Map", 26)), 0); (("iter", 1572), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1551)), 0, (0)), 100000000, 0, -1138), (Tag1 (0, ((("a")), 100000000, 0, -1134), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1137), 0), 100000000, 0, -1136), 0), 100000000, 0, -1135), (Tag1 (0, (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -1134)], (0)), 100000000, 0, -1133), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1132), 0), 100000000, 0, -1131), 0), 100000000, 0, -1130), 0, (("map.mli", 233, 9688, 9692), ("map.mli", 233, 9688, 9737), 0), 0, Tag1 ("Stdlib__Map", 27)), 0); (("map", 1573), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -1128), ((("b")), 100000000, 0, -1126), 0), 100000000, 0, -1129), (Tag1 (0, (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -1128)], (0)), 100000000, 0, -1127), (Tag3 ((("t", 1552)), [((("b")), 100000000, 0, -1126)], (0)), 100000000, 0, -1125), 0), 100000000, 0, -1124), 0), 100000000, 0, -1123), 0, (("map.mli", 247, 10338, 10342), ("map.mli", 247, 10338, 10377), 0), 0, Tag1 ("Stdlib__Map", 29)), 0); (("mapi", 1574), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1551)), 0, (0)), 100000000, 0, -1122), (Tag1 (0, ((("a")), 100000000, 0, -1119), ((("b")), 100000000, 0, -1117), 0), 100000000, 0, -1121), 0), 100000000, 0, -1120), (Tag1 (0, (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -1119)], (0)), 100000000, 0, -1118), (Tag3 ((("t", 1552)), [((("b")), 100000000, 0, -1117)], (0)), 100000000, 0, -1116), 0), 100000000, 0, -1115), 0), 100000000, 0, -1114), 0, (("map.mli", 254, 10698, 10702), ("map.mli", 254, 10698, 10745), 0), 0, Tag1 ("Stdlib__Map", 30)), 0); (("filter", 1575), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1551)), 0, (0)), 100000000, 0, -1113), (Tag1 (0, ((("a")), 100000000, 0, -1108), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1112), 0), 100000000, 0, -1111), 0), 100000000, 0, -1110), (Tag1 (0, (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -1108)], (0)), 100000000, 0, -1109), (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -1108)], (0)), 100000000, 0, -1107), 0), 100000000, 0, -1106), 0), 100000000, 0, -1105), 0, (("map.mli", 258, 10888, 10892), ("map.mli", 258, 10888, 10939), 0), 0, Tag1 ("Stdlib__Map", 31)), 0); (("filter_map", 1576), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1551)), 0, (0)), 100000000, 0, -1104), (Tag1 (0, ((("a")), 100000000, 0, -1100), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -1098)], (0)), 100000000, 0, -1103), 0), 100000000, 0, -1102), 0), 100000000, 0, -1101), (Tag1 (0, (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -1100)], (0)), 100000000, 0, -1099), (Tag3 ((("t", 1552)), [((("b")), 100000000, 0, -1098)], (0)), 100000000, 0, -1097), 0), 100000000, 0, -1096), 0), 100000000, 0, -1095), 0, (("map.mli", 266, 11264, 11268), ("map.mli", 266, 11264, 11324), 0), 0, Tag1 ("Stdlib__Map", 32)), 0); (("partition", 1577), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1551)), 0, (0)), 100000000, 0, -1094), (Tag1 (0, ((("a")), 100000000, 0, -1088), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1093), 0), 100000000, 0, -1092), 0), 100000000, 0, -1091), (Tag1 (0, (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -1088)], (0)), 100000000, 0, -1090), (Tag2 ([(Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -1088)], (0)), 100000000, 0, -1087); (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -1088)], (0)), 100000000, 0, -1089)]), 100000000, 0, -1086), 0), 100000000, 0, -1085), 0), 100000000, 0, -1084), 0, (("map.mli", 285, 12005, 12009), ("map.mli", 285, 12005, 12066), 0), 0, Tag1 ("Stdlib__Map", 33)), 0); (("split", 1578), ((Tag1 (0, (Tag3 ((("key", 1551)), 0, (0)), 100000000, 0, -1083), (Tag1 (0, (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -1079)], (0)), 100000000, 0, -1082), (Tag2 ([(Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -1079)], (0)), 100000000, 0, -1078); (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1079)], (0)), 100000000, 0, -1080); (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -1079)], (0)), 100000000, 0, -1081)]), 100000000, 0, -1077), 0), 100000000, 0, -1076), 0), 100000000, 0, -1075), 0, (("map.mli", 292, 12324, 12328), ("map.mli", 292, 12324, 12377), 0), 0, Tag1 ("Stdlib__Map", 34)), 0); (("is_empty", 1579), ((Tag1 (0, (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -1074)], (0)), 100000000, 0, -1073), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1072), 0), 100000000, 0, -1071), 0, (("map.mli", 304, 12826, 12830), ("map.mli", 304, 12826, 12856), 0), 0, Tag1 ("Stdlib__Map", 35)), 0); (("mem", 1580), ((Tag1 (0, (Tag3 ((("key", 1551)), 0, (0)), 100000000, 0, -1070), (Tag1 (0, (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -1069)], (0)), 100000000, 0, -1068), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1067), 0), 100000000, 0, -1066), 0), 100000000, 0, -1065), 0, (("map.mli", 307, 12905, 12909), ("map.mli", 307, 12905, 12937), 0), 0, Tag1 ("Stdlib__Map", 36)), 0); (("equal", 1581), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -1060), (Tag1 (0, ((("a")), 100000000, 0, -1060), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1064), 0), 100000000, 0, -1063), 0), 100000000, 0, -1062), (Tag1 (0, (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -1060)], (0)), 100000000, 0, -1061), (Tag1 (0, (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -1060)], (0)), 100000000, 0, -1059), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1058), 0), 100000000, 0, -1057), 0), 100000000, 0, -1056), 0), 100000000, 0, -1055), 0, (("map.mli", 311, 13041, 13045), ("map.mli", 311, 13041, 13098), 0), 0, Tag1 ("Stdlib__Map", 37)), 0); (("compare", 1582), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -1050), (Tag1 (0, ((("a")), 100000000, 0, -1050), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1054), 0), 100000000, 0, -1053), 0), 100000000, 0, -1052), (Tag1 (0, (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -1050)], (0)), 100000000, 0, -1051), (Tag1 (0, (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -1050)], (0)), 100000000, 0, -1049), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1048), 0), 100000000, 0, -1047), 0), 100000000, 0, -1046), 0), 100000000, 0, -1045), 0, (("map.mli", 317, 13349, 13353), ("map.mli", 317, 13349, 13406), 0), 0, Tag1 ("Stdlib__Map", 38)), 0); (("for_all", 1583), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1551)), 0, (0)), 100000000, 0, -1044), (Tag1 (0, ((("a")), 100000000, 0, -1040), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1043), 0), 100000000, 0, -1042), 0), 100000000, 0, -1041), (Tag1 (0, (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -1040)], (0)), 100000000, 0, -1039), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1038), 0), 100000000, 0, -1037), 0), 100000000, 0, -1036), 0, (("map.mli", 321, 13561, 13565), ("map.mli", 321, 13561, 13613), 0), 0, Tag1 ("Stdlib__Map", 39)), 0); (("exists", 1584), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1551)), 0, (0)), 100000000, 0, -1035), (Tag1 (0, ((("a")), 100000000, 0, -1031), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1034), 0), 100000000, 0, -1033), 0), 100000000, 0, -1032), (Tag1 (0, (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -1031)], (0)), 100000000, 0, -1030), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1029), 0), 100000000, 0, -1028), 0), 100000000, 0, -1027), 0, (("map.mli", 326, 13733, 13737), ("map.mli", 326, 13733, 13784), 0), 0, Tag1 ("Stdlib__Map", 40)), 0); (("to_list", 1585), ((Tag1 (0, (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -1025)], (0)), 100000000, 0, -1026), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("key", 1551)), 0, (0)), 100000000, 0, -1024); ((("a")), 100000000, 0, -1025)]), 100000000, 0, -1023)], (0)), 100000000, 0, -1022), 0), 100000000, 0, -1021), 0, (("map.mli", 333, 13947, 13951), ("map.mli", 333, 13947, 13988), 0), 0, Tag1 ("Stdlib__Map", 41)), 0); (("of_list", 1586), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("key", 1551)), 0, (0)), 100000000, 0, -1020); ((("a")), 100000000, 0, -1017)]), 100000000, 0, -1019)], (0)), 100000000, 0, -1018), (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -1017)], (0)), 100000000, 0, -1016), 0), 100000000, 0, -1015), 0, (("map.mli", 337, 14052, 14056), ("map.mli", 337, 14052, 14093), 0), 0, Tag1 ("Stdlib__Map", 42)), 0); (("to_seq", 1587), ((Tag1 (0, (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -1013)], (0)), 100000000, 0, -1014), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 1551)), 0, (0)), 100000000, 0, -1012); ((("a")), 100000000, 0, -1013)]), 100000000, 0, -1011)], (0)), 100000000, 0, -1010), 0), 100000000, 0, -1009), 0, (("map.mli", 343, 14271, 14275), ("map.mli", 343, 14271, 14312), 0), 0, Tag1 ("Stdlib__Map", 43)), 0); (("to_rev_seq", 1588), ((Tag1 (0, (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -1007)], (0)), 100000000, 0, -1008), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 1551)), 0, (0)), 100000000, 0, -1006); ((("a")), 100000000, 0, -1007)]), 100000000, 0, -1005)], (0)), 100000000, 0, -1004), 0), 100000000, 0, -1003), 0, (("map.mli", 347, 14398, 14402), ("map.mli", 347, 14398, 14443), 0), 0, Tag1 ("Stdlib__Map", 44)), 0); (("to_seq_from", 1589), ((Tag1 (0, (Tag3 ((("key", 1551)), 0, (0)), 100000000, 0, -1002), (Tag1 (0, (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -1000)], (0)), 100000000, 0, -1001), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 1551)), 0, (0)), 100000000, 0, -999); ((("a")), 100000000, 0, -1000)]), 100000000, 0, -998)], (0)), 100000000, 0, -997), 0), 100000000, 0, -996), 0), 100000000, 0, -995), 0, (("map.mli", 351, 14530, 14534), ("map.mli", 351, 14530, 14583), 0), 0, Tag1 ("Stdlib__Map", 45)), 0); (("add_seq", 1590), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 1551)), 0, (0)), 100000000, 0, -994); ((("a")), 100000000, 0, -990)]), 100000000, 0, -993)], (0)), 100000000, 0, -992), (Tag1 (0, (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -990)], (0)), 100000000, 0, -991), (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -990)], (0)), 100000000, 0, -989), 0), 100000000, 0, -988), 0), 100000000, 0, -987), 0, (("map.mli", 356, 14738, 14742), ("map.mli", 356, 14738, 14788), 0), 0, Tag1 ("Stdlib__Map", 46)), 0); (("of_seq", 1591), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 1551)), 0, (0)), 100000000, 0, -986); ((("a")), 100000000, 0, -983)]), 100000000, 0, -985)], (0)), 100000000, 0, -984), (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -983)], (0)), 100000000, 0, -982), 0), 100000000, 0, -981), 0, (("map.mli", 360, 14866, 14870), ("map.mli", 360, 14866, 14907), 0), 0, Tag1 ("Stdlib__Map", 47)), 0); (("add", 1592), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -980), (Tag1 (0, ((("a")), 100000000, 0, -978), (Tag1 (0, (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -978)], (0)), 100000000, 0, -979), (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -978)], (0)), 100000000, 0, -977), 0), 100000000, 0, -976), 0), 100000000, 0, -975), 0), 100000000, 0, -974), 0, (("typing/btype.mli", 35, 1633, 1635), ("typing/btype.mli", 35, 1633, 1675), 0), 0, Tag1 ("Btype", 12)), 0); (("find", 1593), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -973), (Tag1 (0, (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -971)], (0)), 100000000, 0, -972), ((("a")), 100000000, 0, -971), 0), 100000000, 0, -970), 0), 100000000, 0, -969), 0, (("typing/btype.mli", 36, 1676, 1678), ("typing/btype.mli", 36, 1676, 1711), 0), 0, Tag1 ("Btype", 13)), 0); (("singleton", 1594), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -968), (Tag1 (0, ((("a")), 100000000, 0, -967), (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -967)], (0)), 100000000, 0, -966), 0), 100000000, 0, -965), 0), 100000000, 0, -964), 0, (("typing/btype.mli", 37, 1712, 1714), ("typing/btype.mli", 37, 1712, 1752), 0), 0, Tag1 ("Btype", 14)), 0); (("fold", 1595), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -963), (Tag1 (0, ((("a")), 100000000, 0, -959), (Tag1 (0, ((("b")), 100000000, 0, -957), ((("b")), 100000000, 0, -957), 0), 100000000, 0, -962), 0), 100000000, 0, -961), 0), 100000000, 0, -960), (Tag1 (0, (Tag3 ((("t", 1552)), [((("a")), 100000000, 0, -959)], (0)), 100000000, 0, -958), (Tag1 (0, ((("b")), 100000000, 0, -957), ((("b")), 100000000, 0, -957), 0), 100000000, 0, -956), 0), 100000000, 0, -955), 0), 100000000, 0, -954), 0, (("typing/btype.mli", 38, 1753, 1755), ("typing/btype.mli", 38, 1753, 1814), 0), 0, Tag1 ("Btype", 15)), 0)]), 0, (("typing/btype.mli", 32, 1506, 1506), ("typing/btype.mli", 39, 1815, 1818), 0), Tag1 ("Btype", 16)), 0, 0); Tag3 (("TypeHash", 1384), 0, (Tag1 ([Tag1 (("key", 1596), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Types")), "transient_expr"), 0, (0)), 100000000, 0, -1417)), 0, 0, 0, 0, (("typing/btype.mli", 41, 1841, 1866), ("typing/btype.mli", 41, 1841, 1891), 0), 0, 0, 0, Tag1 ("Btype", 17)), 1, 0); Tag1 (("t", 1597), ([((("a")), 100000000, 0, -1416)], 1, 0, 1, 0, [15], [2], 0, 0, (("hashtbl.mli", 372, 15205, 15209), ("hashtbl.mli", 372, 15205, 15219), 0), 0, 0, 0, Tag1 ("Stdlib__Hashtbl", 36)), 1, 0); (("create", 1598), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1415), (Tag3 ((("t", 1597)), [((("a")), 100000000, 0, -1414)], (0)), 100000000, 0, -1413), 0), 100000000, 0, -1412), 0, (("hashtbl.mli", 373, 15220, 15224), ("hashtbl.mli", 373, 15220, 15248), 0), 0, Tag1 ("Stdlib__Hashtbl", 37)), 0); (("clear", 1599), ((Tag1 (0, (Tag3 ((("t", 1597)), [((("a")), 100000000, 0, -1411)], (0)), 100000000, 0, -1410), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1409), 0), 100000000, 0, -1408), 0, (("hashtbl.mli", 374, 15249, 15253), ("hashtbl.mli", 374, 15249, 15277), 0), 0, Tag1 ("Stdlib__Hashtbl", 38)), 0); (("reset", 1600), ((Tag1 (0, (Tag3 ((("t", 1597)), [((("a")), 100000000, 0, -1407)], (0)), 100000000, 0, -1406), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1405), 0), 100000000, 0, -1404), 0, (("hashtbl.mli", 375, 15278, 15282), ("hashtbl.mli", 375, 15278, 15306), 0), 0, Tag1 ("Stdlib__Hashtbl", 39)), 0); (("copy", 1601), ((Tag1 (0, (Tag3 ((("t", 1597)), [((("a")), 100000000, 0, -1402)], (0)), 100000000, 0, -1403), (Tag3 ((("t", 1597)), [((("a")), 100000000, 0, -1402)], (0)), 100000000, 0, -1401), 0), 100000000, 0, -1400), 0, (("hashtbl.mli", 377, 15327, 15331), ("hashtbl.mli", 377, 15327, 15354), 0), 0, Tag1 ("Stdlib__Hashtbl", 40)), 0); (("find_opt", 1602), ((Tag1 (0, (Tag3 ((("t", 1597)), [((("a")), 100000000, 0, -1397)], (0)), 100000000, 0, -1399), (Tag1 (0, (Tag3 ((("key", 1596)), 0, (0)), 100000000, 0, -1398), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1397)], (0)), 100000000, 0, -1396), 0), 100000000, 0, -1395), 0), 100000000, 0, -1394), 0, (("hashtbl.mli", 381, 15465, 15469), ("hashtbl.mli", 381, 15465, 15508), 0), 0, Tag1 ("Stdlib__Hashtbl", 44)), 0); (("find_all", 1603), ((Tag1 (0, (Tag3 ((("t", 1597)), [((("a")), 100000000, 0, -1391)], (0)), 100000000, 0, -1393), (Tag1 (0, (Tag3 ((("key", 1596)), 0, (0)), 100000000, 0, -1392), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -1391)], (0)), 100000000, 0, -1390), 0), 100000000, 0, -1389), 0), 100000000, 0, -1388), 0, (("hashtbl.mli", 384, 15533, 15537), ("hashtbl.mli", 384, 15533, 15574), 0), 0, Tag1 ("Stdlib__Hashtbl", 45)), 0); (("replace", 1604), ((Tag1 (0, (Tag3 ((("t", 1597)), [((("a")), 100000000, 0, -1385)], (0)), 100000000, 0, -1387), (Tag1 (0, (Tag3 ((("key", 1596)), 0, (0)), 100000000, 0, -1386), (Tag1 (0, ((("a")), 100000000, 0, -1385), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1384), 0), 100000000, 0, -1383), 0), 100000000, 0, -1382), 0), 100000000, 0, -1381), 0, (("hashtbl.mli", 385, 15575, 15579), ("hashtbl.mli", 385, 15575, 15618), 0), 0, Tag1 ("Stdlib__Hashtbl", 46)), 0); (("mem", 1605), ((Tag1 (0, (Tag3 ((("t", 1597)), [((("a")), 100000000, 0, -1380)], (0)), 100000000, 0, -1379), (Tag1 (0, (Tag3 ((("key", 1596)), 0, (0)), 100000000, 0, -1378), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1377), 0), 100000000, 0, -1376), 0), 100000000, 0, -1375), 0, (("hashtbl.mli", 386, 15619, 15623), ("hashtbl.mli", 386, 15619, 15652), 0), 0, Tag1 ("Stdlib__Hashtbl", 47)), 0); (("filter_map_inplace", 1606), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1596)), 0, (0)), 100000000, 0, -1374), (Tag1 (0, ((("a")), 100000000, 0, -1370), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1370)], (0)), 100000000, 0, -1373), 0), 100000000, 0, -1372), 0), 100000000, 0, -1371), (Tag1 (0, (Tag3 ((("t", 1597)), [((("a")), 100000000, 0, -1370)], (0)), 100000000, 0, -1369), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1368), 0), 100000000, 0, -1367), 0), 100000000, 0, -1366), 0, (("hashtbl.mli", 388, 15704, 15708), ("hashtbl.mli", 389, 15768, 15778), 0), 0, Tag1 ("Stdlib__Hashtbl", 49)), 0); (("fold", 1607), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1596)), 0, (0)), 100000000, 0, -1365), (Tag1 (0, ((("a")), 100000000, 0, -1361), (Tag1 (0, ((("acc")), 100000000, 0, -1359), ((("acc")), 100000000, 0, -1359), 0), 100000000, 0, -1364), 0), 100000000, 0, -1363), 0), 100000000, 0, -1362), (Tag1 (0, (Tag3 ((("t", 1597)), [((("a")), 100000000, 0, -1361)], (0)), 100000000, 0, -1360), (Tag1 (0, ((("acc")), 100000000, 0, -1359), ((("acc")), 100000000, 0, -1359), 0), 100000000, 0, -1358), 0), 100000000, 0, -1357), 0), 100000000, 0, -1356), 0, (("hashtbl.mli", 392, 15803, 15807), ("hashtbl.mli", 393, 15818, 15875), 0), 0, Tag1 ("Stdlib__Hashtbl", 50)), 0); (("length", 1608), ((Tag1 (0, (Tag3 ((("t", 1597)), [((("a")), 100000000, 0, -1355)], (0)), 100000000, 0, -1354), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1353), 0), 100000000, 0, -1352), 0, (("hashtbl.mli", 394, 15876, 15880), ("hashtbl.mli", 394, 15876, 15904), 0), 0, Tag1 ("Stdlib__Hashtbl", 51)), 0); (("stats", 1609), ((Tag1 (0, (Tag3 ((("t", 1597)), [((("a")), 100000000, 0, -1351)], (0)), 100000000, 0, -1350), (Tag3 (Tag1 ((Tag2 ("Stdlib__Hashtbl")), "statistics"), 0, (0)), 100000000, 0, -1349), 0), 100000000, 0, -1348), 0, (("hashtbl.mli", 395, 15905, 15909), ("hashtbl.mli", 395, 15905, 15938), 0), 0, Tag1 ("Stdlib__Hashtbl", 52)), 0); (("to_seq", 1610), ((Tag1 (0, (Tag3 ((("t", 1597)), [((("a")), 100000000, 0, -1346)], (0)), 100000000, 0, -1347), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 1596)), 0, (0)), 100000000, 0, -1345); ((("a")), 100000000, 0, -1346)]), 100000000, 0, -1344)], (0)), 100000000, 0, -1343), 0), 100000000, 0, -1342), 0, (("hashtbl.mli", 397, 15959, 15963), ("hashtbl.mli", 397, 15959, 16000), 0), 0, Tag1 ("Stdlib__Hashtbl", 53)), 0); (("to_seq_keys", 1611), ((Tag1 (0, (Tag3 ((("t", 1597)), [((0), 100000000, 0, -1341)], (0)), 100000000, 0, -1340), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("key", 1596)), 0, (0)), 100000000, 0, -1339)], (0)), 100000000, 0, -1338), 0), 100000000, 0, -1337), 0, (("hashtbl.mli", 400, 16025, 16029), ("hashtbl.mli", 400, 16025, 16063), 0), 0, Tag1 ("Stdlib__Hashtbl", 54)), 0); (("to_seq_values", 1612), ((Tag1 (0, (Tag3 ((("t", 1597)), [((("a")), 100000000, 0, -1335)], (0)), 100000000, 0, -1336), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [((("a")), 100000000, 0, -1335)], (0)), 100000000, 0, -1334), 0), 100000000, 0, -1333), 0, (("hashtbl.mli", 403, 16088, 16092), ("hashtbl.mli", 403, 16088, 16128), 0), 0, Tag1 ("Stdlib__Hashtbl", 55)), 0); (("add_seq", 1613), ((Tag1 (0, (Tag3 ((("t", 1597)), [((("a")), 100000000, 0, -1331)], (0)), 100000000, 0, -1332), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 1596)), 0, (0)), 100000000, 0, -1330); ((("a")), 100000000, 0, -1331)]), 100000000, 0, -1329)], (0)), 100000000, 0, -1328), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1327), 0), 100000000, 0, -1326), 0), 100000000, 0, -1325), 0, (("hashtbl.mli", 406, 16153, 16157), ("hashtbl.mli", 406, 16153, 16203), 0), 0, Tag1 ("Stdlib__Hashtbl", 56)), 0); (("replace_seq", 1614), ((Tag1 (0, (Tag3 ((("t", 1597)), [((("a")), 100000000, 0, -1323)], (0)), 100000000, 0, -1324), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 1596)), 0, (0)), 100000000, 0, -1322); ((("a")), 100000000, 0, -1323)]), 100000000, 0, -1321)], (0)), 100000000, 0, -1320), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1319), 0), 100000000, 0, -1318), 0), 100000000, 0, -1317), 0, (("hashtbl.mli", 409, 16228, 16232), ("hashtbl.mli", 409, 16228, 16282), 0), 0, Tag1 ("Stdlib__Hashtbl", 57)), 0); (("of_seq", 1615), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 1596)), 0, (0)), 100000000, 0, -1316); ((("a")), 100000000, 0, -1313)]), 100000000, 0, -1315)], (0)), 100000000, 0, -1314), (Tag3 ((("t", 1597)), [((("a")), 100000000, 0, -1313)], (0)), 100000000, 0, -1312), 0), 100000000, 0, -1311), 0, (("hashtbl.mli", 412, 16307, 16311), ("hashtbl.mli", 412, 16307, 16348), 0), 0, Tag1 ("Stdlib__Hashtbl", 58)), 0); (("add", 1616), ((Tag1 (0, (Tag3 ((("t", 1597)), [((("a")), 100000000, 0, -1308)], (0)), 100000000, 0, -1310), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -1309), (Tag1 (0, ((("a")), 100000000, 0, -1308), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1307), 0), 100000000, 0, -1306), 0), 100000000, 0, -1305), 0), 100000000, 0, -1304), 0, (("typing/btype.mli", 42, 1892, 1894), ("typing/btype.mli", 42, 1892, 1934), 0), 0, Tag1 ("Btype", 18)), 0); (("remove", 1617), ((Tag1 (0, (Tag3 ((("t", 1597)), [((("a")), 100000000, 0, -1303)], (0)), 100000000, 0, -1302), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -1301), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1300), 0), 100000000, 0, -1299), 0), 100000000, 0, -1298), 0, (("typing/btype.mli", 43, 1935, 1937), ("typing/btype.mli", 43, 1935, 1975), 0), 0, Tag1 ("Btype", 19)), 0); (("find", 1618), ((Tag1 (0, (Tag3 ((("t", 1597)), [((("a")), 100000000, 0, -1295)], (0)), 100000000, 0, -1297), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -1296), ((("a")), 100000000, 0, -1295), 0), 100000000, 0, -1294), 0), 100000000, 0, -1293), 0, (("typing/btype.mli", 44, 1976, 1978), ("typing/btype.mli", 44, 1976, 2011), 0), 0, Tag1 ("Btype", 20)), 0); (("iter", 1619), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -1292), (Tag1 (0, ((("a")), 100000000, 0, -1288), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1291), 0), 100000000, 0, -1290), 0), 100000000, 0, -1289), (Tag1 (0, (Tag3 ((("t", 1597)), [((("a")), 100000000, 0, -1288)], (0)), 100000000, 0, -1287), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1286), 0), 100000000, 0, -1285), 0), 100000000, 0, -1284), 0, (("typing/btype.mli", 45, 2012, 2014), ("typing/btype.mli", 45, 2012, 2065), 0), 0, Tag1 ("Btype", 21)), 0)]), 0, (("typing/btype.mli", 40, 1819, 1819), ("typing/btype.mli", 46, 2066, 2069), 0), Tag1 ("Btype", 22)), 0, 0); Tag3 (("TypePairs", 1385), 0, (Tag1 ([Tag1 (("t", 1620), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("typing/btype.mli", 48, 2093, 2095), ("typing/btype.mli", 48, 2093, 2101), 0), 0, 0, 0, Tag1 ("Btype", 23)), 1, 0); (("create", 1621), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1446), (Tag3 ((("t", 1620)), 0, (0)), 100000000, 0, -1445), 0), 100000000, 0, -1444), 0, (("typing/btype.mli", 49, 2102, 2104), ("typing/btype.mli", 49, 2102, 2124), 0), 0, Tag1 ("Btype", 24)), 0); (("clear", 1622), ((Tag1 (0, (Tag3 ((("t", 1620)), 0, (0)), 100000000, 0, -1443), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1442), 0), 100000000, 0, -1441), 0, (("typing/btype.mli", 50, 2125, 2127), ("typing/btype.mli", 50, 2125, 2147), 0), 0, Tag1 ("Btype", 25)), 0); (("add", 1623), ((Tag1 (0, (Tag3 ((("t", 1620)), 0, (0)), 100000000, 0, -1440), (Tag1 (0, (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -1438); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -1439)]), 100000000, 0, -1437), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1436), 0), 100000000, 0, -1435), 0), 100000000, 0, -1434), 0, (("typing/btype.mli", 51, 2148, 2150), ("typing/btype.mli", 51, 2148, 2193), 0), 0, Tag1 ("Btype", 26)), 0); (("mem", 1624), ((Tag1 (0, (Tag3 ((("t", 1620)), 0, (0)), 100000000, 0, -1433), (Tag1 (0, (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -1431); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -1432)]), 100000000, 0, -1430), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1429), 0), 100000000, 0, -1428), 0), 100000000, 0, -1427), 0, (("typing/btype.mli", 52, 2194, 2196), ("typing/btype.mli", 52, 2194, 2239), 0), 0, Tag1 ("Btype", 27)), 0); (("iter", 1625), ((Tag1 (0, (Tag1 (0, (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -1425); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -1426)]), 100000000, 0, -1424), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1423), 0), 100000000, 0, -1422), (Tag1 (0, (Tag3 ((("t", 1620)), 0, (0)), 100000000, 0, -1421), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1420), 0), 100000000, 0, -1419), 0), 100000000, 0, -1418), 0, (("typing/btype.mli", 53, 2240, 2242), ("typing/btype.mli", 53, 2240, 2296), 0), 0, Tag1 ("Btype", 28)), 0)]), 0, (("typing/btype.mli", 47, 2070, 2070), ("typing/btype.mli", 54, 2297, 2300), 0), Tag1 ("Btype", 29)), 0, 0); (("generic_level", 1386), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -397), 0, (("typing/btype.mli", 58, 2322, 2322), ("typing/btype.mli", 58, 2322, 2344), 0), 0, Tag1 ("Btype", 30)), 0); (("newgenty", 1387), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_desc"), 0, (0)), 100000000, 0, -396), (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -395), 0), 100000000, 0, -394), 0, (("typing/btype.mli", 60, 2346, 2346), ("typing/btype.mli", 60, 2346, 2382), 0), 0, Tag1 ("Btype", 31)), 0); (("newgenvar", 1388), ((Tag1 (Tag1 ("name"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -393)], (0)), 100000000, 0, -392), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -391), (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -390), 0), 100000000, 0, -389), 0), 100000000, 0, -388), 0, (("typing/btype.mli", 62, 2419, 2419), ("typing/btype.mli", 62, 2419, 2467), 0), 0, Tag1 ("Btype", 32)), 0); (("newgenstub", 1389), ((Tag1 (("scope"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -387), (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -386), 0), 100000000, 0, -385), 0, (("typing/btype.mli", 64, 2514, 2514), ("typing/btype.mli", 64, 2514, 2552), 0), 0, Tag1 ("Btype", 33)), 0); (("is_Tvar", 1390), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -384), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -383), 0), 100000000, 0, -382), 0, (("typing/btype.mli", 77, 2878, 2878), ("typing/btype.mli", 77, 2878, 2908), 0), 0, Tag1 ("Btype", 34)), 0); (("is_Tunivar", 1391), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -381), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -380), 0), 100000000, 0, -379), 0, (("typing/btype.mli", 78, 2909, 2909), ("typing/btype.mli", 78, 2909, 2942), 0), 0, Tag1 ("Btype", 35)), 0); (("is_Tconstr", 1392), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -378), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -377), 0), 100000000, 0, -376), 0, (("typing/btype.mli", 79, 2943, 2943), ("typing/btype.mli", 79, 2943, 2976), 0), 0, Tag1 ("Btype", 36)), 0); (("dummy_method", 1393), ((Tag3 (Tag1 ((Tag2 ("Asttypes")), "label"), 0, (0)), 100000000, 0, -375), 0, (("typing/btype.mli", 80, 2977, 2977), ("typing/btype.mli", 80, 2977, 3000), 0), 0, Tag1 ("Btype", 37)), 0); (("is_fixed", 1394), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "row_desc"), 0, (0)), 100000000, 0, -374), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -373), 0), 100000000, 0, -372), 0, (("typing/btype.mli", 84, 3036, 3036), ("typing/btype.mli", 84, 3036, 3066), 0), 0, Tag1 ("Btype", 38)), 0); (("has_fixed_explanation", 1395), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "row_desc"), 0, (0)), 100000000, 0, -371), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -370), 0), 100000000, 0, -369), 0, (("typing/btype.mli", 87, 3132, 3132), ("typing/btype.mli", 87, 3132, 3175), 0), 0, Tag1 ("Btype", 39)), 0); (("fixed_explanation", 1396), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "row_desc"), 0, (0)), 100000000, 0, -368), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Types")), "fixed_explanation"), 0, (0)), 100000000, 0, -367)], (0)), 100000000, 0, -366), 0), 100000000, 0, -365), 0, (("typing/btype.mli", 92, 3311, 3311), ("typing/btype.mli", 92, 3311, 3370), 0), 0, Tag1 ("Btype", 40)), 0); (("merge_fixed_explanation", 1397), ((Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Types")), "fixed_explanation"), 0, (0)), 100000000, 0, -364)], (0)), 100000000, 0, -363), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Types")), "fixed_explanation"), 0, (0)), 100000000, 0, -362)], (0)), 100000000, 0, -361), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Types")), "fixed_explanation"), 0, (0)), 100000000, 0, -360)], (0)), 100000000, 0, -359), 0), 100000000, 0, -358), 0), 100000000, 0, -357), 0, (("typing/btype.mli", 95, 3429, 3429), ("typing/btype.mli", 97, 3513, 3542), 0), 0, Tag1 ("Btype", 41)), 0); (("static_row", 1398), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "row_desc"), 0, (0)), 100000000, 0, -356), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -355), 0), 100000000, 0, -354), 0, (("typing/btype.mli", 100, 3589, 3589), ("typing/btype.mli", 100, 3589, 3621), 0), 0, Tag1 ("Btype", 42)), 0); (("hash_variant", 1399), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "label"), 0, (0)), 100000000, 0, -353), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -352), 0), 100000000, 0, -351), 0, (("typing/btype.mli", 102, 3676, 3676), ("typing/btype.mli", 102, 3676, 3706), 0), 0, Tag1 ("Btype", 43)), 0); (("proxy", 1400), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -350), (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -349), 0), 100000000, 0, -348), 0, (("typing/btype.mli", 105, 3753, 3753), ("typing/btype.mli", 105, 3753, 3786), 0), 0, Tag1 ("Btype", 44)), 0); (("row_of_type", 1401), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -347), (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -346), 0), 100000000, 0, -345), 0, (("typing/btype.mli", 110, 3954, 3954), ("typing/btype.mli", 110, 3954, 3993), 0), 0, Tag1 ("Btype", 45)), 0); (("has_constr_row", 1402), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -344), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -343), 0), 100000000, 0, -342), 0, (("typing/btype.mli", 111, 3994, 3994), ("typing/btype.mli", 111, 3994, 4031), 0), 0, Tag1 ("Btype", 46)), 0); (("is_row_name", 1403), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -341), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -340), 0), 100000000, 0, -339), 0, (("typing/btype.mli", 112, 4032, 4032), ("typing/btype.mli", 112, 4032, 4063), 0), 0, Tag1 ("Btype", 47)), 0); (("is_constr_row", 1404), ((Tag1 (("allow_ident"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -338), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -337), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -336), 0), 100000000, 0, -335), 0), 100000000, 0, -334), 0, (("typing/btype.mli", 113, 4064, 4064), ("typing/btype.mli", 113, 4064, 4120), 0), 0, Tag1 ("Btype", 48)), 0); (("set_static_row_name", 1405), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -333), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -332), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -331), 0), 100000000, 0, -330), 0), 100000000, 0, -329), 0, (("typing/btype.mli", 116, 4171, 4171), ("typing/btype.mli", 116, 4171, 4230), 0), 0, Tag1 ("Btype", 49)), 0); (("iter_type_expr", 1406), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -328), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -327), 0), 100000000, 0, -326), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -325), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -324), 0), 100000000, 0, -323), 0), 100000000, 0, -322), 0, (("typing/btype.mli", 120, 4274, 4274), ("typing/btype.mli", 120, 4274, 4334), 0), 0, Tag1 ("Btype", 50)), 0); (("fold_type_expr", 1407), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -317), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -321), ((("a")), 100000000, 0, -317), 0), 100000000, 0, -320), 0), 100000000, 0, -319), (Tag1 (0, ((("a")), 100000000, 0, -317), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -318), ((("a")), 100000000, 0, -317), 0), 100000000, 0, -316), 0), 100000000, 0, -315), 0), 100000000, 0, -314), 0, (("typing/btype.mli", 122, 4368, 4368), ("typing/btype.mli", 122, 4368, 4436), 0), 0, Tag1 ("Btype", 51)), 0); (("iter_row", 1408), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -313), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -312), 0), 100000000, 0, -311), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "row_desc"), 0, (0)), 100000000, 0, -310), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -309), 0), 100000000, 0, -308), 0), 100000000, 0, -307), 0, (("typing/btype.mli", 123, 4437, 4437), ("typing/btype.mli", 123, 4437, 4490), 0), 0, Tag1 ("Btype", 52)), 0); (("fold_row", 1409), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -302), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -306), ((("a")), 100000000, 0, -302), 0), 100000000, 0, -305), 0), 100000000, 0, -304), (Tag1 (0, ((("a")), 100000000, 0, -302), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "row_desc"), 0, (0)), 100000000, 0, -303), ((("a")), 100000000, 0, -302), 0), 100000000, 0, -301), 0), 100000000, 0, -300), 0), 100000000, 0, -299), 0, (("typing/btype.mli", 125, 4533, 4533), ("typing/btype.mli", 125, 4533, 4594), 0), 0, Tag1 ("Btype", 53)), 0); (("iter_abbrev", 1410), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -298), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -297), 0), 100000000, 0, -296), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "abbrev_memo"), 0, (0)), 100000000, 0, -295), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -294), 0), 100000000, 0, -293), 0), 100000000, 0, -292), 0, (("typing/btype.mli", 126, 4595, 4595), ("typing/btype.mli", 126, 4595, 4654), 0), 0, Tag1 ("Btype", 54)), 0); (("iter_type_expr_kind", 1411), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -291), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -290), 0), 100000000, 0, -289), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_decl_kind"), 0, (0)), 100000000, 0, -288), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -287), 0), 100000000, 0, -286), 0), 100000000, 0, -285), 0, (("typing/btype.mli", 128, 4712, 4712), ("typing/btype.mli", 128, 4712, 4784), 0), 0, Tag1 ("Btype", 55)), 0); (("iter_type_expr_cstr_args", 1412), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -284), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -283), 0), 100000000, 0, -282), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "constructor_arguments"), 0, (0)), 100000000, 0, -281), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -280), 0), 100000000, 0, -279), 0), 100000000, 0, -278), 0, (("typing/btype.mli", 130, 4786, 4786), ("typing/btype.mli", 131, 4839, 4872), 0), 0, Tag1 ("Btype", 56)), 0); (("map_type_expr_cstr_args", 1413), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -277), (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -276), 0), 100000000, 0, -275), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "constructor_arguments"), 0, (0)), 100000000, 0, -274), (Tag3 (Tag1 ((Tag2 ("Types")), "constructor_arguments"), 0, (0)), 100000000, 0, -273), 0), 100000000, 0, -272), 0), 100000000, 0, -271), 0, (("typing/btype.mli", 132, 4873, 4873), ("typing/btype.mli", 133, 4930, 4980), 0), 0, Tag1 ("Btype", 57)), 0); Tag1 (("type_iterators", 1414), (0, 0, [[(("it_signature", 948), 0, (Tag1 (0, (Tag3 ((("type_iterators", 1414)), 0, (0)), 100000000, 0, -197), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "signature"), 0, (0)), 100000000, 0, -196), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -195), 0), 100000000, 0, -194), 0), 100000000, 0, -193), (("typing/btype.mli", 137, 5005, 5009), ("typing/btype.mli", 137, 5005, 5059), 0), 0, Tag1 ("Btype", 59)); (("it_signature_item", 949), 0, (Tag1 (0, (Tag3 ((("type_iterators", 1414)), 0, (0)), 100000000, 0, -202), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "signature_item"), 0, (0)), 100000000, 0, -201), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -200), 0), 100000000, 0, -199), 0), 100000000, 0, -198), (("typing/btype.mli", 138, 5060, 5064), ("typing/btype.mli", 138, 5060, 5124), 0), 0, Tag1 ("Btype", 60)); (("it_value_description", 950), 0, (Tag1 (0, (Tag3 ((("type_iterators", 1414)), 0, (0)), 100000000, 0, -207), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "value_description"), 0, (0)), 100000000, 0, -206), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -205), 0), 100000000, 0, -204), 0), 100000000, 0, -203), (("typing/btype.mli", 139, 5125, 5129), ("typing/btype.mli", 139, 5125, 5195), 0), 0, Tag1 ("Btype", 61)); (("it_type_declaration", 951), 0, (Tag1 (0, (Tag3 ((("type_iterators", 1414)), 0, (0)), 100000000, 0, -212), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -211), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -210), 0), 100000000, 0, -209), 0), 100000000, 0, -208), (("typing/btype.mli", 140, 5196, 5200), ("typing/btype.mli", 140, 5196, 5264), 0), 0, Tag1 ("Btype", 62)); (("it_extension_constructor", 952), 0, (Tag1 (0, (Tag3 ((("type_iterators", 1414)), 0, (0)), 100000000, 0, -217), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "extension_constructor"), 0, (0)), 100000000, 0, -216), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -215), 0), 100000000, 0, -214), 0), 100000000, 0, -213), (("typing/btype.mli", 141, 5265, 5269), ("typing/btype.mli", 141, 5265, 5343), 0), 0, Tag1 ("Btype", 63)); (("it_module_declaration", 953), 0, (Tag1 (0, (Tag3 ((("type_iterators", 1414)), 0, (0)), 100000000, 0, -222), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_declaration"), 0, (0)), 100000000, 0, -221), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -220), 0), 100000000, 0, -219), 0), 100000000, 0, -218), (("typing/btype.mli", 142, 5344, 5348), ("typing/btype.mli", 142, 5344, 5416), 0), 0, Tag1 ("Btype", 64)); (("it_modtype_declaration", 954), 0, (Tag1 (0, (Tag3 ((("type_iterators", 1414)), 0, (0)), 100000000, 0, -227), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "modtype_declaration"), 0, (0)), 100000000, 0, -226), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -225), 0), 100000000, 0, -224), 0), 100000000, 0, -223), (("typing/btype.mli", 143, 5417, 5421), ("typing/btype.mli", 143, 5417, 5491), 0), 0, Tag1 ("Btype", 65)); (("it_class_declaration", 955), 0, (Tag1 (0, (Tag3 ((("type_iterators", 1414)), 0, (0)), 100000000, 0, -232), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_declaration"), 0, (0)), 100000000, 0, -231), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -230), 0), 100000000, 0, -229), 0), 100000000, 0, -228), (("typing/btype.mli", 144, 5492, 5496), ("typing/btype.mli", 144, 5492, 5562), 0), 0, Tag1 ("Btype", 66)); (("it_class_type_declaration", 956), 0, (Tag1 (0, (Tag3 ((("type_iterators", 1414)), 0, (0)), 100000000, 0, -237), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_type_declaration"), 0, (0)), 100000000, 0, -236), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -235), 0), 100000000, 0, -234), 0), 100000000, 0, -233), (("typing/btype.mli", 145, 5563, 5567), ("typing/btype.mli", 145, 5563, 5643), 0), 0, Tag1 ("Btype", 67)); (("it_functor_param", 957), 0, (Tag1 (0, (Tag3 ((("type_iterators", 1414)), 0, (0)), 100000000, 0, -242), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "functor_parameter"), 0, (0)), 100000000, 0, -241), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -240), 0), 100000000, 0, -239), 0), 100000000, 0, -238), (("typing/btype.mli", 146, 5644, 5648), ("typing/btype.mli", 146, 5644, 5710), 0), 0, Tag1 ("Btype", 68)); (("it_module_type", 958), 0, (Tag1 (0, (Tag3 ((("type_iterators", 1414)), 0, (0)), 100000000, 0, -247), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -246), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -245), 0), 100000000, 0, -244), 0), 100000000, 0, -243), (("typing/btype.mli", 147, 5711, 5715), ("typing/btype.mli", 147, 5711, 5769), 0), 0, Tag1 ("Btype", 69)); (("it_class_type", 959), 0, (Tag1 (0, (Tag3 ((("type_iterators", 1414)), 0, (0)), 100000000, 0, -252), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_type"), 0, (0)), 100000000, 0, -251), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -250), 0), 100000000, 0, -249), 0), 100000000, 0, -248), (("typing/btype.mli", 148, 5770, 5774), ("typing/btype.mli", 148, 5770, 5826), 0), 0, Tag1 ("Btype", 70)); (("it_type_kind", 960), 0, (Tag1 (0, (Tag3 ((("type_iterators", 1414)), 0, (0)), 100000000, 0, -257), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_decl_kind"), 0, (0)), 100000000, 0, -256), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -255), 0), 100000000, 0, -254), 0), 100000000, 0, -253), (("typing/btype.mli", 149, 5827, 5831), ("typing/btype.mli", 149, 5827, 5886), 0), 0, Tag1 ("Btype", 71)); (("it_do_type_expr", 961), 0, (Tag1 (0, (Tag3 ((("type_iterators", 1414)), 0, (0)), 100000000, 0, -262), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -261), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -260), 0), 100000000, 0, -259), 0), 100000000, 0, -258), (("typing/btype.mli", 150, 5887, 5891), ("typing/btype.mli", 150, 5887, 5944), 0), 0, Tag1 ("Btype", 72)); (("it_type_expr", 962), 0, (Tag1 (0, (Tag3 ((("type_iterators", 1414)), 0, (0)), 100000000, 0, -267), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -266), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -265), 0), 100000000, 0, -264), 0), 100000000, 0, -263), (("typing/btype.mli", 151, 5945, 5949), ("typing/btype.mli", 151, 5945, 5999), 0), 0, Tag1 ("Btype", 73)); (("it_path", 963), 0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -270), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -269), 0), 100000000, 0, -268), (("typing/btype.mli", 152, 6000, 6004), ("typing/btype.mli", 152, 6000, 6028), 0), 0, Tag1 ("Btype", 74))]], 1, 0, 0, 0, 0, 0, (("typing/btype.mli", 136, 4983, 4983), ("typing/btype.mli", 152, 6000, 6030), 0), 0, 0, 0, Tag1 ("Btype", 58)), 1, 0); (("type_iterators", 1415), ((Tag3 ((("type_iterators", 1414)), 0, (0)), 100000000, 0, -192), 0, (("typing/btype.mli", 153, 6031, 6031), ("typing/btype.mli", 153, 6031, 6065), 0), 0, Tag1 ("Btype", 75)), 0); (("unmark_iterators", 1416), ((Tag3 ((("type_iterators", 1414)), 0, (0)), 100000000, 0, -191), 0, (("typing/btype.mli", 156, 6181, 6181), ("typing/btype.mli", 156, 6181, 6217), 0), 0, Tag1 ("Btype", 76)), 0); (("copy_type_desc", 1417), ((Tag1 (Tag1 ("keep_names"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -190)], (0)), 100000000, 0, -189), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -188), (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -187), 0), 100000000, 0, -186), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_desc"), 0, (0)), 100000000, 0, -185), (Tag3 (Tag1 ((Tag2 ("Types")), "type_desc"), 0, (0)), 100000000, 0, -184), 0), 100000000, 0, -183), 0), 100000000, 0, -182), 0), 100000000, 0, -181), 0, (("typing/btype.mli", 159, 6297, 6297), ("typing/btype.mli", 160, 6317, 6391), 0), 0, Tag1 ("Btype", 77)), 0); (("copy_row", 1418), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -180), (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -179), 0), 100000000, 0, -178), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -177), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "row_desc"), 0, (0)), 100000000, 0, -176), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -175), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -174), (Tag3 (Tag1 ((Tag2 ("Types")), "row_desc"), 0, (0)), 100000000, 0, -173), 0), 100000000, 0, -172), 0), 100000000, 0, -171), 0), 100000000, 0, -170), 0), 100000000, 0, -169), 0), 100000000, 0, -168), 0, (("typing/btype.mli", 162, 6420, 6420), ("typing/btype.mli", 164, 6466, 6519), 0), 0, Tag1 ("Btype", 78)), 0); Tag3 (("For_copy", 1419), 0, (Tag1 ([Tag1 (("copy_scope", 1626), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("typing/btype.mli", 168, 6544, 6546), ("typing/btype.mli", 168, 6544, 6561), 0), 0, 0, 0, Tag1 ("Btype", 79)), 1, 0); (("redirect_desc", 1627), ((Tag1 (0, (Tag3 ((("copy_scope", 1626)), 0, (0)), 100000000, 0, -1457), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -1456), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_desc"), 0, (0)), 100000000, 0, -1455), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1454), 0), 100000000, 0, -1453), 0), 100000000, 0, -1452), 0), 100000000, 0, -1451), 0, (("typing/btype.mli", 175, 6820, 6822), ("typing/btype.mli", 175, 6820, 6885), 0), 0, Tag1 ("Btype", 80)), 0); (("with_scope", 1628), ((Tag1 (0, (Tag1 (0, (Tag3 ((("copy_scope", 1626)), 0, (0)), 100000000, 0, -1450), ((("a")), 100000000, 0, -1448), 0), 100000000, 0, -1449), ((("a")), 100000000, 0, -1448), 0), 100000000, 0, -1447), 0, (("typing/btype.mli", 178, 6939, 6941), ("typing/btype.mli", 178, 6939, 6981), 0), 0, Tag1 ("Btype", 81)), 0)]), 0, (("typing/btype.mli", 166, 6521, 6521), ("typing/btype.mli", 181, 7098, 7101), 0), Tag1 ("Btype", 82)), 0, 0); (("lowest_level", 1420), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -167), 0, (("typing/btype.mli", 183, 7103, 7103), ("typing/btype.mli", 183, 7103, 7124), 0), 0, Tag1 ("Btype", 83)), 0); (("not_marked_node", 1421), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -166), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -165), 0), 100000000, 0, -164), 0, (("typing/btype.mli", 186, 7177, 7177), ("typing/btype.mli", 186, 7177, 7215), 0), 0, Tag1 ("Btype", 84)), 0); (("logged_mark_node", 1422), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -163), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -162), 0), 100000000, 0, -161), 0, (("typing/btype.mli", 189, 7276, 7276), ("typing/btype.mli", 189, 7276, 7315), 0), 0, Tag1 ("Btype", 85)), 0); (("try_logged_mark_node", 1423), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -160), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -159), 0), 100000000, 0, -158), 0, (("typing/btype.mli", 191, 7393, 7393), ("typing/btype.mli", 191, 7393, 7436), 0), 0, Tag1 ("Btype", 86)), 0); (("flip_mark_node", 1424), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -157), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -156), 0), 100000000, 0, -155), 0, (("typing/btype.mli", 196, 7600, 7600), ("typing/btype.mli", 196, 7600, 7637), 0), 0, Tag1 ("Btype", 87)), 0); (("try_mark_node", 1425), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -154), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -153), 0), 100000000, 0, -152), 0, (("typing/btype.mli", 200, 7809, 7809), ("typing/btype.mli", 200, 7809, 7845), 0), 0, Tag1 ("Btype", 88)), 0); (("mark_type", 1426), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -151), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -150), 0), 100000000, 0, -149), 0, (("typing/btype.mli", 206, 8091, 8091), ("typing/btype.mli", 206, 8091, 8123), 0), 0, Tag1 ("Btype", 89)), 0); (("mark_type_params", 1427), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -148), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -147), 0), 100000000, 0, -146), 0, (("typing/btype.mli", 208, 8162, 8162), ("typing/btype.mli", 208, 8162, 8201), 0), 0, Tag1 ("Btype", 90)), 0); (("unmark_type", 1428), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -145), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -144), 0), 100000000, 0, -143), 0, (("typing/btype.mli", 211, 8258, 8258), ("typing/btype.mli", 211, 8258, 8292), 0), 0, Tag1 ("Btype", 91)), 0); (("unmark_type_decl", 1429), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -142), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -141), 0), 100000000, 0, -140), 0, (("typing/btype.mli", 212, 8293, 8293), ("typing/btype.mli", 212, 8293, 8339), 0), 0, Tag1 ("Btype", 92)), 0); (("unmark_extension_constructor", 1430), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "extension_constructor"), 0, (0)), 100000000, 0, -139), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -138), 0), 100000000, 0, -137), 0, (("typing/btype.mli", 213, 8340, 8340), ("typing/btype.mli", 213, 8340, 8403), 0), 0, Tag1 ("Btype", 93)), 0); (("unmark_class_type", 1431), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_type"), 0, (0)), 100000000, 0, -136), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -135), 0), 100000000, 0, -134), 0, (("typing/btype.mli", 214, 8404, 8404), ("typing/btype.mli", 214, 8404, 8445), 0), 0, Tag1 ("Btype", 94)), 0); (("unmark_class_signature", 1432), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_signature"), 0, (0)), 100000000, 0, -133), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -132), 0), 100000000, 0, -131), 0, (("typing/btype.mli", 215, 8446, 8446), ("typing/btype.mli", 215, 8446, 8497), 0), 0, Tag1 ("Btype", 95)), 0); (("find_expans", 1433), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "private_flag"), 0, (0)), 100000000, 0, -130), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -129), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "abbrev_memo"), 0, (0)), 100000000, 0, -128), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -127)], (0)), 100000000, 0, -126), 0), 100000000, 0, -125), 0), 100000000, 0, -124), 0), 100000000, 0, -123), 0, (("typing/btype.mli", 220, 8590, 8590), ("typing/btype.mli", 220, 8590, 8664), 0), 0, Tag1 ("Btype", 96)), 0); (("cleanup_abbrev", 1434), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -122), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -121), 0), 100000000, 0, -120), 0, (("typing/btype.mli", 222, 8712, 8712), ("typing/btype.mli", 222, 8712, 8744), 0), 0, Tag1 ("Btype", 97)), 0); (("memorize_abbrev", 1435), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 (Tag1 ((Tag2 ("Types")), "abbrev_memo"), 0, (0)), 100000000, 0, -119)], (0)), 100000000, 0, -118), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "private_flag"), 0, (0)), 100000000, 0, -117), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -116), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -115), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -114), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -113), 0), 100000000, 0, -112), 0), 100000000, 0, -111), 0), 100000000, 0, -110), 0), 100000000, 0, -109), 0), 100000000, 0, -108), 0, (("typing/btype.mli", 226, 8917, 8917), ("typing/btype.mli", 228, 8965, 9029), 0), 0, Tag1 ("Btype", 98)), 0); (("forget_abbrev", 1436), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 (Tag1 ((Tag2 ("Types")), "abbrev_memo"), 0, (0)), 100000000, 0, -107)], (0)), 100000000, 0, -106), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -105), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -104), 0), 100000000, 0, -103), 0), 100000000, 0, -102), 0, (("typing/btype.mli", 230, 9074, 9074), ("typing/btype.mli", 231, 9093, 9134), 0), 0, Tag1 ("Btype", 99)), 0); (("snapshot", 1437), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -101), (Tag3 (Tag1 ((Tag2 ("Types")), "snapshot"), 0, (0)), 100000000, 0, -100), 0), 100000000, 0, -99), 0, (("typing/btype.mli", 236, 9214, 9214), ("typing/btype.mli", 236, 9214, 9244), 0), 0, Tag1 ("Btype", 100)), 0); (("backtrack", 1438), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "snapshot"), 0, (0)), 100000000, 0, -98), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -97), 0), 100000000, 0, -96), 0, (("typing/btype.mli", 237, 9245, 9245), ("typing/btype.mli", 237, 9245, 9276), 0), 0, Tag1 ("Btype", 101)), 0); (("is_optional", 1439), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "arg_label"), 0, (0)), 100000000, 0, -95), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -94), 0), 100000000, 0, -93), 0, (("typing/btype.mli", 244, 9487, 9487), ("typing/btype.mli", 244, 9487, 9522), 0), 0, Tag1 ("Btype", 102)), 0); (("label_name", 1440), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "arg_label"), 0, (0)), 100000000, 0, -92), (Tag3 (Tag1 ((Tag2 ("Asttypes")), "label"), 0, (0)), 100000000, 0, -91), 0), 100000000, 0, -90), 0, (("typing/btype.mli", 245, 9523, 9523), ("typing/btype.mli", 245, 9523, 9558), 0), 0, Tag1 ("Btype", 103)), 0); (("prefixed_label_name", 1441), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "arg_label"), 0, (0)), 100000000, 0, -89), (Tag3 (Tag1 ((Tag2 ("Asttypes")), "label"), 0, (0)), 100000000, 0, -88), 0), 100000000, 0, -87), 0, (("typing/btype.mli", 248, 9637, 9637), ("typing/btype.mli", 248, 9637, 9681), 0), 0, Tag1 ("Btype", 104)), 0); (("extract_label", 1442), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "label"), 0, (0)), 100000000, 0, -86), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "arg_label"), 0, (0)), 100000000, 0, -85); ((("a")), 100000000, 0, -78)]), 100000000, 0, -84)], (0)), 100000000, 0, -83), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "arg_label"), 0, (0)), 100000000, 0, -77); ((("a")), 100000000, 0, -78); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -79); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "arg_label"), 0, (0)), 100000000, 0, -82); ((("a")), 100000000, 0, -78)]), 100000000, 0, -81)], (0)), 100000000, 0, -80)]), 100000000, 0, -76)], (0)), 100000000, 0, -75), 0), 100000000, 0, -74), 0), 100000000, 0, -73), 0, (("typing/btype.mli", 250, 9683, 9683), ("typing/btype.mli", 252, 9741, 9799), 0), 0, Tag1 ("Btype", 105)), 0); (("signature_of_class_type", 1443), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_type"), 0, (0)), 100000000, 0, -72), (Tag3 (Tag1 ((Tag2 ("Types")), "class_signature"), 0, (0)), 100000000, 0, -71), 0), 100000000, 0, -70), 0, (("typing/btype.mli", 261, 10020, 10020), ("typing/btype.mli", 261, 10020, 10079), 0), 0, Tag1 ("Btype", 106)), 0); (("class_body", 1444), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_type"), 0, (0)), 100000000, 0, -69), (Tag3 (Tag1 ((Tag2 ("Types")), "class_type"), 0, (0)), 100000000, 0, -68), 0), 100000000, 0, -67), 0, (("typing/btype.mli", 264, 10142, 10142), ("typing/btype.mli", 264, 10142, 10183), 0), 0, Tag1 ("Btype", 107)), 0); (("scrape_class_type", 1445), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_type"), 0, (0)), 100000000, 0, -66), (Tag3 (Tag1 ((Tag2 ("Types")), "class_type"), 0, (0)), 100000000, 0, -65), 0), 100000000, 0, -64), 0, (("typing/btype.mli", 267, 10229, 10229), ("typing/btype.mli", 267, 10229, 10277), 0), 0, Tag1 ("Btype", 108)), 0); (("class_type_arity", 1446), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_type"), 0, (0)), 100000000, 0, -63), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -62), 0), 100000000, 0, -61), 0, (("typing/btype.mli", 270, 10333, 10333), ("typing/btype.mli", 270, 10333, 10373), 0), 0, Tag1 ("Btype", 109)), 0); (("abbreviate_class_type", 1447), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -60), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -59)], (0)), 100000000, 0, -58), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_type"), 0, (0)), 100000000, 0, -57), (Tag3 (Tag1 ((Tag2 ("Types")), "class_type"), 0, (0)), 100000000, 0, -56), 0), 100000000, 0, -55), 0), 100000000, 0, -54), 0), 100000000, 0, -53), 0, (("typing/btype.mli", 273, 10451, 10451), ("typing/btype.mli", 274, 10479, 10533), 0), 0, Tag1 ("Btype", 110)), 0); (("self_type", 1448), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_type"), 0, (0)), 100000000, 0, -52), (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -51), 0), 100000000, 0, -50), 0, (("typing/btype.mli", 277, 10570, 10570), ("typing/btype.mli", 277, 10570, 10609), 0), 0, Tag1 ("Btype", 111)), 0); (("self_type_row", 1449), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_type"), 0, (0)), 100000000, 0, -49), (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -48), 0), 100000000, 0, -47), 0, (("typing/btype.mli", 280, 10666, 10666), ("typing/btype.mli", 280, 10666, 10709), 0), 0, Tag1 ("Btype", 112)), 0); (("methods", 1450), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_signature"), 0, (0)), 100000000, 0, -46), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -45)], (0)), 100000000, 0, -44), 0), 100000000, 0, -43), 0, (("typing/btype.mli", 283, 10757, 10757), ("typing/btype.mli", 283, 10757, 10801), 0), 0, Tag1 ("Btype", 113)), 0); (("virtual_methods", 1451), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_signature"), 0, (0)), 100000000, 0, -42), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -41)], (0)), 100000000, 0, -40), 0), 100000000, 0, -39), 0, (("typing/btype.mli", 286, 10857, 10857), ("typing/btype.mli", 286, 10857, 10909), 0), 0, Tag1 ("Btype", 114)), 0); (("concrete_methods", 1452), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_signature"), 0, (0)), 100000000, 0, -38), (Tag3 (Tag1 (Tag1 ((Tag2 ("Types")), "MethSet"), "t"), 0, (0)), 100000000, 0, -37), 0), 100000000, 0, -36), 0, (("typing/btype.mli", 289, 10966, 10966), ("typing/btype.mli", 289, 10966, 11017), 0), 0, Tag1 ("Btype", 115)), 0); (("public_methods", 1453), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_signature"), 0, (0)), 100000000, 0, -35), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -34)], (0)), 100000000, 0, -33), 0), 100000000, 0, -32), 0, (("typing/btype.mli", 292, 11072, 11072), ("typing/btype.mli", 292, 11072, 11123), 0), 0, Tag1 ("Btype", 116)), 0); (("instance_vars", 1454), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_signature"), 0, (0)), 100000000, 0, -31), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -30)], (0)), 100000000, 0, -29), 0), 100000000, 0, -28), 0, (("typing/btype.mli", 295, 11182, 11182), ("typing/btype.mli", 295, 11182, 11232), 0), 0, Tag1 ("Btype", 117)), 0); (("virtual_instance_vars", 1455), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_signature"), 0, (0)), 100000000, 0, -27), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -26)], (0)), 100000000, 0, -25), 0), 100000000, 0, -24), 0, (("typing/btype.mli", 298, 11299, 11299), ("typing/btype.mli", 298, 11299, 11357), 0), 0, Tag1 ("Btype", 118)), 0); (("concrete_instance_vars", 1456), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_signature"), 0, (0)), 100000000, 0, -23), (Tag3 (Tag1 (Tag1 ((Tag2 ("Types")), "VarSet"), "t"), 0, (0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0, (("typing/btype.mli", 301, 11425, 11425), ("typing/btype.mli", 301, 11425, 11481), 0), 0, Tag1 ("Btype", 119)), 0); (("method_type", 1457), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "label"), 0, (0)), 100000000, 0, -20), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_signature"), 0, (0)), 100000000, 0, -19), (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -18), 0), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("typing/btype.mli", 305, 11579, 11579), ("typing/btype.mli", 305, 11579, 11634), 0), 0, Tag1 ("Btype", 120)), 0); (("instance_variable_type", 1458), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "label"), 0, (0)), 100000000, 0, -15), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_signature"), 0, (0)), 100000000, 0, -14), (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -13), 0), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("typing/btype.mli", 309, 11744, 11744), ("typing/btype.mli", 309, 11744, 11810), 0), 0, Tag1 ("Btype", 121)), 0); (("print_raw", 1459), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -10), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -9), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8), 0), 100000000, 0, -7), 0), 100000000, 0, -6)], (0)), 100000000, 0, -5), 0, (("typing/btype.mli", 312, 11845, 11845), ("typing/btype.mli", 312, 11845, 11903), 0), 0, Tag1 ("Btype", 122)), 0); (("cstr_type_path", 1460), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "constructor_description"), 0, (0)), 100000000, 0, -4), (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("typing/btype.mli", 316, 11942, 11942), ("typing/btype.mli", 316, 11942, 11996), 0), 0, Tag1 ("Btype", 123)), 0)], "Btype", [("Btype", ("z\012z\142\133\002\232\237\203U\142l\165\022\2209")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Types", ("\177\238\029.\220\006\163!\230\015\006\182\133\155\194\166")); ("Type_immediacy", ("\"\127k\011Q\241\211\138\193;8\142\129\141#\251")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shape", ("\235\127Y\213\025\137=\244\218\181\248N\189\188\216p")); ("Primitive", ("}Shh\162\015|\220A\203\249\232\245G\213\019")); ("Path", ("\012\183\178\025\1298\228*\021r\185\160Y\252\n\026")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Outcometree", ("9\021%\234\211\206\210\004H\165\208\2014\234Q\142")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Identifiable", ("\004F\207\014\158GU\001\184\214\187%/#;\211")); ("Ident", ("\b9;!\187.\220\163(x\b\174\\\223\020\004")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216"))], [(0)])
val cstr_type_path : Types.constructor_description -> Path.t

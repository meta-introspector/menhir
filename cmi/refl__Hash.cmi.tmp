module Hasher : sig type 'a t = 'a -> int end
module Hashers :
  sig
    module T : sig type 'a t = 'a Hasher.t end
    type ('a, 'occurrence) item =
      ('a, 'occurrence) Refl__Tools.Vector(Hasher).item =
        None : ('b, [ `Absent ]) item
      | Some : 'a T.t -> ('a, 'c) item
    type ('sequence, 'occurrences) t =
      ('sequence, 'occurrences) Refl__Tools.Vector(Hasher).t =
        [] : (unit, unit) t
      | (::) : ('head, 'occurrence) item *
          ('tail, 'occurrences) t -> ('head * 'tail,
                                      'occurrence * 'occurrences)
                                     t
    val get :
      ('index, 'sequence, 'value, 'positive, 'occurrences)
      Refl__.Desc.variable -> ('sequence, 'occurrences) t -> 'value T.t
    val make_transfer :
      ('source, 'sub, 'arg) Refl__.Desc.transfer_arguments ->
      ('sequence, 'source) t ->
      (('sequence, 'arg) t, ('sub, [ `Absent ]) Refl__.Desc.eq) result
    type ('arity, 'rec_group, 'kinds) make =
      ('arity, 'rec_group, 'kinds) Refl__Tools.Vector(Hasher).make = {
      f :
        'a 'structure 'ap 'an 'ad 'gadt.
          ('a, 'structure, 'arity, 'rec_group, 'kinds, 'ap, 'an, 'ad, 'gadt)
          Refl__.Desc.desc -> ('arity, 'ad) t -> 'a T.t;
    }
    val make :
      ('arity, 'rec_group, 'kinds) make ->
      ('types, 'structures, 'arity, 'rec_group, 'kinds, 'arguments, 'gadt)
      Refl__.Desc.vector ->
      ('positive, 'negative, 'direct, 'subpositive, 'subnegative, 'subdirect,
       'arguments)
      Refl__.Desc.transfer_skip ->
      ('arity, 'direct) t -> ('types, 'subdirect) t
    type 'presence any =
      'presence Refl__Tools.Vector(Hasher).any =
        None : [ `Absent ] any
      | Some : { item : 'a. 'a T.t; } -> 'b any
    val append :
      'presence any ->
      ('presence, 'directs) Refl__.Desc.presences ->
      ('count, 'directs) Refl__.Desc.length ->
      ('directs, 'direct, 'subdirect) Refl__.Desc.append ->
      ('count, 'types) Refl__.Desc.length ->
      ('types, 'arity, 'subarity) Refl__.Desc.append ->
      ('arity, 'direct) t -> ('subarity, 'subdirect) t
    val to_sequence :
      [ `Present ] any ->
      ('sequence, 'occurrences) t -> 'sequence Refl__.Desc.Sequence(T).t
  end
val hash_pair : int * int -> int
val hash :
  ('a, 'structure, 'arity, 'rec_group,
   [< Refl__.Desc.Kinds.comparable
    > `Array `Attributes `Constr `Exists `Lazy `MapOpaque `Object `Opaque
      `Record `Tuple `Variable `Variant ],
   'positive, 'negative, 'direct, 'gadt)
  Refl__.Desc.desc ->("DEBUG:rule", [Tag3 (("Hasher", 1000), 0, (Tag1 ([Tag1 (("t", 1004), ([((("a")), 100000000, 0, -24)], 1, 0, 1, ((Tag1 (0, ((("a")), 100000000, 0, -24), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -23), 0), 100000000, 0, -22)), [46], [0], 0, 0, (("runtime/hash.ml", 6, 46, 48), ("runtime/hash.ml", 6, 46, 69), 0), 0, 0, 0, Tag1 ("Refl__Hash", 37)), 1, 0)]), 0, (("runtime/hash.ml", 5, 23, 23), ("runtime/hash.ml", 7, 70, 73), 0), Tag1 ("Refl__Hash", 38)), 0, 0); Tag3 (("Hashers", 1001), 0, (Tag1 ([Tag3 (("T", 1005), 0, (Tag1 ([Tag1 (("t", 1015), ([((("a")), 100000000, 0, -155)], 1, 0, 1, ((Tag3 (Tag1 ((("Hasher", 1000)), "t"), [((("a")), 100000000, 0, -155)], (0)), 100000000, 0, -154)), [7], [2], 0, 0, (("runtime/desc.ml", 45, 1724, 1726), ("runtime/desc.ml", 45, 1724, 1735), 0), 0, 0, 0, Tag1 ("Refl__Desc", 27)), 1, 0)]), 0, (("runtime/tools.ml", 277, 8782, 8797), ("runtime/tools.ml", 277, 8782, 8798), 0), Tag1 ("Refl__Tools", 652)), 0, 0); Tag1 (("item", 1006), ([((("a")), 100000000, 0, -144); ((("occurrence")), 100000000, 0, -145)], 2, Tag1 ([(("None", 804), (0), ((Tag3 ((("item", 1006)), [((0), 100000000, 0, -147); (Tag8 (([("Absent", (0))], (0, 100000000, 0, -149), 1, 0, 0)), 100000000, 0, -148)], (0)), 100000000, 0, -146)), (("runtime/tools.ml", 226, 7216, 7220), ("runtime/tools.ml", 226, 7216, 7248), 0), 0, Tag1 ("Refl__Tools", 629)); (("Some", 805), ([(Tag3 (Tag1 ((("T", 1005)), "t"), [((("a")), 100000000, 0, -151)], (0)), 100000000, 0, -153)]), ((Tag3 ((("item", 1006)), [((("a")), 100000000, 0, -151); ((0), 100000000, 0, -152)], (0)), 100000000, 0, -150)), (("runtime/tools.ml", 227, 7249, 7253), ("runtime/tools.ml", 227, 7249, 7284), 0), 0, Tag1 ("Refl__Tools", 630))], 0), 1, ((Tag3 (Tag1 (Tag2 (Tag1 ((Tag2 ("Refl__Tools")), "Vector"), (("Hasher", 1000))), "item"), [((("a")), 100000000, 0, -144); ((("occurrence")), 100000000, 0, -145)], (0)), 100000000, 0, -143)), [15; 63], [0; 0], 0, 0, (("runtime/tools.ml", 225, 7184, 7186), ("runtime/tools.ml", 227, 7249, 7284), 0), 0, 0, 0, Tag1 ("Refl__Tools", 628)), 1, 0); Tag1 (("t", 1007), ([((("sequence")), 100000000, 0, -129); ((("occurrences")), 100000000, 0, -130)], 2, Tag1 ([(("[]", 808), (0), ((Tag3 ((("t", 1007)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -132); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -133)], (0)), 100000000, 0, -131)), (("runtime/tools.ml", 230, 7323, 7327), ("runtime/tools.ml", 230, 7323, 7348), 0), 0, Tag1 ("Refl__Tools", 632)); (("::", 809), ([(Tag3 ((("item", 1006)), [((("head")), 100000000, 0, -136); ((("occurrence")), 100000000, 0, -139)], (0)), 100000000, 0, -141); (Tag3 ((("t", 1007)), [((("tail")), 100000000, 0, -137); ((("occurrences")), 100000000, 0, -140)], (0)), 100000000, 0, -142)]), ((Tag3 ((("t", 1007)), [(Tag2 ([((("head")), 100000000, 0, -136); ((("tail")), 100000000, 0, -137)]), 100000000, 0, -135); (Tag2 ([((("occurrence")), 100000000, 0, -139); ((("occurrences")), 100000000, 0, -140)]), 100000000, 0, -138)], (0)), 100000000, 0, -134)), (("runtime/tools.ml", 231, 7349, 7353), ("runtime/tools.ml", 232, 7417, 7470), 0), 0, Tag1 ("Refl__Tools", 633))], 0), 1, ((Tag3 (Tag1 (Tag2 (Tag1 ((Tag2 ("Refl__Tools")), "Vector"), (("Hasher", 1000))), "t"), [((("sequence")), 100000000, 0, -129); ((("occurrences")), 100000000, 0, -130)], (0)), 100000000, 0, -128)), [63; 63], [0; 0], 0, 0, (("runtime/tools.ml", 229, 7286, 7288), ("runtime/tools.ml", 232, 7417, 7470), 0), 0, 0, 0, Tag1 ("Refl__Tools", 631)), 1, 0); (("get", 1008), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "variable"), [((("index")), 100000000, 0, -126); ((("sequence")), 100000000, 0, -123); ((("value")), 100000000, 0, -121); ((("positive")), 100000000, 0, -127); ((("occurrences")), 100000000, 0, -124)], (0)), 100000000, 0, -125), (Tag1 (0, (Tag3 ((("t", 1007)), [((("sequence")), 100000000, 0, -123); ((("occurrences")), 100000000, 0, -124)], (0)), 100000000, 0, -122), (Tag3 (Tag1 ((("T", 1005)), "t"), [((("value")), 100000000, 0, -121)], (0)), 100000000, 0, -120), 0), 100000000, 0, -119), 0), 100000000, 0, -118), 0, (("runtime/tools.ml", 234, 7472, 7474), ("runtime/tools.ml", 236, 7553, 7600), 0), 0, Tag1 ("Refl__Tools", 634)), 0); (("make_transfer", 1009), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "transfer_arguments"), [((("source")), 100000000, 0, -116); ((("sub")), 100000000, 0, -112); ((("arg")), 100000000, 0, -110)], (0)), 100000000, 0, -117), (Tag1 (0, (Tag3 ((("t", 1007)), [((("sequence")), 100000000, 0, -109); ((("source")), 100000000, 0, -116)], (0)), 100000000, 0, -115), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((("t", 1007)), [((("sequence")), 100000000, 0, -109); ((("arg")), 100000000, 0, -110)], (0)), 100000000, 0, -108); (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "eq"), [((("sub")), 100000000, 0, -112); (Tag8 (([("Absent", (0))], (0, 100000000, 0, -114), 1, 0, 0)), 100000000, 0, -113)], (0)), 100000000, 0, -111)], (0)), 100000000, 0, -107), 0), 100000000, 0, -106), 0), 100000000, 0, -105), 0, (("runtime/tools.ml", 238, 7602, 7604), ("runtime/tools.ml", 240, 7698, 7752), 0), 0, Tag1 ("Refl__Tools", 635)), 0); Tag1 (("make", 1010), ([((("arity")), 100000000, 0, -90); ((("rec_group")), 100000000, 0, -91); ((("kinds")), 100000000, 0, -92)], 3, [[(("f", 813), 0, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [(Tag9 (("a")), 100000000, 0, -94); (Tag9 (("structure")), 100000000, 0, -95); ((("arity")), 100000000, 0, -90); ((("rec_group")), 100000000, 0, -91); ((("kinds")), 100000000, 0, -92); (Tag9 (("ap")), 100000000, 0, -96); (Tag9 (("an")), 100000000, 0, -97); (Tag9 (("ad")), 100000000, 0, -98); (Tag9 (("gadt")), 100000000, 0, -99)], (0)), 100000000, 0, -104), (Tag1 (0, (Tag3 ((("t", 1007)), [((("arity")), 100000000, 0, -90); (Tag9 (("ad")), 100000000, 0, -98)], (0)), 100000000, 0, -103), (Tag3 (Tag1 ((("T", 1005)), "t"), [(Tag9 (("a")), 100000000, 0, -94)], (0)), 100000000, 0, -102), 0), 100000000, 0, -101), 0), 100000000, 0, -100), [(Tag9 (("a")), 100000000, 0, -94); (Tag9 (("structure")), 100000000, 0, -95); (Tag9 (("ap")), 100000000, 0, -96); (Tag9 (("an")), 100000000, 0, -97); (Tag9 (("ad")), 100000000, 0, -98); (Tag9 (("gadt")), 100000000, 0, -99)]), 100000000, 0, -93), (("runtime/tools.ml", 243, 7799, 7805), ("runtime/tools.ml", 245, 7918, 7962), 0), 0, Tag1 ("Refl__Tools", 637))]], 1, ((Tag3 (Tag1 (Tag2 (Tag1 ((Tag2 ("Refl__Tools")), "Vector"), (("Hasher", 1000))), "make"), [((("arity")), 100000000, 0, -90); ((("rec_group")), 100000000, 0, -91); ((("kinds")), 100000000, 0, -92)], (0)), 100000000, 0, -89)), [63; 15; 63], [0; 0; 0], 0, 0, (("runtime/tools.ml", 242, 7754, 7756), ("runtime/tools.ml", 246, 7963, 7968), 0), 0, 0, 1, Tag1 ("Refl__Tools", 636)), 1, 0); (("make", 1011), ((Tag1 (0, (Tag3 ((("make", 1010)), [((("arity")), 100000000, 0, -75); ((("rec_group")), 100000000, 0, -85); ((("kinds")), 100000000, 0, -86)], (0)), 100000000, 0, -88), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "vector"), [((("types")), 100000000, 0, -72); ((("structures")), 100000000, 0, -84); ((("arity")), 100000000, 0, -75); ((("rec_group")), 100000000, 0, -85); ((("kinds")), 100000000, 0, -86); ((("arguments")), 100000000, 0, -82); ((("gadt")), 100000000, 0, -87)], (0)), 100000000, 0, -83), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "transfer_skip"), [((("positive")), 100000000, 0, -78); ((("negative")), 100000000, 0, -79); ((("direct")), 100000000, 0, -76); ((("subpositive")), 100000000, 0, -80); ((("subnegative")), 100000000, 0, -81); ((("subdirect")), 100000000, 0, -73); ((("arguments")), 100000000, 0, -82)], (0)), 100000000, 0, -77), (Tag1 (0, (Tag3 ((("t", 1007)), [((("arity")), 100000000, 0, -75); ((("direct")), 100000000, 0, -76)], (0)), 100000000, 0, -74), (Tag3 ((("t", 1007)), [((("types")), 100000000, 0, -72); ((("subdirect")), 100000000, 0, -73)], (0)), 100000000, 0, -71), 0), 100000000, 0, -70), 0), 100000000, 0, -69), 0), 100000000, 0, -68), 0), 100000000, 0, -67), 0, (("runtime/tools.ml", 248, 7970, 7972), ("runtime/tools.ml", 255, 8251, 8277), 0), 0, Tag1 ("Refl__Tools", 638)), 0); Tag1 (("any", 1012), ([((("presence")), 100000000, 0, -58)], 1, Tag1 ([(("None", 816), (0), ((Tag3 ((("any", 1012)), [(Tag8 (([("Absent", (0))], (0, 100000000, 0, -61), 1, 0, 0)), 100000000, 0, -60)], (0)), 100000000, 0, -59)), (("runtime/tools.ml", 258, 8302, 8306), ("runtime/tools.ml", 258, 8302, 8328), 0), 0, Tag1 ("Refl__Tools", 640)); (("Some", 817), Tag1 ([(("item", 818), 0, (Tag10 ((Tag3 (Tag1 ((("T", 1005)), "t"), [(Tag9 (("a")), 100000000, 0, -65)], (0)), 100000000, 0, -66), [(Tag9 (("a")), 100000000, 0, -65)]), 100000000, 0, -64), (("runtime/tools.ml", 260, 8344, 8354), ("runtime/tools.ml", 260, 8344, 8373), 0), 0, Tag1 ("Refl__Tools", 641))]), ((Tag3 ((("any", 1012)), [((0), 100000000, 0, -63)], (0)), 100000000, 0, -62)), (("runtime/tools.ml", 259, 8329, 8333), ("runtime/tools.ml", 261, 8374, 8392), 0), 0, Tag1 ("Refl__Tools", 642))], 0), 1, ((Tag3 (Tag1 (Tag2 (Tag1 ((Tag2 ("Refl__Tools")), "Vector"), (("Hasher", 1000))), "any"), [((("presence")), 100000000, 0, -58)], (0)), 100000000, 0, -57)), [63], [0], 0, 0, (("runtime/tools.ml", 257, 8279, 8281), ("runtime/tools.ml", 261, 8374, 8392), 0), 0, 0, 0, Tag1 ("Refl__Tools", 639)), 1, 0); (("append", 1013), ((Tag1 (0, (Tag3 ((("any", 1012)), [((("presence")), 100000000, 0, -55)], (0)), 100000000, 0, -56), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "presences"), [((("presence")), 100000000, 0, -55); ((("directs")), 100000000, 0, -52)], (0)), 100000000, 0, -54), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "length"), [((("count")), 100000000, 0, -50); ((("directs")), 100000000, 0, -52)], (0)), 100000000, 0, -53), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "append"), [((("directs")), 100000000, 0, -52); ((("direct")), 100000000, 0, -46); ((("subdirect")), 100000000, 0, -43)], (0)), 100000000, 0, -51), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "length"), [((("count")), 100000000, 0, -50); ((("types")), 100000000, 0, -48)], (0)), 100000000, 0, -49), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "append"), [((("types")), 100000000, 0, -48); ((("arity")), 100000000, 0, -45); ((("subarity")), 100000000, 0, -42)], (0)), 100000000, 0, -47), (Tag1 (0, (Tag3 ((("t", 1007)), [((("arity")), 100000000, 0, -45); ((("direct")), 100000000, 0, -46)], (0)), 100000000, 0, -44), (Tag3 ((("t", 1007)), [((("subarity")), 100000000, 0, -42); ((("subdirect")), 100000000, 0, -43)], (0)), 100000000, 0, -41), 0), 100000000, 0, -40), 0), 100000000, 0, -39), 0), 100000000, 0, -38), 0), 100000000, 0, -37), 0), 100000000, 0, -36), 0), 100000000, 0, -35), 0), 100000000, 0, -34), 0, (("runtime/tools.ml", 263, 8394, 8396), ("runtime/tools.ml", 271, 8649, 8678), 0), 0, Tag1 ("Refl__Tools", 649)), 0); (("to_sequence", 1014), ((Tag1 (0, (Tag3 ((("any", 1012)), [(Tag8 (([("Present", (0))], (0, 100000000, 0, -33), 1, 0, 0)), 100000000, 0, -32)], (0)), 100000000, 0, -31), (Tag1 (0, (Tag3 ((("t", 1007)), [((("sequence")), 100000000, 0, -28); ((("occurrences")), 100000000, 0, -30)], (0)), 100000000, 0, -29), (Tag3 (Tag1 (Tag2 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "Sequence"), (("T", 1005))), "t"), [((("sequence")), 100000000, 0, -28)], (0)), 100000000, 0, -27), 0), 100000000, 0, -26), 0), 100000000, 0, -25), 0, (("runtime/tools.ml", 273, 8680, 8682), ("runtime/tools.ml", 274, 8700, 8776), 0), 0, Tag1 ("Refl__Tools", 650)), 0)]), 0, (("runtime/hash.ml", 9, 75, 75), ("runtime/hash.ml", 9, 75, 107), 0), Tag1 ("Refl__Hash", 76)), 0, 0); (("hash_pair", 1002), ((Tag1 (0, (Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -20); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -21)]), 100000000, 0, -19), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("runtime/hash.ml", 11, 109, 113), ("runtime/hash.ml", 11, 109, 122), 0), 0, Tag1 ("Refl__Hash", 77)), 0); (("hash", 1003), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [((("a")), 100000000, 0, -5); ((("structure")), 100000000, 0, -10); ((("arity")), 100000000, 0, -7); ((("rec_group")), 100000000, 0, -11); (Tag8 (([("Absent", Tag1 (1, 0, 0, (1))); ("Array", (0)); ("Attributes", (0)); ("Bool", Tag1 (1, 0, 0, (1))); ("Bytes", Tag1 (1, 0, 0, (1))); ("Char", Tag1 (1, 0, 0, (1))); ("Constr", (0)); ("Exists", (0)); ("Float", Tag1 (1, 0, 0, (1))); ("GADT", Tag1 (1, 0, 0, (1))); ("Int", Tag1 (1, 0, 0, (1))); ("Int32", Tag1 (1, 0, 0, (1))); ("Int64", Tag1 (1, 0, 0, (1))); ("Lazy", (0)); ("MapOpaque", (0)); ("Name", Tag1 (1, 0, 0, (1))); ("Nativeint", Tag1 (1, 0, 0, (1))); ("Object", (0)); ("Opaque", (0)); ("Record", (0)); ("String", Tag1 (1, 0, 0, (1))); ("Tuple", (0)); ("Unit", Tag1 (1, 0, 0, (1))); ("Variable", (0)); ("Variant", (0))], ((0), 100000000, 0, -13), 1, 0, ([Tag1 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "Kinds"), "comparable")]))), 100000000, 0, -12); ((("positive")), 100000000, 0, -14); ((("negative")), 100000000, 0, -15); ((("direct")), 100000000, 0, -8); ((("gadt")), 100000000, 0, -16)], (0)), 100000000, 0, -9), (Tag1 (0, (Tag3 (Tag1 ((("Hashers", 1001)), "t"), [((("arity")), 100000000, 0, -7); ((("direct")), 100000000, 0, -8)], (0)), 100000000, 0, -6), (Tag3 (Tag1 ((("Hasher", 1000)), "t"), [((("a")), 100000000, 0, -5)], (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("runtime/hash.ml", 13, 158, 166), ("runtime/hash.ml", 13, 158, 170), 0), 0, Tag1 ("Refl__Hash", 79)), 0)], "Refl__Hash", [("Refl__Hash", ("\237\225\164E\019!w\167RGv\156\135\198\229g")); ("Traverse__Values", ("}\239\001\023\024&\227\167Sl\002\148\026\190\180\025")); ("Traverse__Modules", ("=\175q\026#\242\139\b\202\252\139\207\195\170\254\202")); ("Traverse__Interface", ("\252\146\219\195\199\167\234\143+\145l\200\254\244s}")); ("Traverse__", ("y\220\011\221C%Ob7%t,\252N21")); ("Traverse", ("\019\209\190\177II\1552 \b\174\006\b\1643\152")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Stdcompat__stdlib_s", ("?\143\027\238\145\138\139e`\216P\248\156\178=\206")); ("Stdcompat__init", ("r\254q\255\217]\232\239'\192d\165\222\016\157\133")); ("Stdcompat", ("\139\1989\181:\137\230\132\240\223\206\210Y\135S\\")); ("Refl__Tools", ("i\215\207\166d\225\190DU\241\194\224\137P\158e")); ("Refl__Desc", ("\221\150mt\149.2\132\189\244\007\164&\203\225\172")); ("Refl__", ("i\003\196\150\161\159\229g\157\181\149\015g%\221\240")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
 ('arity, 'direct) Hashers.t -> 'a Hasher.t

type out_name = { mutable printed_name : string; }
type out_ident =
    Oide_apply of out_ident * out_ident
  | Oide_dot of out_ident * string
  | Oide_ident of out_name
type out_string = Ostr_string | Ostr_bytes
type out_attribute = { oattr_name : string; }
type out_value =
    Oval_array of out_value list
  | Oval_char of char
  | Oval_constr of out_ident * out_value list
  | Oval_ellipsis
  | Oval_float of float
  | Oval_int of int
  | Oval_int32 of int32
  | Oval_int64 of int64
  | Oval_nativeint of nativeint
  | Oval_list of out_value list
  | Oval_printer of (Format.formatter -> unit)
  | Oval_record of (out_ident * out_value) list
  | Oval_string of string * int * out_string
  | Oval_stuff of string
  | Oval_tuple of out_value list
  | Oval_variant of string * out_value option
type out_type_param = string * (Asttypes.variance * Asttypes.injectivity)
type out_type =
    Otyp_abstract
  | Otyp_open
  | Otyp_alias of { non_gen : bool; aliased : out_type; alias : string; }
  | Otyp_arrow of string * out_type * out_type
  | Otyp_class of out_ident * out_type list
  | Otyp_constr of out_ident * out_type list
  | Otyp_manifest of out_type * out_type
  | Otyp_object of { fields : (string * out_type) list; open_row : bool; }
  | Otyp_record of (string * bool * out_type) list
  | Otyp_stuff of string
  | Otyp_sum of out_constructor list
  | Otyp_tuple of out_type list
  | Otyp_var of bool * string
  | Otyp_variant of out_variant * bool * string list option
  | Otyp_poly of string list * out_type
  | Otyp_module of out_ident * (string * out_type) list
  | Otyp_attribute of out_type * out_attribute
and out_constructor = {
  ocstr_name : string;
  ocstr_args : out_type list;
  ocstr_return_type : out_type option;
}
and out_variant =
    Ovar_fields of (string * bool * out_type list) list
  | Ovar_typ of out_type
type out_class_type =
    Octy_constr of out_ident * out_type list
  | Octy_arrow of string * out_type * out_class_type
  | Octy_signature of out_type option * out_class_sig_item list
and out_class_sig_item =
    Ocsg_constraint of out_type * out_type
  | Ocsg_method of string * bool * bool * out_type
  | Ocsg_value of string * bool * bool * out_type
type out_module_type =
    Omty_abstract
  | Omty_functor of (string option * out_module_type) option *
      out_module_type
  | Omty_ident of out_ident
  | Omty_signature of out_sig_item list
  | Omty_alias of out_ident
and out_sig_item =
    Osig_class of bool * string * out_type_param list * out_class_type *
      out_rec_status
  | Osig_class_type of bool * string * out_type_param list * out_class_type *
      out_rec_status
  | Osig_typext of out_extension_constructor * out_ext_status
  | Osig_modtype of string * out_module_type
  | Osig_module of string * out_module_type * out_rec_status
  | Osig_type of out_type_decl * out_rec_status
  | Osig_value of out_val_decl
  | Osig_ellipsis
and out_type_decl = {
  otype_name : string;
  otype_params : out_type_param list;
  otype_type : out_type;
  otype_private : Asttypes.private_flag;
  otype_immediate : Type_immediacy.t;
  otype_unboxed : bool;
  otype_cstrs : (out_type * out_type) list;
}
and out_extension_constructor = {
  oext_name : string;
  oext_type_name : string;
  oext_type_params : string list;
  oext_args : out_type list;
  oext_ret_type : out_type option;
  oext_private : Asttypes.private_flag;
}
and out_type_extension = {
  otyext_name : string;
  otyext_params : string list;
  otyext_constructors : out_constructor list;
  otyext_private : Asttypes.private_flag;
}
and out_val_decl = {
  oval_name : string;
  oval_type : out_type;
  oval_prims : string list;
  oval_attributes : out_attribute list;
}
and out_rec_status = Orec_not | Orec_first | Orec_next
and out_ext_status = Oext_first | Oext_next | Oext_exception
type out_phrase =
    Ophr_eval of out_value * out_type
  | Ophr_signature of (out_sig_item * out_value option) list
  | ("DEBUG:rule", [Tag1 (("out_name", 717), (0, 0, [[(("printed_name", 270), 1, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -194), (("typing/outcometree.mli", 27, 1551, 1569), ("typing/outcometree.mli", 27, 1551, 1597), 0), 0, Tag1 ("Outcometree", 1))]], 1, 0, 0, 0, 0, 0, (("typing/outcometree.mli", 27, 1551, 1551), ("typing/outcometree.mli", 27, 1551, 1599), 0), 0, 0, 0, Tag1 ("Outcometree", 0)), 1, 0); Tag1 (("out_ident", 718), (0, 0, Tag1 ([(("Oide_apply", 272), ([(Tag3 ((("out_ident", 718)), 0, (0)), 100000000, 0, -189); (Tag3 ((("out_ident", 718)), 0, (0)), 100000000, 0, -190)]), 0, (("typing/outcometree.mli", 30, 1618, 1620), ("typing/outcometree.mli", 30, 1618, 1657), 0), 0, Tag1 ("Outcometree", 3)); (("Oide_dot", 273), ([(Tag3 ((("out_ident", 718)), 0, (0)), 100000000, 0, -191); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -192)]), 0, (("typing/outcometree.mli", 31, 1658, 1660), ("typing/outcometree.mli", 31, 1658, 1692), 0), 0, Tag1 ("Outcometree", 4)); (("Oide_ident", 274), ([(Tag3 ((("out_name", 717)), 0, (0)), 100000000, 0, -193)]), 0, (("typing/outcometree.mli", 32, 1693, 1695), ("typing/outcometree.mli", 32, 1693, 1719), 0), 0, Tag1 ("Outcometree", 5))], 0), 1, 0, 0, 0, 0, 0, (("typing/outcometree.mli", 29, 1601, 1601), ("typing/outcometree.mli", 32, 1693, 1719), 0), 0, 0, 0, Tag1 ("Outcometree", 2)), 1, 0); Tag1 (("out_string", 719), (0, 0, Tag1 ([(("Ostr_string", 276), (0), 0, (("typing/outcometree.mli", 35, 1739, 1741), ("typing/outcometree.mli", 35, 1739, 1754), 0), 0, Tag1 ("Outcometree", 7)); (("Ostr_bytes", 277), (0), 0, (("typing/outcometree.mli", 36, 1755, 1757), ("typing/outcometree.mli", 36, 1755, 1769), 0), 0, Tag1 ("Outcometree", 8))], 0), 1, 0, 0, 0, 0, 0, (("typing/outcometree.mli", 34, 1721, 1721), ("typing/outcometree.mli", 36, 1755, 1769), 0), 0, 1, 0, Tag1 ("Outcometree", 6)), 1, 0); Tag1 (("out_attribute", 720), (0, 0, [[(("oattr_name", 279), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -188), (("typing/outcometree.mli", 39, 1792, 1796), ("typing/outcometree.mli", 39, 1792, 1814), 0), 0, Tag1 ("Outcometree", 10))]], 1, 0, 0, 0, 0, 0, (("typing/outcometree.mli", 38, 1771, 1771), ("typing/outcometree.mli", 39, 1792, 1816), 0), 0, 0, 1, Tag1 ("Outcometree", 9)), 1, 0); Tag1 (("out_value", 721), (0, 0, Tag1 ([(("Oval_array", 281), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("out_value", 721)), 0, (0)), 100000000, 0, -160)], (0)), 100000000, 0, -159)]), 0, (("typing/outcometree.mli", 42, 1835, 1837), ("typing/outcometree.mli", 42, 1835, 1867), 0), 0, Tag1 ("Outcometree", 12)); (("Oval_char", 282), ([(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -161)]), 0, (("typing/outcometree.mli", 43, 1868, 1870), ("typing/outcometree.mli", 43, 1868, 1889), 0), 0, Tag1 ("Outcometree", 13)); (("Oval_constr", 283), ([(Tag3 ((("out_ident", 718)), 0, (0)), 100000000, 0, -162); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("out_value", 721)), 0, (0)), 100000000, 0, -164)], (0)), 100000000, 0, -163)]), 0, (("typing/outcometree.mli", 44, 1890, 1892), ("typing/outcometree.mli", 44, 1890, 1935), 0), 0, Tag1 ("Outcometree", 14)); (("Oval_ellipsis", 284), (0), 0, (("typing/outcometree.mli", 45, 1936, 1938), ("typing/outcometree.mli", 45, 1936, 1953), 0), 0, Tag1 ("Outcometree", 15)); (("Oval_float", 285), ([(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -165)]), 0, (("typing/outcometree.mli", 46, 1954, 1956), ("typing/outcometree.mli", 46, 1954, 1977), 0), 0, Tag1 ("Outcometree", 16)); (("Oval_int", 286), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -166)]), 0, (("typing/outcometree.mli", 47, 1978, 1980), ("typing/outcometree.mli", 47, 1978, 1997), 0), 0, Tag1 ("Outcometree", 17)); (("Oval_int32", 287), ([(Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -167)]), 0, (("typing/outcometree.mli", 48, 1998, 2000), ("typing/outcometree.mli", 48, 1998, 2021), 0), 0, Tag1 ("Outcometree", 18)); (("Oval_int64", 288), ([(Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -168)]), 0, (("typing/outcometree.mli", 49, 2022, 2024), ("typing/outcometree.mli", 49, 2022, 2045), 0), 0, Tag1 ("Outcometree", 19)); (("Oval_nativeint", 289), ([(Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -169)]), 0, (("typing/outcometree.mli", 50, 2046, 2048), ("typing/outcometree.mli", 50, 2046, 2077), 0), 0, Tag1 ("Outcometree", 20)); (("Oval_list", 290), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("out_value", 721)), 0, (0)), 100000000, 0, -171)], (0)), 100000000, 0, -170)]), 0, (("typing/outcometree.mli", 51, 2078, 2080), ("typing/outcometree.mli", 51, 2078, 2109), 0), 0, Tag1 ("Outcometree", 21)); (("Oval_printer", 291), ([(Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -174), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -173), 0), 100000000, 0, -172)]), 0, (("typing/outcometree.mli", 52, 2110, 2112), ("typing/outcometree.mli", 52, 2110, 2156), 0), 0, Tag1 ("Outcometree", 22)); (("Oval_record", 448), ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("out_ident", 718)), 0, (0)), 100000000, 0, -177); (Tag3 ((("out_value", 721)), 0, (0)), 100000000, 0, -178)]), 100000000, 0, -176)], (0)), 100000000, 0, -175)]), 0, (("typing/outcometree.mli", 53, 2157, 2159), ("typing/outcometree.mli", 53, 2157, 2204), 0), 0, Tag1 ("Outcometree", 23)); (("Oval_string", 449), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -179); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -180); (Tag3 ((("out_string", 719)), 0, (0)), 100000000, 0, -181)]), 0, (("typing/outcometree.mli", 54, 2205, 2207), ("typing/outcometree.mli", 54, 2205, 2249), 0), 0, Tag1 ("Outcometree", 24)); (("Oval_stuff", 450), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -182)]), 0, (("typing/outcometree.mli", 55, 2284, 2286), ("typing/outcometree.mli", 55, 2284, 2308), 0), 0, Tag1 ("Outcometree", 25)); (("Oval_tuple", 451), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("out_value", 721)), 0, (0)), 100000000, 0, -184)], (0)), 100000000, 0, -183)]), 0, (("typing/outcometree.mli", 56, 2309, 2311), ("typing/outcometree.mli", 56, 2309, 2341), 0), 0, Tag1 ("Outcometree", 26)); (("Oval_variant", 452), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -185); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("out_value", 721)), 0, (0)), 100000000, 0, -187)], (0)), 100000000, 0, -186)]), 0, (("typing/outcometree.mli", 57, 2342, 2344), ("typing/outcometree.mli", 57, 2342, 2387), 0), 0, Tag1 ("Outcometree", 27))], 0), 1, 0, 0, 0, 0, 0, (("typing/outcometree.mli", 41, 1818, 1818), ("typing/outcometree.mli", 57, 2342, 2387), 0), 0, 0, 0, Tag1 ("Outcometree", 11)), 1, 0); Tag1 (("out_type_param", 722), (0, 0, 0, 1, ((Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -155); (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "variance"), 0, (0)), 100000000, 0, -157); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "injectivity"), 0, (0)), 100000000, 0, -158)]), 100000000, 0, -156)]), 100000000, 0, -154)), 0, 0, 0, 0, (("typing/outcometree.mli", 59, 2389, 2389), ("typing/outcometree.mli", 59, 2389, 2462), 0), 0, 0, 0, Tag1 ("Outcometree", 28)), 1, 0); Tag1 (("out_type", 723), (0, 0, Tag1 ([(("Otyp_abstract", 626), (0), 0, (("typing/outcometree.mli", 62, 2480, 2482), ("typing/outcometree.mli", 62, 2480, 2497), 0), 0, Tag1 ("Outcometree", 32)); (("Otyp_open", 627), (0), 0, (("typing/outcometree.mli", 63, 2498, 2500), ("typing/outcometree.mli", 63, 2498, 2511), 0), 0, Tag1 ("Outcometree", 33)); (("Otyp_alias", 628), Tag1 ([(("non_gen", 629), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -108), (("typing/outcometree.mli", 64, 2512, 2531), ("typing/outcometree.mli", 64, 2512, 2544), 0), 0, Tag1 ("Outcometree", 34)); (("aliased", 630), 0, (Tag3 ((("out_type", 723)), 0, (0)), 100000000, 0, -109), (("typing/outcometree.mli", 64, 2512, 2545), ("typing/outcometree.mli", 64, 2512, 2562), 0), 0, Tag1 ("Outcometree", 35)); (("alias", 631), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -110), (("typing/outcometree.mli", 64, 2512, 2563), ("typing/outcometree.mli", 64, 2512, 2575), 0), 0, Tag1 ("Outcometree", 36))]), 0, (("typing/outcometree.mli", 64, 2512, 2514), ("typing/outcometree.mli", 64, 2512, 2576), 0), 0, Tag1 ("Outcometree", 37)); (("Otyp_arrow", 632), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -111); (Tag3 ((("out_type", 723)), 0, (0)), 100000000, 0, -112); (Tag3 ((("out_type", 723)), 0, (0)), 100000000, 0, -113)]), 0, (("typing/outcometree.mli", 65, 2577, 2579), ("typing/outcometree.mli", 65, 2577, 2623), 0), 0, Tag1 ("Outcometree", 38)); (("Otyp_class", 633), ([(Tag3 ((("out_ident", 718)), 0, (0)), 100000000, 0, -114); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("out_type", 723)), 0, (0)), 100000000, 0, -116)], (0)), 100000000, 0, -115)]), 0, (("typing/outcometree.mli", 66, 2624, 2626), ("typing/outcometree.mli", 66, 2624, 2667), 0), 0, Tag1 ("Outcometree", 39)); (("Otyp_constr", 634), ([(Tag3 ((("out_ident", 718)), 0, (0)), 100000000, 0, -117); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("out_type", 723)), 0, (0)), 100000000, 0, -119)], (0)), 100000000, 0, -118)]), 0, (("typing/outcometree.mli", 67, 2668, 2670), ("typing/outcometree.mli", 67, 2668, 2712), 0), 0, Tag1 ("Outcometree", 40)); (("Otyp_manifest", 635), ([(Tag3 ((("out_type", 723)), 0, (0)), 100000000, 0, -120); (Tag3 ((("out_type", 723)), 0, (0)), 100000000, 0, -121)]), 0, (("typing/outcometree.mli", 68, 2713, 2715), ("typing/outcometree.mli", 68, 2713, 2753), 0), 0, Tag1 ("Outcometree", 41)); (("Otyp_object", 636), Tag1 ([(("fields", 637), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -124); (Tag3 ((("out_type", 723)), 0, (0)), 100000000, 0, -125)]), 100000000, 0, -123)], (0)), 100000000, 0, -122), (("typing/outcometree.mli", 69, 2754, 2775), ("typing/outcometree.mli", 69, 2754, 2808), 0), 0, Tag1 ("Outcometree", 42)); (("open_row", 638), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -126), (("typing/outcometree.mli", 69, 2754, 2809), ("typing/outcometree.mli", 69, 2754, 2822), 0), 0, Tag1 ("Outcometree", 43))]), 0, (("typing/outcometree.mli", 69, 2754, 2756), ("typing/outcometree.mli", 69, 2754, 2823), 0), 0, Tag1 ("Outcometree", 44)); (("Otyp_record", 639), ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -129); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -130); (Tag3 ((("out_type", 723)), 0, (0)), 100000000, 0, -131)]), 100000000, 0, -128)], (0)), 100000000, 0, -127)]), 0, (("typing/outcometree.mli", 70, 2824, 2826), ("typing/outcometree.mli", 70, 2824, 2874), 0), 0, Tag1 ("Outcometree", 45)); (("Otyp_stuff", 640), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -132)]), 0, (("typing/outcometree.mli", 71, 2875, 2877), ("typing/outcometree.mli", 71, 2875, 2899), 0), 0, Tag1 ("Outcometree", 46)); (("Otyp_sum", 641), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("out_constructor", 724)), 0, (0)), 100000000, 0, -134)], (0)), 100000000, 0, -133)]), 0, (("typing/outcometree.mli", 72, 2900, 2902), ("typing/outcometree.mli", 72, 2900, 2936), 0), 0, Tag1 ("Outcometree", 47)); (("Otyp_tuple", 642), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("out_type", 723)), 0, (0)), 100000000, 0, -136)], (0)), 100000000, 0, -135)]), 0, (("typing/outcometree.mli", 73, 2937, 2939), ("typing/outcometree.mli", 73, 2937, 2968), 0), 0, Tag1 ("Outcometree", 48)); (("Otyp_var", 643), ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -137); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -138)]), 0, (("typing/outcometree.mli", 74, 2969, 2971), ("typing/outcometree.mli", 74, 2969, 2998), 0), 0, Tag1 ("Outcometree", 49)); (("Otyp_variant", 644), ([(Tag3 ((("out_variant", 725)), 0, (0)), 100000000, 0, -139); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -140); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -143)], (0)), 100000000, 0, -142)], (0)), 100000000, 0, -141)]), 0, (("typing/outcometree.mli", 75, 2999, 3001), ("typing/outcometree.mli", 75, 2999, 3060), 0), 0, Tag1 ("Outcometree", 50)); (("Otyp_poly", 645), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -145)], (0)), 100000000, 0, -144); (Tag3 ((("out_type", 723)), 0, (0)), 100000000, 0, -146)]), 0, (("typing/outcometree.mli", 76, 3061, 3063), ("typing/outcometree.mli", 76, 3061, 3100), 0), 0, Tag1 ("Outcometree", 51)); (("Otyp_module", 646), ([(Tag3 ((("out_ident", 718)), 0, (0)), 100000000, 0, -147); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -150); (Tag3 ((("out_type", 723)), 0, (0)), 100000000, 0, -151)]), 100000000, 0, -149)], (0)), 100000000, 0, -148)]), 0, (("typing/outcometree.mli", 77, 3101, 3103), ("typing/outcometree.mli", 77, 3101, 3156), 0), 0, Tag1 ("Outcometree", 52)); (("Otyp_attribute", 647), ([(Tag3 ((("out_type", 723)), 0, (0)), 100000000, 0, -152); (Tag3 ((("out_attribute", 720)), 0, (0)), 100000000, 0, -153)]), 0, (("typing/outcometree.mli", 78, 3157, 3159), ("typing/outcometree.mli", 78, 3157, 3203), 0), 0, Tag1 ("Outcometree", 53))], 0), 1, 0, 0, 0, 0, 0, (("typing/outcometree.mli", 61, 2464, 2464), ("typing/outcometree.mli", 78, 3157, 3203), 0), 0, 0, 0, Tag1 ("Outcometree", 29)), 1, 0); Tag1 (("out_constructor", 724), (0, 0, [[(("ocstr_name", 648), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -103), (("typing/outcometree.mli", 81, 3229, 3231), ("typing/outcometree.mli", 81, 3229, 3250), 0), 0, Tag1 ("Outcometree", 54)); (("ocstr_args", 649), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("out_type", 723)), 0, (0)), 100000000, 0, -105)], (0)), 100000000, 0, -104), (("typing/outcometree.mli", 82, 3251, 3253), ("typing/outcometree.mli", 82, 3251, 3279), 0), 0, Tag1 ("Outcometree", 55)); (("ocstr_return_type", 650), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("out_type", 723)), 0, (0)), 100000000, 0, -107)], (0)), 100000000, 0, -106), (("typing/outcometree.mli", 83, 3280, 3282), ("typing/outcometree.mli", 83, 3280, 3317), 0), 0, Tag1 ("Outcometree", 56))]], 1, 0, 0, 0, 0, 0, (("typing/outcometree.mli", 80, 3205, 3205), ("typing/outcometree.mli", 84, 3318, 3319), 0), 0, 0, 0, Tag1 ("Outcometree", 30)), 2, 0); Tag1 (("out_variant", 725), (0, 0, Tag1 ([(("Ovar_fields", 651), ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -98); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -99); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("out_type", 723)), 0, (0)), 100000000, 0, -101)], (0)), 100000000, 0, -100)]), 100000000, 0, -97)], (0)), 100000000, 0, -96)]), 0, (("typing/outcometree.mli", 87, 3339, 3341), ("typing/outcometree.mli", 87, 3339, 3394), 0), 0, Tag1 ("Outcometree", 57)); (("Ovar_typ", 652), ([(Tag3 ((("out_type", 723)), 0, (0)), 100000000, 0, -102)]), 0, (("typing/outcometree.mli", 88, 3395, 3397), ("typing/outcometree.mli", 88, 3395, 3419), 0), 0, Tag1 ("Outcometree", 58))], 0), 1, 0, 0, 0, 0, 0, (("typing/outcometree.mli", 86, 3321, 3321), ("typing/outcometree.mli", 88, 3395, 3419), 0), 0, 0, 0, Tag1 ("Outcometree", 31)), 2, 0); Tag1 (("out_class_type", 726), (0, 0, Tag1 ([(("Octy_constr", 655), ([(Tag3 ((("out_ident", 718)), 0, (0)), 100000000, 0, -86); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("out_type", 723)), 0, (0)), 100000000, 0, -88)], (0)), 100000000, 0, -87)]), 0, (("typing/outcometree.mli", 91, 3443, 3445), ("typing/outcometree.mli", 91, 3443, 3487), 0), 0, Tag1 ("Outcometree", 71)); (("Octy_arrow", 656), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -89); (Tag3 ((("out_type", 723)), 0, (0)), 100000000, 0, -90); (Tag3 ((("out_class_type", 726)), 0, (0)), 100000000, 0, -91)]), 0, (("typing/outcometree.mli", 92, 3488, 3490), ("typing/outcometree.mli", 92, 3488, 3540), 0), 0, Tag1 ("Outcometree", 72)); (("Octy_signature", 657), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("out_type", 723)), 0, (0)), 100000000, 0, -93)], (0)), 100000000, 0, -92); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("out_class_sig_item", 727)), 0, (0)), 100000000, 0, -95)], (0)), 100000000, 0, -94)]), 0, (("typing/outcometree.mli", 93, 3541, 3543), ("typing/outcometree.mli", 93, 3541, 3604), 0), 0, Tag1 ("Outcometree", 73))], 0), 1, 0, 0, 0, 0, 0, (("typing/outcometree.mli", 90, 3421, 3421), ("typing/outcometree.mli", 93, 3541, 3604), 0), 0, 0, 0, Tag1 ("Outcometree", 69)), 1, 0); Tag1 (("out_class_sig_item", 727), (0, 0, Tag1 ([(("Ocsg_constraint", 658), ([(Tag3 ((("out_type", 723)), 0, (0)), 100000000, 0, -76); (Tag3 ((("out_type", 723)), 0, (0)), 100000000, 0, -77)]), 0, (("typing/outcometree.mli", 95, 3630, 3632), ("typing/outcometree.mli", 95, 3630, 3672), 0), 0, Tag1 ("Outcometree", 74)); (("Ocsg_method", 659), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -78); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -79); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -80); (Tag3 ((("out_type", 723)), 0, (0)), 100000000, 0, -81)]), 0, (("typing/outcometree.mli", 96, 3673, 3675), ("typing/outcometree.mli", 96, 3673, 3723), 0), 0, Tag1 ("Outcometree", 75)); (("Ocsg_value", 660), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -82); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -83); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -84); (Tag3 ((("out_type", 723)), 0, (0)), 100000000, 0, -85)]), 0, (("typing/outcometree.mli", 97, 3724, 3726), ("typing/outcometree.mli", 97, 3724, 3773), 0), 0, Tag1 ("Outcometree", 76))], 0), 1, 0, 0, 0, 0, 0, (("typing/outcometree.mli", 94, 3605, 3605), ("typing/outcometree.mli", 97, 3724, 3773), 0), 0, 0, 0, Tag1 ("Outcometree", 70)), 2, 0); Tag1 (("out_module_type", 728), (0, 0, Tag1 ([(("Omty_abstract", 669), (0), 0, (("typing/outcometree.mli", 100, 3798, 3800), ("typing/outcometree.mli", 100, 3798, 3815), 0), 0, Tag1 ("Outcometree", 85)); (("Omty_functor", 670), ([(Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -69)], (0)), 100000000, 0, -68); (Tag3 ((("out_module_type", 728)), 0, (0)), 100000000, 0, -70)]), 100000000, 0, -67)], (0)), 100000000, 0, -66); (Tag3 ((("out_module_type", 728)), 0, (0)), 100000000, 0, -71)]), 0, (("typing/outcometree.mli", 101, 3816, 3818), ("typing/outcometree.mli", 101, 3816, 3894), 0), 0, Tag1 ("Outcometree", 86)); (("Omty_ident", 671), ([(Tag3 ((("out_ident", 718)), 0, (0)), 100000000, 0, -72)]), 0, (("typing/outcometree.mli", 102, 3895, 3897), ("typing/outcometree.mli", 102, 3895, 3922), 0), 0, Tag1 ("Outcometree", 87)); (("Omty_signature", 672), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("out_sig_item", 729)), 0, (0)), 100000000, 0, -74)], (0)), 100000000, 0, -73)]), 0, (("typing/outcometree.mli", 103, 3923, 3925), ("typing/outcometree.mli", 103, 3923, 3962), 0), 0, Tag1 ("Outcometree", 88)); (("Omty_alias", 673), ([(Tag3 ((("out_ident", 718)), 0, (0)), 100000000, 0, -75)]), 0, (("typing/outcometree.mli", 104, 3963, 3965), ("typing/outcometree.mli", 104, 3963, 3990), 0), 0, Tag1 ("Outcometree", 89))], 0), 1, 0, 0, 0, 0, 0, (("typing/outcometree.mli", 99, 3775, 3775), ("typing/outcometree.mli", 104, 3963, 3990), 0), 0, 0, 0, Tag1 ("Outcometree", 77)), 1, 0); Tag1 (("out_sig_item", 729), (0, 0, Tag1 ([(("Osig_class", 674), ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -44); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -45); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("out_type_param", 722)), 0, (0)), 100000000, 0, -47)], (0)), 100000000, 0, -46); (Tag3 ((("out_class_type", 726)), 0, (0)), 100000000, 0, -48); (Tag3 ((("out_rec_status", 734)), 0, (0)), 100000000, 0, -49)]), 0, (("typing/outcometree.mli", 106, 4010, 4012), ("typing/outcometree.mli", 108, 4089, 4111), 0), 0, Tag1 ("Outcometree", 90)); (("Osig_class_type", 675), ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -50); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -51); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("out_type_param", 722)), 0, (0)), 100000000, 0, -53)], (0)), 100000000, 0, -52); (Tag3 ((("out_class_type", 726)), 0, (0)), 100000000, 0, -54); (Tag3 ((("out_rec_status", 734)), 0, (0)), 100000000, 0, -55)]), 0, (("typing/outcometree.mli", 109, 4112, 4114), ("typing/outcometree.mli", 111, 4196, 4218), 0), 0, Tag1 ("Outcometree", 91)); (("Osig_typext", 676), ([(Tag3 ((("out_extension_constructor", 731)), 0, (0)), 100000000, 0, -56); (Tag3 ((("out_ext_status", 735)), 0, (0)), 100000000, 0, -57)]), 0, (("typing/outcometree.mli", 112, 4219, 4221), ("typing/outcometree.mli", 112, 4219, 4280), 0), 0, Tag1 ("Outcometree", 92)); (("Osig_modtype", 677), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -58); (Tag3 ((("out_module_type", 728)), 0, (0)), 100000000, 0, -59)]), 0, (("typing/outcometree.mli", 113, 4281, 4283), ("typing/outcometree.mli", 113, 4281, 4325), 0), 0, Tag1 ("Outcometree", 93)); (("Osig_module", 678), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -60); (Tag3 ((("out_module_type", 728)), 0, (0)), 100000000, 0, -61); (Tag3 ((("out_rec_status", 734)), 0, (0)), 100000000, 0, -62)]), 0, (("typing/outcometree.mli", 114, 4326, 4328), ("typing/outcometree.mli", 114, 4326, 4386), 0), 0, Tag1 ("Outcometree", 94)); (("Osig_type", 679), ([(Tag3 ((("out_type_decl", 730)), 0, (0)), 100000000, 0, -63); (Tag3 ((("out_rec_status", 734)), 0, (0)), 100000000, 0, -64)]), 0, (("typing/outcometree.mli", 115, 4387, 4389), ("typing/outcometree.mli", 115, 4387, 4434), 0), 0, Tag1 ("Outcometree", 95)); (("Osig_value", 680), ([(Tag3 ((("out_val_decl", 733)), 0, (0)), 100000000, 0, -65)]), 0, (("typing/outcometree.mli", 116, 4435, 4437), ("typing/outcometree.mli", 116, 4435, 4465), 0), 0, Tag1 ("Outcometree", 96)); (("Osig_ellipsis", 681), (0), 0, (("typing/outcometree.mli", 117, 4466, 4468), ("typing/outcometree.mli", 117, 4466, 4483), 0), 0, Tag1 ("Outcometree", 97))], 0), 1, 0, 0, 0, 0, 0, (("typing/outcometree.mli", 105, 3991, 3991), ("typing/outcometree.mli", 117, 4466, 4483), 0), 0, 0, 0, Tag1 ("Outcometree", 78)), 2, 0); Tag1 (("out_type_decl", 730), (0, 0, [[(("otype_name", 682), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -33), (("typing/outcometree.mli", 119, 4504, 4508), ("typing/outcometree.mli", 119, 4504, 4527), 0), 0, Tag1 ("Outcometree", 98)); (("otype_params", 683), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("out_type_param", 722)), 0, (0)), 100000000, 0, -35)], (0)), 100000000, 0, -34), (("typing/outcometree.mli", 120, 4528, 4532), ("typing/outcometree.mli", 120, 4528, 4566), 0), 0, Tag1 ("Outcometree", 99)); (("otype_type", 684), 0, (Tag3 ((("out_type", 723)), 0, (0)), 100000000, 0, -36), (("typing/outcometree.mli", 121, 4567, 4571), ("typing/outcometree.mli", 121, 4567, 4592), 0), 0, Tag1 ("Outcometree", 100)); (("otype_private", 685), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "private_flag"), 0, (0)), 100000000, 0, -37), (("typing/outcometree.mli", 122, 4593, 4597), ("typing/outcometree.mli", 122, 4593, 4634), 0), 0, Tag1 ("Outcometree", 101)); (("otype_immediate", 690), 0, (Tag3 (Tag1 ((Tag2 ("Type_immediacy")), "t"), 0, (0)), 100000000, 0, -38), (("typing/outcometree.mli", 123, 4635, 4639), ("typing/outcometree.mli", 123, 4635, 4673), 0), 0, Tag1 ("Outcometree", 102)); (("otype_unboxed", 691), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -39), (("typing/outcometree.mli", 124, 4674, 4678), ("typing/outcometree.mli", 124, 4674, 4698), 0), 0, Tag1 ("Outcometree", 103)); (("otype_cstrs", 692), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("out_type", 723)), 0, (0)), 100000000, 0, -42); (Tag3 ((("out_type", 723)), 0, (0)), 100000000, 0, -43)]), 100000000, 0, -41)], (0)), 100000000, 0, -40), (("typing/outcometree.mli", 125, 4699, 4703), ("typing/outcometree.mli", 125, 4699, 4742), 0), 0, Tag1 ("Outcometree", 104))]], 1, 0, 0, 0, 0, 0, (("typing/outcometree.mli", 118, 4484, 4484), ("typing/outcometree.mli", 125, 4699, 4744), 0), 0, 0, 0, Tag1 ("Outcometree", 79)), 2, 0); Tag1 (("out_extension_constructor", 731), (0, 0, [[(("oext_name", 693), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -24), (("typing/outcometree.mli", 127, 4777, 4781), ("typing/outcometree.mli", 127, 4777, 4799), 0), 0, Tag1 ("Outcometree", 105)); (("oext_type_name", 694), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -25), (("typing/outcometree.mli", 128, 4800, 4804), ("typing/outcometree.mli", 128, 4800, 4827), 0), 0, Tag1 ("Outcometree", 106)); (("oext_type_params", 695), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -27)], (0)), 100000000, 0, -26), (("typing/outcometree.mli", 129, 4828, 4832), ("typing/outcometree.mli", 129, 4828, 4862), 0), 0, Tag1 ("Outcometree", 107)); (("oext_args", 696), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("out_type", 723)), 0, (0)), 100000000, 0, -29)], (0)), 100000000, 0, -28), (("typing/outcometree.mli", 130, 4863, 4867), ("typing/outcometree.mli", 130, 4863, 4892), 0), 0, Tag1 ("Outcometree", 108)); (("oext_ret_type", 697), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("out_type", 723)), 0, (0)), 100000000, 0, -31)], (0)), 100000000, 0, -30), (("typing/outcometree.mli", 131, 4893, 4897), ("typing/outcometree.mli", 131, 4893, 4928), 0), 0, Tag1 ("Outcometree", 109)); (("oext_private", 698), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "private_flag"), 0, (0)), 100000000, 0, -32), (("typing/outcometree.mli", 132, 4929, 4933), ("typing/outcometree.mli", 132, 4929, 4968), 0), 0, Tag1 ("Outcometree", 110))]], 1, 0, 0, 0, 0, 0, (("typing/outcometree.mli", 126, 4745, 4745), ("typing/outcometree.mli", 132, 4929, 4970), 0), 0, 0, 0, Tag1 ("Outcometree", 80)), 2, 0); Tag1 (("out_type_extension", 732), (0, 0, [[(("otyext_name", 699), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -18), (("typing/outcometree.mli", 134, 4996, 5000), ("typing/outcometree.mli", 134, 4996, 5020), 0), 0, Tag1 ("Outcometree", 111)); (("otyext_params", 700), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -20)], (0)), 100000000, 0, -19), (("typing/outcometree.mli", 135, 5021, 5025), ("typing/outcometree.mli", 135, 5021, 5052), 0), 0, Tag1 ("Outcometree", 112)); (("otyext_constructors", 701), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("out_constructor", 724)), 0, (0)), 100000000, 0, -22)], (0)), 100000000, 0, -21), (("typing/outcometree.mli", 136, 5053, 5057), ("typing/outcometree.mli", 136, 5053, 5099), 0), 0, Tag1 ("Outcometree", 113)); (("otyext_private", 702), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "private_flag"), 0, (0)), 100000000, 0, -23), (("typing/outcometree.mli", 137, 5100, 5104), ("typing/outcometree.mli", 137, 5100, 5141), 0), 0, Tag1 ("Outcometree", 114))]], 1, 0, 0, 0, 0, 0, (("typing/outcometree.mli", 133, 4971, 4971), ("typing/outcometree.mli", 137, 5100, 5143), 0), 0, 0, 0, Tag1 ("Outcometree", 81)), 2, 0); Tag1 (("out_val_decl", 733), (0, 0, [[(("oval_name", 703), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12), (("typing/outcometree.mli", 139, 5163, 5167), ("typing/outcometree.mli", 139, 5163, 5185), 0), 0, Tag1 ("Outcometree", 115)); (("oval_type", 704), 0, (Tag3 ((("out_type", 723)), 0, (0)), 100000000, 0, -13), (("typing/outcometree.mli", 140, 5186, 5190), ("typing/outcometree.mli", 140, 5186, 5210), 0), 0, Tag1 ("Outcometree", 116)); (("oval_prims", 705), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -15)], (0)), 100000000, 0, -14), (("typing/outcometree.mli", 141, 5211, 5215), ("typing/outcometree.mli", 141, 5211, 5239), 0), 0, Tag1 ("Outcometree", 117)); (("oval_attributes", 706), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("out_attribute", 720)), 0, (0)), 100000000, 0, -17)], (0)), 100000000, 0, -16), (("typing/outcometree.mli", 142, 5240, 5244), ("typing/outcometree.mli", 142, 5240, 5279), 0), 0, Tag1 ("Outcometree", 118))]], 1, 0, 0, 0, 0, 0, (("typing/outcometree.mli", 138, 5144, 5144), ("typing/outcometree.mli", 142, 5240, 5281), 0), 0, 0, 0, Tag1 ("Outcometree", 82)), 2, 0); Tag1 (("out_rec_status", 734), (0, 0, Tag1 ([(("Orec_not", 707), (0), 0, (("typing/outcometree.mli", 144, 5303, 5305), ("typing/outcometree.mli", 144, 5303, 5315), 0), 0, Tag1 ("Outcometree", 119)); (("Orec_first", 708), (0), 0, (("typing/outcometree.mli", 145, 5316, 5318), ("typing/outcometree.mli", 145, 5316, 5330), 0), 0, Tag1 ("Outcometree", 120)); (("Orec_next", 709), (0), 0, (("typing/outcometree.mli", 146, 5331, 5333), ("typing/outcometree.mli", 146, 5331, 5344), 0), 0, Tag1 ("Outcometree", 121))], 0), 1, 0, 0, 0, 0, 0, (("typing/outcometree.mli", 143, 5282, 5282), ("typing/outcometree.mli", 146, 5331, 5344), 0), 0, 1, 0, Tag1 ("Outcometree", 83)), 2, 0); Tag1 (("out_ext_status", 735), (0, 0, Tag1 ([(("Oext_first", 710), (0), 0, (("typing/outcometree.mli", 148, 5366, 5368), ("typing/outcometree.mli", 148, 5366, 5380), 0), 0, Tag1 ("Outcometree", 122)); (("Oext_next", 711), (0), 0, (("typing/outcometree.mli", 149, 5381, 5383), ("typing/outcometree.mli", 149, 5381, 5394), 0), 0, Tag1 ("Outcometree", 123)); (("Oext_exception", 712), (0), 0, (("typing/outcometree.mli", 150, 5395, 5397), ("typing/outcometree.mli", 150, 5395, 5413), 0), 0, Tag1 ("Outcometree", 124))], 0), 1, 0, 0, 0, 0, 0, (("typing/outcometree.mli", 147, 5345, 5345), ("typing/outcometree.mli", 150, 5395, 5413), 0), 0, 1, 0, Tag1 ("Outcometree", 84)), 2, 0); Tag1 (("out_phrase", 736), (0, 0, Tag1 ([(("Ophr_eval", 714), ([(Tag3 ((("out_value", 721)), 0, (0)), 100000000, 0, -2); (Tag3 ((("out_type", 723)), 0, (0)), 100000000, 0, -3)]), 0, (("typing/outcometree.mli", 153, 5433, 5435), ("typing/outcometree.mli", 153, 5433, 5470), 0), 0, Tag1 ("Outcometree", 126)); (("Ophr_signature", 715), ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("out_sig_item", 729)), 0, (0)), 100000000, 0, -6); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("out_value", 721)), 0, (0)), 100000000, 0, -8)], (0)), 100000000, 0, -7)]), 100000000, 0, -5)], (0)), 100000000, 0, -4)]), 0, (("typing/outcometree.mli", 154, 5471, 5473), ("typing/outcometree.mli", 154, 5471, 5531), 0), 0, Tag1 ("Outcometree", 127)); (("Ophr_exception", 716), ([(Tag2 ([(Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -10); (Tag3 ((("out_value", 721)), 0, (0)), 100000000, 0, -11)]), 100000000, 0, -9)]), 0, (("typing/outcometree.mli", 155, 5532, 5534), ("typing/outcometree.mli", 155, 5532, 5571), 0), 0, Tag1 ("Outcometree", 128))], 0), 1, 0, 0, 0, 0, 0, (("typing/outcometree.mli", 152, 5415, 5415), ("typing/outcometree.mli", 155, 5532, 5571), 0), 0, 0, 0, Tag1 ("Outcometree", 125)), 1, 0)], "Outcometree", [("Outcometree", ("9\021%\234\211\206\210\004H\165\208\2014\234Q\142")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Type_immediacy", ("\"\127k\011Q\241\211\138\193;8\142\129\141#\251")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216"))], [(0)])
Ophr_exception of (exn * out_value)

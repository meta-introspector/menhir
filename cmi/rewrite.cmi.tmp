exception RewriteFailure of Environ.env * Evd.evar_map *
            Pretype_errors.pretype_error
type unary_strategy =
    Subterms
  | Subterm
  | Innermost
  | Outermost
  | Bottomup
  | Topdown
  | Progress
  | Try
  | Any
  | Repeat
type binary_strategy = Compose
type nary_strategy = Choice
type ('constr, 'redexpr) strategy_ast =
    StratId
  | StratFail
  | StratRefl
  | StratUnary of unary_strategy * ('constr, 'redexpr) strategy_ast
  | StratBinary of binary_strategy * ('constr, 'redexpr) strategy_ast *
      ('constr, 'redexpr) strategy_ast
  | StratNAry of nary_strategy * ('constr, 'redexpr) strategy_ast list
  | StratConstr of 'constr * bool
  | StratTerms of 'constr list
  | StratHints of bool * string
  | StratEval of 'redexpr
  | StratFold of 'constr
type rewrite_proof =
    RewPrf of EConstr.constr * EConstr.constr
  | RewCast of Constr.cast_kind
type evars = Evd.evar_map * Evar.Set.t
type rewrite_result_info = {
  rew_car : EConstr.constr;
  rew_from : EConstr.constr;
  rew_to : EConstr.constr;
  rew_prf : rewrite_proof;
  rew_evars : evars;
}
type rewrite_result = Fail | Identity | Success of rewrite_result_info
type strategy
val strategy_of_ast :
  (Glob_term.glob_constr * EConstr.constr Tactypes.delayed_open,
   Redexpr.red_expr Tactypes.delayed_open)
  strategy_ast -> strategy
val map_strategy :
  ('a -> 'b) -> ('c -> 'd) -> ('a, 'c) strategy_ast -> ('b, 'd) strategy_ast
val pr_strategy :
  ('a -> Pp.t) -> ('b -> Pp.t) -> ('a, 'b) strategy_ast -> Pp.t
val cl_rewrite_clause_strat :
  strategy -> Names.Id.t option -> unit Proofview.tactic
val cl_rewrite_clause :
  EConstr.t Tactypes.with_bindings Tactypes.delayed_open ->
  bool -> Locus.occurrences -> Names.Id.t option -> unit Proofview.tactic
val is_applied_rewrite_relation :
  Environ.env ->
  Evd.evar_map ->
  EConstr.rel_context -> EConstr.constr -> EConstr.types option
val get_reflexive_proof :
  Environ.env ->
  Evd.evar_map ->
  EConstr.constr -> EConstr.constr -> Evd.evar_map * EConstr.constr
val get_symmetric_proof :
  Environ.env ->
  Evd.evar_map ->
  EConstr.constr -> EConstr.constr -> Evd.evar_map * EConstr.constr
val get_transitive_proof :
  Environ.env ->
  Evd.evar_map ->
  EConstr.constr -> EConstr.constr -> Evd.evar_map * EConstr.constr
val setoid_symmetry : unit Proofview.tactic
val setoid_symmetry_in : Names.Id.t -> unit Proofview.tactic
val setoid_reflexivity : unit Proofview.tactic
val setoid_transitivity : EConstr.constr option -> unit Proofview.tactic
val apply_strategy :
  strategy ->
  Environ.env ->
  Names.Id.Set.t ->
  EConstr.constr -> bool * EConstr.constr -> evars -> rewrite_result
module Internal :
  sig
    val build_signature :
      Environ.env ->
      Evd.evar_map ->
      EConstr.constr ->
      (EConstr.types * EConstr.types option) option list ->
      (EConstr.types * EConstr.types option) option ->
      Evd.evar_map * EConstr.constr *
      (EConstr.constr * EConstr.t option) list
    val build_morphism_signature :
      Environ.env ->
      Evd.evar_map -> Constrexpr.constr_expr -> Evd.evar_map * EConstr.t
    val default_morphism :
      Environ.env ->
      Evd.evar_map ->
      (EConstr.types * EConstr.types option) option list *
      (EConstr.types * EConstr.types option) option ->
      EConstr.constr -> EConstr.constr * EConstr.t("DEBUG:rule", [Tag2 (("RewriteFailure", 1536), ((Tag3 ("exn", 7)), 0, ([(Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -150); (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -151); (Tag3 (Tag1 ((Tag2 ("Pretype_errors")), "pretype_error"), 0, (0)), 100000000, 0, -152)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Rewrite", 0)), 2, 0); Tag1 (("unary_strategy", 1537), (0, 0, Tag1 ([(("Subterms", 957), (0), 0, (("tactics/rewrite.mli", 22, 883, 887), ("tactics/rewrite.mli", 22, 883, 895), 0), 0, Tag1 ("Rewrite", 2)); (("Subterm", 958), (0), 0, (("tactics/rewrite.mli", 22, 883, 896), ("tactics/rewrite.mli", 22, 883, 905), 0), 0, Tag1 ("Rewrite", 3)); (("Innermost", 959), (0), 0, (("tactics/rewrite.mli", 22, 883, 906), ("tactics/rewrite.mli", 22, 883, 917), 0), 0, Tag1 ("Rewrite", 4)); (("Outermost", 960), (0), 0, (("tactics/rewrite.mli", 22, 883, 918), ("tactics/rewrite.mli", 22, 883, 929), 0), 0, Tag1 ("Rewrite", 5)); (("Bottomup", 961), (0), 0, (("tactics/rewrite.mli", 23, 930, 932), ("tactics/rewrite.mli", 23, 930, 942), 0), 0, Tag1 ("Rewrite", 6)); (("Topdown", 962), (0), 0, (("tactics/rewrite.mli", 23, 930, 943), ("tactics/rewrite.mli", 23, 930, 952), 0), 0, Tag1 ("Rewrite", 7)); (("Progress", 963), (0), 0, (("tactics/rewrite.mli", 23, 930, 953), ("tactics/rewrite.mli", 23, 930, 963), 0), 0, Tag1 ("Rewrite", 8)); (("Try", 964), (0), 0, (("tactics/rewrite.mli", 23, 930, 964), ("tactics/rewrite.mli", 23, 930, 969), 0), 0, Tag1 ("Rewrite", 9)); (("Any", 965), (0), 0, (("tactics/rewrite.mli", 23, 930, 970), ("tactics/rewrite.mli", 23, 930, 975), 0), 0, Tag1 ("Rewrite", 10)); (("Repeat", 966), (0), 0, (("tactics/rewrite.mli", 23, 930, 976), ("tactics/rewrite.mli", 23, 930, 984), 0), 0, Tag1 ("Rewrite", 11))], 0), 1, 0, 0, 0, 0, 0, (("tactics/rewrite.mli", 21, 861, 861), ("tactics/rewrite.mli", 23, 930, 984), 0), 0, 1, 0, Tag1 ("Rewrite", 1)), 1, 0); Tag1 (("binary_strategy", 1538), (0, 0, Tag1 ([(("Compose", 968), (0), 0, (("tactics/rewrite.mli", 26, 1009, 1011), ("tactics/rewrite.mli", 26, 1009, 1020), 0), 0, Tag1 ("Rewrite", 13))], 0), 1, 0, 0, 0, 0, 0, (("tactics/rewrite.mli", 25, 986, 986), ("tactics/rewrite.mli", 26, 1009, 1020), 0), 0, 1, 0, Tag1 ("Rewrite", 12)), 1, 0); Tag1 (("nary_strategy", 1539), (0, 0, Tag1 ([(("Choice", 970), (0), 0, (("tactics/rewrite.mli", 28, 1022, 1043), ("tactics/rewrite.mli", 28, 1022, 1049), 0), 0, Tag1 ("Rewrite", 15))], 0), 1, 0, 0, 0, 0, 0, (("tactics/rewrite.mli", 28, 1022, 1022), ("tactics/rewrite.mli", 28, 1022, 1049), 0), 0, 1, 0, Tag1 ("Rewrite", 14)), 1, 0); Tag1 (("strategy_ast", 1540), ([((("constr")), 100000000, 0, -138); ((("redexpr")), 100000000, 0, -139)], 2, Tag1 ([(("StratId", 972), (0), 0, (("tactics/rewrite.mli", 31, 1090, 1092), ("tactics/rewrite.mli", 31, 1090, 1101), 0), 0, Tag1 ("Rewrite", 17)); (("StratFail", 973), (0), 0, (("tactics/rewrite.mli", 31, 1090, 1102), ("tactics/rewrite.mli", 31, 1090, 1113), 0), 0, Tag1 ("Rewrite", 18)); (("StratRefl", 974), (0), 0, (("tactics/rewrite.mli", 31, 1090, 1114), ("tactics/rewrite.mli", 31, 1090, 1125), 0), 0, Tag1 ("Rewrite", 19)); (("StratUnary", 975), ([(Tag3 ((("unary_strategy", 1537)), 0, (0)), 100000000, 0, -136); (Tag3 ((("strategy_ast", 1540)), [((("constr")), 100000000, 0, -138); ((("redexpr")), 100000000, 0, -139)], (0)), 100000000, 0, -137)]), 0, (("tactics/rewrite.mli", 32, 1126, 1128), ("tactics/rewrite.mli", 32, 1126, 1192), 0), 0, Tag1 ("Rewrite", 20)); (("StratBinary", 976), ([(Tag3 ((("binary_strategy", 1538)), 0, (0)), 100000000, 0, -140); (Tag3 ((("strategy_ast", 1540)), [((("constr")), 100000000, 0, -138); ((("redexpr")), 100000000, 0, -139)], (0)), 100000000, 0, -141); (Tag3 ((("strategy_ast", 1540)), [((("constr")), 100000000, 0, -138); ((("redexpr")), 100000000, 0, -139)], (0)), 100000000, 0, -142)]), 0, (("tactics/rewrite.mli", 33, 1193, 1195), ("tactics/rewrite.mli", 34, 1212, 1301), 0), 0, Tag1 ("Rewrite", 21)); (("StratNAry", 977), ([(Tag3 ((("nary_strategy", 1539)), 0, (0)), 100000000, 0, -143); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("strategy_ast", 1540)), [((("constr")), 100000000, 0, -138); ((("redexpr")), 100000000, 0, -139)], (0)), 100000000, 0, -145)], (0)), 100000000, 0, -144)]), 0, (("tactics/rewrite.mli", 35, 1302, 1304), ("tactics/rewrite.mli", 35, 1302, 1371), 0), 0, Tag1 ("Rewrite", 22)); (("StratConstr", 978), ([((("constr")), 100000000, 0, -138); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -146)]), 0, (("tactics/rewrite.mli", 36, 1372, 1374), ("tactics/rewrite.mli", 36, 1372, 1405), 0), 0, Tag1 ("Rewrite", 23)); (("StratTerms", 979), ([(Tag3 ((Tag3 ("list", 9)), [((("constr")), 100000000, 0, -138)], (0)), 100000000, 0, -147)]), 0, (("tactics/rewrite.mli", 37, 1406, 1408), ("tactics/rewrite.mli", 37, 1406, 1436), 0), 0, Tag1 ("Rewrite", 24)); (("StratHints", 980), ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -148); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -149)]), 0, (("tactics/rewrite.mli", 38, 1437, 1439), ("tactics/rewrite.mli", 38, 1437, 1468), 0), 0, Tag1 ("Rewrite", 25)); (("StratEval", 981), ([((("redexpr")), 100000000, 0, -139)]), 0, (("tactics/rewrite.mli", 39, 1469, 1471), ("tactics/rewrite.mli", 39, 1469, 1494), 0), 0, Tag1 ("Rewrite", 26)); (("StratFold", 982), ([((("constr")), 100000000, 0, -138)]), 0, (("tactics/rewrite.mli", 40, 1495, 1497), ("tactics/rewrite.mli", 40, 1495, 1519), 0), 0, Tag1 ("Rewrite", 27))], 0), 1, 0, [25; 25], [0; 0], 0, 0, (("tactics/rewrite.mli", 30, 1051, 1051), ("tactics/rewrite.mli", 40, 1495, 1519), 0), 0, 0, 0, Tag1 ("Rewrite", 16)), 1, 0); Tag1 (("rewrite_proof", 1541), (0, 0, Tag1 ([(("RewPrf", 984), ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -133); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -134)]), 0, (("tactics/rewrite.mli", 43, 1542, 1544), ("tactics/rewrite.mli", 43, 1542, 1571), 0), 0, Tag1 ("Rewrite", 29)); (("RewCast", 985), ([(Tag3 (Tag1 ((Tag2 ("Constr")), "cast_kind"), 0, (0)), 100000000, 0, -135)]), 0, (("tactics/rewrite.mli", 44, 1572, 1574), ("tactics/rewrite.mli", 44, 1572, 1603), 0), 0, Tag1 ("Rewrite", 31))], 0), 1, 0, 0, 0, 0, 0, (("tactics/rewrite.mli", 42, 1521, 1521), ("tactics/rewrite.mli", 44, 1572, 1603), 0), 0, 0, 0, Tag1 ("Rewrite", 28)), 1, 0); Tag1 (("evars", 1542), (0, 0, 0, 1, ((Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -131); (Tag3 (Tag1 (Tag1 ((Tag2 ("Evar")), "Set"), "t"), 0, (0)), 100000000, 0, -132)]), 100000000, 0, -130)), 0, 0, 0, 0, (("tactics/rewrite.mli", 46, 1605, 1605), ("tactics/rewrite.mli", 46, 1605, 1639), 0), 0, 0, 0, Tag1 ("Rewrite", 32)), 1, 0); Tag1 (("rewrite_result_info", 1543), (0, 0, [[(("rew_car", 1199), 0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -125), (("tactics/rewrite.mli", 49, 1705, 1707), ("tactics/rewrite.mli", 49, 1705, 1724), 0), 0, Tag1 ("Rewrite", 34)); (("rew_from", 1200), 0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -126), (("tactics/rewrite.mli", 50, 1725, 1727), ("tactics/rewrite.mli", 50, 1725, 1745), 0), 0, Tag1 ("Rewrite", 35)); (("rew_to", 1201), 0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -127), (("tactics/rewrite.mli", 51, 1746, 1748), ("tactics/rewrite.mli", 51, 1746, 1764), 0), 0, Tag1 ("Rewrite", 36)); (("rew_prf", 1202), 0, (Tag3 ((("rewrite_proof", 1541)), 0, (0)), 100000000, 0, -128), (("tactics/rewrite.mli", 52, 1765, 1767), ("tactics/rewrite.mli", 52, 1765, 1791), 0), 0, Tag1 ("Rewrite", 37)); (("rew_evars", 1203), 0, (Tag3 ((("evars", 1542)), 0, (0)), 100000000, 0, -129), (("tactics/rewrite.mli", 53, 1792, 1794), ("tactics/rewrite.mli", 53, 1792, 1812), 0), 0, Tag1 ("Rewrite", 38))]], 1, 0, 0, 0, 0, 0, (("tactics/rewrite.mli", 48, 1676, 1676), ("tactics/rewrite.mli", 54, 1813, 1814), 0), 0, 0, 0, Tag1 ("Rewrite", 33)), 1, 0); Tag1 (("rewrite_result", 1544), (0, 0, Tag1 ([(("Fail", 1205), (0), 0, (("tactics/rewrite.mli", 57, 1838, 1838), ("tactics/rewrite.mli", 57, 1838, 1844), 0), 0, Tag1 ("Rewrite", 40)); (("Identity", 1206), (0), 0, (("tactics/rewrite.mli", 58, 1845, 1845), ("tactics/rewrite.mli", 58, 1845, 1855), 0), 0, Tag1 ("Rewrite", 41)); (("Success", 1207), ([(Tag3 ((("rewrite_result_info", 1543)), 0, (0)), 100000000, 0, -124)]), 0, (("tactics/rewrite.mli", 59, 1856, 1856), ("tactics/rewrite.mli", 59, 1856, 1888), 0), 0, Tag1 ("Rewrite", 42))], 0), 1, 0, 0, 0, 0, 0, (("tactics/rewrite.mli", 56, 1816, 1816), ("tactics/rewrite.mli", 59, 1856, 1888), 0), 0, 0, 0, Tag1 ("Rewrite", 39)), 1, 0); Tag1 (("strategy", 1545), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("tactics/rewrite.mli", 61, 1890, 1890), ("tactics/rewrite.mli", 61, 1890, 1903), 0), 0, 0, 0, Tag1 ("Rewrite", 43)), 1, 0); (("strategy_of_ast", 1546), ((Tag1 (0, (Tag3 ((("strategy_ast", 1540)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -119); (Tag3 (Tag1 ((Tag2 ("Tactypes")), "delayed_open"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -121)], (0)), 100000000, 0, -120)]), 100000000, 0, -118); (Tag3 (Tag1 ((Tag2 ("Tactypes")), "delayed_open"), [(Tag3 (Tag1 ((Tag2 ("Redexpr")), "red_expr"), 0, (0)), 100000000, 0, -123)], (0)), 100000000, 0, -122)], (0)), 100000000, 0, -117), (Tag3 ((("strategy", 1545)), 0, (0)), 100000000, 0, -116), 0), 100000000, 0, -115), 0, (("tactics/rewrite.mli", 63, 1905, 1905), ("tactics/rewrite.mli", 63, 1905, 2028), 0), 0, Tag1 ("Rewrite", 45)), 0); (("map_strategy", 1547), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -111), ((("b")), 100000000, 0, -108), 0), 100000000, 0, -114), (Tag1 (0, (Tag1 (0, ((("c")), 100000000, 0, -112), ((("d")), 100000000, 0, -109), 0), 100000000, 0, -113), (Tag1 (0, (Tag3 ((("strategy_ast", 1540)), [((("a")), 100000000, 0, -111); ((("c")), 100000000, 0, -112)], (0)), 100000000, 0, -110), (Tag3 ((("strategy_ast", 1540)), [((("b")), 100000000, 0, -108); ((("d")), 100000000, 0, -109)], (0)), 100000000, 0, -107), 0), 100000000, 0, -106), 0), 100000000, 0, -105), 0), 100000000, 0, -104), 0, (("tactics/rewrite.mli", 65, 2030, 2030), ("tactics/rewrite.mli", 66, 2077, 2125), 0), 0, Tag1 ("Rewrite", 46)), 0); (("pr_strategy", 1548), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -98), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -103), 0), 100000000, 0, -102), (Tag1 (0, (Tag1 (0, ((("b")), 100000000, 0, -99), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -101), 0), 100000000, 0, -100), (Tag1 (0, (Tag3 ((("strategy_ast", 1540)), [((("a")), 100000000, 0, -98); ((("b")), 100000000, 0, -99)], (0)), 100000000, 0, -97), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -96), 0), 100000000, 0, -95), 0), 100000000, 0, -94), 0), 100000000, 0, -93), 0, (("tactics/rewrite.mli", 68, 2127, 2127), ("tactics/rewrite.mli", 69, 2177, 2208), 0), 0, Tag1 ("Rewrite", 47)), 0); (("cl_rewrite_clause_strat", 1549), ((Tag1 (0, (Tag3 ((("strategy", 1545)), 0, (0)), 100000000, 0, -92), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -91)], (0)), 100000000, 0, -90), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -89)], (0)), 100000000, 0, -88), 0), 100000000, 0, -87), 0), 100000000, 0, -86), 0, (("tactics/rewrite.mli", 72, 2260, 2260), ("tactics/rewrite.mli", 72, 2260, 2338), 0), 0, Tag1 ("Rewrite", 48)), 0); (("cl_rewrite_clause", 1550), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Tactypes")), "delayed_open"), [(Tag3 (Tag1 ((Tag2 ("Tactypes")), "with_bindings"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -85)], (0)), 100000000, 0, -84)], (0)), 100000000, 0, -83), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -82), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Locus")), "occurrences"), 0, (0)), 100000000, 0, -81), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -80)], (0)), 100000000, 0, -79), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -78)], (0)), 100000000, 0, -77), 0), 100000000, 0, -76), 0), 100000000, 0, -75), 0), 100000000, 0, -74), 0), 100000000, 0, -73), 0, (("tactics/rewrite.mli", 75, 2391, 2391), ("tactics/rewrite.mli", 77, 2457, 2524), 0), 0, Tag1 ("Rewrite", 49)), 0); (("is_applied_rewrite_relation", 1551), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -72), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -71), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "rel_context"), 0, (0)), 100000000, 0, -70), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -69), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -68)], (0)), 100000000, 0, -67), 0), 100000000, 0, -66), 0), 100000000, 0, -65), 0), 100000000, 0, -64), 0), 100000000, 0, -63), 0, (("tactics/rewrite.mli", 79, 2526, 2526), ("tactics/rewrite.mli", 80, 2560, 2618), 0), 0, Tag1 ("Rewrite", 50)), 0); (("get_reflexive_proof", 1552), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -62), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -61), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -60), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -59), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -57); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -58)]), 100000000, 0, -56), 0), 100000000, 0, -55), 0), 100000000, 0, -54), 0), 100000000, 0, -53), 0), 100000000, 0, -52), 0, (("tactics/rewrite.mli", 82, 2620, 2620), ("tactics/rewrite.mli", 82, 2620, 2702), 0), 0, Tag1 ("Rewrite", 51)), 0); (("get_symmetric_proof", 1553), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -51), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -50), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -49), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -48), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -46); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -47)]), 100000000, 0, -45), 0), 100000000, 0, -44), 0), 100000000, 0, -43), 0), 100000000, 0, -42), 0), 100000000, 0, -41), 0, (("tactics/rewrite.mli", 84, 2704, 2704), ("tactics/rewrite.mli", 84, 2704, 2786), 0), 0, Tag1 ("Rewrite", 52)), 0); (("get_transitive_proof", 1554), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -40), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -39), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -38), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -37), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -35); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -36)]), 100000000, 0, -34), 0), 100000000, 0, -33), 0), 100000000, 0, -32), 0), 100000000, 0, -31), 0), 100000000, 0, -30), 0, (("tactics/rewrite.mli", 86, 2788, 2788), ("tactics/rewrite.mli", 86, 2788, 2871), 0), 0, Tag1 ("Rewrite", 53)), 0); (("setoid_symmetry", 1555), ((Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -29)], (0)), 100000000, 0, -28), 0, (("tactics/rewrite.mli", 88, 2873, 2873), ("tactics/rewrite.mli", 88, 2873, 2916), 0), 0, Tag1 ("Rewrite", 54)), 0); (("setoid_symmetry_in", 1556), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -27), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -26)], (0)), 100000000, 0, -25), 0), 100000000, 0, -24), 0, (("tactics/rewrite.mli", 90, 2918, 2918), ("tactics/rewrite.mli", 90, 2918, 2972), 0), 0, Tag1 ("Rewrite", 55)), 0); (("setoid_reflexivity", 1557), ((Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -23)], (0)), 100000000, 0, -22), 0, (("tactics/rewrite.mli", 92, 2974, 2974), ("tactics/rewrite.mli", 92, 2974, 3020), 0), 0, Tag1 ("Rewrite", 56)), 0); (("setoid_transitivity", 1558), ((Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -21)], (0)), 100000000, 0, -20), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -19)], (0)), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("tactics/rewrite.mli", 94, 3022, 3022), ("tactics/rewrite.mli", 94, 3022, 3086), 0), 0, Tag1 ("Rewrite", 57)), 0); (("apply_strategy", 1559), ((Tag1 (0, (Tag3 ((("strategy", 1545)), 0, (0)), 100000000, 0, -16), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -15), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "Set"), "t"), 0, (0)), 100000000, 0, -14), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -13), (Tag1 (0, (Tag2 ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -11); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -12)]), 100000000, 0, -10), (Tag1 (0, (Tag3 ((("evars", 1542)), 0, (0)), 100000000, 0, -9), (Tag3 ((("rewrite_result", 1544)), 0, (0)), 100000000, 0, -8), 0), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("tactics/rewrite.mli", 97, 3089, 3089), ("tactics/rewrite.mli", 103, 3192, 3217), 0), 0, Tag1 ("Rewrite", 58)), 0); Tag3 (("Internal", 1560), 0, (Tag1 ([(("build_signature", 1561), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -210), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -209), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -208), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -205); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -207)], (0)), 100000000, 0, -206)]), 100000000, 0, -204)], (0)), 100000000, 0, -203)], (0)), 100000000, 0, -202), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -199); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -201)], (0)), 100000000, 0, -200)]), 100000000, 0, -198)], (0)), 100000000, 0, -197), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -190); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -191); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -194); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -196)], (0)), 100000000, 0, -195)]), 100000000, 0, -193)], (0)), 100000000, 0, -192)]), 100000000, 0, -189), 0), 100000000, 0, -188), 0), 100000000, 0, -187), 0), 100000000, 0, -186), 0), 100000000, 0, -185), 0), 100000000, 0, -184), 0, (("tactics/rewrite.mli", 107, 3241, 3241), ("tactics/rewrite.mli", 111, 3381, 3431), 0), 0, Tag1 ("Rewrite", 59)), 0); (("build_morphism_signature", 1562), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -183), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -182), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -181), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -179); (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -180)]), 100000000, 0, -178), 0), 100000000, 0, -177), 0), 100000000, 0, -176), 0), 100000000, 0, -175), 0, (("tactics/rewrite.mli", 112, 3432, 3432), ("tactics/rewrite.mli", 112, 3432, 3536), 0), 0, Tag1 ("Rewrite", 60)), 0); (("default_morphism", 1563), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -174), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -173), (Tag1 (0, (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -165); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -167)], (0)), 100000000, 0, -166)]), 100000000, 0, -164)], (0)), 100000000, 0, -163)], (0)), 100000000, 0, -162); (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -170); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -172)], (0)), 100000000, 0, -171)]), 100000000, 0, -169)], (0)), 100000000, 0, -168)]), 100000000, 0, -161), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -160), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -158); (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -159)]), 100000000, 0, -157), 0), 100000000, 0, -156), 0), 100000000, 0, -155), 0), 100000000, 0, -154), 0), 100000000, 0, -153), 0, (("tactics/rewrite.mli", 113, 3537, 3537), ("tactics/rewrite.mli", 116, 3665, 3687), 0), 0, Tag1 ("Rewrite", 61)), 0)]), 0, (("tactics/rewrite.mli", 105, 3219, 3219), ("tactics/rewrite.mli", 117, 3688, 3691), 0), Tag1 ("Rewrite", 62)), 0, 0)], "Rewrite", [("Rewrite", ("N\180\142\027~\1866\176(\027\128R\t\004t[")); ("Z", ("\253\196\2168\027\199O\134\220\218\031'\1484\233o")); ("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Vmemitcodes", ("wCd\138\165\158DD\241gH\236.\210\197\247")); ("Vmbytecodes", ("\025\021\151\137Dx\149W\236+[\143f\208\160\016")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Unix", (":B72R\011\005Sj\189)\011\239PH\254")); ("UnivSubst", ("\190qu\031mc\130\181\003G]\132\"\219m)")); ("UnivProblem", ("6'\161\018\181\001.\253\000\141a6\171\1727\155")); ("UnivNames", ("%\151_\209%+JM$n\001\232\194n\178N")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UState", ("SD\203\215|\136\n\251\239\208\148\215C\n\167\005")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("Type_errors", ("7\157\162-\214M\206\196\228\191\005v\134\177\144\134")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Tactypes", ("\143E\135*\195\151\144H\151M\011($\017\159\203")); ("Tacred", ("\133d\143\1310z\030\237\232\002\001\025\147\140\215:")); ("Summary", ("\148G\135\226\024L3\246\021\028U\146\164`\253\250")); ("Store", ("/dT\252\145\179pq\216{\181\206\190K+U")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Random", ("\020\005Xq\171\026\218\152X\135\254\023\133zK\200")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("Section", ("\245\207\b\021\142v=\155#w\246}\"4b\006")); ("Safe_typing", (")\250?\164\145\132\241\127\186\152h+\145\"\237l")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("Reductionops", ("\179\023P\218\146Uh\014IS\196C\031q~#")); ("Redexpr", ("\181\250o\134\007\001\242+$\149)\204\226\"\0240")); ("Range", ("\218\130\001r\237\r\144\171\164\021l\155\196\143sg")); ("Proofview_monad", ("\218\196\189S\147\216\129\221\231\224v\228O\024*\239")); ("Proofview", ("\245\140U\027\236\199\199&\242\156\199YG\250tA")); ("Primred", ("\158G\192\182\224\196\144*\174y_E\165\012\137C")); ("Pretype_errors", ("\155\229\201\176\163\234\203C\127\227\141\174j\199\200H")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Pattern", ("\195C\140Wb=\022\222\208\227^K\003\020\215X")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("NumTok", ("vd\023^\251\244B\166\145'\156\196-0\027\169")); ("Notation_term", ("5\002\017\217b\193nc>\239\239\237\244\031\173?")); ("Nativevalues", ("8:\007\025e\226c,\001\171\146#l\210\171\152")); ("Nativelib", ("V\239\205Y1\147E:,\176\196Hy\1483|")); ("Nativecode", ("\190\185\255\006m\012\210\163\138Rz\247\15283\183")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Namegen", ("\187\222\224T\255\020\1808-\212*\164\131\177\157x")); ("Monad", ("\244\171T\157\194p\187\160\149\195{\132\222\020\253\148")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Ltac_pretype", ("\224\"\167\018i:U\172>\188\128$\r\252\020T")); ("Logic_monad", ("\130\157\160Q\163vQ\137\184\2242\209\128\024\220i")); ("Locus", ("_\002\003W\246\181\225\242Uf\139\226\176\174\192I")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Libnames", ("fp\0255\167\162\209\153\137\161\169#\246\193\003\198")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hook", ("\183\194\223\003\155\169',\187\240a;E\b\1396")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Gramlib__Stream", ("\248\\H\205_76\253\136\146\200\031\165\021=t")); ("Gramlib", ("\154\143\210e\021i\246\176\224\194\220\217\007\145\139A")); ("Glob_term", ("\165=a\227\160\153.\021_$\232\209T\236\153O")); ("Genredexpr", ("rz\204\143\007`VgI\195P\168sO\198\012")); ("Genlambda", ("\170}\024\241\141\222\136S\169\219\2212i\134KI")); ("Geninterp", ("2S\151\191\189\159\004\188;\224d\199|U\004\028")); ("Genintern", ("\152Ac\019=n\235\197\141\224T\162\192\148eg")); ("Genarg", ("\1434\015\001\152\196\005s\156\136\195\185\247\b3\t")); ("Ftactic", ("K\172\205\128\241\162\160\201\202\1561o\180L\206:")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evd", ("\211\205p\193\216\129r\006\239oN\142ar\196\175")); ("Evar_kinds", ("\023L\186\132\218}\254\221\185\198\220\200h\003{\021")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Environ", ("\171b\1579\229<\003Z\147IL\225X\254\182\204")); ("Entries", ("\172\201\198\221Ap\027_{\174\141C\021\";p")); ("EConstr", ("\201aW\156\157;N\004\201V\208\006L\166\211)")); ("Dyn", ("\131z`\205v\2306\007x\027&K.?;\169")); ("Declarations", ("\239\137n\019\030w$\182\166z^{\b\206\163\175")); ("DAst", ("\224/\200)\007\184ni\134\b\139\204\241\005w\212")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Conversion", ("\158\150&\195M\tv\127|\029\158RRK\211A")); ("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constrexpr", ("p'r\245\184chL\183\249\"\213]\1741\237")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CUnix", ("\140Zl\153\167\011J\015\005|th\247OTu")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CEphemeron", ("\204I\179-\206(x4\173\229\250\001PkH\151")); ("CDebug", ("^4\210p7\239!3\138\138\213?\239`\250\157")); ("CClosure", ("\167\b\022\241V-\r\253\b\002\000j]\223%\142")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])

  end

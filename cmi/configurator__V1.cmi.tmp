type t
val create :
  ?dest_dir:string -> ?ocamlc:string -> ?log:(string -> unit) -> string -> t
val ocaml_config_var : t -> string -> string option
val ocaml_config_var_exn : t -> string -> string
val c_test :
  t -> ?c_flags:string list -> ?link_flags:string list -> string -> bool
module C_define :
  sig
    module Type : sig type t = Switch | Int | String end
    module Value :
      sig type t = Switch of bool | Int of int | String of string end
    val import :
      t ->
      ?prelude:string ->
      ?c_flags:string list ->
      includes:string list ->
      (string * Type.t) list -> (string * Value.t) list
    val gen_header_file :
      t ->
      fname:string ->
      ?protection_var:string -> (string * Value.t) list -> unit
  end
module Pkg_config :
  sig
    type t
    val get : t/2 -> t option
    type package_conf = { libs : string list; cflags : string list; }
    val query : t -> package:string -> package_conf option
    val query_expr :
      t -> package:string -> expr:string -> package_conf option
    val query_expr_err :
      t -> package:string -> expr:string -> (package_conf, string) result
  end
module Flags :
  sig
    val write_sexp : string -> string list -> unit
    val write_lines : string -> string list -> unit
    val extract_comma_space_separated_words : string -> string list
    val extract_blank_separated_words : string -> string list
    val extract_words : string -> is_word_char:(char -> bool) -> string list
  end
val which : t -> string -> string option
module Process :
  sig
    type result = { exit_code : int; stdout : string; stderr : string; }
    val run :
      t -> ?dir:string -> ?env:string list -> string -> string list -> result
    val run_capture_exn :
      t -> ?dir:string -> ?env:string list -> string -> string list -> string
    val run_ok :
      t -> ?dir:string -> ?env:string list -> string -> string list -> bool
  end
val main :
  ?args:(Arg.key * Arg.spec * Arg.doc) list ->
  name:string -> (t -> unit) -> unit
("DEBUG:rule", [Tag1 (("t", 379), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("otherlibs/configurator/src/v1.mli", 1, 0, 0), ("otherlibs/configurator/src/v1.mli", 1, 0, 6), 0), 0, 0, 0, Tag1 ("Configurator__V1", 0)), 1, 0); (("create", 380), ((Tag1 (Tag1 ("dest_dir"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -65)], (0)), 100000000, 0, -64), (Tag1 (Tag1 ("ocamlc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -63)], (0)), 100000000, 0, -62), (Tag1 (Tag1 ("log"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -61), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -60), 0), 100000000, 0, -59)], (0)), 100000000, 0, -58), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -57), (Tag3 ((("t", 379)), 0, (0)), 100000000, 0, -56), 0), 100000000, 0, -55), 0), 100000000, 0, -54), 0), 100000000, 0, -53), 0), 100000000, 0, -52), 0, (("otherlibs/configurator/src/v1.mli", 3, 8, 8), ("otherlibs/configurator/src/v1.mli", 8, 134, 140), 0), 0, Tag1 ("Configurator__V1", 1)), 0); (("ocaml_config_var", 381), ((Tag1 (0, (Tag3 ((("t", 379)), 0, (0)), 100000000, 0, -51), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -50), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -49)], (0)), 100000000, 0, -48), 0), 100000000, 0, -47), 0), 100000000, 0, -46), 0, (("otherlibs/configurator/src/v1.mli", 11, 225, 225), ("otherlibs/configurator/src/v1.mli", 11, 225, 276), 0), 0, Tag1 ("Configurator__V1", 2)), 0); (("ocaml_config_var_exn", 382), ((Tag1 (0, (Tag3 ((("t", 379)), 0, (0)), 100000000, 0, -45), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -44), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -43), 0), 100000000, 0, -42), 0), 100000000, 0, -41), 0, (("otherlibs/configurator/src/v1.mli", 13, 278, 278), ("otherlibs/configurator/src/v1.mli", 13, 278, 326), 0), 0, Tag1 ("Configurator__V1", 3)), 0); (("c_test", 383), ((Tag1 (0, (Tag3 ((("t", 379)), 0, (0)), 100000000, 0, -40), (Tag1 (Tag1 ("c_flags"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -39)], (0)), 100000000, 0, -38)], (0)), 100000000, 0, -37), (Tag1 (Tag1 ("link_flags"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -36)], (0)), 100000000, 0, -35)], (0)), 100000000, 0, -34), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -33), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -32), 0), 100000000, 0, -31), 0), 100000000, 0, -30), 0), 100000000, 0, -29), 0), 100000000, 0, -28), 0, (("otherlibs/configurator/src/v1.mli", 17, 475, 475), ("otherlibs/configurator/src/v1.mli", 22, 598, 607), 0), 0, Tag1 ("Configurator__V1", 4)), 0); Tag3 (("C_define", 384), 0, (Tag1 ([Tag3 (("Type", 391), 0, (Tag1 ([Tag1 (("t", 395), (0, 0, Tag1 ([(("Switch", 281), (0), 0, (("otherlibs/configurator/src/v1.mli", 27, 664, 670), ("otherlibs/configurator/src/v1.mli", 27, 664, 678), 0), 0, Tag1 ("Configurator__V1", 6)); (("Int", 282), (0), 0, (("otherlibs/configurator/src/v1.mli", 28, 704, 710), ("otherlibs/configurator/src/v1.mli", 28, 704, 715), 0), 0, Tag1 ("Configurator__V1", 7)); (("String", 283), (0), 0, (("otherlibs/configurator/src/v1.mli", 29, 716, 722), ("otherlibs/configurator/src/v1.mli", 29, 716, 730), 0), 0, Tag1 ("Configurator__V1", 8))], 0), 1, 0, 0, 0, 0, 0, (("otherlibs/configurator/src/v1.mli", 26, 651, 655), ("otherlibs/configurator/src/v1.mli", 29, 716, 730), 0), 0, 1, 0, Tag1 ("Configurator__V1", 5)), 1, 0)]), 0, (("otherlibs/configurator/src/v1.mli", 25, 631, 633), ("otherlibs/configurator/src/v1.mli", 30, 731, 736), 0), Tag1 ("Configurator__V1", 9)), 0, 0); Tag3 (("Value", 392), 0, (Tag1 ([Tag1 (("t", 396), (0, 0, Tag1 ([(("Switch", 286), ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -100)]), 0, (("otherlibs/configurator/src/v1.mli", 34, 772, 778), ("otherlibs/configurator/src/v1.mli", 34, 772, 794), 0), 0, Tag1 ("Configurator__V1", 11)); (("Int", 287), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -101)]), 0, (("otherlibs/configurator/src/v1.mli", 35, 795, 801), ("otherlibs/configurator/src/v1.mli", 35, 795, 813), 0), 0, Tag1 ("Configurator__V1", 12)); (("String", 288), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -102)]), 0, (("otherlibs/configurator/src/v1.mli", 36, 814, 820), ("otherlibs/configurator/src/v1.mli", 36, 814, 838), 0), 0, Tag1 ("Configurator__V1", 13))], 0), 1, 0, 0, 0, 0, 0, (("otherlibs/configurator/src/v1.mli", 33, 759, 763), ("otherlibs/configurator/src/v1.mli", 36, 814, 838), 0), 0, 0, 0, Tag1 ("Configurator__V1", 10)), 1, 0)]), 0, (("otherlibs/configurator/src/v1.mli", 32, 738, 740), ("otherlibs/configurator/src/v1.mli", 37, 839, 844), 0), Tag1 ("Configurator__V1", 14)), 0, 0); (("import", 393), ((Tag1 (0, (Tag3 ((("t", 379)), 0, (0)), 100000000, 0, -99), (Tag1 (Tag1 ("prelude"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -98)], (0)), 100000000, 0, -97), (Tag1 (Tag1 ("c_flags"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -96)], (0)), 100000000, 0, -95)], (0)), 100000000, 0, -94), (Tag1 (("includes"), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -93)], (0)), 100000000, 0, -92), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -90); (Tag3 (Tag1 ((("Type", 391)), "t"), 0, (0)), 100000000, 0, -91)]), 100000000, 0, -89)], (0)), 100000000, 0, -88), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -86); (Tag3 (Tag1 ((("Value", 392)), "t"), 0, (0)), 100000000, 0, -87)]), 100000000, 0, -85)], (0)), 100000000, 0, -84), 0), 100000000, 0, -83), 0), 100000000, 0, -82), 0), 100000000, 0, -81), 0), 100000000, 0, -80), 0), 100000000, 0, -79), 0, (("otherlibs/configurator/src/v1.mli", 45, 1112, 1114), ("otherlibs/configurator/src/v1.mli", 53, 1375, 1405), 0), 0, Tag1 ("Configurator__V1", 15)), 0); (("gen_header_file", 394), ((Tag1 (0, (Tag3 ((("t", 379)), 0, (0)), 100000000, 0, -78), (Tag1 (("fname"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -77), (Tag1 (Tag1 ("protection_var"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -76)], (0)), 100000000, 0, -75), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -73); (Tag3 (Tag1 ((("Value", 392)), "t"), 0, (0)), 100000000, 0, -74)]), 100000000, 0, -72)], (0)), 100000000, 0, -71), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -70), 0), 100000000, 0, -69), 0), 100000000, 0, -68), 0), 100000000, 0, -67), 0), 100000000, 0, -66), 0, (("otherlibs/configurator/src/v1.mli", 64, 1692, 1694), ("otherlibs/configurator/src/v1.mli", 69, 1804, 1815), 0), 0, Tag1 ("Configurator__V1", 16)), 0)]), 0, (("otherlibs/configurator/src/v1.mli", 24, 609, 609), ("otherlibs/configurator/src/v1.mli", 70, 1816, 1819), 0), Tag1 ("Configurator__V1", 17)), 0, 0); Tag3 (("Pkg_config", 385), 0, (Tag1 ([Tag1 (("t", 397), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("otherlibs/configurator/src/v1.mli", 72, 1821, 1841), ("otherlibs/configurator/src/v1.mli", 107, 3340, 3369), 0), 0, 0, 0, Tag1 ("Configurator__V1", 19)), 1, 0); (("get", 398), ((Tag1 (0, (Tag3 ((("t", 379)), 0, (0)), 100000000, 0, -133), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 397)), 0, (0)), 100000000, 0, -132)], (0)), 100000000, 0, -131), 0), 100000000, 0, -130), 0, (("otherlibs/configurator/src/v1.mli", 72, 1821, 1841), ("otherlibs/configurator/src/v1.mli", 107, 3340, 3369), 0), 0, Tag1 ("Configurator__V1", 20)), 0); Tag1 (("package_conf", 399), (0, 0, [[(("libs", 297), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -127)], (0)), 100000000, 0, -126), (("otherlibs/configurator/src/v1.mli", 72, 1821, 1841), ("otherlibs/configurator/src/v1.mli", 107, 3340, 3369), 0), 0, Tag1 ("Configurator__V1", 22)); (("cflags", 298), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -129)], (0)), 100000000, 0, -128), (("otherlibs/configurator/src/v1.mli", 72, 1821, 1841), ("otherlibs/configurator/src/v1.mli", 107, 3340, 3369), 0), 0, Tag1 ("Configurator__V1", 23))]], 1, 0, 0, 0, 0, 0, (("otherlibs/configurator/src/v1.mli", 72, 1821, 1841), ("otherlibs/configurator/src/v1.mli", 107, 3340, 3369), 0), 0, 0, 0, Tag1 ("Configurator__V1", 21)), 1, 0); (("query", 400), ((Tag1 (0, (Tag3 ((("t", 397)), 0, (0)), 100000000, 0, -125), (Tag1 (("package"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -124), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("package_conf", 399)), 0, (0)), 100000000, 0, -123)], (0)), 100000000, 0, -122), 0), 100000000, 0, -121), 0), 100000000, 0, -120), 0, (("otherlibs/configurator/src/v1.mli", 72, 1821, 1841), ("otherlibs/configurator/src/v1.mli", 107, 3340, 3369), 0), 0, Tag1 ("Configurator__V1", 24)), 0); (("query_expr", 401), ((Tag1 (0, (Tag3 ((("t", 397)), 0, (0)), 100000000, 0, -119), (Tag1 (("package"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -118), (Tag1 (("expr"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -117), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("package_conf", 399)), 0, (0)), 100000000, 0, -116)], (0)), 100000000, 0, -115), 0), 100000000, 0, -114), 0), 100000000, 0, -113), 0), 100000000, 0, -112), 0, (("otherlibs/configurator/src/v1.mli", 72, 1821, 1841), ("otherlibs/configurator/src/v1.mli", 107, 3340, 3369), 0), [(("ocaml.deprecated", (("otherlibs/configurator/src/v1.mli", 93, 2697, 2704), ("otherlibs/configurator/src/v1.mli", 93, 2697, 2720), 0)), ([([(Tag1 (Tag2 ("please use [query_expr_err]", (("otherlibs/configurator/src/v1.mli", 93, 2697, 2722), ("otherlibs/configurator/src/v1.mli", 93, 2697, 2749), 0), 0)), (("otherlibs/configurator/src/v1.mli", 93, 2697, 2721), ("otherlibs/configurator/src/v1.mli", 93, 2697, 2750), 0), 0, 0)], (("otherlibs/configurator/src/v1.mli", 93, 2697, 2721), ("otherlibs/configurator/src/v1.mli", 93, 2697, 2750), 0))]), (("otherlibs/configurator/src/v1.mli", 93, 2697, 2701), ("otherlibs/configurator/src/v1.mli", 93, 2697, 2751), 0))], Tag1 ("Configurator__V1", 25)), 0); (("query_expr_err", 402), ((Tag1 (0, (Tag3 ((("t", 397)), 0, (0)), 100000000, 0, -111), (Tag1 (("package"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -110), (Tag1 (("expr"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -109), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((("package_conf", 399)), 0, (0)), 100000000, 0, -107); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -108)], (0)), 100000000, 0, -106), 0), 100000000, 0, -105), 0), 100000000, 0, -104), 0), 100000000, 0, -103), 0, (("otherlibs/configurator/src/v1.mli", 72, 1821, 1841), ("otherlibs/configurator/src/v1.mli", 107, 3340, 3369), 0), 0, Tag1 ("Configurator__V1", 26)), 0)]), 0, (("otherlibs/configurator/src/v1.mli", 72, 1821, 1821), ("otherlibs/configurator/src/v1.mli", 107, 3340, 3369), 0), Tag1 ("Configurator__V1", 28)), 0, 0); Tag3 (("Flags", 386), 0, (Tag1 ([(("write_sexp", 403), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -161), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -160)], (0)), 100000000, 0, -159), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -158), 0), 100000000, 0, -157), 0), 100000000, 0, -156), 0, (("otherlibs/configurator/src/v1.mli", 113, 3571, 3573), ("otherlibs/configurator/src/v1.mli", 113, 3571, 3619), 0), 0, Tag1 ("Configurator__V1", 29)), 0); (("write_lines", 404), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -155), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -154)], (0)), 100000000, 0, -153), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -152), 0), 100000000, 0, -151), 0), 100000000, 0, -150), 0, (("otherlibs/configurator/src/v1.mli", 118, 3812, 3814), ("otherlibs/configurator/src/v1.mli", 118, 3812, 3861), 0), 0, Tag1 ("Configurator__V1", 30)), 0); (("extract_comma_space_separated_words", 405), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -149), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -148)], (0)), 100000000, 0, -147), 0), 100000000, 0, -146), 0, (("otherlibs/configurator/src/v1.mli", 122, 4013, 4015), ("otherlibs/configurator/src/v1.mli", 122, 4013, 4078), 0), 0, Tag1 ("Configurator__V1", 31)), 0); (("extract_blank_separated_words", 406), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -145), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -144)], (0)), 100000000, 0, -143), 0), 100000000, 0, -142), 0, (("otherlibs/configurator/src/v1.mli", 126, 4208, 4210), ("otherlibs/configurator/src/v1.mli", 126, 4208, 4267), 0), 0, Tag1 ("Configurator__V1", 32)), 0); (("extract_words", 407), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -141), (Tag1 (("is_word_char"), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -140), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -139), 0), 100000000, 0, -138), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -137)], (0)), 100000000, 0, -136), 0), 100000000, 0, -135), 0), 100000000, 0, -134), 0, (("otherlibs/configurator/src/v1.mli", 132, 4551, 4553), ("otherlibs/configurator/src/v1.mli", 132, 4551, 4625), 0), 0, Tag1 ("Configurator__V1", 33)), 0)]), 0, (("otherlibs/configurator/src/v1.mli", 109, 3371, 3371), ("otherlibs/configurator/src/v1.mli", 133, 4626, 4629), 0), Tag1 ("Configurator__V1", 34)), 0, 0); (("which", 387), ((Tag1 (0, (Tag3 ((("t", 379)), 0, (0)), 100000000, 0, -27), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -26), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -25)], (0)), 100000000, 0, -24), 0), 100000000, 0, -23), 0), 100000000, 0, -22), 0, (("otherlibs/configurator/src/v1.mli", 138, 4812, 4812), ("otherlibs/configurator/src/v1.mli", 138, 4812, 4852), 0), 0, Tag1 ("Configurator__V1", 35)), 0); Tag3 (("Process", 388), 0, (Tag1 ([Tag1 (("result", 408), (0, 0, [[(("exit_code", 324), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -207), (("otherlibs/configurator/src/v1.mli", 143, 4925, 4931), ("otherlibs/configurator/src/v1.mli", 144, 4947, 4952), 0), 0, Tag1 ("Configurator__V1", 37)); (("stdout", 325), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -208), (("otherlibs/configurator/src/v1.mli", 144, 4947, 4953), ("otherlibs/configurator/src/v1.mli", 145, 4969, 4974), 0), 0, Tag1 ("Configurator__V1", 38)); (("stderr", 326), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -209), (("otherlibs/configurator/src/v1.mli", 145, 4969, 4975), ("otherlibs/configurator/src/v1.mli", 145, 4969, 4990), 0), 0, Tag1 ("Configurator__V1", 39))]], 1, 0, 0, 0, 0, 0, (("otherlibs/configurator/src/v1.mli", 142, 4909, 4911), ("otherlibs/configurator/src/v1.mli", 146, 4991, 4996), 0), 0, 0, 0, Tag1 ("Configurator__V1", 36)), 1, 0); (("run", 409), ((Tag1 (0, (Tag3 ((("t", 379)), 0, (0)), 100000000, 0, -206), (Tag1 (Tag1 ("dir"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -205)], (0)), 100000000, 0, -204), (Tag1 (Tag1 ("env"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -203)], (0)), 100000000, 0, -202)], (0)), 100000000, 0, -201), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -200), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -199)], (0)), 100000000, 0, -198), (Tag3 ((("result", 408)), 0, (0)), 100000000, 0, -197), 0), 100000000, 0, -196), 0), 100000000, 0, -195), 0), 100000000, 0, -194), 0), 100000000, 0, -193), 0), 100000000, 0, -192), 0, (("otherlibs/configurator/src/v1.mli", 155, 5340, 5342), ("otherlibs/configurator/src/v1.mli", 155, 5340, 5423), 0), 0, Tag1 ("Configurator__V1", 40)), 0); (("run_capture_exn", 410), ((Tag1 (0, (Tag3 ((("t", 379)), 0, (0)), 100000000, 0, -191), (Tag1 (Tag1 ("dir"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -190)], (0)), 100000000, 0, -189), (Tag1 (Tag1 ("env"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -188)], (0)), 100000000, 0, -187)], (0)), 100000000, 0, -186), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -185), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -184)], (0)), 100000000, 0, -183), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -182), 0), 100000000, 0, -181), 0), 100000000, 0, -180), 0), 100000000, 0, -179), 0), 100000000, 0, -178), 0), 100000000, 0, -177), 0, (("otherlibs/configurator/src/v1.mli", 160, 5600, 5602), ("otherlibs/configurator/src/v1.mli", 166, 5707, 5720), 0), 0, Tag1 ("Configurator__V1", 41)), 0); (("run_ok", 411), ((Tag1 (0, (Tag3 ((("t", 379)), 0, (0)), 100000000, 0, -176), (Tag1 (Tag1 ("dir"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -175)], (0)), 100000000, 0, -174), (Tag1 (Tag1 ("env"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -173)], (0)), 100000000, 0, -172)], (0)), 100000000, 0, -171), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -170), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -169)], (0)), 100000000, 0, -168), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -167), 0), 100000000, 0, -166), 0), 100000000, 0, -165), 0), 100000000, 0, -164), 0), 100000000, 0, -163), 0), 100000000, 0, -162), 0, (("otherlibs/configurator/src/v1.mli", 170, 5884, 5886), ("otherlibs/configurator/src/v1.mli", 170, 5884, 5968), 0), 0, Tag1 ("Configurator__V1", 42)), 0)]), 0, (("otherlibs/configurator/src/v1.mli", 141, 4888, 4888), ("otherlibs/configurator/src/v1.mli", 171, 5969, 5972), 0), Tag1 ("Configurator__V1", 43)), 0, 0); (("main", 389), ((Tag1 (Tag1 ("args"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Arg"), "key"), 0, (0)), 100000000, 0, -19); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Arg"), "spec"), 0, (0)), 100000000, 0, -20); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Arg"), "doc"), 0, (0)), 100000000, 0, -21)]), 100000000, 0, -18)], (0)), 100000000, 0, -17)], (0)), 100000000, 0, -16), (Tag1 (("name"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -15), (Tag1 (0, (Tag1 (0, (Tag3 ((("t", 379)), 0, (0)), 100000000, 0, -14), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -13), 0), 100000000, 0, -12), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11), 0), 100000000, 0, -10), 0), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("otherlibs/configurator/src/v1.mli", 174, 6027, 6027), ("otherlibs/configurator/src/v1.mli", 174, 6027, 6117), 0), 0, Tag1 ("Configurator__V1", 44)), 0); (("die", 390), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format4"), [((("a")), 100000000, 0, -3); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6); ((("b")), 100000000, 0, -7)], (0)), 100000000, 0, -4), ((("a")), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("otherlibs/configurator/src/v1.mli", 178, 6233, 6233), ("otherlibs/configurator/src/v1.mli", 178, 6233, 6279), 0), 0, Tag1 ("Configurator__V1", 45)), 0)], "Configurator__V1", [("Configurator__V1", ("1Am\229\237*^\012I/\218vN\221\246a")); ("Stdlib__Arg", ("\024%=\206\198p\149Y\007\004\216,&\254#\207")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Configurator__", (" \146\181\248=\016,\018W\136I\247\b{\137/")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
val die : ('a, unit, string, 'b) format4 -> 'a

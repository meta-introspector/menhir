module Std : sig module Hash = Base__.Hash end
type 'a hash_fold = Std.Hash.state -> 'a -> Std.Hash.state
module Hashable :
  sig
    module type S =
      sig
        type t
        val hash_fold_t : t hash_fold
        val hash : t -> Std.Hash.hash_value
      end
    module type S1 =
      sig type 'a t val hash_fold_t : 'a hash_fold -> 'a t hash_fold end
    module type S2 =
      sig
        type ('a, 'b) t
        val hash_fold_t :
          'a hash_fold -> 'b hash_fold -> ('a, 'b) t hash_fold
      end
    module type S3 =
      sig
        type ('a, 'b, 'c) t
        val hash_fold_t :
          'a hash_fold ->
          'b hash_fold -> 'c hash_fold -> ('a, 'b, 'c) t hash_fold
      end("DEBUG:rule", [Tag3 (("Std", 469), 0, (Tag1 ([Tag3 (("Hash", 472), 1, (Tag3 (Tag1 ((Tag2 ("Base__")), "Hash")), 0, (("src/ppx_hash_lib.ml", 3, 105, 107), ("src/ppx_hash_lib.ml", 3, 105, 125), 0), Tag1 ("Base__Ppx_hash_lib", 0)), 0, 0)]), 0, (("src/ppx_hash_lib.ml", 2, 85, 85), ("src/ppx_hash_lib.ml", 4, 154, 157), 0), Tag1 ("Base__Ppx_hash_lib", 1)), 0, 0); Tag1 (("hash_fold", 470), ([((("a")), 100000000, 0, -5)], 1, 0, 1, ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((("Std", 469)), "Hash"), "state"), 0, (0)), 100000000, 0, -6), (Tag1 (0, ((("a")), 100000000, 0, -5), (Tag3 (Tag1 (Tag1 ((("Std", 469)), "Hash"), "state"), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2)), [46], [0], 0, 0, (("src/ppx_hash_lib.ml", 6, 159, 159), ("src/ppx_hash_lib.ml", 6, 159, 217), 0), 0, 0, 0, Tag1 ("Base__Ppx_hash_lib", 2)), 1, 0); Tag3 (("Hashable", 471), 0, (Tag1 ([Tag4 (("S", 473), ((Tag1 ([Tag1 (("t", 477), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/ppx_hash_lib.ml", 10, 266, 270), ("src/ppx_hash_lib.ml", 10, 266, 276), 0), 0, 0, 0, Tag1 ("Base__Ppx_hash_lib", 3)), 1, 0); (("hash_fold_t", 478), ((Tag3 ((("hash_fold", 470)), [(Tag3 ((("t", 477)), 0, (0)), 100000000, 0, -11)], (0)), 100000000, 0, -10), 0, (("src/ppx_hash_lib.ml", 12, 278, 282), ("src/ppx_hash_lib.ml", 12, 278, 311), 0), 0, Tag1 ("Base__Ppx_hash_lib", 4)), 0); (("hash", 479), ((Tag1 (0, (Tag3 ((("t", 477)), 0, (0)), 100000000, 0, -9), (Tag3 (Tag1 (Tag1 ((("Std", 469)), "Hash"), "hash_value"), 0, (0)), 100000000, 0, -8), 0), 100000000, 0, -7), 0, (("src/ppx_hash_lib.ml", 13, 312, 316), ("src/ppx_hash_lib.ml", 13, 312, 351), 0), 0, Tag1 ("Base__Ppx_hash_lib", 5)), 0)])), 0, (("src/ppx_hash_lib.ml", 9, 244, 246), ("src/ppx_hash_lib.ml", 14, 352, 357), 0), Tag1 ("Base__Ppx_hash_lib", 6)), 0); Tag4 (("S1", 474), ((Tag1 ([Tag1 (("t", 480), ([((("a")), 100000000, 0, -17)], 1, 0, 1, 0, [7], [2], 0, 0, (("src/ppx_hash_lib.ml", 17, 382, 386), ("src/ppx_hash_lib.ml", 17, 382, 395), 0), 0, 0, 0, Tag1 ("Base__Ppx_hash_lib", 7)), 1, 0); (("hash_fold_t", 481), ((Tag1 (0, (Tag3 ((("hash_fold", 470)), [((("a")), 100000000, 0, -15)], (0)), 100000000, 0, -16), (Tag3 ((("hash_fold", 470)), [(Tag3 ((("t", 480)), [((("a")), 100000000, 0, -15)], (0)), 100000000, 0, -14)], (0)), 100000000, 0, -13), 0), 100000000, 0, -12), 0, (("src/ppx_hash_lib.ml", 19, 397, 401), ("src/ppx_hash_lib.ml", 19, 397, 449), 0), 0, Tag1 ("Base__Ppx_hash_lib", 8)), 0)])), 0, (("src/ppx_hash_lib.ml", 16, 359, 361), ("src/ppx_hash_lib.ml", 20, 450, 455), 0), Tag1 ("Base__Ppx_hash_lib", 9)), 0); Tag4 (("S2", 475), ((Tag1 ([Tag1 (("t", 482), ([((("a")), 100000000, 0, -26); ((("b")), 100000000, 0, -27)], 2, 0, 1, 0, [7; 7], [2; 2], 0, 0, (("src/ppx_hash_lib.ml", 23, 480, 484), ("src/ppx_hash_lib.ml", 23, 480, 499), 0), 0, 0, 0, Tag1 ("Base__Ppx_hash_lib", 10)), 1, 0); (("hash_fold_t", 483), ((Tag1 (0, (Tag3 ((("hash_fold", 470)), [((("a")), 100000000, 0, -22)], (0)), 100000000, 0, -25), (Tag1 (0, (Tag3 ((("hash_fold", 470)), [((("b")), 100000000, 0, -23)], (0)), 100000000, 0, -24), (Tag3 ((("hash_fold", 470)), [(Tag3 ((("t", 482)), [((("a")), 100000000, 0, -22); ((("b")), 100000000, 0, -23)], (0)), 100000000, 0, -21)], (0)), 100000000, 0, -20), 0), 100000000, 0, -19), 0), 100000000, 0, -18), 0, (("src/ppx_hash_lib.ml", 25, 501, 505), ("src/ppx_hash_lib.ml", 25, 501, 575), 0), 0, Tag1 ("Base__Ppx_hash_lib", 11)), 0)])), 0, (("src/ppx_hash_lib.ml", 22, 457, 459), ("src/ppx_hash_lib.ml", 26, 576, 581), 0), Tag1 ("Base__Ppx_hash_lib", 12)), 0); Tag4 (("S3", 476), ((Tag1 ([Tag1 (("t", 484), ([((("a")), 100000000, 0, -39); ((("b")), 100000000, 0, -40); ((("c")), 100000000, 0, -41)], 3, 0, 1, 0, [7; 7; 7], [2; 2; 2], 0, 0, (("src/ppx_hash_lib.ml", 29, 606, 610), ("src/ppx_hash_lib.ml", 29, 606, 629), 0), 0, 0, 0, Tag1 ("Base__Ppx_hash_lib", 13)), 1, 0); (("hash_fold_t", 485), ((Tag1 (0, (Tag3 ((("hash_fold", 470)), [((("a")), 100000000, 0, -33)], (0)), 100000000, 0, -38), (Tag1 (0, (Tag3 ((("hash_fold", 470)), [((("b")), 100000000, 0, -34)], (0)), 100000000, 0, -37), (Tag1 (0, (Tag3 ((("hash_fold", 470)), [((("c")), 100000000, 0, -35)], (0)), 100000000, 0, -36), (Tag3 ((("hash_fold", 470)), [(Tag3 ((("t", 484)), [((("a")), 100000000, 0, -33); ((("b")), 100000000, 0, -34); ((("c")), 100000000, 0, -35)], (0)), 100000000, 0, -32)], (0)), 100000000, 0, -31), 0), 100000000, 0, -30), 0), 100000000, 0, -29), 0), 100000000, 0, -28), 0, (("src/ppx_hash_lib.ml", 31, 631, 635), ("src/ppx_hash_lib.ml", 35, 717, 750), 0), 0, Tag1 ("Base__Ppx_hash_lib", 14)), 0)])), 0, (("src/ppx_hash_lib.ml", 28, 583, 585), ("src/ppx_hash_lib.ml", 36, 751, 756), 0), Tag1 ("Base__Ppx_hash_lib", 15)), 0)]), 0, (("src/ppx_hash_lib.ml", 8, 219, 219), ("src/ppx_hash_lib.ml", 37, 757, 760), 0), Tag1 ("Base__Ppx_hash_lib", 16)), 0, 0)], "Base__Ppx_hash_lib", [("Base__Ppx_hash_lib", ("\199\141\178\193\006\209L\007^\020(\131\224sn8")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__StdLabels", (".\193\n\229\139\017\212C-ZA\\kz-\128")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__MoreLabels", ("\248\232\248\254`<\230\241\161U\193U\1466J\238")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shadow_stdlib", ("\219zi\164\203\158e)\232\221\196\168\138x\142\018")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Base_internalhash_types", ("0\148#2\226\223\018\135\173>!\020\237\017\255\149")); ("Base__Poly0", ("\230;\143\234\255.H\132KOe7\155\\\023f")); ("Base__Import0", ("\156\129U\197Y[\\\153\017Ho\203\173\204\220\020")); ("Base__Hash_intf", ("h\004P\218\1531G\127\212\208A\024\140\164iq")); ("Base__Hash", ("\206Rc\194\234{s3\248\165\024\162\203{\206\206")); ("Base__Bool0", ("\177f\254p\023\143&\239\020\136\206\242~\018F\251")); ("Base__", ("p\252\007\139\128\163W\025+\0225\001\246|P\158"))], [(0)])

  end

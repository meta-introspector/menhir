type compile_time_constant =
    Big_endian
  | Word_size
  | Int_size
  | Max_wosize
  | Ostype_unix
  | Ostype_win32
  | Ostype_cygwin
  | Backend_type
type immediate_or_pointer = Immediate | Pointer
type initialization_or_assignment =
    Assignment
  | Heap_initialization
  | Root_initialization
type is_safe = Safe | Unsafe
type primitive =
    Pbytes_to_string
  | Pbytes_of_string
  | Pignore
  | Pgetglobal of Ident.t
  | Psetglobal of Ident.t
  | Pmakeblock of int * Asttypes.mutable_flag * block_shape
  | Pfield of int * immediate_or_pointer * Asttypes.mutable_flag
  | Pfield_computed
  | Psetfield of int * immediate_or_pointer * initialization_or_assignment
  | Psetfield_computed of immediate_or_pointer * initialization_or_assignment
  | Pfloatfield of int
  | Psetfloatfield of int * initialization_or_assignment
  | Pduprecord of Types.record_representation * int
  | Prunstack
  | Pperform
  | Presume
  | Preperform
  | Pccall of Primitive.description
  | Praise of raise_kind
  | Psequand
  | Psequor
  | Pnot
  | Pnegint
  | Paddint
  | Psubint
  | Pmulint
  | Pdivint of is_safe
  | Pmodint of is_safe
  | Pandint
  | Porint
  | Pxorint
  | Plslint
  | Plsrint
  | Pasrint
  | Pintcomp of integer_comparison
  | Pcompare_ints
  | Pcompare_floats
  | Pcompare_bints of boxed_integer
  | Poffsetint of int
  | Poffsetref of int
  | Pintoffloat
  | Pfloatofint
  | Pnegfloat
  | Pabsfloat
  | Paddfloat
  | Psubfloat
  | Pmulfloat
  | Pdivfloat
  | Pfloatcomp of float_comparison
  | Pstringlength
  | Pstringrefu
  | Pstringrefs
  | Pbyteslength
  | Pbytesrefu
  | Pbytessetu
  | Pbytesrefs
  | Pbytessets
  | Pmakearray of array_kind * Asttypes.mutable_flag
  | Pduparray of array_kind * Asttypes.mutable_flag
  | Parraylength of array_kind
  | Parrayrefu of array_kind
  | Parraysetu of array_kind
  | Parrayrefs of array_kind
  | Parraysets of array_kind
  | Pisint
  | Pisout
  | Pbintofint of boxed_integer
  | Pintofbint of boxed_integer
  | Pcvtbint of boxed_integer * boxed_integer
  | Pnegbint of boxed_integer
  | Paddbint of boxed_integer
  | Psubbint of boxed_integer
  | Pmulbint of boxed_integer
  | Pdivbint of { size : boxed_integer; is_safe : is_safe; }
  | Pmodbint of { size : boxed_integer; is_safe : is_safe; }
  | Pandbint of boxed_integer
  | Porbint of boxed_integer
  | Pxorbint of boxed_integer
  | Plslbint of boxed_integer
  | Plsrbint of boxed_integer
  | Pasrbint of boxed_integer
  | Pbintcomp of boxed_integer * integer_comparison
  | Pbigarrayref of bool * int * bigarray_kind * bigarray_layout
  | Pbigarrayset of bool * int * bigarray_kind * bigarray_layout
  | Pbigarraydim of int
  | Pstring_load_16 of bool
  | Pstring_load_32 of bool
  | Pstring_load_64 of bool
  | Pbytes_load_16 of bool
  | Pbytes_load_32 of bool
  | Pbytes_load_64 of bool
  | Pbytes_set_16 of bool
  | Pbytes_set_32 of bool
  | Pbytes_set_64 of bool
  | Pbigstring_load_16 of bool
  | Pbigstring_load_32 of bool
  | Pbigstring_load_64 of bool
  | Pbigstring_set_16 of bool
  | Pbigstring_set_32 of bool
  | Pbigstring_set_64 of bool
  | Pctconst of compile_time_constant
  | Pbswap16
  | Pbbswap of boxed_integer
  | Pint_as_pointer
  | Patomic_load of { immediate_or_pointer : immediate_or_pointer; }
  | Patomic_exchange
  | Patomic_cas
  | Patomic_fetch_add
  | Popaque
  | Pdls_get
and integer_comparison = Ceq | Cne | Clt | Cgt | Cle | Cge
and float_comparison =
    CFeq
  | CFneq
  | CFlt
  | CFnlt
  | CFgt
  | CFngt
  | CFle
  | CFnle
  | CFge
  | CFnge
and array_kind = Pgenarray | Paddrarray | Pintarray | Pfloatarray
and value_kind =
    Pgenval
  | Pfloatval
  | Pboxedintval of boxed_integer
  | Pintval
and block_shape = value_kind list option
and boxed_integer = Primitive.boxed_integer = Pnativeint | Pint32 | Pint64
and bigarray_kind =
    Pbigarray_unknown
  | Pbigarray_float32
  | Pbigarray_float64
  | Pbigarray_sint8
  | Pbigarray_uint8
  | Pbigarray_sint16
  | Pbigarray_uint16
  | Pbigarray_int32
  | Pbigarray_int64
  | Pbigarray_caml_int
  | Pbigarray_native_int
  | Pbigarray_complex32
  | Pbigarray_complex64
and bigarray_layout =
    Pbigarray_unknown_layout
  | Pbigarray_c_layout
  | Pbigarray_fortran_layout
and raise_kind = Raise_regular | Raise_reraise | Raise_notrace
val equal_primitive : primitive -> primitive -> bool
val equal_value_kind : value_kind -> value_kind -> bool
val equal_boxed_integer : boxed_integer -> boxed_integer -> bool
type structured_constant =
    Const_base of Asttypes.constant
  | Const_block of int * structured_constant list
  | Const_float_array of string list
  | Const_immstring of string
type tailcall_attribute = Tailcall_expectation of bool | Default_tailcall
type inline_attribute =
    Always_inline
  | Never_inline
  | Hint_inline
  | Unroll of int
  | Default_inline
val equal_inline_attribute : inline_attribute -> inline_attribute -> bool
type specialise_attribute =
    Always_specialise
  | Never_specialise
  | Default_specialise
val equal_specialise_attribute :
  specialise_attribute -> specialise_attribute -> bool
type local_attribute = Always_local | Never_local | Default_local
type poll_attribute = Error_poll | Default_poll
type function_kind = Curried | Tupled
type let_kind = Strict | Alias | StrictOpt
type meth_kind = Self | Public | Cached
val equal_meth_kind : meth_kind -> meth_kind -> bool
type shared_code = (int * int) list
type function_attribute = {
  inline : inline_attribute;
  specialise : specialise_attribute;
  local : local_attribute;
  poll : poll_attribute;
  is_a_functor : bool;
  stub : bool;
  tmc_candidate : bool;
}
type scoped_location = Debuginfo.Scoped_location.t
type lambda =
    Lvar of Ident.t
  | Lmutvar of Ident.t
  | Lconst of structured_constant
  | Lapply of lambda_apply
  | Lfunction of lfunction
  | Llet of let_kind * value_kind * Ident.t * lambda * lambda
  | Lmutlet of value_kind * Ident.t * lambda * lambda
  | Lletrec of (Ident.t * lambda) list * lambda
  | Lprim of primitive * lambda list * scoped_location
  | Lswitch of lambda * lambda_switch * scoped_location
  | Lstringswitch of lambda * (string * lambda) list * lambda option *
      scoped_location
  | Lstaticraise of int * lambda list
  | Lstaticcatch of lambda * (int * (Ident.t * value_kind) list) * lambda
  | Ltrywith of lambda * Ident.t * lambda
  | Lifthenelse of lambda * lambda * lambda
  | Lsequence of lambda * lambda
  | Lwhile of lambda * lambda
  | Lfor of Ident.t * lambda * lambda * Asttypes.direction_flag * lambda
  | Lassign of Ident.t * lambda
  | Lsend of meth_kind * lambda * lambda * lambda list * scoped_location
  | Levent of lambda * lambda_event
  | Lifused of Ident.t * lambda
and lfunction = private {
  kind : function_kind;
  params : (Ident.t * value_kind) list;
  return : value_kind;
  body : lambda;
  attr : function_attribute;
  loc : scoped_location;
}
and lambda_apply = {
  ap_func : lambda;
  ap_args : lambda list;
  ap_loc : scoped_location;
  ap_tailcall : tailcall_attribute;
  ap_inlined : inline_attribute;
  ap_specialised : specialise_attribute;
}
and lambda_switch = {
  sw_numconsts : int;
  sw_consts : (int * lambda) list;
  sw_numblocks : int;
  sw_blocks : (int * lambda) list;
  sw_failaction : lambda option;
}
and lambda_event = {
  lev_loc : scoped_location;
  lev_kind : lambda_event_kind;
  lev_repr : int ref option;
  lev_env : Env.t;
}
and lambda_event_kind =
    Lev_before
  | Lev_after of Types.type_expr
  | Lev_function
  | Lev_pseudo
type program = {
  module_ident : Ident.t;
  main_module_block_size : int;
  required_globals : Ident.Set.t;
  code : lambda;
}
val make_key : lambda -> lambda option
val const_unit : structured_constant
val const_int : int -> structured_constant
val lambda_unit : lambda
val name_lambda : let_kind -> lambda -> (Ident.t -> lambda) -> lambda
val name_lambda_list : lambda list -> (lambda list -> lambda) -> lambda
val lfunction :
  kind:function_kind ->
  params:(Ident.t * value_kind) list ->
  return:value_kind ->
  body:lambda -> attr:function_attribute -> loc:scoped_location -> lambda
val iter_head_constructor : (lambda -> unit) -> lambda -> unit
val shallow_iter :
  tail:(lambda -> unit) -> non_tail:(lambda -> unit) -> lambda -> unit
val transl_prim : string -> string -> lambda
val free_variables : lambda -> Ident.Set.t
val transl_module_path : scoped_location -> Env.t -> Path.t -> lambda
val transl_value_path : scoped_location -> Env.t -> Path.t -> lambda
val transl_extension_path : scoped_location -> Env.t -> Path.t -> lambda
val transl_class_path : scoped_location -> Env.t -> Path.t -> lambda
val make_sequence : ('a -> lambda) -> 'a list -> lambda
val subst :
  (Ident.t -> Types.value_description -> Env.t -> Env.t) ->
  ?freshen_bound_variables:bool -> lambda Ident.Map.t -> lambda -> lambda
val rename : Ident.t Ident.Map.t -> lambda -> lambda
val duplicate : lambda -> lambda
val map : (lambda -> lambda) -> lambda -> lambda
val shallow_map : (lambda -> lambda) -> lambda -> lambda
val bind : let_kind -> Ident.t -> lambda -> lambda -> lambda
val bind_with_value_kind :
  let_kind -> Ident.t * value_kind -> lambda -> lambda -> lambda
val negate_integer_comparison : integer_comparison -> integer_comparison
val swap_integer_comparison : integer_comparison -> integer_comparison
val negate_float_comparison : float_comparison -> float_comparison
val swap_float_comparison : float_comparison -> float_comparison
val default_function_attribute : function_attribute
val default_stub_attribute : function_attribute
val function_is_curried : lfunction -> bool
val find_exact_application :
  function_kind -> arity:int -> lambda list -> lambda list option
val max_arity : unit -> int
val next_raise_count : unit -> int
val staticfail : lambda
val is_guarded : lambda -> bool
val patch_guarded : lambda -> lambda -> lambda
val raise_kind : raise_kind -> string
val merge_inline_attributes :
  inline_attribute -> inline_attribute -> inline_attribute option
("DEBUG:rule", [Tag1 (("compile_time_constant", 1564), (0, 0, Tag1 ([(("Big_endian", 283), (0), 0, (("lambda/lambda.mli", 21, 1161, 1163), ("lambda/lambda.mli", 21, 1161, 1175), 0), 0, Tag1 ("Lambda", 1)); (("Word_size", 284), (0), 0, (("lambda/lambda.mli", 22, 1176, 1178), ("lambda/lambda.mli", 22, 1176, 1189), 0), 0, Tag1 ("Lambda", 2)); (("Int_size", 285), (0), 0, (("lambda/lambda.mli", 23, 1190, 1192), ("lambda/lambda.mli", 23, 1190, 1202), 0), 0, Tag1 ("Lambda", 3)); (("Max_wosize", 286), (0), 0, (("lambda/lambda.mli", 24, 1203, 1205), ("lambda/lambda.mli", 24, 1203, 1217), 0), 0, Tag1 ("Lambda", 4)); (("Ostype_unix", 287), (0), 0, (("lambda/lambda.mli", 25, 1218, 1220), ("lambda/lambda.mli", 25, 1218, 1233), 0), 0, Tag1 ("Lambda", 5)); (("Ostype_win32", 288), (0), 0, (("lambda/lambda.mli", 26, 1234, 1236), ("lambda/lambda.mli", 26, 1234, 1250), 0), 0, Tag1 ("Lambda", 6)); (("Ostype_cygwin", 289), (0), 0, (("lambda/lambda.mli", 27, 1251, 1253), ("lambda/lambda.mli", 27, 1251, 1268), 0), 0, Tag1 ("Lambda", 7)); (("Backend_type", 290), (0), 0, (("lambda/lambda.mli", 28, 1269, 1271), ("lambda/lambda.mli", 28, 1269, 1285), 0), 0, Tag1 ("Lambda", 8))], 0), 1, 0, 0, 0, 0, 0, (("lambda/lambda.mli", 20, 1132, 1132), ("lambda/lambda.mli", 28, 1269, 1285), 0), 0, 1, 0, Tag1 ("Lambda", 0)), 1, 0); Tag1 (("immediate_or_pointer", 1565), (0, 0, Tag1 ([(("Immediate", 292), (0), 0, (("lambda/lambda.mli", 31, 1315, 1317), ("lambda/lambda.mli", 31, 1315, 1328), 0), 0, Tag1 ("Lambda", 10)); (("Pointer", 293), (0), 0, (("lambda/lambda.mli", 32, 1329, 1331), ("lambda/lambda.mli", 32, 1329, 1340), 0), 0, Tag1 ("Lambda", 11))], 0), 1, 0, 0, 0, 0, 0, (("lambda/lambda.mli", 30, 1287, 1287), ("lambda/lambda.mli", 32, 1329, 1340), 0), 0, 1, 0, Tag1 ("Lambda", 9)), 1, 0); Tag1 (("initialization_or_assignment", 1566), (0, 0, Tag1 ([(("Assignment", 295), (0), 0, (("lambda/lambda.mli", 35, 1378, 1380), ("lambda/lambda.mli", 35, 1378, 1392), 0), 0, Tag1 ("Lambda", 13)); (("Heap_initialization", 296), (0), 0, (("lambda/lambda.mli", 39, 1569, 1571), ("lambda/lambda.mli", 39, 1569, 1592), 0), 0, Tag1 ("Lambda", 14)); (("Root_initialization", 297), (0), 0, (("lambda/lambda.mli", 42, 1711, 1713), ("lambda/lambda.mli", 42, 1711, 1734), 0), 0, Tag1 ("Lambda", 15))], 0), 1, 0, 0, 0, 0, 0, (("lambda/lambda.mli", 34, 1342, 1342), ("lambda/lambda.mli", 42, 1711, 1734), 0), 0, 1, 0, Tag1 ("Lambda", 12)), 1, 0); Tag1 (("is_safe", 1567), (0, 0, Tag1 ([(("Safe", 299), (0), 0, (("lambda/lambda.mli", 45, 1751, 1753), ("lambda/lambda.mli", 45, 1751, 1759), 0), 0, Tag1 ("Lambda", 17)); (("Unsafe", 300), (0), 0, (("lambda/lambda.mli", 46, 1760, 1762), ("lambda/lambda.mli", 46, 1760, 1770), 0), 0, Tag1 ("Lambda", 18))], 0), 1, 0, 0, 0, 0, 0, (("lambda/lambda.mli", 44, 1736, 1736), ("lambda/lambda.mli", 46, 1760, 1770), 0), 0, 1, 0, Tag1 ("Lambda", 16)), 1, 0); Tag1 (("primitive", 1568), (0, 0, Tag1 ([(("Pbytes_to_string", 311), (0), 0, (("lambda/lambda.mli", 49, 1789, 1791), ("lambda/lambda.mli", 49, 1789, 1809), 0), 0, Tag1 ("Lambda", 29)); (("Pbytes_of_string", 312), (0), 0, (("lambda/lambda.mli", 50, 1810, 1812), ("lambda/lambda.mli", 50, 1810, 1830), 0), 0, Tag1 ("Lambda", 30)); (("Pignore", 313), (0), 0, (("lambda/lambda.mli", 51, 1831, 1833), ("lambda/lambda.mli", 51, 1831, 1842), 0), 0, Tag1 ("Lambda", 31)); (("Pgetglobal", 314), ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -387)]), 0, (("lambda/lambda.mli", 53, 1861, 1863), ("lambda/lambda.mli", 53, 1861, 1886), 0), 0, Tag1 ("Lambda", 32)); (("Psetglobal", 354), ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -388)]), 0, (("lambda/lambda.mli", 54, 1887, 1889), ("lambda/lambda.mli", 54, 1887, 1912), 0), 0, Tag1 ("Lambda", 33)); (("Pmakeblock", 355), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -389); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "mutable_flag"), 0, (0)), 100000000, 0, -390); (Tag3 ((("block_shape", 1573)), 0, (0)), 100000000, 0, -391)]), 0, (("lambda/lambda.mli", 56, 1947, 1949), ("lambda/lambda.mli", 56, 1947, 1997), 0), 0, Tag1 ("Lambda", 34)); (("Pfield", 356), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -392); (Tag3 ((("immediate_or_pointer", 1565)), 0, (0)), 100000000, 0, -393); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "mutable_flag"), 0, (0)), 100000000, 0, -394)]), 0, (("lambda/lambda.mli", 57, 1998, 2000), ("lambda/lambda.mli", 57, 1998, 2053), 0), 0, Tag1 ("Lambda", 35)); (("Pfield_computed", 357), (0), 0, (("lambda/lambda.mli", 58, 2054, 2056), ("lambda/lambda.mli", 58, 2054, 2073), 0), 0, Tag1 ("Lambda", 36)); (("Psetfield", 358), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -395); (Tag3 ((("immediate_or_pointer", 1565)), 0, (0)), 100000000, 0, -396); (Tag3 ((("initialization_or_assignment", 1566)), 0, (0)), 100000000, 0, -397)]), 0, (("lambda/lambda.mli", 59, 2074, 2076), ("lambda/lambda.mli", 59, 2074, 2148), 0), 0, Tag1 ("Lambda", 37)); (("Psetfield_computed", 359), ([(Tag3 ((("immediate_or_pointer", 1565)), 0, (0)), 100000000, 0, -398); (Tag3 ((("initialization_or_assignment", 1566)), 0, (0)), 100000000, 0, -399)]), 0, (("lambda/lambda.mli", 60, 2149, 2151), ("lambda/lambda.mli", 60, 2149, 2226), 0), 0, Tag1 ("Lambda", 38)); (("Pfloatfield", 360), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -400)]), 0, (("lambda/lambda.mli", 61, 2227, 2229), ("lambda/lambda.mli", 61, 2227, 2249), 0), 0, Tag1 ("Lambda", 39)); (("Psetfloatfield", 361), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -401); (Tag3 ((("initialization_or_assignment", 1566)), 0, (0)), 100000000, 0, -402)]), 0, (("lambda/lambda.mli", 62, 2250, 2252), ("lambda/lambda.mli", 62, 2250, 2306), 0), 0, Tag1 ("Lambda", 40)); (("Pduprecord", 362), ([(Tag3 (Tag1 ((Tag2 ("Types")), "record_representation"), 0, (0)), 100000000, 0, -403); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -404)]), 0, (("lambda/lambda.mli", 63, 2307, 2309), ("lambda/lambda.mli", 63, 2307, 2358), 0), 0, Tag1 ("Lambda", 42)); (("Prunstack", 469), (0), 0, (("lambda/lambda.mli", 65, 2384, 2386), ("lambda/lambda.mli", 65, 2384, 2397), 0), 0, Tag1 ("Lambda", 43)); (("Pperform", 470), (0), 0, (("lambda/lambda.mli", 66, 2398, 2400), ("lambda/lambda.mli", 66, 2398, 2410), 0), 0, Tag1 ("Lambda", 44)); (("Presume", 471), (0), 0, (("lambda/lambda.mli", 67, 2411, 2413), ("lambda/lambda.mli", 67, 2411, 2422), 0), 0, Tag1 ("Lambda", 45)); (("Preperform", 472), (0), 0, (("lambda/lambda.mli", 68, 2423, 2425), ("lambda/lambda.mli", 68, 2423, 2437), 0), 0, Tag1 ("Lambda", 46)); (("Pccall", 473), ([(Tag3 (Tag1 ((Tag2 ("Primitive")), "description"), 0, (0)), 100000000, 0, -405)]), 0, (("lambda/lambda.mli", 70, 2460, 2462), ("lambda/lambda.mli", 70, 2460, 2495), 0), 0, Tag1 ("Lambda", 47)); (("Praise", 488), ([(Tag3 ((("raise_kind", 1577)), 0, (0)), 100000000, 0, -406)]), 0, (("lambda/lambda.mli", 72, 2515, 2517), ("lambda/lambda.mli", 72, 2515, 2539), 0), 0, Tag1 ("Lambda", 48)); (("Psequand", 489), (0), 0, (("lambda/lambda.mli", 74, 2567, 2569), ("lambda/lambda.mli", 74, 2567, 2579), 0), 0, Tag1 ("Lambda", 49)); (("Psequor", 490), (0), 0, (("lambda/lambda.mli", 74, 2567, 2580), ("lambda/lambda.mli", 74, 2567, 2589), 0), 0, Tag1 ("Lambda", 50)); (("Pnot", 491), (0), 0, (("lambda/lambda.mli", 74, 2567, 2590), ("lambda/lambda.mli", 74, 2567, 2596), 0), 0, Tag1 ("Lambda", 51)); (("Pnegint", 492), (0), 0, (("lambda/lambda.mli", 76, 2624, 2626), ("lambda/lambda.mli", 76, 2624, 2635), 0), 0, Tag1 ("Lambda", 52)); (("Paddint", 493), (0), 0, (("lambda/lambda.mli", 76, 2624, 2636), ("lambda/lambda.mli", 76, 2624, 2645), 0), 0, Tag1 ("Lambda", 53)); (("Psubint", 494), (0), 0, (("lambda/lambda.mli", 76, 2624, 2646), ("lambda/lambda.mli", 76, 2624, 2655), 0), 0, Tag1 ("Lambda", 54)); (("Pmulint", 495), (0), 0, (("lambda/lambda.mli", 76, 2624, 2656), ("lambda/lambda.mli", 76, 2624, 2665), 0), 0, Tag1 ("Lambda", 55)); (("Pdivint", 496), ([(Tag3 ((("is_safe", 1567)), 0, (0)), 100000000, 0, -407)]), 0, (("lambda/lambda.mli", 77, 2666, 2668), ("lambda/lambda.mli", 77, 2666, 2688), 0), 0, Tag1 ("Lambda", 56)); (("Pmodint", 497), ([(Tag3 ((("is_safe", 1567)), 0, (0)), 100000000, 0, -408)]), 0, (("lambda/lambda.mli", 77, 2666, 2689), ("lambda/lambda.mli", 77, 2666, 2709), 0), 0, Tag1 ("Lambda", 57)); (("Pandint", 498), (0), 0, (("lambda/lambda.mli", 78, 2710, 2712), ("lambda/lambda.mli", 78, 2710, 2721), 0), 0, Tag1 ("Lambda", 58)); (("Porint", 499), (0), 0, (("lambda/lambda.mli", 78, 2710, 2722), ("lambda/lambda.mli", 78, 2710, 2730), 0), 0, Tag1 ("Lambda", 59)); (("Pxorint", 500), (0), 0, (("lambda/lambda.mli", 78, 2710, 2731), ("lambda/lambda.mli", 78, 2710, 2740), 0), 0, Tag1 ("Lambda", 60)); (("Plslint", 501), (0), 0, (("lambda/lambda.mli", 79, 2741, 2743), ("lambda/lambda.mli", 79, 2741, 2752), 0), 0, Tag1 ("Lambda", 61)); (("Plsrint", 502), (0), 0, (("lambda/lambda.mli", 79, 2741, 2753), ("lambda/lambda.mli", 79, 2741, 2762), 0), 0, Tag1 ("Lambda", 62)); (("Pasrint", 503), (0), 0, (("lambda/lambda.mli", 79, 2741, 2763), ("lambda/lambda.mli", 79, 2741, 2772), 0), 0, Tag1 ("Lambda", 63)); (("Pintcomp", 504), ([(Tag3 ((("integer_comparison", 1569)), 0, (0)), 100000000, 0, -409)]), 0, (("lambda/lambda.mli", 80, 2773, 2775), ("lambda/lambda.mli", 80, 2773, 2807), 0), 0, Tag1 ("Lambda", 64)); (("Pcompare_ints", 505), (0), 0, (("lambda/lambda.mli", 82, 2879, 2881), ("lambda/lambda.mli", 82, 2879, 2896), 0), 0, Tag1 ("Lambda", 65)); (("Pcompare_floats", 506), (0), 0, (("lambda/lambda.mli", 82, 2879, 2897), ("lambda/lambda.mli", 82, 2879, 2914), 0), 0, Tag1 ("Lambda", 66)); (("Pcompare_bints", 507), ([(Tag3 ((("boxed_integer", 1574)), 0, (0)), 100000000, 0, -410)]), 0, (("lambda/lambda.mli", 82, 2879, 2915), ("lambda/lambda.mli", 82, 2879, 2948), 0), 0, Tag1 ("Lambda", 67)); (("Poffsetint", 508), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -411)]), 0, (("lambda/lambda.mli", 83, 2949, 2951), ("lambda/lambda.mli", 83, 2949, 2970), 0), 0, Tag1 ("Lambda", 68)); (("Poffsetref", 509), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -412)]), 0, (("lambda/lambda.mli", 84, 2971, 2973), ("lambda/lambda.mli", 84, 2971, 2992), 0), 0, Tag1 ("Lambda", 69)); (("Pintoffloat", 510), (0), 0, (("lambda/lambda.mli", 86, 3018, 3020), ("lambda/lambda.mli", 86, 3018, 3033), 0), 0, Tag1 ("Lambda", 70)); (("Pfloatofint", 511), (0), 0, (("lambda/lambda.mli", 86, 3018, 3034), ("lambda/lambda.mli", 86, 3018, 3047), 0), 0, Tag1 ("Lambda", 71)); (("Pnegfloat", 512), (0), 0, (("lambda/lambda.mli", 87, 3048, 3050), ("lambda/lambda.mli", 87, 3048, 3061), 0), 0, Tag1 ("Lambda", 72)); (("Pabsfloat", 513), (0), 0, (("lambda/lambda.mli", 87, 3048, 3062), ("lambda/lambda.mli", 87, 3048, 3073), 0), 0, Tag1 ("Lambda", 73)); (("Paddfloat", 514), (0), 0, (("lambda/lambda.mli", 88, 3074, 3076), ("lambda/lambda.mli", 88, 3074, 3087), 0), 0, Tag1 ("Lambda", 74)); (("Psubfloat", 515), (0), 0, (("lambda/lambda.mli", 88, 3074, 3088), ("lambda/lambda.mli", 88, 3074, 3099), 0), 0, Tag1 ("Lambda", 75)); (("Pmulfloat", 516), (0), 0, (("lambda/lambda.mli", 88, 3074, 3100), ("lambda/lambda.mli", 88, 3074, 3111), 0), 0, Tag1 ("Lambda", 76)); (("Pdivfloat", 517), (0), 0, (("lambda/lambda.mli", 88, 3074, 3112), ("lambda/lambda.mli", 88, 3074, 3123), 0), 0, Tag1 ("Lambda", 77)); (("Pfloatcomp", 518), ([(Tag3 ((("float_comparison", 1570)), 0, (0)), 100000000, 0, -413)]), 0, (("lambda/lambda.mli", 89, 3124, 3126), ("lambda/lambda.mli", 89, 3124, 3158), 0), 0, Tag1 ("Lambda", 78)); (("Pstringlength", 519), (0), 0, (("lambda/lambda.mli", 91, 3185, 3187), ("lambda/lambda.mli", 91, 3185, 3202), 0), 0, Tag1 ("Lambda", 79)); (("Pstringrefu", 520), (0), 0, (("lambda/lambda.mli", 91, 3185, 3203), ("lambda/lambda.mli", 91, 3185, 3216), 0), 0, Tag1 ("Lambda", 80)); (("Pstringrefs", 521), (0), 0, (("lambda/lambda.mli", 91, 3185, 3218), ("lambda/lambda.mli", 91, 3185, 3231), 0), 0, Tag1 ("Lambda", 81)); (("Pbyteslength", 522), (0), 0, (("lambda/lambda.mli", 92, 3232, 3234), ("lambda/lambda.mli", 92, 3232, 3248), 0), 0, Tag1 ("Lambda", 82)); (("Pbytesrefu", 523), (0), 0, (("lambda/lambda.mli", 92, 3232, 3249), ("lambda/lambda.mli", 92, 3232, 3261), 0), 0, Tag1 ("Lambda", 83)); (("Pbytessetu", 524), (0), 0, (("lambda/lambda.mli", 92, 3232, 3262), ("lambda/lambda.mli", 92, 3232, 3274), 0), 0, Tag1 ("Lambda", 84)); (("Pbytesrefs", 525), (0), 0, (("lambda/lambda.mli", 92, 3232, 3275), ("lambda/lambda.mli", 92, 3232, 3287), 0), 0, Tag1 ("Lambda", 85)); (("Pbytessets", 526), (0), 0, (("lambda/lambda.mli", 92, 3232, 3288), ("lambda/lambda.mli", 92, 3232, 3300), 0), 0, Tag1 ("Lambda", 86)); (("Pmakearray", 527), ([(Tag3 ((("array_kind", 1571)), 0, (0)), 100000000, 0, -414); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "mutable_flag"), 0, (0)), 100000000, 0, -415)]), 0, (("lambda/lambda.mli", 94, 3326, 3328), ("lambda/lambda.mli", 94, 3326, 3369), 0), 0, Tag1 ("Lambda", 87)); (("Pduparray", 528), ([(Tag3 ((("array_kind", 1571)), 0, (0)), 100000000, 0, -416); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "mutable_flag"), 0, (0)), 100000000, 0, -417)]), 0, (("lambda/lambda.mli", 95, 3370, 3372), ("lambda/lambda.mli", 95, 3370, 3412), 0), 0, Tag1 ("Lambda", 88)); (("Parraylength", 529), ([(Tag3 ((("array_kind", 1571)), 0, (0)), 100000000, 0, -418)]), 0, (("lambda/lambda.mli", 99, 3600, 3602), ("lambda/lambda.mli", 99, 3600, 3630), 0), 0, Tag1 ("Lambda", 89)); (("Parrayrefu", 530), ([(Tag3 ((("array_kind", 1571)), 0, (0)), 100000000, 0, -419)]), 0, (("lambda/lambda.mli", 100, 3631, 3633), ("lambda/lambda.mli", 100, 3631, 3659), 0), 0, Tag1 ("Lambda", 90)); (("Parraysetu", 531), ([(Tag3 ((("array_kind", 1571)), 0, (0)), 100000000, 0, -420)]), 0, (("lambda/lambda.mli", 101, 3660, 3662), ("lambda/lambda.mli", 101, 3660, 3688), 0), 0, Tag1 ("Lambda", 91)); (("Parrayrefs", 532), ([(Tag3 ((("array_kind", 1571)), 0, (0)), 100000000, 0, -421)]), 0, (("lambda/lambda.mli", 102, 3689, 3691), ("lambda/lambda.mli", 102, 3689, 3717), 0), 0, Tag1 ("Lambda", 92)); (("Parraysets", 533), ([(Tag3 ((("array_kind", 1571)), 0, (0)), 100000000, 0, -422)]), 0, (("lambda/lambda.mli", 103, 3718, 3720), ("lambda/lambda.mli", 103, 3718, 3746), 0), 0, Tag1 ("Lambda", 93)); (("Pisint", 534), (0), 0, (("lambda/lambda.mli", 105, 3811, 3813), ("lambda/lambda.mli", 105, 3811, 3821), 0), 0, Tag1 ("Lambda", 94)); (("Pisout", 535), (0), 0, (("lambda/lambda.mli", 107, 3884, 3886), ("lambda/lambda.mli", 107, 3884, 3894), 0), 0, Tag1 ("Lambda", 95)); (("Pbintofint", 536), ([(Tag3 ((("boxed_integer", 1574)), 0, (0)), 100000000, 0, -423)]), 0, (("lambda/lambda.mli", 109, 3964, 3966), ("lambda/lambda.mli", 109, 3964, 3995), 0), 0, Tag1 ("Lambda", 96)); (("Pintofbint", 537), ([(Tag3 ((("boxed_integer", 1574)), 0, (0)), 100000000, 0, -424)]), 0, (("lambda/lambda.mli", 110, 3996, 3998), ("lambda/lambda.mli", 110, 3996, 4027), 0), 0, Tag1 ("Lambda", 97)); (("Pcvtbint", 538), ([(Tag3 ((("boxed_integer", 1574)), 0, (0)), 100000000, 0, -425); (Tag3 ((("boxed_integer", 1574)), 0, (0)), 100000000, 0, -426)]), 0, (("lambda/lambda.mli", 111, 4028, 4030), ("lambda/lambda.mli", 111, 4028, 4084), 0), 0, Tag1 ("Lambda", 98)); (("Pnegbint", 539), ([(Tag3 ((("boxed_integer", 1574)), 0, (0)), 100000000, 0, -427)]), 0, (("lambda/lambda.mli", 112, 4101, 4103), ("lambda/lambda.mli", 112, 4101, 4130), 0), 0, Tag1 ("Lambda", 99)); (("Paddbint", 540), ([(Tag3 ((("boxed_integer", 1574)), 0, (0)), 100000000, 0, -428)]), 0, (("lambda/lambda.mli", 113, 4131, 4133), ("lambda/lambda.mli", 113, 4131, 4160), 0), 0, Tag1 ("Lambda", 100)); (("Psubbint", 541), ([(Tag3 ((("boxed_integer", 1574)), 0, (0)), 100000000, 0, -429)]), 0, (("lambda/lambda.mli", 114, 4161, 4163), ("lambda/lambda.mli", 114, 4161, 4190), 0), 0, Tag1 ("Lambda", 101)); (("Pmulbint", 542), ([(Tag3 ((("boxed_integer", 1574)), 0, (0)), 100000000, 0, -430)]), 0, (("lambda/lambda.mli", 115, 4191, 4193), ("lambda/lambda.mli", 115, 4191, 4220), 0), 0, Tag1 ("Lambda", 102)); (("Pdivbint", 543), Tag1 ([(("size", 544), 0, (Tag3 ((("boxed_integer", 1574)), 0, (0)), 100000000, 0, -431), (("lambda/lambda.mli", 116, 4221, 4239), ("lambda/lambda.mli", 116, 4221, 4260), 0), 0, Tag1 ("Lambda", 103)); (("is_safe", 545), 0, (Tag3 ((("is_safe", 1567)), 0, (0)), 100000000, 0, -432), (("lambda/lambda.mli", 116, 4221, 4261), ("lambda/lambda.mli", 116, 4221, 4278), 0), 0, Tag1 ("Lambda", 104))]), 0, (("lambda/lambda.mli", 116, 4221, 4223), ("lambda/lambda.mli", 116, 4221, 4280), 0), 0, Tag1 ("Lambda", 105)); (("Pmodbint", 546), Tag1 ([(("size", 547), 0, (Tag3 ((("boxed_integer", 1574)), 0, (0)), 100000000, 0, -433), (("lambda/lambda.mli", 117, 4281, 4299), ("lambda/lambda.mli", 117, 4281, 4320), 0), 0, Tag1 ("Lambda", 106)); (("is_safe", 548), 0, (Tag3 ((("is_safe", 1567)), 0, (0)), 100000000, 0, -434), (("lambda/lambda.mli", 117, 4281, 4321), ("lambda/lambda.mli", 117, 4281, 4338), 0), 0, Tag1 ("Lambda", 107))]), 0, (("lambda/lambda.mli", 117, 4281, 4283), ("lambda/lambda.mli", 117, 4281, 4340), 0), 0, Tag1 ("Lambda", 108)); (("Pandbint", 549), ([(Tag3 ((("boxed_integer", 1574)), 0, (0)), 100000000, 0, -435)]), 0, (("lambda/lambda.mli", 118, 4341, 4343), ("lambda/lambda.mli", 118, 4341, 4370), 0), 0, Tag1 ("Lambda", 109)); (("Porbint", 550), ([(Tag3 ((("boxed_integer", 1574)), 0, (0)), 100000000, 0, -436)]), 0, (("lambda/lambda.mli", 119, 4371, 4373), ("lambda/lambda.mli", 119, 4371, 4399), 0), 0, Tag1 ("Lambda", 110)); (("Pxorbint", 551), ([(Tag3 ((("boxed_integer", 1574)), 0, (0)), 100000000, 0, -437)]), 0, (("lambda/lambda.mli", 120, 4400, 4402), ("lambda/lambda.mli", 120, 4400, 4429), 0), 0, Tag1 ("Lambda", 111)); (("Plslbint", 552), ([(Tag3 ((("boxed_integer", 1574)), 0, (0)), 100000000, 0, -438)]), 0, (("lambda/lambda.mli", 121, 4430, 4432), ("lambda/lambda.mli", 121, 4430, 4459), 0), 0, Tag1 ("Lambda", 112)); (("Plsrbint", 553), ([(Tag3 ((("boxed_integer", 1574)), 0, (0)), 100000000, 0, -439)]), 0, (("lambda/lambda.mli", 122, 4460, 4462), ("lambda/lambda.mli", 122, 4460, 4489), 0), 0, Tag1 ("Lambda", 113)); (("Pasrbint", 554), ([(Tag3 ((("boxed_integer", 1574)), 0, (0)), 100000000, 0, -440)]), 0, (("lambda/lambda.mli", 123, 4490, 4492), ("lambda/lambda.mli", 123, 4490, 4519), 0), 0, Tag1 ("Lambda", 114)); (("Pbintcomp", 555), ([(Tag3 ((("boxed_integer", 1574)), 0, (0)), 100000000, 0, -441); (Tag3 ((("integer_comparison", 1569)), 0, (0)), 100000000, 0, -442)]), 0, (("lambda/lambda.mli", 124, 4520, 4522), ("lambda/lambda.mli", 124, 4520, 4571), 0), 0, Tag1 ("Lambda", 115)); (("Pbigarrayref", 556), ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -443); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -444); (Tag3 ((("bigarray_kind", 1575)), 0, (0)), 100000000, 0, -445); (Tag3 ((("bigarray_layout", 1576)), 0, (0)), 100000000, 0, -446)]), 0, (("lambda/lambda.mli", 126, 4641, 4643), ("lambda/lambda.mli", 126, 4641, 4705), 0), 0, Tag1 ("Lambda", 116)); (("Pbigarrayset", 557), ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -447); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -448); (Tag3 ((("bigarray_kind", 1575)), 0, (0)), 100000000, 0, -449); (Tag3 ((("bigarray_layout", 1576)), 0, (0)), 100000000, 0, -450)]), 0, (("lambda/lambda.mli", 127, 4706, 4708), ("lambda/lambda.mli", 127, 4706, 4770), 0), 0, Tag1 ("Lambda", 117)); (("Pbigarraydim", 558), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -451)]), 0, (("lambda/lambda.mli", 129, 4819, 4821), ("lambda/lambda.mli", 129, 4819, 4842), 0), 0, Tag1 ("Lambda", 118)); (("Pstring_load_16", 559), ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -452)]), 0, (("lambda/lambda.mli", 131, 4897, 4899), ("lambda/lambda.mli", 131, 4897, 4924), 0), 0, Tag1 ("Lambda", 119)); (("Pstring_load_32", 560), ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -453)]), 0, (("lambda/lambda.mli", 132, 4925, 4927), ("lambda/lambda.mli", 132, 4925, 4952), 0), 0, Tag1 ("Lambda", 120)); (("Pstring_load_64", 561), ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -454)]), 0, (("lambda/lambda.mli", 133, 4953, 4955), ("lambda/lambda.mli", 133, 4953, 4980), 0), 0, Tag1 ("Lambda", 121)); (("Pbytes_load_16", 562), ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -455)]), 0, (("lambda/lambda.mli", 134, 4981, 4983), ("lambda/lambda.mli", 134, 4981, 5007), 0), 0, Tag1 ("Lambda", 122)); (("Pbytes_load_32", 563), ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -456)]), 0, (("lambda/lambda.mli", 135, 5008, 5010), ("lambda/lambda.mli", 135, 5008, 5034), 0), 0, Tag1 ("Lambda", 123)); (("Pbytes_load_64", 564), ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -457)]), 0, (("lambda/lambda.mli", 136, 5035, 5037), ("lambda/lambda.mli", 136, 5035, 5061), 0), 0, Tag1 ("Lambda", 124)); (("Pbytes_set_16", 565), ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -458)]), 0, (("lambda/lambda.mli", 137, 5062, 5064), ("lambda/lambda.mli", 137, 5062, 5087), 0), 0, Tag1 ("Lambda", 125)); (("Pbytes_set_32", 566), ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -459)]), 0, (("lambda/lambda.mli", 138, 5088, 5090), ("lambda/lambda.mli", 138, 5088, 5113), 0), 0, Tag1 ("Lambda", 126)); (("Pbytes_set_64", 567), ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -460)]), 0, (("lambda/lambda.mli", 139, 5114, 5116), ("lambda/lambda.mli", 139, 5114, 5139), 0), 0, Tag1 ("Lambda", 127)); (("Pbigstring_load_16", 568), ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -461)]), 0, (("lambda/lambda.mli", 142, 5248, 5250), ("lambda/lambda.mli", 142, 5248, 5278), 0), 0, Tag1 ("Lambda", 128)); (("Pbigstring_load_32", 569), ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -462)]), 0, (("lambda/lambda.mli", 143, 5279, 5281), ("lambda/lambda.mli", 143, 5279, 5309), 0), 0, Tag1 ("Lambda", 129)); (("Pbigstring_load_64", 570), ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -463)]), 0, (("lambda/lambda.mli", 144, 5310, 5312), ("lambda/lambda.mli", 144, 5310, 5340), 0), 0, Tag1 ("Lambda", 130)); (("Pbigstring_set_16", 571), ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -464)]), 0, (("lambda/lambda.mli", 145, 5341, 5343), ("lambda/lambda.mli", 145, 5341, 5370), 0), 0, Tag1 ("Lambda", 131)); (("Pbigstring_set_32", 572), ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -465)]), 0, (("lambda/lambda.mli", 146, 5371, 5373), ("lambda/lambda.mli", 146, 5371, 5400), 0), 0, Tag1 ("Lambda", 132)); (("Pbigstring_set_64", 573), ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -466)]), 0, (("lambda/lambda.mli", 147, 5401, 5403), ("lambda/lambda.mli", 147, 5401, 5430), 0), 0, Tag1 ("Lambda", 133)); (("Pctconst", 574), ([(Tag3 ((("compile_time_constant", 1564)), 0, (0)), 100000000, 0, -467)]), 0, (("lambda/lambda.mli", 149, 5462, 5464), ("lambda/lambda.mli", 149, 5462, 5499), 0), 0, Tag1 ("Lambda", 134)); (("Pbswap16", 575), (0), 0, (("lambda/lambda.mli", 151, 5518, 5520), ("lambda/lambda.mli", 151, 5518, 5530), 0), 0, Tag1 ("Lambda", 135)); (("Pbbswap", 576), ([(Tag3 ((("boxed_integer", 1574)), 0, (0)), 100000000, 0, -468)]), 0, (("lambda/lambda.mli", 152, 5531, 5533), ("lambda/lambda.mli", 152, 5531, 5559), 0), 0, Tag1 ("Lambda", 136)); (("Pint_as_pointer", 577), (0), 0, (("lambda/lambda.mli", 154, 5596, 5598), ("lambda/lambda.mli", 154, 5596, 5615), 0), 0, Tag1 ("Lambda", 137)); (("Patomic_load", 578), Tag1 ([(("immediate_or_pointer", 579), 0, (Tag3 ((("immediate_or_pointer", 1565)), 0, (0)), 100000000, 0, -469), (("lambda/lambda.mli", 156, 5642, 5663), ("lambda/lambda.mli", 156, 5642, 5706), 0), 0, Tag1 ("Lambda", 138))]), 0, (("lambda/lambda.mli", 156, 5642, 5644), ("lambda/lambda.mli", 156, 5642, 5707), 0), 0, Tag1 ("Lambda", 139)); (("Patomic_exchange", 580), (0), 0, (("lambda/lambda.mli", 157, 5708, 5710), ("lambda/lambda.mli", 157, 5708, 5728), 0), 0, Tag1 ("Lambda", 140)); (("Patomic_cas", 581), (0), 0, (("lambda/lambda.mli", 158, 5729, 5731), ("lambda/lambda.mli", 158, 5729, 5744), 0), 0, Tag1 ("Lambda", 141)); (("Patomic_fetch_add", 582), (0), 0, (("lambda/lambda.mli", 159, 5745, 5747), ("lambda/lambda.mli", 159, 5745, 5766), 0), 0, Tag1 ("Lambda", 142)); (("Popaque", 583), (0), 0, (("lambda/lambda.mli", 161, 5802, 5804), ("lambda/lambda.mli", 161, 5802, 5813), 0), 0, Tag1 ("Lambda", 143)); (("Pdls_get", 584), (0), 0, (("lambda/lambda.mli", 163, 5850, 5852), ("lambda/lambda.mli", 163, 5850, 5862), 0), 0, Tag1 ("Lambda", 144))], 0), 1, 0, 0, 0, 0, 0, (("lambda/lambda.mli", 48, 1772, 1772), ("lambda/lambda.mli", 163, 5850, 5862), 0), 0, 0, 0, Tag1 ("Lambda", 19)), 1, 0); Tag1 (("integer_comparison", 1569), (0, 0, Tag1 ([(("Ceq", 585), (0), 0, (("lambda/lambda.mli", 166, 5889, 5893), ("lambda/lambda.mli", 166, 5889, 5896), 0), 0, Tag1 ("Lambda", 145)); (("Cne", 586), (0), 0, (("lambda/lambda.mli", 166, 5889, 5897), ("lambda/lambda.mli", 166, 5889, 5902), 0), 0, Tag1 ("Lambda", 146)); (("Clt", 587), (0), 0, (("lambda/lambda.mli", 166, 5889, 5903), ("lambda/lambda.mli", 166, 5889, 5908), 0), 0, Tag1 ("Lambda", 147)); (("Cgt", 588), (0), 0, (("lambda/lambda.mli", 166, 5889, 5909), ("lambda/lambda.mli", 166, 5889, 5914), 0), 0, Tag1 ("Lambda", 148)); (("Cle", 589), (0), 0, (("lambda/lambda.mli", 166, 5889, 5915), ("lambda/lambda.mli", 166, 5889, 5920), 0), 0, Tag1 ("Lambda", 149)); (("Cge", 590), (0), 0, (("lambda/lambda.mli", 166, 5889, 5921), ("lambda/lambda.mli", 166, 5889, 5926), 0), 0, Tag1 ("Lambda", 150))], 0), 1, 0, 0, 0, 0, 0, (("lambda/lambda.mli", 165, 5864, 5864), ("lambda/lambda.mli", 166, 5889, 5926), 0), 0, 1, 0, Tag1 ("Lambda", 20)), 2, 0); Tag1 (("float_comparison", 1570), (0, 0, Tag1 ([(("CFeq", 591), (0), 0, (("lambda/lambda.mli", 169, 5951, 5955), ("lambda/lambda.mli", 169, 5951, 5959), 0), 0, Tag1 ("Lambda", 151)); (("CFneq", 592), (0), 0, (("lambda/lambda.mli", 169, 5951, 5960), ("lambda/lambda.mli", 169, 5951, 5967), 0), 0, Tag1 ("Lambda", 152)); (("CFlt", 593), (0), 0, (("lambda/lambda.mli", 169, 5951, 5968), ("lambda/lambda.mli", 169, 5951, 5974), 0), 0, Tag1 ("Lambda", 153)); (("CFnlt", 594), (0), 0, (("lambda/lambda.mli", 169, 5951, 5975), ("lambda/lambda.mli", 169, 5951, 5982), 0), 0, Tag1 ("Lambda", 154)); (("CFgt", 595), (0), 0, (("lambda/lambda.mli", 169, 5951, 5983), ("lambda/lambda.mli", 169, 5951, 5989), 0), 0, Tag1 ("Lambda", 155)); (("CFngt", 596), (0), 0, (("lambda/lambda.mli", 169, 5951, 5990), ("lambda/lambda.mli", 169, 5951, 5997), 0), 0, Tag1 ("Lambda", 156)); (("CFle", 597), (0), 0, (("lambda/lambda.mli", 169, 5951, 5998), ("lambda/lambda.mli", 169, 5951, 6004), 0), 0, Tag1 ("Lambda", 157)); (("CFnle", 598), (0), 0, (("lambda/lambda.mli", 169, 5951, 6005), ("lambda/lambda.mli", 169, 5951, 6012), 0), 0, Tag1 ("Lambda", 158)); (("CFge", 599), (0), 0, (("lambda/lambda.mli", 169, 5951, 6013), ("lambda/lambda.mli", 169, 5951, 6019), 0), 0, Tag1 ("Lambda", 159)); (("CFnge", 600), (0), 0, (("lambda/lambda.mli", 169, 5951, 6020), ("lambda/lambda.mli", 169, 5951, 6027), 0), 0, Tag1 ("Lambda", 160))], 0), 1, 0, 0, 0, 0, 0, (("lambda/lambda.mli", 168, 5928, 5928), ("lambda/lambda.mli", 169, 5951, 6027), 0), 0, 1, 0, Tag1 ("Lambda", 21)), 2, 0); Tag1 (("array_kind", 1571), (0, 0, Tag1 ([(("Pgenarray", 601), (0), 0, (("lambda/lambda.mli", 172, 6046, 6050), ("lambda/lambda.mli", 172, 6046, 6059), 0), 0, Tag1 ("Lambda", 161)); (("Paddrarray", 602), (0), 0, (("lambda/lambda.mli", 172, 6046, 6060), ("lambda/lambda.mli", 172, 6046, 6072), 0), 0, Tag1 ("Lambda", 162)); (("Pintarray", 603), (0), 0, (("lambda/lambda.mli", 172, 6046, 6073), ("lambda/lambda.mli", 172, 6046, 6084), 0), 0, Tag1 ("Lambda", 163)); (("Pfloatarray", 604), (0), 0, (("lambda/lambda.mli", 172, 6046, 6085), ("lambda/lambda.mli", 172, 6046, 6098), 0), 0, Tag1 ("Lambda", 164))], 0), 1, 0, 0, 0, 0, 0, (("lambda/lambda.mli", 171, 6029, 6029), ("lambda/lambda.mli", 172, 6046, 6098), 0), 0, 1, 0, Tag1 ("Lambda", 22)), 2, 0); Tag1 (("value_kind", 1572), (0, 0, Tag1 ([(("Pgenval", 605), (0), 0, (("lambda/lambda.mli", 175, 6117, 6121), ("lambda/lambda.mli", 175, 6117, 6128), 0), 0, Tag1 ("Lambda", 165)); (("Pfloatval", 606), (0), 0, (("lambda/lambda.mli", 175, 6117, 6129), ("lambda/lambda.mli", 175, 6117, 6140), 0), 0, Tag1 ("Lambda", 166)); (("Pboxedintval", 607), ([(Tag3 ((("boxed_integer", 1574)), 0, (0)), 100000000, 0, -386)]), 0, (("lambda/lambda.mli", 175, 6117, 6141), ("lambda/lambda.mli", 175, 6117, 6172), 0), 0, Tag1 ("Lambda", 167)); (("Pintval", 608), (0), 0, (("lambda/lambda.mli", 175, 6117, 6173), ("lambda/lambda.mli", 175, 6117, 6182), 0), 0, Tag1 ("Lambda", 168))], 0), 1, 0, 0, 0, 0, 0, (("lambda/lambda.mli", 174, 6100, 6100), ("lambda/lambda.mli", 175, 6117, 6182), 0), 0, 0, 0, Tag1 ("Lambda", 23)), 2, 0); Tag1 (("block_shape", 1573), (0, 0, 0, 1, ((Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("value_kind", 1572)), 0, (0)), 100000000, 0, -385)], (0)), 100000000, 0, -384)], (0)), 100000000, 0, -383)), 0, 0, 0, 0, (("lambda/lambda.mli", 177, 6184, 6184), ("lambda/lambda.mli", 178, 6202, 6226), 0), 0, 0, 0, Tag1 ("Lambda", 24)), 2, 0); Tag1 (("boxed_integer", 1574), (0, 0, Tag1 ([(("Pnativeint", 609), (0), 0, (("lambda/lambda.mli", 181, 6274, 6278), ("lambda/lambda.mli", 181, 6274, 6288), 0), 0, Tag1 ("Lambda", 169)); (("Pint32", 610), (0), 0, (("lambda/lambda.mli", 181, 6274, 6289), ("lambda/lambda.mli", 181, 6274, 6297), 0), 0, Tag1 ("Lambda", 170)); (("Pint64", 611), (0), 0, (("lambda/lambda.mli", 181, 6274, 6298), ("lambda/lambda.mli", 181, 6274, 6306), 0), 0, Tag1 ("Lambda", 171))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Primitive")), "boxed_integer"), 0, (0)), 100000000, 0, -382)), 0, 0, 0, 0, (("lambda/lambda.mli", 180, 6228, 6228), ("lambda/lambda.mli", 181, 6274, 6306), 0), 0, 1, 0, Tag1 ("Lambda", 25)), 2, 0); Tag1 (("bigarray_kind", 1575), (0, 0, Tag1 ([(("Pbigarray_unknown", 612), (0), 0, (("lambda/lambda.mli", 184, 6328, 6332), ("lambda/lambda.mli", 184, 6328, 6349), 0), 0, Tag1 ("Lambda", 172)); (("Pbigarray_float32", 613), (0), 0, (("lambda/lambda.mli", 185, 6350, 6352), ("lambda/lambda.mli", 185, 6350, 6371), 0), 0, Tag1 ("Lambda", 173)); (("Pbigarray_float64", 614), (0), 0, (("lambda/lambda.mli", 185, 6350, 6372), ("lambda/lambda.mli", 185, 6350, 6391), 0), 0, Tag1 ("Lambda", 174)); (("Pbigarray_sint8", 615), (0), 0, (("lambda/lambda.mli", 186, 6392, 6394), ("lambda/lambda.mli", 186, 6392, 6411), 0), 0, Tag1 ("Lambda", 175)); (("Pbigarray_uint8", 616), (0), 0, (("lambda/lambda.mli", 186, 6392, 6412), ("lambda/lambda.mli", 186, 6392, 6429), 0), 0, Tag1 ("Lambda", 176)); (("Pbigarray_sint16", 617), (0), 0, (("lambda/lambda.mli", 187, 6430, 6432), ("lambda/lambda.mli", 187, 6430, 6450), 0), 0, Tag1 ("Lambda", 177)); (("Pbigarray_uint16", 618), (0), 0, (("lambda/lambda.mli", 187, 6430, 6451), ("lambda/lambda.mli", 187, 6430, 6469), 0), 0, Tag1 ("Lambda", 178)); (("Pbigarray_int32", 619), (0), 0, (("lambda/lambda.mli", 188, 6470, 6472), ("lambda/lambda.mli", 188, 6470, 6489), 0), 0, Tag1 ("Lambda", 179)); (("Pbigarray_int64", 620), (0), 0, (("lambda/lambda.mli", 188, 6470, 6490), ("lambda/lambda.mli", 188, 6470, 6507), 0), 0, Tag1 ("Lambda", 180)); (("Pbigarray_caml_int", 621), (0), 0, (("lambda/lambda.mli", 189, 6508, 6510), ("lambda/lambda.mli", 189, 6508, 6530), 0), 0, Tag1 ("Lambda", 181)); (("Pbigarray_native_int", 622), (0), 0, (("lambda/lambda.mli", 189, 6508, 6531), ("lambda/lambda.mli", 189, 6508, 6553), 0), 0, Tag1 ("Lambda", 182)); (("Pbigarray_complex32", 623), (0), 0, (("lambda/lambda.mli", 190, 6554, 6556), ("lambda/lambda.mli", 190, 6554, 6577), 0), 0, Tag1 ("Lambda", 183)); (("Pbigarray_complex64", 624), (0), 0, (("lambda/lambda.mli", 190, 6554, 6578), ("lambda/lambda.mli", 190, 6554, 6599), 0), 0, Tag1 ("Lambda", 184))], 0), 1, 0, 0, 0, 0, 0, (("lambda/lambda.mli", 183, 6308, 6308), ("lambda/lambda.mli", 190, 6554, 6599), 0), 0, 1, 0, Tag1 ("Lambda", 26)), 2, 0); Tag1 (("bigarray_layout", 1576), (0, 0, Tag1 ([(("Pbigarray_unknown_layout", 625), (0), 0, (("lambda/lambda.mli", 193, 6623, 6627), ("lambda/lambda.mli", 193, 6623, 6651), 0), 0, Tag1 ("Lambda", 185)); (("Pbigarray_c_layout", 626), (0), 0, (("lambda/lambda.mli", 194, 6652, 6654), ("lambda/lambda.mli", 194, 6652, 6674), 0), 0, Tag1 ("Lambda", 186)); (("Pbigarray_fortran_layout", 627), (0), 0, (("lambda/lambda.mli", 195, 6675, 6677), ("lambda/lambda.mli", 195, 6675, 6703), 0), 0, Tag1 ("Lambda", 187))], 0), 1, 0, 0, 0, 0, 0, (("lambda/lambda.mli", 192, 6601, 6601), ("lambda/lambda.mli", 195, 6675, 6703), 0), 0, 1, 0, Tag1 ("Lambda", 27)), 2, 0); Tag1 (("raise_kind", 1577), (0, 0, Tag1 ([(("Raise_regular", 628), (0), 0, (("lambda/lambda.mli", 198, 6722, 6724), ("lambda/lambda.mli", 198, 6722, 6739), 0), 0, Tag1 ("Lambda", 188)); (("Raise_reraise", 629), (0), 0, (("lambda/lambda.mli", 199, 6740, 6742), ("lambda/lambda.mli", 199, 6740, 6757), 0), 0, Tag1 ("Lambda", 189)); (("Raise_notrace", 630), (0), 0, (("lambda/lambda.mli", 200, 6758, 6760), ("lambda/lambda.mli", 200, 6758, 6775), 0), 0, Tag1 ("Lambda", 190))], 0), 1, 0, 0, 0, 0, 0, (("lambda/lambda.mli", 197, 6705, 6705), ("lambda/lambda.mli", 200, 6758, 6775), 0), 0, 1, 0, Tag1 ("Lambda", 28)), 2, 0); (("equal_primitive", 1578), ((Tag1 (0, (Tag3 ((("primitive", 1568)), 0, (0)), 100000000, 0, -381), (Tag1 (0, (Tag3 ((("primitive", 1568)), 0, (0)), 100000000, 0, -380), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -379), 0), 100000000, 0, -378), 0), 100000000, 0, -377), 0, (("lambda/lambda.mli", 202, 6777, 6777), ("lambda/lambda.mli", 202, 6777, 6829), 0), 0, Tag1 ("Lambda", 209)), 0); (("equal_value_kind", 1579), ((Tag1 (0, (Tag3 ((("value_kind", 1572)), 0, (0)), 100000000, 0, -376), (Tag1 (0, (Tag3 ((("value_kind", 1572)), 0, (0)), 100000000, 0, -375), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -374), 0), 100000000, 0, -373), 0), 100000000, 0, -372), 0, (("lambda/lambda.mli", 204, 6831, 6831), ("lambda/lambda.mli", 204, 6831, 6886), 0), 0, Tag1 ("Lambda", 210)), 0); (("equal_boxed_integer", 1580), ((Tag1 (0, (Tag3 ((("boxed_integer", 1574)), 0, (0)), 100000000, 0, -371), (Tag1 (0, (Tag3 ((("boxed_integer", 1574)), 0, (0)), 100000000, 0, -370), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -369), 0), 100000000, 0, -368), 0), 100000000, 0, -367), 0, (("lambda/lambda.mli", 206, 6888, 6888), ("lambda/lambda.mli", 206, 6888, 6952), 0), 0, Tag1 ("Lambda", 211)), 0); Tag1 (("structured_constant", 1581), (0, 0, Tag1 ([(("Const_base", 635), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "constant"), 0, (0)), 100000000, 0, -360)]), 0, (("lambda/lambda.mli", 209, 6981, 6985), ("lambda/lambda.mli", 209, 6981, 7007), 0), 0, Tag1 ("Lambda", 213)); (("Const_block", 636), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -361); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("structured_constant", 1581)), 0, (0)), 100000000, 0, -363)], (0)), 100000000, 0, -362)]), 0, (("lambda/lambda.mli", 210, 7008, 7010), ("lambda/lambda.mli", 210, 7008, 7057), 0), 0, Tag1 ("Lambda", 214)); (("Const_float_array", 637), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -365)], (0)), 100000000, 0, -364)]), 0, (("lambda/lambda.mli", 211, 7058, 7060), ("lambda/lambda.mli", 211, 7058, 7094), 0), 0, Tag1 ("Lambda", 215)); (("Const_immstring", 638), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -366)]), 0, (("lambda/lambda.mli", 212, 7095, 7097), ("lambda/lambda.mli", 212, 7095, 7124), 0), 0, Tag1 ("Lambda", 216))], 0), 1, 0, 0, 0, 0, 0, (("lambda/lambda.mli", 208, 6954, 6954), ("lambda/lambda.mli", 212, 7095, 7124), 0), 0, 0, 0, Tag1 ("Lambda", 212)), 1, 0); Tag1 (("tailcall_attribute", 1582), (0, 0, Tag1 ([(("Tailcall_expectation", 640), ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -359)]), 0, (("lambda/lambda.mli", 215, 7152, 7154), ("lambda/lambda.mli", 215, 7152, 7184), 0), 0, Tag1 ("Lambda", 218)); (("Default_tailcall", 641), (0), 0, (("lambda/lambda.mli", 218, 7278, 7280), ("lambda/lambda.mli", 218, 7278, 7298), 0), 0, Tag1 ("Lambda", 219))], 0), 1, 0, 0, 0, 0, 0, (("lambda/lambda.mli", 214, 7126, 7126), ("lambda/lambda.mli", 218, 7278, 7298), 0), 0, 0, 0, Tag1 ("Lambda", 217)), 1, 0); Tag1 (("inline_attribute", 1583), (0, 0, Tag1 ([(("Always_inline", 643), (0), 0, (("lambda/lambda.mli", 221, 7355, 7357), ("lambda/lambda.mli", 221, 7355, 7372), 0), 0, Tag1 ("Lambda", 221)); (("Never_inline", 644), (0), 0, (("lambda/lambda.mli", 222, 7409, 7411), ("lambda/lambda.mli", 222, 7409, 7425), 0), 0, Tag1 ("Lambda", 222)); (("Hint_inline", 645), (0), 0, (("lambda/lambda.mli", 223, 7448, 7450), ("lambda/lambda.mli", 223, 7448, 7463), 0), 0, Tag1 ("Lambda", 223)); (("Unroll", 646), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -358)]), 0, (("lambda/lambda.mli", 224, 7485, 7487), ("lambda/lambda.mli", 224, 7485, 7502), 0), 0, Tag1 ("Lambda", 224)); (("Default_inline", 647), (0), 0, (("lambda/lambda.mli", 225, 7521, 7523), ("lambda/lambda.mli", 225, 7521, 7539), 0), 0, Tag1 ("Lambda", 225))], 0), 1, 0, 0, 0, 0, 0, (("lambda/lambda.mli", 220, 7331, 7331), ("lambda/lambda.mli", 225, 7521, 7539), 0), 0, 0, 0, Tag1 ("Lambda", 220)), 1, 0); (("equal_inline_attribute", 1584), ((Tag1 (0, (Tag3 ((("inline_attribute", 1583)), 0, (0)), 100000000, 0, -357), (Tag1 (0, (Tag3 ((("inline_attribute", 1583)), 0, (0)), 100000000, 0, -356), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -355), 0), 100000000, 0, -354), 0), 100000000, 0, -353), 0, (("lambda/lambda.mli", 227, 7570, 7570), ("lambda/lambda.mli", 227, 7570, 7643), 0), 0, Tag1 ("Lambda", 226)), 0); Tag1 (("specialise_attribute", 1585), (0, 0, Tag1 ([(("Always_specialise", 650), (0), 0, (("lambda/lambda.mli", 230, 7673, 7675), ("lambda/lambda.mli", 230, 7673, 7694), 0), 0, Tag1 ("Lambda", 228)); (("Never_specialise", 651), (0), 0, (("lambda/lambda.mli", 231, 7739, 7741), ("lambda/lambda.mli", 231, 7739, 7759), 0), 0, Tag1 ("Lambda", 229)); (("Default_specialise", 652), (0), 0, (("lambda/lambda.mli", 232, 7786, 7788), ("lambda/lambda.mli", 232, 7786, 7808), 0), 0, Tag1 ("Lambda", 230))], 0), 1, 0, 0, 0, 0, 0, (("lambda/lambda.mli", 229, 7645, 7645), ("lambda/lambda.mli", 232, 7786, 7808), 0), 0, 1, 0, Tag1 ("Lambda", 227)), 1, 0); (("equal_specialise_attribute", 1586), ((Tag1 (0, (Tag3 ((("specialise_attribute", 1585)), 0, (0)), 100000000, 0, -352), (Tag1 (0, (Tag3 ((("specialise_attribute", 1585)), 0, (0)), 100000000, 0, -351), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -350), 0), 100000000, 0, -349), 0), 100000000, 0, -348), 0, (("lambda/lambda.mli", 234, 7843, 7843), ("lambda/lambda.mli", 237, 7926, 7935), 0), 0, Tag1 ("Lambda", 231)), 0); Tag1 (("local_attribute", 1587), (0, 0, Tag1 ([(("Always_local", 655), (0), 0, (("lambda/lambda.mli", 240, 7960, 7962), ("lambda/lambda.mli", 240, 7960, 7976), 0), 0, Tag1 ("Lambda", 233)); (("Never_local", 656), (0), 0, (("lambda/lambda.mli", 241, 8011, 8013), ("lambda/lambda.mli", 241, 8011, 8026), 0), 0, Tag1 ("Lambda", 234)); (("Default_local", 657), (0), 0, (("lambda/lambda.mli", 242, 8048, 8050), ("lambda/lambda.mli", 242, 8048, 8065), 0), 0, Tag1 ("Lambda", 235))], 0), 1, 0, 0, 0, 0, 0, (("lambda/lambda.mli", 239, 7937, 7937), ("lambda/lambda.mli", 242, 8048, 8065), 0), 0, 1, 0, Tag1 ("Lambda", 232)), 1, 0); Tag1 (("poll_attribute", 1588), (0, 0, Tag1 ([(("Error_poll", 659), (0), 0, (("lambda/lambda.mli", 245, 8135, 8137), ("lambda/lambda.mli", 245, 8135, 8149), 0), 0, Tag1 ("Lambda", 237)); (("Default_poll", 660), (0), 0, (("lambda/lambda.mli", 246, 8170, 8172), ("lambda/lambda.mli", 246, 8170, 8186), 0), 0, Tag1 ("Lambda", 238))], 0), 1, 0, 0, 0, 0, 0, (("lambda/lambda.mli", 244, 8113, 8113), ("lambda/lambda.mli", 246, 8170, 8186), 0), 0, 1, 0, Tag1 ("Lambda", 236)), 1, 0); Tag1 (("function_kind", 1589), (0, 0, Tag1 ([(("Curried", 662), (0), 0, (("lambda/lambda.mli", 248, 8215, 8236), ("lambda/lambda.mli", 248, 8215, 8243), 0), 0, Tag1 ("Lambda", 240)); (("Tupled", 663), (0), 0, (("lambda/lambda.mli", 248, 8215, 8244), ("lambda/lambda.mli", 248, 8215, 8252), 0), 0, Tag1 ("Lambda", 241))], 0), 1, 0, 0, 0, 0, 0, (("lambda/lambda.mli", 248, 8215, 8215), ("lambda/lambda.mli", 248, 8215, 8252), 0), 0, 1, 0, Tag1 ("Lambda", 239)), 1, 0); Tag1 (("let_kind", 1590), (0, 0, Tag1 ([(("Strict", 665), (0), 0, (("lambda/lambda.mli", 250, 8254, 8270), ("lambda/lambda.mli", 250, 8254, 8276), 0), 0, Tag1 ("Lambda", 243)); (("Alias", 666), (0), 0, (("lambda/lambda.mli", 250, 8254, 8277), ("lambda/lambda.mli", 250, 8254, 8284), 0), 0, Tag1 ("Lambda", 244)); (("StrictOpt", 667), (0), 0, (("lambda/lambda.mli", 250, 8254, 8285), ("lambda/lambda.mli", 250, 8254, 8296), 0), 0, Tag1 ("Lambda", 245))], 0), 1, 0, 0, 0, 0, 0, (("lambda/lambda.mli", 250, 8254, 8254), ("lambda/lambda.mli", 250, 8254, 8296), 0), 0, 1, 0, Tag1 ("Lambda", 242)), 1, 0); Tag1 (("meth_kind", 1591), (0, 0, Tag1 ([(("Self", 669), (0), 0, (("lambda/lambda.mli", 261, 8718, 8735), ("lambda/lambda.mli", 261, 8718, 8739), 0), 0, Tag1 ("Lambda", 247)); (("Public", 670), (0), 0, (("lambda/lambda.mli", 261, 8718, 8740), ("lambda/lambda.mli", 261, 8718, 8748), 0), 0, Tag1 ("Lambda", 248)); (("Cached", 671), (0), 0, (("lambda/lambda.mli", 261, 8718, 8749), ("lambda/lambda.mli", 261, 8718, 8757), 0), 0, Tag1 ("Lambda", 249))], 0), 1, 0, 0, 0, 0, 0, (("lambda/lambda.mli", 261, 8718, 8718), ("lambda/lambda.mli", 261, 8718, 8757), 0), 0, 1, 0, Tag1 ("Lambda", 246)), 1, 0); (("equal_meth_kind", 1592), ((Tag1 (0, (Tag3 ((("meth_kind", 1591)), 0, (0)), 100000000, 0, -347), (Tag1 (0, (Tag3 ((("meth_kind", 1591)), 0, (0)), 100000000, 0, -346), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -345), 0), 100000000, 0, -344), 0), 100000000, 0, -343), 0, (("lambda/lambda.mli", 263, 8759, 8759), ("lambda/lambda.mli", 263, 8759, 8811), 0), 0, Tag1 ("Lambda", 250)), 0); Tag1 (("shared_code", 1593), (0, 0, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -341); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -342)]), 100000000, 0, -340)], (0)), 100000000, 0, -339)), 0, 0, 0, 0, (("lambda/lambda.mli", 265, 8813, 8813), ("lambda/lambda.mli", 265, 8813, 8848), 0), 0, 0, 0, Tag1 ("Lambda", 251)), 1, 0); Tag1 (("function_attribute", 1594), (0, 0, [[(("inline", 675), 0, (Tag3 ((("inline_attribute", 1583)), 0, (0)), 100000000, 0, -332), (("lambda/lambda.mli", 268, 8913, 8915), ("lambda/lambda.mli", 268, 8913, 8941), 0), 0, Tag1 ("Lambda", 253)); (("specialise", 676), 0, (Tag3 ((("specialise_attribute", 1585)), 0, (0)), 100000000, 0, -333), (("lambda/lambda.mli", 269, 8942, 8944), ("lambda/lambda.mli", 269, 8942, 8978), 0), 0, Tag1 ("Lambda", 254)); (("local", 677), 0, (Tag3 ((("local_attribute", 1587)), 0, (0)), 100000000, 0, -334), (("lambda/lambda.mli", 270, 8979, 8981), ("lambda/lambda.mli", 270, 8979, 9004), 0), 0, Tag1 ("Lambda", 255)); (("poll", 678), 0, (Tag3 ((("poll_attribute", 1588)), 0, (0)), 100000000, 0, -335), (("lambda/lambda.mli", 271, 9005, 9007), ("lambda/lambda.mli", 271, 9005, 9028), 0), 0, Tag1 ("Lambda", 256)); (("is_a_functor", 679), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -336), (("lambda/lambda.mli", 272, 9029, 9031), ("lambda/lambda.mli", 272, 9029, 9050), 0), 0, Tag1 ("Lambda", 257)); (("stub", 680), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -337), (("lambda/lambda.mli", 273, 9051, 9053), ("lambda/lambda.mli", 273, 9051, 9064), 0), 0, Tag1 ("Lambda", 258)); (("tmc_candidate", 681), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -338), (("lambda/lambda.mli", 274, 9065, 9067), ("lambda/lambda.mli", 274, 9065, 9087), 0), 0, Tag1 ("Lambda", 259))]], 1, 0, 0, 0, 0, 0, (("lambda/lambda.mli", 267, 8885, 8885), ("lambda/lambda.mli", 275, 9088, 9089), 0), 0, 0, 0, Tag1 ("Lambda", 252)), 1, 0); Tag1 (("scoped_location", 1595), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Debuginfo")), "Scoped_location"), "t"), 0, (0)), 100000000, 0, -331)), 0, 0, 0, 0, (("lambda/lambda.mli", 277, 9091, 9091), ("lambda/lambda.mli", 277, 9091, 9141), 0), 0, 0, 0, Tag1 ("Lambda", 260)), 1, 0); Tag1 (("lambda", 1596), (0, 0, Tag1 ([(("Lvar", 715), ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -259)]), 0, (("lambda/lambda.mli", 280, 9157, 9161), ("lambda/lambda.mli", 280, 9157, 9176), 0), 0, Tag1 ("Lambda", 268)); (("Lmutvar", 716), ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -260)]), 0, (("lambda/lambda.mli", 281, 9177, 9179), ("lambda/lambda.mli", 281, 9177, 9199), 0), 0, Tag1 ("Lambda", 269)); (("Lconst", 717), ([(Tag3 ((("structured_constant", 1581)), 0, (0)), 100000000, 0, -261)]), 0, (("lambda/lambda.mli", 282, 9200, 9202), ("lambda/lambda.mli", 282, 9200, 9233), 0), 0, Tag1 ("Lambda", 270)); (("Lapply", 718), ([(Tag3 ((("lambda_apply", 1598)), 0, (0)), 100000000, 0, -262)]), 0, (("lambda/lambda.mli", 283, 9234, 9236), ("lambda/lambda.mli", 283, 9234, 9260), 0), 0, Tag1 ("Lambda", 271)); (("Lfunction", 719), ([(Tag3 ((("lfunction", 1597)), 0, (0)), 100000000, 0, -263)]), 0, (("lambda/lambda.mli", 284, 9261, 9263), ("lambda/lambda.mli", 284, 9261, 9287), 0), 0, Tag1 ("Lambda", 272)); (("Llet", 720), ([(Tag3 ((("let_kind", 1590)), 0, (0)), 100000000, 0, -264); (Tag3 ((("value_kind", 1572)), 0, (0)), 100000000, 0, -265); (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -266); (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -267); (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -268)]), 0, (("lambda/lambda.mli", 285, 9288, 9290), ("lambda/lambda.mli", 285, 9288, 9349), 0), 0, Tag1 ("Lambda", 273)); (("Lmutlet", 721), ([(Tag3 ((("value_kind", 1572)), 0, (0)), 100000000, 0, -269); (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -270); (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -271); (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -272)]), 0, (("lambda/lambda.mli", 286, 9350, 9352), ("lambda/lambda.mli", 286, 9350, 9403), 0), 0, Tag1 ("Lambda", 274)); (("Lletrec", 722), ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -275); (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -276)]), 100000000, 0, -274)], (0)), 100000000, 0, -273); (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -277)]), 0, (("lambda/lambda.mli", 287, 9404, 9406), ("lambda/lambda.mli", 287, 9404, 9451), 0), 0, Tag1 ("Lambda", 275)); (("Lprim", 723), ([(Tag3 ((("primitive", 1568)), 0, (0)), 100000000, 0, -278); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -280)], (0)), 100000000, 0, -279); (Tag3 ((("scoped_location", 1595)), 0, (0)), 100000000, 0, -281)]), 0, (("lambda/lambda.mli", 288, 9452, 9454), ("lambda/lambda.mli", 288, 9452, 9506), 0), 0, Tag1 ("Lambda", 276)); (("Lswitch", 724), ([(Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -282); (Tag3 ((("lambda_switch", 1599)), 0, (0)), 100000000, 0, -283); (Tag3 ((("scoped_location", 1595)), 0, (0)), 100000000, 0, -284)]), 0, (("lambda/lambda.mli", 289, 9507, 9509), ("lambda/lambda.mli", 289, 9507, 9562), 0), 0, Tag1 ("Lambda", 277)); (("Lstringswitch", 725), ([(Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -285); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -288); (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -289)]), 100000000, 0, -287)], (0)), 100000000, 0, -286); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -291)], (0)), 100000000, 0, -290); (Tag3 ((("scoped_location", 1595)), 0, (0)), 100000000, 0, -292)]), 0, (("lambda/lambda.mli", 292, 9657, 9659), ("lambda/lambda.mli", 293, 9678, 9749), 0), 0, Tag1 ("Lambda", 278)); (("Lstaticraise", 726), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -293); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -295)], (0)), 100000000, 0, -294)]), 0, (("lambda/lambda.mli", 294, 9750, 9752), ("lambda/lambda.mli", 294, 9750, 9787), 0), 0, Tag1 ("Lambda", 279)); (("Lstaticcatch", 727), ([(Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -296); (Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -298); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -301); (Tag3 ((("value_kind", 1572)), 0, (0)), 100000000, 0, -302)]), 100000000, 0, -300)], (0)), 100000000, 0, -299)]), 100000000, 0, -297); (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -303)]), 0, (("lambda/lambda.mli", 295, 9788, 9790), ("lambda/lambda.mli", 295, 9788, 9861), 0), 0, Tag1 ("Lambda", 280)); (("Ltrywith", 728), ([(Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -304); (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -305); (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -306)]), 0, (("lambda/lambda.mli", 296, 9862, 9864), ("lambda/lambda.mli", 296, 9862, 9903), 0), 0, Tag1 ("Lambda", 281)); (("Lifthenelse", 729), ([(Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -307); (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -308); (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -309)]), 0, (("lambda/lambda.mli", 299, 10018, 10020), ("lambda/lambda.mli", 299, 10018, 10061), 0), 0, Tag1 ("Lambda", 282)); (("Lsequence", 730), ([(Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -310); (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -311)]), 0, (("lambda/lambda.mli", 300, 10062, 10064), ("lambda/lambda.mli", 300, 10062, 10094), 0), 0, Tag1 ("Lambda", 283)); (("Lwhile", 731), ([(Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -312); (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -313)]), 0, (("lambda/lambda.mli", 301, 10095, 10097), ("lambda/lambda.mli", 301, 10095, 10124), 0), 0, Tag1 ("Lambda", 284)); (("Lfor", 732), ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -314); (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -315); (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -316); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "direction_flag"), 0, (0)), 100000000, 0, -317); (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -318)]), 0, (("lambda/lambda.mli", 302, 10125, 10127), ("lambda/lambda.mli", 302, 10125, 10188), 0), 0, Tag1 ("Lambda", 285)); (("Lassign", 733), ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -319); (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -320)]), 0, (("lambda/lambda.mli", 303, 10189, 10191), ("lambda/lambda.mli", 303, 10189, 10220), 0), 0, Tag1 ("Lambda", 286)); (("Lsend", 734), ([(Tag3 ((("meth_kind", 1591)), 0, (0)), 100000000, 0, -321); (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -322); (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -323); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -325)], (0)), 100000000, 0, -324); (Tag3 ((("scoped_location", 1595)), 0, (0)), 100000000, 0, -326)]), 0, (("lambda/lambda.mli", 304, 10221, 10223), ("lambda/lambda.mli", 304, 10221, 10293), 0), 0, Tag1 ("Lambda", 287)); (("Levent", 735), ([(Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -327); (Tag3 ((("lambda_event", 1600)), 0, (0)), 100000000, 0, -328)]), 0, (("lambda/lambda.mli", 305, 10294, 10296), ("lambda/lambda.mli", 305, 10294, 10329), 0), 0, Tag1 ("Lambda", 288)); (("Lifused", 736), ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -329); (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -330)]), 0, (("lambda/lambda.mli", 306, 10330, 10332), ("lambda/lambda.mli", 306, 10330, 10361), 0), 0, Tag1 ("Lambda", 289))], 0), 1, 0, 0, 0, 0, 0, (("lambda/lambda.mli", 279, 9143, 9143), ("lambda/lambda.mli", 306, 10330, 10361), 0), 0, 0, 0, Tag1 ("Lambda", 262)), 1, 0); Tag1 (("lfunction", 1597), (0, 0, [[(("kind", 737), 0, (Tag3 ((("function_kind", 1589)), 0, (0)), 100000000, 0, -250), (("lambda/lambda.mli", 309, 10387, 10391), ("lambda/lambda.mli", 309, 10387, 10411), 0), 0, Tag1 ("Lambda", 290)); (("params", 738), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -253); (Tag3 ((("value_kind", 1572)), 0, (0)), 100000000, 0, -254)]), 100000000, 0, -252)], (0)), 100000000, 0, -251), (("lambda/lambda.mli", 310, 10412, 10416), ("lambda/lambda.mli", 310, 10412, 10452), 0), 0, Tag1 ("Lambda", 291)); (("return", 739), 0, (Tag3 ((("value_kind", 1572)), 0, (0)), 100000000, 0, -255), (("lambda/lambda.mli", 311, 10453, 10457), ("lambda/lambda.mli", 311, 10453, 10476), 0), 0, Tag1 ("Lambda", 292)); (("body", 740), 0, (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -256), (("lambda/lambda.mli", 312, 10477, 10481), ("lambda/lambda.mli", 312, 10477, 10494), 0), 0, Tag1 ("Lambda", 293)); (("attr", 741), 0, (Tag3 ((("function_attribute", 1594)), 0, (0)), 100000000, 0, -257), (("lambda/lambda.mli", 313, 10495, 10499), ("lambda/lambda.mli", 313, 10495, 10524), 0), 0, Tag1 ("Lambda", 294)); (("loc", 742), 0, (Tag3 ((("scoped_location", 1595)), 0, (0)), 100000000, 0, -258), (("lambda/lambda.mli", 314, 10566, 10570), ("lambda/lambda.mli", 314, 10566, 10592), 0), 0, Tag1 ("Lambda", 295))]], 0, 0, 0, 0, 0, 0, (("lambda/lambda.mli", 308, 10363, 10363), ("lambda/lambda.mli", 314, 10566, 10594), 0), 0, 0, 0, Tag1 ("Lambda", 263)), 2, 0); Tag1 (("lambda_apply", 1598), (0, 0, [[(("ap_func", 743), 0, (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -243), (("lambda/lambda.mli", 317, 10615, 10619), ("lambda/lambda.mli", 317, 10615, 10636), 0), 0, Tag1 ("Lambda", 296)); (("ap_args", 744), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -245)], (0)), 100000000, 0, -244), (("lambda/lambda.mli", 318, 10637, 10641), ("lambda/lambda.mli", 318, 10637, 10663), 0), 0, Tag1 ("Lambda", 297)); (("ap_loc", 745), 0, (Tag3 ((("scoped_location", 1595)), 0, (0)), 100000000, 0, -246), (("lambda/lambda.mli", 319, 10664, 10668), ("lambda/lambda.mli", 319, 10664, 10693), 0), 0, Tag1 ("Lambda", 298)); (("ap_tailcall", 746), 0, (Tag3 ((("tailcall_attribute", 1582)), 0, (0)), 100000000, 0, -247), (("lambda/lambda.mli", 320, 10694, 10698), ("lambda/lambda.mli", 320, 10694, 10731), 0), 0, Tag1 ("Lambda", 299)); (("ap_inlined", 747), 0, (Tag3 ((("inline_attribute", 1583)), 0, (0)), 100000000, 0, -248), (("lambda/lambda.mli", 321, 10732, 10736), ("lambda/lambda.mli", 321, 10732, 10766), 0), 0, Tag1 ("Lambda", 300)); (("ap_specialised", 748), 0, (Tag3 ((("specialise_attribute", 1585)), 0, (0)), 100000000, 0, -249), (("lambda/lambda.mli", 322, 10813, 10817), ("lambda/lambda.mli", 322, 10813, 10855), 0), 0, Tag1 ("Lambda", 301))]], 1, 0, 0, 0, 0, 0, (("lambda/lambda.mli", 316, 10596, 10596), ("lambda/lambda.mli", 322, 10813, 10857), 0), 0, 0, 0, Tag1 ("Lambda", 264)), 2, 0); Tag1 (("lambda_switch", 1599), (0, 0, [[(("sw_numconsts", 749), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -231), (("lambda/lambda.mli", 325, 10879, 10883), ("lambda/lambda.mli", 325, 10879, 10901), 0), 0, Tag1 ("Lambda", 302)); (("sw_consts", 750), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -234); (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -235)]), 100000000, 0, -233)], (0)), 100000000, 0, -232), (("lambda/lambda.mli", 326, 10949, 10953), ("lambda/lambda.mli", 326, 10949, 10984), 0), 0, Tag1 ("Lambda", 303)); (("sw_numblocks", 751), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -236), (("lambda/lambda.mli", 327, 11009, 11013), ("lambda/lambda.mli", 327, 11009, 11031), 0), 0, Tag1 ("Lambda", 304)); (("sw_blocks", 752), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -239); (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -240)]), 100000000, 0, -238)], (0)), 100000000, 0, -237), (("lambda/lambda.mli", 328, 11081, 11085), ("lambda/lambda.mli", 328, 11081, 11116), 0), 0, Tag1 ("Lambda", 305)); (("sw_failaction", 753), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -242)], (0)), 100000000, 0, -241), (("lambda/lambda.mli", 329, 11143, 11147), ("lambda/lambda.mli", 329, 11143, 11176), 0), 0, Tag1 ("Lambda", 306))]], 1, 0, 0, 0, 0, 0, (("lambda/lambda.mli", 324, 10859, 10859), ("lambda/lambda.mli", 329, 11143, 11177), 0), 0, 0, 0, Tag1 ("Lambda", 265)), 2, 0); Tag1 (("lambda_event", 1600), (0, 0, [[(("lev_loc", 754), 0, (Tag3 ((("scoped_location", 1595)), 0, (0)), 100000000, 0, -225), (("lambda/lambda.mli", 332, 11235, 11239), ("lambda/lambda.mli", 332, 11235, 11264), 0), 0, Tag1 ("Lambda", 307)); (("lev_kind", 755), 0, (Tag3 ((("lambda_event_kind", 1601)), 0, (0)), 100000000, 0, -226), (("lambda/lambda.mli", 333, 11265, 11269), ("lambda/lambda.mli", 333, 11265, 11297), 0), 0, Tag1 ("Lambda", 308)); (("lev_repr", 756), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -229)], (0)), 100000000, 0, -228)], (0)), 100000000, 0, -227), (("lambda/lambda.mli", 334, 11298, 11302), ("lambda/lambda.mli", 334, 11298, 11327), 0), 0, Tag1 ("Lambda", 309)); (("lev_env", 925), 0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -230), (("lambda/lambda.mli", 335, 11328, 11332), ("lambda/lambda.mli", 335, 11328, 11346), 0), 0, Tag1 ("Lambda", 310))]], 1, 0, 0, 0, 0, 0, (("lambda/lambda.mli", 331, 11216, 11216), ("lambda/lambda.mli", 335, 11328, 11348), 0), 0, 0, 0, Tag1 ("Lambda", 266)), 2, 0); Tag1 (("lambda_event_kind", 1601), (0, 0, Tag1 ([(("Lev_before", 926), (0), 0, (("lambda/lambda.mli", 338, 11374, 11378), ("lambda/lambda.mli", 338, 11374, 11388), 0), 0, Tag1 ("Lambda", 311)); (("Lev_after", 927), ([(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -224)]), 0, (("lambda/lambda.mli", 339, 11389, 11391), ("lambda/lambda.mli", 339, 11389, 11421), 0), 0, Tag1 ("Lambda", 312)); (("Lev_function", 928), (0), 0, (("lambda/lambda.mli", 340, 11422, 11424), ("lambda/lambda.mli", 340, 11422, 11438), 0), 0, Tag1 ("Lambda", 313)); (("Lev_pseudo", 929), (0), 0, (("lambda/lambda.mli", 341, 11439, 11441), ("lambda/lambda.mli", 341, 11439, 11453), 0), 0, Tag1 ("Lambda", 314))], 0), 1, 0, 0, 0, 0, 0, (("lambda/lambda.mli", 337, 11350, 11350), ("lambda/lambda.mli", 341, 11439, 11453), 0), 0, 0, 0, Tag1 ("Lambda", 267)), 2, 0); Tag1 (("program", 1602), (0, 0, [[(("module_ident", 931), 0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -220), (("lambda/lambda.mli", 344, 11470, 11474), ("lambda/lambda.mli", 344, 11470, 11497), 0), 0, Tag1 ("Lambda", 316)); (("main_module_block_size", 932), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -221), (("lambda/lambda.mli", 345, 11498, 11502), ("lambda/lambda.mli", 345, 11498, 11531), 0), 0, Tag1 ("Lambda", 317)); (("required_globals", 981), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ident")), "Set"), "t"), 0, (0)), 100000000, 0, -222), (("lambda/lambda.mli", 346, 11532, 11536), ("lambda/lambda.mli", 346, 11532, 11567), 0), 0, Tag1 ("Lambda", 318)); (("code", 982), 0, (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -223), (("lambda/lambda.mli", 348, 11684, 11688), ("lambda/lambda.mli", 348, 11684, 11701), 0), 0, Tag1 ("Lambda", 319))]], 1, 0, 0, 0, 0, 0, (("lambda/lambda.mli", 343, 11455, 11455), ("lambda/lambda.mli", 348, 11684, 11703), 0), 0, 0, 0, Tag1 ("Lambda", 315)), 1, 0); (("make_key", 1603), ((Tag1 (0, (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -219), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -218)], (0)), 100000000, 0, -217), 0), 100000000, 0, -216), 0, (("lambda/lambda.mli", 362, 12271, 12271), ("lambda/lambda.mli", 362, 12271, 12308), 0), 0, Tag1 ("Lambda", 320)), 0); (("const_unit", 1604), ((Tag3 ((("structured_constant", 1581)), 0, (0)), 100000000, 0, -215), 0, (("lambda/lambda.mli", 364, 12310, 12310), ("lambda/lambda.mli", 364, 12310, 12345), 0), 0, Tag1 ("Lambda", 321)), 0); (("const_int", 1605), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -214), (Tag3 ((("structured_constant", 1581)), 0, (0)), 100000000, 0, -213), 0), 100000000, 0, -212), 0, (("lambda/lambda.mli", 365, 12346, 12346), ("lambda/lambda.mli", 365, 12346, 12388), 0), 0, Tag1 ("Lambda", 322)), 0); (("lambda_unit", 1606), ((Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -211), 0, (("lambda/lambda.mli", 366, 12389, 12389), ("lambda/lambda.mli", 366, 12389, 12412), 0), 0, Tag1 ("Lambda", 323)), 0); (("name_lambda", 1607), ((Tag1 (0, (Tag3 ((("let_kind", 1590)), 0, (0)), 100000000, 0, -210), (Tag1 (0, (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -209), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -208), (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -207), 0), 100000000, 0, -206), (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -205), 0), 100000000, 0, -204), 0), 100000000, 0, -203), 0), 100000000, 0, -202), 0, (("lambda/lambda.mli", 367, 12413, 12413), ("lambda/lambda.mli", 367, 12413, 12481), 0), 0, Tag1 ("Lambda", 324)), 0); (("name_lambda_list", 1608), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -201)], (0)), 100000000, 0, -200), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -199)], (0)), 100000000, 0, -198), (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -197), 0), 100000000, 0, -196), (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -195), 0), 100000000, 0, -194), 0), 100000000, 0, -193), 0, (("lambda/lambda.mli", 368, 12482, 12482), ("lambda/lambda.mli", 368, 12482, 12552), 0), 0, Tag1 ("Lambda", 325)), 0); (("lfunction", 1609), ((Tag1 (("kind"), (Tag3 ((("function_kind", 1589)), 0, (0)), 100000000, 0, -192), (Tag1 (("params"), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -190); (Tag3 ((("value_kind", 1572)), 0, (0)), 100000000, 0, -191)]), 100000000, 0, -189)], (0)), 100000000, 0, -188), (Tag1 (("return"), (Tag3 ((("value_kind", 1572)), 0, (0)), 100000000, 0, -187), (Tag1 (("body"), (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -186), (Tag1 (("attr"), (Tag3 ((("function_attribute", 1594)), 0, (0)), 100000000, 0, -185), (Tag1 (("loc"), (Tag3 ((("scoped_location", 1595)), 0, (0)), 100000000, 0, -184), (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -183), 0), 100000000, 0, -182), 0), 100000000, 0, -181), 0), 100000000, 0, -180), 0), 100000000, 0, -179), 0), 100000000, 0, -178), 0), 100000000, 0, -177), 0, (("lambda/lambda.mli", 370, 12554, 12554), ("lambda/lambda.mli", 377, 12769, 12777), 0), 0, Tag1 ("Lambda", 326)), 0); (("iter_head_constructor", 1610), ((Tag1 (0, (Tag1 (0, (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -176), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -175), 0), 100000000, 0, -174), (Tag1 (0, (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -173), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -172), 0), 100000000, 0, -171), 0), 100000000, 0, -170), 0, (("lambda/lambda.mli", 380, 12780, 12780), ("lambda/lambda.mli", 380, 12780, 12841), 0), 0, Tag1 ("Lambda", 327)), 0); (("shallow_iter", 1611), ((Tag1 (("tail"), (Tag1 (0, (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -169), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -168), 0), 100000000, 0, -167), (Tag1 (("non_tail"), (Tag1 (0, (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -166), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -165), 0), 100000000, 0, -164), (Tag1 (0, (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -163), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -162), 0), 100000000, 0, -161), 0), 100000000, 0, -160), 0), 100000000, 0, -159), 0, (("lambda/lambda.mli", 386, 13000, 13000), ("lambda/lambda.mli", 389, 13076, 13092), 0), 0, Tag1 ("Lambda", 328)), 0); (("transl_prim", 1612), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -158), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -157), (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -156), 0), 100000000, 0, -155), 0), 100000000, 0, -154), 0, (("lambda/lambda.mli", 393, 13216, 13216), ("lambda/lambda.mli", 393, 13216, 13259), 0), 0, Tag1 ("Lambda", 329)), 0); (("free_variables", 1613), ((Tag1 (0, (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -153), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ident")), "Set"), "t"), 0, (0)), 100000000, 0, -152), 0), 100000000, 0, -151), 0, (("lambda/lambda.mli", 401, 13396, 13396), ("lambda/lambda.mli", 401, 13396, 13437), 0), 0, Tag1 ("Lambda", 330)), 0); (("transl_module_path", 1614), ((Tag1 (0, (Tag3 ((("scoped_location", 1595)), 0, (0)), 100000000, 0, -150), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -149), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -148), (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -147), 0), 100000000, 0, -146), 0), 100000000, 0, -145), 0), 100000000, 0, -144), 0, (("lambda/lambda.mli", 403, 13439, 13439), ("lambda/lambda.mli", 403, 13439, 13507), 0), 0, Tag1 ("Lambda", 331)), 0); (("transl_value_path", 1615), ((Tag1 (0, (Tag3 ((("scoped_location", 1595)), 0, (0)), 100000000, 0, -143), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -142), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -141), (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -140), 0), 100000000, 0, -139), 0), 100000000, 0, -138), 0), 100000000, 0, -137), 0, (("lambda/lambda.mli", 404, 13508, 13508), ("lambda/lambda.mli", 404, 13508, 13575), 0), 0, Tag1 ("Lambda", 332)), 0); (("transl_extension_path", 1616), ((Tag1 (0, (Tag3 ((("scoped_location", 1595)), 0, (0)), 100000000, 0, -136), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -135), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -134), (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -133), 0), 100000000, 0, -132), 0), 100000000, 0, -131), 0), 100000000, 0, -130), 0, (("lambda/lambda.mli", 405, 13576, 13576), ("lambda/lambda.mli", 405, 13576, 13647), 0), 0, Tag1 ("Lambda", 333)), 0); (("transl_class_path", 1617), ((Tag1 (0, (Tag3 ((("scoped_location", 1595)), 0, (0)), 100000000, 0, -129), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -128), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -127), (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -126), 0), 100000000, 0, -125), 0), 100000000, 0, -124), 0), 100000000, 0, -123), 0, (("lambda/lambda.mli", 406, 13648, 13648), ("lambda/lambda.mli", 406, 13648, 13715), 0), 0, Tag1 ("Lambda", 334)), 0); (("make_sequence", 1618), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -120), (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -122), 0), 100000000, 0, -121), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -120)], (0)), 100000000, 0, -119), (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -118), 0), 100000000, 0, -117), 0), 100000000, 0, -116), 0, (("lambda/lambda.mli", 408, 13717, 13717), ("lambda/lambda.mli", 408, 13717, 13771), 0), 0, Tag1 ("Lambda", 335)), 0); (("subst", 1619), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -115), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "value_description"), 0, (0)), 100000000, 0, -114), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -113), (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -112), 0), 100000000, 0, -111), 0), 100000000, 0, -110), 0), 100000000, 0, -109), (Tag1 (Tag1 ("freshen_bound_variables"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -108)], (0)), 100000000, 0, -107), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ident")), "Map"), "t"), [(Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -106)], (0)), 100000000, 0, -105), (Tag1 (0, (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -104), (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -103), 0), 100000000, 0, -102), 0), 100000000, 0, -101), 0), 100000000, 0, -100), 0), 100000000, 0, -99), 0, (("lambda/lambda.mli", 410, 13773, 13773), ("lambda/lambda.mli", 413, 13879, 13919), 0), 0, Tag1 ("Lambda", 336)), 0); (("rename", 1620), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ident")), "Map"), "t"), [(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -98)], (0)), 100000000, 0, -97), (Tag1 (0, (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -96), (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -95), 0), 100000000, 0, -94), 0), 100000000, 0, -93), 0, (("lambda/lambda.mli", 427, 14347, 14347), ("lambda/lambda.mli", 427, 14347, 14399), 0), 0, Tag1 ("Lambda", 337)), 0); (("duplicate", 1621), ((Tag1 (0, (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -92), (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -91), 0), 100000000, 0, -90), 0, (("lambda/lambda.mli", 431, 14492, 14492), ("lambda/lambda.mli", 431, 14492, 14524), 0), 0, Tag1 ("Lambda", 338)), 0); (("map", 1622), ((Tag1 (0, (Tag1 (0, (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -89), (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -88), 0), 100000000, 0, -87), (Tag1 (0, (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -86), (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -85), 0), 100000000, 0, -84), 0), 100000000, 0, -83), 0, (("lambda/lambda.mli", 434, 14593, 14593), ("lambda/lambda.mli", 434, 14593, 14641), 0), 0, Tag1 ("Lambda", 339)), 0); (("shallow_map", 1623), ((Tag1 (0, (Tag1 (0, (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -82), (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -81), 0), 100000000, 0, -80), (Tag1 (0, (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -79), (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -78), 0), 100000000, 0, -77), 0), 100000000, 0, -76), 0, (("lambda/lambda.mli", 438, 14743, 14743), ("lambda/lambda.mli", 438, 14743, 14800), 0), 0, Tag1 ("Lambda", 340)), 0); (("bind", 1624), ((Tag1 (0, (Tag3 ((("let_kind", 1590)), 0, (0)), 100000000, 0, -75), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -74), (Tag1 (0, (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -73), (Tag1 (0, (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -72), (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -71), 0), 100000000, 0, -70), 0), 100000000, 0, -69), 0), 100000000, 0, -68), 0), 100000000, 0, -67), 0, (("lambda/lambda.mli", 441, 14862, 14862), ("lambda/lambda.mli", 441, 14862, 14922), 0), 0, Tag1 ("Lambda", 341)), 0); (("bind_with_value_kind", 1625), ((Tag1 (0, (Tag3 ((("let_kind", 1590)), 0, (0)), 100000000, 0, -66), (Tag1 (0, (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -64); (Tag3 ((("value_kind", 1572)), 0, (0)), 100000000, 0, -65)]), 100000000, 0, -63), (Tag1 (0, (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -62), (Tag1 (0, (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -61), (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -60), 0), 100000000, 0, -59), 0), 100000000, 0, -58), 0), 100000000, 0, -57), 0), 100000000, 0, -56), 0, (("lambda/lambda.mli", 442, 14923, 14923), ("lambda/lambda.mli", 443, 14949, 15015), 0), 0, Tag1 ("Lambda", 342)), 0); (("negate_integer_comparison", 1626), ((Tag1 (0, (Tag3 ((("integer_comparison", 1569)), 0, (0)), 100000000, 0, -55), (Tag3 ((("integer_comparison", 1569)), 0, (0)), 100000000, 0, -54), 0), 100000000, 0, -53), 0, (("lambda/lambda.mli", 445, 15017, 15017), ("lambda/lambda.mli", 445, 15017, 15089), 0), 0, Tag1 ("Lambda", 343)), 0); (("swap_integer_comparison", 1627), ((Tag1 (0, (Tag3 ((("integer_comparison", 1569)), 0, (0)), 100000000, 0, -52), (Tag3 ((("integer_comparison", 1569)), 0, (0)), 100000000, 0, -51), 0), 100000000, 0, -50), 0, (("lambda/lambda.mli", 446, 15090, 15090), ("lambda/lambda.mli", 446, 15090, 15160), 0), 0, Tag1 ("Lambda", 344)), 0); (("negate_float_comparison", 1628), ((Tag1 (0, (Tag3 ((("float_comparison", 1570)), 0, (0)), 100000000, 0, -49), (Tag3 ((("float_comparison", 1570)), 0, (0)), 100000000, 0, -48), 0), 100000000, 0, -47), 0, (("lambda/lambda.mli", 448, 15162, 15162), ("lambda/lambda.mli", 448, 15162, 15228), 0), 0, Tag1 ("Lambda", 345)), 0); (("swap_float_comparison", 1629), ((Tag1 (0, (Tag3 ((("float_comparison", 1570)), 0, (0)), 100000000, 0, -46), (Tag3 ((("float_comparison", 1570)), 0, (0)), 100000000, 0, -45), 0), 100000000, 0, -44), 0, (("lambda/lambda.mli", 449, 15229, 15229), ("lambda/lambda.mli", 449, 15229, 15293), 0), 0, Tag1 ("Lambda", 346)), 0); (("default_function_attribute", 1630), ((Tag3 ((("function_attribute", 1594)), 0, (0)), 100000000, 0, -43), 0, (("lambda/lambda.mli", 451, 15295, 15295), ("lambda/lambda.mli", 451, 15295, 15346), 0), 0, Tag1 ("Lambda", 347)), 0); (("default_stub_attribute", 1631), ((Tag3 ((("function_attribute", 1594)), 0, (0)), 100000000, 0, -42), 0, (("lambda/lambda.mli", 452, 15347, 15347), ("lambda/lambda.mli", 452, 15347, 15394), 0), 0, Tag1 ("Lambda", 348)), 0); (("function_is_curried", 1632), ((Tag1 (0, (Tag3 ((("lfunction", 1597)), 0, (0)), 100000000, 0, -41), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -40), 0), 100000000, 0, -39), 0, (("lambda/lambda.mli", 454, 15396, 15396), ("lambda/lambda.mli", 454, 15396, 15439), 0), 0, Tag1 ("Lambda", 349)), 0); (("find_exact_application", 1633), ((Tag1 (0, (Tag3 ((("function_kind", 1589)), 0, (0)), 100000000, 0, -38), (Tag1 (("arity"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -37), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -36)], (0)), 100000000, 0, -35), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -34)], (0)), 100000000, 0, -33)], (0)), 100000000, 0, -32), 0), 100000000, 0, -31), 0), 100000000, 0, -30), 0), 100000000, 0, -29), 0, (("lambda/lambda.mli", 455, 15440, 15440), ("lambda/lambda.mli", 456, 15469, 15534), 0), 0, Tag1 ("Lambda", 350)), 0); (("max_arity", 1634), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -28), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -27), 0), 100000000, 0, -26), 0, (("lambda/lambda.mli", 458, 15536, 15536), ("lambda/lambda.mli", 458, 15536, 15563), 0), 0, Tag1 ("Lambda", 351)), 0); (("next_raise_count", 1635), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -25), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -24), 0), 100000000, 0, -23), 0, (("lambda/lambda.mli", 469, 15925, 15925), ("lambda/lambda.mli", 469, 15925, 15959), 0), 0, Tag1 ("Lambda", 352)), 0); (("staticfail", 1636), ((Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -22), 0, (("lambda/lambda.mli", 471, 15961, 15961), ("lambda/lambda.mli", 471, 15961, 15984), 0), 0, Tag1 ("Lambda", 353)), 0); (("is_guarded", 1637), ((Tag1 (0, (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -21), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -20), 0), 100000000, 0, -19), 0, (("lambda/lambda.mli", 474, 16079, 16079), ("lambda/lambda.mli", 474, 16079, 16109), 0), 0, Tag1 ("Lambda", 354)), 0); (("patch_guarded", 1638), ((Tag1 (0, (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -18), (Tag1 (0, (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -17), (Tag3 ((("lambda", 1596)), 0, (0)), 100000000, 0, -16), 0), 100000000, 0, -15), 0), 100000000, 0, -14), 0, (("lambda/lambda.mli", 475, 16110, 16110), ("lambda/lambda.mli", 475, 16110, 16156), 0), 0, Tag1 ("Lambda", 355)), 0); (("raise_kind", 1639), ((Tag1 (0, (Tag3 ((("raise_kind", 1577)), 0, (0)), 100000000, 0, -13), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("lambda/lambda.mli", 477, 16158, 16158), ("lambda/lambda.mli", 477, 16158, 16194), 0), 0, Tag1 ("Lambda", 356)), 0); (("merge_inline_attributes", 1640), ((Tag1 (0, (Tag3 ((("inline_attribute", 1583)), 0, (0)), 100000000, 0, -10), (Tag1 (0, (Tag3 ((("inline_attribute", 1583)), 0, (0)), 100000000, 0, -9), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("inline_attribute", 1583)), 0, (0)), 100000000, 0, -8)], (0)), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("lambda/lambda.mli", 479, 16196, 16196), ("lambda/lambda.mli", 482, 16268, 16296), 0), 0, Tag1 ("Lambda", 357)), 0); (("reset", 1641), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("lambda/lambda.mli", 484, 16298, 16298), ("lambda/lambda.mli", 484, 16298, 16321), 0), 0, Tag1 ("Lambda", 358)), 0)], "Lambda", [("Lambda", ("\180\1419\236'\146K$\128\006\135q\135V\029\180")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Types", ("\177\238\029.\220\006\163!\230\015\006\182\133\155\194\166")); ("Type_immediacy", ("\"\127k\011Q\241\211\138\193;8\142\129\141#\251")); ("Subst", ("\021\031\148\223\127\186\189\135\027}\145r\216\143\177\156")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shape", ("\235\127Y\213\025\137=\244\218\181\248N\189\188\216p")); ("Primitive", ("}Shh\162\015|\220A\203\249\232\245G\213\019")); ("Path", ("\012\183\178\025\1298\228*\021r\185\160Y\252\n\026")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Outcometree", ("9\021%\234\211\206\210\004H\165\208\2014\234Q\142")); ("Misc", ("*\026\026\234c\191\131\161\\\203\183\012O\252\153\198")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Load_path", ("\012@\228l\230\164S\172h\1726X\020\252o}")); ("Identifiable", ("\004F\207\014\158GU\001\184\214\187%/#;\211")); ("Ident", ("\b9;!\187.\220\163(x\b\174\\\223\020\004")); ("Env", ("\021\n\181\142x\b\169j\227\"\017\248*\178\245\223")); ("Debuginfo", ("\131\251\175\217P\194M\163\022\151\002\005\006\185:\185")); ("Cmi_format", ("6\177\bU\139\"\023\152=\249\135\174\b\011Cg")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Build_path_prefix_map", ("y\028\167\207D\220\198\216\011\208\172\149\2416\bc")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216"))], [(0)])
val reset : unit -> unit

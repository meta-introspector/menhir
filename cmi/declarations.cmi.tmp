type template_arity = { template_level : Sorts.t; }
type template_universes = {
  template_param_levels : Univ.Level.t option list;
  template_context : Univ.ContextSet.t;
}
type ('a, 'b) declaration_arity = RegularArity of 'a | TemplateArity of 'b
type inline = int option
type ('a, 'opaque) constant_def =
    Undef of inline
  | Def of 'a
  | OpaqueDef of 'opaque
  | Primitive of CPrimitives.t
type universes = Monomorphic | Polymorphic of Univ.AbstractContext.t
type typing_flags = {
  check_guarded : bool;
  check_positive : bool;
  check_universes : bool;
  conv_oracle : Conv_oracle.oracle;
  share_reduction : bool;
  enable_VM : bool;
  enable_native_compiler : bool;
  indices_matter : bool;
  impredicative_set : bool;
  sprop_allowed : bool;
  allow_uip : bool;
}
type 'opaque pconstant_body = {
  const_hyps : Constr.named_context;
  const_univ_hyps : Univ.Instance.t;
  const_body : (Constr.t, 'opaque) constant_def;
  const_type : Constr.types;
  const_relevance : Sorts.relevance;
  const_body_code : Vmemitcodes.body_code option;
  const_universes : universes;
  const_inline_code : bool;
  const_typing_flags : typing_flags;
}
type constant_body = Opaqueproof.opaque pconstant_body
type nested_type =
    NestedInd of Names.inductive
  | NestedPrimitive of Names.Constant.t
type recarg = Norec | Mrec of Names.inductive | Nested of nested_type
type wf_paths = recarg Rtree.t
type record_info =
    NotRecord
  | FakeRecord
  | PrimRecord of
      (Names.Id.t * Names.Label.t array * Sorts.relevance array *
       Constr.types array)
      array
type regular_inductive_arity = {
  mind_user_arity : Constr.types;
  mind_sort : Sorts.t;
}
type inductive_arity =
    (regular_inductive_arity, template_arity) declaration_arity
type one_inductive_body = {
  mind_typename : Names.Id.t;
  mind_arity_ctxt : Constr.rel_context;
  mind_arity : inductive_arity;
  mind_consnames : Names.Id.t array;
  mind_user_lc : Constr.types array;
  mind_nrealargs : int;
  mind_nrealdecls : int;
  mind_kelim : Sorts.family;
  mind_nf_lc : (Constr.rel_context * Constr.types) array;
  mind_consnrealargs : int array;
  mind_consnrealdecls : int array;
  mind_recargs : wf_paths;
  mind_relevance : Sorts.relevance;
  mind_nb_constant : int;
  mind_nb_args : int;
  mind_reloc_tbl : Vmvalues.reloc_table;
}
type recursivity_kind = Finite | CoFinite | BiFinite
type mutual_inductive_body = {
  mind_packets : one_inductive_body array;
  mind_record : record_info;
  mind_finite : recursivity_kind;
  mind_ntypes : int;
  mind_hyps : Constr.named_context;
  mind_univ_hyps : Univ.Instance.t;
  mind_nparams : int;
  mind_nparams_rec : int;
  mind_params_ctxt : Constr.rel_context;
  mind_universes : universes;
  mind_template : template_universes option;
  mind_variance : Univ.Variance.t array option;
  mind_sec_variance : Univ.Variance.t array option;
  mind_private : bool option;
  mind_typing_flags : typing_flags;
}
type mind_specif = mutual_inductive_body * one_inductive_body
type ('ty, 'a) functorize =
    NoFunctor of 'a
  | MoreFunctor of Names.MBId.t * 'ty * ('ty, 'a) functorize
type 'uconstr with_declaration =
    WithMod of Names.Id.t list * Names.ModPath.t
  | WithDef of Names.Id.t list * 'uconstr
type 'uconstr module_alg_expr =
    MEident of Names.ModPath.t
  | MEapply of 'uconstr module_alg_expr * Names.ModPath.t
  | MEwith of 'uconstr module_alg_expr * 'uconstr with_declaration
type 'uconstr functor_alg_expr =
    MENoFunctor of 'uconstr module_alg_expr
  | MEMoreFunctor of 'uconstr functor_alg_expr
type module_expression =
    (Constr.constr * Univ.AbstractContext.t option) functor_alg_expr
type structure_field_body =
    SFBconst of constant_body
  | SFBmind of mutual_inductive_body
  | SFBmodule of module_body
  | SFBmodtype of module_type_body
and structure_body = (Names.Label.t * structure_field_body) list
and module_signature = (module_type_body, structure_body) functorize
and module_implementation =
    Abstract
  | Algebraic of module_expression
  | Struct of structure_body
  | FullStruct
and 'a generic_module_body = {
  mod_mp : Names.ModPath.t;
  mod_expr : 'a;
  mod_type : module_signature;
  mod_type_alg : module_expression option;
  mod_delta : Mod_subst.delta_resolver;
  mod_retroknowledge : 'a module_retroknowledge;
}
and module_body = module_implementation generic_module_body
and module_type_body = unit generic_module_body
and _ module_retroknowledge =
    ModBodyRK :
      Retroknowledge.action list -> module_implementation
                                    module_retroknowledge
  | ("DEBUG:rule", [Tag1 (("template_arity", 1261), (0, 0, [[(("template_level", 544), 0, (Tag3 (Tag1 ((Tag2 ("Sorts")), "t"), 0, (0)), 100000000, 0, -163), (("kernel/declarations.mli", 29, 1308, 1310), ("kernel/declarations.mli", 29, 1308, 1335), 0), 0, Tag1 ("Declarations", 2))]], 1, 0, 0, 0, 0, 0, (("kernel/declarations.mli", 28, 1284, 1284), ("kernel/declarations.mli", 30, 1336, 1337), 0), 0, 0, 1, Tag1 ("Declarations", 1)), 1, 0); Tag1 (("template_universes", 1262), (0, 0, [[(("template_param_levels", 617), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Level"), "t"), 0, (0)), 100000000, 0, -161)], (0)), 100000000, 0, -160)], (0)), 100000000, 0, -159), (("kernel/declarations.mli", 33, 1367, 1369), ("kernel/declarations.mli", 33, 1367, 1418), 0), 0, Tag1 ("Declarations", 4)); (("template_context", 635), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "ContextSet"), "t"), 0, (0)), 100000000, 0, -162), (("kernel/declarations.mli", 34, 1419, 1421), ("kernel/declarations.mli", 34, 1419, 1458), 0), 0, Tag1 ("Declarations", 5))]], 1, 0, 0, 0, 0, 0, (("kernel/declarations.mli", 32, 1339, 1339), ("kernel/declarations.mli", 35, 1459, 1460), 0), 0, 0, 0, Tag1 ("Declarations", 3)), 1, 0); Tag1 (("declaration_arity", 1263), ([((("a")), 100000000, 0, -157); ((("b")), 100000000, 0, -158)], 2, Tag1 ([(("RegularArity", 709), ([((("a")), 100000000, 0, -157)]), 0, (("kernel/declarations.mli", 38, 1496, 1498), ("kernel/declarations.mli", 38, 1496, 1518), 0), 0, Tag1 ("Declarations", 7)); (("TemplateArity", 710), ([((("b")), 100000000, 0, -158)]), 0, (("kernel/declarations.mli", 39, 1519, 1521), ("kernel/declarations.mli", 39, 1519, 1542), 0), 0, Tag1 ("Declarations", 8))], 0), 1, 0, [25; 25], [0; 0], 0, 0, (("kernel/declarations.mli", 37, 1462, 1462), ("kernel/declarations.mli", 39, 1519, 1542), 0), 0, 0, 0, Tag1 ("Declarations", 6)), 1, 0); Tag1 (("inline", 1264), (0, 0, 0, 1, ((Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -156)], (0)), 100000000, 0, -155)), 0, 0, 0, 0, (("kernel/declarations.mli", 44, 1633, 1633), ("kernel/declarations.mli", 44, 1633, 1657), 0), 0, 0, 0, Tag1 ("Declarations", 9)), 1, 0); Tag1 (("constant_def", 1265), ([((("a")), 100000000, 0, -152); ((("opaque")), 100000000, 0, -153)], 2, Tag1 ([(("Undef", 713), ([(Tag3 ((("inline", 1264)), 0, (0)), 100000000, 0, -151)]), 0, (("kernel/declarations.mli", 51, 1850, 1852), ("kernel/declarations.mli", 51, 1850, 1869), 0), 0, Tag1 ("Declarations", 11)); (("Def", 714), ([((("a")), 100000000, 0, -152)]), 0, (("kernel/declarations.mli", 52, 1919, 1921), ("kernel/declarations.mli", 52, 1919, 1932), 0), 0, Tag1 ("Declarations", 12)); (("OpaqueDef", 715), ([((("opaque")), 100000000, 0, -153)]), 0, (("kernel/declarations.mli", 53, 2003, 2005), ("kernel/declarations.mli", 53, 2003, 2027), 0), 0, Tag1 ("Declarations", 13)); (("Primitive", 716), ([(Tag3 (Tag1 ((Tag2 ("CPrimitives")), "t"), 0, (0)), 100000000, 0, -154)]), 0, (("kernel/declarations.mli", 54, 2083, 2085), ("kernel/declarations.mli", 54, 2083, 2113), 0), 0, Tag1 ("Declarations", 14))], 0), 1, 0, [25; 25], [0; 0], 0, 0, (("kernel/declarations.mli", 50, 1816, 1816), ("kernel/declarations.mli", 54, 2083, 2113), 0), 0, 0, 0, Tag1 ("Declarations", 10)), 1, 0); Tag1 (("universes", 1266), (0, 0, Tag1 ([(("Monomorphic", 746), (0), 0, (("kernel/declarations.mli", 57, 2164, 2166), ("kernel/declarations.mli", 57, 2164, 2179), 0), 0, Tag1 ("Declarations", 16)); (("Polymorphic", 747), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "AbstractContext"), "t"), 0, (0)), 100000000, 0, -150)]), 0, (("kernel/declarations.mli", 58, 2180, 2182), ("kernel/declarations.mli", 58, 2180, 2221), 0), 0, Tag1 ("Declarations", 17))], 0), 1, 0, 0, 0, 0, 0, (("kernel/declarations.mli", 56, 2147, 2147), ("kernel/declarations.mli", 58, 2180, 2221), 0), 0, 0, 0, Tag1 ("Declarations", 15)), 1, 0); Tag1 (("typing_flags", 1267), (0, 0, [[(("check_guarded", 758), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -139), (("kernel/declarations.mli", 65, 2486, 2488), ("kernel/declarations.mli", 65, 2486, 2509), 0), 0, Tag1 ("Declarations", 19)); (("check_positive", 759), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -140), (("kernel/declarations.mli", 69, 2600, 2602), ("kernel/declarations.mli", 69, 2600, 2624), 0), 0, Tag1 ("Declarations", 20)); (("check_universes", 760), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -141), (("kernel/declarations.mli", 73, 2741, 2743), ("kernel/declarations.mli", 73, 2741, 2766), 0), 0, Tag1 ("Declarations", 21)); (("conv_oracle", 772), 0, (Tag3 (Tag1 ((Tag2 ("Conv_oracle")), "oracle"), 0, (0)), 100000000, 0, -142), (("kernel/declarations.mli", 76, 2825, 2827), ("kernel/declarations.mli", 76, 2825, 2860), 0), 0, Tag1 ("Declarations", 22)); (("share_reduction", 773), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -143), (("kernel/declarations.mli", 79, 2907, 2909), ("kernel/declarations.mli", 79, 2907, 2932), 0), 0, Tag1 ("Declarations", 23)); (("enable_VM", 774), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -144), (("kernel/declarations.mli", 82, 2975, 2977), ("kernel/declarations.mli", 82, 2975, 2994), 0), 0, Tag1 ("Declarations", 24)); (("enable_native_compiler", 775), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -145), (("kernel/declarations.mli", 85, 3066, 3068), ("kernel/declarations.mli", 85, 3066, 3098), 0), 0, Tag1 ("Declarations", 25)); (("indices_matter", 776), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -146), (("kernel/declarations.mli", 88, 3165, 3167), ("kernel/declarations.mli", 88, 3165, 3188), 0), 0, Tag1 ("Declarations", 26)); (("impredicative_set", 777), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -147), (("kernel/declarations.mli", 91, 3268, 3270), ("kernel/declarations.mli", 91, 3268, 3294), 0), 0, Tag1 ("Declarations", 27)); (("sprop_allowed", 778), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -148), (("kernel/declarations.mli", 94, 3342, 3344), ("kernel/declarations.mli", 94, 3342, 3364), 0), 0, Tag1 ("Declarations", 28)); (("allow_uip", 779), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -149), (("kernel/declarations.mli", 97, 3420, 3422), ("kernel/declarations.mli", 97, 3420, 3438), 0), 0, Tag1 ("Declarations", 29))]], 1, 0, 0, 0, 0, 0, (("kernel/declarations.mli", 64, 2464, 2464), ("kernel/declarations.mli", 100, 3493, 3494), 0), 0, 0, 0, Tag1 ("Declarations", 18)), 1, 0); Tag1 (("pconstant_body", 1268), ([((("opaque")), 100000000, 0, -131)], 1, [[(("const_hyps", 781), 0, (Tag3 (Tag1 ((Tag2 ("Constr")), "named_context"), 0, (0)), 100000000, 0, -127), (("kernel/declarations.mli", 107, 3686, 3690), ("kernel/declarations.mli", 107, 3686, 3724), 0), 0, Tag1 ("Declarations", 31)); (("const_univ_hyps", 795), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Instance"), "t"), 0, (0)), 100000000, 0, -128), (("kernel/declarations.mli", 108, 3751, 3755), ("kernel/declarations.mli", 108, 3751, 3789), 0), 0, Tag1 ("Declarations", 32)); (("const_body", 796), 0, (Tag3 ((("constant_def", 1265)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "t"), 0, (0)), 100000000, 0, -130); ((("opaque")), 100000000, 0, -131)], (0)), 100000000, 0, -129), (("kernel/declarations.mli", 109, 3790, 3794), ("kernel/declarations.mli", 109, 3790, 3840), 0), 0, Tag1 ("Declarations", 33)); (("const_type", 797), 0, (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -132), (("kernel/declarations.mli", 110, 3841, 3845), ("kernel/declarations.mli", 110, 3841, 3864), 0), 0, Tag1 ("Declarations", 34)); (("const_relevance", 798), 0, (Tag3 (Tag1 ((Tag2 ("Sorts")), "relevance"), 0, (0)), 100000000, 0, -133), (("kernel/declarations.mli", 111, 3865, 3869), ("kernel/declarations.mli", 111, 3865, 3903), 0), 0, Tag1 ("Declarations", 35)); (("const_body_code", 805), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Vmemitcodes")), "body_code"), 0, (0)), 100000000, 0, -135)], (0)), 100000000, 0, -134), (("kernel/declarations.mli", 112, 3904, 3908), ("kernel/declarations.mli", 112, 3904, 3955), 0), 0, Tag1 ("Declarations", 36)); (("const_universes", 806), 0, (Tag3 ((("universes", 1266)), 0, (0)), 100000000, 0, -136), (("kernel/declarations.mli", 113, 3956, 3960), ("kernel/declarations.mli", 113, 3956, 3988), 0), 0, Tag1 ("Declarations", 37)); (("const_inline_code", 807), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -137), (("kernel/declarations.mli", 114, 3989, 3993), ("kernel/declarations.mli", 114, 3989, 4018), 0), 0, Tag1 ("Declarations", 38)); (("const_typing_flags", 808), 0, (Tag3 ((("typing_flags", 1267)), 0, (0)), 100000000, 0, -138), (("kernel/declarations.mli", 115, 4019, 4023), ("kernel/declarations.mli", 115, 4019, 4057), 0), 0, Tag1 ("Declarations", 39))]], 1, 0, [25], [0], 0, 0, (("kernel/declarations.mli", 106, 3654, 3654), ("kernel/declarations.mli", 118, 4205, 4206), 0), 0, 0, 0, Tag1 ("Declarations", 30)), 1, 0); Tag1 (("constant_body", 1269), (0, 0, 0, 1, ((Tag3 ((("pconstant_body", 1268)), [(Tag3 (Tag1 ((Tag2 ("Opaqueproof")), "opaque"), 0, (0)), 100000000, 0, -126)], (0)), 100000000, 0, -125)), 0, 0, 0, 0, (("kernel/declarations.mli", 120, 4208, 4208), ("kernel/declarations.mli", 120, 4208, 4262), 0), 0, 0, 0, Tag1 ("Declarations", 40)), 1, 0); Tag1 (("nested_type", 1270), (0, 0, Tag1 ([(("NestedInd", 878), ([(Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -123)]), 0, (("kernel/declarations.mli", 124, 4350, 4350), ("kernel/declarations.mli", 124, 4350, 4374), 0), 0, Tag1 ("Declarations", 42)); (("NestedPrimitive", 879), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -124)]), 0, (("kernel/declarations.mli", 125, 4375, 4375), ("kernel/declarations.mli", 125, 4375, 4406), 0), 0, Tag1 ("Declarations", 43))], 0), 1, 0, 0, 0, 0, 0, (("kernel/declarations.mli", 123, 4331, 4331), ("kernel/declarations.mli", 125, 4375, 4406), 0), 0, 0, 0, Tag1 ("Declarations", 41)), 1, 0); Tag1 (("recarg", 1271), (0, 0, Tag1 ([(("Norec", 921), (0), 0, (("kernel/declarations.mli", 128, 4422, 4422), ("kernel/declarations.mli", 128, 4422, 4429), 0), 0, Tag1 ("Declarations", 45)); (("Mrec", 922), ([(Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -121)]), 0, (("kernel/declarations.mli", 129, 4430, 4430), ("kernel/declarations.mli", 129, 4430, 4449), 0), 0, Tag1 ("Declarations", 46)); (("Nested", 923), ([(Tag3 ((("nested_type", 1270)), 0, (0)), 100000000, 0, -122)]), 0, (("kernel/declarations.mli", 130, 4450, 4450), ("kernel/declarations.mli", 130, 4450, 4473), 0), 0, Tag1 ("Declarations", 47))], 0), 1, 0, 0, 0, 0, 0, (("kernel/declarations.mli", 127, 4408, 4408), ("kernel/declarations.mli", 130, 4450, 4473), 0), 0, 0, 0, Tag1 ("Declarations", 44)), 1, 0); Tag1 (("wf_paths", 1272), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Rtree")), "t"), [(Tag3 ((("recarg", 1271)), 0, (0)), 100000000, 0, -120)], (0)), 100000000, 0, -119)), 0, 0, 0, 0, (("kernel/declarations.mli", 132, 4475, 4475), ("kernel/declarations.mli", 132, 4475, 4505), 0), 0, 0, 0, Tag1 ("Declarations", 48)), 1, 0); Tag1 (("record_info", 1273), (0, 0, Tag1 ([(("NotRecord", 942), (0), 0, (("kernel/declarations.mli", 156, 5238, 5238), ("kernel/declarations.mli", 156, 5238, 5249), 0), 0, Tag1 ("Declarations", 50)); (("FakeRecord", 943), (0), 0, (("kernel/declarations.mli", 157, 5250, 5250), ("kernel/declarations.mli", 157, 5250, 5262), 0), 0, Tag1 ("Declarations", 51)); (("PrimRecord", 944), ([(Tag3 ((Tag3 ("array", 8)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -112); (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Label"), "t"), 0, (0)), 100000000, 0, -114)], (0)), 100000000, 0, -113); (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Sorts")), "relevance"), 0, (0)), 100000000, 0, -116)], (0)), 100000000, 0, -115); (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -118)], (0)), 100000000, 0, -117)]), 100000000, 0, -111)], (0)), 100000000, 0, -110)]), 0, (("kernel/declarations.mli", 158, 5263, 5263), ("kernel/declarations.mli", 158, 5263, 5345), 0), 0, Tag1 ("Declarations", 52))], 0), 1, 0, 0, 0, 0, 0, (("kernel/declarations.mli", 155, 5219, 5219), ("kernel/declarations.mli", 158, 5263, 5345), 0), 0, 0, 0, Tag1 ("Declarations", 49)), 1, 0); Tag1 (("regular_inductive_arity", 1274), (0, 0, [[(("mind_user_arity", 974), 0, (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -108), (("kernel/declarations.mli", 161, 5380, 5382), ("kernel/declarations.mli", 161, 5380, 5406), 0), 0, Tag1 ("Declarations", 54)); (("mind_sort", 975), 0, (Tag3 (Tag1 ((Tag2 ("Sorts")), "t"), 0, (0)), 100000000, 0, -109), (("kernel/declarations.mli", 162, 5407, 5409), ("kernel/declarations.mli", 162, 5407, 5429), 0), 0, Tag1 ("Declarations", 55))]], 1, 0, 0, 0, 0, 0, (("kernel/declarations.mli", 160, 5347, 5347), ("kernel/declarations.mli", 163, 5430, 5431), 0), 0, 0, 0, Tag1 ("Declarations", 53)), 1, 0); Tag1 (("inductive_arity", 1275), (0, 0, 0, 1, ((Tag3 ((("declaration_arity", 1263)), [(Tag3 ((("regular_inductive_arity", 1274)), 0, (0)), 100000000, 0, -106); (Tag3 ((("template_arity", 1261)), 0, (0)), 100000000, 0, -107)], (0)), 100000000, 0, -105)), 0, 0, 0, 0, (("kernel/declarations.mli", 165, 5433, 5433), ("kernel/declarations.mli", 165, 5433, 5515), 0), 0, 0, 0, Tag1 ("Declarations", 56)), 1, 0); Tag1 (("one_inductive_body", 1276), (0, 0, [[(("mind_typename", 978), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -82), (("kernel/declarations.mli", 171, 5656, 5660), ("kernel/declarations.mli", 171, 5656, 5681), 0), 0, Tag1 ("Declarations", 58)); (("mind_arity_ctxt", 979), 0, (Tag3 (Tag1 ((Tag2 ("Constr")), "rel_context"), 0, (0)), 100000000, 0, -83), (("kernel/declarations.mli", 173, 5713, 5717), ("kernel/declarations.mli", 173, 5713, 5754), 0), 0, Tag1 ("Declarations", 59)); (("mind_arity", 980), 0, (Tag3 ((("inductive_arity", 1275)), 0, (0)), 100000000, 0, -84), (("kernel/declarations.mli", 182, 6196, 6200), ("kernel/declarations.mli", 182, 6196, 6229), 0), 0, Tag1 ("Declarations", 60)); (("mind_consnames", 981), 0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -86)], (0)), 100000000, 0, -85), (("kernel/declarations.mli", 184, 6273, 6277), ("kernel/declarations.mli", 184, 6273, 6305), 0), 0, Tag1 ("Declarations", 61)); (("mind_user_lc", 982), 0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -88)], (0)), 100000000, 0, -87), (("kernel/declarations.mli", 186, 6347, 6351), ("kernel/declarations.mli", 186, 6347, 6378), 0), 0, Tag1 ("Declarations", 62)); (("mind_nrealargs", 983), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -89), (("kernel/declarations.mli", 197, 6871, 6875), ("kernel/declarations.mli", 197, 6871, 6896), 0), 0, Tag1 ("Declarations", 63)); (("mind_nrealdecls", 984), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -90), (("kernel/declarations.mli", 199, 6971, 6975), ("kernel/declarations.mli", 199, 6971, 6997), 0), 0, Tag1 ("Declarations", 64)); (("mind_kelim", 985), 0, (Tag3 (Tag1 ((Tag2 ("Sorts")), "family"), 0, (0)), 100000000, 0, -91), (("kernel/declarations.mli", 201, 7055, 7059), ("kernel/declarations.mli", 201, 7055, 7085), 0), 0, Tag1 ("Declarations", 65)); (("mind_nf_lc", 986), 0, (Tag3 ((Tag3 ("array", 8)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constr")), "rel_context"), 0, (0)), 100000000, 0, -94); (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -95)]), 100000000, 0, -93)], (0)), 100000000, 0, -92), (("kernel/declarations.mli", 203, 7127, 7131), ("kernel/declarations.mli", 203, 7127, 7172), 0), 0, Tag1 ("Declarations", 66)); (("mind_consnrealargs", 987), 0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -97)], (0)), 100000000, 0, -96), (("kernel/declarations.mli", 216, 7935, 7939), ("kernel/declarations.mli", 216, 7935, 7970), 0), 0, Tag1 ("Declarations", 67)); (("mind_consnrealdecls", 988), 0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -99)], (0)), 100000000, 0, -98), (("kernel/declarations.mli", 219, 8049, 8053), ("kernel/declarations.mli", 219, 8049, 8085), 0), 0, Tag1 ("Declarations", 68)); (("mind_recargs", 989), 0, (Tag3 ((("wf_paths", 1272)), 0, (0)), 100000000, 0, -100), (("kernel/declarations.mli", 222, 8162, 8166), ("kernel/declarations.mli", 222, 8162, 8190), 0), 0, Tag1 ("Declarations", 69)); (("mind_relevance", 990), 0, (Tag3 (Tag1 ((Tag2 ("Sorts")), "relevance"), 0, (0)), 100000000, 0, -101), (("kernel/declarations.mli", 224, 8252, 8256), ("kernel/declarations.mli", 224, 8252, 8289), 0), 0, Tag1 ("Declarations", 70)); (("mind_nb_constant", 991), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -102), (("kernel/declarations.mli", 228, 8335, 8339), ("kernel/declarations.mli", 228, 8335, 8362), 0), 0, Tag1 ("Declarations", 71)); (("mind_nb_args", 992), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -103), (("kernel/declarations.mli", 230, 8402, 8406), ("kernel/declarations.mli", 230, 8402, 8425), 0), 0, Tag1 ("Declarations", 72)); (("mind_reloc_tbl", 1086), 0, (Tag3 (Tag1 ((Tag2 ("Vmvalues")), "reloc_table"), 0, (0)), 100000000, 0, -104), (("kernel/declarations.mli", 232, 8468, 8472), ("kernel/declarations.mli", 232, 8468, 8511), 0), 0, Tag1 ("Declarations", 73))]], 1, 0, 0, 0, 0, 0, (("kernel/declarations.mli", 168, 5599, 5599), ("kernel/declarations.mli", 233, 8512, 8515), 0), 0, 0, 0, Tag1 ("Declarations", 57)), 1, 0); Tag1 (("recursivity_kind", 1277), (0, 0, Tag1 ([(("Finite", 1132), (0), 0, (("kernel/declarations.mli", 236, 8541, 8543), ("kernel/declarations.mli", 236, 8541, 8551), 0), 0, Tag1 ("Declarations", 75)); (("CoFinite", 1133), (0), 0, (("kernel/declarations.mli", 237, 8571, 8573), ("kernel/declarations.mli", 237, 8571, 8583), 0), 0, Tag1 ("Declarations", 76)); (("BiFinite", 1134), (0), 0, (("kernel/declarations.mli", 238, 8605, 8607), ("kernel/declarations.mli", 238, 8605, 8617), 0), 0, Tag1 ("Declarations", 77))], 0), 1, 0, 0, 0, 0, 0, (("kernel/declarations.mli", 235, 8517, 8517), ("kernel/declarations.mli", 238, 8605, 8617), 0), 0, 1, 0, Tag1 ("Declarations", 74)), 1, 0); Tag1 (("mutual_inductive_body", 1278), (0, 0, [[(("mind_packets", 1136), 0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("one_inductive_body", 1276)), 0, (0)), 100000000, 0, -61)], (0)), 100000000, 0, -60), (("kernel/declarations.mli", 244, 8778, 8782), ("kernel/declarations.mli", 244, 8778, 8822), 0), 0, Tag1 ("Declarations", 79)); (("mind_record", 1137), 0, (Tag3 ((("record_info", 1273)), 0, (0)), 100000000, 0, -62), (("kernel/declarations.mli", 246, 8876, 8880), ("kernel/declarations.mli", 246, 8876, 8906), 0), 0, Tag1 ("Declarations", 80)); (("mind_finite", 1138), 0, (Tag3 ((("recursivity_kind", 1277)), 0, (0)), 100000000, 0, -63), (("kernel/declarations.mli", 248, 8938, 8942), ("kernel/declarations.mli", 248, 8938, 8973), 0), 0, Tag1 ("Declarations", 81)); (("mind_ntypes", 1139), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -64), (("kernel/declarations.mli", 250, 9028, 9032), ("kernel/declarations.mli", 250, 9028, 9050), 0), 0, Tag1 ("Declarations", 82)); (("mind_hyps", 1140), 0, (Tag3 (Tag1 ((Tag2 ("Constr")), "named_context"), 0, (0)), 100000000, 0, -65), (("kernel/declarations.mli", 252, 9089, 9093), ("kernel/declarations.mli", 252, 9089, 9126), 0), 0, Tag1 ("Declarations", 83)); (("mind_univ_hyps", 1141), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Instance"), "t"), 0, (0)), 100000000, 0, -66), (("kernel/declarations.mli", 254, 9182, 9186), ("kernel/declarations.mli", 254, 9182, 9219), 0), 0, Tag1 ("Declarations", 84)); (("mind_nparams", 1142), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -67), (("kernel/declarations.mli", 256, 9259, 9263), ("kernel/declarations.mli", 256, 9259, 9282), 0), 0, Tag1 ("Declarations", 85)); (("mind_nparams_rec", 1143), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -68), (("kernel/declarations.mli", 258, 9394, 9398), ("kernel/declarations.mli", 258, 9394, 9421), 0), 0, Tag1 ("Declarations", 86)); (("mind_params_ctxt", 1144), 0, (Tag3 (Tag1 ((Tag2 ("Constr")), "rel_context"), 0, (0)), 100000000, 0, -69), (("kernel/declarations.mli", 260, 9488, 9492), ("kernel/declarations.mli", 260, 9488, 9530), 0), 0, Tag1 ("Declarations", 87)); (("mind_universes", 1145), 0, (Tag3 ((("universes", 1266)), 0, (0)), 100000000, 0, -70), (("kernel/declarations.mli", 262, 9596, 9600), ("kernel/declarations.mli", 262, 9596, 9627), 0), 0, Tag1 ("Declarations", 88)); (("mind_template", 1146), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("template_universes", 1262)), 0, (0)), 100000000, 0, -72)], (0)), 100000000, 0, -71), (("kernel/declarations.mli", 264, 9720, 9724), ("kernel/declarations.mli", 264, 9720, 9766), 0), 0, Tag1 ("Declarations", 89)); (("mind_variance", 1152), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Variance"), "t"), 0, (0)), 100000000, 0, -75)], (0)), 100000000, 0, -74)], (0)), 100000000, 0, -73), (("kernel/declarations.mli", 266, 9768, 9772), ("kernel/declarations.mli", 266, 9768, 9817), 0), 0, Tag1 ("Declarations", 90)); (("mind_sec_variance", 1153), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Variance"), "t"), 0, (0)), 100000000, 0, -78)], (0)), 100000000, 0, -77)], (0)), 100000000, 0, -76), (("kernel/declarations.mli", 268, 9869, 9873), ("kernel/declarations.mli", 268, 9869, 9922), 0), 0, Tag1 ("Declarations", 91)); (("mind_private", 1154), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -80)], (0)), 100000000, 0, -79), (("kernel/declarations.mli", 273, 10116, 10120), ("kernel/declarations.mli", 273, 10116, 10147), 0), 0, Tag1 ("Declarations", 92)); (("mind_typing_flags", 1155), 0, (Tag3 ((("typing_flags", 1267)), 0, (0)), 100000000, 0, -81), (("kernel/declarations.mli", 275, 10213, 10217), ("kernel/declarations.mli", 275, 10213, 10250), 0), 0, Tag1 ("Declarations", 93))]], 1, 0, 0, 0, 0, 0, (("kernel/declarations.mli", 242, 8746, 8746), ("kernel/declarations.mli", 276, 10309, 10310), 0), 0, 0, 0, Tag1 ("Declarations", 78)), 1, 0); Tag1 (("mind_specif", 1279), (0, 0, 0, 1, ((Tag2 ([(Tag3 ((("mutual_inductive_body", 1278)), 0, (0)), 100000000, 0, -58); (Tag3 ((("one_inductive_body", 1276)), 0, (0)), 100000000, 0, -59)]), 100000000, 0, -57)), 0, 0, 0, 0, (("kernel/declarations.mli", 278, 10312, 10312), ("kernel/declarations.mli", 278, 10312, 10373), 0), 0, 0, 0, Tag1 ("Declarations", 94)), 1, 0); Tag1 (("functorize", 1280), ([((("ty")), 100000000, 0, -55); ((("a")), 100000000, 0, -53)], 2, Tag1 ([(("NoFunctor", 1158), ([((("a")), 100000000, 0, -53)]), 0, (("kernel/declarations.mli", 285, 10508, 10510), ("kernel/declarations.mli", 285, 10508, 10527), 0), 0, Tag1 ("Declarations", 96)); (("MoreFunctor", 1159), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "MBId"), "t"), 0, (0)), 100000000, 0, -54); ((("ty")), 100000000, 0, -55); (Tag3 ((("functorize", 1280)), [((("ty")), 100000000, 0, -55); ((("a")), 100000000, 0, -53)], (0)), 100000000, 0, -56)]), 0, (("kernel/declarations.mli", 286, 10528, 10530), ("kernel/declarations.mli", 286, 10528, 10581), 0), 0, Tag1 ("Declarations", 97))], 0), 1, 0, [25; 25], [0; 0], 0, 0, (("kernel/declarations.mli", 284, 10481, 10481), ("kernel/declarations.mli", 286, 10528, 10581), 0), 0, 0, 0, Tag1 ("Declarations", 95)), 1, 0); Tag1 (("with_declaration", 1281), ([((("uconstr")), 100000000, 0, -52)], 1, Tag1 ([(("WithMod", 1170), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -48)], (0)), 100000000, 0, -47); (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -49)]), 0, (("kernel/declarations.mli", 295, 10964, 10966), ("kernel/declarations.mli", 295, 10964, 11000), 0), 0, Tag1 ("Declarations", 99)); (("WithDef", 1180), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -51)], (0)), 100000000, 0, -50); ((("uconstr")), 100000000, 0, -52)]), 0, (("kernel/declarations.mli", 296, 11001, 11003), ("kernel/declarations.mli", 296, 11001, 11036), 0), 0, Tag1 ("Declarations", 100))], 0), 1, 0, [25], [0], 0, 0, (("kernel/declarations.mli", 294, 10931, 10931), ("kernel/declarations.mli", 296, 11001, 11036), 0), 0, 0, 0, Tag1 ("Declarations", 98)), 1, 0); Tag1 (("module_alg_expr", 1282), ([((("uconstr")), 100000000, 0, -43)], 1, Tag1 ([(("MEident", 1182), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -41)]), 0, (("kernel/declarations.mli", 299, 11070, 11072), ("kernel/declarations.mli", 299, 11070, 11094), 0), 0, Tag1 ("Declarations", 102)); (("MEapply", 1183), ([(Tag3 ((("module_alg_expr", 1282)), [((("uconstr")), 100000000, 0, -43)], (0)), 100000000, 0, -42); (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -44)]), 0, (("kernel/declarations.mli", 300, 11095, 11097), ("kernel/declarations.mli", 300, 11095, 11146), 0), 0, Tag1 ("Declarations", 103)); (("MEwith", 1184), ([(Tag3 ((("module_alg_expr", 1282)), [((("uconstr")), 100000000, 0, -43)], (0)), 100000000, 0, -45); (Tag3 ((("with_declaration", 1281)), [((("uconstr")), 100000000, 0, -43)], (0)), 100000000, 0, -46)]), 0, (("kernel/declarations.mli", 301, 11147, 11149), ("kernel/declarations.mli", 301, 11147, 11213), 0), 0, Tag1 ("Declarations", 104))], 0), 1, 0, [25], [0], 0, 0, (("kernel/declarations.mli", 298, 11038, 11038), ("kernel/declarations.mli", 301, 11147, 11213), 0), 0, 0, 0, Tag1 ("Declarations", 101)), 1, 0); Tag1 (("functor_alg_expr", 1283), ([((("uconstr")), 100000000, 0, -39)], 1, Tag1 ([(("MENoFunctor", 1186), ([(Tag3 ((("module_alg_expr", 1282)), [((("uconstr")), 100000000, 0, -39)], (0)), 100000000, 0, -38)]), 0, (("kernel/declarations.mli", 304, 11248, 11248), ("kernel/declarations.mli", 304, 11248, 11289), 0), 0, Tag1 ("Declarations", 106)); (("MEMoreFunctor", 1187), ([(Tag3 ((("functor_alg_expr", 1283)), [((("uconstr")), 100000000, 0, -39)], (0)), 100000000, 0, -40)]), 0, (("kernel/declarations.mli", 305, 11290, 11290), ("kernel/declarations.mli", 305, 11290, 11334), 0), 0, Tag1 ("Declarations", 107))], 0), 1, 0, [25], [0], 0, 0, (("kernel/declarations.mli", 303, 11215, 11215), ("kernel/declarations.mli", 305, 11290, 11334), 0), 0, 0, 0, Tag1 ("Declarations", 105)), 1, 0); Tag1 (("module_expression", 1284), (0, 0, 0, 1, ((Tag3 ((("functor_alg_expr", 1283)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -35); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "AbstractContext"), "t"), 0, (0)), 100000000, 0, -37)], (0)), 100000000, 0, -36)]), 100000000, 0, -34)], (0)), 100000000, 0, -33)), 0, 0, 0, 0, (("kernel/declarations.mli", 309, 11414, 11414), ("kernel/declarations.mli", 309, 11414, 11496), 0), 0, 0, 0, Tag1 ("Declarations", 108)), 1, 0); Tag1 (("structure_field_body", 1285), (0, 0, Tag1 ([(("SFBconst", 1197), ([(Tag3 ((("constant_body", 1269)), 0, (0)), 100000000, 0, -29)]), 0, (("kernel/declarations.mli", 314, 11568, 11570), ("kernel/declarations.mli", 314, 11568, 11597), 0), 0, Tag1 ("Declarations", 117)); (("SFBmind", 1198), ([(Tag3 ((("mutual_inductive_body", 1278)), 0, (0)), 100000000, 0, -30)]), 0, (("kernel/declarations.mli", 315, 11598, 11600), ("kernel/declarations.mli", 315, 11598, 11634), 0), 0, Tag1 ("Declarations", 118)); (("SFBmodule", 1199), ([(Tag3 ((("module_body", 1290)), 0, (0)), 100000000, 0, -31)]), 0, (("kernel/declarations.mli", 316, 11635, 11637), ("kernel/declarations.mli", 316, 11635, 11663), 0), 0, Tag1 ("Declarations", 119)); (("SFBmodtype", 1200), ([(Tag3 ((("module_type_body", 1291)), 0, (0)), 100000000, 0, -32)]), 0, (("kernel/declarations.mli", 317, 11664, 11666), ("kernel/declarations.mli", 317, 11664, 11698), 0), 0, Tag1 ("Declarations", 120))], 0), 1, 0, 0, 0, 0, 0, (("kernel/declarations.mli", 313, 11540, 11540), ("kernel/declarations.mli", 317, 11664, 11698), 0), 0, 0, 0, Tag1 ("Declarations", 109)), 1, 0); Tag1 (("structure_body", 1286), (0, 0, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Label"), "t"), 0, (0)), 100000000, 0, -27); (Tag3 ((("structure_field_body", 1285)), 0, (0)), 100000000, 0, -28)]), 100000000, 0, -26)], (0)), 100000000, 0, -25)), 0, 0, 0, 0, (("kernel/declarations.mli", 325, 11952, 11952), ("kernel/declarations.mli", 325, 11952, 12010), 0), 0, 0, 0, Tag1 ("Declarations", 110)), 2, 0); Tag1 (("module_signature", 1287), (0, 0, 0, 1, ((Tag3 ((("functorize", 1280)), [(Tag3 ((("module_type_body", 1291)), 0, (0)), 100000000, 0, -23); (Tag3 ((("structure_body", 1286)), 0, (0)), 100000000, 0, -24)], (0)), 100000000, 0, -22)), 0, 0, 0, 0, (("kernel/declarations.mli", 329, 12091, 12091), ("kernel/declarations.mli", 329, 12091, 12158), 0), 0, 0, 0, Tag1 ("Declarations", 111)), 2, 0); Tag1 (("module_implementation", 1288), (0, 0, Tag1 ([(("Abstract", 1201), (0), 0, (("kernel/declarations.mli", 332, 12188, 12190), ("kernel/declarations.mli", 332, 12188, 12200), 0), 0, Tag1 ("Declarations", 121)); (("Algebraic", 1202), ([(Tag3 ((("module_expression", 1284)), 0, (0)), 100000000, 0, -20)]), 0, (("kernel/declarations.mli", 333, 12237, 12239), ("kernel/declarations.mli", 333, 12237, 12271), 0), 0, Tag1 ("Declarations", 122)); (("Struct", 1203), ([(Tag3 ((("structure_body", 1286)), 0, (0)), 100000000, 0, -21)]), 0, (("kernel/declarations.mli", 334, 12316, 12318), ("kernel/declarations.mli", 334, 12316, 12344), 0), 0, Tag1 ("Declarations", 123)); (("FullStruct", 1204), (0), 0, (("kernel/declarations.mli", 335, 12415, 12417), ("kernel/declarations.mli", 335, 12415, 12429), 0), 0, Tag1 ("Declarations", 124))], 0), 1, 0, 0, 0, 0, 0, (("kernel/declarations.mli", 331, 12160, 12160), ("kernel/declarations.mli", 335, 12415, 12429), 0), 0, 0, 0, Tag1 ("Declarations", 112)), 2, 0); Tag1 (("generic_module_body", 1289), ([((("a")), 100000000, 0, -14)], 1, [[(("mod_mp", 1205), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -13), (("kernel/declarations.mli", 338, 12525, 12529), ("kernel/declarations.mli", 338, 12525, 12548), 0), 0, Tag1 ("Declarations", 125)); (("mod_expr", 1206), 0, ((("a")), 100000000, 0, -14), (("kernel/declarations.mli", 339, 12584, 12588), ("kernel/declarations.mli", 339, 12584, 12602), 0), 0, Tag1 ("Declarations", 126)); (("mod_type", 1207), 0, (Tag3 ((("module_signature", 1287)), 0, (0)), 100000000, 0, -15), (("kernel/declarations.mli", 340, 12625, 12629), ("kernel/declarations.mli", 340, 12625, 12657), 0), 0, Tag1 ("Declarations", 127)); (("mod_type_alg", 1208), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("module_expression", 1284)), 0, (0)), 100000000, 0, -17)], (0)), 100000000, 0, -16), (("kernel/declarations.mli", 341, 12679, 12683), ("kernel/declarations.mli", 341, 12679, 12723), 0), 0, Tag1 ("Declarations", 128)); (("mod_delta", 1254), 0, (Tag3 (Tag1 ((Tag2 ("Mod_subst")), "delta_resolver"), 0, (0)), 100000000, 0, -18), (("kernel/declarations.mli", 342, 12746, 12750), ("kernel/declarations.mli", 342, 12746, 12787), 0), 0, Tag1 ("Declarations", 129)); (("mod_retroknowledge", 1255), 0, (Tag3 ((("module_retroknowledge", 1292)), [((("a")), 100000000, 0, -14)], (0)), 100000000, 0, -19), (("kernel/declarations.mli", 344, 12860, 12864), ("kernel/declarations.mli", 344, 12860, 12909), 0), 0, Tag1 ("Declarations", 130))]], 1, 0, [63], [0], 0, 0, (("kernel/declarations.mli", 337, 12496, 12496), ("kernel/declarations.mli", 344, 12860, 12911), 0), 0, 0, 0, Tag1 ("Declarations", 113)), 2, 0); Tag1 (("module_body", 1290), (0, 0, 0, 1, ((Tag3 ((("generic_module_body", 1289)), [(Tag3 ((("module_implementation", 1288)), 0, (0)), 100000000, 0, -12)], (0)), 100000000, 0, -11)), 0, 0, 0, 0, (("kernel/declarations.mli", 354, 13424, 13424), ("kernel/declarations.mli", 354, 13424, 13483), 0), 0, 0, 0, Tag1 ("Declarations", 114)), 2, 0); Tag1 (("module_type_body", 1291), (0, 0, 0, 1, ((Tag3 ((("generic_module_body", 1289)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10)], (0)), 100000000, 0, -9)), 0, 0, 0, 0, (("kernel/declarations.mli", 361, 13733, 13733), ("kernel/declarations.mli", 361, 13733, 13780), 0), 0, 0, 0, Tag1 ("Declarations", 115)), 2, 0); Tag1 (("module_retroknowledge", 1292), ([((("_")), 100000000, 0, -8)], 1, Tag1 ([(("ModBodyRK", 1256), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Retroknowledge")), "action"), 0, (0)), 100000000, 0, -5)], (0)), 100000000, 0, -4)]), ((Tag3 ((("module_retroknowledge", 1292)), [(Tag3 ((("module_implementation", 1288)), 0, (0)), 100000000, 0, -3)], (0)), 100000000, 0, -2)), (("kernel/declarations.mli", 364, 13812, 13812), ("kernel/declarations.mli", 365, 13826, 13901), 0), 0, Tag1 ("Declarations", 131)); (("ModTypeRK", 1260), (0), ((Tag3 ((("module_retroknowledge", 1292)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7)], (0)), 100000000, 0, -6)), (("kernel/declarations.mli", 366, 13902, 13902), ("kernel/declarations.mli", 366, 13902, 13942), 0), 0, Tag1 ("Declarations", 132))], 0), 1, 0, [63], [0], 0, 0, (("kernel/declarations.mli", 363, 13782, 13782), ("kernel/declarations.mli", 366, 13902, 13942), 0), 0, 0, 0, Tag1 ("Declarations", 116)), 2, 0)], "Declarations", [("Declarations", ("\239\137n\019\030w$\182\166z^{\b\206\163\175")); ("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Vmemitcodes", ("wCd\138\165\158DD\241gH\236.\210\197\247")); ("Vmbytecodes", ("\025\021\151\137Dx\149W\236+[\143f\208\160\016")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [1; (0)])
ModTypeRK : unit module_retroknowledge

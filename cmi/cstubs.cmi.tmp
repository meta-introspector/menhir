module Types :
  sig
    module type TYPE = Ctypes.TYPE
    module type BINDINGS = functor (F : TYPE) -> sig end
    val write_c : Format.formatter -> (module BINDINGS) -> unit
  end
module type FOREIGN = Ctypes.FOREIGN
module type BINDINGS =
  functor
    (F : sig
           type 'a fn
           type 'a return
           val ( @-> ) : 'a Ctypes.typ -> 'b fn -> ('a -> 'b) fn
           val returning : 'a Ctypes.typ -> 'a return fn
           type 'a result = unit
           val foreign : string -> ('a -> 'b) fn -> ('a -> 'b) result
           val foreign_value :
             string -> 'a Ctypes.typ -> 'a Ctypes.ptr result
         end)
    -> sig end
type errno_policy
val ignore_errno : errno_policy
val return_errno : errno_policy
type concurrency_policy
val sequential : concurrency_policy
val unlocked : concurrency_policy
val lwt_preemptive : concurrency_policy
val lwt_jobs : concurrency_policy
val write_c :
  ?concurrency:concurrency_policy ->
  ?errno:errno_policy ->
  Format.formatter -> prefix:string -> (module BINDINGS) -> unit
val write_ml :
  ?concurrency:concurrency_policy ->
  ?errno:errno_policy ->
  ("DEBUG:rule", [Tag3 (("Types", 893), 0, (Tag1 ([Tag4 (("TYPE", 907), (((Tag1 ((Tag2 ("Ctypes")), "TYPE"))), 0, (("src/cstubs/cstubs.mli", 12, 220, 222), ("src/cstubs/cstubs.mli", 12, 220, 252), 0), Tag1 ("Cstubs", 0)), 0); Tag4 (("BINDINGS", 908), ((Tag2 (((("F", 910)), ((("TYPE", 907)))), Tag1 (0))), 0, (("src/cstubs/cstubs.mli", 14, 254, 256), ("src/cstubs/cstubs.mli", 14, 254, 308), 0), Tag1 ("Cstubs", 2)), 0); (("write_c", 909), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -38), (Tag1 (0, (Tag11 ((("BINDINGS", 908)), 0), 100000000, 0, -37), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -36), 0), 100000000, 0, -35), 0), 100000000, 0, -34), 0, (("src/cstubs/cstubs.mli", 16, 310, 312), ("src/cstubs/cstubs.mli", 16, 310, 371), 0), 0, Tag1 ("Cstubs", 3)), 0)]), 0, (("src/cstubs/cstubs.mli", 10, 201, 201), ("src/cstubs/cstubs.mli", 17, 372, 375), 0), Tag1 ("Cstubs", 4)), 0, 0); Tag4 (("FOREIGN", 894), (((Tag1 ((Tag2 ("Ctypes")), "FOREIGN"))), 0, (("src/cstubs/cstubs.mli", 20, 378, 378), ("src/cstubs/cstubs.mli", 20, 378, 414), 0), Tag1 ("Cstubs", 5)), 0); Tag4 (("BINDINGS", 895), ((Tag2 (((("F", 906)), Tag1 ([Tag1 (("fn", 911), ([((("a")), 100000000, 0, -71)], 1, 0, 1, 0, [7], [2], 0, 0, (("src/ctypes/ctypes.mli", 487, 19223, 19225), ("src/ctypes/ctypes.mli", 487, 19223, 19235), 0), 0, 0, 0, Tag1 ("Ctypes", 80)), 1, 0); Tag1 (("return", 912), ([((("a")), 100000000, 0, -70)], 1, 0, 1, 0, [7], [2], 0, 0, (("src/ctypes/ctypes.mli", 488, 19236, 19238), ("src/ctypes/ctypes.mli", 488, 19236, 19252), 0), 0, 0, 0, Tag1 ("Ctypes", 81)), 1, 0); (("@->", 913), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes")), "typ"), [((("a")), 100000000, 0, -67)], (0)), 100000000, 0, -69), (Tag1 (0, (Tag3 ((("fn", 911)), [((("b")), 100000000, 0, -66)], (0)), 100000000, 0, -68), (Tag3 ((("fn", 911)), [(Tag1 (0, ((("a")), 100000000, 0, -67), ((("b")), 100000000, 0, -66), 0), 100000000, 0, -65)], (0)), 100000000, 0, -64), 0), 100000000, 0, -63), 0), 100000000, 0, -62), 0, (("src/ctypes/ctypes.mli", 489, 19253, 19255), ("src/ctypes/ctypes.mli", 489, 19253, 19299), 0), 0, Tag1 ("Ctypes", 82)), 0); (("returning", 914), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes")), "typ"), [((("a")), 100000000, 0, -60)], (0)), 100000000, 0, -61), (Tag3 ((("fn", 911)), [(Tag3 ((("return", 912)), [((("a")), 100000000, 0, -60)], (0)), 100000000, 0, -59)], (0)), 100000000, 0, -58), 0), 100000000, 0, -57), 0, (("src/ctypes/ctypes.mli", 490, 19300, 19302), ("src/ctypes/ctypes.mli", 490, 19300, 19340), 0), 0, Tag1 ("Ctypes", 83)), 0); Tag1 (("result", 915), ([((("a")), 100000000, 0, -56)], 1, 0, 1, ((Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -55)), [0], [0], 0, 0, (("src/cstubs/cstubs.mli", 22, 416, 465), ("src/cstubs/cstubs.mli", 22, 416, 486), 0), 0, 1, 0, Tag1 ("Cstubs", 6)), 1, 0); (("foreign", 916), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -54), (Tag1 (0, (Tag3 ((("fn", 911)), [(Tag1 (0, ((("a")), 100000000, 0, -51), ((("b")), 100000000, 0, -50), 0), 100000000, 0, -53)], (0)), 100000000, 0, -52), (Tag3 ((("result", 915)), [(Tag1 (0, ((("a")), 100000000, 0, -51), ((("b")), 100000000, 0, -50), 0), 100000000, 0, -49)], (0)), 100000000, 0, -48), 0), 100000000, 0, -47), 0), 100000000, 0, -46), 0, (("src/ctypes/ctypes.mli", 493, 19359, 19361), ("src/ctypes/ctypes.mli", 493, 19359, 19419), 0), 0, Tag1 ("Ctypes", 85)), 0); (("foreign_value", 917), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -45), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes")), "typ"), [((("a")), 100000000, 0, -43)], (0)), 100000000, 0, -44), (Tag3 ((("result", 915)), [(Tag3 (Tag1 ((Tag2 ("Ctypes")), "ptr"), [((("a")), 100000000, 0, -43)], (0)), 100000000, 0, -42)], (0)), 100000000, 0, -41), 0), 100000000, 0, -40), 0), 100000000, 0, -39), 0, (("src/ctypes/ctypes.mli", 494, 19420, 19422), ("src/ctypes/ctypes.mli", 494, 19420, 19475), 0), 0, Tag1 ("Ctypes", 86)), 0)])), Tag1 (0))), 0, (("src/cstubs/cstubs.mli", 22, 416, 416), ("src/cstubs/cstubs.mli", 22, 416, 498), 0), Tag1 ("Cstubs", 8)), 0); Tag1 (("errno_policy", 896), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/cstubs/cstubs.mli", 24, 500, 500), ("src/cstubs/cstubs.mli", 24, 500, 517), 0), 0, 0, 0, Tag1 ("Cstubs", 9)), 1, 0); (("ignore_errno", 897), ((Tag3 ((("errno_policy", 896)), 0, (0)), 100000000, 0, -33), 0, (("src/cstubs/cstubs.mli", 29, 669, 669), ("src/cstubs/cstubs.mli", 29, 669, 700), 0), 0, Tag1 ("Cstubs", 10)), 0); (("return_errno", 898), ((Tag3 ((("errno_policy", 896)), 0, (0)), 100000000, 0, -32), 0, (("src/cstubs/cstubs.mli", 32, 780, 780), ("src/cstubs/cstubs.mli", 32, 780, 811), 0), 0, Tag1 ("Cstubs", 11)), 0); Tag1 (("concurrency_policy", 899), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/cstubs/cstubs.mli", 56, 1616, 1616), ("src/cstubs/cstubs.mli", 56, 1616, 1639), 0), 0, 0, 0, Tag1 ("Cstubs", 12)), 1, 0); (("sequential", 900), ((Tag3 ((("concurrency_policy", 899)), 0, (0)), 100000000, 0, -31), 0, (("src/cstubs/cstubs.mli", 62, 1822, 1822), ("src/cstubs/cstubs.mli", 62, 1822, 1857), 0), 0, Tag1 ("Cstubs", 13)), 0); (("unlocked", 901), ((Tag3 ((("concurrency_policy", 899)), 0, (0)), 100000000, 0, -30), 0, (("src/cstubs/cstubs.mli", 67, 1947, 1947), ("src/cstubs/cstubs.mli", 67, 1947, 1980), 0), 0, Tag1 ("Cstubs", 14)), 0); (("lwt_preemptive", 902), ((Tag3 ((("concurrency_policy", 899)), 0, (0)), 100000000, 0, -29), 0, (("src/cstubs/cstubs.mli", 71, 2050, 2050), ("src/cstubs/cstubs.mli", 71, 2050, 2089), 0), 0, Tag1 ("Cstubs", 15)), 0); (("lwt_jobs", 903), ((Tag3 ((("concurrency_policy", 899)), 0, (0)), 100000000, 0, -28), 0, (("src/cstubs/cstubs.mli", 94, 2845, 2845), ("src/cstubs/cstubs.mli", 94, 2845, 2878), 0), 0, Tag1 ("Cstubs", 16)), 0); (("write_c", 904), ((Tag1 (Tag1 ("concurrency"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("concurrency_policy", 899)), 0, (0)), 100000000, 0, -27)], (0)), 100000000, 0, -26), (Tag1 (Tag1 ("errno"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("errno_policy", 896)), 0, (0)), 100000000, 0, -25)], (0)), 100000000, 0, -24), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -23), (Tag1 (("prefix"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -22), (Tag1 (0, (Tag11 ((("BINDINGS", 895)), 0), 100000000, 0, -21), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -20), 0), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), 0), 100000000, 0, -16), 0), 100000000, 0, -15), 0, (("src/cstubs/cstubs.mli", 114, 3498, 3498), ("src/cstubs/cstubs.mli", 115, 3570, 3634), 0), 0, Tag1 ("Cstubs", 17)), 0); (("write_ml", 905), ((Tag1 (Tag1 ("concurrency"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("concurrency_policy", 899)), 0, (0)), 100000000, 0, -14)], (0)), 100000000, 0, -13), (Tag1 (Tag1 ("errno"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("errno_policy", 896)), 0, (0)), 100000000, 0, -12)], (0)), 100000000, 0, -11), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -10), (Tag1 (("prefix"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -9), (Tag1 (0, (Tag11 ((("BINDINGS", 895)), 0), 100000000, 0, -8), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/cstubs/cstubs.mli", 127, 4089, 4089), ("src/cstubs/cstubs.mli", 128, 4162, 4226), 0), 0, Tag1 ("Cstubs", 18)), 0)], "Cstubs", [("Cstubs", ("wT\240\022\159?\017\135\177\250M\028\164\014\224\203")); ("Unsigned", ("cd\205\030\181\167\151\005!\134;\177\228\249\168+")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Signed", ("R\017i\"\030\024\134f\143\198\192\180>t\175\225")); ("LDouble", ("j\251\140\230^u\251\210\143\236T\207\022\147\011\211")); ("Ctypes_types", ("\140\014\176\188\187lo3aC\196\012\228vn+")); ("Ctypes_static", ("U\030\169\129GB\138P\158'd\012\131\157\202\018")); ("Ctypes_ptr", ("V\021o\161\007\161\245R\242\222:e\151\189\175\207")); ("Ctypes_primitive_types", ("\147\237\001\150\136\017Z\2308\137C\245\023\133\161\158")); ("Ctypes_bigarray", ("\146\0055mmn\243\187gd\185P\208J\254l")); ("Ctypes", ("\201\151\139N\189F\151(\218n\234\177\197RtW")); ("ComplexL", ("\n\230\139\192\213\0226\203\176\242\200\205c\155ag")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Bigarray_compat", ("\150\219\208\188w\237\216\005\r[\152q'\006x\217"))], [(0)])
Format.formatter -> prefix:string -> (module BINDINGS) -> unit

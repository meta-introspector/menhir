type format = Src | M2l | Parsetree | Cmi
type kind = { format : format; kind : M2l.kind; }
type ocaml_parsing_error = Syntax of Syntaxerr.error | Lexer of Lexer.error
type error = Ocaml of ocaml_parsing_error | Serialized of Schematic.Ext.error
val name : string -> Unitname.t
("DEBUG:rule", [Tag1 (("format", 393), (0, 0, Tag1 ([(("Src", 270), (0), 0, (("lib/read.mli", 6, 83, 85), ("lib/read.mli", 6, 83, 90), 0), 0, Tag1 ("Read", 1)); (("M2l", 271), (0), 0, (("lib/read.mli", 7, 119, 121), ("lib/read.mli", 7, 119, 126), 0), 0, Tag1 ("Read", 2)); (("Parsetree", 272), (0), 0, (("lib/read.mli", 8, 154, 156), ("lib/read.mli", 8, 154, 167), 0), 0, Tag1 ("Read", 3)); (("Cmi", 273), (0), 0, (("lib/read.mli", 9, 194, 196), ("lib/read.mli", 9, 194, 201), 0), 0, Tag1 ("Read", 4))], 0), 1, 0, 0, 0, 0, 0, (("lib/read.mli", 5, 69, 69), ("lib/read.mli", 9, 194, 201), 0), 0, 1, 0, Tag1 ("Read", 0)), 1, 0); Tag1 (("kind", 394), (0, 0, [[(("format", 275), 0, (Tag3 ((("format", 393)), 0, (0)), 100000000, 0, -18), (("lib/read.mli", 12, 290, 304), ("lib/read.mli", 12, 290, 319), 0), 0, Tag1 ("Read", 9)); (("kind", 302), 0, (Tag3 (Tag1 ((Tag2 ("M2l")), "kind"), 0, (0)), 100000000, 0, -19), (("lib/read.mli", 12, 290, 320), ("lib/read.mli", 12, 290, 334), 0), 0, Tag1 ("Read", 10))]], 1, 0, 0, 0, 0, 0, (("lib/read.mli", 12, 290, 290), ("lib/read.mli", 12, 290, 336), 0), 0, 0, 0, Tag1 ("Read", 5)), 1, 0); Tag1 (("ocaml_parsing_error", 395), (0, 0, Tag1 ([(("Syntax", 304), ([(Tag3 (Tag1 ((Tag2 ("Syntaxerr")), "error"), 0, (0)), 100000000, 0, -16)]), 0, (("lib/read.mli", 15, 356, 383), ("lib/read.mli", 15, 356, 408), 0), 0, Tag1 ("Read", 12)); (("Lexer", 310), ([(Tag3 (Tag1 ((Tag2 ("Lexer")), "error"), 0, (0)), 100000000, 0, -17)]), 0, (("lib/read.mli", 15, 356, 409), ("lib/read.mli", 15, 356, 431), 0), 0, Tag1 ("Read", 13))], 0), 1, 0, 0, 0, 0, 0, (("lib/read.mli", 15, 356, 356), ("lib/read.mli", 15, 356, 431), 0), 0, 0, 0, Tag1 ("Read", 11)), 1, 0); Tag1 (("error", 396), (0, 0, Tag1 ([(("Ocaml", 324), ([(Tag3 ((("ocaml_parsing_error", 395)), 0, (0)), 100000000, 0, -14)]), 0, (("lib/read.mli", 16, 432, 445), ("lib/read.mli", 16, 432, 473), 0), 0, Tag1 ("Read", 15)); (("Serialized", 325), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Schematic")), "Ext"), "error"), 0, (0)), 100000000, 0, -15)]), 0, (("lib/read.mli", 16, 432, 474), ("lib/read.mli", 16, 432, 509), 0), 0, Tag1 ("Read", 17))], 0), 1, 0, 0, 0, 0, 0, (("lib/read.mli", 16, 432, 432), ("lib/read.mli", 16, 432, 509), 0), 0, 0, 0, Tag1 ("Read", 14)), 1, 0); (("name", 397), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -13), (Tag3 (Tag1 ((Tag2 ("Unitname")), "t"), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("lib/read.mli", 19, 512, 512), ("lib/read.mli", 19, 512, 542), 0), 0, Tag1 ("Read", 18)), 0); (("file", 398), ((Tag1 (0, (Tag3 ((("kind", 394)), 0, (0)), 100000000, 0, -10), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -9), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Unitname")), "t"), 0, (0)), 100000000, 0, -5); (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 (Tag1 ((Tag2 ("M2l")), "t"), 0, (0)), 100000000, 0, -7); (Tag3 ((("error", 396)), 0, (0)), 100000000, 0, -8)], (0)), 100000000, 0, -6)]), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("lib/read.mli", 22, 615, 615), ("lib/read.mli", 23, 643, 679), 0), 0, Tag1 ("Read", 19)), 0)], "Read", [("Read", ("\252*\146t'\236>\158\170\160=\012nNp\144")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Unitname", ("\155n\201\211\249\229\028$\220J\172\018<\249\171\158")); ("Uloc", ("\172\208h 6@\178[\156\249\206\172%\133\167\239")); ("Syntaxerr", ("\219y W\156\199S\188\018+\196\144>\187\159f")); ("Support", ("YA;\029\006a\255\202R\137\181\133\184\209)\005")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Schematic", ("\180\179\011\178\017I\241^\235\149h\161k\b\209\142")); ("Pp", ("\167zCQ\134\167\215\2517\247\158\219\250\223.\197")); ("Pkg", ("SneaP\023\210\210\240\218\128bA\te\239")); ("Paths", ("\000\152\242H\139l\222\245\245Ndb\202P^\175")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Parser", ("7'\1782\253\248\214\163]8\227\231&\145\183;")); ("Namespaced", ("%\208\253;3\161W$\236\1838K\195z\1493")); ("Name", ("4? \167\131n\184\000\214\031\017\027\153\002]^")); ("Module", ("2_s\200\188\137\247\158>\168\195\023\195\n\011V")); ("Modname", ("v\160\183\003\212\232\177\007\228-\002\145i\230\255\248")); ("M2l", ("\208\241\201a\199\212\172v;\135t\185\027\196~\029")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Loc", ("ax\213\152\006\175?\212%\0014\238\021S\218=")); ("Lexer", ("d\166[g\003\193p\201\147\190pL\152^\136A")); ("Id", ("w\207`(\179n\181\161\155\252\243\195\006\139NO")); ("Docstrings", ("\216\171\176\031*\203\162\186%\175\201qq\189\139U")); ("Deps", ("%\164\252&\165z\218\221\023\182\235\223+\147\145\195")); ("CamlinternalMenhirLib", ("\171m\238\135\252\210\222v\200\202\178\241L\143\025\153")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216"))], [(0)])
val file : kind -> string -> Unitname.t * (M2l.t, error) result

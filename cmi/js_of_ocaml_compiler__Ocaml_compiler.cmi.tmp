val constant_of_const :
  Lambda.structured_constant -> Js_of_ocaml_compiler.Code.constant
val find_loc_in_summary : Ident.t -> Env.summary -> Location.t option
module Symtable :
  sig
    module Global :
      sig
        type t = Glob_compunit of string | Glob_predef of string
        val name : t -> string
        val of_ident : Ident.t -> t option
      end
    module GlobalMap :
      sig
        type t
        val empty : t
        val filter : (Global.t -> bool) -> t -> t
        val find : Global.t -> t -> int
        val iter : f:(Global.t -> int -> unit) -> t -> unit
        val fold : (Global.t -> int -> 'a -> 'a) -> t -> 'a -> 'a
        val enter : t ref -> Global.t -> int
      end
    val reloc_ident : string -> int
    val current_state : unit -> GlobalMap.t
  end
module Ident :
  sig
    type 'a tbl = 'a Ident.tbl
    val table_contents : 'a Ident.tbl -> ('a * Ident.t) list
  end
module Cmo_format :
  sig
    type t = Cmo_format.compilation_unit
    val name : t -> string
    val requires : t -> string list
    val primitives : t -> string list
    val force_link : t -> bool
    val imports : t -> (string * string option) list("DEBUG:rule", [(("constant_of_const", 760), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Lambda")), "structured_constant"), 0, (0)), 100000000, 0, -10), (Tag3 (Tag1 (Tag1 ((Tag2 ("Js_of_ocaml_compiler")), "Code"), "constant"), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("compiler/lib/ocaml_compiler.mli", 19, 832, 832), ("compiler/lib/ocaml_compiler.mli", 19, 832, 899), 0), 0, Tag1 ("Js_of_ocaml_compiler__Ocaml_compiler", 4)), 0); (("find_loc_in_summary", 761), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -7), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "summary"), 0, (0)), 100000000, 0, -6), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -5)], (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("compiler/lib/ocaml_compiler.mli", 21, 901, 901), ("compiler/lib/ocaml_compiler.mli", 21, 901, 970), 0), 0, Tag1 ("Js_of_ocaml_compiler__Ocaml_compiler", 5)), 0); Tag3 (("Symtable", 762), 0, (Tag1 ([Tag3 (("Global", 765), 0, (Tag1 ([Tag1 (("t", 769), (0, 0, Tag1 ([(("Glob_compunit", 721), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -24)]), 0, (("compiler/lib/ocaml_compiler.mli", 26, 1029, 1035), ("compiler/lib/ocaml_compiler.mli", 26, 1029, 1060), 0), 0, Tag1 ("Js_of_ocaml_compiler__Ocaml_compiler", 7)); (("Glob_predef", 722), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -25)]), 0, (("compiler/lib/ocaml_compiler.mli", 27, 1061, 1067), ("compiler/lib/ocaml_compiler.mli", 27, 1061, 1090), 0), 0, Tag1 ("Js_of_ocaml_compiler__Ocaml_compiler", 8))], 0), 1, 0, 0, 0, 0, 0, (("compiler/lib/ocaml_compiler.mli", 25, 1016, 1020), ("compiler/lib/ocaml_compiler.mli", 27, 1061, 1090), 0), 0, 0, 0, Tag1 ("Js_of_ocaml_compiler__Ocaml_compiler", 6)), 1, 0); (("name", 770), ((Tag1 (0, (Tag3 ((("t", 769)), 0, (0)), 100000000, 0, -23), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0, (("compiler/lib/ocaml_compiler.mli", 29, 1092, 1096), ("compiler/lib/ocaml_compiler.mli", 29, 1092, 1118), 0), 0, Tag1 ("Js_of_ocaml_compiler__Ocaml_compiler", 9)), 0); (("of_ident", 771), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -20), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 769)), 0, (0)), 100000000, 0, -19)], (0)), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("compiler/lib/ocaml_compiler.mli", 31, 1120, 1124), ("compiler/lib/ocaml_compiler.mli", 31, 1120, 1158), 0), 0, Tag1 ("Js_of_ocaml_compiler__Ocaml_compiler", 10)), 0)]), 0, (("compiler/lib/ocaml_compiler.mli", 24, 994, 996), ("compiler/lib/ocaml_compiler.mli", 32, 1159, 1164), 0), Tag1 ("Js_of_ocaml_compiler__Ocaml_compiler", 11)), 0, 0); Tag3 (("GlobalMap", 766), 0, (Tag1 ([Tag1 (("t", 772), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("compiler/lib/ocaml_compiler.mli", 35, 1191, 1195), ("compiler/lib/ocaml_compiler.mli", 35, 1191, 1201), 0), 0, 0, 0, Tag1 ("Js_of_ocaml_compiler__Ocaml_compiler", 12)), 1, 0); (("empty", 773), ((Tag3 ((("t", 772)), 0, (0)), 100000000, 0, -63), 0, (("compiler/lib/ocaml_compiler.mli", 37, 1203, 1207), ("compiler/lib/ocaml_compiler.mli", 37, 1203, 1220), 0), 0, Tag1 ("Js_of_ocaml_compiler__Ocaml_compiler", 13)), 0); (("filter", 774), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((("Global", 765)), "t"), 0, (0)), 100000000, 0, -62), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -61), 0), 100000000, 0, -60), (Tag1 (0, (Tag3 ((("t", 772)), 0, (0)), 100000000, 0, -59), (Tag3 ((("t", 772)), 0, (0)), 100000000, 0, -58), 0), 100000000, 0, -57), 0), 100000000, 0, -56), 0, (("compiler/lib/ocaml_compiler.mli", 39, 1222, 1226), ("compiler/lib/ocaml_compiler.mli", 39, 1222, 1267), 0), 0, Tag1 ("Js_of_ocaml_compiler__Ocaml_compiler", 14)), 0); (("find", 775), ((Tag1 (0, (Tag3 (Tag1 ((("Global", 765)), "t"), 0, (0)), 100000000, 0, -55), (Tag1 (0, (Tag3 ((("t", 772)), 0, (0)), 100000000, 0, -54), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -53), 0), 100000000, 0, -52), 0), 100000000, 0, -51), 0, (("compiler/lib/ocaml_compiler.mli", 41, 1269, 1273), ("compiler/lib/ocaml_compiler.mli", 41, 1269, 1304), 0), 0, Tag1 ("Js_of_ocaml_compiler__Ocaml_compiler", 15)), 0); (("iter", 776), ((Tag1 (("f"), (Tag1 (0, (Tag3 (Tag1 ((("Global", 765)), "t"), 0, (0)), 100000000, 0, -50), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -49), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -48), 0), 100000000, 0, -47), 0), 100000000, 0, -46), (Tag1 (0, (Tag3 ((("t", 772)), 0, (0)), 100000000, 0, -45), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -44), 0), 100000000, 0, -43), 0), 100000000, 0, -42), 0, (("compiler/lib/ocaml_compiler.mli", 43, 1306, 1310), ("compiler/lib/ocaml_compiler.mli", 43, 1306, 1361), 0), 0, Tag1 ("Js_of_ocaml_compiler__Ocaml_compiler", 16)), 0); (("fold", 777), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((("Global", 765)), "t"), 0, (0)), 100000000, 0, -41), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -40), (Tag1 (0, ((("a")), 100000000, 0, -35), ((("a")), 100000000, 0, -35), 0), 100000000, 0, -39), 0), 100000000, 0, -38), 0), 100000000, 0, -37), (Tag1 (0, (Tag3 ((("t", 772)), 0, (0)), 100000000, 0, -36), (Tag1 (0, ((("a")), 100000000, 0, -35), ((("a")), 100000000, 0, -35), 0), 100000000, 0, -34), 0), 100000000, 0, -33), 0), 100000000, 0, -32), 0, (("compiler/lib/ocaml_compiler.mli", 45, 1363, 1367), ("compiler/lib/ocaml_compiler.mli", 45, 1363, 1424), 0), 0, Tag1 ("Js_of_ocaml_compiler__Ocaml_compiler", 17)), 0); (("enter", 778), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("t", 772)), 0, (0)), 100000000, 0, -31)], (0)), 100000000, 0, -30), (Tag1 (0, (Tag3 (Tag1 ((("Global", 765)), "t"), 0, (0)), 100000000, 0, -29), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -28), 0), 100000000, 0, -27), 0), 100000000, 0, -26), 0, (("compiler/lib/ocaml_compiler.mli", 47, 1426, 1430), ("compiler/lib/ocaml_compiler.mli", 47, 1426, 1466), 0), 0, Tag1 ("Js_of_ocaml_compiler__Ocaml_compiler", 18)), 0)]), 0, (("compiler/lib/ocaml_compiler.mli", 34, 1166, 1168), ("compiler/lib/ocaml_compiler.mli", 48, 1467, 1472), 0), Tag1 ("Js_of_ocaml_compiler__Ocaml_compiler", 19)), 0, 0); (("reloc_ident", 767), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -16), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -15), 0), 100000000, 0, -14), 0, (("compiler/lib/ocaml_compiler.mli", 50, 1474, 1476), ("compiler/lib/ocaml_compiler.mli", 50, 1474, 1507), 0), 0, Tag1 ("Js_of_ocaml_compiler__Ocaml_compiler", 20)), 0); (("current_state", 768), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -13), (Tag3 (Tag1 ((("GlobalMap", 766)), "t"), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("compiler/lib/ocaml_compiler.mli", 52, 1509, 1511), ("compiler/lib/ocaml_compiler.mli", 52, 1509, 1550), 0), 0, Tag1 ("Js_of_ocaml_compiler__Ocaml_compiler", 21)), 0)]), 0, (("compiler/lib/ocaml_compiler.mli", 23, 972, 972), ("compiler/lib/ocaml_compiler.mli", 53, 1551, 1554), 0), Tag1 ("Js_of_ocaml_compiler__Ocaml_compiler", 22)), 0, 0); Tag3 (("Ident", 763), 0, (Tag1 ([Tag1 (("tbl", 779), ([((("a")), 100000000, 0, -71)], 1, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Ident")), "tbl"), [((("a")), 100000000, 0, -71)], (0)), 100000000, 0, -70)), [7], [2], 0, 0, (("compiler/lib/ocaml_compiler.mli", 56, 1575, 1577), ("compiler/lib/ocaml_compiler.mli", 56, 1575, 1603), 0), 0, 0, 0, Tag1 ("Js_of_ocaml_compiler__Ocaml_compiler", 23)), 1, 0); (("table_contents", 780), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ident")), "tbl"), [((("a")), 100000000, 0, -67)], (0)), 100000000, 0, -69), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("a")), 100000000, 0, -67); (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -68)]), 100000000, 0, -66)], (0)), 100000000, 0, -65), 0), 100000000, 0, -64), 0, (("compiler/lib/ocaml_compiler.mli", 58, 1605, 1607), ("compiler/lib/ocaml_compiler.mli", 58, 1605, 1663), 0), 0, Tag1 ("Js_of_ocaml_compiler__Ocaml_compiler", 24)), 0)]), 0, (("compiler/lib/ocaml_compiler.mli", 55, 1556, 1556), ("compiler/lib/ocaml_compiler.mli", 59, 1664, 1667), 0), Tag1 ("Js_of_ocaml_compiler__Ocaml_compiler", 25)), 0, 0); Tag3 (("Cmo_format", 764), 0, (Tag1 ([Tag1 (("t", 781), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Cmo_format")), "compilation_unit"), 0, (0)), 100000000, 0, -93)), 0, 0, 0, 0, (("compiler/lib/ocaml_compiler.mli", 62, 1693, 1695), ("compiler/lib/ocaml_compiler.mli", 62, 1693, 1731), 0), 0, 0, 0, Tag1 ("Js_of_ocaml_compiler__Ocaml_compiler", 26)), 1, 0); (("name", 782), ((Tag1 (0, (Tag3 ((("t", 781)), 0, (0)), 100000000, 0, -92), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -91), 0), 100000000, 0, -90), 0, (("compiler/lib/ocaml_compiler.mli", 64, 1733, 1735), ("compiler/lib/ocaml_compiler.mli", 64, 1733, 1757), 0), 0, Tag1 ("Js_of_ocaml_compiler__Ocaml_compiler", 27)), 0); (("requires", 783), ((Tag1 (0, (Tag3 ((("t", 781)), 0, (0)), 100000000, 0, -89), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -88)], (0)), 100000000, 0, -87), 0), 100000000, 0, -86), 0, (("compiler/lib/ocaml_compiler.mli", 66, 1759, 1761), ("compiler/lib/ocaml_compiler.mli", 66, 1759, 1792), 0), 0, Tag1 ("Js_of_ocaml_compiler__Ocaml_compiler", 28)), 0); (("primitives", 784), ((Tag1 (0, (Tag3 ((("t", 781)), 0, (0)), 100000000, 0, -85), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -84)], (0)), 100000000, 0, -83), 0), 100000000, 0, -82), 0, (("compiler/lib/ocaml_compiler.mli", 68, 1794, 1796), ("compiler/lib/ocaml_compiler.mli", 68, 1794, 1829), 0), 0, Tag1 ("Js_of_ocaml_compiler__Ocaml_compiler", 29)), 0); (("force_link", 785), ((Tag1 (0, (Tag3 ((("t", 781)), 0, (0)), 100000000, 0, -81), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -80), 0), 100000000, 0, -79), 0, (("compiler/lib/ocaml_compiler.mli", 70, 1831, 1833), ("compiler/lib/ocaml_compiler.mli", 70, 1831, 1859), 0), 0, Tag1 ("Js_of_ocaml_compiler__Ocaml_compiler", 30)), 0); (("imports", 786), ((Tag1 (0, (Tag3 ((("t", 781)), 0, (0)), 100000000, 0, -78), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -75); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -77)], (0)), 100000000, 0, -76)]), 100000000, 0, -74)], (0)), 100000000, 0, -73), 0), 100000000, 0, -72), 0, (("compiler/lib/ocaml_compiler.mli", 72, 1861, 1863), ("compiler/lib/ocaml_compiler.mli", 72, 1861, 1911), 0), 0, Tag1 ("Js_of_ocaml_compiler__Ocaml_compiler", 31)), 0)]), 0, (("compiler/lib/ocaml_compiler.mli", 61, 1669, 1669), ("compiler/lib/ocaml_compiler.mli", 73, 1912, 1915), 0), Tag1 ("Js_of_ocaml_compiler__Ocaml_compiler", 32)), 0, 0)], "Js_of_ocaml_compiler__Ocaml_compiler", [("Js_of_ocaml_compiler__Ocaml_compiler", ("\016\222\131\238\254jX\229\194\173\191\004si\137\141")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Types", ("\177\238\029.\220\006\163!\230\015\006\182\133\155\194\166")); ("Type_immediacy", ("\"\127k\011Q\241\211\138\193;8\142\129\141#\251")); ("Subst", ("\021\031\148\223\127\186\189\135\027}\145r\216\143\177\156")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__StringLabels", ("\134F\024\226\216Is#\223\230\234\169Z\206Gc")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Random", ("\020\005Xq\171\026\218\152X\135\254\023\133zK\200")); ("Stdlib__Printf", ("\215<\139]\021\142\224E\245m\198qc(W\229")); ("Stdlib__Printexc", ("\217u\168\235\179oi\167\235\255\025\017%d\192s")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__ListLabels", ("*\194\012\191\020%\170\249m\002\180\178hk\205\220")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Fun", ("\234t\181\000iQ\251,\b\020$\224\233\160\142\210")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Filename", ("z\163\210n\195\247\255\129\029SI\180\152\141h ")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Char", ("\1794\1468\190\138\150g\231\240\140d\191.\212e")); ("Stdlib__BytesLabels", ("\145\128\000\239\186Z.\0310^\247\201\174\\\137R")); ("Stdlib__Bytes", ("C\134\194)\175\222\137p\205\246\244\r\241\164P\209")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__ArrayLabels", ("\029\143d\025\218v\003\007\212jC\235/\205\006\198")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shape", ("\235\127Y\213\025\137=\244\218\181\248N\189\188\216p")); ("Primitive", ("}Shh\162\015|\220A\203\249\232\245G\213\019")); ("Path", ("\012\183\178\025\1298\228*\021r\185\160Y\252\n\026")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Outcometree", ("9\021%\234\211\206\210\004H\165\208\2014\234Q\142")); ("Misc", ("*\026\026\234c\191\131\161\\\203\183\012O\252\153\198")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Load_path", ("\012@\228l\230\164S\172h\1726X\020\252o}")); ("Lambda", ("\180\1419\236'\146K$\128\006\135q\135V\029\180")); ("Js_of_ocaml_compiler__Stdlib", ("\162;P\232\137\003\012\252\217E\227\201\001\204\163j")); ("Js_of_ocaml_compiler__Parse_info", ("`+\018\231C(v\197\016 .\222N\n\219\229")); ("Js_of_ocaml_compiler__Code", ("\016a\196PfGPO\142UB\129\019g#\027")); ("Js_of_ocaml_compiler", ("\140\150\022\231\129$!^\139\156\170\236r\184~q")); ("Identifiable", ("\004F\207\014\158GU\001\184\214\187%/#;\211")); ("Ident", ("\b9;!\187.\220\163(x\b\174\\\223\020\004")); ("Env", ("\021\n\181\142x\b\169j\227\"\017\248*\178\245\223")); ("Debuginfo", ("\131\251\175\217P\194M\163\022\151\002\005\006\185:\185")); ("Cmo_format", ("\243\160\175b\220T\220\2471\234x\017\158\187\\(")); ("Cmi_format", ("6\177\bU\139\"\023\152=\249\135\174\b\011Cg")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Build_path_prefix_map", ("y\028\167\207D\220\198\216\011\208\172\149\2416\bc")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216"))], [(0)])

  end

type production_position =
    BorderProd of Constrexpr.side * Gramlib.Gramext.g_assoc option
  | InternalProd
type production_level = NextLevel | NumLevel of int | DefaultLevel
val production_level_eq : production_level -> production_level -> bool
type 'a constr_entry_key_gen =
    ETIdent
  | ETName
  | ETGlobal
  | ETBigint
  | ETBinder of bool
  | ETConstr of Constrexpr.notation_entry *
      Notation_term.notation_binder_kind option * 'a
  | ETPattern of bool * int option
type constr_entry_key =
    (production_level * production_position) constr_entry_key_gen
val constr_entry_key_eq : constr_entry_key -> constr_entry_key -> bool
type simple_constr_prod_entry_key = production_level constr_entry_key_gen
type binder_target = ForBinder | ForTerm
type binder_entry_kind =
    ETBinderOpen
  | ETBinderClosed of constr_prod_entry_key option * (bool * string) list
and constr_prod_entry_key =
    ETProdIdent
  | ETProdName
  | ETProdGlobal
  | ETProdBigint
  | ETProdOneBinder of bool
  | ETProdConstr of Constrexpr.notation_entry *
      (production_level * production_position)
  | ETProdPattern of int
  | ETProdConstrList of Constrexpr.notation_entry *
      (production_level * production_position) * (bool * string) list
  | ETProdBinderList of binder_entry_kind
type 'a user_symbol =
    Ulist1 of 'a user_symbol
  | Ulist1sep of 'a user_symbol * string
  | Ulist0 of 'a user_symbol
  | Ulist0sep of 'a user_symbol * string
  | Uopt of 'a user_symbol
  | Uentry of 'a
  | Uentryl of 'a * int
type ('a, 'b, 'c) ty_user_symbol =
    TUlist1 :
      ('a, 'b, 'c) ty_user_symbol -> ('a list, 'b list, 'c list)
                                     ty_user_symbol
  | TUlist1sep : ('a, 'b, 'c) ty_user_symbol *
      string -> ('a list, 'b list, 'c list) ty_user_symbol
  | TUlist0 :
      ('a, 'b, 'c) ty_user_symbol -> ('a list, 'b list, 'c list)
                                     ty_user_symbol
  | TUlist0sep : ('a, 'b, 'c) ty_user_symbol *
      string -> ('a list, 'b list, 'c list) ty_user_symbol
  | TUopt :
      ('a, 'b, 'c) ty_user_symbol -> ('a option, 'b option, 'c option)
                                     ty_user_symbol
  | TUentry : ('a, 'b, 'c) Genarg.ArgT.tag -> ('a, 'b, 'c) ty_user_symbol
  | TUentryl : ('a, 'b, 'c) Genarg.ArgT.tag *
      int -> ("DEBUG:rule", [Tag1 (("production_position", 430), (0, 0, Tag1 ([(("BorderProd", 270), ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "side"), 0, (0)), 100000000, 0, -113); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Gramlib")), "Gramext"), "g_assoc"), 0, (0)), 100000000, 0, -115)], (0)), 100000000, 0, -114)]), 0, (("parsing/extend.mli", 14, 743, 745), ("parsing/extend.mli", 14, 743, 809), 0), 0, Tag1 ("Extend", 1)); (("InternalProd", 323), (0), 0, (("parsing/extend.mli", 15, 810, 812), ("parsing/extend.mli", 15, 810, 826), 0), 0, Tag1 ("Extend", 2))], 0), 1, 0, 0, 0, 0, 0, (("parsing/extend.mli", 13, 716, 716), ("parsing/extend.mli", 15, 810, 826), 0), 0, 0, 0, Tag1 ("Extend", 0)), 1, 0); Tag1 (("production_level", 431), (0, 0, Tag1 ([(("NextLevel", 328), (0), 0, (("parsing/extend.mli", 18, 852, 854), ("parsing/extend.mli", 18, 852, 865), 0), 0, Tag1 ("Extend", 4)); (("NumLevel", 329), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -112)]), 0, (("parsing/extend.mli", 19, 866, 868), ("parsing/extend.mli", 19, 866, 885), 0), 0, Tag1 ("Extend", 5)); (("DefaultLevel", 330), (0), 0, (("parsing/extend.mli", 20, 886, 888), ("parsing/extend.mli", 20, 886, 902), 0), 0, Tag1 ("Extend", 6))], 0), 1, 0, 0, 0, 0, 0, (("parsing/extend.mli", 17, 828, 828), ("parsing/extend.mli", 20, 886, 902), 0), 0, 0, 0, Tag1 ("Extend", 3)), 1, 0); (("production_level_eq", 432), ((Tag1 (0, (Tag3 ((("production_level", 431)), 0, (0)), 100000000, 0, -111), (Tag1 (0, (Tag3 ((("production_level", 431)), 0, (0)), 100000000, 0, -110), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -109), 0), 100000000, 0, -108), 0), 100000000, 0, -107), 0, (("parsing/extend.mli", 22, 966, 966), ("parsing/extend.mli", 22, 966, 1036), 0), 0, Tag1 ("Extend", 7)), 0); Tag1 (("constr_entry_key_gen", 433), ([((("a")), 100000000, 0, -103)], 1, Tag1 ([(("ETIdent", 333), (0), 0, (("parsing/extend.mli", 27, 1153, 1155), ("parsing/extend.mli", 27, 1153, 1164), 0), 0, Tag1 ("Extend", 9)); (("ETName", 334), (0), 0, (("parsing/extend.mli", 28, 1165, 1167), ("parsing/extend.mli", 28, 1165, 1175), 0), 0, Tag1 ("Extend", 10)); (("ETGlobal", 335), (0), 0, (("parsing/extend.mli", 29, 1176, 1178), ("parsing/extend.mli", 29, 1176, 1188), 0), 0, Tag1 ("Extend", 11)); (("ETBigint", 336), (0), 0, (("parsing/extend.mli", 30, 1189, 1191), ("parsing/extend.mli", 30, 1189, 1201), 0), 0, Tag1 ("Extend", 12)); (("ETBinder", 337), ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -99)]), 0, (("parsing/extend.mli", 31, 1202, 1204), ("parsing/extend.mli", 31, 1202, 1222), 0), 0, Tag1 ("Extend", 13)); (("ETConstr", 338), ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "notation_entry"), 0, (0)), 100000000, 0, -100); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Notation_term")), "notation_binder_kind"), 0, (0)), 100000000, 0, -102)], (0)), 100000000, 0, -101); ((("a")), 100000000, 0, -103)]), 0, (("parsing/extend.mli", 32, 1293, 1295), ("parsing/extend.mli", 32, 1293, 1383), 0), 0, Tag1 ("Extend", 14)); (("ETPattern", 351), ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -104); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -106)], (0)), 100000000, 0, -105)]), 0, (("parsing/extend.mli", 33, 1384, 1386), ("parsing/extend.mli", 33, 1384, 1418), 0), 0, Tag1 ("Extend", 15))], 0), 1, 0, [25], [0], 0, 0, (("parsing/extend.mli", 26, 1122, 1122), ("parsing/extend.mli", 33, 1384, 1418), 0), 0, 0, 0, Tag1 ("Extend", 8)), 1, 0); Tag1 (("constr_entry_key", 434), (0, 0, 0, 1, ((Tag3 ((("constr_entry_key_gen", 433)), [(Tag2 ([(Tag3 ((("production_level", 431)), 0, (0)), 100000000, 0, -97); (Tag3 ((("production_position", 430)), 0, (0)), 100000000, 0, -98)]), 100000000, 0, -96)], (0)), 100000000, 0, -95)), 0, 0, 0, 0, (("parsing/extend.mli", 37, 1532, 1532), ("parsing/extend.mli", 38, 1556, 1621), 0), 0, 0, 0, Tag1 ("Extend", 16)), 1, 0); (("constr_entry_key_eq", 435), ((Tag1 (0, (Tag3 ((("constr_entry_key", 434)), 0, (0)), 100000000, 0, -94), (Tag1 (0, (Tag3 ((("constr_entry_key", 434)), 0, (0)), 100000000, 0, -93), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -92), 0), 100000000, 0, -91), 0), 100000000, 0, -90), 0, (("parsing/extend.mli", 40, 1623, 1623), ("parsing/extend.mli", 40, 1623, 1693), 0), 0, Tag1 ("Extend", 17)), 0); Tag1 (("simple_constr_prod_entry_key", 436), (0, 0, 0, 1, ((Tag3 ((("constr_entry_key_gen", 433)), [(Tag3 ((("production_level", 431)), 0, (0)), 100000000, 0, -89)], (0)), 100000000, 0, -88)), 0, 0, 0, 0, (("parsing/extend.mli", 44, 1775, 1775), ("parsing/extend.mli", 45, 1811, 1852), 0), 0, 0, 0, Tag1 ("Extend", 18)), 1, 0); Tag1 (("binder_target", 437), (0, 0, Tag1 ([(("ForBinder", 356), (0), 0, (("parsing/extend.mli", 49, 1952, 1973), ("parsing/extend.mli", 49, 1952, 1982), 0), 0, Tag1 ("Extend", 20)); (("ForTerm", 357), (0), 0, (("parsing/extend.mli", 49, 1952, 1983), ("parsing/extend.mli", 49, 1952, 1992), 0), 0, Tag1 ("Extend", 21))], 0), 1, 0, 0, 0, 0, 0, (("parsing/extend.mli", 49, 1952, 1952), ("parsing/extend.mli", 49, 1952, 1992), 0), 0, 1, 0, Tag1 ("Extend", 19)), 1, 0); Tag1 (("binder_entry_kind", 438), (0, 0, Tag1 ([(("ETBinderOpen", 360), (0), 0, (("parsing/extend.mli", 51, 1994, 2019), ("parsing/extend.mli", 51, 1994, 2031), 0), 0, Tag1 ("Extend", 24)); (("ETBinderClosed", 361), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("constr_prod_entry_key", 439)), 0, (0)), 100000000, 0, -83)], (0)), 100000000, 0, -82); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -86); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -87)]), 100000000, 0, -85)], (0)), 100000000, 0, -84)]), 0, (("parsing/extend.mli", 51, 1994, 2032), ("parsing/extend.mli", 51, 1994, 2103), 0), 0, Tag1 ("Extend", 25))], 0), 1, 0, 0, 0, 0, 0, (("parsing/extend.mli", 51, 1994, 1994), ("parsing/extend.mli", 51, 1994, 2103), 0), 0, 0, 0, Tag1 ("Extend", 22)), 1, 0); Tag1 (("constr_prod_entry_key", 439), (0, 0, Tag1 ([(("ETProdIdent", 362), (0), 0, (("parsing/extend.mli", 54, 2133, 2135), ("parsing/extend.mli", 54, 2133, 2148), 0), 0, Tag1 ("Extend", 26)); (("ETProdName", 363), (0), 0, (("parsing/extend.mli", 55, 2184, 2186), ("parsing/extend.mli", 55, 2184, 2198), 0), 0, Tag1 ("Extend", 27)); (("ETProdGlobal", 364), (0), 0, (("parsing/extend.mli", 56, 2246, 2248), ("parsing/extend.mli", 56, 2246, 2262), 0), 0, Tag1 ("Extend", 28)); (("ETProdBigint", 365), (0), 0, (("parsing/extend.mli", 57, 2307, 2309), ("parsing/extend.mli", 57, 2307, 2323), 0), 0, Tag1 ("Extend", 29)); (("ETProdOneBinder", 366), ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -67)]), 0, (("parsing/extend.mli", 58, 2372, 2374), ("parsing/extend.mli", 58, 2372, 2399), 0), 0, Tag1 ("Extend", 30)); (("ETProdConstr", 367), ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "notation_entry"), 0, (0)), 100000000, 0, -68); (Tag2 ([(Tag3 ((("production_level", 431)), 0, (0)), 100000000, 0, -70); (Tag3 ((("production_position", 430)), 0, (0)), 100000000, 0, -71)]), 100000000, 0, -69)]), 0, (("parsing/extend.mli", 59, 2472, 2474), ("parsing/extend.mli", 59, 2472, 2560), 0), 0, Tag1 ("Extend", 31)); (("ETProdPattern", 368), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -72)]), 0, (("parsing/extend.mli", 60, 2619, 2621), ("parsing/extend.mli", 60, 2619, 2643), 0), 0, Tag1 ("Extend", 32)); (("ETProdConstrList", 369), ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "notation_entry"), 0, (0)), 100000000, 0, -73); (Tag2 ([(Tag3 ((("production_level", 431)), 0, (0)), 100000000, 0, -75); (Tag3 ((("production_position", 430)), 0, (0)), 100000000, 0, -76)]), 100000000, 0, -74); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -79); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -80)]), 100000000, 0, -78)], (0)), 100000000, 0, -77)]), 0, (("parsing/extend.mli", 61, 2706, 2708), ("parsing/extend.mli", 61, 2706, 2821), 0), 0, Tag1 ("Extend", 33)); (("ETProdBinderList", 370), ([(Tag3 ((("binder_entry_kind", 438)), 0, (0)), 100000000, 0, -81)]), 0, (("parsing/extend.mli", 62, 2887, 2889), ("parsing/extend.mli", 62, 2887, 2928), 0), 0, Tag1 ("Extend", 34))], 0), 1, 0, 0, 0, 0, 0, (("parsing/extend.mli", 53, 2105, 2105), ("parsing/extend.mli", 62, 2887, 2928), 0), 0, 0, 0, Tag1 ("Extend", 23)), 2, 0); Tag1 (("user_symbol", 440), ([((("a")), 100000000, 0, -59)], 1, Tag1 ([(("Ulist1", 372), ([(Tag3 ((("user_symbol", 440)), [((("a")), 100000000, 0, -59)], (0)), 100000000, 0, -58)]), 0, (("parsing/extend.mli", 67, 3043, 3045), ("parsing/extend.mli", 67, 3043, 3071), 0), 0, Tag1 ("Extend", 36)); (("Ulist1sep", 373), ([(Tag3 ((("user_symbol", 440)), [((("a")), 100000000, 0, -59)], (0)), 100000000, 0, -60); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -61)]), 0, (("parsing/extend.mli", 68, 3072, 3074), ("parsing/extend.mli", 68, 3072, 3112), 0), 0, Tag1 ("Extend", 37)); (("Ulist0", 374), ([(Tag3 ((("user_symbol", 440)), [((("a")), 100000000, 0, -59)], (0)), 100000000, 0, -62)]), 0, (("parsing/extend.mli", 69, 3113, 3115), ("parsing/extend.mli", 69, 3113, 3141), 0), 0, Tag1 ("Extend", 38)); (("Ulist0sep", 375), ([(Tag3 ((("user_symbol", 440)), [((("a")), 100000000, 0, -59)], (0)), 100000000, 0, -63); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -64)]), 0, (("parsing/extend.mli", 70, 3142, 3144), ("parsing/extend.mli", 70, 3142, 3182), 0), 0, Tag1 ("Extend", 39)); (("Uopt", 376), ([(Tag3 ((("user_symbol", 440)), [((("a")), 100000000, 0, -59)], (0)), 100000000, 0, -65)]), 0, (("parsing/extend.mli", 71, 3183, 3185), ("parsing/extend.mli", 71, 3183, 3209), 0), 0, Tag1 ("Extend", 40)); (("Uentry", 377), ([((("a")), 100000000, 0, -59)]), 0, (("parsing/extend.mli", 72, 3210, 3212), ("parsing/extend.mli", 72, 3210, 3226), 0), 0, Tag1 ("Extend", 41)); (("Uentryl", 378), ([((("a")), 100000000, 0, -59); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -66)]), 0, (("parsing/extend.mli", 73, 3227, 3229), ("parsing/extend.mli", 73, 3227, 3250), 0), 0, Tag1 ("Extend", 42))], 0), 1, 0, [25], [0], 0, 0, (("parsing/extend.mli", 66, 3021, 3021), ("parsing/extend.mli", 73, 3227, 3250), 0), 0, 0, 0, Tag1 ("Extend", 35)), 1, 0); Tag1 (("ty_user_symbol", 441), ([((("a")), 100000000, 0, -55); ((("b")), 100000000, 0, -56); ((("c")), 100000000, 0, -57)], 3, Tag1 ([(("TUlist1", 380), ([(Tag3 ((("ty_user_symbol", 441)), [((("a")), 100000000, 0, -4); ((("b")), 100000000, 0, -6); ((("c")), 100000000, 0, -8)], (0)), 100000000, 0, -9)]), ((Tag3 ((("ty_user_symbol", 441)), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -4)], (0)), 100000000, 0, -3); (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -6)], (0)), 100000000, 0, -5); (Tag3 ((Tag3 ("list", 9)), [((("c")), 100000000, 0, -8)], (0)), 100000000, 0, -7)], (0)), 100000000, 0, -2)), (("parsing/extend.mli", 76, 3285, 3287), ("parsing/extend.mli", 76, 3285, 3368), 0), 0, Tag1 ("Extend", 44)); (("TUlist1sep", 381), ([(Tag3 ((("ty_user_symbol", 441)), [((("a")), 100000000, 0, -12); ((("b")), 100000000, 0, -14); ((("c")), 100000000, 0, -16)], (0)), 100000000, 0, -17); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -18)]), ((Tag3 ((("ty_user_symbol", 441)), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -12)], (0)), 100000000, 0, -11); (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -14)], (0)), 100000000, 0, -13); (Tag3 ((Tag3 ("list", 9)), [((("c")), 100000000, 0, -16)], (0)), 100000000, 0, -15)], (0)), 100000000, 0, -10)), (("parsing/extend.mli", 77, 3369, 3371), ("parsing/extend.mli", 77, 3369, 3464), 0), 0, Tag1 ("Extend", 45)); (("TUlist0", 382), ([(Tag3 ((("ty_user_symbol", 441)), [((("a")), 100000000, 0, -21); ((("b")), 100000000, 0, -23); ((("c")), 100000000, 0, -25)], (0)), 100000000, 0, -26)]), ((Tag3 ((("ty_user_symbol", 441)), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -21)], (0)), 100000000, 0, -20); (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -23)], (0)), 100000000, 0, -22); (Tag3 ((Tag3 ("list", 9)), [((("c")), 100000000, 0, -25)], (0)), 100000000, 0, -24)], (0)), 100000000, 0, -19)), (("parsing/extend.mli", 78, 3465, 3467), ("parsing/extend.mli", 78, 3465, 3548), 0), 0, Tag1 ("Extend", 46)); (("TUlist0sep", 383), ([(Tag3 ((("ty_user_symbol", 441)), [((("a")), 100000000, 0, -29); ((("b")), 100000000, 0, -31); ((("c")), 100000000, 0, -33)], (0)), 100000000, 0, -34); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -35)]), ((Tag3 ((("ty_user_symbol", 441)), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -29)], (0)), 100000000, 0, -28); (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -31)], (0)), 100000000, 0, -30); (Tag3 ((Tag3 ("list", 9)), [((("c")), 100000000, 0, -33)], (0)), 100000000, 0, -32)], (0)), 100000000, 0, -27)), (("parsing/extend.mli", 79, 3549, 3551), ("parsing/extend.mli", 79, 3549, 3644), 0), 0, Tag1 ("Extend", 47)); (("TUopt", 384), ([(Tag3 ((("ty_user_symbol", 441)), [((("a")), 100000000, 0, -38); ((("b")), 100000000, 0, -40); ((("c")), 100000000, 0, -42)], (0)), 100000000, 0, -43)]), ((Tag3 ((("ty_user_symbol", 441)), [(Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -38)], (0)), 100000000, 0, -37); (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -40)], (0)), 100000000, 0, -39); (Tag3 ((Tag3 ("option", 10)), [((("c")), 100000000, 0, -42)], (0)), 100000000, 0, -41)], (0)), 100000000, 0, -36)), (("parsing/extend.mli", 80, 3645, 3647), ("parsing/extend.mli", 80, 3645, 3734), 0), 0, Tag1 ("Extend", 48)); (("TUentry", 385), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Genarg")), "ArgT"), "tag"), [((("a")), 100000000, 0, -45); ((("b")), 100000000, 0, -46); ((("c")), 100000000, 0, -47)], (0)), 100000000, 0, -48)]), ((Tag3 ((("ty_user_symbol", 441)), [((("a")), 100000000, 0, -45); ((("b")), 100000000, 0, -46); ((("c")), 100000000, 0, -47)], (0)), 100000000, 0, -44)), (("parsing/extend.mli", 81, 3735, 3737), ("parsing/extend.mli", 81, 3735, 3806), 0), 0, Tag1 ("Extend", 49)); (("TUentryl", 429), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Genarg")), "ArgT"), "tag"), [((("a")), 100000000, 0, -50); ((("b")), 100000000, 0, -51); ((("c")), 100000000, 0, -52)], (0)), 100000000, 0, -53); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -54)]), ((Tag3 ((("ty_user_symbol", 441)), [((("a")), 100000000, 0, -50); ((("b")), 100000000, 0, -51); ((("c")), 100000000, 0, -52)], (0)), 100000000, 0, -49)), (("parsing/extend.mli", 82, 3807, 3809), ("parsing/extend.mli", 82, 3807, 3885), 0), 0, Tag1 ("Extend", 50))], 0), 1, 0, [63; 63; 63], [0; 0; 0], 0, 0, (("parsing/extend.mli", 75, 3252, 3252), ("parsing/extend.mli", 82, 3807, 3885), 0), 0, 0, 0, Tag1 ("Extend", 43)), 1, 0)], "Extend", [("Extend", ("\179&!W\163V\006\245\018\168\021\001\224s\168\234")); ("Z", ("\253\196\2168\027\199O\134\220\218\031'\1484\233o")); ("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Vmemitcodes", ("wCd\138\165\158DD\241gH\236.\210\197\247")); ("Vmbytecodes", ("\025\021\151\137Dx\149W\236+[\143f\208\160\016")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Unix", (":B72R\011\005Sj\189)\011\239PH\254")); ("UnivSubst", ("\190qu\031mc\130\181\003G]\132\"\219m)")); ("UnivProblem", ("6'\161\018\181\001.\253\000\141a6\171\1727\155")); ("UnivNames", ("%\151_\209%+JM$n\001\232\194n\178N")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UState", ("SD\203\215|\136\n\251\239\208\148\215C\n\167\005")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Summary", ("\148G\135\226\024L3\246\021\028U\146\164`\253\250")); ("Store", ("/dT\252\145\179pq\216{\181\206\190K+U")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Random", ("\020\005Xq\171\026\218\152X\135\254\023\133zK\200")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("Section", ("\245\207\b\021\142v=\155#w\246}\"4b\006")); ("Safe_typing", (")\250?\164\145\132\241\127\186\152h+\145\"\237l")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("Range", ("\218\130\001r\237\r\144\171\164\021l\155\196\143sg")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Pattern", ("\195C\140Wb=\022\222\208\227^K\003\020\215X")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("NumTok", ("vd\023^\251\244B\166\145'\156\196-0\027\169")); ("Notation_term", ("5\002\017\217b\193nc>\239\239\237\244\031\173?")); ("Nativevalues", ("8:\007\025e\226c,\001\171\146#l\210\171\152")); ("Nativelib", ("V\239\205Y1\147E:,\176\196Hy\1483|")); ("Nativecode", ("\190\185\255\006m\012\210\163\138Rz\247\15283\183")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Namegen", ("\187\222\224T\255\020\1808-\212*\164\131\177\157x")); ("Monad", ("\244\171T\157\194p\187\160\149\195{\132\222\020\253\148")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Libnames", ("fp\0255\167\162\209\153\137\161\169#\246\193\003\198")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hook", ("\183\194\223\003\155\169',\187\240a;E\b\1396")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Gramlib__Stream", ("\248\\H\205_76\253\136\146\200\031\165\021=t")); ("Gramlib__Gramext", ("B\171oA\172\212\187>\175\233Q\145\"\176TM")); ("Gramlib", ("\154\143\210e\021i\246\176\224\194\220\217\007\145\139A")); ("Glob_term", ("\165=a\227\160\153.\021_$\232\209T\236\153O")); ("Genlambda", ("\170}\024\241\141\222\136S\169\219\2212i\134KI")); ("Genarg", ("\1434\015\001\152\196\005s\156\136\195\185\247\b3\t")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evd", ("\211\205p\193\216\129r\006\239oN\142ar\196\175")); ("Evar_kinds", ("\023L\186\132\218}\254\221\185\198\220\200h\003{\021")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Environ", ("\171b\1579\229<\003Z\147IL\225X\254\182\204")); ("Entries", ("\172\201\198\221Ap\027_{\174\141C\021\";p")); ("EConstr", ("\201aW\156\157;N\004\201V\208\006L\166\211)")); ("Dyn", ("\131z`\205v\2306\007x\027&K.?;\169")); ("Declarations", ("\239\137n\019\030w$\182\166z^{\b\206\163\175")); ("DAst", ("\224/\200)\007\184ni\134\b\139\204\241\005w\212")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Conversion", ("\158\150&\195M\tv\127|\029\158RRK\211A")); ("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constrexpr", ("p'r\245\184chL\183\249\"\213]\1741\237")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CUnix", ("\140Zl\153\167\011J\015\005|th\247OTu")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CEphemeron", ("\204I\179-\206(x4\173\229\250\001PkH\151")); ("CDebug", ("^4\210p7\239!3\138\138\213?\239`\250\157")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])
('a, 'b, 'c) ty_user_symbol

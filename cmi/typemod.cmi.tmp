module Signature_names :
  sig
    type t
    val simplify : Env.t -> t -> Types.signature -> Types.signature
  end
val type_module :
  Env.t -> Parsetree.module_expr -> Typedtree.module_expr * Shape.t
val type_structure :
  Env.t ->
  Parsetree.structure ->
  Typedtree.structure * Types.signature * Signature_names.t * Shape.t * Env.t
val type_toplevel_phrase :
  Env.t ->
  Parsetree.structure ->
  Typedtree.structure * Types.signature * Signature_names.t * Shape.t * Env.t
val type_implementation :
  string ->
  string ->
  string -> Env.t -> Parsetree.structure -> Typedtree.implementation
val type_interface : Env.t -> Parsetree.signature -> Typedtree.signature
val transl_signature : Env.t -> Parsetree.signature -> Typedtree.signature
val check_nongen_signature : Env.t -> Types.signature -> unit
val modtype_of_package :
  Env.t ->
  Location.t ->
  Path.t -> (Longident.t * Types.type_expr) list -> Types.module_type
val path_of_module : Typedtree.module_expr -> Path.t option
val save_signature :
  string ->
  Typedtree.signature ->
  string -> string -> Env.t -> Cmi_format.cmi_infos -> unit
val package_units :
  Env.t -> string list -> string -> string -> Typedtree.module_coercion
val initial_env :
  loc:Location.t ->
  initially_opened_module:string option ->
  open_implicit_modules:string list -> Env.t
module Sig_component_kind :
  sig
    type t =
        Value
      | Type
      | Module
      | Module_type
      | Extension_constructor
      | Class
      | Class_type
    val to_string : t -> string
  end
type hiding_error =
    Illegal_shadowing of { shadowed_item_id : Ident.t;
      shadowed_item_kind : Sig_component_kind.t;
      shadowed_item_loc : Location.t; shadower_id : Ident.t;
      user_id : Ident.t; user_kind : Sig_component_kind.t;
      user_loc : Location.t;
    }
  | Appears_in_signature of { opened_item_id : Ident.t;
      opened_item_kind : Sig_component_kind.t; user_id : Ident.t;
      user_kind : Sig_component_kind.t; user_loc : Location.t;
    }
type error =
    Cannot_apply of Types.module_type
  | Not_included of Includemod.explanation
  | Cannot_eliminate_dependency of Types.module_type
  | Signature_expected
  | Structure_expected of Types.module_type
  | With_no_component of Longident.t
  | With_mismatch of Longident.t * Includemod.explanation
  | With_makes_applicative_functor_ill_typed of Longident.t * Path.t *
      Includemod.explanation
  | With_changes_module_alias of Longident.t * Ident.t * Path.t
  | With_cannot_remove_constrained_type
  | Repeated_name of Sig_component_kind.t * string
  | Non_generalizable of { vars : Types.type_expr list;
      expression : Types.type_expr;
    }
  | Non_generalizable_module of { vars : Types.type_expr list;
      item : Types.value_description; mty : Types.module_type;
    }
  | Implementation_is_required of string
  | Interface_not_compiled of string
  | Not_allowed_in_functor_body
  | Not_a_packed_module of Types.type_expr
  | Incomplete_packed_module of Types.type_expr
  | Scoping_pack of Longident.t * Types.type_expr
  | Recursive_module_require_explicit_type
  | Apply_generative
  | Cannot_scrape_alias of Path.t
  | Cannot_scrape_package_type of Path.t
  | Badly_formed_signature of string * Typedecl.error
  | Cannot_hide_id of hiding_error
  | Invalid_type_subst_rhs
  | Unpackable_local_modtype_subst of Path.t
  | With_cannot_remove_packed_modtype of Path.t * Types.module_type
exception Error of Location.t * Env.t * error
exception Error_forward of Location.error
("DEBUG:rule", [Tag3 (("Signature_names", 1038), 0, (Tag1 ([Tag1 (("t", 1057), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("typing/typemod.mli", 26, 1273, 1275), ("typing/typemod.mli", 26, 1273, 1281), 0), 0, 0, 0, Tag1 ("Typemod", 1)), 1, 0); (("simplify", 1058), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -168), (Tag1 (0, (Tag3 ((("t", 1057)), 0, (0)), 100000000, 0, -167), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "signature"), 0, (0)), 100000000, 0, -166), (Tag3 (Tag1 ((Tag2 ("Types")), "signature"), 0, (0)), 100000000, 0, -165), 0), 100000000, 0, -164), 0), 100000000, 0, -163), 0), 100000000, 0, -162), 0, (("typing/typemod.mli", 28, 1283, 1285), ("typing/typemod.mli", 28, 1283, 1335), 0), 0, Tag1 ("Typemod", 2)), 0)]), 0, (("typing/typemod.mli", 25, 1244, 1244), ("typing/typemod.mli", 29, 1336, 1339), 0), Tag1 ("Typemod", 3)), 0, 0); (("type_module", 1039), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -161), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "module_expr"), 0, (0)), 100000000, 0, -160), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_expr"), 0, (0)), 100000000, 0, -158); (Tag3 (Tag1 ((Tag2 ("Shape")), "t"), 0, (0)), 100000000, 0, -159)]), 100000000, 0, -157), 0), 100000000, 0, -156), 0), 100000000, 0, -155), 0, (("typing/typemod.mli", 31, 1341, 1341), ("typing/typemod.mli", 32, 1358, 1431), 0), 0, Tag1 ("Typemod", 9)), 0); (("type_structure", 1040), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -154), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "structure"), 0, (0)), 100000000, 0, -153), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Typedtree")), "structure"), 0, (0)), 100000000, 0, -148); (Tag3 (Tag1 ((Tag2 ("Types")), "signature"), 0, (0)), 100000000, 0, -149); (Tag3 (Tag1 ((("Signature_names", 1038)), "t"), 0, (0)), 100000000, 0, -150); (Tag3 (Tag1 ((Tag2 ("Shape")), "t"), 0, (0)), 100000000, 0, -151); (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -152)]), 100000000, 0, -147), 0), 100000000, 0, -146), 0), 100000000, 0, -145), 0, (("typing/typemod.mli", 33, 1432, 1432), ("typing/typemod.mli", 36, 1558, 1565), 0), 0, Tag1 ("Typemod", 10)), 0); (("type_toplevel_phrase", 1041), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -144), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "structure"), 0, (0)), 100000000, 0, -143), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Typedtree")), "structure"), 0, (0)), 100000000, 0, -138); (Tag3 (Tag1 ((Tag2 ("Types")), "signature"), 0, (0)), 100000000, 0, -139); (Tag3 (Tag1 ((("Signature_names", 1038)), "t"), 0, (0)), 100000000, 0, -140); (Tag3 (Tag1 ((Tag2 ("Shape")), "t"), 0, (0)), 100000000, 0, -141); (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -142)]), 100000000, 0, -137), 0), 100000000, 0, -136), 0), 100000000, 0, -135), 0, (("typing/typemod.mli", 37, 1566, 1566), ("typing/typemod.mli", 40, 1698, 1705), 0), 0, Tag1 ("Typemod", 11)), 0); (("type_implementation", 1042), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -134), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -133), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -132), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -131), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "structure"), 0, (0)), 100000000, 0, -130), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "implementation"), 0, (0)), 100000000, 0, -129), 0), 100000000, 0, -128), 0), 100000000, 0, -127), 0), 100000000, 0, -126), 0), 100000000, 0, -125), 0), 100000000, 0, -124), 0, (("typing/typemod.mli", 41, 1706, 1706), ("typing/typemod.mli", 43, 1772, 1821), 0), 0, Tag1 ("Typemod", 12)), 0); (("type_interface", 1043), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -123), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "signature"), 0, (0)), 100000000, 0, -122), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "signature"), 0, (0)), 100000000, 0, -121), 0), 100000000, 0, -120), 0), 100000000, 0, -119), 0, (("typing/typemod.mli", 44, 1822, 1822), ("typing/typemod.mli", 45, 1842, 1901), 0), 0, Tag1 ("Typemod", 13)), 0); (("transl_signature", 1044), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -118), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "signature"), 0, (0)), 100000000, 0, -117), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "signature"), 0, (0)), 100000000, 0, -116), 0), 100000000, 0, -115), 0), 100000000, 0, -114), 0, (("typing/typemod.mli", 46, 1902, 1902), ("typing/typemod.mli", 47, 1924, 1983), 0), 0, Tag1 ("Typemod", 14)), 0); (("check_nongen_signature", 1045), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -113), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "signature"), 0, (0)), 100000000, 0, -112), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -111), 0), 100000000, 0, -110), 0), 100000000, 0, -109), 0, (("typing/typemod.mli", 48, 1984, 1984), ("typing/typemod.mli", 49, 2012, 2052), 0), 0, Tag1 ("Typemod", 15)), 0); (("modtype_of_package", 1046), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -108), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -107), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -106), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -104); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -105)]), 100000000, 0, -103)], (0)), 100000000, 0, -102), (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -101), 0), 100000000, 0, -100), 0), 100000000, 0, -99), 0), 100000000, 0, -98), 0), 100000000, 0, -97), 0, (("typing/typemod.mli", 56, 2248, 2248), ("typing/typemod.mli", 58, 2303, 2366), 0), 0, Tag1 ("Typemod", 16)), 0); (("path_of_module", 1047), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_expr"), 0, (0)), 100000000, 0, -96), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -95)], (0)), 100000000, 0, -94), 0), 100000000, 0, -93), 0, (("typing/typemod.mli", 60, 2368, 2368), ("typing/typemod.mli", 60, 2368, 2427), 0), 0, Tag1 ("Typemod", 17)), 0); (("save_signature", 1048), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -92), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "signature"), 0, (0)), 100000000, 0, -91), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -90), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -89), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -88), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Cmi_format")), "cmi_infos"), 0, (0)), 100000000, 0, -87), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -86), 0), 100000000, 0, -85), 0), 100000000, 0, -84), 0), 100000000, 0, -83), 0), 100000000, 0, -82), 0), 100000000, 0, -81), 0), 100000000, 0, -80), 0, (("typing/typemod.mli", 62, 2429, 2429), ("typing/typemod.mli", 64, 2504, 2543), 0), 0, Tag1 ("Typemod", 18)), 0); (("package_units", 1049), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -79), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -78)], (0)), 100000000, 0, -77), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -76), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -75), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_coercion"), 0, (0)), 100000000, 0, -74), 0), 100000000, 0, -73), 0), 100000000, 0, -72), 0), 100000000, 0, -71), 0), 100000000, 0, -70), 0, (("typing/typemod.mli", 66, 2545, 2545), ("typing/typemod.mli", 67, 2564, 2635), 0), 0, Tag1 ("Typemod", 19)), 0); (("initial_env", 1050), ((Tag1 (("loc"), (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -69), (Tag1 (("initially_opened_module"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -68)], (0)), 100000000, 0, -67), (Tag1 (("open_implicit_modules"), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -66)], (0)), 100000000, 0, -65), (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -64), 0), 100000000, 0, -63), 0), 100000000, 0, -62), 0), 100000000, 0, -61), 0, (("typing/typemod.mli", 70, 2704, 2704), ("typing/typemod.mli", 73, 2784, 2828), 0), 0, Tag1 ("Typemod", 20)), 0); Tag3 (("Sig_component_kind", 1051), 0, (Tag1 ([Tag1 (("t", 1059), (0, 0, Tag1 ([(("Value", 853), (0), 0, (("typing/typemod.mli", 77, 2873, 2877), ("typing/typemod.mli", 77, 2873, 2884), 0), 0, Tag1 ("Typemod", 22)); (("Type", 854), (0), 0, (("typing/typemod.mli", 78, 2885, 2889), ("typing/typemod.mli", 78, 2885, 2895), 0), 0, Tag1 ("Typemod", 23)); (("Module", 855), (0), 0, (("typing/typemod.mli", 79, 2896, 2900), ("typing/typemod.mli", 79, 2896, 2908), 0), 0, Tag1 ("Typemod", 24)); (("Module_type", 856), (0), 0, (("typing/typemod.mli", 80, 2909, 2913), ("typing/typemod.mli", 80, 2909, 2926), 0), 0, Tag1 ("Typemod", 25)); (("Extension_constructor", 857), (0), 0, (("typing/typemod.mli", 81, 2927, 2931), ("typing/typemod.mli", 81, 2927, 2954), 0), 0, Tag1 ("Typemod", 26)); (("Class", 858), (0), 0, (("typing/typemod.mli", 82, 2955, 2959), ("typing/typemod.mli", 82, 2955, 2966), 0), 0, Tag1 ("Typemod", 27)); (("Class_type", 859), (0), 0, (("typing/typemod.mli", 83, 2967, 2971), ("typing/typemod.mli", 83, 2967, 2983), 0), 0, Tag1 ("Typemod", 28))], 0), 1, 0, 0, 0, 0, 0, (("typing/typemod.mli", 76, 2862, 2864), ("typing/typemod.mli", 83, 2967, 2983), 0), 0, 1, 0, Tag1 ("Typemod", 21)), 1, 0); (("to_string", 1060), ((Tag1 (0, (Tag3 ((("t", 1059)), 0, (0)), 100000000, 0, -171), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -170), 0), 100000000, 0, -169), 0, (("typing/typemod.mli", 85, 2985, 2987), ("typing/typemod.mli", 85, 2985, 3014), 0), 0, Tag1 ("Typemod", 29)), 0)]), 0, (("typing/typemod.mli", 75, 2830, 2830), ("typing/typemod.mli", 86, 3015, 3018), 0), Tag1 ("Typemod", 30)), 0, 0); Tag1 (("hiding_error", 1052), (0, 0, Tag1 ([(("Illegal_shadowing", 863), Tag1 ([(("shadowed_item_id", 903), 0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -49), (("typing/typemod.mli", 90, 3067, 3073), ("typing/typemod.mli", 90, 3067, 3099), 0), 0, Tag1 ("Typemod", 32)); (("shadowed_item_kind", 904), 0, (Tag3 (Tag1 ((("Sig_component_kind", 1051)), "t"), 0, (0)), 100000000, 0, -50), (("typing/typemod.mli", 91, 3100, 3106), ("typing/typemod.mli", 91, 3100, 3147), 0), 0, Tag1 ("Typemod", 33)); (("shadowed_item_loc", 905), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -51), (("typing/typemod.mli", 92, 3148, 3154), ("typing/typemod.mli", 92, 3148, 3184), 0), 0, Tag1 ("Typemod", 34)); (("shadower_id", 906), 0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -52), (("typing/typemod.mli", 93, 3185, 3191), ("typing/typemod.mli", 93, 3185, 3212), 0), 0, Tag1 ("Typemod", 35)); (("user_id", 907), 0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -53), (("typing/typemod.mli", 94, 3213, 3219), ("typing/typemod.mli", 94, 3213, 3236), 0), 0, Tag1 ("Typemod", 36)); (("user_kind", 908), 0, (Tag3 (Tag1 ((("Sig_component_kind", 1051)), "t"), 0, (0)), 100000000, 0, -54), (("typing/typemod.mli", 95, 3237, 3243), ("typing/typemod.mli", 95, 3237, 3275), 0), 0, Tag1 ("Typemod", 37)); (("user_loc", 909), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -55), (("typing/typemod.mli", 96, 3276, 3282), ("typing/typemod.mli", 96, 3276, 3303), 0), 0, Tag1 ("Typemod", 38))]), 0, (("typing/typemod.mli", 89, 3040, 3042), ("typing/typemod.mli", 97, 3304, 3309), 0), 0, Tag1 ("Typemod", 39)); (("Appears_in_signature", 910), Tag1 ([(("opened_item_id", 911), 0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -56), (("typing/typemod.mli", 99, 3340, 3346), ("typing/typemod.mli", 99, 3340, 3370), 0), 0, Tag1 ("Typemod", 40)); (("opened_item_kind", 912), 0, (Tag3 (Tag1 ((("Sig_component_kind", 1051)), "t"), 0, (0)), 100000000, 0, -57), (("typing/typemod.mli", 100, 3371, 3377), ("typing/typemod.mli", 100, 3371, 3416), 0), 0, Tag1 ("Typemod", 41)); (("user_id", 913), 0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -58), (("typing/typemod.mli", 101, 3417, 3423), ("typing/typemod.mli", 101, 3417, 3440), 0), 0, Tag1 ("Typemod", 42)); (("user_kind", 914), 0, (Tag3 (Tag1 ((("Sig_component_kind", 1051)), "t"), 0, (0)), 100000000, 0, -59), (("typing/typemod.mli", 102, 3441, 3447), ("typing/typemod.mli", 102, 3441, 3479), 0), 0, Tag1 ("Typemod", 43)); (("user_loc", 915), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -60), (("typing/typemod.mli", 103, 3480, 3486), ("typing/typemod.mli", 103, 3480, 3507), 0), 0, Tag1 ("Typemod", 44))]), 0, (("typing/typemod.mli", 98, 3310, 3312), ("typing/typemod.mli", 104, 3508, 3513), 0), 0, Tag1 ("Typemod", 45))], 0), 1, 0, 0, 0, 0, 0, (("typing/typemod.mli", 88, 3020, 3020), ("typing/typemod.mli", 104, 3508, 3513), 0), 0, 0, 0, Tag1 ("Typemod", 31)), 1, 0); Tag1 (("error", 1053), (0, 0, Tag1 ([(("Cannot_apply", 944), ([(Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -13)]), 0, (("typing/typemod.mli", 107, 3528, 3532), ("typing/typemod.mli", 107, 3528, 3559), 0), 0, Tag1 ("Typemod", 57)); (("Not_included", 945), ([(Tag3 (Tag1 ((Tag2 ("Includemod")), "explanation"), 0, (0)), 100000000, 0, -14)]), 0, (("typing/typemod.mli", 108, 3560, 3562), ("typing/typemod.mli", 108, 3560, 3602), 0), 0, Tag1 ("Typemod", 59)); (("Cannot_eliminate_dependency", 972), ([(Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -15)]), 0, (("typing/typemod.mli", 109, 3603, 3605), ("typing/typemod.mli", 109, 3603, 3649), 0), 0, Tag1 ("Typemod", 60)); (("Signature_expected", 973), (0), 0, (("typing/typemod.mli", 110, 3650, 3652), ("typing/typemod.mli", 110, 3650, 3672), 0), 0, Tag1 ("Typemod", 61)); (("Structure_expected", 974), ([(Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -16)]), 0, (("typing/typemod.mli", 111, 3673, 3675), ("typing/typemod.mli", 111, 3673, 3710), 0), 0, Tag1 ("Typemod", 62)); (("With_no_component", 975), ([(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -17)]), 0, (("typing/typemod.mli", 112, 3711, 3713), ("typing/typemod.mli", 112, 3711, 3747), 0), 0, Tag1 ("Typemod", 63)); (("With_mismatch", 976), ([(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -18); (Tag3 (Tag1 ((Tag2 ("Includemod")), "explanation"), 0, (0)), 100000000, 0, -19)]), 0, (("typing/typemod.mli", 113, 3748, 3750), ("typing/typemod.mli", 113, 3748, 3805), 0), 0, Tag1 ("Typemod", 64)); (("With_makes_applicative_functor_ill_typed", 977), ([(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -20); (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -21); (Tag3 (Tag1 ((Tag2 ("Includemod")), "explanation"), 0, (0)), 100000000, 0, -22)]), 0, (("typing/typemod.mli", 114, 3806, 3808), ("typing/typemod.mli", 115, 3854, 3905), 0), 0, Tag1 ("Typemod", 65)); (("With_changes_module_alias", 978), ([(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -23); (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -24); (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -25)]), 0, (("typing/typemod.mli", 116, 3906, 3908), ("typing/typemod.mli", 116, 3906, 3969), 0), 0, Tag1 ("Typemod", 66)); (("With_cannot_remove_constrained_type", 979), (0), 0, (("typing/typemod.mli", 117, 3970, 3972), ("typing/typemod.mli", 117, 3970, 4009), 0), 0, Tag1 ("Typemod", 67)); (("Repeated_name", 980), ([(Tag3 (Tag1 ((("Sig_component_kind", 1051)), "t"), 0, (0)), 100000000, 0, -26); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -27)]), 0, (("typing/typemod.mli", 118, 4010, 4012), ("typing/typemod.mli", 118, 4010, 4060), 0), 0, Tag1 ("Typemod", 68)); (("Non_generalizable", 981), Tag1 ([(("vars", 982), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -29)], (0)), 100000000, 0, -28), (("typing/typemod.mli", 119, 4061, 4088), ("typing/typemod.mli", 119, 4061, 4110), 0), 0, Tag1 ("Typemod", 69)); (("expression", 983), 0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -30), (("typing/typemod.mli", 119, 4061, 4111), ("typing/typemod.mli", 119, 4061, 4133), 0), 0, Tag1 ("Typemod", 70))]), 0, (("typing/typemod.mli", 119, 4061, 4063), ("typing/typemod.mli", 119, 4061, 4135), 0), 0, Tag1 ("Typemod", 71)); (("Non_generalizable_module", 984), Tag1 ([(("vars", 985), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -32)], (0)), 100000000, 0, -31), (("typing/typemod.mli", 121, 4168, 4176), ("typing/typemod.mli", 121, 4168, 4198), 0), 0, Tag1 ("Typemod", 72)); (("item", 986), 0, (Tag3 (Tag1 ((Tag2 ("Types")), "value_description"), 0, (0)), 100000000, 0, -33), (("typing/typemod.mli", 121, 4168, 4199), ("typing/typemod.mli", 121, 4168, 4224), 0), 0, Tag1 ("Typemod", 73)); (("mty", 987), 0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -34), (("typing/typemod.mli", 121, 4168, 4225), ("typing/typemod.mli", 121, 4168, 4242), 0), 0, Tag1 ("Typemod", 74))]), 0, (("typing/typemod.mli", 120, 4136, 4138), ("typing/typemod.mli", 121, 4168, 4244), 0), 0, Tag1 ("Typemod", 75)); (("Implementation_is_required", 988), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -35)]), 0, (("typing/typemod.mli", 122, 4245, 4247), ("typing/typemod.mli", 122, 4245, 4285), 0), 0, Tag1 ("Typemod", 76)); (("Interface_not_compiled", 989), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -36)]), 0, (("typing/typemod.mli", 123, 4286, 4288), ("typing/typemod.mli", 123, 4286, 4322), 0), 0, Tag1 ("Typemod", 77)); (("Not_allowed_in_functor_body", 990), (0), 0, (("typing/typemod.mli", 124, 4323, 4325), ("typing/typemod.mli", 124, 4323, 4354), 0), 0, Tag1 ("Typemod", 78)); (("Not_a_packed_module", 991), ([(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -37)]), 0, (("typing/typemod.mli", 125, 4355, 4357), ("typing/typemod.mli", 125, 4355, 4391), 0), 0, Tag1 ("Typemod", 79)); (("Incomplete_packed_module", 992), ([(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -38)]), 0, (("typing/typemod.mli", 126, 4392, 4394), ("typing/typemod.mli", 126, 4392, 4433), 0), 0, Tag1 ("Typemod", 80)); (("Scoping_pack", 993), ([(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -39); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -40)]), 0, (("typing/typemod.mli", 127, 4434, 4436), ("typing/typemod.mli", 127, 4434, 4477), 0), 0, Tag1 ("Typemod", 81)); (("Recursive_module_require_explicit_type", 994), (0), 0, (("typing/typemod.mli", 128, 4478, 4480), ("typing/typemod.mli", 128, 4478, 4520), 0), 0, Tag1 ("Typemod", 82)); (("Apply_generative", 995), (0), 0, (("typing/typemod.mli", 129, 4521, 4523), ("typing/typemod.mli", 129, 4521, 4541), 0), 0, Tag1 ("Typemod", 83)); (("Cannot_scrape_alias", 996), ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -41)]), 0, (("typing/typemod.mli", 130, 4542, 4544), ("typing/typemod.mli", 130, 4542, 4575), 0), 0, Tag1 ("Typemod", 84)); (("Cannot_scrape_package_type", 997), ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -42)]), 0, (("typing/typemod.mli", 131, 4576, 4578), ("typing/typemod.mli", 131, 4576, 4616), 0), 0, Tag1 ("Typemod", 85)); (("Badly_formed_signature", 998), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -43); (Tag3 (Tag1 ((Tag2 ("Typedecl")), "error"), 0, (0)), 100000000, 0, -44)]), 0, (("typing/typemod.mli", 132, 4617, 4619), ("typing/typemod.mli", 132, 4617, 4670), 0), 0, Tag1 ("Typemod", 87)); (("Cannot_hide_id", 1016), ([(Tag3 ((("hiding_error", 1052)), 0, (0)), 100000000, 0, -45)]), 0, (("typing/typemod.mli", 133, 4671, 4673), ("typing/typemod.mli", 133, 4671, 4705), 0), 0, Tag1 ("Typemod", 88)); (("Invalid_type_subst_rhs", 1017), (0), 0, (("typing/typemod.mli", 134, 4706, 4708), ("typing/typemod.mli", 134, 4706, 4732), 0), 0, Tag1 ("Typemod", 89)); (("Unpackable_local_modtype_subst", 1018), ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -46)]), 0, (("typing/typemod.mli", 135, 4733, 4735), ("typing/typemod.mli", 135, 4733, 4777), 0), 0, Tag1 ("Typemod", 90)); (("With_cannot_remove_packed_modtype", 1019), ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -47); (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -48)]), 0, (("typing/typemod.mli", 136, 4778, 4780), ("typing/typemod.mli", 136, 4778, 4839), 0), 0, Tag1 ("Typemod", 91))], 0), 1, 0, 0, 0, 0, 0, (("typing/typemod.mli", 106, 3515, 3515), ("typing/typemod.mli", 136, 4778, 4839), 0), 0, 0, 0, Tag1 ("Typemod", 56)), 1, 0); Tag2 (("Error", 1054), ((Tag3 ("exn", 7)), 0, ([(Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -10); (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -11); (Tag3 ((("error", 1053)), 0, (0)), 100000000, 0, -12)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Typemod", 103)), 2, 0); Tag2 (("Error_forward", 1055), ((Tag3 ("exn", 7)), 0, ([(Tag3 (Tag1 ((Tag2 ("Location")), "error"), 0, (0)), 100000000, 0, -9)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Typemod", 104)), 2, 0); (("report_error", 1056), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -8), (Tag1 (("loc"), (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -7), (Tag1 (0, (Tag3 ((("error", 1053)), 0, (0)), 100000000, 0, -6), (Tag3 (Tag1 ((Tag2 ("Location")), "error"), 0, (0)), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("typing/typemod.mli", 141, 4930, 4930), ("typing/typemod.mli", 141, 4930, 4998), 0), 0, Tag1 ("Typemod", 105)), 0)], "Typemod", [("Typemod", ("-\1453\198\007\000\002$\209\252PD\1498\209\127")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Types", ("\177\238\029.\220\006\163!\230\015\006\182\133\155\194\166")); ("Typedtree", ("c5z\186\175w\146\254\018V\184\031\0038\004\227")); ("Typedecl_variance", ("c\128\170O\186*z\228\021\240\145S\164uU\012")); ("Typedecl_separability", ("\026\139\022\151\252\191\244\158\238\017\242\022rI\137\223")); ("Typedecl_properties", ("8\017\156\232&y#yd\205g\209\004wc\220")); ("Typedecl_immediacy", (";\152\004S\179Enh\252\003\003\227Lbg\221")); ("Typedecl", ("wy\236\r*\151\020M\020L\171\031\197#\028\200")); ("Type_immediacy", ("\"\127k\011Q\241\211\138\193;8\142\129\141#\251")); ("Subst", ("\021\031\148\223\127\186\189\135\027}\145r\216\143\177\156")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shape", ("\235\127Y\213\025\137=\244\218\181\248N\189\188\216p")); ("Primitive", ("}Shh\162\015|\220A\203\249\232\245G\213\019")); ("Path", ("\012\183\178\025\1298\228*\021r\185\160Y\252\n\026")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Outcometree", ("9\021%\234\211\206\210\004H\165\208\2014\234Q\142")); ("Misc", ("*\026\026\234c\191\131\161\\\203\183\012O\252\153\198")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Load_path", ("\012@\228l\230\164S\172h\1726X\020\252o}")); ("Includemod", ("\1585\235\182\002\235\153 ,%\138\218\132\188I\167")); ("Includecore", (";Q E\158\170\208\130\1750\136E\012\1798|")); ("Identifiable", ("\004F\207\014\158GU\001\184\214\187%/#;\211")); ("Ident", ("\b9;!\187.\220\163(x\b\174\\\223\020\004")); ("Errortrace", ("\238\196yV6<x\\\13126\144\141\000~\145")); ("Env", ("\021\n\181\142x\b\169j\227\"\017\248*\178\245\223")); ("Diffing_with_keys", ("\198\208\133q\023\211C\197\210Q\023\001#o\193H")); ("Diffing", ("\027\205S\011\160W\184\023\131\250\1571\177\026\005Q")); ("Ctype", ("\027\133EB\030\017\186iN]k}\251\199\182\161")); ("Cmi_format", ("6\177\bU\139\"\023\152=\249\135\174\b\011Cg")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Build_path_prefix_map", ("y\028\167\207D\220\198\216\011\208\172\149\2416\bc")); ("Btype", ("z\012z\142\133\002\232\237\203U\142l\165\022\2209")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216"))], [(0)])
val report_error : Env.t -> loc:Location.t -> error -> Location.error

exception CannotCoerceTo of string
module Value :
  sig
    type t = Geninterp.Val.t
    val of_constr : EConstr.constr -> t
    val to_constr : t -> EConstr.constr option
    val of_uconstr : Ltac_pretype.closed_glob_constr -> t
    val to_uconstr : t -> Ltac_pretype.closed_glob_constr option
    val of_int : int -> t
    val to_int : t -> int option
    val of_ident : Names.Id.t -> t
    val to_ident : t -> Names.Id.t option
    val to_list : t -> t list option
    val to_option : t -> t option option
    val to_pair : t -> (t * t) option
    val cast :
      'a Genarg.typed_abstract_argument_type -> Geninterp.Val.t -> 'a
  end
val coerce_to_constr_context : Value.t -> Constr_matching.context
val coerce_var_to_ident :
  bool -> Environ.env -> Evd.evar_map -> Value.t -> Names.Id.t
val coerce_to_ident_not_fresh : Evd.evar_map -> Value.t -> Names.Id.t
val coerce_to_intro_pattern :
  Evd.evar_map ->
  Value.t -> Tactypes.delayed_open_constr Tactypes.intro_pattern_expr
val coerce_to_intro_pattern_naming :
  Evd.evar_map -> Value.t -> Namegen.intro_pattern_naming_expr
val coerce_to_hint_base : Value.t -> string
val coerce_to_int : Value.t -> int
val coerce_to_constr :
  Environ.env -> Value.t -> Ltac_pretype.constr_under_binders
val coerce_to_uconstr : Value.t -> Ltac_pretype.closed_glob_constr
val coerce_to_closed_constr : Environ.env -> Value.t -> EConstr.constr
val coerce_to_evaluable_ref :
  Environ.env -> Evd.evar_map -> Value.t -> Tacred.evaluable_global_reference
val coerce_to_constr_list : Environ.env -> Value.t -> EConstr.constr list
val coerce_to_intro_pattern_list :
  ?loc:Loc.t -> Evd.evar_map -> Value.t -> Ltac_plugin.Tacexpr.intro_patterns
val coerce_to_hyp : Environ.env -> Evd.evar_map -> Value.t -> Names.Id.t
val coerce_to_hyp_list :
  Environ.env -> Evd.evar_map -> Value.t -> Names.Id.t list
val coerce_to_reference : Evd.evar_map -> Value.t -> Names.GlobRef.t
val coerce_to_quantified_hypothesis :
  Evd.evar_map -> Value.t -> Tactypes.quantified_hypothesis
val coerce_to_decl_or_quant_hyp :
  Evd.evar_map -> Value.t -> Tactypes.quantified_hypothesis
val coerce_to_int_or_var_list : Value.t -> int Locus.or_var list
val wit_constr_context :
  (Util.Empty.t, Util.Empty.t, Constr_matching.context) Genarg.genarg_type
val wit_constr_under_binders :
  (Util.Empty.t, Util.Empty.t, Ltac_pretype.constr_under_binders)
  Genarg.genarg_type
val error_ltac_variable :
  ?loc:Loc.t ->
  Names.Id.t ->
  (Environ.env * Evd.evar_map) option -> Value.t -> string -> 'a
type appl =
    UnnamedAppl
  | GlbAppl of (Names.KerName.t * Geninterp.Val.t list) list
type tacvalue =
    VFun of appl * Ltac_plugin.Tacexpr.ltac_trace * Loc.t option *
      Geninterp.Val.t Names.Id.Map.t * Names.Name.t list *
      Ltac_plugin.Tacexpr.glob_tactic_expr
  | VRec of Geninterp.Val.t Names.Id.Map.t ref *
      Ltac_plugin.Tacexpr.glob_tactic_expr
val wit_tacvalue : (Util.Empty.t, tacvalue, tacvalue) Genarg.genarg_type
("DEBUG:rule", [Tag2 (("CannotCoerceTo", 1518), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -158)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Ltac_plugin__Taccoerce", 0)), 2, 0); Tag3 (("Value", 1519), 0, (Tag1 ([Tag1 (("t", 1546), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Geninterp")), "Val"), "t"), 0, (0)), 100000000, 0, -208)), 0, 0, 0, 0, (("plugins/ltac/taccoerce.mli", 34, 1254, 1256), ("plugins/ltac/taccoerce.mli", 34, 1254, 1270), 0), 0, 0, 0, Tag1 ("Ltac_plugin__Taccoerce", 1)), 1, 0); (("of_constr", 1547), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -207), (Tag3 ((("t", 1546)), 0, (0)), 100000000, 0, -206), 0), 100000000, 0, -205), 0, (("plugins/ltac/taccoerce.mli", 36, 1272, 1274), ("plugins/ltac/taccoerce.mli", 36, 1272, 1301), 0), 0, Tag1 ("Ltac_plugin__Taccoerce", 2)), 0); (("to_constr", 1548), ((Tag1 (0, (Tag3 ((("t", 1546)), 0, (0)), 100000000, 0, -204), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -203)], (0)), 100000000, 0, -202), 0), 100000000, 0, -201), 0, (("plugins/ltac/taccoerce.mli", 37, 1302, 1304), ("plugins/ltac/taccoerce.mli", 37, 1302, 1338), 0), 0, Tag1 ("Ltac_plugin__Taccoerce", 3)), 0); (("of_uconstr", 1549), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ltac_pretype")), "closed_glob_constr"), 0, (0)), 100000000, 0, -200), (Tag3 ((("t", 1546)), 0, (0)), 100000000, 0, -199), 0), 100000000, 0, -198), 0, (("plugins/ltac/taccoerce.mli", 38, 1339, 1341), ("plugins/ltac/taccoerce.mli", 38, 1339, 1394), 0), 0, Tag1 ("Ltac_plugin__Taccoerce", 4)), 0); (("to_uconstr", 1550), ((Tag1 (0, (Tag3 ((("t", 1546)), 0, (0)), 100000000, 0, -197), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Ltac_pretype")), "closed_glob_constr"), 0, (0)), 100000000, 0, -196)], (0)), 100000000, 0, -195), 0), 100000000, 0, -194), 0, (("plugins/ltac/taccoerce.mli", 39, 1395, 1397), ("plugins/ltac/taccoerce.mli", 39, 1395, 1457), 0), 0, Tag1 ("Ltac_plugin__Taccoerce", 5)), 0); (("of_int", 1551), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -193), (Tag3 ((("t", 1546)), 0, (0)), 100000000, 0, -192), 0), 100000000, 0, -191), 0, (("plugins/ltac/taccoerce.mli", 40, 1458, 1460), ("plugins/ltac/taccoerce.mli", 40, 1458, 1481), 0), 0, Tag1 ("Ltac_plugin__Taccoerce", 6)), 0); (("to_int", 1552), ((Tag1 (0, (Tag3 ((("t", 1546)), 0, (0)), 100000000, 0, -190), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -189)], (0)), 100000000, 0, -188), 0), 100000000, 0, -187), 0, (("plugins/ltac/taccoerce.mli", 41, 1482, 1484), ("plugins/ltac/taccoerce.mli", 41, 1482, 1512), 0), 0, Tag1 ("Ltac_plugin__Taccoerce", 7)), 0); (("of_ident", 1553), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -186), (Tag3 ((("t", 1546)), 0, (0)), 100000000, 0, -185), 0), 100000000, 0, -184), 0, (("plugins/ltac/taccoerce.mli", 42, 1513, 1515), ("plugins/ltac/taccoerce.mli", 42, 1513, 1539), 0), 0, Tag1 ("Ltac_plugin__Taccoerce", 8)), 0); (("to_ident", 1554), ((Tag1 (0, (Tag3 ((("t", 1546)), 0, (0)), 100000000, 0, -183), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -182)], (0)), 100000000, 0, -181), 0), 100000000, 0, -180), 0, (("plugins/ltac/taccoerce.mli", 43, 1540, 1542), ("plugins/ltac/taccoerce.mli", 43, 1540, 1573), 0), 0, Tag1 ("Ltac_plugin__Taccoerce", 9)), 0); (("to_list", 1555), ((Tag1 (0, (Tag3 ((("t", 1546)), 0, (0)), 100000000, 0, -179), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 1546)), 0, (0)), 100000000, 0, -178)], (0)), 100000000, 0, -177)], (0)), 100000000, 0, -176), 0), 100000000, 0, -175), 0, (("plugins/ltac/taccoerce.mli", 44, 1574, 1576), ("plugins/ltac/taccoerce.mli", 44, 1574, 1608), 0), 0, Tag1 ("Ltac_plugin__Taccoerce", 10)), 0); (("to_option", 1556), ((Tag1 (0, (Tag3 ((("t", 1546)), 0, (0)), 100000000, 0, -174), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 1546)), 0, (0)), 100000000, 0, -173)], (0)), 100000000, 0, -172)], (0)), 100000000, 0, -171), 0), 100000000, 0, -170), 0, (("plugins/ltac/taccoerce.mli", 45, 1609, 1611), ("plugins/ltac/taccoerce.mli", 45, 1609, 1647), 0), 0, Tag1 ("Ltac_plugin__Taccoerce", 11)), 0); (("to_pair", 1557), ((Tag1 (0, (Tag3 ((("t", 1546)), 0, (0)), 100000000, 0, -169), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("t", 1546)), 0, (0)), 100000000, 0, -167); (Tag3 ((("t", 1546)), 0, (0)), 100000000, 0, -168)]), 100000000, 0, -166)], (0)), 100000000, 0, -165), 0), 100000000, 0, -164), 0, (("plugins/ltac/taccoerce.mli", 46, 1648, 1650), ("plugins/ltac/taccoerce.mli", 46, 1648, 1683), 0), 0, Tag1 ("Ltac_plugin__Taccoerce", 12)), 0); (("cast", 1558), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Genarg")), "typed_abstract_argument_type"), [((("a")), 100000000, 0, -161)], (0)), 100000000, 0, -163), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Geninterp")), "Val"), "t"), 0, (0)), 100000000, 0, -162), ((("a")), 100000000, 0, -161), 0), 100000000, 0, -160), 0), 100000000, 0, -159), 0, (("plugins/ltac/taccoerce.mli", 47, 1684, 1686), ("plugins/ltac/taccoerce.mli", 47, 1684, 1753), 0), 0, Tag1 ("Ltac_plugin__Taccoerce", 13)), 0)]), 0, (("plugins/ltac/taccoerce.mli", 32, 1235, 1235), ("plugins/ltac/taccoerce.mli", 48, 1754, 1757), 0), Tag1 ("Ltac_plugin__Taccoerce", 14)), 0, 0); (("coerce_to_constr_context", 1520), ((Tag1 (0, (Tag3 (Tag1 ((("Value", 1519)), "t"), 0, (0)), 100000000, 0, -157), (Tag3 (Tag1 ((Tag2 ("Constr_matching")), "context"), 0, (0)), 100000000, 0, -156), 0), 100000000, 0, -155), 0, (("plugins/ltac/taccoerce.mli", 52, 1790, 1790), ("plugins/ltac/taccoerce.mli", 52, 1790, 1855), 0), 0, Tag1 ("Ltac_plugin__Taccoerce", 15)), 0); (("coerce_var_to_ident", 1521), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -154), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -153), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -152), (Tag1 (0, (Tag3 (Tag1 ((("Value", 1519)), "t"), 0, (0)), 100000000, 0, -151), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -150), 0), 100000000, 0, -149), 0), 100000000, 0, -148), 0), 100000000, 0, -147), 0), 100000000, 0, -146), 0, (("plugins/ltac/taccoerce.mli", 54, 1857, 1857), ("plugins/ltac/taccoerce.mli", 54, 1857, 1937), 0), 0, Tag1 ("Ltac_plugin__Taccoerce", 16)), 0); (("coerce_to_ident_not_fresh", 1522), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -145), (Tag1 (0, (Tag3 (Tag1 ((("Value", 1519)), "t"), 0, (0)), 100000000, 0, -144), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -143), 0), 100000000, 0, -142), 0), 100000000, 0, -141), 0, (("plugins/ltac/taccoerce.mli", 56, 1939, 1939), ("plugins/ltac/taccoerce.mli", 56, 1939, 2002), 0), 0, Tag1 ("Ltac_plugin__Taccoerce", 17)), 0); (("coerce_to_intro_pattern", 1523), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -140), (Tag1 (0, (Tag3 (Tag1 ((("Value", 1519)), "t"), 0, (0)), 100000000, 0, -139), (Tag3 (Tag1 ((Tag2 ("Tactypes")), "intro_pattern_expr"), [(Tag3 (Tag1 ((Tag2 ("Tactypes")), "delayed_open_constr"), 0, (0)), 100000000, 0, -138)], (0)), 100000000, 0, -137), 0), 100000000, 0, -136), 0), 100000000, 0, -135), 0, (("plugins/ltac/taccoerce.mli", 58, 2004, 2004), ("plugins/ltac/taccoerce.mli", 58, 2004, 2099), 0), 0, Tag1 ("Ltac_plugin__Taccoerce", 18)), 0); (("coerce_to_intro_pattern_naming", 1524), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -134), (Tag1 (0, (Tag3 (Tag1 ((("Value", 1519)), "t"), 0, (0)), 100000000, 0, -133), (Tag3 (Tag1 ((Tag2 ("Namegen")), "intro_pattern_naming_expr"), 0, (0)), 100000000, 0, -132), 0), 100000000, 0, -131), 0), 100000000, 0, -130), 0, (("plugins/ltac/taccoerce.mli", 60, 2101, 2101), ("plugins/ltac/taccoerce.mli", 61, 2138, 2200), 0), 0, Tag1 ("Ltac_plugin__Taccoerce", 19)), 0); (("coerce_to_hint_base", 1525), ((Tag1 (0, (Tag3 (Tag1 ((("Value", 1519)), "t"), 0, (0)), 100000000, 0, -129), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -128), 0), 100000000, 0, -127), 0, (("plugins/ltac/taccoerce.mli", 63, 2202, 2202), ("plugins/ltac/taccoerce.mli", 63, 2202, 2245), 0), 0, Tag1 ("Ltac_plugin__Taccoerce", 20)), 0); (("coerce_to_int", 1526), ((Tag1 (0, (Tag3 (Tag1 ((("Value", 1519)), "t"), 0, (0)), 100000000, 0, -126), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -125), 0), 100000000, 0, -124), 0, (("plugins/ltac/taccoerce.mli", 65, 2247, 2247), ("plugins/ltac/taccoerce.mli", 65, 2247, 2281), 0), 0, Tag1 ("Ltac_plugin__Taccoerce", 21)), 0); (("coerce_to_constr", 1527), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -123), (Tag1 (0, (Tag3 (Tag1 ((("Value", 1519)), "t"), 0, (0)), 100000000, 0, -122), (Tag3 (Tag1 ((Tag2 ("Ltac_pretype")), "constr_under_binders"), 0, (0)), 100000000, 0, -121), 0), 100000000, 0, -120), 0), 100000000, 0, -119), 0, (("plugins/ltac/taccoerce.mli", 67, 2283, 2283), ("plugins/ltac/taccoerce.mli", 67, 2283, 2365), 0), 0, Tag1 ("Ltac_plugin__Taccoerce", 22)), 0); (("coerce_to_uconstr", 1528), ((Tag1 (0, (Tag3 (Tag1 ((("Value", 1519)), "t"), 0, (0)), 100000000, 0, -118), (Tag3 (Tag1 ((Tag2 ("Ltac_pretype")), "closed_glob_constr"), 0, (0)), 100000000, 0, -117), 0), 100000000, 0, -116), 0, (("plugins/ltac/taccoerce.mli", 69, 2367, 2367), ("plugins/ltac/taccoerce.mli", 69, 2367, 2433), 0), 0, Tag1 ("Ltac_plugin__Taccoerce", 23)), 0); (("coerce_to_closed_constr", 1529), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -115), (Tag1 (0, (Tag3 (Tag1 ((("Value", 1519)), "t"), 0, (0)), 100000000, 0, -114), (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -113), 0), 100000000, 0, -112), 0), 100000000, 0, -111), 0, (("plugins/ltac/taccoerce.mli", 71, 2435, 2435), ("plugins/ltac/taccoerce.mli", 71, 2435, 2497), 0), 0, Tag1 ("Ltac_plugin__Taccoerce", 24)), 0); (("coerce_to_evaluable_ref", 1530), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -110), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -109), (Tag1 (0, (Tag3 (Tag1 ((("Value", 1519)), "t"), 0, (0)), 100000000, 0, -108), (Tag3 (Tag1 ((Tag2 ("Tacred")), "evaluable_global_reference"), 0, (0)), 100000000, 0, -107), 0), 100000000, 0, -106), 0), 100000000, 0, -105), 0), 100000000, 0, -104), 0, (("plugins/ltac/taccoerce.mli", 73, 2499, 2499), ("plugins/ltac/taccoerce.mli", 74, 2529, 2606), 0), 0, Tag1 ("Ltac_plugin__Taccoerce", 25)), 0); (("coerce_to_constr_list", 1531), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -103), (Tag1 (0, (Tag3 (Tag1 ((("Value", 1519)), "t"), 0, (0)), 100000000, 0, -102), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -101)], (0)), 100000000, 0, -100), 0), 100000000, 0, -99), 0), 100000000, 0, -98), 0, (("plugins/ltac/taccoerce.mli", 76, 2608, 2608), ("plugins/ltac/taccoerce.mli", 76, 2608, 2673), 0), 0, Tag1 ("Ltac_plugin__Taccoerce", 26)), 0); (("coerce_to_intro_pattern_list", 1532), ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -97)], (0)), 100000000, 0, -96), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -95), (Tag1 (0, (Tag3 (Tag1 ((("Value", 1519)), "t"), 0, (0)), 100000000, 0, -94), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac_plugin")), "Tacexpr"), "intro_patterns"), 0, (0)), 100000000, 0, -93), 0), 100000000, 0, -92), 0), 100000000, 0, -91), 0), 100000000, 0, -90), 0, (("plugins/ltac/taccoerce.mli", 78, 2675, 2675), ("plugins/ltac/taccoerce.mli", 79, 2710, 2775), 0), 0, Tag1 ("Ltac_plugin__Taccoerce", 28)), 0); (("coerce_to_hyp", 1533), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -89), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -88), (Tag1 (0, (Tag3 (Tag1 ((("Value", 1519)), "t"), 0, (0)), 100000000, 0, -87), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -86), 0), 100000000, 0, -85), 0), 100000000, 0, -84), 0), 100000000, 0, -83), 0, (("plugins/ltac/taccoerce.mli", 81, 2777, 2777), ("plugins/ltac/taccoerce.mli", 81, 2777, 2843), 0), 0, Tag1 ("Ltac_plugin__Taccoerce", 29)), 0); (("coerce_to_hyp_list", 1534), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -82), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -81), (Tag1 (0, (Tag3 (Tag1 ((("Value", 1519)), "t"), 0, (0)), 100000000, 0, -80), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -79)], (0)), 100000000, 0, -78), 0), 100000000, 0, -77), 0), 100000000, 0, -76), 0), 100000000, 0, -75), 0, (("plugins/ltac/taccoerce.mli", 83, 2845, 2845), ("plugins/ltac/taccoerce.mli", 83, 2845, 2921), 0), 0, Tag1 ("Ltac_plugin__Taccoerce", 30)), 0); (("coerce_to_reference", 1535), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -74), (Tag1 (0, (Tag3 (Tag1 ((("Value", 1519)), "t"), 0, (0)), 100000000, 0, -73), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -72), 0), 100000000, 0, -71), 0), 100000000, 0, -70), 0, (("plugins/ltac/taccoerce.mli", 85, 2923, 2923), ("plugins/ltac/taccoerce.mli", 85, 2923, 2985), 0), 0, Tag1 ("Ltac_plugin__Taccoerce", 31)), 0); (("coerce_to_quantified_hypothesis", 1536), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -69), (Tag1 (0, (Tag3 (Tag1 ((("Value", 1519)), "t"), 0, (0)), 100000000, 0, -68), (Tag3 (Tag1 ((Tag2 ("Tactypes")), "quantified_hypothesis"), 0, (0)), 100000000, 0, -67), 0), 100000000, 0, -66), 0), 100000000, 0, -65), 0, (("plugins/ltac/taccoerce.mli", 87, 2987, 2987), ("plugins/ltac/taccoerce.mli", 87, 2987, 3073), 0), 0, Tag1 ("Ltac_plugin__Taccoerce", 32)), 0); (("coerce_to_decl_or_quant_hyp", 1537), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -64), (Tag1 (0, (Tag3 (Tag1 ((("Value", 1519)), "t"), 0, (0)), 100000000, 0, -63), (Tag3 (Tag1 ((Tag2 ("Tactypes")), "quantified_hypothesis"), 0, (0)), 100000000, 0, -62), 0), 100000000, 0, -61), 0), 100000000, 0, -60), 0, (("plugins/ltac/taccoerce.mli", 89, 3075, 3075), ("plugins/ltac/taccoerce.mli", 89, 3075, 3157), 0), 0, Tag1 ("Ltac_plugin__Taccoerce", 33)), 0); (("coerce_to_int_or_var_list", 1538), ((Tag1 (0, (Tag3 (Tag1 ((("Value", 1519)), "t"), 0, (0)), 100000000, 0, -59), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Locus")), "or_var"), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -58)], (0)), 100000000, 0, -57)], (0)), 100000000, 0, -56), 0), 100000000, 0, -55), 0, (("plugins/ltac/taccoerce.mli", 91, 3159, 3159), ("plugins/ltac/taccoerce.mli", 91, 3159, 3223), 0), 0, Tag1 ("Ltac_plugin__Taccoerce", 34)), 0); (("wit_constr_context", 1539), ((Tag3 (Tag1 ((Tag2 ("Genarg")), "genarg_type"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Util")), "Empty"), "t"), 0, (0)), 100000000, 0, -52); (Tag3 (Tag1 (Tag1 ((Tag2 ("Util")), "Empty"), "t"), 0, (0)), 100000000, 0, -53); (Tag3 (Tag1 ((Tag2 ("Constr_matching")), "context"), 0, (0)), 100000000, 0, -54)], (0)), 100000000, 0, -51), 0, (("plugins/ltac/taccoerce.mli", 95, 3263, 3263), ("plugins/ltac/taccoerce.mli", 95, 3263, 3343), 0), 0, Tag1 ("Ltac_plugin__Taccoerce", 35)), 0); (("wit_constr_under_binders", 1540), ((Tag3 (Tag1 ((Tag2 ("Genarg")), "genarg_type"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Util")), "Empty"), "t"), 0, (0)), 100000000, 0, -48); (Tag3 (Tag1 (Tag1 ((Tag2 ("Util")), "Empty"), "t"), 0, (0)), 100000000, 0, -49); (Tag3 (Tag1 ((Tag2 ("Ltac_pretype")), "constr_under_binders"), 0, (0)), 100000000, 0, -50)], (0)), 100000000, 0, -47), 0, (("plugins/ltac/taccoerce.mli", 97, 3345, 3345), ("plugins/ltac/taccoerce.mli", 97, 3345, 3441), 0), 0, Tag1 ("Ltac_plugin__Taccoerce", 36)), 0); (("error_ltac_variable", 1541), ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -46)], (0)), 100000000, 0, -45), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -44), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -42); (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -43)]), 100000000, 0, -41)], (0)), 100000000, 0, -40), (Tag1 (0, (Tag3 (Tag1 ((("Value", 1519)), "t"), 0, (0)), 100000000, 0, -39), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -38), ((("a")), 100000000, 0, -37), 0), 100000000, 0, -36), 0), 100000000, 0, -35), 0), 100000000, 0, -34), 0), 100000000, 0, -33), 0), 100000000, 0, -32), 0, (("plugins/ltac/taccoerce.mli", 99, 3443, 3443), ("plugins/ltac/taccoerce.mli", 100, 3491, 3555), 0), 0, Tag1 ("Ltac_plugin__Taccoerce", 37)), 0); Tag1 (("appl", 1542), (0, 0, Tag1 ([(("UnnamedAppl", 1314), (0), 0, (("plugins/ltac/taccoerce.mli", 104, 3622, 3624), ("plugins/ltac/taccoerce.mli", 104, 3622, 3637), 0), 0, Tag1 ("Ltac_plugin__Taccoerce", 39)); (("GlbAppl", 1315), ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "KerName"), "t"), 0, (0)), 100000000, 0, -29); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Geninterp")), "Val"), "t"), 0, (0)), 100000000, 0, -31)], (0)), 100000000, 0, -30)]), 100000000, 0, -28)], (0)), 100000000, 0, -27)]), 0, (("plugins/ltac/taccoerce.mli", 105, 3690, 3692), ("plugins/ltac/taccoerce.mli", 105, 3690, 3740), 0), 0, Tag1 ("Ltac_plugin__Taccoerce", 40))], 0), 1, 0, 0, 0, 0, 0, (("plugins/ltac/taccoerce.mli", 103, 3610, 3610), ("plugins/ltac/taccoerce.mli", 105, 3690, 3740), 0), 0, 0, 0, Tag1 ("Ltac_plugin__Taccoerce", 38)), 1, 0); Tag1 (("tacvalue", 1543), (0, 0, Tag1 ([(("VFun", 1329), ([(Tag3 ((("appl", 1542)), 0, (0)), 100000000, 0, -14); (Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac_plugin")), "Tacexpr"), "ltac_trace"), 0, (0)), 100000000, 0, -15); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -17)], (0)), 100000000, 0, -16); (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "Map"), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Geninterp")), "Val"), "t"), 0, (0)), 100000000, 0, -19)], (0)), 100000000, 0, -18); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -21)], (0)), 100000000, 0, -20); (Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac_plugin")), "Tacexpr"), "glob_tactic_expr"), 0, (0)), 100000000, 0, -22)]), 0, (("plugins/ltac/taccoerce.mli", 109, 3825, 3827), ("plugins/ltac/taccoerce.mli", 110, 3897, 3941), 0), 0, Tag1 ("Ltac_plugin__Taccoerce", 42)); (("VRec", 1384), ([(Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "Map"), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Geninterp")), "Val"), "t"), 0, (0)), 100000000, 0, -25)], (0)), 100000000, 0, -24)], (0)), 100000000, 0, -23); (Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac_plugin")), "Tacexpr"), "glob_tactic_expr"), 0, (0)), 100000000, 0, -26)]), 0, (("plugins/ltac/taccoerce.mli", 111, 3942, 3944), ("plugins/ltac/taccoerce.mli", 111, 3942, 3999), 0), 0, Tag1 ("Ltac_plugin__Taccoerce", 43))], 0), 1, 0, 0, 0, 0, 0, (("plugins/ltac/taccoerce.mli", 108, 3809, 3809), ("plugins/ltac/taccoerce.mli", 111, 3942, 3999), 0), 0, 0, 0, Tag1 ("Ltac_plugin__Taccoerce", 41)), 1, 0); (("wit_tacvalue", 1544), ((Tag3 (Tag1 ((Tag2 ("Genarg")), "genarg_type"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Util")), "Empty"), "t"), 0, (0)), 100000000, 0, -11); (Tag3 ((("tacvalue", 1543)), 0, (0)), 100000000, 0, -12); (Tag3 ((("tacvalue", 1543)), 0, (0)), 100000000, 0, -13)], (0)), 100000000, 0, -10), 0, (("plugins/ltac/taccoerce.mli", 113, 4001, 4001), ("plugins/ltac/taccoerce.mli", 113, 4001, 4068), 0), 0, Tag1 ("Ltac_plugin__Taccoerce", 44)), 0); (("pr_value", 1545), ((Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -8); (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -9)]), 100000000, 0, -7)], (0)), 100000000, 0, -6), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Geninterp")), "Val"), "t"), 0, (0)), 100000000, 0, -5), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("plugins/ltac/taccoerce.mli", 115, 4070, 4070), ("plugins/ltac/taccoerce.mli", 115, 4070, 4147), 0), 0, Tag1 ("Ltac_plugin__Taccoerce", 45)), 0)], "Ltac_plugin__Taccoerce", [("Ltac_plugin__Taccoerce", ("\018pU.\015\144\128l\021\235\206_\004\233f\248")); ("Z", ("\253\196\2168\027\199O\134\220\218\031'\1484\233o")); ("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Vmemitcodes", ("wCd\138\165\158DD\241gH\236.\210\197\247")); ("Vmbytecodes", ("\025\021\151\137Dx\149W\236+[\143f\208\160\016")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Unix", (":B72R\011\005Sj\189)\011\239PH\254")); ("UnivSubst", ("\190qu\031mc\130\181\003G]\132\"\219m)")); ("UnivProblem", ("6'\161\018\181\001.\253\000\141a6\171\1727\155")); ("UnivNames", ("%\151_\209%+JM$n\001\232\194n\178N")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Unification", ("\017\027\157=\255\1914L\020\213h\154.\219\005\170")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UState", ("SD\203\215|\136\n\251\239\208\148\215C\n\167\005")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("Type_errors", ("7\157\162-\214M\206\196\228\191\005v\134\177\144\134")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Tactypes", ("\143E\135*\195\151\144H\151M\011($\017\159\203")); ("Tactics", ("7\154?u\169\241\190R\245\187\153\020GE\029\215")); ("Tacred", ("\133d\143\1310z\030\237\232\002\001\025\147\140\215:")); ("Summary", ("\148G\135\226\024L3\246\021\028U\146\164`\253\250")); ("Store", ("/dT\252\145\179pq\216{\181\206\190K+U")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Random", ("\020\005Xq\171\026\218\152X\135\254\023\133zK\200")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("Section", ("\245\207\b\021\142v=\155#w\246}\"4b\006")); ("Safe_typing", (")\250?\164\145\132\241\127\186\152h+\145\"\237l")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("Reductionops", ("\179\023P\218\146Uh\014IS\196C\031q~#")); ("Redexpr", ("\181\250o\134\007\001\242+$\149)\204\226\"\0240")); ("Range", ("\218\130\001r\237\r\144\171\164\021l\155\196\143sg")); ("Proofview_monad", ("\218\196\189S\147\216\129\221\231\224v\228O\024*\239")); ("Proofview", ("\245\140U\027\236\199\199&\242\156\199YG\250tA")); ("Primred", ("\158G\192\182\224\196\144*\174y_E\165\012\137C")); ("Pretyping", ("\151\160\191\149\149Ff\195\171g\189\156\r\166n\189")); ("Pretype_errors", ("\155\229\201\176\163\234\203C\127\227\141\174j\199\200H")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Pattern", ("\195C\140Wb=\022\222\208\227^K\003\020\215X")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("NumTok", ("vd\023^\251\244B\166\145'\156\196-0\027\169")); ("Notation_term", ("5\002\017\217b\193nc>\239\239\237\244\031\173?")); ("Nativevalues", ("8:\007\025e\226c,\001\171\146#l\210\171\152")); ("Nativelib", ("V\239\205Y1\147E:,\176\196Hy\1483|")); ("Nativecode", ("\190\185\255\006m\012\210\163\138Rz\247\15283\183")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Namegen", ("\187\222\224T\255\020\1808-\212*\164\131\177\157x")); ("Monad", ("\244\171T\157\194p\187\160\149\195{\132\222\020\253\148")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Ltac_pretype", ("\224\"\167\018i:U\172>\188\128$\r\252\020T")); ("Ltac_plugin__Tacexpr", ("lM\188\244SSB<\139\160F_\240|\128[")); ("Ltac_plugin", ("\1495\201\148\025F\172$\016P\190\1821b4-")); ("Logic_monad", ("\130\157\160Q\163vQ\137\184\2242\209\128\024\220i")); ("Logic", ("\214\234\234\223\014\197\147\165\158f.$\163\164\245Z")); ("Locus", ("_\002\003W\246\181\225\242Uf\139\226\176\174\192I")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Libnames", ("fp\0255\167\162\209\153\137\161\169#\246\193\003\198")); ("Inv", ("\249\160_\012\n1\202C\204\171\024\017$\025\226\138")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Ind_tables", ("\1586xu\131C\135\176\222\242\178r\031D,\196")); ("IStream", ("#\199\192\148>\207Y\174\203(:\b5\177]\170")); ("Hook", ("\183\194\223\003\155\169',\187\240a;E\b\1396")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Gramlib__Stream", ("\248\\H\205_76\253\136\146\200\031\165\021=t")); ("Gramlib", ("\154\143\210e\021i\246\176\224\194\220\217\007\145\139A")); ("Goal_select", ("\235$\175\023t\178\194.Ivlz\005\211\173\n")); ("Glob_term", ("\165=a\227\160\153.\021_$\232\209T\236\153O")); ("GlobEnv", ("(\152\019ok\006R\183\193\145\137\133<\171\005\231")); ("Genredexpr", ("rz\204\143\007`VgI\195P\168sO\198\012")); ("Genlambda", ("\170}\024\241\141\222\136S\169\219\2212i\134KI")); ("Geninterp", ("2S\151\191\189\159\004\188;\224d\199|U\004\028")); ("Genintern", ("\152Ac\019=n\235\197\141\224T\162\192\148eg")); ("Genarg", ("\1434\015\001\152\196\005s\156\136\195\185\247\b3\t")); ("Ftactic", ("K\172\205\128\241\162\160\201\202\1561o\180L\206:")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evd", ("\211\205p\193\216\129r\006\239oN\142ar\196\175")); ("Evarutil", ("\005\175\132e\164O\223svi \252\232\138\022\137")); ("Evarsolve", ("\000&\228\016}j\199\t\229\173\127\024\219\199\184\178")); ("Evardefine", ("\178\167R\199\158\242\001Y\215<\151\020\206\153\227\019")); ("Evar_kinds", ("\023L\186\132\218}\254\221\185\198\220\200h\003{\021")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Equality", ("M\157\199R]=\020;\029s@\210\1789y\163")); ("Environ", ("\171b\1579\229<\003Z\147IL\225X\254\182\204")); ("Entries", ("\172\201\198\221Ap\027_{\174\141C\021\";p")); ("EConstr", ("\201aW\156\157;N\004\201V\208\006L\166\211)")); ("Dyn", ("\131z`\205v\2306\007x\027&K.?;\169")); ("Declarations", ("\239\137n\019\030w$\182\166z^{\b\206\163\175")); ("DAst", ("\224/\200)\007\184ni\134\b\139\204\241\005w\212")); ("Coqlib", ("'\226\164\143\129\221\158\224\247\247\160\190~\171\191\198")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Conversion", ("\158\150&\195M\tv\127|\029\158RRK\211A")); ("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constrexpr", ("p'r\245\184chL\183\249\"\213]\1741\237")); ("Constr_matching", ("\135\145\197fVk`\131U\213\181\222\1666\133\248")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CUnix", ("\140Zl\153\167\011J\015\005|th\247OTu")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CEphemeron", ("\204I\179-\206(x4\173\229\250\001PkH\151")); ("CDebug", ("^4\210p7\239!3\138\138\213?\239`\250\157")); ("CClosure", ("\167\b\022\241V-\r\253\b\002\000j]\223%\142")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])
val pr_value : (Environ.env * Evd.evar_map) option -> Geninterp.Val.t -> Pp.t

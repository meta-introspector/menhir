type 'constr pfix_guard_error =
    NotEnoughAbstractionInFixBody
  | RecursionNotOnInductiveType of 'constr
  | RecursionOnIllegalTerm of int * (Environ.env * 'constr) *
      (int list * int list) Lazy.t
  | NotEnoughArgumentsForFixCall of int
  | FixpointOnIrrelevantInductive
type 'constr pcofix_guard_error =
    CodomainNotInductiveType of 'constr
  | NestedRecursiveOccurrences
  | UnguardedRecursiveCall of 'constr
  | RecCallInTypeOfAbstraction of 'constr
  | RecCallInNonRecArgOfConstructor of 'constr
  | RecCallInTypeOfDef of 'constr
  | RecCallInCaseFun of 'constr
  | RecCallInCaseArg of 'constr
  | RecCallInCasePred of 'constr
  | NotGuardedForm of 'constr
  | ReturnPredicateNotCoInductive of 'constr
type 'constr pguard_error =
    FixGuardError of 'constr pfix_guard_error
  | CoFixGuardError of 'constr pcofix_guard_error
type fix_guard_error = Constr.constr pfix_guard_error
type cofix_guard_error = Constr.constr pcofix_guard_error
type guard_error = Constr.constr pguard_error
type ('constr, 'types) pcant_apply_bad_type =
    (int * 'constr * 'constr) * ('constr, 'types) Environ.punsafe_judgment *
    ('constr, 'types) Environ.punsafe_judgment array
type ('constr, 'types) ptype_error =
    UnboundRel of int
  | UnboundVar of Names.variable
  | NotAType of ('constr, 'types) Environ.punsafe_judgment
  | BadAssumption of ('constr, 'types) Environ.punsafe_judgment
  | ReferenceVariables of Names.Id.t * Names.GlobRef.t
  | ElimArity of Constr.pinductive * 'constr *
      (('constr, 'types) Environ.punsafe_judgment * Sorts.family *
       Sorts.family * Sorts.family)
      option
  | CaseNotInductive of ('constr, 'types) Environ.punsafe_judgment
  | CaseOnPrivateInd of Names.inductive
  | WrongCaseInfo of Constr.pinductive * Constr.case_info
  | NumberBranches of ('constr, 'types) Environ.punsafe_judgment * int
  | IllFormedBranch of 'constr * Constr.pconstructor * 'constr * 'constr
  | Generalization of (Names.Name.t * 'types) *
      ('constr, 'types) Environ.punsafe_judgment
  | ActualType of ('constr, 'types) Environ.punsafe_judgment * 'types
  | IncorrectPrimitive of
      (CPrimitives.op_or_type, 'types) Environ.punsafe_judgment * 'types
  | CantApplyBadType of ('constr, 'types) pcant_apply_bad_type
  | CantApplyNonFunctional of ('constr, 'types) Environ.punsafe_judgment *
      ('constr, 'types) Environ.punsafe_judgment array
  | IllFormedRecBody of 'constr pguard_error *
      Names.Name.t Context.binder_annot array * int * Environ.env *
      ('constr, 'types) Environ.punsafe_judgment array
  | IllTypedRecBody of int * Names.Name.t Context.binder_annot array *
      ('constr, 'types) Environ.punsafe_judgment array * 'types array
  | UnsatisfiedConstraints of Univ.Constraints.t
  | UndeclaredUniverse of Univ.Level.t
  | DisallowedSProp
  | BadBinderRelevance of Sorts.relevance *
      ('constr, 'types) Context.Rel.Declaration.pt
  | BadCaseRelevance of Sorts.relevance * 'constr
  | BadInvert
  | BadVariance of { lev : Univ.Level.t; expected : Univ.Variance.t;
      actual : Univ.Variance.t;
    }
type type_error = (Constr.constr, Constr.types) ptype_error
exception TypeError of Environ.env * type_error
type inductive_error =
    NonPos of Environ.env * Constr.constr * Constr.constr
  | NotEnoughArgs of Environ.env * Constr.constr * Constr.constr
  | NotConstructor of Environ.env * Names.Id.t * Constr.constr *
      Constr.constr * int * int
  | NonPar of Environ.env * Constr.constr * int * Constr.constr *
      Constr.constr
  | SameNamesTypes of Names.Id.t
  | SameNamesConstructors of Names.Id.t
  | SameNamesOverlap of Names.Id.t list
  | NotAnArity of Environ.env * Constr.constr
  | BadEntry
  | LargeNonPropInductiveNotInType
  | MissingConstraints of (Sorts.t list * Sorts.t)
exception InductiveError of inductive_error
val error_unbound_rel : Environ.env -> int -> 'a
val error_unbound_var : Environ.env -> Names.variable -> 'a
val error_not_type : Environ.env -> Environ.unsafe_judgment -> 'a
val error_assumption : Environ.env -> Environ.unsafe_judgment -> 'a
val error_reference_variables :
  Environ.env -> Names.Id.t -> Names.GlobRef.t -> 'a
val error_elim_arity :
  Environ.env ->
  Constr.pinductive ->
  Constr.constr ->
  (Environ.unsafe_judgment * Sorts.family * Sorts.family * Sorts.family)
  option -> 'a
val error_case_not_inductive : Environ.env -> Environ.unsafe_judgment -> 'a
val error_case_on_private_ind : Environ.env -> Names.inductive -> 'a
val error_number_branches :
  Environ.env -> Environ.unsafe_judgment -> int -> 'a
val error_ill_formed_branch :
  Environ.env ->
  Constr.constr ->
  Constr.pconstructor -> Constr.constr -> Constr.constr -> 'a
val error_generalization :
  Environ.env -> Names.Name.t * Constr.types -> Environ.unsafe_judgment -> 'a
val error_actual_type :
  Environ.env -> Environ.unsafe_judgment -> Constr.types -> 'a
val error_incorrect_primitive :
  Environ.env ->
  (CPrimitives.op_or_type, Constr.types) Environ.punsafe_judgment ->
  Constr.types -> 'a
val error_cant_apply_not_functional :
  Environ.env ->
  Environ.unsafe_judgment -> Environ.unsafe_judgment array -> 'a
val error_cant_apply_bad_type :
  Environ.env ->
  int * Constr.constr * Constr.constr ->
  Environ.unsafe_judgment -> Environ.unsafe_judgment array -> 'a
val error_ill_formed_rec_body :
  Environ.env ->
  guard_error ->
  Names.Name.t Context.binder_annot array ->
  int -> Environ.env -> Environ.unsafe_judgment array -> 'a
val error_ill_typed_rec_body :
  Environ.env ->
  int ->
  Names.Name.t Context.binder_annot array ->
  Environ.unsafe_judgment array -> Constr.types array -> 'a
val error_unsatisfied_constraints : Environ.env -> Univ.Constraints.t -> 'a
val error_undeclared_universe : Environ.env -> Univ.Level.t -> 'a
val error_disallowed_sprop : Environ.env -> 'a
val error_bad_binder_relevance :
  Environ.env -> Sorts.relevance -> Constr.rel_declaration -> 'a
val error_bad_case_relevance :
  Environ.env -> Sorts.relevance -> Constr.case -> 'a
val error_bad_invert : Environ.env -> 'a
val error_bad_variance :
  Environ.env ->
  lev:Univ.Level.t ->
  expected:Univ.Variance.t -> actual:Univ.Variance.t -> 'a
val map_pguard_error : ('c -> 'd) -> 'c pguard_error -> 'd pguard_error
val map_ptype_error :
  ("DEBUG:rule", [Tag1 (("pfix_guard_error", 1077), ([((("constr")), 100000000, 0, -307)], 1, Tag1 ([(("NotEnoughAbstractionInFixBody", 712), (0), 0, (("kernel/type_errors.mli", 22, 907, 909), ("kernel/type_errors.mli", 22, 907, 940), 0), 0, Tag1 ("Type_errors", 2)); (("RecursionNotOnInductiveType", 713), ([((("constr")), 100000000, 0, -307)]), 0, (("kernel/type_errors.mli", 23, 941, 943), ("kernel/type_errors.mli", 23, 941, 983), 0), 0, Tag1 ("Type_errors", 3)); (("RecursionOnIllegalTerm", 714), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -308); (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -310); ((("constr")), 100000000, 0, -307)]), 100000000, 0, -309); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lazy"), "t"), [(Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -314)], (0)), 100000000, 0, -313); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -316)], (0)), 100000000, 0, -315)]), 100000000, 0, -312)], (0)), 100000000, 0, -311)]), 0, (("kernel/type_errors.mli", 24, 984, 986), ("kernel/type_errors.mli", 24, 984, 1066), 0), 0, Tag1 ("Type_errors", 4)); (("NotEnoughArgumentsForFixCall", 724), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -317)]), 0, (("kernel/type_errors.mli", 25, 1067, 1069), ("kernel/type_errors.mli", 25, 1067, 1106), 0), 0, Tag1 ("Type_errors", 5)); (("FixpointOnIrrelevantInductive", 725), (0), 0, (("kernel/type_errors.mli", 26, 1107, 1109), ("kernel/type_errors.mli", 26, 1107, 1140), 0), 0, Tag1 ("Type_errors", 6))], 0), 1, 0, [25], [0], 0, 0, (("kernel/type_errors.mli", 20, 857, 857), ("kernel/type_errors.mli", 26, 1107, 1140), 0), 0, 0, 0, Tag1 ("Type_errors", 1)), 1, 0); Tag1 (("pcofix_guard_error", 1078), ([((("constr")), 100000000, 0, -306)], 1, Tag1 ([(("CodomainNotInductiveType", 731), ([((("constr")), 100000000, 0, -306)]), 0, (("kernel/type_errors.mli", 30, 1196, 1198), ("kernel/type_errors.mli", 30, 1196, 1235), 0), 0, Tag1 ("Type_errors", 8)); (("NestedRecursiveOccurrences", 732), (0), 0, (("kernel/type_errors.mli", 31, 1236, 1238), ("kernel/type_errors.mli", 31, 1236, 1266), 0), 0, Tag1 ("Type_errors", 9)); (("UnguardedRecursiveCall", 733), ([((("constr")), 100000000, 0, -306)]), 0, (("kernel/type_errors.mli", 32, 1267, 1269), ("kernel/type_errors.mli", 32, 1267, 1304), 0), 0, Tag1 ("Type_errors", 10)); (("RecCallInTypeOfAbstraction", 734), ([((("constr")), 100000000, 0, -306)]), 0, (("kernel/type_errors.mli", 33, 1305, 1307), ("kernel/type_errors.mli", 33, 1305, 1346), 0), 0, Tag1 ("Type_errors", 11)); (("RecCallInNonRecArgOfConstructor", 735), ([((("constr")), 100000000, 0, -306)]), 0, (("kernel/type_errors.mli", 34, 1347, 1349), ("kernel/type_errors.mli", 34, 1347, 1393), 0), 0, Tag1 ("Type_errors", 12)); (("RecCallInTypeOfDef", 736), ([((("constr")), 100000000, 0, -306)]), 0, (("kernel/type_errors.mli", 35, 1394, 1396), ("kernel/type_errors.mli", 35, 1394, 1427), 0), 0, Tag1 ("Type_errors", 13)); (("RecCallInCaseFun", 737), ([((("constr")), 100000000, 0, -306)]), 0, (("kernel/type_errors.mli", 36, 1428, 1430), ("kernel/type_errors.mli", 36, 1428, 1459), 0), 0, Tag1 ("Type_errors", 14)); (("RecCallInCaseArg", 738), ([((("constr")), 100000000, 0, -306)]), 0, (("kernel/type_errors.mli", 37, 1460, 1462), ("kernel/type_errors.mli", 37, 1460, 1491), 0), 0, Tag1 ("Type_errors", 15)); (("RecCallInCasePred", 739), ([((("constr")), 100000000, 0, -306)]), 0, (("kernel/type_errors.mli", 38, 1492, 1494), ("kernel/type_errors.mli", 38, 1492, 1524), 0), 0, Tag1 ("Type_errors", 16)); (("NotGuardedForm", 740), ([((("constr")), 100000000, 0, -306)]), 0, (("kernel/type_errors.mli", 39, 1525, 1527), ("kernel/type_errors.mli", 39, 1525, 1554), 0), 0, Tag1 ("Type_errors", 17)); (("ReturnPredicateNotCoInductive", 741), ([((("constr")), 100000000, 0, -306)]), 0, (("kernel/type_errors.mli", 40, 1555, 1557), ("kernel/type_errors.mli", 40, 1555, 1599), 0), 0, Tag1 ("Type_errors", 18))], 0), 1, 0, [25], [0], 0, 0, (("kernel/type_errors.mli", 28, 1142, 1142), ("kernel/type_errors.mli", 40, 1555, 1599), 0), 0, 0, 0, Tag1 ("Type_errors", 7)), 1, 0); Tag1 (("pguard_error", 1079), ([((("constr")), 100000000, 0, -304)], 1, Tag1 ([(("FixGuardError", 743), ([(Tag3 ((("pfix_guard_error", 1077)), [((("constr")), 100000000, 0, -304)], (0)), 100000000, 0, -303)]), 0, (("kernel/type_errors.mli", 43, 1629, 1631), ("kernel/type_errors.mli", 43, 1629, 1674), 0), 0, Tag1 ("Type_errors", 20)); (("CoFixGuardError", 744), ([(Tag3 ((("pcofix_guard_error", 1078)), [((("constr")), 100000000, 0, -304)], (0)), 100000000, 0, -305)]), 0, (("kernel/type_errors.mli", 44, 1675, 1677), ("kernel/type_errors.mli", 44, 1675, 1724), 0), 0, Tag1 ("Type_errors", 21))], 0), 1, 0, [25], [0], 0, 0, (("kernel/type_errors.mli", 42, 1601, 1601), ("kernel/type_errors.mli", 44, 1675, 1724), 0), 0, 0, 0, Tag1 ("Type_errors", 19)), 1, 0); Tag1 (("fix_guard_error", 1080), (0, 0, 0, 1, ((Tag3 ((("pfix_guard_error", 1077)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -302)], (0)), 100000000, 0, -301)), 0, 0, 0, 0, (("kernel/type_errors.mli", 46, 1726, 1726), ("kernel/type_errors.mli", 46, 1726, 1772), 0), 0, 0, 0, Tag1 ("Type_errors", 22)), 1, 0); Tag1 (("cofix_guard_error", 1081), (0, 0, 0, 1, ((Tag3 ((("pcofix_guard_error", 1078)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -300)], (0)), 100000000, 0, -299)), 0, 0, 0, 0, (("kernel/type_errors.mli", 47, 1773, 1773), ("kernel/type_errors.mli", 47, 1773, 1823), 0), 0, 0, 0, Tag1 ("Type_errors", 23)), 1, 0); Tag1 (("guard_error", 1082), (0, 0, 0, 1, ((Tag3 ((("pguard_error", 1079)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -298)], (0)), 100000000, 0, -297)), 0, 0, 0, 0, (("kernel/type_errors.mli", 48, 1824, 1824), ("kernel/type_errors.mli", 48, 1824, 1862), 0), 0, 0, 0, Tag1 ("Type_errors", 24)), 1, 0); Tag1 (("pcant_apply_bad_type", 1083), ([((("constr")), 100000000, 0, -292); ((("types")), 100000000, 0, -294)], 2, 0, 1, ((Tag2 ([(Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -291); ((("constr")), 100000000, 0, -292); ((("constr")), 100000000, 0, -292)]), 100000000, 0, -290); (Tag3 (Tag1 ((Tag2 ("Environ")), "punsafe_judgment"), [((("constr")), 100000000, 0, -292); ((("types")), 100000000, 0, -294)], (0)), 100000000, 0, -293); (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Environ")), "punsafe_judgment"), [((("constr")), 100000000, 0, -292); ((("types")), 100000000, 0, -294)], (0)), 100000000, 0, -296)], (0)), 100000000, 0, -295)]), 100000000, 0, -289)), [63; 63], [0; 0], 0, 0, (("kernel/type_errors.mli", 50, 1864, 1864), ("kernel/type_errors.mli", 51, 1910, 2017), 0), 0, 0, 0, Tag1 ("Type_errors", 25)), 1, 0); Tag1 (("ptype_error", 1084), ([((("constr")), 100000000, 0, -237); ((("types")), 100000000, 0, -238)], 2, Tag1 ([(("UnboundRel", 750), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -234)]), 0, (("kernel/type_errors.mli", 54, 2056, 2058), ("kernel/type_errors.mli", 54, 2056, 2077), 0), 0, Tag1 ("Type_errors", 27)); (("UnboundVar", 751), ([(Tag3 (Tag1 ((Tag2 ("Names")), "variable"), 0, (0)), 100000000, 0, -235)]), 0, (("kernel/type_errors.mli", 55, 2078, 2080), ("kernel/type_errors.mli", 55, 2078, 2104), 0), 0, Tag1 ("Type_errors", 28)); (("NotAType", 752), ([(Tag3 (Tag1 ((Tag2 ("Environ")), "punsafe_judgment"), [((("constr")), 100000000, 0, -237); ((("types")), 100000000, 0, -238)], (0)), 100000000, 0, -236)]), 0, (("kernel/type_errors.mli", 56, 2105, 2107), ("kernel/type_errors.mli", 56, 2105, 2155), 0), 0, Tag1 ("Type_errors", 29)); (("BadAssumption", 753), ([(Tag3 (Tag1 ((Tag2 ("Environ")), "punsafe_judgment"), [((("constr")), 100000000, 0, -237); ((("types")), 100000000, 0, -238)], (0)), 100000000, 0, -239)]), 0, (("kernel/type_errors.mli", 57, 2156, 2158), ("kernel/type_errors.mli", 57, 2156, 2211), 0), 0, Tag1 ("Type_errors", 30)); (("ReferenceVariables", 754), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -240); (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -241)]), 0, (("kernel/type_errors.mli", 58, 2212, 2214), ("kernel/type_errors.mli", 58, 2212, 2254), 0), 0, Tag1 ("Type_errors", 31)); (("ElimArity", 782), ([(Tag3 (Tag1 ((Tag2 ("Constr")), "pinductive"), 0, (0)), 100000000, 0, -242); ((("constr")), 100000000, 0, -237); (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Environ")), "punsafe_judgment"), [((("constr")), 100000000, 0, -237); ((("types")), 100000000, 0, -238)], (0)), 100000000, 0, -245); (Tag3 (Tag1 ((Tag2 ("Sorts")), "family"), 0, (0)), 100000000, 0, -246); (Tag3 (Tag1 ((Tag2 ("Sorts")), "family"), 0, (0)), 100000000, 0, -247); (Tag3 (Tag1 ((Tag2 ("Sorts")), "family"), 0, (0)), 100000000, 0, -248)]), 100000000, 0, -244)], (0)), 100000000, 0, -243)]), 0, (("kernel/type_errors.mli", 59, 2255, 2257), ("kernel/type_errors.mli", 60, 2295, 2389), 0), 0, Tag1 ("Type_errors", 32)); (("CaseNotInductive", 815), ([(Tag3 (Tag1 ((Tag2 ("Environ")), "punsafe_judgment"), [((("constr")), 100000000, 0, -237); ((("types")), 100000000, 0, -238)], (0)), 100000000, 0, -249)]), 0, (("kernel/type_errors.mli", 61, 2390, 2392), ("kernel/type_errors.mli", 61, 2390, 2448), 0), 0, Tag1 ("Type_errors", 33)); (("CaseOnPrivateInd", 816), ([(Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -250)]), 0, (("kernel/type_errors.mli", 62, 2449, 2451), ("kernel/type_errors.mli", 62, 2449, 2482), 0), 0, Tag1 ("Type_errors", 34)); (("WrongCaseInfo", 817), ([(Tag3 (Tag1 ((Tag2 ("Constr")), "pinductive"), 0, (0)), 100000000, 0, -251); (Tag3 (Tag1 ((Tag2 ("Constr")), "case_info"), 0, (0)), 100000000, 0, -252)]), 0, (("kernel/type_errors.mli", 63, 2483, 2485), ("kernel/type_errors.mli", 63, 2483, 2526), 0), 0, Tag1 ("Type_errors", 35)); (("NumberBranches", 818), ([(Tag3 (Tag1 ((Tag2 ("Environ")), "punsafe_judgment"), [((("constr")), 100000000, 0, -237); ((("types")), 100000000, 0, -238)], (0)), 100000000, 0, -253); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -254)]), 0, (("kernel/type_errors.mli", 64, 2527, 2529), ("kernel/type_errors.mli", 64, 2527, 2589), 0), 0, Tag1 ("Type_errors", 36)); (("IllFormedBranch", 819), ([((("constr")), 100000000, 0, -237); (Tag3 (Tag1 ((Tag2 ("Constr")), "pconstructor"), 0, (0)), 100000000, 0, -255); ((("constr")), 100000000, 0, -237); ((("constr")), 100000000, 0, -237)]), 0, (("kernel/type_errors.mli", 65, 2590, 2592), ("kernel/type_errors.mli", 65, 2590, 2655), 0), 0, Tag1 ("Type_errors", 37)); (("Generalization", 820), ([(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -257); ((("types")), 100000000, 0, -238)]), 100000000, 0, -256); (Tag3 (Tag1 ((Tag2 ("Environ")), "punsafe_judgment"), [((("constr")), 100000000, 0, -237); ((("types")), 100000000, 0, -238)], (0)), 100000000, 0, -258)]), 0, (("kernel/type_errors.mli", 66, 2656, 2658), ("kernel/type_errors.mli", 66, 2656, 2732), 0), 0, Tag1 ("Type_errors", 38)); (("ActualType", 830), ([(Tag3 (Tag1 ((Tag2 ("Environ")), "punsafe_judgment"), [((("constr")), 100000000, 0, -237); ((("types")), 100000000, 0, -238)], (0)), 100000000, 0, -259); ((("types")), 100000000, 0, -238)]), 0, (("kernel/type_errors.mli", 67, 2733, 2735), ("kernel/type_errors.mli", 67, 2733, 2794), 0), 0, Tag1 ("Type_errors", 39)); (("IncorrectPrimitive", 831), ([(Tag3 (Tag1 ((Tag2 ("Environ")), "punsafe_judgment"), [(Tag3 (Tag1 ((Tag2 ("CPrimitives")), "op_or_type"), 0, (0)), 100000000, 0, -261); ((("types")), 100000000, 0, -238)], (0)), 100000000, 0, -260); ((("types")), 100000000, 0, -238)]), 0, (("kernel/type_errors.mli", 68, 2795, 2797), ("kernel/type_errors.mli", 68, 2795, 2878), 0), 0, Tag1 ("Type_errors", 40)); (("CantApplyBadType", 860), ([(Tag3 ((("pcant_apply_bad_type", 1083)), [((("constr")), 100000000, 0, -237); ((("types")), 100000000, 0, -238)], (0)), 100000000, 0, -262)]), 0, (("kernel/type_errors.mli", 69, 2879, 2881), ("kernel/type_errors.mli", 69, 2879, 2941), 0), 0, Tag1 ("Type_errors", 41)); (("CantApplyNonFunctional", 861), ([(Tag3 (Tag1 ((Tag2 ("Environ")), "punsafe_judgment"), [((("constr")), 100000000, 0, -237); ((("types")), 100000000, 0, -238)], (0)), 100000000, 0, -263); (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Environ")), "punsafe_judgment"), [((("constr")), 100000000, 0, -237); ((("types")), 100000000, 0, -238)], (0)), 100000000, 0, -265)], (0)), 100000000, 0, -264)]), 0, (("kernel/type_errors.mli", 70, 2942, 2944), ("kernel/type_errors.mli", 70, 2942, 3049), 0), 0, Tag1 ("Type_errors", 42)); (("IllFormedRecBody", 862), ([(Tag3 ((("pguard_error", 1079)), [((("constr")), 100000000, 0, -237)], (0)), 100000000, 0, -266); (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -269)], (0)), 100000000, 0, -268)], (0)), 100000000, 0, -267); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -270); (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -271); (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Environ")), "punsafe_judgment"), [((("constr")), 100000000, 0, -237); ((("types")), 100000000, 0, -238)], (0)), 100000000, 0, -273)], (0)), 100000000, 0, -272)]), 0, (("kernel/type_errors.mli", 71, 3050, 3052), ("kernel/type_errors.mli", 71, 3050, 3185), 0), 0, Tag1 ("Type_errors", 43)); (("IllTypedRecBody", 876), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -274); (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -277)], (0)), 100000000, 0, -276)], (0)), 100000000, 0, -275); (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Environ")), "punsafe_judgment"), [((("constr")), 100000000, 0, -237); ((("types")), 100000000, 0, -238)], (0)), 100000000, 0, -279)], (0)), 100000000, 0, -278); (Tag3 ((Tag3 ("array", 8)), [((("types")), 100000000, 0, -238)], (0)), 100000000, 0, -280)]), 0, (("kernel/type_errors.mli", 72, 3186, 3188), ("kernel/type_errors.mli", 73, 3209, 3312), 0), 0, Tag1 ("Type_errors", 44)); (("UnsatisfiedConstraints", 877), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Constraints"), "t"), 0, (0)), 100000000, 0, -281)]), 0, (("kernel/type_errors.mli", 74, 3313, 3315), ("kernel/type_errors.mli", 74, 3313, 3356), 0), 0, Tag1 ("Type_errors", 45)); (("UndeclaredUniverse", 923), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Level"), "t"), 0, (0)), 100000000, 0, -282)]), 0, (("kernel/type_errors.mli", 75, 3357, 3359), ("kernel/type_errors.mli", 75, 3357, 3390), 0), 0, Tag1 ("Type_errors", 46)); (("DisallowedSProp", 939), (0), 0, (("kernel/type_errors.mli", 76, 3391, 3393), ("kernel/type_errors.mli", 76, 3391, 3410), 0), 0, Tag1 ("Type_errors", 47)); (("BadBinderRelevance", 940), ([(Tag3 (Tag1 ((Tag2 ("Sorts")), "relevance"), 0, (0)), 100000000, 0, -283); (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Context")), "Rel"), "Declaration"), "pt"), [((("constr")), 100000000, 0, -237); ((("types")), 100000000, 0, -238)], (0)), 100000000, 0, -284)]), 0, (("kernel/type_errors.mli", 77, 3411, 3413), ("kernel/type_errors.mli", 77, 3411, 3499), 0), 0, Tag1 ("Type_errors", 48)); (("BadCaseRelevance", 985), ([(Tag3 (Tag1 ((Tag2 ("Sorts")), "relevance"), 0, (0)), 100000000, 0, -285); ((("constr")), 100000000, 0, -237)]), 0, (("kernel/type_errors.mli", 78, 3500, 3502), ("kernel/type_errors.mli", 78, 3500, 3549), 0), 0, Tag1 ("Type_errors", 49)); (("BadInvert", 986), (0), 0, (("kernel/type_errors.mli", 79, 3550, 3552), ("kernel/type_errors.mli", 79, 3550, 3563), 0), 0, Tag1 ("Type_errors", 50)); (("BadVariance", 987), Tag1 ([(("lev", 988), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Level"), "t"), 0, (0)), 100000000, 0, -286), (("kernel/type_errors.mli", 80, 3564, 3585), ("kernel/type_errors.mli", 80, 3564, 3599), 0), 0, Tag1 ("Type_errors", 51)); (("expected", 994), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Variance"), "t"), 0, (0)), 100000000, 0, -287), (("kernel/type_errors.mli", 80, 3564, 3600), ("kernel/type_errors.mli", 80, 3564, 3622), 0), 0, Tag1 ("Type_errors", 52)); (("actual", 995), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Variance"), "t"), 0, (0)), 100000000, 0, -288), (("kernel/type_errors.mli", 80, 3564, 3623), ("kernel/type_errors.mli", 80, 3564, 3642), 0), 0, Tag1 ("Type_errors", 53))]), 0, (("kernel/type_errors.mli", 80, 3564, 3566), ("kernel/type_errors.mli", 80, 3564, 3644), 0), 0, Tag1 ("Type_errors", 54))], 0), 1, 0, [63; 63], [0; 0], 0, 0, (("kernel/type_errors.mli", 53, 2019, 2019), ("kernel/type_errors.mli", 80, 3564, 3644), 0), 0, 0, 0, Tag1 ("Type_errors", 26)), 1, 0); Tag1 (("type_error", 1085), (0, 0, 0, 1, ((Tag3 ((("ptype_error", 1084)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -232); (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -233)], (0)), 100000000, 0, -231)), 0, 0, 0, 0, (("kernel/type_errors.mli", 82, 3646, 3646), ("kernel/type_errors.mli", 82, 3646, 3691), 0), 0, 0, 0, Tag1 ("Type_errors", 61)), 1, 0); Tag2 (("TypeError", 1086), ((Tag3 ("exn", 7)), 0, ([(Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -229); (Tag3 ((("type_error", 1085)), 0, (0)), 100000000, 0, -230)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Type_errors", 62)), 2, 0); Tag1 (("inductive_error", 1087), (0, 0, Tag1 ([(("NonPos", 1039), ([(Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -202); (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -203); (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -204)]), 0, (("kernel/type_errors.mli", 89, 3851, 3853), ("kernel/type_errors.mli", 89, 3851, 3886), 0), 0, Tag1 ("Type_errors", 64)); (("NotEnoughArgs", 1040), ([(Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -205); (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -206); (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -207)]), 0, (("kernel/type_errors.mli", 90, 3887, 3889), ("kernel/type_errors.mli", 90, 3887, 3929), 0), 0, Tag1 ("Type_errors", 65)); (("NotConstructor", 1041), ([(Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -208); (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -209); (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -210); (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -211); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -212); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -213)]), 0, (("kernel/type_errors.mli", 91, 3930, 3932), ("kernel/type_errors.mli", 91, 3930, 3992), 0), 0, Tag1 ("Type_errors", 66)); (("NonPar", 1042), ([(Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -214); (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -215); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -216); (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -217); (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -218)]), 0, (("kernel/type_errors.mli", 92, 3993, 3995), ("kernel/type_errors.mli", 92, 3993, 4043), 0), 0, Tag1 ("Type_errors", 67)); (("SameNamesTypes", 1043), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -219)]), 0, (("kernel/type_errors.mli", 93, 4044, 4046), ("kernel/type_errors.mli", 93, 4044, 4070), 0), 0, Tag1 ("Type_errors", 68)); (("SameNamesConstructors", 1044), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -220)]), 0, (("kernel/type_errors.mli", 94, 4071, 4073), ("kernel/type_errors.mli", 94, 4071, 4104), 0), 0, Tag1 ("Type_errors", 69)); (("SameNamesOverlap", 1045), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -222)], (0)), 100000000, 0, -221)]), 0, (("kernel/type_errors.mli", 95, 4105, 4107), ("kernel/type_errors.mli", 95, 4105, 4138), 0), 0, Tag1 ("Type_errors", 70)); (("NotAnArity", 1046), ([(Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -223); (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -224)]), 0, (("kernel/type_errors.mli", 96, 4139, 4141), ("kernel/type_errors.mli", 96, 4139, 4169), 0), 0, Tag1 ("Type_errors", 71)); (("BadEntry", 1047), (0), 0, (("kernel/type_errors.mli", 97, 4170, 4172), ("kernel/type_errors.mli", 97, 4170, 4182), 0), 0, Tag1 ("Type_errors", 72)); (("LargeNonPropInductiveNotInType", 1048), (0), 0, (("kernel/type_errors.mli", 98, 4183, 4185), ("kernel/type_errors.mli", 98, 4183, 4217), 0), 0, Tag1 ("Type_errors", 73)); (("MissingConstraints", 1049), ([(Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Sorts")), "t"), 0, (0)), 100000000, 0, -227)], (0)), 100000000, 0, -226); (Tag3 (Tag1 ((Tag2 ("Sorts")), "t"), 0, (0)), 100000000, 0, -228)]), 100000000, 0, -225)]), 0, (("kernel/type_errors.mli", 99, 4218, 4220), ("kernel/type_errors.mli", 99, 4218, 4268), 0), 0, Tag1 ("Type_errors", 74))], 0), 1, 0, 0, 0, 0, 0, (("kernel/type_errors.mli", 88, 3828, 3828), ("kernel/type_errors.mli", 99, 4218, 4268), 0), 0, 0, 0, Tag1 ("Type_errors", 63)), 1, 0); Tag2 (("InductiveError", 1088), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((("inductive_error", 1087)), 0, (0)), 100000000, 0, -201)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Type_errors", 75)), 2, 0); (("error_unbound_rel", 1089), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -200), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -199), ((("a")), 100000000, 0, -198), 0), 100000000, 0, -197), 0), 100000000, 0, -196), 0, (("kernel/type_errors.mli", 106, 4408, 4408), ("kernel/type_errors.mli", 106, 4408, 4448), 0), 0, Tag1 ("Type_errors", 76)), 0); (("error_unbound_var", 1090), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -195), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Names")), "variable"), 0, (0)), 100000000, 0, -194), ((("a")), 100000000, 0, -193), 0), 100000000, 0, -192), 0), 100000000, 0, -191), 0, (("kernel/type_errors.mli", 108, 4450, 4450), ("kernel/type_errors.mli", 108, 4450, 4495), 0), 0, Tag1 ("Type_errors", 77)), 0); (("error_not_type", 1091), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -190), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "unsafe_judgment"), 0, (0)), 100000000, 0, -189), ((("a")), 100000000, 0, -188), 0), 100000000, 0, -187), 0), 100000000, 0, -186), 0, (("kernel/type_errors.mli", 110, 4497, 4497), ("kernel/type_errors.mli", 110, 4497, 4546), 0), 0, Tag1 ("Type_errors", 78)), 0); (("error_assumption", 1092), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -185), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "unsafe_judgment"), 0, (0)), 100000000, 0, -184), ((("a")), 100000000, 0, -183), 0), 100000000, 0, -182), 0), 100000000, 0, -181), 0, (("kernel/type_errors.mli", 112, 4548, 4548), ("kernel/type_errors.mli", 112, 4548, 4599), 0), 0, Tag1 ("Type_errors", 79)), 0); (("error_reference_variables", 1093), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -180), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -179), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -178), ((("a")), 100000000, 0, -177), 0), 100000000, 0, -176), 0), 100000000, 0, -175), 0), 100000000, 0, -174), 0, (("kernel/type_errors.mli", 114, 4601, 4601), ("kernel/type_errors.mli", 114, 4601, 4663), 0), 0, Tag1 ("Type_errors", 80)), 0); (("error_elim_arity", 1094), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -173), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "pinductive"), 0, (0)), 100000000, 0, -172), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -171), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Environ")), "unsafe_judgment"), 0, (0)), 100000000, 0, -167); (Tag3 (Tag1 ((Tag2 ("Sorts")), "family"), 0, (0)), 100000000, 0, -168); (Tag3 (Tag1 ((Tag2 ("Sorts")), "family"), 0, (0)), 100000000, 0, -169); (Tag3 (Tag1 ((Tag2 ("Sorts")), "family"), 0, (0)), 100000000, 0, -170)]), 100000000, 0, -166)], (0)), 100000000, 0, -165), ((("a")), 100000000, 0, -164), 0), 100000000, 0, -163), 0), 100000000, 0, -162), 0), 100000000, 0, -161), 0), 100000000, 0, -160), 0, (("kernel/type_errors.mli", 116, 4665, 4665), ("kernel/type_errors.mli", 118, 4721, 4800), 0), 0, Tag1 ("Type_errors", 81)), 0); (("error_case_not_inductive", 1095), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -159), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "unsafe_judgment"), 0, (0)), 100000000, 0, -158), ((("a")), 100000000, 0, -157), 0), 100000000, 0, -156), 0), 100000000, 0, -155), 0, (("kernel/type_errors.mli", 120, 4802, 4802), ("kernel/type_errors.mli", 120, 4802, 4861), 0), 0, Tag1 ("Type_errors", 82)), 0); (("error_case_on_private_ind", 1096), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -154), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -153), ((("a")), 100000000, 0, -152), 0), 100000000, 0, -151), 0), 100000000, 0, -150), 0, (("kernel/type_errors.mli", 122, 4863, 4863), ("kernel/type_errors.mli", 122, 4863, 4917), 0), 0, Tag1 ("Type_errors", 83)), 0); (("error_number_branches", 1097), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -149), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "unsafe_judgment"), 0, (0)), 100000000, 0, -148), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -147), ((("a")), 100000000, 0, -146), 0), 100000000, 0, -145), 0), 100000000, 0, -144), 0), 100000000, 0, -143), 0, (("kernel/type_errors.mli", 124, 4919, 4919), ("kernel/type_errors.mli", 124, 4919, 4982), 0), 0, Tag1 ("Type_errors", 84)), 0); (("error_ill_formed_branch", 1098), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -142), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -141), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "pconstructor"), 0, (0)), 100000000, 0, -140), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -139), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -138), ((("a")), 100000000, 0, -137), 0), 100000000, 0, -136), 0), 100000000, 0, -135), 0), 100000000, 0, -134), 0), 100000000, 0, -133), 0), 100000000, 0, -132), 0, (("kernel/type_errors.mli", 126, 4984, 4984), ("kernel/type_errors.mli", 126, 4984, 5069), 0), 0, Tag1 ("Type_errors", 85)), 0); (("error_generalization", 1099), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -131), (Tag1 (0, (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -129); (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -130)]), 100000000, 0, -128), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "unsafe_judgment"), 0, (0)), 100000000, 0, -127), ((("a")), 100000000, 0, -126), 0), 100000000, 0, -125), 0), 100000000, 0, -124), 0), 100000000, 0, -123), 0, (("kernel/type_errors.mli", 128, 5071, 5071), ("kernel/type_errors.mli", 128, 5071, 5144), 0), 0, Tag1 ("Type_errors", 86)), 0); (("error_actual_type", 1100), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -122), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "unsafe_judgment"), 0, (0)), 100000000, 0, -121), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -120), ((("a")), 100000000, 0, -119), 0), 100000000, 0, -118), 0), 100000000, 0, -117), 0), 100000000, 0, -116), 0, (("kernel/type_errors.mli", 130, 5146, 5146), ("kernel/type_errors.mli", 130, 5146, 5207), 0), 0, Tag1 ("Type_errors", 87)), 0); (("error_incorrect_primitive", 1101), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -115), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "punsafe_judgment"), [(Tag3 (Tag1 ((Tag2 ("CPrimitives")), "op_or_type"), 0, (0)), 100000000, 0, -113); (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -114)], (0)), 100000000, 0, -112), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -111), ((("a")), 100000000, 0, -110), 0), 100000000, 0, -109), 0), 100000000, 0, -108), 0), 100000000, 0, -107), 0, (("kernel/type_errors.mli", 132, 5209, 5209), ("kernel/type_errors.mli", 132, 5209, 5310), 0), 0, Tag1 ("Type_errors", 88)), 0); (("error_cant_apply_not_functional", 1102), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -106), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "unsafe_judgment"), 0, (0)), 100000000, 0, -105), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Environ")), "unsafe_judgment"), 0, (0)), 100000000, 0, -104)], (0)), 100000000, 0, -103), ((("a")), 100000000, 0, -102), 0), 100000000, 0, -101), 0), 100000000, 0, -100), 0), 100000000, 0, -99), 0, (("kernel/type_errors.mli", 134, 5312, 5312), ("kernel/type_errors.mli", 135, 5350, 5405), 0), 0, Tag1 ("Type_errors", 89)), 0); (("error_cant_apply_bad_type", 1103), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -98), (Tag1 (0, (Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -95); (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -96); (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -97)]), 100000000, 0, -94), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "unsafe_judgment"), 0, (0)), 100000000, 0, -93), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Environ")), "unsafe_judgment"), 0, (0)), 100000000, 0, -92)], (0)), 100000000, 0, -91), ((("a")), 100000000, 0, -90), 0), 100000000, 0, -89), 0), 100000000, 0, -88), 0), 100000000, 0, -87), 0), 100000000, 0, -86), 0, (("kernel/type_errors.mli", 137, 5407, 5407), ("kernel/type_errors.mli", 139, 5473, 5525), 0), 0, Tag1 ("Type_errors", 90)), 0); (("error_ill_formed_rec_body", 1104), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -85), (Tag1 (0, (Tag3 ((("guard_error", 1082)), 0, (0)), 100000000, 0, -84), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -83)], (0)), 100000000, 0, -82)], (0)), 100000000, 0, -81), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -80), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -79), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Environ")), "unsafe_judgment"), 0, (0)), 100000000, 0, -78)], (0)), 100000000, 0, -77), ((("a")), 100000000, 0, -76), 0), 100000000, 0, -75), 0), 100000000, 0, -74), 0), 100000000, 0, -73), 0), 100000000, 0, -72), 0), 100000000, 0, -71), 0), 100000000, 0, -70), 0, (("kernel/type_errors.mli", 141, 5527, 5527), ("kernel/type_errors.mli", 142, 5559, 5661), 0), 0, Tag1 ("Type_errors", 91)), 0); (("error_ill_typed_rec_body", 1105), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -69), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -68), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -67)], (0)), 100000000, 0, -66)], (0)), 100000000, 0, -65), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Environ")), "unsafe_judgment"), 0, (0)), 100000000, 0, -64)], (0)), 100000000, 0, -63), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -62)], (0)), 100000000, 0, -61), ((("a")), 100000000, 0, -60), 0), 100000000, 0, -59), 0), 100000000, 0, -58), 0), 100000000, 0, -57), 0), 100000000, 0, -56), 0), 100000000, 0, -55), 0, (("kernel/type_errors.mli", 144, 5663, 5663), ("kernel/type_errors.mli", 145, 5695, 5790), 0), 0, Tag1 ("Type_errors", 92)), 0); (("error_unsatisfied_constraints", 1106), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -54), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Constraints"), "t"), 0, (0)), 100000000, 0, -53), ((("a")), 100000000, 0, -52), 0), 100000000, 0, -51), 0), 100000000, 0, -50), 0, (("kernel/type_errors.mli", 147, 5792, 5792), ("kernel/type_errors.mli", 147, 5792, 5854), 0), 0, Tag1 ("Type_errors", 93)), 0); (("error_undeclared_universe", 1107), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -49), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Level"), "t"), 0, (0)), 100000000, 0, -48), ((("a")), 100000000, 0, -47), 0), 100000000, 0, -46), 0), 100000000, 0, -45), 0, (("kernel/type_errors.mli", 149, 5856, 5856), ("kernel/type_errors.mli", 149, 5856, 5908), 0), 0, Tag1 ("Type_errors", 94)), 0); (("error_disallowed_sprop", 1108), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -44), ((("a")), 100000000, 0, -43), 0), 100000000, 0, -42), 0, (("kernel/type_errors.mli", 151, 5910, 5910), ("kernel/type_errors.mli", 151, 5910, 5948), 0), 0, Tag1 ("Type_errors", 95)), 0); (("error_bad_binder_relevance", 1109), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -41), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sorts")), "relevance"), 0, (0)), 100000000, 0, -40), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "rel_declaration"), 0, (0)), 100000000, 0, -39), ((("a")), 100000000, 0, -38), 0), 100000000, 0, -37), 0), 100000000, 0, -36), 0), 100000000, 0, -35), 0, (("kernel/type_errors.mli", 153, 5950, 5950), ("kernel/type_errors.mli", 153, 5950, 6030), 0), 0, Tag1 ("Type_errors", 96)), 0); (("error_bad_case_relevance", 1110), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -34), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sorts")), "relevance"), 0, (0)), 100000000, 0, -33), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "case"), 0, (0)), 100000000, 0, -32), ((("a")), 100000000, 0, -31), 0), 100000000, 0, -30), 0), 100000000, 0, -29), 0), 100000000, 0, -28), 0, (("kernel/type_errors.mli", 155, 6032, 6032), ("kernel/type_errors.mli", 155, 6032, 6106), 0), 0, Tag1 ("Type_errors", 97)), 0); (("error_bad_invert", 1111), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -27), ((("a")), 100000000, 0, -26), 0), 100000000, 0, -25), 0, (("kernel/type_errors.mli", 157, 6108, 6108), ("kernel/type_errors.mli", 157, 6108, 6140), 0), 0, Tag1 ("Type_errors", 98)), 0); (("error_bad_variance", 1112), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -24), (Tag1 (("lev"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Level"), "t"), 0, (0)), 100000000, 0, -23), (Tag1 (("expected"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Variance"), "t"), 0, (0)), 100000000, 0, -22), (Tag1 (("actual"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Variance"), "t"), 0, (0)), 100000000, 0, -21), ((("a")), 100000000, 0, -20), 0), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("kernel/type_errors.mli", 159, 6142, 6142), ("kernel/type_errors.mli", 159, 6142, 6235), 0), 0, Tag1 ("Type_errors", 99)), 0); (("map_pguard_error", 1113), ((Tag1 (0, (Tag1 (0, ((("c")), 100000000, 0, -14), ((("d")), 100000000, 0, -12), 0), 100000000, 0, -15), (Tag1 (0, (Tag3 ((("pguard_error", 1079)), [((("c")), 100000000, 0, -14)], (0)), 100000000, 0, -13), (Tag3 ((("pguard_error", 1079)), [((("d")), 100000000, 0, -12)], (0)), 100000000, 0, -11), 0), 100000000, 0, -10), 0), 100000000, 0, -9), 0, (("kernel/type_errors.mli", 161, 6237, 6237), ("kernel/type_errors.mli", 161, 6237, 6308), 0), 0, Tag1 ("Type_errors", 100)), 0); (("map_ptype_error", 1114), ((Tag1 (0, (Tag1 (0, ((("c")), 100000000, 0, -7), ((("d")), 100000000, 0, -5), 0), 100000000, 0, -8), (Tag1 (0, (Tag3 ((("ptype_error", 1084)), [((("c")), 100000000, 0, -7); ((("c")), 100000000, 0, -7)], (0)), 100000000, 0, -6), (Tag3 ((("ptype_error", 1084)), [((("d")), 100000000, 0, -5); ((("d")), 100000000, 0, -5)], (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("kernel/type_errors.mli", 162, 6309, 6309), ("kernel/type_errors.mli", 162, 6309, 6389), 0), 0, Tag1 ("Type_errors", 101)), 0)], "Type_errors", [("Type_errors", ("7\157\162-\214M\206\196\228\191\005v\134\177\144\134")); ("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Vmemitcodes", ("wCd\138\165\158DD\241gH\236.\210\197\247")); ("Vmbytecodes", ("\025\021\151\137Dx\149W\236+[\143f\208\160\016")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("Range", ("\218\130\001r\237\r\144\171\164\021l\155\196\143sg")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Environ", ("\171b\1579\229<\003Z\147IL\225X\254\182\204")); ("Declarations", ("\239\137n\019\030w$\182\166z^{\b\206\163\175")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CEphemeron", ("\204I\179-\206(x4\173\229\250\001PkH\151")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])
('c -> 'd) -> ('c, 'c) ptype_error -> ('d, 'd) ptype_error

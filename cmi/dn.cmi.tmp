type 'res lookup_res = Label of 'res | Nothing | Everything
module Make :
  functor (Y : Map.OrderedType) (Z : Map.OrderedType) ->
    sig
      type 'a decompose_fun = 'a -> (Y.t * 'a list) option
      type t
      val empty : t
      type pattern
      val pattern : 'a decompose_fun -> 'a -> pattern
      val add : t -> pattern -> Z.t -> t
      val rmv : t -> pattern -> Z.t -> t
      type 'tree lookup_fun = 'tree -> (Y.t * 'tree list) lookup_res
      val lookup : t -> 'term lookup_fun -> 'term -> Z.t list("DEBUG:rule", [Tag1 (("lookup_res", 298), ([((("res")), 100000000, 0, -2)], 1, Tag1 ([(("Label", 270), ([((("res")), 100000000, 0, -2)]), 0, (("tactics/dn.mli", 1, 0, 23), ("tactics/dn.mli", 1, 0, 36), 0), 0, Tag1 ("Dn", 1)); (("Nothing", 271), (0), 0, (("tactics/dn.mli", 1, 0, 37), ("tactics/dn.mli", 1, 0, 46), 0), 0, Tag1 ("Dn", 2)); (("Everything", 272), (0), 0, (("tactics/dn.mli", 1, 0, 47), ("tactics/dn.mli", 1, 0, 59), 0), 0, Tag1 ("Dn", 3))], 0), 1, 0, [25], [0], 0, 0, (("tactics/dn.mli", 1, 0, 0), ("tactics/dn.mli", 1, 0, 59), 0), 0, 0, 0, Tag1 ("Dn", 0)), 1, 0); Tag3 (("Make", 299), 0, (Tag2 (((("Y", 300)), (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Map"), "OrderedType"))), Tag2 (((("Z", 301)), (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Map"), "OrderedType"))), Tag1 ([Tag1 (("decompose_fun", 302), ([((("a")), 100000000, 0, -42)], 1, 0, 1, ((Tag1 (0, ((("a")), 100000000, 0, -42), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 (Tag1 ((("Y", 300)), "t"), 0, (0)), 100000000, 0, -40); (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -42)], (0)), 100000000, 0, -41)]), 100000000, 0, -39)], (0)), 100000000, 0, -38), 0), 100000000, 0, -37)), [63], [0], 0, 0, (("tactics/dn.mli", 9, 157, 159), ("tactics/dn.mli", 9, 157, 211), 0), 0, 0, 0, Tag1 ("Dn", 6)), 1, 0); Tag1 (("t", 303), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("tactics/dn.mli", 11, 213, 215), ("tactics/dn.mli", 11, 213, 221), 0), 0, 0, 0, Tag1 ("Dn", 7)), 1, 0); (("empty", 304), ((Tag3 ((("t", 303)), 0, (0)), 100000000, 0, -36), 0, (("tactics/dn.mli", 13, 223, 225), ("tactics/dn.mli", 13, 223, 238), 0), 0, Tag1 ("Dn", 8)), 0); Tag1 (("pattern", 305), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("tactics/dn.mli", 21, 563, 565), ("tactics/dn.mli", 21, 563, 577), 0), 0, 0, 0, Tag1 ("Dn", 9)), 1, 0); (("pattern", 306), ((Tag1 (0, (Tag3 ((("decompose_fun", 302)), [((("a")), 100000000, 0, -34)], (0)), 100000000, 0, -35), (Tag1 (0, ((("a")), 100000000, 0, -34), (Tag3 ((("pattern", 305)), 0, (0)), 100000000, 0, -33), 0), 100000000, 0, -32), 0), 100000000, 0, -31), 0, (("tactics/dn.mli", 23, 579, 581), ("tactics/dn.mli", 23, 579, 628), 0), 0, Tag1 ("Dn", 10)), 0); (("add", 307), ((Tag1 (0, (Tag3 ((("t", 303)), 0, (0)), 100000000, 0, -30), (Tag1 (0, (Tag3 ((("pattern", 305)), 0, (0)), 100000000, 0, -29), (Tag1 (0, (Tag3 (Tag1 ((("Z", 301)), "t"), 0, (0)), 100000000, 0, -28), (Tag3 ((("t", 303)), 0, (0)), 100000000, 0, -27), 0), 100000000, 0, -26), 0), 100000000, 0, -25), 0), 100000000, 0, -24), 0, (("tactics/dn.mli", 25, 630, 632), ("tactics/dn.mli", 25, 630, 666), 0), 0, Tag1 ("Dn", 11)), 0); (("rmv", 308), ((Tag1 (0, (Tag3 ((("t", 303)), 0, (0)), 100000000, 0, -23), (Tag1 (0, (Tag3 ((("pattern", 305)), 0, (0)), 100000000, 0, -22), (Tag1 (0, (Tag3 (Tag1 ((("Z", 301)), "t"), 0, (0)), 100000000, 0, -21), (Tag3 ((("t", 303)), 0, (0)), 100000000, 0, -20), 0), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("tactics/dn.mli", 27, 668, 670), ("tactics/dn.mli", 27, 668, 704), 0), 0, Tag1 ("Dn", 12)), 0); Tag1 (("lookup_fun", 309), ([((("tree")), 100000000, 0, -16)], 1, 0, 1, ((Tag1 (0, ((("tree")), 100000000, 0, -16), (Tag3 ((("lookup_res", 298)), [(Tag2 ([(Tag3 (Tag1 ((("Y", 300)), "t"), 0, (0)), 100000000, 0, -14); (Tag3 ((Tag3 ("list", 9)), [((("tree")), 100000000, 0, -16)], (0)), 100000000, 0, -15)]), 100000000, 0, -13)], (0)), 100000000, 0, -12), 0), 100000000, 0, -11)), [63], [0], 0, 0, (("tactics/dn.mli", 29, 706, 708), ("tactics/dn.mli", 29, 706, 770), 0), 0, 0, 0, Tag1 ("Dn", 13)), 1, 0); (("lookup", 310), ((Tag1 (0, (Tag3 ((("t", 303)), 0, (0)), 100000000, 0, -10), (Tag1 (0, (Tag3 ((("lookup_fun", 309)), [((("term")), 100000000, 0, -8)], (0)), 100000000, 0, -9), (Tag1 (0, ((("term")), 100000000, 0, -8), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Z", 301)), "t"), 0, (0)), 100000000, 0, -7)], (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0, (("tactics/dn.mli", 38, 1098, 1100), ("tactics/dn.mli", 39, 1144, 1159), 0), 0, Tag1 ("Dn", 14)), 0)]))), 0, (("tactics/dn.mli", 4, 62, 62), ("tactics/dn.mli", 41, 1161, 1164), 0), Tag1 ("Dn", 15)), 0, 0)], "Dn", [("Dn", ("m@ \202gh\161\251\002\021\222\030\235{A>")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

    end

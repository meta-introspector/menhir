type flags = { qflag : bool; reds : CClosure.RedFlags.reds; }
val ( =? ) :
  ('a -> 'a -> int) -> ('b -> 'b -> int) -> 'a -> 'a -> 'b -> 'b -> int
val ( ==? ) :
  ('a -> 'a -> 'b -> 'b -> int) ->
  ('c -> 'c -> int) -> 'a -> 'a -> 'b -> 'b -> 'c -> 'c -> int
type ('a, 'b) sum = Left of 'a | Right of 'b
type counter = bool -> Constr.metavariable
val construct_nhyps : Environ.env -> Constr.pinductive -> int array
val ind_hyps :
  Environ.env ->
  Evd.evar_map ->
  int ->
  Constr.pinductive -> EConstr.constr list -> EConstr.rel_context array
type atom
val repr_atom : atom -> EConstr.t
type atoms = { positive : atom list; negative : atom list; }
type _ side = Hyp : bool -> [ `Hyp ] side | Concl : [ `Goal ] side
type right_pattern =
    Rarrow
  | Rand
  | Ror
  | Rfalse
  | Rforall
  | Rexists of Constr.metavariable * EConstr.constr * bool
type left_arrow_pattern =
    LLatom
  | LLfalse of Constr.pinductive * EConstr.constr list
  | LLand of Constr.pinductive * EConstr.constr list
  | LLor of Constr.pinductive * EConstr.constr list
  | LLforall of EConstr.constr
  | LLexists of Constr.pinductive * EConstr.constr list
  | LLarrow of EConstr.constr * EConstr.constr * EConstr.constr
type left_pattern =
    Lfalse
  | Land of Constr.pinductive
  | Lor of Constr.pinductive
  | Lforall of Constr.metavariable * EConstr.constr * bool
  | Lexists of Constr.pinductive
  | LA of EConstr.constr * left_arrow_pattern
type _ identifier =
    GoalId : [ `Goal ] identifier
  | FormulaId : Names.GlobRef.t -> [ `Hyp ] identifier
type _ pattern =
    LeftPattern : left_pattern -> [ `Hyp ] pattern
  | RightPattern : right_pattern -> [ `Goal ] pattern
type 'a t = private {
  id : 'a identifier;
  constr : EConstr.constr;
  pat : 'a pattern;
  atoms : atoms;
}
type any_formula = AnyFormula : 'a t -> any_formula
val build_formula :
  flags:flags ->
  Environ.env ->
  Evd.evar_map ->
  ("DEBUG:rule", [Tag1 (("flags", 1315), (0, 0, [[(("qflag", 719), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -146), (("plugins/firstorder/formula.mli", 16, 728, 730), ("plugins/firstorder/formula.mli", 16, 728, 743), 0), 0, Tag1 ("Firstorder_plugin__Formula", 2)); (("reds", 809), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("CClosure")), "RedFlags"), "reds"), 0, (0)), 100000000, 0, -147), (("plugins/firstorder/formula.mli", 17, 744, 746), ("plugins/firstorder/formula.mli", 17, 744, 776), 0), 0, Tag1 ("Firstorder_plugin__Formula", 3))]], 1, 0, 0, 0, 0, 0, (("plugins/firstorder/formula.mli", 15, 713, 713), ("plugins/firstorder/formula.mli", 18, 777, 778), 0), 0, 0, 0, Tag1 ("Firstorder_plugin__Formula", 1)), 1, 0); (("=?", 1316), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -139), (Tag1 (0, ((("a")), 100000000, 0, -139), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -145), 0), 100000000, 0, -144), 0), 100000000, 0, -143), (Tag1 (0, (Tag1 (0, ((("b")), 100000000, 0, -138), (Tag1 (0, ((("b")), 100000000, 0, -138), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -142), 0), 100000000, 0, -141), 0), 100000000, 0, -140), (Tag1 (0, ((("a")), 100000000, 0, -139), (Tag1 (0, ((("a")), 100000000, 0, -139), (Tag1 (0, ((("b")), 100000000, 0, -138), (Tag1 (0, ((("b")), 100000000, 0, -138), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -137), 0), 100000000, 0, -136), 0), 100000000, 0, -135), 0), 100000000, 0, -134), 0), 100000000, 0, -133), 0), 100000000, 0, -132), 0), 100000000, 0, -131), 0, (("plugins/firstorder/formula.mli", 20, 780, 780), ("plugins/firstorder/formula.mli", 21, 833, 862), 0), 0, Tag1 ("Firstorder_plugin__Formula", 4)), 0); (("==?", 1317), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -122), (Tag1 (0, ((("a")), 100000000, 0, -122), (Tag1 (0, ((("b")), 100000000, 0, -121), (Tag1 (0, ((("b")), 100000000, 0, -121), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -130), 0), 100000000, 0, -129), 0), 100000000, 0, -128), 0), 100000000, 0, -127), 0), 100000000, 0, -126), (Tag1 (0, (Tag1 (0, ((("c")), 100000000, 0, -120), (Tag1 (0, ((("c")), 100000000, 0, -120), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -125), 0), 100000000, 0, -124), 0), 100000000, 0, -123), (Tag1 (0, ((("a")), 100000000, 0, -122), (Tag1 (0, ((("a")), 100000000, 0, -122), (Tag1 (0, ((("b")), 100000000, 0, -121), (Tag1 (0, ((("b")), 100000000, 0, -121), (Tag1 (0, ((("c")), 100000000, 0, -120), (Tag1 (0, ((("c")), 100000000, 0, -120), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -119), 0), 100000000, 0, -118), 0), 100000000, 0, -117), 0), 100000000, 0, -116), 0), 100000000, 0, -115), 0), 100000000, 0, -114), 0), 100000000, 0, -113), 0), 100000000, 0, -112), 0), 100000000, 0, -111), 0, (("plugins/firstorder/formula.mli", 23, 864, 864), ("plugins/firstorder/formula.mli", 24, 929, 969), 0), 0, Tag1 ("Firstorder_plugin__Formula", 5)), 0); Tag1 (("sum", 1318), ([((("a")), 100000000, 0, -109); ((("b")), 100000000, 0, -110)], 2, Tag1 ([(("Left", 813), ([((("a")), 100000000, 0, -109)]), 0, (("plugins/firstorder/formula.mli", 26, 971, 990), ("plugins/firstorder/formula.mli", 26, 971, 1000), 0), 0, Tag1 ("Firstorder_plugin__Formula", 7)); (("Right", 814), ([((("b")), 100000000, 0, -110)]), 0, (("plugins/firstorder/formula.mli", 26, 971, 1001), ("plugins/firstorder/formula.mli", 26, 971, 1014), 0), 0, Tag1 ("Firstorder_plugin__Formula", 8))], 0), 1, 0, [25; 25], [0; 0], 0, 0, (("plugins/firstorder/formula.mli", 26, 971, 971), ("plugins/firstorder/formula.mli", 26, 971, 1014), 0), 0, 0, 0, Tag1 ("Firstorder_plugin__Formula", 6)), 1, 0); Tag1 (("counter", 1319), (0, 0, 0, 1, ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -108), (Tag3 (Tag1 ((Tag2 ("Constr")), "metavariable"), 0, (0)), 100000000, 0, -107), 0), 100000000, 0, -106)), 0, 0, 0, 0, (("plugins/firstorder/formula.mli", 28, 1016, 1016), ("plugins/firstorder/formula.mli", 28, 1016, 1051), 0), 0, 0, 0, Tag1 ("Firstorder_plugin__Formula", 9)), 1, 0); (("construct_nhyps", 1320), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -105), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "pinductive"), 0, (0)), 100000000, 0, -104), (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -103)], (0)), 100000000, 0, -102), 0), 100000000, 0, -101), 0), 100000000, 0, -100), 0, (("plugins/firstorder/formula.mli", 30, 1053, 1053), ("plugins/firstorder/formula.mli", 30, 1053, 1113), 0), 0, Tag1 ("Firstorder_plugin__Formula", 10)), 0); (("ind_hyps", 1321), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -99), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -98), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -97), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "pinductive"), 0, (0)), 100000000, 0, -96), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -95)], (0)), 100000000, 0, -94), (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "rel_context"), 0, (0)), 100000000, 0, -93)], (0)), 100000000, 0, -92), 0), 100000000, 0, -91), 0), 100000000, 0, -90), 0), 100000000, 0, -89), 0), 100000000, 0, -88), 0), 100000000, 0, -87), 0, (("plugins/firstorder/formula.mli", 32, 1115, 1115), ("plugins/firstorder/formula.mli", 33, 1182, 1224), 0), 0, Tag1 ("Firstorder_plugin__Formula", 11)), 0); Tag1 (("atom", 1322), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("plugins/firstorder/formula.mli", 35, 1226, 1226), ("plugins/firstorder/formula.mli", 35, 1226, 1235), 0), 0, 0, 0, Tag1 ("Firstorder_plugin__Formula", 12)), 1, 0); (("repr_atom", 1323), ((Tag1 (0, (Tag3 ((("atom", 1322)), 0, (0)), 100000000, 0, -86), (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -85), 0), 100000000, 0, -84), 0, (("plugins/firstorder/formula.mli", 37, 1237, 1237), ("plugins/firstorder/formula.mli", 37, 1237, 1270), 0), 0, Tag1 ("Firstorder_plugin__Formula", 13)), 0); Tag1 (("atoms", 1324), (0, 0, [[(("positive", 1172), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("atom", 1322)), 0, (0)), 100000000, 0, -81)], (0)), 100000000, 0, -80), (("plugins/firstorder/formula.mli", 39, 1272, 1287), ("plugins/firstorder/formula.mli", 39, 1272, 1306), 0), 0, Tag1 ("Firstorder_plugin__Formula", 15)); (("negative", 1173), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("atom", 1322)), 0, (0)), 100000000, 0, -83)], (0)), 100000000, 0, -82), (("plugins/firstorder/formula.mli", 39, 1272, 1307), ("plugins/firstorder/formula.mli", 39, 1272, 1325), 0), 0, Tag1 ("Firstorder_plugin__Formula", 16))]], 1, 0, 0, 0, 0, 0, (("plugins/firstorder/formula.mli", 39, 1272, 1272), ("plugins/firstorder/formula.mli", 39, 1272, 1327), 0), 0, 0, 0, Tag1 ("Firstorder_plugin__Formula", 14)), 1, 0); Tag1 (("side", 1325), ([((("_")), 100000000, 0, -79)], 1, Tag1 ([(("Hyp", 1175), ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -75)]), ((Tag3 ((("side", 1325)), [(Tag8 (([("Hyp", (0))], (0, 100000000, 0, -74), 1, 0, 0)), 100000000, 0, -73)], (0)), 100000000, 0, -72)), (("plugins/firstorder/formula.mli", 42, 1343, 1343), ("plugins/firstorder/formula.mli", 42, 1343, 1372), 0), 0, Tag1 ("Firstorder_plugin__Formula", 18)); (("Concl", 1176), (0), ((Tag3 ((("side", 1325)), [(Tag8 (([("Goal", (0))], (0, 100000000, 0, -78), 1, 0, 0)), 100000000, 0, -77)], (0)), 100000000, 0, -76)), (("plugins/firstorder/formula.mli", 43, 1403, 1403), ("plugins/firstorder/formula.mli", 43, 1403, 1427), 0), 0, Tag1 ("Firstorder_plugin__Formula", 19))], 0), 1, 0, [63], [0], 0, 0, (("plugins/firstorder/formula.mli", 41, 1329, 1329), ("plugins/firstorder/formula.mli", 43, 1403, 1427), 0), 0, 0, 0, Tag1 ("Firstorder_plugin__Formula", 17)), 1, 0); Tag1 (("right_pattern", 1326), (0, 0, Tag1 ([(("Rarrow", 1178), (0), 0, (("plugins/firstorder/formula.mli", 46, 1450, 1454), ("plugins/firstorder/formula.mli", 46, 1450, 1460), 0), 0, Tag1 ("Firstorder_plugin__Formula", 21)); (("Rand", 1179), (0), 0, (("plugins/firstorder/formula.mli", 47, 1461, 1463), ("plugins/firstorder/formula.mli", 47, 1461, 1469), 0), 0, Tag1 ("Firstorder_plugin__Formula", 22)); (("Ror", 1180), (0), 0, (("plugins/firstorder/formula.mli", 48, 1470, 1472), ("plugins/firstorder/formula.mli", 48, 1470, 1477), 0), 0, Tag1 ("Firstorder_plugin__Formula", 23)); (("Rfalse", 1181), (0), 0, (("plugins/firstorder/formula.mli", 49, 1478, 1480), ("plugins/firstorder/formula.mli", 49, 1478, 1488), 0), 0, Tag1 ("Firstorder_plugin__Formula", 24)); (("Rforall", 1182), (0), 0, (("plugins/firstorder/formula.mli", 50, 1489, 1491), ("plugins/firstorder/formula.mli", 50, 1489, 1500), 0), 0, Tag1 ("Firstorder_plugin__Formula", 25)); (("Rexists", 1183), ([(Tag3 (Tag1 ((Tag2 ("Constr")), "metavariable"), 0, (0)), 100000000, 0, -69); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -70); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -71)]), 0, (("plugins/firstorder/formula.mli", 51, 1501, 1503), ("plugins/firstorder/formula.mli", 51, 1501, 1540), 0), 0, Tag1 ("Firstorder_plugin__Formula", 26))], 0), 1, 0, 0, 0, 0, 0, (("plugins/firstorder/formula.mli", 45, 1429, 1429), ("plugins/firstorder/formula.mli", 51, 1501, 1540), 0), 0, 0, 0, Tag1 ("Firstorder_plugin__Formula", 20)), 1, 0); Tag1 (("left_arrow_pattern", 1327), (0, 0, Tag1 ([(("LLatom", 1185), (0), 0, (("plugins/firstorder/formula.mli", 54, 1567, 1571), ("plugins/firstorder/formula.mli", 54, 1567, 1577), 0), 0, Tag1 ("Firstorder_plugin__Formula", 28)); (("LLfalse", 1186), ([(Tag3 (Tag1 ((Tag2 ("Constr")), "pinductive"), 0, (0)), 100000000, 0, -53); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -55)], (0)), 100000000, 0, -54)]), 0, (("plugins/firstorder/formula.mli", 55, 1578, 1580), ("plugins/firstorder/formula.mli", 55, 1578, 1615), 0), 0, Tag1 ("Firstorder_plugin__Formula", 29)); (("LLand", 1187), ([(Tag3 (Tag1 ((Tag2 ("Constr")), "pinductive"), 0, (0)), 100000000, 0, -56); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -58)], (0)), 100000000, 0, -57)]), 0, (("plugins/firstorder/formula.mli", 56, 1616, 1618), ("plugins/firstorder/formula.mli", 56, 1616, 1651), 0), 0, Tag1 ("Firstorder_plugin__Formula", 30)); (("LLor", 1188), ([(Tag3 (Tag1 ((Tag2 ("Constr")), "pinductive"), 0, (0)), 100000000, 0, -59); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -61)], (0)), 100000000, 0, -60)]), 0, (("plugins/firstorder/formula.mli", 57, 1652, 1654), ("plugins/firstorder/formula.mli", 57, 1652, 1686), 0), 0, Tag1 ("Firstorder_plugin__Formula", 31)); (("LLforall", 1189), ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -62)]), 0, (("plugins/firstorder/formula.mli", 58, 1687, 1689), ("plugins/firstorder/formula.mli", 58, 1687, 1709), 0), 0, Tag1 ("Firstorder_plugin__Formula", 32)); (("LLexists", 1190), ([(Tag3 (Tag1 ((Tag2 ("Constr")), "pinductive"), 0, (0)), 100000000, 0, -63); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -65)], (0)), 100000000, 0, -64)]), 0, (("plugins/firstorder/formula.mli", 59, 1710, 1712), ("plugins/firstorder/formula.mli", 59, 1710, 1748), 0), 0, Tag1 ("Firstorder_plugin__Formula", 33)); (("LLarrow", 1191), ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -66); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -67); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -68)]), 0, (("plugins/firstorder/formula.mli", 60, 1749, 1751), ("plugins/firstorder/formula.mli", 60, 1749, 1784), 0), 0, Tag1 ("Firstorder_plugin__Formula", 34))], 0), 1, 0, 0, 0, 0, 0, (("plugins/firstorder/formula.mli", 53, 1542, 1542), ("plugins/firstorder/formula.mli", 60, 1749, 1784), 0), 0, 0, 0, Tag1 ("Firstorder_plugin__Formula", 27)), 1, 0); Tag1 (("left_pattern", 1328), (0, 0, Tag1 ([(("Lfalse", 1284), (0), 0, (("plugins/firstorder/formula.mli", 63, 1805, 1809), ("plugins/firstorder/formula.mli", 63, 1805, 1815), 0), 0, Tag1 ("Firstorder_plugin__Formula", 36)); (("Land", 1285), ([(Tag3 (Tag1 ((Tag2 ("Constr")), "pinductive"), 0, (0)), 100000000, 0, -45)]), 0, (("plugins/firstorder/formula.mli", 64, 1816, 1818), ("plugins/firstorder/formula.mli", 64, 1816, 1838), 0), 0, Tag1 ("Firstorder_plugin__Formula", 37)); (("Lor", 1286), ([(Tag3 (Tag1 ((Tag2 ("Constr")), "pinductive"), 0, (0)), 100000000, 0, -46)]), 0, (("plugins/firstorder/formula.mli", 65, 1839, 1841), ("plugins/firstorder/formula.mli", 65, 1839, 1860), 0), 0, Tag1 ("Firstorder_plugin__Formula", 38)); (("Lforall", 1287), ([(Tag3 (Tag1 ((Tag2 ("Constr")), "metavariable"), 0, (0)), 100000000, 0, -47); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -48); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -49)]), 0, (("plugins/firstorder/formula.mli", 66, 1861, 1863), ("plugins/firstorder/formula.mli", 66, 1861, 1900), 0), 0, Tag1 ("Firstorder_plugin__Formula", 39)); (("Lexists", 1288), ([(Tag3 (Tag1 ((Tag2 ("Constr")), "pinductive"), 0, (0)), 100000000, 0, -50)]), 0, (("plugins/firstorder/formula.mli", 67, 1901, 1903), ("plugins/firstorder/formula.mli", 67, 1901, 1926), 0), 0, Tag1 ("Firstorder_plugin__Formula", 40)); (("LA", 1289), ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -51); (Tag3 ((("left_arrow_pattern", 1327)), 0, (0)), 100000000, 0, -52)]), 0, (("plugins/firstorder/formula.mli", 68, 1927, 1929), ("plugins/firstorder/formula.mli", 68, 1927, 1962), 0), 0, Tag1 ("Firstorder_plugin__Formula", 41))], 0), 1, 0, 0, 0, 0, 0, (("plugins/firstorder/formula.mli", 62, 1786, 1786), ("plugins/firstorder/formula.mli", 68, 1927, 1962), 0), 0, 0, 0, Tag1 ("Firstorder_plugin__Formula", 35)), 1, 0); Tag1 (("identifier", 1329), ([((("_")), 100000000, 0, -44)], 1, Tag1 ([(("GoalId", 1291), (0), ((Tag3 ((("identifier", 1329)), [(Tag8 (([("Goal", (0))], (0, 100000000, 0, -39), 1, 0, 0)), 100000000, 0, -38)], (0)), 100000000, 0, -37)), (("plugins/firstorder/formula.mli", 71, 1984, 1984), ("plugins/firstorder/formula.mli", 71, 1984, 2015), 0), 0, Tag1 ("Firstorder_plugin__Formula", 43)); (("FormulaId", 1292), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -43)]), ((Tag3 ((("identifier", 1329)), [(Tag8 (([("Hyp", (0))], (0, 100000000, 0, -42), 1, 0, 0)), 100000000, 0, -41)], (0)), 100000000, 0, -40)), (("plugins/firstorder/formula.mli", 72, 2016, 2016), ("plugins/firstorder/formula.mli", 72, 2016, 2062), 0), 0, Tag1 ("Firstorder_plugin__Formula", 44))], 0), 1, 0, [63], [0], 0, 0, (("plugins/firstorder/formula.mli", 70, 1964, 1964), ("plugins/firstorder/formula.mli", 72, 2016, 2062), 0), 0, 0, 0, Tag1 ("Firstorder_plugin__Formula", 42)), 1, 0); Tag1 (("pattern", 1330), ([((("_")), 100000000, 0, -36)], 1, Tag1 ([(("LeftPattern", 1305), ([(Tag3 ((("left_pattern", 1328)), 0, (0)), 100000000, 0, -31)]), ((Tag3 ((("pattern", 1330)), [(Tag8 (([("Hyp", (0))], (0, 100000000, 0, -30), 1, 0, 0)), 100000000, 0, -29)], (0)), 100000000, 0, -28)), (("plugins/firstorder/formula.mli", 75, 2081, 2081), ("plugins/firstorder/formula.mli", 75, 2081, 2129), 0), 0, Tag1 ("Firstorder_plugin__Formula", 46)); (("RightPattern", 1306), ([(Tag3 ((("right_pattern", 1326)), 0, (0)), 100000000, 0, -35)]), ((Tag3 ((("pattern", 1330)), [(Tag8 (([("Goal", (0))], (0, 100000000, 0, -34), 1, 0, 0)), 100000000, 0, -33)], (0)), 100000000, 0, -32)), (("plugins/firstorder/formula.mli", 76, 2130, 2130), ("plugins/firstorder/formula.mli", 76, 2130, 2181), 0), 0, Tag1 ("Firstorder_plugin__Formula", 47))], 0), 1, 0, [63], [0], 0, 0, (("plugins/firstorder/formula.mli", 74, 2064, 2064), ("plugins/firstorder/formula.mli", 76, 2130, 2181), 0), 0, 0, 0, Tag1 ("Firstorder_plugin__Formula", 45)), 1, 0); Tag1 (("t", 1331), ([((("a")), 100000000, 0, -24)], 1, [[(("id", 1308), 0, (Tag3 ((("identifier", 1329)), [((("a")), 100000000, 0, -24)], (0)), 100000000, 0, -23), (("plugins/firstorder/formula.mli", 79, 2205, 2213), ("plugins/firstorder/formula.mli", 79, 2205, 2231), 0), 0, Tag1 ("Firstorder_plugin__Formula", 49)); (("constr", 1309), 0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -25), (("plugins/firstorder/formula.mli", 80, 2232, 2240), ("plugins/firstorder/formula.mli", 80, 2232, 2255), 0), 0, Tag1 ("Firstorder_plugin__Formula", 50)); (("pat", 1310), 0, (Tag3 ((("pattern", 1330)), [((("a")), 100000000, 0, -24)], (0)), 100000000, 0, -26), (("plugins/firstorder/formula.mli", 81, 2256, 2264), ("plugins/firstorder/formula.mli", 81, 2256, 2280), 0), 0, Tag1 ("Firstorder_plugin__Formula", 51)); (("atoms", 1311), 0, (Tag3 ((("atoms", 1324)), 0, (0)), 100000000, 0, -27), (("plugins/firstorder/formula.mli", 82, 2281, 2289), ("plugins/firstorder/formula.mli", 82, 2281, 2301), 0), 0, Tag1 ("Firstorder_plugin__Formula", 52))]], 0, 0, [63], [0], 0, 0, (("plugins/firstorder/formula.mli", 78, 2183, 2183), ("plugins/firstorder/formula.mli", 82, 2281, 2302), 0), 0, 0, 0, Tag1 ("Firstorder_plugin__Formula", 48)), 1, 0); Tag1 (("any_formula", 1332), (0, 0, Tag1 ([(("AnyFormula", 1313), ([(Tag3 ((("t", 1331)), [((("a")), 100000000, 0, -22)], (0)), 100000000, 0, -21)]), ((Tag3 ((("any_formula", 1332)), 0, (0)), 100000000, 0, -20)), (("plugins/firstorder/formula.mli", 84, 2304, 2323), ("plugins/firstorder/formula.mli", 84, 2304, 2355), 0), 0, Tag1 ("Firstorder_plugin__Formula", 54))], 0), 1, 0, 0, 0, 0, 0, (("plugins/firstorder/formula.mli", 84, 2304, 2304), ("plugins/firstorder/formula.mli", 84, 2304, 2355), 0), 0, 0, 1, Tag1 ("Firstorder_plugin__Formula", 53)), 1, 0); (("build_formula", 1333), ((Tag1 (("flags"), (Tag3 ((("flags", 1315)), 0, (0)), 100000000, 0, -19), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -18), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -17), (Tag1 (0, (Tag3 ((("side", 1325)), [((("a")), 100000000, 0, -11)], (0)), 100000000, 0, -16), (Tag1 (0, (Tag3 ((("identifier", 1329)), [((("a")), 100000000, 0, -11)], (0)), 100000000, 0, -15), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -14), (Tag1 (0, (Tag3 ((("counter", 1319)), 0, (0)), 100000000, 0, -13), (Tag3 ((("sum", 1318)), [(Tag3 ((("t", 1331)), [((("a")), 100000000, 0, -11)], (0)), 100000000, 0, -10); (Tag3 ((("atom", 1322)), 0, (0)), 100000000, 0, -12)], (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("plugins/firstorder/formula.mli", 86, 2357, 2357), ("plugins/firstorder/formula.mli", 87, 2460, 2489), 0), 0, Tag1 ("Firstorder_plugin__Formula", 55)), 0)], "Firstorder_plugin__Formula", [("Firstorder_plugin__Formula", ("\251\018G\248\241\193\170\000\146\149\159O,\183o\145")); ("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Vmemitcodes", ("wCd\138\165\158DD\241gH\236.\210\197\247")); ("Vmbytecodes", ("\025\021\151\137Dx\149W\236+[\143f\208\160\016")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Unix", (":B72R\011\005Sj\189)\011\239PH\254")); ("UnivSubst", ("\190qu\031mc\130\181\003G]\132\"\219m)")); ("UnivProblem", ("6'\161\018\181\001.\253\000\141a6\171\1727\155")); ("UnivNames", ("%\151_\209%+JM$n\001\232\194n\178N")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UState", ("SD\203\215|\136\n\251\239\208\148\215C\n\167\005")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Summary", ("\148G\135\226\024L3\246\021\028U\146\164`\253\250")); ("Store", ("/dT\252\145\179pq\216{\181\206\190K+U")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("Section", ("\245\207\b\021\142v=\155#w\246}\"4b\006")); ("Safe_typing", (")\250?\164\145\132\241\127\186\152h+\145\"\237l")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("Range", ("\218\130\001r\237\r\144\171\164\021l\155\196\143sg")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("Nativevalues", ("8:\007\025e\226c,\001\171\146#l\210\171\152")); ("Nativelib", ("V\239\205Y1\147E:,\176\196Hy\1483|")); ("Nativecode", ("\190\185\255\006m\012\210\163\138Rz\247\15283\183")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Monad", ("\244\171T\157\194p\187\160\149\195{\132\222\020\253\148")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Libnames", ("fp\0255\167\162\209\153\137\161\169#\246\193\003\198")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hook", ("\183\194\223\003\155\169',\187\240a;E\b\1396")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Genlambda", ("\170}\024\241\141\222\136S\169\219\2212i\134KI")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Firstorder_plugin", ("\022o\134\200\217\182Qo\201\176\165\144\172oj\236")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evd", ("\211\205p\193\216\129r\006\239oN\142ar\196\175")); ("Evar_kinds", ("\023L\186\132\218}\254\221\185\198\220\200h\003{\021")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Environ", ("\171b\1579\229<\003Z\147IL\225X\254\182\204")); ("Entries", ("\172\201\198\221Ap\027_{\174\141C\021\";p")); ("EConstr", ("\201aW\156\157;N\004\201V\208\006L\166\211)")); ("Dyn", ("\131z`\205v\2306\007x\027&K.?;\169")); ("Declarations", ("\239\137n\019\030w$\182\166z^{\b\206\163\175")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Conversion", ("\158\150&\195M\tv\127|\029\158RRK\211A")); ("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CUnix", ("\140Zl\153\167\011J\015\005|th\247OTu")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CEphemeron", ("\204I\179-\206(x4\173\229\250\001PkH\151")); ("CDebug", ("^4\210p7\239!3\138\138\213?\239`\250\157")); ("CClosure", ("\167\b\022\241V-\r\253\b\002\000j]\223%\142")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])
'a side -> 'a identifier -> EConstr.types -> counter -> ('a t, atom) sum

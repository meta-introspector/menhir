module type S = Base__Stack_intf.S
type 'a t
val t_of_sexp : (Sexplib0__.Sexp.t -> 'a) -> Sexplib0__.Sexp.t -> 'a t
val sexp_of_t : ('a -> Sexplib0__.Sexp.t) -> 'a t -> Sexplib0__.Sexp.t
val t_sexp_grammar :
  'a Sexplib0.Sexp_grammar.t -> 'a t Sexplib0.Sexp_grammar.t
val invariant : 'a Base__Invariant_intf.inv -> 'a t Base__Invariant_intf.inv
val mem : 'a t -> 'a -> equal:('a -> 'a -> bool) -> bool
val length : 'a t -> int
val is_empty : 'a t -> bool
val iter : 'a t -> f:('a -> unit) -> unit
val fold : 'a t -> init:'acc -> f:('acc -> 'a -> 'acc) -> 'acc
val fold_result :
  'a t ->
  init:'acc ->
  f:('acc -> 'a -> ('acc, 'e) Base__.Result.t) -> ('acc, 'e) Base__.Result.t
val fold_until :
  'a t ->
  init:'acc ->
  f:('acc -> 'a -> ('acc, 'final) Base__Container_intf.Continue_or_stop.t) ->
  finish:('acc -> 'final) -> 'final
val exists : 'a t -> f:('a -> bool) -> bool
val for_all : 'a t -> f:('a -> bool) -> bool
val count : 'a t -> f:('a -> bool) -> int
val sum :
  (module Base__Container_intf.Summable with type t = 'sum) ->
  'a t -> f:('a -> 'sum) -> 'sum
val find : 'a t -> f:('a -> bool) -> 'a option
val find_map : 'a t -> f:('a -> 'b option) -> 'b option
val to_list : 'a t -> 'a list
val to_array : 'a t -> 'a array
val min_elt : 'a t -> compare:('a -> 'a -> int) -> 'a option
val max_elt : 'a t -> compare:('a -> 'a -> int) -> 'a option
val of_list : 'a list -> 'a t
val create : unit -> 'a t
val singleton : 'a -> 'a t
val push : 'a t -> 'a -> unit
val pop : 'a t -> 'a option
val pop_exn : 'a t -> 'a
val top : 'a t -> 'a option
val top_exn : 'a t -> 'a
val clear : 'a t -> unit
val copy : 'a t -> 'a t
val until_empty : 'a t -> ('a -> unit) -> unit
val filter_map : 'a t -> f:('a -> 'b option) -> 'b t
val filter : 'a t -> f:('a -> bool) -> 'a t
val filter_inplace : 'a t -> f:('a -> bool) -> unit
val capacity : 'a t -> int("DEBUG:rule", [Tag4 (("S", 1497), (((Tag1 ((Tag2 ("Base__Stack_intf")), "S"))), 0, (("src/stack_intf.ml", 80, 2840, 2842), ("src/stack_intf.ml", 80, 2840, 2859), 0), Tag1 ("Base__Stack_intf", 21)), 0); Tag1 (("t", 1498), ([((("a")), 100000000, 0, -226)], 1, 0, 1, 0, [7], [2], 0, 0, (("src/stack_intf.ml", 7, 152, 154), ("src/stack_intf.ml", 7, 152, 202), 0), [(("deriving_inline", (("src/stack_intf.ml", 7, 152, 167), ("src/stack_intf.ml", 7, 152, 182), 0)), ([([(Tag8 ([(((("sexp"), (("src/stack_intf.ml", 7, 152, 183), ("src/stack_intf.ml", 7, 152, 187), 0))), (("src/stack_intf.ml", 7, 152, 183), ("src/stack_intf.ml", 7, 152, 187), 0), 0, 0); (((("sexp_grammar"), (("src/stack_intf.ml", 7, 152, 189), ("src/stack_intf.ml", 7, 152, 201), 0))), (("src/stack_intf.ml", 7, 152, 189), ("src/stack_intf.ml", 7, 152, 201), 0), 0, 0)]), (("src/stack_intf.ml", 7, 152, 183), ("src/stack_intf.ml", 7, 152, 201), 0), 0, 0)], (("src/stack_intf.ml", 7, 152, 183), ("src/stack_intf.ml", 7, 152, 201), 0))]), (("src/stack_intf.ml", 7, 152, 164), ("src/stack_intf.ml", 7, 152, 202), 0))], 0, 0, Tag1 ("Base__Stack_intf", 0)), 1, 0); (("t_of_sexp", 1499), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -225), ((("a")), 100000000, 0, -222), 0), 100000000, 0, -224), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -223), (Tag3 ((("t", 1498)), [((("a")), 100000000, 0, -222)], (0)), 100000000, 0, -221), 0), 100000000, 0, -220), 0), 100000000, 0, -219), 0, (("src/stack_intf.ml", 9, 204, 214), ("src/stack_intf.ml", 9, 204, 257), 0), 0, Tag1 ("Sexplib0__Sexpable", 5)), 0); (("sexp_of_t", 1500), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -216), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -218), 0), 100000000, 0, -217), (Tag1 (0, (Tag3 ((("t", 1498)), [((("a")), 100000000, 0, -216)], (0)), 100000000, 0, -215), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -214), 0), 100000000, 0, -213), 0), 100000000, 0, -212), 0, (("src/stack_intf.ml", 9, 204, 214), ("src/stack_intf.ml", 9, 204, 257), 0), 0, Tag1 ("Sexplib0__Sexpable", 6)), 0); (("t_sexp_grammar", 1501), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [((("a")), 100000000, 0, -210)], (0)), 100000000, 0, -211), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("t", 1498)), [((("a")), 100000000, 0, -210)], (0)), 100000000, 0, -209)], (0)), 100000000, 0, -208), 0), 100000000, 0, -207), 0, (("src/stack_intf.ml", 11, 259, 261), ("src/stack_intf.ml", 11, 259, 340), 0), 0, Tag1 ("Base__Stack_intf", 3)), 0); (("invariant", 1502), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Invariant_intf")), "inv"), [((("a")), 100000000, 0, -205)], (0)), 100000000, 0, -206), (Tag3 (Tag1 ((Tag2 ("Base__Invariant_intf")), "inv"), [(Tag3 ((("t", 1498)), [((("a")), 100000000, 0, -205)], (0)), 100000000, 0, -204)], (0)), 100000000, 0, -203), 0), 100000000, 0, -202), 0, (("src/stack_intf.ml", 15, 354, 364), ("src/stack_intf.ml", 15, 354, 399), 0), 0, Tag1 ("Base__Invariant_intf", 6)), 0); (("mem", 1503), ((Tag1 (0, (Tag3 ((("t", 1498)), [((("a")), 100000000, 0, -200)], (0)), 100000000, 0, -201), (Tag1 (0, ((("a")), 100000000, 0, -200), (Tag1 (("equal"), (Tag1 (0, ((("a")), 100000000, 0, -200), (Tag1 (0, ((("a")), 100000000, 0, -200), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -199), 0), 100000000, 0, -198), 0), 100000000, 0, -197), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -196), 0), 100000000, 0, -195), 0), 100000000, 0, -194), 0), 100000000, 0, -193), 0, (("src/stack_intf.ml", 26, 885, 895), ("src/stack_intf.ml", 26, 885, 930), 0), 0, Tag1 ("Base__Container_intf", 52)), 0); (("length", 1504), ((Tag1 (0, (Tag3 ((("t", 1498)), [((("a")), 100000000, 0, -192)], (0)), 100000000, 0, -191), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -190), 0), 100000000, 0, -189), 0, (("src/stack_intf.ml", 26, 885, 895), ("src/stack_intf.ml", 26, 885, 930), 0), 0, Tag1 ("Base__Container_intf", 53)), 0); (("is_empty", 1505), ((Tag1 (0, (Tag3 ((("t", 1498)), [((("a")), 100000000, 0, -188)], (0)), 100000000, 0, -187), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -186), 0), 100000000, 0, -185), 0, (("src/stack_intf.ml", 26, 885, 895), ("src/stack_intf.ml", 26, 885, 930), 0), 0, Tag1 ("Base__Container_intf", 54)), 0); (("iter", 1506), ((Tag1 (0, (Tag3 ((("t", 1498)), [((("a")), 100000000, 0, -183)], (0)), 100000000, 0, -184), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -183), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -182), 0), 100000000, 0, -181), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -180), 0), 100000000, 0, -179), 0), 100000000, 0, -178), 0, (("src/stack_intf.ml", 26, 885, 895), ("src/stack_intf.ml", 26, 885, 930), 0), 0, Tag1 ("Base__Container_intf", 55)), 0); (("fold", 1507), ((Tag1 (0, (Tag3 ((("t", 1498)), [((("a")), 100000000, 0, -176)], (0)), 100000000, 0, -177), (Tag1 (("init"), ((("acc")), 100000000, 0, -173), (Tag1 (("f"), (Tag1 (0, ((("acc")), 100000000, 0, -173), (Tag1 (0, ((("a")), 100000000, 0, -176), ((("acc")), 100000000, 0, -173), 0), 100000000, 0, -175), 0), 100000000, 0, -174), ((("acc")), 100000000, 0, -173), 0), 100000000, 0, -172), 0), 100000000, 0, -171), 0), 100000000, 0, -170), 0, (("src/stack_intf.ml", 26, 885, 895), ("src/stack_intf.ml", 26, 885, 930), 0), 0, Tag1 ("Base__Container_intf", 56)), 0); (("fold_result", 1508), ((Tag1 (0, (Tag3 ((("t", 1498)), [((("a")), 100000000, 0, -168)], (0)), 100000000, 0, -169), (Tag1 (("init"), ((("acc")), 100000000, 0, -163), (Tag1 (("f"), (Tag1 (0, ((("acc")), 100000000, 0, -163), (Tag1 (0, ((("a")), 100000000, 0, -168), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Result"), "t"), [((("acc")), 100000000, 0, -163); ((("e")), 100000000, 0, -164)], (0)), 100000000, 0, -167), 0), 100000000, 0, -166), 0), 100000000, 0, -165), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Result"), "t"), [((("acc")), 100000000, 0, -163); ((("e")), 100000000, 0, -164)], (0)), 100000000, 0, -162), 0), 100000000, 0, -161), 0), 100000000, 0, -160), 0), 100000000, 0, -159), 0, (("src/stack_intf.ml", 26, 885, 895), ("src/stack_intf.ml", 26, 885, 930), 0), 0, Tag1 ("Base__Container_intf", 57)), 0); (("fold_until", 1509), ((Tag1 (0, (Tag3 ((("t", 1498)), [((("a")), 100000000, 0, -157)], (0)), 100000000, 0, -158), (Tag1 (("init"), ((("acc")), 100000000, 0, -153), (Tag1 (("f"), (Tag1 (0, ((("acc")), 100000000, 0, -153), (Tag1 (0, ((("a")), 100000000, 0, -157), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Container_intf")), "Continue_or_stop"), "t"), [((("acc")), 100000000, 0, -153); ((("final")), 100000000, 0, -151)], (0)), 100000000, 0, -156), 0), 100000000, 0, -155), 0), 100000000, 0, -154), (Tag1 (("finish"), (Tag1 (0, ((("acc")), 100000000, 0, -153), ((("final")), 100000000, 0, -151), 0), 100000000, 0, -152), ((("final")), 100000000, 0, -151), 0), 100000000, 0, -150), 0), 100000000, 0, -149), 0), 100000000, 0, -148), 0), 100000000, 0, -147), 0, (("src/stack_intf.ml", 26, 885, 895), ("src/stack_intf.ml", 26, 885, 930), 0), 0, Tag1 ("Base__Container_intf", 58)), 0); (("exists", 1510), ((Tag1 (0, (Tag3 ((("t", 1498)), [((("a")), 100000000, 0, -145)], (0)), 100000000, 0, -146), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -145), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -144), 0), 100000000, 0, -143), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -142), 0), 100000000, 0, -141), 0), 100000000, 0, -140), 0, (("src/stack_intf.ml", 26, 885, 895), ("src/stack_intf.ml", 26, 885, 930), 0), 0, Tag1 ("Base__Container_intf", 59)), 0); (("for_all", 1511), ((Tag1 (0, (Tag3 ((("t", 1498)), [((("a")), 100000000, 0, -138)], (0)), 100000000, 0, -139), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -138), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -137), 0), 100000000, 0, -136), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -135), 0), 100000000, 0, -134), 0), 100000000, 0, -133), 0, (("src/stack_intf.ml", 26, 885, 895), ("src/stack_intf.ml", 26, 885, 930), 0), 0, Tag1 ("Base__Container_intf", 60)), 0); (("count", 1512), ((Tag1 (0, (Tag3 ((("t", 1498)), [((("a")), 100000000, 0, -131)], (0)), 100000000, 0, -132), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -131), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -130), 0), 100000000, 0, -129), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -128), 0), 100000000, 0, -127), 0), 100000000, 0, -126), 0, (("src/stack_intf.ml", 26, 885, 895), ("src/stack_intf.ml", 26, 885, 930), 0), 0, Tag1 ("Base__Container_intf", 61)), 0); (("sum", 1513), ((Tag1 (0, (Tag11 (Tag1 ((Tag2 ("Base__Container_intf")), "Summable"), [(("t"), ((("sum")), 100000000, 0, -121))]), 100000000, 0, -125), (Tag1 (0, (Tag3 ((("t", 1498)), [((("a")), 100000000, 0, -123)], (0)), 100000000, 0, -124), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -123), ((("sum")), 100000000, 0, -121), 0), 100000000, 0, -122), ((("sum")), 100000000, 0, -121), 0), 100000000, 0, -120), 0), 100000000, 0, -119), 0), 100000000, 0, -118), 0, (("src/stack_intf.ml", 26, 885, 895), ("src/stack_intf.ml", 26, 885, 930), 0), 0, Tag1 ("Base__Container_intf", 63)), 0); (("find", 1514), ((Tag1 (0, (Tag3 ((("t", 1498)), [((("a")), 100000000, 0, -114)], (0)), 100000000, 0, -117), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -114), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -116), 0), 100000000, 0, -115), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -114)], (0)), 100000000, 0, -113), 0), 100000000, 0, -112), 0), 100000000, 0, -111), 0, (("src/stack_intf.ml", 26, 885, 895), ("src/stack_intf.ml", 26, 885, 930), 0), 0, Tag1 ("Base__Container_intf", 64)), 0); (("find_map", 1515), ((Tag1 (0, (Tag3 ((("t", 1498)), [((("a")), 100000000, 0, -109)], (0)), 100000000, 0, -110), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -109), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -106)], (0)), 100000000, 0, -108), 0), 100000000, 0, -107), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -106)], (0)), 100000000, 0, -105), 0), 100000000, 0, -104), 0), 100000000, 0, -103), 0, (("src/stack_intf.ml", 26, 885, 895), ("src/stack_intf.ml", 26, 885, 930), 0), 0, Tag1 ("Base__Container_intf", 65)), 0); (("to_list", 1516), ((Tag1 (0, (Tag3 ((("t", 1498)), [((("a")), 100000000, 0, -101)], (0)), 100000000, 0, -102), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -101)], (0)), 100000000, 0, -100), 0), 100000000, 0, -99), 0, (("src/stack_intf.ml", 26, 885, 895), ("src/stack_intf.ml", 26, 885, 930), 0), 0, Tag1 ("Base__Container_intf", 66)), 0); (("to_array", 1517), ((Tag1 (0, (Tag3 ((("t", 1498)), [((("a")), 100000000, 0, -97)], (0)), 100000000, 0, -98), (Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -97)], (0)), 100000000, 0, -96), 0), 100000000, 0, -95), 0, (("src/stack_intf.ml", 26, 885, 895), ("src/stack_intf.ml", 26, 885, 930), 0), 0, Tag1 ("Base__Container_intf", 67)), 0); (("min_elt", 1518), ((Tag1 (0, (Tag3 ((("t", 1498)), [((("a")), 100000000, 0, -90)], (0)), 100000000, 0, -94), (Tag1 (("compare"), (Tag1 (0, ((("a")), 100000000, 0, -90), (Tag1 (0, ((("a")), 100000000, 0, -90), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -93), 0), 100000000, 0, -92), 0), 100000000, 0, -91), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -90)], (0)), 100000000, 0, -89), 0), 100000000, 0, -88), 0), 100000000, 0, -87), 0, (("src/stack_intf.ml", 26, 885, 895), ("src/stack_intf.ml", 26, 885, 930), 0), 0, Tag1 ("Base__Container_intf", 68)), 0); (("max_elt", 1519), ((Tag1 (0, (Tag3 ((("t", 1498)), [((("a")), 100000000, 0, -82)], (0)), 100000000, 0, -86), (Tag1 (("compare"), (Tag1 (0, ((("a")), 100000000, 0, -82), (Tag1 (0, ((("a")), 100000000, 0, -82), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -85), 0), 100000000, 0, -84), 0), 100000000, 0, -83), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -82)], (0)), 100000000, 0, -81), 0), 100000000, 0, -80), 0), 100000000, 0, -79), 0, (("src/stack_intf.ml", 26, 885, 895), ("src/stack_intf.ml", 26, 885, 930), 0), 0, Tag1 ("Base__Container_intf", 69)), 0); (("of_list", 1520), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -77)], (0)), 100000000, 0, -78), (Tag3 ((("t", 1498)), [((("a")), 100000000, 0, -77)], (0)), 100000000, 0, -76), 0), 100000000, 0, -75), 0, (("src/stack_intf.ml", 30, 1052, 1054), ("src/stack_intf.ml", 30, 1052, 1083), 0), 0, Tag1 ("Base__Stack_intf", 6)), 0); (("create", 1521), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -74), (Tag3 ((("t", 1498)), [((0), 100000000, 0, -73)], (0)), 100000000, 0, -72), 0), 100000000, 0, -71), 0, (("src/stack_intf.ml", 33, 1130, 1132), ("src/stack_intf.ml", 33, 1130, 1156), 0), 0, Tag1 ("Base__Stack_intf", 7)), 0); (("singleton", 1522), ((Tag1 (0, ((("a")), 100000000, 0, -70), (Tag3 ((("t", 1498)), [((("a")), 100000000, 0, -70)], (0)), 100000000, 0, -69), 0), 100000000, 0, -68), 0, (("src/stack_intf.ml", 36, 1222, 1224), ("src/stack_intf.ml", 36, 1222, 1250), 0), 0, Tag1 ("Base__Stack_intf", 8)), 0); (("push", 1523), ((Tag1 (0, (Tag3 ((("t", 1498)), [((("a")), 100000000, 0, -66)], (0)), 100000000, 0, -67), (Tag1 (0, ((("a")), 100000000, 0, -66), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -65), 0), 100000000, 0, -64), 0), 100000000, 0, -63), 0, (("src/stack_intf.ml", 39, 1306, 1308), ("src/stack_intf.ml", 39, 1306, 1337), 0), 0, Tag1 ("Base__Stack_intf", 9)), 0); (("pop", 1524), ((Tag1 (0, (Tag3 ((("t", 1498)), [((("a")), 100000000, 0, -61)], (0)), 100000000, 0, -62), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -61)], (0)), 100000000, 0, -60), 0), 100000000, 0, -59), 0, (("src/stack_intf.ml", 43, 1453, 1455), ("src/stack_intf.ml", 43, 1453, 1482), 0), 0, Tag1 ("Base__Stack_intf", 10)), 0); (("pop_exn", 1525), ((Tag1 (0, (Tag3 ((("t", 1498)), [((("a")), 100000000, 0, -57)], (0)), 100000000, 0, -58), ((("a")), 100000000, 0, -57), 0), 100000000, 0, -56), 0, (("src/stack_intf.ml", 45, 1484, 1486), ("src/stack_intf.ml", 45, 1484, 1510), 0), 0, Tag1 ("Base__Stack_intf", 11)), 0); (("top", 1526), ((Tag1 (0, (Tag3 ((("t", 1498)), [((("a")), 100000000, 0, -54)], (0)), 100000000, 0, -55), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -54)], (0)), 100000000, 0, -53), 0), 100000000, 0, -52), 0, (("src/stack_intf.ml", 49, 1639, 1641), ("src/stack_intf.ml", 49, 1639, 1668), 0), 0, Tag1 ("Base__Stack_intf", 12)), 0); (("top_exn", 1527), ((Tag1 (0, (Tag3 ((("t", 1498)), [((("a")), 100000000, 0, -50)], (0)), 100000000, 0, -51), ((("a")), 100000000, 0, -50), 0), 100000000, 0, -49), 0, (("src/stack_intf.ml", 51, 1670, 1672), ("src/stack_intf.ml", 51, 1670, 1696), 0), 0, Tag1 ("Base__Stack_intf", 13)), 0); (("clear", 1528), ((Tag1 (0, (Tag3 ((("t", 1498)), [((0), 100000000, 0, -48)], (0)), 100000000, 0, -47), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -46), 0), 100000000, 0, -45), 0, (("src/stack_intf.ml", 54, 1749, 1751), ("src/stack_intf.ml", 54, 1749, 1774), 0), 0, Tag1 ("Base__Stack_intf", 14)), 0); (("copy", 1529), ((Tag1 (0, (Tag3 ((("t", 1498)), [((("a")), 100000000, 0, -43)], (0)), 100000000, 0, -44), (Tag3 ((("t", 1498)), [((("a")), 100000000, 0, -43)], (0)), 100000000, 0, -42), 0), 100000000, 0, -41), 0, (("src/stack_intf.ml", 57, 1817, 1819), ("src/stack_intf.ml", 57, 1817, 1842), 0), 0, Tag1 ("Base__Stack_intf", 15)), 0); (("until_empty", 1530), ((Tag1 (0, (Tag3 ((("t", 1498)), [((("a")), 100000000, 0, -39)], (0)), 100000000, 0, -40), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -39), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -38), 0), 100000000, 0, -37), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -36), 0), 100000000, 0, -35), 0), 100000000, 0, -34), 0, (("src/stack_intf.ml", 62, 2082, 2084), ("src/stack_intf.ml", 62, 2082, 2140), 0), 0, Tag1 ("Base__Stack_intf", 16)), 0); (("filter_map", 1531), ((Tag1 (0, (Tag3 ((("t", 1498)), [((("a")), 100000000, 0, -32)], (0)), 100000000, 0, -33), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -32), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -29)], (0)), 100000000, 0, -31), 0), 100000000, 0, -30), (Tag3 ((("t", 1498)), [((("b")), 100000000, 0, -29)], (0)), 100000000, 0, -28), 0), 100000000, 0, -27), 0), 100000000, 0, -26), 0, (("src/stack_intf.ml", 66, 2247, 2249), ("src/stack_intf.ml", 66, 2247, 2311), 0), 0, Tag1 ("Base__Stack_intf", 17)), 0); (("filter", 1532), ((Tag1 (0, (Tag3 ((("t", 1498)), [((("a")), 100000000, 0, -22)], (0)), 100000000, 0, -25), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -22), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -24), 0), 100000000, 0, -23), (Tag3 ((("t", 1498)), [((("a")), 100000000, 0, -22)], (0)), 100000000, 0, -21), 0), 100000000, 0, -20), 0), 100000000, 0, -19), 0, (("src/stack_intf.ml", 69, 2397, 2399), ("src/stack_intf.ml", 69, 2397, 2452), 0), 0, Tag1 ("Base__Stack_intf", 18)), 0); (("filter_inplace", 1533), ((Tag1 (0, (Tag3 ((("t", 1498)), [((("a")), 100000000, 0, -17)], (0)), 100000000, 0, -18), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -17), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -16), 0), 100000000, 0, -15), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -14), 0), 100000000, 0, -13), 0), 100000000, 0, -12), 0, (("src/stack_intf.ml", 72, 2537, 2539), ("src/stack_intf.ml", 72, 2537, 2600), 0), 0, Tag1 ("Base__Stack_intf", 19)), 0); (("capacity", 1534), ((Tag1 (0, (Tag3 ((("t", 1498)), [((0), 100000000, 0, -11)], (0)), 100000000, 0, -10), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("src/stack_intf.ml", 85, 2954, 2956), ("src/stack_intf.ml", 85, 2954, 2981), 0), 0, Tag1 ("Base__Stack_intf", 22)), 0); (("set_capacity", 1535), ((Tag1 (0, (Tag3 ((("t", 1498)), [((0), 100000000, 0, -7)], (0)), 100000000, 0, -6), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -5), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/stack_intf.ml", 89, 3150, 3152), ("src/stack_intf.ml", 89, 3150, 3189), 0), 0, Tag1 ("Base__Stack_intf", 23)), 0)], "Base__Stack", [("Base__Stack", ("E\153\206\185\250\134k\216\150~5.\160/?\204")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__StringLabels", ("\134F\024\226\216Is#\223\230\234\169Z\206Gc")); ("Stdlib__StdLabels", (".\193\n\229\139\017\212C-ZA\\kz-\128")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Printf", ("\215<\139]\021\142\224E\245m\198qc(W\229")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__MoreLabels", ("\248\232\248\254`<\230\241\161U\193U\1466J\238")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__ListLabels", ("*\194\012\191\020%\170\249m\002\180\178hk\205\220")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shadow_stdlib", ("\219zi\164\203\158e)\232\221\196\168\138x\142\018")); ("Sexplib0__Sexpable", ("\251${\207(\249/z\242\255\250^\141\156\210e")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv_error", ("kzv!\151~\198P\000\165\176d\007\251p\232")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Base_internalhash_types", ("0\148#2\226\223\018\135\173>!\020\237\017\255\149")); ("Base__Sys0", ("\206z\231\154s\\\136\2364\131\005\014\031\152m3")); ("Base__String0", ("\212\221L\220\245\255\162P\228\224\189\216\135H\149O")); ("Base__Stack_intf", ("CH\132\188S\220\026\165\024\205\173\153\183L:\200")); ("Base__Source_code_position0", ("_\003P6\254\029\206\005\130\136\180\019\145\230\000M")); ("Base__Sexp", ("\154\187\171&\209=\153[\236\250!U\174`\190T")); ("Base__Result", ("\204|\215\173FMa\2511<&\215T\194$\228")); ("Base__Printf", ("\000\196c,\214\127\226\174\220\190\253z!\242\028\250")); ("Base__Ppx_hash_lib", ("\199\141\178\193\006\209L\007^\020(\131\224sn8")); ("Base__Ppx_compare_lib", ("\243\186~\233\228\199Ah\181.\223\004e\231\129S")); ("Base__Poly0", ("\230;\143\234\255.H\132KOe7\155\\\023f")); ("Base__Monad_intf", ("\208\203\163\152\184O\130?\012:\168\247}\018\253\155")); ("Base__Monad", ("!\244\168\2352=\137Lm\219\129K\216\199\145\\")); ("Base__Invariant_intf", ("\213\204\238\235\236[\198\145\028\2392\015\243\177S\249")); ("Base__Invariant", ("\135\153\136\\\129SD\228\202l\255\152\139\253\015\201")); ("Base__Int0", ("N\1310\012\227\254\000\255_\222!\018\016\003\1779")); ("Base__Import0", ("\156\129U\197Y[\\\153\017Ho\203\173\204\220\020")); ("Base__Import", ("\014\187\247\141\187\181\142g\176:s_,\181\219\209")); ("Base__Hash_intf", ("h\004P\218\1531G\127\212\208A\024\140\164iq")); ("Base__Hash", ("\206Rc\194\234{s3\248\165\024\162\203{\206\206")); ("Base__Globalize", ("<\243w~.\180\196t\159\193\174[\227\139\215G")); ("Base__Field", ("8In\234X\202\188G\186\208$\192\175\136\214v")); ("Base__Either0", ("!9-\011n\2077eZ\212\031c\227\029\206\t")); ("Base__Container_intf", ("\170vo*\208\209\141\219\196\168\236l\016\246\012c")); ("Base__Container", ("\191|>_\153W\235M\180uKz\214w`q")); ("Base__Comparator", ("\002\135z7b\025&\207\t\188\239&U3R\167")); ("Base__Bool0", ("\177f\254p\023\143&\239\020\136\206\242~\018F\251")); ("Base__", ("p\252\007\139\128\163W\025+\0225\001\246|P\158"))], [(0)])

val set_capacity : 'a t -> int -> unit

val error1 : Lexing.position -> ('a, out_channel, unit, 'b) format4 -> 'a
val error2 : Lexing.lexbuf -> ('a, out_channel, unit, 'b) format4 -> 'a
val int_of_string : Lexing.position -> string -> int
val savestart : Lexing.lexbuf -> (Lexing.lexbuf -> 'a) -> 'a
val overwrite : bytes -> int -> char -> char -> unit
type monster = {
  pos : Dune__exe.Positions.t;
  check : check;
  transform : int -> bytes -> unit;
  keyword : MenhirSdk.Keyword.keyword option;
  oid : string option;
}
and check = Dune__exe.Settings.dollars -> string option array -> unit
val none : check
val syntaxerror : Dune__exe.Positions.t -> monster
val check_dollar : Dune__exe.Positions.t -> int -> check
val check_producer : Dune__exe.Positions.t -> string -> check
val dollar : Dune__exe.Positions.t -> int -> monster
val position :
  Dune__exe.Positions.t ->
  string -> string -> string option -> string option -> monster
val no_monsters : monster list -> unit
val gather_oid :
  Dune__exe.StringSet.t ->
  Dune__exe.StringSet.elt option -> Dune__exe.StringSet.t
val gather_oids :
  Dune__exe.StringSet.elt option array -> Dune__exe.StringSet.t
val gather_monsters : monster list -> Dune__exe.StringSet.t
val mk_stretch :
  Lexing.position ->
  Lexing.position -> bool -> monster list -> Dune__exe.Stretch.t
val stretch_of_id : string Dune__exe.Positions.located -> Dune__exe.Stretch.t
val reserved : (string, unit) Hashtbl.t
val table : ('a * 'b) list -> ('a, 'b) Hashtbl.t
val directives : (string, Dune__exe.Parser.token) Hashtbl.t
val char_for_backslash : char -> char
val __ocaml_lex_tables : Lexing.lex_tables
val main : Lexing.lexbuf -> Dune__exe.Parser.token
val __ocaml_lex_main_rec : Lexing.lexbuf -> int -> Dune__exe.Parser.token
val comment : Lexing.position -> Lexing.lexbuf -> unit
val __ocaml_lex_comment_rec : Lexing.position -> Lexing.lexbuf -> int -> unit
val ocamltype : Lexing.position -> Lexing.lexbuf -> Dune__exe.Parser.token
val __ocaml_lex_ocamltype_rec :
  Lexing.position -> Lexing.lexbuf -> int -> Dune__exe.Parser.token
val action :
  bool ->
  Lexing.position ->
  monster list -> Lexing.lexbuf -> Lexing.position * monster list
val __ocaml_lex_action_rec :
  bool ->
  Lexing.position ->
  monster list -> Lexing.lexbuf -> int -> Lexing.position * monster list
val parentheses :
  Lexing.position ->
  monster list -> Lexing.lexbuf -> Lexing.position * monster list
val __ocaml_lex_parentheses_rec :
  Lexing.position ->
  monster list -> Lexing.lexbuf -> int -> Lexing.position * monster list
val attribute : Lexing.position -> Lexing.lexbuf -> Lexing.position
val __ocaml_lex_attribute_rec :
  Lexing.position -> Lexing.lexbuf -> int -> Lexing.position
val ocamlcomment : Lexing.position -> Lexing.lexbuf -> unit
val __ocaml_lex_ocamlcomment_rec :
  Lexing.position -> Lexing.lexbuf -> int -> unit
val string : Lexing.position -> Lexing.lexbuf -> unit
val __ocaml_lex_string_rec : Lexing.position -> Lexing.lexbuf -> int -> unit
val record_string : Lexing.position -> Buffer.t -> Lexing.lexbuf -> string
val __ocaml_lex_record_string_rec :
  Lexing.position -> Buffer.t -> Lexing.lexbuf -> int -> string
val decode_string : Buffer.t -> Lexing.lexbuf -> unit
val __ocaml_lex_decode_string_rec : Buffer.t -> Lexing.lexbuf -> int -> unit
val char : Lexing.lexbuf -> unit
val __ocaml_lex_char_rec : Lexing.lexbuf -> int -> unit
val finish : Lexing.lexbuf -> Lexing.position
("DEBUG:rule", [(("error1", 1689), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -226), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format4"), [((0), 100000000, 0, -221); (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -223); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -224); ((0), 100000000, 0, -225)], (0)), 100000000, 0, -222), ((0), 100000000, 0, -221), 0), 100000000, 0, -220), 0), 100000000, 0, -219), 0, (("src/lexer.mll", 25, 196, 200), ("src/lexer.mll", 25, 196, 206), 0), 0, Tag1 ("Dune__exe__Lexer", 0)), 0); (("error2", 1690), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -218), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format4"), [((0), 100000000, 0, -213); (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -215); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -216); ((0), 100000000, 0, -217)], (0)), 100000000, 0, -214), ((0), 100000000, 0, -213), 0), 100000000, 0, -212), 0), 100000000, 0, -211), 0, (("src/lexer.mll", 28, 248, 252), ("src/lexer.mll", 28, 248, 258), 0), 0, Tag1 ("Dune__exe__Lexer", 2)), 0); (("int_of_string", 1691), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -210), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -209), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -208), 0), 100000000, 0, -207), 0), 100000000, 0, -206), 0, (("src/lexer.mll", 37, 591, 595), ("src/lexer.mll", 37, 591, 608), 0), 0, Tag1 ("Dune__exe__Lexer", 4)), 0); (("savestart", 1692), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -205), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -205), ((0), 100000000, 0, -203), (1)), 100000000, 0, -204), ((0), 100000000, 0, -203), 0), 100000000, 0, -202), 0), 100000000, 0, -201), 0, (("src/lexer.mll", 49, 963, 967), ("src/lexer.mll", 49, 963, 976), 0), 0, Tag1 ("Dune__exe__Lexer", 7)), 0); (("overwrite", 1693), ((Tag1 (0, (Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -200), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -199), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -198), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -197), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -196), 0), 100000000, 0, -195), 0), 100000000, 0, -194), 0), 100000000, 0, -193), 0), 100000000, 0, -192), 0, (("src/lexer.mll", 60, 1268, 1272), ("src/lexer.mll", 60, 1268, 1281), 0), 0, Tag1 ("Dune__exe__Lexer", 12)), 0); Tag1 (("monster", 1694), (0, 0, [[(("pos", 645), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Positions"), "t"), 0, (0)), 100000000, 0, -181), (("src/lexer.mll", 74, 1706, 1708), ("src/lexer.mll", 74, 1706, 1725), 0), 0, Tag1 ("Dune__exe__Lexer", 19)); (("check", 646), 0, (Tag3 ((("check", 1695)), 0, (0)), 100000000, 0, -182), (("src/lexer.mll", 80, 2013, 2015), ("src/lexer.mll", 80, 2013, 2028), 0), 0, Tag1 ("Dune__exe__Lexer", 20)); (("transform", 647), 0, (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -187), (Tag1 (0, (Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -186), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -185), 0), 100000000, 0, -184), 0), 100000000, 0, -183), (("src/lexer.mll", 86, 2303, 2305), ("src/lexer.mll", 86, 2303, 2337), 0), 0, Tag1 ("Dune__exe__Lexer", 21)); (("keyword", 648), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("MenhirSdk")), "Keyword"), "keyword"), 0, (0)), 100000000, 0, -189)], (0)), 100000000, 0, -188), (("src/lexer.mll", 89, 2388, 2390), ("src/lexer.mll", 89, 2388, 2414), 0), 0, Tag1 ("Dune__exe__Lexer", 22)); (("oid", 649), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -191)], (0)), 100000000, 0, -190), (("src/lexer.mll", 92, 2492, 2494), ("src/lexer.mll", 92, 2492, 2513), 0), 0, Tag1 ("Dune__exe__Lexer", 23))]], 1, 0, 0, 0, 0, 0, (("src/lexer.mll", 71, 1651, 1651), ("src/lexer.mll", 94, 2515, 2516), 0), 0, 0, 0, Tag1 ("Dune__exe__Lexer", 17)), 1, 0); Tag1 (("check", 1695), (0, 0, 0, 1, ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Settings"), "dollars"), 0, (0)), 100000000, 0, -180), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -179)], (0)), 100000000, 0, -178)], (0)), 100000000, 0, -177), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -176), 0), 100000000, 0, -175), 0), 100000000, 0, -174)), 0, 0, 0, 0, (("src/lexer.mll", 96, 2518, 2518), ("src/lexer.mll", 97, 2530, 2579), 0), 0, 0, 0, Tag1 ("Dune__exe__Lexer", 18)), 2, 0); (("none", 1696), ((Tag3 ((("check", 1695)), 0, (0)), 100000000, 0, -173), 0, (("src/lexer.mll", 101, 2598, 2602), ("src/lexer.mll", 101, 2598, 2606), 0), 0, Tag1 ("Dune__exe__Lexer", 24)), 0); (("syntaxerror", 1697), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Positions"), "t"), 0, (0)), 100000000, 0, -172), (Tag3 ((("monster", 1694)), 0, (0)), 100000000, 0, -171), 0), 100000000, 0, -170), 0, (("src/lexer.mll", 108, 2749, 2753), ("src/lexer.mll", 108, 2749, 2764), 0), 0, Tag1 ("Dune__exe__Lexer", 25)), 0); (("check_dollar", 1698), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Positions"), "t"), 0, (0)), 100000000, 0, -169), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -168), (Tag3 ((("check", 1695)), 0, (0)), 100000000, 0, -167), 0), 100000000, 0, -166), 0), 100000000, 0, -165), 0, (("src/lexer.mll", 132, 3571, 3575), ("src/lexer.mll", 132, 3571, 3587), 0), 0, Tag1 ("Dune__exe__Lexer", 36)), 0); (("check_producer", 1699), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Positions"), "t"), 0, (0)), 100000000, 0, -164), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -163), (Tag3 ((("check", 1695)), 0, (0)), 100000000, 0, -162), 0), 100000000, 0, -161), 0), 100000000, 0, -160), 0, (("src/lexer.mll", 150, 4302, 4306), ("src/lexer.mll", 150, 4302, 4320), 0), 0, Tag1 ("Dune__exe__Lexer", 42)), 0); (("dollar", 1700), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Positions"), "t"), 0, (0)), 100000000, 0, -159), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -158), (Tag3 ((("monster", 1694)), 0, (0)), 100000000, 0, -157), 0), 100000000, 0, -156), 0), 100000000, 0, -155), 0, (("src/lexer.mll", 158, 4583, 4587), ("src/lexer.mll", 158, 4583, 4593), 0), 0, Tag1 ("Dune__exe__Lexer", 46)), 0); (("position", 1701), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Positions"), "t"), 0, (0)), 100000000, 0, -154), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -153), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -152), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -151)], (0)), 100000000, 0, -150), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -149)], (0)), 100000000, 0, -148), (Tag3 ((("monster", 1694)), 0, (0)), 100000000, 0, -147), 0), 100000000, 0, -146), 0), 100000000, 0, -145), 0), 100000000, 0, -144), 0), 100000000, 0, -143), 0), 100000000, 0, -142), 0, (("src/lexer.mll", 176, 5127, 5131), ("src/lexer.mll", 176, 5127, 5139), 0), 0, Tag1 ("Dune__exe__Lexer", 57)), 0); (("no_monsters", 1702), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("monster", 1694)), 0, (0)), 100000000, 0, -141)], (0)), 100000000, 0, -140), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -139), 0), 100000000, 0, -138), 0, (("src/lexer.mll", 253, 7369, 7373), ("src/lexer.mll", 253, 7369, 7384), 0), 0, Tag1 ("Dune__exe__Lexer", 82)), 0); (("gather_oid", 1703), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "StringSet"), "t"), 0, (0)), 100000000, 0, -135), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "StringSet"), "elt"), 0, (0)), 100000000, 0, -137)], (0)), 100000000, 0, -136), (Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "StringSet"), "t"), 0, (0)), 100000000, 0, -135), 0), 100000000, 0, -134), 0), 100000000, 0, -133), 0, (("src/lexer.mll", 265, 7709, 7713), ("src/lexer.mll", 265, 7709, 7723), 0), 0, Tag1 ("Dune__exe__Lexer", 85)), 0); (("gather_oids", 1704), ((Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "StringSet"), "elt"), 0, (0)), 100000000, 0, -132)], (0)), 100000000, 0, -131)], (0)), 100000000, 0, -130), (Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "StringSet"), "t"), 0, (0)), 100000000, 0, -129), 0), 100000000, 0, -128), 0, (("src/lexer.mll", 272, 7811, 7815), ("src/lexer.mll", 272, 7811, 7826), 0), 0, Tag1 ("Dune__exe__Lexer", 89)), 0); (("gather_monsters", 1705), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("monster", 1694)), 0, (0)), 100000000, 0, -127)], (0)), 100000000, 0, -126), (Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "StringSet"), "t"), 0, (0)), 100000000, 0, -125), 0), 100000000, 0, -124), 0, (("src/lexer.mll", 277, 7954, 7958), ("src/lexer.mll", 277, 7954, 7973), 0), 0, Tag1 ("Dune__exe__Lexer", 91)), 0); (("mk_stretch", 1706), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -123), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -122), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -121), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("monster", 1694)), 0, (0)), 100000000, 0, -120)], (0)), 100000000, 0, -119), (Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Stretch"), "t"), 0, (0)), 100000000, 0, -118), 0), 100000000, 0, -117), 0), 100000000, 0, -116), 0), 100000000, 0, -115), 0), 100000000, 0, -114), 0, (("src/lexer.mll", 286, 8187, 8191), ("src/lexer.mll", 286, 8187, 8201), 0), 0, Tag1 ("Dune__exe__Lexer", 95)), 0); (("stretch_of_id", 1707), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Positions"), "located"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -113)], (0)), 100000000, 0, -112), (Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Stretch"), "t"), 0, (0)), 100000000, 0, -111), 0), 100000000, 0, -110), 0, (("src/lexer.mll", 326, 9948, 9952), ("src/lexer.mll", 326, 9948, 9965), 0), 0, Tag1 ("Dune__exe__Lexer", 106)), 0); (("reserved", 1708), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Hashtbl"), "t"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -108); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -109)], (0)), 100000000, 0, -107), 0, (("src/lexer.mll", 352, 10799, 10803), ("src/lexer.mll", 352, 10799, 10811), 0), 0, Tag1 ("Dune__exe__Lexer", 119)), 0); (("table", 1709), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((0), 100000000, 0, -103); ((0), 100000000, 0, -104)]), 100000000, 0, -106)], (0)), 100000000, 0, -105), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Hashtbl"), "t"), [((0), 100000000, 0, -103); ((0), 100000000, 0, -104)], (0)), 100000000, 0, -102), 0), 100000000, 0, -101), 0, (("src/lexer.mll", 416, 11651, 11655), ("src/lexer.mll", 416, 11651, 11660), 0), 0, Tag1 ("Dune__exe__Lexer", 120)), 0); (("directives", 1710), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Hashtbl"), "t"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -99); (Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Parser"), "token"), 0, (0)), 100000000, 0, -100)], (0)), 100000000, 0, -98), 0, (("src/lexer.mll", 421, 11795, 11799), ("src/lexer.mll", 421, 11795, 11809), 0), 0, Tag1 ("Dune__exe__Lexer", 125)), 0); (("char_for_backslash", 1711), ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -97), (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -97), 0), 100000000, 0, -96), 0, (("src/lexer.mll", 441, 12230, 12234), ("src/lexer.mll", 441, 12230, 12252), 0), 0, Tag1 ("Dune__exe__Lexer", 126)), 0); (("__ocaml_lex_tables", 1712), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lex_tables"), 0, (0)), 100000000, 0, -95), 0, (("src/lexer.ml", 438, 12372, 12376), ("src/lexer.ml", 438, 12372, 12394), 0), 0, Tag1 ("Dune__exe__Lexer", 128)), 0); (("main", 1713), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -6), (Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Parser"), "token"), 0, (0)), 100000000, 0, -80), 0), 100000000, 0, -94), 0, (("src/lexer.ml", 1696, 99266, 99274), ("src/lexer.ml", 1696, 99266, 99278), 0), 0, Tag1 ("Dune__exe__Lexer", 129)), 0); (("__ocaml_lex_main_rec", 1714), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -6), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -93), (Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Parser"), "token"), 0, (0)), 100000000, 0, -80), 0), 100000000, 0, -92), 0), 100000000, 0, -91), 0, (("src/lexer.ml", 1700, 99446, 99450), ("src/lexer.ml", 1700, 99446, 99470), 0), 0, Tag1 ("Dune__exe__Lexer", 130)), 0); (("comment", 1715), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -38), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -6), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -87), 0), 100000000, 0, -90), 0), 100000000, 0, -89), 0, (("src/lexer.ml", 1939, 105787, 105791), ("src/lexer.ml", 1939, 105787, 105798), 0), 0, Tag1 ("Dune__exe__Lexer", 131)), 0); (("__ocaml_lex_comment_rec", 1716), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -38), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -6), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -88), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -87), 0), 100000000, 0, -86), 0), 100000000, 0, -85), 0), 100000000, 0, -84), 0, (("src/lexer.ml", 1941, 105867, 105871), ("src/lexer.ml", 1941, 105867, 105894), 0), 0, Tag1 ("Dune__exe__Lexer", 132)), 0); (("ocamltype", 1717), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -38), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -6), (Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Parser"), "token"), 0, (0)), 100000000, 0, -80), 0), 100000000, 0, -83), 0), 100000000, 0, -82), 0, (("src/lexer.ml", 1966, 106496, 106500), ("src/lexer.ml", 1966, 106496, 106509), 0), 0, Tag1 ("Dune__exe__Lexer", 133)), 0); (("__ocaml_lex_ocamltype_rec", 1718), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -38), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -6), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -81), (Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Parser"), "token"), 0, (0)), 100000000, 0, -80), 0), 100000000, 0, -79), 0), 100000000, 0, -78), 0), 100000000, 0, -77), 0, (("src/lexer.ml", 1968, 106580, 106584), ("src/lexer.ml", 1968, 106580, 106609), 0), 0, Tag1 ("Dune__exe__Lexer", 134)), 0); (("action", 1719), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -72), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -38), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("monster", 1694)), 0, (0)), 100000000, 0, -60)], (0)), 100000000, 0, -59), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -6), (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -38); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("monster", 1694)), 0, (0)), 100000000, 0, -60)], (0)), 100000000, 0, -59)]), 100000000, 0, -70), 0), 100000000, 0, -76), 0), 100000000, 0, -75), 0), 100000000, 0, -74), 0), 100000000, 0, -73), 0, (("src/lexer.ml", 2003, 107527, 107531), ("src/lexer.ml", 2003, 107527, 107537), 0), 0, Tag1 ("Dune__exe__Lexer", 135)), 0); (("__ocaml_lex_action_rec", 1720), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -72), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -38), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("monster", 1694)), 0, (0)), 100000000, 0, -60)], (0)), 100000000, 0, -59), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -6), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -71), (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -38); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("monster", 1694)), 0, (0)), 100000000, 0, -60)], (0)), 100000000, 0, -59)]), 100000000, 0, -70), 0), 100000000, 0, -69), 0), 100000000, 0, -68), 0), 100000000, 0, -67), 0), 100000000, 0, -66), 0), 100000000, 0, -65), 0, (("src/lexer.ml", 2005, 107683, 107687), ("src/lexer.ml", 2005, 107683, 107709), 0), 0, Tag1 ("Dune__exe__Lexer", 136)), 0); (("parentheses", 1721), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -38), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("monster", 1694)), 0, (0)), 100000000, 0, -60)], (0)), 100000000, 0, -59), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -6), (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -38); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("monster", 1694)), 0, (0)), 100000000, 0, -60)], (0)), 100000000, 0, -59)]), 100000000, 0, -58), 0), 100000000, 0, -64), 0), 100000000, 0, -63), 0), 100000000, 0, -62), 0, (("src/lexer.ml", 2123, 111178, 111182), ("src/lexer.ml", 2123, 111178, 111193), 0), 0, Tag1 ("Dune__exe__Lexer", 137)), 0); (("__ocaml_lex_parentheses_rec", 1722), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -38), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("monster", 1694)), 0, (0)), 100000000, 0, -60)], (0)), 100000000, 0, -59), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -6), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -61), (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -38); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("monster", 1694)), 0, (0)), 100000000, 0, -60)], (0)), 100000000, 0, -59)]), 100000000, 0, -58), 0), 100000000, 0, -57), 0), 100000000, 0, -56), 0), 100000000, 0, -55), 0), 100000000, 0, -54), 0, (("src/lexer.ml", 2125, 111329, 111333), ("src/lexer.ml", 2125, 111329, 111360), 0), 0, Tag1 ("Dune__exe__Lexer", 138)), 0); (("attribute", 1723), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -38), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -6), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -38), 0), 100000000, 0, -53), 0), 100000000, 0, -52), 0, (("src/lexer.ml", 2226, 114350, 114354), ("src/lexer.ml", 2226, 114350, 114363), 0), 0, Tag1 ("Dune__exe__Lexer", 139)), 0); (("__ocaml_lex_attribute_rec", 1724), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -38), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -6), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -51), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -38), 0), 100000000, 0, -50), 0), 100000000, 0, -49), 0), 100000000, 0, -48), 0, (("src/lexer.ml", 2228, 114435, 114439), ("src/lexer.ml", 2228, 114435, 114464), 0), 0, Tag1 ("Dune__exe__Lexer", 140)), 0); (("ocamlcomment", 1725), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -38), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -6), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -44), 0), 100000000, 0, -47), 0), 100000000, 0, -46), 0, (("src/lexer.ml", 2286, 115925, 115929), ("src/lexer.ml", 2286, 115925, 115941), 0), 0, Tag1 ("Dune__exe__Lexer", 141)), 0); (("__ocaml_lex_ocamlcomment_rec", 1726), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -38), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -6), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -45), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -44), 0), 100000000, 0, -43), 0), 100000000, 0, -42), 0), 100000000, 0, -41), 0, (("src/lexer.ml", 2288, 116016, 116020), ("src/lexer.ml", 2288, 116016, 116048), 0), 0, Tag1 ("Dune__exe__Lexer", 142)), 0); (("string", 1727), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -38), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -6), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -36), 0), 100000000, 0, -40), 0), 100000000, 0, -39), 0, (("src/lexer.ml", 2328, 117047, 117051), ("src/lexer.ml", 2328, 117047, 117057), 0), 0, Tag1 ("Dune__exe__Lexer", 143)), 0); (("__ocaml_lex_string_rec", 1728), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -38), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -6), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -37), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -36), 0), 100000000, 0, -35), 0), 100000000, 0, -34), 0), 100000000, 0, -33), 0, (("src/lexer.ml", 2330, 117126, 117130), ("src/lexer.ml", 2330, 117126, 117152), 0), 0, Tag1 ("Dune__exe__Lexer", 144)), 0); (("record_string", 1729), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -29), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Buffer"), "t"), 0, (0)), 100000000, 0, -28), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -6), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -26), 0), 100000000, 0, -32), 0), 100000000, 0, -31), 0), 100000000, 0, -30), 0, (("src/lexer.ml", 2360, 117843, 117847), ("src/lexer.ml", 2360, 117843, 117860), 0), 0, Tag1 ("Dune__exe__Lexer", 145)), 0); (("__ocaml_lex_record_string_rec", 1730), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -29), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Buffer"), "t"), 0, (0)), 100000000, 0, -28), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -6), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -27), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -26), 0), 100000000, 0, -25), 0), 100000000, 0, -24), 0), 100000000, 0, -23), 0), 100000000, 0, -22), 0, (("src/lexer.ml", 2362, 117950, 117954), ("src/lexer.ml", 2362, 117950, 117983), 0), 0, Tag1 ("Dune__exe__Lexer", 146)), 0); (("decode_string", 1731), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Buffer"), "t"), 0, (0)), 100000000, 0, -19), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -18), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -16), 0), 100000000, 0, -21), 0), 100000000, 0, -20), 0, (("src/lexer.ml", 2415, 119430, 119434), ("src/lexer.ml", 2415, 119430, 119447), 0), 0, Tag1 ("Dune__exe__Lexer", 147)), 0); (("__ocaml_lex_decode_string_rec", 1732), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Buffer"), "t"), 0, (0)), 100000000, 0, -19), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -18), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -17), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -16), 0), 100000000, 0, -15), 0), 100000000, 0, -14), 0), 100000000, 0, -13), 0, (("src/lexer.ml", 2417, 119515, 119519), ("src/lexer.ml", 2417, 119515, 119548), 0), 0, Tag1 ("Dune__exe__Lexer", 148)), 0); (("char", 1733), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -6), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10), 0), 100000000, 0, -12), 0, (("src/lexer.ml", 2449, 120440, 120444), ("src/lexer.ml", 2449, 120440, 120448), 0), 0, Tag1 ("Dune__exe__Lexer", 149)), 0); (("__ocaml_lex_char_rec", 1734), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -6), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -11), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10), 0), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("src/lexer.ml", 2451, 120493, 120497), ("src/lexer.ml", 2451, 120493, 120517), 0), 0, Tag1 ("Dune__exe__Lexer", 150)), 0); (("finish", 1735), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -6), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -7), 0, (("src/lexer.ml", 2466, 120873, 120877), ("src/lexer.ml", 2466, 120873, 120883), 0), 0, Tag1 ("Dune__exe__Lexer", 151)), 0); (("__ocaml_lex_finish_rec", 1736), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -6), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -5), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/lexer.ml", 2468, 120930, 120934), ("src/lexer.ml", 2468, 120930, 120956), 0), 0, Tag1 ("Dune__exe__Lexer", 152)), 0)], "Dune__exe__Lexer", [("Dune__exe__Lexer", ("\243\020GG\230\254\020\149\211\169\182D;\208k\167")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Queue", ("E\187(\001]E;(\021\n~\137\191\026\\\152")); ("Stdlib__Printf", ("\215<\139]\021\142\224E\245m\198qc(W\229")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Bytes", ("C\134\194)\175\222\137p\205\246\244\r\241\164P\209")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("MenhirSdk__Keyword", ("\171\145\177^\199\189\197f\150\136y\144\252\234>\178")); ("MenhirSdk", ("F\232\012\196l\143\145[\255\2193U\197\027\176\139")); ("Dune__exe__Syntax", ("\002\205\007\164\2347\133\182\245*x\171\004\190\178\171")); ("Dune__exe__StringSet", ("uB\206\020%\219\199\135&\196,\015\190\015^\230")); ("Dune__exe__StringMap", ("\157\157\161k*M\030\254|\006>\144X\147j\222")); ("Dune__exe__Stretch", ("\003\145~\207\198HL&\187\195e'0\204\200\156")); ("Dune__exe__Settings", ("I\214\245\150\238/\2211\219\145S\218\004a:1")); ("Dune__exe__Positions", ("\137nS\236\011\187\r[\024:\162/\201\139\237}")); ("Dune__exe__Parser", ("2t\244x\253\150#\0024\019\t5\180\127\253\142")); ("Dune__exe__Option", ("\205\176\234\180\030\005g\182\244\182\\z\208T\209\232")); ("Dune__exe__Misc", ("\208C\180\236\1540\141\1336\169\164\140=U\137\213")); ("Dune__exe__InputFile", (",\0246\029z@\127T\235\227k~\t\138\213%")); ("Dune__exe__IL", ("\194\228\178\190\251\254\231\226\207\197c\133\253i\220\170")); ("Dune__exe__Error", ("\137\210f\024\160\227n\213\201\213\153'8\248\218\001")); ("Dune__exe__Action", ("c\225H \249\179\190\007`[X\019\132@\208\193")); ("Dune__exe", ("\137\000\197\175$\007]\218\141\248\172\212\146c\153\212")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
val __ocaml_lex_finish_rec : Lexing.lexbuf -> int -> Lexing.position

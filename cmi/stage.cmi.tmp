module type envt =
  sig
    type t
    val eq : t -> t -> bool
    val find :
      Uloc.t ->
      ?edge:Deps.Edge.t ->
      Module.level ->
      Paths.Simple.t -> t -> Transforms.answer Transforms.query_result
    val find_within :
      Module.signature ->
      Uloc.t ->
      ?edge:Deps.Edge.t ->
      Module.level ->
      Paths.Simple.t -> t -> Transforms.answer Transforms.query_result
    val extend : t -> Summary.t -> t
    val is_exterior : Paths.Simple.t -> t -> bool
    val resolve_alias : Paths.Simple.t -> t -> Namespaced.t option
    val expand_path : Paths.Simple.t -> t -> Paths.Simple.t
    val add_unit : t -> ?namespace:Paths.S.t -> Name.t -> Module.t -> t
    val add_namespace : t -> Namespaced.t -> t
    val pp : Format.formatter -> t -> unit
  end
module type param =
  sig
    val policy : Fault.Policy.t
    val epsilon_dependencies : bool
    val transparent_extension_nodes : bool
    val transparent_aliases : bool
  end
type 'a param = Transforms.param -> 'a
type 'a implicit = 'a
module type generic_outliner =
  sig
    type envt
    type on_going
    type final
    type 'a with_param
    val initial : M2l.t -> on_going
    val next :
      pkg:Pkg.t ->
      (envt -> on_going -> (Module.Sig.t * final, on_going) result)
      with_param
    val block : on_going -> (Summary.t * Paths.S.t) Loc.ext option
    val recursive_patching : on_going -> Summary.t -> on_going
    val pp : on_going Pp.t
  end
module type outliner =
  sig
    type envt
    type on_going
    val initial : M2l.t -> on_going
    val next :
      pkg:Pkg.t ->
      (envt -> on_going -> (Module.Sig.t * Deps.t, on_going) result) implicit
    val block : on_going -> (Summary.t * Paths.S.t) Loc.ext option
    val recursive_patching : on_going -> Summary.t -> on_going
    val pp : on_going Pp.t("DEBUG:rule", [Tag4 (("envt", 794), ((Tag1 ([Tag1 (("t", 800), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("lib/stage.mli", 3, 67, 69), ("lib/stage.mli", 3, 67, 75), 0), 0, 0, 0, Tag1 ("Stage", 0)), 1, 0); (("eq", 801), ((Tag1 (0, (Tag3 ((("t", 800)), 0, (0)), 100000000, 0, -79), (Tag1 (0, (Tag3 ((("t", 800)), 0, (0)), 100000000, 0, -78), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -77), 0), 100000000, 0, -76), 0), 100000000, 0, -75), 0, (("lib/stage.mli", 4, 76, 78), ("lib/stage.mli", 4, 76, 100), 0), 0, Tag1 ("Stage", 1)), 0); (("find", 802), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Uloc")), "t"), 0, (0)), 100000000, 0, -74), (Tag1 (Tag1 ("edge"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Deps")), "Edge"), "t"), 0, (0)), 100000000, 0, -73)], (0)), 100000000, 0, -72), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Module")), "level"), 0, (0)), 100000000, 0, -71), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Paths")), "Simple"), "t"), 0, (0)), 100000000, 0, -70), (Tag1 (0, (Tag3 ((("t", 800)), 0, (0)), 100000000, 0, -69), (Tag3 (Tag1 ((Tag2 ("Transforms")), "query_result"), [(Tag3 (Tag1 ((Tag2 ("Transforms")), "answer"), 0, (0)), 100000000, 0, -68)], (0)), 100000000, 0, -67), 0), 100000000, 0, -66), 0), 100000000, 0, -65), 0), 100000000, 0, -64), 0), 100000000, 0, -63), 0), 100000000, 0, -62), 0, (("lib/stage.mli", 5, 101, 103), ("lib/stage.mli", 7, 179, 232), 0), 0, Tag1 ("Stage", 4)), 0); (("find_within", 803), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Module")), "signature"), 0, (0)), 100000000, 0, -61), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Uloc")), "t"), 0, (0)), 100000000, 0, -60), (Tag1 (Tag1 ("edge"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Deps")), "Edge"), "t"), 0, (0)), 100000000, 0, -59)], (0)), 100000000, 0, -58), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Module")), "level"), 0, (0)), 100000000, 0, -57), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Paths")), "Simple"), "t"), 0, (0)), 100000000, 0, -56), (Tag1 (0, (Tag3 ((("t", 800)), 0, (0)), 100000000, 0, -55), (Tag3 (Tag1 ((Tag2 ("Transforms")), "query_result"), [(Tag3 (Tag1 ((Tag2 ("Transforms")), "answer"), 0, (0)), 100000000, 0, -54)], (0)), 100000000, 0, -53), 0), 100000000, 0, -52), 0), 100000000, 0, -51), 0), 100000000, 0, -50), 0), 100000000, 0, -49), 0), 100000000, 0, -48), 0), 100000000, 0, -47), 0, (("lib/stage.mli", 9, 234, 236), ("lib/stage.mli", 12, 343, 396), 0), 0, Tag1 ("Stage", 5)), 0); (("extend", 804), ((Tag1 (0, (Tag3 ((("t", 800)), 0, (0)), 100000000, 0, -46), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Summary")), "t"), 0, (0)), 100000000, 0, -45), (Tag3 ((("t", 800)), 0, (0)), 100000000, 0, -44), 0), 100000000, 0, -43), 0), 100000000, 0, -42), 0, (("lib/stage.mli", 15, 399, 401), ("lib/stage.mli", 15, 399, 433), 0), 0, Tag1 ("Stage", 6)), 0); (("is_exterior", 805), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Paths")), "Simple"), "t"), 0, (0)), 100000000, 0, -41), (Tag1 (0, (Tag3 ((("t", 800)), 0, (0)), 100000000, 0, -40), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -39), 0), 100000000, 0, -38), 0), 100000000, 0, -37), 0, (("lib/stage.mli", 17, 435, 437), ("lib/stage.mli", 17, 435, 481), 0), 0, Tag1 ("Stage", 7)), 0); (("resolve_alias", 806), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Paths")), "Simple"), "t"), 0, (0)), 100000000, 0, -36), (Tag1 (0, (Tag3 ((("t", 800)), 0, (0)), 100000000, 0, -35), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Namespaced")), "t"), 0, (0)), 100000000, 0, -34)], (0)), 100000000, 0, -33), 0), 100000000, 0, -32), 0), 100000000, 0, -31), 0, (("lib/stage.mli", 18, 482, 484), ("lib/stage.mli", 18, 482, 545), 0), 0, Tag1 ("Stage", 8)), 0); (("expand_path", 807), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Paths")), "Simple"), "t"), 0, (0)), 100000000, 0, -30), (Tag1 (0, (Tag3 ((("t", 800)), 0, (0)), 100000000, 0, -29), (Tag3 (Tag1 (Tag1 ((Tag2 ("Paths")), "Simple"), "t"), 0, (0)), 100000000, 0, -28), 0), 100000000, 0, -27), 0), 100000000, 0, -26), 0, (("lib/stage.mli", 19, 546, 548), ("lib/stage.mli", 19, 546, 602), 0), 0, Tag1 ("Stage", 9)), 0); (("add_unit", 808), ((Tag1 (0, (Tag3 ((("t", 800)), 0, (0)), 100000000, 0, -25), (Tag1 (Tag1 ("namespace"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Paths")), "S"), "t"), 0, (0)), 100000000, 0, -24)], (0)), 100000000, 0, -23), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Name")), "t"), 0, (0)), 100000000, 0, -22), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Module")), "t"), 0, (0)), 100000000, 0, -21), (Tag3 ((("t", 800)), 0, (0)), 100000000, 0, -20), 0), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("lib/stage.mli", 21, 604, 606), ("lib/stage.mli", 21, 604, 672), 0), 0, Tag1 ("Stage", 10)), 0); (("add_namespace", 809), ((Tag1 (0, (Tag3 ((("t", 800)), 0, (0)), 100000000, 0, -15), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Namespaced")), "t"), 0, (0)), 100000000, 0, -14), (Tag3 ((("t", 800)), 0, (0)), 100000000, 0, -13), 0), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("lib/stage.mli", 22, 673, 675), ("lib/stage.mli", 22, 673, 716), 0), 0, Tag1 ("Stage", 11)), 0); (("pp", 810), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -10), (Tag1 (0, (Tag3 ((("t", 800)), 0, (0)), 100000000, 0, -9), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8), 0), 100000000, 0, -7), 0), 100000000, 0, -6), 0, (("lib/stage.mli", 24, 718, 720), ("lib/stage.mli", 24, 718, 757), 0), 0, Tag1 ("Stage", 12)), 0)])), 0, (("lib/stage.mli", 2, 44, 44), ("lib/stage.mli", 25, 758, 761), 0), Tag1 ("Stage", 13)), 0); Tag4 (("param", 795), ((Tag1 ([(("policy", 811), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Fault")), "Policy"), "t"), 0, (0)), 100000000, 0, -83), 0, (("lib/stage.mli", 30, 817, 819), ("lib/stage.mli", 30, 817, 845), 0), 0, Tag1 ("Stage", 14)), 0); (("epsilon_dependencies", 812), ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -82), 0, (("lib/stage.mli", 31, 846, 848), ("lib/stage.mli", 31, 846, 878), 0), 0, Tag1 ("Stage", 15)), 0); (("transparent_extension_nodes", 813), ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -81), 0, (("lib/stage.mli", 32, 879, 881), ("lib/stage.mli", 32, 879, 919), 0), 0, Tag1 ("Stage", 16)), 0); (("transparent_aliases", 814), ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -80), 0, (("lib/stage.mli", 33, 920, 922), ("lib/stage.mli", 33, 920, 952), 0), 0, Tag1 ("Stage", 17)), 0)])), 0, (("lib/stage.mli", 28, 793, 793), ("lib/stage.mli", 34, 953, 956), 0), Tag1 ("Stage", 18)), 0); Tag1 (("param", 796), ([((("a")), 100000000, 0, -4)], 1, 0, 1, ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Transforms")), "param"), 0, (0)), 100000000, 0, -5), ((("a")), 100000000, 0, -4), 0), 100000000, 0, -3)), [25], [0], 0, 0, (("lib/stage.mli", 36, 958, 958), ("lib/stage.mli", 36, 958, 996), 0), 0, 0, 0, Tag1 ("Stage", 19)), 1, 0); Tag1 (("implicit", 797), ([((("a")), 100000000, 0, -2)], 1, 0, 1, (((("a")), 100000000, 0, -2)), [25], [1], 0, 0, (("lib/stage.mli", 37, 997, 997), ("lib/stage.mli", 37, 997, 1018), 0), 0, 0, 0, Tag1 ("Stage", 20)), 1, 0); Tag4 (("generic_outliner", 798), ((Tag1 ([Tag1 (("envt", 815), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("lib/stage.mli", 42, 1076, 1078), ("lib/stage.mli", 42, 1076, 1087), 0), 0, 0, 0, Tag1 ("Stage", 21)), 1, 0); Tag1 (("on_going", 816), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("lib/stage.mli", 43, 1088, 1090), ("lib/stage.mli", 43, 1088, 1103), 0), 0, 0, 0, Tag1 ("Stage", 22)), 1, 0); Tag1 (("final", 817), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("lib/stage.mli", 44, 1104, 1106), ("lib/stage.mli", 44, 1104, 1116), 0), 0, 0, 0, Tag1 ("Stage", 23)), 1, 0); Tag1 (("with_param", 818), ([((("a")), 100000000, 0, -113)], 1, 0, 1, 0, [7], [2], 0, 0, (("lib/stage.mli", 45, 1117, 1119), ("lib/stage.mli", 45, 1117, 1137), 0), 0, 0, 0, Tag1 ("Stage", 24)), 1, 0); (("initial", 819), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("M2l")), "t"), 0, (0)), 100000000, 0, -112), (Tag3 ((("on_going", 816)), 0, (0)), 100000000, 0, -111), 0), 100000000, 0, -110), 0, (("lib/stage.mli", 46, 1138, 1140), ("lib/stage.mli", 46, 1138, 1170), 0), 0, Tag1 ("Stage", 28)), 0); (("next", 820), ((Tag1 (("pkg"), (Tag3 (Tag1 ((Tag2 ("Pkg")), "t"), 0, (0)), 100000000, 0, -109), (Tag3 ((("with_param", 818)), [(Tag1 (0, (Tag3 ((("envt", 815)), 0, (0)), 100000000, 0, -108), (Tag1 (0, (Tag3 ((("on_going", 816)), 0, (0)), 100000000, 0, -107), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Module")), "Sig"), "t"), 0, (0)), 100000000, 0, -104); (Tag3 ((("final", 817)), 0, (0)), 100000000, 0, -105)]), 100000000, 0, -103); (Tag3 ((("on_going", 816)), 0, (0)), 100000000, 0, -106)], (0)), 100000000, 0, -102), 0), 100000000, 0, -101), 0), 100000000, 0, -100)], (0)), 100000000, 0, -99), 0), 100000000, 0, -98), 0, (("lib/stage.mli", 47, 1171, 1173), ("lib/stage.mli", 49, 1218, 1276), 0), 0, Tag1 ("Stage", 29)), 0); (("block", 821), ((Tag1 (0, (Tag3 ((("on_going", 816)), 0, (0)), 100000000, 0, -97), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "ext"), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Summary")), "t"), 0, (0)), 100000000, 0, -95); (Tag3 (Tag1 (Tag1 ((Tag2 ("Paths")), "S"), "t"), 0, (0)), 100000000, 0, -96)]), 100000000, 0, -94)], (0)), 100000000, 0, -93)], (0)), 100000000, 0, -92), 0), 100000000, 0, -91), 0, (("lib/stage.mli", 51, 1278, 1280), ("lib/stage.mli", 51, 1278, 1341), 0), 0, Tag1 ("Stage", 32)), 0); (("recursive_patching", 822), ((Tag1 (0, (Tag3 ((("on_going", 816)), 0, (0)), 100000000, 0, -90), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Summary")), "t"), 0, (0)), 100000000, 0, -89), (Tag3 ((("on_going", 816)), 0, (0)), 100000000, 0, -88), 0), 100000000, 0, -87), 0), 100000000, 0, -86), 0, (("lib/stage.mli", 53, 1343, 1345), ("lib/stage.mli", 53, 1343, 1402), 0), 0, Tag1 ("Stage", 33)), 0); (("pp", 823), ((Tag3 (Tag1 ((Tag2 ("Pp")), "t"), [(Tag3 ((("on_going", 816)), 0, (0)), 100000000, 0, -85)], (0)), 100000000, 0, -84), 0, (("lib/stage.mli", 55, 1404, 1406), ("lib/stage.mli", 55, 1404, 1427), 0), 0, Tag1 ("Stage", 34)), 0)])), 0, (("lib/stage.mli", 40, 1041, 1041), ("lib/stage.mli", 57, 1429, 1432), 0), Tag1 ("Stage", 35)), 0); Tag4 (("outliner", 799), ((Tag1 ([Tag1 (("envt", 824), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("lib/stage.mli", 60, 1435, 1458), ("lib/stage.mli", 61, 1480, 1540), 0), 0, 0, 0, Tag1 ("Stage", 21)), 1, 0); Tag1 (("on_going", 825), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("lib/stage.mli", 60, 1435, 1458), ("lib/stage.mli", 61, 1480, 1540), 0), 0, 0, 0, Tag1 ("Stage", 22)), 1, 0); (("initial", 826), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("M2l")), "t"), 0, (0)), 100000000, 0, -142), (Tag3 ((("on_going", 825)), 0, (0)), 100000000, 0, -141), 0), 100000000, 0, -140), 0, (("lib/stage.mli", 60, 1435, 1458), ("lib/stage.mli", 61, 1480, 1540), 0), 0, Tag1 ("Stage", 28)), 0); (("next", 827), ((Tag1 (("pkg"), (Tag3 (Tag1 ((Tag2 ("Pkg")), "t"), 0, (0)), 100000000, 0, -139), (Tag3 ((("implicit", 797)), [(Tag1 (0, (Tag3 ((("envt", 824)), 0, (0)), 100000000, 0, -138), (Tag1 (0, (Tag3 ((("on_going", 825)), 0, (0)), 100000000, 0, -137), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Module")), "Sig"), "t"), 0, (0)), 100000000, 0, -134); (Tag3 (Tag1 ((Tag2 ("Deps")), "t"), 0, (0)), 100000000, 0, -135)]), 100000000, 0, -133); (Tag3 ((("on_going", 825)), 0, (0)), 100000000, 0, -136)], (0)), 100000000, 0, -132), 0), 100000000, 0, -131), 0), 100000000, 0, -130)], (0)), 100000000, 0, -129), 0), 100000000, 0, -128), 0, (("lib/stage.mli", 60, 1435, 1458), ("lib/stage.mli", 61, 1480, 1540), 0), 0, Tag1 ("Stage", 29)), 0); (("block", 828), ((Tag1 (0, (Tag3 ((("on_going", 825)), 0, (0)), 100000000, 0, -127), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "ext"), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Summary")), "t"), 0, (0)), 100000000, 0, -125); (Tag3 (Tag1 (Tag1 ((Tag2 ("Paths")), "S"), "t"), 0, (0)), 100000000, 0, -126)]), 100000000, 0, -124)], (0)), 100000000, 0, -123)], (0)), 100000000, 0, -122), 0), 100000000, 0, -121), 0, (("lib/stage.mli", 60, 1435, 1458), ("lib/stage.mli", 61, 1480, 1540), 0), 0, Tag1 ("Stage", 32)), 0); (("recursive_patching", 829), ((Tag1 (0, (Tag3 ((("on_going", 825)), 0, (0)), 100000000, 0, -120), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Summary")), "t"), 0, (0)), 100000000, 0, -119), (Tag3 ((("on_going", 825)), 0, (0)), 100000000, 0, -118), 0), 100000000, 0, -117), 0), 100000000, 0, -116), 0, (("lib/stage.mli", 60, 1435, 1458), ("lib/stage.mli", 61, 1480, 1540), 0), 0, Tag1 ("Stage", 33)), 0); (("pp", 830), ((Tag3 (Tag1 ((Tag2 ("Pp")), "t"), [(Tag3 ((("on_going", 825)), 0, (0)), 100000000, 0, -115)], (0)), 100000000, 0, -114), 0, (("lib/stage.mli", 60, 1435, 1458), ("lib/stage.mli", 61, 1480, 1540), 0), 0, Tag1 ("Stage", 34)), 0)])), 0, (("lib/stage.mli", 60, 1435, 1435), ("lib/stage.mli", 61, 1480, 1540), 0), Tag1 ("Stage", 38)), 0)], "Stage", [("Stage", ("\224\018\196\1757\168\209wr\235\232\015z\144\206V")); ("Unitname", ("\155n\201\211\249\229\028$\220J\172\018<\249\171\158")); ("Uloc", ("\172\208h 6@\178[\156\249\206\172%\133\167\239")); ("Transforms", ("\247\177\132M&\202\192\164\018Ng6Wu\007\018")); ("Support", ("YA;\029\006a\255\202R\137\181\133\184\209)\005")); ("Summary", ("\243\022s.\187>\205\012\161)\1369wh\247p")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Schematic", ("\180\179\011\178\017I\241^\235\149h\161k\b\209\142")); ("Pp", ("\167zCQ\134\167\215\2517\247\158\219\250\223.\197")); ("Pkg", ("SneaP\023\210\210\240\218\128bA\te\239")); ("Paths", ("\000\152\242H\139l\222\245\245Ndb\202P^\175")); ("Namespaced", ("%\208\253;3\161W$\236\1838K\195z\1493")); ("Name", ("4? \167\131n\184\000\214\031\017\027\153\002]^")); ("Module", ("2_s\200\188\137\247\158>\168\195\023\195\n\011V")); ("Modname", ("v\160\183\003\212\232\177\007\228-\002\145i\230\255\248")); ("M2l", ("\208\241\201a\199\212\172v;\135t\185\027\196~\029")); ("Loc", ("ax\213\152\006\175?\212%\0014\238\021S\218=")); ("Id", ("w\207`(\179n\181\161\155\252\243\195\006\139NO")); ("Fault", ("\232\144\144(K\139\181-h!\017\212@?\127\199")); ("Deps", ("%\164\252&\165z\218\221\023\182\235\223+\147\145\195")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

  end

module TyVarEnv :
  sig
    val reset : unit -> unit
    val with_local_scope : (unit -> 'a) -> 'a
    type poly_univars
    val make_poly_univars : string list -> poly_univars
    val check_poly_univars :
      Env.t -> Location.t -> poly_univars -> Types.type_expr list
    val instance_poly_univars :
      Env.t -> Location.t -> poly_univars -> Types.type_expr list
  end
val valid_tyvar_name : string -> bool
val transl_simple_type :
  Env.t ->
  ?univars:TyVarEnv.poly_univars ->
  closed:bool -> Parsetree.core_type -> Typedtree.core_type
val transl_simple_type_univars :
  Env.t -> Parsetree.core_type -> Typedtree.core_type
val transl_simple_type_delayed :
  Env.t ->
  Parsetree.core_type ->
  Typedtree.core_type * Types.type_expr * (unit -> unit)
val transl_type_scheme : Env.t -> Parsetree.core_type -> Typedtree.core_type
val transl_type_param : Env.t -> Parsetree.core_type -> Typedtree.core_type
exception Already_bound
type error =
    Unbound_type_variable of string * string list
  | No_type_wildcards
  | Undefined_type_constructor of Path.t
  | Type_arity_mismatch of Longident.t * int * int
  | Bound_type_variable of string
  | Recursive_type
  | Unbound_row_variable of Longident.t
  | Type_mismatch of Errortrace.unification_error
  | Alias_type_mismatch of Errortrace.unification_error
  | Present_has_conjunction of string
  | Present_has_no_type of string
  | Constructor_mismatch of Types.type_expr * Types.type_expr
  | Not_a_variant of Types.type_expr
  | Variant_tags of string * string
  | Invalid_variable_name of string
  | Cannot_quantify of string * Types.type_expr
  | Multiple_constraints_on_type of Longident.t
  | Method_mismatch of string * Types.type_expr * Types.type_expr
  | Opened_object of Path.t option
  | Not_an_object of Types.type_expr
exception Error of Location.t * Env.t * error
val report_error : Env.t -> Format.formatter -> error -> unit
val transl_modtype_longident :
  (Location.t -> Env.t -> Longident.t -> Path.t) ref
val transl_modtype :
  ("DEBUG:rule", [Tag3 (("TyVarEnv", 1030), 0, (Tag1 ([(("reset", 1043), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -118), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -117), 0), 100000000, 0, -116), 0, (("typing/typetexp.mli", 24, 1291, 1293), ("typing/typetexp.mli", 24, 1291, 1317), 0), 0, Tag1 ("Typetexp", 1)), 0); (("with_local_scope", 1044), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -115), ((("a")), 100000000, 0, -113), 0), 100000000, 0, -114), ((("a")), 100000000, 0, -113), 0), 100000000, 0, -112), 0, (("typing/typetexp.mli", 27, 1366, 1368), ("typing/typetexp.mli", 27, 1366, 1409), 0), 0, Tag1 ("Typetexp", 2)), 0); Tag1 (("poly_univars", 1045), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("typing/typetexp.mli", 30, 1463, 1465), ("typing/typetexp.mli", 30, 1463, 1482), 0), 0, 0, 0, Tag1 ("Typetexp", 3)), 1, 0); (("make_poly_univars", 1046), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -111)], (0)), 100000000, 0, -110), (Tag3 ((("poly_univars", 1045)), 0, (0)), 100000000, 0, -109), 0), 100000000, 0, -108), 0, (("typing/typetexp.mli", 31, 1483, 1485), ("typing/typetexp.mli", 31, 1483, 1536), 0), 0, Tag1 ("Typetexp", 4)), 0); (("check_poly_univars", 1047), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -107), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -106), (Tag1 (0, (Tag3 ((("poly_univars", 1045)), 0, (0)), 100000000, 0, -105), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -104)], (0)), 100000000, 0, -103), 0), 100000000, 0, -102), 0), 100000000, 0, -101), 0), 100000000, 0, -100), 0, (("typing/typetexp.mli", 35, 1663, 1665), ("typing/typetexp.mli", 36, 1690, 1748), 0), 0, Tag1 ("Typetexp", 5)), 0); (("instance_poly_univars", 1048), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -99), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -98), (Tag1 (0, (Tag3 ((("poly_univars", 1045)), 0, (0)), 100000000, 0, -97), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -96)], (0)), 100000000, 0, -95), 0), 100000000, 0, -94), 0), 100000000, 0, -93), 0), 100000000, 0, -92), 0, (("typing/typetexp.mli", 41, 1926, 1928), ("typing/typetexp.mli", 42, 1956, 2014), 0), 0, Tag1 ("Typetexp", 6)), 0)]), 0, (("typing/typetexp.mli", 20, 1153, 1153), ("typing/typetexp.mli", 46, 2156, 2159), 0), Tag1 ("Typetexp", 7)), 0, 0); (("valid_tyvar_name", 1031), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -91), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -90), 0), 100000000, 0, -89), 0, (("typing/typetexp.mli", 48, 2161, 2161), ("typing/typetexp.mli", 48, 2161, 2198), 0), 0, Tag1 ("Typetexp", 8)), 0); (("transl_simple_type", 1032), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -88), (Tag1 (Tag1 ("univars"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("TyVarEnv", 1030)), "poly_univars"), 0, (0)), 100000000, 0, -87)], (0)), 100000000, 0, -86), (Tag1 (("closed"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -85), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "core_type"), 0, (0)), 100000000, 0, -84), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "core_type"), 0, (0)), 100000000, 0, -83), 0), 100000000, 0, -82), 0), 100000000, 0, -81), 0), 100000000, 0, -80), 0), 100000000, 0, -79), 0, (("typing/typetexp.mli", 50, 2200, 2200), ("typing/typetexp.mli", 52, 2287, 2340), 0), 0, Tag1 ("Typetexp", 14)), 0); (("transl_simple_type_univars", 1033), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -78), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "core_type"), 0, (0)), 100000000, 0, -77), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "core_type"), 0, (0)), 100000000, 0, -76), 0), 100000000, 0, -75), 0), 100000000, 0, -74), 0, (("typing/typetexp.mli", 53, 2341, 2341), ("typing/typetexp.mli", 54, 2373, 2432), 0), 0, Tag1 ("Typetexp", 15)), 0); (("transl_simple_type_delayed", 1034), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -73), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "core_type"), 0, (0)), 100000000, 0, -72), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Typedtree")), "core_type"), 0, (0)), 100000000, 0, -67); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -68); (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -71), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -70), 0), 100000000, 0, -69)]), 100000000, 0, -66), 0), 100000000, 0, -65), 0), 100000000, 0, -64), 0, (("typing/typetexp.mli", 55, 2433, 2433), ("typing/typetexp.mli", 58, 2500, 2553), 0), 0, Tag1 ("Typetexp", 16)), 0); (("transl_type_scheme", 1035), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -63), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "core_type"), 0, (0)), 100000000, 0, -62), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "core_type"), 0, (0)), 100000000, 0, -61), 0), 100000000, 0, -60), 0), 100000000, 0, -59), 0, (("typing/typetexp.mli", 62, 2749, 2749), ("typing/typetexp.mli", 63, 2773, 2832), 0), 0, Tag1 ("Typetexp", 17)), 0); (("transl_type_param", 1036), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -58), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "core_type"), 0, (0)), 100000000, 0, -57), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "core_type"), 0, (0)), 100000000, 0, -56), 0), 100000000, 0, -55), 0), 100000000, 0, -54), 0, (("typing/typetexp.mli", 64, 2833, 2833), ("typing/typetexp.mli", 65, 2856, 2909), 0), 0, Tag1 ("Typetexp", 18)), 0); Tag2 (("Already_bound", 1037), ((Tag3 ("exn", 7)), 0, (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Typetexp", 19)), 2, 0); Tag1 (("error", 1038), (0, 0, Tag1 ([(("Unbound_type_variable", 796), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -26); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -28)], (0)), 100000000, 0, -27)]), 0, (("typing/typetexp.mli", 70, 2949, 2951), ("typing/typetexp.mli", 70, 2949, 2998), 0), 0, Tag1 ("Typetexp", 21)); (("No_type_wildcards", 797), (0), 0, (("typing/typetexp.mli", 71, 2999, 3001), ("typing/typetexp.mli", 71, 2999, 3020), 0), 0, Tag1 ("Typetexp", 22)); (("Undefined_type_constructor", 798), ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -29)]), 0, (("typing/typetexp.mli", 72, 3021, 3023), ("typing/typetexp.mli", 72, 3021, 3061), 0), 0, Tag1 ("Typetexp", 23)); (("Type_arity_mismatch", 816), ([(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -30); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -31); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -32)]), 0, (("typing/typetexp.mli", 73, 3062, 3064), ("typing/typetexp.mli", 73, 3062, 3112), 0), 0, Tag1 ("Typetexp", 24)); (("Bound_type_variable", 822), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -33)]), 0, (("typing/typetexp.mli", 74, 3113, 3115), ("typing/typetexp.mli", 74, 3113, 3146), 0), 0, Tag1 ("Typetexp", 25)); (("Recursive_type", 823), (0), 0, (("typing/typetexp.mli", 75, 3147, 3149), ("typing/typetexp.mli", 75, 3147, 3165), 0), 0, Tag1 ("Typetexp", 26)); (("Unbound_row_variable", 824), ([(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -34)]), 0, (("typing/typetexp.mli", 76, 3166, 3168), ("typing/typetexp.mli", 76, 3166, 3205), 0), 0, Tag1 ("Typetexp", 27)); (("Type_mismatch", 825), ([(Tag3 (Tag1 ((Tag2 ("Errortrace")), "unification_error"), 0, (0)), 100000000, 0, -35)]), 0, (("typing/typetexp.mli", 77, 3206, 3208), ("typing/typetexp.mli", 77, 3206, 3255), 0), 0, Tag1 ("Typetexp", 29)); (("Alias_type_mismatch", 858), ([(Tag3 (Tag1 ((Tag2 ("Errortrace")), "unification_error"), 0, (0)), 100000000, 0, -36)]), 0, (("typing/typetexp.mli", 78, 3256, 3258), ("typing/typetexp.mli", 78, 3256, 3311), 0), 0, Tag1 ("Typetexp", 30)); (("Present_has_conjunction", 859), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -37)]), 0, (("typing/typetexp.mli", 79, 3312, 3314), ("typing/typetexp.mli", 79, 3312, 3349), 0), 0, Tag1 ("Typetexp", 31)); (("Present_has_no_type", 860), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -38)]), 0, (("typing/typetexp.mli", 80, 3350, 3352), ("typing/typetexp.mli", 80, 3350, 3383), 0), 0, Tag1 ("Typetexp", 32)); (("Constructor_mismatch", 861), ([(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -39); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -40)]), 0, (("typing/typetexp.mli", 81, 3384, 3386), ("typing/typetexp.mli", 81, 3384, 3433), 0), 0, Tag1 ("Typetexp", 33)); (("Not_a_variant", 862), ([(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -41)]), 0, (("typing/typetexp.mli", 82, 3434, 3436), ("typing/typetexp.mli", 82, 3434, 3464), 0), 0, Tag1 ("Typetexp", 34)); (("Variant_tags", 863), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -42); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -43)]), 0, (("typing/typetexp.mli", 83, 3465, 3467), ("typing/typetexp.mli", 83, 3465, 3500), 0), 0, Tag1 ("Typetexp", 35)); (("Invalid_variable_name", 864), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -44)]), 0, (("typing/typetexp.mli", 84, 3501, 3503), ("typing/typetexp.mli", 84, 3501, 3536), 0), 0, Tag1 ("Typetexp", 36)); (("Cannot_quantify", 865), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -45); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -46)]), 0, (("typing/typetexp.mli", 85, 3537, 3539), ("typing/typetexp.mli", 85, 3537, 3578), 0), 0, Tag1 ("Typetexp", 37)); (("Multiple_constraints_on_type", 866), ([(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -47)]), 0, (("typing/typetexp.mli", 86, 3579, 3581), ("typing/typetexp.mli", 86, 3579, 3626), 0), 0, Tag1 ("Typetexp", 38)); (("Method_mismatch", 867), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -48); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -49); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -50)]), 0, (("typing/typetexp.mli", 87, 3627, 3629), ("typing/typetexp.mli", 87, 3627, 3680), 0), 0, Tag1 ("Typetexp", 39)); (("Opened_object", 868), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -52)], (0)), 100000000, 0, -51)]), 0, (("typing/typetexp.mli", 88, 3681, 3683), ("typing/typetexp.mli", 88, 3681, 3715), 0), 0, Tag1 ("Typetexp", 40)); (("Not_an_object", 869), ([(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -53)]), 0, (("typing/typetexp.mli", 89, 3716, 3718), ("typing/typetexp.mli", 89, 3716, 3746), 0), 0, Tag1 ("Typetexp", 41))], 0), 1, 0, 0, 0, 0, 0, (("typing/typetexp.mli", 69, 2936, 2936), ("typing/typetexp.mli", 89, 3716, 3746), 0), 0, 0, 0, Tag1 ("Typetexp", 20)), 1, 0); Tag2 (("Error", 1039), ((Tag3 ("exn", 7)), 0, ([(Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -23); (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -24); (Tag3 ((("error", 1038)), 0, (0)), 100000000, 0, -25)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Typetexp", 42)), 2, 0); (("report_error", 1040), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -22), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -21), (Tag1 (0, (Tag3 ((("error", 1038)), 0, (0)), 100000000, 0, -20), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("typing/typetexp.mli", 93, 3795, 3795), ("typing/typetexp.mli", 93, 3795, 3855), 0), 0, Tag1 ("Typetexp", 43)), 0); (("transl_modtype_longident", 1041), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -15), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -14), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -13), (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0), 100000000, 0, -10), 0), 100000000, 0, -9)], (0)), 100000000, 0, -8), 0, (("typing/typetexp.mli", 96, 3896, 3896), ("typing/typetexp.mli", 97, 3946, 4000), 0), 0, Tag1 ("Typetexp", 44)), 0); (("transl_modtype", 1042), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -7), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "module_type"), 0, (0)), 100000000, 0, -6), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_type"), 0, (0)), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3)], (0)), 100000000, 0, -2), 0, (("typing/typetexp.mli", 98, 4001, 4001), ("typing/typetexp.mli", 99, 4040, 4105), 0), 0, Tag1 ("Typetexp", 45)), 0)], "Typetexp", [("Typetexp", ("b\190\n\182+\247d_\170k\139\157\163\235\132\216")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Types", ("\177\238\029.\220\006\163!\230\015\006\182\133\155\194\166")); ("Typedtree", ("c5z\186\175w\146\254\018V\184\031\0038\004\227")); ("Type_immediacy", ("\"\127k\011Q\241\211\138\193;8\142\129\141#\251")); ("Subst", ("\021\031\148\223\127\186\189\135\027}\145r\216\143\177\156")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shape", ("\235\127Y\213\025\137=\244\218\181\248N\189\188\216p")); ("Primitive", ("}Shh\162\015|\220A\203\249\232\245G\213\019")); ("Path", ("\012\183\178\025\1298\228*\021r\185\160Y\252\n\026")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Outcometree", ("9\021%\234\211\206\210\004H\165\208\2014\234Q\142")); ("Misc", ("*\026\026\234c\191\131\161\\\203\183\012O\252\153\198")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Load_path", ("\012@\228l\230\164S\172h\1726X\020\252o}")); ("Identifiable", ("\004F\207\014\158GU\001\184\214\187%/#;\211")); ("Ident", ("\b9;!\187.\220\163(x\b\174\\\223\020\004")); ("Errortrace", ("\238\196yV6<x\\\13126\144\141\000~\145")); ("Env", ("\021\n\181\142x\b\169j\227\"\017\248*\178\245\223")); ("Cmi_format", ("6\177\bU\139\"\023\152=\249\135\174\b\011Cg")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Build_path_prefix_map", ("y\028\167\207D\220\198\216\011\208\172\149\2416\bc")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216"))], [(0)])
(Env.t -> Parsetree.module_type -> Typedtree.module_type) ref

type form =
    Atom of int
  | Arrow of form * form
  | Bot
  | Conjunct of form * form
  | Disjunct of form * form
type proof =
    Ax of int
  | I_Arrow of proof
  | E_Arrow of int * int * proof
  | D_Arrow of int * proof * proof
  | E_False of int
  | I_And of proof * proof
  | E_And of int * proof
  | D_And of int * proof
  | I_Or_l of proof
  | I_Or_r of proof
  | E_Or of int * proof * proof
  | D_Or of int * proof
  | Pop of int * proof
type state
val project : state -> proof
val init_state : ('a * form * 'b) list -> form -> state
val branching : state -> state list
val success : state -> bool
val pp : state -> Pp.t
val pr_form : form -> Pp.t
val reset_info : unit -> unit("DEBUG:rule", [Tag1 (("form", 363), (0, 0, Tag1 ([(("Atom", 273), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -57)]), 0, (("plugins/rtauto/proof_search.mli", 12, 687, 691), ("plugins/rtauto/proof_search.mli", 12, 687, 702), 0), 0, Tag1 ("Rtauto_plugin__Proof_search", 1)); (("Arrow", 274), ([(Tag3 ((("form", 363)), 0, (0)), 100000000, 0, -58); (Tag3 ((("form", 363)), 0, (0)), 100000000, 0, -59)]), 0, (("plugins/rtauto/proof_search.mli", 13, 703, 705), ("plugins/rtauto/proof_search.mli", 13, 703, 727), 0), 0, Tag1 ("Rtauto_plugin__Proof_search", 2)); (("Bot", 275), (0), 0, (("plugins/rtauto/proof_search.mli", 14, 728, 730), ("plugins/rtauto/proof_search.mli", 14, 728, 735), 0), 0, Tag1 ("Rtauto_plugin__Proof_search", 3)); (("Conjunct", 276), ([(Tag3 ((("form", 363)), 0, (0)), 100000000, 0, -60); (Tag3 ((("form", 363)), 0, (0)), 100000000, 0, -61)]), 0, (("plugins/rtauto/proof_search.mli", 15, 736, 738), ("plugins/rtauto/proof_search.mli", 15, 736, 763), 0), 0, Tag1 ("Rtauto_plugin__Proof_search", 4)); (("Disjunct", 277), ([(Tag3 ((("form", 363)), 0, (0)), 100000000, 0, -62); (Tag3 ((("form", 363)), 0, (0)), 100000000, 0, -63)]), 0, (("plugins/rtauto/proof_search.mli", 16, 764, 766), ("plugins/rtauto/proof_search.mli", 16, 764, 791), 0), 0, Tag1 ("Rtauto_plugin__Proof_search", 5))], 0), 1, 0, 0, 0, 0, 0, (("plugins/rtauto/proof_search.mli", 11, 676, 676), ("plugins/rtauto/proof_search.mli", 16, 764, 791), 0), 0, 0, 0, Tag1 ("Rtauto_plugin__Proof_search", 0)), 1, 0); Tag1 (("proof", 364), (0, 0, Tag1 ([(("Ax", 279), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -33)]), 0, (("plugins/rtauto/proof_search.mli", 19, 806, 810), ("plugins/rtauto/proof_search.mli", 19, 806, 819), 0), 0, Tag1 ("Rtauto_plugin__Proof_search", 7)); (("I_Arrow", 280), ([(Tag3 ((("proof", 364)), 0, (0)), 100000000, 0, -34)]), 0, (("plugins/rtauto/proof_search.mli", 20, 820, 822), ("plugins/rtauto/proof_search.mli", 20, 820, 840), 0), 0, Tag1 ("Rtauto_plugin__Proof_search", 8)); (("E_Arrow", 281), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -35); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -36); (Tag3 ((("proof", 364)), 0, (0)), 100000000, 0, -37)]), 0, (("plugins/rtauto/proof_search.mli", 21, 841, 843), ("plugins/rtauto/proof_search.mli", 21, 841, 869), 0), 0, Tag1 ("Rtauto_plugin__Proof_search", 9)); (("D_Arrow", 282), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -38); (Tag3 ((("proof", 364)), 0, (0)), 100000000, 0, -39); (Tag3 ((("proof", 364)), 0, (0)), 100000000, 0, -40)]), 0, (("plugins/rtauto/proof_search.mli", 22, 870, 872), ("plugins/rtauto/proof_search.mli", 22, 870, 900), 0), 0, Tag1 ("Rtauto_plugin__Proof_search", 10)); (("E_False", 283), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -41)]), 0, (("plugins/rtauto/proof_search.mli", 23, 901, 903), ("plugins/rtauto/proof_search.mli", 23, 901, 919), 0), 0, Tag1 ("Rtauto_plugin__Proof_search", 11)); (("I_And", 284), ([(Tag3 ((("proof", 364)), 0, (0)), 100000000, 0, -42); (Tag3 ((("proof", 364)), 0, (0)), 100000000, 0, -43)]), 0, (("plugins/rtauto/proof_search.mli", 24, 920, 922), ("plugins/rtauto/proof_search.mli", 24, 920, 944), 0), 0, Tag1 ("Rtauto_plugin__Proof_search", 12)); (("E_And", 285), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -44); (Tag3 ((("proof", 364)), 0, (0)), 100000000, 0, -45)]), 0, (("plugins/rtauto/proof_search.mli", 25, 945, 947), ("plugins/rtauto/proof_search.mli", 25, 945, 967), 0), 0, Tag1 ("Rtauto_plugin__Proof_search", 13)); (("D_And", 286), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -46); (Tag3 ((("proof", 364)), 0, (0)), 100000000, 0, -47)]), 0, (("plugins/rtauto/proof_search.mli", 26, 968, 970), ("plugins/rtauto/proof_search.mli", 26, 968, 990), 0), 0, Tag1 ("Rtauto_plugin__Proof_search", 14)); (("I_Or_l", 287), ([(Tag3 ((("proof", 364)), 0, (0)), 100000000, 0, -48)]), 0, (("plugins/rtauto/proof_search.mli", 27, 991, 993), ("plugins/rtauto/proof_search.mli", 27, 991, 1010), 0), 0, Tag1 ("Rtauto_plugin__Proof_search", 15)); (("I_Or_r", 288), ([(Tag3 ((("proof", 364)), 0, (0)), 100000000, 0, -49)]), 0, (("plugins/rtauto/proof_search.mli", 28, 1011, 1013), ("plugins/rtauto/proof_search.mli", 28, 1011, 1030), 0), 0, Tag1 ("Rtauto_plugin__Proof_search", 16)); (("E_Or", 289), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -50); (Tag3 ((("proof", 364)), 0, (0)), 100000000, 0, -51); (Tag3 ((("proof", 364)), 0, (0)), 100000000, 0, -52)]), 0, (("plugins/rtauto/proof_search.mli", 29, 1031, 1033), ("plugins/rtauto/proof_search.mli", 29, 1031, 1058), 0), 0, Tag1 ("Rtauto_plugin__Proof_search", 17)); (("D_Or", 290), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -53); (Tag3 ((("proof", 364)), 0, (0)), 100000000, 0, -54)]), 0, (("plugins/rtauto/proof_search.mli", 30, 1059, 1061), ("plugins/rtauto/proof_search.mli", 30, 1059, 1080), 0), 0, Tag1 ("Rtauto_plugin__Proof_search", 18)); (("Pop", 291), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -55); (Tag3 ((("proof", 364)), 0, (0)), 100000000, 0, -56)]), 0, (("plugins/rtauto/proof_search.mli", 31, 1081, 1083), ("plugins/rtauto/proof_search.mli", 31, 1081, 1101), 0), 0, Tag1 ("Rtauto_plugin__Proof_search", 19))], 0), 1, 0, 0, 0, 0, 0, (("plugins/rtauto/proof_search.mli", 18, 793, 793), ("plugins/rtauto/proof_search.mli", 31, 1081, 1101), 0), 0, 0, 0, Tag1 ("Rtauto_plugin__Proof_search", 6)), 1, 0); Tag1 (("state", 365), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("plugins/rtauto/proof_search.mli", 33, 1103, 1103), ("plugins/rtauto/proof_search.mli", 33, 1103, 1113), 0), 0, 0, 0, Tag1 ("Rtauto_plugin__Proof_search", 20)), 1, 0); (("project", 366), ((Tag1 (0, (Tag3 ((("state", 365)), 0, (0)), 100000000, 0, -32), (Tag3 ((("proof", 364)), 0, (0)), 100000000, 0, -31), 0), 100000000, 0, -30), 0, (("plugins/rtauto/proof_search.mli", 35, 1115, 1115), ("plugins/rtauto/proof_search.mli", 35, 1115, 1142), 0), 0, Tag1 ("Rtauto_plugin__Proof_search", 21)), 0); (("init_state", 367), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("a")), 100000000, 0, -27); (Tag3 ((("form", 363)), 0, (0)), 100000000, 0, -28); ((("b")), 100000000, 0, -29)]), 100000000, 0, -26)], (0)), 100000000, 0, -25), (Tag1 (0, (Tag3 ((("form", 363)), 0, (0)), 100000000, 0, -24), (Tag3 ((("state", 365)), 0, (0)), 100000000, 0, -23), 0), 100000000, 0, -22), 0), 100000000, 0, -21), 0, (("plugins/rtauto/proof_search.mli", 37, 1144, 1144), ("plugins/rtauto/proof_search.mli", 37, 1144, 1200), 0), 0, Tag1 ("Rtauto_plugin__Proof_search", 22)), 0); (("branching", 368), ((Tag1 (0, (Tag3 ((("state", 365)), 0, (0)), 100000000, 0, -20), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("state", 365)), 0, (0)), 100000000, 0, -19)], (0)), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("plugins/rtauto/proof_search.mli", 39, 1202, 1202), ("plugins/rtauto/proof_search.mli", 39, 1202, 1236), 0), 0, Tag1 ("Rtauto_plugin__Proof_search", 23)), 0); (("success", 369), ((Tag1 (0, (Tag3 ((("state", 365)), 0, (0)), 100000000, 0, -16), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -15), 0), 100000000, 0, -14), 0, (("plugins/rtauto/proof_search.mli", 41, 1238, 1238), ("plugins/rtauto/proof_search.mli", 41, 1238, 1264), 0), 0, Tag1 ("Rtauto_plugin__Proof_search", 24)), 0); (("pp", 370), ((Tag1 (0, (Tag3 ((("state", 365)), 0, (0)), 100000000, 0, -13), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("plugins/rtauto/proof_search.mli", 43, 1266, 1266), ("plugins/rtauto/proof_search.mli", 43, 1266, 1287), 0), 0, Tag1 ("Rtauto_plugin__Proof_search", 25)), 0); (("pr_form", 371), ((Tag1 (0, (Tag3 ((("form", 363)), 0, (0)), 100000000, 0, -10), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("plugins/rtauto/proof_search.mli", 45, 1289, 1289), ("plugins/rtauto/proof_search.mli", 45, 1289, 1315), 0), 0, Tag1 ("Rtauto_plugin__Proof_search", 26)), 0); (("reset_info", 372), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("plugins/rtauto/proof_search.mli", 47, 1317, 1317), ("plugins/rtauto/proof_search.mli", 47, 1317, 1346), 0), 0, Tag1 ("Rtauto_plugin__Proof_search", 27)), 0); (("pp_info", 373), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("plugins/rtauto/proof_search.mli", 49, 1348, 1348), ("plugins/rtauto/proof_search.mli", 49, 1348, 1374), 0), 0, Tag1 ("Rtauto_plugin__Proof_search", 28)), 0)], "Rtauto_plugin__Proof_search", [("Rtauto_plugin__Proof_search", ("Q\245\179\190\025/\242\177xi~\212\255\170\217!")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Rtauto_plugin", ("\236\028~\164\175\236\223a\157\129\211\142\155\236\243L")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

val pp_info : unit -> unit

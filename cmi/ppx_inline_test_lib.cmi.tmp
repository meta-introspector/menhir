val am_running : bool
val am_running_env_var : string
val testing :
  [ `Not_testing | `Testing of [ `Am_child_of_test_runner | `Am_test_runner ]
  ]
module Test_result :
  sig
    type t = Success | Failure | Error
    val combine : t -> t -> t
    val combine_all : t list -> t
    val to_string : t -> string
  end
type config = (module Inline_test_config.S)
type 'a test_function_args =
    config:config ->
    descr:string Lazy.t ->
    tags:string list ->
    filename:string -> line_number:int -> start_pos:int -> end_pos:int -> 'a
val set_lib_and_partition : string -> string -> unit
val unset_lib : string -> unit
val test : ((unit -> bool) -> unit) test_function_args
val test_unit : ((unit -> unit) -> unit) test_function_args
val test_module : ((unit -> unit) -> unit) test_function_args
val use_color : bool
val in_place : bool
val diff_command : string option
val diff_path_prefix : string option
val source_tree_root : string option
val add_evaluator : f:(unit -> Test_result.t) -> unit("DEBUG:rule", [(("am_running", 311), ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -67), 0, (("runtime-lib/ppx_inline_test_lib.mli", 4, 178, 178), ("runtime-lib/ppx_inline_test_lib.mli", 4, 178, 199), 0), 0, Tag1 ("Ppx_inline_test_lib", 0)), 0); (("am_running_env_var", 312), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -66), 0, (("runtime-lib/ppx_inline_test_lib.mli", 6, 201, 201), ("runtime-lib/ppx_inline_test_lib.mli", 6, 201, 232), 0), 0, Tag1 ("Ppx_inline_test_lib", 1)), 0); (("testing", 313), ((Tag8 (([("Not_testing", (0)); ("Testing", (((Tag8 (([("Am_child_of_test_runner", (0)); ("Am_test_runner", (0))], (0, 100000000, 0, -65), 1, 0, 0)), 100000000, 0, -64))))], (0, 100000000, 0, -63), 1, 0, 0)), 100000000, 0, -62), 0, (("runtime-lib/ppx_inline_test_lib.mli", 10, 389, 389), ("runtime-lib/ppx_inline_test_lib.mli", 11, 401, 482), 0), 0, Tag1 ("Ppx_inline_test_lib", 2)), 0); Tag3 (("Test_result", 314), 0, (Tag1 ([Tag1 (("t", 329), (0, 0, Tag1 ([(("Success", 273), (0), 0, (("runtime-lib/ppx_inline_test_lib.mli", 19, 581, 585), ("runtime-lib/ppx_inline_test_lib.mli", 19, 581, 594), 0), 0, Tag1 ("Ppx_inline_test_lib", 4)); (("Failure", 274), (0), 0, (("runtime-lib/ppx_inline_test_lib.mli", 20, 595, 599), ("runtime-lib/ppx_inline_test_lib.mli", 20, 595, 608), 0), 0, Tag1 ("Ppx_inline_test_lib", 5)); (("Error", 275), (0), 0, (("runtime-lib/ppx_inline_test_lib.mli", 21, 609, 613), ("runtime-lib/ppx_inline_test_lib.mli", 21, 609, 620), 0), 0, Tag1 ("Ppx_inline_test_lib", 6))], 0), 1, 0, 0, 0, 0, 0, (("runtime-lib/ppx_inline_test_lib.mli", 18, 570, 572), ("runtime-lib/ppx_inline_test_lib.mli", 21, 609, 620), 0), 0, 1, 0, Tag1 ("Ppx_inline_test_lib", 3)), 1, 0); (("combine", 330), ((Tag1 (0, (Tag3 ((("t", 329)), 0, (0)), 100000000, 0, -79), (Tag1 (0, (Tag3 ((("t", 329)), 0, (0)), 100000000, 0, -78), (Tag3 ((("t", 329)), 0, (0)), 100000000, 0, -77), 0), 100000000, 0, -76), 0), 100000000, 0, -75), 0, (("runtime-lib/ppx_inline_test_lib.mli", 23, 622, 624), ("runtime-lib/ppx_inline_test_lib.mli", 23, 622, 649), 0), 0, Tag1 ("Ppx_inline_test_lib", 7)), 0); (("combine_all", 331), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 329)), 0, (0)), 100000000, 0, -74)], (0)), 100000000, 0, -73), (Tag3 ((("t", 329)), 0, (0)), 100000000, 0, -72), 0), 100000000, 0, -71), 0, (("runtime-lib/ppx_inline_test_lib.mli", 24, 650, 652), ("runtime-lib/ppx_inline_test_lib.mli", 24, 650, 681), 0), 0, Tag1 ("Ppx_inline_test_lib", 8)), 0); (("to_string", 332), ((Tag1 (0, (Tag3 ((("t", 329)), 0, (0)), 100000000, 0, -70), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -69), 0), 100000000, 0, -68), 0, (("runtime-lib/ppx_inline_test_lib.mli", 25, 682, 684), ("runtime-lib/ppx_inline_test_lib.mli", 25, 682, 711), 0), 0, Tag1 ("Ppx_inline_test_lib", 9)), 0)]), 0, (("runtime-lib/ppx_inline_test_lib.mli", 17, 545, 545), ("runtime-lib/ppx_inline_test_lib.mli", 26, 712, 715), 0), Tag1 ("Ppx_inline_test_lib", 10)), 0, 0); Tag1 (("config", 315), (0, 0, 0, 1, ((Tag11 (Tag1 ((Tag2 ("Inline_test_config")), "S"), 0), 100000000, 0, -61)), 0, 0, 0, 0, (("runtime-lib/ppx_inline_test_lib.mli", 28, 717, 717), ("runtime-lib/ppx_inline_test_lib.mli", 28, 717, 760), 0), 0, 0, 0, Tag1 ("Ppx_inline_test_lib", 11)), 1, 0); Tag1 (("test_function_args", 316), ([((("a")), 100000000, 0, -51)], 1, 0, 1, ((Tag1 (("config"), (Tag3 ((("config", 315)), 0, (0)), 100000000, 0, -60), (Tag1 (("descr"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lazy"), "t"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -59)], (0)), 100000000, 0, -58), (Tag1 (("tags"), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -57)], (0)), 100000000, 0, -56), (Tag1 (("filename"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -55), (Tag1 (("line_number"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -54), (Tag1 (("start_pos"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -53), (Tag1 (("end_pos"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -52), ((("a")), 100000000, 0, -51), 0), 100000000, 0, -50), 0), 100000000, 0, -49), 0), 100000000, 0, -48), 0), 100000000, 0, -47), 0), 100000000, 0, -46), 0), 100000000, 0, -45), 0), 100000000, 0, -44)), [25], [0], 0, 0, (("runtime-lib/ppx_inline_test_lib.mli", 30, 762, 762), ("runtime-lib/ppx_inline_test_lib.mli", 38, 932, 939), 0), 0, 0, 0, Tag1 ("Ppx_inline_test_lib", 12)), 1, 0); (("set_lib_and_partition", 317), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -43), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -42), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -41), 0), 100000000, 0, -40), 0), 100000000, 0, -39), 0, (("runtime-lib/ppx_inline_test_lib.mli", 40, 941, 941), ("runtime-lib/ppx_inline_test_lib.mli", 40, 941, 993), 0), 0, Tag1 ("Ppx_inline_test_lib", 13)), 0); (("unset_lib", 318), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -38), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -37), 0), 100000000, 0, -36), 0, (("runtime-lib/ppx_inline_test_lib.mli", 41, 994, 994), ("runtime-lib/ppx_inline_test_lib.mli", 41, 994, 1024), 0), 0, Tag1 ("Ppx_inline_test_lib", 14)), 0); (("test", 319), ((Tag3 ((("test_function_args", 316)), [(Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -35), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -34), 0), 100000000, 0, -33), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -32), 0), 100000000, 0, -31)], (0)), 100000000, 0, -30), 0, (("runtime-lib/ppx_inline_test_lib.mli", 42, 1025, 1025), ("runtime-lib/ppx_inline_test_lib.mli", 42, 1025, 1079), 0), 0, Tag1 ("Ppx_inline_test_lib", 15)), 0); (("test_unit", 320), ((Tag3 ((("test_function_args", 316)), [(Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -29), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -28), 0), 100000000, 0, -27), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -26), 0), 100000000, 0, -25)], (0)), 100000000, 0, -24), 0, (("runtime-lib/ppx_inline_test_lib.mli", 43, 1080, 1080), ("runtime-lib/ppx_inline_test_lib.mli", 43, 1080, 1139), 0), 0, Tag1 ("Ppx_inline_test_lib", 16)), 0); (("test_module", 321), ((Tag3 ((("test_function_args", 316)), [(Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -23), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -22), 0), 100000000, 0, -21), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -20), 0), 100000000, 0, -19)], (0)), 100000000, 0, -18), 0, (("runtime-lib/ppx_inline_test_lib.mli", 44, 1140, 1140), ("runtime-lib/ppx_inline_test_lib.mli", 44, 1140, 1201), 0), 0, Tag1 ("Ppx_inline_test_lib", 17)), 0); (("use_color", 322), ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -17), 0, (("runtime-lib/ppx_inline_test_lib.mli", 45, 1202, 1202), ("runtime-lib/ppx_inline_test_lib.mli", 45, 1202, 1222), 0), 0, Tag1 ("Ppx_inline_test_lib", 18)), 0); (("in_place", 323), ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -16), 0, (("runtime-lib/ppx_inline_test_lib.mli", 46, 1223, 1223), ("runtime-lib/ppx_inline_test_lib.mli", 46, 1223, 1242), 0), 0, Tag1 ("Ppx_inline_test_lib", 19)), 0); (("diff_command", 324), ((Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -15)], (0)), 100000000, 0, -14), 0, (("runtime-lib/ppx_inline_test_lib.mli", 47, 1243, 1243), ("runtime-lib/ppx_inline_test_lib.mli", 47, 1243, 1275), 0), 0, Tag1 ("Ppx_inline_test_lib", 20)), 0); (("diff_path_prefix", 325), ((Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -13)], (0)), 100000000, 0, -12), 0, (("runtime-lib/ppx_inline_test_lib.mli", 48, 1276, 1276), ("runtime-lib/ppx_inline_test_lib.mli", 48, 1276, 1312), 0), 0, Tag1 ("Ppx_inline_test_lib", 21)), 0); (("source_tree_root", 326), ((Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -11)], (0)), 100000000, 0, -10), 0, (("runtime-lib/ppx_inline_test_lib.mli", 49, 1313, 1313), ("runtime-lib/ppx_inline_test_lib.mli", 49, 1313, 1349), 0), 0, Tag1 ("Ppx_inline_test_lib", 22)), 0); (("add_evaluator", 327), ((Tag1 (("f"), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -9), (Tag3 (Tag1 ((("Test_result", 314)), "t"), 0, (0)), 100000000, 0, -8), 0), 100000000, 0, -7), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("runtime-lib/ppx_inline_test_lib.mli", 52, 1407, 1407), ("runtime-lib/ppx_inline_test_lib.mli", 52, 1407, 1460), 0), 0, Tag1 ("Ppx_inline_test_lib", 23)), 0); (("exit", 328), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4), ((0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("runtime-lib/ppx_inline_test_lib.mli", 55, 1544, 1544), ("runtime-lib/ppx_inline_test_lib.mli", 55, 1544, 1564), 0), 0, Tag1 ("Ppx_inline_test_lib", 24)), 0)], "Ppx_inline_test_lib", [("Ppx_inline_test_lib", ("\218y\132\179\250\138\134,\155\143\192\163\025\218\"\217")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Inline_test_config", ("\\i\218(\228\139X\218\168\n-\152\158\165\2337")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

val exit : unit -> 'a

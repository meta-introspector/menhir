type ('f, 's) t = First of 'f | Second of 's
val compare :
  ('f -> 'f -> int) -> ('s -> 's -> int) -> ('f, 's) t -> ('f, 's) t -> int
val hash_fold_t :
  (Base__.Ppx_hash_lib.Std.Hash.state ->
   'f -> Base__.Ppx_hash_lib.Std.Hash.state) ->
  (Base__.Ppx_hash_lib.Std.Hash.state ->
   's -> Base__.Ppx_hash_lib.Std.Hash.state) ->
  Base__.Ppx_hash_lib.Std.Hash.state ->
  ('f, 's) t -> Base__.Ppx_hash_lib.Std.Hash.state
val t_of_sexp :
  (Sexplib0.Sexp.t -> 'f) ->
  (Sexplib0.Sexp.t -> 's) -> Sexplib0.Sexp.t -> ('f, 's) t
val sexp_of_t :
  ('f -> Sexplib0.Sexp.t) ->
  ('s -> Sexplib0.Sexp.t) -> ('f, 's) t -> Sexplib0.Sexp.t
val t_sexp_grammar :
  'f Sexplib0.Sexp_grammar.t ->
  ("DEBUG:rule", [Tag1 (("t", 1503), ([((("f")), 100000000, 0, -62); ((("s")), 100000000, 0, -63)], 2, Tag1 ([(("First", 783), ([((("f")), 100000000, 0, -62)]), 0, (("src/either0.ml", 4, 32, 34), ("src/either0.ml", 4, 32, 47), 0), 0, Tag1 ("Base__Either0", 1)); (("Second", 784), ([((("s")), 100000000, 0, -63)]), 0, (("src/either0.ml", 5, 48, 50), ("src/either0.ml", 5, 48, 64), 0), 0, Tag1 ("Base__Either0", 2))], 0), 1, 0, [25; 25], [0; 0], 0, 0, (("src/either0.ml", 3, 14, 14), ("src/either0.ml", 6, 65, 118), 0), [(("deriving_inline", (("src/either0.ml", 6, 65, 68), ("src/either0.ml", 6, 65, 83), 0)), ([([(Tag8 ([(((("compare"), (("src/either0.ml", 6, 65, 84), ("src/either0.ml", 6, 65, 91), 0))), (("src/either0.ml", 6, 65, 84), ("src/either0.ml", 6, 65, 91), 0), 0, 0); (((("hash"), (("src/either0.ml", 6, 65, 93), ("src/either0.ml", 6, 65, 97), 0))), (("src/either0.ml", 6, 65, 93), ("src/either0.ml", 6, 65, 97), 0), 0, 0); (((("sexp"), (("src/either0.ml", 6, 65, 99), ("src/either0.ml", 6, 65, 103), 0))), (("src/either0.ml", 6, 65, 99), ("src/either0.ml", 6, 65, 103), 0), 0, 0); (((("sexp_grammar"), (("src/either0.ml", 6, 65, 105), ("src/either0.ml", 6, 65, 117), 0))), (("src/either0.ml", 6, 65, 105), ("src/either0.ml", 6, 65, 117), 0), 0, 0)]), (("src/either0.ml", 6, 65, 84), ("src/either0.ml", 6, 65, 117), 0), 0, 0)], (("src/either0.ml", 6, 65, 84), ("src/either0.ml", 6, 65, 117), 0))]), (("src/either0.ml", 6, 65, 65), ("src/either0.ml", 6, 65, 118), 0))], 0, 0, Tag1 ("Base__Either0", 0)), 1, 0); (("compare", 1504), ((Tag1 (0, (Tag1 (0, ((("f")), 100000000, 0, -55), (Tag1 (0, ((("f")), 100000000, 0, -55), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -53), 0), 100000000, 0, -61), 0), 100000000, 0, -60), (Tag1 (0, (Tag1 (0, ((("s")), 100000000, 0, -56), (Tag1 (0, ((("s")), 100000000, 0, -56), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -53), 0), 100000000, 0, -59), 0), 100000000, 0, -58), (Tag1 (0, (Tag3 ((("t", 1503)), [((("f")), 100000000, 0, -55); ((("s")), 100000000, 0, -56)], (0)), 100000000, 0, -57), (Tag1 (0, (Tag3 ((("t", 1503)), [((("f")), 100000000, 0, -55); ((("s")), 100000000, 0, -56)], (0)), 100000000, 0, -54), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -53), 0), 100000000, 0, -52), 0), 100000000, 0, -51), 0), 100000000, 0, -50), 0), 100000000, 0, -49), 0, (("src/either0.ml", 8, 120, 124), ("src/either0.ml", 8, 120, 131), 0), 0, Tag1 ("Base__Either0", 3)), 0); (("hash_fold_t", 1505), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -48), (Tag1 (0, ((("f")), 100000000, 0, -38), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -47), 0), 100000000, 0, -46), 0), 100000000, 0, -45), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -44), (Tag1 (0, ((("s")), 100000000, 0, -39), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -43), 0), 100000000, 0, -42), 0), 100000000, 0, -41), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -40), (Tag1 (0, (Tag3 ((("t", 1503)), [((("f")), 100000000, 0, -38); ((("s")), 100000000, 0, -39)], (0)), 100000000, 0, -37), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -36), 0), 100000000, 0, -35), 0), 100000000, 0, -34), 0), 100000000, 0, -33), 0), 100000000, 0, -32), 0, (("src/either0.ml", 22, 531, 535), ("src/either0.ml", 22, 531, 546), 0), 0, Tag1 ("Base__Either0", 12)), 0); (("t_of_sexp", 1506), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -31), ((("f")), 100000000, 0, -25), 0), 100000000, 0, -30), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -29), ((("s")), 100000000, 0, -26), 0), 100000000, 0, -28), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -27), (Tag3 ((("t", 1503)), [((("f")), 100000000, 0, -25); ((("s")), 100000000, 0, -26)], (0)), 100000000, 0, -24), 0), 100000000, 0, -23), 0), 100000000, 0, -22), 0), 100000000, 0, -21), 0, (("src/either0.ml", 42, 1093, 1097), ("src/either0.ml", 42, 1093, 1106), 0), 0, Tag1 ("Base__Either0", 25)), 0); (("sexp_of_t", 1507), ((Tag1 (0, (Tag1 (0, ((("f")), 100000000, 0, -15), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -20), 0), 100000000, 0, -19), (Tag1 (0, (Tag1 (0, ((("s")), 100000000, 0, -16), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -18), 0), 100000000, 0, -17), (Tag1 (0, (Tag3 ((("t", 1503)), [((("f")), 100000000, 0, -15); ((("s")), 100000000, 0, -16)], (0)), 100000000, 0, -14), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -13), 0), 100000000, 0, -12), 0), 100000000, 0, -11), 0), 100000000, 0, -10), 0, (("src/either0.ml", 86, 3020, 3024), ("src/either0.ml", 86, 3020, 3033), 0), 0, Tag1 ("Base__Either0", 46)), 0); (("t_sexp_grammar", 1508), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [((("f")), 100000000, 0, -6)], (0)), 100000000, 0, -9), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [((("s")), 100000000, 0, -7)], (0)), 100000000, 0, -8), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("t", 1503)), [((("f")), 100000000, 0, -6); ((("s")), 100000000, 0, -7)], (0)), 100000000, 0, -5)], (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/either0.ml", 102, 3640, 3644), ("src/either0.ml", 102, 3640, 3658), 0), 0, Tag1 ("Base__Either0", 56)), 0)], "Base__Either0", [("Base__Either0", ("!9-\011n\2077eZ\212\031c\227\029\206\t")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__StringLabels", ("\134F\024\226\216Is#\223\230\234\169Z\206Gc")); ("Stdlib__StdLabels", (".\193\n\229\139\017\212C-ZA\\kz-\128")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Printf", ("\215<\139]\021\142\224E\245m\198qc(W\229")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__MoreLabels", ("\248\232\248\254`<\230\241\161U\193U\1466J\238")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__ListLabels", ("*\194\012\191\020%\170\249m\002\180\178hk\205\220")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shadow_stdlib", ("\219zi\164\203\158e)\232\221\196\168\138x\142\018")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv_error", ("kzv!\151~\198P\000\165\176d\007\251p\232")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Base_internalhash_types", ("0\148#2\226\223\018\135\173>!\020\237\017\255\149")); ("Base__Sexp", ("\154\187\171&\209=\153[\236\250!U\174`\190T")); ("Base__Ppx_hash_lib", ("\199\141\178\193\006\209L\007^\020(\131\224sn8")); ("Base__Ppx_compare_lib", ("\243\186~\233\228\199Ah\181.\223\004e\231\129S")); ("Base__Poly0", ("\230;\143\234\255.H\132KOe7\155\\\023f")); ("Base__Import0", ("\156\129U\197Y[\\\153\017Ho\203\173\204\220\020")); ("Base__Import", ("\014\187\247\141\187\181\142g\176:s_,\181\219\209")); ("Base__Hash_intf", ("h\004P\218\1531G\127\212\208A\024\140\164iq")); ("Base__Hash", ("\206Rc\194\234{s3\248\165\024\162\203{\206\206")); ("Base__Globalize", ("<\243w~.\180\196t\159\193\174[\227\139\215G")); ("Base__Bool0", ("\177f\254p\023\143&\239\020\136\206\242~\018F\251")); ("Base__", ("p\252\007\139\128\163W\025+\0225\001\246|P\158"))], [(0)])
's Sexplib0.Sexp_grammar.t -> ('f, 's) t Sexplib0.Sexp_grammar.t

module String = Misc.Stdlib.String
type map_tree = Node of String.Set.t * bound_map
and bound_map = map_tree String.Map.t
val make_leaf : string -> map_tree
val make_node : bound_map -> map_tree
val weaken_map : String.Set.t -> map_tree -> map_tree
val free_structure_names : String.Set.t ref
val pp_deps : string list ref
val open_module : bound_map -> Longident.t -> bound_map
val add_use_file : bound_map -> Parsetree.toplevel_phrase list -> unit
val add_signature : bound_map -> Parsetree.signature -> unit
val add_implementation : bound_map -> Parsetree.structure -> unit
val add_implementation_binding :
  bound_map -> Parsetree.structure -> bound_map
("DEBUG:rule", [Tag3 (("String", 764), 1, (Tag3 (Tag1 (Tag1 ((Tag2 ("Misc")), "Stdlib"), "String")), 0, (("parsing/depend.mli", 23, 1196, 1196), ("parsing/depend.mli", 23, 1196, 1230), 0), Tag1 ("Depend", 0)), 0, 0); Tag1 (("map_tree", 765), (0, 0, Tag1 ([(("Node", 348), ([(Tag3 (Tag1 (Tag1 ((("String", 764)), "Set"), "t"), 0, (0)), 100000000, 0, -51); (Tag3 ((("bound_map", 766)), 0, (0)), 100000000, 0, -52)]), 0, (("parsing/depend.mli", 25, 1232, 1248), ("parsing/depend.mli", 25, 1232, 1280), 0), 0, Tag1 ("Depend", 3))], 0), 1, 0, 0, 0, 0, 0, (("parsing/depend.mli", 25, 1232, 1232), ("parsing/depend.mli", 25, 1232, 1280), 0), 0, 0, 0, Tag1 ("Depend", 1)), 1, 0); Tag1 (("bound_map", 766), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag1 ((("String", 764)), "Map"), "t"), [(Tag3 ((("map_tree", 765)), 0, (0)), 100000000, 0, -50)], (0)), 100000000, 0, -49)), 0, 0, 0, 0, (("parsing/depend.mli", 26, 1281, 1281), ("parsing/depend.mli", 26, 1281, 1319), 0), 0, 0, 0, Tag1 ("Depend", 2)), 2, 0); (("make_leaf", 767), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -48), (Tag3 ((("map_tree", 765)), 0, (0)), 100000000, 0, -47), 0), 100000000, 0, -46), 0, (("parsing/depend.mli", 27, 1320, 1320), ("parsing/depend.mli", 27, 1320, 1354), 0), 0, Tag1 ("Depend", 4)), 0); (("make_node", 768), ((Tag1 (0, (Tag3 ((("bound_map", 766)), 0, (0)), 100000000, 0, -45), (Tag3 ((("map_tree", 765)), 0, (0)), 100000000, 0, -44), 0), 100000000, 0, -43), 0, (("parsing/depend.mli", 28, 1355, 1355), ("parsing/depend.mli", 28, 1355, 1392), 0), 0, Tag1 ("Depend", 5)), 0); (("weaken_map", 769), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((("String", 764)), "Set"), "t"), 0, (0)), 100000000, 0, -42), (Tag1 (0, (Tag3 ((("map_tree", 765)), 0, (0)), 100000000, 0, -41), (Tag3 ((("map_tree", 765)), 0, (0)), 100000000, 0, -40), 0), 100000000, 0, -39), 0), 100000000, 0, -38), 0, (("parsing/depend.mli", 29, 1393, 1393), ("parsing/depend.mli", 29, 1393, 1446), 0), 0, Tag1 ("Depend", 6)), 0); (("free_structure_names", 770), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 (Tag1 (Tag1 ((("String", 764)), "Set"), "t"), 0, (0)), 100000000, 0, -37)], (0)), 100000000, 0, -36), 0, (("parsing/depend.mli", 31, 1448, 1448), ("parsing/depend.mli", 31, 1448, 1491), 0), 0, Tag1 ("Depend", 7)), 0); (("pp_deps", 771), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -35)], (0)), 100000000, 0, -34)], (0)), 100000000, 0, -33), 0, (("parsing/depend.mli", 34, 1542, 1542), ("parsing/depend.mli", 34, 1542, 1571), 0), 0, Tag1 ("Depend", 8)), 0); (("open_module", 772), ((Tag1 (0, (Tag3 ((("bound_map", 766)), 0, (0)), 100000000, 0, -32), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -31), (Tag3 ((("bound_map", 766)), 0, (0)), 100000000, 0, -30), 0), 100000000, 0, -29), 0), 100000000, 0, -28), 0, (("parsing/depend.mli", 36, 1573, 1573), ("parsing/depend.mli", 36, 1573, 1628), 0), 0, Tag1 ("Depend", 9)), 0); (("add_use_file", 773), ((Tag1 (0, (Tag3 ((("bound_map", 766)), 0, (0)), 100000000, 0, -27), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Parsetree")), "toplevel_phrase"), 0, (0)), 100000000, 0, -26)], (0)), 100000000, 0, -25), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -24), 0), 100000000, 0, -23), 0), 100000000, 0, -22), 0, (("parsing/depend.mli", 38, 1630, 1630), ("parsing/depend.mli", 38, 1630, 1700), 0), 0, Tag1 ("Depend", 12)), 0); (("add_signature", 774), ((Tag1 (0, (Tag3 ((("bound_map", 766)), 0, (0)), 100000000, 0, -21), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "signature"), 0, (0)), 100000000, 0, -20), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("parsing/depend.mli", 40, 1702, 1702), ("parsing/depend.mli", 40, 1702, 1762), 0), 0, Tag1 ("Depend", 13)), 0); (("add_implementation", 775), ((Tag1 (0, (Tag3 ((("bound_map", 766)), 0, (0)), 100000000, 0, -16), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "structure"), 0, (0)), 100000000, 0, -15), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -14), 0), 100000000, 0, -13), 0), 100000000, 0, -12), 0, (("parsing/depend.mli", 42, 1764, 1764), ("parsing/depend.mli", 42, 1764, 1829), 0), 0, Tag1 ("Depend", 14)), 0); (("add_implementation_binding", 776), ((Tag1 (0, (Tag3 ((("bound_map", 766)), 0, (0)), 100000000, 0, -11), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "structure"), 0, (0)), 100000000, 0, -10), (Tag3 ((("bound_map", 766)), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0), 100000000, 0, -7), 0, (("parsing/depend.mli", 44, 1831, 1831), ("parsing/depend.mli", 44, 1831, 1909), 0), 0, Tag1 ("Depend", 15)), 0); (("add_signature_binding", 777), ((Tag1 (0, (Tag3 ((("bound_map", 766)), 0, (0)), 100000000, 0, -6), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "signature"), 0, (0)), 100000000, 0, -5), (Tag3 ((("bound_map", 766)), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("parsing/depend.mli", 45, 1910, 1910), ("parsing/depend.mli", 45, 1910, 1983), 0), 0, Tag1 ("Depend", 16)), 0)], "Depend", [("Depend", ("\030\194\209\205\211\194X.w\178\006\224\201Y\242\000")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Misc", ("*\026\026\234c\191\131\161\\\203\183\012O\252\153\198")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Build_path_prefix_map", ("y\028\167\207D\220\198\216\011\208\172\149\2416\bc")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216"))], [(0)])
val add_signature_binding : bound_map -> Parsetree.signature -> bound_map

type constant =
    Pconst_integer of string * char option
  | Pconst_char of char
  | Pconst_string of string * Location.t * string option
  | Pconst_float of string * char option
type location_stack = Location.t list
type attribute = {
  attr_name : string Asttypes.loc;
  attr_payload : payload;
  attr_loc : Location.t;
}
and extension = string Asttypes.loc * payload
and attributes = attribute list
and payload =
    PStr of structure
  | PSig of signature
  | PTyp of core_type
  | PPat of pattern * expression option
and core_type = {
  ptyp_desc : core_type_desc;
  ptyp_loc : Location.t;
  ptyp_loc_stack : location_stack;
  ptyp_attributes : attributes;
}
and core_type_desc =
    Ptyp_any
  | Ptyp_var of string
  | Ptyp_arrow of Asttypes.arg_label * core_type * core_type
  | Ptyp_tuple of core_type list
  | Ptyp_constr of Longident.t Asttypes.loc * core_type list
  | Ptyp_object of object_field list * Asttypes.closed_flag
  | Ptyp_class of Longident.t Asttypes.loc * core_type list
  | Ptyp_alias of core_type * string
  | Ptyp_variant of row_field list * Asttypes.closed_flag *
      Asttypes.label list option
  | Ptyp_poly of string Asttypes.loc list * core_type
  | Ptyp_package of package_type
  | Ptyp_extension of extension
and package_type =
    Longident.t Asttypes.loc * (Longident.t Asttypes.loc * core_type) list
and row_field = {
  prf_desc : row_field_desc;
  prf_loc : Location.t;
  prf_attributes : attributes;
}
and row_field_desc =
    Rtag of Asttypes.label Asttypes.loc * bool * core_type list
  | Rinherit of core_type
and object_field = {
  pof_desc : object_field_desc;
  pof_loc : Location.t;
  pof_attributes : attributes;
}
and object_field_desc =
    Otag of Asttypes.label Asttypes.loc * core_type
  | Oinherit of core_type
and pattern = {
  ppat_desc : pattern_desc;
  ppat_loc : Location.t;
  ppat_loc_stack : location_stack;
  ppat_attributes : attributes;
}
and pattern_desc =
    Ppat_any
  | Ppat_var of string Asttypes.loc
  | Ppat_alias of pattern * string Asttypes.loc
  | Ppat_constant of constant
  | Ppat_interval of constant * constant
  | Ppat_tuple of pattern list
  | Ppat_construct of Longident.t Asttypes.loc *
      (string Asttypes.loc list * pattern) option
  | Ppat_variant of Asttypes.label * pattern option
  | Ppat_record of (Longident.t Asttypes.loc * pattern) list *
      Asttypes.closed_flag
  | Ppat_array of pattern list
  | Ppat_or of pattern * pattern
  | Ppat_constraint of pattern * core_type
  | Ppat_type of Longident.t Asttypes.loc
  | Ppat_lazy of pattern
  | Ppat_unpack of string option Asttypes.loc
  | Ppat_exception of pattern
  | Ppat_extension of extension
  | Ppat_open of Longident.t Asttypes.loc * pattern
and expression = {
  pexp_desc : expression_desc;
  pexp_loc : Location.t;
  pexp_loc_stack : location_stack;
  pexp_attributes : attributes;
}
and expression_desc =
    Pexp_ident of Longident.t Asttypes.loc
  | Pexp_constant of constant
  | Pexp_let of Asttypes.rec_flag * value_binding list * expression
  | Pexp_function of case list
  | Pexp_fun of Asttypes.arg_label * expression option * pattern * expression
  | Pexp_apply of expression * (Asttypes.arg_label * expression) list
  | Pexp_match of expression * case list
  | Pexp_try of expression * case list
  | Pexp_tuple of expression list
  | Pexp_construct of Longident.t Asttypes.loc * expression option
  | Pexp_variant of Asttypes.label * expression option
  | Pexp_record of (Longident.t Asttypes.loc * expression) list *
      expression option
  | Pexp_field of expression * Longident.t Asttypes.loc
  | Pexp_setfield of expression * Longident.t Asttypes.loc * expression
  | Pexp_array of expression list
  | Pexp_ifthenelse of expression * expression * expression option
  | Pexp_sequence of expression * expression
  | Pexp_while of expression * expression
  | Pexp_for of pattern * expression * expression * Asttypes.direction_flag *
      expression
  | Pexp_constraint of expression * core_type
  | Pexp_coerce of expression * core_type option * core_type
  | Pexp_send of expression * Asttypes.label Asttypes.loc
  | Pexp_new of Longident.t Asttypes.loc
  | Pexp_setinstvar of Asttypes.label Asttypes.loc * expression
  | Pexp_override of (Asttypes.label Asttypes.loc * expression) list
  | Pexp_letmodule of string option Asttypes.loc * module_expr * expression
  | Pexp_letexception of extension_constructor * expression
  | Pexp_assert of expression
  | Pexp_lazy of expression
  | Pexp_poly of expression * core_type option
  | Pexp_object of class_structure
  | Pexp_newtype of string Asttypes.loc * expression
  | Pexp_pack of module_expr
  | Pexp_open of open_declaration * expression
  | Pexp_letop of letop
  | Pexp_extension of extension
  | Pexp_unreachable
and case = {
  pc_lhs : pattern;
  pc_guard : expression option;
  pc_rhs : expression;
}
and letop = { let_ : binding_op; ands : binding_op list; body : expression; }
and binding_op = {
  pbop_op : string Asttypes.loc;
  pbop_pat : pattern;
  pbop_exp : expression;
  pbop_loc : Location.t;
}
and value_description = {
  pval_name : string Asttypes.loc;
  pval_type : core_type;
  pval_prim : string list;
  pval_attributes : attributes;
  pval_loc : Location.t;
}
and type_declaration = {
  ptype_name : string Asttypes.loc;
  ptype_params :
    (core_type * (Asttypes.variance * Asttypes.injectivity)) list;
  ptype_cstrs : (core_type * core_type * Location.t) list;
  ptype_kind : type_kind;
  ptype_private : Asttypes.private_flag;
  ptype_manifest : core_type option;
  ptype_attributes : attributes;
  ptype_loc : Location.t;
}
and type_kind =
    Ptype_abstract
  | Ptype_variant of constructor_declaration list
  | Ptype_record of label_declaration list
  | Ptype_open
and label_declaration = {
  pld_name : string Asttypes.loc;
  pld_mutable : Asttypes.mutable_flag;
  pld_type : core_type;
  pld_loc : Location.t;
  pld_attributes : attributes;
}
and constructor_declaration = {
  pcd_name : string Asttypes.loc;
  pcd_vars : string Asttypes.loc list;
  pcd_args : constructor_arguments;
  pcd_res : core_type option;
  pcd_loc : Location.t;
  pcd_attributes : attributes;
}
and constructor_arguments =
    Pcstr_tuple of core_type list
  | Pcstr_record of label_declaration list
and type_extension = {
  ptyext_path : Longident.t Asttypes.loc;
  ptyext_params :
    (core_type * (Asttypes.variance * Asttypes.injectivity)) list;
  ptyext_constructors : extension_constructor list;
  ptyext_private : Asttypes.private_flag;
  ptyext_loc : Location.t;
  ptyext_attributes : attributes;
}
and extension_constructor = {
  pext_name : string Asttypes.loc;
  pext_kind : extension_constructor_kind;
  pext_loc : Location.t;
  pext_attributes : attributes;
}
and type_exception = {
  ptyexn_constructor : extension_constructor;
  ptyexn_loc : Location.t;
  ptyexn_attributes : attributes;
}
and extension_constructor_kind =
    Pext_decl of string Asttypes.loc list * constructor_arguments *
      core_type option
  | Pext_rebind of Longident.t Asttypes.loc
and class_type = {
  pcty_desc : class_type_desc;
  pcty_loc : Location.t;
  pcty_attributes : attributes;
}
and class_type_desc =
    Pcty_constr of Longident.t Asttypes.loc * core_type list
  | Pcty_signature of class_signature
  | Pcty_arrow of Asttypes.arg_label * core_type * class_type
  | Pcty_extension of extension
  | Pcty_open of open_description * class_type
and class_signature = {
  pcsig_self : core_type;
  pcsig_fields : class_type_field list;
}
and class_type_field = {
  pctf_desc : class_type_field_desc;
  pctf_loc : Location.t;
  pctf_attributes : attributes;
}
and class_type_field_desc =
    Pctf_inherit of class_type
  | Pctf_val of
      (Asttypes.label Asttypes.loc * Asttypes.mutable_flag *
       Asttypes.virtual_flag * core_type)
  | Pctf_method of
      (Asttypes.label Asttypes.loc * Asttypes.private_flag *
       Asttypes.virtual_flag * core_type)
  | Pctf_constraint of (core_type * core_type)
  | Pctf_attribute of attribute
  | Pctf_extension of extension
and 'a class_infos = {
  pci_virt : Asttypes.virtual_flag;
  pci_params : (core_type * (Asttypes.variance * Asttypes.injectivity)) list;
  pci_name : string Asttypes.loc;
  pci_expr : 'a;
  pci_loc : Location.t;
  pci_attributes : attributes;
}
and class_description = class_type class_infos
and class_type_declaration = class_type class_infos
and class_expr = {
  pcl_desc : class_expr_desc;
  pcl_loc : Location.t;
  pcl_attributes : attributes;
}
and class_expr_desc =
    Pcl_constr of Longident.t Asttypes.loc * core_type list
  | Pcl_structure of class_structure
  | Pcl_fun of Asttypes.arg_label * expression option * pattern * class_expr
  | Pcl_apply of class_expr * (Asttypes.arg_label * expression) list
  | Pcl_let of Asttypes.rec_flag * value_binding list * class_expr
  | Pcl_constraint of class_expr * class_type
  | Pcl_extension of extension
  | Pcl_open of open_description * class_expr
and class_structure = {
  pcstr_self : pattern;
  pcstr_fields : class_field list;
}
and class_field = {
  pcf_desc : class_field_desc;
  pcf_loc : Location.t;
  pcf_attributes : attributes;
}
and class_field_desc =
    Pcf_inherit of Asttypes.override_flag * class_expr *
      string Asttypes.loc option
  | Pcf_val of
      (Asttypes.label Asttypes.loc * Asttypes.mutable_flag * class_field_kind)
  | Pcf_method of
      (Asttypes.label Asttypes.loc * Asttypes.private_flag * class_field_kind)
  | Pcf_constraint of (core_type * core_type)
  | Pcf_initializer of expression
  | Pcf_attribute of attribute
  | Pcf_extension of extension
and class_field_kind =
    Cfk_virtual of core_type
  | Cfk_concrete of Asttypes.override_flag * expression
and class_declaration = class_expr class_infos
and module_type = {
  pmty_desc : module_type_desc;
  pmty_loc : Location.t;
  pmty_attributes : attributes;
}
and module_type_desc =
    Pmty_ident of Longident.t Asttypes.loc
  | Pmty_signature of signature
  | Pmty_functor of functor_parameter * module_type
  | Pmty_with of module_type * with_constraint list
  | Pmty_typeof of module_expr
  | Pmty_extension of extension
  | Pmty_alias of Longident.t Asttypes.loc
and functor_parameter =
    Unit
  | Named of string option Asttypes.loc * module_type
and signature = signature_item list
and signature_item = {
  psig_desc : signature_item_desc;
  psig_loc : Location.t;
}
and signature_item_desc =
    Psig_value of value_description
  | Psig_type of Asttypes.rec_flag * type_declaration list
  | Psig_typesubst of type_declaration list
  | Psig_typext of type_extension
  | Psig_exception of type_exception
  | Psig_module of module_declaration
  | Psig_modsubst of module_substitution
  | Psig_recmodule of module_declaration list
  | Psig_modtype of module_type_declaration
  | Psig_modtypesubst of module_type_declaration
  | Psig_open of open_description
  | Psig_include of include_description
  | Psig_class of class_description list
  | Psig_class_type of class_type_declaration list
  | Psig_attribute of attribute
  | Psig_extension of extension * attributes
and module_declaration = {
  pmd_name : string option Asttypes.loc;
  pmd_type : module_type;
  pmd_attributes : attributes;
  pmd_loc : Location.t;
}
and module_substitution = {
  pms_name : string Asttypes.loc;
  pms_manifest : Longident.t Asttypes.loc;
  pms_attributes : attributes;
  pms_loc : Location.t;
}
and module_type_declaration = {
  pmtd_name : string Asttypes.loc;
  pmtd_type : module_type option;
  pmtd_attributes : attributes;
  pmtd_loc : Location.t;
}
and 'a open_infos = {
  popen_expr : 'a;
  popen_override : Asttypes.override_flag;
  popen_loc : Location.t;
  popen_attributes : attributes;
}
and open_description = Longident.t Asttypes.loc open_infos
and open_declaration = module_expr open_infos
and 'a include_infos = {
  pincl_mod : 'a;
  pincl_loc : Location.t;
  pincl_attributes : attributes;
}
and include_description = module_type include_infos
and include_declaration = module_expr include_infos
and with_constraint =
    Pwith_type of Longident.t Asttypes.loc * type_declaration
  | Pwith_module of Longident.t Asttypes.loc * Longident.t Asttypes.loc
  | Pwith_modtype of Longident.t Asttypes.loc * module_type
  | Pwith_modtypesubst of Longident.t Asttypes.loc * module_type
  | Pwith_typesubst of Longident.t Asttypes.loc * type_declaration
  | Pwith_modsubst of Longident.t Asttypes.loc * Longident.t Asttypes.loc
and module_expr = {
  pmod_desc : module_expr_desc;
  pmod_loc : Location.t;
  pmod_attributes : attributes;
}
and module_expr_desc =
    Pmod_ident of Longident.t Asttypes.loc
  | Pmod_structure of structure
  | Pmod_functor of functor_parameter * module_expr
  | Pmod_apply of module_expr * module_expr
  | Pmod_apply_unit of module_expr
  | Pmod_constraint of module_expr * module_type
  | Pmod_unpack of expression
  | Pmod_extension of extension
and structure = structure_item list
and structure_item = {
  pstr_desc : structure_item_desc;
  pstr_loc : Location.t;
}
and structure_item_desc =
    Pstr_eval of expression * attributes
  | Pstr_value of Asttypes.rec_flag * value_binding list
  | Pstr_primitive of value_description
  | Pstr_type of Asttypes.rec_flag * type_declaration list
  | Pstr_typext of type_extension
  | Pstr_exception of type_exception
  | Pstr_module of module_binding
  | Pstr_recmodule of module_binding list
  | Pstr_modtype of module_type_declaration
  | Pstr_open of open_declaration
  | Pstr_class of class_declaration list
  | Pstr_class_type of class_type_declaration list
  | Pstr_include of include_declaration
  | Pstr_attribute of attribute
  | Pstr_extension of extension * attributes
and value_constraint =
    Pvc_constraint of { locally_abstract_univars : string Asttypes.loc list;
      typ : core_type;
    }
  | Pvc_coercion of { ground : core_type option; coercion : core_type; }
and value_binding = {
  pvb_pat : pattern;
  pvb_expr : expression;
  pvb_constraint : value_constraint option;
  pvb_attributes : attributes;
  pvb_loc : Location.t;
}
and module_binding = {
  pmb_name : string option Asttypes.loc;
  pmb_expr : module_expr;
  pmb_attributes : attributes;
  pmb_loc : Location.t;
}
type toplevel_phrase = Ptop_def of structure | Ptop_dir of toplevel_directive
and toplevel_directive = {
  pdir_name : string Asttypes.loc;
  pdir_arg : directive_argument option;
  pdir_loc : Location.t;
}
and directive_argument = {
  pdira_desc : directive_argument_desc;
  pdira_loc : Location.t;
}
and directive_argument_desc =
    Pdir_string of string
  | Pdir_int of string * char option
  | Pdir_ident of Longident.t("DEBUG:rule", [Tag1 (("constant", 767), (0, 0, Tag1 ([(("Pconst_integer", 283), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -616); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -618)], (0)), 100000000, 0, -617)]), 0, (("parsing/parsetree.mli", 26, 1247, 1249), ("parsing/parsetree.mli", 26, 1247, 1289), 0), 0, Tag1 ("Parsetree", 1)); (("Pconst_char", 284), ([(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -619)]), 0, (("parsing/parsetree.mli", 32, 1483, 1485), ("parsing/parsetree.mli", 32, 1483, 1506), 0), 0, Tag1 ("Parsetree", 2)); (("Pconst_string", 285), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -620); (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -621); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -623)], (0)), 100000000, 0, -622)]), 0, (("parsing/parsetree.mli", 33, 1540, 1542), ("parsing/parsetree.mli", 33, 1540, 1596), 0), 0, Tag1 ("Parsetree", 3)); (("Pconst_float", 352), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -624); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -626)], (0)), 100000000, 0, -625)]), 0, (("parsing/parsetree.mli", 39, 1769, 1771), ("parsing/parsetree.mli", 39, 1769, 1809), 0), 0, Tag1 ("Parsetree", 4))], 0), 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 25, 1231, 1231), ("parsing/parsetree.mli", 39, 1769, 1809), 0), 0, 0, 0, Tag1 ("Parsetree", 0)), 1, 0); Tag1 (("location_stack", 768), (0, 0, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -615)], (0)), 100000000, 0, -614)), 0, 0, 0, 0, (("parsing/parsetree.mli", 46, 1976, 1976), ("parsing/parsetree.mli", 46, 1976, 2013), 0), 0, 0, 0, Tag1 ("Parsetree", 5)), 1, 0); Tag1 (("attribute", 769), (0, 0, [[(("attr_name", 448), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -611)], (0)), 100000000, 0, -610), (("parsing/parsetree.mli", 51, 2063, 2067), ("parsing/parsetree.mli", 51, 2063, 2090), 0), 0, Tag1 ("Parsetree", 73)); (("attr_payload", 449), 0, (Tag3 ((("payload", 772)), 0, (0)), 100000000, 0, -612), (("parsing/parsetree.mli", 52, 2091, 2095), ("parsing/parsetree.mli", 52, 2091, 2118), 0), 0, Tag1 ("Parsetree", 74)); (("attr_loc", 450), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -613), (("parsing/parsetree.mli", 53, 2119, 2123), ("parsing/parsetree.mli", 53, 2119, 2145), 0), 0, Tag1 ("Parsetree", 75))]], 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 50, 2044, 2044), ("parsing/parsetree.mli", 54, 2146, 2149), 0), 0, 0, 0, Tag1 ("Parsetree", 6)), 1, 0); Tag1 (("extension", 770), (0, 0, 0, 1, ((Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -608)], (0)), 100000000, 0, -607); (Tag3 ((("payload", 772)), 0, (0)), 100000000, 0, -609)]), 100000000, 0, -606)), 0, 0, 0, 0, (("parsing/parsetree.mli", 61, 2329, 2329), ("parsing/parsetree.mli", 61, 2329, 2365), 0), 0, 0, 0, Tag1 ("Parsetree", 7)), 2, 0); Tag1 (("attributes", 771), (0, 0, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("attribute", 769)), 0, (0)), 100000000, 0, -605)], (0)), 100000000, 0, -604)), 0, 0, 0, 0, (("parsing/parsetree.mli", 67, 2500, 2500), ("parsing/parsetree.mli", 67, 2500, 2531), 0), 0, 0, 0, Tag1 ("Parsetree", 8)), 2, 0); Tag1 (("payload", 772), (0, 0, Tag1 ([(("PStr", 451), ([(Tag3 ((("structure", 830)), 0, (0)), 100000000, 0, -598)]), 0, (("parsing/parsetree.mli", 70, 2547, 2549), ("parsing/parsetree.mli", 70, 2547, 2568), 0), 0, Tag1 ("Parsetree", 76)); (("PSig", 452), ([(Tag3 ((("signature", 815)), 0, (0)), 100000000, 0, -599)]), 0, (("parsing/parsetree.mli", 71, 2569, 2571), ("parsing/parsetree.mli", 71, 2569, 2590), 0), 0, Tag1 ("Parsetree", 77)); (("PTyp", 453), ([(Tag3 ((("core_type", 773)), 0, (0)), 100000000, 0, -600)]), 0, (("parsing/parsetree.mli", 72, 2645, 2647), ("parsing/parsetree.mli", 72, 2645, 2666), 0), 0, Tag1 ("Parsetree", 78)); (("PPat", 454), ([(Tag3 ((("pattern", 780)), 0, (0)), 100000000, 0, -601); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -603)], (0)), 100000000, 0, -602)]), 0, (("parsing/parsetree.mli", 73, 2719, 2721), ("parsing/parsetree.mli", 73, 2719, 2758), 0), 0, Tag1 ("Parsetree", 79))], 0), 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 69, 2533, 2533), ("parsing/parsetree.mli", 73, 2719, 2758), 0), 0, 0, 0, Tag1 ("Parsetree", 9)), 2, 0); Tag1 (("core_type", 773), (0, 0, [[(("ptyp_desc", 455), 0, (Tag3 ((("core_type_desc", 774)), 0, (0)), 100000000, 0, -594), (("parsing/parsetree.mli", 81, 2912, 2917), ("parsing/parsetree.mli", 81, 2912, 2943), 0), 0, Tag1 ("Parsetree", 80)); (("ptyp_loc", 456), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -595), (("parsing/parsetree.mli", 82, 2944, 2949), ("parsing/parsetree.mli", 82, 2944, 2970), 0), 0, Tag1 ("Parsetree", 81)); (("ptyp_loc_stack", 457), 0, (Tag3 ((("location_stack", 768)), 0, (0)), 100000000, 0, -596), (("parsing/parsetree.mli", 83, 2971, 2976), ("parsing/parsetree.mli", 83, 2971, 3007), 0), 0, Tag1 ("Parsetree", 82)); (("ptyp_attributes", 458), 0, (Tag3 ((("attributes", 771)), 0, (0)), 100000000, 0, -597), (("parsing/parsetree.mli", 84, 3008, 3013), ("parsing/parsetree.mli", 84, 3008, 3041), 0), 0, Tag1 ("Parsetree", 83))]], 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 79, 2890, 2890), ("parsing/parsetree.mli", 85, 3072, 3077), 0), 0, 0, 0, Tag1 ("Parsetree", 10)), 2, 0); Tag1 (("core_type_desc", 774), (0, 0, Tag1 ([(("Ptyp_any", 459), (0), 0, (("parsing/parsetree.mli", 88, 3100, 3102), ("parsing/parsetree.mli", 88, 3100, 3112), 0), 0, Tag1 ("Parsetree", 84)); (("Ptyp_var", 460), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -563)]), 0, (("parsing/parsetree.mli", 89, 3125, 3127), ("parsing/parsetree.mli", 89, 3125, 3147), 0), 0, Tag1 ("Parsetree", 85)); (("Ptyp_arrow", 461), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "arg_label"), 0, (0)), 100000000, 0, -564); (Tag3 ((("core_type", 773)), 0, (0)), 100000000, 0, -565); (Tag3 ((("core_type", 773)), 0, (0)), 100000000, 0, -566)]), 0, (("parsing/parsetree.mli", 90, 3185, 3187), ("parsing/parsetree.mli", 90, 3185, 3236), 0), 0, Tag1 ("Parsetree", 86)); (("Ptyp_tuple", 462), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("core_type", 773)), 0, (0)), 100000000, 0, -568)], (0)), 100000000, 0, -567)]), 0, (("parsing/parsetree.mli", 99, 3664, 3666), ("parsing/parsetree.mli", 99, 3664, 3696), 0), 0, Tag1 ("Parsetree", 87)); (("Ptyp_constr", 463), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -570)], (0)), 100000000, 0, -569); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("core_type", 773)), 0, (0)), 100000000, 0, -572)], (0)), 100000000, 0, -571)]), 0, (("parsing/parsetree.mli", 105, 3834, 3836), ("parsing/parsetree.mli", 105, 3834, 3885), 0), 0, Tag1 ("Parsetree", 88)); (("Ptyp_object", 469), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("object_field", 778)), 0, (0)), 100000000, 0, -574)], (0)), 100000000, 0, -573); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "closed_flag"), 0, (0)), 100000000, 0, -575)]), 0, (("parsing/parsetree.mli", 111, 4112, 4114), ("parsing/parsetree.mli", 111, 4112, 4162), 0), 0, Tag1 ("Parsetree", 89)); (("Ptyp_class", 470), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -577)], (0)), 100000000, 0, -576); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("core_type", 773)), 0, (0)), 100000000, 0, -579)], (0)), 100000000, 0, -578)]), 0, (("parsing/parsetree.mli", 118, 4516, 4518), ("parsing/parsetree.mli", 118, 4516, 4566), 0), 0, Tag1 ("Parsetree", 90)); (("Ptyp_alias", 471), ([(Tag3 ((("core_type", 773)), 0, (0)), 100000000, 0, -580); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -581)]), 0, (("parsing/parsetree.mli", 124, 4796, 4798), ("parsing/parsetree.mli", 124, 4796, 4832), 0), 0, Tag1 ("Parsetree", 91)); (("Ptyp_variant", 472), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("row_field", 776)), 0, (0)), 100000000, 0, -583)], (0)), 100000000, 0, -582); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "closed_flag"), 0, (0)), 100000000, 0, -584); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Asttypes")), "label"), 0, (0)), 100000000, 0, -587)], (0)), 100000000, 0, -586)], (0)), 100000000, 0, -585)]), 0, (("parsing/parsetree.mli", 125, 4852, 4854), ("parsing/parsetree.mli", 125, 4852, 4920), 0), 0, Tag1 ("Parsetree", 92)); (("Ptyp_poly", 473), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -590)], (0)), 100000000, 0, -589)], (0)), 100000000, 0, -588); (Tag3 ((("core_type", 773)), 0, (0)), 100000000, 0, -591)]), 0, (("parsing/parsetree.mli", 140, 5629, 5631), ("parsing/parsetree.mli", 140, 5629, 5673), 0), 0, Tag1 ("Parsetree", 93)); (("Ptyp_package", 474), ([(Tag3 ((("package_type", 775)), 0, (0)), 100000000, 0, -592)]), 0, (("parsing/parsetree.mli", 168, 6604, 6606), ("parsing/parsetree.mli", 168, 6604, 6636), 0), 0, Tag1 ("Parsetree", 94)); (("Ptyp_extension", 475), ([(Tag3 ((("extension", 770)), 0, (0)), 100000000, 0, -593)]), 0, (("parsing/parsetree.mli", 169, 6659, 6661), ("parsing/parsetree.mli", 169, 6659, 6690), 0), 0, Tag1 ("Parsetree", 95))], 0), 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 87, 3079, 3079), ("parsing/parsetree.mli", 169, 6659, 6690), 0), 0, 0, 0, Tag1 ("Parsetree", 11)), 2, 0); Tag1 (("package_type", 775), (0, 0, 0, 1, ((Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -557)], (0)), 100000000, 0, -556); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -561)], (0)), 100000000, 0, -560); (Tag3 ((("core_type", 773)), 0, (0)), 100000000, 0, -562)]), 100000000, 0, -559)], (0)), 100000000, 0, -558)]), 100000000, 0, -555)), 0, 0, 0, 0, (("parsing/parsetree.mli", 171, 6709, 6709), ("parsing/parsetree.mli", 171, 6709, 6780), 0), 0, 0, 0, Tag1 ("Parsetree", 12)), 2, 0); Tag1 (("row_field", 776), (0, 0, [[(("prf_desc", 476), 0, (Tag3 ((("row_field_desc", 777)), 0, (0)), 100000000, 0, -552), (("parsing/parsetree.mli", 179, 7012, 7014), ("parsing/parsetree.mli", 179, 7012, 7040), 0), 0, Tag1 ("Parsetree", 96)); (("prf_loc", 477), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -553), (("parsing/parsetree.mli", 180, 7041, 7043), ("parsing/parsetree.mli", 180, 7041, 7064), 0), 0, Tag1 ("Parsetree", 97)); (("prf_attributes", 478), 0, (Tag3 ((("attributes", 771)), 0, (0)), 100000000, 0, -554), (("parsing/parsetree.mli", 181, 7065, 7067), ("parsing/parsetree.mli", 181, 7065, 7095), 0), 0, Tag1 ("Parsetree", 98))]], 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 178, 6994, 6994), ("parsing/parsetree.mli", 182, 7096, 7097), 0), 0, 0, 0, Tag1 ("Parsetree", 13)), 2, 0); Tag1 (("row_field_desc", 777), (0, 0, Tag1 ([(("Rtag", 479), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Asttypes")), "label"), 0, (0)), 100000000, 0, -547)], (0)), 100000000, 0, -546); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -548); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("core_type", 773)), 0, (0)), 100000000, 0, -550)], (0)), 100000000, 0, -549)]), 0, (("parsing/parsetree.mli", 185, 7120, 7122), ("parsing/parsetree.mli", 185, 7120, 7165), 0), 0, Tag1 ("Parsetree", 99)); (("Rinherit", 480), ([(Tag3 ((("core_type", 773)), 0, (0)), 100000000, 0, -551)]), 0, (("parsing/parsetree.mli", 197, 7739, 7741), ("parsing/parsetree.mli", 197, 7739, 7764), 0), 0, Tag1 ("Parsetree", 100))], 0), 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 184, 7099, 7099), ("parsing/parsetree.mli", 197, 7739, 7764), 0), 0, 0, 0, Tag1 ("Parsetree", 14)), 2, 0); Tag1 (("object_field", 778), (0, 0, [[(("pof_desc", 481), 0, (Tag3 ((("object_field_desc", 779)), 0, (0)), 100000000, 0, -543), (("parsing/parsetree.mli", 200, 7805, 7807), ("parsing/parsetree.mli", 200, 7805, 7836), 0), 0, Tag1 ("Parsetree", 101)); (("pof_loc", 482), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -544), (("parsing/parsetree.mli", 201, 7837, 7839), ("parsing/parsetree.mli", 201, 7837, 7860), 0), 0, Tag1 ("Parsetree", 102)); (("pof_attributes", 483), 0, (Tag3 ((("attributes", 771)), 0, (0)), 100000000, 0, -545), (("parsing/parsetree.mli", 202, 7861, 7863), ("parsing/parsetree.mli", 202, 7861, 7891), 0), 0, Tag1 ("Parsetree", 103))]], 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 199, 7784, 7784), ("parsing/parsetree.mli", 203, 7892, 7893), 0), 0, 0, 0, Tag1 ("Parsetree", 15)), 2, 0); Tag1 (("object_field_desc", 779), (0, 0, Tag1 ([(("Otag", 484), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Asttypes")), "label"), 0, (0)), 100000000, 0, -540)], (0)), 100000000, 0, -539); (Tag3 ((("core_type", 773)), 0, (0)), 100000000, 0, -541)]), 0, (("parsing/parsetree.mli", 206, 7919, 7921), ("parsing/parsetree.mli", 206, 7919, 7952), 0), 0, Tag1 ("Parsetree", 104)); (("Oinherit", 485), ([(Tag3 ((("core_type", 773)), 0, (0)), 100000000, 0, -542)]), 0, (("parsing/parsetree.mli", 207, 7953, 7955), ("parsing/parsetree.mli", 207, 7953, 7978), 0), 0, Tag1 ("Parsetree", 105))], 0), 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 205, 7895, 7895), ("parsing/parsetree.mli", 207, 7953, 7978), 0), 0, 0, 0, Tag1 ("Parsetree", 16)), 2, 0); Tag1 (("pattern", 780), (0, 0, [[(("ppat_desc", 486), 0, (Tag3 ((("pattern_desc", 781)), 0, (0)), 100000000, 0, -535), (("parsing/parsetree.mli", 213, 8021, 8026), ("parsing/parsetree.mli", 213, 8021, 8050), 0), 0, Tag1 ("Parsetree", 106)); (("ppat_loc", 487), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -536), (("parsing/parsetree.mli", 214, 8051, 8056), ("parsing/parsetree.mli", 214, 8051, 8077), 0), 0, Tag1 ("Parsetree", 107)); (("ppat_loc_stack", 488), 0, (Tag3 ((("location_stack", 768)), 0, (0)), 100000000, 0, -537), (("parsing/parsetree.mli", 215, 8078, 8083), ("parsing/parsetree.mli", 215, 8078, 8114), 0), 0, Tag1 ("Parsetree", 108)); (("ppat_attributes", 489), 0, (Tag3 ((("attributes", 771)), 0, (0)), 100000000, 0, -538), (("parsing/parsetree.mli", 216, 8115, 8120), ("parsing/parsetree.mli", 216, 8115, 8148), 0), 0, Tag1 ("Parsetree", 109))]], 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 211, 8001, 8001), ("parsing/parsetree.mli", 217, 8179, 8184), 0), 0, 0, 0, Tag1 ("Parsetree", 17)), 2, 0); Tag1 (("pattern_desc", 781), (0, 0, Tag1 ([(("Ppat_any", 490), (0), 0, (("parsing/parsetree.mli", 220, 8205, 8207), ("parsing/parsetree.mli", 220, 8205, 8217), 0), 0, Tag1 ("Parsetree", 110)); (("Ppat_var", 491), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -492)], (0)), 100000000, 0, -491)]), 0, (("parsing/parsetree.mli", 221, 8243, 8245), ("parsing/parsetree.mli", 221, 8243, 8269), 0), 0, Tag1 ("Parsetree", 111)); (("Ppat_alias", 492), ([(Tag3 ((("pattern", 780)), 0, (0)), 100000000, 0, -493); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -495)], (0)), 100000000, 0, -494)]), 0, (("parsing/parsetree.mli", 222, 8309, 8311), ("parsing/parsetree.mli", 222, 8309, 8347), 0), 0, Tag1 ("Parsetree", 112)); (("Ppat_constant", 493), ([(Tag3 ((("constant", 767)), 0, (0)), 100000000, 0, -496)]), 0, (("parsing/parsetree.mli", 224, 8396, 8398), ("parsing/parsetree.mli", 224, 8396, 8425), 0), 0, Tag1 ("Parsetree", 113)); (("Ppat_interval", 494), ([(Tag3 ((("constant", 767)), 0, (0)), 100000000, 0, -497); (Tag3 ((("constant", 767)), 0, (0)), 100000000, 0, -498)]), 0, (("parsing/parsetree.mli", 226, 8502, 8504), ("parsing/parsetree.mli", 226, 8502, 8542), 0), 0, Tag1 ("Parsetree", 114)); (("Ppat_tuple", 495), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("pattern", 780)), 0, (0)), 100000000, 0, -500)], (0)), 100000000, 0, -499)]), 0, (("parsing/parsetree.mli", 231, 8695, 8697), ("parsing/parsetree.mli", 231, 8695, 8725), 0), 0, Tag1 ("Parsetree", 115)); (("Ppat_construct", 496), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -502)], (0)), 100000000, 0, -501); (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -507)], (0)), 100000000, 0, -506)], (0)), 100000000, 0, -505); (Tag3 ((("pattern", 780)), 0, (0)), 100000000, 0, -508)]), 100000000, 0, -504)], (0)), 100000000, 0, -503)]), 0, (("parsing/parsetree.mli", 236, 8805, 8807), ("parsing/parsetree.mli", 236, 8805, 8879), 0), 0, Tag1 ("Parsetree", 116)); (("Ppat_variant", 497), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "label"), 0, (0)), 100000000, 0, -509); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("pattern", 780)), 0, (0)), 100000000, 0, -511)], (0)), 100000000, 0, -510)]), 0, (("parsing/parsetree.mli", 244, 9251, 9253), ("parsing/parsetree.mli", 244, 9251, 9293), 0), 0, Tag1 ("Parsetree", 117)); (("Ppat_record", 498), ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -515)], (0)), 100000000, 0, -514); (Tag3 ((("pattern", 780)), 0, (0)), 100000000, 0, -516)]), 100000000, 0, -513)], (0)), 100000000, 0, -512); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "closed_flag"), 0, (0)), 100000000, 0, -517)]), 0, (("parsing/parsetree.mli", 249, 9439, 9441), ("parsing/parsetree.mli", 249, 9439, 9504), 0), 0, Tag1 ("Parsetree", 118)); (("Ppat_array", 499), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("pattern", 780)), 0, (0)), 100000000, 0, -519)], (0)), 100000000, 0, -518)]), 0, (("parsing/parsetree.mli", 258, 9839, 9841), ("parsing/parsetree.mli", 258, 9839, 9869), 0), 0, Tag1 ("Parsetree", 119)); (("Ppat_or", 500), ([(Tag3 ((("pattern", 780)), 0, (0)), 100000000, 0, -520); (Tag3 ((("pattern", 780)), 0, (0)), 100000000, 0, -521)]), 0, (("parsing/parsetree.mli", 259, 9906, 9908), ("parsing/parsetree.mli", 259, 9906, 9938), 0), 0, Tag1 ("Parsetree", 120)); (("Ppat_constraint", 501), ([(Tag3 ((("pattern", 780)), 0, (0)), 100000000, 0, -522); (Tag3 ((("core_type", 773)), 0, (0)), 100000000, 0, -523)]), 0, (("parsing/parsetree.mli", 260, 9965, 9967), ("parsing/parsetree.mli", 260, 9965, 10007), 0), 0, Tag1 ("Parsetree", 121)); (("Ppat_type", 502), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -525)], (0)), 100000000, 0, -524)]), 0, (("parsing/parsetree.mli", 261, 10034, 10036), ("parsing/parsetree.mli", 261, 10034, 10066), 0), 0, Tag1 ("Parsetree", 122)); (("Ppat_lazy", 503), ([(Tag3 ((("pattern", 780)), 0, (0)), 100000000, 0, -526)]), 0, (("parsing/parsetree.mli", 262, 10093, 10095), ("parsing/parsetree.mli", 262, 10093, 10117), 0), 0, Tag1 ("Parsetree", 123)); (("Ppat_unpack", 504), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -529)], (0)), 100000000, 0, -528)], (0)), 100000000, 0, -527)]), 0, (("parsing/parsetree.mli", 263, 10143, 10145), ("parsing/parsetree.mli", 263, 10143, 10179), 0), 0, Tag1 ("Parsetree", 124)); (("Ppat_exception", 505), ([(Tag3 ((("pattern", 780)), 0, (0)), 100000000, 0, -530)]), 0, (("parsing/parsetree.mli", 271, 10448, 10450), ("parsing/parsetree.mli", 271, 10448, 10477), 0), 0, Tag1 ("Parsetree", 125)); (("Ppat_extension", 506), ([(Tag3 ((("extension", 770)), 0, (0)), 100000000, 0, -531)]), 0, (("parsing/parsetree.mli", 272, 10508, 10510), ("parsing/parsetree.mli", 272, 10508, 10539), 0), 0, Tag1 ("Parsetree", 126)); (("Ppat_open", 507), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -533)], (0)), 100000000, 0, -532); (Tag3 ((("pattern", 780)), 0, (0)), 100000000, 0, -534)]), 0, (("parsing/parsetree.mli", 273, 10564, 10566), ("parsing/parsetree.mli", 273, 10564, 10606), 0), 0, Tag1 ("Parsetree", 127))], 0), 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 219, 8186, 8186), ("parsing/parsetree.mli", 273, 10564, 10606), 0), 0, 0, 0, Tag1 ("Parsetree", 18)), 2, 0); Tag1 (("expression", 782), (0, 0, [[(("pexp_desc", 508), 0, (Tag3 ((("expression_desc", 783)), 0, (0)), 100000000, 0, -487), (("parsing/parsetree.mli", 279, 10685, 10690), ("parsing/parsetree.mli", 279, 10685, 10717), 0), 0, Tag1 ("Parsetree", 128)); (("pexp_loc", 509), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -488), (("parsing/parsetree.mli", 280, 10718, 10723), ("parsing/parsetree.mli", 280, 10718, 10744), 0), 0, Tag1 ("Parsetree", 129)); (("pexp_loc_stack", 510), 0, (Tag3 ((("location_stack", 768)), 0, (0)), 100000000, 0, -489), (("parsing/parsetree.mli", 281, 10745, 10750), ("parsing/parsetree.mli", 281, 10745, 10781), 0), 0, Tag1 ("Parsetree", 130)); (("pexp_attributes", 511), 0, (Tag3 ((("attributes", 771)), 0, (0)), 100000000, 0, -490), (("parsing/parsetree.mli", 282, 10782, 10787), ("parsing/parsetree.mli", 282, 10782, 10815), 0), 0, Tag1 ("Parsetree", 131))]], 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 277, 10662, 10662), ("parsing/parsetree.mli", 283, 10846, 10851), 0), 0, 0, 0, Tag1 ("Parsetree", 19)), 2, 0); Tag1 (("expression_desc", 783), (0, 0, Tag1 ([(("Pexp_ident", 512), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -385)], (0)), 100000000, 0, -384)]), 0, (("parsing/parsetree.mli", 286, 10875, 10877), ("parsing/parsetree.mli", 286, 10875, 10908), 0), 0, Tag1 ("Parsetree", 132)); (("Pexp_constant", 513), ([(Tag3 ((("constant", 767)), 0, (0)), 100000000, 0, -386)]), 0, (("parsing/parsetree.mli", 289, 10965, 10967), ("parsing/parsetree.mli", 289, 10965, 10994), 0), 0, Tag1 ("Parsetree", 133)); (("Pexp_let", 514), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "rec_flag"), 0, (0)), 100000000, 0, -387); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("value_binding", 834)), 0, (0)), 100000000, 0, -389)], (0)), 100000000, 0, -388); (Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -390)]), 0, (("parsing/parsetree.mli", 292, 11095, 11097), ("parsing/parsetree.mli", 292, 11095, 11153), 0), 0, Tag1 ("Parsetree", 134)); (("Pexp_function", 515), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("case", 784)), 0, (0)), 100000000, 0, -392)], (0)), 100000000, 0, -391)]), 0, (("parsing/parsetree.mli", 299, 11501, 11503), ("parsing/parsetree.mli", 299, 11501, 11531), 0), 0, Tag1 ("Parsetree", 135)); (("Pexp_fun", 516), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "arg_label"), 0, (0)), 100000000, 0, -393); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -395)], (0)), 100000000, 0, -394); (Tag3 ((("pattern", 780)), 0, (0)), 100000000, 0, -396); (Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -397)]), 0, (("parsing/parsetree.mli", 300, 11577, 11579), ("parsing/parsetree.mli", 300, 11577, 11645), 0), 0, Tag1 ("Parsetree", 136)); (("Pexp_apply", 517), ([(Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -398); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "arg_label"), 0, (0)), 100000000, 0, -401); (Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -402)]), 100000000, 0, -400)], (0)), 100000000, 0, -399)]), 0, (("parsing/parsetree.mli", 323, 12680, 12682), ("parsing/parsetree.mli", 323, 12680, 12740), 0), 0, Tag1 ("Parsetree", 137)); (("Pexp_match", 518), ([(Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -403); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("case", 784)), 0, (0)), 100000000, 0, -405)], (0)), 100000000, 0, -404)]), 0, (("parsing/parsetree.mli", 334, 13151, 13153), ("parsing/parsetree.mli", 334, 13151, 13191), 0), 0, Tag1 ("Parsetree", 138)); (("Pexp_try", 519), ([(Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -406); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("case", 784)), 0, (0)), 100000000, 0, -408)], (0)), 100000000, 0, -407)]), 0, (("parsing/parsetree.mli", 336, 13247, 13249), ("parsing/parsetree.mli", 336, 13247, 13285), 0), 0, Tag1 ("Parsetree", 139)); (("Pexp_tuple", 520), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -410)], (0)), 100000000, 0, -409)]), 0, (("parsing/parsetree.mli", 338, 13339, 13341), ("parsing/parsetree.mli", 338, 13339, 13372), 0), 0, Tag1 ("Parsetree", 140)); (("Pexp_construct", 521), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -412)], (0)), 100000000, 0, -411); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -414)], (0)), 100000000, 0, -413)]), 0, (("parsing/parsetree.mli", 343, 13454, 13456), ("parsing/parsetree.mli", 343, 13454, 13511), 0), 0, Tag1 ("Parsetree", 141)); (("Pexp_variant", 522), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "label"), 0, (0)), 100000000, 0, -415); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -417)], (0)), 100000000, 0, -416)]), 0, (("parsing/parsetree.mli", 349, 13754, 13756), ("parsing/parsetree.mli", 349, 13754, 13799), 0), 0, Tag1 ("Parsetree", 142)); (("Pexp_record", 523), ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -421)], (0)), 100000000, 0, -420); (Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -422)]), 100000000, 0, -419)], (0)), 100000000, 0, -418); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -424)], (0)), 100000000, 0, -423)]), 0, (("parsing/parsetree.mli", 354, 13943, 13945), ("parsing/parsetree.mli", 354, 13943, 14017), 0), 0, Tag1 ("Parsetree", 143)); (("Pexp_field", 524), ([(Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -425); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -427)], (0)), 100000000, 0, -426)]), 0, (("parsing/parsetree.mli", 361, 14268, 14270), ("parsing/parsetree.mli", 361, 14268, 14314), 0), 0, Tag1 ("Parsetree", 144)); (("Pexp_setfield", 525), ([(Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -428); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -430)], (0)), 100000000, 0, -429); (Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -431)]), 0, (("parsing/parsetree.mli", 362, 14329, 14331), ("parsing/parsetree.mli", 362, 14329, 14391), 0), 0, Tag1 ("Parsetree", 145)); (("Pexp_array", 526), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -433)], (0)), 100000000, 0, -432)]), 0, (("parsing/parsetree.mli", 364, 14418, 14420), ("parsing/parsetree.mli", 364, 14418, 14451), 0), 0, Tag1 ("Parsetree", 146)); (("Pexp_ifthenelse", 527), ([(Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -434); (Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -435); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -437)], (0)), 100000000, 0, -436)]), 0, (("parsing/parsetree.mli", 365, 14480, 14482), ("parsing/parsetree.mli", 365, 14480, 14546), 0), 0, Tag1 ("Parsetree", 147)); (("Pexp_sequence", 528), ([(Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -438); (Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -439)]), 0, (("parsing/parsetree.mli", 367, 14584, 14586), ("parsing/parsetree.mli", 367, 14584, 14628), 0), 0, Tag1 ("Parsetree", 148)); (("Pexp_while", 529), ([(Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -440); (Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -441)]), 0, (("parsing/parsetree.mli", 368, 14646, 14648), ("parsing/parsetree.mli", 368, 14646, 14687), 0), 0, Tag1 ("Parsetree", 149)); (("Pexp_for", 530), ([(Tag3 ((("pattern", 780)), 0, (0)), 100000000, 0, -442); (Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -443); (Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -444); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "direction_flag"), 0, (0)), 100000000, 0, -445); (Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -446)]), 0, (("parsing/parsetree.mli", 369, 14718, 14720), ("parsing/parsetree.mli", 369, 14718, 14797), 0), 0, Tag1 ("Parsetree", 150)); (("Pexp_constraint", 531), ([(Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -447); (Tag3 ((("core_type", 773)), 0, (0)), 100000000, 0, -448)]), 0, (("parsing/parsetree.mli", 376, 15119, 15121), ("parsing/parsetree.mli", 376, 15119, 15164), 0), 0, Tag1 ("Parsetree", 151)); (("Pexp_coerce", 532), ([(Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -449); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("core_type", 773)), 0, (0)), 100000000, 0, -451)], (0)), 100000000, 0, -450); (Tag3 ((("core_type", 773)), 0, (0)), 100000000, 0, -452)]), 0, (("parsing/parsetree.mli", 377, 15183, 15185), ("parsing/parsetree.mli", 377, 15183, 15243), 0), 0, Tag1 ("Parsetree", 152)); (("Pexp_send", 533), ([(Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -453); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Asttypes")), "label"), 0, (0)), 100000000, 0, -455)], (0)), 100000000, 0, -454)]), 0, (("parsing/parsetree.mli", 382, 15412, 15414), ("parsing/parsetree.mli", 382, 15412, 15451), 0), 0, Tag1 ("Parsetree", 153)); (("Pexp_new", 534), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -457)], (0)), 100000000, 0, -456)]), 0, (("parsing/parsetree.mli", 383, 15468, 15470), ("parsing/parsetree.mli", 383, 15468, 15499), 0), 0, Tag1 ("Parsetree", 154)); (("Pexp_setinstvar", 535), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Asttypes")), "label"), 0, (0)), 100000000, 0, -459)], (0)), 100000000, 0, -458); (Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -460)]), 0, (("parsing/parsetree.mli", 384, 15518, 15520), ("parsing/parsetree.mli", 384, 15518, 15563), 0), 0, Tag1 ("Parsetree", 155)); (("Pexp_override", 536), ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Asttypes")), "label"), 0, (0)), 100000000, 0, -464)], (0)), 100000000, 0, -463); (Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -465)]), 100000000, 0, -462)], (0)), 100000000, 0, -461)]), 0, (("parsing/parsetree.mli", 385, 15581, 15583), ("parsing/parsetree.mli", 385, 15581, 15631), 0), 0, Tag1 ("Parsetree", 156)); (("Pexp_letmodule", 537), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -468)], (0)), 100000000, 0, -467)], (0)), 100000000, 0, -466); (Tag3 ((("module_expr", 828)), 0, (0)), 100000000, 0, -469); (Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -470)]), 0, (("parsing/parsetree.mli", 387, 15675, 15677), ("parsing/parsetree.mli", 387, 15675, 15741), 0), 0, Tag1 ("Parsetree", 157)); (("Pexp_letexception", 538), ([(Tag3 ((("extension_constructor", 794)), 0, (0)), 100000000, 0, -471); (Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -472)]), 0, (("parsing/parsetree.mli", 389, 15780, 15782), ("parsing/parsetree.mli", 389, 15780, 15839), 0), 0, Tag1 ("Parsetree", 158)); (("Pexp_assert", 539), ([(Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -473)]), 0, (("parsing/parsetree.mli", 391, 15876, 15878), ("parsing/parsetree.mli", 391, 15876, 15905), 0), 0, Tag1 ("Parsetree", 159)); (("Pexp_lazy", 540), ([(Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -474)]), 0, (("parsing/parsetree.mli", 396, 16024, 16026), ("parsing/parsetree.mli", 396, 16024, 16051), 0), 0, Tag1 ("Parsetree", 160)); (("Pexp_poly", 541), ([(Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -475); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("core_type", 773)), 0, (0)), 100000000, 0, -477)], (0)), 100000000, 0, -476)]), 0, (("parsing/parsetree.mli", 397, 16069, 16071), ("parsing/parsetree.mli", 397, 16069, 16115), 0), 0, Tag1 ("Parsetree", 161)); (("Pexp_object", 542), ([(Tag3 ((("class_structure", 807)), 0, (0)), 100000000, 0, -478)]), 0, (("parsing/parsetree.mli", 403, 16303, 16305), ("parsing/parsetree.mli", 403, 16303, 16337), 0), 0, Tag1 ("Parsetree", 162)); (("Pexp_newtype", 543), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -480)], (0)), 100000000, 0, -479); (Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -481)]), 0, (("parsing/parsetree.mli", 404, 16363, 16365), ("parsing/parsetree.mli", 404, 16363, 16406), 0), 0, Tag1 ("Parsetree", 163)); (("Pexp_pack", 544), ([(Tag3 ((("module_expr", 828)), 0, (0)), 100000000, 0, -482)]), 0, (("parsing/parsetree.mli", 405, 16435, 16437), ("parsing/parsetree.mli", 405, 16435, 16463), 0), 0, Tag1 ("Parsetree", 164)); (("Pexp_open", 545), ([(Tag3 ((("open_declaration", 823)), 0, (0)), 100000000, 0, -483); (Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -484)]), 0, (("parsing/parsetree.mli", 410, 16599, 16601), ("parsing/parsetree.mli", 410, 16599, 16645), 0), 0, Tag1 ("Parsetree", 165)); (("Pexp_letop", 546), ([(Tag3 ((("letop", 785)), 0, (0)), 100000000, 0, -485)]), 0, (("parsing/parsetree.mli", 414, 16734, 16736), ("parsing/parsetree.mli", 414, 16734, 16757), 0), 0, Tag1 ("Parsetree", 166)); (("Pexp_extension", 547), ([(Tag3 ((("extension", 770)), 0, (0)), 100000000, 0, -486)]), 0, (("parsing/parsetree.mli", 417, 16843, 16845), ("parsing/parsetree.mli", 417, 16843, 16874), 0), 0, Tag1 ("Parsetree", 167)); (("Pexp_unreachable", 548), (0), 0, (("parsing/parsetree.mli", 418, 16891, 16893), ("parsing/parsetree.mli", 418, 16891, 16911), 0), 0, Tag1 ("Parsetree", 168))], 0), 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 285, 10853, 10853), ("parsing/parsetree.mli", 418, 16891, 16911), 0), 0, 0, 0, Tag1 ("Parsetree", 20)), 2, 0); Tag1 (("case", 784), (0, 0, [[(("pc_lhs", 549), 0, (Tag3 ((("pattern", 780)), 0, (0)), 100000000, 0, -380), (("parsing/parsetree.mli", 422, 16942, 16947), ("parsing/parsetree.mli", 422, 16942, 16963), 0), 0, Tag1 ("Parsetree", 169)); (("pc_guard", 550), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -382)], (0)), 100000000, 0, -381), (("parsing/parsetree.mli", 423, 16964, 16969), ("parsing/parsetree.mli", 423, 16964, 16997), 0), 0, Tag1 ("Parsetree", 170)); (("pc_rhs", 551), 0, (Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -383), (("parsing/parsetree.mli", 424, 16998, 17003), ("parsing/parsetree.mli", 424, 16998, 17022), 0), 0, Tag1 ("Parsetree", 171))]], 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 420, 16925, 16925), ("parsing/parsetree.mli", 425, 17023, 17027), 0), 0, 0, 0, Tag1 ("Parsetree", 21)), 2, 0); Tag1 (("letop", 785), (0, 0, [[(("let_", 552), 0, (Tag3 ((("binding_op", 786)), 0, (0)), 100000000, 0, -376), (("parsing/parsetree.mli", 430, 17119, 17123), ("parsing/parsetree.mli", 430, 17119, 17141), 0), 0, Tag1 ("Parsetree", 172)); (("ands", 553), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("binding_op", 786)), 0, (0)), 100000000, 0, -378)], (0)), 100000000, 0, -377), (("parsing/parsetree.mli", 431, 17142, 17146), ("parsing/parsetree.mli", 431, 17142, 17169), 0), 0, Tag1 ("Parsetree", 173)); (("body", 554), 0, (Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -379), (("parsing/parsetree.mli", 432, 17170, 17174), ("parsing/parsetree.mli", 432, 17170, 17192), 0), 0, Tag1 ("Parsetree", 174))]], 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 428, 17103, 17103), ("parsing/parsetree.mli", 433, 17193, 17196), 0), 0, 0, 0, Tag1 ("Parsetree", 22)), 2, 0); Tag1 (("binding_op", 786), (0, 0, [[(("pbop_op", 555), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -372)], (0)), 100000000, 0, -371), (("parsing/parsetree.mli", 437, 17219, 17223), ("parsing/parsetree.mli", 437, 17219, 17244), 0), 0, Tag1 ("Parsetree", 175)); (("pbop_pat", 556), 0, (Tag3 ((("pattern", 780)), 0, (0)), 100000000, 0, -373), (("parsing/parsetree.mli", 438, 17245, 17249), ("parsing/parsetree.mli", 438, 17245, 17268), 0), 0, Tag1 ("Parsetree", 176)); (("pbop_exp", 557), 0, (Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -374), (("parsing/parsetree.mli", 439, 17269, 17273), ("parsing/parsetree.mli", 439, 17269, 17295), 0), 0, Tag1 ("Parsetree", 177)); (("pbop_loc", 558), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -375), (("parsing/parsetree.mli", 440, 17296, 17300), ("parsing/parsetree.mli", 440, 17296, 17322), 0), 0, Tag1 ("Parsetree", 178))]], 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 435, 17198, 17198), ("parsing/parsetree.mli", 441, 17323, 17326), 0), 0, 0, 0, Tag1 ("Parsetree", 23)), 2, 0); Tag1 (("value_description", 787), (0, 0, [[(("pval_name", 559), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -365)], (0)), 100000000, 0, -364), (("parsing/parsetree.mli", 447, 17389, 17394), ("parsing/parsetree.mli", 447, 17389, 17416), 0), 0, Tag1 ("Parsetree", 179)); (("pval_type", 560), 0, (Tag3 ((("core_type", 773)), 0, (0)), 100000000, 0, -366), (("parsing/parsetree.mli", 448, 17417, 17422), ("parsing/parsetree.mli", 448, 17417, 17443), 0), 0, Tag1 ("Parsetree", 180)); (("pval_prim", 561), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -368)], (0)), 100000000, 0, -367), (("parsing/parsetree.mli", 449, 17444, 17449), ("parsing/parsetree.mli", 449, 17444, 17472), 0), 0, Tag1 ("Parsetree", 181)); (("pval_attributes", 562), 0, (Tag3 ((("attributes", 771)), 0, (0)), 100000000, 0, -369), (("parsing/parsetree.mli", 450, 17473, 17478), ("parsing/parsetree.mli", 450, 17473, 17506), 0), 0, Tag1 ("Parsetree", 182)); (("pval_loc", 563), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -370), (("parsing/parsetree.mli", 451, 17541, 17546), ("parsing/parsetree.mli", 451, 17541, 17567), 0), 0, Tag1 ("Parsetree", 183))]], 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 445, 17359, 17359), ("parsing/parsetree.mli", 452, 17568, 17573), 0), 0, 0, 0, Tag1 ("Parsetree", 24)), 2, 0); Tag1 (("type_declaration", 788), (0, 0, [[(("ptype_name", 564), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -346)], (0)), 100000000, 0, -345), (("parsing/parsetree.mli", 464, 17895, 17900), ("parsing/parsetree.mli", 464, 17895, 17923), 0), 0, Tag1 ("Parsetree", 184)); (("ptype_params", 565), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("core_type", 773)), 0, (0)), 100000000, 0, -349); (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "variance"), 0, (0)), 100000000, 0, -351); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "injectivity"), 0, (0)), 100000000, 0, -352)]), 100000000, 0, -350)]), 100000000, 0, -348)], (0)), 100000000, 0, -347), (("parsing/parsetree.mli", 465, 17924, 17929), ("parsing/parsetree.mli", 465, 17924, 17987), 0), 0, Tag1 ("Parsetree", 185)); (("ptype_cstrs", 566), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("core_type", 773)), 0, (0)), 100000000, 0, -355); (Tag3 ((("core_type", 773)), 0, (0)), 100000000, 0, -356); (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -357)]), 100000000, 0, -354)], (0)), 100000000, 0, -353), (("parsing/parsetree.mli", 467, 18018, 18023), ("parsing/parsetree.mli", 467, 18018, 18078), 0), 0, Tag1 ("Parsetree", 186)); (("ptype_kind", 567), 0, (Tag3 ((("type_kind", 789)), 0, (0)), 100000000, 0, -358), (("parsing/parsetree.mli", 469, 18139, 18144), ("parsing/parsetree.mli", 469, 18139, 18166), 0), 0, Tag1 ("Parsetree", 187)); (("ptype_private", 568), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "private_flag"), 0, (0)), 100000000, 0, -359), (("parsing/parsetree.mli", 470, 18167, 18172), ("parsing/parsetree.mli", 470, 18167, 18200), 0), 0, Tag1 ("Parsetree", 188)); (("ptype_manifest", 569), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("core_type", 773)), 0, (0)), 100000000, 0, -361)], (0)), 100000000, 0, -360), (("parsing/parsetree.mli", 471, 18229, 18234), ("parsing/parsetree.mli", 471, 18229, 18267), 0), 0, Tag1 ("Parsetree", 189)); (("ptype_attributes", 570), 0, (Tag3 ((("attributes", 771)), 0, (0)), 100000000, 0, -362), (("parsing/parsetree.mli", 472, 18293, 18298), ("parsing/parsetree.mli", 472, 18293, 18327), 0), 0, Tag1 ("Parsetree", 190)); (("ptype_loc", 571), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -363), (("parsing/parsetree.mli", 473, 18362, 18367), ("parsing/parsetree.mli", 473, 18362, 18389), 0), 0, Tag1 ("Parsetree", 191))]], 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 462, 17866, 17866), ("parsing/parsetree.mli", 474, 18390, 18395), 0), 0, 0, 0, Tag1 ("Parsetree", 25)), 2, 0); Tag1 (("type_kind", 789), (0, 0, Tag1 ([(("Ptype_abstract", 572), (0), 0, (("parsing/parsetree.mli", 502, 19613, 19615), ("parsing/parsetree.mli", 502, 19613, 19631), 0), 0, Tag1 ("Parsetree", 192)); (("Ptype_variant", 573), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("constructor_declaration", 791)), 0, (0)), 100000000, 0, -342)], (0)), 100000000, 0, -341)]), 0, (("parsing/parsetree.mli", 503, 19632, 19634), ("parsing/parsetree.mli", 503, 19632, 19681), 0), 0, Tag1 ("Parsetree", 193)); (("Ptype_record", 574), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("label_declaration", 790)), 0, (0)), 100000000, 0, -344)], (0)), 100000000, 0, -343)]), 0, (("parsing/parsetree.mli", 504, 19682, 19684), ("parsing/parsetree.mli", 504, 19682, 19724), 0), 0, Tag1 ("Parsetree", 194)); (("Ptype_open", 575), (0), 0, (("parsing/parsetree.mli", 505, 19759, 19761), ("parsing/parsetree.mli", 505, 19759, 19773), 0), 0, Tag1 ("Parsetree", 195))], 0), 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 501, 19597, 19597), ("parsing/parsetree.mli", 505, 19759, 19773), 0), 0, 0, 0, Tag1 ("Parsetree", 26)), 2, 0); Tag1 (("label_declaration", 790), (0, 0, [[(("pld_name", 576), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -336)], (0)), 100000000, 0, -335), (("parsing/parsetree.mli", 509, 19805, 19810), ("parsing/parsetree.mli", 509, 19805, 19831), 0), 0, Tag1 ("Parsetree", 196)); (("pld_mutable", 577), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "mutable_flag"), 0, (0)), 100000000, 0, -337), (("parsing/parsetree.mli", 510, 19832, 19837), ("parsing/parsetree.mli", 510, 19832, 19863), 0), 0, Tag1 ("Parsetree", 197)); (("pld_type", 578), 0, (Tag3 ((("core_type", 773)), 0, (0)), 100000000, 0, -338), (("parsing/parsetree.mli", 511, 19864, 19869), ("parsing/parsetree.mli", 511, 19864, 19889), 0), 0, Tag1 ("Parsetree", 198)); (("pld_loc", 579), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -339), (("parsing/parsetree.mli", 512, 19890, 19895), ("parsing/parsetree.mli", 512, 19890, 19915), 0), 0, Tag1 ("Parsetree", 199)); (("pld_attributes", 580), 0, (Tag3 ((("attributes", 771)), 0, (0)), 100000000, 0, -340), (("parsing/parsetree.mli", 513, 19916, 19921), ("parsing/parsetree.mli", 513, 19916, 19948), 0), 0, Tag1 ("Parsetree", 200))]], 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 507, 19775, 19775), ("parsing/parsetree.mli", 514, 19981, 19986), 0), 0, 0, 0, Tag1 ("Parsetree", 27)), 2, 0); Tag1 (("constructor_declaration", 791), (0, 0, [[(("pcd_name", 581), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -326)], (0)), 100000000, 0, -325), (("parsing/parsetree.mli", 528, 20474, 20479), ("parsing/parsetree.mli", 528, 20474, 20500), 0), 0, Tag1 ("Parsetree", 201)); (("pcd_vars", 582), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -329)], (0)), 100000000, 0, -328)], (0)), 100000000, 0, -327), (("parsing/parsetree.mli", 529, 20501, 20506), ("parsing/parsetree.mli", 529, 20501, 20532), 0), 0, Tag1 ("Parsetree", 202)); (("pcd_args", 583), 0, (Tag3 ((("constructor_arguments", 792)), 0, (0)), 100000000, 0, -330), (("parsing/parsetree.mli", 530, 20533, 20538), ("parsing/parsetree.mli", 530, 20533, 20570), 0), 0, Tag1 ("Parsetree", 203)); (("pcd_res", 584), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("core_type", 773)), 0, (0)), 100000000, 0, -332)], (0)), 100000000, 0, -331), (("parsing/parsetree.mli", 531, 20571, 20576), ("parsing/parsetree.mli", 531, 20571, 20602), 0), 0, Tag1 ("Parsetree", 204)); (("pcd_loc", 585), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -333), (("parsing/parsetree.mli", 532, 20603, 20608), ("parsing/parsetree.mli", 532, 20603, 20628), 0), 0, Tag1 ("Parsetree", 205)); (("pcd_attributes", 586), 0, (Tag3 ((("attributes", 771)), 0, (0)), 100000000, 0, -334), (("parsing/parsetree.mli", 533, 20629, 20634), ("parsing/parsetree.mli", 533, 20629, 20661), 0), 0, Tag1 ("Parsetree", 206))]], 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 526, 20438, 20438), ("parsing/parsetree.mli", 534, 20697, 20702), 0), 0, 0, 0, Tag1 ("Parsetree", 28)), 2, 0); Tag1 (("constructor_arguments", 792), (0, 0, Tag1 ([(("Pcstr_tuple", 587), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("core_type", 773)), 0, (0)), 100000000, 0, -322)], (0)), 100000000, 0, -321)]), 0, (("parsing/parsetree.mli", 537, 20732, 20734), ("parsing/parsetree.mli", 537, 20732, 20765), 0), 0, Tag1 ("Parsetree", 207)); (("Pcstr_record", 588), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("label_declaration", 790)), 0, (0)), 100000000, 0, -324)], (0)), 100000000, 0, -323)]), 0, (("parsing/parsetree.mli", 538, 20766, 20768), ("parsing/parsetree.mli", 538, 20766, 20808), 0), 0, Tag1 ("Parsetree", 208))], 0), 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 536, 20704, 20704), ("parsing/parsetree.mli", 538, 20766, 20808), 0), 0, 0, 0, Tag1 ("Parsetree", 29)), 2, 0); Tag1 (("type_extension", 793), (0, 0, [[(("ptyext_path", 589), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -309)], (0)), 100000000, 0, -308), (("parsing/parsetree.mli", 555, 21513, 21518), ("parsing/parsetree.mli", 555, 21513, 21547), 0), 0, Tag1 ("Parsetree", 209)); (("ptyext_params", 590), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("core_type", 773)), 0, (0)), 100000000, 0, -312); (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "variance"), 0, (0)), 100000000, 0, -314); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "injectivity"), 0, (0)), 100000000, 0, -315)]), 100000000, 0, -313)]), 100000000, 0, -311)], (0)), 100000000, 0, -310), (("parsing/parsetree.mli", 556, 21548, 21553), ("parsing/parsetree.mli", 556, 21548, 21612), 0), 0, Tag1 ("Parsetree", 210)); (("ptyext_constructors", 591), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("extension_constructor", 794)), 0, (0)), 100000000, 0, -317)], (0)), 100000000, 0, -316), (("parsing/parsetree.mli", 557, 21613, 21618), ("parsing/parsetree.mli", 557, 21613, 21666), 0), 0, Tag1 ("Parsetree", 211)); (("ptyext_private", 592), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "private_flag"), 0, (0)), 100000000, 0, -318), (("parsing/parsetree.mli", 558, 21667, 21672), ("parsing/parsetree.mli", 558, 21667, 21701), 0), 0, Tag1 ("Parsetree", 212)); (("ptyext_loc", 593), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -319), (("parsing/parsetree.mli", 559, 21702, 21707), ("parsing/parsetree.mli", 559, 21702, 21730), 0), 0, Tag1 ("Parsetree", 213)); (("ptyext_attributes", 594), 0, (Tag3 ((("attributes", 771)), 0, (0)), 100000000, 0, -320), (("parsing/parsetree.mli", 560, 21731, 21736), ("parsing/parsetree.mli", 560, 21731, 21766), 0), 0, Tag1 ("Parsetree", 214))]], 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 553, 21486, 21486), ("parsing/parsetree.mli", 561, 21799, 21804), 0), 0, 0, 0, Tag1 ("Parsetree", 30)), 2, 0); Tag1 (("extension_constructor", 794), (0, 0, [[(("pext_name", 595), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -304)], (0)), 100000000, 0, -303), (("parsing/parsetree.mli", 569, 21945, 21950), ("parsing/parsetree.mli", 569, 21945, 21972), 0), 0, Tag1 ("Parsetree", 215)); (("pext_kind", 596), 0, (Tag3 ((("extension_constructor_kind", 796)), 0, (0)), 100000000, 0, -305), (("parsing/parsetree.mli", 570, 21973, 21978), ("parsing/parsetree.mli", 570, 21973, 22016), 0), 0, Tag1 ("Parsetree", 216)); (("pext_loc", 597), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -306), (("parsing/parsetree.mli", 571, 22017, 22022), ("parsing/parsetree.mli", 571, 22017, 22043), 0), 0, Tag1 ("Parsetree", 217)); (("pext_attributes", 598), 0, (Tag3 ((("attributes", 771)), 0, (0)), 100000000, 0, -307), (("parsing/parsetree.mli", 572, 22044, 22049), ("parsing/parsetree.mli", 572, 22044, 22077), 0), 0, Tag1 ("Parsetree", 218))]], 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 567, 21911, 21911), ("parsing/parsetree.mli", 573, 22113, 22117), 0), 0, 0, 0, Tag1 ("Parsetree", 31)), 2, 0); Tag1 (("type_exception", 795), (0, 0, [[(("ptyexn_constructor", 599), 0, (Tag3 ((("extension_constructor", 794)), 0, (0)), 100000000, 0, -300), (("parsing/parsetree.mli", 577, 22144, 22148), ("parsing/parsetree.mli", 577, 22144, 22191), 0), 0, Tag1 ("Parsetree", 219)); (("ptyexn_loc", 600), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -301), (("parsing/parsetree.mli", 578, 22192, 22196), ("parsing/parsetree.mli", 578, 22192, 22220), 0), 0, Tag1 ("Parsetree", 220)); (("ptyexn_attributes", 601), 0, (Tag3 ((("attributes", 771)), 0, (0)), 100000000, 0, -302), (("parsing/parsetree.mli", 579, 22221, 22225), ("parsing/parsetree.mli", 579, 22221, 22256), 0), 0, Tag1 ("Parsetree", 221))]], 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 575, 22119, 22119), ("parsing/parsetree.mli", 580, 22291, 22294), 0), 0, 0, 0, Tag1 ("Parsetree", 32)), 2, 0); Tag1 (("extension_constructor_kind", 796), (0, 0, Tag1 ([(("Pext_decl", 602), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -294)], (0)), 100000000, 0, -293)], (0)), 100000000, 0, -292); (Tag3 ((("constructor_arguments", 792)), 0, (0)), 100000000, 0, -295); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("core_type", 773)), 0, (0)), 100000000, 0, -297)], (0)), 100000000, 0, -296)]), 0, (("parsing/parsetree.mli", 584, 22383, 22385), ("parsing/parsetree.mli", 584, 22383, 22458), 0), 0, Tag1 ("Parsetree", 222)); (("Pext_rebind", 603), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -299)], (0)), 100000000, 0, -298)]), 0, (("parsing/parsetree.mli", 604, 23309, 23311), ("parsing/parsetree.mli", 604, 23309, 23343), 0), 0, Tag1 ("Parsetree", 223))], 0), 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 583, 22350, 22350), ("parsing/parsetree.mli", 604, 23309, 23343), 0), 0, 0, 0, Tag1 ("Parsetree", 33)), 2, 0); Tag1 (("class_type", 797), (0, 0, [[(("pcty_desc", 604), 0, (Tag3 ((("class_type_desc", 798)), 0, (0)), 100000000, 0, -289), (("parsing/parsetree.mli", 612, 23524, 23529), ("parsing/parsetree.mli", 612, 23524, 23556), 0), 0, Tag1 ("Parsetree", 224)); (("pcty_loc", 605), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -290), (("parsing/parsetree.mli", 613, 23557, 23562), ("parsing/parsetree.mli", 613, 23557, 23583), 0), 0, Tag1 ("Parsetree", 225)); (("pcty_attributes", 606), 0, (Tag3 ((("attributes", 771)), 0, (0)), 100000000, 0, -291), (("parsing/parsetree.mli", 614, 23584, 23589), ("parsing/parsetree.mli", 614, 23584, 23617), 0), 0, Tag1 ("Parsetree", 226))]], 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 610, 23501, 23501), ("parsing/parsetree.mli", 615, 23648, 23653), 0), 0, 0, 0, Tag1 ("Parsetree", 34)), 2, 0); Tag1 (("class_type_desc", 798), (0, 0, Tag1 ([(("Pcty_constr", 607), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -279)], (0)), 100000000, 0, -278); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("core_type", 773)), 0, (0)), 100000000, 0, -281)], (0)), 100000000, 0, -280)]), 0, (("parsing/parsetree.mli", 618, 23677, 23679), ("parsing/parsetree.mli", 618, 23677, 23728), 0), 0, Tag1 ("Parsetree", 227)); (("Pcty_signature", 608), ([(Tag3 ((("class_signature", 799)), 0, (0)), 100000000, 0, -282)]), 0, (("parsing/parsetree.mli", 621, 23782, 23784), ("parsing/parsetree.mli", 621, 23782, 23819), 0), 0, Tag1 ("Parsetree", 228)); (("Pcty_arrow", 609), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "arg_label"), 0, (0)), 100000000, 0, -283); (Tag3 ((("core_type", 773)), 0, (0)), 100000000, 0, -284); (Tag3 ((("class_type", 797)), 0, (0)), 100000000, 0, -285)]), 0, (("parsing/parsetree.mli", 622, 23845, 23847), ("parsing/parsetree.mli", 622, 23845, 23897), 0), 0, Tag1 ("Parsetree", 229)); (("Pcty_extension", 610), ([(Tag3 ((("extension", 770)), 0, (0)), 100000000, 0, -286)]), 0, (("parsing/parsetree.mli", 631, 24274, 24276), ("parsing/parsetree.mli", 631, 24274, 24305), 0), 0, Tag1 ("Parsetree", 230)); (("Pcty_open", 611), ([(Tag3 ((("open_description", 822)), 0, (0)), 100000000, 0, -287); (Tag3 ((("class_type", 797)), 0, (0)), 100000000, 0, -288)]), 0, (("parsing/parsetree.mli", 632, 24320, 24322), ("parsing/parsetree.mli", 632, 24320, 24366), 0), 0, Tag1 ("Parsetree", 231))], 0), 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 617, 23655, 23655), ("parsing/parsetree.mli", 632, 24320, 24366), 0), 0, 0, 0, Tag1 ("Parsetree", 35)), 2, 0); Tag1 (("class_signature", 799), (0, 0, [[(("pcsig_self", 612), 0, (Tag3 ((("core_type", 773)), 0, (0)), 100000000, 0, -275), (("parsing/parsetree.mli", 636, 24423, 24428), ("parsing/parsetree.mli", 636, 24423, 24450), 0), 0, Tag1 ("Parsetree", 232)); (("pcsig_fields", 613), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("class_type_field", 800)), 0, (0)), 100000000, 0, -277)], (0)), 100000000, 0, -276), (("parsing/parsetree.mli", 637, 24451, 24456), ("parsing/parsetree.mli", 637, 24451, 24492), 0), 0, Tag1 ("Parsetree", 233))]], 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 634, 24395, 24395), ("parsing/parsetree.mli", 638, 24493, 24498), 0), 0, 0, 0, Tag1 ("Parsetree", 36)), 2, 0); Tag1 (("class_type_field", 800), (0, 0, [[(("pctf_desc", 614), 0, (Tag3 ((("class_type_field_desc", 801)), 0, (0)), 100000000, 0, -272), (("parsing/parsetree.mli", 647, 24753, 24758), ("parsing/parsetree.mli", 647, 24753, 24791), 0), 0, Tag1 ("Parsetree", 234)); (("pctf_loc", 615), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -273), (("parsing/parsetree.mli", 648, 24792, 24797), ("parsing/parsetree.mli", 648, 24792, 24818), 0), 0, Tag1 ("Parsetree", 235)); (("pctf_attributes", 616), 0, (Tag3 ((("attributes", 771)), 0, (0)), 100000000, 0, -274), (("parsing/parsetree.mli", 649, 24819, 24824), ("parsing/parsetree.mli", 649, 24819, 24852), 0), 0, Tag1 ("Parsetree", 236))]], 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 645, 24724, 24724), ("parsing/parsetree.mli", 650, 24887, 24892), 0), 0, 0, 0, Tag1 ("Parsetree", 37)), 2, 0); Tag1 (("class_type_field_desc", 801), (0, 0, Tag1 ([(("Pctf_inherit", 617), ([(Tag3 ((("class_type", 797)), 0, (0)), 100000000, 0, -254)]), 0, (("parsing/parsetree.mli", 653, 24922, 24924), ("parsing/parsetree.mli", 653, 24922, 24952), 0), 0, Tag1 ("Parsetree", 237)); (("Pctf_val", 618), ([(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Asttypes")), "label"), 0, (0)), 100000000, 0, -257)], (0)), 100000000, 0, -256); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "mutable_flag"), 0, (0)), 100000000, 0, -258); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "virtual_flag"), 0, (0)), 100000000, 0, -259); (Tag3 ((("core_type", 773)), 0, (0)), 100000000, 0, -260)]), 100000000, 0, -255)]), 0, (("parsing/parsetree.mli", 654, 24974, 24976), ("parsing/parsetree.mli", 654, 24974, 25043), 0), 0, Tag1 ("Parsetree", 238)); (("Pctf_method", 619), ([(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Asttypes")), "label"), 0, (0)), 100000000, 0, -263)], (0)), 100000000, 0, -262); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "private_flag"), 0, (0)), 100000000, 0, -264); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "virtual_flag"), 0, (0)), 100000000, 0, -265); (Tag3 ((("core_type", 773)), 0, (0)), 100000000, 0, -266)]), 100000000, 0, -261)]), 0, (("parsing/parsetree.mli", 656, 25068, 25070), ("parsing/parsetree.mli", 656, 25068, 25140), 0), 0, Tag1 ("Parsetree", 239)); (("Pctf_constraint", 620), ([(Tag2 ([(Tag3 ((("core_type", 773)), 0, (0)), 100000000, 0, -268); (Tag3 ((("core_type", 773)), 0, (0)), 100000000, 0, -269)]), 100000000, 0, -267)]), 0, (("parsing/parsetree.mli", 661, 25250, 25252), ("parsing/parsetree.mli", 661, 25250, 25296), 0), 0, Tag1 ("Parsetree", 240)); (("Pctf_attribute", 621), ([(Tag3 ((("attribute", 769)), 0, (0)), 100000000, 0, -270)]), 0, (("parsing/parsetree.mli", 662, 25326, 25328), ("parsing/parsetree.mli", 662, 25326, 25357), 0), 0, Tag1 ("Parsetree", 241)); (("Pctf_extension", 622), ([(Tag3 ((("extension", 770)), 0, (0)), 100000000, 0, -271)]), 0, (("parsing/parsetree.mli", 663, 25379, 25381), ("parsing/parsetree.mli", 663, 25379, 25410), 0), 0, Tag1 ("Parsetree", 242))], 0), 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 652, 24894, 24894), ("parsing/parsetree.mli", 663, 25379, 25410), 0), 0, 0, 0, Tag1 ("Parsetree", 38)), 2, 0); Tag1 (("class_infos", 802), ([((("a")), 100000000, 0, -251)], 1, [[(("pci_virt", 623), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "virtual_flag"), 0, (0)), 100000000, 0, -242), (("parsing/parsetree.mli", 667, 25456, 25461), ("parsing/parsetree.mli", 667, 25456, 25484), 0), 0, Tag1 ("Parsetree", 243)); (("pci_params", 624), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("core_type", 773)), 0, (0)), 100000000, 0, -245); (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "variance"), 0, (0)), 100000000, 0, -247); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "injectivity"), 0, (0)), 100000000, 0, -248)]), 100000000, 0, -246)]), 100000000, 0, -244)], (0)), 100000000, 0, -243), (("parsing/parsetree.mli", 668, 25485, 25490), ("parsing/parsetree.mli", 668, 25485, 25546), 0), 0, Tag1 ("Parsetree", 244)); (("pci_name", 625), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -250)], (0)), 100000000, 0, -249), (("parsing/parsetree.mli", 669, 25547, 25552), ("parsing/parsetree.mli", 669, 25547, 25573), 0), 0, Tag1 ("Parsetree", 245)); (("pci_expr", 626), 0, ((("a")), 100000000, 0, -251), (("parsing/parsetree.mli", 670, 25574, 25579), ("parsing/parsetree.mli", 670, 25574, 25592), 0), 0, Tag1 ("Parsetree", 246)); (("pci_loc", 627), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -252), (("parsing/parsetree.mli", 671, 25593, 25598), ("parsing/parsetree.mli", 671, 25593, 25618), 0), 0, Tag1 ("Parsetree", 247)); (("pci_attributes", 628), 0, (Tag3 ((("attributes", 771)), 0, (0)), 100000000, 0, -253), (("parsing/parsetree.mli", 672, 25619, 25624), ("parsing/parsetree.mli", 672, 25619, 25651), 0), 0, Tag1 ("Parsetree", 248))]], 1, 0, [25], [0], 0, 0, (("parsing/parsetree.mli", 665, 25429, 25429), ("parsing/parsetree.mli", 673, 25686, 25691), 0), 0, 0, 0, Tag1 ("Parsetree", 39)), 2, 0); Tag1 (("class_description", 803), (0, 0, 0, 1, ((Tag3 ((("class_infos", 802)), [(Tag3 ((("class_type", 797)), 0, (0)), 100000000, 0, -241)], (0)), 100000000, 0, -240)), 0, 0, 0, 0, (("parsing/parsetree.mli", 682, 25893, 25893), ("parsing/parsetree.mli", 682, 25893, 25939), 0), 0, 0, 0, Tag1 ("Parsetree", 40)), 2, 0); Tag1 (("class_type_declaration", 804), (0, 0, 0, 1, ((Tag3 ((("class_infos", 802)), [(Tag3 ((("class_type", 797)), 0, (0)), 100000000, 0, -239)], (0)), 100000000, 0, -238)), 0, 0, 0, 0, (("parsing/parsetree.mli", 684, 25941, 25941), ("parsing/parsetree.mli", 684, 25941, 25992), 0), 0, 0, 0, Tag1 ("Parsetree", 41)), 2, 0); Tag1 (("class_expr", 805), (0, 0, [[(("pcl_desc", 629), 0, (Tag3 ((("class_expr_desc", 806)), 0, (0)), 100000000, 0, -235), (("parsing/parsetree.mli", 690, 26070, 26075), ("parsing/parsetree.mli", 690, 26070, 26101), 0), 0, Tag1 ("Parsetree", 249)); (("pcl_loc", 630), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -236), (("parsing/parsetree.mli", 691, 26102, 26107), ("parsing/parsetree.mli", 691, 26102, 26127), 0), 0, Tag1 ("Parsetree", 250)); (("pcl_attributes", 631), 0, (Tag3 ((("attributes", 771)), 0, (0)), 100000000, 0, -237), (("parsing/parsetree.mli", 692, 26128, 26133), ("parsing/parsetree.mli", 692, 26128, 26160), 0), 0, Tag1 ("Parsetree", 251))]], 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 688, 26047, 26047), ("parsing/parsetree.mli", 693, 26191, 26196), 0), 0, 0, 0, Tag1 ("Parsetree", 42)), 2, 0); Tag1 (("class_expr_desc", 806), (0, 0, Tag1 ([(("Pcl_constr", 632), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -212)], (0)), 100000000, 0, -211); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("core_type", 773)), 0, (0)), 100000000, 0, -214)], (0)), 100000000, 0, -213)]), 0, (("parsing/parsetree.mli", 696, 26220, 26222), ("parsing/parsetree.mli", 696, 26220, 26270), 0), 0, Tag1 ("Parsetree", 252)); (("Pcl_structure", 633), ([(Tag3 ((("class_structure", 807)), 0, (0)), 100000000, 0, -215)]), 0, (("parsing/parsetree.mli", 698, 26312, 26314), ("parsing/parsetree.mli", 698, 26312, 26348), 0), 0, Tag1 ("Parsetree", 253)); (("Pcl_fun", 634), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "arg_label"), 0, (0)), 100000000, 0, -216); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -218)], (0)), 100000000, 0, -217); (Tag3 ((("pattern", 780)), 0, (0)), 100000000, 0, -219); (Tag3 ((("class_expr", 805)), 0, (0)), 100000000, 0, -220)]), 0, (("parsing/parsetree.mli", 699, 26374, 26376), ("parsing/parsetree.mli", 699, 26374, 26441), 0), 0, Tag1 ("Parsetree", 254)); (("Pcl_apply", 635), ([(Tag3 ((("class_expr", 805)), 0, (0)), 100000000, 0, -221); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "arg_label"), 0, (0)), 100000000, 0, -224); (Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -225)]), 100000000, 0, -223)], (0)), 100000000, 0, -222)]), 0, (("parsing/parsetree.mli", 714, 27130, 27132), ("parsing/parsetree.mli", 714, 27130, 27189), 0), 0, Tag1 ("Parsetree", 255)); (("Pcl_let", 636), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "rec_flag"), 0, (0)), 100000000, 0, -226); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("value_binding", 834)), 0, (0)), 100000000, 0, -228)], (0)), 100000000, 0, -227); (Tag3 ((("class_expr", 805)), 0, (0)), 100000000, 0, -229)]), 0, (("parsing/parsetree.mli", 722, 27437, 27439), ("parsing/parsetree.mli", 722, 27437, 27494), 0), 0, Tag1 ("Parsetree", 256)); (("Pcl_constraint", 637), ([(Tag3 ((("class_expr", 805)), 0, (0)), 100000000, 0, -230); (Tag3 ((("class_type", 797)), 0, (0)), 100000000, 0, -231)]), 0, (("parsing/parsetree.mli", 729, 27843, 27845), ("parsing/parsetree.mli", 729, 27843, 27888), 0), 0, Tag1 ("Parsetree", 257)); (("Pcl_extension", 638), ([(Tag3 ((("extension", 770)), 0, (0)), 100000000, 0, -232)]), 0, (("parsing/parsetree.mli", 730, 27909, 27911), ("parsing/parsetree.mli", 730, 27909, 27939), 0), 0, Tag1 ("Parsetree", 258)); (("Pcl_open", 639), ([(Tag3 ((("open_description", 822)), 0, (0)), 100000000, 0, -233); (Tag3 ((("class_expr", 805)), 0, (0)), 100000000, 0, -234)]), 0, (("parsing/parsetree.mli", 731, 27956, 27958), ("parsing/parsetree.mli", 731, 27956, 28001), 0), 0, Tag1 ("Parsetree", 259))], 0), 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 695, 26198, 26198), ("parsing/parsetree.mli", 731, 27956, 28001), 0), 0, 0, 0, Tag1 ("Parsetree", 43)), 2, 0); Tag1 (("class_structure", 807), (0, 0, [[(("pcstr_self", 640), 0, (Tag3 ((("pattern", 780)), 0, (0)), 100000000, 0, -208), (("parsing/parsetree.mli", 735, 28058, 28063), ("parsing/parsetree.mli", 735, 28058, 28083), 0), 0, Tag1 ("Parsetree", 260)); (("pcstr_fields", 641), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("class_field", 808)), 0, (0)), 100000000, 0, -210)], (0)), 100000000, 0, -209), (("parsing/parsetree.mli", 736, 28084, 28089), ("parsing/parsetree.mli", 736, 28084, 28120), 0), 0, Tag1 ("Parsetree", 261))]], 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 733, 28030, 28030), ("parsing/parsetree.mli", 737, 28121, 28126), 0), 0, 0, 0, Tag1 ("Parsetree", 44)), 2, 0); Tag1 (("class_field", 808), (0, 0, [[(("pcf_desc", 642), 0, (Tag3 ((("class_field_desc", 809)), 0, (0)), 100000000, 0, -205), (("parsing/parsetree.mli", 746, 28374, 28379), ("parsing/parsetree.mli", 746, 28374, 28406), 0), 0, Tag1 ("Parsetree", 262)); (("pcf_loc", 643), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -206), (("parsing/parsetree.mli", 747, 28407, 28412), ("parsing/parsetree.mli", 747, 28407, 28432), 0), 0, Tag1 ("Parsetree", 263)); (("pcf_attributes", 644), 0, (Tag3 ((("attributes", 771)), 0, (0)), 100000000, 0, -207), (("parsing/parsetree.mli", 748, 28433, 28438), ("parsing/parsetree.mli", 748, 28433, 28465), 0), 0, Tag1 ("Parsetree", 264))]], 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 744, 28350, 28350), ("parsing/parsetree.mli", 749, 28500, 28505), 0), 0, 0, 0, Tag1 ("Parsetree", 45)), 2, 0); Tag1 (("class_field_desc", 809), (0, 0, Tag1 ([(("Pcf_inherit", 645), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "override_flag"), 0, (0)), 100000000, 0, -184); (Tag3 ((("class_expr", 805)), 0, (0)), 100000000, 0, -185); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -188)], (0)), 100000000, 0, -187)], (0)), 100000000, 0, -186)]), 0, (("parsing/parsetree.mli", 752, 28530, 28532), ("parsing/parsetree.mli", 752, 28530, 28595), 0), 0, Tag1 ("Parsetree", 265)); (("Pcf_val", 646), ([(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Asttypes")), "label"), 0, (0)), 100000000, 0, -191)], (0)), 100000000, 0, -190); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "mutable_flag"), 0, (0)), 100000000, 0, -192); (Tag3 ((("class_field_kind", 810)), 0, (0)), 100000000, 0, -193)]), 100000000, 0, -189)]), 0, (("parsing/parsetree.mli", 767, 29243, 29245), ("parsing/parsetree.mli", 767, 29243, 29303), 0), 0, Tag1 ("Parsetree", 266)); (("Pcf_method", 647), ([(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Asttypes")), "label"), 0, (0)), 100000000, 0, -196)], (0)), 100000000, 0, -195); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "private_flag"), 0, (0)), 100000000, 0, -197); (Tag3 ((("class_field_kind", 810)), 0, (0)), 100000000, 0, -198)]), 100000000, 0, -194)]), 0, (("parsing/parsetree.mli", 782, 30067, 30069), ("parsing/parsetree.mli", 782, 30067, 30130), 0), 0, Tag1 ("Parsetree", 267)); (("Pcf_constraint", 648), ([(Tag2 ([(Tag3 ((("core_type", 773)), 0, (0)), 100000000, 0, -200); (Tag3 ((("core_type", 773)), 0, (0)), 100000000, 0, -201)]), 100000000, 0, -199)]), 0, (("parsing/parsetree.mli", 788, 30360, 30362), ("parsing/parsetree.mli", 788, 30360, 30405), 0), 0, Tag1 ("Parsetree", 268)); (("Pcf_initializer", 649), ([(Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -202)]), 0, (("parsing/parsetree.mli", 789, 30435, 30437), ("parsing/parsetree.mli", 789, 30435, 30468), 0), 0, Tag1 ("Parsetree", 269)); (("Pcf_attribute", 650), ([(Tag3 ((("attribute", 769)), 0, (0)), 100000000, 0, -203)]), 0, (("parsing/parsetree.mli", 790, 30493, 30495), ("parsing/parsetree.mli", 790, 30493, 30523), 0), 0, Tag1 ("Parsetree", 270)); (("Pcf_extension", 651), ([(Tag3 ((("extension", 770)), 0, (0)), 100000000, 0, -204)]), 0, (("parsing/parsetree.mli", 791, 30545, 30547), ("parsing/parsetree.mli", 791, 30545, 30575), 0), 0, Tag1 ("Parsetree", 271))], 0), 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 751, 28507, 28507), ("parsing/parsetree.mli", 791, 30545, 30575), 0), 0, 0, 0, Tag1 ("Parsetree", 46)), 2, 0); Tag1 (("class_field_kind", 810), (0, 0, Tag1 ([(("Cfk_virtual", 652), ([(Tag3 ((("core_type", 773)), 0, (0)), 100000000, 0, -181)]), 0, (("parsing/parsetree.mli", 794, 30617, 30619), ("parsing/parsetree.mli", 794, 30617, 30645), 0), 0, Tag1 ("Parsetree", 272)); (("Cfk_concrete", 653), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "override_flag"), 0, (0)), 100000000, 0, -182); (Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -183)]), 0, (("parsing/parsetree.mli", 795, 30646, 30648), ("parsing/parsetree.mli", 795, 30646, 30692), 0), 0, Tag1 ("Parsetree", 273))], 0), 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 793, 30594, 30594), ("parsing/parsetree.mli", 795, 30646, 30692), 0), 0, 0, 0, Tag1 ("Parsetree", 47)), 2, 0); Tag1 (("class_declaration", 811), (0, 0, 0, 1, ((Tag3 ((("class_infos", 802)), [(Tag3 ((("class_expr", 805)), 0, (0)), 100000000, 0, -180)], (0)), 100000000, 0, -179)), 0, 0, 0, 0, (("parsing/parsetree.mli", 797, 30694, 30694), ("parsing/parsetree.mli", 797, 30694, 30740), 0), 0, 0, 0, Tag1 ("Parsetree", 48)), 2, 0); Tag1 (("module_type", 812), (0, 0, [[(("pmty_desc", 654), 0, (Tag3 ((("module_type_desc", 813)), 0, (0)), 100000000, 0, -176), (("parsing/parsetree.mli", 804, 30846, 30851), ("parsing/parsetree.mli", 804, 30846, 30879), 0), 0, Tag1 ("Parsetree", 274)); (("pmty_loc", 655), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -177), (("parsing/parsetree.mli", 805, 30880, 30885), ("parsing/parsetree.mli", 805, 30880, 30906), 0), 0, Tag1 ("Parsetree", 275)); (("pmty_attributes", 656), 0, (Tag3 ((("attributes", 771)), 0, (0)), 100000000, 0, -178), (("parsing/parsetree.mli", 806, 30907, 30912), ("parsing/parsetree.mli", 806, 30907, 30940), 0), 0, Tag1 ("Parsetree", 276))]], 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 802, 30822, 30822), ("parsing/parsetree.mli", 807, 30971, 30976), 0), 0, 0, 0, Tag1 ("Parsetree", 49)), 2, 0); Tag1 (("module_type_desc", 813), (0, 0, Tag1 ([(("Pmty_ident", 657), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -165)], (0)), 100000000, 0, -164)]), 0, (("parsing/parsetree.mli", 810, 31001, 31003), ("parsing/parsetree.mli", 810, 31001, 31034), 0), 0, Tag1 ("Parsetree", 277)); (("Pmty_signature", 658), ([(Tag3 ((("signature", 815)), 0, (0)), 100000000, 0, -166)]), 0, (("parsing/parsetree.mli", 811, 31074, 31076), ("parsing/parsetree.mli", 811, 31074, 31105), 0), 0, Tag1 ("Parsetree", 278)); (("Pmty_functor", 659), ([(Tag3 ((("functor_parameter", 814)), 0, (0)), 100000000, 0, -167); (Tag3 ((("module_type", 812)), 0, (0)), 100000000, 0, -168)]), 0, (("parsing/parsetree.mli", 812, 31128, 31130), ("parsing/parsetree.mli", 812, 31128, 31179), 0), 0, Tag1 ("Parsetree", 279)); (("Pmty_with", 660), ([(Tag3 ((("module_type", 812)), 0, (0)), 100000000, 0, -169); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("with_constraint", 827)), 0, (0)), 100000000, 0, -171)], (0)), 100000000, 0, -170)]), 0, (("parsing/parsetree.mli", 814, 31219, 31221), ("parsing/parsetree.mli", 814, 31219, 31270), 0), 0, Tag1 ("Parsetree", 280)); (("Pmty_typeof", 661), ([(Tag3 ((("module_expr", 828)), 0, (0)), 100000000, 0, -172)]), 0, (("parsing/parsetree.mli", 815, 31293, 31295), ("parsing/parsetree.mli", 815, 31293, 31323), 0), 0, Tag1 ("Parsetree", 281)); (("Pmty_extension", 662), ([(Tag3 ((("extension", 770)), 0, (0)), 100000000, 0, -173)]), 0, (("parsing/parsetree.mli", 816, 31352, 31354), ("parsing/parsetree.mli", 816, 31352, 31383), 0), 0, Tag1 ("Parsetree", 282)); (("Pmty_alias", 663), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -175)], (0)), 100000000, 0, -174)]), 0, (("parsing/parsetree.mli", 817, 31400, 31402), ("parsing/parsetree.mli", 817, 31400, 31433), 0), 0, Tag1 ("Parsetree", 283))], 0), 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 809, 30978, 30978), ("parsing/parsetree.mli", 817, 31400, 31433), 0), 0, 0, 0, Tag1 ("Parsetree", 50)), 2, 0); Tag1 (("functor_parameter", 814), (0, 0, Tag1 ([(("Unit", 664), (0), 0, (("parsing/parsetree.mli", 820, 31480, 31482), ("parsing/parsetree.mli", 820, 31480, 31488), 0), 0, Tag1 ("Parsetree", 284)); (("Named", 665), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -162)], (0)), 100000000, 0, -161)], (0)), 100000000, 0, -160); (Tag3 ((("module_type", 812)), 0, (0)), 100000000, 0, -163)]), 0, (("parsing/parsetree.mli", 821, 31502, 31504), ("parsing/parsetree.mli", 821, 31502, 31546), 0), 0, Tag1 ("Parsetree", 285))], 0), 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 819, 31456, 31456), ("parsing/parsetree.mli", 821, 31502, 31546), 0), 0, 0, 0, Tag1 ("Parsetree", 51)), 2, 0); Tag1 (("signature", 815), (0, 0, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("signature_item", 816)), 0, (0)), 100000000, 0, -159)], (0)), 100000000, 0, -158)), 0, 0, 0, 0, (("parsing/parsetree.mli", 826, 31688, 31688), ("parsing/parsetree.mli", 826, 31688, 31723), 0), 0, 0, 0, Tag1 ("Parsetree", 52)), 2, 0); Tag1 (("signature_item", 816), (0, 0, [[(("psig_desc", 666), 0, (Tag3 ((("signature_item_desc", 817)), 0, (0)), 100000000, 0, -156), (("parsing/parsetree.mli", 830, 31752, 31757), ("parsing/parsetree.mli", 830, 31752, 31788), 0), 0, Tag1 ("Parsetree", 286)); (("psig_loc", 667), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -157), (("parsing/parsetree.mli", 831, 31789, 31794), ("parsing/parsetree.mli", 831, 31789, 31815), 0), 0, Tag1 ("Parsetree", 287))]], 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 828, 31725, 31725), ("parsing/parsetree.mli", 832, 31816, 31821), 0), 0, 0, 0, Tag1 ("Parsetree", 53)), 2, 0); Tag1 (("signature_item_desc", 817), (0, 0, Tag1 ([(("Psig_value", 668), ([(Tag3 ((("value_description", 787)), 0, (0)), 100000000, 0, -133)]), 0, (("parsing/parsetree.mli", 835, 31849, 31851), ("parsing/parsetree.mli", 835, 31849, 31884), 0), 0, Tag1 ("Parsetree", 288)); (("Psig_type", 669), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "rec_flag"), 0, (0)), 100000000, 0, -134); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("type_declaration", 788)), 0, (0)), 100000000, 0, -136)], (0)), 100000000, 0, -135)]), 0, (("parsing/parsetree.mli", 839, 31966, 31968), ("parsing/parsetree.mli", 839, 31966, 32015), 0), 0, Tag1 ("Parsetree", 289)); (("Psig_typesubst", 670), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("type_declaration", 788)), 0, (0)), 100000000, 0, -138)], (0)), 100000000, 0, -137)]), 0, (("parsing/parsetree.mli", 841, 32067, 32069), ("parsing/parsetree.mli", 841, 32067, 32110), 0), 0, Tag1 ("Parsetree", 290)); (("Psig_typext", 671), ([(Tag3 ((("type_extension", 793)), 0, (0)), 100000000, 0, -139)]), 0, (("parsing/parsetree.mli", 843, 32164, 32166), ("parsing/parsetree.mli", 843, 32164, 32197), 0), 0, Tag1 ("Parsetree", 291)); (("Psig_exception", 672), ([(Tag3 ((("type_exception", 795)), 0, (0)), 100000000, 0, -140)]), 0, (("parsing/parsetree.mli", 844, 32223, 32225), ("parsing/parsetree.mli", 844, 32223, 32259), 0), 0, Tag1 ("Parsetree", 292)); (("Psig_module", 673), ([(Tag3 ((("module_declaration", 818)), 0, (0)), 100000000, 0, -141)]), 0, (("parsing/parsetree.mli", 845, 32287, 32289), ("parsing/parsetree.mli", 845, 32287, 32324), 0), 0, Tag1 ("Parsetree", 293)); (("Psig_modsubst", 674), ([(Tag3 ((("module_substitution", 819)), 0, (0)), 100000000, 0, -142)]), 0, (("parsing/parsetree.mli", 846, 32368, 32370), ("parsing/parsetree.mli", 846, 32368, 32408), 0), 0, Tag1 ("Parsetree", 294)); (("Psig_recmodule", 675), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("module_declaration", 818)), 0, (0)), 100000000, 0, -144)], (0)), 100000000, 0, -143)]), 0, (("parsing/parsetree.mli", 847, 32433, 32435), ("parsing/parsetree.mli", 847, 32433, 32478), 0), 0, Tag1 ("Parsetree", 295)); (("Psig_modtype", 676), ([(Tag3 ((("module_type_declaration", 820)), 0, (0)), 100000000, 0, -145)]), 0, (("parsing/parsetree.mli", 849, 32535, 32537), ("parsing/parsetree.mli", 849, 32535, 32578), 0), 0, Tag1 ("Parsetree", 296)); (("Psig_modtypesubst", 677), ([(Tag3 ((("module_type_declaration", 820)), 0, (0)), 100000000, 0, -146)]), 0, (("parsing/parsetree.mli", 851, 32633, 32635), ("parsing/parsetree.mli", 851, 32633, 32681), 0), 0, Tag1 ("Parsetree", 297)); (("Psig_open", 678), ([(Tag3 ((("open_description", 822)), 0, (0)), 100000000, 0, -147)]), 0, (("parsing/parsetree.mli", 853, 32720, 32722), ("parsing/parsetree.mli", 853, 32720, 32753), 0), 0, Tag1 ("Parsetree", 298)); (("Psig_include", 679), ([(Tag3 ((("include_description", 825)), 0, (0)), 100000000, 0, -148)]), 0, (("parsing/parsetree.mli", 854, 32771, 32773), ("parsing/parsetree.mli", 854, 32771, 32810), 0), 0, Tag1 ("Parsetree", 299)); (("Psig_class", 680), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("class_description", 803)), 0, (0)), 100000000, 0, -150)], (0)), 100000000, 0, -149)]), 0, (("parsing/parsetree.mli", 855, 32832, 32834), ("parsing/parsetree.mli", 855, 32832, 32872), 0), 0, Tag1 ("Parsetree", 300)); (("Psig_class_type", 681), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("class_type_declaration", 804)), 0, (0)), 100000000, 0, -152)], (0)), 100000000, 0, -151)]), 0, (("parsing/parsetree.mli", 857, 32924, 32926), ("parsing/parsetree.mli", 857, 32924, 32974), 0), 0, Tag1 ("Parsetree", 301)); (("Psig_attribute", 682), ([(Tag3 ((("attribute", 769)), 0, (0)), 100000000, 0, -153)]), 0, (("parsing/parsetree.mli", 859, 33033, 33035), ("parsing/parsetree.mli", 859, 33033, 33064), 0), 0, Tag1 ("Parsetree", 302)); (("Psig_extension", 683), ([(Tag3 ((("extension", 770)), 0, (0)), 100000000, 0, -154); (Tag3 ((("attributes", 771)), 0, (0)), 100000000, 0, -155)]), 0, (("parsing/parsetree.mli", 860, 33086, 33088), ("parsing/parsetree.mli", 860, 33086, 33130), 0), 0, Tag1 ("Parsetree", 303))], 0), 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 834, 31823, 31823), ("parsing/parsetree.mli", 860, 33086, 33130), 0), 0, 0, 0, Tag1 ("Parsetree", 54)), 2, 0); Tag1 (("module_declaration", 818), (0, 0, [[(("pmd_name", 684), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -129)], (0)), 100000000, 0, -128)], (0)), 100000000, 0, -127), (("parsing/parsetree.mli", 864, 33180, 33185), ("parsing/parsetree.mli", 864, 33180, 33213), 0), 0, Tag1 ("Parsetree", 304)); (("pmd_type", 685), 0, (Tag3 ((("module_type", 812)), 0, (0)), 100000000, 0, -130), (("parsing/parsetree.mli", 865, 33214, 33219), ("parsing/parsetree.mli", 865, 33214, 33241), 0), 0, Tag1 ("Parsetree", 305)); (("pmd_attributes", 686), 0, (Tag3 ((("attributes", 771)), 0, (0)), 100000000, 0, -131), (("parsing/parsetree.mli", 866, 33242, 33247), ("parsing/parsetree.mli", 866, 33242, 33274), 0), 0, Tag1 ("Parsetree", 306)); (("pmd_loc", 687), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -132), (("parsing/parsetree.mli", 867, 33309, 33314), ("parsing/parsetree.mli", 867, 33309, 33334), 0), 0, Tag1 ("Parsetree", 307))]], 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 862, 33149, 33149), ("parsing/parsetree.mli", 868, 33335, 33340), 0), 0, 0, 0, Tag1 ("Parsetree", 55)), 2, 0); Tag1 (("module_substitution", 819), (0, 0, [[(("pms_name", 688), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -122)], (0)), 100000000, 0, -121), (("parsing/parsetree.mli", 873, 33437, 33442), ("parsing/parsetree.mli", 873, 33437, 33463), 0), 0, Tag1 ("Parsetree", 308)); (("pms_manifest", 689), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -124)], (0)), 100000000, 0, -123), (("parsing/parsetree.mli", 874, 33464, 33469), ("parsing/parsetree.mli", 874, 33464, 33499), 0), 0, Tag1 ("Parsetree", 309)); (("pms_attributes", 690), 0, (Tag3 ((("attributes", 771)), 0, (0)), 100000000, 0, -125), (("parsing/parsetree.mli", 875, 33500, 33505), ("parsing/parsetree.mli", 875, 33500, 33532), 0), 0, Tag1 ("Parsetree", 310)); (("pms_loc", 691), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -126), (("parsing/parsetree.mli", 876, 33567, 33572), ("parsing/parsetree.mli", 876, 33567, 33592), 0), 0, Tag1 ("Parsetree", 311))]], 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 871, 33405, 33405), ("parsing/parsetree.mli", 877, 33593, 33598), 0), 0, 0, 0, Tag1 ("Parsetree", 56)), 2, 0); Tag1 (("module_type_declaration", 820), (0, 0, [[(("pmtd_name", 692), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -116)], (0)), 100000000, 0, -115), (("parsing/parsetree.mli", 882, 33700, 33705), ("parsing/parsetree.mli", 882, 33700, 33727), 0), 0, Tag1 ("Parsetree", 312)); (("pmtd_type", 693), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("module_type", 812)), 0, (0)), 100000000, 0, -118)], (0)), 100000000, 0, -117), (("parsing/parsetree.mli", 883, 33728, 33733), ("parsing/parsetree.mli", 883, 33728, 33763), 0), 0, Tag1 ("Parsetree", 313)); (("pmtd_attributes", 694), 0, (Tag3 ((("attributes", 771)), 0, (0)), 100000000, 0, -119), (("parsing/parsetree.mli", 884, 33764, 33769), ("parsing/parsetree.mli", 884, 33764, 33797), 0), 0, Tag1 ("Parsetree", 314)); (("pmtd_loc", 695), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -120), (("parsing/parsetree.mli", 885, 33832, 33837), ("parsing/parsetree.mli", 885, 33832, 33858), 0), 0, Tag1 ("Parsetree", 315))]], 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 880, 33664, 33664), ("parsing/parsetree.mli", 886, 33859, 33864), 0), 0, 0, 0, Tag1 ("Parsetree", 57)), 2, 0); Tag1 (("open_infos", 821), ([((("a")), 100000000, 0, -111)], 1, [[(("popen_expr", 696), 0, ((("a")), 100000000, 0, -111), (("parsing/parsetree.mli", 895, 34085, 34090), ("parsing/parsetree.mli", 895, 34085, 34105), 0), 0, Tag1 ("Parsetree", 316)); (("popen_override", 697), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "override_flag"), 0, (0)), 100000000, 0, -112), (("parsing/parsetree.mli", 896, 34106, 34111), ("parsing/parsetree.mli", 896, 34106, 34141), 0), 0, Tag1 ("Parsetree", 317)); (("popen_loc", 698), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -113), (("parsing/parsetree.mli", 897, 34142, 34147), ("parsing/parsetree.mli", 897, 34142, 34169), 0), 0, Tag1 ("Parsetree", 318)); (("popen_attributes", 699), 0, (Tag3 ((("attributes", 771)), 0, (0)), 100000000, 0, -114), (("parsing/parsetree.mli", 898, 34170, 34175), ("parsing/parsetree.mli", 898, 34170, 34204), 0), 0, Tag1 ("Parsetree", 319))]], 1, 0, [25], [0], 0, 0, (("parsing/parsetree.mli", 893, 34059, 34059), ("parsing/parsetree.mli", 899, 34205, 34210), 0), 0, 0, 0, Tag1 ("Parsetree", 58)), 2, 0); Tag1 (("open_description", 822), (0, 0, 0, 1, ((Tag3 ((("open_infos", 821)), [(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -110)], (0)), 100000000, 0, -109)], (0)), 100000000, 0, -108)), 0, 0, 0, 0, (("parsing/parsetree.mli", 908, 34583, 34583), ("parsing/parsetree.mli", 908, 34583, 34632), 0), 0, 0, 0, Tag1 ("Parsetree", 59)), 2, 0); Tag1 (("open_declaration", 823), (0, 0, 0, 1, ((Tag3 ((("open_infos", 821)), [(Tag3 ((("module_expr", 828)), 0, (0)), 100000000, 0, -107)], (0)), 100000000, 0, -106)), 0, 0, 0, 0, (("parsing/parsetree.mli", 913, 34724, 34724), ("parsing/parsetree.mli", 913, 34724, 34769), 0), 0, 0, 0, Tag1 ("Parsetree", 60)), 2, 0); Tag1 (("include_infos", 824), ([((("a")), 100000000, 0, -103)], 1, [[(("pincl_mod", 700), 0, ((("a")), 100000000, 0, -103), (("parsing/parsetree.mli", 921, 34918, 34923), ("parsing/parsetree.mli", 921, 34918, 34937), 0), 0, Tag1 ("Parsetree", 320)); (("pincl_loc", 701), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -104), (("parsing/parsetree.mli", 922, 34938, 34943), ("parsing/parsetree.mli", 922, 34938, 34965), 0), 0, Tag1 ("Parsetree", 321)); (("pincl_attributes", 702), 0, (Tag3 ((("attributes", 771)), 0, (0)), 100000000, 0, -105), (("parsing/parsetree.mli", 923, 34966, 34971), ("parsing/parsetree.mli", 923, 34966, 35000), 0), 0, Tag1 ("Parsetree", 322))]], 1, 0, [25], [0], 0, 0, (("parsing/parsetree.mli", 919, 34889, 34889), ("parsing/parsetree.mli", 924, 35001, 35006), 0), 0, 0, 0, Tag1 ("Parsetree", 61)), 2, 0); Tag1 (("include_description", 825), (0, 0, 0, 1, ((Tag3 ((("include_infos", 824)), [(Tag3 ((("module_type", 812)), 0, (0)), 100000000, 0, -102)], (0)), 100000000, 0, -101)), 0, 0, 0, 0, (("parsing/parsetree.mli", 926, 35008, 35008), ("parsing/parsetree.mli", 926, 35008, 35059), 0), 0, 0, 0, Tag1 ("Parsetree", 62)), 2, 0); Tag1 (("include_declaration", 826), (0, 0, 0, 1, ((Tag3 ((("include_infos", 824)), [(Tag3 ((("module_expr", 828)), 0, (0)), 100000000, 0, -100)], (0)), 100000000, 0, -99)), 0, 0, 0, 0, (("parsing/parsetree.mli", 929, 35129, 35129), ("parsing/parsetree.mli", 929, 35129, 35180), 0), 0, 0, 0, Tag1 ("Parsetree", 63)), 2, 0); Tag1 (("with_constraint", 827), (0, 0, Tag1 ([(("Pwith_type", 703), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -80)], (0)), 100000000, 0, -79); (Tag3 ((("type_declaration", 788)), 0, (0)), 100000000, 0, -81)]), 0, (("parsing/parsetree.mli", 933, 35272, 35274), ("parsing/parsetree.mli", 933, 35272, 35324), 0), 0, Tag1 ("Parsetree", 323)); (("Pwith_module", 704), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -83)], (0)), 100000000, 0, -82); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -85)], (0)), 100000000, 0, -84)]), 0, (("parsing/parsetree.mli", 938, 35472, 35474), ("parsing/parsetree.mli", 938, 35472, 35525), 0), 0, Tag1 ("Parsetree", 324)); (("Pwith_modtype", 705), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -87)], (0)), 100000000, 0, -86); (Tag3 ((("module_type", 812)), 0, (0)), 100000000, 0, -88)]), 0, (("parsing/parsetree.mli", 940, 35561, 35563), ("parsing/parsetree.mli", 940, 35561, 35611), 0), 0, Tag1 ("Parsetree", 325)); (("Pwith_modtypesubst", 706), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -90)], (0)), 100000000, 0, -89); (Tag3 ((("module_type", 812)), 0, (0)), 100000000, 0, -91)]), 0, (("parsing/parsetree.mli", 942, 35652, 35654), ("parsing/parsetree.mli", 942, 35652, 35707), 0), 0, Tag1 ("Parsetree", 326)); (("Pwith_typesubst", 707), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -93)], (0)), 100000000, 0, -92); (Tag3 ((("type_declaration", 788)), 0, (0)), 100000000, 0, -94)]), 0, (("parsing/parsetree.mli", 944, 35755, 35757), ("parsing/parsetree.mli", 944, 35755, 35812), 0), 0, Tag1 ("Parsetree", 327)); (("Pwith_modsubst", 708), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -96)], (0)), 100000000, 0, -95); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -98)], (0)), 100000000, 0, -97)]), 0, (("parsing/parsetree.mli", 946, 35878, 35880), ("parsing/parsetree.mli", 946, 35878, 35933), 0), 0, Tag1 ("Parsetree", 328))], 0), 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 932, 35250, 35250), ("parsing/parsetree.mli", 946, 35878, 35933), 0), 0, 0, 0, Tag1 ("Parsetree", 64)), 2, 0); Tag1 (("module_expr", 828), (0, 0, [[(("pmod_desc", 709), 0, (Tag3 ((("module_expr_desc", 829)), 0, (0)), 100000000, 0, -76), (("parsing/parsetree.mli", 953, 36049, 36054), ("parsing/parsetree.mli", 953, 36049, 36082), 0), 0, Tag1 ("Parsetree", 329)); (("pmod_loc", 710), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -77), (("parsing/parsetree.mli", 954, 36083, 36088), ("parsing/parsetree.mli", 954, 36083, 36109), 0), 0, Tag1 ("Parsetree", 330)); (("pmod_attributes", 711), 0, (Tag3 ((("attributes", 771)), 0, (0)), 100000000, 0, -78), (("parsing/parsetree.mli", 955, 36110, 36115), ("parsing/parsetree.mli", 955, 36110, 36143), 0), 0, Tag1 ("Parsetree", 331))]], 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 951, 36025, 36025), ("parsing/parsetree.mli", 956, 36174, 36179), 0), 0, 0, 0, Tag1 ("Parsetree", 65)), 2, 0); Tag1 (("module_expr_desc", 829), (0, 0, Tag1 ([(("Pmod_ident", 712), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -65)], (0)), 100000000, 0, -64)]), 0, (("parsing/parsetree.mli", 959, 36204, 36206), ("parsing/parsetree.mli", 959, 36204, 36237), 0), 0, Tag1 ("Parsetree", 332)); (("Pmod_structure", 713), ([(Tag3 ((("structure", 830)), 0, (0)), 100000000, 0, -66)]), 0, (("parsing/parsetree.mli", 960, 36250, 36252), ("parsing/parsetree.mli", 960, 36250, 36281), 0), 0, Tag1 ("Parsetree", 333)); (("Pmod_functor", 714), ([(Tag3 ((("functor_parameter", 814)), 0, (0)), 100000000, 0, -67); (Tag3 ((("module_expr", 828)), 0, (0)), 100000000, 0, -68)]), 0, (("parsing/parsetree.mli", 961, 36307, 36309), ("parsing/parsetree.mli", 961, 36307, 36358), 0), 0, Tag1 ("Parsetree", 334)); (("Pmod_apply", 715), ([(Tag3 ((("module_expr", 828)), 0, (0)), 100000000, 0, -69); (Tag3 ((("module_expr", 828)), 0, (0)), 100000000, 0, -70)]), 0, (("parsing/parsetree.mli", 963, 36397, 36399), ("parsing/parsetree.mli", 963, 36397, 36440), 0), 0, Tag1 ("Parsetree", 335)); (("Pmod_apply_unit", 716), ([(Tag3 ((("module_expr", 828)), 0, (0)), 100000000, 0, -71)]), 0, (("parsing/parsetree.mli", 964, 36459, 36461), ("parsing/parsetree.mli", 964, 36459, 36493), 0), 0, Tag1 ("Parsetree", 336)); (("Pmod_constraint", 717), ([(Tag3 ((("module_expr", 828)), 0, (0)), 100000000, 0, -72); (Tag3 ((("module_type", 812)), 0, (0)), 100000000, 0, -73)]), 0, (("parsing/parsetree.mli", 965, 36509, 36511), ("parsing/parsetree.mli", 965, 36509, 36557), 0), 0, Tag1 ("Parsetree", 337)); (("Pmod_unpack", 718), ([(Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -74)]), 0, (("parsing/parsetree.mli", 966, 36578, 36580), ("parsing/parsetree.mli", 966, 36578, 36607), 0), 0, Tag1 ("Parsetree", 338)); (("Pmod_extension", 719), ([(Tag3 ((("extension", 770)), 0, (0)), 100000000, 0, -75)]), 0, (("parsing/parsetree.mli", 967, 36626, 36628), ("parsing/parsetree.mli", 967, 36626, 36657), 0), 0, Tag1 ("Parsetree", 339))], 0), 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 958, 36181, 36181), ("parsing/parsetree.mli", 967, 36626, 36657), 0), 0, 0, 0, Tag1 ("Parsetree", 66)), 2, 0); Tag1 (("structure", 830), (0, 0, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("structure_item", 831)), 0, (0)), 100000000, 0, -63)], (0)), 100000000, 0, -62)), 0, 0, 0, 0, (("parsing/parsetree.mli", 969, 36675, 36675), ("parsing/parsetree.mli", 969, 36675, 36710), 0), 0, 0, 0, Tag1 ("Parsetree", 67)), 2, 0); Tag1 (("structure_item", 831), (0, 0, [[(("pstr_desc", 720), 0, (Tag3 ((("structure_item_desc", 832)), 0, (0)), 100000000, 0, -60), (("parsing/parsetree.mli", 973, 36739, 36744), ("parsing/parsetree.mli", 973, 36739, 36775), 0), 0, Tag1 ("Parsetree", 340)); (("pstr_loc", 721), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -61), (("parsing/parsetree.mli", 974, 36776, 36781), ("parsing/parsetree.mli", 974, 36776, 36802), 0), 0, Tag1 ("Parsetree", 341))]], 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 971, 36712, 36712), ("parsing/parsetree.mli", 975, 36803, 36808), 0), 0, 0, 0, Tag1 ("Parsetree", 68)), 2, 0); Tag1 (("structure_item_desc", 832), (0, 0, Tag1 ([(("Pstr_eval", 722), ([(Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -36); (Tag3 ((("attributes", 771)), 0, (0)), 100000000, 0, -37)]), 0, (("parsing/parsetree.mli", 978, 36836, 36838), ("parsing/parsetree.mli", 978, 36836, 36876), 0), 0, Tag1 ("Parsetree", 342)); (("Pstr_value", 723), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "rec_flag"), 0, (0)), 100000000, 0, -38); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("value_binding", 834)), 0, (0)), 100000000, 0, -40)], (0)), 100000000, 0, -39)]), 0, (("parsing/parsetree.mli", 979, 36889, 36891), ("parsing/parsetree.mli", 979, 36889, 36936), 0), 0, Tag1 ("Parsetree", 343)); (("Pstr_primitive", 724), ([(Tag3 ((("value_description", 787)), 0, (0)), 100000000, 0, -41)]), 0, (("parsing/parsetree.mli", 986, 37274, 37276), ("parsing/parsetree.mli", 986, 37274, 37313), 0), 0, Tag1 ("Parsetree", 344)); (("Pstr_type", 725), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "rec_flag"), 0, (0)), 100000000, 0, -42); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("type_declaration", 788)), 0, (0)), 100000000, 0, -44)], (0)), 100000000, 0, -43)]), 0, (("parsing/parsetree.mli", 989, 37386, 37388), ("parsing/parsetree.mli", 989, 37386, 37435), 0), 0, Tag1 ("Parsetree", 345)); (("Pstr_typext", 726), ([(Tag3 ((("type_extension", 793)), 0, (0)), 100000000, 0, -45)]), 0, (("parsing/parsetree.mli", 991, 37486, 37488), ("parsing/parsetree.mli", 991, 37486, 37519), 0), 0, Tag1 ("Parsetree", 346)); (("Pstr_exception", 727), ([(Tag3 ((("type_exception", 795)), 0, (0)), 100000000, 0, -46)]), 0, (("parsing/parsetree.mli", 992, 37545, 37547), ("parsing/parsetree.mli", 992, 37545, 37581), 0), 0, Tag1 ("Parsetree", 347)); (("Pstr_module", 728), ([(Tag3 ((("module_binding", 835)), 0, (0)), 100000000, 0, -47)]), 0, (("parsing/parsetree.mli", 995, 37650, 37652), ("parsing/parsetree.mli", 995, 37650, 37683), 0), 0, Tag1 ("Parsetree", 348)); (("Pstr_recmodule", 729), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("module_binding", 835)), 0, (0)), 100000000, 0, -49)], (0)), 100000000, 0, -48)]), 0, (("parsing/parsetree.mli", 996, 37708, 37710), ("parsing/parsetree.mli", 996, 37708, 37749), 0), 0, Tag1 ("Parsetree", 349)); (("Pstr_modtype", 730), ([(Tag3 ((("module_type_declaration", 820)), 0, (0)), 100000000, 0, -50)]), 0, (("parsing/parsetree.mli", 998, 37806, 37808), ("parsing/parsetree.mli", 998, 37806, 37849), 0), 0, Tag1 ("Parsetree", 350)); (("Pstr_open", 731), ([(Tag3 ((("open_declaration", 823)), 0, (0)), 100000000, 0, -51)]), 0, (("parsing/parsetree.mli", 999, 37879, 37881), ("parsing/parsetree.mli", 999, 37879, 37912), 0), 0, Tag1 ("Parsetree", 351)); (("Pstr_class", 732), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("class_declaration", 811)), 0, (0)), 100000000, 0, -53)], (0)), 100000000, 0, -52)]), 0, (("parsing/parsetree.mli", 1000, 37930, 37932), ("parsing/parsetree.mli", 1000, 37930, 37970), 0), 0, Tag1 ("Parsetree", 352)); (("Pstr_class_type", 733), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("class_type_declaration", 804)), 0, (0)), 100000000, 0, -55)], (0)), 100000000, 0, -54)]), 0, (("parsing/parsetree.mli", 1002, 38022, 38024), ("parsing/parsetree.mli", 1002, 38022, 38072), 0), 0, Tag1 ("Parsetree", 353)); (("Pstr_include", 734), ([(Tag3 ((("include_declaration", 826)), 0, (0)), 100000000, 0, -56)]), 0, (("parsing/parsetree.mli", 1004, 38131, 38133), ("parsing/parsetree.mli", 1004, 38131, 38170), 0), 0, Tag1 ("Parsetree", 354)); (("Pstr_attribute", 735), ([(Tag3 ((("attribute", 769)), 0, (0)), 100000000, 0, -57)]), 0, (("parsing/parsetree.mli", 1005, 38192, 38194), ("parsing/parsetree.mli", 1005, 38192, 38223), 0), 0, Tag1 ("Parsetree", 355)); (("Pstr_extension", 736), ([(Tag3 ((("extension", 770)), 0, (0)), 100000000, 0, -58); (Tag3 ((("attributes", 771)), 0, (0)), 100000000, 0, -59)]), 0, (("parsing/parsetree.mli", 1006, 38245, 38247), ("parsing/parsetree.mli", 1006, 38245, 38289), 0), 0, Tag1 ("Parsetree", 356))], 0), 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 977, 36810, 36810), ("parsing/parsetree.mli", 1006, 38245, 38289), 0), 0, 0, 0, Tag1 ("Parsetree", 69)), 2, 0); Tag1 (("value_constraint", 833), (0, 0, Tag1 ([(("Pvc_constraint", 737), Tag1 ([(("locally_abstract_univars", 738), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -31)], (0)), 100000000, 0, -30)], (0)), 100000000, 0, -29), (("parsing/parsetree.mli", 1010, 38355, 38361), ("parsing/parsetree.mli", 1010, 38355, 38402), 0), 0, Tag1 ("Parsetree", 357)); (("typ", 739), 0, (Tag3 ((("core_type", 773)), 0, (0)), 100000000, 0, -32), (("parsing/parsetree.mli", 1011, 38403, 38409), ("parsing/parsetree.mli", 1011, 38403, 38423), 0), 0, Tag1 ("Parsetree", 358))]), 0, (("parsing/parsetree.mli", 1009, 38331, 38333), ("parsing/parsetree.mli", 1012, 38424, 38429), 0), 0, Tag1 ("Parsetree", 359)); (("Pvc_coercion", 740), Tag1 ([(("ground", 741), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("core_type", 773)), 0, (0)), 100000000, 0, -34)], (0)), 100000000, 0, -33), (("parsing/parsetree.mli", 1013, 38430, 38451), ("parsing/parsetree.mli", 1013, 38430, 38475), 0), 0, Tag1 ("Parsetree", 360)); (("coercion", 742), 0, (Tag3 ((("core_type", 773)), 0, (0)), 100000000, 0, -35), (("parsing/parsetree.mli", 1013, 38430, 38476), ("parsing/parsetree.mli", 1013, 38430, 38494), 0), 0, Tag1 ("Parsetree", 361))]), 0, (("parsing/parsetree.mli", 1013, 38430, 38432), ("parsing/parsetree.mli", 1013, 38430, 38496), 0), 0, Tag1 ("Parsetree", 362))], 0), 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 1008, 38308, 38308), ("parsing/parsetree.mli", 1013, 38430, 38496), 0), 0, 0, 0, Tag1 ("Parsetree", 70)), 2, 0); Tag1 (("value_binding", 834), (0, 0, [[(("pvb_pat", 743), 0, (Tag3 ((("pattern", 780)), 0, (0)), 100000000, 0, -23), (("parsing/parsetree.mli", 1026, 39014, 39018), ("parsing/parsetree.mli", 1026, 39014, 39035), 0), 0, Tag1 ("Parsetree", 363)); (("pvb_expr", 744), 0, (Tag3 ((("expression", 782)), 0, (0)), 100000000, 0, -24), (("parsing/parsetree.mli", 1027, 39036, 39040), ("parsing/parsetree.mli", 1027, 39036, 39061), 0), 0, Tag1 ("Parsetree", 364)); (("pvb_constraint", 745), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("value_constraint", 833)), 0, (0)), 100000000, 0, -26)], (0)), 100000000, 0, -25), (("parsing/parsetree.mli", 1028, 39062, 39066), ("parsing/parsetree.mli", 1028, 39062, 39106), 0), 0, Tag1 ("Parsetree", 365)); (("pvb_attributes", 746), 0, (Tag3 ((("attributes", 771)), 0, (0)), 100000000, 0, -27), (("parsing/parsetree.mli", 1029, 39107, 39111), ("parsing/parsetree.mli", 1029, 39107, 39138), 0), 0, Tag1 ("Parsetree", 366)); (("pvb_loc", 747), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -28), (("parsing/parsetree.mli", 1030, 39139, 39143), ("parsing/parsetree.mli", 1030, 39139, 39163), 0), 0, Tag1 ("Parsetree", 367))]], 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 1024, 38990, 38990), ("parsing/parsetree.mli", 1031, 39164, 39167), 0), 0, 0, 0, Tag1 ("Parsetree", 71)), 2, 0); Tag1 (("module_binding", 835), (0, 0, [[(("pmb_name", 748), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -19)], (0)), 100000000, 0, -18)], (0)), 100000000, 0, -17), (("parsing/parsetree.mli", 1035, 39236, 39241), ("parsing/parsetree.mli", 1035, 39236, 39269), 0), 0, Tag1 ("Parsetree", 368)); (("pmb_expr", 749), 0, (Tag3 ((("module_expr", 828)), 0, (0)), 100000000, 0, -20), (("parsing/parsetree.mli", 1036, 39270, 39275), ("parsing/parsetree.mli", 1036, 39270, 39297), 0), 0, Tag1 ("Parsetree", 369)); (("pmb_attributes", 750), 0, (Tag3 ((("attributes", 771)), 0, (0)), 100000000, 0, -21), (("parsing/parsetree.mli", 1037, 39298, 39303), ("parsing/parsetree.mli", 1037, 39298, 39330), 0), 0, Tag1 ("Parsetree", 370)); (("pmb_loc", 751), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -22), (("parsing/parsetree.mli", 1038, 39331, 39336), ("parsing/parsetree.mli", 1038, 39331, 39356), 0), 0, Tag1 ("Parsetree", 371))]], 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 1033, 39209, 39209), ("parsing/parsetree.mli", 1039, 39357, 39362), 0), 0, 0, 0, Tag1 ("Parsetree", 72)), 2, 0); Tag1 (("toplevel_phrase", 836), (0, 0, Tag1 ([(("Ptop_def", 756), ([(Tag3 ((("structure", 830)), 0, (0)), 100000000, 0, -15)]), 0, (("parsing/parsetree.mli", 1047, 39503, 39505), ("parsing/parsetree.mli", 1047, 39503, 39528), 0), 0, Tag1 ("Parsetree", 388)); (("Ptop_dir", 757), ([(Tag3 ((("toplevel_directive", 837)), 0, (0)), 100000000, 0, -16)]), 0, (("parsing/parsetree.mli", 1048, 39529, 39531), ("parsing/parsetree.mli", 1048, 39529, 39563), 0), 0, Tag1 ("Parsetree", 389))], 0), 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 1046, 39480, 39480), ("parsing/parsetree.mli", 1048, 39529, 39563), 0), 0, 0, 0, Tag1 ("Parsetree", 384)), 1, 0); Tag1 (("toplevel_directive", 837), (0, 0, [[(("pdir_name", 758), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -11)], (0)), 100000000, 0, -10), (("parsing/parsetree.mli", 1052, 39622, 39626), ("parsing/parsetree.mli", 1052, 39622, 39648), 0), 0, Tag1 ("Parsetree", 390)); (("pdir_arg", 759), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("directive_argument", 838)), 0, (0)), 100000000, 0, -13)], (0)), 100000000, 0, -12), (("parsing/parsetree.mli", 1053, 39649, 39653), ("parsing/parsetree.mli", 1053, 39649, 39689), 0), 0, Tag1 ("Parsetree", 391)); (("pdir_loc", 760), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -14), (("parsing/parsetree.mli", 1054, 39690, 39694), ("parsing/parsetree.mli", 1054, 39690, 39715), 0), 0, Tag1 ("Parsetree", 392))]], 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 1050, 39593, 39593), ("parsing/parsetree.mli", 1055, 39716, 39719), 0), 0, 0, 0, Tag1 ("Parsetree", 385)), 2, 0); Tag1 (("directive_argument", 838), (0, 0, [[(("pdira_desc", 761), 0, (Tag3 ((("directive_argument_desc", 839)), 0, (0)), 100000000, 0, -8), (("parsing/parsetree.mli", 1059, 39750, 39754), ("parsing/parsetree.mli", 1059, 39750, 39790), 0), 0, Tag1 ("Parsetree", 393)); (("pdira_loc", 762), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -9), (("parsing/parsetree.mli", 1060, 39791, 39795), ("parsing/parsetree.mli", 1060, 39791, 39817), 0), 0, Tag1 ("Parsetree", 394))]], 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 1057, 39721, 39721), ("parsing/parsetree.mli", 1061, 39818, 39821), 0), 0, 0, 0, Tag1 ("Parsetree", 386)), 2, 0); Tag1 (("directive_argument_desc", 839), (0, 0, Tag1 ([(("Pdir_string", 763), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2)]), 0, (("parsing/parsetree.mli", 1064, 39853, 39855), ("parsing/parsetree.mli", 1064, 39853, 39878), 0), 0, Tag1 ("Parsetree", 395)); (("Pdir_int", 764), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -5)], (0)), 100000000, 0, -4)]), 0, (("parsing/parsetree.mli", 1065, 39879, 39881), ("parsing/parsetree.mli", 1065, 39879, 39915), 0), 0, Tag1 ("Parsetree", 396)); (("Pdir_ident", 765), ([(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -6)]), 0, (("parsing/parsetree.mli", 1066, 39916, 39918), ("parsing/parsetree.mli", 1066, 39916, 39945), 0), 0, Tag1 ("Parsetree", 397)); (("Pdir_bool", 766), ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -7)]), 0, (("parsing/parsetree.mli", 1067, 39946, 39948), ("parsing/parsetree.mli", 1067, 39946, 39967), 0), 0, Tag1 ("Parsetree", 398))], 0), 1, 0, 0, 0, 0, 0, (("parsing/parsetree.mli", 1063, 39823, 39823), ("parsing/parsetree.mli", 1067, 39946, 39967), 0), 0, 0, 0, Tag1 ("Parsetree", 387)), 2, 0)], "Parsetree", [("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216"))], [(0)])

  | Pdir_bool of bool

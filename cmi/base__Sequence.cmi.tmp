type +'a t
val sexp_of_t : ('a -> Sexplib0.Sexp.t) -> 'a t -> Sexplib0.Sexp.t
val equal :
  'a Base__Ppx_compare_lib.equal -> 'a t Base__Ppx_compare_lib.equal
val compare :
  'a Base__Ppx_compare_lib.compare -> 'a t Base__Ppx_compare_lib.compare
val mem : 'a t -> 'a -> equal:('a -> 'a -> bool) -> bool
val length : 'a t -> int
val is_empty : 'a t -> bool
val iter : 'a t -> f:('a -> unit) -> unit
val fold : 'a t -> init:'acc -> f:('acc -> 'a -> 'acc) -> 'acc
val fold_result :
  'a t ->
  init:'acc ->
  f:('acc -> 'a -> ('acc, 'e) Base__.Result.t) -> ('acc, 'e) Base__.Result.t
val fold_until :
  'a t ->
  init:'acc ->
  f:('acc -> 'a -> ('acc, 'final) Base__Container_intf.Continue_or_stop.t) ->
  finish:('acc -> 'final) -> 'final
val exists : 'a t -> f:('a -> bool) -> bool
val for_all : 'a t -> f:('a -> bool) -> bool
val count : 'a t -> f:('a -> bool) -> int
val sum :
  (module Base__Container_intf.Summable with type t = 'sum) ->
  'a t -> f:('a -> 'sum) -> 'sum
val find : 'a t -> f:('a -> bool) -> 'a option
val find_map : 'a t -> f:('a -> 'b option) -> 'b option
val to_list : 'a t -> 'a list
val to_array : 'a t -> 'a array
val min_elt : 'a t -> compare:('a -> 'a -> int) -> 'a option
val max_elt : 'a t -> compare:('a -> 'a -> int) -> 'a option
val foldi : ('a t, 'a, 'b) Base__Indexed_container_intf.foldi
val iteri : ('a t, 'a) Base__Indexed_container_intf.iteri
val existsi : 'a t -> f:(int -> 'a -> bool) -> bool
val counti : 'a t -> f:(int -> 'a -> bool) -> int
val findi : 'a t -> f:(int -> 'a -> bool) -> (int * 'a) option
val find_mapi : 'a t -> f:(int -> 'a -> 'b option) -> 'b option
val ( >>= ) : 'a t -> ('a -> 'b t) -> 'b t
val ( >>| ) : 'a t -> ('a -> 'b) -> 'b t
module Monad_infix :
  sig
    val ( >>= ) : 'a t -> ('a -> 'b t) -> 'b t
    val ( >>| ) : 'a t -> ('a -> 'b) -> 'b t
  end
val bind : 'a t -> f:('a -> 'b t) -> 'b t
val return : 'a -> 'a t
val map : 'a t -> f:('a -> 'b) -> 'b t
val join : 'a t t -> 'a t
val ignore_m : 'a t -> unit t
val all : 'a t list -> 'a list t
val all_unit : unit t list -> unit t
module Let_syntax :
  sig
    val return : 'a -> 'a t
    val ( >>= ) : 'a t -> ('a -> 'b t) -> 'b t
    val ( >>| ) : 'a t -> ('a -> 'b) -> 'b t
    module Let_syntax :
      sig
        val return : 'a -> 'a t
        val bind : 'a t -> f:('a -> 'b t) -> 'b t
        val map : 'a t -> f:('a -> 'b) -> 'b t
        val both : 'a t -> 'b t -> ('a * 'b) t
        module Open_on_rhs : sig end
      end
  end
val empty : 'a t
val next : 'a t -> ('a * 'a t) option
module Step :
  sig
    type ('a, 's) t =
        Done
      | Skip of { state : 's; }
      | Yield of { value : 'a; state : 's; }
    val sexp_of_t :
      ('a -> Sexplib0.Sexp.t) ->
      ('s -> Sexplib0.Sexp.t) -> ('a, 's) t -> Sexplib0.Sexp.t
  end
val unfold_step : init:'s -> f:('s -> ('a, 's) Step.t) -> 'a t
val unfold : init:'s -> f:('s -> ('a * 's) option) -> 'a t
val unfold_with : 'a t -> init:'s -> f:('s -> 'a -> ('b, 's) Step.t) -> 'b t
val unfold_with_and_finish :
  'a t ->
  init:'s_a ->
  running_step:('s_a -> 'a -> ('b, 's_a) Step.t) ->
  inner_finished:('s_a -> 's_b) ->
  finishing_step:('s_b -> ('b, 's_b) Step.t) -> 'b t
val nth : 'a t -> int -> 'a option
val nth_exn : 'a t -> int -> 'a
val folding_map : 'a t -> init:'acc -> f:('acc -> 'a -> 'acc * 'b) -> 'b t
val folding_mapi :
  'a t -> init:'acc -> f:(int -> 'acc -> 'a -> 'acc * 'b) -> 'b t
val mapi : 'a t -> f:(int -> 'a -> 'b) -> 'b t
val filteri : 'a t -> f:(int -> 'a -> bool) -> 'a t
val filter : 'a t -> f:('a -> bool) -> 'a t
val merge_deduped_and_sorted :
  'a t -> 'a t -> compare:('a -> 'a -> int) -> 'a t
val merge : 'a t -> 'a t -> compare:('a -> 'a -> int) -> 'a t
val merge_sorted : 'a t -> 'a t -> compare:('a -> 'a -> int) -> 'a t
module Merge_with_duplicates_element :
  sig
    type ('a, 'b) t = Left of 'a | Right of 'b | Both of 'a * 'b
    val compare :
      'a Base__Ppx_compare_lib.compare ->
      'b Base__Ppx_compare_lib.compare ->
      ('a, 'b) t Base__Ppx_compare_lib.compare
    val hash_fold_t :
      'a Base__Ppx_hash_lib.hash_fold ->
      'b Base__Ppx_hash_lib.hash_fold ->
      ('a, 'b) t Base__Ppx_hash_lib.hash_fold
    val t_of_sexp :
      (Sexplib0__.Sexp.t -> 'a) ->
      (Sexplib0__.Sexp.t -> 'b) -> Sexplib0__.Sexp.t -> ('a, 'b) t
    val sexp_of_t :
      ('a -> Sexplib0__.Sexp.t) ->
      ('b -> Sexplib0__.Sexp.t) -> ('a, 'b) t -> Sexplib0__.Sexp.t
    val t_sexp_grammar :
      'a Sexplib0.Sexp_grammar.t ->
      'b Sexplib0.Sexp_grammar.t -> ('a, 'b) t Sexplib0.Sexp_grammar.t
  end
val merge_with_duplicates :
  'a t ->
  'b t ->
  compare:('a -> 'b -> int) -> ('a, 'b) Merge_with_duplicates_element.t t
val hd : 'a t -> 'a option
val hd_exn : 'a t -> 'a
val tl : 'a t -> 'a t option
val tl_eagerly_exn : 'a t -> 'a t
val find_exn : 'a t -> f:('a -> bool) -> 'a
val for_alli : 'a t -> f:(int -> 'a -> bool) -> bool
val append : 'a t -> 'a t -> 'a t
val concat : 'a t t -> 'a t
val concat_map : 'a t -> f:('a -> 'b t) -> 'b t
val concat_mapi : 'a t -> f:(int -> 'a -> 'b t) -> 'b t
val interleave : 'a t t -> 'a t
val round_robin : 'a t list -> 'a t
val zip : 'a t -> 'b t -> ('a * 'b) t
val zip_full :
  'a t -> 'b t -> [ `Both of 'a * 'b | `Left of 'a | `Right of 'b ] t
val reduce_exn : 'a t -> f:('a -> 'a -> 'a) -> 'a
val reduce : 'a t -> f:('a -> 'a -> 'a) -> 'a option
val group : 'a t -> break:('a -> 'a -> bool) -> 'a list t
val find_consecutive_duplicate :
  'a t -> equal:('a -> 'a -> bool) -> ('a * 'a) option
val remove_consecutive_duplicates : 'a t -> equal:('a -> 'a -> bool) -> 'a t
val range :
  ?stride:int ->
  ?start:[ `exclusive | `inclusive ] ->
  ?stop:[ `exclusive | `inclusive ] -> int -> int -> int t
val init : int -> f:(int -> 'a) -> 'a t
val filter_map : 'a t -> f:('a -> 'b option) -> 'b t
val filter_mapi : 'a t -> f:(int -> 'a -> 'b option) -> 'b t
val filter_opt : 'a option t -> 'a t
val sub : 'a t -> pos:int -> len:int -> 'a t
val take : 'a t -> int -> 'a t
val drop : 'a t -> int -> 'a t
val drop_eagerly : 'a t -> int -> 'a t
val take_while : 'a t -> f:('a -> bool) -> 'a t
val drop_while : 'a t -> f:('a -> bool) -> 'a t
val drop_while_option : 'a t -> f:('a -> bool) -> ('a * 'a t) option
val split_n : 'a t -> int -> 'a list * 'a t
val chunks_exn : 'a t -> int -> 'a list t
val shift_right : 'a t -> 'a -> 'a t
val shift_right_with_list : 'a t -> 'a list -> 'a t
val shift_left : 'a t -> int -> 'a t
module Infix : sig val ( @ ) : 'a t -> 'a t -> 'a t end
val cartesian_product : 'a t -> 'b t -> ('a * 'b) t
val interleaved_cartesian_product : 'a t -> 'b t -> ('a * 'b) t
val intersperse : 'a t -> sep:'a -> 'a t
val cycle_list_exn : 'a list -> 'a t
val repeat : 'a -> 'a t
val singleton : 'a -> 'a t
val delayed_fold :
  'a t ->
  init:'s -> f:('s -> 'a -> k:('s -> 'r) -> 'r) -> finish:('s -> 'r) -> 'r
val fold_m :
  bind:('acc_m -> f:('acc -> 'acc_m) -> 'acc_m) ->
  return:('acc -> 'acc_m) ->
  'elt t -> init:'acc -> f:('acc -> 'elt -> 'acc_m) -> 'acc_m
val iter_m :
  bind:('unit_m -> f:(unit -> 'unit_m) -> 'unit_m) ->
  return:(unit -> 'unit_m) -> 'elt t -> f:('elt -> 'unit_m) -> 'unit_m
val to_list_rev : 'a t -> 'a list
val of_list : 'a list -> 'a t
val of_lazy : 'a t Base__.Lazy.t -> 'a t
val memoize : 'a t -> 'a t
val force_eagerly : 'a t -> 'a t
val bounded_length : 'a t -> at_most:int -> [ `Greater | `Is of int ]
val length_is_bounded_by : ?min:int -> ?max:int -> 'a t -> bool
val of_seq : 'a Base__.Import.Stdlib.Seq.t -> 'a t
val to_seq : 'a t -> 'a Base__.Import.Stdlib.Seq.t
module Generator :
  sig
    type ('a, 'e) t
    val ( >>= ) : ('a, 'e) t -> ('a -> ('b, 'e) t) -> ('b, 'e) t
    val ( >>| ) : ('a, 'e) t -> ('a -> 'b) -> ('b, 'e) t
    module Let_syntax :
      sig
        val return : 'a -> ('a, 'b) t
        val ( >>= ) : ('a, 'e) t -> ('a -> ('b, 'e) t) -> ('b, 'e) t
        val ( >>| ) : ('a, 'e) t -> ('a -> 'b) -> ('b, 'e) t
        module Let_syntax :
          sig
            val return : 'a -> ('a, 'b) t
            val bind : ('a, 'e) t -> f:('a -> ('b, 'e) t) -> ('b, 'e) t
            val map : ('a, 'e) t -> f:('a -> 'b) -> ('b, 'e) t
            val both : ('a, 'e) t -> ('b, 'e) t -> ('a * 'b, 'e) t
            module Open_on_rhs : sig end
          end
      end
    module Monad_infix :
      sig
        val ( >>= ) : ('a, 'e) t -> ('a -> ('b, 'e) t) -> ('b, 'e) t
        val ( >>| ) : ('a, 'e) t -> ('a -> 'b) -> ('b, 'e) t
      end
    val bind : ('a, 'e) t -> f:('a -> ('b, 'e) t) -> ('b, 'e) t
    val return : 'a -> ('a, 'b) t
    val map : ('a, 'e) t -> f:('a -> 'b) -> ('b, 'e) t
    val join : (('a, 'e) t, 'e) t -> ('a, 'e) t
    val ignore_m : ('a, 'e) t -> (unit, 'e) t
    val all : ('a, 'e) t list -> ('a list, 'e) t
    val all_unit : (unit, 'e) t list -> (unit, 'e) t
    val yield : 'elt -> (unit, 'elt) t
    val of_sequence : 'elt t/2 -> (unit, 'elt) t
    val run : (unit, 'elt) t -> 'elt t/2
  end
module Expert :
  sig
    val next_step : 'a t -> ('a, 'a t) Step.t
    val delayed_fold_step :
      'a t ->
      init:'s ->
      f:('s -> 'a option -> k:('s -> 'r) -> 'r) -> finish:('s -> 'r) -> 'r
  end("DEBUG:rule", [Tag1 (("t", 2318), ([((("a")), 100000000, 0, -771)], 1, 0, 1, 0, [1], [2], 0, 0, (("src/sequence.mli", 34, 1801, 1801), ("src/sequence.mli", 34, 1801, 1839), 0), [(("deriving_inline", (("src/sequence.mli", 34, 1801, 1815), ("src/sequence.mli", 34, 1801, 1830), 0)), ([([(((("sexp_of"), (("src/sequence.mli", 34, 1801, 1831), ("src/sequence.mli", 34, 1801, 1838), 0))), (("src/sequence.mli", 34, 1801, 1831), ("src/sequence.mli", 34, 1801, 1838), 0), 0, 0)], (("src/sequence.mli", 34, 1801, 1831), ("src/sequence.mli", 34, 1801, 1838), 0))]), (("src/sequence.mli", 34, 1801, 1812), ("src/sequence.mli", 34, 1801, 1839), 0))], 0, 0, Tag1 ("Base__Sequence", 0)), 1, 0); (("sexp_of_t", 2319), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -768), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -770), 0), 100000000, 0, -769), (Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -768)], (0)), 100000000, 0, -767), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -766), 0), 100000000, 0, -765), 0), 100000000, 0, -764), 0, (("src/sequence.mli", 36, 1841, 1841), ("src/sequence.mli", 36, 1841, 1907), 0), 0, Tag1 ("Base__Sequence", 1)), 0); (("equal", 2320), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "equal"), [((("a")), 100000000, 0, -762)], (0)), 100000000, 0, -763), (Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "equal"), [(Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -762)], (0)), 100000000, 0, -761)], (0)), 100000000, 0, -760), 0), 100000000, 0, -759), 0, (("src/sequence.mli", 42, 1945, 1953), ("src/sequence.mli", 42, 1945, 2000), 0), 0, Tag1 ("Base__Ppx_compare_lib", 21)), 0); (("compare", 2321), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "compare"), [((("a")), 100000000, 0, -757)], (0)), 100000000, 0, -758), (Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "compare"), [(Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -757)], (0)), 100000000, 0, -756)], (0)), 100000000, 0, -755), 0), 100000000, 0, -754), 0, (("src/sequence.mli", 43, 2001, 2009), ("src/sequence.mli", 43, 2001, 2061), 0), 0, Tag1 ("Base__Ppx_compare_lib", 8)), 0); (("mem", 2322), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -752)], (0)), 100000000, 0, -753), (Tag1 (0, ((("a")), 100000000, 0, -752), (Tag1 (("equal"), (Tag1 (0, ((("a")), 100000000, 0, -752), (Tag1 (0, ((("a")), 100000000, 0, -752), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -751), 0), 100000000, 0, -750), 0), 100000000, 0, -749), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -748), 0), 100000000, 0, -747), 0), 100000000, 0, -746), 0), 100000000, 0, -745), 0, (("src/sequence.mli", 44, 2062, 2070), ("src/sequence.mli", 44, 2062, 2113), 0), 0, Tag1 ("Base__Container_intf", 52)), 0); (("length", 2323), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -744)], (0)), 100000000, 0, -743), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -742), 0), 100000000, 0, -741), 0, (("src/sequence.mli", 44, 2062, 2070), ("src/sequence.mli", 44, 2062, 2113), 0), 0, Tag1 ("Base__Container_intf", 53)), 0); (("is_empty", 2324), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -740)], (0)), 100000000, 0, -739), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -738), 0), 100000000, 0, -737), 0, (("src/sequence.mli", 44, 2062, 2070), ("src/sequence.mli", 44, 2062, 2113), 0), 0, Tag1 ("Base__Container_intf", 54)), 0); (("iter", 2325), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -735)], (0)), 100000000, 0, -736), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -735), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -734), 0), 100000000, 0, -733), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -732), 0), 100000000, 0, -731), 0), 100000000, 0, -730), 0, (("src/sequence.mli", 44, 2062, 2070), ("src/sequence.mli", 44, 2062, 2113), 0), 0, Tag1 ("Base__Container_intf", 55)), 0); (("fold", 2326), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -728)], (0)), 100000000, 0, -729), (Tag1 (("init"), ((("acc")), 100000000, 0, -725), (Tag1 (("f"), (Tag1 (0, ((("acc")), 100000000, 0, -725), (Tag1 (0, ((("a")), 100000000, 0, -728), ((("acc")), 100000000, 0, -725), 0), 100000000, 0, -727), 0), 100000000, 0, -726), ((("acc")), 100000000, 0, -725), 0), 100000000, 0, -724), 0), 100000000, 0, -723), 0), 100000000, 0, -722), 0, (("src/sequence.mli", 44, 2062, 2070), ("src/sequence.mli", 44, 2062, 2113), 0), 0, Tag1 ("Base__Container_intf", 56)), 0); (("fold_result", 2327), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -720)], (0)), 100000000, 0, -721), (Tag1 (("init"), ((("acc")), 100000000, 0, -715), (Tag1 (("f"), (Tag1 (0, ((("acc")), 100000000, 0, -715), (Tag1 (0, ((("a")), 100000000, 0, -720), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Result"), "t"), [((("acc")), 100000000, 0, -715); ((("e")), 100000000, 0, -716)], (0)), 100000000, 0, -719), 0), 100000000, 0, -718), 0), 100000000, 0, -717), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Result"), "t"), [((("acc")), 100000000, 0, -715); ((("e")), 100000000, 0, -716)], (0)), 100000000, 0, -714), 0), 100000000, 0, -713), 0), 100000000, 0, -712), 0), 100000000, 0, -711), 0, (("src/sequence.mli", 44, 2062, 2070), ("src/sequence.mli", 44, 2062, 2113), 0), 0, Tag1 ("Base__Container_intf", 57)), 0); (("fold_until", 2328), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -709)], (0)), 100000000, 0, -710), (Tag1 (("init"), ((("acc")), 100000000, 0, -705), (Tag1 (("f"), (Tag1 (0, ((("acc")), 100000000, 0, -705), (Tag1 (0, ((("a")), 100000000, 0, -709), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Container_intf")), "Continue_or_stop"), "t"), [((("acc")), 100000000, 0, -705); ((("final")), 100000000, 0, -703)], (0)), 100000000, 0, -708), 0), 100000000, 0, -707), 0), 100000000, 0, -706), (Tag1 (("finish"), (Tag1 (0, ((("acc")), 100000000, 0, -705), ((("final")), 100000000, 0, -703), 0), 100000000, 0, -704), ((("final")), 100000000, 0, -703), 0), 100000000, 0, -702), 0), 100000000, 0, -701), 0), 100000000, 0, -700), 0), 100000000, 0, -699), 0, (("src/sequence.mli", 44, 2062, 2070), ("src/sequence.mli", 44, 2062, 2113), 0), 0, Tag1 ("Base__Container_intf", 58)), 0); (("exists", 2329), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -697)], (0)), 100000000, 0, -698), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -697), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -696), 0), 100000000, 0, -695), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -694), 0), 100000000, 0, -693), 0), 100000000, 0, -692), 0, (("src/sequence.mli", 44, 2062, 2070), ("src/sequence.mli", 44, 2062, 2113), 0), 0, Tag1 ("Base__Container_intf", 59)), 0); (("for_all", 2330), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -690)], (0)), 100000000, 0, -691), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -690), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -689), 0), 100000000, 0, -688), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -687), 0), 100000000, 0, -686), 0), 100000000, 0, -685), 0, (("src/sequence.mli", 44, 2062, 2070), ("src/sequence.mli", 44, 2062, 2113), 0), 0, Tag1 ("Base__Container_intf", 60)), 0); (("count", 2331), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -683)], (0)), 100000000, 0, -684), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -683), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -682), 0), 100000000, 0, -681), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -680), 0), 100000000, 0, -679), 0), 100000000, 0, -678), 0, (("src/sequence.mli", 44, 2062, 2070), ("src/sequence.mli", 44, 2062, 2113), 0), 0, Tag1 ("Base__Container_intf", 61)), 0); (("sum", 2332), ((Tag1 (0, (Tag11 (Tag1 ((Tag2 ("Base__Container_intf")), "Summable"), [(("t"), ((("sum")), 100000000, 0, -673))]), 100000000, 0, -677), (Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -675)], (0)), 100000000, 0, -676), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -675), ((("sum")), 100000000, 0, -673), 0), 100000000, 0, -674), ((("sum")), 100000000, 0, -673), 0), 100000000, 0, -672), 0), 100000000, 0, -671), 0), 100000000, 0, -670), 0, (("src/sequence.mli", 44, 2062, 2070), ("src/sequence.mli", 44, 2062, 2113), 0), 0, Tag1 ("Base__Container_intf", 63)), 0); (("find", 2333), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -666)], (0)), 100000000, 0, -669), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -666), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -668), 0), 100000000, 0, -667), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -666)], (0)), 100000000, 0, -665), 0), 100000000, 0, -664), 0), 100000000, 0, -663), 0, (("src/sequence.mli", 44, 2062, 2070), ("src/sequence.mli", 44, 2062, 2113), 0), 0, Tag1 ("Base__Container_intf", 64)), 0); (("find_map", 2334), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -661)], (0)), 100000000, 0, -662), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -661), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -658)], (0)), 100000000, 0, -660), 0), 100000000, 0, -659), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -658)], (0)), 100000000, 0, -657), 0), 100000000, 0, -656), 0), 100000000, 0, -655), 0, (("src/sequence.mli", 44, 2062, 2070), ("src/sequence.mli", 44, 2062, 2113), 0), 0, Tag1 ("Base__Container_intf", 65)), 0); (("to_list", 2335), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -653)], (0)), 100000000, 0, -654), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -653)], (0)), 100000000, 0, -652), 0), 100000000, 0, -651), 0, (("src/sequence.mli", 44, 2062, 2070), ("src/sequence.mli", 44, 2062, 2113), 0), 0, Tag1 ("Base__Container_intf", 66)), 0); (("to_array", 2336), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -649)], (0)), 100000000, 0, -650), (Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -649)], (0)), 100000000, 0, -648), 0), 100000000, 0, -647), 0, (("src/sequence.mli", 44, 2062, 2070), ("src/sequence.mli", 44, 2062, 2113), 0), 0, Tag1 ("Base__Container_intf", 67)), 0); (("min_elt", 2337), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -642)], (0)), 100000000, 0, -646), (Tag1 (("compare"), (Tag1 (0, ((("a")), 100000000, 0, -642), (Tag1 (0, ((("a")), 100000000, 0, -642), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -645), 0), 100000000, 0, -644), 0), 100000000, 0, -643), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -642)], (0)), 100000000, 0, -641), 0), 100000000, 0, -640), 0), 100000000, 0, -639), 0, (("src/sequence.mli", 44, 2062, 2070), ("src/sequence.mli", 44, 2062, 2113), 0), 0, Tag1 ("Base__Container_intf", 68)), 0); (("max_elt", 2338), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -634)], (0)), 100000000, 0, -638), (Tag1 (("compare"), (Tag1 (0, ((("a")), 100000000, 0, -634), (Tag1 (0, ((("a")), 100000000, 0, -634), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -637), 0), 100000000, 0, -636), 0), 100000000, 0, -635), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -634)], (0)), 100000000, 0, -633), 0), 100000000, 0, -632), 0), 100000000, 0, -631), 0, (("src/sequence.mli", 44, 2062, 2070), ("src/sequence.mli", 44, 2062, 2113), 0), 0, Tag1 ("Base__Container_intf", 69)), 0); (("foldi", 2339), ((Tag3 (Tag1 ((Tag2 ("Base__Indexed_container_intf")), "foldi"), [(Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -629)], (0)), 100000000, 0, -628); ((("a")), 100000000, 0, -629); ((0), 100000000, 0, -630)], (0)), 100000000, 0, -627), 0, (("src/sequence.mli", 44, 2062, 2070), ("src/sequence.mli", 44, 2062, 2113), 0), 0, Tag1 ("Base__Indexed_container_intf", 11)), 0); (("iteri", 2340), ((Tag3 (Tag1 ((Tag2 ("Base__Indexed_container_intf")), "iteri"), [(Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -626)], (0)), 100000000, 0, -625); ((("a")), 100000000, 0, -626)], (0)), 100000000, 0, -624), 0, (("src/sequence.mli", 44, 2062, 2070), ("src/sequence.mli", 44, 2062, 2113), 0), 0, Tag1 ("Base__Indexed_container_intf", 12)), 0); (("existsi", 2341), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -621)], (0)), 100000000, 0, -623), (Tag1 (("f"), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -622), (Tag1 (0, ((("a")), 100000000, 0, -621), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -620), 0), 100000000, 0, -619), 0), 100000000, 0, -618), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -617), 0), 100000000, 0, -616), 0), 100000000, 0, -615), 0, (("src/sequence.mli", 44, 2062, 2070), ("src/sequence.mli", 44, 2062, 2113), 0), 0, Tag1 ("Base__Indexed_container_intf", 13)), 0); (("counti", 2342), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -612)], (0)), 100000000, 0, -614), (Tag1 (("f"), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -613), (Tag1 (0, ((("a")), 100000000, 0, -612), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -611), 0), 100000000, 0, -610), 0), 100000000, 0, -609), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -608), 0), 100000000, 0, -607), 0), 100000000, 0, -606), 0, (("src/sequence.mli", 44, 2062, 2070), ("src/sequence.mli", 44, 2062, 2113), 0), 0, Tag1 ("Base__Indexed_container_intf", 15)), 0); (("findi", 2343), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -600)], (0)), 100000000, 0, -605), (Tag1 (("f"), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -604), (Tag1 (0, ((("a")), 100000000, 0, -600), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -603), 0), 100000000, 0, -602), 0), 100000000, 0, -601), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -599); ((("a")), 100000000, 0, -600)]), 100000000, 0, -598)], (0)), 100000000, 0, -597), 0), 100000000, 0, -596), 0), 100000000, 0, -595), 0, (("src/sequence.mli", 44, 2062, 2070), ("src/sequence.mli", 44, 2062, 2113), 0), 0, Tag1 ("Base__Indexed_container_intf", 16)), 0); (("find_mapi", 2344), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -592)], (0)), 100000000, 0, -594), (Tag1 (("f"), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -593), (Tag1 (0, ((("a")), 100000000, 0, -592), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -588)], (0)), 100000000, 0, -591), 0), 100000000, 0, -590), 0), 100000000, 0, -589), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -588)], (0)), 100000000, 0, -587), 0), 100000000, 0, -586), 0), 100000000, 0, -585), 0, (("src/sequence.mli", 44, 2062, 2070), ("src/sequence.mli", 44, 2062, 2113), 0), 0, Tag1 ("Base__Indexed_container_intf", 17)), 0); ((">>=", 2345), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -583)], (0)), 100000000, 0, -584), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -583), (Tag3 ((("t", 2318)), [((("b")), 100000000, 0, -580)], (0)), 100000000, 0, -582), 0), 100000000, 0, -581), (Tag3 ((("t", 2318)), [((("b")), 100000000, 0, -580)], (0)), 100000000, 0, -579), 0), 100000000, 0, -578), 0), 100000000, 0, -577), 0, (("src/sequence.mli", 45, 2114, 2122), ("src/sequence.mli", 45, 2114, 2152), 0), 0, Tag1 ("Base__Monad_intf", 12)), 0); ((">>|", 2346), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -575)], (0)), 100000000, 0, -576), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -575), ((("b")), 100000000, 0, -573), 0), 100000000, 0, -574), (Tag3 ((("t", 2318)), [((("b")), 100000000, 0, -573)], (0)), 100000000, 0, -572), 0), 100000000, 0, -571), 0), 100000000, 0, -570), 0, (("src/sequence.mli", 45, 2114, 2122), ("src/sequence.mli", 45, 2114, 2152), 0), 0, Tag1 ("Base__Monad_intf", 13)), 0); Tag3 (("Monad_infix", 2347), 0, (Tag1 ([((">>=", 2432), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -785)], (0)), 100000000, 0, -786), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -785), (Tag3 ((("t", 2318)), [((("b")), 100000000, 0, -782)], (0)), 100000000, 0, -784), 0), 100000000, 0, -783), (Tag3 ((("t", 2318)), [((("b")), 100000000, 0, -782)], (0)), 100000000, 0, -781), 0), 100000000, 0, -780), 0), 100000000, 0, -779), 0, (("src/sequence.mli", 45, 2114, 2122), ("src/sequence.mli", 45, 2114, 2152), 0), 0, Tag1 ("Base__Monad_intf", 12)), 0); ((">>|", 2433), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -777)], (0)), 100000000, 0, -778), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -777), ((("b")), 100000000, 0, -775), 0), 100000000, 0, -776), (Tag3 ((("t", 2318)), [((("b")), 100000000, 0, -775)], (0)), 100000000, 0, -774), 0), 100000000, 0, -773), 0), 100000000, 0, -772), 0, (("src/sequence.mli", 45, 2114, 2122), ("src/sequence.mli", 45, 2114, 2152), 0), 0, Tag1 ("Base__Monad_intf", 13)), 0)]), 0, (("src/sequence.mli", 45, 2114, 2122), ("src/sequence.mli", 45, 2114, 2152), 0), Tag1 ("Base__Monad_intf", 46)), 0, 0); (("bind", 2348), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -568)], (0)), 100000000, 0, -569), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -568), (Tag3 ((("t", 2318)), [((("b")), 100000000, 0, -565)], (0)), 100000000, 0, -567), 0), 100000000, 0, -566), (Tag3 ((("t", 2318)), [((("b")), 100000000, 0, -565)], (0)), 100000000, 0, -564), 0), 100000000, 0, -563), 0), 100000000, 0, -562), 0, (("src/sequence.mli", 45, 2114, 2122), ("src/sequence.mli", 45, 2114, 2152), 0), 0, Tag1 ("Base__Monad_intf", 47)), 0); (("return", 2349), ((Tag1 (0, ((("a")), 100000000, 0, -561), (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -561)], (0)), 100000000, 0, -560), 0), 100000000, 0, -559), 0, (("src/sequence.mli", 45, 2114, 2122), ("src/sequence.mli", 45, 2114, 2152), 0), 0, Tag1 ("Base__Monad_intf", 48)), 0); (("map", 2350), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -557)], (0)), 100000000, 0, -558), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -557), ((("b")), 100000000, 0, -555), 0), 100000000, 0, -556), (Tag3 ((("t", 2318)), [((("b")), 100000000, 0, -555)], (0)), 100000000, 0, -554), 0), 100000000, 0, -553), 0), 100000000, 0, -552), 0, (("src/sequence.mli", 45, 2114, 2122), ("src/sequence.mli", 45, 2114, 2152), 0), 0, Tag1 ("Base__Monad_intf", 49)), 0); (("join", 2351), ((Tag1 (0, (Tag3 ((("t", 2318)), [(Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -549)], (0)), 100000000, 0, -551)], (0)), 100000000, 0, -550), (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -549)], (0)), 100000000, 0, -548), 0), 100000000, 0, -547), 0, (("src/sequence.mli", 45, 2114, 2122), ("src/sequence.mli", 45, 2114, 2152), 0), 0, Tag1 ("Base__Monad_intf", 50)), 0); (("ignore_m", 2352), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -546)], (0)), 100000000, 0, -545), (Tag3 ((("t", 2318)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -544)], (0)), 100000000, 0, -543), 0), 100000000, 0, -542), 0, (("src/sequence.mli", 45, 2114, 2122), ("src/sequence.mli", 45, 2114, 2152), 0), 0, Tag1 ("Base__Monad_intf", 51)), 0); (("all", 2353), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -539)], (0)), 100000000, 0, -541)], (0)), 100000000, 0, -540), (Tag3 ((("t", 2318)), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -539)], (0)), 100000000, 0, -538)], (0)), 100000000, 0, -537), 0), 100000000, 0, -536), 0, (("src/sequence.mli", 45, 2114, 2122), ("src/sequence.mli", 45, 2114, 2152), 0), 0, Tag1 ("Base__Monad_intf", 52)), 0); (("all_unit", 2354), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 2318)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -535)], (0)), 100000000, 0, -534)], (0)), 100000000, 0, -533), (Tag3 ((("t", 2318)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -532)], (0)), 100000000, 0, -531), 0), 100000000, 0, -530), 0, (("src/sequence.mli", 45, 2114, 2122), ("src/sequence.mli", 45, 2114, 2152), 0), 0, Tag1 ("Base__Monad_intf", 53)), 0); Tag3 (("Let_syntax", 2355), 0, (Tag1 ([(("return", 2434), ((Tag1 (0, ((("a")), 100000000, 0, -804), (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -804)], (0)), 100000000, 0, -803), 0), 100000000, 0, -802), 0, (("src/sequence.mli", 45, 2114, 2122), ("src/sequence.mli", 45, 2114, 2152), 0), 0, Tag1 ("Base__Monad_intf", 22)), 0); ((">>=", 2435), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -800)], (0)), 100000000, 0, -801), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -800), (Tag3 ((("t", 2318)), [((("b")), 100000000, 0, -797)], (0)), 100000000, 0, -799), 0), 100000000, 0, -798), (Tag3 ((("t", 2318)), [((("b")), 100000000, 0, -797)], (0)), 100000000, 0, -796), 0), 100000000, 0, -795), 0), 100000000, 0, -794), 0, (("src/sequence.mli", 45, 2114, 2122), ("src/sequence.mli", 45, 2114, 2152), 0), 0, Tag1 ("Base__Monad_intf", 12)), 0); ((">>|", 2436), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -792)], (0)), 100000000, 0, -793), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -792), ((("b")), 100000000, 0, -790), 0), 100000000, 0, -791), (Tag3 ((("t", 2318)), [((("b")), 100000000, 0, -790)], (0)), 100000000, 0, -789), 0), 100000000, 0, -788), 0), 100000000, 0, -787), 0, (("src/sequence.mli", 45, 2114, 2122), ("src/sequence.mli", 45, 2114, 2152), 0), 0, Tag1 ("Base__Monad_intf", 13)), 0); Tag3 (("Let_syntax", 2437), 0, (Tag1 ([(("return", 2438), ((Tag1 (0, ((("a")), 100000000, 0, -830), (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -830)], (0)), 100000000, 0, -829), 0), 100000000, 0, -828), 0, (("src/sequence.mli", 45, 2114, 2122), ("src/sequence.mli", 45, 2114, 2152), 0), 0, Tag1 ("Base__Monad_intf", 25)), 0); (("bind", 2439), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -826)], (0)), 100000000, 0, -827), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -826), (Tag3 ((("t", 2318)), [((("b")), 100000000, 0, -823)], (0)), 100000000, 0, -825), 0), 100000000, 0, -824), (Tag3 ((("t", 2318)), [((("b")), 100000000, 0, -823)], (0)), 100000000, 0, -822), 0), 100000000, 0, -821), 0), 100000000, 0, -820), 0, (("src/sequence.mli", 45, 2114, 2122), ("src/sequence.mli", 45, 2114, 2152), 0), 0, Tag1 ("Base__Monad_intf", 26)), 0); (("map", 2440), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -818)], (0)), 100000000, 0, -819), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -818), ((("b")), 100000000, 0, -816), 0), 100000000, 0, -817), (Tag3 ((("t", 2318)), [((("b")), 100000000, 0, -816)], (0)), 100000000, 0, -815), 0), 100000000, 0, -814), 0), 100000000, 0, -813), 0, (("src/sequence.mli", 45, 2114, 2122), ("src/sequence.mli", 45, 2114, 2152), 0), 0, Tag1 ("Base__Monad_intf", 27)), 0); (("both", 2441), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -809)], (0)), 100000000, 0, -812), (Tag1 (0, (Tag3 ((("t", 2318)), [((("b")), 100000000, 0, -810)], (0)), 100000000, 0, -811), (Tag3 ((("t", 2318)), [(Tag2 ([((("a")), 100000000, 0, -809); ((("b")), 100000000, 0, -810)]), 100000000, 0, -808)], (0)), 100000000, 0, -807), 0), 100000000, 0, -806), 0), 100000000, 0, -805), 0, (("src/sequence.mli", 45, 2114, 2122), ("src/sequence.mli", 45, 2114, 2152), 0), 0, Tag1 ("Base__Monad_intf", 28)), 0); Tag3 (("Open_on_rhs", 2442), 0, (Tag1 (0), 0, (("src/sequence.mli", 45, 2114, 2122), ("src/sequence.mli", 45, 2114, 2152), 0), Tag1 ("Base__Monad_intf", 29)), 0, 0)]), 0, (("src/sequence.mli", 45, 2114, 2122), ("src/sequence.mli", 45, 2114, 2152), 0), Tag1 ("Base__Monad_intf", 30)), 0, 0)]), 0, (("src/sequence.mli", 45, 2114, 2122), ("src/sequence.mli", 45, 2114, 2152), 0), Tag1 ("Base__Monad_intf", 31)), 0, 0); (("empty", 2356), ((Tag3 ((("t", 2318)), [((0), 100000000, 0, -529)], (0)), 100000000, 0, -528), 0, (("src/sequence.mli", 48, 2201, 2201), ("src/sequence.mli", 48, 2201, 2216), 0), 0, Tag1 ("Base__Sequence", 7)), 0); (("next", 2357), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -525)], (0)), 100000000, 0, -527), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([((("a")), 100000000, 0, -525); (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -525)], (0)), 100000000, 0, -526)]), 100000000, 0, -524)], (0)), 100000000, 0, -523), 0), 100000000, 0, -522), 0, (("src/sequence.mli", 52, 2326, 2326), ("src/sequence.mli", 52, 2326, 2363), 0), 0, Tag1 ("Base__Sequence", 8)), 0); Tag3 (("Step", 2358), 0, (Tag1 ([Tag1 (("t", 2443), ([((("a")), 100000000, 0, -843); ((("s")), 100000000, 0, -842)], 2, Tag1 ([(("Done", 1306), (0), 0, (("src/sequence.mli", 65, 2985, 2989), ("src/sequence.mli", 65, 2985, 2995), 0), 0, Tag1 ("Base__Sequence", 10)); (("Skip", 1307), Tag1 ([(("state", 1308), 0, ((("s")), 100000000, 0, -842), (("src/sequence.mli", 66, 2996, 3012), ("src/sequence.mli", 66, 2996, 3022), 0), 0, Tag1 ("Base__Sequence", 11))]), 0, (("src/sequence.mli", 66, 2996, 3000), ("src/sequence.mli", 66, 2996, 3024), 0), 0, Tag1 ("Base__Sequence", 12)); (("Yield", 1309), Tag1 ([(("value", 1310), 0, ((("a")), 100000000, 0, -843), (("src/sequence.mli", 68, 3040, 3050), ("src/sequence.mli", 69, 3061, 3070), 0), 0, Tag1 ("Base__Sequence", 13)); (("state", 1311), 0, ((("s")), 100000000, 0, -842), (("src/sequence.mli", 69, 3061, 3071), ("src/sequence.mli", 69, 3061, 3081), 0), 0, Tag1 ("Base__Sequence", 14))]), 0, (("src/sequence.mli", 67, 3025, 3029), ("src/sequence.mli", 70, 3082, 3091), 0), 0, Tag1 ("Base__Sequence", 15))], 0), 1, 0, [25; 25], [0; 0], 0, 0, (("src/sequence.mli", 64, 2965, 2967), ("src/sequence.mli", 71, 3092, 3121), 0), [(("deriving_inline", (("src/sequence.mli", 71, 3092, 3097), ("src/sequence.mli", 71, 3092, 3112), 0)), ([([(((("sexp_of"), (("src/sequence.mli", 71, 3092, 3113), ("src/sequence.mli", 71, 3092, 3120), 0))), (("src/sequence.mli", 71, 3092, 3113), ("src/sequence.mli", 71, 3092, 3120), 0), 0, 0)], (("src/sequence.mli", 71, 3092, 3113), ("src/sequence.mli", 71, 3092, 3120), 0))]), (("src/sequence.mli", 71, 3092, 3094), ("src/sequence.mli", 71, 3092, 3121), 0))], 0, 0, Tag1 ("Base__Sequence", 9)), 1, 0); (("sexp_of_t", 2444), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -836), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -841), 0), 100000000, 0, -840), (Tag1 (0, (Tag1 (0, ((("s")), 100000000, 0, -837), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -839), 0), 100000000, 0, -838), (Tag1 (0, (Tag3 ((("t", 2443)), [((("a")), 100000000, 0, -836); ((("s")), 100000000, 0, -837)], (0)), 100000000, 0, -835), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -834), 0), 100000000, 0, -833), 0), 100000000, 0, -832), 0), 100000000, 0, -831), 0, (("src/sequence.mli", 73, 3123, 3125), ("src/sequence.mli", 77, 3219, 3241), 0), 0, Tag1 ("Base__Sequence", 28)), 0)]), 0, (("src/sequence.mli", 63, 2947, 2947), ("src/sequence.mli", 80, 3254, 3257), 0), Tag1 ("Base__Sequence", 29)), 0, 0); (("unfold_step", 2359), ((Tag1 (("init"), ((("s")), 100000000, 0, -521), (Tag1 (("f"), (Tag1 (0, ((("s")), 100000000, 0, -521), (Tag3 (Tag1 ((("Step", 2358)), "t"), [((("a")), 100000000, 0, -518); ((("s")), 100000000, 0, -521)], (0)), 100000000, 0, -520), 0), 100000000, 0, -519), (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -518)], (0)), 100000000, 0, -517), 0), 100000000, 0, -516), 0), 100000000, 0, -515), 0, (("src/sequence.mli", 84, 3429, 3429), ("src/sequence.mli", 84, 3429, 3491), 0), 0, Tag1 ("Base__Sequence", 32)), 0); (("unfold", 2360), ((Tag1 (("init"), ((("s")), 100000000, 0, -514), (Tag1 (("f"), (Tag1 (0, ((("s")), 100000000, 0, -514), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([((("a")), 100000000, 0, -510); ((("s")), 100000000, 0, -514)]), 100000000, 0, -513)], (0)), 100000000, 0, -512), 0), 100000000, 0, -511), (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -510)], (0)), 100000000, 0, -509), 0), 100000000, 0, -508), 0), 100000000, 0, -507), 0, (("src/sequence.mli", 88, 3590, 3590), ("src/sequence.mli", 88, 3590, 3648), 0), 0, Tag1 ("Base__Sequence", 33)), 0); (("unfold_with", 2361), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -505)], (0)), 100000000, 0, -506), (Tag1 (("init"), ((("s")), 100000000, 0, -504), (Tag1 (("f"), (Tag1 (0, ((("s")), 100000000, 0, -504), (Tag1 (0, ((("a")), 100000000, 0, -505), (Tag3 (Tag1 ((("Step", 2358)), "t"), [((("b")), 100000000, 0, -500); ((("s")), 100000000, 0, -504)], (0)), 100000000, 0, -503), 0), 100000000, 0, -502), 0), 100000000, 0, -501), (Tag3 ((("t", 2318)), [((("b")), 100000000, 0, -500)], (0)), 100000000, 0, -499), 0), 100000000, 0, -498), 0), 100000000, 0, -497), 0), 100000000, 0, -496), 0, (("src/sequence.mli", 92, 3750, 3750), ("src/sequence.mli", 92, 3750, 3826), 0), 0, Tag1 ("Base__Sequence", 34)), 0); (("unfold_with_and_finish", 2362), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -494)], (0)), 100000000, 0, -495), (Tag1 (("init"), ((("s_a")), 100000000, 0, -490), (Tag1 (("running_step"), (Tag1 (0, ((("s_a")), 100000000, 0, -490), (Tag1 (0, ((("a")), 100000000, 0, -494), (Tag3 (Tag1 ((("Step", 2358)), "t"), [((("b")), 100000000, 0, -485); ((("s_a")), 100000000, 0, -490)], (0)), 100000000, 0, -493), 0), 100000000, 0, -492), 0), 100000000, 0, -491), (Tag1 (("inner_finished"), (Tag1 (0, ((("s_a")), 100000000, 0, -490), ((("s_b")), 100000000, 0, -488), 0), 100000000, 0, -489), (Tag1 (("finishing_step"), (Tag1 (0, ((("s_b")), 100000000, 0, -488), (Tag3 (Tag1 ((("Step", 2358)), "t"), [((("b")), 100000000, 0, -485); ((("s_b")), 100000000, 0, -488)], (0)), 100000000, 0, -487), 0), 100000000, 0, -486), (Tag3 ((("t", 2318)), [((("b")), 100000000, 0, -485)], (0)), 100000000, 0, -484), 0), 100000000, 0, -483), 0), 100000000, 0, -482), 0), 100000000, 0, -481), 0), 100000000, 0, -480), 0), 100000000, 0, -479), 0, (("src/sequence.mli", 98, 4163, 4163), ("src/sequence.mli", 104, 4350, 4359), 0), 0, Tag1 ("Base__Sequence", 35)), 0); (("nth", 2363), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -476)], (0)), 100000000, 0, -478), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -477), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -476)], (0)), 100000000, 0, -475), 0), 100000000, 0, -474), 0), 100000000, 0, -473), 0, (("src/sequence.mli", 107, 4393, 4393), ("src/sequence.mli", 107, 4393, 4427), 0), 0, Tag1 ("Base__Sequence", 36)), 0); (("nth_exn", 2364), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -470)], (0)), 100000000, 0, -472), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -471), ((("a")), 100000000, 0, -470), 0), 100000000, 0, -469), 0), 100000000, 0, -468), 0, (("src/sequence.mli", 109, 4429, 4429), ("src/sequence.mli", 109, 4429, 4460), 0), 0, Tag1 ("Base__Sequence", 37)), 0); (("folding_map", 2365), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -466)], (0)), 100000000, 0, -467), (Tag1 (("init"), ((("acc")), 100000000, 0, -465), (Tag1 (("f"), (Tag1 (0, ((("acc")), 100000000, 0, -465), (Tag1 (0, ((("a")), 100000000, 0, -466), (Tag2 ([((("acc")), 100000000, 0, -465); ((("b")), 100000000, 0, -461)]), 100000000, 0, -464), 0), 100000000, 0, -463), 0), 100000000, 0, -462), (Tag3 ((("t", 2318)), [((("b")), 100000000, 0, -461)], (0)), 100000000, 0, -460), 0), 100000000, 0, -459), 0), 100000000, 0, -458), 0), 100000000, 0, -457), 0, (("src/sequence.mli", 113, 4559, 4559), ("src/sequence.mli", 113, 4559, 4633), 0), 0, Tag1 ("Base__Sequence", 38)), 0); (("folding_mapi", 2366), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -454)], (0)), 100000000, 0, -456), (Tag1 (("init"), ((("acc")), 100000000, 0, -453), (Tag1 (("f"), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -455), (Tag1 (0, ((("acc")), 100000000, 0, -453), (Tag1 (0, ((("a")), 100000000, 0, -454), (Tag2 ([((("acc")), 100000000, 0, -453); ((("b")), 100000000, 0, -448)]), 100000000, 0, -452), 0), 100000000, 0, -451), 0), 100000000, 0, -450), 0), 100000000, 0, -449), (Tag3 ((("t", 2318)), [((("b")), 100000000, 0, -448)], (0)), 100000000, 0, -447), 0), 100000000, 0, -446), 0), 100000000, 0, -445), 0), 100000000, 0, -444), 0, (("src/sequence.mli", 115, 4635, 4635), ("src/sequence.mli", 115, 4635, 4717), 0), 0, Tag1 ("Base__Sequence", 39)), 0); (("mapi", 2367), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -441)], (0)), 100000000, 0, -443), (Tag1 (("f"), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -442), (Tag1 (0, ((("a")), 100000000, 0, -441), ((("b")), 100000000, 0, -438), 0), 100000000, 0, -440), 0), 100000000, 0, -439), (Tag3 ((("t", 2318)), [((("b")), 100000000, 0, -438)], (0)), 100000000, 0, -437), 0), 100000000, 0, -436), 0), 100000000, 0, -435), 0, (("src/sequence.mli", 116, 4718, 4718), ("src/sequence.mli", 116, 4718, 4764), 0), 0, Tag1 ("Base__Sequence", 40)), 0); (("filteri", 2368), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -429)], (0)), 100000000, 0, -434), (Tag1 (("f"), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -433), (Tag1 (0, ((("a")), 100000000, 0, -429), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -432), 0), 100000000, 0, -431), 0), 100000000, 0, -430), (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -429)], (0)), 100000000, 0, -428), 0), 100000000, 0, -427), 0), 100000000, 0, -426), 0, (("src/sequence.mli", 117, 4765, 4765), ("src/sequence.mli", 117, 4765, 4816), 0), 0, Tag1 ("Base__Sequence", 41)), 0); (("filter", 2369), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -422)], (0)), 100000000, 0, -425), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -422), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -424), 0), 100000000, 0, -423), (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -422)], (0)), 100000000, 0, -421), 0), 100000000, 0, -420), 0), 100000000, 0, -419), 0, (("src/sequence.mli", 118, 4817, 4817), ("src/sequence.mli", 118, 4817, 4860), 0), 0, Tag1 ("Base__Sequence", 42)), 0); (("merge_deduped_and_sorted", 2370), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -413)], (0)), 100000000, 0, -418), (Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -413)], (0)), 100000000, 0, -417), (Tag1 (("compare"), (Tag1 (0, ((("a")), 100000000, 0, -413), (Tag1 (0, ((("a")), 100000000, 0, -413), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -416), 0), 100000000, 0, -415), 0), 100000000, 0, -414), (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -413)], (0)), 100000000, 0, -412), 0), 100000000, 0, -411), 0), 100000000, 0, -410), 0), 100000000, 0, -409), 0, (("src/sequence.mli", 125, 5244, 5244), ("src/sequence.mli", 125, 5244, 5324), 0), 0, Tag1 ("Base__Sequence", 43)), 0); (("merge", 2371), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -403)], (0)), 100000000, 0, -408), (Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -403)], (0)), 100000000, 0, -407), (Tag1 (("compare"), (Tag1 (0, ((("a")), 100000000, 0, -403), (Tag1 (0, ((("a")), 100000000, 0, -403), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -406), 0), 100000000, 0, -405), 0), 100000000, 0, -404), (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -403)], (0)), 100000000, 0, -402), 0), 100000000, 0, -401), 0), 100000000, 0, -400), 0), 100000000, 0, -399), 0, (("src/sequence.mli", 127, 5326, 5326), ("src/sequence.mli", 130, 5488, 5544), 0), [(("deprecated", (("src/sequence.mli", 128, 5388, 5391), ("src/sequence.mli", 128, 5388, 5401), 0)), ([([(Tag1 (Tag2 ("[since 2021-07] For identical behavior, use [Sequence.merge_deduped_and_sorted], but consider using [Sequence.merge_sorted] instead.", (("src/sequence.mli", 129, 5402, 5405), ("src/sequence.mli", 130, 5488, 5542), 0), 0)), (("src/sequence.mli", 129, 5402, 5404), ("src/sequence.mli", 130, 5488, 5543), 0), 0, 0)], (("src/sequence.mli", 129, 5402, 5404), ("src/sequence.mli", 130, 5488, 5543), 0))]), (("src/sequence.mli", 128, 5388, 5388), ("src/sequence.mli", 130, 5488, 5544), 0))], Tag1 ("Base__Sequence", 44)), 0); (("merge_sorted", 2372), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -393)], (0)), 100000000, 0, -398), (Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -393)], (0)), 100000000, 0, -397), (Tag1 (("compare"), (Tag1 (0, ((("a")), 100000000, 0, -393), (Tag1 (0, ((("a")), 100000000, 0, -393), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -396), 0), 100000000, 0, -395), 0), 100000000, 0, -394), (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -393)], (0)), 100000000, 0, -392), 0), 100000000, 0, -391), 0), 100000000, 0, -390), 0), 100000000, 0, -389), 0, (("src/sequence.mli", 136, 5823, 5823), ("src/sequence.mli", 136, 5823, 5891), 0), 0, Tag1 ("Base__Sequence", 45)), 0); Tag3 (("Merge_with_duplicates_element", 2373), 0, (Tag1 ([Tag1 (("t", 2445), ([((("a")), 100000000, 0, -890); ((("b")), 100000000, 0, -891)], 2, Tag1 ([(("Left", 1329), ([((("a")), 100000000, 0, -890)]), 0, (("src/sequence.mli", 140, 5956, 5960), ("src/sequence.mli", 140, 5956, 5972), 0), 0, Tag1 ("Base__Sequence", 47)); (("Right", 1330), ([((("b")), 100000000, 0, -891)]), 0, (("src/sequence.mli", 141, 5973, 5977), ("src/sequence.mli", 141, 5973, 5990), 0), 0, Tag1 ("Base__Sequence", 48)); (("Both", 1331), ([((("a")), 100000000, 0, -890); ((("b")), 100000000, 0, -891)]), 0, (("src/sequence.mli", 142, 5991, 5995), ("src/sequence.mli", 142, 5991, 6012), 0), 0, Tag1 ("Base__Sequence", 49))], 0), 1, 0, [25; 25], [0; 0], 0, 0, (("src/sequence.mli", 139, 5936, 5938), ("src/sequence.mli", 143, 6013, 6068), 0), [(("deriving_inline", (("src/sequence.mli", 143, 6013, 6018), ("src/sequence.mli", 143, 6013, 6033), 0)), ([([(Tag8 ([(((("compare"), (("src/sequence.mli", 143, 6013, 6034), ("src/sequence.mli", 143, 6013, 6041), 0))), (("src/sequence.mli", 143, 6013, 6034), ("src/sequence.mli", 143, 6013, 6041), 0), 0, 0); (((("hash"), (("src/sequence.mli", 143, 6013, 6043), ("src/sequence.mli", 143, 6013, 6047), 0))), (("src/sequence.mli", 143, 6013, 6043), ("src/sequence.mli", 143, 6013, 6047), 0), 0, 0); (((("sexp"), (("src/sequence.mli", 143, 6013, 6049), ("src/sequence.mli", 143, 6013, 6053), 0))), (("src/sequence.mli", 143, 6013, 6049), ("src/sequence.mli", 143, 6013, 6053), 0), 0, 0); (((("sexp_grammar"), (("src/sequence.mli", 143, 6013, 6055), ("src/sequence.mli", 143, 6013, 6067), 0))), (("src/sequence.mli", 143, 6013, 6055), ("src/sequence.mli", 143, 6013, 6067), 0), 0, 0)]), (("src/sequence.mli", 143, 6013, 6034), ("src/sequence.mli", 143, 6013, 6067), 0), 0, 0)], (("src/sequence.mli", 143, 6013, 6034), ("src/sequence.mli", 143, 6013, 6067), 0))]), (("src/sequence.mli", 143, 6013, 6015), ("src/sequence.mli", 143, 6013, 6068), 0))], 0, 0, Tag1 ("Base__Sequence", 46)), 1, 0); (("compare", 2446), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "compare"), [((("a")), 100000000, 0, -886)], (0)), 100000000, 0, -889), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "compare"), [((("b")), 100000000, 0, -887)], (0)), 100000000, 0, -888), (Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "compare"), [(Tag3 ((("t", 2445)), [((("a")), 100000000, 0, -886); ((("b")), 100000000, 0, -887)], (0)), 100000000, 0, -885)], (0)), 100000000, 0, -884), 0), 100000000, 0, -883), 0), 100000000, 0, -882), 0, (("src/sequence.mli", 145, 6070, 6080), ("src/sequence.mli", 145, 6070, 6144), 0), 0, Tag1 ("Base__Ppx_compare_lib", 11)), 0); (("hash_fold_t", 2447), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Ppx_hash_lib")), "hash_fold"), [((("a")), 100000000, 0, -878)], (0)), 100000000, 0, -881), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Ppx_hash_lib")), "hash_fold"), [((("b")), 100000000, 0, -879)], (0)), 100000000, 0, -880), (Tag3 (Tag1 ((Tag2 ("Base__Ppx_hash_lib")), "hash_fold"), [(Tag3 ((("t", 2445)), [((("a")), 100000000, 0, -878); ((("b")), 100000000, 0, -879)], (0)), 100000000, 0, -877)], (0)), 100000000, 0, -876), 0), 100000000, 0, -875), 0), 100000000, 0, -874), 0, (("src/sequence.mli", 146, 6145, 6155), ("src/sequence.mli", 146, 6145, 6214), 0), 0, Tag1 ("Base__Ppx_hash_lib", 11)), 0); (("t_of_sexp", 2448), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -873), ((("a")), 100000000, 0, -867), 0), 100000000, 0, -872), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -871), ((("b")), 100000000, 0, -868), 0), 100000000, 0, -870), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -869), (Tag3 ((("t", 2445)), [((("a")), 100000000, 0, -867); ((("b")), 100000000, 0, -868)], (0)), 100000000, 0, -866), 0), 100000000, 0, -865), 0), 100000000, 0, -864), 0), 100000000, 0, -863), 0, (("src/sequence.mli", 147, 6215, 6225), ("src/sequence.mli", 147, 6215, 6280), 0), 0, Tag1 ("Sexplib0__Sexpable", 9)), 0); (("sexp_of_t", 2449), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -857), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -862), 0), 100000000, 0, -861), (Tag1 (0, (Tag1 (0, ((("b")), 100000000, 0, -858), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -860), 0), 100000000, 0, -859), (Tag1 (0, (Tag3 ((("t", 2445)), [((("a")), 100000000, 0, -857); ((("b")), 100000000, 0, -858)], (0)), 100000000, 0, -856), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -855), 0), 100000000, 0, -854), 0), 100000000, 0, -853), 0), 100000000, 0, -852), 0, (("src/sequence.mli", 147, 6215, 6225), ("src/sequence.mli", 147, 6215, 6280), 0), 0, Tag1 ("Sexplib0__Sexpable", 10)), 0); (("t_sexp_grammar", 2450), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [((("a")), 100000000, 0, -848)], (0)), 100000000, 0, -851), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [((("b")), 100000000, 0, -849)], (0)), 100000000, 0, -850), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("t", 2445)), [((("a")), 100000000, 0, -848); ((("b")), 100000000, 0, -849)], (0)), 100000000, 0, -847)], (0)), 100000000, 0, -846), 0), 100000000, 0, -845), 0), 100000000, 0, -844), 0, (("src/sequence.mli", 149, 6282, 6284), ("src/sequence.mli", 152, 6371, 6412), 0), 0, Tag1 ("Base__Sequence", 54)), 0)]), 0, (("src/sequence.mli", 138, 5893, 5893), ("src/sequence.mli", 155, 6425, 6428), 0), Tag1 ("Base__Sequence", 55)), 0, 0); (("merge_with_duplicates", 2374), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -382)], (0)), 100000000, 0, -388), (Tag1 (0, (Tag3 ((("t", 2318)), [((("b")), 100000000, 0, -383)], (0)), 100000000, 0, -387), (Tag1 (("compare"), (Tag1 (0, ((("a")), 100000000, 0, -382), (Tag1 (0, ((("b")), 100000000, 0, -383), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -386), 0), 100000000, 0, -385), 0), 100000000, 0, -384), (Tag3 ((("t", 2318)), [(Tag3 (Tag1 ((("Merge_with_duplicates_element", 2373)), "t"), [((("a")), 100000000, 0, -382); ((("b")), 100000000, 0, -383)], (0)), 100000000, 0, -381)], (0)), 100000000, 0, -380), 0), 100000000, 0, -379), 0), 100000000, 0, -378), 0), 100000000, 0, -377), 0, (("src/sequence.mli", 160, 6629, 6629), ("src/sequence.mli", 164, 6706, 6753), 0), 0, Tag1 ("Base__Sequence", 56)), 0); (("hd", 2375), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -375)], (0)), 100000000, 0, -376), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -375)], (0)), 100000000, 0, -374), 0), 100000000, 0, -373), 0, (("src/sequence.mli", 166, 6755, 6755), ("src/sequence.mli", 166, 6755, 6781), 0), 0, Tag1 ("Base__Sequence", 57)), 0); (("hd_exn", 2376), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -371)], (0)), 100000000, 0, -372), ((("a")), 100000000, 0, -371), 0), 100000000, 0, -370), 0, (("src/sequence.mli", 167, 6782, 6782), ("src/sequence.mli", 167, 6782, 6805), 0), 0, Tag1 ("Base__Sequence", 58)), 0); (("tl", 2377), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -368)], (0)), 100000000, 0, -369), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -368)], (0)), 100000000, 0, -367)], (0)), 100000000, 0, -366), 0), 100000000, 0, -365), 0, (("src/sequence.mli", 171, 6929, 6929), ("src/sequence.mli", 171, 6929, 6957), 0), 0, Tag1 ("Base__Sequence", 59)), 0); (("tl_eagerly_exn", 2378), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -363)], (0)), 100000000, 0, -364), (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -363)], (0)), 100000000, 0, -362), 0), 100000000, 0, -361), 0, (("src/sequence.mli", 173, 6959, 6959), ("src/sequence.mli", 173, 6959, 6992), 0), 0, Tag1 ("Base__Sequence", 60)), 0); (("find_exn", 2379), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -357)], (0)), 100000000, 0, -360), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -357), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -359), 0), 100000000, 0, -358), ((("a")), 100000000, 0, -357), 0), 100000000, 0, -356), 0), 100000000, 0, -355), 0, (("src/sequence.mli", 177, 7113, 7113), ("src/sequence.mli", 177, 7113, 7166), 0), 0, Tag1 ("Base__Sequence", 61)), 0); (("for_alli", 2380), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -352)], (0)), 100000000, 0, -354), (Tag1 (("f"), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -353), (Tag1 (0, ((("a")), 100000000, 0, -352), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -351), 0), 100000000, 0, -350), 0), 100000000, 0, -349), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -348), 0), 100000000, 0, -347), 0), 100000000, 0, -346), 0, (("src/sequence.mli", 180, 7228, 7228), ("src/sequence.mli", 180, 7228, 7290), 0), 0, Tag1 ("Base__Sequence", 62)), 0); (("append", 2381), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -343)], (0)), 100000000, 0, -345), (Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -343)], (0)), 100000000, 0, -344), (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -343)], (0)), 100000000, 0, -342), 0), 100000000, 0, -341), 0), 100000000, 0, -340), 0, (("src/sequence.mli", 184, 7391, 7391), ("src/sequence.mli", 184, 7391, 7424), 0), 0, Tag1 ("Base__Sequence", 63)), 0); (("concat", 2382), ((Tag1 (0, (Tag3 ((("t", 2318)), [(Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -337)], (0)), 100000000, 0, -339)], (0)), 100000000, 0, -338), (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -337)], (0)), 100000000, 0, -336), 0), 100000000, 0, -335), 0, (("src/sequence.mli", 188, 7606, 7606), ("src/sequence.mli", 188, 7606, 7633), 0), 0, Tag1 ("Base__Sequence", 64)), 0); (("concat_map", 2383), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -333)], (0)), 100000000, 0, -334), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -333), (Tag3 ((("t", 2318)), [((("b")), 100000000, 0, -330)], (0)), 100000000, 0, -332), 0), 100000000, 0, -331), (Tag3 ((("t", 2318)), [((("b")), 100000000, 0, -330)], (0)), 100000000, 0, -329), 0), 100000000, 0, -328), 0), 100000000, 0, -327), 0, (("src/sequence.mli", 191, 7683, 7683), ("src/sequence.mli", 191, 7683, 7730), 0), 0, Tag1 ("Base__Sequence", 65)), 0); (("concat_mapi", 2384), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -324)], (0)), 100000000, 0, -326), (Tag1 (("f"), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -325), (Tag1 (0, ((("a")), 100000000, 0, -324), (Tag3 ((("t", 2318)), [((("b")), 100000000, 0, -320)], (0)), 100000000, 0, -323), 0), 100000000, 0, -322), 0), 100000000, 0, -321), (Tag3 ((("t", 2318)), [((("b")), 100000000, 0, -320)], (0)), 100000000, 0, -319), 0), 100000000, 0, -318), 0), 100000000, 0, -317), 0, (("src/sequence.mli", 194, 7815, 7815), ("src/sequence.mli", 194, 7815, 7870), 0), 0, Tag1 ("Base__Sequence", 66)), 0); (("interleave", 2385), ((Tag1 (0, (Tag3 ((("t", 2318)), [(Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -314)], (0)), 100000000, 0, -316)], (0)), 100000000, 0, -315), (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -314)], (0)), 100000000, 0, -313), 0), 100000000, 0, -312), 0, (("src/sequence.mli", 200, 8221, 8221), ("src/sequence.mli", 200, 8221, 8252), 0), 0, Tag1 ("Base__Sequence", 67)), 0); (("round_robin", 2386), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -309)], (0)), 100000000, 0, -311)], (0)), 100000000, 0, -310), (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -309)], (0)), 100000000, 0, -308), 0), 100000000, 0, -307), 0, (("src/sequence.mli", 206, 8545, 8545), ("src/sequence.mli", 206, 8545, 8580), 0), 0, Tag1 ("Base__Sequence", 68)), 0); (("zip", 2387), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -303)], (0)), 100000000, 0, -306), (Tag1 (0, (Tag3 ((("t", 2318)), [((("b")), 100000000, 0, -304)], (0)), 100000000, 0, -305), (Tag3 ((("t", 2318)), [(Tag2 ([((("a")), 100000000, 0, -303); ((("b")), 100000000, 0, -304)]), 100000000, 0, -302)], (0)), 100000000, 0, -301), 0), 100000000, 0, -300), 0), 100000000, 0, -299), 0, (("src/sequence.mli", 215, 8991, 8991), ("src/sequence.mli", 215, 8991, 9028), 0), 0, Tag1 ("Base__Sequence", 69)), 0); (("zip_full", 2388), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -295)], (0)), 100000000, 0, -298), (Tag1 (0, (Tag3 ((("t", 2318)), [((("b")), 100000000, 0, -294)], (0)), 100000000, 0, -297), (Tag3 ((("t", 2318)), [(Tag8 (([("Both", (((Tag2 ([((("a")), 100000000, 0, -295); ((("b")), 100000000, 0, -294)]), 100000000, 0, -296)))); ("Left", ((((("a")), 100000000, 0, -295)))); ("Right", ((((("b")), 100000000, 0, -294))))], (0, 100000000, 0, -293), 1, 0, 0)), 100000000, 0, -292)], (0)), 100000000, 0, -291), 0), 100000000, 0, -290), 0), 100000000, 0, -289), 0, (("src/sequence.mli", 219, 9195, 9195), ("src/sequence.mli", 219, 9195, 9277), 0), 0, Tag1 ("Base__Sequence", 70)), 0); (("reduce_exn", 2389), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -285)], (0)), 100000000, 0, -288), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -285), (Tag1 (0, ((("a")), 100000000, 0, -285), ((("a")), 100000000, 0, -285), 0), 100000000, 0, -287), 0), 100000000, 0, -286), ((("a")), 100000000, 0, -285), 0), 100000000, 0, -284), 0), 100000000, 0, -283), 0, (("src/sequence.mli", 223, 9389, 9389), ("src/sequence.mli", 223, 9389, 9448), 0), 0, Tag1 ("Base__Sequence", 71)), 0); (("reduce", 2390), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -279)], (0)), 100000000, 0, -282), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -279), (Tag1 (0, ((("a")), 100000000, 0, -279), ((("a")), 100000000, 0, -279), 0), 100000000, 0, -281), 0), 100000000, 0, -280), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -279)], (0)), 100000000, 0, -278), 0), 100000000, 0, -277), 0), 100000000, 0, -276), 0, (("src/sequence.mli", 225, 9450, 9450), ("src/sequence.mli", 225, 9450, 9512), 0), 0, Tag1 ("Base__Sequence", 72)), 0); (("group", 2391), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -271)], (0)), 100000000, 0, -275), (Tag1 (("break"), (Tag1 (0, ((("a")), 100000000, 0, -271), (Tag1 (0, ((("a")), 100000000, 0, -271), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -274), 0), 100000000, 0, -273), 0), 100000000, 0, -272), (Tag3 ((("t", 2318)), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -271)], (0)), 100000000, 0, -270)], (0)), 100000000, 0, -269), 0), 100000000, 0, -268), 0), 100000000, 0, -267), 0, (("src/sequence.mli", 237, 9911, 9911), ("src/sequence.mli", 237, 9911, 9968), 0), 0, Tag1 ("Base__Sequence", 73)), 0); (("find_consecutive_duplicate", 2392), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -262)], (0)), 100000000, 0, -266), (Tag1 (("equal"), (Tag1 (0, ((("a")), 100000000, 0, -262), (Tag1 (0, ((("a")), 100000000, 0, -262), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -265), 0), 100000000, 0, -264), 0), 100000000, 0, -263), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([((("a")), 100000000, 0, -262); ((("a")), 100000000, 0, -262)]), 100000000, 0, -261)], (0)), 100000000, 0, -260), 0), 100000000, 0, -259), 0), 100000000, 0, -258), 0, (("src/sequence.mli", 242, 10173, 10173), ("src/sequence.mli", 245, 10254, 10275), 0), 0, Tag1 ("Base__Sequence", 74)), 0); (("remove_consecutive_duplicates", 2393), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -253)], (0)), 100000000, 0, -257), (Tag1 (("equal"), (Tag1 (0, ((("a")), 100000000, 0, -253), (Tag1 (0, ((("a")), 100000000, 0, -253), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -256), 0), 100000000, 0, -255), 0), 100000000, 0, -254), (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -253)], (0)), 100000000, 0, -252), 0), 100000000, 0, -251), 0), 100000000, 0, -250), 0, (("src/sequence.mli", 249, 10400, 10400), ("src/sequence.mli", 249, 10400, 10476), 0), 0, Tag1 ("Base__Sequence", 75)), 0); (("range", 2394), ((Tag1 (Tag1 ("stride"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -249)], (0)), 100000000, 0, -248), (Tag1 (Tag1 ("start"), (Tag3 ((Tag3 ("option", 10)), [(Tag8 (([("exclusive", (0)); ("inclusive", (0))], (0, 100000000, 0, -247), 1, 0, 0)), 100000000, 0, -246)], (0)), 100000000, 0, -245), (Tag1 (Tag1 ("stop"), (Tag3 ((Tag3 ("option", 10)), [(Tag8 (([("exclusive", (0)); ("inclusive", (0))], (0, 100000000, 0, -244), 1, 0, 0)), 100000000, 0, -243)], (0)), 100000000, 0, -242), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -241), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -240), (Tag3 ((("t", 2318)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -239)], (0)), 100000000, 0, -238), 0), 100000000, 0, -237), 0), 100000000, 0, -236), 0), 100000000, 0, -235), 0), 100000000, 0, -234), 0), 100000000, 0, -233), 0, (("src/sequence.mli", 255, 10772, 10772), ("src/sequence.mli", 261, 10980, 10990), 0), 0, Tag1 ("Base__Sequence", 76)), 0); (("init", 2395), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -232), (Tag1 (("f"), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -231), ((("a")), 100000000, 0, -229), 0), 100000000, 0, -230), (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -229)], (0)), 100000000, 0, -228), 0), 100000000, 0, -227), 0), 100000000, 0, -226), 0, (("src/sequence.mli", 264, 11076, 11076), ("src/sequence.mli", 264, 11076, 11115), 0), 0, Tag1 ("Base__Sequence", 77)), 0); (("filter_map", 2396), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -224)], (0)), 100000000, 0, -225), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -224), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -221)], (0)), 100000000, 0, -223), 0), 100000000, 0, -222), (Tag3 ((("t", 2318)), [((("b")), 100000000, 0, -221)], (0)), 100000000, 0, -220), 0), 100000000, 0, -219), 0), 100000000, 0, -218), 0, (("src/sequence.mli", 267, 11195, 11195), ("src/sequence.mli", 267, 11195, 11247), 0), 0, Tag1 ("Base__Sequence", 78)), 0); (("filter_mapi", 2397), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -215)], (0)), 100000000, 0, -217), (Tag1 (("f"), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -216), (Tag1 (0, ((("a")), 100000000, 0, -215), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -211)], (0)), 100000000, 0, -214), 0), 100000000, 0, -213), 0), 100000000, 0, -212), (Tag3 ((("t", 2318)), [((("b")), 100000000, 0, -211)], (0)), 100000000, 0, -210), 0), 100000000, 0, -209), 0), 100000000, 0, -208), 0, (("src/sequence.mli", 271, 11357, 11357), ("src/sequence.mli", 271, 11357, 11417), 0), 0, Tag1 ("Base__Sequence", 79)), 0); (("filter_opt", 2398), ((Tag1 (0, (Tag3 ((("t", 2318)), [(Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -205)], (0)), 100000000, 0, -207)], (0)), 100000000, 0, -206), (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -205)], (0)), 100000000, 0, -204), 0), 100000000, 0, -203), 0, (("src/sequence.mli", 275, 11539, 11539), ("src/sequence.mli", 275, 11539, 11575), 0), 0, Tag1 ("Base__Sequence", 80)), 0); (("sub", 2399), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -199)], (0)), 100000000, 0, -202), (Tag1 (("pos"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -201), (Tag1 (("len"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -200), (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -199)], (0)), 100000000, 0, -198), 0), 100000000, 0, -197), 0), 100000000, 0, -196), 0), 100000000, 0, -195), 0, (("src/sequence.mli", 280, 11791, 11791), ("src/sequence.mli", 280, 11791, 11835), 0), 0, Tag1 ("Base__Sequence", 81)), 0); (("take", 2400), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -192)], (0)), 100000000, 0, -194), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -193), (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -192)], (0)), 100000000, 0, -191), 0), 100000000, 0, -190), 0), 100000000, 0, -189), 0, (("src/sequence.mli", 283, 11895, 11895), ("src/sequence.mli", 283, 11895, 11925), 0), 0, Tag1 ("Base__Sequence", 82)), 0); (("drop", 2401), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -186)], (0)), 100000000, 0, -188), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -187), (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -186)], (0)), 100000000, 0, -185), 0), 100000000, 0, -184), 0), 100000000, 0, -183), 0, (("src/sequence.mli", 289, 12229, 12229), ("src/sequence.mli", 289, 12229, 12259), 0), 0, Tag1 ("Base__Sequence", 83)), 0); (("drop_eagerly", 2402), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -180)], (0)), 100000000, 0, -182), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -181), (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -180)], (0)), 100000000, 0, -179), 0), 100000000, 0, -178), 0), 100000000, 0, -177), 0, (("src/sequence.mli", 293, 12383, 12383), ("src/sequence.mli", 293, 12383, 12421), 0), 0, Tag1 ("Base__Sequence", 84)), 0); (("take_while", 2403), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -173)], (0)), 100000000, 0, -176), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -173), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -175), 0), 100000000, 0, -174), (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -173)], (0)), 100000000, 0, -172), 0), 100000000, 0, -171), 0), 100000000, 0, -170), 0, (("src/sequence.mli", 297, 12536, 12536), ("src/sequence.mli", 297, 12536, 12583), 0), 0, Tag1 ("Base__Sequence", 85)), 0); (("drop_while", 2404), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -166)], (0)), 100000000, 0, -169), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -166), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -168), 0), 100000000, 0, -167), (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -166)], (0)), 100000000, 0, -165), 0), 100000000, 0, -164), 0), 100000000, 0, -163), 0, (("src/sequence.mli", 302, 12811, 12811), ("src/sequence.mli", 302, 12811, 12858), 0), 0, Tag1 ("Base__Sequence", 86)), 0); (("drop_while_option", 2405), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -158)], (0)), 100000000, 0, -162), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -158), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -161), 0), 100000000, 0, -160), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([((("a")), 100000000, 0, -158); (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -158)], (0)), 100000000, 0, -159)]), 100000000, 0, -157)], (0)), 100000000, 0, -156), 0), 100000000, 0, -155), 0), 100000000, 0, -154), 0, (("src/sequence.mli", 310, 13375, 13375), ("src/sequence.mli", 310, 13375, 13453), 0), 0, Tag1 ("Base__Sequence", 87)), 0); (("split_n", 2406), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -150)], (0)), 100000000, 0, -153), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -152), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -150)], (0)), 100000000, 0, -149); (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -150)], (0)), 100000000, 0, -151)]), 100000000, 0, -148), 0), 100000000, 0, -147), 0), 100000000, 0, -146), 0, (("src/sequence.mli", 314, 13615, 13615), ("src/sequence.mli", 314, 13615, 13658), 0), 0, Tag1 ("Base__Sequence", 88)), 0); (("chunks_exn", 2407), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -143)], (0)), 100000000, 0, -145), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -144), (Tag3 ((("t", 2318)), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -143)], (0)), 100000000, 0, -142)], (0)), 100000000, 0, -141), 0), 100000000, 0, -140), 0), 100000000, 0, -139), 0, (("src/sequence.mli", 319, 13875, 13875), ("src/sequence.mli", 319, 13875, 13916), 0), 0, Tag1 ("Base__Sequence", 89)), 0); (("shift_right", 2408), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -137)], (0)), 100000000, 0, -138), (Tag1 (0, ((("a")), 100000000, 0, -137), (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -137)], (0)), 100000000, 0, -136), 0), 100000000, 0, -135), 0), 100000000, 0, -134), 0, (("src/sequence.mli", 323, 13996, 13996), ("src/sequence.mli", 323, 13996, 14032), 0), 0, Tag1 ("Base__Sequence", 90)), 0); (("shift_right_with_list", 2409), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -131)], (0)), 100000000, 0, -133), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -131)], (0)), 100000000, 0, -132), (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -131)], (0)), 100000000, 0, -130), 0), 100000000, 0, -129), 0), 100000000, 0, -128), 0, (("src/sequence.mli", 329, 14344, 14344), ("src/sequence.mli", 329, 14344, 14395), 0), 0, Tag1 ("Base__Sequence", 91)), 0); (("shift_left", 2410), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -125)], (0)), 100000000, 0, -127), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -126), (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -125)], (0)), 100000000, 0, -124), 0), 100000000, 0, -123), 0), 100000000, 0, -122), 0, (("src/sequence.mli", 332, 14449, 14449), ("src/sequence.mli", 332, 14449, 14485), 0), 0, Tag1 ("Base__Sequence", 92)), 0); Tag3 (("Infix", 2411), 0, (Tag1 ([(("@", 2451), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -895)], (0)), 100000000, 0, -897), (Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -895)], (0)), 100000000, 0, -896), (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -895)], (0)), 100000000, 0, -894), 0), 100000000, 0, -893), 0), 100000000, 0, -892), 0, (("src/sequence.mli", 335, 14506, 14508), ("src/sequence.mli", 335, 14506, 14540), 0), 0, Tag1 ("Base__Sequence", 93)), 0)]), 0, (("src/sequence.mli", 334, 14487, 14487), ("src/sequence.mli", 336, 14541, 14544), 0), Tag1 ("Base__Sequence", 94)), 0, 0); (("cartesian_product", 2412), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -118)], (0)), 100000000, 0, -121), (Tag1 (0, (Tag3 ((("t", 2318)), [((("b")), 100000000, 0, -119)], (0)), 100000000, 0, -120), (Tag3 ((("t", 2318)), [(Tag2 ([((("a")), 100000000, 0, -118); ((("b")), 100000000, 0, -119)]), 100000000, 0, -117)], (0)), 100000000, 0, -116), 0), 100000000, 0, -115), 0), 100000000, 0, -114), 0, (("src/sequence.mli", 342, 14897, 14897), ("src/sequence.mli", 342, 14897, 14948), 0), 0, Tag1 ("Base__Sequence", 95)), 0); (("interleaved_cartesian_product", 2413), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -110)], (0)), 100000000, 0, -113), (Tag1 (0, (Tag3 ((("t", 2318)), [((("b")), 100000000, 0, -111)], (0)), 100000000, 0, -112), (Tag3 ((("t", 2318)), [(Tag2 ([((("a")), 100000000, 0, -110); ((("b")), 100000000, 0, -111)]), 100000000, 0, -109)], (0)), 100000000, 0, -108), 0), 100000000, 0, -107), 0), 100000000, 0, -106), 0, (("src/sequence.mli", 348, 15271, 15271), ("src/sequence.mli", 348, 15271, 15334), 0), 0, Tag1 ("Base__Sequence", 96)), 0); (("intersperse", 2414), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -104)], (0)), 100000000, 0, -105), (Tag1 (("sep"), ((("a")), 100000000, 0, -104), (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -104)], (0)), 100000000, 0, -103), 0), 100000000, 0, -102), 0), 100000000, 0, -101), 0, (("src/sequence.mli", 352, 15469, 15469), ("src/sequence.mli", 352, 15469, 15509), 0), 0, Tag1 ("Base__Sequence", 97)), 0); (("cycle_list_exn", 2415), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -99)], (0)), 100000000, 0, -100), (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -99)], (0)), 100000000, 0, -98), 0), 100000000, 0, -97), 0, (("src/sequence.mli", 356, 15610, 15610), ("src/sequence.mli", 356, 15610, 15646), 0), 0, Tag1 ("Base__Sequence", 98)), 0); (("repeat", 2416), ((Tag1 (0, ((("a")), 100000000, 0, -96), (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -96)], (0)), 100000000, 0, -95), 0), 100000000, 0, -94), 0, (("src/sequence.mli", 359, 15687, 15687), ("src/sequence.mli", 359, 15687, 15710), 0), 0, Tag1 ("Base__Sequence", 99)), 0); (("singleton", 2417), ((Tag1 (0, ((("a")), 100000000, 0, -93), (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -93)], (0)), 100000000, 0, -92), 0), 100000000, 0, -91), 0, (("src/sequence.mli", 362, 15760, 15760), ("src/sequence.mli", 362, 15760, 15786), 0), 0, Tag1 ("Base__Sequence", 100)), 0); (("delayed_fold", 2418), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -89)], (0)), 100000000, 0, -90), (Tag1 (("init"), ((("s")), 100000000, 0, -84), (Tag1 (("f"), (Tag1 (0, ((("s")), 100000000, 0, -84), (Tag1 (0, ((("a")), 100000000, 0, -89), (Tag1 (("k"), (Tag1 (0, ((("s")), 100000000, 0, -84), ((("r")), 100000000, 0, -82), 0), 100000000, 0, -88), ((("r")), 100000000, 0, -82), 0), 100000000, 0, -87), 0), 100000000, 0, -86), 0), 100000000, 0, -85), (Tag1 (("finish"), (Tag1 (0, ((("s")), 100000000, 0, -84), ((("r")), 100000000, 0, -82), 0), 100000000, 0, -83), ((("r")), 100000000, 0, -82), 0), 100000000, 0, -81), 0), 100000000, 0, -80), 0), 100000000, 0, -79), 0), 100000000, 0, -78), 0, (("src/sequence.mli", 372, 16230, 16230), ("src/sequence.mli", 377, 16370, 16377), 0), 0, Tag1 ("Base__Sequence", 101)), 0); (("fold_m", 2419), ((Tag1 (("bind"), (Tag1 (0, ((("acc_m")), 100000000, 0, -68), (Tag1 (("f"), (Tag1 (0, ((("acc")), 100000000, 0, -72), ((("acc_m")), 100000000, 0, -68), 0), 100000000, 0, -77), ((("acc_m")), 100000000, 0, -68), 0), 100000000, 0, -76), 0), 100000000, 0, -75), (Tag1 (("return"), (Tag1 (0, ((("acc")), 100000000, 0, -72), ((("acc_m")), 100000000, 0, -68), 0), 100000000, 0, -74), (Tag1 (0, (Tag3 ((("t", 2318)), [((("elt")), 100000000, 0, -71)], (0)), 100000000, 0, -73), (Tag1 (("init"), ((("acc")), 100000000, 0, -72), (Tag1 (("f"), (Tag1 (0, ((("acc")), 100000000, 0, -72), (Tag1 (0, ((("elt")), 100000000, 0, -71), ((("acc_m")), 100000000, 0, -68), 0), 100000000, 0, -70), 0), 100000000, 0, -69), ((("acc_m")), 100000000, 0, -68), 0), 100000000, 0, -67), 0), 100000000, 0, -66), 0), 100000000, 0, -65), 0), 100000000, 0, -64), 0), 100000000, 0, -63), 0, (("src/sequence.mli", 381, 16534, 16534), ("src/sequence.mli", 387, 16684, 16695), 0), 0, Tag1 ("Base__Sequence", 102)), 0); (("iter_m", 2420), ((Tag1 (("bind"), (Tag1 (0, ((("unit_m")), 100000000, 0, -53), (Tag1 (("f"), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -62), ((("unit_m")), 100000000, 0, -53), 0), 100000000, 0, -61), ((("unit_m")), 100000000, 0, -53), 0), 100000000, 0, -60), 0), 100000000, 0, -59), (Tag1 (("return"), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -58), ((("unit_m")), 100000000, 0, -53), 0), 100000000, 0, -57), (Tag1 (0, (Tag3 ((("t", 2318)), [((("elt")), 100000000, 0, -55)], (0)), 100000000, 0, -56), (Tag1 (("f"), (Tag1 (0, ((("elt")), 100000000, 0, -55), ((("unit_m")), 100000000, 0, -53), 0), 100000000, 0, -54), ((("unit_m")), 100000000, 0, -53), 0), 100000000, 0, -52), 0), 100000000, 0, -51), 0), 100000000, 0, -50), 0), 100000000, 0, -49), 0, (("src/sequence.mli", 391, 16852, 16852), ("src/sequence.mli", 396, 16984, 16996), 0), 0, Tag1 ("Base__Sequence", 103)), 0); (("to_list_rev", 2421), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -47)], (0)), 100000000, 0, -48), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -47)], (0)), 100000000, 0, -46), 0), 100000000, 0, -45), 0, (("src/sequence.mli", 400, 17111, 17111), ("src/sequence.mli", 400, 17111, 17144), 0), 0, Tag1 ("Base__Sequence", 104)), 0); (("of_list", 2422), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -43)], (0)), 100000000, 0, -44), (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -43)], (0)), 100000000, 0, -42), 0), 100000000, 0, -41), 0, (("src/sequence.mli", 402, 17146, 17146), ("src/sequence.mli", 402, 17146, 17175), 0), 0, Tag1 ("Base__Sequence", 105)), 0); (("of_lazy", 2423), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Lazy"), "t"), [(Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -38)], (0)), 100000000, 0, -40)], (0)), 100000000, 0, -39), (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -38)], (0)), 100000000, 0, -37), 0), 100000000, 0, -36), 0, (("src/sequence.mli", 406, 17293, 17293), ("src/sequence.mli", 406, 17293, 17326), 0), 0, Tag1 ("Base__Sequence", 106)), 0); (("memoize", 2424), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -34)], (0)), 100000000, 0, -35), (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -34)], (0)), 100000000, 0, -33), 0), 100000000, 0, -32), 0, (("src/sequence.mli", 411, 17535, 17535), ("src/sequence.mli", 411, 17535, 17561), 0), 0, Tag1 ("Base__Sequence", 107)), 0); (("force_eagerly", 2425), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -30)], (0)), 100000000, 0, -31), (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -30)], (0)), 100000000, 0, -29), 0), 100000000, 0, -28), 0, (("src/sequence.mli", 416, 17776, 17776), ("src/sequence.mli", 416, 17776, 17808), 0), 0, Tag1 ("Base__Sequence", 108)), 0); (("bounded_length", 2426), ((Tag1 (0, (Tag3 ((("t", 2318)), [((0), 100000000, 0, -27)], (0)), 100000000, 0, -26), (Tag1 (("at_most"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -25), (Tag8 (([("Greater", (0)); ("Is", (((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -24))))], (0, 100000000, 0, -23), 1, 0, 0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0), 100000000, 0, -20), 0, (("src/sequence.mli", 421, 18040, 18040), ("src/sequence.mli", 421, 18040, 18108), 0), 0, Tag1 ("Base__Sequence", 109)), 0); (("length_is_bounded_by", 2427), ((Tag1 (Tag1 ("min"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -19)], (0)), 100000000, 0, -18), (Tag1 (Tag1 ("max"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -17)], (0)), 100000000, 0, -16), (Tag1 (0, (Tag3 ((("t", 2318)), [((0), 100000000, 0, -15)], (0)), 100000000, 0, -14), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -13), 0), 100000000, 0, -12), 0), 100000000, 0, -11), 0), 100000000, 0, -10), 0, (("src/sequence.mli", 426, 18349, 18349), ("src/sequence.mli", 426, 18349, 18411), 0), 0, Tag1 ("Base__Sequence", 110)), 0); (("of_seq", 2428), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Import"), "Stdlib"), "Seq"), "t"), [((("a")), 100000000, 0, -8)], (0)), 100000000, 0, -9), (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -8)], (0)), 100000000, 0, -7), 0), 100000000, 0, -6), 0, (("src/sequence.mli", 428, 18413, 18413), ("src/sequence.mli", 428, 18413, 18449), 0), 0, Tag1 ("Base__Sequence", 111)), 0); (("to_seq", 2429), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -4)], (0)), 100000000, 0, -5), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Import"), "Stdlib"), "Seq"), "t"), [((("a")), 100000000, 0, -4)], (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/sequence.mli", 429, 18450, 18450), ("src/sequence.mli", 429, 18450, 18486), 0), 0, Tag1 ("Base__Sequence", 112)), 0); Tag3 (("Generator", 2430), 0, (Tag1 ([Tag1 (("t", 2452), ([((("a")), 100000000, 0, -976); ((("e")), 100000000, 0, -977)], 2, 0, 1, 0, [7; 7], [2; 2], 0, 0, (("src/monad_intf.ml", 243, 7403, 7405), ("src/monad_intf.ml", 243, 7403, 7490), 0), 0, 0, 0, Tag1 ("Base__Monad_intf", 108)), 1, 0); ((">>=", 2453), ((Tag1 (0, (Tag3 ((("t", 2452)), [((("a")), 100000000, 0, -974); ((("e")), 100000000, 0, -971)], (0)), 100000000, 0, -975), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -974), (Tag3 ((("t", 2452)), [((("b")), 100000000, 0, -970); ((("e")), 100000000, 0, -971)], (0)), 100000000, 0, -973), 0), 100000000, 0, -972), (Tag3 ((("t", 2452)), [((("b")), 100000000, 0, -970); ((("e")), 100000000, 0, -971)], (0)), 100000000, 0, -969), 0), 100000000, 0, -968), 0), 100000000, 0, -967), 0, (("src/monad_intf.ml", 243, 7403, 7405), ("src/monad_intf.ml", 243, 7403, 7490), 0), 0, Tag1 ("Base__Monad_intf", 81)), 0); ((">>|", 2454), ((Tag1 (0, (Tag3 ((("t", 2452)), [((("a")), 100000000, 0, -965); ((("e")), 100000000, 0, -963)], (0)), 100000000, 0, -966), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -965), ((("b")), 100000000, 0, -962), 0), 100000000, 0, -964), (Tag3 ((("t", 2452)), [((("b")), 100000000, 0, -962); ((("e")), 100000000, 0, -963)], (0)), 100000000, 0, -961), 0), 100000000, 0, -960), 0), 100000000, 0, -959), 0, (("src/monad_intf.ml", 243, 7403, 7405), ("src/monad_intf.ml", 243, 7403, 7490), 0), 0, Tag1 ("Base__Monad_intf", 82)), 0); Tag3 (("Let_syntax", 2455), 0, (Tag1 ([(("return", 2467), ((Tag1 (0, ((("a")), 100000000, 0, -997), (Tag3 ((("t", 2452)), [((("a")), 100000000, 0, -997); ((0), 100000000, 0, -998)], (0)), 100000000, 0, -996), 0), 100000000, 0, -995), 0, (("src/monad_intf.ml", 243, 7403, 7405), ("src/monad_intf.ml", 243, 7403, 7490), 0), 0, Tag1 ("Base__Monad_intf", 91)), 0); ((">>=", 2468), ((Tag1 (0, (Tag3 ((("t", 2452)), [((("a")), 100000000, 0, -993); ((("e")), 100000000, 0, -990)], (0)), 100000000, 0, -994), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -993), (Tag3 ((("t", 2452)), [((("b")), 100000000, 0, -989); ((("e")), 100000000, 0, -990)], (0)), 100000000, 0, -992), 0), 100000000, 0, -991), (Tag3 ((("t", 2452)), [((("b")), 100000000, 0, -989); ((("e")), 100000000, 0, -990)], (0)), 100000000, 0, -988), 0), 100000000, 0, -987), 0), 100000000, 0, -986), 0, (("src/monad_intf.ml", 243, 7403, 7405), ("src/monad_intf.ml", 243, 7403, 7490), 0), 0, Tag1 ("Base__Monad_intf", 81)), 0); ((">>|", 2469), ((Tag1 (0, (Tag3 ((("t", 2452)), [((("a")), 100000000, 0, -984); ((("e")), 100000000, 0, -982)], (0)), 100000000, 0, -985), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -984), ((("b")), 100000000, 0, -981), 0), 100000000, 0, -983), (Tag3 ((("t", 2452)), [((("b")), 100000000, 0, -981); ((("e")), 100000000, 0, -982)], (0)), 100000000, 0, -980), 0), 100000000, 0, -979), 0), 100000000, 0, -978), 0, (("src/monad_intf.ml", 243, 7403, 7405), ("src/monad_intf.ml", 243, 7403, 7490), 0), 0, Tag1 ("Base__Monad_intf", 82)), 0); Tag3 (("Let_syntax", 2470), 0, (Tag1 ([(("return", 2471), ((Tag1 (0, ((("a")), 100000000, 0, -1027), (Tag3 ((("t", 2452)), [((("a")), 100000000, 0, -1027); ((0), 100000000, 0, -1028)], (0)), 100000000, 0, -1026), 0), 100000000, 0, -1025), 0, (("src/monad_intf.ml", 243, 7403, 7405), ("src/monad_intf.ml", 243, 7403, 7490), 0), 0, Tag1 ("Base__Monad_intf", 94)), 0); (("bind", 2472), ((Tag1 (0, (Tag3 ((("t", 2452)), [((("a")), 100000000, 0, -1023); ((("e")), 100000000, 0, -1020)], (0)), 100000000, 0, -1024), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -1023), (Tag3 ((("t", 2452)), [((("b")), 100000000, 0, -1019); ((("e")), 100000000, 0, -1020)], (0)), 100000000, 0, -1022), 0), 100000000, 0, -1021), (Tag3 ((("t", 2452)), [((("b")), 100000000, 0, -1019); ((("e")), 100000000, 0, -1020)], (0)), 100000000, 0, -1018), 0), 100000000, 0, -1017), 0), 100000000, 0, -1016), 0, (("src/monad_intf.ml", 243, 7403, 7405), ("src/monad_intf.ml", 243, 7403, 7490), 0), 0, Tag1 ("Base__Monad_intf", 95)), 0); (("map", 2473), ((Tag1 (0, (Tag3 ((("t", 2452)), [((("a")), 100000000, 0, -1014); ((("e")), 100000000, 0, -1012)], (0)), 100000000, 0, -1015), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -1014), ((("b")), 100000000, 0, -1011), 0), 100000000, 0, -1013), (Tag3 ((("t", 2452)), [((("b")), 100000000, 0, -1011); ((("e")), 100000000, 0, -1012)], (0)), 100000000, 0, -1010), 0), 100000000, 0, -1009), 0), 100000000, 0, -1008), 0, (("src/monad_intf.ml", 243, 7403, 7405), ("src/monad_intf.ml", 243, 7403, 7490), 0), 0, Tag1 ("Base__Monad_intf", 96)), 0); (("both", 2474), ((Tag1 (0, (Tag3 ((("t", 2452)), [((("a")), 100000000, 0, -1003); ((("e")), 100000000, 0, -1005)], (0)), 100000000, 0, -1007), (Tag1 (0, (Tag3 ((("t", 2452)), [((("b")), 100000000, 0, -1004); ((("e")), 100000000, 0, -1005)], (0)), 100000000, 0, -1006), (Tag3 ((("t", 2452)), [(Tag2 ([((("a")), 100000000, 0, -1003); ((("b")), 100000000, 0, -1004)]), 100000000, 0, -1002); ((("e")), 100000000, 0, -1005)], (0)), 100000000, 0, -1001), 0), 100000000, 0, -1000), 0), 100000000, 0, -999), 0, (("src/monad_intf.ml", 243, 7403, 7405), ("src/monad_intf.ml", 243, 7403, 7490), 0), 0, Tag1 ("Base__Monad_intf", 97)), 0); Tag3 (("Open_on_rhs", 2475), 0, (Tag1 (0), 0, (("src/monad_intf.ml", 243, 7403, 7405), ("src/monad_intf.ml", 243, 7403, 7490), 0), Tag1 ("Base__Monad_intf", 98)), 0, 0)]), 0, (("src/monad_intf.ml", 243, 7403, 7405), ("src/monad_intf.ml", 243, 7403, 7490), 0), Tag1 ("Base__Monad_intf", 99)), 0, 0)]), 0, (("src/monad_intf.ml", 243, 7403, 7405), ("src/monad_intf.ml", 243, 7403, 7490), 0), Tag1 ("Base__Monad_intf", 100)), 0, 0); Tag3 (("Monad_infix", 2456), 0, (Tag1 ([((">>=", 2476), ((Tag1 (0, (Tag3 ((("t", 2452)), [((("a")), 100000000, 0, -1044); ((("e")), 100000000, 0, -1041)], (0)), 100000000, 0, -1045), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -1044), (Tag3 ((("t", 2452)), [((("b")), 100000000, 0, -1040); ((("e")), 100000000, 0, -1041)], (0)), 100000000, 0, -1043), 0), 100000000, 0, -1042), (Tag3 ((("t", 2452)), [((("b")), 100000000, 0, -1040); ((("e")), 100000000, 0, -1041)], (0)), 100000000, 0, -1039), 0), 100000000, 0, -1038), 0), 100000000, 0, -1037), 0, (("src/monad_intf.ml", 243, 7403, 7405), ("src/monad_intf.ml", 243, 7403, 7490), 0), 0, Tag1 ("Base__Monad_intf", 81)), 0); ((">>|", 2477), ((Tag1 (0, (Tag3 ((("t", 2452)), [((("a")), 100000000, 0, -1035); ((("e")), 100000000, 0, -1033)], (0)), 100000000, 0, -1036), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -1035), ((("b")), 100000000, 0, -1032), 0), 100000000, 0, -1034), (Tag3 ((("t", 2452)), [((("b")), 100000000, 0, -1032); ((("e")), 100000000, 0, -1033)], (0)), 100000000, 0, -1031), 0), 100000000, 0, -1030), 0), 100000000, 0, -1029), 0, (("src/monad_intf.ml", 243, 7403, 7405), ("src/monad_intf.ml", 243, 7403, 7490), 0), 0, Tag1 ("Base__Monad_intf", 82)), 0)]), 0, (("src/monad_intf.ml", 243, 7403, 7405), ("src/monad_intf.ml", 243, 7403, 7490), 0), Tag1 ("Base__Monad_intf", 118)), 0, 0); (("bind", 2457), ((Tag1 (0, (Tag3 ((("t", 2452)), [((("a")), 100000000, 0, -957); ((("e")), 100000000, 0, -954)], (0)), 100000000, 0, -958), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -957), (Tag3 ((("t", 2452)), [((("b")), 100000000, 0, -953); ((("e")), 100000000, 0, -954)], (0)), 100000000, 0, -956), 0), 100000000, 0, -955), (Tag3 ((("t", 2452)), [((("b")), 100000000, 0, -953); ((("e")), 100000000, 0, -954)], (0)), 100000000, 0, -952), 0), 100000000, 0, -951), 0), 100000000, 0, -950), 0, (("src/monad_intf.ml", 243, 7403, 7405), ("src/monad_intf.ml", 243, 7403, 7490), 0), 0, Tag1 ("Base__Monad_intf", 119)), 0); (("return", 2458), ((Tag1 (0, ((("a")), 100000000, 0, -948), (Tag3 ((("t", 2452)), [((("a")), 100000000, 0, -948); ((0), 100000000, 0, -949)], (0)), 100000000, 0, -947), 0), 100000000, 0, -946), 0, (("src/monad_intf.ml", 243, 7403, 7405), ("src/monad_intf.ml", 243, 7403, 7490), 0), 0, Tag1 ("Base__Monad_intf", 120)), 0); (("map", 2459), ((Tag1 (0, (Tag3 ((("t", 2452)), [((("a")), 100000000, 0, -944); ((("e")), 100000000, 0, -942)], (0)), 100000000, 0, -945), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -944), ((("b")), 100000000, 0, -941), 0), 100000000, 0, -943), (Tag3 ((("t", 2452)), [((("b")), 100000000, 0, -941); ((("e")), 100000000, 0, -942)], (0)), 100000000, 0, -940), 0), 100000000, 0, -939), 0), 100000000, 0, -938), 0, (("src/monad_intf.ml", 243, 7403, 7405), ("src/monad_intf.ml", 243, 7403, 7490), 0), 0, Tag1 ("Base__Monad_intf", 121)), 0); (("join", 2460), ((Tag1 (0, (Tag3 ((("t", 2452)), [(Tag3 ((("t", 2452)), [((("a")), 100000000, 0, -934); ((("e")), 100000000, 0, -935)], (0)), 100000000, 0, -937); ((("e")), 100000000, 0, -935)], (0)), 100000000, 0, -936), (Tag3 ((("t", 2452)), [((("a")), 100000000, 0, -934); ((("e")), 100000000, 0, -935)], (0)), 100000000, 0, -933), 0), 100000000, 0, -932), 0, (("src/monad_intf.ml", 243, 7403, 7405), ("src/monad_intf.ml", 243, 7403, 7490), 0), 0, Tag1 ("Base__Monad_intf", 122)), 0); (("ignore_m", 2461), ((Tag1 (0, (Tag3 ((("t", 2452)), [((0), 100000000, 0, -931); ((("e")), 100000000, 0, -929)], (0)), 100000000, 0, -930), (Tag3 ((("t", 2452)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -928); ((("e")), 100000000, 0, -929)], (0)), 100000000, 0, -927), 0), 100000000, 0, -926), 0, (("src/monad_intf.ml", 243, 7403, 7405), ("src/monad_intf.ml", 243, 7403, 7490), 0), 0, Tag1 ("Base__Monad_intf", 123)), 0); (("all", 2462), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 2452)), [((("a")), 100000000, 0, -922); ((("e")), 100000000, 0, -923)], (0)), 100000000, 0, -925)], (0)), 100000000, 0, -924), (Tag3 ((("t", 2452)), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -922)], (0)), 100000000, 0, -921); ((("e")), 100000000, 0, -923)], (0)), 100000000, 0, -920), 0), 100000000, 0, -919), 0, (("src/monad_intf.ml", 243, 7403, 7405), ("src/monad_intf.ml", 243, 7403, 7490), 0), 0, Tag1 ("Base__Monad_intf", 124)), 0); (("all_unit", 2463), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 2452)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -918); ((("e")), 100000000, 0, -915)], (0)), 100000000, 0, -917)], (0)), 100000000, 0, -916), (Tag3 ((("t", 2452)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -914); ((("e")), 100000000, 0, -915)], (0)), 100000000, 0, -913), 0), 100000000, 0, -912), 0, (("src/monad_intf.ml", 243, 7403, 7405), ("src/monad_intf.ml", 243, 7403, 7490), 0), 0, Tag1 ("Base__Monad_intf", 125)), 0); (("yield", 2464), ((Tag1 (0, ((("elt")), 100000000, 0, -911), (Tag3 ((("t", 2452)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -910); ((("elt")), 100000000, 0, -911)], (0)), 100000000, 0, -909), 0), 100000000, 0, -908), 0, (("src/sequence.mli", 470, 19639, 19641), ("src/sequence.mli", 470, 19639, 19675), 0), 0, Tag1 ("Base__Sequence", 113)), 0); (("of_sequence", 2465), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("elt")), 100000000, 0, -906)], (0)), 100000000, 0, -907), (Tag3 ((("t", 2452)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -905); ((("elt")), 100000000, 0, -906)], (0)), 100000000, 0, -904), 0), 100000000, 0, -903), 0, (("src/sequence.mli", 471, 19676, 19678), ("src/sequence.mli", 471, 19676, 19727), 0), 0, Tag1 ("Base__Sequence", 114)), 0); (("run", 2466), ((Tag1 (0, (Tag3 ((("t", 2452)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -902); ((("elt")), 100000000, 0, -900)], (0)), 100000000, 0, -901), (Tag3 ((("t", 2318)), [((("elt")), 100000000, 0, -900)], (0)), 100000000, 0, -899), 0), 100000000, 0, -898), 0, (("src/sequence.mli", 472, 19728, 19730), ("src/sequence.mli", 472, 19728, 19771), 0), 0, Tag1 ("Base__Sequence", 115)), 0)]), 0, (("src/sequence.mli", 467, 19596, 19596), ("src/sequence.mli", 473, 19772, 19775), 0), Tag1 ("Base__Sequence", 116)), 0, 0); Tag3 (("Expert", 2431), 0, (Tag1 ([(("next_step", 2478), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -1062)], (0)), 100000000, 0, -1064), (Tag3 (Tag1 ((("Step", 2358)), "t"), [((("a")), 100000000, 0, -1062); (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -1062)], (0)), 100000000, 0, -1063)], (0)), 100000000, 0, -1061), 0), 100000000, 0, -1060), 0, (("src/sequence.mli", 497, 20532, 20534), ("src/sequence.mli", 497, 20532, 20575), 0), 0, Tag1 ("Base__Sequence", 117)), 0); (("delayed_fold_step", 2479), ((Tag1 (0, (Tag3 ((("t", 2318)), [((("a")), 100000000, 0, -1058)], (0)), 100000000, 0, -1059), (Tag1 (("init"), ((("s")), 100000000, 0, -1052), (Tag1 (("f"), (Tag1 (0, ((("s")), 100000000, 0, -1052), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1058)], (0)), 100000000, 0, -1057), (Tag1 (("k"), (Tag1 (0, ((("s")), 100000000, 0, -1052), ((("r")), 100000000, 0, -1050), 0), 100000000, 0, -1056), ((("r")), 100000000, 0, -1050), 0), 100000000, 0, -1055), 0), 100000000, 0, -1054), 0), 100000000, 0, -1053), (Tag1 (("finish"), (Tag1 (0, ((("s")), 100000000, 0, -1052), ((("r")), 100000000, 0, -1050), 0), 100000000, 0, -1051), ((("r")), 100000000, 0, -1050), 0), 100000000, 0, -1049), 0), 100000000, 0, -1048), 0), 100000000, 0, -1047), 0), 100000000, 0, -1046), 0, (("src/sequence.mli", 501, 20700, 20702), ("src/sequence.mli", 506, 20862, 20871), 0), 0, Tag1 ("Base__Sequence", 118)), 0)]), 0, (("src/sequence.mli", 494, 20371, 20371), ("src/sequence.mli", 507, 20872, 20875), 0), Tag1 ("Base__Sequence", 119)), 0, 0)], "Base__Sequence", [("Base__Sequence", ("{L\140\211\223\183\000\030\151\247FnY\196\210\201")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__StringLabels", ("\134F\024\226\216Is#\223\230\234\169Z\206Gc")); ("Stdlib__StdLabels", (".\193\n\229\139\017\212C-ZA\\kz-\128")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Printf", ("\215<\139]\021\142\224E\245m\198qc(W\229")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__MoreLabels", ("\248\232\248\254`<\230\241\161U\193U\1466J\238")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__ListLabels", ("*\194\012\191\020%\170\249m\002\180\178hk\205\220")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shadow_stdlib", ("\219zi\164\203\158e)\232\221\196\168\138x\142\018")); ("Sexplib0__Sexpable", ("\251${\207(\249/z\242\255\250^\141\156\210e")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv_error", ("kzv!\151~\198P\000\165\176d\007\251p\232")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Base_internalhash_types", ("0\148#2\226\223\018\135\173>!\020\237\017\255\149")); ("Base__Sys0", ("\206z\231\154s\\\136\2364\131\005\014\031\152m3")); ("Base__String0", ("\212\221L\220\245\255\162P\228\224\189\216\135H\149O")); ("Base__Source_code_position0", ("_\003P6\254\029\206\005\130\136\180\019\145\230\000M")); ("Base__Sexp", ("\154\187\171&\209=\153[\236\250!U\174`\190T")); ("Base__Result", ("\204|\215\173FMa\2511<&\215T\194$\228")); ("Base__Printf", ("\000\196c,\214\127\226\174\220\190\253z!\242\028\250")); ("Base__Ppx_hash_lib", ("\199\141\178\193\006\209L\007^\020(\131\224sn8")); ("Base__Ppx_compare_lib", ("\243\186~\233\228\199Ah\181.\223\004e\231\129S")); ("Base__Poly0", ("\230;\143\234\255.H\132KOe7\155\\\023f")); ("Base__Monad_intf", ("\208\203\163\152\184O\130?\012:\168\247}\018\253\155")); ("Base__Monad", ("!\244\168\2352=\137Lm\219\129K\216\199\145\\")); ("Base__Lazy", ("@`\165\196 \235)\136ANe:p\169$\185")); ("Base__Invariant_intf", ("\213\204\238\235\236[\198\145\028\2392\015\243\177S\249")); ("Base__Int0", ("N\1310\012\227\254\000\255_\222!\018\016\003\1779")); ("Base__Indexed_container_intf", ("\179\2213\145j\\\136\tl2\240\006\188j$r")); ("Base__Indexed_container", ("\196\246\213\141\196d\130\002\232\162\144y\149\236\145\218")); ("Base__Import0", ("\156\129U\197Y[\\\153\017Ho\203\173\204\220\020")); ("Base__Import", ("\014\187\247\141\187\181\142g\176:s_,\181\219\209")); ("Base__Hash_intf", ("h\004P\218\1531G\127\212\208A\024\140\164iq")); ("Base__Hash", ("\206Rc\194\234{s3\248\165\024\162\203{\206\206")); ("Base__Globalize", ("<\243w~.\180\196t\159\193\174[\227\139\215G")); ("Base__Field", ("8In\234X\202\188G\186\208$\192\175\136\214v")); ("Base__Either0", ("!9-\011n\2077eZ\212\031c\227\029\206\t")); ("Base__Container_intf", ("\170vo*\208\209\141\219\196\168\236l\016\246\012c")); ("Base__Container", ("\191|>_\153W\235M\180uKz\214w`q")); ("Base__Comparator", ("\002\135z7b\025&\207\t\188\239&U3R\167")); ("Base__Bool0", ("\177f\254p\023\143&\239\020\136\206\242~\018F\251")); ("Base__", ("p\252\007\139\128\163W\025+\0225\001\246|P\158"))], [(0)])


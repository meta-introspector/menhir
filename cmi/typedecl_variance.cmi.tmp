type surface_variance = bool * bool * bool
val variance_of_params :
  (Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list ->
  surface_variance list
val variance_of_sdecl : Parsetree.type_declaration -> surface_variance list
type prop = Types.Variance.t list
type req = surface_variance list
val property : (Types.Variance.t list, req) Typedecl_properties.property
type variance_variable_context =
    Type_declaration of Ident.t * Types.type_declaration
  | Gadt_constructor of Types.constructor_declaration
  | Extension_constructor of Ident.t * Types.extension_constructor
type variance_variable_error =
    No_variable
  | Variance_not_reflected
  | Variance_not_deducible
type variance_error =
    Variance_not_satisfied of int
  | Variance_variable_error of { error : variance_variable_error;
      context : variance_variable_context; variable : Types.type_expr;
    }
type error =
    Bad_variance of variance_error * surface_variance * surface_variance
  | Varying_anonymous
exception Error of Location.t * error
val check_variance_extension :
  Env.t ->
  Types.type_declaration ->
  Typedtree.extension_constructor -> req * Location.t -> unit
val compute_decl :
  Env.t -> check:Ident.t option -> Types.type_declaration -> req -> prop
val update_decls :
  Env.t ->
  Parsetree.type_declaration list ->
  (Ident.t * Types.type_declaration) list ->
  (Ident.t * Types.type_declaration) list
val update_class_decls :
  Env.t ->
  (Ident.t * Typedecl_properties.decl * Types.class_declaration *
   Types.class_type_declaration * 'a Typedtree.class_infos)
  list ->
  (Typedecl_properties.decl * Types.class_declaration *
   Types.class_type_declaration)("DEBUG:rule", [Tag1 (("surface_variance", 884), (0, 0, 0, 1, ((Tag2 ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -89); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -90); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -91)]), 100000000, 0, -88)), 0, 0, 0, 0, (("typing/typedecl_variance.mli", 20, 1193, 1193), ("typing/typedecl_variance.mli", 20, 1193, 1235), 0), 0, 0, 0, Tag1 ("Typedecl_variance", 1)), 1, 0); (("variance_of_params", 885), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Parsetree")), "core_type"), 0, (0)), 100000000, 0, -84); (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "variance"), 0, (0)), 100000000, 0, -86); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "injectivity"), 0, (0)), 100000000, 0, -87)]), 100000000, 0, -85)]), 100000000, 0, -83)], (0)), 100000000, 0, -82), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("surface_variance", 884)), 0, (0)), 100000000, 0, -81)], (0)), 100000000, 0, -80), 0), 100000000, 0, -79), 0, (("typing/typedecl_variance.mli", 22, 1237, 1237), ("typing/typedecl_variance.mli", 24, 1339, 1362), 0), 0, Tag1 ("Typedecl_variance", 4)), 0); (("variance_of_sdecl", 886), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "type_declaration"), 0, (0)), 100000000, 0, -78), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("surface_variance", 884)), 0, (0)), 100000000, 0, -77)], (0)), 100000000, 0, -76), 0), 100000000, 0, -75), 0, (("typing/typedecl_variance.mli", 25, 1363, 1363), ("typing/typedecl_variance.mli", 26, 1387, 1440), 0), 0, Tag1 ("Typedecl_variance", 5)), 0); Tag1 (("prop", 887), (0, 0, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Types")), "Variance"), "t"), 0, (0)), 100000000, 0, -74)], (0)), 100000000, 0, -73)), 0, 0, 0, 0, (("typing/typedecl_variance.mli", 28, 1442, 1442), ("typing/typedecl_variance.mli", 28, 1442, 1469), 0), 0, 0, 0, Tag1 ("Typedecl_variance", 6)), 1, 0); Tag1 (("req", 888), (0, 0, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("surface_variance", 884)), 0, (0)), 100000000, 0, -72)], (0)), 100000000, 0, -71)), 0, 0, 0, 0, (("typing/typedecl_variance.mli", 29, 1470, 1470), ("typing/typedecl_variance.mli", 29, 1470, 1502), 0), 0, 0, 0, Tag1 ("Typedecl_variance", 7)), 1, 0); (("property", 889), ((Tag3 (Tag1 ((Tag2 ("Typedecl_properties")), "property"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Types")), "Variance"), "t"), 0, (0)), 100000000, 0, -69)], (0)), 100000000, 0, -68); (Tag3 ((("req", 888)), 0, (0)), 100000000, 0, -70)], (0)), 100000000, 0, -67), 0, (("typing/typedecl_variance.mli", 30, 1503, 1503), ("typing/typedecl_variance.mli", 30, 1503, 1549), 0), 0, Tag1 ("Typedecl_variance", 8)), 0); Tag1 (("variance_variable_context", 890), (0, 0, Tag1 ([(("Type_declaration", 491), ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -62); (Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -63)]), 0, (("typing/typedecl_variance.mli", 33, 1584, 1586), ("typing/typedecl_variance.mli", 33, 1584, 1634), 0), 0, Tag1 ("Typedecl_variance", 10)); (("Gadt_constructor", 531), ([(Tag3 (Tag1 ((Tag2 ("Types")), "constructor_declaration"), 0, (0)), 100000000, 0, -64)]), 0, (("typing/typedecl_variance.mli", 34, 1635, 1637), ("typing/typedecl_variance.mli", 34, 1635, 1682), 0), 0, Tag1 ("Typedecl_variance", 11)); (("Extension_constructor", 532), ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -65); (Tag3 (Tag1 ((Tag2 ("Types")), "extension_constructor"), 0, (0)), 100000000, 0, -66)]), 0, (("typing/typedecl_variance.mli", 35, 1683, 1685), ("typing/typedecl_variance.mli", 35, 1683, 1743), 0), 0, Tag1 ("Typedecl_variance", 12))], 0), 1, 0, 0, 0, 0, 0, (("typing/typedecl_variance.mli", 32, 1551, 1551), ("typing/typedecl_variance.mli", 35, 1683, 1743), 0), 0, 0, 0, Tag1 ("Typedecl_variance", 9)), 1, 0); Tag1 (("variance_variable_error", 891), (0, 0, Tag1 ([(("No_variable", 534), (0), 0, (("typing/typedecl_variance.mli", 38, 1776, 1778), ("typing/typedecl_variance.mli", 38, 1776, 1791), 0), 0, Tag1 ("Typedecl_variance", 14)); (("Variance_not_reflected", 535), (0), 0, (("typing/typedecl_variance.mli", 39, 1792, 1794), ("typing/typedecl_variance.mli", 39, 1792, 1818), 0), 0, Tag1 ("Typedecl_variance", 15)); (("Variance_not_deducible", 536), (0), 0, (("typing/typedecl_variance.mli", 40, 1819, 1821), ("typing/typedecl_variance.mli", 40, 1819, 1845), 0), 0, Tag1 ("Typedecl_variance", 16))], 0), 1, 0, 0, 0, 0, 0, (("typing/typedecl_variance.mli", 37, 1745, 1745), ("typing/typedecl_variance.mli", 40, 1819, 1845), 0), 0, 1, 0, Tag1 ("Typedecl_variance", 13)), 1, 0); Tag1 (("variance_error", 892), (0, 0, Tag1 ([(("Variance_not_satisfied", 538), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -58)]), 0, (("typing/typedecl_variance.mli", 43, 1869, 1871), ("typing/typedecl_variance.mli", 43, 1869, 1902), 0), 0, Tag1 ("Typedecl_variance", 18)); (("Variance_variable_error", 539), Tag1 ([(("error", 540), 0, (Tag3 ((("variance_variable_error", 891)), 0, (0)), 100000000, 0, -59), (("typing/typedecl_variance.mli", 45, 1936, 1943), ("typing/typedecl_variance.mli", 45, 1936, 1975), 0), 0, Tag1 ("Typedecl_variance", 19)); (("context", 541), 0, (Tag3 ((("variance_variable_context", 890)), 0, (0)), 100000000, 0, -60), (("typing/typedecl_variance.mli", 46, 1976, 1983), ("typing/typedecl_variance.mli", 46, 1976, 2019), 0), 0, Tag1 ("Typedecl_variance", 20)); (("variable", 542), 0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -61), (("typing/typedecl_variance.mli", 47, 2020, 2027), ("typing/typedecl_variance.mli", 47, 2020, 2047), 0), 0, Tag1 ("Typedecl_variance", 21))]), 0, (("typing/typedecl_variance.mli", 44, 1903, 1905), ("typing/typedecl_variance.mli", 48, 2048, 2054), 0), 0, Tag1 ("Typedecl_variance", 22))], 0), 1, 0, 0, 0, 0, 0, (("typing/typedecl_variance.mli", 42, 1847, 1847), ("typing/typedecl_variance.mli", 48, 2048, 2054), 0), 0, 0, 0, Tag1 ("Typedecl_variance", 17)), 1, 0); Tag1 (("error", 893), (0, 0, Tag1 ([(("Bad_variance", 544), ([(Tag3 ((("variance_error", 892)), 0, (0)), 100000000, 0, -55); (Tag3 ((("surface_variance", 884)), 0, (0)), 100000000, 0, -56); (Tag3 ((("surface_variance", 884)), 0, (0)), 100000000, 0, -57)]), 0, (("typing/typedecl_variance.mli", 51, 2069, 2071), ("typing/typedecl_variance.mli", 51, 2069, 2141), 0), 0, Tag1 ("Typedecl_variance", 29)); (("Varying_anonymous", 545), (0), 0, (("typing/typedecl_variance.mli", 52, 2142, 2144), ("typing/typedecl_variance.mli", 52, 2142, 2163), 0), 0, Tag1 ("Typedecl_variance", 30))], 0), 1, 0, 0, 0, 0, 0, (("typing/typedecl_variance.mli", 50, 2056, 2056), ("typing/typedecl_variance.mli", 52, 2142, 2163), 0), 0, 0, 0, Tag1 ("Typedecl_variance", 28)), 1, 0); Tag2 (("Error", 894), ((Tag3 ("exn", 7)), 0, ([(Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -53); (Tag3 ((("error", 893)), 0, (0)), 100000000, 0, -54)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Typedecl_variance", 31)), 2, 0); (("check_variance_extension", 895), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -52), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -51), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "extension_constructor"), 0, (0)), 100000000, 0, -50), (Tag1 (0, (Tag2 ([(Tag3 ((("req", 888)), 0, (0)), 100000000, 0, -48); (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -49)]), 100000000, 0, -47), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -46), 0), 100000000, 0, -45), 0), 100000000, 0, -44), 0), 100000000, 0, -43), 0), 100000000, 0, -42), 0, (("typing/typedecl_variance.mli", 56, 2204, 2204), ("typing/typedecl_variance.mli", 58, 2266, 2327), 0), 0, Tag1 ("Typedecl_variance", 35)), 0); (("compute_decl", 896), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -41), (Tag1 (("check"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -40)], (0)), 100000000, 0, -39), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -38), (Tag1 (0, (Tag3 ((("req", 888)), 0, (0)), 100000000, 0, -37), (Tag3 ((("prop", 887)), 0, (0)), 100000000, 0, -36), 0), 100000000, 0, -35), 0), 100000000, 0, -34), 0), 100000000, 0, -33), 0), 100000000, 0, -32), 0, (("typing/typedecl_variance.mli", 60, 2329, 2329), ("typing/typedecl_variance.mli", 61, 2348, 2414), 0), 0, Tag1 ("Typedecl_variance", 36)), 0); (("update_decls", 897), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -31), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Parsetree")), "type_declaration"), 0, (0)), 100000000, 0, -30)], (0)), 100000000, 0, -29), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -27); (Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -28)]), 100000000, 0, -26)], (0)), 100000000, 0, -25), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -23); (Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -24)]), 100000000, 0, -22)], (0)), 100000000, 0, -21), 0), 100000000, 0, -20), 0), 100000000, 0, -19), 0), 100000000, 0, -18), 0, (("typing/typedecl_variance.mli", 63, 2416, 2416), ("typing/typedecl_variance.mli", 66, 2520, 2555), 0), 0, Tag1 ("Typedecl_variance", 37)), 0); (("update_class_decls", 898), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -17), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -11); (Tag3 (Tag1 ((Tag2 ("Typedecl_properties")), "decl"), 0, (0)), 100000000, 0, -12); (Tag3 (Tag1 ((Tag2 ("Types")), "class_declaration"), 0, (0)), 100000000, 0, -13); (Tag3 (Tag1 ((Tag2 ("Types")), "class_type_declaration"), 0, (0)), 100000000, 0, -14); (Tag3 (Tag1 ((Tag2 ("Typedtree")), "class_infos"), [((("a")), 100000000, 0, -16)], (0)), 100000000, 0, -15)]), 100000000, 0, -10)], (0)), 100000000, 0, -9), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Typedecl_properties")), "decl"), 0, (0)), 100000000, 0, -6); (Tag3 (Tag1 ((Tag2 ("Types")), "class_declaration"), 0, (0)), 100000000, 0, -7); (Tag3 (Tag1 ((Tag2 ("Types")), "class_type_declaration"), 0, (0)), 100000000, 0, -8)]), 100000000, 0, -5)], (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("typing/typedecl_variance.mli", 68, 2557, 2557), ("typing/typedecl_variance.mli", 74, 2760, 2823), 0), 0, Tag1 ("Typedecl_variance", 38)), 0)], "Typedecl_variance", [("Typedecl_variance", ("c\128\170O\186*z\228\021\240\145S\164uU\012")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Types", ("\177\238\029.\220\006\163!\230\015\006\182\133\155\194\166")); ("Typedtree", ("c5z\186\175w\146\254\018V\184\031\0038\004\227")); ("Typedecl_properties", ("8\017\156\232&y#yd\205g\209\004wc\220")); ("Type_immediacy", ("\"\127k\011Q\241\211\138\193;8\142\129\141#\251")); ("Subst", ("\021\031\148\223\127\186\189\135\027}\145r\216\143\177\156")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shape", ("\235\127Y\213\025\137=\244\218\181\248N\189\188\216p")); ("Primitive", ("}Shh\162\015|\220A\203\249\232\245G\213\019")); ("Path", ("\012\183\178\025\1298\228*\021r\185\160Y\252\n\026")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Outcometree", ("9\021%\234\211\206\210\004H\165\208\2014\234Q\142")); ("Misc", ("*\026\026\234c\191\131\161\\\203\183\012O\252\153\198")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Load_path", ("\012@\228l\230\164S\172h\1726X\020\252o}")); ("Identifiable", ("\004F\207\014\158GU\001\184\214\187%/#;\211")); ("Ident", ("\b9;!\187.\220\163(x\b\174\\\223\020\004")); ("Env", ("\021\n\181\142x\b\169j\227\"\017\248*\178\245\223")); ("Cmi_format", ("6\177\bU\139\"\023\152=\249\135\174\b\011Cg")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Build_path_prefix_map", ("y\028\167\207D\220\198\216\011\208\172\149\2416\bc")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216"))], [(0)])

  list

module type MONAD = GenM_intf.MONAD
module Make :
  functor (M : MONAD) ->
    sig
      module M :
        sig
          type 'a t = 'a M.t
          val return : 'a -> 'a t
          val ( >>= ) : 'a t -> ('a -> 'b t) -> 'b t
          val ( >|= ) : 'a t -> ('a -> 'b) -> 'b t
        end
      type 'a t = unit -> 'a option M.t
      val return : 'a -> 'a t
      val sequence_m : 'a M.t GenM_intf.gen -> 'a t
      val map : ('a -> 'b) -> 'a t -> 'b t
      val flat_map : ('a -> 'b t) -> 'a t -> 'b t
      val fold : ('a -> 'b -> 'a) -> 'a -> 'b t -> 'a M.t
      val fold_m : ('a -> 'b -> 'a M.t) -> 'a -> 'b t -> 'a M.t
      val iter : ('a -> unit) -> 'a t -> unit M.t
      val iter_s : ('a -> unit M.t) -> 'a t -> unit M.t
      val iter_p : ('a -> unit M.t) -> 'a t -> unit M.t
      module Infix :
        sig
          val ( >>= ) : 'a t -> ('a -> 'b t) -> 'b t
          val ( >|= ) : 'a t -> ('a -> 'b) -> 'b t
        end
      val ( >>= ) : 'a t -> ('a -> 'b t) -> 'b t
      val ( >|= ) : 'a t -> ('a -> 'b) -> 'b t("DEBUG:rule", [Tag4 (("MONAD", 316), (((Tag1 ((Tag2 ("GenM_intf")), "MONAD"))), 0, (("src/genM.mli", 10, 162, 162), ("src/genM.mli", 10, 162, 197), 0), Tag1 ("GenM", 0)), 0); Tag3 (("Make", 317), 0, (Tag2 (((("M", 318)), ((("MONAD", 316)))), Tag1 ([Tag3 (("M", 319), 0, (Tag1 ([Tag1 (("t", 333), ([((("a")), 100000000, 0, -109)], 1, 0, 1, ((Tag3 (Tag1 ((("M", 318)), "t"), [((("a")), 100000000, 0, -109)], (0)), 100000000, 0, -108)), [1], [2], 0, 0, (("src/genM_intf.ml", 7, 143, 145), ("src/genM_intf.ml", 7, 143, 155), 0), 0, 0, 0, Tag1 ("GenM_intf", 1)), 1, 0); (("return", 334), ((Tag1 (0, ((("a")), 100000000, 0, -107), (Tag3 ((("t", 333)), [((("a")), 100000000, 0, -107)], (0)), 100000000, 0, -106), 0), 100000000, 0, -105), 0, (("src/genM_intf.ml", 9, 157, 159), ("src/genM_intf.ml", 9, 157, 182), 0), 0, Tag1 ("GenM_intf", 2)), 0); ((">>=", 335), ((Tag1 (0, (Tag3 ((("t", 333)), [((("a")), 100000000, 0, -103)], (0)), 100000000, 0, -104), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -103), (Tag3 ((("t", 333)), [((("b")), 100000000, 0, -100)], (0)), 100000000, 0, -102), 0), 100000000, 0, -101), (Tag3 ((("t", 333)), [((("b")), 100000000, 0, -100)], (0)), 100000000, 0, -99), 0), 100000000, 0, -98), 0), 100000000, 0, -97), 0, (("src/genM_intf.ml", 10, 183, 185), ("src/genM_intf.ml", 10, 183, 225), 0), 0, Tag1 ("GenM_intf", 3)), 0); ((">|=", 336), ((Tag1 (0, (Tag3 ((("t", 333)), [((("a")), 100000000, 0, -95)], (0)), 100000000, 0, -96), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -95), ((("b")), 100000000, 0, -93), 0), 100000000, 0, -94), (Tag3 ((("t", 333)), [((("b")), 100000000, 0, -93)], (0)), 100000000, 0, -92), 0), 100000000, 0, -91), 0), 100000000, 0, -90), 0, (("src/genM_intf.ml", 11, 226, 228), ("src/genM_intf.ml", 11, 226, 266), 0), 0, Tag1 ("GenM_intf", 4)), 0)]), 0, (("src/genM.mli", 12, 199, 211), ("src/genM.mli", 12, 199, 212), 0), Tag1 ("GenM", 1)), 0, 0); Tag1 (("t", 320), ([((("a")), 100000000, 0, -88)], 1, 0, 1, ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -89), (Tag3 (Tag1 ((("M", 319)), "t"), [(Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -88)], (0)), 100000000, 0, -87)], (0)), 100000000, 0, -86), 0), 100000000, 0, -85)), [1], [0], 0, 0, (("src/genM_intf.ml", 17, 312, 314), ("src/genM_intf.ml", 17, 312, 348), 0), 0, 0, 0, Tag1 ("GenM_intf", 7)), 1, 0); (("return", 321), ((Tag1 (0, ((("a")), 100000000, 0, -84), (Tag3 ((("t", 320)), [((("a")), 100000000, 0, -84)], (0)), 100000000, 0, -83), 0), 100000000, 0, -82), 0, (("src/genM_intf.ml", 22, 573, 575), ("src/genM_intf.ml", 22, 573, 598), 0), 0, Tag1 ("GenM_intf", 8)), 0); (("sequence_m", 322), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("GenM_intf")), "gen"), [(Tag3 (Tag1 ((("M", 319)), "t"), [((("a")), 100000000, 0, -79)], (0)), 100000000, 0, -81)], (0)), 100000000, 0, -80), (Tag3 ((("t", 320)), [((("a")), 100000000, 0, -79)], (0)), 100000000, 0, -78), 0), 100000000, 0, -77), 0, (("src/genM_intf.ml", 24, 600, 602), ("src/genM_intf.ml", 24, 600, 637), 0), 0, Tag1 ("GenM_intf", 9)), 0); (("map", 323), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -75), ((("b")), 100000000, 0, -73), 0), 100000000, 0, -76), (Tag1 (0, (Tag3 ((("t", 320)), [((("a")), 100000000, 0, -75)], (0)), 100000000, 0, -74), (Tag3 ((("t", 320)), [((("b")), 100000000, 0, -73)], (0)), 100000000, 0, -72), 0), 100000000, 0, -71), 0), 100000000, 0, -70), 0, (("src/genM_intf.ml", 27, 707, 709), ("src/genM_intf.ml", 27, 707, 745), 0), 0, Tag1 ("GenM_intf", 10)), 0); (("flat_map", 324), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -67), (Tag3 ((("t", 320)), [((("b")), 100000000, 0, -65)], (0)), 100000000, 0, -69), 0), 100000000, 0, -68), (Tag1 (0, (Tag3 ((("t", 320)), [((("a")), 100000000, 0, -67)], (0)), 100000000, 0, -66), (Tag3 ((("t", 320)), [((("b")), 100000000, 0, -65)], (0)), 100000000, 0, -64), 0), 100000000, 0, -63), 0), 100000000, 0, -62), 0, (("src/genM_intf.ml", 29, 747, 749), ("src/genM_intf.ml", 29, 747, 792), 0), 0, Tag1 ("GenM_intf", 11)), 0); (("fold", 325), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -57), (Tag1 (0, ((("b")), 100000000, 0, -59), ((("a")), 100000000, 0, -57), 0), 100000000, 0, -61), 0), 100000000, 0, -60), (Tag1 (0, ((("a")), 100000000, 0, -57), (Tag1 (0, (Tag3 ((("t", 320)), [((("b")), 100000000, 0, -59)], (0)), 100000000, 0, -58), (Tag3 (Tag1 ((("M", 319)), "t"), [((("a")), 100000000, 0, -57)], (0)), 100000000, 0, -56), 0), 100000000, 0, -55), 0), 100000000, 0, -54), 0), 100000000, 0, -53), 0, (("src/genM_intf.ml", 31, 794, 796), ("src/genM_intf.ml", 31, 794, 847), 0), 0, Tag1 ("GenM_intf", 12)), 0); (("fold_m", 326), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -47), (Tag1 (0, ((("b")), 100000000, 0, -49), (Tag3 (Tag1 ((("M", 319)), "t"), [((("a")), 100000000, 0, -47)], (0)), 100000000, 0, -52), 0), 100000000, 0, -51), 0), 100000000, 0, -50), (Tag1 (0, ((("a")), 100000000, 0, -47), (Tag1 (0, (Tag3 ((("t", 320)), [((("b")), 100000000, 0, -49)], (0)), 100000000, 0, -48), (Tag3 (Tag1 ((("M", 319)), "t"), [((("a")), 100000000, 0, -47)], (0)), 100000000, 0, -46), 0), 100000000, 0, -45), 0), 100000000, 0, -44), 0), 100000000, 0, -43), 0, (("src/genM_intf.ml", 33, 849, 851), ("src/genM_intf.ml", 33, 849, 908), 0), 0, Tag1 ("GenM_intf", 13)), 0); (("iter", 327), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -40), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -42), 0), 100000000, 0, -41), (Tag1 (0, (Tag3 ((("t", 320)), [((("a")), 100000000, 0, -40)], (0)), 100000000, 0, -39), (Tag3 (Tag1 ((("M", 319)), "t"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -38)], (0)), 100000000, 0, -37), 0), 100000000, 0, -36), 0), 100000000, 0, -35), 0, (("src/genM_intf.ml", 35, 910, 912), ("src/genM_intf.ml", 35, 910, 955), 0), 0, Tag1 ("GenM_intf", 14)), 0); (("iter_s", 328), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -31), (Tag3 (Tag1 ((("M", 319)), "t"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -34)], (0)), 100000000, 0, -33), 0), 100000000, 0, -32), (Tag1 (0, (Tag3 ((("t", 320)), [((("a")), 100000000, 0, -31)], (0)), 100000000, 0, -30), (Tag3 (Tag1 ((("M", 319)), "t"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -29)], (0)), 100000000, 0, -28), 0), 100000000, 0, -27), 0), 100000000, 0, -26), 0, (("src/genM_intf.ml", 37, 957, 959), ("src/genM_intf.ml", 37, 957, 1008), 0), 0, Tag1 ("GenM_intf", 15)), 0); (("iter_p", 329), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -22), (Tag3 (Tag1 ((("M", 319)), "t"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -25)], (0)), 100000000, 0, -24), 0), 100000000, 0, -23), (Tag1 (0, (Tag3 ((("t", 320)), [((("a")), 100000000, 0, -22)], (0)), 100000000, 0, -21), (Tag3 (Tag1 ((("M", 319)), "t"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -20)], (0)), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("src/genM_intf.ml", 39, 1010, 1012), ("src/genM_intf.ml", 39, 1010, 1061), 0), 0, Tag1 ("GenM_intf", 16)), 0); Tag3 (("Infix", 330), 0, (Tag1 ([((">>=", 337), ((Tag1 (0, (Tag3 ((("t", 320)), [((("a")), 100000000, 0, -123)], (0)), 100000000, 0, -124), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -123), (Tag3 ((("t", 320)), [((("b")), 100000000, 0, -120)], (0)), 100000000, 0, -122), 0), 100000000, 0, -121), (Tag3 ((("t", 320)), [((("b")), 100000000, 0, -120)], (0)), 100000000, 0, -119), 0), 100000000, 0, -118), 0), 100000000, 0, -117), 0, (("src/genM_intf.ml", 42, 1084, 1088), ("src/genM_intf.ml", 42, 1084, 1128), 0), 0, Tag1 ("GenM_intf", 17)), 0); ((">|=", 338), ((Tag1 (0, (Tag3 ((("t", 320)), [((("a")), 100000000, 0, -115)], (0)), 100000000, 0, -116), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -115), ((("b")), 100000000, 0, -113), 0), 100000000, 0, -114), (Tag3 ((("t", 320)), [((("b")), 100000000, 0, -113)], (0)), 100000000, 0, -112), 0), 100000000, 0, -111), 0), 100000000, 0, -110), 0, (("src/genM_intf.ml", 43, 1129, 1133), ("src/genM_intf.ml", 43, 1129, 1171), 0), 0, Tag1 ("GenM_intf", 18)), 0)]), 0, (("src/genM_intf.ml", 41, 1063, 1065), ("src/genM_intf.ml", 44, 1172, 1177), 0), Tag1 ("GenM_intf", 19)), 0, 0); ((">>=", 331), ((Tag1 (0, (Tag3 ((("t", 320)), [((("a")), 100000000, 0, -15)], (0)), 100000000, 0, -16), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -15), (Tag3 ((("t", 320)), [((("b")), 100000000, 0, -12)], (0)), 100000000, 0, -14), 0), 100000000, 0, -13), (Tag3 ((("t", 320)), [((("b")), 100000000, 0, -12)], (0)), 100000000, 0, -11), 0), 100000000, 0, -10), 0), 100000000, 0, -9), 0, (("src/genM_intf.ml", 42, 1084, 1088), ("src/genM_intf.ml", 42, 1084, 1128), 0), 0, Tag1 ("GenM_intf", 17)), 0); ((">|=", 332), ((Tag1 (0, (Tag3 ((("t", 320)), [((("a")), 100000000, 0, -7)], (0)), 100000000, 0, -8), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -7), ((("b")), 100000000, 0, -5), 0), 100000000, 0, -6), (Tag3 ((("t", 320)), [((("b")), 100000000, 0, -5)], (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/genM_intf.ml", 43, 1129, 1133), ("src/genM_intf.ml", 43, 1129, 1171), 0), 0, Tag1 ("GenM_intf", 18)), 0)])), 0, (("src/genM.mli", 12, 199, 199), ("src/genM.mli", 12, 199, 253), 0), Tag1 ("GenM", 2)), 0, 0)], "GenM", [("GenM", ("\\y]k\150\152*\239\015\235\211\150\183#M<")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("GenM_intf", ("\011R\031K\203\151f\237I>\159\177\199\005\217-")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

    end

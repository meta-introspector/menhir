type mapper = {
  attribute : mapper -> Typedtree.attribute -> Typedtree.attribute;
  attributes : mapper -> Typedtree.attributes -> Typedtree.attributes;
  binding_op : mapper -> Typedtree.binding_op -> Typedtree.binding_op;
  case : 'k. mapper -> 'k Typedtree.case -> 'k Typedtree.case;
  class_declaration :
    mapper -> Typedtree.class_declaration -> Typedtree.class_declaration;
  class_description :
    mapper -> Typedtree.class_description -> Typedtree.class_description;
  class_expr : mapper -> Typedtree.class_expr -> Typedtree.class_expr;
  class_field : mapper -> Typedtree.class_field -> Typedtree.class_field;
  class_signature :
    mapper -> Typedtree.class_signature -> Typedtree.class_signature;
  class_structure :
    mapper -> Typedtree.class_structure -> Typedtree.class_structure;
  class_type : mapper -> Typedtree.class_type -> Typedtree.class_type;
  class_type_declaration :
    mapper ->
    Typedtree.class_type_declaration -> Typedtree.class_type_declaration;
  class_type_field :
    mapper -> Typedtree.class_type_field -> Typedtree.class_type_field;
  env : mapper -> Env.t -> Env.t;
  expr : mapper -> Typedtree.expression -> Typedtree.expression;
  extension_constructor :
    mapper ->
    Typedtree.extension_constructor -> Typedtree.extension_constructor;
  location : mapper -> Location.t -> Location.t;
  module_binding :
    mapper -> Typedtree.module_binding -> Typedtree.module_binding;
  module_coercion :
    mapper -> Typedtree.module_coercion -> Typedtree.module_coercion;
  module_declaration :
    mapper -> Typedtree.module_declaration -> Typedtree.module_declaration;
  module_substitution :
    mapper -> Typedtree.module_substitution -> Typedtree.module_substitution;
  module_expr : mapper -> Typedtree.module_expr -> Typedtree.module_expr;
  module_type : mapper -> Typedtree.module_type -> Typedtree.module_type;
  module_type_declaration :
    mapper ->
    Typedtree.module_type_declaration -> Typedtree.module_type_declaration;
  package_type : mapper -> Typedtree.package_type -> Typedtree.package_type;
  pat :
    'k.
      mapper -> 'k Typedtree.general_pattern -> 'k Typedtree.general_pattern;
  row_field : mapper -> Typedtree.row_field -> Typedtree.row_field;
  object_field : mapper -> Typedtree.object_field -> Typedtree.object_field;
  open_declaration :
    mapper -> Typedtree.open_declaration -> Typedtree.open_declaration;
  open_description :
    mapper -> Typedtree.open_description -> Typedtree.open_description;
  signature : mapper -> Typedtree.signature -> Typedtree.signature;
  signature_item :
    mapper -> Typedtree.signature_item -> Typedtree.signature_item;
  structure : mapper -> Typedtree.structure -> Typedtree.structure;
  structure_item :
    mapper -> Typedtree.structure_item -> Typedtree.structure_item;
  typ : mapper -> Typedtree.core_type -> Typedtree.core_type;
  type_declaration :
    mapper -> Typedtree.type_declaration -> Typedtree.type_declaration;
  type_declarations :
    mapper ->
    Asttypes.rec_flag * Typedtree.type_declaration list ->
    Asttypes.rec_flag * Typedtree.type_declaration list;
  type_extension :
    mapper -> Typedtree.type_extension -> Typedtree.type_extension;
  type_exception :
    mapper -> Typedtree.type_exception -> Typedtree.type_exception;
  type_kind : mapper -> Typedtree.type_kind -> Typedtree.type_kind;
  value_binding :
    mapper -> Typedtree.value_binding -> Typedtree.value_binding;
  value_bindings :
    mapper ->
    Asttypes.rec_flag * Typedtree.value_binding list ->
    Asttypes.rec_flag * Typedtree.value_binding list;
  value_description :
    mapper -> Typedtree.value_description -> Typedtree.value_description;
  with_constraint :
    mapper -> Typedtree.with_constraint -> Typedtree.with_constraint;
}("DEBUG:rule", [Tag1 (("mapper", 783), (0, 0, [[(("attribute", 382), 0, (Tag1 (0, (Tag3 ((("mapper", 783)), 0, (0)), 100000000, 0, -7), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "attribute"), 0, (0)), 100000000, 0, -6), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "attribute"), 0, (0)), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), (("typing/tast_mapper.mli", 23, 1166, 1170), ("typing/tast_mapper.mli", 23, 1166, 1215), 0), 0, Tag1 ("Tast_mapper", 4)); (("attributes", 383), 0, (Tag1 (0, (Tag3 ((("mapper", 783)), 0, (0)), 100000000, 0, -12), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "attributes"), 0, (0)), 100000000, 0, -11), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "attributes"), 0, (0)), 100000000, 0, -10), 0), 100000000, 0, -9), 0), 100000000, 0, -8), (("typing/tast_mapper.mli", 24, 1216, 1220), ("typing/tast_mapper.mli", 24, 1216, 1268), 0), 0, Tag1 ("Tast_mapper", 5)); (("binding_op", 384), 0, (Tag1 (0, (Tag3 ((("mapper", 783)), 0, (0)), 100000000, 0, -17), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "binding_op"), 0, (0)), 100000000, 0, -16), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "binding_op"), 0, (0)), 100000000, 0, -15), 0), 100000000, 0, -14), 0), 100000000, 0, -13), (("typing/tast_mapper.mli", 25, 1269, 1273), ("typing/tast_mapper.mli", 25, 1269, 1320), 0), 0, Tag1 ("Tast_mapper", 6)); (("case", 385), 0, (Tag10 ((Tag1 (0, (Tag3 ((("mapper", 783)), 0, (0)), 100000000, 0, -24), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "case"), [(Tag9 (("k")), 100000000, 0, -19)], (0)), 100000000, 0, -23), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "case"), [(Tag9 (("k")), 100000000, 0, -19)], (0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0), 100000000, 0, -20), [(Tag9 (("k")), 100000000, 0, -19)]), 100000000, 0, -18), (("typing/tast_mapper.mli", 26, 1321, 1325), ("typing/tast_mapper.mli", 26, 1321, 1365), 0), 0, Tag1 ("Tast_mapper", 7)); (("class_declaration", 386), 0, (Tag1 (0, (Tag3 ((("mapper", 783)), 0, (0)), 100000000, 0, -29), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "class_declaration"), 0, (0)), 100000000, 0, -28), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "class_declaration"), 0, (0)), 100000000, 0, -27), 0), 100000000, 0, -26), 0), 100000000, 0, -25), (("typing/tast_mapper.mli", 27, 1366, 1370), ("typing/tast_mapper.mli", 27, 1366, 1438), 0), 0, Tag1 ("Tast_mapper", 8)); (("class_description", 387), 0, (Tag1 (0, (Tag3 ((("mapper", 783)), 0, (0)), 100000000, 0, -34), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "class_description"), 0, (0)), 100000000, 0, -33), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "class_description"), 0, (0)), 100000000, 0, -32), 0), 100000000, 0, -31), 0), 100000000, 0, -30), (("typing/tast_mapper.mli", 28, 1439, 1443), ("typing/tast_mapper.mli", 28, 1439, 1511), 0), 0, Tag1 ("Tast_mapper", 9)); (("class_expr", 388), 0, (Tag1 (0, (Tag3 ((("mapper", 783)), 0, (0)), 100000000, 0, -39), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "class_expr"), 0, (0)), 100000000, 0, -38), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "class_expr"), 0, (0)), 100000000, 0, -37), 0), 100000000, 0, -36), 0), 100000000, 0, -35), (("typing/tast_mapper.mli", 29, 1512, 1516), ("typing/tast_mapper.mli", 29, 1512, 1563), 0), 0, Tag1 ("Tast_mapper", 10)); (("class_field", 389), 0, (Tag1 (0, (Tag3 ((("mapper", 783)), 0, (0)), 100000000, 0, -44), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "class_field"), 0, (0)), 100000000, 0, -43), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "class_field"), 0, (0)), 100000000, 0, -42), 0), 100000000, 0, -41), 0), 100000000, 0, -40), (("typing/tast_mapper.mli", 30, 1564, 1568), ("typing/tast_mapper.mli", 30, 1564, 1618), 0), 0, Tag1 ("Tast_mapper", 11)); (("class_signature", 390), 0, (Tag1 (0, (Tag3 ((("mapper", 783)), 0, (0)), 100000000, 0, -49), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "class_signature"), 0, (0)), 100000000, 0, -48), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "class_signature"), 0, (0)), 100000000, 0, -47), 0), 100000000, 0, -46), 0), 100000000, 0, -45), (("typing/tast_mapper.mli", 31, 1619, 1623), ("typing/tast_mapper.mli", 31, 1619, 1685), 0), 0, Tag1 ("Tast_mapper", 12)); (("class_structure", 391), 0, (Tag1 (0, (Tag3 ((("mapper", 783)), 0, (0)), 100000000, 0, -54), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "class_structure"), 0, (0)), 100000000, 0, -53), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "class_structure"), 0, (0)), 100000000, 0, -52), 0), 100000000, 0, -51), 0), 100000000, 0, -50), (("typing/tast_mapper.mli", 32, 1686, 1690), ("typing/tast_mapper.mli", 32, 1686, 1752), 0), 0, Tag1 ("Tast_mapper", 13)); (("class_type", 392), 0, (Tag1 (0, (Tag3 ((("mapper", 783)), 0, (0)), 100000000, 0, -59), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "class_type"), 0, (0)), 100000000, 0, -58), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "class_type"), 0, (0)), 100000000, 0, -57), 0), 100000000, 0, -56), 0), 100000000, 0, -55), (("typing/tast_mapper.mli", 33, 1753, 1757), ("typing/tast_mapper.mli", 33, 1753, 1804), 0), 0, Tag1 ("Tast_mapper", 14)); (("class_type_declaration", 393), 0, (Tag1 (0, (Tag3 ((("mapper", 783)), 0, (0)), 100000000, 0, -64), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "class_type_declaration"), 0, (0)), 100000000, 0, -63), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "class_type_declaration"), 0, (0)), 100000000, 0, -62), 0), 100000000, 0, -61), 0), 100000000, 0, -60), (("typing/tast_mapper.mli", 34, 1805, 1809), ("typing/tast_mapper.mli", 35, 1869, 1898), 0), 0, Tag1 ("Tast_mapper", 15)); (("class_type_field", 394), 0, (Tag1 (0, (Tag3 ((("mapper", 783)), 0, (0)), 100000000, 0, -69), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "class_type_field"), 0, (0)), 100000000, 0, -68), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "class_type_field"), 0, (0)), 100000000, 0, -67), 0), 100000000, 0, -66), 0), 100000000, 0, -65), (("typing/tast_mapper.mli", 36, 1899, 1903), ("typing/tast_mapper.mli", 36, 1899, 1968), 0), 0, Tag1 ("Tast_mapper", 16)); (("env", 563), 0, (Tag1 (0, (Tag3 ((("mapper", 783)), 0, (0)), 100000000, 0, -74), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -73), (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -72), 0), 100000000, 0, -71), 0), 100000000, 0, -70), (("typing/tast_mapper.mli", 37, 1969, 1973), ("typing/tast_mapper.mli", 37, 1969, 2003), 0), 0, Tag1 ("Tast_mapper", 17)); (("expr", 564), 0, (Tag1 (0, (Tag3 ((("mapper", 783)), 0, (0)), 100000000, 0, -79), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "expression"), 0, (0)), 100000000, 0, -78), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "expression"), 0, (0)), 100000000, 0, -77), 0), 100000000, 0, -76), 0), 100000000, 0, -75), (("typing/tast_mapper.mli", 38, 2004, 2008), ("typing/tast_mapper.mli", 38, 2004, 2049), 0), 0, Tag1 ("Tast_mapper", 18)); (("extension_constructor", 565), 0, (Tag1 (0, (Tag3 ((("mapper", 783)), 0, (0)), 100000000, 0, -84), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "extension_constructor"), 0, (0)), 100000000, 0, -83), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "extension_constructor"), 0, (0)), 100000000, 0, -82), 0), 100000000, 0, -81), 0), 100000000, 0, -80), (("typing/tast_mapper.mli", 39, 2050, 2054), ("typing/tast_mapper.mli", 40, 2112, 2140), 0), 0, Tag1 ("Tast_mapper", 19)); (("location", 632), 0, (Tag1 (0, (Tag3 ((("mapper", 783)), 0, (0)), 100000000, 0, -89), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -88), (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -87), 0), 100000000, 0, -86), 0), 100000000, 0, -85), (("typing/tast_mapper.mli", 41, 2141, 2145), ("typing/tast_mapper.mli", 41, 2141, 2190), 0), 0, Tag1 ("Tast_mapper", 20)); (("module_binding", 633), 0, (Tag1 (0, (Tag3 ((("mapper", 783)), 0, (0)), 100000000, 0, -94), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_binding"), 0, (0)), 100000000, 0, -93), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_binding"), 0, (0)), 100000000, 0, -92), 0), 100000000, 0, -91), 0), 100000000, 0, -90), (("typing/tast_mapper.mli", 42, 2191, 2195), ("typing/tast_mapper.mli", 42, 2191, 2254), 0), 0, Tag1 ("Tast_mapper", 21)); (("module_coercion", 634), 0, (Tag1 (0, (Tag3 ((("mapper", 783)), 0, (0)), 100000000, 0, -99), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_coercion"), 0, (0)), 100000000, 0, -98), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_coercion"), 0, (0)), 100000000, 0, -97), 0), 100000000, 0, -96), 0), 100000000, 0, -95), (("typing/tast_mapper.mli", 43, 2255, 2259), ("typing/tast_mapper.mli", 43, 2255, 2321), 0), 0, Tag1 ("Tast_mapper", 22)); (("module_declaration", 635), 0, (Tag1 (0, (Tag3 ((("mapper", 783)), 0, (0)), 100000000, 0, -104), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_declaration"), 0, (0)), 100000000, 0, -103), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_declaration"), 0, (0)), 100000000, 0, -102), 0), 100000000, 0, -101), 0), 100000000, 0, -100), (("typing/tast_mapper.mli", 44, 2322, 2326), ("typing/tast_mapper.mli", 44, 2322, 2397), 0), 0, Tag1 ("Tast_mapper", 23)); (("module_substitution", 636), 0, (Tag1 (0, (Tag3 ((("mapper", 783)), 0, (0)), 100000000, 0, -109), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_substitution"), 0, (0)), 100000000, 0, -108), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_substitution"), 0, (0)), 100000000, 0, -107), 0), 100000000, 0, -106), 0), 100000000, 0, -105), (("typing/tast_mapper.mli", 45, 2398, 2402), ("typing/tast_mapper.mli", 45, 2398, 2476), 0), 0, Tag1 ("Tast_mapper", 24)); (("module_expr", 637), 0, (Tag1 (0, (Tag3 ((("mapper", 783)), 0, (0)), 100000000, 0, -114), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_expr"), 0, (0)), 100000000, 0, -113), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_expr"), 0, (0)), 100000000, 0, -112), 0), 100000000, 0, -111), 0), 100000000, 0, -110), (("typing/tast_mapper.mli", 46, 2477, 2481), ("typing/tast_mapper.mli", 46, 2477, 2531), 0), 0, Tag1 ("Tast_mapper", 25)); (("module_type", 638), 0, (Tag1 (0, (Tag3 ((("mapper", 783)), 0, (0)), 100000000, 0, -119), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_type"), 0, (0)), 100000000, 0, -118), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_type"), 0, (0)), 100000000, 0, -117), 0), 100000000, 0, -116), 0), 100000000, 0, -115), (("typing/tast_mapper.mli", 47, 2532, 2536), ("typing/tast_mapper.mli", 47, 2532, 2586), 0), 0, Tag1 ("Tast_mapper", 26)); (("module_type_declaration", 639), 0, (Tag1 (0, (Tag3 ((("mapper", 783)), 0, (0)), 100000000, 0, -124), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_type_declaration"), 0, (0)), 100000000, 0, -123), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_type_declaration"), 0, (0)), 100000000, 0, -122), 0), 100000000, 0, -121), 0), 100000000, 0, -120), (("typing/tast_mapper.mli", 48, 2587, 2591), ("typing/tast_mapper.mli", 49, 2616, 2683), 0), 0, Tag1 ("Tast_mapper", 27)); (("package_type", 640), 0, (Tag1 (0, (Tag3 ((("mapper", 783)), 0, (0)), 100000000, 0, -129), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "package_type"), 0, (0)), 100000000, 0, -128), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "package_type"), 0, (0)), 100000000, 0, -127), 0), 100000000, 0, -126), 0), 100000000, 0, -125), (("typing/tast_mapper.mli", 50, 2684, 2688), ("typing/tast_mapper.mli", 50, 2684, 2741), 0), 0, Tag1 ("Tast_mapper", 28)); (("pat", 641), 0, (Tag10 ((Tag1 (0, (Tag3 ((("mapper", 783)), 0, (0)), 100000000, 0, -136), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "general_pattern"), [(Tag9 (("k")), 100000000, 0, -131)], (0)), 100000000, 0, -135), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "general_pattern"), [(Tag9 (("k")), 100000000, 0, -131)], (0)), 100000000, 0, -134), 0), 100000000, 0, -133), 0), 100000000, 0, -132), [(Tag9 (("k")), 100000000, 0, -131)]), 100000000, 0, -130), (("typing/tast_mapper.mli", 51, 2742, 2746), ("typing/tast_mapper.mli", 51, 2742, 2807), 0), 0, Tag1 ("Tast_mapper", 29)); (("row_field", 642), 0, (Tag1 (0, (Tag3 ((("mapper", 783)), 0, (0)), 100000000, 0, -141), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "row_field"), 0, (0)), 100000000, 0, -140), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "row_field"), 0, (0)), 100000000, 0, -139), 0), 100000000, 0, -138), 0), 100000000, 0, -137), (("typing/tast_mapper.mli", 52, 2808, 2812), ("typing/tast_mapper.mli", 52, 2808, 2856), 0), 0, Tag1 ("Tast_mapper", 30)); (("object_field", 643), 0, (Tag1 (0, (Tag3 ((("mapper", 783)), 0, (0)), 100000000, 0, -146), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "object_field"), 0, (0)), 100000000, 0, -145), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "object_field"), 0, (0)), 100000000, 0, -144), 0), 100000000, 0, -143), 0), 100000000, 0, -142), (("typing/tast_mapper.mli", 53, 2857, 2861), ("typing/tast_mapper.mli", 53, 2857, 2914), 0), 0, Tag1 ("Tast_mapper", 31)); (("open_declaration", 644), 0, (Tag1 (0, (Tag3 ((("mapper", 783)), 0, (0)), 100000000, 0, -151), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "open_declaration"), 0, (0)), 100000000, 0, -150), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "open_declaration"), 0, (0)), 100000000, 0, -149), 0), 100000000, 0, -148), 0), 100000000, 0, -147), (("typing/tast_mapper.mli", 54, 2915, 2919), ("typing/tast_mapper.mli", 54, 2915, 2984), 0), 0, Tag1 ("Tast_mapper", 32)); (("open_description", 645), 0, (Tag1 (0, (Tag3 ((("mapper", 783)), 0, (0)), 100000000, 0, -156), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "open_description"), 0, (0)), 100000000, 0, -155), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "open_description"), 0, (0)), 100000000, 0, -154), 0), 100000000, 0, -153), 0), 100000000, 0, -152), (("typing/tast_mapper.mli", 55, 2985, 2989), ("typing/tast_mapper.mli", 55, 2985, 3054), 0), 0, Tag1 ("Tast_mapper", 33)); (("signature", 646), 0, (Tag1 (0, (Tag3 ((("mapper", 783)), 0, (0)), 100000000, 0, -161), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "signature"), 0, (0)), 100000000, 0, -160), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "signature"), 0, (0)), 100000000, 0, -159), 0), 100000000, 0, -158), 0), 100000000, 0, -157), (("typing/tast_mapper.mli", 56, 3055, 3059), ("typing/tast_mapper.mli", 56, 3055, 3103), 0), 0, Tag1 ("Tast_mapper", 34)); (("signature_item", 647), 0, (Tag1 (0, (Tag3 ((("mapper", 783)), 0, (0)), 100000000, 0, -166), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "signature_item"), 0, (0)), 100000000, 0, -165), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "signature_item"), 0, (0)), 100000000, 0, -164), 0), 100000000, 0, -163), 0), 100000000, 0, -162), (("typing/tast_mapper.mli", 57, 3104, 3108), ("typing/tast_mapper.mli", 57, 3104, 3167), 0), 0, Tag1 ("Tast_mapper", 35)); (("structure", 648), 0, (Tag1 (0, (Tag3 ((("mapper", 783)), 0, (0)), 100000000, 0, -171), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "structure"), 0, (0)), 100000000, 0, -170), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "structure"), 0, (0)), 100000000, 0, -169), 0), 100000000, 0, -168), 0), 100000000, 0, -167), (("typing/tast_mapper.mli", 58, 3168, 3172), ("typing/tast_mapper.mli", 58, 3168, 3216), 0), 0, Tag1 ("Tast_mapper", 36)); (("structure_item", 649), 0, (Tag1 (0, (Tag3 ((("mapper", 783)), 0, (0)), 100000000, 0, -176), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "structure_item"), 0, (0)), 100000000, 0, -175), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "structure_item"), 0, (0)), 100000000, 0, -174), 0), 100000000, 0, -173), 0), 100000000, 0, -172), (("typing/tast_mapper.mli", 59, 3217, 3221), ("typing/tast_mapper.mli", 59, 3217, 3280), 0), 0, Tag1 ("Tast_mapper", 37)); (("typ", 650), 0, (Tag1 (0, (Tag3 ((("mapper", 783)), 0, (0)), 100000000, 0, -181), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "core_type"), 0, (0)), 100000000, 0, -180), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "core_type"), 0, (0)), 100000000, 0, -179), 0), 100000000, 0, -178), 0), 100000000, 0, -177), (("typing/tast_mapper.mli", 60, 3281, 3285), ("typing/tast_mapper.mli", 60, 3281, 3323), 0), 0, Tag1 ("Tast_mapper", 38)); (("type_declaration", 651), 0, (Tag1 (0, (Tag3 ((("mapper", 783)), 0, (0)), 100000000, 0, -186), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "type_declaration"), 0, (0)), 100000000, 0, -185), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "type_declaration"), 0, (0)), 100000000, 0, -184), 0), 100000000, 0, -183), 0), 100000000, 0, -182), (("typing/tast_mapper.mli", 61, 3324, 3328), ("typing/tast_mapper.mli", 61, 3324, 3393), 0), 0, Tag1 ("Tast_mapper", 39)); (("type_declarations", 652), 0, (Tag1 (0, (Tag3 ((("mapper", 783)), 0, (0)), 100000000, 0, -197), (Tag1 (0, (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "rec_flag"), 0, (0)), 100000000, 0, -194); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "type_declaration"), 0, (0)), 100000000, 0, -196)], (0)), 100000000, 0, -195)]), 100000000, 0, -193), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "rec_flag"), 0, (0)), 100000000, 0, -190); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "type_declaration"), 0, (0)), 100000000, 0, -192)], (0)), 100000000, 0, -191)]), 100000000, 0, -189), 0), 100000000, 0, -188), 0), 100000000, 0, -187), (("typing/tast_mapper.mli", 62, 3394, 3398), ("typing/tast_mapper.mli", 63, 3462, 3506), 0), 0, Tag1 ("Tast_mapper", 40)); (("type_extension", 653), 0, (Tag1 (0, (Tag3 ((("mapper", 783)), 0, (0)), 100000000, 0, -202), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "type_extension"), 0, (0)), 100000000, 0, -201), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "type_extension"), 0, (0)), 100000000, 0, -200), 0), 100000000, 0, -199), 0), 100000000, 0, -198), (("typing/tast_mapper.mli", 64, 3507, 3511), ("typing/tast_mapper.mli", 64, 3507, 3570), 0), 0, Tag1 ("Tast_mapper", 41)); (("type_exception", 654), 0, (Tag1 (0, (Tag3 ((("mapper", 783)), 0, (0)), 100000000, 0, -207), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "type_exception"), 0, (0)), 100000000, 0, -206), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "type_exception"), 0, (0)), 100000000, 0, -205), 0), 100000000, 0, -204), 0), 100000000, 0, -203), (("typing/tast_mapper.mli", 65, 3571, 3575), ("typing/tast_mapper.mli", 65, 3571, 3634), 0), 0, Tag1 ("Tast_mapper", 42)); (("type_kind", 655), 0, (Tag1 (0, (Tag3 ((("mapper", 783)), 0, (0)), 100000000, 0, -212), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "type_kind"), 0, (0)), 100000000, 0, -211), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "type_kind"), 0, (0)), 100000000, 0, -210), 0), 100000000, 0, -209), 0), 100000000, 0, -208), (("typing/tast_mapper.mli", 66, 3635, 3639), ("typing/tast_mapper.mli", 66, 3635, 3683), 0), 0, Tag1 ("Tast_mapper", 43)); (("value_binding", 656), 0, (Tag1 (0, (Tag3 ((("mapper", 783)), 0, (0)), 100000000, 0, -217), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "value_binding"), 0, (0)), 100000000, 0, -216), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "value_binding"), 0, (0)), 100000000, 0, -215), 0), 100000000, 0, -214), 0), 100000000, 0, -213), (("typing/tast_mapper.mli", 67, 3684, 3688), ("typing/tast_mapper.mli", 67, 3684, 3744), 0), 0, Tag1 ("Tast_mapper", 44)); (("value_bindings", 657), 0, (Tag1 (0, (Tag3 ((("mapper", 783)), 0, (0)), 100000000, 0, -228), (Tag1 (0, (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "rec_flag"), 0, (0)), 100000000, 0, -225); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "value_binding"), 0, (0)), 100000000, 0, -227)], (0)), 100000000, 0, -226)]), 100000000, 0, -224), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "rec_flag"), 0, (0)), 100000000, 0, -221); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "value_binding"), 0, (0)), 100000000, 0, -223)], (0)), 100000000, 0, -222)]), 100000000, 0, -220), 0), 100000000, 0, -219), 0), 100000000, 0, -218), (("typing/tast_mapper.mli", 68, 3745, 3749), ("typing/tast_mapper.mli", 69, 3810, 3848), 0), 0, Tag1 ("Tast_mapper", 45)); (("value_description", 658), 0, (Tag1 (0, (Tag3 ((("mapper", 783)), 0, (0)), 100000000, 0, -233), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "value_description"), 0, (0)), 100000000, 0, -232), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "value_description"), 0, (0)), 100000000, 0, -231), 0), 100000000, 0, -230), 0), 100000000, 0, -229), (("typing/tast_mapper.mli", 70, 3849, 3853), ("typing/tast_mapper.mli", 70, 3849, 3921), 0), 0, Tag1 ("Tast_mapper", 46)); (("with_constraint", 659), 0, (Tag1 (0, (Tag3 ((("mapper", 783)), 0, (0)), 100000000, 0, -238), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "with_constraint"), 0, (0)), 100000000, 0, -237), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "with_constraint"), 0, (0)), 100000000, 0, -236), 0), 100000000, 0, -235), 0), 100000000, 0, -234), (("typing/tast_mapper.mli", 71, 3922, 3926), ("typing/tast_mapper.mli", 71, 3922, 3988), 0), 0, Tag1 ("Tast_mapper", 47))]], 1, 0, 0, 0, 0, 0, (("typing/tast_mapper.mli", 21, 1148, 1148), ("typing/tast_mapper.mli", 72, 3989, 3992), 0), 0, 0, 0, Tag1 ("Tast_mapper", 3)), 1, 0); (("default", 784), ((Tag3 ((("mapper", 783)), 0, (0)), 100000000, 0, -2), 0, (("typing/tast_mapper.mli", 75, 3995, 3995), ("typing/tast_mapper.mli", 75, 3995, 4014), 0), 0, Tag1 ("Tast_mapper", 50)), 0)], "Tast_mapper", [("Tast_mapper", ("\194$\223\141\211\1976YR\191\127\253\016\169\018\234")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Types", ("\177\238\029.\220\006\163!\230\015\006\182\133\155\194\166")); ("Typedtree", ("c5z\186\175w\146\254\018V\184\031\0038\004\227")); ("Type_immediacy", ("\"\127k\011Q\241\211\138\193;8\142\129\141#\251")); ("Subst", ("\021\031\148\223\127\186\189\135\027}\145r\216\143\177\156")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shape", ("\235\127Y\213\025\137=\244\218\181\248N\189\188\216p")); ("Primitive", ("}Shh\162\015|\220A\203\249\232\245G\213\019")); ("Path", ("\012\183\178\025\1298\228*\021r\185\160Y\252\n\026")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Outcometree", ("9\021%\234\211\206\210\004H\165\208\2014\234Q\142")); ("Misc", ("*\026\026\234c\191\131\161\\\203\183\012O\252\153\198")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Load_path", ("\012@\228l\230\164S\172h\1726X\020\252o}")); ("Identifiable", ("\004F\207\014\158GU\001\184\214\187%/#;\211")); ("Ident", ("\b9;!\187.\220\163(x\b\174\\\223\020\004")); ("Env", ("\021\n\181\142x\b\169j\227\"\017\248*\178\245\223")); ("Cmi_format", ("6\177\bU\139\"\023\152=\249\135\174\b\011Cg")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Build_path_prefix_map", ("y\028\167\207D\220\198\216\011\208\172\149\2416\bc")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216"))], [(0)])

val default : mapper

type raw_symbol = string * Lexing.position * Lexing.position
type raw_nonterminal = raw_symbol
type raw_terminal = raw_symbol
type raw_sentence = raw_nonterminal option * raw_terminal list
type located_raw_sentence = Dune__exe.Positions.positions * raw_sentence
type sentence =
    Dune__exe.Grammar.Nonterminal.t option *
    Dune__exe.Grammar.Terminal.t list
type located_sentence = Dune__exe.Positions.positions * sentence
type comment = string
type 'a or_comment = Thing of 'a | Comment of comment
val or_comment_iter : ('a -> unit) -> 'a or_comment -> unit
val or_comment_fold : ('a -> 'b -> 'a) -> 'a -> 'b or_comment -> 'a
val or_comment_map : ('a -> 'b) -> 'a or_comment -> 'b or_comment
val or_comment_filter_map : ('a -> 'b) -> 'a or_comment -> 'b option
val or_comment_count : int -> 'a or_comment -> int
("DEBUG:rule", [Tag1 (("raw_symbol", 753), (0, 0, 0, 1, ((Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -62); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -63); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -64)]), 100000000, 0, -61)), 0, 0, 0, 0, (("src/sentenceParserAux.ml", 16, 1021, 1021), ("src/sentenceParserAux.ml", 17, 1039, 1083), 0), 0, 0, 0, Tag1 ("Dune__exe__SentenceParserAux", 0)), 1, 0); Tag1 (("raw_nonterminal", 754), (0, 0, 0, 1, ((Tag3 ((("raw_symbol", 753)), 0, (0)), 100000000, 0, -60)), 0, 0, 0, 0, (("src/sentenceParserAux.ml", 19, 1085, 1085), ("src/sentenceParserAux.ml", 20, 1108, 1120), 0), 0, 0, 0, Tag1 ("Dune__exe__SentenceParserAux", 1)), 1, 0); Tag1 (("raw_terminal", 755), (0, 0, 0, 1, ((Tag3 ((("raw_symbol", 753)), 0, (0)), 100000000, 0, -59)), 0, 0, 0, 0, (("src/sentenceParserAux.ml", 22, 1122, 1122), ("src/sentenceParserAux.ml", 23, 1142, 1154), 0), 0, 0, 0, Tag1 ("Dune__exe__SentenceParserAux", 2)), 1, 0); Tag1 (("raw_sentence", 756), (0, 0, 0, 1, ((Tag2 ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("raw_nonterminal", 754)), 0, (0)), 100000000, 0, -56)], (0)), 100000000, 0, -55); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("raw_terminal", 755)), 0, (0)), 100000000, 0, -58)], (0)), 100000000, 0, -57)]), 100000000, 0, -54)), 0, 0, 0, 0, (("src/sentenceParserAux.ml", 25, 1156, 1156), ("src/sentenceParserAux.ml", 26, 1176, 1220), 0), 0, 0, 0, Tag1 ("Dune__exe__SentenceParserAux", 3)), 1, 0); Tag1 (("located_raw_sentence", 757), (0, 0, 0, 1, ((Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Positions"), "positions"), 0, (0)), 100000000, 0, -52); (Tag3 ((("raw_sentence", 756)), 0, (0)), 100000000, 0, -53)]), 100000000, 0, -51)), 0, 0, 0, 0, (("src/sentenceParserAux.ml", 28, 1222, 1222), ("src/sentenceParserAux.ml", 29, 1250, 1286), 0), 0, 0, 0, Tag1 ("Dune__exe__SentenceParserAux", 4)), 1, 0); Tag1 (("sentence", 758), (0, 0, 0, 1, ((Tag2 ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Grammar"), "Nonterminal"), "t"), 0, (0)), 100000000, 0, -48)], (0)), 100000000, 0, -47); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Grammar"), "Terminal"), "t"), 0, (0)), 100000000, 0, -50)], (0)), 100000000, 0, -49)]), 100000000, 0, -46)), 0, 0, 0, 0, (("src/sentenceParserAux.ml", 31, 1288, 1288), ("src/sentenceParserAux.ml", 32, 1304, 1344), 0), 0, 0, 0, Tag1 ("Dune__exe__SentenceParserAux", 5)), 1, 0); Tag1 (("located_sentence", 759), (0, 0, 0, 1, ((Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Positions"), "positions"), 0, (0)), 100000000, 0, -44); (Tag3 ((("sentence", 758)), 0, (0)), 100000000, 0, -45)]), 100000000, 0, -43)), 0, 0, 0, 0, (("src/sentenceParserAux.ml", 34, 1346, 1346), ("src/sentenceParserAux.ml", 35, 1370, 1402), 0), 0, 0, 0, Tag1 ("Dune__exe__SentenceParserAux", 6)), 1, 0); Tag1 (("comment", 760), (0, 0, 0, 1, ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -42)), 0, 0, 0, 0, (("src/sentenceParserAux.ml", 37, 1404, 1404), ("src/sentenceParserAux.ml", 38, 1419, 1427), 0), 0, 0, 0, Tag1 ("Dune__exe__SentenceParserAux", 7)), 1, 0); Tag1 (("or_comment", 761), ([((("a")), 100000000, 0, -40)], 1, Tag1 ([(("Thing", 656), ([((("a")), 100000000, 0, -40)]), 0, (("src/sentenceParserAux.ml", 41, 1450, 1450), ("src/sentenceParserAux.ml", 41, 1450, 1463), 0), 0, Tag1 ("Dune__exe__SentenceParserAux", 9)); (("Comment", 657), ([(Tag3 ((("comment", 760)), 0, (0)), 100000000, 0, -41)]), 0, (("src/sentenceParserAux.ml", 42, 1464, 1464), ("src/sentenceParserAux.ml", 42, 1464, 1484), 0), 0, Tag1 ("Dune__exe__SentenceParserAux", 10))], 0), 1, 0, [25], [0], 0, 0, (("src/sentenceParserAux.ml", 40, 1429, 1429), ("src/sentenceParserAux.ml", 42, 1464, 1484), 0), 0, 0, 0, Tag1 ("Dune__exe__SentenceParserAux", 8)), 1, 0); (("or_comment_iter", 762), ((Tag1 (0, (Tag1 (0, ((0), 100000000, 0, -38), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -36), (1)), 100000000, 0, -39), (Tag1 (0, (Tag3 ((("or_comment", 761)), [((0), 100000000, 0, -38)], (0)), 100000000, 0, -37), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -36), 0), 100000000, 0, -35), 0), 100000000, 0, -34), 0, (("src/sentenceParserAux.ml", 44, 1486, 1490), ("src/sentenceParserAux.ml", 44, 1486, 1505), 0), 0, Tag1 ("Dune__exe__SentenceParserAux", 11)), 0); (("or_comment_fold", 763), ((Tag1 (0, (Tag1 (0, ((0), 100000000, 0, -29), (Tag1 (0, ((0), 100000000, 0, -31), ((0), 100000000, 0, -29), (1)), 100000000, 0, -33), (1)), 100000000, 0, -32), (Tag1 (0, ((0), 100000000, 0, -29), (Tag1 (0, (Tag3 ((("or_comment", 761)), [((0), 100000000, 0, -31)], (0)), 100000000, 0, -30), ((0), 100000000, 0, -29), 0), 100000000, 0, -28), 0), 100000000, 0, -27), 0), 100000000, 0, -26), 0, (("src/sentenceParserAux.ml", 50, 1571, 1575), ("src/sentenceParserAux.ml", 50, 1571, 1590), 0), 0, Tag1 ("Dune__exe__SentenceParserAux", 14)), 0); (("or_comment_map", 764), ((Tag1 (0, (Tag1 (0, ((0), 100000000, 0, -24), ((0), 100000000, 0, -22), (1)), 100000000, 0, -25), (Tag1 (0, (Tag3 ((("or_comment", 761)), [((0), 100000000, 0, -24)], (0)), 100000000, 0, -23), (Tag3 ((("or_comment", 761)), [((0), 100000000, 0, -22)], (0)), 100000000, 0, -21), 0), 100000000, 0, -20), 0), 100000000, 0, -19), 0, (("src/sentenceParserAux.ml", 56, 1668, 1672), ("src/sentenceParserAux.ml", 56, 1668, 1686), 0), 0, Tag1 ("Dune__exe__SentenceParserAux", 18)), 0); (("or_comment_filter_map", 765), ((Tag1 (0, (Tag1 (0, ((0), 100000000, 0, -17), ((0), 100000000, 0, -15), (1)), 100000000, 0, -18), (Tag1 (0, (Tag3 ((("or_comment", 761)), [((0), 100000000, 0, -17)], (0)), 100000000, 0, -16), (Tag3 ((Tag3 ("option", 10)), [((0), 100000000, 0, -15)], (0)), 100000000, 0, -14), 0), 100000000, 0, -13), 0), 100000000, 0, -12), 0, (("src/sentenceParserAux.ml", 62, 1767, 1771), ("src/sentenceParserAux.ml", 62, 1767, 1792), 0), 0, Tag1 ("Dune__exe__SentenceParserAux", 22)), 0); (("or_comment_count", 766), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -9), (Tag1 (0, (Tag3 ((("or_comment", 761)), [((0), 100000000, 0, -11)], (0)), 100000000, 0, -10), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0), 100000000, 0, -7), 0, (("src/sentenceParserAux.ml", 68, 1867, 1871), ("src/sentenceParserAux.ml", 68, 1867, 1887), 0), 0, Tag1 ("Dune__exe__SentenceParserAux", 25)), 0); (("count_things", 767), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("or_comment", 761)), [((("a")), 100000000, 0, -6)], (0)), 100000000, 0, -5)], (0)), 100000000, 0, -4), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/sentenceParserAux.ml", 74, 1963, 1967), ("src/sentenceParserAux.ml", 74, 1963, 1979), 0), 0, Tag1 ("Dune__exe__SentenceParserAux", 27)), 0)], "Dune__exe__SentenceParserAux", [("Dune__exe__SentenceParserAux", ("\173\219\129yp\006^\210\134-%\228H\017J\250")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("MenhirSdk__Keyword", ("\171\145\177^\199\189\197f\150\136y\144\252\234>\178")); ("MenhirSdk", ("F\232\012\196l\143\145[\255\2193U\197\027\176\139")); ("Dune__exe__Syntax", ("\002\205\007\164\2347\133\182\245*x\171\004\190\178\171")); ("Dune__exe__StringSet", ("uB\206\020%\219\199\135&\196,\015\190\015^\230")); ("Dune__exe__StringMap", ("\157\157\161k*M\030\254|\006>\144X\147j\222")); ("Dune__exe__Stretch", ("\003\145~\207\198HL&\187\195e'0\204\200\156")); ("Dune__exe__Settings", ("I\214\245\150\238/\2211\219\145S\218\004a:1")); ("Dune__exe__Positions", ("\137nS\236\011\187\r[\024:\162/\201\139\237}")); ("Dune__exe__InputFile", (",\0246\029z@\127T\235\227k~\t\138\213%")); ("Dune__exe__IL", ("\194\228\178\190\251\254\231\226\207\197c\133\253i\220\170")); ("Dune__exe__GrammarFunctor", ("\139\015m\230\161\218\014\241\156v\017\182\017=\215\030")); ("Dune__exe__Grammar", ("\206h\026\183\149X\202a=\181,\16851\132e")); ("Dune__exe__GSet", ("\246\0066\220ky~\0042_c\205p\186\249\170")); ("Dune__exe__GMap", ("z5C\250t+\028\210\224\015Z'{U-\242")); ("Dune__exe__Front", ("\148\176\180\242\232x\020\016\239\205>I\021\\n*")); ("Dune__exe__BasicSyntax", ("\219\025F6\236\222\186\020\209\135\130+\131\228\012\003")); ("Dune__exe__Action", ("c\225H \249\179\190\007`[X\019\132@\208\193")); ("Dune__exe", ("\137\000\197\175$\007]\218\141\248\172\212\146c\153\212")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
val count_things : 'a or_comment list -> int

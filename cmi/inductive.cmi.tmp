val find_rectype :
  Environ.env -> Constr.types -> Constr.pinductive * Constr.constr list
val find_inductive :
  Environ.env -> Constr.types -> Constr.pinductive * Constr.constr list
val find_coinductive :
  Environ.env -> Constr.types -> Constr.pinductive * Constr.constr list
val lookup_mind_specif :
  Environ.env -> Names.inductive -> Declarations.mind_specif
val inductive_paramdecls :
  Declarations.mutual_inductive_body Univ.puniverses -> Constr.rel_context
val inductive_nonrec_rec_paramdecls :
  Declarations.mutual_inductive_body Univ.puniverses ->
  Constr.rel_context * Constr.rel_context
val instantiate_inductive_constraints :
  Declarations.mutual_inductive_body -> Univ.Instance.t -> Univ.Constraints.t
type template_univ = TemplateProp | TemplateUniv of Univ.Universe.t
type param_univs = (expected:Univ.Level.t -> template_univ) list
val constrained_type_of_inductive :
  Declarations.mind_specif Univ.puniverses -> Constr.types Univ.constrained
val constrained_type_of_inductive_knowing_parameters :
  Declarations.mind_specif Univ.puniverses ->
  param_univs -> Constr.types Univ.constrained
val relevance_of_inductive :
  Environ.env -> Names.inductive -> Sorts.relevance
val type_of_inductive :
  Declarations.mind_specif Univ.puniverses -> Constr.types
val type_of_inductive_knowing_parameters :
  ?polyprop:bool ->
  Declarations.mind_specif Univ.puniverses -> param_univs -> Constr.types
val elim_sort : Declarations.mind_specif -> Sorts.family
val is_private : Declarations.mind_specif -> bool
val is_primitive_record : Declarations.mind_specif -> bool
val constrained_type_of_constructor :
  Constr.pconstructor ->
  Declarations.mind_specif -> Constr.types Univ.constrained
val type_of_constructor :
  Constr.pconstructor -> Declarations.mind_specif -> Constr.types
val arities_of_constructors :
  Constr.pinductive -> Declarations.mind_specif -> Constr.types array
val type_of_constructors :
  Constr.pinductive -> Declarations.mind_specif -> Constr.types array
val abstract_constructor_type_relatively_to_inductive_types_context :
  int -> Names.MutInd.t -> Constr.types -> Constr.types
val inductive_params : Declarations.mind_specif -> int
val expand_arity :
  Declarations.mind_specif ->
  Constr.pinductive ->
  Constr.constr array ->
  Names.Name.t Context.binder_annot array -> Constr.rel_context
val expand_case :
  Environ.env ->
  Constr.case ->
  Constr.case_info * Constr.constr * Constr.case_invert * Constr.constr *
  Constr.constr array
val expand_case_specif :
  Declarations.mutual_inductive_body ->
  Constr.case ->
  Constr.case_info * Constr.constr * Constr.case_invert * Constr.constr *
  Constr.constr array
val contract_case :
  Environ.env ->
  Constr.case_info * Constr.constr * Constr.case_invert * Constr.constr *
  Constr.constr array -> Constr.case
val instantiate_context :
  Univ.Instance.t ->
  Vars.substl ->
  Names.Name.t Context.binder_annot array ->
  Constr.rel_context -> Constr.rel_context
val build_branches_type :
  Constr.pinductive ->
  Declarations.mutual_inductive_body * Declarations.one_inductive_body ->
  Constr.constr list -> Constr.constr -> Constr.types array
val mind_arity :
  Declarations.one_inductive_body -> Constr.rel_context * Sorts.family
val inductive_sort_family : Declarations.one_inductive_body -> Sorts.family
val check_case_info :
  Environ.env ->
  Constr.pinductive -> Sorts.relevance -> Constr.case_info -> unit
val is_primitive_positive_container : Environ.env -> Names.Constant.t -> bool
val check_fix : Environ.env -> Constr.fixpoint -> unit
val check_cofix : Environ.env -> Constr.cofixpoint -> unit
exception SingletonInductiveBecomesProp of Names.Id.t
val abstract_mind_lc :
  int ->
  int ->
  Names.MutInd.t ->
  ("DEBUG:rule", [(("find_rectype", 1021), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -237), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -236), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constr")), "pinductive"), 0, (0)), 100000000, 0, -233); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -235)], (0)), 100000000, 0, -234)]), 100000000, 0, -232), 0), 100000000, 0, -231), 0), 100000000, 0, -230), 0, (("kernel/inductive.mli", 25, 1103, 1103), ("kernel/inductive.mli", 25, 1103, 1166), 0), 0, Tag1 ("Inductive", 1)), 0); (("find_inductive", 1022), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -229), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -228), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constr")), "pinductive"), 0, (0)), 100000000, 0, -225); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -227)], (0)), 100000000, 0, -226)]), 100000000, 0, -224), 0), 100000000, 0, -223), 0), 100000000, 0, -222), 0, (("kernel/inductive.mli", 26, 1167, 1167), ("kernel/inductive.mli", 26, 1167, 1230), 0), 0, Tag1 ("Inductive", 2)), 0); (("find_coinductive", 1023), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -221), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -220), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constr")), "pinductive"), 0, (0)), 100000000, 0, -217); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -219)], (0)), 100000000, 0, -218)]), 100000000, 0, -216), 0), 100000000, 0, -215), 0), 100000000, 0, -214), 0, (("kernel/inductive.mli", 27, 1231, 1231), ("kernel/inductive.mli", 27, 1231, 1294), 0), 0, Tag1 ("Inductive", 3)), 0); (("lookup_mind_specif", 1024), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -213), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -212), (Tag3 (Tag1 ((Tag2 ("Declarations")), "mind_specif"), 0, (0)), 100000000, 0, -211), 0), 100000000, 0, -210), 0), 100000000, 0, -209), 0, (("kernel/inductive.mli", 32, 1442, 1442), ("kernel/inductive.mli", 32, 1442, 1498), 0), 0, Tag1 ("Inductive", 4)), 0); (("inductive_paramdecls", 1025), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Univ")), "puniverses"), [(Tag3 (Tag1 ((Tag2 ("Declarations")), "mutual_inductive_body"), 0, (0)), 100000000, 0, -208)], (0)), 100000000, 0, -207), (Tag3 (Tag1 ((Tag2 ("Constr")), "rel_context"), 0, (0)), 100000000, 0, -206), 0), 100000000, 0, -205), 0, (("kernel/inductive.mli", 37, 1647, 1647), ("kernel/inductive.mli", 37, 1647, 1728), 0), 0, Tag1 ("Inductive", 5)), 0); (("inductive_nonrec_rec_paramdecls", 1026), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Univ")), "puniverses"), [(Tag3 (Tag1 ((Tag2 ("Declarations")), "mutual_inductive_body"), 0, (0)), 100000000, 0, -204)], (0)), 100000000, 0, -203), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constr")), "rel_context"), 0, (0)), 100000000, 0, -201); (Tag3 (Tag1 ((Tag2 ("Constr")), "rel_context"), 0, (0)), 100000000, 0, -202)]), 100000000, 0, -200), 0), 100000000, 0, -199), 0, (("kernel/inductive.mli", 42, 1911, 1911), ("kernel/inductive.mli", 42, 1911, 2024), 0), 0, Tag1 ("Inductive", 6)), 0); (("instantiate_inductive_constraints", 1027), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "mutual_inductive_body"), 0, (0)), 100000000, 0, -198), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Instance"), "t"), 0, (0)), 100000000, 0, -197), (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Constraints"), "t"), 0, (0)), 100000000, 0, -196), 0), 100000000, 0, -195), 0), 100000000, 0, -194), 0, (("kernel/inductive.mli", 44, 2026, 2026), ("kernel/inductive.mli", 45, 2066, 2120), 0), 0, Tag1 ("Inductive", 7)), 0); Tag1 (("template_univ", 1028), (0, 0, Tag1 ([(("TemplateProp", 809), (0), 0, (("kernel/inductive.mli", 48, 2143, 2145), ("kernel/inductive.mli", 48, 2143, 2159), 0), 0, Tag1 ("Inductive", 9)); (("TemplateUniv", 810), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Universe"), "t"), 0, (0)), 100000000, 0, -193)]), 0, (("kernel/inductive.mli", 49, 2160, 2162), ("kernel/inductive.mli", 49, 2160, 2190), 0), 0, Tag1 ("Inductive", 10))], 0), 1, 0, 0, 0, 0, 0, (("kernel/inductive.mli", 47, 2122, 2122), ("kernel/inductive.mli", 49, 2160, 2190), 0), 0, 0, 0, Tag1 ("Inductive", 8)), 1, 0); Tag1 (("param_univs", 1029), (0, 0, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag1 (("expected"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Level"), "t"), 0, (0)), 100000000, 0, -192), (Tag3 ((("template_univ", 1028)), 0, (0)), 100000000, 0, -191), 0), 100000000, 0, -190)], (0)), 100000000, 0, -189)), 0, 0, 0, 0, (("kernel/inductive.mli", 51, 2192, 2192), ("kernel/inductive.mli", 51, 2192, 2256), 0), 0, 0, 0, Tag1 ("Inductive", 11)), 1, 0); (("constrained_type_of_inductive", 1030), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Univ")), "puniverses"), [(Tag3 (Tag1 ((Tag2 ("Declarations")), "mind_specif"), 0, (0)), 100000000, 0, -188)], (0)), 100000000, 0, -187), (Tag3 (Tag1 ((Tag2 ("Univ")), "constrained"), [(Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -186)], (0)), 100000000, 0, -185), 0), 100000000, 0, -184), 0, (("kernel/inductive.mli", 53, 2258, 2258), ("kernel/inductive.mli", 53, 2258, 2337), 0), 0, Tag1 ("Inductive", 12)), 0); (("constrained_type_of_inductive_knowing_parameters", 1031), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Univ")), "puniverses"), [(Tag3 (Tag1 ((Tag2 ("Declarations")), "mind_specif"), 0, (0)), 100000000, 0, -183)], (0)), 100000000, 0, -182), (Tag1 (0, (Tag3 ((("param_univs", 1029)), 0, (0)), 100000000, 0, -181), (Tag3 (Tag1 ((Tag2 ("Univ")), "constrained"), [(Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -180)], (0)), 100000000, 0, -179), 0), 100000000, 0, -178), 0), 100000000, 0, -177), 0, (("kernel/inductive.mli", 54, 2338, 2338), ("kernel/inductive.mli", 55, 2393, 2453), 0), 0, Tag1 ("Inductive", 13)), 0); (("relevance_of_inductive", 1032), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -176), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -175), (Tag3 (Tag1 ((Tag2 ("Sorts")), "relevance"), 0, (0)), 100000000, 0, -174), 0), 100000000, 0, -173), 0), 100000000, 0, -172), 0, (("kernel/inductive.mli", 57, 2455, 2455), ("kernel/inductive.mli", 57, 2455, 2519), 0), 0, Tag1 ("Inductive", 14)), 0); (("type_of_inductive", 1033), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Univ")), "puniverses"), [(Tag3 (Tag1 ((Tag2 ("Declarations")), "mind_specif"), 0, (0)), 100000000, 0, -171)], (0)), 100000000, 0, -170), (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -169), 0), 100000000, 0, -168), 0, (("kernel/inductive.mli", 59, 2521, 2521), ("kernel/inductive.mli", 59, 2521, 2576), 0), 0, Tag1 ("Inductive", 15)), 0); (("type_of_inductive_knowing_parameters", 1034), ((Tag1 (Tag1 ("polyprop"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -167)], (0)), 100000000, 0, -166), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Univ")), "puniverses"), [(Tag3 (Tag1 ((Tag2 ("Declarations")), "mind_specif"), 0, (0)), 100000000, 0, -165)], (0)), 100000000, 0, -164), (Tag1 (0, (Tag3 ((("param_univs", 1029)), 0, (0)), 100000000, 0, -163), (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -162), 0), 100000000, 0, -161), 0), 100000000, 0, -160), 0), 100000000, 0, -159), 0, (("kernel/inductive.mli", 61, 2578, 2578), ("kernel/inductive.mli", 62, 2621, 2687), 0), 0, Tag1 ("Inductive", 16)), 0); (("elim_sort", 1035), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "mind_specif"), 0, (0)), 100000000, 0, -158), (Tag3 (Tag1 ((Tag2 ("Sorts")), "family"), 0, (0)), 100000000, 0, -157), 0), 100000000, 0, -156), 0, (("kernel/inductive.mli", 64, 2689, 2689), ("kernel/inductive.mli", 64, 2689, 2732), 0), 0, Tag1 ("Inductive", 17)), 0); (("is_private", 1036), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "mind_specif"), 0, (0)), 100000000, 0, -155), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -154), 0), 100000000, 0, -153), 0, (("kernel/inductive.mli", 66, 2734, 2734), ("kernel/inductive.mli", 66, 2734, 2770), 0), 0, Tag1 ("Inductive", 18)), 0); (("is_primitive_record", 1037), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "mind_specif"), 0, (0)), 100000000, 0, -152), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -151), 0), 100000000, 0, -150), 0, (("kernel/inductive.mli", 67, 2771, 2771), ("kernel/inductive.mli", 67, 2771, 2816), 0), 0, Tag1 ("Inductive", 19)), 0); (("constrained_type_of_constructor", 1038), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "pconstructor"), 0, (0)), 100000000, 0, -149), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "mind_specif"), 0, (0)), 100000000, 0, -148), (Tag3 (Tag1 ((Tag2 ("Univ")), "constrained"), [(Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -147)], (0)), 100000000, 0, -146), 0), 100000000, 0, -145), 0), 100000000, 0, -144), 0, (("kernel/inductive.mli", 71, 2860, 2860), ("kernel/inductive.mli", 71, 2860, 2946), 0), 0, Tag1 ("Inductive", 20)), 0); (("type_of_constructor", 1039), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "pconstructor"), 0, (0)), 100000000, 0, -143), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "mind_specif"), 0, (0)), 100000000, 0, -142), (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -141), 0), 100000000, 0, -140), 0), 100000000, 0, -139), 0, (("kernel/inductive.mli", 72, 2947, 2947), ("kernel/inductive.mli", 72, 2947, 3009), 0), 0, Tag1 ("Inductive", 21)), 0); (("arities_of_constructors", 1040), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "pinductive"), 0, (0)), 100000000, 0, -138), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "mind_specif"), 0, (0)), 100000000, 0, -137), (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -136)], (0)), 100000000, 0, -135), 0), 100000000, 0, -134), 0), 100000000, 0, -133), 0, (("kernel/inductive.mli", 75, 3058, 3058), ("kernel/inductive.mli", 75, 3058, 3128), 0), 0, Tag1 ("Inductive", 22)), 0); (("type_of_constructors", 1041), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "pinductive"), 0, (0)), 100000000, 0, -132), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "mind_specif"), 0, (0)), 100000000, 0, -131), (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -130)], (0)), 100000000, 0, -129), 0), 100000000, 0, -128), 0), 100000000, 0, -127), 0, (("kernel/inductive.mli", 78, 3175, 3175), ("kernel/inductive.mli", 78, 3175, 3242), 0), 0, Tag1 ("Inductive", 23)), 0); (("abstract_constructor_type_relatively_to_inductive_types_context", 1042), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -126), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "MutInd"), "t"), 0, (0)), 100000000, 0, -125), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -124), (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -123), 0), 100000000, 0, -122), 0), 100000000, 0, -121), 0), 100000000, 0, -120), 0, (("kernel/inductive.mli", 85, 3598, 3598), ("kernel/inductive.mli", 86, 3668, 3703), 0), 0, Tag1 ("Inductive", 24)), 0); (("inductive_params", 1043), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "mind_specif"), 0, (0)), 100000000, 0, -119), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -118), 0), 100000000, 0, -117), 0, (("kernel/inductive.mli", 88, 3705, 3705), ("kernel/inductive.mli", 88, 3705, 3746), 0), 0, Tag1 ("Inductive", 25)), 0); (("expand_arity", 1044), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "mind_specif"), 0, (0)), 100000000, 0, -116), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "pinductive"), 0, (0)), 100000000, 0, -115), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -114)], (0)), 100000000, 0, -113), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -112)], (0)), 100000000, 0, -111)], (0)), 100000000, 0, -110), (Tag3 (Tag1 ((Tag2 ("Constr")), "rel_context"), 0, (0)), 100000000, 0, -109), 0), 100000000, 0, -108), 0), 100000000, 0, -107), 0), 100000000, 0, -106), 0), 100000000, 0, -105), 0, (("kernel/inductive.mli", 94, 4059, 4059), ("kernel/inductive.mli", 95, 4123, 4173), 0), 0, Tag1 ("Inductive", 26)), 0); (("expand_case", 1045), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -104), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "case"), 0, (0)), 100000000, 0, -103), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constr")), "case_info"), 0, (0)), 100000000, 0, -97); (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -98); (Tag3 (Tag1 ((Tag2 ("Constr")), "case_invert"), 0, (0)), 100000000, 0, -99); (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -100); (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -102)], (0)), 100000000, 0, -101)]), 100000000, 0, -96), 0), 100000000, 0, -95), 0), 100000000, 0, -94), 0, (("kernel/inductive.mli", 100, 4350, 4350), ("kernel/inductive.mli", 100, 4350, 4441), 0), 0, Tag1 ("Inductive", 27)), 0); (("expand_case_specif", 1046), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "mutual_inductive_body"), 0, (0)), 100000000, 0, -93), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "case"), 0, (0)), 100000000, 0, -92), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constr")), "case_info"), 0, (0)), 100000000, 0, -86); (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -87); (Tag3 (Tag1 ((Tag2 ("Constr")), "case_invert"), 0, (0)), 100000000, 0, -88); (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -89); (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -91)], (0)), 100000000, 0, -90)]), 100000000, 0, -85), 0), 100000000, 0, -84), 0), 100000000, 0, -83), 0, (("kernel/inductive.mli", 102, 4443, 4443), ("kernel/inductive.mli", 102, 4443, 4559), 0), 0, Tag1 ("Inductive", 28)), 0); (("contract_case", 1047), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -82), (Tag1 (0, (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constr")), "case_info"), 0, (0)), 100000000, 0, -76); (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -77); (Tag3 (Tag1 ((Tag2 ("Constr")), "case_invert"), 0, (0)), 100000000, 0, -78); (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -79); (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -81)], (0)), 100000000, 0, -80)]), 100000000, 0, -75), (Tag3 (Tag1 ((Tag2 ("Constr")), "case"), 0, (0)), 100000000, 0, -74), 0), 100000000, 0, -73), 0), 100000000, 0, -72), 0, (("kernel/inductive.mli", 106, 4665, 4665), ("kernel/inductive.mli", 106, 4665, 4758), 0), 0, Tag1 ("Inductive", 29)), 0); (("instantiate_context", 1048), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Instance"), "t"), 0, (0)), 100000000, 0, -71), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Vars")), "substl"), 0, (0)), 100000000, 0, -70), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -69)], (0)), 100000000, 0, -68)], (0)), 100000000, 0, -67), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "rel_context"), 0, (0)), 100000000, 0, -66), (Tag3 (Tag1 ((Tag2 ("Constr")), "rel_context"), 0, (0)), 100000000, 0, -65), 0), 100000000, 0, -64), 0), 100000000, 0, -63), 0), 100000000, 0, -62), 0), 100000000, 0, -61), 0, (("kernel/inductive.mli", 111, 4969, 4969), ("kernel/inductive.mli", 112, 5061, 5089), 0), 0, Tag1 ("Inductive", 30)), 0); (("build_branches_type", 1049), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "pinductive"), 0, (0)), 100000000, 0, -60), (Tag1 (0, (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Declarations")), "mutual_inductive_body"), 0, (0)), 100000000, 0, -58); (Tag3 (Tag1 ((Tag2 ("Declarations")), "one_inductive_body"), 0, (0)), 100000000, 0, -59)]), 100000000, 0, -57), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -56)], (0)), 100000000, 0, -55), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -54), (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -53)], (0)), 100000000, 0, -52), 0), 100000000, 0, -51), 0), 100000000, 0, -50), 0), 100000000, 0, -49), 0), 100000000, 0, -48), 0, (("kernel/inductive.mli", 114, 5091, 5091), ("kernel/inductive.mli", 116, 5179, 5219), 0), 0, Tag1 ("Inductive", 31)), 0); (("mind_arity", 1050), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "one_inductive_body"), 0, (0)), 100000000, 0, -47), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constr")), "rel_context"), 0, (0)), 100000000, 0, -45); (Tag3 (Tag1 ((Tag2 ("Sorts")), "family"), 0, (0)), 100000000, 0, -46)]), 100000000, 0, -44), 0), 100000000, 0, -43), 0, (("kernel/inductive.mli", 119, 5266, 5266), ("kernel/inductive.mli", 119, 5266, 5338), 0), 0, Tag1 ("Inductive", 32)), 0); (("inductive_sort_family", 1051), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "one_inductive_body"), 0, (0)), 100000000, 0, -42), (Tag3 (Tag1 ((Tag2 ("Sorts")), "family"), 0, (0)), 100000000, 0, -41), 0), 100000000, 0, -40), 0, (("kernel/inductive.mli", 121, 5340, 5340), ("kernel/inductive.mli", 121, 5340, 5402), 0), 0, Tag1 ("Inductive", 33)), 0); (("check_case_info", 1052), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -39), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "pinductive"), 0, (0)), 100000000, 0, -38), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sorts")), "relevance"), 0, (0)), 100000000, 0, -37), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "case_info"), 0, (0)), 100000000, 0, -36), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -35), 0), 100000000, 0, -34), 0), 100000000, 0, -33), 0), 100000000, 0, -32), 0), 100000000, 0, -31), 0, (("kernel/inductive.mli", 125, 5504, 5504), ("kernel/inductive.mli", 125, 5504, 5583), 0), 0, Tag1 ("Inductive", 34)), 0); (("is_primitive_positive_container", 1053), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -30), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -29), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -28), 0), 100000000, 0, -27), 0), 100000000, 0, -26), 0, (("kernel/inductive.mli", 134, 5982, 5982), ("kernel/inductive.mli", 134, 5982, 6045), 0), 0, Tag1 ("Inductive", 35)), 0); (("check_fix", 1054), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -25), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "fixpoint"), 0, (0)), 100000000, 0, -24), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -23), 0), 100000000, 0, -22), 0), 100000000, 0, -21), 0, (("kernel/inductive.mli", 138, 6124, 6124), ("kernel/inductive.mli", 138, 6124, 6163), 0), 0, Tag1 ("Inductive", 36)), 0); (("check_cofix", 1055), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -20), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "cofixpoint"), 0, (0)), 100000000, 0, -19), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -18), 0), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("kernel/inductive.mli", 139, 6164, 6164), ("kernel/inductive.mli", 139, 6164, 6207), 0), 0, Tag1 ("Inductive", 37)), 0); Tag2 (("SingletonInductiveBecomesProp", 1056), ((Tag3 ("exn", 7)), 0, ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -15)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Inductive", 38)), 2, 0); (("abstract_mind_lc", 1057), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -14), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -13), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "MutInd"), "t"), 0, (0)), 100000000, 0, -12), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constr")), "rel_context"), 0, (0)), 100000000, 0, -10); (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -11)]), 100000000, 0, -9)], (0)), 100000000, 0, -8), (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -7)], (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("kernel/inductive.mli", 152, 6678, 6678), ("kernel/inductive.mli", 152, 6678, 6771), 0), 0, Tag1 ("Inductive", 39)), 0)], "Inductive", [("Inductive", ("\196\222\179\150Ur\216?\015\005\215\165\182Z\204\147")); ("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Vmemitcodes", ("wCd\138\165\158DD\241gH\236.\210\197\247")); ("Vmbytecodes", ("\025\021\151\137Dx\149W\236+[\143f\208\160\016")); ("Vars", ("L]\166KZ\180\226\004\241\186\163\166]\151\250\254")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("Range", ("\218\130\001r\237\r\144\171\164\021l\155\196\143sg")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Environ", ("\171b\1579\229<\003Z\147IL\225X\254\182\204")); ("Declarations", ("\239\137n\019\030w$\182\166z^{\b\206\163\175")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CEphemeron", ("\204I\179-\206(x4\173\229\250\001PkH\151")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])
(Constr.rel_context * Constr.constr) array -> Constr.constr array

module Structure :
  sig
    type projection = {
      proj_name : Names.Name.t;
      proj_true : bool;
      proj_canonical : bool;
      proj_body : Names.Constant.t option;
    }
    type t = {
      name : Names.inductive;
      projections : projection list;
      nparams : int;
    }
    val make : Environ.env -> Names.inductive -> projection list -> t
    val register : t -> unit
    val subst : Mod_subst.substitution -> t -> t
    val rebuild : Environ.env -> t -> t
    val find : Names.inductive -> t
    val find_from_projection : Names.Constant.t -> t
    val find_projections : Names.inductive -> Names.Constant.t option list
    val projection_nparams : Names.Constant.t -> int
    val is_projection : Names.Constant.t -> bool
  end
module Instance :
  sig
    type t
    val make : Environ.env -> Evd.evar_map -> Names.GlobRef.t -> t
    val register : warn:bool -> Environ.env -> Evd.evar_map -> t -> unit
    val subst : Mod_subst.substitution -> t -> t
    val repr : t -> Names.GlobRef.t
  end
module ValuePattern :
  sig
    type t =
        Const_cs of Names.GlobRef.t
      | Proj_cs of Names.Projection.Repr.t
      | Prod_cs
      | Sort_cs of Sorts.family
      | Default_cs
    val equal : Environ.env -> t -> t -> bool
    val compare : t -> t -> int
    val print : t -> Pp.t
    val of_constr : Environ.env -> Constr.t -> t * int option * Constr.t list
  end
module CanonicalSolution :
  sig
    type t = {
      constant : EConstr.t;
      abstractions_ty : EConstr.t list;
      body : EConstr.t;
      nparams : int;
      params : EConstr.t list;
      cvalue_abstraction : int option;
      cvalue_arguments : EConstr.t list;
    }
    val find :
      Environ.env ->
      Evd.evar_map -> Names.GlobRef.t * ValuePattern.t -> Evd.evar_map * t
    val is_open_canonical_projection :
      Environ.env -> Evd.evar_map -> EConstr.t -> bool
  end
module CSTable :
  sig
    type entry = {
      projection : Names.GlobRef.t;
      value : ValuePattern.t;
      solution : Names.GlobRef.t;
    }
    val entries : unit -> entry list
    val entries_for : projection:Names.GlobRef.t -> entry list
  end
module PrimitiveProjections :
  sig
    val register : Names.Projection.Repr.t -> Names.Constant.t -> unit
    val mem : Names.Constant.t -> bool
    val find_opt : Names.Constant.t -> Names.Projection.Repr.t option("DEBUG:rule", [Tag3 (("Structure", 1362), 0, (Tag1 ([Tag1 (("projection", 1368), (0, 0, [[(("proj_name", 364), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -44), (("pretyping/structures.mli", 18, 846, 848), ("pretyping/structures.mli", 18, 846, 873), 0), 0, Tag1 ("Structures", 1)); (("proj_true", 365), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -45), (("pretyping/structures.mli", 19, 903, 905), ("pretyping/structures.mli", 19, 903, 922), 0), 0, Tag1 ("Structures", 2)); (("proj_canonical", 366), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -46), (("pretyping/structures.mli", 20, 996, 998), ("pretyping/structures.mli", 20, 996, 1020), 0), 0, Tag1 ("Structures", 3)); (("proj_body", 385), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -48)], (0)), 100000000, 0, -47), (("pretyping/structures.mli", 21, 1082, 1084), ("pretyping/structures.mli", 21, 1082, 1120), 0), 0, Tag1 ("Structures", 4))]], 1, 0, 0, 0, 0, 0, (("pretyping/structures.mli", 17, 826, 826), ("pretyping/structures.mli", 22, 1152, 1153), 0), 0, 0, 0, Tag1 ("Structures", 0)), 1, 0); Tag1 (("t", 1369), (0, 0, [[(("name", 387), 0, (Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -40), (("pretyping/structures.mli", 25, 1166, 1168), ("pretyping/structures.mli", 25, 1166, 1191), 0), 0, Tag1 ("Structures", 6)); (("projections", 388), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("projection", 1368)), 0, (0)), 100000000, 0, -42)], (0)), 100000000, 0, -41), (("pretyping/structures.mli", 26, 1192, 1194), ("pretyping/structures.mli", 26, 1192, 1224), 0), 0, Tag1 ("Structures", 7)); (("nparams", 389), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -43), (("pretyping/structures.mli", 27, 1225, 1227), ("pretyping/structures.mli", 27, 1225, 1241), 0), 0, Tag1 ("Structures", 8))]], 1, 0, 0, 0, 0, 0, (("pretyping/structures.mli", 24, 1155, 1155), ("pretyping/structures.mli", 28, 1242, 1243), 0), 0, 0, 0, Tag1 ("Structures", 5)), 1, 0); (("make", 1370), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -39), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -38), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("projection", 1368)), 0, (0)), 100000000, 0, -37)], (0)), 100000000, 0, -36), (Tag3 ((("t", 1369)), 0, (0)), 100000000, 0, -35), 0), 100000000, 0, -34), 0), 100000000, 0, -33), 0), 100000000, 0, -32), 0, (("pretyping/structures.mli", 30, 1245, 1245), ("pretyping/structures.mli", 30, 1245, 1310), 0), 0, Tag1 ("Structures", 9)), 0); (("register", 1371), ((Tag1 (0, (Tag3 ((("t", 1369)), 0, (0)), 100000000, 0, -31), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -30), 0), 100000000, 0, -29), 0, (("pretyping/structures.mli", 32, 1312, 1312), ("pretyping/structures.mli", 32, 1312, 1336), 0), 0, Tag1 ("Structures", 10)), 0); (("subst", 1372), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Mod_subst")), "substitution"), 0, (0)), 100000000, 0, -28), (Tag1 (0, (Tag3 ((("t", 1369)), 0, (0)), 100000000, 0, -27), (Tag3 ((("t", 1369)), 0, (0)), 100000000, 0, -26), 0), 100000000, 0, -25), 0), 100000000, 0, -24), 0, (("pretyping/structures.mli", 33, 1337, 1337), ("pretyping/structures.mli", 33, 1337, 1381), 0), 0, Tag1 ("Structures", 11)), 0); (("rebuild", 1373), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -23), (Tag1 (0, (Tag3 ((("t", 1369)), 0, (0)), 100000000, 0, -22), (Tag3 ((("t", 1369)), 0, (0)), 100000000, 0, -21), 0), 100000000, 0, -20), 0), 100000000, 0, -19), 0, (("pretyping/structures.mli", 36, 1440, 1440), ("pretyping/structures.mli", 36, 1440, 1475), 0), 0, Tag1 ("Structures", 12)), 0); (("find", 1374), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -18), (Tag3 ((("t", 1369)), 0, (0)), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("pretyping/structures.mli", 41, 1634, 1634), ("pretyping/structures.mli", 41, 1634, 1665), 0), 0, Tag1 ("Structures", 13)), 0); (("find_from_projection", 1375), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -15), (Tag3 ((("t", 1369)), 0, (0)), 100000000, 0, -14), 0), 100000000, 0, -13), 0, (("pretyping/structures.mli", 44, 1722, 1722), ("pretyping/structures.mli", 44, 1722, 1770), 0), 0, Tag1 ("Structures", 14)), 0); (("find_projections", 1376), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -12), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -11)], (0)), 100000000, 0, -10)], (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("pretyping/structures.mli", 49, 1943, 1943), ("pretyping/structures.mli", 49, 1943, 2013), 0), 0, Tag1 ("Structures", 15)), 0); (("projection_nparams", 1377), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -7), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("pretyping/structures.mli", 52, 2060, 2060), ("pretyping/structures.mli", 52, 2060, 2108), 0), 0, Tag1 ("Structures", 16)), 0); (("is_projection", 1378), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -4), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("pretyping/structures.mli", 54, 2110, 2110), ("pretyping/structures.mli", 54, 2110, 2154), 0), 0, Tag1 ("Structures", 17)), 0)]), 0, (("pretyping/structures.mli", 14, 761, 761), ("pretyping/structures.mli", 56, 2156, 2159), 0), Tag1 ("Structures", 18)), 0, 0); Tag3 (("Instance", 1363), 0, (Tag1 ([Tag1 (("t", 1379), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("pretyping/structures.mli", 63, 2343, 2343), ("pretyping/structures.mli", 63, 2343, 2349), 0), 0, 0, 0, Tag1 ("Structures", 19)), 1, 0); (("make", 1380), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -72), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -71), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -70), (Tag3 ((("t", 1379)), 0, (0)), 100000000, 0, -69), 0), 100000000, 0, -68), 0), 100000000, 0, -67), 0), 100000000, 0, -66), 0, (("pretyping/structures.mli", 67, 2505, 2505), ("pretyping/structures.mli", 67, 2505, 2567), 0), 0, Tag1 ("Structures", 20)), 0); (("register", 1381), ((Tag1 (("warn"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -65), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -64), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -63), (Tag1 (0, (Tag3 ((("t", 1379)), 0, (0)), 100000000, 0, -62), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -61), 0), 100000000, 0, -60), 0), 100000000, 0, -59), 0), 100000000, 0, -58), 0), 100000000, 0, -57), 0, (("pretyping/structures.mli", 70, 2610, 2610), ("pretyping/structures.mli", 70, 2610, 2678), 0), 0, Tag1 ("Structures", 21)), 0); (("subst", 1382), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Mod_subst")), "substitution"), 0, (0)), 100000000, 0, -56), (Tag1 (0, (Tag3 ((("t", 1379)), 0, (0)), 100000000, 0, -55), (Tag3 ((("t", 1379)), 0, (0)), 100000000, 0, -54), 0), 100000000, 0, -53), 0), 100000000, 0, -52), 0, (("pretyping/structures.mli", 72, 2680, 2680), ("pretyping/structures.mli", 72, 2680, 2724), 0), 0, Tag1 ("Structures", 22)), 0); (("repr", 1383), ((Tag1 (0, (Tag3 ((("t", 1379)), 0, (0)), 100000000, 0, -51), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -50), 0), 100000000, 0, -49), 0, (("pretyping/structures.mli", 73, 2725, 2725), ("pretyping/structures.mli", 73, 2725, 2756), 0), 0, Tag1 ("Structures", 23)), 0)]), 0, (("pretyping/structures.mli", 61, 2320, 2320), ("pretyping/structures.mli", 75, 2758, 2761), 0), Tag1 ("Structures", 24)), 0, 0); Tag3 (("ValuePattern", 1364), 0, (Tag1 ([Tag1 (("t", 1384), (0, 0, Tag1 ([(("Const_cs", 836), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -98)]), 0, (("pretyping/structures.mli", 83, 2946, 2948), ("pretyping/structures.mli", 83, 2946, 2977), 0), 0, Tag1 ("Structures", 26)); (("Proj_cs", 837), ([(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Projection"), "Repr"), "t"), 0, (0)), 100000000, 0, -99)]), 0, (("pretyping/structures.mli", 84, 2978, 2980), ("pretyping/structures.mli", 84, 2978, 3016), 0), 0, Tag1 ("Structures", 27)); (("Prod_cs", 881), (0), 0, (("pretyping/structures.mli", 85, 3017, 3019), ("pretyping/structures.mli", 85, 3017, 3028), 0), 0, Tag1 ("Structures", 28)); (("Sort_cs", 882), ([(Tag3 (Tag1 ((Tag2 ("Sorts")), "family"), 0, (0)), 100000000, 0, -100)]), 0, (("pretyping/structures.mli", 86, 3029, 3031), ("pretyping/structures.mli", 86, 3029, 3056), 0), 0, Tag1 ("Structures", 29)); (("Default_cs", 915), (0), 0, (("pretyping/structures.mli", 87, 3057, 3059), ("pretyping/structures.mli", 87, 3057, 3071), 0), 0, Tag1 ("Structures", 30))], 0), 1, 0, 0, 0, 0, 0, (("pretyping/structures.mli", 82, 2937, 2937), ("pretyping/structures.mli", 87, 3057, 3071), 0), 0, 0, 0, Tag1 ("Structures", 25)), 1, 0); (("equal", 1385), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -97), (Tag1 (0, (Tag3 ((("t", 1384)), 0, (0)), 100000000, 0, -96), (Tag1 (0, (Tag3 ((("t", 1384)), 0, (0)), 100000000, 0, -95), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -94), 0), 100000000, 0, -93), 0), 100000000, 0, -92), 0), 100000000, 0, -91), 0, (("pretyping/structures.mli", 89, 3073, 3073), ("pretyping/structures.mli", 89, 3073, 3114), 0), 0, Tag1 ("Structures", 31)), 0); (("compare", 1386), ((Tag1 (0, (Tag3 ((("t", 1384)), 0, (0)), 100000000, 0, -90), (Tag1 (0, (Tag3 ((("t", 1384)), 0, (0)), 100000000, 0, -89), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -88), 0), 100000000, 0, -87), 0), 100000000, 0, -86), 0, (("pretyping/structures.mli", 90, 3115, 3115), ("pretyping/structures.mli", 90, 3115, 3142), 0), 0, Tag1 ("Structures", 32)), 0); (("print", 1387), ((Tag1 (0, (Tag3 ((("t", 1384)), 0, (0)), 100000000, 0, -85), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -84), 0), 100000000, 0, -83), 0, (("pretyping/structures.mli", 91, 3143, 3143), ("pretyping/structures.mli", 91, 3143, 3164), 0), 0, Tag1 ("Structures", 33)), 0); (("of_constr", 1388), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -82), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "t"), 0, (0)), 100000000, 0, -81), (Tag2 ([(Tag3 ((("t", 1384)), 0, (0)), 100000000, 0, -76); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -78)], (0)), 100000000, 0, -77); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "t"), 0, (0)), 100000000, 0, -80)], (0)), 100000000, 0, -79)]), 100000000, 0, -75), 0), 100000000, 0, -74), 0), 100000000, 0, -73), 0, (("pretyping/structures.mli", 94, 3231, 3231), ("pretyping/structures.mli", 94, 3231, 3304), 0), 0, Tag1 ("Structures", 35)), 0)]), 0, (("pretyping/structures.mli", 80, 2910, 2910), ("pretyping/structures.mli", 96, 3306, 3309), 0), Tag1 ("Structures", 36)), 0, 0); Tag3 (("CanonicalSolution", 1365), 0, (Tag1 ([Tag1 (("t", 1389), (0, 0, [[(("constant", 1341), 0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -119), (("pretyping/structures.mli", 108, 3732, 3734), ("pretyping/structures.mli", 108, 3732, 3755), 0), 0, Tag1 ("Structures", 38)); (("abstractions_ty", 1342), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -121)], (0)), 100000000, 0, -120), (("pretyping/structures.mli", 110, 3757, 3759), ("pretyping/structures.mli", 110, 3757, 3792), 0), 0, Tag1 ("Structures", 39)); (("body", 1343), 0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -122), (("pretyping/structures.mli", 111, 3793, 3795), ("pretyping/structures.mli", 111, 3793, 3812), 0), 0, Tag1 ("Structures", 40)); (("nparams", 1344), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -123), (("pretyping/structures.mli", 113, 3814, 3816), ("pretyping/structures.mli", 113, 3814, 3830), 0), 0, Tag1 ("Structures", 41)); (("params", 1345), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -125)], (0)), 100000000, 0, -124), (("pretyping/structures.mli", 114, 3831, 3833), ("pretyping/structures.mli", 114, 3831, 3857), 0), 0, Tag1 ("Structures", 42)); (("cvalue_abstraction", 1346), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -127)], (0)), 100000000, 0, -126), (("pretyping/structures.mli", 115, 3858, 3860), ("pretyping/structures.mli", 115, 3858, 3892), 0), 0, Tag1 ("Structures", 43)); (("cvalue_arguments", 1347), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -129)], (0)), 100000000, 0, -128), (("pretyping/structures.mli", 116, 3893, 3895), ("pretyping/structures.mli", 116, 3893, 3929), 0), 0, Tag1 ("Structures", 44))]], 1, 0, 0, 0, 0, 0, (("pretyping/structures.mli", 107, 3721, 3721), ("pretyping/structures.mli", 117, 3930, 3931), 0), 0, 0, 0, Tag1 ("Structures", 37)), 1, 0); (("find", 1390), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -118), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -117), (Tag1 (0, (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -115); (Tag3 (Tag1 ((("ValuePattern", 1364)), "t"), 0, (0)), 100000000, 0, -116)]), 100000000, 0, -114), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -112); (Tag3 ((("t", 1389)), 0, (0)), 100000000, 0, -113)]), 100000000, 0, -111), 0), 100000000, 0, -110), 0), 100000000, 0, -109), 0), 100000000, 0, -108), 0, (("pretyping/structures.mli", 122, 4128, 4128), ("pretyping/structures.mli", 124, 4210, 4230), 0), 0, Tag1 ("Structures", 45)), 0); (("is_open_canonical_projection", 1391), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -107), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -106), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -105), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -104), 0), 100000000, 0, -103), 0), 100000000, 0, -102), 0), 100000000, 0, -101), 0, (("pretyping/structures.mli", 129, 4434, 4434), ("pretyping/structures.mli", 130, 4469, 4519), 0), 0, Tag1 ("Structures", 46)), 0)]), 0, (("pretyping/structures.mli", 105, 3689, 3689), ("pretyping/structures.mli", 132, 4521, 4524), 0), Tag1 ("Structures", 47)), 0, 0); Tag3 (("CSTable", 1366), 0, (Tag1 ([Tag1 (("entry", 1392), (0, 0, [[(("projection", 1352), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -138), (("pretyping/structures.mli", 138, 4623, 4625), ("pretyping/structures.mli", 138, 4623, 4654), 0), 0, Tag1 ("Structures", 49)); (("value", 1353), 0, (Tag3 (Tag1 ((("ValuePattern", 1364)), "t"), 0, (0)), 100000000, 0, -139), (("pretyping/structures.mli", 139, 4655, 4657), ("pretyping/structures.mli", 139, 4655, 4680), 0), 0, Tag1 ("Structures", 50)); (("solution", 1354), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -140), (("pretyping/structures.mli", 140, 4681, 4683), ("pretyping/structures.mli", 140, 4681, 4710), 0), 0, Tag1 ("Structures", 51))]], 1, 0, 0, 0, 0, 0, (("pretyping/structures.mli", 137, 4608, 4608), ("pretyping/structures.mli", 141, 4711, 4712), 0), 0, 0, 0, Tag1 ("Structures", 48)), 1, 0); (("entries", 1393), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -137), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("entry", 1392)), 0, (0)), 100000000, 0, -136)], (0)), 100000000, 0, -135), 0), 100000000, 0, -134), 0, (("pretyping/structures.mli", 145, 4785, 4785), ("pretyping/structures.mli", 145, 4785, 4817), 0), 0, Tag1 ("Structures", 52)), 0); (("entries_for", 1394), ((Tag1 (("projection"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -133), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("entry", 1392)), 0, (0)), 100000000, 0, -132)], (0)), 100000000, 0, -131), 0), 100000000, 0, -130), 0, (("pretyping/structures.mli", 149, 4915, 4915), ("pretyping/structures.mli", 149, 4915, 4973), 0), 0, Tag1 ("Structures", 53)), 0)]), 0, (("pretyping/structures.mli", 135, 4586, 4586), ("pretyping/structures.mli", 151, 4975, 4978), 0), Tag1 ("Structures", 54)), 0, 0); Tag3 (("PrimitiveProjections", 1367), 0, (Tag1 ([(("register", 1395), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Projection"), "Repr"), "t"), 0, (0)), 100000000, 0, -152), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -151), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -150), 0), 100000000, 0, -149), 0), 100000000, 0, -148), 0, (("pretyping/structures.mli", 157, 5148, 5148), ("pretyping/structures.mli", 157, 5148, 5214), 0), 0, Tag1 ("Structures", 55)), 0); (("mem", 1396), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -147), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -146), 0), 100000000, 0, -145), 0, (("pretyping/structures.mli", 159, 5216, 5216), ("pretyping/structures.mli", 159, 5216, 5250), 0), 0, Tag1 ("Structures", 56)), 0); (("find_opt", 1397), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -144), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Projection"), "Repr"), "t"), 0, (0)), 100000000, 0, -143)], (0)), 100000000, 0, -142), 0), 100000000, 0, -141), 0, (("pretyping/structures.mli", 161, 5252, 5252), ("pretyping/structures.mli", 161, 5252, 5317), 0), 0, Tag1 ("Structures", 57)), 0)]), 0, (("pretyping/structures.mli", 154, 5046, 5046), ("pretyping/structures.mli", 163, 5319, 5322), 0), Tag1 ("Structures", 58)), 0, 0)], "Structures", [("Structures", ("\012\140\238\148\207\217\148\148V\003`\211\\\239\022\205")); ("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Vmemitcodes", ("wCd\138\165\158DD\241gH\236.\210\197\247")); ("Vmbytecodes", ("\025\021\151\137Dx\149W\236+[\143f\208\160\016")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Unix", (":B72R\011\005Sj\189)\011\239PH\254")); ("UnivSubst", ("\190qu\031mc\130\181\003G]\132\"\219m)")); ("UnivProblem", ("6'\161\018\181\001.\253\000\141a6\171\1727\155")); ("UnivNames", ("%\151_\209%+JM$n\001\232\194n\178N")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UState", ("SD\203\215|\136\n\251\239\208\148\215C\n\167\005")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Summary", ("\148G\135\226\024L3\246\021\028U\146\164`\253\250")); ("Store", ("/dT\252\145\179pq\216{\181\206\190K+U")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("Section", ("\245\207\b\021\142v=\155#w\246}\"4b\006")); ("Safe_typing", (")\250?\164\145\132\241\127\186\152h+\145\"\237l")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("Range", ("\218\130\001r\237\r\144\171\164\021l\155\196\143sg")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("Nativevalues", ("8:\007\025e\226c,\001\171\146#l\210\171\152")); ("Nativelib", ("V\239\205Y1\147E:,\176\196Hy\1483|")); ("Nativecode", ("\190\185\255\006m\012\210\163\138Rz\247\15283\183")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Monad", ("\244\171T\157\194p\187\160\149\195{\132\222\020\253\148")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Libnames", ("fp\0255\167\162\209\153\137\161\169#\246\193\003\198")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hook", ("\183\194\223\003\155\169',\187\240a;E\b\1396")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Genlambda", ("\170}\024\241\141\222\136S\169\219\2212i\134KI")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evd", ("\211\205p\193\216\129r\006\239oN\142ar\196\175")); ("Evar_kinds", ("\023L\186\132\218}\254\221\185\198\220\200h\003{\021")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Environ", ("\171b\1579\229<\003Z\147IL\225X\254\182\204")); ("Entries", ("\172\201\198\221Ap\027_{\174\141C\021\";p")); ("EConstr", ("\201aW\156\157;N\004\201V\208\006L\166\211)")); ("Dyn", ("\131z`\205v\2306\007x\027&K.?;\169")); ("Declarations", ("\239\137n\019\030w$\182\166z^{\b\206\163\175")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Conversion", ("\158\150&\195M\tv\127|\029\158RRK\211A")); ("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CUnix", ("\140Zl\153\167\011J\015\005|th\247OTu")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CEphemeron", ("\204I\179-\206(x4\173\229\250\001PkH\151")); ("CDebug", ("^4\210p7\239!3\138\138\213?\239`\250\157")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])

  end

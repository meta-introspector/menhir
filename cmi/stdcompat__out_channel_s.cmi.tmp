module type S =
  sig
    type t = out_channel
    type open_flag =
      Out_channel.open_flag =
        Open_rdonly
      | Open_wronly
      | Open_append
      | Open_creat
      | Open_trunc
      | Open_excl
      | Open_binary
      | Open_text
      | Open_nonblock
    val stdout : t
    val stderr : t
    val open_bin : string -> t
    val open_text : string -> t
    val open_gen : open_flag list -> int -> string -> t
    val with_open_bin : string -> (t -> 'a) -> 'a
    val with_open_text : string -> (t -> 'a) -> 'a
    val with_open_gen : open_flag list -> int -> string -> (t -> 'a) -> 'a
    val seek : t -> int64 -> unit
    val pos : t -> int64
    val length : t -> int64
    val close : t -> unit
    val close_noerr : t -> unit
    val flush : t -> unit
    val flush_all : unit -> unit
    val output_char : t -> char -> unit
    val output_byte : t -> int -> unit
    val output_string : t -> string -> unit
    val output_bytes : t -> bytes -> unit
    val output : t -> bytes -> int -> int -> unit
    val output_substring : t -> string -> int -> int -> unit
    val set_binary_mode : t -> bool -> unit
    val set_buffered : t -> bool -> unit
    val is_buffered : t -> bool("DEBUG:rule", [Tag4 (("S", 358), ((Tag1 ([Tag1 (("t", 359), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -116)), 0, 0, 0, 0, (("stdcompat__out_channel_s.mli", 3, 21, 21), ("stdcompat__out_channel_s.mli", 3, 21, 41), 0), 0, 0, 0, Tag1 ("Stdcompat__out_channel_s", 0)), 1, 0); Tag1 (("open_flag", 360), (0, 0, Tag1 ([(("Open_rdonly", 271), (0), 0, (("stdcompat__out_channel_s.mli", 13, 157, 159), ("stdcompat__out_channel_s.mli", 13, 157, 172), 0), 0, Tag1 ("Stdcompat__out_channel_s", 2)); (("Open_wronly", 272), (0), 0, (("stdcompat__out_channel_s.mli", 14, 174, 176), ("stdcompat__out_channel_s.mli", 14, 174, 189), 0), 0, Tag1 ("Stdcompat__out_channel_s", 3)); (("Open_append", 273), (0), 0, (("stdcompat__out_channel_s.mli", 15, 191, 193), ("stdcompat__out_channel_s.mli", 15, 191, 206), 0), 0, Tag1 ("Stdcompat__out_channel_s", 4)); (("Open_creat", 274), (0), 0, (("stdcompat__out_channel_s.mli", 16, 208, 210), ("stdcompat__out_channel_s.mli", 16, 208, 222), 0), 0, Tag1 ("Stdcompat__out_channel_s", 5)); (("Open_trunc", 275), (0), 0, (("stdcompat__out_channel_s.mli", 17, 224, 226), ("stdcompat__out_channel_s.mli", 17, 224, 238), 0), 0, Tag1 ("Stdcompat__out_channel_s", 6)); (("Open_excl", 276), (0), 0, (("stdcompat__out_channel_s.mli", 18, 240, 242), ("stdcompat__out_channel_s.mli", 18, 240, 253), 0), 0, Tag1 ("Stdcompat__out_channel_s", 7)); (("Open_binary", 277), (0), 0, (("stdcompat__out_channel_s.mli", 19, 255, 257), ("stdcompat__out_channel_s.mli", 19, 255, 270), 0), 0, Tag1 ("Stdcompat__out_channel_s", 8)); (("Open_text", 278), (0), 0, (("stdcompat__out_channel_s.mli", 20, 272, 274), ("stdcompat__out_channel_s.mli", 20, 272, 285), 0), 0, Tag1 ("Stdcompat__out_channel_s", 9)); (("Open_nonblock", 279), (0), 0, (("stdcompat__out_channel_s.mli", 21, 287, 289), ("stdcompat__out_channel_s.mli", 21, 287, 304), 0), 0, Tag1 ("Stdcompat__out_channel_s", 10))], 0), 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Out_channel"), "open_flag"), 0, (0)), 100000000, 0, -115)), 0, 0, 0, 0, (("stdcompat__out_channel_s.mli", 12, 116, 116), ("stdcompat__out_channel_s.mli", 21, 287, 304), 0), 0, 1, 0, Tag1 ("Stdcompat__out_channel_s", 1)), 1, 0); (("stdout", 361), ((Tag3 ((("t", 359)), 0, (0)), 100000000, 0, -114), 0, (("stdcompat__out_channel_s.mli", 48, 733, 733), ("stdcompat__out_channel_s.mli", 48, 733, 747), 0), 0, Tag1 ("Stdcompat__out_channel_s", 11)), 0); (("stderr", 362), ((Tag3 ((("t", 359)), 0, (0)), 100000000, 0, -113), 0, (("stdcompat__out_channel_s.mli", 51, 786, 786), ("stdcompat__out_channel_s.mli", 51, 786, 800), 0), 0, Tag1 ("Stdcompat__out_channel_s", 12)), 0); (("open_bin", 363), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -112), (Tag3 ((("t", 359)), 0, (0)), 100000000, 0, -111), 0), 100000000, 0, -110), 0, (("stdcompat__out_channel_s.mli", 54, 839, 839), ("stdcompat__out_channel_s.mli", 54, 839, 865), 0), 0, Tag1 ("Stdcompat__out_channel_s", 13)), 0); (("open_text", 364), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -109), (Tag3 ((("t", 359)), 0, (0)), 100000000, 0, -108), 0), 100000000, 0, -107), 0, (("stdcompat__out_channel_s.mli", 57, 916, 916), ("stdcompat__out_channel_s.mli", 57, 916, 943), 0), 0, Tag1 ("Stdcompat__out_channel_s", 14)), 0); (("open_gen", 365), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("open_flag", 360)), 0, (0)), 100000000, 0, -106)], (0)), 100000000, 0, -105), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -104), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -103), (Tag3 ((("t", 359)), 0, (0)), 100000000, 0, -102), 0), 100000000, 0, -101), 0), 100000000, 0, -100), 0), 100000000, 0, -99), 0, (("stdcompat__out_channel_s.mli", 60, 995, 995), ("stdcompat__out_channel_s.mli", 60, 995, 1046), 0), 0, Tag1 ("Stdcompat__out_channel_s", 15)), 0); (("with_open_bin", 366), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -98), (Tag1 (0, (Tag1 (0, (Tag3 ((("t", 359)), 0, (0)), 100000000, 0, -97), ((("a")), 100000000, 0, -95), 0), 100000000, 0, -96), ((("a")), 100000000, 0, -95), 0), 100000000, 0, -94), 0), 100000000, 0, -93), 0, (("stdcompat__out_channel_s.mli", 63, 1122, 1122), ("stdcompat__out_channel_s.mli", 63, 1122, 1167), 0), 0, Tag1 ("Stdcompat__out_channel_s", 16)), 0); (("with_open_text", 367), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -92), (Tag1 (0, (Tag1 (0, (Tag3 ((("t", 359)), 0, (0)), 100000000, 0, -91), ((("a")), 100000000, 0, -89), 0), 100000000, 0, -90), ((("a")), 100000000, 0, -89), 0), 100000000, 0, -88), 0), 100000000, 0, -87), 0, (("stdcompat__out_channel_s.mli", 66, 1237, 1237), ("stdcompat__out_channel_s.mli", 66, 1237, 1283), 0), 0, Tag1 ("Stdcompat__out_channel_s", 17)), 0); (("with_open_gen", 368), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("open_flag", 360)), 0, (0)), 100000000, 0, -86)], (0)), 100000000, 0, -85), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -84), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -83), (Tag1 (0, (Tag1 (0, (Tag3 ((("t", 359)), 0, (0)), 100000000, 0, -82), ((("a")), 100000000, 0, -80), 0), 100000000, 0, -81), ((("a")), 100000000, 0, -80), 0), 100000000, 0, -79), 0), 100000000, 0, -78), 0), 100000000, 0, -77), 0), 100000000, 0, -76), 0, (("stdcompat__out_channel_s.mli", 69, 1354, 1354), ("stdcompat__out_channel_s.mli", 69, 1354, 1424), 0), 0, Tag1 ("Stdcompat__out_channel_s", 18)), 0); (("seek", 369), ((Tag1 (0, (Tag3 ((("t", 359)), 0, (0)), 100000000, 0, -75), (Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -74), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -73), 0), 100000000, 0, -72), 0), 100000000, 0, -71), 0, (("stdcompat__out_channel_s.mli", 73, 1523, 1523), ("stdcompat__out_channel_s.mli", 73, 1523, 1552), 0), 0, Tag1 ("Stdcompat__out_channel_s", 19)), 0); (("pos", 370), ((Tag1 (0, (Tag3 ((("t", 359)), 0, (0)), 100000000, 0, -70), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -69), 0), 100000000, 0, -68), 0, (("stdcompat__out_channel_s.mli", 76, 1606, 1606), ("stdcompat__out_channel_s.mli", 76, 1606, 1626), 0), 0, Tag1 ("Stdcompat__out_channel_s", 20)), 0); (("length", 371), ((Tag1 (0, (Tag3 ((("t", 359)), 0, (0)), 100000000, 0, -67), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -66), 0), 100000000, 0, -65), 0, (("stdcompat__out_channel_s.mli", 79, 1671, 1671), ("stdcompat__out_channel_s.mli", 79, 1671, 1694), 0), 0, Tag1 ("Stdcompat__out_channel_s", 21)), 0); (("close", 372), ((Tag1 (0, (Tag3 ((("t", 359)), 0, (0)), 100000000, 0, -64), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -63), 0), 100000000, 0, -62), 0, (("stdcompat__out_channel_s.mli", 82, 1742, 1742), ("stdcompat__out_channel_s.mli", 82, 1742, 1763), 0), 0, Tag1 ("Stdcompat__out_channel_s", 22)), 0); (("close_noerr", 373), ((Tag1 (0, (Tag3 ((("t", 359)), 0, (0)), 100000000, 0, -61), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -60), 0), 100000000, 0, -59), 0, (("stdcompat__out_channel_s.mli", 85, 1809, 1809), ("stdcompat__out_channel_s.mli", 85, 1809, 1836), 0), 0, Tag1 ("Stdcompat__out_channel_s", 23)), 0); (("flush", 374), ((Tag1 (0, (Tag3 ((("t", 359)), 0, (0)), 100000000, 0, -58), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -57), 0), 100000000, 0, -56), 0, (("stdcompat__out_channel_s.mli", 88, 1888, 1888), ("stdcompat__out_channel_s.mli", 88, 1888, 1909), 0), 0, Tag1 ("Stdcompat__out_channel_s", 24)), 0); (("flush_all", 375), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -55), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -54), 0), 100000000, 0, -53), 0, (("stdcompat__out_channel_s.mli", 91, 1955, 1955), ("stdcompat__out_channel_s.mli", 91, 1955, 1983), 0), 0, Tag1 ("Stdcompat__out_channel_s", 25)), 0); (("output_char", 376), ((Tag1 (0, (Tag3 ((("t", 359)), 0, (0)), 100000000, 0, -52), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -51), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -50), 0), 100000000, 0, -49), 0), 100000000, 0, -48), 0, (("stdcompat__out_channel_s.mli", 94, 2036, 2036), ("stdcompat__out_channel_s.mli", 94, 2036, 2071), 0), 0, Tag1 ("Stdcompat__out_channel_s", 26)), 0); (("output_byte", 377), ((Tag1 (0, (Tag3 ((("t", 359)), 0, (0)), 100000000, 0, -47), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -46), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -45), 0), 100000000, 0, -44), 0), 100000000, 0, -43), 0, (("stdcompat__out_channel_s.mli", 97, 2131, 2131), ("stdcompat__out_channel_s.mli", 97, 2131, 2165), 0), 0, Tag1 ("Stdcompat__out_channel_s", 27)), 0); (("output_string", 378), ((Tag1 (0, (Tag3 ((("t", 359)), 0, (0)), 100000000, 0, -42), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -41), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -40), 0), 100000000, 0, -39), 0), 100000000, 0, -38), 0, (("stdcompat__out_channel_s.mli", 100, 2224, 2224), ("stdcompat__out_channel_s.mli", 100, 2224, 2263), 0), 0, Tag1 ("Stdcompat__out_channel_s", 28)), 0); (("output_bytes", 379), ((Tag1 (0, (Tag3 ((("t", 359)), 0, (0)), 100000000, 0, -37), (Tag1 (0, (Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -36), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -35), 0), 100000000, 0, -34), 0), 100000000, 0, -33), 0, (("stdcompat__out_channel_s.mli", 104, 2328, 2328), ("stdcompat__out_channel_s.mli", 104, 2328, 2365), 0), 0, Tag1 ("Stdcompat__out_channel_s", 29)), 0); (("output", 380), ((Tag1 (0, (Tag3 ((("t", 359)), 0, (0)), 100000000, 0, -32), (Tag1 (0, (Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -31), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -30), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -29), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -28), 0), 100000000, 0, -27), 0), 100000000, 0, -26), 0), 100000000, 0, -25), 0), 100000000, 0, -24), 0, (("stdcompat__out_channel_s.mli", 113, 2490, 2490), ("stdcompat__out_channel_s.mli", 113, 2490, 2535), 0), 0, Tag1 ("Stdcompat__out_channel_s", 30)), 0); (("output_substring", 381), ((Tag1 (0, (Tag3 ((("t", 359)), 0, (0)), 100000000, 0, -23), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -22), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -21), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -20), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), 0), 100000000, 0, -16), 0), 100000000, 0, -15), 0, (("stdcompat__out_channel_s.mli", 121, 2675, 2675), ("stdcompat__out_channel_s.mli", 121, 2675, 2731), 0), 0, Tag1 ("Stdcompat__out_channel_s", 31)), 0); (("set_binary_mode", 382), ((Tag1 (0, (Tag3 ((("t", 359)), 0, (0)), 100000000, 0, -14), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -13), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0), 100000000, 0, -10), 0, (("stdcompat__out_channel_s.mli", 124, 2812, 2812), ("stdcompat__out_channel_s.mli", 124, 2812, 2851), 0), 0, Tag1 ("Stdcompat__out_channel_s", 32)), 0); (("set_buffered", 383), ((Tag1 (0, (Tag3 ((("t", 359)), 0, (0)), 100000000, 0, -9), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -8), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("stdcompat__out_channel_s.mli", 127, 2915, 2915), ("stdcompat__out_channel_s.mli", 127, 2915, 2951), 0), 0, Tag1 ("Stdcompat__out_channel_s", 33)), 0); (("is_buffered", 384), ((Tag1 (0, (Tag3 ((("t", 359)), 0, (0)), 100000000, 0, -4), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("stdcompat__out_channel_s.mli", 130, 3012, 3012), ("stdcompat__out_channel_s.mli", 130, 3012, 3039), 0), 0, Tag1 ("Stdcompat__out_channel_s", 34)), 0)])), 0, (("stdcompat__out_channel_s.mli", 1, 0, 0), ("stdcompat__out_channel_s.mli", 133, 3091, 3094), 0), Tag1 ("Stdcompat__out_channel_s", 35)), 0)], "Stdcompat__out_channel_s", [("Stdcompat__out_channel_s", ("\030\203\014\019\2249\242\191\184\240\245\192p\216#p")); ("Stdlib__Out_channel", ("Q-^BEj\1670\"\187\244\231E<\216\147")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

  end

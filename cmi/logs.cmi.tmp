type level = App | Error | Warning | Info | Debug
val level : unit -> level option
val set_level : ?all:bool -> level option -> unit
val pp_level : Format.formatter -> level -> unit
val level_to_string : level option -> string
val level_of_string : string -> (level option, [ `Msg of string ]) result
type src
val default : src
module Src :
  sig
    type t = src
    val create : ?doc:string -> string -> src
    val name : src -> string
    val doc : src -> string
    val level : src -> level option
    val set_level : src -> level option -> unit
    val equal : src -> src -> bool
    val compare : src -> src -> int
    val pp : Format.formatter -> src -> unit
    val list : unit -> src list
  end
module Tag :
  sig
    type 'a def
    type def_e = Def : 'a def -> def_e
    val def :
      ?doc:string -> string -> (Format.formatter -> 'a -> unit) -> 'a def
    val name : 'a def -> string
    val doc : 'a def -> string
    val printer : 'a def -> Format.formatter -> 'a -> unit
    val pp_def : Format.formatter -> 'a def -> unit
    val list : unit -> def_e list
    type t = V : 'a def * 'a -> t
    val pp : Format.formatter -> t -> unit
    type set
    val empty : set
    val is_empty : set -> bool
    val mem : 'a def -> set -> bool
    val add : 'a def -> 'a -> set -> set
    val rem : 'a def -> set -> set
    val find : 'a def -> set -> 'a option
    val get : 'a def -> set -> 'a
    val fold : (t -> 'a -> 'a) -> set -> 'a -> 'a
    val pp_set : Format.formatter -> set -> unit
  end
type ('a, 'b) msgf =
    (?header:string ->
     ?tags:Tag.set -> ('a, Format.formatter, unit, 'b) format4 -> 'a) ->
    'b
type 'a log = ('a, unit) msgf -> unit
val msg : ?src:src -> level -> 'a log
val app : ?src:src -> 'a log
val err : ?src:src -> 'a log
val warn : ?src:src -> 'a log
val info : ?src:src -> 'a log
val debug : ?src:src -> 'a log
val kmsg : (unit -> 'b) -> ?src:src -> level -> ('a, 'b) msgf -> 'b
val on_error :
  ?src:src ->
  ?level:level ->
  ?header:string ->
  ?tags:Tag.set ->
  pp:(Format.formatter -> 'b -> unit) ->
  use:('b -> 'a) -> ('a, 'b) result -> 'a
val on_error_msg :
  ?src:src ->
  ?level:level ->
  ?header:string ->
  ?tags:Tag.set -> use:(unit -> 'a) -> ('a, [ `Msg of string ]) result -> 'a
module type LOG =
  sig
    val msg : level -> 'a log
    val app : 'a log
    val err : 'a log
    val warn : 'a log
    val info : 'a log
    val debug : 'a log
    val kmsg : (unit -> 'b) -> level -> ('a, 'b) msgf -> 'b
    val on_error :
      ?level:level ->
      ?header:string ->
      ?tags:Tag.set ->
      pp:(Format.formatter -> 'b -> unit) ->
      use:('b -> 'a) -> ('a, 'b) result -> 'a
    val on_error_msg :
      ?level:level ->
      ?header:string ->
      ?tags:Tag.set ->
      use:(unit -> 'a) -> ('a, [ `Msg of string ]) result -> 'a
  end
val src_log : src -> (module LOG)
type reporter = {
  report :
    'a 'b.
      src ->
      level -> over:(unit -> unit) -> (unit -> 'b) -> ('a, 'b) msgf -> 'b;
}
val nop_reporter : reporter
val format_reporter :
  ?pp_header:(Format.formatter -> level * string option -> unit) ->
  ?app:Format.formatter -> ?dst:Format.formatter -> unit -> reporter
val reporter : unit -> reporter
val set_reporter : reporter -> unit
val set_reporter_mutex : lock:(unit -> unit) -> unlock:(unit -> unit) -> unit
val report :
  src -> level -> over:(unit -> unit) -> (unit -> 'b) -> ('a, 'b) msgf -> 'b
val incr_err_count : unit -> unit
val incr_warn_count : unit -> unit
val pp_print_text : Format.formatter -> string -> unit
val pp_header : Format.formatter -> level * string option -> unit
val err_count : unit -> int("DEBUG:rule", [Tag1 (("level", 698), (0, 0, Tag1 ([(("App", 270), (0), 0, (("src/logs.mli", 29, 1155, 1168), ("src/logs.mli", 29, 1155, 1171), 0), 0, Tag1 ("Logs", 1)); (("Error", 271), (0), 0, (("src/logs.mli", 29, 1155, 1172), ("src/logs.mli", 29, 1155, 1179), 0), 0, Tag1 ("Logs", 2)); (("Warning", 272), (0), 0, (("src/logs.mli", 29, 1155, 1180), ("src/logs.mli", 29, 1155, 1189), 0), 0, Tag1 ("Logs", 3)); (("Info", 273), (0), 0, (("src/logs.mli", 29, 1155, 1190), ("src/logs.mli", 29, 1155, 1196), 0), 0, Tag1 ("Logs", 4)); (("Debug", 274), (0), 0, (("src/logs.mli", 29, 1155, 1197), ("src/logs.mli", 29, 1155, 1204), 0), 0, Tag1 ("Logs", 5))], 0), 1, 0, 0, 0, 0, 0, (("src/logs.mli", 29, 1155, 1155), ("src/logs.mli", 29, 1155, 1204), 0), 0, 1, 0, Tag1 ("Logs", 0)), 1, 0); (("level", 699), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -230), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("level", 698)), 0, (0)), 100000000, 0, -229)], (0)), 100000000, 0, -228), 0), 100000000, 0, -227), 0, (("src/logs.mli", 31, 1206, 1206), ("src/logs.mli", 31, 1206, 1238), 0), 0, Tag1 ("Logs", 6)), 0); (("set_level", 700), ((Tag1 (Tag1 ("all"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -226)], (0)), 100000000, 0, -225), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("level", 698)), 0, (0)), 100000000, 0, -224)], (0)), 100000000, 0, -223), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -222), 0), 100000000, 0, -221), 0), 100000000, 0, -220), 0, (("src/logs.mli", 34, 1318, 1318), ("src/logs.mli", 34, 1318, 1367), 0), 0, Tag1 ("Logs", 7)), 0); (("pp_level", 701), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -219), (Tag1 (0, (Tag3 ((("level", 698)), 0, (0)), 100000000, 0, -218), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -217), 0), 100000000, 0, -216), 0), 100000000, 0, -215), 0, (("src/logs.mli", 41, 1711, 1711), ("src/logs.mli", 41, 1711, 1759), 0), 0, Tag1 ("Logs", 8)), 0); (("level_to_string", 702), ((Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("level", 698)), 0, (0)), 100000000, 0, -214)], (0)), 100000000, 0, -213), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -212), 0), 100000000, 0, -211), 0, (("src/logs.mli", 45, 1843, 1843), ("src/logs.mli", 45, 1843, 1887), 0), 0, Tag1 ("Logs", 9)), 0); (("level_of_string", 703), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -210), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("level", 698)), 0, (0)), 100000000, 0, -206)], (0)), 100000000, 0, -205); (Tag8 (([("Msg", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -209))))], (0, 100000000, 0, -208), 1, 0, 0)), 100000000, 0, -207)], (0)), 100000000, 0, -204), 0), 100000000, 0, -203), 0, (("src/logs.mli", 50, 2062, 2062), ("src/logs.mli", 50, 2062, 2133), 0), 0, Tag1 ("Logs", 10)), 0); Tag1 (("src", 704), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/logs.mli", 56, 2253, 2253), ("src/logs.mli", 56, 2253, 2261), 0), 0, 0, 0, Tag1 ("Logs", 11)), 1, 0); (("default", 705), ((Tag3 ((("src", 704)), 0, (0)), 100000000, 0, -202), 0, (("src/logs.mli", 60, 2389, 2389), ("src/logs.mli", 60, 2389, 2406), 0), 0, Tag1 ("Logs", 12)), 0); Tag3 (("Src", 706), 0, (Tag1 ([Tag1 (("t", 734), (0, 0, 0, 1, ((Tag3 ((("src", 704)), 0, (0)), 100000000, 0, -272)), 0, 0, 0, 0, (("src/logs.mli", 69, 2580, 2582), ("src/logs.mli", 69, 2580, 2594), 0), 0, 0, 0, Tag1 ("Logs", 13)), 1, 0); (("create", 735), ((Tag1 (Tag1 ("doc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -271)], (0)), 100000000, 0, -270), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -269), (Tag3 ((("src", 704)), 0, (0)), 100000000, 0, -268), 0), 100000000, 0, -267), 0), 100000000, 0, -266), 0, (("src/logs.mli", 72, 2631, 2633), ("src/logs.mli", 72, 2631, 2674), 0), 0, Tag1 ("Logs", 14)), 0); (("name", 736), ((Tag1 (0, (Tag3 ((("src", 704)), 0, (0)), 100000000, 0, -265), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -264), 0), 100000000, 0, -263), 0, (("src/logs.mli", 80, 3084, 3086), ("src/logs.mli", 80, 3084, 3110), 0), 0, Tag1 ("Logs", 15)), 0); (("doc", 737), ((Tag1 (0, (Tag3 ((("src", 704)), 0, (0)), 100000000, 0, -262), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -261), 0), 100000000, 0, -260), 0, (("src/logs.mli", 83, 3145, 3147), ("src/logs.mli", 83, 3145, 3170), 0), 0, Tag1 ("Logs", 16)), 0); (("level", 738), ((Tag1 (0, (Tag3 ((("src", 704)), 0, (0)), 100000000, 0, -259), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("level", 698)), 0, (0)), 100000000, 0, -258)], (0)), 100000000, 0, -257), 0), 100000000, 0, -256), 0, (("src/logs.mli", 86, 3224, 3226), ("src/logs.mli", 86, 3224, 3257), 0), 0, Tag1 ("Logs", 17)), 0); (("set_level", 739), ((Tag1 (0, (Tag3 ((("src", 704)), 0, (0)), 100000000, 0, -255), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("level", 698)), 0, (0)), 100000000, 0, -254)], (0)), 100000000, 0, -253), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -252), 0), 100000000, 0, -251), 0), 100000000, 0, -250), 0, (("src/logs.mli", 89, 3320, 3322), ("src/logs.mli", 89, 3320, 3365), 0), 0, Tag1 ("Logs", 18)), 0); (("equal", 740), ((Tag1 (0, (Tag3 ((("src", 704)), 0, (0)), 100000000, 0, -249), (Tag1 (0, (Tag3 ((("src", 704)), 0, (0)), 100000000, 0, -248), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -247), 0), 100000000, 0, -246), 0), 100000000, 0, -245), 0, (("src/logs.mli", 94, 3531, 3533), ("src/logs.mli", 94, 3531, 3563), 0), 0, Tag1 ("Logs", 19)), 0); (("compare", 741), ((Tag1 (0, (Tag3 ((("src", 704)), 0, (0)), 100000000, 0, -244), (Tag1 (0, (Tag3 ((("src", 704)), 0, (0)), 100000000, 0, -243), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -242), 0), 100000000, 0, -241), 0), 100000000, 0, -240), 0, (("src/logs.mli", 97, 3643, 3645), ("src/logs.mli", 97, 3643, 3676), 0), 0, Tag1 ("Logs", 20)), 0); (("pp", 742), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -239), (Tag1 (0, (Tag3 ((("src", 704)), 0, (0)), 100000000, 0, -238), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -237), 0), 100000000, 0, -236), 0), 100000000, 0, -235), 0, (("src/logs.mli", 100, 3735, 3737), ("src/logs.mli", 100, 3735, 3777), 0), 0, Tag1 ("Logs", 21)), 0); (("list", 743), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -234), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("src", 704)), 0, (0)), 100000000, 0, -233)], (0)), 100000000, 0, -232), 0), 100000000, 0, -231), 0, (("src/logs.mli", 104, 3863, 3865), ("src/logs.mli", 104, 3863, 3892), 0), 0, Tag1 ("Logs", 22)), 0)]), 0, (("src/logs.mli", 65, 2540, 2540), ("src/logs.mli", 106, 3950, 3953), 0), Tag1 ("Logs", 23)), 0, 0); Tag3 (("Tag", 707), 0, (Tag1 ([Tag1 (("def", 744), ([((("a")), 100000000, 0, -368)], 1, 0, 1, 0, [7], [2], 0, 0, (("src/logs.mli", 118, 4178, 4180), ("src/logs.mli", 118, 4178, 4191), 0), 0, 0, 0, Tag1 ("Logs", 24)), 1, 0); Tag1 (("def_e", 745), (0, 0, Tag1 ([(("Def", 451), ([(Tag3 ((("def", 744)), [((("a")), 100000000, 0, -367)], (0)), 100000000, 0, -366)]), ((Tag3 ((("def_e", 745)), 0, (0)), 100000000, 0, -365)), (("src/logs.mli", 124, 4463, 4478), ("src/logs.mli", 124, 4463, 4499), 0), 0, Tag1 ("Logs", 26))], 0), 1, 0, 0, 0, 0, 0, (("src/logs.mli", 124, 4463, 4465), ("src/logs.mli", 124, 4463, 4499), 0), 0, 0, 1, Tag1 ("Logs", 25)), 1, 0); (("def", 746), ((Tag1 (Tag1 ("doc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -364)], (0)), 100000000, 0, -363), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -362), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -361), (Tag1 (0, ((("a")), 100000000, 0, -357), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -360), 0), 100000000, 0, -359), 0), 100000000, 0, -358), (Tag3 ((("def", 744)), [((("a")), 100000000, 0, -357)], (0)), 100000000, 0, -356), 0), 100000000, 0, -355), 0), 100000000, 0, -354), 0), 100000000, 0, -353), 0, (("src/logs.mli", 126, 4501, 4503), ("src/logs.mli", 126, 4501, 4580), 0), 0, Tag1 ("Logs", 27)), 0); (("name", 747), ((Tag1 (0, (Tag3 ((("def", 744)), [((("a")), 100000000, 0, -352)], (0)), 100000000, 0, -351), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -350), 0), 100000000, 0, -349), 0, (("src/logs.mli", 132, 4836, 4838), ("src/logs.mli", 132, 4836, 4865), 0), 0, Tag1 ("Logs", 28)), 0); (("doc", 748), ((Tag1 (0, (Tag3 ((("def", 744)), [((("a")), 100000000, 0, -348)], (0)), 100000000, 0, -347), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -346), 0), 100000000, 0, -345), 0, (("src/logs.mli", 135, 4900, 4902), ("src/logs.mli", 135, 4900, 4928), 0), 0, Tag1 ("Logs", 29)), 0); (("printer", 749), ((Tag1 (0, (Tag3 ((("def", 744)), [((("a")), 100000000, 0, -342)], (0)), 100000000, 0, -344), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -343), (Tag1 (0, ((("a")), 100000000, 0, -342), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -341), 0), 100000000, 0, -340), 0), 100000000, 0, -339), 0), 100000000, 0, -338), 0, (("src/logs.mli", 138, 4978, 4980), ("src/logs.mli", 138, 4978, 5036), 0), 0, Tag1 ("Logs", 30)), 0); (("pp_def", 750), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -337), (Tag1 (0, (Tag3 ((("def", 744)), [((("a")), 100000000, 0, -336)], (0)), 100000000, 0, -335), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -334), 0), 100000000, 0, -333), 0), 100000000, 0, -332), 0, (("src/logs.mli", 141, 5089, 5091), ("src/logs.mli", 141, 5089, 5138), 0), 0, Tag1 ("Logs", 31)), 0); (("list", 751), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -331), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("def_e", 745)), 0, (0)), 100000000, 0, -330)], (0)), 100000000, 0, -329), 0), 100000000, 0, -328), 0, (("src/logs.mli", 144, 5218, 5220), ("src/logs.mli", 144, 5218, 5249), 0), 0, Tag1 ("Logs", 32)), 0); Tag1 (("t", 752), (0, 0, Tag1 ([(("V", 459), ([(Tag3 ((("def", 744)), [((("a")), 100000000, 0, -327)], (0)), 100000000, 0, -326); ((("a")), 100000000, 0, -327)]), ((Tag3 ((("t", 752)), 0, (0)), 100000000, 0, -325)), (("src/logs.mli", 150, 5413, 5424), ("src/logs.mli", 150, 5413, 5444), 0), 0, Tag1 ("Logs", 34))], 0), 1, 0, 0, 0, 0, 0, (("src/logs.mli", 150, 5413, 5415), ("src/logs.mli", 150, 5413, 5444), 0), 0, 0, 0, Tag1 ("Logs", 33)), 1, 0); (("pp", 753), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -324), (Tag1 (0, (Tag3 ((("t", 752)), 0, (0)), 100000000, 0, -323), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -322), 0), 100000000, 0, -321), 0), 100000000, 0, -320), 0, (("src/logs.mli", 152, 5446, 5448), ("src/logs.mli", 152, 5446, 5486), 0), 0, Tag1 ("Logs", 35)), 0); Tag1 (("set", 754), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/logs.mli", 157, 5585, 5587), ("src/logs.mli", 157, 5585, 5595), 0), 0, 0, 0, Tag1 ("Logs", 36)), 1, 0); (("empty", 755), ((Tag3 ((("set", 754)), 0, (0)), 100000000, 0, -319), 0, (("src/logs.mli", 161, 5690, 5692), ("src/logs.mli", 161, 5690, 5707), 0), 0, Tag1 ("Logs", 37)), 0); (("is_empty", 756), ((Tag1 (0, (Tag3 ((("set", 754)), 0, (0)), 100000000, 0, -318), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -317), 0), 100000000, 0, -316), 0, (("src/logs.mli", 164, 5744, 5746), ("src/logs.mli", 164, 5744, 5772), 0), 0, Tag1 ("Logs", 38)), 0); (("mem", 757), ((Tag1 (0, (Tag3 ((("def", 744)), [((("a")), 100000000, 0, -315)], (0)), 100000000, 0, -314), (Tag1 (0, (Tag3 ((("set", 754)), 0, (0)), 100000000, 0, -313), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -312), 0), 100000000, 0, -311), 0), 100000000, 0, -310), 0, (("src/logs.mli", 167, 5824, 5826), ("src/logs.mli", 167, 5824, 5857), 0), 0, Tag1 ("Logs", 39)), 0); (("add", 758), ((Tag1 (0, (Tag3 ((("def", 744)), [((("a")), 100000000, 0, -308)], (0)), 100000000, 0, -309), (Tag1 (0, ((("a")), 100000000, 0, -308), (Tag1 (0, (Tag3 ((("set", 754)), 0, (0)), 100000000, 0, -307), (Tag3 ((("set", 754)), 0, (0)), 100000000, 0, -306), 0), 100000000, 0, -305), 0), 100000000, 0, -304), 0), 100000000, 0, -303), 0, (("src/logs.mli", 170, 5927, 5929), ("src/logs.mli", 170, 5927, 5965), 0), 0, Tag1 ("Logs", 40)), 0); (("rem", 759), ((Tag1 (0, (Tag3 ((("def", 744)), [((("a")), 100000000, 0, -302)], (0)), 100000000, 0, -301), (Tag1 (0, (Tag3 ((("set", 754)), 0, (0)), 100000000, 0, -300), (Tag3 ((("set", 754)), 0, (0)), 100000000, 0, -299), 0), 100000000, 0, -298), 0), 100000000, 0, -297), 0, (("src/logs.mli", 174, 6096, 6098), ("src/logs.mli", 174, 6096, 6128), 0), 0, Tag1 ("Logs", 41)), 0); (("find", 760), ((Tag1 (0, (Tag3 ((("def", 744)), [((("a")), 100000000, 0, -294)], (0)), 100000000, 0, -296), (Tag1 (0, (Tag3 ((("set", 754)), 0, (0)), 100000000, 0, -295), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -294)], (0)), 100000000, 0, -293), 0), 100000000, 0, -292), 0), 100000000, 0, -291), 0, (("src/logs.mli", 177, 6207, 6209), ("src/logs.mli", 177, 6207, 6246), 0), 0, Tag1 ("Logs", 42)), 0); (("get", 761), ((Tag1 (0, (Tag3 ((("def", 744)), [((("a")), 100000000, 0, -288)], (0)), 100000000, 0, -290), (Tag1 (0, (Tag3 ((("set", 754)), 0, (0)), 100000000, 0, -289), ((("a")), 100000000, 0, -288), 0), 100000000, 0, -287), 0), 100000000, 0, -286), 0, (("src/logs.mli", 180, 6322, 6324), ("src/logs.mli", 180, 6322, 6353), 0), 0, Tag1 ("Logs", 43)), 0); (("fold", 762), ((Tag1 (0, (Tag1 (0, (Tag3 ((("t", 752)), 0, (0)), 100000000, 0, -285), (Tag1 (0, ((("a")), 100000000, 0, -281), ((("a")), 100000000, 0, -281), 0), 100000000, 0, -284), 0), 100000000, 0, -283), (Tag1 (0, (Tag3 ((("set", 754)), 0, (0)), 100000000, 0, -282), (Tag1 (0, ((("a")), 100000000, 0, -281), ((("a")), 100000000, 0, -281), 0), 100000000, 0, -280), 0), 100000000, 0, -279), 0), 100000000, 0, -278), 0, (("src/logs.mli", 184, 6474, 6476), ("src/logs.mli", 184, 6474, 6521), 0), 0, Tag1 ("Logs", 44)), 0); (("pp_set", 763), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -277), (Tag1 (0, (Tag3 ((("set", 754)), 0, (0)), 100000000, 0, -276), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -275), 0), 100000000, 0, -274), 0), 100000000, 0, -273), 0, (("src/logs.mli", 188, 6624, 6626), ("src/logs.mli", 188, 6624, 6670), 0), 0, Tag1 ("Logs", 45)), 0)]), 0, (("src/logs.mli", 114, 4130, 4130), ("src/logs.mli", 190, 6747, 6750), 0), Tag1 ("Logs", 46)), 0, 0); Tag1 (("msgf", 708), ([((("a")), 100000000, 0, -194); ((("b")), 100000000, 0, -190)], 2, 0, 1, ((Tag1 (0, (Tag1 (Tag1 ("header"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -201)], (0)), 100000000, 0, -200), (Tag1 (Tag1 ("tags"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("Tag", 707)), "set"), 0, (0)), 100000000, 0, -199)], (0)), 100000000, 0, -198), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format4"), [((("a")), 100000000, 0, -194); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -196); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -197); ((("b")), 100000000, 0, -190)], (0)), 100000000, 0, -195), ((("a")), 100000000, 0, -194), 0), 100000000, 0, -193), 0), 100000000, 0, -192), 0), 100000000, 0, -191), ((("b")), 100000000, 0, -190), 0), 100000000, 0, -189)), [63; 31], [0; 0], 0, 0, (("src/logs.mli", 192, 6752, 6752), ("src/logs.mli", 194, 6811, 6867), 0), 0, 0, 0, Tag1 ("Logs", 47)), 1, 0); Tag1 (("log", 709), ([((("a")), 100000000, 0, -187)], 1, 0, 1, ((Tag1 (0, (Tag3 ((("msgf", 708)), [((("a")), 100000000, 0, -187); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -188)], (0)), 100000000, 0, -186), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -185), 0), 100000000, 0, -184)), [63], [0], 0, 0, (("src/logs.mli", 208, 7508, 7508), ("src/logs.mli", 208, 7508, 7545), 0), 0, 0, 0, Tag1 ("Logs", 48)), 1, 0); (("msg", 710), ((Tag1 (Tag1 ("src"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("src", 704)), 0, (0)), 100000000, 0, -183)], (0)), 100000000, 0, -182), (Tag1 (0, (Tag3 ((("level", 698)), 0, (0)), 100000000, 0, -181), (Tag3 ((("log", 709)), [((("a")), 100000000, 0, -180)], (0)), 100000000, 0, -179), 0), 100000000, 0, -178), 0), 100000000, 0, -177), 0, (("src/logs.mli", 212, 7653, 7653), ("src/logs.mli", 212, 7653, 7690), 0), 0, Tag1 ("Logs", 49)), 0); (("app", 711), ((Tag1 (Tag1 ("src"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("src", 704)), 0, (0)), 100000000, 0, -176)], (0)), 100000000, 0, -175), (Tag3 ((("log", 709)), [((("a")), 100000000, 0, -174)], (0)), 100000000, 0, -173), 0), 100000000, 0, -172), 0, (("src/logs.mli", 217, 7907, 7907), ("src/logs.mli", 217, 7907, 7935), 0), 0, Tag1 ("Logs", 50)), 0); (("err", 712), ((Tag1 (Tag1 ("src"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("src", 704)), 0, (0)), 100000000, 0, -171)], (0)), 100000000, 0, -170), (Tag3 ((("log", 709)), [((("a")), 100000000, 0, -169)], (0)), 100000000, 0, -168), 0), 100000000, 0, -167), 0, (("src/logs.mli", 220, 7964, 7964), ("src/logs.mli", 220, 7964, 7992), 0), 0, Tag1 ("Logs", 51)), 0); (("warn", 713), ((Tag1 (Tag1 ("src"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("src", 704)), 0, (0)), 100000000, 0, -166)], (0)), 100000000, 0, -165), (Tag3 ((("log", 709)), [((("a")), 100000000, 0, -164)], (0)), 100000000, 0, -163), 0), 100000000, 0, -162), 0, (("src/logs.mli", 223, 8023, 8023), ("src/logs.mli", 223, 8023, 8052), 0), 0, Tag1 ("Logs", 52)), 0); (("info", 714), ((Tag1 (Tag1 ("src"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("src", 704)), 0, (0)), 100000000, 0, -161)], (0)), 100000000, 0, -160), (Tag3 ((("log", 709)), [((("a")), 100000000, 0, -159)], (0)), 100000000, 0, -158), 0), 100000000, 0, -157), 0, (("src/logs.mli", 226, 8086, 8086), ("src/logs.mli", 226, 8086, 8115), 0), 0, Tag1 ("Logs", 53)), 0); (("debug", 715), ((Tag1 (Tag1 ("src"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("src", 704)), 0, (0)), 100000000, 0, -156)], (0)), 100000000, 0, -155), (Tag3 ((("log", 709)), [((("a")), 100000000, 0, -154)], (0)), 100000000, 0, -153), 0), 100000000, 0, -152), 0, (("src/logs.mli", 229, 8146, 8146), ("src/logs.mli", 229, 8146, 8176), 0), 0, Tag1 ("Logs", 54)), 0); (("kmsg", 716), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -151), ((("b")), 100000000, 0, -144), 0), 100000000, 0, -150), (Tag1 (Tag1 ("src"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("src", 704)), 0, (0)), 100000000, 0, -149)], (0)), 100000000, 0, -148), (Tag1 (0, (Tag3 ((("level", 698)), 0, (0)), 100000000, 0, -147), (Tag1 (0, (Tag3 ((("msgf", 708)), [((("a")), 100000000, 0, -146); ((("b")), 100000000, 0, -144)], (0)), 100000000, 0, -145), ((("b")), 100000000, 0, -144), 0), 100000000, 0, -143), 0), 100000000, 0, -142), 0), 100000000, 0, -141), 0), 100000000, 0, -140), 0, (("src/logs.mli", 232, 8209, 8209), ("src/logs.mli", 232, 8209, 8276), 0), 0, Tag1 ("Logs", 55)), 0); (("on_error", 717), ((Tag1 (Tag1 ("src"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("src", 704)), 0, (0)), 100000000, 0, -139)], (0)), 100000000, 0, -138), (Tag1 (Tag1 ("level"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("level", 698)), 0, (0)), 100000000, 0, -137)], (0)), 100000000, 0, -136), (Tag1 (Tag1 ("header"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -135)], (0)), 100000000, 0, -134), (Tag1 (Tag1 ("tags"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("Tag", 707)), "set"), 0, (0)), 100000000, 0, -133)], (0)), 100000000, 0, -132), (Tag1 (("pp"), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -131), (Tag1 (0, ((("b")), 100000000, 0, -126), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -130), 0), 100000000, 0, -129), 0), 100000000, 0, -128), (Tag1 (("use"), (Tag1 (0, ((("b")), 100000000, 0, -126), ((("a")), 100000000, 0, -124), 0), 100000000, 0, -127), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [((("a")), 100000000, 0, -124); ((("b")), 100000000, 0, -126)], (0)), 100000000, 0, -125), ((("a")), 100000000, 0, -124), 0), 100000000, 0, -123), 0), 100000000, 0, -122), 0), 100000000, 0, -121), 0), 100000000, 0, -120), 0), 100000000, 0, -119), 0), 100000000, 0, -118), 0), 100000000, 0, -117), 0, (("src/logs.mli", 237, 8389, 8389), ("src/logs.mli", 238, 8467, 8547), 0), 0, Tag1 ("Logs", 56)), 0); (("on_error_msg", 718), ((Tag1 (Tag1 ("src"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("src", 704)), 0, (0)), 100000000, 0, -116)], (0)), 100000000, 0, -115), (Tag1 (Tag1 ("level"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("level", 698)), 0, (0)), 100000000, 0, -114)], (0)), 100000000, 0, -113), (Tag1 (Tag1 ("header"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -112)], (0)), 100000000, 0, -111), (Tag1 (Tag1 ("tags"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("Tag", 707)), "set"), 0, (0)), 100000000, 0, -110)], (0)), 100000000, 0, -109), (Tag1 (("use"), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -108), ((("a")), 100000000, 0, -102), 0), 100000000, 0, -107), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [((("a")), 100000000, 0, -102); (Tag8 (([("Msg", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -106))))], (0, 100000000, 0, -105), 1, 0, 0)), 100000000, 0, -104)], (0)), 100000000, 0, -103), ((("a")), 100000000, 0, -102), 0), 100000000, 0, -101), 0), 100000000, 0, -100), 0), 100000000, 0, -99), 0), 100000000, 0, -98), 0), 100000000, 0, -97), 0), 100000000, 0, -96), 0, (("src/logs.mli", 245, 8754, 8754), ("src/logs.mli", 247, 8858, 8895), 0), 0, Tag1 ("Logs", 57)), 0); Tag4 (("LOG", 719), ((Tag1 ([(("msg", 764), ((Tag1 (0, (Tag3 ((("level", 698)), 0, (0)), 100000000, 0, -429), (Tag3 ((("log", 709)), [((("a")), 100000000, 0, -428)], (0)), 100000000, 0, -427), 0), 100000000, 0, -426), 0, (("src/logs.mli", 258, 9160, 9162), ("src/logs.mli", 258, 9160, 9187), 0), 0, Tag1 ("Logs", 58)), 0); (("app", 765), ((Tag3 ((("log", 709)), [((("a")), 100000000, 0, -425)], (0)), 100000000, 0, -424), 0, (("src/logs.mli", 261, 9215, 9217), ("src/logs.mli", 261, 9215, 9233), 0), 0, Tag1 ("Logs", 59)), 0); (("err", 766), ((Tag3 ((("log", 709)), [((("a")), 100000000, 0, -423)], (0)), 100000000, 0, -422), 0, (("src/logs.mli", 264, 9264, 9266), ("src/logs.mli", 264, 9264, 9282), 0), 0, Tag1 ("Logs", 60)), 0); (("warn", 767), ((Tag3 ((("log", 709)), [((("a")), 100000000, 0, -421)], (0)), 100000000, 0, -420), 0, (("src/logs.mli", 267, 9315, 9317), ("src/logs.mli", 267, 9315, 9334), 0), 0, Tag1 ("Logs", 61)), 0); (("info", 768), ((Tag3 ((("log", 709)), [((("a")), 100000000, 0, -419)], (0)), 100000000, 0, -418), 0, (("src/logs.mli", 270, 9370, 9372), ("src/logs.mli", 270, 9370, 9389), 0), 0, Tag1 ("Logs", 62)), 0); (("debug", 769), ((Tag3 ((("log", 709)), [((("a")), 100000000, 0, -417)], (0)), 100000000, 0, -416), 0, (("src/logs.mli", 273, 9422, 9424), ("src/logs.mli", 273, 9422, 9442), 0), 0, Tag1 ("Logs", 63)), 0); (("kmsg", 770), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -415), ((("b")), 100000000, 0, -410), 0), 100000000, 0, -414), (Tag1 (0, (Tag3 ((("level", 698)), 0, (0)), 100000000, 0, -413), (Tag1 (0, (Tag3 ((("msgf", 708)), [((("a")), 100000000, 0, -412); ((("b")), 100000000, 0, -410)], (0)), 100000000, 0, -411), ((("b")), 100000000, 0, -410), 0), 100000000, 0, -409), 0), 100000000, 0, -408), 0), 100000000, 0, -407), 0, (("src/logs.mli", 276, 9477, 9479), ("src/logs.mli", 276, 9477, 9534), 0), 0, Tag1 ("Logs", 64)), 0); (("on_error", 771), ((Tag1 (Tag1 ("level"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("level", 698)), 0, (0)), 100000000, 0, -406)], (0)), 100000000, 0, -405), (Tag1 (Tag1 ("header"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -404)], (0)), 100000000, 0, -403), (Tag1 (Tag1 ("tags"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("Tag", 707)), "set"), 0, (0)), 100000000, 0, -402)], (0)), 100000000, 0, -401), (Tag1 (("pp"), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -400), (Tag1 (0, ((("b")), 100000000, 0, -395), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -399), 0), 100000000, 0, -398), 0), 100000000, 0, -397), (Tag1 (("use"), (Tag1 (0, ((("b")), 100000000, 0, -395), ((("a")), 100000000, 0, -393), 0), 100000000, 0, -396), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [((("a")), 100000000, 0, -393); ((("b")), 100000000, 0, -395)], (0)), 100000000, 0, -394), ((("a")), 100000000, 0, -393), 0), 100000000, 0, -392), 0), 100000000, 0, -391), 0), 100000000, 0, -390), 0), 100000000, 0, -389), 0), 100000000, 0, -388), 0), 100000000, 0, -387), 0, (("src/logs.mli", 281, 9616, 9618), ("src/logs.mli", 283, 9764, 9770), 0), 0, Tag1 ("Logs", 65)), 0); (("on_error_msg", 772), ((Tag1 (Tag1 ("level"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("level", 698)), 0, (0)), 100000000, 0, -386)], (0)), 100000000, 0, -385), (Tag1 (Tag1 ("header"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -384)], (0)), 100000000, 0, -383), (Tag1 (Tag1 ("tags"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("Tag", 707)), "set"), 0, (0)), 100000000, 0, -382)], (0)), 100000000, 0, -381), (Tag1 (("use"), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -380), ((("a")), 100000000, 0, -374), 0), 100000000, 0, -379), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [((("a")), 100000000, 0, -374); (Tag8 (([("Msg", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -378))))], (0, 100000000, 0, -377), 1, 0, 0)), 100000000, 0, -376)], (0)), 100000000, 0, -375), ((("a")), 100000000, 0, -374), 0), 100000000, 0, -373), 0), 100000000, 0, -372), 0), 100000000, 0, -371), 0), 100000000, 0, -370), 0), 100000000, 0, -369), 0, (("src/logs.mli", 286, 9803, 9805), ("src/logs.mli", 287, 9875, 9934), 0), 0, Tag1 ("Logs", 66)), 0)])), 0, (("src/logs.mli", 254, 9104, 9104), ("src/logs.mli", 289, 9970, 9973), 0), Tag1 ("Logs", 67)), 0); (("src_log", 720), ((Tag1 (0, (Tag3 ((("src", 704)), 0, (0)), 100000000, 0, -95), (Tag11 ((("LOG", 719)), 0), 100000000, 0, -94), 0), 100000000, 0, -93), 0, (("src/logs.mli", 291, 9975, 9975), ("src/logs.mli", 291, 9975, 10008), 0), 0, Tag1 ("Logs", 68)), 0); Tag1 (("reporter", 721), (0, 0, [[(("report", 674), 0, (Tag10 ((Tag1 (0, (Tag3 ((("src", 704)), 0, (0)), 100000000, 0, -92), (Tag1 (0, (Tag3 ((("level", 698)), 0, (0)), 100000000, 0, -91), (Tag1 (("over"), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -90), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -89), 0), 100000000, 0, -88), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -87), (Tag9 (("b")), 100000000, 0, -79), 0), 100000000, 0, -86), (Tag1 (0, (Tag3 ((("msgf", 708)), [(Tag9 (("a")), 100000000, 0, -78); (Tag9 (("b")), 100000000, 0, -79)], (0)), 100000000, 0, -85), (Tag9 (("b")), 100000000, 0, -79), 0), 100000000, 0, -84), 0), 100000000, 0, -83), 0), 100000000, 0, -82), 0), 100000000, 0, -81), 0), 100000000, 0, -80), [(Tag9 (("a")), 100000000, 0, -78); (Tag9 (("b")), 100000000, 0, -79)]), 100000000, 0, -77), (("src/logs.mli", 297, 10128, 10132), ("src/logs.mli", 298, 10203, 10228), 0), 0, Tag1 ("Logs", 70))]], 1, 0, 0, 0, 0, 0, (("src/logs.mli", 296, 10112, 10112), ("src/logs.mli", 298, 10203, 10230), 0), 0, 0, 1, Tag1 ("Logs", 69)), 1, 0); (("nop_reporter", 722), ((Tag3 ((("reporter", 721)), 0, (0)), 100000000, 0, -76), 0, (("src/logs.mli", 317, 11000, 11000), ("src/logs.mli", 317, 11000, 11027), 0), 0, Tag1 ("Logs", 71)), 0); (("format_reporter", 723), ((Tag1 (Tag1 ("pp_header"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -75), (Tag1 (0, (Tag2 ([(Tag3 ((("level", 698)), 0, (0)), 100000000, 0, -72); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -74)], (0)), 100000000, 0, -73)]), 100000000, 0, -71), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -70), 0), 100000000, 0, -69), 0), 100000000, 0, -68)], (0)), 100000000, 0, -67), (Tag1 (Tag1 ("app"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -66)], (0)), 100000000, 0, -65), (Tag1 (Tag1 ("dst"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -64)], (0)), 100000000, 0, -63), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -62), (Tag3 ((("reporter", 721)), 0, (0)), 100000000, 0, -61), 0), 100000000, 0, -60), 0), 100000000, 0, -59), 0), 100000000, 0, -58), 0), 100000000, 0, -57), 0, (("src/logs.mli", 321, 11152, 11152), ("src/logs.mli", 323, 11244, 11312), 0), 0, Tag1 ("Logs", 72)), 0); (("reporter", 724), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -56), (Tag3 ((("reporter", 721)), 0, (0)), 100000000, 0, -55), 0), 100000000, 0, -54), 0, (("src/logs.mli", 343, 12293, 12293), ("src/logs.mli", 343, 12293, 12324), 0), 0, Tag1 ("Logs", 73)), 0); (("set_reporter", 725), ((Tag1 (0, (Tag3 ((("reporter", 721)), 0, (0)), 100000000, 0, -53), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -52), 0), 100000000, 0, -51), 0, (("src/logs.mli", 346, 12373, 12373), ("src/logs.mli", 346, 12373, 12408), 0), 0, Tag1 ("Logs", 74)), 0); (("set_reporter_mutex", 726), ((Tag1 (("lock"), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -50), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -49), 0), 100000000, 0, -48), (Tag1 (("unlock"), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -47), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -46), 0), 100000000, 0, -45), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -44), 0), 100000000, 0, -43), 0), 100000000, 0, -42), 0, (("src/logs.mli", 349, 12468, 12468), ("src/logs.mli", 349, 12468, 12545), 0), 0, Tag1 ("Logs", 75)), 0); (("report", 727), ((Tag1 (0, (Tag3 ((("src", 704)), 0, (0)), 100000000, 0, -41), (Tag1 (0, (Tag3 ((("level", 698)), 0, (0)), 100000000, 0, -40), (Tag1 (("over"), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -39), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -38), 0), 100000000, 0, -37), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -36), ((("b")), 100000000, 0, -32), 0), 100000000, 0, -35), (Tag1 (0, (Tag3 ((("msgf", 708)), [((("a")), 100000000, 0, -34); ((("b")), 100000000, 0, -32)], (0)), 100000000, 0, -33), ((("b")), 100000000, 0, -32), 0), 100000000, 0, -31), 0), 100000000, 0, -30), 0), 100000000, 0, -29), 0), 100000000, 0, -28), 0), 100000000, 0, -27), 0, (("src/logs.mli", 356, 12796, 12796), ("src/logs.mli", 357, 12864, 12885), 0), 0, Tag1 ("Logs", 76)), 0); (("incr_err_count", 728), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -26), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -25), 0), 100000000, 0, -24), 0, (("src/logs.mli", 358, 12886, 12886), ("src/logs.mli", 358, 12886, 12919), 0), 0, Tag1 ("Logs", 77)), 0); (("incr_warn_count", 729), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -23), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0, (("src/logs.mli", 359, 12920, 12920), ("src/logs.mli", 359, 12920, 12954), 0), 0, Tag1 ("Logs", 78)), 0); (("pp_print_text", 730), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -20), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -19), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -18), 0), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("src/logs.mli", 360, 12955, 12955), ("src/logs.mli", 360, 12955, 13009), 0), 0, Tag1 ("Logs", 79)), 0); (("pp_header", 731), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -15), (Tag1 (0, (Tag2 ([(Tag3 ((("level", 698)), 0, (0)), 100000000, 0, -12); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -14)], (0)), 100000000, 0, -13)]), 100000000, 0, -11), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10), 0), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("src/logs.mli", 363, 13019, 13019), ("src/logs.mli", 363, 13019, 13086), 0), 0, Tag1 ("Logs", 80)), 0); (("err_count", 732), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("src/logs.mli", 369, 13231, 13231), ("src/logs.mli", 369, 13231, 13258), 0), 0, Tag1 ("Logs", 81)), 0); (("warn_count", 733), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/logs.mli", 373, 13358, 13358), ("src/logs.mli", 373, 13358, 13386), 0), 0, Tag1 ("Logs", 82)), 0)], "Logs", [("Logs", ("\225\211\226\007\217\232.\007\207\246Z\146\164\004\234}")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

val warn_count : unit -> int

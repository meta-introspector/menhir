val transl_implementation :
  string -> Typedtree.structure * Typedtree.module_coercion -> Lambda.program
val transl_store_phrases :
  string -> Typedtree.structure -> int * Lambda.lambda
val transl_store_implementation :
  string -> Typedtree.structure * Typedtree.module_coercion -> Lambda.program
val transl_implementation_flambda :
  string -> Typedtree.structure * Typedtree.module_coercion -> Lambda.program
val transl_toplevel_definition : Typedtree.structure -> Lambda.lambda
val transl_package :
  Ident.t option list ->
  Ident.t -> Typedtree.module_coercion -> Lambda.lambda
val transl_store_package :
  Ident.t option list ->
  Ident.t -> Typedtree.module_coercion -> int * Lambda.lambda
val transl_package_flambda :
  Ident.t option list -> Typedtree.module_coercion -> int * Lambda.lambda
val toplevel_name : Ident.t -> string
val nat_toplevel_name : Ident.t -> Ident.t * int
val primitive_declarations : Primitive.description list ref
type unsafe_component =
    Unsafe_module_binding
  | Unsafe_functor
  | Unsafe_non_function
  | Unsafe_typext
type unsafe_info =
    Unsafe of { reason : unsafe_component; loc : Location.t; subid : Ident.t;
    }
  | Unnamed
type error =
    Circular_dependency of (Ident.t * unsafe_info) list
  | Conflicting_inline_attributes
exception Error of Location.t * error
val report_error : Location.t -> error -> Location.error
("DEBUG:rule", [(("transl_implementation", 620), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -89), (Tag1 (0, (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Typedtree")), "structure"), 0, (0)), 100000000, 0, -87); (Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_coercion"), 0, (0)), 100000000, 0, -88)]), 100000000, 0, -86), (Tag3 (Tag1 ((Tag2 ("Lambda")), "program"), 0, (0)), 100000000, 0, -85), 0), 100000000, 0, -84), 0), 100000000, 0, -83), 0, (("lambda/translmod.mli", 22, 1197, 1197), ("lambda/translmod.mli", 23, 1224, 1285), 0), 0, Tag1 ("Translmod", 6)), 0); (("transl_store_phrases", 621), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -82), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "structure"), 0, (0)), 100000000, 0, -81), (Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -79); (Tag3 (Tag1 ((Tag2 ("Lambda")), "lambda"), 0, (0)), 100000000, 0, -80)]), 100000000, 0, -78), 0), 100000000, 0, -77), 0), 100000000, 0, -76), 0, (("lambda/translmod.mli", 24, 1286, 1286), ("lambda/translmod.mli", 24, 1286, 1347), 0), 0, Tag1 ("Translmod", 7)), 0); (("transl_store_implementation", 622), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -75), (Tag1 (0, (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Typedtree")), "structure"), 0, (0)), 100000000, 0, -73); (Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_coercion"), 0, (0)), 100000000, 0, -74)]), 100000000, 0, -72), (Tag3 (Tag1 ((Tag2 ("Lambda")), "program"), 0, (0)), 100000000, 0, -71), 0), 100000000, 0, -70), 0), 100000000, 0, -69), 0, (("lambda/translmod.mli", 25, 1348, 1348), ("lambda/translmod.mli", 26, 1381, 1442), 0), 0, Tag1 ("Translmod", 8)), 0); (("transl_implementation_flambda", 623), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -68), (Tag1 (0, (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Typedtree")), "structure"), 0, (0)), 100000000, 0, -66); (Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_coercion"), 0, (0)), 100000000, 0, -67)]), 100000000, 0, -65), (Tag3 (Tag1 ((Tag2 ("Lambda")), "program"), 0, (0)), 100000000, 0, -64), 0), 100000000, 0, -63), 0), 100000000, 0, -62), 0, (("lambda/translmod.mli", 28, 1444, 1444), ("lambda/translmod.mli", 29, 1479, 1536), 0), 0, Tag1 ("Translmod", 9)), 0); (("transl_toplevel_definition", 624), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "structure"), 0, (0)), 100000000, 0, -61), (Tag3 (Tag1 ((Tag2 ("Lambda")), "lambda"), 0, (0)), 100000000, 0, -60), 0), 100000000, 0, -59), 0, (("lambda/translmod.mli", 31, 1538, 1538), ("lambda/translmod.mli", 31, 1538, 1589), 0), 0, Tag1 ("Translmod", 10)), 0); (("transl_package", 625), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -58)], (0)), 100000000, 0, -57)], (0)), 100000000, 0, -56), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -55), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_coercion"), 0, (0)), 100000000, 0, -54), (Tag3 (Tag1 ((Tag2 ("Lambda")), "lambda"), 0, (0)), 100000000, 0, -53), 0), 100000000, 0, -52), 0), 100000000, 0, -51), 0), 100000000, 0, -50), 0, (("lambda/translmod.mli", 32, 1590, 1590), ("lambda/translmod.mli", 33, 1610, 1675), 0), 0, Tag1 ("Translmod", 11)), 0); (("transl_store_package", 626), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -49)], (0)), 100000000, 0, -48)], (0)), 100000000, 0, -47), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -46), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_coercion"), 0, (0)), 100000000, 0, -45), (Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -43); (Tag3 (Tag1 ((Tag2 ("Lambda")), "lambda"), 0, (0)), 100000000, 0, -44)]), 100000000, 0, -42), 0), 100000000, 0, -41), 0), 100000000, 0, -40), 0), 100000000, 0, -39), 0, (("lambda/translmod.mli", 34, 1676, 1676), ("lambda/translmod.mli", 35, 1702, 1773), 0), 0, Tag1 ("Translmod", 12)), 0); (("transl_package_flambda", 627), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -38)], (0)), 100000000, 0, -37)], (0)), 100000000, 0, -36), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_coercion"), 0, (0)), 100000000, 0, -35), (Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -33); (Tag3 (Tag1 ((Tag2 ("Lambda")), "lambda"), 0, (0)), 100000000, 0, -34)]), 100000000, 0, -32), 0), 100000000, 0, -31), 0), 100000000, 0, -30), 0, (("lambda/translmod.mli", 37, 1775, 1775), ("lambda/translmod.mli", 38, 1803, 1863), 0), 0, Tag1 ("Translmod", 13)), 0); (("toplevel_name", 628), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -29), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -28), 0), 100000000, 0, -27), 0, (("lambda/translmod.mli", 40, 1865, 1865), ("lambda/translmod.mli", 40, 1865, 1901), 0), 0, Tag1 ("Translmod", 14)), 0); (("nat_toplevel_name", 629), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -26), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -24); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -25)]), 100000000, 0, -23), 0), 100000000, 0, -22), 0, (("lambda/translmod.mli", 41, 1902, 1902), ("lambda/translmod.mli", 41, 1902, 1949), 0), 0, Tag1 ("Translmod", 15)), 0); (("primitive_declarations", 630), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Primitive")), "description"), 0, (0)), 100000000, 0, -21)], (0)), 100000000, 0, -20)], (0)), 100000000, 0, -19), 0, (("lambda/translmod.mli", 43, 1951, 1951), ("lambda/translmod.mli", 43, 1951, 2009), 0), 0, Tag1 ("Translmod", 16)), 0); Tag1 (("unsafe_component", 631), (0, 0, Tag1 ([(("Unsafe_module_binding", 511), (0), 0, (("lambda/translmod.mli", 46, 2035, 2037), ("lambda/translmod.mli", 46, 2035, 2060), 0), 0, Tag1 ("Translmod", 18)); (("Unsafe_functor", 512), (0), 0, (("lambda/translmod.mli", 47, 2061, 2063), ("lambda/translmod.mli", 47, 2061, 2079), 0), 0, Tag1 ("Translmod", 19)); (("Unsafe_non_function", 513), (0), 0, (("lambda/translmod.mli", 48, 2080, 2082), ("lambda/translmod.mli", 48, 2080, 2103), 0), 0, Tag1 ("Translmod", 20)); (("Unsafe_typext", 514), (0), 0, (("lambda/translmod.mli", 49, 2104, 2106), ("lambda/translmod.mli", 49, 2104, 2121), 0), 0, Tag1 ("Translmod", 21))], 0), 1, 0, 0, 0, 0, 0, (("lambda/translmod.mli", 45, 2011, 2011), ("lambda/translmod.mli", 49, 2104, 2121), 0), 0, 1, 0, Tag1 ("Translmod", 17)), 1, 0); Tag1 (("unsafe_info", 632), (0, 0, Tag1 ([(("Unsafe", 516), Tag1 ([(("reason", 517), 0, (Tag3 ((("unsafe_component", 631)), 0, (0)), 100000000, 0, -16), (("lambda/translmod.mli", 52, 2142, 2158), ("lambda/translmod.mli", 52, 2142, 2182), 0), 0, Tag1 ("Translmod", 23)); (("loc", 584), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -17), (("lambda/translmod.mli", 52, 2142, 2183), ("lambda/translmod.mli", 52, 2142, 2198), 0), 0, Tag1 ("Translmod", 24)); (("subid", 585), 0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -18), (("lambda/translmod.mli", 52, 2142, 2199), ("lambda/translmod.mli", 52, 2142, 2212), 0), 0, Tag1 ("Translmod", 25))]), 0, (("lambda/translmod.mli", 52, 2142, 2144), ("lambda/translmod.mli", 52, 2142, 2214), 0), 0, Tag1 ("Translmod", 26)); (("Unnamed", 586), (0), 0, (("lambda/translmod.mli", 53, 2215, 2217), ("lambda/translmod.mli", 53, 2215, 2226), 0), 0, Tag1 ("Translmod", 27))], 0), 1, 0, 0, 0, 0, 0, (("lambda/translmod.mli", 51, 2123, 2123), ("lambda/translmod.mli", 53, 2215, 2226), 0), 0, 0, 0, Tag1 ("Translmod", 22)), 1, 0); Tag1 (("error", 633), (0, 0, Tag1 ([(("Circular_dependency", 615), ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -14); (Tag3 ((("unsafe_info", 632)), 0, (0)), 100000000, 0, -15)]), 100000000, 0, -13)], (0)), 100000000, 0, -12)]), 0, (("lambda/translmod.mli", 56, 2241, 2243), ("lambda/translmod.mli", 56, 2241, 2294), 0), 0, Tag1 ("Translmod", 34)); (("Conflicting_inline_attributes", 616), (0), 0, (("lambda/translmod.mli", 57, 2295, 2295), ("lambda/translmod.mli", 57, 2295, 2326), 0), 0, Tag1 ("Translmod", 35))], 0), 1, 0, 0, 0, 0, 0, (("lambda/translmod.mli", 55, 2228, 2228), ("lambda/translmod.mli", 57, 2295, 2326), 0), 0, 0, 0, Tag1 ("Translmod", 33)), 1, 0); Tag2 (("Error", 634), ((Tag3 ("exn", 7)), 0, ([(Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -10); (Tag3 ((("error", 633)), 0, (0)), 100000000, 0, -11)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Translmod", 36)), 2, 0); (("report_error", 635), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -9), (Tag1 (0, (Tag3 ((("error", 633)), 0, (0)), 100000000, 0, -8), (Tag3 (Tag1 ((Tag2 ("Location")), "error"), 0, (0)), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("lambda/translmod.mli", 61, 2367, 2367), ("lambda/translmod.mli", 61, 2367, 2422), 0), 0, Tag1 ("Translmod", 37)), 0); (("reset", 636), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("lambda/translmod.mli", 63, 2424, 2424), ("lambda/translmod.mli", 63, 2424, 2447), 0), 0, Tag1 ("Translmod", 38)), 0)], "Translmod", [("Translmod", ("\1302\222\027\178\240\175\209\028q5+\165\242\133\014")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Types", ("\177\238\029.\220\006\163!\230\015\006\182\133\155\194\166")); ("Typedtree", ("c5z\186\175w\146\254\018V\184\031\0038\004\227")); ("Type_immediacy", ("\"\127k\011Q\241\211\138\193;8\142\129\141#\251")); ("Subst", ("\021\031\148\223\127\186\189\135\027}\145r\216\143\177\156")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shape", ("\235\127Y\213\025\137=\244\218\181\248N\189\188\216p")); ("Primitive", ("}Shh\162\015|\220A\203\249\232\245G\213\019")); ("Path", ("\012\183\178\025\1298\228*\021r\185\160Y\252\n\026")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Outcometree", ("9\021%\234\211\206\210\004H\165\208\2014\234Q\142")); ("Misc", ("*\026\026\234c\191\131\161\\\203\183\012O\252\153\198")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Load_path", ("\012@\228l\230\164S\172h\1726X\020\252o}")); ("Lambda", ("\180\1419\236'\146K$\128\006\135q\135V\029\180")); ("Identifiable", ("\004F\207\014\158GU\001\184\214\187%/#;\211")); ("Ident", ("\b9;!\187.\220\163(x\b\174\\\223\020\004")); ("Env", ("\021\n\181\142x\b\169j\227\"\017\248*\178\245\223")); ("Debuginfo", ("\131\251\175\217P\194M\163\022\151\002\005\006\185:\185")); ("Cmi_format", ("6\177\bU\139\"\023\152=\249\135\174\b\011Cg")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Build_path_prefix_map", ("y\028\167\207D\220\198\216\011\208\172\149\2416\bc")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216"))], [(0)])
val reset : unit -> unit

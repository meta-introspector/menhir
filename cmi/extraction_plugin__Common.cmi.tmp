val fnl : unit -> Pp.t
val fnl2 : unit -> Pp.t
val space_if : bool -> Pp.t
val pp_par : bool -> Pp.t -> Pp.t
val pp_apply : Pp.t -> bool -> Pp.t list -> Pp.t
val pp_apply2 : Pp.t -> bool -> Pp.t list -> Pp.t
val pp_tuple_light : (bool -> 'a -> Pp.t) -> 'a list -> Pp.t
val pp_tuple : ('a -> Pp.t) -> 'a list -> Pp.t
val pp_array : ('a -> Pp.t) -> 'a list -> Pp.t
val pp_boxed_tuple : ('a -> Pp.t) -> 'a list -> Pp.t
val pr_binding : Names.Id.t list -> Pp.t
val rename_id : Names.Id.t -> Names.Id.Set.t -> Names.Id.t
type env = Names.Id.t list * Names.Id.Set.t
val empty_env : unit -> env
val rename_vars : Names.Id.Set.t -> Names.Id.t list -> env
val rename_tvars : Names.Id.Set.t -> Names.Id.t list -> Names.Id.t list
val push_vars : Names.Id.t list -> env -> Names.Id.t list * env
val get_db_name : int -> env -> Names.Id.t
type phase = Pre | Impl | Intf
val set_phase : phase -> unit
val get_phase : unit -> phase
val opened_libraries : unit -> Names.ModPath.t list
type kind = Term | Type | Cons | Mod
val pp_global_with_key : kind -> Names.KerName.t -> Names.GlobRef.t -> string
val pp_global : kind -> Names.GlobRef.t -> string
val pp_global_name : kind -> Names.GlobRef.t -> string
val pp_module : Names.ModPath.t -> string
val top_visible_mp : unit -> Names.ModPath.t
val push_visible : Names.ModPath.t -> Names.ModPath.t list -> unit
val pop_visible : unit -> unit
val get_duplicate : Names.ModPath.t -> Names.Label.t -> string option
type reset_kind = AllButExternal | Everything
val reset_renaming_tables : reset_kind -> unit
val set_keywords : Names.Id.Set.t -> unit
val is_native_char : Extraction_plugin.Miniml.ml_ast -> bool
val get_native_char : Extraction_plugin.Miniml.ml_ast -> char
val pp_native_char : Extraction_plugin.Miniml.ml_ast -> Pp.t
val is_native_string : Extraction_plugin.Miniml.ml_ast -> bool
val get_native_string : Extraction_plugin.Miniml.ml_ast -> string
val pp_native_string : Extraction_plugin.Miniml.ml_ast -> Pp.t
("DEBUG:rule", [(("fnl", 611), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -179), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -178), 0), 100000000, 0, -177), 0, (("plugins/extraction/common.mli", 19, 976, 976), ("plugins/extraction/common.mli", 19, 976, 998), 0), 0, Tag1 ("Extraction_plugin__Common", 0)), 0); (("fnl2", 612), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -176), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -175), 0), 100000000, 0, -174), 0, (("plugins/extraction/common.mli", 20, 999, 999), ("plugins/extraction/common.mli", 20, 999, 1022), 0), 0, Tag1 ("Extraction_plugin__Common", 1)), 0); (("space_if", 613), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -173), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -172), 0), 100000000, 0, -171), 0, (("plugins/extraction/common.mli", 21, 1023, 1023), ("plugins/extraction/common.mli", 21, 1023, 1050), 0), 0, Tag1 ("Extraction_plugin__Common", 2)), 0); (("pp_par", 614), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -170), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -169), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -168), 0), 100000000, 0, -167), 0), 100000000, 0, -166), 0, (("plugins/extraction/common.mli", 23, 1052, 1052), ("plugins/extraction/common.mli", 23, 1052, 1085), 0), 0, Tag1 ("Extraction_plugin__Common", 3)), 0); (("pp_apply", 615), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -165), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -164), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -163)], (0)), 100000000, 0, -162), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -161), 0), 100000000, 0, -160), 0), 100000000, 0, -159), 0), 100000000, 0, -158), 0, (("plugins/extraction/common.mli", 26, 1167, 1167), ("plugins/extraction/common.mli", 26, 1167, 1215), 0), 0, Tag1 ("Extraction_plugin__Common", 4)), 0); (("pp_apply2", 616), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -157), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -156), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -155)], (0)), 100000000, 0, -154), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -153), 0), 100000000, 0, -152), 0), 100000000, 0, -151), 0), 100000000, 0, -150), 0, (("plugins/extraction/common.mli", 29, 1296, 1296), ("plugins/extraction/common.mli", 29, 1296, 1345), 0), 0, Tag1 ("Extraction_plugin__Common", 5)), 0); (("pp_tuple_light", 617), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -149), (Tag1 (0, ((("a")), 100000000, 0, -145), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -148), 0), 100000000, 0, -147), 0), 100000000, 0, -146), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -145)], (0)), 100000000, 0, -144), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -143), 0), 100000000, 0, -142), 0), 100000000, 0, -141), 0, (("plugins/extraction/common.mli", 31, 1347, 1347), ("plugins/extraction/common.mli", 31, 1347, 1407), 0), 0, Tag1 ("Extraction_plugin__Common", 6)), 0); (("pp_tuple", 618), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -138), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -140), 0), 100000000, 0, -139), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -138)], (0)), 100000000, 0, -137), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -136), 0), 100000000, 0, -135), 0), 100000000, 0, -134), 0, (("plugins/extraction/common.mli", 32, 1408, 1408), ("plugins/extraction/common.mli", 32, 1408, 1454), 0), 0, Tag1 ("Extraction_plugin__Common", 7)), 0); (("pp_array", 619), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -131), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -133), 0), 100000000, 0, -132), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -131)], (0)), 100000000, 0, -130), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -129), 0), 100000000, 0, -128), 0), 100000000, 0, -127), 0, (("plugins/extraction/common.mli", 33, 1455, 1455), ("plugins/extraction/common.mli", 33, 1455, 1501), 0), 0, Tag1 ("Extraction_plugin__Common", 8)), 0); (("pp_boxed_tuple", 620), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -124), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -126), 0), 100000000, 0, -125), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -124)], (0)), 100000000, 0, -123), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -122), 0), 100000000, 0, -121), 0), 100000000, 0, -120), 0, (("plugins/extraction/common.mli", 34, 1502, 1502), ("plugins/extraction/common.mli", 34, 1502, 1554), 0), 0, Tag1 ("Extraction_plugin__Common", 9)), 0); (("pr_binding", 621), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -119)], (0)), 100000000, 0, -118), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -117), 0), 100000000, 0, -116), 0, (("plugins/extraction/common.mli", 36, 1556, 1556), ("plugins/extraction/common.mli", 36, 1556, 1590), 0), 0, Tag1 ("Extraction_plugin__Common", 10)), 0); (("rename_id", 622), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -115), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "Set"), "t"), 0, (0)), 100000000, 0, -114), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -113), 0), 100000000, 0, -112), 0), 100000000, 0, -111), 0, (("plugins/extraction/common.mli", 38, 1592, 1592), ("plugins/extraction/common.mli", 38, 1592, 1632), 0), 0, Tag1 ("Extraction_plugin__Common", 11)), 0); Tag1 (("env", 623), (0, 0, 0, 1, ((Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -109)], (0)), 100000000, 0, -108); (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "Set"), "t"), 0, (0)), 100000000, 0, -110)]), 100000000, 0, -107)), 0, 0, 0, 0, (("plugins/extraction/common.mli", 40, 1634, 1634), ("plugins/extraction/common.mli", 40, 1634, 1665), 0), 0, 0, 0, Tag1 ("Extraction_plugin__Common", 12)), 1, 0); (("empty_env", 624), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -106), (Tag3 ((("env", 623)), 0, (0)), 100000000, 0, -105), 0), 100000000, 0, -104), 0, (("plugins/extraction/common.mli", 41, 1666, 1666), ("plugins/extraction/common.mli", 41, 1666, 1693), 0), 0, Tag1 ("Extraction_plugin__Common", 13)), 0); (("rename_vars", 625), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "Set"), "t"), 0, (0)), 100000000, 0, -103), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -102)], (0)), 100000000, 0, -101), (Tag3 ((("env", 623)), 0, (0)), 100000000, 0, -100), 0), 100000000, 0, -99), 0), 100000000, 0, -98), 0, (("plugins/extraction/common.mli", 43, 1695, 1695), ("plugins/extraction/common.mli", 43, 1695, 1740), 0), 0, Tag1 ("Extraction_plugin__Common", 14)), 0); (("rename_tvars", 626), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "Set"), "t"), 0, (0)), 100000000, 0, -97), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -96)], (0)), 100000000, 0, -95), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -94)], (0)), 100000000, 0, -93), 0), 100000000, 0, -92), 0), 100000000, 0, -91), 0, (("plugins/extraction/common.mli", 44, 1741, 1741), ("plugins/extraction/common.mli", 44, 1741, 1793), 0), 0, Tag1 ("Extraction_plugin__Common", 15)), 0); (("push_vars", 627), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -90)], (0)), 100000000, 0, -89), (Tag1 (0, (Tag3 ((("env", 623)), 0, (0)), 100000000, 0, -88), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -86)], (0)), 100000000, 0, -85); (Tag3 ((("env", 623)), 0, (0)), 100000000, 0, -87)]), 100000000, 0, -84), 0), 100000000, 0, -83), 0), 100000000, 0, -82), 0, (("plugins/extraction/common.mli", 45, 1794, 1794), ("plugins/extraction/common.mli", 45, 1794, 1845), 0), 0, Tag1 ("Extraction_plugin__Common", 16)), 0); (("get_db_name", 628), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -81), (Tag1 (0, (Tag3 ((("env", 623)), 0, (0)), 100000000, 0, -80), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -79), 0), 100000000, 0, -78), 0), 100000000, 0, -77), 0, (("plugins/extraction/common.mli", 46, 1846, 1846), ("plugins/extraction/common.mli", 46, 1846, 1882), 0), 0, Tag1 ("Extraction_plugin__Common", 17)), 0); Tag1 (("phase", 629), (0, 0, Tag1 ([(("Pre", 536), (0), 0, (("plugins/extraction/common.mli", 48, 1884, 1897), ("plugins/extraction/common.mli", 48, 1884, 1900), 0), 0, Tag1 ("Extraction_plugin__Common", 19)); (("Impl", 537), (0), 0, (("plugins/extraction/common.mli", 48, 1884, 1901), ("plugins/extraction/common.mli", 48, 1884, 1907), 0), 0, Tag1 ("Extraction_plugin__Common", 20)); (("Intf", 538), (0), 0, (("plugins/extraction/common.mli", 48, 1884, 1908), ("plugins/extraction/common.mli", 48, 1884, 1914), 0), 0, Tag1 ("Extraction_plugin__Common", 21))], 0), 1, 0, 0, 0, 0, 0, (("plugins/extraction/common.mli", 48, 1884, 1884), ("plugins/extraction/common.mli", 48, 1884, 1914), 0), 0, 1, 0, Tag1 ("Extraction_plugin__Common", 18)), 1, 0); (("set_phase", 630), ((Tag1 (0, (Tag3 ((("phase", 629)), 0, (0)), 100000000, 0, -76), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -75), 0), 100000000, 0, -74), 0, (("plugins/extraction/common.mli", 50, 1916, 1916), ("plugins/extraction/common.mli", 50, 1916, 1945), 0), 0, Tag1 ("Extraction_plugin__Common", 22)), 0); (("get_phase", 631), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -73), (Tag3 ((("phase", 629)), 0, (0)), 100000000, 0, -72), 0), 100000000, 0, -71), 0, (("plugins/extraction/common.mli", 51, 1946, 1946), ("plugins/extraction/common.mli", 51, 1946, 1975), 0), 0, Tag1 ("Extraction_plugin__Common", 23)), 0); (("opened_libraries", 632), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -70), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -69)], (0)), 100000000, 0, -68), 0), 100000000, 0, -67), 0, (("plugins/extraction/common.mli", 53, 1977, 1977), ("plugins/extraction/common.mli", 53, 1977, 2022), 0), 0, Tag1 ("Extraction_plugin__Common", 24)), 0); Tag1 (("kind", 633), (0, 0, Tag1 ([(("Term", 552), (0), 0, (("plugins/extraction/common.mli", 55, 2024, 2036), ("plugins/extraction/common.mli", 55, 2024, 2040), 0), 0, Tag1 ("Extraction_plugin__Common", 26)); (("Type", 553), (0), 0, (("plugins/extraction/common.mli", 55, 2024, 2041), ("plugins/extraction/common.mli", 55, 2024, 2047), 0), 0, Tag1 ("Extraction_plugin__Common", 27)); (("Cons", 554), (0), 0, (("plugins/extraction/common.mli", 55, 2024, 2048), ("plugins/extraction/common.mli", 55, 2024, 2054), 0), 0, Tag1 ("Extraction_plugin__Common", 28)); (("Mod", 555), (0), 0, (("plugins/extraction/common.mli", 55, 2024, 2055), ("plugins/extraction/common.mli", 55, 2024, 2060), 0), 0, Tag1 ("Extraction_plugin__Common", 29))], 0), 1, 0, 0, 0, 0, 0, (("plugins/extraction/common.mli", 55, 2024, 2024), ("plugins/extraction/common.mli", 55, 2024, 2060), 0), 0, 1, 0, Tag1 ("Extraction_plugin__Common", 25)), 1, 0); (("pp_global_with_key", 634), ((Tag1 (0, (Tag3 ((("kind", 633)), 0, (0)), 100000000, 0, -66), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "KerName"), "t"), 0, (0)), 100000000, 0, -65), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -64), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -63), 0), 100000000, 0, -62), 0), 100000000, 0, -61), 0), 100000000, 0, -60), 0, (("plugins/extraction/common.mli", 57, 2062, 2062), ("plugins/extraction/common.mli", 57, 2062, 2127), 0), 0, Tag1 ("Extraction_plugin__Common", 30)), 0); (("pp_global", 635), ((Tag1 (0, (Tag3 ((("kind", 633)), 0, (0)), 100000000, 0, -59), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -58), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -57), 0), 100000000, 0, -56), 0), 100000000, 0, -55), 0, (("plugins/extraction/common.mli", 58, 2128, 2128), ("plugins/extraction/common.mli", 58, 2128, 2171), 0), 0, Tag1 ("Extraction_plugin__Common", 31)), 0); (("pp_global_name", 636), ((Tag1 (0, (Tag3 ((("kind", 633)), 0, (0)), 100000000, 0, -54), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -53), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -52), 0), 100000000, 0, -51), 0), 100000000, 0, -50), 0, (("plugins/extraction/common.mli", 59, 2172, 2172), ("plugins/extraction/common.mli", 59, 2172, 2220), 0), 0, Tag1 ("Extraction_plugin__Common", 32)), 0); (("pp_module", 637), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -49), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -48), 0), 100000000, 0, -47), 0, (("plugins/extraction/common.mli", 60, 2221, 2221), ("plugins/extraction/common.mli", 60, 2221, 2256), 0), 0, Tag1 ("Extraction_plugin__Common", 33)), 0); (("top_visible_mp", 638), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -46), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -45), 0), 100000000, 0, -44), 0, (("plugins/extraction/common.mli", 62, 2258, 2258), ("plugins/extraction/common.mli", 62, 2258, 2296), 0), 0, Tag1 ("Extraction_plugin__Common", 34)), 0); (("push_visible", 639), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -43), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -42)], (0)), 100000000, 0, -41), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -40), 0), 100000000, 0, -39), 0), 100000000, 0, -38), 0, (("plugins/extraction/common.mli", 65, 2425, 2425), ("plugins/extraction/common.mli", 65, 2425, 2479), 0), 0, Tag1 ("Extraction_plugin__Common", 35)), 0); (("pop_visible", 640), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -37), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -36), 0), 100000000, 0, -35), 0, (("plugins/extraction/common.mli", 66, 2480, 2480), ("plugins/extraction/common.mli", 66, 2480, 2510), 0), 0, Tag1 ("Extraction_plugin__Common", 36)), 0); (("get_duplicate", 641), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -34), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Label"), "t"), 0, (0)), 100000000, 0, -33), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -32)], (0)), 100000000, 0, -31), 0), 100000000, 0, -30), 0), 100000000, 0, -29), 0, (("plugins/extraction/common.mli", 68, 2512, 2512), ("plugins/extraction/common.mli", 68, 2512, 2569), 0), 0, Tag1 ("Extraction_plugin__Common", 37)), 0); Tag1 (("reset_kind", 642), (0, 0, Tag1 ([(("AllButExternal", 600), (0), 0, (("plugins/extraction/common.mli", 70, 2571, 2589), ("plugins/extraction/common.mli", 70, 2571, 2603), 0), 0, Tag1 ("Extraction_plugin__Common", 39)); (("Everything", 601), (0), 0, (("plugins/extraction/common.mli", 70, 2571, 2604), ("plugins/extraction/common.mli", 70, 2571, 2616), 0), 0, Tag1 ("Extraction_plugin__Common", 40))], 0), 1, 0, 0, 0, 0, 0, (("plugins/extraction/common.mli", 70, 2571, 2571), ("plugins/extraction/common.mli", 70, 2571, 2616), 0), 0, 1, 0, Tag1 ("Extraction_plugin__Common", 38)), 1, 0); (("reset_renaming_tables", 643), ((Tag1 (0, (Tag3 ((("reset_kind", 642)), 0, (0)), 100000000, 0, -28), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -27), 0), 100000000, 0, -26), 0, (("plugins/extraction/common.mli", 72, 2618, 2618), ("plugins/extraction/common.mli", 72, 2618, 2664), 0), 0, Tag1 ("Extraction_plugin__Common", 41)), 0); (("set_keywords", 644), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "Set"), "t"), 0, (0)), 100000000, 0, -25), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -24), 0), 100000000, 0, -23), 0, (("plugins/extraction/common.mli", 74, 2666, 2666), ("plugins/extraction/common.mli", 74, 2666, 2701), 0), 0, Tag1 ("Extraction_plugin__Common", 42)), 0); (("is_native_char", 645), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -22), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -21), 0), 100000000, 0, -20), 0, (("plugins/extraction/common.mli", 80, 2877, 2877), ("plugins/extraction/common.mli", 80, 2877, 2912), 0), 0, Tag1 ("Extraction_plugin__Common", 43)), 0); (("get_native_char", 646), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -19), (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("plugins/extraction/common.mli", 81, 2913, 2913), ("plugins/extraction/common.mli", 81, 2913, 2949), 0), 0, Tag1 ("Extraction_plugin__Common", 44)), 0); (("pp_native_char", 647), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -16), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -15), 0), 100000000, 0, -14), 0, (("plugins/extraction/common.mli", 82, 2950, 2950), ("plugins/extraction/common.mli", 82, 2950, 2985), 0), 0, Tag1 ("Extraction_plugin__Common", 45)), 0); (("is_native_string", 648), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -13), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("plugins/extraction/common.mli", 88, 3176, 3176), ("plugins/extraction/common.mli", 88, 3176, 3213), 0), 0, Tag1 ("Extraction_plugin__Common", 46)), 0); (("get_native_string", 649), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -10), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("plugins/extraction/common.mli", 89, 3214, 3214), ("plugins/extraction/common.mli", 89, 3214, 3254), 0), 0, Tag1 ("Extraction_plugin__Common", 47)), 0); (("pp_native_string", 650), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -7), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("plugins/extraction/common.mli", 90, 3255, 3255), ("plugins/extraction/common.mli", 90, 3255, 3292), 0), 0, Tag1 ("Extraction_plugin__Common", 48)), 0); (("sig_type_ref", 651), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("plugins/extraction/common.mli", 93, 3320, 3320), ("plugins/extraction/common.mli", 93, 3320, 3356), 0), 0, Tag1 ("Extraction_plugin__Common", 49)), 0)], "Extraction_plugin__Common", [("Extraction_plugin__Common", ("\213e\162\023\167t\248\145\rRw\2438\240Hf")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Extraction_plugin__Miniml", ("\130\229}\135\140\233\017o.s\132\238\240\155\168f")); ("Extraction_plugin", ("o,\156$\195_6\238J\232\255\189\197B\169\n")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150"))], [(0)])
val sig_type_ref : unit -> Names.GlobRef.t

type error = CannotRun of string | WrongMagic of string
exception Error of error
val preprocess : string -> string
val remove_preprocessed : string -> unit
type 'a ast_kind =
    Structure : Parsetree.structure ast_kind
  | Signature : Parsetree.signature ast_kind
val read_ast : 'a ast_kind -> string -> 'a
val write_ast : 'a ast_kind -> string -> 'a -> unit
val file :
  tool_name:string -> string -> (Lexing.lexbuf -> 'a) -> 'a ast_kind -> 'a
val apply_rewriters :
  ?restore:bool -> tool_name:string -> 'a ast_kind -> 'a -> 'a
val apply_rewriters_str :
  ?restore:bool ->
  tool_name:string -> Parsetree.structure -> Parsetree.structure
val apply_rewriters_sig :
  ?restore:bool ->
  tool_name:string -> Parsetree.signature -> Parsetree.signature
val report_error : Format.formatter -> error -> unit
val parse_implementation : tool_name:string -> string -> Parsetree.structure
val parse_interface : tool_name:string -> string -> Parsetree.signature
val call_external_preprocessor : string -> string -> string
("DEBUG:rule", [Tag1 (("error", 542), (0, 0, Tag1 ([(("CannotRun", 426), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -88)]), 0, (("driver/pparse.mli", 26, 1251, 1253), ("driver/pparse.mli", 26, 1251, 1274), 0), 0, Tag1 ("Pparse", 1)); (("WrongMagic", 427), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -89)]), 0, (("driver/pparse.mli", 27, 1275, 1277), ("driver/pparse.mli", 27, 1275, 1299), 0), 0, Tag1 ("Pparse", 2))], 0), 1, 0, 0, 0, 0, 0, (("driver/pparse.mli", 25, 1238, 1238), ("driver/pparse.mli", 27, 1275, 1299), 0), 0, 0, 0, Tag1 ("Pparse", 0)), 1, 0); Tag2 (("Error", 543), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((("error", 542)), 0, (0)), 100000000, 0, -87)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Pparse", 3)), 2, 0); (("preprocess", 544), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -86), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -85), 0), 100000000, 0, -84), 0, (("driver/pparse.mli", 31, 1327, 1327), ("driver/pparse.mli", 31, 1327, 1360), 0), 0, Tag1 ("Pparse", 4)), 0); (("remove_preprocessed", 545), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -83), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -82), 0), 100000000, 0, -81), 0, (("driver/pparse.mli", 32, 1361, 1361), ("driver/pparse.mli", 32, 1361, 1401), 0), 0, Tag1 ("Pparse", 5)), 0); Tag1 (("ast_kind", 546), ([((("a")), 100000000, 0, -80)], 1, Tag1 ([(("Structure", 432), (0), ((Tag3 ((("ast_kind", 546)), [(Tag3 (Tag1 ((Tag2 ("Parsetree")), "structure"), 0, (0)), 100000000, 0, -77)], (0)), 100000000, 0, -76)), (("driver/pparse.mli", 35, 1422, 1422), ("driver/pparse.mli", 35, 1422, 1464), 0), 0, Tag1 ("Pparse", 9)); (("Signature", 506), (0), ((Tag3 ((("ast_kind", 546)), [(Tag3 (Tag1 ((Tag2 ("Parsetree")), "signature"), 0, (0)), 100000000, 0, -79)], (0)), 100000000, 0, -78)), (("driver/pparse.mli", 36, 1465, 1465), ("driver/pparse.mli", 36, 1465, 1507), 0), 0, Tag1 ("Pparse", 10))], 0), 1, 0, [63], [0], 0, 0, (("driver/pparse.mli", 34, 1403, 1403), ("driver/pparse.mli", 36, 1465, 1507), 0), 0, 1, 0, Tag1 ("Pparse", 6)), 1, 0); (("read_ast", 547), ((Tag1 (0, (Tag3 ((("ast_kind", 546)), [((("a")), 100000000, 0, -73)], (0)), 100000000, 0, -75), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -74), ((("a")), 100000000, 0, -73), 0), 100000000, 0, -72), 0), 100000000, 0, -71), 0, (("driver/pparse.mli", 38, 1509, 1509), ("driver/pparse.mli", 38, 1509, 1551), 0), 0, Tag1 ("Pparse", 11)), 0); (("write_ast", 548), ((Tag1 (0, (Tag3 ((("ast_kind", 546)), [((("a")), 100000000, 0, -68)], (0)), 100000000, 0, -70), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -69), (Tag1 (0, ((("a")), 100000000, 0, -68), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -67), 0), 100000000, 0, -66), 0), 100000000, 0, -65), 0), 100000000, 0, -64), 0, (("driver/pparse.mli", 39, 1552, 1552), ("driver/pparse.mli", 39, 1552, 1603), 0), 0, Tag1 ("Pparse", 12)), 0); (("file", 549), ((Tag1 (("tool_name"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -63), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -62), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -61), ((("a")), 100000000, 0, -58), 0), 100000000, 0, -60), (Tag1 (0, (Tag3 ((("ast_kind", 546)), [((("a")), 100000000, 0, -58)], (0)), 100000000, 0, -59), ((("a")), 100000000, 0, -58), 0), 100000000, 0, -57), 0), 100000000, 0, -56), 0), 100000000, 0, -55), 0), 100000000, 0, -54), 0, (("driver/pparse.mli", 41, 1605, 1605), ("driver/pparse.mli", 42, 1646, 1690), 0), 0, Tag1 ("Pparse", 13)), 0); (("apply_rewriters", 550), ((Tag1 (Tag1 ("restore"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -53)], (0)), 100000000, 0, -52), (Tag1 (("tool_name"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -51), (Tag1 (0, (Tag3 ((("ast_kind", 546)), [((("a")), 100000000, 0, -49)], (0)), 100000000, 0, -50), (Tag1 (0, ((("a")), 100000000, 0, -49), ((("a")), 100000000, 0, -49), 0), 100000000, 0, -48), 0), 100000000, 0, -47), 0), 100000000, 0, -46), 0), 100000000, 0, -45), 0, (("driver/pparse.mli", 44, 1692, 1692), ("driver/pparse.mli", 45, 1750, 1775), 0), 0, Tag1 ("Pparse", 14)), 0); (("apply_rewriters_str", 551), ((Tag1 (Tag1 ("restore"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -44)], (0)), 100000000, 0, -43), (Tag1 (("tool_name"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -42), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "structure"), 0, (0)), 100000000, 0, -41), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "structure"), 0, (0)), 100000000, 0, -40), 0), 100000000, 0, -39), 0), 100000000, 0, -38), 0), 100000000, 0, -37), 0, (("driver/pparse.mli", 49, 1891, 1891), ("driver/pparse.mli", 51, 1978, 1999), 0), 0, Tag1 ("Pparse", 15)), 0); (("apply_rewriters_sig", 552), ((Tag1 (Tag1 ("restore"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -36)], (0)), 100000000, 0, -35), (Tag1 (("tool_name"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -34), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "signature"), 0, (0)), 100000000, 0, -33), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "signature"), 0, (0)), 100000000, 0, -32), 0), 100000000, 0, -31), 0), 100000000, 0, -30), 0), 100000000, 0, -29), 0, (("driver/pparse.mli", 52, 2000, 2000), ("driver/pparse.mli", 54, 2087, 2108), 0), 0, Tag1 ("Pparse", 16)), 0); (("report_error", 553), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -28), (Tag1 (0, (Tag3 ((("error", 542)), 0, (0)), 100000000, 0, -27), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -26), 0), 100000000, 0, -25), 0), 100000000, 0, -24), 0, (("driver/pparse.mli", 56, 2110, 2110), ("driver/pparse.mli", 56, 2110, 2155), 0), 0, Tag1 ("Pparse", 17)), 0); (("parse_implementation", 554), ((Tag1 (("tool_name"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -23), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -22), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "structure"), 0, (0)), 100000000, 0, -21), 0), 100000000, 0, -20), 0), 100000000, 0, -19), 0, (("driver/pparse.mli", 59, 2158, 2158), ("driver/pparse.mli", 60, 2184, 2235), 0), 0, Tag1 ("Pparse", 18)), 0); (("parse_interface", 555), ((Tag1 (("tool_name"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -18), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -17), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "signature"), 0, (0)), 100000000, 0, -16), 0), 100000000, 0, -15), 0), 100000000, 0, -14), 0, (("driver/pparse.mli", 61, 2236, 2236), ("driver/pparse.mli", 62, 2257, 2308), 0), 0, Tag1 ("Pparse", 19)), 0); (("call_external_preprocessor", 556), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -13), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -11), 0), 100000000, 0, -10), 0), 100000000, 0, -9), 0, (("driver/pparse.mli", 65, 2359, 2359), ("driver/pparse.mli", 65, 2359, 2418), 0), 0, Tag1 ("Pparse", 20)), 0); (("open_and_check_magic", 557), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -8), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -7), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Stdlib")), "in_channel"), 0, (0)), 100000000, 0, -5); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -6)]), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("driver/pparse.mli", 66, 2419, 2419), ("driver/pparse.mli", 66, 2419, 2483), 0), 0, Tag1 ("Pparse", 21)), 0)], "Pparse", [("Pparse", ("<\255\245y\139\248\182j\r\252\004;\002\133\025y")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216"))], [(0)])
val open_and_check_magic : string -> string -> in_channel * bool

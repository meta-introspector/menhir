type var = int
type t
type vector = t
val hash : t -> int
val equal : t -> t -> bool
val compare : t -> t -> int
val pp_gen : (out_channel -> var -> unit) -> out_channel -> t -> unit
val pp : out_channel -> t -> unit
val pp_smt : out_channel -> t -> unit
val variables : t -> Micromega_plugin.Mutils.ISet.t
val get_cst : t -> Micromega_plugin.NumCompat.Q.t
val decomp_cst : t -> Micromega_plugin.NumCompat.Q.t * t
val decomp_at : var -> t -> Micromega_plugin.NumCompat.Q.t * t
val decomp_fst : t -> (var * Micromega_plugin.NumCompat.Q.t) * t
val cst : Micromega_plugin.NumCompat.Q.t -> t
val is_constant : t -> bool
val null : t
val is_null : t -> bool
val get : var -> t -> Micromega_plugin.NumCompat.Q.t
val set : var -> Micromega_plugin.NumCompat.Q.t -> t -> t
val mkvar : var -> t
val update :
  var ->
  (Micromega_plugin.NumCompat.Q.t -> Micromega_plugin.NumCompat.Q.t) ->
  t -> t
val fresh : t -> int
val choose : t -> (var * Micromega_plugin.NumCompat.Q.t * t) option
val from_list : Micromega_plugin.NumCompat.Q.t list -> t
val to_list : t -> Micromega_plugin.NumCompat.Q.t list
val decr_var : int -> t -> t
val incr_var : int -> t -> t
val gcd : t -> Micromega_plugin.NumCompat.Z.t
val normalise : t -> t
val add : t -> t -> t
val mul : Micromega_plugin.NumCompat.Q.t -> t -> t
val mul_add :
  Micromega_plugin.NumCompat.Q.t ->
  t -> Micromega_plugin.NumCompat.Q.t -> t -> t
val subst : int -> t -> t -> t
val div : Micromega_plugin.NumCompat.Q.t -> t -> t
val uminus : t -> t
val fold :
  ('acc -> var -> Micromega_plugin.NumCompat.Q.t -> 'acc) ->
  'acc -> t -> 'acc
val fold_error :
  ('acc -> var -> Micromega_plugin.NumCompat.Q.t -> 'acc option) ->
  'acc -> t -> 'acc option
val find :
  (var -> Micromega_plugin.NumCompat.Q.t -> 'c option) -> t -> 'c option
val for_all : (var -> Micromega_plugin.NumCompat.Q.t -> bool) -> t -> bool
val exists2 :
  (Micromega_plugin.NumCompat.Q.t -> Micromega_plugin.NumCompat.Q.t -> bool) ->
  t ->
  t ->
  (var * Micromega_plugin.NumCompat.Q.t * Micromega_plugin.NumCompat.Q.t)
  option
val dotproduct : t -> t -> Micromega_plugin.NumCompat.Q.t
val map : (var -> Micromega_plugin.NumCompat.Q.t -> 'a) -> t -> 'a list
val abs_min_elt : t -> (var * Micromega_plugin.NumCompat.Q.t) option
val partition : (var -> Micromega_plugin.NumCompat.Q.t -> bool) -> t -> t * t
module Bound :
  sig
    type t = {
      cst : Micromega_plugin.NumCompat.Q.t;
      var : var;
      coeff : Micromega_plugin.NumCompat.Q.t;
    }
    val of_vect : vector -> t option
    val to_vect : t -> vector("DEBUG:rule", [Tag1 (("var", 518), (0, 0, 0, 1, ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -251)), 0, 0, 0, 0, (("plugins/micromega/vect.mli", 15, 753, 753), ("plugins/micromega/vect.mli", 15, 753, 767), 0), 0, 1, 0, Tag1 ("Micromega_plugin__Vect", 0)), 1, 0); Tag1 (("t", 519), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("plugins/micromega/vect.mli", 26, 1276, 1276), ("plugins/micromega/vect.mli", 26, 1276, 1282), 0), 0, 0, 0, Tag1 ("Micromega_plugin__Vect", 1)), 1, 0); Tag1 (("vector", 520), (0, 0, 0, 1, ((Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -250)), 0, 0, 0, 0, (("plugins/micromega/vect.mli", 28, 1284, 1284), ("plugins/micromega/vect.mli", 28, 1284, 1299), 0), 0, 0, 0, Tag1 ("Micromega_plugin__Vect", 2)), 1, 0); (("hash", 521), ((Tag1 (0, (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -249), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -248), 0), 100000000, 0, -247), 0, (("plugins/micromega/vect.mli", 35, 1432, 1432), ("plugins/micromega/vect.mli", 35, 1432, 1451), 0), 0, Tag1 ("Micromega_plugin__Vect", 3)), 0); (("equal", 522), ((Tag1 (0, (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -246), (Tag1 (0, (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -245), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -244), 0), 100000000, 0, -243), 0), 100000000, 0, -242), 0, (("plugins/micromega/vect.mli", 36, 1452, 1452), ("plugins/micromega/vect.mli", 36, 1452, 1478), 0), 0, Tag1 ("Micromega_plugin__Vect", 4)), 0); (("compare", 523), ((Tag1 (0, (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -241), (Tag1 (0, (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -240), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -239), 0), 100000000, 0, -238), 0), 100000000, 0, -237), 0, (("plugins/micromega/vect.mli", 37, 1479, 1479), ("plugins/micromega/vect.mli", 37, 1479, 1506), 0), 0, Tag1 ("Micromega_plugin__Vect", 5)), 0); (("pp_gen", 524), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -236), (Tag1 (0, (Tag3 ((("var", 518)), 0, (0)), 100000000, 0, -235), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -234), 0), 100000000, 0, -233), 0), 100000000, 0, -232), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -231), (Tag1 (0, (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -230), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -229), 0), 100000000, 0, -228), 0), 100000000, 0, -227), 0), 100000000, 0, -226), 0, (("plugins/micromega/vect.mli", 42, 1650, 1650), ("plugins/micromega/vect.mli", 42, 1650, 1719), 0), 0, Tag1 ("Micromega_plugin__Vect", 6)), 0); (("pp", 525), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -225), (Tag1 (0, (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -224), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -223), 0), 100000000, 0, -222), 0), 100000000, 0, -221), 0, (("plugins/micromega/vect.mli", 45, 1802, 1802), ("plugins/micromega/vect.mli", 45, 1802, 1835), 0), 0, Tag1 ("Micromega_plugin__Vect", 7)), 0); (("pp_smt", 526), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -220), (Tag1 (0, (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -219), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -218), 0), 100000000, 0, -217), 0), 100000000, 0, -216), 0, (("plugins/micromega/vect.mli", 48, 1947, 1947), ("plugins/micromega/vect.mli", 48, 1947, 1984), 0), 0, Tag1 ("Micromega_plugin__Vect", 8)), 0); (("variables", 527), ((Tag1 (0, (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -215), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "Mutils"), "ISet"), "t"), 0, (0)), 100000000, 0, -214), 0), 100000000, 0, -213), 0, (("plugins/micromega/vect.mli", 51, 2063, 2063), ("plugins/micromega/vect.mli", 51, 2063, 2090), 0), 0, Tag1 ("Micromega_plugin__Vect", 9)), 0); (("get_cst", 528), ((Tag1 (0, (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -212), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -211), 0), 100000000, 0, -210), 0, (("plugins/micromega/vect.mli", 54, 2163, 2163), ("plugins/micromega/vect.mli", 54, 2163, 2185), 0), 0, Tag1 ("Micromega_plugin__Vect", 10)), 0); (("decomp_cst", 529), ((Tag1 (0, (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -209), (Tag2 ([(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -207); (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -208)]), 100000000, 0, -206), 0), 100000000, 0, -205), 0, (("plugins/micromega/vect.mli", 57, 2246, 2246), ("plugins/micromega/vect.mli", 57, 2246, 2275), 0), 0, Tag1 ("Micromega_plugin__Vect", 11)), 0); (("decomp_at", 530), ((Tag1 (0, (Tag3 ((("var", 518)), 0, (0)), 100000000, 0, -204), (Tag1 (0, (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -203), (Tag2 ([(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -201); (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -202)]), 100000000, 0, -200), 0), 100000000, 0, -199), 0), 100000000, 0, -198), 0, (("plugins/micromega/vect.mli", 60, 2342, 2342), ("plugins/micromega/vect.mli", 60, 2342, 2377), 0), 0, Tag1 ("Micromega_plugin__Vect", 12)), 0); (("decomp_fst", 531), ((Tag1 (0, (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -197), (Tag2 ([(Tag2 ([(Tag3 ((("var", 518)), 0, (0)), 100000000, 0, -194); (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -195)]), 100000000, 0, -193); (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -196)]), 100000000, 0, -192), 0), 100000000, 0, -191), 0, (("plugins/micromega/vect.mli", 62, 2379, 2379), ("plugins/micromega/vect.mli", 62, 2379, 2416), 0), 0, Tag1 ("Micromega_plugin__Vect", 13)), 0); (("cst", 532), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -190), (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -189), 0), 100000000, 0, -188), 0, (("plugins/micromega/vect.mli", 65, 2470, 2470), ("plugins/micromega/vect.mli", 65, 2470, 2488), 0), 0, Tag1 ("Micromega_plugin__Vect", 14)), 0); (("is_constant", 533), ((Tag1 (0, (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -187), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -186), 0), 100000000, 0, -185), 0, (("plugins/micromega/vect.mli", 69, 2571, 2571), ("plugins/micromega/vect.mli", 69, 2571, 2598), 0), 0, Tag1 ("Micromega_plugin__Vect", 15)), 0); (("null", 534), ((Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -184), 0, (("plugins/micromega/vect.mli", 72, 2655, 2655), ("plugins/micromega/vect.mli", 72, 2655, 2667), 0), 0, Tag1 ("Micromega_plugin__Vect", 16)), 0); (("is_null", 535), ((Tag1 (0, (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -183), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -182), 0), 100000000, 0, -181), 0, (("plugins/micromega/vect.mli", 75, 2749, 2749), ("plugins/micromega/vect.mli", 75, 2749, 2772), 0), 0, Tag1 ("Micromega_plugin__Vect", 17)), 0); (("get", 536), ((Tag1 (0, (Tag3 ((("var", 518)), 0, (0)), 100000000, 0, -180), (Tag1 (0, (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -179), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -178), 0), 100000000, 0, -177), 0), 100000000, 0, -176), 0, (("plugins/micromega/vect.mli", 79, 2886, 2886), ("plugins/micromega/vect.mli", 79, 2886, 2911), 0), 0, Tag1 ("Micromega_plugin__Vect", 18)), 0); (("set", 537), ((Tag1 (0, (Tag3 ((("var", 518)), 0, (0)), 100000000, 0, -175), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -174), (Tag1 (0, (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -173), (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -172), 0), 100000000, 0, -171), 0), 100000000, 0, -170), 0), 100000000, 0, -169), 0, (("plugins/micromega/vect.mli", 83, 3040, 3040), ("plugins/micromega/vect.mli", 83, 3040, 3070), 0), 0, Tag1 ("Micromega_plugin__Vect", 19)), 0); (("mkvar", 538), ((Tag1 (0, (Tag3 ((("var", 518)), 0, (0)), 100000000, 0, -168), (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -167), 0), 100000000, 0, -166), 0, (("plugins/micromega/vect.mli", 86, 3103, 3103), ("plugins/micromega/vect.mli", 86, 3103, 3123), 0), 0, Tag1 ("Micromega_plugin__Vect", 20)), 0); (("update", 539), ((Tag1 (0, (Tag3 ((("var", 518)), 0, (0)), 100000000, 0, -165), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -164), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -163), 0), 100000000, 0, -162), (Tag1 (0, (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -161), (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -160), 0), 100000000, 0, -159), 0), 100000000, 0, -158), 0), 100000000, 0, -157), 0, (("plugins/micromega/vect.mli", 89, 3187, 3187), ("plugins/micromega/vect.mli", 89, 3187, 3229), 0), 0, Tag1 ("Micromega_plugin__Vect", 21)), 0); (("fresh", 540), ((Tag1 (0, (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -156), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -155), 0), 100000000, 0, -154), 0, (("plugins/micromega/vect.mli", 92, 3306, 3306), ("plugins/micromega/vect.mli", 92, 3306, 3326), 0), 0, Tag1 ("Micromega_plugin__Vect", 22)), 0); (("choose", 541), ((Tag1 (0, (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -153), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("var", 518)), 0, (0)), 100000000, 0, -150); (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -151); (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -152)]), 100000000, 0, -149)], (0)), 100000000, 0, -148), 0), 100000000, 0, -147), 0, (("plugins/micromega/vect.mli", 98, 3549, 3549), ("plugins/micromega/vect.mli", 98, 3549, 3589), 0), 0, Tag1 ("Micromega_plugin__Vect", 23)), 0); (("from_list", 542), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -146)], (0)), 100000000, 0, -145), (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -144), 0), 100000000, 0, -143), 0, (("plugins/micromega/vect.mli", 101, 3692, 3692), ("plugins/micromega/vect.mli", 101, 3692, 3721), 0), 0, Tag1 ("Micromega_plugin__Vect", 24)), 0); (("to_list", 543), ((Tag1 (0, (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -142), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -141)], (0)), 100000000, 0, -140), 0), 100000000, 0, -139), 0, (("plugins/micromega/vect.mli", 106, 3906, 3906), ("plugins/micromega/vect.mli", 106, 3906, 3933), 0), 0, Tag1 ("Micromega_plugin__Vect", 25)), 0); (("decr_var", 544), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -138), (Tag1 (0, (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -137), (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -136), 0), 100000000, 0, -135), 0), 100000000, 0, -134), 0, (("plugins/micromega/vect.mli", 111, 4096, 4096), ("plugins/micromega/vect.mli", 111, 4096, 4124), 0), 0, Tag1 ("Micromega_plugin__Vect", 26)), 0); (("incr_var", 545), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -133), (Tag1 (0, (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -132), (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -131), 0), 100000000, 0, -130), 0), 100000000, 0, -129), 0, (("plugins/micromega/vect.mli", 115, 4211, 4211), ("plugins/micromega/vect.mli", 115, 4211, 4239), 0), 0, Tag1 ("Micromega_plugin__Vect", 27)), 0); (("gcd", 546), ((Tag1 (0, (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -128), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Z"), "t"), 0, (0)), 100000000, 0, -127), 0), 100000000, 0, -126), 0, (("plugins/micromega/vect.mli", 119, 4353, 4353), ("plugins/micromega/vect.mli", 119, 4353, 4371), 0), 0, Tag1 ("Micromega_plugin__Vect", 28)), 0); (("normalise", 547), ((Tag1 (0, (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -125), (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -124), 0), 100000000, 0, -123), 0, (("plugins/micromega/vect.mli", 122, 4442, 4442), ("plugins/micromega/vect.mli", 122, 4442, 4464), 0), 0, Tag1 ("Micromega_plugin__Vect", 29)), 0); (("add", 548), ((Tag1 (0, (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -122), (Tag1 (0, (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -121), (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -120), 0), 100000000, 0, -119), 0), 100000000, 0, -118), 0, (("plugins/micromega/vect.mli", 131, 4690, 4690), ("plugins/micromega/vect.mli", 131, 4690, 4711), 0), 0, Tag1 ("Micromega_plugin__Vect", 30)), 0); (("mul", 549), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -117), (Tag1 (0, (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -116), (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -115), 0), 100000000, 0, -114), 0), 100000000, 0, -113), 0, (("plugins/micromega/vect.mli", 135, 4828, 4828), ("plugins/micromega/vect.mli", 135, 4828, 4851), 0), 0, Tag1 ("Micromega_plugin__Vect", 31)), 0); (("mul_add", 550), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -112), (Tag1 (0, (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -111), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -110), (Tag1 (0, (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -109), (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -108), 0), 100000000, 0, -107), 0), 100000000, 0, -106), 0), 100000000, 0, -105), 0), 100000000, 0, -104), 0, (("plugins/micromega/vect.mli", 138, 4925, 4925), ("plugins/micromega/vect.mli", 138, 4925, 4964), 0), 0, Tag1 ("Micromega_plugin__Vect", 32)), 0); (("subst", 551), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -103), (Tag1 (0, (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -102), (Tag1 (0, (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -101), (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -100), 0), 100000000, 0, -99), 0), 100000000, 0, -98), 0), 100000000, 0, -97), 0, (("plugins/micromega/vect.mli", 141, 5017, 5017), ("plugins/micromega/vect.mli", 141, 5017, 5047), 0), 0, Tag1 ("Micromega_plugin__Vect", 33)), 0); (("div", 552), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -96), (Tag1 (0, (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -95), (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -94), 0), 100000000, 0, -93), 0), 100000000, 0, -92), 0, (("plugins/micromega/vect.mli", 144, 5129, 5129), ("plugins/micromega/vect.mli", 144, 5129, 5152), 0), 0, Tag1 ("Micromega_plugin__Vect", 34)), 0); (("uminus", 553), ((Tag1 (0, (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -91), (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -90), 0), 100000000, 0, -89), 0, (("plugins/micromega/vect.mli", 148, 5225, 5225), ("plugins/micromega/vect.mli", 148, 5225, 5244), 0), 0, Tag1 ("Micromega_plugin__Vect", 35)), 0); (("fold", 554), ((Tag1 (0, (Tag1 (0, ((("acc")), 100000000, 0, -82), (Tag1 (0, (Tag3 ((("var", 518)), 0, (0)), 100000000, 0, -88), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -87), ((("acc")), 100000000, 0, -82), 0), 100000000, 0, -86), 0), 100000000, 0, -85), 0), 100000000, 0, -84), (Tag1 (0, ((("acc")), 100000000, 0, -82), (Tag1 (0, (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -83), ((("acc")), 100000000, 0, -82), 0), 100000000, 0, -81), 0), 100000000, 0, -80), 0), 100000000, 0, -79), 0, (("plugins/micromega/vect.mli", 153, 5334, 5334), ("plugins/micromega/vect.mli", 153, 5334, 5394), 0), 0, Tag1 ("Micromega_plugin__Vect", 36)), 0); (("fold_error", 555), ((Tag1 (0, (Tag1 (0, ((("acc")), 100000000, 0, -71), (Tag1 (0, (Tag3 ((("var", 518)), 0, (0)), 100000000, 0, -78), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -77), (Tag3 ((Tag3 ("option", 10)), [((("acc")), 100000000, 0, -71)], (0)), 100000000, 0, -76), 0), 100000000, 0, -75), 0), 100000000, 0, -74), 0), 100000000, 0, -73), (Tag1 (0, ((("acc")), 100000000, 0, -71), (Tag1 (0, (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -72), (Tag3 ((Tag3 ("option", 10)), [((("acc")), 100000000, 0, -71)], (0)), 100000000, 0, -70), 0), 100000000, 0, -69), 0), 100000000, 0, -68), 0), 100000000, 0, -67), 0, (("plugins/micromega/vect.mli", 159, 5562, 5562), ("plugins/micromega/vect.mli", 159, 5562, 5642), 0), 0, Tag1 ("Micromega_plugin__Vect", 37)), 0); (("find", 556), ((Tag1 (0, (Tag1 (0, (Tag3 ((("var", 518)), 0, (0)), 100000000, 0, -66), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -65), (Tag3 ((Tag3 ("option", 10)), [((("c")), 100000000, 0, -60)], (0)), 100000000, 0, -64), 0), 100000000, 0, -63), 0), 100000000, 0, -62), (Tag1 (0, (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -61), (Tag3 ((Tag3 ("option", 10)), [((("c")), 100000000, 0, -60)], (0)), 100000000, 0, -59), 0), 100000000, 0, -58), 0), 100000000, 0, -57), 0, (("plugins/micromega/vect.mli", 163, 5764, 5764), ("plugins/micromega/vect.mli", 163, 5764, 5818), 0), 0, Tag1 ("Micromega_plugin__Vect", 38)), 0); (("for_all", 557), ((Tag1 (0, (Tag1 (0, (Tag3 ((("var", 518)), 0, (0)), 100000000, 0, -56), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -55), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -54), 0), 100000000, 0, -53), 0), 100000000, 0, -52), (Tag1 (0, (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -51), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -50), 0), 100000000, 0, -49), 0), 100000000, 0, -48), 0, (("plugins/micromega/vect.mli", 166, 5869, 5869), ("plugins/micromega/vect.mli", 166, 5869, 5916), 0), 0, Tag1 ("Micromega_plugin__Vect", 39)), 0); (("exists2", 558), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -47), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -46), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -45), 0), 100000000, 0, -44), 0), 100000000, 0, -43), (Tag1 (0, (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -42), (Tag1 (0, (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -41), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("var", 518)), 0, (0)), 100000000, 0, -38); (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -39); (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -40)]), 100000000, 0, -37)], (0)), 100000000, 0, -36), 0), 100000000, 0, -35), 0), 100000000, 0, -34), 0), 100000000, 0, -33), 0, (("plugins/micromega/vect.mli", 171, 6068, 6068), ("plugins/micromega/vect.mli", 171, 6068, 6140), 0), 0, Tag1 ("Micromega_plugin__Vect", 40)), 0); (("dotproduct", 559), ((Tag1 (0, (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -32), (Tag1 (0, (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -31), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -30), 0), 100000000, 0, -29), 0), 100000000, 0, -28), 0, (("plugins/micromega/vect.mli", 174, 6201, 6201), ("plugins/micromega/vect.mli", 174, 6201, 6231), 0), 0, Tag1 ("Micromega_plugin__Vect", 41)), 0); (("map", 560), ((Tag1 (0, (Tag1 (0, (Tag3 ((("var", 518)), 0, (0)), 100000000, 0, -27), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -26), ((("a")), 100000000, 0, -22), 0), 100000000, 0, -25), 0), 100000000, 0, -24), (Tag1 (0, (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -23), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -22)], (0)), 100000000, 0, -21), 0), 100000000, 0, -20), 0), 100000000, 0, -19), 0, (("plugins/micromega/vect.mli", 176, 6233, 6233), ("plugins/micromega/vect.mli", 176, 6233, 6277), 0), 0, Tag1 ("Micromega_plugin__Vect", 42)), 0); (("abs_min_elt", 561), ((Tag1 (0, (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -18), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("var", 518)), 0, (0)), 100000000, 0, -16); (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -17)]), 100000000, 0, -15)], (0)), 100000000, 0, -14), 0), 100000000, 0, -13), 0, (("plugins/micromega/vect.mli", 177, 6278, 6278), ("plugins/micromega/vect.mli", 177, 6278, 6319), 0), 0, Tag1 ("Micromega_plugin__Vect", 43)), 0); (("partition", 562), ((Tag1 (0, (Tag1 (0, (Tag3 ((("var", 518)), 0, (0)), 100000000, 0, -12), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -11), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -10), 0), 100000000, 0, -9), 0), 100000000, 0, -8), (Tag1 (0, (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -7), (Tag2 ([(Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -5); (Tag3 ((("t", 519)), 0, (0)), 100000000, 0, -6)]), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("plugins/micromega/vect.mli", 178, 6320, 6320), ("plugins/micromega/vect.mli", 178, 6320, 6370), 0), 0, Tag1 ("Micromega_plugin__Vect", 44)), 0); Tag3 (("Bound", 563), 0, (Tag1 ([Tag1 (("t", 564), (0, 0, [[(("cst", 482), 0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -259), (("plugins/micromega/vect.mli", 182, 6423, 6435), ("plugins/micromega/vect.mli", 182, 6423, 6445), 0), 0, Tag1 ("Micromega_plugin__Vect", 46)); (("var", 483), 0, (Tag3 ((("var", 518)), 0, (0)), 100000000, 0, -260), (("plugins/micromega/vect.mli", 182, 6423, 6446), ("plugins/micromega/vect.mli", 182, 6423, 6456), 0), 0, Tag1 ("Micromega_plugin__Vect", 47)); (("coeff", 484), 0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -261), (("plugins/micromega/vect.mli", 182, 6423, 6457), ("plugins/micromega/vect.mli", 182, 6423, 6468), 0), 0, Tag1 ("Micromega_plugin__Vect", 48))]], 1, 0, 0, 0, 0, 0, (("plugins/micromega/vect.mli", 182, 6423, 6425), ("plugins/micromega/vect.mli", 182, 6423, 6469), 0), 0, 0, 0, Tag1 ("Micromega_plugin__Vect", 45)), 1, 0); (("of_vect", 565), ((Tag1 (0, (Tag3 ((("vector", 520)), 0, (0)), 100000000, 0, -258), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 564)), 0, (0)), 100000000, 0, -257)], (0)), 100000000, 0, -256), 0), 100000000, 0, -255), 0, (("plugins/micromega/vect.mli", 184, 6471, 6473), ("plugins/micromega/vect.mli", 184, 6471, 6505), 0), 0, Tag1 ("Micromega_plugin__Vect", 49)), 0); (("to_vect", 566), ((Tag1 (0, (Tag3 ((("t", 564)), 0, (0)), 100000000, 0, -254), (Tag3 ((("vector", 520)), 0, (0)), 100000000, 0, -253), 0), 100000000, 0, -252), 0, (("plugins/micromega/vect.mli", 185, 6506, 6508), ("plugins/micromega/vect.mli", 185, 6506, 6533), 0), 0, Tag1 ("Micromega_plugin__Vect", 50)), 0)]), 0, (("plugins/micromega/vect.mli", 180, 6372, 6372), ("plugins/micromega/vect.mli", 186, 6534, 6537), 0), Tag1 ("Micromega_plugin__Vect", 51)), 0, 0)], "Micromega_plugin__Vect", [("Micromega_plugin__Vect", ("cim\150\030\144w\144\158\152|\201Px\127|")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Micromega_plugin__NumCompat", ("\167R)~D\225*6\249\146\173\\\233F6m")); ("Micromega_plugin__Mutils", ("\248\218\232\173\201#\005!\224\006\137\197\223\134\015\237")); ("Micromega_plugin__Micromega", ("\144\132\00120\253\252S\131\160\152\240\207\228\014\024")); ("Micromega_plugin", ("-|C6\194\020\193\204\234h\242\238\191\214'\193")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t"))], [(0)])

  end

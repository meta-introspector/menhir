type family = InSProp | InProp | InSet | InType | InQSort
val all_families : family list
module QVar :
  sig
    type t
    val make : string -> int -> t
    val repr : t -> string * int
    val equal : t -> t -> bool
    val compare : t -> t -> int
    val to_string : t -> string
    val pr : t -> Pp.t
  end
type t = private
    SProp
  | Prop
  | Set
  | Type of Univ.Universe.t
  | QSort of QVar.t * Univ.Universe.t
val sprop : t
val set : t
val prop : t
val type1 : t
val qsort : QVar.t -> Univ.Universe.t -> t
val equal : t -> t -> bool
val compare : t -> t -> int
val hash : t -> int
val is_sprop : t -> bool
val is_set : t -> bool
val is_prop : t -> bool
val is_small : t -> bool
val family : t -> family
val hcons : t -> t
val family_compare : family -> family -> int
val family_equal : family -> family -> bool
val family_leq : family -> family -> bool
val sort_of_univ : Univ.Universe.t -> t
val levels : t -> Univ.Level.Set.t
val super : t -> t
val subst_instance_sort : Univ.Instance.t -> t -> t
type relevance = Relevant | Irrelevant | RelevanceVar of QVar.t
val relevance_hash : relevance -> int
val relevance_equal : relevance -> relevance -> bool
val relevance_of_sort : t -> relevance
val relevance_of_sort_family : family -> relevance
val debug_print : t -> Pp.t("DEBUG:rule", [Tag1 (("family", 515), (0, 0, Tag1 ([(("InSProp", 270), (0), 0, (("kernel/sorts.mli", 13, 707, 721), ("kernel/sorts.mli", 13, 707, 728), 0), 0, Tag1 ("Sorts", 1)); (("InProp", 271), (0), 0, (("kernel/sorts.mli", 13, 707, 729), ("kernel/sorts.mli", 13, 707, 737), 0), 0, Tag1 ("Sorts", 2)); (("InSet", 272), (0), 0, (("kernel/sorts.mli", 13, 707, 738), ("kernel/sorts.mli", 13, 707, 745), 0), 0, Tag1 ("Sorts", 3)); (("InType", 273), (0), 0, (("kernel/sorts.mli", 13, 707, 746), ("kernel/sorts.mli", 13, 707, 754), 0), 0, Tag1 ("Sorts", 4)); (("InQSort", 274), (0), 0, (("kernel/sorts.mli", 13, 707, 755), ("kernel/sorts.mli", 13, 707, 764), 0), 0, Tag1 ("Sorts", 5))], 0), 1, 0, 0, 0, 0, 0, (("kernel/sorts.mli", 13, 707, 707), ("kernel/sorts.mli", 13, 707, 764), 0), 0, 1, 0, Tag1 ("Sorts", 0)), 1, 0); (("all_families", 516), ((Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("family", 515)), 0, (0)), 100000000, 0, -96)], (0)), 100000000, 0, -95), 0, (("kernel/sorts.mli", 15, 766, 766), ("kernel/sorts.mli", 15, 766, 796), 0), 0, Tag1 ("Sorts", 6)), 0); Tag3 (("QVar", 517), 0, (Tag1 ([Tag1 (("t", 547), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("kernel/sorts.mli", 19, 816, 818), ("kernel/sorts.mli", 19, 816, 824), 0), 0, 0, 0, Tag1 ("Sorts", 7)), 1, 0); (("make", 548), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -122), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -121), (Tag3 ((("t", 547)), 0, (0)), 100000000, 0, -120), 0), 100000000, 0, -119), 0), 100000000, 0, -118), 0, (("kernel/sorts.mli", 20, 825, 827), ("kernel/sorts.mli", 20, 825, 856), 0), 0, Tag1 ("Sorts", 8)), 0); (("repr", 549), ((Tag1 (0, (Tag3 ((("t", 547)), 0, (0)), 100000000, 0, -117), (Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -115); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -116)]), 100000000, 0, -114), 0), 100000000, 0, -113), 0, (("kernel/sorts.mli", 21, 857, 859), ("kernel/sorts.mli", 21, 857, 887), 0), 0, Tag1 ("Sorts", 9)), 0); (("equal", 550), ((Tag1 (0, (Tag3 ((("t", 547)), 0, (0)), 100000000, 0, -112), (Tag1 (0, (Tag3 ((("t", 547)), 0, (0)), 100000000, 0, -111), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -110), 0), 100000000, 0, -109), 0), 100000000, 0, -108), 0, (("kernel/sorts.mli", 22, 888, 890), ("kernel/sorts.mli", 22, 888, 916), 0), 0, Tag1 ("Sorts", 10)), 0); (("compare", 551), ((Tag1 (0, (Tag3 ((("t", 547)), 0, (0)), 100000000, 0, -107), (Tag1 (0, (Tag3 ((("t", 547)), 0, (0)), 100000000, 0, -106), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -105), 0), 100000000, 0, -104), 0), 100000000, 0, -103), 0, (("kernel/sorts.mli", 23, 917, 919), ("kernel/sorts.mli", 23, 917, 946), 0), 0, Tag1 ("Sorts", 11)), 0); (("to_string", 552), ((Tag1 (0, (Tag3 ((("t", 547)), 0, (0)), 100000000, 0, -102), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -101), 0), 100000000, 0, -100), 0, (("kernel/sorts.mli", 24, 947, 949), ("kernel/sorts.mli", 24, 947, 976), 0), 0, Tag1 ("Sorts", 12)), 0); (("pr", 553), ((Tag1 (0, (Tag3 ((("t", 547)), 0, (0)), 100000000, 0, -99), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -98), 0), 100000000, 0, -97), 0, (("kernel/sorts.mli", 25, 977, 979), ("kernel/sorts.mli", 25, 977, 997), 0), 0, Tag1 ("Sorts", 13)), 0)]), 0, (("kernel/sorts.mli", 17, 798, 798), ("kernel/sorts.mli", 26, 998, 1001), 0), Tag1 ("Sorts", 14)), 0, 0); Tag1 (("t", 518), (0, 0, Tag1 ([(("SProp", 347), (0), 0, (("kernel/sorts.mli", 29, 1020, 1022), ("kernel/sorts.mli", 29, 1020, 1029), 0), 0, Tag1 ("Sorts", 16)); (("Prop", 348), (0), 0, (("kernel/sorts.mli", 30, 1030, 1032), ("kernel/sorts.mli", 30, 1030, 1038), 0), 0, Tag1 ("Sorts", 17)); (("Set", 349), (0), 0, (("kernel/sorts.mli", 31, 1039, 1041), ("kernel/sorts.mli", 31, 1039, 1046), 0), 0, Tag1 ("Sorts", 18)); (("Type", 350), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Universe"), "t"), 0, (0)), 100000000, 0, -92)]), 0, (("kernel/sorts.mli", 32, 1047, 1049), ("kernel/sorts.mli", 32, 1047, 1074), 0), 0, Tag1 ("Sorts", 19)); (("QSort", 428), ([(Tag3 (Tag1 ((("QVar", 517)), "t"), 0, (0)), 100000000, 0, -93); (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Universe"), "t"), 0, (0)), 100000000, 0, -94)]), 0, (("kernel/sorts.mli", 33, 1075, 1077), ("kernel/sorts.mli", 33, 1075, 1112), 0), 0, Tag1 ("Sorts", 20))], 0), 0, 0, 0, 0, 0, 0, (("kernel/sorts.mli", 28, 1003, 1003), ("kernel/sorts.mli", 33, 1075, 1112), 0), 0, 0, 0, Tag1 ("Sorts", 15)), 1, 0); (("sprop", 519), ((Tag3 ((("t", 518)), 0, (0)), 100000000, 0, -91), 0, (("kernel/sorts.mli", 35, 1114, 1114), ("kernel/sorts.mli", 35, 1114, 1127), 0), 0, Tag1 ("Sorts", 21)), 0); (("set", 520), ((Tag3 ((("t", 518)), 0, (0)), 100000000, 0, -90), 0, (("kernel/sorts.mli", 36, 1128, 1128), ("kernel/sorts.mli", 36, 1128, 1140), 0), 0, Tag1 ("Sorts", 22)), 0); (("prop", 521), ((Tag3 ((("t", 518)), 0, (0)), 100000000, 0, -89), 0, (("kernel/sorts.mli", 37, 1141, 1141), ("kernel/sorts.mli", 37, 1141, 1153), 0), 0, Tag1 ("Sorts", 23)), 0); (("type1", 522), ((Tag3 ((("t", 518)), 0, (0)), 100000000, 0, -88), 0, (("kernel/sorts.mli", 38, 1154, 1154), ("kernel/sorts.mli", 38, 1154, 1168), 0), 0, Tag1 ("Sorts", 24)), 0); (("qsort", 523), ((Tag1 (0, (Tag3 (Tag1 ((("QVar", 517)), "t"), 0, (0)), 100000000, 0, -87), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Universe"), "t"), 0, (0)), 100000000, 0, -86), (Tag3 ((("t", 518)), 0, (0)), 100000000, 0, -85), 0), 100000000, 0, -84), 0), 100000000, 0, -83), 0, (("kernel/sorts.mli", 39, 1169, 1169), ("kernel/sorts.mli", 39, 1169, 1211), 0), 0, Tag1 ("Sorts", 25)), 0); (("equal", 524), ((Tag1 (0, (Tag3 ((("t", 518)), 0, (0)), 100000000, 0, -82), (Tag1 (0, (Tag3 ((("t", 518)), 0, (0)), 100000000, 0, -81), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -80), 0), 100000000, 0, -79), 0), 100000000, 0, -78), 0, (("kernel/sorts.mli", 41, 1213, 1213), ("kernel/sorts.mli", 41, 1213, 1239), 0), 0, Tag1 ("Sorts", 26)), 0); (("compare", 525), ((Tag1 (0, (Tag3 ((("t", 518)), 0, (0)), 100000000, 0, -77), (Tag1 (0, (Tag3 ((("t", 518)), 0, (0)), 100000000, 0, -76), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -75), 0), 100000000, 0, -74), 0), 100000000, 0, -73), 0, (("kernel/sorts.mli", 42, 1240, 1240), ("kernel/sorts.mli", 42, 1240, 1267), 0), 0, Tag1 ("Sorts", 27)), 0); (("hash", 526), ((Tag1 (0, (Tag3 ((("t", 518)), 0, (0)), 100000000, 0, -72), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -71), 0), 100000000, 0, -70), 0, (("kernel/sorts.mli", 43, 1268, 1268), ("kernel/sorts.mli", 43, 1268, 1287), 0), 0, Tag1 ("Sorts", 28)), 0); (("is_sprop", 527), ((Tag1 (0, (Tag3 ((("t", 518)), 0, (0)), 100000000, 0, -69), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -68), 0), 100000000, 0, -67), 0, (("kernel/sorts.mli", 45, 1289, 1289), ("kernel/sorts.mli", 45, 1289, 1313), 0), 0, Tag1 ("Sorts", 29)), 0); (("is_set", 528), ((Tag1 (0, (Tag3 ((("t", 518)), 0, (0)), 100000000, 0, -66), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -65), 0), 100000000, 0, -64), 0, (("kernel/sorts.mli", 46, 1314, 1314), ("kernel/sorts.mli", 46, 1314, 1336), 0), 0, Tag1 ("Sorts", 30)), 0); (("is_prop", 529), ((Tag1 (0, (Tag3 ((("t", 518)), 0, (0)), 100000000, 0, -63), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -62), 0), 100000000, 0, -61), 0, (("kernel/sorts.mli", 47, 1337, 1337), ("kernel/sorts.mli", 47, 1337, 1360), 0), 0, Tag1 ("Sorts", 31)), 0); (("is_small", 530), ((Tag1 (0, (Tag3 ((("t", 518)), 0, (0)), 100000000, 0, -60), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -59), 0), 100000000, 0, -58), 0, (("kernel/sorts.mli", 48, 1361, 1361), ("kernel/sorts.mli", 48, 1361, 1385), 0), 0, Tag1 ("Sorts", 32)), 0); (("family", 531), ((Tag1 (0, (Tag3 ((("t", 518)), 0, (0)), 100000000, 0, -57), (Tag3 ((("family", 515)), 0, (0)), 100000000, 0, -56), 0), 100000000, 0, -55), 0, (("kernel/sorts.mli", 49, 1386, 1386), ("kernel/sorts.mli", 49, 1386, 1410), 0), 0, Tag1 ("Sorts", 33)), 0); (("hcons", 532), ((Tag1 (0, (Tag3 ((("t", 518)), 0, (0)), 100000000, 0, -54), (Tag3 ((("t", 518)), 0, (0)), 100000000, 0, -53), 0), 100000000, 0, -52), 0, (("kernel/sorts.mli", 51, 1412, 1412), ("kernel/sorts.mli", 51, 1412, 1430), 0), 0, Tag1 ("Sorts", 34)), 0); (("family_compare", 533), ((Tag1 (0, (Tag3 ((("family", 515)), 0, (0)), 100000000, 0, -51), (Tag1 (0, (Tag3 ((("family", 515)), 0, (0)), 100000000, 0, -50), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -49), 0), 100000000, 0, -48), 0), 100000000, 0, -47), 0, (("kernel/sorts.mli", 53, 1432, 1432), ("kernel/sorts.mli", 53, 1432, 1476), 0), 0, Tag1 ("Sorts", 35)), 0); (("family_equal", 534), ((Tag1 (0, (Tag3 ((("family", 515)), 0, (0)), 100000000, 0, -46), (Tag1 (0, (Tag3 ((("family", 515)), 0, (0)), 100000000, 0, -45), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -44), 0), 100000000, 0, -43), 0), 100000000, 0, -42), 0, (("kernel/sorts.mli", 54, 1477, 1477), ("kernel/sorts.mli", 54, 1477, 1520), 0), 0, Tag1 ("Sorts", 36)), 0); (("family_leq", 535), ((Tag1 (0, (Tag3 ((("family", 515)), 0, (0)), 100000000, 0, -41), (Tag1 (0, (Tag3 ((("family", 515)), 0, (0)), 100000000, 0, -40), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -39), 0), 100000000, 0, -38), 0), 100000000, 0, -37), 0, (("kernel/sorts.mli", 55, 1521, 1521), ("kernel/sorts.mli", 55, 1521, 1562), 0), 0, Tag1 ("Sorts", 37)), 0); (("sort_of_univ", 536), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Universe"), "t"), 0, (0)), 100000000, 0, -36), (Tag3 ((("t", 518)), 0, (0)), 100000000, 0, -35), 0), 100000000, 0, -34), 0, (("kernel/sorts.mli", 57, 1564, 1564), ("kernel/sorts.mli", 57, 1564, 1603), 0), 0, Tag1 ("Sorts", 38)), 0); (("levels", 537), ((Tag1 (0, (Tag3 ((("t", 518)), 0, (0)), 100000000, 0, -33), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Univ")), "Level"), "Set"), "t"), 0, (0)), 100000000, 0, -32), 0), 100000000, 0, -31), 0, (("kernel/sorts.mli", 59, 1605, 1605), ("kernel/sorts.mli", 59, 1605, 1639), 0), 0, Tag1 ("Sorts", 39)), 0); (("super", 538), ((Tag1 (0, (Tag3 ((("t", 518)), 0, (0)), 100000000, 0, -30), (Tag3 ((("t", 518)), 0, (0)), 100000000, 0, -29), 0), 100000000, 0, -28), 0, (("kernel/sorts.mli", 61, 1641, 1641), ("kernel/sorts.mli", 61, 1641, 1659), 0), 0, Tag1 ("Sorts", 40)), 0); (("subst_instance_sort", 539), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Instance"), "t"), 0, (0)), 100000000, 0, -27), (Tag1 (0, (Tag3 ((("t", 518)), 0, (0)), 100000000, 0, -26), (Tag3 ((("t", 518)), 0, (0)), 100000000, 0, -25), 0), 100000000, 0, -24), 0), 100000000, 0, -23), 0, (("kernel/sorts.mli", 63, 1661, 1661), ("kernel/sorts.mli", 63, 1661, 1712), 0), 0, Tag1 ("Sorts", 41)), 0); Tag1 (("relevance", 540), (0, 0, Tag1 ([(("Relevant", 506), (0), 0, (("kernel/sorts.mli", 66, 1765, 1782), ("kernel/sorts.mli", 66, 1765, 1790), 0), 0, Tag1 ("Sorts", 43)); (("Irrelevant", 507), (0), 0, (("kernel/sorts.mli", 66, 1765, 1791), ("kernel/sorts.mli", 66, 1765, 1803), 0), 0, Tag1 ("Sorts", 44)); (("RelevanceVar", 508), ([(Tag3 (Tag1 ((("QVar", 517)), "t"), 0, (0)), 100000000, 0, -22)]), 0, (("kernel/sorts.mli", 66, 1765, 1804), ("kernel/sorts.mli", 66, 1765, 1828), 0), 0, Tag1 ("Sorts", 45))], 0), 1, 0, 0, 0, 0, 0, (("kernel/sorts.mli", 66, 1765, 1765), ("kernel/sorts.mli", 66, 1765, 1828), 0), 0, 0, 0, Tag1 ("Sorts", 42)), 1, 0); (("relevance_hash", 541), ((Tag1 (0, (Tag3 ((("relevance", 540)), 0, (0)), 100000000, 0, -21), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -20), 0), 100000000, 0, -19), 0, (("kernel/sorts.mli", 68, 1830, 1830), ("kernel/sorts.mli", 68, 1830, 1867), 0), 0, Tag1 ("Sorts", 46)), 0); (("relevance_equal", 542), ((Tag1 (0, (Tag3 ((("relevance", 540)), 0, (0)), 100000000, 0, -18), (Tag1 (0, (Tag3 ((("relevance", 540)), 0, (0)), 100000000, 0, -17), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -16), 0), 100000000, 0, -15), 0), 100000000, 0, -14), 0, (("kernel/sorts.mli", 70, 1869, 1869), ("kernel/sorts.mli", 70, 1869, 1921), 0), 0, Tag1 ("Sorts", 47)), 0); (("relevance_of_sort", 543), ((Tag1 (0, (Tag3 ((("t", 518)), 0, (0)), 100000000, 0, -13), (Tag3 ((("relevance", 540)), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("kernel/sorts.mli", 72, 1923, 1923), ("kernel/sorts.mli", 72, 1923, 1961), 0), 0, Tag1 ("Sorts", 48)), 0); (("relevance_of_sort_family", 544), ((Tag1 (0, (Tag3 ((("family", 515)), 0, (0)), 100000000, 0, -10), (Tag3 ((("relevance", 540)), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("kernel/sorts.mli", 73, 1962, 1962), ("kernel/sorts.mli", 73, 1962, 2012), 0), 0, Tag1 ("Sorts", 49)), 0); (("debug_print", 545), ((Tag1 (0, (Tag3 ((("t", 518)), 0, (0)), 100000000, 0, -7), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("kernel/sorts.mli", 75, 2014, 2014), ("kernel/sorts.mli", 75, 2014, 2041), 0), 0, Tag1 ("Sorts", 50)), 0); (("pr_sort_family", 546), ((Tag1 (0, (Tag3 ((("family", 515)), 0, (0)), 100000000, 0, -4), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("kernel/sorts.mli", 77, 2043, 2043), ("kernel/sorts.mli", 77, 2043, 2078), 0), 0, Tag1 ("Sorts", 51)), 0)], "Sorts", [("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])

val pr_sort_family : family -> Pp.t

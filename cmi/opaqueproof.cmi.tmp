type 'a delayed_universes =
    PrivateMonomorphic of 'a
  | PrivatePolymorphic of Univ.ContextSet.t
type opaquetab
type opaque
val empty_opaquetab : opaquetab
val create : Names.DirPath.t -> opaquetab -> opaque * opaquetab
type opaque_proofterm = Constr.t * unit delayed_universes
type opaque_handle
module HandleMap :
  sig
    type key = opaque_handle
    type +'a t
    val empty : 'a t
    val is_empty : 'a t -> bool
    val mem : key -> 'a t -> bool
    val add : key -> 'a -> 'a t -> 'a t
    val update : key -> ('a option -> 'a option) -> 'a t -> 'a t
    val singleton : key -> 'a -> 'a t
    val remove : key -> 'a t -> 'a t
    val merge :
      (key -> 'a option -> 'b option -> 'c option) -> 'a t -> 'b t -> 'c t
    val union : (key -> 'a -> 'a -> 'a option) -> 'a t -> 'a t -> 'a t
    val compare : ('a -> 'a -> int) -> 'a t -> 'a t -> int
    val equal : ('a -> 'a -> bool) -> 'a t -> 'a t -> bool
    val iter : (key -> 'a -> unit) -> 'a t -> unit
    val fold : (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b
    val for_all : (key -> 'a -> bool) -> 'a t -> bool
    val exists : (key -> 'a -> bool) -> 'a t -> bool
    val filter : (key -> 'a -> bool) -> 'a t -> 'a t
    val partition : (key -> 'a -> bool) -> 'a t -> 'a t * 'a t
    val cardinal : 'a t -> int
    val bindings : 'a t -> (key * 'a) list
    val min_binding : 'a t -> key * 'a
    val max_binding : 'a t -> key * 'a
    val choose : 'a t -> key * 'a
    val choose_opt : 'a t -> (key * 'a) option
    val split : key -> 'a t -> 'a t * 'a option * 'a t
    val find : key -> 'a t -> 'a
    val find_opt : key -> 'a t -> 'a option
    val map : ('a -> 'b) -> 'a t -> 'b t
    val mapi : (key -> 'a -> 'b) -> 'a t -> 'b t
  end
val subst_opaque : Mod_subst.substitution -> opaque -> opaque
val discharge_opaque : Cooking.cooking_info -> opaque -> opaque
val repr_handle : opaque_handle -> int
val mem_handle : opaque_handle -> opaquetab -> bool
val repr :
  opaque ->
  Mod_subst.substitution list * Cooking.cooking_info list * Names.DirPath.t *
  ("DEBUG:rule", [Tag1 (("delayed_universes", 830), ([((("a")), 100000000, 0, -41)], 1, Tag1 ([(("PrivateMonomorphic", 400), ([((("a")), 100000000, 0, -41)]), 0, (("kernel/opaqueproof.mli", 21, 1022, 1022), ("kernel/opaqueproof.mli", 21, 1022, 1048), 0), 0, Tag1 ("Opaqueproof", 1)); (("PrivatePolymorphic", 401), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "ContextSet"), "t"), 0, (0)), 100000000, 0, -42)]), 0, (("kernel/opaqueproof.mli", 22, 1049, 1049), ("kernel/opaqueproof.mli", 22, 1049, 1090), 0), 0, Tag1 ("Opaqueproof", 2))], 0), 1, 0, [25], [0], 0, 0, (("kernel/opaqueproof.mli", 20, 994, 994), ("kernel/opaqueproof.mli", 22, 1049, 1090), 0), 0, 0, 0, Tag1 ("Opaqueproof", 0)), 1, 0); Tag1 (("opaquetab", 831), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("kernel/opaqueproof.mli", 24, 1117, 1117), ("kernel/opaqueproof.mli", 24, 1117, 1131), 0), 0, 0, 0, Tag1 ("Opaqueproof", 3)), 1, 0); Tag1 (("opaque", 832), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("kernel/opaqueproof.mli", 25, 1132, 1132), ("kernel/opaqueproof.mli", 25, 1132, 1143), 0), 0, 0, 0, Tag1 ("Opaqueproof", 4)), 1, 0); (("empty_opaquetab", 833), ((Tag3 ((("opaquetab", 831)), 0, (0)), 100000000, 0, -40), 0, (("kernel/opaqueproof.mli", 27, 1145, 1145), ("kernel/opaqueproof.mli", 27, 1145, 1176), 0), 0, Tag1 ("Opaqueproof", 5)), 0); (("create", 834), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "DirPath"), "t"), 0, (0)), 100000000, 0, -39), (Tag1 (0, (Tag3 ((("opaquetab", 831)), 0, (0)), 100000000, 0, -38), (Tag2 ([(Tag3 ((("opaque", 832)), 0, (0)), 100000000, 0, -36); (Tag3 ((("opaquetab", 831)), 0, (0)), 100000000, 0, -37)]), 100000000, 0, -35), 0), 100000000, 0, -34), 0), 100000000, 0, -33), 0, (("kernel/opaqueproof.mli", 29, 1178, 1178), ("kernel/opaqueproof.mli", 29, 1178, 1235), 0), 0, Tag1 ("Opaqueproof", 6)), 0); Tag1 (("opaque_proofterm", 835), (0, 0, 0, 1, ((Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constr")), "t"), 0, (0)), 100000000, 0, -30); (Tag3 ((("delayed_universes", 830)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -32)], (0)), 100000000, 0, -31)]), 100000000, 0, -29)), 0, 0, 0, 0, (("kernel/opaqueproof.mli", 31, 1237, 1237), ("kernel/opaqueproof.mli", 31, 1237, 1294), 0), 0, 0, 0, Tag1 ("Opaqueproof", 7)), 1, 0); Tag1 (("opaque_handle", 836), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("kernel/opaqueproof.mli", 33, 1296, 1296), ("kernel/opaqueproof.mli", 33, 1296, 1314), 0), 0, 0, 0, Tag1 ("Opaqueproof", 9)), 1, 0); Tag3 (("HandleMap", 837), 0, (Tag1 ([Tag1 (("key", 843), (0, 0, 0, 1, ((Tag3 ((("opaque_handle", 836)), 0, (0)), 100000000, 0, -256)), 0, 0, 0, 0, (("kernel/opaqueproof.mli", 35, 1316, 1350), ("kernel/opaqueproof.mli", 35, 1316, 1374), 0), 0, 0, 0, Tag1 ("Opaqueproof", 10)), 1, 0); Tag1 (("t", 844), ([((("a")), 100000000, 0, -255)], 1, 0, 1, 0, [1], [2], 0, 0, (("clib/cSig.mli", 56, 1893, 1897), ("clib/cSig.mli", 56, 1893, 1909), 0), 0, 0, 0, Tag1 ("CSig", 36)), 1, 0); (("empty", 845), ((Tag3 ((("t", 844)), [((("a")), 100000000, 0, -254)], (0)), 100000000, 0, -253), 0, (("clib/cSig.mli", 57, 1910, 1914), ("clib/cSig.mli", 57, 1910, 1929), 0), 0, Tag1 ("CSig", 37)), 0); (("is_empty", 846), ((Tag1 (0, (Tag3 ((("t", 844)), [((("a")), 100000000, 0, -252)], (0)), 100000000, 0, -251), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -250), 0), 100000000, 0, -249), 0, (("clib/cSig.mli", 58, 1930, 1934), ("clib/cSig.mli", 58, 1930, 1960), 0), 0, Tag1 ("CSig", 38)), 0); (("mem", 847), ((Tag1 (0, (Tag3 ((("key", 843)), 0, (0)), 100000000, 0, -248), (Tag1 (0, (Tag3 ((("t", 844)), [((("a")), 100000000, 0, -247)], (0)), 100000000, 0, -246), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -245), 0), 100000000, 0, -244), 0), 100000000, 0, -243), 0, (("clib/cSig.mli", 59, 1961, 1965), ("clib/cSig.mli", 59, 1961, 1993), 0), 0, Tag1 ("CSig", 39)), 0); (("add", 848), ((Tag1 (0, (Tag3 ((("key", 843)), 0, (0)), 100000000, 0, -242), (Tag1 (0, ((("a")), 100000000, 0, -240), (Tag1 (0, (Tag3 ((("t", 844)), [((("a")), 100000000, 0, -240)], (0)), 100000000, 0, -241), (Tag3 ((("t", 844)), [((("a")), 100000000, 0, -240)], (0)), 100000000, 0, -239), 0), 100000000, 0, -238), 0), 100000000, 0, -237), 0), 100000000, 0, -236), 0, (("clib/cSig.mli", 60, 1994, 1998), ("clib/cSig.mli", 60, 1994, 2032), 0), 0, Tag1 ("CSig", 40)), 0); (("update", 849), ((Tag1 (0, (Tag3 ((("key", 843)), 0, (0)), 100000000, 0, -235), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -230)], (0)), 100000000, 0, -234), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -230)], (0)), 100000000, 0, -233), 0), 100000000, 0, -232), (Tag1 (0, (Tag3 ((("t", 844)), [((("a")), 100000000, 0, -230)], (0)), 100000000, 0, -231), (Tag3 ((("t", 844)), [((("a")), 100000000, 0, -230)], (0)), 100000000, 0, -229), 0), 100000000, 0, -228), 0), 100000000, 0, -227), 0), 100000000, 0, -226), 0, (("clib/cSig.mli", 61, 2033, 2037), ("clib/cSig.mli", 61, 2033, 2097), 0), 0, Tag1 ("CSig", 41)), 0); (("singleton", 850), ((Tag1 (0, (Tag3 ((("key", 843)), 0, (0)), 100000000, 0, -225), (Tag1 (0, ((("a")), 100000000, 0, -224), (Tag3 ((("t", 844)), [((("a")), 100000000, 0, -224)], (0)), 100000000, 0, -223), 0), 100000000, 0, -222), 0), 100000000, 0, -221), 0, (("clib/cSig.mli", 62, 2098, 2102), ("clib/cSig.mli", 62, 2098, 2134), 0), 0, Tag1 ("CSig", 42)), 0); (("remove", 851), ((Tag1 (0, (Tag3 ((("key", 843)), 0, (0)), 100000000, 0, -220), (Tag1 (0, (Tag3 ((("t", 844)), [((("a")), 100000000, 0, -218)], (0)), 100000000, 0, -219), (Tag3 ((("t", 844)), [((("a")), 100000000, 0, -218)], (0)), 100000000, 0, -217), 0), 100000000, 0, -216), 0), 100000000, 0, -215), 0, (("clib/cSig.mli", 63, 2135, 2139), ("clib/cSig.mli", 63, 2135, 2170), 0), 0, Tag1 ("CSig", 43)), 0); (("merge", 852), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 843)), 0, (0)), 100000000, 0, -214), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -207)], (0)), 100000000, 0, -213), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -205)], (0)), 100000000, 0, -212), (Tag3 ((Tag3 ("option", 10)), [((("c")), 100000000, 0, -203)], (0)), 100000000, 0, -211), 0), 100000000, 0, -210), 0), 100000000, 0, -209), 0), 100000000, 0, -208), (Tag1 (0, (Tag3 ((("t", 844)), [((("a")), 100000000, 0, -207)], (0)), 100000000, 0, -206), (Tag1 (0, (Tag3 ((("t", 844)), [((("b")), 100000000, 0, -205)], (0)), 100000000, 0, -204), (Tag3 ((("t", 844)), [((("c")), 100000000, 0, -203)], (0)), 100000000, 0, -202), 0), 100000000, 0, -201), 0), 100000000, 0, -200), 0), 100000000, 0, -199), 0, (("clib/cSig.mli", 64, 2171, 2175), ("clib/cSig.mli", 65, 2186, 2263), 0), 0, Tag1 ("CSig", 44)), 0); (("union", 853), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 843)), 0, (0)), 100000000, 0, -198), (Tag1 (0, ((("a")), 100000000, 0, -191), (Tag1 (0, ((("a")), 100000000, 0, -191), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -191)], (0)), 100000000, 0, -197), 0), 100000000, 0, -196), 0), 100000000, 0, -195), 0), 100000000, 0, -194), (Tag1 (0, (Tag3 ((("t", 844)), [((("a")), 100000000, 0, -191)], (0)), 100000000, 0, -193), (Tag1 (0, (Tag3 ((("t", 844)), [((("a")), 100000000, 0, -191)], (0)), 100000000, 0, -192), (Tag3 ((("t", 844)), [((("a")), 100000000, 0, -191)], (0)), 100000000, 0, -190), 0), 100000000, 0, -189), 0), 100000000, 0, -188), 0), 100000000, 0, -187), 0, (("clib/cSig.mli", 66, 2264, 2268), ("clib/cSig.mli", 67, 2279, 2339), 0), 0, Tag1 ("CSig", 45)), 0); (("compare", 854), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -182), (Tag1 (0, ((("a")), 100000000, 0, -182), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -186), 0), 100000000, 0, -185), 0), 100000000, 0, -184), (Tag1 (0, (Tag3 ((("t", 844)), [((("a")), 100000000, 0, -182)], (0)), 100000000, 0, -183), (Tag1 (0, (Tag3 ((("t", 844)), [((("a")), 100000000, 0, -182)], (0)), 100000000, 0, -181), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -180), 0), 100000000, 0, -179), 0), 100000000, 0, -178), 0), 100000000, 0, -177), 0, (("clib/cSig.mli", 68, 2340, 2344), ("clib/cSig.mli", 68, 2340, 2397), 0), 0, Tag1 ("CSig", 46)), 0); (("equal", 855), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -172), (Tag1 (0, ((("a")), 100000000, 0, -172), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -176), 0), 100000000, 0, -175), 0), 100000000, 0, -174), (Tag1 (0, (Tag3 ((("t", 844)), [((("a")), 100000000, 0, -172)], (0)), 100000000, 0, -173), (Tag1 (0, (Tag3 ((("t", 844)), [((("a")), 100000000, 0, -172)], (0)), 100000000, 0, -171), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -170), 0), 100000000, 0, -169), 0), 100000000, 0, -168), 0), 100000000, 0, -167), 0, (("clib/cSig.mli", 69, 2398, 2402), ("clib/cSig.mli", 69, 2398, 2455), 0), 0, Tag1 ("CSig", 47)), 0); (("iter", 856), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 843)), 0, (0)), 100000000, 0, -166), (Tag1 (0, ((("a")), 100000000, 0, -162), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -165), 0), 100000000, 0, -164), 0), 100000000, 0, -163), (Tag1 (0, (Tag3 ((("t", 844)), [((("a")), 100000000, 0, -162)], (0)), 100000000, 0, -161), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -160), 0), 100000000, 0, -159), 0), 100000000, 0, -158), 0, (("clib/cSig.mli", 70, 2456, 2460), ("clib/cSig.mli", 70, 2456, 2505), 0), 0, Tag1 ("CSig", 48)), 0); (("fold", 857), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 843)), 0, (0)), 100000000, 0, -157), (Tag1 (0, ((("a")), 100000000, 0, -153), (Tag1 (0, ((("b")), 100000000, 0, -151), ((("b")), 100000000, 0, -151), 0), 100000000, 0, -156), 0), 100000000, 0, -155), 0), 100000000, 0, -154), (Tag1 (0, (Tag3 ((("t", 844)), [((("a")), 100000000, 0, -153)], (0)), 100000000, 0, -152), (Tag1 (0, ((("b")), 100000000, 0, -151), ((("b")), 100000000, 0, -151), 0), 100000000, 0, -150), 0), 100000000, 0, -149), 0), 100000000, 0, -148), 0, (("clib/cSig.mli", 71, 2506, 2510), ("clib/cSig.mli", 71, 2506, 2563), 0), 0, Tag1 ("CSig", 49)), 0); (("for_all", 858), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 843)), 0, (0)), 100000000, 0, -147), (Tag1 (0, ((("a")), 100000000, 0, -143), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -146), 0), 100000000, 0, -145), 0), 100000000, 0, -144), (Tag1 (0, (Tag3 ((("t", 844)), [((("a")), 100000000, 0, -143)], (0)), 100000000, 0, -142), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -141), 0), 100000000, 0, -140), 0), 100000000, 0, -139), 0, (("clib/cSig.mli", 72, 2564, 2568), ("clib/cSig.mli", 72, 2564, 2616), 0), 0, Tag1 ("CSig", 50)), 0); (("exists", 859), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 843)), 0, (0)), 100000000, 0, -138), (Tag1 (0, ((("a")), 100000000, 0, -134), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -137), 0), 100000000, 0, -136), 0), 100000000, 0, -135), (Tag1 (0, (Tag3 ((("t", 844)), [((("a")), 100000000, 0, -134)], (0)), 100000000, 0, -133), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -132), 0), 100000000, 0, -131), 0), 100000000, 0, -130), 0, (("clib/cSig.mli", 73, 2617, 2621), ("clib/cSig.mli", 73, 2617, 2668), 0), 0, Tag1 ("CSig", 51)), 0); (("filter", 860), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 843)), 0, (0)), 100000000, 0, -129), (Tag1 (0, ((("a")), 100000000, 0, -124), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -128), 0), 100000000, 0, -127), 0), 100000000, 0, -126), (Tag1 (0, (Tag3 ((("t", 844)), [((("a")), 100000000, 0, -124)], (0)), 100000000, 0, -125), (Tag3 ((("t", 844)), [((("a")), 100000000, 0, -124)], (0)), 100000000, 0, -123), 0), 100000000, 0, -122), 0), 100000000, 0, -121), 0, (("clib/cSig.mli", 74, 2669, 2673), ("clib/cSig.mli", 74, 2669, 2720), 0), 0, Tag1 ("CSig", 52)), 0); (("partition", 861), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 843)), 0, (0)), 100000000, 0, -120), (Tag1 (0, ((("a")), 100000000, 0, -114), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -119), 0), 100000000, 0, -118), 0), 100000000, 0, -117), (Tag1 (0, (Tag3 ((("t", 844)), [((("a")), 100000000, 0, -114)], (0)), 100000000, 0, -116), (Tag2 ([(Tag3 ((("t", 844)), [((("a")), 100000000, 0, -114)], (0)), 100000000, 0, -113); (Tag3 ((("t", 844)), [((("a")), 100000000, 0, -114)], (0)), 100000000, 0, -115)]), 100000000, 0, -112), 0), 100000000, 0, -111), 0), 100000000, 0, -110), 0, (("clib/cSig.mli", 75, 2721, 2725), ("clib/cSig.mli", 75, 2721, 2782), 0), 0, Tag1 ("CSig", 53)), 0); (("cardinal", 862), ((Tag1 (0, (Tag3 ((("t", 844)), [((("a")), 100000000, 0, -109)], (0)), 100000000, 0, -108), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -107), 0), 100000000, 0, -106), 0, (("clib/cSig.mli", 76, 2783, 2787), ("clib/cSig.mli", 76, 2783, 2812), 0), 0, Tag1 ("CSig", 54)), 0); (("bindings", 863), ((Tag1 (0, (Tag3 ((("t", 844)), [((("a")), 100000000, 0, -104)], (0)), 100000000, 0, -105), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("key", 843)), 0, (0)), 100000000, 0, -103); ((("a")), 100000000, 0, -104)]), 100000000, 0, -102)], (0)), 100000000, 0, -101), 0), 100000000, 0, -100), 0, (("clib/cSig.mli", 77, 2813, 2817), ("clib/cSig.mli", 77, 2813, 2854), 0), 0, Tag1 ("CSig", 55)), 0); (("min_binding", 864), ((Tag1 (0, (Tag3 ((("t", 844)), [((("a")), 100000000, 0, -98)], (0)), 100000000, 0, -99), (Tag2 ([(Tag3 ((("key", 843)), 0, (0)), 100000000, 0, -97); ((("a")), 100000000, 0, -98)]), 100000000, 0, -96), 0), 100000000, 0, -95), 0, (("clib/cSig.mli", 78, 2855, 2859), ("clib/cSig.mli", 78, 2855, 2894), 0), 0, Tag1 ("CSig", 56)), 0); (("max_binding", 865), ((Tag1 (0, (Tag3 ((("t", 844)), [((("a")), 100000000, 0, -93)], (0)), 100000000, 0, -94), (Tag2 ([(Tag3 ((("key", 843)), 0, (0)), 100000000, 0, -92); ((("a")), 100000000, 0, -93)]), 100000000, 0, -91), 0), 100000000, 0, -90), 0, (("clib/cSig.mli", 79, 2895, 2899), ("clib/cSig.mli", 79, 2895, 2934), 0), 0, Tag1 ("CSig", 57)), 0); (("choose", 866), ((Tag1 (0, (Tag3 ((("t", 844)), [((("a")), 100000000, 0, -88)], (0)), 100000000, 0, -89), (Tag2 ([(Tag3 ((("key", 843)), 0, (0)), 100000000, 0, -87); ((("a")), 100000000, 0, -88)]), 100000000, 0, -86), 0), 100000000, 0, -85), 0, (("clib/cSig.mli", 80, 2935, 2939), ("clib/cSig.mli", 80, 2935, 2969), 0), 0, Tag1 ("CSig", 58)), 0); (("choose_opt", 867), ((Tag1 (0, (Tag3 ((("t", 844)), [((("a")), 100000000, 0, -83)], (0)), 100000000, 0, -84), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("key", 843)), 0, (0)), 100000000, 0, -82); ((("a")), 100000000, 0, -83)]), 100000000, 0, -81)], (0)), 100000000, 0, -80), 0), 100000000, 0, -79), 0, (("clib/cSig.mli", 81, 2970, 2974), ("clib/cSig.mli", 81, 2970, 3015), 0), 0, Tag1 ("CSig", 59)), 0); (("split", 868), ((Tag1 (0, (Tag3 ((("key", 843)), 0, (0)), 100000000, 0, -78), (Tag1 (0, (Tag3 ((("t", 844)), [((("a")), 100000000, 0, -74)], (0)), 100000000, 0, -77), (Tag2 ([(Tag3 ((("t", 844)), [((("a")), 100000000, 0, -74)], (0)), 100000000, 0, -73); (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -74)], (0)), 100000000, 0, -75); (Tag3 ((("t", 844)), [((("a")), 100000000, 0, -74)], (0)), 100000000, 0, -76)]), 100000000, 0, -72), 0), 100000000, 0, -71), 0), 100000000, 0, -70), 0, (("clib/cSig.mli", 82, 3016, 3020), ("clib/cSig.mli", 82, 3016, 3069), 0), 0, Tag1 ("CSig", 60)), 0); (("find", 869), ((Tag1 (0, (Tag3 ((("key", 843)), 0, (0)), 100000000, 0, -69), (Tag1 (0, (Tag3 ((("t", 844)), [((("a")), 100000000, 0, -67)], (0)), 100000000, 0, -68), ((("a")), 100000000, 0, -67), 0), 100000000, 0, -66), 0), 100000000, 0, -65), 0, (("clib/cSig.mli", 83, 3070, 3074), ("clib/cSig.mli", 83, 3070, 3101), 0), 0, Tag1 ("CSig", 61)), 0); (("find_opt", 870), ((Tag1 (0, (Tag3 ((("key", 843)), 0, (0)), 100000000, 0, -64), (Tag1 (0, (Tag3 ((("t", 844)), [((("a")), 100000000, 0, -62)], (0)), 100000000, 0, -63), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -62)], (0)), 100000000, 0, -61), 0), 100000000, 0, -60), 0), 100000000, 0, -59), 0, (("clib/cSig.mli", 84, 3102, 3106), ("clib/cSig.mli", 84, 3102, 3145), 0), 0, Tag1 ("CSig", 62)), 0); (("map", 871), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -57), ((("b")), 100000000, 0, -55), 0), 100000000, 0, -58), (Tag1 (0, (Tag3 ((("t", 844)), [((("a")), 100000000, 0, -57)], (0)), 100000000, 0, -56), (Tag3 ((("t", 844)), [((("b")), 100000000, 0, -55)], (0)), 100000000, 0, -54), 0), 100000000, 0, -53), 0), 100000000, 0, -52), 0, (("clib/cSig.mli", 85, 3146, 3150), ("clib/cSig.mli", 85, 3146, 3185), 0), 0, Tag1 ("CSig", 63)), 0); (("mapi", 872), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 843)), 0, (0)), 100000000, 0, -51), (Tag1 (0, ((("a")), 100000000, 0, -48), ((("b")), 100000000, 0, -46), 0), 100000000, 0, -50), 0), 100000000, 0, -49), (Tag1 (0, (Tag3 ((("t", 844)), [((("a")), 100000000, 0, -48)], (0)), 100000000, 0, -47), (Tag3 ((("t", 844)), [((("b")), 100000000, 0, -46)], (0)), 100000000, 0, -45), 0), 100000000, 0, -44), 0), 100000000, 0, -43), 0, (("clib/cSig.mli", 86, 3186, 3190), ("clib/cSig.mli", 86, 3186, 3233), 0), 0, Tag1 ("CSig", 64)), 0)]), 0, (("kernel/opaqueproof.mli", 35, 1316, 1316), ("kernel/opaqueproof.mli", 35, 1316, 1374), 0), Tag1 ("Opaqueproof", 11)), 0, 0); (("subst_opaque", 838), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Mod_subst")), "substitution"), 0, (0)), 100000000, 0, -28), (Tag1 (0, (Tag3 ((("opaque", 832)), 0, (0)), 100000000, 0, -27), (Tag3 ((("opaque", 832)), 0, (0)), 100000000, 0, -26), 0), 100000000, 0, -25), 0), 100000000, 0, -24), 0, (("kernel/opaqueproof.mli", 42, 1554, 1554), ("kernel/opaqueproof.mli", 42, 1554, 1605), 0), 0, Tag1 ("Opaqueproof", 12)), 0); (("discharge_opaque", 839), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Cooking")), "cooking_info"), 0, (0)), 100000000, 0, -23), (Tag1 (0, (Tag3 ((("opaque", 832)), 0, (0)), 100000000, 0, -22), (Tag3 ((("opaque", 832)), 0, (0)), 100000000, 0, -21), 0), 100000000, 0, -20), 0), 100000000, 0, -19), 0, (("kernel/opaqueproof.mli", 44, 1607, 1607), ("kernel/opaqueproof.mli", 44, 1607, 1670), 0), 0, Tag1 ("Opaqueproof", 13)), 0); (("repr_handle", 840), ((Tag1 (0, (Tag3 ((("opaque_handle", 836)), 0, (0)), 100000000, 0, -18), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("kernel/opaqueproof.mli", 46, 1672, 1672), ("kernel/opaqueproof.mli", 46, 1672, 1710), 0), 0, Tag1 ("Opaqueproof", 14)), 0); (("mem_handle", 841), ((Tag1 (0, (Tag3 ((("opaque_handle", 836)), 0, (0)), 100000000, 0, -15), (Tag1 (0, (Tag3 ((("opaquetab", 831)), 0, (0)), 100000000, 0, -14), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -13), 0), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("kernel/opaqueproof.mli", 48, 1712, 1712), ("kernel/opaqueproof.mli", 48, 1712, 1763), 0), 0, Tag1 ("Opaqueproof", 15)), 0); (("repr", 842), ((Tag1 (0, (Tag3 ((("opaque", 832)), 0, (0)), 100000000, 0, -10), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Mod_subst")), "substitution"), 0, (0)), 100000000, 0, -5)], (0)), 100000000, 0, -4); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Cooking")), "cooking_info"), 0, (0)), 100000000, 0, -7)], (0)), 100000000, 0, -6); (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "DirPath"), "t"), 0, (0)), 100000000, 0, -8); (Tag3 ((("opaque_handle", 836)), 0, (0)), 100000000, 0, -9)]), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("kernel/opaqueproof.mli", 50, 1765, 1765), ("kernel/opaqueproof.mli", 50, 1765, 1859), 0), 0, Tag1 ("Opaqueproof", 16)), 0)], "Opaqueproof", [("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])
opaque_handle

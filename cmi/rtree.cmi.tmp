type 'a t
val mk_node : 'a -> 'a t array -> 'a t
val mk_rec_calls : int -> 'a t array
val mk_rec : 'a t array -> 'a t array
val lift : int -> 'a t -> 'a t
val is_node : 'a t -> bool
val dest_node : 'a t -> 'a * 'a t array
val dest_param : 'a t -> int * int
val is_infinite : ('a -> 'a -> bool) -> 'a t -> bool
val equiv : ('a -> 'a -> bool) -> ('a -> 'a -> bool) -> 'a t -> 'a t -> bool
val equal : ('a -> 'a -> bool) -> 'a t -> 'a t -> bool
val inter :
  ('a -> 'a -> bool) -> ('a -> 'a -> 'a option) -> 'a -> 'a t -> 'a t -> 'a t
val incl :
  ('a -> 'a -> bool) -> ('a -> 'a -> 'a option) -> 'a -> 'a t -> 'a t -> bool
val map : ('a -> 'b) -> 'a t -> 'b t
val pp_tree : ('a -> Pp.t) -> 'a t -> Pp.t
("DEBUG:rule", [Tag1 (("t", 348), ([((("a")), 100000000, 0, -117)], 1, 0, 1, 0, [7], [2], 0, 0, (("lib/rtree.mli", 14, 865, 865), ("lib/rtree.mli", 14, 865, 874), 0), 0, 0, 0, Tag1 ("Rtree", 0)), 1, 0); (("mk_node", 349), ((Tag1 (0, ((("a")), 100000000, 0, -114), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("t", 348)), [((("a")), 100000000, 0, -114)], (0)), 100000000, 0, -116)], (0)), 100000000, 0, -115), (Tag3 ((("t", 348)), [((("a")), 100000000, 0, -114)], (0)), 100000000, 0, -113), 0), 100000000, 0, -112), 0), 100000000, 0, -111), 0, (("lib/rtree.mli", 19, 956, 956), ("lib/rtree.mli", 19, 956, 995), 0), 0, Tag1 ("Rtree", 1)), 0); (("mk_rec_calls", 350), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -110), (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("t", 348)), [((("a")), 100000000, 0, -109)], (0)), 100000000, 0, -108)], (0)), 100000000, 0, -107), 0), 100000000, 0, -106), 0, (("lib/rtree.mli", 39, 1671, 1671), ("lib/rtree.mli", 39, 1671, 1707), 0), 0, Tag1 ("Rtree", 2)), 0); (("mk_rec", 351), ((Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("t", 348)), [((("a")), 100000000, 0, -103)], (0)), 100000000, 0, -105)], (0)), 100000000, 0, -104), (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("t", 348)), [((("a")), 100000000, 0, -103)], (0)), 100000000, 0, -102)], (0)), 100000000, 0, -101), 0), 100000000, 0, -100), 0, (("lib/rtree.mli", 40, 1708, 1708), ("lib/rtree.mli", 40, 1708, 1747), 0), 0, Tag1 ("Rtree", 3)), 0); (("lift", 352), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -99), (Tag1 (0, (Tag3 ((("t", 348)), [((("a")), 100000000, 0, -97)], (0)), 100000000, 0, -98), (Tag3 ((("t", 348)), [((("a")), 100000000, 0, -97)], (0)), 100000000, 0, -96), 0), 100000000, 0, -95), 0), 100000000, 0, -94), 0, (("lib/rtree.mli", 44, 1875, 1875), ("lib/rtree.mli", 44, 1875, 1905), 0), 0, Tag1 ("Rtree", 4)), 0); (("is_node", 353), ((Tag1 (0, (Tag3 ((("t", 348)), [((("a")), 100000000, 0, -93)], (0)), 100000000, 0, -92), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -91), 0), 100000000, 0, -90), 0, (("lib/rtree.mli", 46, 1907, 1907), ("lib/rtree.mli", 46, 1907, 1933), 0), 0, Tag1 ("Rtree", 5)), 0); (("dest_node", 354), ((Tag1 (0, (Tag3 ((("t", 348)), [((("a")), 100000000, 0, -86)], (0)), 100000000, 0, -89), (Tag2 ([((("a")), 100000000, 0, -86); (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("t", 348)), [((("a")), 100000000, 0, -86)], (0)), 100000000, 0, -88)], (0)), 100000000, 0, -87)]), 100000000, 0, -85), 0), 100000000, 0, -84), 0, (("lib/rtree.mli", 49, 1985, 1985), ("lib/rtree.mli", 49, 1985, 2025), 0), 0, Tag1 ("Rtree", 6)), 0); (("dest_param", 355), ((Tag1 (0, (Tag3 ((("t", 348)), [((("a")), 100000000, 0, -83)], (0)), 100000000, 0, -82), (Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -80); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -81)]), 100000000, 0, -79), 0), 100000000, 0, -78), 0, (("lib/rtree.mli", 52, 2105, 2105), ("lib/rtree.mli", 52, 2105, 2139), 0), 0, Tag1 ("Rtree", 7)), 0); (("is_infinite", 356), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -74), (Tag1 (0, ((("a")), 100000000, 0, -74), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -77), 0), 100000000, 0, -76), 0), 100000000, 0, -75), (Tag1 (0, (Tag3 ((("t", 348)), [((("a")), 100000000, 0, -74)], (0)), 100000000, 0, -73), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -72), 0), 100000000, 0, -71), 0), 100000000, 0, -70), 0, (("lib/rtree.mli", 56, 2272, 2272), ("lib/rtree.mli", 56, 2272, 2324), 0), 0, Tag1 ("Rtree", 8)), 0); (("equiv", 357), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -62), (Tag1 (0, ((("a")), 100000000, 0, -62), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -69), 0), 100000000, 0, -68), 0), 100000000, 0, -67), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -62), (Tag1 (0, ((("a")), 100000000, 0, -62), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -66), 0), 100000000, 0, -65), 0), 100000000, 0, -64), (Tag1 (0, (Tag3 ((("t", 348)), [((("a")), 100000000, 0, -62)], (0)), 100000000, 0, -63), (Tag1 (0, (Tag3 ((("t", 348)), [((("a")), 100000000, 0, -62)], (0)), 100000000, 0, -61), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -60), 0), 100000000, 0, -59), 0), 100000000, 0, -58), 0), 100000000, 0, -57), 0), 100000000, 0, -56), 0, (("lib/rtree.mli", 63, 2619, 2619), ("lib/rtree.mli", 64, 2631, 2697), 0), 0, Tag1 ("Rtree", 9)), 0); (("equal", 358), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -51), (Tag1 (0, ((("a")), 100000000, 0, -51), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -55), 0), 100000000, 0, -54), 0), 100000000, 0, -53), (Tag1 (0, (Tag3 ((("t", 348)), [((("a")), 100000000, 0, -51)], (0)), 100000000, 0, -52), (Tag1 (0, (Tag3 ((("t", 348)), [((("a")), 100000000, 0, -51)], (0)), 100000000, 0, -50), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -49), 0), 100000000, 0, -48), 0), 100000000, 0, -47), 0), 100000000, 0, -46), 0, (("lib/rtree.mli", 69, 2888, 2888), ("lib/rtree.mli", 69, 2888, 2942), 0), 0, Tag1 ("Rtree", 10)), 0); (("inter", 359), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -37), (Tag1 (0, ((("a")), 100000000, 0, -37), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -45), 0), 100000000, 0, -44), 0), 100000000, 0, -43), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -37), (Tag1 (0, ((("a")), 100000000, 0, -37), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -37)], (0)), 100000000, 0, -42), 0), 100000000, 0, -41), 0), 100000000, 0, -40), (Tag1 (0, ((("a")), 100000000, 0, -37), (Tag1 (0, (Tag3 ((("t", 348)), [((("a")), 100000000, 0, -37)], (0)), 100000000, 0, -39), (Tag1 (0, (Tag3 ((("t", 348)), [((("a")), 100000000, 0, -37)], (0)), 100000000, 0, -38), (Tag3 ((("t", 348)), [((("a")), 100000000, 0, -37)], (0)), 100000000, 0, -36), 0), 100000000, 0, -35), 0), 100000000, 0, -34), 0), 100000000, 0, -33), 0), 100000000, 0, -32), 0), 100000000, 0, -31), 0, (("lib/rtree.mli", 71, 2944, 2944), ("lib/rtree.mli", 71, 2944, 3031), 0), 0, Tag1 ("Rtree", 11)), 0); (("incl", 360), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -23), (Tag1 (0, ((("a")), 100000000, 0, -23), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -30), 0), 100000000, 0, -29), 0), 100000000, 0, -28), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -23), (Tag1 (0, ((("a")), 100000000, 0, -23), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -23)], (0)), 100000000, 0, -27), 0), 100000000, 0, -26), 0), 100000000, 0, -25), (Tag1 (0, ((("a")), 100000000, 0, -23), (Tag1 (0, (Tag3 ((("t", 348)), [((("a")), 100000000, 0, -23)], (0)), 100000000, 0, -24), (Tag1 (0, (Tag3 ((("t", 348)), [((("a")), 100000000, 0, -23)], (0)), 100000000, 0, -22), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -21), 0), 100000000, 0, -20), 0), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("lib/rtree.mli", 73, 3033, 3033), ("lib/rtree.mli", 73, 3033, 3119), 0), 0, Tag1 ("Rtree", 12)), 0); (("map", 361), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -14), ((("b")), 100000000, 0, -12), 0), 100000000, 0, -15), (Tag1 (0, (Tag3 ((("t", 348)), [((("a")), 100000000, 0, -14)], (0)), 100000000, 0, -13), (Tag3 ((("t", 348)), [((("b")), 100000000, 0, -12)], (0)), 100000000, 0, -11), 0), 100000000, 0, -10), 0), 100000000, 0, -9), 0, (("lib/rtree.mli", 78, 3167, 3167), ("lib/rtree.mli", 78, 3167, 3203), 0), 0, Tag1 ("Rtree", 13)), 0); (("pp_tree", 362), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -6), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -8), 0), 100000000, 0, -7), (Tag1 (0, (Tag3 ((("t", 348)), [((("a")), 100000000, 0, -6)], (0)), 100000000, 0, -5), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("lib/rtree.mli", 81, 3250, 3250), ("lib/rtree.mli", 81, 3250, 3292), 0), 0, Tag1 ("Rtree", 14)), 0); Tag3 (("Smart", 363), 0, (Tag1 ([(("map", 364), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -121), ((("a")), 100000000, 0, -121), 0), 100000000, 0, -123), (Tag1 (0, (Tag3 ((("t", 348)), [((("a")), 100000000, 0, -121)], (0)), 100000000, 0, -122), (Tag3 ((("t", 348)), [((("a")), 100000000, 0, -121)], (0)), 100000000, 0, -120), 0), 100000000, 0, -119), 0), 100000000, 0, -118), 0, (("lib/rtree.mli", 87, 3376, 3378), ("lib/rtree.mli", 87, 3376, 3414), 0), 0, Tag1 ("Rtree", 15)), 0)]), 0, (("lib/rtree.mli", 83, 3294, 3294), ("lib/rtree.mli", 89, 3416, 3419), 0), Tag1 ("Rtree", 16)), 0, 0)], "Rtree", [("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
module Smart : sig val map : ('a -> 'a) -> 'a t -> 'a t end

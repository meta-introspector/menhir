val init : int -> unit
val full_init : int array -> unit
val self_init : ?allow_in_tests:bool -> unit -> unit
val bits : unit -> int
val int : int -> int
val int32 : int32 -> int32
val nativeint : nativeint -> nativeint
val int64 : int64 -> int64
val float : float -> float
val int_incl : int -> int -> int
val int32_incl : int32 -> int32 -> int32
val nativeint_incl : nativeint -> nativeint -> nativeint
val int64_incl : int64 -> int64 -> int64
val float_range : float -> float -> float
val bool : unit -> bool
val char : unit -> char
val ascii : unit -> char
module State :
  sig
    type t
    val default : t
    val make : int array -> t
    val make_self_init : ?allow_in_tests:bool -> unit -> t
    val copy : t -> t
    val bits : t -> int
    val int : t -> int -> int
    val int32 : t -> int32 -> int32
    val nativeint : t -> nativeint -> nativeint
    val int64 : t -> int64 -> int64
    val float : t -> float -> float
    val int_incl : t -> int -> int -> int
    val int32_incl : t -> int32 -> int32 -> int32
    val nativeint_incl : t -> nativeint -> nativeint -> nativeint
    val int64_incl : t -> int64 -> int64 -> int64
    val float_range : t -> float -> float -> float
    val bool : t -> bool
    val char : t -> char
    val ascii : t -> char
  end("DEBUG:rule", [(("init", 820), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -69), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -68), 0), 100000000, 0, -67), 0, (("src/random.mli", 29, 1333, 1333), ("src/random.mli", 29, 1333, 1355), 0), 0, Tag1 ("Base__Random", 0)), 0); (("full_init", 821), ((Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -66)], (0)), 100000000, 0, -65), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -64), 0), 100000000, 0, -63), 0, (("src/random.mli", 32, 1416, 1416), ("src/random.mli", 32, 1416, 1449), 0), 0, Tag1 ("Base__Random", 1)), 0); (("self_init", 822), ((Tag1 (Tag1 ("allow_in_tests"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -62)], (0)), 100000000, 0, -61), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -60), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -59), 0), 100000000, 0, -58), 0), 100000000, 0, -57), 0, (("src/random.mli", 39, 1860, 1860), ("src/random.mli", 39, 1860, 1912), 0), 0, Tag1 ("Base__Random", 2)), 0); (("bits", 823), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -56), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -55), 0), 100000000, 0, -54), 0, (("src/random.mli", 43, 2054, 2054), ("src/random.mli", 43, 2054, 2076), 0), 0, Tag1 ("Base__Random", 3)), 0); (("int", 824), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -53), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -52), 0), 100000000, 0, -51), 0, (("src/random.mli", 47, 2213, 2213), ("src/random.mli", 47, 2213, 2233), 0), 0, Tag1 ("Base__Random", 4)), 0); (("int32", 825), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -50), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -49), 0), 100000000, 0, -48), 0, (("src/random.mli", 51, 2372, 2372), ("src/random.mli", 51, 2372, 2398), 0), 0, Tag1 ("Base__Random", 5)), 0); (("nativeint", 826), ((Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -47), (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -46), 0), 100000000, 0, -45), 0, (("src/random.mli", 55, 2541, 2541), ("src/random.mli", 55, 2541, 2579), 0), 0, Tag1 ("Base__Random", 6)), 0); (("int64", 827), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -44), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -43), 0), 100000000, 0, -42), 0, (("src/random.mli", 59, 2718, 2718), ("src/random.mli", 59, 2718, 2744), 0), 0, Tag1 ("Base__Random", 7)), 0); (("float", 828), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -41), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -40), 0), 100000000, 0, -39), 0, (("src/random.mli", 64, 2960, 2960), ("src/random.mli", 64, 2960, 2986), 0), 0, Tag1 ("Base__Random", 8)), 0); (("int_incl", 829), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -38), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -37), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -36), 0), 100000000, 0, -35), 0), 100000000, 0, -34), 0, (("src/random.mli", 68, 3108, 3108), ("src/random.mli", 68, 3108, 3140), 0), 0, Tag1 ("Base__Random", 9)), 0); (("int32_incl", 830), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -33), (Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -32), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -31), 0), 100000000, 0, -30), 0), 100000000, 0, -29), 0, (("src/random.mli", 70, 3142, 3142), ("src/random.mli", 70, 3142, 3182), 0), 0, Tag1 ("Base__Random", 10)), 0); (("nativeint_incl", 831), ((Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -28), (Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -27), (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -26), 0), 100000000, 0, -25), 0), 100000000, 0, -24), 0, (("src/random.mli", 71, 3183, 3183), ("src/random.mli", 71, 3183, 3239), 0), 0, Tag1 ("Base__Random", 11)), 0); (("int64_incl", 832), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -23), (Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -22), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -21), 0), 100000000, 0, -20), 0), 100000000, 0, -19), 0, (("src/random.mli", 72, 3240, 3240), ("src/random.mli", 72, 3240, 3280), 0), 0, Tag1 ("Base__Random", 12)), 0); (("float_range", 833), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -18), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -17), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -16), 0), 100000000, 0, -15), 0), 100000000, 0, -14), 0, (("src/random.mli", 76, 3424, 3424), ("src/random.mli", 76, 3424, 3465), 0), 0, Tag1 ("Base__Random", 13)), 0); (("bool", 834), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -13), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("src/random.mli", 79, 3544, 3544), ("src/random.mli", 79, 3544, 3567), 0), 0, Tag1 ("Base__Random", 14)), 0); (("char", 835), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10), (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("src/random.mli", 82, 3611, 3611), ("src/random.mli", 82, 3611, 3634), 0), 0, Tag1 ("Base__Random", 15)), 0); (("ascii", 836), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7), (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("src/random.mli", 85, 3697, 3697), ("src/random.mli", 85, 3697, 3721), 0), 0, Tag1 ("Base__Random", 16)), 0); Tag3 (("State", 837), 0, (Tag1 ([Tag1 (("t", 839), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/random.mli", 100, 4377, 4379), ("src/random.mli", 100, 4377, 4385), 0), 0, 0, 0, Tag1 ("Base__Random", 17)), 1, 0); (("default", 840), ((Tag3 ((("t", 839)), 0, (0)), 100000000, 0, -155), 0, (("src/random.mli", 104, 4555, 4557), ("src/random.mli", 104, 4555, 4572), 0), 0, Tag1 ("Base__Random", 18)), 0); (("make", 841), ((Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -154)], (0)), 100000000, 0, -153), (Tag3 ((("t", 839)), 0, (0)), 100000000, 0, -152), 0), 100000000, 0, -151), 0, (("src/random.mli", 107, 4643, 4645), ("src/random.mli", 107, 4643, 4670), 0), 0, Tag1 ("Base__Random", 19)), 0); (("make_self_init", 842), ((Tag1 (Tag1 ("allow_in_tests"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -150)], (0)), 100000000, 0, -149), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -148), (Tag3 ((("t", 839)), 0, (0)), 100000000, 0, -147), 0), 100000000, 0, -146), 0), 100000000, 0, -145), 0, (("src/random.mli", 110, 4762, 4764), ("src/random.mli", 110, 4762, 4818), 0), 0, Tag1 ("Base__Random", 20)), 0); (("copy", 843), ((Tag1 (0, (Tag3 ((("t", 839)), 0, (0)), 100000000, 0, -144), (Tag3 ((("t", 839)), 0, (0)), 100000000, 0, -143), 0), 100000000, 0, -142), 0, (("src/random.mli", 112, 4820, 4822), ("src/random.mli", 112, 4820, 4839), 0), 0, Tag1 ("Base__Random", 21)), 0); (("bits", 844), ((Tag1 (0, (Tag3 ((("t", 839)), 0, (0)), 100000000, 0, -141), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -140), 0), 100000000, 0, -139), 0, (("src/random.mli", 117, 4994, 4996), ("src/random.mli", 117, 4994, 5015), 0), 0, Tag1 ("Base__Random", 22)), 0); (("int", 845), ((Tag1 (0, (Tag3 ((("t", 839)), 0, (0)), 100000000, 0, -138), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -137), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -136), 0), 100000000, 0, -135), 0), 100000000, 0, -134), 0, (("src/random.mli", 118, 5016, 5018), ("src/random.mli", 118, 5016, 5043), 0), 0, Tag1 ("Base__Random", 23)), 0); (("int32", 846), ((Tag1 (0, (Tag3 ((("t", 839)), 0, (0)), 100000000, 0, -133), (Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -132), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -131), 0), 100000000, 0, -130), 0), 100000000, 0, -129), 0, (("src/random.mli", 119, 5044, 5046), ("src/random.mli", 119, 5044, 5077), 0), 0, Tag1 ("Base__Random", 24)), 0); (("nativeint", 847), ((Tag1 (0, (Tag3 ((("t", 839)), 0, (0)), 100000000, 0, -128), (Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -127), (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -126), 0), 100000000, 0, -125), 0), 100000000, 0, -124), 0, (("src/random.mli", 120, 5078, 5080), ("src/random.mli", 120, 5078, 5123), 0), 0, Tag1 ("Base__Random", 25)), 0); (("int64", 848), ((Tag1 (0, (Tag3 ((("t", 839)), 0, (0)), 100000000, 0, -123), (Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -122), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -121), 0), 100000000, 0, -120), 0), 100000000, 0, -119), 0, (("src/random.mli", 121, 5124, 5126), ("src/random.mli", 121, 5124, 5157), 0), 0, Tag1 ("Base__Random", 26)), 0); (("float", 849), ((Tag1 (0, (Tag3 ((("t", 839)), 0, (0)), 100000000, 0, -118), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -117), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -116), 0), 100000000, 0, -115), 0), 100000000, 0, -114), 0, (("src/random.mli", 122, 5158, 5160), ("src/random.mli", 122, 5158, 5191), 0), 0, Tag1 ("Base__Random", 27)), 0); (("int_incl", 850), ((Tag1 (0, (Tag3 ((("t", 839)), 0, (0)), 100000000, 0, -113), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -112), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -111), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -110), 0), 100000000, 0, -109), 0), 100000000, 0, -108), 0), 100000000, 0, -107), 0, (("src/random.mli", 123, 5192, 5194), ("src/random.mli", 123, 5192, 5231), 0), 0, Tag1 ("Base__Random", 28)), 0); (("int32_incl", 851), ((Tag1 (0, (Tag3 ((("t", 839)), 0, (0)), 100000000, 0, -106), (Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -105), (Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -104), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -103), 0), 100000000, 0, -102), 0), 100000000, 0, -101), 0), 100000000, 0, -100), 0, (("src/random.mli", 124, 5232, 5234), ("src/random.mli", 124, 5232, 5279), 0), 0, Tag1 ("Base__Random", 29)), 0); (("nativeint_incl", 852), ((Tag1 (0, (Tag3 ((("t", 839)), 0, (0)), 100000000, 0, -99), (Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -98), (Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -97), (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -96), 0), 100000000, 0, -95), 0), 100000000, 0, -94), 0), 100000000, 0, -93), 0, (("src/random.mli", 125, 5280, 5282), ("src/random.mli", 125, 5280, 5343), 0), 0, Tag1 ("Base__Random", 30)), 0); (("int64_incl", 853), ((Tag1 (0, (Tag3 ((("t", 839)), 0, (0)), 100000000, 0, -92), (Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -91), (Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -90), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -89), 0), 100000000, 0, -88), 0), 100000000, 0, -87), 0), 100000000, 0, -86), 0, (("src/random.mli", 126, 5344, 5346), ("src/random.mli", 126, 5344, 5391), 0), 0, Tag1 ("Base__Random", 31)), 0); (("float_range", 854), ((Tag1 (0, (Tag3 ((("t", 839)), 0, (0)), 100000000, 0, -85), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -84), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -83), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -82), 0), 100000000, 0, -81), 0), 100000000, 0, -80), 0), 100000000, 0, -79), 0, (("src/random.mli", 127, 5392, 5394), ("src/random.mli", 127, 5392, 5440), 0), 0, Tag1 ("Base__Random", 32)), 0); (("bool", 855), ((Tag1 (0, (Tag3 ((("t", 839)), 0, (0)), 100000000, 0, -78), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -77), 0), 100000000, 0, -76), 0, (("src/random.mli", 128, 5441, 5443), ("src/random.mli", 128, 5441, 5463), 0), 0, Tag1 ("Base__Random", 33)), 0); (("char", 856), ((Tag1 (0, (Tag3 ((("t", 839)), 0, (0)), 100000000, 0, -75), (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -74), 0), 100000000, 0, -73), 0, (("src/random.mli", 129, 5464, 5466), ("src/random.mli", 129, 5464, 5486), 0), 0, Tag1 ("Base__Random", 34)), 0); (("ascii", 857), ((Tag1 (0, (Tag3 ((("t", 839)), 0, (0)), 100000000, 0, -72), (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -71), 0), 100000000, 0, -70), 0, (("src/random.mli", 130, 5487, 5489), ("src/random.mli", 130, 5487, 5510), 0), 0, Tag1 ("Base__Random", 35)), 0)]), 0, (("src/random.mli", 99, 4358, 4358), ("src/random.mli", 131, 5511, 5514), 0), Tag1 ("Base__Random", 36)), 0, 0); (("set_state", 838), ((Tag1 (0, (Tag3 (Tag1 ((("State", 837)), "t"), 0, (0)), 100000000, 0, -4), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/random.mli", 134, 5584, 5584), ("src/random.mli", 134, 5584, 5615), 0), 0, Tag1 ("Base__Random", 37)), 0)], "Base__Random", [("Base__Random", (" \216\153fc\243\1430\155\211\169?\022\\\231\011")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__StdLabels", (".\193\n\229\139\017\212C-ZA\\kz-\128")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__MoreLabels", ("\248\232\248\254`<\230\241\161U\193U\1466J\238")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shadow_stdlib", ("\219zi\164\203\158e)\232\221\196\168\138x\142\018")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Base_internalhash_types", ("0\148#2\226\223\018\135\173>!\020\237\017\255\149")); ("Base__Sexp", ("\154\187\171&\209=\153[\236\250!U\174`\190T")); ("Base__Ppx_hash_lib", ("\199\141\178\193\006\209L\007^\020(\131\224sn8")); ("Base__Ppx_compare_lib", ("\243\186~\233\228\199Ah\181.\223\004e\231\129S")); ("Base__Poly0", ("\230;\143\234\255.H\132KOe7\155\\\023f")); ("Base__Import0", ("\156\129U\197Y[\\\153\017Ho\203\173\204\220\020")); ("Base__Import", ("\014\187\247\141\187\181\142g\176:s_,\181\219\209")); ("Base__Hash_intf", ("h\004P\218\1531G\127\212\208A\024\140\164iq")); ("Base__Hash", ("\206Rc\194\234{s3\248\165\024\162\203{\206\206")); ("Base__Globalize", ("<\243w~.\180\196t\159\193\174[\227\139\215G")); ("Base__Bool0", ("\177f\254p\023\143&\239\020\136\206\242~\018F\251")); ("Base__", ("p\252\007\139\128\163W\025+\0225\001\246|P\158"))], [(0)])

val set_state : State.t -> unit

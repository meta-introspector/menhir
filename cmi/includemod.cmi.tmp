type mark = Mark_both | Mark_positive | Mark_negative | Mark_neither
module Error :
  sig
    type ('elt, 'explanation) diff = {
      got : 'elt;
      expected : 'elt;
      symptom : 'explanation;
    }
    type 'elt core_diff = ('elt, unit) diff
    type functor_arg_descr =
        Anonymous
      | Named of Path.t
      | Unit
      | Empty_struct
    type core_sigitem_symptom =
        Value_descriptions of
          (Types.value_description, Includecore.value_mismatch) diff
      | Type_declarations of
          (Types.type_declaration, Includecore.type_mismatch) diff
      | Extension_constructors of
          (Types.extension_constructor,
           Includecore.extension_constructor_mismatch)
          diff
      | Class_type_declarations of
          (Types.class_type_declaration, Ctype.class_match_failure list) diff
      | Class_declarations of
          (Types.class_declaration, Ctype.class_match_failure list) diff
    type core_module_type_symptom =
        Not_an_alias
      | Not_an_identifier
      | Incompatible_aliases
      | Abstract_module_type
      | Unbound_module_path of Path.t
    type module_type_symptom =
        Mt_core of core_module_type_symptom
      | Signature of signature_symptom
      | Functor of functor_symptom
      | Invalid_module_alias of Path.t
      | After_alias_expansion of module_type_diff
    and module_type_diff = (Types.module_type, module_type_symptom) diff
    and functor_symptom =
        Params of functor_params_diff
      | Result of module_type_diff
    and ('arg, 'path) functor_param_symptom =
        Incompatible_params of 'arg * Types.functor_parameter
      | Mismatch of module_type_diff
    and arg_functor_param_symptom =
        (Types.functor_parameter, Ident.t) functor_param_symptom
    and functor_params_diff =
        (Types.functor_parameter list * Types.module_type) core_diff
    and signature_symptom = {
      env : Env.t;
      missings : Types.signature_item list;
      incompatibles : (Ident.t * sigitem_symptom) list;
      oks : (int * Typedtree.module_coercion) list;
      leftovers : (Types.signature_item * Types.signature_item * int) list;
    }
    and sigitem_symptom =
        Core of core_sigitem_symptom
      | Module_type_declaration of
          (Types.modtype_declaration, module_type_declaration_symptom) diff
      | Module_type of module_type_diff
    and module_type_declaration_symptom =
        Illegal_permutation of Typedtree.module_coercion
      | Not_greater_than of module_type_diff
      | Not_less_than of module_type_diff
      | Incomparable of { less_than : module_type_diff;
          greater_than : module_type_diff;
        }
    type all =
        In_Compilation_unit of (string, signature_symptom) diff
      | In_Signature of signature_symptom
      | In_Module_type of module_type_diff
      | In_Module_type_substitution of Ident.t *
          (Types.module_type, module_type_declaration_symptom) diff
      | In_Type_declaration of Ident.t * core_sigitem_symptom
      | In_Expansion of core_module_type_symptom
  end
type explanation = Env.t * Error.all
type field_kind =
    Field_value
  | Field_type
  | Field_exception
  | Field_typext
  | Field_module
  | Field_modtype
  | Field_class
  | Field_classtype
type field_desc = { name : string; kind : field_kind; }
val kind_of_field_desc : field_desc -> string
val field_desc : field_kind -> Ident.t -> field_desc
module FieldMap :
  sig
    type key = field_desc
    type +!'a t
    val empty : 'a t
    val add : key -> 'a -> 'a t -> 'a t
    val add_to_list : key -> 'a -> 'a list t -> 'a list t
    val update : key -> ('a option -> 'a option) -> 'a t -> 'a t
    val singleton : key -> 'a -> 'a t
    val remove : key -> 'a t -> 'a t
    val merge :
      (key -> 'a option -> 'b option -> 'c option) -> 'a t -> 'b t -> 'c t
    val union : (key -> 'a -> 'a -> 'a option) -> 'a t -> 'a t -> 'a t
    val cardinal : 'a t -> int
    val bindings : 'a t -> (key * 'a) list
    val min_binding : 'a t -> key * 'a
    val min_binding_opt : 'a t -> (key * 'a) option
    val max_binding : 'a t -> key * 'a
    val max_binding_opt : 'a t -> (key * 'a) option
    val choose : 'a t -> key * 'a
    val choose_opt : 'a t -> (key * 'a) option
    val find : key -> 'a t -> 'a
    val find_opt : key -> 'a t -> 'a option
    val find_first : (key -> bool) -> 'a t -> key * 'a
    val find_first_opt : (key -> bool) -> 'a t -> (key * 'a) option
    val find_last : (key -> bool) -> 'a t -> key * 'a
    val find_last_opt : (key -> bool) -> 'a t -> (key * 'a) option
    val iter : (key -> 'a -> unit) -> 'a t -> unit
    val fold : (key -> 'a -> 'acc -> 'acc) -> 'a t -> 'acc -> 'acc
    val map : ('a -> 'b) -> 'a t -> 'b t
    val mapi : (key -> 'a -> 'b) -> 'a t -> 'b t
    val filter : (key -> 'a -> bool) -> 'a t -> 'a t
    val filter_map : (key -> 'a -> 'b option) -> 'a t -> 'b t
    val partition : (key -> 'a -> bool) -> 'a t -> 'a t * 'a t
    val split : key -> 'a t -> 'a t * 'a option * 'a t
    val is_empty : 'a t -> bool
    val mem : key -> 'a t -> bool
    val equal : ('a -> 'a -> bool) -> 'a t -> 'a t -> bool
    val compare : ('a -> 'a -> int) -> 'a t -> 'a t -> int
    val for_all : (key -> 'a -> bool) -> 'a t -> bool
    val exists : (key -> 'a -> bool) -> 'a t -> bool
    val to_list : 'a t -> (key * 'a) list
    val of_list : (key * 'a) list -> 'a t
    val to_seq : 'a t -> (key * 'a) Seq.t
    val to_rev_seq : 'a t -> (key * 'a) Seq.t
    val to_seq_from : key -> 'a t -> (key * 'a) Seq.t
    val add_seq : (key * 'a) Seq.t -> 'a t -> 'a t
    val of_seq : (key * 'a) Seq.t -> 'a t
  end
val item_ident_name :
  Types.signature_item -> Ident.t * Location.t * field_desc
val is_runtime_component : Types.signature_item -> bool
val modtypes :
  loc:Location.t ->
  Env.t ->
  mark:mark ->
  Types.module_type -> Types.module_type -> Typedtree.module_coercion
val modtypes_with_shape :
  shape:Shape.t ->
  loc:Location.t ->
  Env.t ->
  mark:mark ->
  Types.module_type ->
  Types.module_type -> Typedtree.module_coercion * Shape.t
val strengthened_module_decl :
  loc:Location.t ->
  aliasable:bool ->
  Env.t ->
  mark:mark ->
  Types.module_declaration ->
  Path.t -> Types.module_declaration -> Typedtree.module_coercion
val check_modtype_inclusion :
  loc:Location.t ->
  Env.t ->
  Types.module_type -> Path.t -> Types.module_type -> explanation option
val check_modtype_equiv :
  loc:Location.t ->
  Env.t -> Ident.t -> Types.module_type -> Types.module_type -> unit
val signatures :
  Env.t ->
  mark:mark ->
  Types.signature -> Types.signature -> Typedtree.module_coercion
val compunit :
  Env.t ->
  mark:mark ->
  string ->
  Types.signature ->
  string -> Types.signature -> Shape.t -> Typedtree.module_coercion * Shape.t
val type_declarations :
  loc:Location.t ->
  Env.t ->
  mark:mark ->
  Ident.t -> Types.type_declaration -> Types.type_declaration -> unit
val print_coercion : Format.formatter -> Typedtree.module_coercion -> unit
type symptom =
    Missing_field of Ident.t * Location.t * string
  | Value_descriptions of Ident.t * Types.value_description *
      Types.value_description * Includecore.value_mismatch
  | Type_declarations of Ident.t * Types.type_declaration *
      Types.type_declaration * Includecore.type_mismatch
  | Extension_constructors of Ident.t * Types.extension_constructor *
      Types.extension_constructor *
      Includecore.extension_constructor_mismatch
  | Module_types of Types.module_type * Types.module_type
  | Modtype_infos of Ident.t * Types.modtype_declaration *
      Types.modtype_declaration
  | Modtype_permutation of Types.module_type * Typedtree.module_coercion
  | Interface_mismatch of string * string
  | Class_type_declarations of Ident.t * Types.class_type_declaration *
      Types.class_type_declaration * Ctype.class_match_failure list
  | Class_declarations of Ident.t * Types.class_declaration *
      Types.class_declaration * Ctype.class_match_failure list
  | Unbound_module_path of Path.t
  | Invalid_module_alias of Path.t
type pos =
    Module of Ident.t
  | Modtype of Ident.t
  | Arg of Types.functor_parameter
  | Body of Types.functor_parameter
exception Error of explanation
exception Apply_error of { loc : Location.t; env : Env.t;
            lid_app : Longident.t option; mty_f : Types.module_type;
            args : (Error.functor_arg_descr * Types.module_type) list;
          }
val expand_module_alias :
  strengthen:bool -> Env.t -> Path.t -> Types.module_type
module Functor_inclusion_diff :
  sig
    module Defs :
      sig
        type left = Types.functor_parameter
        type right = left
        type eq = Typedtree.module_coercion
        type diff =
            (Types.functor_parameter, unit) Error.functor_param_symptom
        type state
      end
    val diff :
      Env.t ->
      Types.functor_parameter list * Types.module_type ->
      Types.functor_parameter list * Types.module_type ->
      Diffing.Define(Defs).patch
  end
module Functor_app_diff :
  sig
    module Defs :
      sig
        type left = Error.functor_arg_descr * Types.module_type
        type right = Types.functor_parameter
        type eq = Typedtree.module_coercion
        type diff =
            (Error.functor_arg_descr, unit) Error.functor_param_symptom
        type state
      end
    val diff :
      Env.t ->
      f:Types.module_type ->
      args:(Error.functor_arg_descr * Types.module_type) list ->
      Diffing.Define(Defs).patch("DEBUG:rule", [Tag1 (("mark", 1589), (0, 0, Tag1 ([(("Mark_both", 475), (0), 0, (("typing/includemod.mli", 24, 1297, 1299), ("typing/includemod.mli", 24, 1297, 1310), 0), 0, Tag1 ("Includemod", 5)); (("Mark_positive", 476), (0), 0, (("typing/includemod.mli", 26, 1366, 1368), ("typing/includemod.mli", 26, 1366, 1383), 0), 0, Tag1 ("Includemod", 6)); (("Mark_negative", 477), (0), 0, (("typing/includemod.mli", 28, 1454, 1456), ("typing/includemod.mli", 28, 1454, 1471), 0), 0, Tag1 ("Includemod", 7)); (("Mark_neither", 478), (0), 0, (("typing/includemod.mli", 30, 1543, 1545), ("typing/includemod.mli", 30, 1543, 1559), 0), 0, Tag1 ("Includemod", 8))], 0), 1, 0, 0, 0, 0, 0, (("typing/includemod.mli", 23, 1285, 1285), ("typing/includemod.mli", 30, 1543, 1559), 0), 0, 1, 0, Tag1 ("Includemod", 4)), 1, 0); Tag3 (("Error", 1590), 0, (Tag1 ([Tag1 (("diff", 1615), ([((("elt")), 100000000, 0, -271); ((("explanation")), 100000000, 0, -272)], 2, [[(("got", 480), 0, ((("elt")), 100000000, 0, -271), (("typing/includemod.mli", 36, 1679, 1683), ("typing/includemod.mli", 36, 1679, 1692), 0), 0, Tag1 ("Includemod", 10)); (("expected", 481), 0, ((("elt")), 100000000, 0, -271), (("typing/includemod.mli", 37, 1693, 1697), ("typing/includemod.mli", 37, 1693, 1711), 0), 0, Tag1 ("Includemod", 11)); (("symptom", 482), 0, ((("explanation")), 100000000, 0, -272), (("typing/includemod.mli", 38, 1712, 1716), ("typing/includemod.mli", 38, 1712, 1736), 0), 0, Tag1 ("Includemod", 12))]], 1, 0, [25; 25], [0; 0], 0, 0, (("typing/includemod.mli", 35, 1643, 1645), ("typing/includemod.mli", 39, 1737, 1740), 0), 0, 0, 0, Tag1 ("Includemod", 9)), 1, 0); Tag1 (("core_diff", 1616), ([((("elt")), 100000000, 0, -269)], 1, 0, 1, ((Tag3 ((("diff", 1615)), [((("elt")), 100000000, 0, -269); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -270)], (0)), 100000000, 0, -268)), [25], [0], 0, 0, (("typing/includemod.mli", 40, 1741, 1743), ("typing/includemod.mli", 40, 1741, 1780), 0), 0, 0, 0, Tag1 ("Includemod", 13)), 1, 0); Tag1 (("functor_arg_descr", 1617), (0, 0, Tag1 ([(("Anonymous", 485), (0), 0, (("typing/includemod.mli", 43, 1809, 1813), ("typing/includemod.mli", 43, 1809, 1824), 0), 0, Tag1 ("Includemod", 15)); (("Named", 486), ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -267)]), 0, (("typing/includemod.mli", 44, 1825, 1829), ("typing/includemod.mli", 44, 1825, 1846), 0), 0, Tag1 ("Includemod", 16)); (("Unit", 504), (0), 0, (("typing/includemod.mli", 45, 1847, 1851), ("typing/includemod.mli", 45, 1847, 1857), 0), 0, Tag1 ("Includemod", 17)); (("Empty_struct", 505), (0), 0, (("typing/includemod.mli", 46, 1858, 1862), ("typing/includemod.mli", 46, 1858, 1876), 0), 0, Tag1 ("Includemod", 18))], 0), 1, 0, 0, 0, 0, 0, (("typing/includemod.mli", 42, 1782, 1784), ("typing/includemod.mli", 46, 1858, 1876), 0), 0, 0, 0, Tag1 ("Includemod", 14)), 1, 0); Tag1 (("core_sigitem_symptom", 1618), (0, 0, Tag1 ([(("Value_descriptions", 507), ([(Tag3 ((("diff", 1615)), [(Tag3 (Tag1 ((Tag2 ("Types")), "value_description"), 0, (0)), 100000000, 0, -251); (Tag3 (Tag1 ((Tag2 ("Includecore")), "value_mismatch"), 0, (0)), 100000000, 0, -252)], (0)), 100000000, 0, -250)]), 0, (("typing/includemod.mli", 51, 2027, 2031), ("typing/includemod.mli", 52, 2055, 2121), 0), 0, Tag1 ("Includemod", 20)); (("Type_declarations", 530), ([(Tag3 ((("diff", 1615)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -254); (Tag3 (Tag1 ((Tag2 ("Includecore")), "type_mismatch"), 0, (0)), 100000000, 0, -255)], (0)), 100000000, 0, -253)]), 0, (("typing/includemod.mli", 53, 2122, 2126), ("typing/includemod.mli", 54, 2149, 2213), 0), 0, Tag1 ("Includemod", 21)); (("Extension_constructors", 531), ([(Tag3 ((("diff", 1615)), [(Tag3 (Tag1 ((Tag2 ("Types")), "extension_constructor"), 0, (0)), 100000000, 0, -257); (Tag3 (Tag1 ((Tag2 ("Includecore")), "extension_constructor_mismatch"), 0, (0)), 100000000, 0, -258)], (0)), 100000000, 0, -256)]), 0, (("typing/includemod.mli", 55, 2214, 2218), ("typing/includemod.mli", 57, 2284, 2341), 0), 0, Tag1 ("Includemod", 22)); (("Class_type_declarations", 532), ([(Tag3 ((("diff", 1615)), [(Tag3 (Tag1 ((Tag2 ("Types")), "class_type_declaration"), 0, (0)), 100000000, 0, -260); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Ctype")), "class_match_failure"), 0, (0)), 100000000, 0, -262)], (0)), 100000000, 0, -261)], (0)), 100000000, 0, -259)]), 0, (("typing/includemod.mli", 58, 2342, 2346), ("typing/includemod.mli", 59, 2375, 2450), 0), 0, Tag1 ("Includemod", 25)); (("Class_declarations", 677), ([(Tag3 ((("diff", 1615)), [(Tag3 (Tag1 ((Tag2 ("Types")), "class_declaration"), 0, (0)), 100000000, 0, -264); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Ctype")), "class_match_failure"), 0, (0)), 100000000, 0, -266)], (0)), 100000000, 0, -265)], (0)), 100000000, 0, -263)]), 0, (("typing/includemod.mli", 60, 2451, 2455), ("typing/includemod.mli", 61, 2479, 2549), 0), 0, Tag1 ("Includemod", 26))], 0), 1, 0, 0, 0, 0, 0, (("typing/includemod.mli", 50, 1997, 1999), ("typing/includemod.mli", 61, 2479, 2549), 0), 0, 0, 0, Tag1 ("Includemod", 19)), 1, 0); Tag1 (("core_module_type_symptom", 1619), (0, 0, Tag1 ([(("Not_an_alias", 679), (0), 0, (("typing/includemod.mli", 64, 2585, 2589), ("typing/includemod.mli", 64, 2585, 2603), 0), 0, Tag1 ("Includemod", 28)); (("Not_an_identifier", 680), (0), 0, (("typing/includemod.mli", 65, 2604, 2608), ("typing/includemod.mli", 65, 2604, 2627), 0), 0, Tag1 ("Includemod", 29)); (("Incompatible_aliases", 681), (0), 0, (("typing/includemod.mli", 66, 2628, 2632), ("typing/includemod.mli", 66, 2628, 2654), 0), 0, Tag1 ("Includemod", 30)); (("Abstract_module_type", 682), (0), 0, (("typing/includemod.mli", 67, 2655, 2659), ("typing/includemod.mli", 67, 2655, 2681), 0), 0, Tag1 ("Includemod", 31)); (("Unbound_module_path", 683), ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -249)]), 0, (("typing/includemod.mli", 68, 2682, 2686), ("typing/includemod.mli", 68, 2682, 2717), 0), 0, Tag1 ("Includemod", 32))], 0), 1, 0, 0, 0, 0, 0, (("typing/includemod.mli", 63, 2551, 2553), ("typing/includemod.mli", 68, 2682, 2717), 0), 0, 0, 0, Tag1 ("Includemod", 27)), 1, 0); Tag1 (("module_type_symptom", 1620), (0, 0, Tag1 ([(("Mt_core", 693), ([(Tag3 ((("core_module_type_symptom", 1619)), 0, (0)), 100000000, 0, -244)]), 0, (("typing/includemod.mli", 71, 2748, 2752), ("typing/includemod.mli", 71, 2748, 2789), 0), 0, Tag1 ("Includemod", 42)); (("Signature", 694), ([(Tag3 ((("signature_symptom", 1626)), 0, (0)), 100000000, 0, -245)]), 0, (("typing/includemod.mli", 72, 2790, 2794), ("typing/includemod.mli", 72, 2790, 2826), 0), 0, Tag1 ("Includemod", 43)); (("Functor", 695), ([(Tag3 ((("functor_symptom", 1622)), 0, (0)), 100000000, 0, -246)]), 0, (("typing/includemod.mli", 73, 2827, 2831), ("typing/includemod.mli", 73, 2827, 2859), 0), 0, Tag1 ("Includemod", 44)); (("Invalid_module_alias", 696), ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -247)]), 0, (("typing/includemod.mli", 74, 2860, 2864), ("typing/includemod.mli", 74, 2860, 2896), 0), 0, Tag1 ("Includemod", 45)); (("After_alias_expansion", 697), ([(Tag3 ((("module_type_diff", 1621)), 0, (0)), 100000000, 0, -248)]), 0, (("typing/includemod.mli", 75, 2897, 2901), ("typing/includemod.mli", 75, 2897, 2944), 0), 0, Tag1 ("Includemod", 46))], 0), 1, 0, 0, 0, 0, 0, (("typing/includemod.mli", 70, 2719, 2721), ("typing/includemod.mli", 75, 2897, 2944), 0), 0, 0, 0, Tag1 ("Includemod", 33)), 1, 0); Tag1 (("module_type_diff", 1621), (0, 0, 0, 1, ((Tag3 ((("diff", 1615)), [(Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -242); (Tag3 ((("module_type_symptom", 1620)), 0, (0)), 100000000, 0, -243)], (0)), 100000000, 0, -241)), 0, 0, 0, 0, (("typing/includemod.mli", 78, 2947, 2949), ("typing/includemod.mli", 78, 2947, 3017), 0), 0, 0, 0, Tag1 ("Includemod", 34)), 2, 0); Tag1 (("functor_symptom", 1622), (0, 0, Tag1 ([(("Params", 698), ([(Tag3 ((("functor_params_diff", 1625)), 0, (0)), 100000000, 0, -239)]), 0, (("typing/includemod.mli", 81, 3043, 3047), ("typing/includemod.mli", 81, 3043, 3078), 0), 0, Tag1 ("Includemod", 47)); (("Result", 699), ([(Tag3 ((("module_type_diff", 1621)), 0, (0)), 100000000, 0, -240)]), 0, (("typing/includemod.mli", 82, 3079, 3083), ("typing/includemod.mli", 82, 3079, 3111), 0), 0, Tag1 ("Includemod", 48))], 0), 1, 0, 0, 0, 0, 0, (("typing/includemod.mli", 80, 3019, 3021), ("typing/includemod.mli", 82, 3079, 3111), 0), 0, 0, 0, Tag1 ("Includemod", 35)), 2, 0); Tag1 (("functor_param_symptom", 1623), ([((("arg")), 100000000, 0, -235); ((("path")), 100000000, 0, -238)], 2, Tag1 ([(("Incompatible_params", 700), ([((("arg")), 100000000, 0, -235); (Tag3 (Tag1 ((Tag2 ("Types")), "functor_parameter"), 0, (0)), 100000000, 0, -236)]), 0, (("typing/includemod.mli", 85, 3156, 3160), ("typing/includemod.mli", 85, 3156, 3215), 0), 0, Tag1 ("Includemod", 49)); (("Mismatch", 701), ([(Tag3 ((("module_type_diff", 1621)), 0, (0)), 100000000, 0, -237)]), 0, (("typing/includemod.mli", 86, 3216, 3220), ("typing/includemod.mli", 86, 3216, 3250), 0), 0, Tag1 ("Includemod", 50))], 0), 1, 0, [25; 8], [0; 0], 0, 0, (("typing/includemod.mli", 84, 3113, 3115), ("typing/includemod.mli", 86, 3216, 3250), 0), 0, 0, 0, Tag1 ("Includemod", 36)), 2, 0); Tag1 (("arg_functor_param_symptom", 1624), (0, 0, 0, 1, ((Tag3 ((("functor_param_symptom", 1623)), [(Tag3 (Tag1 ((Tag2 ("Types")), "functor_parameter"), 0, (0)), 100000000, 0, -233); (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -234)], (0)), 100000000, 0, -232)), 0, 0, 0, 0, (("typing/includemod.mli", 88, 3252, 3254), ("typing/includemod.mli", 89, 3286, 3346), 0), 0, 0, 0, Tag1 ("Includemod", 37)), 2, 0); Tag1 (("functor_params_diff", 1625), (0, 0, 0, 1, ((Tag3 ((("core_diff", 1616)), [(Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "functor_parameter"), 0, (0)), 100000000, 0, -230)], (0)), 100000000, 0, -229); (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -231)]), 100000000, 0, -228)], (0)), 100000000, 0, -227)), 0, 0, 0, 0, (("typing/includemod.mli", 91, 3348, 3350), ("typing/includemod.mli", 92, 3376, 3440), 0), 0, 0, 0, Tag1 ("Includemod", 38)), 2, 0); Tag1 (("signature_symptom", 1626), (0, 0, [[(("env", 909), 0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -211), (("typing/includemod.mli", 95, 3470, 3474), ("typing/includemod.mli", 95, 3470, 3485), 0), 0, Tag1 ("Includemod", 51)); (("missings", 910), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "signature_item"), 0, (0)), 100000000, 0, -213)], (0)), 100000000, 0, -212), (("typing/includemod.mli", 96, 3486, 3490), ("typing/includemod.mli", 96, 3486, 3526), 0), 0, Tag1 ("Includemod", 52)); (("incompatibles", 911), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -216); (Tag3 ((("sigitem_symptom", 1627)), 0, (0)), 100000000, 0, -217)]), 100000000, 0, -215)], (0)), 100000000, 0, -214), (("typing/includemod.mli", 97, 3527, 3531), ("typing/includemod.mli", 97, 3527, 3579), 0), 0, Tag1 ("Includemod", 53)); (("oks", 912), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -220); (Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_coercion"), 0, (0)), 100000000, 0, -221)]), 100000000, 0, -219)], (0)), 100000000, 0, -218), (("typing/includemod.mli", 98, 3580, 3584), ("typing/includemod.mli", 98, 3580, 3628), 0), 0, Tag1 ("Includemod", 54)); (("leftovers", 913), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Types")), "signature_item"), 0, (0)), 100000000, 0, -224); (Tag3 (Tag1 ((Tag2 ("Types")), "signature_item"), 0, (0)), 100000000, 0, -225); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -226)]), 100000000, 0, -223)], (0)), 100000000, 0, -222), (("typing/includemod.mli", 99, 3629, 3633), ("typing/includemod.mli", 99, 3629, 3692), 0), 0, Tag1 ("Includemod", 55))]], 1, 0, 0, 0, 0, 0, (("typing/includemod.mli", 94, 3442, 3444), ("typing/includemod.mli", 101, 3770, 3773), 0), 0, 0, 0, Tag1 ("Includemod", 39)), 2, 0); Tag1 (("sigitem_symptom", 1627), (0, 0, Tag1 ([(("Core", 914), ([(Tag3 ((("core_sigitem_symptom", 1618)), 0, (0)), 100000000, 0, -206)]), 0, (("typing/includemod.mli", 103, 3798, 3802), ("typing/includemod.mli", 103, 3798, 3832), 0), 0, Tag1 ("Includemod", 56)); (("Module_type_declaration", 915), ([(Tag3 ((("diff", 1615)), [(Tag3 (Tag1 ((Tag2 ("Types")), "modtype_declaration"), 0, (0)), 100000000, 0, -208); (Tag3 ((("module_type_declaration_symptom", 1628)), 0, (0)), 100000000, 0, -209)], (0)), 100000000, 0, -207)]), 0, (("typing/includemod.mli", 104, 3833, 3837), ("typing/includemod.mli", 105, 3866, 3939), 0), 0, Tag1 ("Includemod", 57)); (("Module_type", 916), ([(Tag3 ((("module_type_diff", 1621)), 0, (0)), 100000000, 0, -210)]), 0, (("typing/includemod.mli", 106, 3940, 3944), ("typing/includemod.mli", 106, 3940, 3977), 0), 0, Tag1 ("Includemod", 58))], 0), 1, 0, 0, 0, 0, 0, (("typing/includemod.mli", 102, 3774, 3776), ("typing/includemod.mli", 106, 3940, 3977), 0), 0, 0, 0, Tag1 ("Includemod", 40)), 2, 0); Tag1 (("module_type_declaration_symptom", 1628), (0, 0, Tag1 ([(("Illegal_permutation", 917), ([(Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_coercion"), 0, (0)), 100000000, 0, -201)]), 0, (("typing/includemod.mli", 109, 4019, 4023), ("typing/includemod.mli", 109, 4019, 4073), 0), 0, Tag1 ("Includemod", 59)); (("Not_greater_than", 918), ([(Tag3 ((("module_type_diff", 1621)), 0, (0)), 100000000, 0, -202)]), 0, (("typing/includemod.mli", 110, 4074, 4078), ("typing/includemod.mli", 110, 4074, 4116), 0), 0, Tag1 ("Includemod", 60)); (("Not_less_than", 919), ([(Tag3 ((("module_type_diff", 1621)), 0, (0)), 100000000, 0, -203)]), 0, (("typing/includemod.mli", 111, 4117, 4121), ("typing/includemod.mli", 111, 4117, 4156), 0), 0, Tag1 ("Includemod", 61)); (("Incomparable", 920), Tag1 ([(("less_than", 921), 0, (Tag3 ((("module_type_diff", 1621)), 0, (0)), 100000000, 0, -204), (("typing/includemod.mli", 113, 4179, 4188), ("typing/includemod.mli", 113, 4179, 4215), 0), 0, Tag1 ("Includemod", 62)); (("greater_than", 922), 0, (Tag3 ((("module_type_diff", 1621)), 0, (0)), 100000000, 0, -205), (("typing/includemod.mli", 113, 4179, 4216), ("typing/includemod.mli", 113, 4179, 4246), 0), 0, Tag1 ("Includemod", 63))]), 0, (("typing/includemod.mli", 112, 4157, 4161), ("typing/includemod.mli", 113, 4179, 4247), 0), 0, Tag1 ("Includemod", 64))], 0), 1, 0, 0, 0, 0, 0, (("typing/includemod.mli", 108, 3979, 3981), ("typing/includemod.mli", 113, 4179, 4247), 0), 0, 0, 0, Tag1 ("Includemod", 41)), 2, 0); Tag1 (("all", 1629), (0, 0, Tag1 ([(("In_Compilation_unit", 924), ([(Tag3 ((("diff", 1615)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -190); (Tag3 ((("signature_symptom", 1626)), 0, (0)), 100000000, 0, -191)], (0)), 100000000, 0, -189)]), 0, (("typing/includemod.mli", 117, 4263, 4267), ("typing/includemod.mli", 117, 4263, 4324), 0), 0, Tag1 ("Includemod", 72)); (("In_Signature", 925), ([(Tag3 ((("signature_symptom", 1626)), 0, (0)), 100000000, 0, -192)]), 0, (("typing/includemod.mli", 118, 4325, 4329), ("typing/includemod.mli", 118, 4325, 4364), 0), 0, Tag1 ("Includemod", 73)); (("In_Module_type", 926), ([(Tag3 ((("module_type_diff", 1621)), 0, (0)), 100000000, 0, -193)]), 0, (("typing/includemod.mli", 119, 4365, 4369), ("typing/includemod.mli", 119, 4365, 4405), 0), 0, Tag1 ("Includemod", 74)); (("In_Module_type_substitution", 927), ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -194); (Tag3 ((("diff", 1615)), [(Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -196); (Tag3 ((("module_type_declaration_symptom", 1628)), 0, (0)), 100000000, 0, -197)], (0)), 100000000, 0, -195)]), 0, (("typing/includemod.mli", 120, 4406, 4410), ("typing/includemod.mli", 121, 4443, 4517), 0), 0, Tag1 ("Includemod", 75)); (("In_Type_declaration", 928), ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -198); (Tag3 ((("core_sigitem_symptom", 1618)), 0, (0)), 100000000, 0, -199)]), 0, (("typing/includemod.mli", 122, 4518, 4522), ("typing/includemod.mli", 122, 4518, 4577), 0), 0, Tag1 ("Includemod", 76)); (("In_Expansion", 929), ([(Tag3 ((("core_module_type_symptom", 1619)), 0, (0)), 100000000, 0, -200)]), 0, (("typing/includemod.mli", 123, 4578, 4582), ("typing/includemod.mli", 123, 4578, 4624), 0), 0, Tag1 ("Includemod", 77))], 0), 1, 0, 0, 0, 0, 0, (("typing/includemod.mli", 116, 4250, 4252), ("typing/includemod.mli", 123, 4578, 4624), 0), 0, 0, 0, Tag1 ("Includemod", 71)), 1, 0)]), 0, (("typing/includemod.mli", 33, 1624, 1624), ("typing/includemod.mli", 124, 4625, 4628), 0), Tag1 ("Includemod", 78)), 0, 0); Tag1 (("explanation", 1591), (0, 0, 0, 1, ((Tag2 ([(Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -187); (Tag3 (Tag1 ((("Error", 1590)), "all"), 0, (0)), 100000000, 0, -188)]), 100000000, 0, -186)), 0, 0, 0, 0, (("typing/includemod.mli", 125, 4629, 4629), ("typing/includemod.mli", 125, 4629, 4665), 0), 0, 0, 0, Tag1 ("Includemod", 79)), 1, 0); Tag1 (("field_kind", 1592), (0, 0, Tag1 ([(("Field_value", 933), (0), 0, (("typing/includemod.mli", 129, 4742, 4744), ("typing/includemod.mli", 129, 4742, 4757), 0), 0, Tag1 ("Includemod", 82)); (("Field_type", 934), (0), 0, (("typing/includemod.mli", 130, 4758, 4760), ("typing/includemod.mli", 130, 4758, 4772), 0), 0, Tag1 ("Includemod", 83)); (("Field_exception", 935), (0), 0, (("typing/includemod.mli", 131, 4773, 4775), ("typing/includemod.mli", 131, 4773, 4792), 0), 0, Tag1 ("Includemod", 84)); (("Field_typext", 936), (0), 0, (("typing/includemod.mli", 132, 4793, 4795), ("typing/includemod.mli", 132, 4793, 4809), 0), 0, Tag1 ("Includemod", 85)); (("Field_module", 937), (0), 0, (("typing/includemod.mli", 133, 4810, 4812), ("typing/includemod.mli", 133, 4810, 4826), 0), 0, Tag1 ("Includemod", 86)); (("Field_modtype", 938), (0), 0, (("typing/includemod.mli", 134, 4827, 4829), ("typing/includemod.mli", 134, 4827, 4844), 0), 0, Tag1 ("Includemod", 87)); (("Field_class", 939), (0), 0, (("typing/includemod.mli", 135, 4845, 4847), ("typing/includemod.mli", 135, 4845, 4860), 0), 0, Tag1 ("Includemod", 88)); (("Field_classtype", 940), (0), 0, (("typing/includemod.mli", 136, 4861, 4863), ("typing/includemod.mli", 136, 4861, 4880), 0), 0, Tag1 ("Includemod", 89))], 0), 1, 0, 0, 0, 0, 0, (("typing/includemod.mli", 128, 4724, 4724), ("typing/includemod.mli", 136, 4861, 4880), 0), 0, 1, 0, Tag1 ("Includemod", 81)), 1, 0); Tag1 (("field_desc", 1593), (0, 0, [[(("name", 942), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -184), (("typing/includemod.mli", 138, 4882, 4902), ("typing/includemod.mli", 138, 4882, 4915), 0), 0, Tag1 ("Includemod", 91)); (("kind", 943), 0, (Tag3 ((("field_kind", 1592)), 0, (0)), 100000000, 0, -185), (("typing/includemod.mli", 138, 4882, 4916), ("typing/includemod.mli", 138, 4882, 4932), 0), 0, Tag1 ("Includemod", 92))]], 1, 0, 0, 0, 0, 0, (("typing/includemod.mli", 138, 4882, 4882), ("typing/includemod.mli", 138, 4882, 4934), 0), 0, 0, 0, Tag1 ("Includemod", 90)), 1, 0); (("kind_of_field_desc", 1594), ((Tag1 (0, (Tag3 ((("field_desc", 1593)), 0, (0)), 100000000, 0, -183), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -182), 0), 100000000, 0, -181), 0, (("typing/includemod.mli", 140, 4936, 4936), ("typing/includemod.mli", 140, 4936, 4980), 0), 0, Tag1 ("Includemod", 93)), 0); (("field_desc", 1595), ((Tag1 (0, (Tag3 ((("field_kind", 1592)), 0, (0)), 100000000, 0, -180), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -179), (Tag3 ((("field_desc", 1593)), 0, (0)), 100000000, 0, -178), 0), 100000000, 0, -177), 0), 100000000, 0, -176), 0, (("typing/includemod.mli", 141, 4981, 4981), ("typing/includemod.mli", 141, 4981, 5032), 0), 0, Tag1 ("Includemod", 94)), 0); Tag3 (("FieldMap", 1596), 0, (Tag1 ([Tag1 (("key", 1630), (0, 0, 0, 1, ((Tag3 ((("field_desc", 1593)), 0, (0)), 100000000, 0, -601)), 0, 0, 0, 0, (("typing/includemod.mli", 146, 5177, 5205), ("typing/includemod.mli", 146, 5177, 5226), 0), 0, 0, 0, Tag1 ("Includemod", 95)), 1, 0); Tag1 (("t", 1631), ([((("a")), 100000000, 0, -600)], 1, 0, 1, 0, [9], [2], 0, 0, (("map.mli", 73, 2902, 2906), ("map.mli", 73, 2902, 2917), 0), 0, 0, 0, Tag1 ("Stdlib__Map", 4)), 1, 0); (("empty", 1632), ((Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -599)], (0)), 100000000, 0, -598), 0, (("map.mli", 76, 2977, 2981), ("map.mli", 76, 2977, 2996), 0), 0, Tag1 ("Stdlib__Map", 5)), 0); (("add", 1633), ((Tag1 (0, (Tag3 ((("key", 1630)), 0, (0)), 100000000, 0, -597), (Tag1 (0, ((("a")), 100000000, 0, -595), (Tag1 (0, (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -595)], (0)), 100000000, 0, -596), (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -595)], (0)), 100000000, 0, -594), 0), 100000000, 0, -593), 0), 100000000, 0, -592), 0), 100000000, 0, -591), 0, (("map.mli", 79, 3024, 3028), ("map.mli", 79, 3024, 3062), 0), 0, Tag1 ("Stdlib__Map", 6)), 0); (("add_to_list", 1634), ((Tag1 (0, (Tag3 ((("key", 1630)), 0, (0)), 100000000, 0, -590), (Tag1 (0, ((("a")), 100000000, 0, -587), (Tag1 (0, (Tag3 ((("t", 1631)), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -587)], (0)), 100000000, 0, -589)], (0)), 100000000, 0, -588), (Tag3 ((("t", 1631)), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -587)], (0)), 100000000, 0, -586)], (0)), 100000000, 0, -585), 0), 100000000, 0, -584), 0), 100000000, 0, -583), 0), 100000000, 0, -582), 0, (("map.mli", 88, 3503, 3507), ("map.mli", 88, 3503, 3559), 0), 0, Tag1 ("Stdlib__Map", 7)), 0); (("update", 1635), ((Tag1 (0, (Tag3 ((("key", 1630)), 0, (0)), 100000000, 0, -581), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -576)], (0)), 100000000, 0, -580), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -576)], (0)), 100000000, 0, -579), 0), 100000000, 0, -578), (Tag1 (0, (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -576)], (0)), 100000000, 0, -577), (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -576)], (0)), 100000000, 0, -575), 0), 100000000, 0, -574), 0), 100000000, 0, -573), 0), 100000000, 0, -572), 0, (("map.mli", 94, 3753, 3757), ("map.mli", 94, 3753, 3816), 0), 0, Tag1 ("Stdlib__Map", 8)), 0); (("singleton", 1636), ((Tag1 (0, (Tag3 ((("key", 1630)), 0, (0)), 100000000, 0, -571), (Tag1 (0, ((("a")), 100000000, 0, -570), (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -570)], (0)), 100000000, 0, -569), 0), 100000000, 0, -568), 0), 100000000, 0, -567), 0, (("map.mli", 106, 4436, 4440), ("map.mli", 106, 4436, 4472), 0), 0, Tag1 ("Stdlib__Map", 9)), 0); (("remove", 1637), ((Tag1 (0, (Tag3 ((("key", 1630)), 0, (0)), 100000000, 0, -566), (Tag1 (0, (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -564)], (0)), 100000000, 0, -565), (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -564)], (0)), 100000000, 0, -563), 0), 100000000, 0, -562), 0), 100000000, 0, -561), 0, (("map.mli", 111, 4594, 4598), ("map.mli", 111, 4594, 4629), 0), 0, Tag1 ("Stdlib__Map", 10)), 0); (("merge", 1638), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1630)), 0, (0)), 100000000, 0, -560), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -553)], (0)), 100000000, 0, -559), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -551)], (0)), 100000000, 0, -558), (Tag3 ((Tag3 ("option", 10)), [((("c")), 100000000, 0, -549)], (0)), 100000000, 0, -557), 0), 100000000, 0, -556), 0), 100000000, 0, -555), 0), 100000000, 0, -554), (Tag1 (0, (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -553)], (0)), 100000000, 0, -552), (Tag1 (0, (Tag3 ((("t", 1631)), [((("b")), 100000000, 0, -551)], (0)), 100000000, 0, -550), (Tag3 ((("t", 1631)), [((("c")), 100000000, 0, -549)], (0)), 100000000, 0, -548), 0), 100000000, 0, -547), 0), 100000000, 0, -546), 0), 100000000, 0, -545), 0, (("map.mli", 118, 4950, 4954), ("map.mli", 120, 5019, 5045), 0), 0, Tag1 ("Stdlib__Map", 11)), 0); (("union", 1639), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1630)), 0, (0)), 100000000, 0, -544), (Tag1 (0, ((("a")), 100000000, 0, -537), (Tag1 (0, ((("a")), 100000000, 0, -537), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -537)], (0)), 100000000, 0, -543), 0), 100000000, 0, -542), 0), 100000000, 0, -541), 0), 100000000, 0, -540), (Tag1 (0, (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -537)], (0)), 100000000, 0, -539), (Tag1 (0, (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -537)], (0)), 100000000, 0, -538), (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -537)], (0)), 100000000, 0, -536), 0), 100000000, 0, -535), 0), 100000000, 0, -534), 0), 100000000, 0, -533), 0, (("map.mli", 129, 5475, 5479), ("map.mli", 129, 5475, 5544), 0), 0, Tag1 ("Stdlib__Map", 12)), 0); (("cardinal", 1640), ((Tag1 (0, (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -532)], (0)), 100000000, 0, -531), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -530), 0), 100000000, 0, -529), 0, (("map.mli", 142, 6061, 6065), ("map.mli", 142, 6061, 6090), 0), 0, Tag1 ("Stdlib__Map", 13)), 0); (("bindings", 1641), ((Tag1 (0, (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -527)], (0)), 100000000, 0, -528), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("key", 1630)), 0, (0)), 100000000, 0, -526); ((("a")), 100000000, 0, -527)]), 100000000, 0, -525)], (0)), 100000000, 0, -524), 0), 100000000, 0, -523), 0, (("map.mli", 148, 6197, 6201), ("map.mli", 148, 6197, 6238), 0), 0, Tag1 ("Stdlib__Map", 14)), 0); (("min_binding", 1642), ((Tag1 (0, (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -521)], (0)), 100000000, 0, -522), (Tag2 ([(Tag3 ((("key", 1630)), 0, (0)), 100000000, 0, -520); ((("a")), 100000000, 0, -521)]), 100000000, 0, -519), 0), 100000000, 0, -518), 0, (("map.mli", 155, 6495, 6499), ("map.mli", 155, 6495, 6534), 0), 0, Tag1 ("Stdlib__Map", 15)), 0); (("min_binding_opt", 1643), ((Tag1 (0, (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -516)], (0)), 100000000, 0, -517), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("key", 1630)), 0, (0)), 100000000, 0, -515); ((("a")), 100000000, 0, -516)]), 100000000, 0, -514)], (0)), 100000000, 0, -513), 0), 100000000, 0, -512), 0, (("map.mli", 161, 6727, 6731), ("map.mli", 161, 6727, 6777), 0), 0, Tag1 ("Stdlib__Map", 16)), 0); (("max_binding", 1644), ((Tag1 (0, (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -510)], (0)), 100000000, 0, -511), (Tag2 ([(Tag3 ((("key", 1630)), 0, (0)), 100000000, 0, -509); ((("a")), 100000000, 0, -510)]), 100000000, 0, -508), 0), 100000000, 0, -507), 0, (("map.mli", 167, 6961, 6965), ("map.mli", 167, 6961, 7000), 0), 0, Tag1 ("Stdlib__Map", 17)), 0); (("max_binding_opt", 1645), ((Tag1 (0, (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -505)], (0)), 100000000, 0, -506), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("key", 1630)), 0, (0)), 100000000, 0, -504); ((("a")), 100000000, 0, -505)]), 100000000, 0, -503)], (0)), 100000000, 0, -502), 0), 100000000, 0, -501), 0, (("map.mli", 172, 7128, 7132), ("map.mli", 172, 7128, 7178), 0), 0, Tag1 ("Stdlib__Map", 18)), 0); (("choose", 1646), ((Tag1 (0, (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -499)], (0)), 100000000, 0, -500), (Tag2 ([(Tag3 ((("key", 1630)), 0, (0)), 100000000, 0, -498); ((("a")), 100000000, 0, -499)]), 100000000, 0, -497), 0), 100000000, 0, -496), 0, (("map.mli", 177, 7310, 7314), ("map.mli", 177, 7310, 7344), 0), 0, Tag1 ("Stdlib__Map", 19)), 0); (("choose_opt", 1647), ((Tag1 (0, (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -494)], (0)), 100000000, 0, -495), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("key", 1630)), 0, (0)), 100000000, 0, -493); ((("a")), 100000000, 0, -494)]), 100000000, 0, -492)], (0)), 100000000, 0, -491), 0), 100000000, 0, -490), 0, (("map.mli", 183, 7562, 7566), ("map.mli", 183, 7562, 7607), 0), 0, Tag1 ("Stdlib__Map", 20)), 0); (("find", 1648), ((Tag1 (0, (Tag3 ((("key", 1630)), 0, (0)), 100000000, 0, -489), (Tag1 (0, (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -487)], (0)), 100000000, 0, -488), ((("a")), 100000000, 0, -487), 0), 100000000, 0, -486), 0), 100000000, 0, -485), 0, (("map.mli", 191, 7850, 7854), ("map.mli", 191, 7850, 7881), 0), 0, Tag1 ("Stdlib__Map", 21)), 0); (("find_opt", 1649), ((Tag1 (0, (Tag3 ((("key", 1630)), 0, (0)), 100000000, 0, -484), (Tag1 (0, (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -482)], (0)), 100000000, 0, -483), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -482)], (0)), 100000000, 0, -481), 0), 100000000, 0, -480), 0), 100000000, 0, -479), 0, (("map.mli", 195, 8006, 8010), ("map.mli", 195, 8006, 8048), 0), 0, Tag1 ("Stdlib__Map", 22)), 0); (("find_first", 1650), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1630)), 0, (0)), 100000000, 0, -478), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -477), 0), 100000000, 0, -476), (Tag1 (0, (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -474)], (0)), 100000000, 0, -475), (Tag2 ([(Tag3 ((("key", 1630)), 0, (0)), 100000000, 0, -473); ((("a")), 100000000, 0, -474)]), 100000000, 0, -472), 0), 100000000, 0, -471), 0), 100000000, 0, -470), 0, (("map.mli", 200, 8204, 8208), ("map.mli", 200, 8204, 8257), 0), 0, Tag1 ("Stdlib__Map", 23)), 0); (("find_first_opt", 1651), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1630)), 0, (0)), 100000000, 0, -469), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -468), 0), 100000000, 0, -467), (Tag1 (0, (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -465)], (0)), 100000000, 0, -466), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("key", 1630)), 0, (0)), 100000000, 0, -464); ((("a")), 100000000, 0, -465)]), 100000000, 0, -463)], (0)), 100000000, 0, -462), 0), 100000000, 0, -461), 0), 100000000, 0, -460), 0, (("map.mli", 212, 8743, 8747), ("map.mli", 212, 8743, 8809), 0), 0, Tag1 ("Stdlib__Map", 24)), 0); (("find_last", 1652), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1630)), 0, (0)), 100000000, 0, -459), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -458), 0), 100000000, 0, -457), (Tag1 (0, (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -455)], (0)), 100000000, 0, -456), (Tag2 ([(Tag3 ((("key", 1630)), 0, (0)), 100000000, 0, -454); ((("a")), 100000000, 0, -455)]), 100000000, 0, -453), 0), 100000000, 0, -452), 0), 100000000, 0, -451), 0, (("map.mli", 218, 9052, 9056), ("map.mli", 218, 9052, 9104), 0), 0, Tag1 ("Stdlib__Map", 25)), 0); (("find_last_opt", 1653), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1630)), 0, (0)), 100000000, 0, -450), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -449), 0), 100000000, 0, -448), (Tag1 (0, (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -446)], (0)), 100000000, 0, -447), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("key", 1630)), 0, (0)), 100000000, 0, -445); ((("a")), 100000000, 0, -446)]), 100000000, 0, -444)], (0)), 100000000, 0, -443), 0), 100000000, 0, -442), 0), 100000000, 0, -441), 0, (("map.mli", 224, 9334, 9338), ("map.mli", 224, 9334, 9399), 0), 0, Tag1 ("Stdlib__Map", 26)), 0); (("iter", 1654), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1630)), 0, (0)), 100000000, 0, -440), (Tag1 (0, ((("a")), 100000000, 0, -436), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -439), 0), 100000000, 0, -438), 0), 100000000, 0, -437), (Tag1 (0, (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -436)], (0)), 100000000, 0, -435), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -434), 0), 100000000, 0, -433), 0), 100000000, 0, -432), 0, (("map.mli", 233, 9688, 9692), ("map.mli", 233, 9688, 9737), 0), 0, Tag1 ("Stdlib__Map", 27)), 0); (("fold", 1655), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1630)), 0, (0)), 100000000, 0, -431), (Tag1 (0, ((("a")), 100000000, 0, -427), (Tag1 (0, ((("acc")), 100000000, 0, -425), ((("acc")), 100000000, 0, -425), 0), 100000000, 0, -430), 0), 100000000, 0, -429), 0), 100000000, 0, -428), (Tag1 (0, (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -427)], (0)), 100000000, 0, -426), (Tag1 (0, ((("acc")), 100000000, 0, -425), ((("acc")), 100000000, 0, -425), 0), 100000000, 0, -424), 0), 100000000, 0, -423), 0), 100000000, 0, -422), 0, (("map.mli", 239, 10018, 10022), ("map.mli", 240, 10032, 10089), 0), 0, Tag1 ("Stdlib__Map", 28)), 0); (("map", 1656), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -420), ((("b")), 100000000, 0, -418), 0), 100000000, 0, -421), (Tag1 (0, (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -420)], (0)), 100000000, 0, -419), (Tag3 ((("t", 1631)), [((("b")), 100000000, 0, -418)], (0)), 100000000, 0, -417), 0), 100000000, 0, -416), 0), 100000000, 0, -415), 0, (("map.mli", 247, 10338, 10342), ("map.mli", 247, 10338, 10377), 0), 0, Tag1 ("Stdlib__Map", 29)), 0); (("mapi", 1657), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1630)), 0, (0)), 100000000, 0, -414), (Tag1 (0, ((("a")), 100000000, 0, -411), ((("b")), 100000000, 0, -409), 0), 100000000, 0, -413), 0), 100000000, 0, -412), (Tag1 (0, (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -411)], (0)), 100000000, 0, -410), (Tag3 ((("t", 1631)), [((("b")), 100000000, 0, -409)], (0)), 100000000, 0, -408), 0), 100000000, 0, -407), 0), 100000000, 0, -406), 0, (("map.mli", 254, 10698, 10702), ("map.mli", 254, 10698, 10745), 0), 0, Tag1 ("Stdlib__Map", 30)), 0); (("filter", 1658), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1630)), 0, (0)), 100000000, 0, -405), (Tag1 (0, ((("a")), 100000000, 0, -400), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -404), 0), 100000000, 0, -403), 0), 100000000, 0, -402), (Tag1 (0, (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -400)], (0)), 100000000, 0, -401), (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -400)], (0)), 100000000, 0, -399), 0), 100000000, 0, -398), 0), 100000000, 0, -397), 0, (("map.mli", 258, 10888, 10892), ("map.mli", 258, 10888, 10939), 0), 0, Tag1 ("Stdlib__Map", 31)), 0); (("filter_map", 1659), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1630)), 0, (0)), 100000000, 0, -396), (Tag1 (0, ((("a")), 100000000, 0, -392), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -390)], (0)), 100000000, 0, -395), 0), 100000000, 0, -394), 0), 100000000, 0, -393), (Tag1 (0, (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -392)], (0)), 100000000, 0, -391), (Tag3 ((("t", 1631)), [((("b")), 100000000, 0, -390)], (0)), 100000000, 0, -389), 0), 100000000, 0, -388), 0), 100000000, 0, -387), 0, (("map.mli", 266, 11264, 11268), ("map.mli", 266, 11264, 11324), 0), 0, Tag1 ("Stdlib__Map", 32)), 0); (("partition", 1660), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1630)), 0, (0)), 100000000, 0, -386), (Tag1 (0, ((("a")), 100000000, 0, -380), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -385), 0), 100000000, 0, -384), 0), 100000000, 0, -383), (Tag1 (0, (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -380)], (0)), 100000000, 0, -382), (Tag2 ([(Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -380)], (0)), 100000000, 0, -379); (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -380)], (0)), 100000000, 0, -381)]), 100000000, 0, -378), 0), 100000000, 0, -377), 0), 100000000, 0, -376), 0, (("map.mli", 285, 12005, 12009), ("map.mli", 285, 12005, 12066), 0), 0, Tag1 ("Stdlib__Map", 33)), 0); (("split", 1661), ((Tag1 (0, (Tag3 ((("key", 1630)), 0, (0)), 100000000, 0, -375), (Tag1 (0, (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -371)], (0)), 100000000, 0, -374), (Tag2 ([(Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -371)], (0)), 100000000, 0, -370); (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -371)], (0)), 100000000, 0, -372); (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -371)], (0)), 100000000, 0, -373)]), 100000000, 0, -369), 0), 100000000, 0, -368), 0), 100000000, 0, -367), 0, (("map.mli", 292, 12324, 12328), ("map.mli", 292, 12324, 12377), 0), 0, Tag1 ("Stdlib__Map", 34)), 0); (("is_empty", 1662), ((Tag1 (0, (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -366)], (0)), 100000000, 0, -365), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -364), 0), 100000000, 0, -363), 0, (("map.mli", 304, 12826, 12830), ("map.mli", 304, 12826, 12856), 0), 0, Tag1 ("Stdlib__Map", 35)), 0); (("mem", 1663), ((Tag1 (0, (Tag3 ((("key", 1630)), 0, (0)), 100000000, 0, -362), (Tag1 (0, (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -361)], (0)), 100000000, 0, -360), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -359), 0), 100000000, 0, -358), 0), 100000000, 0, -357), 0, (("map.mli", 307, 12905, 12909), ("map.mli", 307, 12905, 12937), 0), 0, Tag1 ("Stdlib__Map", 36)), 0); (("equal", 1664), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -352), (Tag1 (0, ((("a")), 100000000, 0, -352), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -356), 0), 100000000, 0, -355), 0), 100000000, 0, -354), (Tag1 (0, (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -352)], (0)), 100000000, 0, -353), (Tag1 (0, (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -352)], (0)), 100000000, 0, -351), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -350), 0), 100000000, 0, -349), 0), 100000000, 0, -348), 0), 100000000, 0, -347), 0, (("map.mli", 311, 13041, 13045), ("map.mli", 311, 13041, 13098), 0), 0, Tag1 ("Stdlib__Map", 37)), 0); (("compare", 1665), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -342), (Tag1 (0, ((("a")), 100000000, 0, -342), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -346), 0), 100000000, 0, -345), 0), 100000000, 0, -344), (Tag1 (0, (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -342)], (0)), 100000000, 0, -343), (Tag1 (0, (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -342)], (0)), 100000000, 0, -341), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -340), 0), 100000000, 0, -339), 0), 100000000, 0, -338), 0), 100000000, 0, -337), 0, (("map.mli", 317, 13349, 13353), ("map.mli", 317, 13349, 13406), 0), 0, Tag1 ("Stdlib__Map", 38)), 0); (("for_all", 1666), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1630)), 0, (0)), 100000000, 0, -336), (Tag1 (0, ((("a")), 100000000, 0, -332), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -335), 0), 100000000, 0, -334), 0), 100000000, 0, -333), (Tag1 (0, (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -332)], (0)), 100000000, 0, -331), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -330), 0), 100000000, 0, -329), 0), 100000000, 0, -328), 0, (("map.mli", 321, 13561, 13565), ("map.mli", 321, 13561, 13613), 0), 0, Tag1 ("Stdlib__Map", 39)), 0); (("exists", 1667), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1630)), 0, (0)), 100000000, 0, -327), (Tag1 (0, ((("a")), 100000000, 0, -323), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -326), 0), 100000000, 0, -325), 0), 100000000, 0, -324), (Tag1 (0, (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -323)], (0)), 100000000, 0, -322), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -321), 0), 100000000, 0, -320), 0), 100000000, 0, -319), 0, (("map.mli", 326, 13733, 13737), ("map.mli", 326, 13733, 13784), 0), 0, Tag1 ("Stdlib__Map", 40)), 0); (("to_list", 1668), ((Tag1 (0, (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -317)], (0)), 100000000, 0, -318), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("key", 1630)), 0, (0)), 100000000, 0, -316); ((("a")), 100000000, 0, -317)]), 100000000, 0, -315)], (0)), 100000000, 0, -314), 0), 100000000, 0, -313), 0, (("map.mli", 333, 13947, 13951), ("map.mli", 333, 13947, 13988), 0), 0, Tag1 ("Stdlib__Map", 41)), 0); (("of_list", 1669), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("key", 1630)), 0, (0)), 100000000, 0, -312); ((("a")), 100000000, 0, -309)]), 100000000, 0, -311)], (0)), 100000000, 0, -310), (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -309)], (0)), 100000000, 0, -308), 0), 100000000, 0, -307), 0, (("map.mli", 337, 14052, 14056), ("map.mli", 337, 14052, 14093), 0), 0, Tag1 ("Stdlib__Map", 42)), 0); (("to_seq", 1670), ((Tag1 (0, (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -305)], (0)), 100000000, 0, -306), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 1630)), 0, (0)), 100000000, 0, -304); ((("a")), 100000000, 0, -305)]), 100000000, 0, -303)], (0)), 100000000, 0, -302), 0), 100000000, 0, -301), 0, (("map.mli", 343, 14271, 14275), ("map.mli", 343, 14271, 14312), 0), 0, Tag1 ("Stdlib__Map", 43)), 0); (("to_rev_seq", 1671), ((Tag1 (0, (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -299)], (0)), 100000000, 0, -300), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 1630)), 0, (0)), 100000000, 0, -298); ((("a")), 100000000, 0, -299)]), 100000000, 0, -297)], (0)), 100000000, 0, -296), 0), 100000000, 0, -295), 0, (("map.mli", 347, 14398, 14402), ("map.mli", 347, 14398, 14443), 0), 0, Tag1 ("Stdlib__Map", 44)), 0); (("to_seq_from", 1672), ((Tag1 (0, (Tag3 ((("key", 1630)), 0, (0)), 100000000, 0, -294), (Tag1 (0, (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -292)], (0)), 100000000, 0, -293), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 1630)), 0, (0)), 100000000, 0, -291); ((("a")), 100000000, 0, -292)]), 100000000, 0, -290)], (0)), 100000000, 0, -289), 0), 100000000, 0, -288), 0), 100000000, 0, -287), 0, (("map.mli", 351, 14530, 14534), ("map.mli", 351, 14530, 14583), 0), 0, Tag1 ("Stdlib__Map", 45)), 0); (("add_seq", 1673), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 1630)), 0, (0)), 100000000, 0, -286); ((("a")), 100000000, 0, -282)]), 100000000, 0, -285)], (0)), 100000000, 0, -284), (Tag1 (0, (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -282)], (0)), 100000000, 0, -283), (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -282)], (0)), 100000000, 0, -281), 0), 100000000, 0, -280), 0), 100000000, 0, -279), 0, (("map.mli", 356, 14738, 14742), ("map.mli", 356, 14738, 14788), 0), 0, Tag1 ("Stdlib__Map", 46)), 0); (("of_seq", 1674), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 1630)), 0, (0)), 100000000, 0, -278); ((("a")), 100000000, 0, -275)]), 100000000, 0, -277)], (0)), 100000000, 0, -276), (Tag3 ((("t", 1631)), [((("a")), 100000000, 0, -275)], (0)), 100000000, 0, -274), 0), 100000000, 0, -273), 0, (("map.mli", 360, 14866, 14870), ("map.mli", 360, 14866, 14907), 0), 0, Tag1 ("Stdlib__Map", 47)), 0)]), 0, (("typing/includemod.mli", 146, 5177, 5177), ("typing/includemod.mli", 146, 5177, 5226), 0), Tag1 ("Includemod", 96)), 0, 0); (("item_ident_name", 1597), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "signature_item"), 0, (0)), 100000000, 0, -175), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -172); (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -173); (Tag3 ((("field_desc", 1593)), 0, (0)), 100000000, 0, -174)]), 100000000, 0, -171), 0), 100000000, 0, -170), 0, (("typing/includemod.mli", 148, 5228, 5228), ("typing/includemod.mli", 148, 5228, 5306), 0), 0, Tag1 ("Includemod", 97)), 0); (("is_runtime_component", 1598), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "signature_item"), 0, (0)), 100000000, 0, -169), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -168), 0), 100000000, 0, -167), 0, (("typing/includemod.mli", 149, 5307, 5307), ("typing/includemod.mli", 149, 5307, 5361), 0), 0, Tag1 ("Includemod", 98)), 0); (("modtypes", 1599), ((Tag1 (("loc"), (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -166), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -165), (Tag1 (("mark"), (Tag3 ((("mark", 1589)), 0, (0)), 100000000, 0, -164), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -163), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -162), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_coercion"), 0, (0)), 100000000, 0, -161), 0), 100000000, 0, -160), 0), 100000000, 0, -159), 0), 100000000, 0, -158), 0), 100000000, 0, -157), 0), 100000000, 0, -156), 0, (("typing/includemod.mli", 154, 5384, 5384), ("typing/includemod.mli", 156, 5440, 5487), 0), 0, Tag1 ("Includemod", 99)), 0); (("modtypes_with_shape", 1600), ((Tag1 (("shape"), (Tag3 (Tag1 ((Tag2 ("Shape")), "t"), 0, (0)), 100000000, 0, -155), (Tag1 (("loc"), (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -154), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -153), (Tag1 (("mark"), (Tag3 ((("mark", 1589)), 0, (0)), 100000000, 0, -152), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -151), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -150), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_coercion"), 0, (0)), 100000000, 0, -148); (Tag3 (Tag1 ((Tag2 ("Shape")), "t"), 0, (0)), 100000000, 0, -149)]), 100000000, 0, -147), 0), 100000000, 0, -146), 0), 100000000, 0, -145), 0), 100000000, 0, -144), 0), 100000000, 0, -143), 0), 100000000, 0, -142), 0), 100000000, 0, -141), 0, (("typing/includemod.mli", 158, 5489, 5489), ("typing/includemod.mli", 160, 5573, 5630), 0), 0, Tag1 ("Includemod", 100)), 0); (("strengthened_module_decl", 1601), ((Tag1 (("loc"), (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -140), (Tag1 (("aliasable"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -139), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -138), (Tag1 (("mark"), (Tag3 ((("mark", 1589)), 0, (0)), 100000000, 0, -137), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_declaration"), 0, (0)), 100000000, 0, -136), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -135), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_declaration"), 0, (0)), 100000000, 0, -134), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_coercion"), 0, (0)), 100000000, 0, -133), 0), 100000000, 0, -132), 0), 100000000, 0, -131), 0), 100000000, 0, -130), 0), 100000000, 0, -129), 0), 100000000, 0, -128), 0), 100000000, 0, -127), 0), 100000000, 0, -126), 0, (("typing/includemod.mli", 162, 5632, 5632), ("typing/includemod.mli", 164, 5722, 5793), 0), 0, Tag1 ("Includemod", 101)), 0); (("check_modtype_inclusion", 1602), ((Tag1 (("loc"), (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -125), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -124), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -123), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -122), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -121), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("explanation", 1591)), 0, (0)), 100000000, 0, -120)], (0)), 100000000, 0, -119), 0), 100000000, 0, -118), 0), 100000000, 0, -117), 0), 100000000, 0, -116), 0), 100000000, 0, -115), 0), 100000000, 0, -114), 0, (("typing/includemod.mli", 166, 5795, 5795), ("typing/includemod.mli", 168, 5906, 5926), 0), 0, Tag1 ("Includemod", 102)), 0); (("check_modtype_equiv", 1603), ((Tag1 (("loc"), (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -113), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -112), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -111), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -110), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -109), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -108), 0), 100000000, 0, -107), 0), 100000000, 0, -106), 0), 100000000, 0, -105), 0), 100000000, 0, -104), 0), 100000000, 0, -103), 0, (("typing/includemod.mli", 173, 6146, 6146), ("typing/includemod.mli", 174, 6171, 6245), 0), 0, Tag1 ("Includemod", 103)), 0); (("signatures", 1604), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -102), (Tag1 (("mark"), (Tag3 ((("mark", 1589)), 0, (0)), 100000000, 0, -101), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "signature"), 0, (0)), 100000000, 0, -100), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "signature"), 0, (0)), 100000000, 0, -99), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_coercion"), 0, (0)), 100000000, 0, -98), 0), 100000000, 0, -97), 0), 100000000, 0, -96), 0), 100000000, 0, -95), 0), 100000000, 0, -94), 0, (("typing/includemod.mli", 176, 6247, 6247), ("typing/includemod.mli", 177, 6285, 6328), 0), 0, Tag1 ("Includemod", 104)), 0); (("compunit", 1605), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -93), (Tag1 (("mark"), (Tag3 ((("mark", 1589)), 0, (0)), 100000000, 0, -92), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -91), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "signature"), 0, (0)), 100000000, 0, -90), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -89), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "signature"), 0, (0)), 100000000, 0, -88), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Shape")), "t"), 0, (0)), 100000000, 0, -87), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_coercion"), 0, (0)), 100000000, 0, -85); (Tag3 (Tag1 ((Tag2 ("Shape")), "t"), 0, (0)), 100000000, 0, -86)]), 100000000, 0, -84), 0), 100000000, 0, -83), 0), 100000000, 0, -82), 0), 100000000, 0, -81), 0), 100000000, 0, -80), 0), 100000000, 0, -79), 0), 100000000, 0, -78), 0), 100000000, 0, -77), 0, (("typing/includemod.mli", 179, 6330, 6330), ("typing/includemod.mli", 181, 6395, 6460), 0), 0, Tag1 ("Includemod", 105)), 0); (("type_declarations", 1606), ((Tag1 (("loc"), (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -76), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -75), (Tag1 (("mark"), (Tag3 ((("mark", 1589)), 0, (0)), 100000000, 0, -74), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -73), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -72), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -71), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -70), 0), 100000000, 0, -69), 0), 100000000, 0, -68), 0), 100000000, 0, -67), 0), 100000000, 0, -66), 0), 100000000, 0, -65), 0), 100000000, 0, -64), 0, (("typing/includemod.mli", 183, 6462, 6462), ("typing/includemod.mli", 185, 6527, 6584), 0), 0, Tag1 ("Includemod", 106)), 0); (("print_coercion", 1607), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -63), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_coercion"), 0, (0)), 100000000, 0, -62), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -61), 0), 100000000, 0, -60), 0), 100000000, 0, -59), 0, (("typing/includemod.mli", 187, 6586, 6586), ("typing/includemod.mli", 187, 6586, 6649), 0), 0, Tag1 ("Includemod", 107)), 0); Tag1 (("symptom", 1608), (0, 0, Tag1 ([(("Missing_field", 1307), ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -23); (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -24); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -25)]), 0, (("typing/includemod.mli", 190, 6666, 6670), ("typing/includemod.mli", 190, 6666, 6716), 0), 0, Tag1 ("Includemod", 109)); (("Value_descriptions", 1308), ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -26); (Tag3 (Tag1 ((Tag2 ("Types")), "value_description"), 0, (0)), 100000000, 0, -27); (Tag3 (Tag1 ((Tag2 ("Types")), "value_description"), 0, (0)), 100000000, 0, -28); (Tag3 (Tag1 ((Tag2 ("Includecore")), "value_mismatch"), 0, (0)), 100000000, 0, -29)]), 0, (("typing/includemod.mli", 191, 6728, 6730), ("typing/includemod.mli", 193, 6808, 6842), 0), 0, Tag1 ("Includemod", 110)); (("Type_declarations", 1309), ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -30); (Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -31); (Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -32); (Tag3 (Tag1 ((Tag2 ("Includecore")), "type_mismatch"), 0, (0)), 100000000, 0, -33)]), 0, (("typing/includemod.mli", 194, 6843, 6845), ("typing/includemod.mli", 195, 6895, 6949), 0), 0, Tag1 ("Includemod", 111)); (("Extension_constructors", 1310), ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -34); (Tag3 (Tag1 ((Tag2 ("Types")), "extension_constructor"), 0, (0)), 100000000, 0, -35); (Tag3 (Tag1 ((Tag2 ("Types")), "extension_constructor"), 0, (0)), 100000000, 0, -36); (Tag3 (Tag1 ((Tag2 ("Includecore")), "extension_constructor_mismatch"), 0, (0)), 100000000, 0, -37)]), 0, (("typing/includemod.mli", 196, 6950, 6952), ("typing/includemod.mli", 197, 7012, 7088), 0), 0, Tag1 ("Includemod", 112)); (("Module_types", 1311), ([(Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -38); (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -39)]), 0, (("typing/includemod.mli", 198, 7089, 7091), ("typing/includemod.mli", 198, 7089, 7134), 0), 0, Tag1 ("Includemod", 113)); (("Modtype_infos", 1312), ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -40); (Tag3 (Tag1 ((Tag2 ("Types")), "modtype_declaration"), 0, (0)), 100000000, 0, -41); (Tag3 (Tag1 ((Tag2 ("Types")), "modtype_declaration"), 0, (0)), 100000000, 0, -42)]), 0, (("typing/includemod.mli", 199, 7135, 7137), ("typing/includemod.mli", 199, 7135, 7207), 0), 0, Tag1 ("Includemod", 114)); (("Modtype_permutation", 1313), ([(Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -43); (Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_coercion"), 0, (0)), 100000000, 0, -44)]), 0, (("typing/includemod.mli", 200, 7208, 7210), ("typing/includemod.mli", 200, 7208, 7280), 0), 0, Tag1 ("Includemod", 115)); (("Interface_mismatch", 1314), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -45); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -46)]), 0, (("typing/includemod.mli", 201, 7281, 7283), ("typing/includemod.mli", 201, 7281, 7322), 0), 0, Tag1 ("Includemod", 116)); (("Class_type_declarations", 1315), ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -47); (Tag3 (Tag1 ((Tag2 ("Types")), "class_type_declaration"), 0, (0)), 100000000, 0, -48); (Tag3 (Tag1 ((Tag2 ("Types")), "class_type_declaration"), 0, (0)), 100000000, 0, -49); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Ctype")), "class_match_failure"), 0, (0)), 100000000, 0, -51)], (0)), 100000000, 0, -50)]), 0, (("typing/includemod.mli", 202, 7323, 7325), ("typing/includemod.mli", 204, 7420, 7456), 0), 0, Tag1 ("Includemod", 117)); (("Class_declarations", 1316), ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -52); (Tag3 (Tag1 ((Tag2 ("Types")), "class_declaration"), 0, (0)), 100000000, 0, -53); (Tag3 (Tag1 ((Tag2 ("Types")), "class_declaration"), 0, (0)), 100000000, 0, -54); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Ctype")), "class_match_failure"), 0, (0)), 100000000, 0, -56)], (0)), 100000000, 0, -55)]), 0, (("typing/includemod.mli", 205, 7457, 7459), ("typing/includemod.mli", 207, 7539, 7575), 0), 0, Tag1 ("Includemod", 118)); (("Unbound_module_path", 1317), ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -57)]), 0, (("typing/includemod.mli", 208, 7576, 7578), ("typing/includemod.mli", 208, 7576, 7609), 0), 0, Tag1 ("Includemod", 119)); (("Invalid_module_alias", 1318), ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -58)]), 0, (("typing/includemod.mli", 209, 7610, 7612), ("typing/includemod.mli", 209, 7610, 7644), 0), 0, Tag1 ("Includemod", 120))], 0), 1, 0, 0, 0, 0, 0, (("typing/includemod.mli", 189, 6651, 6651), ("typing/includemod.mli", 209, 7610, 7644), 0), 0, 0, 0, Tag1 ("Includemod", 108)), 1, 0); Tag1 (("pos", 1609), (0, 0, Tag1 ([(("Module", 1347), ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -19)]), 0, (("typing/includemod.mli", 212, 7657, 7659), ("typing/includemod.mli", 212, 7657, 7678), 0), 0, Tag1 ("Includemod", 122)); (("Modtype", 1348), ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -20)]), 0, (("typing/includemod.mli", 213, 7679, 7681), ("typing/includemod.mli", 213, 7679, 7701), 0), 0, Tag1 ("Includemod", 123)); (("Arg", 1349), ([(Tag3 (Tag1 ((Tag2 ("Types")), "functor_parameter"), 0, (0)), 100000000, 0, -21)]), 0, (("typing/includemod.mli", 214, 7702, 7704), ("typing/includemod.mli", 214, 7702, 7730), 0), 0, Tag1 ("Includemod", 124)); (("Body", 1350), ([(Tag3 (Tag1 ((Tag2 ("Types")), "functor_parameter"), 0, (0)), 100000000, 0, -22)]), 0, (("typing/includemod.mli", 215, 7731, 7733), ("typing/includemod.mli", 215, 7731, 7760), 0), 0, Tag1 ("Includemod", 125))], 0), 1, 0, 0, 0, 0, 0, (("typing/includemod.mli", 211, 7646, 7646), ("typing/includemod.mli", 215, 7731, 7760), 0), 0, 0, 0, Tag1 ("Includemod", 121)), 1, 0); Tag2 (("Error", 1610), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((("explanation", 1591)), 0, (0)), 100000000, 0, -18)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Includemod", 126)), 2, 0); Tag2 (("Apply_error", 1611), ((Tag3 ("exn", 7)), 0, Tag1 ([(("loc", 1353), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -9), (("typing/includemod.mli", 219, 7820, 7824), ("typing/includemod.mli", 219, 7820, 7842), 0), 0, Tag1 ("Includemod", 127)); (("env", 1354), 0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -10), (("typing/includemod.mli", 220, 7843, 7847), ("typing/includemod.mli", 220, 7843, 7860), 0), 0, Tag1 ("Includemod", 128)); (("lid_app", 1360), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -12)], (0)), 100000000, 0, -11), (("typing/includemod.mli", 221, 7861, 7865), ("typing/includemod.mli", 221, 7861, 7895), 0), 0, Tag1 ("Includemod", 129)); (("mty_f", 1361), 0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -13), (("typing/includemod.mli", 222, 7896, 7900), ("typing/includemod.mli", 222, 7896, 7921), 0), 0, Tag1 ("Includemod", 130)); (("args", 1362), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((("Error", 1590)), "functor_arg_descr"), 0, (0)), 100000000, 0, -16); (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -17)]), 100000000, 0, -15)], (0)), 100000000, 0, -14), (("typing/includemod.mli", 223, 7922, 7926), ("typing/includemod.mli", 223, 7922, 7986), 0), 0, Tag1 ("Includemod", 131))]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Includemod", 132)), 2, 0); (("expand_module_alias", 1612), ((Tag1 (("strengthen"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -8), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -7), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -6), (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("typing/includemod.mli", 226, 7992, 7992), ("typing/includemod.mli", 226, 7992, 8072), 0), 0, Tag1 ("Includemod", 134)), 0); Tag3 (("Functor_inclusion_diff", 1613), 0, (Tag1 ([Tag3 (("Defs", 1675), 0, (Tag1 ([Tag1 (("left", 1677), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Types")), "functor_parameter"), 0, (0)), 100000000, 0, -620)), 0, 0, 0, 0, (("typing/includemod.mli", 230, 8128, 8132), ("typing/includemod.mli", 230, 8128, 8167), 0), 0, 0, 0, Tag1 ("Includemod", 135)), 1, 0); Tag1 (("right", 1678), (0, 0, 0, 1, ((Tag3 ((("left", 1677)), 0, (0)), 100000000, 0, -619)), 0, 0, 0, 0, (("typing/includemod.mli", 231, 8168, 8172), ("typing/includemod.mli", 231, 8168, 8189), 0), 0, 0, 0, Tag1 ("Includemod", 136)), 1, 0); Tag1 (("eq", 1679), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_coercion"), 0, (0)), 100000000, 0, -618)), 0, 0, 0, 0, (("typing/includemod.mli", 232, 8190, 8194), ("typing/includemod.mli", 232, 8190, 8229), 0), 0, 0, 0, Tag1 ("Includemod", 137)), 1, 0); Tag1 (("diff", 1680), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Error", 1590)), "functor_param_symptom"), [(Tag3 (Tag1 ((Tag2 ("Types")), "functor_parameter"), 0, (0)), 100000000, 0, -616); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -617)], (0)), 100000000, 0, -615)), 0, 0, 0, 0, (("typing/includemod.mli", 233, 8230, 8234), ("typing/includemod.mli", 233, 8230, 8305), 0), 0, 0, 0, Tag1 ("Includemod", 138)), 1, 0); Tag1 (("state", 1681), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("typing/includemod.mli", 234, 8306, 8310), ("typing/includemod.mli", 234, 8306, 8320), 0), 0, 0, 0, Tag1 ("Includemod", 139)), 1, 0)]), 0, (("typing/includemod.mli", 229, 8109, 8111), ("typing/includemod.mli", 235, 8321, 8326), 0), Tag1 ("Includemod", 140)), 0, 0); (("diff", 1676), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -614), (Tag1 (0, (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "functor_parameter"), 0, (0)), 100000000, 0, -612)], (0)), 100000000, 0, -611); (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -613)]), 100000000, 0, -610), (Tag1 (0, (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "functor_parameter"), 0, (0)), 100000000, 0, -608)], (0)), 100000000, 0, -607); (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -609)]), 100000000, 0, -606), (Tag3 (Tag1 (Tag2 (Tag1 ((Tag2 ("Diffing")), "Define"), (("Defs", 1675))), "patch"), 0, (0)), 100000000, 0, -605), 0), 100000000, 0, -604), 0), 100000000, 0, -603), 0), 100000000, 0, -602), 0, (("typing/includemod.mli", 236, 8327, 8329), ("typing/includemod.mli", 239, 8460, 8490), 0), 0, Tag1 ("Includemod", 141)), 0)]), 0, (("typing/includemod.mli", 228, 8074, 8074), ("typing/includemod.mli", 240, 8491, 8494), 0), Tag1 ("Includemod", 142)), 0, 0); Tag3 (("Functor_app_diff", 1614), 0, (Tag1 ([Tag3 (("Defs", 1682), 0, (Tag1 ([Tag1 (("left", 1684), (0, 0, 0, 1, ((Tag2 ([(Tag3 (Tag1 ((("Error", 1590)), "functor_arg_descr"), 0, (0)), 100000000, 0, -637); (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -638)]), 100000000, 0, -636)), 0, 0, 0, 0, (("typing/includemod.mli", 244, 8544, 8548), ("typing/includemod.mli", 244, 8544, 8603), 0), 0, 0, 0, Tag1 ("Includemod", 143)), 1, 0); Tag1 (("right", 1685), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Types")), "functor_parameter"), 0, (0)), 100000000, 0, -635)), 0, 0, 0, 0, (("typing/includemod.mli", 245, 8604, 8608), ("typing/includemod.mli", 245, 8604, 8644), 0), 0, 0, 0, Tag1 ("Includemod", 144)), 1, 0); Tag1 (("eq", 1686), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_coercion"), 0, (0)), 100000000, 0, -634)), 0, 0, 0, 0, (("typing/includemod.mli", 246, 8645, 8649), ("typing/includemod.mli", 246, 8645, 8684), 0), 0, 0, 0, Tag1 ("Includemod", 145)), 1, 0); Tag1 (("diff", 1687), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Error", 1590)), "functor_param_symptom"), [(Tag3 (Tag1 ((("Error", 1590)), "functor_arg_descr"), 0, (0)), 100000000, 0, -632); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -633)], (0)), 100000000, 0, -631)), 0, 0, 0, 0, (("typing/includemod.mli", 247, 8685, 8689), ("typing/includemod.mli", 247, 8685, 8760), 0), 0, 0, 0, Tag1 ("Includemod", 146)), 1, 0); Tag1 (("state", 1688), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("typing/includemod.mli", 248, 8761, 8765), ("typing/includemod.mli", 248, 8761, 8775), 0), 0, 0, 0, Tag1 ("Includemod", 147)), 1, 0)]), 0, (("typing/includemod.mli", 243, 8525, 8527), ("typing/includemod.mli", 249, 8776, 8781), 0), Tag1 ("Includemod", 148)), 0, 0); (("diff", 1683), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -630), (Tag1 (("f"), (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -629), (Tag1 (("args"), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((("Error", 1590)), "functor_arg_descr"), 0, (0)), 100000000, 0, -627); (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -628)]), 100000000, 0, -626)], (0)), 100000000, 0, -625), (Tag3 (Tag1 (Tag2 (Tag1 ((Tag2 ("Diffing")), "Define"), (("Defs", 1682))), "patch"), 0, (0)), 100000000, 0, -624), 0), 100000000, 0, -623), 0), 100000000, 0, -622), 0), 100000000, 0, -621), 0, (("typing/includemod.mli", 250, 8782, 8784), ("typing/includemod.mli", 254, 8897, 8927), 0), 0, Tag1 ("Includemod", 149)), 0)]), 0, (("typing/includemod.mli", 242, 8496, 8496), ("typing/includemod.mli", 255, 8928, 8931), 0), Tag1 ("Includemod", 150)), 0, 0)], "Includemod", [("Includemod", ("\1585\235\182\002\235\153 ,%\138\218\132\188I\167")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Types", ("\177\238\029.\220\006\163!\230\015\006\182\133\155\194\166")); ("Typedtree", ("c5z\186\175w\146\254\018V\184\031\0038\004\227")); ("Type_immediacy", ("\"\127k\011Q\241\211\138\193;8\142\129\141#\251")); ("Subst", ("\021\031\148\223\127\186\189\135\027}\145r\216\143\177\156")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shape", ("\235\127Y\213\025\137=\244\218\181\248N\189\188\216p")); ("Primitive", ("}Shh\162\015|\220A\203\249\232\245G\213\019")); ("Path", ("\012\183\178\025\1298\228*\021r\185\160Y\252\n\026")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Outcometree", ("9\021%\234\211\206\210\004H\165\208\2014\234Q\142")); ("Misc", ("*\026\026\234c\191\131\161\\\203\183\012O\252\153\198")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Load_path", ("\012@\228l\230\164S\172h\1726X\020\252o}")); ("Includecore", (";Q E\158\170\208\130\1750\136E\012\1798|")); ("Identifiable", ("\004F\207\014\158GU\001\184\214\187%/#;\211")); ("Ident", ("\b9;!\187.\220\163(x\b\174\\\223\020\004")); ("Errortrace", ("\238\196yV6<x\\\13126\144\141\000~\145")); ("Env", ("\021\n\181\142x\b\169j\227\"\017\248*\178\245\223")); ("Diffing_with_keys", ("\198\208\133q\023\211C\197\210Q\023\001#o\193H")); ("Diffing", ("\027\205S\011\160W\184\023\131\250\1571\177\026\005Q")); ("Ctype", ("\027\133EB\030\017\186iN]k}\251\199\182\161")); ("Cmi_format", ("6\177\bU\139\"\023\152=\249\135\174\b\011Cg")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Build_path_prefix_map", ("y\028\167\207D\220\198\216\011\208\172\149\2416\bc")); ("Btype", ("z\012z\142\133\002\232\237\203U\142l\165\022\2209")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216"))], [(0)])

  end

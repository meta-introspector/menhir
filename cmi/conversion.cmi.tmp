exception NotConvertible
type 'a kernel_conversion_function = Environ.env -> 'a -> 'a -> unit
type 'a extended_conversion_function =
    ?l2r:bool ->
    ?reds:TransparentState.t ->
    Environ.env ->
    ?evars:Constr.constr Constr.evar_handler -> 'a -> 'a -> unit
type conv_pb = CONV | CUMUL
type 'a universe_compare = {
  compare_sorts : Environ.env -> conv_pb -> Sorts.t -> Sorts.t -> 'a -> 'a;
  compare_instances :
    flex:bool -> Univ.Instance.t -> Univ.Instance.t -> 'a -> 'a;
  compare_cumul_instances :
    conv_pb ->
    Univ.Variance.t array -> Univ.Instance.t -> Univ.Instance.t -> 'a -> 'a;
}
type 'a universe_state = 'a * 'a universe_compare
type ('a, 'b) generic_conversion_function =
    Environ.env -> 'b universe_state -> 'a -> 'a -> 'b
type 'a infer_conversion_function =
    Environ.env -> 'a -> 'a -> Univ.Constraints.t
val get_cumulativity_constraints :
  conv_pb ->
  Univ.Variance.t array ->
  Univ.Instance.t -> Univ.Instance.t -> Univ.Constraints.t
val inductive_cumulativity_arguments :
  Declarations.mutual_inductive_body * int -> int
val constructor_cumulativity_arguments :
  Declarations.mutual_inductive_body * int * int -> int
val sort_cmp_universes :
  Environ.env ->
  conv_pb ->
  Sorts.t -> Sorts.t -> 'a * 'a universe_compare -> 'a * 'a universe_compare
val convert_instances :
  flex:bool ->
  Univ.Instance.t ->
  Univ.Instance.t -> 'a * 'a universe_compare -> 'a * 'a universe_compare
val checked_universes : UGraph.t universe_compare
val conv : Constr.constr extended_conversion_function
val conv_leq : Constr.types extended_conversion_function
val generic_conv :
  conv_pb ->
  l2r:bool ->
  Constr.constr Constr.evar_handler ->
  TransparentState.t -> (Constr.constr, 'a) generic_conversion_function
val default_conv : conv_pb -> Constr.types kernel_conversion_function
("DEBUG:rule", [Tag2 (("NotConvertible", 822), ((Tag3 ("exn", 7)), 0, (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Conversion", 1)), 2, 0); Tag1 (("kernel_conversion_function", 823), ([((("a")), 100000000, 0, -137)], 1, 0, 1, ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -138), (Tag1 (0, ((("a")), 100000000, 0, -137), (Tag1 (0, ((("a")), 100000000, 0, -137), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -136), 0), 100000000, 0, -135), 0), 100000000, 0, -134), 0), 100000000, 0, -133)), [46], [0], 0, 0, (("kernel/conversion.mli", 19, 830, 830), ("kernel/conversion.mli", 19, 830, 890), 0), 0, 0, 0, Tag1 ("Conversion", 2)), 1, 0); Tag1 (("extended_conversion_function", 824), ([((("a")), 100000000, 0, -124)], 1, 0, 1, ((Tag1 (Tag1 ("l2r"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -132)], (0)), 100000000, 0, -131), (Tag1 (Tag1 ("reds"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("TransparentState")), "t"), 0, (0)), 100000000, 0, -130)], (0)), 100000000, 0, -129), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -128), (Tag1 (Tag1 ("evars"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "evar_handler"), [(Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -127)], (0)), 100000000, 0, -126)], (0)), 100000000, 0, -125), (Tag1 (0, ((("a")), 100000000, 0, -124), (Tag1 (0, ((("a")), 100000000, 0, -124), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -123), 0), 100000000, 0, -122), 0), 100000000, 0, -121), 0), 100000000, 0, -120), 0), 100000000, 0, -119), 0), 100000000, 0, -118), 0), 100000000, 0, -117)), [46], [0], 0, 0, (("kernel/conversion.mli", 20, 891, 891), ("kernel/conversion.mli", 23, 1012, 1030), 0), 0, 0, 0, Tag1 ("Conversion", 3)), 1, 0); Tag1 (("conv_pb", 825), (0, 0, Tag1 ([(("CONV", 582), (0), 0, (("kernel/conversion.mli", 25, 1032, 1047), ("kernel/conversion.mli", 25, 1032, 1051), 0), 0, Tag1 ("Conversion", 5)); (("CUMUL", 583), (0), 0, (("kernel/conversion.mli", 25, 1032, 1052), ("kernel/conversion.mli", 25, 1032, 1059), 0), 0, Tag1 ("Conversion", 6))], 0), 1, 0, 0, 0, 0, 0, (("kernel/conversion.mli", 25, 1032, 1032), ("kernel/conversion.mli", 25, 1032, 1059), 0), 0, 1, 0, Tag1 ("Conversion", 4)), 1, 0); Tag1 (("universe_compare", 826), ([((("a")), 100000000, 0, -95)], 1, [[(("compare_sorts", 617), 0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -99), (Tag1 (0, (Tag3 ((("conv_pb", 825)), 0, (0)), 100000000, 0, -98), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sorts")), "t"), 0, (0)), 100000000, 0, -97), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sorts")), "t"), 0, (0)), 100000000, 0, -96), (Tag1 (0, ((("a")), 100000000, 0, -95), ((("a")), 100000000, 0, -95), 0), 100000000, 0, -94), 0), 100000000, 0, -93), 0), 100000000, 0, -92), 0), 100000000, 0, -91), 0), 100000000, 0, -90), (("kernel/conversion.mli", 29, 1125, 1127), ("kernel/conversion.mli", 29, 1125, 1192), 0), 0, Tag1 ("Conversion", 8)); (("compare_instances", 687), 0, (Tag1 (("flex"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -106), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Instance"), "t"), 0, (0)), 100000000, 0, -105), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Instance"), "t"), 0, (0)), 100000000, 0, -104), (Tag1 (0, ((("a")), 100000000, 0, -95), ((("a")), 100000000, 0, -95), 0), 100000000, 0, -103), 0), 100000000, 0, -102), 0), 100000000, 0, -101), 0), 100000000, 0, -100), (("kernel/conversion.mli", 30, 1193, 1195), ("kernel/conversion.mli", 30, 1193, 1274), 0), 0, Tag1 ("Conversion", 9)); (("compare_cumul_instances", 693), 0, (Tag1 (0, (Tag3 ((("conv_pb", 825)), 0, (0)), 100000000, 0, -116), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Variance"), "t"), 0, (0)), 100000000, 0, -115)], (0)), 100000000, 0, -114), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Instance"), "t"), 0, (0)), 100000000, 0, -113), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Instance"), "t"), 0, (0)), 100000000, 0, -112), (Tag1 (0, ((("a")), 100000000, 0, -95), ((("a")), 100000000, 0, -95), 0), 100000000, 0, -111), 0), 100000000, 0, -110), 0), 100000000, 0, -109), 0), 100000000, 0, -108), 0), 100000000, 0, -107), (("kernel/conversion.mli", 31, 1275, 1277), ("kernel/conversion.mli", 32, 1339, 1390), 0), 0, Tag1 ("Conversion", 10))]], 1, 0, [63], [0], 0, 0, (("kernel/conversion.mli", 27, 1061, 1061), ("kernel/conversion.mli", 33, 1391, 1392), 0), 0, 0, 0, Tag1 ("Conversion", 7)), 1, 0); Tag1 (("universe_state", 827), ([((("a")), 100000000, 0, -88)], 1, 0, 1, ((Tag2 ([((("a")), 100000000, 0, -88); (Tag3 ((("universe_compare", 826)), [((("a")), 100000000, 0, -88)], (0)), 100000000, 0, -89)]), 100000000, 0, -87)), [63], [0], 0, 0, (("kernel/conversion.mli", 35, 1394, 1394), ("kernel/conversion.mli", 35, 1394, 1443), 0), 0, 0, 0, Tag1 ("Conversion", 11)), 1, 0); Tag1 (("generic_conversion_function", 828), ([((("a")), 100000000, 0, -84); ((("b")), 100000000, 0, -83)], 2, 0, 1, ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -86), (Tag1 (0, (Tag3 ((("universe_state", 827)), [((("b")), 100000000, 0, -83)], (0)), 100000000, 0, -85), (Tag1 (0, ((("a")), 100000000, 0, -84), (Tag1 (0, ((("a")), 100000000, 0, -84), ((("b")), 100000000, 0, -83), 0), 100000000, 0, -82), 0), 100000000, 0, -81), 0), 100000000, 0, -80), 0), 100000000, 0, -79)), [46; 63], [0; 0], 0, 0, (("kernel/conversion.mli", 37, 1445, 1445), ("kernel/conversion.mli", 37, 1445, 1530), 0), 0, 0, 0, Tag1 ("Conversion", 12)), 1, 0); Tag1 (("infer_conversion_function", 829), ([((("a")), 100000000, 0, -77)], 1, 0, 1, ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -78), (Tag1 (0, ((("a")), 100000000, 0, -77), (Tag1 (0, ((("a")), 100000000, 0, -77), (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Constraints"), "t"), 0, (0)), 100000000, 0, -76), 0), 100000000, 0, -75), 0), 100000000, 0, -74), 0), 100000000, 0, -73)), [46], [0], 0, 0, (("kernel/conversion.mli", 39, 1532, 1532), ("kernel/conversion.mli", 39, 1532, 1605), 0), 0, 0, 0, Tag1 ("Conversion", 13)), 1, 0); (("get_cumulativity_constraints", 830), ((Tag1 (0, (Tag3 ((("conv_pb", 825)), 0, (0)), 100000000, 0, -72), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Variance"), "t"), 0, (0)), 100000000, 0, -71)], (0)), 100000000, 0, -70), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Instance"), "t"), 0, (0)), 100000000, 0, -69), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Instance"), "t"), 0, (0)), 100000000, 0, -68), (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Constraints"), "t"), 0, (0)), 100000000, 0, -67), 0), 100000000, 0, -66), 0), 100000000, 0, -65), 0), 100000000, 0, -64), 0), 100000000, 0, -63), 0, (("kernel/conversion.mli", 41, 1607, 1607), ("kernel/conversion.mli", 42, 1678, 1736), 0), 0, Tag1 ("Conversion", 14)), 0); (("inductive_cumulativity_arguments", 831), ((Tag1 (0, (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Declarations")), "mutual_inductive_body"), 0, (0)), 100000000, 0, -61); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -62)]), 100000000, 0, -60), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -59), 0), 100000000, 0, -58), 0, (("kernel/conversion.mli", 44, 1738, 1738), ("kernel/conversion.mli", 44, 1738, 1826), 0), 0, Tag1 ("Conversion", 15)), 0); (("constructor_cumulativity_arguments", 832), ((Tag1 (0, (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Declarations")), "mutual_inductive_body"), 0, (0)), 100000000, 0, -55); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -56); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -57)]), 100000000, 0, -54), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -53), 0), 100000000, 0, -52), 0, (("kernel/conversion.mli", 45, 1827, 1827), ("kernel/conversion.mli", 45, 1827, 1923), 0), 0, Tag1 ("Conversion", 16)), 0); (("sort_cmp_universes", 833), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -51), (Tag1 (0, (Tag3 ((("conv_pb", 825)), 0, (0)), 100000000, 0, -50), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sorts")), "t"), 0, (0)), 100000000, 0, -49), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sorts")), "t"), 0, (0)), 100000000, 0, -48), (Tag1 (0, (Tag2 ([((("a")), 100000000, 0, -44); (Tag3 ((("universe_compare", 826)), [((("a")), 100000000, 0, -44)], (0)), 100000000, 0, -47)]), 100000000, 0, -46), (Tag2 ([((("a")), 100000000, 0, -44); (Tag3 ((("universe_compare", 826)), [((("a")), 100000000, 0, -44)], (0)), 100000000, 0, -45)]), 100000000, 0, -43), 0), 100000000, 0, -42), 0), 100000000, 0, -41), 0), 100000000, 0, -40), 0), 100000000, 0, -39), 0), 100000000, 0, -38), 0, (("kernel/conversion.mli", 47, 1925, 1925), ("kernel/conversion.mli", 48, 1990, 2044), 0), 0, Tag1 ("Conversion", 17)), 0); (("convert_instances", 834), ((Tag1 (("flex"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -37), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Instance"), "t"), 0, (0)), 100000000, 0, -36), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Instance"), "t"), 0, (0)), 100000000, 0, -35), (Tag1 (0, (Tag2 ([((("a")), 100000000, 0, -31); (Tag3 ((("universe_compare", 826)), [((("a")), 100000000, 0, -31)], (0)), 100000000, 0, -34)]), 100000000, 0, -33), (Tag2 ([((("a")), 100000000, 0, -31); (Tag3 ((("universe_compare", 826)), [((("a")), 100000000, 0, -31)], (0)), 100000000, 0, -32)]), 100000000, 0, -30), 0), 100000000, 0, -29), 0), 100000000, 0, -28), 0), 100000000, 0, -27), 0), 100000000, 0, -26), 0, (("kernel/conversion.mli", 52, 2133, 2133), ("kernel/conversion.mli", 53, 2208, 2262), 0), 0, Tag1 ("Conversion", 18)), 0); (("checked_universes", 835), ((Tag3 ((("universe_compare", 826)), [(Tag3 (Tag1 ((Tag2 ("UGraph")), "t"), 0, (0)), 100000000, 0, -25)], (0)), 100000000, 0, -24), 0, (("kernel/conversion.mli", 56, 2316, 2316), ("kernel/conversion.mli", 56, 2316, 2365), 0), 0, Tag1 ("Conversion", 19)), 0); (("conv", 836), ((Tag3 ((("extended_conversion_function", 824)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -23)], (0)), 100000000, 0, -22), 0, (("kernel/conversion.mli", 59, 2424, 2424), ("kernel/conversion.mli", 59, 2424, 2470), 0), 0, Tag1 ("Conversion", 20)), 0); (("conv_leq", 837), ((Tag3 ((("extended_conversion_function", 824)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -21)], (0)), 100000000, 0, -20), 0, (("kernel/conversion.mli", 61, 2472, 2472), ("kernel/conversion.mli", 61, 2472, 2521), 0), 0, Tag1 ("Conversion", 21)), 0); (("generic_conv", 838), ((Tag1 (0, (Tag3 ((("conv_pb", 825)), 0, (0)), 100000000, 0, -19), (Tag1 (("l2r"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -18), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "evar_handler"), [(Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -17)], (0)), 100000000, 0, -16), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("TransparentState")), "t"), 0, (0)), 100000000, 0, -15), (Tag3 ((("generic_conversion_function", 828)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -13); ((("a")), 100000000, 0, -14)], (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0), 100000000, 0, -10), 0), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("kernel/conversion.mli", 66, 2679, 2679), ("kernel/conversion.mli", 67, 2744, 2807), 0), 0, Tag1 ("Conversion", 22)), 0); (("default_conv", 839), ((Tag1 (0, (Tag3 ((("conv_pb", 825)), 0, (0)), 100000000, 0, -7), (Tag3 ((("kernel_conversion_function", 823)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -6)], (0)), 100000000, 0, -5), 0), 100000000, 0, -4), 0, (("kernel/conversion.mli", 69, 2809, 2809), ("kernel/conversion.mli", 69, 2809, 2875), 0), 0, Tag1 ("Conversion", 23)), 0); (("default_conv_leq", 840), ((Tag3 ((("kernel_conversion_function", 823)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -3)], (0)), 100000000, 0, -2), 0, (("kernel/conversion.mli", 70, 2876, 2876), ("kernel/conversion.mli", 70, 2876, 2931), 0), 0, Tag1 ("Conversion", 24)), 0)], "Conversion", [("Conversion", ("\158\150&\195M\tv\127|\029\158RRK\211A")); ("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Vmemitcodes", ("wCd\138\165\158DD\241gH\236.\210\197\247")); ("Vmbytecodes", ("\025\021\151\137Dx\149W\236+[\143f\208\160\016")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("Range", ("\218\130\001r\237\r\144\171\164\021l\155\196\143sg")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Environ", ("\171b\1579\229<\003Z\147IL\225X\254\182\204")); ("Declarations", ("\239\137n\019\030w$\182\166z^{\b\206\163\175")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CEphemeron", ("\204I\179-\206(x4\173\229\250\001PkH\151")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])
val default_conv_leq : Constr.types kernel_conversion_function

module Current_libname :
  sig val set : string -> unit val unset : unit -> unit end
module Entry :
  sig
    type ('param, 'a) parameterised_spec = {
      arg_name : string;
      params : (string * 'param) list;
      thunk : 'param -> unit -> 'a;
    }
    type test_spec =
        Regular_thunk : ([ `init ] -> unit -> 'a) -> test_spec
      | Parameterised_thunk : ('param, 'a) parameterised_spec -> test_spec
    type t = private {
      unique_id : int;
      code : string;
      type_conv_path : string;
      name : string;
      filename : string;
      line : int;
      startpos : int;
      endpos : int;
      test_spec : test_spec;
      bench_module_name : string option;
    }
    val with_test_spec : t -> test_spec -> t
    val compare : t -> t -> int
    val get_module_name_opt : t -> string option
  end
val add_environment_var : bool
val lookup_lib : libname:string -> Entry.t list
val add_bench :
  name:string ->
  code:string ->
  filename:string ->
  type_conv_path:string ->
  line:int -> startpos:int -> endpos:int -> Entry.test_spec -> unit
val add_bench_module :
  name:string ->
  code:string ->
  type_conv_path:string ->
  filename:string ->
  ("DEBUG:rule", [Tag3 (("Current_libname", 300), 0, (Tag1 ([(("set", 306), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -48), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -47), 0), 100000000, 0, -46), 0, (("runtime-lib/benchmark_accumulator.mli", 13, 676, 678), ("runtime-lib/benchmark_accumulator.mli", 13, 676, 702), 0), 0, Tag1 ("Ppx_bench_lib__Benchmark_accumulator", 0)), 0); (("unset", 307), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -45), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -44), 0), 100000000, 0, -43), 0, (("runtime-lib/benchmark_accumulator.mli", 14, 703, 705), ("runtime-lib/benchmark_accumulator.mli", 14, 703, 729), 0), 0, Tag1 ("Ppx_bench_lib__Benchmark_accumulator", 1)), 0)]), 0, (("runtime-lib/benchmark_accumulator.mli", 12, 647, 647), ("runtime-lib/benchmark_accumulator.mli", 15, 730, 733), 0), Tag1 ("Ppx_bench_lib__Benchmark_accumulator", 2)), 0, 0); Tag3 (("Entry", 301), 0, (Tag1 ([Tag1 (("parameterised_spec", 308), ([((("param")), 100000000, 0, -89); ((("a")), 100000000, 0, -92)], 2, [[(("arg_name", 275), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -85), (("runtime-lib/benchmark_accumulator.mli", 19, 795, 801), ("runtime-lib/benchmark_accumulator.mli", 20, 819, 824), 0), 0, Tag1 ("Ppx_bench_lib__Benchmark_accumulator", 4)); (("params", 276), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -88); ((("param")), 100000000, 0, -89)]), 100000000, 0, -87)], (0)), 100000000, 0, -86), (("runtime-lib/benchmark_accumulator.mli", 20, 819, 825), ("runtime-lib/benchmark_accumulator.mli", 22, 945, 950), 0), 0, Tag1 ("Ppx_bench_lib__Benchmark_accumulator", 5)); (("thunk", 277), 0, (Tag1 (0, ((("param")), 100000000, 0, -89), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -93), ((("a")), 100000000, 0, -92), 0), 100000000, 0, -91), 0), 100000000, 0, -90), (("runtime-lib/benchmark_accumulator.mli", 22, 945, 951), ("runtime-lib/benchmark_accumulator.mli", 22, 945, 979), 0), 0, Tag1 ("Ppx_bench_lib__Benchmark_accumulator", 6))]], 1, 0, [63; 25], [0; 0], 0, 0, (("runtime-lib/benchmark_accumulator.mli", 18, 754, 756), ("runtime-lib/benchmark_accumulator.mli", 23, 980, 985), 0), 0, 0, 0, Tag1 ("Ppx_bench_lib__Benchmark_accumulator", 3)), 1, 0); Tag1 (("test_spec", 309), (0, 0, Tag1 ([(("Regular_thunk", 279), ([(Tag1 (0, (Tag8 (([("init", (0))], (0, 100000000, 0, -80), 1, 0, 0)), 100000000, 0, -79), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -78), ((("a")), 100000000, 0, -77), 0), 100000000, 0, -76), 0), 100000000, 0, -75)]), ((Tag3 ((("test_spec", 309)), 0, (0)), 100000000, 0, -74)), (("runtime-lib/benchmark_accumulator.mli", 26, 1006, 1010), ("runtime-lib/benchmark_accumulator.mli", 26, 1006, 1066), 0), 0, Tag1 ("Ppx_bench_lib__Benchmark_accumulator", 8)); (("Parameterised_thunk", 280), ([(Tag3 ((("parameterised_spec", 308)), [((("param")), 100000000, 0, -83); ((("a")), 100000000, 0, -84)], (0)), 100000000, 0, -82)]), ((Tag3 ((("test_spec", 309)), 0, (0)), 100000000, 0, -81)), (("runtime-lib/benchmark_accumulator.mli", 27, 1067, 1071), ("runtime-lib/benchmark_accumulator.mli", 27, 1067, 1139), 0), 0, Tag1 ("Ppx_bench_lib__Benchmark_accumulator", 9))], 0), 1, 0, 0, 0, 0, 0, (("runtime-lib/benchmark_accumulator.mli", 25, 987, 989), ("runtime-lib/benchmark_accumulator.mli", 27, 1067, 1139), 0), 0, 0, 0, Tag1 ("Ppx_bench_lib__Benchmark_accumulator", 7)), 1, 0); Tag1 (("t", 310), (0, 0, [[(("unique_id", 282), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -63), (("runtime-lib/benchmark_accumulator.mli", 30, 1160, 1166), ("runtime-lib/benchmark_accumulator.mli", 31, 1182, 1187), 0), 0, Tag1 ("Ppx_bench_lib__Benchmark_accumulator", 11)); (("code", 283), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -64), (("runtime-lib/benchmark_accumulator.mli", 31, 1182, 1188), ("runtime-lib/benchmark_accumulator.mli", 32, 1202, 1207), 0), 0, Tag1 ("Ppx_bench_lib__Benchmark_accumulator", 12)); (("type_conv_path", 284), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -65), (("runtime-lib/benchmark_accumulator.mli", 32, 1202, 1208), ("runtime-lib/benchmark_accumulator.mli", 33, 1232, 1237), 0), 0, Tag1 ("Ppx_bench_lib__Benchmark_accumulator", 13)); (("name", 285), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -66), (("runtime-lib/benchmark_accumulator.mli", 33, 1232, 1238), ("runtime-lib/benchmark_accumulator.mli", 34, 1252, 1257), 0), 0, Tag1 ("Ppx_bench_lib__Benchmark_accumulator", 14)); (("filename", 286), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -67), (("runtime-lib/benchmark_accumulator.mli", 34, 1252, 1258), ("runtime-lib/benchmark_accumulator.mli", 35, 1276, 1281), 0), 0, Tag1 ("Ppx_bench_lib__Benchmark_accumulator", 15)); (("line", 287), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -68), (("runtime-lib/benchmark_accumulator.mli", 35, 1276, 1282), ("runtime-lib/benchmark_accumulator.mli", 36, 1293, 1298), 0), 0, Tag1 ("Ppx_bench_lib__Benchmark_accumulator", 16)); (("startpos", 288), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -69), (("runtime-lib/benchmark_accumulator.mli", 36, 1293, 1299), ("runtime-lib/benchmark_accumulator.mli", 37, 1314, 1319), 0), 0, Tag1 ("Ppx_bench_lib__Benchmark_accumulator", 17)); (("endpos", 289), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -70), (("runtime-lib/benchmark_accumulator.mli", 37, 1314, 1320), ("runtime-lib/benchmark_accumulator.mli", 38, 1333, 1338), 0), 0, Tag1 ("Ppx_bench_lib__Benchmark_accumulator", 18)); (("test_spec", 290), 0, (Tag3 ((("test_spec", 309)), 0, (0)), 100000000, 0, -71), (("runtime-lib/benchmark_accumulator.mli", 38, 1333, 1339), ("runtime-lib/benchmark_accumulator.mli", 39, 1361, 1366), 0), 0, Tag1 ("Ppx_bench_lib__Benchmark_accumulator", 19)); (("bench_module_name", 291), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -73)], (0)), 100000000, 0, -72), (("runtime-lib/benchmark_accumulator.mli", 39, 1361, 1367), ("runtime-lib/benchmark_accumulator.mli", 39, 1361, 1400), 0), 0, Tag1 ("Ppx_bench_lib__Benchmark_accumulator", 20))]], 0, 0, 0, 0, 0, 0, (("runtime-lib/benchmark_accumulator.mli", 29, 1141, 1143), ("runtime-lib/benchmark_accumulator.mli", 40, 1401, 1406), 0), 0, 0, 0, Tag1 ("Ppx_bench_lib__Benchmark_accumulator", 10)), 1, 0); (("with_test_spec", 311), ((Tag1 (0, (Tag3 ((("t", 310)), 0, (0)), 100000000, 0, -62), (Tag1 (0, (Tag3 ((("test_spec", 309)), 0, (0)), 100000000, 0, -61), (Tag3 ((("t", 310)), 0, (0)), 100000000, 0, -60), 0), 100000000, 0, -59), 0), 100000000, 0, -58), 0, (("runtime-lib/benchmark_accumulator.mli", 42, 1408, 1410), ("runtime-lib/benchmark_accumulator.mli", 42, 1408, 1450), 0), 0, Tag1 ("Ppx_bench_lib__Benchmark_accumulator", 21)), 0); (("compare", 312), ((Tag1 (0, (Tag3 ((("t", 310)), 0, (0)), 100000000, 0, -57), (Tag1 (0, (Tag3 ((("t", 310)), 0, (0)), 100000000, 0, -56), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -55), 0), 100000000, 0, -54), 0), 100000000, 0, -53), 0, (("runtime-lib/benchmark_accumulator.mli", 43, 1451, 1453), ("runtime-lib/benchmark_accumulator.mli", 43, 1451, 1480), 0), 0, Tag1 ("Ppx_bench_lib__Benchmark_accumulator", 22)), 0); (("get_module_name_opt", 313), ((Tag1 (0, (Tag3 ((("t", 310)), 0, (0)), 100000000, 0, -52), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -51)], (0)), 100000000, 0, -50), 0), 100000000, 0, -49), 0, (("runtime-lib/benchmark_accumulator.mli", 44, 1481, 1483), ("runtime-lib/benchmark_accumulator.mli", 44, 1481, 1527), 0), 0, Tag1 ("Ppx_bench_lib__Benchmark_accumulator", 23)), 0)]), 0, (("runtime-lib/benchmark_accumulator.mli", 17, 735, 735), ("runtime-lib/benchmark_accumulator.mli", 45, 1528, 1531), 0), Tag1 ("Ppx_bench_lib__Benchmark_accumulator", 24)), 0, 0); (("add_environment_var", 302), ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -42), 0, (("runtime-lib/benchmark_accumulator.mli", 49, 1630, 1630), ("runtime-lib/benchmark_accumulator.mli", 49, 1630, 1660), 0), 0, Tag1 ("Ppx_bench_lib__Benchmark_accumulator", 25)), 0); (("lookup_lib", 303), ((Tag1 (("libname"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -41), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Entry", 301)), "t"), 0, (0)), 100000000, 0, -40)], (0)), 100000000, 0, -39), 0), 100000000, 0, -38), 0, (("runtime-lib/benchmark_accumulator.mli", 52, 1736, 1736), ("runtime-lib/benchmark_accumulator.mli", 52, 1736, 1783), 0), 0, Tag1 ("Ppx_bench_lib__Benchmark_accumulator", 26)), 0); (("add_bench", 304), ((Tag1 (("name"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -37), (Tag1 (("code"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -36), (Tag1 (("filename"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -35), (Tag1 (("type_conv_path"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -34), (Tag1 (("line"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -33), (Tag1 (("startpos"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -32), (Tag1 (("endpos"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -31), (Tag1 (0, (Tag3 (Tag1 ((("Entry", 301)), "test_spec"), 0, (0)), 100000000, 0, -30), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -29), 0), 100000000, 0, -28), 0), 100000000, 0, -27), 0), 100000000, 0, -26), 0), 100000000, 0, -25), 0), 100000000, 0, -24), 0), 100000000, 0, -23), 0), 100000000, 0, -22), 0), 100000000, 0, -21), 0, (("runtime-lib/benchmark_accumulator.mli", 57, 1978, 1978), ("runtime-lib/benchmark_accumulator.mli", 66, 2143, 2152), 0), 0, Tag1 ("Ppx_bench_lib__Benchmark_accumulator", 27)), 0); (("add_bench_module", 305), ((Tag1 (("name"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -20), (Tag1 (("code"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -19), (Tag1 (("type_conv_path"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -18), (Tag1 (("filename"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -17), (Tag1 (("line"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -16), (Tag1 (("startpos"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -15), (Tag1 (("endpos"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -14), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -13), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10), 0), 100000000, 0, -9), 0), 100000000, 0, -8), 0), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("runtime-lib/benchmark_accumulator.mli", 70, 2265, 2265), ("runtime-lib/benchmark_accumulator.mli", 79, 2436, 2445), 0), 0, Tag1 ("Ppx_bench_lib__Benchmark_accumulator", 28)), 0)], "Ppx_bench_lib__Benchmark_accumulator", [("Ppx_bench_lib__Benchmark_accumulator", ("\195\012\244\187\165$=\182\157T\007\158\157\006F$")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Ppx_bench_lib", ("\187\028\001\224\139H\014\148\179\0060<\016\134\190\"")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
line:int -> startpos:int -> endpos:int -> (unit -> unit) -> unit

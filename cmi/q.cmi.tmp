type t = { num : Z.t; den : Z.t; }
val make : Z.t -> Z.t -> t
val zero : t
val one : t
val minus_one : t
val inf : t
val minus_inf : t
val undef : t
val of_bigint : Z.t -> t
val of_int : int -> t
val of_int32 : int32 -> t
val of_int64 : int64 -> t
val of_nativeint : nativeint -> t
val of_ints : int -> int -> t
val of_float : float -> t
val of_string : string -> t
val num : t -> Z.t
val den : t -> Z.t
type kind = ZERO | INF | MINF | UNDEF | NZERO
val classify : t -> kind
val is_real : t -> bool
val sign : t -> int
val compare : t -> t -> int
val equal : t -> t -> bool
val min : t -> t -> t
val max : t -> t -> t
val leq : t -> t -> bool
val geq : t -> t -> bool
val lt : t -> t -> bool
val gt : t -> t -> bool
val to_bigint : t -> Z.t
val to_int : t -> int
val to_int32 : t -> int32
val to_int64 : t -> int64
val to_nativeint : t -> nativeint
val to_string : t -> string
val to_float : t -> float
val neg : t -> t
val abs : t -> t
val add : t -> t -> t
val sub : t -> t -> t
val mul : t -> t -> t
val inv : t -> t
val div : t -> t -> t
val mul_2exp : t -> int -> t
val div_2exp : t -> int -> t
val print : t -> unit
val output : out_channel -> t -> unit
val sprint : unit -> t -> string
val bprint : Buffer.t -> t -> unit
val pp_print : Format.formatter -> t -> unit
val ( ~- ) : t -> t
val ( ~+ ) : t -> t
val ( + ) : t -> t -> t
val ( - ) : t -> t -> t
val ( * ) : t -> t -> t
val ( / ) : t -> t -> t
val ( lsl ) : t -> int -> t
val ( asr ) : t -> int -> t
val ( ~$ ) : int -> t
val ( // ) : int -> int -> t
val ( ~$$ ) : Z.t -> t
val ( /// ) : Z.t -> Z.t -> t
val ( = ) : t -> t -> bool
val ( < ) : t -> t -> bool
val ( > ) : t -> t -> bool
val ( <= ) : t -> t -> bool
val ( >= ) : t -> t -> bool("DEBUG:rule", [Tag1 (("t", 681), (0, 0, [[(("num", 409), 0, (Tag3 (Tag1 ((Tag2 ("Z")), "t"), 0, (0)), 100000000, 0, -259), (("q.mli", 25, 738, 742), ("q.mli", 25, 738, 751), 0), 0, Tag1 ("Q", 1)); (("den", 410), 0, (Tag3 (Tag1 ((Tag2 ("Z")), "t"), 0, (0)), 100000000, 0, -260), (("q.mli", 26, 770, 774), ("q.mli", 26, 770, 783), 0), 0, Tag1 ("Q", 2))]], 1, 0, 0, 0, 0, 0, (("q.mli", 24, 727, 727), ("q.mli", 27, 809, 812), 0), 0, 0, 0, Tag1 ("Q", 0)), 1, 0); (("make", 682), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Z")), "t"), 0, (0)), 100000000, 0, -258), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Z")), "t"), 0, (0)), 100000000, 0, -257), (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -256), 0), 100000000, 0, -255), 0), 100000000, 0, -254), 0, (("q.mli", 37, 1150, 1150), ("q.mli", 37, 1150, 1175), 0), 0, Tag1 ("Q", 3)), 0); (("zero", 683), ((Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -253), 0, (("q.mli", 42, 1309, 1309), ("q.mli", 42, 1309, 1320), 0), 0, Tag1 ("Q", 4)), 0); (("one", 684), ((Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -252), 0, (("q.mli", 43, 1321, 1321), ("q.mli", 43, 1321, 1331), 0), 0, Tag1 ("Q", 5)), 0); (("minus_one", 685), ((Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -251), 0, (("q.mli", 44, 1332, 1332), ("q.mli", 44, 1332, 1347), 0), 0, Tag1 ("Q", 6)), 0); (("inf", 686), ((Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -250), 0, (("q.mli", 47, 1366, 1366), ("q.mli", 47, 1366, 1376), 0), 0, Tag1 ("Q", 7)), 0); (("minus_inf", 687), ((Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -249), 0, (("q.mli", 50, 1390, 1390), ("q.mli", 50, 1390, 1406), 0), 0, Tag1 ("Q", 8)), 0); (("undef", 688), ((Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -248), 0, (("q.mli", 53, 1421, 1421), ("q.mli", 53, 1421, 1433), 0), 0, Tag1 ("Q", 9)), 0); (("of_bigint", 689), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Z")), "t"), 0, (0)), 100000000, 0, -247), (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -246), 0), 100000000, 0, -245), 0, (("q.mli", 56, 1447, 1447), ("q.mli", 56, 1447, 1470), 0), 0, Tag1 ("Q", 10)), 0); (("of_int", 690), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -244), (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -243), 0), 100000000, 0, -242), 0, (("q.mli", 57, 1471, 1471), ("q.mli", 57, 1471, 1491), 0), 0, Tag1 ("Q", 11)), 0); (("of_int32", 691), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -241), (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -240), 0), 100000000, 0, -239), 0, (("q.mli", 58, 1492, 1492), ("q.mli", 58, 1492, 1516), 0), 0, Tag1 ("Q", 12)), 0); (("of_int64", 692), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -238), (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -237), 0), 100000000, 0, -236), 0, (("q.mli", 59, 1517, 1517), ("q.mli", 59, 1517, 1541), 0), 0, Tag1 ("Q", 13)), 0); (("of_nativeint", 693), ((Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -235), (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -234), 0), 100000000, 0, -233), 0, (("q.mli", 60, 1542, 1542), ("q.mli", 60, 1542, 1574), 0), 0, Tag1 ("Q", 14)), 0); (("of_ints", 694), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -232), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -231), (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -230), 0), 100000000, 0, -229), 0), 100000000, 0, -228), 0, (("q.mli", 63, 1623, 1623), ("q.mli", 63, 1623, 1651), 0), 0, Tag1 ("Q", 15)), 0); (("of_float", 695), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -227), (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -226), 0), 100000000, 0, -225), 0, (("q.mli", 66, 1721, 1721), ("q.mli", 66, 1721, 1745), 0), 0, Tag1 ("Q", 16)), 0); (("of_string", 696), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -224), (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -223), 0), 100000000, 0, -222), 0, (("q.mli", 72, 1837, 1837), ("q.mli", 72, 1837, 1863), 0), 0, Tag1 ("Q", 17)), 0); (("num", 697), ((Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -221), (Tag3 (Tag1 ((Tag2 ("Z")), "t"), 0, (0)), 100000000, 0, -220), 0), 100000000, 0, -219), 0, (("q.mli", 83, 2202, 2202), ("q.mli", 83, 2202, 2219), 0), 0, Tag1 ("Q", 18)), 0); (("den", 698), ((Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -218), (Tag3 (Tag1 ((Tag2 ("Z")), "t"), 0, (0)), 100000000, 0, -217), 0), 100000000, 0, -216), 0, (("q.mli", 86, 2247, 2247), ("q.mli", 86, 2247, 2264), 0), 0, Tag1 ("Q", 19)), 0); Tag1 (("kind", 699), (0, 0, Tag1 ([(("ZERO", 429), (0), 0, (("q.mli", 93, 2327, 2329), ("q.mli", 93, 2327, 2335), 0), 0, Tag1 ("Q", 21)); (("INF", 430), (0), 0, (("q.mli", 94, 2347, 2349), ("q.mli", 94, 2347, 2354), 0), 0, Tag1 ("Q", 22)); (("MINF", 431), (0), 0, (("q.mli", 95, 2384, 2386), ("q.mli", 95, 2384, 2392), 0), 0, Tag1 ("Q", 23)); (("UNDEF", 432), (0), 0, (("q.mli", 96, 2428, 2430), ("q.mli", 96, 2428, 2437), 0), 0, Tag1 ("Q", 24)); (("NZERO", 433), (0), 0, (("q.mli", 97, 2467, 2469), ("q.mli", 97, 2467, 2476), 0), 0, Tag1 ("Q", 25))], 0), 1, 0, 0, 0, 0, 0, (("q.mli", 92, 2315, 2315), ("q.mli", 97, 2467, 2476), 0), 0, 1, 0, Tag1 ("Q", 20)), 1, 0); (("classify", 700), ((Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -215), (Tag3 ((("kind", 699)), 0, (0)), 100000000, 0, -214), 0), 100000000, 0, -213), 0, (("q.mli", 102, 2663, 2663), ("q.mli", 102, 2663, 2686), 0), 0, Tag1 ("Q", 26)), 0); (("is_real", 701), ((Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -212), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -211), 0), 100000000, 0, -210), 0, (("q.mli", 105, 2730, 2730), ("q.mli", 105, 2730, 2752), 0), 0, Tag1 ("Q", 27)), 0); (("sign", 702), ((Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -209), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -208), 0), 100000000, 0, -207), 0, (("q.mli", 108, 2817, 2817), ("q.mli", 108, 2817, 2835), 0), 0, Tag1 ("Q", 28)), 0); (("compare", 703), ((Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -206), (Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -205), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -204), 0), 100000000, 0, -203), 0), 100000000, 0, -202), 0, (("q.mli", 113, 2977, 2977), ("q.mli", 113, 2977, 3003), 0), 0, Tag1 ("Q", 29)), 0); (("equal", 704), ((Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -201), (Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -200), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -199), 0), 100000000, 0, -198), 0), 100000000, 0, -197), 0, (("q.mli", 127, 3535, 3535), ("q.mli", 127, 3535, 3560), 0), 0, Tag1 ("Q", 30)), 0); (("min", 705), ((Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -196), (Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -195), (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -194), 0), 100000000, 0, -193), 0), 100000000, 0, -192), 0, (("q.mli", 132, 3659, 3659), ("q.mli", 132, 3659, 3679), 0), 0, Tag1 ("Q", 31)), 0); (("max", 706), ((Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -191), (Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -190), (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -189), 0), 100000000, 0, -188), 0), 100000000, 0, -187), 0, (("q.mli", 135, 3727, 3727), ("q.mli", 135, 3727, 3747), 0), 0, Tag1 ("Q", 32)), 0); (("leq", 707), ((Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -186), (Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -185), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -184), 0), 100000000, 0, -183), 0), 100000000, 0, -182), 0, (("q.mli", 138, 3794, 3794), ("q.mli", 138, 3794, 3817), 0), 0, Tag1 ("Q", 33)), 0); (("geq", 708), ((Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -181), (Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -180), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -179), 0), 100000000, 0, -178), 0), 100000000, 0, -177), 0, (("q.mli", 141, 3879, 3879), ("q.mli", 141, 3879, 3902), 0), 0, Tag1 ("Q", 34)), 0); (("lt", 709), ((Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -176), (Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -175), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -174), 0), 100000000, 0, -173), 0), 100000000, 0, -172), 0, (("q.mli", 144, 3967, 3967), ("q.mli", 144, 3967, 3989), 0), 0, Tag1 ("Q", 35)), 0); (("gt", 710), ((Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -171), (Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -170), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -169), 0), 100000000, 0, -168), 0), 100000000, 0, -167), 0, (("q.mli", 147, 4021, 4021), ("q.mli", 147, 4021, 4043), 0), 0, Tag1 ("Q", 36)), 0); (("to_bigint", 711), ((Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -166), (Tag3 (Tag1 ((Tag2 ("Z")), "t"), 0, (0)), 100000000, 0, -165), 0), 100000000, 0, -164), 0, (("q.mli", 153, 4103, 4103), ("q.mli", 153, 4103, 4126), 0), 0, Tag1 ("Q", 37)), 0); (("to_int", 712), ((Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -163), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -162), 0), 100000000, 0, -161), 0, (("q.mli", 154, 4127, 4127), ("q.mli", 154, 4127, 4147), 0), 0, Tag1 ("Q", 38)), 0); (("to_int32", 713), ((Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -160), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -159), 0), 100000000, 0, -158), 0, (("q.mli", 155, 4148, 4148), ("q.mli", 155, 4148, 4172), 0), 0, Tag1 ("Q", 39)), 0); (("to_int64", 714), ((Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -157), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -156), 0), 100000000, 0, -155), 0, (("q.mli", 156, 4173, 4173), ("q.mli", 156, 4173, 4197), 0), 0, Tag1 ("Q", 40)), 0); (("to_nativeint", 715), ((Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -154), (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -153), 0), 100000000, 0, -152), 0, (("q.mli", 157, 4198, 4198), ("q.mli", 157, 4198, 4230), 0), 0, Tag1 ("Q", 41)), 0); (("to_string", 716), ((Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -151), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -150), 0), 100000000, 0, -149), 0, (("q.mli", 164, 4430, 4430), ("q.mli", 164, 4430, 4456), 0), 0, Tag1 ("Q", 42)), 0); (("to_float", 717), ((Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -148), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -147), 0), 100000000, 0, -146), 0, (("q.mli", 167, 4526, 4526), ("q.mli", 167, 4526, 4550), 0), 0, Tag1 ("Q", 43)), 0); (("neg", 718), ((Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -145), (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -144), 0), 100000000, 0, -143), 0, (("q.mli", 180, 4979, 4979), ("q.mli", 180, 4979, 4994), 0), 0, Tag1 ("Q", 44)), 0); (("abs", 719), ((Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -142), (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -141), 0), 100000000, 0, -140), 0, (("q.mli", 183, 5013, 5013), ("q.mli", 183, 5013, 5028), 0), 0, Tag1 ("Q", 45)), 0); (("add", 720), ((Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -139), (Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -138), (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -137), 0), 100000000, 0, -136), 0), 100000000, 0, -135), 0, (("q.mli", 186, 5053, 5053), ("q.mli", 186, 5053, 5073), 0), 0, Tag1 ("Q", 46)), 0); (("sub", 721), ((Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -134), (Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -133), (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -132), 0), 100000000, 0, -131), 0), 100000000, 0, -130), 0, (("q.mli", 189, 5092, 5092), ("q.mli", 189, 5092, 5112), 0), 0, Tag1 ("Q", 47)), 0); (("mul", 722), ((Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -129), (Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -128), (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -127), 0), 100000000, 0, -126), 0), 100000000, 0, -125), 0, (("q.mli", 192, 5171, 5171), ("q.mli", 192, 5171, 5191), 0), 0, Tag1 ("Q", 48)), 0); (("inv", 723), ((Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -124), (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -123), 0), 100000000, 0, -122), 0, (("q.mli", 195, 5216, 5216), ("q.mli", 195, 5216, 5231), 0), 0, Tag1 ("Q", 49)), 0); (("div", 724), ((Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -121), (Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -120), (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -119), 0), 100000000, 0, -118), 0), 100000000, 0, -117), 0, (("q.mli", 200, 5302, 5302), ("q.mli", 200, 5302, 5322), 0), 0, Tag1 ("Q", 50)), 0); (("mul_2exp", 725), ((Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -116), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -115), (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -114), 0), 100000000, 0, -113), 0), 100000000, 0, -112), 0, (("q.mli", 205, 5410, 5410), ("q.mli", 205, 5410, 5437), 0), 0, Tag1 ("Q", 51)), 0); (("div_2exp", 726), ((Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -111), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -110), (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -109), 0), 100000000, 0, -108), 0), 100000000, 0, -107), 0, (("q.mli", 208, 5502, 5502), ("q.mli", 208, 5502, 5529), 0), 0, Tag1 ("Q", 52)), 0); (("print", 727), ((Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -106), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -105), 0), 100000000, 0, -104), 0, (("q.mli", 214, 5613, 5613), ("q.mli", 214, 5613, 5633), 0), 0, Tag1 ("Q", 53)), 0); (("output", 728), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -103), (Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -102), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -101), 0), 100000000, 0, -100), 0), 100000000, 0, -99), 0, (("q.mli", 217, 5686, 5686), ("q.mli", 217, 5686, 5722), 0), 0, Tag1 ("Q", 54)), 0); (("sprint", 729), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -98), (Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -97), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -96), 0), 100000000, 0, -95), 0), 100000000, 0, -94), 0, (("q.mli", 222, 5850, 5850), ("q.mli", 222, 5850, 5881), 0), 0, Tag1 ("Q", 55)), 0); (("bprint", 730), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Buffer"), "t"), 0, (0)), 100000000, 0, -93), (Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -92), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -91), 0), 100000000, 0, -90), 0), 100000000, 0, -89), 0, (("q.mli", 225, 5945, 5945), ("q.mli", 225, 5945, 5978), 0), 0, Tag1 ("Q", 56)), 0); (("pp_print", 731), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -88), (Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -87), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -86), 0), 100000000, 0, -85), 0), 100000000, 0, -84), 0, (("q.mli", 228, 6042, 6042), ("q.mli", 228, 6042, 6085), 0), 0, Tag1 ("Q", 57)), 0); (("~-", 732), ((Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -83), (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -82), 0), 100000000, 0, -81), 0, (("q.mli", 240, 6329, 6329), ("q.mli", 240, 6329, 6345), 0), 0, Tag1 ("Q", 58)), 0); (("~+", 733), ((Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -80), (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -79), 0), 100000000, 0, -78), 0, (("q.mli", 243, 6370, 6370), ("q.mli", 243, 6370, 6386), 0), 0, Tag1 ("Q", 59)), 0); (("+", 734), ((Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -77), (Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -76), (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -75), 0), 100000000, 0, -74), 0), 100000000, 0, -73), 0, (("q.mli", 246, 6405, 6405), ("q.mli", 246, 6405, 6425), 0), 0, Tag1 ("Q", 60)), 0); (("-", 735), ((Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -72), (Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -71), (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -70), 0), 100000000, 0, -69), 0), 100000000, 0, -68), 0, (("q.mli", 249, 6450, 6450), ("q.mli", 249, 6450, 6470), 0), 0, Tag1 ("Q", 61)), 0); (("*", 736), ((Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -67), (Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -66), (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -65), 0), 100000000, 0, -64), 0), 100000000, 0, -63), 0, (("q.mli", 252, 6498, 6498), ("q.mli", 252, 6498, 6520), 0), 0, Tag1 ("Q", 62)), 0); (("/", 737), ((Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -62), (Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -61), (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -60), 0), 100000000, 0, -59), 0), 100000000, 0, -58), 0, (("q.mli", 255, 6551, 6551), ("q.mli", 255, 6551, 6571), 0), 0, Tag1 ("Q", 63)), 0); (("lsl", 738), ((Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -57), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -56), (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -55), 0), 100000000, 0, -54), 0), 100000000, 0, -53), 0, (("q.mli", 258, 6596, 6596), ("q.mli", 258, 6596, 6620), 0), 0, Tag1 ("Q", 64)), 0); (("asr", 739), ((Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -52), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -51), (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -50), 0), 100000000, 0, -49), 0), 100000000, 0, -48), 0, (("q.mli", 261, 6674, 6674), ("q.mli", 261, 6674, 6698), 0), 0, Tag1 ("Q", 65)), 0); (("~$", 740), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -47), (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -46), 0), 100000000, 0, -45), 0, (("q.mli", 264, 6749, 6749), ("q.mli", 264, 6749, 6767), 0), 0, Tag1 ("Q", 66)), 0); (("//", 741), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -44), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -43), (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -42), 0), 100000000, 0, -41), 0), 100000000, 0, -40), 0, (("q.mli", 267, 6799, 6799), ("q.mli", 267, 6799, 6824), 0), 0, Tag1 ("Q", 67)), 0); (("~$$", 742), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Z")), "t"), 0, (0)), 100000000, 0, -39), (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -38), 0), 100000000, 0, -37), 0, (("q.mli", 270, 6869, 6869), ("q.mli", 270, 6869, 6888), 0), 0, Tag1 ("Q", 68)), 0); (("///", 743), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Z")), "t"), 0, (0)), 100000000, 0, -36), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Z")), "t"), 0, (0)), 100000000, 0, -35), (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -34), 0), 100000000, 0, -33), 0), 100000000, 0, -32), 0, (("q.mli", 273, 6920, 6920), ("q.mli", 273, 6920, 6946), 0), 0, Tag1 ("Q", 69)), 0); (("=", 744), ((Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -31), (Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -30), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -29), 0), 100000000, 0, -28), 0), 100000000, 0, -27), 0, (("q.mli", 276, 6990, 6990), ("q.mli", 276, 6990, 7013), 0), 0, Tag1 ("Q", 70)), 0); (("<", 745), ((Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -26), (Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -25), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -24), 0), 100000000, 0, -23), 0), 100000000, 0, -22), 0, (("q.mli", 280, 7054, 7054), ("q.mli", 280, 7054, 7077), 0), 0, Tag1 ("Q", 71)), 0); ((">", 746), ((Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -21), (Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -20), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("q.mli", 284, 7115, 7115), ("q.mli", 284, 7115, 7138), 0), 0, Tag1 ("Q", 72)), 0); (("<=", 747), ((Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -16), (Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -15), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -14), 0), 100000000, 0, -13), 0), 100000000, 0, -12), 0, (("q.mli", 288, 7176, 7176), ("q.mli", 288, 7176, 7200), 0), 0, Tag1 ("Q", 73)), 0); ((">=", 748), ((Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -11), (Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -10), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0), 100000000, 0, -7), 0, (("q.mli", 292, 7239, 7239), ("q.mli", 292, 7239, 7263), 0), 0, Tag1 ("Q", 74)), 0); (("<>", 749), ((Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -6), (Tag1 (0, (Tag3 ((("t", 681)), 0, (0)), 100000000, 0, -5), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("q.mli", 296, 7302, 7302), ("q.mli", 296, 7302, 7326), 0), 0, Tag1 ("Q", 75)), 0)], "Q", [("Q", ("\218\007\225\192\225Mh\230\031\238?\184\253\164\020\127")); ("Z", ("\253\196\2168\027\199O\134\220\218\031'\1484\233o")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Random", ("\020\005Xq\171\026\218\152X\135\254\023\133zK\200")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

val ( <> ) : t -> t -> bool

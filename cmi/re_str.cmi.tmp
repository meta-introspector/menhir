type regexp = Re__Str.regexp
val regexp : string -> regexp
val regexp_case_fold : string -> regexp
val quote : string -> string
val regexp_string : string -> regexp
val regexp_string_case_fold : string -> regexp
val string_match : regexp -> string -> int -> bool
val search_forward : regexp -> string -> int -> int
val search_backward : regexp -> string -> int -> int
val string_partial_match : regexp -> string -> int -> bool
val matched_string : string -> string
val match_beginning : unit -> int
val match_end : unit -> int
val matched_group : int -> string -> string
val group_beginning : int -> int
val group_end : int -> int
val global_replace : regexp -> string -> string -> string
val replace_first : regexp -> string -> string -> string
val global_substitute : regexp -> (string -> string) -> string -> string
val substitute_first : regexp -> (string -> string) -> string -> string
val replace_matched : string -> string -> string
val split : regexp -> string -> string list
val bounded_split : regexp -> string -> int -> string list
val split_delim : regexp -> string -> string list
val bounded_split_delim : regexp -> string -> int -> string list
type split_result = Re__Str.split_result = Text of string | Delim of string
val full_split : regexp -> string -> split_result list
val bounded_full_split : regexp -> string -> int -> split_result list
val string_before : string -> int -> string
val string_after : string -> int -> string
val first_chars : string -> int -> string
("DEBUG:rule", [Tag1 (("regexp", 483), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Re__Str")), "regexp"), 0, (0)), 100000000, 0, -167)), 0, 0, 0, 0, (("lib/str.mli", 20, 1060, 1060), ("lib/str.mli", 20, 1060, 1071), 0), 0, 0, 0, Tag1 ("Re__Str", 0)), 1, 0); (("regexp", 484), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -166), (Tag3 ((("regexp", 483)), 0, (0)), 100000000, 0, -165), 0), 100000000, 0, -164), 0, (("lib/str.mli", 23, 1122, 1122), ("lib/str.mli", 23, 1122, 1150), 0), 0, Tag1 ("Re__Str", 1)), 0); (("regexp_case_fold", 485), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -163), (Tag3 ((("regexp", 483)), 0, (0)), 100000000, 0, -162), 0), 100000000, 0, -161), 0, (("lib/str.mli", 45, 2367, 2367), ("lib/str.mli", 45, 2367, 2405), 0), 0, Tag1 ("Re__Str", 2)), 0); (("quote", 486), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -160), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -159), 0), 100000000, 0, -158), 0, (("lib/str.mli", 50, 2588, 2588), ("lib/str.mli", 50, 2588, 2615), 0), 0, Tag1 ("Re__Str", 3)), 0); (("regexp_string", 487), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -157), (Tag3 ((("regexp", 483)), 0, (0)), 100000000, 0, -156), 0), 100000000, 0, -155), 0, (("lib/str.mli", 54, 2709, 2709), ("lib/str.mli", 54, 2709, 2744), 0), 0, Tag1 ("Re__Str", 4)), 0); (("regexp_string_case_fold", 488), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -154), (Tag3 ((("regexp", 483)), 0, (0)), 100000000, 0, -153), 0), 100000000, 0, -152), 0, (("lib/str.mli", 58, 2851, 2851), ("lib/str.mli", 58, 2851, 2896), 0), 0, Tag1 ("Re__Str", 5)), 0); (("string_match", 489), ((Tag1 (0, (Tag3 ((("regexp", 483)), 0, (0)), 100000000, 0, -151), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -150), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -149), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -148), 0), 100000000, 0, -147), 0), 100000000, 0, -146), 0), 100000000, 0, -145), 0, (("lib/str.mli", 64, 3066, 3066), ("lib/str.mli", 64, 3066, 3115), 0), 0, Tag1 ("Re__Str", 6)), 0); (("search_forward", 490), ((Tag1 (0, (Tag3 ((("regexp", 483)), 0, (0)), 100000000, 0, -144), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -143), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -142), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -141), 0), 100000000, 0, -140), 0), 100000000, 0, -139), 0), 100000000, 0, -138), 0, (("lib/str.mli", 69, 3330, 3330), ("lib/str.mli", 69, 3330, 3380), 0), 0, Tag1 ("Re__Str", 7)), 0); (("search_backward", 491), ((Tag1 (0, (Tag3 ((("regexp", 483)), 0, (0)), 100000000, 0, -137), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -136), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -135), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -134), 0), 100000000, 0, -133), 0), 100000000, 0, -132), 0), 100000000, 0, -131), 0, (("lib/str.mli", 76, 3734, 3734), ("lib/str.mli", 76, 3734, 3785), 0), 0, Tag1 ("Re__Str", 8)), 0); (("string_partial_match", 492), ((Tag1 (0, (Tag3 ((("regexp", 483)), 0, (0)), 100000000, 0, -130), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -129), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -128), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -127), 0), 100000000, 0, -126), 0), 100000000, 0, -125), 0), 100000000, 0, -124), 0, (("lib/str.mli", 80, 3892, 3892), ("lib/str.mli", 80, 3892, 3949), 0), 0, Tag1 ("Re__Str", 9)), 0); (("matched_string", 493), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -123), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -122), 0), 100000000, 0, -121), 0, (("lib/str.mli", 85, 4137, 4137), ("lib/str.mli", 85, 4137, 4173), 0), 0, Tag1 ("Re__Str", 10)), 0); (("match_beginning", 494), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -120), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -119), 0), 100000000, 0, -118), 0, (("lib/str.mli", 91, 4470, 4470), ("lib/str.mli", 91, 4470, 4502), 0), 0, Tag1 ("Re__Str", 11)), 0); (("match_end", 495), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -117), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -116), 0), 100000000, 0, -115), 0, (("lib/str.mli", 96, 4676, 4676), ("lib/str.mli", 96, 4676, 4702), 0), 0, Tag1 ("Re__Str", 12)), 0); (("matched_group", 496), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -114), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -113), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -112), 0), 100000000, 0, -111), 0), 100000000, 0, -110), 0, (("lib/str.mli", 101, 4893, 4893), ("lib/str.mli", 101, 4893, 4935), 0), 0, Tag1 ("Re__Str", 13)), 0); (("group_beginning", 497), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -109), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -108), 0), 100000000, 0, -107), 0, (("lib/str.mli", 114, 5636, 5636), ("lib/str.mli", 114, 5636, 5667), 0), 0, Tag1 ("Re__Str", 14)), 0); (("group_end", 498), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -106), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -105), 0), 100000000, 0, -104), 0, (("lib/str.mli", 119, 5909, 5909), ("lib/str.mli", 119, 5909, 5934), 0), 0, Tag1 ("Re__Str", 15)), 0); (("global_replace", 499), ((Tag1 (0, (Tag3 ((("regexp", 483)), 0, (0)), 100000000, 0, -103), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -102), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -101), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -100), 0), 100000000, 0, -99), 0), 100000000, 0, -98), 0), 100000000, 0, -97), 0, (("lib/str.mli", 126, 6163, 6163), ("lib/str.mli", 126, 6163, 6219), 0), 0, Tag1 ("Re__Str", 16)), 0); (("replace_first", 500), ((Tag1 (0, (Tag3 ((("regexp", 483)), 0, (0)), 100000000, 0, -96), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -95), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -94), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -93), 0), 100000000, 0, -92), 0), 100000000, 0, -91), 0), 100000000, 0, -90), 0, (("lib/str.mli", 134, 6635, 6635), ("lib/str.mli", 134, 6635, 6690), 0), 0, Tag1 ("Re__Str", 17)), 0); (("global_substitute", 501), ((Tag1 (0, (Tag3 ((("regexp", 483)), 0, (0)), 100000000, 0, -89), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -88), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -87), 0), 100000000, 0, -86), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -85), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -84), 0), 100000000, 0, -83), 0), 100000000, 0, -82), 0), 100000000, 0, -81), 0, (("lib/str.mli", 138, 6810, 6810), ("lib/str.mli", 138, 6810, 6881), 0), 0, Tag1 ("Re__Str", 18)), 0); (("substitute_first", 502), ((Tag1 (0, (Tag3 ((("regexp", 483)), 0, (0)), 100000000, 0, -80), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -79), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -78), 0), 100000000, 0, -77), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -76), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -75), 0), 100000000, 0, -74), 0), 100000000, 0, -73), 0), 100000000, 0, -72), 0, (("lib/str.mli", 145, 7224, 7224), ("lib/str.mli", 145, 7224, 7294), 0), 0, Tag1 ("Re__Str", 19)), 0); (("replace_matched", 503), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -71), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -70), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -69), 0), 100000000, 0, -68), 0), 100000000, 0, -67), 0, (("lib/str.mli", 149, 7425, 7425), ("lib/str.mli", 149, 7425, 7473), 0), 0, Tag1 ("Re__Str", 20)), 0); (("split", 504), ((Tag1 (0, (Tag3 ((("regexp", 483)), 0, (0)), 100000000, 0, -66), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -65), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -64)], (0)), 100000000, 0, -63), 0), 100000000, 0, -62), 0), 100000000, 0, -61), 0, (("lib/str.mli", 158, 7791, 7791), ("lib/str.mli", 158, 7791, 7833), 0), 0, Tag1 ("Re__Str", 21)), 0); (("bounded_split", 505), ((Tag1 (0, (Tag3 ((("regexp", 483)), 0, (0)), 100000000, 0, -60), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -59), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -58), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -57)], (0)), 100000000, 0, -56), 0), 100000000, 0, -55), 0), 100000000, 0, -54), 0), 100000000, 0, -53), 0, (("lib/str.mli", 165, 8157, 8157), ("lib/str.mli", 165, 8157, 8214), 0), 0, Tag1 ("Re__Str", 22)), 0); (("split_delim", 506), ((Tag1 (0, (Tag3 ((("regexp", 483)), 0, (0)), 100000000, 0, -52), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -51), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -50)], (0)), 100000000, 0, -49), 0), 100000000, 0, -48), 0), 100000000, 0, -47), 0, (("lib/str.mli", 169, 8326, 8326), ("lib/str.mli", 169, 8326, 8374), 0), 0, Tag1 ("Re__Str", 23)), 0); (("bounded_split_delim", 507), ((Tag1 (0, (Tag3 ((("regexp", 483)), 0, (0)), 100000000, 0, -46), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -45), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -44), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -43)], (0)), 100000000, 0, -42), 0), 100000000, 0, -41), 0), 100000000, 0, -40), 0), 100000000, 0, -39), 0, (("lib/str.mli", 176, 8688, 8688), ("lib/str.mli", 176, 8688, 8751), 0), 0, Tag1 ("Re__Str", 24)), 0); Tag1 (("split_result", 508), (0, 0, Tag1 ([(("Text", 309), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -37)]), 0, (("lib/str.mli", 183, 9091, 9111), ("lib/str.mli", 183, 9091, 9125), 0), 0, Tag1 ("Re__Str", 26)); (("Delim", 310), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -38)]), 0, (("lib/str.mli", 183, 9091, 9126), ("lib/str.mli", 183, 9091, 9143), 0), 0, Tag1 ("Re__Str", 27))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Re__Str")), "split_result"), 0, (0)), 100000000, 0, -36)), 0, 0, 0, 0, (("lib/str.mli", 183, 9091, 9091), ("lib/str.mli", 183, 9091, 9143), 0), 0, 0, 0, Tag1 ("Re__Str", 25)), 1, 0); (("full_split", 509), ((Tag1 (0, (Tag3 ((("regexp", 483)), 0, (0)), 100000000, 0, -35), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -34), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("split_result", 508)), 0, (0)), 100000000, 0, -33)], (0)), 100000000, 0, -32), 0), 100000000, 0, -31), 0), 100000000, 0, -30), 0, (("lib/str.mli", 185, 9145, 9145), ("lib/str.mli", 185, 9145, 9198), 0), 0, Tag1 ("Re__Str", 28)), 0); (("bounded_full_split", 510), ((Tag1 (0, (Tag3 ((("regexp", 483)), 0, (0)), 100000000, 0, -29), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -28), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -27), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("split_result", 508)), 0, (0)), 100000000, 0, -26)], (0)), 100000000, 0, -25), 0), 100000000, 0, -24), 0), 100000000, 0, -23), 0), 100000000, 0, -22), 0, (("lib/str.mli", 193, 9508, 9508), ("lib/str.mli", 193, 9508, 9576), 0), 0, Tag1 ("Re__Str", 29)), 0); (("string_before", 511), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -21), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -20), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("lib/str.mli", 203, 9946, 9946), ("lib/str.mli", 203, 9946, 9988), 0), 0, Tag1 ("Re__Str", 30)), 0); (("string_after", 512), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -16), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -15), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -14), 0), 100000000, 0, -13), 0), 100000000, 0, -12), 0, (("lib/str.mli", 208, 10139, 10139), ("lib/str.mli", 208, 10139, 10180), 0), 0, Tag1 ("Re__Str", 31)), 0); (("first_chars", 513), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -11), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -10), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0), 100000000, 0, -7), 0, (("lib/str.mli", 213, 10331, 10331), ("lib/str.mli", 213, 10331, 10371), 0), 0, Tag1 ("Re__Str", 32)), 0); (("last_chars", 514), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -5), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("lib/str.mli", 217, 10489, 10489), ("lib/str.mli", 217, 10489, 10528), 0), 0, Tag1 ("Re__Str", 33)), 0)], "Re_str", [("Re_str", ("\185\212`\154m\236\135\202\237\145Q\255\189\235E\173")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Re__Str", ("\2170\131\146G\129\202y\198\179\170.\"\214b\230")); ("Re__Pmark", ("\165ks<XZ[\223&\136\255\140G\016\025p")); ("Re__Cset", ("\225r\195\178\225\254S\020 \207H\235\1795\0213")); ("Re__Core", ("u\184\236\029t\183=\150\227\183\016\196\129\199\174\130")); ("Re__Category", ("\212tx\171G\0000\176\132_\219\135_o\135\016")); ("Re__Automata", ("\228y\t\192\135)\001\027\154pU\252\\wv\141")); ("Re__", ("\0062t\168b\007\236c5\231\253,\210\160Z\n")); ("Re", ("\224\173\241\137K\014.>\007]H\243'\138\017\143")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [((0, "deprecated", "Use Re.Str", 0, 1))])
val last_chars : string -> int -> string

type gensym = unit -> int
val make : unit -> gensym
type generator
val generator : unit -> generator
val fresh : generator -> int("DEBUG:rule", [Tag1 (("gensym", 294), (0, 0, 0, 1, ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -16), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -15), 0), 100000000, 0, -14)), 0, 0, 0, 0, (("src/Gensym.mli", 17, 1047, 1047), ("src/Gensym.mli", 18, 1061, 1074), 0), 0, 0, 0, Tag1 ("Fix__Gensym", 0)), 1, 0); (("make", 295), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -13), (Tag3 ((("gensym", 294)), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("src/Gensym.mli", 21, 1114, 1114), ("src/Gensym.mli", 21, 1114, 1139), 0), 0, Tag1 ("Fix__Gensym", 1)), 0); Tag1 (("generator", 296), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/Gensym.mli", 24, 1216, 1216), ("src/Gensym.mli", 24, 1216, 1230), 0), 0, 0, 0, Tag1 ("Fix__Gensym", 2)), 1, 0); (("generator", 297), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10), (Tag3 ((("generator", 296)), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("src/Gensym.mli", 27, 1277, 1277), ("src/Gensym.mli", 27, 1277, 1309), 0), 0, Tag1 ("Fix__Gensym", 3)), 0); (("fresh", 298), ((Tag1 (0, (Tag3 ((("generator", 296)), 0, (0)), 100000000, 0, -7), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("src/Gensym.mli", 31, 1404, 1404), ("src/Gensym.mli", 31, 1404, 1431), 0), 0, Tag1 ("Fix__Gensym", 4)), 0); (("current", 299), ((Tag1 (0, (Tag3 ((("generator", 296)), 0, (0)), 100000000, 0, -4), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/Gensym.mli", 35, 1550, 1550), ("src/Gensym.mli", 35, 1550, 1579), 0), 0, Tag1 ("Fix__Gensym", 5)), 0)], "Fix__Gensym", [("Fix__Gensym", ("\173J,\198G`\235\171\239\235\179\192\143D\204`")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Fix__", ("\229-\006A\166\175\208\201Y\246\249k\r\n\155i")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

val current : generator -> int

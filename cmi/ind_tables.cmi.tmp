type mutual
type individual
type 'a scheme_kind
type handle
type scheme_dependency =
    SchemeMutualDep of Names.MutInd.t * mutual scheme_kind
  | SchemeIndividualDep of Names.inductive * individual scheme_kind
type mutual_scheme_object_function =
    Environ.env ->
    handle ->
    Names.MutInd.t -> Constr.constr array Evd.in_evar_universe_context
type individual_scheme_object_function =
    Environ.env ->
    handle -> Names.inductive -> Constr.constr Evd.in_evar_universe_context
val declare_mutual_scheme_object :
  string ->
  ?deps:(Environ.env -> Names.MutInd.t -> scheme_dependency list) ->
  ?aux:string -> mutual_scheme_object_function -> mutual scheme_kind
val declare_individual_scheme_object :
  string ->
  ?deps:(Environ.env -> Names.inductive -> scheme_dependency list) ->
  ?aux:string -> individual_scheme_object_function -> individual scheme_kind
val define_individual_scheme :
  ?loc:Loc.t ->
  individual scheme_kind -> Names.Id.t option -> Names.inductive -> unit
module Locmap :
  sig
    type t
    val default : Loc.t option -> t
    val make : ?default:Loc.t -> Names.MutInd.t -> Loc.t option list -> t
    val lookup : locmap:t -> Names.inductive -> Loc.t option
  end
val define_mutual_scheme :
  ?locmap:Locmap.t ->
  mutual scheme_kind -> (int * Names.Id.t) list -> Names.MutInd.t -> unit
val find_scheme :
  'a scheme_kind -> Names.inductive -> Names.Constant.t Proofview.tactic
val lookup_scheme :
  'a scheme_kind -> Names.inductive -> Names.Constant.t option
val local_lookup_scheme :
  handle -> 'a scheme_kind -> Names.inductive -> Names.Constant.t option
val pr_scheme_kind : 'a scheme_kind -> Pp.t
val declare_definition_scheme :
  (internal:bool ->
   univs:UState.named_universes_entry ->
   role:Evd.side_effect_role ->
   name:Names.Id.t ->
   ?loc:Loc.t -> Constr.t -> Names.Constant.t * Evd.side_effects)("DEBUG:rule", [Tag1 (("mutual", 1169), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("tactics/ind_tables.mli", 19, 915, 915), ("tactics/ind_tables.mli", 19, 915, 926), 0), 0, 0, 0, Tag1 ("Ind_tables", 1)), 1, 0); Tag1 (("individual", 1170), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("tactics/ind_tables.mli", 20, 927, 927), ("tactics/ind_tables.mli", 20, 927, 942), 0), 0, 0, 0, Tag1 ("Ind_tables", 2)), 1, 0); Tag1 (("scheme_kind", 1171), ([((("a")), 100000000, 0, -129)], 1, 0, 1, 0, [7], [2], 0, 0, (("tactics/ind_tables.mli", 21, 943, 943), ("tactics/ind_tables.mli", 21, 943, 962), 0), 0, 0, 0, Tag1 ("Ind_tables", 3)), 1, 0); Tag1 (("handle", 1172), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("tactics/ind_tables.mli", 23, 964, 964), ("tactics/ind_tables.mli", 23, 964, 975), 0), 0, 0, 0, Tag1 ("Ind_tables", 4)), 1, 0); Tag1 (("scheme_dependency", 1173), (0, 0, Tag1 ([(("SchemeMutualDep", 516), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "MutInd"), "t"), 0, (0)), 100000000, 0, -123); (Tag3 ((("scheme_kind", 1171)), [(Tag3 ((("mutual", 1169)), 0, (0)), 100000000, 0, -125)], (0)), 100000000, 0, -124)]), 0, (("tactics/ind_tables.mli", 26, 1002, 1002), ("tactics/ind_tables.mli", 26, 1002, 1052), 0), 0, Tag1 ("Ind_tables", 6)); (("SchemeIndividualDep", 534), ([(Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -126); (Tag3 ((("scheme_kind", 1171)), [(Tag3 ((("individual", 1170)), 0, (0)), 100000000, 0, -128)], (0)), 100000000, 0, -127)]), 0, (("tactics/ind_tables.mli", 27, 1053, 1053), ("tactics/ind_tables.mli", 27, 1053, 1112), 0), 0, Tag1 ("Ind_tables", 7))], 0), 1, 0, 0, 0, 0, 0, (("tactics/ind_tables.mli", 25, 977, 977), ("tactics/ind_tables.mli", 27, 1053, 1112), 0), 0, 0, 0, Tag1 ("Ind_tables", 5)), 1, 0); Tag1 (("mutual_scheme_object_function", 1174), (0, 0, 0, 1, ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -122), (Tag1 (0, (Tag3 ((("handle", 1172)), 0, (0)), 100000000, 0, -121), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "MutInd"), "t"), 0, (0)), 100000000, 0, -120), (Tag3 (Tag1 ((Tag2 ("Evd")), "in_evar_universe_context"), [(Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -119)], (0)), 100000000, 0, -118)], (0)), 100000000, 0, -117), 0), 100000000, 0, -116), 0), 100000000, 0, -115), 0), 100000000, 0, -114)), 0, 0, 0, 0, (("tactics/ind_tables.mli", 29, 1114, 1114), ("tactics/ind_tables.mli", 30, 1151, 1231), 0), 0, 0, 0, Tag1 ("Ind_tables", 8)), 1, 0); Tag1 (("individual_scheme_object_function", 1175), (0, 0, 0, 1, ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -113), (Tag1 (0, (Tag3 ((("handle", 1172)), 0, (0)), 100000000, 0, -112), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -111), (Tag3 (Tag1 ((Tag2 ("Evd")), "in_evar_universe_context"), [(Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -110)], (0)), 100000000, 0, -109), 0), 100000000, 0, -108), 0), 100000000, 0, -107), 0), 100000000, 0, -106)), 0, 0, 0, 0, (("tactics/ind_tables.mli", 31, 1232, 1232), ("tactics/ind_tables.mli", 32, 1273, 1348), 0), 0, 0, 0, Tag1 ("Ind_tables", 9)), 1, 0); (("declare_mutual_scheme_object", 1176), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -105), (Tag1 (Tag1 ("deps"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -104), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "MutInd"), "t"), 0, (0)), 100000000, 0, -103), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("scheme_dependency", 1173)), 0, (0)), 100000000, 0, -102)], (0)), 100000000, 0, -101), 0), 100000000, 0, -100), 0), 100000000, 0, -99)], (0)), 100000000, 0, -98), (Tag1 (Tag1 ("aux"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -97)], (0)), 100000000, 0, -96), (Tag1 (0, (Tag3 ((("mutual_scheme_object_function", 1174)), 0, (0)), 100000000, 0, -95), (Tag3 ((("scheme_kind", 1171)), [(Tag3 ((("mutual", 1169)), 0, (0)), 100000000, 0, -94)], (0)), 100000000, 0, -93), 0), 100000000, 0, -92), 0), 100000000, 0, -91), 0), 100000000, 0, -90), 0), 100000000, 0, -89), 0, (("tactics/ind_tables.mli", 38, 1514, 1514), ("tactics/ind_tables.mli", 41, 1639, 1692), 0), 0, Tag1 ("Ind_tables", 10)), 0); (("declare_individual_scheme_object", 1177), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -88), (Tag1 (Tag1 ("deps"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -87), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -86), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("scheme_dependency", 1173)), 0, (0)), 100000000, 0, -85)], (0)), 100000000, 0, -84), 0), 100000000, 0, -83), 0), 100000000, 0, -82)], (0)), 100000000, 0, -81), (Tag1 (Tag1 ("aux"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -80)], (0)), 100000000, 0, -79), (Tag1 (0, (Tag3 ((("individual_scheme_object_function", 1175)), 0, (0)), 100000000, 0, -78), (Tag3 ((("scheme_kind", 1171)), [(Tag3 ((("individual", 1170)), 0, (0)), 100000000, 0, -77)], (0)), 100000000, 0, -76), 0), 100000000, 0, -75), 0), 100000000, 0, -74), 0), 100000000, 0, -73), 0), 100000000, 0, -72), 0, (("tactics/ind_tables.mli", 43, 1694, 1694), ("tactics/ind_tables.mli", 47, 1863, 1887), 0), 0, Tag1 ("Ind_tables", 11)), 0); (("define_individual_scheme", 1178), ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -71)], (0)), 100000000, 0, -70), (Tag1 (0, (Tag3 ((("scheme_kind", 1171)), [(Tag3 ((("individual", 1170)), 0, (0)), 100000000, 0, -69)], (0)), 100000000, 0, -68), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -67)], (0)), 100000000, 0, -66), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -65), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -64), 0), 100000000, 0, -63), 0), 100000000, 0, -62), 0), 100000000, 0, -61), 0), 100000000, 0, -60), 0, (("tactics/ind_tables.mli", 51, 1968, 1968), ("tactics/ind_tables.mli", 52, 2039, 2073), 0), 0, Tag1 ("Ind_tables", 13)), 0); Tag3 (("Locmap", 1179), 0, (Tag1 ([Tag1 (("t", 1186), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("tactics/ind_tables.mli", 55, 2095, 2097), ("tactics/ind_tables.mli", 55, 2095, 2103), 0), 0, 0, 0, Tag1 ("Ind_tables", 14)), 1, 0); (("default", 1187), ((Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -149)], (0)), 100000000, 0, -148), (Tag3 ((("t", 1186)), 0, (0)), 100000000, 0, -147), 0), 100000000, 0, -146), 0, (("tactics/ind_tables.mli", 57, 2105, 2107), ("tactics/ind_tables.mli", 57, 2105, 2138), 0), 0, Tag1 ("Ind_tables", 15)), 0); (("make", 1188), ((Tag1 (Tag1 ("default"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -145)], (0)), 100000000, 0, -144), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "MutInd"), "t"), 0, (0)), 100000000, 0, -143), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -142)], (0)), 100000000, 0, -141)], (0)), 100000000, 0, -140), (Tag3 ((("t", 1186)), 0, (0)), 100000000, 0, -139), 0), 100000000, 0, -138), 0), 100000000, 0, -137), 0), 100000000, 0, -136), 0, (("tactics/ind_tables.mli", 58, 2139, 2141), ("tactics/ind_tables.mli", 62, 2337, 2345), 0), 0, Tag1 ("Ind_tables", 16)), 0); (("lookup", 1189), ((Tag1 (("locmap"), (Tag3 ((("t", 1186)), 0, (0)), 100000000, 0, -135), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -134), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -133)], (0)), 100000000, 0, -132), 0), 100000000, 0, -131), 0), 100000000, 0, -130), 0, (("tactics/ind_tables.mli", 63, 2346, 2348), ("tactics/ind_tables.mli", 63, 2346, 2404), 0), 0, Tag1 ("Ind_tables", 17)), 0)]), 0, (("tactics/ind_tables.mli", 54, 2075, 2075), ("tactics/ind_tables.mli", 64, 2405, 2408), 0), Tag1 ("Ind_tables", 18)), 0, 0); (("define_mutual_scheme", 1180), ((Tag1 (Tag1 ("locmap"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("Locmap", 1179)), "t"), 0, (0)), 100000000, 0, -59)], (0)), 100000000, 0, -58), (Tag1 (0, (Tag3 ((("scheme_kind", 1171)), [(Tag3 ((("mutual", 1169)), 0, (0)), 100000000, 0, -57)], (0)), 100000000, 0, -56), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -54); (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -55)]), 100000000, 0, -53)], (0)), 100000000, 0, -52), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "MutInd"), "t"), 0, (0)), 100000000, 0, -51), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -50), 0), 100000000, 0, -49), 0), 100000000, 0, -48), 0), 100000000, 0, -47), 0), 100000000, 0, -46), 0, (("tactics/ind_tables.mli", 66, 2410, 2410), ("tactics/ind_tables.mli", 67, 2479, 2518), 0), 0, Tag1 ("Ind_tables", 19)), 0); (("find_scheme", 1181), ((Tag1 (0, (Tag3 ((("scheme_kind", 1171)), [((("a")), 100000000, 0, -45)], (0)), 100000000, 0, -44), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -43), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -42)], (0)), 100000000, 0, -41), 0), 100000000, 0, -40), 0), 100000000, 0, -39), 0, (("tactics/ind_tables.mli", 70, 2593, 2593), ("tactics/ind_tables.mli", 70, 2593, 2669), 0), 0, Tag1 ("Ind_tables", 20)), 0); (("lookup_scheme", 1182), ((Tag1 (0, (Tag3 ((("scheme_kind", 1171)), [((("a")), 100000000, 0, -38)], (0)), 100000000, 0, -37), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -36), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -35)], (0)), 100000000, 0, -34), 0), 100000000, 0, -33), 0), 100000000, 0, -32), 0, (("tactics/ind_tables.mli", 73, 2741, 2741), ("tactics/ind_tables.mli", 73, 2741, 2809), 0), 0, Tag1 ("Ind_tables", 21)), 0); (("local_lookup_scheme", 1183), ((Tag1 (0, (Tag3 ((("handle", 1172)), 0, (0)), 100000000, 0, -31), (Tag1 (0, (Tag3 ((("scheme_kind", 1171)), [((("a")), 100000000, 0, -30)], (0)), 100000000, 0, -29), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -28), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -27)], (0)), 100000000, 0, -26), 0), 100000000, 0, -25), 0), 100000000, 0, -24), 0), 100000000, 0, -23), 0, (("tactics/ind_tables.mli", 76, 2890, 2890), ("tactics/ind_tables.mli", 76, 2890, 2974), 0), 0, Tag1 ("Ind_tables", 22)), 0); (("pr_scheme_kind", 1184), ((Tag1 (0, (Tag3 ((("scheme_kind", 1171)), [((("a")), 100000000, 0, -22)], (0)), 100000000, 0, -21), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -20), 0), 100000000, 0, -19), 0, (("tactics/ind_tables.mli", 78, 2976, 2976), ("tactics/ind_tables.mli", 78, 2976, 3019), 0), 0, Tag1 ("Ind_tables", 23)), 0); (("declare_definition_scheme", 1185), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag1 (("internal"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -18), (Tag1 (("univs"), (Tag3 (Tag1 ((Tag2 ("UState")), "named_universes_entry"), 0, (0)), 100000000, 0, -17), (Tag1 (("role"), (Tag3 (Tag1 ((Tag2 ("Evd")), "side_effect_role"), 0, (0)), 100000000, 0, -16), (Tag1 (("name"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -15), (Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -14)], (0)), 100000000, 0, -13), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "t"), 0, (0)), 100000000, 0, -12), (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -10); (Tag3 (Tag1 ((Tag2 ("Evd")), "side_effects"), 0, (0)), 100000000, 0, -11)]), 100000000, 0, -9), 0), 100000000, 0, -8), 0), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3)], (0)), 100000000, 0, -2), 0, (("tactics/ind_tables.mli", 80, 3021, 3021), ("tactics/ind_tables.mli", 87, 3193, 3233), 0), 0, Tag1 ("Ind_tables", 24)), 0)], "Ind_tables", [("Ind_tables", ("\1586xu\131C\135\176\222\242\178r\031D,\196")); ("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Vmemitcodes", ("wCd\138\165\158DD\241gH\236.\210\197\247")); ("Vmbytecodes", ("\025\021\151\137Dx\149W\236+[\143f\208\160\016")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Unix", (":B72R\011\005Sj\189)\011\239PH\254")); ("UnivSubst", ("\190qu\031mc\130\181\003G]\132\"\219m)")); ("UnivProblem", ("6'\161\018\181\001.\253\000\141a6\171\1727\155")); ("UnivNames", ("%\151_\209%+JM$n\001\232\194n\178N")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UState", ("SD\203\215|\136\n\251\239\208\148\215C\n\167\005")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Summary", ("\148G\135\226\024L3\246\021\028U\146\164`\253\250")); ("Store", ("/dT\252\145\179pq\216{\181\206\190K+U")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("Section", ("\245\207\b\021\142v=\155#w\246}\"4b\006")); ("Safe_typing", (")\250?\164\145\132\241\127\186\152h+\145\"\237l")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("Range", ("\218\130\001r\237\r\144\171\164\021l\155\196\143sg")); ("Proofview_monad", ("\218\196\189S\147\216\129\221\231\224v\228O\024*\239")); ("Proofview", ("\245\140U\027\236\199\199&\242\156\199YG\250tA")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("Nativevalues", ("8:\007\025e\226c,\001\171\146#l\210\171\152")); ("Nativelib", ("V\239\205Y1\147E:,\176\196Hy\1483|")); ("Nativecode", ("\190\185\255\006m\012\210\163\138Rz\247\15283\183")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Monad", ("\244\171T\157\194p\187\160\149\195{\132\222\020\253\148")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Logic_monad", ("\130\157\160Q\163vQ\137\184\2242\209\128\024\220i")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Libnames", ("fp\0255\167\162\209\153\137\161\169#\246\193\003\198")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hook", ("\183\194\223\003\155\169',\187\240a;E\b\1396")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Genlambda", ("\170}\024\241\141\222\136S\169\219\2212i\134KI")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evd", ("\211\205p\193\216\129r\006\239oN\142ar\196\175")); ("Evar_kinds", ("\023L\186\132\218}\254\221\185\198\220\200h\003{\021")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Environ", ("\171b\1579\229<\003Z\147IL\225X\254\182\204")); ("Entries", ("\172\201\198\221Ap\027_{\174\141C\021\";p")); ("EConstr", ("\201aW\156\157;N\004\201V\208\006L\166\211)")); ("Dyn", ("\131z`\205v\2306\007x\027&K.?;\169")); ("Declarations", ("\239\137n\019\030w$\182\166z^{\b\206\163\175")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Conversion", ("\158\150&\195M\tv\127|\029\158RRK\211A")); ("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CUnix", ("\140Zl\153\167\011J\015\005|th\247OTu")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CEphemeron", ("\204I\179-\206(x4\173\229\250\001PkH\151")); ("CDebug", ("^4\210p7\239!3\138\138\213?\239`\250\157")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])

  ref

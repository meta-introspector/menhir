type ('a, 'b) t = ('a, 'b) Stdcompat__init.either = Left of 'a | Right of 'b
val left : 'a -> ('a, 'b) t
val right : 'b -> ('a, 'b) t
val is_left : ('a, 'b) t -> bool
val is_right : ('a, 'b) t -> bool
val find_left : ('a, 'b) t -> 'a option
val find_right : ('a, 'b) t -> 'b option
val map_left : ('a1 -> 'a2) -> ('a1, 'b) t -> ('a2, 'b) t
val map_right : ('b1 -> 'b2) -> ('a, 'b1) t -> ('a, 'b2) t
val map :
  left:('a1 -> 'a2) -> right:('b1 -> 'b2) -> ('a1, 'b1) t -> ('a2, 'b2) t
val fold : left:('a -> 'c) -> right:('b -> 'c) -> ('a, 'b) t -> 'c
val iter : left:('a -> unit) -> right:('b -> unit) -> ('a, 'b) t -> unit
val for_all : left:('a -> bool) -> right:('b -> bool) -> ('a, 'b) t -> bool
val equal :
  left:('a -> 'a -> bool) ->
  right:('b -> 'b -> bool) -> ('a, 'b) t -> ('a, 'b) t -> bool
val compare :
  left:('a -> 'a -> int) ->
  ("DEBUG:rule", [Tag1 (("t", 342), ([((("a")), 100000000, 0, -119); ((("b")), 100000000, 0, -120)], 2, Tag1 ([(("Left", 270), ([((("a")), 100000000, 0, -119)]), 0, (("stdcompat__either_s.mli", 4, 73, 75), ("stdcompat__either_s.mli", 4, 73, 87), 0), 0, Tag1 ("Stdcompat__either_s", 1)); (("Right", 271), ([((("b")), 100000000, 0, -120)]), 0, (("stdcompat__either_s.mli", 5, 89, 91), ("stdcompat__either_s.mli", 5, 89, 104), 0), 0, Tag1 ("Stdcompat__either_s", 2))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Stdcompat__init")), "either"), [((("a")), 100000000, 0, -119); ((("b")), 100000000, 0, -120)], (0)), 100000000, 0, -118)), [25; 25], [0; 0], 0, 0, (("stdcompat__either_s.mli", 3, 21, 21), ("stdcompat__either_s.mli", 5, 89, 104), 0), 0, 0, 0, Tag1 ("Stdcompat__either_s", 0)), 1, 0); (("left", 343), ((Tag1 (0, ((("a")), 100000000, 0, -116), (Tag3 ((("t", 342)), [((("a")), 100000000, 0, -116); ((("b")), 100000000, 0, -117)], (0)), 100000000, 0, -115), 0), 100000000, 0, -114), 0, (("stdcompat__either_s.mli", 17, 311, 311), ("stdcompat__either_s.mli", 17, 311, 338), 0), 0, Tag1 ("Stdcompat__either_s", 3)), 0); (("right", 344), ((Tag1 (0, ((("b")), 100000000, 0, -113), (Tag3 ((("t", 342)), [((("a")), 100000000, 0, -112); ((("b")), 100000000, 0, -113)], (0)), 100000000, 0, -111), 0), 100000000, 0, -110), 0, (("stdcompat__either_s.mli", 20, 390, 390), ("stdcompat__either_s.mli", 20, 390, 418), 0), 0, Tag1 ("Stdcompat__either_s", 4)), 0); (("is_left", 345), ((Tag1 (0, (Tag3 ((("t", 342)), [((("a")), 100000000, 0, -108); ((("b")), 100000000, 0, -109)], (0)), 100000000, 0, -107), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -106), 0), 100000000, 0, -105), 0, (("stdcompat__either_s.mli", 23, 471, 471), ("stdcompat__either_s.mli", 23, 471, 503), 0), 0, Tag1 ("Stdcompat__either_s", 5)), 0); (("is_right", 346), ((Tag1 (0, (Tag3 ((("t", 342)), [((("a")), 100000000, 0, -103); ((("b")), 100000000, 0, -104)], (0)), 100000000, 0, -102), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -101), 0), 100000000, 0, -100), 0, (("stdcompat__either_s.mli", 26, 560, 560), ("stdcompat__either_s.mli", 26, 560, 593), 0), 0, Tag1 ("Stdcompat__either_s", 6)), 0); (("find_left", 347), ((Tag1 (0, (Tag3 ((("t", 342)), [((("a")), 100000000, 0, -97); ((("b")), 100000000, 0, -99)], (0)), 100000000, 0, -98), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -97)], (0)), 100000000, 0, -96), 0), 100000000, 0, -95), 0, (("stdcompat__either_s.mli", 29, 651, 651), ("stdcompat__either_s.mli", 29, 651, 690), 0), 0, Tag1 ("Stdcompat__either_s", 7)), 0); (("find_right", 348), ((Tag1 (0, (Tag3 ((("t", 342)), [((("a")), 100000000, 0, -94); ((("b")), 100000000, 0, -92)], (0)), 100000000, 0, -93), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -92)], (0)), 100000000, 0, -91), 0), 100000000, 0, -90), 0, (("stdcompat__either_s.mli", 32, 754, 754), ("stdcompat__either_s.mli", 32, 754, 794), 0), 0, Tag1 ("Stdcompat__either_s", 8)), 0); (("map_left", 349), ((Tag1 (0, (Tag1 (0, ((("a1")), 100000000, 0, -88), ((("a2")), 100000000, 0, -85), 0), 100000000, 0, -89), (Tag1 (0, (Tag3 ((("t", 342)), [((("a1")), 100000000, 0, -88); ((("b")), 100000000, 0, -86)], (0)), 100000000, 0, -87), (Tag3 ((("t", 342)), [((("a2")), 100000000, 0, -85); ((("b")), 100000000, 0, -86)], (0)), 100000000, 0, -84), 0), 100000000, 0, -83), 0), 100000000, 0, -82), 0, (("stdcompat__either_s.mli", 35, 859, 859), ("stdcompat__either_s.mli", 35, 859, 916), 0), 0, Tag1 ("Stdcompat__either_s", 9)), 0); (("map_right", 350), ((Tag1 (0, (Tag1 (0, ((("b1")), 100000000, 0, -80), ((("b2")), 100000000, 0, -78), 0), 100000000, 0, -81), (Tag1 (0, (Tag3 ((("t", 342)), [((("a")), 100000000, 0, -77); ((("b1")), 100000000, 0, -80)], (0)), 100000000, 0, -79), (Tag3 ((("t", 342)), [((("a")), 100000000, 0, -77); ((("b2")), 100000000, 0, -78)], (0)), 100000000, 0, -76), 0), 100000000, 0, -75), 0), 100000000, 0, -74), 0, (("stdcompat__either_s.mli", 38, 998, 998), ("stdcompat__either_s.mli", 38, 998, 1056), 0), 0, Tag1 ("Stdcompat__either_s", 10)), 0); (("map", 351), ((Tag1 (("left"), (Tag1 (0, ((("a1")), 100000000, 0, -70), ((("a2")), 100000000, 0, -67), 0), 100000000, 0, -73), (Tag1 (("right"), (Tag1 (0, ((("b1")), 100000000, 0, -71), ((("b2")), 100000000, 0, -68), 0), 100000000, 0, -72), (Tag1 (0, (Tag3 ((("t", 342)), [((("a1")), 100000000, 0, -70); ((("b1")), 100000000, 0, -71)], (0)), 100000000, 0, -69), (Tag3 ((("t", 342)), [((("a2")), 100000000, 0, -67); ((("b2")), 100000000, 0, -68)], (0)), 100000000, 0, -66), 0), 100000000, 0, -65), 0), 100000000, 0, -64), 0), 100000000, 0, -63), 0, (("stdcompat__either_s.mli", 41, 1139, 1139), ("stdcompat__either_s.mli", 42, 1149, 1222), 0), 0, Tag1 ("Stdcompat__either_s", 11)), 0); (("fold", 352), ((Tag1 (("left"), (Tag1 (0, ((("a")), 100000000, 0, -59), ((("c")), 100000000, 0, -57), 0), 100000000, 0, -62), (Tag1 (("right"), (Tag1 (0, ((("b")), 100000000, 0, -60), ((("c")), 100000000, 0, -57), 0), 100000000, 0, -61), (Tag1 (0, (Tag3 ((("t", 342)), [((("a")), 100000000, 0, -59); ((("b")), 100000000, 0, -60)], (0)), 100000000, 0, -58), ((("c")), 100000000, 0, -57), 0), 100000000, 0, -56), 0), 100000000, 0, -55), 0), 100000000, 0, -54), 0, (("stdcompat__either_s.mli", 47, 1338, 1338), ("stdcompat__either_s.mli", 47, 1338, 1404), 0), 0, Tag1 ("Stdcompat__either_s", 12)), 0); (("iter", 353), ((Tag1 (("left"), (Tag1 (0, ((("a")), 100000000, 0, -48), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -53), 0), 100000000, 0, -52), (Tag1 (("right"), (Tag1 (0, ((("b")), 100000000, 0, -49), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -51), 0), 100000000, 0, -50), (Tag1 (0, (Tag3 ((("t", 342)), [((("a")), 100000000, 0, -48); ((("b")), 100000000, 0, -49)], (0)), 100000000, 0, -47), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -46), 0), 100000000, 0, -45), 0), 100000000, 0, -44), 0), 100000000, 0, -43), 0, (("stdcompat__either_s.mli", 51, 1499, 1499), ("stdcompat__either_s.mli", 51, 1499, 1571), 0), 0, Tag1 ("Stdcompat__either_s", 13)), 0); (("for_all", 354), ((Tag1 (("left"), (Tag1 (0, ((("a")), 100000000, 0, -37), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -42), 0), 100000000, 0, -41), (Tag1 (("right"), (Tag1 (0, ((("b")), 100000000, 0, -38), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -40), 0), 100000000, 0, -39), (Tag1 (0, (Tag3 ((("t", 342)), [((("a")), 100000000, 0, -37); ((("b")), 100000000, 0, -38)], (0)), 100000000, 0, -36), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -35), 0), 100000000, 0, -34), 0), 100000000, 0, -33), 0), 100000000, 0, -32), 0, (("stdcompat__either_s.mli", 55, 1672, 1672), ("stdcompat__either_s.mli", 55, 1672, 1747), 0), 0, Tag1 ("Stdcompat__either_s", 14)), 0); (("equal", 355), ((Tag1 (("left"), (Tag1 (0, ((("a")), 100000000, 0, -23), (Tag1 (0, ((("a")), 100000000, 0, -23), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -31), 0), 100000000, 0, -30), 0), 100000000, 0, -29), (Tag1 (("right"), (Tag1 (0, ((("b")), 100000000, 0, -24), (Tag1 (0, ((("b")), 100000000, 0, -24), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -28), 0), 100000000, 0, -27), 0), 100000000, 0, -26), (Tag1 (0, (Tag3 ((("t", 342)), [((("a")), 100000000, 0, -23); ((("b")), 100000000, 0, -24)], (0)), 100000000, 0, -25), (Tag1 (0, (Tag3 ((("t", 342)), [((("a")), 100000000, 0, -23); ((("b")), 100000000, 0, -24)], (0)), 100000000, 0, -22), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -21), 0), 100000000, 0, -20), 0), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("stdcompat__either_s.mli", 60, 1857, 1857), ("stdcompat__either_s.mli", 62, 1898, 1962), 0), 0, Tag1 ("Stdcompat__either_s", 15)), 0); (("compare", 356), ((Tag1 (("left"), (Tag1 (0, ((("a")), 100000000, 0, -8), (Tag1 (0, ((("a")), 100000000, 0, -8), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -16), 0), 100000000, 0, -15), 0), 100000000, 0, -14), (Tag1 (("right"), (Tag1 (0, ((("b")), 100000000, 0, -9), (Tag1 (0, ((("b")), 100000000, 0, -9), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -13), 0), 100000000, 0, -12), 0), 100000000, 0, -11), (Tag1 (0, (Tag3 ((("t", 342)), [((("a")), 100000000, 0, -8); ((("b")), 100000000, 0, -9)], (0)), 100000000, 0, -10), (Tag1 (0, (Tag3 ((("t", 342)), [((("a")), 100000000, 0, -8); ((("b")), 100000000, 0, -9)], (0)), 100000000, 0, -7), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("stdcompat__either_s.mli", 68, 2104, 2104), ("stdcompat__either_s.mli", 70, 2146, 2208), 0), 0, Tag1 ("Stdcompat__either_s", 16)), 0)], "Stdcompat__either", [("Stdcompat__either", ("qX\250-\185d\"\170Y\175\015\134^k\129u")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Stdcompat__init", ("r\254q\255\217]\232\239'\192d\165\222\016\157\133")); ("Stdcompat__either_s", ("\173\222\159\183\229\144\144H2H\224\149\217{\162j")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
right:('b -> 'b -> int) -> ('a, 'b) t -> ('a, 'b) t -> int

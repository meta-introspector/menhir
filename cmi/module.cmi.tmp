module Arg :
  sig
    type 'a t = { name : Name.t option; signature : 'a; }
    type 'a arg = 'a t
    val map : ('a -> 'b) -> 'a arg -> 'b arg
    val pp :
      (Format.formatter -> 'a -> unit) ->
      Format.formatter -> 'a arg option -> unit
    val reflect :
      (Format.formatter -> 'a -> unit) ->
      Format.formatter -> 'a arg option -> unit
    val sch : 'a Schematic.t -> 'a t Schematic.t
    val pp_s :
      (Format.formatter -> 'a -> unit) ->
      Format.formatter -> 'a arg option list -> unit
  end
module Divergence :
  sig
    type origin = First_class_module | External
    type t = { root : Name.t option; origin : origin; loc : Uloc.t; }
    val pp : Format.formatter -> t -> unit
  end
module Origin :
  sig
    type t =
        Unit of { source : Pkg.t; path : Namespaced.t; }
      | Submodule
      | Namespace
      | First_class
      | Arg
      | Phantom of bool * Divergence.t
    val at_most : t -> t -> t
    val pp : Format.formatter -> t -> unit
    val reflect : Format.formatter -> t -> unit
    val sch : t Schematic.t
  end
type origin = Origin.t
type extended = private Extended
type simple = private Simple
type tracked_signature = { origin : Origin.t; signature : signature; }
and _ ty =
    Sig : tracked_signature -> 'any ty
  | Alias : { path : Namespaced.t; phantom : Divergence.t option;
    } -> extended ty
  | Abstract : Id.t -> 'any ty
  | Fun : 'a ty Arg.t option * 'a ty -> 'a ty
  | Link : Namespaced.t -> extended ty
  | Namespace : dict -> extended ty
and t = extended ty
and definition = { modules : dict; module_types : dict; }
and signature =
    Blank
  | Exact of definition
  | Divergence of { point : Divergence.t; before : signature;
      after : definition;
    }
and dict = t Name.map
type sty = simple ty
type named = Name.t * t
type level = Module | Module_type
type modul_ = t
val is_exact : t -> bool
val is_functor : t -> bool
module Dict :
  sig
    type t = dict
    val empty : t
    val of_list : named list -> t
    val union : t -> t -> t
    val weak_union : t -> t -> t
  end
val spirit_away : Divergence.t -> t -> t
val md : tracked_signature -> t
val empty : 'a Name.map
val create : ?origin:origin -> signature -> tracked_signature
val with_namespace : Paths.S.t -> Name.t -> t -> named
val namespace : Namespaced.t -> named
val aliases : t -> Namespaced.t list
val mockup : ?origin:Origin.t -> ?path:Pkg.t -> Name.t -> tracked_signature
val pp : Format.formatter -> t -> unit
val reflect : Format.formatter -> t -> unit
val pp_signature : Format.formatter -> signature -> unit
val reflect_signature : Format.formatter -> signature -> unit
val reflect_modules : Format.formatter -> dict -> unit
val pp_alias : Format.formatter -> Paths.Expr.t option -> unit
val pp_level : Format.formatter -> level -> unit
val pp_mdict : Format.formatter -> dict -> unit
val pp_pair : Format.formatter -> string * t -> unit
val pp_arg : Format.formatter -> t Arg.t -> unit
module Schema :
  sig
    val module' : modul_ Schematic.t
    val m : tracked_signature Schematic.t
  end
module Def :
  sig
    val empty : definition
    val modules : dict -> definition
    val add : definition -> string * t -> definition
    val add_type : definition -> string * t -> definition
    val add_gen : level -> definition -> string * t -> definition
    val merge : definition -> definition -> definition
    val weak_merge : definition -> definition -> definition
    val pp : Format.formatter -> definition -> unit
    val sch : definition Schematic.t
    type t = definition
  end
module Equal :
  sig
    val eq : 'a ty -> 'b ty -> bool
    val dict : Dict.t -> Dict.t -> bool
    val signature : signature -> signature -> bool
  end
module Sig :
  sig
    val card : signature -> int
    val merge : signature -> signature -> signature
    val weak_merge : signature -> signature -> signature
    val diff : signature -> signature -> signature
    val flatten : signature -> definition
    val is_exact : signature -> bool
    val create : named -> signature
    val create_type : named -> signature
    val gen_create : level -> named -> signature
    val of_lists : named list -> named list -> signature
    val of_list : named list -> signature
    val of_list_type : named list -> signature
    val add : signature -> named -> signature
    val add_type : signature -> named -> signature
    val add_gen : level -> signature -> named -> signature
    val empty : signature
    val pp : Format.formatter -> signature -> unit
    val sch : signature Schematic.t
    type t = signature
  end
module Partial :
  sig
    type t = { name : string option; mty : sty; }
    val empty : t
    val is_exact : t -> bool
    val extend : sty -> modul_
    val simple : signature -> t
    val pp : Format.formatter -> t -> unit
    val pp_sty : Format.formatter -> sty -> unit
    val sch : t Schematic.t
    val refresh : Id.seed -> 'any ty -> 'any ty
    val apply : arg:modul_ -> param:modul_ -> body:modul_ -> modul_
    val replace_at :
      level:level ->
      delete:bool -> path:Paths.S.t -> replacement:modul_ -> modul_ -> modul_
    val to_module : ?origin:origin -> t -> modul_
    val to_arg : t -> modul_
    val of_extended_mty : modul_ -> sty
    val of_extended : ?name:Name.t -> modul_ -> t
    val of_module : Name.t -> tracked_signature -> t
    val pseudo_module : Name.t -> dict -> t
    val is_functor : t -> bool
    val to_sign : t -> (signature, signature) result
  end
module Namespace :
  sig
    type t = Dict.t
    val from_module : Namespaced.t -> Origin.t -> Sig.t -> t
    val merge : t -> t -> t
    val merge_all : t list -> t
    val sch : t Schematic.t("DEBUG:rule", [Tag3 (("Arg", 777), 0, (Tag1 ([Tag1 (("t", 820), ([((("a")), 100000000, 0, -197)], 1, [[(("name", 278), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Name")), "t"), 0, (0)), 100000000, 0, -196)], (0)), 100000000, 0, -195), (("lib/module.mli", 5, 63, 81), ("lib/module.mli", 5, 63, 102), 0), 0, Tag1 ("Module", 1)); (("signature", 279), 0, ((("a")), 100000000, 0, -197), (("lib/module.mli", 5, 63, 103), ("lib/module.mli", 5, 63, 118), 0), 0, Tag1 ("Module", 2))]], 1, 0, [25], [0], 0, 0, (("lib/module.mli", 5, 63, 67), ("lib/module.mli", 5, 63, 120), 0), 0, 0, 0, Tag1 ("Module", 0)), 1, 0); Tag1 (("arg", 821), ([((("a")), 100000000, 0, -194)], 1, 0, 1, ((Tag3 ((("t", 820)), [((("a")), 100000000, 0, -194)], (0)), 100000000, 0, -193)), [25], [0], 0, 0, (("lib/module.mli", 6, 121, 125), ("lib/module.mli", 6, 121, 143), 0), 0, 0, 0, Tag1 ("Module", 3)), 1, 0); (("map", 822), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -191), ((("b")), 100000000, 0, -189), 0), 100000000, 0, -192), (Tag1 (0, (Tag3 ((("arg", 821)), [((("a")), 100000000, 0, -191)], (0)), 100000000, 0, -190), (Tag3 ((("arg", 821)), [((("b")), 100000000, 0, -189)], (0)), 100000000, 0, -188), 0), 100000000, 0, -187), 0), 100000000, 0, -186), 0, (("lib/module.mli", 8, 145, 149), ("lib/module.mli", 8, 145, 186), 0), 0, Tag1 ("Module", 4)), 0); (("pp", 823), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -185), (Tag1 (0, ((("a")), 100000000, 0, -180), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -184), 0), 100000000, 0, -183), 0), 100000000, 0, -182), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -181), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("arg", 821)), [((("a")), 100000000, 0, -180)], (0)), 100000000, 0, -179)], (0)), 100000000, 0, -178), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -177), 0), 100000000, 0, -176), 0), 100000000, 0, -175), 0), 100000000, 0, -174), 0, (("lib/module.mli", 10, 188, 192), ("lib/module.mli", 12, 243, 290), 0), 0, Tag1 ("Module", 5)), 0); (("reflect", 824), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -173), (Tag1 (0, ((("a")), 100000000, 0, -168), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -172), 0), 100000000, 0, -171), 0), 100000000, 0, -170), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -169), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("arg", 821)), [((("a")), 100000000, 0, -168)], (0)), 100000000, 0, -167)], (0)), 100000000, 0, -166), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -165), 0), 100000000, 0, -164), 0), 100000000, 0, -163), 0), 100000000, 0, -162), 0, (("lib/module.mli", 15, 327, 331), ("lib/module.mli", 17, 387, 434), 0), 0, Tag1 ("Module", 6)), 0); (("sch", 825), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Schematic")), "t"), [((("a")), 100000000, 0, -160)], (0)), 100000000, 0, -161), (Tag3 (Tag1 ((Tag2 ("Schematic")), "t"), [(Tag3 ((("t", 820)), [((("a")), 100000000, 0, -160)], (0)), 100000000, 0, -159)], (0)), 100000000, 0, -158), 0), 100000000, 0, -157), 0, (("lib/module.mli", 19, 436, 440), ("lib/module.mli", 19, 436, 483), 0), 0, Tag1 ("Module", 8)), 0); (("pp_s", 826), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -156), (Tag1 (0, ((("a")), 100000000, 0, -151), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -155), 0), 100000000, 0, -154), 0), 100000000, 0, -153), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -152), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("arg", 821)), [((("a")), 100000000, 0, -151)], (0)), 100000000, 0, -150)], (0)), 100000000, 0, -149)], (0)), 100000000, 0, -148), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -147), 0), 100000000, 0, -146), 0), 100000000, 0, -145), 0), 100000000, 0, -144), 0, (("lib/module.mli", 21, 485, 489), ("lib/module.mli", 23, 542, 594), 0), 0, Tag1 ("Module", 9)), 0)]), 0, (("lib/module.mli", 3, 44, 44), ("lib/module.mli", 24, 595, 600), 0), Tag1 ("Module", 10)), 0, 0); Tag3 (("Divergence", 778), 0, (Tag1 ([Tag1 (("origin", 827), (0, 0, Tag1 ([(("First_class_module", 488), (0), 0, (("lib/module.mli", 37, 1095, 1099), ("lib/module.mli", 37, 1095, 1119), 0), 0, Tag1 ("Module", 12)); (("External", 489), (0), 0, (("lib/module.mli", 38, 1120, 1124), ("lib/module.mli", 38, 1120, 1134), 0), 0, Tag1 ("Module", 13))], 0), 1, 0, 0, 0, 0, 0, (("lib/module.mli", 36, 1079, 1081), ("lib/module.mli", 38, 1120, 1134), 0), 0, 1, 0, Tag1 ("Module", 11)), 1, 0); Tag1 (("t", 828), (0, 0, [[(("root", 491), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Name")), "t"), 0, (0)), 100000000, 0, -204)], (0)), 100000000, 0, -203), (("lib/module.mli", 40, 1136, 1149), ("lib/module.mli", 40, 1136, 1169), 0), 0, Tag1 ("Module", 15)); (("origin", 492), 0, (Tag3 ((("origin", 827)), 0, (0)), 100000000, 0, -205), (("lib/module.mli", 41, 1170, 1183), ("lib/module.mli", 41, 1170, 1197), 0), 0, Tag1 ("Module", 16)); (("loc", 496), 0, (Tag3 (Tag1 ((Tag2 ("Uloc")), "t"), 0, (0)), 100000000, 0, -206), (("lib/module.mli", 42, 1198, 1211), ("lib/module.mli", 42, 1198, 1222), 0), 0, Tag1 ("Module", 17))]], 1, 0, 0, 0, 0, 0, (("lib/module.mli", 40, 1136, 1138), ("lib/module.mli", 43, 1223, 1235), 0), 0, 0, 0, Tag1 ("Module", 14)), 1, 0); (("pp", 829), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -202), (Tag1 (0, (Tag3 ((("t", 828)), 0, (0)), 100000000, 0, -201), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -200), 0), 100000000, 0, -199), 0), 100000000, 0, -198), 0, (("lib/module.mli", 45, 1237, 1239), ("lib/module.mli", 45, 1237, 1276), 0), 0, Tag1 ("Module", 18)), 0)]), 0, (("lib/module.mli", 32, 949, 949), ("lib/module.mli", 47, 1278, 1281), 0), Tag1 ("Module", 19)), 0, 0); Tag3 (("Origin", 779), 0, (Tag1 ([Tag1 (("t", 830), (0, 0, Tag1 ([(("Unit", 500), Tag1 ([(("source", 527), 0, (Tag3 (Tag1 ((Tag2 ("Pkg")), "t"), 0, (0)), 100000000, 0, -224), (("lib/module.mli", 53, 1335, 1350), ("lib/module.mli", 53, 1335, 1363), 0), 0, Tag1 ("Module", 21)); (("path", 553), 0, (Tag3 (Tag1 ((Tag2 ("Namespaced")), "t"), 0, (0)), 100000000, 0, -225), (("lib/module.mli", 53, 1335, 1364), ("lib/module.mli", 53, 1335, 1381), 0), 0, Tag1 ("Module", 22))]), 0, (("lib/module.mli", 53, 1335, 1339), ("lib/module.mli", 53, 1335, 1382), 0), 0, Tag1 ("Module", 23)); (("Submodule", 554), (0), 0, (("lib/module.mli", 55, 1434, 1438), ("lib/module.mli", 55, 1434, 1449), 0), 0, Tag1 ("Module", 24)); (("Namespace", 555), (0), 0, (("lib/module.mli", 56, 1478, 1482), ("lib/module.mli", 56, 1478, 1493), 0), 0, Tag1 ("Module", 25)); (("First_class", 556), (0), 0, (("lib/module.mli", 57, 1533, 1537), ("lib/module.mli", 57, 1533, 1550), 0), 0, Tag1 ("Module", 26)); (("Arg", 557), (0), 0, (("lib/module.mli", 58, 1586, 1590), ("lib/module.mli", 58, 1586, 1595), 0), 0, Tag1 ("Module", 27)); (("Phantom", 558), ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -226); (Tag3 (Tag1 ((("Divergence", 778)), "t"), 0, (0)), 100000000, 0, -227)]), 0, (("lib/module.mli", 59, 1642, 1646), ("lib/module.mli", 59, 1642, 1678), 0), 0, Tag1 ("Module", 28))], 0), 1, 0, 0, 0, 0, 0, (("lib/module.mli", 52, 1324, 1326), ("lib/module.mli", 59, 1642, 1678), 0), 0, 0, 0, Tag1 ("Module", 20)), 1, 0); (("at_most", 831), ((Tag1 (0, (Tag3 ((("t", 830)), 0, (0)), 100000000, 0, -223), (Tag1 (0, (Tag3 ((("t", 830)), 0, (0)), 100000000, 0, -222), (Tag3 ((("t", 830)), 0, (0)), 100000000, 0, -221), 0), 100000000, 0, -220), 0), 100000000, 0, -219), 0, (("lib/module.mli", 65, 1889, 1891), ("lib/module.mli", 65, 1889, 1916), 0), 0, Tag1 ("Module", 34)), 0); (("pp", 832), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -218), (Tag1 (0, (Tag3 ((("t", 830)), 0, (0)), 100000000, 0, -217), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -216), 0), 100000000, 0, -215), 0), 100000000, 0, -214), 0, (("lib/module.mli", 71, 2100, 2102), ("lib/module.mli", 71, 2100, 2140), 0), 0, Tag1 ("Module", 35)), 0); (("reflect", 833), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -213), (Tag1 (0, (Tag3 ((("t", 830)), 0, (0)), 100000000, 0, -212), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -211), 0), 100000000, 0, -210), 0), 100000000, 0, -209), 0, (("lib/module.mli", 72, 2141, 2143), ("lib/module.mli", 72, 2141, 2186), 0), 0, Tag1 ("Module", 36)), 0); (("sch", 834), ((Tag3 (Tag1 ((Tag2 ("Schematic")), "t"), [(Tag3 ((("t", 830)), 0, (0)), 100000000, 0, -208)], (0)), 100000000, 0, -207), 0, (("lib/module.mli", 73, 2187, 2189), ("lib/module.mli", 73, 2187, 2211), 0), 0, Tag1 ("Module", 37)), 0)]), 0, (("lib/module.mli", 51, 1305, 1305), ("lib/module.mli", 74, 2212, 2215), 0), Tag1 ("Module", 38)), 0, 0); Tag1 (("origin", 780), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Origin", 779)), "t"), 0, (0)), 100000000, 0, -143)), 0, 0, 0, 0, (("lib/module.mli", 75, 2216, 2216), ("lib/module.mli", 75, 2216, 2238), 0), 0, 0, 0, Tag1 ("Module", 39)), 1, 0); Tag1 (("extended", 781), (0, 0, Tag1 ([(("Extended", 566), (0), 0, (("lib/module.mli", 80, 2265, 2289), ("lib/module.mli", 80, 2265, 2297), 0), 0, Tag1 ("Module", 42))], 0), 0, 0, 0, 0, 0, 0, (("lib/module.mli", 80, 2265, 2265), ("lib/module.mli", 80, 2265, 2297), 0), 0, 1, 0, Tag1 ("Module", 41)), 1, 0); Tag1 (("simple", 782), (0, 0, Tag1 ([(("Simple", 568), (0), 0, (("lib/module.mli", 81, 2298, 2320), ("lib/module.mli", 81, 2298, 2326), 0), 0, Tag1 ("Module", 44))], 0), 0, 0, 0, 0, 0, 0, (("lib/module.mli", 81, 2298, 2298), ("lib/module.mli", 81, 2298, 2326), 0), 0, 1, 0, Tag1 ("Module", 43)), 1, 0); Tag1 (("tracked_signature", 783), (0, 0, [[(("origin", 575), 0, (Tag3 (Tag1 ((("Origin", 779)), "t"), 0, (0)), 100000000, 0, -141), (("lib/module.mli", 85, 2392, 2394), ("lib/module.mli", 85, 2392, 2412), 0), 0, Tag1 ("Module", 51)); (("signature", 576), 0, (Tag3 ((("signature", 787)), 0, (0)), 100000000, 0, -142), (("lib/module.mli", 86, 2413, 2415), ("lib/module.mli", 86, 2413, 2437), 0), 0, Tag1 ("Module", 52))]], 1, 0, 0, 0, 0, 0, (("lib/module.mli", 84, 2365, 2365), ("lib/module.mli", 87, 2438, 2439), 0), 0, 0, 0, Tag1 ("Module", 45)), 1, 0); Tag1 (("ty", 784), ([((("_")), 100000000, 0, -140)], 1, Tag1 ([(("Sig", 577), ([(Tag3 ((("tracked_signature", 783)), 0, (0)), 100000000, 0, -119)]), ((Tag3 ((("ty", 784)), [((("any")), 100000000, 0, -118)], (0)), 100000000, 0, -117)), (("lib/module.mli", 92, 2481, 2483), ("lib/module.mli", 92, 2481, 2518), 0), 0, Tag1 ("Module", 53)); (("Alias", 578), Tag1 ([(("path", 579), 0, (Tag3 (Tag1 ((Tag2 ("Namespaced")), "t"), 0, (0)), 100000000, 0, -122), (("lib/module.mli", 95, 2560, 2568), ("lib/module.mli", 95, 2560, 2587), 0), 0, Tag1 ("Module", 54)); (("phantom", 580), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("Divergence", 778)), "t"), 0, (0)), 100000000, 0, -124)], (0)), 100000000, 0, -123), (("lib/module.mli", 99, 2688, 2696), ("lib/module.mli", 99, 2688, 2725), 0), 0, Tag1 ("Module", 55))]), ((Tag3 ((("ty", 784)), [(Tag3 ((("extended", 781)), 0, (0)), 100000000, 0, -121)], (0)), 100000000, 0, -120)), (("lib/module.mli", 93, 2541, 2543), ("lib/module.mli", 114, 3461, 3483), 0), 0, Tag1 ("Module", 56)); (("Abstract", 581), ([(Tag3 (Tag1 ((Tag2 ("Id")), "t"), 0, (0)), 100000000, 0, -127)]), ((Tag3 ((("ty", 784)), [((("any")), 100000000, 0, -126)], (0)), 100000000, 0, -125)), (("lib/module.mli", 116, 3485, 3487), ("lib/module.mli", 116, 3485, 3514), 0), 0, Tag1 ("Module", 57)); (("Fun", 590), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("Arg", 777)), "t"), [(Tag3 ((("ty", 784)), [((("a")), 100000000, 0, -129)], (0)), 100000000, 0, -132)], (0)), 100000000, 0, -131)], (0)), 100000000, 0, -130); (Tag3 ((("ty", 784)), [((("a")), 100000000, 0, -129)], (0)), 100000000, 0, -133)]), ((Tag3 ((("ty", 784)), [((("a")), 100000000, 0, -129)], (0)), 100000000, 0, -128)), (("lib/module.mli", 121, 3647, 3649), ("lib/module.mli", 121, 3647, 3691), 0), 0, Tag1 ("Module", 58)); (("Link", 591), ([(Tag3 (Tag1 ((Tag2 ("Namespaced")), "t"), 0, (0)), 100000000, 0, -136)]), ((Tag3 ((("ty", 784)), [(Tag3 ((("extended", 781)), 0, (0)), 100000000, 0, -135)], (0)), 100000000, 0, -134)), (("lib/module.mli", 123, 3693, 3695), ("lib/module.mli", 123, 3693, 3730), 0), 0, Tag1 ("Module", 59)); (("Namespace", 592), ([(Tag3 ((("dict", 788)), 0, (0)), 100000000, 0, -139)]), ((Tag3 ((("ty", 784)), [(Tag3 ((("extended", 781)), 0, (0)), 100000000, 0, -138)], (0)), 100000000, 0, -137)), (("lib/module.mli", 124, 3765, 3767), ("lib/module.mli", 124, 3765, 3799), 0), 0, Tag1 ("Module", 60))], 0), 1, 0, [63], [0], 0, 0, (("lib/module.mli", 91, 2470, 2470), ("lib/module.mli", 124, 3765, 3799), 0), 0, 0, 0, Tag1 ("Module", 46)), 2, 0); Tag1 (("t", 785), (0, 0, 0, 1, ((Tag3 ((("ty", 784)), [(Tag3 ((("extended", 781)), 0, (0)), 100000000, 0, -116)], (0)), 100000000, 0, -115)), 0, 0, 0, 0, (("lib/module.mli", 127, 3847, 3847), ("lib/module.mli", 127, 3847, 3866), 0), 0, 0, 0, Tag1 ("Module", 47)), 2, 0); Tag1 (("definition", 786), (0, 0, [[(("modules", 593), 0, (Tag3 ((("dict", 788)), 0, (0)), 100000000, 0, -113), (("lib/module.mli", 129, 3868, 3887), ("lib/module.mli", 129, 3868, 3902), 0), 0, Tag1 ("Module", 61)); (("module_types", 594), 0, (Tag3 ((("dict", 788)), 0, (0)), 100000000, 0, -114), (("lib/module.mli", 129, 3868, 3903), ("lib/module.mli", 129, 3868, 3922), 0), 0, Tag1 ("Module", 62))]], 1, 0, 0, 0, 0, 0, (("lib/module.mli", 129, 3868, 3868), ("lib/module.mli", 129, 3868, 3924), 0), 0, 0, 0, Tag1 ("Module", 48)), 2, 0); Tag1 (("signature", 787), (0, 0, Tag1 ([(("Blank", 595), (0), 0, (("lib/module.mli", 131, 3941, 3943), ("lib/module.mli", 131, 3941, 3950), 0), 0, Tag1 ("Module", 63)); (("Exact", 596), ([(Tag3 ((("definition", 786)), 0, (0)), 100000000, 0, -109)]), 0, (("lib/module.mli", 132, 4021, 4023), ("lib/module.mli", 132, 4021, 4044), 0), 0, Tag1 ("Module", 64)); (("Divergence", 597), Tag1 ([(("point", 598), 0, (Tag3 (Tag1 ((("Divergence", 778)), "t"), 0, (0)), 100000000, 0, -110), (("lib/module.mli", 133, 4045, 4065), ("lib/module.mli", 133, 4045, 4085), 0), 0, Tag1 ("Module", 65)); (("before", 599), 0, (Tag3 ((("signature", 787)), 0, (0)), 100000000, 0, -111), (("lib/module.mli", 133, 4045, 4086), ("lib/module.mli", 133, 4045, 4103), 0), 0, Tag1 ("Module", 66)); (("after", 600), 0, (Tag3 ((("definition", 786)), 0, (0)), 100000000, 0, -112), (("lib/module.mli", 133, 4045, 4104), ("lib/module.mli", 133, 4045, 4120), 0), 0, Tag1 ("Module", 67))]), 0, (("lib/module.mli", 133, 4045, 4047), ("lib/module.mli", 133, 4045, 4121), 0), 0, Tag1 ("Module", 68))], 0), 1, 0, 0, 0, 0, 0, (("lib/module.mli", 130, 3925, 3925), ("lib/module.mli", 133, 4045, 4121), 0), 0, 0, 0, Tag1 ("Module", 49)), 2, 0); Tag1 (("dict", 788), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Name")), "map"), [(Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -108)], (0)), 100000000, 0, -107)), 0, 0, 0, 0, (("lib/module.mli", 142, 4394, 4394), ("lib/module.mli", 142, 4394, 4415), 0), 0, 0, 0, Tag1 ("Module", 50)), 2, 0); Tag1 (("sty", 789), (0, 0, 0, 1, ((Tag3 ((("ty", 784)), [(Tag3 ((("simple", 782)), 0, (0)), 100000000, 0, -106)], (0)), 100000000, 0, -105)), 0, 0, 0, 0, (("lib/module.mli", 144, 4417, 4417), ("lib/module.mli", 144, 4417, 4437), 0), 0, 0, 0, Tag1 ("Module", 81)), 1, 0); Tag1 (("named", 790), (0, 0, 0, 1, ((Tag2 ([(Tag3 (Tag1 ((Tag2 ("Name")), "t"), 0, (0)), 100000000, 0, -103); (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -104)]), 100000000, 0, -102)), 0, 0, 0, 0, (("lib/module.mli", 145, 4438, 4438), ("lib/module.mli", 145, 4438, 4461), 0), 0, 0, 0, Tag1 ("Module", 82)), 1, 0); Tag1 (("level", 791), (0, 0, Tag1 ([(("Module", 650), (0), 0, (("lib/module.mli", 147, 4463, 4476), ("lib/module.mli", 147, 4463, 4482), 0), 0, Tag1 ("Module", 84)); (("Module_type", 651), (0), 0, (("lib/module.mli", 147, 4463, 4483), ("lib/module.mli", 147, 4463, 4496), 0), 0, Tag1 ("Module", 85))], 0), 1, 0, 0, 0, 0, 0, (("lib/module.mli", 147, 4463, 4463), ("lib/module.mli", 147, 4463, 4496), 0), 0, 1, 0, Tag1 ("Module", 83)), 1, 0); Tag1 (("modul_", 792), (0, 0, 0, 1, ((Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -101)), 0, 0, 0, 0, (("lib/module.mli", 148, 4497, 4497), ("lib/module.mli", 148, 4497, 4512), 0), 0, 0, 0, Tag1 ("Module", 86)), 1, 0); (("is_exact", 793), ((Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -100), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -99), 0), 100000000, 0, -98), 0, (("lib/module.mli", 151, 4541, 4541), ("lib/module.mli", 151, 4541, 4564), 0), 0, Tag1 ("Module", 87)), 0); (("is_functor", 794), ((Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -97), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -96), 0), 100000000, 0, -95), 0, (("lib/module.mli", 152, 4565, 4565), ("lib/module.mli", 152, 4565, 4591), 0), 0, Tag1 ("Module", 88)), 0); Tag3 (("Dict", 795), 0, (Tag1 ([Tag1 (("t", 835), (0, 0, 0, 1, ((Tag3 ((("dict", 788)), 0, (0)), 100000000, 0, -243)), 0, 0, 0, 0, (("lib/module.mli", 155, 4610, 4612), ("lib/module.mli", 155, 4610, 4625), 0), 0, 0, 0, Tag1 ("Module", 89)), 1, 0); (("empty", 836), ((Tag3 ((("t", 835)), 0, (0)), 100000000, 0, -242), 0, (("lib/module.mli", 156, 4626, 4628), ("lib/module.mli", 156, 4626, 4640), 0), 0, Tag1 ("Module", 90)), 0); (("of_list", 837), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("named", 790)), 0, (0)), 100000000, 0, -241)], (0)), 100000000, 0, -240), (Tag3 ((("t", 835)), 0, (0)), 100000000, 0, -239), 0), 100000000, 0, -238), 0, (("lib/module.mli", 157, 4641, 4643), ("lib/module.mli", 157, 4641, 4671), 0), 0, Tag1 ("Module", 91)), 0); (("union", 838), ((Tag1 (0, (Tag3 ((("t", 835)), 0, (0)), 100000000, 0, -237), (Tag1 (0, (Tag3 ((("t", 835)), 0, (0)), 100000000, 0, -236), (Tag3 ((("t", 835)), 0, (0)), 100000000, 0, -235), 0), 100000000, 0, -234), 0), 100000000, 0, -233), 0, (("lib/module.mli", 158, 4672, 4674), ("lib/module.mli", 158, 4672, 4696), 0), 0, Tag1 ("Module", 92)), 0); (("weak_union", 839), ((Tag1 (0, (Tag3 ((("t", 835)), 0, (0)), 100000000, 0, -232), (Tag1 (0, (Tag3 ((("t", 835)), 0, (0)), 100000000, 0, -231), (Tag3 ((("t", 835)), 0, (0)), 100000000, 0, -230), 0), 100000000, 0, -229), 0), 100000000, 0, -228), 0, (("lib/module.mli", 159, 4697, 4699), ("lib/module.mli", 159, 4697, 4726), 0), 0, Tag1 ("Module", 93)), 0)]), 0, (("lib/module.mli", 154, 4593, 4593), ("lib/module.mli", 160, 4727, 4730), 0), Tag1 ("Module", 94)), 0, 0); (("spirit_away", 796), ((Tag1 (0, (Tag3 (Tag1 ((("Divergence", 778)), "t"), 0, (0)), 100000000, 0, -94), (Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -93), (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -92), 0), 100000000, 0, -91), 0), 100000000, 0, -90), 0, (("lib/module.mli", 162, 4732, 4732), ("lib/module.mli", 162, 4732, 4771), 0), 0, Tag1 ("Module", 95)), 0); (("md", 797), ((Tag1 (0, (Tag3 ((("tracked_signature", 783)), 0, (0)), 100000000, 0, -89), (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -88), 0), 100000000, 0, -87), 0, (("lib/module.mli", 165, 4808, 4808), ("lib/module.mli", 165, 4808, 4838), 0), 0, Tag1 ("Module", 96)), 0); (("empty", 798), ((Tag3 (Tag1 ((Tag2 ("Name")), "map"), [((("a")), 100000000, 0, -86)], (0)), 100000000, 0, -85), 0, (("lib/module.mli", 167, 4840, 4840), ("lib/module.mli", 167, 4840, 4863), 0), 0, Tag1 ("Module", 97)), 0); (("create", 799), ((Tag1 (Tag1 ("origin"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("origin", 780)), 0, (0)), 100000000, 0, -84)], (0)), 100000000, 0, -83), (Tag1 (0, (Tag3 ((("signature", 787)), 0, (0)), 100000000, 0, -82), (Tag3 ((("tracked_signature", 783)), 0, (0)), 100000000, 0, -81), 0), 100000000, 0, -80), 0), 100000000, 0, -79), 0, (("lib/module.mli", 168, 4864, 4864), ("lib/module.mli", 169, 4877, 4927), 0), 0, Tag1 ("Module", 98)), 0); (("with_namespace", 800), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Paths")), "S"), "t"), 0, (0)), 100000000, 0, -78), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Name")), "t"), 0, (0)), 100000000, 0, -77), (Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -76), (Tag3 ((("named", 790)), 0, (0)), 100000000, 0, -75), 0), 100000000, 0, -74), 0), 100000000, 0, -73), 0), 100000000, 0, -72), 0, (("lib/module.mli", 171, 4929, 4929), ("lib/module.mli", 171, 4929, 4982), 0), 0, Tag1 ("Module", 99)), 0); (("namespace", 801), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Namespaced")), "t"), 0, (0)), 100000000, 0, -71), (Tag3 ((("named", 790)), 0, (0)), 100000000, 0, -70), 0), 100000000, 0, -69), 0, (("lib/module.mli", 172, 4983, 4983), ("lib/module.mli", 172, 4983, 5019), 0), 0, Tag1 ("Module", 100)), 0); (("aliases", 802), ((Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -68), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Namespaced")), "t"), 0, (0)), 100000000, 0, -67)], (0)), 100000000, 0, -66), 0), 100000000, 0, -65), 0, (("lib/module.mli", 175, 5022, 5022), ("lib/module.mli", 175, 5022, 5057), 0), 0, Tag1 ("Module", 101)), 0); (("mockup", 803), ((Tag1 (Tag1 ("origin"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("Origin", 779)), "t"), 0, (0)), 100000000, 0, -64)], (0)), 100000000, 0, -63), (Tag1 (Tag1 ("path"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Pkg")), "t"), 0, (0)), 100000000, 0, -62)], (0)), 100000000, 0, -61), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Name")), "t"), 0, (0)), 100000000, 0, -60), (Tag3 ((("tracked_signature", 783)), 0, (0)), 100000000, 0, -59), 0), 100000000, 0, -58), 0), 100000000, 0, -57), 0), 100000000, 0, -56), 0, (("lib/module.mli", 178, 5110, 5110), ("lib/module.mli", 178, 5110, 5184), 0), 0, Tag1 ("Module", 102)), 0); (("pp", 804), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -55), (Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -54), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -53), 0), 100000000, 0, -52), 0), 100000000, 0, -51), 0, (("lib/module.mli", 182, 5207, 5207), ("lib/module.mli", 182, 5207, 5245), 0), 0, Tag1 ("Module", 103)), 0); (("reflect", 805), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -50), (Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -49), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -48), 0), 100000000, 0, -47), 0), 100000000, 0, -46), 0, (("lib/module.mli", 183, 5246, 5246), ("lib/module.mli", 183, 5246, 5289), 0), 0, Tag1 ("Module", 104)), 0); (("pp_signature", 806), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -45), (Tag1 (0, (Tag3 ((("signature", 787)), 0, (0)), 100000000, 0, -44), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -43), 0), 100000000, 0, -42), 0), 100000000, 0, -41), 0, (("lib/module.mli", 185, 5291, 5291), ("lib/module.mli", 185, 5291, 5347), 0), 0, Tag1 ("Module", 105)), 0); (("reflect_signature", 807), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -40), (Tag1 (0, (Tag3 ((("signature", 787)), 0, (0)), 100000000, 0, -39), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -38), 0), 100000000, 0, -37), 0), 100000000, 0, -36), 0, (("lib/module.mli", 186, 5348, 5348), ("lib/module.mli", 186, 5348, 5409), 0), 0, Tag1 ("Module", 106)), 0); (("reflect_modules", 808), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -35), (Tag1 (0, (Tag3 ((("dict", 788)), 0, (0)), 100000000, 0, -34), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -33), 0), 100000000, 0, -32), 0), 100000000, 0, -31), 0, (("lib/module.mli", 187, 5410, 5410), ("lib/module.mli", 187, 5410, 5464), 0), 0, Tag1 ("Module", 107)), 0); (("pp_alias", 809), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -30), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Paths")), "Expr"), "t"), 0, (0)), 100000000, 0, -29)], (0)), 100000000, 0, -28), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -27), 0), 100000000, 0, -26), 0), 100000000, 0, -25), 0, (("lib/module.mli", 190, 5467, 5467), ("lib/module.mli", 190, 5467, 5529), 0), 0, Tag1 ("Module", 109)), 0); (("pp_level", 810), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -24), (Tag1 (0, (Tag3 ((("level", 791)), 0, (0)), 100000000, 0, -23), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0), 100000000, 0, -20), 0, (("lib/module.mli", 191, 5530, 5530), ("lib/module.mli", 191, 5530, 5578), 0), 0, Tag1 ("Module", 110)), 0); (("pp_mdict", 811), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -19), (Tag1 (0, (Tag3 ((("dict", 788)), 0, (0)), 100000000, 0, -18), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -17), 0), 100000000, 0, -16), 0), 100000000, 0, -15), 0, (("lib/module.mli", 192, 5579, 5579), ("lib/module.mli", 192, 5579, 5626), 0), 0, Tag1 ("Module", 111)), 0); (("pp_pair", 812), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -14), (Tag1 (0, (Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12); (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -13)]), 100000000, 0, -11), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10), 0), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("lib/module.mli", 193, 5627, 5627), ("lib/module.mli", 193, 5627, 5679), 0), 0, Tag1 ("Module", 112)), 0); (("pp_arg", 813), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -7), (Tag1 (0, (Tag3 (Tag1 ((("Arg", 777)), "t"), [(Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -6)], (0)), 100000000, 0, -5), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("lib/module.mli", 194, 5680, 5680), ("lib/module.mli", 194, 5680, 5728), 0), 0, Tag1 ("Module", 113)), 0); Tag3 (("Schema", 814), 0, (Tag1 ([(("module'", 840), ((Tag3 (Tag1 ((Tag2 ("Schematic")), "t"), [(Tag3 ((("modul_", 792)), 0, (0)), 100000000, 0, -247)], (0)), 100000000, 0, -246), 0, (("lib/module.mli", 198, 5771, 5773), ("lib/module.mli", 198, 5771, 5804), 0), 0, Tag1 ("Module", 114)), 0); (("m", 841), ((Tag3 (Tag1 ((Tag2 ("Schematic")), "t"), [(Tag3 ((("tracked_signature", 783)), 0, (0)), 100000000, 0, -245)], (0)), 100000000, 0, -244), 0, (("lib/module.mli", 199, 5805, 5807), ("lib/module.mli", 199, 5805, 5843), 0), 0, Tag1 ("Module", 115)), 0)]), 0, (("lib/module.mli", 197, 5752, 5752), ("lib/module.mli", 200, 5844, 5847), 0), Tag1 ("Module", 116)), 0, 0); Tag3 (("Def", 815), 0, (Tag1 ([(("empty", 842), ((Tag3 ((("definition", 786)), 0, (0)), 100000000, 0, -292), 0, (("lib/module.mli", 204, 5905, 5907), ("lib/module.mli", 204, 5905, 5929), 0), 0, Tag1 ("Module", 117)), 0); (("modules", 843), ((Tag1 (0, (Tag3 ((("dict", 788)), 0, (0)), 100000000, 0, -291), (Tag3 ((("definition", 786)), 0, (0)), 100000000, 0, -290), 0), 100000000, 0, -289), 0, (("lib/module.mli", 205, 5930, 5932), ("lib/module.mli", 205, 5930, 5963), 0), 0, Tag1 ("Module", 118)), 0); (("add", 844), ((Tag1 (0, (Tag3 ((("definition", 786)), 0, (0)), 100000000, 0, -288), (Tag1 (0, (Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -286); (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -287)]), 100000000, 0, -285), (Tag3 ((("definition", 786)), 0, (0)), 100000000, 0, -284), 0), 100000000, 0, -283), 0), 100000000, 0, -282), 0, (("lib/module.mli", 207, 5965, 5967), ("lib/module.mli", 207, 5965, 6016), 0), 0, Tag1 ("Module", 119)), 0); (("add_type", 845), ((Tag1 (0, (Tag3 ((("definition", 786)), 0, (0)), 100000000, 0, -281), (Tag1 (0, (Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -279); (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -280)]), 100000000, 0, -278), (Tag3 ((("definition", 786)), 0, (0)), 100000000, 0, -277), 0), 100000000, 0, -276), 0), 100000000, 0, -275), 0, (("lib/module.mli", 208, 6017, 6019), ("lib/module.mli", 208, 6017, 6072), 0), 0, Tag1 ("Module", 120)), 0); (("add_gen", 846), ((Tag1 (0, (Tag3 ((("level", 791)), 0, (0)), 100000000, 0, -274), (Tag1 (0, (Tag3 ((("definition", 786)), 0, (0)), 100000000, 0, -273), (Tag1 (0, (Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -271); (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -272)]), 100000000, 0, -270), (Tag3 ((("definition", 786)), 0, (0)), 100000000, 0, -269), 0), 100000000, 0, -268), 0), 100000000, 0, -267), 0), 100000000, 0, -266), 0, (("lib/module.mli", 209, 6073, 6075), ("lib/module.mli", 209, 6073, 6136), 0), 0, Tag1 ("Module", 121)), 0); (("merge", 847), ((Tag1 (0, (Tag3 ((("definition", 786)), 0, (0)), 100000000, 0, -265), (Tag1 (0, (Tag3 ((("definition", 786)), 0, (0)), 100000000, 0, -264), (Tag3 ((("definition", 786)), 0, (0)), 100000000, 0, -263), 0), 100000000, 0, -262), 0), 100000000, 0, -261), 0, (("lib/module.mli", 211, 6138, 6140), ("lib/module.mli", 211, 6138, 6189), 0), 0, Tag1 ("Module", 122)), 0); (("weak_merge", 848), ((Tag1 (0, (Tag3 ((("definition", 786)), 0, (0)), 100000000, 0, -260), (Tag1 (0, (Tag3 ((("definition", 786)), 0, (0)), 100000000, 0, -259), (Tag3 ((("definition", 786)), 0, (0)), 100000000, 0, -258), 0), 100000000, 0, -257), 0), 100000000, 0, -256), 0, (("lib/module.mli", 214, 6247, 6249), ("lib/module.mli", 214, 6247, 6303), 0), 0, Tag1 ("Module", 123)), 0); (("pp", 849), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -255), (Tag1 (0, (Tag3 ((("definition", 786)), 0, (0)), 100000000, 0, -254), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -253), 0), 100000000, 0, -252), 0), 100000000, 0, -251), 0, (("lib/module.mli", 216, 6305, 6307), ("lib/module.mli", 216, 6305, 6353), 0), 0, Tag1 ("Module", 124)), 0); (("sch", 850), ((Tag3 (Tag1 ((Tag2 ("Schematic")), "t"), [(Tag3 ((("definition", 786)), 0, (0)), 100000000, 0, -250)], (0)), 100000000, 0, -249), 0, (("lib/module.mli", 217, 6354, 6356), ("lib/module.mli", 217, 6354, 6387), 0), 0, Tag1 ("Module", 125)), 0); Tag1 (("t", 851), (0, 0, 0, 1, ((Tag3 ((("definition", 786)), 0, (0)), 100000000, 0, -248)), 0, 0, 0, 0, (("lib/module.mli", 218, 6388, 6390), ("lib/module.mli", 218, 6388, 6409), 0), 0, 0, 0, Tag1 ("Module", 126)), 1, 0)]), 0, (("lib/module.mli", 203, 5889, 5889), ("lib/module.mli", 219, 6410, 6413), 0), Tag1 ("Module", 127)), 0, 0); Tag3 (("Equal", 816), 0, (Tag1 ([(("eq", 852), ((Tag1 (0, (Tag3 ((("ty", 784)), [((0), 100000000, 0, -309)], (0)), 100000000, 0, -308), (Tag1 (0, (Tag3 ((("ty", 784)), [((0), 100000000, 0, -307)], (0)), 100000000, 0, -306), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -305), 0), 100000000, 0, -304), 0), 100000000, 0, -303), 0, (("lib/module.mli", 224, 6452, 6454), ("lib/module.mli", 224, 6452, 6482), 0), 0, Tag1 ("Module", 128)), 0); (("dict", 853), ((Tag1 (0, (Tag3 (Tag1 ((("Dict", 795)), "t"), 0, (0)), 100000000, 0, -302), (Tag1 (0, (Tag3 (Tag1 ((("Dict", 795)), "t"), 0, (0)), 100000000, 0, -301), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -300), 0), 100000000, 0, -299), 0), 100000000, 0, -298), 0, (("lib/module.mli", 225, 6483, 6485), ("lib/module.mli", 225, 6483, 6519), 0), 0, Tag1 ("Module", 129)), 0); (("signature", 854), ((Tag1 (0, (Tag3 ((("signature", 787)), 0, (0)), 100000000, 0, -297), (Tag1 (0, (Tag3 ((("signature", 787)), 0, (0)), 100000000, 0, -296), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -295), 0), 100000000, 0, -294), 0), 100000000, 0, -293), 0, (("lib/module.mli", 226, 6520, 6522), ("lib/module.mli", 226, 6520, 6567), 0), 0, Tag1 ("Module", 130)), 0)]), 0, (("lib/module.mli", 223, 6434, 6434), ("lib/module.mli", 227, 6568, 6571), 0), Tag1 ("Module", 131)), 0, 0); Tag3 (("Sig", 817), 0, (Tag1 ([(("card", 855), ((Tag1 (0, (Tag3 ((("signature", 787)), 0, (0)), 100000000, 0, -385), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -384), 0), 100000000, 0, -383), 0, (("lib/module.mli", 233, 6631, 6635), ("lib/module.mli", 233, 6631, 6662), 0), 0, Tag1 ("Module", 132)), 0); (("merge", 856), ((Tag1 (0, (Tag3 ((("signature", 787)), 0, (0)), 100000000, 0, -382), (Tag1 (0, (Tag3 ((("signature", 787)), 0, (0)), 100000000, 0, -381), (Tag3 ((("signature", 787)), 0, (0)), 100000000, 0, -380), 0), 100000000, 0, -379), 0), 100000000, 0, -378), 0, (("lib/module.mli", 234, 6663, 6667), ("lib/module.mli", 234, 6663, 6714), 0), 0, Tag1 ("Module", 133)), 0); (("weak_merge", 857), ((Tag1 (0, (Tag3 ((("signature", 787)), 0, (0)), 100000000, 0, -377), (Tag1 (0, (Tag3 ((("signature", 787)), 0, (0)), 100000000, 0, -376), (Tag3 ((("signature", 787)), 0, (0)), 100000000, 0, -375), 0), 100000000, 0, -374), 0), 100000000, 0, -373), 0, (("lib/module.mli", 237, 6774, 6778), ("lib/module.mli", 237, 6774, 6829), 0), 0, Tag1 ("Module", 134)), 0); (("diff", 858), ((Tag1 (0, (Tag3 ((("signature", 787)), 0, (0)), 100000000, 0, -372), (Tag1 (0, (Tag3 ((("signature", 787)), 0, (0)), 100000000, 0, -371), (Tag3 ((("signature", 787)), 0, (0)), 100000000, 0, -370), 0), 100000000, 0, -369), 0), 100000000, 0, -368), 0, (("lib/module.mli", 240, 6832, 6836), ("lib/module.mli", 240, 6832, 6881), 0), 0, Tag1 ("Module", 135)), 0); (("flatten", 859), ((Tag1 (0, (Tag3 ((("signature", 787)), 0, (0)), 100000000, 0, -367), (Tag3 ((("definition", 786)), 0, (0)), 100000000, 0, -366), 0), 100000000, 0, -365), 0, (("lib/module.mli", 242, 6883, 6887), ("lib/module.mli", 242, 6883, 6923), 0), 0, Tag1 ("Module", 136)), 0); (("is_exact", 860), ((Tag1 (0, (Tag3 ((("signature", 787)), 0, (0)), 100000000, 0, -364), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -363), 0), 100000000, 0, -362), 0, (("lib/module.mli", 243, 6924, 6928), ("lib/module.mli", 243, 6924, 6959), 0), 0, Tag1 ("Module", 137)), 0); (("create", 861), ((Tag1 (0, (Tag3 ((("named", 790)), 0, (0)), 100000000, 0, -361), (Tag3 ((("signature", 787)), 0, (0)), 100000000, 0, -360), 0), 100000000, 0, -359), 0, (("lib/module.mli", 245, 6961, 6965), ("lib/module.mli", 245, 6961, 6996), 0), 0, Tag1 ("Module", 138)), 0); (("create_type", 862), ((Tag1 (0, (Tag3 ((("named", 790)), 0, (0)), 100000000, 0, -358), (Tag3 ((("signature", 787)), 0, (0)), 100000000, 0, -357), 0), 100000000, 0, -356), 0, (("lib/module.mli", 246, 6997, 7001), ("lib/module.mli", 246, 6997, 7037), 0), 0, Tag1 ("Module", 139)), 0); (("gen_create", 863), ((Tag1 (0, (Tag3 ((("level", 791)), 0, (0)), 100000000, 0, -355), (Tag1 (0, (Tag3 ((("named", 790)), 0, (0)), 100000000, 0, -354), (Tag3 ((("signature", 787)), 0, (0)), 100000000, 0, -353), 0), 100000000, 0, -352), 0), 100000000, 0, -351), 0, (("lib/module.mli", 247, 7038, 7042), ("lib/module.mli", 247, 7038, 7086), 0), 0, Tag1 ("Module", 140)), 0); (("of_lists", 864), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("named", 790)), 0, (0)), 100000000, 0, -350)], (0)), 100000000, 0, -349), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("named", 790)), 0, (0)), 100000000, 0, -348)], (0)), 100000000, 0, -347), (Tag3 ((("signature", 787)), 0, (0)), 100000000, 0, -346), 0), 100000000, 0, -345), 0), 100000000, 0, -344), 0, (("lib/module.mli", 249, 7088, 7092), ("lib/module.mli", 249, 7088, 7143), 0), 0, Tag1 ("Module", 141)), 0); (("of_list", 865), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("named", 790)), 0, (0)), 100000000, 0, -343)], (0)), 100000000, 0, -342), (Tag3 ((("signature", 787)), 0, (0)), 100000000, 0, -341), 0), 100000000, 0, -340), 0, (("lib/module.mli", 250, 7144, 7148), ("lib/module.mli", 250, 7144, 7185), 0), 0, Tag1 ("Module", 142)), 0); (("of_list_type", 866), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("named", 790)), 0, (0)), 100000000, 0, -339)], (0)), 100000000, 0, -338), (Tag3 ((("signature", 787)), 0, (0)), 100000000, 0, -337), 0), 100000000, 0, -336), 0, (("lib/module.mli", 251, 7186, 7190), ("lib/module.mli", 251, 7186, 7232), 0), 0, Tag1 ("Module", 143)), 0); (("add", 867), ((Tag1 (0, (Tag3 ((("signature", 787)), 0, (0)), 100000000, 0, -335), (Tag1 (0, (Tag3 ((("named", 790)), 0, (0)), 100000000, 0, -334), (Tag3 ((("signature", 787)), 0, (0)), 100000000, 0, -333), 0), 100000000, 0, -332), 0), 100000000, 0, -331), 0, (("lib/module.mli", 253, 7234, 7238), ("lib/module.mli", 253, 7234, 7279), 0), 0, Tag1 ("Module", 144)), 0); (("add_type", 868), ((Tag1 (0, (Tag3 ((("signature", 787)), 0, (0)), 100000000, 0, -330), (Tag1 (0, (Tag3 ((("named", 790)), 0, (0)), 100000000, 0, -329), (Tag3 ((("signature", 787)), 0, (0)), 100000000, 0, -328), 0), 100000000, 0, -327), 0), 100000000, 0, -326), 0, (("lib/module.mli", 254, 7280, 7284), ("lib/module.mli", 254, 7280, 7330), 0), 0, Tag1 ("Module", 145)), 0); (("add_gen", 869), ((Tag1 (0, (Tag3 ((("level", 791)), 0, (0)), 100000000, 0, -325), (Tag1 (0, (Tag3 ((("signature", 787)), 0, (0)), 100000000, 0, -324), (Tag1 (0, (Tag3 ((("named", 790)), 0, (0)), 100000000, 0, -323), (Tag3 ((("signature", 787)), 0, (0)), 100000000, 0, -322), 0), 100000000, 0, -321), 0), 100000000, 0, -320), 0), 100000000, 0, -319), 0, (("lib/module.mli", 255, 7331, 7335), ("lib/module.mli", 255, 7331, 7389), 0), 0, Tag1 ("Module", 146)), 0); (("empty", 870), ((Tag3 ((("signature", 787)), 0, (0)), 100000000, 0, -318), 0, (("lib/module.mli", 256, 7390, 7394), ("lib/module.mli", 256, 7390, 7415), 0), 0, Tag1 ("Module", 147)), 0); (("pp", 871), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -317), (Tag1 (0, (Tag3 ((("signature", 787)), 0, (0)), 100000000, 0, -316), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -315), 0), 100000000, 0, -314), 0), 100000000, 0, -313), 0, (("lib/module.mli", 258, 7417, 7421), ("lib/module.mli", 258, 7417, 7467), 0), 0, Tag1 ("Module", 148)), 0); (("sch", 872), ((Tag3 (Tag1 ((Tag2 ("Schematic")), "t"), [(Tag3 ((("signature", 787)), 0, (0)), 100000000, 0, -312)], (0)), 100000000, 0, -311), 0, (("lib/module.mli", 259, 7468, 7472), ("lib/module.mli", 259, 7468, 7502), 0), 0, Tag1 ("Module", 149)), 0); Tag1 (("t", 873), (0, 0, 0, 1, ((Tag3 ((("signature", 787)), 0, (0)), 100000000, 0, -310)), 0, 0, 0, 0, (("lib/module.mli", 261, 7504, 7508), ("lib/module.mli", 261, 7504, 7526), 0), 0, 0, 0, Tag1 ("Module", 150)), 1, 0)]), 0, (("lib/module.mli", 231, 6612, 6612), ("lib/module.mli", 262, 7527, 7532), 0), Tag1 ("Module", 151)), 0, 0); Tag3 (("Partial", 818), 0, (Tag1 ([Tag1 (("t", 874), (0, 0, [[(("name", 750), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -469)], (0)), 100000000, 0, -468), (("lib/module.mli", 270, 7614, 7627), ("lib/module.mli", 270, 7614, 7647), 0), 0, Tag1 ("Module", 153)); (("mty", 751), 0, (Tag3 ((("sty", 789)), 0, (0)), 100000000, 0, -470), (("lib/module.mli", 270, 7614, 7648), ("lib/module.mli", 270, 7614, 7656), 0), 0, Tag1 ("Module", 154))]], 1, 0, 0, 0, 0, 0, (("lib/module.mli", 270, 7614, 7616), ("lib/module.mli", 270, 7614, 7658), 0), 0, 0, 0, Tag1 ("Module", 152)), 1, 0); (("empty", 875), ((Tag3 ((("t", 874)), 0, (0)), 100000000, 0, -467), 0, (("lib/module.mli", 272, 7660, 7664), ("lib/module.mli", 272, 7660, 7677), 0), 0, Tag1 ("Module", 155)), 0); (("is_exact", 876), ((Tag1 (0, (Tag3 ((("t", 874)), 0, (0)), 100000000, 0, -466), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -465), 0), 100000000, 0, -464), 0, (("lib/module.mli", 273, 7678, 7682), ("lib/module.mli", 273, 7678, 7705), 0), 0, Tag1 ("Module", 156)), 0); (("extend", 877), ((Tag1 (0, (Tag3 ((("sty", 789)), 0, (0)), 100000000, 0, -463), (Tag3 ((("modul_", 792)), 0, (0)), 100000000, 0, -462), 0), 100000000, 0, -461), 0, (("lib/module.mli", 275, 7707, 7711), ("lib/module.mli", 275, 7707, 7736), 0), 0, Tag1 ("Module", 157)), 0); (("simple", 878), ((Tag1 (0, (Tag3 ((("signature", 787)), 0, (0)), 100000000, 0, -460), (Tag3 ((("t", 874)), 0, (0)), 100000000, 0, -459), 0), 100000000, 0, -458), 0, (("lib/module.mli", 276, 7737, 7741), ("lib/module.mli", 276, 7737, 7768), 0), 0, Tag1 ("Module", 158)), 0); (("pp", 879), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -457), (Tag1 (0, (Tag3 ((("t", 874)), 0, (0)), 100000000, 0, -456), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -455), 0), 100000000, 0, -454), 0), 100000000, 0, -453), 0, (("lib/module.mli", 278, 7770, 7774), ("lib/module.mli", 278, 7770, 7812), 0), 0, Tag1 ("Module", 159)), 0); (("pp_sty", 880), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -452), (Tag1 (0, (Tag3 ((("sty", 789)), 0, (0)), 100000000, 0, -451), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -450), 0), 100000000, 0, -449), 0), 100000000, 0, -448), 0, (("lib/module.mli", 279, 7813, 7817), ("lib/module.mli", 279, 7813, 7861), 0), 0, Tag1 ("Module", 160)), 0); (("sch", 881), ((Tag3 (Tag1 ((Tag2 ("Schematic")), "t"), [(Tag3 ((("t", 874)), 0, (0)), 100000000, 0, -447)], (0)), 100000000, 0, -446), 0, (("lib/module.mli", 280, 7862, 7866), ("lib/module.mli", 280, 7862, 7888), 0), 0, Tag1 ("Module", 161)), 0); (("refresh", 882), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Id")), "seed"), 0, (0)), 100000000, 0, -445), (Tag1 (0, (Tag3 ((("ty", 784)), [((("any")), 100000000, 0, -443)], (0)), 100000000, 0, -444), (Tag3 ((("ty", 784)), [((("any")), 100000000, 0, -443)], (0)), 100000000, 0, -442), 0), 100000000, 0, -441), 0), 100000000, 0, -440), 0, (("lib/module.mli", 282, 7890, 7894), ("lib/module.mli", 282, 7890, 7936), 0), 0, Tag1 ("Module", 162)), 0); (("apply", 883), ((Tag1 (("arg"), (Tag3 ((("modul_", 792)), 0, (0)), 100000000, 0, -439), (Tag1 (("param"), (Tag3 ((("modul_", 792)), 0, (0)), 100000000, 0, -438), (Tag1 (("body"), (Tag3 ((("modul_", 792)), 0, (0)), 100000000, 0, -437), (Tag3 ((("modul_", 792)), 0, (0)), 100000000, 0, -436), 0), 100000000, 0, -435), 0), 100000000, 0, -434), 0), 100000000, 0, -433), 0, (("lib/module.mli", 283, 7937, 7941), ("lib/module.mli", 283, 7937, 8005), 0), 0, Tag1 ("Module", 163)), 0); (("replace_at", 884), ((Tag1 (("level"), (Tag3 ((("level", 791)), 0, (0)), 100000000, 0, -432), (Tag1 (("delete"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -431), (Tag1 (("path"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Paths")), "S"), "t"), 0, (0)), 100000000, 0, -430), (Tag1 (("replacement"), (Tag3 ((("modul_", 792)), 0, (0)), 100000000, 0, -429), (Tag1 (0, (Tag3 ((("modul_", 792)), 0, (0)), 100000000, 0, -428), (Tag3 ((("modul_", 792)), 0, (0)), 100000000, 0, -427), 0), 100000000, 0, -426), 0), 100000000, 0, -425), 0), 100000000, 0, -424), 0), 100000000, 0, -423), 0), 100000000, 0, -422), 0, (("lib/module.mli", 284, 8006, 8010), ("lib/module.mli", 284, 8006, 8112), 0), 0, Tag1 ("Module", 164)), 0); (("to_module", 885), ((Tag1 (Tag1 ("origin"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("origin", 780)), 0, (0)), 100000000, 0, -421)], (0)), 100000000, 0, -420), (Tag1 (0, (Tag3 ((("t", 874)), 0, (0)), 100000000, 0, -419), (Tag3 ((("modul_", 792)), 0, (0)), 100000000, 0, -418), 0), 100000000, 0, -417), 0), 100000000, 0, -416), 0, (("lib/module.mli", 286, 8114, 8118), ("lib/module.mli", 286, 8114, 8163), 0), 0, Tag1 ("Module", 165)), 0); (("to_arg", 886), ((Tag1 (0, (Tag3 ((("t", 874)), 0, (0)), 100000000, 0, -415), (Tag3 ((("modul_", 792)), 0, (0)), 100000000, 0, -414), 0), 100000000, 0, -413), 0, (("lib/module.mli", 287, 8164, 8168), ("lib/module.mli", 287, 8164, 8192), 0), 0, Tag1 ("Module", 166)), 0); (("of_extended_mty", 887), ((Tag1 (0, (Tag3 ((("modul_", 792)), 0, (0)), 100000000, 0, -412), (Tag3 ((("sty", 789)), 0, (0)), 100000000, 0, -411), 0), 100000000, 0, -410), 0, (("lib/module.mli", 289, 8194, 8198), ("lib/module.mli", 289, 8194, 8233), 0), 0, Tag1 ("Module", 167)), 0); (("of_extended", 888), ((Tag1 (Tag1 ("name"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Name")), "t"), 0, (0)), 100000000, 0, -409)], (0)), 100000000, 0, -408), (Tag1 (0, (Tag3 ((("modul_", 792)), 0, (0)), 100000000, 0, -407), (Tag3 ((("t", 874)), 0, (0)), 100000000, 0, -406), 0), 100000000, 0, -405), 0), 100000000, 0, -404), 0, (("lib/module.mli", 290, 8234, 8238), ("lib/module.mli", 290, 8234, 8282), 0), 0, Tag1 ("Module", 168)), 0); (("of_module", 889), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Name")), "t"), 0, (0)), 100000000, 0, -403), (Tag1 (0, (Tag3 ((("tracked_signature", 783)), 0, (0)), 100000000, 0, -402), (Tag3 ((("t", 874)), 0, (0)), 100000000, 0, -401), 0), 100000000, 0, -400), 0), 100000000, 0, -399), 0, (("lib/module.mli", 292, 8284, 8288), ("lib/module.mli", 292, 8284, 8336), 0), 0, Tag1 ("Module", 169)), 0); (("pseudo_module", 890), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Name")), "t"), 0, (0)), 100000000, 0, -398), (Tag1 (0, (Tag3 ((("dict", 788)), 0, (0)), 100000000, 0, -397), (Tag3 ((("t", 874)), 0, (0)), 100000000, 0, -396), 0), 100000000, 0, -395), 0), 100000000, 0, -394), 0, (("lib/module.mli", 293, 8337, 8341), ("lib/module.mli", 293, 8337, 8379), 0), 0, Tag1 ("Module", 170)), 0); (("is_functor", 891), ((Tag1 (0, (Tag3 ((("t", 874)), 0, (0)), 100000000, 0, -393), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -392), 0), 100000000, 0, -391), 0, (("lib/module.mli", 294, 8380, 8384), ("lib/module.mli", 294, 8380, 8410), 0), 0, Tag1 ("Module", 171)), 0); (("to_sign", 892), ((Tag1 (0, (Tag3 ((("t", 874)), 0, (0)), 100000000, 0, -390), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((("signature", 787)), 0, (0)), 100000000, 0, -388); (Tag3 ((("signature", 787)), 0, (0)), 100000000, 0, -389)], (0)), 100000000, 0, -387), 0), 100000000, 0, -386), 0, (("lib/module.mli", 295, 8411, 8415), ("lib/module.mli", 295, 8411, 8462), 0), 0, Tag1 ("Module", 172)), 0)]), 0, (("lib/module.mli", 266, 7589, 7589), ("lib/module.mli", 299, 8466, 8471), 0), Tag1 ("Module", 173)), 0, 0); Tag3 (("Namespace", 819), 0, (Tag1 ([Tag1 (("t", 893), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Dict", 795)), "t"), 0, (0)), 100000000, 0, -489)), 0, 0, 0, 0, (("lib/module.mli", 303, 8496, 8498), ("lib/module.mli", 303, 8496, 8513), 0), 0, 0, 0, Tag1 ("Module", 174)), 1, 0); (("from_module", 894), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Namespaced")), "t"), 0, (0)), 100000000, 0, -488), (Tag1 (0, (Tag3 (Tag1 ((("Origin", 779)), "t"), 0, (0)), 100000000, 0, -487), (Tag1 (0, (Tag3 (Tag1 ((("Sig", 817)), "t"), 0, (0)), 100000000, 0, -486), (Tag3 ((("t", 893)), 0, (0)), 100000000, 0, -485), 0), 100000000, 0, -484), 0), 100000000, 0, -483), 0), 100000000, 0, -482), 0, (("lib/module.mli", 304, 8514, 8516), ("lib/module.mli", 304, 8514, 8571), 0), 0, Tag1 ("Module", 175)), 0); (("merge", 895), ((Tag1 (0, (Tag3 ((("t", 893)), 0, (0)), 100000000, 0, -481), (Tag1 (0, (Tag3 ((("t", 893)), 0, (0)), 100000000, 0, -480), (Tag3 ((("t", 893)), 0, (0)), 100000000, 0, -479), 0), 100000000, 0, -478), 0), 100000000, 0, -477), 0, (("lib/module.mli", 305, 8572, 8574), ("lib/module.mli", 305, 8572, 8596), 0), 0, Tag1 ("Module", 176)), 0); (("merge_all", 896), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 893)), 0, (0)), 100000000, 0, -476)], (0)), 100000000, 0, -475), (Tag3 ((("t", 893)), 0, (0)), 100000000, 0, -474), 0), 100000000, 0, -473), 0, (("lib/module.mli", 306, 8597, 8599), ("lib/module.mli", 306, 8597, 8625), 0), 0, Tag1 ("Module", 177)), 0); (("sch", 897), ((Tag3 (Tag1 ((Tag2 ("Schematic")), "t"), [(Tag3 ((("t", 893)), 0, (0)), 100000000, 0, -472)], (0)), 100000000, 0, -471), 0, (("lib/module.mli", 307, 8626, 8628), ("lib/module.mli", 307, 8626, 8651), 0), 0, Tag1 ("Module", 178)), 0)]), 0, (("lib/module.mli", 302, 8474, 8474), ("lib/module.mli", 308, 8652, 8655), 0), Tag1 ("Module", 179)), 0, 0)], "Module", [("Module", ("2_s\200\188\137\247\158>\168\195\023\195\n\011V")); ("Unitname", ("\155n\201\211\249\229\028$\220J\172\018<\249\171\158")); ("Uloc", ("\172\208h 6@\178[\156\249\206\172%\133\167\239")); ("Support", ("YA;\029\006a\255\202R\137\181\133\184\209)\005")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Schematic", ("\180\179\011\178\017I\241^\235\149h\161k\b\209\142")); ("Pp", ("\167zCQ\134\167\215\2517\247\158\219\250\223.\197")); ("Pkg", ("SneaP\023\210\210\240\218\128bA\te\239")); ("Paths", ("\000\152\242H\139l\222\245\245Ndb\202P^\175")); ("Namespaced", ("%\208\253;3\161W$\236\1838K\195z\1493")); ("Name", ("4? \167\131n\184\000\214\031\017\027\153\002]^")); ("Modname", ("v\160\183\003\212\232\177\007\228-\002\145i\230\255\248")); ("Loc", ("ax\213\152\006\175?\212%\0014\238\021S\218=")); ("Id", ("w\207`(\179n\181\161\155\252\243\195\006\139NO")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

  end

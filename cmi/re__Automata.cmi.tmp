type mark = int
type sem = [ `First | `Longest | `Shortest ]
type rep_kind = [ `Greedy | `Non_greedy ]
val pp_sem : Format.formatter -> sem -> unit
val pp_rep_kind : Format.formatter -> rep_kind -> unit
type expr
val is_eps : expr -> bool
val pp : Format.formatter -> expr -> unit
type ids
val create_ids : unit -> ids
val cst : ids -> Re__.Cset.t -> expr
val empty : ids -> expr
val alt : ids -> expr list -> expr
val seq : ids -> sem -> expr -> expr -> expr
val eps : ids -> expr
val rep : ids -> rep_kind -> sem -> expr -> expr
val mark : ids -> mark -> expr
val pmark : ids -> Re__.Pmark.t -> expr
val erase : ids -> mark -> mark -> expr
val before : ids -> Re__.Category.t -> expr
val after : ids -> Re__.Category.t -> expr
val rename : ids -> expr -> expr
type idx = int
module Marks :
  sig type t = { marks : (mark * idx) list; pmarks : Re__.Pmark.Set.t; } end
module E : sig type t val pp : Format.formatter -> t -> unit end
type hash
type mark_infos = int array
type status = Failed | Match of mark_infos * Re__.Pmark.Set.t | Running
module State :
  sig
    type t = {
      idx : idx;
      category : Re__.Category.t;
      desc : E.t list;
      mutable status : status option;
      hash : hash;
    }
    val dummy : t
    val create : Re__.Category.t -> expr -> t
    module Table :
      sig
        type key = t
        type !'a t
        val create : int -> 'a t
        val clear : 'a t -> unit
        val reset : 'a t -> unit
        val copy : 'a t -> 'a t
        val add : 'a t -> key -> 'a -> unit
        val remove : 'a t -> key -> unit
        val find : 'a t -> key -> 'a
        val find_opt : 'a t -> key -> 'a option
        val find_all : 'a t -> key -> 'a list
        val replace : 'a t -> key -> 'a -> unit
        val mem : 'a t -> key -> bool
        val iter : (key -> 'a -> unit) -> 'a t -> unit
        val filter_map_inplace : (key -> 'a -> 'a option) -> 'a t -> unit
        val fold : (key -> 'a -> 'acc -> 'acc) -> 'a t -> 'acc -> 'acc
        val length : 'a t -> int
        val stats : 'a t -> Stdlib__Hashtbl.statistics
        val to_seq : 'a t -> (key * 'a) Seq.t
        val to_seq_keys : 'a t -> key Seq.t
        val to_seq_values : 'a t -> 'a Seq.t
        val add_seq : 'a t -> (key * 'a) Seq.t -> unit
        val replace_seq : 'a t -> (key * 'a) Seq.t -> unit
        val of_seq : (key * 'a) Seq.t -> 'a t
      end
  end
type working_area
val create_working_area : unit -> working_area
val index_count : working_area -> int
val delta :
  working_area -> Re__.Category.t -> Re__.Cset.c -> State.t -> State.t
val deriv :
  working_area ->
  Re__.Cset.t ->
  (Re__.Category.t * Re__.Cset.t) list ->
  State.t -> (Re__.Cset.t * State.t) list("DEBUG:rule", [Tag1 (("mark", 922), (0, 0, 0, 1, ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -132)), 0, 0, 0, 0, (("lib/automata.mli", 25, 914, 914), ("lib/automata.mli", 25, 914, 929), 0), 0, 1, 0, Tag1 ("Re__Automata", 0)), 1, 0); Tag1 (("sem", 923), (0, 0, 0, 1, ((Tag8 (([("First", (0)); ("Longest", (0)); ("Shortest", (0))], (0, 100000000, 0, -131), 1, 0, 0)), 100000000, 0, -130)), 0, 0, 0, 0, (("lib/automata.mli", 27, 931, 931), ("lib/automata.mli", 27, 931, 975), 0), 0, 1, 0, Tag1 ("Re__Automata", 1)), 1, 0); Tag1 (("rep_kind", 924), (0, 0, 0, 1, ((Tag8 (([("Greedy", (0)); ("Non_greedy", (0))], (0, 100000000, 0, -129), 1, 0, 0)), 100000000, 0, -128)), 0, 0, 0, 0, (("lib/automata.mli", 28, 976, 976), ("lib/automata.mli", 28, 976, 1017), 0), 0, 1, 0, Tag1 ("Re__Automata", 2)), 1, 0); (("pp_sem", 925), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -127), (Tag1 (0, (Tag3 ((("sem", 923)), 0, (0)), 100000000, 0, -126), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -125), 0), 100000000, 0, -124), 0), 100000000, 0, -123), 0, (("lib/automata.mli", 30, 1019, 1019), ("lib/automata.mli", 30, 1019, 1063), 0), 0, Tag1 ("Re__Automata", 3)), 0); (("pp_rep_kind", 926), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -122), (Tag1 (0, (Tag3 ((("rep_kind", 924)), 0, (0)), 100000000, 0, -121), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -120), 0), 100000000, 0, -119), 0), 100000000, 0, -118), 0, (("lib/automata.mli", 31, 1064, 1064), ("lib/automata.mli", 31, 1064, 1118), 0), 0, Tag1 ("Re__Automata", 4)), 0); Tag1 (("expr", 927), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("lib/automata.mli", 33, 1120, 1120), ("lib/automata.mli", 33, 1120, 1129), 0), 0, 0, 0, Tag1 ("Re__Automata", 5)), 1, 0); (("is_eps", 928), ((Tag1 (0, (Tag3 ((("expr", 927)), 0, (0)), 100000000, 0, -117), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -116), 0), 100000000, 0, -115), 0, (("lib/automata.mli", 34, 1130, 1130), ("lib/automata.mli", 34, 1130, 1155), 0), 0, Tag1 ("Re__Automata", 6)), 0); (("pp", 929), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -114), (Tag1 (0, (Tag3 ((("expr", 927)), 0, (0)), 100000000, 0, -113), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -112), 0), 100000000, 0, -111), 0), 100000000, 0, -110), 0, (("lib/automata.mli", 35, 1156, 1156), ("lib/automata.mli", 35, 1156, 1197), 0), 0, Tag1 ("Re__Automata", 7)), 0); Tag1 (("ids", 930), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("lib/automata.mli", 37, 1199, 1199), ("lib/automata.mli", 37, 1199, 1207), 0), 0, 0, 0, Tag1 ("Re__Automata", 8)), 1, 0); (("create_ids", 931), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -109), (Tag3 ((("ids", 930)), 0, (0)), 100000000, 0, -108), 0), 100000000, 0, -107), 0, (("lib/automata.mli", 38, 1208, 1208), ("lib/automata.mli", 38, 1208, 1236), 0), 0, Tag1 ("Re__Automata", 9)), 0); (("cst", 932), ((Tag1 (0, (Tag3 ((("ids", 930)), 0, (0)), 100000000, 0, -106), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Re__")), "Cset"), "t"), 0, (0)), 100000000, 0, -105), (Tag3 ((("expr", 927)), 0, (0)), 100000000, 0, -104), 0), 100000000, 0, -103), 0), 100000000, 0, -102), 0, (("lib/automata.mli", 40, 1238, 1238), ("lib/automata.mli", 40, 1238, 1269), 0), 0, Tag1 ("Re__Automata", 10)), 0); (("empty", 933), ((Tag1 (0, (Tag3 ((("ids", 930)), 0, (0)), 100000000, 0, -101), (Tag3 ((("expr", 927)), 0, (0)), 100000000, 0, -100), 0), 100000000, 0, -99), 0, (("lib/automata.mli", 41, 1270, 1270), ("lib/automata.mli", 41, 1270, 1293), 0), 0, Tag1 ("Re__Automata", 11)), 0); (("alt", 934), ((Tag1 (0, (Tag3 ((("ids", 930)), 0, (0)), 100000000, 0, -98), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("expr", 927)), 0, (0)), 100000000, 0, -97)], (0)), 100000000, 0, -96), (Tag3 ((("expr", 927)), 0, (0)), 100000000, 0, -95), 0), 100000000, 0, -94), 0), 100000000, 0, -93), 0, (("lib/automata.mli", 42, 1294, 1294), ("lib/automata.mli", 42, 1294, 1328), 0), 0, Tag1 ("Re__Automata", 12)), 0); (("seq", 935), ((Tag1 (0, (Tag3 ((("ids", 930)), 0, (0)), 100000000, 0, -92), (Tag1 (0, (Tag3 ((("sem", 923)), 0, (0)), 100000000, 0, -91), (Tag1 (0, (Tag3 ((("expr", 927)), 0, (0)), 100000000, 0, -90), (Tag1 (0, (Tag3 ((("expr", 927)), 0, (0)), 100000000, 0, -89), (Tag3 ((("expr", 927)), 0, (0)), 100000000, 0, -88), 0), 100000000, 0, -87), 0), 100000000, 0, -86), 0), 100000000, 0, -85), 0), 100000000, 0, -84), 0, (("lib/automata.mli", 43, 1329, 1329), ("lib/automata.mli", 43, 1329, 1373), 0), 0, Tag1 ("Re__Automata", 13)), 0); (("eps", 936), ((Tag1 (0, (Tag3 ((("ids", 930)), 0, (0)), 100000000, 0, -83), (Tag3 ((("expr", 927)), 0, (0)), 100000000, 0, -82), 0), 100000000, 0, -81), 0, (("lib/automata.mli", 44, 1374, 1374), ("lib/automata.mli", 44, 1374, 1395), 0), 0, Tag1 ("Re__Automata", 14)), 0); (("rep", 937), ((Tag1 (0, (Tag3 ((("ids", 930)), 0, (0)), 100000000, 0, -80), (Tag1 (0, (Tag3 ((("rep_kind", 924)), 0, (0)), 100000000, 0, -79), (Tag1 (0, (Tag3 ((("sem", 923)), 0, (0)), 100000000, 0, -78), (Tag1 (0, (Tag3 ((("expr", 927)), 0, (0)), 100000000, 0, -77), (Tag3 ((("expr", 927)), 0, (0)), 100000000, 0, -76), 0), 100000000, 0, -75), 0), 100000000, 0, -74), 0), 100000000, 0, -73), 0), 100000000, 0, -72), 0, (("lib/automata.mli", 45, 1396, 1396), ("lib/automata.mli", 45, 1396, 1444), 0), 0, Tag1 ("Re__Automata", 15)), 0); (("mark", 938), ((Tag1 (0, (Tag3 ((("ids", 930)), 0, (0)), 100000000, 0, -71), (Tag1 (0, (Tag3 ((("mark", 922)), 0, (0)), 100000000, 0, -70), (Tag3 ((("expr", 927)), 0, (0)), 100000000, 0, -69), 0), 100000000, 0, -68), 0), 100000000, 0, -67), 0, (("lib/automata.mli", 46, 1445, 1445), ("lib/automata.mli", 46, 1445, 1475), 0), 0, Tag1 ("Re__Automata", 16)), 0); (("pmark", 939), ((Tag1 (0, (Tag3 ((("ids", 930)), 0, (0)), 100000000, 0, -66), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Re__")), "Pmark"), "t"), 0, (0)), 100000000, 0, -65), (Tag3 ((("expr", 927)), 0, (0)), 100000000, 0, -64), 0), 100000000, 0, -63), 0), 100000000, 0, -62), 0, (("lib/automata.mli", 47, 1476, 1476), ("lib/automata.mli", 47, 1476, 1510), 0), 0, Tag1 ("Re__Automata", 17)), 0); (("erase", 940), ((Tag1 (0, (Tag3 ((("ids", 930)), 0, (0)), 100000000, 0, -61), (Tag1 (0, (Tag3 ((("mark", 922)), 0, (0)), 100000000, 0, -60), (Tag1 (0, (Tag3 ((("mark", 922)), 0, (0)), 100000000, 0, -59), (Tag3 ((("expr", 927)), 0, (0)), 100000000, 0, -58), 0), 100000000, 0, -57), 0), 100000000, 0, -56), 0), 100000000, 0, -55), 0, (("lib/automata.mli", 48, 1511, 1511), ("lib/automata.mli", 48, 1511, 1550), 0), 0, Tag1 ("Re__Automata", 18)), 0); (("before", 941), ((Tag1 (0, (Tag3 ((("ids", 930)), 0, (0)), 100000000, 0, -54), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Re__")), "Category"), "t"), 0, (0)), 100000000, 0, -53), (Tag3 ((("expr", 927)), 0, (0)), 100000000, 0, -52), 0), 100000000, 0, -51), 0), 100000000, 0, -50), 0, (("lib/automata.mli", 49, 1551, 1551), ("lib/automata.mli", 49, 1551, 1589), 0), 0, Tag1 ("Re__Automata", 19)), 0); (("after", 942), ((Tag1 (0, (Tag3 ((("ids", 930)), 0, (0)), 100000000, 0, -49), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Re__")), "Category"), "t"), 0, (0)), 100000000, 0, -48), (Tag3 ((("expr", 927)), 0, (0)), 100000000, 0, -47), 0), 100000000, 0, -46), 0), 100000000, 0, -45), 0, (("lib/automata.mli", 50, 1590, 1590), ("lib/automata.mli", 50, 1590, 1627), 0), 0, Tag1 ("Re__Automata", 20)), 0); (("rename", 943), ((Tag1 (0, (Tag3 ((("ids", 930)), 0, (0)), 100000000, 0, -44), (Tag1 (0, (Tag3 ((("expr", 927)), 0, (0)), 100000000, 0, -43), (Tag3 ((("expr", 927)), 0, (0)), 100000000, 0, -42), 0), 100000000, 0, -41), 0), 100000000, 0, -40), 0, (("lib/automata.mli", 52, 1629, 1629), ("lib/automata.mli", 52, 1629, 1661), 0), 0, Tag1 ("Re__Automata", 21)), 0); Tag1 (("idx", 944), (0, 0, 0, 1, ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -39)), 0, 0, 0, 0, (("lib/automata.mli", 58, 1701, 1701), ("lib/automata.mli", 58, 1701, 1715), 0), 0, 1, 0, Tag1 ("Re__Automata", 22)), 1, 0); Tag3 (("Marks", 945), 0, (Tag1 ([Tag1 (("t", 957), (0, 0, [[(("marks", 508), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("mark", 922)), 0, (0)), 100000000, 0, -135); (Tag3 ((("idx", 944)), 0, (0)), 100000000, 0, -136)]), 100000000, 0, -134)], (0)), 100000000, 0, -133), (("lib/automata.mli", 61, 1746, 1752), ("lib/automata.mli", 62, 1777, 1782), 0), 0, Tag1 ("Re__Automata", 24)); (("pmarks", 560), 0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Re__")), "Pmark"), "Set"), "t"), 0, (0)), 100000000, 0, -137), (("lib/automata.mli", 62, 1777, 1783), ("lib/automata.mli", 62, 1777, 1802), 0), 0, Tag1 ("Re__Automata", 25))]], 1, 0, 0, 0, 0, 0, (("lib/automata.mli", 60, 1735, 1737), ("lib/automata.mli", 62, 1777, 1804), 0), 0, 0, 0, Tag1 ("Re__Automata", 23)), 1, 0)]), 0, (("lib/automata.mli", 59, 1716, 1716), ("lib/automata.mli", 63, 1805, 1808), 0), Tag1 ("Re__Automata", 26)), 0, 0); Tag3 (("E", 946), 0, (Tag1 ([Tag1 (("t", 958), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("lib/automata.mli", 66, 1825, 1827), ("lib/automata.mli", 66, 1825, 1833), 0), 0, 0, 0, Tag1 ("Re__Automata", 27)), 1, 0); (("pp", 959), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -142), (Tag1 (0, (Tag3 ((("t", 958)), 0, (0)), 100000000, 0, -141), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -140), 0), 100000000, 0, -139), 0), 100000000, 0, -138), 0, (("lib/automata.mli", 67, 1834, 1836), ("lib/automata.mli", 67, 1834, 1874), 0), 0, Tag1 ("Re__Automata", 28)), 0)]), 0, (("lib/automata.mli", 65, 1810, 1810), ("lib/automata.mli", 68, 1875, 1878), 0), Tag1 ("Re__Automata", 29)), 0, 0); Tag1 (("hash", 947), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("lib/automata.mli", 70, 1880, 1880), ("lib/automata.mli", 70, 1880, 1889), 0), 0, 0, 0, Tag1 ("Re__Automata", 30)), 1, 0); Tag1 (("mark_infos", 948), (0, 0, 0, 1, ((Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -38)], (0)), 100000000, 0, -37)), 0, 0, 0, 0, (("lib/automata.mli", 71, 1890, 1890), ("lib/automata.mli", 71, 1890, 1917), 0), 0, 0, 0, Tag1 ("Re__Automata", 31)), 1, 0); Tag1 (("status", 949), (0, 0, Tag1 ([(("Failed", 613), (0), 0, (("lib/automata.mli", 72, 1918, 1932), ("lib/automata.mli", 72, 1918, 1938), 0), 0, Tag1 ("Re__Automata", 33)); (("Match", 614), ([(Tag3 ((("mark_infos", 948)), 0, (0)), 100000000, 0, -35); (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Re__")), "Pmark"), "Set"), "t"), 0, (0)), 100000000, 0, -36)]), 0, (("lib/automata.mli", 72, 1918, 1939), ("lib/automata.mli", 72, 1918, 1974), 0), 0, Tag1 ("Re__Automata", 34)); (("Running", 615), (0), 0, (("lib/automata.mli", 72, 1918, 1975), ("lib/automata.mli", 72, 1918, 1984), 0), 0, Tag1 ("Re__Automata", 35))], 0), 1, 0, 0, 0, 0, 0, (("lib/automata.mli", 72, 1918, 1918), ("lib/automata.mli", 72, 1918, 1984), 0), 0, 0, 0, Tag1 ("Re__Automata", 32)), 1, 0); Tag3 (("State", 950), 0, (Tag1 ([Tag1 (("t", 960), (0, 0, [[(("idx", 617), 0, (Tag3 ((("idx", 944)), 0, (0)), 100000000, 0, -149), (("lib/automata.mli", 76, 2016, 2022), ("lib/automata.mli", 77, 2031, 2036), 0), 0, Tag1 ("Re__Automata", 37)); (("category", 618), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Re__")), "Category"), "t"), 0, (0)), 100000000, 0, -150), (("lib/automata.mli", 77, 2031, 2037), ("lib/automata.mli", 78, 2058, 2063), 0), 0, Tag1 ("Re__Automata", 38)); (("desc", 619), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("E", 946)), "t"), 0, (0)), 100000000, 0, -152)], (0)), 100000000, 0, -151), (("lib/automata.mli", 78, 2058, 2064), ("lib/automata.mli", 79, 2079, 2084), 0), 0, Tag1 ("Re__Automata", 39)); (("status", 620), 1, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("status", 949)), 0, (0)), 100000000, 0, -154)], (0)), 100000000, 0, -153), (("lib/automata.mli", 79, 2079, 2085), ("lib/automata.mli", 80, 2115, 2120), 0), 0, Tag1 ("Re__Automata", 40)); (("hash", 621), 0, (Tag3 ((("hash", 947)), 0, (0)), 100000000, 0, -155), (("lib/automata.mli", 80, 2115, 2121), ("lib/automata.mli", 80, 2115, 2131), 0), 0, Tag1 ("Re__Automata", 41))]], 1, 0, 0, 0, 0, 0, (("lib/automata.mli", 75, 2005, 2007), ("lib/automata.mli", 80, 2115, 2133), 0), 0, 0, 0, Tag1 ("Re__Automata", 36)), 1, 0); (("dummy", 961), ((Tag3 ((("t", 960)), 0, (0)), 100000000, 0, -148), 0, (("lib/automata.mli", 81, 2134, 2136), ("lib/automata.mli", 81, 2134, 2149), 0), 0, Tag1 ("Re__Automata", 42)), 0); (("create", 962), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Re__")), "Category"), "t"), 0, (0)), 100000000, 0, -147), (Tag1 (0, (Tag3 ((("expr", 927)), 0, (0)), 100000000, 0, -146), (Tag3 ((("t", 960)), 0, (0)), 100000000, 0, -145), 0), 100000000, 0, -144), 0), 100000000, 0, -143), 0, (("lib/automata.mli", 82, 2150, 2152), ("lib/automata.mli", 82, 2150, 2188), 0), 0, Tag1 ("Re__Automata", 43)), 0); Tag3 (("Table", 963), 0, (Tag1 ([Tag1 (("key", 964), (0, 0, 0, 1, ((Tag3 ((("t", 960)), 0, (0)), 100000000, 0, -289)), 0, 0, 0, 0, (("lib/automata.mli", 83, 2189, 2221), ("lib/automata.mli", 83, 2189, 2233), 0), 0, 0, 0, Tag1 ("Re__Automata", 44)), 1, 0); Tag1 (("t", 965), ([((("a")), 100000000, 0, -288)], 1, 0, 1, 0, [15], [2], 0, 0, (("hashtbl.mli", 372, 15205, 15209), ("hashtbl.mli", 372, 15205, 15219), 0), 0, 0, 0, Tag1 ("Stdlib__Hashtbl", 36)), 1, 0); (("create", 966), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -287), (Tag3 ((("t", 965)), [((("a")), 100000000, 0, -286)], (0)), 100000000, 0, -285), 0), 100000000, 0, -284), 0, (("hashtbl.mli", 373, 15220, 15224), ("hashtbl.mli", 373, 15220, 15248), 0), 0, Tag1 ("Stdlib__Hashtbl", 37)), 0); (("clear", 967), ((Tag1 (0, (Tag3 ((("t", 965)), [((("a")), 100000000, 0, -283)], (0)), 100000000, 0, -282), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -281), 0), 100000000, 0, -280), 0, (("hashtbl.mli", 374, 15249, 15253), ("hashtbl.mli", 374, 15249, 15277), 0), 0, Tag1 ("Stdlib__Hashtbl", 38)), 0); (("reset", 968), ((Tag1 (0, (Tag3 ((("t", 965)), [((("a")), 100000000, 0, -279)], (0)), 100000000, 0, -278), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -277), 0), 100000000, 0, -276), 0, (("hashtbl.mli", 375, 15278, 15282), ("hashtbl.mli", 375, 15278, 15306), 0), 0, Tag1 ("Stdlib__Hashtbl", 39)), 0); (("copy", 969), ((Tag1 (0, (Tag3 ((("t", 965)), [((("a")), 100000000, 0, -274)], (0)), 100000000, 0, -275), (Tag3 ((("t", 965)), [((("a")), 100000000, 0, -274)], (0)), 100000000, 0, -273), 0), 100000000, 0, -272), 0, (("hashtbl.mli", 377, 15327, 15331), ("hashtbl.mli", 377, 15327, 15354), 0), 0, Tag1 ("Stdlib__Hashtbl", 40)), 0); (("add", 970), ((Tag1 (0, (Tag3 ((("t", 965)), [((("a")), 100000000, 0, -269)], (0)), 100000000, 0, -271), (Tag1 (0, (Tag3 ((("key", 964)), 0, (0)), 100000000, 0, -270), (Tag1 (0, ((("a")), 100000000, 0, -269), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -268), 0), 100000000, 0, -267), 0), 100000000, 0, -266), 0), 100000000, 0, -265), 0, (("hashtbl.mli", 378, 15355, 15359), ("hashtbl.mli", 378, 15355, 15394), 0), 0, Tag1 ("Stdlib__Hashtbl", 41)), 0); (("remove", 971), ((Tag1 (0, (Tag3 ((("t", 965)), [((("a")), 100000000, 0, -264)], (0)), 100000000, 0, -263), (Tag1 (0, (Tag3 ((("key", 964)), 0, (0)), 100000000, 0, -262), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -261), 0), 100000000, 0, -260), 0), 100000000, 0, -259), 0, (("hashtbl.mli", 379, 15395, 15399), ("hashtbl.mli", 379, 15395, 15431), 0), 0, Tag1 ("Stdlib__Hashtbl", 42)), 0); (("find", 972), ((Tag1 (0, (Tag3 ((("t", 965)), [((("a")), 100000000, 0, -256)], (0)), 100000000, 0, -258), (Tag1 (0, (Tag3 ((("key", 964)), 0, (0)), 100000000, 0, -257), ((("a")), 100000000, 0, -256), 0), 100000000, 0, -255), 0), 100000000, 0, -254), 0, (("hashtbl.mli", 380, 15432, 15436), ("hashtbl.mli", 380, 15432, 15464), 0), 0, Tag1 ("Stdlib__Hashtbl", 43)), 0); (("find_opt", 973), ((Tag1 (0, (Tag3 ((("t", 965)), [((("a")), 100000000, 0, -251)], (0)), 100000000, 0, -253), (Tag1 (0, (Tag3 ((("key", 964)), 0, (0)), 100000000, 0, -252), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -251)], (0)), 100000000, 0, -250), 0), 100000000, 0, -249), 0), 100000000, 0, -248), 0, (("hashtbl.mli", 381, 15465, 15469), ("hashtbl.mli", 381, 15465, 15508), 0), 0, Tag1 ("Stdlib__Hashtbl", 44)), 0); (("find_all", 974), ((Tag1 (0, (Tag3 ((("t", 965)), [((("a")), 100000000, 0, -245)], (0)), 100000000, 0, -247), (Tag1 (0, (Tag3 ((("key", 964)), 0, (0)), 100000000, 0, -246), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -245)], (0)), 100000000, 0, -244), 0), 100000000, 0, -243), 0), 100000000, 0, -242), 0, (("hashtbl.mli", 384, 15533, 15537), ("hashtbl.mli", 384, 15533, 15574), 0), 0, Tag1 ("Stdlib__Hashtbl", 45)), 0); (("replace", 975), ((Tag1 (0, (Tag3 ((("t", 965)), [((("a")), 100000000, 0, -239)], (0)), 100000000, 0, -241), (Tag1 (0, (Tag3 ((("key", 964)), 0, (0)), 100000000, 0, -240), (Tag1 (0, ((("a")), 100000000, 0, -239), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -238), 0), 100000000, 0, -237), 0), 100000000, 0, -236), 0), 100000000, 0, -235), 0, (("hashtbl.mli", 385, 15575, 15579), ("hashtbl.mli", 385, 15575, 15618), 0), 0, Tag1 ("Stdlib__Hashtbl", 46)), 0); (("mem", 976), ((Tag1 (0, (Tag3 ((("t", 965)), [((("a")), 100000000, 0, -234)], (0)), 100000000, 0, -233), (Tag1 (0, (Tag3 ((("key", 964)), 0, (0)), 100000000, 0, -232), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -231), 0), 100000000, 0, -230), 0), 100000000, 0, -229), 0, (("hashtbl.mli", 386, 15619, 15623), ("hashtbl.mli", 386, 15619, 15652), 0), 0, Tag1 ("Stdlib__Hashtbl", 47)), 0); (("iter", 977), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 964)), 0, (0)), 100000000, 0, -228), (Tag1 (0, ((("a")), 100000000, 0, -224), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -227), 0), 100000000, 0, -226), 0), 100000000, 0, -225), (Tag1 (0, (Tag3 ((("t", 965)), [((("a")), 100000000, 0, -224)], (0)), 100000000, 0, -223), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -222), 0), 100000000, 0, -221), 0), 100000000, 0, -220), 0, (("hashtbl.mli", 387, 15653, 15657), ("hashtbl.mli", 387, 15653, 15703), 0), 0, Tag1 ("Stdlib__Hashtbl", 48)), 0); (("filter_map_inplace", 978), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 964)), 0, (0)), 100000000, 0, -219), (Tag1 (0, ((("a")), 100000000, 0, -215), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -215)], (0)), 100000000, 0, -218), 0), 100000000, 0, -217), 0), 100000000, 0, -216), (Tag1 (0, (Tag3 ((("t", 965)), [((("a")), 100000000, 0, -215)], (0)), 100000000, 0, -214), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -213), 0), 100000000, 0, -212), 0), 100000000, 0, -211), 0, (("hashtbl.mli", 388, 15704, 15708), ("hashtbl.mli", 389, 15768, 15778), 0), 0, Tag1 ("Stdlib__Hashtbl", 49)), 0); (("fold", 979), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 964)), 0, (0)), 100000000, 0, -210), (Tag1 (0, ((("a")), 100000000, 0, -206), (Tag1 (0, ((("acc")), 100000000, 0, -204), ((("acc")), 100000000, 0, -204), 0), 100000000, 0, -209), 0), 100000000, 0, -208), 0), 100000000, 0, -207), (Tag1 (0, (Tag3 ((("t", 965)), [((("a")), 100000000, 0, -206)], (0)), 100000000, 0, -205), (Tag1 (0, ((("acc")), 100000000, 0, -204), ((("acc")), 100000000, 0, -204), 0), 100000000, 0, -203), 0), 100000000, 0, -202), 0), 100000000, 0, -201), 0, (("hashtbl.mli", 392, 15803, 15807), ("hashtbl.mli", 393, 15818, 15875), 0), 0, Tag1 ("Stdlib__Hashtbl", 50)), 0); (("length", 980), ((Tag1 (0, (Tag3 ((("t", 965)), [((("a")), 100000000, 0, -200)], (0)), 100000000, 0, -199), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -198), 0), 100000000, 0, -197), 0, (("hashtbl.mli", 394, 15876, 15880), ("hashtbl.mli", 394, 15876, 15904), 0), 0, Tag1 ("Stdlib__Hashtbl", 51)), 0); (("stats", 981), ((Tag1 (0, (Tag3 ((("t", 965)), [((("a")), 100000000, 0, -196)], (0)), 100000000, 0, -195), (Tag3 (Tag1 ((Tag2 ("Stdlib__Hashtbl")), "statistics"), 0, (0)), 100000000, 0, -194), 0), 100000000, 0, -193), 0, (("hashtbl.mli", 395, 15905, 15909), ("hashtbl.mli", 395, 15905, 15938), 0), 0, Tag1 ("Stdlib__Hashtbl", 52)), 0); (("to_seq", 982), ((Tag1 (0, (Tag3 ((("t", 965)), [((("a")), 100000000, 0, -191)], (0)), 100000000, 0, -192), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 964)), 0, (0)), 100000000, 0, -190); ((("a")), 100000000, 0, -191)]), 100000000, 0, -189)], (0)), 100000000, 0, -188), 0), 100000000, 0, -187), 0, (("hashtbl.mli", 397, 15959, 15963), ("hashtbl.mli", 397, 15959, 16000), 0), 0, Tag1 ("Stdlib__Hashtbl", 53)), 0); (("to_seq_keys", 983), ((Tag1 (0, (Tag3 ((("t", 965)), [((0), 100000000, 0, -186)], (0)), 100000000, 0, -185), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("key", 964)), 0, (0)), 100000000, 0, -184)], (0)), 100000000, 0, -183), 0), 100000000, 0, -182), 0, (("hashtbl.mli", 400, 16025, 16029), ("hashtbl.mli", 400, 16025, 16063), 0), 0, Tag1 ("Stdlib__Hashtbl", 54)), 0); (("to_seq_values", 984), ((Tag1 (0, (Tag3 ((("t", 965)), [((("a")), 100000000, 0, -180)], (0)), 100000000, 0, -181), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [((("a")), 100000000, 0, -180)], (0)), 100000000, 0, -179), 0), 100000000, 0, -178), 0, (("hashtbl.mli", 403, 16088, 16092), ("hashtbl.mli", 403, 16088, 16128), 0), 0, Tag1 ("Stdlib__Hashtbl", 55)), 0); (("add_seq", 985), ((Tag1 (0, (Tag3 ((("t", 965)), [((("a")), 100000000, 0, -176)], (0)), 100000000, 0, -177), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 964)), 0, (0)), 100000000, 0, -175); ((("a")), 100000000, 0, -176)]), 100000000, 0, -174)], (0)), 100000000, 0, -173), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -172), 0), 100000000, 0, -171), 0), 100000000, 0, -170), 0, (("hashtbl.mli", 406, 16153, 16157), ("hashtbl.mli", 406, 16153, 16203), 0), 0, Tag1 ("Stdlib__Hashtbl", 56)), 0); (("replace_seq", 986), ((Tag1 (0, (Tag3 ((("t", 965)), [((("a")), 100000000, 0, -168)], (0)), 100000000, 0, -169), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 964)), 0, (0)), 100000000, 0, -167); ((("a")), 100000000, 0, -168)]), 100000000, 0, -166)], (0)), 100000000, 0, -165), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -164), 0), 100000000, 0, -163), 0), 100000000, 0, -162), 0, (("hashtbl.mli", 409, 16228, 16232), ("hashtbl.mli", 409, 16228, 16282), 0), 0, Tag1 ("Stdlib__Hashtbl", 57)), 0); (("of_seq", 987), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 964)), 0, (0)), 100000000, 0, -161); ((("a")), 100000000, 0, -158)]), 100000000, 0, -160)], (0)), 100000000, 0, -159), (Tag3 ((("t", 965)), [((("a")), 100000000, 0, -158)], (0)), 100000000, 0, -157), 0), 100000000, 0, -156), 0, (("hashtbl.mli", 412, 16307, 16311), ("hashtbl.mli", 412, 16307, 16348), 0), 0, Tag1 ("Stdlib__Hashtbl", 58)), 0)]), 0, (("lib/automata.mli", 83, 2189, 2191), ("lib/automata.mli", 83, 2189, 2233), 0), Tag1 ("Re__Automata", 45)), 0, 0)]), 0, (("lib/automata.mli", 74, 1986, 1986), ("lib/automata.mli", 84, 2234, 2237), 0), Tag1 ("Re__Automata", 46)), 0, 0); Tag1 (("working_area", 951), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("lib/automata.mli", 90, 2304, 2304), ("lib/automata.mli", 90, 2304, 2321), 0), 0, 0, 0, Tag1 ("Re__Automata", 47)), 1, 0); (("create_working_area", 952), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -34), (Tag3 ((("working_area", 951)), 0, (0)), 100000000, 0, -33), 0), 100000000, 0, -32), 0, (("lib/automata.mli", 91, 2322, 2322), ("lib/automata.mli", 91, 2322, 2368), 0), 0, Tag1 ("Re__Automata", 48)), 0); (("index_count", 953), ((Tag1 (0, (Tag3 ((("working_area", 951)), 0, (0)), 100000000, 0, -31), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -30), 0), 100000000, 0, -29), 0, (("lib/automata.mli", 92, 2369, 2369), ("lib/automata.mli", 92, 2369, 2406), 0), 0, Tag1 ("Re__Automata", 49)), 0); (("delta", 954), ((Tag1 (0, (Tag3 ((("working_area", 951)), 0, (0)), 100000000, 0, -28), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Re__")), "Category"), "t"), 0, (0)), 100000000, 0, -27), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Re__")), "Cset"), "c"), 0, (0)), 100000000, 0, -26), (Tag1 (0, (Tag3 (Tag1 ((("State", 950)), "t"), 0, (0)), 100000000, 0, -25), (Tag3 (Tag1 ((("State", 950)), "t"), 0, (0)), 100000000, 0, -24), 0), 100000000, 0, -23), 0), 100000000, 0, -22), 0), 100000000, 0, -21), 0), 100000000, 0, -20), 0, (("lib/automata.mli", 94, 2408, 2408), ("lib/automata.mli", 94, 2408, 2478), 0), 0, Tag1 ("Re__Automata", 50)), 0); (("deriv", 955), ((Tag1 (0, (Tag3 ((("working_area", 951)), 0, (0)), 100000000, 0, -19), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Re__")), "Cset"), "t"), 0, (0)), 100000000, 0, -18), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Re__")), "Category"), "t"), 0, (0)), 100000000, 0, -16); (Tag3 (Tag1 (Tag1 ((Tag2 ("Re__")), "Cset"), "t"), 0, (0)), 100000000, 0, -17)]), 100000000, 0, -15)], (0)), 100000000, 0, -14), (Tag1 (0, (Tag3 (Tag1 ((("State", 950)), "t"), 0, (0)), 100000000, 0, -13), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Re__")), "Cset"), "t"), 0, (0)), 100000000, 0, -11); (Tag3 (Tag1 ((("State", 950)), "t"), 0, (0)), 100000000, 0, -12)]), 100000000, 0, -10)], (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("lib/automata.mli", 95, 2479, 2479), ("lib/automata.mli", 97, 2560, 2585), 0), 0, Tag1 ("Re__Automata", 51)), 0); (("status", 956), ((Tag1 (0, (Tag3 (Tag1 ((("State", 950)), "t"), 0, (0)), 100000000, 0, -4), (Tag3 ((("status", 949)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("lib/automata.mli", 101, 2595, 2595), ("lib/automata.mli", 101, 2595, 2625), 0), 0, Tag1 ("Re__Automata", 52)), 0)], "Re__Automata", [("Re__Automata", ("\228y\t\192\135)\001\027\154pU\252\\wv\141")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Re__Pmark", ("\165ks<XZ[\223&\136\255\140G\016\025p")); ("Re__Cset", ("\225r\195\178\225\254S\020 \207H\235\1795\0213")); ("Re__Category", ("\212tx\171G\0000\176\132_\219\135_o\135\016")); ("Re__", ("\0062t\168b\007\236c5\231\253,\210\160Z\n")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

val status : State.t -> status

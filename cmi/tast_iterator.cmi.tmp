type iterator = {
  attribute : iterator -> Typedtree.attribute -> unit;
  attributes : iterator -> Typedtree.attributes -> unit;
  binding_op : iterator -> Typedtree.binding_op -> unit;
  case : 'k. iterator -> 'k Typedtree.case -> unit;
  class_declaration : iterator -> Typedtree.class_declaration -> unit;
  class_description : iterator -> Typedtree.class_description -> unit;
  class_expr : iterator -> Typedtree.class_expr -> unit;
  class_field : iterator -> Typedtree.class_field -> unit;
  class_signature : iterator -> Typedtree.class_signature -> unit;
  class_structure : iterator -> Typedtree.class_structure -> unit;
  class_type : iterator -> Typedtree.class_type -> unit;
  class_type_declaration :
    iterator -> Typedtree.class_type_declaration -> unit;
  class_type_field : iterator -> Typedtree.class_type_field -> unit;
  env : iterator -> Env.t -> unit;
  expr : iterator -> Typedtree.expression -> unit;
  extension_constructor : iterator -> Typedtree.extension_constructor -> unit;
  location : iterator -> Location.t -> unit;
  module_binding : iterator -> Typedtree.module_binding -> unit;
  module_coercion : iterator -> Typedtree.module_coercion -> unit;
  module_declaration : iterator -> Typedtree.module_declaration -> unit;
  module_substitution : iterator -> Typedtree.module_substitution -> unit;
  module_expr : iterator -> Typedtree.module_expr -> unit;
  module_type : iterator -> Typedtree.module_type -> unit;
  module_type_declaration :
    iterator -> Typedtree.module_type_declaration -> unit;
  package_type : iterator -> Typedtree.package_type -> unit;
  pat : 'k. iterator -> 'k Typedtree.general_pattern -> unit;
  row_field : iterator -> Typedtree.row_field -> unit;
  object_field : iterator -> Typedtree.object_field -> unit;
  open_declaration : iterator -> Typedtree.open_declaration -> unit;
  open_description : iterator -> Typedtree.open_description -> unit;
  signature : iterator -> Typedtree.signature -> unit;
  signature_item : iterator -> Typedtree.signature_item -> unit;
  structure : iterator -> Typedtree.structure -> unit;
  structure_item : iterator -> Typedtree.structure_item -> unit;
  typ : iterator -> Typedtree.core_type -> unit;
  type_declaration : iterator -> Typedtree.type_declaration -> unit;
  type_declarations :
    iterator -> Asttypes.rec_flag * Typedtree.type_declaration list -> unit;
  type_extension : iterator -> Typedtree.type_extension -> unit;
  type_exception : iterator -> Typedtree.type_exception -> unit;
  type_kind : iterator -> Typedtree.type_kind -> unit;
  value_binding : iterator -> Typedtree.value_binding -> unit;
  value_bindings :
    iterator -> Asttypes.rec_flag * Typedtree.value_binding list -> unit;
  value_description : iterator -> Typedtree.value_description -> unit;
  with_constraint : iterator -> Typedtree.with_constraint -> unit;
}("DEBUG:rule", [Tag1 (("iterator", 783), (0, 0, [[(("attribute", 382), 0, (Tag1 (0, (Tag3 ((("iterator", 783)), 0, (0)), 100000000, 0, -7), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "attribute"), 0, (0)), 100000000, 0, -6), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), (("typing/tast_iterator.mli", 25, 1209, 1213), ("typing/tast_iterator.mli", 25, 1209, 1254), 0), 0, Tag1 ("Tast_iterator", 4)); (("attributes", 383), 0, (Tag1 (0, (Tag3 ((("iterator", 783)), 0, (0)), 100000000, 0, -12), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "attributes"), 0, (0)), 100000000, 0, -11), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10), 0), 100000000, 0, -9), 0), 100000000, 0, -8), (("typing/tast_iterator.mli", 26, 1255, 1259), ("typing/tast_iterator.mli", 26, 1255, 1302), 0), 0, Tag1 ("Tast_iterator", 5)); (("binding_op", 384), 0, (Tag1 (0, (Tag3 ((("iterator", 783)), 0, (0)), 100000000, 0, -17), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "binding_op"), 0, (0)), 100000000, 0, -16), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -15), 0), 100000000, 0, -14), 0), 100000000, 0, -13), (("typing/tast_iterator.mli", 27, 1303, 1307), ("typing/tast_iterator.mli", 27, 1303, 1350), 0), 0, Tag1 ("Tast_iterator", 6)); (("case", 385), 0, (Tag10 ((Tag1 (0, (Tag3 ((("iterator", 783)), 0, (0)), 100000000, 0, -24), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "case"), [(Tag9 (("k")), 100000000, 0, -19)], (0)), 100000000, 0, -23), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0), 100000000, 0, -20), [(Tag9 (("k")), 100000000, 0, -19)]), 100000000, 0, -18), (("typing/tast_iterator.mli", 28, 1351, 1355), ("typing/tast_iterator.mli", 28, 1351, 1394), 0), 0, Tag1 ("Tast_iterator", 7)); (("class_declaration", 386), 0, (Tag1 (0, (Tag3 ((("iterator", 783)), 0, (0)), 100000000, 0, -29), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "class_declaration"), 0, (0)), 100000000, 0, -28), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -27), 0), 100000000, 0, -26), 0), 100000000, 0, -25), (("typing/tast_iterator.mli", 29, 1395, 1399), ("typing/tast_iterator.mli", 29, 1395, 1456), 0), 0, Tag1 ("Tast_iterator", 8)); (("class_description", 387), 0, (Tag1 (0, (Tag3 ((("iterator", 783)), 0, (0)), 100000000, 0, -34), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "class_description"), 0, (0)), 100000000, 0, -33), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -32), 0), 100000000, 0, -31), 0), 100000000, 0, -30), (("typing/tast_iterator.mli", 30, 1457, 1461), ("typing/tast_iterator.mli", 30, 1457, 1518), 0), 0, Tag1 ("Tast_iterator", 9)); (("class_expr", 388), 0, (Tag1 (0, (Tag3 ((("iterator", 783)), 0, (0)), 100000000, 0, -39), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "class_expr"), 0, (0)), 100000000, 0, -38), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -37), 0), 100000000, 0, -36), 0), 100000000, 0, -35), (("typing/tast_iterator.mli", 31, 1519, 1523), ("typing/tast_iterator.mli", 31, 1519, 1566), 0), 0, Tag1 ("Tast_iterator", 10)); (("class_field", 389), 0, (Tag1 (0, (Tag3 ((("iterator", 783)), 0, (0)), 100000000, 0, -44), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "class_field"), 0, (0)), 100000000, 0, -43), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -42), 0), 100000000, 0, -41), 0), 100000000, 0, -40), (("typing/tast_iterator.mli", 32, 1567, 1571), ("typing/tast_iterator.mli", 32, 1567, 1616), 0), 0, Tag1 ("Tast_iterator", 11)); (("class_signature", 390), 0, (Tag1 (0, (Tag3 ((("iterator", 783)), 0, (0)), 100000000, 0, -49), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "class_signature"), 0, (0)), 100000000, 0, -48), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -47), 0), 100000000, 0, -46), 0), 100000000, 0, -45), (("typing/tast_iterator.mli", 33, 1617, 1621), ("typing/tast_iterator.mli", 33, 1617, 1674), 0), 0, Tag1 ("Tast_iterator", 12)); (("class_structure", 391), 0, (Tag1 (0, (Tag3 ((("iterator", 783)), 0, (0)), 100000000, 0, -54), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "class_structure"), 0, (0)), 100000000, 0, -53), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -52), 0), 100000000, 0, -51), 0), 100000000, 0, -50), (("typing/tast_iterator.mli", 34, 1675, 1679), ("typing/tast_iterator.mli", 34, 1675, 1732), 0), 0, Tag1 ("Tast_iterator", 13)); (("class_type", 392), 0, (Tag1 (0, (Tag3 ((("iterator", 783)), 0, (0)), 100000000, 0, -59), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "class_type"), 0, (0)), 100000000, 0, -58), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -57), 0), 100000000, 0, -56), 0), 100000000, 0, -55), (("typing/tast_iterator.mli", 35, 1733, 1737), ("typing/tast_iterator.mli", 35, 1733, 1780), 0), 0, Tag1 ("Tast_iterator", 14)); (("class_type_declaration", 393), 0, (Tag1 (0, (Tag3 ((("iterator", 783)), 0, (0)), 100000000, 0, -64), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "class_type_declaration"), 0, (0)), 100000000, 0, -63), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -62), 0), 100000000, 0, -61), 0), 100000000, 0, -60), (("typing/tast_iterator.mli", 36, 1781, 1785), ("typing/tast_iterator.mli", 36, 1781, 1852), 0), 0, Tag1 ("Tast_iterator", 15)); (("class_type_field", 394), 0, (Tag1 (0, (Tag3 ((("iterator", 783)), 0, (0)), 100000000, 0, -69), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "class_type_field"), 0, (0)), 100000000, 0, -68), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -67), 0), 100000000, 0, -66), 0), 100000000, 0, -65), (("typing/tast_iterator.mli", 37, 1853, 1857), ("typing/tast_iterator.mli", 37, 1853, 1912), 0), 0, Tag1 ("Tast_iterator", 16)); (("env", 563), 0, (Tag1 (0, (Tag3 ((("iterator", 783)), 0, (0)), 100000000, 0, -74), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -73), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -72), 0), 100000000, 0, -71), 0), 100000000, 0, -70), (("typing/tast_iterator.mli", 38, 1913, 1917), ("typing/tast_iterator.mli", 38, 1913, 1948), 0), 0, Tag1 ("Tast_iterator", 17)); (("expr", 564), 0, (Tag1 (0, (Tag3 ((("iterator", 783)), 0, (0)), 100000000, 0, -79), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "expression"), 0, (0)), 100000000, 0, -78), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -77), 0), 100000000, 0, -76), 0), 100000000, 0, -75), (("typing/tast_iterator.mli", 39, 1949, 1953), ("typing/tast_iterator.mli", 39, 1949, 1990), 0), 0, Tag1 ("Tast_iterator", 18)); (("extension_constructor", 565), 0, (Tag1 (0, (Tag3 ((("iterator", 783)), 0, (0)), 100000000, 0, -84), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "extension_constructor"), 0, (0)), 100000000, 0, -83), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -82), 0), 100000000, 0, -81), 0), 100000000, 0, -80), (("typing/tast_iterator.mli", 40, 1991, 1995), ("typing/tast_iterator.mli", 40, 1991, 2060), 0), 0, Tag1 ("Tast_iterator", 19)); (("location", 632), 0, (Tag1 (0, (Tag3 ((("iterator", 783)), 0, (0)), 100000000, 0, -89), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -88), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -87), 0), 100000000, 0, -86), 0), 100000000, 0, -85), (("typing/tast_iterator.mli", 41, 2061, 2065), ("typing/tast_iterator.mli", 41, 2061, 2106), 0), 0, Tag1 ("Tast_iterator", 20)); (("module_binding", 633), 0, (Tag1 (0, (Tag3 ((("iterator", 783)), 0, (0)), 100000000, 0, -94), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_binding"), 0, (0)), 100000000, 0, -93), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -92), 0), 100000000, 0, -91), 0), 100000000, 0, -90), (("typing/tast_iterator.mli", 42, 2107, 2111), ("typing/tast_iterator.mli", 42, 2107, 2162), 0), 0, Tag1 ("Tast_iterator", 21)); (("module_coercion", 634), 0, (Tag1 (0, (Tag3 ((("iterator", 783)), 0, (0)), 100000000, 0, -99), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_coercion"), 0, (0)), 100000000, 0, -98), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -97), 0), 100000000, 0, -96), 0), 100000000, 0, -95), (("typing/tast_iterator.mli", 43, 2163, 2167), ("typing/tast_iterator.mli", 43, 2163, 2220), 0), 0, Tag1 ("Tast_iterator", 22)); (("module_declaration", 635), 0, (Tag1 (0, (Tag3 ((("iterator", 783)), 0, (0)), 100000000, 0, -104), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_declaration"), 0, (0)), 100000000, 0, -103), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -102), 0), 100000000, 0, -101), 0), 100000000, 0, -100), (("typing/tast_iterator.mli", 44, 2221, 2225), ("typing/tast_iterator.mli", 44, 2221, 2284), 0), 0, Tag1 ("Tast_iterator", 23)); (("module_substitution", 636), 0, (Tag1 (0, (Tag3 ((("iterator", 783)), 0, (0)), 100000000, 0, -109), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_substitution"), 0, (0)), 100000000, 0, -108), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -107), 0), 100000000, 0, -106), 0), 100000000, 0, -105), (("typing/tast_iterator.mli", 45, 2285, 2289), ("typing/tast_iterator.mli", 45, 2285, 2350), 0), 0, Tag1 ("Tast_iterator", 24)); (("module_expr", 637), 0, (Tag1 (0, (Tag3 ((("iterator", 783)), 0, (0)), 100000000, 0, -114), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_expr"), 0, (0)), 100000000, 0, -113), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -112), 0), 100000000, 0, -111), 0), 100000000, 0, -110), (("typing/tast_iterator.mli", 46, 2351, 2355), ("typing/tast_iterator.mli", 46, 2351, 2400), 0), 0, Tag1 ("Tast_iterator", 25)); (("module_type", 638), 0, (Tag1 (0, (Tag3 ((("iterator", 783)), 0, (0)), 100000000, 0, -119), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_type"), 0, (0)), 100000000, 0, -118), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -117), 0), 100000000, 0, -116), 0), 100000000, 0, -115), (("typing/tast_iterator.mli", 47, 2401, 2405), ("typing/tast_iterator.mli", 47, 2401, 2450), 0), 0, Tag1 ("Tast_iterator", 26)); (("module_type_declaration", 639), 0, (Tag1 (0, (Tag3 ((("iterator", 783)), 0, (0)), 100000000, 0, -124), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_type_declaration"), 0, (0)), 100000000, 0, -123), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -122), 0), 100000000, 0, -121), 0), 100000000, 0, -120), (("typing/tast_iterator.mli", 48, 2451, 2455), ("typing/tast_iterator.mli", 48, 2451, 2524), 0), 0, Tag1 ("Tast_iterator", 27)); (("package_type", 640), 0, (Tag1 (0, (Tag3 ((("iterator", 783)), 0, (0)), 100000000, 0, -129), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "package_type"), 0, (0)), 100000000, 0, -128), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -127), 0), 100000000, 0, -126), 0), 100000000, 0, -125), (("typing/tast_iterator.mli", 49, 2525, 2529), ("typing/tast_iterator.mli", 49, 2525, 2576), 0), 0, Tag1 ("Tast_iterator", 28)); (("pat", 641), 0, (Tag10 ((Tag1 (0, (Tag3 ((("iterator", 783)), 0, (0)), 100000000, 0, -136), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "general_pattern"), [(Tag9 (("k")), 100000000, 0, -131)], (0)), 100000000, 0, -135), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -134), 0), 100000000, 0, -133), 0), 100000000, 0, -132), [(Tag9 (("k")), 100000000, 0, -131)]), 100000000, 0, -130), (("typing/tast_iterator.mli", 50, 2577, 2581), ("typing/tast_iterator.mli", 50, 2577, 2630), 0), 0, Tag1 ("Tast_iterator", 29)); (("row_field", 642), 0, (Tag1 (0, (Tag3 ((("iterator", 783)), 0, (0)), 100000000, 0, -141), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "row_field"), 0, (0)), 100000000, 0, -140), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -139), 0), 100000000, 0, -138), 0), 100000000, 0, -137), (("typing/tast_iterator.mli", 51, 2631, 2635), ("typing/tast_iterator.mli", 51, 2631, 2676), 0), 0, Tag1 ("Tast_iterator", 30)); (("object_field", 643), 0, (Tag1 (0, (Tag3 ((("iterator", 783)), 0, (0)), 100000000, 0, -146), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "object_field"), 0, (0)), 100000000, 0, -145), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -144), 0), 100000000, 0, -143), 0), 100000000, 0, -142), (("typing/tast_iterator.mli", 52, 2677, 2681), ("typing/tast_iterator.mli", 52, 2677, 2728), 0), 0, Tag1 ("Tast_iterator", 31)); (("open_declaration", 644), 0, (Tag1 (0, (Tag3 ((("iterator", 783)), 0, (0)), 100000000, 0, -151), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "open_declaration"), 0, (0)), 100000000, 0, -150), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -149), 0), 100000000, 0, -148), 0), 100000000, 0, -147), (("typing/tast_iterator.mli", 53, 2729, 2733), ("typing/tast_iterator.mli", 53, 2729, 2788), 0), 0, Tag1 ("Tast_iterator", 32)); (("open_description", 645), 0, (Tag1 (0, (Tag3 ((("iterator", 783)), 0, (0)), 100000000, 0, -156), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "open_description"), 0, (0)), 100000000, 0, -155), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -154), 0), 100000000, 0, -153), 0), 100000000, 0, -152), (("typing/tast_iterator.mli", 54, 2789, 2793), ("typing/tast_iterator.mli", 54, 2789, 2848), 0), 0, Tag1 ("Tast_iterator", 33)); (("signature", 646), 0, (Tag1 (0, (Tag3 ((("iterator", 783)), 0, (0)), 100000000, 0, -161), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "signature"), 0, (0)), 100000000, 0, -160), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -159), 0), 100000000, 0, -158), 0), 100000000, 0, -157), (("typing/tast_iterator.mli", 55, 2849, 2853), ("typing/tast_iterator.mli", 55, 2849, 2894), 0), 0, Tag1 ("Tast_iterator", 34)); (("signature_item", 647), 0, (Tag1 (0, (Tag3 ((("iterator", 783)), 0, (0)), 100000000, 0, -166), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "signature_item"), 0, (0)), 100000000, 0, -165), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -164), 0), 100000000, 0, -163), 0), 100000000, 0, -162), (("typing/tast_iterator.mli", 56, 2895, 2899), ("typing/tast_iterator.mli", 56, 2895, 2950), 0), 0, Tag1 ("Tast_iterator", 35)); (("structure", 648), 0, (Tag1 (0, (Tag3 ((("iterator", 783)), 0, (0)), 100000000, 0, -171), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "structure"), 0, (0)), 100000000, 0, -170), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -169), 0), 100000000, 0, -168), 0), 100000000, 0, -167), (("typing/tast_iterator.mli", 57, 2951, 2955), ("typing/tast_iterator.mli", 57, 2951, 2996), 0), 0, Tag1 ("Tast_iterator", 36)); (("structure_item", 649), 0, (Tag1 (0, (Tag3 ((("iterator", 783)), 0, (0)), 100000000, 0, -176), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "structure_item"), 0, (0)), 100000000, 0, -175), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -174), 0), 100000000, 0, -173), 0), 100000000, 0, -172), (("typing/tast_iterator.mli", 58, 2997, 3001), ("typing/tast_iterator.mli", 58, 2997, 3052), 0), 0, Tag1 ("Tast_iterator", 37)); (("typ", 650), 0, (Tag1 (0, (Tag3 ((("iterator", 783)), 0, (0)), 100000000, 0, -181), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "core_type"), 0, (0)), 100000000, 0, -180), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -179), 0), 100000000, 0, -178), 0), 100000000, 0, -177), (("typing/tast_iterator.mli", 59, 3053, 3057), ("typing/tast_iterator.mli", 59, 3053, 3092), 0), 0, Tag1 ("Tast_iterator", 38)); (("type_declaration", 651), 0, (Tag1 (0, (Tag3 ((("iterator", 783)), 0, (0)), 100000000, 0, -186), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "type_declaration"), 0, (0)), 100000000, 0, -185), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -184), 0), 100000000, 0, -183), 0), 100000000, 0, -182), (("typing/tast_iterator.mli", 60, 3093, 3097), ("typing/tast_iterator.mli", 60, 3093, 3152), 0), 0, Tag1 ("Tast_iterator", 39)); (("type_declarations", 652), 0, (Tag1 (0, (Tag3 ((("iterator", 783)), 0, (0)), 100000000, 0, -194), (Tag1 (0, (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "rec_flag"), 0, (0)), 100000000, 0, -191); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "type_declaration"), 0, (0)), 100000000, 0, -193)], (0)), 100000000, 0, -192)]), 100000000, 0, -190), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -189), 0), 100000000, 0, -188), 0), 100000000, 0, -187), (("typing/tast_iterator.mli", 61, 3153, 3157), ("typing/tast_iterator.mli", 61, 3153, 3231), 0), 0, Tag1 ("Tast_iterator", 40)); (("type_extension", 653), 0, (Tag1 (0, (Tag3 ((("iterator", 783)), 0, (0)), 100000000, 0, -199), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "type_extension"), 0, (0)), 100000000, 0, -198), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -197), 0), 100000000, 0, -196), 0), 100000000, 0, -195), (("typing/tast_iterator.mli", 62, 3232, 3236), ("typing/tast_iterator.mli", 62, 3232, 3287), 0), 0, Tag1 ("Tast_iterator", 41)); (("type_exception", 654), 0, (Tag1 (0, (Tag3 ((("iterator", 783)), 0, (0)), 100000000, 0, -204), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "type_exception"), 0, (0)), 100000000, 0, -203), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -202), 0), 100000000, 0, -201), 0), 100000000, 0, -200), (("typing/tast_iterator.mli", 63, 3288, 3292), ("typing/tast_iterator.mli", 63, 3288, 3343), 0), 0, Tag1 ("Tast_iterator", 42)); (("type_kind", 655), 0, (Tag1 (0, (Tag3 ((("iterator", 783)), 0, (0)), 100000000, 0, -209), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "type_kind"), 0, (0)), 100000000, 0, -208), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -207), 0), 100000000, 0, -206), 0), 100000000, 0, -205), (("typing/tast_iterator.mli", 64, 3344, 3348), ("typing/tast_iterator.mli", 64, 3344, 3389), 0), 0, Tag1 ("Tast_iterator", 43)); (("value_binding", 656), 0, (Tag1 (0, (Tag3 ((("iterator", 783)), 0, (0)), 100000000, 0, -214), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "value_binding"), 0, (0)), 100000000, 0, -213), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -212), 0), 100000000, 0, -211), 0), 100000000, 0, -210), (("typing/tast_iterator.mli", 65, 3390, 3394), ("typing/tast_iterator.mli", 65, 3390, 3443), 0), 0, Tag1 ("Tast_iterator", 44)); (("value_bindings", 657), 0, (Tag1 (0, (Tag3 ((("iterator", 783)), 0, (0)), 100000000, 0, -222), (Tag1 (0, (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "rec_flag"), 0, (0)), 100000000, 0, -219); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "value_binding"), 0, (0)), 100000000, 0, -221)], (0)), 100000000, 0, -220)]), 100000000, 0, -218), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -217), 0), 100000000, 0, -216), 0), 100000000, 0, -215), (("typing/tast_iterator.mli", 66, 3444, 3448), ("typing/tast_iterator.mli", 66, 3444, 3516), 0), 0, Tag1 ("Tast_iterator", 45)); (("value_description", 658), 0, (Tag1 (0, (Tag3 ((("iterator", 783)), 0, (0)), 100000000, 0, -227), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "value_description"), 0, (0)), 100000000, 0, -226), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -225), 0), 100000000, 0, -224), 0), 100000000, 0, -223), (("typing/tast_iterator.mli", 67, 3517, 3521), ("typing/tast_iterator.mli", 67, 3517, 3578), 0), 0, Tag1 ("Tast_iterator", 46)); (("with_constraint", 659), 0, (Tag1 (0, (Tag3 ((("iterator", 783)), 0, (0)), 100000000, 0, -232), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "with_constraint"), 0, (0)), 100000000, 0, -231), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -230), 0), 100000000, 0, -229), 0), 100000000, 0, -228), (("typing/tast_iterator.mli", 68, 3579, 3583), ("typing/tast_iterator.mli", 68, 3579, 3636), 0), 0, Tag1 ("Tast_iterator", 47))]], 1, 0, 0, 0, 0, 0, (("typing/tast_iterator.mli", 23, 1189, 1189), ("typing/tast_iterator.mli", 69, 3637, 3640), 0), 0, 0, 0, Tag1 ("Tast_iterator", 3)), 1, 0); (("default_iterator", 784), ((Tag3 ((("iterator", 783)), 0, (0)), 100000000, 0, -2), 0, (("typing/tast_iterator.mli", 71, 3642, 3642), ("typing/tast_iterator.mli", 71, 3642, 3672), 0), 0, Tag1 ("Tast_iterator", 50)), 0)], "Tast_iterator", [("Tast_iterator", ("\244\212\191\211\160<\018\221&\255\028\234\201K\1459")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Types", ("\177\238\029.\220\006\163!\230\015\006\182\133\155\194\166")); ("Typedtree", ("c5z\186\175w\146\254\018V\184\031\0038\004\227")); ("Type_immediacy", ("\"\127k\011Q\241\211\138\193;8\142\129\141#\251")); ("Subst", ("\021\031\148\223\127\186\189\135\027}\145r\216\143\177\156")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shape", ("\235\127Y\213\025\137=\244\218\181\248N\189\188\216p")); ("Primitive", ("}Shh\162\015|\220A\203\249\232\245G\213\019")); ("Path", ("\012\183\178\025\1298\228*\021r\185\160Y\252\n\026")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Outcometree", ("9\021%\234\211\206\210\004H\165\208\2014\234Q\142")); ("Misc", ("*\026\026\234c\191\131\161\\\203\183\012O\252\153\198")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Load_path", ("\012@\228l\230\164S\172h\1726X\020\252o}")); ("Identifiable", ("\004F\207\014\158GU\001\184\214\187%/#;\211")); ("Ident", ("\b9;!\187.\220\163(x\b\174\\\223\020\004")); ("Env", ("\021\n\181\142x\b\169j\227\"\017\248*\178\245\223")); ("Cmi_format", ("6\177\bU\139\"\023\152=\249\135\174\b\011Cg")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Build_path_prefix_map", ("y\028\167\207D\220\198\216\011\208\172\149\2416\bc")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216"))], [(0)])

val default_iterator : iterator

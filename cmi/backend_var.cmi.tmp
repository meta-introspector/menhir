type t = Ident.t
module T = Ident.T
val equal : T.t -> T.t -> bool
val hash : T.t -> int
val output : out_channel -> T.t -> unit
val print : Format.formatter -> T.t -> unit
module Set = Ident.Set
module Map = Ident.Map
module Tbl = Ident.Tbl
val print_with_scope : Format.formatter -> t -> unit
val create_scoped : scope:int -> string -> t
val create_local : string -> t
val create_persistent : string -> t
val create_predef : string -> t
val rename : t -> t
val name : t -> string
val unique_name : t -> string
val unique_toplevel_name : t -> string
val persistent : t -> bool
val same : t -> t -> bool
val compare : t -> t -> int
val global : t -> bool
val is_predef : t -> bool
val scope : t -> int
val lowest_scope : int
val highest_scope : int
val reinit : unit -> unit
type 'a tbl = 'a Ident.tbl
val empty : 'a tbl
val add : t -> 'a -> 'a tbl -> 'a tbl
val find_same : t -> 'a tbl -> 'a
val find_name : string -> 'a tbl -> t * 'a
val find_all : string -> 'a tbl -> (t * 'a) list
val find_all_seq : string -> 'a tbl -> (t * 'a) Seq.t
val fold_name : (t -> 'a -> 'b -> 'b) -> 'a tbl -> 'b -> 'b
val fold_all : (t -> 'a -> 'b -> 'b) -> 'a tbl -> 'b -> 'b
val iter : (t -> 'a -> unit) -> 'a tbl -> unit
val remove : t -> 'a tbl -> 'a tbl
val make_key_generator : unit -> t -> t
type backend_var = t
module Provenance :
  sig
    type t
    val create :
      module_path:Path.t ->
      location:Debuginfo.t -> original_ident:Ident.t -> t
    val module_path : t -> Path.t
    val location : t -> Debuginfo.t
    val original_ident : t -> Ident.t
    val print : Format.formatter -> t -> unit
  end
module With_provenance :
  sig
    type t
    val print : Format.formatter -> t -> unit
    val create : ?provenance:Provenance.t -> backend_var -> t
    val var : t -> backend_var
    val provenance : t -> Provenance.t option
    val name : t -> string
    val rename : t -> t("DEBUG:rule", [Tag1 (("t", 750), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -158)), 0, 0, 0, 0, (("typing/ident.mli", 18, 1113, 1113), ("typing/ident.mli", 18, 1113, 1119), 0), 0, 0, 0, Tag1 ("Ident", 0)), 1, 0); Tag3 (("T", 751), 1, (Tag3 (Tag1 ((Tag2 ("Ident")), "T")), 0, (("typing/ident.mli", 20, 1121, 1129), ("typing/ident.mli", 20, 1121, 1160), 0), Tag1 ("Identifiable", 51)), 0, 0); (("equal", 752), ((Tag1 (0, (Tag3 (Tag1 ((("T", 751)), "t"), 0, (0)), 100000000, 0, -157), (Tag1 (0, (Tag3 (Tag1 ((("T", 751)), "t"), 0, (0)), 100000000, 0, -156), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -155), 0), 100000000, 0, -154), 0), 100000000, 0, -153), 0, (("typing/ident.mli", 20, 1121, 1129), ("typing/ident.mli", 20, 1121, 1160), 0), 0, Tag1 ("Stdlib__Hashtbl", 32)), 0); (("hash", 753), ((Tag1 (0, (Tag3 (Tag1 ((("T", 751)), "t"), 0, (0)), 100000000, 0, -152), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -151), 0), 100000000, 0, -150), 0, (("typing/ident.mli", 20, 1121, 1129), ("typing/ident.mli", 20, 1121, 1160), 0), 0, Tag1 ("Stdlib__Hashtbl", 33)), 0); (("output", 754), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -149), (Tag1 (0, (Tag3 (Tag1 ((("T", 751)), "t"), 0, (0)), 100000000, 0, -148), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -147), 0), 100000000, 0, -146), 0), 100000000, 0, -145), 0, (("typing/ident.mli", 20, 1121, 1129), ("typing/ident.mli", 20, 1121, 1160), 0), 0, Tag1 ("Identifiable", 3)), 0); (("print", 755), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -144), (Tag1 (0, (Tag3 (Tag1 ((("T", 751)), "t"), 0, (0)), 100000000, 0, -143), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -142), 0), 100000000, 0, -141), 0), 100000000, 0, -140), 0, (("typing/ident.mli", 20, 1121, 1129), ("typing/ident.mli", 20, 1121, 1160), 0), 0, Tag1 ("Identifiable", 4)), 0); Tag3 (("Set", 756), 1, (Tag3 (Tag1 ((Tag2 ("Ident")), "Set")), 0, (("typing/ident.mli", 20, 1121, 1129), ("typing/ident.mli", 20, 1121, 1160), 0), Tag1 ("Identifiable", 53)), 0, 0); Tag3 (("Map", 757), 1, (Tag3 (Tag1 ((Tag2 ("Ident")), "Map")), 0, (("typing/ident.mli", 20, 1121, 1129), ("typing/ident.mli", 20, 1121, 1160), 0), Tag1 ("Identifiable", 54)), 0, 0); Tag3 (("Tbl", 758), 1, (Tag3 (Tag1 ((Tag2 ("Ident")), "Tbl")), 0, (("typing/ident.mli", 20, 1121, 1129), ("typing/ident.mli", 20, 1121, 1160), 0), Tag1 ("Identifiable", 55)), 0, 0); (("print_with_scope", 759), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -139), (Tag1 (0, (Tag3 ((("t", 750)), 0, (0)), 100000000, 0, -138), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -137), 0), 100000000, 0, -136), 0), 100000000, 0, -135), 0, (("typing/ident.mli", 27, 1320, 1320), ("typing/ident.mli", 27, 1320, 1372), 0), 0, Tag1 ("Ident", 2)), 0); (("create_scoped", 760), ((Tag1 (("scope"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -134), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -133), (Tag3 ((("t", 750)), 0, (0)), 100000000, 0, -132), 0), 100000000, 0, -131), 0), 100000000, 0, -130), 0, (("typing/ident.mli", 32, 1500, 1500), ("typing/ident.mli", 32, 1500, 1543), 0), 0, Tag1 ("Ident", 3)), 0); (("create_local", 761), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -129), (Tag3 ((("t", 750)), 0, (0)), 100000000, 0, -128), 0), 100000000, 0, -127), 0, (("typing/ident.mli", 33, 1544, 1544), ("typing/ident.mli", 33, 1544, 1573), 0), 0, Tag1 ("Ident", 4)), 0); (("create_persistent", 762), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -126), (Tag3 ((("t", 750)), 0, (0)), 100000000, 0, -125), 0), 100000000, 0, -124), 0, (("typing/ident.mli", 34, 1574, 1574), ("typing/ident.mli", 34, 1574, 1608), 0), 0, Tag1 ("Ident", 5)), 0); (("create_predef", 763), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -123), (Tag3 ((("t", 750)), 0, (0)), 100000000, 0, -122), 0), 100000000, 0, -121), 0, (("typing/ident.mli", 35, 1609, 1609), ("typing/ident.mli", 35, 1609, 1639), 0), 0, Tag1 ("Ident", 6)), 0); (("rename", 764), ((Tag1 (0, (Tag3 ((("t", 750)), 0, (0)), 100000000, 0, -120), (Tag3 ((("t", 750)), 0, (0)), 100000000, 0, -119), 0), 100000000, 0, -118), 0, (("typing/ident.mli", 37, 1641, 1641), ("typing/ident.mli", 37, 1641, 1659), 0), 0, Tag1 ("Ident", 7)), 0); (("name", 765), ((Tag1 (0, (Tag3 ((("t", 750)), 0, (0)), 100000000, 0, -117), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -116), 0), 100000000, 0, -115), 0, (("typing/ident.mli", 42, 1847, 1847), ("typing/ident.mli", 42, 1847, 1868), 0), 0, Tag1 ("Ident", 8)), 0); (("unique_name", 766), ((Tag1 (0, (Tag3 ((("t", 750)), 0, (0)), 100000000, 0, -114), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -113), 0), 100000000, 0, -112), 0, (("typing/ident.mli", 43, 1869, 1869), ("typing/ident.mli", 43, 1869, 1897), 0), 0, Tag1 ("Ident", 9)), 0); (("unique_toplevel_name", 767), ((Tag1 (0, (Tag3 ((("t", 750)), 0, (0)), 100000000, 0, -111), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -110), 0), 100000000, 0, -109), 0, (("typing/ident.mli", 44, 1898, 1898), ("typing/ident.mli", 44, 1898, 1935), 0), 0, Tag1 ("Ident", 10)), 0); (("persistent", 768), ((Tag1 (0, (Tag3 ((("t", 750)), 0, (0)), 100000000, 0, -108), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -107), 0), 100000000, 0, -106), 0, (("typing/ident.mli", 45, 1936, 1936), ("typing/ident.mli", 45, 1936, 1961), 0), 0, Tag1 ("Ident", 11)), 0); (("same", 769), ((Tag1 (0, (Tag3 ((("t", 750)), 0, (0)), 100000000, 0, -105), (Tag1 (0, (Tag3 ((("t", 750)), 0, (0)), 100000000, 0, -104), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -103), 0), 100000000, 0, -102), 0), 100000000, 0, -101), 0, (("typing/ident.mli", 46, 1962, 1962), ("typing/ident.mli", 46, 1962, 1986), 0), 0, Tag1 ("Ident", 12)), 0); (("compare", 770), ((Tag1 (0, (Tag3 ((("t", 750)), 0, (0)), 100000000, 0, -100), (Tag1 (0, (Tag3 ((("t", 750)), 0, (0)), 100000000, 0, -99), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -98), 0), 100000000, 0, -97), 0), 100000000, 0, -96), 0, (("typing/ident.mli", 53, 2269, 2269), ("typing/ident.mli", 53, 2269, 2295), 0), 0, Tag1 ("Ident", 13)), 0); (("global", 771), ((Tag1 (0, (Tag3 ((("t", 750)), 0, (0)), 100000000, 0, -95), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -94), 0), 100000000, 0, -93), 0, (("typing/ident.mli", 55, 2297, 2297), ("typing/ident.mli", 55, 2297, 2318), 0), 0, Tag1 ("Ident", 14)), 0); (("is_predef", 772), ((Tag1 (0, (Tag3 ((("t", 750)), 0, (0)), 100000000, 0, -92), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -91), 0), 100000000, 0, -90), 0, (("typing/ident.mli", 56, 2319, 2319), ("typing/ident.mli", 56, 2319, 2343), 0), 0, Tag1 ("Ident", 15)), 0); (("scope", 773), ((Tag1 (0, (Tag3 ((("t", 750)), 0, (0)), 100000000, 0, -89), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -88), 0), 100000000, 0, -87), 0, (("typing/ident.mli", 58, 2345, 2345), ("typing/ident.mli", 58, 2345, 2364), 0), 0, Tag1 ("Ident", 16)), 0); (("lowest_scope", 774), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -86), 0, (("typing/ident.mli", 60, 2366, 2366), ("typing/ident.mli", 60, 2366, 2388), 0), 0, Tag1 ("Ident", 17)), 0); (("highest_scope", 775), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -85), 0, (("typing/ident.mli", 61, 2389, 2389), ("typing/ident.mli", 61, 2389, 2411), 0), 0, Tag1 ("Ident", 18)), 0); (("reinit", 776), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -84), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -83), 0), 100000000, 0, -82), 0, (("typing/ident.mli", 63, 2413, 2413), ("typing/ident.mli", 63, 2413, 2437), 0), 0, Tag1 ("Ident", 19)), 0); Tag1 (("tbl", 777), ([((("a")), 100000000, 0, -81)], 1, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Ident")), "tbl"), [((("a")), 100000000, 0, -81)], (0)), 100000000, 0, -80)), [7], [2], 0, 0, (("typing/ident.mli", 65, 2439, 2439), ("typing/ident.mli", 65, 2439, 2450), 0), 0, 0, 0, Tag1 ("Ident", 20)), 1, 0); (("empty", 778), ((Tag3 ((("tbl", 777)), [((("a")), 100000000, 0, -79)], (0)), 100000000, 0, -78), 0, (("typing/ident.mli", 97, 3763, 3763), ("typing/ident.mli", 97, 3763, 3780), 0), 0, Tag1 ("Ident", 21)), 0); (("add", 779), ((Tag1 (0, (Tag3 ((("t", 750)), 0, (0)), 100000000, 0, -77), (Tag1 (0, ((("a")), 100000000, 0, -75), (Tag1 (0, (Tag3 ((("tbl", 777)), [((("a")), 100000000, 0, -75)], (0)), 100000000, 0, -76), (Tag3 ((("tbl", 777)), [((("a")), 100000000, 0, -75)], (0)), 100000000, 0, -74), 0), 100000000, 0, -73), 0), 100000000, 0, -72), 0), 100000000, 0, -71), 0, (("typing/ident.mli", 98, 3781, 3781), ("typing/ident.mli", 98, 3781, 3817), 0), 0, Tag1 ("Ident", 22)), 0); (("find_same", 780), ((Tag1 (0, (Tag3 ((("t", 750)), 0, (0)), 100000000, 0, -70), (Tag1 (0, (Tag3 ((("tbl", 777)), [((("a")), 100000000, 0, -68)], (0)), 100000000, 0, -69), ((("a")), 100000000, 0, -68), 0), 100000000, 0, -67), 0), 100000000, 0, -66), 0, (("typing/ident.mli", 99, 3818, 3818), ("typing/ident.mli", 99, 3818, 3850), 0), 0, Tag1 ("Ident", 23)), 0); (("find_name", 781), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -65), (Tag1 (0, (Tag3 ((("tbl", 777)), [((("a")), 100000000, 0, -63)], (0)), 100000000, 0, -64), (Tag2 ([(Tag3 ((("t", 750)), 0, (0)), 100000000, 0, -62); ((("a")), 100000000, 0, -63)]), 100000000, 0, -61), 0), 100000000, 0, -60), 0), 100000000, 0, -59), 0, (("typing/ident.mli", 100, 3851, 3851), ("typing/ident.mli", 100, 3851, 3892), 0), 0, Tag1 ("Ident", 24)), 0); (("find_all", 782), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -58), (Tag1 (0, (Tag3 ((("tbl", 777)), [((("a")), 100000000, 0, -56)], (0)), 100000000, 0, -57), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("t", 750)), 0, (0)), 100000000, 0, -55); ((("a")), 100000000, 0, -56)]), 100000000, 0, -54)], (0)), 100000000, 0, -53), 0), 100000000, 0, -52), 0), 100000000, 0, -51), 0, (("typing/ident.mli", 101, 3893, 3893), ("typing/ident.mli", 101, 3893, 3940), 0), 0, Tag1 ("Ident", 25)), 0); (("find_all_seq", 783), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -50), (Tag1 (0, (Tag3 ((("tbl", 777)), [((("a")), 100000000, 0, -48)], (0)), 100000000, 0, -49), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("t", 750)), 0, (0)), 100000000, 0, -47); ((("a")), 100000000, 0, -48)]), 100000000, 0, -46)], (0)), 100000000, 0, -45), 0), 100000000, 0, -44), 0), 100000000, 0, -43), 0, (("typing/ident.mli", 102, 3941, 3941), ("typing/ident.mli", 102, 3941, 3993), 0), 0, Tag1 ("Ident", 26)), 0); (("fold_name", 784), ((Tag1 (0, (Tag1 (0, (Tag3 ((("t", 750)), 0, (0)), 100000000, 0, -42), (Tag1 (0, ((("a")), 100000000, 0, -38), (Tag1 (0, ((("b")), 100000000, 0, -36), ((("b")), 100000000, 0, -36), 0), 100000000, 0, -41), 0), 100000000, 0, -40), 0), 100000000, 0, -39), (Tag1 (0, (Tag3 ((("tbl", 777)), [((("a")), 100000000, 0, -38)], (0)), 100000000, 0, -37), (Tag1 (0, ((("b")), 100000000, 0, -36), ((("b")), 100000000, 0, -36), 0), 100000000, 0, -35), 0), 100000000, 0, -34), 0), 100000000, 0, -33), 0, (("typing/ident.mli", 103, 3994, 3994), ("typing/ident.mli", 103, 3994, 4052), 0), 0, Tag1 ("Ident", 27)), 0); (("fold_all", 785), ((Tag1 (0, (Tag1 (0, (Tag3 ((("t", 750)), 0, (0)), 100000000, 0, -32), (Tag1 (0, ((("a")), 100000000, 0, -28), (Tag1 (0, ((("b")), 100000000, 0, -26), ((("b")), 100000000, 0, -26), 0), 100000000, 0, -31), 0), 100000000, 0, -30), 0), 100000000, 0, -29), (Tag1 (0, (Tag3 ((("tbl", 777)), [((("a")), 100000000, 0, -28)], (0)), 100000000, 0, -27), (Tag1 (0, ((("b")), 100000000, 0, -26), ((("b")), 100000000, 0, -26), 0), 100000000, 0, -25), 0), 100000000, 0, -24), 0), 100000000, 0, -23), 0, (("typing/ident.mli", 104, 4053, 4053), ("typing/ident.mli", 104, 4053, 4110), 0), 0, Tag1 ("Ident", 28)), 0); (("iter", 786), ((Tag1 (0, (Tag1 (0, (Tag3 ((("t", 750)), 0, (0)), 100000000, 0, -22), (Tag1 (0, ((("a")), 100000000, 0, -18), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -21), 0), 100000000, 0, -20), 0), 100000000, 0, -19), (Tag1 (0, (Tag3 ((("tbl", 777)), [((("a")), 100000000, 0, -18)], (0)), 100000000, 0, -17), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -16), 0), 100000000, 0, -15), 0), 100000000, 0, -14), 0, (("typing/ident.mli", 105, 4111, 4111), ("typing/ident.mli", 105, 4111, 4156), 0), 0, Tag1 ("Ident", 29)), 0); (("remove", 787), ((Tag1 (0, (Tag3 ((("t", 750)), 0, (0)), 100000000, 0, -13), (Tag1 (0, (Tag3 ((("tbl", 777)), [((("a")), 100000000, 0, -11)], (0)), 100000000, 0, -12), (Tag3 ((("tbl", 777)), [((("a")), 100000000, 0, -11)], (0)), 100000000, 0, -10), 0), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("typing/ident.mli", 106, 4157, 4157), ("typing/ident.mli", 106, 4157, 4190), 0), 0, Tag1 ("Ident", 30)), 0); (("make_key_generator", 788), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7), (Tag1 (0, (Tag3 ((("t", 750)), 0, (0)), 100000000, 0, -6), (Tag3 ((("t", 750)), 0, (0)), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0, (("typing/ident.mli", 110, 4223, 4223), ("typing/ident.mli", 110, 4223, 4264), 0), 0, Tag1 ("Ident", 31)), 0); Tag1 (("backend_var", 789), (0, 0, 0, 1, ((Tag3 ((("t", 750)), 0, (0)), 100000000, 0, -2)), 0, 0, 0, 0, (("middle_end/backend_var.mli", 22, 1232, 1232), ("middle_end/backend_var.mli", 22, 1232, 1252), 0), 0, 0, 0, Tag1 ("Backend_var", 0)), 1, 0); Tag3 (("Provenance", 790), 0, (Tag1 ([Tag1 (("t", 792), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("middle_end/backend_var.mli", 25, 1278, 1280), ("middle_end/backend_var.mli", 25, 1278, 1286), 0), 0, 0, 0, Tag1 ("Backend_var", 1)), 1, 0); (("create", 793), ((Tag1 (("module_path"), (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -179), (Tag1 (("location"), (Tag3 (Tag1 ((Tag2 ("Debuginfo")), "t"), 0, (0)), 100000000, 0, -178), (Tag1 (("original_ident"), (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -177), (Tag3 ((("t", 792)), 0, (0)), 100000000, 0, -176), 0), 100000000, 0, -175), 0), 100000000, 0, -174), 0), 100000000, 0, -173), 0, (("middle_end/backend_var.mli", 27, 1288, 1290), ("middle_end/backend_var.mli", 31, 1385, 1393), 0), 0, Tag1 ("Backend_var", 2)), 0); (("module_path", 794), ((Tag1 (0, (Tag3 ((("t", 792)), 0, (0)), 100000000, 0, -172), (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -171), 0), 100000000, 0, -170), 0, (("middle_end/backend_var.mli", 33, 1395, 1397), ("middle_end/backend_var.mli", 33, 1395, 1426), 0), 0, Tag1 ("Backend_var", 3)), 0); (("location", 795), ((Tag1 (0, (Tag3 ((("t", 792)), 0, (0)), 100000000, 0, -169), (Tag3 (Tag1 ((Tag2 ("Debuginfo")), "t"), 0, (0)), 100000000, 0, -168), 0), 100000000, 0, -167), 0, (("middle_end/backend_var.mli", 34, 1427, 1429), ("middle_end/backend_var.mli", 34, 1427, 1460), 0), 0, Tag1 ("Backend_var", 4)), 0); (("original_ident", 796), ((Tag1 (0, (Tag3 ((("t", 792)), 0, (0)), 100000000, 0, -166), (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -165), 0), 100000000, 0, -164), 0, (("middle_end/backend_var.mli", 35, 1461, 1463), ("middle_end/backend_var.mli", 35, 1461, 1496), 0), 0, Tag1 ("Backend_var", 5)), 0); (("print", 797), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -163), (Tag1 (0, (Tag3 ((("t", 792)), 0, (0)), 100000000, 0, -162), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -161), 0), 100000000, 0, -160), 0), 100000000, 0, -159), 0, (("middle_end/backend_var.mli", 37, 1498, 1500), ("middle_end/backend_var.mli", 37, 1498, 1541), 0), 0, Tag1 ("Backend_var", 6)), 0)]), 0, (("middle_end/backend_var.mli", 24, 1254, 1254), ("middle_end/backend_var.mli", 38, 1542, 1545), 0), Tag1 ("Backend_var", 7)), 0, 0); Tag3 (("With_provenance", 791), 0, (Tag1 ([Tag1 (("t", 798), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("middle_end/backend_var.mli", 42, 1654, 1656), ("middle_end/backend_var.mli", 42, 1654, 1662), 0), 0, 0, 0, Tag1 ("Backend_var", 8)), 1, 0); (("print", 799), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -203), (Tag1 (0, (Tag3 ((("t", 798)), 0, (0)), 100000000, 0, -202), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -201), 0), 100000000, 0, -200), 0), 100000000, 0, -199), 0, (("middle_end/backend_var.mli", 44, 1664, 1666), ("middle_end/backend_var.mli", 44, 1664, 1707), 0), 0, Tag1 ("Backend_var", 9)), 0); (("create", 800), ((Tag1 (Tag1 ("provenance"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("Provenance", 790)), "t"), 0, (0)), 100000000, 0, -198)], (0)), 100000000, 0, -197), (Tag1 (0, (Tag3 ((("backend_var", 789)), 0, (0)), 100000000, 0, -196), (Tag3 ((("t", 798)), 0, (0)), 100000000, 0, -195), 0), 100000000, 0, -194), 0), 100000000, 0, -193), 0, (("middle_end/backend_var.mli", 46, 1709, 1711), ("middle_end/backend_var.mli", 46, 1709, 1768), 0), 0, Tag1 ("Backend_var", 10)), 0); (("var", 801), ((Tag1 (0, (Tag3 ((("t", 798)), 0, (0)), 100000000, 0, -192), (Tag3 ((("backend_var", 789)), 0, (0)), 100000000, 0, -191), 0), 100000000, 0, -190), 0, (("middle_end/backend_var.mli", 48, 1770, 1772), ("middle_end/backend_var.mli", 48, 1770, 1798), 0), 0, Tag1 ("Backend_var", 11)), 0); (("provenance", 802), ((Tag1 (0, (Tag3 ((("t", 798)), 0, (0)), 100000000, 0, -189), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("Provenance", 790)), "t"), 0, (0)), 100000000, 0, -188)], (0)), 100000000, 0, -187), 0), 100000000, 0, -186), 0, (("middle_end/backend_var.mli", 49, 1799, 1801), ("middle_end/backend_var.mli", 49, 1799, 1842), 0), 0, Tag1 ("Backend_var", 12)), 0); (("name", 803), ((Tag1 (0, (Tag3 ((("t", 798)), 0, (0)), 100000000, 0, -185), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -184), 0), 100000000, 0, -183), 0, (("middle_end/backend_var.mli", 51, 1844, 1846), ("middle_end/backend_var.mli", 51, 1844, 1868), 0), 0, Tag1 ("Backend_var", 13)), 0); (("rename", 804), ((Tag1 (0, (Tag3 ((("t", 798)), 0, (0)), 100000000, 0, -182), (Tag3 ((("t", 798)), 0, (0)), 100000000, 0, -181), 0), 100000000, 0, -180), 0, (("middle_end/backend_var.mli", 53, 1870, 1872), ("middle_end/backend_var.mli", 53, 1870, 1891), 0), 0, Tag1 ("Backend_var", 14)), 0)]), 0, (("middle_end/backend_var.mli", 40, 1547, 1547), ("middle_end/backend_var.mli", 54, 1892, 1895), 0), Tag1 ("Backend_var", 15)), 0, 0)], "Backend_var", [("Backend_var", ("\182\144C\215j:\241\151\214\131?\204\253\002\029\151")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Path", ("\012\183\178\025\1298\228*\021r\185\160Y\252\n\026")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Identifiable", ("\004F\207\014\158GU\001\184\214\187%/#;\211")); ("Ident", ("\b9;!\187.\220\163(x\b\174\\\223\020\004")); ("Debuginfo", ("\131\251\175\217P\194M\163\022\151\002\005\006\185:\185")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216"))], [(0)])

  end

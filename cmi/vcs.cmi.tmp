module type Kind = sig type 'a t val master : 'a t end
module type S =
  sig
    module Branch :
      sig
        type t
        val make : string -> t
        val equal : t -> t -> bool
        val compare : t -> t -> int
        val to_string : t -> string
        val master : t
      end
    type id
    type 'a kind_gen
    type kind = Branch.t kind_gen
    type branch_info = { kind : kind; root : id; pos : id; }
    type ('diff, 'info, 'property_data) t
    val empty : id -> ('diff, 'info, 'property_data) t
    val current_branch : ('e, 'i, 'c) t -> Branch.t
    val branches : ('e, 'i, 'c) t -> Branch.t list
    val get_branch : ('e, 'i, 'c) t -> Branch.t -> branch_info
    val reset_branch : ('e, 'i, 'c) t -> Branch.t -> id -> ('e, 'i, 'c) t
    val branch :
      ('e, 'i, 'c) t ->
      ?root:id -> ?pos:id -> Branch.t -> kind -> ('e, 'i, 'c) t
    val delete_branch : ('e, 'i, 'c) t -> Branch.t -> ('e, 'i, 'c) t
    val merge :
      ('diff, 'i, 'c) t ->
      id ->
      ours:'diff ->
      theirs:'diff -> ?into:Branch.t -> Branch.t -> ('diff, 'i, 'c) t
    val commit : ('diff, 'i, 'c) t -> id -> 'diff -> ('diff, 'i, 'c) t
    val rewrite_merge :
      ('diff, 'i, 'c) t ->
      id ->
      ours:'diff -> theirs:'diff -> at:id -> Branch.t -> ('diff, 'i, 'c) t
    val checkout : ('e, 'i, 'c) t -> Branch.t -> ('e, 'i, 'c) t
    val set_info : ('e, 'info, 'c) t -> id -> 'info -> ('e, 'info, 'c) t
    val get_info : ('e, 'info, 'c) t -> id -> 'info option
    module Dag :
      sig
        type node = id
        module NodeSet :
          sig
            type elt = node
            type t
            val empty : t
            val add : elt -> t -> t
            val singleton : elt -> t
            val remove : elt -> t -> t
            val union : t -> t -> t
            val inter : t -> t -> t
            val disjoint : t -> t -> bool
            val diff : t -> t -> t
            val cardinal : t -> int
            val elements : t -> elt list
            val min_elt : t -> elt
            val min_elt_opt : t -> elt option
            val max_elt : t -> elt
            val max_elt_opt : t -> elt option
            val choose : t -> elt
            val choose_opt : t -> elt option
            val find : elt -> t -> elt
            val find_opt : elt -> t -> elt option
            val find_first : (elt -> bool) -> t -> elt
            val find_first_opt : (elt -> bool) -> t -> elt option
            val find_last : (elt -> bool) -> t -> elt
            val find_last_opt : (elt -> bool) -> t -> elt option
            val iter : (elt -> unit) -> t -> unit
            val fold : (elt -> 'acc -> 'acc) -> t -> 'acc -> 'acc
            val map : (elt -> elt) -> t -> t
            val filter : (elt -> bool) -> t -> t
            val filter_map : (elt -> elt option) -> t -> t
            val partition : (elt -> bool) -> t -> t * t
            val split : elt -> t -> t * bool * t
            val is_empty : t -> bool
            val mem : elt -> t -> bool
            val equal : t -> t -> bool
            val compare : t -> t -> int
            val subset : t -> t -> bool
            val for_all : (elt -> bool) -> t -> bool
            val exists : (elt -> bool) -> t -> bool
            val to_list : t -> elt list
            val of_list : elt list -> t
            val to_seq_from : elt -> t -> elt Seq.t
            val to_seq : t -> elt Seq.t
            val to_rev_seq : t -> elt Seq.t
            val add_seq : elt Seq.t -> t -> t
            val of_seq : elt Seq.t -> t
          end
        type ('edge, 'info, 'cdata) t
        val empty : ('e, 'i, 'd) t
        val add_edge : ('e, 'i, 'd) t -> node -> 'e -> node -> ('e, 'i, 'd) t
        val from_node : ('e, 'i, 'd) t -> node -> (node * 'e) list
        val mem : ('e, 'i, 'd) t -> node -> bool
        val del_edge : ('e, 'i, 'd) t -> node -> node -> ('e, 'i, 'd) t
        val del_nodes : ('e, 'i, 'd) t -> NodeSet.t -> ('e, 'i, 'd) t
        val all_nodes : ('e, 'i, 'd) t -> NodeSet.t
        val get_info : ('e, 'i, 'd) t -> node -> 'i option
        val set_info : ('e, 'i, 'd) t -> node -> 'i -> ('e, 'i, 'd) t
        val clear_info : ('e, 'i, 'd) t -> node -> ('e, 'i, 'd) t
        module Property :
          sig
            type 'd t
            val equal : 'd t -> 'd t -> bool
            val compare : 'd t -> 'd t -> int
            val to_string : 'd t -> string
            val data : 'd t -> 'd
            val having_it : 'd t -> NodeSet.t
          end
        val create_property :
          ('e, 'i, 'd) t -> node list -> 'd -> ('e, 'i, 'd) t
        val property_of : ('e, 'i, 'd) t -> node -> 'd Property.t list
        val del_property : ('e, 'i, 'd) t -> 'd Property.t -> ('e, 'i, 'd) t
        val iter :
          ('e, 'i, 'd) t ->
          (node ->
           'd Property.t list -> 'i option -> (node * 'e) list -> unit) ->
          unit
      end
    val dag : ('diff, 'info, 'cdata) t -> ('diff, 'info, 'cdata) Dag.t
    val create_property : ('e, 'i, 'c) t -> id list -> 'c -> ('e, 'i, 'c) t
    val property_of : ('e, 'i, 'c) t -> id -> 'c Dag.Property.t list
    val delete_property :
      ('e, 'i, 'c) t -> 'c Dag.Property.t -> ('e, 'i, 'c) t
    val gc : ('e, 'info, 'c) t -> ('e, 'info, 'c) t * Dag.NodeSet.t
    val reachable : ('e, 'info, 'c) t -> id -> Dag.NodeSet.t
  end
module Make :
  functor (OT : Map.OrderedType) (K : Kind) ->
    sig
      module Branch :
        sig
          type t
          val make : string -> t
          val equal : t -> t -> bool
          val compare : t -> t -> int
          val to_string : t -> string
          val master : t
        end
      type id = OT.t
      type 'a kind_gen = 'a K.t
      type kind = Branch.t kind_gen
      type branch_info = { kind : kind; root : id; pos : id; }
      type ('diff, 'info, 'property_data) t
      val empty : id -> ('diff, 'info, 'property_data) t
      val current_branch : ('e, 'i, 'c) t -> Branch.t
      val branches : ('e, 'i, 'c) t -> Branch.t list
      val get_branch : ('e, 'i, 'c) t -> Branch.t -> branch_info
      val reset_branch : ('e, 'i, 'c) t -> Branch.t -> id -> ('e, 'i, 'c) t
      val branch :
        ('e, 'i, 'c) t ->
        ?root:id -> ?pos:id -> Branch.t -> kind -> ('e, 'i, 'c) t
      val delete_branch : ('e, 'i, 'c) t -> Branch.t -> ('e, 'i, 'c) t
      val merge :
        ('diff, 'i, 'c) t ->
        id ->
        ours:'diff ->
        theirs:'diff -> ?into:Branch.t -> Branch.t -> ('diff, 'i, 'c) t
      val commit : ('diff, 'i, 'c) t -> id -> 'diff -> ('diff, 'i, 'c) t
      val rewrite_merge :
        ('diff, 'i, 'c) t ->
        id ->
        ours:'diff -> theirs:'diff -> at:id -> Branch.t -> ('diff, 'i, 'c) t
      val checkout : ('e, 'i, 'c) t -> Branch.t -> ('e, 'i, 'c) t
      val set_info : ('e, 'info, 'c) t -> id -> 'info -> ('e, 'info, 'c) t
      val get_info : ('e, 'info, 'c) t -> id -> 'info option
      module Dag :
        sig
          type node = OT.t
          module NodeSet :
            sig
              type elt = OT.t
              type t = Set.Make(OT).t
              val empty : t
              val add : elt -> t -> t
              val singleton : elt -> t
              val remove : elt -> t -> t
              val union : t -> t -> t
              val inter : t -> t -> t
              val disjoint : t -> t -> bool
              val diff : t -> t -> t
              val cardinal : t -> int
              val elements : t -> elt list
              val min_elt : t -> elt
              val min_elt_opt : t -> elt option
              val max_elt : t -> elt
              val max_elt_opt : t -> elt option
              val choose : t -> elt
              val choose_opt : t -> elt option
              val find : elt -> t -> elt
              val find_opt : elt -> t -> elt option
              val find_first : (elt -> bool) -> t -> elt
              val find_first_opt : (elt -> bool) -> t -> elt option
              val find_last : (elt -> bool) -> t -> elt
              val find_last_opt : (elt -> bool) -> t -> elt option
              val iter : (elt -> unit) -> t -> unit
              val fold : (elt -> 'acc -> 'acc) -> t -> 'acc -> 'acc
              val map : (elt -> elt) -> t -> t
              val filter : (elt -> bool) -> t -> t
              val filter_map : (elt -> elt option) -> t -> t
              val partition : (elt -> bool) -> t -> t * t
              val split : elt -> t -> t * bool * t
              val is_empty : t -> bool
              val mem : elt -> t -> bool
              val equal : t -> t -> bool
              val compare : t -> t -> int
              val subset : t -> t -> bool
              val for_all : (elt -> bool) -> t -> bool
              val exists : (elt -> bool) -> t -> bool
              val to_list : t -> elt list
              val of_list : elt list -> t
              val to_seq_from : elt -> t -> elt Seq.t
              val to_seq : t -> elt Seq.t
              val to_rev_seq : t -> elt Seq.t
              val add_seq : elt Seq.t -> t -> t
              val of_seq : elt Seq.t -> t
            end
          type ('edge, 'info, 'cdata) t
          val empty : ('e, 'i, 'd) t
          val add_edge :
            ('e, 'i, 'd) t -> node -> 'e -> node -> ('e, 'i, 'd) t
          val from_node : ('e, 'i, 'd) t -> node -> (node * 'e) list
          val mem : ('e, 'i, 'd) t -> node -> bool
          val del_edge : ('e, 'i, 'd) t -> node -> node -> ('e, 'i, 'd) t
          val del_nodes : ('e, 'i, 'd) t -> NodeSet.t -> ('e, 'i, 'd) t
          val all_nodes : ('e, 'i, 'd) t -> NodeSet.t
          val get_info : ('e, 'i, 'd) t -> node -> 'i option
          val set_info : ('e, 'i, 'd) t -> node -> 'i -> ('e, 'i, 'd) t
          val clear_info : ('e, 'i, 'd) t -> node -> ('e, 'i, 'd) t
          module Property :
            sig
              type 'd t
              val equal : 'd t -> 'd t -> bool
              val compare : 'd t -> 'd t -> int
              val to_string : 'd t -> string
              val data : 'd t -> 'd
              val having_it : 'd t -> NodeSet.t
            end
          val create_property :
            ('e, 'i, 'd) t -> node list -> 'd -> ('e, 'i, 'd) t
          val property_of : ('e, 'i, 'd) t -> node -> 'd Property.t list
          val del_property :
            ('e, 'i, 'd) t -> 'd Property.t -> ('e, 'i, 'd) t
          val iter :
            ('e, 'i, 'd) t ->
            (node ->
             'd Property.t list -> 'i option -> (node * 'e) list -> unit) ->
            unit
        end
      val dag : ('diff, 'info, 'cdata) t -> ('diff, 'info, 'cdata) Dag.t
      val create_property : ('e, 'i, 'c) t -> id list -> 'c -> ('e, 'i, 'c) t
      val property_of : ('e, 'i, 'c) t -> id -> 'c Dag.Property.t list
      val delete_property :
        ('e, 'i, 'c) t -> 'c Dag.Property.t -> ('e, 'i, 'c) t
      val gc : ('e, 'info, 'c) t -> ('e, 'info, 'c) t * Dag.NodeSet.t
      val reachable : ('e, 'info, 'c) t -> id -> Dag.NodeSet.t("DEBUG:rule", [Tag4 (("Kind", 1845), ((Tag1 ([Tag1 (("t", 1850), ([((("a")), 100000000, 0, -4)], 1, 0, 1, 0, [7], [2], 0, 0, (("stm/vcs.mli", 33, 1653, 1655), ("stm/vcs.mli", 33, 1653, 1664), 0), 0, 0, 0, Tag1 ("Vcs", 0)), 1, 0); (("master", 1851), ((Tag3 ((("t", 1850)), [((("a")), 100000000, 0, -3)], (0)), 100000000, 0, -2), 0, (("stm/vcs.mli", 34, 1665, 1667), ("stm/vcs.mli", 34, 1665, 1684), 0), 0, Tag1 ("Vcs", 1)), 0)])), 0, (("stm/vcs.mli", 31, 1630, 1630), ("stm/vcs.mli", 35, 1685, 1688), 0), Tag1 ("Vcs", 2)), 0); Tag4 (("S", 1846), ((Tag1 ([Tag3 (("Branch", 1852), 0, (Tag1 ([Tag1 (("t", 1878), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("stm/vcs.mli", 41, 1735, 1739), ("stm/vcs.mli", 41, 1735, 1745), 0), 0, 0, 0, Tag1 ("Vcs", 3)), 1, 0); (("make", 1879), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -203), (Tag3 ((("t", 1878)), 0, (0)), 100000000, 0, -202), 0), 100000000, 0, -201), 0, (("stm/vcs.mli", 42, 1746, 1750), ("stm/vcs.mli", 42, 1746, 1772), 0), 0, Tag1 ("Vcs", 4)), 0); (("equal", 1880), ((Tag1 (0, (Tag3 ((("t", 1878)), 0, (0)), 100000000, 0, -200), (Tag1 (0, (Tag3 ((("t", 1878)), 0, (0)), 100000000, 0, -199), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -198), 0), 100000000, 0, -197), 0), 100000000, 0, -196), 0, (("stm/vcs.mli", 43, 1773, 1777), ("stm/vcs.mli", 43, 1773, 1803), 0), 0, Tag1 ("Vcs", 5)), 0); (("compare", 1881), ((Tag1 (0, (Tag3 ((("t", 1878)), 0, (0)), 100000000, 0, -195), (Tag1 (0, (Tag3 ((("t", 1878)), 0, (0)), 100000000, 0, -194), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -193), 0), 100000000, 0, -192), 0), 100000000, 0, -191), 0, (("stm/vcs.mli", 44, 1804, 1808), ("stm/vcs.mli", 44, 1804, 1835), 0), 0, Tag1 ("Vcs", 6)), 0); (("to_string", 1882), ((Tag1 (0, (Tag3 ((("t", 1878)), 0, (0)), 100000000, 0, -190), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -189), 0), 100000000, 0, -188), 0, (("stm/vcs.mli", 45, 1836, 1840), ("stm/vcs.mli", 45, 1836, 1867), 0), 0, Tag1 ("Vcs", 7)), 0); (("master", 1883), ((Tag3 ((("t", 1878)), 0, (0)), 100000000, 0, -187), 0, (("stm/vcs.mli", 46, 1868, 1872), ("stm/vcs.mli", 46, 1868, 1886), 0), 0, Tag1 ("Vcs", 8)), 0)]), 0, (("stm/vcs.mli", 39, 1711, 1713), ("stm/vcs.mli", 47, 1887, 1892), 0), Tag1 ("Vcs", 9)), 0, 0); Tag1 (("id", 1853), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("stm/vcs.mli", 49, 1894, 1896), ("stm/vcs.mli", 49, 1894, 1903), 0), 0, 0, 0, Tag1 ("Vcs", 10)), 1, 0); Tag1 (("kind_gen", 1854), ([((("a")), 100000000, 0, -186)], 1, 0, 1, 0, [7], [2], 0, 0, (("stm/vcs.mli", 51, 1905, 1907), ("stm/vcs.mli", 51, 1905, 1923), 0), 0, 0, 0, Tag1 ("Vcs", 11)), 1, 0); Tag1 (("kind", 1855), (0, 0, 0, 1, ((Tag3 ((("kind_gen", 1854)), [(Tag3 (Tag1 ((("Branch", 1852)), "t"), 0, (0)), 100000000, 0, -185)], (0)), 100000000, 0, -184)), 0, 0, 0, 0, (("stm/vcs.mli", 52, 1924, 1926), ("stm/vcs.mli", 52, 1924, 1955), 0), 0, 0, 0, Tag1 ("Vcs", 12)), 1, 0); Tag1 (("branch_info", 1856), (0, 0, [[(("kind", 283), 0, (Tag3 ((("kind", 1855)), 0, (0)), 100000000, 0, -181), (("stm/vcs.mli", 55, 1980, 1984), ("stm/vcs.mli", 55, 1980, 1996), 0), 0, Tag1 ("Vcs", 14)); (("root", 284), 0, (Tag3 ((("id", 1853)), 0, (0)), 100000000, 0, -182), (("stm/vcs.mli", 56, 1997, 2001), ("stm/vcs.mli", 56, 1997, 2011), 0), 0, Tag1 ("Vcs", 15)); (("pos", 285), 0, (Tag3 ((("id", 1853)), 0, (0)), 100000000, 0, -183), (("stm/vcs.mli", 57, 2012, 2016), ("stm/vcs.mli", 57, 2012, 2026), 0), 0, Tag1 ("Vcs", 16))]], 1, 0, 0, 0, 0, 0, (("stm/vcs.mli", 54, 1957, 1959), ("stm/vcs.mli", 58, 2027, 2030), 0), 0, 0, 0, Tag1 ("Vcs", 13)), 1, 0); Tag1 (("t", 1857), ([((("diff")), 100000000, 0, -178); ((("info")), 100000000, 0, -179); ((("property_data")), 100000000, 0, -180)], 3, 0, 1, 0, [7; 7; 7], [2; 2; 2], 0, 0, (("stm/vcs.mli", 60, 2032, 2034), ("stm/vcs.mli", 60, 2032, 2069), 0), 0, 0, 0, Tag1 ("Vcs", 17)), 1, 0); (("empty", 1858), ((Tag1 (0, (Tag3 ((("id", 1853)), 0, (0)), 100000000, 0, -177), (Tag3 ((("t", 1857)), [((("diff")), 100000000, 0, -174); ((("info")), 100000000, 0, -175); ((("property_data")), 100000000, 0, -176)], (0)), 100000000, 0, -173), 0), 100000000, 0, -172), 0, (("stm/vcs.mli", 62, 2071, 2073), ("stm/vcs.mli", 62, 2071, 2121), 0), 0, Tag1 ("Vcs", 18)), 0); (("current_branch", 1859), ((Tag1 (0, (Tag3 ((("t", 1857)), [((("e")), 100000000, 0, -169); ((("i")), 100000000, 0, -170); ((("c")), 100000000, 0, -171)], (0)), 100000000, 0, -168), (Tag3 (Tag1 ((("Branch", 1852)), "t"), 0, (0)), 100000000, 0, -167), 0), 100000000, 0, -166), 0, (("stm/vcs.mli", 64, 2123, 2125), ("stm/vcs.mli", 64, 2123, 2170), 0), 0, Tag1 ("Vcs", 19)), 0); (("branches", 1860), ((Tag1 (0, (Tag3 ((("t", 1857)), [((("e")), 100000000, 0, -163); ((("i")), 100000000, 0, -164); ((("c")), 100000000, 0, -165)], (0)), 100000000, 0, -162), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Branch", 1852)), "t"), 0, (0)), 100000000, 0, -161)], (0)), 100000000, 0, -160), 0), 100000000, 0, -159), 0, (("stm/vcs.mli", 65, 2171, 2173), ("stm/vcs.mli", 65, 2171, 2217), 0), 0, Tag1 ("Vcs", 20)), 0); (("get_branch", 1861), ((Tag1 (0, (Tag3 ((("t", 1857)), [((("e")), 100000000, 0, -156); ((("i")), 100000000, 0, -157); ((("c")), 100000000, 0, -158)], (0)), 100000000, 0, -155), (Tag1 (0, (Tag3 (Tag1 ((("Branch", 1852)), "t"), 0, (0)), 100000000, 0, -154), (Tag3 ((("branch_info", 1856)), 0, (0)), 100000000, 0, -153), 0), 100000000, 0, -152), 0), 100000000, 0, -151), 0, (("stm/vcs.mli", 67, 2219, 2221), ("stm/vcs.mli", 67, 2219, 2277), 0), 0, Tag1 ("Vcs", 21)), 0); (("reset_branch", 1862), ((Tag1 (0, (Tag3 ((("t", 1857)), [((("e")), 100000000, 0, -145); ((("i")), 100000000, 0, -146); ((("c")), 100000000, 0, -147)], (0)), 100000000, 0, -150), (Tag1 (0, (Tag3 (Tag1 ((("Branch", 1852)), "t"), 0, (0)), 100000000, 0, -149), (Tag1 (0, (Tag3 ((("id", 1853)), 0, (0)), 100000000, 0, -148), (Tag3 ((("t", 1857)), [((("e")), 100000000, 0, -145); ((("i")), 100000000, 0, -146); ((("c")), 100000000, 0, -147)], (0)), 100000000, 0, -144), 0), 100000000, 0, -143), 0), 100000000, 0, -142), 0), 100000000, 0, -141), 0, (("stm/vcs.mli", 68, 2278, 2280), ("stm/vcs.mli", 68, 2278, 2345), 0), 0, Tag1 ("Vcs", 22)), 0); (("branch", 1863), ((Tag1 (0, (Tag3 ((("t", 1857)), [((("e")), 100000000, 0, -131); ((("i")), 100000000, 0, -132); ((("c")), 100000000, 0, -133)], (0)), 100000000, 0, -140), (Tag1 (Tag1 ("root"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("id", 1853)), 0, (0)), 100000000, 0, -139)], (0)), 100000000, 0, -138), (Tag1 (Tag1 ("pos"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("id", 1853)), 0, (0)), 100000000, 0, -137)], (0)), 100000000, 0, -136), (Tag1 (0, (Tag3 (Tag1 ((("Branch", 1852)), "t"), 0, (0)), 100000000, 0, -135), (Tag1 (0, (Tag3 ((("kind", 1855)), 0, (0)), 100000000, 0, -134), (Tag3 ((("t", 1857)), [((("e")), 100000000, 0, -131); ((("i")), 100000000, 0, -132); ((("c")), 100000000, 0, -133)], (0)), 100000000, 0, -130), 0), 100000000, 0, -129), 0), 100000000, 0, -128), 0), 100000000, 0, -127), 0), 100000000, 0, -126), 0), 100000000, 0, -125), 0, (("stm/vcs.mli", 69, 2346, 2348), ("stm/vcs.mli", 71, 2404, 2444), 0), 0, Tag1 ("Vcs", 23)), 0); (("delete_branch", 1864), ((Tag1 (0, (Tag3 ((("t", 1857)), [((("e")), 100000000, 0, -120); ((("i")), 100000000, 0, -121); ((("c")), 100000000, 0, -122)], (0)), 100000000, 0, -124), (Tag1 (0, (Tag3 (Tag1 ((("Branch", 1852)), "t"), 0, (0)), 100000000, 0, -123), (Tag3 ((("t", 1857)), [((("e")), 100000000, 0, -120); ((("i")), 100000000, 0, -121); ((("c")), 100000000, 0, -122)], (0)), 100000000, 0, -119), 0), 100000000, 0, -118), 0), 100000000, 0, -117), 0, (("stm/vcs.mli", 72, 2445, 2447), ("stm/vcs.mli", 72, 2445, 2507), 0), 0, Tag1 ("Vcs", 24)), 0); (("merge", 1865), ((Tag1 (0, (Tag3 ((("t", 1857)), [((("diff")), 100000000, 0, -109); ((("i")), 100000000, 0, -110); ((("c")), 100000000, 0, -111)], (0)), 100000000, 0, -116), (Tag1 (0, (Tag3 ((("id", 1853)), 0, (0)), 100000000, 0, -115), (Tag1 (("ours"), ((("diff")), 100000000, 0, -109), (Tag1 (("theirs"), ((("diff")), 100000000, 0, -109), (Tag1 (Tag1 ("into"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("Branch", 1852)), "t"), 0, (0)), 100000000, 0, -114)], (0)), 100000000, 0, -113), (Tag1 (0, (Tag3 (Tag1 ((("Branch", 1852)), "t"), 0, (0)), 100000000, 0, -112), (Tag3 ((("t", 1857)), [((("diff")), 100000000, 0, -109); ((("i")), 100000000, 0, -110); ((("c")), 100000000, 0, -111)], (0)), 100000000, 0, -108), 0), 100000000, 0, -107), 0), 100000000, 0, -106), 0), 100000000, 0, -105), 0), 100000000, 0, -104), 0), 100000000, 0, -103), 0), 100000000, 0, -102), 0, (("stm/vcs.mli", 73, 2508, 2510), ("stm/vcs.mli", 75, 2599, 2638), 0), 0, Tag1 ("Vcs", 25)), 0); (("commit", 1866), ((Tag1 (0, (Tag3 ((("t", 1857)), [((("diff")), 100000000, 0, -97); ((("i")), 100000000, 0, -98); ((("c")), 100000000, 0, -99)], (0)), 100000000, 0, -101), (Tag1 (0, (Tag3 ((("id", 1853)), 0, (0)), 100000000, 0, -100), (Tag1 (0, ((("diff")), 100000000, 0, -97), (Tag3 ((("t", 1857)), [((("diff")), 100000000, 0, -97); ((("i")), 100000000, 0, -98); ((("c")), 100000000, 0, -99)], (0)), 100000000, 0, -96), 0), 100000000, 0, -95), 0), 100000000, 0, -94), 0), 100000000, 0, -93), 0, (("stm/vcs.mli", 76, 2639, 2641), ("stm/vcs.mli", 76, 2639, 2703), 0), 0, Tag1 ("Vcs", 26)), 0); (("rewrite_merge", 1867), ((Tag1 (0, (Tag3 ((("t", 1857)), [((("diff")), 100000000, 0, -86); ((("i")), 100000000, 0, -87); ((("c")), 100000000, 0, -88)], (0)), 100000000, 0, -92), (Tag1 (0, (Tag3 ((("id", 1853)), 0, (0)), 100000000, 0, -91), (Tag1 (("ours"), ((("diff")), 100000000, 0, -86), (Tag1 (("theirs"), ((("diff")), 100000000, 0, -86), (Tag1 (("at"), (Tag3 ((("id", 1853)), 0, (0)), 100000000, 0, -90), (Tag1 (0, (Tag3 (Tag1 ((("Branch", 1852)), "t"), 0, (0)), 100000000, 0, -89), (Tag3 ((("t", 1857)), [((("diff")), 100000000, 0, -86); ((("i")), 100000000, 0, -87); ((("c")), 100000000, 0, -88)], (0)), 100000000, 0, -85), 0), 100000000, 0, -84), 0), 100000000, 0, -83), 0), 100000000, 0, -82), 0), 100000000, 0, -81), 0), 100000000, 0, -80), 0), 100000000, 0, -79), 0, (("stm/vcs.mli", 77, 2704, 2706), ("stm/vcs.mli", 79, 2794, 2833), 0), 0, Tag1 ("Vcs", 27)), 0); (("checkout", 1868), ((Tag1 (0, (Tag3 ((("t", 1857)), [((("e")), 100000000, 0, -74); ((("i")), 100000000, 0, -75); ((("c")), 100000000, 0, -76)], (0)), 100000000, 0, -78), (Tag1 (0, (Tag3 (Tag1 ((("Branch", 1852)), "t"), 0, (0)), 100000000, 0, -77), (Tag3 ((("t", 1857)), [((("e")), 100000000, 0, -74); ((("i")), 100000000, 0, -75); ((("c")), 100000000, 0, -76)], (0)), 100000000, 0, -73), 0), 100000000, 0, -72), 0), 100000000, 0, -71), 0, (("stm/vcs.mli", 80, 2834, 2836), ("stm/vcs.mli", 80, 2834, 2891), 0), 0, Tag1 ("Vcs", 28)), 0); (("set_info", 1869), ((Tag1 (0, (Tag3 ((("t", 1857)), [((("e")), 100000000, 0, -66); ((("info")), 100000000, 0, -67); ((("c")), 100000000, 0, -68)], (0)), 100000000, 0, -70), (Tag1 (0, (Tag3 ((("id", 1853)), 0, (0)), 100000000, 0, -69), (Tag1 (0, ((("info")), 100000000, 0, -67), (Tag3 ((("t", 1857)), [((("e")), 100000000, 0, -66); ((("info")), 100000000, 0, -67); ((("c")), 100000000, 0, -68)], (0)), 100000000, 0, -65), 0), 100000000, 0, -64), 0), 100000000, 0, -63), 0), 100000000, 0, -62), 0, (("stm/vcs.mli", 82, 2893, 2895), ("stm/vcs.mli", 82, 2893, 2959), 0), 0, Tag1 ("Vcs", 29)), 0); (("get_info", 1870), ((Tag1 (0, (Tag3 ((("t", 1857)), [((("e")), 100000000, 0, -60); ((("info")), 100000000, 0, -57); ((("c")), 100000000, 0, -61)], (0)), 100000000, 0, -59), (Tag1 (0, (Tag3 ((("id", 1853)), 0, (0)), 100000000, 0, -58), (Tag3 ((Tag3 ("option", 10)), [((("info")), 100000000, 0, -57)], (0)), 100000000, 0, -56), 0), 100000000, 0, -55), 0), 100000000, 0, -54), 0, (("stm/vcs.mli", 83, 2960, 2962), ("stm/vcs.mli", 83, 2960, 3014), 0), 0, Tag1 ("Vcs", 30)), 0); Tag3 (("Dag", 1871), 0, (Tag1 ([Tag1 (("node", 1884), (0, 0, 0, 1, ((Tag3 ((("id", 1853)), 0, (0)), 100000000, 0, -335)), 0, 0, 0, 0, (("stm/vcs.mli", 86, 3038, 3064), ("stm/vcs.mli", 86, 3038, 3078), 0), 0, 0, 0, Tag1 ("Vcs", 31)), 1, 0); Tag3 (("NodeSet", 1885), 0, (Tag1 ([Tag1 (("elt", 1902), (0, 0, 0, 1, ((Tag3 ((("node", 1884)), 0, (0)), 100000000, 0, -562)), 0, 0, 0, 0, (("stm/dag.mli", 14, 709, 739), ("stm/dag.mli", 14, 709, 754), 0), 0, 0, 0, Tag1 ("Dag", 1)), 1, 0); Tag1 (("t", 1903), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("set.mli", 74, 2901, 2905), ("set.mli", 74, 2901, 2911), 0), 0, 0, 0, Tag1 ("Stdlib__Set", 4)), 1, 0); (("empty", 1904), ((Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -561), 0, (("set.mli", 77, 2942, 2946), ("set.mli", 77, 2942, 2958), 0), 0, Tag1 ("Stdlib__Set", 5)), 0); (("add", 1905), ((Tag1 (0, (Tag3 ((("elt", 1902)), 0, (0)), 100000000, 0, -560), (Tag1 (0, (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -559), (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -558), 0), 100000000, 0, -557), 0), 100000000, 0, -556), 0, (("set.mli", 80, 2986, 2990), ("set.mli", 80, 2986, 3012), 0), 0, Tag1 ("Stdlib__Set", 6)), 0); (("singleton", 1906), ((Tag1 (0, (Tag3 ((("elt", 1902)), 0, (0)), 100000000, 0, -555), (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -554), 0), 100000000, 0, -553), 0, (("set.mli", 86, 3278, 3282), ("set.mli", 86, 3278, 3305), 0), 0, Tag1 ("Stdlib__Set", 7)), 0); (("remove", 1907), ((Tag1 (0, (Tag3 ((("elt", 1902)), 0, (0)), 100000000, 0, -552), (Tag1 (0, (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -551), (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -550), 0), 100000000, 0, -549), 0), 100000000, 0, -548), 0, (("set.mli", 89, 3381, 3385), ("set.mli", 89, 3381, 3410), 0), 0, Tag1 ("Stdlib__Set", 8)), 0); (("union", 1908), ((Tag1 (0, (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -547), (Tag1 (0, (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -546), (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -545), 0), 100000000, 0, -544), 0), 100000000, 0, -543), 0, (("set.mli", 95, 3677, 3681), ("set.mli", 95, 3677, 3703), 0), 0, Tag1 ("Stdlib__Set", 9)), 0); (("inter", 1909), ((Tag1 (0, (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -542), (Tag1 (0, (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -541), (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -540), 0), 100000000, 0, -539), 0), 100000000, 0, -538), 0, (("set.mli", 98, 3727, 3731), ("set.mli", 98, 3727, 3753), 0), 0, Tag1 ("Stdlib__Set", 10)), 0); (("disjoint", 1910), ((Tag1 (0, (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -537), (Tag1 (0, (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -536), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -535), 0), 100000000, 0, -534), 0), 100000000, 0, -533), 0, (("set.mli", 101, 3784, 3788), ("set.mli", 101, 3784, 3816), 0), 0, Tag1 ("Stdlib__Set", 11)), 0); (("diff", 1911), ((Tag1 (0, (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -532), (Tag1 (0, (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -531), (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -530), 0), 100000000, 0, -529), 0), 100000000, 0, -528), 0, (("set.mli", 105, 3880, 3884), ("set.mli", 105, 3880, 3905), 0), 0, Tag1 ("Stdlib__Set", 12)), 0); (("cardinal", 1912), ((Tag1 (0, (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -527), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -526), 0), 100000000, 0, -525), 0, (("set.mli", 109, 4007, 4011), ("set.mli", 109, 4007, 4033), 0), 0, Tag1 ("Stdlib__Set", 13)), 0); (("elements", 1913), ((Tag1 (0, (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -524), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 1902)), 0, (0)), 100000000, 0, -523)], (0)), 100000000, 0, -522), 0), 100000000, 0, -521), 0, (("set.mli", 114, 4120, 4124), ("set.mli", 114, 4120, 4151), 0), 0, Tag1 ("Stdlib__Set", 14)), 0); (("min_elt", 1914), ((Tag1 (0, (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -520), (Tag3 ((("elt", 1902)), 0, (0)), 100000000, 0, -519), 0), 100000000, 0, -518), 0, (("set.mli", 120, 4380, 4384), ("set.mli", 120, 4380, 4405), 0), 0, Tag1 ("Stdlib__Set", 15)), 0); (("min_elt_opt", 1915), ((Tag1 (0, (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -517), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1902)), 0, (0)), 100000000, 0, -516)], (0)), 100000000, 0, -515), 0), 100000000, 0, -514), 0, (("set.mli", 125, 4567, 4571), ("set.mli", 125, 4567, 4603), 0), 0, Tag1 ("Stdlib__Set", 16)), 0); (("max_elt", 1916), ((Tag1 (0, (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -513), (Tag3 ((("elt", 1902)), 0, (0)), 100000000, 0, -512), 0), 100000000, 0, -511), 0, (("set.mli", 131, 4774, 4778), ("set.mli", 131, 4774, 4799), 0), 0, Tag1 ("Stdlib__Set", 17)), 0); (("max_elt_opt", 1917), ((Tag1 (0, (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -510), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1902)), 0, (0)), 100000000, 0, -509)], (0)), 100000000, 0, -508), 0), 100000000, 0, -507), 0, (("set.mli", 135, 4890, 4894), ("set.mli", 135, 4890, 4926), 0), 0, Tag1 ("Stdlib__Set", 18)), 0); (("choose", 1918), ((Tag1 (0, (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -506), (Tag3 ((("elt", 1902)), 0, (0)), 100000000, 0, -505), 0), 100000000, 0, -504), 0, (("set.mli", 140, 5041, 5045), ("set.mli", 140, 5041, 5065), 0), 0, Tag1 ("Stdlib__Set", 19)), 0); (("choose_opt", 1919), ((Tag1 (0, (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -503), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1902)), 0, (0)), 100000000, 0, -502)], (0)), 100000000, 0, -501), 0), 100000000, 0, -500), 0, (("set.mli", 145, 5263, 5267), ("set.mli", 145, 5263, 5298), 0), 0, Tag1 ("Stdlib__Set", 20)), 0); (("find", 1920), ((Tag1 (0, (Tag3 ((("elt", 1902)), 0, (0)), 100000000, 0, -499), (Tag1 (0, (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -498), (Tag3 ((("elt", 1902)), 0, (0)), 100000000, 0, -497), 0), 100000000, 0, -496), 0), 100000000, 0, -495), 0, (("set.mli", 153, 5541, 5549), ("set.mli", 153, 5541, 5574), 0), 0, Tag1 ("Stdlib__Set", 21)), 0); (("find_opt", 1921), ((Tag1 (0, (Tag3 ((("elt", 1902)), 0, (0)), 100000000, 0, -494), (Tag1 (0, (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -493), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1902)), 0, (0)), 100000000, 0, -492)], (0)), 100000000, 0, -491), 0), 100000000, 0, -490), 0), 100000000, 0, -489), 0, (("set.mli", 159, 5752, 5756), ("set.mli", 159, 5752, 5792), 0), 0, Tag1 ("Stdlib__Set", 22)), 0); (("find_first", 1922), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1902)), 0, (0)), 100000000, 0, -488), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -487), 0), 100000000, 0, -486), (Tag1 (0, (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -485), (Tag3 ((("elt", 1902)), 0, (0)), 100000000, 0, -484), 0), 100000000, 0, -483), 0), 100000000, 0, -482), 0, (("set.mli", 165, 5963, 5967), ("set.mli", 165, 5963, 6008), 0), 0, Tag1 ("Stdlib__Set", 23)), 0); (("find_first_opt", 1923), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1902)), 0, (0)), 100000000, 0, -481), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -480), 0), 100000000, 0, -479), (Tag1 (0, (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -478), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1902)), 0, (0)), 100000000, 0, -477)], (0)), 100000000, 0, -476), 0), 100000000, 0, -475), 0), 100000000, 0, -474), 0, (("set.mli", 177, 6482, 6486), ("set.mli", 177, 6482, 6538), 0), 0, Tag1 ("Stdlib__Set", 24)), 0); (("find_last", 1924), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1902)), 0, (0)), 100000000, 0, -473), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -472), 0), 100000000, 0, -471), (Tag1 (0, (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -470), (Tag3 ((("elt", 1902)), 0, (0)), 100000000, 0, -469), 0), 100000000, 0, -468), 0), 100000000, 0, -467), 0, (("set.mli", 184, 6779, 6783), ("set.mli", 184, 6779, 6823), 0), 0, Tag1 ("Stdlib__Set", 25)), 0); (("find_last_opt", 1925), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1902)), 0, (0)), 100000000, 0, -466), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -465), 0), 100000000, 0, -464), (Tag1 (0, (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -463), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1902)), 0, (0)), 100000000, 0, -462)], (0)), 100000000, 0, -461), 0), 100000000, 0, -460), 0), 100000000, 0, -459), 0, (("set.mli", 190, 7044, 7048), ("set.mli", 190, 7044, 7099), 0), 0, Tag1 ("Stdlib__Set", 26)), 0); (("iter", 1926), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1902)), 0, (0)), 100000000, 0, -458), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -457), 0), 100000000, 0, -456), (Tag1 (0, (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -455), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -454), 0), 100000000, 0, -453), 0), 100000000, 0, -452), 0, (("set.mli", 198, 7371, 7375), ("set.mli", 198, 7371, 7411), 0), 0, Tag1 ("Stdlib__Set", 27)), 0); (("fold", 1927), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1902)), 0, (0)), 100000000, 0, -451), (Tag1 (0, ((("acc")), 100000000, 0, -447), ((("acc")), 100000000, 0, -447), 0), 100000000, 0, -450), 0), 100000000, 0, -449), (Tag1 (0, (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -448), (Tag1 (0, ((("acc")), 100000000, 0, -447), ((("acc")), 100000000, 0, -447), 0), 100000000, 0, -446), 0), 100000000, 0, -445), 0), 100000000, 0, -444), 0, (("set.mli", 203, 7616, 7620), ("set.mli", 203, 7616, 7672), 0), 0, Tag1 ("Stdlib__Set", 28)), 0); (("map", 1928), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1902)), 0, (0)), 100000000, 0, -443), (Tag3 ((("elt", 1902)), 0, (0)), 100000000, 0, -442), 0), 100000000, 0, -441), (Tag1 (0, (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -440), (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -439), 0), 100000000, 0, -438), 0), 100000000, 0, -437), 0, (("set.mli", 209, 7860, 7864), ("set.mli", 209, 7860, 7895), 0), 0, Tag1 ("Stdlib__Set", 29)), 0); (("filter", 1929), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1902)), 0, (0)), 100000000, 0, -436), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -435), 0), 100000000, 0, -434), (Tag1 (0, (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -433), (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -432), 0), 100000000, 0, -431), 0), 100000000, 0, -430), 0, (("set.mli", 221, 8372, 8376), ("set.mli", 221, 8372, 8411), 0), 0, Tag1 ("Stdlib__Set", 30)), 0); (("filter_map", 1930), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1902)), 0, (0)), 100000000, 0, -429), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1902)), 0, (0)), 100000000, 0, -428)], (0)), 100000000, 0, -427), 0), 100000000, 0, -426), (Tag1 (0, (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -425), (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -424), 0), 100000000, 0, -423), 0), 100000000, 0, -422), 0, (("set.mli", 228, 8710, 8714), ("set.mli", 228, 8710, 8759), 0), 0, Tag1 ("Stdlib__Set", 31)), 0); (("partition", 1931), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1902)), 0, (0)), 100000000, 0, -421), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -420), 0), 100000000, 0, -419), (Tag1 (0, (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -418), (Tag2 ([(Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -416); (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -417)]), 100000000, 0, -415), 0), 100000000, 0, -414), 0), 100000000, 0, -413), 0, (("set.mli", 243, 9275, 9279), ("set.mli", 243, 9275, 9321), 0), 0, Tag1 ("Stdlib__Set", 32)), 0); (("split", 1932), ((Tag1 (0, (Tag3 ((("elt", 1902)), 0, (0)), 100000000, 0, -412), (Tag1 (0, (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -411), (Tag2 ([(Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -408); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -409); (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -410)]), 100000000, 0, -407), 0), 100000000, 0, -406), 0), 100000000, 0, -405), 0, (("set.mli", 249, 9562, 9566), ("set.mli", 249, 9562, 9601), 0), 0, Tag1 ("Stdlib__Set", 33)), 0); (("is_empty", 1933), ((Tag1 (0, (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -404), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -403), 0), 100000000, 0, -402), 0, (("set.mli", 260, 10020, 10024), ("set.mli", 260, 10020, 10047), 0), 0, Tag1 ("Stdlib__Set", 34)), 0); (("mem", 1934), ((Tag1 (0, (Tag3 ((("elt", 1902)), 0, (0)), 100000000, 0, -401), (Tag1 (0, (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -400), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -399), 0), 100000000, 0, -398), 0), 100000000, 0, -397), 0, (("set.mli", 263, 10096, 10100), ("set.mli", 263, 10096, 10125), 0), 0, Tag1 ("Stdlib__Set", 35)), 0); (("equal", 1935), ((Tag1 (0, (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -396), (Tag1 (0, (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -395), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -394), 0), 100000000, 0, -393), 0), 100000000, 0, -392), 0, (("set.mli", 266, 10190, 10194), ("set.mli", 266, 10190, 10219), 0), 0, Tag1 ("Stdlib__Set", 36)), 0); (("compare", 1936), ((Tag1 (0, (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -391), (Tag1 (0, (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -390), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -389), 0), 100000000, 0, -388), 0), 100000000, 0, -387), 0, (("set.mli", 270, 10335, 10339), ("set.mli", 270, 10335, 10365), 0), 0, Tag1 ("Stdlib__Set", 37)), 0); (("subset", 1937), ((Tag1 (0, (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -386), (Tag1 (0, (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -385), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -384), 0), 100000000, 0, -383), 0), 100000000, 0, -382), 0, (("set.mli", 274, 10476, 10480), ("set.mli", 274, 10476, 10506), 0), 0, Tag1 ("Stdlib__Set", 38)), 0); (("for_all", 1938), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1902)), 0, (0)), 100000000, 0, -381), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -380), 0), 100000000, 0, -379), (Tag1 (0, (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -378), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -377), 0), 100000000, 0, -376), 0), 100000000, 0, -375), 0, (("set.mli", 278, 10598, 10602), ("set.mli", 278, 10598, 10641), 0), 0, Tag1 ("Stdlib__Set", 39)), 0); (("exists", 1939), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1902)), 0, (0)), 100000000, 0, -374), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -373), 0), 100000000, 0, -372), (Tag1 (0, (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -371), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -370), 0), 100000000, 0, -369), 0), 100000000, 0, -368), 0, (("set.mli", 282, 10737, 10741), ("set.mli", 282, 10737, 10779), 0), 0, Tag1 ("Stdlib__Set", 40)), 0); (("to_list", 1940), ((Tag1 (0, (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -367), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 1902)), 0, (0)), 100000000, 0, -366)], (0)), 100000000, 0, -365), 0), 100000000, 0, -364), 0, (("set.mli", 288, 10922, 10926), ("set.mli", 288, 10922, 10953), 0), 0, Tag1 ("Stdlib__Set", 41)), 0); (("of_list", 1941), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 1902)), 0, (0)), 100000000, 0, -363)], (0)), 100000000, 0, -362), (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -361), 0), 100000000, 0, -360), 0, (("set.mli", 292, 11017, 11021), ("set.mli", 292, 11017, 11047), 0), 0, Tag1 ("Stdlib__Set", 42)), 0); (("to_seq_from", 1942), ((Tag1 (0, (Tag3 ((("elt", 1902)), 0, (0)), 100000000, 0, -359), (Tag1 (0, (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -358), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 1902)), 0, (0)), 100000000, 0, -357)], (0)), 100000000, 0, -356), 0), 100000000, 0, -355), 0), 100000000, 0, -354), 0, (("set.mli", 298, 11268, 11272), ("set.mli", 298, 11268, 11311), 0), 0, Tag1 ("Stdlib__Set", 43)), 0); (("to_seq", 1943), ((Tag1 (0, (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -353), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 1902)), 0, (0)), 100000000, 0, -352)], (0)), 100000000, 0, -351), 0), 100000000, 0, -350), 0, (("set.mli", 303, 11453, 11457), ("set.mli", 303, 11453, 11484), 0), 0, Tag1 ("Stdlib__Set", 44)), 0); (("to_rev_seq", 1944), ((Tag1 (0, (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -349), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 1902)), 0, (0)), 100000000, 0, -348)], (0)), 100000000, 0, -347), 0), 100000000, 0, -346), 0, (("set.mli", 307, 11562, 11566), ("set.mli", 307, 11562, 11597), 0), 0, Tag1 ("Stdlib__Set", 45)), 0); (("add_seq", 1945), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 1902)), 0, (0)), 100000000, 0, -345)], (0)), 100000000, 0, -344), (Tag1 (0, (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -343), (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -342), 0), 100000000, 0, -341), 0), 100000000, 0, -340), 0, (("set.mli", 311, 11676, 11680), ("set.mli", 311, 11676, 11713), 0), 0, Tag1 ("Stdlib__Set", 46)), 0); (("of_seq", 1946), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 1902)), 0, (0)), 100000000, 0, -339)], (0)), 100000000, 0, -338), (Tag3 ((("t", 1903)), 0, (0)), 100000000, 0, -337), 0), 100000000, 0, -336), 0, (("set.mli", 315, 11791, 11795), ("set.mli", 315, 11791, 11822), 0), 0, Tag1 ("Stdlib__Set", 47)), 0)]), 0, (("stm/dag.mli", 14, 709, 711), ("stm/dag.mli", 14, 709, 754), 0), Tag1 ("Dag", 2)), 0, 0); Tag1 (("t", 1886), ([((("edge")), 100000000, 0, -332); ((("info")), 100000000, 0, -333); ((("cdata")), 100000000, 0, -334)], 3, 0, 1, 0, [7; 7; 7], [2; 2; 2], 0, 0, (("stm/dag.mli", 16, 756, 758), ("stm/dag.mli", 16, 756, 785), 0), 0, 0, 0, Tag1 ("Dag", 3)), 1, 0); (("empty", 1887), ((Tag3 ((("t", 1886)), [((("e")), 100000000, 0, -329); ((("i")), 100000000, 0, -330); ((("d")), 100000000, 0, -331)], (0)), 100000000, 0, -328), 0, (("stm/dag.mli", 18, 787, 789), ("stm/dag.mli", 18, 787, 813), 0), 0, Tag1 ("Dag", 4)), 0); (("add_edge", 1888), ((Tag1 (0, (Tag3 ((("t", 1886)), [((("e")), 100000000, 0, -322); ((("i")), 100000000, 0, -323); ((("d")), 100000000, 0, -324)], (0)), 100000000, 0, -327), (Tag1 (0, (Tag3 ((("node", 1884)), 0, (0)), 100000000, 0, -326), (Tag1 (0, ((("e")), 100000000, 0, -322), (Tag1 (0, (Tag3 ((("node", 1884)), 0, (0)), 100000000, 0, -325), (Tag3 ((("t", 1886)), [((("e")), 100000000, 0, -322); ((("i")), 100000000, 0, -323); ((("d")), 100000000, 0, -324)], (0)), 100000000, 0, -321), 0), 100000000, 0, -320), 0), 100000000, 0, -319), 0), 100000000, 0, -318), 0), 100000000, 0, -317), 0, (("stm/dag.mli", 20, 815, 817), ("stm/dag.mli", 20, 815, 882), 0), 0, Tag1 ("Dag", 5)), 0); (("from_node", 1889), ((Tag1 (0, (Tag3 ((("t", 1886)), [((("e")), 100000000, 0, -312); ((("i")), 100000000, 0, -315); ((("d")), 100000000, 0, -316)], (0)), 100000000, 0, -314), (Tag1 (0, (Tag3 ((("node", 1884)), 0, (0)), 100000000, 0, -313), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("node", 1884)), 0, (0)), 100000000, 0, -311); ((("e")), 100000000, 0, -312)]), 100000000, 0, -310)], (0)), 100000000, 0, -309), 0), 100000000, 0, -308), 0), 100000000, 0, -307), 0, (("stm/dag.mli", 21, 883, 885), ("stm/dag.mli", 21, 883, 941), 0), 0, Tag1 ("Dag", 6)), 0); (("mem", 1890), ((Tag1 (0, (Tag3 ((("t", 1886)), [((("e")), 100000000, 0, -304); ((("i")), 100000000, 0, -305); ((("d")), 100000000, 0, -306)], (0)), 100000000, 0, -303), (Tag1 (0, (Tag3 ((("node", 1884)), 0, (0)), 100000000, 0, -302), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -301), 0), 100000000, 0, -300), 0), 100000000, 0, -299), 0, (("stm/dag.mli", 22, 942, 944), ("stm/dag.mli", 22, 942, 982), 0), 0, Tag1 ("Dag", 7)), 0); (("del_edge", 1891), ((Tag1 (0, (Tag3 ((("t", 1886)), [((("e")), 100000000, 0, -293); ((("i")), 100000000, 0, -294); ((("d")), 100000000, 0, -295)], (0)), 100000000, 0, -298), (Tag1 (0, (Tag3 ((("node", 1884)), 0, (0)), 100000000, 0, -297), (Tag1 (0, (Tag3 ((("node", 1884)), 0, (0)), 100000000, 0, -296), (Tag3 ((("t", 1886)), [((("e")), 100000000, 0, -293); ((("i")), 100000000, 0, -294); ((("d")), 100000000, 0, -295)], (0)), 100000000, 0, -292), 0), 100000000, 0, -291), 0), 100000000, 0, -290), 0), 100000000, 0, -289), 0, (("stm/dag.mli", 23, 983, 985), ("stm/dag.mli", 23, 983, 1044), 0), 0, Tag1 ("Dag", 8)), 0); (("del_nodes", 1892), ((Tag1 (0, (Tag3 ((("t", 1886)), [((("e")), 100000000, 0, -284); ((("i")), 100000000, 0, -285); ((("d")), 100000000, 0, -286)], (0)), 100000000, 0, -288), (Tag1 (0, (Tag3 (Tag1 ((("NodeSet", 1885)), "t"), 0, (0)), 100000000, 0, -287), (Tag3 ((("t", 1886)), [((("e")), 100000000, 0, -284); ((("i")), 100000000, 0, -285); ((("d")), 100000000, 0, -286)], (0)), 100000000, 0, -283), 0), 100000000, 0, -282), 0), 100000000, 0, -281), 0, (("stm/dag.mli", 24, 1045, 1047), ("stm/dag.mli", 24, 1045, 1105), 0), 0, Tag1 ("Dag", 9)), 0); (("all_nodes", 1893), ((Tag1 (0, (Tag3 ((("t", 1886)), [((("e")), 100000000, 0, -278); ((("i")), 100000000, 0, -279); ((("d")), 100000000, 0, -280)], (0)), 100000000, 0, -277), (Tag3 (Tag1 ((("NodeSet", 1885)), "t"), 0, (0)), 100000000, 0, -276), 0), 100000000, 0, -275), 0, (("stm/dag.mli", 25, 1106, 1108), ("stm/dag.mli", 25, 1106, 1149), 0), 0, Tag1 ("Dag", 10)), 0); (("get_info", 1894), ((Tag1 (0, (Tag3 ((("t", 1886)), [((("e")), 100000000, 0, -273); ((("i")), 100000000, 0, -270); ((("d")), 100000000, 0, -274)], (0)), 100000000, 0, -272), (Tag1 (0, (Tag3 ((("node", 1884)), 0, (0)), 100000000, 0, -271), (Tag3 ((Tag3 ("option", 10)), [((("i")), 100000000, 0, -270)], (0)), 100000000, 0, -269), 0), 100000000, 0, -268), 0), 100000000, 0, -267), 0, (("stm/dag.mli", 27, 1151, 1153), ("stm/dag.mli", 27, 1151, 1201), 0), 0, Tag1 ("Dag", 11)), 0); (("set_info", 1895), ((Tag1 (0, (Tag3 ((("t", 1886)), [((("e")), 100000000, 0, -262); ((("i")), 100000000, 0, -263); ((("d")), 100000000, 0, -264)], (0)), 100000000, 0, -266), (Tag1 (0, (Tag3 ((("node", 1884)), 0, (0)), 100000000, 0, -265), (Tag1 (0, ((("i")), 100000000, 0, -263), (Tag3 ((("t", 1886)), [((("e")), 100000000, 0, -262); ((("i")), 100000000, 0, -263); ((("d")), 100000000, 0, -264)], (0)), 100000000, 0, -261), 0), 100000000, 0, -260), 0), 100000000, 0, -259), 0), 100000000, 0, -258), 0, (("stm/dag.mli", 28, 1202, 1204), ("stm/dag.mli", 28, 1202, 1261), 0), 0, Tag1 ("Dag", 12)), 0); (("clear_info", 1896), ((Tag1 (0, (Tag3 ((("t", 1886)), [((("e")), 100000000, 0, -253); ((("i")), 100000000, 0, -254); ((("d")), 100000000, 0, -255)], (0)), 100000000, 0, -257), (Tag1 (0, (Tag3 ((("node", 1884)), 0, (0)), 100000000, 0, -256), (Tag3 ((("t", 1886)), [((("e")), 100000000, 0, -253); ((("i")), 100000000, 0, -254); ((("d")), 100000000, 0, -255)], (0)), 100000000, 0, -252), 0), 100000000, 0, -251), 0), 100000000, 0, -250), 0, (("stm/dag.mli", 29, 1262, 1264), ("stm/dag.mli", 29, 1262, 1317), 0), 0, Tag1 ("Dag", 13)), 0); Tag3 (("Property", 1897), 0, (Tag1 ([Tag1 (("t", 1947), ([((("d")), 100000000, 0, -586)], 1, 0, 1, 0, [7], [2], 0, 0, (("stm/dag.mli", 36, 1552, 1556), ("stm/dag.mli", 36, 1552, 1565), 0), 0, 0, 0, Tag1 ("Dag", 14)), 1, 0); (("equal", 1948), ((Tag1 (0, (Tag3 ((("t", 1947)), [((("d")), 100000000, 0, -584)], (0)), 100000000, 0, -585), (Tag1 (0, (Tag3 ((("t", 1947)), [((("d")), 100000000, 0, -584)], (0)), 100000000, 0, -583), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -582), 0), 100000000, 0, -581), 0), 100000000, 0, -580), 0, (("stm/dag.mli", 37, 1566, 1570), ("stm/dag.mli", 37, 1566, 1602), 0), 0, Tag1 ("Dag", 15)), 0); (("compare", 1949), ((Tag1 (0, (Tag3 ((("t", 1947)), [((("d")), 100000000, 0, -578)], (0)), 100000000, 0, -579), (Tag1 (0, (Tag3 ((("t", 1947)), [((("d")), 100000000, 0, -578)], (0)), 100000000, 0, -577), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -576), 0), 100000000, 0, -575), 0), 100000000, 0, -574), 0, (("stm/dag.mli", 38, 1603, 1607), ("stm/dag.mli", 38, 1603, 1640), 0), 0, Tag1 ("Dag", 16)), 0); (("to_string", 1950), ((Tag1 (0, (Tag3 ((("t", 1947)), [((("d")), 100000000, 0, -573)], (0)), 100000000, 0, -572), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -571), 0), 100000000, 0, -570), 0, (("stm/dag.mli", 39, 1641, 1645), ("stm/dag.mli", 39, 1641, 1675), 0), 0, Tag1 ("Dag", 17)), 0); (("data", 1951), ((Tag1 (0, (Tag3 ((("t", 1947)), [((("d")), 100000000, 0, -568)], (0)), 100000000, 0, -569), ((("d")), 100000000, 0, -568), 0), 100000000, 0, -567), 0, (("stm/dag.mli", 40, 1676, 1680), ("stm/dag.mli", 40, 1676, 1701), 0), 0, Tag1 ("Dag", 18)), 0); (("having_it", 1952), ((Tag1 (0, (Tag3 ((("t", 1947)), [((("d")), 100000000, 0, -566)], (0)), 100000000, 0, -565), (Tag3 (Tag1 ((("NodeSet", 1885)), "t"), 0, (0)), 100000000, 0, -564), 0), 100000000, 0, -563), 0, (("stm/dag.mli", 41, 1702, 1706), ("stm/dag.mli", 41, 1702, 1739), 0), 0, Tag1 ("Dag", 19)), 0)]), 0, (("stm/dag.mli", 34, 1526, 1528), ("stm/dag.mli", 42, 1740, 1745), 0), Tag1 ("Dag", 20)), 0, 0); (("create_property", 1898), ((Tag1 (0, (Tag3 ((("t", 1886)), [((("e")), 100000000, 0, -244); ((("i")), 100000000, 0, -245); ((("d")), 100000000, 0, -246)], (0)), 100000000, 0, -249), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("node", 1884)), 0, (0)), 100000000, 0, -248)], (0)), 100000000, 0, -247), (Tag1 (0, ((("d")), 100000000, 0, -246), (Tag3 ((("t", 1886)), [((("e")), 100000000, 0, -244); ((("i")), 100000000, 0, -245); ((("d")), 100000000, 0, -246)], (0)), 100000000, 0, -243), 0), 100000000, 0, -242), 0), 100000000, 0, -241), 0), 100000000, 0, -240), 0, (("stm/dag.mli", 44, 1747, 1749), ("stm/dag.mli", 44, 1747, 1818), 0), 0, Tag1 ("Dag", 21)), 0); (("property_of", 1899), ((Tag1 (0, (Tag3 ((("t", 1886)), [((("e")), 100000000, 0, -238); ((("i")), 100000000, 0, -239); ((("d")), 100000000, 0, -235)], (0)), 100000000, 0, -237), (Tag1 (0, (Tag3 ((("node", 1884)), 0, (0)), 100000000, 0, -236), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Property", 1897)), "t"), [((("d")), 100000000, 0, -235)], (0)), 100000000, 0, -234)], (0)), 100000000, 0, -233), 0), 100000000, 0, -232), 0), 100000000, 0, -231), 0, (("stm/dag.mli", 45, 1819, 1821), ("stm/dag.mli", 45, 1819, 1881), 0), 0, Tag1 ("Dag", 22)), 0); (("del_property", 1900), ((Tag1 (0, (Tag3 ((("t", 1886)), [((("e")), 100000000, 0, -226); ((("i")), 100000000, 0, -227); ((("d")), 100000000, 0, -228)], (0)), 100000000, 0, -230), (Tag1 (0, (Tag3 (Tag1 ((("Property", 1897)), "t"), [((("d")), 100000000, 0, -228)], (0)), 100000000, 0, -229), (Tag3 ((("t", 1886)), [((("e")), 100000000, 0, -226); ((("i")), 100000000, 0, -227); ((("d")), 100000000, 0, -228)], (0)), 100000000, 0, -225), 0), 100000000, 0, -224), 0), 100000000, 0, -223), 0, (("stm/dag.mli", 46, 1882, 1884), ("stm/dag.mli", 46, 1882, 1948), 0), 0, Tag1 ("Dag", 23)), 0); (("iter", 1901), ((Tag1 (0, (Tag3 ((("t", 1886)), [((("e")), 100000000, 0, -215); ((("i")), 100000000, 0, -217); ((("d")), 100000000, 0, -220)], (0)), 100000000, 0, -222), (Tag1 (0, (Tag1 (0, (Tag3 ((("node", 1884)), 0, (0)), 100000000, 0, -221), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Property", 1897)), "t"), [((("d")), 100000000, 0, -220)], (0)), 100000000, 0, -219)], (0)), 100000000, 0, -218), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("i")), 100000000, 0, -217)], (0)), 100000000, 0, -216), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("node", 1884)), 0, (0)), 100000000, 0, -214); ((("e")), 100000000, 0, -215)]), 100000000, 0, -213)], (0)), 100000000, 0, -212), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -211), 0), 100000000, 0, -210), 0), 100000000, 0, -209), 0), 100000000, 0, -208), 0), 100000000, 0, -207), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -206), 0), 100000000, 0, -205), 0), 100000000, 0, -204), 0, (("stm/dag.mli", 48, 1950, 1952), ("stm/dag.mli", 50, 2027, 2066), 0), 0, Tag1 ("Dag", 24)), 0)]), 0, (("stm/vcs.mli", 86, 3038, 3040), ("stm/vcs.mli", 86, 3038, 3078), 0), Tag1 ("Vcs", 32)), 0, 0); (("dag", 1872), ((Tag1 (0, (Tag3 ((("t", 1857)), [((("diff")), 100000000, 0, -50); ((("info")), 100000000, 0, -51); ((("cdata")), 100000000, 0, -52)], (0)), 100000000, 0, -53), (Tag3 (Tag1 ((("Dag", 1871)), "t"), [((("diff")), 100000000, 0, -50); ((("info")), 100000000, 0, -51); ((("cdata")), 100000000, 0, -52)], (0)), 100000000, 0, -49), 0), 100000000, 0, -48), 0, (("stm/vcs.mli", 87, 3079, 3081), ("stm/vcs.mli", 87, 3079, 3143), 0), 0, Tag1 ("Vcs", 33)), 0); (("create_property", 1873), ((Tag1 (0, (Tag3 ((("t", 1857)), [((("e")), 100000000, 0, -42); ((("i")), 100000000, 0, -43); ((("c")), 100000000, 0, -44)], (0)), 100000000, 0, -47), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("id", 1853)), 0, (0)), 100000000, 0, -46)], (0)), 100000000, 0, -45), (Tag1 (0, ((("c")), 100000000, 0, -44), (Tag3 ((("t", 1857)), [((("e")), 100000000, 0, -42); ((("i")), 100000000, 0, -43); ((("c")), 100000000, 0, -44)], (0)), 100000000, 0, -41), 0), 100000000, 0, -40), 0), 100000000, 0, -39), 0), 100000000, 0, -38), 0, (("stm/vcs.mli", 91, 3248, 3250), ("stm/vcs.mli", 91, 3248, 3317), 0), 0, Tag1 ("Vcs", 34)), 0); (("property_of", 1874), ((Tag1 (0, (Tag3 ((("t", 1857)), [((("e")), 100000000, 0, -36); ((("i")), 100000000, 0, -37); ((("c")), 100000000, 0, -33)], (0)), 100000000, 0, -35), (Tag1 (0, (Tag3 ((("id", 1853)), 0, (0)), 100000000, 0, -34), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((("Dag", 1871)), "Property"), "t"), [((("c")), 100000000, 0, -33)], (0)), 100000000, 0, -32)], (0)), 100000000, 0, -31), 0), 100000000, 0, -30), 0), 100000000, 0, -29), 0, (("stm/vcs.mli", 92, 3318, 3320), ("stm/vcs.mli", 92, 3318, 3382), 0), 0, Tag1 ("Vcs", 35)), 0); (("delete_property", 1875), ((Tag1 (0, (Tag3 ((("t", 1857)), [((("e")), 100000000, 0, -24); ((("i")), 100000000, 0, -25); ((("c")), 100000000, 0, -26)], (0)), 100000000, 0, -28), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((("Dag", 1871)), "Property"), "t"), [((("c")), 100000000, 0, -26)], (0)), 100000000, 0, -27), (Tag3 ((("t", 1857)), [((("e")), 100000000, 0, -24); ((("i")), 100000000, 0, -25); ((("c")), 100000000, 0, -26)], (0)), 100000000, 0, -23), 0), 100000000, 0, -22), 0), 100000000, 0, -21), 0, (("stm/vcs.mli", 93, 3383, 3385), ("stm/vcs.mli", 93, 3383, 3456), 0), 0, Tag1 ("Vcs", 36)), 0); (("gc", 1876), ((Tag1 (0, (Tag3 ((("t", 1857)), [((("e")), 100000000, 0, -16); ((("info")), 100000000, 0, -17); ((("c")), 100000000, 0, -18)], (0)), 100000000, 0, -20), (Tag2 ([(Tag3 ((("t", 1857)), [((("e")), 100000000, 0, -16); ((("info")), 100000000, 0, -17); ((("c")), 100000000, 0, -18)], (0)), 100000000, 0, -15); (Tag3 (Tag1 (Tag1 ((("Dag", 1871)), "NodeSet"), "t"), 0, (0)), 100000000, 0, -19)]), 100000000, 0, -14), 0), 100000000, 0, -13), 0, (("stm/vcs.mli", 96, 3513, 3515), ("stm/vcs.mli", 96, 3513, 3574), 0), 0, Tag1 ("Vcs", 37)), 0); (("reachable", 1877), ((Tag1 (0, (Tag3 ((("t", 1857)), [((("e")), 100000000, 0, -10); ((("info")), 100000000, 0, -11); ((("c")), 100000000, 0, -12)], (0)), 100000000, 0, -9), (Tag1 (0, (Tag3 ((("id", 1853)), 0, (0)), 100000000, 0, -8), (Tag3 (Tag1 (Tag1 ((("Dag", 1871)), "NodeSet"), "t"), 0, (0)), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("stm/vcs.mli", 97, 3575, 3577), ("stm/vcs.mli", 97, 3575, 3631), 0), 0, Tag1 ("Vcs", 38)), 0)])), 0, (("stm/vcs.mli", 37, 1690, 1690), ("stm/vcs.mli", 100, 3634, 3637), 0), Tag1 ("Vcs", 39)), 0); Tag3 (("Make", 1847), 0, (Tag2 (((("OT", 1848)), (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Map"), "OrderedType"))), Tag2 (((("K", 1849)), ((("Kind", 1845)))), Tag1 ([Tag3 (("Branch", 1953), 0, (Tag1 ([Tag1 (("t", 1979), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("stm/vcs.mli", 41, 1735, 1739), ("stm/vcs.mli", 41, 1735, 1745), 0), 0, 0, 0, Tag1 ("Vcs", 3)), 1, 0); (("make", 1980), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -787), (Tag3 ((("t", 1979)), 0, (0)), 100000000, 0, -786), 0), 100000000, 0, -785), 0, (("stm/vcs.mli", 42, 1746, 1750), ("stm/vcs.mli", 42, 1746, 1772), 0), 0, Tag1 ("Vcs", 4)), 0); (("equal", 1981), ((Tag1 (0, (Tag3 ((("t", 1979)), 0, (0)), 100000000, 0, -784), (Tag1 (0, (Tag3 ((("t", 1979)), 0, (0)), 100000000, 0, -783), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -782), 0), 100000000, 0, -781), 0), 100000000, 0, -780), 0, (("stm/vcs.mli", 43, 1773, 1777), ("stm/vcs.mli", 43, 1773, 1803), 0), 0, Tag1 ("Vcs", 5)), 0); (("compare", 1982), ((Tag1 (0, (Tag3 ((("t", 1979)), 0, (0)), 100000000, 0, -779), (Tag1 (0, (Tag3 ((("t", 1979)), 0, (0)), 100000000, 0, -778), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -777), 0), 100000000, 0, -776), 0), 100000000, 0, -775), 0, (("stm/vcs.mli", 44, 1804, 1808), ("stm/vcs.mli", 44, 1804, 1835), 0), 0, Tag1 ("Vcs", 6)), 0); (("to_string", 1983), ((Tag1 (0, (Tag3 ((("t", 1979)), 0, (0)), 100000000, 0, -774), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -773), 0), 100000000, 0, -772), 0, (("stm/vcs.mli", 45, 1836, 1840), ("stm/vcs.mli", 45, 1836, 1867), 0), 0, Tag1 ("Vcs", 7)), 0); (("master", 1984), ((Tag3 ((("t", 1979)), 0, (0)), 100000000, 0, -771), 0, (("stm/vcs.mli", 46, 1868, 1872), ("stm/vcs.mli", 46, 1868, 1886), 0), 0, Tag1 ("Vcs", 8)), 0)]), 0, (("stm/vcs.mli", 39, 1711, 1713), ("stm/vcs.mli", 47, 1887, 1892), 0), Tag1 ("Vcs", 9)), 0, 0); Tag1 (("id", 1954), (0, 0, 0, 1, ((Tag3 (Tag1 ((("OT", 1848)), "t"), 0, (0)), 100000000, 0, -770)), 0, 0, 0, 0, (("stm/vcs.mli", 103, 3687, 3692), ("stm/vcs.mli", 103, 3687, 3706), 0), 0, 0, 0, Tag1 ("Vcs", 42)), 1, 0); Tag1 (("kind_gen", 1955), ([((("a")), 100000000, 0, -769)], 1, 0, 1, ((Tag3 (Tag1 ((("K", 1849)), "t"), [((("a")), 100000000, 0, -769)], (0)), 100000000, 0, -768)), [7], [2], 0, 0, (("stm/vcs.mli", 105, 3732, 3736), ("stm/vcs.mli", 105, 3732, 3761), 0), 0, 0, 0, Tag1 ("Vcs", 44)), 1, 0); Tag1 (("kind", 1956), (0, 0, 0, 1, ((Tag3 ((("kind_gen", 1955)), [(Tag3 (Tag1 ((("Branch", 1953)), "t"), 0, (0)), 100000000, 0, -767)], (0)), 100000000, 0, -766)), 0, 0, 0, 0, (("stm/vcs.mli", 52, 1924, 1926), ("stm/vcs.mli", 52, 1924, 1955), 0), 0, 0, 0, Tag1 ("Vcs", 12)), 1, 0); Tag1 (("branch_info", 1957), (0, 0, [[(("kind", 283), 0, (Tag3 ((("kind", 1956)), 0, (0)), 100000000, 0, -763), (("stm/vcs.mli", 55, 1980, 1984), ("stm/vcs.mli", 55, 1980, 1996), 0), 0, Tag1 ("Vcs", 14)); (("root", 284), 0, (Tag3 ((("id", 1954)), 0, (0)), 100000000, 0, -764), (("stm/vcs.mli", 56, 1997, 2001), ("stm/vcs.mli", 56, 1997, 2011), 0), 0, Tag1 ("Vcs", 15)); (("pos", 285), 0, (Tag3 ((("id", 1954)), 0, (0)), 100000000, 0, -765), (("stm/vcs.mli", 57, 2012, 2016), ("stm/vcs.mli", 57, 2012, 2026), 0), 0, Tag1 ("Vcs", 16))]], 1, 0, 0, 0, 0, 0, (("stm/vcs.mli", 54, 1957, 1959), ("stm/vcs.mli", 58, 2027, 2030), 0), 0, 0, 0, Tag1 ("Vcs", 13)), 1, 0); Tag1 (("t", 1958), ([((("diff")), 100000000, 0, -760); ((("info")), 100000000, 0, -761); ((("property_data")), 100000000, 0, -762)], 3, 0, 1, 0, [7; 7; 7], [2; 2; 2], 0, 0, (("stm/vcs.mli", 60, 2032, 2034), ("stm/vcs.mli", 60, 2032, 2069), 0), 0, 0, 0, Tag1 ("Vcs", 17)), 1, 0); (("empty", 1959), ((Tag1 (0, (Tag3 ((("id", 1954)), 0, (0)), 100000000, 0, -759), (Tag3 ((("t", 1958)), [((("diff")), 100000000, 0, -756); ((("info")), 100000000, 0, -757); ((("property_data")), 100000000, 0, -758)], (0)), 100000000, 0, -755), 0), 100000000, 0, -754), 0, (("stm/vcs.mli", 62, 2071, 2073), ("stm/vcs.mli", 62, 2071, 2121), 0), 0, Tag1 ("Vcs", 18)), 0); (("current_branch", 1960), ((Tag1 (0, (Tag3 ((("t", 1958)), [((("e")), 100000000, 0, -751); ((("i")), 100000000, 0, -752); ((("c")), 100000000, 0, -753)], (0)), 100000000, 0, -750), (Tag3 (Tag1 ((("Branch", 1953)), "t"), 0, (0)), 100000000, 0, -749), 0), 100000000, 0, -748), 0, (("stm/vcs.mli", 64, 2123, 2125), ("stm/vcs.mli", 64, 2123, 2170), 0), 0, Tag1 ("Vcs", 19)), 0); (("branches", 1961), ((Tag1 (0, (Tag3 ((("t", 1958)), [((("e")), 100000000, 0, -745); ((("i")), 100000000, 0, -746); ((("c")), 100000000, 0, -747)], (0)), 100000000, 0, -744), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Branch", 1953)), "t"), 0, (0)), 100000000, 0, -743)], (0)), 100000000, 0, -742), 0), 100000000, 0, -741), 0, (("stm/vcs.mli", 65, 2171, 2173), ("stm/vcs.mli", 65, 2171, 2217), 0), 0, Tag1 ("Vcs", 20)), 0); (("get_branch", 1962), ((Tag1 (0, (Tag3 ((("t", 1958)), [((("e")), 100000000, 0, -738); ((("i")), 100000000, 0, -739); ((("c")), 100000000, 0, -740)], (0)), 100000000, 0, -737), (Tag1 (0, (Tag3 (Tag1 ((("Branch", 1953)), "t"), 0, (0)), 100000000, 0, -736), (Tag3 ((("branch_info", 1957)), 0, (0)), 100000000, 0, -735), 0), 100000000, 0, -734), 0), 100000000, 0, -733), 0, (("stm/vcs.mli", 67, 2219, 2221), ("stm/vcs.mli", 67, 2219, 2277), 0), 0, Tag1 ("Vcs", 21)), 0); (("reset_branch", 1963), ((Tag1 (0, (Tag3 ((("t", 1958)), [((("e")), 100000000, 0, -727); ((("i")), 100000000, 0, -728); ((("c")), 100000000, 0, -729)], (0)), 100000000, 0, -732), (Tag1 (0, (Tag3 (Tag1 ((("Branch", 1953)), "t"), 0, (0)), 100000000, 0, -731), (Tag1 (0, (Tag3 ((("id", 1954)), 0, (0)), 100000000, 0, -730), (Tag3 ((("t", 1958)), [((("e")), 100000000, 0, -727); ((("i")), 100000000, 0, -728); ((("c")), 100000000, 0, -729)], (0)), 100000000, 0, -726), 0), 100000000, 0, -725), 0), 100000000, 0, -724), 0), 100000000, 0, -723), 0, (("stm/vcs.mli", 68, 2278, 2280), ("stm/vcs.mli", 68, 2278, 2345), 0), 0, Tag1 ("Vcs", 22)), 0); (("branch", 1964), ((Tag1 (0, (Tag3 ((("t", 1958)), [((("e")), 100000000, 0, -713); ((("i")), 100000000, 0, -714); ((("c")), 100000000, 0, -715)], (0)), 100000000, 0, -722), (Tag1 (Tag1 ("root"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("id", 1954)), 0, (0)), 100000000, 0, -721)], (0)), 100000000, 0, -720), (Tag1 (Tag1 ("pos"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("id", 1954)), 0, (0)), 100000000, 0, -719)], (0)), 100000000, 0, -718), (Tag1 (0, (Tag3 (Tag1 ((("Branch", 1953)), "t"), 0, (0)), 100000000, 0, -717), (Tag1 (0, (Tag3 ((("kind", 1956)), 0, (0)), 100000000, 0, -716), (Tag3 ((("t", 1958)), [((("e")), 100000000, 0, -713); ((("i")), 100000000, 0, -714); ((("c")), 100000000, 0, -715)], (0)), 100000000, 0, -712), 0), 100000000, 0, -711), 0), 100000000, 0, -710), 0), 100000000, 0, -709), 0), 100000000, 0, -708), 0), 100000000, 0, -707), 0, (("stm/vcs.mli", 69, 2346, 2348), ("stm/vcs.mli", 71, 2404, 2444), 0), 0, Tag1 ("Vcs", 23)), 0); (("delete_branch", 1965), ((Tag1 (0, (Tag3 ((("t", 1958)), [((("e")), 100000000, 0, -702); ((("i")), 100000000, 0, -703); ((("c")), 100000000, 0, -704)], (0)), 100000000, 0, -706), (Tag1 (0, (Tag3 (Tag1 ((("Branch", 1953)), "t"), 0, (0)), 100000000, 0, -705), (Tag3 ((("t", 1958)), [((("e")), 100000000, 0, -702); ((("i")), 100000000, 0, -703); ((("c")), 100000000, 0, -704)], (0)), 100000000, 0, -701), 0), 100000000, 0, -700), 0), 100000000, 0, -699), 0, (("stm/vcs.mli", 72, 2445, 2447), ("stm/vcs.mli", 72, 2445, 2507), 0), 0, Tag1 ("Vcs", 24)), 0); (("merge", 1966), ((Tag1 (0, (Tag3 ((("t", 1958)), [((("diff")), 100000000, 0, -691); ((("i")), 100000000, 0, -692); ((("c")), 100000000, 0, -693)], (0)), 100000000, 0, -698), (Tag1 (0, (Tag3 ((("id", 1954)), 0, (0)), 100000000, 0, -697), (Tag1 (("ours"), ((("diff")), 100000000, 0, -691), (Tag1 (("theirs"), ((("diff")), 100000000, 0, -691), (Tag1 (Tag1 ("into"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("Branch", 1953)), "t"), 0, (0)), 100000000, 0, -696)], (0)), 100000000, 0, -695), (Tag1 (0, (Tag3 (Tag1 ((("Branch", 1953)), "t"), 0, (0)), 100000000, 0, -694), (Tag3 ((("t", 1958)), [((("diff")), 100000000, 0, -691); ((("i")), 100000000, 0, -692); ((("c")), 100000000, 0, -693)], (0)), 100000000, 0, -690), 0), 100000000, 0, -689), 0), 100000000, 0, -688), 0), 100000000, 0, -687), 0), 100000000, 0, -686), 0), 100000000, 0, -685), 0), 100000000, 0, -684), 0, (("stm/vcs.mli", 73, 2508, 2510), ("stm/vcs.mli", 75, 2599, 2638), 0), 0, Tag1 ("Vcs", 25)), 0); (("commit", 1967), ((Tag1 (0, (Tag3 ((("t", 1958)), [((("diff")), 100000000, 0, -679); ((("i")), 100000000, 0, -680); ((("c")), 100000000, 0, -681)], (0)), 100000000, 0, -683), (Tag1 (0, (Tag3 ((("id", 1954)), 0, (0)), 100000000, 0, -682), (Tag1 (0, ((("diff")), 100000000, 0, -679), (Tag3 ((("t", 1958)), [((("diff")), 100000000, 0, -679); ((("i")), 100000000, 0, -680); ((("c")), 100000000, 0, -681)], (0)), 100000000, 0, -678), 0), 100000000, 0, -677), 0), 100000000, 0, -676), 0), 100000000, 0, -675), 0, (("stm/vcs.mli", 76, 2639, 2641), ("stm/vcs.mli", 76, 2639, 2703), 0), 0, Tag1 ("Vcs", 26)), 0); (("rewrite_merge", 1968), ((Tag1 (0, (Tag3 ((("t", 1958)), [((("diff")), 100000000, 0, -668); ((("i")), 100000000, 0, -669); ((("c")), 100000000, 0, -670)], (0)), 100000000, 0, -674), (Tag1 (0, (Tag3 ((("id", 1954)), 0, (0)), 100000000, 0, -673), (Tag1 (("ours"), ((("diff")), 100000000, 0, -668), (Tag1 (("theirs"), ((("diff")), 100000000, 0, -668), (Tag1 (("at"), (Tag3 ((("id", 1954)), 0, (0)), 100000000, 0, -672), (Tag1 (0, (Tag3 (Tag1 ((("Branch", 1953)), "t"), 0, (0)), 100000000, 0, -671), (Tag3 ((("t", 1958)), [((("diff")), 100000000, 0, -668); ((("i")), 100000000, 0, -669); ((("c")), 100000000, 0, -670)], (0)), 100000000, 0, -667), 0), 100000000, 0, -666), 0), 100000000, 0, -665), 0), 100000000, 0, -664), 0), 100000000, 0, -663), 0), 100000000, 0, -662), 0), 100000000, 0, -661), 0, (("stm/vcs.mli", 77, 2704, 2706), ("stm/vcs.mli", 79, 2794, 2833), 0), 0, Tag1 ("Vcs", 27)), 0); (("checkout", 1969), ((Tag1 (0, (Tag3 ((("t", 1958)), [((("e")), 100000000, 0, -656); ((("i")), 100000000, 0, -657); ((("c")), 100000000, 0, -658)], (0)), 100000000, 0, -660), (Tag1 (0, (Tag3 (Tag1 ((("Branch", 1953)), "t"), 0, (0)), 100000000, 0, -659), (Tag3 ((("t", 1958)), [((("e")), 100000000, 0, -656); ((("i")), 100000000, 0, -657); ((("c")), 100000000, 0, -658)], (0)), 100000000, 0, -655), 0), 100000000, 0, -654), 0), 100000000, 0, -653), 0, (("stm/vcs.mli", 80, 2834, 2836), ("stm/vcs.mli", 80, 2834, 2891), 0), 0, Tag1 ("Vcs", 28)), 0); (("set_info", 1970), ((Tag1 (0, (Tag3 ((("t", 1958)), [((("e")), 100000000, 0, -648); ((("info")), 100000000, 0, -649); ((("c")), 100000000, 0, -650)], (0)), 100000000, 0, -652), (Tag1 (0, (Tag3 ((("id", 1954)), 0, (0)), 100000000, 0, -651), (Tag1 (0, ((("info")), 100000000, 0, -649), (Tag3 ((("t", 1958)), [((("e")), 100000000, 0, -648); ((("info")), 100000000, 0, -649); ((("c")), 100000000, 0, -650)], (0)), 100000000, 0, -647), 0), 100000000, 0, -646), 0), 100000000, 0, -645), 0), 100000000, 0, -644), 0, (("stm/vcs.mli", 82, 2893, 2895), ("stm/vcs.mli", 82, 2893, 2959), 0), 0, Tag1 ("Vcs", 29)), 0); (("get_info", 1971), ((Tag1 (0, (Tag3 ((("t", 1958)), [((("e")), 100000000, 0, -642); ((("info")), 100000000, 0, -639); ((("c")), 100000000, 0, -643)], (0)), 100000000, 0, -641), (Tag1 (0, (Tag3 ((("id", 1954)), 0, (0)), 100000000, 0, -640), (Tag3 ((Tag3 ("option", 10)), [((("info")), 100000000, 0, -639)], (0)), 100000000, 0, -638), 0), 100000000, 0, -637), 0), 100000000, 0, -636), 0, (("stm/vcs.mli", 83, 2960, 2962), ("stm/vcs.mli", 83, 2960, 3014), 0), 0, Tag1 ("Vcs", 30)), 0); Tag3 (("Dag", 1972), 0, (Tag1 ([Tag1 (("node", 1985), (0, 0, 0, 1, ((Tag3 (Tag1 ((("OT", 1848)), "t"), 0, (0)), 100000000, 0, -919)), 0, 0, 0, 0, (("stm/vcs.mli", 104, 3707, 3711), ("stm/vcs.mli", 104, 3707, 3731), 0), 0, 0, 0, Tag1 ("Vcs", 43)), 1, 0); Tag3 (("NodeSet", 1986), 0, (Tag1 ([Tag1 (("elt", 2003), (0, 0, 0, 1, ((Tag3 (Tag1 ((("OT", 1848)), "t"), 0, (0)), 100000000, 0, -1147)), 0, 0, 0, 0, (("stm/vcs.mli", 107, 3802, 3806), ("stm/vcs.mli", 107, 3802, 3833), 0), 0, 0, 0, Tag1 ("Vcs", 46)), 1, 0); Tag1 (("t", 2004), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag2 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Set"), "Make"), (("OT", 1848))), "t"), 0, (0)), 100000000, 0, -1146)), 0, 0, 0, 0, (("stm/vcs.mli", 106, 3762, 3766), ("stm/vcs.mli", 106, 3762, 3801), 0), 0, 0, 0, Tag1 ("Vcs", 45)), 1, 0); (("empty", 2005), ((Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -1145), 0, (("set.mli", 77, 2942, 2946), ("set.mli", 77, 2942, 2958), 0), 0, Tag1 ("Stdlib__Set", 5)), 0); (("add", 2006), ((Tag1 (0, (Tag3 ((("elt", 2003)), 0, (0)), 100000000, 0, -1144), (Tag1 (0, (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -1143), (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -1142), 0), 100000000, 0, -1141), 0), 100000000, 0, -1140), 0, (("set.mli", 80, 2986, 2990), ("set.mli", 80, 2986, 3012), 0), 0, Tag1 ("Stdlib__Set", 6)), 0); (("singleton", 2007), ((Tag1 (0, (Tag3 ((("elt", 2003)), 0, (0)), 100000000, 0, -1139), (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -1138), 0), 100000000, 0, -1137), 0, (("set.mli", 86, 3278, 3282), ("set.mli", 86, 3278, 3305), 0), 0, Tag1 ("Stdlib__Set", 7)), 0); (("remove", 2008), ((Tag1 (0, (Tag3 ((("elt", 2003)), 0, (0)), 100000000, 0, -1136), (Tag1 (0, (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -1135), (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -1134), 0), 100000000, 0, -1133), 0), 100000000, 0, -1132), 0, (("set.mli", 89, 3381, 3385), ("set.mli", 89, 3381, 3410), 0), 0, Tag1 ("Stdlib__Set", 8)), 0); (("union", 2009), ((Tag1 (0, (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -1131), (Tag1 (0, (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -1130), (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -1129), 0), 100000000, 0, -1128), 0), 100000000, 0, -1127), 0, (("set.mli", 95, 3677, 3681), ("set.mli", 95, 3677, 3703), 0), 0, Tag1 ("Stdlib__Set", 9)), 0); (("inter", 2010), ((Tag1 (0, (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -1126), (Tag1 (0, (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -1125), (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -1124), 0), 100000000, 0, -1123), 0), 100000000, 0, -1122), 0, (("set.mli", 98, 3727, 3731), ("set.mli", 98, 3727, 3753), 0), 0, Tag1 ("Stdlib__Set", 10)), 0); (("disjoint", 2011), ((Tag1 (0, (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -1121), (Tag1 (0, (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -1120), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1119), 0), 100000000, 0, -1118), 0), 100000000, 0, -1117), 0, (("set.mli", 101, 3784, 3788), ("set.mli", 101, 3784, 3816), 0), 0, Tag1 ("Stdlib__Set", 11)), 0); (("diff", 2012), ((Tag1 (0, (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -1116), (Tag1 (0, (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -1115), (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -1114), 0), 100000000, 0, -1113), 0), 100000000, 0, -1112), 0, (("set.mli", 105, 3880, 3884), ("set.mli", 105, 3880, 3905), 0), 0, Tag1 ("Stdlib__Set", 12)), 0); (("cardinal", 2013), ((Tag1 (0, (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -1111), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1110), 0), 100000000, 0, -1109), 0, (("set.mli", 109, 4007, 4011), ("set.mli", 109, 4007, 4033), 0), 0, Tag1 ("Stdlib__Set", 13)), 0); (("elements", 2014), ((Tag1 (0, (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -1108), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 2003)), 0, (0)), 100000000, 0, -1107)], (0)), 100000000, 0, -1106), 0), 100000000, 0, -1105), 0, (("set.mli", 114, 4120, 4124), ("set.mli", 114, 4120, 4151), 0), 0, Tag1 ("Stdlib__Set", 14)), 0); (("min_elt", 2015), ((Tag1 (0, (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -1104), (Tag3 ((("elt", 2003)), 0, (0)), 100000000, 0, -1103), 0), 100000000, 0, -1102), 0, (("set.mli", 120, 4380, 4384), ("set.mli", 120, 4380, 4405), 0), 0, Tag1 ("Stdlib__Set", 15)), 0); (("min_elt_opt", 2016), ((Tag1 (0, (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -1101), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2003)), 0, (0)), 100000000, 0, -1100)], (0)), 100000000, 0, -1099), 0), 100000000, 0, -1098), 0, (("set.mli", 125, 4567, 4571), ("set.mli", 125, 4567, 4603), 0), 0, Tag1 ("Stdlib__Set", 16)), 0); (("max_elt", 2017), ((Tag1 (0, (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -1097), (Tag3 ((("elt", 2003)), 0, (0)), 100000000, 0, -1096), 0), 100000000, 0, -1095), 0, (("set.mli", 131, 4774, 4778), ("set.mli", 131, 4774, 4799), 0), 0, Tag1 ("Stdlib__Set", 17)), 0); (("max_elt_opt", 2018), ((Tag1 (0, (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -1094), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2003)), 0, (0)), 100000000, 0, -1093)], (0)), 100000000, 0, -1092), 0), 100000000, 0, -1091), 0, (("set.mli", 135, 4890, 4894), ("set.mli", 135, 4890, 4926), 0), 0, Tag1 ("Stdlib__Set", 18)), 0); (("choose", 2019), ((Tag1 (0, (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -1090), (Tag3 ((("elt", 2003)), 0, (0)), 100000000, 0, -1089), 0), 100000000, 0, -1088), 0, (("set.mli", 140, 5041, 5045), ("set.mli", 140, 5041, 5065), 0), 0, Tag1 ("Stdlib__Set", 19)), 0); (("choose_opt", 2020), ((Tag1 (0, (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -1087), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2003)), 0, (0)), 100000000, 0, -1086)], (0)), 100000000, 0, -1085), 0), 100000000, 0, -1084), 0, (("set.mli", 145, 5263, 5267), ("set.mli", 145, 5263, 5298), 0), 0, Tag1 ("Stdlib__Set", 20)), 0); (("find", 2021), ((Tag1 (0, (Tag3 ((("elt", 2003)), 0, (0)), 100000000, 0, -1083), (Tag1 (0, (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -1082), (Tag3 ((("elt", 2003)), 0, (0)), 100000000, 0, -1081), 0), 100000000, 0, -1080), 0), 100000000, 0, -1079), 0, (("set.mli", 153, 5541, 5549), ("set.mli", 153, 5541, 5574), 0), 0, Tag1 ("Stdlib__Set", 21)), 0); (("find_opt", 2022), ((Tag1 (0, (Tag3 ((("elt", 2003)), 0, (0)), 100000000, 0, -1078), (Tag1 (0, (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -1077), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2003)), 0, (0)), 100000000, 0, -1076)], (0)), 100000000, 0, -1075), 0), 100000000, 0, -1074), 0), 100000000, 0, -1073), 0, (("set.mli", 159, 5752, 5756), ("set.mli", 159, 5752, 5792), 0), 0, Tag1 ("Stdlib__Set", 22)), 0); (("find_first", 2023), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2003)), 0, (0)), 100000000, 0, -1072), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1071), 0), 100000000, 0, -1070), (Tag1 (0, (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -1069), (Tag3 ((("elt", 2003)), 0, (0)), 100000000, 0, -1068), 0), 100000000, 0, -1067), 0), 100000000, 0, -1066), 0, (("set.mli", 165, 5963, 5967), ("set.mli", 165, 5963, 6008), 0), 0, Tag1 ("Stdlib__Set", 23)), 0); (("find_first_opt", 2024), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2003)), 0, (0)), 100000000, 0, -1065), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1064), 0), 100000000, 0, -1063), (Tag1 (0, (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -1062), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2003)), 0, (0)), 100000000, 0, -1061)], (0)), 100000000, 0, -1060), 0), 100000000, 0, -1059), 0), 100000000, 0, -1058), 0, (("set.mli", 177, 6482, 6486), ("set.mli", 177, 6482, 6538), 0), 0, Tag1 ("Stdlib__Set", 24)), 0); (("find_last", 2025), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2003)), 0, (0)), 100000000, 0, -1057), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1056), 0), 100000000, 0, -1055), (Tag1 (0, (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -1054), (Tag3 ((("elt", 2003)), 0, (0)), 100000000, 0, -1053), 0), 100000000, 0, -1052), 0), 100000000, 0, -1051), 0, (("set.mli", 184, 6779, 6783), ("set.mli", 184, 6779, 6823), 0), 0, Tag1 ("Stdlib__Set", 25)), 0); (("find_last_opt", 2026), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2003)), 0, (0)), 100000000, 0, -1050), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1049), 0), 100000000, 0, -1048), (Tag1 (0, (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -1047), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2003)), 0, (0)), 100000000, 0, -1046)], (0)), 100000000, 0, -1045), 0), 100000000, 0, -1044), 0), 100000000, 0, -1043), 0, (("set.mli", 190, 7044, 7048), ("set.mli", 190, 7044, 7099), 0), 0, Tag1 ("Stdlib__Set", 26)), 0); (("iter", 2027), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2003)), 0, (0)), 100000000, 0, -1042), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1041), 0), 100000000, 0, -1040), (Tag1 (0, (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -1039), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1038), 0), 100000000, 0, -1037), 0), 100000000, 0, -1036), 0, (("set.mli", 198, 7371, 7375), ("set.mli", 198, 7371, 7411), 0), 0, Tag1 ("Stdlib__Set", 27)), 0); (("fold", 2028), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2003)), 0, (0)), 100000000, 0, -1035), (Tag1 (0, ((("acc")), 100000000, 0, -1031), ((("acc")), 100000000, 0, -1031), 0), 100000000, 0, -1034), 0), 100000000, 0, -1033), (Tag1 (0, (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -1032), (Tag1 (0, ((("acc")), 100000000, 0, -1031), ((("acc")), 100000000, 0, -1031), 0), 100000000, 0, -1030), 0), 100000000, 0, -1029), 0), 100000000, 0, -1028), 0, (("set.mli", 203, 7616, 7620), ("set.mli", 203, 7616, 7672), 0), 0, Tag1 ("Stdlib__Set", 28)), 0); (("map", 2029), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2003)), 0, (0)), 100000000, 0, -1027), (Tag3 ((("elt", 2003)), 0, (0)), 100000000, 0, -1026), 0), 100000000, 0, -1025), (Tag1 (0, (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -1024), (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -1023), 0), 100000000, 0, -1022), 0), 100000000, 0, -1021), 0, (("set.mli", 209, 7860, 7864), ("set.mli", 209, 7860, 7895), 0), 0, Tag1 ("Stdlib__Set", 29)), 0); (("filter", 2030), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2003)), 0, (0)), 100000000, 0, -1020), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1019), 0), 100000000, 0, -1018), (Tag1 (0, (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -1017), (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -1016), 0), 100000000, 0, -1015), 0), 100000000, 0, -1014), 0, (("set.mli", 221, 8372, 8376), ("set.mli", 221, 8372, 8411), 0), 0, Tag1 ("Stdlib__Set", 30)), 0); (("filter_map", 2031), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2003)), 0, (0)), 100000000, 0, -1013), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2003)), 0, (0)), 100000000, 0, -1012)], (0)), 100000000, 0, -1011), 0), 100000000, 0, -1010), (Tag1 (0, (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -1009), (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -1008), 0), 100000000, 0, -1007), 0), 100000000, 0, -1006), 0, (("set.mli", 228, 8710, 8714), ("set.mli", 228, 8710, 8759), 0), 0, Tag1 ("Stdlib__Set", 31)), 0); (("partition", 2032), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2003)), 0, (0)), 100000000, 0, -1005), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1004), 0), 100000000, 0, -1003), (Tag1 (0, (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -1002), (Tag2 ([(Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -1000); (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -1001)]), 100000000, 0, -999), 0), 100000000, 0, -998), 0), 100000000, 0, -997), 0, (("set.mli", 243, 9275, 9279), ("set.mli", 243, 9275, 9321), 0), 0, Tag1 ("Stdlib__Set", 32)), 0); (("split", 2033), ((Tag1 (0, (Tag3 ((("elt", 2003)), 0, (0)), 100000000, 0, -996), (Tag1 (0, (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -995), (Tag2 ([(Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -992); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -993); (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -994)]), 100000000, 0, -991), 0), 100000000, 0, -990), 0), 100000000, 0, -989), 0, (("set.mli", 249, 9562, 9566), ("set.mli", 249, 9562, 9601), 0), 0, Tag1 ("Stdlib__Set", 33)), 0); (("is_empty", 2034), ((Tag1 (0, (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -988), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -987), 0), 100000000, 0, -986), 0, (("set.mli", 260, 10020, 10024), ("set.mli", 260, 10020, 10047), 0), 0, Tag1 ("Stdlib__Set", 34)), 0); (("mem", 2035), ((Tag1 (0, (Tag3 ((("elt", 2003)), 0, (0)), 100000000, 0, -985), (Tag1 (0, (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -984), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -983), 0), 100000000, 0, -982), 0), 100000000, 0, -981), 0, (("set.mli", 263, 10096, 10100), ("set.mli", 263, 10096, 10125), 0), 0, Tag1 ("Stdlib__Set", 35)), 0); (("equal", 2036), ((Tag1 (0, (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -980), (Tag1 (0, (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -979), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -978), 0), 100000000, 0, -977), 0), 100000000, 0, -976), 0, (("set.mli", 266, 10190, 10194), ("set.mli", 266, 10190, 10219), 0), 0, Tag1 ("Stdlib__Set", 36)), 0); (("compare", 2037), ((Tag1 (0, (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -975), (Tag1 (0, (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -974), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -973), 0), 100000000, 0, -972), 0), 100000000, 0, -971), 0, (("set.mli", 270, 10335, 10339), ("set.mli", 270, 10335, 10365), 0), 0, Tag1 ("Stdlib__Set", 37)), 0); (("subset", 2038), ((Tag1 (0, (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -970), (Tag1 (0, (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -969), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -968), 0), 100000000, 0, -967), 0), 100000000, 0, -966), 0, (("set.mli", 274, 10476, 10480), ("set.mli", 274, 10476, 10506), 0), 0, Tag1 ("Stdlib__Set", 38)), 0); (("for_all", 2039), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2003)), 0, (0)), 100000000, 0, -965), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -964), 0), 100000000, 0, -963), (Tag1 (0, (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -962), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -961), 0), 100000000, 0, -960), 0), 100000000, 0, -959), 0, (("set.mli", 278, 10598, 10602), ("set.mli", 278, 10598, 10641), 0), 0, Tag1 ("Stdlib__Set", 39)), 0); (("exists", 2040), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2003)), 0, (0)), 100000000, 0, -958), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -957), 0), 100000000, 0, -956), (Tag1 (0, (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -955), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -954), 0), 100000000, 0, -953), 0), 100000000, 0, -952), 0, (("set.mli", 282, 10737, 10741), ("set.mli", 282, 10737, 10779), 0), 0, Tag1 ("Stdlib__Set", 40)), 0); (("to_list", 2041), ((Tag1 (0, (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -951), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 2003)), 0, (0)), 100000000, 0, -950)], (0)), 100000000, 0, -949), 0), 100000000, 0, -948), 0, (("set.mli", 288, 10922, 10926), ("set.mli", 288, 10922, 10953), 0), 0, Tag1 ("Stdlib__Set", 41)), 0); (("of_list", 2042), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 2003)), 0, (0)), 100000000, 0, -947)], (0)), 100000000, 0, -946), (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -945), 0), 100000000, 0, -944), 0, (("set.mli", 292, 11017, 11021), ("set.mli", 292, 11017, 11047), 0), 0, Tag1 ("Stdlib__Set", 42)), 0); (("to_seq_from", 2043), ((Tag1 (0, (Tag3 ((("elt", 2003)), 0, (0)), 100000000, 0, -943), (Tag1 (0, (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -942), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2003)), 0, (0)), 100000000, 0, -941)], (0)), 100000000, 0, -940), 0), 100000000, 0, -939), 0), 100000000, 0, -938), 0, (("set.mli", 298, 11268, 11272), ("set.mli", 298, 11268, 11311), 0), 0, Tag1 ("Stdlib__Set", 43)), 0); (("to_seq", 2044), ((Tag1 (0, (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -937), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2003)), 0, (0)), 100000000, 0, -936)], (0)), 100000000, 0, -935), 0), 100000000, 0, -934), 0, (("set.mli", 303, 11453, 11457), ("set.mli", 303, 11453, 11484), 0), 0, Tag1 ("Stdlib__Set", 44)), 0); (("to_rev_seq", 2045), ((Tag1 (0, (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -933), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2003)), 0, (0)), 100000000, 0, -932)], (0)), 100000000, 0, -931), 0), 100000000, 0, -930), 0, (("set.mli", 307, 11562, 11566), ("set.mli", 307, 11562, 11597), 0), 0, Tag1 ("Stdlib__Set", 45)), 0); (("add_seq", 2046), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2003)), 0, (0)), 100000000, 0, -929)], (0)), 100000000, 0, -928), (Tag1 (0, (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -927), (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -926), 0), 100000000, 0, -925), 0), 100000000, 0, -924), 0, (("set.mli", 311, 11676, 11680), ("set.mli", 311, 11676, 11713), 0), 0, Tag1 ("Stdlib__Set", 46)), 0); (("of_seq", 2047), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2003)), 0, (0)), 100000000, 0, -923)], (0)), 100000000, 0, -922), (Tag3 ((("t", 2004)), 0, (0)), 100000000, 0, -921), 0), 100000000, 0, -920), 0, (("set.mli", 315, 11791, 11795), ("set.mli", 315, 11791, 11822), 0), 0, Tag1 ("Stdlib__Set", 47)), 0)]), 0, (("stm/dag.mli", 14, 709, 711), ("stm/dag.mli", 14, 709, 754), 0), Tag1 ("Dag", 2)), 0, 0); Tag1 (("t", 1987), ([((("edge")), 100000000, 0, -916); ((("info")), 100000000, 0, -917); ((("cdata")), 100000000, 0, -918)], 3, 0, 1, 0, [7; 7; 7], [2; 2; 2], 0, 0, (("stm/dag.mli", 16, 756, 758), ("stm/dag.mli", 16, 756, 785), 0), 0, 0, 0, Tag1 ("Dag", 3)), 1, 0); (("empty", 1988), ((Tag3 ((("t", 1987)), [((("e")), 100000000, 0, -913); ((("i")), 100000000, 0, -914); ((("d")), 100000000, 0, -915)], (0)), 100000000, 0, -912), 0, (("stm/dag.mli", 18, 787, 789), ("stm/dag.mli", 18, 787, 813), 0), 0, Tag1 ("Dag", 4)), 0); (("add_edge", 1989), ((Tag1 (0, (Tag3 ((("t", 1987)), [((("e")), 100000000, 0, -906); ((("i")), 100000000, 0, -907); ((("d")), 100000000, 0, -908)], (0)), 100000000, 0, -911), (Tag1 (0, (Tag3 ((("node", 1985)), 0, (0)), 100000000, 0, -910), (Tag1 (0, ((("e")), 100000000, 0, -906), (Tag1 (0, (Tag3 ((("node", 1985)), 0, (0)), 100000000, 0, -909), (Tag3 ((("t", 1987)), [((("e")), 100000000, 0, -906); ((("i")), 100000000, 0, -907); ((("d")), 100000000, 0, -908)], (0)), 100000000, 0, -905), 0), 100000000, 0, -904), 0), 100000000, 0, -903), 0), 100000000, 0, -902), 0), 100000000, 0, -901), 0, (("stm/dag.mli", 20, 815, 817), ("stm/dag.mli", 20, 815, 882), 0), 0, Tag1 ("Dag", 5)), 0); (("from_node", 1990), ((Tag1 (0, (Tag3 ((("t", 1987)), [((("e")), 100000000, 0, -896); ((("i")), 100000000, 0, -899); ((("d")), 100000000, 0, -900)], (0)), 100000000, 0, -898), (Tag1 (0, (Tag3 ((("node", 1985)), 0, (0)), 100000000, 0, -897), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("node", 1985)), 0, (0)), 100000000, 0, -895); ((("e")), 100000000, 0, -896)]), 100000000, 0, -894)], (0)), 100000000, 0, -893), 0), 100000000, 0, -892), 0), 100000000, 0, -891), 0, (("stm/dag.mli", 21, 883, 885), ("stm/dag.mli", 21, 883, 941), 0), 0, Tag1 ("Dag", 6)), 0); (("mem", 1991), ((Tag1 (0, (Tag3 ((("t", 1987)), [((("e")), 100000000, 0, -888); ((("i")), 100000000, 0, -889); ((("d")), 100000000, 0, -890)], (0)), 100000000, 0, -887), (Tag1 (0, (Tag3 ((("node", 1985)), 0, (0)), 100000000, 0, -886), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -885), 0), 100000000, 0, -884), 0), 100000000, 0, -883), 0, (("stm/dag.mli", 22, 942, 944), ("stm/dag.mli", 22, 942, 982), 0), 0, Tag1 ("Dag", 7)), 0); (("del_edge", 1992), ((Tag1 (0, (Tag3 ((("t", 1987)), [((("e")), 100000000, 0, -877); ((("i")), 100000000, 0, -878); ((("d")), 100000000, 0, -879)], (0)), 100000000, 0, -882), (Tag1 (0, (Tag3 ((("node", 1985)), 0, (0)), 100000000, 0, -881), (Tag1 (0, (Tag3 ((("node", 1985)), 0, (0)), 100000000, 0, -880), (Tag3 ((("t", 1987)), [((("e")), 100000000, 0, -877); ((("i")), 100000000, 0, -878); ((("d")), 100000000, 0, -879)], (0)), 100000000, 0, -876), 0), 100000000, 0, -875), 0), 100000000, 0, -874), 0), 100000000, 0, -873), 0, (("stm/dag.mli", 23, 983, 985), ("stm/dag.mli", 23, 983, 1044), 0), 0, Tag1 ("Dag", 8)), 0); (("del_nodes", 1993), ((Tag1 (0, (Tag3 ((("t", 1987)), [((("e")), 100000000, 0, -868); ((("i")), 100000000, 0, -869); ((("d")), 100000000, 0, -870)], (0)), 100000000, 0, -872), (Tag1 (0, (Tag3 (Tag1 ((("NodeSet", 1986)), "t"), 0, (0)), 100000000, 0, -871), (Tag3 ((("t", 1987)), [((("e")), 100000000, 0, -868); ((("i")), 100000000, 0, -869); ((("d")), 100000000, 0, -870)], (0)), 100000000, 0, -867), 0), 100000000, 0, -866), 0), 100000000, 0, -865), 0, (("stm/dag.mli", 24, 1045, 1047), ("stm/dag.mli", 24, 1045, 1105), 0), 0, Tag1 ("Dag", 9)), 0); (("all_nodes", 1994), ((Tag1 (0, (Tag3 ((("t", 1987)), [((("e")), 100000000, 0, -862); ((("i")), 100000000, 0, -863); ((("d")), 100000000, 0, -864)], (0)), 100000000, 0, -861), (Tag3 (Tag1 ((("NodeSet", 1986)), "t"), 0, (0)), 100000000, 0, -860), 0), 100000000, 0, -859), 0, (("stm/dag.mli", 25, 1106, 1108), ("stm/dag.mli", 25, 1106, 1149), 0), 0, Tag1 ("Dag", 10)), 0); (("get_info", 1995), ((Tag1 (0, (Tag3 ((("t", 1987)), [((("e")), 100000000, 0, -857); ((("i")), 100000000, 0, -854); ((("d")), 100000000, 0, -858)], (0)), 100000000, 0, -856), (Tag1 (0, (Tag3 ((("node", 1985)), 0, (0)), 100000000, 0, -855), (Tag3 ((Tag3 ("option", 10)), [((("i")), 100000000, 0, -854)], (0)), 100000000, 0, -853), 0), 100000000, 0, -852), 0), 100000000, 0, -851), 0, (("stm/dag.mli", 27, 1151, 1153), ("stm/dag.mli", 27, 1151, 1201), 0), 0, Tag1 ("Dag", 11)), 0); (("set_info", 1996), ((Tag1 (0, (Tag3 ((("t", 1987)), [((("e")), 100000000, 0, -846); ((("i")), 100000000, 0, -847); ((("d")), 100000000, 0, -848)], (0)), 100000000, 0, -850), (Tag1 (0, (Tag3 ((("node", 1985)), 0, (0)), 100000000, 0, -849), (Tag1 (0, ((("i")), 100000000, 0, -847), (Tag3 ((("t", 1987)), [((("e")), 100000000, 0, -846); ((("i")), 100000000, 0, -847); ((("d")), 100000000, 0, -848)], (0)), 100000000, 0, -845), 0), 100000000, 0, -844), 0), 100000000, 0, -843), 0), 100000000, 0, -842), 0, (("stm/dag.mli", 28, 1202, 1204), ("stm/dag.mli", 28, 1202, 1261), 0), 0, Tag1 ("Dag", 12)), 0); (("clear_info", 1997), ((Tag1 (0, (Tag3 ((("t", 1987)), [((("e")), 100000000, 0, -837); ((("i")), 100000000, 0, -838); ((("d")), 100000000, 0, -839)], (0)), 100000000, 0, -841), (Tag1 (0, (Tag3 ((("node", 1985)), 0, (0)), 100000000, 0, -840), (Tag3 ((("t", 1987)), [((("e")), 100000000, 0, -837); ((("i")), 100000000, 0, -838); ((("d")), 100000000, 0, -839)], (0)), 100000000, 0, -836), 0), 100000000, 0, -835), 0), 100000000, 0, -834), 0, (("stm/dag.mli", 29, 1262, 1264), ("stm/dag.mli", 29, 1262, 1317), 0), 0, Tag1 ("Dag", 13)), 0); Tag3 (("Property", 1998), 0, (Tag1 ([Tag1 (("t", 2048), ([((("d")), 100000000, 0, -1171)], 1, 0, 1, 0, [7], [2], 0, 0, (("stm/dag.mli", 36, 1552, 1556), ("stm/dag.mli", 36, 1552, 1565), 0), 0, 0, 0, Tag1 ("Dag", 14)), 1, 0); (("equal", 2049), ((Tag1 (0, (Tag3 ((("t", 2048)), [((("d")), 100000000, 0, -1169)], (0)), 100000000, 0, -1170), (Tag1 (0, (Tag3 ((("t", 2048)), [((("d")), 100000000, 0, -1169)], (0)), 100000000, 0, -1168), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1167), 0), 100000000, 0, -1166), 0), 100000000, 0, -1165), 0, (("stm/dag.mli", 37, 1566, 1570), ("stm/dag.mli", 37, 1566, 1602), 0), 0, Tag1 ("Dag", 15)), 0); (("compare", 2050), ((Tag1 (0, (Tag3 ((("t", 2048)), [((("d")), 100000000, 0, -1163)], (0)), 100000000, 0, -1164), (Tag1 (0, (Tag3 ((("t", 2048)), [((("d")), 100000000, 0, -1163)], (0)), 100000000, 0, -1162), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1161), 0), 100000000, 0, -1160), 0), 100000000, 0, -1159), 0, (("stm/dag.mli", 38, 1603, 1607), ("stm/dag.mli", 38, 1603, 1640), 0), 0, Tag1 ("Dag", 16)), 0); (("to_string", 2051), ((Tag1 (0, (Tag3 ((("t", 2048)), [((("d")), 100000000, 0, -1158)], (0)), 100000000, 0, -1157), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1156), 0), 100000000, 0, -1155), 0, (("stm/dag.mli", 39, 1641, 1645), ("stm/dag.mli", 39, 1641, 1675), 0), 0, Tag1 ("Dag", 17)), 0); (("data", 2052), ((Tag1 (0, (Tag3 ((("t", 2048)), [((("d")), 100000000, 0, -1153)], (0)), 100000000, 0, -1154), ((("d")), 100000000, 0, -1153), 0), 100000000, 0, -1152), 0, (("stm/dag.mli", 40, 1676, 1680), ("stm/dag.mli", 40, 1676, 1701), 0), 0, Tag1 ("Dag", 18)), 0); (("having_it", 2053), ((Tag1 (0, (Tag3 ((("t", 2048)), [((("d")), 100000000, 0, -1151)], (0)), 100000000, 0, -1150), (Tag3 (Tag1 ((("NodeSet", 1986)), "t"), 0, (0)), 100000000, 0, -1149), 0), 100000000, 0, -1148), 0, (("stm/dag.mli", 41, 1702, 1706), ("stm/dag.mli", 41, 1702, 1739), 0), 0, Tag1 ("Dag", 19)), 0)]), 0, (("stm/dag.mli", 34, 1526, 1528), ("stm/dag.mli", 42, 1740, 1745), 0), Tag1 ("Dag", 20)), 0, 0); (("create_property", 1999), ((Tag1 (0, (Tag3 ((("t", 1987)), [((("e")), 100000000, 0, -828); ((("i")), 100000000, 0, -829); ((("d")), 100000000, 0, -830)], (0)), 100000000, 0, -833), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("node", 1985)), 0, (0)), 100000000, 0, -832)], (0)), 100000000, 0, -831), (Tag1 (0, ((("d")), 100000000, 0, -830), (Tag3 ((("t", 1987)), [((("e")), 100000000, 0, -828); ((("i")), 100000000, 0, -829); ((("d")), 100000000, 0, -830)], (0)), 100000000, 0, -827), 0), 100000000, 0, -826), 0), 100000000, 0, -825), 0), 100000000, 0, -824), 0, (("stm/dag.mli", 44, 1747, 1749), ("stm/dag.mli", 44, 1747, 1818), 0), 0, Tag1 ("Dag", 21)), 0); (("property_of", 2000), ((Tag1 (0, (Tag3 ((("t", 1987)), [((("e")), 100000000, 0, -822); ((("i")), 100000000, 0, -823); ((("d")), 100000000, 0, -819)], (0)), 100000000, 0, -821), (Tag1 (0, (Tag3 ((("node", 1985)), 0, (0)), 100000000, 0, -820), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Property", 1998)), "t"), [((("d")), 100000000, 0, -819)], (0)), 100000000, 0, -818)], (0)), 100000000, 0, -817), 0), 100000000, 0, -816), 0), 100000000, 0, -815), 0, (("stm/dag.mli", 45, 1819, 1821), ("stm/dag.mli", 45, 1819, 1881), 0), 0, Tag1 ("Dag", 22)), 0); (("del_property", 2001), ((Tag1 (0, (Tag3 ((("t", 1987)), [((("e")), 100000000, 0, -810); ((("i")), 100000000, 0, -811); ((("d")), 100000000, 0, -812)], (0)), 100000000, 0, -814), (Tag1 (0, (Tag3 (Tag1 ((("Property", 1998)), "t"), [((("d")), 100000000, 0, -812)], (0)), 100000000, 0, -813), (Tag3 ((("t", 1987)), [((("e")), 100000000, 0, -810); ((("i")), 100000000, 0, -811); ((("d")), 100000000, 0, -812)], (0)), 100000000, 0, -809), 0), 100000000, 0, -808), 0), 100000000, 0, -807), 0, (("stm/dag.mli", 46, 1882, 1884), ("stm/dag.mli", 46, 1882, 1948), 0), 0, Tag1 ("Dag", 23)), 0); (("iter", 2002), ((Tag1 (0, (Tag3 ((("t", 1987)), [((("e")), 100000000, 0, -799); ((("i")), 100000000, 0, -801); ((("d")), 100000000, 0, -804)], (0)), 100000000, 0, -806), (Tag1 (0, (Tag1 (0, (Tag3 ((("node", 1985)), 0, (0)), 100000000, 0, -805), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Property", 1998)), "t"), [((("d")), 100000000, 0, -804)], (0)), 100000000, 0, -803)], (0)), 100000000, 0, -802), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("i")), 100000000, 0, -801)], (0)), 100000000, 0, -800), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("node", 1985)), 0, (0)), 100000000, 0, -798); ((("e")), 100000000, 0, -799)]), 100000000, 0, -797)], (0)), 100000000, 0, -796), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -795), 0), 100000000, 0, -794), 0), 100000000, 0, -793), 0), 100000000, 0, -792), 0), 100000000, 0, -791), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -790), 0), 100000000, 0, -789), 0), 100000000, 0, -788), 0, (("stm/dag.mli", 48, 1950, 1952), ("stm/dag.mli", 50, 2027, 2066), 0), 0, Tag1 ("Dag", 24)), 0)]), 0, (("stm/vcs.mli", 86, 3038, 3040), ("stm/vcs.mli", 86, 3038, 3078), 0), Tag1 ("Vcs", 32)), 0, 0); (("dag", 1973), ((Tag1 (0, (Tag3 ((("t", 1958)), [((("diff")), 100000000, 0, -632); ((("info")), 100000000, 0, -633); ((("cdata")), 100000000, 0, -634)], (0)), 100000000, 0, -635), (Tag3 (Tag1 ((("Dag", 1972)), "t"), [((("diff")), 100000000, 0, -632); ((("info")), 100000000, 0, -633); ((("cdata")), 100000000, 0, -634)], (0)), 100000000, 0, -631), 0), 100000000, 0, -630), 0, (("stm/vcs.mli", 87, 3079, 3081), ("stm/vcs.mli", 87, 3079, 3143), 0), 0, Tag1 ("Vcs", 33)), 0); (("create_property", 1974), ((Tag1 (0, (Tag3 ((("t", 1958)), [((("e")), 100000000, 0, -624); ((("i")), 100000000, 0, -625); ((("c")), 100000000, 0, -626)], (0)), 100000000, 0, -629), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("id", 1954)), 0, (0)), 100000000, 0, -628)], (0)), 100000000, 0, -627), (Tag1 (0, ((("c")), 100000000, 0, -626), (Tag3 ((("t", 1958)), [((("e")), 100000000, 0, -624); ((("i")), 100000000, 0, -625); ((("c")), 100000000, 0, -626)], (0)), 100000000, 0, -623), 0), 100000000, 0, -622), 0), 100000000, 0, -621), 0), 100000000, 0, -620), 0, (("stm/vcs.mli", 91, 3248, 3250), ("stm/vcs.mli", 91, 3248, 3317), 0), 0, Tag1 ("Vcs", 34)), 0); (("property_of", 1975), ((Tag1 (0, (Tag3 ((("t", 1958)), [((("e")), 100000000, 0, -618); ((("i")), 100000000, 0, -619); ((("c")), 100000000, 0, -615)], (0)), 100000000, 0, -617), (Tag1 (0, (Tag3 ((("id", 1954)), 0, (0)), 100000000, 0, -616), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((("Dag", 1972)), "Property"), "t"), [((("c")), 100000000, 0, -615)], (0)), 100000000, 0, -614)], (0)), 100000000, 0, -613), 0), 100000000, 0, -612), 0), 100000000, 0, -611), 0, (("stm/vcs.mli", 92, 3318, 3320), ("stm/vcs.mli", 92, 3318, 3382), 0), 0, Tag1 ("Vcs", 35)), 0); (("delete_property", 1976), ((Tag1 (0, (Tag3 ((("t", 1958)), [((("e")), 100000000, 0, -606); ((("i")), 100000000, 0, -607); ((("c")), 100000000, 0, -608)], (0)), 100000000, 0, -610), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((("Dag", 1972)), "Property"), "t"), [((("c")), 100000000, 0, -608)], (0)), 100000000, 0, -609), (Tag3 ((("t", 1958)), [((("e")), 100000000, 0, -606); ((("i")), 100000000, 0, -607); ((("c")), 100000000, 0, -608)], (0)), 100000000, 0, -605), 0), 100000000, 0, -604), 0), 100000000, 0, -603), 0, (("stm/vcs.mli", 93, 3383, 3385), ("stm/vcs.mli", 93, 3383, 3456), 0), 0, Tag1 ("Vcs", 36)), 0); (("gc", 1977), ((Tag1 (0, (Tag3 ((("t", 1958)), [((("e")), 100000000, 0, -598); ((("info")), 100000000, 0, -599); ((("c")), 100000000, 0, -600)], (0)), 100000000, 0, -602), (Tag2 ([(Tag3 ((("t", 1958)), [((("e")), 100000000, 0, -598); ((("info")), 100000000, 0, -599); ((("c")), 100000000, 0, -600)], (0)), 100000000, 0, -597); (Tag3 (Tag1 (Tag1 ((("Dag", 1972)), "NodeSet"), "t"), 0, (0)), 100000000, 0, -601)]), 100000000, 0, -596), 0), 100000000, 0, -595), 0, (("stm/vcs.mli", 96, 3513, 3515), ("stm/vcs.mli", 96, 3513, 3574), 0), 0, Tag1 ("Vcs", 37)), 0); (("reachable", 1978), ((Tag1 (0, (Tag3 ((("t", 1958)), [((("e")), 100000000, 0, -592); ((("info")), 100000000, 0, -593); ((("c")), 100000000, 0, -594)], (0)), 100000000, 0, -591), (Tag1 (0, (Tag3 ((("id", 1954)), 0, (0)), 100000000, 0, -590), (Tag3 (Tag1 (Tag1 ((("Dag", 1972)), "NodeSet"), "t"), 0, (0)), 100000000, 0, -589), 0), 100000000, 0, -588), 0), 100000000, 0, -587), 0, (("stm/vcs.mli", 97, 3575, 3577), ("stm/vcs.mli", 97, 3575, 3631), 0), 0, Tag1 ("Vcs", 38)), 0)]))), 0, (("stm/vcs.mli", 102, 3639, 3639), ("stm/vcs.mli", 107, 3802, 3833), 0), Tag1 ("Vcs", 47)), 0, 0)], "Vcs", [("Vcs", ("\025K,`\234d\237\134\185\143\007k\243\231h,")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Dag", ("[\254\239?[G\196\209\2210\214\164l\000\t\185")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

    end

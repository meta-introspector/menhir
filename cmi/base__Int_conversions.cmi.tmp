val int_to_int32 : int -> int32 option
val int_to_int32_exn : int -> int32
val int_to_int32_trunc : int -> int32
val int_to_int64 : int -> int64
val int_to_nativeint : int -> nativeint
val int32_to_int : int32 -> int option
val int32_to_int_exn : int32 -> int
val int32_to_int_trunc : int32 -> int
val int32_to_int64 : int32 -> int64
val int32_to_nativeint : int32 -> nativeint
val int64_to_int : int64 -> int option
val int64_to_int_exn : int64 -> int
val int64_to_int_trunc : int64 -> int
val int64_to_int32 : int64 -> int32 option
val int64_to_int32_exn : int64 -> int32
val int64_to_int32_trunc : int64 -> int32
val int64_to_nativeint : int64 -> nativeint option
val int64_to_nativeint_exn : int64 -> nativeint
val int64_to_nativeint_trunc : int64 -> nativeint
val int64_fit_on_int63_exn : int64 -> unit
val int64_is_representable_as_int63 : int64 -> bool
val nativeint_to_int : nativeint -> int option
val nativeint_to_int_exn : nativeint -> int
val nativeint_to_int_trunc : nativeint -> int
val nativeint_to_int32 : nativeint -> int32 option
val nativeint_to_int32_exn : nativeint -> int32
val nativeint_to_int32_trunc : nativeint -> int32
val nativeint_to_int64 : nativeint -> int64
val num_bits_int : int
val num_bits_int32 : int
val num_bits_int64 : int
val num_bits_nativeint : int
module Make :
  functor (I : sig type t val to_string : t -> string end) ->
    sig
      val to_string_hum : ?delimiter:char -> I.t -> string
      val sexp_of_t : I.t -> Base__.Sexp.t
    end
module Make_hex :
  functor
    (I : sig
           type t
           val compare : t Base__Ppx_compare_lib.compare
           val hash_fold_t : t Base__Ppx_hash_lib.hash_fold
           val hash : t -> Base__Ppx_hash_lib.Std.Hash.hash_value
           val to_string : t -> string
           val of_string : string -> t
           val zero : t
           val ( < ) : t -> t -> bool
           val neg : t -> t
           val module_name : string
         end)
    ->
    sig
      module Hex :
        sig
          type nonrec t = I.t
          val t_of_sexp : Sexplib0__.Sexp.t -> t
          val sexp_of_t : t -> Sexplib0__.Sexp.t
          val t_sexp_grammar : t Sexplib0.Sexp_grammar.t
          val compare : t Base__Ppx_compare_lib.compare
          val hash_fold_t : t Base__Ppx_hash_lib.hash_fold
          val hash : t -> Base__Ppx_hash_lib.Std.Hash.hash_value
          val of_string : string -> t
          val to_string : t -> string
          val to_string_hum : ?delimiter:char -> t -> string
        end
    end
val sexp_of_int_style : [ `No_underscores | `Underscores ] Base__.Import.ref
val insert_delimiter_every :
  string -> delimiter:char -> chars_per_delimiter:int -> string
val insert_delimiter : string -> delimiter:char -> string
("DEBUG:rule", [(("int_to_int32", 1039), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -114), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -113)], (0)), 100000000, 0, -112), 0), 100000000, 0, -111), 0, (("src/int_conversions.mli", 37, 967, 967), ("src/int_conversions.mli", 37, 967, 1005), 0), 0, Tag1 ("Base__Int_conversions", 0)), 0); (("int_to_int32_exn", 1040), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -110), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -109), 0), 100000000, 0, -108), 0, (("src/int_conversions.mli", 39, 1007, 1007), ("src/int_conversions.mli", 39, 1007, 1042), 0), 0, Tag1 ("Base__Int_conversions", 1)), 0); (("int_to_int32_trunc", 1041), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -107), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -106), 0), 100000000, 0, -105), 0, (("src/int_conversions.mli", 40, 1043, 1043), ("src/int_conversions.mli", 40, 1043, 1080), 0), 0, Tag1 ("Base__Int_conversions", 2)), 0); (("int_to_int64", 1042), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -104), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -103), 0), 100000000, 0, -102), 0, (("src/int_conversions.mli", 41, 1081, 1081), ("src/int_conversions.mli", 41, 1081, 1112), 0), 0, Tag1 ("Base__Int_conversions", 3)), 0); (("int_to_nativeint", 1043), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -101), (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -100), 0), 100000000, 0, -99), 0, (("src/int_conversions.mli", 42, 1113, 1113), ("src/int_conversions.mli", 42, 1113, 1152), 0), 0, Tag1 ("Base__Int_conversions", 4)), 0); (("int32_to_int", 1044), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -98), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -97)], (0)), 100000000, 0, -96), 0), 100000000, 0, -95), 0, (("src/int_conversions.mli", 43, 1153, 1153), ("src/int_conversions.mli", 43, 1153, 1191), 0), 0, Tag1 ("Base__Int_conversions", 5)), 0); (("int32_to_int_exn", 1045), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -94), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -93), 0), 100000000, 0, -92), 0, (("src/int_conversions.mli", 44, 1192, 1192), ("src/int_conversions.mli", 44, 1192, 1227), 0), 0, Tag1 ("Base__Int_conversions", 6)), 0); (("int32_to_int_trunc", 1046), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -91), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -90), 0), 100000000, 0, -89), 0, (("src/int_conversions.mli", 45, 1228, 1228), ("src/int_conversions.mli", 45, 1228, 1265), 0), 0, Tag1 ("Base__Int_conversions", 7)), 0); (("int32_to_int64", 1047), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -88), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -87), 0), 100000000, 0, -86), 0, (("src/int_conversions.mli", 46, 1266, 1266), ("src/int_conversions.mli", 46, 1266, 1301), 0), 0, Tag1 ("Base__Int_conversions", 8)), 0); (("int32_to_nativeint", 1048), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -85), (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -84), 0), 100000000, 0, -83), 0, (("src/int_conversions.mli", 47, 1302, 1302), ("src/int_conversions.mli", 47, 1302, 1345), 0), 0, Tag1 ("Base__Int_conversions", 9)), 0); (("int64_to_int", 1049), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -82), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -81)], (0)), 100000000, 0, -80), 0), 100000000, 0, -79), 0, (("src/int_conversions.mli", 48, 1346, 1346), ("src/int_conversions.mli", 48, 1346, 1384), 0), 0, Tag1 ("Base__Int_conversions", 10)), 0); (("int64_to_int_exn", 1050), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -78), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -77), 0), 100000000, 0, -76), 0, (("src/int_conversions.mli", 49, 1385, 1385), ("src/int_conversions.mli", 49, 1385, 1420), 0), 0, Tag1 ("Base__Int_conversions", 11)), 0); (("int64_to_int_trunc", 1051), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -75), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -74), 0), 100000000, 0, -73), 0, (("src/int_conversions.mli", 50, 1421, 1421), ("src/int_conversions.mli", 50, 1421, 1458), 0), 0, Tag1 ("Base__Int_conversions", 12)), 0); (("int64_to_int32", 1052), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -72), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -71)], (0)), 100000000, 0, -70), 0), 100000000, 0, -69), 0, (("src/int_conversions.mli", 51, 1459, 1459), ("src/int_conversions.mli", 51, 1459, 1501), 0), 0, Tag1 ("Base__Int_conversions", 13)), 0); (("int64_to_int32_exn", 1053), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -68), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -67), 0), 100000000, 0, -66), 0, (("src/int_conversions.mli", 52, 1502, 1502), ("src/int_conversions.mli", 52, 1502, 1541), 0), 0, Tag1 ("Base__Int_conversions", 14)), 0); (("int64_to_int32_trunc", 1054), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -65), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -64), 0), 100000000, 0, -63), 0, (("src/int_conversions.mli", 53, 1542, 1542), ("src/int_conversions.mli", 53, 1542, 1583), 0), 0, Tag1 ("Base__Int_conversions", 15)), 0); (("int64_to_nativeint", 1055), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -62), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -61)], (0)), 100000000, 0, -60), 0), 100000000, 0, -59), 0, (("src/int_conversions.mli", 54, 1584, 1584), ("src/int_conversions.mli", 54, 1584, 1634), 0), 0, Tag1 ("Base__Int_conversions", 16)), 0); (("int64_to_nativeint_exn", 1056), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -58), (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -57), 0), 100000000, 0, -56), 0, (("src/int_conversions.mli", 55, 1635, 1635), ("src/int_conversions.mli", 55, 1635, 1682), 0), 0, Tag1 ("Base__Int_conversions", 17)), 0); (("int64_to_nativeint_trunc", 1057), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -55), (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -54), 0), 100000000, 0, -53), 0, (("src/int_conversions.mli", 56, 1683, 1683), ("src/int_conversions.mli", 56, 1683, 1732), 0), 0, Tag1 ("Base__Int_conversions", 18)), 0); (("int64_fit_on_int63_exn", 1058), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -52), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -51), 0), 100000000, 0, -50), 0, (("src/int_conversions.mli", 57, 1733, 1733), ("src/int_conversions.mli", 57, 1733, 1775), 0), 0, Tag1 ("Base__Int_conversions", 19)), 0); (("int64_is_representable_as_int63", 1059), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -49), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -48), 0), 100000000, 0, -47), 0, (("src/int_conversions.mli", 58, 1776, 1776), ("src/int_conversions.mli", 58, 1776, 1827), 0), 0, Tag1 ("Base__Int_conversions", 20)), 0); (("nativeint_to_int", 1060), ((Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -46), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -45)], (0)), 100000000, 0, -44), 0), 100000000, 0, -43), 0, (("src/int_conversions.mli", 59, 1828, 1828), ("src/int_conversions.mli", 59, 1828, 1874), 0), 0, Tag1 ("Base__Int_conversions", 21)), 0); (("nativeint_to_int_exn", 1061), ((Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -42), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -41), 0), 100000000, 0, -40), 0, (("src/int_conversions.mli", 60, 1875, 1875), ("src/int_conversions.mli", 60, 1875, 1918), 0), 0, Tag1 ("Base__Int_conversions", 22)), 0); (("nativeint_to_int_trunc", 1062), ((Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -39), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -38), 0), 100000000, 0, -37), 0, (("src/int_conversions.mli", 61, 1919, 1919), ("src/int_conversions.mli", 61, 1919, 1964), 0), 0, Tag1 ("Base__Int_conversions", 23)), 0); (("nativeint_to_int32", 1063), ((Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -36), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -35)], (0)), 100000000, 0, -34), 0), 100000000, 0, -33), 0, (("src/int_conversions.mli", 62, 1965, 1965), ("src/int_conversions.mli", 62, 1965, 2015), 0), 0, Tag1 ("Base__Int_conversions", 24)), 0); (("nativeint_to_int32_exn", 1064), ((Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -32), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -31), 0), 100000000, 0, -30), 0, (("src/int_conversions.mli", 63, 2016, 2016), ("src/int_conversions.mli", 63, 2016, 2063), 0), 0, Tag1 ("Base__Int_conversions", 25)), 0); (("nativeint_to_int32_trunc", 1065), ((Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -29), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -28), 0), 100000000, 0, -27), 0, (("src/int_conversions.mli", 64, 2064, 2064), ("src/int_conversions.mli", 64, 2064, 2113), 0), 0, Tag1 ("Base__Int_conversions", 26)), 0); (("nativeint_to_int64", 1066), ((Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -26), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -25), 0), 100000000, 0, -24), 0, (("src/int_conversions.mli", 65, 2114, 2114), ("src/int_conversions.mli", 65, 2114, 2157), 0), 0, Tag1 ("Base__Int_conversions", 27)), 0); (("num_bits_int", 1067), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -23), 0, (("src/int_conversions.mli", 66, 2158, 2158), ("src/int_conversions.mli", 66, 2158, 2180), 0), 0, Tag1 ("Base__Int_conversions", 28)), 0); (("num_bits_int32", 1068), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -22), 0, (("src/int_conversions.mli", 67, 2181, 2181), ("src/int_conversions.mli", 67, 2181, 2205), 0), 0, Tag1 ("Base__Int_conversions", 29)), 0); (("num_bits_int64", 1069), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -21), 0, (("src/int_conversions.mli", 68, 2206, 2206), ("src/int_conversions.mli", 68, 2206, 2230), 0), 0, Tag1 ("Base__Int_conversions", 30)), 0); (("num_bits_nativeint", 1070), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -20), 0, (("src/int_conversions.mli", 69, 2231, 2231), ("src/int_conversions.mli", 69, 2231, 2259), 0), 0, Tag1 ("Base__Int_conversions", 31)), 0); Tag3 (("Make", 1071), 0, (Tag2 (((("I", 1078)), Tag1 ([Tag1 (("t", 1079), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/int_conversions.mli", 73, 2343, 2347), ("src/int_conversions.mli", 73, 2343, 2353), 0), 0, 0, 0, Tag1 ("Base__Int_conversions", 32)), 1, 0); (("to_string", 1080), ((Tag1 (0, (Tag3 ((("t", 1079)), 0, (0)), 100000000, 0, -117), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -116), 0), 100000000, 0, -115), 0, (("src/int_conversions.mli", 75, 2355, 2359), ("src/int_conversions.mli", 75, 2355, 2386), 0), 0, Tag1 ("Base__Int_conversions", 33)), 0)])), Tag1 ([(("to_string_hum", 1081), ((Tag1 (Tag1 ("delimiter"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -126)], (0)), 100000000, 0, -125), (Tag1 (0, (Tag3 (Tag1 ((("I", 1078)), "t"), 0, (0)), 100000000, 0, -124), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -123), 0), 100000000, 0, -122), 0), 100000000, 0, -121), 0, (("src/int_conversions.mli", 77, 2400, 2402), ("src/int_conversions.mli", 77, 2400, 2479), 0), 0, Tag1 ("Base__Int_conversions", 35)), 0); (("sexp_of_t", 1082), ((Tag1 (0, (Tag3 (Tag1 ((("I", 1078)), "t"), 0, (0)), 100000000, 0, -120), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -119), 0), 100000000, 0, -118), 0, (("src/int_conversions.mli", 78, 2480, 2482), ("src/int_conversions.mli", 78, 2480, 2511), 0), 0, Tag1 ("Base__Int_conversions", 36)), 0)])), 0, (("src/int_conversions.mli", 72, 2322, 2322), ("src/int_conversions.mli", 79, 2512, 2515), 0), Tag1 ("Base__Int_conversions", 37)), 0, 0); Tag3 (("Make_hex", 1072), 0, (Tag2 (((("I", 1077)), Tag1 ([Tag1 (("t", 1083), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/int_conversions.mli", 84, 2704, 2708), ("src/int_conversions.mli", 84, 2704, 2748), 0), [(("deriving_inline", (("src/int_conversions.mli", 84, 2704, 2718), ("src/int_conversions.mli", 84, 2704, 2733), 0)), ([([(Tag8 ([(((("compare"), (("src/int_conversions.mli", 84, 2704, 2734), ("src/int_conversions.mli", 84, 2704, 2741), 0))), (("src/int_conversions.mli", 84, 2704, 2734), ("src/int_conversions.mli", 84, 2704, 2741), 0), 0, 0); (((("hash"), (("src/int_conversions.mli", 84, 2704, 2743), ("src/int_conversions.mli", 84, 2704, 2747), 0))), (("src/int_conversions.mli", 84, 2704, 2743), ("src/int_conversions.mli", 84, 2704, 2747), 0), 0, 0)]), (("src/int_conversions.mli", 84, 2704, 2734), ("src/int_conversions.mli", 84, 2704, 2747), 0), 0, 0)], (("src/int_conversions.mli", 84, 2704, 2734), ("src/int_conversions.mli", 84, 2704, 2747), 0))]), (("src/int_conversions.mli", 84, 2704, 2715), ("src/int_conversions.mli", 84, 2704, 2748), 0))], 0, 0, Tag1 ("Base__Int_conversions", 38)), 1, 0); (("compare", 1084), ((Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "compare"), [(Tag3 ((("t", 1083)), 0, (0)), 100000000, 0, -149)], (0)), 100000000, 0, -148), 0, (("src/int_conversions.mli", 86, 2750, 2762), ("src/int_conversions.mli", 86, 2750, 2807), 0), 0, Tag1 ("Base__Ppx_compare_lib", 5)), 0); (("hash_fold_t", 1085), ((Tag3 (Tag1 ((Tag2 ("Base__Ppx_hash_lib")), "hash_fold"), [(Tag3 ((("t", 1083)), 0, (0)), 100000000, 0, -147)], (0)), 100000000, 0, -146), 0, (("src/int_conversions.mli", 87, 2808, 2820), ("src/int_conversions.mli", 87, 2808, 2860), 0), 0, Tag1 ("Base__Ppx_hash_lib", 4)), 0); (("hash", 1086), ((Tag1 (0, (Tag3 ((("t", 1083)), 0, (0)), 100000000, 0, -145), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__Ppx_hash_lib")), "Std"), "Hash"), "hash_value"), 0, (0)), 100000000, 0, -144), 0), 100000000, 0, -143), 0, (("src/int_conversions.mli", 87, 2808, 2820), ("src/int_conversions.mli", 87, 2808, 2860), 0), 0, Tag1 ("Base__Ppx_hash_lib", 5)), 0); (("to_string", 1087), ((Tag1 (0, (Tag3 ((("t", 1083)), 0, (0)), 100000000, 0, -142), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -141), 0), 100000000, 0, -140), 0, (("src/int_conversions.mli", 97, 3144, 3148), ("src/int_conversions.mli", 97, 3144, 3175), 0), 0, Tag1 ("Base__Int_conversions", 41)), 0); (("of_string", 1088), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -139), (Tag3 ((("t", 1083)), 0, (0)), 100000000, 0, -138), 0), 100000000, 0, -137), 0, (("src/int_conversions.mli", 99, 3177, 3181), ("src/int_conversions.mli", 99, 3177, 3208), 0), 0, Tag1 ("Base__Int_conversions", 42)), 0); (("zero", 1089), ((Tag3 ((("t", 1083)), 0, (0)), 100000000, 0, -136), 0, (("src/int_conversions.mli", 100, 3209, 3213), ("src/int_conversions.mli", 100, 3209, 3225), 0), 0, Tag1 ("Base__Int_conversions", 43)), 0); (("<", 1090), ((Tag1 (0, (Tag3 ((("t", 1083)), 0, (0)), 100000000, 0, -135), (Tag1 (0, (Tag3 ((("t", 1083)), 0, (0)), 100000000, 0, -134), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -133), 0), 100000000, 0, -132), 0), 100000000, 0, -131), 0, (("src/int_conversions.mli", 101, 3226, 3230), ("src/int_conversions.mli", 101, 3226, 3256), 0), 0, Tag1 ("Base__Int_conversions", 44)), 0); (("neg", 1091), ((Tag1 (0, (Tag3 ((("t", 1083)), 0, (0)), 100000000, 0, -130), (Tag3 ((("t", 1083)), 0, (0)), 100000000, 0, -129), 0), 100000000, 0, -128), 0, (("src/int_conversions.mli", 102, 3257, 3261), ("src/int_conversions.mli", 102, 3257, 3277), 0), 0, Tag1 ("Base__Int_conversions", 45)), 0); (("module_name", 1092), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -127), 0, (("src/int_conversions.mli", 103, 3278, 3282), ("src/int_conversions.mli", 103, 3278, 3306), 0), 0, Tag1 ("Base__Int_conversions", 46)), 0)])), Tag1 ([Tag3 (("Hex", 1093), 0, (Tag1 ([Tag1 (("t", 1094), (0, 0, 0, 1, ((Tag3 (Tag1 ((("I", 1077)), "t"), 0, (0)), 100000000, 0, -177)), 0, 0, 0, 0, (("src/int_conversions.mli", 104, 3307, 3316), ("src/int_conversions.mli", 104, 3307, 3351), 0), [(("deriving_inline", (("src/int_intf.ml", 44, 1730, 1755), ("src/int_intf.ml", 44, 1730, 1770), 0)), ([([(Tag8 ([(((("sexp"), (("src/int_intf.ml", 44, 1730, 1771), ("src/int_intf.ml", 44, 1730, 1775), 0))), (("src/int_intf.ml", 44, 1730, 1771), ("src/int_intf.ml", 44, 1730, 1775), 0), 0, 0); (((("sexp_grammar"), (("src/int_intf.ml", 44, 1730, 1777), ("src/int_intf.ml", 44, 1730, 1789), 0))), (("src/int_intf.ml", 44, 1730, 1777), ("src/int_intf.ml", 44, 1730, 1789), 0), 0, 0); (((("compare"), (("src/int_intf.ml", 44, 1730, 1791), ("src/int_intf.ml", 44, 1730, 1798), 0))), (("src/int_intf.ml", 44, 1730, 1791), ("src/int_intf.ml", 44, 1730, 1798), 0), 0, 0); (((("hash"), (("src/int_intf.ml", 44, 1730, 1800), ("src/int_intf.ml", 44, 1730, 1804), 0))), (("src/int_intf.ml", 44, 1730, 1800), ("src/int_intf.ml", 44, 1730, 1804), 0), 0, 0)]), (("src/int_intf.ml", 44, 1730, 1771), ("src/int_intf.ml", 44, 1730, 1804), 0), 0, 0)], (("src/int_intf.ml", 44, 1730, 1771), ("src/int_intf.ml", 44, 1730, 1804), 0))]), (("src/int_intf.ml", 44, 1730, 1752), ("src/int_intf.ml", 44, 1730, 1805), 0))], 0, 0, Tag1 ("Base__Int_intf", 8)), 0, 0); (("t_of_sexp", 1095), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -176), (Tag3 ((("t", 1094)), 0, (0)), 100000000, 0, -175), 0), 100000000, 0, -174), 0, (("src/int_conversions.mli", 104, 3307, 3316), ("src/int_conversions.mli", 104, 3307, 3351), 0), 0, Tag1 ("Sexplib0__Sexpable", 1)), 0); (("sexp_of_t", 1096), ((Tag1 (0, (Tag3 ((("t", 1094)), 0, (0)), 100000000, 0, -173), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -172), 0), 100000000, 0, -171), 0, (("src/int_conversions.mli", 104, 3307, 3316), ("src/int_conversions.mli", 104, 3307, 3351), 0), 0, Tag1 ("Sexplib0__Sexpable", 2)), 0); (("t_sexp_grammar", 1097), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("t", 1094)), 0, (0)), 100000000, 0, -170)], (0)), 100000000, 0, -169), 0, (("src/int_conversions.mli", 104, 3307, 3316), ("src/int_conversions.mli", 104, 3307, 3351), 0), 0, Tag1 ("Base__Int_intf", 11)), 0); (("compare", 1098), ((Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "compare"), [(Tag3 ((("t", 1094)), 0, (0)), 100000000, 0, -168)], (0)), 100000000, 0, -167), 0, (("src/int_conversions.mli", 104, 3307, 3316), ("src/int_conversions.mli", 104, 3307, 3351), 0), 0, Tag1 ("Base__Ppx_compare_lib", 5)), 0); (("hash_fold_t", 1099), ((Tag3 (Tag1 ((Tag2 ("Base__Ppx_hash_lib")), "hash_fold"), [(Tag3 ((("t", 1094)), 0, (0)), 100000000, 0, -166)], (0)), 100000000, 0, -165), 0, (("src/int_conversions.mli", 104, 3307, 3316), ("src/int_conversions.mli", 104, 3307, 3351), 0), 0, Tag1 ("Base__Ppx_hash_lib", 4)), 0); (("hash", 1100), ((Tag1 (0, (Tag3 ((("t", 1094)), 0, (0)), 100000000, 0, -164), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__Ppx_hash_lib")), "Std"), "Hash"), "hash_value"), 0, (0)), 100000000, 0, -163), 0), 100000000, 0, -162), 0, (("src/int_conversions.mli", 104, 3307, 3316), ("src/int_conversions.mli", 104, 3307, 3351), 0), 0, Tag1 ("Base__Ppx_hash_lib", 5)), 0); (("of_string", 1101), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -161), (Tag3 ((("t", 1094)), 0, (0)), 100000000, 0, -160), 0), 100000000, 0, -159), 0, (("src/int_conversions.mli", 104, 3307, 3316), ("src/int_conversions.mli", 104, 3307, 3351), 0), 0, Tag1 ("Base__Stringable", 1)), 0); (("to_string", 1102), ((Tag1 (0, (Tag3 ((("t", 1094)), 0, (0)), 100000000, 0, -158), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -157), 0), 100000000, 0, -156), 0, (("src/int_conversions.mli", 104, 3307, 3316), ("src/int_conversions.mli", 104, 3307, 3351), 0), 0, Tag1 ("Base__Stringable", 2)), 0); (("to_string_hum", 1103), ((Tag1 (Tag1 ("delimiter"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -155)], (0)), 100000000, 0, -154), (Tag1 (0, (Tag3 ((("t", 1094)), 0, (0)), 100000000, 0, -153), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -152), 0), 100000000, 0, -151), 0), 100000000, 0, -150), 0, (("src/int_conversions.mli", 104, 3307, 3316), ("src/int_conversions.mli", 104, 3307, 3351), 0), 0, Tag1 ("Base__Int_intf", 15)), 0)]), 0, (("src/int_conversions.mli", 104, 3307, 3316), ("src/int_conversions.mli", 104, 3307, 3351), 0), Tag1 ("Base__Int_intf", 16)), 0, 0)])), 0, (("src/int_conversions.mli", 83, 2679, 2679), ("src/int_conversions.mli", 104, 3307, 3351), 0), Tag1 ("Base__Int_conversions", 49)), 0, 0); (("sexp_of_int_style", 1073), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Import"), "ref"), [(Tag8 (([("No_underscores", (0)); ("Underscores", (0))], (0, 100000000, 0, -19), 1, 0, 0)), 100000000, 0, -18)], (0)), 100000000, 0, -17), 0, (("src/int_conversions.mli", 108, 3499, 3499), ("src/int_conversions.mli", 108, 3499, 3561), 0), 0, Tag1 ("Base__Int_conversions", 50)), 0); (("insert_delimiter_every", 1074), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -16), (Tag1 (("delimiter"), (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -15), (Tag1 (("chars_per_delimiter"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -14), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -13), 0), 100000000, 0, -12), 0), 100000000, 0, -11), 0), 100000000, 0, -10), 0, (("src/int_conversions.mli", 113, 3761, 3761), ("src/int_conversions.mli", 113, 3761, 3851), 0), 0, Tag1 ("Base__Int_conversions", 51)), 0); (("insert_delimiter", 1075), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -9), (Tag1 (("delimiter"), (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -8), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("src/int_conversions.mli", 116, 3908, 3908), ("src/int_conversions.mli", 116, 3908, 3965), 0), 0, Tag1 ("Base__Int_conversions", 52)), 0); (("insert_underscores", 1076), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/int_conversions.mli", 119, 4008, 4008), ("src/int_conversions.mli", 119, 4008, 4049), 0), 0, Tag1 ("Base__Int_conversions", 53)), 0)], "Base__Int_conversions", [("Base__Int_conversions", ("\130\187\240\241\151\163m\026-@(\158+gJ\193")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__StringLabels", ("\134F\024\226\216Is#\223\230\234\169Z\206Gc")); ("Stdlib__StdLabels", (".\193\n\229\139\017\212C-ZA\\kz-\128")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Printf", ("\215<\139]\021\142\224E\245m\198qc(W\229")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__MoreLabels", ("\248\232\248\254`<\230\241\161U\193U\1466J\238")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__ListLabels", ("*\194\012\191\020%\170\249m\002\180\178hk\205\220")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shadow_stdlib", ("\219zi\164\203\158e)\232\221\196\168\138x\142\018")); ("Sexplib0__Sexpable", ("\251${\207(\249/z\242\255\250^\141\156\210e")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv_error", ("kzv!\151~\198P\000\165\176d\007\251p\232")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Base_internalhash_types", ("0\148#2\226\223\018\135\173>!\020\237\017\255\149")); ("Base__T", ("+t\159\169\027\152\205\235\003\237\133\177\024\n6'")); ("Base__Sys0", ("\206z\231\154s\\\136\2364\131\005\014\031\152m3")); ("Base__Stringable", ("\170\025\162\136\234\162\n\161\1491>\145\210@\237t")); ("Base__String0", ("\212\221L\220\245\255\162P\228\224\189\216\135H\149O")); ("Base__Source_code_position0", ("_\003P6\254\029\206\005\130\136\180\019\145\230\000M")); ("Base__Sign0", ("\152\138\204\175\244\128J\165\221\165\160\150y\1305i")); ("Base__Sexp", ("\154\187\171&\209=\153[\236\250!U\174`\190T")); ("Base__Result", ("\204|\215\173FMa\2511<&\215T\194$\228")); ("Base__Printf", ("\000\196c,\214\127\226\174\220\190\253z!\242\028\250")); ("Base__Pretty_printer", ("\175\005\031\018\015a\159\220\154c'(a\239j\233")); ("Base__Ppx_hash_lib", ("\199\141\178\193\006\209L\007^\020(\131\224sn8")); ("Base__Ppx_compare_lib", ("\243\186~\233\228\199Ah\181.\223\004e\231\129S")); ("Base__Poly0", ("\230;\143\234\255.H\132KOe7\155\\\023f")); ("Base__Or_error", ("\193\133)\bO\210\2517\168*\203\148\143\200\127\177")); ("Base__Monad_intf", ("\208\203\163\152\184O\130?\012:\168\247}\018\253\155")); ("Base__Monad", ("!\244\168\2352=\137Lm\219\129K\216\199\145\\")); ("Base__Lazy", ("@`\165\196 \235)\136ANe:p\169$\185")); ("Base__Invariant_intf", ("\213\204\238\235\236[\198\145\028\2392\015\243\177S\249")); ("Base__Invariant", ("\135\153\136\\\129SD\228\202l\255\152\139\253\015\201")); ("Base__Intable", ("\028\249=Y\003]\231qd\238\172\004b\170\142\255")); ("Base__Int_intf", ("\238Q\2457\239\156\018\183J\015\240\178\193b\166@")); ("Base__Int0", ("N\1310\012\227\254\000\255_\222!\018\016\003\1779")); ("Base__Info_intf", ("\184\209'\173\251\219\167X|v\188]\190o5X")); ("Base__Info", ("-\011\149\203\248\030\2301\1907\1630\189\128\209\170")); ("Base__Import0", ("\156\129U\197Y[\\\153\017Ho\203\173\204\220\020")); ("Base__Import", ("\014\187\247\141\187\181\142g\176:s_,\181\219\209")); ("Base__Identifiable_intf", ("hK7}\187\129\022-r\233\241\192Q\161=j")); ("Base__Identifiable", ("L\020\162\189\228\217^\171\158H_\157\164c\130\242")); ("Base__Hashable_intf", ("\128\015G\244\135R\026\202\128F?)\193\004\195\181")); ("Base__Hashable", ("\027\187\158\245r}\018\193dbq\196\005\170g\252")); ("Base__Hash_intf", ("h\004P\218\1531G\127\212\208A\024\140\164iq")); ("Base__Hash", ("\206Rc\194\234{s3\248\165\024\162\203{\206\206")); ("Base__Globalize", ("<\243w~.\180\196t\159\193\174[\227\139\215G")); ("Base__Formatter", ("\193\149\030\140\154\1505b\162a`%\243\185'%")); ("Base__Floatable", ("\239\176\151\139\173ft(q\190\205\030C\170\197\177")); ("Base__Field", ("8In\234X\202\188G\186\208$\192\175\136\214v")); ("Base__Error", ("\199\218\231n\155/\159\156\146\247\148t\237\003\t\153")); ("Base__Either0", ("!9-\011n\2077eZ\212\031c\227\029\206\t")); ("Base__Comparisons", ("\196\196Y\"{\163~)\\G/\155:\004\141;")); ("Base__Comparator", ("\002\135z7b\025&\207\t\188\239&U3R\167")); ("Base__Comparable_intf", ("\252n\002\221\246\143r\235oJ\240\151\202\211\161\254")); ("Base__Comparable", (":\134'\156u#\215\225\129\191\162\229\200\185l\012")); ("Base__Bool0", ("\177f\254p\023\143&\239\020\136\206\242~\018F\251")); ("Base__Applicative_intf", ("J\176\203\159\235N(\235\027\232\198+\224\205*A")); ("Base__Applicative", ("\157\024\176\241a\165\204\133\003s3\214\007\131\244\n")); ("Base__", ("p\252\007\139\128\163W\025+\0225\001\246|P\158"))], [(0)])
val insert_underscores : string -> string

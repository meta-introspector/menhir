type t = int
val globalize : t -> t
val t_sexp_grammar : t Sexplib0.Sexp_grammar.t
val of_float : float -> t
val to_float : t -> float
val of_int_exn : int -> t
val to_int_exn : t -> int
val hash_fold_t : t Base__Ppx_hash_lib.hash_fold
val hash : t -> Base__Ppx_hash_lib.Std.Hash.hash_value
val t_of_sexp : Sexplib0__.Sexp.t -> t
val sexp_of_t : t -> Sexplib0__.Sexp.t
val of_string : string -> t
val to_string : t -> string
val equal : t -> t -> bool
val compare : t -> t -> int
val min : t -> t -> t
val max : t -> t -> t
val ascending : t -> t -> int
val descending : t -> t -> int
val between : t -> low:t -> high:t -> bool
val clamp_exn : t -> min:t -> max:t -> t
val clamp : t -> min:t -> max:t -> t Base__.Or_error.t
type comparator_witness
val comparator : (t, comparator_witness) Base__Comparator.comparator
val pp : Base__.Formatter.t -> t -> unit
val hashable : t Base__.Hashable.t
val is_positive : t -> bool
val is_non_negative : t -> bool
val is_negative : t -> bool
val is_non_positive : t -> bool
val sign : t -> Base__Comparable_intf.Sign.t
val invariant : t Base__Invariant_intf.inv
module Hex :
  sig
    type nonrec t = t
    val t_of_sexp : Sexplib0__.Sexp.t -> t
    val sexp_of_t : t -> Sexplib0__.Sexp.t
    val t_sexp_grammar : t Sexplib0.Sexp_grammar.t
    val compare : t Base__Ppx_compare_lib.compare
    val hash_fold_t : t Base__Ppx_hash_lib.hash_fold
    val hash : t -> Base__Ppx_hash_lib.Std.Hash.hash_value
    val of_string : string -> t
    val to_string : t -> string
    val to_string_hum : ?delimiter:char -> t -> string
  end
val of_string_opt : string -> t option
val to_string_hum : ?delimiter:char -> t -> string
val one : t
val minus_one : t
val rem : t -> t -> t
val round :
  ?dir:[ `Down | `Nearest | `Up | `Zero ] -> t -> to_multiple_of:t -> t
val round_towards_zero : t -> to_multiple_of:t -> t
val round_down : t -> to_multiple_of:t -> t
val round_up : t -> to_multiple_of:t -> t
val round_nearest : t -> to_multiple_of:t -> t
val succ : t -> t
val pred : t -> t
val pow : t -> t -> t
val bit_and : t -> t -> t
val bit_or : t -> t -> t
val bit_xor : t -> t -> t
val bit_not : t -> t
val popcount : t -> int
val shift_left : t -> int -> t
val shift_right : t -> int -> t
val decr : t Base__.Import.ref -> unit
val incr : t Base__.Import.ref -> unit
val of_int32_exn : int32 -> t
val to_int32_exn : t -> int32
val of_int64_exn : int64 -> t
val to_int64 : t -> int64
val of_nativeint_exn : nativeint -> t
val to_nativeint_exn : t -> nativeint
val of_float_unchecked : float -> t
val num_bits : int
val max_value : t
val min_value : t
val shift_right_logical : t -> int -> t
val ceil_pow2 : t -> t
val floor_pow2 : t -> t
val ceil_log2 : t -> int
val floor_log2 : t -> int
val is_pow2 : t -> bool
val clz : t -> int
val ctz : t -> int
module O :
  sig
    external ( + ) : t -> t -> t = "%addint"
    external ( - ) : t -> t -> t = "%subint"
    external ( * ) : t -> t -> t = "%mulint"
    external ( / ) : t -> t -> t = "%divint"
    external ( ~- ) : t -> t = "%negint"
    val ( ** ) : t -> t -> t
    external ( = ) : t -> t -> bool = "%equal"
    external ( <> ) : t -> t -> bool = "%notequal"
    external ( < ) : t -> t -> bool = "%lessthan"
    external ( > ) : t -> t -> bool = "%greaterthan"
    external ( <= ) : t -> t -> bool = "%lessequal"
    external ( >= ) : t -> t -> bool = "%greaterequal"
    external ( land ) : t -> t -> t = "%andint"
    external ( lor ) : t -> t -> t = "%orint"
    external ( lxor ) : t -> t -> t = "%xorint"
    val lnot : t -> t
    val abs : t -> t
    external neg : t -> t = "%negint"
    val zero : t
    val ( % ) : t -> t -> t
    val ( /% ) : t -> t -> t
    val ( // ) : t -> t -> float
    external ( lsl ) : t -> int -> t = "%lslint"
    external ( asr ) : t -> int -> t = "%asrint"
    external ( lsr ) : t -> int -> t = "%lsrint"
  end
external ( + ) : t -> t -> t = "%addint"
external ( - ) : t -> t -> t = "%subint"
external ( * ) : t -> t -> t = "%mulint"
external ( / ) : t -> t -> t = "%divint"
external ( ~- ) : t -> t = "%negint"
val ( ** ) : t -> t -> t
external ( = ) : t -> t -> bool = "%equal"
external ( <> ) : t -> t -> bool = "%notequal"
external ( < ) : t -> t -> bool = "%lessthan"
external ( > ) : t -> t -> bool = "%greaterthan"
external ( <= ) : t -> t -> bool = "%lessequal"
external ( >= ) : t -> t -> bool = "%greaterequal"
external ( land ) : t -> t -> t = "%andint"
external ( lor ) : t -> t -> t = "%orint"
external ( lxor ) : t -> t -> t = "%xorint"
val lnot : t -> t
val abs : t -> t
external neg : t -> t = "%negint"
val zero : t
val ( % ) : t -> t -> t
val ( /% ) : t -> t -> t
val ( // ) : t -> t -> float
external ( lsl ) : t -> int -> t = "%lslint"
external ( asr ) : t -> int -> t = "%asrint"
external ( lsr ) : t -> int -> t = "%lsrint"
val max_value_30_bits : t
val of_int : int -> t
val to_int : t -> int
val of_int32 : int32 -> t option
val to_int32 : t -> int32 option
val of_int64 : int64 -> t option
val of_nativeint : nativeint -> t option
val to_nativeint : t -> nativeint
external to_int32_trunc : t -> int32 = "%int32_of_int"
external of_int32_trunc : int32 -> t = "%int32_to_int"
external of_int64_trunc : int64 -> t = "%int64_to_int"
external of_nativeint_trunc : nativeint -> t = "%nativeint_to_int"
external bswap16 : int -> int = "%bswap16"
module Private :
  sig
    module O_F :
      sig
        val ( % ) : int -> int -> int
        val ( /% ) : int -> int -> int
        val ( // ) : int -> int -> float
      end
  end
module type Hexable = Base__Int_intf.Hexable
module type Int_without_module_types =
  Base__Int_intf.Int_without_module_types
module type Operators = Base__Int_intf.Operators
module type Operators_unbounded = Base__Int_intf.Operators_unbounded
module type Round = Base__Int_intf.Round
module type S = Base__Int_intf.S
module type S_common = Base__Int_intf.S_common
("DEBUG:rule", [Tag1 (("t", 1851), (0, 0, 0, 1, ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -415)), 0, 0, 0, 0, (("src/int_intf.ml", 313, 9499, 9501), ("src/int_intf.ml", 313, 9499, 9543), 0), [(("deriving_inline", (("src/int_intf.ml", 313, 9499, 9517), ("src/int_intf.ml", 313, 9499, 9532), 0)), ([([(((("globalize"), (("src/int_intf.ml", 313, 9499, 9533), ("src/int_intf.ml", 313, 9499, 9542), 0))), (("src/int_intf.ml", 313, 9499, 9533), ("src/int_intf.ml", 313, 9499, 9542), 0), 0, 0)], (("src/int_intf.ml", 313, 9499, 9533), ("src/int_intf.ml", 313, 9499, 9542), 0))]), (("src/int_intf.ml", 313, 9499, 9514), ("src/int_intf.ml", 313, 9499, 9543), 0))], 1, 0, Tag1 ("Base__Int_intf", 112)), 1, 0); (("globalize", 1852), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -414), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -413), 0), 100000000, 0, -412), 0, (("src/int_intf.ml", 315, 9545, 9547), ("src/int_intf.ml", 315, 9545, 9585), 0), 0, Tag1 ("Base__Int_intf", 113)), 0); (("t_sexp_grammar", 1853), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -411)], (0)), 100000000, 0, -410), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Int_intf", 20)), 0); (("of_float", 1854), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -409), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -408), 0), 100000000, 0, -407), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Floatable", 1)), 0); (("to_float", 1855), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -406), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -405), 0), 100000000, 0, -404), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Floatable", 2)), 0); (("of_int_exn", 1856), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -403), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -402), 0), 100000000, 0, -401), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Intable", 1)), 0); (("to_int_exn", 1857), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -400), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -399), 0), 100000000, 0, -398), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Intable", 2)), 0); (("hash_fold_t", 1858), ((Tag3 (Tag1 ((Tag2 ("Base__Ppx_hash_lib")), "hash_fold"), [(Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -397)], (0)), 100000000, 0, -396), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Ppx_hash_lib", 4)), 0); (("hash", 1859), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -395), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__Ppx_hash_lib")), "Std"), "Hash"), "hash_value"), 0, (0)), 100000000, 0, -394), 0), 100000000, 0, -393), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Ppx_hash_lib", 5)), 0); (("t_of_sexp", 1860), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -392), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -391), 0), 100000000, 0, -390), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Sexplib0__Sexpable", 1)), 0); (("sexp_of_t", 1861), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -389), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -388), 0), 100000000, 0, -387), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Sexplib0__Sexpable", 2)), 0); (("of_string", 1862), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -386), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -385), 0), 100000000, 0, -384), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Stringable", 1)), 0); (("to_string", 1863), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -383), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -382), 0), 100000000, 0, -381), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Stringable", 2)), 0); (("equal", 1864), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -380), (Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -379), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -378), 0), 100000000, 0, -377), 0), 100000000, 0, -376), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Comparisons", 8)), 0); (("compare", 1865), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -375), (Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -374), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -373), 0), 100000000, 0, -372), 0), 100000000, 0, -371), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Comparisons", 9)), 0); (("min", 1866), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -370), (Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -369), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -368), 0), 100000000, 0, -367), 0), 100000000, 0, -366), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Comparisons", 10)), 0); (("max", 1867), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -365), (Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -364), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -363), 0), 100000000, 0, -362), 0), 100000000, 0, -361), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Comparisons", 11)), 0); (("ascending", 1868), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -360), (Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -359), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -358), 0), 100000000, 0, -357), 0), 100000000, 0, -356), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Comparable_intf", 19)), 0); (("descending", 1869), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -355), (Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -354), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -353), 0), 100000000, 0, -352), 0), 100000000, 0, -351), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Comparable_intf", 20)), 0); (("between", 1870), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -350), (Tag1 (("low"), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -349), (Tag1 (("high"), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -348), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -347), 0), 100000000, 0, -346), 0), 100000000, 0, -345), 0), 100000000, 0, -344), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Comparable_intf", 21)), 0); (("clamp_exn", 1871), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -343), (Tag1 (("min"), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -342), (Tag1 (("max"), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -341), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -340), 0), 100000000, 0, -339), 0), 100000000, 0, -338), 0), 100000000, 0, -337), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Comparable_intf", 22)), 0); (("clamp", 1872), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -336), (Tag1 (("min"), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -335), (Tag1 (("max"), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -334), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -333)], (0)), 100000000, 0, -332), 0), 100000000, 0, -331), 0), 100000000, 0, -330), 0), 100000000, 0, -329), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Comparable_intf", 23)), 0); Tag1 (("comparator_witness", 1873), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, 0, 0, Tag1 ("Base__Comparator", 5)), 1, 0); (("comparator", 1874), ((Tag3 (Tag1 ((Tag2 ("Base__Comparator")), "comparator"), [(Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -327); (Tag3 ((("comparator_witness", 1873)), 0, (0)), 100000000, 0, -328)], (0)), 100000000, 0, -326), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Comparator", 6)), 0); (("pp", 1875), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Formatter"), "t"), 0, (0)), 100000000, 0, -325), (Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -324), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -323), 0), 100000000, 0, -322), 0), 100000000, 0, -321), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Pretty_printer", 2)), 0); (("hashable", 1876), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Hashable"), "t"), [(Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -320)], (0)), 100000000, 0, -319), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Identifiable_intf", 15)), 0); (("is_positive", 1877), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -318), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -317), 0), 100000000, 0, -316), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Comparable_intf", 13)), 0); (("is_non_negative", 1878), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -315), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -314), 0), 100000000, 0, -313), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Comparable_intf", 14)), 0); (("is_negative", 1879), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -312), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -311), 0), 100000000, 0, -310), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Comparable_intf", 15)), 0); (("is_non_positive", 1880), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -309), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -308), 0), 100000000, 0, -307), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Comparable_intf", 16)), 0); (("sign", 1881), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -306), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Comparable_intf")), "Sign"), "t"), 0, (0)), 100000000, 0, -305), 0), 100000000, 0, -304), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Comparable_intf", 17)), 0); (("invariant", 1882), ((Tag3 (Tag1 ((Tag2 ("Base__Invariant_intf")), "inv"), [(Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -303)], (0)), 100000000, 0, -302), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Invariant_intf", 3)), 0); Tag3 (("Hex", 1883), 0, (Tag1 ([Tag1 (("t", 1972), (0, 0, 0, 1, ((Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -443)), 0, 0, 0, 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), [(("deriving_inline", (("src/int_intf.ml", 44, 1730, 1755), ("src/int_intf.ml", 44, 1730, 1770), 0)), ([([(Tag8 ([(((("sexp"), (("src/int_intf.ml", 44, 1730, 1771), ("src/int_intf.ml", 44, 1730, 1775), 0))), (("src/int_intf.ml", 44, 1730, 1771), ("src/int_intf.ml", 44, 1730, 1775), 0), 0, 0); (((("sexp_grammar"), (("src/int_intf.ml", 44, 1730, 1777), ("src/int_intf.ml", 44, 1730, 1789), 0))), (("src/int_intf.ml", 44, 1730, 1777), ("src/int_intf.ml", 44, 1730, 1789), 0), 0, 0); (((("compare"), (("src/int_intf.ml", 44, 1730, 1791), ("src/int_intf.ml", 44, 1730, 1798), 0))), (("src/int_intf.ml", 44, 1730, 1791), ("src/int_intf.ml", 44, 1730, 1798), 0), 0, 0); (((("hash"), (("src/int_intf.ml", 44, 1730, 1800), ("src/int_intf.ml", 44, 1730, 1804), 0))), (("src/int_intf.ml", 44, 1730, 1800), ("src/int_intf.ml", 44, 1730, 1804), 0), 0, 0)]), (("src/int_intf.ml", 44, 1730, 1771), ("src/int_intf.ml", 44, 1730, 1804), 0), 0, 0)], (("src/int_intf.ml", 44, 1730, 1771), ("src/int_intf.ml", 44, 1730, 1804), 0))]), (("src/int_intf.ml", 44, 1730, 1752), ("src/int_intf.ml", 44, 1730, 1805), 0))], 0, 0, Tag1 ("Base__Int_intf", 8)), 0, 0); (("t_of_sexp", 1973), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -442), (Tag3 ((("t", 1972)), 0, (0)), 100000000, 0, -441), 0), 100000000, 0, -440), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Sexplib0__Sexpable", 1)), 0); (("sexp_of_t", 1974), ((Tag1 (0, (Tag3 ((("t", 1972)), 0, (0)), 100000000, 0, -439), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -438), 0), 100000000, 0, -437), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Sexplib0__Sexpable", 2)), 0); (("t_sexp_grammar", 1975), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("t", 1972)), 0, (0)), 100000000, 0, -436)], (0)), 100000000, 0, -435), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Int_intf", 11)), 0); (("compare", 1976), ((Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "compare"), [(Tag3 ((("t", 1972)), 0, (0)), 100000000, 0, -434)], (0)), 100000000, 0, -433), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Ppx_compare_lib", 5)), 0); (("hash_fold_t", 1977), ((Tag3 (Tag1 ((Tag2 ("Base__Ppx_hash_lib")), "hash_fold"), [(Tag3 ((("t", 1972)), 0, (0)), 100000000, 0, -432)], (0)), 100000000, 0, -431), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Ppx_hash_lib", 4)), 0); (("hash", 1978), ((Tag1 (0, (Tag3 ((("t", 1972)), 0, (0)), 100000000, 0, -430), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__Ppx_hash_lib")), "Std"), "Hash"), "hash_value"), 0, (0)), 100000000, 0, -429), 0), 100000000, 0, -428), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Ppx_hash_lib", 5)), 0); (("of_string", 1979), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -427), (Tag3 ((("t", 1972)), 0, (0)), 100000000, 0, -426), 0), 100000000, 0, -425), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Stringable", 1)), 0); (("to_string", 1980), ((Tag1 (0, (Tag3 ((("t", 1972)), 0, (0)), 100000000, 0, -424), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -423), 0), 100000000, 0, -422), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Stringable", 2)), 0); (("to_string_hum", 1981), ((Tag1 (Tag1 ("delimiter"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -421)], (0)), 100000000, 0, -420), (Tag1 (0, (Tag3 ((("t", 1972)), 0, (0)), 100000000, 0, -419), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -418), 0), 100000000, 0, -417), 0), 100000000, 0, -416), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Int_intf", 15)), 0)]), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), Tag1 ("Base__Int_intf", 16)), 0, 0); (("of_string_opt", 1884), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -301), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -300)], (0)), 100000000, 0, -299), 0), 100000000, 0, -298), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Int_intf", 27)), 0); (("to_string_hum", 1885), ((Tag1 (Tag1 ("delimiter"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -297)], (0)), 100000000, 0, -296), (Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -295), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -294), 0), 100000000, 0, -293), 0), 100000000, 0, -292), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Int_intf", 28)), 0); (("one", 1886), ((Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -291), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Int_intf", 30)), 0); (("minus_one", 1887), ((Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -290), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Int_intf", 31)), 0); (("rem", 1888), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -289), (Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -288), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -287), 0), 100000000, 0, -286), 0), 100000000, 0, -285), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Int_intf", 41)), 0); (("round", 1889), ((Tag1 (Tag1 ("dir"), (Tag3 ((Tag3 ("option", 10)), [(Tag8 (([("Down", (0)); ("Nearest", (0)); ("Up", (0)); ("Zero", (0))], (0, 100000000, 0, -284), 1, 0, 0)), 100000000, 0, -283)], (0)), 100000000, 0, -282), (Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -281), (Tag1 (("to_multiple_of"), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -280), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -279), 0), 100000000, 0, -278), 0), 100000000, 0, -277), 0), 100000000, 0, -276), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Int_intf", 1)), 0); (("round_towards_zero", 1890), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -275), (Tag1 (("to_multiple_of"), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -274), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -273), 0), 100000000, 0, -272), 0), 100000000, 0, -271), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Int_intf", 2)), 0); (("round_down", 1891), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -270), (Tag1 (("to_multiple_of"), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -269), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -268), 0), 100000000, 0, -267), 0), 100000000, 0, -266), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Int_intf", 3)), 0); (("round_up", 1892), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -265), (Tag1 (("to_multiple_of"), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -264), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -263), 0), 100000000, 0, -262), 0), 100000000, 0, -261), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Int_intf", 4)), 0); (("round_nearest", 1893), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -260), (Tag1 (("to_multiple_of"), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -259), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -258), 0), 100000000, 0, -257), 0), 100000000, 0, -256), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Int_intf", 5)), 0); (("succ", 1894), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -255), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -254), 0), 100000000, 0, -253), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Int_intf", 51)), 0); (("pred", 1895), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -252), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -251), 0), 100000000, 0, -250), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Int_intf", 52)), 0); (("pow", 1896), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -249), (Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -248), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -247), 0), 100000000, 0, -246), 0), 100000000, 0, -245), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Int_intf", 53)), 0); (("bit_and", 1897), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -244), (Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -243), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -242), 0), 100000000, 0, -241), 0), 100000000, 0, -240), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Int_intf", 54)), 0); (("bit_or", 1898), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -239), (Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -238), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -237), 0), 100000000, 0, -236), 0), 100000000, 0, -235), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Int_intf", 55)), 0); (("bit_xor", 1899), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -234), (Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -233), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -232), 0), 100000000, 0, -231), 0), 100000000, 0, -230), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Int_intf", 56)), 0); (("bit_not", 1900), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -229), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -228), 0), 100000000, 0, -227), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Int_intf", 57)), 0); (("popcount", 1901), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -226), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -225), 0), 100000000, 0, -224), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Int_intf", 58)), 0); (("shift_left", 1902), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -223), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -222), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -221), 0), 100000000, 0, -220), 0), 100000000, 0, -219), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Int_intf", 59)), 0); (("shift_right", 1903), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -218), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -217), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -216), 0), 100000000, 0, -215), 0), 100000000, 0, -214), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Int_intf", 60)), 0); (("decr", 1904), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Import"), "ref"), [(Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -213)], (0)), 100000000, 0, -212), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -211), 0), 100000000, 0, -210), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Int_intf", 61)), 0); (("incr", 1905), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Import"), "ref"), [(Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -209)], (0)), 100000000, 0, -208), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -207), 0), 100000000, 0, -206), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Int_intf", 62)), 0); (("of_int32_exn", 1906), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -205), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -204), 0), 100000000, 0, -203), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Int_intf", 63)), 0); (("to_int32_exn", 1907), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -202), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -201), 0), 100000000, 0, -200), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Int_intf", 64)), 0); (("of_int64_exn", 1908), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -199), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -198), 0), 100000000, 0, -197), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Int_intf", 65)), 0); (("to_int64", 1909), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -196), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -195), 0), 100000000, 0, -194), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Int_intf", 66)), 0); (("of_nativeint_exn", 1910), ((Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -193), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -192), 0), 100000000, 0, -191), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Int_intf", 67)), 0); (("to_nativeint_exn", 1911), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -190), (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -189), 0), 100000000, 0, -188), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Int_intf", 68)), 0); (("of_float_unchecked", 1912), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -187), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -186), 0), 100000000, 0, -185), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Int_intf", 69)), 0); (("num_bits", 1913), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -184), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Int_intf", 97)), 0); (("max_value", 1914), ((Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -183), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Int_intf", 98)), 0); (("min_value", 1915), ((Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -182), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Int_intf", 99)), 0); (("shift_right_logical", 1916), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -181), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -180), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -179), 0), 100000000, 0, -178), 0), 100000000, 0, -177), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Int_intf", 101)), 0); (("ceil_pow2", 1917), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -176), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -175), 0), 100000000, 0, -174), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Int_intf", 102)), 0); (("floor_pow2", 1918), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -173), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -172), 0), 100000000, 0, -171), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Int_intf", 103)), 0); (("ceil_log2", 1919), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -170), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -169), 0), 100000000, 0, -168), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Int_intf", 104)), 0); (("floor_log2", 1920), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -167), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -166), 0), 100000000, 0, -165), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Int_intf", 105)), 0); (("is_pow2", 1921), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -164), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -163), 0), 100000000, 0, -162), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Int_intf", 106)), 0); (("clz", 1922), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -161), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -160), 0), 100000000, 0, -159), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Int_intf", 107)), 0); (("ctz", 1923), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -158), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -157), 0), 100000000, 0, -156), 0, (("src/int_intf.ml", 319, 9599, 9609), ("src/int_intf.ml", 319, 9599, 9627), 0), 0, Tag1 ("Base__Int_intf", 108)), 0); Tag3 (("O", 1924), 0, (Tag1 ([(("+", 1982), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -556), (Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -555), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -554), 0), 100000000, 0, -553), 0), 100000000, 0, -552), (("%addint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 324, 9805, 9809), ("src/int_intf.ml", 324, 9805, 9877), 0), 0, Tag1 ("Base__Int_intf", 115)), 0); (("-", 1983), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -551), (Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -550), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -549), 0), 100000000, 0, -548), 0), 100000000, 0, -547), (("%subint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 325, 9878, 9882), ("src/int_intf.ml", 325, 9878, 9950), 0), 0, Tag1 ("Base__Int_intf", 116)), 0); (("*", 1984), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -546), (Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -545), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -544), 0), 100000000, 0, -543), 0), 100000000, 0, -542), (("%mulint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 326, 9951, 9955), ("src/int_intf.ml", 326, 9951, 10023), 0), 0, Tag1 ("Base__Int_intf", 117)), 0); (("/", 1985), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -541), (Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -540), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -539), 0), 100000000, 0, -538), 0), 100000000, 0, -537), (("%divint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 327, 10024, 10028), ("src/int_intf.ml", 327, 10024, 10096), 0), 0, Tag1 ("Base__Int_intf", 118)), 0); (("~-", 1986), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -536), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -535), 0), 100000000, 0, -534), (("%negint", 1, 1, "", [0], 0)), (("src/int_intf.ml", 328, 10097, 10101), ("src/int_intf.ml", 328, 10097, 10151), 0), 0, Tag1 ("Base__Int_intf", 119)), 0); (("**", 1987), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -533), (Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -532), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -531), 0), 100000000, 0, -530), 0), 100000000, 0, -529), 0, (("src/int_intf.ml", 329, 10152, 10156), ("src/int_intf.ml", 329, 10152, 10180), 0), 0, Tag1 ("Base__Int_intf", 120)), 0); (("=", 1988), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -528), (Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -527), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -526), 0), 100000000, 0, -525), 0), 100000000, 0, -524), (("%equal", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 330, 10181, 10185), ("src/int_intf.ml", 330, 10181, 10255), 0), 0, Tag1 ("Base__Int_intf", 121)), 0); (("<>", 1989), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -523), (Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -522), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -521), 0), 100000000, 0, -520), 0), 100000000, 0, -519), (("%notequal", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 331, 10256, 10260), ("src/int_intf.ml", 331, 10256, 10334), 0), 0, Tag1 ("Base__Int_intf", 122)), 0); (("<", 1990), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -518), (Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -517), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -516), 0), 100000000, 0, -515), 0), 100000000, 0, -514), (("%lessthan", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 332, 10335, 10339), ("src/int_intf.ml", 332, 10335, 10412), 0), 0, Tag1 ("Base__Int_intf", 123)), 0); ((">", 1991), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -513), (Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -512), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -511), 0), 100000000, 0, -510), 0), 100000000, 0, -509), (("%greaterthan", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 333, 10413, 10417), ("src/int_intf.ml", 333, 10413, 10493), 0), 0, Tag1 ("Base__Int_intf", 124)), 0); (("<=", 1992), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -508), (Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -507), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -506), 0), 100000000, 0, -505), 0), 100000000, 0, -504), (("%lessequal", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 334, 10494, 10498), ("src/int_intf.ml", 334, 10494, 10573), 0), 0, Tag1 ("Base__Int_intf", 125)), 0); ((">=", 1993), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -503), (Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -502), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -501), 0), 100000000, 0, -500), 0), 100000000, 0, -499), (("%greaterequal", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 335, 10574, 10578), ("src/int_intf.ml", 335, 10574, 10656), 0), 0, Tag1 ("Base__Int_intf", 126)), 0); (("land", 1994), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -498), (Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -497), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -496), 0), 100000000, 0, -495), 0), 100000000, 0, -494), (("%andint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 336, 10657, 10661), ("src/int_intf.ml", 336, 10657, 10732), 0), 0, Tag1 ("Base__Int_intf", 127)), 0); (("lor", 1995), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -493), (Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -492), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -491), 0), 100000000, 0, -490), 0), 100000000, 0, -489), (("%orint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 337, 10733, 10737), ("src/int_intf.ml", 337, 10733, 10806), 0), 0, Tag1 ("Base__Int_intf", 128)), 0); (("lxor", 1996), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -488), (Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -487), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -486), 0), 100000000, 0, -485), 0), 100000000, 0, -484), (("%xorint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 338, 10807, 10811), ("src/int_intf.ml", 338, 10807, 10882), 0), 0, Tag1 ("Base__Int_intf", 129)), 0); (("lnot", 1997), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -483), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -482), 0), 100000000, 0, -481), 0, (("src/int_intf.ml", 339, 10883, 10887), ("src/int_intf.ml", 339, 10883, 10904), 0), 0, Tag1 ("Base__Int_intf", 130)), 0); (("abs", 1998), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -480), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -479), 0), 100000000, 0, -478), 0, (("src/int_intf.ml", 340, 10905, 10909), ("src/int_intf.ml", 340, 10905, 10925), 0), 0, Tag1 ("Base__Int_intf", 131)), 0); (("neg", 1999), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -477), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -476), 0), 100000000, 0, -475), (("%negint", 1, 1, "", [0], 0)), (("src/int_intf.ml", 341, 10926, 10930), ("src/int_intf.ml", 341, 10926, 10977), 0), 0, Tag1 ("Base__Int_intf", 132)), 0); (("zero", 2000), ((Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -474), 0, (("src/int_intf.ml", 342, 10978, 10982), ("src/int_intf.ml", 342, 10978, 10994), 0), 0, Tag1 ("Base__Int_intf", 133)), 0); (("%", 2001), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -473), (Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -472), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -471), 0), 100000000, 0, -470), 0), 100000000, 0, -469), 0, (("src/int_intf.ml", 343, 10995, 10999), ("src/int_intf.ml", 343, 10995, 11022), 0), 0, Tag1 ("Base__Int_intf", 134)), 0); (("/%", 2002), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -468), (Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -467), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -466), 0), 100000000, 0, -465), 0), 100000000, 0, -464), 0, (("src/int_intf.ml", 344, 11023, 11027), ("src/int_intf.ml", 344, 11023, 11051), 0), 0, Tag1 ("Base__Int_intf", 135)), 0); (("//", 2003), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -463), (Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -462), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -461), 0), 100000000, 0, -460), 0), 100000000, 0, -459), 0, (("src/int_intf.ml", 345, 11052, 11056), ("src/int_intf.ml", 345, 11052, 11084), 0), 0, Tag1 ("Base__Int_intf", 136)), 0); (("lsl", 2004), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -458), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -457), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -456), 0), 100000000, 0, -455), 0), 100000000, 0, -454), (("%lslint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 346, 11085, 11089), ("src/int_intf.ml", 346, 11085, 11161), 0), 0, Tag1 ("Base__Int_intf", 137)), 0); (("asr", 2005), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -453), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -452), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -451), 0), 100000000, 0, -450), 0), 100000000, 0, -449), (("%asrint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 347, 11162, 11166), ("src/int_intf.ml", 347, 11162, 11238), 0), 0, Tag1 ("Base__Int_intf", 138)), 0); (("lsr", 2006), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -448), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -447), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -446), 0), 100000000, 0, -445), 0), 100000000, 0, -444), (("%lsrint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 348, 11239, 11243), ("src/int_intf.ml", 348, 11239, 11315), 0), 0, Tag1 ("Base__Int_intf", 139)), 0)]), 0, (("src/int_intf.ml", 321, 9644, 9646), ("src/int_intf.ml", 349, 11316, 11321), 0), Tag1 ("Base__Int_intf", 140)), 0, 0); (("+", 1925), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -155), (Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -154), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -153), 0), 100000000, 0, -152), 0), 100000000, 0, -151), (("%addint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 324, 9805, 9809), ("src/int_intf.ml", 324, 9805, 9877), 0), 0, Tag1 ("Base__Int_intf", 115)), 0); (("-", 1926), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -150), (Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -149), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -148), 0), 100000000, 0, -147), 0), 100000000, 0, -146), (("%subint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 325, 9878, 9882), ("src/int_intf.ml", 325, 9878, 9950), 0), 0, Tag1 ("Base__Int_intf", 116)), 0); (("*", 1927), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -145), (Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -144), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -143), 0), 100000000, 0, -142), 0), 100000000, 0, -141), (("%mulint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 326, 9951, 9955), ("src/int_intf.ml", 326, 9951, 10023), 0), 0, Tag1 ("Base__Int_intf", 117)), 0); (("/", 1928), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -140), (Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -139), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -138), 0), 100000000, 0, -137), 0), 100000000, 0, -136), (("%divint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 327, 10024, 10028), ("src/int_intf.ml", 327, 10024, 10096), 0), 0, Tag1 ("Base__Int_intf", 118)), 0); (("~-", 1929), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -135), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -134), 0), 100000000, 0, -133), (("%negint", 1, 1, "", [0], 0)), (("src/int_intf.ml", 328, 10097, 10101), ("src/int_intf.ml", 328, 10097, 10151), 0), 0, Tag1 ("Base__Int_intf", 119)), 0); (("**", 1930), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -132), (Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -131), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -130), 0), 100000000, 0, -129), 0), 100000000, 0, -128), 0, (("src/int_intf.ml", 329, 10152, 10156), ("src/int_intf.ml", 329, 10152, 10180), 0), 0, Tag1 ("Base__Int_intf", 120)), 0); (("=", 1931), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -127), (Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -126), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -125), 0), 100000000, 0, -124), 0), 100000000, 0, -123), (("%equal", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 330, 10181, 10185), ("src/int_intf.ml", 330, 10181, 10255), 0), 0, Tag1 ("Base__Int_intf", 121)), 0); (("<>", 1932), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -122), (Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -121), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -120), 0), 100000000, 0, -119), 0), 100000000, 0, -118), (("%notequal", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 331, 10256, 10260), ("src/int_intf.ml", 331, 10256, 10334), 0), 0, Tag1 ("Base__Int_intf", 122)), 0); (("<", 1933), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -117), (Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -116), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -115), 0), 100000000, 0, -114), 0), 100000000, 0, -113), (("%lessthan", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 332, 10335, 10339), ("src/int_intf.ml", 332, 10335, 10412), 0), 0, Tag1 ("Base__Int_intf", 123)), 0); ((">", 1934), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -112), (Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -111), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -110), 0), 100000000, 0, -109), 0), 100000000, 0, -108), (("%greaterthan", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 333, 10413, 10417), ("src/int_intf.ml", 333, 10413, 10493), 0), 0, Tag1 ("Base__Int_intf", 124)), 0); (("<=", 1935), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -107), (Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -106), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -105), 0), 100000000, 0, -104), 0), 100000000, 0, -103), (("%lessequal", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 334, 10494, 10498), ("src/int_intf.ml", 334, 10494, 10573), 0), 0, Tag1 ("Base__Int_intf", 125)), 0); ((">=", 1936), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -102), (Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -101), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -100), 0), 100000000, 0, -99), 0), 100000000, 0, -98), (("%greaterequal", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 335, 10574, 10578), ("src/int_intf.ml", 335, 10574, 10656), 0), 0, Tag1 ("Base__Int_intf", 126)), 0); (("land", 1937), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -97), (Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -96), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -95), 0), 100000000, 0, -94), 0), 100000000, 0, -93), (("%andint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 336, 10657, 10661), ("src/int_intf.ml", 336, 10657, 10732), 0), 0, Tag1 ("Base__Int_intf", 127)), 0); (("lor", 1938), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -92), (Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -91), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -90), 0), 100000000, 0, -89), 0), 100000000, 0, -88), (("%orint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 337, 10733, 10737), ("src/int_intf.ml", 337, 10733, 10806), 0), 0, Tag1 ("Base__Int_intf", 128)), 0); (("lxor", 1939), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -87), (Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -86), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -85), 0), 100000000, 0, -84), 0), 100000000, 0, -83), (("%xorint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 338, 10807, 10811), ("src/int_intf.ml", 338, 10807, 10882), 0), 0, Tag1 ("Base__Int_intf", 129)), 0); (("lnot", 1940), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -82), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -81), 0), 100000000, 0, -80), 0, (("src/int_intf.ml", 339, 10883, 10887), ("src/int_intf.ml", 339, 10883, 10904), 0), 0, Tag1 ("Base__Int_intf", 130)), 0); (("abs", 1941), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -79), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -78), 0), 100000000, 0, -77), 0, (("src/int_intf.ml", 340, 10905, 10909), ("src/int_intf.ml", 340, 10905, 10925), 0), 0, Tag1 ("Base__Int_intf", 131)), 0); (("neg", 1942), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -76), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -75), 0), 100000000, 0, -74), (("%negint", 1, 1, "", [0], 0)), (("src/int_intf.ml", 341, 10926, 10930), ("src/int_intf.ml", 341, 10926, 10977), 0), 0, Tag1 ("Base__Int_intf", 132)), 0); (("zero", 1943), ((Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -73), 0, (("src/int_intf.ml", 342, 10978, 10982), ("src/int_intf.ml", 342, 10978, 10994), 0), 0, Tag1 ("Base__Int_intf", 133)), 0); (("%", 1944), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -72), (Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -71), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -70), 0), 100000000, 0, -69), 0), 100000000, 0, -68), 0, (("src/int_intf.ml", 343, 10995, 10999), ("src/int_intf.ml", 343, 10995, 11022), 0), 0, Tag1 ("Base__Int_intf", 134)), 0); (("/%", 1945), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -67), (Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -66), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -65), 0), 100000000, 0, -64), 0), 100000000, 0, -63), 0, (("src/int_intf.ml", 344, 11023, 11027), ("src/int_intf.ml", 344, 11023, 11051), 0), 0, Tag1 ("Base__Int_intf", 135)), 0); (("//", 1946), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -62), (Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -61), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -60), 0), 100000000, 0, -59), 0), 100000000, 0, -58), 0, (("src/int_intf.ml", 345, 11052, 11056), ("src/int_intf.ml", 345, 11052, 11084), 0), 0, Tag1 ("Base__Int_intf", 136)), 0); (("lsl", 1947), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -57), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -56), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -55), 0), 100000000, 0, -54), 0), 100000000, 0, -53), (("%lslint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 346, 11085, 11089), ("src/int_intf.ml", 346, 11085, 11161), 0), 0, Tag1 ("Base__Int_intf", 137)), 0); (("asr", 1948), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -52), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -51), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -50), 0), 100000000, 0, -49), 0), 100000000, 0, -48), (("%asrint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 347, 11162, 11166), ("src/int_intf.ml", 347, 11162, 11238), 0), 0, Tag1 ("Base__Int_intf", 138)), 0); (("lsr", 1949), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -47), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -46), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -45), 0), 100000000, 0, -44), 0), 100000000, 0, -43), (("%lsrint", 2, 1, "", [0; 0], 0)), (("src/int_intf.ml", 348, 11239, 11243), ("src/int_intf.ml", 348, 11239, 11315), 0), 0, Tag1 ("Base__Int_intf", 139)), 0); (("max_value_30_bits", 1950), ((Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -42), 0, (("src/int_intf.ml", 355, 11477, 11479), ("src/int_intf.ml", 355, 11477, 11504), 0), 0, Tag1 ("Base__Int_intf", 141)), 0); (("of_int", 1951), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -41), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -40), 0), 100000000, 0, -39), 0, (("src/int_intf.ml", 359, 11541, 11543), ("src/int_intf.ml", 359, 11541, 11564), 0), 0, Tag1 ("Base__Int_intf", 142)), 0); (("to_int", 1952), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -38), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -37), 0), 100000000, 0, -36), 0, (("src/int_intf.ml", 360, 11565, 11567), ("src/int_intf.ml", 360, 11565, 11588), 0), 0, Tag1 ("Base__Int_intf", 143)), 0); (("of_int32", 1953), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -35), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -34)], (0)), 100000000, 0, -33), 0), 100000000, 0, -32), 0, (("src/int_intf.ml", 361, 11589, 11591), ("src/int_intf.ml", 361, 11589, 11623), 0), 0, Tag1 ("Base__Int_intf", 144)), 0); (("to_int32", 1954), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -31), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -30)], (0)), 100000000, 0, -29), 0), 100000000, 0, -28), 0, (("src/int_intf.ml", 362, 11624, 11626), ("src/int_intf.ml", 362, 11624, 11658), 0), 0, Tag1 ("Base__Int_intf", 145)), 0); (("of_int64", 1955), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -27), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -26)], (0)), 100000000, 0, -25), 0), 100000000, 0, -24), 0, (("src/int_intf.ml", 363, 11659, 11661), ("src/int_intf.ml", 363, 11659, 11693), 0), 0, Tag1 ("Base__Int_intf", 146)), 0); (("of_nativeint", 1956), ((Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -23), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -22)], (0)), 100000000, 0, -21), 0), 100000000, 0, -20), 0, (("src/int_intf.ml", 364, 11694, 11696), ("src/int_intf.ml", 364, 11694, 11736), 0), 0, Tag1 ("Base__Int_intf", 147)), 0); (("to_nativeint", 1957), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -19), (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("src/int_intf.ml", 365, 11737, 11739), ("src/int_intf.ml", 365, 11737, 11772), 0), 0, Tag1 ("Base__Int_intf", 148)), 0); (("to_int32_trunc", 1958), ((Tag1 (0, (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -16), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -15), 0), 100000000, 0, -14), (("%int32_of_int", 1, 1, "", [0], 0)), (("src/int_intf.ml", 374, 12116, 12118), ("src/int_intf.ml", 374, 12116, 12200), 0), 0, Tag1 ("Base__Int_intf", 149)), 0); (("of_int32_trunc", 1959), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -13), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), (("%int32_to_int", 1, 1, "", [0], 0)), (("src/int_intf.ml", 375, 12201, 12203), ("src/int_intf.ml", 375, 12201, 12271), 0), 0, Tag1 ("Base__Int_intf", 150)), 0); (("of_int64_trunc", 1960), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -10), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), (("%int64_to_int", 1, 1, "", [0], 0)), (("src/int_intf.ml", 376, 12272, 12274), ("src/int_intf.ml", 376, 12272, 12342), 0), 0, Tag1 ("Base__Int_intf", 151)), 0); (("of_nativeint_trunc", 1961), ((Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -7), (Tag3 ((("t", 1851)), 0, (0)), 100000000, 0, -6), 0), 100000000, 0, -5), (("%nativeint_to_int", 1, 1, "", [0], 0)), (("src/int_intf.ml", 377, 12343, 12345), ("src/int_intf.ml", 377, 12343, 12425), 0), 0, Tag1 ("Base__Int_intf", 152)), 0); (("bswap16", 1962), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -4), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), (("%bswap16", 1, 1, "", [0], 0)), (("src/int_intf.ml", 393, 12987, 12989), ("src/int_intf.ml", 393, 12987, 13045), 0), 0, Tag1 ("Base__Int_intf", 153)), 0); Tag3 (("Private", 1963), 0, (Tag1 ([Tag3 (("O_F", 2007), 0, (Tag1 ([(("%", 2008), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -571), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -570), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -569), 0), 100000000, 0, -568), 0), 100000000, 0, -567), 0, (("src/int_intf.ml", 405, 13435, 13441), ("src/int_intf.ml", 405, 13435, 13470), 0), 0, Tag1 ("Base__Int_intf", 154)), 0); (("/%", 2009), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -566), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -565), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -564), 0), 100000000, 0, -563), 0), 100000000, 0, -562), 0, (("src/int_intf.ml", 406, 13471, 13477), ("src/int_intf.ml", 406, 13471, 13507), 0), 0, Tag1 ("Base__Int_intf", 155)), 0); (("//", 2010), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -561), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -560), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -559), 0), 100000000, 0, -558), 0), 100000000, 0, -557), 0, (("src/int_intf.ml", 407, 13508, 13514), ("src/int_intf.ml", 407, 13508, 13546), 0), 0, Tag1 ("Base__Int_intf", 156)), 0)]), 0, (("src/int_intf.ml", 404, 13414, 13418), ("src/int_intf.ml", 408, 13547, 13554), 0), Tag1 ("Base__Int_intf", 157)), 0, 0)]), 0, (("src/int_intf.ml", 402, 13354, 13356), ("src/int_intf.ml", 409, 13555, 13560), 0), Tag1 ("Base__Int_intf", 158)), 0, 0); Tag4 (("Hexable", 1964), (((Tag1 ((Tag2 ("Base__Int_intf")), "Hexable"))), 0, (("src/int_intf.ml", 416, 13696, 13698), ("src/int_intf.ml", 416, 13696, 13727), 0), Tag1 ("Base__Int_intf", 160)), 0); Tag4 (("Int_without_module_types", 1965), (((Tag1 ((Tag2 ("Base__Int_intf")), "Int_without_module_types"))), 0, (("src/int_intf.ml", 418, 13729, 13731), ("src/int_intf.ml", 418, 13729, 13794), 0), Tag1 ("Base__Int_intf", 161)), 0); Tag4 (("Operators", 1966), (((Tag1 ((Tag2 ("Base__Int_intf")), "Operators"))), 0, (("src/int_intf.ml", 419, 13795, 13797), ("src/int_intf.ml", 419, 13795, 13830), 0), Tag1 ("Base__Int_intf", 162)), 0); Tag4 (("Operators_unbounded", 1967), (((Tag1 ((Tag2 ("Base__Int_intf")), "Operators_unbounded"))), 0, (("src/int_intf.ml", 420, 13831, 13833), ("src/int_intf.ml", 420, 13831, 13886), 0), Tag1 ("Base__Int_intf", 163)), 0); Tag4 (("Round", 1968), (((Tag1 ((Tag2 ("Base__Int_intf")), "Round"))), 0, (("src/int_intf.ml", 421, 13887, 13889), ("src/int_intf.ml", 421, 13887, 13914), 0), Tag1 ("Base__Int_intf", 164)), 0); Tag4 (("S", 1969), (((Tag1 ((Tag2 ("Base__Int_intf")), "S"))), 0, (("src/int_intf.ml", 422, 13915, 13917), ("src/int_intf.ml", 422, 13915, 13934), 0), Tag1 ("Base__Int_intf", 165)), 0); Tag4 (("S_common", 1970), (((Tag1 ((Tag2 ("Base__Int_intf")), "S_common"))), 0, (("src/int_intf.ml", 423, 13935, 13937), ("src/int_intf.ml", 423, 13935, 13968), 0), Tag1 ("Base__Int_intf", 166)), 0); Tag4 (("S_unbounded", 1971), (((Tag1 ((Tag2 ("Base__Int_intf")), "S_unbounded"))), 0, (("src/int_intf.ml", 424, 13969, 13971), ("src/int_intf.ml", 424, 13969, 14008), 0), Tag1 ("Base__Int_intf", 167)), 0)], "Base__Int", [("Base__Int", ("\165Z\179\140\230$\131\175\209\172\214\"\170\214{\250")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__StringLabels", ("\134F\024\226\216Is#\223\230\234\169Z\206Gc")); ("Stdlib__StdLabels", (".\193\n\229\139\017\212C-ZA\\kz-\128")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Printf", ("\215<\139]\021\142\224E\245m\198qc(W\229")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__MoreLabels", ("\248\232\248\254`<\230\241\161U\193U\1466J\238")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__ListLabels", ("*\194\012\191\020%\170\249m\002\180\178hk\205\220")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shadow_stdlib", ("\219zi\164\203\158e)\232\221\196\168\138x\142\018")); ("Sexplib0__Sexpable", ("\251${\207(\249/z\242\255\250^\141\156\210e")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv_error", ("kzv!\151~\198P\000\165\176d\007\251p\232")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Base_internalhash_types", ("0\148#2\226\223\018\135\173>!\020\237\017\255\149")); ("Base__T", ("+t\159\169\027\152\205\235\003\237\133\177\024\n6'")); ("Base__Sys0", ("\206z\231\154s\\\136\2364\131\005\014\031\152m3")); ("Base__Stringable", ("\170\025\162\136\234\162\n\161\1491>\145\210@\237t")); ("Base__String0", ("\212\221L\220\245\255\162P\228\224\189\216\135H\149O")); ("Base__Source_code_position0", ("_\003P6\254\029\206\005\130\136\180\019\145\230\000M")); ("Base__Sign0", ("\152\138\204\175\244\128J\165\221\165\160\150y\1305i")); ("Base__Sexp", ("\154\187\171&\209=\153[\236\250!U\174`\190T")); ("Base__Result", ("\204|\215\173FMa\2511<&\215T\194$\228")); ("Base__Printf", ("\000\196c,\214\127\226\174\220\190\253z!\242\028\250")); ("Base__Pretty_printer", ("\175\005\031\018\015a\159\220\154c'(a\239j\233")); ("Base__Ppx_hash_lib", ("\199\141\178\193\006\209L\007^\020(\131\224sn8")); ("Base__Ppx_compare_lib", ("\243\186~\233\228\199Ah\181.\223\004e\231\129S")); ("Base__Poly0", ("\230;\143\234\255.H\132KOe7\155\\\023f")); ("Base__Or_error", ("\193\133)\bO\210\2517\168*\203\148\143\200\127\177")); ("Base__Monad_intf", ("\208\203\163\152\184O\130?\012:\168\247}\018\253\155")); ("Base__Monad", ("!\244\168\2352=\137Lm\219\129K\216\199\145\\")); ("Base__Lazy", ("@`\165\196 \235)\136ANe:p\169$\185")); ("Base__Invariant_intf", ("\213\204\238\235\236[\198\145\028\2392\015\243\177S\249")); ("Base__Invariant", ("\135\153\136\\\129SD\228\202l\255\152\139\253\015\201")); ("Base__Intable", ("\028\249=Y\003]\231qd\238\172\004b\170\142\255")); ("Base__Int_intf", ("\238Q\2457\239\156\018\183J\015\240\178\193b\166@")); ("Base__Int0", ("N\1310\012\227\254\000\255_\222!\018\016\003\1779")); ("Base__Info_intf", ("\184\209'\173\251\219\167X|v\188]\190o5X")); ("Base__Info", ("-\011\149\203\248\030\2301\1907\1630\189\128\209\170")); ("Base__Import0", ("\156\129U\197Y[\\\153\017Ho\203\173\204\220\020")); ("Base__Import", ("\014\187\247\141\187\181\142g\176:s_,\181\219\209")); ("Base__Identifiable_intf", ("hK7}\187\129\022-r\233\241\192Q\161=j")); ("Base__Identifiable", ("L\020\162\189\228\217^\171\158H_\157\164c\130\242")); ("Base__Hashable_intf", ("\128\015G\244\135R\026\202\128F?)\193\004\195\181")); ("Base__Hashable", ("\027\187\158\245r}\018\193dbq\196\005\170g\252")); ("Base__Hash_intf", ("h\004P\218\1531G\127\212\208A\024\140\164iq")); ("Base__Hash", ("\206Rc\194\234{s3\248\165\024\162\203{\206\206")); ("Base__Globalize", ("<\243w~.\180\196t\159\193\174[\227\139\215G")); ("Base__Formatter", ("\193\149\030\140\154\1505b\162a`%\243\185'%")); ("Base__Floatable", ("\239\176\151\139\173ft(q\190\205\030C\170\197\177")); ("Base__Field", ("8In\234X\202\188G\186\208$\192\175\136\214v")); ("Base__Error", ("\199\218\231n\155/\159\156\146\247\148t\237\003\t\153")); ("Base__Either0", ("!9-\011n\2077eZ\212\031c\227\029\206\t")); ("Base__Comparisons", ("\196\196Y\"{\163~)\\G/\155:\004\141;")); ("Base__Comparator", ("\002\135z7b\025&\207\t\188\239&U3R\167")); ("Base__Comparable_intf", ("\252n\002\221\246\143r\235oJ\240\151\202\211\161\254")); ("Base__Comparable", (":\134'\156u#\215\225\129\191\162\229\200\185l\012")); ("Base__Bool0", ("\177f\254p\023\143&\239\020\136\206\242~\018F\251")); ("Base__Applicative_intf", ("J\176\203\159\235N(\235\027\232\198+\224\205*A")); ("Base__Applicative", ("\157\024\176\241a\165\204\133\003s3\214\007\131\244\n")); ("Base__", ("p\252\007\139\128\163W\025+\0225\001\246|P\158"))], [(0)])
module type S_unbounded = Base__Int_intf.S_unbounded

type cl_typ =
    CL_SORT
  | CL_FUN
  | CL_SECVAR of Names.variable
  | CL_CONST of Names.Constant.t
  | CL_IND of Names.inductive
  | CL_PROJ of Names.Projection.Repr.t
val cl_typ_eq : cl_typ -> cl_typ -> bool
val subst_cl_typ : Environ.env -> Mod_subst.substitution -> cl_typ -> cl_typ
val cl_typ_ord : cl_typ -> cl_typ -> int
type coe_typ = Names.GlobRef.t
type coe_info_typ = {
  coe_value : Names.GlobRef.t;
  coe_typ : Constr.t;
  coe_local : bool;
  coe_reversible : bool;
  coe_is_identity : bool;
  coe_is_projection : Names.Projection.Repr.t option;
  coe_source : cl_typ;
  coe_target : cl_typ;
  coe_param : int;
}
type inheritance_path = coe_info_typ list
val class_exists : cl_typ -> bool
val class_nparams : cl_typ -> int
val find_class_type :
  Environ.env ->
  Evd.evar_map ->
  EConstr.types -> cl_typ * EConstr.EInstance.t * EConstr.constr list
val class_of :
  Environ.env -> Evd.evar_map -> EConstr.types -> EConstr.types * cl_typ
val class_args_of :
  Environ.env -> Evd.evar_map -> EConstr.types -> EConstr.constr list
val subst_coercion : Mod_subst.substitution -> coe_info_typ -> coe_info_typ
val declare_coercion :
  Environ.env -> Evd.evar_map -> ?update:bool -> coe_info_typ -> unit
val coercion_exists : coe_typ -> bool
val coercion_info : coe_typ -> coe_info_typ
val lookup_path_between_class : cl_typ * cl_typ -> inheritance_path
val lookup_path_between :
  Environ.env ->
  Evd.evar_map -> src:EConstr.types -> tgt:EConstr.types -> inheritance_path
val lookup_path_to_fun_from :
  Environ.env -> Evd.evar_map -> EConstr.types -> inheritance_path
val lookup_path_to_sort_from :
  Environ.env -> Evd.evar_map -> EConstr.types -> inheritance_path
val lookup_pattern_path_between :
  Environ.env ->
  Names.inductive * Names.inductive -> (Names.constructor * int) list
val path_is_reversible : inheritance_path -> bool
val install_path_printer :
  ((cl_typ * cl_typ) * inheritance_path -> Pp.t) -> unit
val install_path_comparator :
  (Environ.env ->
   Evd.evar_map -> cl_typ -> inheritance_path -> inheritance_path -> bool) ->
  unit
val string_of_class : cl_typ -> string
val pr_class : cl_typ -> Pp.t
val inheritance_graph : unit -> ((cl_typ * cl_typ) * inheritance_path) list
val classes : unit -> cl_typ list
val coercions : unit -> coe_info_typ list
val hide_coercion : coe_typ -> int option
module ClTypSet :
  sig
    type elt = cl_typ
    type t
    val empty : t
    val add : elt -> t -> t
    val singleton : elt -> t
    val remove : elt -> t -> t
    val union : t -> t -> t
    val inter : t -> t -> t
    val disjoint : t -> t -> bool
    val diff : t -> t -> t
    val cardinal : t -> int
    val elements : t -> elt list
    val min_elt : t -> elt
    val min_elt_opt : t -> elt option
    val max_elt : t -> elt
    val max_elt_opt : t -> elt option
    val choose : t -> elt
    val choose_opt : t -> elt option
    val find : elt -> t -> elt
    val find_opt : elt -> t -> elt option
    val find_first : (elt -> bool) -> t -> elt
    val find_first_opt : (elt -> bool) -> t -> elt option
    val find_last : (elt -> bool) -> t -> elt
    val find_last_opt : (elt -> bool) -> t -> elt option
    val iter : (elt -> unit) -> t -> unit
    val fold : (elt -> 'acc -> 'acc) -> t -> 'acc -> 'acc
    val map : (elt -> elt) -> t -> t
    val filter : (elt -> bool) -> t -> t
    val filter_map : (elt -> elt option) -> t -> t
    val partition : (elt -> bool) -> t -> t * t
    val split : elt -> t -> t * bool * t
    val is_empty : t -> bool
    val mem : elt -> t -> bool
    val equal : t -> t -> bool
    val compare : t -> t -> int
    val subset : t -> t -> bool
    val for_all : (elt -> bool) -> t -> bool
    val exists : (elt -> bool) -> t -> bool
    val to_list : t -> elt list
    val of_list : elt list -> t
    val to_seq_from : elt -> t -> elt Seq.t
    val to_seq : t -> elt Seq.t
    val to_rev_seq : t -> elt Seq.t
    val add_seq : elt Seq.t -> t -> t
    val of_seq : elt Seq.t -> t
  end("DEBUG:rule", [Tag1 (("cl_typ", 1553), (0, 0, Tag1 ([(("CL_SORT", 951), (0), 0, (("pretyping/coercionops.mli", 19, 796, 798), ("pretyping/coercionops.mli", 19, 796, 807), 0), 0, Tag1 ("Coercionops", 1)); (("CL_FUN", 952), (0), 0, (("pretyping/coercionops.mli", 20, 808, 810), ("pretyping/coercionops.mli", 20, 808, 818), 0), 0, Tag1 ("Coercionops", 2)); (("CL_SECVAR", 953), ([(Tag3 (Tag1 ((Tag2 ("Names")), "variable"), 0, (0)), 100000000, 0, -179)]), 0, (("pretyping/coercionops.mli", 21, 819, 821), ("pretyping/coercionops.mli", 21, 819, 844), 0), 0, Tag1 ("Coercionops", 3)); (("CL_CONST", 954), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -180)]), 0, (("pretyping/coercionops.mli", 22, 845, 847), ("pretyping/coercionops.mli", 22, 845, 871), 0), 0, Tag1 ("Coercionops", 4)); (("CL_IND", 973), ([(Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -181)]), 0, (("pretyping/coercionops.mli", 23, 872, 874), ("pretyping/coercionops.mli", 23, 872, 895), 0), 0, Tag1 ("Coercionops", 5)); (("CL_PROJ", 974), ([(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Projection"), "Repr"), "t"), 0, (0)), 100000000, 0, -182)]), 0, (("pretyping/coercionops.mli", 24, 896, 898), ("pretyping/coercionops.mli", 24, 896, 928), 0), 0, Tag1 ("Coercionops", 6))], 0), 1, 0, 0, 0, 0, 0, (("pretyping/coercionops.mli", 18, 782, 782), ("pretyping/coercionops.mli", 24, 896, 928), 0), 0, 0, 0, Tag1 ("Coercionops", 0)), 1, 0); (("cl_typ_eq", 1554), ((Tag1 (0, (Tag3 ((("cl_typ", 1553)), 0, (0)), 100000000, 0, -178), (Tag1 (0, (Tag3 ((("cl_typ", 1553)), 0, (0)), 100000000, 0, -177), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -176), 0), 100000000, 0, -175), 0), 100000000, 0, -174), 0, (("pretyping/coercionops.mli", 27, 960, 960), ("pretyping/coercionops.mli", 27, 960, 1000), 0), 0, Tag1 ("Coercionops", 7)), 0); (("subst_cl_typ", 1555), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -173), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Mod_subst")), "substitution"), 0, (0)), 100000000, 0, -172), (Tag1 (0, (Tag3 ((("cl_typ", 1553)), 0, (0)), 100000000, 0, -171), (Tag3 ((("cl_typ", 1553)), 0, (0)), 100000000, 0, -170), 0), 100000000, 0, -169), 0), 100000000, 0, -168), 0), 100000000, 0, -167), 0, (("pretyping/coercionops.mli", 29, 1002, 1002), ("pretyping/coercionops.mli", 29, 1002, 1060), 0), 0, Tag1 ("Coercionops", 8)), 0); (("cl_typ_ord", 1556), ((Tag1 (0, (Tag3 ((("cl_typ", 1553)), 0, (0)), 100000000, 0, -166), (Tag1 (0, (Tag3 ((("cl_typ", 1553)), 0, (0)), 100000000, 0, -165), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -164), 0), 100000000, 0, -163), 0), 100000000, 0, -162), 0, (("pretyping/coercionops.mli", 32, 1092, 1092), ("pretyping/coercionops.mli", 32, 1092, 1132), 0), 0, Tag1 ("Coercionops", 9)), 0); Tag1 (("coe_typ", 1557), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -161)), 0, 0, 0, 0, (("pretyping/coercionops.mli", 35, 1176, 1176), ("pretyping/coercionops.mli", 35, 1176, 1200), 0), 0, 0, 0, Tag1 ("Coercionops", 10)), 1, 0); Tag1 (("coe_info_typ", 1558), (0, 0, [[(("coe_value", 1072), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -151), (("pretyping/coercionops.mli", 39, 1280, 1282), ("pretyping/coercionops.mli", 39, 1280, 1304), 0), 0, Tag1 ("Coercionops", 13)); (("coe_typ", 1230), 0, (Tag3 (Tag1 ((Tag2 ("Constr")), "t"), 0, (0)), 100000000, 0, -152), (("pretyping/coercionops.mli", 40, 1305, 1307), ("pretyping/coercionops.mli", 40, 1305, 1326), 0), 0, Tag1 ("Coercionops", 14)); (("coe_local", 1231), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -153), (("pretyping/coercionops.mli", 41, 1327, 1329), ("pretyping/coercionops.mli", 41, 1327, 1346), 0), 0, Tag1 ("Coercionops", 15)); (("coe_reversible", 1232), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -154), (("pretyping/coercionops.mli", 42, 1347, 1349), ("pretyping/coercionops.mli", 42, 1347, 1371), 0), 0, Tag1 ("Coercionops", 16)); (("coe_is_identity", 1233), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -155), (("pretyping/coercionops.mli", 43, 1372, 1374), ("pretyping/coercionops.mli", 43, 1372, 1397), 0), 0, Tag1 ("Coercionops", 17)); (("coe_is_projection", 1234), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Projection"), "Repr"), "t"), 0, (0)), 100000000, 0, -157)], (0)), 100000000, 0, -156), (("pretyping/coercionops.mli", 44, 1398, 1400), ("pretyping/coercionops.mli", 44, 1398, 1445), 0), 0, Tag1 ("Coercionops", 18)); (("coe_source", 1235), 0, (Tag3 ((("cl_typ", 1553)), 0, (0)), 100000000, 0, -158), (("pretyping/coercionops.mli", 45, 1446, 1448), ("pretyping/coercionops.mli", 45, 1446, 1468), 0), 0, Tag1 ("Coercionops", 19)); (("coe_target", 1236), 0, (Tag3 ((("cl_typ", 1553)), 0, (0)), 100000000, 0, -159), (("pretyping/coercionops.mli", 46, 1469, 1471), ("pretyping/coercionops.mli", 46, 1469, 1491), 0), 0, Tag1 ("Coercionops", 20)); (("coe_param", 1237), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -160), (("pretyping/coercionops.mli", 47, 1492, 1494), ("pretyping/coercionops.mli", 47, 1492, 1510), 0), 0, Tag1 ("Coercionops", 21))]], 1, 0, 0, 0, 0, 0, (("pretyping/coercionops.mli", 38, 1258, 1258), ("pretyping/coercionops.mli", 48, 1511, 1512), 0), 0, 0, 0, Tag1 ("Coercionops", 11)), 1, 0); Tag1 (("inheritance_path", 1559), (0, 0, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("coe_info_typ", 1558)), 0, (0)), 100000000, 0, -150)], (0)), 100000000, 0, -149)), 0, 0, 0, 0, (("pretyping/coercionops.mli", 51, 1571, 1571), ("pretyping/coercionops.mli", 51, 1571, 1612), 0), 0, 0, 0, Tag1 ("Coercionops", 22)), 1, 0); (("class_exists", 1560), ((Tag1 (0, (Tag3 ((("cl_typ", 1553)), 0, (0)), 100000000, 0, -148), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -147), 0), 100000000, 0, -146), 0, (("pretyping/coercionops.mli", 55, 1651, 1651), ("pretyping/coercionops.mli", 55, 1651, 1684), 0), 0, Tag1 ("Coercionops", 23)), 0); (("class_nparams", 1561), ((Tag1 (0, (Tag3 ((("cl_typ", 1553)), 0, (0)), 100000000, 0, -145), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -144), 0), 100000000, 0, -143), 0, (("pretyping/coercionops.mli", 58, 1738, 1738), ("pretyping/coercionops.mli", 58, 1738, 1771), 0), 0, Tag1 ("Coercionops", 24)), 0); (("find_class_type", 1562), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -142), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -141), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -140), (Tag2 ([(Tag3 ((("cl_typ", 1553)), 0, (0)), 100000000, 0, -136); (Tag3 (Tag1 (Tag1 ((Tag2 ("EConstr")), "EInstance"), "t"), 0, (0)), 100000000, 0, -137); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -139)], (0)), 100000000, 0, -138)]), 100000000, 0, -135), 0), 100000000, 0, -134), 0), 100000000, 0, -133), 0), 100000000, 0, -132), 0, (("pretyping/coercionops.mli", 62, 1889, 1889), ("pretyping/coercionops.mli", 62, 1889, 1973), 0), 0, Tag1 ("Coercionops", 25)), 0); (("class_of", 1563), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -131), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -130), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -129), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -127); (Tag3 ((("cl_typ", 1553)), 0, (0)), 100000000, 0, -128)]), 100000000, 0, -126), 0), 100000000, 0, -125), 0), 100000000, 0, -124), 0), 100000000, 0, -123), 0, (("pretyping/coercionops.mli", 65, 2031, 2031), ("pretyping/coercionops.mli", 65, 2031, 2088), 0), 0, Tag1 ("Coercionops", 26)), 0); (("class_args_of", 1564), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -122), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -121), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -120), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -119)], (0)), 100000000, 0, -118), 0), 100000000, 0, -117), 0), 100000000, 0, -116), 0), 100000000, 0, -115), 0, (("pretyping/coercionops.mli", 67, 2090, 2090), ("pretyping/coercionops.mli", 67, 2090, 2149), 0), 0, Tag1 ("Coercionops", 27)), 0); (("subst_coercion", 1565), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Mod_subst")), "substitution"), 0, (0)), 100000000, 0, -114), (Tag1 (0, (Tag3 ((("coe_info_typ", 1558)), 0, (0)), 100000000, 0, -113), (Tag3 ((("coe_info_typ", 1558)), 0, (0)), 100000000, 0, -112), 0), 100000000, 0, -111), 0), 100000000, 0, -110), 0, (("pretyping/coercionops.mli", 69, 2151, 2151), ("pretyping/coercionops.mli", 69, 2151, 2216), 0), 0, Tag1 ("Coercionops", 28)), 0); (("declare_coercion", 1566), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -109), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -108), (Tag1 (Tag1 ("update"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -107)], (0)), 100000000, 0, -106), (Tag1 (0, (Tag3 ((("coe_info_typ", 1558)), 0, (0)), 100000000, 0, -105), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -104), 0), 100000000, 0, -103), 0), 100000000, 0, -102), 0), 100000000, 0, -101), 0), 100000000, 0, -100), 0, (("pretyping/coercionops.mli", 72, 2296, 2296), ("pretyping/coercionops.mli", 72, 2296, 2374), 0), 0, Tag1 ("Coercionops", 29)), 0); (("coercion_exists", 1567), ((Tag1 (0, (Tag3 ((("coe_typ", 1557)), 0, (0)), 100000000, 0, -99), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -98), 0), 100000000, 0, -97), 0, (("pretyping/coercionops.mli", 75, 2414, 2414), ("pretyping/coercionops.mli", 75, 2414, 2451), 0), 0, Tag1 ("Coercionops", 30)), 0); (("coercion_info", 1568), ((Tag1 (0, (Tag3 ((("coe_typ", 1557)), 0, (0)), 100000000, 0, -96), (Tag3 ((("coe_info_typ", 1558)), 0, (0)), 100000000, 0, -95), 0), 100000000, 0, -94), 0, (("pretyping/coercionops.mli", 77, 2453, 2453), ("pretyping/coercionops.mli", 77, 2453, 2496), 0), 0, Tag1 ("Coercionops", 31)), 0); (("lookup_path_between_class", 1569), ((Tag1 (0, (Tag2 ([(Tag3 ((("cl_typ", 1553)), 0, (0)), 100000000, 0, -92); (Tag3 ((("cl_typ", 1553)), 0, (0)), 100000000, 0, -93)]), 100000000, 0, -91), (Tag3 ((("inheritance_path", 1559)), 0, (0)), 100000000, 0, -90), 0), 100000000, 0, -89), 0, (("pretyping/coercionops.mli", 86, 2737, 2737), ("pretyping/coercionops.mli", 86, 2737, 2804), 0), 0, Tag1 ("Coercionops", 32)), 0); (("lookup_path_between", 1570), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -88), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -87), (Tag1 (("src"), (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -86), (Tag1 (("tgt"), (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -85), (Tag3 ((("inheritance_path", 1559)), 0, (0)), 100000000, 0, -84), 0), 100000000, 0, -83), 0), 100000000, 0, -82), 0), 100000000, 0, -81), 0), 100000000, 0, -80), 0, (("pretyping/coercionops.mli", 87, 2805, 2805), ("pretyping/coercionops.mli", 88, 2876, 2894), 0), 0, Tag1 ("Coercionops", 33)), 0); (("lookup_path_to_fun_from", 1571), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -79), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -78), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -77), (Tag3 ((("inheritance_path", 1559)), 0, (0)), 100000000, 0, -76), 0), 100000000, 0, -75), 0), 100000000, 0, -74), 0), 100000000, 0, -73), 0, (("pretyping/coercionops.mli", 89, 2895, 2895), ("pretyping/coercionops.mli", 89, 2895, 2969), 0), 0, Tag1 ("Coercionops", 34)), 0); (("lookup_path_to_sort_from", 1572), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -72), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -71), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -70), (Tag3 ((("inheritance_path", 1559)), 0, (0)), 100000000, 0, -69), 0), 100000000, 0, -68), 0), 100000000, 0, -67), 0), 100000000, 0, -66), 0, (("pretyping/coercionops.mli", 90, 2970, 2970), ("pretyping/coercionops.mli", 90, 2970, 3045), 0), 0, Tag1 ("Coercionops", 35)), 0); (("lookup_pattern_path_between", 1573), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -65), (Tag1 (0, (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -63); (Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -64)]), 100000000, 0, -62), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Names")), "constructor"), 0, (0)), 100000000, 0, -60); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -61)]), 100000000, 0, -59)], (0)), 100000000, 0, -58), 0), 100000000, 0, -57), 0), 100000000, 0, -56), 0, (("pretyping/coercionops.mli", 91, 3046, 3046), ("pretyping/coercionops.mli", 92, 3080, 3138), 0), 0, Tag1 ("Coercionops", 36)), 0); (("path_is_reversible", 1574), ((Tag1 (0, (Tag3 ((("inheritance_path", 1559)), 0, (0)), 100000000, 0, -55), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -54), 0), 100000000, 0, -53), 0, (("pretyping/coercionops.mli", 94, 3140, 3140), ("pretyping/coercionops.mli", 94, 3140, 3189), 0), 0, Tag1 ("Coercionops", 37)), 0); (("install_path_printer", 1575), ((Tag1 (0, (Tag1 (0, (Tag2 ([(Tag2 ([(Tag3 ((("cl_typ", 1553)), 0, (0)), 100000000, 0, -50); (Tag3 ((("cl_typ", 1553)), 0, (0)), 100000000, 0, -51)]), 100000000, 0, -49); (Tag3 ((("inheritance_path", 1559)), 0, (0)), 100000000, 0, -52)]), 100000000, 0, -48), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -47), 0), 100000000, 0, -46), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -45), 0), 100000000, 0, -44), 0, (("pretyping/coercionops.mli", 98, 3211, 3211), ("pretyping/coercionops.mli", 99, 3238, 3294), 0), 0, Tag1 ("Coercionops", 38)), 0); (("install_path_comparator", 1576), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -43), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -42), (Tag1 (0, (Tag3 ((("cl_typ", 1553)), 0, (0)), 100000000, 0, -41), (Tag1 (0, (Tag3 ((("inheritance_path", 1559)), 0, (0)), 100000000, 0, -40), (Tag1 (0, (Tag3 ((("inheritance_path", 1559)), 0, (0)), 100000000, 0, -39), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -38), 0), 100000000, 0, -37), 0), 100000000, 0, -36), 0), 100000000, 0, -35), 0), 100000000, 0, -34), 0), 100000000, 0, -33), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -32), 0), 100000000, 0, -31), 0, (("pretyping/coercionops.mli", 100, 3295, 3295), ("pretyping/coercionops.mli", 101, 3325, 3410), 0), 0, Tag1 ("Coercionops", 39)), 0); (("string_of_class", 1577), ((Tag1 (0, (Tag3 ((("cl_typ", 1553)), 0, (0)), 100000000, 0, -30), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -29), 0), 100000000, 0, -28), 0, (("pretyping/coercionops.mli", 105, 3461, 3461), ("pretyping/coercionops.mli", 105, 3461, 3499), 0), 0, Tag1 ("Coercionops", 40)), 0); (("pr_class", 1578), ((Tag1 (0, (Tag3 ((("cl_typ", 1553)), 0, (0)), 100000000, 0, -27), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -26), 0), 100000000, 0, -25), 0, (("pretyping/coercionops.mli", 106, 3500, 3500), ("pretyping/coercionops.mli", 106, 3500, 3529), 0), 0, Tag1 ("Coercionops", 41)), 0); (("inheritance_graph", 1579), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -24), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag2 ([(Tag3 ((("cl_typ", 1553)), 0, (0)), 100000000, 0, -21); (Tag3 ((("cl_typ", 1553)), 0, (0)), 100000000, 0, -22)]), 100000000, 0, -20); (Tag3 ((("inheritance_path", 1559)), 0, (0)), 100000000, 0, -23)]), 100000000, 0, -19)], (0)), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("pretyping/coercionops.mli", 107, 3530, 3530), ("pretyping/coercionops.mli", 107, 3530, 3605), 0), 0, Tag1 ("Coercionops", 42)), 0); (("classes", 1580), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -16), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("cl_typ", 1553)), 0, (0)), 100000000, 0, -15)], (0)), 100000000, 0, -14), 0), 100000000, 0, -13), 0, (("pretyping/coercionops.mli", 108, 3606, 3606), ("pretyping/coercionops.mli", 108, 3606, 3639), 0), 0, Tag1 ("Coercionops", 43)), 0); (("coercions", 1581), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("coe_info_typ", 1558)), 0, (0)), 100000000, 0, -11)], (0)), 100000000, 0, -10), 0), 100000000, 0, -9), 0, (("pretyping/coercionops.mli", 109, 3640, 3640), ("pretyping/coercionops.mli", 109, 3640, 3681), 0), 0, Tag1 ("Coercionops", 44)), 0); (("hide_coercion", 1582), ((Tag1 (0, (Tag3 ((("coe_typ", 1557)), 0, (0)), 100000000, 0, -8), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -7)], (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("pretyping/coercionops.mli", 113, 3836, 3836), ("pretyping/coercionops.mli", 113, 3836, 3877), 0), 0, Tag1 ("Coercionops", 45)), 0); Tag3 (("ClTypSet", 1583), 0, (Tag1 ([Tag1 (("elt", 1585), (0, 0, 0, 1, ((Tag3 ((("cl_typ", 1553)), 0, (0)), 100000000, 0, -409)), 0, 0, 0, 0, (("pretyping/coercionops.mli", 115, 3879, 3908), ("pretyping/coercionops.mli", 115, 3879, 3925), 0), 0, 0, 0, Tag1 ("Coercionops", 46)), 1, 0); Tag1 (("t", 1586), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("set.mli", 74, 2901, 2905), ("set.mli", 74, 2901, 2911), 0), 0, 0, 0, Tag1 ("Stdlib__Set", 4)), 1, 0); (("empty", 1587), ((Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -408), 0, (("set.mli", 77, 2942, 2946), ("set.mli", 77, 2942, 2958), 0), 0, Tag1 ("Stdlib__Set", 5)), 0); (("add", 1588), ((Tag1 (0, (Tag3 ((("elt", 1585)), 0, (0)), 100000000, 0, -407), (Tag1 (0, (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -406), (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -405), 0), 100000000, 0, -404), 0), 100000000, 0, -403), 0, (("set.mli", 80, 2986, 2990), ("set.mli", 80, 2986, 3012), 0), 0, Tag1 ("Stdlib__Set", 6)), 0); (("singleton", 1589), ((Tag1 (0, (Tag3 ((("elt", 1585)), 0, (0)), 100000000, 0, -402), (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -401), 0), 100000000, 0, -400), 0, (("set.mli", 86, 3278, 3282), ("set.mli", 86, 3278, 3305), 0), 0, Tag1 ("Stdlib__Set", 7)), 0); (("remove", 1590), ((Tag1 (0, (Tag3 ((("elt", 1585)), 0, (0)), 100000000, 0, -399), (Tag1 (0, (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -398), (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -397), 0), 100000000, 0, -396), 0), 100000000, 0, -395), 0, (("set.mli", 89, 3381, 3385), ("set.mli", 89, 3381, 3410), 0), 0, Tag1 ("Stdlib__Set", 8)), 0); (("union", 1591), ((Tag1 (0, (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -394), (Tag1 (0, (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -393), (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -392), 0), 100000000, 0, -391), 0), 100000000, 0, -390), 0, (("set.mli", 95, 3677, 3681), ("set.mli", 95, 3677, 3703), 0), 0, Tag1 ("Stdlib__Set", 9)), 0); (("inter", 1592), ((Tag1 (0, (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -389), (Tag1 (0, (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -388), (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -387), 0), 100000000, 0, -386), 0), 100000000, 0, -385), 0, (("set.mli", 98, 3727, 3731), ("set.mli", 98, 3727, 3753), 0), 0, Tag1 ("Stdlib__Set", 10)), 0); (("disjoint", 1593), ((Tag1 (0, (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -384), (Tag1 (0, (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -383), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -382), 0), 100000000, 0, -381), 0), 100000000, 0, -380), 0, (("set.mli", 101, 3784, 3788), ("set.mli", 101, 3784, 3816), 0), 0, Tag1 ("Stdlib__Set", 11)), 0); (("diff", 1594), ((Tag1 (0, (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -379), (Tag1 (0, (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -378), (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -377), 0), 100000000, 0, -376), 0), 100000000, 0, -375), 0, (("set.mli", 105, 3880, 3884), ("set.mli", 105, 3880, 3905), 0), 0, Tag1 ("Stdlib__Set", 12)), 0); (("cardinal", 1595), ((Tag1 (0, (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -374), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -373), 0), 100000000, 0, -372), 0, (("set.mli", 109, 4007, 4011), ("set.mli", 109, 4007, 4033), 0), 0, Tag1 ("Stdlib__Set", 13)), 0); (("elements", 1596), ((Tag1 (0, (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -371), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 1585)), 0, (0)), 100000000, 0, -370)], (0)), 100000000, 0, -369), 0), 100000000, 0, -368), 0, (("set.mli", 114, 4120, 4124), ("set.mli", 114, 4120, 4151), 0), 0, Tag1 ("Stdlib__Set", 14)), 0); (("min_elt", 1597), ((Tag1 (0, (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -367), (Tag3 ((("elt", 1585)), 0, (0)), 100000000, 0, -366), 0), 100000000, 0, -365), 0, (("set.mli", 120, 4380, 4384), ("set.mli", 120, 4380, 4405), 0), 0, Tag1 ("Stdlib__Set", 15)), 0); (("min_elt_opt", 1598), ((Tag1 (0, (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -364), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1585)), 0, (0)), 100000000, 0, -363)], (0)), 100000000, 0, -362), 0), 100000000, 0, -361), 0, (("set.mli", 125, 4567, 4571), ("set.mli", 125, 4567, 4603), 0), 0, Tag1 ("Stdlib__Set", 16)), 0); (("max_elt", 1599), ((Tag1 (0, (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -360), (Tag3 ((("elt", 1585)), 0, (0)), 100000000, 0, -359), 0), 100000000, 0, -358), 0, (("set.mli", 131, 4774, 4778), ("set.mli", 131, 4774, 4799), 0), 0, Tag1 ("Stdlib__Set", 17)), 0); (("max_elt_opt", 1600), ((Tag1 (0, (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -357), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1585)), 0, (0)), 100000000, 0, -356)], (0)), 100000000, 0, -355), 0), 100000000, 0, -354), 0, (("set.mli", 135, 4890, 4894), ("set.mli", 135, 4890, 4926), 0), 0, Tag1 ("Stdlib__Set", 18)), 0); (("choose", 1601), ((Tag1 (0, (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -353), (Tag3 ((("elt", 1585)), 0, (0)), 100000000, 0, -352), 0), 100000000, 0, -351), 0, (("set.mli", 140, 5041, 5045), ("set.mli", 140, 5041, 5065), 0), 0, Tag1 ("Stdlib__Set", 19)), 0); (("choose_opt", 1602), ((Tag1 (0, (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -350), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1585)), 0, (0)), 100000000, 0, -349)], (0)), 100000000, 0, -348), 0), 100000000, 0, -347), 0, (("set.mli", 145, 5263, 5267), ("set.mli", 145, 5263, 5298), 0), 0, Tag1 ("Stdlib__Set", 20)), 0); (("find", 1603), ((Tag1 (0, (Tag3 ((("elt", 1585)), 0, (0)), 100000000, 0, -346), (Tag1 (0, (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -345), (Tag3 ((("elt", 1585)), 0, (0)), 100000000, 0, -344), 0), 100000000, 0, -343), 0), 100000000, 0, -342), 0, (("set.mli", 153, 5541, 5549), ("set.mli", 153, 5541, 5574), 0), 0, Tag1 ("Stdlib__Set", 21)), 0); (("find_opt", 1604), ((Tag1 (0, (Tag3 ((("elt", 1585)), 0, (0)), 100000000, 0, -341), (Tag1 (0, (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -340), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1585)), 0, (0)), 100000000, 0, -339)], (0)), 100000000, 0, -338), 0), 100000000, 0, -337), 0), 100000000, 0, -336), 0, (("set.mli", 159, 5752, 5756), ("set.mli", 159, 5752, 5792), 0), 0, Tag1 ("Stdlib__Set", 22)), 0); (("find_first", 1605), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1585)), 0, (0)), 100000000, 0, -335), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -334), 0), 100000000, 0, -333), (Tag1 (0, (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -332), (Tag3 ((("elt", 1585)), 0, (0)), 100000000, 0, -331), 0), 100000000, 0, -330), 0), 100000000, 0, -329), 0, (("set.mli", 165, 5963, 5967), ("set.mli", 165, 5963, 6008), 0), 0, Tag1 ("Stdlib__Set", 23)), 0); (("find_first_opt", 1606), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1585)), 0, (0)), 100000000, 0, -328), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -327), 0), 100000000, 0, -326), (Tag1 (0, (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -325), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1585)), 0, (0)), 100000000, 0, -324)], (0)), 100000000, 0, -323), 0), 100000000, 0, -322), 0), 100000000, 0, -321), 0, (("set.mli", 177, 6482, 6486), ("set.mli", 177, 6482, 6538), 0), 0, Tag1 ("Stdlib__Set", 24)), 0); (("find_last", 1607), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1585)), 0, (0)), 100000000, 0, -320), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -319), 0), 100000000, 0, -318), (Tag1 (0, (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -317), (Tag3 ((("elt", 1585)), 0, (0)), 100000000, 0, -316), 0), 100000000, 0, -315), 0), 100000000, 0, -314), 0, (("set.mli", 184, 6779, 6783), ("set.mli", 184, 6779, 6823), 0), 0, Tag1 ("Stdlib__Set", 25)), 0); (("find_last_opt", 1608), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1585)), 0, (0)), 100000000, 0, -313), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -312), 0), 100000000, 0, -311), (Tag1 (0, (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -310), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1585)), 0, (0)), 100000000, 0, -309)], (0)), 100000000, 0, -308), 0), 100000000, 0, -307), 0), 100000000, 0, -306), 0, (("set.mli", 190, 7044, 7048), ("set.mli", 190, 7044, 7099), 0), 0, Tag1 ("Stdlib__Set", 26)), 0); (("iter", 1609), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1585)), 0, (0)), 100000000, 0, -305), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -304), 0), 100000000, 0, -303), (Tag1 (0, (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -302), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -301), 0), 100000000, 0, -300), 0), 100000000, 0, -299), 0, (("set.mli", 198, 7371, 7375), ("set.mli", 198, 7371, 7411), 0), 0, Tag1 ("Stdlib__Set", 27)), 0); (("fold", 1610), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1585)), 0, (0)), 100000000, 0, -298), (Tag1 (0, ((("acc")), 100000000, 0, -294), ((("acc")), 100000000, 0, -294), 0), 100000000, 0, -297), 0), 100000000, 0, -296), (Tag1 (0, (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -295), (Tag1 (0, ((("acc")), 100000000, 0, -294), ((("acc")), 100000000, 0, -294), 0), 100000000, 0, -293), 0), 100000000, 0, -292), 0), 100000000, 0, -291), 0, (("set.mli", 203, 7616, 7620), ("set.mli", 203, 7616, 7672), 0), 0, Tag1 ("Stdlib__Set", 28)), 0); (("map", 1611), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1585)), 0, (0)), 100000000, 0, -290), (Tag3 ((("elt", 1585)), 0, (0)), 100000000, 0, -289), 0), 100000000, 0, -288), (Tag1 (0, (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -287), (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -286), 0), 100000000, 0, -285), 0), 100000000, 0, -284), 0, (("set.mli", 209, 7860, 7864), ("set.mli", 209, 7860, 7895), 0), 0, Tag1 ("Stdlib__Set", 29)), 0); (("filter", 1612), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1585)), 0, (0)), 100000000, 0, -283), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -282), 0), 100000000, 0, -281), (Tag1 (0, (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -280), (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -279), 0), 100000000, 0, -278), 0), 100000000, 0, -277), 0, (("set.mli", 221, 8372, 8376), ("set.mli", 221, 8372, 8411), 0), 0, Tag1 ("Stdlib__Set", 30)), 0); (("filter_map", 1613), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1585)), 0, (0)), 100000000, 0, -276), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1585)), 0, (0)), 100000000, 0, -275)], (0)), 100000000, 0, -274), 0), 100000000, 0, -273), (Tag1 (0, (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -272), (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -271), 0), 100000000, 0, -270), 0), 100000000, 0, -269), 0, (("set.mli", 228, 8710, 8714), ("set.mli", 228, 8710, 8759), 0), 0, Tag1 ("Stdlib__Set", 31)), 0); (("partition", 1614), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1585)), 0, (0)), 100000000, 0, -268), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -267), 0), 100000000, 0, -266), (Tag1 (0, (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -265), (Tag2 ([(Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -263); (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -264)]), 100000000, 0, -262), 0), 100000000, 0, -261), 0), 100000000, 0, -260), 0, (("set.mli", 243, 9275, 9279), ("set.mli", 243, 9275, 9321), 0), 0, Tag1 ("Stdlib__Set", 32)), 0); (("split", 1615), ((Tag1 (0, (Tag3 ((("elt", 1585)), 0, (0)), 100000000, 0, -259), (Tag1 (0, (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -258), (Tag2 ([(Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -255); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -256); (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -257)]), 100000000, 0, -254), 0), 100000000, 0, -253), 0), 100000000, 0, -252), 0, (("set.mli", 249, 9562, 9566), ("set.mli", 249, 9562, 9601), 0), 0, Tag1 ("Stdlib__Set", 33)), 0); (("is_empty", 1616), ((Tag1 (0, (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -251), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -250), 0), 100000000, 0, -249), 0, (("set.mli", 260, 10020, 10024), ("set.mli", 260, 10020, 10047), 0), 0, Tag1 ("Stdlib__Set", 34)), 0); (("mem", 1617), ((Tag1 (0, (Tag3 ((("elt", 1585)), 0, (0)), 100000000, 0, -248), (Tag1 (0, (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -247), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -246), 0), 100000000, 0, -245), 0), 100000000, 0, -244), 0, (("set.mli", 263, 10096, 10100), ("set.mli", 263, 10096, 10125), 0), 0, Tag1 ("Stdlib__Set", 35)), 0); (("equal", 1618), ((Tag1 (0, (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -243), (Tag1 (0, (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -242), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -241), 0), 100000000, 0, -240), 0), 100000000, 0, -239), 0, (("set.mli", 266, 10190, 10194), ("set.mli", 266, 10190, 10219), 0), 0, Tag1 ("Stdlib__Set", 36)), 0); (("compare", 1619), ((Tag1 (0, (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -238), (Tag1 (0, (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -237), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -236), 0), 100000000, 0, -235), 0), 100000000, 0, -234), 0, (("set.mli", 270, 10335, 10339), ("set.mli", 270, 10335, 10365), 0), 0, Tag1 ("Stdlib__Set", 37)), 0); (("subset", 1620), ((Tag1 (0, (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -233), (Tag1 (0, (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -232), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -231), 0), 100000000, 0, -230), 0), 100000000, 0, -229), 0, (("set.mli", 274, 10476, 10480), ("set.mli", 274, 10476, 10506), 0), 0, Tag1 ("Stdlib__Set", 38)), 0); (("for_all", 1621), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1585)), 0, (0)), 100000000, 0, -228), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -227), 0), 100000000, 0, -226), (Tag1 (0, (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -225), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -224), 0), 100000000, 0, -223), 0), 100000000, 0, -222), 0, (("set.mli", 278, 10598, 10602), ("set.mli", 278, 10598, 10641), 0), 0, Tag1 ("Stdlib__Set", 39)), 0); (("exists", 1622), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1585)), 0, (0)), 100000000, 0, -221), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -220), 0), 100000000, 0, -219), (Tag1 (0, (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -218), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -217), 0), 100000000, 0, -216), 0), 100000000, 0, -215), 0, (("set.mli", 282, 10737, 10741), ("set.mli", 282, 10737, 10779), 0), 0, Tag1 ("Stdlib__Set", 40)), 0); (("to_list", 1623), ((Tag1 (0, (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -214), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 1585)), 0, (0)), 100000000, 0, -213)], (0)), 100000000, 0, -212), 0), 100000000, 0, -211), 0, (("set.mli", 288, 10922, 10926), ("set.mli", 288, 10922, 10953), 0), 0, Tag1 ("Stdlib__Set", 41)), 0); (("of_list", 1624), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 1585)), 0, (0)), 100000000, 0, -210)], (0)), 100000000, 0, -209), (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -208), 0), 100000000, 0, -207), 0, (("set.mli", 292, 11017, 11021), ("set.mli", 292, 11017, 11047), 0), 0, Tag1 ("Stdlib__Set", 42)), 0); (("to_seq_from", 1625), ((Tag1 (0, (Tag3 ((("elt", 1585)), 0, (0)), 100000000, 0, -206), (Tag1 (0, (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -205), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 1585)), 0, (0)), 100000000, 0, -204)], (0)), 100000000, 0, -203), 0), 100000000, 0, -202), 0), 100000000, 0, -201), 0, (("set.mli", 298, 11268, 11272), ("set.mli", 298, 11268, 11311), 0), 0, Tag1 ("Stdlib__Set", 43)), 0); (("to_seq", 1626), ((Tag1 (0, (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -200), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 1585)), 0, (0)), 100000000, 0, -199)], (0)), 100000000, 0, -198), 0), 100000000, 0, -197), 0, (("set.mli", 303, 11453, 11457), ("set.mli", 303, 11453, 11484), 0), 0, Tag1 ("Stdlib__Set", 44)), 0); (("to_rev_seq", 1627), ((Tag1 (0, (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -196), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 1585)), 0, (0)), 100000000, 0, -195)], (0)), 100000000, 0, -194), 0), 100000000, 0, -193), 0, (("set.mli", 307, 11562, 11566), ("set.mli", 307, 11562, 11597), 0), 0, Tag1 ("Stdlib__Set", 45)), 0); (("add_seq", 1628), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 1585)), 0, (0)), 100000000, 0, -192)], (0)), 100000000, 0, -191), (Tag1 (0, (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -190), (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -189), 0), 100000000, 0, -188), 0), 100000000, 0, -187), 0, (("set.mli", 311, 11676, 11680), ("set.mli", 311, 11676, 11713), 0), 0, Tag1 ("Stdlib__Set", 46)), 0); (("of_seq", 1629), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 1585)), 0, (0)), 100000000, 0, -186)], (0)), 100000000, 0, -185), (Tag3 ((("t", 1586)), 0, (0)), 100000000, 0, -184), 0), 100000000, 0, -183), 0, (("set.mli", 315, 11791, 11795), ("set.mli", 315, 11791, 11822), 0), 0, Tag1 ("Stdlib__Set", 47)), 0)]), 0, (("pretyping/coercionops.mli", 115, 3879, 3879), ("pretyping/coercionops.mli", 115, 3879, 3925), 0), Tag1 ("Coercionops", 47)), 0, 0); (("reachable_from", 1584), ((Tag1 (0, (Tag3 ((("cl_typ", 1553)), 0, (0)), 100000000, 0, -4), (Tag3 (Tag1 ((("ClTypSet", 1583)), "t"), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("pretyping/coercionops.mli", 117, 3927, 3927), ("pretyping/coercionops.mli", 117, 3927, 3968), 0), 0, Tag1 ("Coercionops", 48)), 0)], "Coercionops", [("Coercionops", ("\238\240\220\191\201\bMazv\159\227\236?\147>")); ("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Vmemitcodes", ("wCd\138\165\158DD\241gH\236.\210\197\247")); ("Vmbytecodes", ("\025\021\151\137Dx\149W\236+[\143f\208\160\016")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Unix", (":B72R\011\005Sj\189)\011\239PH\254")); ("UnivSubst", ("\190qu\031mc\130\181\003G]\132\"\219m)")); ("UnivProblem", ("6'\161\018\181\001.\253\000\141a6\171\1727\155")); ("UnivNames", ("%\151_\209%+JM$n\001\232\194n\178N")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UState", ("SD\203\215|\136\n\251\239\208\148\215C\n\167\005")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Summary", ("\148G\135\226\024L3\246\021\028U\146\164`\253\250")); ("Store", ("/dT\252\145\179pq\216{\181\206\190K+U")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("Section", ("\245\207\b\021\142v=\155#w\246}\"4b\006")); ("Safe_typing", (")\250?\164\145\132\241\127\186\152h+\145\"\237l")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("Range", ("\218\130\001r\237\r\144\171\164\021l\155\196\143sg")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("Nativevalues", ("8:\007\025e\226c,\001\171\146#l\210\171\152")); ("Nativelib", ("V\239\205Y1\147E:,\176\196Hy\1483|")); ("Nativecode", ("\190\185\255\006m\012\210\163\138Rz\247\15283\183")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Monad", ("\244\171T\157\194p\187\160\149\195{\132\222\020\253\148")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Libnames", ("fp\0255\167\162\209\153\137\161\169#\246\193\003\198")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hook", ("\183\194\223\003\155\169',\187\240a;E\b\1396")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Genlambda", ("\170}\024\241\141\222\136S\169\219\2212i\134KI")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evd", ("\211\205p\193\216\129r\006\239oN\142ar\196\175")); ("Evar_kinds", ("\023L\186\132\218}\254\221\185\198\220\200h\003{\021")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Environ", ("\171b\1579\229<\003Z\147IL\225X\254\182\204")); ("Entries", ("\172\201\198\221Ap\027_{\174\141C\021\";p")); ("EConstr", ("\201aW\156\157;N\004\201V\208\006L\166\211)")); ("Dyn", ("\131z`\205v\2306\007x\027&K.?;\169")); ("Declarations", ("\239\137n\019\030w$\182\166z^{\b\206\163\175")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Conversion", ("\158\150&\195M\tv\127|\029\158RRK\211A")); ("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CUnix", ("\140Zl\153\167\011J\015\005|th\247OTu")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CEphemeron", ("\204I\179-\206(x4\173\229\250\001PkH\151")); ("CDebug", ("^4\210p7\239!3\138\138\213?\239`\250\157")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])

val reachable_from : cl_typ -> ClTypSet.t

module Make :
  functor
    (S : sig
           type 'a t
           val length : 'a t -> Sek__.PublicTypeAbbreviations.length
           val get : 'a t -> Sek__.PublicTypeAbbreviations.index -> 'a
           val get_segment :
             Sek__.PrivateSignatures.pov ->
             'a t ->
             Sek__.PublicTypeAbbreviations.index ->
             'a Sek__.PublicTypeAbbreviations.segment
         end)
    ->
    sig
      type 'a iter
      val create : Sek__PrivateSignatures.pov -> 'a S.t -> 'a iter
      val reset : Sek__PrivateSignatures.pov -> 'a iter -> unit
      val copy : 'a iter -> 'a iter
      val sequence : 'a iter -> 'a S.t
      val length : 'a iter -> Sek__.PublicTypeAbbreviations.length
      val is_valid : 'a iter -> bool
      val index : 'a iter -> Sek__.PublicTypeAbbreviations.index
      val finished : 'a iter -> bool
      val get : 'a iter -> 'a
      val move : Sek__PrivateSignatures.pov -> 'a iter -> unit
      val jump : Sek__PrivateSignatures.pov -> 'a iter -> int -> unit
      val get_segment :
        Sek__PrivateSignatures.pov ->
        'a iter -> 'a Sek__.PublicTypeAbbreviations.segment
      val get_writable_segment :
        Sek__PrivateSignatures.pov ->
        'a iter -> 'a Sek__.PublicTypeAbbreviations.segment
      val reach : 'a iter -> Sek__.PublicTypeAbbreviations.index -> unit
      val set : 'a iter -> 'a -> unit
      val check : 'a iter -> unit
      val print : ('a -> PPrint.document) -> 'a iter -> PPrint.document("DEBUG:rule", [Tag3 (("Make", 451), 0, (Tag2 (((("S", 452)), Tag1 ([Tag1 (("t", 453), ([((("a")), 100000000, 0, -19)], 1, 0, 1, 0, [7], [2], 0, 0, (("src/TrivialIterator.mli", 24, 1359, 1361), ("src/TrivialIterator.mli", 24, 1359, 1370), 0), 0, 0, 0, Tag1 ("Sek__TrivialIterator", 0)), 1, 0); (("length", 454), ((Tag1 (0, (Tag3 ((("t", 453)), [((("a")), 100000000, 0, -18)], (0)), 100000000, 0, -17), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "length"), 0, (0)), 100000000, 0, -16), 0), 100000000, 0, -15), 0, (("src/TrivialIterator.mli", 25, 1371, 1373), ("src/TrivialIterator.mli", 25, 1371, 1400), 0), 0, Tag1 ("Sek__TrivialIterator", 1)), 0); (("get", 455), ((Tag1 (0, (Tag3 ((("t", 453)), [((("a")), 100000000, 0, -12)], (0)), 100000000, 0, -14), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "index"), 0, (0)), 100000000, 0, -13), ((("a")), 100000000, 0, -12), 0), 100000000, 0, -11), 0), 100000000, 0, -10), 0, (("src/TrivialIterator.mli", 26, 1401, 1403), ("src/TrivialIterator.mli", 26, 1401, 1432), 0), 0, Tag1 ("Sek__TrivialIterator", 2)), 0); (("get_segment", 456), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PrivateSignatures"), "pov"), 0, (0)), 100000000, 0, -9), (Tag1 (0, (Tag3 ((("t", 453)), [((("a")), 100000000, 0, -6)], (0)), 100000000, 0, -8), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "index"), 0, (0)), 100000000, 0, -7), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "segment"), [((("a")), 100000000, 0, -6)], (0)), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/TrivialIterator.mli", 27, 1433, 1435), ("src/TrivialIterator.mli", 27, 1433, 1487), 0), 0, Tag1 ("Sek__TrivialIterator", 3)), 0)])), Tag1 ([Tag1 (("iter", 457), ([((("a")), 100000000, 0, -107)], 1, 0, 1, 0, [7], [2], 0, 0, (("src/TrivialIterator.mli", 29, 1493, 1495), ("src/TrivialIterator.mli", 29, 1493, 1525), 0), 0, 0, 0, Tag1 ("Sek__PrivateSignatures", 223)), 1, 0); (("create", 458), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "pov"), 0, (0)), 100000000, 0, -106), (Tag1 (0, (Tag3 (Tag1 ((("S", 452)), "t"), [((("a")), 100000000, 0, -104)], (0)), 100000000, 0, -105), (Tag3 ((("iter", 457)), [((("a")), 100000000, 0, -104)], (0)), 100000000, 0, -103), 0), 100000000, 0, -102), 0), 100000000, 0, -101), 0, (("src/TrivialIterator.mli", 29, 1493, 1495), ("src/TrivialIterator.mli", 29, 1493, 1525), 0), 0, Tag1 ("Sek__PrivateSignatures", 224)), 0); (("reset", 459), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "pov"), 0, (0)), 100000000, 0, -100), (Tag1 (0, (Tag3 ((("iter", 457)), [((("a")), 100000000, 0, -99)], (0)), 100000000, 0, -98), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -97), 0), 100000000, 0, -96), 0), 100000000, 0, -95), 0, (("src/TrivialIterator.mli", 29, 1493, 1495), ("src/TrivialIterator.mli", 29, 1493, 1525), 0), 0, Tag1 ("Sek__PrivateSignatures", 225)), 0); (("copy", 460), ((Tag1 (0, (Tag3 ((("iter", 457)), [((("a")), 100000000, 0, -93)], (0)), 100000000, 0, -94), (Tag3 ((("iter", 457)), [((("a")), 100000000, 0, -93)], (0)), 100000000, 0, -92), 0), 100000000, 0, -91), 0, (("src/TrivialIterator.mli", 29, 1493, 1495), ("src/TrivialIterator.mli", 29, 1493, 1525), 0), 0, Tag1 ("Sek__PrivateSignatures", 226)), 0); (("sequence", 461), ((Tag1 (0, (Tag3 ((("iter", 457)), [((("a")), 100000000, 0, -89)], (0)), 100000000, 0, -90), (Tag3 (Tag1 ((("S", 452)), "t"), [((("a")), 100000000, 0, -89)], (0)), 100000000, 0, -88), 0), 100000000, 0, -87), 0, (("src/TrivialIterator.mli", 29, 1493, 1495), ("src/TrivialIterator.mli", 29, 1493, 1525), 0), 0, Tag1 ("Sek__PrivateSignatures", 227)), 0); (("length", 462), ((Tag1 (0, (Tag3 ((("iter", 457)), [((("a")), 100000000, 0, -86)], (0)), 100000000, 0, -85), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "length"), 0, (0)), 100000000, 0, -84), 0), 100000000, 0, -83), 0, (("src/TrivialIterator.mli", 29, 1493, 1495), ("src/TrivialIterator.mli", 29, 1493, 1525), 0), 0, Tag1 ("Sek__PrivateSignatures", 228)), 0); (("is_valid", 463), ((Tag1 (0, (Tag3 ((("iter", 457)), [((("a")), 100000000, 0, -82)], (0)), 100000000, 0, -81), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -80), 0), 100000000, 0, -79), 0, (("src/TrivialIterator.mli", 29, 1493, 1495), ("src/TrivialIterator.mli", 29, 1493, 1525), 0), 0, Tag1 ("Sek__PrivateSignatures", 229)), 0); (("index", 464), ((Tag1 (0, (Tag3 ((("iter", 457)), [((("a")), 100000000, 0, -78)], (0)), 100000000, 0, -77), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "index"), 0, (0)), 100000000, 0, -76), 0), 100000000, 0, -75), 0, (("src/TrivialIterator.mli", 29, 1493, 1495), ("src/TrivialIterator.mli", 29, 1493, 1525), 0), 0, Tag1 ("Sek__PrivateSignatures", 230)), 0); (("finished", 465), ((Tag1 (0, (Tag3 ((("iter", 457)), [((("a")), 100000000, 0, -74)], (0)), 100000000, 0, -73), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -72), 0), 100000000, 0, -71), 0, (("src/TrivialIterator.mli", 29, 1493, 1495), ("src/TrivialIterator.mli", 29, 1493, 1525), 0), 0, Tag1 ("Sek__PrivateSignatures", 231)), 0); (("get", 466), ((Tag1 (0, (Tag3 ((("iter", 457)), [((("a")), 100000000, 0, -69)], (0)), 100000000, 0, -70), ((("a")), 100000000, 0, -69), 0), 100000000, 0, -68), 0, (("src/TrivialIterator.mli", 29, 1493, 1495), ("src/TrivialIterator.mli", 29, 1493, 1525), 0), 0, Tag1 ("Sek__PrivateSignatures", 232)), 0); (("move", 467), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "pov"), 0, (0)), 100000000, 0, -67), (Tag1 (0, (Tag3 ((("iter", 457)), [((("a")), 100000000, 0, -66)], (0)), 100000000, 0, -65), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -64), 0), 100000000, 0, -63), 0), 100000000, 0, -62), 0, (("src/TrivialIterator.mli", 29, 1493, 1495), ("src/TrivialIterator.mli", 29, 1493, 1525), 0), 0, Tag1 ("Sek__PrivateSignatures", 233)), 0); (("jump", 468), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "pov"), 0, (0)), 100000000, 0, -61), (Tag1 (0, (Tag3 ((("iter", 457)), [((("a")), 100000000, 0, -60)], (0)), 100000000, 0, -59), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -58), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -57), 0), 100000000, 0, -56), 0), 100000000, 0, -55), 0), 100000000, 0, -54), 0, (("src/TrivialIterator.mli", 29, 1493, 1495), ("src/TrivialIterator.mli", 29, 1493, 1525), 0), 0, Tag1 ("Sek__PrivateSignatures", 234)), 0); (("get_segment", 469), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "pov"), 0, (0)), 100000000, 0, -53), (Tag1 (0, (Tag3 ((("iter", 457)), [((("a")), 100000000, 0, -51)], (0)), 100000000, 0, -52), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "segment"), [((("a")), 100000000, 0, -51)], (0)), 100000000, 0, -50), 0), 100000000, 0, -49), 0), 100000000, 0, -48), 0, (("src/TrivialIterator.mli", 29, 1493, 1495), ("src/TrivialIterator.mli", 29, 1493, 1525), 0), 0, Tag1 ("Sek__PrivateSignatures", 235)), 0); (("get_writable_segment", 470), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "pov"), 0, (0)), 100000000, 0, -47), (Tag1 (0, (Tag3 ((("iter", 457)), [((("a")), 100000000, 0, -45)], (0)), 100000000, 0, -46), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "segment"), [((("a")), 100000000, 0, -45)], (0)), 100000000, 0, -44), 0), 100000000, 0, -43), 0), 100000000, 0, -42), 0, (("src/TrivialIterator.mli", 29, 1493, 1495), ("src/TrivialIterator.mli", 29, 1493, 1525), 0), 0, Tag1 ("Sek__PrivateSignatures", 236)), 0); (("reach", 471), ((Tag1 (0, (Tag3 ((("iter", 457)), [((("a")), 100000000, 0, -41)], (0)), 100000000, 0, -40), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "index"), 0, (0)), 100000000, 0, -39), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -38), 0), 100000000, 0, -37), 0), 100000000, 0, -36), 0, (("src/TrivialIterator.mli", 29, 1493, 1495), ("src/TrivialIterator.mli", 29, 1493, 1525), 0), 0, Tag1 ("Sek__PrivateSignatures", 237)), 0); (("set", 472), ((Tag1 (0, (Tag3 ((("iter", 457)), [((("a")), 100000000, 0, -34)], (0)), 100000000, 0, -35), (Tag1 (0, ((("a")), 100000000, 0, -34), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -33), 0), 100000000, 0, -32), 0), 100000000, 0, -31), 0, (("src/TrivialIterator.mli", 29, 1493, 1495), ("src/TrivialIterator.mli", 29, 1493, 1525), 0), 0, Tag1 ("Sek__PrivateSignatures", 238)), 0); (("check", 473), ((Tag1 (0, (Tag3 ((("iter", 457)), [((("a")), 100000000, 0, -30)], (0)), 100000000, 0, -29), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -28), 0), 100000000, 0, -27), 0, (("src/TrivialIterator.mli", 29, 1493, 1495), ("src/TrivialIterator.mli", 29, 1493, 1525), 0), 0, Tag1 ("Sek__PrivateSignatures", 239)), 0); (("print", 474), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -24), (Tag3 (Tag1 ((Tag2 ("PPrint")), "document"), 0, (0)), 100000000, 0, -26), 0), 100000000, 0, -25), (Tag1 (0, (Tag3 ((("iter", 457)), [((("a")), 100000000, 0, -24)], (0)), 100000000, 0, -23), (Tag3 (Tag1 ((Tag2 ("PPrint")), "document"), 0, (0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0), 100000000, 0, -20), 0, (("src/TrivialIterator.mli", 29, 1493, 1495), ("src/TrivialIterator.mli", 29, 1493, 1525), 0), 0, Tag1 ("Sek__PrivateSignatures", 240)), 0)])), 0, (("src/TrivialIterator.mli", 23, 1338, 1338), ("src/TrivialIterator.mli", 29, 1493, 1525), 0), Tag1 ("Sek__TrivialIterator", 6)), 0, 0)], "Sek__TrivialIterator", [("Sek__TrivialIterator", ("a\132-`\253\1948\164Z\186\011,\221\015Ug")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sek__PublicTypeAbbreviations", ("\201\251\244\167\199\157\227\233\251\227b\132\146]>\232")); ("Sek__PrivateSignatures", ("\187[j\006\197\232[2-\184F\232V~a\184")); ("Sek__Owner", ("\228~\155T\164\209\210ZNr\165\246\165\216\130-")); ("Sek__", ("b\188\017\179d|~L\019\214\028\188\145y\210\250")); ("PPrintEngine", ("V_\162\193\202\031c\185\nQ\232bL\0299\195")); ("PPrint", ("a\179\180\0030=\b^\136P\234\220\171\0210A")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

    end

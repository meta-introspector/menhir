val default_string_of_float : (float -> string) ref
val write_old_option_format : bool ref
val read_old_option_format : bool ref
val list_map : ('a -> 'b) -> 'a list -> 'b list
val sexp_of_unit : unit -> Sexplib0__.Sexp.t
val sexp_of_bool : bool -> Sexplib0__.Sexp.t
val sexp_of_string : string -> Sexplib0__.Sexp.t
val sexp_of_bytes : bytes -> Sexplib0__.Sexp.t
val sexp_of_char : char -> Sexplib0__.Sexp.t
val sexp_of_int : int -> Sexplib0__.Sexp.t
val sexp_of_float : float -> Sexplib0__.Sexp.t
val sexp_of_int32 : int32 -> Sexplib0__.Sexp.t
val sexp_of_int64 : int64 -> Sexplib0__.Sexp.t
val sexp_of_nativeint : nativeint -> Sexplib0__.Sexp.t
val sexp_of_ref : ('a -> Sexplib0__.Sexp.t) -> 'a ref -> Sexplib0__.Sexp.t
val sexp_of_lazy_t :
  ('a -> Sexplib0__.Sexp.t) -> 'a lazy_t -> Sexplib0__.Sexp.t
val sexp_of_option :
  ('a -> Sexplib0__.Sexp.t) -> 'a option -> Sexplib0__.Sexp.t
val sexp_of_pair :
  ('a -> Sexplib0__.Sexp.t) ->
  ('b -> Sexplib0__.Sexp.t) -> 'a * 'b -> Sexplib0__.Sexp.t
val sexp_of_triple :
  ('a -> Sexplib0__.Sexp.t) ->
  ('b -> Sexplib0__.Sexp.t) ->
  ('c -> Sexplib0__.Sexp.t) -> 'a * 'b * 'c -> Sexplib0__.Sexp.t
val sexp_of_list : ('a -> Sexplib0__.Sexp.t) -> 'a list -> Sexplib0__.Sexp.t
val sexp_of_array :
  ('a -> Sexplib0__.Sexp.t) -> 'a array -> Sexplib0__.Sexp.t
val sexp_of_hashtbl :
  ('a -> Sexplib0__.Sexp.t) ->
  ('b -> Sexplib0__.Sexp.t) -> ('a, 'b) Hashtbl.t -> Sexplib0__.Sexp.t
val sexp_of_opaque : 'a -> Sexplib0__.Sexp.t
val sexp_of_fun : ('a -> 'b) -> Sexplib0__.Sexp.t
exception Of_sexp_error of exn * Sexplib0__.Sexp.t
val record_check_extra_fields : bool ref
val of_sexp_error : string -> Sexplib0__.Sexp.t -> 'a
val of_sexp_error_exn : exn -> Sexplib0__.Sexp.t -> 'a
val unit_of_sexp : Sexplib0__.Sexp.t -> unit
val bool_of_sexp : Sexplib0__.Sexp.t -> bool
val string_of_sexp : Sexplib0__.Sexp.t -> string
val bytes_of_sexp : Sexplib0__.Sexp.t -> bytes
val char_of_sexp : Sexplib0__.Sexp.t -> char
val int_of_sexp : Sexplib0__.Sexp.t -> int
val float_of_sexp : Sexplib0__.Sexp.t -> float
val int32_of_sexp : Sexplib0__.Sexp.t -> int32
val int64_of_sexp : Sexplib0__.Sexp.t -> int64
val nativeint_of_sexp : Sexplib0__.Sexp.t -> nativeint
val ref_of_sexp : (Sexplib0__.Sexp.t -> 'a) -> Sexplib0__.Sexp.t -> 'a ref
val lazy_t_of_sexp :
  (Sexplib0__.Sexp.t -> 'a) -> Sexplib0__.Sexp.t -> 'a lazy_t
val option_of_sexp :
  (Sexplib0__.Sexp.t -> 'a) -> Sexplib0__.Sexp.t -> 'a option
val pair_of_sexp :
  (Sexplib0__.Sexp.t -> 'a) ->
  (Sexplib0__.Sexp.t -> 'b) -> Sexplib0__.Sexp.t -> 'a * 'b
val triple_of_sexp :
  (Sexplib0__.Sexp.t -> 'a) ->
  (Sexplib0__.Sexp.t -> 'b) ->
  (Sexplib0__.Sexp.t -> 'c) -> Sexplib0__.Sexp.t -> 'a * 'b * 'c
val list_of_sexp : (Sexplib0__.Sexp.t -> 'a) -> Sexplib0__.Sexp.t -> 'a list
val array_of_sexp :
  (Sexplib0__.Sexp.t -> 'a) -> Sexplib0__.Sexp.t -> 'a array
val hashtbl_of_sexp :
  (Sexplib0__.Sexp.t -> 'a) ->
  (Sexplib0__.Sexp.t -> 'b) -> Sexplib0__.Sexp.t -> ('a, 'b) Hashtbl.t
val opaque_of_sexp : Sexplib0__.Sexp.t -> 'a
val fun_of_sexp : Sexplib0__.Sexp.t -> 'a
val sexp_grammar_with_tags :
  Sexplib0__.Sexp_grammar.grammar ->
  tags:(string * Sexplib0__.Sexp.t) list -> Sexplib0__.Sexp_grammar.grammar
val sexp_grammar_with_tag_list :
  'a Sexplib0__.Sexp_grammar.with_tag_list ->
  tags:(string * Sexplib0__.Sexp.t) list ->
  'a Sexplib0__.Sexp_grammar.with_tag_list
val unit_sexp_grammar : unit Sexplib0__.Sexp_grammar.t
val bool_sexp_grammar : bool Sexplib0__.Sexp_grammar.t
val string_sexp_grammar : string Sexplib0__.Sexp_grammar.t
val bytes_sexp_grammar : bytes Sexplib0__.Sexp_grammar.t
val char_sexp_grammar : char Sexplib0__.Sexp_grammar.t
val int_sexp_grammar : int Sexplib0__.Sexp_grammar.t
val float_sexp_grammar : float Sexplib0__.Sexp_grammar.t
val int32_sexp_grammar : int32 Sexplib0__.Sexp_grammar.t
val int64_sexp_grammar : int64 Sexplib0__.Sexp_grammar.t
val nativeint_sexp_grammar : nativeint Sexplib0__.Sexp_grammar.t
val sexp_t_sexp_grammar : Sexplib0__.Sexp.t Sexplib0__.Sexp_grammar.t
val ref_sexp_grammar :
  'a Sexplib0__.Sexp_grammar.t -> 'a ref Sexplib0__.Sexp_grammar.t
val lazy_t_sexp_grammar :
  'a Sexplib0__.Sexp_grammar.t -> 'a lazy_t Sexplib0__.Sexp_grammar.t
val option_sexp_grammar :
  'a Sexplib0__.Sexp_grammar.t -> 'a option Sexplib0__.Sexp_grammar.t
val list_sexp_grammar :
  'a Sexplib0__.Sexp_grammar.t -> 'a list Sexplib0__.Sexp_grammar.t
val array_sexp_grammar :
  'a Sexplib0__.Sexp_grammar.t -> 'a array Sexplib0__.Sexp_grammar.t
val opaque_sexp_grammar : 'a Sexplib0__.Sexp_grammar.t
val fun_sexp_grammar : 'a Sexplib0__.Sexp_grammar.t
val sexp_of_exn : exn -> Sexplib0__.Sexp.t
val printexc_prefer_sexp : exn -> string
val sexp_of_exn_opt : exn -> Sexplib0__.Sexp.t option
module Exn_converter :
  sig
    val add :
      ?printexc:bool ->
      ?finalise:bool ->
      extension_constructor -> (exn -> Sexplib0__.Sexp.t) -> unit
    module For_unit_tests_only : sig val size : unit -> int end
  end
external ignore : 'a -> unit = "%ignore"
("DEBUG:rule", [(("default_string_of_float", 533), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -333), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -332), 0), 100000000, 0, -331)], (0)), 100000000, 0, -330), 0, (("src/sexp_conv.mli", 9, 266, 266), ("src/sexp_conv.mli", 9, 266, 317), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 0)), 0); (("write_old_option_format", 534), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -329)], (0)), 100000000, 0, -328), 0, (("src/sexp_conv.mli", 16, 549, 549), ("src/sexp_conv.mli", 16, 549, 587), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 1)), 0); (("read_old_option_format", 535), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -327)], (0)), 100000000, 0, -326), 0, (("src/sexp_conv.mli", 26, 1039, 1039), ("src/sexp_conv.mli", 26, 1039, 1076), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 2)), 0); (("list_map", 536), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -324), ((("b")), 100000000, 0, -322), 0), 100000000, 0, -325), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -324)], (0)), 100000000, 0, -323), (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -322)], (0)), 100000000, 0, -321), 0), 100000000, 0, -320), 0), 100000000, 0, -319), 0, (("src/sexp_conv.mli", 31, 1263, 1263), ("src/sexp_conv.mli", 31, 1263, 1310), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 3)), 0); (("sexp_of_unit", 537), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -318), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -317), 0), 100000000, 0, -316), 0, (("src/sexp_conv.mli", 34, 1389, 1389), ("src/sexp_conv.mli", 34, 1389, 1422), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 4)), 0); (("sexp_of_bool", 538), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -315), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -314), 0), 100000000, 0, -313), 0, (("src/sexp_conv.mli", 38, 1510, 1510), ("src/sexp_conv.mli", 38, 1510, 1543), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 5)), 0); (("sexp_of_string", 539), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -312), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -311), 0), 100000000, 0, -310), 0, (("src/sexp_conv.mli", 42, 1637, 1637), ("src/sexp_conv.mli", 42, 1637, 1674), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 6)), 0); (("sexp_of_bytes", 540), ((Tag1 (0, (Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -309), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -308), 0), 100000000, 0, -307), 0, (("src/sexp_conv.mli", 46, 1767, 1767), ("src/sexp_conv.mli", 46, 1767, 1802), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 7)), 0); (("sexp_of_char", 541), ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -306), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -305), 0), 100000000, 0, -304), 0, (("src/sexp_conv.mli", 50, 1890, 1890), ("src/sexp_conv.mli", 50, 1890, 1923), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 8)), 0); (("sexp_of_int", 542), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -303), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -302), 0), 100000000, 0, -301), 0, (("src/sexp_conv.mli", 54, 2009, 2009), ("src/sexp_conv.mli", 54, 2009, 2040), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 9)), 0); (("sexp_of_float", 543), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -300), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -299), 0), 100000000, 0, -298), 0, (("src/sexp_conv.mli", 58, 2130, 2130), ("src/sexp_conv.mli", 58, 2130, 2165), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 10)), 0); (("sexp_of_int32", 544), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -297), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -296), 0), 100000000, 0, -295), 0, (("src/sexp_conv.mli", 62, 2255, 2255), ("src/sexp_conv.mli", 62, 2255, 2290), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 11)), 0); (("sexp_of_int64", 545), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -294), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -293), 0), 100000000, 0, -292), 0, (("src/sexp_conv.mli", 66, 2380, 2380), ("src/sexp_conv.mli", 66, 2380, 2415), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 12)), 0); (("sexp_of_nativeint", 546), ((Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -291), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -290), 0), 100000000, 0, -289), 0, (("src/sexp_conv.mli", 70, 2513, 2513), ("src/sexp_conv.mli", 70, 2513, 2556), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 13)), 0); (("sexp_of_ref", 547), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -286), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -288), 0), 100000000, 0, -287), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [((("a")), 100000000, 0, -286)], (0)), 100000000, 0, -285), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -284), 0), 100000000, 0, -283), 0), 100000000, 0, -282), 0, (("src/sexp_conv.mli", 75, 2718, 2718), ("src/sexp_conv.mli", 75, 2718, 2770), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 14)), 0); (("sexp_of_lazy_t", 548), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -279), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -281), 0), 100000000, 0, -280), (Tag1 (0, (Tag3 ((Tag3 ("lazy_t", 14)), [((("a")), 100000000, 0, -279)], (0)), 100000000, 0, -278), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -277), 0), 100000000, 0, -276), 0), 100000000, 0, -275), 0, (("src/sexp_conv.mli", 80, 2938, 2938), ("src/sexp_conv.mli", 80, 2938, 2996), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 15)), 0); (("sexp_of_option", 549), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -272), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -274), 0), 100000000, 0, -273), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -272)], (0)), 100000000, 0, -271), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -270), 0), 100000000, 0, -269), 0), 100000000, 0, -268), 0, (("src/sexp_conv.mli", 85, 3168, 3168), ("src/sexp_conv.mli", 85, 3168, 3226), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 16)), 0); (("sexp_of_pair", 550), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -262), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -267), 0), 100000000, 0, -266), (Tag1 (0, (Tag1 (0, ((("b")), 100000000, 0, -263), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -265), 0), 100000000, 0, -264), (Tag1 (0, (Tag2 ([((("a")), 100000000, 0, -262); ((("b")), 100000000, 0, -263)]), 100000000, 0, -261), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -260), 0), 100000000, 0, -259), 0), 100000000, 0, -258), 0), 100000000, 0, -257), 0, (("src/sexp_conv.mli", 90, 3447, 3447), ("src/sexp_conv.mli", 90, 3447, 3519), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 17)), 0); (("sexp_of_triple", 551), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -248), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -256), 0), 100000000, 0, -255), (Tag1 (0, (Tag1 (0, ((("b")), 100000000, 0, -249), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -254), 0), 100000000, 0, -253), (Tag1 (0, (Tag1 (0, ((("c")), 100000000, 0, -250), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -252), 0), 100000000, 0, -251), (Tag1 (0, (Tag2 ([((("a")), 100000000, 0, -248); ((("b")), 100000000, 0, -249); ((("c")), 100000000, 0, -250)]), 100000000, 0, -247), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -246), 0), 100000000, 0, -245), 0), 100000000, 0, -244), 0), 100000000, 0, -243), 0), 100000000, 0, -242), 0, (("src/sexp_conv.mli", 95, 3676, 3676), ("src/sexp_conv.mli", 100, 3773, 3784), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 18)), 0); (("sexp_of_list", 552), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -239), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -241), 0), 100000000, 0, -240), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -239)], (0)), 100000000, 0, -238), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -237), 0), 100000000, 0, -236), 0), 100000000, 0, -235), 0, (("src/sexp_conv.mli", 105, 3952, 3952), ("src/sexp_conv.mli", 105, 3952, 4006), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 19)), 0); (("sexp_of_array", 553), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -232), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -234), 0), 100000000, 0, -233), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -232)], (0)), 100000000, 0, -231), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -230), 0), 100000000, 0, -229), 0), 100000000, 0, -228), 0, (("src/sexp_conv.mli", 110, 4174, 4174), ("src/sexp_conv.mli", 110, 4174, 4230), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 20)), 0); (("sexp_of_hashtbl", 554), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -222), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -227), 0), 100000000, 0, -226), (Tag1 (0, (Tag1 (0, ((("b")), 100000000, 0, -223), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -225), 0), 100000000, 0, -224), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Hashtbl"), "t"), [((("a")), 100000000, 0, -222); ((("b")), 100000000, 0, -223)], (0)), 100000000, 0, -221), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -220), 0), 100000000, 0, -219), 0), 100000000, 0, -218), 0), 100000000, 0, -217), 0, (("src/sexp_conv.mli", 116, 4506, 4506), ("src/sexp_conv.mli", 116, 4506, 4592), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 21)), 0); (("sexp_of_opaque", 555), ((Tag1 (0, ((("a")), 100000000, 0, -216), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -215), 0), 100000000, 0, -214), 0, (("src/sexp_conv.mli", 121, 4774, 4774), ("src/sexp_conv.mli", 121, 4774, 4807), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 22)), 0); (("sexp_of_fun", 556), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -213), ((("b")), 100000000, 0, -212), 0), 100000000, 0, -211), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -210), 0), 100000000, 0, -209), 0, (("src/sexp_conv.mli", 126, 5020, 5020), ("src/sexp_conv.mli", 126, 5020, 5058), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 23)), 0); Tag2 (("Of_sexp_error", 557), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -207); (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -208)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Sexplib0__Sexp_conv", 24)), 2, 0); (("record_check_extra_fields", 558), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -206)], (0)), 100000000, 0, -205), 0, (("src/sexp_conv.mli", 136, 5393, 5393), ("src/sexp_conv.mli", 136, 5393, 5433), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 25)), 0); (("of_sexp_error", 559), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -204), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -203), ((("a")), 100000000, 0, -202), 0), 100000000, 0, -201), 0), 100000000, 0, -200), 0, (("src/sexp_conv.mli", 139, 5515, 5515), ("src/sexp_conv.mli", 139, 5515, 5557), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 26)), 0); (("of_sexp_error_exn", 560), ((Tag1 (0, (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -199), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -198), ((("a")), 100000000, 0, -197), 0), 100000000, 0, -196), 0), 100000000, 0, -195), 0, (("src/sexp_conv.mli", 142, 5625, 5625), ("src/sexp_conv.mli", 142, 5625, 5668), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 27)), 0); (("unit_of_sexp", 561), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -194), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -193), 0), 100000000, 0, -192), 0, (("src/sexp_conv.mli", 146, 5757, 5757), ("src/sexp_conv.mli", 146, 5757, 5790), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 28)), 0); (("bool_of_sexp", 562), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -191), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -190), 0), 100000000, 0, -189), 0, (("src/sexp_conv.mli", 150, 5879, 5879), ("src/sexp_conv.mli", 150, 5879, 5912), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 29)), 0); (("string_of_sexp", 563), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -188), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -187), 0), 100000000, 0, -186), 0, (("src/sexp_conv.mli", 154, 6005, 6005), ("src/sexp_conv.mli", 154, 6005, 6042), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 30)), 0); (("bytes_of_sexp", 564), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -185), (Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -184), 0), 100000000, 0, -183), 0, (("src/sexp_conv.mli", 158, 6133, 6133), ("src/sexp_conv.mli", 158, 6133, 6168), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 31)), 0); (("char_of_sexp", 565), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -182), (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -181), 0), 100000000, 0, -180), 0, (("src/sexp_conv.mli", 162, 6257, 6257), ("src/sexp_conv.mli", 162, 6257, 6290), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 32)), 0); (("int_of_sexp", 566), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -179), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -178), 0), 100000000, 0, -177), 0, (("src/sexp_conv.mli", 166, 6377, 6377), ("src/sexp_conv.mli", 166, 6377, 6408), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 33)), 0); (("float_of_sexp", 567), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -176), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -175), 0), 100000000, 0, -174), 0, (("src/sexp_conv.mli", 170, 6499, 6499), ("src/sexp_conv.mli", 170, 6499, 6534), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 34)), 0); (("int32_of_sexp", 568), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -173), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -172), 0), 100000000, 0, -171), 0, (("src/sexp_conv.mli", 174, 6625, 6625), ("src/sexp_conv.mli", 174, 6625, 6660), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 35)), 0); (("int64_of_sexp", 569), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -170), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -169), 0), 100000000, 0, -168), 0, (("src/sexp_conv.mli", 178, 6751, 6751), ("src/sexp_conv.mli", 178, 6751, 6786), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 36)), 0); (("nativeint_of_sexp", 570), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -167), (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -166), 0), 100000000, 0, -165), 0, (("src/sexp_conv.mli", 182, 6885, 6885), ("src/sexp_conv.mli", 182, 6885, 6928), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 37)), 0); (("ref_of_sexp", 571), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -164), ((("a")), 100000000, 0, -161), 0), 100000000, 0, -163), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -162), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [((("a")), 100000000, 0, -161)], (0)), 100000000, 0, -160), 0), 100000000, 0, -159), 0), 100000000, 0, -158), 0, (("src/sexp_conv.mli", 187, 7116, 7116), ("src/sexp_conv.mli", 187, 7116, 7168), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 38)), 0); (("lazy_t_of_sexp", 572), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -157), ((("a")), 100000000, 0, -154), 0), 100000000, 0, -156), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -155), (Tag3 ((Tag3 ("lazy_t", 14)), [((("a")), 100000000, 0, -154)], (0)), 100000000, 0, -153), 0), 100000000, 0, -152), 0), 100000000, 0, -151), 0, (("src/sexp_conv.mli", 192, 7362, 7362), ("src/sexp_conv.mli", 192, 7362, 7420), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 39)), 0); (("option_of_sexp", 573), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -150), ((("a")), 100000000, 0, -147), 0), 100000000, 0, -149), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -148), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -147)], (0)), 100000000, 0, -146), 0), 100000000, 0, -145), 0), 100000000, 0, -144), 0, (("src/sexp_conv.mli", 197, 7614, 7614), ("src/sexp_conv.mli", 197, 7614, 7672), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 40)), 0); (("pair_of_sexp", 574), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -143), ((("a")), 100000000, 0, -137), 0), 100000000, 0, -142), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -141), ((("b")), 100000000, 0, -138), 0), 100000000, 0, -140), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -139), (Tag2 ([((("a")), 100000000, 0, -137); ((("b")), 100000000, 0, -138)]), 100000000, 0, -136), 0), 100000000, 0, -135), 0), 100000000, 0, -134), 0), 100000000, 0, -133), 0, (("src/sexp_conv.mli", 203, 7904, 7904), ("src/sexp_conv.mli", 203, 7904, 7976), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 41)), 0); (("triple_of_sexp", 575), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -132), ((("a")), 100000000, 0, -123), 0), 100000000, 0, -131), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -130), ((("b")), 100000000, 0, -124), 0), 100000000, 0, -129), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -128), ((("c")), 100000000, 0, -125), 0), 100000000, 0, -127), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -126), (Tag2 ([((("a")), 100000000, 0, -123); ((("b")), 100000000, 0, -124); ((("c")), 100000000, 0, -125)]), 100000000, 0, -122), 0), 100000000, 0, -121), 0), 100000000, 0, -120), 0), 100000000, 0, -119), 0), 100000000, 0, -118), 0, (("src/sexp_conv.mli", 209, 8240, 8240), ("src/sexp_conv.mli", 214, 8331, 8348), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 42)), 0); (("list_of_sexp", 576), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -117), ((("a")), 100000000, 0, -114), 0), 100000000, 0, -116), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -115), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -114)], (0)), 100000000, 0, -113), 0), 100000000, 0, -112), 0), 100000000, 0, -111), 0, (("src/sexp_conv.mli", 219, 8538, 8538), ("src/sexp_conv.mli", 219, 8538, 8592), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 43)), 0); (("array_of_sexp", 577), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -110), ((("a")), 100000000, 0, -107), 0), 100000000, 0, -109), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -108), (Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -107)], (0)), 100000000, 0, -106), 0), 100000000, 0, -105), 0), 100000000, 0, -104), 0, (("src/sexp_conv.mli", 224, 8784, 8784), ("src/sexp_conv.mli", 224, 8784, 8840), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 44)), 0); (("hashtbl_of_sexp", 578), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -103), ((("a")), 100000000, 0, -97), 0), 100000000, 0, -102), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -101), ((("b")), 100000000, 0, -98), 0), 100000000, 0, -100), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -99), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Hashtbl"), "t"), [((("a")), 100000000, 0, -97); ((("b")), 100000000, 0, -98)], (0)), 100000000, 0, -96), 0), 100000000, 0, -95), 0), 100000000, 0, -94), 0), 100000000, 0, -93), 0, (("src/sexp_conv.mli", 231, 9168, 9168), ("src/sexp_conv.mli", 231, 9168, 9254), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 45)), 0); (("opaque_of_sexp", 579), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -92), ((("a")), 100000000, 0, -91), 0), 100000000, 0, -90), 0, (("src/sexp_conv.mli", 235, 9373, 9373), ("src/sexp_conv.mli", 235, 9373, 9406), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 46)), 0); (("fun_of_sexp", 580), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -89), ((("a")), 100000000, 0, -88), 0), 100000000, 0, -87), 0, (("src/sexp_conv.mli", 239, 9517, 9517), ("src/sexp_conv.mli", 239, 9517, 9547), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 47)), 0); (("sexp_grammar_with_tags", 581), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "grammar"), 0, (0)), 100000000, 0, -86), (Tag1 (("tags"), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -84); (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -85)]), 100000000, 0, -83)], (0)), 100000000, 0, -82), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "grammar"), 0, (0)), 100000000, 0, -81), 0), 100000000, 0, -80), 0), 100000000, 0, -79), 0, (("src/sexp_conv_grammar.mli", 3, 30, 30), ("src/sexp_conv_grammar.mli", 6, 116, 141), 0), 0, Tag1 ("Sexplib0__Sexp_conv_grammar", 1)), 0); (("sexp_grammar_with_tag_list", 582), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "with_tag_list"), [((("a")), 100000000, 0, -73)], (0)), 100000000, 0, -78), (Tag1 (("tags"), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -76); (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -77)]), 100000000, 0, -75)], (0)), 100000000, 0, -74), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "with_tag_list"), [((("a")), 100000000, 0, -73)], (0)), 100000000, 0, -72), 0), 100000000, 0, -71), 0), 100000000, 0, -70), 0, (("src/sexp_conv_grammar.mli", 8, 143, 143), ("src/sexp_conv_grammar.mli", 11, 242, 276), 0), 0, Tag1 ("Sexplib0__Sexp_conv_grammar", 2)), 0); (("unit_sexp_grammar", 583), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "t"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -69)], (0)), 100000000, 0, -68), 0, (("src/sexp_conv_grammar.mli", 15, 312, 312), ("src/sexp_conv_grammar.mli", 15, 312, 355), 0), 0, Tag1 ("Sexplib0__Sexp_conv_grammar", 3)), 0); (("bool_sexp_grammar", 584), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "t"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -67)], (0)), 100000000, 0, -66), 0, (("src/sexp_conv_grammar.mli", 16, 356, 356), ("src/sexp_conv_grammar.mli", 16, 356, 399), 0), 0, Tag1 ("Sexplib0__Sexp_conv_grammar", 4)), 0); (("string_sexp_grammar", 585), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "t"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -65)], (0)), 100000000, 0, -64), 0, (("src/sexp_conv_grammar.mli", 17, 400, 400), ("src/sexp_conv_grammar.mli", 17, 400, 447), 0), 0, Tag1 ("Sexplib0__Sexp_conv_grammar", 5)), 0); (("bytes_sexp_grammar", 586), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "t"), [(Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -63)], (0)), 100000000, 0, -62), 0, (("src/sexp_conv_grammar.mli", 18, 448, 448), ("src/sexp_conv_grammar.mli", 18, 448, 493), 0), 0, Tag1 ("Sexplib0__Sexp_conv_grammar", 6)), 0); (("char_sexp_grammar", 587), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "t"), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -61)], (0)), 100000000, 0, -60), 0, (("src/sexp_conv_grammar.mli", 19, 494, 494), ("src/sexp_conv_grammar.mli", 19, 494, 537), 0), 0, Tag1 ("Sexplib0__Sexp_conv_grammar", 7)), 0); (("int_sexp_grammar", 588), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "t"), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -59)], (0)), 100000000, 0, -58), 0, (("src/sexp_conv_grammar.mli", 20, 538, 538), ("src/sexp_conv_grammar.mli", 20, 538, 579), 0), 0, Tag1 ("Sexplib0__Sexp_conv_grammar", 8)), 0); (("float_sexp_grammar", 589), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "t"), [(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -57)], (0)), 100000000, 0, -56), 0, (("src/sexp_conv_grammar.mli", 21, 580, 580), ("src/sexp_conv_grammar.mli", 21, 580, 625), 0), 0, Tag1 ("Sexplib0__Sexp_conv_grammar", 9)), 0); (("int32_sexp_grammar", 590), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "t"), [(Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -55)], (0)), 100000000, 0, -54), 0, (("src/sexp_conv_grammar.mli", 22, 626, 626), ("src/sexp_conv_grammar.mli", 22, 626, 671), 0), 0, Tag1 ("Sexplib0__Sexp_conv_grammar", 10)), 0); (("int64_sexp_grammar", 591), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "t"), [(Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -53)], (0)), 100000000, 0, -52), 0, (("src/sexp_conv_grammar.mli", 23, 672, 672), ("src/sexp_conv_grammar.mli", 23, 672, 717), 0), 0, Tag1 ("Sexplib0__Sexp_conv_grammar", 11)), 0); (("nativeint_sexp_grammar", 592), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "t"), [(Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -51)], (0)), 100000000, 0, -50), 0, (("src/sexp_conv_grammar.mli", 24, 718, 718), ("src/sexp_conv_grammar.mli", 24, 718, 771), 0), 0, Tag1 ("Sexplib0__Sexp_conv_grammar", 12)), 0); (("sexp_t_sexp_grammar", 593), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -49)], (0)), 100000000, 0, -48), 0, (("src/sexp_conv_grammar.mli", 25, 772, 772), ("src/sexp_conv_grammar.mli", 25, 772, 819), 0), 0, Tag1 ("Sexplib0__Sexp_conv_grammar", 13)), 0); (("ref_sexp_grammar", 594), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "t"), [((("a")), 100000000, 0, -46)], (0)), 100000000, 0, -47), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "t"), [(Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [((("a")), 100000000, 0, -46)], (0)), 100000000, 0, -45)], (0)), 100000000, 0, -44), 0), 100000000, 0, -43), 0, (("src/sexp_conv_grammar.mli", 26, 820, 820), ("src/sexp_conv_grammar.mli", 26, 820, 885), 0), 0, Tag1 ("Sexplib0__Sexp_conv_grammar", 14)), 0); (("lazy_t_sexp_grammar", 595), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "t"), [((("a")), 100000000, 0, -41)], (0)), 100000000, 0, -42), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "t"), [(Tag3 ((Tag3 ("lazy_t", 14)), [((("a")), 100000000, 0, -41)], (0)), 100000000, 0, -40)], (0)), 100000000, 0, -39), 0), 100000000, 0, -38), 0, (("src/sexp_conv_grammar.mli", 27, 886, 886), ("src/sexp_conv_grammar.mli", 27, 886, 957), 0), 0, Tag1 ("Sexplib0__Sexp_conv_grammar", 15)), 0); (("option_sexp_grammar", 596), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "t"), [((("a")), 100000000, 0, -36)], (0)), 100000000, 0, -37), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "t"), [(Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -36)], (0)), 100000000, 0, -35)], (0)), 100000000, 0, -34), 0), 100000000, 0, -33), 0, (("src/sexp_conv_grammar.mli", 28, 958, 958), ("src/sexp_conv_grammar.mli", 28, 958, 1029), 0), 0, Tag1 ("Sexplib0__Sexp_conv_grammar", 16)), 0); (("list_sexp_grammar", 597), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "t"), [((("a")), 100000000, 0, -31)], (0)), 100000000, 0, -32), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "t"), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -31)], (0)), 100000000, 0, -30)], (0)), 100000000, 0, -29), 0), 100000000, 0, -28), 0, (("src/sexp_conv_grammar.mli", 29, 1030, 1030), ("src/sexp_conv_grammar.mli", 29, 1030, 1097), 0), 0, Tag1 ("Sexplib0__Sexp_conv_grammar", 17)), 0); (("array_sexp_grammar", 598), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "t"), [((("a")), 100000000, 0, -26)], (0)), 100000000, 0, -27), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "t"), [(Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -26)], (0)), 100000000, 0, -25)], (0)), 100000000, 0, -24), 0), 100000000, 0, -23), 0, (("src/sexp_conv_grammar.mli", 30, 1098, 1098), ("src/sexp_conv_grammar.mli", 30, 1098, 1167), 0), 0, Tag1 ("Sexplib0__Sexp_conv_grammar", 18)), 0); (("opaque_sexp_grammar", 599), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "t"), [((("a")), 100000000, 0, -22)], (0)), 100000000, 0, -21), 0, (("src/sexp_conv_grammar.mli", 31, 1168, 1168), ("src/sexp_conv_grammar.mli", 31, 1168, 1211), 0), 0, Tag1 ("Sexplib0__Sexp_conv_grammar", 19)), 0); (("fun_sexp_grammar", 600), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "t"), [((("a")), 100000000, 0, -20)], (0)), 100000000, 0, -19), 0, (("src/sexp_conv_grammar.mli", 32, 1212, 1212), ("src/sexp_conv_grammar.mli", 32, 1212, 1252), 0), 0, Tag1 ("Sexplib0__Sexp_conv_grammar", 20)), 0); (("sexp_of_exn", 601), ((Tag1 (0, (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -18), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("src/sexp_conv.mli", 252, 9862, 9862), ("src/sexp_conv.mli", 252, 9862, 9893), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 48)), 0); (("printexc_prefer_sexp", 602), ((Tag1 (0, (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -15), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -14), 0), 100000000, 0, -13), 0, (("src/sexp_conv.mli", 262, 10332, 10332), ("src/sexp_conv.mli", 262, 10332, 10372), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 49)), 0); (("sexp_of_exn_opt", 603), ((Tag1 (0, (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -12), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -11)], (0)), 100000000, 0, -10), 0), 100000000, 0, -9), 0, (("src/sexp_conv.mli", 266, 10511, 10511), ("src/sexp_conv.mli", 266, 10511, 10553), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 50)), 0); Tag3 (("Exn_converter", 604), 0, (Tag1 ([(("add", 607), ((Tag1 (Tag1 ("printexc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -346)], (0)), 100000000, 0, -345), (Tag1 (Tag1 ("finalise"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -344)], (0)), 100000000, 0, -343), (Tag1 (0, (Tag3 ((Tag3 ("extension_constructor", 16)), 0, (0)), 100000000, 0, -342), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -341), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -340), 0), 100000000, 0, -339), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -338), 0), 100000000, 0, -337), 0), 100000000, 0, -336), 0), 100000000, 0, -335), 0), 100000000, 0, -334), 0, (("src/sexp_conv.mli", 273, 10811, 10813), ("src/sexp_conv.mli", 278, 10917, 10928), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 51)), 0); Tag3 (("For_unit_tests_only", 608), 0, (Tag1 ([(("size", 609), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -349), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -348), 0), 100000000, 0, -347), 0, (("src/sexp_conv.mli", 282, 10966, 10970), ("src/sexp_conv.mli", 282, 10966, 10992), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 52)), 0)]), 0, (("src/sexp_conv.mli", 281, 10931, 10933), ("src/sexp_conv.mli", 283, 10993, 10998), 0), Tag1 ("Sexplib0__Sexp_conv", 53)), 0, 0)]), 0, (("src/sexp_conv.mli", 268, 10555, 10555), ("src/sexp_conv.mli", 284, 10999, 11002), 0), Tag1 ("Sexplib0__Sexp_conv", 54)), 0, 0); (("ignore", 605), ((Tag1 (0, ((0), 100000000, 0, -8), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7), 0), 100000000, 0, -6), (("%ignore", 1, 1, "", [0], 0)), (("src/sexp_conv.mli", 289, 11045, 11045), ("src/sexp_conv.mli", 289, 11045, 11084), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 55)), 0); (("=", 606), ((Tag1 (0, ((("a")), 100000000, 0, -5), (Tag1 (0, ((("a")), 100000000, 0, -5), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), (("%equal", 2, 1, "", [0; 0], 0)), (("src/sexp_conv.mli", 290, 11085, 11085), ("src/sexp_conv.mli", 290, 11085, 11129), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 56)), 0)], "Sexplib0__Sexp_conv", [("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
external ( = ) : 'a -> 'a -> bool = "%equal"

type partial = Partial | Total
type attribute = Parsetree.attribute
type attributes = attribute list
type value = Value_pattern
type computation = Computation_pattern
type _ pattern_category =
    Value : value pattern_category
  | Computation : computation pattern_category
type pattern = value general_pattern
and 'k general_pattern = 'k pattern_desc pattern_data
and 'a pattern_data = {
  pat_desc : 'a;
  pat_loc : Location.t;
  pat_extra : (pat_extra * Location.t * attributes) list;
  pat_type : Types.type_expr;
  pat_env : Env.t;
  pat_attributes : attributes;
}
and pat_extra =
    Tpat_constraint of core_type
  | Tpat_type of Path.t * Longident.t Asttypes.loc
  | Tpat_open of Path.t * Longident.t Asttypes.loc * Env.t
  | Tpat_unpack
and 'k pattern_desc =
    Tpat_any : value pattern_desc
  | Tpat_var : Ident.t * string Asttypes.loc -> value pattern_desc
  | Tpat_alias : value general_pattern * Ident.t *
      string Asttypes.loc -> value pattern_desc
  | Tpat_constant : Asttypes.constant -> value pattern_desc
  | Tpat_tuple : value general_pattern list -> value pattern_desc
  | Tpat_construct : Longident.t Asttypes.loc *
      Types.constructor_description * value general_pattern list *
      (Ident.t Asttypes.loc list * core_type) option -> value pattern_desc
  | Tpat_variant : Asttypes.label * value general_pattern option *
      Types.row_desc ref -> value pattern_desc
  | Tpat_record :
      (Longident.t Asttypes.loc * Types.label_description *
       value general_pattern)
      list * Asttypes.closed_flag -> value pattern_desc
  | Tpat_array : value general_pattern list -> value pattern_desc
  | Tpat_lazy : value general_pattern -> value pattern_desc
  | Tpat_value : tpat_value_argument -> computation pattern_desc
  | Tpat_exception : value general_pattern -> computation pattern_desc
  | Tpat_or : 'k general_pattern * 'k general_pattern *
      Types.row_desc option -> 'k pattern_desc
and tpat_value_argument = private value general_pattern
and expression = {
  exp_desc : expression_desc;
  exp_loc : Location.t;
  exp_extra : (exp_extra * Location.t * attributes) list;
  exp_type : Types.type_expr;
  exp_env : Env.t;
  exp_attributes : attributes;
}
and exp_extra =
    Texp_constraint of core_type
  | Texp_coerce of core_type option * core_type
  | Texp_poly of core_type option
  | Texp_newtype of string
and expression_desc =
    Texp_ident of Path.t * Longident.t Asttypes.loc * Types.value_description
  | Texp_constant of Asttypes.constant
  | Texp_let of Asttypes.rec_flag * value_binding list * expression
  | Texp_function of { arg_label : Asttypes.arg_label; param : Ident.t;
      cases : value case list; partial : partial;
    }
  | Texp_apply of expression * (Asttypes.arg_label * expression option) list
  | Texp_match of expression * computation case list * partial
  | Texp_try of expression * value case list
  | Texp_tuple of expression list
  | Texp_construct of Longident.t Asttypes.loc *
      Types.constructor_description * expression list
  | Texp_variant of Asttypes.label * expression option
  | Texp_record of {
      fields : (Types.label_description * record_label_definition) array;
      representation : Types.record_representation;
      extended_expression : expression option;
    }
  | Texp_field of expression * Longident.t Asttypes.loc *
      Types.label_description
  | Texp_setfield of expression * Longident.t Asttypes.loc *
      Types.label_description * expression
  | Texp_array of expression list
  | Texp_ifthenelse of expression * expression * expression option
  | Texp_sequence of expression * expression
  | Texp_while of expression * expression
  | Texp_for of Ident.t * Parsetree.pattern * expression * expression *
      Asttypes.direction_flag * expression
  | Texp_send of expression * meth
  | Texp_new of Path.t * Longident.t Asttypes.loc * Types.class_declaration
  | Texp_instvar of Path.t * Path.t * string Asttypes.loc
  | Texp_setinstvar of Path.t * Path.t * string Asttypes.loc * expression
  | Texp_override of Path.t *
      (Ident.t * string Asttypes.loc * expression) list
  | Texp_letmodule of Ident.t option * string option Asttypes.loc *
      Types.module_presence * module_expr * expression
  | Texp_letexception of extension_constructor * expression
  | Texp_assert of expression * Location.t
  | Texp_lazy of expression
  | Texp_object of class_structure * string list
  | Texp_pack of module_expr
  | Texp_letop of { let_ : binding_op; ands : binding_op list;
      param : Ident.t; body : value case; partial : partial;
    }
  | Texp_unreachable
  | Texp_extension_constructor of Longident.t Asttypes.loc * Path.t
  | Texp_open of open_declaration * expression
and meth =
    Tmeth_name of string
  | Tmeth_val of Ident.t
  | Tmeth_ancestor of Ident.t * Path.t
and 'k case = {
  c_lhs : 'k general_pattern;
  c_guard : expression option;
  c_rhs : expression;
}
and record_label_definition =
    Kept of Types.type_expr * Asttypes.mutable_flag
  | Overridden of Longident.t Asttypes.loc * expression
and binding_op = {
  bop_op_path : Path.t;
  bop_op_name : string Asttypes.loc;
  bop_op_val : Types.value_description;
  bop_op_type : Types.type_expr;
  bop_exp : expression;
  bop_loc : Location.t;
}
and class_expr = {
  cl_desc : class_expr_desc;
  cl_loc : Location.t;
  cl_type : Types.class_type;
  cl_env : Env.t;
  cl_attributes : attributes;
}
and class_expr_desc =
    Tcl_ident of Path.t * Longident.t Asttypes.loc * core_type list
  | Tcl_structure of class_structure
  | Tcl_fun of Asttypes.arg_label * pattern * (Ident.t * expression) list *
      class_expr * partial
  | Tcl_apply of class_expr * (Asttypes.arg_label * expression option) list
  | Tcl_let of Asttypes.rec_flag * value_binding list *
      (Ident.t * expression) list * class_expr
  | Tcl_constraint of class_expr * class_type option * string list *
      string list * Types.MethSet.t
  | Tcl_open of open_description * class_expr
and class_structure = {
  cstr_self : pattern;
  cstr_fields : class_field list;
  cstr_type : Types.class_signature;
  cstr_meths : Ident.t Types.Meths.t;
}
and class_field = {
  cf_desc : class_field_desc;
  cf_loc : Location.t;
  cf_attributes : attributes;
}
and class_field_kind =
    Tcfk_virtual of core_type
  | Tcfk_concrete of Asttypes.override_flag * expression
and class_field_desc =
    Tcf_inherit of Asttypes.override_flag * class_expr * string option *
      (string * Ident.t) list * (string * Ident.t) list
  | Tcf_val of string Asttypes.loc * Asttypes.mutable_flag * Ident.t *
      class_field_kind * bool
  | Tcf_method of string Asttypes.loc * Asttypes.private_flag *
      class_field_kind
  | Tcf_constraint of core_type * core_type
  | Tcf_initializer of expression
  | Tcf_attribute of attribute
and module_expr = {
  mod_desc : module_expr_desc;
  mod_loc : Location.t;
  mod_type : Types.module_type;
  mod_env : Env.t;
  mod_attributes : attributes;
}
and module_type_constraint =
    Tmodtype_implicit
  | Tmodtype_explicit of module_type
and functor_parameter =
    Unit
  | Named of Ident.t option * string option Asttypes.loc * module_type
and module_expr_desc =
    Tmod_ident of Path.t * Longident.t Asttypes.loc
  | Tmod_structure of structure
  | Tmod_functor of functor_parameter * module_expr
  | Tmod_apply of module_expr * module_expr * module_coercion
  | Tmod_apply_unit of module_expr
  | Tmod_constraint of module_expr * Types.module_type *
      module_type_constraint * module_coercion
  | Tmod_unpack of expression * Types.module_type
and structure = {
  str_items : structure_item list;
  str_type : Types.signature;
  str_final_env : Env.t;
}
and structure_item = {
  str_desc : structure_item_desc;
  str_loc : Location.t;
  str_env : Env.t;
}
and structure_item_desc =
    Tstr_eval of expression * attributes
  | Tstr_value of Asttypes.rec_flag * value_binding list
  | Tstr_primitive of value_description
  | Tstr_type of Asttypes.rec_flag * type_declaration list
  | Tstr_typext of type_extension
  | Tstr_exception of type_exception
  | Tstr_module of module_binding
  | Tstr_recmodule of module_binding list
  | Tstr_modtype of module_type_declaration
  | Tstr_open of open_declaration
  | Tstr_class of (class_declaration * string list) list
  | Tstr_class_type of
      (Ident.t * string Asttypes.loc * class_type_declaration) list
  | Tstr_include of include_declaration
  | Tstr_attribute of attribute
and module_binding = {
  mb_id : Ident.t option;
  mb_name : string option Asttypes.loc;
  mb_presence : Types.module_presence;
  mb_expr : module_expr;
  mb_attributes : attributes;
  mb_loc : Location.t;
}
and value_binding = {
  vb_pat : pattern;
  vb_expr : expression;
  vb_attributes : attributes;
  vb_loc : Location.t;
}
and module_coercion =
    Tcoerce_none
  | Tcoerce_structure of (int * module_coercion) list *
      (Ident.t * int * module_coercion) list
  | Tcoerce_functor of module_coercion * module_coercion
  | Tcoerce_primitive of primitive_coercion
  | Tcoerce_alias of Env.t * Path.t * module_coercion
and module_type = {
  mty_desc : module_type_desc;
  mty_type : Types.module_type;
  mty_env : Env.t;
  mty_loc : Location.t;
  mty_attributes : attributes;
}
and module_type_desc =
    Tmty_ident of Path.t * Longident.t Asttypes.loc
  | Tmty_signature of signature
  | Tmty_functor of functor_parameter * module_type
  | Tmty_with of module_type *
      (Path.t * Longident.t Asttypes.loc * with_constraint) list
  | Tmty_typeof of module_expr
  | Tmty_alias of Path.t * Longident.t Asttypes.loc
and primitive_coercion = {
  pc_desc : Primitive.description;
  pc_type : Types.type_expr;
  pc_env : Env.t;
  pc_loc : Location.t;
}
and signature = {
  sig_items : signature_item list;
  sig_type : Types.signature;
  sig_final_env : Env.t;
}
and signature_item = {
  sig_desc : signature_item_desc;
  sig_env : Env.t;
  sig_loc : Location.t;
}
and signature_item_desc =
    Tsig_value of value_description
  | Tsig_type of Asttypes.rec_flag * type_declaration list
  | Tsig_typesubst of type_declaration list
  | Tsig_typext of type_extension
  | Tsig_exception of type_exception
  | Tsig_module of module_declaration
  | Tsig_modsubst of module_substitution
  | Tsig_recmodule of module_declaration list
  | Tsig_modtype of module_type_declaration
  | Tsig_modtypesubst of module_type_declaration
  | Tsig_open of open_description
  | Tsig_include of include_description
  | Tsig_class of class_description list
  | Tsig_class_type of class_type_declaration list
  | Tsig_attribute of attribute
and module_declaration = {
  md_id : Ident.t option;
  md_name : string option Asttypes.loc;
  md_presence : Types.module_presence;
  md_type : module_type;
  md_attributes : attributes;
  md_loc : Location.t;
}
and module_substitution = {
  ms_id : Ident.t;
  ms_name : string Asttypes.loc;
  ms_manifest : Path.t;
  ms_txt : Longident.t Asttypes.loc;
  ms_attributes : attributes;
  ms_loc : Location.t;
}
and module_type_declaration = {
  mtd_id : Ident.t;
  mtd_name : string Asttypes.loc;
  mtd_type : module_type option;
  mtd_attributes : attributes;
  mtd_loc : Location.t;
}
and 'a open_infos = {
  open_expr : 'a;
  open_bound_items : Types.signature;
  open_override : Asttypes.override_flag;
  open_env : Env.t;
  open_loc : Location.t;
  open_attributes : attribute list;
}
and open_description = (Path.t * Longident.t Asttypes.loc) open_infos
and open_declaration = module_expr open_infos
and 'a include_infos = {
  incl_mod : 'a;
  incl_type : Types.signature;
  incl_loc : Location.t;
  incl_attributes : attribute list;
}
and include_description = module_type include_infos
and include_declaration = module_expr include_infos
and with_constraint =
    Twith_type of type_declaration
  | Twith_module of Path.t * Longident.t Asttypes.loc
  | Twith_modtype of module_type
  | Twith_typesubst of type_declaration
  | Twith_modsubst of Path.t * Longident.t Asttypes.loc
  | Twith_modtypesubst of module_type
and core_type = {
  mutable ctyp_desc : core_type_desc;
  mutable ctyp_type : Types.type_expr;
  ctyp_env : Env.t;
  ctyp_loc : Location.t;
  ctyp_attributes : attributes;
}
and core_type_desc =
    Ttyp_any
  | Ttyp_var of string
  | Ttyp_arrow of Asttypes.arg_label * core_type * core_type
  | Ttyp_tuple of core_type list
  | Ttyp_constr of Path.t * Longident.t Asttypes.loc * core_type list
  | Ttyp_object of object_field list * Asttypes.closed_flag
  | Ttyp_class of Path.t * Longident.t Asttypes.loc * core_type list
  | Ttyp_alias of core_type * string
  | Ttyp_variant of row_field list * Asttypes.closed_flag *
      Asttypes.label list option
  | Ttyp_poly of string list * core_type
  | Ttyp_package of package_type
and package_type = {
  pack_path : Path.t;
  pack_fields : (Longident.t Asttypes.loc * core_type) list;
  pack_type : Types.module_type;
  pack_txt : Longident.t Asttypes.loc;
}
and row_field = {
  rf_desc : row_field_desc;
  rf_loc : Location.t;
  rf_attributes : attributes;
}
and row_field_desc =
    Ttag of string Asttypes.loc * bool * core_type list
  | Tinherit of core_type
and object_field = {
  of_desc : object_field_desc;
  of_loc : Location.t;
  of_attributes : attributes;
}
and object_field_desc =
    OTtag of string Asttypes.loc * core_type
  | OTinherit of core_type
and value_description = {
  val_id : Ident.t;
  val_name : string Asttypes.loc;
  val_desc : core_type;
  val_val : Types.value_description;
  val_prim : string list;
  val_loc : Location.t;
  val_attributes : attributes;
}
and type_declaration = {
  typ_id : Ident.t;
  typ_name : string Asttypes.loc;
  typ_params : (core_type * (Asttypes.variance * Asttypes.injectivity)) list;
  typ_type : Types.type_declaration;
  typ_cstrs : (core_type * core_type * Location.t) list;
  typ_kind : type_kind;
  typ_private : Asttypes.private_flag;
  typ_manifest : core_type option;
  typ_loc : Location.t;
  typ_attributes : attributes;
}
and type_kind =
    Ttype_abstract
  | Ttype_variant of constructor_declaration list
  | Ttype_record of label_declaration list
  | Ttype_open
and label_declaration = {
  ld_id : Ident.t;
  ld_name : string Asttypes.loc;
  ld_mutable : Asttypes.mutable_flag;
  ld_type : core_type;
  ld_loc : Location.t;
  ld_attributes : attributes;
}
and constructor_declaration = {
  cd_id : Ident.t;
  cd_name : string Asttypes.loc;
  cd_vars : string Asttypes.loc list;
  cd_args : constructor_arguments;
  cd_res : core_type option;
  cd_loc : Location.t;
  cd_attributes : attributes;
}
and constructor_arguments =
    Cstr_tuple of core_type list
  | Cstr_record of label_declaration list
and type_extension = {
  tyext_path : Path.t;
  tyext_txt : Longident.t Asttypes.loc;
  tyext_params :
    (core_type * (Asttypes.variance * Asttypes.injectivity)) list;
  tyext_constructors : extension_constructor list;
  tyext_private : Asttypes.private_flag;
  tyext_loc : Location.t;
  tyext_attributes : attributes;
}
and type_exception = {
  tyexn_constructor : extension_constructor;
  tyexn_loc : Location.t;
  tyexn_attributes : attribute list;
}
and extension_constructor = {
  ext_id : Ident.t;
  ext_name : string Asttypes.loc;
  ext_type : Types.extension_constructor;
  ext_kind : extension_constructor_kind;
  ext_loc : Location.t;
  ext_attributes : attributes;
}
and extension_constructor_kind =
    Text_decl of string Asttypes.loc list * constructor_arguments *
      core_type option
  | Text_rebind of Path.t * Longident.t Asttypes.loc
and class_type = {
  cltyp_desc : class_type_desc;
  cltyp_type : Types.class_type;
  cltyp_env : Env.t;
  cltyp_loc : Location.t;
  cltyp_attributes : attributes;
}
and class_type_desc =
    Tcty_constr of Path.t * Longident.t Asttypes.loc * core_type list
  | Tcty_signature of class_signature
  | Tcty_arrow of Asttypes.arg_label * core_type * class_type
  | Tcty_open of open_description * class_type
and class_signature = {
  csig_self : core_type;
  csig_fields : class_type_field list;
  csig_type : Types.class_signature;
}
and class_type_field = {
  ctf_desc : class_type_field_desc;
  ctf_loc : Location.t;
  ctf_attributes : attributes;
}
and class_type_field_desc =
    Tctf_inherit of class_type
  | Tctf_val of
      (string * Asttypes.mutable_flag * Asttypes.virtual_flag * core_type)
  | Tctf_method of
      (string * Asttypes.private_flag * Asttypes.virtual_flag * core_type)
  | Tctf_constraint of (core_type * core_type)
  | Tctf_attribute of attribute
and class_declaration = class_expr class_infos
and class_description = class_type class_infos
and class_type_declaration = class_type class_infos
and 'a class_infos = {
  ci_virt : Asttypes.virtual_flag;
  ci_params : (core_type * (Asttypes.variance * Asttypes.injectivity)) list;
  ci_id_name : string Asttypes.loc;
  ci_id_class : Ident.t;
  ci_id_class_type : Ident.t;
  ci_id_object : Ident.t;
  ci_expr : 'a;
  ci_decl : Types.class_declaration;
  ci_type_decl : Types.class_type_declaration;
  ci_loc : Location.t;
  ci_attributes : attributes;
}
type implementation = {
  structure : structure;
  coercion : module_coercion;
  signature : Types.signature;
  shape : Shape.t;
}
val as_computation_pattern : pattern -> computation general_pattern
val classify_pattern_desc : 'k pattern_desc -> 'k pattern_category
val classify_pattern : 'k general_pattern -> 'k pattern_category
type pattern_action = { f : 'k. 'k general_pattern -> unit; }
val shallow_iter_pattern_desc : pattern_action -> 'k pattern_desc -> unit
type pattern_transformation = {
  f : 'k. 'k general_pattern -> 'k general_pattern;
}
val shallow_map_pattern_desc :
  pattern_transformation -> 'k pattern_desc -> 'k pattern_desc
val iter_general_pattern : pattern_action -> 'k general_pattern -> unit
val iter_pattern : (pattern -> unit) -> pattern -> unit
type pattern_predicate = { f : 'k. 'k general_pattern -> bool; }
val exists_general_pattern : pattern_predicate -> 'k general_pattern -> bool
val exists_pattern : (pattern -> bool) -> pattern -> bool
val let_bound_idents : value_binding list -> Ident.t list
val let_bound_idents_full :
  value_binding list ->
  (Ident.t * string Asttypes.loc * Types.type_expr) list
val alpha_pat :
  (Ident.t * Ident.t) list -> 'k general_pattern -> 'k general_pattern
val mknoloc : 'a -> 'a Asttypes.loc
val mkloc : 'a -> Location.t -> 'a Asttypes.loc
val pat_bound_idents : 'k general_pattern -> Ident.t list
val pat_bound_idents_full :
  'k general_pattern ->
  (Ident.t * string Asttypes.loc * Types.type_expr) list
val split_pattern :
  computation general_pattern -> pattern option * pattern option
("DEBUG:rule", [Tag1 (("partial", 1379), (0, 0, Tag1 ([(("Partial", 283), (0), 0, (("typing/typedtree.mli", 28, 1294, 1309), ("typing/typedtree.mli", 28, 1294, 1316), 0), 0, Tag1 ("Typedtree", 1)); (("Total", 284), (0), 0, (("typing/typedtree.mli", 28, 1294, 1317), ("typing/typedtree.mli", 28, 1294, 1324), 0), 0, Tag1 ("Typedtree", 2))], 0), 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 28, 1294, 1294), ("typing/typedtree.mli", 28, 1294, 1324), 0), 0, 1, 0, Tag1 ("Typedtree", 0)), 1, 0); Tag1 (("attribute", 1380), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Parsetree")), "attribute"), 0, (0)), 100000000, 0, -893)), 0, 0, 0, 0, (("typing/typedtree.mli", 32, 1355, 1355), ("typing/typedtree.mli", 32, 1355, 1391), 0), 0, 0, 0, Tag1 ("Typedtree", 3)), 1, 0); Tag1 (("attributes", 1381), (0, 0, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("attribute", 1380)), 0, (0)), 100000000, 0, -892)], (0)), 100000000, 0, -891)), 0, 0, 0, 0, (("typing/typedtree.mli", 33, 1392, 1392), ("typing/typedtree.mli", 33, 1392, 1424), 0), 0, 0, 0, Tag1 ("Typedtree", 6)), 1, 0); Tag1 (("value", 1382), (0, 0, Tag1 ([(("Value_pattern", 361), (0), 0, (("typing/typedtree.mli", 37, 1452, 1465), ("typing/typedtree.mli", 37, 1452, 1478), 0), 0, Tag1 ("Typedtree", 8))], 0), 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 37, 1452, 1452), ("typing/typedtree.mli", 37, 1452, 1478), 0), 0, 1, 0, Tag1 ("Typedtree", 7)), 1, 0); Tag1 (("computation", 1383), (0, 0, Tag1 ([(("Computation_pattern", 363), (0), 0, (("typing/typedtree.mli", 38, 1479, 1498), ("typing/typedtree.mli", 38, 1479, 1517), 0), 0, Tag1 ("Typedtree", 10))], 0), 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 38, 1479, 1479), ("typing/typedtree.mli", 38, 1479, 1517), 0), 0, 1, 0, Tag1 ("Typedtree", 9)), 1, 0); Tag1 (("pattern_category", 1384), ([((("_")), 100000000, 0, -890)], 1, Tag1 ([(("Value", 365), (0), ((Tag3 ((("pattern_category", 1384)), [(Tag3 ((("value", 1382)), 0, (0)), 100000000, 0, -887)], (0)), 100000000, 0, -886)), (("typing/typedtree.mli", 41, 1545, 1545), ("typing/typedtree.mli", 41, 1545, 1577), 0), 0, Tag1 ("Typedtree", 12)); (("Computation", 366), (0), ((Tag3 ((("pattern_category", 1384)), [(Tag3 ((("computation", 1383)), 0, (0)), 100000000, 0, -889)], (0)), 100000000, 0, -888)), (("typing/typedtree.mli", 42, 1578, 1578), ("typing/typedtree.mli", 42, 1578, 1622), 0), 0, Tag1 ("Typedtree", 13))], 0), 1, 0, [63], [0], 0, 0, (("typing/typedtree.mli", 40, 1519, 1519), ("typing/typedtree.mli", 42, 1578, 1622), 0), 0, 1, 0, Tag1 ("Typedtree", 11)), 1, 0); Tag1 (("pattern", 1385), (0, 0, 0, 1, ((Tag3 ((("general_pattern", 1386)), [(Tag3 ((("value", 1382)), 0, (0)), 100000000, 0, -885)], (0)), 100000000, 0, -884)), 0, 0, 0, 0, (("typing/typedtree.mli", 44, 1624, 1624), ("typing/typedtree.mli", 44, 1624, 1660), 0), 0, 0, 0, Tag1 ("Typedtree", 14)), 1, 0); Tag1 (("general_pattern", 1386), ([((("k")), 100000000, 0, -883)], 1, 0, 1, ((Tag3 ((("pattern_data", 1387)), [(Tag3 ((("pattern_desc", 1389)), [((("k")), 100000000, 0, -883)], (0)), 100000000, 0, -882)], (0)), 100000000, 0, -881)), [63], [0], 0, 0, (("typing/typedtree.mli", 45, 1661, 1661), ("typing/typedtree.mli", 45, 1661, 1714), 0), 0, 0, 0, Tag1 ("Typedtree", 15)), 2, 0); Tag1 (("pattern_data", 1387), ([((("a")), 100000000, 0, -871)], 1, [[(("pat_desc", 438), 0, ((("a")), 100000000, 0, -871), (("typing/typedtree.mli", 48, 1738, 1742), ("typing/typedtree.mli", 48, 1738, 1755), 0), 0, Tag1 ("Typedtree", 86)); (("pat_loc", 505), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -872), (("typing/typedtree.mli", 49, 1756, 1760), ("typing/typedtree.mli", 49, 1756, 1780), 0), 0, Tag1 ("Typedtree", 87)); (("pat_extra", 506), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("pat_extra", 1388)), 0, (0)), 100000000, 0, -875); (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -876); (Tag3 ((("attributes", 1381)), 0, (0)), 100000000, 0, -877)]), 100000000, 0, -874)], (0)), 100000000, 0, -873), (("typing/typedtree.mli", 50, 1781, 1785), ("typing/typedtree.mli", 50, 1781, 1840), 0), 0, Tag1 ("Typedtree", 88)); (("pat_type", 613), 0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -878), (("typing/typedtree.mli", 51, 1841, 1845), ("typing/typedtree.mli", 51, 1841, 1871), 0), 0, Tag1 ("Typedtree", 89)); (("pat_env", 782), 0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -879), (("typing/typedtree.mli", 52, 1872, 1876), ("typing/typedtree.mli", 52, 1872, 1891), 0), 0, Tag1 ("Typedtree", 90)); (("pat_attributes", 783), 0, (Tag3 ((("attributes", 1381)), 0, (0)), 100000000, 0, -880), (("typing/typedtree.mli", 53, 1892, 1896), ("typing/typedtree.mli", 53, 1892, 1923), 0), 0, Tag1 ("Typedtree", 91))]], 1, 0, [25], [0], 0, 0, (("typing/typedtree.mli", 47, 1716, 1716), ("typing/typedtree.mli", 54, 1924, 1928), 0), 0, 0, 0, Tag1 ("Typedtree", 16)), 2, 0); Tag1 (("pat_extra", 1388), (0, 0, Tag1 ([(("Tpat_constraint", 784), ([(Tag3 ((("core_type", 1430)), 0, (0)), 100000000, 0, -863)]), 0, (("typing/typedtree.mli", 57, 1946, 1948), ("typing/typedtree.mli", 57, 1946, 1978), 0), 0, Tag1 ("Typedtree", 92)); (("Tpat_type", 785), ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -864); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -866)], (0)), 100000000, 0, -865)]), 0, (("typing/typedtree.mli", 61, 2109, 2111), ("typing/typedtree.mli", 61, 2109, 2150), 0), 0, Tag1 ("Typedtree", 93)); (("Tpat_open", 808), ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -867); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -869)], (0)), 100000000, 0, -868); (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -870)]), 0, (("typing/typedtree.mli", 68, 2427, 2429), ("typing/typedtree.mli", 68, 2427, 2476), 0), 0, Tag1 ("Typedtree", 94)); (("Tpat_unpack", 809), (0), 0, (("typing/typedtree.mli", 69, 2477, 2479), ("typing/typedtree.mli", 69, 2477, 2492), 0), 0, Tag1 ("Typedtree", 95))], 0), 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 56, 1930, 1930), ("typing/typedtree.mli", 69, 2477, 2492), 0), 0, 0, 0, Tag1 ("Typedtree", 17)), 2, 0); Tag1 (("pattern_desc", 1389), ([((("k")), 100000000, 0, -862)], 1, Tag1 ([(("Tpat_any", 810), (0), ((Tag3 ((("pattern_desc", 1389)), [(Tag3 ((("value", 1382)), 0, (0)), 100000000, 0, -787)], (0)), 100000000, 0, -786)), (("typing/typedtree.mli", 78, 2780, 2782), ("typing/typedtree.mli", 78, 2780, 2813), 0), 0, Tag1 ("Typedtree", 96)); (("Tpat_var", 811), ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -790); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -792)], (0)), 100000000, 0, -791)]), ((Tag3 ((("pattern_desc", 1389)), [(Tag3 ((("value", 1382)), 0, (0)), 100000000, 0, -789)], (0)), 100000000, 0, -788)), (("typing/typedtree.mli", 80, 2831, 2833), ("typing/typedtree.mli", 80, 2831, 2888), 0), 0, Tag1 ("Typedtree", 97)); (("Tpat_alias", 851), ([(Tag3 ((("general_pattern", 1386)), [(Tag3 ((("value", 1382)), 0, (0)), 100000000, 0, -796)], (0)), 100000000, 0, -795); (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -797); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -799)], (0)), 100000000, 0, -798)]), ((Tag3 ((("pattern_desc", 1389)), [(Tag3 ((("value", 1382)), 0, (0)), 100000000, 0, -794)], (0)), 100000000, 0, -793)), (("typing/typedtree.mli", 82, 2906, 2908), ("typing/typedtree.mli", 83, 2923, 2995), 0), 0, Tag1 ("Typedtree", 98)); (("Tpat_constant", 852), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "constant"), 0, (0)), 100000000, 0, -802)]), ((Tag3 ((("pattern_desc", 1389)), [(Tag3 ((("value", 1382)), 0, (0)), 100000000, 0, -801)], (0)), 100000000, 0, -800)), (("typing/typedtree.mli", 85, 3018, 3020), ("typing/typedtree.mli", 85, 3018, 3068), 0), 0, Tag1 ("Typedtree", 99)); (("Tpat_tuple", 853), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("general_pattern", 1386)), [(Tag3 ((("value", 1382)), 0, (0)), 100000000, 0, -807)], (0)), 100000000, 0, -806)], (0)), 100000000, 0, -805)]), ((Tag3 ((("pattern_desc", 1389)), [(Tag3 ((("value", 1382)), 0, (0)), 100000000, 0, -804)], (0)), 100000000, 0, -803)), (("typing/typedtree.mli", 87, 3116, 3118), ("typing/typedtree.mli", 87, 3116, 3181), 0), 0, Tag1 ("Typedtree", 100)); (("Tpat_construct", 854), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -811)], (0)), 100000000, 0, -810); (Tag3 (Tag1 ((Tag2 ("Types")), "constructor_description"), 0, (0)), 100000000, 0, -812); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("general_pattern", 1386)), [(Tag3 ((("value", 1382)), 0, (0)), 100000000, 0, -815)], (0)), 100000000, 0, -814)], (0)), 100000000, 0, -813); (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -820)], (0)), 100000000, 0, -819)], (0)), 100000000, 0, -818); (Tag3 ((("core_type", 1430)), 0, (0)), 100000000, 0, -821)]), 100000000, 0, -817)], (0)), 100000000, 0, -816)]), ((Tag3 ((("pattern_desc", 1389)), [(Tag3 ((("value", 1382)), 0, (0)), 100000000, 0, -809)], (0)), 100000000, 0, -808)), (("typing/typedtree.mli", 92, 3251, 3253), ("typing/typedtree.mli", 95, 3406, 3430), 0), 0, Tag1 ("Typedtree", 101)); (("Tpat_variant", 855), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "label"), 0, (0)), 100000000, 0, -824); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("general_pattern", 1386)), [(Tag3 ((("value", 1382)), 0, (0)), 100000000, 0, -827)], (0)), 100000000, 0, -826)], (0)), 100000000, 0, -825); (Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 (Tag1 ((Tag2 ("Types")), "row_desc"), 0, (0)), 100000000, 0, -829)], (0)), 100000000, 0, -828)]), ((Tag3 ((("pattern_desc", 1389)), [(Tag3 ((("value", 1382)), 0, (0)), 100000000, 0, -823)], (0)), 100000000, 0, -822)), (("typing/typedtree.mli", 104, 3885, 3887), ("typing/typedtree.mli", 106, 3971, 3995), 0), 0, Tag1 ("Typedtree", 102)); (("Tpat_record", 856), ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -835)], (0)), 100000000, 0, -834); (Tag3 (Tag1 ((Tag2 ("Types")), "label_description"), 0, (0)), 100000000, 0, -836); (Tag3 ((("general_pattern", 1386)), [(Tag3 ((("value", 1382)), 0, (0)), 100000000, 0, -838)], (0)), 100000000, 0, -837)]), 100000000, 0, -833)], (0)), 100000000, 0, -832); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "closed_flag"), 0, (0)), 100000000, 0, -839)]), ((Tag3 ((("pattern_desc", 1389)), [(Tag3 ((("value", 1382)), 0, (0)), 100000000, 0, -831)], (0)), 100000000, 0, -830)), (("typing/typedtree.mli", 112, 4155, 4157), ("typing/typedtree.mli", 115, 4277, 4301), 0), 0, Tag1 ("Typedtree", 103)); (("Tpat_array", 857), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("general_pattern", 1386)), [(Tag3 ((("value", 1382)), 0, (0)), 100000000, 0, -844)], (0)), 100000000, 0, -843)], (0)), 100000000, 0, -842)]), ((Tag3 ((("pattern_desc", 1389)), [(Tag3 ((("value", 1382)), 0, (0)), 100000000, 0, -841)], (0)), 100000000, 0, -840)), (("typing/typedtree.mli", 121, 4450, 4452), ("typing/typedtree.mli", 121, 4450, 4515), 0), 0, Tag1 ("Typedtree", 104)); (("Tpat_lazy", 858), ([(Tag3 ((("general_pattern", 1386)), [(Tag3 ((("value", 1382)), 0, (0)), 100000000, 0, -848)], (0)), 100000000, 0, -847)]), ((Tag3 ((("pattern_desc", 1389)), [(Tag3 ((("value", 1382)), 0, (0)), 100000000, 0, -846)], (0)), 100000000, 0, -845)), (("typing/typedtree.mli", 123, 4549, 4551), ("typing/typedtree.mli", 123, 4549, 4608), 0), 0, Tag1 ("Typedtree", 105)); (("Tpat_value", 859), ([(Tag3 ((("tpat_value_argument", 1390)), 0, (0)), 100000000, 0, -851)]), ((Tag3 ((("pattern_desc", 1389)), [(Tag3 ((("computation", 1383)), 0, (0)), 100000000, 0, -850)], (0)), 100000000, 0, -849)), (("typing/typedtree.mli", 126, 4660, 4662), ("typing/typedtree.mli", 126, 4660, 4724), 0), 0, Tag1 ("Typedtree", 106)); (("Tpat_exception", 860), ([(Tag3 ((("general_pattern", 1386)), [(Tag3 ((("value", 1382)), 0, (0)), 100000000, 0, -855)], (0)), 100000000, 0, -854)]), ((Tag3 ((("pattern_desc", 1389)), [(Tag3 ((("computation", 1383)), 0, (0)), 100000000, 0, -853)], (0)), 100000000, 0, -852)), (("typing/typedtree.mli", 140, 5338, 5340), ("typing/typedtree.mli", 140, 5338, 5408), 0), 0, Tag1 ("Typedtree", 107)); (("Tpat_or", 861), ([(Tag3 ((("general_pattern", 1386)), [((("k")), 100000000, 0, -857)], (0)), 100000000, 0, -858); (Tag3 ((("general_pattern", 1386)), [((("k")), 100000000, 0, -857)], (0)), 100000000, 0, -859); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Types")), "row_desc"), 0, (0)), 100000000, 0, -861)], (0)), 100000000, 0, -860)]), ((Tag3 ((("pattern_desc", 1389)), [((("k")), 100000000, 0, -857)], (0)), 100000000, 0, -856)), (("typing/typedtree.mli", 143, 5466, 5468), ("typing/typedtree.mli", 145, 5553, 5574), 0), 0, Tag1 ("Typedtree", 108))], 0), 1, 0, [63], [0], 0, 0, (("typing/typedtree.mli", 76, 2735, 2735), ("typing/typedtree.mli", 145, 5553, 5574), 0), 0, 0, 0, Tag1 ("Typedtree", 18)), 2, 0); Tag1 (("tpat_value_argument", 1390), (0, 0, 0, 0, ((Tag3 ((("general_pattern", 1386)), [(Tag3 ((("value", 1382)), 0, (0)), 100000000, 0, -785)], (0)), 100000000, 0, -784)), 0, 0, 0, 0, (("typing/typedtree.mli", 152, 5718, 5718), ("typing/typedtree.mli", 152, 5718, 5773), 0), 0, 0, 0, Tag1 ("Typedtree", 19)), 2, 0); Tag1 (("expression", 1391), (0, 0, [[(("exp_desc", 862), 0, (Tag3 ((("expression_desc", 1393)), 0, (0)), 100000000, 0, -774), (("typing/typedtree.mli", 155, 5792, 5796), ("typing/typedtree.mli", 155, 5792, 5822), 0), 0, Tag1 ("Typedtree", 109)); (("exp_loc", 863), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -775), (("typing/typedtree.mli", 156, 5823, 5827), ("typing/typedtree.mli", 156, 5823, 5847), 0), 0, Tag1 ("Typedtree", 110)); (("exp_extra", 864), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("exp_extra", 1392)), 0, (0)), 100000000, 0, -778); (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -779); (Tag3 ((("attributes", 1381)), 0, (0)), 100000000, 0, -780)]), 100000000, 0, -777)], (0)), 100000000, 0, -776), (("typing/typedtree.mli", 157, 5848, 5852), ("typing/typedtree.mli", 157, 5848, 5906), 0), 0, Tag1 ("Typedtree", 111)); (("exp_type", 865), 0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -781), (("typing/typedtree.mli", 158, 5907, 5911), ("typing/typedtree.mli", 158, 5907, 5937), 0), 0, Tag1 ("Typedtree", 112)); (("exp_env", 866), 0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -782), (("typing/typedtree.mli", 159, 5938, 5942), ("typing/typedtree.mli", 159, 5938, 5957), 0), 0, Tag1 ("Typedtree", 113)); (("exp_attributes", 867), 0, (Tag3 ((("attributes", 1381)), 0, (0)), 100000000, 0, -783), (("typing/typedtree.mli", 160, 5958, 5962), ("typing/typedtree.mli", 160, 5958, 5989), 0), 0, Tag1 ("Typedtree", 114))]], 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 154, 5775, 5775), ("typing/typedtree.mli", 161, 5990, 5994), 0), 0, 0, 0, Tag1 ("Typedtree", 20)), 2, 0); Tag1 (("exp_extra", 1392), (0, 0, Tag1 ([(("Texp_constraint", 868), ([(Tag3 ((("core_type", 1430)), 0, (0)), 100000000, 0, -767)]), 0, (("typing/typedtree.mli", 164, 6012, 6014), ("typing/typedtree.mli", 164, 6012, 6044), 0), 0, Tag1 ("Typedtree", 115)); (("Texp_coerce", 869), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("core_type", 1430)), 0, (0)), 100000000, 0, -769)], (0)), 100000000, 0, -768); (Tag3 ((("core_type", 1430)), 0, (0)), 100000000, 0, -770)]), 0, (("typing/typedtree.mli", 166, 6066, 6068), ("typing/typedtree.mli", 166, 6066, 6113), 0), 0, Tag1 ("Typedtree", 116)); (("Texp_poly", 870), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("core_type", 1430)), 0, (0)), 100000000, 0, -772)], (0)), 100000000, 0, -771)]), 0, (("typing/typedtree.mli", 170, 6235, 6237), ("typing/typedtree.mli", 170, 6235, 6268), 0), 0, Tag1 ("Typedtree", 117)); (("Texp_newtype", 871), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -773)]), 0, (("typing/typedtree.mli", 172, 6308, 6310), ("typing/typedtree.mli", 172, 6308, 6334), 0), 0, Tag1 ("Typedtree", 118))], 0), 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 163, 5996, 5996), ("typing/typedtree.mli", 172, 6308, 6334), 0), 0, 0, 0, Tag1 ("Typedtree", 21)), 2, 0); Tag1 (("expression_desc", 1393), (0, 0, Tag1 ([(("Texp_ident", 872), ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -644); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -646)], (0)), 100000000, 0, -645); (Tag3 (Tag1 ((Tag2 ("Types")), "value_description"), 0, (0)), 100000000, 0, -647)]), 0, (("typing/typedtree.mli", 176, 6390, 6394), ("typing/typedtree.mli", 176, 6390, 6458), 0), 0, Tag1 ("Typedtree", 119)); (("Texp_constant", 873), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "constant"), 0, (0)), 100000000, 0, -648)]), 0, (("typing/typedtree.mli", 180, 6501, 6503), ("typing/typedtree.mli", 180, 6501, 6530), 0), 0, Tag1 ("Typedtree", 120)); (("Texp_let", 874), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "rec_flag"), 0, (0)), 100000000, 0, -649); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("value_binding", 1412)), 0, (0)), 100000000, 0, -651)], (0)), 100000000, 0, -650); (Tag3 ((("expression", 1391)), 0, (0)), 100000000, 0, -652)]), 0, (("typing/typedtree.mli", 182, 6578, 6580), ("typing/typedtree.mli", 182, 6578, 6636), 0), 0, Tag1 ("Typedtree", 121)); (("Texp_function", 875), Tag1 ([(("arg_label", 876), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "arg_label"), 0, (0)), 100000000, 0, -653), (("typing/typedtree.mli", 186, 6800, 6823), ("typing/typedtree.mli", 186, 6800, 6845), 0), 0, Tag1 ("Typedtree", 122)); (("param", 877), 0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -654), (("typing/typedtree.mli", 186, 6800, 6846), ("typing/typedtree.mli", 186, 6800, 6862), 0), 0, Tag1 ("Typedtree", 123)); (("cases", 878), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("case", 1395)), [(Tag3 ((("value", 1382)), 0, (0)), 100000000, 0, -657)], (0)), 100000000, 0, -656)], (0)), 100000000, 0, -655), (("typing/typedtree.mli", 187, 6863, 6869), ("typing/typedtree.mli", 187, 6863, 6893), 0), 0, Tag1 ("Typedtree", 124)); (("partial", 879), 0, (Tag3 ((("partial", 1379)), 0, (0)), 100000000, 0, -658), (("typing/typedtree.mli", 187, 6863, 6894), ("typing/typedtree.mli", 187, 6863, 6912), 0), 0, Tag1 ("Typedtree", 125))]), 0, (("typing/typedtree.mli", 186, 6800, 6802), ("typing/typedtree.mli", 187, 6863, 6914), 0), 0, Tag1 ("Typedtree", 126)); (("Texp_apply", 880), ([(Tag3 ((("expression", 1391)), 0, (0)), 100000000, 0, -659); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "arg_label"), 0, (0)), 100000000, 0, -662); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("expression", 1391)), 0, (0)), 100000000, 0, -664)], (0)), 100000000, 0, -663)]), 100000000, 0, -661)], (0)), 100000000, 0, -660)]), 0, (("typing/typedtree.mli", 198, 7273, 7275), ("typing/typedtree.mli", 198, 7273, 7340), 0), 0, Tag1 ("Typedtree", 127)); (("Texp_match", 881), ([(Tag3 ((("expression", 1391)), 0, (0)), 100000000, 0, -665); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("case", 1395)), [(Tag3 ((("computation", 1383)), 0, (0)), 100000000, 0, -668)], (0)), 100000000, 0, -667)], (0)), 100000000, 0, -666); (Tag3 ((("partial", 1379)), 0, (0)), 100000000, 0, -669)]), 0, (("typing/typedtree.mli", 214, 7864, 7866), ("typing/typedtree.mli", 214, 7864, 7926), 0), 0, Tag1 ("Typedtree", 128)); (("Texp_try", 882), ([(Tag3 ((("expression", 1391)), 0, (0)), 100000000, 0, -670); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("case", 1395)), [(Tag3 ((("value", 1382)), 0, (0)), 100000000, 0, -673)], (0)), 100000000, 0, -672)], (0)), 100000000, 0, -671)]), 0, (("typing/typedtree.mli", 223, 8180, 8182), ("typing/typedtree.mli", 223, 8180, 8224), 0), 0, Tag1 ("Typedtree", 129)); (("Texp_tuple", 883), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("expression", 1391)), 0, (0)), 100000000, 0, -675)], (0)), 100000000, 0, -674)]), 0, (("typing/typedtree.mli", 225, 8277, 8279), ("typing/typedtree.mli", 225, 8277, 8310), 0), 0, Tag1 ("Typedtree", 130)); (("Texp_construct", 884), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -677)], (0)), 100000000, 0, -676); (Tag3 (Tag1 ((Tag2 ("Types")), "constructor_description"), 0, (0)), 100000000, 0, -678); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("expression", 1391)), 0, (0)), 100000000, 0, -680)], (0)), 100000000, 0, -679)]), 0, (("typing/typedtree.mli", 227, 8340, 8342), ("typing/typedtree.mli", 228, 8362, 8433), 0), 0, Tag1 ("Typedtree", 131)); (("Texp_variant", 885), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "label"), 0, (0)), 100000000, 0, -681); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("expression", 1391)), 0, (0)), 100000000, 0, -683)], (0)), 100000000, 0, -682)]), 0, (("typing/typedtree.mli", 233, 8552, 8554), ("typing/typedtree.mli", 233, 8552, 8597), 0), 0, Tag1 ("Typedtree", 132)); (("Texp_record", 886), Tag1 ([(("fields", 887), 0, (Tag3 ((Tag3 ("array", 8)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Types")), "label_description"), 0, (0)), 100000000, 0, -686); (Tag3 ((("record_label_definition", 1396)), 0, (0)), 100000000, 0, -687)]), 100000000, 0, -685)], (0)), 100000000, 0, -684), (("typing/typedtree.mli", 235, 8619, 8625), ("typing/typedtree.mli", 235, 8619, 8694), 0), 0, Tag1 ("Typedtree", 133)); (("representation", 888), 0, (Tag3 (Tag1 ((Tag2 ("Types")), "record_representation"), 0, (0)), 100000000, 0, -688), (("typing/typedtree.mli", 236, 8695, 8701), ("typing/typedtree.mli", 236, 8695, 8746), 0), 0, Tag1 ("Typedtree", 134)); (("extended_expression", 889), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("expression", 1391)), 0, (0)), 100000000, 0, -690)], (0)), 100000000, 0, -689), (("typing/typedtree.mli", 237, 8747, 8753), ("typing/typedtree.mli", 237, 8747, 8793), 0), 0, Tag1 ("Typedtree", 135))]), 0, (("typing/typedtree.mli", 234, 8598, 8600), ("typing/typedtree.mli", 238, 8794, 8799), 0), 0, Tag1 ("Typedtree", 136)); (("Texp_field", 890), ([(Tag3 ((("expression", 1391)), 0, (0)), 100000000, 0, -691); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -693)], (0)), 100000000, 0, -692); (Tag3 (Tag1 ((Tag2 ("Types")), "label_description"), 0, (0)), 100000000, 0, -694)]), 0, (("typing/typedtree.mli", 250, 9249, 9251), ("typing/typedtree.mli", 250, 9249, 9321), 0), 0, Tag1 ("Typedtree", 137)); (("Texp_setfield", 891), ([(Tag3 ((("expression", 1391)), 0, (0)), 100000000, 0, -695); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -697)], (0)), 100000000, 0, -696); (Tag3 (Tag1 ((Tag2 ("Types")), "label_description"), 0, (0)), 100000000, 0, -698); (Tag3 ((("expression", 1391)), 0, (0)), 100000000, 0, -699)]), 0, (("typing/typedtree.mli", 251, 9322, 9324), ("typing/typedtree.mli", 252, 9343, 9416), 0), 0, Tag1 ("Typedtree", 138)); (("Texp_array", 892), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("expression", 1391)), 0, (0)), 100000000, 0, -701)], (0)), 100000000, 0, -700)]), 0, (("typing/typedtree.mli", 253, 9417, 9419), ("typing/typedtree.mli", 253, 9417, 9450), 0), 0, Tag1 ("Typedtree", 139)); (("Texp_ifthenelse", 893), ([(Tag3 ((("expression", 1391)), 0, (0)), 100000000, 0, -702); (Tag3 ((("expression", 1391)), 0, (0)), 100000000, 0, -703); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("expression", 1391)), 0, (0)), 100000000, 0, -705)], (0)), 100000000, 0, -704)]), 0, (("typing/typedtree.mli", 254, 9451, 9453), ("typing/typedtree.mli", 254, 9451, 9517), 0), 0, Tag1 ("Typedtree", 140)); (("Texp_sequence", 894), ([(Tag3 ((("expression", 1391)), 0, (0)), 100000000, 0, -706); (Tag3 ((("expression", 1391)), 0, (0)), 100000000, 0, -707)]), 0, (("typing/typedtree.mli", 255, 9518, 9520), ("typing/typedtree.mli", 255, 9518, 9562), 0), 0, Tag1 ("Typedtree", 141)); (("Texp_while", 895), ([(Tag3 ((("expression", 1391)), 0, (0)), 100000000, 0, -708); (Tag3 ((("expression", 1391)), 0, (0)), 100000000, 0, -709)]), 0, (("typing/typedtree.mli", 256, 9563, 9565), ("typing/typedtree.mli", 256, 9563, 9604), 0), 0, Tag1 ("Typedtree", 142)); (("Texp_for", 896), ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -710); (Tag3 (Tag1 ((Tag2 ("Parsetree")), "pattern"), 0, (0)), 100000000, 0, -711); (Tag3 ((("expression", 1391)), 0, (0)), 100000000, 0, -712); (Tag3 ((("expression", 1391)), 0, (0)), 100000000, 0, -713); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "direction_flag"), 0, (0)), 100000000, 0, -714); (Tag3 ((("expression", 1391)), 0, (0)), 100000000, 0, -715)]), 0, (("typing/typedtree.mli", 257, 9605, 9607), ("typing/typedtree.mli", 259, 9700, 9718), 0), 0, Tag1 ("Typedtree", 143)); (("Texp_send", 897), ([(Tag3 ((("expression", 1391)), 0, (0)), 100000000, 0, -716); (Tag3 ((("meth", 1394)), 0, (0)), 100000000, 0, -717)]), 0, (("typing/typedtree.mli", 260, 9719, 9721), ("typing/typedtree.mli", 260, 9719, 9753), 0), 0, Tag1 ("Typedtree", 144)); (("Texp_new", 898), ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -718); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -720)], (0)), 100000000, 0, -719); (Tag3 (Tag1 ((Tag2 ("Types")), "class_declaration"), 0, (0)), 100000000, 0, -721)]), 0, (("typing/typedtree.mli", 261, 9754, 9756), ("typing/typedtree.mli", 261, 9754, 9820), 0), 0, Tag1 ("Typedtree", 145)); (("Texp_instvar", 899), ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -722); (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -723); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -725)], (0)), 100000000, 0, -724)]), 0, (("typing/typedtree.mli", 262, 9821, 9823), ("typing/typedtree.mli", 262, 9821, 9869), 0), 0, Tag1 ("Typedtree", 146)); (("Texp_setinstvar", 900), ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -726); (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -727); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -729)], (0)), 100000000, 0, -728); (Tag3 ((("expression", 1391)), 0, (0)), 100000000, 0, -730)]), 0, (("typing/typedtree.mli", 263, 9870, 9872), ("typing/typedtree.mli", 263, 9870, 9934), 0), 0, Tag1 ("Typedtree", 147)); (("Texp_override", 901), ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -731); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -734); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -736)], (0)), 100000000, 0, -735); (Tag3 ((("expression", 1391)), 0, (0)), 100000000, 0, -737)]), 100000000, 0, -733)], (0)), 100000000, 0, -732)]), 0, (("typing/typedtree.mli", 264, 9935, 9937), ("typing/typedtree.mli", 264, 9935, 10005), 0), 0, Tag1 ("Typedtree", 148)); (("Texp_letmodule", 902), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -739)], (0)), 100000000, 0, -738); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -742)], (0)), 100000000, 0, -741)], (0)), 100000000, 0, -740); (Tag3 (Tag1 ((Tag2 ("Types")), "module_presence"), 0, (0)), 100000000, 0, -743); (Tag3 ((("module_expr", 1404)), 0, (0)), 100000000, 0, -744); (Tag3 ((("expression", 1391)), 0, (0)), 100000000, 0, -745)]), 0, (("typing/typedtree.mli", 265, 10006, 10008), ("typing/typedtree.mli", 267, 10109, 10127), 0), 0, Tag1 ("Typedtree", 149)); (("Texp_letexception", 903), ([(Tag3 ((("extension_constructor", 1445)), 0, (0)), 100000000, 0, -746); (Tag3 ((("expression", 1391)), 0, (0)), 100000000, 0, -747)]), 0, (("typing/typedtree.mli", 268, 10128, 10130), ("typing/typedtree.mli", 268, 10128, 10187), 0), 0, Tag1 ("Typedtree", 150)); (("Texp_assert", 904), ([(Tag3 ((("expression", 1391)), 0, (0)), 100000000, 0, -748); (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -749)]), 0, (("typing/typedtree.mli", 269, 10188, 10190), ("typing/typedtree.mli", 269, 10188, 10230), 0), 0, Tag1 ("Typedtree", 151)); (("Texp_lazy", 905), ([(Tag3 ((("expression", 1391)), 0, (0)), 100000000, 0, -750)]), 0, (("typing/typedtree.mli", 270, 10231, 10233), ("typing/typedtree.mli", 270, 10231, 10258), 0), 0, Tag1 ("Typedtree", 152)); (("Texp_object", 906), ([(Tag3 ((("class_structure", 1400)), 0, (0)), 100000000, 0, -751); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -753)], (0)), 100000000, 0, -752)]), 0, (("typing/typedtree.mli", 271, 10259, 10261), ("typing/typedtree.mli", 271, 10259, 10307), 0), 0, Tag1 ("Typedtree", 153)); (("Texp_pack", 907), ([(Tag3 ((("module_expr", 1404)), 0, (0)), 100000000, 0, -754)]), 0, (("typing/typedtree.mli", 272, 10308, 10310), ("typing/typedtree.mli", 272, 10308, 10336), 0), 0, Tag1 ("Typedtree", 154)); (("Texp_letop", 908), Tag1 ([(("let_", 909), 0, (Tag3 ((("binding_op", 1397)), 0, (0)), 100000000, 0, -755), (("typing/typedtree.mli", 274, 10357, 10363), ("typing/typedtree.mli", 274, 10357, 10381), 0), 0, Tag1 ("Typedtree", 155)); (("ands", 910), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("binding_op", 1397)), 0, (0)), 100000000, 0, -757)], (0)), 100000000, 0, -756), (("typing/typedtree.mli", 275, 10382, 10388), ("typing/typedtree.mli", 275, 10382, 10411), 0), 0, Tag1 ("Typedtree", 156)); (("param", 911), 0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -758), (("typing/typedtree.mli", 276, 10412, 10418), ("typing/typedtree.mli", 276, 10412, 10434), 0), 0, Tag1 ("Typedtree", 157)); (("body", 912), 0, (Tag3 ((("case", 1395)), [(Tag3 ((("value", 1382)), 0, (0)), 100000000, 0, -760)], (0)), 100000000, 0, -759), (("typing/typedtree.mli", 277, 10435, 10441), ("typing/typedtree.mli", 277, 10435, 10459), 0), 0, Tag1 ("Typedtree", 158)); (("partial", 913), 0, (Tag3 ((("partial", 1379)), 0, (0)), 100000000, 0, -761), (("typing/typedtree.mli", 278, 10460, 10466), ("typing/typedtree.mli", 278, 10460, 10484), 0), 0, Tag1 ("Typedtree", 159))]), 0, (("typing/typedtree.mli", 273, 10337, 10339), ("typing/typedtree.mli", 279, 10485, 10490), 0), 0, Tag1 ("Typedtree", 160)); (("Texp_unreachable", 914), (0), 0, (("typing/typedtree.mli", 280, 10491, 10493), ("typing/typedtree.mli", 280, 10491, 10511), 0), 0, Tag1 ("Typedtree", 161)); (("Texp_extension_constructor", 915), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -763)], (0)), 100000000, 0, -762); (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -764)]), 0, (("typing/typedtree.mli", 281, 10512, 10514), ("typing/typedtree.mli", 281, 10512, 10570), 0), 0, Tag1 ("Typedtree", 162)); (("Texp_open", 916), ([(Tag3 ((("open_declaration", 1425)), 0, (0)), 100000000, 0, -765); (Tag3 ((("expression", 1391)), 0, (0)), 100000000, 0, -766)]), 0, (("typing/typedtree.mli", 282, 10571, 10573), ("typing/typedtree.mli", 282, 10571, 10617), 0), 0, Tag1 ("Typedtree", 163))], 0), 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 175, 6368, 6368), ("typing/typedtree.mli", 282, 10571, 10617), 0), 0, 0, 0, Tag1 ("Typedtree", 22)), 2, 0); Tag1 (("meth", 1394), (0, 0, Tag1 ([(("Tmeth_name", 917), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -640)]), 0, (("typing/typedtree.mli", 286, 10664, 10668), ("typing/typedtree.mli", 286, 10664, 10688), 0), 0, Tag1 ("Typedtree", 164)); (("Tmeth_val", 918), ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -641)]), 0, (("typing/typedtree.mli", 287, 10689, 10691), ("typing/typedtree.mli", 287, 10689, 10713), 0), 0, Tag1 ("Typedtree", 165)); (("Tmeth_ancestor", 919), ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -642); (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -643)]), 0, (("typing/typedtree.mli", 288, 10714, 10716), ("typing/typedtree.mli", 288, 10714, 10752), 0), 0, Tag1 ("Typedtree", 166))], 0), 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 285, 10653, 10653), ("typing/typedtree.mli", 288, 10714, 10752), 0), 0, 0, 0, Tag1 ("Typedtree", 23)), 2, 0); Tag1 (("case", 1395), ([((("k")), 100000000, 0, -636)], 1, [[(("c_lhs", 920), 0, (Tag3 ((("general_pattern", 1386)), [((("k")), 100000000, 0, -636)], (0)), 100000000, 0, -635), (("typing/typedtree.mli", 292, 10774, 10779), ("typing/typedtree.mli", 292, 10774, 10805), 0), 0, Tag1 ("Typedtree", 167)); (("c_guard", 921), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("expression", 1391)), 0, (0)), 100000000, 0, -638)], (0)), 100000000, 0, -637), (("typing/typedtree.mli", 293, 10806, 10811), ("typing/typedtree.mli", 293, 10806, 10838), 0), 0, Tag1 ("Typedtree", 168)); (("c_rhs", 922), 0, (Tag3 ((("expression", 1391)), 0, (0)), 100000000, 0, -639), (("typing/typedtree.mli", 294, 10839, 10844), ("typing/typedtree.mli", 294, 10839, 10862), 0), 0, Tag1 ("Typedtree", 169))]], 1, 0, [63], [0], 0, 0, (("typing/typedtree.mli", 290, 10754, 10754), ("typing/typedtree.mli", 295, 10863, 10868), 0), 0, 0, 0, Tag1 ("Typedtree", 24)), 2, 0); Tag1 (("record_label_definition", 1396), (0, 0, Tag1 ([(("Kept", 923), ([(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -630); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "mutable_flag"), 0, (0)), 100000000, 0, -631)]), 0, (("typing/typedtree.mli", 298, 10900, 10902), ("typing/typedtree.mli", 298, 10900, 10942), 0), 0, Tag1 ("Typedtree", 170)); (("Overridden", 924), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -633)], (0)), 100000000, 0, -632); (Tag3 ((("expression", 1391)), 0, (0)), 100000000, 0, -634)]), 0, (("typing/typedtree.mli", 299, 10943, 10945), ("typing/typedtree.mli", 299, 10943, 10989), 0), 0, Tag1 ("Typedtree", 171))], 0), 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 297, 10870, 10870), ("typing/typedtree.mli", 299, 10943, 10989), 0), 0, 0, 0, Tag1 ("Typedtree", 25)), 2, 0); Tag1 (("binding_op", 1397), (0, 0, [[(("bop_op_path", 925), 0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -623), (("typing/typedtree.mli", 303, 11012, 11016), ("typing/typedtree.mli", 303, 11012, 11037), 0), 0, Tag1 ("Typedtree", 172)); (("bop_op_name", 926), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -625)], (0)), 100000000, 0, -624), (("typing/typedtree.mli", 304, 11038, 11042), ("typing/typedtree.mli", 304, 11038, 11067), 0), 0, Tag1 ("Typedtree", 173)); (("bop_op_val", 927), 0, (Tag3 (Tag1 ((Tag2 ("Types")), "value_description"), 0, (0)), 100000000, 0, -626), (("typing/typedtree.mli", 305, 11068, 11072), ("typing/typedtree.mli", 305, 11068, 11109), 0), 0, Tag1 ("Typedtree", 174)); (("bop_op_type", 928), 0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -627), (("typing/typedtree.mli", 306, 11110, 11114), ("typing/typedtree.mli", 306, 11110, 11144), 0), 0, Tag1 ("Typedtree", 175)); (("bop_exp", 929), 0, (Tag3 ((("expression", 1391)), 0, (0)), 100000000, 0, -628), (("typing/typedtree.mli", 309, 11261, 11265), ("typing/typedtree.mli", 309, 11261, 11286), 0), 0, Tag1 ("Typedtree", 176)); (("bop_loc", 930), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -629), (("typing/typedtree.mli", 310, 11287, 11291), ("typing/typedtree.mli", 310, 11287, 11312), 0), 0, Tag1 ("Typedtree", 177))]], 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 301, 10991, 10991), ("typing/typedtree.mli", 311, 11313, 11316), 0), 0, 0, 0, Tag1 ("Typedtree", 26)), 2, 0); Tag1 (("class_expr", 1398), (0, 0, [[(("cl_desc", 931), 0, (Tag3 ((("class_expr_desc", 1399)), 0, (0)), 100000000, 0, -618), (("typing/typedtree.mli", 317, 11389, 11394), ("typing/typedtree.mli", 317, 11389, 11419), 0), 0, Tag1 ("Typedtree", 178)); (("cl_loc", 932), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -619), (("typing/typedtree.mli", 318, 11420, 11425), ("typing/typedtree.mli", 318, 11420, 11444), 0), 0, Tag1 ("Typedtree", 179)); (("cl_type", 933), 0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_type"), 0, (0)), 100000000, 0, -620), (("typing/typedtree.mli", 319, 11445, 11450), ("typing/typedtree.mli", 319, 11445, 11476), 0), 0, Tag1 ("Typedtree", 180)); (("cl_env", 934), 0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -621), (("typing/typedtree.mli", 320, 11477, 11482), ("typing/typedtree.mli", 320, 11477, 11496), 0), 0, Tag1 ("Typedtree", 181)); (("cl_attributes", 935), 0, (Tag3 ((("attributes", 1381)), 0, (0)), 100000000, 0, -622), (("typing/typedtree.mli", 321, 11497, 11502), ("typing/typedtree.mli", 321, 11497, 11528), 0), 0, Tag1 ("Typedtree", 182))]], 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 315, 11366, 11366), ("typing/typedtree.mli", 322, 11529, 11534), 0), 0, 0, 0, Tag1 ("Typedtree", 27)), 2, 0); Tag1 (("class_expr_desc", 1399), (0, 0, Tag1 ([(("Tcl_ident", 936), ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -580); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -582)], (0)), 100000000, 0, -581); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("core_type", 1430)), 0, (0)), 100000000, 0, -584)], (0)), 100000000, 0, -583)]), 0, (("typing/typedtree.mli", 325, 11558, 11562), ("typing/typedtree.mli", 325, 11558, 11616), 0), 0, Tag1 ("Typedtree", 183)); (("Tcl_structure", 937), ([(Tag3 ((("class_structure", 1400)), 0, (0)), 100000000, 0, -585)]), 0, (("typing/typedtree.mli", 326, 11617, 11619), ("typing/typedtree.mli", 326, 11617, 11653), 0), 0, Tag1 ("Typedtree", 184)); (("Tcl_fun", 938), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "arg_label"), 0, (0)), 100000000, 0, -586); (Tag3 ((("pattern", 1385)), 0, (0)), 100000000, 0, -587); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -590); (Tag3 ((("expression", 1391)), 0, (0)), 100000000, 0, -591)]), 100000000, 0, -589)], (0)), 100000000, 0, -588); (Tag3 ((("class_expr", 1398)), 0, (0)), 100000000, 0, -592); (Tag3 ((("partial", 1379)), 0, (0)), 100000000, 0, -593)]), 0, (("typing/typedtree.mli", 327, 11654, 11656), ("typing/typedtree.mli", 329, 11725, 11753), 0), 0, Tag1 ("Typedtree", 185)); (("Tcl_apply", 939), ([(Tag3 ((("class_expr", 1398)), 0, (0)), 100000000, 0, -594); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "arg_label"), 0, (0)), 100000000, 0, -597); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("expression", 1391)), 0, (0)), 100000000, 0, -599)], (0)), 100000000, 0, -598)]), 100000000, 0, -596)], (0)), 100000000, 0, -595)]), 0, (("typing/typedtree.mli", 330, 11754, 11756), ("typing/typedtree.mli", 330, 11754, 11820), 0), 0, Tag1 ("Typedtree", 186)); (("Tcl_let", 940), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "rec_flag"), 0, (0)), 100000000, 0, -600); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("value_binding", 1412)), 0, (0)), 100000000, 0, -602)], (0)), 100000000, 0, -601); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -605); (Tag3 ((("expression", 1391)), 0, (0)), 100000000, 0, -606)]), 100000000, 0, -604)], (0)), 100000000, 0, -603); (Tag3 ((("class_expr", 1398)), 0, (0)), 100000000, 0, -607)]), 0, (("typing/typedtree.mli", 331, 11821, 11823), ("typing/typedtree.mli", 332, 11868, 11926), 0), 0, Tag1 ("Typedtree", 187)); (("Tcl_constraint", 941), ([(Tag3 ((("class_expr", 1398)), 0, (0)), 100000000, 0, -608); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("class_type", 1447)), 0, (0)), 100000000, 0, -610)], (0)), 100000000, 0, -609); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -612)], (0)), 100000000, 0, -611); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -614)], (0)), 100000000, 0, -613); (Tag3 (Tag1 (Tag1 ((Tag2 ("Types")), "MethSet"), "t"), 0, (0)), 100000000, 0, -615)]), 0, (("typing/typedtree.mli", 333, 11927, 11929), ("typing/typedtree.mli", 335, 12014, 12037), 0), 0, Tag1 ("Typedtree", 188)); (("Tcl_open", 987), ([(Tag3 ((("open_description", 1424)), 0, (0)), 100000000, 0, -616); (Tag3 ((("class_expr", 1398)), 0, (0)), 100000000, 0, -617)]), 0, (("typing/typedtree.mli", 337, 12103, 12105), ("typing/typedtree.mli", 337, 12103, 12148), 0), 0, Tag1 ("Typedtree", 189))], 0), 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 324, 11536, 11536), ("typing/typedtree.mli", 337, 12103, 12148), 0), 0, 0, 0, Tag1 ("Typedtree", 28)), 2, 0); Tag1 (("class_structure", 1400), (0, 0, [[(("cstr_self", 988), 0, (Tag3 ((("pattern", 1385)), 0, (0)), 100000000, 0, -574), (("typing/typedtree.mli", 341, 12176, 12179), ("typing/typedtree.mli", 341, 12176, 12198), 0), 0, Tag1 ("Typedtree", 190)); (("cstr_fields", 989), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("class_field", 1401)), 0, (0)), 100000000, 0, -576)], (0)), 100000000, 0, -575), (("typing/typedtree.mli", 342, 12199, 12202), ("typing/typedtree.mli", 342, 12199, 12232), 0), 0, Tag1 ("Typedtree", 191)); (("cstr_type", 990), 0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_signature"), 0, (0)), 100000000, 0, -577), (("typing/typedtree.mli", 343, 12233, 12236), ("typing/typedtree.mli", 343, 12233, 12269), 0), 0, Tag1 ("Typedtree", 192)); (("cstr_meths", 1036), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Types")), "Meths"), "t"), [(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -579)], (0)), 100000000, 0, -578), (("typing/typedtree.mli", 344, 12270, 12273), ("typing/typedtree.mli", 344, 12270, 12307), 0), 0, Tag1 ("Typedtree", 193))]], 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 339, 12150, 12150), ("typing/typedtree.mli", 345, 12308, 12311), 0), 0, 0, 0, Tag1 ("Typedtree", 29)), 2, 0); Tag1 (("class_field", 1401), (0, 0, [[(("cf_desc", 1037), 0, (Tag3 ((("class_field_desc", 1403)), 0, (0)), 100000000, 0, -571), (("typing/typedtree.mli", 349, 12336, 12340), ("typing/typedtree.mli", 349, 12336, 12366), 0), 0, Tag1 ("Typedtree", 194)); (("cf_loc", 1038), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -572), (("typing/typedtree.mli", 350, 12367, 12371), ("typing/typedtree.mli", 350, 12367, 12390), 0), 0, Tag1 ("Typedtree", 195)); (("cf_attributes", 1039), 0, (Tag3 ((("attributes", 1381)), 0, (0)), 100000000, 0, -573), (("typing/typedtree.mli", 351, 12391, 12395), ("typing/typedtree.mli", 351, 12391, 12421), 0), 0, Tag1 ("Typedtree", 196))]], 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 347, 12313, 12313), ("typing/typedtree.mli", 352, 12422, 12425), 0), 0, 0, 0, Tag1 ("Typedtree", 30)), 2, 0); Tag1 (("class_field_kind", 1402), (0, 0, Tag1 ([(("Tcfk_virtual", 1040), ([(Tag3 ((("core_type", 1430)), 0, (0)), 100000000, 0, -568)]), 0, (("typing/typedtree.mli", 355, 12450, 12452), ("typing/typedtree.mli", 355, 12450, 12479), 0), 0, Tag1 ("Typedtree", 197)); (("Tcfk_concrete", 1041), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "override_flag"), 0, (0)), 100000000, 0, -569); (Tag3 ((("expression", 1391)), 0, (0)), 100000000, 0, -570)]), 0, (("typing/typedtree.mli", 356, 12480, 12482), ("typing/typedtree.mli", 356, 12480, 12527), 0), 0, Tag1 ("Typedtree", 198))], 0), 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 354, 12427, 12427), ("typing/typedtree.mli", 356, 12480, 12527), 0), 0, 0, 0, Tag1 ("Typedtree", 31)), 2, 0); Tag1 (("class_field_desc", 1403), (0, 0, Tag1 ([(("Tcf_inherit", 1042), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "override_flag"), 0, (0)), 100000000, 0, -542); (Tag3 ((("class_expr", 1398)), 0, (0)), 100000000, 0, -543); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -545)], (0)), 100000000, 0, -544); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -548); (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -549)]), 100000000, 0, -547)], (0)), 100000000, 0, -546); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -552); (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -553)]), 100000000, 0, -551)], (0)), 100000000, 0, -550)]), 0, (("typing/typedtree.mli", 359, 12552, 12556), ("typing/typedtree.mli", 361, 12648, 12679), 0), 0, Tag1 ("Typedtree", 199)); (("Tcf_val", 1043), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -555)], (0)), 100000000, 0, -554); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "mutable_flag"), 0, (0)), 100000000, 0, -556); (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -557); (Tag3 ((("class_field_kind", 1402)), 0, (0)), 100000000, 0, -558); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -559)]), 0, (("typing/typedtree.mli", 363, 12740, 12742), ("typing/typedtree.mli", 363, 12740, 12816), 0), 0, Tag1 ("Typedtree", 200)); (("Tcf_method", 1044), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -561)], (0)), 100000000, 0, -560); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "private_flag"), 0, (0)), 100000000, 0, -562); (Tag3 ((("class_field_kind", 1402)), 0, (0)), 100000000, 0, -563)]), 0, (("typing/typedtree.mli", 364, 12817, 12819), ("typing/typedtree.mli", 364, 12817, 12879), 0), 0, Tag1 ("Typedtree", 201)); (("Tcf_constraint", 1045), ([(Tag3 ((("core_type", 1430)), 0, (0)), 100000000, 0, -564); (Tag3 ((("core_type", 1430)), 0, (0)), 100000000, 0, -565)]), 0, (("typing/typedtree.mli", 365, 12880, 12882), ("typing/typedtree.mli", 365, 12880, 12923), 0), 0, Tag1 ("Typedtree", 202)); (("Tcf_initializer", 1046), ([(Tag3 ((("expression", 1391)), 0, (0)), 100000000, 0, -566)]), 0, (("typing/typedtree.mli", 366, 12924, 12926), ("typing/typedtree.mli", 366, 12924, 12957), 0), 0, Tag1 ("Typedtree", 203)); (("Tcf_attribute", 1047), ([(Tag3 ((("attribute", 1380)), 0, (0)), 100000000, 0, -567)]), 0, (("typing/typedtree.mli", 367, 12958, 12960), ("typing/typedtree.mli", 367, 12958, 12988), 0), 0, Tag1 ("Typedtree", 204))], 0), 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 358, 12529, 12529), ("typing/typedtree.mli", 367, 12958, 12988), 0), 0, 0, 0, Tag1 ("Typedtree", 32)), 2, 0); Tag1 (("module_expr", 1404), (0, 0, [[(("mod_desc", 1048), 0, (Tag3 ((("module_expr_desc", 1407)), 0, (0)), 100000000, 0, -537), (("typing/typedtree.mli", 372, 13057, 13061), ("typing/typedtree.mli", 372, 13057, 13088), 0), 0, Tag1 ("Typedtree", 205)); (("mod_loc", 1049), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -538), (("typing/typedtree.mli", 373, 13089, 13093), ("typing/typedtree.mli", 373, 13089, 13113), 0), 0, Tag1 ("Typedtree", 206)); (("mod_type", 1050), 0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -539), (("typing/typedtree.mli", 374, 13114, 13118), ("typing/typedtree.mli", 374, 13114, 13146), 0), 0, Tag1 ("Typedtree", 207)); (("mod_env", 1051), 0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -540), (("typing/typedtree.mli", 375, 13147, 13151), ("typing/typedtree.mli", 375, 13147, 13166), 0), 0, Tag1 ("Typedtree", 208)); (("mod_attributes", 1052), 0, (Tag3 ((("attributes", 1381)), 0, (0)), 100000000, 0, -541), (("typing/typedtree.mli", 376, 13167, 13171), ("typing/typedtree.mli", 376, 13167, 13198), 0), 0, Tag1 ("Typedtree", 209))]], 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 371, 13039, 13039), ("typing/typedtree.mli", 377, 13199, 13203), 0), 0, 0, 0, Tag1 ("Typedtree", 33)), 2, 0); Tag1 (("module_type_constraint", 1405), (0, 0, Tag1 ([(("Tmodtype_implicit", 1053), (0), 0, (("typing/typedtree.mli", 381, 13276, 13278), ("typing/typedtree.mli", 381, 13276, 13297), 0), 0, Tag1 ("Typedtree", 210)); (("Tmodtype_explicit", 1054), ([(Tag3 ((("module_type", 1414)), 0, (0)), 100000000, 0, -536)]), 0, (("typing/typedtree.mli", 383, 13376, 13378), ("typing/typedtree.mli", 383, 13376, 13412), 0), 0, Tag1 ("Typedtree", 211))], 0), 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 380, 13247, 13247), ("typing/typedtree.mli", 383, 13376, 13412), 0), 0, 0, 0, Tag1 ("Typedtree", 34)), 2, 0); Tag1 (("functor_parameter", 1406), (0, 0, Tag1 ([(("Unit", 1055), (0), 0, (("typing/typedtree.mli", 387, 13487, 13489), ("typing/typedtree.mli", 387, 13487, 13495), 0), 0, Tag1 ("Typedtree", 212)); (("Named", 1056), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -531)], (0)), 100000000, 0, -530); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -534)], (0)), 100000000, 0, -533)], (0)), 100000000, 0, -532); (Tag3 ((("module_type", 1414)), 0, (0)), 100000000, 0, -535)]), 0, (("typing/typedtree.mli", 388, 13496, 13498), ("typing/typedtree.mli", 388, 13496, 13557), 0), 0, Tag1 ("Typedtree", 213))], 0), 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 386, 13463, 13463), ("typing/typedtree.mli", 388, 13496, 13557), 0), 0, 0, 0, Tag1 ("Typedtree", 35)), 2, 0); Tag1 (("module_expr_desc", 1407), (0, 0, Tag1 ([(("Tmod_ident", 1057), ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -514); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -516)], (0)), 100000000, 0, -515)]), 0, (("typing/typedtree.mli", 391, 13582, 13586), ("typing/typedtree.mli", 391, 13582, 13624), 0), 0, Tag1 ("Typedtree", 214)); (("Tmod_structure", 1058), ([(Tag3 ((("structure", 1408)), 0, (0)), 100000000, 0, -517)]), 0, (("typing/typedtree.mli", 392, 13625, 13627), ("typing/typedtree.mli", 392, 13625, 13656), 0), 0, Tag1 ("Typedtree", 215)); (("Tmod_functor", 1059), ([(Tag3 ((("functor_parameter", 1406)), 0, (0)), 100000000, 0, -518); (Tag3 ((("module_expr", 1404)), 0, (0)), 100000000, 0, -519)]), 0, (("typing/typedtree.mli", 393, 13657, 13659), ("typing/typedtree.mli", 393, 13657, 13708), 0), 0, Tag1 ("Typedtree", 216)); (("Tmod_apply", 1060), ([(Tag3 ((("module_expr", 1404)), 0, (0)), 100000000, 0, -520); (Tag3 ((("module_expr", 1404)), 0, (0)), 100000000, 0, -521); (Tag3 ((("module_coercion", 1413)), 0, (0)), 100000000, 0, -522)]), 0, (("typing/typedtree.mli", 394, 13709, 13711), ("typing/typedtree.mli", 394, 13709, 13770), 0), 0, Tag1 ("Typedtree", 217)); (("Tmod_apply_unit", 1061), ([(Tag3 ((("module_expr", 1404)), 0, (0)), 100000000, 0, -523)]), 0, (("typing/typedtree.mli", 395, 13771, 13773), ("typing/typedtree.mli", 395, 13771, 13805), 0), 0, Tag1 ("Typedtree", 218)); (("Tmod_constraint", 1062), ([(Tag3 ((("module_expr", 1404)), 0, (0)), 100000000, 0, -524); (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -525); (Tag3 ((("module_type_constraint", 1405)), 0, (0)), 100000000, 0, -526); (Tag3 ((("module_coercion", 1413)), 0, (0)), 100000000, 0, -527)]), 0, (("typing/typedtree.mli", 396, 13806, 13808), ("typing/typedtree.mli", 397, 13829, 13909), 0), 0, Tag1 ("Typedtree", 219)); (("Tmod_unpack", 1063), ([(Tag3 ((("expression", 1391)), 0, (0)), 100000000, 0, -528); (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -529)]), 0, (("typing/typedtree.mli", 401, 14027, 14029), ("typing/typedtree.mli", 401, 14027, 14076), 0), 0, Tag1 ("Typedtree", 220))], 0), 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 390, 13559, 13559), ("typing/typedtree.mli", 401, 14027, 14076), 0), 0, 0, 0, Tag1 ("Typedtree", 36)), 2, 0); Tag1 (("structure", 1408), (0, 0, [[(("str_items", 1064), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("structure_item", 1409)), 0, (0)), 100000000, 0, -511)], (0)), 100000000, 0, -510), (("typing/typedtree.mli", 404, 14096, 14098), ("typing/typedtree.mli", 404, 14096, 14130), 0), 0, Tag1 ("Typedtree", 221)); (("str_type", 1065), 0, (Tag3 (Tag1 ((Tag2 ("Types")), "signature"), 0, (0)), 100000000, 0, -512), (("typing/typedtree.mli", 405, 14131, 14133), ("typing/typedtree.mli", 405, 14131, 14160), 0), 0, Tag1 ("Typedtree", 222)); (("str_final_env", 1066), 0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -513), (("typing/typedtree.mli", 406, 14161, 14163), ("typing/typedtree.mli", 406, 14161, 14185), 0), 0, Tag1 ("Typedtree", 223))]], 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 403, 14078, 14078), ("typing/typedtree.mli", 407, 14186, 14187), 0), 0, 0, 0, Tag1 ("Typedtree", 37)), 2, 0); Tag1 (("structure_item", 1409), (0, 0, [[(("str_desc", 1067), 0, (Tag3 ((("structure_item_desc", 1410)), 0, (0)), 100000000, 0, -507), (("typing/typedtree.mli", 410, 14210, 14214), ("typing/typedtree.mli", 410, 14210, 14245), 0), 0, Tag1 ("Typedtree", 224)); (("str_loc", 1068), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -508), (("typing/typedtree.mli", 411, 14246, 14250), ("typing/typedtree.mli", 411, 14246, 14271), 0), 0, Tag1 ("Typedtree", 225)); (("str_env", 1069), 0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -509), (("typing/typedtree.mli", 412, 14272, 14276), ("typing/typedtree.mli", 412, 14272, 14291), 0), 0, Tag1 ("Typedtree", 226))]], 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 409, 14189, 14189), ("typing/typedtree.mli", 413, 14292, 14295), 0), 0, 0, 0, Tag1 ("Typedtree", 38)), 2, 0); Tag1 (("structure_item_desc", 1410), (0, 0, Tag1 ([(("Tstr_eval", 1070), ([(Tag3 ((("expression", 1391)), 0, (0)), 100000000, 0, -478); (Tag3 ((("attributes", 1381)), 0, (0)), 100000000, 0, -479)]), 0, (("typing/typedtree.mli", 416, 14323, 14327), ("typing/typedtree.mli", 416, 14323, 14363), 0), 0, Tag1 ("Typedtree", 227)); (("Tstr_value", 1071), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "rec_flag"), 0, (0)), 100000000, 0, -480); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("value_binding", 1412)), 0, (0)), 100000000, 0, -482)], (0)), 100000000, 0, -481)]), 0, (("typing/typedtree.mli", 417, 14364, 14366), ("typing/typedtree.mli", 417, 14364, 14411), 0), 0, Tag1 ("Typedtree", 228)); (("Tstr_primitive", 1072), ([(Tag3 ((("value_description", 1437)), 0, (0)), 100000000, 0, -483)]), 0, (("typing/typedtree.mli", 418, 14412, 14414), ("typing/typedtree.mli", 418, 14412, 14451), 0), 0, Tag1 ("Typedtree", 229)); (("Tstr_type", 1073), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "rec_flag"), 0, (0)), 100000000, 0, -484); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("type_declaration", 1438)), 0, (0)), 100000000, 0, -486)], (0)), 100000000, 0, -485)]), 0, (("typing/typedtree.mli", 419, 14452, 14454), ("typing/typedtree.mli", 419, 14452, 14501), 0), 0, Tag1 ("Typedtree", 230)); (("Tstr_typext", 1074), ([(Tag3 ((("type_extension", 1443)), 0, (0)), 100000000, 0, -487)]), 0, (("typing/typedtree.mli", 420, 14502, 14504), ("typing/typedtree.mli", 420, 14502, 14535), 0), 0, Tag1 ("Typedtree", 231)); (("Tstr_exception", 1075), ([(Tag3 ((("type_exception", 1444)), 0, (0)), 100000000, 0, -488)]), 0, (("typing/typedtree.mli", 421, 14536, 14538), ("typing/typedtree.mli", 421, 14536, 14572), 0), 0, Tag1 ("Typedtree", 232)); (("Tstr_module", 1076), ([(Tag3 ((("module_binding", 1411)), 0, (0)), 100000000, 0, -489)]), 0, (("typing/typedtree.mli", 422, 14573, 14575), ("typing/typedtree.mli", 422, 14573, 14606), 0), 0, Tag1 ("Typedtree", 233)); (("Tstr_recmodule", 1077), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("module_binding", 1411)), 0, (0)), 100000000, 0, -491)], (0)), 100000000, 0, -490)]), 0, (("typing/typedtree.mli", 423, 14607, 14609), ("typing/typedtree.mli", 423, 14607, 14648), 0), 0, Tag1 ("Typedtree", 234)); (("Tstr_modtype", 1078), ([(Tag3 ((("module_type_declaration", 1422)), 0, (0)), 100000000, 0, -492)]), 0, (("typing/typedtree.mli", 424, 14649, 14651), ("typing/typedtree.mli", 424, 14649, 14692), 0), 0, Tag1 ("Typedtree", 235)); (("Tstr_open", 1079), ([(Tag3 ((("open_declaration", 1425)), 0, (0)), 100000000, 0, -493)]), 0, (("typing/typedtree.mli", 425, 14693, 14695), ("typing/typedtree.mli", 425, 14693, 14726), 0), 0, Tag1 ("Typedtree", 236)); (("Tstr_class", 1080), ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("class_declaration", 1452)), 0, (0)), 100000000, 0, -496); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -498)], (0)), 100000000, 0, -497)]), 100000000, 0, -495)], (0)), 100000000, 0, -494)]), 0, (("typing/typedtree.mli", 426, 14727, 14729), ("typing/typedtree.mli", 426, 14727, 14783), 0), 0, Tag1 ("Typedtree", 237)); (("Tstr_class_type", 1081), ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -501); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -503)], (0)), 100000000, 0, -502); (Tag3 ((("class_type_declaration", 1454)), 0, (0)), 100000000, 0, -504)]), 100000000, 0, -500)], (0)), 100000000, 0, -499)]), 0, (("typing/typedtree.mli", 427, 14784, 14786), ("typing/typedtree.mli", 427, 14784, 14859), 0), 0, Tag1 ("Typedtree", 238)); (("Tstr_include", 1082), ([(Tag3 ((("include_declaration", 1428)), 0, (0)), 100000000, 0, -505)]), 0, (("typing/typedtree.mli", 428, 14860, 14862), ("typing/typedtree.mli", 428, 14860, 14899), 0), 0, Tag1 ("Typedtree", 239)); (("Tstr_attribute", 1083), ([(Tag3 ((("attribute", 1380)), 0, (0)), 100000000, 0, -506)]), 0, (("typing/typedtree.mli", 429, 14900, 14902), ("typing/typedtree.mli", 429, 14900, 14931), 0), 0, Tag1 ("Typedtree", 240))], 0), 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 415, 14297, 14297), ("typing/typedtree.mli", 429, 14900, 14931), 0), 0, 0, 0, Tag1 ("Typedtree", 39)), 2, 0); Tag1 (("module_binding", 1411), (0, 0, [[(("mb_id", 1084), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -470)], (0)), 100000000, 0, -469), (("typing/typedtree.mli", 433, 14960, 14965), ("typing/typedtree.mli", 433, 14960, 14987), 0), 0, Tag1 ("Typedtree", 241)); (("mb_name", 1085), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -473)], (0)), 100000000, 0, -472)], (0)), 100000000, 0, -471), (("typing/typedtree.mli", 434, 14988, 14993), ("typing/typedtree.mli", 434, 14988, 15020), 0), 0, Tag1 ("Typedtree", 242)); (("mb_presence", 1086), 0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_presence"), 0, (0)), 100000000, 0, -474), (("typing/typedtree.mli", 435, 15021, 15026), ("typing/typedtree.mli", 435, 15021, 15061), 0), 0, Tag1 ("Typedtree", 243)); (("mb_expr", 1087), 0, (Tag3 ((("module_expr", 1404)), 0, (0)), 100000000, 0, -475), (("typing/typedtree.mli", 436, 15062, 15067), ("typing/typedtree.mli", 436, 15062, 15088), 0), 0, Tag1 ("Typedtree", 244)); (("mb_attributes", 1088), 0, (Tag3 ((("attributes", 1381)), 0, (0)), 100000000, 0, -476), (("typing/typedtree.mli", 437, 15089, 15094), ("typing/typedtree.mli", 437, 15089, 15120), 0), 0, Tag1 ("Typedtree", 245)); (("mb_loc", 1089), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -477), (("typing/typedtree.mli", 438, 15121, 15126), ("typing/typedtree.mli", 438, 15121, 15145), 0), 0, Tag1 ("Typedtree", 246))]], 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 431, 14933, 14933), ("typing/typedtree.mli", 439, 15146, 15151), 0), 0, 0, 0, Tag1 ("Typedtree", 40)), 2, 0); Tag1 (("value_binding", 1412), (0, 0, [[(("vb_pat", 1090), 0, (Tag3 ((("pattern", 1385)), 0, (0)), 100000000, 0, -465), (("typing/typedtree.mli", 443, 15177, 15181), ("typing/typedtree.mli", 443, 15177, 15197), 0), 0, Tag1 ("Typedtree", 247)); (("vb_expr", 1091), 0, (Tag3 ((("expression", 1391)), 0, (0)), 100000000, 0, -466), (("typing/typedtree.mli", 444, 15198, 15202), ("typing/typedtree.mli", 444, 15198, 15222), 0), 0, Tag1 ("Typedtree", 248)); (("vb_attributes", 1092), 0, (Tag3 ((("attributes", 1381)), 0, (0)), 100000000, 0, -467), (("typing/typedtree.mli", 445, 15223, 15227), ("typing/typedtree.mli", 445, 15223, 15253), 0), 0, Tag1 ("Typedtree", 249)); (("vb_loc", 1093), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -468), (("typing/typedtree.mli", 446, 15254, 15258), ("typing/typedtree.mli", 446, 15254, 15277), 0), 0, Tag1 ("Typedtree", 250))]], 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 441, 15153, 15153), ("typing/typedtree.mli", 447, 15278, 15281), 0), 0, 0, 0, Tag1 ("Typedtree", 41)), 2, 0); Tag1 (("module_coercion", 1413), (0, 0, Tag1 ([(("Tcoerce_none", 1094), (0), 0, (("typing/typedtree.mli", 450, 15305, 15309), ("typing/typedtree.mli", 450, 15305, 15321), 0), 0, Tag1 ("Typedtree", 251)); (("Tcoerce_structure", 1095), ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -452); (Tag3 ((("module_coercion", 1413)), 0, (0)), 100000000, 0, -453)]), 100000000, 0, -451)], (0)), 100000000, 0, -450); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -456); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -457); (Tag3 ((("module_coercion", 1413)), 0, (0)), 100000000, 0, -458)]), 100000000, 0, -455)], (0)), 100000000, 0, -454)]), 0, (("typing/typedtree.mli", 451, 15322, 15324), ("typing/typedtree.mli", 452, 15378, 15441), 0), 0, Tag1 ("Typedtree", 252)); (("Tcoerce_functor", 1096), ([(Tag3 ((("module_coercion", 1413)), 0, (0)), 100000000, 0, -459); (Tag3 ((("module_coercion", 1413)), 0, (0)), 100000000, 0, -460)]), 0, (("typing/typedtree.mli", 453, 15442, 15444), ("typing/typedtree.mli", 453, 15442, 15498), 0), 0, Tag1 ("Typedtree", 253)); (("Tcoerce_primitive", 1097), ([(Tag3 ((("primitive_coercion", 1416)), 0, (0)), 100000000, 0, -461)]), 0, (("typing/typedtree.mli", 454, 15499, 15501), ("typing/typedtree.mli", 454, 15499, 15542), 0), 0, Tag1 ("Typedtree", 254)); (("Tcoerce_alias", 1098), ([(Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -462); (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -463); (Tag3 ((("module_coercion", 1413)), 0, (0)), 100000000, 0, -464)]), 0, (("typing/typedtree.mli", 455, 15543, 15545), ("typing/typedtree.mli", 455, 15543, 15596), 0), 0, Tag1 ("Typedtree", 255))], 0), 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 449, 15283, 15283), ("typing/typedtree.mli", 455, 15543, 15596), 0), 0, 0, 0, Tag1 ("Typedtree", 42)), 2, 0); Tag1 (("module_type", 1414), (0, 0, [[(("mty_desc", 1099), 0, (Tag3 ((("module_type_desc", 1415)), 0, (0)), 100000000, 0, -445), (("typing/typedtree.mli", 458, 15616, 15620), ("typing/typedtree.mli", 458, 15616, 15647), 0), 0, Tag1 ("Typedtree", 256)); (("mty_type", 1100), 0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -446), (("typing/typedtree.mli", 459, 15648, 15652), ("typing/typedtree.mli", 459, 15648, 15681), 0), 0, Tag1 ("Typedtree", 257)); (("mty_env", 1101), 0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -447), (("typing/typedtree.mli", 460, 15682, 15686), ("typing/typedtree.mli", 460, 15682, 15702), 0), 0, Tag1 ("Typedtree", 258)); (("mty_loc", 1102), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -448), (("typing/typedtree.mli", 461, 15703, 15707), ("typing/typedtree.mli", 461, 15703, 15727), 0), 0, Tag1 ("Typedtree", 259)); (("mty_attributes", 1103), 0, (Tag3 ((("attributes", 1381)), 0, (0)), 100000000, 0, -449), (("typing/typedtree.mli", 462, 15728, 15732), ("typing/typedtree.mli", 462, 15728, 15759), 0), 0, Tag1 ("Typedtree", 260))]], 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 457, 15598, 15598), ("typing/typedtree.mli", 463, 15760, 15764), 0), 0, 0, 0, Tag1 ("Typedtree", 43)), 2, 0); Tag1 (("module_type_desc", 1415), (0, 0, Tag1 ([(("Tmty_ident", 1104), ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -428); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -430)], (0)), 100000000, 0, -429)]), 0, (("typing/typedtree.mli", 466, 15789, 15793), ("typing/typedtree.mli", 466, 15789, 15831), 0), 0, Tag1 ("Typedtree", 261)); (("Tmty_signature", 1105), ([(Tag3 ((("signature", 1417)), 0, (0)), 100000000, 0, -431)]), 0, (("typing/typedtree.mli", 467, 15832, 15834), ("typing/typedtree.mli", 467, 15832, 15863), 0), 0, Tag1 ("Typedtree", 262)); (("Tmty_functor", 1106), ([(Tag3 ((("functor_parameter", 1406)), 0, (0)), 100000000, 0, -432); (Tag3 ((("module_type", 1414)), 0, (0)), 100000000, 0, -433)]), 0, (("typing/typedtree.mli", 468, 15864, 15866), ("typing/typedtree.mli", 468, 15864, 15915), 0), 0, Tag1 ("Typedtree", 263)); (("Tmty_with", 1107), ([(Tag3 ((("module_type", 1414)), 0, (0)), 100000000, 0, -434); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -437); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -439)], (0)), 100000000, 0, -438); (Tag3 ((("with_constraint", 1429)), 0, (0)), 100000000, 0, -440)]), 100000000, 0, -436)], (0)), 100000000, 0, -435)]), 0, (("typing/typedtree.mli", 469, 15916, 15918), ("typing/typedtree.mli", 469, 15916, 15996), 0), 0, Tag1 ("Typedtree", 264)); (("Tmty_typeof", 1108), ([(Tag3 ((("module_expr", 1404)), 0, (0)), 100000000, 0, -441)]), 0, (("typing/typedtree.mli", 470, 15997, 15999), ("typing/typedtree.mli", 470, 15997, 16027), 0), 0, Tag1 ("Typedtree", 265)); (("Tmty_alias", 1109), ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -442); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -444)], (0)), 100000000, 0, -443)]), 0, (("typing/typedtree.mli", 471, 16028, 16030), ("typing/typedtree.mli", 471, 16028, 16070), 0), 0, Tag1 ("Typedtree", 266))], 0), 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 465, 15766, 15766), ("typing/typedtree.mli", 471, 16028, 16070), 0), 0, 0, 0, Tag1 ("Typedtree", 44)), 2, 0); Tag1 (("primitive_coercion", 1416), (0, 0, [[(("pc_desc", 1124), 0, (Tag3 (Tag1 ((Tag2 ("Primitive")), "description"), 0, (0)), 100000000, 0, -424), (("typing/typedtree.mli", 475, 16101, 16105), ("typing/typedtree.mli", 475, 16101, 16136), 0), 0, Tag1 ("Typedtree", 267)); (("pc_type", 1125), 0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -425), (("typing/typedtree.mli", 476, 16137, 16141), ("typing/typedtree.mli", 476, 16137, 16166), 0), 0, Tag1 ("Typedtree", 268)); (("pc_env", 1126), 0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -426), (("typing/typedtree.mli", 477, 16167, 16171), ("typing/typedtree.mli", 477, 16167, 16185), 0), 0, Tag1 ("Typedtree", 269)); (("pc_loc", 1127), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -427), (("typing/typedtree.mli", 478, 16186, 16190), ("typing/typedtree.mli", 478, 16186, 16210), 0), 0, Tag1 ("Typedtree", 270))]], 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 473, 16072, 16072), ("typing/typedtree.mli", 479, 16211, 16214), 0), 0, 0, 0, Tag1 ("Typedtree", 45)), 2, 0); Tag1 (("signature", 1417), (0, 0, [[(("sig_items", 1128), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("signature_item", 1418)), 0, (0)), 100000000, 0, -421)], (0)), 100000000, 0, -420), (("typing/typedtree.mli", 482, 16234, 16236), ("typing/typedtree.mli", 482, 16234, 16268), 0), 0, Tag1 ("Typedtree", 271)); (("sig_type", 1129), 0, (Tag3 (Tag1 ((Tag2 ("Types")), "signature"), 0, (0)), 100000000, 0, -422), (("typing/typedtree.mli", 483, 16269, 16271), ("typing/typedtree.mli", 483, 16269, 16298), 0), 0, Tag1 ("Typedtree", 272)); (("sig_final_env", 1130), 0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -423), (("typing/typedtree.mli", 484, 16299, 16301), ("typing/typedtree.mli", 484, 16299, 16323), 0), 0, Tag1 ("Typedtree", 273))]], 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 481, 16216, 16216), ("typing/typedtree.mli", 485, 16324, 16325), 0), 0, 0, 0, Tag1 ("Typedtree", 46)), 2, 0); Tag1 (("signature_item", 1418), (0, 0, [[(("sig_desc", 1131), 0, (Tag3 ((("signature_item_desc", 1419)), 0, (0)), 100000000, 0, -417), (("typing/typedtree.mli", 488, 16348, 16352), ("typing/typedtree.mli", 488, 16348, 16382), 0), 0, Tag1 ("Typedtree", 274)); (("sig_env", 1132), 0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -418), (("typing/typedtree.mli", 489, 16383, 16387), ("typing/typedtree.mli", 489, 16383, 16403), 0), 0, Tag1 ("Typedtree", 275)); (("sig_loc", 1133), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -419), (("typing/typedtree.mli", 490, 16425, 16429), ("typing/typedtree.mli", 490, 16425, 16448), 0), 0, Tag1 ("Typedtree", 276))]], 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 487, 16327, 16327), ("typing/typedtree.mli", 490, 16425, 16450), 0), 0, 0, 0, Tag1 ("Typedtree", 47)), 2, 0); Tag1 (("signature_item_desc", 1419), (0, 0, Tag1 ([(("Tsig_value", 1134), ([(Tag3 ((("value_description", 1437)), 0, (0)), 100000000, 0, -396)]), 0, (("typing/typedtree.mli", 493, 16478, 16482), ("typing/typedtree.mli", 493, 16478, 16513), 0), 0, Tag1 ("Typedtree", 277)); (("Tsig_type", 1135), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "rec_flag"), 0, (0)), 100000000, 0, -397); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("type_declaration", 1438)), 0, (0)), 100000000, 0, -399)], (0)), 100000000, 0, -398)]), 0, (("typing/typedtree.mli", 494, 16514, 16516), ("typing/typedtree.mli", 494, 16514, 16563), 0), 0, Tag1 ("Typedtree", 278)); (("Tsig_typesubst", 1136), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("type_declaration", 1438)), 0, (0)), 100000000, 0, -401)], (0)), 100000000, 0, -400)]), 0, (("typing/typedtree.mli", 495, 16564, 16566), ("typing/typedtree.mli", 495, 16564, 16607), 0), 0, Tag1 ("Typedtree", 279)); (("Tsig_typext", 1137), ([(Tag3 ((("type_extension", 1443)), 0, (0)), 100000000, 0, -402)]), 0, (("typing/typedtree.mli", 496, 16608, 16610), ("typing/typedtree.mli", 496, 16608, 16641), 0), 0, Tag1 ("Typedtree", 280)); (("Tsig_exception", 1138), ([(Tag3 ((("type_exception", 1444)), 0, (0)), 100000000, 0, -403)]), 0, (("typing/typedtree.mli", 497, 16642, 16644), ("typing/typedtree.mli", 497, 16642, 16678), 0), 0, Tag1 ("Typedtree", 281)); (("Tsig_module", 1139), ([(Tag3 ((("module_declaration", 1420)), 0, (0)), 100000000, 0, -404)]), 0, (("typing/typedtree.mli", 498, 16679, 16681), ("typing/typedtree.mli", 498, 16679, 16716), 0), 0, Tag1 ("Typedtree", 282)); (("Tsig_modsubst", 1140), ([(Tag3 ((("module_substitution", 1421)), 0, (0)), 100000000, 0, -405)]), 0, (("typing/typedtree.mli", 499, 16717, 16719), ("typing/typedtree.mli", 499, 16717, 16757), 0), 0, Tag1 ("Typedtree", 283)); (("Tsig_recmodule", 1141), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("module_declaration", 1420)), 0, (0)), 100000000, 0, -407)], (0)), 100000000, 0, -406)]), 0, (("typing/typedtree.mli", 500, 16758, 16760), ("typing/typedtree.mli", 500, 16758, 16803), 0), 0, Tag1 ("Typedtree", 284)); (("Tsig_modtype", 1142), ([(Tag3 ((("module_type_declaration", 1422)), 0, (0)), 100000000, 0, -408)]), 0, (("typing/typedtree.mli", 501, 16804, 16806), ("typing/typedtree.mli", 501, 16804, 16847), 0), 0, Tag1 ("Typedtree", 285)); (("Tsig_modtypesubst", 1143), ([(Tag3 ((("module_type_declaration", 1422)), 0, (0)), 100000000, 0, -409)]), 0, (("typing/typedtree.mli", 502, 16848, 16850), ("typing/typedtree.mli", 502, 16848, 16896), 0), 0, Tag1 ("Typedtree", 286)); (("Tsig_open", 1144), ([(Tag3 ((("open_description", 1424)), 0, (0)), 100000000, 0, -410)]), 0, (("typing/typedtree.mli", 503, 16897, 16899), ("typing/typedtree.mli", 503, 16897, 16930), 0), 0, Tag1 ("Typedtree", 287)); (("Tsig_include", 1145), ([(Tag3 ((("include_description", 1427)), 0, (0)), 100000000, 0, -411)]), 0, (("typing/typedtree.mli", 504, 16931, 16933), ("typing/typedtree.mli", 504, 16931, 16970), 0), 0, Tag1 ("Typedtree", 288)); (("Tsig_class", 1146), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("class_description", 1453)), 0, (0)), 100000000, 0, -413)], (0)), 100000000, 0, -412)]), 0, (("typing/typedtree.mli", 505, 16971, 16973), ("typing/typedtree.mli", 505, 16971, 17011), 0), 0, Tag1 ("Typedtree", 289)); (("Tsig_class_type", 1147), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("class_type_declaration", 1454)), 0, (0)), 100000000, 0, -415)], (0)), 100000000, 0, -414)]), 0, (("typing/typedtree.mli", 506, 17012, 17014), ("typing/typedtree.mli", 506, 17012, 17062), 0), 0, Tag1 ("Typedtree", 290)); (("Tsig_attribute", 1148), ([(Tag3 ((("attribute", 1380)), 0, (0)), 100000000, 0, -416)]), 0, (("typing/typedtree.mli", 507, 17063, 17065), ("typing/typedtree.mli", 507, 17063, 17094), 0), 0, Tag1 ("Typedtree", 291))], 0), 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 492, 16452, 16452), ("typing/typedtree.mli", 507, 17063, 17094), 0), 0, 0, 0, Tag1 ("Typedtree", 48)), 2, 0); Tag1 (("module_declaration", 1420), (0, 0, [[(("md_id", 1149), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -388)], (0)), 100000000, 0, -387), (("typing/typedtree.mli", 511, 17127, 17132), ("typing/typedtree.mli", 511, 17127, 17154), 0), 0, Tag1 ("Typedtree", 292)); (("md_name", 1150), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -391)], (0)), 100000000, 0, -390)], (0)), 100000000, 0, -389), (("typing/typedtree.mli", 512, 17155, 17160), ("typing/typedtree.mli", 512, 17155, 17187), 0), 0, Tag1 ("Typedtree", 293)); (("md_presence", 1151), 0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_presence"), 0, (0)), 100000000, 0, -392), (("typing/typedtree.mli", 513, 17188, 17193), ("typing/typedtree.mli", 513, 17188, 17228), 0), 0, Tag1 ("Typedtree", 294)); (("md_type", 1152), 0, (Tag3 ((("module_type", 1414)), 0, (0)), 100000000, 0, -393), (("typing/typedtree.mli", 514, 17229, 17234), ("typing/typedtree.mli", 514, 17229, 17255), 0), 0, Tag1 ("Typedtree", 295)); (("md_attributes", 1153), 0, (Tag3 ((("attributes", 1381)), 0, (0)), 100000000, 0, -394), (("typing/typedtree.mli", 515, 17256, 17261), ("typing/typedtree.mli", 515, 17256, 17287), 0), 0, Tag1 ("Typedtree", 296)); (("md_loc", 1154), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -395), (("typing/typedtree.mli", 516, 17288, 17293), ("typing/typedtree.mli", 516, 17288, 17312), 0), 0, Tag1 ("Typedtree", 297))]], 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 509, 17096, 17096), ("typing/typedtree.mli", 517, 17313, 17318), 0), 0, 0, 0, Tag1 ("Typedtree", 49)), 2, 0); Tag1 (("module_substitution", 1421), (0, 0, [[(("ms_id", 1155), 0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -379), (("typing/typedtree.mli", 521, 17352, 17357), ("typing/typedtree.mli", 521, 17352, 17372), 0), 0, Tag1 ("Typedtree", 298)); (("ms_name", 1156), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -381)], (0)), 100000000, 0, -380), (("typing/typedtree.mli", 522, 17373, 17378), ("typing/typedtree.mli", 522, 17373, 17398), 0), 0, Tag1 ("Typedtree", 299)); (("ms_manifest", 1157), 0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -382), (("typing/typedtree.mli", 523, 17399, 17404), ("typing/typedtree.mli", 523, 17399, 17424), 0), 0, Tag1 ("Typedtree", 300)); (("ms_txt", 1158), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -384)], (0)), 100000000, 0, -383), (("typing/typedtree.mli", 524, 17425, 17430), ("typing/typedtree.mli", 524, 17425, 17454), 0), 0, Tag1 ("Typedtree", 301)); (("ms_attributes", 1159), 0, (Tag3 ((("attributes", 1381)), 0, (0)), 100000000, 0, -385), (("typing/typedtree.mli", 525, 17455, 17460), ("typing/typedtree.mli", 525, 17455, 17486), 0), 0, Tag1 ("Typedtree", 302)); (("ms_loc", 1160), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -386), (("typing/typedtree.mli", 526, 17487, 17492), ("typing/typedtree.mli", 526, 17487, 17511), 0), 0, Tag1 ("Typedtree", 303))]], 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 519, 17320, 17320), ("typing/typedtree.mli", 527, 17512, 17517), 0), 0, 0, 0, Tag1 ("Typedtree", 50)), 2, 0); Tag1 (("module_type_declaration", 1422), (0, 0, [[(("mtd_id", 1161), 0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -372), (("typing/typedtree.mli", 531, 17555, 17560), ("typing/typedtree.mli", 531, 17555, 17576), 0), 0, Tag1 ("Typedtree", 304)); (("mtd_name", 1162), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -374)], (0)), 100000000, 0, -373), (("typing/typedtree.mli", 532, 17577, 17582), ("typing/typedtree.mli", 532, 17577, 17603), 0), 0, Tag1 ("Typedtree", 305)); (("mtd_type", 1163), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("module_type", 1414)), 0, (0)), 100000000, 0, -376)], (0)), 100000000, 0, -375), (("typing/typedtree.mli", 533, 17604, 17609), ("typing/typedtree.mli", 533, 17604, 17638), 0), 0, Tag1 ("Typedtree", 306)); (("mtd_attributes", 1164), 0, (Tag3 ((("attributes", 1381)), 0, (0)), 100000000, 0, -377), (("typing/typedtree.mli", 534, 17639, 17644), ("typing/typedtree.mli", 534, 17639, 17671), 0), 0, Tag1 ("Typedtree", 307)); (("mtd_loc", 1165), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -378), (("typing/typedtree.mli", 535, 17672, 17677), ("typing/typedtree.mli", 535, 17672, 17697), 0), 0, Tag1 ("Typedtree", 308))]], 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 529, 17519, 17519), ("typing/typedtree.mli", 536, 17698, 17703), 0), 0, 0, 0, Tag1 ("Typedtree", 51)), 2, 0); Tag1 (("open_infos", 1423), ([((("a")), 100000000, 0, -365)], 1, [[(("open_expr", 1166), 0, ((("a")), 100000000, 0, -365), (("typing/typedtree.mli", 540, 17731, 17736), ("typing/typedtree.mli", 540, 17731, 17750), 0), 0, Tag1 ("Typedtree", 309)); (("open_bound_items", 1167), 0, (Tag3 (Tag1 ((Tag2 ("Types")), "signature"), 0, (0)), 100000000, 0, -366), (("typing/typedtree.mli", 541, 17751, 17756), ("typing/typedtree.mli", 541, 17751, 17790), 0), 0, Tag1 ("Typedtree", 310)); (("open_override", 1168), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "override_flag"), 0, (0)), 100000000, 0, -367), (("typing/typedtree.mli", 542, 17791, 17796), ("typing/typedtree.mli", 542, 17791, 17825), 0), 0, Tag1 ("Typedtree", 311)); (("open_env", 1169), 0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -368), (("typing/typedtree.mli", 543, 17826, 17831), ("typing/typedtree.mli", 543, 17826, 17847), 0), 0, Tag1 ("Typedtree", 312)); (("open_loc", 1170), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -369), (("typing/typedtree.mli", 544, 17848, 17853), ("typing/typedtree.mli", 544, 17848, 17874), 0), 0, Tag1 ("Typedtree", 313)); (("open_attributes", 1171), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("attribute", 1380)), 0, (0)), 100000000, 0, -371)], (0)), 100000000, 0, -370), (("typing/typedtree.mli", 545, 17875, 17880), ("typing/typedtree.mli", 545, 17875, 17912), 0), 0, Tag1 ("Typedtree", 314))]], 1, 0, [25], [0], 0, 0, (("typing/typedtree.mli", 538, 17705, 17705), ("typing/typedtree.mli", 546, 17913, 17918), 0), 0, 0, 0, Tag1 ("Typedtree", 52)), 2, 0); Tag1 (("open_description", 1424), (0, 0, 0, 1, ((Tag3 ((("open_infos", 1423)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -362); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -364)], (0)), 100000000, 0, -363)]), 100000000, 0, -361)], (0)), 100000000, 0, -360)), 0, 0, 0, 0, (("typing/typedtree.mli", 548, 17920, 17920), ("typing/typedtree.mli", 548, 17920, 17980), 0), 0, 0, 0, Tag1 ("Typedtree", 53)), 2, 0); Tag1 (("open_declaration", 1425), (0, 0, 0, 1, ((Tag3 ((("open_infos", 1423)), [(Tag3 ((("module_expr", 1404)), 0, (0)), 100000000, 0, -359)], (0)), 100000000, 0, -358)), 0, 0, 0, 0, (("typing/typedtree.mli", 550, 17982, 17982), ("typing/typedtree.mli", 550, 17982, 18027), 0), 0, 0, 0, Tag1 ("Typedtree", 54)), 2, 0); Tag1 (("include_infos", 1426), ([((("a")), 100000000, 0, -353)], 1, [[(("incl_mod", 1172), 0, ((("a")), 100000000, 0, -353), (("typing/typedtree.mli", 555, 18059, 18064), ("typing/typedtree.mli", 555, 18059, 18077), 0), 0, Tag1 ("Typedtree", 315)); (("incl_type", 1173), 0, (Tag3 (Tag1 ((Tag2 ("Types")), "signature"), 0, (0)), 100000000, 0, -354), (("typing/typedtree.mli", 556, 18078, 18083), ("typing/typedtree.mli", 556, 18078, 18110), 0), 0, Tag1 ("Typedtree", 316)); (("incl_loc", 1174), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -355), (("typing/typedtree.mli", 557, 18111, 18116), ("typing/typedtree.mli", 557, 18111, 18137), 0), 0, Tag1 ("Typedtree", 317)); (("incl_attributes", 1175), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("attribute", 1380)), 0, (0)), 100000000, 0, -357)], (0)), 100000000, 0, -356), (("typing/typedtree.mli", 558, 18138, 18143), ("typing/typedtree.mli", 558, 18138, 18175), 0), 0, Tag1 ("Typedtree", 318))]], 1, 0, [25], [0], 0, 0, (("typing/typedtree.mli", 553, 18030, 18030), ("typing/typedtree.mli", 559, 18176, 18181), 0), 0, 0, 0, Tag1 ("Typedtree", 55)), 2, 0); Tag1 (("include_description", 1427), (0, 0, 0, 1, ((Tag3 ((("include_infos", 1426)), [(Tag3 ((("module_type", 1414)), 0, (0)), 100000000, 0, -352)], (0)), 100000000, 0, -351)), 0, 0, 0, 0, (("typing/typedtree.mli", 561, 18183, 18183), ("typing/typedtree.mli", 561, 18183, 18234), 0), 0, 0, 0, Tag1 ("Typedtree", 56)), 2, 0); Tag1 (("include_declaration", 1428), (0, 0, 0, 1, ((Tag3 ((("include_infos", 1426)), [(Tag3 ((("module_expr", 1404)), 0, (0)), 100000000, 0, -350)], (0)), 100000000, 0, -349)), 0, 0, 0, 0, (("typing/typedtree.mli", 563, 18236, 18236), ("typing/typedtree.mli", 563, 18236, 18287), 0), 0, 0, 0, Tag1 ("Typedtree", 57)), 2, 0); Tag1 (("with_constraint", 1429), (0, 0, Tag1 ([(("Twith_type", 1176), ([(Tag3 ((("type_declaration", 1438)), 0, (0)), 100000000, 0, -339)]), 0, (("typing/typedtree.mli", 566, 18311, 18315), ("typing/typedtree.mli", 566, 18311, 18345), 0), 0, Tag1 ("Typedtree", 319)); (("Twith_module", 1177), ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -340); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -342)], (0)), 100000000, 0, -341)]), 0, (("typing/typedtree.mli", 567, 18346, 18348), ("typing/typedtree.mli", 567, 18346, 18390), 0), 0, Tag1 ("Typedtree", 320)); (("Twith_modtype", 1178), ([(Tag3 ((("module_type", 1414)), 0, (0)), 100000000, 0, -343)]), 0, (("typing/typedtree.mli", 568, 18391, 18393), ("typing/typedtree.mli", 568, 18391, 18423), 0), 0, Tag1 ("Typedtree", 321)); (("Twith_typesubst", 1179), ([(Tag3 ((("type_declaration", 1438)), 0, (0)), 100000000, 0, -344)]), 0, (("typing/typedtree.mli", 569, 18424, 18426), ("typing/typedtree.mli", 569, 18424, 18463), 0), 0, Tag1 ("Typedtree", 322)); (("Twith_modsubst", 1180), ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -345); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -347)], (0)), 100000000, 0, -346)]), 0, (("typing/typedtree.mli", 570, 18464, 18466), ("typing/typedtree.mli", 570, 18464, 18510), 0), 0, Tag1 ("Typedtree", 323)); (("Twith_modtypesubst", 1181), ([(Tag3 ((("module_type", 1414)), 0, (0)), 100000000, 0, -348)]), 0, (("typing/typedtree.mli", 571, 18511, 18513), ("typing/typedtree.mli", 571, 18511, 18548), 0), 0, Tag1 ("Typedtree", 324))], 0), 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 565, 18289, 18289), ("typing/typedtree.mli", 571, 18511, 18548), 0), 0, 0, 0, Tag1 ("Typedtree", 58)), 2, 0); Tag1 (("core_type", 1430), (0, 0, [[(("ctyp_desc", 1182), 1, (Tag3 ((("core_type_desc", 1431)), 0, (0)), 100000000, 0, -334), (("typing/typedtree.mli", 574, 18566, 18570), ("typing/typedtree.mli", 574, 18566, 18605), 0), 0, Tag1 ("Typedtree", 325)); (("ctyp_type", 1183), 1, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -335), (("typing/typedtree.mli", 576, 18665, 18669), ("typing/typedtree.mli", 576, 18665, 18705), 0), 0, Tag1 ("Typedtree", 326)); (("ctyp_env", 1184), 0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -336), (("typing/typedtree.mli", 578, 18765, 18769), ("typing/typedtree.mli", 578, 18765, 18786), 0), 0, Tag1 ("Typedtree", 327)); (("ctyp_loc", 1185), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -337), (("typing/typedtree.mli", 579, 18808, 18812), ("typing/typedtree.mli", 579, 18808, 18834), 0), 0, Tag1 ("Typedtree", 328)); (("ctyp_attributes", 1186), 0, (Tag3 ((("attributes", 1381)), 0, (0)), 100000000, 0, -338), (("typing/typedtree.mli", 580, 18835, 18839), ("typing/typedtree.mli", 580, 18835, 18867), 0), 0, Tag1 ("Typedtree", 329))]], 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 573, 18550, 18550), ("typing/typedtree.mli", 581, 18868, 18872), 0), 0, 0, 0, Tag1 ("Typedtree", 59)), 2, 0); Tag1 (("core_type_desc", 1431), (0, 0, Tag1 ([(("Ttyp_any", 1187), (0), 0, (("typing/typedtree.mli", 584, 18895, 18899), ("typing/typedtree.mli", 584, 18895, 18907), 0), 0, Tag1 ("Typedtree", 330)); (("Ttyp_var", 1188), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -303)]), 0, (("typing/typedtree.mli", 585, 18908, 18910), ("typing/typedtree.mli", 585, 18908, 18930), 0), 0, Tag1 ("Typedtree", 331)); (("Ttyp_arrow", 1189), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "arg_label"), 0, (0)), 100000000, 0, -304); (Tag3 ((("core_type", 1430)), 0, (0)), 100000000, 0, -305); (Tag3 ((("core_type", 1430)), 0, (0)), 100000000, 0, -306)]), 0, (("typing/typedtree.mli", 586, 18931, 18933), ("typing/typedtree.mli", 586, 18931, 18982), 0), 0, Tag1 ("Typedtree", 332)); (("Ttyp_tuple", 1190), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("core_type", 1430)), 0, (0)), 100000000, 0, -308)], (0)), 100000000, 0, -307)]), 0, (("typing/typedtree.mli", 587, 18983, 18985), ("typing/typedtree.mli", 587, 18983, 19015), 0), 0, Tag1 ("Typedtree", 333)); (("Ttyp_constr", 1191), ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -309); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -311)], (0)), 100000000, 0, -310); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("core_type", 1430)), 0, (0)), 100000000, 0, -313)], (0)), 100000000, 0, -312)]), 0, (("typing/typedtree.mli", 588, 19016, 19018), ("typing/typedtree.mli", 588, 19016, 19076), 0), 0, Tag1 ("Typedtree", 334)); (("Ttyp_object", 1192), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("object_field", 1435)), 0, (0)), 100000000, 0, -315)], (0)), 100000000, 0, -314); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "closed_flag"), 0, (0)), 100000000, 0, -316)]), 0, (("typing/typedtree.mli", 589, 19077, 19079), ("typing/typedtree.mli", 589, 19077, 19127), 0), 0, Tag1 ("Typedtree", 335)); (("Ttyp_class", 1193), ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -317); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -319)], (0)), 100000000, 0, -318); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("core_type", 1430)), 0, (0)), 100000000, 0, -321)], (0)), 100000000, 0, -320)]), 0, (("typing/typedtree.mli", 590, 19128, 19130), ("typing/typedtree.mli", 590, 19128, 19187), 0), 0, Tag1 ("Typedtree", 336)); (("Ttyp_alias", 1194), ([(Tag3 ((("core_type", 1430)), 0, (0)), 100000000, 0, -322); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -323)]), 0, (("typing/typedtree.mli", 591, 19188, 19190), ("typing/typedtree.mli", 591, 19188, 19224), 0), 0, Tag1 ("Typedtree", 337)); (("Ttyp_variant", 1195), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("row_field", 1433)), 0, (0)), 100000000, 0, -325)], (0)), 100000000, 0, -324); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "closed_flag"), 0, (0)), 100000000, 0, -326); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Asttypes")), "label"), 0, (0)), 100000000, 0, -329)], (0)), 100000000, 0, -328)], (0)), 100000000, 0, -327)]), 0, (("typing/typedtree.mli", 592, 19225, 19227), ("typing/typedtree.mli", 592, 19225, 19293), 0), 0, Tag1 ("Typedtree", 338)); (("Ttyp_poly", 1196), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -331)], (0)), 100000000, 0, -330); (Tag3 ((("core_type", 1430)), 0, (0)), 100000000, 0, -332)]), 0, (("typing/typedtree.mli", 593, 19294, 19296), ("typing/typedtree.mli", 593, 19294, 19334), 0), 0, Tag1 ("Typedtree", 339)); (("Ttyp_package", 1197), ([(Tag3 ((("package_type", 1432)), 0, (0)), 100000000, 0, -333)]), 0, (("typing/typedtree.mli", 594, 19335, 19337), ("typing/typedtree.mli", 594, 19335, 19367), 0), 0, Tag1 ("Typedtree", 340))], 0), 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 583, 18874, 18874), ("typing/typedtree.mli", 594, 19335, 19367), 0), 0, 0, 0, Tag1 ("Typedtree", 60)), 2, 0); Tag1 (("package_type", 1432), (0, 0, [[(("pack_path", 1198), 0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -294), (("typing/typedtree.mli", 597, 19390, 19392), ("typing/typedtree.mli", 597, 19390, 19411), 0), 0, Tag1 ("Typedtree", 341)); (("pack_fields", 1199), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -298)], (0)), 100000000, 0, -297); (Tag3 ((("core_type", 1430)), 0, (0)), 100000000, 0, -299)]), 100000000, 0, -296)], (0)), 100000000, 0, -295), (("typing/typedtree.mli", 598, 19412, 19414), ("typing/typedtree.mli", 598, 19412, 19463), 0), 0, Tag1 ("Typedtree", 342)); (("pack_type", 1200), 0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -300), (("typing/typedtree.mli", 599, 19464, 19466), ("typing/typedtree.mli", 599, 19464, 19496), 0), 0, Tag1 ("Typedtree", 343)); (("pack_txt", 1201), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -302)], (0)), 100000000, 0, -301), (("typing/typedtree.mli", 600, 19497, 19499), ("typing/typedtree.mli", 600, 19497, 19526), 0), 0, Tag1 ("Typedtree", 344))]], 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 596, 19369, 19369), ("typing/typedtree.mli", 601, 19527, 19528), 0), 0, 0, 0, Tag1 ("Typedtree", 61)), 2, 0); Tag1 (("row_field", 1433), (0, 0, [[(("rf_desc", 1202), 0, (Tag3 ((("row_field_desc", 1434)), 0, (0)), 100000000, 0, -291), (("typing/typedtree.mli", 604, 19548, 19550), ("typing/typedtree.mli", 604, 19548, 19575), 0), 0, Tag1 ("Typedtree", 345)); (("rf_loc", 1203), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -292), (("typing/typedtree.mli", 605, 19576, 19578), ("typing/typedtree.mli", 605, 19576, 19598), 0), 0, Tag1 ("Typedtree", 346)); (("rf_attributes", 1204), 0, (Tag3 ((("attributes", 1381)), 0, (0)), 100000000, 0, -293), (("typing/typedtree.mli", 606, 19599, 19601), ("typing/typedtree.mli", 606, 19599, 19628), 0), 0, Tag1 ("Typedtree", 347))]], 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 603, 19530, 19530), ("typing/typedtree.mli", 607, 19629, 19630), 0), 0, 0, 0, Tag1 ("Typedtree", 62)), 2, 0); Tag1 (("row_field_desc", 1434), (0, 0, Tag1 ([(("Ttag", 1205), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -286)], (0)), 100000000, 0, -285); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -287); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("core_type", 1430)), 0, (0)), 100000000, 0, -289)], (0)), 100000000, 0, -288)]), 0, (("typing/typedtree.mli", 610, 19653, 19657), ("typing/typedtree.mli", 610, 19653, 19699), 0), 0, Tag1 ("Typedtree", 348)); (("Tinherit", 1206), ([(Tag3 ((("core_type", 1430)), 0, (0)), 100000000, 0, -290)]), 0, (("typing/typedtree.mli", 611, 19700, 19702), ("typing/typedtree.mli", 611, 19700, 19725), 0), 0, Tag1 ("Typedtree", 349))], 0), 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 609, 19632, 19632), ("typing/typedtree.mli", 611, 19700, 19725), 0), 0, 0, 0, Tag1 ("Typedtree", 63)), 2, 0); Tag1 (("object_field", 1435), (0, 0, [[(("of_desc", 1207), 0, (Tag3 ((("object_field_desc", 1436)), 0, (0)), 100000000, 0, -282), (("typing/typedtree.mli", 614, 19748, 19750), ("typing/typedtree.mli", 614, 19748, 19778), 0), 0, Tag1 ("Typedtree", 350)); (("of_loc", 1208), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -283), (("typing/typedtree.mli", 615, 19779, 19781), ("typing/typedtree.mli", 615, 19779, 19801), 0), 0, Tag1 ("Typedtree", 351)); (("of_attributes", 1209), 0, (Tag3 ((("attributes", 1381)), 0, (0)), 100000000, 0, -284), (("typing/typedtree.mli", 616, 19802, 19804), ("typing/typedtree.mli", 616, 19802, 19831), 0), 0, Tag1 ("Typedtree", 352))]], 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 613, 19727, 19727), ("typing/typedtree.mli", 617, 19832, 19833), 0), 0, 0, 0, Tag1 ("Typedtree", 64)), 2, 0); Tag1 (("object_field_desc", 1436), (0, 0, Tag1 ([(("OTtag", 1210), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -279)], (0)), 100000000, 0, -278); (Tag3 ((("core_type", 1430)), 0, (0)), 100000000, 0, -280)]), 0, (("typing/typedtree.mli", 620, 19859, 19861), ("typing/typedtree.mli", 620, 19859, 19894), 0), 0, Tag1 ("Typedtree", 353)); (("OTinherit", 1211), ([(Tag3 ((("core_type", 1430)), 0, (0)), 100000000, 0, -281)]), 0, (("typing/typedtree.mli", 621, 19895, 19897), ("typing/typedtree.mli", 621, 19895, 19921), 0), 0, Tag1 ("Typedtree", 354))], 0), 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 619, 19835, 19835), ("typing/typedtree.mli", 621, 19895, 19921), 0), 0, 0, 0, Tag1 ("Typedtree", 65)), 2, 0); Tag1 (("value_description", 1437), (0, 0, [[(("val_id", 1212), 0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -269), (("typing/typedtree.mli", 624, 19947, 19951), ("typing/typedtree.mli", 624, 19947, 19967), 0), 0, Tag1 ("Typedtree", 355)); (("val_name", 1213), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -271)], (0)), 100000000, 0, -270), (("typing/typedtree.mli", 625, 19968, 19972), ("typing/typedtree.mli", 625, 19968, 19993), 0), 0, Tag1 ("Typedtree", 356)); (("val_desc", 1214), 0, (Tag3 ((("core_type", 1430)), 0, (0)), 100000000, 0, -272), (("typing/typedtree.mli", 626, 19994, 19998), ("typing/typedtree.mli", 626, 19994, 20018), 0), 0, Tag1 ("Typedtree", 357)); (("val_val", 1215), 0, (Tag3 (Tag1 ((Tag2 ("Types")), "value_description"), 0, (0)), 100000000, 0, -273), (("typing/typedtree.mli", 627, 20019, 20023), ("typing/typedtree.mli", 627, 20019, 20056), 0), 0, Tag1 ("Typedtree", 358)); (("val_prim", 1216), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -275)], (0)), 100000000, 0, -274), (("typing/typedtree.mli", 628, 20057, 20061), ("typing/typedtree.mli", 628, 20057, 20083), 0), 0, Tag1 ("Typedtree", 359)); (("val_loc", 1217), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -276), (("typing/typedtree.mli", 629, 20084, 20088), ("typing/typedtree.mli", 629, 20084, 20108), 0), 0, Tag1 ("Typedtree", 360)); (("val_attributes", 1218), 0, (Tag3 ((("attributes", 1381)), 0, (0)), 100000000, 0, -277), (("typing/typedtree.mli", 630, 20109, 20113), ("typing/typedtree.mli", 630, 20109, 20140), 0), 0, Tag1 ("Typedtree", 361))]], 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 623, 19923, 19923), ("typing/typedtree.mli", 631, 20141, 20146), 0), 0, 0, 0, Tag1 ("Typedtree", 66)), 2, 0); Tag1 (("type_declaration", 1438), (0, 0, [[(("typ_id", 1219), 0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -248), (("typing/typedtree.mli", 635, 20175, 20179), ("typing/typedtree.mli", 635, 20175, 20195), 0), 0, Tag1 ("Typedtree", 362)); (("typ_name", 1220), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -250)], (0)), 100000000, 0, -249), (("typing/typedtree.mli", 636, 20196, 20200), ("typing/typedtree.mli", 636, 20196, 20221), 0), 0, Tag1 ("Typedtree", 363)); (("typ_params", 1221), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("core_type", 1430)), 0, (0)), 100000000, 0, -253); (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "variance"), 0, (0)), 100000000, 0, -255); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "injectivity"), 0, (0)), 100000000, 0, -256)]), 100000000, 0, -254)]), 100000000, 0, -252)], (0)), 100000000, 0, -251), (("typing/typedtree.mli", 637, 20222, 20226), ("typing/typedtree.mli", 637, 20222, 20282), 0), 0, Tag1 ("Typedtree", 364)); (("typ_type", 1222), 0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -257), (("typing/typedtree.mli", 638, 20283, 20287), ("typing/typedtree.mli", 638, 20283, 20320), 0), 0, Tag1 ("Typedtree", 365)); (("typ_cstrs", 1223), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("core_type", 1430)), 0, (0)), 100000000, 0, -260); (Tag3 ((("core_type", 1430)), 0, (0)), 100000000, 0, -261); (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -262)]), 100000000, 0, -259)], (0)), 100000000, 0, -258), (("typing/typedtree.mli", 639, 20321, 20325), ("typing/typedtree.mli", 639, 20321, 20378), 0), 0, Tag1 ("Typedtree", 366)); (("typ_kind", 1224), 0, (Tag3 ((("type_kind", 1439)), 0, (0)), 100000000, 0, -263), (("typing/typedtree.mli", 640, 20379, 20383), ("typing/typedtree.mli", 640, 20379, 20403), 0), 0, Tag1 ("Typedtree", 367)); (("typ_private", 1225), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "private_flag"), 0, (0)), 100000000, 0, -264), (("typing/typedtree.mli", 641, 20404, 20408), ("typing/typedtree.mli", 641, 20404, 20434), 0), 0, Tag1 ("Typedtree", 368)); (("typ_manifest", 1226), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("core_type", 1430)), 0, (0)), 100000000, 0, -266)], (0)), 100000000, 0, -265), (("typing/typedtree.mli", 642, 20435, 20439), ("typing/typedtree.mli", 642, 20435, 20470), 0), 0, Tag1 ("Typedtree", 369)); (("typ_loc", 1227), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -267), (("typing/typedtree.mli", 643, 20471, 20475), ("typing/typedtree.mli", 643, 20471, 20495), 0), 0, Tag1 ("Typedtree", 370)); (("typ_attributes", 1228), 0, (Tag3 ((("attributes", 1381)), 0, (0)), 100000000, 0, -268), (("typing/typedtree.mli", 644, 20496, 20500), ("typing/typedtree.mli", 644, 20496, 20527), 0), 0, Tag1 ("Typedtree", 371))]], 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 633, 20148, 20148), ("typing/typedtree.mli", 645, 20528, 20532), 0), 0, 0, 0, Tag1 ("Typedtree", 67)), 2, 0); Tag1 (("type_kind", 1439), (0, 0, Tag1 ([(("Ttype_abstract", 1229), (0), 0, (("typing/typedtree.mli", 648, 20550, 20554), ("typing/typedtree.mli", 648, 20550, 20568), 0), 0, Tag1 ("Typedtree", 372)); (("Ttype_variant", 1230), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("constructor_declaration", 1441)), 0, (0)), 100000000, 0, -245)], (0)), 100000000, 0, -244)]), 0, (("typing/typedtree.mli", 649, 20569, 20571), ("typing/typedtree.mli", 649, 20569, 20618), 0), 0, Tag1 ("Typedtree", 373)); (("Ttype_record", 1231), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("label_declaration", 1440)), 0, (0)), 100000000, 0, -247)], (0)), 100000000, 0, -246)]), 0, (("typing/typedtree.mli", 650, 20619, 20621), ("typing/typedtree.mli", 650, 20619, 20661), 0), 0, Tag1 ("Typedtree", 374)); (("Ttype_open", 1232), (0), 0, (("typing/typedtree.mli", 651, 20662, 20664), ("typing/typedtree.mli", 651, 20662, 20676), 0), 0, Tag1 ("Typedtree", 375))], 0), 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 647, 20534, 20534), ("typing/typedtree.mli", 651, 20662, 20676), 0), 0, 0, 0, Tag1 ("Typedtree", 68)), 2, 0); Tag1 (("label_declaration", 1440), (0, 0, [[(("ld_id", 1233), 0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -237), (("typing/typedtree.mli", 655, 20708, 20713), ("typing/typedtree.mli", 655, 20708, 20728), 0), 0, Tag1 ("Typedtree", 376)); (("ld_name", 1234), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -239)], (0)), 100000000, 0, -238), (("typing/typedtree.mli", 656, 20729, 20734), ("typing/typedtree.mli", 656, 20729, 20754), 0), 0, Tag1 ("Typedtree", 377)); (("ld_mutable", 1235), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "mutable_flag"), 0, (0)), 100000000, 0, -240), (("typing/typedtree.mli", 657, 20755, 20760), ("typing/typedtree.mli", 657, 20755, 20785), 0), 0, Tag1 ("Typedtree", 378)); (("ld_type", 1236), 0, (Tag3 ((("core_type", 1430)), 0, (0)), 100000000, 0, -241), (("typing/typedtree.mli", 658, 20786, 20791), ("typing/typedtree.mli", 658, 20786, 20810), 0), 0, Tag1 ("Typedtree", 379)); (("ld_loc", 1237), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -242), (("typing/typedtree.mli", 659, 20811, 20816), ("typing/typedtree.mli", 659, 20811, 20835), 0), 0, Tag1 ("Typedtree", 380)); (("ld_attributes", 1238), 0, (Tag3 ((("attributes", 1381)), 0, (0)), 100000000, 0, -243), (("typing/typedtree.mli", 660, 20836, 20841), ("typing/typedtree.mli", 660, 20836, 20867), 0), 0, Tag1 ("Typedtree", 381))]], 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 653, 20678, 20678), ("typing/typedtree.mli", 661, 20868, 20873), 0), 0, 0, 0, Tag1 ("Typedtree", 69)), 2, 0); Tag1 (("constructor_declaration", 1441), (0, 0, [[(("cd_id", 1239), 0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -226), (("typing/typedtree.mli", 665, 20911, 20916), ("typing/typedtree.mli", 665, 20911, 20931), 0), 0, Tag1 ("Typedtree", 382)); (("cd_name", 1240), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -228)], (0)), 100000000, 0, -227), (("typing/typedtree.mli", 666, 20932, 20937), ("typing/typedtree.mli", 666, 20932, 20957), 0), 0, Tag1 ("Typedtree", 383)); (("cd_vars", 1241), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -231)], (0)), 100000000, 0, -230)], (0)), 100000000, 0, -229), (("typing/typedtree.mli", 667, 20958, 20963), ("typing/typedtree.mli", 667, 20958, 20988), 0), 0, Tag1 ("Typedtree", 384)); (("cd_args", 1242), 0, (Tag3 ((("constructor_arguments", 1442)), 0, (0)), 100000000, 0, -232), (("typing/typedtree.mli", 668, 20989, 20994), ("typing/typedtree.mli", 668, 20989, 21025), 0), 0, Tag1 ("Typedtree", 385)); (("cd_res", 1243), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("core_type", 1430)), 0, (0)), 100000000, 0, -234)], (0)), 100000000, 0, -233), (("typing/typedtree.mli", 669, 21026, 21031), ("typing/typedtree.mli", 669, 21026, 21056), 0), 0, Tag1 ("Typedtree", 386)); (("cd_loc", 1244), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -235), (("typing/typedtree.mli", 670, 21057, 21062), ("typing/typedtree.mli", 670, 21057, 21081), 0), 0, Tag1 ("Typedtree", 387)); (("cd_attributes", 1245), 0, (Tag3 ((("attributes", 1381)), 0, (0)), 100000000, 0, -236), (("typing/typedtree.mli", 671, 21082, 21087), ("typing/typedtree.mli", 671, 21082, 21113), 0), 0, Tag1 ("Typedtree", 388))]], 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 663, 20875, 20875), ("typing/typedtree.mli", 672, 21114, 21119), 0), 0, 0, 0, Tag1 ("Typedtree", 70)), 2, 0); Tag1 (("constructor_arguments", 1442), (0, 0, Tag1 ([(("Cstr_tuple", 1246), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("core_type", 1430)), 0, (0)), 100000000, 0, -223)], (0)), 100000000, 0, -222)]), 0, (("typing/typedtree.mli", 675, 21149, 21151), ("typing/typedtree.mli", 675, 21149, 21181), 0), 0, Tag1 ("Typedtree", 389)); (("Cstr_record", 1247), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("label_declaration", 1440)), 0, (0)), 100000000, 0, -225)], (0)), 100000000, 0, -224)]), 0, (("typing/typedtree.mli", 676, 21182, 21184), ("typing/typedtree.mli", 676, 21182, 21223), 0), 0, Tag1 ("Typedtree", 390))], 0), 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 674, 21121, 21121), ("typing/typedtree.mli", 676, 21182, 21223), 0), 0, 0, 0, Tag1 ("Typedtree", 71)), 2, 0); Tag1 (("type_extension", 1443), (0, 0, [[(("tyext_path", 1248), 0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -208), (("typing/typedtree.mli", 680, 21250, 21254), ("typing/typedtree.mli", 680, 21250, 21273), 0), 0, Tag1 ("Typedtree", 391)); (("tyext_txt", 1249), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -210)], (0)), 100000000, 0, -209), (("typing/typedtree.mli", 681, 21274, 21278), ("typing/typedtree.mli", 681, 21274, 21305), 0), 0, Tag1 ("Typedtree", 392)); (("tyext_params", 1250), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("core_type", 1430)), 0, (0)), 100000000, 0, -213); (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "variance"), 0, (0)), 100000000, 0, -215); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "injectivity"), 0, (0)), 100000000, 0, -216)]), 100000000, 0, -214)]), 100000000, 0, -212)], (0)), 100000000, 0, -211), (("typing/typedtree.mli", 682, 21306, 21310), ("typing/typedtree.mli", 682, 21306, 21368), 0), 0, Tag1 ("Typedtree", 393)); (("tyext_constructors", 1251), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("extension_constructor", 1445)), 0, (0)), 100000000, 0, -218)], (0)), 100000000, 0, -217), (("typing/typedtree.mli", 683, 21369, 21373), ("typing/typedtree.mli", 683, 21369, 21420), 0), 0, Tag1 ("Typedtree", 394)); (("tyext_private", 1252), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "private_flag"), 0, (0)), 100000000, 0, -219), (("typing/typedtree.mli", 684, 21421, 21425), ("typing/typedtree.mli", 684, 21421, 21453), 0), 0, Tag1 ("Typedtree", 395)); (("tyext_loc", 1253), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -220), (("typing/typedtree.mli", 685, 21454, 21458), ("typing/typedtree.mli", 685, 21454, 21480), 0), 0, Tag1 ("Typedtree", 396)); (("tyext_attributes", 1254), 0, (Tag3 ((("attributes", 1381)), 0, (0)), 100000000, 0, -221), (("typing/typedtree.mli", 686, 21481, 21485), ("typing/typedtree.mli", 686, 21481, 21514), 0), 0, Tag1 ("Typedtree", 397))]], 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 678, 21225, 21225), ("typing/typedtree.mli", 687, 21515, 21518), 0), 0, 0, 0, Tag1 ("Typedtree", 72)), 2, 0); Tag1 (("type_exception", 1444), (0, 0, [[(("tyexn_constructor", 1255), 0, (Tag3 ((("extension_constructor", 1445)), 0, (0)), 100000000, 0, -204), (("typing/typedtree.mli", 691, 21545, 21549), ("typing/typedtree.mli", 691, 21545, 21590), 0), 0, Tag1 ("Typedtree", 398)); (("tyexn_loc", 1256), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -205), (("typing/typedtree.mli", 692, 21591, 21595), ("typing/typedtree.mli", 692, 21591, 21617), 0), 0, Tag1 ("Typedtree", 399)); (("tyexn_attributes", 1257), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("attribute", 1380)), 0, (0)), 100000000, 0, -207)], (0)), 100000000, 0, -206), (("typing/typedtree.mli", 693, 21618, 21622), ("typing/typedtree.mli", 693, 21618, 21655), 0), 0, Tag1 ("Typedtree", 400))]], 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 689, 21520, 21520), ("typing/typedtree.mli", 694, 21656, 21659), 0), 0, 0, 0, Tag1 ("Typedtree", 73)), 2, 0); Tag1 (("extension_constructor", 1445), (0, 0, [[(("ext_id", 1258), 0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -197), (("typing/typedtree.mli", 698, 21693, 21697), ("typing/typedtree.mli", 698, 21693, 21713), 0), 0, Tag1 ("Typedtree", 401)); (("ext_name", 1259), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -199)], (0)), 100000000, 0, -198), (("typing/typedtree.mli", 699, 21714, 21718), ("typing/typedtree.mli", 699, 21714, 21739), 0), 0, Tag1 ("Typedtree", 402)); (("ext_type", 1260), 0, (Tag3 (Tag1 ((Tag2 ("Types")), "extension_constructor"), 0, (0)), 100000000, 0, -200), (("typing/typedtree.mli", 700, 21740, 21744), ("typing/typedtree.mli", 700, 21740, 21783), 0), 0, Tag1 ("Typedtree", 403)); (("ext_kind", 1261), 0, (Tag3 ((("extension_constructor_kind", 1446)), 0, (0)), 100000000, 0, -201), (("typing/typedtree.mli", 701, 21784, 21788), ("typing/typedtree.mli", 701, 21784, 21826), 0), 0, Tag1 ("Typedtree", 404)); (("ext_loc", 1262), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -202), (("typing/typedtree.mli", 702, 21827, 21831), ("typing/typedtree.mli", 702, 21827, 21852), 0), 0, Tag1 ("Typedtree", 405)); (("ext_attributes", 1263), 0, (Tag3 ((("attributes", 1381)), 0, (0)), 100000000, 0, -203), (("typing/typedtree.mli", 703, 21853, 21857), ("typing/typedtree.mli", 703, 21853, 21884), 0), 0, Tag1 ("Typedtree", 406))]], 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 696, 21661, 21661), ("typing/typedtree.mli", 704, 21885, 21888), 0), 0, 0, 0, Tag1 ("Typedtree", 74)), 2, 0); Tag1 (("extension_constructor_kind", 1446), (0, 0, Tag1 ([(("Text_decl", 1264), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -190)], (0)), 100000000, 0, -189)], (0)), 100000000, 0, -188); (Tag3 ((("constructor_arguments", 1442)), 0, (0)), 100000000, 0, -191); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("core_type", 1430)), 0, (0)), 100000000, 0, -193)], (0)), 100000000, 0, -192)]), 0, (("typing/typedtree.mli", 707, 21923, 21927), ("typing/typedtree.mli", 707, 21923, 21998), 0), 0, Tag1 ("Typedtree", 407)); (("Text_rebind", 1265), ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -194); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -196)], (0)), 100000000, 0, -195)]), 0, (("typing/typedtree.mli", 708, 21999, 22001), ("typing/typedtree.mli", 708, 21999, 22042), 0), 0, Tag1 ("Typedtree", 408))], 0), 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 706, 21890, 21890), ("typing/typedtree.mli", 708, 21999, 22042), 0), 0, 0, 0, Tag1 ("Typedtree", 75)), 2, 0); Tag1 (("class_type", 1447), (0, 0, [[(("cltyp_desc", 1266), 0, (Tag3 ((("class_type_desc", 1448)), 0, (0)), 100000000, 0, -183), (("typing/typedtree.mli", 712, 22067, 22072), ("typing/typedtree.mli", 712, 22067, 22100), 0), 0, Tag1 ("Typedtree", 409)); (("cltyp_type", 1267), 0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_type"), 0, (0)), 100000000, 0, -184), (("typing/typedtree.mli", 713, 22101, 22106), ("typing/typedtree.mli", 713, 22101, 22135), 0), 0, Tag1 ("Typedtree", 410)); (("cltyp_env", 1268), 0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -185), (("typing/typedtree.mli", 714, 22136, 22141), ("typing/typedtree.mli", 714, 22136, 22158), 0), 0, Tag1 ("Typedtree", 411)); (("cltyp_loc", 1269), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -186), (("typing/typedtree.mli", 715, 22159, 22164), ("typing/typedtree.mli", 715, 22159, 22186), 0), 0, Tag1 ("Typedtree", 412)); (("cltyp_attributes", 1270), 0, (Tag3 ((("attributes", 1381)), 0, (0)), 100000000, 0, -187), (("typing/typedtree.mli", 716, 22187, 22192), ("typing/typedtree.mli", 716, 22187, 22221), 0), 0, Tag1 ("Typedtree", 413))]], 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 710, 22044, 22044), ("typing/typedtree.mli", 717, 22222, 22227), 0), 0, 0, 0, Tag1 ("Typedtree", 76)), 2, 0); Tag1 (("class_type_desc", 1448), (0, 0, Tag1 ([(("Tcty_constr", 1271), ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -172); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -174)], (0)), 100000000, 0, -173); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("core_type", 1430)), 0, (0)), 100000000, 0, -176)], (0)), 100000000, 0, -175)]), 0, (("typing/typedtree.mli", 720, 22251, 22255), ("typing/typedtree.mli", 720, 22251, 22311), 0), 0, Tag1 ("Typedtree", 414)); (("Tcty_signature", 1272), ([(Tag3 ((("class_signature", 1449)), 0, (0)), 100000000, 0, -177)]), 0, (("typing/typedtree.mli", 721, 22312, 22314), ("typing/typedtree.mli", 721, 22312, 22349), 0), 0, Tag1 ("Typedtree", 415)); (("Tcty_arrow", 1273), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "arg_label"), 0, (0)), 100000000, 0, -178); (Tag3 ((("core_type", 1430)), 0, (0)), 100000000, 0, -179); (Tag3 ((("class_type", 1447)), 0, (0)), 100000000, 0, -180)]), 0, (("typing/typedtree.mli", 722, 22350, 22352), ("typing/typedtree.mli", 722, 22350, 22402), 0), 0, Tag1 ("Typedtree", 416)); (("Tcty_open", 1274), ([(Tag3 ((("open_description", 1424)), 0, (0)), 100000000, 0, -181); (Tag3 ((("class_type", 1447)), 0, (0)), 100000000, 0, -182)]), 0, (("typing/typedtree.mli", 723, 22403, 22405), ("typing/typedtree.mli", 723, 22403, 22449), 0), 0, Tag1 ("Typedtree", 417))], 0), 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 719, 22229, 22229), ("typing/typedtree.mli", 723, 22403, 22449), 0), 0, 0, 0, Tag1 ("Typedtree", 77)), 2, 0); Tag1 (("class_signature", 1449), (0, 0, [[(("csig_self", 1275), 0, (Tag3 ((("core_type", 1430)), 0, (0)), 100000000, 0, -168), (("typing/typedtree.mli", 726, 22475, 22479), ("typing/typedtree.mli", 726, 22475, 22501), 0), 0, Tag1 ("Typedtree", 418)); (("csig_fields", 1276), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("class_type_field", 1450)), 0, (0)), 100000000, 0, -170)], (0)), 100000000, 0, -169), (("typing/typedtree.mli", 727, 22502, 22506), ("typing/typedtree.mli", 727, 22502, 22542), 0), 0, Tag1 ("Typedtree", 419)); (("csig_type", 1277), 0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_signature"), 0, (0)), 100000000, 0, -171), (("typing/typedtree.mli", 728, 22543, 22547), ("typing/typedtree.mli", 728, 22543, 22581), 0), 0, Tag1 ("Typedtree", 420))]], 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 725, 22451, 22451), ("typing/typedtree.mli", 729, 22582, 22585), 0), 0, 0, 0, Tag1 ("Typedtree", 78)), 2, 0); Tag1 (("class_type_field", 1450), (0, 0, [[(("ctf_desc", 1278), 0, (Tag3 ((("class_type_field_desc", 1451)), 0, (0)), 100000000, 0, -165), (("typing/typedtree.mli", 732, 22612, 22616), ("typing/typedtree.mli", 732, 22612, 22648), 0), 0, Tag1 ("Typedtree", 421)); (("ctf_loc", 1279), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -166), (("typing/typedtree.mli", 733, 22649, 22653), ("typing/typedtree.mli", 733, 22649, 22673), 0), 0, Tag1 ("Typedtree", 422)); (("ctf_attributes", 1280), 0, (Tag3 ((("attributes", 1381)), 0, (0)), 100000000, 0, -167), (("typing/typedtree.mli", 734, 22674, 22678), ("typing/typedtree.mli", 734, 22674, 22705), 0), 0, Tag1 ("Typedtree", 423))]], 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 731, 22587, 22587), ("typing/typedtree.mli", 735, 22706, 22709), 0), 0, 0, 0, Tag1 ("Typedtree", 79)), 2, 0); Tag1 (("class_type_field_desc", 1451), (0, 0, Tag1 ([(("Tctf_inherit", 1281), ([(Tag3 ((("class_type", 1447)), 0, (0)), 100000000, 0, -150)]), 0, (("typing/typedtree.mli", 738, 22739, 22741), ("typing/typedtree.mli", 738, 22739, 22769), 0), 0, Tag1 ("Typedtree", 424)); (("Tctf_val", 1282), ([(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -152); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "mutable_flag"), 0, (0)), 100000000, 0, -153); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "virtual_flag"), 0, (0)), 100000000, 0, -154); (Tag3 ((("core_type", 1430)), 0, (0)), 100000000, 0, -155)]), 100000000, 0, -151)]), 0, (("typing/typedtree.mli", 739, 22770, 22772), ("typing/typedtree.mli", 739, 22770, 22836), 0), 0, Tag1 ("Typedtree", 425)); (("Tctf_method", 1283), ([(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -157); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "private_flag"), 0, (0)), 100000000, 0, -158); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "virtual_flag"), 0, (0)), 100000000, 0, -159); (Tag3 ((("core_type", 1430)), 0, (0)), 100000000, 0, -160)]), 100000000, 0, -156)]), 0, (("typing/typedtree.mli", 740, 22837, 22839), ("typing/typedtree.mli", 740, 22837, 22906), 0), 0, Tag1 ("Typedtree", 426)); (("Tctf_constraint", 1284), ([(Tag2 ([(Tag3 ((("core_type", 1430)), 0, (0)), 100000000, 0, -162); (Tag3 ((("core_type", 1430)), 0, (0)), 100000000, 0, -163)]), 100000000, 0, -161)]), 0, (("typing/typedtree.mli", 741, 22907, 22909), ("typing/typedtree.mli", 741, 22907, 22953), 0), 0, Tag1 ("Typedtree", 427)); (("Tctf_attribute", 1285), ([(Tag3 ((("attribute", 1380)), 0, (0)), 100000000, 0, -164)]), 0, (("typing/typedtree.mli", 742, 22954, 22956), ("typing/typedtree.mli", 742, 22954, 22985), 0), 0, Tag1 ("Typedtree", 428))], 0), 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 737, 22711, 22711), ("typing/typedtree.mli", 742, 22954, 22985), 0), 0, 0, 0, Tag1 ("Typedtree", 80)), 2, 0); Tag1 (("class_declaration", 1452), (0, 0, 0, 1, ((Tag3 ((("class_infos", 1455)), [(Tag3 ((("class_expr", 1398)), 0, (0)), 100000000, 0, -149)], (0)), 100000000, 0, -148)), 0, 0, 0, 0, (("typing/typedtree.mli", 744, 22987, 22987), ("typing/typedtree.mli", 745, 23011, 23035), 0), 0, 0, 0, Tag1 ("Typedtree", 81)), 2, 0); Tag1 (("class_description", 1453), (0, 0, 0, 1, ((Tag3 ((("class_infos", 1455)), [(Tag3 ((("class_type", 1447)), 0, (0)), 100000000, 0, -147)], (0)), 100000000, 0, -146)), 0, 0, 0, 0, (("typing/typedtree.mli", 747, 23037, 23037), ("typing/typedtree.mli", 748, 23061, 23085), 0), 0, 0, 0, Tag1 ("Typedtree", 82)), 2, 0); Tag1 (("class_type_declaration", 1454), (0, 0, 0, 1, ((Tag3 ((("class_infos", 1455)), [(Tag3 ((("class_type", 1447)), 0, (0)), 100000000, 0, -145)], (0)), 100000000, 0, -144)), 0, 0, 0, 0, (("typing/typedtree.mli", 750, 23087, 23087), ("typing/typedtree.mli", 751, 23116, 23140), 0), 0, 0, 0, Tag1 ("Typedtree", 83)), 2, 0); Tag1 (("class_infos", 1455), ([((("a")), 100000000, 0, -139)], 1, [[(("ci_virt", 1286), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "virtual_flag"), 0, (0)), 100000000, 0, -127), (("typing/typedtree.mli", 754, 23163, 23167), ("typing/typedtree.mli", 754, 23163, 23189), 0), 0, Tag1 ("Typedtree", 429)); (("ci_params", 1287), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("core_type", 1430)), 0, (0)), 100000000, 0, -130); (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "variance"), 0, (0)), 100000000, 0, -132); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "injectivity"), 0, (0)), 100000000, 0, -133)]), 100000000, 0, -131)]), 100000000, 0, -129)], (0)), 100000000, 0, -128), (("typing/typedtree.mli", 755, 23190, 23194), ("typing/typedtree.mli", 755, 23190, 23249), 0), 0, Tag1 ("Typedtree", 430)); (("ci_id_name", 1288), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -135)], (0)), 100000000, 0, -134), (("typing/typedtree.mli", 756, 23250, 23254), ("typing/typedtree.mli", 756, 23250, 23278), 0), 0, Tag1 ("Typedtree", 431)); (("ci_id_class", 1289), 0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -136), (("typing/typedtree.mli", 757, 23279, 23283), ("typing/typedtree.mli", 757, 23279, 23304), 0), 0, Tag1 ("Typedtree", 432)); (("ci_id_class_type", 1290), 0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -137), (("typing/typedtree.mli", 758, 23305, 23309), ("typing/typedtree.mli", 758, 23305, 23336), 0), 0, Tag1 ("Typedtree", 433)); (("ci_id_object", 1291), 0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -138), (("typing/typedtree.mli", 759, 23337, 23341), ("typing/typedtree.mli", 759, 23337, 23364), 0), 0, Tag1 ("Typedtree", 434)); (("ci_expr", 1292), 0, ((("a")), 100000000, 0, -139), (("typing/typedtree.mli", 760, 23365, 23369), ("typing/typedtree.mli", 760, 23365, 23381), 0), 0, Tag1 ("Typedtree", 435)); (("ci_decl", 1293), 0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_declaration"), 0, (0)), 100000000, 0, -140), (("typing/typedtree.mli", 761, 23382, 23386), ("typing/typedtree.mli", 761, 23382, 23419), 0), 0, Tag1 ("Typedtree", 436)); (("ci_type_decl", 1294), 0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_type_declaration"), 0, (0)), 100000000, 0, -141), (("typing/typedtree.mli", 762, 23420, 23424), ("typing/typedtree.mli", 762, 23420, 23468), 0), 0, Tag1 ("Typedtree", 437)); (("ci_loc", 1295), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -142), (("typing/typedtree.mli", 763, 23469, 23473), ("typing/typedtree.mli", 763, 23469, 23492), 0), 0, Tag1 ("Typedtree", 438)); (("ci_attributes", 1296), 0, (Tag3 ((("attributes", 1381)), 0, (0)), 100000000, 0, -143), (("typing/typedtree.mli", 764, 23493, 23497), ("typing/typedtree.mli", 764, 23493, 23523), 0), 0, Tag1 ("Typedtree", 439))]], 1, 0, [25], [0], 0, 0, (("typing/typedtree.mli", 753, 23142, 23142), ("typing/typedtree.mli", 765, 23524, 23528), 0), 0, 0, 0, Tag1 ("Typedtree", 84)), 2, 0); Tag1 (("implementation", 1456), (0, 0, [[(("structure", 1325), 0, (Tag3 ((("structure", 1408)), 0, (0)), 100000000, 0, -123), (("typing/typedtree.mli", 768, 23554, 23556), ("typing/typedtree.mli", 768, 23554, 23577), 0), 0, Tag1 ("Typedtree", 465)); (("coercion", 1326), 0, (Tag3 ((("module_coercion", 1413)), 0, (0)), 100000000, 0, -124), (("typing/typedtree.mli", 769, 23578, 23580), ("typing/typedtree.mli", 769, 23578, 23606), 0), 0, Tag1 ("Typedtree", 466)); (("signature", 1327), 0, (Tag3 (Tag1 ((Tag2 ("Types")), "signature"), 0, (0)), 100000000, 0, -125), (("typing/typedtree.mli", 770, 23607, 23609), ("typing/typedtree.mli", 770, 23607, 23636), 0), 0, Tag1 ("Typedtree", 467)); (("shape", 1354), 0, (Tag3 (Tag1 ((Tag2 ("Shape")), "t"), 0, (0)), 100000000, 0, -126), (("typing/typedtree.mli", 771, 23637, 23639), ("typing/typedtree.mli", 771, 23637, 23654), 0), 0, Tag1 ("Typedtree", 468))]], 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 767, 23530, 23530), ("typing/typedtree.mli", 772, 23655, 23656), 0), 0, 0, 0, Tag1 ("Typedtree", 464)), 1, 0); (("as_computation_pattern", 1457), ((Tag1 (0, (Tag3 ((("pattern", 1385)), 0, (0)), 100000000, 0, -122), (Tag3 ((("general_pattern", 1386)), [(Tag3 ((("computation", 1383)), 0, (0)), 100000000, 0, -121)], (0)), 100000000, 0, -120), 0), 100000000, 0, -119), 0, (("typing/typedtree.mli", 789, 24308, 24308), ("typing/typedtree.mli", 789, 24308, 24374), 0), 0, Tag1 ("Typedtree", 469)), 0); (("classify_pattern_desc", 1458), ((Tag1 (0, (Tag3 ((("pattern_desc", 1389)), [((("k")), 100000000, 0, -117)], (0)), 100000000, 0, -118), (Tag3 ((("pattern_category", 1384)), [((("k")), 100000000, 0, -117)], (0)), 100000000, 0, -116), 0), 100000000, 0, -115), 0, (("typing/typedtree.mli", 791, 24376, 24376), ("typing/typedtree.mli", 791, 24376, 24441), 0), 0, Tag1 ("Typedtree", 470)), 0); (("classify_pattern", 1459), ((Tag1 (0, (Tag3 ((("general_pattern", 1386)), [((("k")), 100000000, 0, -113)], (0)), 100000000, 0, -114), (Tag3 ((("pattern_category", 1384)), [((("k")), 100000000, 0, -113)], (0)), 100000000, 0, -112), 0), 100000000, 0, -111), 0, (("typing/typedtree.mli", 792, 24442, 24442), ("typing/typedtree.mli", 792, 24442, 24505), 0), 0, Tag1 ("Typedtree", 471)), 0); Tag1 (("pattern_action", 1460), (0, 0, [[(("f", 1359), 0, (Tag10 ((Tag1 (0, (Tag3 ((("general_pattern", 1386)), [(Tag9 (("k")), 100000000, 0, -107)], (0)), 100000000, 0, -110), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -109), 0), 100000000, 0, -108), [(Tag9 (("k")), 100000000, 0, -107)]), 100000000, 0, -106), (("typing/typedtree.mli", 795, 24529, 24533), ("typing/typedtree.mli", 795, 24529, 24568), 0), 0, Tag1 ("Typedtree", 473))]], 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 794, 24507, 24507), ("typing/typedtree.mli", 795, 24529, 24570), 0), 0, 0, 1, Tag1 ("Typedtree", 472)), 1, 0); (("shallow_iter_pattern_desc", 1461), ((Tag1 (0, (Tag3 ((("pattern_action", 1460)), 0, (0)), 100000000, 0, -105), (Tag1 (0, (Tag3 ((("pattern_desc", 1389)), [((("k")), 100000000, 0, -104)], (0)), 100000000, 0, -103), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -102), 0), 100000000, 0, -101), 0), 100000000, 0, -100), 0, (("typing/typedtree.mli", 796, 24571, 24571), ("typing/typedtree.mli", 797, 24602, 24647), 0), 0, Tag1 ("Typedtree", 474)), 0); Tag1 (("pattern_transformation", 1462), (0, 0, [[(("f", 1362), 0, (Tag10 ((Tag1 (0, (Tag3 ((("general_pattern", 1386)), [(Tag9 (("k")), 100000000, 0, -96)], (0)), 100000000, 0, -99), (Tag3 ((("general_pattern", 1386)), [(Tag9 (("k")), 100000000, 0, -96)], (0)), 100000000, 0, -98), 0), 100000000, 0, -97), [(Tag9 (("k")), 100000000, 0, -96)]), 100000000, 0, -95), (("typing/typedtree.mli", 800, 24679, 24683), ("typing/typedtree.mli", 800, 24679, 24732), 0), 0, Tag1 ("Typedtree", 476))]], 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 799, 24649, 24649), ("typing/typedtree.mli", 800, 24679, 24734), 0), 0, 0, 1, Tag1 ("Typedtree", 475)), 1, 0); (("shallow_map_pattern_desc", 1463), ((Tag1 (0, (Tag3 ((("pattern_transformation", 1462)), 0, (0)), 100000000, 0, -94), (Tag1 (0, (Tag3 ((("pattern_desc", 1389)), [((("k")), 100000000, 0, -92)], (0)), 100000000, 0, -93), (Tag3 ((("pattern_desc", 1389)), [((("k")), 100000000, 0, -92)], (0)), 100000000, 0, -91), 0), 100000000, 0, -90), 0), 100000000, 0, -89), 0, (("typing/typedtree.mli", 801, 24735, 24735), ("typing/typedtree.mli", 802, 24765, 24829), 0), 0, Tag1 ("Typedtree", 477)), 0); (("iter_general_pattern", 1464), ((Tag1 (0, (Tag3 ((("pattern_action", 1460)), 0, (0)), 100000000, 0, -88), (Tag1 (0, (Tag3 ((("general_pattern", 1386)), [((("k")), 100000000, 0, -87)], (0)), 100000000, 0, -86), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -85), 0), 100000000, 0, -84), 0), 100000000, 0, -83), 0, (("typing/typedtree.mli", 804, 24831, 24831), ("typing/typedtree.mli", 804, 24831, 24901), 0), 0, Tag1 ("Typedtree", 478)), 0); (("iter_pattern", 1465), ((Tag1 (0, (Tag1 (0, (Tag3 ((("pattern", 1385)), 0, (0)), 100000000, 0, -82), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -81), 0), 100000000, 0, -80), (Tag1 (0, (Tag3 ((("pattern", 1385)), 0, (0)), 100000000, 0, -79), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -78), 0), 100000000, 0, -77), 0), 100000000, 0, -76), 0, (("typing/typedtree.mli", 805, 24902, 24902), ("typing/typedtree.mli", 805, 24902, 24956), 0), 0, Tag1 ("Typedtree", 479)), 0); Tag1 (("pattern_predicate", 1466), (0, 0, [[(("f", 1367), 0, (Tag10 ((Tag1 (0, (Tag3 ((("general_pattern", 1386)), [(Tag9 (("k")), 100000000, 0, -72)], (0)), 100000000, 0, -75), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -74), 0), 100000000, 0, -73), [(Tag9 (("k")), 100000000, 0, -72)]), 100000000, 0, -71), (("typing/typedtree.mli", 807, 24958, 24985), ("typing/typedtree.mli", 807, 24958, 25020), 0), 0, Tag1 ("Typedtree", 481))]], 1, 0, 0, 0, 0, 0, (("typing/typedtree.mli", 807, 24958, 24958), ("typing/typedtree.mli", 807, 24958, 25022), 0), 0, 0, 1, Tag1 ("Typedtree", 480)), 1, 0); (("exists_general_pattern", 1467), ((Tag1 (0, (Tag3 ((("pattern_predicate", 1466)), 0, (0)), 100000000, 0, -70), (Tag1 (0, (Tag3 ((("general_pattern", 1386)), [((("k")), 100000000, 0, -69)], (0)), 100000000, 0, -68), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -67), 0), 100000000, 0, -66), 0), 100000000, 0, -65), 0, (("typing/typedtree.mli", 808, 25023, 25023), ("typing/typedtree.mli", 808, 25023, 25098), 0), 0, Tag1 ("Typedtree", 482)), 0); (("exists_pattern", 1468), ((Tag1 (0, (Tag1 (0, (Tag3 ((("pattern", 1385)), 0, (0)), 100000000, 0, -64), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -63), 0), 100000000, 0, -62), (Tag1 (0, (Tag3 ((("pattern", 1385)), 0, (0)), 100000000, 0, -61), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -60), 0), 100000000, 0, -59), 0), 100000000, 0, -58), 0, (("typing/typedtree.mli", 809, 25099, 25099), ("typing/typedtree.mli", 809, 25099, 25155), 0), 0, Tag1 ("Typedtree", 483)), 0); (("let_bound_idents", 1469), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("value_binding", 1412)), 0, (0)), 100000000, 0, -57)], (0)), 100000000, 0, -56), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -55)], (0)), 100000000, 0, -54), 0), 100000000, 0, -53), 0, (("typing/typedtree.mli", 811, 25157, 25157), ("typing/typedtree.mli", 811, 25157, 25213), 0), 0, Tag1 ("Typedtree", 484)), 0); (("let_bound_idents_full", 1470), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("value_binding", 1412)), 0, (0)), 100000000, 0, -52)], (0)), 100000000, 0, -51), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -47); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -49)], (0)), 100000000, 0, -48); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -50)]), 100000000, 0, -46)], (0)), 100000000, 0, -45), 0), 100000000, 0, -44), 0, (("typing/typedtree.mli", 812, 25214, 25214), ("typing/typedtree.mli", 813, 25241, 25312), 0), 0, Tag1 ("Typedtree", 485)), 0); (("alpha_pat", 1471), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -42); (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -43)]), 100000000, 0, -41)], (0)), 100000000, 0, -40), (Tag1 (0, (Tag3 ((("general_pattern", 1386)), [((("k")), 100000000, 0, -38)], (0)), 100000000, 0, -39), (Tag3 ((("general_pattern", 1386)), [((("k")), 100000000, 0, -38)], (0)), 100000000, 0, -37), 0), 100000000, 0, -36), 0), 100000000, 0, -35), 0, (("typing/typedtree.mli", 816, 25350, 25350), ("typing/typedtree.mli", 817, 25365, 25435), 0), 0, Tag1 ("Typedtree", 486)), 0); (("mknoloc", 1472), ((Tag1 (0, ((("a")), 100000000, 0, -34), (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [((("a")), 100000000, 0, -34)], (0)), 100000000, 0, -33), 0), 100000000, 0, -32), 0, (("typing/typedtree.mli", 819, 25437, 25437), ("typing/typedtree.mli", 819, 25437, 25471), 0), 0, Tag1 ("Typedtree", 487)), 0); (("mkloc", 1473), ((Tag1 (0, ((("a")), 100000000, 0, -30), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -31), (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [((("a")), 100000000, 0, -30)], (0)), 100000000, 0, -29), 0), 100000000, 0, -28), 0), 100000000, 0, -27), 0, (("typing/typedtree.mli", 820, 25472, 25472), ("typing/typedtree.mli", 820, 25472, 25518), 0), 0, Tag1 ("Typedtree", 488)), 0); (("pat_bound_idents", 1474), ((Tag1 (0, (Tag3 ((("general_pattern", 1386)), [((("k")), 100000000, 0, -26)], (0)), 100000000, 0, -25), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -24)], (0)), 100000000, 0, -23), 0), 100000000, 0, -22), 0, (("typing/typedtree.mli", 822, 25520, 25520), ("typing/typedtree.mli", 822, 25520, 25576), 0), 0, Tag1 ("Typedtree", 489)), 0); (("pat_bound_idents_full", 1475), ((Tag1 (0, (Tag3 ((("general_pattern", 1386)), [((("k")), 100000000, 0, -21)], (0)), 100000000, 0, -20), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -16); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -18)], (0)), 100000000, 0, -17); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -19)]), 100000000, 0, -15)], (0)), 100000000, 0, -14), 0), 100000000, 0, -13), 0, (("typing/typedtree.mli", 823, 25577, 25577), ("typing/typedtree.mli", 824, 25604, 25673), 0), 0, Tag1 ("Typedtree", 490)), 0); (("split_pattern", 1476), ((Tag1 (0, (Tag3 ((("general_pattern", 1386)), [(Tag3 ((("computation", 1383)), 0, (0)), 100000000, 0, -12)], (0)), 100000000, 0, -11), (Tag2 ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("pattern", 1385)), 0, (0)), 100000000, 0, -8)], (0)), 100000000, 0, -7); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("pattern", 1385)), 0, (0)), 100000000, 0, -10)], (0)), 100000000, 0, -9)]), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("typing/typedtree.mli", 827, 25754, 25754), ("typing/typedtree.mli", 828, 25773, 25837), 0), 0, Tag1 ("Typedtree", 491)), 0); (("exp_is_nominal", 1477), ((Tag1 (0, (Tag3 ((("expression", 1391)), 0, (0)), 100000000, 0, -4), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("typing/typedtree.mli", 832, 25932, 25932), ("typing/typedtree.mli", 832, 25932, 25971), 0), 0, Tag1 ("Typedtree", 492)), 0)], "Typedtree", [("Typedtree", ("c5z\186\175w\146\254\018V\184\031\0038\004\227")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Types", ("\177\238\029.\220\006\163!\230\015\006\182\133\155\194\166")); ("Type_immediacy", ("\"\127k\011Q\241\211\138\193;8\142\129\141#\251")); ("Subst", ("\021\031\148\223\127\186\189\135\027}\145r\216\143\177\156")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shape", ("\235\127Y\213\025\137=\244\218\181\248N\189\188\216p")); ("Primitive", ("}Shh\162\015|\220A\203\249\232\245G\213\019")); ("Path", ("\012\183\178\025\1298\228*\021r\185\160Y\252\n\026")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Outcometree", ("9\021%\234\211\206\210\004H\165\208\2014\234Q\142")); ("Misc", ("*\026\026\234c\191\131\161\\\203\183\012O\252\153\198")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Load_path", ("\012@\228l\230\164S\172h\1726X\020\252o}")); ("Identifiable", ("\004F\207\014\158GU\001\184\214\187%/#;\211")); ("Ident", ("\b9;!\187.\220\163(x\b\174\\\223\020\004")); ("Env", ("\021\n\181\142x\b\169j\227\"\017\248*\178\245\223")); ("Cmi_format", ("6\177\bU\139\"\023\152=\249\135\174\b\011Cg")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Build_path_prefix_map", ("y\028\167\207D\220\198\216\011\208\172\149\2416\bc")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216"))], [(0)])
val exp_is_nominal : expression -> bool

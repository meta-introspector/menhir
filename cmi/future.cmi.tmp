module UUID :
  sig
    type t
    val invalid : t
    val compare : t -> t -> int
    val equal : t -> t -> bool
  end
module UUIDMap :
  sig
    type key = UUID.t
    type +!'a t
    val empty : 'a t
    val add : key -> 'a -> 'a t -> 'a t
    val add_to_list : key -> 'a -> 'a list t -> 'a list t
    val update : key -> ('a option -> 'a option) -> 'a t -> 'a t
    val singleton : key -> 'a -> 'a t
    val remove : key -> 'a t -> 'a t
    val merge :
      (key -> 'a option -> 'b option -> 'c option) -> 'a t -> 'b t -> 'c t
    val union : (key -> 'a -> 'a -> 'a option) -> 'a t -> 'a t -> 'a t
    val cardinal : 'a t -> int
    val bindings : 'a t -> (key * 'a) list
    val min_binding : 'a t -> key * 'a
    val min_binding_opt : 'a t -> (key * 'a) option
    val max_binding : 'a t -> key * 'a
    val max_binding_opt : 'a t -> (key * 'a) option
    val choose : 'a t -> key * 'a
    val choose_opt : 'a t -> (key * 'a) option
    val find : key -> 'a t -> 'a
    val find_opt : key -> 'a t -> 'a option
    val find_first : (key -> bool) -> 'a t -> key * 'a
    val find_first_opt : (key -> bool) -> 'a t -> (key * 'a) option
    val find_last : (key -> bool) -> 'a t -> key * 'a
    val find_last_opt : (key -> bool) -> 'a t -> (key * 'a) option
    val iter : (key -> 'a -> unit) -> 'a t -> unit
    val fold : (key -> 'a -> 'acc -> 'acc) -> 'a t -> 'acc -> 'acc
    val map : ('a -> 'b) -> 'a t -> 'b t
    val mapi : (key -> 'a -> 'b) -> 'a t -> 'b t
    val filter : (key -> 'a -> bool) -> 'a t -> 'a t
    val filter_map : (key -> 'a -> 'b option) -> 'a t -> 'b t
    val partition : (key -> 'a -> bool) -> 'a t -> 'a t * 'a t
    val split : key -> 'a t -> 'a t * 'a option * 'a t
    val is_empty : 'a t -> bool
    val mem : key -> 'a t -> bool
    val equal : ('a -> 'a -> bool) -> 'a t -> 'a t -> bool
    val compare : ('a -> 'a -> int) -> 'a t -> 'a t -> int
    val for_all : (key -> 'a -> bool) -> 'a t -> bool
    val exists : (key -> 'a -> bool) -> 'a t -> bool
    val to_list : 'a t -> (key * 'a) list
    val of_list : (key * 'a) list -> 'a t
    val to_seq : 'a t -> (key * 'a) Seq.t
    val to_rev_seq : 'a t -> (key * 'a) Seq.t
    val to_seq_from : key -> 'a t -> (key * 'a) Seq.t
    val add_seq : (key * 'a) Seq.t -> 'a t -> 'a t
    val of_seq : (key * 'a) Seq.t -> 'a t
  end
module UUIDSet :
  sig
    type elt = UUID.t
    type t
    val empty : t
    val add : elt -> t -> t
    val singleton : elt -> t
    val remove : elt -> t -> t
    val union : t -> t -> t
    val inter : t -> t -> t
    val disjoint : t -> t -> bool
    val diff : t -> t -> t
    val cardinal : t -> int
    val elements : t -> elt list
    val min_elt : t -> elt
    val min_elt_opt : t -> elt option
    val max_elt : t -> elt
    val max_elt_opt : t -> elt option
    val choose : t -> elt
    val choose_opt : t -> elt option
    val find : elt -> t -> elt
    val find_opt : elt -> t -> elt option
    val find_first : (elt -> bool) -> t -> elt
    val find_first_opt : (elt -> bool) -> t -> elt option
    val find_last : (elt -> bool) -> t -> elt
    val find_last_opt : (elt -> bool) -> t -> elt option
    val iter : (elt -> unit) -> t -> unit
    val fold : (elt -> 'acc -> 'acc) -> t -> 'acc -> 'acc
    val map : (elt -> elt) -> t -> t
    val filter : (elt -> bool) -> t -> t
    val filter_map : (elt -> elt option) -> t -> t
    val partition : (elt -> bool) -> t -> t * t
    val split : elt -> t -> t * bool * t
    val is_empty : t -> bool
    val mem : elt -> t -> bool
    val equal : t -> t -> bool
    val compare : t -> t -> int
    val subset : t -> t -> bool
    val for_all : (elt -> bool) -> t -> bool
    val exists : (elt -> bool) -> t -> bool
    val to_list : t -> elt list
    val of_list : elt list -> t
    val to_seq_from : elt -> t -> elt Seq.t
    val to_seq : t -> elt Seq.t
    val to_rev_seq : t -> elt Seq.t
    val add_seq : elt Seq.t -> t -> t
    val of_seq : elt Seq.t -> t
  end
exception NotReady of string
type 'a computation
type 'a value = [ `Exn of Exninfo.iexn | `Val of 'a ]
type fix_exn = Stateid.exn_info option
val create : fix_exn:fix_exn -> (unit -> 'a) -> 'a computation
val from_val : 'a -> 'a computation
type 'a assignment =
    [ `Comp of unit -> 'a | `Exn of Exninfo.iexn | `Val of 'a ]
val create_delegate :
  ?blocking:bool ->
  name:string -> fix_exn -> 'a computation * ('a assignment -> unit)
val replace : 'a computation -> 'a computation -> unit
val is_over : 'a computation -> bool
val is_exn : 'a computation -> bool
val peek_val : 'a computation -> 'a option
val uuid : 'a computation -> UUID.t
val chain : 'a computation -> ('a -> 'b) -> 'b computation
val force : 'a computation -> 'a
val compute : 'a computation -> 'a value
val print : ('a -> Pp.t) -> 'a computation -> Pp.t
val customize_not_ready_msg : (string -> Pp.t) -> unit
("DEBUG:rule", [Tag3 (("UUID", 713), 0, (Tag1 ([Tag1 (("t", 735), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("vernac/future.mli", 28, 1555, 1557), ("vernac/future.mli", 28, 1555, 1563), 0), 0, 0, 0, Tag1 ("Future", 0)), 1, 0); (("invalid", 736), ((Tag3 ((("t", 735)), 0, (0)), 100000000, 0, -102), 0, (("vernac/future.mli", 29, 1564, 1566), ("vernac/future.mli", 29, 1564, 1581), 0), 0, Tag1 ("Future", 1)), 0); (("compare", 737), ((Tag1 (0, (Tag3 ((("t", 735)), 0, (0)), 100000000, 0, -101), (Tag1 (0, (Tag3 ((("t", 735)), 0, (0)), 100000000, 0, -100), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -99), 0), 100000000, 0, -98), 0), 100000000, 0, -97), 0, (("vernac/future.mli", 31, 1583, 1585), ("vernac/future.mli", 31, 1583, 1612), 0), 0, Tag1 ("Future", 2)), 0); (("equal", 738), ((Tag1 (0, (Tag3 ((("t", 735)), 0, (0)), 100000000, 0, -96), (Tag1 (0, (Tag3 ((("t", 735)), 0, (0)), 100000000, 0, -95), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -94), 0), 100000000, 0, -93), 0), 100000000, 0, -92), 0, (("vernac/future.mli", 32, 1613, 1615), ("vernac/future.mli", 32, 1613, 1641), 0), 0, Tag1 ("Future", 3)), 0)]), 0, (("vernac/future.mli", 27, 1537, 1537), ("vernac/future.mli", 33, 1642, 1645), 0), Tag1 ("Future", 4)), 0, 0); Tag3 (("UUIDMap", 714), 0, (Tag1 ([Tag1 (("key", 739), (0, 0, 0, 1, ((Tag3 (Tag1 ((("UUID", 713)), "t"), 0, (0)), 100000000, 0, -431)), 0, 0, 0, 0, (("vernac/future.mli", 35, 1647, 1675), ("vernac/future.mli", 35, 1647, 1692), 0), 0, 0, 0, Tag1 ("Future", 5)), 1, 0); Tag1 (("t", 740), ([((("a")), 100000000, 0, -430)], 1, 0, 1, 0, [9], [2], 0, 0, (("map.mli", 73, 2902, 2906), ("map.mli", 73, 2902, 2917), 0), 0, 0, 0, Tag1 ("Stdlib__Map", 4)), 1, 0); (("empty", 741), ((Tag3 ((("t", 740)), [((("a")), 100000000, 0, -429)], (0)), 100000000, 0, -428), 0, (("map.mli", 76, 2977, 2981), ("map.mli", 76, 2977, 2996), 0), 0, Tag1 ("Stdlib__Map", 5)), 0); (("add", 742), ((Tag1 (0, (Tag3 ((("key", 739)), 0, (0)), 100000000, 0, -427), (Tag1 (0, ((("a")), 100000000, 0, -425), (Tag1 (0, (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -425)], (0)), 100000000, 0, -426), (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -425)], (0)), 100000000, 0, -424), 0), 100000000, 0, -423), 0), 100000000, 0, -422), 0), 100000000, 0, -421), 0, (("map.mli", 79, 3024, 3028), ("map.mli", 79, 3024, 3062), 0), 0, Tag1 ("Stdlib__Map", 6)), 0); (("add_to_list", 743), ((Tag1 (0, (Tag3 ((("key", 739)), 0, (0)), 100000000, 0, -420), (Tag1 (0, ((("a")), 100000000, 0, -417), (Tag1 (0, (Tag3 ((("t", 740)), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -417)], (0)), 100000000, 0, -419)], (0)), 100000000, 0, -418), (Tag3 ((("t", 740)), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -417)], (0)), 100000000, 0, -416)], (0)), 100000000, 0, -415), 0), 100000000, 0, -414), 0), 100000000, 0, -413), 0), 100000000, 0, -412), 0, (("map.mli", 88, 3503, 3507), ("map.mli", 88, 3503, 3559), 0), 0, Tag1 ("Stdlib__Map", 7)), 0); (("update", 744), ((Tag1 (0, (Tag3 ((("key", 739)), 0, (0)), 100000000, 0, -411), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -406)], (0)), 100000000, 0, -410), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -406)], (0)), 100000000, 0, -409), 0), 100000000, 0, -408), (Tag1 (0, (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -406)], (0)), 100000000, 0, -407), (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -406)], (0)), 100000000, 0, -405), 0), 100000000, 0, -404), 0), 100000000, 0, -403), 0), 100000000, 0, -402), 0, (("map.mli", 94, 3753, 3757), ("map.mli", 94, 3753, 3816), 0), 0, Tag1 ("Stdlib__Map", 8)), 0); (("singleton", 745), ((Tag1 (0, (Tag3 ((("key", 739)), 0, (0)), 100000000, 0, -401), (Tag1 (0, ((("a")), 100000000, 0, -400), (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -400)], (0)), 100000000, 0, -399), 0), 100000000, 0, -398), 0), 100000000, 0, -397), 0, (("map.mli", 106, 4436, 4440), ("map.mli", 106, 4436, 4472), 0), 0, Tag1 ("Stdlib__Map", 9)), 0); (("remove", 746), ((Tag1 (0, (Tag3 ((("key", 739)), 0, (0)), 100000000, 0, -396), (Tag1 (0, (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -394)], (0)), 100000000, 0, -395), (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -394)], (0)), 100000000, 0, -393), 0), 100000000, 0, -392), 0), 100000000, 0, -391), 0, (("map.mli", 111, 4594, 4598), ("map.mli", 111, 4594, 4629), 0), 0, Tag1 ("Stdlib__Map", 10)), 0); (("merge", 747), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 739)), 0, (0)), 100000000, 0, -390), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -383)], (0)), 100000000, 0, -389), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -381)], (0)), 100000000, 0, -388), (Tag3 ((Tag3 ("option", 10)), [((("c")), 100000000, 0, -379)], (0)), 100000000, 0, -387), 0), 100000000, 0, -386), 0), 100000000, 0, -385), 0), 100000000, 0, -384), (Tag1 (0, (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -383)], (0)), 100000000, 0, -382), (Tag1 (0, (Tag3 ((("t", 740)), [((("b")), 100000000, 0, -381)], (0)), 100000000, 0, -380), (Tag3 ((("t", 740)), [((("c")), 100000000, 0, -379)], (0)), 100000000, 0, -378), 0), 100000000, 0, -377), 0), 100000000, 0, -376), 0), 100000000, 0, -375), 0, (("map.mli", 118, 4950, 4954), ("map.mli", 120, 5019, 5045), 0), 0, Tag1 ("Stdlib__Map", 11)), 0); (("union", 748), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 739)), 0, (0)), 100000000, 0, -374), (Tag1 (0, ((("a")), 100000000, 0, -367), (Tag1 (0, ((("a")), 100000000, 0, -367), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -367)], (0)), 100000000, 0, -373), 0), 100000000, 0, -372), 0), 100000000, 0, -371), 0), 100000000, 0, -370), (Tag1 (0, (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -367)], (0)), 100000000, 0, -369), (Tag1 (0, (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -367)], (0)), 100000000, 0, -368), (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -367)], (0)), 100000000, 0, -366), 0), 100000000, 0, -365), 0), 100000000, 0, -364), 0), 100000000, 0, -363), 0, (("map.mli", 129, 5475, 5479), ("map.mli", 129, 5475, 5544), 0), 0, Tag1 ("Stdlib__Map", 12)), 0); (("cardinal", 749), ((Tag1 (0, (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -362)], (0)), 100000000, 0, -361), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -360), 0), 100000000, 0, -359), 0, (("map.mli", 142, 6061, 6065), ("map.mli", 142, 6061, 6090), 0), 0, Tag1 ("Stdlib__Map", 13)), 0); (("bindings", 750), ((Tag1 (0, (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -357)], (0)), 100000000, 0, -358), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("key", 739)), 0, (0)), 100000000, 0, -356); ((("a")), 100000000, 0, -357)]), 100000000, 0, -355)], (0)), 100000000, 0, -354), 0), 100000000, 0, -353), 0, (("map.mli", 148, 6197, 6201), ("map.mli", 148, 6197, 6238), 0), 0, Tag1 ("Stdlib__Map", 14)), 0); (("min_binding", 751), ((Tag1 (0, (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -351)], (0)), 100000000, 0, -352), (Tag2 ([(Tag3 ((("key", 739)), 0, (0)), 100000000, 0, -350); ((("a")), 100000000, 0, -351)]), 100000000, 0, -349), 0), 100000000, 0, -348), 0, (("map.mli", 155, 6495, 6499), ("map.mli", 155, 6495, 6534), 0), 0, Tag1 ("Stdlib__Map", 15)), 0); (("min_binding_opt", 752), ((Tag1 (0, (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -346)], (0)), 100000000, 0, -347), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("key", 739)), 0, (0)), 100000000, 0, -345); ((("a")), 100000000, 0, -346)]), 100000000, 0, -344)], (0)), 100000000, 0, -343), 0), 100000000, 0, -342), 0, (("map.mli", 161, 6727, 6731), ("map.mli", 161, 6727, 6777), 0), 0, Tag1 ("Stdlib__Map", 16)), 0); (("max_binding", 753), ((Tag1 (0, (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -340)], (0)), 100000000, 0, -341), (Tag2 ([(Tag3 ((("key", 739)), 0, (0)), 100000000, 0, -339); ((("a")), 100000000, 0, -340)]), 100000000, 0, -338), 0), 100000000, 0, -337), 0, (("map.mli", 167, 6961, 6965), ("map.mli", 167, 6961, 7000), 0), 0, Tag1 ("Stdlib__Map", 17)), 0); (("max_binding_opt", 754), ((Tag1 (0, (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -335)], (0)), 100000000, 0, -336), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("key", 739)), 0, (0)), 100000000, 0, -334); ((("a")), 100000000, 0, -335)]), 100000000, 0, -333)], (0)), 100000000, 0, -332), 0), 100000000, 0, -331), 0, (("map.mli", 172, 7128, 7132), ("map.mli", 172, 7128, 7178), 0), 0, Tag1 ("Stdlib__Map", 18)), 0); (("choose", 755), ((Tag1 (0, (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -329)], (0)), 100000000, 0, -330), (Tag2 ([(Tag3 ((("key", 739)), 0, (0)), 100000000, 0, -328); ((("a")), 100000000, 0, -329)]), 100000000, 0, -327), 0), 100000000, 0, -326), 0, (("map.mli", 177, 7310, 7314), ("map.mli", 177, 7310, 7344), 0), 0, Tag1 ("Stdlib__Map", 19)), 0); (("choose_opt", 756), ((Tag1 (0, (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -324)], (0)), 100000000, 0, -325), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("key", 739)), 0, (0)), 100000000, 0, -323); ((("a")), 100000000, 0, -324)]), 100000000, 0, -322)], (0)), 100000000, 0, -321), 0), 100000000, 0, -320), 0, (("map.mli", 183, 7562, 7566), ("map.mli", 183, 7562, 7607), 0), 0, Tag1 ("Stdlib__Map", 20)), 0); (("find", 757), ((Tag1 (0, (Tag3 ((("key", 739)), 0, (0)), 100000000, 0, -319), (Tag1 (0, (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -317)], (0)), 100000000, 0, -318), ((("a")), 100000000, 0, -317), 0), 100000000, 0, -316), 0), 100000000, 0, -315), 0, (("map.mli", 191, 7850, 7854), ("map.mli", 191, 7850, 7881), 0), 0, Tag1 ("Stdlib__Map", 21)), 0); (("find_opt", 758), ((Tag1 (0, (Tag3 ((("key", 739)), 0, (0)), 100000000, 0, -314), (Tag1 (0, (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -312)], (0)), 100000000, 0, -313), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -312)], (0)), 100000000, 0, -311), 0), 100000000, 0, -310), 0), 100000000, 0, -309), 0, (("map.mli", 195, 8006, 8010), ("map.mli", 195, 8006, 8048), 0), 0, Tag1 ("Stdlib__Map", 22)), 0); (("find_first", 759), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 739)), 0, (0)), 100000000, 0, -308), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -307), 0), 100000000, 0, -306), (Tag1 (0, (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -304)], (0)), 100000000, 0, -305), (Tag2 ([(Tag3 ((("key", 739)), 0, (0)), 100000000, 0, -303); ((("a")), 100000000, 0, -304)]), 100000000, 0, -302), 0), 100000000, 0, -301), 0), 100000000, 0, -300), 0, (("map.mli", 200, 8204, 8208), ("map.mli", 200, 8204, 8257), 0), 0, Tag1 ("Stdlib__Map", 23)), 0); (("find_first_opt", 760), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 739)), 0, (0)), 100000000, 0, -299), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -298), 0), 100000000, 0, -297), (Tag1 (0, (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -295)], (0)), 100000000, 0, -296), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("key", 739)), 0, (0)), 100000000, 0, -294); ((("a")), 100000000, 0, -295)]), 100000000, 0, -293)], (0)), 100000000, 0, -292), 0), 100000000, 0, -291), 0), 100000000, 0, -290), 0, (("map.mli", 212, 8743, 8747), ("map.mli", 212, 8743, 8809), 0), 0, Tag1 ("Stdlib__Map", 24)), 0); (("find_last", 761), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 739)), 0, (0)), 100000000, 0, -289), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -288), 0), 100000000, 0, -287), (Tag1 (0, (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -285)], (0)), 100000000, 0, -286), (Tag2 ([(Tag3 ((("key", 739)), 0, (0)), 100000000, 0, -284); ((("a")), 100000000, 0, -285)]), 100000000, 0, -283), 0), 100000000, 0, -282), 0), 100000000, 0, -281), 0, (("map.mli", 218, 9052, 9056), ("map.mli", 218, 9052, 9104), 0), 0, Tag1 ("Stdlib__Map", 25)), 0); (("find_last_opt", 762), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 739)), 0, (0)), 100000000, 0, -280), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -279), 0), 100000000, 0, -278), (Tag1 (0, (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -276)], (0)), 100000000, 0, -277), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("key", 739)), 0, (0)), 100000000, 0, -275); ((("a")), 100000000, 0, -276)]), 100000000, 0, -274)], (0)), 100000000, 0, -273), 0), 100000000, 0, -272), 0), 100000000, 0, -271), 0, (("map.mli", 224, 9334, 9338), ("map.mli", 224, 9334, 9399), 0), 0, Tag1 ("Stdlib__Map", 26)), 0); (("iter", 763), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 739)), 0, (0)), 100000000, 0, -270), (Tag1 (0, ((("a")), 100000000, 0, -266), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -269), 0), 100000000, 0, -268), 0), 100000000, 0, -267), (Tag1 (0, (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -266)], (0)), 100000000, 0, -265), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -264), 0), 100000000, 0, -263), 0), 100000000, 0, -262), 0, (("map.mli", 233, 9688, 9692), ("map.mli", 233, 9688, 9737), 0), 0, Tag1 ("Stdlib__Map", 27)), 0); (("fold", 764), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 739)), 0, (0)), 100000000, 0, -261), (Tag1 (0, ((("a")), 100000000, 0, -257), (Tag1 (0, ((("acc")), 100000000, 0, -255), ((("acc")), 100000000, 0, -255), 0), 100000000, 0, -260), 0), 100000000, 0, -259), 0), 100000000, 0, -258), (Tag1 (0, (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -257)], (0)), 100000000, 0, -256), (Tag1 (0, ((("acc")), 100000000, 0, -255), ((("acc")), 100000000, 0, -255), 0), 100000000, 0, -254), 0), 100000000, 0, -253), 0), 100000000, 0, -252), 0, (("map.mli", 239, 10018, 10022), ("map.mli", 240, 10032, 10089), 0), 0, Tag1 ("Stdlib__Map", 28)), 0); (("map", 765), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -250), ((("b")), 100000000, 0, -248), 0), 100000000, 0, -251), (Tag1 (0, (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -250)], (0)), 100000000, 0, -249), (Tag3 ((("t", 740)), [((("b")), 100000000, 0, -248)], (0)), 100000000, 0, -247), 0), 100000000, 0, -246), 0), 100000000, 0, -245), 0, (("map.mli", 247, 10338, 10342), ("map.mli", 247, 10338, 10377), 0), 0, Tag1 ("Stdlib__Map", 29)), 0); (("mapi", 766), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 739)), 0, (0)), 100000000, 0, -244), (Tag1 (0, ((("a")), 100000000, 0, -241), ((("b")), 100000000, 0, -239), 0), 100000000, 0, -243), 0), 100000000, 0, -242), (Tag1 (0, (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -241)], (0)), 100000000, 0, -240), (Tag3 ((("t", 740)), [((("b")), 100000000, 0, -239)], (0)), 100000000, 0, -238), 0), 100000000, 0, -237), 0), 100000000, 0, -236), 0, (("map.mli", 254, 10698, 10702), ("map.mli", 254, 10698, 10745), 0), 0, Tag1 ("Stdlib__Map", 30)), 0); (("filter", 767), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 739)), 0, (0)), 100000000, 0, -235), (Tag1 (0, ((("a")), 100000000, 0, -230), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -234), 0), 100000000, 0, -233), 0), 100000000, 0, -232), (Tag1 (0, (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -230)], (0)), 100000000, 0, -231), (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -230)], (0)), 100000000, 0, -229), 0), 100000000, 0, -228), 0), 100000000, 0, -227), 0, (("map.mli", 258, 10888, 10892), ("map.mli", 258, 10888, 10939), 0), 0, Tag1 ("Stdlib__Map", 31)), 0); (("filter_map", 768), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 739)), 0, (0)), 100000000, 0, -226), (Tag1 (0, ((("a")), 100000000, 0, -222), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -220)], (0)), 100000000, 0, -225), 0), 100000000, 0, -224), 0), 100000000, 0, -223), (Tag1 (0, (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -222)], (0)), 100000000, 0, -221), (Tag3 ((("t", 740)), [((("b")), 100000000, 0, -220)], (0)), 100000000, 0, -219), 0), 100000000, 0, -218), 0), 100000000, 0, -217), 0, (("map.mli", 266, 11264, 11268), ("map.mli", 266, 11264, 11324), 0), 0, Tag1 ("Stdlib__Map", 32)), 0); (("partition", 769), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 739)), 0, (0)), 100000000, 0, -216), (Tag1 (0, ((("a")), 100000000, 0, -210), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -215), 0), 100000000, 0, -214), 0), 100000000, 0, -213), (Tag1 (0, (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -210)], (0)), 100000000, 0, -212), (Tag2 ([(Tag3 ((("t", 740)), [((("a")), 100000000, 0, -210)], (0)), 100000000, 0, -209); (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -210)], (0)), 100000000, 0, -211)]), 100000000, 0, -208), 0), 100000000, 0, -207), 0), 100000000, 0, -206), 0, (("map.mli", 285, 12005, 12009), ("map.mli", 285, 12005, 12066), 0), 0, Tag1 ("Stdlib__Map", 33)), 0); (("split", 770), ((Tag1 (0, (Tag3 ((("key", 739)), 0, (0)), 100000000, 0, -205), (Tag1 (0, (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -201)], (0)), 100000000, 0, -204), (Tag2 ([(Tag3 ((("t", 740)), [((("a")), 100000000, 0, -201)], (0)), 100000000, 0, -200); (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -201)], (0)), 100000000, 0, -202); (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -201)], (0)), 100000000, 0, -203)]), 100000000, 0, -199), 0), 100000000, 0, -198), 0), 100000000, 0, -197), 0, (("map.mli", 292, 12324, 12328), ("map.mli", 292, 12324, 12377), 0), 0, Tag1 ("Stdlib__Map", 34)), 0); (("is_empty", 771), ((Tag1 (0, (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -196)], (0)), 100000000, 0, -195), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -194), 0), 100000000, 0, -193), 0, (("map.mli", 304, 12826, 12830), ("map.mli", 304, 12826, 12856), 0), 0, Tag1 ("Stdlib__Map", 35)), 0); (("mem", 772), ((Tag1 (0, (Tag3 ((("key", 739)), 0, (0)), 100000000, 0, -192), (Tag1 (0, (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -191)], (0)), 100000000, 0, -190), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -189), 0), 100000000, 0, -188), 0), 100000000, 0, -187), 0, (("map.mli", 307, 12905, 12909), ("map.mli", 307, 12905, 12937), 0), 0, Tag1 ("Stdlib__Map", 36)), 0); (("equal", 773), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -182), (Tag1 (0, ((("a")), 100000000, 0, -182), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -186), 0), 100000000, 0, -185), 0), 100000000, 0, -184), (Tag1 (0, (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -182)], (0)), 100000000, 0, -183), (Tag1 (0, (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -182)], (0)), 100000000, 0, -181), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -180), 0), 100000000, 0, -179), 0), 100000000, 0, -178), 0), 100000000, 0, -177), 0, (("map.mli", 311, 13041, 13045), ("map.mli", 311, 13041, 13098), 0), 0, Tag1 ("Stdlib__Map", 37)), 0); (("compare", 774), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -172), (Tag1 (0, ((("a")), 100000000, 0, -172), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -176), 0), 100000000, 0, -175), 0), 100000000, 0, -174), (Tag1 (0, (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -172)], (0)), 100000000, 0, -173), (Tag1 (0, (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -172)], (0)), 100000000, 0, -171), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -170), 0), 100000000, 0, -169), 0), 100000000, 0, -168), 0), 100000000, 0, -167), 0, (("map.mli", 317, 13349, 13353), ("map.mli", 317, 13349, 13406), 0), 0, Tag1 ("Stdlib__Map", 38)), 0); (("for_all", 775), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 739)), 0, (0)), 100000000, 0, -166), (Tag1 (0, ((("a")), 100000000, 0, -162), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -165), 0), 100000000, 0, -164), 0), 100000000, 0, -163), (Tag1 (0, (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -162)], (0)), 100000000, 0, -161), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -160), 0), 100000000, 0, -159), 0), 100000000, 0, -158), 0, (("map.mli", 321, 13561, 13565), ("map.mli", 321, 13561, 13613), 0), 0, Tag1 ("Stdlib__Map", 39)), 0); (("exists", 776), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 739)), 0, (0)), 100000000, 0, -157), (Tag1 (0, ((("a")), 100000000, 0, -153), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -156), 0), 100000000, 0, -155), 0), 100000000, 0, -154), (Tag1 (0, (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -153)], (0)), 100000000, 0, -152), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -151), 0), 100000000, 0, -150), 0), 100000000, 0, -149), 0, (("map.mli", 326, 13733, 13737), ("map.mli", 326, 13733, 13784), 0), 0, Tag1 ("Stdlib__Map", 40)), 0); (("to_list", 777), ((Tag1 (0, (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -147)], (0)), 100000000, 0, -148), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("key", 739)), 0, (0)), 100000000, 0, -146); ((("a")), 100000000, 0, -147)]), 100000000, 0, -145)], (0)), 100000000, 0, -144), 0), 100000000, 0, -143), 0, (("map.mli", 333, 13947, 13951), ("map.mli", 333, 13947, 13988), 0), 0, Tag1 ("Stdlib__Map", 41)), 0); (("of_list", 778), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("key", 739)), 0, (0)), 100000000, 0, -142); ((("a")), 100000000, 0, -139)]), 100000000, 0, -141)], (0)), 100000000, 0, -140), (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -139)], (0)), 100000000, 0, -138), 0), 100000000, 0, -137), 0, (("map.mli", 337, 14052, 14056), ("map.mli", 337, 14052, 14093), 0), 0, Tag1 ("Stdlib__Map", 42)), 0); (("to_seq", 779), ((Tag1 (0, (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -135)], (0)), 100000000, 0, -136), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 739)), 0, (0)), 100000000, 0, -134); ((("a")), 100000000, 0, -135)]), 100000000, 0, -133)], (0)), 100000000, 0, -132), 0), 100000000, 0, -131), 0, (("map.mli", 343, 14271, 14275), ("map.mli", 343, 14271, 14312), 0), 0, Tag1 ("Stdlib__Map", 43)), 0); (("to_rev_seq", 780), ((Tag1 (0, (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -129)], (0)), 100000000, 0, -130), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 739)), 0, (0)), 100000000, 0, -128); ((("a")), 100000000, 0, -129)]), 100000000, 0, -127)], (0)), 100000000, 0, -126), 0), 100000000, 0, -125), 0, (("map.mli", 347, 14398, 14402), ("map.mli", 347, 14398, 14443), 0), 0, Tag1 ("Stdlib__Map", 44)), 0); (("to_seq_from", 781), ((Tag1 (0, (Tag3 ((("key", 739)), 0, (0)), 100000000, 0, -124), (Tag1 (0, (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -122)], (0)), 100000000, 0, -123), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 739)), 0, (0)), 100000000, 0, -121); ((("a")), 100000000, 0, -122)]), 100000000, 0, -120)], (0)), 100000000, 0, -119), 0), 100000000, 0, -118), 0), 100000000, 0, -117), 0, (("map.mli", 351, 14530, 14534), ("map.mli", 351, 14530, 14583), 0), 0, Tag1 ("Stdlib__Map", 45)), 0); (("add_seq", 782), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 739)), 0, (0)), 100000000, 0, -116); ((("a")), 100000000, 0, -112)]), 100000000, 0, -115)], (0)), 100000000, 0, -114), (Tag1 (0, (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -112)], (0)), 100000000, 0, -113), (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -112)], (0)), 100000000, 0, -111), 0), 100000000, 0, -110), 0), 100000000, 0, -109), 0, (("map.mli", 356, 14738, 14742), ("map.mli", 356, 14738, 14788), 0), 0, Tag1 ("Stdlib__Map", 46)), 0); (("of_seq", 783), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 739)), 0, (0)), 100000000, 0, -108); ((("a")), 100000000, 0, -105)]), 100000000, 0, -107)], (0)), 100000000, 0, -106), (Tag3 ((("t", 740)), [((("a")), 100000000, 0, -105)], (0)), 100000000, 0, -104), 0), 100000000, 0, -103), 0, (("map.mli", 360, 14866, 14870), ("map.mli", 360, 14866, 14907), 0), 0, Tag1 ("Stdlib__Map", 47)), 0)]), 0, (("vernac/future.mli", 35, 1647, 1647), ("vernac/future.mli", 35, 1647, 1692), 0), Tag1 ("Future", 6)), 0, 0); Tag3 (("UUIDSet", 715), 0, (Tag1 ([Tag1 (("elt", 784), (0, 0, 0, 1, ((Tag3 (Tag1 ((("UUID", 713)), "t"), 0, (0)), 100000000, 0, -658)), 0, 0, 0, 0, (("vernac/future.mli", 36, 1693, 1721), ("vernac/future.mli", 36, 1693, 1738), 0), 0, 0, 0, Tag1 ("Future", 7)), 1, 0); Tag1 (("t", 785), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("set.mli", 74, 2901, 2905), ("set.mli", 74, 2901, 2911), 0), 0, 0, 0, Tag1 ("Stdlib__Set", 4)), 1, 0); (("empty", 786), ((Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -657), 0, (("set.mli", 77, 2942, 2946), ("set.mli", 77, 2942, 2958), 0), 0, Tag1 ("Stdlib__Set", 5)), 0); (("add", 787), ((Tag1 (0, (Tag3 ((("elt", 784)), 0, (0)), 100000000, 0, -656), (Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -655), (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -654), 0), 100000000, 0, -653), 0), 100000000, 0, -652), 0, (("set.mli", 80, 2986, 2990), ("set.mli", 80, 2986, 3012), 0), 0, Tag1 ("Stdlib__Set", 6)), 0); (("singleton", 788), ((Tag1 (0, (Tag3 ((("elt", 784)), 0, (0)), 100000000, 0, -651), (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -650), 0), 100000000, 0, -649), 0, (("set.mli", 86, 3278, 3282), ("set.mli", 86, 3278, 3305), 0), 0, Tag1 ("Stdlib__Set", 7)), 0); (("remove", 789), ((Tag1 (0, (Tag3 ((("elt", 784)), 0, (0)), 100000000, 0, -648), (Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -647), (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -646), 0), 100000000, 0, -645), 0), 100000000, 0, -644), 0, (("set.mli", 89, 3381, 3385), ("set.mli", 89, 3381, 3410), 0), 0, Tag1 ("Stdlib__Set", 8)), 0); (("union", 790), ((Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -643), (Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -642), (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -641), 0), 100000000, 0, -640), 0), 100000000, 0, -639), 0, (("set.mli", 95, 3677, 3681), ("set.mli", 95, 3677, 3703), 0), 0, Tag1 ("Stdlib__Set", 9)), 0); (("inter", 791), ((Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -638), (Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -637), (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -636), 0), 100000000, 0, -635), 0), 100000000, 0, -634), 0, (("set.mli", 98, 3727, 3731), ("set.mli", 98, 3727, 3753), 0), 0, Tag1 ("Stdlib__Set", 10)), 0); (("disjoint", 792), ((Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -633), (Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -632), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -631), 0), 100000000, 0, -630), 0), 100000000, 0, -629), 0, (("set.mli", 101, 3784, 3788), ("set.mli", 101, 3784, 3816), 0), 0, Tag1 ("Stdlib__Set", 11)), 0); (("diff", 793), ((Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -628), (Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -627), (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -626), 0), 100000000, 0, -625), 0), 100000000, 0, -624), 0, (("set.mli", 105, 3880, 3884), ("set.mli", 105, 3880, 3905), 0), 0, Tag1 ("Stdlib__Set", 12)), 0); (("cardinal", 794), ((Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -623), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -622), 0), 100000000, 0, -621), 0, (("set.mli", 109, 4007, 4011), ("set.mli", 109, 4007, 4033), 0), 0, Tag1 ("Stdlib__Set", 13)), 0); (("elements", 795), ((Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -620), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 784)), 0, (0)), 100000000, 0, -619)], (0)), 100000000, 0, -618), 0), 100000000, 0, -617), 0, (("set.mli", 114, 4120, 4124), ("set.mli", 114, 4120, 4151), 0), 0, Tag1 ("Stdlib__Set", 14)), 0); (("min_elt", 796), ((Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -616), (Tag3 ((("elt", 784)), 0, (0)), 100000000, 0, -615), 0), 100000000, 0, -614), 0, (("set.mli", 120, 4380, 4384), ("set.mli", 120, 4380, 4405), 0), 0, Tag1 ("Stdlib__Set", 15)), 0); (("min_elt_opt", 797), ((Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -613), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 784)), 0, (0)), 100000000, 0, -612)], (0)), 100000000, 0, -611), 0), 100000000, 0, -610), 0, (("set.mli", 125, 4567, 4571), ("set.mli", 125, 4567, 4603), 0), 0, Tag1 ("Stdlib__Set", 16)), 0); (("max_elt", 798), ((Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -609), (Tag3 ((("elt", 784)), 0, (0)), 100000000, 0, -608), 0), 100000000, 0, -607), 0, (("set.mli", 131, 4774, 4778), ("set.mli", 131, 4774, 4799), 0), 0, Tag1 ("Stdlib__Set", 17)), 0); (("max_elt_opt", 799), ((Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -606), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 784)), 0, (0)), 100000000, 0, -605)], (0)), 100000000, 0, -604), 0), 100000000, 0, -603), 0, (("set.mli", 135, 4890, 4894), ("set.mli", 135, 4890, 4926), 0), 0, Tag1 ("Stdlib__Set", 18)), 0); (("choose", 800), ((Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -602), (Tag3 ((("elt", 784)), 0, (0)), 100000000, 0, -601), 0), 100000000, 0, -600), 0, (("set.mli", 140, 5041, 5045), ("set.mli", 140, 5041, 5065), 0), 0, Tag1 ("Stdlib__Set", 19)), 0); (("choose_opt", 801), ((Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -599), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 784)), 0, (0)), 100000000, 0, -598)], (0)), 100000000, 0, -597), 0), 100000000, 0, -596), 0, (("set.mli", 145, 5263, 5267), ("set.mli", 145, 5263, 5298), 0), 0, Tag1 ("Stdlib__Set", 20)), 0); (("find", 802), ((Tag1 (0, (Tag3 ((("elt", 784)), 0, (0)), 100000000, 0, -595), (Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -594), (Tag3 ((("elt", 784)), 0, (0)), 100000000, 0, -593), 0), 100000000, 0, -592), 0), 100000000, 0, -591), 0, (("set.mli", 153, 5541, 5549), ("set.mli", 153, 5541, 5574), 0), 0, Tag1 ("Stdlib__Set", 21)), 0); (("find_opt", 803), ((Tag1 (0, (Tag3 ((("elt", 784)), 0, (0)), 100000000, 0, -590), (Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -589), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 784)), 0, (0)), 100000000, 0, -588)], (0)), 100000000, 0, -587), 0), 100000000, 0, -586), 0), 100000000, 0, -585), 0, (("set.mli", 159, 5752, 5756), ("set.mli", 159, 5752, 5792), 0), 0, Tag1 ("Stdlib__Set", 22)), 0); (("find_first", 804), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 784)), 0, (0)), 100000000, 0, -584), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -583), 0), 100000000, 0, -582), (Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -581), (Tag3 ((("elt", 784)), 0, (0)), 100000000, 0, -580), 0), 100000000, 0, -579), 0), 100000000, 0, -578), 0, (("set.mli", 165, 5963, 5967), ("set.mli", 165, 5963, 6008), 0), 0, Tag1 ("Stdlib__Set", 23)), 0); (("find_first_opt", 805), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 784)), 0, (0)), 100000000, 0, -577), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -576), 0), 100000000, 0, -575), (Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -574), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 784)), 0, (0)), 100000000, 0, -573)], (0)), 100000000, 0, -572), 0), 100000000, 0, -571), 0), 100000000, 0, -570), 0, (("set.mli", 177, 6482, 6486), ("set.mli", 177, 6482, 6538), 0), 0, Tag1 ("Stdlib__Set", 24)), 0); (("find_last", 806), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 784)), 0, (0)), 100000000, 0, -569), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -568), 0), 100000000, 0, -567), (Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -566), (Tag3 ((("elt", 784)), 0, (0)), 100000000, 0, -565), 0), 100000000, 0, -564), 0), 100000000, 0, -563), 0, (("set.mli", 184, 6779, 6783), ("set.mli", 184, 6779, 6823), 0), 0, Tag1 ("Stdlib__Set", 25)), 0); (("find_last_opt", 807), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 784)), 0, (0)), 100000000, 0, -562), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -561), 0), 100000000, 0, -560), (Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -559), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 784)), 0, (0)), 100000000, 0, -558)], (0)), 100000000, 0, -557), 0), 100000000, 0, -556), 0), 100000000, 0, -555), 0, (("set.mli", 190, 7044, 7048), ("set.mli", 190, 7044, 7099), 0), 0, Tag1 ("Stdlib__Set", 26)), 0); (("iter", 808), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 784)), 0, (0)), 100000000, 0, -554), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -553), 0), 100000000, 0, -552), (Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -551), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -550), 0), 100000000, 0, -549), 0), 100000000, 0, -548), 0, (("set.mli", 198, 7371, 7375), ("set.mli", 198, 7371, 7411), 0), 0, Tag1 ("Stdlib__Set", 27)), 0); (("fold", 809), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 784)), 0, (0)), 100000000, 0, -547), (Tag1 (0, ((("acc")), 100000000, 0, -543), ((("acc")), 100000000, 0, -543), 0), 100000000, 0, -546), 0), 100000000, 0, -545), (Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -544), (Tag1 (0, ((("acc")), 100000000, 0, -543), ((("acc")), 100000000, 0, -543), 0), 100000000, 0, -542), 0), 100000000, 0, -541), 0), 100000000, 0, -540), 0, (("set.mli", 203, 7616, 7620), ("set.mli", 203, 7616, 7672), 0), 0, Tag1 ("Stdlib__Set", 28)), 0); (("map", 810), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 784)), 0, (0)), 100000000, 0, -539), (Tag3 ((("elt", 784)), 0, (0)), 100000000, 0, -538), 0), 100000000, 0, -537), (Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -536), (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -535), 0), 100000000, 0, -534), 0), 100000000, 0, -533), 0, (("set.mli", 209, 7860, 7864), ("set.mli", 209, 7860, 7895), 0), 0, Tag1 ("Stdlib__Set", 29)), 0); (("filter", 811), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 784)), 0, (0)), 100000000, 0, -532), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -531), 0), 100000000, 0, -530), (Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -529), (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -528), 0), 100000000, 0, -527), 0), 100000000, 0, -526), 0, (("set.mli", 221, 8372, 8376), ("set.mli", 221, 8372, 8411), 0), 0, Tag1 ("Stdlib__Set", 30)), 0); (("filter_map", 812), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 784)), 0, (0)), 100000000, 0, -525), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 784)), 0, (0)), 100000000, 0, -524)], (0)), 100000000, 0, -523), 0), 100000000, 0, -522), (Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -521), (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -520), 0), 100000000, 0, -519), 0), 100000000, 0, -518), 0, (("set.mli", 228, 8710, 8714), ("set.mli", 228, 8710, 8759), 0), 0, Tag1 ("Stdlib__Set", 31)), 0); (("partition", 813), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 784)), 0, (0)), 100000000, 0, -517), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -516), 0), 100000000, 0, -515), (Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -514), (Tag2 ([(Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -512); (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -513)]), 100000000, 0, -511), 0), 100000000, 0, -510), 0), 100000000, 0, -509), 0, (("set.mli", 243, 9275, 9279), ("set.mli", 243, 9275, 9321), 0), 0, Tag1 ("Stdlib__Set", 32)), 0); (("split", 814), ((Tag1 (0, (Tag3 ((("elt", 784)), 0, (0)), 100000000, 0, -508), (Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -507), (Tag2 ([(Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -504); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -505); (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -506)]), 100000000, 0, -503), 0), 100000000, 0, -502), 0), 100000000, 0, -501), 0, (("set.mli", 249, 9562, 9566), ("set.mli", 249, 9562, 9601), 0), 0, Tag1 ("Stdlib__Set", 33)), 0); (("is_empty", 815), ((Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -500), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -499), 0), 100000000, 0, -498), 0, (("set.mli", 260, 10020, 10024), ("set.mli", 260, 10020, 10047), 0), 0, Tag1 ("Stdlib__Set", 34)), 0); (("mem", 816), ((Tag1 (0, (Tag3 ((("elt", 784)), 0, (0)), 100000000, 0, -497), (Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -496), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -495), 0), 100000000, 0, -494), 0), 100000000, 0, -493), 0, (("set.mli", 263, 10096, 10100), ("set.mli", 263, 10096, 10125), 0), 0, Tag1 ("Stdlib__Set", 35)), 0); (("equal", 817), ((Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -492), (Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -491), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -490), 0), 100000000, 0, -489), 0), 100000000, 0, -488), 0, (("set.mli", 266, 10190, 10194), ("set.mli", 266, 10190, 10219), 0), 0, Tag1 ("Stdlib__Set", 36)), 0); (("compare", 818), ((Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -487), (Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -486), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -485), 0), 100000000, 0, -484), 0), 100000000, 0, -483), 0, (("set.mli", 270, 10335, 10339), ("set.mli", 270, 10335, 10365), 0), 0, Tag1 ("Stdlib__Set", 37)), 0); (("subset", 819), ((Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -482), (Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -481), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -480), 0), 100000000, 0, -479), 0), 100000000, 0, -478), 0, (("set.mli", 274, 10476, 10480), ("set.mli", 274, 10476, 10506), 0), 0, Tag1 ("Stdlib__Set", 38)), 0); (("for_all", 820), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 784)), 0, (0)), 100000000, 0, -477), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -476), 0), 100000000, 0, -475), (Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -474), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -473), 0), 100000000, 0, -472), 0), 100000000, 0, -471), 0, (("set.mli", 278, 10598, 10602), ("set.mli", 278, 10598, 10641), 0), 0, Tag1 ("Stdlib__Set", 39)), 0); (("exists", 821), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 784)), 0, (0)), 100000000, 0, -470), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -469), 0), 100000000, 0, -468), (Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -467), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -466), 0), 100000000, 0, -465), 0), 100000000, 0, -464), 0, (("set.mli", 282, 10737, 10741), ("set.mli", 282, 10737, 10779), 0), 0, Tag1 ("Stdlib__Set", 40)), 0); (("to_list", 822), ((Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -463), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 784)), 0, (0)), 100000000, 0, -462)], (0)), 100000000, 0, -461), 0), 100000000, 0, -460), 0, (("set.mli", 288, 10922, 10926), ("set.mli", 288, 10922, 10953), 0), 0, Tag1 ("Stdlib__Set", 41)), 0); (("of_list", 823), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 784)), 0, (0)), 100000000, 0, -459)], (0)), 100000000, 0, -458), (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -457), 0), 100000000, 0, -456), 0, (("set.mli", 292, 11017, 11021), ("set.mli", 292, 11017, 11047), 0), 0, Tag1 ("Stdlib__Set", 42)), 0); (("to_seq_from", 824), ((Tag1 (0, (Tag3 ((("elt", 784)), 0, (0)), 100000000, 0, -455), (Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -454), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 784)), 0, (0)), 100000000, 0, -453)], (0)), 100000000, 0, -452), 0), 100000000, 0, -451), 0), 100000000, 0, -450), 0, (("set.mli", 298, 11268, 11272), ("set.mli", 298, 11268, 11311), 0), 0, Tag1 ("Stdlib__Set", 43)), 0); (("to_seq", 825), ((Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -449), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 784)), 0, (0)), 100000000, 0, -448)], (0)), 100000000, 0, -447), 0), 100000000, 0, -446), 0, (("set.mli", 303, 11453, 11457), ("set.mli", 303, 11453, 11484), 0), 0, Tag1 ("Stdlib__Set", 44)), 0); (("to_rev_seq", 826), ((Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -445), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 784)), 0, (0)), 100000000, 0, -444)], (0)), 100000000, 0, -443), 0), 100000000, 0, -442), 0, (("set.mli", 307, 11562, 11566), ("set.mli", 307, 11562, 11597), 0), 0, Tag1 ("Stdlib__Set", 45)), 0); (("add_seq", 827), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 784)), 0, (0)), 100000000, 0, -441)], (0)), 100000000, 0, -440), (Tag1 (0, (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -439), (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -438), 0), 100000000, 0, -437), 0), 100000000, 0, -436), 0, (("set.mli", 311, 11676, 11680), ("set.mli", 311, 11676, 11713), 0), 0, Tag1 ("Stdlib__Set", 46)), 0); (("of_seq", 828), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 784)), 0, (0)), 100000000, 0, -435)], (0)), 100000000, 0, -434), (Tag3 ((("t", 785)), 0, (0)), 100000000, 0, -433), 0), 100000000, 0, -432), 0, (("set.mli", 315, 11791, 11795), ("set.mli", 315, 11791, 11822), 0), 0, Tag1 ("Stdlib__Set", 47)), 0)]), 0, (("vernac/future.mli", 36, 1693, 1693), ("vernac/future.mli", 36, 1693, 1738), 0), Tag1 ("Future", 8)), 0, 0); Tag2 (("NotReady", 716), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -91)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Future", 9)), 2, 0); Tag1 (("computation", 717), ([((("a")), 100000000, 0, -90)], 1, 0, 1, 0, [7], [2], 0, 0, (("vernac/future.mli", 40, 1770, 1770), ("vernac/future.mli", 40, 1770, 1789), 0), 0, 0, 0, Tag1 ("Future", 10)), 1, 0); Tag1 (("value", 718), ([((("a")), 100000000, 0, -89)], 1, 0, 1, ((Tag8 (([("Exn", (((Tag3 (Tag1 ((Tag2 ("Exninfo")), "iexn"), 0, (0)), 100000000, 0, -88)))); ("Val", ((((("a")), 100000000, 0, -89))))], (0, 100000000, 0, -87), 1, 0, 0)), 100000000, 0, -86)), [25], [0], 0, 0, (("vernac/future.mli", 41, 1790, 1790), ("vernac/future.mli", 41, 1790, 1843), 0), 0, 0, 0, Tag1 ("Future", 11)), 1, 0); Tag1 (("fix_exn", 719), (0, 0, 0, 1, ((Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Stateid")), "exn_info"), 0, (0)), 100000000, 0, -85)], (0)), 100000000, 0, -84)), 0, 0, 0, 0, (("vernac/future.mli", 43, 1845, 1845), ("vernac/future.mli", 43, 1845, 1883), 0), 0, 0, 0, Tag1 ("Future", 12)), 1, 0); (("create", 720), ((Tag1 (("fix_exn"), (Tag3 ((("fix_exn", 719)), 0, (0)), 100000000, 0, -83), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -82), ((("a")), 100000000, 0, -80), 0), 100000000, 0, -81), (Tag3 ((("computation", 717)), [((("a")), 100000000, 0, -80)], (0)), 100000000, 0, -79), 0), 100000000, 0, -78), 0), 100000000, 0, -77), 0, (("vernac/future.mli", 51, 2308, 2308), ("vernac/future.mli", 51, 2308, 2370), 0), 0, Tag1 ("Future", 13)), 0); (("from_val", 721), ((Tag1 (0, ((("a")), 100000000, 0, -76), (Tag3 ((("computation", 717)), [((("a")), 100000000, 0, -76)], (0)), 100000000, 0, -75), 0), 100000000, 0, -74), 0, (("vernac/future.mli", 55, 2502, 2502), ("vernac/future.mli", 55, 2502, 2537), 0), 0, Tag1 ("Future", 14)), 0); Tag1 (("assignment", 722), ([((("a")), 100000000, 0, -72)], 1, 0, 1, ((Tag8 (([("Comp", (((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -73), ((("a")), 100000000, 0, -72), 0), 100000000, 0, -71)))); ("Exn", (((Tag3 (Tag1 ((Tag2 ("Exninfo")), "iexn"), 0, (0)), 100000000, 0, -70)))); ("Val", ((((("a")), 100000000, 0, -72))))], (0, 100000000, 0, -69), 1, 0, 0)), 100000000, 0, -68)), [25], [0], 0, 0, (("vernac/future.mli", 60, 2688, 2688), ("vernac/future.mli", 60, 2688, 2769), 0), 0, 0, 0, Tag1 ("Future", 15)), 1, 0); (("create_delegate", 723), ((Tag1 (Tag1 ("blocking"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -67)], (0)), 100000000, 0, -66), (Tag1 (("name"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -65), (Tag1 (0, (Tag3 ((("fix_exn", 719)), 0, (0)), 100000000, 0, -64), (Tag2 ([(Tag3 ((("computation", 717)), [((("a")), 100000000, 0, -60)], (0)), 100000000, 0, -59); (Tag1 (0, (Tag3 ((("assignment", 722)), [((("a")), 100000000, 0, -60)], (0)), 100000000, 0, -63), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -62), 0), 100000000, 0, -61)]), 100000000, 0, -58), 0), 100000000, 0, -57), 0), 100000000, 0, -56), 0), 100000000, 0, -55), 0, (("vernac/future.mli", 61, 2770, 2770), ("vernac/future.mli", 63, 2827, 2880), 0), 0, Tag1 ("Future", 16)), 0); (("replace", 724), ((Tag1 (0, (Tag3 ((("computation", 717)), [((("a")), 100000000, 0, -53)], (0)), 100000000, 0, -54), (Tag1 (0, (Tag3 ((("computation", 717)), [((("a")), 100000000, 0, -53)], (0)), 100000000, 0, -52), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -51), 0), 100000000, 0, -50), 0), 100000000, 0, -49), 0, (("vernac/future.mli", 66, 2947, 2947), ("vernac/future.mli", 66, 2947, 3001), 0), 0, Tag1 ("Future", 17)), 0); (("is_over", 725), ((Tag1 (0, (Tag3 ((("computation", 717)), [((("a")), 100000000, 0, -48)], (0)), 100000000, 0, -47), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -46), 0), 100000000, 0, -45), 0, (("vernac/future.mli", 69, 3031, 3031), ("vernac/future.mli", 69, 3031, 3067), 0), 0, Tag1 ("Future", 18)), 0); (("is_exn", 726), ((Tag1 (0, (Tag3 ((("computation", 717)), [((("a")), 100000000, 0, -44)], (0)), 100000000, 0, -43), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -42), 0), 100000000, 0, -41), 0, (("vernac/future.mli", 70, 3068, 3068), ("vernac/future.mli", 70, 3068, 3103), 0), 0, Tag1 ("Future", 19)), 0); (("peek_val", 727), ((Tag1 (0, (Tag3 ((("computation", 717)), [((("a")), 100000000, 0, -39)], (0)), 100000000, 0, -40), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -39)], (0)), 100000000, 0, -38), 0), 100000000, 0, -37), 0, (("vernac/future.mli", 71, 3104, 3104), ("vernac/future.mli", 71, 3104, 3146), 0), 0, Tag1 ("Future", 20)), 0); (("uuid", 728), ((Tag1 (0, (Tag3 ((("computation", 717)), [((("a")), 100000000, 0, -36)], (0)), 100000000, 0, -35), (Tag3 (Tag1 ((("UUID", 713)), "t"), 0, (0)), 100000000, 0, -34), 0), 100000000, 0, -33), 0, (("vernac/future.mli", 72, 3147, 3147), ("vernac/future.mli", 72, 3147, 3182), 0), 0, Tag1 ("Future", 21)), 0); (("chain", 729), ((Tag1 (0, (Tag3 ((("computation", 717)), [((("a")), 100000000, 0, -31)], (0)), 100000000, 0, -32), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -31), ((("b")), 100000000, 0, -29), 0), 100000000, 0, -30), (Tag3 ((("computation", 717)), [((("b")), 100000000, 0, -29)], (0)), 100000000, 0, -28), 0), 100000000, 0, -27), 0), 100000000, 0, -26), 0, (("vernac/future.mli", 78, 3349, 3349), ("vernac/future.mli", 78, 3349, 3407), 0), 0, Tag1 ("Future", 22)), 0); (("force", 730), ((Tag1 (0, (Tag3 ((("computation", 717)), [((("a")), 100000000, 0, -24)], (0)), 100000000, 0, -25), ((("a")), 100000000, 0, -24), 0), 100000000, 0, -23), 0, (("vernac/future.mli", 81, 3437, 3437), ("vernac/future.mli", 81, 3437, 3469), 0), 0, Tag1 ("Future", 23)), 0); (("compute", 731), ((Tag1 (0, (Tag3 ((("computation", 717)), [((("a")), 100000000, 0, -21)], (0)), 100000000, 0, -22), (Tag3 ((("value", 718)), [((("a")), 100000000, 0, -21)], (0)), 100000000, 0, -20), 0), 100000000, 0, -19), 0, (("vernac/future.mli", 82, 3470, 3470), ("vernac/future.mli", 82, 3470, 3510), 0), 0, Tag1 ("Future", 24)), 0); (("print", 732), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -16), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -18), 0), 100000000, 0, -17), (Tag1 (0, (Tag3 ((("computation", 717)), [((("a")), 100000000, 0, -16)], (0)), 100000000, 0, -15), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -14), 0), 100000000, 0, -13), 0), 100000000, 0, -12), 0, (("vernac/future.mli", 85, 3580, 3580), ("vernac/future.mli", 85, 3580, 3630), 0), 0, Tag1 ("Future", 25)), 0); (("customize_not_ready_msg", 733), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -11), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -10), 0), 100000000, 0, -9), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8), 0), 100000000, 0, -7), 0, (("vernac/future.mli", 87, 3632, 3632), ("vernac/future.mli", 87, 3632, 3686), 0), 0, Tag1 ("Future", 26)), 0); (("customize_not_here_msg", 734), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -5), 0), 100000000, 0, -4), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("vernac/future.mli", 88, 3687, 3687), ("vernac/future.mli", 88, 3687, 3740), 0), 0, Tag1 ("Future", 27)), 0)], "Future", [("Future", ("\158b\028\190\203\016U\128\195O\140\249\240\129\252s")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Stateid", ("\183\165\247\166~\005\017.\179f.\178n\255(\137")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
val customize_not_here_msg : (string -> Pp.t) -> unit

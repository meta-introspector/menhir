module Const :
  sig
    module Source :
      sig
        val file : string
        val command_line : string
        val path : string
        val ocamlfind_query : string
        val ocamldep : string
        val target_pattern : string
        val builtin : string
        val configuration : string
        val plugin_tag : string
      end
  end
module Loc :
  sig
    type source = string
    type location = source * Lexing.position * Lexing.position
    val print_loc : Format.formatter -> location -> unit
    val print_loc_option : Format.formatter -> location option -> unit
    val of_lexbuf : source -> Lexing.lexbuf -> location
  end
module Discard_printf :
  sig val discard_printf : ('a, Format.formatter, unit) format -> 'a end
module Signatures :
  sig
    module type OrderedTypePrintable =
      sig
        type t
        val compare : t -> t -> int
        val print : Format.formatter -> t -> unit
      end
    module type SET =
      sig
        type elt
        type t
        val empty : t
        val add : elt -> t -> t
        val singleton : elt -> t
        val remove : elt -> t -> t
        val union : t -> t -> t
        val inter : t -> t -> t
        val disjoint : t -> t -> bool
        val diff : t -> t -> t
        val cardinal : t -> int
        val elements : t -> elt list
        val min_elt : t -> elt
        val min_elt_opt : t -> elt option
        val max_elt : t -> elt
        val max_elt_opt : t -> elt option
        val choose : t -> elt
        val choose_opt : t -> elt option
        val find : elt -> t -> elt
        val find_opt : elt -> t -> elt option
        val find_first : (elt -> bool) -> t -> elt
        val find_first_opt : (elt -> bool) -> t -> elt option
        val find_last : (elt -> bool) -> t -> elt
        val find_last_opt : (elt -> bool) -> t -> elt option
        val iter : (elt -> unit) -> t -> unit
        val fold : (elt -> 'acc -> 'acc) -> t -> 'acc -> 'acc
        val filter : (elt -> bool) -> t -> t
        val filter_map : (elt -> elt option) -> t -> t
        val partition : (elt -> bool) -> t -> t * t
        val split : elt -> t -> t * bool * t
        val is_empty : t -> bool
        val mem : elt -> t -> bool
        val equal : t -> t -> bool
        val compare : t -> t -> int
        val subset : t -> t -> bool
        val for_all : (elt -> bool) -> t -> bool
        val exists : (elt -> bool) -> t -> bool
        val to_list : t -> elt list
        val to_seq_from : elt -> t -> elt Seq.t
        val to_seq : t -> elt Seq.t
        val to_rev_seq : t -> elt Seq.t
        val add_seq : elt Seq.t -> t -> t
        val of_seq : elt Seq.t -> t
        val find_elt : (elt -> bool) -> t -> elt
        val map : (elt -> elt) -> t -> t
        val of_list : elt list -> t
        val print : Format.formatter -> t -> unit
      end
    module type LIST =
      sig
        val print :
          (Format.formatter -> 'a -> unit) ->
          Format.formatter -> 'a list -> unit
        val filter_opt : ('a -> 'b option) -> 'a list -> 'b list
        val union : 'a list -> 'a list -> 'a list
        val ordered_unique : 'a list -> 'a list
        val index_of : 'a -> 'a list -> int option
        val split_at : int -> 'a list -> 'a list * 'a list
        type 'a t = 'a list = [] | (::) of 'a * 'a list
        val length : 'a list -> int
        val compare_lengths : 'a list -> 'b list -> int
        val compare_length_with : 'a list -> int -> int
        val is_empty : 'a list -> bool
        val cons : 'a -> 'a list -> 'a list
        val hd : 'a list -> 'a
        val tl : 'a list -> 'a list
        val nth : 'a list -> int -> 'a
        val nth_opt : 'a list -> int -> 'a option
        val rev : 'a list -> 'a list
        val init : int -> (int -> 'a) -> 'a list
        val append : 'a list -> 'a list -> 'a list
        val rev_append : 'a list -> 'a list -> 'a list
        val concat : 'a list list -> 'a list
        val flatten : 'a list list -> 'a list
        val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool
        val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int
        val iter : ('a -> unit) -> 'a list -> unit
        val iteri : (int -> 'a -> unit) -> 'a list -> unit
        val map : ('a -> 'b) -> 'a list -> 'b list
        val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list
        val rev_map : ('a -> 'b) -> 'a list -> 'b list
        val filter_map : ('a -> 'b option) -> 'a list -> 'b list
        val concat_map : ('a -> 'b list) -> 'a list -> 'b list
        val fold_left_map :
          ('acc -> 'a -> 'acc * 'b) -> 'acc -> 'a list -> 'acc * 'b list
        val fold_left : ('acc -> 'a -> 'acc) -> 'acc -> 'a list -> 'acc
        val fold_right : ('a -> 'acc -> 'acc) -> 'a list -> 'acc -> 'acc
        val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit
        val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list
        val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list
        val fold_left2 :
          ('acc -> 'a -> 'b -> 'acc) -> 'acc -> 'a list -> 'b list -> 'acc
        val fold_right2 :
          ('a -> 'b -> 'acc -> 'acc) -> 'a list -> 'b list -> 'acc -> 'acc
        val for_all : ('a -> bool) -> 'a list -> bool
        val exists : ('a -> bool) -> 'a list -> bool
        val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool
        val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool
        val mem : 'a -> 'a list -> bool
        val memq : 'a -> 'a list -> bool
        val find : ('a -> bool) -> 'a list -> 'a
        val find_opt : ('a -> bool) -> 'a list -> 'a option
        val find_index : ('a -> bool) -> 'a list -> int option
        val find_map : ('a -> 'b option) -> 'a list -> 'b option
        val find_mapi : (int -> 'a -> 'b option) -> 'a list -> 'b option
        val filter : ('a -> bool) -> 'a list -> 'a list
        val find_all : ('a -> bool) -> 'a list -> 'a list
        val filteri : (int -> 'a -> bool) -> 'a list -> 'a list
        val partition : ('a -> bool) -> 'a list -> 'a list * 'a list
        val partition_map :
          ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list
        val assoc : 'a -> ('a * 'b) list -> 'b
        val assoc_opt : 'a -> ('a * 'b) list -> 'b option
        val assq : 'a -> ('a * 'b) list -> 'b
        val assq_opt : 'a -> ('a * 'b) list -> 'b option
        val mem_assoc : 'a -> ('a * 'b) list -> bool
        val mem_assq : 'a -> ('a * 'b) list -> bool
        val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list
        val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list
        val split : ('a * 'b) list -> 'a list * 'b list
        val combine : 'a list -> 'b list -> ('a * 'b) list
        val sort : ('a -> 'a -> int) -> 'a list -> 'a list
        val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list
        val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list
        val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list
        val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list
        val to_seq : 'a list -> 'a Seq.t
        val of_seq : 'a Seq.t -> 'a list
      end
    module type STRING =
      sig
        val print : Format.formatter -> string -> unit
        val chomp : string -> string
        val before : string -> int -> string
        val after : string -> int -> string
        val first_chars : string -> int -> string
        val last_chars : string -> int -> string
        val eq_sub_strings : string -> int -> string -> int -> int -> bool
        val is_prefix : string -> string -> bool
        val is_suffix : string -> string -> bool
        val contains_string : string -> int -> string -> int option
        val subst : string -> string -> string -> string
        val tr : char -> char -> string -> string
        val rev : string -> string
        val implode : char list -> string
        val explode : string -> char list
        type t = string
        val make : int -> char -> string
        val init : int -> (int -> char) -> string
        val empty : string
        external length : string -> int = "%string_length"
        external get : string -> int -> char = "%string_safe_get"
        val of_bytes : bytes -> string
        val to_bytes : string -> bytes
        val blit : string -> int -> bytes -> int -> int -> unit
        val concat : string -> string list -> string
        val cat : string -> string -> string
        val equal : t -> t -> bool
        val compare : t -> t -> int
        val starts_with : prefix:string -> string -> bool
        val ends_with : suffix:string -> string -> bool
        val contains_from : string -> int -> char -> bool
        val rcontains_from : string -> int -> char -> bool
        val contains : string -> char -> bool
        val sub : string -> int -> int -> string
        val split_on_char : char -> string -> string list
        val map : (char -> char) -> string -> string
        val mapi : (int -> char -> char) -> string -> string
        val fold_left : ('acc -> char -> 'acc) -> 'acc -> string -> 'acc
        val fold_right : (char -> 'acc -> 'acc) -> string -> 'acc -> 'acc
        val for_all : (char -> bool) -> string -> bool
        val exists : (char -> bool) -> string -> bool
        val trim : string -> string
        val escaped : string -> string
        val uppercase_ascii : string -> string
        val lowercase_ascii : string -> string
        val capitalize_ascii : string -> string
        val uncapitalize_ascii : string -> string
        val iter : (char -> unit) -> string -> unit
        val iteri : (int -> char -> unit) -> string -> unit
        val index_from : string -> int -> char -> int
        val index_from_opt : string -> int -> char -> int option
        val rindex_from : string -> int -> char -> int
        val rindex_from_opt : string -> int -> char -> int option
        val index : string -> char -> int
        val index_opt : string -> char -> int option
        val rindex : string -> char -> int
        val rindex_opt : string -> char -> int option
        val to_seq : t -> char Seq.t
        val to_seqi : t -> (int * char) Seq.t
        val of_seq : char Seq.t -> t
        val get_utf_8_uchar : t -> int -> Uchar.utf_decode
        val is_valid_utf_8 : t -> bool
        val get_utf_16be_uchar : t -> int -> Uchar.utf_decode
        val is_valid_utf_16be : t -> bool
        val get_utf_16le_uchar : t -> int -> Uchar.utf_decode
        val is_valid_utf_16le : t -> bool
        val get_uint8 : string -> int -> int
        val get_int8 : string -> int -> int
        val get_uint16_ne : string -> int -> int
        val get_uint16_be : string -> int -> int
        val get_uint16_le : string -> int -> int
        val get_int16_ne : string -> int -> int
        val get_int16_be : string -> int -> int
        val get_int16_le : string -> int -> int
        val get_int32_ne : string -> int -> int32
        val hash : t -> int
        val seeded_hash : int -> t -> int
        val get_int32_be : string -> int -> int32
        val get_int32_le : string -> int -> int32
        val get_int64_ne : string -> int -> int64
        val get_int64_be : string -> int -> int64
        val get_int64_le : string -> int -> int64
        external unsafe_get : string -> int -> char = "%string_unsafe_get"
        external unsafe_blit : string -> int -> bytes -> int -> int -> unit
          = "caml_blit_string" [@@noalloc]
      end
    module type TAGS =
      sig
        type elt = string
        type t
        val empty : t
        val add : elt -> t -> t
        val singleton : elt -> t
        val remove : elt -> t -> t
        val union : t -> t -> t
        val inter : t -> t -> t
        val disjoint : t -> t -> bool
        val diff : t -> t -> t
        val cardinal : t -> int
        val elements : t -> elt list
        val min_elt : t -> elt
        val min_elt_opt : t -> elt option
        val max_elt : t -> elt
        val max_elt_opt : t -> elt option
        val choose : t -> elt
        val choose_opt : t -> elt option
        val find : elt -> t -> elt
        val find_opt : elt -> t -> elt option
        val find_first : (elt -> bool) -> t -> elt
        val find_first_opt : (elt -> bool) -> t -> elt option
        val find_last : (elt -> bool) -> t -> elt
        val find_last_opt : (elt -> bool) -> t -> elt option
        val iter : (elt -> unit) -> t -> unit
        val fold : (elt -> 'acc -> 'acc) -> t -> 'acc -> 'acc
        val map : (elt -> elt) -> t -> t
        val filter : (elt -> bool) -> t -> t
        val filter_map : (elt -> elt option) -> t -> t
        val partition : (elt -> bool) -> t -> t * t
        val split : elt -> t -> t * bool * t
        val is_empty : t -> bool
        val mem : elt -> t -> bool
        val equal : t -> t -> bool
        val compare : t -> t -> int
        val subset : t -> t -> bool
        val for_all : (elt -> bool) -> t -> bool
        val exists : (elt -> bool) -> t -> bool
        val to_list : t -> elt list
        val to_seq_from : elt -> t -> elt Seq.t
        val to_seq : t -> elt Seq.t
        val to_rev_seq : t -> elt Seq.t
        val add_seq : elt Seq.t -> t -> t
        val of_seq : elt Seq.t -> t
        val of_list : string list -> t
        val print : Format.formatter -> t -> unit
        val does_match : t -> t -> bool
        module Operators :
          sig
            val ( ++ ) : t -> elt -> t
            val ( -- ) : t -> elt -> t
            val ( +++ ) : t -> elt option -> t
            val ( --- ) : t -> elt option -> t
          end
      end
    module type PATHNAME =
      sig
        type t = string
        val concat : t -> t -> t
        val compare : t -> t -> int
        val equal : t -> t -> bool
        val exists : t -> bool
        val mk : string -> t
        val define_context : string -> string list -> unit
        val include_dirs_of : string -> string list
        val copy : t -> t -> unit
        val to_string : t -> string
        val print : Format.formatter -> t -> unit
        val current_dir_name : t
        val parent_dir_name : t
        val read : t -> string
        val same_contents : t -> t -> bool
        val basename : t -> t
        val dirname : t -> t
        val is_relative : t -> bool
        val readlink : t -> t
        val readdir : t -> t array
        val is_link : t -> bool
        val is_directory : t -> bool
        val add_extension : string -> t -> t
        val check_extension : t -> string -> bool
        val get_extension : t -> string
        val remove_extension : t -> t
        val update_extension : string -> t -> t
        val get_extensions : t -> string
        val remove_extensions : t -> t
        val update_extensions : string -> t -> t
        val print_path_list : Format.formatter -> t list -> unit
        val pwd : t
        val parent : t -> t
        val is_prefix : t -> t -> bool
        val is_implicit : t -> bool
        module Operators :
          sig val ( / ) : t -> t -> t val ( -.- ) : t -> string -> t end
      end
    module type COMMAND =
      sig
        type tags
        type pathname
        type t =
            Seq of t list
          | Cmd of spec
          | Echo of string list * pathname
          | Nop
        and spec =
            N
          | S of spec list
          | A of string
          | P of pathname
          | Px of pathname
          | Sh of string
          | T of tags
          | V of string
          | Quote of spec
        val atomize : string list -> spec
        val atomize_paths : string list -> spec
        val execute : ?quiet:bool -> ?pretend:bool -> t -> unit
        val execute_many :
          ?quiet:bool -> ?pretend:bool -> t list -> (bool list * exn) option
        val setup_virtual_command_solver : string -> (unit -> spec) -> unit
        val search_in_path : string -> string
        val reduce : spec -> spec
        val print : Format.formatter -> t -> unit
        val to_string : t -> string
        val string_of_command_spec : spec -> string
      end
    module type GLOB =
      sig
        type globber
        val parse : ?dir:string -> string -> globber
        exception Parse_error of string
        val eval : globber -> string -> bool
      end
    module type LOG =
      sig
        val level : int ref
        val dprintf : int -> ('a, Format.formatter, unit) format -> 'a
        val is_logging : int -> bool
        val eprintf : ('a, Format.formatter, unit) format -> 'a
        val raw_dprintf : int -> ('a, Format.formatter, unit) format -> 'a
      end
    module type OUTCOME =
      sig
        type ('a, 'b) t = Good of 'a | Bad of 'b
        val wrap : ('a -> 'b) -> 'a -> ('b, exn) t
        val ignore_good : ('a, exn) t -> unit
        val good : ('a, exn) t -> 'a
      end
    module type MISC =
      sig
        val opt_print :
          (Format.formatter -> 'a -> unit) ->
          Format.formatter -> 'a option -> unit
        val the : 'a option -> 'a
        val getenv : ?default:string -> string -> string
        val with_input_file : ?bin:bool -> string -> (in_channel -> 'a) -> 'a
        val with_output_file :
          ?bin:bool -> string -> (out_channel -> 'a) -> 'a
        val with_temp_file : string -> string -> (string -> 'a) -> 'a
        val read_file : string -> string
        val copy_chan : in_channel -> out_channel -> unit
        val copy_file : string -> string -> unit
        val print_string_list : Format.formatter -> string list -> unit
        val ( !* ) : 'a Lazy.t -> 'a
        val ( & ) : ('a -> 'b) -> 'a -> 'b
        val ( |> ) : 'a -> ('a -> 'b) -> 'b
        val ( @:= ) : 'a list ref -> 'a list -> unit
        val memo : ('a -> 'b) -> 'a -> 'b
        val memo2 : ('a -> 'b -> 'c) -> 'a -> 'b -> 'c
        val memo3 : ('a -> 'b -> 'c -> 'd) -> 'a -> 'b -> 'c -> 'd
      end
    module type OPTIONS =
      sig
        type command_spec
        val build_dir : string ref
        val include_dirs : string list ref
        val exclude_dirs : string list ref
        val nothing_should_be_rebuilt : bool ref
        val ocamlc : command_spec ref
        val plugin_ocamlc : command_spec ref
        val ocamlopt : command_spec ref
        val plugin_ocamlopt : command_spec ref
        val ocamldep : command_spec ref
        val ocamldoc : command_spec ref
        val ocamlyacc : command_spec ref
        val ocamllex : command_spec ref
        val ocamlrun : command_spec ref
        val ocamlmklib : command_spec ref
        val ocamlmktop : command_spec ref
        val hygiene : bool ref
        val sanitize : bool ref
        val sanitization_script : string ref
        val ignore_auto : bool ref
        val plugin : bool ref
        val just_plugin : bool ref
        val native_plugin : bool ref
        val make_links : bool ref
        val nostdlib : bool ref
        val program_to_execute : bool ref
        val must_clean : bool ref
        val catch_errors : bool ref
        val use_menhir : bool ref
        val show_documentation : bool ref
        val recursive : bool ref
        val use_ocamlfind : bool ref
        val plugin_use_ocamlfind : bool ref
        val targets : string list ref
        val ocaml_libs : string list ref
        val ocaml_mods : string list ref
        val ocaml_pkgs : string list ref
        val ocaml_syntax : string option ref
        val ocaml_cflags : string list ref
        val ocaml_lflags : string list ref
        val ocaml_ppflags : string list ref
        val ocaml_docflags : string list ref
        val ocaml_yaccflags : string list ref
        val ocaml_lexflags : string list ref
        val program_args : string list ref
        val ignore_list : string list ref
        val tags : string list ref
        val tag_lines : string list ref
        val show_tags : string list ref
        val ext_obj : string ref
        val ext_lib : string ref
        val ext_dll : string ref
        val exe : string ref
        val add : Arg.key * Arg.spec * Arg.doc -> unit
      end
    module type ARCH =
      sig
        type 'a arch = private
            Arch_dir of string * 'a * 'a arch list
          | Arch_dir_pack of string * 'a * 'a arch list
          | Arch_file of string * 'a
        val dir : string -> unit arch list -> unit arch
        val dir_pack : string -> unit arch list -> unit arch
        val file : string -> unit arch
        type info = private {
          current_path : string;
          include_dirs : string list;
          for_pack : string;
        }
        val annotate : 'a arch -> info arch
        val print :
          (Format.formatter -> 'a -> unit) ->
          Format.formatter -> 'a arch -> unit
        val print_include_dirs : Format.formatter -> string list -> unit
        val print_info : Format.formatter -> info -> unit
        val iter_info : ('a -> unit) -> 'a arch -> unit
        val fold_info : ('a -> 'b -> 'b) -> 'a arch -> 'b -> 'b
        val iter_include_dirs : info arch -> (string -> unit) -> unit
        val mk_tables :
          info arch ->
          (string, string list) Hashtbl.t * (string, string) Hashtbl.t
        val print_table :
          (Format.formatter -> 'a -> unit) ->
          Format.formatter -> (string, 'a) Hashtbl.t -> unit
      end
    module type FINDLIB =
      sig
        type command_spec
        type error =
            Cannot_run_ocamlfind
          | Dependency_not_found of string * string
          | Package_not_found of string
          | Cannot_parse_query of string * string
        exception Findlib_error of error
        val string_of_error : error -> string
        val report_error : error -> 'a
        type package = {
          name : string;
          description : string;
          version : string;
          archives_byte : string;
          archives_native : string;
          link_options : string;
          location : string;
          dependencies : package list;
        }
        val query : string -> package
        val list : unit -> string list
        val topological_closure : package list -> package list
        val include_flags : package list -> command_spec
        val compile_flags_byte : package list -> command_spec
        val compile_flags_native : package list -> command_spec
        val link_flags_byte : package list -> command_spec
        val link_flags_native : package list -> command_spec
      end
    module type PLUGIN =
      sig
        module Pathname : PATHNAME
        module Tags : TAGS
        module Command :
          sig
            type tags = Tags.t
            type pathname = Pathname.t
            type t =
                Seq of t list
              | Cmd of spec
              | Echo of string list * pathname
              | Nop
            and spec =
                N
              | S of spec list
              | A of string
              | P of pathname
              | Px of pathname
              | Sh of string
              | T of tags
              | V of string
              | Quote of spec
            val atomize : string list -> spec
            val atomize_paths : string list -> spec
            val execute : ?quiet:bool -> ?pretend:bool -> t -> unit
            val execute_many :
              ?quiet:bool ->
              ?pretend:bool -> t list -> (bool list * exn) option
            val setup_virtual_command_solver :
              string -> (unit -> spec) -> unit
            val search_in_path : string -> string
            val reduce : spec -> spec
            val print : Format.formatter -> t -> unit
            val to_string : t -> string
            val string_of_command_spec : spec -> string
          end
        module Outcome : OUTCOME
        module String : STRING
        module List : LIST
        module StringSet :
          sig
            type elt = String.t
            type t
            val empty : t
            val add : elt -> t -> t
            val singleton : elt -> t
            val remove : elt -> t -> t
            val union : t -> t -> t
            val inter : t -> t -> t
            val disjoint : t -> t -> bool
            val diff : t -> t -> t
            val cardinal : t -> int
            val elements : t -> elt list
            val min_elt : t -> elt
            val min_elt_opt : t -> elt option
            val max_elt : t -> elt
            val max_elt_opt : t -> elt option
            val choose : t -> elt
            val choose_opt : t -> elt option
            val find : elt -> t -> elt
            val find_opt : elt -> t -> elt option
            val find_first : (elt -> bool) -> t -> elt
            val find_first_opt : (elt -> bool) -> t -> elt option
            val find_last : (elt -> bool) -> t -> elt
            val find_last_opt : (elt -> bool) -> t -> elt option
            val iter : (elt -> unit) -> t -> unit
            val fold : (elt -> 'acc -> 'acc) -> t -> 'acc -> 'acc
            val map : (elt -> elt) -> t -> t
            val filter : (elt -> bool) -> t -> t
            val filter_map : (elt -> elt option) -> t -> t
            val partition : (elt -> bool) -> t -> t * t
            val split : elt -> t -> t * bool * t
            val is_empty : t -> bool
            val mem : elt -> t -> bool
            val equal : t -> t -> bool
            val compare : t -> t -> int
            val subset : t -> t -> bool
            val for_all : (elt -> bool) -> t -> bool
            val exists : (elt -> bool) -> t -> bool
            val to_list : t -> elt list
            val of_list : elt list -> t
            val to_seq_from : elt -> t -> elt Seq.t
            val to_seq : t -> elt Seq.t
            val to_rev_seq : t -> elt Seq.t
            val add_seq : elt Seq.t -> t -> t
            val of_seq : elt Seq.t -> t
          end
        module Options :
          sig
            type command_spec = Command.spec
            val build_dir : string ref
            val include_dirs : string list ref
            val exclude_dirs : string list ref
            val nothing_should_be_rebuilt : bool ref
            val ocamlc : command_spec ref
            val plugin_ocamlc : command_spec ref
            val ocamlopt : command_spec ref
            val plugin_ocamlopt : command_spec ref
            val ocamldep : command_spec ref
            val ocamldoc : command_spec ref
            val ocamlyacc : command_spec ref
            val ocamllex : command_spec ref
            val ocamlrun : command_spec ref
            val ocamlmklib : command_spec ref
            val ocamlmktop : command_spec ref
            val hygiene : bool ref
            val sanitize : bool ref
            val sanitization_script : string ref
            val ignore_auto : bool ref
            val plugin : bool ref
            val just_plugin : bool ref
            val native_plugin : bool ref
            val make_links : bool ref
            val nostdlib : bool ref
            val program_to_execute : bool ref
            val must_clean : bool ref
            val catch_errors : bool ref
            val use_menhir : bool ref
            val show_documentation : bool ref
            val recursive : bool ref
            val use_ocamlfind : bool ref
            val plugin_use_ocamlfind : bool ref
            val targets : string list ref
            val ocaml_libs : string list ref
            val ocaml_mods : string list ref
            val ocaml_pkgs : string list ref
            val ocaml_syntax : string option ref
            val ocaml_cflags : string list ref
            val ocaml_lflags : string list ref
            val ocaml_ppflags : string list ref
            val ocaml_docflags : string list ref
            val ocaml_yaccflags : string list ref
            val ocaml_lexflags : string list ref
            val program_args : string list ref
            val ignore_list : string list ref
            val tags : string list ref
            val tag_lines : string list ref
            val show_tags : string list ref
            val ext_obj : string ref
            val ext_lib : string ref
            val ext_dll : string ref
            val exe : string ref
            val add : Arg.key * Arg.spec * Arg.doc -> unit
          end
        module Arch : ARCH
        module Findlib :
          sig
            type command_spec = Command.spec
            type error =
                Cannot_run_ocamlfind
              | Dependency_not_found of string * string
              | Package_not_found of string
              | Cannot_parse_query of string * string
            exception Findlib_error of error
            val string_of_error : error -> string
            val report_error : error -> 'a
            type package = {
              name : string;
              description : string;
              version : string;
              archives_byte : string;
              archives_native : string;
              link_options : string;
              location : string;
              dependencies : package list;
            }
            val query : string -> package
            val list : unit -> string list
            val topological_closure : package list -> package list
            val include_flags : package list -> command_spec
            val compile_flags_byte : package list -> command_spec
            val compile_flags_native : package list -> command_spec
            val link_flags_byte : package list -> command_spec
            val link_flags_native : package list -> command_spec
          end
        val opt_print :
          (Format.formatter -> 'a -> unit) ->
          Format.formatter -> 'a option -> unit
        val the : 'a option -> 'a
        val getenv : ?default:string -> string -> string
        val with_input_file : ?bin:bool -> string -> (in_channel -> 'a) -> 'a
        val with_output_file :
          ?bin:bool -> string -> (out_channel -> 'a) -> 'a
        val with_temp_file : string -> string -> (string -> 'a) -> 'a
        val read_file : string -> string
        val copy_chan : in_channel -> out_channel -> unit
        val copy_file : string -> string -> unit
        val print_string_list : Format.formatter -> string list -> unit
        val ( !* ) : 'a Lazy.t -> 'a
        val ( & ) : ('a -> 'b) -> 'a -> 'b
        val ( |> ) : 'a -> ('a -> 'b) -> 'b
        val ( @:= ) : 'a list ref -> 'a list -> unit
        val memo : ('a -> 'b) -> 'a -> 'b
        val memo2 : ('a -> 'b -> 'c) -> 'a -> 'b -> 'c
        val memo3 : ('a -> 'b -> 'c -> 'd) -> 'a -> 'b -> 'c -> 'd
        type command =
          Command.t =
            Seq of command list
          | Cmd of spec
          | Echo of string list * Pathname.t
          | Nop
        and spec =
          Command.spec =
            N
          | S of spec list
          | A of string
          | P of string
          | Px of string
          | Sh of string
          | T of Tags.t
          | V of string
          | Quote of spec
        val ( / ) : Pathname.t -> Pathname.t -> Pathname.t
        val ( -.- ) : Pathname.t -> string -> Pathname.t
        val ( ++ ) : Tags.t -> Tags.elt -> Tags.t
        val ( -- ) : Tags.t -> Tags.elt -> Tags.t
        val ( +++ ) : Tags.t -> Tags.elt option -> Tags.t
        val ( --- ) : Tags.t -> Tags.elt option -> Tags.t
        type env = Pathname.t -> Pathname.t
        type builder =
            Pathname.t list list -> (Pathname.t, exn) Outcome.t list
        type action = env -> builder -> Command.t
        val rule :
          string ->
          ?tags:string list ->
          ?prods:string list ->
          ?deps:string list ->
          ?prod:string ->
          ?dep:string ->
          ?stamp:string ->
          ?insert:[ `after of string | `before of string | `bottom | `top ] ->
          ?doc:string -> action -> unit
        val copy_rule :
          string ->
          ?insert:[ `after of string | `before of string | `bottom | `top ] ->
          string -> string -> unit
        val clear_rules : unit -> unit
        val dep : Tags.elt list -> Pathname.t list -> unit
        val pdep :
          Tags.elt list -> Tags.elt -> (string -> Pathname.t list) -> unit
        val flag : Tags.elt list -> Command.spec -> unit
        val pflag :
          Tags.elt list -> Tags.elt -> (string -> Command.spec) -> unit
        val flag_and_dep : Tags.elt list -> Command.spec -> unit
        val pflag_and_dep :
          Tags.elt list -> Tags.elt -> (string -> Command.spec) -> unit
        val mark_tag_used : Tags.elt -> unit
        val non_dependency : Pathname.t -> string -> unit
        val use_lib : Pathname.t -> Pathname.t -> unit
        val ocaml_lib :
          ?extern:bool ->
          ?byte:bool ->
          ?native:bool ->
          ?dir:Pathname.t -> ?tag_name:string -> Pathname.t -> unit
        val expand_module :
          Pathname.t list -> Pathname.t -> string list -> Pathname.t list
        val string_list_of_file : Pathname.t -> string list
        val module_name_of_pathname : Pathname.t -> string
        val mv : Pathname.t -> Pathname.t -> Command.t
        val cp : Pathname.t -> Pathname.t -> Command.t
        val ln_f : Pathname.t -> Pathname.t -> Command.t
        val ln_s : Pathname.t -> Pathname.t -> Command.t
        val rm_f : Pathname.t -> Command.t
        val chmod : Command.spec -> Pathname.t -> Command.t
        val cmp : Pathname.t -> Pathname.t -> Command.t
        val hide_package_contents : string -> unit
        val tag_file : Pathname.t -> Tags.elt list -> unit
        val tag_any : Tags.elt list -> unit
        val tags_of_pathname : Pathname.t -> Tags.t
        val run_and_read : string -> string
        type hook =
            Before_hygiene
          | After_hygiene
          | Before_options
          | After_options
          | Before_rules
          | After_rules
        val dispatch : (hook -> unit) -> unit
      end
  end
module My_std :
  sig
    exception Exit_OK
    exception Exit_usage of string
    exception Exit_system_error of string
    exception Exit_with_code of int
    exception Exit_silently_with_code of int
    module Outcome : Signatures.OUTCOME
    val ksbprintf :
      (string -> 'a) -> ('b, Format.formatter, unit, 'a) format4 -> 'b
    val sbprintf : ('a, Format.formatter, unit, string) format4 -> 'a
    module Set :
      sig
        module type OrderedTypePrintable = Signatures.OrderedTypePrintable
        module type S = Signatures.SET
        module Make :
          functor (M : OrderedTypePrintable) ->
            sig
              type elt = M.t
              type t
              val empty : t
              val add : elt -> t -> t
              val singleton : elt -> t
              val remove : elt -> t -> t
              val union : t -> t -> t
              val inter : t -> t -> t
              val disjoint : t -> t -> bool
              val diff : t -> t -> t
              val cardinal : t -> int
              val elements : t -> elt list
              val min_elt : t -> elt
              val min_elt_opt : t -> elt option
              val max_elt : t -> elt
              val max_elt_opt : t -> elt option
              val choose : t -> elt
              val choose_opt : t -> elt option
              val find : elt -> t -> elt
              val find_opt : elt -> t -> elt option
              val find_first : (elt -> bool) -> t -> elt
              val find_first_opt : (elt -> bool) -> t -> elt option
              val find_last : (elt -> bool) -> t -> elt
              val find_last_opt : (elt -> bool) -> t -> elt option
              val iter : (elt -> unit) -> t -> unit
              val fold : (elt -> 'acc -> 'acc) -> t -> 'acc -> 'acc
              val filter : (elt -> bool) -> t -> t
              val filter_map : (elt -> elt option) -> t -> t
              val partition : (elt -> bool) -> t -> t * t
              val split : elt -> t -> t * bool * t
              val is_empty : t -> bool
              val mem : elt -> t -> bool
              val equal : t -> t -> bool
              val compare : t -> t -> int
              val subset : t -> t -> bool
              val for_all : (elt -> bool) -> t -> bool
              val exists : (elt -> bool) -> t -> bool
              val to_list : t -> elt list
              val to_seq_from : elt -> t -> elt Seq.t
              val to_seq : t -> elt Seq.t
              val to_rev_seq : t -> elt Seq.t
              val add_seq : elt Seq.t -> t -> t
              val of_seq : elt Seq.t -> t
              val find_elt : (elt -> bool) -> t -> elt
              val map : (elt -> elt) -> t -> t
              val of_list : elt list -> t
              val print : Format.formatter -> t -> unit
            end
      end
    module List : Signatures.LIST
    module String : Signatures.STRING
    module Digest :
      sig
        type t = string
        val string : string -> t
        val substring : string -> int -> int -> t
        external channel : in_channel -> int -> t = "caml_md5_chan"
        val file : string -> t
        val output : out_channel -> t -> unit
        val input : in_channel -> t
        val to_hex : t -> string
      end
    module StringSet :
      sig
        type elt = String.t
        type t
        val empty : t
        val add : elt -> t -> t
        val singleton : elt -> t
        val remove : elt -> t -> t
        val union : t -> t -> t
        val inter : t -> t -> t
        val disjoint : t -> t -> bool
        val diff : t -> t -> t
        val cardinal : t -> int
        val elements : t -> elt list
        val min_elt : t -> elt
        val min_elt_opt : t -> elt option
        val max_elt : t -> elt
        val max_elt_opt : t -> elt option
        val choose : t -> elt
        val choose_opt : t -> elt option
        val find : elt -> t -> elt
        val find_opt : elt -> t -> elt option
        val find_first : (elt -> bool) -> t -> elt
        val find_first_opt : (elt -> bool) -> t -> elt option
        val find_last : (elt -> bool) -> t -> elt
        val find_last_opt : (elt -> bool) -> t -> elt option
        val iter : (elt -> unit) -> t -> unit
        val fold : (elt -> 'acc -> 'acc) -> t -> 'acc -> 'acc
        val filter : (elt -> bool) -> t -> t
        val filter_map : (elt -> elt option) -> t -> t
        val partition : (elt -> bool) -> t -> t * t
        val split : elt -> t -> t * bool * t
        val is_empty : t -> bool
        val mem : elt -> t -> bool
        val equal : t -> t -> bool
        val compare : t -> t -> int
        val subset : t -> t -> bool
        val for_all : (elt -> bool) -> t -> bool
        val exists : (elt -> bool) -> t -> bool
        val to_list : t -> elt list
        val to_seq_from : elt -> t -> elt Seq.t
        val to_seq : t -> elt Seq.t
        val to_rev_seq : t -> elt Seq.t
        val add_seq : elt Seq.t -> t -> t
        val of_seq : elt Seq.t -> t
        val find_elt : (elt -> bool) -> t -> elt
        val map : (elt -> elt) -> t -> t
        val of_list : elt list -> t
        val print : Format.formatter -> t -> unit
      end
    val sys_readdir : string -> (string array, exn) Outcome.t
    val sys_remove : string -> unit
    val reset_readdir_cache : unit -> unit
    val reset_filesys_cache : unit -> unit
    val reset_filesys_cache_for_file : string -> unit
    val sys_file_exists : string -> bool
    val sys_command : string -> int
    val filename_concat : string -> string -> string
    val invalid_arg' : ('a, Format.formatter, unit, 'b) format4 -> 'a
    val opt_print :
      (Format.formatter -> 'a -> unit) ->
      Format.formatter -> 'a option -> unit
    val the : 'a option -> 'a
    val getenv : ?default:string -> string -> string
    val with_input_file : ?bin:bool -> string -> (in_channel -> 'a) -> 'a
    val with_output_file : ?bin:bool -> string -> (out_channel -> 'a) -> 'a
    val with_temp_file : string -> string -> (string -> 'a) -> 'a
    val read_file : string -> string
    val copy_chan : in_channel -> out_channel -> unit
    val copy_file : string -> string -> unit
    val print_string_list : Format.formatter -> string list -> unit
    val ( !* ) : 'a Lazy.t -> 'a
    val ( & ) : ('a -> 'b) -> 'a -> 'b
    val ( |> ) : 'a -> ('a -> 'b) -> 'b
    val ( @:= ) : 'a list ref -> 'a list -> unit
    val memo : ('a -> 'b) -> 'a -> 'b
    val memo2 : ('a -> 'b -> 'c) -> 'a -> 'b -> 'c
    val memo3 : ('a -> 'b -> 'c -> 'd) -> 'a -> 'b -> 'c -> 'd
    val set_lexbuf_fname : string -> Lexing.lexbuf -> unit
    val lexbuf_of_string : ?name:string -> string -> Lexing.lexbuf
    val split_ocaml_version : (int * int * int * string) option
  end
module My_unix :
  sig
    type file_kind = FK_dir | FK_file | FK_link | FK_other
    type stats = { stat_file_kind : file_kind; stat_key : string; }
    val is_degraded : bool Lazy.t
    val is_link : string -> bool
    val run_and_open : string -> (in_channel -> 'a) -> 'a
    val readlink : string -> string
    val run_and_read : string -> string
    val execute_many :
      ?max_jobs:int ->
      ?ticker:(unit -> unit) ->
      ?period:float ->
      ?display:((out_channel -> unit) -> unit) ->
      (unit -> string) list list -> (bool list * exn) option
    val report_error : Format.formatter -> exn -> unit
    val at_exit_once : (unit -> unit) -> unit
    val gettimeofday : unit -> float
    val stdout_isatty : unit -> bool
    val stat : string -> stats
    val lstat : string -> stats
    type implem = {
      mutable is_degraded : bool;
      mutable is_link : string -> bool;
      mutable run_and_open : 'a. string -> (in_channel -> 'a) -> 'a;
      mutable readlink : string -> string;
      mutable execute_many :
        ?max_jobs:int ->
        ?ticker:(unit -> unit) ->
        ?period:float ->
        ?display:((out_channel -> unit) -> unit) ->
        (unit -> string) list list -> (bool list * exn) option;
      mutable report_error : Format.formatter -> exn -> unit;
      mutable at_exit_once : (unit -> unit) -> unit;
      mutable gettimeofday : unit -> float;
      mutable stdout_isatty : unit -> bool;
      mutable stat : string -> stats;
      mutable lstat : string -> stats;
    }
    val implem : implem
  end
module Tags :
  sig
    type elt = string
    type t
    val empty : t
    val add : elt -> t -> t
    val singleton : elt -> t
    val remove : elt -> t -> t
    val union : t -> t -> t
    val inter : t -> t -> t
    val disjoint : t -> t -> bool
    val diff : t -> t -> t
    val cardinal : t -> int
    val elements : t -> elt list
    val min_elt : t -> elt
    val min_elt_opt : t -> elt option
    val max_elt : t -> elt
    val max_elt_opt : t -> elt option
    val choose : t -> elt
    val choose_opt : t -> elt option
    val find : elt -> t -> elt
    val find_opt : elt -> t -> elt option
    val find_first : (elt -> bool) -> t -> elt
    val find_first_opt : (elt -> bool) -> t -> elt option
    val find_last : (elt -> bool) -> t -> elt
    val find_last_opt : (elt -> bool) -> t -> elt option
    val iter : (elt -> unit) -> t -> unit
    val fold : (elt -> 'acc -> 'acc) -> t -> 'acc -> 'acc
    val map : (elt -> elt) -> t -> t
    val filter : (elt -> bool) -> t -> t
    val filter_map : (elt -> elt option) -> t -> t
    val partition : (elt -> bool) -> t -> t * t
    val split : elt -> t -> t * bool * t
    val is_empty : t -> bool
    val mem : elt -> t -> bool
    val equal : t -> t -> bool
    val compare : t -> t -> int
    val subset : t -> t -> bool
    val for_all : (elt -> bool) -> t -> bool
    val exists : (elt -> bool) -> t -> bool
    val to_list : t -> elt list
    val to_seq_from : elt -> t -> elt Seq.t
    val to_seq : t -> elt Seq.t
    val to_rev_seq : t -> elt Seq.t
    val add_seq : elt Seq.t -> t -> t
    val of_seq : elt Seq.t -> t
    val of_list : string list -> t
    val print : Format.formatter -> t -> unit
    val does_match : t -> t -> bool
    module Operators :
      sig
        val ( ++ ) : t -> elt -> t
        val ( -- ) : t -> elt -> t
        val ( +++ ) : t -> elt option -> t
        val ( --- ) : t -> elt option -> t
      end
  end
module Display :
  sig
    type display
    type tagline_description = (string * char) list
    val create :
      ?channel:out_channel ->
      ?mode:[ `Classic | `Sophisticated ] ->
      ?columns:int ->
      ?description:tagline_description ->
      ?log_file:string -> ?log_level:int -> unit -> display
    val finish : ?how:[ `Error | `Quiet | `Success ] -> display -> unit
    val event :
      display -> ?pretend:bool -> string -> string -> Tags.t -> unit
    val display : display -> (out_channel -> unit) -> unit
    val update : display -> unit
    val is_logging : display -> int -> bool
    val dprintf :
      ?raw:bool ->
      ?log_level:int -> display -> ('a, Format.formatter, unit) format -> 'a
  end
module Log :
  sig
    val level : int ref
    val dprintf : int -> ('a, Format.formatter, unit) format -> 'a
    val is_logging : int -> bool
    val eprintf : ('a, Format.formatter, unit) format -> 'a
    val raw_dprintf : int -> ('a, Format.formatter, unit) format -> 'a
    val classic_display : bool ref
    val event : ?pretend:bool -> string -> string -> Tags.t -> unit
    val init : string option -> unit
    val finish : ?how:[ `Error | `Quiet | `Success ] -> unit -> unit
    val display : (out_channel -> unit) -> unit
    val update : unit -> unit
    val mode : string -> bool
    val at_end : name:string -> ([> `Error | `Quiet ] -> unit) -> unit
    val at_failure : name:string -> ([> `Error ] -> unit) -> unit
  end
module Shell :
  sig
    val is_simple_filename : string -> bool
    val quote_filename_if_needed : string -> string
    val chdir : string -> unit
    val rm : string -> unit
    val rm_f : string -> unit
    val rm_rf : string -> unit
    val mkdir : string -> unit
    val try_mkdir : string -> unit
    val mkdir_p : string -> unit
    val cp : string -> string -> unit
    val mv : string -> string -> unit
    val readlink : string -> string
    val is_link : string -> bool
  end
module Bool :
  sig
    type 'a boolean =
        And of 'a boolean list
      | Or of 'a boolean list
      | Not of 'a boolean
      | Atom of 'a
      | True
      | False
    val eval : ('a -> bool) -> 'a boolean -> bool
    val iter : ('a -> unit) -> 'a boolean -> unit
    val map : ('a -> 'b) -> 'a boolean -> 'b boolean
  end
module Glob_ast :
  sig
    exception Parse_error of string
    type pattern =
        Epsilon
      | Star of pattern
      | Class of character_class
      | Concat of pattern * pattern
      | Union of pattern list
      | Word of string
    and character_class = (char * char) Bool.boolean
    type 'pattern atom = Constant of string | Pattern of 'pattern
  end
module Glob_lexer :
  sig
    type token =
        ATOM of Glob_ast.pattern Glob_ast.atom
      | AND
      | OR
      | NOT
      | LPAR
      | RPAR
      | TRUE
      | FALSE
      | EOF
    val token : Lexing.lexbuf -> token
  end
module Glob :
  sig
    type fast_pattern
    type globber = fast_pattern Glob_ast.atom Bool.boolean
    val parse : ?dir:string -> string -> globber
    exception Parse_error of string
    val eval : globber -> string -> bool
    val fast_pattern_of_pattern : Glob_ast.pattern -> fast_pattern
  end
module Lexers :
  sig
    exception Error of (string * Loc.location)
    type conf_values = {
      plus_tags : (string * Loc.location) list;
      minus_tags : (string * Loc.location) list;
    }
    type conf = (Glob.globber * conf_values) list
    val ocamldep_output :
      Loc.source -> Lexing.lexbuf -> (string * string list) list
    val space_sep_strings : Loc.source -> Lexing.lexbuf -> string list
    val blank_sep_strings : Loc.source -> Lexing.lexbuf -> string list
    val comma_sep_strings : Loc.source -> Lexing.lexbuf -> string list
    val comma_or_blank_sep_strings :
      Loc.source -> Lexing.lexbuf -> string list
    val trim_blanks : Loc.source -> Lexing.lexbuf -> string
    val parse_environment_path : Loc.source -> Lexing.lexbuf -> string list
    val parse_environment_path_w : Loc.source -> Lexing.lexbuf -> string list
    val conf_lines : string option -> Loc.source -> Lexing.lexbuf -> conf
    val path_scheme :
      bool ->
      Loc.source ->
      Lexing.lexbuf ->
      [ `Var of string * Glob.globber | `Word of string ] list
    val ocamlfind_query :
      Loc.source ->
      Lexing.lexbuf -> string * string * string * string * string * string
    val tag_gen : Loc.source -> Lexing.lexbuf -> string * string option
  end
module Param_tags :
  sig
    val declare : string -> (string -> unit) -> unit
    val acknowledge : Loc.source -> Loc.location option -> string -> unit
    val init : unit -> unit
    val partial_init : ?quiet:bool -> Loc.source -> Tags.t -> unit
    val make : Tags.elt -> string -> Tags.elt
    val is_applied : Tags.elt -> bool
  end
module Command :
  sig
    type tags = Tags.t
    type pathname = string
    type t =
        Seq of t list
      | Cmd of spec
      | Echo of string list * pathname
      | Nop
    and spec =
        N
      | S of spec list
      | A of string
      | P of pathname
      | Px of pathname
      | Sh of string
      | T of tags
      | V of string
      | Quote of spec
    val atomize : string list -> spec
    val atomize_paths : string list -> spec
    val execute : ?quiet:bool -> ?pretend:bool -> t -> unit
    val execute_many :
      ?quiet:bool -> ?pretend:bool -> t list -> (bool list * exn) option
    val setup_virtual_command_solver : string -> (unit -> spec) -> unit
    val search_in_path : string -> string
    val reduce : spec -> spec
    val print : Format.formatter -> t -> unit
    val to_string : t -> string
    val string_of_command_spec : spec -> string
    val string_target_and_tags_of_command_spec :
      spec -> string * string * Tags.t
    val iter_tags : (Tags.t -> unit) -> t -> unit
    val fold_pathnames : (pathname -> 'a -> 'a) -> t -> 'a -> 'a
    val digest : t -> Digest.t
    val jobs : int ref
    val tag_handler : (Tags.t -> spec) ref
    val dump_parallel_stats : unit -> unit
    val deps_of_tags : Tags.t -> pathname list
    val dep : Tags.elt list -> pathname list -> unit
    val pdep : Tags.elt list -> Tags.elt -> (string -> pathname list) -> unit
    val list_all_deps : unit -> (Tags.t * pathname list) list
    val file_or_exe_exists : string -> bool
  end
module Ocamlbuild_config :
  sig
    val bindir : string
    val libdir : string
    val ocaml_libdir : string
    val libdir_abs : string
    val ocaml_native : bool
    val ocaml_native_tools : bool
    val supports_shared_libraries : bool
    val a : string
    val o : string
    val so : string
    val ext_dll : string
    val exe : string
    val version : string
  end
module Ocamlbuild_where :
  sig val bindir : string ref val libdir : string ref end
module Slurp :
  sig
    type 'a entry =
        Dir of string * string * My_unix.stats Lazy.t * 'a *
          'a entry list Lazy.t
      | File of string * string * My_unix.stats Lazy.t * 'a
      | Error of exn
      | Nothing
    val slurp : string -> unit entry
    val filter : (string -> string -> 'a -> bool) -> 'a entry -> 'a entry
    val map : (string -> string -> 'a -> 'b) -> 'a entry -> 'b entry
    val fold : (string -> string -> 'b -> 'a -> 'a) -> 'b entry -> 'a -> 'a
    val force : 'a entry -> unit
  end
module Options :
  sig
    type command_spec = Command.spec
    val build_dir : string ref
    val include_dirs : string list ref
    val exclude_dirs : string list ref
    val nothing_should_be_rebuilt : bool ref
    val ocamlc : command_spec ref
    val plugin_ocamlc : command_spec ref
    val ocamlopt : command_spec ref
    val plugin_ocamlopt : command_spec ref
    val ocamldep : command_spec ref
    val ocamldoc : command_spec ref
    val ocamlyacc : command_spec ref
    val ocamllex : command_spec ref
    val ocamlrun : command_spec ref
    val ocamlmklib : command_spec ref
    val ocamlmktop : command_spec ref
    val hygiene : bool ref
    val sanitize : bool ref
    val sanitization_script : string ref
    val ignore_auto : bool ref
    val plugin : bool ref
    val just_plugin : bool ref
    val native_plugin : bool ref
    val make_links : bool ref
    val nostdlib : bool ref
    val program_to_execute : bool ref
    val must_clean : bool ref
    val catch_errors : bool ref
    val use_menhir : bool ref
    val show_documentation : bool ref
    val recursive : bool ref
    val use_ocamlfind : bool ref
    val plugin_use_ocamlfind : bool ref
    val targets : string list ref
    val ocaml_libs : string list ref
    val ocaml_mods : string list ref
    val ocaml_pkgs : string list ref
    val ocaml_syntax : string option ref
    val ocaml_cflags : string list ref
    val ocaml_lflags : string list ref
    val ocaml_ppflags : string list ref
    val ocaml_docflags : string list ref
    val ocaml_yaccflags : string list ref
    val ocaml_lexflags : string list ref
    val program_args : string list ref
    val ignore_list : string list ref
    val tags : string list ref
    val tag_lines : string list ref
    val show_tags : string list ref
    val ext_obj : string ref
    val ext_lib : string ref
    val ext_dll : string ref
    val exe : string ref
    val add : Arg.key * Arg.spec * Arg.doc -> unit
    val plugin_tags : string list ref
    val ocamlbuild_project_heuristic : unit -> bool
    val spec : unit -> (Arg.key * Arg.spec * Arg.doc) list
    val entry : bool Slurp.entry option ref
    val init : unit -> unit
  end
module Pathname :
  sig
    type t = string
    val concat : t -> t -> t
    val compare : t -> t -> int
    val equal : t -> t -> bool
    val exists : t -> bool
    val mk : string -> t
    val define_context : string -> string list -> unit
    val include_dirs_of : string -> string list
    val copy : t -> t -> unit
    val to_string : t -> string
    val print : Format.formatter -> t -> unit
    val current_dir_name : t
    val parent_dir_name : t
    val read : t -> string
    val same_contents : t -> t -> bool
    val basename : t -> t
    val dirname : t -> t
    val is_relative : t -> bool
    val readlink : t -> t
    val readdir : t -> t array
    val is_link : t -> bool
    val is_directory : t -> bool
    val add_extension : string -> t -> t
    val check_extension : t -> string -> bool
    val get_extension : t -> string
    val remove_extension : t -> t
    val update_extension : string -> t -> t
    val get_extensions : t -> string
    val remove_extensions : t -> t
    val update_extensions : string -> t -> t
    val print_path_list : Format.formatter -> t list -> unit
    val pwd : t
    val parent : t -> t
    val is_prefix : t -> t -> bool
    val is_implicit : t -> bool
    module Operators :
      sig val ( / ) : t -> t -> t val ( -.- ) : t -> string -> t end
    val link_to_dir : t -> t -> bool
    val normalize : t -> t
  end
module Configuration :
  sig
    val parse_string : ?source:Loc.source -> string -> unit
    val parse_file : ?dir:string -> string -> unit
    val tags_of_filename : string -> Tags.t
    val has_tag : string -> bool
    val tag_file : Pathname.t -> Tags.elt list -> unit
    val tag_any : Tags.elt list -> unit
    val global_tags : unit -> Tags.t
    val check_tags_usage : Tags.t -> unit
  end
module Flags :
  sig
    val of_tags : Tags.t -> Command.spec
    val of_tag_list : Tags.elt list -> Command.spec
    val flag : ?deprecated:bool -> Tags.elt list -> Command.spec -> unit
    val pflag :
      Tags.elt list ->
      string -> ?doc_param:string -> (string -> Command.spec) -> unit
    val flag_and_dep : Tags.elt list -> Command.spec -> unit
    val pflag_and_dep :
      Tags.elt list ->
      Tags.elt -> ?doc_param:string -> (string -> Command.spec) -> unit
    val add : 'a -> 'a list -> 'a list
    val remove : 'a -> 'a list -> 'a list
    val show_documentation : unit -> unit
    val get_used_tags : unit -> Tags.t
    val mark_tag_used : Tags.elt -> unit
  end
module Hygiene :
  sig
    type rule = Implies_not of pattern * pattern | Not of pattern
    and pattern = suffix
    and suffix = string
    type penalty = Warn | Fail
    type law = {
      law_name : string;
      law_rules : rule list;
      law_penalty : penalty;
    }
    val check :
      ?sanitize:string ->
      law list -> bool Slurp.entry -> (law * string list) list
  end
module Digest_cache :
  sig
    val init : unit -> unit
    val get : string -> string
    val put : string -> string -> unit
  end
module Resource :
  sig
    type resource_pattern
    type env
    type t = Pathname.t
    module Resources :
      sig
        type elt = t
        type t
        val empty : t
        val add : elt -> t -> t
        val singleton : elt -> t
        val remove : elt -> t -> t
        val union : t -> t -> t
        val inter : t -> t -> t
        val disjoint : t -> t -> bool
        val diff : t -> t -> t
        val cardinal : t -> int
        val elements : t -> elt list
        val min_elt : t -> elt
        val min_elt_opt : t -> elt option
        val max_elt : t -> elt
        val max_elt_opt : t -> elt option
        val choose : t -> elt
        val choose_opt : t -> elt option
        val find : elt -> t -> elt
        val find_opt : elt -> t -> elt option
        val find_first : (elt -> bool) -> t -> elt
        val find_first_opt : (elt -> bool) -> t -> elt option
        val find_last : (elt -> bool) -> t -> elt
        val find_last_opt : (elt -> bool) -> t -> elt option
        val iter : (elt -> unit) -> t -> unit
        val fold : (elt -> 'acc -> 'acc) -> t -> 'acc -> 'acc
        val filter : (elt -> bool) -> t -> t
        val filter_map : (elt -> elt option) -> t -> t
        val partition : (elt -> bool) -> t -> t * t
        val split : elt -> t -> t * bool * t
        val is_empty : t -> bool
        val mem : elt -> t -> bool
        val equal : t -> t -> bool
        val compare : t -> t -> int
        val subset : t -> t -> bool
        val for_all : (elt -> bool) -> t -> bool
        val exists : (elt -> bool) -> t -> bool
        val to_list : t -> elt list
        val to_seq_from : elt -> t -> elt Seq.t
        val to_seq : t -> elt Seq.t
        val to_rev_seq : t -> elt Seq.t
        val add_seq : elt Seq.t -> t -> t
        val of_seq : elt Seq.t -> t
        val find_elt : (elt -> bool) -> t -> elt
        val map : (elt -> elt) -> t -> t
        val of_list : elt list -> t
        val print : Format.formatter -> t -> unit
      end
    module Cache :
      sig
        type cache_entry
        type suspension
        type build_status =
            Bbuilt
          | Bcannot_be_built
          | Bnot_built_yet
          | Bsuspension of suspension
        val clean : unit -> unit
        val resource_state : t -> build_status
        val resource_changed : t -> unit
        val resource_has_changed : t -> bool
        val resource_built : t -> unit
        val resource_failed : t -> unit
        val import_in_build_dir : t -> unit
        val suspend_resource :
          t -> Command.t -> (unit -> unit) -> t list -> unit
        val resume_resource : t -> unit
        val resume_suspension : suspension -> unit
        val get_optional_resource_suspension :
          t -> (Command.t * (unit -> unit)) option
        val clear_resource_failed : t -> unit
        val add_dependency : t -> t -> unit
        val fold_dependencies : (string -> string -> 'a -> 'a) -> 'a -> 'a
        val external_is_up_to_date : t -> bool
        val dependencies : t -> Resources.t
        val print_cache : Format.formatter -> unit -> unit
        val print_dependencies : Format.formatter -> unit -> unit
      end
    val digest : t -> string
    val exists_in_source_dir : t -> bool
    val exists_in_build_dir : t -> bool
    val in_build_dir : t -> t
    val in_source_dir : t -> t
    val clean_up_links : bool Slurp.entry -> bool Slurp.entry
    val compare : t -> t -> int
    val print : Format.formatter -> t -> unit
    val print_pattern : Format.formatter -> resource_pattern -> unit
    val clean : t -> unit
    val import : string -> t
    val import_pattern : string -> resource_pattern
    val matchit : resource_pattern -> t -> env option
    val subst : env -> t -> t
    val subst_any : env -> t -> t
    val subst_pattern : env -> resource_pattern -> t
    val print_env : Format.formatter -> env -> unit
  end
module Rule :
  sig
    type env = Pathname.t -> Pathname.t
    type builder =
        Pathname.t list list -> (Pathname.t, exn) My_std.Outcome.t list
    type action = env -> builder -> Command.t
    type 'a gen_rule
    type rule = Pathname.t gen_rule
    type rule_scheme = Resource.resource_pattern gen_rule
    type 'a rule_printer =
        (Format.formatter -> 'a -> unit) ->
        Format.formatter -> 'a gen_rule -> unit
    exception Failed
    val name_of_rule : 'a gen_rule -> string
    val deps_of_rule : 'a gen_rule -> Pathname.t list
    val prods_of_rule : 'a gen_rule -> 'a list
    val doc_of_rule : 'a gen_rule -> string option
    val rule :
      string ->
      ?tags:string list ->
      ?prods:string list ->
      ?deps:string list ->
      ?prod:string ->
      ?dep:string ->
      ?stamp:string ->
      ?insert:[ `after of string | `before of string | `bottom | `top ] ->
      ?doc:string -> action -> unit
    val copy_rule :
      string ->
      ?insert:[ `after of string | `before of string | `bottom | `top ] ->
      string -> string -> unit
    module Common_commands :
      sig
        val mv : Pathname.t -> Pathname.t -> Command.t
        val cp : Pathname.t -> Pathname.t -> Command.t
        val cp_p : Pathname.t -> Pathname.t -> Command.t
        val ln_f : Pathname.t -> Pathname.t -> Command.t
        val ln_s : Pathname.t -> Pathname.t -> Command.t
        val rm_f : Pathname.t -> Command.t
        val chmod : Command.spec -> Pathname.t -> Command.t
        val cmp : Pathname.t -> Pathname.t -> Command.t
      end
    val print : Format.formatter -> rule -> unit
    val pretty_print : 'a rule_printer
    val subst : Resource.env -> rule_scheme -> rule
    val can_produce : Pathname.t -> rule_scheme -> rule option
    val compare : 'a gen_rule -> 'a gen_rule -> int
    val print_rule_name : Format.formatter -> 'a gen_rule -> unit
    val print_rule_contents : 'a rule_printer
    val get_rules : unit -> rule_scheme list
    val clear_rules : unit -> unit
    val call : builder -> rule -> unit
    val build_deps_of_tags : builder -> Tags.t -> Pathname.t list
    val show_documentation : unit -> unit
  end
module Solver :
  sig
    type backtrace = private
        Leaf of Pathname.t
      | Choice of backtrace list
      | Depth of Pathname.t * backtrace
      | Target of string * backtrace
    exception Failed of backtrace
    exception Circular of Pathname.t * Pathname.t list
    val solve : Pathname.t -> unit
    val solve_target : string -> Pathname.t list -> Pathname.t
  end
module Report :
  sig
    val print_backtrace_analyze :
      Format.formatter -> Solver.backtrace -> unit
    val print_backtrace : Format.formatter -> Solver.backtrace -> unit
  end
module Tools :
  sig
    val tags_of_pathname : Pathname.t -> Tags.t
    val path_and_context_of_string : Pathname.t -> Pathname.t list
    val pp_l : Format.formatter -> string list -> unit
  end
module Fda :
  sig
    exception Exit_hygiene_failed
    val inspect : bool Slurp.entry -> unit
  end
module Findlib :
  sig
    type command_spec = Command.spec
    type error =
        Cannot_run_ocamlfind
      | Dependency_not_found of string * string
      | Package_not_found of string
      | Cannot_parse_query of string * string
    exception Findlib_error of error
    val string_of_error : error -> string
    val report_error : error -> 'a
    type package = {
      name : string;
      description : string;
      version : string;
      archives_byte : string;
      archives_native : string;
      link_options : string;
      location : string;
      dependencies : package list;
    }
    val query : string -> package
    val list : unit -> string list
    val topological_closure : package list -> package list
    val include_flags : package list -> command_spec
    val compile_flags_byte : package list -> command_spec
    val compile_flags_native : package list -> command_spec
    val link_flags_byte : package list -> command_spec
    val link_flags_native : package list -> command_spec
  end
module Ocaml_arch :
  sig
    type 'a arch = private
        Arch_dir of string * 'a * 'a arch list
      | Arch_dir_pack of string * 'a * 'a arch list
      | Arch_file of string * 'a
    val dir : string -> unit arch list -> unit arch
    val dir_pack : string -> unit arch list -> unit arch
    val file : string -> unit arch
    type info = private {
      current_path : string;
      include_dirs : string list;
      for_pack : string;
    }
    val annotate : 'a arch -> info arch
    val print :
      (Format.formatter -> 'a -> unit) -> Format.formatter -> 'a arch -> unit
    val print_include_dirs : Format.formatter -> string list -> unit
    val print_info : Format.formatter -> info -> unit
    val iter_info : ('a -> unit) -> 'a arch -> unit
    val fold_info : ('a -> 'b -> 'b) -> 'a arch -> 'b -> 'b
    val iter_include_dirs : info arch -> (string -> unit) -> unit
    val mk_tables :
      info arch ->
      (string, string list) Hashtbl.t * (string, string) Hashtbl.t
    val print_table :
      (Format.formatter -> 'a -> unit) ->
      Format.formatter -> (string, 'a) Hashtbl.t -> unit
    val forpack_flags_of_pathname : string -> Command.spec
  end
module Ocaml_utils :
  sig
    val stdlib_dir : Pathname.t Lazy.t
    val module_name_of_filename : Pathname.t -> string
    val module_name_of_pathname : Pathname.t -> string
    val ignore_stdlib : string -> bool
    val non_dependency : string -> string -> unit
    val expand_module :
      Pathname.t list -> Pathname.t -> string list -> Pathname.t list
    val string_list_of_file : string -> string list
    val ocaml_ppflags : Tags.t -> Command.spec
    val ocaml_include_flags : Pathname.t -> Command.spec
    val libraries_of : Pathname.t -> Pathname.t list
    val use_lib : Pathname.t -> Pathname.t -> unit
    val cmi_of : Pathname.t -> Pathname.t
    val ocaml_add_include_flag :
      string -> Command.spec list -> Command.spec list
    val flag_and_dep : Tags.elt list -> Command.spec -> unit
    val pflag_and_dep :
      Tags.elt list -> Tags.elt -> (string -> Command.spec) -> unit
    exception Ocamldep_error of string
    val path_dependencies_of :
      Pathname.t -> ([ `just_try | `mandatory ] * string) list
    val info_libraries : (string, string * bool) Hashtbl.t
    val ocaml_lib :
      ?extern:bool ->
      ?byte:bool ->
      ?native:bool ->
      ?dir:Pathname.t -> ?tag_name:string -> Pathname.t -> unit
  end
module Ocaml_dependencies :
  sig
    exception Circular_dependencies of string list * string
    module type INPUT =
      sig
        val fold_dependencies : (string -> string -> 'a -> 'a) -> 'a -> 'a
        val fold_libraries : (string -> string list -> 'a -> 'a) -> 'a -> 'a
        val fold_packages : (string -> string list -> 'a -> 'a) -> 'a -> 'a
      end
    module Make :
      functor (I : INPUT) ->
        sig
          val caml_transitive_closure :
            ?caml_obj_ext:string ->
            ?caml_lib_ext:string ->
            ?pack_mode:bool ->
            ?used_libraries:string list ->
            ?hidden_packages:string list ->
            Pathname.t list -> Pathname.t list
        end
  end
module Ocaml_compiler :
  sig
    val forpack_flags : string -> Tags.t -> Command.spec
    val ocamlc_c : Tags.t -> Pathname.t -> Pathname.t -> Command.t
    val ocamlc_link_lib :
      Tags.t -> Pathname.t list -> Pathname.t -> Command.t
    val ocamlc_link_prog :
      Tags.t -> Pathname.t list -> Pathname.t -> Command.t
    val ocamlc_p : Tags.t -> Pathname.t list -> Pathname.t -> Command.t
    val ocamlopt_c : Tags.t -> Pathname.t -> Pathname.t -> Command.t
    val ocamlopt_link_lib :
      Tags.t -> Pathname.t list -> Pathname.t -> Command.t
    val ocamlopt_link_shared_lib :
      Tags.t -> Pathname.t list -> Pathname.t -> Command.t
    val ocamlopt_link_prog :
      Tags.t -> Pathname.t list -> Pathname.t -> Command.t
    val ocamlopt_p : Tags.t -> Pathname.t list -> Pathname.t -> Command.t
    val ocamlmklib : Tags.t -> Pathname.t list -> Pathname.t -> Command.t
    val ocamlmktop : Tags.t -> Pathname.t list -> Pathname.t -> Command.t
    val prepare_compile : Rule.builder -> Pathname.t -> unit
    val compile_ocaml_interf : string -> string -> Rule.action
    val byte_compile_ocaml_interf : string -> string -> Rule.action
    val byte_compile_ocaml_implem :
      ?tag:string -> string -> string -> Rule.action
    val prepare_link :
      Pathname.t -> Pathname.t -> string list -> Rule.builder -> unit
    val native_compile_ocaml_implem :
      ?tag:string -> ?cmx_ext:string -> string -> Rule.action
    val prepare_libs :
      string -> string -> Pathname.t -> Rule.builder -> Pathname.t list
    val link_gen :
      string ->
      string ->
      string ->
      string list ->
      (Tags.t -> Pathname.t list -> Pathname.t -> Command.t) ->
      (Tags.t -> Tags.t) -> string -> string -> Rule.action
    val byte_link : string -> string -> Rule.action
    val byte_output_obj : string -> string -> Rule.action
    val byte_output_shared : string -> string -> Rule.action
    val byte_library_link : string -> string -> Rule.action
    val byte_debug_link : string -> string -> Rule.action
    val byte_debug_library_link : string -> string -> Rule.action
    val native_link : string -> string -> Rule.action
    val native_output_obj : string -> string -> Rule.action
    val native_output_shared : string -> string -> Rule.action
    val native_library_link : string -> string -> Rule.action
    val native_shared_library_link :
      ?tags:string list -> string -> string -> Rule.action
    val native_profile_link : string -> string -> Rule.action
    val native_profile_library_link : string -> string -> Rule.action
    val link_modules :
      (Pathname.t * string list) list ->
      string ->
      string ->
      string ->
      (Tags.t -> Pathname.t list -> Pathname.t -> Command.t) ->
      (Tags.t -> Tags.t) -> string list -> string -> Rule.action
    val pack_modules :
      (Pathname.t * string list) list ->
      string ->
      string ->
      string ->
      (Tags.t -> Pathname.t list -> Pathname.t -> Command.t) ->
      (Tags.t -> Tags.t) -> string list -> string -> Rule.action
    val byte_library_link_modules : string list -> string -> Rule.action
    val byte_library_link_mllib : string -> string -> Rule.action
    val byte_debug_library_link_modules :
      string list -> string -> Rule.action
    val byte_debug_library_link_mllib : string -> string -> Rule.action
    val byte_pack_modules : string list -> string -> Rule.action
    val byte_pack_mlpack : string -> string -> Rule.action
    val byte_debug_pack_modules : string list -> string -> Rule.action
    val byte_debug_pack_mlpack : string -> string -> Rule.action
    val byte_toplevel_link_modules : string list -> string -> Rule.action
    val byte_toplevel_link_mltop : string -> string -> Rule.action
    val native_pack_modules : string list -> string -> Rule.action
    val native_pack_mlpack : string -> string -> Rule.action
    val native_library_link_modules : string list -> string -> Rule.action
    val native_library_link_mllib : string -> string -> Rule.action
    val native_shared_library_link_modules :
      string list -> string -> Rule.action
    val native_shared_library_link_mldylib : string -> string -> Rule.action
    val native_profile_pack_modules : string list -> string -> Rule.action
    val native_profile_pack_mlpack : string -> string -> Rule.action
    val native_profile_library_link_modules :
      string list -> string -> Rule.action
    val native_profile_library_link_mllib : string -> string -> Rule.action
    val native_profile_shared_library_link_modules :
      string list -> string -> Rule.action
    val native_profile_shared_library_link_mldylib :
      string -> string -> Rule.action
    val hide_package_contents : string -> unit
  end
module Ocaml_tools :
  sig
    val ocamldoc_c : Tags.t -> string -> string -> Command.t
    val ocamldoc_l_dir :
      Tags.t -> string list -> string -> string -> Command.t
    val ocamldoc_l_file :
      Tags.t -> string list -> string -> string -> Command.t
    val ocamldep_command : string -> string -> Rule.action
    val menhir_ocamldep_command : string -> string -> Rule.action
    val menhir_modular_ocamldep_command : string -> string -> Rule.action
    val menhir_modular : string -> string -> string -> Rule.action
    val ocamlyacc : string -> Rule.action
    val ocamllex : string -> Rule.action
    val menhir : string -> Rule.action
    val infer_interface : string -> string -> Rule.action
    val document_ocaml_interf : string -> string -> Rule.action
    val document_ocaml_implem : string -> string -> Rule.action
    val document_ocaml_project :
      ?ocamldoc:(Tags.t -> string list -> string -> string -> Command.t) ->
      ?tags:string list -> string -> string -> string -> Rule.action
    val camlp4 :
      ?default:Command.spec ->
      Tags.elt -> Pathname.t -> Pathname.t -> Rule.action
  end
module Ocaml_specific : sig val init : unit -> unit end
module Exit_codes :
  sig
    val rc_ok : int
    val rc_usage : int
    val rc_failure : int
    val rc_invalid_argument : int
    val rc_system_error : int
    val rc_hygiene : int
    val rc_circularity : int
    val rc_solver_failed : int
    val rc_ocamldep_error : int
    val rc_lexing_error : int
    val rc_build_error : int
    val rc_executor_subcommand_failed : int
    val rc_executor_subcommand_got_signal : int
    val rc_executor_io_error : int
    val rc_executor_excetptional_condition : int
  end
module Plugin :
  sig
    val execute_plugin_if_needed : unit -> unit
    val we_need_a_plugin : unit -> bool
  end
module Hooks :
  sig
    type message =
        Before_hygiene
      | After_hygiene
      | Before_options
      | After_options
      | Before_rules
      | After_rules
    val setup_hooks : (message -> unit) -> unit
    val call_hook : message -> unit
  end("DEBUG:rule", [Tag3 (("Const", 1446), 0, (Tag1 ([Tag3 (("Source", 1489), 0, (Tag1 ([(("file", 1490), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10), 0, (("src/const.ml", 2, 23, 29), ("src/const.ml", 2, 23, 33), 0), 0, Tag1 ("Const", 0)), 0); (("command_line", 1491), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -9), 0, (("src/const.ml", 3, 43, 49), ("src/const.ml", 3, 43, 61), 0), 0, Tag1 ("Const", 1)), 0); (("path", 1492), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -8), 0, (("src/const.ml", 4, 79, 85), ("src/const.ml", 4, 79, 89), 0), 0, Tag1 ("Const", 2)), 0); (("ocamlfind_query", 1493), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -7), 0, (("src/const.ml", 5, 99, 105), ("src/const.ml", 5, 99, 120), 0), 0, Tag1 ("Const", 3)), 0); (("ocamldep", 1494), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6), 0, (("src/const.ml", 6, 141, 147), ("src/const.ml", 6, 141, 155), 0), 0, Tag1 ("Const", 4)), 0); (("target_pattern", 1495), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5), 0, (("src/const.ml", 7, 169, 175), ("src/const.ml", 7, 169, 189), 0), 0, Tag1 ("Const", 5)), 0); (("builtin", 1496), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4), 0, (("src/const.ml", 8, 209, 215), ("src/const.ml", 8, 209, 222), 0), 0, Tag1 ("Const", 6)), 0); (("configuration", 1497), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3), 0, (("src/const.ml", 9, 249, 255), ("src/const.ml", 9, 249, 268), 0), 0, Tag1 ("Const", 7)), 0); (("plugin_tag", 1498), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2), 0, (("src/const.ml", 10, 287, 293), ("src/const.ml", 10, 287, 303), 0), 0, Tag1 ("Const", 8)), 0)]), 0, (("src/const.ml", 1, 0, 0), ("src/const.ml", 11, 319, 322), 0), Tag1 ("Const", 9)), 0, 0)]), 0, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), Tag1 ("", 0)), 0, 0); Tag3 (("Loc", 1447), 0, (Tag1 ([Tag1 (("source", 1499), (0, 0, 0, 1, ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -31)), 0, 0, 0, 0, (("src/loc.mli", 1, 0, 0), ("src/loc.mli", 1, 0, 20), 0), 0, 0, 0, Tag1 ("Loc", 0)), 1, 0); Tag1 (("location", 1500), (0, 0, 0, 1, ((Tag2 ([(Tag3 ((("source", 1499)), 0, (0)), 100000000, 0, -28); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -29); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -30)]), 100000000, 0, -27)), 0, 0, 0, 0, (("src/loc.mli", 2, 21, 21), ("src/loc.mli", 2, 21, 79), 0), 0, 0, 0, Tag1 ("Loc", 1)), 1, 0); (("print_loc", 1501), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -26), (Tag1 (0, (Tag3 ((("location", 1500)), 0, (0)), 100000000, 0, -25), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -24), 0), 100000000, 0, -23), 0), 100000000, 0, -22), 0, (("src/loc.mli", 4, 81, 81), ("src/loc.mli", 4, 81, 133), 0), 0, Tag1 ("Loc", 2)), 0); (("print_loc_option", 1502), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -21), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("location", 1500)), 0, (0)), 100000000, 0, -20)], (0)), 100000000, 0, -19), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -18), 0), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("src/loc.mli", 5, 134, 134), ("src/loc.mli", 5, 134, 200), 0), 0, Tag1 ("Loc", 3)), 0); (("of_lexbuf", 1503), ((Tag1 (0, (Tag3 ((("source", 1499)), 0, (0)), 100000000, 0, -15), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -14), (Tag3 ((("location", 1500)), 0, (0)), 100000000, 0, -13), 0), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("src/loc.mli", 7, 202, 202), ("src/loc.mli", 7, 202, 253), 0), 0, Tag1 ("Loc", 4)), 0)]), 0, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), Tag1 ("", 1)), 0, 0); Tag3 (("Discard_printf", 1448), 0, (Tag1 ([(("discard_printf", 1504), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format"), [((("a")), 100000000, 0, -33); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -35); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -36)], (0)), 100000000, 0, -34), ((("a")), 100000000, 0, -33), 0), 100000000, 0, -32), 0, (("src/discard_printf.mli", 21, 1076, 1076), ("src/discard_printf.mli", 21, 1076, 1130), 0), 0, Tag1 ("Discard_printf", 0)), 0)]), 0, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), Tag1 ("", 2)), 0, 0); Tag3 (("Signatures", 1449), 0, (Tag1 ([Tag4 (("OrderedTypePrintable", 1505), ((Tag1 ([Tag1 (("t", 1520), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/signatures.mli", 20, 1080, 1082), ("src/signatures.mli", 20, 1080, 1088), 0), 0, 0, 0, Tag1 ("Signatures", 0)), 1, 0); (("compare", 1521), ((Tag1 (0, (Tag3 ((("t", 1520)), 0, (0)), 100000000, 0, -46), (Tag1 (0, (Tag3 ((("t", 1520)), 0, (0)), 100000000, 0, -45), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -44), 0), 100000000, 0, -43), 0), 100000000, 0, -42), 0, (("src/signatures.mli", 21, 1089, 1091), ("src/signatures.mli", 21, 1089, 1118), 0), 0, Tag1 ("Signatures", 1)), 0); (("print", 1522), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -41), (Tag1 (0, (Tag3 ((("t", 1520)), 0, (0)), 100000000, 0, -40), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -39), 0), 100000000, 0, -38), 0), 100000000, 0, -37), 0, (("src/signatures.mli", 22, 1119, 1121), ("src/signatures.mli", 22, 1119, 1162), 0), 0, Tag1 ("Signatures", 2)), 0)])), 0, (("src/signatures.mli", 19, 1041, 1041), ("src/signatures.mli", 23, 1163, 1166), 0), Tag1 ("Signatures", 3)), 0); Tag4 (("SET", 1506), ((Tag1 ([Tag1 (("elt", 1523), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("set.mli", 71, 2846, 2850), ("set.mli", 71, 2846, 2858), 0), 0, 0, 0, Tag1 ("Stdlib__Set", 3)), 1, 0); Tag1 (("t", 1524), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("set.mli", 74, 2901, 2905), ("set.mli", 74, 2901, 2911), 0), 0, 0, 0, Tag1 ("Stdlib__Set", 4)), 1, 0); (("empty", 1525), ((Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -284), 0, (("set.mli", 77, 2942, 2946), ("set.mli", 77, 2942, 2958), 0), 0, Tag1 ("Stdlib__Set", 5)), 0); (("add", 1526), ((Tag1 (0, (Tag3 ((("elt", 1523)), 0, (0)), 100000000, 0, -283), (Tag1 (0, (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -282), (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -281), 0), 100000000, 0, -280), 0), 100000000, 0, -279), 0, (("set.mli", 80, 2986, 2990), ("set.mli", 80, 2986, 3012), 0), 0, Tag1 ("Stdlib__Set", 6)), 0); (("singleton", 1527), ((Tag1 (0, (Tag3 ((("elt", 1523)), 0, (0)), 100000000, 0, -278), (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -277), 0), 100000000, 0, -276), 0, (("set.mli", 86, 3278, 3282), ("set.mli", 86, 3278, 3305), 0), 0, Tag1 ("Stdlib__Set", 7)), 0); (("remove", 1528), ((Tag1 (0, (Tag3 ((("elt", 1523)), 0, (0)), 100000000, 0, -275), (Tag1 (0, (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -274), (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -273), 0), 100000000, 0, -272), 0), 100000000, 0, -271), 0, (("set.mli", 89, 3381, 3385), ("set.mli", 89, 3381, 3410), 0), 0, Tag1 ("Stdlib__Set", 8)), 0); (("union", 1529), ((Tag1 (0, (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -270), (Tag1 (0, (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -269), (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -268), 0), 100000000, 0, -267), 0), 100000000, 0, -266), 0, (("set.mli", 95, 3677, 3681), ("set.mli", 95, 3677, 3703), 0), 0, Tag1 ("Stdlib__Set", 9)), 0); (("inter", 1530), ((Tag1 (0, (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -265), (Tag1 (0, (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -264), (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -263), 0), 100000000, 0, -262), 0), 100000000, 0, -261), 0, (("set.mli", 98, 3727, 3731), ("set.mli", 98, 3727, 3753), 0), 0, Tag1 ("Stdlib__Set", 10)), 0); (("disjoint", 1531), ((Tag1 (0, (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -260), (Tag1 (0, (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -259), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -258), 0), 100000000, 0, -257), 0), 100000000, 0, -256), 0, (("set.mli", 101, 3784, 3788), ("set.mli", 101, 3784, 3816), 0), 0, Tag1 ("Stdlib__Set", 11)), 0); (("diff", 1532), ((Tag1 (0, (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -255), (Tag1 (0, (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -254), (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -253), 0), 100000000, 0, -252), 0), 100000000, 0, -251), 0, (("set.mli", 105, 3880, 3884), ("set.mli", 105, 3880, 3905), 0), 0, Tag1 ("Stdlib__Set", 12)), 0); (("cardinal", 1533), ((Tag1 (0, (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -250), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -249), 0), 100000000, 0, -248), 0, (("set.mli", 109, 4007, 4011), ("set.mli", 109, 4007, 4033), 0), 0, Tag1 ("Stdlib__Set", 13)), 0); (("elements", 1534), ((Tag1 (0, (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -247), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 1523)), 0, (0)), 100000000, 0, -246)], (0)), 100000000, 0, -245), 0), 100000000, 0, -244), 0, (("set.mli", 114, 4120, 4124), ("set.mli", 114, 4120, 4151), 0), 0, Tag1 ("Stdlib__Set", 14)), 0); (("min_elt", 1535), ((Tag1 (0, (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -243), (Tag3 ((("elt", 1523)), 0, (0)), 100000000, 0, -242), 0), 100000000, 0, -241), 0, (("set.mli", 120, 4380, 4384), ("set.mli", 120, 4380, 4405), 0), 0, Tag1 ("Stdlib__Set", 15)), 0); (("min_elt_opt", 1536), ((Tag1 (0, (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -240), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1523)), 0, (0)), 100000000, 0, -239)], (0)), 100000000, 0, -238), 0), 100000000, 0, -237), 0, (("set.mli", 125, 4567, 4571), ("set.mli", 125, 4567, 4603), 0), 0, Tag1 ("Stdlib__Set", 16)), 0); (("max_elt", 1537), ((Tag1 (0, (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -236), (Tag3 ((("elt", 1523)), 0, (0)), 100000000, 0, -235), 0), 100000000, 0, -234), 0, (("set.mli", 131, 4774, 4778), ("set.mli", 131, 4774, 4799), 0), 0, Tag1 ("Stdlib__Set", 17)), 0); (("max_elt_opt", 1538), ((Tag1 (0, (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -233), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1523)), 0, (0)), 100000000, 0, -232)], (0)), 100000000, 0, -231), 0), 100000000, 0, -230), 0, (("set.mli", 135, 4890, 4894), ("set.mli", 135, 4890, 4926), 0), 0, Tag1 ("Stdlib__Set", 18)), 0); (("choose", 1539), ((Tag1 (0, (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -229), (Tag3 ((("elt", 1523)), 0, (0)), 100000000, 0, -228), 0), 100000000, 0, -227), 0, (("set.mli", 140, 5041, 5045), ("set.mli", 140, 5041, 5065), 0), 0, Tag1 ("Stdlib__Set", 19)), 0); (("choose_opt", 1540), ((Tag1 (0, (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -226), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1523)), 0, (0)), 100000000, 0, -225)], (0)), 100000000, 0, -224), 0), 100000000, 0, -223), 0, (("set.mli", 145, 5263, 5267), ("set.mli", 145, 5263, 5298), 0), 0, Tag1 ("Stdlib__Set", 20)), 0); (("find", 1541), ((Tag1 (0, (Tag3 ((("elt", 1523)), 0, (0)), 100000000, 0, -222), (Tag1 (0, (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -221), (Tag3 ((("elt", 1523)), 0, (0)), 100000000, 0, -220), 0), 100000000, 0, -219), 0), 100000000, 0, -218), 0, (("set.mli", 153, 5541, 5549), ("set.mli", 153, 5541, 5574), 0), 0, Tag1 ("Stdlib__Set", 21)), 0); (("find_opt", 1542), ((Tag1 (0, (Tag3 ((("elt", 1523)), 0, (0)), 100000000, 0, -217), (Tag1 (0, (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -216), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1523)), 0, (0)), 100000000, 0, -215)], (0)), 100000000, 0, -214), 0), 100000000, 0, -213), 0), 100000000, 0, -212), 0, (("set.mli", 159, 5752, 5756), ("set.mli", 159, 5752, 5792), 0), 0, Tag1 ("Stdlib__Set", 22)), 0); (("find_first", 1543), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1523)), 0, (0)), 100000000, 0, -211), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -210), 0), 100000000, 0, -209), (Tag1 (0, (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -208), (Tag3 ((("elt", 1523)), 0, (0)), 100000000, 0, -207), 0), 100000000, 0, -206), 0), 100000000, 0, -205), 0, (("set.mli", 165, 5963, 5967), ("set.mli", 165, 5963, 6008), 0), 0, Tag1 ("Stdlib__Set", 23)), 0); (("find_first_opt", 1544), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1523)), 0, (0)), 100000000, 0, -204), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -203), 0), 100000000, 0, -202), (Tag1 (0, (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -201), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1523)), 0, (0)), 100000000, 0, -200)], (0)), 100000000, 0, -199), 0), 100000000, 0, -198), 0), 100000000, 0, -197), 0, (("set.mli", 177, 6482, 6486), ("set.mli", 177, 6482, 6538), 0), 0, Tag1 ("Stdlib__Set", 24)), 0); (("find_last", 1545), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1523)), 0, (0)), 100000000, 0, -196), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -195), 0), 100000000, 0, -194), (Tag1 (0, (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -193), (Tag3 ((("elt", 1523)), 0, (0)), 100000000, 0, -192), 0), 100000000, 0, -191), 0), 100000000, 0, -190), 0, (("set.mli", 184, 6779, 6783), ("set.mli", 184, 6779, 6823), 0), 0, Tag1 ("Stdlib__Set", 25)), 0); (("find_last_opt", 1546), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1523)), 0, (0)), 100000000, 0, -189), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -188), 0), 100000000, 0, -187), (Tag1 (0, (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -186), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1523)), 0, (0)), 100000000, 0, -185)], (0)), 100000000, 0, -184), 0), 100000000, 0, -183), 0), 100000000, 0, -182), 0, (("set.mli", 190, 7044, 7048), ("set.mli", 190, 7044, 7099), 0), 0, Tag1 ("Stdlib__Set", 26)), 0); (("iter", 1547), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1523)), 0, (0)), 100000000, 0, -181), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -180), 0), 100000000, 0, -179), (Tag1 (0, (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -178), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -177), 0), 100000000, 0, -176), 0), 100000000, 0, -175), 0, (("set.mli", 198, 7371, 7375), ("set.mli", 198, 7371, 7411), 0), 0, Tag1 ("Stdlib__Set", 27)), 0); (("fold", 1548), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1523)), 0, (0)), 100000000, 0, -174), (Tag1 (0, ((("acc")), 100000000, 0, -170), ((("acc")), 100000000, 0, -170), 0), 100000000, 0, -173), 0), 100000000, 0, -172), (Tag1 (0, (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -171), (Tag1 (0, ((("acc")), 100000000, 0, -170), ((("acc")), 100000000, 0, -170), 0), 100000000, 0, -169), 0), 100000000, 0, -168), 0), 100000000, 0, -167), 0, (("set.mli", 203, 7616, 7620), ("set.mli", 203, 7616, 7672), 0), 0, Tag1 ("Stdlib__Set", 28)), 0); (("filter", 1549), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1523)), 0, (0)), 100000000, 0, -166), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -165), 0), 100000000, 0, -164), (Tag1 (0, (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -163), (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -162), 0), 100000000, 0, -161), 0), 100000000, 0, -160), 0, (("set.mli", 221, 8372, 8376), ("set.mli", 221, 8372, 8411), 0), 0, Tag1 ("Stdlib__Set", 30)), 0); (("filter_map", 1550), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1523)), 0, (0)), 100000000, 0, -159), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1523)), 0, (0)), 100000000, 0, -158)], (0)), 100000000, 0, -157), 0), 100000000, 0, -156), (Tag1 (0, (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -155), (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -154), 0), 100000000, 0, -153), 0), 100000000, 0, -152), 0, (("set.mli", 228, 8710, 8714), ("set.mli", 228, 8710, 8759), 0), 0, Tag1 ("Stdlib__Set", 31)), 0); (("partition", 1551), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1523)), 0, (0)), 100000000, 0, -151), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -150), 0), 100000000, 0, -149), (Tag1 (0, (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -148), (Tag2 ([(Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -146); (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -147)]), 100000000, 0, -145), 0), 100000000, 0, -144), 0), 100000000, 0, -143), 0, (("set.mli", 243, 9275, 9279), ("set.mli", 243, 9275, 9321), 0), 0, Tag1 ("Stdlib__Set", 32)), 0); (("split", 1552), ((Tag1 (0, (Tag3 ((("elt", 1523)), 0, (0)), 100000000, 0, -142), (Tag1 (0, (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -141), (Tag2 ([(Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -138); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -139); (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -140)]), 100000000, 0, -137), 0), 100000000, 0, -136), 0), 100000000, 0, -135), 0, (("set.mli", 249, 9562, 9566), ("set.mli", 249, 9562, 9601), 0), 0, Tag1 ("Stdlib__Set", 33)), 0); (("is_empty", 1553), ((Tag1 (0, (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -134), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -133), 0), 100000000, 0, -132), 0, (("set.mli", 260, 10020, 10024), ("set.mli", 260, 10020, 10047), 0), 0, Tag1 ("Stdlib__Set", 34)), 0); (("mem", 1554), ((Tag1 (0, (Tag3 ((("elt", 1523)), 0, (0)), 100000000, 0, -131), (Tag1 (0, (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -130), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -129), 0), 100000000, 0, -128), 0), 100000000, 0, -127), 0, (("set.mli", 263, 10096, 10100), ("set.mli", 263, 10096, 10125), 0), 0, Tag1 ("Stdlib__Set", 35)), 0); (("equal", 1555), ((Tag1 (0, (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -126), (Tag1 (0, (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -125), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -124), 0), 100000000, 0, -123), 0), 100000000, 0, -122), 0, (("set.mli", 266, 10190, 10194), ("set.mli", 266, 10190, 10219), 0), 0, Tag1 ("Stdlib__Set", 36)), 0); (("compare", 1556), ((Tag1 (0, (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -121), (Tag1 (0, (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -120), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -119), 0), 100000000, 0, -118), 0), 100000000, 0, -117), 0, (("set.mli", 270, 10335, 10339), ("set.mli", 270, 10335, 10365), 0), 0, Tag1 ("Stdlib__Set", 37)), 0); (("subset", 1557), ((Tag1 (0, (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -116), (Tag1 (0, (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -115), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -114), 0), 100000000, 0, -113), 0), 100000000, 0, -112), 0, (("set.mli", 274, 10476, 10480), ("set.mli", 274, 10476, 10506), 0), 0, Tag1 ("Stdlib__Set", 38)), 0); (("for_all", 1558), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1523)), 0, (0)), 100000000, 0, -111), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -110), 0), 100000000, 0, -109), (Tag1 (0, (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -108), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -107), 0), 100000000, 0, -106), 0), 100000000, 0, -105), 0, (("set.mli", 278, 10598, 10602), ("set.mli", 278, 10598, 10641), 0), 0, Tag1 ("Stdlib__Set", 39)), 0); (("exists", 1559), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1523)), 0, (0)), 100000000, 0, -104), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -103), 0), 100000000, 0, -102), (Tag1 (0, (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -101), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -100), 0), 100000000, 0, -99), 0), 100000000, 0, -98), 0, (("set.mli", 282, 10737, 10741), ("set.mli", 282, 10737, 10779), 0), 0, Tag1 ("Stdlib__Set", 40)), 0); (("to_list", 1560), ((Tag1 (0, (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -97), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 1523)), 0, (0)), 100000000, 0, -96)], (0)), 100000000, 0, -95), 0), 100000000, 0, -94), 0, (("set.mli", 288, 10922, 10926), ("set.mli", 288, 10922, 10953), 0), 0, Tag1 ("Stdlib__Set", 41)), 0); (("to_seq_from", 1561), ((Tag1 (0, (Tag3 ((("elt", 1523)), 0, (0)), 100000000, 0, -93), (Tag1 (0, (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -92), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 1523)), 0, (0)), 100000000, 0, -91)], (0)), 100000000, 0, -90), 0), 100000000, 0, -89), 0), 100000000, 0, -88), 0, (("set.mli", 298, 11268, 11272), ("set.mli", 298, 11268, 11311), 0), 0, Tag1 ("Stdlib__Set", 43)), 0); (("to_seq", 1562), ((Tag1 (0, (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -87), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 1523)), 0, (0)), 100000000, 0, -86)], (0)), 100000000, 0, -85), 0), 100000000, 0, -84), 0, (("set.mli", 303, 11453, 11457), ("set.mli", 303, 11453, 11484), 0), 0, Tag1 ("Stdlib__Set", 44)), 0); (("to_rev_seq", 1563), ((Tag1 (0, (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -83), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 1523)), 0, (0)), 100000000, 0, -82)], (0)), 100000000, 0, -81), 0), 100000000, 0, -80), 0, (("set.mli", 307, 11562, 11566), ("set.mli", 307, 11562, 11597), 0), 0, Tag1 ("Stdlib__Set", 45)), 0); (("add_seq", 1564), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 1523)), 0, (0)), 100000000, 0, -79)], (0)), 100000000, 0, -78), (Tag1 (0, (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -77), (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -76), 0), 100000000, 0, -75), 0), 100000000, 0, -74), 0, (("set.mli", 311, 11676, 11680), ("set.mli", 311, 11676, 11713), 0), 0, Tag1 ("Stdlib__Set", 46)), 0); (("of_seq", 1565), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 1523)), 0, (0)), 100000000, 0, -73)], (0)), 100000000, 0, -72), (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -71), 0), 100000000, 0, -70), 0, (("set.mli", 315, 11791, 11795), ("set.mli", 315, 11791, 11822), 0), 0, Tag1 ("Stdlib__Set", 47)), 0); (("find_elt", 1566), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1523)), 0, (0)), 100000000, 0, -69), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -68), 0), 100000000, 0, -67), (Tag1 (0, (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -66), (Tag3 ((("elt", 1523)), 0, (0)), 100000000, 0, -65), 0), 100000000, 0, -64), 0), 100000000, 0, -63), 0, (("src/signatures.mli", 27, 1206, 1208), ("src/signatures.mli", 27, 1206, 1248), 0), 0, Tag1 ("Signatures", 4)), 0); (("map", 1567), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1523)), 0, (0)), 100000000, 0, -62), (Tag3 ((("elt", 1523)), 0, (0)), 100000000, 0, -61), 0), 100000000, 0, -60), (Tag1 (0, (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -59), (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -58), 0), 100000000, 0, -57), 0), 100000000, 0, -56), 0, (("src/signatures.mli", 28, 1249, 1251), ("src/signatures.mli", 28, 1249, 1283), 0), 0, Tag1 ("Signatures", 5)), 0); (("of_list", 1568), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 1523)), 0, (0)), 100000000, 0, -55)], (0)), 100000000, 0, -54), (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -53), 0), 100000000, 0, -52), 0, (("src/signatures.mli", 29, 1284, 1286), ("src/signatures.mli", 29, 1284, 1313), 0), 0, Tag1 ("Signatures", 6)), 0); (("print", 1569), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -51), (Tag1 (0, (Tag3 ((("t", 1524)), 0, (0)), 100000000, 0, -50), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -49), 0), 100000000, 0, -48), 0), 100000000, 0, -47), 0, (("src/signatures.mli", 30, 1314, 1316), ("src/signatures.mli", 30, 1314, 1357), 0), 0, Tag1 ("Signatures", 7)), 0)])), 0, (("src/signatures.mli", 25, 1168, 1168), ("src/signatures.mli", 31, 1358, 1361), 0), Tag1 ("Signatures", 8)), 0); Tag4 (("LIST", 1507), ((Tag1 ([(("print", 1570), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -817), (Tag1 (0, ((("a")), 100000000, 0, -812), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -816), 0), 100000000, 0, -815), 0), 100000000, 0, -814), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -813), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -812)], (0)), 100000000, 0, -811), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -810), 0), 100000000, 0, -809), 0), 100000000, 0, -808), 0), 100000000, 0, -807), 0, (("src/signatures.mli", 35, 1410, 1412), ("src/signatures.mli", 35, 1410, 1495), 0), 0, Tag1 ("Signatures", 9)), 0); (("filter_opt", 1571), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -804), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -802)], (0)), 100000000, 0, -806), 0), 100000000, 0, -805), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -804)], (0)), 100000000, 0, -803), (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -802)], (0)), 100000000, 0, -801), 0), 100000000, 0, -800), 0), 100000000, 0, -799), 0, (("src/signatures.mli", 36, 1496, 1498), ("src/signatures.mli", 36, 1496, 1554), 0), 0, Tag1 ("Signatures", 10)), 0); (("union", 1572), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -796)], (0)), 100000000, 0, -798), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -796)], (0)), 100000000, 0, -797), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -796)], (0)), 100000000, 0, -795), 0), 100000000, 0, -794), 0), 100000000, 0, -793), 0, (("src/signatures.mli", 37, 1555, 1557), ("src/signatures.mli", 37, 1555, 1598), 0), 0, Tag1 ("Signatures", 11)), 0); (("ordered_unique", 1573), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -791)], (0)), 100000000, 0, -792), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -791)], (0)), 100000000, 0, -790), 0), 100000000, 0, -789), 0, (("src/signatures.mli", 38, 1599, 1601), ("src/signatures.mli", 38, 1599, 1640), 0), 0, Tag1 ("Signatures", 12)), 0); (("index_of", 1574), ((Tag1 (0, ((("a")), 100000000, 0, -788), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -788)], (0)), 100000000, 0, -787), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -786)], (0)), 100000000, 0, -785), 0), 100000000, 0, -784), 0), 100000000, 0, -783), 0, (("src/signatures.mli", 39, 1641, 1643), ("src/signatures.mli", 39, 1641, 1684), 0), 0, Tag1 ("Signatures", 13)), 0); (("split_at", 1575), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -782), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -779)], (0)), 100000000, 0, -781), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -779)], (0)), 100000000, 0, -778); (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -779)], (0)), 100000000, 0, -780)]), 100000000, 0, -777), 0), 100000000, 0, -776), 0), 100000000, 0, -775), 0, (("src/signatures.mli", 41, 1750, 1752), ("src/signatures.mli", 41, 1750, 1801), 0), 0, Tag1 ("Signatures", 14)), 0); Tag1 (("t", 1576), ([((("a")), 100000000, 0, -773)], 1, Tag1 ([(("[]", 270), (0), 0, (("list.mli", 40, 1940, 1962), ("list.mli", 40, 1940, 1964), 0), 0, Tag1 ("Stdlib__List", 1)); (("::", 271), ([((("a")), 100000000, 0, -773); (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -773)], (0)), 100000000, 0, -774)]), 0, (("list.mli", 40, 1940, 1965), ("list.mli", 40, 1940, 1987), 0), 0, Tag1 ("Stdlib__List", 2))], 0), 1, ((Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -773)], (0)), 100000000, 0, -772)), [25], [0], 0, 0, (("list.mli", 40, 1940, 1940), ("list.mli", 40, 1940, 1987), 0), 0, 0, 0, Tag1 ("Stdlib__List", 0)), 1, 0); (("length", 1577), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -771)], (0)), 100000000, 0, -770), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -769), 0), 100000000, 0, -768), 0, (("list.mli", 43, 2033, 2033), ("list.mli", 43, 2033, 2060), 0), 0, Tag1 ("Stdlib__List", 3)), 0); (("compare_lengths", 1578), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -767)], (0)), 100000000, 0, -766), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -765)], (0)), 100000000, 0, -764), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -763), 0), 100000000, 0, -762), 0), 100000000, 0, -761), 0, (("list.mli", 46, 2127, 2127), ("list.mli", 46, 2127, 2174), 0), 0, Tag1 ("Stdlib__List", 4)), 0); (("compare_length_with", 1579), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -760)], (0)), 100000000, 0, -759), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -758), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -757), 0), 100000000, 0, -756), 0), 100000000, 0, -755), 0, (("list.mli", 53, 2394, 2394), ("list.mli", 53, 2394, 2441), 0), 0, Tag1 ("Stdlib__List", 5)), 0); (("is_empty", 1580), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -754)], (0)), 100000000, 0, -753), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -752), 0), 100000000, 0, -751), 0, (("list.mli", 60, 2665, 2665), ("list.mli", 60, 2665, 2695), 0), 0, Tag1 ("Stdlib__List", 6)), 0); (("cons", 1581), ((Tag1 (0, ((("a")), 100000000, 0, -749), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -749)], (0)), 100000000, 0, -750), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -749)], (0)), 100000000, 0, -748), 0), 100000000, 0, -747), 0), 100000000, 0, -746), 0, (("list.mli", 66, 2832, 2832), ("list.mli", 66, 2832, 2867), 0), 0, Tag1 ("Stdlib__List", 7)), 0); (("hd", 1582), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -744)], (0)), 100000000, 0, -745), ((("a")), 100000000, 0, -744), 0), 100000000, 0, -743), 0, (("list.mli", 71, 2939, 2939), ("list.mli", 71, 2939, 2961), 0), 0, Tag1 ("Stdlib__List", 8)), 0); (("tl", 1583), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -741)], (0)), 100000000, 0, -742), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -741)], (0)), 100000000, 0, -740), 0), 100000000, 0, -739), 0, (("list.mli", 76, 3055, 3055), ("list.mli", 76, 3055, 3082), 0), 0, Tag1 ("Stdlib__List", 9)), 0); (("nth", 1584), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -736)], (0)), 100000000, 0, -738), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -737), ((("a")), 100000000, 0, -736), 0), 100000000, 0, -735), 0), 100000000, 0, -734), 0, (("list.mli", 81, 3181, 3181), ("list.mli", 81, 3181, 3211), 0), 0, Tag1 ("Stdlib__List", 10)), 0); (("nth_opt", 1585), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -731)], (0)), 100000000, 0, -733), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -732), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -731)], (0)), 100000000, 0, -730), 0), 100000000, 0, -729), 0), 100000000, 0, -728), 0, (("list.mli", 88, 3415, 3415), ("list.mli", 88, 3415, 3456), 0), 0, Tag1 ("Stdlib__List", 11)), 0); (("rev", 1586), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -726)], (0)), 100000000, 0, -727), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -726)], (0)), 100000000, 0, -725), 0), 100000000, 0, -724), 0, (("list.mli", 96, 3678, 3678), ("list.mli", 96, 3678, 3706), 0), 0, Tag1 ("Stdlib__List", 12)), 0); (("init", 1587), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -723), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -722), ((("a")), 100000000, 0, -720), 0), 100000000, 0, -721), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -720)], (0)), 100000000, 0, -719), 0), 100000000, 0, -718), 0), 100000000, 0, -717), 0, (("list.mli", 99, 3730, 3730), ("list.mli", 99, 3730, 3770), 0), 0, Tag1 ("Stdlib__List", 13)), 0); (("append", 1588), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -714)], (0)), 100000000, 0, -716), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -714)], (0)), 100000000, 0, -715), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -714)], (0)), 100000000, 0, -713), 0), 100000000, 0, -712), 0), 100000000, 0, -711), 0, (("list.mli", 105, 3909, 3909), ("list.mli", 105, 3909, 3951), 0), 0, Tag1 ("Stdlib__List", 14)), 0); (("rev_append", 1589), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -708)], (0)), 100000000, 0, -710), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -708)], (0)), 100000000, 0, -709), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -708)], (0)), 100000000, 0, -707), 0), 100000000, 0, -706), 0), 100000000, 0, -705), 0, (("list.mli", 111, 4093, 4093), ("list.mli", 111, 4093, 4139), 0), 0, Tag1 ("Stdlib__List", 15)), 0); (("concat", 1590), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -702)], (0)), 100000000, 0, -704)], (0)), 100000000, 0, -703), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -702)], (0)), 100000000, 0, -701), 0), 100000000, 0, -700), 0, (("list.mli", 116, 4260, 4260), ("list.mli", 116, 4260, 4296), 0), 0, Tag1 ("Stdlib__List", 16)), 0); (("flatten", 1591), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -697)], (0)), 100000000, 0, -699)], (0)), 100000000, 0, -698), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -697)], (0)), 100000000, 0, -696), 0), 100000000, 0, -695), 0, (("list.mli", 123, 4521, 4521), ("list.mli", 123, 4521, 4558), 0), 0, Tag1 ("Stdlib__List", 17)), 0); (("equal", 1592), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -690), (Tag1 (0, ((("a")), 100000000, 0, -690), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -694), 0), 100000000, 0, -693), 0), 100000000, 0, -692), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -690)], (0)), 100000000, 0, -691), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -690)], (0)), 100000000, 0, -689), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -688), 0), 100000000, 0, -687), 0), 100000000, 0, -686), 0), 100000000, 0, -685), 0, (("list.mli", 131, 4692, 4692), ("list.mli", 131, 4692, 4752), 0), 0, Tag1 ("Stdlib__List", 18)), 0); (("compare", 1593), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -680), (Tag1 (0, ((("a")), 100000000, 0, -680), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -684), 0), 100000000, 0, -683), 0), 100000000, 0, -682), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -680)], (0)), 100000000, 0, -681), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -680)], (0)), 100000000, 0, -679), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -678), 0), 100000000, 0, -677), 0), 100000000, 0, -676), 0), 100000000, 0, -675), 0, (("list.mli", 145, 5153, 5153), ("list.mli", 145, 5153, 5213), 0), 0, Tag1 ("Stdlib__List", 19)), 0); (("iter", 1594), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -672), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -674), 0), 100000000, 0, -673), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -672)], (0)), 100000000, 0, -671), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -670), 0), 100000000, 0, -669), 0), 100000000, 0, -668), 0, (("list.mli", 164, 5762, 5762), ("list.mli", 164, 5762, 5804), 0), 0, Tag1 ("Stdlib__List", 20)), 0); (("iteri", 1595), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -667), (Tag1 (0, ((("a")), 100000000, 0, -663), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -666), 0), 100000000, 0, -665), 0), 100000000, 0, -664), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -663)], (0)), 100000000, 0, -662), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -661), 0), 100000000, 0, -660), 0), 100000000, 0, -659), 0, (("list.mli", 170, 5937, 5937), ("list.mli", 170, 5937, 5987), 0), 0, Tag1 ("Stdlib__List", 21)), 0); (("map", 1596), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -657), ((("b")), 100000000, 0, -655), 0), 100000000, 0, -658), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -657)], (0)), 100000000, 0, -656), (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -655)], (0)), 100000000, 0, -654), 0), 100000000, 0, -653), 0), 100000000, 0, -652), 0, (("list.mli", 177, 6171, 6171), ("list.mli", 177, 6171, 6213), 0), 0, Tag1 ("Stdlib__List", 22)), 0); (("mapi", 1597), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -651), (Tag1 (0, ((("a")), 100000000, 0, -648), ((("b")), 100000000, 0, -646), 0), 100000000, 0, -650), 0), 100000000, 0, -649), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -648)], (0)), 100000000, 0, -647), (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -646)], (0)), 100000000, 0, -645), 0), 100000000, 0, -644), 0), 100000000, 0, -643), 0, (("list.mli", 183, 6364, 6364), ("list.mli", 183, 6364, 6414), 0), 0, Tag1 ("Stdlib__List", 23)), 0); (("rev_map", 1598), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -641), ((("b")), 100000000, 0, -639), 0), 100000000, 0, -642), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -641)], (0)), 100000000, 0, -640), (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -639)], (0)), 100000000, 0, -638), 0), 100000000, 0, -637), 0), 100000000, 0, -636), 0, (("list.mli", 190, 6597, 6597), ("list.mli", 190, 6597, 6643), 0), 0, Tag1 ("Stdlib__List", 24)), 0); (("filter_map", 1599), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -633), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -631)], (0)), 100000000, 0, -635), 0), 100000000, 0, -634), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -633)], (0)), 100000000, 0, -632), (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -631)], (0)), 100000000, 0, -630), 0), 100000000, 0, -629), 0), 100000000, 0, -628), 0, (("list.mli", 195, 6743, 6743), ("list.mli", 195, 6743, 6799), 0), 0, Tag1 ("Stdlib__List", 25)), 0); (("concat_map", 1600), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -625), (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -623)], (0)), 100000000, 0, -627), 0), 100000000, 0, -626), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -625)], (0)), 100000000, 0, -624), (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -623)], (0)), 100000000, 0, -622), 0), 100000000, 0, -621), 0), 100000000, 0, -620), 0, (("list.mli", 202, 6981, 6981), ("list.mli", 202, 6981, 7035), 0), 0, Tag1 ("Stdlib__List", 26)), 0); (("fold_left_map", 1601), ((Tag1 (0, (Tag1 (0, ((("acc")), 100000000, 0, -612), (Tag1 (0, ((("a")), 100000000, 0, -616), (Tag2 ([((("acc")), 100000000, 0, -612); ((("b")), 100000000, 0, -614)]), 100000000, 0, -619), 0), 100000000, 0, -618), 0), 100000000, 0, -617), (Tag1 (0, ((("acc")), 100000000, 0, -612), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -616)], (0)), 100000000, 0, -615), (Tag2 ([((("acc")), 100000000, 0, -612); (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -614)], (0)), 100000000, 0, -613)]), 100000000, 0, -611), 0), 100000000, 0, -610), 0), 100000000, 0, -609), 0), 100000000, 0, -608), 0, (("list.mli", 208, 7150, 7150), ("list.mli", 209, 7170, 7234), 0), 0, Tag1 ("Stdlib__List", 27)), 0); (("fold_left", 1602), ((Tag1 (0, (Tag1 (0, ((("acc")), 100000000, 0, -603), (Tag1 (0, ((("a")), 100000000, 0, -605), ((("acc")), 100000000, 0, -603), 0), 100000000, 0, -607), 0), 100000000, 0, -606), (Tag1 (0, ((("acc")), 100000000, 0, -603), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -605)], (0)), 100000000, 0, -604), ((("acc")), 100000000, 0, -603), 0), 100000000, 0, -602), 0), 100000000, 0, -601), 0), 100000000, 0, -600), 0, (("list.mli", 215, 7372, 7372), ("list.mli", 215, 7372, 7435), 0), 0, Tag1 ("Stdlib__List", 28)), 0); (("fold_right", 1603), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -597), (Tag1 (0, ((("acc")), 100000000, 0, -595), ((("acc")), 100000000, 0, -595), 0), 100000000, 0, -599), 0), 100000000, 0, -598), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -597)], (0)), 100000000, 0, -596), (Tag1 (0, ((("acc")), 100000000, 0, -595), ((("acc")), 100000000, 0, -595), 0), 100000000, 0, -594), 0), 100000000, 0, -593), 0), 100000000, 0, -592), 0, (("list.mli", 220, 7521, 7521), ("list.mli", 220, 7521, 7585), 0), 0, Tag1 ("Stdlib__List", 29)), 0); (("iter2", 1604), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -588), (Tag1 (0, ((("b")), 100000000, 0, -586), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -591), 0), 100000000, 0, -590), 0), 100000000, 0, -589), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -588)], (0)), 100000000, 0, -587), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -586)], (0)), 100000000, 0, -585), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -584), 0), 100000000, 0, -583), 0), 100000000, 0, -582), 0), 100000000, 0, -581), 0, (("list.mli", 229, 7729, 7729), ("list.mli", 229, 7729, 7789), 0), 0, Tag1 ("Stdlib__List", 30)), 0); (("map2", 1605), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -578), (Tag1 (0, ((("b")), 100000000, 0, -576), ((("c")), 100000000, 0, -574), 0), 100000000, 0, -580), 0), 100000000, 0, -579), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -578)], (0)), 100000000, 0, -577), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -576)], (0)), 100000000, 0, -575), (Tag3 ((Tag3 ("list", 9)), [((("c")), 100000000, 0, -574)], (0)), 100000000, 0, -573), 0), 100000000, 0, -572), 0), 100000000, 0, -571), 0), 100000000, 0, -570), 0, (("list.mli", 236, 7968, 7968), ("list.mli", 236, 7968, 8028), 0), 0, Tag1 ("Stdlib__List", 31)), 0); (("rev_map2", 1606), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -567), (Tag1 (0, ((("b")), 100000000, 0, -565), ((("c")), 100000000, 0, -563), 0), 100000000, 0, -569), 0), 100000000, 0, -568), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -567)], (0)), 100000000, 0, -566), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -565)], (0)), 100000000, 0, -564), (Tag3 ((Tag3 ("list", 9)), [((("c")), 100000000, 0, -563)], (0)), 100000000, 0, -562), 0), 100000000, 0, -561), 0), 100000000, 0, -560), 0), 100000000, 0, -559), 0, (("list.mli", 243, 8197, 8197), ("list.mli", 243, 8197, 8261), 0), 0, Tag1 ("Stdlib__List", 32)), 0); (("fold_left2", 1607), ((Tag1 (0, (Tag1 (0, ((("acc")), 100000000, 0, -551), (Tag1 (0, ((("a")), 100000000, 0, -555), (Tag1 (0, ((("b")), 100000000, 0, -553), ((("acc")), 100000000, 0, -551), 0), 100000000, 0, -558), 0), 100000000, 0, -557), 0), 100000000, 0, -556), (Tag1 (0, ((("acc")), 100000000, 0, -551), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -555)], (0)), 100000000, 0, -554), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -553)], (0)), 100000000, 0, -552), ((("acc")), 100000000, 0, -551), 0), 100000000, 0, -550), 0), 100000000, 0, -549), 0), 100000000, 0, -548), 0), 100000000, 0, -547), 0, (("list.mli", 248, 8371, 8371), ("list.mli", 249, 8388, 8454), 0), 0, Tag1 ("Stdlib__List", 33)), 0); (("fold_right2", 1608), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -543), (Tag1 (0, ((("b")), 100000000, 0, -541), (Tag1 (0, ((("acc")), 100000000, 0, -539), ((("acc")), 100000000, 0, -539), 0), 100000000, 0, -546), 0), 100000000, 0, -545), 0), 100000000, 0, -544), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -543)], (0)), 100000000, 0, -542), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -541)], (0)), 100000000, 0, -540), (Tag1 (0, ((("acc")), 100000000, 0, -539), ((("acc")), 100000000, 0, -539), 0), 100000000, 0, -538), 0), 100000000, 0, -537), 0), 100000000, 0, -536), 0), 100000000, 0, -535), 0, (("list.mli", 256, 8653, 8653), ("list.mli", 257, 8671, 8737), 0), 0, Tag1 ("Stdlib__List", 34)), 0); (("for_all", 1609), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -532), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -534), 0), 100000000, 0, -533), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -532)], (0)), 100000000, 0, -531), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -530), 0), 100000000, 0, -529), 0), 100000000, 0, -528), 0, (("list.mli", 268, 8985, 8985), ("list.mli", 268, 8985, 9030), 0), 0, Tag1 ("Stdlib__List", 35)), 0); (("exists", 1610), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -525), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -527), 0), 100000000, 0, -526), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -525)], (0)), 100000000, 0, -524), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -523), 0), 100000000, 0, -522), 0), 100000000, 0, -521), 0, (("list.mli", 275, 9247, 9247), ("list.mli", 275, 9247, 9291), 0), 0, Tag1 ("Stdlib__List", 36)), 0); (("for_all2", 1611), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -517), (Tag1 (0, ((("b")), 100000000, 0, -515), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -520), 0), 100000000, 0, -519), 0), 100000000, 0, -518), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -517)], (0)), 100000000, 0, -516), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -515)], (0)), 100000000, 0, -514), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -513), 0), 100000000, 0, -512), 0), 100000000, 0, -511), 0), 100000000, 0, -510), 0, (("list.mli", 282, 9518, 9518), ("list.mli", 282, 9518, 9581), 0), 0, Tag1 ("Stdlib__List", 37)), 0); (("exists2", 1612), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -506), (Tag1 (0, ((("b")), 100000000, 0, -504), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -509), 0), 100000000, 0, -508), 0), 100000000, 0, -507), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -506)], (0)), 100000000, 0, -505), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -504)], (0)), 100000000, 0, -503), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -502), 0), 100000000, 0, -501), 0), 100000000, 0, -500), 0), 100000000, 0, -499), 0, (("list.mli", 288, 9734, 9734), ("list.mli", 288, 9734, 9796), 0), 0, Tag1 ("Stdlib__List", 38)), 0); (("mem", 1613), ((Tag1 (0, ((("a")), 100000000, 0, -498), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -498)], (0)), 100000000, 0, -497), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -496), 0), 100000000, 0, -495), 0), 100000000, 0, -494), 0, (("list.mli", 294, 9948, 9948), ("list.mli", 294, 9948, 9979), 0), 0, Tag1 ("Stdlib__List", 39)), 0); (("memq", 1614), ((Tag1 (0, ((("a")), 100000000, 0, -493), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -493)], (0)), 100000000, 0, -492), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -491), 0), 100000000, 0, -490), 0), 100000000, 0, -489), 0, (("list.mli", 299, 10064, 10064), ("list.mli", 299, 10064, 10096), 0), 0, Tag1 ("Stdlib__List", 40)), 0); (("find", 1615), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -485), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -488), 0), 100000000, 0, -487), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -485)], (0)), 100000000, 0, -486), ((("a")), 100000000, 0, -485), 0), 100000000, 0, -484), 0), 100000000, 0, -483), 0, (("list.mli", 308, 10238, 10238), ("list.mli", 308, 10238, 10278), 0), 0, Tag1 ("Stdlib__List", 41)), 0); (("find_opt", 1616), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -479), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -482), 0), 100000000, 0, -481), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -479)], (0)), 100000000, 0, -480), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -479)], (0)), 100000000, 0, -478), 0), 100000000, 0, -477), 0), 100000000, 0, -476), 0, (("list.mli", 315, 10458, 10458), ("list.mli", 315, 10458, 10509), 0), 0, Tag1 ("Stdlib__List", 42)), 0); (("find_index", 1617), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -473), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -475), 0), 100000000, 0, -474), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -473)], (0)), 100000000, 0, -472), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -471)], (0)), 100000000, 0, -470), 0), 100000000, 0, -469), 0), 100000000, 0, -468), 0, (("list.mli", 323, 10702, 10702), ("list.mli", 323, 10702, 10756), 0), 0, Tag1 ("Stdlib__List", 43)), 0); (("find_map", 1618), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -465), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -463)], (0)), 100000000, 0, -467), 0), 100000000, 0, -466), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -465)], (0)), 100000000, 0, -464), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -463)], (0)), 100000000, 0, -462), 0), 100000000, 0, -461), 0), 100000000, 0, -460), 0, (("list.mli", 331, 10982, 10982), ("list.mli", 331, 10982, 11038), 0), 0, Tag1 ("Stdlib__List", 44)), 0); (("find_mapi", 1619), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -459), (Tag1 (0, ((("a")), 100000000, 0, -455), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -453)], (0)), 100000000, 0, -458), 0), 100000000, 0, -457), 0), 100000000, 0, -456), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -455)], (0)), 100000000, 0, -454), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -453)], (0)), 100000000, 0, -452), 0), 100000000, 0, -451), 0), 100000000, 0, -450), 0, (("list.mli", 338, 11207, 11207), ("list.mli", 338, 11207, 11271), 0), 0, Tag1 ("Stdlib__List", 45)), 0); (("filter", 1620), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -446), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -449), 0), 100000000, 0, -448), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -446)], (0)), 100000000, 0, -447), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -446)], (0)), 100000000, 0, -445), 0), 100000000, 0, -444), 0), 100000000, 0, -443), 0, (("list.mli", 345, 11458, 11458), ("list.mli", 345, 11458, 11505), 0), 0, Tag1 ("Stdlib__List", 46)), 0); (("find_all", 1621), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -439), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -442), 0), 100000000, 0, -441), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -439)], (0)), 100000000, 0, -440), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -439)], (0)), 100000000, 0, -438), 0), 100000000, 0, -437), 0), 100000000, 0, -436), 0, (("list.mli", 351, 11665, 11665), ("list.mli", 351, 11665, 11714), 0), 0, Tag1 ("Stdlib__List", 47)), 0); (("filteri", 1622), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -435), (Tag1 (0, ((("a")), 100000000, 0, -430), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -434), 0), 100000000, 0, -433), 0), 100000000, 0, -432), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -430)], (0)), 100000000, 0, -431), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -430)], (0)), 100000000, 0, -429), 0), 100000000, 0, -428), 0), 100000000, 0, -427), 0, (("list.mli", 355, 11766, 11766), ("list.mli", 355, 11766, 11821), 0), 0, Tag1 ("Stdlib__List", 48)), 0); (("partition", 1623), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -422), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -426), 0), 100000000, 0, -425), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -422)], (0)), 100000000, 0, -424), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -422)], (0)), 100000000, 0, -421); (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -422)], (0)), 100000000, 0, -423)]), 100000000, 0, -420), 0), 100000000, 0, -419), 0), 100000000, 0, -418), 0, (("list.mli", 362, 12007, 12007), ("list.mli", 362, 12007, 12067), 0), 0, Tag1 ("Stdlib__List", 49)), 0); (("partition_map", 1624), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -415), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Either"), "t"), [((("b")), 100000000, 0, -411); ((("c")), 100000000, 0, -413)], (0)), 100000000, 0, -417), 0), 100000000, 0, -416), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -415)], (0)), 100000000, 0, -414), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -411)], (0)), 100000000, 0, -410); (Tag3 ((Tag3 ("list", 9)), [((("c")), 100000000, 0, -413)], (0)), 100000000, 0, -412)]), 100000000, 0, -409), 0), 100000000, 0, -408), 0), 100000000, 0, -407), 0, (("list.mli", 370, 12354, 12354), ("list.mli", 370, 12354, 12431), 0), 0, Tag1 ("Stdlib__List", 50)), 0); (("assoc", 1625), ((Tag1 (0, ((("a")), 100000000, 0, -406), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("a")), 100000000, 0, -406); ((("b")), 100000000, 0, -403)]), 100000000, 0, -405)], (0)), 100000000, 0, -404), ((("b")), 100000000, 0, -403), 0), 100000000, 0, -402), 0), 100000000, 0, -401), 0, (("list.mli", 389, 12959, 12959), ("list.mli", 389, 12959, 12997), 0), 0, Tag1 ("Stdlib__List", 51)), 0); (("assoc_opt", 1626), ((Tag1 (0, ((("a")), 100000000, 0, -400), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("a")), 100000000, 0, -400); ((("b")), 100000000, 0, -397)]), 100000000, 0, -399)], (0)), 100000000, 0, -398), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -397)], (0)), 100000000, 0, -396), 0), 100000000, 0, -395), 0), 100000000, 0, -394), 0, (("list.mli", 398, 13274, 13274), ("list.mli", 398, 13274, 13323), 0), 0, Tag1 ("Stdlib__List", 52)), 0); (("assq", 1627), ((Tag1 (0, ((("a")), 100000000, 0, -393), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("a")), 100000000, 0, -393); ((("b")), 100000000, 0, -390)]), 100000000, 0, -392)], (0)), 100000000, 0, -391), ((("b")), 100000000, 0, -390), 0), 100000000, 0, -389), 0), 100000000, 0, -388), 0, (("list.mli", 408, 13632, 13632), ("list.mli", 408, 13632, 13669), 0), 0, Tag1 ("Stdlib__List", 53)), 0); (("assq_opt", 1628), ((Tag1 (0, ((("a")), 100000000, 0, -387), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("a")), 100000000, 0, -387); ((("b")), 100000000, 0, -384)]), 100000000, 0, -386)], (0)), 100000000, 0, -385), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -384)], (0)), 100000000, 0, -383), 0), 100000000, 0, -382), 0), 100000000, 0, -381), 0, (("list.mli", 413, 13775, 13775), ("list.mli", 413, 13775, 13823), 0), 0, Tag1 ("Stdlib__List", 54)), 0); (("mem_assoc", 1629), ((Tag1 (0, ((("a")), 100000000, 0, -379), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("a")), 100000000, 0, -379); ((("b")), 100000000, 0, -380)]), 100000000, 0, -378)], (0)), 100000000, 0, -377), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -376), 0), 100000000, 0, -375), 0), 100000000, 0, -374), 0, (("list.mli", 419, 13948, 13948), ("list.mli", 419, 13948, 13992), 0), 0, Tag1 ("Stdlib__List", 55)), 0); (("mem_assq", 1630), ((Tag1 (0, ((("a")), 100000000, 0, -372), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("a")), 100000000, 0, -372); ((("b")), 100000000, 0, -373)]), 100000000, 0, -371)], (0)), 100000000, 0, -370), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -369), 0), 100000000, 0, -368), 0), 100000000, 0, -367), 0, (("list.mli", 424, 14121, 14121), ("list.mli", 424, 14121, 14164), 0), 0, Tag1 ("Stdlib__List", 56)), 0); (("remove_assoc", 1631), ((Tag1 (0, ((("a")), 100000000, 0, -363), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("a")), 100000000, 0, -363); ((("b")), 100000000, 0, -364)]), 100000000, 0, -366)], (0)), 100000000, 0, -365), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("a")), 100000000, 0, -363); ((("b")), 100000000, 0, -364)]), 100000000, 0, -362)], (0)), 100000000, 0, -361), 0), 100000000, 0, -360), 0), 100000000, 0, -359), 0, (("list.mli", 429, 14274, 14274), ("list.mli", 429, 14274, 14331), 0), 0, Tag1 ("Stdlib__List", 57)), 0); (("remove_assq", 1632), ((Tag1 (0, ((("a")), 100000000, 0, -355), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("a")), 100000000, 0, -355); ((("b")), 100000000, 0, -356)]), 100000000, 0, -358)], (0)), 100000000, 0, -357), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("a")), 100000000, 0, -355); ((("b")), 100000000, 0, -356)]), 100000000, 0, -354)], (0)), 100000000, 0, -353), 0), 100000000, 0, -352), 0), 100000000, 0, -351), 0, (("list.mli", 435, 14461, 14461), ("list.mli", 435, 14461, 14517), 0), 0, Tag1 ("Stdlib__List", 58)), 0); (("split", 1633), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("a")), 100000000, 0, -346); ((("b")), 100000000, 0, -348)]), 100000000, 0, -350)], (0)), 100000000, 0, -349), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -346)], (0)), 100000000, 0, -345); (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -348)], (0)), 100000000, 0, -347)]), 100000000, 0, -344), 0), 100000000, 0, -343), 0, (("list.mli", 444, 14679, 14679), ("list.mli", 444, 14679, 14726), 0), 0, Tag1 ("Stdlib__List", 59)), 0); (("combine", 1634), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -339)], (0)), 100000000, 0, -342), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -340)], (0)), 100000000, 0, -341), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("a")), 100000000, 0, -339); ((("b")), 100000000, 0, -340)]), 100000000, 0, -338)], (0)), 100000000, 0, -337), 0), 100000000, 0, -336), 0), 100000000, 0, -335), 0, (("list.mli", 450, 14879, 14879), ("list.mli", 450, 14879, 14929), 0), 0, Tag1 ("Stdlib__List", 60)), 0); (("sort", 1635), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -330), (Tag1 (0, ((("a")), 100000000, 0, -330), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -334), 0), 100000000, 0, -333), 0), 100000000, 0, -332), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -330)], (0)), 100000000, 0, -331), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -330)], (0)), 100000000, 0, -329), 0), 100000000, 0, -328), 0), 100000000, 0, -327), 0, (("list.mli", 462, 15174, 15174), ("list.mli", 462, 15174, 15224), 0), 0, Tag1 ("Stdlib__List", 61)), 0); (("stable_sort", 1636), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -322), (Tag1 (0, ((("a")), 100000000, 0, -322), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -326), 0), 100000000, 0, -325), 0), 100000000, 0, -324), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -322)], (0)), 100000000, 0, -323), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -322)], (0)), 100000000, 0, -321), 0), 100000000, 0, -320), 0), 100000000, 0, -319), 0, (("list.mli", 478, 15893, 15893), ("list.mli", 478, 15893, 15950), 0), 0, Tag1 ("Stdlib__List", 62)), 0); (("fast_sort", 1637), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -314), (Tag1 (0, ((("a")), 100000000, 0, -314), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -318), 0), 100000000, 0, -317), 0), 100000000, 0, -316), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -314)], (0)), 100000000, 0, -315), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -314)], (0)), 100000000, 0, -313), 0), 100000000, 0, -312), 0), 100000000, 0, -311), 0, (("list.mli", 487, 16216, 16216), ("list.mli", 487, 16216, 16271), 0), 0, Tag1 ("Stdlib__List", 63)), 0); (("sort_uniq", 1638), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -306), (Tag1 (0, ((("a")), 100000000, 0, -306), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -310), 0), 100000000, 0, -309), 0), 100000000, 0, -308), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -306)], (0)), 100000000, 0, -307), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -306)], (0)), 100000000, 0, -305), 0), 100000000, 0, -304), 0), 100000000, 0, -303), 0, (("list.mli", 492, 16358, 16358), ("list.mli", 492, 16358, 16413), 0), 0, Tag1 ("Stdlib__List", 64)), 0); (("merge", 1639), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -297), (Tag1 (0, ((("a")), 100000000, 0, -297), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -302), 0), 100000000, 0, -301), 0), 100000000, 0, -300), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -297)], (0)), 100000000, 0, -299), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -297)], (0)), 100000000, 0, -298), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -297)], (0)), 100000000, 0, -296), 0), 100000000, 0, -295), 0), 100000000, 0, -294), 0), 100000000, 0, -293), 0, (("list.mli", 497, 16505, 16505), ("list.mli", 497, 16505, 16567), 0), 0, Tag1 ("Stdlib__List", 65)), 0); (("to_seq", 1640), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -291)], (0)), 100000000, 0, -292), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [((("a")), 100000000, 0, -291)], (0)), 100000000, 0, -290), 0), 100000000, 0, -289), 0, (("list.mli", 509, 16974, 16974), ("list.mli", 509, 16974, 17006), 0), 0, Tag1 ("Stdlib__List", 66)), 0); (("of_seq", 1641), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [((("a")), 100000000, 0, -287)], (0)), 100000000, 0, -288), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -287)], (0)), 100000000, 0, -286), 0), 100000000, 0, -285), 0, (("list.mli", 514, 17053, 17053), ("list.mli", 514, 17053, 17085), 0), 0, Tag1 ("Stdlib__List", 67)), 0)])), 0, (("src/signatures.mli", 33, 1363, 1363), ("src/signatures.mli", 45, 1922, 1925), 0), Tag1 ("Signatures", 15)), 0); Tag4 (("STRING", 1508), ((Tag1 ([(("print", 1642), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -1265), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1264), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1263), 0), 100000000, 0, -1262), 0), 100000000, 0, -1261), 0, (("src/signatures.mli", 48, 1952, 1954), ("src/signatures.mli", 48, 1952, 2000), 0), 0, Tag1 ("Signatures", 16)), 0); (("chomp", 1643), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1260), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1259), 0), 100000000, 0, -1258), 0, (("src/signatures.mli", 49, 2001, 2003), ("src/signatures.mli", 49, 2001, 2031), 0), 0, Tag1 ("Signatures", 17)), 0); (("before", 1644), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1257), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1256), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1255), 0), 100000000, 0, -1254), 0), 100000000, 0, -1253), 0, (("src/signatures.mli", 55, 2237, 2239), ("src/signatures.mli", 55, 2237, 2275), 0), 0, Tag1 ("Signatures", 18)), 0); (("after", 1645), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1252), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1251), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1250), 0), 100000000, 0, -1249), 0), 100000000, 0, -1248), 0, (("src/signatures.mli", 61, 2478, 2480), ("src/signatures.mli", 61, 2478, 2515), 0), 0, Tag1 ("Signatures", 19)), 0); (("first_chars", 1646), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1247), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1246), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1245), 0), 100000000, 0, -1244), 0), 100000000, 0, -1243), 0, (("src/signatures.mli", 63, 2517, 2519), ("src/signatures.mli", 63, 2517, 2560), 0), 0, Tag1 ("Signatures", 20)), 0); (("last_chars", 1647), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1242), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1241), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1240), 0), 100000000, 0, -1239), 0), 100000000, 0, -1238), 0, (("src/signatures.mli", 67, 2698, 2700), ("src/signatures.mli", 67, 2698, 2740), 0), 0, Tag1 ("Signatures", 21)), 0); (("eq_sub_strings", 1648), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1237), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1236), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1235), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1234), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1233), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1232), 0), 100000000, 0, -1231), 0), 100000000, 0, -1230), 0), 100000000, 0, -1229), 0), 100000000, 0, -1228), 0), 100000000, 0, -1227), 0, (("src/signatures.mli", 71, 2862, 2864), ("src/signatures.mli", 71, 2862, 2930), 0), 0, Tag1 ("Signatures", 22)), 0); (("is_prefix", 1649), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1226), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1225), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1224), 0), 100000000, 0, -1223), 0), 100000000, 0, -1222), 0, (("src/signatures.mli", 74, 2978, 2980), ("src/signatures.mli", 74, 2978, 3020), 0), 0, Tag1 ("Signatures", 23)), 0); (("is_suffix", 1650), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1221), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1220), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1219), 0), 100000000, 0, -1218), 0), 100000000, 0, -1217), 0, (("src/signatures.mli", 76, 3069, 3071), ("src/signatures.mli", 76, 3069, 3111), 0), 0, Tag1 ("Signatures", 24)), 0); (("contains_string", 1651), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1216), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1215), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1214), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1213)], (0)), 100000000, 0, -1212), 0), 100000000, 0, -1211), 0), 100000000, 0, -1210), 0), 100000000, 0, -1209), 0, (("src/signatures.mli", 81, 3331, 3333), ("src/signatures.mli", 81, 3331, 3392), 0), 0, Tag1 ("Signatures", 25)), 0); (("subst", 1652), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1208), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1207), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1206), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1205), 0), 100000000, 0, -1204), 0), 100000000, 0, -1203), 0), 100000000, 0, -1202), 0, (("src/signatures.mli", 84, 3426, 3428), ("src/signatures.mli", 84, 3426, 3476), 0), 0, Tag1 ("Signatures", 26)), 0); (("tr", 1653), ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -1201), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -1200), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1199), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1198), 0), 100000000, 0, -1197), 0), 100000000, 0, -1196), 0), 100000000, 0, -1195), 0, (("src/signatures.mli", 87, 3507, 3509), ("src/signatures.mli", 87, 3507, 3550), 0), 0, Tag1 ("Signatures", 27)), 0); (("rev", 1654), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1194), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1193), 0), 100000000, 0, -1192), 0, (("src/signatures.mli", 89, 3552, 3554), ("src/signatures.mli", 89, 3552, 3580), 0), 0, Tag1 ("Signatures", 28)), 0); (("implode", 1655), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -1191)], (0)), 100000000, 0, -1190), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1189), 0), 100000000, 0, -1188), 0, (("src/signatures.mli", 92, 3639, 3641), ("src/signatures.mli", 92, 3639, 3674), 0), 0, Tag1 ("Signatures", 29)), 0); (("explode", 1656), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1187), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -1186)], (0)), 100000000, 0, -1185), 0), 100000000, 0, -1184), 0, (("src/signatures.mli", 95, 3733, 3735), ("src/signatures.mli", 95, 3733, 3768), 0), 0, Tag1 ("Signatures", 30)), 0); Tag1 (("t", 1657), (0, 0, 0, 1, ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1183)), 0, 0, 0, 0, (("string.mli", 75, 3311, 3311), ("string.mli", 75, 3311, 3326), 0), 0, 0, 0, Tag1 ("Stdlib__String", 0)), 1, 0); (("make", 1658), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1182), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -1181), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1180), 0), 100000000, 0, -1179), 0), 100000000, 0, -1178), 0, (("string.mli", 78, 3357, 3357), ("string.mli", 78, 3357, 3389), 0), 0, Tag1 ("Stdlib__String", 1)), 0); (("init", 1659), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1177), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1176), (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -1175), 0), 100000000, 0, -1174), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1173), 0), 100000000, 0, -1172), 0), 100000000, 0, -1171), 0, (("string.mli", 84, 3557, 3557), ("string.mli", 84, 3557, 3598), 0), 0, Tag1 ("Stdlib__String", 2)), 0); (("empty", 1660), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1170), 0, (("string.mli", 91, 3818, 3818), ("string.mli", 91, 3818, 3836), 0), 0, Tag1 ("Stdlib__String", 3)), 0); (("length", 1661), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1169), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1168), 0), 100000000, 0, -1167), (("%string_length", 1, 1, "", [0], 0)), (("string.mli", 97, 3880, 3880), ("string.mli", 97, 3880, 3930), 0), 0, Tag1 ("Stdlib__String", 4)), 0); (("get", 1662), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1166), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1165), (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -1164), 0), 100000000, 0, -1163), 0), 100000000, 0, -1162), (("%string_safe_get", 2, 1, "", [0; 0], 0)), (("string.mli", 100, 4001, 4001), ("string.mli", 100, 4001, 4058), 0), 0, Tag1 ("Stdlib__String", 5)), 0); (("of_bytes", 1663), ((Tag1 (0, (Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -1161), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1160), 0), 100000000, 0, -1159), 0, (("string.mli", 106, 4213, 4213), ("string.mli", 106, 4213, 4243), 0), 0, Tag1 ("Stdlib__String", 6)), 0); (("to_bytes", 1664), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1158), (Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -1157), 0), 100000000, 0, -1156), 0, (("string.mli", 113, 4350, 4350), ("string.mli", 113, 4350, 4380), 0), 0, Tag1 ("Stdlib__String", 7)), 0); (("blit", 1665), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1155), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1154), (Tag1 (0, (Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -1153), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1152), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1151), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1150), 0), 100000000, 0, -1149), 0), 100000000, 0, -1148), 0), 100000000, 0, -1147), 0), 100000000, 0, -1146), 0), 100000000, 0, -1145), 0, (("string.mli", 120, 4487, 4487), ("string.mli", 121, 4498, 4544), 0), 0, Tag1 ("Stdlib__String", 8)), 0); (("concat", 1666), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1144), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1143)], (0)), 100000000, 0, -1142), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1141), 0), 100000000, 0, -1140), 0), 100000000, 0, -1139), 0, (("string.mli", 129, 4723, 4723), ("string.mli", 129, 4723, 4767), 0), 0, Tag1 ("Stdlib__String", 9)), 0); (("cat", 1667), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1138), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1137), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1136), 0), 100000000, 0, -1135), 0), 100000000, 0, -1134), 0, (("string.mli", 136, 4980, 4980), ("string.mli", 136, 4980, 5016), 0), 0, Tag1 ("Stdlib__String", 10)), 0); (("equal", 1668), ((Tag1 (0, (Tag3 ((("t", 1657)), 0, (0)), 100000000, 0, -1133), (Tag1 (0, (Tag3 ((("t", 1657)), 0, (0)), 100000000, 0, -1132), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1131), 0), 100000000, 0, -1130), 0), 100000000, 0, -1129), 0, (("string.mli", 147, 5234, 5234), ("string.mli", 147, 5234, 5260), 0), 0, Tag1 ("Stdlib__String", 11)), 0); (("compare", 1669), ((Tag1 (0, (Tag3 ((("t", 1657)), 0, (0)), 100000000, 0, -1128), (Tag1 (0, (Tag3 ((("t", 1657)), 0, (0)), 100000000, 0, -1127), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1126), 0), 100000000, 0, -1125), 0), 100000000, 0, -1124), 0, (("string.mli", 152, 5391, 5391), ("string.mli", 152, 5391, 5418), 0), 0, Tag1 ("Stdlib__String", 12)), 0); (("starts_with", 1670), ((Tag1 (("prefix"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1123), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1122), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1121), 0), 100000000, 0, -1120), 0), 100000000, 0, -1119), 0, (("string.mli", 156, 5572, 5572), ("string.mli", 157, 5590, 5669), 0), 0, Tag1 ("Stdlib__String", 13)), 0); (("ends_with", 1671), ((Tag1 (("suffix"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1118), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1117), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1116), 0), 100000000, 0, -1115), 0), 100000000, 0, -1114), 0, (("string.mli", 163, 5776, 5776), ("string.mli", 164, 5792, 5871), 0), 0, Tag1 ("Stdlib__String", 14)), 0); (("contains_from", 1672), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1113), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1112), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -1111), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1110), 0), 100000000, 0, -1109), 0), 100000000, 0, -1108), 0), 100000000, 0, -1107), 0, (("string.mli", 169, 5970, 5970), ("string.mli", 169, 5970, 6019), 0), 0, Tag1 ("Stdlib__String", 15)), 0); (("rcontains_from", 1673), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1106), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1105), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -1104), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1103), 0), 100000000, 0, -1102), 0), 100000000, 0, -1101), 0), 100000000, 0, -1100), 0, (("string.mli", 175, 6198, 6198), ("string.mli", 175, 6198, 6248), 0), 0, Tag1 ("Stdlib__String", 16)), 0); (("contains", 1674), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1099), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -1098), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1097), 0), 100000000, 0, -1096), 0), 100000000, 0, -1095), 0, (("string.mli", 182, 6448, 6448), ("string.mli", 182, 6448, 6485), 0), 0, Tag1 ("Stdlib__String", 17)), 0); (("sub", 1675), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1094), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1093), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1092), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1091), 0), 100000000, 0, -1090), 0), 100000000, 0, -1089), 0), 100000000, 0, -1088), 0, (("string.mli", 187, 6587, 6587), ("string.mli", 187, 6587, 6627), 0), 0, Tag1 ("Stdlib__String", 18)), 0); (("split_on_char", 1676), ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -1087), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1086), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1085)], (0)), 100000000, 0, -1084), 0), 100000000, 0, -1083), 0), 100000000, 0, -1082), 0, (("string.mli", 195, 6868, 6868), ("string.mli", 195, 6868, 6917), 0), 0, Tag1 ("Stdlib__String", 19)), 0); (("map", 1677), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -1081), (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -1080), 0), 100000000, 0, -1079), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1078), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1077), 0), 100000000, 0, -1076), 0), 100000000, 0, -1075), 0, (("string.mli", 211, 7459, 7459), ("string.mli", 211, 7459, 7503), 0), 0, Tag1 ("Stdlib__String", 20)), 0); (("mapi", 1678), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1074), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -1073), (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -1072), 0), 100000000, 0, -1071), 0), 100000000, 0, -1070), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1069), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1068), 0), 100000000, 0, -1067), 0), 100000000, 0, -1066), 0, (("string.mli", 217, 7635, 7635), ("string.mli", 217, 7635, 7687), 0), 0, Tag1 ("Stdlib__String", 21)), 0); (("fold_left", 1679), ((Tag1 (0, (Tag1 (0, ((("acc")), 100000000, 0, -1061), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -1065), ((("acc")), 100000000, 0, -1061), 0), 100000000, 0, -1064), 0), 100000000, 0, -1063), (Tag1 (0, ((("acc")), 100000000, 0, -1061), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1062), ((("acc")), 100000000, 0, -1061), 0), 100000000, 0, -1060), 0), 100000000, 0, -1059), 0), 100000000, 0, -1058), 0, (("string.mli", 223, 7797, 7797), ("string.mli", 223, 7797, 7861), 0), 0, Tag1 ("Stdlib__String", 22)), 0); (("fold_right", 1680), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -1057), (Tag1 (0, ((("acc")), 100000000, 0, -1053), ((("acc")), 100000000, 0, -1053), 0), 100000000, 0, -1056), 0), 100000000, 0, -1055), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1054), (Tag1 (0, ((("acc")), 100000000, 0, -1053), ((("acc")), 100000000, 0, -1053), 0), 100000000, 0, -1052), 0), 100000000, 0, -1051), 0), 100000000, 0, -1050), 0, (("string.mli", 228, 8005, 8005), ("string.mli", 228, 8005, 8070), 0), 0, Tag1 ("Stdlib__String", 23)), 0); (("for_all", 1681), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -1049), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1048), 0), 100000000, 0, -1047), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1046), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1045), 0), 100000000, 0, -1044), 0), 100000000, 0, -1043), 0, (("string.mli", 233, 8216, 8216), ("string.mli", 233, 8216, 8262), 0), 0, Tag1 ("Stdlib__String", 24)), 0); (("exists", 1682), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -1042), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1041), 0), 100000000, 0, -1040), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1039), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1038), 0), 100000000, 0, -1037), 0), 100000000, 0, -1036), 0, (("string.mli", 237, 8360, 8360), ("string.mli", 237, 8360, 8405), 0), 0, Tag1 ("Stdlib__String", 25)), 0); (("trim", 1683), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1035), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1034), 0), 100000000, 0, -1033), 0, (("string.mli", 242, 8516, 8516), ("string.mli", 242, 8516, 8543), 0), 0, Tag1 ("Stdlib__String", 26)), 0); (("escaped", 1684), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1032), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1031), 0), 100000000, 0, -1030), 0, (("string.mli", 248, 8714, 8714), ("string.mli", 248, 8714, 8744), 0), 0, Tag1 ("Stdlib__String", 27)), 0); (("uppercase_ascii", 1685), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1029), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1028), 0), 100000000, 0, -1027), 0, (("string.mli", 262, 9275, 9275), ("string.mli", 262, 9275, 9313), 0), 0, Tag1 ("Stdlib__String", 28)), 0); (("lowercase_ascii", 1686), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1026), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1025), 0), 100000000, 0, -1024), 0, (("string.mli", 268, 9479, 9479), ("string.mli", 268, 9479, 9517), 0), 0, Tag1 ("Stdlib__String", 29)), 0); (("capitalize_ascii", 1687), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1023), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1022), 0), 100000000, 0, -1021), 0, (("string.mli", 274, 9683, 9683), ("string.mli", 274, 9683, 9722), 0), 0, Tag1 ("Stdlib__String", 30)), 0); (("uncapitalize_ascii", 1688), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1020), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1019), 0), 100000000, 0, -1018), 0, (("string.mli", 280, 9880, 9880), ("string.mli", 280, 9880, 9921), 0), 0, Tag1 ("Stdlib__String", 31)), 0); (("iter", 1689), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -1017), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1016), 0), 100000000, 0, -1015), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1014), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1013), 0), 100000000, 0, -1012), 0), 100000000, 0, -1011), 0, (("string.mli", 288, 10115, 10115), ("string.mli", 288, 10115, 10158), 0), 0, Tag1 ("Stdlib__String", 32)), 0); (("iteri", 1690), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1010), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -1009), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1008), 0), 100000000, 0, -1007), 0), 100000000, 0, -1006), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1005), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1004), 0), 100000000, 0, -1003), 0), 100000000, 0, -1002), 0, (("string.mli", 292, 10310, 10310), ("string.mli", 292, 10310, 10361), 0), 0, Tag1 ("Stdlib__String", 33)), 0); (("index_from", 1691), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1001), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1000), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -999), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -998), 0), 100000000, 0, -997), 0), 100000000, 0, -996), 0), 100000000, 0, -995), 0, (("string.mli", 300, 10514, 10514), ("string.mli", 300, 10514, 10559), 0), 0, Tag1 ("Stdlib__String", 34)), 0); (("index_from_opt", 1692), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -994), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -993), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -992), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -991)], (0)), 100000000, 0, -990), 0), 100000000, 0, -989), 0), 100000000, 0, -988), 0), 100000000, 0, -987), 0, (("string.mli", 308, 10801, 10801), ("string.mli", 308, 10801, 10857), 0), 0, Tag1 ("Stdlib__String", 35)), 0); (("rindex_from", 1693), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -986), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -985), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -984), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -983), 0), 100000000, 0, -982), 0), 100000000, 0, -981), 0), 100000000, 0, -980), 0, (("string.mli", 315, 11057, 11057), ("string.mli", 315, 11057, 11103), 0), 0, Tag1 ("Stdlib__String", 36)), 0); (("rindex_from_opt", 1694), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -979), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -978), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -977), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -976)], (0)), 100000000, 0, -975), 0), 100000000, 0, -974), 0), 100000000, 0, -973), 0), 100000000, 0, -972), 0, (("string.mli", 322, 11352, 11352), ("string.mli", 322, 11352, 11409), 0), 0, Tag1 ("Stdlib__String", 37)), 0); (("index", 1695), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -971), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -970), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -969), 0), 100000000, 0, -968), 0), 100000000, 0, -967), 0, (("string.mli", 329, 11614, 11614), ("string.mli", 329, 11614, 11647), 0), 0, Tag1 ("Stdlib__String", 38)), 0); (("index_opt", 1696), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -966), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -965), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -964)], (0)), 100000000, 0, -963), 0), 100000000, 0, -962), 0), 100000000, 0, -961), 0, (("string.mli", 332, 11701, 11701), ("string.mli", 332, 11701, 11745), 0), 0, Tag1 ("Stdlib__String", 39)), 0); (("rindex", 1697), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -960), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -959), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -958), 0), 100000000, 0, -957), 0), 100000000, 0, -956), 0, (("string.mli", 337, 11824, 11824), ("string.mli", 337, 11824, 11858), 0), 0, Tag1 ("Stdlib__String", 40)), 0); (("rindex_opt", 1698), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -955), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -954), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -953)], (0)), 100000000, 0, -952), 0), 100000000, 0, -951), 0), 100000000, 0, -950), 0, (("string.mli", 340, 11927, 11927), ("string.mli", 340, 11927, 11972), 0), 0, Tag1 ("Stdlib__String", 41)), 0); (("to_seq", 1699), ((Tag1 (0, (Tag3 ((("t", 1657)), 0, (0)), 100000000, 0, -949), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -948)], (0)), 100000000, 0, -947), 0), 100000000, 0, -946), 0, (("string.mli", 347, 12100, 12100), ("string.mli", 347, 12100, 12128), 0), 0, Tag1 ("Stdlib__String", 42)), 0); (("to_seqi", 1700), ((Tag1 (0, (Tag3 ((("t", 1657)), 0, (0)), 100000000, 0, -945), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -943); (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -944)]), 100000000, 0, -942)], (0)), 100000000, 0, -941), 0), 100000000, 0, -940), 0, (("string.mli", 354, 12347, 12347), ("string.mli", 354, 12347, 12384), 0), 0, Tag1 ("Stdlib__String", 43)), 0); (("of_seq", 1701), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -939)], (0)), 100000000, 0, -938), (Tag3 ((("t", 1657)), 0, (0)), 100000000, 0, -937), 0), 100000000, 0, -936), 0, (("string.mli", 359, 12481, 12481), ("string.mli", 359, 12481, 12509), 0), 0, Tag1 ("Stdlib__String", 44)), 0); (("get_utf_8_uchar", 1702), ((Tag1 (0, (Tag3 ((("t", 1657)), 0, (0)), 100000000, 0, -935), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -934), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Uchar"), "utf_decode"), 0, (0)), 100000000, 0, -933), 0), 100000000, 0, -932), 0), 100000000, 0, -931), 0, (("string.mli", 370, 12679, 12679), ("string.mli", 370, 12679, 12729), 0), 0, Tag1 ("Stdlib__String", 45)), 0); (("is_valid_utf_8", 1703), ((Tag1 (0, (Tag3 ((("t", 1657)), 0, (0)), 100000000, 0, -930), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -929), 0), 100000000, 0, -928), 0, (("string.mli", 374, 12812, 12812), ("string.mli", 374, 12812, 12842), 0), 0, Tag1 ("Stdlib__String", 46)), 0); (("get_utf_16be_uchar", 1704), ((Tag1 (0, (Tag3 ((("t", 1657)), 0, (0)), 100000000, 0, -927), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -926), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Uchar"), "utf_decode"), 0, (0)), 100000000, 0, -925), 0), 100000000, 0, -924), 0), 100000000, 0, -923), 0, (("string.mli", 380, 12960, 12960), ("string.mli", 380, 12960, 13013), 0), 0, Tag1 ("Stdlib__String", 47)), 0); (("is_valid_utf_16be", 1705), ((Tag1 (0, (Tag3 ((("t", 1657)), 0, (0)), 100000000, 0, -922), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -921), 0), 100000000, 0, -920), 0, (("string.mli", 384, 13102, 13102), ("string.mli", 384, 13102, 13135), 0), 0, Tag1 ("Stdlib__String", 48)), 0); (("get_utf_16le_uchar", 1706), ((Tag1 (0, (Tag3 ((("t", 1657)), 0, (0)), 100000000, 0, -919), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -918), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Uchar"), "utf_decode"), 0, (0)), 100000000, 0, -917), 0), 100000000, 0, -916), 0), 100000000, 0, -915), 0, (("string.mli", 390, 13259, 13259), ("string.mli", 390, 13259, 13312), 0), 0, Tag1 ("Stdlib__String", 49)), 0); (("is_valid_utf_16le", 1707), ((Tag1 (0, (Tag3 ((("t", 1657)), 0, (0)), 100000000, 0, -914), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -913), 0), 100000000, 0, -912), 0, (("string.mli", 394, 13401, 13401), ("string.mli", 394, 13401, 13434), 0), 0, Tag1 ("Stdlib__String", 50)), 0); (("get_uint8", 1708), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -911), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -910), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -909), 0), 100000000, 0, -908), 0), 100000000, 0, -907), 0, (("string.mli", 420, 14472, 14472), ("string.mli", 420, 14472, 14508), 0), 0, Tag1 ("Stdlib__String", 51)), 0); (("get_int8", 1709), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -906), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -905), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -904), 0), 100000000, 0, -903), 0), 100000000, 0, -902), 0, (("string.mli", 427, 14619, 14619), ("string.mli", 427, 14619, 14654), 0), 0, Tag1 ("Stdlib__String", 52)), 0); (("get_uint16_ne", 1710), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -901), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -900), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -899), 0), 100000000, 0, -898), 0), 100000000, 0, -897), 0, (("string.mli", 434, 14762, 14762), ("string.mli", 434, 14762, 14802), 0), 0, Tag1 ("Stdlib__String", 53)), 0); (("get_uint16_be", 1711), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -896), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -895), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -894), 0), 100000000, 0, -893), 0), 100000000, 0, -892), 0, (("string.mli", 441, 14932, 14932), ("string.mli", 441, 14932, 14972), 0), 0, Tag1 ("Stdlib__String", 54)), 0); (("get_uint16_le", 1712), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -891), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -890), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -889), 0), 100000000, 0, -888), 0), 100000000, 0, -887), 0, (("string.mli", 448, 15099, 15099), ("string.mli", 448, 15099, 15139), 0), 0, Tag1 ("Stdlib__String", 55)), 0); (("get_int16_ne", 1713), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -886), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -885), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -884), 0), 100000000, 0, -883), 0), 100000000, 0, -882), 0, (("string.mli", 455, 15269, 15269), ("string.mli", 455, 15269, 15308), 0), 0, Tag1 ("Stdlib__String", 56)), 0); (("get_int16_be", 1714), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -881), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -880), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -879), 0), 100000000, 0, -878), 0), 100000000, 0, -877), 0, (("string.mli", 462, 15435, 15435), ("string.mli", 462, 15435, 15474), 0), 0, Tag1 ("Stdlib__String", 57)), 0); (("get_int16_le", 1715), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -876), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -875), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -874), 0), 100000000, 0, -873), 0), 100000000, 0, -872), 0, (("string.mli", 469, 15598, 15598), ("string.mli", 469, 15598, 15637), 0), 0, Tag1 ("Stdlib__String", 58)), 0); (("get_int32_ne", 1716), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -871), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -870), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -869), 0), 100000000, 0, -868), 0), 100000000, 0, -867), 0, (("string.mli", 476, 15764, 15764), ("string.mli", 476, 15764, 15805), 0), 0, Tag1 ("Stdlib__String", 59)), 0); (("hash", 1717), ((Tag1 (0, (Tag3 ((("t", 1657)), 0, (0)), 100000000, 0, -866), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -865), 0), 100000000, 0, -864), 0, (("string.mli", 483, 15925, 15925), ("string.mli", 483, 15925, 15944), 0), 0, Tag1 ("Stdlib__String", 60)), 0); (("seeded_hash", 1718), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -863), (Tag1 (0, (Tag3 ((("t", 1657)), 0, (0)), 100000000, 0, -862), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -861), 0), 100000000, 0, -860), 0), 100000000, 0, -859), 0, (("string.mli", 490, 16153, 16153), ("string.mli", 490, 16153, 16186), 0), 0, Tag1 ("Stdlib__String", 61)), 0); (("get_int32_be", 1719), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -858), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -857), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -856), 0), 100000000, 0, -855), 0), 100000000, 0, -854), 0, (("string.mli", 497, 16405, 16405), ("string.mli", 497, 16405, 16446), 0), 0, Tag1 ("Stdlib__String", 62)), 0); (("get_int32_le", 1720), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -853), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -852), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -851), 0), 100000000, 0, -850), 0), 100000000, 0, -849), 0, (("string.mli", 504, 16563, 16563), ("string.mli", 504, 16563, 16604), 0), 0, Tag1 ("Stdlib__String", 63)), 0); (("get_int64_ne", 1721), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -848), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -847), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -846), 0), 100000000, 0, -845), 0), 100000000, 0, -844), 0, (("string.mli", 511, 16724, 16724), ("string.mli", 511, 16724, 16765), 0), 0, Tag1 ("Stdlib__String", 64)), 0); (("get_int64_be", 1722), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -843), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -842), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -841), 0), 100000000, 0, -840), 0), 100000000, 0, -839), 0, (("string.mli", 518, 16885, 16885), ("string.mli", 518, 16885, 16926), 0), 0, Tag1 ("Stdlib__String", 65)), 0); (("get_int64_le", 1723), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -838), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -837), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -836), 0), 100000000, 0, -835), 0), 100000000, 0, -834), 0, (("string.mli", 525, 17043, 17043), ("string.mli", 525, 17043, 17084), 0), 0, Tag1 ("Stdlib__String", 66)), 0); (("unsafe_get", 1724), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -833), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -832), (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -831), 0), 100000000, 0, -830), 0), 100000000, 0, -829), (("%string_unsafe_get", 2, 1, "", [0; 0], 0)), (("string.mli", 536, 17280, 17280), ("string.mli", 536, 17280, 17346), 0), 0, Tag1 ("Stdlib__String", 67)), 0); (("unsafe_blit", 1725), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -828), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -827), (Tag1 (0, (Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -826), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -825), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -824), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -823), 0), 100000000, 0, -822), 0), 100000000, 0, -821), 0), 100000000, 0, -820), 0), 100000000, 0, -819), 0), 100000000, 0, -818), (("caml_blit_string", 5, 0, "", [0; 0; 0; 0; 0], 0)), (("string.mli", 537, 17347, 17347), ("string.mli", 539, 17412, 17453), 0), [(("noalloc", (("string.mli", 539, 17412, 17445), ("string.mli", 539, 17412, 17452), 0)), (0), (("string.mli", 539, 17412, 17442), ("string.mli", 539, 17412, 17453), 0))], Tag1 ("Stdlib__String", 68)), 0)])), 0, (("src/signatures.mli", 47, 1927, 1927), ("src/signatures.mli", 99, 3874, 3877), 0), Tag1 ("Signatures", 31)), 0); Tag4 (("TAGS", 1509), ((Tag1 ([Tag1 (("elt", 1726), (0, 0, 0, 1, ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1502)), 0, 0, 0, 0, (("src/signatures.mli", 102, 3902, 3923), ("src/signatures.mli", 102, 3902, 3940), 0), 0, 0, 0, Tag1 ("Signatures", 32)), 1, 0); Tag1 (("t", 1727), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("set.mli", 74, 2901, 2905), ("set.mli", 74, 2901, 2911), 0), 0, 0, 0, Tag1 ("Stdlib__Set", 4)), 1, 0); (("empty", 1728), ((Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1501), 0, (("set.mli", 77, 2942, 2946), ("set.mli", 77, 2942, 2958), 0), 0, Tag1 ("Stdlib__Set", 5)), 0); (("add", 1729), ((Tag1 (0, (Tag3 ((("elt", 1726)), 0, (0)), 100000000, 0, -1500), (Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1499), (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1498), 0), 100000000, 0, -1497), 0), 100000000, 0, -1496), 0, (("set.mli", 80, 2986, 2990), ("set.mli", 80, 2986, 3012), 0), 0, Tag1 ("Stdlib__Set", 6)), 0); (("singleton", 1730), ((Tag1 (0, (Tag3 ((("elt", 1726)), 0, (0)), 100000000, 0, -1495), (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1494), 0), 100000000, 0, -1493), 0, (("set.mli", 86, 3278, 3282), ("set.mli", 86, 3278, 3305), 0), 0, Tag1 ("Stdlib__Set", 7)), 0); (("remove", 1731), ((Tag1 (0, (Tag3 ((("elt", 1726)), 0, (0)), 100000000, 0, -1492), (Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1491), (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1490), 0), 100000000, 0, -1489), 0), 100000000, 0, -1488), 0, (("set.mli", 89, 3381, 3385), ("set.mli", 89, 3381, 3410), 0), 0, Tag1 ("Stdlib__Set", 8)), 0); (("union", 1732), ((Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1487), (Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1486), (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1485), 0), 100000000, 0, -1484), 0), 100000000, 0, -1483), 0, (("set.mli", 95, 3677, 3681), ("set.mli", 95, 3677, 3703), 0), 0, Tag1 ("Stdlib__Set", 9)), 0); (("inter", 1733), ((Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1482), (Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1481), (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1480), 0), 100000000, 0, -1479), 0), 100000000, 0, -1478), 0, (("set.mli", 98, 3727, 3731), ("set.mli", 98, 3727, 3753), 0), 0, Tag1 ("Stdlib__Set", 10)), 0); (("disjoint", 1734), ((Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1477), (Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1476), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1475), 0), 100000000, 0, -1474), 0), 100000000, 0, -1473), 0, (("set.mli", 101, 3784, 3788), ("set.mli", 101, 3784, 3816), 0), 0, Tag1 ("Stdlib__Set", 11)), 0); (("diff", 1735), ((Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1472), (Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1471), (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1470), 0), 100000000, 0, -1469), 0), 100000000, 0, -1468), 0, (("set.mli", 105, 3880, 3884), ("set.mli", 105, 3880, 3905), 0), 0, Tag1 ("Stdlib__Set", 12)), 0); (("cardinal", 1736), ((Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1467), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1466), 0), 100000000, 0, -1465), 0, (("set.mli", 109, 4007, 4011), ("set.mli", 109, 4007, 4033), 0), 0, Tag1 ("Stdlib__Set", 13)), 0); (("elements", 1737), ((Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1464), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 1726)), 0, (0)), 100000000, 0, -1463)], (0)), 100000000, 0, -1462), 0), 100000000, 0, -1461), 0, (("set.mli", 114, 4120, 4124), ("set.mli", 114, 4120, 4151), 0), 0, Tag1 ("Stdlib__Set", 14)), 0); (("min_elt", 1738), ((Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1460), (Tag3 ((("elt", 1726)), 0, (0)), 100000000, 0, -1459), 0), 100000000, 0, -1458), 0, (("set.mli", 120, 4380, 4384), ("set.mli", 120, 4380, 4405), 0), 0, Tag1 ("Stdlib__Set", 15)), 0); (("min_elt_opt", 1739), ((Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1457), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1726)), 0, (0)), 100000000, 0, -1456)], (0)), 100000000, 0, -1455), 0), 100000000, 0, -1454), 0, (("set.mli", 125, 4567, 4571), ("set.mli", 125, 4567, 4603), 0), 0, Tag1 ("Stdlib__Set", 16)), 0); (("max_elt", 1740), ((Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1453), (Tag3 ((("elt", 1726)), 0, (0)), 100000000, 0, -1452), 0), 100000000, 0, -1451), 0, (("set.mli", 131, 4774, 4778), ("set.mli", 131, 4774, 4799), 0), 0, Tag1 ("Stdlib__Set", 17)), 0); (("max_elt_opt", 1741), ((Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1450), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1726)), 0, (0)), 100000000, 0, -1449)], (0)), 100000000, 0, -1448), 0), 100000000, 0, -1447), 0, (("set.mli", 135, 4890, 4894), ("set.mli", 135, 4890, 4926), 0), 0, Tag1 ("Stdlib__Set", 18)), 0); (("choose", 1742), ((Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1446), (Tag3 ((("elt", 1726)), 0, (0)), 100000000, 0, -1445), 0), 100000000, 0, -1444), 0, (("set.mli", 140, 5041, 5045), ("set.mli", 140, 5041, 5065), 0), 0, Tag1 ("Stdlib__Set", 19)), 0); (("choose_opt", 1743), ((Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1443), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1726)), 0, (0)), 100000000, 0, -1442)], (0)), 100000000, 0, -1441), 0), 100000000, 0, -1440), 0, (("set.mli", 145, 5263, 5267), ("set.mli", 145, 5263, 5298), 0), 0, Tag1 ("Stdlib__Set", 20)), 0); (("find", 1744), ((Tag1 (0, (Tag3 ((("elt", 1726)), 0, (0)), 100000000, 0, -1439), (Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1438), (Tag3 ((("elt", 1726)), 0, (0)), 100000000, 0, -1437), 0), 100000000, 0, -1436), 0), 100000000, 0, -1435), 0, (("set.mli", 153, 5541, 5549), ("set.mli", 153, 5541, 5574), 0), 0, Tag1 ("Stdlib__Set", 21)), 0); (("find_opt", 1745), ((Tag1 (0, (Tag3 ((("elt", 1726)), 0, (0)), 100000000, 0, -1434), (Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1433), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1726)), 0, (0)), 100000000, 0, -1432)], (0)), 100000000, 0, -1431), 0), 100000000, 0, -1430), 0), 100000000, 0, -1429), 0, (("set.mli", 159, 5752, 5756), ("set.mli", 159, 5752, 5792), 0), 0, Tag1 ("Stdlib__Set", 22)), 0); (("find_first", 1746), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1726)), 0, (0)), 100000000, 0, -1428), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1427), 0), 100000000, 0, -1426), (Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1425), (Tag3 ((("elt", 1726)), 0, (0)), 100000000, 0, -1424), 0), 100000000, 0, -1423), 0), 100000000, 0, -1422), 0, (("set.mli", 165, 5963, 5967), ("set.mli", 165, 5963, 6008), 0), 0, Tag1 ("Stdlib__Set", 23)), 0); (("find_first_opt", 1747), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1726)), 0, (0)), 100000000, 0, -1421), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1420), 0), 100000000, 0, -1419), (Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1418), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1726)), 0, (0)), 100000000, 0, -1417)], (0)), 100000000, 0, -1416), 0), 100000000, 0, -1415), 0), 100000000, 0, -1414), 0, (("set.mli", 177, 6482, 6486), ("set.mli", 177, 6482, 6538), 0), 0, Tag1 ("Stdlib__Set", 24)), 0); (("find_last", 1748), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1726)), 0, (0)), 100000000, 0, -1413), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1412), 0), 100000000, 0, -1411), (Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1410), (Tag3 ((("elt", 1726)), 0, (0)), 100000000, 0, -1409), 0), 100000000, 0, -1408), 0), 100000000, 0, -1407), 0, (("set.mli", 184, 6779, 6783), ("set.mli", 184, 6779, 6823), 0), 0, Tag1 ("Stdlib__Set", 25)), 0); (("find_last_opt", 1749), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1726)), 0, (0)), 100000000, 0, -1406), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1405), 0), 100000000, 0, -1404), (Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1403), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1726)), 0, (0)), 100000000, 0, -1402)], (0)), 100000000, 0, -1401), 0), 100000000, 0, -1400), 0), 100000000, 0, -1399), 0, (("set.mli", 190, 7044, 7048), ("set.mli", 190, 7044, 7099), 0), 0, Tag1 ("Stdlib__Set", 26)), 0); (("iter", 1750), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1726)), 0, (0)), 100000000, 0, -1398), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1397), 0), 100000000, 0, -1396), (Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1395), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1394), 0), 100000000, 0, -1393), 0), 100000000, 0, -1392), 0, (("set.mli", 198, 7371, 7375), ("set.mli", 198, 7371, 7411), 0), 0, Tag1 ("Stdlib__Set", 27)), 0); (("fold", 1751), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1726)), 0, (0)), 100000000, 0, -1391), (Tag1 (0, ((("acc")), 100000000, 0, -1387), ((("acc")), 100000000, 0, -1387), 0), 100000000, 0, -1390), 0), 100000000, 0, -1389), (Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1388), (Tag1 (0, ((("acc")), 100000000, 0, -1387), ((("acc")), 100000000, 0, -1387), 0), 100000000, 0, -1386), 0), 100000000, 0, -1385), 0), 100000000, 0, -1384), 0, (("set.mli", 203, 7616, 7620), ("set.mli", 203, 7616, 7672), 0), 0, Tag1 ("Stdlib__Set", 28)), 0); (("map", 1752), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1726)), 0, (0)), 100000000, 0, -1383), (Tag3 ((("elt", 1726)), 0, (0)), 100000000, 0, -1382), 0), 100000000, 0, -1381), (Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1380), (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1379), 0), 100000000, 0, -1378), 0), 100000000, 0, -1377), 0, (("set.mli", 209, 7860, 7864), ("set.mli", 209, 7860, 7895), 0), 0, Tag1 ("Stdlib__Set", 29)), 0); (("filter", 1753), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1726)), 0, (0)), 100000000, 0, -1376), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1375), 0), 100000000, 0, -1374), (Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1373), (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1372), 0), 100000000, 0, -1371), 0), 100000000, 0, -1370), 0, (("set.mli", 221, 8372, 8376), ("set.mli", 221, 8372, 8411), 0), 0, Tag1 ("Stdlib__Set", 30)), 0); (("filter_map", 1754), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1726)), 0, (0)), 100000000, 0, -1369), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1726)), 0, (0)), 100000000, 0, -1368)], (0)), 100000000, 0, -1367), 0), 100000000, 0, -1366), (Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1365), (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1364), 0), 100000000, 0, -1363), 0), 100000000, 0, -1362), 0, (("set.mli", 228, 8710, 8714), ("set.mli", 228, 8710, 8759), 0), 0, Tag1 ("Stdlib__Set", 31)), 0); (("partition", 1755), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1726)), 0, (0)), 100000000, 0, -1361), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1360), 0), 100000000, 0, -1359), (Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1358), (Tag2 ([(Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1356); (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1357)]), 100000000, 0, -1355), 0), 100000000, 0, -1354), 0), 100000000, 0, -1353), 0, (("set.mli", 243, 9275, 9279), ("set.mli", 243, 9275, 9321), 0), 0, Tag1 ("Stdlib__Set", 32)), 0); (("split", 1756), ((Tag1 (0, (Tag3 ((("elt", 1726)), 0, (0)), 100000000, 0, -1352), (Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1351), (Tag2 ([(Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1348); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1349); (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1350)]), 100000000, 0, -1347), 0), 100000000, 0, -1346), 0), 100000000, 0, -1345), 0, (("set.mli", 249, 9562, 9566), ("set.mli", 249, 9562, 9601), 0), 0, Tag1 ("Stdlib__Set", 33)), 0); (("is_empty", 1757), ((Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1344), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1343), 0), 100000000, 0, -1342), 0, (("set.mli", 260, 10020, 10024), ("set.mli", 260, 10020, 10047), 0), 0, Tag1 ("Stdlib__Set", 34)), 0); (("mem", 1758), ((Tag1 (0, (Tag3 ((("elt", 1726)), 0, (0)), 100000000, 0, -1341), (Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1340), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1339), 0), 100000000, 0, -1338), 0), 100000000, 0, -1337), 0, (("set.mli", 263, 10096, 10100), ("set.mli", 263, 10096, 10125), 0), 0, Tag1 ("Stdlib__Set", 35)), 0); (("equal", 1759), ((Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1336), (Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1335), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1334), 0), 100000000, 0, -1333), 0), 100000000, 0, -1332), 0, (("set.mli", 266, 10190, 10194), ("set.mli", 266, 10190, 10219), 0), 0, Tag1 ("Stdlib__Set", 36)), 0); (("compare", 1760), ((Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1331), (Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1330), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1329), 0), 100000000, 0, -1328), 0), 100000000, 0, -1327), 0, (("set.mli", 270, 10335, 10339), ("set.mli", 270, 10335, 10365), 0), 0, Tag1 ("Stdlib__Set", 37)), 0); (("subset", 1761), ((Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1326), (Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1325), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1324), 0), 100000000, 0, -1323), 0), 100000000, 0, -1322), 0, (("set.mli", 274, 10476, 10480), ("set.mli", 274, 10476, 10506), 0), 0, Tag1 ("Stdlib__Set", 38)), 0); (("for_all", 1762), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1726)), 0, (0)), 100000000, 0, -1321), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1320), 0), 100000000, 0, -1319), (Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1318), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1317), 0), 100000000, 0, -1316), 0), 100000000, 0, -1315), 0, (("set.mli", 278, 10598, 10602), ("set.mli", 278, 10598, 10641), 0), 0, Tag1 ("Stdlib__Set", 39)), 0); (("exists", 1763), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1726)), 0, (0)), 100000000, 0, -1314), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1313), 0), 100000000, 0, -1312), (Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1311), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1310), 0), 100000000, 0, -1309), 0), 100000000, 0, -1308), 0, (("set.mli", 282, 10737, 10741), ("set.mli", 282, 10737, 10779), 0), 0, Tag1 ("Stdlib__Set", 40)), 0); (("to_list", 1764), ((Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1307), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 1726)), 0, (0)), 100000000, 0, -1306)], (0)), 100000000, 0, -1305), 0), 100000000, 0, -1304), 0, (("set.mli", 288, 10922, 10926), ("set.mli", 288, 10922, 10953), 0), 0, Tag1 ("Stdlib__Set", 41)), 0); (("to_seq_from", 1765), ((Tag1 (0, (Tag3 ((("elt", 1726)), 0, (0)), 100000000, 0, -1303), (Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1302), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 1726)), 0, (0)), 100000000, 0, -1301)], (0)), 100000000, 0, -1300), 0), 100000000, 0, -1299), 0), 100000000, 0, -1298), 0, (("set.mli", 298, 11268, 11272), ("set.mli", 298, 11268, 11311), 0), 0, Tag1 ("Stdlib__Set", 43)), 0); (("to_seq", 1766), ((Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1297), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 1726)), 0, (0)), 100000000, 0, -1296)], (0)), 100000000, 0, -1295), 0), 100000000, 0, -1294), 0, (("set.mli", 303, 11453, 11457), ("set.mli", 303, 11453, 11484), 0), 0, Tag1 ("Stdlib__Set", 44)), 0); (("to_rev_seq", 1767), ((Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1293), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 1726)), 0, (0)), 100000000, 0, -1292)], (0)), 100000000, 0, -1291), 0), 100000000, 0, -1290), 0, (("set.mli", 307, 11562, 11566), ("set.mli", 307, 11562, 11597), 0), 0, Tag1 ("Stdlib__Set", 45)), 0); (("add_seq", 1768), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 1726)), 0, (0)), 100000000, 0, -1289)], (0)), 100000000, 0, -1288), (Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1287), (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1286), 0), 100000000, 0, -1285), 0), 100000000, 0, -1284), 0, (("set.mli", 311, 11676, 11680), ("set.mli", 311, 11676, 11713), 0), 0, Tag1 ("Stdlib__Set", 46)), 0); (("of_seq", 1769), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 1726)), 0, (0)), 100000000, 0, -1283)], (0)), 100000000, 0, -1282), (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1281), 0), 100000000, 0, -1280), 0, (("set.mli", 315, 11791, 11795), ("set.mli", 315, 11791, 11822), 0), 0, Tag1 ("Stdlib__Set", 47)), 0); (("of_list", 1770), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1279)], (0)), 100000000, 0, -1278), (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1277), 0), 100000000, 0, -1276), 0, (("src/signatures.mli", 109, 4288, 4290), ("src/signatures.mli", 109, 4288, 4320), 0), 0, Tag1 ("Signatures", 33)), 0); (("print", 1771), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -1275), (Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1274), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1273), 0), 100000000, 0, -1272), 0), 100000000, 0, -1271), 0, (("src/signatures.mli", 110, 4321, 4323), ("src/signatures.mli", 110, 4321, 4364), 0), 0, Tag1 ("Signatures", 34)), 0); (("does_match", 1772), ((Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1270), (Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1269), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1268), 0), 100000000, 0, -1267), 0), 100000000, 0, -1266), 0, (("src/signatures.mli", 111, 4365, 4367), ("src/signatures.mli", 111, 4365, 4398), 0), 0, Tag1 ("Signatures", 35)), 0); Tag3 (("Operators", 1773), 0, (Tag1 ([(("++", 1774), ((Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1524), (Tag1 (0, (Tag3 ((("elt", 1726)), 0, (0)), 100000000, 0, -1523), (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1522), 0), 100000000, 0, -1521), 0), 100000000, 0, -1520), 0, (("src/signatures.mli", 113, 4424, 4428), ("src/signatures.mli", 113, 4424, 4454), 0), 0, Tag1 ("Signatures", 36)), 0); (("--", 1775), ((Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1519), (Tag1 (0, (Tag3 ((("elt", 1726)), 0, (0)), 100000000, 0, -1518), (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1517), 0), 100000000, 0, -1516), 0), 100000000, 0, -1515), 0, (("src/signatures.mli", 114, 4455, 4459), ("src/signatures.mli", 114, 4455, 4485), 0), 0, Tag1 ("Signatures", 37)), 0); (("+++", 1776), ((Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1514), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1726)), 0, (0)), 100000000, 0, -1513)], (0)), 100000000, 0, -1512), (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1511), 0), 100000000, 0, -1510), 0), 100000000, 0, -1509), 0, (("src/signatures.mli", 115, 4486, 4490), ("src/signatures.mli", 115, 4486, 4524), 0), 0, Tag1 ("Signatures", 38)), 0); (("---", 1777), ((Tag1 (0, (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1508), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1726)), 0, (0)), 100000000, 0, -1507)], (0)), 100000000, 0, -1506), (Tag3 ((("t", 1727)), 0, (0)), 100000000, 0, -1505), 0), 100000000, 0, -1504), 0), 100000000, 0, -1503), 0, (("src/signatures.mli", 116, 4525, 4529), ("src/signatures.mli", 116, 4525, 4563), 0), 0, Tag1 ("Signatures", 39)), 0)]), 0, (("src/signatures.mli", 112, 4399, 4401), ("src/signatures.mli", 117, 4564, 4569), 0), Tag1 ("Signatures", 40)), 0, 0)])), 0, (("src/signatures.mli", 101, 3879, 3879), ("src/signatures.mli", 118, 4570, 4573), 0), Tag1 ("Signatures", 41)), 0); Tag4 (("PATHNAME", 1510), ((Tag1 ([Tag1 (("t", 1778), (0, 0, 0, 1, ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1651)), 0, 0, 0, 0, (("src/signatures.mli", 121, 4602, 4604), ("src/signatures.mli", 121, 4602, 4619), 0), 0, 0, 0, Tag1 ("Signatures", 42)), 1, 0); (("concat", 1779), ((Tag1 (0, (Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1650), (Tag1 (0, (Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1649), (Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1648), 0), 100000000, 0, -1647), 0), 100000000, 0, -1646), 0, (("src/signatures.mli", 122, 4620, 4622), ("src/signatures.mli", 122, 4620, 4646), 0), 0, Tag1 ("Signatures", 43)), 0); (("compare", 1780), ((Tag1 (0, (Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1645), (Tag1 (0, (Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1644), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1643), 0), 100000000, 0, -1642), 0), 100000000, 0, -1641), 0, (("src/signatures.mli", 123, 4647, 4649), ("src/signatures.mli", 123, 4647, 4676), 0), 0, Tag1 ("Signatures", 44)), 0); (("equal", 1781), ((Tag1 (0, (Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1640), (Tag1 (0, (Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1639), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1638), 0), 100000000, 0, -1637), 0), 100000000, 0, -1636), 0, (("src/signatures.mli", 124, 4677, 4679), ("src/signatures.mli", 124, 4677, 4705), 0), 0, Tag1 ("Signatures", 45)), 0); (("exists", 1782), ((Tag1 (0, (Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1635), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1634), 0), 100000000, 0, -1633), 0, (("src/signatures.mli", 125, 4706, 4708), ("src/signatures.mli", 125, 4706, 4730), 0), 0, Tag1 ("Signatures", 46)), 0); (("mk", 1783), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1632), (Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1631), 0), 100000000, 0, -1630), 0, (("src/signatures.mli", 126, 4731, 4733), ("src/signatures.mli", 126, 4731, 4753), 0), 0, Tag1 ("Signatures", 47)), 0); (("define_context", 1784), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1629), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1628)], (0)), 100000000, 0, -1627), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1626), 0), 100000000, 0, -1625), 0), 100000000, 0, -1624), 0, (("src/signatures.mli", 127, 4754, 4756), ("src/signatures.mli", 127, 4754, 4806), 0), 0, Tag1 ("Signatures", 48)), 0); (("include_dirs_of", 1785), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1623), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1622)], (0)), 100000000, 0, -1621), 0), 100000000, 0, -1620), 0, (("src/signatures.mli", 128, 4807, 4809), ("src/signatures.mli", 128, 4807, 4852), 0), 0, Tag1 ("Signatures", 49)), 0); (("copy", 1786), ((Tag1 (0, (Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1619), (Tag1 (0, (Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1618), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1617), 0), 100000000, 0, -1616), 0), 100000000, 0, -1615), 0, (("src/signatures.mli", 129, 4853, 4855), ("src/signatures.mli", 129, 4853, 4880), 0), 0, Tag1 ("Signatures", 50)), 0); (("to_string", 1787), ((Tag1 (0, (Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1614), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1613), 0), 100000000, 0, -1612), 0, (("src/signatures.mli", 130, 4881, 4883), ("src/signatures.mli", 130, 4881, 4910), 0), 0, Tag1 ("Signatures", 51)), 0); (("print", 1788), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -1611), (Tag1 (0, (Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1610), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1609), 0), 100000000, 0, -1608), 0), 100000000, 0, -1607), 0, (("src/signatures.mli", 131, 4911, 4913), ("src/signatures.mli", 131, 4911, 4954), 0), 0, Tag1 ("Signatures", 52)), 0); (("current_dir_name", 1789), ((Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1606), 0, (("src/signatures.mli", 132, 4955, 4957), ("src/signatures.mli", 132, 4955, 4981), 0), 0, Tag1 ("Signatures", 53)), 0); (("parent_dir_name", 1790), ((Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1605), 0, (("src/signatures.mli", 133, 4982, 4984), ("src/signatures.mli", 133, 4982, 5007), 0), 0, Tag1 ("Signatures", 54)), 0); (("read", 1791), ((Tag1 (0, (Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1604), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1603), 0), 100000000, 0, -1602), 0, (("src/signatures.mli", 134, 5008, 5010), ("src/signatures.mli", 134, 5008, 5032), 0), 0, Tag1 ("Signatures", 55)), 0); (("same_contents", 1792), ((Tag1 (0, (Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1601), (Tag1 (0, (Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1600), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1599), 0), 100000000, 0, -1598), 0), 100000000, 0, -1597), 0, (("src/signatures.mli", 135, 5033, 5035), ("src/signatures.mli", 135, 5033, 5069), 0), 0, Tag1 ("Signatures", 56)), 0); (("basename", 1793), ((Tag1 (0, (Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1596), (Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1595), 0), 100000000, 0, -1594), 0, (("src/signatures.mli", 136, 5070, 5072), ("src/signatures.mli", 136, 5070, 5093), 0), 0, Tag1 ("Signatures", 57)), 0); (("dirname", 1794), ((Tag1 (0, (Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1593), (Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1592), 0), 100000000, 0, -1591), 0, (("src/signatures.mli", 137, 5094, 5096), ("src/signatures.mli", 137, 5094, 5116), 0), 0, Tag1 ("Signatures", 58)), 0); (("is_relative", 1795), ((Tag1 (0, (Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1590), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1589), 0), 100000000, 0, -1588), 0, (("src/signatures.mli", 138, 5117, 5119), ("src/signatures.mli", 138, 5117, 5146), 0), 0, Tag1 ("Signatures", 59)), 0); (("readlink", 1796), ((Tag1 (0, (Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1587), (Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1586), 0), 100000000, 0, -1585), 0, (("src/signatures.mli", 139, 5147, 5149), ("src/signatures.mli", 139, 5147, 5170), 0), 0, Tag1 ("Signatures", 60)), 0); (("readdir", 1797), ((Tag1 (0, (Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1584), (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1583)], (0)), 100000000, 0, -1582), 0), 100000000, 0, -1581), 0, (("src/signatures.mli", 140, 5171, 5173), ("src/signatures.mli", 140, 5171, 5199), 0), 0, Tag1 ("Signatures", 61)), 0); (("is_link", 1798), ((Tag1 (0, (Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1580), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1579), 0), 100000000, 0, -1578), 0, (("src/signatures.mli", 141, 5200, 5202), ("src/signatures.mli", 141, 5200, 5225), 0), 0, Tag1 ("Signatures", 62)), 0); (("is_directory", 1799), ((Tag1 (0, (Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1577), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1576), 0), 100000000, 0, -1575), 0, (("src/signatures.mli", 142, 5226, 5228), ("src/signatures.mli", 142, 5226, 5256), 0), 0, Tag1 ("Signatures", 63)), 0); (("add_extension", 1800), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1574), (Tag1 (0, (Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1573), (Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1572), 0), 100000000, 0, -1571), 0), 100000000, 0, -1570), 0, (("src/signatures.mli", 144, 5258, 5260), ("src/signatures.mli", 144, 5258, 5296), 0), 0, Tag1 ("Signatures", 64)), 0); (("check_extension", 1801), ((Tag1 (0, (Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1569), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1568), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1567), 0), 100000000, 0, -1566), 0), 100000000, 0, -1565), 0, (("src/signatures.mli", 145, 5297, 5299), ("src/signatures.mli", 145, 5297, 5340), 0), 0, Tag1 ("Signatures", 65)), 0); (("get_extension", 1802), ((Tag1 (0, (Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1564), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1563), 0), 100000000, 0, -1562), 0, (("src/signatures.mli", 147, 5342, 5344), ("src/signatures.mli", 147, 5342, 5375), 0), 0, Tag1 ("Signatures", 66)), 0); (("remove_extension", 1803), ((Tag1 (0, (Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1561), (Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1560), 0), 100000000, 0, -1559), 0, (("src/signatures.mli", 148, 5376, 5378), ("src/signatures.mli", 148, 5376, 5407), 0), 0, Tag1 ("Signatures", 67)), 0); (("update_extension", 1804), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1558), (Tag1 (0, (Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1557), (Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1556), 0), 100000000, 0, -1555), 0), 100000000, 0, -1554), 0, (("src/signatures.mli", 149, 5408, 5410), ("src/signatures.mli", 149, 5408, 5449), 0), 0, Tag1 ("Signatures", 68)), 0); (("get_extensions", 1805), ((Tag1 (0, (Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1553), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1552), 0), 100000000, 0, -1551), 0, (("src/signatures.mli", 151, 5451, 5453), ("src/signatures.mli", 151, 5451, 5485), 0), 0, Tag1 ("Signatures", 69)), 0); (("remove_extensions", 1806), ((Tag1 (0, (Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1550), (Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1549), 0), 100000000, 0, -1548), 0, (("src/signatures.mli", 152, 5486, 5488), ("src/signatures.mli", 152, 5486, 5518), 0), 0, Tag1 ("Signatures", 70)), 0); (("update_extensions", 1807), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1547), (Tag1 (0, (Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1546), (Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1545), 0), 100000000, 0, -1544), 0), 100000000, 0, -1543), 0, (("src/signatures.mli", 153, 5519, 5521), ("src/signatures.mli", 153, 5519, 5561), 0), 0, Tag1 ("Signatures", 71)), 0); (("print_path_list", 1808), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -1542), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1541)], (0)), 100000000, 0, -1540), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1539), 0), 100000000, 0, -1538), 0), 100000000, 0, -1537), 0, (("src/signatures.mli", 155, 5563, 5565), ("src/signatures.mli", 155, 5563, 5621), 0), 0, Tag1 ("Signatures", 72)), 0); (("pwd", 1809), ((Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1536), 0, (("src/signatures.mli", 156, 5622, 5624), ("src/signatures.mli", 156, 5622, 5635), 0), 0, Tag1 ("Signatures", 73)), 0); (("parent", 1810), ((Tag1 (0, (Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1535), (Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1534), 0), 100000000, 0, -1533), 0, (("src/signatures.mli", 157, 5636, 5638), ("src/signatures.mli", 157, 5636, 5657), 0), 0, Tag1 ("Signatures", 74)), 0); (("is_prefix", 1811), ((Tag1 (0, (Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1532), (Tag1 (0, (Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1531), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1530), 0), 100000000, 0, -1529), 0), 100000000, 0, -1528), 0, (("src/signatures.mli", 159, 5715, 5717), ("src/signatures.mli", 159, 5715, 5747), 0), 0, Tag1 ("Signatures", 75)), 0); (("is_implicit", 1812), ((Tag1 (0, (Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1527), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1526), 0), 100000000, 0, -1525), 0, (("src/signatures.mli", 160, 5748, 5750), ("src/signatures.mli", 160, 5748, 5777), 0), 0, Tag1 ("Signatures", 76)), 0); Tag3 (("Operators", 1813), 0, (Tag1 ([(("/", 1814), ((Tag1 (0, (Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1661), (Tag1 (0, (Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1660), (Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1659), 0), 100000000, 0, -1658), 0), 100000000, 0, -1657), 0, (("src/signatures.mli", 162, 5803, 5807), ("src/signatures.mli", 162, 5803, 5830), 0), 0, Tag1 ("Signatures", 77)), 0); (("-.-", 1815), ((Tag1 (0, (Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1656), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1655), (Tag3 ((("t", 1778)), 0, (0)), 100000000, 0, -1654), 0), 100000000, 0, -1653), 0), 100000000, 0, -1652), 0, (("src/signatures.mli", 163, 5831, 5835), ("src/signatures.mli", 163, 5831, 5865), 0), 0, Tag1 ("Signatures", 78)), 0)]), 0, (("src/signatures.mli", 161, 5778, 5780), ("src/signatures.mli", 164, 5866, 5871), 0), Tag1 ("Signatures", 79)), 0, 0)])), 0, (("src/signatures.mli", 120, 4575, 4575), ("src/signatures.mli", 165, 5872, 5875), 0), Tag1 ("Signatures", 80)), 0); Tag4 (("COMMAND", 1511), ((Tag1 ([Tag1 (("tags", 1816), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/signatures.mli", 170, 6019, 6021), ("src/signatures.mli", 170, 6019, 6030), 0), 0, 0, 0, Tag1 ("Signatures", 81)), 1, 0); Tag1 (("pathname", 1817), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/signatures.mli", 171, 6031, 6033), ("src/signatures.mli", 171, 6031, 6046), 0), 0, 0, 0, Tag1 ("Signatures", 82)), 1, 0); Tag1 (("t", 1818), (0, 0, Tag1 ([(("Seq", 969), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 1818)), 0, (0)), 100000000, 0, -1727)], (0)), 100000000, 0, -1726)]), 0, (("src/signatures.mli", 176, 6206, 6210), ("src/signatures.mli", 176, 6206, 6225), 0), 0, Tag1 ("Signatures", 85)); (("Cmd", 970), ([(Tag3 ((("spec", 1819)), 0, (0)), 100000000, 0, -1728)]), 0, (("src/signatures.mli", 177, 6280, 6284), ("src/signatures.mli", 177, 6280, 6297), 0), 0, Tag1 ("Signatures", 86)); (("Echo", 971), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1730)], (0)), 100000000, 0, -1729); (Tag3 ((("pathname", 1817)), 0, (0)), 100000000, 0, -1731)]), 0, (("src/signatures.mli", 178, 6360, 6364), ("src/signatures.mli", 178, 6360, 6396), 0), 0, Tag1 ("Signatures", 87)); (("Nop", 972), (0), 0, (("src/signatures.mli", 180, 6481, 6485), ("src/signatures.mli", 180, 6481, 6490), 0), 0, Tag1 ("Signatures", 88))], 0), 1, 0, 0, 0, 0, 0, (("src/signatures.mli", 175, 6195, 6197), ("src/signatures.mli", 180, 6481, 6490), 0), 0, 0, 0, Tag1 ("Signatures", 83)), 1, 0); Tag1 (("spec", 1819), (0, 0, Tag1 ([(("N", 973), (0), 0, (("src/signatures.mli", 184, 6625, 6629), ("src/signatures.mli", 184, 6625, 6632), 0), 0, Tag1 ("Signatures", 89)); (("S", 974), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("spec", 1819)), 0, (0)), 100000000, 0, -1718)], (0)), 100000000, 0, -1717)]), 0, (("src/signatures.mli", 185, 6667, 6671), ("src/signatures.mli", 185, 6667, 6687), 0), 0, Tag1 ("Signatures", 90)); (("A", 975), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1719)]), 0, (("src/signatures.mli", 186, 6747, 6751), ("src/signatures.mli", 186, 6747, 6764), 0), 0, Tag1 ("Signatures", 91)); (("P", 976), ([(Tag3 ((("pathname", 1817)), 0, (0)), 100000000, 0, -1720)]), 0, (("src/signatures.mli", 187, 6784, 6788), ("src/signatures.mli", 187, 6784, 6803), 0), 0, Tag1 ("Signatures", 92)); (("Px", 977), ([(Tag3 ((("pathname", 1817)), 0, (0)), 100000000, 0, -1721)]), 0, (("src/signatures.mli", 188, 6824, 6828), ("src/signatures.mli", 188, 6824, 6844), 0), 0, Tag1 ("Signatures", 93)); (("Sh", 978), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1722)]), 0, (("src/signatures.mli", 190, 6943, 6947), ("src/signatures.mli", 190, 6943, 6961), 0), 0, Tag1 ("Signatures", 94)); (("T", 979), ([(Tag3 ((("tags", 1816)), 0, (0)), 100000000, 0, -1723)]), 0, (("src/signatures.mli", 191, 7022, 7026), ("src/signatures.mli", 191, 7022, 7037), 0), 0, Tag1 ("Signatures", 95)); (("V", 980), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1724)]), 0, (("src/signatures.mli", 196, 7319, 7323), ("src/signatures.mli", 196, 7319, 7336), 0), 0, Tag1 ("Signatures", 96)); (("Quote", 981), ([(Tag3 ((("spec", 1819)), 0, (0)), 100000000, 0, -1725)]), 0, (("src/signatures.mli", 198, 7451, 7455), ("src/signatures.mli", 198, 7451, 7470), 0), 0, Tag1 ("Signatures", 97))], 0), 1, 0, 0, 0, 0, 0, (("src/signatures.mli", 183, 6612, 6614), ("src/signatures.mli", 198, 7451, 7470), 0), 0, 0, 0, Tag1 ("Signatures", 84)), 2, 0); (("atomize", 1820), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1716)], (0)), 100000000, 0, -1715), (Tag3 ((("spec", 1819)), 0, (0)), 100000000, 0, -1714), 0), 100000000, 0, -1713), 0, (("src/signatures.mli", 217, 7996, 7998), ("src/signatures.mli", 217, 7996, 8031), 0), 0, Tag1 ("Signatures", 98)), 0); (("atomize_paths", 1821), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1712)], (0)), 100000000, 0, -1711), (Tag3 ((("spec", 1819)), 0, (0)), 100000000, 0, -1710), 0), 100000000, 0, -1709), 0, (("src/signatures.mli", 220, 8116, 8118), ("src/signatures.mli", 220, 8116, 8157), 0), 0, Tag1 ("Signatures", 99)), 0); (("execute", 1822), ((Tag1 (Tag1 ("quiet"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1708)], (0)), 100000000, 0, -1707), (Tag1 (Tag1 ("pretend"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1706)], (0)), 100000000, 0, -1705), (Tag1 (0, (Tag3 ((("t", 1818)), 0, (0)), 100000000, 0, -1704), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1703), 0), 100000000, 0, -1702), 0), 100000000, 0, -1701), 0), 100000000, 0, -1700), 0, (("src/signatures.mli", 223, 8185, 8187), ("src/signatures.mli", 223, 8185, 8242), 0), 0, Tag1 ("Signatures", 100)), 0); (("execute_many", 1823), ((Tag1 (Tag1 ("quiet"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1699)], (0)), 100000000, 0, -1698), (Tag1 (Tag1 ("pretend"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1697)], (0)), 100000000, 0, -1696), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 1818)), 0, (0)), 100000000, 0, -1695)], (0)), 100000000, 0, -1694), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1692)], (0)), 100000000, 0, -1691); (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -1693)]), 100000000, 0, -1690)], (0)), 100000000, 0, -1689), 0), 100000000, 0, -1688), 0), 100000000, 0, -1687), 0), 100000000, 0, -1686), 0, (("src/signatures.mli", 227, 8358, 8360), ("src/signatures.mli", 227, 8358, 8445), 0), 0, Tag1 ("Signatures", 101)), 0); (("setup_virtual_command_solver", 1824), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1685), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1684), (Tag3 ((("spec", 1819)), 0, (0)), 100000000, 0, -1683), 0), 100000000, 0, -1682), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1681), 0), 100000000, 0, -1680), 0), 100000000, 0, -1679), 0, (("src/signatures.mli", 232, 8625, 8627), ("src/signatures.mli", 232, 8625, 8694), 0), 0, Tag1 ("Signatures", 102)), 0); (("search_in_path", 1825), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1678), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1677), 0), 100000000, 0, -1676), 0, (("src/signatures.mli", 236, 8790, 8792), ("src/signatures.mli", 236, 8790, 8829), 0), 0, Tag1 ("Signatures", 103)), 0); (("reduce", 1826), ((Tag1 (0, (Tag3 ((("spec", 1819)), 0, (0)), 100000000, 0, -1675), (Tag3 ((("spec", 1819)), 0, (0)), 100000000, 0, -1674), 0), 100000000, 0, -1673), 0, (("src/signatures.mli", 240, 8943, 8945), ("src/signatures.mli", 240, 8943, 8970), 0), 0, Tag1 ("Signatures", 104)), 0); (("print", 1827), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -1672), (Tag1 (0, (Tag3 ((("t", 1818)), 0, (0)), 100000000, 0, -1671), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1670), 0), 100000000, 0, -1669), 0), 100000000, 0, -1668), 0, (("src/signatures.mli", 243, 9050, 9052), ("src/signatures.mli", 243, 9050, 9093), 0), 0, Tag1 ("Signatures", 105)), 0); (("to_string", 1828), ((Tag1 (0, (Tag3 ((("t", 1818)), 0, (0)), 100000000, 0, -1667), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1666), 0), 100000000, 0, -1665), 0, (("src/signatures.mli", 246, 9158, 9160), ("src/signatures.mli", 246, 9158, 9187), 0), 0, Tag1 ("Signatures", 106)), 0); (("string_of_command_spec", 1829), ((Tag1 (0, (Tag3 ((("spec", 1819)), 0, (0)), 100000000, 0, -1664), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1663), 0), 100000000, 0, -1662), 0, (("src/signatures.mli", 250, 9287, 9289), ("src/signatures.mli", 250, 9287, 9332), 0), 0, Tag1 ("Signatures", 107)), 0)])), 0, (("src/signatures.mli", 169, 5993, 5993), ("src/signatures.mli", 251, 9333, 9336), 0), Tag1 ("Signatures", 108)), 0); Tag4 (("GLOB", 1512), ((Tag1 ([Tag1 (("globber", 1830), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/signatures.mli", 292, 11895, 11897), ("src/signatures.mli", 292, 11895, 11909), 0), 0, 0, 0, Tag1 ("Signatures", 109)), 1, 0); (("parse", 1831), ((Tag1 (Tag1 ("dir"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1743)], (0)), 100000000, 0, -1742), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1741), (Tag3 ((("globber", 1830)), 0, (0)), 100000000, 0, -1740), 0), 100000000, 0, -1739), 0), 100000000, 0, -1738), 0, (("src/signatures.mli", 295, 12029, 12031), ("src/signatures.mli", 295, 12029, 12075), 0), 0, Tag1 ("Signatures", 110)), 0); Tag2 (("Parse_error", 1832), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1737)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Signatures", 111)), 2, 0); (("eval", 1833), ((Tag1 (0, (Tag3 ((("globber", 1830)), 0, (0)), 100000000, 0, -1736), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1735), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1734), 0), 100000000, 0, -1733), 0), 100000000, 0, -1732), 0, (("src/signatures.mli", 304, 12607, 12609), ("src/signatures.mli", 304, 12607, 12645), 0), 0, Tag1 ("Signatures", 112)), 0)])), 0, (("src/signatures.mli", 255, 9499, 9499), ("src/signatures.mli", 305, 12646, 12649), 0), Tag1 ("Signatures", 113)), 0); Tag4 (("LOG", 1513), ((Tag1 ([(("level", 1834), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1767)], (0)), 100000000, 0, -1766), 0, (("src/signatures.mli", 310, 12789, 12791), ("src/signatures.mli", 310, 12789, 12810), 0), 0, Tag1 ("Signatures", 114)), 0); (("dprintf", 1835), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1765), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format"), [((("a")), 100000000, 0, -1761); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -1763); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1764)], (0)), 100000000, 0, -1762), ((("a")), 100000000, 0, -1761), 0), 100000000, 0, -1760), 0), 100000000, 0, -1759), 0, (("src/signatures.mli", 318, 13197, 13199), ("src/signatures.mli", 318, 13197, 13261), 0), 0, Tag1 ("Signatures", 115)), 0); (("is_logging", 1836), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1758), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1757), 0), 100000000, 0, -1756), 0, (("src/signatures.mli", 321, 13330, 13332), ("src/signatures.mli", 321, 13330, 13360), 0), 0, Tag1 ("Signatures", 116)), 0); (("eprintf", 1837), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format"), [((("a")), 100000000, 0, -1752); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -1754); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1755)], (0)), 100000000, 0, -1753), ((("a")), 100000000, 0, -1752), 0), 100000000, 0, -1751), 0, (("src/signatures.mli", 324, 13423, 13425), ("src/signatures.mli", 324, 13423, 13480), 0), 0, Tag1 ("Signatures", 117)), 0); (("raw_dprintf", 1838), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1750), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format"), [((("a")), 100000000, 0, -1746); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -1748); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1749)], (0)), 100000000, 0, -1747), ((("a")), 100000000, 0, -1746), 0), 100000000, 0, -1745), 0), 100000000, 0, -1744), 0, (("src/signatures.mli", 327, 13540, 13542), ("src/signatures.mli", 327, 13540, 13608), 0), 0, Tag1 ("Signatures", 118)), 0)])), 0, (("src/signatures.mli", 308, 12723, 12723), ("src/signatures.mli", 328, 13609, 13612), 0), Tag1 ("Signatures", 119)), 0); Tag4 (("OUTCOME", 1514), ((Tag1 ([Tag1 (("t", 1839), ([((("a")), 100000000, 0, -1784); ((("b")), 100000000, 0, -1785)], 2, Tag1 ([(("Good", 1005), ([((("a")), 100000000, 0, -1784)]), 0, (("src/signatures.mli", 332, 13659, 13663), ("src/signatures.mli", 332, 13659, 13675), 0), 0, Tag1 ("Signatures", 121)); (("Bad", 1006), ([((("b")), 100000000, 0, -1785)]), 0, (("src/signatures.mli", 333, 13676, 13680), ("src/signatures.mli", 333, 13676, 13691), 0), 0, Tag1 ("Signatures", 122))], 0), 1, 0, [25; 25], [0; 0], 0, 0, (("src/signatures.mli", 331, 13640, 13642), ("src/signatures.mli", 333, 13676, 13691), 0), 0, 0, 0, Tag1 ("Signatures", 120)), 1, 0); (("wrap", 1840), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -1782), ((("b")), 100000000, 0, -1780), 0), 100000000, 0, -1783), (Tag1 (0, ((("a")), 100000000, 0, -1782), (Tag3 ((("t", 1839)), [((("b")), 100000000, 0, -1780); (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -1781)], (0)), 100000000, 0, -1779), 0), 100000000, 0, -1778), 0), 100000000, 0, -1777), 0, (("src/signatures.mli", 335, 13693, 13695), ("src/signatures.mli", 335, 13693, 13737), 0), 0, Tag1 ("Signatures", 123)), 0); (("ignore_good", 1841), ((Tag1 (0, (Tag3 ((("t", 1839)), [((("a")), 100000000, 0, -1775); (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -1776)], (0)), 100000000, 0, -1774), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1773), 0), 100000000, 0, -1772), 0, (("src/signatures.mli", 336, 13738, 13740), ("src/signatures.mli", 336, 13738, 13777), 0), 0, Tag1 ("Signatures", 124)), 0); (("good", 1842), ((Tag1 (0, (Tag3 ((("t", 1839)), [((("a")), 100000000, 0, -1769); (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -1771)], (0)), 100000000, 0, -1770), ((("a")), 100000000, 0, -1769), 0), 100000000, 0, -1768), 0, (("src/signatures.mli", 337, 13778, 13780), ("src/signatures.mli", 337, 13778, 13808), 0), 0, Tag1 ("Signatures", 125)), 0)])), 0, (("src/signatures.mli", 330, 13614, 13614), ("src/signatures.mli", 338, 13809, 13812), 0), Tag1 ("Signatures", 126)), 0); Tag4 (("MISC", 1515), ((Tag1 ([(("opt_print", 1843), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -1894), (Tag1 (0, ((("a")), 100000000, 0, -1889), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1893), 0), 100000000, 0, -1892), 0), 100000000, 0, -1891), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -1890), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1889)], (0)), 100000000, 0, -1888), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1887), 0), 100000000, 0, -1886), 0), 100000000, 0, -1885), 0), 100000000, 0, -1884), 0, (("src/signatures.mli", 341, 13837, 13839), ("src/signatures.mli", 342, 13855, 13932), 0), 0, Tag1 ("Signatures", 127)), 0); (("the", 1844), ((Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1882)], (0)), 100000000, 0, -1883), ((("a")), 100000000, 0, -1882), 0), 100000000, 0, -1881), 0, (("src/signatures.mli", 343, 13933, 13935), ("src/signatures.mli", 343, 13933, 13960), 0), 0, Tag1 ("Signatures", 128)), 0); (("getenv", 1845), ((Tag1 (Tag1 ("default"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1880)], (0)), 100000000, 0, -1879), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1878), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1877), 0), 100000000, 0, -1876), 0), 100000000, 0, -1875), 0, (("src/signatures.mli", 344, 13961, 13963), ("src/signatures.mli", 344, 13961, 14011), 0), 0, Tag1 ("Signatures", 129)), 0); (("with_input_file", 1846), ((Tag1 (Tag1 ("bin"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1874)], (0)), 100000000, 0, -1873), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1872), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "in_channel"), 0, (0)), 100000000, 0, -1871), ((("a")), 100000000, 0, -1869), 0), 100000000, 0, -1870), ((("a")), 100000000, 0, -1869), 0), 100000000, 0, -1868), 0), 100000000, 0, -1867), 0), 100000000, 0, -1866), 0, (("src/signatures.mli", 345, 14012, 14014), ("src/signatures.mli", 345, 14012, 14083), 0), 0, Tag1 ("Signatures", 130)), 0); (("with_output_file", 1847), ((Tag1 (Tag1 ("bin"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1865)], (0)), 100000000, 0, -1864), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1863), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -1862), ((("a")), 100000000, 0, -1860), 0), 100000000, 0, -1861), ((("a")), 100000000, 0, -1860), 0), 100000000, 0, -1859), 0), 100000000, 0, -1858), 0), 100000000, 0, -1857), 0, (("src/signatures.mli", 346, 14084, 14086), ("src/signatures.mli", 346, 14084, 14157), 0), 0, Tag1 ("Signatures", 131)), 0); (("with_temp_file", 1848), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1856), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1855), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1854), ((("a")), 100000000, 0, -1852), 0), 100000000, 0, -1853), ((("a")), 100000000, 0, -1852), 0), 100000000, 0, -1851), 0), 100000000, 0, -1850), 0), 100000000, 0, -1849), 0, (("src/signatures.mli", 347, 14158, 14160), ("src/signatures.mli", 347, 14158, 14221), 0), 0, Tag1 ("Signatures", 132)), 0); (("read_file", 1849), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1848), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1847), 0), 100000000, 0, -1846), 0, (("src/signatures.mli", 348, 14222, 14224), ("src/signatures.mli", 348, 14222, 14256), 0), 0, Tag1 ("Signatures", 133)), 0); (("copy_chan", 1850), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "in_channel"), 0, (0)), 100000000, 0, -1845), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -1844), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1843), 0), 100000000, 0, -1842), 0), 100000000, 0, -1841), 0, (("src/signatures.mli", 349, 14257, 14259), ("src/signatures.mli", 349, 14257, 14308), 0), 0, Tag1 ("Signatures", 134)), 0); (("copy_file", 1851), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1840), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1839), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1838), 0), 100000000, 0, -1837), 0), 100000000, 0, -1836), 0, (("src/signatures.mli", 350, 14309, 14311), ("src/signatures.mli", 350, 14309, 14351), 0), 0, Tag1 ("Signatures", 135)), 0); (("print_string_list", 1852), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -1835), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1834)], (0)), 100000000, 0, -1833), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1832), 0), 100000000, 0, -1831), 0), 100000000, 0, -1830), 0, (("src/signatures.mli", 351, 14352, 14354), ("src/signatures.mli", 351, 14352, 14417), 0), 0, Tag1 ("Signatures", 136)), 0); (("!*", 1853), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lazy"), "t"), [((("a")), 100000000, 0, -1828)], (0)), 100000000, 0, -1829), ((("a")), 100000000, 0, -1828), 0), 100000000, 0, -1827), 0, (("src/signatures.mli", 354, 14479, 14481), ("src/signatures.mli", 354, 14479, 14509), 0), 0, Tag1 ("Signatures", 137)), 0); (("&", 1854), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -1825), ((("b")), 100000000, 0, -1824), 0), 100000000, 0, -1826), (Tag1 (0, ((("a")), 100000000, 0, -1825), ((("b")), 100000000, 0, -1824), 0), 100000000, 0, -1823), 0), 100000000, 0, -1822), 0, (("src/signatures.mli", 360, 14705, 14707), ("src/signatures.mli", 360, 14705, 14741), 0), 0, Tag1 ("Signatures", 138)), 0); (("|>", 1855), ((Tag1 (0, ((("a")), 100000000, 0, -1821), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -1821), ((("b")), 100000000, 0, -1819), 0), 100000000, 0, -1820), ((("b")), 100000000, 0, -1819), 0), 100000000, 0, -1818), 0), 100000000, 0, -1817), 0, (("src/signatures.mli", 365, 14903, 14905), ("src/signatures.mli", 365, 14903, 14940), 0), 0, Tag1 ("Signatures", 139)), 0); (("@:=", 1856), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -1814)], (0)), 100000000, 0, -1816)], (0)), 100000000, 0, -1815), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -1814)], (0)), 100000000, 0, -1813), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1812), 0), 100000000, 0, -1811), 0), 100000000, 0, -1810), 0, (("src/signatures.mli", 368, 14992, 14994), ("src/signatures.mli", 368, 14992, 15038), 0), 0, Tag1 ("Signatures", 140)), 0); (("memo", 1857), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -1808), ((("b")), 100000000, 0, -1807), 0), 100000000, 0, -1809), (Tag1 (0, ((("a")), 100000000, 0, -1808), ((("b")), 100000000, 0, -1807), 0), 100000000, 0, -1806), 0), 100000000, 0, -1805), 0, (("src/signatures.mli", 370, 15040, 15042), ("src/signatures.mli", 370, 15040, 15077), 0), 0, Tag1 ("Signatures", 141)), 0); (("memo2", 1858), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -1802), (Tag1 (0, ((("b")), 100000000, 0, -1801), ((("c")), 100000000, 0, -1800), 0), 100000000, 0, -1804), 0), 100000000, 0, -1803), (Tag1 (0, ((("a")), 100000000, 0, -1802), (Tag1 (0, ((("b")), 100000000, 0, -1801), ((("c")), 100000000, 0, -1800), 0), 100000000, 0, -1799), 0), 100000000, 0, -1798), 0), 100000000, 0, -1797), 0, (("src/signatures.mli", 372, 15079, 15081), ("src/signatures.mli", 372, 15079, 15129), 0), 0, Tag1 ("Signatures", 142)), 0); (("memo3", 1859), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -1793), (Tag1 (0, ((("b")), 100000000, 0, -1792), (Tag1 (0, ((("c")), 100000000, 0, -1791), ((("d")), 100000000, 0, -1790), 0), 100000000, 0, -1796), 0), 100000000, 0, -1795), 0), 100000000, 0, -1794), (Tag1 (0, ((("a")), 100000000, 0, -1793), (Tag1 (0, ((("b")), 100000000, 0, -1792), (Tag1 (0, ((("c")), 100000000, 0, -1791), ((("d")), 100000000, 0, -1790), 0), 100000000, 0, -1789), 0), 100000000, 0, -1788), 0), 100000000, 0, -1787), 0), 100000000, 0, -1786), 0, (("src/signatures.mli", 374, 15131, 15133), ("src/signatures.mli", 374, 15131, 15193), 0), 0, Tag1 ("Signatures", 143)), 0)])), 0, (("src/signatures.mli", 340, 13814, 13814), ("src/signatures.mli", 375, 15194, 15197), 0), Tag1 ("Signatures", 144)), 0); Tag4 (("OPTIONS", 1516), ((Tag1 ([Tag1 (("command_spec", 1860), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/signatures.mli", 378, 15225, 15227), ("src/signatures.mli", 378, 15225, 15244), 0), 0, 0, 0, Tag1 ("Signatures", 145)), 1, 0); (("build_dir", 1861), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2022)], (0)), 100000000, 0, -2021), 0, (("src/signatures.mli", 380, 15246, 15248), ("src/signatures.mli", 380, 15246, 15274), 0), 0, Tag1 ("Signatures", 146)), 0); (("include_dirs", 1862), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2020)], (0)), 100000000, 0, -2019)], (0)), 100000000, 0, -2018), 0, (("src/signatures.mli", 381, 15275, 15277), ("src/signatures.mli", 381, 15275, 15311), 0), 0, Tag1 ("Signatures", 147)), 0); (("exclude_dirs", 1863), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2017)], (0)), 100000000, 0, -2016)], (0)), 100000000, 0, -2015), 0, (("src/signatures.mli", 382, 15312, 15314), ("src/signatures.mli", 382, 15312, 15348), 0), 0, Tag1 ("Signatures", 148)), 0); (("nothing_should_be_rebuilt", 1864), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2014)], (0)), 100000000, 0, -2013), 0, (("src/signatures.mli", 383, 15349, 15351), ("src/signatures.mli", 383, 15349, 15391), 0), 0, Tag1 ("Signatures", 149)), 0); (("ocamlc", 1865), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 1860)), 0, (0)), 100000000, 0, -2012)], (0)), 100000000, 0, -2011), 0, (("src/signatures.mli", 384, 15392, 15394), ("src/signatures.mli", 384, 15392, 15423), 0), 0, Tag1 ("Signatures", 150)), 0); (("plugin_ocamlc", 1866), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 1860)), 0, (0)), 100000000, 0, -2010)], (0)), 100000000, 0, -2009), 0, (("src/signatures.mli", 385, 15424, 15426), ("src/signatures.mli", 385, 15424, 15462), 0), 0, Tag1 ("Signatures", 151)), 0); (("ocamlopt", 1867), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 1860)), 0, (0)), 100000000, 0, -2008)], (0)), 100000000, 0, -2007), 0, (("src/signatures.mli", 386, 15463, 15465), ("src/signatures.mli", 386, 15463, 15496), 0), 0, Tag1 ("Signatures", 152)), 0); (("plugin_ocamlopt", 1868), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 1860)), 0, (0)), 100000000, 0, -2006)], (0)), 100000000, 0, -2005), 0, (("src/signatures.mli", 387, 15497, 15499), ("src/signatures.mli", 387, 15497, 15537), 0), 0, Tag1 ("Signatures", 153)), 0); (("ocamldep", 1869), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 1860)), 0, (0)), 100000000, 0, -2004)], (0)), 100000000, 0, -2003), 0, (("src/signatures.mli", 388, 15538, 15540), ("src/signatures.mli", 388, 15538, 15571), 0), 0, Tag1 ("Signatures", 154)), 0); (("ocamldoc", 1870), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 1860)), 0, (0)), 100000000, 0, -2002)], (0)), 100000000, 0, -2001), 0, (("src/signatures.mli", 389, 15572, 15574), ("src/signatures.mli", 389, 15572, 15605), 0), 0, Tag1 ("Signatures", 155)), 0); (("ocamlyacc", 1871), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 1860)), 0, (0)), 100000000, 0, -2000)], (0)), 100000000, 0, -1999), 0, (("src/signatures.mli", 390, 15606, 15608), ("src/signatures.mli", 390, 15606, 15640), 0), 0, Tag1 ("Signatures", 156)), 0); (("ocamllex", 1872), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 1860)), 0, (0)), 100000000, 0, -1998)], (0)), 100000000, 0, -1997), 0, (("src/signatures.mli", 391, 15641, 15643), ("src/signatures.mli", 391, 15641, 15674), 0), 0, Tag1 ("Signatures", 157)), 0); (("ocamlrun", 1873), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 1860)), 0, (0)), 100000000, 0, -1996)], (0)), 100000000, 0, -1995), 0, (("src/signatures.mli", 392, 15675, 15677), ("src/signatures.mli", 392, 15675, 15708), 0), 0, Tag1 ("Signatures", 158)), 0); (("ocamlmklib", 1874), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 1860)), 0, (0)), 100000000, 0, -1994)], (0)), 100000000, 0, -1993), 0, (("src/signatures.mli", 393, 15709, 15711), ("src/signatures.mli", 393, 15709, 15744), 0), 0, Tag1 ("Signatures", 159)), 0); (("ocamlmktop", 1875), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 1860)), 0, (0)), 100000000, 0, -1992)], (0)), 100000000, 0, -1991), 0, (("src/signatures.mli", 394, 15745, 15747), ("src/signatures.mli", 394, 15745, 15780), 0), 0, Tag1 ("Signatures", 160)), 0); (("hygiene", 1876), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1990)], (0)), 100000000, 0, -1989), 0, (("src/signatures.mli", 395, 15781, 15783), ("src/signatures.mli", 395, 15781, 15805), 0), 0, Tag1 ("Signatures", 161)), 0); (("sanitize", 1877), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1988)], (0)), 100000000, 0, -1987), 0, (("src/signatures.mli", 396, 15806, 15808), ("src/signatures.mli", 396, 15806, 15831), 0), 0, Tag1 ("Signatures", 162)), 0); (("sanitization_script", 1878), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1986)], (0)), 100000000, 0, -1985), 0, (("src/signatures.mli", 397, 15832, 15834), ("src/signatures.mli", 397, 15832, 15870), 0), 0, Tag1 ("Signatures", 163)), 0); (("ignore_auto", 1879), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1984)], (0)), 100000000, 0, -1983), 0, (("src/signatures.mli", 398, 15871, 15873), ("src/signatures.mli", 398, 15871, 15899), 0), 0, Tag1 ("Signatures", 164)), 0); (("plugin", 1880), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1982)], (0)), 100000000, 0, -1981), 0, (("src/signatures.mli", 399, 15900, 15902), ("src/signatures.mli", 399, 15900, 15923), 0), 0, Tag1 ("Signatures", 165)), 0); (("just_plugin", 1881), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1980)], (0)), 100000000, 0, -1979), 0, (("src/signatures.mli", 400, 15924, 15926), ("src/signatures.mli", 400, 15924, 15952), 0), 0, Tag1 ("Signatures", 166)), 0); (("native_plugin", 1882), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1978)], (0)), 100000000, 0, -1977), 0, (("src/signatures.mli", 401, 15953, 15955), ("src/signatures.mli", 401, 15953, 15983), 0), 0, Tag1 ("Signatures", 167)), 0); (("make_links", 1883), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1976)], (0)), 100000000, 0, -1975), 0, (("src/signatures.mli", 402, 15984, 15986), ("src/signatures.mli", 402, 15984, 16011), 0), 0, Tag1 ("Signatures", 168)), 0); (("nostdlib", 1884), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1974)], (0)), 100000000, 0, -1973), 0, (("src/signatures.mli", 403, 16012, 16014), ("src/signatures.mli", 403, 16012, 16037), 0), 0, Tag1 ("Signatures", 169)), 0); (("program_to_execute", 1885), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1972)], (0)), 100000000, 0, -1971), 0, (("src/signatures.mli", 404, 16038, 16040), ("src/signatures.mli", 404, 16038, 16073), 0), 0, Tag1 ("Signatures", 170)), 0); (("must_clean", 1886), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1970)], (0)), 100000000, 0, -1969), 0, (("src/signatures.mli", 405, 16074, 16076), ("src/signatures.mli", 405, 16074, 16101), 0), 0, Tag1 ("Signatures", 171)), 0); (("catch_errors", 1887), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1968)], (0)), 100000000, 0, -1967), 0, (("src/signatures.mli", 406, 16102, 16104), ("src/signatures.mli", 406, 16102, 16131), 0), 0, Tag1 ("Signatures", 172)), 0); (("use_menhir", 1888), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1966)], (0)), 100000000, 0, -1965), 0, (("src/signatures.mli", 407, 16132, 16134), ("src/signatures.mli", 407, 16132, 16159), 0), 0, Tag1 ("Signatures", 173)), 0); (("show_documentation", 1889), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1964)], (0)), 100000000, 0, -1963), 0, (("src/signatures.mli", 408, 16160, 16162), ("src/signatures.mli", 408, 16160, 16195), 0), 0, Tag1 ("Signatures", 174)), 0); (("recursive", 1890), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1962)], (0)), 100000000, 0, -1961), 0, (("src/signatures.mli", 409, 16196, 16198), ("src/signatures.mli", 409, 16196, 16222), 0), 0, Tag1 ("Signatures", 175)), 0); (("use_ocamlfind", 1891), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1960)], (0)), 100000000, 0, -1959), 0, (("src/signatures.mli", 410, 16223, 16225), ("src/signatures.mli", 410, 16223, 16253), 0), 0, Tag1 ("Signatures", 176)), 0); (("plugin_use_ocamlfind", 1892), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1958)], (0)), 100000000, 0, -1957), 0, (("src/signatures.mli", 411, 16254, 16256), ("src/signatures.mli", 411, 16254, 16291), 0), 0, Tag1 ("Signatures", 177)), 0); (("targets", 1893), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1956)], (0)), 100000000, 0, -1955)], (0)), 100000000, 0, -1954), 0, (("src/signatures.mli", 413, 16293, 16295), ("src/signatures.mli", 413, 16293, 16324), 0), 0, Tag1 ("Signatures", 178)), 0); (("ocaml_libs", 1894), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1953)], (0)), 100000000, 0, -1952)], (0)), 100000000, 0, -1951), 0, (("src/signatures.mli", 414, 16325, 16327), ("src/signatures.mli", 414, 16325, 16359), 0), 0, Tag1 ("Signatures", 179)), 0); (("ocaml_mods", 1895), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1950)], (0)), 100000000, 0, -1949)], (0)), 100000000, 0, -1948), 0, (("src/signatures.mli", 415, 16360, 16362), ("src/signatures.mli", 415, 16360, 16394), 0), 0, Tag1 ("Signatures", 180)), 0); (("ocaml_pkgs", 1896), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1947)], (0)), 100000000, 0, -1946)], (0)), 100000000, 0, -1945), 0, (("src/signatures.mli", 416, 16395, 16397), ("src/signatures.mli", 416, 16395, 16429), 0), 0, Tag1 ("Signatures", 181)), 0); (("ocaml_syntax", 1897), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1944)], (0)), 100000000, 0, -1943)], (0)), 100000000, 0, -1942), 0, (("src/signatures.mli", 417, 16430, 16432), ("src/signatures.mli", 417, 16430, 16468), 0), 0, Tag1 ("Signatures", 182)), 0); (("ocaml_cflags", 1898), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1941)], (0)), 100000000, 0, -1940)], (0)), 100000000, 0, -1939), 0, (("src/signatures.mli", 418, 16469, 16471), ("src/signatures.mli", 418, 16469, 16505), 0), 0, Tag1 ("Signatures", 183)), 0); (("ocaml_lflags", 1899), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1938)], (0)), 100000000, 0, -1937)], (0)), 100000000, 0, -1936), 0, (("src/signatures.mli", 419, 16506, 16508), ("src/signatures.mli", 419, 16506, 16542), 0), 0, Tag1 ("Signatures", 184)), 0); (("ocaml_ppflags", 1900), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1935)], (0)), 100000000, 0, -1934)], (0)), 100000000, 0, -1933), 0, (("src/signatures.mli", 420, 16543, 16545), ("src/signatures.mli", 420, 16543, 16580), 0), 0, Tag1 ("Signatures", 185)), 0); (("ocaml_docflags", 1901), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1932)], (0)), 100000000, 0, -1931)], (0)), 100000000, 0, -1930), 0, (("src/signatures.mli", 421, 16581, 16583), ("src/signatures.mli", 421, 16581, 16619), 0), 0, Tag1 ("Signatures", 186)), 0); (("ocaml_yaccflags", 1902), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1929)], (0)), 100000000, 0, -1928)], (0)), 100000000, 0, -1927), 0, (("src/signatures.mli", 422, 16620, 16622), ("src/signatures.mli", 422, 16620, 16659), 0), 0, Tag1 ("Signatures", 187)), 0); (("ocaml_lexflags", 1903), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1926)], (0)), 100000000, 0, -1925)], (0)), 100000000, 0, -1924), 0, (("src/signatures.mli", 423, 16660, 16662), ("src/signatures.mli", 423, 16660, 16698), 0), 0, Tag1 ("Signatures", 188)), 0); (("program_args", 1904), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1923)], (0)), 100000000, 0, -1922)], (0)), 100000000, 0, -1921), 0, (("src/signatures.mli", 424, 16699, 16701), ("src/signatures.mli", 424, 16699, 16735), 0), 0, Tag1 ("Signatures", 189)), 0); (("ignore_list", 1905), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1920)], (0)), 100000000, 0, -1919)], (0)), 100000000, 0, -1918), 0, (("src/signatures.mli", 425, 16736, 16738), ("src/signatures.mli", 425, 16736, 16771), 0), 0, Tag1 ("Signatures", 190)), 0); (("tags", 1906), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1917)], (0)), 100000000, 0, -1916)], (0)), 100000000, 0, -1915), 0, (("src/signatures.mli", 426, 16772, 16774), ("src/signatures.mli", 426, 16772, 16800), 0), 0, Tag1 ("Signatures", 191)), 0); (("tag_lines", 1907), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1914)], (0)), 100000000, 0, -1913)], (0)), 100000000, 0, -1912), 0, (("src/signatures.mli", 427, 16801, 16803), ("src/signatures.mli", 427, 16801, 16834), 0), 0, Tag1 ("Signatures", 192)), 0); (("show_tags", 1908), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1911)], (0)), 100000000, 0, -1910)], (0)), 100000000, 0, -1909), 0, (("src/signatures.mli", 428, 16835, 16837), ("src/signatures.mli", 428, 16835, 16868), 0), 0, Tag1 ("Signatures", 193)), 0); (("ext_obj", 1909), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1908)], (0)), 100000000, 0, -1907), 0, (("src/signatures.mli", 430, 16870, 16872), ("src/signatures.mli", 430, 16870, 16896), 0), 0, Tag1 ("Signatures", 194)), 0); (("ext_lib", 1910), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1906)], (0)), 100000000, 0, -1905), 0, (("src/signatures.mli", 431, 16897, 16899), ("src/signatures.mli", 431, 16897, 16923), 0), 0, Tag1 ("Signatures", 195)), 0); (("ext_dll", 1911), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1904)], (0)), 100000000, 0, -1903), 0, (("src/signatures.mli", 432, 16924, 16926), ("src/signatures.mli", 432, 16924, 16950), 0), 0, Tag1 ("Signatures", 196)), 0); (("exe", 1912), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1902)], (0)), 100000000, 0, -1901), 0, (("src/signatures.mli", 433, 16951, 16953), ("src/signatures.mli", 433, 16951, 16973), 0), 0, Tag1 ("Signatures", 197)), 0); (("add", 1913), ((Tag1 (0, (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Arg"), "key"), 0, (0)), 100000000, 0, -1898); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Arg"), "spec"), 0, (0)), 100000000, 0, -1899); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Arg"), "doc"), 0, (0)), 100000000, 0, -1900)]), 100000000, 0, -1897), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1896), 0), 100000000, 0, -1895), 0, (("src/signatures.mli", 435, 16975, 16977), ("src/signatures.mli", 435, 16975, 17023), 0), 0, Tag1 ("Signatures", 198)), 0)])), 0, (("src/signatures.mli", 377, 15199, 15199), ("src/signatures.mli", 436, 17024, 17027), 0), Tag1 ("Signatures", 199)), 0); Tag4 (("ARCH", 1517), ((Tag1 ([Tag1 (("arch", 1914), ([((("a")), 100000000, 0, -2121)], 1, Tag1 ([(("Arch_dir", 1115), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2120); ((("a")), 100000000, 0, -2121); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("arch", 1914)), [((("a")), 100000000, 0, -2121)], (0)), 100000000, 0, -2123)], (0)), 100000000, 0, -2122)]), 0, (("src/signatures.mli", 440, 17077, 17081), ("src/signatures.mli", 440, 17077, 17121), 0), 0, Tag1 ("Signatures", 201)); (("Arch_dir_pack", 1116), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2124); ((("a")), 100000000, 0, -2121); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("arch", 1914)), [((("a")), 100000000, 0, -2121)], (0)), 100000000, 0, -2126)], (0)), 100000000, 0, -2125)]), 0, (("src/signatures.mli", 441, 17122, 17126), ("src/signatures.mli", 441, 17122, 17171), 0), 0, Tag1 ("Signatures", 202)); (("Arch_file", 1117), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2127); ((("a")), 100000000, 0, -2121)]), 0, (("src/signatures.mli", 442, 17172, 17176), ("src/signatures.mli", 442, 17172, 17202), 0), 0, Tag1 ("Signatures", 203))], 0), 0, 0, [31], [0], 0, 0, (("src/signatures.mli", 439, 17052, 17054), ("src/signatures.mli", 442, 17172, 17202), 0), 0, 0, 0, Tag1 ("Signatures", 200)), 1, 0); (("dir", 1915), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2119), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("arch", 1914)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2118)], (0)), 100000000, 0, -2117)], (0)), 100000000, 0, -2116), (Tag3 ((("arch", 1914)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2115)], (0)), 100000000, 0, -2114), 0), 100000000, 0, -2113), 0), 100000000, 0, -2112), 0, (("src/signatures.mli", 444, 17204, 17206), ("src/signatures.mli", 444, 17204, 17253), 0), 0, Tag1 ("Signatures", 204)), 0); (("dir_pack", 1916), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2111), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("arch", 1914)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2110)], (0)), 100000000, 0, -2109)], (0)), 100000000, 0, -2108), (Tag3 ((("arch", 1914)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2107)], (0)), 100000000, 0, -2106), 0), 100000000, 0, -2105), 0), 100000000, 0, -2104), 0, (("src/signatures.mli", 445, 17254, 17256), ("src/signatures.mli", 445, 17254, 17308), 0), 0, Tag1 ("Signatures", 205)), 0); (("file", 1917), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2103), (Tag3 ((("arch", 1914)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2102)], (0)), 100000000, 0, -2101), 0), 100000000, 0, -2100), 0, (("src/signatures.mli", 446, 17309, 17311), ("src/signatures.mli", 446, 17309, 17341), 0), 0, Tag1 ("Signatures", 206)), 0); Tag1 (("info", 1918), (0, 0, [[(("current_path", 1122), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2096), (("src/signatures.mli", 449, 17367, 17371), ("src/signatures.mli", 449, 17367, 17393), 0), 0, Tag1 ("Signatures", 208)); (("include_dirs", 1123), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2098)], (0)), 100000000, 0, -2097), (("src/signatures.mli", 450, 17394, 17398), ("src/signatures.mli", 450, 17394, 17425), 0), 0, Tag1 ("Signatures", 209)); (("for_pack", 1124), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2099), (("src/signatures.mli", 451, 17426, 17430), ("src/signatures.mli", 451, 17426, 17448), 0), 0, Tag1 ("Signatures", 210))]], 0, 0, 0, 0, 0, 0, (("src/signatures.mli", 448, 17343, 17345), ("src/signatures.mli", 452, 17449, 17452), 0), 0, 0, 0, Tag1 ("Signatures", 207)), 1, 0); (("annotate", 1919), ((Tag1 (0, (Tag3 ((("arch", 1914)), [((("a")), 100000000, 0, -2095)], (0)), 100000000, 0, -2094), (Tag3 ((("arch", 1914)), [(Tag3 ((("info", 1918)), 0, (0)), 100000000, 0, -2093)], (0)), 100000000, 0, -2092), 0), 100000000, 0, -2091), 0, (("src/signatures.mli", 454, 17454, 17456), ("src/signatures.mli", 454, 17454, 17491), 0), 0, Tag1 ("Signatures", 211)), 0); (("print", 1920), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -2090), (Tag1 (0, ((("a")), 100000000, 0, -2085), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2089), 0), 100000000, 0, -2088), 0), 100000000, 0, -2087), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -2086), (Tag1 (0, (Tag3 ((("arch", 1914)), [((("a")), 100000000, 0, -2085)], (0)), 100000000, 0, -2084), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2083), 0), 100000000, 0, -2082), 0), 100000000, 0, -2081), 0), 100000000, 0, -2080), 0, (("src/signatures.mli", 456, 17493, 17495), ("src/signatures.mli", 456, 17493, 17578), 0), 0, Tag1 ("Signatures", 212)), 0); (("print_include_dirs", 1921), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -2079), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2078)], (0)), 100000000, 0, -2077), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2076), 0), 100000000, 0, -2075), 0), 100000000, 0, -2074), 0, (("src/signatures.mli", 457, 17579, 17581), ("src/signatures.mli", 457, 17579, 17645), 0), 0, Tag1 ("Signatures", 213)), 0); (("print_info", 1922), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -2073), (Tag1 (0, (Tag3 ((("info", 1918)), 0, (0)), 100000000, 0, -2072), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2071), 0), 100000000, 0, -2070), 0), 100000000, 0, -2069), 0, (("src/signatures.mli", 458, 17646, 17648), ("src/signatures.mli", 458, 17646, 17697), 0), 0, Tag1 ("Signatures", 214)), 0); (("iter_info", 1923), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -2066), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2068), 0), 100000000, 0, -2067), (Tag1 (0, (Tag3 ((("arch", 1914)), [((("a")), 100000000, 0, -2066)], (0)), 100000000, 0, -2065), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2064), 0), 100000000, 0, -2063), 0), 100000000, 0, -2062), 0, (("src/signatures.mli", 460, 17699, 17701), ("src/signatures.mli", 460, 17699, 17748), 0), 0, Tag1 ("Signatures", 215)), 0); (("fold_info", 1924), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -2059), (Tag1 (0, ((("b")), 100000000, 0, -2057), ((("b")), 100000000, 0, -2057), 0), 100000000, 0, -2061), 0), 100000000, 0, -2060), (Tag1 (0, (Tag3 ((("arch", 1914)), [((("a")), 100000000, 0, -2059)], (0)), 100000000, 0, -2058), (Tag1 (0, ((("b")), 100000000, 0, -2057), ((("b")), 100000000, 0, -2057), 0), 100000000, 0, -2056), 0), 100000000, 0, -2055), 0), 100000000, 0, -2054), 0, (("src/signatures.mli", 461, 17749, 17751), ("src/signatures.mli", 461, 17749, 17806), 0), 0, Tag1 ("Signatures", 216)), 0); (("iter_include_dirs", 1925), ((Tag1 (0, (Tag3 ((("arch", 1914)), [(Tag3 ((("info", 1918)), 0, (0)), 100000000, 0, -2053)], (0)), 100000000, 0, -2052), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2051), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2050), 0), 100000000, 0, -2049), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2048), 0), 100000000, 0, -2047), 0), 100000000, 0, -2046), 0, (("src/signatures.mli", 463, 17808, 17810), ("src/signatures.mli", 463, 17808, 17871), 0), 0, Tag1 ("Signatures", 217)), 0); (("mk_tables", 1926), ((Tag1 (0, (Tag3 ((("arch", 1914)), [(Tag3 ((("info", 1918)), 0, (0)), 100000000, 0, -2045)], (0)), 100000000, 0, -2044), (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Hashtbl"), "t"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2038); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2040)], (0)), 100000000, 0, -2039)], (0)), 100000000, 0, -2037); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Hashtbl"), "t"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2042); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2043)], (0)), 100000000, 0, -2041)]), 100000000, 0, -2036), 0), 100000000, 0, -2035), 0, (("src/signatures.mli", 465, 17873, 17875), ("src/signatures.mli", 466, 17891, 17968), 0), 0, Tag1 ("Signatures", 218)), 0); (("print_table", 1927), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -2034), (Tag1 (0, ((("a")), 100000000, 0, -2029), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2033), 0), 100000000, 0, -2032), 0), 100000000, 0, -2031), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -2030), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Hashtbl"), "t"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2028); ((("a")), 100000000, 0, -2029)], (0)), 100000000, 0, -2027), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2026), 0), 100000000, 0, -2025), 0), 100000000, 0, -2024), 0), 100000000, 0, -2023), 0, (("src/signatures.mli", 467, 17969, 17971), ("src/signatures.mli", 468, 17989, 18079), 0), 0, Tag1 ("Signatures", 219)), 0)])), 0, (("src/signatures.mli", 438, 17029, 17029), ("src/signatures.mli", 469, 18080, 18083), 0), Tag1 ("Signatures", 220)), 0); Tag4 (("FINDLIB", 1518), ((Tag1 ([Tag1 (("command_spec", 1928), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/signatures.mli", 474, 18148, 18150), ("src/signatures.mli", 474, 18148, 18167), 0), 0, 0, 0, Tag1 ("Signatures", 221)), 1, 0); Tag1 (("error", 1929), (0, 0, Tag1 ([(("Cannot_run_ocamlfind", 1176), (0), 0, (("src/signatures.mli", 477, 18184, 18188), ("src/signatures.mli", 477, 18184, 18210), 0), 0, Tag1 ("Signatures", 223)); (("Dependency_not_found", 1177), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2176); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2177)]), 0, (("src/signatures.mli", 478, 18211, 18215), ("src/signatures.mli", 478, 18211, 18256), 0), 0, Tag1 ("Signatures", 224)); (("Package_not_found", 1178), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2178)]), 0, (("src/signatures.mli", 479, 18283, 18287), ("src/signatures.mli", 479, 18283, 18316), 0), 0, Tag1 ("Signatures", 225)); (("Cannot_parse_query", 1179), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2179); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2180)]), 0, (("src/signatures.mli", 480, 18317, 18321), ("src/signatures.mli", 480, 18317, 18360), 0), 0, Tag1 ("Signatures", 226))], 0), 1, 0, 0, 0, 0, 0, (("src/signatures.mli", 476, 18169, 18171), ("src/signatures.mli", 480, 18317, 18360), 0), 0, 0, 0, Tag1 ("Signatures", 222)), 1, 0); Tag2 (("Findlib_error", 1930), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((("error", 1929)), 0, (0)), 100000000, 0, -2175)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Signatures", 227)), 2, 0); (("string_of_error", 1931), ((Tag1 (0, (Tag3 ((("error", 1929)), 0, (0)), 100000000, 0, -2174), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2173), 0), 100000000, 0, -2172), 0, (("src/signatures.mli", 484, 18425, 18427), ("src/signatures.mli", 484, 18425, 18463), 0), 0, Tag1 ("Signatures", 228)), 0); (("report_error", 1932), ((Tag1 (0, (Tag3 ((("error", 1929)), 0, (0)), 100000000, 0, -2171), ((("a")), 100000000, 0, -2170), 0), 100000000, 0, -2169), 0, (("src/signatures.mli", 487, 18521, 18523), ("src/signatures.mli", 487, 18521, 18552), 0), 0, Tag1 ("Signatures", 229)), 0); Tag1 (("package", 1933), (0, 0, [[(("name", 1184), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2160), (("src/signatures.mli", 491, 18644, 18648), ("src/signatures.mli", 491, 18644, 18661), 0), 0, Tag1 ("Signatures", 231)); (("description", 1185), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2161), (("src/signatures.mli", 492, 18662, 18666), ("src/signatures.mli", 492, 18662, 18686), 0), 0, Tag1 ("Signatures", 232)); (("version", 1186), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2162), (("src/signatures.mli", 493, 18687, 18691), ("src/signatures.mli", 493, 18687, 18707), 0), 0, Tag1 ("Signatures", 233)); (("archives_byte", 1187), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2163), (("src/signatures.mli", 494, 18708, 18712), ("src/signatures.mli", 494, 18708, 18734), 0), 0, Tag1 ("Signatures", 234)); (("archives_native", 1188), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2164), (("src/signatures.mli", 496, 18815, 18819), ("src/signatures.mli", 496, 18815, 18843), 0), 0, Tag1 ("Signatures", 235)); (("link_options", 1189), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2165), (("src/signatures.mli", 498, 18925, 18929), ("src/signatures.mli", 498, 18925, 18950), 0), 0, Tag1 ("Signatures", 236)); (("location", 1190), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2166), (("src/signatures.mli", 499, 18951, 18955), ("src/signatures.mli", 499, 18951, 18972), 0), 0, Tag1 ("Signatures", 237)); (("dependencies", 1191), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("package", 1933)), 0, (0)), 100000000, 0, -2168)], (0)), 100000000, 0, -2167), (("src/signatures.mli", 500, 18973, 18977), ("src/signatures.mli", 500, 18973, 19004), 0), 0, Tag1 ("Signatures", 238))]], 1, 0, 0, 0, 0, 0, (("src/signatures.mli", 490, 18625, 18627), ("src/signatures.mli", 502, 19075, 19078), 0), 0, 0, 0, Tag1 ("Signatures", 230)), 1, 0); (("query", 1934), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2159), (Tag3 ((("package", 1933)), 0, (0)), 100000000, 0, -2158), 0), 100000000, 0, -2157), 0, (("src/signatures.mli", 505, 19112, 19114), ("src/signatures.mli", 505, 19112, 19142), 0), 0, Tag1 ("Signatures", 239)), 0); (("list", 1935), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2156), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2155)], (0)), 100000000, 0, -2154), 0), 100000000, 0, -2153), 0, (("src/signatures.mli", 509, 19229, 19231), ("src/signatures.mli", 509, 19229, 19260), 0), 0, Tag1 ("Signatures", 240)), 0); (("topological_closure", 1936), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("package", 1933)), 0, (0)), 100000000, 0, -2152)], (0)), 100000000, 0, -2151), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("package", 1933)), 0, (0)), 100000000, 0, -2150)], (0)), 100000000, 0, -2149), 0), 100000000, 0, -2148), 0, (("src/signatures.mli", 512, 19313, 19315), ("src/signatures.mli", 512, 19313, 19368), 0), 0, Tag1 ("Signatures", 241)), 0); (("include_flags", 1937), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("package", 1933)), 0, (0)), 100000000, 0, -2147)], (0)), 100000000, 0, -2146), (Tag3 ((("command_spec", 1928)), 0, (0)), 100000000, 0, -2145), 0), 100000000, 0, -2144), 0, (("src/signatures.mli", 519, 19659, 19661), ("src/signatures.mli", 519, 19659, 19708), 0), 0, Tag1 ("Signatures", 242)), 0); (("compile_flags_byte", 1938), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("package", 1933)), 0, (0)), 100000000, 0, -2143)], (0)), 100000000, 0, -2142), (Tag3 ((("command_spec", 1928)), 0, (0)), 100000000, 0, -2141), 0), 100000000, 0, -2140), 0, (("src/signatures.mli", 522, 19761, 19763), ("src/signatures.mli", 522, 19761, 19815), 0), 0, Tag1 ("Signatures", 243)), 0); (("compile_flags_native", 1939), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("package", 1933)), 0, (0)), 100000000, 0, -2139)], (0)), 100000000, 0, -2138), (Tag3 ((("command_spec", 1928)), 0, (0)), 100000000, 0, -2137), 0), 100000000, 0, -2136), 0, (("src/signatures.mli", 526, 19903, 19905), ("src/signatures.mli", 526, 19903, 19959), 0), 0, Tag1 ("Signatures", 244)), 0); (("link_flags_byte", 1940), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("package", 1933)), 0, (0)), 100000000, 0, -2135)], (0)), 100000000, 0, -2134), (Tag3 ((("command_spec", 1928)), 0, (0)), 100000000, 0, -2133), 0), 100000000, 0, -2132), 0, (("src/signatures.mli", 529, 20022, 20024), ("src/signatures.mli", 529, 20022, 20073), 0), 0, Tag1 ("Signatures", 245)), 0); (("link_flags_native", 1941), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("package", 1933)), 0, (0)), 100000000, 0, -2131)], (0)), 100000000, 0, -2130), (Tag3 ((("command_spec", 1928)), 0, (0)), 100000000, 0, -2129), 0), 100000000, 0, -2128), 0, (("src/signatures.mli", 533, 20207, 20209), ("src/signatures.mli", 533, 20207, 20260), 0), 0, Tag1 ("Signatures", 246)), 0)])), 0, (("src/signatures.mli", 471, 18085, 18085), ("src/signatures.mli", 535, 20319, 20322), 0), Tag1 ("Signatures", 247)), 0); Tag4 (("PLUGIN", 1519), ((Tag1 ([Tag3 (("Pathname", 1942), 0, (((("PATHNAME", 1510))), 0, (("src/signatures.mli", 540, 20435, 20437), ("src/signatures.mli", 540, 20435, 20464), 0), Tag1 ("Signatures", 248)), 0, 0); Tag3 (("Tags", 1943), 0, (((("TAGS", 1509))), 0, (("src/signatures.mli", 541, 20465, 20467), ("src/signatures.mli", 541, 20465, 20490), 0), Tag1 ("Signatures", 249)), 0, 0); Tag3 (("Command", 1944), 0, (Tag1 ([Tag1 (("tags", 2010), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Tags", 1943)), "t"), 0, (0)), 100000000, 0, -2632)), 0, 0, 0, 0, (("src/signatures.mli", 542, 20491, 20525), ("src/signatures.mli", 542, 20491, 20543), 0), 0, 0, 0, Tag1 ("Signatures", 250)), 1, 0); Tag1 (("pathname", 2011), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Pathname", 1942)), "t"), 0, (0)), 100000000, 0, -2631)), 0, 0, 0, 0, (("src/signatures.mli", 542, 20491, 20548), ("src/signatures.mli", 542, 20491, 20574), 0), 0, 0, 0, Tag1 ("Signatures", 251)), 1, 0); Tag1 (("t", 2012), (0, 0, Tag1 ([(("Seq", 969), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 2012)), 0, (0)), 100000000, 0, -2626)], (0)), 100000000, 0, -2625)]), 0, (("src/signatures.mli", 176, 6206, 6210), ("src/signatures.mli", 176, 6206, 6225), 0), 0, Tag1 ("Signatures", 85)); (("Cmd", 970), ([(Tag3 ((("spec", 2013)), 0, (0)), 100000000, 0, -2627)]), 0, (("src/signatures.mli", 177, 6280, 6284), ("src/signatures.mli", 177, 6280, 6297), 0), 0, Tag1 ("Signatures", 86)); (("Echo", 971), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2629)], (0)), 100000000, 0, -2628); (Tag3 ((("pathname", 2011)), 0, (0)), 100000000, 0, -2630)]), 0, (("src/signatures.mli", 178, 6360, 6364), ("src/signatures.mli", 178, 6360, 6396), 0), 0, Tag1 ("Signatures", 87)); (("Nop", 972), (0), 0, (("src/signatures.mli", 180, 6481, 6485), ("src/signatures.mli", 180, 6481, 6490), 0), 0, Tag1 ("Signatures", 88))], 0), 1, 0, 0, 0, 0, 0, (("src/signatures.mli", 175, 6195, 6197), ("src/signatures.mli", 180, 6481, 6490), 0), 0, 0, 0, Tag1 ("Signatures", 83)), 1, 0); Tag1 (("spec", 2013), (0, 0, Tag1 ([(("N", 973), (0), 0, (("src/signatures.mli", 184, 6625, 6629), ("src/signatures.mli", 184, 6625, 6632), 0), 0, Tag1 ("Signatures", 89)); (("S", 974), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("spec", 2013)), 0, (0)), 100000000, 0, -2617)], (0)), 100000000, 0, -2616)]), 0, (("src/signatures.mli", 185, 6667, 6671), ("src/signatures.mli", 185, 6667, 6687), 0), 0, Tag1 ("Signatures", 90)); (("A", 975), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2618)]), 0, (("src/signatures.mli", 186, 6747, 6751), ("src/signatures.mli", 186, 6747, 6764), 0), 0, Tag1 ("Signatures", 91)); (("P", 976), ([(Tag3 ((("pathname", 2011)), 0, (0)), 100000000, 0, -2619)]), 0, (("src/signatures.mli", 187, 6784, 6788), ("src/signatures.mli", 187, 6784, 6803), 0), 0, Tag1 ("Signatures", 92)); (("Px", 977), ([(Tag3 ((("pathname", 2011)), 0, (0)), 100000000, 0, -2620)]), 0, (("src/signatures.mli", 188, 6824, 6828), ("src/signatures.mli", 188, 6824, 6844), 0), 0, Tag1 ("Signatures", 93)); (("Sh", 978), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2621)]), 0, (("src/signatures.mli", 190, 6943, 6947), ("src/signatures.mli", 190, 6943, 6961), 0), 0, Tag1 ("Signatures", 94)); (("T", 979), ([(Tag3 ((("tags", 2010)), 0, (0)), 100000000, 0, -2622)]), 0, (("src/signatures.mli", 191, 7022, 7026), ("src/signatures.mli", 191, 7022, 7037), 0), 0, Tag1 ("Signatures", 95)); (("V", 980), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2623)]), 0, (("src/signatures.mli", 196, 7319, 7323), ("src/signatures.mli", 196, 7319, 7336), 0), 0, Tag1 ("Signatures", 96)); (("Quote", 981), ([(Tag3 ((("spec", 2013)), 0, (0)), 100000000, 0, -2624)]), 0, (("src/signatures.mli", 198, 7451, 7455), ("src/signatures.mli", 198, 7451, 7470), 0), 0, Tag1 ("Signatures", 97))], 0), 1, 0, 0, 0, 0, 0, (("src/signatures.mli", 183, 6612, 6614), ("src/signatures.mli", 198, 7451, 7470), 0), 0, 0, 0, Tag1 ("Signatures", 84)), 2, 0); (("atomize", 2014), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2615)], (0)), 100000000, 0, -2614), (Tag3 ((("spec", 2013)), 0, (0)), 100000000, 0, -2613), 0), 100000000, 0, -2612), 0, (("src/signatures.mli", 217, 7996, 7998), ("src/signatures.mli", 217, 7996, 8031), 0), 0, Tag1 ("Signatures", 98)), 0); (("atomize_paths", 2015), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2611)], (0)), 100000000, 0, -2610), (Tag3 ((("spec", 2013)), 0, (0)), 100000000, 0, -2609), 0), 100000000, 0, -2608), 0, (("src/signatures.mli", 220, 8116, 8118), ("src/signatures.mli", 220, 8116, 8157), 0), 0, Tag1 ("Signatures", 99)), 0); (("execute", 2016), ((Tag1 (Tag1 ("quiet"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2607)], (0)), 100000000, 0, -2606), (Tag1 (Tag1 ("pretend"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2605)], (0)), 100000000, 0, -2604), (Tag1 (0, (Tag3 ((("t", 2012)), 0, (0)), 100000000, 0, -2603), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2602), 0), 100000000, 0, -2601), 0), 100000000, 0, -2600), 0), 100000000, 0, -2599), 0, (("src/signatures.mli", 223, 8185, 8187), ("src/signatures.mli", 223, 8185, 8242), 0), 0, Tag1 ("Signatures", 100)), 0); (("execute_many", 2017), ((Tag1 (Tag1 ("quiet"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2598)], (0)), 100000000, 0, -2597), (Tag1 (Tag1 ("pretend"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2596)], (0)), 100000000, 0, -2595), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 2012)), 0, (0)), 100000000, 0, -2594)], (0)), 100000000, 0, -2593), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2591)], (0)), 100000000, 0, -2590); (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -2592)]), 100000000, 0, -2589)], (0)), 100000000, 0, -2588), 0), 100000000, 0, -2587), 0), 100000000, 0, -2586), 0), 100000000, 0, -2585), 0, (("src/signatures.mli", 227, 8358, 8360), ("src/signatures.mli", 227, 8358, 8445), 0), 0, Tag1 ("Signatures", 101)), 0); (("setup_virtual_command_solver", 2018), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2584), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2583), (Tag3 ((("spec", 2013)), 0, (0)), 100000000, 0, -2582), 0), 100000000, 0, -2581), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2580), 0), 100000000, 0, -2579), 0), 100000000, 0, -2578), 0, (("src/signatures.mli", 232, 8625, 8627), ("src/signatures.mli", 232, 8625, 8694), 0), 0, Tag1 ("Signatures", 102)), 0); (("search_in_path", 2019), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2577), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2576), 0), 100000000, 0, -2575), 0, (("src/signatures.mli", 236, 8790, 8792), ("src/signatures.mli", 236, 8790, 8829), 0), 0, Tag1 ("Signatures", 103)), 0); (("reduce", 2020), ((Tag1 (0, (Tag3 ((("spec", 2013)), 0, (0)), 100000000, 0, -2574), (Tag3 ((("spec", 2013)), 0, (0)), 100000000, 0, -2573), 0), 100000000, 0, -2572), 0, (("src/signatures.mli", 240, 8943, 8945), ("src/signatures.mli", 240, 8943, 8970), 0), 0, Tag1 ("Signatures", 104)), 0); (("print", 2021), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -2571), (Tag1 (0, (Tag3 ((("t", 2012)), 0, (0)), 100000000, 0, -2570), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2569), 0), 100000000, 0, -2568), 0), 100000000, 0, -2567), 0, (("src/signatures.mli", 243, 9050, 9052), ("src/signatures.mli", 243, 9050, 9093), 0), 0, Tag1 ("Signatures", 105)), 0); (("to_string", 2022), ((Tag1 (0, (Tag3 ((("t", 2012)), 0, (0)), 100000000, 0, -2566), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2565), 0), 100000000, 0, -2564), 0, (("src/signatures.mli", 246, 9158, 9160), ("src/signatures.mli", 246, 9158, 9187), 0), 0, Tag1 ("Signatures", 106)), 0); (("string_of_command_spec", 2023), ((Tag1 (0, (Tag3 ((("spec", 2013)), 0, (0)), 100000000, 0, -2563), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2562), 0), 100000000, 0, -2561), 0, (("src/signatures.mli", 250, 9287, 9289), ("src/signatures.mli", 250, 9287, 9332), 0), 0, Tag1 ("Signatures", 107)), 0)]), 0, (("src/signatures.mli", 542, 20491, 20493), ("src/signatures.mli", 542, 20491, 20574), 0), Tag1 ("Signatures", 252)), 0, 0); Tag3 (("Outcome", 1945), 0, (((("OUTCOME", 1514))), 0, (("src/signatures.mli", 543, 20575, 20577), ("src/signatures.mli", 543, 20575, 20603), 0), Tag1 ("Signatures", 253)), 0, 0); Tag3 (("String", 1946), 0, (((("STRING", 1508))), 0, (("src/signatures.mli", 544, 20604, 20606), ("src/signatures.mli", 544, 20604, 20631), 0), Tag1 ("Signatures", 254)), 0, 0); Tag3 (("List", 1947), 0, (((("LIST", 1507))), 0, (("src/signatures.mli", 545, 20632, 20634), ("src/signatures.mli", 545, 20632, 20657), 0), Tag1 ("Signatures", 255)), 0, 0); Tag3 (("StringSet", 1948), 0, (Tag1 ([Tag1 (("elt", 2024), (0, 0, 0, 1, ((Tag3 (Tag1 ((("String", 1946)), "t"), 0, (0)), 100000000, 0, -2859)), 0, 0, 0, 0, (("src/signatures.mli", 546, 20658, 20690), ("src/signatures.mli", 546, 20658, 20709), 0), 0, 0, 0, Tag1 ("Signatures", 256)), 1, 0); Tag1 (("t", 2025), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("set.mli", 74, 2901, 2905), ("set.mli", 74, 2901, 2911), 0), 0, 0, 0, Tag1 ("Stdlib__Set", 4)), 1, 0); (("empty", 2026), ((Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2858), 0, (("set.mli", 77, 2942, 2946), ("set.mli", 77, 2942, 2958), 0), 0, Tag1 ("Stdlib__Set", 5)), 0); (("add", 2027), ((Tag1 (0, (Tag3 ((("elt", 2024)), 0, (0)), 100000000, 0, -2857), (Tag1 (0, (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2856), (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2855), 0), 100000000, 0, -2854), 0), 100000000, 0, -2853), 0, (("set.mli", 80, 2986, 2990), ("set.mli", 80, 2986, 3012), 0), 0, Tag1 ("Stdlib__Set", 6)), 0); (("singleton", 2028), ((Tag1 (0, (Tag3 ((("elt", 2024)), 0, (0)), 100000000, 0, -2852), (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2851), 0), 100000000, 0, -2850), 0, (("set.mli", 86, 3278, 3282), ("set.mli", 86, 3278, 3305), 0), 0, Tag1 ("Stdlib__Set", 7)), 0); (("remove", 2029), ((Tag1 (0, (Tag3 ((("elt", 2024)), 0, (0)), 100000000, 0, -2849), (Tag1 (0, (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2848), (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2847), 0), 100000000, 0, -2846), 0), 100000000, 0, -2845), 0, (("set.mli", 89, 3381, 3385), ("set.mli", 89, 3381, 3410), 0), 0, Tag1 ("Stdlib__Set", 8)), 0); (("union", 2030), ((Tag1 (0, (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2844), (Tag1 (0, (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2843), (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2842), 0), 100000000, 0, -2841), 0), 100000000, 0, -2840), 0, (("set.mli", 95, 3677, 3681), ("set.mli", 95, 3677, 3703), 0), 0, Tag1 ("Stdlib__Set", 9)), 0); (("inter", 2031), ((Tag1 (0, (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2839), (Tag1 (0, (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2838), (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2837), 0), 100000000, 0, -2836), 0), 100000000, 0, -2835), 0, (("set.mli", 98, 3727, 3731), ("set.mli", 98, 3727, 3753), 0), 0, Tag1 ("Stdlib__Set", 10)), 0); (("disjoint", 2032), ((Tag1 (0, (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2834), (Tag1 (0, (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2833), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2832), 0), 100000000, 0, -2831), 0), 100000000, 0, -2830), 0, (("set.mli", 101, 3784, 3788), ("set.mli", 101, 3784, 3816), 0), 0, Tag1 ("Stdlib__Set", 11)), 0); (("diff", 2033), ((Tag1 (0, (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2829), (Tag1 (0, (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2828), (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2827), 0), 100000000, 0, -2826), 0), 100000000, 0, -2825), 0, (("set.mli", 105, 3880, 3884), ("set.mli", 105, 3880, 3905), 0), 0, Tag1 ("Stdlib__Set", 12)), 0); (("cardinal", 2034), ((Tag1 (0, (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2824), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -2823), 0), 100000000, 0, -2822), 0, (("set.mli", 109, 4007, 4011), ("set.mli", 109, 4007, 4033), 0), 0, Tag1 ("Stdlib__Set", 13)), 0); (("elements", 2035), ((Tag1 (0, (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2821), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 2024)), 0, (0)), 100000000, 0, -2820)], (0)), 100000000, 0, -2819), 0), 100000000, 0, -2818), 0, (("set.mli", 114, 4120, 4124), ("set.mli", 114, 4120, 4151), 0), 0, Tag1 ("Stdlib__Set", 14)), 0); (("min_elt", 2036), ((Tag1 (0, (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2817), (Tag3 ((("elt", 2024)), 0, (0)), 100000000, 0, -2816), 0), 100000000, 0, -2815), 0, (("set.mli", 120, 4380, 4384), ("set.mli", 120, 4380, 4405), 0), 0, Tag1 ("Stdlib__Set", 15)), 0); (("min_elt_opt", 2037), ((Tag1 (0, (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2814), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2024)), 0, (0)), 100000000, 0, -2813)], (0)), 100000000, 0, -2812), 0), 100000000, 0, -2811), 0, (("set.mli", 125, 4567, 4571), ("set.mli", 125, 4567, 4603), 0), 0, Tag1 ("Stdlib__Set", 16)), 0); (("max_elt", 2038), ((Tag1 (0, (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2810), (Tag3 ((("elt", 2024)), 0, (0)), 100000000, 0, -2809), 0), 100000000, 0, -2808), 0, (("set.mli", 131, 4774, 4778), ("set.mli", 131, 4774, 4799), 0), 0, Tag1 ("Stdlib__Set", 17)), 0); (("max_elt_opt", 2039), ((Tag1 (0, (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2807), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2024)), 0, (0)), 100000000, 0, -2806)], (0)), 100000000, 0, -2805), 0), 100000000, 0, -2804), 0, (("set.mli", 135, 4890, 4894), ("set.mli", 135, 4890, 4926), 0), 0, Tag1 ("Stdlib__Set", 18)), 0); (("choose", 2040), ((Tag1 (0, (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2803), (Tag3 ((("elt", 2024)), 0, (0)), 100000000, 0, -2802), 0), 100000000, 0, -2801), 0, (("set.mli", 140, 5041, 5045), ("set.mli", 140, 5041, 5065), 0), 0, Tag1 ("Stdlib__Set", 19)), 0); (("choose_opt", 2041), ((Tag1 (0, (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2800), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2024)), 0, (0)), 100000000, 0, -2799)], (0)), 100000000, 0, -2798), 0), 100000000, 0, -2797), 0, (("set.mli", 145, 5263, 5267), ("set.mli", 145, 5263, 5298), 0), 0, Tag1 ("Stdlib__Set", 20)), 0); (("find", 2042), ((Tag1 (0, (Tag3 ((("elt", 2024)), 0, (0)), 100000000, 0, -2796), (Tag1 (0, (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2795), (Tag3 ((("elt", 2024)), 0, (0)), 100000000, 0, -2794), 0), 100000000, 0, -2793), 0), 100000000, 0, -2792), 0, (("set.mli", 153, 5541, 5549), ("set.mli", 153, 5541, 5574), 0), 0, Tag1 ("Stdlib__Set", 21)), 0); (("find_opt", 2043), ((Tag1 (0, (Tag3 ((("elt", 2024)), 0, (0)), 100000000, 0, -2791), (Tag1 (0, (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2790), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2024)), 0, (0)), 100000000, 0, -2789)], (0)), 100000000, 0, -2788), 0), 100000000, 0, -2787), 0), 100000000, 0, -2786), 0, (("set.mli", 159, 5752, 5756), ("set.mli", 159, 5752, 5792), 0), 0, Tag1 ("Stdlib__Set", 22)), 0); (("find_first", 2044), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2024)), 0, (0)), 100000000, 0, -2785), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2784), 0), 100000000, 0, -2783), (Tag1 (0, (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2782), (Tag3 ((("elt", 2024)), 0, (0)), 100000000, 0, -2781), 0), 100000000, 0, -2780), 0), 100000000, 0, -2779), 0, (("set.mli", 165, 5963, 5967), ("set.mli", 165, 5963, 6008), 0), 0, Tag1 ("Stdlib__Set", 23)), 0); (("find_first_opt", 2045), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2024)), 0, (0)), 100000000, 0, -2778), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2777), 0), 100000000, 0, -2776), (Tag1 (0, (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2775), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2024)), 0, (0)), 100000000, 0, -2774)], (0)), 100000000, 0, -2773), 0), 100000000, 0, -2772), 0), 100000000, 0, -2771), 0, (("set.mli", 177, 6482, 6486), ("set.mli", 177, 6482, 6538), 0), 0, Tag1 ("Stdlib__Set", 24)), 0); (("find_last", 2046), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2024)), 0, (0)), 100000000, 0, -2770), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2769), 0), 100000000, 0, -2768), (Tag1 (0, (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2767), (Tag3 ((("elt", 2024)), 0, (0)), 100000000, 0, -2766), 0), 100000000, 0, -2765), 0), 100000000, 0, -2764), 0, (("set.mli", 184, 6779, 6783), ("set.mli", 184, 6779, 6823), 0), 0, Tag1 ("Stdlib__Set", 25)), 0); (("find_last_opt", 2047), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2024)), 0, (0)), 100000000, 0, -2763), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2762), 0), 100000000, 0, -2761), (Tag1 (0, (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2760), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2024)), 0, (0)), 100000000, 0, -2759)], (0)), 100000000, 0, -2758), 0), 100000000, 0, -2757), 0), 100000000, 0, -2756), 0, (("set.mli", 190, 7044, 7048), ("set.mli", 190, 7044, 7099), 0), 0, Tag1 ("Stdlib__Set", 26)), 0); (("iter", 2048), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2024)), 0, (0)), 100000000, 0, -2755), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2754), 0), 100000000, 0, -2753), (Tag1 (0, (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2752), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2751), 0), 100000000, 0, -2750), 0), 100000000, 0, -2749), 0, (("set.mli", 198, 7371, 7375), ("set.mli", 198, 7371, 7411), 0), 0, Tag1 ("Stdlib__Set", 27)), 0); (("fold", 2049), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2024)), 0, (0)), 100000000, 0, -2748), (Tag1 (0, ((("acc")), 100000000, 0, -2744), ((("acc")), 100000000, 0, -2744), 0), 100000000, 0, -2747), 0), 100000000, 0, -2746), (Tag1 (0, (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2745), (Tag1 (0, ((("acc")), 100000000, 0, -2744), ((("acc")), 100000000, 0, -2744), 0), 100000000, 0, -2743), 0), 100000000, 0, -2742), 0), 100000000, 0, -2741), 0, (("set.mli", 203, 7616, 7620), ("set.mli", 203, 7616, 7672), 0), 0, Tag1 ("Stdlib__Set", 28)), 0); (("map", 2050), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2024)), 0, (0)), 100000000, 0, -2740), (Tag3 ((("elt", 2024)), 0, (0)), 100000000, 0, -2739), 0), 100000000, 0, -2738), (Tag1 (0, (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2737), (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2736), 0), 100000000, 0, -2735), 0), 100000000, 0, -2734), 0, (("set.mli", 209, 7860, 7864), ("set.mli", 209, 7860, 7895), 0), 0, Tag1 ("Stdlib__Set", 29)), 0); (("filter", 2051), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2024)), 0, (0)), 100000000, 0, -2733), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2732), 0), 100000000, 0, -2731), (Tag1 (0, (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2730), (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2729), 0), 100000000, 0, -2728), 0), 100000000, 0, -2727), 0, (("set.mli", 221, 8372, 8376), ("set.mli", 221, 8372, 8411), 0), 0, Tag1 ("Stdlib__Set", 30)), 0); (("filter_map", 2052), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2024)), 0, (0)), 100000000, 0, -2726), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2024)), 0, (0)), 100000000, 0, -2725)], (0)), 100000000, 0, -2724), 0), 100000000, 0, -2723), (Tag1 (0, (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2722), (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2721), 0), 100000000, 0, -2720), 0), 100000000, 0, -2719), 0, (("set.mli", 228, 8710, 8714), ("set.mli", 228, 8710, 8759), 0), 0, Tag1 ("Stdlib__Set", 31)), 0); (("partition", 2053), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2024)), 0, (0)), 100000000, 0, -2718), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2717), 0), 100000000, 0, -2716), (Tag1 (0, (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2715), (Tag2 ([(Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2713); (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2714)]), 100000000, 0, -2712), 0), 100000000, 0, -2711), 0), 100000000, 0, -2710), 0, (("set.mli", 243, 9275, 9279), ("set.mli", 243, 9275, 9321), 0), 0, Tag1 ("Stdlib__Set", 32)), 0); (("split", 2054), ((Tag1 (0, (Tag3 ((("elt", 2024)), 0, (0)), 100000000, 0, -2709), (Tag1 (0, (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2708), (Tag2 ([(Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2705); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2706); (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2707)]), 100000000, 0, -2704), 0), 100000000, 0, -2703), 0), 100000000, 0, -2702), 0, (("set.mli", 249, 9562, 9566), ("set.mli", 249, 9562, 9601), 0), 0, Tag1 ("Stdlib__Set", 33)), 0); (("is_empty", 2055), ((Tag1 (0, (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2701), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2700), 0), 100000000, 0, -2699), 0, (("set.mli", 260, 10020, 10024), ("set.mli", 260, 10020, 10047), 0), 0, Tag1 ("Stdlib__Set", 34)), 0); (("mem", 2056), ((Tag1 (0, (Tag3 ((("elt", 2024)), 0, (0)), 100000000, 0, -2698), (Tag1 (0, (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2697), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2696), 0), 100000000, 0, -2695), 0), 100000000, 0, -2694), 0, (("set.mli", 263, 10096, 10100), ("set.mli", 263, 10096, 10125), 0), 0, Tag1 ("Stdlib__Set", 35)), 0); (("equal", 2057), ((Tag1 (0, (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2693), (Tag1 (0, (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2692), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2691), 0), 100000000, 0, -2690), 0), 100000000, 0, -2689), 0, (("set.mli", 266, 10190, 10194), ("set.mli", 266, 10190, 10219), 0), 0, Tag1 ("Stdlib__Set", 36)), 0); (("compare", 2058), ((Tag1 (0, (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2688), (Tag1 (0, (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2687), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -2686), 0), 100000000, 0, -2685), 0), 100000000, 0, -2684), 0, (("set.mli", 270, 10335, 10339), ("set.mli", 270, 10335, 10365), 0), 0, Tag1 ("Stdlib__Set", 37)), 0); (("subset", 2059), ((Tag1 (0, (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2683), (Tag1 (0, (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2682), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2681), 0), 100000000, 0, -2680), 0), 100000000, 0, -2679), 0, (("set.mli", 274, 10476, 10480), ("set.mli", 274, 10476, 10506), 0), 0, Tag1 ("Stdlib__Set", 38)), 0); (("for_all", 2060), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2024)), 0, (0)), 100000000, 0, -2678), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2677), 0), 100000000, 0, -2676), (Tag1 (0, (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2675), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2674), 0), 100000000, 0, -2673), 0), 100000000, 0, -2672), 0, (("set.mli", 278, 10598, 10602), ("set.mli", 278, 10598, 10641), 0), 0, Tag1 ("Stdlib__Set", 39)), 0); (("exists", 2061), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2024)), 0, (0)), 100000000, 0, -2671), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2670), 0), 100000000, 0, -2669), (Tag1 (0, (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2668), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2667), 0), 100000000, 0, -2666), 0), 100000000, 0, -2665), 0, (("set.mli", 282, 10737, 10741), ("set.mli", 282, 10737, 10779), 0), 0, Tag1 ("Stdlib__Set", 40)), 0); (("to_list", 2062), ((Tag1 (0, (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2664), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 2024)), 0, (0)), 100000000, 0, -2663)], (0)), 100000000, 0, -2662), 0), 100000000, 0, -2661), 0, (("set.mli", 288, 10922, 10926), ("set.mli", 288, 10922, 10953), 0), 0, Tag1 ("Stdlib__Set", 41)), 0); (("of_list", 2063), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 2024)), 0, (0)), 100000000, 0, -2660)], (0)), 100000000, 0, -2659), (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2658), 0), 100000000, 0, -2657), 0, (("set.mli", 292, 11017, 11021), ("set.mli", 292, 11017, 11047), 0), 0, Tag1 ("Stdlib__Set", 42)), 0); (("to_seq_from", 2064), ((Tag1 (0, (Tag3 ((("elt", 2024)), 0, (0)), 100000000, 0, -2656), (Tag1 (0, (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2655), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2024)), 0, (0)), 100000000, 0, -2654)], (0)), 100000000, 0, -2653), 0), 100000000, 0, -2652), 0), 100000000, 0, -2651), 0, (("set.mli", 298, 11268, 11272), ("set.mli", 298, 11268, 11311), 0), 0, Tag1 ("Stdlib__Set", 43)), 0); (("to_seq", 2065), ((Tag1 (0, (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2650), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2024)), 0, (0)), 100000000, 0, -2649)], (0)), 100000000, 0, -2648), 0), 100000000, 0, -2647), 0, (("set.mli", 303, 11453, 11457), ("set.mli", 303, 11453, 11484), 0), 0, Tag1 ("Stdlib__Set", 44)), 0); (("to_rev_seq", 2066), ((Tag1 (0, (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2646), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2024)), 0, (0)), 100000000, 0, -2645)], (0)), 100000000, 0, -2644), 0), 100000000, 0, -2643), 0, (("set.mli", 307, 11562, 11566), ("set.mli", 307, 11562, 11597), 0), 0, Tag1 ("Stdlib__Set", 45)), 0); (("add_seq", 2067), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2024)), 0, (0)), 100000000, 0, -2642)], (0)), 100000000, 0, -2641), (Tag1 (0, (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2640), (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2639), 0), 100000000, 0, -2638), 0), 100000000, 0, -2637), 0, (("set.mli", 311, 11676, 11680), ("set.mli", 311, 11676, 11713), 0), 0, Tag1 ("Stdlib__Set", 46)), 0); (("of_seq", 2068), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2024)), 0, (0)), 100000000, 0, -2636)], (0)), 100000000, 0, -2635), (Tag3 ((("t", 2025)), 0, (0)), 100000000, 0, -2634), 0), 100000000, 0, -2633), 0, (("set.mli", 315, 11791, 11795), ("set.mli", 315, 11791, 11822), 0), 0, Tag1 ("Stdlib__Set", 47)), 0)]), 0, (("src/signatures.mli", 546, 20658, 20660), ("src/signatures.mli", 546, 20658, 20709), 0), Tag1 ("Signatures", 257)), 0, 0); Tag3 (("Options", 1949), 0, (Tag1 ([Tag1 (("command_spec", 2069), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Command", 1944)), "spec"), 0, (0)), 100000000, 0, -2988)), 0, 0, 0, 0, (("src/signatures.mli", 547, 20710, 20744), ("src/signatures.mli", 547, 20710, 20776), 0), 0, 0, 0, Tag1 ("Signatures", 258)), 1, 0); (("build_dir", 2070), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2987)], (0)), 100000000, 0, -2986), 0, (("src/signatures.mli", 380, 15246, 15248), ("src/signatures.mli", 380, 15246, 15274), 0), 0, Tag1 ("Signatures", 146)), 0); (("include_dirs", 2071), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2985)], (0)), 100000000, 0, -2984)], (0)), 100000000, 0, -2983), 0, (("src/signatures.mli", 381, 15275, 15277), ("src/signatures.mli", 381, 15275, 15311), 0), 0, Tag1 ("Signatures", 147)), 0); (("exclude_dirs", 2072), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2982)], (0)), 100000000, 0, -2981)], (0)), 100000000, 0, -2980), 0, (("src/signatures.mli", 382, 15312, 15314), ("src/signatures.mli", 382, 15312, 15348), 0), 0, Tag1 ("Signatures", 148)), 0); (("nothing_should_be_rebuilt", 2073), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2979)], (0)), 100000000, 0, -2978), 0, (("src/signatures.mli", 383, 15349, 15351), ("src/signatures.mli", 383, 15349, 15391), 0), 0, Tag1 ("Signatures", 149)), 0); (("ocamlc", 2074), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 2069)), 0, (0)), 100000000, 0, -2977)], (0)), 100000000, 0, -2976), 0, (("src/signatures.mli", 384, 15392, 15394), ("src/signatures.mli", 384, 15392, 15423), 0), 0, Tag1 ("Signatures", 150)), 0); (("plugin_ocamlc", 2075), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 2069)), 0, (0)), 100000000, 0, -2975)], (0)), 100000000, 0, -2974), 0, (("src/signatures.mli", 385, 15424, 15426), ("src/signatures.mli", 385, 15424, 15462), 0), 0, Tag1 ("Signatures", 151)), 0); (("ocamlopt", 2076), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 2069)), 0, (0)), 100000000, 0, -2973)], (0)), 100000000, 0, -2972), 0, (("src/signatures.mli", 386, 15463, 15465), ("src/signatures.mli", 386, 15463, 15496), 0), 0, Tag1 ("Signatures", 152)), 0); (("plugin_ocamlopt", 2077), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 2069)), 0, (0)), 100000000, 0, -2971)], (0)), 100000000, 0, -2970), 0, (("src/signatures.mli", 387, 15497, 15499), ("src/signatures.mli", 387, 15497, 15537), 0), 0, Tag1 ("Signatures", 153)), 0); (("ocamldep", 2078), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 2069)), 0, (0)), 100000000, 0, -2969)], (0)), 100000000, 0, -2968), 0, (("src/signatures.mli", 388, 15538, 15540), ("src/signatures.mli", 388, 15538, 15571), 0), 0, Tag1 ("Signatures", 154)), 0); (("ocamldoc", 2079), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 2069)), 0, (0)), 100000000, 0, -2967)], (0)), 100000000, 0, -2966), 0, (("src/signatures.mli", 389, 15572, 15574), ("src/signatures.mli", 389, 15572, 15605), 0), 0, Tag1 ("Signatures", 155)), 0); (("ocamlyacc", 2080), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 2069)), 0, (0)), 100000000, 0, -2965)], (0)), 100000000, 0, -2964), 0, (("src/signatures.mli", 390, 15606, 15608), ("src/signatures.mli", 390, 15606, 15640), 0), 0, Tag1 ("Signatures", 156)), 0); (("ocamllex", 2081), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 2069)), 0, (0)), 100000000, 0, -2963)], (0)), 100000000, 0, -2962), 0, (("src/signatures.mli", 391, 15641, 15643), ("src/signatures.mli", 391, 15641, 15674), 0), 0, Tag1 ("Signatures", 157)), 0); (("ocamlrun", 2082), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 2069)), 0, (0)), 100000000, 0, -2961)], (0)), 100000000, 0, -2960), 0, (("src/signatures.mli", 392, 15675, 15677), ("src/signatures.mli", 392, 15675, 15708), 0), 0, Tag1 ("Signatures", 158)), 0); (("ocamlmklib", 2083), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 2069)), 0, (0)), 100000000, 0, -2959)], (0)), 100000000, 0, -2958), 0, (("src/signatures.mli", 393, 15709, 15711), ("src/signatures.mli", 393, 15709, 15744), 0), 0, Tag1 ("Signatures", 159)), 0); (("ocamlmktop", 2084), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 2069)), 0, (0)), 100000000, 0, -2957)], (0)), 100000000, 0, -2956), 0, (("src/signatures.mli", 394, 15745, 15747), ("src/signatures.mli", 394, 15745, 15780), 0), 0, Tag1 ("Signatures", 160)), 0); (("hygiene", 2085), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2955)], (0)), 100000000, 0, -2954), 0, (("src/signatures.mli", 395, 15781, 15783), ("src/signatures.mli", 395, 15781, 15805), 0), 0, Tag1 ("Signatures", 161)), 0); (("sanitize", 2086), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2953)], (0)), 100000000, 0, -2952), 0, (("src/signatures.mli", 396, 15806, 15808), ("src/signatures.mli", 396, 15806, 15831), 0), 0, Tag1 ("Signatures", 162)), 0); (("sanitization_script", 2087), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2951)], (0)), 100000000, 0, -2950), 0, (("src/signatures.mli", 397, 15832, 15834), ("src/signatures.mli", 397, 15832, 15870), 0), 0, Tag1 ("Signatures", 163)), 0); (("ignore_auto", 2088), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2949)], (0)), 100000000, 0, -2948), 0, (("src/signatures.mli", 398, 15871, 15873), ("src/signatures.mli", 398, 15871, 15899), 0), 0, Tag1 ("Signatures", 164)), 0); (("plugin", 2089), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2947)], (0)), 100000000, 0, -2946), 0, (("src/signatures.mli", 399, 15900, 15902), ("src/signatures.mli", 399, 15900, 15923), 0), 0, Tag1 ("Signatures", 165)), 0); (("just_plugin", 2090), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2945)], (0)), 100000000, 0, -2944), 0, (("src/signatures.mli", 400, 15924, 15926), ("src/signatures.mli", 400, 15924, 15952), 0), 0, Tag1 ("Signatures", 166)), 0); (("native_plugin", 2091), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2943)], (0)), 100000000, 0, -2942), 0, (("src/signatures.mli", 401, 15953, 15955), ("src/signatures.mli", 401, 15953, 15983), 0), 0, Tag1 ("Signatures", 167)), 0); (("make_links", 2092), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2941)], (0)), 100000000, 0, -2940), 0, (("src/signatures.mli", 402, 15984, 15986), ("src/signatures.mli", 402, 15984, 16011), 0), 0, Tag1 ("Signatures", 168)), 0); (("nostdlib", 2093), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2939)], (0)), 100000000, 0, -2938), 0, (("src/signatures.mli", 403, 16012, 16014), ("src/signatures.mli", 403, 16012, 16037), 0), 0, Tag1 ("Signatures", 169)), 0); (("program_to_execute", 2094), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2937)], (0)), 100000000, 0, -2936), 0, (("src/signatures.mli", 404, 16038, 16040), ("src/signatures.mli", 404, 16038, 16073), 0), 0, Tag1 ("Signatures", 170)), 0); (("must_clean", 2095), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2935)], (0)), 100000000, 0, -2934), 0, (("src/signatures.mli", 405, 16074, 16076), ("src/signatures.mli", 405, 16074, 16101), 0), 0, Tag1 ("Signatures", 171)), 0); (("catch_errors", 2096), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2933)], (0)), 100000000, 0, -2932), 0, (("src/signatures.mli", 406, 16102, 16104), ("src/signatures.mli", 406, 16102, 16131), 0), 0, Tag1 ("Signatures", 172)), 0); (("use_menhir", 2097), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2931)], (0)), 100000000, 0, -2930), 0, (("src/signatures.mli", 407, 16132, 16134), ("src/signatures.mli", 407, 16132, 16159), 0), 0, Tag1 ("Signatures", 173)), 0); (("show_documentation", 2098), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2929)], (0)), 100000000, 0, -2928), 0, (("src/signatures.mli", 408, 16160, 16162), ("src/signatures.mli", 408, 16160, 16195), 0), 0, Tag1 ("Signatures", 174)), 0); (("recursive", 2099), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2927)], (0)), 100000000, 0, -2926), 0, (("src/signatures.mli", 409, 16196, 16198), ("src/signatures.mli", 409, 16196, 16222), 0), 0, Tag1 ("Signatures", 175)), 0); (("use_ocamlfind", 2100), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2925)], (0)), 100000000, 0, -2924), 0, (("src/signatures.mli", 410, 16223, 16225), ("src/signatures.mli", 410, 16223, 16253), 0), 0, Tag1 ("Signatures", 176)), 0); (("plugin_use_ocamlfind", 2101), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2923)], (0)), 100000000, 0, -2922), 0, (("src/signatures.mli", 411, 16254, 16256), ("src/signatures.mli", 411, 16254, 16291), 0), 0, Tag1 ("Signatures", 177)), 0); (("targets", 2102), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2921)], (0)), 100000000, 0, -2920)], (0)), 100000000, 0, -2919), 0, (("src/signatures.mli", 413, 16293, 16295), ("src/signatures.mli", 413, 16293, 16324), 0), 0, Tag1 ("Signatures", 178)), 0); (("ocaml_libs", 2103), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2918)], (0)), 100000000, 0, -2917)], (0)), 100000000, 0, -2916), 0, (("src/signatures.mli", 414, 16325, 16327), ("src/signatures.mli", 414, 16325, 16359), 0), 0, Tag1 ("Signatures", 179)), 0); (("ocaml_mods", 2104), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2915)], (0)), 100000000, 0, -2914)], (0)), 100000000, 0, -2913), 0, (("src/signatures.mli", 415, 16360, 16362), ("src/signatures.mli", 415, 16360, 16394), 0), 0, Tag1 ("Signatures", 180)), 0); (("ocaml_pkgs", 2105), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2912)], (0)), 100000000, 0, -2911)], (0)), 100000000, 0, -2910), 0, (("src/signatures.mli", 416, 16395, 16397), ("src/signatures.mli", 416, 16395, 16429), 0), 0, Tag1 ("Signatures", 181)), 0); (("ocaml_syntax", 2106), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2909)], (0)), 100000000, 0, -2908)], (0)), 100000000, 0, -2907), 0, (("src/signatures.mli", 417, 16430, 16432), ("src/signatures.mli", 417, 16430, 16468), 0), 0, Tag1 ("Signatures", 182)), 0); (("ocaml_cflags", 2107), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2906)], (0)), 100000000, 0, -2905)], (0)), 100000000, 0, -2904), 0, (("src/signatures.mli", 418, 16469, 16471), ("src/signatures.mli", 418, 16469, 16505), 0), 0, Tag1 ("Signatures", 183)), 0); (("ocaml_lflags", 2108), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2903)], (0)), 100000000, 0, -2902)], (0)), 100000000, 0, -2901), 0, (("src/signatures.mli", 419, 16506, 16508), ("src/signatures.mli", 419, 16506, 16542), 0), 0, Tag1 ("Signatures", 184)), 0); (("ocaml_ppflags", 2109), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2900)], (0)), 100000000, 0, -2899)], (0)), 100000000, 0, -2898), 0, (("src/signatures.mli", 420, 16543, 16545), ("src/signatures.mli", 420, 16543, 16580), 0), 0, Tag1 ("Signatures", 185)), 0); (("ocaml_docflags", 2110), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2897)], (0)), 100000000, 0, -2896)], (0)), 100000000, 0, -2895), 0, (("src/signatures.mli", 421, 16581, 16583), ("src/signatures.mli", 421, 16581, 16619), 0), 0, Tag1 ("Signatures", 186)), 0); (("ocaml_yaccflags", 2111), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2894)], (0)), 100000000, 0, -2893)], (0)), 100000000, 0, -2892), 0, (("src/signatures.mli", 422, 16620, 16622), ("src/signatures.mli", 422, 16620, 16659), 0), 0, Tag1 ("Signatures", 187)), 0); (("ocaml_lexflags", 2112), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2891)], (0)), 100000000, 0, -2890)], (0)), 100000000, 0, -2889), 0, (("src/signatures.mli", 423, 16660, 16662), ("src/signatures.mli", 423, 16660, 16698), 0), 0, Tag1 ("Signatures", 188)), 0); (("program_args", 2113), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2888)], (0)), 100000000, 0, -2887)], (0)), 100000000, 0, -2886), 0, (("src/signatures.mli", 424, 16699, 16701), ("src/signatures.mli", 424, 16699, 16735), 0), 0, Tag1 ("Signatures", 189)), 0); (("ignore_list", 2114), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2885)], (0)), 100000000, 0, -2884)], (0)), 100000000, 0, -2883), 0, (("src/signatures.mli", 425, 16736, 16738), ("src/signatures.mli", 425, 16736, 16771), 0), 0, Tag1 ("Signatures", 190)), 0); (("tags", 2115), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2882)], (0)), 100000000, 0, -2881)], (0)), 100000000, 0, -2880), 0, (("src/signatures.mli", 426, 16772, 16774), ("src/signatures.mli", 426, 16772, 16800), 0), 0, Tag1 ("Signatures", 191)), 0); (("tag_lines", 2116), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2879)], (0)), 100000000, 0, -2878)], (0)), 100000000, 0, -2877), 0, (("src/signatures.mli", 427, 16801, 16803), ("src/signatures.mli", 427, 16801, 16834), 0), 0, Tag1 ("Signatures", 192)), 0); (("show_tags", 2117), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2876)], (0)), 100000000, 0, -2875)], (0)), 100000000, 0, -2874), 0, (("src/signatures.mli", 428, 16835, 16837), ("src/signatures.mli", 428, 16835, 16868), 0), 0, Tag1 ("Signatures", 193)), 0); (("ext_obj", 2118), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2873)], (0)), 100000000, 0, -2872), 0, (("src/signatures.mli", 430, 16870, 16872), ("src/signatures.mli", 430, 16870, 16896), 0), 0, Tag1 ("Signatures", 194)), 0); (("ext_lib", 2119), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2871)], (0)), 100000000, 0, -2870), 0, (("src/signatures.mli", 431, 16897, 16899), ("src/signatures.mli", 431, 16897, 16923), 0), 0, Tag1 ("Signatures", 195)), 0); (("ext_dll", 2120), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2869)], (0)), 100000000, 0, -2868), 0, (("src/signatures.mli", 432, 16924, 16926), ("src/signatures.mli", 432, 16924, 16950), 0), 0, Tag1 ("Signatures", 196)), 0); (("exe", 2121), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2867)], (0)), 100000000, 0, -2866), 0, (("src/signatures.mli", 433, 16951, 16953), ("src/signatures.mli", 433, 16951, 16973), 0), 0, Tag1 ("Signatures", 197)), 0); (("add", 2122), ((Tag1 (0, (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Arg"), "key"), 0, (0)), 100000000, 0, -2863); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Arg"), "spec"), 0, (0)), 100000000, 0, -2864); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Arg"), "doc"), 0, (0)), 100000000, 0, -2865)]), 100000000, 0, -2862), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2861), 0), 100000000, 0, -2860), 0, (("src/signatures.mli", 435, 16975, 16977), ("src/signatures.mli", 435, 16975, 17023), 0), 0, Tag1 ("Signatures", 198)), 0)]), 0, (("src/signatures.mli", 547, 20710, 20712), ("src/signatures.mli", 547, 20710, 20776), 0), Tag1 ("Signatures", 259)), 0, 0); Tag3 (("Arch", 1950), 0, (((("ARCH", 1517))), 0, (("src/signatures.mli", 548, 20777, 20779), ("src/signatures.mli", 548, 20777, 20802), 0), Tag1 ("Signatures", 260)), 0, 0); Tag3 (("Findlib", 1951), 0, (Tag1 ([Tag1 (("command_spec", 2123), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Command", 1944)), "spec"), 0, (0)), 100000000, 0, -3042)), 0, 0, 0, 0, (("src/signatures.mli", 549, 20803, 20837), ("src/signatures.mli", 549, 20803, 20869), 0), 0, 0, 0, Tag1 ("Signatures", 261)), 1, 0); Tag1 (("error", 2124), (0, 0, Tag1 ([(("Cannot_run_ocamlfind", 1176), (0), 0, (("src/signatures.mli", 477, 18184, 18188), ("src/signatures.mli", 477, 18184, 18210), 0), 0, Tag1 ("Signatures", 223)); (("Dependency_not_found", 1177), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3037); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3038)]), 0, (("src/signatures.mli", 478, 18211, 18215), ("src/signatures.mli", 478, 18211, 18256), 0), 0, Tag1 ("Signatures", 224)); (("Package_not_found", 1178), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3039)]), 0, (("src/signatures.mli", 479, 18283, 18287), ("src/signatures.mli", 479, 18283, 18316), 0), 0, Tag1 ("Signatures", 225)); (("Cannot_parse_query", 1179), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3040); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3041)]), 0, (("src/signatures.mli", 480, 18317, 18321), ("src/signatures.mli", 480, 18317, 18360), 0), 0, Tag1 ("Signatures", 226))], 0), 1, 0, 0, 0, 0, 0, (("src/signatures.mli", 476, 18169, 18171), ("src/signatures.mli", 480, 18317, 18360), 0), 0, 0, 0, Tag1 ("Signatures", 222)), 1, 0); Tag2 (("Findlib_error", 2125), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((("error", 2124)), 0, (0)), 100000000, 0, -3036)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Signatures", 227)), 2, 0); (("string_of_error", 2126), ((Tag1 (0, (Tag3 ((("error", 2124)), 0, (0)), 100000000, 0, -3035), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3034), 0), 100000000, 0, -3033), 0, (("src/signatures.mli", 484, 18425, 18427), ("src/signatures.mli", 484, 18425, 18463), 0), 0, Tag1 ("Signatures", 228)), 0); (("report_error", 2127), ((Tag1 (0, (Tag3 ((("error", 2124)), 0, (0)), 100000000, 0, -3032), ((("a")), 100000000, 0, -3031), 0), 100000000, 0, -3030), 0, (("src/signatures.mli", 487, 18521, 18523), ("src/signatures.mli", 487, 18521, 18552), 0), 0, Tag1 ("Signatures", 229)), 0); Tag1 (("package", 2128), (0, 0, [[(("name", 1184), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3021), (("src/signatures.mli", 491, 18644, 18648), ("src/signatures.mli", 491, 18644, 18661), 0), 0, Tag1 ("Signatures", 231)); (("description", 1185), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3022), (("src/signatures.mli", 492, 18662, 18666), ("src/signatures.mli", 492, 18662, 18686), 0), 0, Tag1 ("Signatures", 232)); (("version", 1186), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3023), (("src/signatures.mli", 493, 18687, 18691), ("src/signatures.mli", 493, 18687, 18707), 0), 0, Tag1 ("Signatures", 233)); (("archives_byte", 1187), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3024), (("src/signatures.mli", 494, 18708, 18712), ("src/signatures.mli", 494, 18708, 18734), 0), 0, Tag1 ("Signatures", 234)); (("archives_native", 1188), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3025), (("src/signatures.mli", 496, 18815, 18819), ("src/signatures.mli", 496, 18815, 18843), 0), 0, Tag1 ("Signatures", 235)); (("link_options", 1189), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3026), (("src/signatures.mli", 498, 18925, 18929), ("src/signatures.mli", 498, 18925, 18950), 0), 0, Tag1 ("Signatures", 236)); (("location", 1190), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3027), (("src/signatures.mli", 499, 18951, 18955), ("src/signatures.mli", 499, 18951, 18972), 0), 0, Tag1 ("Signatures", 237)); (("dependencies", 1191), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("package", 2128)), 0, (0)), 100000000, 0, -3029)], (0)), 100000000, 0, -3028), (("src/signatures.mli", 500, 18973, 18977), ("src/signatures.mli", 500, 18973, 19004), 0), 0, Tag1 ("Signatures", 238))]], 1, 0, 0, 0, 0, 0, (("src/signatures.mli", 490, 18625, 18627), ("src/signatures.mli", 502, 19075, 19078), 0), 0, 0, 0, Tag1 ("Signatures", 230)), 1, 0); (("query", 2129), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3020), (Tag3 ((("package", 2128)), 0, (0)), 100000000, 0, -3019), 0), 100000000, 0, -3018), 0, (("src/signatures.mli", 505, 19112, 19114), ("src/signatures.mli", 505, 19112, 19142), 0), 0, Tag1 ("Signatures", 239)), 0); (("list", 2130), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3017), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3016)], (0)), 100000000, 0, -3015), 0), 100000000, 0, -3014), 0, (("src/signatures.mli", 509, 19229, 19231), ("src/signatures.mli", 509, 19229, 19260), 0), 0, Tag1 ("Signatures", 240)), 0); (("topological_closure", 2131), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("package", 2128)), 0, (0)), 100000000, 0, -3013)], (0)), 100000000, 0, -3012), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("package", 2128)), 0, (0)), 100000000, 0, -3011)], (0)), 100000000, 0, -3010), 0), 100000000, 0, -3009), 0, (("src/signatures.mli", 512, 19313, 19315), ("src/signatures.mli", 512, 19313, 19368), 0), 0, Tag1 ("Signatures", 241)), 0); (("include_flags", 2132), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("package", 2128)), 0, (0)), 100000000, 0, -3008)], (0)), 100000000, 0, -3007), (Tag3 ((("command_spec", 2123)), 0, (0)), 100000000, 0, -3006), 0), 100000000, 0, -3005), 0, (("src/signatures.mli", 519, 19659, 19661), ("src/signatures.mli", 519, 19659, 19708), 0), 0, Tag1 ("Signatures", 242)), 0); (("compile_flags_byte", 2133), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("package", 2128)), 0, (0)), 100000000, 0, -3004)], (0)), 100000000, 0, -3003), (Tag3 ((("command_spec", 2123)), 0, (0)), 100000000, 0, -3002), 0), 100000000, 0, -3001), 0, (("src/signatures.mli", 522, 19761, 19763), ("src/signatures.mli", 522, 19761, 19815), 0), 0, Tag1 ("Signatures", 243)), 0); (("compile_flags_native", 2134), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("package", 2128)), 0, (0)), 100000000, 0, -3000)], (0)), 100000000, 0, -2999), (Tag3 ((("command_spec", 2123)), 0, (0)), 100000000, 0, -2998), 0), 100000000, 0, -2997), 0, (("src/signatures.mli", 526, 19903, 19905), ("src/signatures.mli", 526, 19903, 19959), 0), 0, Tag1 ("Signatures", 244)), 0); (("link_flags_byte", 2135), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("package", 2128)), 0, (0)), 100000000, 0, -2996)], (0)), 100000000, 0, -2995), (Tag3 ((("command_spec", 2123)), 0, (0)), 100000000, 0, -2994), 0), 100000000, 0, -2993), 0, (("src/signatures.mli", 529, 20022, 20024), ("src/signatures.mli", 529, 20022, 20073), 0), 0, Tag1 ("Signatures", 245)), 0); (("link_flags_native", 2136), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("package", 2128)), 0, (0)), 100000000, 0, -2992)], (0)), 100000000, 0, -2991), (Tag3 ((("command_spec", 2123)), 0, (0)), 100000000, 0, -2990), 0), 100000000, 0, -2989), 0, (("src/signatures.mli", 533, 20207, 20209), ("src/signatures.mli", 533, 20207, 20260), 0), 0, Tag1 ("Signatures", 246)), 0)]), 0, (("src/signatures.mli", 549, 20803, 20805), ("src/signatures.mli", 549, 20803, 20869), 0), Tag1 ("Signatures", 262)), 0, 0); (("opt_print", 1952), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -2560), (Tag1 (0, ((("a")), 100000000, 0, -2555), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2559), 0), 100000000, 0, -2558), 0), 100000000, 0, -2557), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -2556), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -2555)], (0)), 100000000, 0, -2554), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2553), 0), 100000000, 0, -2552), 0), 100000000, 0, -2551), 0), 100000000, 0, -2550), 0, (("src/signatures.mli", 341, 13837, 13839), ("src/signatures.mli", 342, 13855, 13932), 0), 0, Tag1 ("Signatures", 127)), 0); (("the", 1953), ((Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -2548)], (0)), 100000000, 0, -2549), ((("a")), 100000000, 0, -2548), 0), 100000000, 0, -2547), 0, (("src/signatures.mli", 343, 13933, 13935), ("src/signatures.mli", 343, 13933, 13960), 0), 0, Tag1 ("Signatures", 128)), 0); (("getenv", 1954), ((Tag1 (Tag1 ("default"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2546)], (0)), 100000000, 0, -2545), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2544), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2543), 0), 100000000, 0, -2542), 0), 100000000, 0, -2541), 0, (("src/signatures.mli", 344, 13961, 13963), ("src/signatures.mli", 344, 13961, 14011), 0), 0, Tag1 ("Signatures", 129)), 0); (("with_input_file", 1955), ((Tag1 (Tag1 ("bin"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2540)], (0)), 100000000, 0, -2539), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2538), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "in_channel"), 0, (0)), 100000000, 0, -2537), ((("a")), 100000000, 0, -2535), 0), 100000000, 0, -2536), ((("a")), 100000000, 0, -2535), 0), 100000000, 0, -2534), 0), 100000000, 0, -2533), 0), 100000000, 0, -2532), 0, (("src/signatures.mli", 345, 14012, 14014), ("src/signatures.mli", 345, 14012, 14083), 0), 0, Tag1 ("Signatures", 130)), 0); (("with_output_file", 1956), ((Tag1 (Tag1 ("bin"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2531)], (0)), 100000000, 0, -2530), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2529), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -2528), ((("a")), 100000000, 0, -2526), 0), 100000000, 0, -2527), ((("a")), 100000000, 0, -2526), 0), 100000000, 0, -2525), 0), 100000000, 0, -2524), 0), 100000000, 0, -2523), 0, (("src/signatures.mli", 346, 14084, 14086), ("src/signatures.mli", 346, 14084, 14157), 0), 0, Tag1 ("Signatures", 131)), 0); (("with_temp_file", 1957), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2522), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2521), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2520), ((("a")), 100000000, 0, -2518), 0), 100000000, 0, -2519), ((("a")), 100000000, 0, -2518), 0), 100000000, 0, -2517), 0), 100000000, 0, -2516), 0), 100000000, 0, -2515), 0, (("src/signatures.mli", 347, 14158, 14160), ("src/signatures.mli", 347, 14158, 14221), 0), 0, Tag1 ("Signatures", 132)), 0); (("read_file", 1958), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2514), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2513), 0), 100000000, 0, -2512), 0, (("src/signatures.mli", 348, 14222, 14224), ("src/signatures.mli", 348, 14222, 14256), 0), 0, Tag1 ("Signatures", 133)), 0); (("copy_chan", 1959), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "in_channel"), 0, (0)), 100000000, 0, -2511), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -2510), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2509), 0), 100000000, 0, -2508), 0), 100000000, 0, -2507), 0, (("src/signatures.mli", 349, 14257, 14259), ("src/signatures.mli", 349, 14257, 14308), 0), 0, Tag1 ("Signatures", 134)), 0); (("copy_file", 1960), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2506), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2505), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2504), 0), 100000000, 0, -2503), 0), 100000000, 0, -2502), 0, (("src/signatures.mli", 350, 14309, 14311), ("src/signatures.mli", 350, 14309, 14351), 0), 0, Tag1 ("Signatures", 135)), 0); (("print_string_list", 1961), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -2501), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2500)], (0)), 100000000, 0, -2499), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2498), 0), 100000000, 0, -2497), 0), 100000000, 0, -2496), 0, (("src/signatures.mli", 351, 14352, 14354), ("src/signatures.mli", 351, 14352, 14417), 0), 0, Tag1 ("Signatures", 136)), 0); (("!*", 1962), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lazy"), "t"), [((("a")), 100000000, 0, -2494)], (0)), 100000000, 0, -2495), ((("a")), 100000000, 0, -2494), 0), 100000000, 0, -2493), 0, (("src/signatures.mli", 354, 14479, 14481), ("src/signatures.mli", 354, 14479, 14509), 0), 0, Tag1 ("Signatures", 137)), 0); (("&", 1963), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -2491), ((("b")), 100000000, 0, -2490), 0), 100000000, 0, -2492), (Tag1 (0, ((("a")), 100000000, 0, -2491), ((("b")), 100000000, 0, -2490), 0), 100000000, 0, -2489), 0), 100000000, 0, -2488), 0, (("src/signatures.mli", 360, 14705, 14707), ("src/signatures.mli", 360, 14705, 14741), 0), 0, Tag1 ("Signatures", 138)), 0); (("|>", 1964), ((Tag1 (0, ((("a")), 100000000, 0, -2487), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -2487), ((("b")), 100000000, 0, -2485), 0), 100000000, 0, -2486), ((("b")), 100000000, 0, -2485), 0), 100000000, 0, -2484), 0), 100000000, 0, -2483), 0, (("src/signatures.mli", 365, 14903, 14905), ("src/signatures.mli", 365, 14903, 14940), 0), 0, Tag1 ("Signatures", 139)), 0); (("@:=", 1965), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -2480)], (0)), 100000000, 0, -2482)], (0)), 100000000, 0, -2481), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -2480)], (0)), 100000000, 0, -2479), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2478), 0), 100000000, 0, -2477), 0), 100000000, 0, -2476), 0, (("src/signatures.mli", 368, 14992, 14994), ("src/signatures.mli", 368, 14992, 15038), 0), 0, Tag1 ("Signatures", 140)), 0); (("memo", 1966), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -2474), ((("b")), 100000000, 0, -2473), 0), 100000000, 0, -2475), (Tag1 (0, ((("a")), 100000000, 0, -2474), ((("b")), 100000000, 0, -2473), 0), 100000000, 0, -2472), 0), 100000000, 0, -2471), 0, (("src/signatures.mli", 370, 15040, 15042), ("src/signatures.mli", 370, 15040, 15077), 0), 0, Tag1 ("Signatures", 141)), 0); (("memo2", 1967), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -2468), (Tag1 (0, ((("b")), 100000000, 0, -2467), ((("c")), 100000000, 0, -2466), 0), 100000000, 0, -2470), 0), 100000000, 0, -2469), (Tag1 (0, ((("a")), 100000000, 0, -2468), (Tag1 (0, ((("b")), 100000000, 0, -2467), ((("c")), 100000000, 0, -2466), 0), 100000000, 0, -2465), 0), 100000000, 0, -2464), 0), 100000000, 0, -2463), 0, (("src/signatures.mli", 372, 15079, 15081), ("src/signatures.mli", 372, 15079, 15129), 0), 0, Tag1 ("Signatures", 142)), 0); (("memo3", 1968), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -2459), (Tag1 (0, ((("b")), 100000000, 0, -2458), (Tag1 (0, ((("c")), 100000000, 0, -2457), ((("d")), 100000000, 0, -2456), 0), 100000000, 0, -2462), 0), 100000000, 0, -2461), 0), 100000000, 0, -2460), (Tag1 (0, ((("a")), 100000000, 0, -2459), (Tag1 (0, ((("b")), 100000000, 0, -2458), (Tag1 (0, ((("c")), 100000000, 0, -2457), ((("d")), 100000000, 0, -2456), 0), 100000000, 0, -2455), 0), 100000000, 0, -2454), 0), 100000000, 0, -2453), 0), 100000000, 0, -2452), 0, (("src/signatures.mli", 374, 15131, 15133), ("src/signatures.mli", 374, 15131, 15193), 0), 0, Tag1 ("Signatures", 143)), 0); Tag1 (("command", 1969), (0, 0, Tag1 ([(("Seq", 1362), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("command", 1969)), 0, (0)), 100000000, 0, -2447)], (0)), 100000000, 0, -2446)]), 0, (("src/signatures.mli", 554, 20975, 20979), ("src/signatures.mli", 554, 20975, 21000), 0), 0, Tag1 ("Signatures", 265)); (("Cmd", 1363), ([(Tag3 ((("spec", 1970)), 0, (0)), 100000000, 0, -2448)]), 0, (("src/signatures.mli", 555, 21001, 21005), ("src/signatures.mli", 555, 21001, 21018), 0), 0, Tag1 ("Signatures", 266)); (("Echo", 1364), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2450)], (0)), 100000000, 0, -2449); (Tag3 (Tag1 ((("Pathname", 1942)), "t"), 0, (0)), 100000000, 0, -2451)]), 0, (("src/signatures.mli", 556, 21019, 21023), ("src/signatures.mli", 556, 21019, 21057), 0), 0, Tag1 ("Signatures", 267)); (("Nop", 1365), (0), 0, (("src/signatures.mli", 557, 21058, 21062), ("src/signatures.mli", 557, 21058, 21067), 0), 0, Tag1 ("Signatures", 268))], 0), 1, ((Tag3 (Tag1 ((("Command", 1944)), "t"), 0, (0)), 100000000, 0, -2445)), 0, 0, 0, 0, (("src/signatures.mli", 553, 20946, 20948), ("src/signatures.mli", 557, 21058, 21067), 0), 0, 0, 0, Tag1 ("Signatures", 263)), 1, 0); Tag1 (("spec", 1970), (0, 0, Tag1 ([(("N", 1366), (0), 0, (("src/signatures.mli", 561, 21160, 21164), ("src/signatures.mli", 561, 21160, 21167), 0), 0, Tag1 ("Signatures", 269)); (("S", 1367), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("spec", 1970)), 0, (0)), 100000000, 0, -2437)], (0)), 100000000, 0, -2436)]), 0, (("src/signatures.mli", 561, 21160, 21168), ("src/signatures.mli", 561, 21160, 21184), 0), 0, Tag1 ("Signatures", 270)); (("A", 1368), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2438)]), 0, (("src/signatures.mli", 561, 21160, 21185), ("src/signatures.mli", 561, 21160, 21198), 0), 0, Tag1 ("Signatures", 271)); (("P", 1369), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2439)]), 0, (("src/signatures.mli", 561, 21160, 21199), ("src/signatures.mli", 561, 21160, 21212), 0), 0, Tag1 ("Signatures", 272)); (("Px", 1370), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2440)]), 0, (("src/signatures.mli", 561, 21160, 21213), ("src/signatures.mli", 561, 21160, 21227), 0), 0, Tag1 ("Signatures", 273)); (("Sh", 1371), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2441)]), 0, (("src/signatures.mli", 562, 21228, 21232), ("src/signatures.mli", 562, 21228, 21246), 0), 0, Tag1 ("Signatures", 274)); (("T", 1372), ([(Tag3 (Tag1 ((("Tags", 1943)), "t"), 0, (0)), 100000000, 0, -2442)]), 0, (("src/signatures.mli", 562, 21228, 21247), ("src/signatures.mli", 562, 21228, 21260), 0), 0, Tag1 ("Signatures", 275)); (("V", 1373), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2443)]), 0, (("src/signatures.mli", 562, 21228, 21261), ("src/signatures.mli", 562, 21228, 21274), 0), 0, Tag1 ("Signatures", 276)); (("Quote", 1374), ([(Tag3 ((("spec", 1970)), 0, (0)), 100000000, 0, -2444)]), 0, (("src/signatures.mli", 562, 21228, 21275), ("src/signatures.mli", 562, 21228, 21290), 0), 0, Tag1 ("Signatures", 277))], 0), 1, ((Tag3 (Tag1 ((("Command", 1944)), "spec"), 0, (0)), 100000000, 0, -2435)), 0, 0, 0, 0, (("src/signatures.mli", 560, 21132, 21134), ("src/signatures.mli", 562, 21228, 21290), 0), 0, 0, 0, Tag1 ("Signatures", 264)), 2, 0); (("/", 1971), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1942)), "t"), 0, (0)), 100000000, 0, -2434), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1942)), "t"), 0, (0)), 100000000, 0, -2433), (Tag3 (Tag1 ((("Pathname", 1942)), "t"), 0, (0)), 100000000, 0, -2432), 0), 100000000, 0, -2431), 0), 100000000, 0, -2430), 0, (("src/signatures.mli", 565, 21342, 21344), ("src/signatures.mli", 565, 21342, 21394), 0), 0, Tag1 ("Signatures", 278)), 0); (("-.-", 1972), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1942)), "t"), 0, (0)), 100000000, 0, -2429), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2428), (Tag3 (Tag1 ((("Pathname", 1942)), "t"), 0, (0)), 100000000, 0, -2427), 0), 100000000, 0, -2426), 0), 100000000, 0, -2425), 0, (("src/signatures.mli", 568, 21471, 21473), ("src/signatures.mli", 568, 21471, 21521), 0), 0, Tag1 ("Signatures", 279)), 0); (("++", 1973), ((Tag1 (0, (Tag3 (Tag1 ((("Tags", 1943)), "t"), 0, (0)), 100000000, 0, -2424), (Tag1 (0, (Tag3 (Tag1 ((("Tags", 1943)), "elt"), 0, (0)), 100000000, 0, -2423), (Tag3 (Tag1 ((("Tags", 1943)), "t"), 0, (0)), 100000000, 0, -2422), 0), 100000000, 0, -2421), 0), 100000000, 0, -2420), 0, (("src/signatures.mli", 571, 21588, 21590), ("src/signatures.mli", 571, 21588, 21631), 0), 0, Tag1 ("Signatures", 280)), 0); (("--", 1974), ((Tag1 (0, (Tag3 (Tag1 ((("Tags", 1943)), "t"), 0, (0)), 100000000, 0, -2419), (Tag1 (0, (Tag3 (Tag1 ((("Tags", 1943)), "elt"), 0, (0)), 100000000, 0, -2418), (Tag3 (Tag1 ((("Tags", 1943)), "t"), 0, (0)), 100000000, 0, -2417), 0), 100000000, 0, -2416), 0), 100000000, 0, -2415), 0, (("src/signatures.mli", 574, 21701, 21703), ("src/signatures.mli", 574, 21701, 21744), 0), 0, Tag1 ("Signatures", 281)), 0); (("+++", 1975), ((Tag1 (0, (Tag3 (Tag1 ((("Tags", 1943)), "t"), 0, (0)), 100000000, 0, -2414), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("Tags", 1943)), "elt"), 0, (0)), 100000000, 0, -2413)], (0)), 100000000, 0, -2412), (Tag3 (Tag1 ((("Tags", 1943)), "t"), 0, (0)), 100000000, 0, -2411), 0), 100000000, 0, -2410), 0), 100000000, 0, -2409), 0, (("src/signatures.mli", 578, 21864, 21866), ("src/signatures.mli", 578, 21864, 21915), 0), 0, Tag1 ("Signatures", 282)), 0); (("---", 1976), ((Tag1 (0, (Tag3 (Tag1 ((("Tags", 1943)), "t"), 0, (0)), 100000000, 0, -2408), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("Tags", 1943)), "elt"), 0, (0)), 100000000, 0, -2407)], (0)), 100000000, 0, -2406), (Tag3 (Tag1 ((("Tags", 1943)), "t"), 0, (0)), 100000000, 0, -2405), 0), 100000000, 0, -2404), 0), 100000000, 0, -2403), 0, (("src/signatures.mli", 582, 22038, 22040), ("src/signatures.mli", 582, 22038, 22089), 0), 0, Tag1 ("Signatures", 283)), 0); Tag1 (("env", 1977), (0, 0, 0, 1, ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1942)), "t"), 0, (0)), 100000000, 0, -2402), (Tag3 (Tag1 ((("Pathname", 1942)), "t"), 0, (0)), 100000000, 0, -2401), 0), 100000000, 0, -2400)), 0, 0, 0, 0, (("src/signatures.mli", 598, 22801, 22803), ("src/signatures.mli", 598, 22801, 22838), 0), 0, 0, 0, Tag1 ("Signatures", 284)), 1, 0); Tag1 (("builder", 1978), (0, 0, 0, 1, ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Pathname", 1942)), "t"), 0, (0)), 100000000, 0, -2399)], (0)), 100000000, 0, -2398)], (0)), 100000000, 0, -2397), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Outcome", 1945)), "t"), [(Tag3 (Tag1 ((("Pathname", 1942)), "t"), 0, (0)), 100000000, 0, -2395); (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -2396)], (0)), 100000000, 0, -2394)], (0)), 100000000, 0, -2393), 0), 100000000, 0, -2392)), 0, 0, 0, 0, (("src/signatures.mli", 614, 23547, 23549), ("src/signatures.mli", 614, 23547, 23620), 0), 0, 0, 0, Tag1 ("Signatures", 285)), 1, 0); Tag1 (("action", 1979), (0, 0, 0, 1, ((Tag1 (0, (Tag3 ((("env", 1977)), 0, (0)), 100000000, 0, -2391), (Tag1 (0, (Tag3 ((("builder", 1978)), 0, (0)), 100000000, 0, -2390), (Tag3 (Tag1 ((("Command", 1944)), "t"), 0, (0)), 100000000, 0, -2389), 0), 100000000, 0, -2388), 0), 100000000, 0, -2387)), 0, 0, 0, 0, (("src/signatures.mli", 654, 25151, 25153), ("src/signatures.mli", 654, 25151, 25194), 0), 0, 0, 0, Tag1 ("Signatures", 286)), 1, 0); (("rule", 1980), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2386), (Tag1 (Tag1 ("tags"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2385)], (0)), 100000000, 0, -2384)], (0)), 100000000, 0, -2383), (Tag1 (Tag1 ("prods"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2382)], (0)), 100000000, 0, -2381)], (0)), 100000000, 0, -2380), (Tag1 (Tag1 ("deps"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2379)], (0)), 100000000, 0, -2378)], (0)), 100000000, 0, -2377), (Tag1 (Tag1 ("prod"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2376)], (0)), 100000000, 0, -2375), (Tag1 (Tag1 ("dep"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2374)], (0)), 100000000, 0, -2373), (Tag1 (Tag1 ("stamp"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2372)], (0)), 100000000, 0, -2371), (Tag1 (Tag1 ("insert"), (Tag3 ((Tag3 ("option", 10)), [(Tag8 (([("after", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2369)))); ("before", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2370)))); ("bottom", (0)); ("top", (0))], (0, 100000000, 0, -2368), 1, 0, 0)), 100000000, 0, -2367)], (0)), 100000000, 0, -2366), (Tag1 (Tag1 ("doc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2365)], (0)), 100000000, 0, -2364), (Tag1 (0, (Tag3 ((("action", 1979)), 0, (0)), 100000000, 0, -2363), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2362), 0), 100000000, 0, -2361), 0), 100000000, 0, -2360), 0), 100000000, 0, -2359), 0), 100000000, 0, -2358), 0), 100000000, 0, -2357), 0), 100000000, 0, -2356), 0), 100000000, 0, -2355), 0), 100000000, 0, -2354), 0), 100000000, 0, -2353), 0), 100000000, 0, -2352), 0, (("src/signatures.mli", 715, 27895, 27897), ("src/signatures.mli", 724, 28144, 28162), 0), 0, Tag1 ("Signatures", 287)), 0); (("copy_rule", 1981), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2351), (Tag1 (Tag1 ("insert"), (Tag3 ((Tag3 ("option", 10)), [(Tag8 (([("after", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2349)))); ("before", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2350)))); ("bottom", (0)); ("top", (0))], (0, 100000000, 0, -2348), 1, 0, 0)), 100000000, 0, -2347)], (0)), 100000000, 0, -2346), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2345), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2344), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2343), 0), 100000000, 0, -2342), 0), 100000000, 0, -2341), 0), 100000000, 0, -2340), 0), 100000000, 0, -2339), 0, (("src/signatures.mli", 727, 28217, 28219), ("src/signatures.mli", 729, 28316, 28344), 0), 0, Tag1 ("Signatures", 288)), 0); (("clear_rules", 1982), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2338), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2337), 0), 100000000, 0, -2336), 0, (("src/signatures.mli", 732, 28407, 28409), ("src/signatures.mli", 732, 28407, 28439), 0), 0, Tag1 ("Signatures", 289)), 0); (("dep", 1983), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Tags", 1943)), "elt"), 0, (0)), 100000000, 0, -2335)], (0)), 100000000, 0, -2334), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Pathname", 1942)), "t"), 0, (0)), 100000000, 0, -2333)], (0)), 100000000, 0, -2332), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2331), 0), 100000000, 0, -2330), 0), 100000000, 0, -2329), 0, (("src/signatures.mli", 737, 28640, 28642), ("src/signatures.mli", 737, 28640, 28692), 0), 0, Tag1 ("Signatures", 290)), 0); (("pdep", 1984), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Tags", 1943)), "elt"), 0, (0)), 100000000, 0, -2328)], (0)), 100000000, 0, -2327), (Tag1 (0, (Tag3 (Tag1 ((("Tags", 1943)), "elt"), 0, (0)), 100000000, 0, -2326), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2325), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Pathname", 1942)), "t"), 0, (0)), 100000000, 0, -2324)], (0)), 100000000, 0, -2323), 0), 100000000, 0, -2322), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2321), 0), 100000000, 0, -2320), 0), 100000000, 0, -2319), 0), 100000000, 0, -2318), 0, (("src/signatures.mli", 747, 29122, 29124), ("src/signatures.mli", 747, 29122, 29199), 0), 0, Tag1 ("Signatures", 291)), 0); (("flag", 1985), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Tags", 1943)), "elt"), 0, (0)), 100000000, 0, -2317)], (0)), 100000000, 0, -2316), (Tag1 (0, (Tag3 (Tag1 ((("Command", 1944)), "spec"), 0, (0)), 100000000, 0, -2315), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2314), 0), 100000000, 0, -2313), 0), 100000000, 0, -2312), 0, (("src/signatures.mli", 753, 29453, 29455), ("src/signatures.mli", 753, 29453, 29503), 0), 0, Tag1 ("Signatures", 292)), 0); (("pflag", 1986), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Tags", 1943)), "elt"), 0, (0)), 100000000, 0, -2311)], (0)), 100000000, 0, -2310), (Tag1 (0, (Tag3 (Tag1 ((("Tags", 1943)), "elt"), 0, (0)), 100000000, 0, -2309), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2308), (Tag3 (Tag1 ((("Command", 1944)), "spec"), 0, (0)), 100000000, 0, -2307), 0), 100000000, 0, -2306), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2305), 0), 100000000, 0, -2304), 0), 100000000, 0, -2303), 0), 100000000, 0, -2302), 0, (("src/signatures.mli", 762, 29825, 29827), ("src/signatures.mli", 762, 29825, 29900), 0), 0, Tag1 ("Signatures", 293)), 0); (("flag_and_dep", 1987), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Tags", 1943)), "elt"), 0, (0)), 100000000, 0, -2301)], (0)), 100000000, 0, -2300), (Tag1 (0, (Tag3 (Tag1 ((("Command", 1944)), "spec"), 0, (0)), 100000000, 0, -2299), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2298), 0), 100000000, 0, -2297), 0), 100000000, 0, -2296), 0, (("src/signatures.mli", 770, 30255, 30257), ("src/signatures.mli", 770, 30255, 30313), 0), 0, Tag1 ("Signatures", 294)), 0); (("pflag_and_dep", 1988), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Tags", 1943)), "elt"), 0, (0)), 100000000, 0, -2295)], (0)), 100000000, 0, -2294), (Tag1 (0, (Tag3 (Tag1 ((("Tags", 1943)), "elt"), 0, (0)), 100000000, 0, -2293), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2292), (Tag3 (Tag1 ((("Command", 1944)), "spec"), 0, (0)), 100000000, 0, -2291), 0), 100000000, 0, -2290), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2289), 0), 100000000, 0, -2288), 0), 100000000, 0, -2287), 0), 100000000, 0, -2286), 0, (("src/signatures.mli", 774, 30406, 30408), ("src/signatures.mli", 775, 30457, 30493), 0), 0, Tag1 ("Signatures", 295)), 0); (("mark_tag_used", 1989), ((Tag1 (0, (Tag3 (Tag1 ((("Tags", 1943)), "elt"), 0, (0)), 100000000, 0, -2285), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2284), 0), 100000000, 0, -2283), 0, (("src/signatures.mli", 788, 30948, 30950), ("src/signatures.mli", 788, 30948, 30986), 0), 0, Tag1 ("Signatures", 296)), 0); (("non_dependency", 1990), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1942)), "t"), 0, (0)), 100000000, 0, -2282), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2281), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2280), 0), 100000000, 0, -2279), 0), 100000000, 0, -2278), 0, (("src/signatures.mli", 795, 31192, 31194), ("src/signatures.mli", 795, 31192, 31243), 0), 0, Tag1 ("Signatures", 297)), 0); (("use_lib", 1991), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1942)), "t"), 0, (0)), 100000000, 0, -2277), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1942)), "t"), 0, (0)), 100000000, 0, -2276), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2275), 0), 100000000, 0, -2274), 0), 100000000, 0, -2273), 0, (("src/signatures.mli", 798, 31284, 31286), ("src/signatures.mli", 798, 31284, 31332), 0), 0, Tag1 ("Signatures", 298)), 0); (("ocaml_lib", 1992), ((Tag1 (Tag1 ("extern"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2272)], (0)), 100000000, 0, -2271), (Tag1 (Tag1 ("byte"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2270)], (0)), 100000000, 0, -2269), (Tag1 (Tag1 ("native"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2268)], (0)), 100000000, 0, -2267), (Tag1 (Tag1 ("dir"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("Pathname", 1942)), "t"), 0, (0)), 100000000, 0, -2266)], (0)), 100000000, 0, -2265), (Tag1 (Tag1 ("tag_name"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2264)], (0)), 100000000, 0, -2263), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1942)), "t"), 0, (0)), 100000000, 0, -2262), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2261), 0), 100000000, 0, -2260), 0), 100000000, 0, -2259), 0), 100000000, 0, -2258), 0), 100000000, 0, -2257), 0), 100000000, 0, -2256), 0), 100000000, 0, -2255), 0, (("src/signatures.mli", 815, 32136, 32138), ("src/signatures.mli", 821, 32259, 32281), 0), 0, Tag1 ("Signatures", 299)), 0); (("expand_module", 1993), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Pathname", 1942)), "t"), 0, (0)), 100000000, 0, -2254)], (0)), 100000000, 0, -2253), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1942)), "t"), 0, (0)), 100000000, 0, -2252), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2251)], (0)), 100000000, 0, -2250), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Pathname", 1942)), "t"), 0, (0)), 100000000, 0, -2249)], (0)), 100000000, 0, -2248), 0), 100000000, 0, -2247), 0), 100000000, 0, -2246), 0), 100000000, 0, -2245), 0, (("src/signatures.mli", 829, 32592, 32594), ("src/signatures.mli", 830, 32614, 32681), 0), 0, Tag1 ("Signatures", 300)), 0); (("string_list_of_file", 1994), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1942)), "t"), 0, (0)), 100000000, 0, -2244), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2243)], (0)), 100000000, 0, -2242), 0), 100000000, 0, -2241), 0, (("src/signatures.mli", 834, 32818, 32820), ("src/signatures.mli", 834, 32818, 32871), 0), 0, Tag1 ("Signatures", 301)), 0); (("module_name_of_pathname", 1995), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1942)), "t"), 0, (0)), 100000000, 0, -2240), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2239), 0), 100000000, 0, -2238), 0, (("src/signatures.mli", 838, 33024, 33026), ("src/signatures.mli", 838, 33024, 33076), 0), 0, Tag1 ("Signatures", 302)), 0); (("mv", 1996), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1942)), "t"), 0, (0)), 100000000, 0, -2237), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1942)), "t"), 0, (0)), 100000000, 0, -2236), (Tag3 (Tag1 ((("Command", 1944)), "t"), 0, (0)), 100000000, 0, -2235), 0), 100000000, 0, -2234), 0), 100000000, 0, -2233), 0, (("src/signatures.mli", 841, 33108, 33110), ("src/signatures.mli", 841, 33108, 33156), 0), 0, Tag1 ("Signatures", 303)), 0); (("cp", 1997), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1942)), "t"), 0, (0)), 100000000, 0, -2232), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1942)), "t"), 0, (0)), 100000000, 0, -2231), (Tag3 (Tag1 ((("Command", 1944)), "t"), 0, (0)), 100000000, 0, -2230), 0), 100000000, 0, -2229), 0), 100000000, 0, -2228), 0, (("src/signatures.mli", 844, 33188, 33190), ("src/signatures.mli", 844, 33188, 33236), 0), 0, Tag1 ("Signatures", 304)), 0); (("ln_f", 1998), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1942)), "t"), 0, (0)), 100000000, 0, -2227), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1942)), "t"), 0, (0)), 100000000, 0, -2226), (Tag3 (Tag1 ((("Command", 1944)), "t"), 0, (0)), 100000000, 0, -2225), 0), 100000000, 0, -2224), 0), 100000000, 0, -2223), 0, (("src/signatures.mli", 847, 33271, 33273), ("src/signatures.mli", 847, 33271, 33321), 0), 0, Tag1 ("Signatures", 305)), 0); (("ln_s", 1999), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1942)), "t"), 0, (0)), 100000000, 0, -2222), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1942)), "t"), 0, (0)), 100000000, 0, -2221), (Tag3 (Tag1 ((("Command", 1944)), "t"), 0, (0)), 100000000, 0, -2220), 0), 100000000, 0, -2219), 0), 100000000, 0, -2218), 0, (("src/signatures.mli", 850, 33356, 33358), ("src/signatures.mli", 850, 33356, 33406), 0), 0, Tag1 ("Signatures", 306)), 0); (("rm_f", 2000), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1942)), "t"), 0, (0)), 100000000, 0, -2217), (Tag3 (Tag1 ((("Command", 1944)), "t"), 0, (0)), 100000000, 0, -2216), 0), 100000000, 0, -2215), 0, (("src/signatures.mli", 853, 33441, 33443), ("src/signatures.mli", 853, 33441, 33477), 0), 0, Tag1 ("Signatures", 307)), 0); (("chmod", 2001), ((Tag1 (0, (Tag3 (Tag1 ((("Command", 1944)), "spec"), 0, (0)), 100000000, 0, -2214), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1942)), "t"), 0, (0)), 100000000, 0, -2213), (Tag3 (Tag1 ((("Command", 1944)), "t"), 0, (0)), 100000000, 0, -2212), 0), 100000000, 0, -2211), 0), 100000000, 0, -2210), 0, (("src/signatures.mli", 856, 33532, 33534), ("src/signatures.mli", 856, 33532, 33585), 0), 0, Tag1 ("Signatures", 308)), 0); (("cmp", 2002), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1942)), "t"), 0, (0)), 100000000, 0, -2209), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1942)), "t"), 0, (0)), 100000000, 0, -2208), (Tag3 (Tag1 ((("Command", 1944)), "t"), 0, (0)), 100000000, 0, -2207), 0), 100000000, 0, -2206), 0), 100000000, 0, -2205), 0, (("src/signatures.mli", 859, 33638, 33640), ("src/signatures.mli", 859, 33638, 33687), 0), 0, Tag1 ("Signatures", 309)), 0); (("hide_package_contents", 2003), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2204), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2203), 0), 100000000, 0, -2202), 0, (("src/signatures.mli", 865, 33897, 33899), ("src/signatures.mli", 865, 33897, 33941), 0), 0, Tag1 ("Signatures", 310)), 0); (("tag_file", 2004), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1942)), "t"), 0, (0)), 100000000, 0, -2201), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Tags", 1943)), "elt"), 0, (0)), 100000000, 0, -2200)], (0)), 100000000, 0, -2199), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2198), 0), 100000000, 0, -2197), 0), 100000000, 0, -2196), 0, (("src/signatures.mli", 873, 34323, 34325), ("src/signatures.mli", 873, 34323, 34375), 0), 0, Tag1 ("Signatures", 311)), 0); (("tag_any", 2005), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Tags", 1943)), "elt"), 0, (0)), 100000000, 0, -2195)], (0)), 100000000, 0, -2194), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2193), 0), 100000000, 0, -2192), 0, (("src/signatures.mli", 876, 34439, 34441), ("src/signatures.mli", 876, 34439, 34476), 0), 0, Tag1 ("Signatures", 312)), 0); (("tags_of_pathname", 2006), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1942)), "t"), 0, (0)), 100000000, 0, -2191), (Tag3 (Tag1 ((("Tags", 1943)), "t"), 0, (0)), 100000000, 0, -2190), 0), 100000000, 0, -2189), 0, (("src/signatures.mli", 879, 34547, 34549), ("src/signatures.mli", 879, 34547, 34592), 0), 0, Tag1 ("Signatures", 313)), 0); (("run_and_read", 2007), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2188), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2187), 0), 100000000, 0, -2186), 0, (("src/signatures.mli", 882, 34662, 34664), ("src/signatures.mli", 882, 34662, 34699), 0), 0, Tag1 ("Signatures", 314)), 0); Tag1 (("hook", 2008), (0, 0, Tag1 ([(("Before_hygiene", 1413), (0), 0, (("src/signatures.mli", 888, 34903, 34907), ("src/signatures.mli", 888, 34903, 34923), 0), 0, Tag1 ("Signatures", 316)); (("After_hygiene", 1414), (0), 0, (("src/signatures.mli", 889, 34924, 34928), ("src/signatures.mli", 889, 34924, 34943), 0), 0, Tag1 ("Signatures", 317)); (("Before_options", 1415), (0), 0, (("src/signatures.mli", 890, 34944, 34948), ("src/signatures.mli", 890, 34944, 34964), 0), 0, Tag1 ("Signatures", 318)); (("After_options", 1416), (0), 0, (("src/signatures.mli", 891, 34965, 34969), ("src/signatures.mli", 891, 34965, 34984), 0), 0, Tag1 ("Signatures", 319)); (("Before_rules", 1417), (0), 0, (("src/signatures.mli", 892, 34985, 34989), ("src/signatures.mli", 892, 34985, 35003), 0), 0, Tag1 ("Signatures", 320)); (("After_rules", 1418), (0), 0, (("src/signatures.mli", 893, 35004, 35008), ("src/signatures.mli", 893, 35004, 35021), 0), 0, Tag1 ("Signatures", 321))], 0), 1, 0, 0, 0, 0, 0, (("src/signatures.mli", 887, 34889, 34891), ("src/signatures.mli", 893, 35004, 35021), 0), 0, 1, 0, Tag1 ("Signatures", 315)), 1, 0); (("dispatch", 2009), ((Tag1 (0, (Tag1 (0, (Tag3 ((("hook", 2008)), 0, (0)), 100000000, 0, -2185), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2184), 0), 100000000, 0, -2183), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2182), 0), 100000000, 0, -2181), 0, (("src/signatures.mli", 898, 35202, 35204), ("src/signatures.mli", 898, 35202, 35241), 0), 0, Tag1 ("Signatures", 322)), 0)])), 0, (("src/signatures.mli", 539, 20410, 20410), ("src/signatures.mli", 899, 35242, 35245), 0), Tag1 ("Signatures", 323)), 0)]), 0, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), Tag1 ("", 3)), 0, 0); Tag3 (("My_std", 1450), 0, (Tag1 ([Tag2 (("Exit_OK", 2137), ((Tag3 ("exn", 7)), 0, (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("My_std", 0)), 2, 0); Tag2 (("Exit_usage", 2138), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3222)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("My_std", 1)), 2, 0); Tag2 (("Exit_system_error", 2139), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3221)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("My_std", 2)), 2, 0); Tag2 (("Exit_with_code", 2140), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3220)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("My_std", 3)), 2, 0); Tag2 (("Exit_silently_with_code", 2141), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3219)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("My_std", 4)), 2, 0); Tag3 (("Outcome", 2142), 0, ((Tag1 ((("Signatures", 1449)), "OUTCOME")), 0, (("src/my_std.mli", 26, 1170, 1170), ("src/my_std.mli", 26, 1170, 1205), 0), Tag1 ("My_std", 5)), 0, 0); (("ksbprintf", 2143), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3218), ((("a")), 100000000, 0, -3216), 0), 100000000, 0, -3217), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format4"), [((("b")), 100000000, 0, -3212); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -3214); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3215); ((("a")), 100000000, 0, -3216)], (0)), 100000000, 0, -3213), ((("b")), 100000000, 0, -3212), 0), 100000000, 0, -3211), 0), 100000000, 0, -3210), 0, (("src/my_std.mli", 28, 1207, 1207), ("src/my_std.mli", 28, 1207, 1287), 0), 0, Tag1 ("My_std", 6)), 0); (("sbprintf", 2144), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format4"), [((("a")), 100000000, 0, -3205); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -3207); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3208); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3209)], (0)), 100000000, 0, -3206), ((("a")), 100000000, 0, -3205), 0), 100000000, 0, -3204), 0, (("src/my_std.mli", 29, 1288, 1288), ("src/my_std.mli", 29, 1288, 1353), 0), 0, Tag1 ("My_std", 7)), 0); Tag3 (("Set", 2145), 0, (Tag1 ([Tag4 (("OrderedTypePrintable", 2179), (((Tag1 ((("Signatures", 1449)), "OrderedTypePrintable"))), 0, (("src/my_std.mli", 32, 1372, 1374), ("src/my_std.mli", 32, 1372, 1440), 0), Tag1 ("My_std", 8)), 0); Tag4 (("S", 2180), (((Tag1 ((("Signatures", 1449)), "SET"))), 0, (("src/my_std.mli", 33, 1441, 1443), ("src/my_std.mli", 33, 1441, 1473), 0), Tag1 ("My_std", 9)), 0); Tag3 (("Make", 2181), 0, (Tag2 (((("M", 2182)), ((("OrderedTypePrintable", 2179)))), Tag1 ([Tag1 (("elt", 2183), (0, 0, 0, 1, ((Tag3 (Tag1 ((("M", 2182)), "t"), 0, (0)), 100000000, 0, -3461)), 0, 0, 0, 0, (("src/my_std.mli", 34, 1474, 1524), ("src/my_std.mli", 34, 1474, 1538), 0), 0, 0, 0, Tag1 ("My_std", 11)), 1, 0); Tag1 (("t", 2184), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("set.mli", 74, 2901, 2905), ("set.mli", 74, 2901, 2911), 0), 0, 0, 0, Tag1 ("Stdlib__Set", 4)), 1, 0); (("empty", 2185), ((Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3460), 0, (("set.mli", 77, 2942, 2946), ("set.mli", 77, 2942, 2958), 0), 0, Tag1 ("Stdlib__Set", 5)), 0); (("add", 2186), ((Tag1 (0, (Tag3 ((("elt", 2183)), 0, (0)), 100000000, 0, -3459), (Tag1 (0, (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3458), (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3457), 0), 100000000, 0, -3456), 0), 100000000, 0, -3455), 0, (("set.mli", 80, 2986, 2990), ("set.mli", 80, 2986, 3012), 0), 0, Tag1 ("Stdlib__Set", 6)), 0); (("singleton", 2187), ((Tag1 (0, (Tag3 ((("elt", 2183)), 0, (0)), 100000000, 0, -3454), (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3453), 0), 100000000, 0, -3452), 0, (("set.mli", 86, 3278, 3282), ("set.mli", 86, 3278, 3305), 0), 0, Tag1 ("Stdlib__Set", 7)), 0); (("remove", 2188), ((Tag1 (0, (Tag3 ((("elt", 2183)), 0, (0)), 100000000, 0, -3451), (Tag1 (0, (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3450), (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3449), 0), 100000000, 0, -3448), 0), 100000000, 0, -3447), 0, (("set.mli", 89, 3381, 3385), ("set.mli", 89, 3381, 3410), 0), 0, Tag1 ("Stdlib__Set", 8)), 0); (("union", 2189), ((Tag1 (0, (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3446), (Tag1 (0, (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3445), (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3444), 0), 100000000, 0, -3443), 0), 100000000, 0, -3442), 0, (("set.mli", 95, 3677, 3681), ("set.mli", 95, 3677, 3703), 0), 0, Tag1 ("Stdlib__Set", 9)), 0); (("inter", 2190), ((Tag1 (0, (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3441), (Tag1 (0, (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3440), (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3439), 0), 100000000, 0, -3438), 0), 100000000, 0, -3437), 0, (("set.mli", 98, 3727, 3731), ("set.mli", 98, 3727, 3753), 0), 0, Tag1 ("Stdlib__Set", 10)), 0); (("disjoint", 2191), ((Tag1 (0, (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3436), (Tag1 (0, (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3435), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3434), 0), 100000000, 0, -3433), 0), 100000000, 0, -3432), 0, (("set.mli", 101, 3784, 3788), ("set.mli", 101, 3784, 3816), 0), 0, Tag1 ("Stdlib__Set", 11)), 0); (("diff", 2192), ((Tag1 (0, (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3431), (Tag1 (0, (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3430), (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3429), 0), 100000000, 0, -3428), 0), 100000000, 0, -3427), 0, (("set.mli", 105, 3880, 3884), ("set.mli", 105, 3880, 3905), 0), 0, Tag1 ("Stdlib__Set", 12)), 0); (("cardinal", 2193), ((Tag1 (0, (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3426), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3425), 0), 100000000, 0, -3424), 0, (("set.mli", 109, 4007, 4011), ("set.mli", 109, 4007, 4033), 0), 0, Tag1 ("Stdlib__Set", 13)), 0); (("elements", 2194), ((Tag1 (0, (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3423), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 2183)), 0, (0)), 100000000, 0, -3422)], (0)), 100000000, 0, -3421), 0), 100000000, 0, -3420), 0, (("set.mli", 114, 4120, 4124), ("set.mli", 114, 4120, 4151), 0), 0, Tag1 ("Stdlib__Set", 14)), 0); (("min_elt", 2195), ((Tag1 (0, (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3419), (Tag3 ((("elt", 2183)), 0, (0)), 100000000, 0, -3418), 0), 100000000, 0, -3417), 0, (("set.mli", 120, 4380, 4384), ("set.mli", 120, 4380, 4405), 0), 0, Tag1 ("Stdlib__Set", 15)), 0); (("min_elt_opt", 2196), ((Tag1 (0, (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3416), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2183)), 0, (0)), 100000000, 0, -3415)], (0)), 100000000, 0, -3414), 0), 100000000, 0, -3413), 0, (("set.mli", 125, 4567, 4571), ("set.mli", 125, 4567, 4603), 0), 0, Tag1 ("Stdlib__Set", 16)), 0); (("max_elt", 2197), ((Tag1 (0, (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3412), (Tag3 ((("elt", 2183)), 0, (0)), 100000000, 0, -3411), 0), 100000000, 0, -3410), 0, (("set.mli", 131, 4774, 4778), ("set.mli", 131, 4774, 4799), 0), 0, Tag1 ("Stdlib__Set", 17)), 0); (("max_elt_opt", 2198), ((Tag1 (0, (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3409), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2183)), 0, (0)), 100000000, 0, -3408)], (0)), 100000000, 0, -3407), 0), 100000000, 0, -3406), 0, (("set.mli", 135, 4890, 4894), ("set.mli", 135, 4890, 4926), 0), 0, Tag1 ("Stdlib__Set", 18)), 0); (("choose", 2199), ((Tag1 (0, (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3405), (Tag3 ((("elt", 2183)), 0, (0)), 100000000, 0, -3404), 0), 100000000, 0, -3403), 0, (("set.mli", 140, 5041, 5045), ("set.mli", 140, 5041, 5065), 0), 0, Tag1 ("Stdlib__Set", 19)), 0); (("choose_opt", 2200), ((Tag1 (0, (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3402), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2183)), 0, (0)), 100000000, 0, -3401)], (0)), 100000000, 0, -3400), 0), 100000000, 0, -3399), 0, (("set.mli", 145, 5263, 5267), ("set.mli", 145, 5263, 5298), 0), 0, Tag1 ("Stdlib__Set", 20)), 0); (("find", 2201), ((Tag1 (0, (Tag3 ((("elt", 2183)), 0, (0)), 100000000, 0, -3398), (Tag1 (0, (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3397), (Tag3 ((("elt", 2183)), 0, (0)), 100000000, 0, -3396), 0), 100000000, 0, -3395), 0), 100000000, 0, -3394), 0, (("set.mli", 153, 5541, 5549), ("set.mli", 153, 5541, 5574), 0), 0, Tag1 ("Stdlib__Set", 21)), 0); (("find_opt", 2202), ((Tag1 (0, (Tag3 ((("elt", 2183)), 0, (0)), 100000000, 0, -3393), (Tag1 (0, (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3392), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2183)), 0, (0)), 100000000, 0, -3391)], (0)), 100000000, 0, -3390), 0), 100000000, 0, -3389), 0), 100000000, 0, -3388), 0, (("set.mli", 159, 5752, 5756), ("set.mli", 159, 5752, 5792), 0), 0, Tag1 ("Stdlib__Set", 22)), 0); (("find_first", 2203), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2183)), 0, (0)), 100000000, 0, -3387), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3386), 0), 100000000, 0, -3385), (Tag1 (0, (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3384), (Tag3 ((("elt", 2183)), 0, (0)), 100000000, 0, -3383), 0), 100000000, 0, -3382), 0), 100000000, 0, -3381), 0, (("set.mli", 165, 5963, 5967), ("set.mli", 165, 5963, 6008), 0), 0, Tag1 ("Stdlib__Set", 23)), 0); (("find_first_opt", 2204), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2183)), 0, (0)), 100000000, 0, -3380), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3379), 0), 100000000, 0, -3378), (Tag1 (0, (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3377), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2183)), 0, (0)), 100000000, 0, -3376)], (0)), 100000000, 0, -3375), 0), 100000000, 0, -3374), 0), 100000000, 0, -3373), 0, (("set.mli", 177, 6482, 6486), ("set.mli", 177, 6482, 6538), 0), 0, Tag1 ("Stdlib__Set", 24)), 0); (("find_last", 2205), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2183)), 0, (0)), 100000000, 0, -3372), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3371), 0), 100000000, 0, -3370), (Tag1 (0, (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3369), (Tag3 ((("elt", 2183)), 0, (0)), 100000000, 0, -3368), 0), 100000000, 0, -3367), 0), 100000000, 0, -3366), 0, (("set.mli", 184, 6779, 6783), ("set.mli", 184, 6779, 6823), 0), 0, Tag1 ("Stdlib__Set", 25)), 0); (("find_last_opt", 2206), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2183)), 0, (0)), 100000000, 0, -3365), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3364), 0), 100000000, 0, -3363), (Tag1 (0, (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3362), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2183)), 0, (0)), 100000000, 0, -3361)], (0)), 100000000, 0, -3360), 0), 100000000, 0, -3359), 0), 100000000, 0, -3358), 0, (("set.mli", 190, 7044, 7048), ("set.mli", 190, 7044, 7099), 0), 0, Tag1 ("Stdlib__Set", 26)), 0); (("iter", 2207), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2183)), 0, (0)), 100000000, 0, -3357), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3356), 0), 100000000, 0, -3355), (Tag1 (0, (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3354), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3353), 0), 100000000, 0, -3352), 0), 100000000, 0, -3351), 0, (("set.mli", 198, 7371, 7375), ("set.mli", 198, 7371, 7411), 0), 0, Tag1 ("Stdlib__Set", 27)), 0); (("fold", 2208), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2183)), 0, (0)), 100000000, 0, -3350), (Tag1 (0, ((("acc")), 100000000, 0, -3346), ((("acc")), 100000000, 0, -3346), 0), 100000000, 0, -3349), 0), 100000000, 0, -3348), (Tag1 (0, (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3347), (Tag1 (0, ((("acc")), 100000000, 0, -3346), ((("acc")), 100000000, 0, -3346), 0), 100000000, 0, -3345), 0), 100000000, 0, -3344), 0), 100000000, 0, -3343), 0, (("set.mli", 203, 7616, 7620), ("set.mli", 203, 7616, 7672), 0), 0, Tag1 ("Stdlib__Set", 28)), 0); (("filter", 2209), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2183)), 0, (0)), 100000000, 0, -3342), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3341), 0), 100000000, 0, -3340), (Tag1 (0, (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3339), (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3338), 0), 100000000, 0, -3337), 0), 100000000, 0, -3336), 0, (("set.mli", 221, 8372, 8376), ("set.mli", 221, 8372, 8411), 0), 0, Tag1 ("Stdlib__Set", 30)), 0); (("filter_map", 2210), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2183)), 0, (0)), 100000000, 0, -3335), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2183)), 0, (0)), 100000000, 0, -3334)], (0)), 100000000, 0, -3333), 0), 100000000, 0, -3332), (Tag1 (0, (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3331), (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3330), 0), 100000000, 0, -3329), 0), 100000000, 0, -3328), 0, (("set.mli", 228, 8710, 8714), ("set.mli", 228, 8710, 8759), 0), 0, Tag1 ("Stdlib__Set", 31)), 0); (("partition", 2211), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2183)), 0, (0)), 100000000, 0, -3327), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3326), 0), 100000000, 0, -3325), (Tag1 (0, (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3324), (Tag2 ([(Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3322); (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3323)]), 100000000, 0, -3321), 0), 100000000, 0, -3320), 0), 100000000, 0, -3319), 0, (("set.mli", 243, 9275, 9279), ("set.mli", 243, 9275, 9321), 0), 0, Tag1 ("Stdlib__Set", 32)), 0); (("split", 2212), ((Tag1 (0, (Tag3 ((("elt", 2183)), 0, (0)), 100000000, 0, -3318), (Tag1 (0, (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3317), (Tag2 ([(Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3314); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3315); (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3316)]), 100000000, 0, -3313), 0), 100000000, 0, -3312), 0), 100000000, 0, -3311), 0, (("set.mli", 249, 9562, 9566), ("set.mli", 249, 9562, 9601), 0), 0, Tag1 ("Stdlib__Set", 33)), 0); (("is_empty", 2213), ((Tag1 (0, (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3310), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3309), 0), 100000000, 0, -3308), 0, (("set.mli", 260, 10020, 10024), ("set.mli", 260, 10020, 10047), 0), 0, Tag1 ("Stdlib__Set", 34)), 0); (("mem", 2214), ((Tag1 (0, (Tag3 ((("elt", 2183)), 0, (0)), 100000000, 0, -3307), (Tag1 (0, (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3306), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3305), 0), 100000000, 0, -3304), 0), 100000000, 0, -3303), 0, (("set.mli", 263, 10096, 10100), ("set.mli", 263, 10096, 10125), 0), 0, Tag1 ("Stdlib__Set", 35)), 0); (("equal", 2215), ((Tag1 (0, (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3302), (Tag1 (0, (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3301), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3300), 0), 100000000, 0, -3299), 0), 100000000, 0, -3298), 0, (("set.mli", 266, 10190, 10194), ("set.mli", 266, 10190, 10219), 0), 0, Tag1 ("Stdlib__Set", 36)), 0); (("compare", 2216), ((Tag1 (0, (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3297), (Tag1 (0, (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3296), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3295), 0), 100000000, 0, -3294), 0), 100000000, 0, -3293), 0, (("set.mli", 270, 10335, 10339), ("set.mli", 270, 10335, 10365), 0), 0, Tag1 ("Stdlib__Set", 37)), 0); (("subset", 2217), ((Tag1 (0, (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3292), (Tag1 (0, (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3291), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3290), 0), 100000000, 0, -3289), 0), 100000000, 0, -3288), 0, (("set.mli", 274, 10476, 10480), ("set.mli", 274, 10476, 10506), 0), 0, Tag1 ("Stdlib__Set", 38)), 0); (("for_all", 2218), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2183)), 0, (0)), 100000000, 0, -3287), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3286), 0), 100000000, 0, -3285), (Tag1 (0, (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3284), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3283), 0), 100000000, 0, -3282), 0), 100000000, 0, -3281), 0, (("set.mli", 278, 10598, 10602), ("set.mli", 278, 10598, 10641), 0), 0, Tag1 ("Stdlib__Set", 39)), 0); (("exists", 2219), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2183)), 0, (0)), 100000000, 0, -3280), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3279), 0), 100000000, 0, -3278), (Tag1 (0, (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3277), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3276), 0), 100000000, 0, -3275), 0), 100000000, 0, -3274), 0, (("set.mli", 282, 10737, 10741), ("set.mli", 282, 10737, 10779), 0), 0, Tag1 ("Stdlib__Set", 40)), 0); (("to_list", 2220), ((Tag1 (0, (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3273), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 2183)), 0, (0)), 100000000, 0, -3272)], (0)), 100000000, 0, -3271), 0), 100000000, 0, -3270), 0, (("set.mli", 288, 10922, 10926), ("set.mli", 288, 10922, 10953), 0), 0, Tag1 ("Stdlib__Set", 41)), 0); (("to_seq_from", 2221), ((Tag1 (0, (Tag3 ((("elt", 2183)), 0, (0)), 100000000, 0, -3269), (Tag1 (0, (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3268), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2183)), 0, (0)), 100000000, 0, -3267)], (0)), 100000000, 0, -3266), 0), 100000000, 0, -3265), 0), 100000000, 0, -3264), 0, (("set.mli", 298, 11268, 11272), ("set.mli", 298, 11268, 11311), 0), 0, Tag1 ("Stdlib__Set", 43)), 0); (("to_seq", 2222), ((Tag1 (0, (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3263), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2183)), 0, (0)), 100000000, 0, -3262)], (0)), 100000000, 0, -3261), 0), 100000000, 0, -3260), 0, (("set.mli", 303, 11453, 11457), ("set.mli", 303, 11453, 11484), 0), 0, Tag1 ("Stdlib__Set", 44)), 0); (("to_rev_seq", 2223), ((Tag1 (0, (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3259), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2183)), 0, (0)), 100000000, 0, -3258)], (0)), 100000000, 0, -3257), 0), 100000000, 0, -3256), 0, (("set.mli", 307, 11562, 11566), ("set.mli", 307, 11562, 11597), 0), 0, Tag1 ("Stdlib__Set", 45)), 0); (("add_seq", 2224), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2183)), 0, (0)), 100000000, 0, -3255)], (0)), 100000000, 0, -3254), (Tag1 (0, (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3253), (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3252), 0), 100000000, 0, -3251), 0), 100000000, 0, -3250), 0, (("set.mli", 311, 11676, 11680), ("set.mli", 311, 11676, 11713), 0), 0, Tag1 ("Stdlib__Set", 46)), 0); (("of_seq", 2225), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2183)), 0, (0)), 100000000, 0, -3249)], (0)), 100000000, 0, -3248), (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3247), 0), 100000000, 0, -3246), 0, (("set.mli", 315, 11791, 11795), ("set.mli", 315, 11791, 11822), 0), 0, Tag1 ("Stdlib__Set", 47)), 0); (("find_elt", 2226), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2183)), 0, (0)), 100000000, 0, -3245), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3244), 0), 100000000, 0, -3243), (Tag1 (0, (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3242), (Tag3 ((("elt", 2183)), 0, (0)), 100000000, 0, -3241), 0), 100000000, 0, -3240), 0), 100000000, 0, -3239), 0, (("src/signatures.mli", 27, 1206, 1208), ("src/signatures.mli", 27, 1206, 1248), 0), 0, Tag1 ("Signatures", 4)), 0); (("map", 2227), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2183)), 0, (0)), 100000000, 0, -3238), (Tag3 ((("elt", 2183)), 0, (0)), 100000000, 0, -3237), 0), 100000000, 0, -3236), (Tag1 (0, (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3235), (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3234), 0), 100000000, 0, -3233), 0), 100000000, 0, -3232), 0, (("src/signatures.mli", 28, 1249, 1251), ("src/signatures.mli", 28, 1249, 1283), 0), 0, Tag1 ("Signatures", 5)), 0); (("of_list", 2228), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 2183)), 0, (0)), 100000000, 0, -3231)], (0)), 100000000, 0, -3230), (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3229), 0), 100000000, 0, -3228), 0, (("src/signatures.mli", 29, 1284, 1286), ("src/signatures.mli", 29, 1284, 1313), 0), 0, Tag1 ("Signatures", 6)), 0); (("print", 2229), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -3227), (Tag1 (0, (Tag3 ((("t", 2184)), 0, (0)), 100000000, 0, -3226), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3225), 0), 100000000, 0, -3224), 0), 100000000, 0, -3223), 0, (("src/signatures.mli", 30, 1314, 1316), ("src/signatures.mli", 30, 1314, 1357), 0), 0, Tag1 ("Signatures", 7)), 0)])), 0, (("src/my_std.mli", 34, 1474, 1476), ("src/my_std.mli", 34, 1474, 1538), 0), Tag1 ("My_std", 12)), 0, 0)]), 0, (("src/my_std.mli", 31, 1355, 1355), ("src/my_std.mli", 35, 1539, 1542), 0), Tag1 ("My_std", 13)), 0, 0); Tag3 (("List", 2146), 0, ((Tag1 ((("Signatures", 1449)), "LIST")), 0, (("src/my_std.mli", 37, 1544, 1544), ("src/my_std.mli", 37, 1544, 1573), 0), Tag1 ("My_std", 14)), 0, 0); Tag3 (("String", 2147), 0, ((Tag1 ((("Signatures", 1449)), "STRING")), 0, (("src/my_std.mli", 39, 1575, 1575), ("src/my_std.mli", 39, 1575, 1608), 0), Tag1 ("My_std", 15)), 0, 0); Tag3 (("Digest", 2148), 0, (Tag1 ([Tag1 (("t", 2230), (0, 0, 0, 1, ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3491)), 0, 0, 0, 0, (("src/my_std.mli", 42, 1630, 1632), ("src/my_std.mli", 42, 1630, 1647), 0), 0, 0, 0, Tag1 ("My_std", 16)), 1, 0); (("string", 2231), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3490), (Tag3 ((("t", 2230)), 0, (0)), 100000000, 0, -3489), 0), 100000000, 0, -3488), 0, (("src/my_std.mli", 43, 1648, 1650), ("src/my_std.mli", 43, 1648, 1674), 0), 0, Tag1 ("My_std", 17)), 0); (("substring", 2232), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3487), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3486), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3485), (Tag3 ((("t", 2230)), 0, (0)), 100000000, 0, -3484), 0), 100000000, 0, -3483), 0), 100000000, 0, -3482), 0), 100000000, 0, -3481), 0, (("src/my_std.mli", 44, 1675, 1677), ("src/my_std.mli", 44, 1675, 1718), 0), 0, Tag1 ("My_std", 18)), 0); (("channel", 2233), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "in_channel"), 0, (0)), 100000000, 0, -3480), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3479), (Tag3 ((("t", 2230)), 0, (0)), 100000000, 0, -3478), 0), 100000000, 0, -3477), 0), 100000000, 0, -3476), (("caml_md5_chan", 2, 1, "", [0; 0], 0)), (("src/my_std.mli", 45, 1719, 1721), ("src/my_std.mli", 45, 1719, 1780), 0), 0, Tag1 ("My_std", 19)), 0); (("file", 2234), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3475), (Tag3 ((("t", 2230)), 0, (0)), 100000000, 0, -3474), 0), 100000000, 0, -3473), 0, (("src/my_std.mli", 46, 1781, 1783), ("src/my_std.mli", 46, 1781, 1805), 0), 0, Tag1 ("My_std", 20)), 0); (("output", 2235), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -3472), (Tag1 (0, (Tag3 ((("t", 2230)), 0, (0)), 100000000, 0, -3471), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3470), 0), 100000000, 0, -3469), 0), 100000000, 0, -3468), 0, (("src/my_std.mli", 47, 1806, 1808), ("src/my_std.mli", 47, 1806, 1845), 0), 0, Tag1 ("My_std", 21)), 0); (("input", 2236), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "in_channel"), 0, (0)), 100000000, 0, -3467), (Tag3 ((("t", 2230)), 0, (0)), 100000000, 0, -3466), 0), 100000000, 0, -3465), 0, (("src/my_std.mli", 48, 1846, 1848), ("src/my_std.mli", 48, 1846, 1875), 0), 0, Tag1 ("My_std", 22)), 0); (("to_hex", 2237), ((Tag1 (0, (Tag3 ((("t", 2230)), 0, (0)), 100000000, 0, -3464), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3463), 0), 100000000, 0, -3462), 0, (("src/my_std.mli", 49, 1876, 1878), ("src/my_std.mli", 49, 1876, 1902), 0), 0, Tag1 ("My_std", 23)), 0)]), 0, (("src/my_std.mli", 41, 1610, 1610), ("src/my_std.mli", 50, 1903, 1906), 0), Tag1 ("My_std", 24)), 0, 0); Tag3 (("StringSet", 2149), 0, (Tag1 ([Tag1 (("elt", 2238), (0, 0, 0, 1, ((Tag3 (Tag1 ((("String", 2147)), "t"), 0, (0)), 100000000, 0, -3730)), 0, 0, 0, 0, (("src/my_std.mli", 52, 1908, 1938), ("src/my_std.mli", 52, 1908, 1957), 0), 0, 0, 0, Tag1 ("My_std", 25)), 1, 0); Tag1 (("t", 2239), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("set.mli", 74, 2901, 2905), ("set.mli", 74, 2901, 2911), 0), 0, 0, 0, Tag1 ("Stdlib__Set", 4)), 1, 0); (("empty", 2240), ((Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3729), 0, (("set.mli", 77, 2942, 2946), ("set.mli", 77, 2942, 2958), 0), 0, Tag1 ("Stdlib__Set", 5)), 0); (("add", 2241), ((Tag1 (0, (Tag3 ((("elt", 2238)), 0, (0)), 100000000, 0, -3728), (Tag1 (0, (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3727), (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3726), 0), 100000000, 0, -3725), 0), 100000000, 0, -3724), 0, (("set.mli", 80, 2986, 2990), ("set.mli", 80, 2986, 3012), 0), 0, Tag1 ("Stdlib__Set", 6)), 0); (("singleton", 2242), ((Tag1 (0, (Tag3 ((("elt", 2238)), 0, (0)), 100000000, 0, -3723), (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3722), 0), 100000000, 0, -3721), 0, (("set.mli", 86, 3278, 3282), ("set.mli", 86, 3278, 3305), 0), 0, Tag1 ("Stdlib__Set", 7)), 0); (("remove", 2243), ((Tag1 (0, (Tag3 ((("elt", 2238)), 0, (0)), 100000000, 0, -3720), (Tag1 (0, (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3719), (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3718), 0), 100000000, 0, -3717), 0), 100000000, 0, -3716), 0, (("set.mli", 89, 3381, 3385), ("set.mli", 89, 3381, 3410), 0), 0, Tag1 ("Stdlib__Set", 8)), 0); (("union", 2244), ((Tag1 (0, (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3715), (Tag1 (0, (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3714), (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3713), 0), 100000000, 0, -3712), 0), 100000000, 0, -3711), 0, (("set.mli", 95, 3677, 3681), ("set.mli", 95, 3677, 3703), 0), 0, Tag1 ("Stdlib__Set", 9)), 0); (("inter", 2245), ((Tag1 (0, (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3710), (Tag1 (0, (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3709), (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3708), 0), 100000000, 0, -3707), 0), 100000000, 0, -3706), 0, (("set.mli", 98, 3727, 3731), ("set.mli", 98, 3727, 3753), 0), 0, Tag1 ("Stdlib__Set", 10)), 0); (("disjoint", 2246), ((Tag1 (0, (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3705), (Tag1 (0, (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3704), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3703), 0), 100000000, 0, -3702), 0), 100000000, 0, -3701), 0, (("set.mli", 101, 3784, 3788), ("set.mli", 101, 3784, 3816), 0), 0, Tag1 ("Stdlib__Set", 11)), 0); (("diff", 2247), ((Tag1 (0, (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3700), (Tag1 (0, (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3699), (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3698), 0), 100000000, 0, -3697), 0), 100000000, 0, -3696), 0, (("set.mli", 105, 3880, 3884), ("set.mli", 105, 3880, 3905), 0), 0, Tag1 ("Stdlib__Set", 12)), 0); (("cardinal", 2248), ((Tag1 (0, (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3695), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3694), 0), 100000000, 0, -3693), 0, (("set.mli", 109, 4007, 4011), ("set.mli", 109, 4007, 4033), 0), 0, Tag1 ("Stdlib__Set", 13)), 0); (("elements", 2249), ((Tag1 (0, (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3692), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 2238)), 0, (0)), 100000000, 0, -3691)], (0)), 100000000, 0, -3690), 0), 100000000, 0, -3689), 0, (("set.mli", 114, 4120, 4124), ("set.mli", 114, 4120, 4151), 0), 0, Tag1 ("Stdlib__Set", 14)), 0); (("min_elt", 2250), ((Tag1 (0, (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3688), (Tag3 ((("elt", 2238)), 0, (0)), 100000000, 0, -3687), 0), 100000000, 0, -3686), 0, (("set.mli", 120, 4380, 4384), ("set.mli", 120, 4380, 4405), 0), 0, Tag1 ("Stdlib__Set", 15)), 0); (("min_elt_opt", 2251), ((Tag1 (0, (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3685), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2238)), 0, (0)), 100000000, 0, -3684)], (0)), 100000000, 0, -3683), 0), 100000000, 0, -3682), 0, (("set.mli", 125, 4567, 4571), ("set.mli", 125, 4567, 4603), 0), 0, Tag1 ("Stdlib__Set", 16)), 0); (("max_elt", 2252), ((Tag1 (0, (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3681), (Tag3 ((("elt", 2238)), 0, (0)), 100000000, 0, -3680), 0), 100000000, 0, -3679), 0, (("set.mli", 131, 4774, 4778), ("set.mli", 131, 4774, 4799), 0), 0, Tag1 ("Stdlib__Set", 17)), 0); (("max_elt_opt", 2253), ((Tag1 (0, (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3678), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2238)), 0, (0)), 100000000, 0, -3677)], (0)), 100000000, 0, -3676), 0), 100000000, 0, -3675), 0, (("set.mli", 135, 4890, 4894), ("set.mli", 135, 4890, 4926), 0), 0, Tag1 ("Stdlib__Set", 18)), 0); (("choose", 2254), ((Tag1 (0, (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3674), (Tag3 ((("elt", 2238)), 0, (0)), 100000000, 0, -3673), 0), 100000000, 0, -3672), 0, (("set.mli", 140, 5041, 5045), ("set.mli", 140, 5041, 5065), 0), 0, Tag1 ("Stdlib__Set", 19)), 0); (("choose_opt", 2255), ((Tag1 (0, (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3671), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2238)), 0, (0)), 100000000, 0, -3670)], (0)), 100000000, 0, -3669), 0), 100000000, 0, -3668), 0, (("set.mli", 145, 5263, 5267), ("set.mli", 145, 5263, 5298), 0), 0, Tag1 ("Stdlib__Set", 20)), 0); (("find", 2256), ((Tag1 (0, (Tag3 ((("elt", 2238)), 0, (0)), 100000000, 0, -3667), (Tag1 (0, (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3666), (Tag3 ((("elt", 2238)), 0, (0)), 100000000, 0, -3665), 0), 100000000, 0, -3664), 0), 100000000, 0, -3663), 0, (("set.mli", 153, 5541, 5549), ("set.mli", 153, 5541, 5574), 0), 0, Tag1 ("Stdlib__Set", 21)), 0); (("find_opt", 2257), ((Tag1 (0, (Tag3 ((("elt", 2238)), 0, (0)), 100000000, 0, -3662), (Tag1 (0, (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3661), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2238)), 0, (0)), 100000000, 0, -3660)], (0)), 100000000, 0, -3659), 0), 100000000, 0, -3658), 0), 100000000, 0, -3657), 0, (("set.mli", 159, 5752, 5756), ("set.mli", 159, 5752, 5792), 0), 0, Tag1 ("Stdlib__Set", 22)), 0); (("find_first", 2258), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2238)), 0, (0)), 100000000, 0, -3656), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3655), 0), 100000000, 0, -3654), (Tag1 (0, (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3653), (Tag3 ((("elt", 2238)), 0, (0)), 100000000, 0, -3652), 0), 100000000, 0, -3651), 0), 100000000, 0, -3650), 0, (("set.mli", 165, 5963, 5967), ("set.mli", 165, 5963, 6008), 0), 0, Tag1 ("Stdlib__Set", 23)), 0); (("find_first_opt", 2259), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2238)), 0, (0)), 100000000, 0, -3649), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3648), 0), 100000000, 0, -3647), (Tag1 (0, (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3646), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2238)), 0, (0)), 100000000, 0, -3645)], (0)), 100000000, 0, -3644), 0), 100000000, 0, -3643), 0), 100000000, 0, -3642), 0, (("set.mli", 177, 6482, 6486), ("set.mli", 177, 6482, 6538), 0), 0, Tag1 ("Stdlib__Set", 24)), 0); (("find_last", 2260), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2238)), 0, (0)), 100000000, 0, -3641), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3640), 0), 100000000, 0, -3639), (Tag1 (0, (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3638), (Tag3 ((("elt", 2238)), 0, (0)), 100000000, 0, -3637), 0), 100000000, 0, -3636), 0), 100000000, 0, -3635), 0, (("set.mli", 184, 6779, 6783), ("set.mli", 184, 6779, 6823), 0), 0, Tag1 ("Stdlib__Set", 25)), 0); (("find_last_opt", 2261), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2238)), 0, (0)), 100000000, 0, -3634), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3633), 0), 100000000, 0, -3632), (Tag1 (0, (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3631), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2238)), 0, (0)), 100000000, 0, -3630)], (0)), 100000000, 0, -3629), 0), 100000000, 0, -3628), 0), 100000000, 0, -3627), 0, (("set.mli", 190, 7044, 7048), ("set.mli", 190, 7044, 7099), 0), 0, Tag1 ("Stdlib__Set", 26)), 0); (("iter", 2262), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2238)), 0, (0)), 100000000, 0, -3626), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3625), 0), 100000000, 0, -3624), (Tag1 (0, (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3623), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3622), 0), 100000000, 0, -3621), 0), 100000000, 0, -3620), 0, (("set.mli", 198, 7371, 7375), ("set.mli", 198, 7371, 7411), 0), 0, Tag1 ("Stdlib__Set", 27)), 0); (("fold", 2263), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2238)), 0, (0)), 100000000, 0, -3619), (Tag1 (0, ((("acc")), 100000000, 0, -3615), ((("acc")), 100000000, 0, -3615), 0), 100000000, 0, -3618), 0), 100000000, 0, -3617), (Tag1 (0, (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3616), (Tag1 (0, ((("acc")), 100000000, 0, -3615), ((("acc")), 100000000, 0, -3615), 0), 100000000, 0, -3614), 0), 100000000, 0, -3613), 0), 100000000, 0, -3612), 0, (("set.mli", 203, 7616, 7620), ("set.mli", 203, 7616, 7672), 0), 0, Tag1 ("Stdlib__Set", 28)), 0); (("filter", 2264), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2238)), 0, (0)), 100000000, 0, -3611), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3610), 0), 100000000, 0, -3609), (Tag1 (0, (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3608), (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3607), 0), 100000000, 0, -3606), 0), 100000000, 0, -3605), 0, (("set.mli", 221, 8372, 8376), ("set.mli", 221, 8372, 8411), 0), 0, Tag1 ("Stdlib__Set", 30)), 0); (("filter_map", 2265), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2238)), 0, (0)), 100000000, 0, -3604), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2238)), 0, (0)), 100000000, 0, -3603)], (0)), 100000000, 0, -3602), 0), 100000000, 0, -3601), (Tag1 (0, (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3600), (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3599), 0), 100000000, 0, -3598), 0), 100000000, 0, -3597), 0, (("set.mli", 228, 8710, 8714), ("set.mli", 228, 8710, 8759), 0), 0, Tag1 ("Stdlib__Set", 31)), 0); (("partition", 2266), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2238)), 0, (0)), 100000000, 0, -3596), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3595), 0), 100000000, 0, -3594), (Tag1 (0, (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3593), (Tag2 ([(Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3591); (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3592)]), 100000000, 0, -3590), 0), 100000000, 0, -3589), 0), 100000000, 0, -3588), 0, (("set.mli", 243, 9275, 9279), ("set.mli", 243, 9275, 9321), 0), 0, Tag1 ("Stdlib__Set", 32)), 0); (("split", 2267), ((Tag1 (0, (Tag3 ((("elt", 2238)), 0, (0)), 100000000, 0, -3587), (Tag1 (0, (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3586), (Tag2 ([(Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3583); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3584); (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3585)]), 100000000, 0, -3582), 0), 100000000, 0, -3581), 0), 100000000, 0, -3580), 0, (("set.mli", 249, 9562, 9566), ("set.mli", 249, 9562, 9601), 0), 0, Tag1 ("Stdlib__Set", 33)), 0); (("is_empty", 2268), ((Tag1 (0, (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3579), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3578), 0), 100000000, 0, -3577), 0, (("set.mli", 260, 10020, 10024), ("set.mli", 260, 10020, 10047), 0), 0, Tag1 ("Stdlib__Set", 34)), 0); (("mem", 2269), ((Tag1 (0, (Tag3 ((("elt", 2238)), 0, (0)), 100000000, 0, -3576), (Tag1 (0, (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3575), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3574), 0), 100000000, 0, -3573), 0), 100000000, 0, -3572), 0, (("set.mli", 263, 10096, 10100), ("set.mli", 263, 10096, 10125), 0), 0, Tag1 ("Stdlib__Set", 35)), 0); (("equal", 2270), ((Tag1 (0, (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3571), (Tag1 (0, (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3570), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3569), 0), 100000000, 0, -3568), 0), 100000000, 0, -3567), 0, (("set.mli", 266, 10190, 10194), ("set.mli", 266, 10190, 10219), 0), 0, Tag1 ("Stdlib__Set", 36)), 0); (("compare", 2271), ((Tag1 (0, (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3566), (Tag1 (0, (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3565), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3564), 0), 100000000, 0, -3563), 0), 100000000, 0, -3562), 0, (("set.mli", 270, 10335, 10339), ("set.mli", 270, 10335, 10365), 0), 0, Tag1 ("Stdlib__Set", 37)), 0); (("subset", 2272), ((Tag1 (0, (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3561), (Tag1 (0, (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3560), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3559), 0), 100000000, 0, -3558), 0), 100000000, 0, -3557), 0, (("set.mli", 274, 10476, 10480), ("set.mli", 274, 10476, 10506), 0), 0, Tag1 ("Stdlib__Set", 38)), 0); (("for_all", 2273), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2238)), 0, (0)), 100000000, 0, -3556), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3555), 0), 100000000, 0, -3554), (Tag1 (0, (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3553), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3552), 0), 100000000, 0, -3551), 0), 100000000, 0, -3550), 0, (("set.mli", 278, 10598, 10602), ("set.mli", 278, 10598, 10641), 0), 0, Tag1 ("Stdlib__Set", 39)), 0); (("exists", 2274), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2238)), 0, (0)), 100000000, 0, -3549), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3548), 0), 100000000, 0, -3547), (Tag1 (0, (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3546), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3545), 0), 100000000, 0, -3544), 0), 100000000, 0, -3543), 0, (("set.mli", 282, 10737, 10741), ("set.mli", 282, 10737, 10779), 0), 0, Tag1 ("Stdlib__Set", 40)), 0); (("to_list", 2275), ((Tag1 (0, (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3542), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 2238)), 0, (0)), 100000000, 0, -3541)], (0)), 100000000, 0, -3540), 0), 100000000, 0, -3539), 0, (("set.mli", 288, 10922, 10926), ("set.mli", 288, 10922, 10953), 0), 0, Tag1 ("Stdlib__Set", 41)), 0); (("to_seq_from", 2276), ((Tag1 (0, (Tag3 ((("elt", 2238)), 0, (0)), 100000000, 0, -3538), (Tag1 (0, (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3537), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2238)), 0, (0)), 100000000, 0, -3536)], (0)), 100000000, 0, -3535), 0), 100000000, 0, -3534), 0), 100000000, 0, -3533), 0, (("set.mli", 298, 11268, 11272), ("set.mli", 298, 11268, 11311), 0), 0, Tag1 ("Stdlib__Set", 43)), 0); (("to_seq", 2277), ((Tag1 (0, (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3532), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2238)), 0, (0)), 100000000, 0, -3531)], (0)), 100000000, 0, -3530), 0), 100000000, 0, -3529), 0, (("set.mli", 303, 11453, 11457), ("set.mli", 303, 11453, 11484), 0), 0, Tag1 ("Stdlib__Set", 44)), 0); (("to_rev_seq", 2278), ((Tag1 (0, (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3528), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2238)), 0, (0)), 100000000, 0, -3527)], (0)), 100000000, 0, -3526), 0), 100000000, 0, -3525), 0, (("set.mli", 307, 11562, 11566), ("set.mli", 307, 11562, 11597), 0), 0, Tag1 ("Stdlib__Set", 45)), 0); (("add_seq", 2279), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2238)), 0, (0)), 100000000, 0, -3524)], (0)), 100000000, 0, -3523), (Tag1 (0, (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3522), (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3521), 0), 100000000, 0, -3520), 0), 100000000, 0, -3519), 0, (("set.mli", 311, 11676, 11680), ("set.mli", 311, 11676, 11713), 0), 0, Tag1 ("Stdlib__Set", 46)), 0); (("of_seq", 2280), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2238)), 0, (0)), 100000000, 0, -3518)], (0)), 100000000, 0, -3517), (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3516), 0), 100000000, 0, -3515), 0, (("set.mli", 315, 11791, 11795), ("set.mli", 315, 11791, 11822), 0), 0, Tag1 ("Stdlib__Set", 47)), 0); (("find_elt", 2281), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2238)), 0, (0)), 100000000, 0, -3514), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3513), 0), 100000000, 0, -3512), (Tag1 (0, (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3511), (Tag3 ((("elt", 2238)), 0, (0)), 100000000, 0, -3510), 0), 100000000, 0, -3509), 0), 100000000, 0, -3508), 0, (("src/signatures.mli", 27, 1206, 1208), ("src/signatures.mli", 27, 1206, 1248), 0), 0, Tag1 ("Signatures", 4)), 0); (("map", 2282), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2238)), 0, (0)), 100000000, 0, -3507), (Tag3 ((("elt", 2238)), 0, (0)), 100000000, 0, -3506), 0), 100000000, 0, -3505), (Tag1 (0, (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3504), (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3503), 0), 100000000, 0, -3502), 0), 100000000, 0, -3501), 0, (("src/signatures.mli", 28, 1249, 1251), ("src/signatures.mli", 28, 1249, 1283), 0), 0, Tag1 ("Signatures", 5)), 0); (("of_list", 2283), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 2238)), 0, (0)), 100000000, 0, -3500)], (0)), 100000000, 0, -3499), (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3498), 0), 100000000, 0, -3497), 0, (("src/signatures.mli", 29, 1284, 1286), ("src/signatures.mli", 29, 1284, 1313), 0), 0, Tag1 ("Signatures", 6)), 0); (("print", 2284), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -3496), (Tag1 (0, (Tag3 ((("t", 2239)), 0, (0)), 100000000, 0, -3495), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3494), 0), 100000000, 0, -3493), 0), 100000000, 0, -3492), 0, (("src/signatures.mli", 30, 1314, 1316), ("src/signatures.mli", 30, 1314, 1357), 0), 0, Tag1 ("Signatures", 7)), 0)]), 0, (("src/my_std.mli", 52, 1908, 1908), ("src/my_std.mli", 52, 1908, 1957), 0), Tag1 ("My_std", 26)), 0, 0); (("sys_readdir", 2150), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3203), (Tag3 (Tag1 ((("Outcome", 2142)), "t"), [(Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3201)], (0)), 100000000, 0, -3200); (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -3202)], (0)), 100000000, 0, -3199), 0), 100000000, 0, -3198), 0, (("src/my_std.mli", 54, 1959, 1959), ("src/my_std.mli", 54, 1959, 2016), 0), 0, Tag1 ("My_std", 27)), 0); (("sys_remove", 2151), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3197), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3196), 0), 100000000, 0, -3195), 0, (("src/my_std.mli", 55, 2017, 2017), ("src/my_std.mli", 55, 2017, 2048), 0), 0, Tag1 ("My_std", 28)), 0); (("reset_readdir_cache", 2152), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3194), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3193), 0), 100000000, 0, -3192), 0, (("src/my_std.mli", 56, 2049, 2049), ("src/my_std.mli", 56, 2049, 2087), 0), 0, Tag1 ("My_std", 29)), 0); (("reset_filesys_cache", 2153), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3191), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3190), 0), 100000000, 0, -3189), 0, (("src/my_std.mli", 57, 2088, 2088), ("src/my_std.mli", 57, 2088, 2126), 0), 0, Tag1 ("My_std", 30)), 0); (("reset_filesys_cache_for_file", 2154), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3188), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3187), 0), 100000000, 0, -3186), 0, (("src/my_std.mli", 58, 2127, 2127), ("src/my_std.mli", 58, 2127, 2176), 0), 0, Tag1 ("My_std", 31)), 0); (("sys_file_exists", 2155), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3185), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3184), 0), 100000000, 0, -3183), 0, (("src/my_std.mli", 59, 2177, 2177), ("src/my_std.mli", 59, 2177, 2213), 0), 0, Tag1 ("My_std", 32)), 0); (("sys_command", 2156), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3182), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3181), 0), 100000000, 0, -3180), 0, (("src/my_std.mli", 60, 2214, 2214), ("src/my_std.mli", 60, 2214, 2245), 0), 0, Tag1 ("My_std", 33)), 0); (("filename_concat", 2157), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3179), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3178), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3177), 0), 100000000, 0, -3176), 0), 100000000, 0, -3175), 0, (("src/my_std.mli", 61, 2246, 2246), ("src/my_std.mli", 61, 2246, 2294), 0), 0, Tag1 ("My_std", 34)), 0); (("invalid_arg'", 2158), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format4"), [((("a")), 100000000, 0, -3170); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -3172); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3173); ((("b")), 100000000, 0, -3174)], (0)), 100000000, 0, -3171), ((("a")), 100000000, 0, -3170), 0), 100000000, 0, -3169), 0, (("src/my_std.mli", 63, 2296, 2296), ("src/my_std.mli", 63, 2296, 2361), 0), 0, Tag1 ("My_std", 35)), 0); (("opt_print", 2159), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -3168), (Tag1 (0, ((("a")), 100000000, 0, -3163), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3167), 0), 100000000, 0, -3166), 0), 100000000, 0, -3165), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -3164), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -3163)], (0)), 100000000, 0, -3162), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3161), 0), 100000000, 0, -3160), 0), 100000000, 0, -3159), 0), 100000000, 0, -3158), 0, (("src/signatures.mli", 341, 13837, 13839), ("src/signatures.mli", 342, 13855, 13932), 0), 0, Tag1 ("Signatures", 127)), 0); (("the", 2160), ((Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -3156)], (0)), 100000000, 0, -3157), ((("a")), 100000000, 0, -3156), 0), 100000000, 0, -3155), 0, (("src/signatures.mli", 343, 13933, 13935), ("src/signatures.mli", 343, 13933, 13960), 0), 0, Tag1 ("Signatures", 128)), 0); (("getenv", 2161), ((Tag1 (Tag1 ("default"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3154)], (0)), 100000000, 0, -3153), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3152), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3151), 0), 100000000, 0, -3150), 0), 100000000, 0, -3149), 0, (("src/signatures.mli", 344, 13961, 13963), ("src/signatures.mli", 344, 13961, 14011), 0), 0, Tag1 ("Signatures", 129)), 0); (("with_input_file", 2162), ((Tag1 (Tag1 ("bin"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3148)], (0)), 100000000, 0, -3147), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3146), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "in_channel"), 0, (0)), 100000000, 0, -3145), ((("a")), 100000000, 0, -3143), 0), 100000000, 0, -3144), ((("a")), 100000000, 0, -3143), 0), 100000000, 0, -3142), 0), 100000000, 0, -3141), 0), 100000000, 0, -3140), 0, (("src/signatures.mli", 345, 14012, 14014), ("src/signatures.mli", 345, 14012, 14083), 0), 0, Tag1 ("Signatures", 130)), 0); (("with_output_file", 2163), ((Tag1 (Tag1 ("bin"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3139)], (0)), 100000000, 0, -3138), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3137), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -3136), ((("a")), 100000000, 0, -3134), 0), 100000000, 0, -3135), ((("a")), 100000000, 0, -3134), 0), 100000000, 0, -3133), 0), 100000000, 0, -3132), 0), 100000000, 0, -3131), 0, (("src/signatures.mli", 346, 14084, 14086), ("src/signatures.mli", 346, 14084, 14157), 0), 0, Tag1 ("Signatures", 131)), 0); (("with_temp_file", 2164), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3130), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3129), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3128), ((("a")), 100000000, 0, -3126), 0), 100000000, 0, -3127), ((("a")), 100000000, 0, -3126), 0), 100000000, 0, -3125), 0), 100000000, 0, -3124), 0), 100000000, 0, -3123), 0, (("src/signatures.mli", 347, 14158, 14160), ("src/signatures.mli", 347, 14158, 14221), 0), 0, Tag1 ("Signatures", 132)), 0); (("read_file", 2165), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3122), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3121), 0), 100000000, 0, -3120), 0, (("src/signatures.mli", 348, 14222, 14224), ("src/signatures.mli", 348, 14222, 14256), 0), 0, Tag1 ("Signatures", 133)), 0); (("copy_chan", 2166), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "in_channel"), 0, (0)), 100000000, 0, -3119), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -3118), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3117), 0), 100000000, 0, -3116), 0), 100000000, 0, -3115), 0, (("src/signatures.mli", 349, 14257, 14259), ("src/signatures.mli", 349, 14257, 14308), 0), 0, Tag1 ("Signatures", 134)), 0); (("copy_file", 2167), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3114), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3113), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3112), 0), 100000000, 0, -3111), 0), 100000000, 0, -3110), 0, (("src/signatures.mli", 350, 14309, 14311), ("src/signatures.mli", 350, 14309, 14351), 0), 0, Tag1 ("Signatures", 135)), 0); (("print_string_list", 2168), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -3109), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3108)], (0)), 100000000, 0, -3107), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3106), 0), 100000000, 0, -3105), 0), 100000000, 0, -3104), 0, (("src/signatures.mli", 351, 14352, 14354), ("src/signatures.mli", 351, 14352, 14417), 0), 0, Tag1 ("Signatures", 136)), 0); (("!*", 2169), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lazy"), "t"), [((("a")), 100000000, 0, -3102)], (0)), 100000000, 0, -3103), ((("a")), 100000000, 0, -3102), 0), 100000000, 0, -3101), 0, (("src/signatures.mli", 354, 14479, 14481), ("src/signatures.mli", 354, 14479, 14509), 0), 0, Tag1 ("Signatures", 137)), 0); (("&", 2170), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -3099), ((("b")), 100000000, 0, -3098), 0), 100000000, 0, -3100), (Tag1 (0, ((("a")), 100000000, 0, -3099), ((("b")), 100000000, 0, -3098), 0), 100000000, 0, -3097), 0), 100000000, 0, -3096), 0, (("src/signatures.mli", 360, 14705, 14707), ("src/signatures.mli", 360, 14705, 14741), 0), 0, Tag1 ("Signatures", 138)), 0); (("|>", 2171), ((Tag1 (0, ((("a")), 100000000, 0, -3095), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -3095), ((("b")), 100000000, 0, -3093), 0), 100000000, 0, -3094), ((("b")), 100000000, 0, -3093), 0), 100000000, 0, -3092), 0), 100000000, 0, -3091), 0, (("src/signatures.mli", 365, 14903, 14905), ("src/signatures.mli", 365, 14903, 14940), 0), 0, Tag1 ("Signatures", 139)), 0); (("@:=", 2172), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -3088)], (0)), 100000000, 0, -3090)], (0)), 100000000, 0, -3089), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -3088)], (0)), 100000000, 0, -3087), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3086), 0), 100000000, 0, -3085), 0), 100000000, 0, -3084), 0, (("src/signatures.mli", 368, 14992, 14994), ("src/signatures.mli", 368, 14992, 15038), 0), 0, Tag1 ("Signatures", 140)), 0); (("memo", 2173), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -3082), ((("b")), 100000000, 0, -3081), 0), 100000000, 0, -3083), (Tag1 (0, ((("a")), 100000000, 0, -3082), ((("b")), 100000000, 0, -3081), 0), 100000000, 0, -3080), 0), 100000000, 0, -3079), 0, (("src/signatures.mli", 370, 15040, 15042), ("src/signatures.mli", 370, 15040, 15077), 0), 0, Tag1 ("Signatures", 141)), 0); (("memo2", 2174), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -3076), (Tag1 (0, ((("b")), 100000000, 0, -3075), ((("c")), 100000000, 0, -3074), 0), 100000000, 0, -3078), 0), 100000000, 0, -3077), (Tag1 (0, ((("a")), 100000000, 0, -3076), (Tag1 (0, ((("b")), 100000000, 0, -3075), ((("c")), 100000000, 0, -3074), 0), 100000000, 0, -3073), 0), 100000000, 0, -3072), 0), 100000000, 0, -3071), 0, (("src/signatures.mli", 372, 15079, 15081), ("src/signatures.mli", 372, 15079, 15129), 0), 0, Tag1 ("Signatures", 142)), 0); (("memo3", 2175), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -3067), (Tag1 (0, ((("b")), 100000000, 0, -3066), (Tag1 (0, ((("c")), 100000000, 0, -3065), ((("d")), 100000000, 0, -3064), 0), 100000000, 0, -3070), 0), 100000000, 0, -3069), 0), 100000000, 0, -3068), (Tag1 (0, ((("a")), 100000000, 0, -3067), (Tag1 (0, ((("b")), 100000000, 0, -3066), (Tag1 (0, ((("c")), 100000000, 0, -3065), ((("d")), 100000000, 0, -3064), 0), 100000000, 0, -3063), 0), 100000000, 0, -3062), 0), 100000000, 0, -3061), 0), 100000000, 0, -3060), 0, (("src/signatures.mli", 374, 15131, 15133), ("src/signatures.mli", 374, 15131, 15193), 0), 0, Tag1 ("Signatures", 143)), 0); (("set_lexbuf_fname", 2176), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3059), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -3058), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3057), 0), 100000000, 0, -3056), 0), 100000000, 0, -3055), 0, (("src/my_std.mli", 67, 2388, 2388), ("src/my_std.mli", 67, 2388, 2442), 0), 0, Tag1 ("My_std", 36)), 0); (("lexbuf_of_string", 2177), ((Tag1 (Tag1 ("name"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3054)], (0)), 100000000, 0, -3053), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3052), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -3051), 0), 100000000, 0, -3050), 0), 100000000, 0, -3049), 0, (("src/my_std.mli", 68, 2443, 2443), ("src/my_std.mli", 68, 2443, 2505), 0), 0, Tag1 ("My_std", 37)), 0); (("split_ocaml_version", 2178), ((Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3045); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3046); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3047); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3048)]), 100000000, 0, -3044)], (0)), 100000000, 0, -3043), 0, (("src/my_std.mli", 70, 2507, 2507), ("src/my_std.mli", 70, 2507, 2566), 0), 0, Tag1 ("My_std", 38)), 0)]), 0, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), Tag1 ("", 4)), 0, 0); Tag3 (("My_unix", 1451), 0, (Tag1 ([Tag1 (("file_kind", 2285), (0, 0, Tag1 ([(("FK_dir", 270), (0), 0, (("src/my_unix.mli", 17, 948, 948), ("src/my_unix.mli", 17, 948, 956), 0), 0, Tag1 ("My_unix", 1)); (("FK_file", 271), (0), 0, (("src/my_unix.mli", 18, 957, 957), ("src/my_unix.mli", 18, 957, 966), 0), 0, Tag1 ("My_unix", 2)); (("FK_link", 272), (0), 0, (("src/my_unix.mli", 19, 967, 967), ("src/my_unix.mli", 19, 967, 976), 0), 0, Tag1 ("My_unix", 3)); (("FK_other", 273), (0), 0, (("src/my_unix.mli", 20, 977, 977), ("src/my_unix.mli", 20, 977, 987), 0), 0, Tag1 ("My_unix", 4))], 0), 1, 0, 0, 0, 0, 0, (("src/my_unix.mli", 16, 931, 931), ("src/my_unix.mli", 20, 977, 987), 0), 0, 1, 0, Tag1 ("My_unix", 0)), 1, 0); Tag1 (("stats", 2286), (0, 0, [[(("stat_file_kind", 275), 0, (Tag3 ((("file_kind", 2285)), 0, (0)), 100000000, 0, -3865), (("src/my_unix.mli", 24, 1006, 1010), ("src/my_unix.mli", 24, 1006, 1037), 0), 0, Tag1 ("My_unix", 6)); (("stat_key", 276), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3866), (("src/my_unix.mli", 25, 1038, 1042), ("src/my_unix.mli", 25, 1038, 1065), 0), 0, Tag1 ("My_unix", 7))]], 1, 0, 0, 0, 0, 0, (("src/my_unix.mli", 22, 989, 989), ("src/my_unix.mli", 26, 1066, 1069), 0), 0, 0, 0, Tag1 ("My_unix", 5)), 1, 0); (("is_degraded", 2287), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lazy"), "t"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3864)], (0)), 100000000, 0, -3863), 0, (("src/my_unix.mli", 28, 1071, 1071), ("src/my_unix.mli", 28, 1071, 1100), 0), 0, Tag1 ("My_unix", 8)), 0); (("is_link", 2288), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3862), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3861), 0), 100000000, 0, -3860), 0, (("src/my_unix.mli", 30, 1102, 1102), ("src/my_unix.mli", 30, 1102, 1130), 0), 0, Tag1 ("My_unix", 9)), 0); (("run_and_open", 2289), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3859), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "in_channel"), 0, (0)), 100000000, 0, -3858), ((("a")), 100000000, 0, -3856), 0), 100000000, 0, -3857), ((("a")), 100000000, 0, -3856), 0), 100000000, 0, -3855), 0), 100000000, 0, -3854), 0, (("src/my_unix.mli", 31, 1131, 1131), ("src/my_unix.mli", 31, 1131, 1184), 0), 0, Tag1 ("My_unix", 10)), 0); (("readlink", 2290), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3853), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3852), 0), 100000000, 0, -3851), 0, (("src/my_unix.mli", 32, 1185, 1185), ("src/my_unix.mli", 32, 1185, 1216), 0), 0, Tag1 ("My_unix", 11)), 0); (("run_and_read", 2291), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3850), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3849), 0), 100000000, 0, -3848), 0, (("src/my_unix.mli", 33, 1217, 1217), ("src/my_unix.mli", 33, 1217, 1252), 0), 0, Tag1 ("My_unix", 12)), 0); (("execute_many", 2292), ((Tag1 (Tag1 ("max_jobs"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3847)], (0)), 100000000, 0, -3846), (Tag1 (Tag1 ("ticker"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3845), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3844), 0), 100000000, 0, -3843)], (0)), 100000000, 0, -3842), (Tag1 (Tag1 ("period"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -3841)], (0)), 100000000, 0, -3840), (Tag1 (Tag1 ("display"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -3839), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3838), 0), 100000000, 0, -3837), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3836), 0), 100000000, 0, -3835)], (0)), 100000000, 0, -3834), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("list", 9)), [(Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3833), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3832), 0), 100000000, 0, -3831)], (0)), 100000000, 0, -3830)], (0)), 100000000, 0, -3829), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3827)], (0)), 100000000, 0, -3826); (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -3828)]), 100000000, 0, -3825)], (0)), 100000000, 0, -3824), 0), 100000000, 0, -3823), 0), 100000000, 0, -3822), 0), 100000000, 0, -3821), 0), 100000000, 0, -3820), 0), 100000000, 0, -3819), 0, (("src/my_unix.mli", 36, 1295, 1295), ("src/my_unix.mli", 42, 1462, 1490), 0), 0, Tag1 ("My_unix", 13)), 0); (("report_error", 2293), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -3818), (Tag1 (0, (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -3817), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3816), 0), 100000000, 0, -3815), 0), 100000000, 0, -3814), 0, (("src/my_unix.mli", 44, 1492, 1492), ("src/my_unix.mli", 44, 1492, 1542), 0), 0, Tag1 ("My_unix", 14)), 0); (("at_exit_once", 2294), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3813), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3812), 0), 100000000, 0, -3811), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3810), 0), 100000000, 0, -3809), 0, (("src/my_unix.mli", 45, 1543, 1543), ("src/my_unix.mli", 45, 1543, 1584), 0), 0, Tag1 ("My_unix", 15)), 0); (("gettimeofday", 2295), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3808), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -3807), 0), 100000000, 0, -3806), 0, (("src/my_unix.mli", 47, 1586, 1586), ("src/my_unix.mli", 47, 1586, 1618), 0), 0, Tag1 ("My_unix", 16)), 0); (("stdout_isatty", 2296), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3805), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3804), 0), 100000000, 0, -3803), 0, (("src/my_unix.mli", 49, 1620, 1620), ("src/my_unix.mli", 49, 1620, 1652), 0), 0, Tag1 ("My_unix", 17)), 0); (("stat", 2297), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3802), (Tag3 ((("stats", 2286)), 0, (0)), 100000000, 0, -3801), 0), 100000000, 0, -3800), 0, (("src/my_unix.mli", 51, 1654, 1654), ("src/my_unix.mli", 51, 1654, 1680), 0), 0, Tag1 ("My_unix", 18)), 0); (("lstat", 2298), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3799), (Tag3 ((("stats", 2286)), 0, (0)), 100000000, 0, -3798), 0), 100000000, 0, -3797), 0, (("src/my_unix.mli", 52, 1681, 1681), ("src/my_unix.mli", 52, 1681, 1708), 0), 0, Tag1 ("My_unix", 19)), 0); Tag1 (("implem", 2299), (0, 0, [[(("is_degraded", 455), 1, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3732), (("src/my_unix.mli", 57, 1755, 1759), ("src/my_unix.mli", 57, 1755, 1788), 0), 0, Tag1 ("My_unix", 21)); (("is_link", 456), 1, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3735), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3734), 0), 100000000, 0, -3733), (("src/my_unix.mli", 58, 1789, 1793), ("src/my_unix.mli", 58, 1789, 1832), 0), 0, Tag1 ("My_unix", 22)); (("run_and_open", 457), 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3742), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "in_channel"), 0, (0)), 100000000, 0, -3741), (Tag9 (("a")), 100000000, 0, -3737), 0), 100000000, 0, -3740), (Tag9 (("a")), 100000000, 0, -3737), 0), 100000000, 0, -3739), 0), 100000000, 0, -3738), [(Tag9 (("a")), 100000000, 0, -3737)]), 100000000, 0, -3736), (("src/my_unix.mli", 59, 1833, 1837), ("src/my_unix.mli", 59, 1833, 1901), 0), 0, Tag1 ("My_unix", 23)); (("readlink", 458), 1, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3745), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3744), 0), 100000000, 0, -3743), (("src/my_unix.mli", 60, 1902, 1906), ("src/my_unix.mli", 60, 1902, 1947), 0), 0, Tag1 ("My_unix", 24)); (("execute_many", 459), 1, (Tag1 (Tag1 ("max_jobs"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3774)], (0)), 100000000, 0, -3773), (Tag1 (Tag1 ("ticker"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3772), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3771), 0), 100000000, 0, -3770)], (0)), 100000000, 0, -3769), (Tag1 (Tag1 ("period"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -3768)], (0)), 100000000, 0, -3767), (Tag1 (Tag1 ("display"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -3766), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3765), 0), 100000000, 0, -3764), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3763), 0), 100000000, 0, -3762)], (0)), 100000000, 0, -3761), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("list", 9)), [(Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3760), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3759), 0), 100000000, 0, -3758)], (0)), 100000000, 0, -3757)], (0)), 100000000, 0, -3756), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3754)], (0)), 100000000, 0, -3753); (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -3755)]), 100000000, 0, -3752)], (0)), 100000000, 0, -3751), 0), 100000000, 0, -3750), 0), 100000000, 0, -3749), 0), 100000000, 0, -3748), 0), 100000000, 0, -3747), 0), 100000000, 0, -3746), (("src/my_unix.mli", 61, 1948, 1952), ("src/my_unix.mli", 66, 2224, 2277), 0), 0, Tag1 ("My_unix", 25)); (("report_error", 460), 1, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -3779), (Tag1 (0, (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -3778), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3777), 0), 100000000, 0, -3776), 0), 100000000, 0, -3775), (("src/my_unix.mli", 67, 2278, 2282), ("src/my_unix.mli", 67, 2278, 2338), 0), 0, Tag1 ("My_unix", 26)); (("at_exit_once", 461), 1, (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3784), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3783), 0), 100000000, 0, -3782), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3781), 0), 100000000, 0, -3780), (("src/my_unix.mli", 68, 2339, 2343), ("src/my_unix.mli", 68, 2339, 2390), 0), 0, Tag1 ("My_unix", 27)); (("gettimeofday", 462), 1, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3787), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -3786), 0), 100000000, 0, -3785), (("src/my_unix.mli", 69, 2391, 2395), ("src/my_unix.mli", 69, 2391, 2433), 0), 0, Tag1 ("My_unix", 28)); (("stdout_isatty", 463), 1, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3790), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3789), 0), 100000000, 0, -3788), (("src/my_unix.mli", 70, 2434, 2438), ("src/my_unix.mli", 70, 2434, 2475), 0), 0, Tag1 ("My_unix", 29)); (("stat", 464), 1, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3793), (Tag3 ((("stats", 2286)), 0, (0)), 100000000, 0, -3792), 0), 100000000, 0, -3791), (("src/my_unix.mli", 71, 2476, 2480), ("src/my_unix.mli", 71, 2476, 2520), 0), 0, Tag1 ("My_unix", 30)); (("lstat", 465), 1, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3796), (Tag3 ((("stats", 2286)), 0, (0)), 100000000, 0, -3795), 0), 100000000, 0, -3794), (("src/my_unix.mli", 72, 2521, 2525), ("src/my_unix.mli", 72, 2521, 2565), 0), 0, Tag1 ("My_unix", 31))]], 1, 0, 0, 0, 0, 0, (("src/my_unix.mli", 55, 1737, 1737), ("src/my_unix.mli", 73, 2566, 2569), 0), 0, 0, 0, Tag1 ("My_unix", 20)), 1, 0); (("implem", 2300), ((Tag3 ((("implem", 2299)), 0, (0)), 100000000, 0, -3731), 0, (("src/my_unix.mli", 75, 2571, 2571), ("src/my_unix.mli", 75, 2571, 2590), 0), 0, Tag1 ("My_unix", 32)), 0)]), 0, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), Tag1 ("", 5)), 0, 0); Tag3 (("Tags", 1452), 0, (Tag1 ([Tag1 (("elt", 2301), (0, 0, 0, 1, ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4103)), 0, 0, 0, 0, (("src/signatures.mli", 102, 3902, 3923), ("src/signatures.mli", 102, 3902, 3940), 0), 0, 0, 0, Tag1 ("Signatures", 32)), 1, 0); Tag1 (("t", 2302), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("set.mli", 74, 2901, 2905), ("set.mli", 74, 2901, 2911), 0), 0, 0, 0, Tag1 ("Stdlib__Set", 4)), 1, 0); (("empty", 2303), ((Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -4102), 0, (("set.mli", 77, 2942, 2946), ("set.mli", 77, 2942, 2958), 0), 0, Tag1 ("Stdlib__Set", 5)), 0); (("add", 2304), ((Tag1 (0, (Tag3 ((("elt", 2301)), 0, (0)), 100000000, 0, -4101), (Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -4100), (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -4099), 0), 100000000, 0, -4098), 0), 100000000, 0, -4097), 0, (("set.mli", 80, 2986, 2990), ("set.mli", 80, 2986, 3012), 0), 0, Tag1 ("Stdlib__Set", 6)), 0); (("singleton", 2305), ((Tag1 (0, (Tag3 ((("elt", 2301)), 0, (0)), 100000000, 0, -4096), (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -4095), 0), 100000000, 0, -4094), 0, (("set.mli", 86, 3278, 3282), ("set.mli", 86, 3278, 3305), 0), 0, Tag1 ("Stdlib__Set", 7)), 0); (("remove", 2306), ((Tag1 (0, (Tag3 ((("elt", 2301)), 0, (0)), 100000000, 0, -4093), (Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -4092), (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -4091), 0), 100000000, 0, -4090), 0), 100000000, 0, -4089), 0, (("set.mli", 89, 3381, 3385), ("set.mli", 89, 3381, 3410), 0), 0, Tag1 ("Stdlib__Set", 8)), 0); (("union", 2307), ((Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -4088), (Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -4087), (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -4086), 0), 100000000, 0, -4085), 0), 100000000, 0, -4084), 0, (("set.mli", 95, 3677, 3681), ("set.mli", 95, 3677, 3703), 0), 0, Tag1 ("Stdlib__Set", 9)), 0); (("inter", 2308), ((Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -4083), (Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -4082), (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -4081), 0), 100000000, 0, -4080), 0), 100000000, 0, -4079), 0, (("set.mli", 98, 3727, 3731), ("set.mli", 98, 3727, 3753), 0), 0, Tag1 ("Stdlib__Set", 10)), 0); (("disjoint", 2309), ((Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -4078), (Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -4077), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4076), 0), 100000000, 0, -4075), 0), 100000000, 0, -4074), 0, (("set.mli", 101, 3784, 3788), ("set.mli", 101, 3784, 3816), 0), 0, Tag1 ("Stdlib__Set", 11)), 0); (("diff", 2310), ((Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -4073), (Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -4072), (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -4071), 0), 100000000, 0, -4070), 0), 100000000, 0, -4069), 0, (("set.mli", 105, 3880, 3884), ("set.mli", 105, 3880, 3905), 0), 0, Tag1 ("Stdlib__Set", 12)), 0); (("cardinal", 2311), ((Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -4068), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -4067), 0), 100000000, 0, -4066), 0, (("set.mli", 109, 4007, 4011), ("set.mli", 109, 4007, 4033), 0), 0, Tag1 ("Stdlib__Set", 13)), 0); (("elements", 2312), ((Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -4065), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 2301)), 0, (0)), 100000000, 0, -4064)], (0)), 100000000, 0, -4063), 0), 100000000, 0, -4062), 0, (("set.mli", 114, 4120, 4124), ("set.mli", 114, 4120, 4151), 0), 0, Tag1 ("Stdlib__Set", 14)), 0); (("min_elt", 2313), ((Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -4061), (Tag3 ((("elt", 2301)), 0, (0)), 100000000, 0, -4060), 0), 100000000, 0, -4059), 0, (("set.mli", 120, 4380, 4384), ("set.mli", 120, 4380, 4405), 0), 0, Tag1 ("Stdlib__Set", 15)), 0); (("min_elt_opt", 2314), ((Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -4058), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2301)), 0, (0)), 100000000, 0, -4057)], (0)), 100000000, 0, -4056), 0), 100000000, 0, -4055), 0, (("set.mli", 125, 4567, 4571), ("set.mli", 125, 4567, 4603), 0), 0, Tag1 ("Stdlib__Set", 16)), 0); (("max_elt", 2315), ((Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -4054), (Tag3 ((("elt", 2301)), 0, (0)), 100000000, 0, -4053), 0), 100000000, 0, -4052), 0, (("set.mli", 131, 4774, 4778), ("set.mli", 131, 4774, 4799), 0), 0, Tag1 ("Stdlib__Set", 17)), 0); (("max_elt_opt", 2316), ((Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -4051), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2301)), 0, (0)), 100000000, 0, -4050)], (0)), 100000000, 0, -4049), 0), 100000000, 0, -4048), 0, (("set.mli", 135, 4890, 4894), ("set.mli", 135, 4890, 4926), 0), 0, Tag1 ("Stdlib__Set", 18)), 0); (("choose", 2317), ((Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -4047), (Tag3 ((("elt", 2301)), 0, (0)), 100000000, 0, -4046), 0), 100000000, 0, -4045), 0, (("set.mli", 140, 5041, 5045), ("set.mli", 140, 5041, 5065), 0), 0, Tag1 ("Stdlib__Set", 19)), 0); (("choose_opt", 2318), ((Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -4044), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2301)), 0, (0)), 100000000, 0, -4043)], (0)), 100000000, 0, -4042), 0), 100000000, 0, -4041), 0, (("set.mli", 145, 5263, 5267), ("set.mli", 145, 5263, 5298), 0), 0, Tag1 ("Stdlib__Set", 20)), 0); (("find", 2319), ((Tag1 (0, (Tag3 ((("elt", 2301)), 0, (0)), 100000000, 0, -4040), (Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -4039), (Tag3 ((("elt", 2301)), 0, (0)), 100000000, 0, -4038), 0), 100000000, 0, -4037), 0), 100000000, 0, -4036), 0, (("set.mli", 153, 5541, 5549), ("set.mli", 153, 5541, 5574), 0), 0, Tag1 ("Stdlib__Set", 21)), 0); (("find_opt", 2320), ((Tag1 (0, (Tag3 ((("elt", 2301)), 0, (0)), 100000000, 0, -4035), (Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -4034), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2301)), 0, (0)), 100000000, 0, -4033)], (0)), 100000000, 0, -4032), 0), 100000000, 0, -4031), 0), 100000000, 0, -4030), 0, (("set.mli", 159, 5752, 5756), ("set.mli", 159, 5752, 5792), 0), 0, Tag1 ("Stdlib__Set", 22)), 0); (("find_first", 2321), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2301)), 0, (0)), 100000000, 0, -4029), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4028), 0), 100000000, 0, -4027), (Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -4026), (Tag3 ((("elt", 2301)), 0, (0)), 100000000, 0, -4025), 0), 100000000, 0, -4024), 0), 100000000, 0, -4023), 0, (("set.mli", 165, 5963, 5967), ("set.mli", 165, 5963, 6008), 0), 0, Tag1 ("Stdlib__Set", 23)), 0); (("find_first_opt", 2322), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2301)), 0, (0)), 100000000, 0, -4022), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4021), 0), 100000000, 0, -4020), (Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -4019), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2301)), 0, (0)), 100000000, 0, -4018)], (0)), 100000000, 0, -4017), 0), 100000000, 0, -4016), 0), 100000000, 0, -4015), 0, (("set.mli", 177, 6482, 6486), ("set.mli", 177, 6482, 6538), 0), 0, Tag1 ("Stdlib__Set", 24)), 0); (("find_last", 2323), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2301)), 0, (0)), 100000000, 0, -4014), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4013), 0), 100000000, 0, -4012), (Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -4011), (Tag3 ((("elt", 2301)), 0, (0)), 100000000, 0, -4010), 0), 100000000, 0, -4009), 0), 100000000, 0, -4008), 0, (("set.mli", 184, 6779, 6783), ("set.mli", 184, 6779, 6823), 0), 0, Tag1 ("Stdlib__Set", 25)), 0); (("find_last_opt", 2324), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2301)), 0, (0)), 100000000, 0, -4007), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4006), 0), 100000000, 0, -4005), (Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -4004), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2301)), 0, (0)), 100000000, 0, -4003)], (0)), 100000000, 0, -4002), 0), 100000000, 0, -4001), 0), 100000000, 0, -4000), 0, (("set.mli", 190, 7044, 7048), ("set.mli", 190, 7044, 7099), 0), 0, Tag1 ("Stdlib__Set", 26)), 0); (("iter", 2325), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2301)), 0, (0)), 100000000, 0, -3999), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3998), 0), 100000000, 0, -3997), (Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -3996), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3995), 0), 100000000, 0, -3994), 0), 100000000, 0, -3993), 0, (("set.mli", 198, 7371, 7375), ("set.mli", 198, 7371, 7411), 0), 0, Tag1 ("Stdlib__Set", 27)), 0); (("fold", 2326), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2301)), 0, (0)), 100000000, 0, -3992), (Tag1 (0, ((("acc")), 100000000, 0, -3988), ((("acc")), 100000000, 0, -3988), 0), 100000000, 0, -3991), 0), 100000000, 0, -3990), (Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -3989), (Tag1 (0, ((("acc")), 100000000, 0, -3988), ((("acc")), 100000000, 0, -3988), 0), 100000000, 0, -3987), 0), 100000000, 0, -3986), 0), 100000000, 0, -3985), 0, (("set.mli", 203, 7616, 7620), ("set.mli", 203, 7616, 7672), 0), 0, Tag1 ("Stdlib__Set", 28)), 0); (("map", 2327), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2301)), 0, (0)), 100000000, 0, -3984), (Tag3 ((("elt", 2301)), 0, (0)), 100000000, 0, -3983), 0), 100000000, 0, -3982), (Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -3981), (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -3980), 0), 100000000, 0, -3979), 0), 100000000, 0, -3978), 0, (("set.mli", 209, 7860, 7864), ("set.mli", 209, 7860, 7895), 0), 0, Tag1 ("Stdlib__Set", 29)), 0); (("filter", 2328), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2301)), 0, (0)), 100000000, 0, -3977), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3976), 0), 100000000, 0, -3975), (Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -3974), (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -3973), 0), 100000000, 0, -3972), 0), 100000000, 0, -3971), 0, (("set.mli", 221, 8372, 8376), ("set.mli", 221, 8372, 8411), 0), 0, Tag1 ("Stdlib__Set", 30)), 0); (("filter_map", 2329), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2301)), 0, (0)), 100000000, 0, -3970), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2301)), 0, (0)), 100000000, 0, -3969)], (0)), 100000000, 0, -3968), 0), 100000000, 0, -3967), (Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -3966), (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -3965), 0), 100000000, 0, -3964), 0), 100000000, 0, -3963), 0, (("set.mli", 228, 8710, 8714), ("set.mli", 228, 8710, 8759), 0), 0, Tag1 ("Stdlib__Set", 31)), 0); (("partition", 2330), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2301)), 0, (0)), 100000000, 0, -3962), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3961), 0), 100000000, 0, -3960), (Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -3959), (Tag2 ([(Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -3957); (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -3958)]), 100000000, 0, -3956), 0), 100000000, 0, -3955), 0), 100000000, 0, -3954), 0, (("set.mli", 243, 9275, 9279), ("set.mli", 243, 9275, 9321), 0), 0, Tag1 ("Stdlib__Set", 32)), 0); (("split", 2331), ((Tag1 (0, (Tag3 ((("elt", 2301)), 0, (0)), 100000000, 0, -3953), (Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -3952), (Tag2 ([(Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -3949); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3950); (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -3951)]), 100000000, 0, -3948), 0), 100000000, 0, -3947), 0), 100000000, 0, -3946), 0, (("set.mli", 249, 9562, 9566), ("set.mli", 249, 9562, 9601), 0), 0, Tag1 ("Stdlib__Set", 33)), 0); (("is_empty", 2332), ((Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -3945), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3944), 0), 100000000, 0, -3943), 0, (("set.mli", 260, 10020, 10024), ("set.mli", 260, 10020, 10047), 0), 0, Tag1 ("Stdlib__Set", 34)), 0); (("mem", 2333), ((Tag1 (0, (Tag3 ((("elt", 2301)), 0, (0)), 100000000, 0, -3942), (Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -3941), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3940), 0), 100000000, 0, -3939), 0), 100000000, 0, -3938), 0, (("set.mli", 263, 10096, 10100), ("set.mli", 263, 10096, 10125), 0), 0, Tag1 ("Stdlib__Set", 35)), 0); (("equal", 2334), ((Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -3937), (Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -3936), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3935), 0), 100000000, 0, -3934), 0), 100000000, 0, -3933), 0, (("set.mli", 266, 10190, 10194), ("set.mli", 266, 10190, 10219), 0), 0, Tag1 ("Stdlib__Set", 36)), 0); (("compare", 2335), ((Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -3932), (Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -3931), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3930), 0), 100000000, 0, -3929), 0), 100000000, 0, -3928), 0, (("set.mli", 270, 10335, 10339), ("set.mli", 270, 10335, 10365), 0), 0, Tag1 ("Stdlib__Set", 37)), 0); (("subset", 2336), ((Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -3927), (Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -3926), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3925), 0), 100000000, 0, -3924), 0), 100000000, 0, -3923), 0, (("set.mli", 274, 10476, 10480), ("set.mli", 274, 10476, 10506), 0), 0, Tag1 ("Stdlib__Set", 38)), 0); (("for_all", 2337), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2301)), 0, (0)), 100000000, 0, -3922), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3921), 0), 100000000, 0, -3920), (Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -3919), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3918), 0), 100000000, 0, -3917), 0), 100000000, 0, -3916), 0, (("set.mli", 278, 10598, 10602), ("set.mli", 278, 10598, 10641), 0), 0, Tag1 ("Stdlib__Set", 39)), 0); (("exists", 2338), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2301)), 0, (0)), 100000000, 0, -3915), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3914), 0), 100000000, 0, -3913), (Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -3912), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3911), 0), 100000000, 0, -3910), 0), 100000000, 0, -3909), 0, (("set.mli", 282, 10737, 10741), ("set.mli", 282, 10737, 10779), 0), 0, Tag1 ("Stdlib__Set", 40)), 0); (("to_list", 2339), ((Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -3908), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 2301)), 0, (0)), 100000000, 0, -3907)], (0)), 100000000, 0, -3906), 0), 100000000, 0, -3905), 0, (("set.mli", 288, 10922, 10926), ("set.mli", 288, 10922, 10953), 0), 0, Tag1 ("Stdlib__Set", 41)), 0); (("to_seq_from", 2340), ((Tag1 (0, (Tag3 ((("elt", 2301)), 0, (0)), 100000000, 0, -3904), (Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -3903), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2301)), 0, (0)), 100000000, 0, -3902)], (0)), 100000000, 0, -3901), 0), 100000000, 0, -3900), 0), 100000000, 0, -3899), 0, (("set.mli", 298, 11268, 11272), ("set.mli", 298, 11268, 11311), 0), 0, Tag1 ("Stdlib__Set", 43)), 0); (("to_seq", 2341), ((Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -3898), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2301)), 0, (0)), 100000000, 0, -3897)], (0)), 100000000, 0, -3896), 0), 100000000, 0, -3895), 0, (("set.mli", 303, 11453, 11457), ("set.mli", 303, 11453, 11484), 0), 0, Tag1 ("Stdlib__Set", 44)), 0); (("to_rev_seq", 2342), ((Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -3894), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2301)), 0, (0)), 100000000, 0, -3893)], (0)), 100000000, 0, -3892), 0), 100000000, 0, -3891), 0, (("set.mli", 307, 11562, 11566), ("set.mli", 307, 11562, 11597), 0), 0, Tag1 ("Stdlib__Set", 45)), 0); (("add_seq", 2343), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2301)), 0, (0)), 100000000, 0, -3890)], (0)), 100000000, 0, -3889), (Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -3888), (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -3887), 0), 100000000, 0, -3886), 0), 100000000, 0, -3885), 0, (("set.mli", 311, 11676, 11680), ("set.mli", 311, 11676, 11713), 0), 0, Tag1 ("Stdlib__Set", 46)), 0); (("of_seq", 2344), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2301)), 0, (0)), 100000000, 0, -3884)], (0)), 100000000, 0, -3883), (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -3882), 0), 100000000, 0, -3881), 0, (("set.mli", 315, 11791, 11795), ("set.mli", 315, 11791, 11822), 0), 0, Tag1 ("Stdlib__Set", 47)), 0); (("of_list", 2345), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3880)], (0)), 100000000, 0, -3879), (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -3878), 0), 100000000, 0, -3877), 0, (("src/signatures.mli", 109, 4288, 4290), ("src/signatures.mli", 109, 4288, 4320), 0), 0, Tag1 ("Signatures", 33)), 0); (("print", 2346), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -3876), (Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -3875), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3874), 0), 100000000, 0, -3873), 0), 100000000, 0, -3872), 0, (("src/signatures.mli", 110, 4321, 4323), ("src/signatures.mli", 110, 4321, 4364), 0), 0, Tag1 ("Signatures", 34)), 0); (("does_match", 2347), ((Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -3871), (Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -3870), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3869), 0), 100000000, 0, -3868), 0), 100000000, 0, -3867), 0, (("src/signatures.mli", 111, 4365, 4367), ("src/signatures.mli", 111, 4365, 4398), 0), 0, Tag1 ("Signatures", 35)), 0); Tag3 (("Operators", 2348), 0, (Tag1 ([(("++", 2349), ((Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -4125), (Tag1 (0, (Tag3 ((("elt", 2301)), 0, (0)), 100000000, 0, -4124), (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -4123), 0), 100000000, 0, -4122), 0), 100000000, 0, -4121), 0, (("src/signatures.mli", 113, 4424, 4428), ("src/signatures.mli", 113, 4424, 4454), 0), 0, Tag1 ("Signatures", 36)), 0); (("--", 2350), ((Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -4120), (Tag1 (0, (Tag3 ((("elt", 2301)), 0, (0)), 100000000, 0, -4119), (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -4118), 0), 100000000, 0, -4117), 0), 100000000, 0, -4116), 0, (("src/signatures.mli", 114, 4455, 4459), ("src/signatures.mli", 114, 4455, 4485), 0), 0, Tag1 ("Signatures", 37)), 0); (("+++", 2351), ((Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -4115), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2301)), 0, (0)), 100000000, 0, -4114)], (0)), 100000000, 0, -4113), (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -4112), 0), 100000000, 0, -4111), 0), 100000000, 0, -4110), 0, (("src/signatures.mli", 115, 4486, 4490), ("src/signatures.mli", 115, 4486, 4524), 0), 0, Tag1 ("Signatures", 38)), 0); (("---", 2352), ((Tag1 (0, (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -4109), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2301)), 0, (0)), 100000000, 0, -4108)], (0)), 100000000, 0, -4107), (Tag3 ((("t", 2302)), 0, (0)), 100000000, 0, -4106), 0), 100000000, 0, -4105), 0), 100000000, 0, -4104), 0, (("src/signatures.mli", 116, 4525, 4529), ("src/signatures.mli", 116, 4525, 4563), 0), 0, Tag1 ("Signatures", 39)), 0)]), 0, (("src/signatures.mli", 112, 4399, 4401), ("src/signatures.mli", 117, 4564, 4569), 0), Tag1 ("Signatures", 40)), 0, 0)]), 0, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), Tag1 ("", 6)), 0, 0); Tag3 (("Display", 1453), 0, (Tag1 ([Tag1 (("display", 2353), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/display.mli", 18, 940, 940), ("src/display.mli", 18, 940, 952), 0), 0, 0, 0, Tag1 ("Display", 0)), 1, 0); Tag1 (("tagline_description", 2354), (0, 0, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4197); (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -4198)]), 100000000, 0, -4196)], (0)), 100000000, 0, -4195)), 0, 0, 0, 0, (("src/display.mli", 19, 953, 953), ("src/display.mli", 19, 953, 1000), 0), 0, 0, 0, Tag1 ("Display", 1)), 1, 0); (("create", 2355), ((Tag1 (Tag1 ("channel"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -4194)], (0)), 100000000, 0, -4193), (Tag1 (Tag1 ("mode"), (Tag3 ((Tag3 ("option", 10)), [(Tag8 (([("Classic", (0)); ("Sophisticated", (0))], (0, 100000000, 0, -4192), 1, 0, 0)), 100000000, 0, -4191)], (0)), 100000000, 0, -4190), (Tag1 (Tag1 ("columns"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -4189)], (0)), 100000000, 0, -4188), (Tag1 (Tag1 ("description"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("tagline_description", 2354)), 0, (0)), 100000000, 0, -4187)], (0)), 100000000, 0, -4186), (Tag1 (Tag1 ("log_file"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4185)], (0)), 100000000, 0, -4184), (Tag1 (Tag1 ("log_level"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -4183)], (0)), 100000000, 0, -4182), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4181), (Tag3 ((("display", 2353)), 0, (0)), 100000000, 0, -4180), 0), 100000000, 0, -4179), 0), 100000000, 0, -4178), 0), 100000000, 0, -4177), 0), 100000000, 0, -4176), 0), 100000000, 0, -4175), 0), 100000000, 0, -4174), 0), 100000000, 0, -4173), 0, (("src/display.mli", 21, 1002, 1002), ("src/display.mli", 29, 1190, 1199), 0), 0, Tag1 ("Display", 2)), 0); (("finish", 2356), ((Tag1 (Tag1 ("how"), (Tag3 ((Tag3 ("option", 10)), [(Tag8 (([("Error", (0)); ("Quiet", (0)); ("Success", (0))], (0, 100000000, 0, -4172), 1, 0, 0)), 100000000, 0, -4171)], (0)), 100000000, 0, -4170), (Tag1 (0, (Tag3 ((("display", 2353)), 0, (0)), 100000000, 0, -4169), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4168), 0), 100000000, 0, -4167), 0), 100000000, 0, -4166), 0, (("src/display.mli", 31, 1201, 1201), ("src/display.mli", 31, 1201, 1262), 0), 0, Tag1 ("Display", 3)), 0); (("event", 2357), ((Tag1 (0, (Tag3 ((("display", 2353)), 0, (0)), 100000000, 0, -4165), (Tag1 (Tag1 ("pretend"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4164)], (0)), 100000000, 0, -4163), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4162), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4161), (Tag1 (0, (Tag3 (Tag1 ((("Tags", 1452)), "t"), 0, (0)), 100000000, 0, -4160), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4159), 0), 100000000, 0, -4158), 0), 100000000, 0, -4157), 0), 100000000, 0, -4156), 0), 100000000, 0, -4155), 0), 100000000, 0, -4154), 0, (("src/display.mli", 32, 1263, 1263), ("src/display.mli", 32, 1263, 1337), 0), 0, Tag1 ("Display", 4)), 0); (("display", 2358), ((Tag1 (0, (Tag3 ((("display", 2353)), 0, (0)), 100000000, 0, -4153), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -4152), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4151), 0), 100000000, 0, -4150), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4149), 0), 100000000, 0, -4148), 0), 100000000, 0, -4147), 0, (("src/display.mli", 33, 1338, 1338), ("src/display.mli", 33, 1338, 1392), 0), 0, Tag1 ("Display", 5)), 0); (("update", 2359), ((Tag1 (0, (Tag3 ((("display", 2353)), 0, (0)), 100000000, 0, -4146), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4145), 0), 100000000, 0, -4144), 0, (("src/display.mli", 34, 1393, 1393), ("src/display.mli", 34, 1393, 1421), 0), 0, Tag1 ("Display", 6)), 0); (("is_logging", 2360), ((Tag1 (0, (Tag3 ((("display", 2353)), 0, (0)), 100000000, 0, -4143), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -4142), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4141), 0), 100000000, 0, -4140), 0), 100000000, 0, -4139), 0, (("src/display.mli", 35, 1422, 1422), ("src/display.mli", 35, 1422, 1461), 0), 0, Tag1 ("Display", 7)), 0); (("dprintf", 2361), ((Tag1 (Tag1 ("raw"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4138)], (0)), 100000000, 0, -4137), (Tag1 (Tag1 ("log_level"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -4136)], (0)), 100000000, 0, -4135), (Tag1 (0, (Tag3 ((("display", 2353)), 0, (0)), 100000000, 0, -4134), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format"), [((("a")), 100000000, 0, -4130); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -4132); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4133)], (0)), 100000000, 0, -4131), ((("a")), 100000000, 0, -4130), 0), 100000000, 0, -4129), 0), 100000000, 0, -4128), 0), 100000000, 0, -4127), 0), 100000000, 0, -4126), 0, (("src/display.mli", 36, 1462, 1462), ("src/display.mli", 36, 1462, 1559), 0), 0, Tag1 ("Display", 8)), 0)]), 0, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), Tag1 ("", 7)), 0, 0); Tag3 (("Log", 1454), 0, (Tag1 ([(("level", 2362), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -4272)], (0)), 100000000, 0, -4271), 0, (("src/signatures.mli", 310, 12789, 12791), ("src/signatures.mli", 310, 12789, 12810), 0), 0, Tag1 ("Signatures", 114)), 0); (("dprintf", 2363), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -4270), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format"), [((("a")), 100000000, 0, -4266); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -4268); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4269)], (0)), 100000000, 0, -4267), ((("a")), 100000000, 0, -4266), 0), 100000000, 0, -4265), 0), 100000000, 0, -4264), 0, (("src/signatures.mli", 318, 13197, 13199), ("src/signatures.mli", 318, 13197, 13261), 0), 0, Tag1 ("Signatures", 115)), 0); (("is_logging", 2364), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -4263), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4262), 0), 100000000, 0, -4261), 0, (("src/signatures.mli", 321, 13330, 13332), ("src/signatures.mli", 321, 13330, 13360), 0), 0, Tag1 ("Signatures", 116)), 0); (("eprintf", 2365), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format"), [((("a")), 100000000, 0, -4257); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -4259); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4260)], (0)), 100000000, 0, -4258), ((("a")), 100000000, 0, -4257), 0), 100000000, 0, -4256), 0, (("src/signatures.mli", 324, 13423, 13425), ("src/signatures.mli", 324, 13423, 13480), 0), 0, Tag1 ("Signatures", 117)), 0); (("raw_dprintf", 2366), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -4255), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format"), [((("a")), 100000000, 0, -4251); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -4253); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4254)], (0)), 100000000, 0, -4252), ((("a")), 100000000, 0, -4251), 0), 100000000, 0, -4250), 0), 100000000, 0, -4249), 0, (("src/signatures.mli", 327, 13540, 13542), ("src/signatures.mli", 327, 13540, 13608), 0), 0, Tag1 ("Signatures", 118)), 0); (("classic_display", 2367), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4248)], (0)), 100000000, 0, -4247), 0, (("src/log.mli", 22, 1100, 1100), ("src/log.mli", 22, 1100, 1130), 0), 0, Tag1 ("Log", 0)), 0); (("event", 2368), ((Tag1 (Tag1 ("pretend"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4246)], (0)), 100000000, 0, -4245), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4244), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4243), (Tag1 (0, (Tag3 (Tag1 ((("Tags", 1452)), "t"), 0, (0)), 100000000, 0, -4242), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4241), 0), 100000000, 0, -4240), 0), 100000000, 0, -4239), 0), 100000000, 0, -4238), 0), 100000000, 0, -4237), 0, (("src/log.mli", 25, 1160, 1160), ("src/log.mli", 25, 1160, 1223), 0), 0, Tag1 ("Log", 1)), 0); (("init", 2369), ((Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4236)], (0)), 100000000, 0, -4235), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4234), 0), 100000000, 0, -4233), 0, (("src/log.mli", 30, 1290, 1290), ("src/log.mli", 30, 1290, 1322), 0), 0, Tag1 ("Log", 2)), 0); (("finish", 2370), ((Tag1 (Tag1 ("how"), (Tag3 ((Tag3 ("option", 10)), [(Tag8 (([("Error", (0)); ("Quiet", (0)); ("Success", (0))], (0, 100000000, 0, -4232), 1, 0, 0)), 100000000, 0, -4231)], (0)), 100000000, 0, -4230), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4229), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4228), 0), 100000000, 0, -4227), 0), 100000000, 0, -4226), 0, (("src/log.mli", 32, 1324, 1324), ("src/log.mli", 32, 1324, 1382), 0), 0, Tag1 ("Log", 3)), 0); (("display", 2371), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -4225), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4224), 0), 100000000, 0, -4223), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4222), 0), 100000000, 0, -4221), 0, (("src/log.mli", 33, 1383, 1383), ("src/log.mli", 33, 1383, 1426), 0), 0, Tag1 ("Log", 4)), 0); (("update", 2372), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4220), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4219), 0), 100000000, 0, -4218), 0, (("src/log.mli", 34, 1427, 1427), ("src/log.mli", 34, 1427, 1452), 0), 0, Tag1 ("Log", 5)), 0); (("mode", 2373), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4217), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4216), 0), 100000000, 0, -4215), 0, (("src/log.mli", 35, 1453, 1453), ("src/log.mli", 35, 1453, 1478), 0), 0, Tag1 ("Log", 6)), 0); (("at_end", 2374), ((Tag1 (("name"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4214), (Tag1 (0, (Tag1 (0, (Tag8 (([("Error", (0)); ("Quiet", (0))], ((0), 100000000, 0, -4213), 0, 0, 0)), 100000000, 0, -4212), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4211), 0), 100000000, 0, -4210), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4209), 0), 100000000, 0, -4208), 0), 100000000, 0, -4207), 0, (("src/log.mli", 44, 1773, 1773), ("src/log.mli", 44, 1773, 1839), 0), 0, Tag1 ("Log", 7)), 0); (("at_failure", 2375), ((Tag1 (("name"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4206), (Tag1 (0, (Tag1 (0, (Tag8 (([("Error", (0))], ((0), 100000000, 0, -4205), 0, 0, 0)), 100000000, 0, -4204), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4203), 0), 100000000, 0, -4202), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4201), 0), 100000000, 0, -4200), 0), 100000000, 0, -4199), 0, (("src/log.mli", 45, 1840, 1840), ("src/log.mli", 45, 1840, 1901), 0), 0, Tag1 ("Log", 8)), 0)]), 0, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), Tag1 ("", 8)), 0, 0); Tag3 (("Shell", 1455), 0, (Tag1 ([(("is_simple_filename", 2376), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4315), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4314), 0), 100000000, 0, -4313), 0, (("src/shell.mli", 16, 931, 931), ("src/shell.mli", 16, 931, 970), 0), 0, Tag1 ("Shell", 0)), 0); (("quote_filename_if_needed", 2377), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4312), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4311), 0), 100000000, 0, -4310), 0, (("src/shell.mli", 18, 972, 972), ("src/shell.mli", 18, 972, 1019), 0), 0, Tag1 ("Shell", 1)), 0); (("chdir", 2378), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4309), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4308), 0), 100000000, 0, -4307), 0, (("src/shell.mli", 22, 1148, 1148), ("src/shell.mli", 22, 1148, 1174), 0), 0, Tag1 ("Shell", 2)), 0); (("rm", 2379), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4306), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4305), 0), 100000000, 0, -4304), 0, (("src/shell.mli", 23, 1175, 1175), ("src/shell.mli", 23, 1175, 1198), 0), 0, Tag1 ("Shell", 3)), 0); (("rm_f", 2380), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4303), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4302), 0), 100000000, 0, -4301), 0, (("src/shell.mli", 24, 1199, 1199), ("src/shell.mli", 24, 1199, 1224), 0), 0, Tag1 ("Shell", 4)), 0); (("rm_rf", 2381), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4300), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4299), 0), 100000000, 0, -4298), 0, (("src/shell.mli", 25, 1225, 1225), ("src/shell.mli", 25, 1225, 1251), 0), 0, Tag1 ("Shell", 5)), 0); (("mkdir", 2382), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4297), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4296), 0), 100000000, 0, -4295), 0, (("src/shell.mli", 26, 1252, 1252), ("src/shell.mli", 26, 1252, 1278), 0), 0, Tag1 ("Shell", 6)), 0); (("try_mkdir", 2383), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4294), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4293), 0), 100000000, 0, -4292), 0, (("src/shell.mli", 27, 1279, 1279), ("src/shell.mli", 27, 1279, 1309), 0), 0, Tag1 ("Shell", 7)), 0); (("mkdir_p", 2384), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4291), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4290), 0), 100000000, 0, -4289), 0, (("src/shell.mli", 28, 1310, 1310), ("src/shell.mli", 28, 1310, 1338), 0), 0, Tag1 ("Shell", 8)), 0); (("cp", 2385), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4288), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4287), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4286), 0), 100000000, 0, -4285), 0), 100000000, 0, -4284), 0, (("src/shell.mli", 29, 1339, 1339), ("src/shell.mli", 29, 1339, 1372), 0), 0, Tag1 ("Shell", 9)), 0); (("mv", 2386), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4283), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4282), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4281), 0), 100000000, 0, -4280), 0), 100000000, 0, -4279), 0, (("src/shell.mli", 30, 1373, 1373), ("src/shell.mli", 30, 1373, 1406), 0), 0, Tag1 ("Shell", 10)), 0); (("readlink", 2387), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4278), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4277), 0), 100000000, 0, -4276), 0, (("src/shell.mli", 31, 1407, 1407), ("src/shell.mli", 31, 1407, 1438), 0), 0, Tag1 ("Shell", 11)), 0); (("is_link", 2388), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4275), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4274), 0), 100000000, 0, -4273), 0, (("src/shell.mli", 32, 1439, 1439), ("src/shell.mli", 32, 1439, 1467), 0), 0, Tag1 ("Shell", 12)), 0)]), 0, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), Tag1 ("", 9)), 0, 0); Tag3 (("Bool", 1456), 0, (Tag1 ([Tag1 (("boolean", 2389), ([((("a")), 100000000, 0, -4339)], 1, Tag1 ([(("And", 270), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("boolean", 2389)), [((("a")), 100000000, 0, -4339)], (0)), 100000000, 0, -4338)], (0)), 100000000, 0, -4337)]), 0, (("src/bool.mli", 24, 1199, 1203), ("src/bool.mli", 24, 1199, 1225), 0), 0, Tag1 ("Bool", 1)); (("Or", 271), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("boolean", 2389)), [((("a")), 100000000, 0, -4339)], (0)), 100000000, 0, -4341)], (0)), 100000000, 0, -4340)]), 0, (("src/bool.mli", 25, 1226, 1228), ("src/bool.mli", 25, 1226, 1251), 0), 0, Tag1 ("Bool", 2)); (("Not", 272), ([(Tag3 ((("boolean", 2389)), [((("a")), 100000000, 0, -4339)], (0)), 100000000, 0, -4342)]), 0, (("src/bool.mli", 26, 1252, 1254), ("src/bool.mli", 26, 1252, 1273), 0), 0, Tag1 ("Bool", 3)); (("Atom", 273), ([((("a")), 100000000, 0, -4339)]), 0, (("src/bool.mli", 27, 1274, 1276), ("src/bool.mli", 27, 1274, 1288), 0), 0, Tag1 ("Bool", 4)); (("True", 274), (0), 0, (("src/bool.mli", 28, 1289, 1291), ("src/bool.mli", 28, 1289, 1297), 0), 0, Tag1 ("Bool", 5)); (("False", 275), (0), 0, (("src/bool.mli", 29, 1298, 1300), ("src/bool.mli", 29, 1298, 1307), 0), 0, Tag1 ("Bool", 6))], 0), 1, 0, [25], [0], 0, 0, (("src/bool.mli", 23, 1181, 1181), ("src/bool.mli", 29, 1298, 1307), 0), 0, 0, 0, Tag1 ("Bool", 0)), 1, 0); (("eval", 2390), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -4334), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4336), 0), 100000000, 0, -4335), (Tag1 (0, (Tag3 ((("boolean", 2389)), [((("a")), 100000000, 0, -4334)], (0)), 100000000, 0, -4333), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4332), 0), 100000000, 0, -4331), 0), 100000000, 0, -4330), 0, (("src/bool.mli", 31, 1309, 1309), ("src/bool.mli", 31, 1309, 1354), 0), 0, Tag1 ("Bool", 7)), 0); (("iter", 2391), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -4327), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4329), 0), 100000000, 0, -4328), (Tag1 (0, (Tag3 ((("boolean", 2389)), [((("a")), 100000000, 0, -4327)], (0)), 100000000, 0, -4326), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4325), 0), 100000000, 0, -4324), 0), 100000000, 0, -4323), 0, (("src/bool.mli", 33, 1455, 1455), ("src/bool.mli", 33, 1455, 1500), 0), 0, Tag1 ("Bool", 8)), 0); (("map", 2392), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -4321), ((("b")), 100000000, 0, -4319), 0), 100000000, 0, -4322), (Tag1 (0, (Tag3 ((("boolean", 2389)), [((("a")), 100000000, 0, -4321)], (0)), 100000000, 0, -4320), (Tag3 ((("boolean", 2389)), [((("b")), 100000000, 0, -4319)], (0)), 100000000, 0, -4318), 0), 100000000, 0, -4317), 0), 100000000, 0, -4316), 0, (("src/bool.mli", 35, 1553, 1553), ("src/bool.mli", 35, 1553, 1601), 0), 0, Tag1 ("Bool", 9)), 0)]), 0, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), Tag1 ("", 10)), 0, 0); Tag3 (("Glob_ast", 1457), 0, (Tag1 ([Tag2 (("Parse_error", 2393), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4356)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Glob_ast", 0)), 2, 0); Tag1 (("pattern", 2394), (0, 0, Tag1 ([(("Epsilon", 272), (0), 0, (("src/glob_ast.mli", 20, 988, 988), ("src/glob_ast.mli", 20, 988, 997), 0), 0, Tag1 ("Glob_ast", 3)); (("Star", 273), ([(Tag3 ((("pattern", 2394)), 0, (0)), 100000000, 0, -4349)]), 0, (("src/glob_ast.mli", 21, 998, 998), ("src/glob_ast.mli", 21, 998, 1015), 0), 0, Tag1 ("Glob_ast", 4)); (("Class", 274), ([(Tag3 ((("character_class", 2395)), 0, (0)), 100000000, 0, -4350)]), 0, (("src/glob_ast.mli", 22, 1016, 1016), ("src/glob_ast.mli", 22, 1016, 1042), 0), 0, Tag1 ("Glob_ast", 5)); (("Concat", 275), ([(Tag3 ((("pattern", 2394)), 0, (0)), 100000000, 0, -4351); (Tag3 ((("pattern", 2394)), 0, (0)), 100000000, 0, -4352)]), 0, (("src/glob_ast.mli", 23, 1043, 1043), ("src/glob_ast.mli", 23, 1043, 1072), 0), 0, Tag1 ("Glob_ast", 6)); (("Union", 276), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("pattern", 2394)), 0, (0)), 100000000, 0, -4354)], (0)), 100000000, 0, -4353)]), 0, (("src/glob_ast.mli", 24, 1073, 1073), ("src/glob_ast.mli", 24, 1073, 1096), 0), 0, Tag1 ("Glob_ast", 7)); (("Word", 277), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4355)]), 0, (("src/glob_ast.mli", 25, 1097, 1097), ("src/glob_ast.mli", 25, 1097, 1113), 0), 0, Tag1 ("Glob_ast", 8))], 0), 1, 0, 0, 0, 0, 0, (("src/glob_ast.mli", 19, 973, 973), ("src/glob_ast.mli", 25, 1097, 1113), 0), 0, 0, 0, Tag1 ("Glob_ast", 1)), 1, 0); Tag1 (("character_class", 2395), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Bool", 1456)), "boolean"), [(Tag2 ([(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -4347); (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -4348)]), 100000000, 0, -4346)], (0)), 100000000, 0, -4345)), 0, 0, 0, 0, (("src/glob_ast.mli", 26, 1114, 1114), ("src/glob_ast.mli", 26, 1114, 1162), 0), 0, 0, 0, Tag1 ("Glob_ast", 2)), 2, 0); Tag1 (("atom", 2396), ([((("pattern")), 100000000, 0, -4344)], 1, Tag1 ([(("Constant", 283), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4343)]), 0, (("src/glob_ast.mli", 27, 1163, 1184), ("src/glob_ast.mli", 27, 1163, 1202), 0), 0, Tag1 ("Glob_ast", 10)); (("Pattern", 284), ([((("pattern")), 100000000, 0, -4344)]), 0, (("src/glob_ast.mli", 27, 1163, 1203), ("src/glob_ast.mli", 27, 1163, 1224), 0), 0, Tag1 ("Glob_ast", 11))], 0), 1, 0, [25], [0], 0, 0, (("src/glob_ast.mli", 27, 1163, 1163), ("src/glob_ast.mli", 27, 1163, 1224), 0), 0, 0, 0, Tag1 ("Glob_ast", 9)), 1, 0)]), 0, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), Tag1 ("", 11)), 0, 0); Tag3 (("Glob_lexer", 1458), 0, (Tag1 ([Tag1 (("token", 2397), (0, 0, Tag1 ([(("ATOM", 274), ([(Tag3 (Tag1 ((("Glob_ast", 1457)), "atom"), [(Tag3 (Tag1 ((("Glob_ast", 1457)), "pattern"), 0, (0)), 100000000, 0, -4361)], (0)), 100000000, 0, -4360)]), 0, (("src/glob_lexer.mli", 19, 953, 953), ("src/glob_lexer.mli", 19, 953, 975), 0), 0, Tag1 ("Glob_lexer", 1)); (("AND", 275), (0), 0, (("src/glob_lexer.mli", 20, 976, 976), ("src/glob_lexer.mli", 20, 976, 981), 0), 0, Tag1 ("Glob_lexer", 2)); (("OR", 276), (0), 0, (("src/glob_lexer.mli", 21, 982, 982), ("src/glob_lexer.mli", 21, 982, 986), 0), 0, Tag1 ("Glob_lexer", 3)); (("NOT", 277), (0), 0, (("src/glob_lexer.mli", 22, 987, 987), ("src/glob_lexer.mli", 22, 987, 992), 0), 0, Tag1 ("Glob_lexer", 4)); (("LPAR", 278), (0), 0, (("src/glob_lexer.mli", 23, 993, 993), ("src/glob_lexer.mli", 23, 993, 999), 0), 0, Tag1 ("Glob_lexer", 5)); (("RPAR", 279), (0), 0, (("src/glob_lexer.mli", 24, 1000, 1000), ("src/glob_lexer.mli", 24, 1000, 1006), 0), 0, Tag1 ("Glob_lexer", 6)); (("TRUE", 280), (0), 0, (("src/glob_lexer.mli", 25, 1007, 1007), ("src/glob_lexer.mli", 25, 1007, 1013), 0), 0, Tag1 ("Glob_lexer", 7)); (("FALSE", 281), (0), 0, (("src/glob_lexer.mli", 26, 1014, 1014), ("src/glob_lexer.mli", 26, 1014, 1021), 0), 0, Tag1 ("Glob_lexer", 8)); (("EOF", 282), (0), 0, (("src/glob_lexer.mli", 27, 1022, 1022), ("src/glob_lexer.mli", 27, 1022, 1027), 0), 0, Tag1 ("Glob_lexer", 9))], 0), 1, 0, 0, 0, 0, 0, (("src/glob_lexer.mli", 18, 940, 940), ("src/glob_lexer.mli", 27, 1022, 1027), 0), 0, 0, 0, Tag1 ("Glob_lexer", 0)), 1, 0); (("token", 2398), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -4359), (Tag3 ((("token", 2397)), 0, (0)), 100000000, 0, -4358), 0), 100000000, 0, -4357), 0, (("src/glob_lexer.mli", 29, 1029, 1029), ("src/glob_lexer.mli", 29, 1029, 1063), 0), 0, Tag1 ("Glob_lexer", 10)), 0)]), 0, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), Tag1 ("", 12)), 0, 0); Tag3 (("Glob", 1459), 0, (Tag1 ([Tag1 (("fast_pattern", 2399), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/glob.mli", 19, 1052, 1052), ("src/glob.mli", 19, 1052, 1069), 0), 0, 0, 0, Tag1 ("Glob", 0)), 1, 0); Tag1 (("globber", 2400), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Bool", 1456)), "boolean"), [(Tag3 (Tag1 ((("Glob_ast", 1457)), "atom"), [(Tag3 ((("fast_pattern", 2399)), 0, (0)), 100000000, 0, -4379)], (0)), 100000000, 0, -4378)], (0)), 100000000, 0, -4377)), 0, 0, 0, 0, (("src/glob.mli", 23, 1232, 1261), ("src/glob.mli", 23, 1232, 1315), 0), 0, 0, 0, Tag1 ("Glob", 1)), 1, 0); (("parse", 2401), ((Tag1 (Tag1 ("dir"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4376)], (0)), 100000000, 0, -4375), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4374), (Tag3 ((("globber", 2400)), 0, (0)), 100000000, 0, -4373), 0), 100000000, 0, -4372), 0), 100000000, 0, -4371), 0, (("src/signatures.mli", 295, 12029, 12031), ("src/signatures.mli", 295, 12029, 12075), 0), 0, Tag1 ("Signatures", 110)), 0); Tag2 (("Parse_error", 2402), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4370)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Signatures", 111)), 2, 0); (("eval", 2403), ((Tag1 (0, (Tag3 ((("globber", 2400)), 0, (0)), 100000000, 0, -4369), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4368), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4367), 0), 100000000, 0, -4366), 0), 100000000, 0, -4365), 0, (("src/signatures.mli", 304, 12607, 12609), ("src/signatures.mli", 304, 12607, 12645), 0), 0, Tag1 ("Signatures", 112)), 0); (("fast_pattern_of_pattern", 2404), ((Tag1 (0, (Tag3 (Tag1 ((("Glob_ast", 1457)), "pattern"), 0, (0)), 100000000, 0, -4364), (Tag3 ((("fast_pattern", 2399)), 0, (0)), 100000000, 0, -4363), 0), 100000000, 0, -4362), 0, (("src/glob.mli", 25, 1317, 1317), ("src/glob.mli", 25, 1317, 1379), 0), 0, Tag1 ("Glob", 2)), 0)]), 0, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), Tag1 ("", 13)), 0, 0); Tag3 (("Lexers", 1460), 0, (Tag1 ([Tag2 (("Error", 2405), ((Tag3 ("exn", 7)), 0, ([(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4483); (Tag3 (Tag1 ((("Loc", 1447)), "location"), 0, (0)), 100000000, 0, -4484)]), 100000000, 0, -4482)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Lexers", 0)), 2, 0); Tag1 (("conf_values", 2406), (0, 0, [[(("plus_tags", 276), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4476); (Tag3 (Tag1 ((("Loc", 1447)), "location"), 0, (0)), 100000000, 0, -4477)]), 100000000, 0, -4475)], (0)), 100000000, 0, -4474), (("src/lexers.mli", 19, 994, 998), ("src/lexers.mli", 19, 994, 1042), 0), 0, Tag1 ("Lexers", 2)); (("minus_tags", 277), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4480); (Tag3 (Tag1 ((("Loc", 1447)), "location"), 0, (0)), 100000000, 0, -4481)]), 100000000, 0, -4479)], (0)), 100000000, 0, -4478), (("src/lexers.mli", 20, 1043, 1047), ("src/lexers.mli", 20, 1043, 1089), 0), 0, Tag1 ("Lexers", 3))]], 1, 0, 0, 0, 0, 0, (("src/lexers.mli", 18, 975, 975), ("src/lexers.mli", 20, 1043, 1091), 0), 0, 0, 0, Tag1 ("Lexers", 1)), 1, 0); Tag1 (("conf", 2407), (0, 0, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((("Glob", 1459)), "globber"), 0, (0)), 100000000, 0, -4472); (Tag3 ((("conf_values", 2406)), 0, (0)), 100000000, 0, -4473)]), 100000000, 0, -4471)], (0)), 100000000, 0, -4470)), 0, 0, 0, 0, (("src/lexers.mli", 22, 1093, 1093), ("src/lexers.mli", 22, 1093, 1138), 0), 0, 0, 0, Tag1 ("Lexers", 4)), 1, 0); (("ocamldep_output", 2408), ((Tag1 (0, (Tag3 (Tag1 ((("Loc", 1447)), "source"), 0, (0)), 100000000, 0, -4469), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -4468), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4465); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4467)], (0)), 100000000, 0, -4466)]), 100000000, 0, -4464)], (0)), 100000000, 0, -4463), 0), 100000000, 0, -4462), 0), 100000000, 0, -4461), 0, (("src/lexers.mli", 24, 1140, 1140), ("src/lexers.mli", 24, 1140, 1220), 0), 0, Tag1 ("Lexers", 5)), 0); (("space_sep_strings", 2409), ((Tag1 (0, (Tag3 (Tag1 ((("Loc", 1447)), "source"), 0, (0)), 100000000, 0, -4460), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -4459), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4458)], (0)), 100000000, 0, -4457), 0), 100000000, 0, -4456), 0), 100000000, 0, -4455), 0, (("src/lexers.mli", 25, 1221, 1221), ("src/lexers.mli", 25, 1221, 1287), 0), 0, Tag1 ("Lexers", 6)), 0); (("blank_sep_strings", 2410), ((Tag1 (0, (Tag3 (Tag1 ((("Loc", 1447)), "source"), 0, (0)), 100000000, 0, -4454), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -4453), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4452)], (0)), 100000000, 0, -4451), 0), 100000000, 0, -4450), 0), 100000000, 0, -4449), 0, (("src/lexers.mli", 26, 1288, 1288), ("src/lexers.mli", 26, 1288, 1354), 0), 0, Tag1 ("Lexers", 7)), 0); (("comma_sep_strings", 2411), ((Tag1 (0, (Tag3 (Tag1 ((("Loc", 1447)), "source"), 0, (0)), 100000000, 0, -4448), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -4447), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4446)], (0)), 100000000, 0, -4445), 0), 100000000, 0, -4444), 0), 100000000, 0, -4443), 0, (("src/lexers.mli", 27, 1355, 1355), ("src/lexers.mli", 27, 1355, 1421), 0), 0, Tag1 ("Lexers", 8)), 0); (("comma_or_blank_sep_strings", 2412), ((Tag1 (0, (Tag3 (Tag1 ((("Loc", 1447)), "source"), 0, (0)), 100000000, 0, -4442), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -4441), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4440)], (0)), 100000000, 0, -4439), 0), 100000000, 0, -4438), 0), 100000000, 0, -4437), 0, (("src/lexers.mli", 28, 1422, 1422), ("src/lexers.mli", 28, 1422, 1497), 0), 0, Tag1 ("Lexers", 9)), 0); (("trim_blanks", 2413), ((Tag1 (0, (Tag3 (Tag1 ((("Loc", 1447)), "source"), 0, (0)), 100000000, 0, -4436), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -4435), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4434), 0), 100000000, 0, -4433), 0), 100000000, 0, -4432), 0, (("src/lexers.mli", 29, 1498, 1498), ("src/lexers.mli", 29, 1498, 1553), 0), 0, Tag1 ("Lexers", 10)), 0); (("parse_environment_path", 2414), ((Tag1 (0, (Tag3 (Tag1 ((("Loc", 1447)), "source"), 0, (0)), 100000000, 0, -4431), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -4430), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4429)], (0)), 100000000, 0, -4428), 0), 100000000, 0, -4427), 0), 100000000, 0, -4426), 0, (("src/lexers.mli", 36, 1765, 1765), ("src/lexers.mli", 36, 1765, 1836), 0), 0, Tag1 ("Lexers", 11)), 0); (("parse_environment_path_w", 2415), ((Tag1 (0, (Tag3 (Tag1 ((("Loc", 1447)), "source"), 0, (0)), 100000000, 0, -4425), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -4424), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4423)], (0)), 100000000, 0, -4422), 0), 100000000, 0, -4421), 0), 100000000, 0, -4420), 0, (("src/lexers.mli", 38, 1887, 1887), ("src/lexers.mli", 38, 1887, 1960), 0), 0, Tag1 ("Lexers", 12)), 0); (("conf_lines", 2416), ((Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4419)], (0)), 100000000, 0, -4418), (Tag1 (0, (Tag3 (Tag1 ((("Loc", 1447)), "source"), 0, (0)), 100000000, 0, -4417), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -4416), (Tag3 ((("conf", 2407)), 0, (0)), 100000000, 0, -4415), 0), 100000000, 0, -4414), 0), 100000000, 0, -4413), 0), 100000000, 0, -4412), 0, (("src/lexers.mli", 40, 1962, 1962), ("src/lexers.mli", 40, 1962, 2031), 0), 0, Tag1 ("Lexers", 13)), 0); (("path_scheme", 2417), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4411), (Tag1 (0, (Tag3 (Tag1 ((("Loc", 1447)), "source"), 0, (0)), 100000000, 0, -4410), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -4409), (Tag3 ((Tag3 ("list", 9)), [(Tag8 (([("Var", (((Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4407); (Tag3 (Tag1 ((("Glob", 1459)), "globber"), 0, (0)), 100000000, 0, -4408)]), 100000000, 0, -4406)))); ("Word", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4405))))], (0, 100000000, 0, -4404), 1, 0, 0)), 100000000, 0, -4403)], (0)), 100000000, 0, -4402), 0), 100000000, 0, -4401), 0), 100000000, 0, -4400), 0), 100000000, 0, -4399), 0, (("src/lexers.mli", 41, 2032, 2032), ("src/lexers.mli", 44, 2145, 2153), 0), 0, Tag1 ("Lexers", 14)), 0); (("ocamlfind_query", 2418), ((Tag1 (0, (Tag3 (Tag1 ((("Loc", 1447)), "source"), 0, (0)), 100000000, 0, -4398), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -4397), (Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4391); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4392); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4393); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4394); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4395); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4396)]), 100000000, 0, -4390), 0), 100000000, 0, -4389), 0), 100000000, 0, -4388), 0, (("src/lexers.mli", 46, 2155, 2155), ("src/lexers.mli", 47, 2208, 2261), 0), 0, Tag1 ("Lexers", 15)), 0); (("tag_gen", 2419), ((Tag1 (0, (Tag3 (Tag1 ((("Loc", 1447)), "source"), 0, (0)), 100000000, 0, -4387), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -4386), (Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4383); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4385)], (0)), 100000000, 0, -4384)]), 100000000, 0, -4382), 0), 100000000, 0, -4381), 0), 100000000, 0, -4380), 0, (("src/lexers.mli", 49, 2263, 2263), ("src/lexers.mli", 49, 2263, 2330), 0), 0, Tag1 ("Lexers", 16)), 0)]), 0, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), Tag1 ("", 14)), 0, 0); Tag3 (("Param_tags", 1461), 0, (Tag1 ([(("declare", 2420), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4518), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4517), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4516), 0), 100000000, 0, -4515), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4514), 0), 100000000, 0, -4513), 0), 100000000, 0, -4512), 0, (("src/param_tags.mli", 17, 928, 928), ("src/param_tags.mli", 17, 928, 975), 0), 0, Tag1 ("Param_tags", 0)), 0); (("acknowledge", 2421), ((Tag1 (0, (Tag3 (Tag1 ((("Loc", 1447)), "source"), 0, (0)), 100000000, 0, -4511), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("Loc", 1447)), "location"), 0, (0)), 100000000, 0, -4510)], (0)), 100000000, 0, -4509), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4508), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4507), 0), 100000000, 0, -4506), 0), 100000000, 0, -4505), 0), 100000000, 0, -4504), 0, (("src/param_tags.mli", 26, 1276, 1276), ("src/param_tags.mli", 26, 1276, 1344), 0), 0, Tag1 ("Param_tags", 1)), 0); (("init", 2422), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4503), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4502), 0), 100000000, 0, -4501), 0, (("src/param_tags.mli", 34, 1616, 1616), ("src/param_tags.mli", 34, 1616, 1638), 0), 0, Tag1 ("Param_tags", 2)), 0); (("partial_init", 2423), ((Tag1 (Tag1 ("quiet"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4500)], (0)), 100000000, 0, -4499), (Tag1 (0, (Tag3 (Tag1 ((("Loc", 1447)), "source"), 0, (0)), 100000000, 0, -4498), (Tag1 (0, (Tag3 (Tag1 ((("Tags", 1452)), "t"), 0, (0)), 100000000, 0, -4497), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4496), 0), 100000000, 0, -4495), 0), 100000000, 0, -4494), 0), 100000000, 0, -4493), 0, (("src/param_tags.mli", 41, 1860, 1860), ("src/param_tags.mli", 41, 1860, 1921), 0), 0, Tag1 ("Param_tags", 3)), 0); (("make", 2424), ((Tag1 (0, (Tag3 (Tag1 ((("Tags", 1452)), "elt"), 0, (0)), 100000000, 0, -4492), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4491), (Tag3 (Tag1 ((("Tags", 1452)), "elt"), 0, (0)), 100000000, 0, -4490), 0), 100000000, 0, -4489), 0), 100000000, 0, -4488), 0, (("src/param_tags.mli", 48, 2128, 2128), ("src/param_tags.mli", 48, 2128, 2168), 0), 0, Tag1 ("Param_tags", 4)), 0); (("is_applied", 2425), ((Tag1 (0, (Tag3 (Tag1 ((("Tags", 1452)), "elt"), 0, (0)), 100000000, 0, -4487), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4486), 0), 100000000, 0, -4485), 0, (("src/param_tags.mli", 53, 2282, 2282), ("src/param_tags.mli", 53, 2282, 2314), 0), 0, Tag1 ("Param_tags", 5)), 0)]), 0, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), Tag1 ("", 15)), 0, 0); Tag3 (("Command", 1462), 0, (Tag1 ([Tag1 (("tags", 2426), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Tags", 1452)), "t"), 0, (0)), 100000000, 0, -4655)), 0, 0, 0, 0, (("src/command.mli", 20, 1062, 1094), ("src/command.mli", 20, 1062, 1112), 0), 0, 0, 0, Tag1 ("Command", 0)), 1, 0); Tag1 (("pathname", 2427), (0, 0, 0, 1, ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4654)), 0, 0, 0, 0, (("src/command.mli", 20, 1062, 1117), ("src/command.mli", 20, 1062, 1139), 0), 0, 0, 0, Tag1 ("Command", 1)), 1, 0); Tag1 (("t", 2428), (0, 0, Tag1 ([(("Seq", 969), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 2428)), 0, (0)), 100000000, 0, -4649)], (0)), 100000000, 0, -4648)]), 0, (("src/signatures.mli", 176, 6206, 6210), ("src/signatures.mli", 176, 6206, 6225), 0), 0, Tag1 ("Signatures", 85)); (("Cmd", 970), ([(Tag3 ((("spec", 2429)), 0, (0)), 100000000, 0, -4650)]), 0, (("src/signatures.mli", 177, 6280, 6284), ("src/signatures.mli", 177, 6280, 6297), 0), 0, Tag1 ("Signatures", 86)); (("Echo", 971), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4652)], (0)), 100000000, 0, -4651); (Tag3 ((("pathname", 2427)), 0, (0)), 100000000, 0, -4653)]), 0, (("src/signatures.mli", 178, 6360, 6364), ("src/signatures.mli", 178, 6360, 6396), 0), 0, Tag1 ("Signatures", 87)); (("Nop", 972), (0), 0, (("src/signatures.mli", 180, 6481, 6485), ("src/signatures.mli", 180, 6481, 6490), 0), 0, Tag1 ("Signatures", 88))], 0), 1, 0, 0, 0, 0, 0, (("src/signatures.mli", 175, 6195, 6197), ("src/signatures.mli", 180, 6481, 6490), 0), 0, 0, 0, Tag1 ("Signatures", 83)), 1, 0); Tag1 (("spec", 2429), (0, 0, Tag1 ([(("N", 973), (0), 0, (("src/signatures.mli", 184, 6625, 6629), ("src/signatures.mli", 184, 6625, 6632), 0), 0, Tag1 ("Signatures", 89)); (("S", 974), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("spec", 2429)), 0, (0)), 100000000, 0, -4640)], (0)), 100000000, 0, -4639)]), 0, (("src/signatures.mli", 185, 6667, 6671), ("src/signatures.mli", 185, 6667, 6687), 0), 0, Tag1 ("Signatures", 90)); (("A", 975), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4641)]), 0, (("src/signatures.mli", 186, 6747, 6751), ("src/signatures.mli", 186, 6747, 6764), 0), 0, Tag1 ("Signatures", 91)); (("P", 976), ([(Tag3 ((("pathname", 2427)), 0, (0)), 100000000, 0, -4642)]), 0, (("src/signatures.mli", 187, 6784, 6788), ("src/signatures.mli", 187, 6784, 6803), 0), 0, Tag1 ("Signatures", 92)); (("Px", 977), ([(Tag3 ((("pathname", 2427)), 0, (0)), 100000000, 0, -4643)]), 0, (("src/signatures.mli", 188, 6824, 6828), ("src/signatures.mli", 188, 6824, 6844), 0), 0, Tag1 ("Signatures", 93)); (("Sh", 978), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4644)]), 0, (("src/signatures.mli", 190, 6943, 6947), ("src/signatures.mli", 190, 6943, 6961), 0), 0, Tag1 ("Signatures", 94)); (("T", 979), ([(Tag3 ((("tags", 2426)), 0, (0)), 100000000, 0, -4645)]), 0, (("src/signatures.mli", 191, 7022, 7026), ("src/signatures.mli", 191, 7022, 7037), 0), 0, Tag1 ("Signatures", 95)); (("V", 980), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4646)]), 0, (("src/signatures.mli", 196, 7319, 7323), ("src/signatures.mli", 196, 7319, 7336), 0), 0, Tag1 ("Signatures", 96)); (("Quote", 981), ([(Tag3 ((("spec", 2429)), 0, (0)), 100000000, 0, -4647)]), 0, (("src/signatures.mli", 198, 7451, 7455), ("src/signatures.mli", 198, 7451, 7470), 0), 0, Tag1 ("Signatures", 97))], 0), 1, 0, 0, 0, 0, 0, (("src/signatures.mli", 183, 6612, 6614), ("src/signatures.mli", 198, 7451, 7470), 0), 0, 0, 0, Tag1 ("Signatures", 84)), 2, 0); (("atomize", 2430), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4638)], (0)), 100000000, 0, -4637), (Tag3 ((("spec", 2429)), 0, (0)), 100000000, 0, -4636), 0), 100000000, 0, -4635), 0, (("src/signatures.mli", 217, 7996, 7998), ("src/signatures.mli", 217, 7996, 8031), 0), 0, Tag1 ("Signatures", 98)), 0); (("atomize_paths", 2431), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4634)], (0)), 100000000, 0, -4633), (Tag3 ((("spec", 2429)), 0, (0)), 100000000, 0, -4632), 0), 100000000, 0, -4631), 0, (("src/signatures.mli", 220, 8116, 8118), ("src/signatures.mli", 220, 8116, 8157), 0), 0, Tag1 ("Signatures", 99)), 0); (("execute", 2432), ((Tag1 (Tag1 ("quiet"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4630)], (0)), 100000000, 0, -4629), (Tag1 (Tag1 ("pretend"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4628)], (0)), 100000000, 0, -4627), (Tag1 (0, (Tag3 ((("t", 2428)), 0, (0)), 100000000, 0, -4626), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4625), 0), 100000000, 0, -4624), 0), 100000000, 0, -4623), 0), 100000000, 0, -4622), 0, (("src/signatures.mli", 223, 8185, 8187), ("src/signatures.mli", 223, 8185, 8242), 0), 0, Tag1 ("Signatures", 100)), 0); (("execute_many", 2433), ((Tag1 (Tag1 ("quiet"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4621)], (0)), 100000000, 0, -4620), (Tag1 (Tag1 ("pretend"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4619)], (0)), 100000000, 0, -4618), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 2428)), 0, (0)), 100000000, 0, -4617)], (0)), 100000000, 0, -4616), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4614)], (0)), 100000000, 0, -4613); (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -4615)]), 100000000, 0, -4612)], (0)), 100000000, 0, -4611), 0), 100000000, 0, -4610), 0), 100000000, 0, -4609), 0), 100000000, 0, -4608), 0, (("src/signatures.mli", 227, 8358, 8360), ("src/signatures.mli", 227, 8358, 8445), 0), 0, Tag1 ("Signatures", 101)), 0); (("setup_virtual_command_solver", 2434), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4607), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4606), (Tag3 ((("spec", 2429)), 0, (0)), 100000000, 0, -4605), 0), 100000000, 0, -4604), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4603), 0), 100000000, 0, -4602), 0), 100000000, 0, -4601), 0, (("src/signatures.mli", 232, 8625, 8627), ("src/signatures.mli", 232, 8625, 8694), 0), 0, Tag1 ("Signatures", 102)), 0); (("search_in_path", 2435), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4600), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4599), 0), 100000000, 0, -4598), 0, (("src/signatures.mli", 236, 8790, 8792), ("src/signatures.mli", 236, 8790, 8829), 0), 0, Tag1 ("Signatures", 103)), 0); (("reduce", 2436), ((Tag1 (0, (Tag3 ((("spec", 2429)), 0, (0)), 100000000, 0, -4597), (Tag3 ((("spec", 2429)), 0, (0)), 100000000, 0, -4596), 0), 100000000, 0, -4595), 0, (("src/signatures.mli", 240, 8943, 8945), ("src/signatures.mli", 240, 8943, 8970), 0), 0, Tag1 ("Signatures", 104)), 0); (("print", 2437), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -4594), (Tag1 (0, (Tag3 ((("t", 2428)), 0, (0)), 100000000, 0, -4593), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4592), 0), 100000000, 0, -4591), 0), 100000000, 0, -4590), 0, (("src/signatures.mli", 243, 9050, 9052), ("src/signatures.mli", 243, 9050, 9093), 0), 0, Tag1 ("Signatures", 105)), 0); (("to_string", 2438), ((Tag1 (0, (Tag3 ((("t", 2428)), 0, (0)), 100000000, 0, -4589), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4588), 0), 100000000, 0, -4587), 0, (("src/signatures.mli", 246, 9158, 9160), ("src/signatures.mli", 246, 9158, 9187), 0), 0, Tag1 ("Signatures", 106)), 0); (("string_of_command_spec", 2439), ((Tag1 (0, (Tag3 ((("spec", 2429)), 0, (0)), 100000000, 0, -4586), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4585), 0), 100000000, 0, -4584), 0, (("src/signatures.mli", 250, 9287, 9289), ("src/signatures.mli", 250, 9287, 9332), 0), 0, Tag1 ("Signatures", 107)), 0); (("string_target_and_tags_of_command_spec", 2440), ((Tag1 (0, (Tag3 ((("spec", 2429)), 0, (0)), 100000000, 0, -4583), (Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4580); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4581); (Tag3 (Tag1 ((("Tags", 1452)), "t"), 0, (0)), 100000000, 0, -4582)]), 100000000, 0, -4579), 0), 100000000, 0, -4578), 0, (("src/command.mli", 24, 1198, 1198), ("src/command.mli", 24, 1198, 1275), 0), 0, Tag1 ("Command", 2)), 0); (("iter_tags", 2441), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((("Tags", 1452)), "t"), 0, (0)), 100000000, 0, -4577), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4576), 0), 100000000, 0, -4575), (Tag1 (0, (Tag3 ((("t", 2428)), 0, (0)), 100000000, 0, -4574), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4573), 0), 100000000, 0, -4572), 0), 100000000, 0, -4571), 0, (("src/command.mli", 26, 1277, 1277), ("src/command.mli", 26, 1277, 1322), 0), 0, Tag1 ("Command", 3)), 0); (("fold_pathnames", 2442), ((Tag1 (0, (Tag1 (0, (Tag3 ((("pathname", 2427)), 0, (0)), 100000000, 0, -4570), (Tag1 (0, ((("a")), 100000000, 0, -4566), ((("a")), 100000000, 0, -4566), 0), 100000000, 0, -4569), 0), 100000000, 0, -4568), (Tag1 (0, (Tag3 ((("t", 2428)), 0, (0)), 100000000, 0, -4567), (Tag1 (0, ((("a")), 100000000, 0, -4566), ((("a")), 100000000, 0, -4566), 0), 100000000, 0, -4565), 0), 100000000, 0, -4564), 0), 100000000, 0, -4563), 0, (("src/command.mli", 28, 1324, 1324), ("src/command.mli", 28, 1324, 1384), 0), 0, Tag1 ("Command", 4)), 0); (("digest", 2443), ((Tag1 (0, (Tag3 ((("t", 2428)), 0, (0)), 100000000, 0, -4562), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Digest"), "t"), 0, (0)), 100000000, 0, -4561), 0), 100000000, 0, -4560), 0, (("src/command.mli", 31, 1419, 1419), ("src/command.mli", 31, 1419, 1445), 0), 0, Tag1 ("Command", 5)), 0); (("jobs", 2444), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -4559)], (0)), 100000000, 0, -4558), 0, (("src/command.mli", 34, 1487, 1487), ("src/command.mli", 34, 1487, 1505), 0), 0, Tag1 ("Command", 6)), 0); (("tag_handler", 2445), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag1 (0, (Tag3 (Tag1 ((("Tags", 1452)), "t"), 0, (0)), 100000000, 0, -4557), (Tag3 ((("spec", 2429)), 0, (0)), 100000000, 0, -4556), 0), 100000000, 0, -4555)], (0)), 100000000, 0, -4554), 0, (("src/command.mli", 38, 1651, 1651), ("src/command.mli", 38, 1651, 1689), 0), 0, Tag1 ("Command", 7)), 0); (("dump_parallel_stats", 2446), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4553), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4552), 0), 100000000, 0, -4551), 0, (("src/command.mli", 41, 1718, 1718), ("src/command.mli", 41, 1718, 1756), 0), 0, Tag1 ("Command", 8)), 0); (("deps_of_tags", 2447), ((Tag1 (0, (Tag3 (Tag1 ((("Tags", 1452)), "t"), 0, (0)), 100000000, 0, -4550), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("pathname", 2427)), 0, (0)), 100000000, 0, -4549)], (0)), 100000000, 0, -4548), 0), 100000000, 0, -4547), 0, (("src/command.mli", 43, 1758, 1758), ("src/command.mli", 43, 1758, 1800), 0), 0, Tag1 ("Command", 9)), 0); (("dep", 2448), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Tags", 1452)), "elt"), 0, (0)), 100000000, 0, -4546)], (0)), 100000000, 0, -4545), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("pathname", 2427)), 0, (0)), 100000000, 0, -4544)], (0)), 100000000, 0, -4543), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4542), 0), 100000000, 0, -4541), 0), 100000000, 0, -4540), 0, (("src/command.mli", 46, 1874, 1874), ("src/command.mli", 46, 1874, 1922), 0), 0, Tag1 ("Command", 10)), 0); (("pdep", 2449), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Tags", 1452)), "elt"), 0, (0)), 100000000, 0, -4539)], (0)), 100000000, 0, -4538), (Tag1 (0, (Tag3 (Tag1 ((("Tags", 1452)), "elt"), 0, (0)), 100000000, 0, -4537), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4536), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("pathname", 2427)), 0, (0)), 100000000, 0, -4535)], (0)), 100000000, 0, -4534), 0), 100000000, 0, -4533), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4532), 0), 100000000, 0, -4531), 0), 100000000, 0, -4530), 0), 100000000, 0, -4529), 0, (("src/command.mli", 48, 1924, 1924), ("src/command.mli", 48, 1924, 1997), 0), 0, Tag1 ("Command", 11)), 0); (("list_all_deps", 2450), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4528), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((("Tags", 1452)), "t"), 0, (0)), 100000000, 0, -4525); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("pathname", 2427)), 0, (0)), 100000000, 0, -4527)], (0)), 100000000, 0, -4526)]), 100000000, 0, -4524)], (0)), 100000000, 0, -4523), 0), 100000000, 0, -4522), 0, (("src/command.mli", 50, 1999, 1999), ("src/command.mli", 50, 1999, 2056), 0), 0, Tag1 ("Command", 12)), 0); (("file_or_exe_exists", 2451), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4521), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4520), 0), 100000000, 0, -4519), 0, (("src/command.mli", 52, 2058, 2058), ("src/command.mli", 52, 2058, 2096), 0), 0, Tag1 ("Command", 13)), 0)]), 0, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), Tag1 ("", 16)), 0, 0); Tag3 (("Ocamlbuild_config", 1463), 0, (Tag1 ([(("bindir", 2452), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4668), 0, (("src/ocamlbuild_config.ml", 3, 54, 58), ("src/ocamlbuild_config.ml", 3, 54, 64), 0), 0, Tag1 ("Ocamlbuild_config", 0)), 0); (("libdir", 2453), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4667), 0, (("src/ocamlbuild_config.ml", 4, 108, 112), ("src/ocamlbuild_config.ml", 4, 108, 118), 0), 0, Tag1 ("Ocamlbuild_config", 1)), 0); (("ocaml_libdir", 2454), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4666), 0, (("src/ocamlbuild_config.ml", 5, 162, 166), ("src/ocamlbuild_config.ml", 5, 162, 178), 0), 0, Tag1 ("Ocamlbuild_config", 2)), 0); (("libdir_abs", 2455), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4665), 0, (("src/ocamlbuild_config.ml", 6, 228, 232), ("src/ocamlbuild_config.ml", 6, 228, 242), 0), 0, Tag1 ("Ocamlbuild_config", 3)), 0); (("ocaml_native", 2456), ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4664), 0, (("src/ocamlbuild_config.ml", 7, 286, 290), ("src/ocamlbuild_config.ml", 7, 286, 302), 0), 0, Tag1 ("Ocamlbuild_config", 4)), 0); (("ocaml_native_tools", 2457), ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4663), 0, (("src/ocamlbuild_config.ml", 8, 310, 314), ("src/ocamlbuild_config.ml", 8, 310, 332), 0), 0, Tag1 ("Ocamlbuild_config", 5)), 0); (("supports_shared_libraries", 2458), ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4662), 0, (("src/ocamlbuild_config.ml", 9, 340, 344), ("src/ocamlbuild_config.ml", 9, 340, 369), 0), 0, Tag1 ("Ocamlbuild_config", 6)), 0); (("a", 2459), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4661), 0, (("src/ocamlbuild_config.ml", 10, 377, 381), ("src/ocamlbuild_config.ml", 10, 377, 382), 0), 0, Tag1 ("Ocamlbuild_config", 7)), 0); (("o", 2460), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4660), 0, (("src/ocamlbuild_config.ml", 11, 389, 393), ("src/ocamlbuild_config.ml", 11, 389, 394), 0), 0, Tag1 ("Ocamlbuild_config", 8)), 0); (("so", 2461), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4659), 0, (("src/ocamlbuild_config.ml", 12, 401, 405), ("src/ocamlbuild_config.ml", 12, 401, 407), 0), 0, Tag1 ("Ocamlbuild_config", 9)), 0); (("ext_dll", 2462), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4658), 0, (("src/ocamlbuild_config.ml", 13, 415, 419), ("src/ocamlbuild_config.ml", 13, 415, 426), 0), 0, Tag1 ("Ocamlbuild_config", 10)), 0); (("exe", 2463), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4657), 0, (("src/ocamlbuild_config.ml", 14, 435, 439), ("src/ocamlbuild_config.ml", 14, 435, 442), 0), 0, Tag1 ("Ocamlbuild_config", 11)), 0); (("version", 2464), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4656), 0, (("src/ocamlbuild_config.ml", 15, 448, 452), ("src/ocamlbuild_config.ml", 15, 448, 459), 0), 0, Tag1 ("Ocamlbuild_config", 12)), 0)]), 0, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), Tag1 ("", 17)), 0, 0); Tag3 (("Ocamlbuild_where", 1464), 0, (Tag1 ([(("bindir", 2465), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4672)], (0)), 100000000, 0, -4671), 0, (("src/ocamlbuild_where.mli", 18, 933, 933), ("src/ocamlbuild_where.mli", 18, 933, 956), 0), 0, Tag1 ("Ocamlbuild_where", 0)), 0); (("libdir", 2466), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4670)], (0)), 100000000, 0, -4669), 0, (("src/ocamlbuild_where.mli", 19, 957, 957), ("src/ocamlbuild_where.mli", 19, 957, 980), 0), 0, Tag1 ("Ocamlbuild_where", 1)), 0)]), 0, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), Tag1 ("", 18)), 0, 0); Tag3 (("Slurp", 1465), 0, (Tag1 ([Tag1 (("entry", 2467), ([((("a")), 100000000, 0, -4719)], 1, Tag1 ([(("Dir", 270), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4715); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4716); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lazy"), "t"), [(Tag3 (Tag1 ((("My_unix", 1451)), "stats"), 0, (0)), 100000000, 0, -4718)], (0)), 100000000, 0, -4717); ((("a")), 100000000, 0, -4719); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lazy"), "t"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("entry", 2467)), [((("a")), 100000000, 0, -4719)], (0)), 100000000, 0, -4722)], (0)), 100000000, 0, -4721)], (0)), 100000000, 0, -4720)]), 0, (("src/slurp.mli", 21, 1031, 1035), ("src/slurp.mli", 21, 1031, 1108), 0), 0, Tag1 ("Slurp", 1)); (("File", 296), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4723); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4724); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lazy"), "t"), [(Tag3 (Tag1 ((("My_unix", 1451)), "stats"), 0, (0)), 100000000, 0, -4726)], (0)), 100000000, 0, -4725); ((("a")), 100000000, 0, -4719)]), 0, (("src/slurp.mli", 25, 1343, 1345), ("src/slurp.mli", 25, 1343, 1398), 0), 0, Tag1 ("Slurp", 2)); (("Error", 297), ([(Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -4727)]), 0, (("src/slurp.mli", 28, 1563, 1565), ("src/slurp.mli", 28, 1563, 1579), 0), 0, Tag1 ("Slurp", 3)); (("Nothing", 298), (0), 0, (("src/slurp.mli", 30, 1678, 1680), ("src/slurp.mli", 30, 1678, 1689), 0), 0, Tag1 ("Slurp", 4))], 0), 1, 0, [25], [0], 0, 0, (("src/slurp.mli", 20, 1015, 1015), ("src/slurp.mli", 30, 1678, 1689), 0), 0, 0, 0, Tag1 ("Slurp", 0)), 1, 0); (("slurp", 2468), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4714), (Tag3 ((("entry", 2467)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4713)], (0)), 100000000, 0, -4712), 0), 100000000, 0, -4711), 0, (("src/slurp.mli", 34, 1813, 1813), ("src/slurp.mli", 34, 1813, 1845), 0), 0, Tag1 ("Slurp", 5)), 0); (("filter", 2469), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4710), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4709), (Tag1 (0, ((("a")), 100000000, 0, -4703), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4708), 0), 100000000, 0, -4707), 0), 100000000, 0, -4706), 0), 100000000, 0, -4705), (Tag1 (0, (Tag3 ((("entry", 2467)), [((("a")), 100000000, 0, -4703)], (0)), 100000000, 0, -4704), (Tag3 ((("entry", 2467)), [((("a")), 100000000, 0, -4703)], (0)), 100000000, 0, -4702), 0), 100000000, 0, -4701), 0), 100000000, 0, -4700), 0, (("src/slurp.mli", 38, 1951, 1951), ("src/slurp.mli", 38, 1951, 2020), 0), 0, Tag1 ("Slurp", 6)), 0); (("map", 2470), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4699), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4698), (Tag1 (0, ((("a")), 100000000, 0, -4694), ((("b")), 100000000, 0, -4692), 0), 100000000, 0, -4697), 0), 100000000, 0, -4696), 0), 100000000, 0, -4695), (Tag1 (0, (Tag3 ((("entry", 2467)), [((("a")), 100000000, 0, -4694)], (0)), 100000000, 0, -4693), (Tag3 ((("entry", 2467)), [((("b")), 100000000, 0, -4692)], (0)), 100000000, 0, -4691), 0), 100000000, 0, -4690), 0), 100000000, 0, -4689), 0, (("src/slurp.mli", 42, 2153, 2153), ("src/slurp.mli", 42, 2153, 2217), 0), 0, Tag1 ("Slurp", 7)), 0); (("fold", 2471), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4688), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4687), (Tag1 (0, ((("b")), 100000000, 0, -4682), (Tag1 (0, ((("a")), 100000000, 0, -4680), ((("a")), 100000000, 0, -4680), 0), 100000000, 0, -4686), 0), 100000000, 0, -4685), 0), 100000000, 0, -4684), 0), 100000000, 0, -4683), (Tag1 (0, (Tag3 ((("entry", 2467)), [((("b")), 100000000, 0, -4682)], (0)), 100000000, 0, -4681), (Tag1 (0, ((("a")), 100000000, 0, -4680), ((("a")), 100000000, 0, -4680), 0), 100000000, 0, -4679), 0), 100000000, 0, -4678), 0), 100000000, 0, -4677), 0, (("src/slurp.mli", 47, 2418, 2418), ("src/slurp.mli", 47, 2418, 2489), 0), 0, Tag1 ("Slurp", 8)), 0); (("force", 2472), ((Tag1 (0, (Tag3 ((("entry", 2467)), [((("a")), 100000000, 0, -4676)], (0)), 100000000, 0, -4675), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4674), 0), 100000000, 0, -4673), 0, (("src/slurp.mli", 50, 2539, 2539), ("src/slurp.mli", 50, 2539, 2567), 0), 0, Tag1 ("Slurp", 9)), 0)]), 0, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), Tag1 ("", 19)), 0, 0); Tag3 (("Options", 1466), 0, (Tag1 ([Tag1 (("command_spec", 2473), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Command", 1462)), "spec"), 0, (0)), 100000000, 0, -4876)), 0, 0, 0, 0, (("src/options.mli", 17, 932, 964), ("src/options.mli", 17, 932, 996), 0), 0, 0, 0, Tag1 ("Options", 0)), 1, 0); (("build_dir", 2474), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4875)], (0)), 100000000, 0, -4874), 0, (("src/signatures.mli", 380, 15246, 15248), ("src/signatures.mli", 380, 15246, 15274), 0), 0, Tag1 ("Signatures", 146)), 0); (("include_dirs", 2475), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4873)], (0)), 100000000, 0, -4872)], (0)), 100000000, 0, -4871), 0, (("src/signatures.mli", 381, 15275, 15277), ("src/signatures.mli", 381, 15275, 15311), 0), 0, Tag1 ("Signatures", 147)), 0); (("exclude_dirs", 2476), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4870)], (0)), 100000000, 0, -4869)], (0)), 100000000, 0, -4868), 0, (("src/signatures.mli", 382, 15312, 15314), ("src/signatures.mli", 382, 15312, 15348), 0), 0, Tag1 ("Signatures", 148)), 0); (("nothing_should_be_rebuilt", 2477), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4867)], (0)), 100000000, 0, -4866), 0, (("src/signatures.mli", 383, 15349, 15351), ("src/signatures.mli", 383, 15349, 15391), 0), 0, Tag1 ("Signatures", 149)), 0); (("ocamlc", 2478), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 2473)), 0, (0)), 100000000, 0, -4865)], (0)), 100000000, 0, -4864), 0, (("src/signatures.mli", 384, 15392, 15394), ("src/signatures.mli", 384, 15392, 15423), 0), 0, Tag1 ("Signatures", 150)), 0); (("plugin_ocamlc", 2479), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 2473)), 0, (0)), 100000000, 0, -4863)], (0)), 100000000, 0, -4862), 0, (("src/signatures.mli", 385, 15424, 15426), ("src/signatures.mli", 385, 15424, 15462), 0), 0, Tag1 ("Signatures", 151)), 0); (("ocamlopt", 2480), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 2473)), 0, (0)), 100000000, 0, -4861)], (0)), 100000000, 0, -4860), 0, (("src/signatures.mli", 386, 15463, 15465), ("src/signatures.mli", 386, 15463, 15496), 0), 0, Tag1 ("Signatures", 152)), 0); (("plugin_ocamlopt", 2481), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 2473)), 0, (0)), 100000000, 0, -4859)], (0)), 100000000, 0, -4858), 0, (("src/signatures.mli", 387, 15497, 15499), ("src/signatures.mli", 387, 15497, 15537), 0), 0, Tag1 ("Signatures", 153)), 0); (("ocamldep", 2482), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 2473)), 0, (0)), 100000000, 0, -4857)], (0)), 100000000, 0, -4856), 0, (("src/signatures.mli", 388, 15538, 15540), ("src/signatures.mli", 388, 15538, 15571), 0), 0, Tag1 ("Signatures", 154)), 0); (("ocamldoc", 2483), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 2473)), 0, (0)), 100000000, 0, -4855)], (0)), 100000000, 0, -4854), 0, (("src/signatures.mli", 389, 15572, 15574), ("src/signatures.mli", 389, 15572, 15605), 0), 0, Tag1 ("Signatures", 155)), 0); (("ocamlyacc", 2484), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 2473)), 0, (0)), 100000000, 0, -4853)], (0)), 100000000, 0, -4852), 0, (("src/signatures.mli", 390, 15606, 15608), ("src/signatures.mli", 390, 15606, 15640), 0), 0, Tag1 ("Signatures", 156)), 0); (("ocamllex", 2485), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 2473)), 0, (0)), 100000000, 0, -4851)], (0)), 100000000, 0, -4850), 0, (("src/signatures.mli", 391, 15641, 15643), ("src/signatures.mli", 391, 15641, 15674), 0), 0, Tag1 ("Signatures", 157)), 0); (("ocamlrun", 2486), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 2473)), 0, (0)), 100000000, 0, -4849)], (0)), 100000000, 0, -4848), 0, (("src/signatures.mli", 392, 15675, 15677), ("src/signatures.mli", 392, 15675, 15708), 0), 0, Tag1 ("Signatures", 158)), 0); (("ocamlmklib", 2487), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 2473)), 0, (0)), 100000000, 0, -4847)], (0)), 100000000, 0, -4846), 0, (("src/signatures.mli", 393, 15709, 15711), ("src/signatures.mli", 393, 15709, 15744), 0), 0, Tag1 ("Signatures", 159)), 0); (("ocamlmktop", 2488), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 2473)), 0, (0)), 100000000, 0, -4845)], (0)), 100000000, 0, -4844), 0, (("src/signatures.mli", 394, 15745, 15747), ("src/signatures.mli", 394, 15745, 15780), 0), 0, Tag1 ("Signatures", 160)), 0); (("hygiene", 2489), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4843)], (0)), 100000000, 0, -4842), 0, (("src/signatures.mli", 395, 15781, 15783), ("src/signatures.mli", 395, 15781, 15805), 0), 0, Tag1 ("Signatures", 161)), 0); (("sanitize", 2490), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4841)], (0)), 100000000, 0, -4840), 0, (("src/signatures.mli", 396, 15806, 15808), ("src/signatures.mli", 396, 15806, 15831), 0), 0, Tag1 ("Signatures", 162)), 0); (("sanitization_script", 2491), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4839)], (0)), 100000000, 0, -4838), 0, (("src/signatures.mli", 397, 15832, 15834), ("src/signatures.mli", 397, 15832, 15870), 0), 0, Tag1 ("Signatures", 163)), 0); (("ignore_auto", 2492), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4837)], (0)), 100000000, 0, -4836), 0, (("src/signatures.mli", 398, 15871, 15873), ("src/signatures.mli", 398, 15871, 15899), 0), 0, Tag1 ("Signatures", 164)), 0); (("plugin", 2493), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4835)], (0)), 100000000, 0, -4834), 0, (("src/signatures.mli", 399, 15900, 15902), ("src/signatures.mli", 399, 15900, 15923), 0), 0, Tag1 ("Signatures", 165)), 0); (("just_plugin", 2494), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4833)], (0)), 100000000, 0, -4832), 0, (("src/signatures.mli", 400, 15924, 15926), ("src/signatures.mli", 400, 15924, 15952), 0), 0, Tag1 ("Signatures", 166)), 0); (("native_plugin", 2495), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4831)], (0)), 100000000, 0, -4830), 0, (("src/signatures.mli", 401, 15953, 15955), ("src/signatures.mli", 401, 15953, 15983), 0), 0, Tag1 ("Signatures", 167)), 0); (("make_links", 2496), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4829)], (0)), 100000000, 0, -4828), 0, (("src/signatures.mli", 402, 15984, 15986), ("src/signatures.mli", 402, 15984, 16011), 0), 0, Tag1 ("Signatures", 168)), 0); (("nostdlib", 2497), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4827)], (0)), 100000000, 0, -4826), 0, (("src/signatures.mli", 403, 16012, 16014), ("src/signatures.mli", 403, 16012, 16037), 0), 0, Tag1 ("Signatures", 169)), 0); (("program_to_execute", 2498), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4825)], (0)), 100000000, 0, -4824), 0, (("src/signatures.mli", 404, 16038, 16040), ("src/signatures.mli", 404, 16038, 16073), 0), 0, Tag1 ("Signatures", 170)), 0); (("must_clean", 2499), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4823)], (0)), 100000000, 0, -4822), 0, (("src/signatures.mli", 405, 16074, 16076), ("src/signatures.mli", 405, 16074, 16101), 0), 0, Tag1 ("Signatures", 171)), 0); (("catch_errors", 2500), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4821)], (0)), 100000000, 0, -4820), 0, (("src/signatures.mli", 406, 16102, 16104), ("src/signatures.mli", 406, 16102, 16131), 0), 0, Tag1 ("Signatures", 172)), 0); (("use_menhir", 2501), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4819)], (0)), 100000000, 0, -4818), 0, (("src/signatures.mli", 407, 16132, 16134), ("src/signatures.mli", 407, 16132, 16159), 0), 0, Tag1 ("Signatures", 173)), 0); (("show_documentation", 2502), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4817)], (0)), 100000000, 0, -4816), 0, (("src/signatures.mli", 408, 16160, 16162), ("src/signatures.mli", 408, 16160, 16195), 0), 0, Tag1 ("Signatures", 174)), 0); (("recursive", 2503), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4815)], (0)), 100000000, 0, -4814), 0, (("src/signatures.mli", 409, 16196, 16198), ("src/signatures.mli", 409, 16196, 16222), 0), 0, Tag1 ("Signatures", 175)), 0); (("use_ocamlfind", 2504), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4813)], (0)), 100000000, 0, -4812), 0, (("src/signatures.mli", 410, 16223, 16225), ("src/signatures.mli", 410, 16223, 16253), 0), 0, Tag1 ("Signatures", 176)), 0); (("plugin_use_ocamlfind", 2505), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4811)], (0)), 100000000, 0, -4810), 0, (("src/signatures.mli", 411, 16254, 16256), ("src/signatures.mli", 411, 16254, 16291), 0), 0, Tag1 ("Signatures", 177)), 0); (("targets", 2506), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4809)], (0)), 100000000, 0, -4808)], (0)), 100000000, 0, -4807), 0, (("src/signatures.mli", 413, 16293, 16295), ("src/signatures.mli", 413, 16293, 16324), 0), 0, Tag1 ("Signatures", 178)), 0); (("ocaml_libs", 2507), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4806)], (0)), 100000000, 0, -4805)], (0)), 100000000, 0, -4804), 0, (("src/signatures.mli", 414, 16325, 16327), ("src/signatures.mli", 414, 16325, 16359), 0), 0, Tag1 ("Signatures", 179)), 0); (("ocaml_mods", 2508), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4803)], (0)), 100000000, 0, -4802)], (0)), 100000000, 0, -4801), 0, (("src/signatures.mli", 415, 16360, 16362), ("src/signatures.mli", 415, 16360, 16394), 0), 0, Tag1 ("Signatures", 180)), 0); (("ocaml_pkgs", 2509), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4800)], (0)), 100000000, 0, -4799)], (0)), 100000000, 0, -4798), 0, (("src/signatures.mli", 416, 16395, 16397), ("src/signatures.mli", 416, 16395, 16429), 0), 0, Tag1 ("Signatures", 181)), 0); (("ocaml_syntax", 2510), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4797)], (0)), 100000000, 0, -4796)], (0)), 100000000, 0, -4795), 0, (("src/signatures.mli", 417, 16430, 16432), ("src/signatures.mli", 417, 16430, 16468), 0), 0, Tag1 ("Signatures", 182)), 0); (("ocaml_cflags", 2511), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4794)], (0)), 100000000, 0, -4793)], (0)), 100000000, 0, -4792), 0, (("src/signatures.mli", 418, 16469, 16471), ("src/signatures.mli", 418, 16469, 16505), 0), 0, Tag1 ("Signatures", 183)), 0); (("ocaml_lflags", 2512), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4791)], (0)), 100000000, 0, -4790)], (0)), 100000000, 0, -4789), 0, (("src/signatures.mli", 419, 16506, 16508), ("src/signatures.mli", 419, 16506, 16542), 0), 0, Tag1 ("Signatures", 184)), 0); (("ocaml_ppflags", 2513), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4788)], (0)), 100000000, 0, -4787)], (0)), 100000000, 0, -4786), 0, (("src/signatures.mli", 420, 16543, 16545), ("src/signatures.mli", 420, 16543, 16580), 0), 0, Tag1 ("Signatures", 185)), 0); (("ocaml_docflags", 2514), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4785)], (0)), 100000000, 0, -4784)], (0)), 100000000, 0, -4783), 0, (("src/signatures.mli", 421, 16581, 16583), ("src/signatures.mli", 421, 16581, 16619), 0), 0, Tag1 ("Signatures", 186)), 0); (("ocaml_yaccflags", 2515), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4782)], (0)), 100000000, 0, -4781)], (0)), 100000000, 0, -4780), 0, (("src/signatures.mli", 422, 16620, 16622), ("src/signatures.mli", 422, 16620, 16659), 0), 0, Tag1 ("Signatures", 187)), 0); (("ocaml_lexflags", 2516), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4779)], (0)), 100000000, 0, -4778)], (0)), 100000000, 0, -4777), 0, (("src/signatures.mli", 423, 16660, 16662), ("src/signatures.mli", 423, 16660, 16698), 0), 0, Tag1 ("Signatures", 188)), 0); (("program_args", 2517), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4776)], (0)), 100000000, 0, -4775)], (0)), 100000000, 0, -4774), 0, (("src/signatures.mli", 424, 16699, 16701), ("src/signatures.mli", 424, 16699, 16735), 0), 0, Tag1 ("Signatures", 189)), 0); (("ignore_list", 2518), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4773)], (0)), 100000000, 0, -4772)], (0)), 100000000, 0, -4771), 0, (("src/signatures.mli", 425, 16736, 16738), ("src/signatures.mli", 425, 16736, 16771), 0), 0, Tag1 ("Signatures", 190)), 0); (("tags", 2519), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4770)], (0)), 100000000, 0, -4769)], (0)), 100000000, 0, -4768), 0, (("src/signatures.mli", 426, 16772, 16774), ("src/signatures.mli", 426, 16772, 16800), 0), 0, Tag1 ("Signatures", 191)), 0); (("tag_lines", 2520), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4767)], (0)), 100000000, 0, -4766)], (0)), 100000000, 0, -4765), 0, (("src/signatures.mli", 427, 16801, 16803), ("src/signatures.mli", 427, 16801, 16834), 0), 0, Tag1 ("Signatures", 192)), 0); (("show_tags", 2521), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4764)], (0)), 100000000, 0, -4763)], (0)), 100000000, 0, -4762), 0, (("src/signatures.mli", 428, 16835, 16837), ("src/signatures.mli", 428, 16835, 16868), 0), 0, Tag1 ("Signatures", 193)), 0); (("ext_obj", 2522), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4761)], (0)), 100000000, 0, -4760), 0, (("src/signatures.mli", 430, 16870, 16872), ("src/signatures.mli", 430, 16870, 16896), 0), 0, Tag1 ("Signatures", 194)), 0); (("ext_lib", 2523), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4759)], (0)), 100000000, 0, -4758), 0, (("src/signatures.mli", 431, 16897, 16899), ("src/signatures.mli", 431, 16897, 16923), 0), 0, Tag1 ("Signatures", 195)), 0); (("ext_dll", 2524), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4757)], (0)), 100000000, 0, -4756), 0, (("src/signatures.mli", 432, 16924, 16926), ("src/signatures.mli", 432, 16924, 16950), 0), 0, Tag1 ("Signatures", 196)), 0); (("exe", 2525), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4755)], (0)), 100000000, 0, -4754), 0, (("src/signatures.mli", 433, 16951, 16953), ("src/signatures.mli", 433, 16951, 16973), 0), 0, Tag1 ("Signatures", 197)), 0); (("add", 2526), ((Tag1 (0, (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Arg"), "key"), 0, (0)), 100000000, 0, -4751); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Arg"), "spec"), 0, (0)), 100000000, 0, -4752); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Arg"), "doc"), 0, (0)), 100000000, 0, -4753)]), 100000000, 0, -4750), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4749), 0), 100000000, 0, -4748), 0, (("src/signatures.mli", 435, 16975, 16977), ("src/signatures.mli", 435, 16975, 17023), 0), 0, Tag1 ("Signatures", 198)), 0); (("plugin_tags", 2527), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4747)], (0)), 100000000, 0, -4746)], (0)), 100000000, 0, -4745), 0, (("src/options.mli", 24, 1309, 1309), ("src/options.mli", 24, 1309, 1342), 0), 0, Tag1 ("Options", 1)), 0); (("ocamlbuild_project_heuristic", 2528), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4744), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4743), 0), 100000000, 0, -4742), 0, (("src/options.mli", 32, 1593, 1593), ("src/options.mli", 32, 1593, 1640), 0), 0, Tag1 ("Options", 2)), 0); (("spec", 2529), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4741), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Arg"), "key"), 0, (0)), 100000000, 0, -4738); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Arg"), "spec"), 0, (0)), 100000000, 0, -4739); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Arg"), "doc"), 0, (0)), 100000000, 0, -4740)]), 100000000, 0, -4737)], (0)), 100000000, 0, -4736), 0), 100000000, 0, -4735), 0, (("src/options.mli", 34, 1642, 1642), ("src/options.mli", 34, 1642, 1696), 0), 0, Tag1 ("Options", 3)), 0); (("entry", 2530), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("Slurp", 1465)), "entry"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4734)], (0)), 100000000, 0, -4733)], (0)), 100000000, 0, -4732)], (0)), 100000000, 0, -4731), 0, (("src/options.mli", 36, 1698, 1698), ("src/options.mli", 36, 1698, 1737), 0), 0, Tag1 ("Options", 4)), 0); (("init", 2531), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4730), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4729), 0), 100000000, 0, -4728), 0, (("src/options.mli", 37, 1738, 1738), ("src/options.mli", 37, 1738, 1761), 0), 0, Tag1 ("Options", 5)), 0)]), 0, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), Tag1 ("", 20)), 0, 0); Tag3 (("Pathname", 1467), 0, (Tag1 ([Tag1 (("t", 2532), (0, 0, 0, 1, ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5011)), 0, 0, 0, 0, (("src/signatures.mli", 121, 4602, 4604), ("src/signatures.mli", 121, 4602, 4619), 0), 0, 0, 0, Tag1 ("Signatures", 42)), 1, 0); (("concat", 2533), ((Tag1 (0, (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -5010), (Tag1 (0, (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -5009), (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -5008), 0), 100000000, 0, -5007), 0), 100000000, 0, -5006), 0, (("src/signatures.mli", 122, 4620, 4622), ("src/signatures.mli", 122, 4620, 4646), 0), 0, Tag1 ("Signatures", 43)), 0); (("compare", 2534), ((Tag1 (0, (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -5005), (Tag1 (0, (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -5004), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -5003), 0), 100000000, 0, -5002), 0), 100000000, 0, -5001), 0, (("src/signatures.mli", 123, 4647, 4649), ("src/signatures.mli", 123, 4647, 4676), 0), 0, Tag1 ("Signatures", 44)), 0); (("equal", 2535), ((Tag1 (0, (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -5000), (Tag1 (0, (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -4999), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4998), 0), 100000000, 0, -4997), 0), 100000000, 0, -4996), 0, (("src/signatures.mli", 124, 4677, 4679), ("src/signatures.mli", 124, 4677, 4705), 0), 0, Tag1 ("Signatures", 45)), 0); (("exists", 2536), ((Tag1 (0, (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -4995), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4994), 0), 100000000, 0, -4993), 0, (("src/signatures.mli", 125, 4706, 4708), ("src/signatures.mli", 125, 4706, 4730), 0), 0, Tag1 ("Signatures", 46)), 0); (("mk", 2537), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4992), (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -4991), 0), 100000000, 0, -4990), 0, (("src/signatures.mli", 126, 4731, 4733), ("src/signatures.mli", 126, 4731, 4753), 0), 0, Tag1 ("Signatures", 47)), 0); (("define_context", 2538), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4989), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4988)], (0)), 100000000, 0, -4987), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4986), 0), 100000000, 0, -4985), 0), 100000000, 0, -4984), 0, (("src/signatures.mli", 127, 4754, 4756), ("src/signatures.mli", 127, 4754, 4806), 0), 0, Tag1 ("Signatures", 48)), 0); (("include_dirs_of", 2539), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4983), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4982)], (0)), 100000000, 0, -4981), 0), 100000000, 0, -4980), 0, (("src/signatures.mli", 128, 4807, 4809), ("src/signatures.mli", 128, 4807, 4852), 0), 0, Tag1 ("Signatures", 49)), 0); (("copy", 2540), ((Tag1 (0, (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -4979), (Tag1 (0, (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -4978), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4977), 0), 100000000, 0, -4976), 0), 100000000, 0, -4975), 0, (("src/signatures.mli", 129, 4853, 4855), ("src/signatures.mli", 129, 4853, 4880), 0), 0, Tag1 ("Signatures", 50)), 0); (("to_string", 2541), ((Tag1 (0, (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -4974), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4973), 0), 100000000, 0, -4972), 0, (("src/signatures.mli", 130, 4881, 4883), ("src/signatures.mli", 130, 4881, 4910), 0), 0, Tag1 ("Signatures", 51)), 0); (("print", 2542), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -4971), (Tag1 (0, (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -4970), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4969), 0), 100000000, 0, -4968), 0), 100000000, 0, -4967), 0, (("src/signatures.mli", 131, 4911, 4913), ("src/signatures.mli", 131, 4911, 4954), 0), 0, Tag1 ("Signatures", 52)), 0); (("current_dir_name", 2543), ((Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -4966), 0, (("src/signatures.mli", 132, 4955, 4957), ("src/signatures.mli", 132, 4955, 4981), 0), 0, Tag1 ("Signatures", 53)), 0); (("parent_dir_name", 2544), ((Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -4965), 0, (("src/signatures.mli", 133, 4982, 4984), ("src/signatures.mli", 133, 4982, 5007), 0), 0, Tag1 ("Signatures", 54)), 0); (("read", 2545), ((Tag1 (0, (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -4964), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4963), 0), 100000000, 0, -4962), 0, (("src/signatures.mli", 134, 5008, 5010), ("src/signatures.mli", 134, 5008, 5032), 0), 0, Tag1 ("Signatures", 55)), 0); (("same_contents", 2546), ((Tag1 (0, (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -4961), (Tag1 (0, (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -4960), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4959), 0), 100000000, 0, -4958), 0), 100000000, 0, -4957), 0, (("src/signatures.mli", 135, 5033, 5035), ("src/signatures.mli", 135, 5033, 5069), 0), 0, Tag1 ("Signatures", 56)), 0); (("basename", 2547), ((Tag1 (0, (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -4956), (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -4955), 0), 100000000, 0, -4954), 0, (("src/signatures.mli", 136, 5070, 5072), ("src/signatures.mli", 136, 5070, 5093), 0), 0, Tag1 ("Signatures", 57)), 0); (("dirname", 2548), ((Tag1 (0, (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -4953), (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -4952), 0), 100000000, 0, -4951), 0, (("src/signatures.mli", 137, 5094, 5096), ("src/signatures.mli", 137, 5094, 5116), 0), 0, Tag1 ("Signatures", 58)), 0); (("is_relative", 2549), ((Tag1 (0, (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -4950), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4949), 0), 100000000, 0, -4948), 0, (("src/signatures.mli", 138, 5117, 5119), ("src/signatures.mli", 138, 5117, 5146), 0), 0, Tag1 ("Signatures", 59)), 0); (("readlink", 2550), ((Tag1 (0, (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -4947), (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -4946), 0), 100000000, 0, -4945), 0, (("src/signatures.mli", 139, 5147, 5149), ("src/signatures.mli", 139, 5147, 5170), 0), 0, Tag1 ("Signatures", 60)), 0); (("readdir", 2551), ((Tag1 (0, (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -4944), (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -4943)], (0)), 100000000, 0, -4942), 0), 100000000, 0, -4941), 0, (("src/signatures.mli", 140, 5171, 5173), ("src/signatures.mli", 140, 5171, 5199), 0), 0, Tag1 ("Signatures", 61)), 0); (("is_link", 2552), ((Tag1 (0, (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -4940), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4939), 0), 100000000, 0, -4938), 0, (("src/signatures.mli", 141, 5200, 5202), ("src/signatures.mli", 141, 5200, 5225), 0), 0, Tag1 ("Signatures", 62)), 0); (("is_directory", 2553), ((Tag1 (0, (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -4937), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4936), 0), 100000000, 0, -4935), 0, (("src/signatures.mli", 142, 5226, 5228), ("src/signatures.mli", 142, 5226, 5256), 0), 0, Tag1 ("Signatures", 63)), 0); (("add_extension", 2554), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4934), (Tag1 (0, (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -4933), (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -4932), 0), 100000000, 0, -4931), 0), 100000000, 0, -4930), 0, (("src/signatures.mli", 144, 5258, 5260), ("src/signatures.mli", 144, 5258, 5296), 0), 0, Tag1 ("Signatures", 64)), 0); (("check_extension", 2555), ((Tag1 (0, (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -4929), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4928), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4927), 0), 100000000, 0, -4926), 0), 100000000, 0, -4925), 0, (("src/signatures.mli", 145, 5297, 5299), ("src/signatures.mli", 145, 5297, 5340), 0), 0, Tag1 ("Signatures", 65)), 0); (("get_extension", 2556), ((Tag1 (0, (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -4924), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4923), 0), 100000000, 0, -4922), 0, (("src/signatures.mli", 147, 5342, 5344), ("src/signatures.mli", 147, 5342, 5375), 0), 0, Tag1 ("Signatures", 66)), 0); (("remove_extension", 2557), ((Tag1 (0, (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -4921), (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -4920), 0), 100000000, 0, -4919), 0, (("src/signatures.mli", 148, 5376, 5378), ("src/signatures.mli", 148, 5376, 5407), 0), 0, Tag1 ("Signatures", 67)), 0); (("update_extension", 2558), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4918), (Tag1 (0, (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -4917), (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -4916), 0), 100000000, 0, -4915), 0), 100000000, 0, -4914), 0, (("src/signatures.mli", 149, 5408, 5410), ("src/signatures.mli", 149, 5408, 5449), 0), 0, Tag1 ("Signatures", 68)), 0); (("get_extensions", 2559), ((Tag1 (0, (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -4913), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4912), 0), 100000000, 0, -4911), 0, (("src/signatures.mli", 151, 5451, 5453), ("src/signatures.mli", 151, 5451, 5485), 0), 0, Tag1 ("Signatures", 69)), 0); (("remove_extensions", 2560), ((Tag1 (0, (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -4910), (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -4909), 0), 100000000, 0, -4908), 0, (("src/signatures.mli", 152, 5486, 5488), ("src/signatures.mli", 152, 5486, 5518), 0), 0, Tag1 ("Signatures", 70)), 0); (("update_extensions", 2561), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4907), (Tag1 (0, (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -4906), (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -4905), 0), 100000000, 0, -4904), 0), 100000000, 0, -4903), 0, (("src/signatures.mli", 153, 5519, 5521), ("src/signatures.mli", 153, 5519, 5561), 0), 0, Tag1 ("Signatures", 71)), 0); (("print_path_list", 2562), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -4902), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -4901)], (0)), 100000000, 0, -4900), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4899), 0), 100000000, 0, -4898), 0), 100000000, 0, -4897), 0, (("src/signatures.mli", 155, 5563, 5565), ("src/signatures.mli", 155, 5563, 5621), 0), 0, Tag1 ("Signatures", 72)), 0); (("pwd", 2563), ((Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -4896), 0, (("src/signatures.mli", 156, 5622, 5624), ("src/signatures.mli", 156, 5622, 5635), 0), 0, Tag1 ("Signatures", 73)), 0); (("parent", 2564), ((Tag1 (0, (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -4895), (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -4894), 0), 100000000, 0, -4893), 0, (("src/signatures.mli", 157, 5636, 5638), ("src/signatures.mli", 157, 5636, 5657), 0), 0, Tag1 ("Signatures", 74)), 0); (("is_prefix", 2565), ((Tag1 (0, (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -4892), (Tag1 (0, (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -4891), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4890), 0), 100000000, 0, -4889), 0), 100000000, 0, -4888), 0, (("src/signatures.mli", 159, 5715, 5717), ("src/signatures.mli", 159, 5715, 5747), 0), 0, Tag1 ("Signatures", 75)), 0); (("is_implicit", 2566), ((Tag1 (0, (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -4887), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4886), 0), 100000000, 0, -4885), 0, (("src/signatures.mli", 160, 5748, 5750), ("src/signatures.mli", 160, 5748, 5777), 0), 0, Tag1 ("Signatures", 76)), 0); Tag3 (("Operators", 2567), 0, (Tag1 ([(("/", 2570), ((Tag1 (0, (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -5021), (Tag1 (0, (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -5020), (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -5019), 0), 100000000, 0, -5018), 0), 100000000, 0, -5017), 0, (("src/signatures.mli", 162, 5803, 5807), ("src/signatures.mli", 162, 5803, 5830), 0), 0, Tag1 ("Signatures", 77)), 0); (("-.-", 2571), ((Tag1 (0, (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -5016), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5015), (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -5014), 0), 100000000, 0, -5013), 0), 100000000, 0, -5012), 0, (("src/signatures.mli", 163, 5831, 5835), ("src/signatures.mli", 163, 5831, 5865), 0), 0, Tag1 ("Signatures", 78)), 0)]), 0, (("src/signatures.mli", 161, 5778, 5780), ("src/signatures.mli", 164, 5866, 5871), 0), Tag1 ("Signatures", 79)), 0, 0); (("link_to_dir", 2568), ((Tag1 (0, (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -4884), (Tag1 (0, (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -4883), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4882), 0), 100000000, 0, -4881), 0), 100000000, 0, -4880), 0, (("src/pathname.mli", 17, 959, 959), ("src/pathname.mli", 17, 959, 991), 0), 0, Tag1 ("Pathname", 0)), 0); (("normalize", 2569), ((Tag1 (0, (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -4879), (Tag3 ((("t", 2532)), 0, (0)), 100000000, 0, -4878), 0), 100000000, 0, -4877), 0, (("src/pathname.mli", 18, 992, 992), ("src/pathname.mli", 18, 992, 1014), 0), 0, Tag1 ("Pathname", 1)), 0)]), 0, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), Tag1 ("", 21)), 0, 0); Tag3 (("Configuration", 1468), 0, (Tag1 ([(("parse_string", 2572), ((Tag1 (Tag1 ("source"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("Loc", 1447)), "source"), 0, (0)), 100000000, 0, -5055)], (0)), 100000000, 0, -5054), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5053), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5052), 0), 100000000, 0, -5051), 0), 100000000, 0, -5050), 0, (("src/configuration.mli", 22, 1187, 1187), ("src/configuration.mli", 22, 1187, 1242), 0), 0, Tag1 ("Configuration", 0)), 0); (("parse_file", 2573), ((Tag1 (Tag1 ("dir"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5049)], (0)), 100000000, 0, -5048), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5047), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5046), 0), 100000000, 0, -5045), 0), 100000000, 0, -5044), 0, (("src/configuration.mli", 26, 1373, 1373), ("src/configuration.mli", 26, 1373, 1419), 0), 0, Tag1 ("Configuration", 1)), 0); (("tags_of_filename", 2574), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5043), (Tag3 (Tag1 ((("Tags", 1452)), "t"), 0, (0)), 100000000, 0, -5042), 0), 100000000, 0, -5041), 0, (("src/configuration.mli", 29, 1515, 1515), ("src/configuration.mli", 29, 1515, 1554), 0), 0, Tag1 ("Configuration", 2)), 0); (("has_tag", 2575), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5040), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -5039), 0), 100000000, 0, -5038), 0, (("src/configuration.mli", 31, 1556, 1556), ("src/configuration.mli", 31, 1556, 1584), 0), 0, Tag1 ("Configuration", 3)), 0); (("tag_file", 2576), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -5037), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Tags", 1452)), "elt"), 0, (0)), 100000000, 0, -5036)], (0)), 100000000, 0, -5035), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5034), 0), 100000000, 0, -5033), 0), 100000000, 0, -5032), 0, (("src/configuration.mli", 34, 1666, 1666), ("src/configuration.mli", 34, 1666, 1716), 0), 0, Tag1 ("Configuration", 4)), 0); (("tag_any", 2577), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Tags", 1452)), "elt"), 0, (0)), 100000000, 0, -5031)], (0)), 100000000, 0, -5030), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5029), 0), 100000000, 0, -5028), 0, (("src/configuration.mli", 37, 1778, 1778), ("src/configuration.mli", 37, 1778, 1813), 0), 0, Tag1 ("Configuration", 5)), 0); (("global_tags", 2578), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5027), (Tag3 (Tag1 ((("Tags", 1452)), "t"), 0, (0)), 100000000, 0, -5026), 0), 100000000, 0, -5025), 0, (("src/configuration.mli", 40, 1854, 1854), ("src/configuration.mli", 40, 1854, 1886), 0), 0, Tag1 ("Configuration", 6)), 0); (("check_tags_usage", 2579), ((Tag1 (0, (Tag3 (Tag1 ((("Tags", 1452)), "t"), 0, (0)), 100000000, 0, -5024), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5023), 0), 100000000, 0, -5022), 0, (("src/configuration.mli", 45, 2057, 2057), ("src/configuration.mli", 45, 2057, 2094), 0), 0, Tag1 ("Configuration", 7)), 0)]), 0, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), Tag1 ("", 22)), 0, 0); Tag3 (("Flags", 1469), 0, (Tag1 ([(("of_tags", 2580), ((Tag1 (0, (Tag3 (Tag1 ((("Tags", 1452)), "t"), 0, (0)), 100000000, 0, -5122), (Tag3 (Tag1 ((("Command", 1462)), "spec"), 0, (0)), 100000000, 0, -5121), 0), 100000000, 0, -5120), 0, (("src/flags.mli", 16, 931, 931), ("src/flags.mli", 16, 931, 967), 0), 0, Tag1 ("Flags", 0)), 0); (("of_tag_list", 2581), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Tags", 1452)), "elt"), 0, (0)), 100000000, 0, -5119)], (0)), 100000000, 0, -5118), (Tag3 (Tag1 ((("Command", 1462)), "spec"), 0, (0)), 100000000, 0, -5117), 0), 100000000, 0, -5116), 0, (("src/flags.mli", 17, 968, 968), ("src/flags.mli", 17, 968, 1015), 0), 0, Tag1 ("Flags", 1)), 0); (("flag", 2582), ((Tag1 (Tag1 ("deprecated"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -5115)], (0)), 100000000, 0, -5114), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Tags", 1452)), "elt"), 0, (0)), 100000000, 0, -5113)], (0)), 100000000, 0, -5112), (Tag1 (0, (Tag3 (Tag1 ((("Command", 1462)), "spec"), 0, (0)), 100000000, 0, -5111), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5110), 0), 100000000, 0, -5109), 0), 100000000, 0, -5108), 0), 100000000, 0, -5107), 0, (("src/flags.mli", 29, 1601, 1601), ("src/flags.mli", 29, 1601, 1669), 0), 0, Tag1 ("Flags", 2)), 0); (("pflag", 2583), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Tags", 1452)), "elt"), 0, (0)), 100000000, 0, -5106)], (0)), 100000000, 0, -5105), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5104), (Tag1 (Tag1 ("doc_param"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5103)], (0)), 100000000, 0, -5102), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5101), (Tag3 (Tag1 ((("Command", 1462)), "spec"), 0, (0)), 100000000, 0, -5100), 0), 100000000, 0, -5099), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5098), 0), 100000000, 0, -5097), 0), 100000000, 0, -5096), 0), 100000000, 0, -5095), 0), 100000000, 0, -5094), 0, (("src/flags.mli", 44, 2308, 2308), ("src/flags.mli", 45, 2347, 2412), 0), 0, Tag1 ("Flags", 3)), 0); (("flag_and_dep", 2584), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Tags", 1452)), "elt"), 0, (0)), 100000000, 0, -5093)], (0)), 100000000, 0, -5092), (Tag1 (0, (Tag3 (Tag1 ((("Command", 1462)), "spec"), 0, (0)), 100000000, 0, -5091), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5090), 0), 100000000, 0, -5089), 0), 100000000, 0, -5088), 0, (("src/flags.mli", 47, 2414, 2414), ("src/flags.mli", 47, 2414, 2470), 0), 0, Tag1 ("Flags", 4)), 0); (("pflag_and_dep", 2585), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Tags", 1452)), "elt"), 0, (0)), 100000000, 0, -5087)], (0)), 100000000, 0, -5086), (Tag1 (0, (Tag3 (Tag1 ((("Tags", 1452)), "elt"), 0, (0)), 100000000, 0, -5085), (Tag1 (Tag1 ("doc_param"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5084)], (0)), 100000000, 0, -5083), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5082), (Tag3 (Tag1 ((("Command", 1462)), "spec"), 0, (0)), 100000000, 0, -5081), 0), 100000000, 0, -5080), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5079), 0), 100000000, 0, -5078), 0), 100000000, 0, -5077), 0), 100000000, 0, -5076), 0), 100000000, 0, -5075), 0, (("src/flags.mli", 49, 2472, 2472), ("src/flags.mli", 50, 2521, 2576), 0), 0, Tag1 ("Flags", 5)), 0); (("add", 2586), ((Tag1 (0, ((("a")), 100000000, 0, -5073), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -5073)], (0)), 100000000, 0, -5074), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -5073)], (0)), 100000000, 0, -5072), 0), 100000000, 0, -5071), 0), 100000000, 0, -5070), 0, (("src/flags.mli", 52, 2578, 2578), ("src/flags.mli", 52, 2578, 2612), 0), 0, Tag1 ("Flags", 6)), 0); (("remove", 2587), ((Tag1 (0, ((("a")), 100000000, 0, -5068), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -5068)], (0)), 100000000, 0, -5069), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -5068)], (0)), 100000000, 0, -5067), 0), 100000000, 0, -5066), 0), 100000000, 0, -5065), 0, (("src/flags.mli", 53, 2613, 2613), ("src/flags.mli", 53, 2613, 2650), 0), 0, Tag1 ("Flags", 7)), 0); (("show_documentation", 2588), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5064), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5063), 0), 100000000, 0, -5062), 0, (("src/flags.mli", 55, 2652, 2652), ("src/flags.mli", 55, 2652, 2689), 0), 0, Tag1 ("Flags", 8)), 0); (("get_used_tags", 2589), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5061), (Tag3 (Tag1 ((("Tags", 1452)), "t"), 0, (0)), 100000000, 0, -5060), 0), 100000000, 0, -5059), 0, (("src/flags.mli", 59, 2803, 2803), ("src/flags.mli", 59, 2803, 2837), 0), 0, Tag1 ("Flags", 9)), 0); (("mark_tag_used", 2590), ((Tag1 (0, (Tag3 (Tag1 ((("Tags", 1452)), "elt"), 0, (0)), 100000000, 0, -5058), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5057), 0), 100000000, 0, -5056), 0, (("src/flags.mli", 61, 2839, 2839), ("src/flags.mli", 61, 2839, 2875), 0), 0, Tag1 ("Flags", 10)), 0)]), 0, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), Tag1 ("", 23)), 0, 0); Tag3 (("Hygiene", 1470), 0, (Tag1 ([Tag1 (("rule", 2591), (0, 0, Tag1 ([(("Implies_not", 272), ([(Tag3 ((("pattern", 2592)), 0, (0)), 100000000, 0, -5143); (Tag3 ((("pattern", 2592)), 0, (0)), 100000000, 0, -5144)]), 0, (("src/hygiene.mli", 22, 1108, 1110), ("src/hygiene.mli", 22, 1108, 1142), 0), 0, Tag1 ("Hygiene", 3)); (("Not", 273), ([(Tag3 ((("pattern", 2592)), 0, (0)), 100000000, 0, -5145)]), 0, (("src/hygiene.mli", 25, 1394, 1394), ("src/hygiene.mli", 25, 1394, 1410), 0), 0, Tag1 ("Hygiene", 4))], 0), 1, 0, 0, 0, 0, 0, (("src/hygiene.mli", 21, 1096, 1096), ("src/hygiene.mli", 25, 1394, 1410), 0), 0, 0, 0, Tag1 ("Hygiene", 0)), 1, 0); Tag1 (("pattern", 2592), (0, 0, 0, 1, ((Tag3 ((("suffix", 2593)), 0, (0)), 100000000, 0, -5142)), 0, 0, 0, 0, (("src/hygiene.mli", 28, 1533, 1533), ("src/hygiene.mli", 28, 1533, 1553), 0), 0, 0, 0, Tag1 ("Hygiene", 1)), 2, 0); Tag1 (("suffix", 2593), (0, 0, 0, 1, ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5141)), 0, 0, 0, 0, (("src/hygiene.mli", 31, 1588, 1588), ("src/hygiene.mli", 31, 1588, 1607), 0), 0, 0, 0, Tag1 ("Hygiene", 2)), 2, 0); Tag1 (("penalty", 2594), (0, 0, Tag1 ([(("Warn", 275), (0), 0, (("src/hygiene.mli", 34, 1682, 1697), ("src/hygiene.mli", 34, 1682, 1701), 0), 0, Tag1 ("Hygiene", 6)); (("Fail", 276), (0), 0, (("src/hygiene.mli", 34, 1682, 1702), ("src/hygiene.mli", 34, 1682, 1708), 0), 0, Tag1 ("Hygiene", 7))], 0), 1, 0, 0, 0, 0, 0, (("src/hygiene.mli", 34, 1682, 1682), ("src/hygiene.mli", 34, 1682, 1708), 0), 0, 1, 0, Tag1 ("Hygiene", 5)), 1, 0); Tag1 (("law", 2595), (0, 0, [[(("law_name", 278), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5137), (("src/hygiene.mli", 38, 1800, 1802), ("src/hygiene.mli", 38, 1800, 1820), 0), 0, Tag1 ("Hygiene", 9)); (("law_rules", 279), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("rule", 2591)), 0, (0)), 100000000, 0, -5139)], (0)), 100000000, 0, -5138), (("src/hygiene.mli", 39, 1890, 1892), ("src/hygiene.mli", 39, 1890, 1914), 0), 0, Tag1 ("Hygiene", 10)); (("law_penalty", 280), 0, (Tag3 ((("penalty", 2594)), 0, (0)), 100000000, 0, -5140), (("src/hygiene.mli", 40, 1972, 1974), ("src/hygiene.mli", 40, 1972, 1996), 0), 0, Tag1 ("Hygiene", 11))]], 1, 0, 0, 0, 0, 0, (("src/hygiene.mli", 37, 1787, 1787), ("src/hygiene.mli", 41, 2063, 2064), 0), 0, 0, 0, Tag1 ("Hygiene", 8)), 1, 0); (("check", 2596), ((Tag1 (Tag1 ("sanitize"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5136)], (0)), 100000000, 0, -5135), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("law", 2595)), 0, (0)), 100000000, 0, -5134)], (0)), 100000000, 0, -5133), (Tag1 (0, (Tag3 (Tag1 ((("Slurp", 1465)), "entry"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -5132)], (0)), 100000000, 0, -5131), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("law", 2595)), 0, (0)), 100000000, 0, -5128); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5130)], (0)), 100000000, 0, -5129)]), 100000000, 0, -5127)], (0)), 100000000, 0, -5126), 0), 100000000, 0, -5125), 0), 100000000, 0, -5124), 0), 100000000, 0, -5123), 0, (("src/hygiene.mli", 48, 2570, 2570), ("src/hygiene.mli", 48, 2570, 2658), 0), 0, Tag1 ("Hygiene", 12)), 0)]), 0, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), Tag1 ("", 24)), 0, 0); Tag3 (("Digest_cache", 1471), 0, (Tag1 ([(("init", 2597), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5156), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5155), 0), 100000000, 0, -5154), 0, (("src/digest_cache.mli", 16, 931, 931), ("src/digest_cache.mli", 16, 931, 954), 0), 0, Tag1 ("Digest_cache", 0)), 0); (("get", 2598), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5153), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5152), 0), 100000000, 0, -5151), 0, (("src/digest_cache.mli", 18, 956, 956), ("src/digest_cache.mli", 18, 956, 982), 0), 0, Tag1 ("Digest_cache", 1)), 0); (("put", 2599), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5150), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5149), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5148), 0), 100000000, 0, -5147), 0), 100000000, 0, -5146), 0, (("src/digest_cache.mli", 19, 983, 983), ("src/digest_cache.mli", 19, 983, 1017), 0), 0, Tag1 ("Digest_cache", 2)), 0)]), 0, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), Tag1 ("", 25)), 0, 0); Tag3 (("Resource", 1472), 0, (Tag1 ([Tag1 (("resource_pattern", 2600), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/resource.mli", 19, 958, 958), ("src/resource.mli", 19, 958, 979), 0), 0, 0, 0, Tag1 ("Resource", 0)), 1, 0); Tag1 (("env", 2601), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/resource.mli", 20, 980, 980), ("src/resource.mli", 20, 980, 988), 0), 0, 0, 0, Tag1 ("Resource", 1)), 1, 0); Tag1 (("t", 2602), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -5227)), 0, 0, 0, 0, (("src/resource.mli", 22, 990, 990), ("src/resource.mli", 22, 990, 1009), 0), 0, 0, 0, Tag1 ("Resource", 2)), 1, 0); Tag3 (("Resources", 2603), 0, (Tag1 ([Tag1 (("elt", 2622), (0, 0, 0, 1, ((Tag3 ((("t", 2602)), 0, (0)), 100000000, 0, -5466)), 0, 0, 0, 0, (("src/resource.mli", 23, 1010, 1040), ("src/resource.mli", 23, 1010, 1052), 0), 0, 0, 0, Tag1 ("Resource", 3)), 1, 0); Tag1 (("t", 2623), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("set.mli", 74, 2901, 2905), ("set.mli", 74, 2901, 2911), 0), 0, 0, 0, Tag1 ("Stdlib__Set", 4)), 1, 0); (("empty", 2624), ((Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5465), 0, (("set.mli", 77, 2942, 2946), ("set.mli", 77, 2942, 2958), 0), 0, Tag1 ("Stdlib__Set", 5)), 0); (("add", 2625), ((Tag1 (0, (Tag3 ((("elt", 2622)), 0, (0)), 100000000, 0, -5464), (Tag1 (0, (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5463), (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5462), 0), 100000000, 0, -5461), 0), 100000000, 0, -5460), 0, (("set.mli", 80, 2986, 2990), ("set.mli", 80, 2986, 3012), 0), 0, Tag1 ("Stdlib__Set", 6)), 0); (("singleton", 2626), ((Tag1 (0, (Tag3 ((("elt", 2622)), 0, (0)), 100000000, 0, -5459), (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5458), 0), 100000000, 0, -5457), 0, (("set.mli", 86, 3278, 3282), ("set.mli", 86, 3278, 3305), 0), 0, Tag1 ("Stdlib__Set", 7)), 0); (("remove", 2627), ((Tag1 (0, (Tag3 ((("elt", 2622)), 0, (0)), 100000000, 0, -5456), (Tag1 (0, (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5455), (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5454), 0), 100000000, 0, -5453), 0), 100000000, 0, -5452), 0, (("set.mli", 89, 3381, 3385), ("set.mli", 89, 3381, 3410), 0), 0, Tag1 ("Stdlib__Set", 8)), 0); (("union", 2628), ((Tag1 (0, (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5451), (Tag1 (0, (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5450), (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5449), 0), 100000000, 0, -5448), 0), 100000000, 0, -5447), 0, (("set.mli", 95, 3677, 3681), ("set.mli", 95, 3677, 3703), 0), 0, Tag1 ("Stdlib__Set", 9)), 0); (("inter", 2629), ((Tag1 (0, (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5446), (Tag1 (0, (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5445), (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5444), 0), 100000000, 0, -5443), 0), 100000000, 0, -5442), 0, (("set.mli", 98, 3727, 3731), ("set.mli", 98, 3727, 3753), 0), 0, Tag1 ("Stdlib__Set", 10)), 0); (("disjoint", 2630), ((Tag1 (0, (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5441), (Tag1 (0, (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5440), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -5439), 0), 100000000, 0, -5438), 0), 100000000, 0, -5437), 0, (("set.mli", 101, 3784, 3788), ("set.mli", 101, 3784, 3816), 0), 0, Tag1 ("Stdlib__Set", 11)), 0); (("diff", 2631), ((Tag1 (0, (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5436), (Tag1 (0, (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5435), (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5434), 0), 100000000, 0, -5433), 0), 100000000, 0, -5432), 0, (("set.mli", 105, 3880, 3884), ("set.mli", 105, 3880, 3905), 0), 0, Tag1 ("Stdlib__Set", 12)), 0); (("cardinal", 2632), ((Tag1 (0, (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5431), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -5430), 0), 100000000, 0, -5429), 0, (("set.mli", 109, 4007, 4011), ("set.mli", 109, 4007, 4033), 0), 0, Tag1 ("Stdlib__Set", 13)), 0); (("elements", 2633), ((Tag1 (0, (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5428), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 2622)), 0, (0)), 100000000, 0, -5427)], (0)), 100000000, 0, -5426), 0), 100000000, 0, -5425), 0, (("set.mli", 114, 4120, 4124), ("set.mli", 114, 4120, 4151), 0), 0, Tag1 ("Stdlib__Set", 14)), 0); (("min_elt", 2634), ((Tag1 (0, (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5424), (Tag3 ((("elt", 2622)), 0, (0)), 100000000, 0, -5423), 0), 100000000, 0, -5422), 0, (("set.mli", 120, 4380, 4384), ("set.mli", 120, 4380, 4405), 0), 0, Tag1 ("Stdlib__Set", 15)), 0); (("min_elt_opt", 2635), ((Tag1 (0, (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5421), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2622)), 0, (0)), 100000000, 0, -5420)], (0)), 100000000, 0, -5419), 0), 100000000, 0, -5418), 0, (("set.mli", 125, 4567, 4571), ("set.mli", 125, 4567, 4603), 0), 0, Tag1 ("Stdlib__Set", 16)), 0); (("max_elt", 2636), ((Tag1 (0, (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5417), (Tag3 ((("elt", 2622)), 0, (0)), 100000000, 0, -5416), 0), 100000000, 0, -5415), 0, (("set.mli", 131, 4774, 4778), ("set.mli", 131, 4774, 4799), 0), 0, Tag1 ("Stdlib__Set", 17)), 0); (("max_elt_opt", 2637), ((Tag1 (0, (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5414), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2622)), 0, (0)), 100000000, 0, -5413)], (0)), 100000000, 0, -5412), 0), 100000000, 0, -5411), 0, (("set.mli", 135, 4890, 4894), ("set.mli", 135, 4890, 4926), 0), 0, Tag1 ("Stdlib__Set", 18)), 0); (("choose", 2638), ((Tag1 (0, (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5410), (Tag3 ((("elt", 2622)), 0, (0)), 100000000, 0, -5409), 0), 100000000, 0, -5408), 0, (("set.mli", 140, 5041, 5045), ("set.mli", 140, 5041, 5065), 0), 0, Tag1 ("Stdlib__Set", 19)), 0); (("choose_opt", 2639), ((Tag1 (0, (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5407), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2622)), 0, (0)), 100000000, 0, -5406)], (0)), 100000000, 0, -5405), 0), 100000000, 0, -5404), 0, (("set.mli", 145, 5263, 5267), ("set.mli", 145, 5263, 5298), 0), 0, Tag1 ("Stdlib__Set", 20)), 0); (("find", 2640), ((Tag1 (0, (Tag3 ((("elt", 2622)), 0, (0)), 100000000, 0, -5403), (Tag1 (0, (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5402), (Tag3 ((("elt", 2622)), 0, (0)), 100000000, 0, -5401), 0), 100000000, 0, -5400), 0), 100000000, 0, -5399), 0, (("set.mli", 153, 5541, 5549), ("set.mli", 153, 5541, 5574), 0), 0, Tag1 ("Stdlib__Set", 21)), 0); (("find_opt", 2641), ((Tag1 (0, (Tag3 ((("elt", 2622)), 0, (0)), 100000000, 0, -5398), (Tag1 (0, (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5397), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2622)), 0, (0)), 100000000, 0, -5396)], (0)), 100000000, 0, -5395), 0), 100000000, 0, -5394), 0), 100000000, 0, -5393), 0, (("set.mli", 159, 5752, 5756), ("set.mli", 159, 5752, 5792), 0), 0, Tag1 ("Stdlib__Set", 22)), 0); (("find_first", 2642), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2622)), 0, (0)), 100000000, 0, -5392), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -5391), 0), 100000000, 0, -5390), (Tag1 (0, (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5389), (Tag3 ((("elt", 2622)), 0, (0)), 100000000, 0, -5388), 0), 100000000, 0, -5387), 0), 100000000, 0, -5386), 0, (("set.mli", 165, 5963, 5967), ("set.mli", 165, 5963, 6008), 0), 0, Tag1 ("Stdlib__Set", 23)), 0); (("find_first_opt", 2643), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2622)), 0, (0)), 100000000, 0, -5385), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -5384), 0), 100000000, 0, -5383), (Tag1 (0, (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5382), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2622)), 0, (0)), 100000000, 0, -5381)], (0)), 100000000, 0, -5380), 0), 100000000, 0, -5379), 0), 100000000, 0, -5378), 0, (("set.mli", 177, 6482, 6486), ("set.mli", 177, 6482, 6538), 0), 0, Tag1 ("Stdlib__Set", 24)), 0); (("find_last", 2644), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2622)), 0, (0)), 100000000, 0, -5377), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -5376), 0), 100000000, 0, -5375), (Tag1 (0, (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5374), (Tag3 ((("elt", 2622)), 0, (0)), 100000000, 0, -5373), 0), 100000000, 0, -5372), 0), 100000000, 0, -5371), 0, (("set.mli", 184, 6779, 6783), ("set.mli", 184, 6779, 6823), 0), 0, Tag1 ("Stdlib__Set", 25)), 0); (("find_last_opt", 2645), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2622)), 0, (0)), 100000000, 0, -5370), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -5369), 0), 100000000, 0, -5368), (Tag1 (0, (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5367), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2622)), 0, (0)), 100000000, 0, -5366)], (0)), 100000000, 0, -5365), 0), 100000000, 0, -5364), 0), 100000000, 0, -5363), 0, (("set.mli", 190, 7044, 7048), ("set.mli", 190, 7044, 7099), 0), 0, Tag1 ("Stdlib__Set", 26)), 0); (("iter", 2646), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2622)), 0, (0)), 100000000, 0, -5362), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5361), 0), 100000000, 0, -5360), (Tag1 (0, (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5359), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5358), 0), 100000000, 0, -5357), 0), 100000000, 0, -5356), 0, (("set.mli", 198, 7371, 7375), ("set.mli", 198, 7371, 7411), 0), 0, Tag1 ("Stdlib__Set", 27)), 0); (("fold", 2647), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2622)), 0, (0)), 100000000, 0, -5355), (Tag1 (0, ((("acc")), 100000000, 0, -5351), ((("acc")), 100000000, 0, -5351), 0), 100000000, 0, -5354), 0), 100000000, 0, -5353), (Tag1 (0, (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5352), (Tag1 (0, ((("acc")), 100000000, 0, -5351), ((("acc")), 100000000, 0, -5351), 0), 100000000, 0, -5350), 0), 100000000, 0, -5349), 0), 100000000, 0, -5348), 0, (("set.mli", 203, 7616, 7620), ("set.mli", 203, 7616, 7672), 0), 0, Tag1 ("Stdlib__Set", 28)), 0); (("filter", 2648), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2622)), 0, (0)), 100000000, 0, -5347), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -5346), 0), 100000000, 0, -5345), (Tag1 (0, (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5344), (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5343), 0), 100000000, 0, -5342), 0), 100000000, 0, -5341), 0, (("set.mli", 221, 8372, 8376), ("set.mli", 221, 8372, 8411), 0), 0, Tag1 ("Stdlib__Set", 30)), 0); (("filter_map", 2649), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2622)), 0, (0)), 100000000, 0, -5340), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2622)), 0, (0)), 100000000, 0, -5339)], (0)), 100000000, 0, -5338), 0), 100000000, 0, -5337), (Tag1 (0, (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5336), (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5335), 0), 100000000, 0, -5334), 0), 100000000, 0, -5333), 0, (("set.mli", 228, 8710, 8714), ("set.mli", 228, 8710, 8759), 0), 0, Tag1 ("Stdlib__Set", 31)), 0); (("partition", 2650), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2622)), 0, (0)), 100000000, 0, -5332), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -5331), 0), 100000000, 0, -5330), (Tag1 (0, (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5329), (Tag2 ([(Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5327); (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5328)]), 100000000, 0, -5326), 0), 100000000, 0, -5325), 0), 100000000, 0, -5324), 0, (("set.mli", 243, 9275, 9279), ("set.mli", 243, 9275, 9321), 0), 0, Tag1 ("Stdlib__Set", 32)), 0); (("split", 2651), ((Tag1 (0, (Tag3 ((("elt", 2622)), 0, (0)), 100000000, 0, -5323), (Tag1 (0, (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5322), (Tag2 ([(Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5319); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -5320); (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5321)]), 100000000, 0, -5318), 0), 100000000, 0, -5317), 0), 100000000, 0, -5316), 0, (("set.mli", 249, 9562, 9566), ("set.mli", 249, 9562, 9601), 0), 0, Tag1 ("Stdlib__Set", 33)), 0); (("is_empty", 2652), ((Tag1 (0, (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5315), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -5314), 0), 100000000, 0, -5313), 0, (("set.mli", 260, 10020, 10024), ("set.mli", 260, 10020, 10047), 0), 0, Tag1 ("Stdlib__Set", 34)), 0); (("mem", 2653), ((Tag1 (0, (Tag3 ((("elt", 2622)), 0, (0)), 100000000, 0, -5312), (Tag1 (0, (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5311), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -5310), 0), 100000000, 0, -5309), 0), 100000000, 0, -5308), 0, (("set.mli", 263, 10096, 10100), ("set.mli", 263, 10096, 10125), 0), 0, Tag1 ("Stdlib__Set", 35)), 0); (("equal", 2654), ((Tag1 (0, (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5307), (Tag1 (0, (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5306), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -5305), 0), 100000000, 0, -5304), 0), 100000000, 0, -5303), 0, (("set.mli", 266, 10190, 10194), ("set.mli", 266, 10190, 10219), 0), 0, Tag1 ("Stdlib__Set", 36)), 0); (("compare", 2655), ((Tag1 (0, (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5302), (Tag1 (0, (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5301), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -5300), 0), 100000000, 0, -5299), 0), 100000000, 0, -5298), 0, (("set.mli", 270, 10335, 10339), ("set.mli", 270, 10335, 10365), 0), 0, Tag1 ("Stdlib__Set", 37)), 0); (("subset", 2656), ((Tag1 (0, (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5297), (Tag1 (0, (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5296), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -5295), 0), 100000000, 0, -5294), 0), 100000000, 0, -5293), 0, (("set.mli", 274, 10476, 10480), ("set.mli", 274, 10476, 10506), 0), 0, Tag1 ("Stdlib__Set", 38)), 0); (("for_all", 2657), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2622)), 0, (0)), 100000000, 0, -5292), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -5291), 0), 100000000, 0, -5290), (Tag1 (0, (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5289), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -5288), 0), 100000000, 0, -5287), 0), 100000000, 0, -5286), 0, (("set.mli", 278, 10598, 10602), ("set.mli", 278, 10598, 10641), 0), 0, Tag1 ("Stdlib__Set", 39)), 0); (("exists", 2658), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2622)), 0, (0)), 100000000, 0, -5285), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -5284), 0), 100000000, 0, -5283), (Tag1 (0, (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5282), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -5281), 0), 100000000, 0, -5280), 0), 100000000, 0, -5279), 0, (("set.mli", 282, 10737, 10741), ("set.mli", 282, 10737, 10779), 0), 0, Tag1 ("Stdlib__Set", 40)), 0); (("to_list", 2659), ((Tag1 (0, (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5278), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 2622)), 0, (0)), 100000000, 0, -5277)], (0)), 100000000, 0, -5276), 0), 100000000, 0, -5275), 0, (("set.mli", 288, 10922, 10926), ("set.mli", 288, 10922, 10953), 0), 0, Tag1 ("Stdlib__Set", 41)), 0); (("to_seq_from", 2660), ((Tag1 (0, (Tag3 ((("elt", 2622)), 0, (0)), 100000000, 0, -5274), (Tag1 (0, (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5273), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2622)), 0, (0)), 100000000, 0, -5272)], (0)), 100000000, 0, -5271), 0), 100000000, 0, -5270), 0), 100000000, 0, -5269), 0, (("set.mli", 298, 11268, 11272), ("set.mli", 298, 11268, 11311), 0), 0, Tag1 ("Stdlib__Set", 43)), 0); (("to_seq", 2661), ((Tag1 (0, (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5268), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2622)), 0, (0)), 100000000, 0, -5267)], (0)), 100000000, 0, -5266), 0), 100000000, 0, -5265), 0, (("set.mli", 303, 11453, 11457), ("set.mli", 303, 11453, 11484), 0), 0, Tag1 ("Stdlib__Set", 44)), 0); (("to_rev_seq", 2662), ((Tag1 (0, (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5264), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2622)), 0, (0)), 100000000, 0, -5263)], (0)), 100000000, 0, -5262), 0), 100000000, 0, -5261), 0, (("set.mli", 307, 11562, 11566), ("set.mli", 307, 11562, 11597), 0), 0, Tag1 ("Stdlib__Set", 45)), 0); (("add_seq", 2663), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2622)), 0, (0)), 100000000, 0, -5260)], (0)), 100000000, 0, -5259), (Tag1 (0, (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5258), (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5257), 0), 100000000, 0, -5256), 0), 100000000, 0, -5255), 0, (("set.mli", 311, 11676, 11680), ("set.mli", 311, 11676, 11713), 0), 0, Tag1 ("Stdlib__Set", 46)), 0); (("of_seq", 2664), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2622)), 0, (0)), 100000000, 0, -5254)], (0)), 100000000, 0, -5253), (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5252), 0), 100000000, 0, -5251), 0, (("set.mli", 315, 11791, 11795), ("set.mli", 315, 11791, 11822), 0), 0, Tag1 ("Stdlib__Set", 47)), 0); (("find_elt", 2665), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2622)), 0, (0)), 100000000, 0, -5250), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -5249), 0), 100000000, 0, -5248), (Tag1 (0, (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5247), (Tag3 ((("elt", 2622)), 0, (0)), 100000000, 0, -5246), 0), 100000000, 0, -5245), 0), 100000000, 0, -5244), 0, (("src/signatures.mli", 27, 1206, 1208), ("src/signatures.mli", 27, 1206, 1248), 0), 0, Tag1 ("Signatures", 4)), 0); (("map", 2666), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2622)), 0, (0)), 100000000, 0, -5243), (Tag3 ((("elt", 2622)), 0, (0)), 100000000, 0, -5242), 0), 100000000, 0, -5241), (Tag1 (0, (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5240), (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5239), 0), 100000000, 0, -5238), 0), 100000000, 0, -5237), 0, (("src/signatures.mli", 28, 1249, 1251), ("src/signatures.mli", 28, 1249, 1283), 0), 0, Tag1 ("Signatures", 5)), 0); (("of_list", 2667), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 2622)), 0, (0)), 100000000, 0, -5236)], (0)), 100000000, 0, -5235), (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5234), 0), 100000000, 0, -5233), 0, (("src/signatures.mli", 29, 1284, 1286), ("src/signatures.mli", 29, 1284, 1313), 0), 0, Tag1 ("Signatures", 6)), 0); (("print", 2668), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -5232), (Tag1 (0, (Tag3 ((("t", 2623)), 0, (0)), 100000000, 0, -5231), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5230), 0), 100000000, 0, -5229), 0), 100000000, 0, -5228), 0, (("src/signatures.mli", 30, 1314, 1316), ("src/signatures.mli", 30, 1314, 1357), 0), 0, Tag1 ("Signatures", 7)), 0)]), 0, (("src/resource.mli", 23, 1010, 1010), ("src/resource.mli", 23, 1010, 1052), 0), Tag1 ("Resource", 4)), 0, 0); Tag3 (("Cache", 2604), 0, (Tag1 ([Tag1 (("cache_entry", 2669), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/resource.mli", 27, 1075, 1079), ("src/resource.mli", 27, 1075, 1095), 0), 0, 0, 0, Tag1 ("Resource", 5)), 1, 0); Tag1 (("suspension", 2670), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/resource.mli", 28, 1096, 1100), ("src/resource.mli", 28, 1096, 1115), 0), 0, 0, 0, Tag1 ("Resource", 6)), 1, 0); Tag1 (("build_status", 2671), (0, 0, Tag1 ([(("Bbuilt", 471), (0), 0, (("src/resource.mli", 31, 1141, 1147), ("src/resource.mli", 31, 1141, 1155), 0), 0, Tag1 ("Resource", 8)); (("Bcannot_be_built", 472), (0), 0, (("src/resource.mli", 32, 1156, 1162), ("src/resource.mli", 32, 1156, 1180), 0), 0, Tag1 ("Resource", 9)); (("Bnot_built_yet", 473), (0), 0, (("src/resource.mli", 33, 1181, 1187), ("src/resource.mli", 33, 1181, 1203), 0), 0, Tag1 ("Resource", 10)); (("Bsuspension", 474), ([(Tag3 ((("suspension", 2670)), 0, (0)), 100000000, 0, -5546)]), 0, (("src/resource.mli", 34, 1204, 1210), ("src/resource.mli", 34, 1204, 1237), 0), 0, Tag1 ("Resource", 11))], 0), 1, 0, 0, 0, 0, 0, (("src/resource.mli", 30, 1117, 1121), ("src/resource.mli", 34, 1204, 1237), 0), 0, 0, 0, Tag1 ("Resource", 7)), 1, 0); (("clean", 2672), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5545), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5544), 0), 100000000, 0, -5543), 0, (("src/resource.mli", 36, 1239, 1243), ("src/resource.mli", 36, 1239, 1267), 0), 0, Tag1 ("Resource", 12)), 0); (("resource_state", 2673), ((Tag1 (0, (Tag3 ((("t", 2602)), 0, (0)), 100000000, 0, -5542), (Tag3 ((("build_status", 2671)), 0, (0)), 100000000, 0, -5541), 0), 100000000, 0, -5540), 0, (("src/resource.mli", 37, 1268, 1272), ("src/resource.mli", 37, 1268, 1310), 0), 0, Tag1 ("Resource", 13)), 0); (("resource_changed", 2674), ((Tag1 (0, (Tag3 ((("t", 2602)), 0, (0)), 100000000, 0, -5539), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5538), 0), 100000000, 0, -5537), 0, (("src/resource.mli", 38, 1311, 1315), ("src/resource.mli", 38, 1311, 1347), 0), 0, Tag1 ("Resource", 14)), 0); (("resource_has_changed", 2675), ((Tag1 (0, (Tag3 ((("t", 2602)), 0, (0)), 100000000, 0, -5536), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -5535), 0), 100000000, 0, -5534), 0, (("src/resource.mli", 39, 1348, 1352), ("src/resource.mli", 39, 1348, 1388), 0), 0, Tag1 ("Resource", 15)), 0); (("resource_built", 2676), ((Tag1 (0, (Tag3 ((("t", 2602)), 0, (0)), 100000000, 0, -5533), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5532), 0), 100000000, 0, -5531), 0, (("src/resource.mli", 40, 1389, 1393), ("src/resource.mli", 40, 1389, 1423), 0), 0, Tag1 ("Resource", 16)), 0); (("resource_failed", 2677), ((Tag1 (0, (Tag3 ((("t", 2602)), 0, (0)), 100000000, 0, -5530), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5529), 0), 100000000, 0, -5528), 0, (("src/resource.mli", 41, 1424, 1428), ("src/resource.mli", 41, 1424, 1459), 0), 0, Tag1 ("Resource", 17)), 0); (("import_in_build_dir", 2678), ((Tag1 (0, (Tag3 ((("t", 2602)), 0, (0)), 100000000, 0, -5527), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5526), 0), 100000000, 0, -5525), 0, (("src/resource.mli", 42, 1460, 1464), ("src/resource.mli", 42, 1460, 1499), 0), 0, Tag1 ("Resource", 18)), 0); (("suspend_resource", 2679), ((Tag1 (0, (Tag3 ((("t", 2602)), 0, (0)), 100000000, 0, -5524), (Tag1 (0, (Tag3 (Tag1 ((("Command", 1462)), "t"), 0, (0)), 100000000, 0, -5523), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5522), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5521), 0), 100000000, 0, -5520), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 2602)), 0, (0)), 100000000, 0, -5519)], (0)), 100000000, 0, -5518), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5517), 0), 100000000, 0, -5516), 0), 100000000, 0, -5515), 0), 100000000, 0, -5514), 0), 100000000, 0, -5513), 0, (("src/resource.mli", 43, 1500, 1504), ("src/resource.mli", 43, 1500, 1577), 0), 0, Tag1 ("Resource", 19)), 0); (("resume_resource", 2680), ((Tag1 (0, (Tag3 ((("t", 2602)), 0, (0)), 100000000, 0, -5512), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5511), 0), 100000000, 0, -5510), 0, (("src/resource.mli", 44, 1578, 1582), ("src/resource.mli", 44, 1578, 1613), 0), 0, Tag1 ("Resource", 20)), 0); (("resume_suspension", 2681), ((Tag1 (0, (Tag3 ((("suspension", 2670)), 0, (0)), 100000000, 0, -5509), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5508), 0), 100000000, 0, -5507), 0, (("src/resource.mli", 45, 1614, 1618), ("src/resource.mli", 45, 1614, 1660), 0), 0, Tag1 ("Resource", 21)), 0); (("get_optional_resource_suspension", 2682), ((Tag1 (0, (Tag3 ((("t", 2602)), 0, (0)), 100000000, 0, -5506), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 (Tag1 ((("Command", 1462)), "t"), 0, (0)), 100000000, 0, -5502); (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5505), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5504), 0), 100000000, 0, -5503)]), 100000000, 0, -5501)], (0)), 100000000, 0, -5500), 0), 100000000, 0, -5499), 0, (("src/resource.mli", 46, 1661, 1665), ("src/resource.mli", 46, 1661, 1744), 0), 0, Tag1 ("Resource", 22)), 0); (("clear_resource_failed", 2683), ((Tag1 (0, (Tag3 ((("t", 2602)), 0, (0)), 100000000, 0, -5498), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5497), 0), 100000000, 0, -5496), 0, (("src/resource.mli", 47, 1745, 1749), ("src/resource.mli", 47, 1745, 1786), 0), 0, Tag1 ("Resource", 23)), 0); (("add_dependency", 2684), ((Tag1 (0, (Tag3 ((("t", 2602)), 0, (0)), 100000000, 0, -5495), (Tag1 (0, (Tag3 ((("t", 2602)), 0, (0)), 100000000, 0, -5494), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5493), 0), 100000000, 0, -5492), 0), 100000000, 0, -5491), 0, (("src/resource.mli", 48, 1787, 1791), ("src/resource.mli", 48, 1787, 1826), 0), 0, Tag1 ("Resource", 24)), 0); (("fold_dependencies", 2685), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5490), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5489), (Tag1 (0, ((("a")), 100000000, 0, -5485), ((("a")), 100000000, 0, -5485), 0), 100000000, 0, -5488), 0), 100000000, 0, -5487), 0), 100000000, 0, -5486), (Tag1 (0, ((("a")), 100000000, 0, -5485), ((("a")), 100000000, 0, -5485), 0), 100000000, 0, -5484), 0), 100000000, 0, -5483), 0, (("src/resource.mli", 49, 1827, 1831), ("src/resource.mli", 49, 1827, 1897), 0), 0, Tag1 ("Resource", 25)), 0); (("external_is_up_to_date", 2686), ((Tag1 (0, (Tag3 ((("t", 2602)), 0, (0)), 100000000, 0, -5482), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -5481), 0), 100000000, 0, -5480), 0, (("src/resource.mli", 50, 1898, 1902), ("src/resource.mli", 50, 1898, 1940), 0), 0, Tag1 ("Resource", 26)), 0); (("dependencies", 2687), ((Tag1 (0, (Tag3 ((("t", 2602)), 0, (0)), 100000000, 0, -5479), (Tag3 (Tag1 ((("Resources", 2603)), "t"), 0, (0)), 100000000, 0, -5478), 0), 100000000, 0, -5477), 0, (("src/resource.mli", 53, 2000, 2004), ("src/resource.mli", 53, 2000, 2039), 0), 0, Tag1 ("Resource", 27)), 0); (("print_cache", 2688), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -5476), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5475), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5474), 0), 100000000, 0, -5473), 0), 100000000, 0, -5472), 0, (("src/resource.mli", 54, 2040, 2044), ("src/resource.mli", 54, 2040, 2094), 0), 0, Tag1 ("Resource", 28)), 0); (("print_dependencies", 2689), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -5471), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5470), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5469), 0), 100000000, 0, -5468), 0), 100000000, 0, -5467), 0, (("src/resource.mli", 55, 2095, 2099), ("src/resource.mli", 55, 2095, 2156), 0), 0, Tag1 ("Resource", 29)), 0)]), 0, (("src/resource.mli", 25, 1054, 1054), ("src/resource.mli", 56, 2157, 2162), 0), Tag1 ("Resource", 30)), 0, 0); (("digest", 2605), ((Tag1 (0, (Tag3 ((("t", 2602)), 0, (0)), 100000000, 0, -5226), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5225), 0), 100000000, 0, -5224), 0, (("src/resource.mli", 58, 2164, 2164), ("src/resource.mli", 58, 2164, 2188), 0), 0, Tag1 ("Resource", 31)), 0); (("exists_in_source_dir", 2606), ((Tag1 (0, (Tag3 ((("t", 2602)), 0, (0)), 100000000, 0, -5223), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -5222), 0), 100000000, 0, -5221), 0, (("src/resource.mli", 59, 2189, 2189), ("src/resource.mli", 59, 2189, 2225), 0), 0, Tag1 ("Resource", 32)), 0); (("exists_in_build_dir", 2607), ((Tag1 (0, (Tag3 ((("t", 2602)), 0, (0)), 100000000, 0, -5220), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -5219), 0), 100000000, 0, -5218), 0, (("src/resource.mli", 60, 2226, 2226), ("src/resource.mli", 60, 2226, 2261), 0), 0, Tag1 ("Resource", 33)), 0); (("in_build_dir", 2608), ((Tag1 (0, (Tag3 ((("t", 2602)), 0, (0)), 100000000, 0, -5217), (Tag3 ((("t", 2602)), 0, (0)), 100000000, 0, -5216), 0), 100000000, 0, -5215), 0, (("src/resource.mli", 61, 2262, 2262), ("src/resource.mli", 61, 2262, 2287), 0), 0, Tag1 ("Resource", 34)), 0); (("in_source_dir", 2609), ((Tag1 (0, (Tag3 ((("t", 2602)), 0, (0)), 100000000, 0, -5214), (Tag3 ((("t", 2602)), 0, (0)), 100000000, 0, -5213), 0), 100000000, 0, -5212), 0, (("src/resource.mli", 62, 2288, 2288), ("src/resource.mli", 62, 2288, 2314), 0), 0, Tag1 ("Resource", 35)), 0); (("clean_up_links", 2610), ((Tag1 (0, (Tag3 (Tag1 ((("Slurp", 1465)), "entry"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -5211)], (0)), 100000000, 0, -5210), (Tag3 (Tag1 ((("Slurp", 1465)), "entry"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -5209)], (0)), 100000000, 0, -5208), 0), 100000000, 0, -5207), 0, (("src/resource.mli", 64, 2316, 2316), ("src/resource.mli", 64, 2316, 2373), 0), 0, Tag1 ("Resource", 36)), 0); (("compare", 2611), ((Tag1 (0, (Tag3 ((("t", 2602)), 0, (0)), 100000000, 0, -5206), (Tag1 (0, (Tag3 ((("t", 2602)), 0, (0)), 100000000, 0, -5205), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -5204), 0), 100000000, 0, -5203), 0), 100000000, 0, -5202), 0, (("src/resource.mli", 66, 2375, 2375), ("src/resource.mli", 66, 2375, 2402), 0), 0, Tag1 ("Resource", 37)), 0); (("print", 2612), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -5201), (Tag1 (0, (Tag3 ((("t", 2602)), 0, (0)), 100000000, 0, -5200), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5199), 0), 100000000, 0, -5198), 0), 100000000, 0, -5197), 0, (("src/resource.mli", 67, 2403, 2403), ("src/resource.mli", 67, 2403, 2444), 0), 0, Tag1 ("Resource", 38)), 0); (("print_pattern", 2613), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -5196), (Tag1 (0, (Tag3 ((("resource_pattern", 2600)), 0, (0)), 100000000, 0, -5195), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5194), 0), 100000000, 0, -5193), 0), 100000000, 0, -5192), 0, (("src/resource.mli", 68, 2445, 2445), ("src/resource.mli", 68, 2445, 2509), 0), 0, Tag1 ("Resource", 39)), 0); (("clean", 2614), ((Tag1 (0, (Tag3 ((("t", 2602)), 0, (0)), 100000000, 0, -5191), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5190), 0), 100000000, 0, -5189), 0, (("src/resource.mli", 69, 2510, 2510), ("src/resource.mli", 69, 2510, 2531), 0), 0, Tag1 ("Resource", 40)), 0); (("import", 2615), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5188), (Tag3 ((("t", 2602)), 0, (0)), 100000000, 0, -5187), 0), 100000000, 0, -5186), 0, (("src/resource.mli", 70, 2532, 2532), ("src/resource.mli", 70, 2532, 2556), 0), 0, Tag1 ("Resource", 41)), 0); (("import_pattern", 2616), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5185), (Tag3 ((("resource_pattern", 2600)), 0, (0)), 100000000, 0, -5184), 0), 100000000, 0, -5183), 0, (("src/resource.mli", 71, 2557, 2557), ("src/resource.mli", 71, 2557, 2604), 0), 0, Tag1 ("Resource", 42)), 0); (("matchit", 2617), ((Tag1 (0, (Tag3 ((("resource_pattern", 2600)), 0, (0)), 100000000, 0, -5182), (Tag1 (0, (Tag3 ((("t", 2602)), 0, (0)), 100000000, 0, -5181), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("env", 2601)), 0, (0)), 100000000, 0, -5180)], (0)), 100000000, 0, -5179), 0), 100000000, 0, -5178), 0), 100000000, 0, -5177), 0, (("src/resource.mli", 73, 2606, 2606), ("src/resource.mli", 73, 2606, 2655), 0), 0, Tag1 ("Resource", 43)), 0); (("subst", 2618), ((Tag1 (0, (Tag3 ((("env", 2601)), 0, (0)), 100000000, 0, -5176), (Tag1 (0, (Tag3 ((("t", 2602)), 0, (0)), 100000000, 0, -5175), (Tag3 ((("t", 2602)), 0, (0)), 100000000, 0, -5174), 0), 100000000, 0, -5173), 0), 100000000, 0, -5172), 0, (("src/resource.mli", 74, 2656, 2656), ("src/resource.mli", 74, 2656, 2681), 0), 0, Tag1 ("Resource", 44)), 0); (("subst_any", 2619), ((Tag1 (0, (Tag3 ((("env", 2601)), 0, (0)), 100000000, 0, -5171), (Tag1 (0, (Tag3 ((("t", 2602)), 0, (0)), 100000000, 0, -5170), (Tag3 ((("t", 2602)), 0, (0)), 100000000, 0, -5169), 0), 100000000, 0, -5168), 0), 100000000, 0, -5167), 0, (("src/resource.mli", 75, 2682, 2682), ("src/resource.mli", 75, 2682, 2711), 0), 0, Tag1 ("Resource", 45)), 0); (("subst_pattern", 2620), ((Tag1 (0, (Tag3 ((("env", 2601)), 0, (0)), 100000000, 0, -5166), (Tag1 (0, (Tag3 ((("resource_pattern", 2600)), 0, (0)), 100000000, 0, -5165), (Tag3 ((("t", 2602)), 0, (0)), 100000000, 0, -5164), 0), 100000000, 0, -5163), 0), 100000000, 0, -5162), 0, (("src/resource.mli", 76, 2712, 2712), ("src/resource.mli", 76, 2712, 2760), 0), 0, Tag1 ("Resource", 46)), 0); (("print_env", 2621), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -5161), (Tag1 (0, (Tag3 ((("env", 2601)), 0, (0)), 100000000, 0, -5160), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5159), 0), 100000000, 0, -5158), 0), 100000000, 0, -5157), 0, (("src/resource.mli", 78, 2797, 2797), ("src/resource.mli", 78, 2797, 2844), 0), 0, Tag1 ("Resource", 47)), 0)]), 0, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), Tag1 ("", 26)), 0, 0); Tag3 (("Rule", 1473), 0, (Tag1 ([Tag1 (("env", 2690), (0, 0, 0, 1, ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -5697), (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -5696), 0), 100000000, 0, -5695)), 0, 0, 0, 0, (("src/rule.mli", 19, 958, 958), ("src/rule.mli", 19, 958, 993), 0), 0, 0, 0, Tag1 ("Rule", 0)), 1, 0); Tag1 (("builder", 2691), (0, 0, 0, 1, ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -5694)], (0)), 100000000, 0, -5693)], (0)), 100000000, 0, -5692), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((("My_std", 1450)), "Outcome"), "t"), [(Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -5690); (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -5691)], (0)), 100000000, 0, -5689)], (0)), 100000000, 0, -5688), 0), 100000000, 0, -5687)), 0, 0, 0, 0, (("src/rule.mli", 20, 994, 994), ("src/rule.mli", 20, 994, 1065), 0), 0, 0, 0, Tag1 ("Rule", 1)), 1, 0); Tag1 (("action", 2692), (0, 0, 0, 1, ((Tag1 (0, (Tag3 ((("env", 2690)), 0, (0)), 100000000, 0, -5686), (Tag1 (0, (Tag3 ((("builder", 2691)), 0, (0)), 100000000, 0, -5685), (Tag3 (Tag1 ((("Command", 1462)), "t"), 0, (0)), 100000000, 0, -5684), 0), 100000000, 0, -5683), 0), 100000000, 0, -5682)), 0, 0, 0, 0, (("src/rule.mli", 21, 1066, 1066), ("src/rule.mli", 21, 1066, 1107), 0), 0, 0, 0, Tag1 ("Rule", 2)), 1, 0); Tag1 (("gen_rule", 2693), ([((("a")), 100000000, 0, -5681)], 1, 0, 1, 0, [7], [2], 0, 0, (("src/rule.mli", 23, 1109, 1109), ("src/rule.mli", 23, 1109, 1125), 0), 0, 0, 0, Tag1 ("Rule", 3)), 1, 0); Tag1 (("rule", 2694), (0, 0, 0, 1, ((Tag3 ((("gen_rule", 2693)), [(Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -5680)], (0)), 100000000, 0, -5679)), 0, 0, 0, 0, (("src/rule.mli", 25, 1127, 1127), ("src/rule.mli", 25, 1127, 1158), 0), 0, 0, 0, Tag1 ("Rule", 4)), 1, 0); Tag1 (("rule_scheme", 2695), (0, 0, 0, 1, ((Tag3 ((("gen_rule", 2693)), [(Tag3 (Tag1 ((("Resource", 1472)), "resource_pattern"), 0, (0)), 100000000, 0, -5678)], (0)), 100000000, 0, -5677)), 0, 0, 0, 0, (("src/rule.mli", 26, 1159, 1159), ("src/rule.mli", 26, 1159, 1203), 0), 0, 0, 0, Tag1 ("Rule", 5)), 1, 0); Tag1 (("rule_printer", 2696), ([((("a")), 100000000, 0, -5671)], 1, 0, 1, ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -5676), (Tag1 (0, ((("a")), 100000000, 0, -5671), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5675), 0), 100000000, 0, -5674), 0), 100000000, 0, -5673), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -5672), (Tag1 (0, (Tag3 ((("gen_rule", 2693)), [((("a")), 100000000, 0, -5671)], (0)), 100000000, 0, -5670), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5669), 0), 100000000, 0, -5668), 0), 100000000, 0, -5667), 0), 100000000, 0, -5666)), [31], [0], 0, 0, (("src/rule.mli", 28, 1205, 1205), ("src/rule.mli", 28, 1205, 1303), 0), 0, 0, 0, Tag1 ("Rule", 6)), 1, 0); Tag2 (("Failed", 2697), ((Tag3 ("exn", 7)), 0, (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Rule", 7)), 2, 0); (("name_of_rule", 2698), ((Tag1 (0, (Tag3 ((("gen_rule", 2693)), [((("a")), 100000000, 0, -5665)], (0)), 100000000, 0, -5664), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5663), 0), 100000000, 0, -5662), 0, (("src/rule.mli", 34, 1429, 1429), ("src/rule.mli", 34, 1429, 1469), 0), 0, Tag1 ("Rule", 8)), 0); (("deps_of_rule", 2699), ((Tag1 (0, (Tag3 ((("gen_rule", 2693)), [((("a")), 100000000, 0, -5661)], (0)), 100000000, 0, -5660), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -5659)], (0)), 100000000, 0, -5658), 0), 100000000, 0, -5657), 0, (("src/rule.mli", 35, 1470, 1470), ("src/rule.mli", 35, 1470, 1519), 0), 0, Tag1 ("Rule", 9)), 0); (("prods_of_rule", 2700), ((Tag1 (0, (Tag3 ((("gen_rule", 2693)), [((("a")), 100000000, 0, -5655)], (0)), 100000000, 0, -5656), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -5655)], (0)), 100000000, 0, -5654), 0), 100000000, 0, -5653), 0, (("src/rule.mli", 36, 1520, 1520), ("src/rule.mli", 36, 1520, 1562), 0), 0, Tag1 ("Rule", 10)), 0); (("doc_of_rule", 2701), ((Tag1 (0, (Tag3 ((("gen_rule", 2693)), [((("a")), 100000000, 0, -5652)], (0)), 100000000, 0, -5651), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5650)], (0)), 100000000, 0, -5649), 0), 100000000, 0, -5648), 0, (("src/rule.mli", 37, 1563, 1563), ("src/rule.mli", 37, 1563, 1609), 0), 0, Tag1 ("Rule", 11)), 0); (("rule", 2702), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5647), (Tag1 (Tag1 ("tags"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5646)], (0)), 100000000, 0, -5645)], (0)), 100000000, 0, -5644), (Tag1 (Tag1 ("prods"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5643)], (0)), 100000000, 0, -5642)], (0)), 100000000, 0, -5641), (Tag1 (Tag1 ("deps"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5640)], (0)), 100000000, 0, -5639)], (0)), 100000000, 0, -5638), (Tag1 (Tag1 ("prod"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5637)], (0)), 100000000, 0, -5636), (Tag1 (Tag1 ("dep"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5635)], (0)), 100000000, 0, -5634), (Tag1 (Tag1 ("stamp"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5633)], (0)), 100000000, 0, -5632), (Tag1 (Tag1 ("insert"), (Tag3 ((Tag3 ("option", 10)), [(Tag8 (([("after", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5630)))); ("before", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5631)))); ("bottom", (0)); ("top", (0))], (0, 100000000, 0, -5629), 1, 0, 0)), 100000000, 0, -5628)], (0)), 100000000, 0, -5627), (Tag1 (Tag1 ("doc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5626)], (0)), 100000000, 0, -5625), (Tag1 (0, (Tag3 ((("action", 2692)), 0, (0)), 100000000, 0, -5624), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5623), 0), 100000000, 0, -5622), 0), 100000000, 0, -5621), 0), 100000000, 0, -5620), 0), 100000000, 0, -5619), 0), 100000000, 0, -5618), 0), 100000000, 0, -5617), 0), 100000000, 0, -5616), 0), 100000000, 0, -5615), 0), 100000000, 0, -5614), 0), 100000000, 0, -5613), 0, (("src/rule.mli", 39, 1611, 1611), ("src/rule.mli", 48, 1842, 1858), 0), 0, Tag1 ("Rule", 12)), 0); (("copy_rule", 2703), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5612), (Tag1 (Tag1 ("insert"), (Tag3 ((Tag3 ("option", 10)), [(Tag8 (([("after", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5610)))); ("before", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5611)))); ("bottom", (0)); ("top", (0))], (0, 100000000, 0, -5609), 1, 0, 0)), 100000000, 0, -5608)], (0)), 100000000, 0, -5607), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5606), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5605), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5604), 0), 100000000, 0, -5603), 0), 100000000, 0, -5602), 0), 100000000, 0, -5601), 0), 100000000, 0, -5600), 0, (("src/rule.mli", 51, 1911, 1911), ("src/rule.mli", 53, 2006, 2032), 0), 0, Tag1 ("Rule", 13)), 0); Tag3 (("Common_commands", 2704), 0, (Tag1 ([(("mv", 2717), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -5735), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -5734), (Tag3 (Tag1 ((("Command", 1462)), "t"), 0, (0)), 100000000, 0, -5733), 0), 100000000, 0, -5732), 0), 100000000, 0, -5731), 0, (("src/rule.mli", 56, 2063, 2065), ("src/rule.mli", 56, 2063, 2111), 0), 0, Tag1 ("Rule", 14)), 0); (("cp", 2718), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -5730), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -5729), (Tag3 (Tag1 ((("Command", 1462)), "t"), 0, (0)), 100000000, 0, -5728), 0), 100000000, 0, -5727), 0), 100000000, 0, -5726), 0, (("src/rule.mli", 57, 2112, 2114), ("src/rule.mli", 57, 2112, 2160), 0), 0, Tag1 ("Rule", 15)), 0); (("cp_p", 2719), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -5725), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -5724), (Tag3 (Tag1 ((("Command", 1462)), "t"), 0, (0)), 100000000, 0, -5723), 0), 100000000, 0, -5722), 0), 100000000, 0, -5721), 0, (("src/rule.mli", 58, 2161, 2163), ("src/rule.mli", 58, 2161, 2211), 0), 0, Tag1 ("Rule", 16)), 0); (("ln_f", 2720), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -5720), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -5719), (Tag3 (Tag1 ((("Command", 1462)), "t"), 0, (0)), 100000000, 0, -5718), 0), 100000000, 0, -5717), 0), 100000000, 0, -5716), 0, (("src/rule.mli", 59, 2212, 2214), ("src/rule.mli", 59, 2212, 2262), 0), 0, Tag1 ("Rule", 17)), 0); (("ln_s", 2721), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -5715), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -5714), (Tag3 (Tag1 ((("Command", 1462)), "t"), 0, (0)), 100000000, 0, -5713), 0), 100000000, 0, -5712), 0), 100000000, 0, -5711), 0, (("src/rule.mli", 60, 2263, 2265), ("src/rule.mli", 60, 2263, 2313), 0), 0, Tag1 ("Rule", 18)), 0); (("rm_f", 2722), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -5710), (Tag3 (Tag1 ((("Command", 1462)), "t"), 0, (0)), 100000000, 0, -5709), 0), 100000000, 0, -5708), 0, (("src/rule.mli", 61, 2314, 2316), ("src/rule.mli", 61, 2314, 2350), 0), 0, Tag1 ("Rule", 19)), 0); (("chmod", 2723), ((Tag1 (0, (Tag3 (Tag1 ((("Command", 1462)), "spec"), 0, (0)), 100000000, 0, -5707), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -5706), (Tag3 (Tag1 ((("Command", 1462)), "t"), 0, (0)), 100000000, 0, -5705), 0), 100000000, 0, -5704), 0), 100000000, 0, -5703), 0, (("src/rule.mli", 62, 2351, 2353), ("src/rule.mli", 62, 2351, 2404), 0), 0, Tag1 ("Rule", 20)), 0); (("cmp", 2724), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -5702), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -5701), (Tag3 (Tag1 ((("Command", 1462)), "t"), 0, (0)), 100000000, 0, -5700), 0), 100000000, 0, -5699), 0), 100000000, 0, -5698), 0, (("src/rule.mli", 63, 2405, 2407), ("src/rule.mli", 63, 2405, 2454), 0), 0, Tag1 ("Rule", 21)), 0)]), 0, (("src/rule.mli", 55, 2034, 2034), ("src/rule.mli", 64, 2455, 2458), 0), Tag1 ("Rule", 22)), 0, 0); (("print", 2705), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -5599), (Tag1 (0, (Tag3 ((("rule", 2694)), 0, (0)), 100000000, 0, -5598), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5597), 0), 100000000, 0, -5596), 0), 100000000, 0, -5595), 0, (("src/rule.mli", 66, 2460, 2460), ("src/rule.mli", 66, 2460, 2504), 0), 0, Tag1 ("Rule", 23)), 0); (("pretty_print", 2706), ((Tag3 ((("rule_printer", 2696)), [((("a")), 100000000, 0, -5594)], (0)), 100000000, 0, -5593), 0, (("src/rule.mli", 67, 2505, 2505), ("src/rule.mli", 67, 2505, 2539), 0), 0, Tag1 ("Rule", 24)), 0); (("subst", 2707), ((Tag1 (0, (Tag3 (Tag1 ((("Resource", 1472)), "env"), 0, (0)), 100000000, 0, -5592), (Tag1 (0, (Tag3 ((("rule_scheme", 2695)), 0, (0)), 100000000, 0, -5591), (Tag3 ((("rule", 2694)), 0, (0)), 100000000, 0, -5590), 0), 100000000, 0, -5589), 0), 100000000, 0, -5588), 0, (("src/rule.mli", 71, 2569, 2569), ("src/rule.mli", 71, 2569, 2616), 0), 0, Tag1 ("Rule", 25)), 0); (("can_produce", 2708), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -5587), (Tag1 (0, (Tag3 ((("rule_scheme", 2695)), 0, (0)), 100000000, 0, -5586), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("rule", 2694)), 0, (0)), 100000000, 0, -5585)], (0)), 100000000, 0, -5584), 0), 100000000, 0, -5583), 0), 100000000, 0, -5582), 0, (("src/rule.mli", 72, 2617, 2617), ("src/rule.mli", 72, 2617, 2675), 0), 0, Tag1 ("Rule", 26)), 0); (("compare", 2709), ((Tag1 (0, (Tag3 ((("gen_rule", 2693)), [((("a")), 100000000, 0, -5580)], (0)), 100000000, 0, -5581), (Tag1 (0, (Tag3 ((("gen_rule", 2693)), [((("a")), 100000000, 0, -5580)], (0)), 100000000, 0, -5579), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -5578), 0), 100000000, 0, -5577), 0), 100000000, 0, -5576), 0, (("src/rule.mli", 74, 2725, 2725), ("src/rule.mli", 74, 2725, 2772), 0), 0, Tag1 ("Rule", 27)), 0); (("print_rule_name", 2710), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -5575), (Tag1 (0, (Tag3 ((("gen_rule", 2693)), [((("a")), 100000000, 0, -5574)], (0)), 100000000, 0, -5573), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5572), 0), 100000000, 0, -5571), 0), 100000000, 0, -5570), 0, (("src/rule.mli", 76, 2774, 2774), ("src/rule.mli", 76, 2774, 2835), 0), 0, Tag1 ("Rule", 28)), 0); (("print_rule_contents", 2711), ((Tag3 ((("rule_printer", 2696)), [((("a")), 100000000, 0, -5569)], (0)), 100000000, 0, -5568), 0, (("src/rule.mli", 77, 2836, 2836), ("src/rule.mli", 77, 2836, 2877), 0), 0, Tag1 ("Rule", 29)), 0); (("get_rules", 2712), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5567), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("rule_scheme", 2695)), 0, (0)), 100000000, 0, -5566)], (0)), 100000000, 0, -5565), 0), 100000000, 0, -5564), 0, (("src/rule.mli", 79, 2879, 2879), ("src/rule.mli", 79, 2879, 2919), 0), 0, Tag1 ("Rule", 30)), 0); (("clear_rules", 2713), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5563), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5562), 0), 100000000, 0, -5561), 0, (("src/rule.mli", 80, 2920, 2920), ("src/rule.mli", 80, 2920, 2950), 0), 0, Tag1 ("Rule", 31)), 0); (("call", 2714), ((Tag1 (0, (Tag3 ((("builder", 2691)), 0, (0)), 100000000, 0, -5560), (Tag1 (0, (Tag3 ((("rule", 2694)), 0, (0)), 100000000, 0, -5559), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5558), 0), 100000000, 0, -5557), 0), 100000000, 0, -5556), 0, (("src/rule.mli", 82, 2952, 2952), ("src/rule.mli", 82, 2952, 2986), 0), 0, Tag1 ("Rule", 32)), 0); (("build_deps_of_tags", 2715), ((Tag1 (0, (Tag3 ((("builder", 2691)), 0, (0)), 100000000, 0, -5555), (Tag1 (0, (Tag3 (Tag1 ((("Tags", 1452)), "t"), 0, (0)), 100000000, 0, -5554), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -5553)], (0)), 100000000, 0, -5552), 0), 100000000, 0, -5551), 0), 100000000, 0, -5550), 0, (("src/rule.mli", 84, 2988, 2988), ("src/rule.mli", 84, 2988, 3049), 0), 0, Tag1 ("Rule", 33)), 0); (("show_documentation", 2716), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5549), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5548), 0), 100000000, 0, -5547), 0, (("src/rule.mli", 86, 3051, 3051), ("src/rule.mli", 86, 3051, 3088), 0), 0, Tag1 ("Rule", 34)), 0)]), 0, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), Tag1 ("", 27)), 0, 0); Tag3 (("Solver", 1474), 0, (Tag1 ([Tag1 (("backtrace", 2725), (0, 0, Tag1 ([(("Leaf", 270), ([(Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -5749)]), 0, (("src/solver.mli", 17, 956, 958), ("src/solver.mli", 17, 956, 978), 0), 0, Tag1 ("Solver", 1)); (("Choice", 309), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("backtrace", 2725)), 0, (0)), 100000000, 0, -5751)], (0)), 100000000, 0, -5750)]), 0, (("src/solver.mli", 18, 979, 981), ("src/solver.mli", 18, 979, 1007), 0), 0, Tag1 ("Solver", 2)); (("Depth", 310), ([(Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -5752); (Tag3 ((("backtrace", 2725)), 0, (0)), 100000000, 0, -5753)]), 0, (("src/solver.mli", 19, 1008, 1010), ("src/solver.mli", 19, 1008, 1043), 0), 0, Tag1 ("Solver", 3)); (("Target", 311), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5754); (Tag3 ((("backtrace", 2725)), 0, (0)), 100000000, 0, -5755)]), 0, (("src/solver.mli", 20, 1044, 1046), ("src/solver.mli", 20, 1044, 1076), 0), 0, Tag1 ("Solver", 4))], 0), 0, 0, 0, 0, 0, 0, (("src/solver.mli", 16, 931, 931), ("src/solver.mli", 20, 1044, 1076), 0), 0, 0, 0, Tag1 ("Solver", 0)), 1, 0); Tag2 (("Failed", 2726), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((("backtrace", 2725)), 0, (0)), 100000000, 0, -5748)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Solver", 5)), 2, 0); Tag2 (("Circular", 2727), ((Tag3 ("exn", 7)), 0, ([(Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -5745); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -5747)], (0)), 100000000, 0, -5746)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Solver", 6)), 2, 0); (("solve", 2728), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -5744), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5743), 0), 100000000, 0, -5742), 0, (("src/solver.mli", 24, 1159, 1159), ("src/solver.mli", 24, 1159, 1189), 0), 0, Tag1 ("Solver", 7)), 0); (("solve_target", 2729), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5741), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -5740)], (0)), 100000000, 0, -5739), (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -5738), 0), 100000000, 0, -5737), 0), 100000000, 0, -5736), 0, (("src/solver.mli", 25, 1190, 1190), ("src/solver.mli", 25, 1190, 1248), 0), 0, Tag1 ("Solver", 8)), 0)]), 0, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), Tag1 ("", 28)), 0, 0); Tag3 (("Report", 1475), 0, (Tag1 ([(("print_backtrace_analyze", 2730), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -5765), (Tag1 (0, (Tag3 (Tag1 ((("Solver", 1474)), "backtrace"), 0, (0)), 100000000, 0, -5764), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5763), 0), 100000000, 0, -5762), 0), 100000000, 0, -5761), 0, (("src/report.mli", 18, 939, 939), ("src/report.mli", 18, 939, 1013), 0), 0, Tag1 ("Report", 0)), 0); (("print_backtrace", 2731), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -5760), (Tag1 (0, (Tag3 (Tag1 ((("Solver", 1474)), "backtrace"), 0, (0)), 100000000, 0, -5759), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5758), 0), 100000000, 0, -5757), 0), 100000000, 0, -5756), 0, (("src/report.mli", 20, 1015, 1015), ("src/report.mli", 20, 1015, 1081), 0), 0, Tag1 ("Report", 1)), 0)]), 0, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), Tag1 ("", 29)), 0, 0); Tag3 (("Tools", 1476), 0, (Tag1 ([(("tags_of_pathname", 2732), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -5778), (Tag3 (Tag1 ((("Tags", 1452)), "t"), 0, (0)), 100000000, 0, -5777), 0), 100000000, 0, -5776), 0, (("src/tools.mli", 18, 944, 944), ("src/tools.mli", 18, 944, 987), 0), 0, Tag1 ("Tools", 0)), 0); (("path_and_context_of_string", 2733), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -5775), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -5774)], (0)), 100000000, 0, -5773), 0), 100000000, 0, -5772), 0, (("src/tools.mli", 19, 988, 988), ("src/tools.mli", 19, 988, 1050), 0), 0, Tag1 ("Tools", 1)), 0); (("pp_l", 2734), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -5771), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5770)], (0)), 100000000, 0, -5769), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5768), 0), 100000000, 0, -5767), 0), 100000000, 0, -5766), 0, (("src/tools.mli", 20, 1051, 1051), ("src/tools.mli", 20, 1051, 1101), 0), 0, Tag1 ("Tools", 2)), 0)]), 0, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), Tag1 ("", 30)), 0, 0); Tag3 (("Fda", 1477), 0, (Tag1 ([Tag2 (("Exit_hygiene_failed", 2735), ((Tag3 ("exn", 7)), 0, (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Fda", 0)), 2, 0); (("inspect", 2736), ((Tag1 (0, (Tag3 (Tag1 ((("Slurp", 1465)), "entry"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -5782)], (0)), 100000000, 0, -5781), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5780), 0), 100000000, 0, -5779), 0, (("src/fda.mli", 20, 967, 967), ("src/fda.mli", 20, 967, 1005), 0), 0, Tag1 ("Fda", 1)), 0)]), 0, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), Tag1 ("", 31)), 0, 0); Tag3 (("Findlib", 1478), 0, (Tag1 ([Tag1 (("command_spec", 2737), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Command", 1462)), "spec"), 0, (0)), 100000000, 0, -5836)), 0, 0, 0, 0, (("src/findlib.mli", 17, 928, 960), ("src/findlib.mli", 17, 928, 992), 0), 0, 0, 0, Tag1 ("Findlib", 0)), 1, 0); Tag1 (("error", 2738), (0, 0, Tag1 ([(("Cannot_run_ocamlfind", 1176), (0), 0, (("src/signatures.mli", 477, 18184, 18188), ("src/signatures.mli", 477, 18184, 18210), 0), 0, Tag1 ("Signatures", 223)); (("Dependency_not_found", 1177), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5831); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5832)]), 0, (("src/signatures.mli", 478, 18211, 18215), ("src/signatures.mli", 478, 18211, 18256), 0), 0, Tag1 ("Signatures", 224)); (("Package_not_found", 1178), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5833)]), 0, (("src/signatures.mli", 479, 18283, 18287), ("src/signatures.mli", 479, 18283, 18316), 0), 0, Tag1 ("Signatures", 225)); (("Cannot_parse_query", 1179), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5834); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5835)]), 0, (("src/signatures.mli", 480, 18317, 18321), ("src/signatures.mli", 480, 18317, 18360), 0), 0, Tag1 ("Signatures", 226))], 0), 1, 0, 0, 0, 0, 0, (("src/signatures.mli", 476, 18169, 18171), ("src/signatures.mli", 480, 18317, 18360), 0), 0, 0, 0, Tag1 ("Signatures", 222)), 1, 0); Tag2 (("Findlib_error", 2739), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((("error", 2738)), 0, (0)), 100000000, 0, -5830)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Signatures", 227)), 2, 0); (("string_of_error", 2740), ((Tag1 (0, (Tag3 ((("error", 2738)), 0, (0)), 100000000, 0, -5829), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5828), 0), 100000000, 0, -5827), 0, (("src/signatures.mli", 484, 18425, 18427), ("src/signatures.mli", 484, 18425, 18463), 0), 0, Tag1 ("Signatures", 228)), 0); (("report_error", 2741), ((Tag1 (0, (Tag3 ((("error", 2738)), 0, (0)), 100000000, 0, -5826), ((("a")), 100000000, 0, -5825), 0), 100000000, 0, -5824), 0, (("src/signatures.mli", 487, 18521, 18523), ("src/signatures.mli", 487, 18521, 18552), 0), 0, Tag1 ("Signatures", 229)), 0); Tag1 (("package", 2742), (0, 0, [[(("name", 1184), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5815), (("src/signatures.mli", 491, 18644, 18648), ("src/signatures.mli", 491, 18644, 18661), 0), 0, Tag1 ("Signatures", 231)); (("description", 1185), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5816), (("src/signatures.mli", 492, 18662, 18666), ("src/signatures.mli", 492, 18662, 18686), 0), 0, Tag1 ("Signatures", 232)); (("version", 1186), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5817), (("src/signatures.mli", 493, 18687, 18691), ("src/signatures.mli", 493, 18687, 18707), 0), 0, Tag1 ("Signatures", 233)); (("archives_byte", 1187), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5818), (("src/signatures.mli", 494, 18708, 18712), ("src/signatures.mli", 494, 18708, 18734), 0), 0, Tag1 ("Signatures", 234)); (("archives_native", 1188), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5819), (("src/signatures.mli", 496, 18815, 18819), ("src/signatures.mli", 496, 18815, 18843), 0), 0, Tag1 ("Signatures", 235)); (("link_options", 1189), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5820), (("src/signatures.mli", 498, 18925, 18929), ("src/signatures.mli", 498, 18925, 18950), 0), 0, Tag1 ("Signatures", 236)); (("location", 1190), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5821), (("src/signatures.mli", 499, 18951, 18955), ("src/signatures.mli", 499, 18951, 18972), 0), 0, Tag1 ("Signatures", 237)); (("dependencies", 1191), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("package", 2742)), 0, (0)), 100000000, 0, -5823)], (0)), 100000000, 0, -5822), (("src/signatures.mli", 500, 18973, 18977), ("src/signatures.mli", 500, 18973, 19004), 0), 0, Tag1 ("Signatures", 238))]], 1, 0, 0, 0, 0, 0, (("src/signatures.mli", 490, 18625, 18627), ("src/signatures.mli", 502, 19075, 19078), 0), 0, 0, 0, Tag1 ("Signatures", 230)), 1, 0); (("query", 2743), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5814), (Tag3 ((("package", 2742)), 0, (0)), 100000000, 0, -5813), 0), 100000000, 0, -5812), 0, (("src/signatures.mli", 505, 19112, 19114), ("src/signatures.mli", 505, 19112, 19142), 0), 0, Tag1 ("Signatures", 239)), 0); (("list", 2744), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5811), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5810)], (0)), 100000000, 0, -5809), 0), 100000000, 0, -5808), 0, (("src/signatures.mli", 509, 19229, 19231), ("src/signatures.mli", 509, 19229, 19260), 0), 0, Tag1 ("Signatures", 240)), 0); (("topological_closure", 2745), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("package", 2742)), 0, (0)), 100000000, 0, -5807)], (0)), 100000000, 0, -5806), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("package", 2742)), 0, (0)), 100000000, 0, -5805)], (0)), 100000000, 0, -5804), 0), 100000000, 0, -5803), 0, (("src/signatures.mli", 512, 19313, 19315), ("src/signatures.mli", 512, 19313, 19368), 0), 0, Tag1 ("Signatures", 241)), 0); (("include_flags", 2746), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("package", 2742)), 0, (0)), 100000000, 0, -5802)], (0)), 100000000, 0, -5801), (Tag3 ((("command_spec", 2737)), 0, (0)), 100000000, 0, -5800), 0), 100000000, 0, -5799), 0, (("src/signatures.mli", 519, 19659, 19661), ("src/signatures.mli", 519, 19659, 19708), 0), 0, Tag1 ("Signatures", 242)), 0); (("compile_flags_byte", 2747), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("package", 2742)), 0, (0)), 100000000, 0, -5798)], (0)), 100000000, 0, -5797), (Tag3 ((("command_spec", 2737)), 0, (0)), 100000000, 0, -5796), 0), 100000000, 0, -5795), 0, (("src/signatures.mli", 522, 19761, 19763), ("src/signatures.mli", 522, 19761, 19815), 0), 0, Tag1 ("Signatures", 243)), 0); (("compile_flags_native", 2748), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("package", 2742)), 0, (0)), 100000000, 0, -5794)], (0)), 100000000, 0, -5793), (Tag3 ((("command_spec", 2737)), 0, (0)), 100000000, 0, -5792), 0), 100000000, 0, -5791), 0, (("src/signatures.mli", 526, 19903, 19905), ("src/signatures.mli", 526, 19903, 19959), 0), 0, Tag1 ("Signatures", 244)), 0); (("link_flags_byte", 2749), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("package", 2742)), 0, (0)), 100000000, 0, -5790)], (0)), 100000000, 0, -5789), (Tag3 ((("command_spec", 2737)), 0, (0)), 100000000, 0, -5788), 0), 100000000, 0, -5787), 0, (("src/signatures.mli", 529, 20022, 20024), ("src/signatures.mli", 529, 20022, 20073), 0), 0, Tag1 ("Signatures", 245)), 0); (("link_flags_native", 2750), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("package", 2742)), 0, (0)), 100000000, 0, -5786)], (0)), 100000000, 0, -5785), (Tag3 ((("command_spec", 2737)), 0, (0)), 100000000, 0, -5784), 0), 100000000, 0, -5783), 0, (("src/signatures.mli", 533, 20207, 20209), ("src/signatures.mli", 533, 20207, 20260), 0), 0, Tag1 ("Signatures", 246)), 0)]), 0, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), Tag1 ("", 32)), 0, 0); Tag3 (("Ocaml_arch", 1479), 0, (Tag1 ([Tag1 (("arch", 2751), ([((("a")), 100000000, 0, -5938)], 1, Tag1 ([(("Arch_dir", 1115), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5937); ((("a")), 100000000, 0, -5938); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("arch", 2751)), [((("a")), 100000000, 0, -5938)], (0)), 100000000, 0, -5940)], (0)), 100000000, 0, -5939)]), 0, (("src/signatures.mli", 440, 17077, 17081), ("src/signatures.mli", 440, 17077, 17121), 0), 0, Tag1 ("Signatures", 201)); (("Arch_dir_pack", 1116), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5941); ((("a")), 100000000, 0, -5938); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("arch", 2751)), [((("a")), 100000000, 0, -5938)], (0)), 100000000, 0, -5943)], (0)), 100000000, 0, -5942)]), 0, (("src/signatures.mli", 441, 17122, 17126), ("src/signatures.mli", 441, 17122, 17171), 0), 0, Tag1 ("Signatures", 202)); (("Arch_file", 1117), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5944); ((("a")), 100000000, 0, -5938)]), 0, (("src/signatures.mli", 442, 17172, 17176), ("src/signatures.mli", 442, 17172, 17202), 0), 0, Tag1 ("Signatures", 203))], 0), 0, 0, [31], [0], 0, 0, (("src/signatures.mli", 439, 17052, 17054), ("src/signatures.mli", 442, 17172, 17202), 0), 0, 0, 0, Tag1 ("Signatures", 200)), 1, 0); (("dir", 2752), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5936), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("arch", 2751)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5935)], (0)), 100000000, 0, -5934)], (0)), 100000000, 0, -5933), (Tag3 ((("arch", 2751)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5932)], (0)), 100000000, 0, -5931), 0), 100000000, 0, -5930), 0), 100000000, 0, -5929), 0, (("src/signatures.mli", 444, 17204, 17206), ("src/signatures.mli", 444, 17204, 17253), 0), 0, Tag1 ("Signatures", 204)), 0); (("dir_pack", 2753), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5928), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("arch", 2751)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5927)], (0)), 100000000, 0, -5926)], (0)), 100000000, 0, -5925), (Tag3 ((("arch", 2751)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5924)], (0)), 100000000, 0, -5923), 0), 100000000, 0, -5922), 0), 100000000, 0, -5921), 0, (("src/signatures.mli", 445, 17254, 17256), ("src/signatures.mli", 445, 17254, 17308), 0), 0, Tag1 ("Signatures", 205)), 0); (("file", 2754), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5920), (Tag3 ((("arch", 2751)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5919)], (0)), 100000000, 0, -5918), 0), 100000000, 0, -5917), 0, (("src/signatures.mli", 446, 17309, 17311), ("src/signatures.mli", 446, 17309, 17341), 0), 0, Tag1 ("Signatures", 206)), 0); Tag1 (("info", 2755), (0, 0, [[(("current_path", 1122), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5913), (("src/signatures.mli", 449, 17367, 17371), ("src/signatures.mli", 449, 17367, 17393), 0), 0, Tag1 ("Signatures", 208)); (("include_dirs", 1123), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5915)], (0)), 100000000, 0, -5914), (("src/signatures.mli", 450, 17394, 17398), ("src/signatures.mli", 450, 17394, 17425), 0), 0, Tag1 ("Signatures", 209)); (("for_pack", 1124), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5916), (("src/signatures.mli", 451, 17426, 17430), ("src/signatures.mli", 451, 17426, 17448), 0), 0, Tag1 ("Signatures", 210))]], 0, 0, 0, 0, 0, 0, (("src/signatures.mli", 448, 17343, 17345), ("src/signatures.mli", 452, 17449, 17452), 0), 0, 0, 0, Tag1 ("Signatures", 207)), 1, 0); (("annotate", 2756), ((Tag1 (0, (Tag3 ((("arch", 2751)), [((("a")), 100000000, 0, -5912)], (0)), 100000000, 0, -5911), (Tag3 ((("arch", 2751)), [(Tag3 ((("info", 2755)), 0, (0)), 100000000, 0, -5910)], (0)), 100000000, 0, -5909), 0), 100000000, 0, -5908), 0, (("src/signatures.mli", 454, 17454, 17456), ("src/signatures.mli", 454, 17454, 17491), 0), 0, Tag1 ("Signatures", 211)), 0); (("print", 2757), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -5907), (Tag1 (0, ((("a")), 100000000, 0, -5902), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5906), 0), 100000000, 0, -5905), 0), 100000000, 0, -5904), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -5903), (Tag1 (0, (Tag3 ((("arch", 2751)), [((("a")), 100000000, 0, -5902)], (0)), 100000000, 0, -5901), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5900), 0), 100000000, 0, -5899), 0), 100000000, 0, -5898), 0), 100000000, 0, -5897), 0, (("src/signatures.mli", 456, 17493, 17495), ("src/signatures.mli", 456, 17493, 17578), 0), 0, Tag1 ("Signatures", 212)), 0); (("print_include_dirs", 2758), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -5896), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5895)], (0)), 100000000, 0, -5894), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5893), 0), 100000000, 0, -5892), 0), 100000000, 0, -5891), 0, (("src/signatures.mli", 457, 17579, 17581), ("src/signatures.mli", 457, 17579, 17645), 0), 0, Tag1 ("Signatures", 213)), 0); (("print_info", 2759), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -5890), (Tag1 (0, (Tag3 ((("info", 2755)), 0, (0)), 100000000, 0, -5889), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5888), 0), 100000000, 0, -5887), 0), 100000000, 0, -5886), 0, (("src/signatures.mli", 458, 17646, 17648), ("src/signatures.mli", 458, 17646, 17697), 0), 0, Tag1 ("Signatures", 214)), 0); (("iter_info", 2760), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -5883), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5885), 0), 100000000, 0, -5884), (Tag1 (0, (Tag3 ((("arch", 2751)), [((("a")), 100000000, 0, -5883)], (0)), 100000000, 0, -5882), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5881), 0), 100000000, 0, -5880), 0), 100000000, 0, -5879), 0, (("src/signatures.mli", 460, 17699, 17701), ("src/signatures.mli", 460, 17699, 17748), 0), 0, Tag1 ("Signatures", 215)), 0); (("fold_info", 2761), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -5876), (Tag1 (0, ((("b")), 100000000, 0, -5874), ((("b")), 100000000, 0, -5874), 0), 100000000, 0, -5878), 0), 100000000, 0, -5877), (Tag1 (0, (Tag3 ((("arch", 2751)), [((("a")), 100000000, 0, -5876)], (0)), 100000000, 0, -5875), (Tag1 (0, ((("b")), 100000000, 0, -5874), ((("b")), 100000000, 0, -5874), 0), 100000000, 0, -5873), 0), 100000000, 0, -5872), 0), 100000000, 0, -5871), 0, (("src/signatures.mli", 461, 17749, 17751), ("src/signatures.mli", 461, 17749, 17806), 0), 0, Tag1 ("Signatures", 216)), 0); (("iter_include_dirs", 2762), ((Tag1 (0, (Tag3 ((("arch", 2751)), [(Tag3 ((("info", 2755)), 0, (0)), 100000000, 0, -5870)], (0)), 100000000, 0, -5869), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5868), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5867), 0), 100000000, 0, -5866), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5865), 0), 100000000, 0, -5864), 0), 100000000, 0, -5863), 0, (("src/signatures.mli", 463, 17808, 17810), ("src/signatures.mli", 463, 17808, 17871), 0), 0, Tag1 ("Signatures", 217)), 0); (("mk_tables", 2763), ((Tag1 (0, (Tag3 ((("arch", 2751)), [(Tag3 ((("info", 2755)), 0, (0)), 100000000, 0, -5862)], (0)), 100000000, 0, -5861), (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Hashtbl"), "t"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5855); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5857)], (0)), 100000000, 0, -5856)], (0)), 100000000, 0, -5854); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Hashtbl"), "t"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5859); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5860)], (0)), 100000000, 0, -5858)]), 100000000, 0, -5853), 0), 100000000, 0, -5852), 0, (("src/signatures.mli", 465, 17873, 17875), ("src/signatures.mli", 466, 17891, 17968), 0), 0, Tag1 ("Signatures", 218)), 0); (("print_table", 2764), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -5851), (Tag1 (0, ((("a")), 100000000, 0, -5846), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5850), 0), 100000000, 0, -5849), 0), 100000000, 0, -5848), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -5847), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Hashtbl"), "t"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5845); ((("a")), 100000000, 0, -5846)], (0)), 100000000, 0, -5844), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5843), 0), 100000000, 0, -5842), 0), 100000000, 0, -5841), 0), 100000000, 0, -5840), 0, (("src/signatures.mli", 467, 17969, 17971), ("src/signatures.mli", 468, 17989, 18079), 0), 0, Tag1 ("Signatures", 219)), 0); (("forpack_flags_of_pathname", 2765), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5839), (Tag3 (Tag1 ((("Command", 1462)), "spec"), 0, (0)), 100000000, 0, -5838), 0), 100000000, 0, -5837), 0, (("src/ocaml_arch.mli", 18, 956, 956), ("src/ocaml_arch.mli", 18, 956, 1010), 0), 0, Tag1 ("Ocaml_arch", 0)), 0)]), 0, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), Tag1 ("", 33)), 0, 0); Tag3 (("Ocaml_utils", 1480), 0, (Tag1 ([(("stdlib_dir", 2766), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lazy"), "t"), [(Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6046)], (0)), 100000000, 0, -6045), 0, (("src/ocaml_utils.mli", 16, 931, 931), ("src/ocaml_utils.mli", 16, 931, 965), 0), 0, Tag1 ("Ocaml_utils", 0)), 0); (("module_name_of_filename", 2767), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6044), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6043), 0), 100000000, 0, -6042), 0, (("src/ocaml_utils.mli", 17, 966, 966), ("src/ocaml_utils.mli", 17, 966, 1016), 0), 0, Tag1 ("Ocaml_utils", 1)), 0); (("module_name_of_pathname", 2768), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6041), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6040), 0), 100000000, 0, -6039), 0, (("src/ocaml_utils.mli", 18, 1017, 1017), ("src/ocaml_utils.mli", 18, 1017, 1067), 0), 0, Tag1 ("Ocaml_utils", 2)), 0); (("ignore_stdlib", 2769), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6038), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -6037), 0), 100000000, 0, -6036), 0, (("src/ocaml_utils.mli", 19, 1068, 1068), ("src/ocaml_utils.mli", 19, 1068, 1102), 0), 0, Tag1 ("Ocaml_utils", 3)), 0); (("non_dependency", 2770), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6035), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6034), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -6033), 0), 100000000, 0, -6032), 0), 100000000, 0, -6031), 0, (("src/ocaml_utils.mli", 20, 1103, 1103), ("src/ocaml_utils.mli", 20, 1103, 1148), 0), 0, Tag1 ("Ocaml_utils", 4)), 0); (("expand_module", 2771), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6030)], (0)), 100000000, 0, -6029), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6028), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6027)], (0)), 100000000, 0, -6026), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6025)], (0)), 100000000, 0, -6024), 0), 100000000, 0, -6023), 0), 100000000, 0, -6022), 0), 100000000, 0, -6021), 0, (("src/ocaml_utils.mli", 21, 1149, 1149), ("src/ocaml_utils.mli", 22, 1169, 1234), 0), 0, Tag1 ("Ocaml_utils", 5)), 0); (("string_list_of_file", 2772), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6020), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6019)], (0)), 100000000, 0, -6018), 0), 100000000, 0, -6017), 0, (("src/ocaml_utils.mli", 23, 1235, 1235), ("src/ocaml_utils.mli", 23, 1235, 1282), 0), 0, Tag1 ("Ocaml_utils", 6)), 0); (("ocaml_ppflags", 2773), ((Tag1 (0, (Tag3 (Tag1 ((("Tags", 1452)), "t"), 0, (0)), 100000000, 0, -6016), (Tag3 (Tag1 ((("Command", 1462)), "spec"), 0, (0)), 100000000, 0, -6015), 0), 100000000, 0, -6014), 0, (("src/ocaml_utils.mli", 24, 1283, 1283), ("src/ocaml_utils.mli", 24, 1283, 1325), 0), 0, Tag1 ("Ocaml_utils", 7)), 0); (("ocaml_include_flags", 2774), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6013), (Tag3 (Tag1 ((("Command", 1462)), "spec"), 0, (0)), 100000000, 0, -6012), 0), 100000000, 0, -6011), 0, (("src/ocaml_utils.mli", 25, 1326, 1326), ("src/ocaml_utils.mli", 25, 1326, 1378), 0), 0, Tag1 ("Ocaml_utils", 8)), 0); (("libraries_of", 2775), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6010), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6009)], (0)), 100000000, 0, -6008), 0), 100000000, 0, -6007), 0, (("src/ocaml_utils.mli", 26, 1379, 1379), ("src/ocaml_utils.mli", 26, 1379, 1427), 0), 0, Tag1 ("Ocaml_utils", 9)), 0); (("use_lib", 2776), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6006), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6005), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -6004), 0), 100000000, 0, -6003), 0), 100000000, 0, -6002), 0, (("src/ocaml_utils.mli", 27, 1428, 1428), ("src/ocaml_utils.mli", 27, 1428, 1474), 0), 0, Tag1 ("Ocaml_utils", 10)), 0); (("cmi_of", 2777), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6001), (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6000), 0), 100000000, 0, -5999), 0, (("src/ocaml_utils.mli", 28, 1475, 1475), ("src/ocaml_utils.mli", 28, 1475, 1512), 0), 0, Tag1 ("Ocaml_utils", 11)), 0); (("ocaml_add_include_flag", 2778), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5998), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Command", 1462)), "spec"), 0, (0)), 100000000, 0, -5997)], (0)), 100000000, 0, -5996), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Command", 1462)), "spec"), 0, (0)), 100000000, 0, -5995)], (0)), 100000000, 0, -5994), 0), 100000000, 0, -5993), 0), 100000000, 0, -5992), 0, (("src/ocaml_utils.mli", 29, 1513, 1513), ("src/ocaml_utils.mli", 29, 1513, 1590), 0), 0, Tag1 ("Ocaml_utils", 12)), 0); (("flag_and_dep", 2779), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Tags", 1452)), "elt"), 0, (0)), 100000000, 0, -5991)], (0)), 100000000, 0, -5990), (Tag1 (0, (Tag3 (Tag1 ((("Command", 1462)), "spec"), 0, (0)), 100000000, 0, -5989), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5988), 0), 100000000, 0, -5987), 0), 100000000, 0, -5986), 0, (("src/ocaml_utils.mli", 30, 1591, 1591), ("src/ocaml_utils.mli", 30, 1591, 1647), 0), 0, Tag1 ("Ocaml_utils", 13)), 0); (("pflag_and_dep", 2780), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Tags", 1452)), "elt"), 0, (0)), 100000000, 0, -5985)], (0)), 100000000, 0, -5984), (Tag1 (0, (Tag3 (Tag1 ((("Tags", 1452)), "elt"), 0, (0)), 100000000, 0, -5983), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5982), (Tag3 (Tag1 ((("Command", 1462)), "spec"), 0, (0)), 100000000, 0, -5981), 0), 100000000, 0, -5980), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5979), 0), 100000000, 0, -5978), 0), 100000000, 0, -5977), 0), 100000000, 0, -5976), 0, (("src/ocaml_utils.mli", 31, 1648, 1648), ("src/ocaml_utils.mli", 32, 1725, 1731), 0), 0, Tag1 ("Ocaml_utils", 14)), 0); Tag2 (("Ocamldep_error", 2781), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5975)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Ocaml_utils", 15)), 2, 0); (("path_dependencies_of", 2782), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -5974), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag8 (([("just_try", (0)); ("mandatory", (0))], (0, 100000000, 0, -5972), 1, 0, 0)), 100000000, 0, -5971); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5973)]), 100000000, 0, -5970)], (0)), 100000000, 0, -5969), 0), 100000000, 0, -5968), 0, (("src/ocaml_utils.mli", 37, 1818, 1818), ("src/ocaml_utils.mli", 37, 1818, 1901), 0), 0, Tag1 ("Ocaml_utils", 16)), 0); (("info_libraries", 2783), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Hashtbl"), "t"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5964); (Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5966); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -5967)]), 100000000, 0, -5965)], (0)), 100000000, 0, -5963), 0, (("src/ocaml_utils.mli", 39, 1903, 1903), ("src/ocaml_utils.mli", 39, 1903, 1957), 0), 0, Tag1 ("Ocaml_utils", 17)), 0); (("ocaml_lib", 2784), ((Tag1 (Tag1 ("extern"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -5962)], (0)), 100000000, 0, -5961), (Tag1 (Tag1 ("byte"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -5960)], (0)), 100000000, 0, -5959), (Tag1 (Tag1 ("native"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -5958)], (0)), 100000000, 0, -5957), (Tag1 (Tag1 ("dir"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -5956)], (0)), 100000000, 0, -5955), (Tag1 (Tag1 ("tag_name"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5954)], (0)), 100000000, 0, -5953), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -5952), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5951), 0), 100000000, 0, -5950), 0), 100000000, 0, -5949), 0), 100000000, 0, -5948), 0), 100000000, 0, -5947), 0), 100000000, 0, -5946), 0), 100000000, 0, -5945), 0, (("src/ocaml_utils.mli", 41, 1959, 1959), ("src/ocaml_utils.mli", 47, 2070, 2090), 0), 0, Tag1 ("Ocaml_utils", 18)), 0)]), 0, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), Tag1 ("", 34)), 0, 0); Tag3 (("Ocaml_dependencies", 1481), 0, (Tag1 ([Tag2 (("Circular_dependencies", 2785), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6048)], (0)), 100000000, 0, -6047); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6049)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Ocaml_dependencies", 0)), 2, 0); Tag4 (("INPUT", 2786), ((Tag1 ([(("fold_dependencies", 2789), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6075), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6074), (Tag1 (0, ((("a")), 100000000, 0, -6070), ((("a")), 100000000, 0, -6070), 0), 100000000, 0, -6073), 0), 100000000, 0, -6072), 0), 100000000, 0, -6071), (Tag1 (0, ((("a")), 100000000, 0, -6070), ((("a")), 100000000, 0, -6070), 0), 100000000, 0, -6069), 0), 100000000, 0, -6068), 0, (("src/ocaml_dependencies.mli", 23, 1139, 1141), ("src/ocaml_dependencies.mli", 23, 1139, 1207), 0), 0, Tag1 ("Ocaml_dependencies", 1)), 0); (("fold_libraries", 2790), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6067), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6066)], (0)), 100000000, 0, -6065), (Tag1 (0, ((("a")), 100000000, 0, -6061), ((("a")), 100000000, 0, -6061), 0), 100000000, 0, -6064), 0), 100000000, 0, -6063), 0), 100000000, 0, -6062), (Tag1 (0, ((("a")), 100000000, 0, -6061), ((("a")), 100000000, 0, -6061), 0), 100000000, 0, -6060), 0), 100000000, 0, -6059), 0, (("src/ocaml_dependencies.mli", 24, 1208, 1210), ("src/ocaml_dependencies.mli", 24, 1208, 1278), 0), 0, Tag1 ("Ocaml_dependencies", 2)), 0); (("fold_packages", 2791), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6058), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6057)], (0)), 100000000, 0, -6056), (Tag1 (0, ((("a")), 100000000, 0, -6052), ((("a")), 100000000, 0, -6052), 0), 100000000, 0, -6055), 0), 100000000, 0, -6054), 0), 100000000, 0, -6053), (Tag1 (0, ((("a")), 100000000, 0, -6052), ((("a")), 100000000, 0, -6052), 0), 100000000, 0, -6051), 0), 100000000, 0, -6050), 0, (("src/ocaml_dependencies.mli", 25, 1279, 1281), ("src/ocaml_dependencies.mli", 25, 1279, 1348), 0), 0, Tag1 ("Ocaml_dependencies", 3)), 0)])), 0, (("src/ocaml_dependencies.mli", 22, 1115, 1115), ("src/ocaml_dependencies.mli", 26, 1349, 1352), 0), Tag1 ("Ocaml_dependencies", 4)), 0); Tag3 (("Make", 2787), 0, (Tag2 (((("I", 2788)), ((("INPUT", 2786)))), Tag1 ([(("caml_transitive_closure", 2792), ((Tag1 (Tag1 ("caml_obj_ext"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6097)], (0)), 100000000, 0, -6096), (Tag1 (Tag1 ("caml_lib_ext"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6095)], (0)), 100000000, 0, -6094), (Tag1 (Tag1 ("pack_mode"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -6093)], (0)), 100000000, 0, -6092), (Tag1 (Tag1 ("used_libraries"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6091)], (0)), 100000000, 0, -6090)], (0)), 100000000, 0, -6089), (Tag1 (Tag1 ("hidden_packages"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6088)], (0)), 100000000, 0, -6087)], (0)), 100000000, 0, -6086), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6085)], (0)), 100000000, 0, -6084), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6083)], (0)), 100000000, 0, -6082), 0), 100000000, 0, -6081), 0), 100000000, 0, -6080), 0), 100000000, 0, -6079), 0), 100000000, 0, -6078), 0), 100000000, 0, -6077), 0), 100000000, 0, -6076), 0, (("src/ocaml_dependencies.mli", 37, 1925, 1927), ("src/ocaml_dependencies.mli", 43, 2107, 2145), 0), 0, Tag1 ("Ocaml_dependencies", 6)), 0)])), 0, (("src/ocaml_dependencies.mli", 30, 1499, 1499), ("src/ocaml_dependencies.mli", 45, 2147, 2150), 0), Tag1 ("Ocaml_dependencies", 7)), 0, 0)]), 0, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), Tag1 ("", 35)), 0, 0); Tag3 (("Ocaml_compiler", 1482), 0, (Tag1 ([(("forpack_flags", 2793), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6522), (Tag1 (0, (Tag3 (Tag1 ((("Tags", 1452)), "t"), 0, (0)), 100000000, 0, -6521), (Tag3 (Tag1 ((("Command", 1462)), "spec"), 0, (0)), 100000000, 0, -6520), 0), 100000000, 0, -6519), 0), 100000000, 0, -6518), 0, (("src/ocaml_compiler.mli", 17, 932, 932), ("src/ocaml_compiler.mli", 17, 932, 984), 0), 0, Tag1 ("Ocaml_compiler", 0)), 0); (("ocamlc_c", 2794), ((Tag1 (0, (Tag3 (Tag1 ((("Tags", 1452)), "t"), 0, (0)), 100000000, 0, -6517), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6516), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6515), (Tag3 (Tag1 ((("Command", 1462)), "t"), 0, (0)), 100000000, 0, -6514), 0), 100000000, 0, -6513), 0), 100000000, 0, -6512), 0), 100000000, 0, -6511), 0, (("src/ocaml_compiler.mli", 18, 985, 985), ("src/ocaml_compiler.mli", 18, 985, 1047), 0), 0, Tag1 ("Ocaml_compiler", 1)), 0); (("ocamlc_link_lib", 2795), ((Tag1 (0, (Tag3 (Tag1 ((("Tags", 1452)), "t"), 0, (0)), 100000000, 0, -6510), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6509)], (0)), 100000000, 0, -6508), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6507), (Tag3 (Tag1 ((("Command", 1462)), "t"), 0, (0)), 100000000, 0, -6506), 0), 100000000, 0, -6505), 0), 100000000, 0, -6504), 0), 100000000, 0, -6503), 0, (("src/ocaml_compiler.mli", 19, 1048, 1048), ("src/ocaml_compiler.mli", 19, 1048, 1123), 0), 0, Tag1 ("Ocaml_compiler", 2)), 0); (("ocamlc_link_prog", 2796), ((Tag1 (0, (Tag3 (Tag1 ((("Tags", 1452)), "t"), 0, (0)), 100000000, 0, -6502), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6501)], (0)), 100000000, 0, -6500), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6499), (Tag3 (Tag1 ((("Command", 1462)), "t"), 0, (0)), 100000000, 0, -6498), 0), 100000000, 0, -6497), 0), 100000000, 0, -6496), 0), 100000000, 0, -6495), 0, (("src/ocaml_compiler.mli", 20, 1124, 1124), ("src/ocaml_compiler.mli", 20, 1124, 1199), 0), 0, Tag1 ("Ocaml_compiler", 3)), 0); (("ocamlc_p", 2797), ((Tag1 (0, (Tag3 (Tag1 ((("Tags", 1452)), "t"), 0, (0)), 100000000, 0, -6494), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6493)], (0)), 100000000, 0, -6492), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6491), (Tag3 (Tag1 ((("Command", 1462)), "t"), 0, (0)), 100000000, 0, -6490), 0), 100000000, 0, -6489), 0), 100000000, 0, -6488), 0), 100000000, 0, -6487), 0, (("src/ocaml_compiler.mli", 21, 1200, 1200), ("src/ocaml_compiler.mli", 21, 1200, 1267), 0), 0, Tag1 ("Ocaml_compiler", 4)), 0); (("ocamlopt_c", 2798), ((Tag1 (0, (Tag3 (Tag1 ((("Tags", 1452)), "t"), 0, (0)), 100000000, 0, -6486), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6485), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6484), (Tag3 (Tag1 ((("Command", 1462)), "t"), 0, (0)), 100000000, 0, -6483), 0), 100000000, 0, -6482), 0), 100000000, 0, -6481), 0), 100000000, 0, -6480), 0, (("src/ocaml_compiler.mli", 22, 1268, 1268), ("src/ocaml_compiler.mli", 22, 1268, 1332), 0), 0, Tag1 ("Ocaml_compiler", 5)), 0); (("ocamlopt_link_lib", 2799), ((Tag1 (0, (Tag3 (Tag1 ((("Tags", 1452)), "t"), 0, (0)), 100000000, 0, -6479), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6478)], (0)), 100000000, 0, -6477), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6476), (Tag3 (Tag1 ((("Command", 1462)), "t"), 0, (0)), 100000000, 0, -6475), 0), 100000000, 0, -6474), 0), 100000000, 0, -6473), 0), 100000000, 0, -6472), 0, (("src/ocaml_compiler.mli", 23, 1333, 1333), ("src/ocaml_compiler.mli", 23, 1333, 1409), 0), 0, Tag1 ("Ocaml_compiler", 6)), 0); (("ocamlopt_link_shared_lib", 2800), ((Tag1 (0, (Tag3 (Tag1 ((("Tags", 1452)), "t"), 0, (0)), 100000000, 0, -6471), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6470)], (0)), 100000000, 0, -6469), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6468), (Tag3 (Tag1 ((("Command", 1462)), "t"), 0, (0)), 100000000, 0, -6467), 0), 100000000, 0, -6466), 0), 100000000, 0, -6465), 0), 100000000, 0, -6464), 0, (("src/ocaml_compiler.mli", 24, 1410, 1410), ("src/ocaml_compiler.mli", 24, 1410, 1493), 0), 0, Tag1 ("Ocaml_compiler", 7)), 0); (("ocamlopt_link_prog", 2801), ((Tag1 (0, (Tag3 (Tag1 ((("Tags", 1452)), "t"), 0, (0)), 100000000, 0, -6463), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6462)], (0)), 100000000, 0, -6461), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6460), (Tag3 (Tag1 ((("Command", 1462)), "t"), 0, (0)), 100000000, 0, -6459), 0), 100000000, 0, -6458), 0), 100000000, 0, -6457), 0), 100000000, 0, -6456), 0, (("src/ocaml_compiler.mli", 25, 1494, 1494), ("src/ocaml_compiler.mli", 25, 1494, 1571), 0), 0, Tag1 ("Ocaml_compiler", 8)), 0); (("ocamlopt_p", 2802), ((Tag1 (0, (Tag3 (Tag1 ((("Tags", 1452)), "t"), 0, (0)), 100000000, 0, -6455), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6454)], (0)), 100000000, 0, -6453), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6452), (Tag3 (Tag1 ((("Command", 1462)), "t"), 0, (0)), 100000000, 0, -6451), 0), 100000000, 0, -6450), 0), 100000000, 0, -6449), 0), 100000000, 0, -6448), 0, (("src/ocaml_compiler.mli", 26, 1572, 1572), ("src/ocaml_compiler.mli", 26, 1572, 1641), 0), 0, Tag1 ("Ocaml_compiler", 9)), 0); (("ocamlmklib", 2803), ((Tag1 (0, (Tag3 (Tag1 ((("Tags", 1452)), "t"), 0, (0)), 100000000, 0, -6447), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6446)], (0)), 100000000, 0, -6445), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6444), (Tag3 (Tag1 ((("Command", 1462)), "t"), 0, (0)), 100000000, 0, -6443), 0), 100000000, 0, -6442), 0), 100000000, 0, -6441), 0), 100000000, 0, -6440), 0, (("src/ocaml_compiler.mli", 27, 1642, 1642), ("src/ocaml_compiler.mli", 27, 1642, 1711), 0), 0, Tag1 ("Ocaml_compiler", 10)), 0); (("ocamlmktop", 2804), ((Tag1 (0, (Tag3 (Tag1 ((("Tags", 1452)), "t"), 0, (0)), 100000000, 0, -6439), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6438)], (0)), 100000000, 0, -6437), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6436), (Tag3 (Tag1 ((("Command", 1462)), "t"), 0, (0)), 100000000, 0, -6435), 0), 100000000, 0, -6434), 0), 100000000, 0, -6433), 0), 100000000, 0, -6432), 0, (("src/ocaml_compiler.mli", 28, 1712, 1712), ("src/ocaml_compiler.mli", 28, 1712, 1781), 0), 0, Tag1 ("Ocaml_compiler", 11)), 0); (("prepare_compile", 2805), ((Tag1 (0, (Tag3 (Tag1 ((("Rule", 1473)), "builder"), 0, (0)), 100000000, 0, -6431), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6430), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -6429), 0), 100000000, 0, -6428), 0), 100000000, 0, -6427), 0, (("src/ocaml_compiler.mli", 29, 1782, 1782), ("src/ocaml_compiler.mli", 29, 1782, 1838), 0), 0, Tag1 ("Ocaml_compiler", 12)), 0); (("compile_ocaml_interf", 2806), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6426), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6425), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6424), 0), 100000000, 0, -6423), 0), 100000000, 0, -6422), 0, (("src/ocaml_compiler.mli", 30, 1839, 1839), ("src/ocaml_compiler.mli", 30, 1839, 1897), 0), 0, Tag1 ("Ocaml_compiler", 13)), 0); (("byte_compile_ocaml_interf", 2807), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6421), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6420), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6419), 0), 100000000, 0, -6418), 0), 100000000, 0, -6417), 0, (("src/ocaml_compiler.mli", 31, 1898, 1898), ("src/ocaml_compiler.mli", 31, 1898, 1961), 0), 0, Tag1 ("Ocaml_compiler", 14)), 0); (("byte_compile_ocaml_implem", 2808), ((Tag1 (Tag1 ("tag"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6416)], (0)), 100000000, 0, -6415), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6414), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6413), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6412), 0), 100000000, 0, -6411), 0), 100000000, 0, -6410), 0), 100000000, 0, -6409), 0, (("src/ocaml_compiler.mli", 32, 1962, 1962), ("src/ocaml_compiler.mli", 32, 1962, 2040), 0), 0, Tag1 ("Ocaml_compiler", 15)), 0); (("prepare_link", 2809), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6408), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6407), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6406)], (0)), 100000000, 0, -6405), (Tag1 (0, (Tag3 (Tag1 ((("Rule", 1473)), "builder"), 0, (0)), 100000000, 0, -6404), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -6403), 0), 100000000, 0, -6402), 0), 100000000, 0, -6401), 0), 100000000, 0, -6400), 0), 100000000, 0, -6399), 0, (("src/ocaml_compiler.mli", 33, 2041, 2041), ("src/ocaml_compiler.mli", 35, 2090, 2127), 0), 0, Tag1 ("Ocaml_compiler", 16)), 0); (("native_compile_ocaml_implem", 2810), ((Tag1 (Tag1 ("tag"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6398)], (0)), 100000000, 0, -6397), (Tag1 (Tag1 ("cmx_ext"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6396)], (0)), 100000000, 0, -6395), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6394), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6393), 0), 100000000, 0, -6392), 0), 100000000, 0, -6391), 0), 100000000, 0, -6390), 0, (("src/ocaml_compiler.mli", 36, 2128, 2128), ("src/ocaml_compiler.mli", 36, 2128, 2217), 0), 0, Tag1 ("Ocaml_compiler", 17)), 0); (("prepare_libs", 2811), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6389), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6388), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6387), (Tag1 (0, (Tag3 (Tag1 ((("Rule", 1473)), "builder"), 0, (0)), 100000000, 0, -6386), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6385)], (0)), 100000000, 0, -6384), 0), 100000000, 0, -6383), 0), 100000000, 0, -6382), 0), 100000000, 0, -6381), 0), 100000000, 0, -6380), 0, (("src/ocaml_compiler.mli", 37, 2218, 2218), ("src/ocaml_compiler.mli", 39, 2273, 2306), 0), 0, Tag1 ("Ocaml_compiler", 18)), 0); (("link_gen", 2812), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6379), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6378), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6377), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6376)], (0)), 100000000, 0, -6375), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((("Tags", 1452)), "t"), 0, (0)), 100000000, 0, -6374), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6373)], (0)), 100000000, 0, -6372), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6371), (Tag3 (Tag1 ((("Command", 1462)), "t"), 0, (0)), 100000000, 0, -6370), 0), 100000000, 0, -6369), 0), 100000000, 0, -6368), 0), 100000000, 0, -6367), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((("Tags", 1452)), "t"), 0, (0)), 100000000, 0, -6366), (Tag3 (Tag1 ((("Tags", 1452)), "t"), 0, (0)), 100000000, 0, -6365), 0), 100000000, 0, -6364), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6363), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6362), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6361), 0), 100000000, 0, -6360), 0), 100000000, 0, -6359), 0), 100000000, 0, -6358), 0), 100000000, 0, -6357), 0), 100000000, 0, -6356), 0), 100000000, 0, -6355), 0), 100000000, 0, -6354), 0), 100000000, 0, -6353), 0, (("src/ocaml_compiler.mli", 40, 2307, 2307), ("src/ocaml_compiler.mli", 44, 2453, 2486), 0), 0, Tag1 ("Ocaml_compiler", 19)), 0); (("byte_link", 2813), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6352), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6351), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6350), 0), 100000000, 0, -6349), 0), 100000000, 0, -6348), 0, (("src/ocaml_compiler.mli", 45, 2487, 2487), ("src/ocaml_compiler.mli", 45, 2487, 2534), 0), 0, Tag1 ("Ocaml_compiler", 20)), 0); (("byte_output_obj", 2814), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6347), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6346), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6345), 0), 100000000, 0, -6344), 0), 100000000, 0, -6343), 0, (("src/ocaml_compiler.mli", 46, 2535, 2535), ("src/ocaml_compiler.mli", 46, 2535, 2588), 0), 0, Tag1 ("Ocaml_compiler", 21)), 0); (("byte_output_shared", 2815), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6342), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6341), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6340), 0), 100000000, 0, -6339), 0), 100000000, 0, -6338), 0, (("src/ocaml_compiler.mli", 47, 2589, 2589), ("src/ocaml_compiler.mli", 47, 2589, 2645), 0), 0, Tag1 ("Ocaml_compiler", 22)), 0); (("byte_library_link", 2816), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6337), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6336), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6335), 0), 100000000, 0, -6334), 0), 100000000, 0, -6333), 0, (("src/ocaml_compiler.mli", 48, 2646, 2646), ("src/ocaml_compiler.mli", 48, 2646, 2701), 0), 0, Tag1 ("Ocaml_compiler", 23)), 0); (("byte_debug_link", 2817), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6332), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6331), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6330), 0), 100000000, 0, -6329), 0), 100000000, 0, -6328), 0, (("src/ocaml_compiler.mli", 49, 2702, 2702), ("src/ocaml_compiler.mli", 49, 2702, 2755), 0), 0, Tag1 ("Ocaml_compiler", 24)), 0); (("byte_debug_library_link", 2818), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6327), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6326), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6325), 0), 100000000, 0, -6324), 0), 100000000, 0, -6323), 0, (("src/ocaml_compiler.mli", 50, 2756, 2756), ("src/ocaml_compiler.mli", 50, 2756, 2817), 0), 0, Tag1 ("Ocaml_compiler", 25)), 0); (("native_link", 2819), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6322), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6321), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6320), 0), 100000000, 0, -6319), 0), 100000000, 0, -6318), 0, (("src/ocaml_compiler.mli", 51, 2818, 2818), ("src/ocaml_compiler.mli", 51, 2818, 2867), 0), 0, Tag1 ("Ocaml_compiler", 26)), 0); (("native_output_obj", 2820), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6317), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6316), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6315), 0), 100000000, 0, -6314), 0), 100000000, 0, -6313), 0, (("src/ocaml_compiler.mli", 52, 2868, 2868), ("src/ocaml_compiler.mli", 52, 2868, 2923), 0), 0, Tag1 ("Ocaml_compiler", 27)), 0); (("native_output_shared", 2821), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6312), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6311), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6310), 0), 100000000, 0, -6309), 0), 100000000, 0, -6308), 0, (("src/ocaml_compiler.mli", 53, 2924, 2924), ("src/ocaml_compiler.mli", 53, 2924, 2982), 0), 0, Tag1 ("Ocaml_compiler", 28)), 0); (("native_library_link", 2822), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6307), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6306), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6305), 0), 100000000, 0, -6304), 0), 100000000, 0, -6303), 0, (("src/ocaml_compiler.mli", 54, 2983, 2983), ("src/ocaml_compiler.mli", 54, 2983, 3040), 0), 0, Tag1 ("Ocaml_compiler", 29)), 0); (("native_shared_library_link", 2823), ((Tag1 (Tag1 ("tags"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6302)], (0)), 100000000, 0, -6301)], (0)), 100000000, 0, -6300), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6299), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6298), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6297), 0), 100000000, 0, -6296), 0), 100000000, 0, -6295), 0), 100000000, 0, -6294), 0, (("src/ocaml_compiler.mli", 55, 3041, 3041), ("src/ocaml_compiler.mli", 55, 3041, 3128), 0), 0, Tag1 ("Ocaml_compiler", 30)), 0); (("native_profile_link", 2824), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6293), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6292), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6291), 0), 100000000, 0, -6290), 0), 100000000, 0, -6289), 0, (("src/ocaml_compiler.mli", 56, 3129, 3129), ("src/ocaml_compiler.mli", 56, 3129, 3186), 0), 0, Tag1 ("Ocaml_compiler", 31)), 0); (("native_profile_library_link", 2825), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6288), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6287), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6286), 0), 100000000, 0, -6285), 0), 100000000, 0, -6284), 0, (("src/ocaml_compiler.mli", 57, 3187, 3187), ("src/ocaml_compiler.mli", 57, 3187, 3252), 0), 0, Tag1 ("Ocaml_compiler", 32)), 0); (("link_modules", 2826), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6281); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6283)], (0)), 100000000, 0, -6282)]), 100000000, 0, -6280)], (0)), 100000000, 0, -6279), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6278), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6277), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6276), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((("Tags", 1452)), "t"), 0, (0)), 100000000, 0, -6275), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6274)], (0)), 100000000, 0, -6273), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6272), (Tag3 (Tag1 ((("Command", 1462)), "t"), 0, (0)), 100000000, 0, -6271), 0), 100000000, 0, -6270), 0), 100000000, 0, -6269), 0), 100000000, 0, -6268), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((("Tags", 1452)), "t"), 0, (0)), 100000000, 0, -6267), (Tag3 (Tag1 ((("Tags", 1452)), "t"), 0, (0)), 100000000, 0, -6266), 0), 100000000, 0, -6265), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6264)], (0)), 100000000, 0, -6263), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6262), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6261), 0), 100000000, 0, -6260), 0), 100000000, 0, -6259), 0), 100000000, 0, -6258), 0), 100000000, 0, -6257), 0), 100000000, 0, -6256), 0), 100000000, 0, -6255), 0), 100000000, 0, -6254), 0), 100000000, 0, -6253), 0, (("src/ocaml_compiler.mli", 58, 3253, 3253), ("src/ocaml_compiler.mli", 63, 3425, 3463), 0), 0, Tag1 ("Ocaml_compiler", 33)), 0); (("pack_modules", 2827), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6250); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6252)], (0)), 100000000, 0, -6251)]), 100000000, 0, -6249)], (0)), 100000000, 0, -6248), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6247), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6246), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6245), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((("Tags", 1452)), "t"), 0, (0)), 100000000, 0, -6244), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6243)], (0)), 100000000, 0, -6242), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6241), (Tag3 (Tag1 ((("Command", 1462)), "t"), 0, (0)), 100000000, 0, -6240), 0), 100000000, 0, -6239), 0), 100000000, 0, -6238), 0), 100000000, 0, -6237), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((("Tags", 1452)), "t"), 0, (0)), 100000000, 0, -6236), (Tag3 (Tag1 ((("Tags", 1452)), "t"), 0, (0)), 100000000, 0, -6235), 0), 100000000, 0, -6234), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6233)], (0)), 100000000, 0, -6232), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6231), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6230), 0), 100000000, 0, -6229), 0), 100000000, 0, -6228), 0), 100000000, 0, -6227), 0), 100000000, 0, -6226), 0), 100000000, 0, -6225), 0), 100000000, 0, -6224), 0), 100000000, 0, -6223), 0), 100000000, 0, -6222), 0, (("src/ocaml_compiler.mli", 64, 3464, 3464), ("src/ocaml_compiler.mli", 69, 3636, 3674), 0), 0, Tag1 ("Ocaml_compiler", 34)), 0); (("byte_library_link_modules", 2828), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6221)], (0)), 100000000, 0, -6220), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6219), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6218), 0), 100000000, 0, -6217), 0), 100000000, 0, -6216), 0, (("src/ocaml_compiler.mli", 70, 3675, 3675), ("src/ocaml_compiler.mli", 70, 3675, 3743), 0), 0, Tag1 ("Ocaml_compiler", 35)), 0); (("byte_library_link_mllib", 2829), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6215), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6214), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6213), 0), 100000000, 0, -6212), 0), 100000000, 0, -6211), 0, (("src/ocaml_compiler.mli", 71, 3744, 3744), ("src/ocaml_compiler.mli", 71, 3744, 3805), 0), 0, Tag1 ("Ocaml_compiler", 36)), 0); (("byte_debug_library_link_modules", 2830), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6210)], (0)), 100000000, 0, -6209), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6208), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6207), 0), 100000000, 0, -6206), 0), 100000000, 0, -6205), 0, (("src/ocaml_compiler.mli", 72, 3806, 3806), ("src/ocaml_compiler.mli", 72, 3806, 3880), 0), 0, Tag1 ("Ocaml_compiler", 37)), 0); (("byte_debug_library_link_mllib", 2831), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6204), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6203), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6202), 0), 100000000, 0, -6201), 0), 100000000, 0, -6200), 0, (("src/ocaml_compiler.mli", 73, 3881, 3881), ("src/ocaml_compiler.mli", 73, 3881, 3948), 0), 0, Tag1 ("Ocaml_compiler", 38)), 0); (("byte_pack_modules", 2832), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6199)], (0)), 100000000, 0, -6198), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6197), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6196), 0), 100000000, 0, -6195), 0), 100000000, 0, -6194), 0, (("src/ocaml_compiler.mli", 74, 3949, 3949), ("src/ocaml_compiler.mli", 74, 3949, 4009), 0), 0, Tag1 ("Ocaml_compiler", 39)), 0); (("byte_pack_mlpack", 2833), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6193), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6192), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6191), 0), 100000000, 0, -6190), 0), 100000000, 0, -6189), 0, (("src/ocaml_compiler.mli", 75, 4010, 4010), ("src/ocaml_compiler.mli", 75, 4010, 4064), 0), 0, Tag1 ("Ocaml_compiler", 40)), 0); (("byte_debug_pack_modules", 2834), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6188)], (0)), 100000000, 0, -6187), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6186), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6185), 0), 100000000, 0, -6184), 0), 100000000, 0, -6183), 0, (("src/ocaml_compiler.mli", 76, 4065, 4065), ("src/ocaml_compiler.mli", 76, 4065, 4131), 0), 0, Tag1 ("Ocaml_compiler", 41)), 0); (("byte_debug_pack_mlpack", 2835), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6182), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6181), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6180), 0), 100000000, 0, -6179), 0), 100000000, 0, -6178), 0, (("src/ocaml_compiler.mli", 77, 4132, 4132), ("src/ocaml_compiler.mli", 77, 4132, 4192), 0), 0, Tag1 ("Ocaml_compiler", 42)), 0); (("byte_toplevel_link_modules", 2836), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6177)], (0)), 100000000, 0, -6176), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6175), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6174), 0), 100000000, 0, -6173), 0), 100000000, 0, -6172), 0, (("src/ocaml_compiler.mli", 78, 4193, 4193), ("src/ocaml_compiler.mli", 78, 4193, 4262), 0), 0, Tag1 ("Ocaml_compiler", 43)), 0); (("byte_toplevel_link_mltop", 2837), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6171), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6170), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6169), 0), 100000000, 0, -6168), 0), 100000000, 0, -6167), 0, (("src/ocaml_compiler.mli", 79, 4263, 4263), ("src/ocaml_compiler.mli", 79, 4263, 4325), 0), 0, Tag1 ("Ocaml_compiler", 44)), 0); (("native_pack_modules", 2838), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6166)], (0)), 100000000, 0, -6165), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6164), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6163), 0), 100000000, 0, -6162), 0), 100000000, 0, -6161), 0, (("src/ocaml_compiler.mli", 80, 4326, 4326), ("src/ocaml_compiler.mli", 80, 4326, 4388), 0), 0, Tag1 ("Ocaml_compiler", 45)), 0); (("native_pack_mlpack", 2839), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6160), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6159), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6158), 0), 100000000, 0, -6157), 0), 100000000, 0, -6156), 0, (("src/ocaml_compiler.mli", 81, 4389, 4389), ("src/ocaml_compiler.mli", 81, 4389, 4445), 0), 0, Tag1 ("Ocaml_compiler", 46)), 0); (("native_library_link_modules", 2840), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6155)], (0)), 100000000, 0, -6154), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6153), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6152), 0), 100000000, 0, -6151), 0), 100000000, 0, -6150), 0, (("src/ocaml_compiler.mli", 82, 4446, 4446), ("src/ocaml_compiler.mli", 82, 4446, 4516), 0), 0, Tag1 ("Ocaml_compiler", 47)), 0); (("native_library_link_mllib", 2841), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6149), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6148), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6147), 0), 100000000, 0, -6146), 0), 100000000, 0, -6145), 0, (("src/ocaml_compiler.mli", 83, 4517, 4517), ("src/ocaml_compiler.mli", 83, 4517, 4580), 0), 0, Tag1 ("Ocaml_compiler", 48)), 0); (("native_shared_library_link_modules", 2842), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6144)], (0)), 100000000, 0, -6143), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6142), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6141), 0), 100000000, 0, -6140), 0), 100000000, 0, -6139), 0, (("src/ocaml_compiler.mli", 84, 4581, 4581), ("src/ocaml_compiler.mli", 84, 4581, 4658), 0), 0, Tag1 ("Ocaml_compiler", 49)), 0); (("native_shared_library_link_mldylib", 2843), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6138), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6137), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6136), 0), 100000000, 0, -6135), 0), 100000000, 0, -6134), 0, (("src/ocaml_compiler.mli", 85, 4659, 4659), ("src/ocaml_compiler.mli", 85, 4659, 4731), 0), 0, Tag1 ("Ocaml_compiler", 50)), 0); (("native_profile_pack_modules", 2844), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6133)], (0)), 100000000, 0, -6132), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6131), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6130), 0), 100000000, 0, -6129), 0), 100000000, 0, -6128), 0, (("src/ocaml_compiler.mli", 86, 4732, 4732), ("src/ocaml_compiler.mli", 86, 4732, 4802), 0), 0, Tag1 ("Ocaml_compiler", 51)), 0); (("native_profile_pack_mlpack", 2845), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6127), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6126), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6125), 0), 100000000, 0, -6124), 0), 100000000, 0, -6123), 0, (("src/ocaml_compiler.mli", 87, 4803, 4803), ("src/ocaml_compiler.mli", 87, 4803, 4867), 0), 0, Tag1 ("Ocaml_compiler", 52)), 0); (("native_profile_library_link_modules", 2846), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6122)], (0)), 100000000, 0, -6121), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6120), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6119), 0), 100000000, 0, -6118), 0), 100000000, 0, -6117), 0, (("src/ocaml_compiler.mli", 88, 4868, 4868), ("src/ocaml_compiler.mli", 88, 4868, 4946), 0), 0, Tag1 ("Ocaml_compiler", 53)), 0); (("native_profile_library_link_mllib", 2847), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6116), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6115), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6114), 0), 100000000, 0, -6113), 0), 100000000, 0, -6112), 0, (("src/ocaml_compiler.mli", 89, 4947, 4947), ("src/ocaml_compiler.mli", 89, 4947, 5018), 0), 0, Tag1 ("Ocaml_compiler", 54)), 0); (("native_profile_shared_library_link_modules", 2848), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6111)], (0)), 100000000, 0, -6110), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6109), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6108), 0), 100000000, 0, -6107), 0), 100000000, 0, -6106), 0, (("src/ocaml_compiler.mli", 90, 5019, 5019), ("src/ocaml_compiler.mli", 90, 5019, 5104), 0), 0, Tag1 ("Ocaml_compiler", 55)), 0); (("native_profile_shared_library_link_mldylib", 2849), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6105), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6104), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6103), 0), 100000000, 0, -6102), 0), 100000000, 0, -6101), 0, (("src/ocaml_compiler.mli", 91, 5105, 5105), ("src/ocaml_compiler.mli", 91, 5105, 5185), 0), 0, Tag1 ("Ocaml_compiler", 56)), 0); (("hide_package_contents", 2850), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6100), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -6099), 0), 100000000, 0, -6098), 0, (("src/ocaml_compiler.mli", 97, 5387, 5387), ("src/ocaml_compiler.mli", 97, 5387, 5429), 0), 0, Tag1 ("Ocaml_compiler", 57)), 0)]), 0, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), Tag1 ("", 36)), 0, 0); Tag3 (("Ocaml_tools", 1483), 0, (Tag1 ([(("ocamldoc_c", 2851), ((Tag1 (0, (Tag3 (Tag1 ((("Tags", 1452)), "t"), 0, (0)), 100000000, 0, -6628), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6627), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6626), (Tag3 (Tag1 ((("Command", 1462)), "t"), 0, (0)), 100000000, 0, -6625), 0), 100000000, 0, -6624), 0), 100000000, 0, -6623), 0), 100000000, 0, -6622), 0, (("src/ocaml_tools.mli", 17, 932, 932), ("src/ocaml_tools.mli", 17, 932, 988), 0), 0, Tag1 ("Ocaml_tools", 0)), 0); (("ocamldoc_l_dir", 2852), ((Tag1 (0, (Tag3 (Tag1 ((("Tags", 1452)), "t"), 0, (0)), 100000000, 0, -6621), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6620)], (0)), 100000000, 0, -6619), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6618), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6617), (Tag3 (Tag1 ((("Command", 1462)), "t"), 0, (0)), 100000000, 0, -6616), 0), 100000000, 0, -6615), 0), 100000000, 0, -6614), 0), 100000000, 0, -6613), 0), 100000000, 0, -6612), 0, (("src/ocaml_tools.mli", 18, 989, 989), ("src/ocaml_tools.mli", 18, 989, 1064), 0), 0, Tag1 ("Ocaml_tools", 1)), 0); (("ocamldoc_l_file", 2853), ((Tag1 (0, (Tag3 (Tag1 ((("Tags", 1452)), "t"), 0, (0)), 100000000, 0, -6611), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6610)], (0)), 100000000, 0, -6609), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6608), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6607), (Tag3 (Tag1 ((("Command", 1462)), "t"), 0, (0)), 100000000, 0, -6606), 0), 100000000, 0, -6605), 0), 100000000, 0, -6604), 0), 100000000, 0, -6603), 0), 100000000, 0, -6602), 0, (("src/ocaml_tools.mli", 19, 1065, 1065), ("src/ocaml_tools.mli", 19, 1065, 1141), 0), 0, Tag1 ("Ocaml_tools", 2)), 0); (("ocamldep_command", 2854), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6601), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6600), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6599), 0), 100000000, 0, -6598), 0), 100000000, 0, -6597), 0, (("src/ocaml_tools.mli", 21, 1143, 1143), ("src/ocaml_tools.mli", 21, 1143, 1197), 0), 0, Tag1 ("Ocaml_tools", 3)), 0); (("menhir_ocamldep_command", 2855), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6596), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6595), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6594), 0), 100000000, 0, -6593), 0), 100000000, 0, -6592), 0, (("src/ocaml_tools.mli", 22, 1198, 1198), ("src/ocaml_tools.mli", 22, 1198, 1259), 0), 0, Tag1 ("Ocaml_tools", 4)), 0); (("menhir_modular_ocamldep_command", 2856), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6591), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6590), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6589), 0), 100000000, 0, -6588), 0), 100000000, 0, -6587), 0, (("src/ocaml_tools.mli", 23, 1260, 1260), ("src/ocaml_tools.mli", 23, 1260, 1329), 0), 0, Tag1 ("Ocaml_tools", 5)), 0); (("menhir_modular", 2857), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6586), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6585), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6584), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6583), 0), 100000000, 0, -6582), 0), 100000000, 0, -6581), 0), 100000000, 0, -6580), 0, (("src/ocaml_tools.mli", 24, 1330, 1330), ("src/ocaml_tools.mli", 24, 1330, 1392), 0), 0, Tag1 ("Ocaml_tools", 6)), 0); (("ocamlyacc", 2858), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6579), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6578), 0), 100000000, 0, -6577), 0, (("src/ocaml_tools.mli", 25, 1393, 1393), ("src/ocaml_tools.mli", 25, 1393, 1430), 0), 0, Tag1 ("Ocaml_tools", 7)), 0); (("ocamllex", 2859), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6576), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6575), 0), 100000000, 0, -6574), 0, (("src/ocaml_tools.mli", 26, 1431, 1431), ("src/ocaml_tools.mli", 26, 1431, 1467), 0), 0, Tag1 ("Ocaml_tools", 8)), 0); (("menhir", 2860), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6573), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6572), 0), 100000000, 0, -6571), 0, (("src/ocaml_tools.mli", 27, 1468, 1468), ("src/ocaml_tools.mli", 27, 1468, 1502), 0), 0, Tag1 ("Ocaml_tools", 9)), 0); (("infer_interface", 2861), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6570), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6569), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6568), 0), 100000000, 0, -6567), 0), 100000000, 0, -6566), 0, (("src/ocaml_tools.mli", 28, 1503, 1503), ("src/ocaml_tools.mli", 28, 1503, 1556), 0), 0, Tag1 ("Ocaml_tools", 10)), 0); (("document_ocaml_interf", 2862), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6565), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6564), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6563), 0), 100000000, 0, -6562), 0), 100000000, 0, -6561), 0, (("src/ocaml_tools.mli", 29, 1557, 1557), ("src/ocaml_tools.mli", 29, 1557, 1616), 0), 0, Tag1 ("Ocaml_tools", 11)), 0); (("document_ocaml_implem", 2863), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6560), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6559), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6558), 0), 100000000, 0, -6557), 0), 100000000, 0, -6556), 0, (("src/ocaml_tools.mli", 30, 1617, 1617), ("src/ocaml_tools.mli", 30, 1617, 1676), 0), 0, Tag1 ("Ocaml_tools", 12)), 0); (("document_ocaml_project", 2864), ((Tag1 (Tag1 ("ocamldoc"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag3 (Tag1 ((("Tags", 1452)), "t"), 0, (0)), 100000000, 0, -6555), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6554)], (0)), 100000000, 0, -6553), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6552), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6551), (Tag3 (Tag1 ((("Command", 1462)), "t"), 0, (0)), 100000000, 0, -6550), 0), 100000000, 0, -6549), 0), 100000000, 0, -6548), 0), 100000000, 0, -6547), 0), 100000000, 0, -6546)], (0)), 100000000, 0, -6545), (Tag1 (Tag1 ("tags"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6544)], (0)), 100000000, 0, -6543)], (0)), 100000000, 0, -6542), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6541), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6540), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6539), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6538), 0), 100000000, 0, -6537), 0), 100000000, 0, -6536), 0), 100000000, 0, -6535), 0), 100000000, 0, -6534), 0), 100000000, 0, -6533), 0, (("src/ocaml_tools.mli", 31, 1677, 1677), ("src/ocaml_tools.mli", 34, 1803, 1846), 0), 0, Tag1 ("Ocaml_tools", 13)), 0); (("camlp4", 2865), ((Tag1 (Tag1 ("default"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("Command", 1462)), "spec"), 0, (0)), 100000000, 0, -6532)], (0)), 100000000, 0, -6531), (Tag1 (0, (Tag3 (Tag1 ((("Tags", 1452)), "elt"), 0, (0)), 100000000, 0, -6530), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6529), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1467)), "t"), 0, (0)), 100000000, 0, -6528), (Tag3 (Tag1 ((("Rule", 1473)), "action"), 0, (0)), 100000000, 0, -6527), 0), 100000000, 0, -6526), 0), 100000000, 0, -6525), 0), 100000000, 0, -6524), 0), 100000000, 0, -6523), 0, (("src/ocaml_tools.mli", 36, 1848, 1848), ("src/ocaml_tools.mli", 36, 1848, 1937), 0), 0, Tag1 ("Ocaml_tools", 14)), 0)]), 0, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), Tag1 ("", 37)), 0, 0); Tag3 (("Ocaml_specific", 1484), 0, (Tag1 ([(("init", 2866), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -6631), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -6630), 0), 100000000, 0, -6629), 0, (("src/ocaml_specific.mli", 18, 933, 933), ("src/ocaml_specific.mli", 18, 933, 956), 0), 0, Tag1 ("Ocaml_specific", 0)), 0)]), 0, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), Tag1 ("", 38)), 0, 0); Tag3 (("Exit_codes", 1485), 0, (Tag1 ([(("rc_ok", 2867), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -6646), 0, (("src/exit_codes.mli", 14, 889, 889), ("src/exit_codes.mli", 14, 889, 933), 0), 0, Tag1 ("Exit_codes", 0)), 0); (("rc_usage", 2868), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -6645), 0, (("src/exit_codes.mli", 15, 934, 934), ("src/exit_codes.mli", 15, 934, 978), 0), 0, Tag1 ("Exit_codes", 1)), 0); (("rc_failure", 2869), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -6644), 0, (("src/exit_codes.mli", 16, 979, 979), ("src/exit_codes.mli", 16, 979, 1023), 0), 0, Tag1 ("Exit_codes", 2)), 0); (("rc_invalid_argument", 2870), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -6643), 0, (("src/exit_codes.mli", 17, 1024, 1024), ("src/exit_codes.mli", 17, 1024, 1068), 0), 0, Tag1 ("Exit_codes", 3)), 0); (("rc_system_error", 2871), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -6642), 0, (("src/exit_codes.mli", 18, 1069, 1069), ("src/exit_codes.mli", 18, 1069, 1113), 0), 0, Tag1 ("Exit_codes", 4)), 0); (("rc_hygiene", 2872), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -6641), 0, (("src/exit_codes.mli", 19, 1114, 1114), ("src/exit_codes.mli", 19, 1114, 1158), 0), 0, Tag1 ("Exit_codes", 5)), 0); (("rc_circularity", 2873), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -6640), 0, (("src/exit_codes.mli", 20, 1159, 1159), ("src/exit_codes.mli", 20, 1159, 1203), 0), 0, Tag1 ("Exit_codes", 6)), 0); (("rc_solver_failed", 2874), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -6639), 0, (("src/exit_codes.mli", 21, 1204, 1204), ("src/exit_codes.mli", 21, 1204, 1248), 0), 0, Tag1 ("Exit_codes", 7)), 0); (("rc_ocamldep_error", 2875), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -6638), 0, (("src/exit_codes.mli", 22, 1249, 1249), ("src/exit_codes.mli", 22, 1249, 1293), 0), 0, Tag1 ("Exit_codes", 8)), 0); (("rc_lexing_error", 2876), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -6637), 0, (("src/exit_codes.mli", 23, 1294, 1294), ("src/exit_codes.mli", 23, 1294, 1338), 0), 0, Tag1 ("Exit_codes", 9)), 0); (("rc_build_error", 2877), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -6636), 0, (("src/exit_codes.mli", 24, 1339, 1339), ("src/exit_codes.mli", 24, 1339, 1383), 0), 0, Tag1 ("Exit_codes", 10)), 0); (("rc_executor_subcommand_failed", 2878), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -6635), 0, (("src/exit_codes.mli", 25, 1384, 1384), ("src/exit_codes.mli", 25, 1384, 1428), 0), 0, Tag1 ("Exit_codes", 11)), 0); (("rc_executor_subcommand_got_signal", 2879), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -6634), 0, (("src/exit_codes.mli", 26, 1429, 1429), ("src/exit_codes.mli", 26, 1429, 1473), 0), 0, Tag1 ("Exit_codes", 12)), 0); (("rc_executor_io_error", 2880), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -6633), 0, (("src/exit_codes.mli", 27, 1474, 1474), ("src/exit_codes.mli", 27, 1474, 1518), 0), 0, Tag1 ("Exit_codes", 13)), 0); (("rc_executor_excetptional_condition", 2881), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -6632), 0, (("src/exit_codes.mli", 28, 1519, 1519), ("src/exit_codes.mli", 28, 1519, 1563), 0), 0, Tag1 ("Exit_codes", 14)), 0)]), 0, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), Tag1 ("", 39)), 0, 0); Tag3 (("Plugin", 1486), 0, (Tag1 ([(("execute_plugin_if_needed", 2882), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -6652), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -6651), 0), 100000000, 0, -6650), 0, (("src/plugin.mli", 18, 945, 945), ("src/plugin.mli", 18, 945, 988), 0), 0, Tag1 ("Plugin", 0)), 0); (("we_need_a_plugin", 2883), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -6649), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -6648), 0), 100000000, 0, -6647), 0, (("src/plugin.mli", 19, 989, 989), ("src/plugin.mli", 19, 989, 1024), 0), 0, Tag1 ("Plugin", 1)), 0)]), 0, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), Tag1 ("", 40)), 0, 0); Tag3 (("Hooks", 1487), 0, (Tag1 ([Tag1 (("message", 2884), (0, 0, Tag1 ([(("Before_hygiene", 270), (0), 0, (("src/hooks.mli", 17, 946, 948), ("src/hooks.mli", 17, 946, 964), 0), 0, Tag1 ("Hooks", 1)); (("After_hygiene", 271), (0), 0, (("src/hooks.mli", 18, 965, 967), ("src/hooks.mli", 18, 965, 982), 0), 0, Tag1 ("Hooks", 2)); (("Before_options", 272), (0), 0, (("src/hooks.mli", 19, 983, 985), ("src/hooks.mli", 19, 983, 1001), 0), 0, Tag1 ("Hooks", 3)); (("After_options", 273), (0), 0, (("src/hooks.mli", 20, 1002, 1004), ("src/hooks.mli", 20, 1002, 1019), 0), 0, Tag1 ("Hooks", 4)); (("Before_rules", 274), (0), 0, (("src/hooks.mli", 21, 1020, 1022), ("src/hooks.mli", 21, 1020, 1036), 0), 0, Tag1 ("Hooks", 5)); (("After_rules", 275), (0), 0, (("src/hooks.mli", 22, 1037, 1039), ("src/hooks.mli", 22, 1037, 1052), 0), 0, Tag1 ("Hooks", 6))], 0), 1, 0, 0, 0, 0, 0, (("src/hooks.mli", 16, 931, 931), ("src/hooks.mli", 22, 1037, 1052), 0), 0, 1, 0, Tag1 ("Hooks", 0)), 1, 0); (("setup_hooks", 2885), ((Tag1 (0, (Tag1 (0, (Tag3 ((("message", 2884)), 0, (0)), 100000000, 0, -6660), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -6659), 0), 100000000, 0, -6658), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -6657), 0), 100000000, 0, -6656), 0, (("src/hooks.mli", 24, 1054, 1054), ("src/hooks.mli", 24, 1054, 1097), 0), 0, Tag1 ("Hooks", 7)), 0); (("call_hook", 2886), ((Tag1 (0, (Tag3 ((("message", 2884)), 0, (0)), 100000000, 0, -6655), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -6654), 0), 100000000, 0, -6653), 0, (("src/hooks.mli", 25, 1098, 1098), ("src/hooks.mli", 25, 1098, 1129), 0), 0, Tag1 ("Hooks", 8)), 0)]), 0, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), Tag1 ("", 41)), 0, 0); Tag3 (("Main", 1488), 0, (Tag1 ([(("main", 2887), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -6663), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -6662), 0), 100000000, 0, -6661), 0, (("src/main.mli", 16, 931, 931), ("src/main.mli", 16, 931, 954), 0), 0, Tag1 ("Main", 0)), 0)]), 0, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), Tag1 ("", 42)), 0, 0)], "Ocamlbuild_pack", [("Ocamlbuild_pack", ("\160\191!\247'\176\014z9\226\031M%\003N5")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Arg", ("\024%=\206\198p\149Y\007\004\216,&\254#\207")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

module Main : sig val main : unit -> unit end

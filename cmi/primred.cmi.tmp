type _ action_kind =
    IncompatTypes : 'a CPrimitives.prim_type -> Names.Constant.t action_kind
  | IncompatInd : 'b CPrimitives.prim_ind -> Names.inductive action_kind
type exn += IncompatibleDeclarations : 'a action_kind * 'a * 'a -> exn
val add_retroknowledge : Environ.env -> Retroknowledge.action -> Environ.env
val get_int_type : Environ.env -> Names.Constant.t
val get_float_type : Environ.env -> Names.Constant.t
val get_cmp_type : Environ.env -> Names.Constant.t
val get_bool_constructors :
  Environ.env -> Names.constructor * Names.constructor
val get_carry_constructors :
  Environ.env -> Names.constructor * Names.constructor
val get_pair_constructor : Environ.env -> Names.constructor
val get_cmp_constructors :
  Environ.env -> Names.constructor * Names.constructor * Names.constructor
val get_f_cmp_constructors :
  Environ.env ->
  Names.constructor * Names.constructor * Names.constructor *
  Names.constructor
val get_f_class_constructors :
  Environ.env ->
  Names.constructor * Names.constructor * Names.constructor *
  Names.constructor * Names.constructor * Names.constructor *
  Names.constructor * Names.constructor * Names.constructor
exception NativeDestKO
module type RedNativeEntries =
  sig
    type elem
    type args
    type evd
    type uinstance
    val get : args -> int -> elem
    val get_int : evd -> elem -> Uint63.t
    val get_float : evd -> elem -> Float64.t
    val get_parray : evd -> elem -> elem Parray.t
    val mkInt : Environ.env -> Uint63.t -> elem
    val mkFloat : Environ.env -> Float64.t -> elem
    val mkBool : Environ.env -> bool -> elem
    val mkCarry : Environ.env -> bool -> elem -> elem
    val mkIntPair : Environ.env -> elem -> elem -> elem
    val mkFloatIntPair : Environ.env -> elem -> elem -> elem
    val mkLt : Environ.env -> elem
    val mkEq : Environ.env -> elem
    val mkGt : Environ.env -> elem
    val mkFLt : Environ.env -> elem
    val mkFEq : Environ.env -> elem
    val mkFGt : Environ.env -> elem
    val mkFNotComparable : Environ.env -> elem
    val mkPNormal : Environ.env -> elem
    val mkNNormal : Environ.env -> elem
    val mkPSubn : Environ.env -> elem
    val mkNSubn : Environ.env -> elem
    val mkPZero : Environ.env -> elem
    val mkNZero : Environ.env -> elem
    val mkPInf : Environ.env -> elem
    val mkNInf : Environ.env -> elem
    val mkNaN : Environ.env -> elem
    val mkArray : Environ.env -> uinstance -> elem Parray.t -> elem -> elem
  end
module type RedNative =
  sig
    type elem
    type args
    type evd
    type uinstance
    val red_prim :
      Environ.env -> evd -> CPrimitives.t -> uinstance -> args -> elem option
  end
module RedNative :
  functor (E : RedNativeEntries) ->
    sig
      type elem = E.elem
      type args = E.args
      type evd = E.evd
      type uinstance = E.uinstance
      val red_prim :
        Environ.env ->
        evd -> CPrimitives.t -> uinstance -> args -> elem option("DEBUG:rule", [Tag1 (("action_kind", 784), ([((("_")), 100000000, 0, -65)], 1, Tag1 ([(("IncompatTypes", 499), ([(Tag3 (Tag1 ((Tag2 ("CPrimitives")), "prim_type"), [((0), 100000000, 0, -60)], (0)), 100000000, 0, -59)]), ((Tag3 ((("action_kind", 784)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -58)], (0)), 100000000, 0, -57)), (("kernel/primred.mli", 6, 81, 83), ("kernel/primred.mli", 6, 81, 150), 0), 0, Tag1 ("Primred", 1)); (("IncompatInd", 546), ([(Tag3 (Tag1 ((Tag2 ("CPrimitives")), "prim_ind"), [((0), 100000000, 0, -64)], (0)), 100000000, 0, -63)]), ((Tag3 ((("action_kind", 784)), [(Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -62)], (0)), 100000000, 0, -61)), (("kernel/primred.mli", 7, 151, 153), ("kernel/primred.mli", 7, 151, 216), 0), 0, Tag1 ("Primred", 2))], 0), 1, 0, [63], [0], 0, 0, (("kernel/primred.mli", 5, 60, 60), ("kernel/primred.mli", 7, 151, 216), 0), 0, 0, 0, Tag1 ("Primred", 0)), 1, 0); Tag2 (("IncompatibleDeclarations", 785), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((("action_kind", 784)), [((("a")), 100000000, 0, -56)], (0)), 100000000, 0, -55); ((("a")), 100000000, 0, -56); ((("a")), 100000000, 0, -56)]), ((Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -54)), 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Primred", 3)), 0, 0); (("add_retroknowledge", 786), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -53), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Retroknowledge")), "action"), 0, (0)), 100000000, 0, -52), (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -51), 0), 100000000, 0, -50), 0), 100000000, 0, -49), 0, (("kernel/primred.mli", 12, 332, 332), ("kernel/primred.mli", 12, 332, 392), 0), 0, Tag1 ("Primred", 4)), 0); (("get_int_type", 787), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -48), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -47), 0), 100000000, 0, -46), 0, (("kernel/primred.mli", 14, 394, 394), ("kernel/primred.mli", 14, 394, 430), 0), 0, Tag1 ("Primred", 5)), 0); (("get_float_type", 788), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -45), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -44), 0), 100000000, 0, -43), 0, (("kernel/primred.mli", 15, 431, 431), ("kernel/primred.mli", 15, 431, 469), 0), 0, Tag1 ("Primred", 6)), 0); (("get_cmp_type", 789), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -42), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -41), 0), 100000000, 0, -40), 0, (("kernel/primred.mli", 16, 470, 470), ("kernel/primred.mli", 16, 470, 506), 0), 0, Tag1 ("Primred", 7)), 0); (("get_bool_constructors", 790), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -39), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Names")), "constructor"), 0, (0)), 100000000, 0, -37); (Tag3 (Tag1 ((Tag2 ("Names")), "constructor"), 0, (0)), 100000000, 0, -38)]), 100000000, 0, -36), 0), 100000000, 0, -35), 0, (("kernel/primred.mli", 17, 507, 507), ("kernel/primred.mli", 17, 507, 567), 0), 0, Tag1 ("Primred", 8)), 0); (("get_carry_constructors", 791), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -34), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Names")), "constructor"), 0, (0)), 100000000, 0, -32); (Tag3 (Tag1 ((Tag2 ("Names")), "constructor"), 0, (0)), 100000000, 0, -33)]), 100000000, 0, -31), 0), 100000000, 0, -30), 0, (("kernel/primred.mli", 18, 568, 568), ("kernel/primred.mli", 18, 568, 629), 0), 0, Tag1 ("Primred", 9)), 0); (("get_pair_constructor", 792), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -29), (Tag3 (Tag1 ((Tag2 ("Names")), "constructor"), 0, (0)), 100000000, 0, -28), 0), 100000000, 0, -27), 0, (("kernel/primred.mli", 19, 630, 630), ("kernel/primred.mli", 19, 630, 675), 0), 0, Tag1 ("Primred", 10)), 0); (("get_cmp_constructors", 793), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -26), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Names")), "constructor"), 0, (0)), 100000000, 0, -23); (Tag3 (Tag1 ((Tag2 ("Names")), "constructor"), 0, (0)), 100000000, 0, -24); (Tag3 (Tag1 ((Tag2 ("Names")), "constructor"), 0, (0)), 100000000, 0, -25)]), 100000000, 0, -22), 0), 100000000, 0, -21), 0, (("kernel/primred.mli", 20, 676, 676), ("kernel/primred.mli", 20, 676, 749), 0), 0, Tag1 ("Primred", 11)), 0); (("get_f_cmp_constructors", 794), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -20), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Names")), "constructor"), 0, (0)), 100000000, 0, -16); (Tag3 (Tag1 ((Tag2 ("Names")), "constructor"), 0, (0)), 100000000, 0, -17); (Tag3 (Tag1 ((Tag2 ("Names")), "constructor"), 0, (0)), 100000000, 0, -18); (Tag3 (Tag1 ((Tag2 ("Names")), "constructor"), 0, (0)), 100000000, 0, -19)]), 100000000, 0, -15), 0), 100000000, 0, -14), 0, (("kernel/primred.mli", 21, 750, 750), ("kernel/primred.mli", 21, 750, 839), 0), 0, Tag1 ("Primred", 12)), 0); (("get_f_class_constructors", 795), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -13), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Names")), "constructor"), 0, (0)), 100000000, 0, -4); (Tag3 (Tag1 ((Tag2 ("Names")), "constructor"), 0, (0)), 100000000, 0, -5); (Tag3 (Tag1 ((Tag2 ("Names")), "constructor"), 0, (0)), 100000000, 0, -6); (Tag3 (Tag1 ((Tag2 ("Names")), "constructor"), 0, (0)), 100000000, 0, -7); (Tag3 (Tag1 ((Tag2 ("Names")), "constructor"), 0, (0)), 100000000, 0, -8); (Tag3 (Tag1 ((Tag2 ("Names")), "constructor"), 0, (0)), 100000000, 0, -9); (Tag3 (Tag1 ((Tag2 ("Names")), "constructor"), 0, (0)), 100000000, 0, -10); (Tag3 (Tag1 ((Tag2 ("Names")), "constructor"), 0, (0)), 100000000, 0, -11); (Tag3 (Tag1 ((Tag2 ("Names")), "constructor"), 0, (0)), 100000000, 0, -12)]), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("kernel/primred.mli", 22, 840, 840), ("kernel/primred.mli", 25, 999, 1021), 0), 0, Tag1 ("Primred", 13)), 0); Tag2 (("NativeDestKO", 796), ((Tag3 ("exn", 7)), 0, (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Primred", 14)), 2, 0); Tag4 (("RedNativeEntries", 797), ((Tag1 ([Tag1 (("elem", 801), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("kernel/primred.mli", 31, 1137, 1141), ("kernel/primred.mli", 31, 1137, 1150), 0), 0, 0, 0, Tag1 ("Primred", 15)), 1, 0); Tag1 (("args", 802), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("kernel/primred.mli", 32, 1151, 1155), ("kernel/primred.mli", 32, 1151, 1164), 0), 0, 0, 0, Tag1 ("Primred", 16)), 1, 0); Tag1 (("evd", 803), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("kernel/primred.mli", 33, 1165, 1169), ("kernel/primred.mli", 33, 1165, 1177), 0), 0, 0, 0, Tag1 ("Primred", 17)), 1, 0); Tag1 (("uinstance", 804), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("kernel/primred.mli", 34, 1225, 1229), ("kernel/primred.mli", 34, 1225, 1243), 0), 0, 0, 0, Tag1 ("Primred", 18)), 1, 0); (("get", 805), ((Tag1 (0, (Tag3 ((("args", 802)), 0, (0)), 100000000, 0, -180), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -179), (Tag3 ((("elem", 801)), 0, (0)), 100000000, 0, -178), 0), 100000000, 0, -177), 0), 100000000, 0, -176), 0, (("kernel/primred.mli", 36, 1245, 1249), ("kernel/primred.mli", 36, 1245, 1278), 0), 0, Tag1 ("Primred", 19)), 0); (("get_int", 806), ((Tag1 (0, (Tag3 ((("evd", 803)), 0, (0)), 100000000, 0, -175), (Tag1 (0, (Tag3 ((("elem", 801)), 0, (0)), 100000000, 0, -174), (Tag3 (Tag1 ((Tag2 ("Uint63")), "t"), 0, (0)), 100000000, 0, -173), 0), 100000000, 0, -172), 0), 100000000, 0, -171), 0, (("kernel/primred.mli", 37, 1279, 1283), ("kernel/primred.mli", 37, 1279, 1320), 0), 0, Tag1 ("Primred", 20)), 0); (("get_float", 807), ((Tag1 (0, (Tag3 ((("evd", 803)), 0, (0)), 100000000, 0, -170), (Tag1 (0, (Tag3 ((("elem", 801)), 0, (0)), 100000000, 0, -169), (Tag3 (Tag1 ((Tag2 ("Float64")), "t"), 0, (0)), 100000000, 0, -168), 0), 100000000, 0, -167), 0), 100000000, 0, -166), 0, (("kernel/primred.mli", 38, 1321, 1325), ("kernel/primred.mli", 38, 1321, 1365), 0), 0, Tag1 ("Primred", 21)), 0); (("get_parray", 808), ((Tag1 (0, (Tag3 ((("evd", 803)), 0, (0)), 100000000, 0, -165), (Tag1 (0, (Tag3 ((("elem", 801)), 0, (0)), 100000000, 0, -164), (Tag3 (Tag1 ((Tag2 ("Parray")), "t"), [(Tag3 ((("elem", 801)), 0, (0)), 100000000, 0, -163)], (0)), 100000000, 0, -162), 0), 100000000, 0, -161), 0), 100000000, 0, -160), 0, (("kernel/primred.mli", 39, 1366, 1370), ("kernel/primred.mli", 39, 1366, 1415), 0), 0, Tag1 ("Primred", 22)), 0); (("mkInt", 809), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -159), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Uint63")), "t"), 0, (0)), 100000000, 0, -158), (Tag3 ((("elem", 801)), 0, (0)), 100000000, 0, -157), 0), 100000000, 0, -156), 0), 100000000, 0, -155), 0, (("kernel/primred.mli", 40, 1416, 1420), ("kernel/primred.mli", 40, 1416, 1455), 0), 0, Tag1 ("Primred", 23)), 0); (("mkFloat", 810), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -154), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Float64")), "t"), 0, (0)), 100000000, 0, -153), (Tag3 ((("elem", 801)), 0, (0)), 100000000, 0, -152), 0), 100000000, 0, -151), 0), 100000000, 0, -150), 0, (("kernel/primred.mli", 41, 1456, 1460), ("kernel/primred.mli", 41, 1456, 1498), 0), 0, Tag1 ("Primred", 24)), 0); (("mkBool", 811), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -149), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -148), (Tag3 ((("elem", 801)), 0, (0)), 100000000, 0, -147), 0), 100000000, 0, -146), 0), 100000000, 0, -145), 0, (("kernel/primred.mli", 42, 1499, 1503), ("kernel/primred.mli", 42, 1499, 1535), 0), 0, Tag1 ("Primred", 25)), 0); (("mkCarry", 812), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -144), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -143), (Tag1 (0, (Tag3 ((("elem", 801)), 0, (0)), 100000000, 0, -142), (Tag3 ((("elem", 801)), 0, (0)), 100000000, 0, -141), 0), 100000000, 0, -140), 0), 100000000, 0, -139), 0), 100000000, 0, -138), 0, (("kernel/primred.mli", 43, 1536, 1540), ("kernel/primred.mli", 43, 1536, 1581), 0), 0, Tag1 ("Primred", 26)), 0); (("mkIntPair", 813), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -137), (Tag1 (0, (Tag3 ((("elem", 801)), 0, (0)), 100000000, 0, -136), (Tag1 (0, (Tag3 ((("elem", 801)), 0, (0)), 100000000, 0, -135), (Tag3 ((("elem", 801)), 0, (0)), 100000000, 0, -134), 0), 100000000, 0, -133), 0), 100000000, 0, -132), 0), 100000000, 0, -131), 0, (("kernel/primred.mli", 44, 1602, 1606), ("kernel/primred.mli", 44, 1602, 1649), 0), 0, Tag1 ("Primred", 27)), 0); (("mkFloatIntPair", 814), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -130), (Tag1 (0, (Tag3 ((("elem", 801)), 0, (0)), 100000000, 0, -129), (Tag1 (0, (Tag3 ((("elem", 801)), 0, (0)), 100000000, 0, -128), (Tag3 ((("elem", 801)), 0, (0)), 100000000, 0, -127), 0), 100000000, 0, -126), 0), 100000000, 0, -125), 0), 100000000, 0, -124), 0, (("kernel/primred.mli", 45, 1650, 1654), ("kernel/primred.mli", 45, 1650, 1702), 0), 0, Tag1 ("Primred", 28)), 0); (("mkLt", 815), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -123), (Tag3 ((("elem", 801)), 0, (0)), 100000000, 0, -122), 0), 100000000, 0, -121), 0, (("kernel/primred.mli", 46, 1703, 1707), ("kernel/primred.mli", 46, 1703, 1729), 0), 0, Tag1 ("Primred", 29)), 0); (("mkEq", 816), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -120), (Tag3 ((("elem", 801)), 0, (0)), 100000000, 0, -119), 0), 100000000, 0, -118), 0, (("kernel/primred.mli", 47, 1730, 1734), ("kernel/primred.mli", 47, 1730, 1756), 0), 0, Tag1 ("Primred", 30)), 0); (("mkGt", 817), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -117), (Tag3 ((("elem", 801)), 0, (0)), 100000000, 0, -116), 0), 100000000, 0, -115), 0, (("kernel/primred.mli", 48, 1757, 1761), ("kernel/primred.mli", 48, 1757, 1783), 0), 0, Tag1 ("Primred", 31)), 0); (("mkFLt", 818), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -114), (Tag3 ((("elem", 801)), 0, (0)), 100000000, 0, -113), 0), 100000000, 0, -112), 0, (("kernel/primred.mli", 49, 1784, 1788), ("kernel/primred.mli", 49, 1784, 1811), 0), 0, Tag1 ("Primred", 32)), 0); (("mkFEq", 819), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -111), (Tag3 ((("elem", 801)), 0, (0)), 100000000, 0, -110), 0), 100000000, 0, -109), 0, (("kernel/primred.mli", 50, 1812, 1816), ("kernel/primred.mli", 50, 1812, 1839), 0), 0, Tag1 ("Primred", 33)), 0); (("mkFGt", 820), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -108), (Tag3 ((("elem", 801)), 0, (0)), 100000000, 0, -107), 0), 100000000, 0, -106), 0, (("kernel/primred.mli", 51, 1840, 1844), ("kernel/primred.mli", 51, 1840, 1867), 0), 0, Tag1 ("Primred", 34)), 0); (("mkFNotComparable", 821), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -105), (Tag3 ((("elem", 801)), 0, (0)), 100000000, 0, -104), 0), 100000000, 0, -103), 0, (("kernel/primred.mli", 52, 1868, 1872), ("kernel/primred.mli", 52, 1868, 1906), 0), 0, Tag1 ("Primred", 35)), 0); (("mkPNormal", 822), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -102), (Tag3 ((("elem", 801)), 0, (0)), 100000000, 0, -101), 0), 100000000, 0, -100), 0, (("kernel/primred.mli", 53, 1907, 1911), ("kernel/primred.mli", 53, 1907, 1938), 0), 0, Tag1 ("Primred", 36)), 0); (("mkNNormal", 823), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -99), (Tag3 ((("elem", 801)), 0, (0)), 100000000, 0, -98), 0), 100000000, 0, -97), 0, (("kernel/primred.mli", 54, 1939, 1943), ("kernel/primred.mli", 54, 1939, 1970), 0), 0, Tag1 ("Primred", 37)), 0); (("mkPSubn", 824), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -96), (Tag3 ((("elem", 801)), 0, (0)), 100000000, 0, -95), 0), 100000000, 0, -94), 0, (("kernel/primred.mli", 55, 1971, 1975), ("kernel/primred.mli", 55, 1971, 2000), 0), 0, Tag1 ("Primred", 38)), 0); (("mkNSubn", 825), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -93), (Tag3 ((("elem", 801)), 0, (0)), 100000000, 0, -92), 0), 100000000, 0, -91), 0, (("kernel/primred.mli", 56, 2001, 2005), ("kernel/primred.mli", 56, 2001, 2030), 0), 0, Tag1 ("Primred", 39)), 0); (("mkPZero", 826), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -90), (Tag3 ((("elem", 801)), 0, (0)), 100000000, 0, -89), 0), 100000000, 0, -88), 0, (("kernel/primred.mli", 57, 2031, 2035), ("kernel/primred.mli", 57, 2031, 2060), 0), 0, Tag1 ("Primred", 40)), 0); (("mkNZero", 827), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -87), (Tag3 ((("elem", 801)), 0, (0)), 100000000, 0, -86), 0), 100000000, 0, -85), 0, (("kernel/primred.mli", 58, 2061, 2065), ("kernel/primred.mli", 58, 2061, 2090), 0), 0, Tag1 ("Primred", 41)), 0); (("mkPInf", 828), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -84), (Tag3 ((("elem", 801)), 0, (0)), 100000000, 0, -83), 0), 100000000, 0, -82), 0, (("kernel/primred.mli", 59, 2091, 2095), ("kernel/primred.mli", 59, 2091, 2119), 0), 0, Tag1 ("Primred", 42)), 0); (("mkNInf", 829), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -81), (Tag3 ((("elem", 801)), 0, (0)), 100000000, 0, -80), 0), 100000000, 0, -79), 0, (("kernel/primred.mli", 60, 2120, 2124), ("kernel/primred.mli", 60, 2120, 2148), 0), 0, Tag1 ("Primred", 43)), 0); (("mkNaN", 830), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -78), (Tag3 ((("elem", 801)), 0, (0)), 100000000, 0, -77), 0), 100000000, 0, -76), 0, (("kernel/primred.mli", 61, 2149, 2153), ("kernel/primred.mli", 61, 2149, 2176), 0), 0, Tag1 ("Primred", 44)), 0); (("mkArray", 831), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -75), (Tag1 (0, (Tag3 ((("uinstance", 804)), 0, (0)), 100000000, 0, -74), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parray")), "t"), [(Tag3 ((("elem", 801)), 0, (0)), 100000000, 0, -73)], (0)), 100000000, 0, -72), (Tag1 (0, (Tag3 ((("elem", 801)), 0, (0)), 100000000, 0, -71), (Tag3 ((("elem", 801)), 0, (0)), 100000000, 0, -70), 0), 100000000, 0, -69), 0), 100000000, 0, -68), 0), 100000000, 0, -67), 0), 100000000, 0, -66), 0, (("kernel/primred.mli", 62, 2177, 2181), ("kernel/primred.mli", 62, 2177, 2244), 0), 0, Tag1 ("Primred", 45)), 0)])), 0, (("kernel/primred.mli", 29, 1100, 1100), ("kernel/primred.mli", 63, 2245, 2250), 0), Tag1 ("Primred", 46)), 0); Tag4 (("RedNative", 798), ((Tag1 ([Tag1 (("elem", 832), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("kernel/primred.mli", 67, 2281, 2284), ("kernel/primred.mli", 67, 2281, 2293), 0), 0, 0, 0, Tag1 ("Primred", 47)), 1, 0); Tag1 (("args", 833), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("kernel/primred.mli", 68, 2294, 2297), ("kernel/primred.mli", 68, 2294, 2306), 0), 0, 0, 0, Tag1 ("Primred", 48)), 1, 0); Tag1 (("evd", 834), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("kernel/primred.mli", 69, 2307, 2310), ("kernel/primred.mli", 69, 2307, 2318), 0), 0, 0, 0, Tag1 ("Primred", 49)), 1, 0); Tag1 (("uinstance", 835), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("kernel/primred.mli", 70, 2319, 2322), ("kernel/primred.mli", 70, 2319, 2336), 0), 0, 0, 0, Tag1 ("Primred", 50)), 1, 0); (("red_prim", 836), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -192), (Tag1 (0, (Tag3 ((("evd", 834)), 0, (0)), 100000000, 0, -191), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("CPrimitives")), "t"), 0, (0)), 100000000, 0, -190), (Tag1 (0, (Tag3 ((("uinstance", 835)), 0, (0)), 100000000, 0, -189), (Tag1 (0, (Tag3 ((("args", 833)), 0, (0)), 100000000, 0, -188), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elem", 832)), 0, (0)), 100000000, 0, -187)], (0)), 100000000, 0, -186), 0), 100000000, 0, -185), 0), 100000000, 0, -184), 0), 100000000, 0, -183), 0), 100000000, 0, -182), 0), 100000000, 0, -181), 0, (("kernel/primred.mli", 71, 2337, 2340), ("kernel/primred.mli", 71, 2337, 2418), 0), 0, Tag1 ("Primred", 51)), 0)])), 0, (("kernel/primred.mli", 65, 2252, 2252), ("kernel/primred.mli", 72, 2419, 2423), 0), Tag1 ("Primred", 52)), 0); Tag3 (("RedNative", 799), 0, (Tag2 (((("E", 800)), ((("RedNativeEntries", 797)))), Tag1 ([Tag1 (("elem", 837), (0, 0, 0, 1, ((Tag3 (Tag1 ((("E", 800)), "elem"), 0, (0)), 100000000, 0, -208)), 0, 0, 0, 0, (("kernel/primred.mli", 76, 2478, 2497), ("kernel/primred.mli", 76, 2478, 2515), 0), 0, 0, 0, Tag1 ("Primred", 54)), 1, 0); Tag1 (("args", 838), (0, 0, 0, 1, ((Tag3 (Tag1 ((("E", 800)), "args"), 0, (0)), 100000000, 0, -207)), 0, 0, 0, 0, (("kernel/primred.mli", 77, 2516, 2525), ("kernel/primred.mli", 77, 2516, 2543), 0), 0, 0, 0, Tag1 ("Primred", 55)), 1, 0); Tag1 (("evd", 839), (0, 0, 0, 1, ((Tag3 (Tag1 ((("E", 800)), "evd"), 0, (0)), 100000000, 0, -206)), 0, 0, 0, 0, (("kernel/primred.mli", 78, 2544, 2553), ("kernel/primred.mli", 78, 2544, 2569), 0), 0, 0, 0, Tag1 ("Primred", 56)), 1, 0); Tag1 (("uinstance", 840), (0, 0, 0, 1, ((Tag3 (Tag1 ((("E", 800)), "uinstance"), 0, (0)), 100000000, 0, -205)), 0, 0, 0, 0, (("kernel/primred.mli", 79, 2570, 2579), ("kernel/primred.mli", 79, 2570, 2607), 0), 0, 0, 0, Tag1 ("Primred", 57)), 1, 0); (("red_prim", 841), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -204), (Tag1 (0, (Tag3 ((("evd", 839)), 0, (0)), 100000000, 0, -203), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("CPrimitives")), "t"), 0, (0)), 100000000, 0, -202), (Tag1 (0, (Tag3 ((("uinstance", 840)), 0, (0)), 100000000, 0, -201), (Tag1 (0, (Tag3 ((("args", 838)), 0, (0)), 100000000, 0, -200), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elem", 837)), 0, (0)), 100000000, 0, -199)], (0)), 100000000, 0, -198), 0), 100000000, 0, -197), 0), 100000000, 0, -196), 0), 100000000, 0, -195), 0), 100000000, 0, -194), 0), 100000000, 0, -193), 0, (("kernel/primred.mli", 71, 2337, 2340), ("kernel/primred.mli", 71, 2337, 2418), 0), 0, Tag1 ("Primred", 51)), 0)])), 0, (("kernel/primred.mli", 74, 2425, 2425), ("kernel/primred.mli", 79, 2570, 2607), 0), Tag1 ("Primred", 58)), 0, 0)], "Primred", [("Primred", ("\158G\192\182\224\196\144*\174y_E\165\012\137C")); ("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Vmemitcodes", ("wCd\138\165\158DD\241gH\236.\210\197\247")); ("Vmbytecodes", ("\025\021\151\137Dx\149W\236+[\143f\208\160\016")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("Range", ("\218\130\001r\237\r\144\171\164\021l\155\196\143sg")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Environ", ("\171b\1579\229<\003Z\147IL\225X\254\182\204")); ("Declarations", ("\239\137n\019\030w$\182\166z^{\b\206\163\175")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CEphemeron", ("\204I\179-\206(x4\173\229\250\001PkH\151")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])

    end

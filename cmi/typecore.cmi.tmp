type type_forcing_context =
    If_conditional
  | If_no_else_branch
  | While_loop_conditional
  | While_loop_body
  | For_loop_start_index
  | For_loop_stop_index
  | For_loop_body
  | Assert_condition
  | Sequence_left_hand_side
  | When_guard
type type_expected = private {
  ty : Types.type_expr;
  explanation : type_forcing_context option;
}
type pattern_variable = {
  pv_id : Ident.t;
  pv_type : Types.type_expr;
  pv_loc : Location.t;
  pv_as_var : bool;
  pv_attributes : Typedtree.attributes;
}
val mk_expected :
  ?explanation:type_forcing_context -> Types.type_expr -> type_expected
val is_nonexpansive : Typedtree.expression -> bool
module Datatype_kind :
  sig
    type t = Record | Variant
    val type_name : t -> string
    val label_name : t -> string
  end
type wrong_name = {
  type_path : Path.t;
  kind : Datatype_kind.t;
  name : string Asttypes.loc;
  valid_names : string list;
}
type wrong_kind_context = Pattern | Expression of type_forcing_context option
type wrong_kind_sort = Constructor | Record | Boolean | List | Unit
type existential_restriction =
    At_toplevel
  | In_group
  | In_rec
  | With_attributes
  | In_class_args
  | In_class_def
  | In_self_pattern
type module_patterns_restriction =
    Modules_allowed of { scope : int; }
  | Modules_rejected
val type_binding :
  Env.t ->
  Asttypes.rec_flag ->
  Parsetree.value_binding list -> Typedtree.value_binding list * Env.t
val type_let :
  existential_restriction ->
  Env.t ->
  Asttypes.rec_flag ->
  Parsetree.value_binding list -> Typedtree.value_binding list * Env.t
val type_expression : Env.t -> Parsetree.expression -> Typedtree.expression
val type_class_arg_pattern :
  string ->
  Env.t ->
  Env.t ->
  Asttypes.arg_label ->
  Parsetree.pattern ->
  Typedtree.pattern * (Ident.t * Ident.t * Types.type_expr) list * Env.t *
  Env.t
val type_self_pattern :
  Env.t -> Parsetree.pattern -> Typedtree.pattern * pattern_variable list
val check_partial :
  ?lev:int ->
  module_patterns_restriction ->
  Env.t ->
  Types.type_expr ->
  Location.t -> Typedtree.value Typedtree.case list -> Typedtree.partial
val type_expect :
  ?in_function:Location.t * Types.type_expr ->
  Env.t -> Parsetree.expression -> type_expected -> Typedtree.expression
val type_exp : Env.t -> Parsetree.expression -> Typedtree.expression
val type_approx : Env.t -> Parsetree.expression -> Types.type_expr
val type_argument :
  Env.t ->
  Parsetree.expression ->
  Types.type_expr -> Types.type_expr -> Typedtree.expression
val option_some : Env.t -> Typedtree.expression -> Typedtree.expression
val option_none :
  Env.t -> Types.type_expr -> Location.t -> Typedtree.expression
val extract_option_type : Env.t -> Types.type_expr -> Types.type_expr
val generalizable : int -> Types.type_expr -> bool
val generalize_structure_exp : Typedtree.expression -> unit
val reset_delayed_checks : unit -> unit
val force_delayed_checks : unit -> unit
val name_pattern : string -> Typedtree.pattern list -> Ident.t
val name_cases : string -> Typedtree.value Typedtree.case list -> Ident.t
val self_coercion : (Path.t * Location.t list ref) list ref
type error =
    Constructor_arity_mismatch of Longident.t * int * int
  | Label_mismatch of Longident.t * Errortrace.unification_error
  | Pattern_type_clash : Errortrace.unification_error *
      Parsetree.pattern_desc option -> error
  | Or_pattern_type_clash of Ident.t * Errortrace.unification_error
  | Multiply_bound_variable of string
  | Orpat_vars of Ident.t * Ident.t list
  | Expr_type_clash of Errortrace.unification_error *
      type_forcing_context option * Parsetree.expression_desc option
  | Apply_non_function of { funct : Typedtree.expression;
      func_ty : Types.type_expr; res_ty : Types.type_expr;
      previous_arg_loc : Location.t; extra_arg_loc : Location.t;
    }
  | Apply_wrong_label of Asttypes.arg_label * Types.type_expr * bool
  | Label_multiply_defined of string
  | Label_missing of Ident.t list
  | Label_not_mutable of Longident.t
  | Wrong_name of string * type_expected * wrong_name
  | Name_type_mismatch of Datatype_kind.t * Longident.t * (Path.t * Path.t) *
      (Path.t * Path.t) list
  | Invalid_format of string
  | Not_an_object of Types.type_expr * type_forcing_context option
  | Undefined_method of Types.type_expr * string * string list option
  | Undefined_self_method of string * string list
  | Virtual_class of Longident.t
  | Private_type of Types.type_expr
  | Private_label of Longident.t * Types.type_expr
  | Private_constructor of Types.constructor_description * Types.type_expr
  | Unbound_instance_variable of string * string list
  | Instance_variable_not_mutable of string
  | Not_subtype of Errortrace.Subtype.error
  | Outside_class
  | Value_multiply_overridden of string
  | Coercion_failure of Errortrace.expanded_type *
      Errortrace.unification_error * bool
  | Not_a_function of Types.type_expr * type_forcing_context option
  | Too_many_arguments of Types.type_expr * type_forcing_context option
  | Abstract_wrong_label of { got : Asttypes.arg_label;
      expected : Asttypes.arg_label; expected_type : Types.type_expr;
      explanation : type_forcing_context option;
    }
  | Scoping_let_module of string * Types.type_expr
  | Not_a_polymorphic_variant_type of Longident.t
  | Incoherent_label_order
  | Less_general of string * Errortrace.unification_error
  | Modules_not_allowed
  | Cannot_infer_signature
  | Not_a_packed_module of Types.type_expr
  | Unexpected_existential of existential_restriction * string * string list
  | Invalid_interval
  | Invalid_for_loop_index
  | No_value_clauses
  | Exception_pattern_disallowed
  | Mixed_value_and_exception_patterns_under_guard
  | Inlined_record_escape
  | Inlined_record_expected
  | Unrefuted_pattern of Typedtree.pattern
  | Invalid_extension_constructor_payload
  | Not_an_extension_constructor
  | Literal_overflow of string
  | Unknown_literal of string * char
  | Illegal_letrec_pat
  | Illegal_letrec_expr
  | Illegal_class_expr
  | Letop_type_clash of string * Errortrace.unification_error
  | Andop_type_clash of string * Errortrace.unification_error
  | Bindings_type_clash of Errortrace.unification_error
  | Unbound_existential of Ident.t list * Types.type_expr
  | Missing_type_constraint
  | Wrong_expected_kind of wrong_kind_sort * wrong_kind_context *
      Types.type_expr
  | Expr_not_a_record_type of Types.type_expr
exception Error of Location.t * Env.t * error
exception Error_forward of Location.error
val report_error : loc:Location.t -> Env.t -> error -> Location.error
val type_module :
  (Env.t -> Parsetree.module_expr -> Typedtree.module_expr * Shape.t) ref
val type_open :
  (?used_slot:bool ref ->
   Asttypes.override_flag ->
   Env.t -> Location.t -> Longident.t Asttypes.loc -> Path.t * Env.t)
  ref
val type_open_decl :
  (?used_slot:bool ref ->
   Env.t ->
   Parsetree.open_declaration ->
   Typedtree.open_declaration * Types.signature * Env.t)
  ref
val type_object :
  (Env.t ->
   Location.t ->
   Parsetree.class_structure -> Typedtree.class_structure * string list)
  ref
val type_package :
  (Env.t ->
   Parsetree.module_expr ->
   Path.t ->
   (Longident.t * Types.type_expr) list ->
   Typedtree.module_expr * (Longident.t * Types.type_expr) list)
  ref
val constant : Parsetree.constant -> (Asttypes.constant, error) result
val check_recursive_bindings : Env.t -> Typedtree.value_binding list -> unit
val check_recursive_class_bindings :
  ("DEBUG:rule", [Tag1 (("type_forcing_context", 1104), (0, 0, Tag1 ([(("If_conditional", 389), (0), 0, (("typing/typecore.mli", 30, 1592, 1594), ("typing/typecore.mli", 30, 1592, 1610), 0), 0, Tag1 ("Typecore", 2)); (("If_no_else_branch", 390), (0), 0, (("typing/typecore.mli", 31, 1611, 1613), ("typing/typecore.mli", 31, 1611, 1632), 0), 0, Tag1 ("Typecore", 3)); (("While_loop_conditional", 391), (0), 0, (("typing/typecore.mli", 32, 1633, 1635), ("typing/typecore.mli", 32, 1633, 1659), 0), 0, Tag1 ("Typecore", 4)); (("While_loop_body", 392), (0), 0, (("typing/typecore.mli", 33, 1660, 1662), ("typing/typecore.mli", 33, 1660, 1679), 0), 0, Tag1 ("Typecore", 5)); (("For_loop_start_index", 393), (0), 0, (("typing/typecore.mli", 34, 1680, 1682), ("typing/typecore.mli", 34, 1680, 1704), 0), 0, Tag1 ("Typecore", 6)); (("For_loop_stop_index", 394), (0), 0, (("typing/typecore.mli", 35, 1705, 1707), ("typing/typecore.mli", 35, 1705, 1728), 0), 0, Tag1 ("Typecore", 7)); (("For_loop_body", 395), (0), 0, (("typing/typecore.mli", 36, 1729, 1731), ("typing/typecore.mli", 36, 1729, 1746), 0), 0, Tag1 ("Typecore", 8)); (("Assert_condition", 396), (0), 0, (("typing/typecore.mli", 37, 1747, 1749), ("typing/typecore.mli", 37, 1747, 1767), 0), 0, Tag1 ("Typecore", 9)); (("Sequence_left_hand_side", 397), (0), 0, (("typing/typecore.mli", 38, 1768, 1770), ("typing/typecore.mli", 38, 1768, 1795), 0), 0, Tag1 ("Typecore", 10)); (("When_guard", 398), (0), 0, (("typing/typecore.mli", 39, 1796, 1798), ("typing/typecore.mli", 39, 1796, 1810), 0), 0, Tag1 ("Typecore", 11))], 0), 1, 0, 0, 0, 0, 0, (("typing/typecore.mli", 29, 1564, 1564), ("typing/typecore.mli", 39, 1796, 1810), 0), 0, 1, 0, Tag1 ("Typecore", 1)), 1, 0); Tag1 (("type_expected", 1105), (0, 0, [[(("ty", 400), 0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -385), (("typing/typecore.mli", 47, 2149, 2151), ("typing/typecore.mli", 47, 2149, 2165), 0), 0, Tag1 ("Typecore", 13)); (("explanation", 401), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("type_forcing_context", 1104)), 0, (0)), 100000000, 0, -387)], (0)), 100000000, 0, -386), (("typing/typecore.mli", 48, 2166, 2168), ("typing/typecore.mli", 48, 2166, 2209), 0), 0, Tag1 ("Typecore", 14))]], 0, 0, 0, 0, 0, 0, (("typing/typecore.mli", 46, 2118, 2118), ("typing/typecore.mli", 49, 2210, 2211), 0), 0, 0, 0, Tag1 ("Typecore", 12)), 1, 0); Tag1 (("pattern_variable", 1106), (0, 0, [[(("pv_id", 442), 0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -380), (("typing/typecore.mli", 54, 2269, 2273), ("typing/typecore.mli", 54, 2269, 2288), 0), 0, Tag1 ("Typecore", 19)); (("pv_type", 443), 0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -381), (("typing/typecore.mli", 55, 2289, 2293), ("typing/typecore.mli", 55, 2289, 2312), 0), 0, Tag1 ("Typecore", 20)); (("pv_loc", 510), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -382), (("typing/typecore.mli", 56, 2313, 2317), ("typing/typecore.mli", 56, 2313, 2336), 0), 0, Tag1 ("Typecore", 21)); (("pv_as_var", 511), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -383), (("typing/typecore.mli", 57, 2337, 2341), ("typing/typecore.mli", 57, 2337, 2357), 0), 0, Tag1 ("Typecore", 22)); (("pv_attributes", 611), 0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "attributes"), 0, (0)), 100000000, 0, -384), (("typing/typecore.mli", 58, 2358, 2362), ("typing/typecore.mli", 58, 2358, 2398), 0), 0, Tag1 ("Typecore", 23))]], 1, 0, 0, 0, 0, 0, (("typing/typecore.mli", 52, 2241, 2241), ("typing/typecore.mli", 59, 2399, 2402), 0), 0, 0, 0, Tag1 ("Typecore", 15)), 1, 0); (("mk_expected", 1107), ((Tag1 (Tag1 ("explanation"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("type_forcing_context", 1104)), 0, (0)), 100000000, 0, -379)], (0)), 100000000, 0, -378), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -377), (Tag3 ((("type_expected", 1105)), 0, (0)), 100000000, 0, -376), 0), 100000000, 0, -375), 0), 100000000, 0, -374), 0, (("typing/typecore.mli", 61, 2404, 2404), ("typing/typecore.mli", 64, 2475, 2490), 0), 0, Tag1 ("Typecore", 26)), 0); (("is_nonexpansive", 1108), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "expression"), 0, (0)), 100000000, 0, -373), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -372), 0), 100000000, 0, -371), 0, (("typing/typecore.mli", 66, 2492, 2492), ("typing/typecore.mli", 66, 2492, 2541), 0), 0, Tag1 ("Typecore", 27)), 0); Tag3 (("Datatype_kind", 1109), 0, (Tag1 ([Tag1 (("t", 1147), (0, 0, Tag1 ([(("Record", 715), (0), 0, (("typing/typecore.mli", 69, 2570, 2581), ("typing/typecore.mli", 69, 2570, 2587), 0), 0, Tag1 ("Typecore", 29)); (("Variant", 716), (0), 0, (("typing/typecore.mli", 69, 2570, 2588), ("typing/typecore.mli", 69, 2570, 2597), 0), 0, Tag1 ("Typecore", 30))], 0), 1, 0, 0, 0, 0, 0, (("typing/typecore.mli", 69, 2570, 2572), ("typing/typecore.mli", 69, 2570, 2597), 0), 0, 1, 0, Tag1 ("Typecore", 28)), 1, 0); (("type_name", 1148), ((Tag1 (0, (Tag3 ((("t", 1147)), 0, (0)), 100000000, 0, -393), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -392), 0), 100000000, 0, -391), 0, (("typing/typecore.mli", 70, 2598, 2600), ("typing/typecore.mli", 70, 2598, 2627), 0), 0, Tag1 ("Typecore", 31)), 0); (("label_name", 1149), ((Tag1 (0, (Tag3 ((("t", 1147)), 0, (0)), 100000000, 0, -390), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -389), 0), 100000000, 0, -388), 0, (("typing/typecore.mli", 71, 2628, 2630), ("typing/typecore.mli", 71, 2628, 2658), 0), 0, Tag1 ("Typecore", 32)), 0)]), 0, (("typing/typecore.mli", 68, 2543, 2543), ("typing/typecore.mli", 72, 2659, 2662), 0), Tag1 ("Typecore", 33)), 0, 0); Tag1 (("wrong_name", 1110), (0, 0, [[(("type_path", 738), 0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -365), (("typing/typecore.mli", 75, 2684, 2686), ("typing/typecore.mli", 75, 2684, 2704), 0), 0, Tag1 ("Typecore", 35)); (("kind", 739), 0, (Tag3 (Tag1 ((("Datatype_kind", 1109)), "t"), 0, (0)), 100000000, 0, -366), (("typing/typecore.mli", 76, 2705, 2707), ("typing/typecore.mli", 76, 2705, 2729), 0), 0, Tag1 ("Typecore", 36)); (("name", 740), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -368)], (0)), 100000000, 0, -367), (("typing/typecore.mli", 77, 2730, 2732), ("typing/typecore.mli", 77, 2730, 2749), 0), 0, Tag1 ("Typecore", 37)); (("valid_names", 741), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -370)], (0)), 100000000, 0, -369), (("typing/typecore.mli", 78, 2750, 2752), ("typing/typecore.mli", 78, 2750, 2777), 0), 0, Tag1 ("Typecore", 38))]], 1, 0, 0, 0, 0, 0, (("typing/typecore.mli", 74, 2664, 2664), ("typing/typecore.mli", 79, 2778, 2779), 0), 0, 0, 0, Tag1 ("Typecore", 34)), 1, 0); Tag1 (("wrong_kind_context", 1111), (0, 0, Tag1 ([(("Pattern", 743), (0), 0, (("typing/typecore.mli", 82, 2807, 2809), ("typing/typecore.mli", 82, 2807, 2818), 0), 0, Tag1 ("Typecore", 40)); (("Expression", 744), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("type_forcing_context", 1104)), 0, (0)), 100000000, 0, -364)], (0)), 100000000, 0, -363)]), 0, (("typing/typecore.mli", 83, 2819, 2821), ("typing/typecore.mli", 83, 2819, 2864), 0), 0, Tag1 ("Typecore", 41))], 0), 1, 0, 0, 0, 0, 0, (("typing/typecore.mli", 81, 2781, 2781), ("typing/typecore.mli", 83, 2819, 2864), 0), 0, 0, 0, Tag1 ("Typecore", 39)), 1, 0); Tag1 (("wrong_kind_sort", 1112), (0, 0, Tag1 ([(("Constructor", 746), (0), 0, (("typing/typecore.mli", 86, 2889, 2891), ("typing/typecore.mli", 86, 2889, 2904), 0), 0, Tag1 ("Typecore", 43)); (("Record", 747), (0), 0, (("typing/typecore.mli", 87, 2905, 2907), ("typing/typecore.mli", 87, 2905, 2915), 0), 0, Tag1 ("Typecore", 44)); (("Boolean", 748), (0), 0, (("typing/typecore.mli", 88, 2916, 2918), ("typing/typecore.mli", 88, 2916, 2927), 0), 0, Tag1 ("Typecore", 45)); (("List", 749), (0), 0, (("typing/typecore.mli", 89, 2928, 2930), ("typing/typecore.mli", 89, 2928, 2936), 0), 0, Tag1 ("Typecore", 46)); (("Unit", 750), (0), 0, (("typing/typecore.mli", 90, 2937, 2939), ("typing/typecore.mli", 90, 2937, 2945), 0), 0, Tag1 ("Typecore", 47))], 0), 1, 0, 0, 0, 0, 0, (("typing/typecore.mli", 85, 2866, 2866), ("typing/typecore.mli", 90, 2937, 2945), 0), 0, 1, 0, Tag1 ("Typecore", 42)), 1, 0); Tag1 (("existential_restriction", 1113), (0, 0, Tag1 ([(("At_toplevel", 752), (0), 0, (("typing/typecore.mli", 93, 2978, 2980), ("typing/typecore.mli", 93, 2978, 2993), 0), 0, Tag1 ("Typecore", 49)); (("In_group", 753), (0), 0, (("typing/typecore.mli", 94, 3038, 3040), ("typing/typecore.mli", 94, 3038, 3050), 0), 0, Tag1 ("Typecore", 50)); (("In_rec", 754), (0), 0, (("typing/typecore.mli", 95, 3085, 3087), ("typing/typecore.mli", 95, 3085, 3095), 0), 0, Tag1 ("Typecore", 51)); (("With_attributes", 755), (0), 0, (("typing/typecore.mli", 96, 3127, 3129), ("typing/typecore.mli", 96, 3127, 3146), 0), 0, Tag1 ("Typecore", 52)); (("In_class_args", 756), (0), 0, (("typing/typecore.mli", 97, 3185, 3187), ("typing/typecore.mli", 97, 3185, 3202), 0), 0, Tag1 ("Typecore", 53)); (("In_class_def", 757), (0), 0, (("typing/typecore.mli", 98, 3254, 3256), ("typing/typecore.mli", 98, 3254, 3270), 0), 0, Tag1 ("Typecore", 54)); (("In_self_pattern", 758), (0), 0, (("typing/typecore.mli", 99, 3311, 3313), ("typing/typecore.mli", 99, 3311, 3330), 0), 0, Tag1 ("Typecore", 55))], 0), 1, 0, 0, 0, 0, 0, (("typing/typecore.mli", 92, 2947, 2947), ("typing/typecore.mli", 99, 3311, 3330), 0), 0, 1, 0, Tag1 ("Typecore", 48)), 1, 0); Tag1 (("module_patterns_restriction", 1114), (0, 0, Tag1 ([(("Modules_allowed", 760), Tag1 ([(("scope", 761), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -362), (("typing/typecore.mli", 102, 3393, 3418), ("typing/typecore.mli", 102, 3393, 3429), 0), 0, Tag1 ("Typecore", 57))]), 0, (("typing/typecore.mli", 102, 3393, 3395), ("typing/typecore.mli", 102, 3393, 3431), 0), 0, Tag1 ("Typecore", 58)); (("Modules_rejected", 762), (0), 0, (("typing/typecore.mli", 103, 3432, 3434), ("typing/typecore.mli", 103, 3432, 3452), 0), 0, Tag1 ("Typecore", 59))], 0), 1, 0, 0, 0, 0, 0, (("typing/typecore.mli", 101, 3358, 3358), ("typing/typecore.mli", 103, 3432, 3452), 0), 0, 0, 0, Tag1 ("Typecore", 56)), 1, 0); (("type_binding", 1115), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -361), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "rec_flag"), 0, (0)), 100000000, 0, -360), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Parsetree")), "value_binding"), 0, (0)), 100000000, 0, -359)], (0)), 100000000, 0, -358), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "value_binding"), 0, (0)), 100000000, 0, -356)], (0)), 100000000, 0, -355); (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -357)]), 100000000, 0, -354), 0), 100000000, 0, -353), 0), 100000000, 0, -352), 0), 100000000, 0, -351), 0, (("typing/typecore.mli", 105, 3454, 3454), ("typing/typecore.mli", 108, 3543, 3589), 0), 0, Tag1 ("Typecore", 65)), 0); (("type_let", 1116), ((Tag1 (0, (Tag3 ((("existential_restriction", 1113)), 0, (0)), 100000000, 0, -350), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -349), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "rec_flag"), 0, (0)), 100000000, 0, -348), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Parsetree")), "value_binding"), 0, (0)), 100000000, 0, -347)], (0)), 100000000, 0, -346), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "value_binding"), 0, (0)), 100000000, 0, -344)], (0)), 100000000, 0, -343); (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -345)]), 100000000, 0, -342), 0), 100000000, 0, -341), 0), 100000000, 0, -340), 0), 100000000, 0, -339), 0), 100000000, 0, -338), 0, (("typing/typecore.mli", 109, 3590, 3590), ("typing/typecore.mli", 112, 3702, 3748), 0), 0, Tag1 ("Typecore", 66)), 0); (("type_expression", 1117), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -337), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "expression"), 0, (0)), 100000000, 0, -336), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "expression"), 0, (0)), 100000000, 0, -335), 0), 100000000, 0, -334), 0), 100000000, 0, -333), 0, (("typing/typecore.mli", 113, 3749, 3749), ("typing/typecore.mli", 114, 3770, 3831), 0), 0, Tag1 ("Typecore", 67)), 0); (("type_class_arg_pattern", 1118), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -332), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -331), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -330), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "arg_label"), 0, (0)), 100000000, 0, -329), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "pattern"), 0, (0)), 100000000, 0, -328), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -320); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -323); (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -324); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -325)]), 100000000, 0, -322)], (0)), 100000000, 0, -321); (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -326); (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -327)]), 100000000, 0, -319), 0), 100000000, 0, -318), 0), 100000000, 0, -317), 0), 100000000, 0, -316), 0), 100000000, 0, -315), 0), 100000000, 0, -314), 0, (("typing/typecore.mli", 115, 3832, 3832), ("typing/typecore.mli", 119, 4005, 4026), 0), 0, Tag1 ("Typecore", 68)), 0); (("type_self_pattern", 1119), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -313), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "pattern"), 0, (0)), 100000000, 0, -312), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -309); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("pattern_variable", 1106)), 0, (0)), 100000000, 0, -311)], (0)), 100000000, 0, -310)]), 100000000, 0, -308), 0), 100000000, 0, -307), 0), 100000000, 0, -306), 0, (("typing/typecore.mli", 120, 4027, 4027), ("typing/typecore.mli", 122, 4088, 4137), 0), 0, Tag1 ("Typecore", 69)), 0); (("check_partial", 1120), ((Tag1 (Tag1 ("lev"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -305)], (0)), 100000000, 0, -304), (Tag1 (0, (Tag3 ((("module_patterns_restriction", 1114)), 0, (0)), 100000000, 0, -303), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -302), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -301), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -300), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "case"), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "value"), 0, (0)), 100000000, 0, -299)], (0)), 100000000, 0, -298)], (0)), 100000000, 0, -297), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "partial"), 0, (0)), 100000000, 0, -296), 0), 100000000, 0, -295), 0), 100000000, 0, -294), 0), 100000000, 0, -293), 0), 100000000, 0, -292), 0), 100000000, 0, -291), 0), 100000000, 0, -290), 0, (("typing/typecore.mli", 123, 4138, 4138), ("typing/typecore.mli", 125, 4230, 4308), 0), 0, Tag1 ("Typecore", 70)), 0); (("type_expect", 1121), ((Tag1 (Tag1 ("in_function"), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -288); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -289)]), 100000000, 0, -287)], (0)), 100000000, 0, -286), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -285), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "expression"), 0, (0)), 100000000, 0, -284), (Tag1 (0, (Tag3 ((("type_expected", 1105)), 0, (0)), 100000000, 0, -283), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "expression"), 0, (0)), 100000000, 0, -282), 0), 100000000, 0, -281), 0), 100000000, 0, -280), 0), 100000000, 0, -279), 0), 100000000, 0, -278), 0, (("typing/typecore.mli", 126, 4309, 4309), ("typing/typecore.mli", 128, 4375, 4453), 0), 0, Tag1 ("Typecore", 71)), 0); (("type_exp", 1122), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -277), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "expression"), 0, (0)), 100000000, 0, -276), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "expression"), 0, (0)), 100000000, 0, -275), 0), 100000000, 0, -274), 0), 100000000, 0, -273), 0, (("typing/typecore.mli", 129, 4454, 4454), ("typing/typecore.mli", 130, 4468, 4529), 0), 0, Tag1 ("Typecore", 72)), 0); (("type_approx", 1123), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -272), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "expression"), 0, (0)), 100000000, 0, -271), (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -270), 0), 100000000, 0, -269), 0), 100000000, 0, -268), 0, (("typing/typecore.mli", 131, 4530, 4530), ("typing/typecore.mli", 132, 4547, 4597), 0), 0, Tag1 ("Typecore", 73)), 0); (("type_argument", 1124), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -267), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "expression"), 0, (0)), 100000000, 0, -266), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -265), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -264), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "expression"), 0, (0)), 100000000, 0, -263), 0), 100000000, 0, -262), 0), 100000000, 0, -261), 0), 100000000, 0, -260), 0), 100000000, 0, -259), 0, (("typing/typecore.mli", 133, 4598, 4598), ("typing/typecore.mli", 135, 4658, 4712), 0), 0, Tag1 ("Typecore", 74)), 0); (("option_some", 1125), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -258), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "expression"), 0, (0)), 100000000, 0, -257), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "expression"), 0, (0)), 100000000, 0, -256), 0), 100000000, 0, -255), 0), 100000000, 0, -254), 0, (("typing/typecore.mli", 137, 4714, 4714), ("typing/typecore.mli", 137, 4714, 4784), 0), 0, Tag1 ("Typecore", 75)), 0); (("option_none", 1126), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -253), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -252), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -251), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "expression"), 0, (0)), 100000000, 0, -250), 0), 100000000, 0, -249), 0), 100000000, 0, -248), 0), 100000000, 0, -247), 0, (("typing/typecore.mli", 138, 4785, 4785), ("typing/typecore.mli", 138, 4785, 4858), 0), 0, Tag1 ("Typecore", 76)), 0); (("extract_option_type", 1127), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -246), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -245), (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -244), 0), 100000000, 0, -243), 0), 100000000, 0, -242), 0, (("typing/typecore.mli", 139, 4859, 4859), ("typing/typecore.mli", 139, 4859, 4915), 0), 0, Tag1 ("Typecore", 77)), 0); (("generalizable", 1128), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -241), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -240), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -239), 0), 100000000, 0, -238), 0), 100000000, 0, -237), 0, (("typing/typecore.mli", 140, 4916, 4916), ("typing/typecore.mli", 140, 4916, 4959), 0), 0, Tag1 ("Typecore", 78)), 0); (("generalize_structure_exp", 1129), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "expression"), 0, (0)), 100000000, 0, -236), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -235), 0), 100000000, 0, -234), 0, (("typing/typecore.mli", 141, 4960, 4960), ("typing/typecore.mli", 141, 4960, 5018), 0), 0, Tag1 ("Typecore", 79)), 0); (("reset_delayed_checks", 1130), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -233), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -232), 0), 100000000, 0, -231), 0, (("typing/typecore.mli", 142, 5019, 5019), ("typing/typecore.mli", 142, 5019, 5057), 0), 0, Tag1 ("Typecore", 80)), 0); (("force_delayed_checks", 1131), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -230), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -229), 0), 100000000, 0, -228), 0, (("typing/typecore.mli", 143, 5058, 5058), ("typing/typecore.mli", 143, 5058, 5096), 0), 0, Tag1 ("Typecore", 81)), 0); (("name_pattern", 1132), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -227), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -226)], (0)), 100000000, 0, -225), (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -224), 0), 100000000, 0, -223), 0), 100000000, 0, -222), 0, (("typing/typecore.mli", 145, 5098, 5098), ("typing/typecore.mli", 145, 5098, 5160), 0), 0, Tag1 ("Typecore", 82)), 0); (("name_cases", 1133), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -221), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "case"), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "value"), 0, (0)), 100000000, 0, -220)], (0)), 100000000, 0, -219)], (0)), 100000000, 0, -218), (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -217), 0), 100000000, 0, -216), 0), 100000000, 0, -215), 0, (("typing/typecore.mli", 146, 5161, 5161), ("typing/typecore.mli", 146, 5161, 5234), 0), 0, Tag1 ("Typecore", 83)), 0); (("self_coercion", 1134), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -211); (Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -214)], (0)), 100000000, 0, -213)], (0)), 100000000, 0, -212)]), 100000000, 0, -210)], (0)), 100000000, 0, -209)], (0)), 100000000, 0, -208), 0, (("typing/typecore.mli", 148, 5236, 5236), ("typing/typecore.mli", 148, 5236, 5295), 0), 0, Tag1 ("Typecore", 84)), 0); Tag1 (("error", 1135), (0, 0, Tag1 ([(("Constructor_arity_mismatch", 952), ([(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -100); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -101); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -102)]), 0, (("typing/typecore.mli", 151, 5310, 5312), ("typing/typecore.mli", 151, 5310, 5367), 0), 0, Tag1 ("Typecore", 86)); (("Label_mismatch", 958), ([(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -103); (Tag3 (Tag1 ((Tag2 ("Errortrace")), "unification_error"), 0, (0)), 100000000, 0, -104)]), 0, (("typing/typecore.mli", 152, 5368, 5370), ("typing/typecore.mli", 152, 5368, 5432), 0), 0, Tag1 ("Typecore", 88)); (("Pattern_type_clash", 991), ([(Tag3 (Tag1 ((Tag2 ("Errortrace")), "unification_error"), 0, (0)), 100000000, 0, -106); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Parsetree")), "pattern_desc"), 0, (0)), 100000000, 0, -108)], (0)), 100000000, 0, -107)]), ((Tag3 ((("error", 1135)), 0, (0)), 100000000, 0, -105)), (("typing/typecore.mli", 153, 5433, 5435), ("typing/typecore.mli", 155, 5525, 5539), 0), 0, Tag1 ("Typecore", 89)); (("Or_pattern_type_clash", 992), ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -109); (Tag3 (Tag1 ((Tag2 ("Errortrace")), "unification_error"), 0, (0)), 100000000, 0, -110)]), 0, (("typing/typecore.mli", 156, 5540, 5542), ("typing/typecore.mli", 156, 5540, 5607), 0), 0, Tag1 ("Typecore", 90)); (("Multiply_bound_variable", 993), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -111)]), 0, (("typing/typecore.mli", 157, 5608, 5610), ("typing/typecore.mli", 157, 5608, 5645), 0), 0, Tag1 ("Typecore", 91)); (("Orpat_vars", 994), ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -112); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -114)], (0)), 100000000, 0, -113)]), 0, (("typing/typecore.mli", 158, 5646, 5648), ("typing/typecore.mli", 158, 5646, 5686), 0), 0, Tag1 ("Typecore", 92)); (("Expr_type_clash", 995), ([(Tag3 (Tag1 ((Tag2 ("Errortrace")), "unification_error"), 0, (0)), 100000000, 0, -115); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("type_forcing_context", 1104)), 0, (0)), 100000000, 0, -117)], (0)), 100000000, 0, -116); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Parsetree")), "expression_desc"), 0, (0)), 100000000, 0, -119)], (0)), 100000000, 0, -118)]), 0, (("typing/typecore.mli", 159, 5687, 5689), ("typing/typecore.mli", 161, 5775, 5815), 0), 0, Tag1 ("Typecore", 93)); (("Apply_non_function", 996), Tag1 ([(("funct", 997), 0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "expression"), 0, (0)), 100000000, 0, -120), (("typing/typecore.mli", 163, 5844, 5850), ("typing/typecore.mli", 163, 5844, 5879), 0), 0, Tag1 ("Typecore", 94)); (("func_ty", 998), 0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -121), (("typing/typecore.mli", 164, 5880, 5886), ("typing/typecore.mli", 164, 5880, 5906), 0), 0, Tag1 ("Typecore", 95)); (("res_ty", 999), 0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -122), (("typing/typecore.mli", 165, 5907, 5913), ("typing/typecore.mli", 165, 5907, 5932), 0), 0, Tag1 ("Typecore", 96)); (("previous_arg_loc", 1000), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -123), (("typing/typecore.mli", 166, 5933, 5939), ("typing/typecore.mli", 166, 5933, 5969), 0), 0, Tag1 ("Typecore", 97)); (("extra_arg_loc", 1001), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -124), (("typing/typecore.mli", 167, 5970, 5976), ("typing/typecore.mli", 167, 5970, 6003), 0), 0, Tag1 ("Typecore", 98))]), 0, (("typing/typecore.mli", 162, 5816, 5818), ("typing/typecore.mli", 168, 6004, 6009), 0), 0, Tag1 ("Typecore", 99)); (("Apply_wrong_label", 1002), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "arg_label"), 0, (0)), 100000000, 0, -125); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -126); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -127)]), 0, (("typing/typecore.mli", 169, 6010, 6012), ("typing/typecore.mli", 169, 6010, 6063), 0), 0, Tag1 ("Typecore", 100)); (("Label_multiply_defined", 1003), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -128)]), 0, (("typing/typecore.mli", 170, 6064, 6066), ("typing/typecore.mli", 170, 6064, 6100), 0), 0, Tag1 ("Typecore", 101)); (("Label_missing", 1004), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -130)], (0)), 100000000, 0, -129)]), 0, (("typing/typecore.mli", 171, 6101, 6103), ("typing/typecore.mli", 171, 6101, 6134), 0), 0, Tag1 ("Typecore", 102)); (("Label_not_mutable", 1005), ([(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -131)]), 0, (("typing/typecore.mli", 172, 6135, 6137), ("typing/typecore.mli", 172, 6135, 6171), 0), 0, Tag1 ("Typecore", 103)); (("Wrong_name", 1006), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -132); (Tag3 ((("type_expected", 1105)), 0, (0)), 100000000, 0, -133); (Tag3 ((("wrong_name", 1110)), 0, (0)), 100000000, 0, -134)]), 0, (("typing/typecore.mli", 173, 6172, 6174), ("typing/typecore.mli", 173, 6172, 6225), 0), 0, Tag1 ("Typecore", 104)); (("Name_type_mismatch", 1007), ([(Tag3 (Tag1 ((("Datatype_kind", 1109)), "t"), 0, (0)), 100000000, 0, -135); (Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -136); (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -138); (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -139)]), 100000000, 0, -137); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -142); (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -143)]), 100000000, 0, -141)], (0)), 100000000, 0, -140)]), 0, (("typing/typecore.mli", 174, 6226, 6228), ("typing/typecore.mli", 175, 6252, 6332), 0), 0, Tag1 ("Typecore", 105)); (("Invalid_format", 1008), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -144)]), 0, (("typing/typecore.mli", 176, 6333, 6335), ("typing/typecore.mli", 176, 6333, 6361), 0), 0, Tag1 ("Typecore", 106)); (("Not_an_object", 1009), ([(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -145); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("type_forcing_context", 1104)), 0, (0)), 100000000, 0, -147)], (0)), 100000000, 0, -146)]), 0, (("typing/typecore.mli", 177, 6362, 6364), ("typing/typecore.mli", 177, 6362, 6422), 0), 0, Tag1 ("Typecore", 107)); (("Undefined_method", 1010), ([(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -148); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -149); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -152)], (0)), 100000000, 0, -151)], (0)), 100000000, 0, -150)]), 0, (("typing/typecore.mli", 178, 6423, 6425), ("typing/typecore.mli", 178, 6423, 6486), 0), 0, Tag1 ("Typecore", 108)); (("Undefined_self_method", 1011), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -153); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -155)], (0)), 100000000, 0, -154)]), 0, (("typing/typecore.mli", 179, 6487, 6489), ("typing/typecore.mli", 179, 6487, 6536), 0), 0, Tag1 ("Typecore", 109)); (("Virtual_class", 1012), ([(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -156)]), 0, (("typing/typecore.mli", 180, 6537, 6539), ("typing/typecore.mli", 180, 6537, 6569), 0), 0, Tag1 ("Typecore", 110)); (("Private_type", 1013), ([(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -157)]), 0, (("typing/typecore.mli", 181, 6570, 6572), ("typing/typecore.mli", 181, 6570, 6599), 0), 0, Tag1 ("Typecore", 111)); (("Private_label", 1014), ([(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -158); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -159)]), 0, (("typing/typecore.mli", 182, 6600, 6602), ("typing/typecore.mli", 182, 6600, 6644), 0), 0, Tag1 ("Typecore", 112)); (("Private_constructor", 1015), ([(Tag3 (Tag1 ((Tag2 ("Types")), "constructor_description"), 0, (0)), 100000000, 0, -160); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -161)]), 0, (("typing/typecore.mli", 183, 6645, 6647), ("typing/typecore.mli", 183, 6645, 6707), 0), 0, Tag1 ("Typecore", 113)); (("Unbound_instance_variable", 1016), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -162); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -164)], (0)), 100000000, 0, -163)]), 0, (("typing/typecore.mli", 184, 6708, 6710), ("typing/typecore.mli", 184, 6708, 6761), 0), 0, Tag1 ("Typecore", 114)); (("Instance_variable_not_mutable", 1017), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -165)]), 0, (("typing/typecore.mli", 185, 6762, 6764), ("typing/typecore.mli", 185, 6762, 6805), 0), 0, Tag1 ("Typecore", 115)); (("Not_subtype", 1018), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Errortrace")), "Subtype"), "error"), 0, (0)), 100000000, 0, -166)]), 0, (("typing/typecore.mli", 186, 6806, 6808), ("typing/typecore.mli", 186, 6806, 6849), 0), 0, Tag1 ("Typecore", 116)); (("Outside_class", 1027), (0), 0, (("typing/typecore.mli", 187, 6850, 6852), ("typing/typecore.mli", 187, 6850, 6867), 0), 0, Tag1 ("Typecore", 117)); (("Value_multiply_overridden", 1028), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -167)]), 0, (("typing/typecore.mli", 188, 6868, 6870), ("typing/typecore.mli", 188, 6868, 6907), 0), 0, Tag1 ("Typecore", 118)); (("Coercion_failure", 1029), ([(Tag3 (Tag1 ((Tag2 ("Errortrace")), "expanded_type"), 0, (0)), 100000000, 0, -168); (Tag3 (Tag1 ((Tag2 ("Errortrace")), "unification_error"), 0, (0)), 100000000, 0, -169); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -170)]), 0, (("typing/typecore.mli", 189, 6908, 6910), ("typing/typecore.mli", 190, 6932, 7000), 0), 0, Tag1 ("Typecore", 119)); (("Not_a_function", 1030), ([(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -171); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("type_forcing_context", 1104)), 0, (0)), 100000000, 0, -173)], (0)), 100000000, 0, -172)]), 0, (("typing/typecore.mli", 191, 7001, 7003), ("typing/typecore.mli", 191, 7001, 7062), 0), 0, Tag1 ("Typecore", 120)); (("Too_many_arguments", 1031), ([(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -174); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("type_forcing_context", 1104)), 0, (0)), 100000000, 0, -176)], (0)), 100000000, 0, -175)]), 0, (("typing/typecore.mli", 192, 7063, 7065), ("typing/typecore.mli", 192, 7063, 7128), 0), 0, Tag1 ("Typecore", 121)); (("Abstract_wrong_label", 1032), Tag1 ([(("got", 1033), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "arg_label"), 0, (0)), 100000000, 0, -177), (("typing/typecore.mli", 194, 7157, 7165), ("typing/typecore.mli", 195, 7191, 7198), 0), 0, Tag1 ("Typecore", 122)); (("expected", 1034), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "arg_label"), 0, (0)), 100000000, 0, -178), (("typing/typecore.mli", 195, 7191, 7199), ("typing/typecore.mli", 196, 7225, 7232), 0), 0, Tag1 ("Typecore", 123)); (("expected_type", 1035), 0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -179), (("typing/typecore.mli", 196, 7225, 7233), ("typing/typecore.mli", 197, 7259, 7266), 0), 0, Tag1 ("Typecore", 124)); (("explanation", 1036), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("type_forcing_context", 1104)), 0, (0)), 100000000, 0, -181)], (0)), 100000000, 0, -180), (("typing/typecore.mli", 197, 7259, 7267), ("typing/typecore.mli", 197, 7259, 7310), 0), 0, Tag1 ("Typecore", 125))]), 0, (("typing/typecore.mli", 193, 7129, 7131), ("typing/typecore.mli", 198, 7311, 7318), 0), 0, Tag1 ("Typecore", 126)); (("Scoping_let_module", 1037), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -182); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -183)]), 0, (("typing/typecore.mli", 199, 7319, 7321), ("typing/typecore.mli", 199, 7319, 7363), 0), 0, Tag1 ("Typecore", 127)); (("Not_a_polymorphic_variant_type", 1038), ([(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -184)]), 0, (("typing/typecore.mli", 200, 7364, 7366), ("typing/typecore.mli", 200, 7364, 7413), 0), 0, Tag1 ("Typecore", 128)); (("Incoherent_label_order", 1039), (0), 0, (("typing/typecore.mli", 201, 7414, 7416), ("typing/typecore.mli", 201, 7414, 7440), 0), 0, Tag1 ("Typecore", 129)); (("Less_general", 1040), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -185); (Tag3 (Tag1 ((Tag2 ("Errortrace")), "unification_error"), 0, (0)), 100000000, 0, -186)]), 0, (("typing/typecore.mli", 202, 7441, 7443), ("typing/typecore.mli", 202, 7441, 7498), 0), 0, Tag1 ("Typecore", 130)); (("Modules_not_allowed", 1041), (0), 0, (("typing/typecore.mli", 203, 7499, 7501), ("typing/typecore.mli", 203, 7499, 7522), 0), 0, Tag1 ("Typecore", 131)); (("Cannot_infer_signature", 1042), (0), 0, (("typing/typecore.mli", 204, 7523, 7525), ("typing/typecore.mli", 204, 7523, 7549), 0), 0, Tag1 ("Typecore", 132)); (("Not_a_packed_module", 1043), ([(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -187)]), 0, (("typing/typecore.mli", 205, 7550, 7552), ("typing/typecore.mli", 205, 7550, 7586), 0), 0, Tag1 ("Typecore", 133)); (("Unexpected_existential", 1044), ([(Tag3 ((("existential_restriction", 1113)), 0, (0)), 100000000, 0, -188); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -189); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -191)], (0)), 100000000, 0, -190)]), 0, (("typing/typecore.mli", 206, 7587, 7589), ("typing/typecore.mli", 206, 7587, 7663), 0), 0, Tag1 ("Typecore", 134)); (("Invalid_interval", 1045), (0), 0, (("typing/typecore.mli", 207, 7664, 7666), ("typing/typecore.mli", 207, 7664, 7684), 0), 0, Tag1 ("Typecore", 135)); (("Invalid_for_loop_index", 1046), (0), 0, (("typing/typecore.mli", 208, 7685, 7687), ("typing/typecore.mli", 208, 7685, 7711), 0), 0, Tag1 ("Typecore", 136)); (("No_value_clauses", 1047), (0), 0, (("typing/typecore.mli", 209, 7712, 7714), ("typing/typecore.mli", 209, 7712, 7732), 0), 0, Tag1 ("Typecore", 137)); (("Exception_pattern_disallowed", 1048), (0), 0, (("typing/typecore.mli", 210, 7733, 7735), ("typing/typecore.mli", 210, 7733, 7765), 0), 0, Tag1 ("Typecore", 138)); (("Mixed_value_and_exception_patterns_under_guard", 1049), (0), 0, (("typing/typecore.mli", 211, 7766, 7768), ("typing/typecore.mli", 211, 7766, 7816), 0), 0, Tag1 ("Typecore", 139)); (("Inlined_record_escape", 1050), (0), 0, (("typing/typecore.mli", 212, 7817, 7819), ("typing/typecore.mli", 212, 7817, 7842), 0), 0, Tag1 ("Typecore", 140)); (("Inlined_record_expected", 1051), (0), 0, (("typing/typecore.mli", 213, 7843, 7845), ("typing/typecore.mli", 213, 7843, 7870), 0), 0, Tag1 ("Typecore", 141)); (("Unrefuted_pattern", 1052), ([(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -192)]), 0, (("typing/typecore.mli", 214, 7871, 7873), ("typing/typecore.mli", 214, 7871, 7913), 0), 0, Tag1 ("Typecore", 142)); (("Invalid_extension_constructor_payload", 1053), (0), 0, (("typing/typecore.mli", 215, 7914, 7916), ("typing/typecore.mli", 215, 7914, 7955), 0), 0, Tag1 ("Typecore", 143)); (("Not_an_extension_constructor", 1054), (0), 0, (("typing/typecore.mli", 216, 7956, 7958), ("typing/typecore.mli", 216, 7956, 7988), 0), 0, Tag1 ("Typecore", 144)); (("Literal_overflow", 1055), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -193)]), 0, (("typing/typecore.mli", 217, 7989, 7991), ("typing/typecore.mli", 217, 7989, 8019), 0), 0, Tag1 ("Typecore", 145)); (("Unknown_literal", 1056), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -194); (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -195)]), 0, (("typing/typecore.mli", 218, 8020, 8022), ("typing/typecore.mli", 218, 8020, 8056), 0), 0, Tag1 ("Typecore", 146)); (("Illegal_letrec_pat", 1057), (0), 0, (("typing/typecore.mli", 219, 8057, 8059), ("typing/typecore.mli", 219, 8057, 8079), 0), 0, Tag1 ("Typecore", 147)); (("Illegal_letrec_expr", 1058), (0), 0, (("typing/typecore.mli", 220, 8080, 8082), ("typing/typecore.mli", 220, 8080, 8103), 0), 0, Tag1 ("Typecore", 148)); (("Illegal_class_expr", 1059), (0), 0, (("typing/typecore.mli", 221, 8104, 8106), ("typing/typecore.mli", 221, 8104, 8126), 0), 0, Tag1 ("Typecore", 149)); (("Letop_type_clash", 1060), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -196); (Tag3 (Tag1 ((Tag2 ("Errortrace")), "unification_error"), 0, (0)), 100000000, 0, -197)]), 0, (("typing/typecore.mli", 222, 8127, 8129), ("typing/typecore.mli", 222, 8127, 8188), 0), 0, Tag1 ("Typecore", 150)); (("Andop_type_clash", 1061), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -198); (Tag3 (Tag1 ((Tag2 ("Errortrace")), "unification_error"), 0, (0)), 100000000, 0, -199)]), 0, (("typing/typecore.mli", 223, 8189, 8191), ("typing/typecore.mli", 223, 8189, 8250), 0), 0, Tag1 ("Typecore", 151)); (("Bindings_type_clash", 1062), ([(Tag3 (Tag1 ((Tag2 ("Errortrace")), "unification_error"), 0, (0)), 100000000, 0, -200)]), 0, (("typing/typecore.mli", 224, 8251, 8253), ("typing/typecore.mli", 224, 8251, 8306), 0), 0, Tag1 ("Typecore", 152)); (("Unbound_existential", 1063), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -202)], (0)), 100000000, 0, -201); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -203)]), 0, (("typing/typecore.mli", 225, 8307, 8309), ("typing/typecore.mli", 225, 8307, 8358), 0), 0, Tag1 ("Typecore", 153)); (("Missing_type_constraint", 1064), (0), 0, (("typing/typecore.mli", 226, 8359, 8361), ("typing/typecore.mli", 226, 8359, 8386), 0), 0, Tag1 ("Typecore", 154)); (("Wrong_expected_kind", 1065), ([(Tag3 ((("wrong_kind_sort", 1112)), 0, (0)), 100000000, 0, -204); (Tag3 ((("wrong_kind_context", 1111)), 0, (0)), 100000000, 0, -205); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -206)]), 0, (("typing/typecore.mli", 227, 8387, 8389), ("typing/typecore.mli", 227, 8387, 8462), 0), 0, Tag1 ("Typecore", 155)); (("Expr_not_a_record_type", 1066), ([(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -207)]), 0, (("typing/typecore.mli", 228, 8463, 8465), ("typing/typecore.mli", 228, 8463, 8502), 0), 0, Tag1 ("Typecore", 156))], 0), 1, 0, 0, 0, 0, 0, (("typing/typecore.mli", 150, 5297, 5297), ("typing/typecore.mli", 228, 8463, 8502), 0), 0, 0, 0, Tag1 ("Typecore", 85)), 1, 0); Tag2 (("Error", 1136), ((Tag3 ("exn", 7)), 0, ([(Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -97); (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -98); (Tag3 ((("error", 1135)), 0, (0)), 100000000, 0, -99)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Typecore", 167)), 2, 0); Tag2 (("Error_forward", 1137), ((Tag3 ("exn", 7)), 0, ([(Tag3 (Tag1 ((Tag2 ("Location")), "error"), 0, (0)), 100000000, 0, -96)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Typecore", 168)), 2, 0); (("report_error", 1138), ((Tag1 (("loc"), (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -95), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -94), (Tag1 (0, (Tag3 ((("error", 1135)), 0, (0)), 100000000, 0, -93), (Tag3 (Tag1 ((Tag2 ("Location")), "error"), 0, (0)), 100000000, 0, -92), 0), 100000000, 0, -91), 0), 100000000, 0, -90), 0), 100000000, 0, -89), 0, (("typing/typecore.mli", 233, 8593, 8593), ("typing/typecore.mli", 233, 8593, 8661), 0), 0, Tag1 ("Typecore", 169)), 0); (("type_module", 1139), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -88), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "module_expr"), 0, (0)), 100000000, 0, -87), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_expr"), 0, (0)), 100000000, 0, -85); (Tag3 (Tag1 ((Tag2 ("Shape")), "t"), 0, (0)), 100000000, 0, -86)]), 100000000, 0, -84), 0), 100000000, 0, -83), 0), 100000000, 0, -82)], (0)), 100000000, 0, -81), 0, (("typing/typecore.mli", 237, 8807, 8807), ("typing/typecore.mli", 238, 8824, 8897), 0), 0, Tag1 ("Typecore", 170)), 0); (("type_open", 1140), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag1 (Tag1 ("used_slot"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -80)], (0)), 100000000, 0, -79)], (0)), 100000000, 0, -78), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "override_flag"), 0, (0)), 100000000, 0, -77), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -76), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -75), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -74)], (0)), 100000000, 0, -73), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -71); (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -72)]), 100000000, 0, -70), 0), 100000000, 0, -69), 0), 100000000, 0, -68), 0), 100000000, 0, -67), 0), 100000000, 0, -66), 0), 100000000, 0, -65)], (0)), 100000000, 0, -64), 0, (("typing/typecore.mli", 240, 8962, 8962), ("typing/typecore.mli", 243, 9081, 9088), 0), 0, Tag1 ("Typecore", 171)), 0); (("type_open_decl", 1141), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag1 (Tag1 ("used_slot"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -63)], (0)), 100000000, 0, -62)], (0)), 100000000, 0, -61), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -60), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "open_declaration"), 0, (0)), 100000000, 0, -59), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Typedtree")), "open_declaration"), 0, (0)), 100000000, 0, -56); (Tag3 (Tag1 ((Tag2 ("Types")), "signature"), 0, (0)), 100000000, 0, -57); (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -58)]), 100000000, 0, -55), 0), 100000000, 0, -54), 0), 100000000, 0, -53), 0), 100000000, 0, -52)], (0)), 100000000, 0, -51), 0, (("typing/typecore.mli", 245, 9158, 9158), ("typing/typecore.mli", 248, 9300, 9307), 0), 0, Tag1 ("Typecore", 172)), 0); (("type_object", 1142), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -50), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -49), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "class_structure"), 0, (0)), 100000000, 0, -48), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Typedtree")), "class_structure"), 0, (0)), 100000000, 0, -45); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -47)], (0)), 100000000, 0, -46)]), 100000000, 0, -44), 0), 100000000, 0, -43), 0), 100000000, 0, -42), 0), 100000000, 0, -41)], (0)), 100000000, 0, -40), 0, (("typing/typecore.mli", 250, 9380, 9380), ("typing/typecore.mli", 252, 9452, 9499), 0), 0, Tag1 ("Typecore", 173)), 0); (("type_package", 1143), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -39), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "module_expr"), 0, (0)), 100000000, 0, -38), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -37), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -35); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -36)]), 100000000, 0, -34)], (0)), 100000000, 0, -33), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_expr"), 0, (0)), 100000000, 0, -28); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -31); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -32)]), 100000000, 0, -30)], (0)), 100000000, 0, -29)]), 100000000, 0, -27), 0), 100000000, 0, -26), 0), 100000000, 0, -25), 0), 100000000, 0, -24), 0), 100000000, 0, -23)], (0)), 100000000, 0, -22), 0, (("typing/typecore.mli", 253, 9500, 9500), ("typing/typecore.mli", 255, 9599, 9660), 0), 0, Tag1 ("Typecore", 174)), 0); (("constant", 1144), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "constant"), 0, (0)), 100000000, 0, -21), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 (Tag1 ((Tag2 ("Asttypes")), "constant"), 0, (0)), 100000000, 0, -19); (Tag3 ((("error", 1135)), 0, (0)), 100000000, 0, -20)], (0)), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("typing/typecore.mli", 257, 9662, 9662), ("typing/typecore.mli", 257, 9662, 9731), 0), 0, Tag1 ("Typecore", 175)), 0); (("check_recursive_bindings", 1145), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -16), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "value_binding"), 0, (0)), 100000000, 0, -15)], (0)), 100000000, 0, -14), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -13), 0), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("typing/typecore.mli", 259, 9733, 9733), ("typing/typecore.mli", 259, 9733, 9809), 0), 0, Tag1 ("Typecore", 176)), 0); (("check_recursive_class_bindings", 1146), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -10), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -9)], (0)), 100000000, 0, -8), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "class_expr"), 0, (0)), 100000000, 0, -7)], (0)), 100000000, 0, -6), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("typing/typecore.mli", 260, 9810, 9810), ("typing/typecore.mli", 261, 9847, 9907), 0), 0, Tag1 ("Typecore", 177)), 0)], "Typecore", [("Typecore", ("\209\143\179\157#\245\227\177\2079h6\022\226\207\190")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Types", ("\177\238\029.\220\006\163!\230\015\006\182\133\155\194\166")); ("Typedtree", ("c5z\186\175w\146\254\018V\184\031\0038\004\227")); ("Type_immediacy", ("\"\127k\011Q\241\211\138\193;8\142\129\141#\251")); ("Subst", ("\021\031\148\223\127\186\189\135\027}\145r\216\143\177\156")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shape", ("\235\127Y\213\025\137=\244\218\181\248N\189\188\216p")); ("Primitive", ("}Shh\162\015|\220A\203\249\232\245G\213\019")); ("Path", ("\012\183\178\025\1298\228*\021r\185\160Y\252\n\026")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Outcometree", ("9\021%\234\211\206\210\004H\165\208\2014\234Q\142")); ("Misc", ("*\026\026\234c\191\131\161\\\203\183\012O\252\153\198")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Load_path", ("\012@\228l\230\164S\172h\1726X\020\252o}")); ("Identifiable", ("\004F\207\014\158GU\001\184\214\187%/#;\211")); ("Ident", ("\b9;!\187.\220\163(x\b\174\\\223\020\004")); ("Errortrace", ("\238\196yV6<x\\\13126\144\141\000~\145")); ("Env", ("\021\n\181\142x\b\169j\227\"\017\248*\178\245\223")); ("Cmi_format", ("6\177\bU\139\"\023\152=\249\135\174\b\011Cg")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Build_path_prefix_map", ("y\028\167\207D\220\198\216\011\208\172\149\2416\bc")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216"))], [(0)])
Env.t -> Ident.t list -> Typedtree.class_expr list -> unit

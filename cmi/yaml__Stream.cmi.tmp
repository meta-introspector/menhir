module B = Yaml_ffi.M
module T = Yaml_types.M
type tag_directive = { handle : string; prefix : string; }
val error_to_msg :
  [< `Composer
   | `E of int64
   | `Emitter
   | `Memory
   | `None
   | `Parser
   | `Scanner
   | `Writer ] ->
  string
val scalar_style_of_ffi :
  [< `Any
   | `Double_quoted
   | `E of int64
   | `Folded
   | `Literal
   | `Plain
   | `Single_quoted ] ->
  Yaml__.Types.scalar_style
val layout_style_of_ffi :
  [< `Any | `Block | `E of int64 | `Flow ] -> Yaml__.Types.layout_style
val encoding_of_ffi :
  [< `Any | `E of int64 | `Utf16be | `Utf16le | `Utf8 ] ->
  Yaml__.Types.encoding
val tag_directive_of_ffi :
  (T.Tag_directive.t, [ `Struct ]) Ctypes.structured Ctypes.ptr ->
  tag_directive
val list_of_tag_directives :
  (Yaml_bindings_types.M(Yaml_types.G).Event.Document_start.Tag_directives.t,
   [ `Struct ])
  Ctypes.structured Ctypes.ptr -> tag_directive list
val version_of_directive : major:int -> minor:int -> [> `V1_1 | `V1_2 ]
val directive_of_version : [< `V1_1 | `V1_2 ] -> int * int
module Mark :
  sig
    type t = { index : int; line : int; column : int; }
    val of_ffi : (T.Mark.t, [ `Struct ]) Ctypes.structured -> t
  end
module Event :
  sig
    type pos = { start_mark : Mark.t; end_mark : Mark.t; }
    type t =
        Stream_start of { encoding : Yaml__.Types.encoding; }
      | Document_start of { version : Yaml__.Types.version option;
          implicit : bool;
        }
      | Document_end of { implicit : bool; }
      | Mapping_start of { anchor : string option; tag : string option;
          implicit : bool; style : Yaml__.Types.layout_style;
        }
      | Mapping_end
      | Stream_end
      | Scalar of Yaml__.Types.scalar
      | Sequence_start of { anchor : string option; tag : string option;
          implicit : bool; style : Yaml__.Types.layout_style;
        }
      | Sequence_end
      | Alias of { anchor : string; }
      | Nothing
    val of_ffi : (T.Event.t, [ `Struct ]) Ctypes.structured -> t * pos
  end
val version : (unit -> string Yaml_ffi.G.return) Yaml_ffi.G.result
val get_version : unit -> int * int * int
type parser = {
  p : T.Parser.t Ctypes.structure Ctypes.ptr;
  event : T.Event.t Ctypes.structure Ctypes.ptr;
  buf : char Ctypes_static.carray;
}
val parser : string -> (parser, [> `Msg of string ]) result
val do_parse : parser -> (Event.t * Event.pos, [> `Msg of string ]) result
type emitter = {
  e : T.Emitter.t Ctypes.structure Ctypes.ptr;
  event : T.Event.t Ctypes.structure Ctypes.ptr;
  buf : char Ctypes.ptr;
  written : Unsigned.size_t Ctypes.ptr;
}
val emitter_written : emitter -> int
val emitter : ?len:int -> unit -> (emitter, [> `Msg of string ]) result
val emitter_buf : emitter -> string
val check : string -> int -> (unit, [> `Msg of string ]) result
val check_emit :
  string -> emitter -> int -> (unit, [> `Msg of string ]) result
val stream_start :
  emitter -> [< T.Encoding.t ] -> (unit, [> `Msg of string ]) result
val stream_end : emitter -> (unit, [> `Msg of string ]) result
val document_start :
  ?version:[< `V1_1 | `V1_2 ] ->
  ?implicit:bool -> emitter -> (unit, [> `Msg of string ]) result
val document_end :
  ?implicit:bool -> emitter -> (unit, [> `Msg of string ]) result
val scalar :
  Yaml__.Types.scalar -> emitter -> (unit, [> `Msg of string ]) result
val sequence_start :
  ?anchor:string ->
  ?tag:string ->
  ?implicit:bool ->
  ?style:[< T.Sequence_style.t > `Block ] ->
  emitter -> (unit, [> `Msg of string ]) result
val sequence_end : emitter -> (unit, [> `Msg of string ]) result
val mapping_start :
  ?anchor:string ->
  ?tag:string ->
  ?implicit:bool ->
  ?style:[< T.Mapping_style.t > `Block ] ->
  emitter -> (unit, [> `Msg of string ]) result
val mapping_end : emitter -> (unit, [> `Msg of string ]) result
val alias : emitter -> string -> (unit, [> `Msg of string ]) result
("DEBUG:rule", [Tag3 (("B", 1885), 1, (Tag3 (Tag1 ((Tag2 ("Yaml_ffi")), "M")), 0, (("lib/stream.ml", 16, 802, 802), ("lib/stream.ml", 16, 802, 823), 0), Tag1 ("Yaml__Stream", 0)), 0, 0); Tag3 (("T", 1886), 1, (Tag3 (Tag1 ((Tag2 ("Yaml_types")), "M")), 0, (("lib/stream.ml", 17, 824, 824), ("lib/stream.ml", 17, 824, 847), 0), Tag1 ("Yaml__Stream", 1)), 0, 0); Tag1 (("tag_directive", 1887), (0, 0, [[(("handle", 289), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -255), (("lib/stream.ml", 19, 849, 872), ("lib/stream.ml", 19, 849, 888), 0), 0, Tag1 ("Yaml__Stream", 3)); (("prefix", 290), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -256), (("lib/stream.ml", 19, 849, 889), ("lib/stream.ml", 19, 849, 904), 0), 0, Tag1 ("Yaml__Stream", 4))]], 1, 0, 0, 0, 0, 0, (("lib/stream.ml", 19, 849, 849), ("lib/stream.ml", 19, 849, 924), 0), [(("deriving", (("lib/stream.ml", 19, 849, 910), ("lib/stream.ml", 19, 849, 918), 0)), ([([(((("sexp"), (("lib/stream.ml", 19, 849, 919), ("lib/stream.ml", 19, 849, 923), 0))), (("lib/stream.ml", 19, 849, 919), ("lib/stream.ml", 19, 849, 923), 0), 0, 0)], (("lib/stream.ml", 19, 849, 919), ("lib/stream.ml", 19, 849, 923), 0))]), (("lib/stream.ml", 19, 849, 907), ("lib/stream.ml", 19, 849, 924), 0))], 0, 0, Tag1 ("Yaml__Stream", 2)), 1, 0); (("error_to_msg", 1888), ((Tag1 (0, (Tag8 (([("Composer", Tag1 (1, 0, 0, (1))); ("E", Tag1 (0, [(Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -254)], 0, (1))); ("Emitter", Tag1 (1, 0, 0, (1))); ("Memory", Tag1 (1, 0, 0, (1))); ("None", Tag1 (1, 0, 0, (1))); ("Parser", Tag1 (1, 0, 0, (1))); ("Scanner", Tag1 (1, 0, 0, (1))); ("Writer", Tag1 (1, 0, 0, (1)))], ((0), 100000000, 0, -253), 1, 0, 0)), 100000000, 0, -252), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -251), 0), 100000000, 0, -250), 0, (("lib/stream.ml", 21, 926, 930), ("lib/stream.ml", 21, 926, 942), 0), 0, Tag1 ("Yaml__Stream", 5)), 0); (("scalar_style_of_ffi", 1889), ((Tag1 (0, (Tag8 (([("Any", Tag1 (1, 0, 0, (1))); ("Double_quoted", Tag1 (1, 0, 0, (1))); ("E", Tag1 (0, [(Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -249)], 0, (1))); ("Folded", Tag1 (1, 0, 0, (1))); ("Literal", Tag1 (1, 0, 0, (1))); ("Plain", Tag1 (1, 0, 0, (1))); ("Single_quoted", Tag1 (1, 0, 0, (1)))], ((0), 100000000, 0, -248), 1, 0, 0)), 100000000, 0, -247), (Tag3 (Tag1 (Tag1 ((Tag2 ("Yaml__")), "Types"), "scalar_style"), 0, (0)), 100000000, 0, -246), 0), 100000000, 0, -245), 0, (("lib/stream.ml", 32, 1228, 1232), ("lib/stream.ml", 32, 1228, 1251), 0), 0, Tag1 ("Yaml__Stream", 8)), 0); (("layout_style_of_ffi", 1890), ((Tag1 (0, (Tag8 (([("Any", Tag1 (1, 0, 0, (1))); ("Block", Tag1 (1, 0, 0, (1))); ("E", Tag1 (0, [(Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -244)], 0, (1))); ("Flow", Tag1 (1, 0, 0, (1)))], ((0), 100000000, 0, -243), 1, 0, 0)), 100000000, 0, -242), (Tag3 (Tag1 (Tag1 ((Tag2 ("Yaml__")), "Types"), "layout_style"), 0, (0)), 100000000, 0, -241), 0), 100000000, 0, -240), 0, (("lib/stream.ml", 51, 1748, 1752), ("lib/stream.ml", 51, 1748, 1771), 0), 0, Tag1 ("Yaml__Stream", 14)), 0); (("encoding_of_ffi", 1891), ((Tag1 (0, (Tag8 (([("Any", Tag1 (1, 0, 0, (1))); ("E", Tag1 (0, [(Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -239)], 0, (1))); ("Utf16be", Tag1 (1, 0, 0, (1))); ("Utf16le", Tag1 (1, 0, 0, (1))); ("Utf8", Tag1 (1, 0, 0, (1)))], ((0), 100000000, 0, -238), 1, 0, 0)), 100000000, 0, -237), (Tag3 (Tag1 (Tag1 ((Tag2 ("Yaml__")), "Types"), "encoding"), 0, (0)), 100000000, 0, -236), 0), 100000000, 0, -235), 0, (("lib/stream.ml", 59, 1958, 1962), ("lib/stream.ml", 59, 1958, 1977), 0), 0, Tag1 ("Yaml__Stream", 17)), 0); (("tag_directive_of_ffi", 1892), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes")), "ptr"), [(Tag3 (Tag1 ((Tag2 ("Ctypes")), "structured"), [(Tag3 (Tag1 (Tag1 ((("T", 1886)), "Tag_directive"), "t"), 0, (0)), 100000000, 0, -232); (Tag8 (([("Struct", (0))], (0, 100000000, 0, -234), 1, 0, 0)), 100000000, 0, -233)], (0)), 100000000, 0, -231)], (0)), 100000000, 0, -230), (Tag3 ((("tag_directive", 1887)), 0, (0)), 100000000, 0, -229), 0), 100000000, 0, -228), 0, (("lib/stream.ml", 68, 2184, 2188), ("lib/stream.ml", 68, 2184, 2208), 0), 0, Tag1 ("Yaml__Stream", 20)), 0); (("list_of_tag_directives", 1893), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes")), "ptr"), [(Tag3 (Tag1 ((Tag2 ("Ctypes")), "structured"), [(Tag3 (Tag1 (Tag1 (Tag1 (Tag1 (Tag2 (Tag1 ((Tag2 ("Yaml_bindings_types")), "M"), Tag1 ((Tag2 ("Yaml_types")), "G")), "Event"), "Document_start"), "Tag_directives"), "t"), 0, (0)), 100000000, 0, -225); (Tag8 (([("Struct", (0))], (0, 100000000, 0, -227), 1, 0, 0)), 100000000, 0, -226)], (0)), 100000000, 0, -224)], (0)), 100000000, 0, -223), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("tag_directive", 1887)), 0, (0)), 100000000, 0, -222)], (0)), 100000000, 0, -221), 0), 100000000, 0, -220), 0, (("lib/stream.ml", 74, 2358, 2362), ("lib/stream.ml", 74, 2358, 2384), 0), 0, Tag1 ("Yaml__Stream", 24)), 0); (("version_of_directive", 1894), ((Tag1 (("major"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -219), (Tag1 (("minor"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -218), (Tag8 (([("V1_1", (0)); ("V1_2", (0))], ((0), 100000000, 0, -217), 0, 0, 0)), 100000000, 0, -216), 0), 100000000, 0, -215), 0), 100000000, 0, -214), 0, (("lib/stream.ml", 82, 2631, 2635), ("lib/stream.ml", 82, 2631, 2655), 0), 0, Tag1 ("Yaml__Stream", 29)), 0); (("directive_of_version", 1895), ((Tag1 (0, (Tag8 (([("V1_1", Tag1 (1, 0, 0, (1))); ("V1_2", Tag1 (1, 0, 0, (1)))], ((0), 100000000, 0, -213), 1, 0, 0)), 100000000, 0, -212), (Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -210); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -211)]), 100000000, 0, -209), 0), 100000000, 0, -208), 0, (("lib/stream.ml", 91, 2858, 2862), ("lib/stream.ml", 91, 2858, 2882), 0), 0, Tag1 ("Yaml__Stream", 32)), 0); Tag3 (("Mark", 1896), 0, (Tag1 ([Tag1 (("t", 1920), (0, 0, [[(("index", 1294), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -263), (("lib/stream.ml", 94, 2950, 2963), ("lib/stream.ml", 94, 2950, 2975), 0), 0, Tag1 ("Yaml__Stream", 34)); (("line", 1295), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -264), (("lib/stream.ml", 94, 2950, 2976), ("lib/stream.ml", 94, 2950, 2987), 0), 0, Tag1 ("Yaml__Stream", 35)); (("column", 1296), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -265), (("lib/stream.ml", 94, 2950, 2988), ("lib/stream.ml", 94, 2950, 3000), 0), 0, Tag1 ("Yaml__Stream", 36))]], 1, 0, 0, 0, 0, 0, (("lib/stream.ml", 94, 2950, 2952), ("lib/stream.ml", 94, 2950, 3020), 0), [(("deriving", (("lib/stream.ml", 94, 2950, 3006), ("lib/stream.ml", 94, 2950, 3014), 0)), ([([(((("sexp"), (("lib/stream.ml", 94, 2950, 3015), ("lib/stream.ml", 94, 2950, 3019), 0))), (("lib/stream.ml", 94, 2950, 3015), ("lib/stream.ml", 94, 2950, 3019), 0), 0, 0)], (("lib/stream.ml", 94, 2950, 3015), ("lib/stream.ml", 94, 2950, 3019), 0))]), (("lib/stream.ml", 94, 2950, 3003), ("lib/stream.ml", 94, 2950, 3020), 0))], 0, 0, Tag1 ("Yaml__Stream", 33)), 1, 0); (("of_ffi", 1921), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes")), "structured"), [(Tag3 (Tag1 (Tag1 ((("T", 1886)), "Mark"), "t"), 0, (0)), 100000000, 0, -260); (Tag8 (([("Struct", (0))], (0, 100000000, 0, -262), 1, 0, 0)), 100000000, 0, -261)], (0)), 100000000, 0, -259), (Tag3 ((("t", 1920)), 0, (0)), 100000000, 0, -258), 0), 100000000, 0, -257), 0, (("lib/stream.ml", 96, 3022, 3028), ("lib/stream.ml", 96, 3022, 3034), 0), 0, Tag1 ("Yaml__Stream", 37)), 0)]), 0, (("lib/stream.ml", 93, 2929, 2929), ("lib/stream.ml", 103, 3276, 3279), 0), Tag1 ("Yaml__Stream", 44)), 0, 0); Tag3 (("Event", 1897), 0, (Tag1 ([Tag1 (("pos", 1922), (0, 0, [[(("start_mark", 1368), 0, (Tag3 (Tag1 ((("Mark", 1896)), "t"), 0, (0)), 100000000, 0, -293), (("lib/stream.ml", 106, 3303, 3318), ("lib/stream.ml", 106, 3303, 3338), 0), 0, Tag1 ("Yaml__Stream", 46)); (("end_mark", 1369), 0, (Tag3 (Tag1 ((("Mark", 1896)), "t"), 0, (0)), 100000000, 0, -294), (("lib/stream.ml", 106, 3303, 3339), ("lib/stream.ml", 106, 3303, 3356), 0), 0, Tag1 ("Yaml__Stream", 47))]], 1, 0, 0, 0, 0, 0, (("lib/stream.ml", 106, 3303, 3305), ("lib/stream.ml", 106, 3303, 3358), 0), 0, 0, 0, Tag1 ("Yaml__Stream", 45)), 1, 0); Tag1 (("t", 1923), (0, 0, Tag1 ([(("Stream_start", 1371), Tag1 ([(("encoding", 1372), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Yaml__")), "Types"), "encoding"), 0, (0)), 100000000, 0, -274), (("lib/stream.ml", 109, 3371, 3395), ("lib/stream.ml", 109, 3371, 3414), 0), 0, Tag1 ("Yaml__Stream", 49))]), 0, (("lib/stream.ml", 109, 3371, 3375), ("lib/stream.ml", 109, 3371, 3416), 0), 0, Tag1 ("Yaml__Stream", 50)); (("Document_start", 1373), Tag1 ([(("version", 1374), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Yaml__")), "Types"), "version"), 0, (0)), 100000000, 0, -276)], (0)), 100000000, 0, -275), (("lib/stream.ml", 110, 3417, 3443), ("lib/stream.ml", 110, 3417, 3468), 0), 0, Tag1 ("Yaml__Stream", 51)); (("implicit", 1375), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -277), (("lib/stream.ml", 110, 3417, 3469), ("lib/stream.ml", 110, 3417, 3484), 0), 0, Tag1 ("Yaml__Stream", 52))]), 0, (("lib/stream.ml", 110, 3417, 3421), ("lib/stream.ml", 110, 3417, 3486), 0), 0, Tag1 ("Yaml__Stream", 53)); (("Document_end", 1376), Tag1 ([(("implicit", 1377), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -278), (("lib/stream.ml", 111, 3487, 3511), ("lib/stream.ml", 111, 3487, 3526), 0), 0, Tag1 ("Yaml__Stream", 54))]), 0, (("lib/stream.ml", 111, 3487, 3491), ("lib/stream.ml", 111, 3487, 3528), 0), 0, Tag1 ("Yaml__Stream", 55)); (("Mapping_start", 1378), Tag1 ([(("anchor", 1379), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -280)], (0)), 100000000, 0, -279), (("lib/stream.ml", 113, 3554, 3562), ("lib/stream.ml", 113, 3554, 3585), 0), 0, Tag1 ("Yaml__Stream", 56)); (("tag", 1380), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -282)], (0)), 100000000, 0, -281), (("lib/stream.ml", 114, 3586, 3594), ("lib/stream.ml", 114, 3586, 3614), 0), 0, Tag1 ("Yaml__Stream", 57)); (("implicit", 1381), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -283), (("lib/stream.ml", 115, 3615, 3623), ("lib/stream.ml", 115, 3615, 3639), 0), 0, Tag1 ("Yaml__Stream", 58)); (("style", 1382), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Yaml__")), "Types"), "layout_style"), 0, (0)), 100000000, 0, -284), (("lib/stream.ml", 116, 3640, 3648), ("lib/stream.ml", 116, 3640, 3669), 0), 0, Tag1 ("Yaml__Stream", 59))]), 0, (("lib/stream.ml", 112, 3529, 3533), ("lib/stream.ml", 117, 3670, 3677), 0), 0, Tag1 ("Yaml__Stream", 60)); (("Mapping_end", 1383), (0), 0, (("lib/stream.ml", 118, 3678, 3682), ("lib/stream.ml", 118, 3678, 3695), 0), 0, Tag1 ("Yaml__Stream", 61)); (("Stream_end", 1384), (0), 0, (("lib/stream.ml", 119, 3696, 3700), ("lib/stream.ml", 119, 3696, 3712), 0), 0, Tag1 ("Yaml__Stream", 62)); (("Scalar", 1385), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Yaml__")), "Types"), "scalar"), 0, (0)), 100000000, 0, -285)]), 0, (("lib/stream.ml", 120, 3713, 3717), ("lib/stream.ml", 120, 3713, 3735), 0), 0, Tag1 ("Yaml__Stream", 63)); (("Sequence_start", 1386), Tag1 ([(("anchor", 1387), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -287)], (0)), 100000000, 0, -286), (("lib/stream.ml", 122, 3762, 3770), ("lib/stream.ml", 122, 3762, 3793), 0), 0, Tag1 ("Yaml__Stream", 64)); (("tag", 1388), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -289)], (0)), 100000000, 0, -288), (("lib/stream.ml", 123, 3794, 3802), ("lib/stream.ml", 123, 3794, 3822), 0), 0, Tag1 ("Yaml__Stream", 65)); (("implicit", 1389), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -290), (("lib/stream.ml", 124, 3823, 3831), ("lib/stream.ml", 124, 3823, 3847), 0), 0, Tag1 ("Yaml__Stream", 66)); (("style", 1390), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Yaml__")), "Types"), "layout_style"), 0, (0)), 100000000, 0, -291), (("lib/stream.ml", 125, 3848, 3856), ("lib/stream.ml", 125, 3848, 3877), 0), 0, Tag1 ("Yaml__Stream", 67))]), 0, (("lib/stream.ml", 121, 3736, 3740), ("lib/stream.ml", 126, 3878, 3885), 0), 0, Tag1 ("Yaml__Stream", 68)); (("Sequence_end", 1391), (0), 0, (("lib/stream.ml", 127, 3886, 3890), ("lib/stream.ml", 127, 3886, 3904), 0), 0, Tag1 ("Yaml__Stream", 69)); (("Alias", 1392), Tag1 ([(("anchor", 1393), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -292), (("lib/stream.ml", 128, 3905, 3922), ("lib/stream.ml", 128, 3905, 3937), 0), 0, Tag1 ("Yaml__Stream", 70))]), 0, (("lib/stream.ml", 128, 3905, 3909), ("lib/stream.ml", 128, 3905, 3939), 0), 0, Tag1 ("Yaml__Stream", 71)); (("Nothing", 1394), (0), 0, (("lib/stream.ml", 129, 3940, 3944), ("lib/stream.ml", 129, 3940, 3953), 0), 0, Tag1 ("Yaml__Stream", 72))], 0), 1, 0, 0, 0, 0, 0, (("lib/stream.ml", 108, 3360, 3362), ("lib/stream.ml", 129, 3940, 3953), 0), 0, 0, 0, Tag1 ("Yaml__Stream", 48)), 1, 0); (("of_ffi", 1924), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes")), "structured"), [(Tag3 (Tag1 (Tag1 ((("T", 1886)), "Event"), "t"), 0, (0)), 100000000, 0, -271); (Tag8 (([("Struct", (0))], (0, 100000000, 0, -273), 1, 0, 0)), 100000000, 0, -272)], (0)), 100000000, 0, -270), (Tag2 ([(Tag3 ((("t", 1923)), 0, (0)), 100000000, 0, -268); (Tag3 ((("pos", 1922)), 0, (0)), 100000000, 0, -269)]), 100000000, 0, -267), 0), 100000000, 0, -266), 0, (("lib/stream.ml", 131, 3955, 3961), ("lib/stream.ml", 131, 3955, 3967), 0), 0, Tag1 ("Yaml__Stream", 103)), 0)]), 0, (("lib/stream.ml", 105, 3281, 3281), ("lib/stream.ml", 204, 7033, 7036), 0), Tag1 ("Yaml__Stream", 144)), 0, 0); (("version", 1898), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Yaml_ffi")), "G"), "result"), [(Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -207), (Tag3 (Tag1 (Tag1 ((Tag2 ("Yaml_ffi")), "G"), "return"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -206)], (0)), 100000000, 0, -205), 0), 100000000, 0, -204)], (0)), 100000000, 0, -203), 0, (("lib/stream.ml", 206, 7038, 7042), ("lib/stream.ml", 206, 7038, 7049), 0), 0, Tag1 ("Yaml__Stream", 145)), 0); (("get_version", 1899), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -202), (Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -199); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -200); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -201)]), 100000000, 0, -198), 0), 100000000, 0, -197), 0, (("lib/stream.ml", 208, 7063, 7067), ("lib/stream.ml", 208, 7063, 7078), 0), 0, Tag1 ("Yaml__Stream", 146)), 0); Tag1 (("parser", 1900), (0, 0, [[(("p", 1613), 0, (Tag3 (Tag1 ((Tag2 ("Ctypes")), "ptr"), [(Tag3 (Tag1 ((Tag2 ("Ctypes")), "structure"), [(Tag3 (Tag1 (Tag1 ((("T", 1886)), "Parser"), "t"), 0, (0)), 100000000, 0, -191)], (0)), 100000000, 0, -190)], (0)), 100000000, 0, -189), (("lib/stream.ml", 219, 7385, 7387), ("lib/stream.ml", 219, 7385, 7430), 0), 0, Tag1 ("Yaml__Stream", 154)); (("event", 1614), 0, (Tag3 (Tag1 ((Tag2 ("Ctypes")), "ptr"), [(Tag3 (Tag1 ((Tag2 ("Ctypes")), "structure"), [(Tag3 (Tag1 (Tag1 ((("T", 1886)), "Event"), "t"), 0, (0)), 100000000, 0, -194)], (0)), 100000000, 0, -193)], (0)), 100000000, 0, -192), (("lib/stream.ml", 220, 7431, 7433), ("lib/stream.ml", 220, 7431, 7479), 0), 0, Tag1 ("Yaml__Stream", 155)); (("buf", 1615), 0, (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "carray"), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -196)], (0)), 100000000, 0, -195), (("lib/stream.ml", 221, 7480, 7482), ("lib/stream.ml", 221, 7480, 7514), 0), 0, Tag1 ("Yaml__Stream", 156))]], 1, 0, 0, 0, 0, 0, (("lib/stream.ml", 218, 7369, 7369), ("lib/stream.ml", 222, 7515, 7516), 0), 0, 0, 0, Tag1 ("Yaml__Stream", 153)), 1, 0); (("parser", 1901), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -188), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((("parser", 1900)), 0, (0)), 100000000, 0, -184); (Tag8 (([("Msg", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -187))))], ((0), 100000000, 0, -186), 0, 0, 0)), 100000000, 0, -185)], (0)), 100000000, 0, -183), 0), 100000000, 0, -182), 0, (("lib/stream.ml", 224, 7518, 7522), ("lib/stream.ml", 224, 7518, 7528), 0), 0, Tag1 ("Yaml__Stream", 157)), 0); (("do_parse", 1902), ((Tag1 (0, (Tag3 ((("parser", 1900)), 0, (0)), 100000000, 0, -181), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag2 ([(Tag3 (Tag1 ((("Event", 1897)), "t"), 0, (0)), 100000000, 0, -176); (Tag3 (Tag1 ((("Event", 1897)), "pos"), 0, (0)), 100000000, 0, -177)]), 100000000, 0, -175); (Tag8 (([("Msg", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -180))))], ((0), 100000000, 0, -179), 0, 0, 0)), 100000000, 0, -178)], (0)), 100000000, 0, -174), 0), 100000000, 0, -173), 0, (("lib/stream.ml", 236, 7979, 7983), ("lib/stream.ml", 236, 7979, 7991), 0), 0, Tag1 ("Yaml__Stream", 166)), 0); Tag1 (("emitter", 1903), (0, 0, [[(("e", 1755), 0, (Tag3 (Tag1 ((Tag2 ("Ctypes")), "ptr"), [(Tag3 (Tag1 ((Tag2 ("Ctypes")), "structure"), [(Tag3 (Tag1 (Tag1 ((("T", 1886)), "Emitter"), "t"), 0, (0)), 100000000, 0, -165)], (0)), 100000000, 0, -164)], (0)), 100000000, 0, -163), (("lib/stream.ml", 262, 8685, 8687), ("lib/stream.ml", 262, 8685, 8731), 0), 0, Tag1 ("Yaml__Stream", 182)); (("event", 1756), 0, (Tag3 (Tag1 ((Tag2 ("Ctypes")), "ptr"), [(Tag3 (Tag1 ((Tag2 ("Ctypes")), "structure"), [(Tag3 (Tag1 (Tag1 ((("T", 1886)), "Event"), "t"), 0, (0)), 100000000, 0, -168)], (0)), 100000000, 0, -167)], (0)), 100000000, 0, -166), (("lib/stream.ml", 263, 8732, 8734), ("lib/stream.ml", 263, 8732, 8780), 0), 0, Tag1 ("Yaml__Stream", 183)); (("buf", 1757), 0, (Tag3 (Tag1 ((Tag2 ("Ctypes")), "ptr"), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -170)], (0)), 100000000, 0, -169), (("lib/stream.ml", 264, 8781, 8783), ("lib/stream.ml", 264, 8781, 8805), 0), 0, Tag1 ("Yaml__Stream", 184)); (("written", 1758), 0, (Tag3 (Tag1 ((Tag2 ("Ctypes")), "ptr"), [(Tag3 (Tag1 ((Tag2 ("Unsigned")), "size_t"), 0, (0)), 100000000, 0, -172)], (0)), 100000000, 0, -171), (("lib/stream.ml", 265, 8806, 8808), ("lib/stream.ml", 265, 8806, 8845), 0), 0, Tag1 ("Yaml__Stream", 185))]], 1, 0, 0, 0, 0, 0, (("lib/stream.ml", 261, 8668, 8668), ("lib/stream.ml", 266, 8846, 8847), 0), 0, 0, 0, Tag1 ("Yaml__Stream", 181)), 1, 0); (("emitter_written", 1904), ((Tag1 (0, (Tag3 ((("emitter", 1903)), 0, (0)), 100000000, 0, -162), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -161), 0), 100000000, 0, -160), 0, (("lib/stream.ml", 268, 8849, 8853), ("lib/stream.ml", 268, 8849, 8868), 0), 0, Tag1 ("Yaml__Stream", 186)), 0); (("emitter", 1905), ((Tag1 (Tag1 ("len"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -159)], (0)), 100000000, 0, -158), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -157), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((("emitter", 1903)), 0, (0)), 100000000, 0, -153); (Tag8 (([("Msg", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -156))))], ((0), 100000000, 0, -155), 0, 0, 0)), 100000000, 0, -154)], (0)), 100000000, 0, -152), 0), 100000000, 0, -151), 0), 100000000, 0, -150), 0, (("lib/stream.ml", 271, 8934, 8938), ("lib/stream.ml", 271, 8934, 8945), 0), 0, Tag1 ("Yaml__Stream", 188)), 0); (("emitter_buf", 1906), ((Tag1 (0, (Tag3 ((("emitter", 1903)), 0, (0)), 100000000, 0, -149), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -148), 0), 100000000, 0, -147), 0, (("lib/stream.ml", 283, 9447, 9451), ("lib/stream.ml", 283, 9447, 9462), 0), 0, Tag1 ("Yaml__Stream", 199)), 0); (("check", 1907), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -146), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -145), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -141); (Tag8 (([("Msg", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -144))))], ((0), 100000000, 0, -143), 0, 0, 0)), 100000000, 0, -142)], (0)), 100000000, 0, -140), 0), 100000000, 0, -139), 0), 100000000, 0, -138), 0, (("lib/stream.ml", 287, 9583, 9587), ("lib/stream.ml", 287, 9583, 9592), 0), 0, Tag1 ("Yaml__Stream", 203)), 0); (("check_emit", 1908), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -137), (Tag1 (0, (Tag3 ((("emitter", 1903)), 0, (0)), 100000000, 0, -136), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -135), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -131); (Tag8 (([("Msg", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -134))))], ((0), 100000000, 0, -133), 0, 0, 0)), 100000000, 0, -132)], (0)), 100000000, 0, -130), 0), 100000000, 0, -129), 0), 100000000, 0, -128), 0), 100000000, 0, -127), 0, (("lib/stream.ml", 293, 9738, 9742), ("lib/stream.ml", 293, 9738, 9752), 0), 0, Tag1 ("Yaml__Stream", 207)), 0); (("stream_start", 1909), ((Tag1 (0, (Tag3 ((("emitter", 1903)), 0, (0)), 100000000, 0, -126), (Tag1 (0, (Tag8 (([("Any", Tag1 (1, 0, 0, (1))); ("E", Tag1 (0, [(Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -125)], 0, (1))); ("Utf16be", Tag1 (1, 0, 0, (1))); ("Utf16le", Tag1 (1, 0, 0, (1))); ("Utf8", Tag1 (1, 0, 0, (1)))], ((0), 100000000, 0, -124), 1, 0, ([Tag1 (Tag1 ((("T", 1886)), "Encoding"), "t")]))), 100000000, 0, -123), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -119); (Tag8 (([("Msg", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -122))))], ((0), 100000000, 0, -121), 0, 0, 0)), 100000000, 0, -120)], (0)), 100000000, 0, -118), 0), 100000000, 0, -117), 0), 100000000, 0, -116), 0, (("lib/stream.ml", 296, 9846, 9850), ("lib/stream.ml", 296, 9846, 9862), 0), 0, Tag1 ("Yaml__Stream", 212)), 0); (("stream_end", 1910), ((Tag1 (0, (Tag3 ((("emitter", 1903)), 0, (0)), 100000000, 0, -115), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -111); (Tag8 (([("Msg", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -114))))], ((0), 100000000, 0, -113), 0, 0, 0)), 100000000, 0, -112)], (0)), 100000000, 0, -110), 0), 100000000, 0, -109), 0, (("lib/stream.ml", 300, 9973, 9977), ("lib/stream.ml", 300, 9973, 9987), 0), 0, Tag1 ("Yaml__Stream", 215)), 0); (("document_start", 1911), ((Tag1 (Tag1 ("version"), (Tag3 ((Tag3 ("option", 10)), [(Tag8 (([("V1_1", Tag1 (1, 0, 0, (1))); ("V1_2", Tag1 (1, 0, 0, (1)))], ((0), 100000000, 0, -108), 1, 0, 0)), 100000000, 0, -107)], (0)), 100000000, 0, -106), (Tag1 (Tag1 ("implicit"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -105)], (0)), 100000000, 0, -104), (Tag1 (0, (Tag3 ((("emitter", 1903)), 0, (0)), 100000000, 0, -103), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -99); (Tag8 (([("Msg", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -102))))], ((0), 100000000, 0, -101), 0, 0, 0)), 100000000, 0, -100)], (0)), 100000000, 0, -98), 0), 100000000, 0, -97), 0), 100000000, 0, -96), 0), 100000000, 0, -95), 0, (("lib/stream.ml", 302, 10054, 10058), ("lib/stream.ml", 302, 10054, 10072), 0), 0, Tag1 ("Yaml__Stream", 217)), 0); (("document_end", 1912), ((Tag1 (Tag1 ("implicit"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -94)], (0)), 100000000, 0, -93), (Tag1 (0, (Tag3 ((("emitter", 1903)), 0, (0)), 100000000, 0, -92), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -88); (Tag8 (([("Msg", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -91))))], ((0), 100000000, 0, -90), 0, 0, 0)), 100000000, 0, -89)], (0)), 100000000, 0, -87), 0), 100000000, 0, -86), 0), 100000000, 0, -85), 0, (("lib/stream.ml", 318, 10612, 10616), ("lib/stream.ml", 318, 10612, 10628), 0), 0, Tag1 ("Yaml__Stream", 229)), 0); (("scalar", 1913), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Yaml__")), "Types"), "scalar"), 0, (0)), 100000000, 0, -84), (Tag1 (0, (Tag3 ((("emitter", 1903)), 0, (0)), 100000000, 0, -83), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -79); (Tag8 (([("Msg", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -82))))], ((0), 100000000, 0, -81), 0, 0, 0)), 100000000, 0, -80)], (0)), 100000000, 0, -78), 0), 100000000, 0, -77), 0), 100000000, 0, -76), 0, (("lib/stream.ml", 321, 10724, 10728), ("lib/stream.ml", 321, 10724, 10734), 0), 0, Tag1 ("Yaml__Stream", 234)), 0); (("sequence_start", 1914), ((Tag1 (Tag1 ("anchor"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -75)], (0)), 100000000, 0, -74), (Tag1 (Tag1 ("tag"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -73)], (0)), 100000000, 0, -72), (Tag1 (Tag1 ("implicit"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -71)], (0)), 100000000, 0, -70), (Tag1 (Tag1 ("style"), (Tag3 ((Tag3 ("option", 10)), [(Tag8 (([("Any", Tag1 (1, 0, 0, (1))); ("Block", (0)); ("E", Tag1 (0, [(Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -69)], 0, (1))); ("Flow", Tag1 (1, 0, 0, (1)))], ((0), 100000000, 0, -68), 1, 0, ([Tag1 (Tag1 ((("T", 1886)), "Sequence_style"), "t")]))), 100000000, 0, -67)], (0)), 100000000, 0, -66), (Tag1 (0, (Tag3 ((("emitter", 1903)), 0, (0)), 100000000, 0, -65), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -61); (Tag8 (([("Msg", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -64))))], ((0), 100000000, 0, -63), 0, 0, 0)), 100000000, 0, -62)], (0)), 100000000, 0, -60), 0), 100000000, 0, -59), 0), 100000000, 0, -58), 0), 100000000, 0, -57), 0), 100000000, 0, -56), 0), 100000000, 0, -55), 0, (("lib/stream.ml", 327, 10972, 10976), ("lib/stream.ml", 327, 10972, 10990), 0), 0, Tag1 ("Yaml__Stream", 242)), 0); (("sequence_end", 1915), ((Tag1 (0, (Tag3 ((("emitter", 1903)), 0, (0)), 100000000, 0, -54), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -50); (Tag8 (([("Msg", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -53))))], ((0), 100000000, 0, -52), 0, 0, 0)), 100000000, 0, -51)], (0)), 100000000, 0, -49), 0), 100000000, 0, -48), 0, (("lib/stream.ml", 332, 11171, 11175), ("lib/stream.ml", 332, 11171, 11187), 0), 0, Tag1 ("Yaml__Stream", 252)), 0); (("mapping_start", 1916), ((Tag1 (Tag1 ("anchor"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -47)], (0)), 100000000, 0, -46), (Tag1 (Tag1 ("tag"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -45)], (0)), 100000000, 0, -44), (Tag1 (Tag1 ("implicit"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -43)], (0)), 100000000, 0, -42), (Tag1 (Tag1 ("style"), (Tag3 ((Tag3 ("option", 10)), [(Tag8 (([("Any", Tag1 (1, 0, 0, (1))); ("Block", (0)); ("E", Tag1 (0, [(Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -41)], 0, (1))); ("Flow", Tag1 (1, 0, 0, (1)))], ((0), 100000000, 0, -40), 1, 0, ([Tag1 (Tag1 ((("T", 1886)), "Mapping_style"), "t")]))), 100000000, 0, -39)], (0)), 100000000, 0, -38), (Tag1 (0, (Tag3 ((("emitter", 1903)), 0, (0)), 100000000, 0, -37), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -33); (Tag8 (([("Msg", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -36))))], ((0), 100000000, 0, -35), 0, 0, 0)), 100000000, 0, -34)], (0)), 100000000, 0, -32), 0), 100000000, 0, -31), 0), 100000000, 0, -30), 0), 100000000, 0, -29), 0), 100000000, 0, -28), 0), 100000000, 0, -27), 0, (("lib/stream.ml", 334, 11253, 11257), ("lib/stream.ml", 334, 11253, 11270), 0), 0, Tag1 ("Yaml__Stream", 254)), 0); (("mapping_end", 1917), ((Tag1 (0, (Tag3 ((("emitter", 1903)), 0, (0)), 100000000, 0, -26), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -22); (Tag8 (([("Msg", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -25))))], ((0), 100000000, 0, -24), 0, 0, 0)), 100000000, 0, -23)], (0)), 100000000, 0, -21), 0), 100000000, 0, -20), 0, (("lib/stream.ml", 339, 11453, 11457), ("lib/stream.ml", 339, 11453, 11468), 0), 0, Tag1 ("Yaml__Stream", 264)), 0); (("alias", 1918), ((Tag1 (0, (Tag3 ((("emitter", 1903)), 0, (0)), 100000000, 0, -19), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -18), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -14); (Tag8 (([("Msg", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -17))))], ((0), 100000000, 0, -16), 0, 0, 0)), 100000000, 0, -15)], (0)), 100000000, 0, -13), 0), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("lib/stream.ml", 342, 11539, 11543), ("lib/stream.ml", 342, 11539, 11548), 0), 0, Tag1 ("Yaml__Stream", 266)), 0); (("emit", 1919), ((Tag1 (0, (Tag3 ((("emitter", 1903)), 0, (0)), 100000000, 0, -10), (Tag1 (0, (Tag3 (Tag1 ((("Event", 1897)), "t"), 0, (0)), 100000000, 0, -9), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5); (Tag8 (([("Msg", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -8))))], ((0), 100000000, 0, -7), 0, 0, 0)), 100000000, 0, -6)], (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("lib/stream.ml", 344, 11617, 11621), ("lib/stream.ml", 344, 11617, 11625), 0), 0, Tag1 ("Yaml__Stream", 269)), 0)], "Yaml__Stream", [("Yaml__Stream", ("\018\141p\157e\218\131A\022}\175\150\224\017\028(")); ("Yaml_types__M", ("\237\193X\151K\024\012[>\246\018\239Q\142\0143")); ("Yaml_types__G", ("\163=W\139\173\250so\158\0286\169(\142\248\164")); ("Yaml_types", ("1\228 \234\129F\222\197\236\163j\155\233y\129>")); ("Yaml_ffi__M", ("\224\nk-B\012\157T\223\002\"\151+\146D\020")); ("Yaml_ffi__G", ("2\157r,\218\173{\205\220\022\221m\230\131\023#")); ("Yaml_ffi", ("g1\201\011\253S\172\153\151p\141\1691\238|\004")); ("Yaml_bindings_types", ("M\150P\253:\0067\1588\143\nd\000\016\197Q")); ("Yaml_bindings", ("\212\220D\142\251\187N\139\200\007\159\253\028G_\246")); ("Yaml__Types", ("\192\029\215z~\138S\017\192\160\134\235\133\222:^")); ("Yaml__", ("\130Q`\192\016\187{\245\167\022l\024\219\213\023\215")); ("Unsigned", ("cd\205\030\181\167\151\005!\134;\177\228\249\168+")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Result", ("\247h\157\021\029a\144\199*\186Z\162\225\241\160>")); ("Stdlib__Printf", ("\215<\139]\021\142\224E\245m\198qc(W\229")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Signed", ("R\017i\"\030\024\134f\143\198\192\180>t\175\225")); ("LDouble", ("j\251\140\230^u\251\210\143\236T\207\022\147\011\211")); ("Ctypes_types", ("\140\014\176\188\187lo3aC\196\012\228vn+")); ("Ctypes_static", ("U\030\169\129GB\138P\158'd\012\131\157\202\018")); ("Ctypes_ptr", ("V\021o\161\007\161\245R\242\222:e\151\189\175\207")); ("Ctypes_primitive_types", ("\147\237\001\150\136\017Z\2308\137C\245\023\133\161\158")); ("Ctypes_memory_stubs", ("\016\229\020F\227\153LZ\166P\204(\249\139u\191")); ("Ctypes_bigarray", ("\146\0055mmn\243\187gd\185P\208J\254l")); ("Ctypes", ("\201\151\139N\189F\151(\218n\234\177\197RtW")); ("Cstubs_internals", ("/(\163Z9\154B\252\172\182\224\144\152'\227H")); ("ComplexL", ("\n\230\139\192\213\0226\203\176\242\200\205c\155ag")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Bigarray_compat", ("\150\219\208\188w\237\216\005\r[\152q'\006x\217"))], [(0)])
val emit : emitter -> Event.t -> (unit, [> `Msg of string ]) result

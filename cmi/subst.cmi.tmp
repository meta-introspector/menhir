type t
val identity : t
val add_type : Ident.t -> Path.t -> t -> t
val add_type_path : Path.t -> Path.t -> t -> t
val add_type_function :
  Path.t -> params:Types.type_expr list -> body:Types.type_expr -> t -> t
val add_module : Ident.t -> Path.t -> t -> t
val add_module_path : Path.t -> Path.t -> t -> t
val add_modtype : Ident.t -> Types.module_type -> t -> t
val add_modtype_path : Path.t -> Types.module_type -> t -> t
val for_saving : t -> t
val reset_for_saving : unit -> unit
val change_locs : t -> Location.t -> t
val module_path : t -> Path.t -> Path.t
val type_path : t -> Path.t -> Path.t
val modtype_path : t -> Path.t -> Path.t
val type_expr : t -> Types.type_expr -> Types.type_expr
val class_type : t -> Types.class_type -> Types.class_type
val value_description :
  t -> Types.value_description -> Types.value_description
val type_declaration : t -> Types.type_declaration -> Types.type_declaration
val extension_constructor :
  t -> Types.extension_constructor -> Types.extension_constructor
val class_declaration :
  t -> Types.class_declaration -> Types.class_declaration
val cltype_declaration :
  t -> Types.class_type_declaration -> Types.class_type_declaration
type scoping = Keep | Make_local | Rescope of int
val modtype : scoping -> t -> Types.module_type -> Types.module_type
val signature : scoping -> t -> Types.signature -> Types.signature
val signature_item :
  scoping -> t -> Types.signature_item -> Types.signature_item
val modtype_declaration :
  scoping -> t -> Types.modtype_declaration -> Types.modtype_declaration
val module_declaration :
  scoping -> t -> Types.module_declaration -> Types.module_declaration
val compose : t -> t -> t
val ctype_apply_env_empty :
  (Types.type_expr list ->
   Types.type_expr -> Types.type_expr list -> Types.type_expr)
  ref
module Lazy :
  sig
    type module_decl = {
      mdl_type : modtype;
      mdl_attributes : Parsetree.attributes;
      mdl_loc : Location.t;
      mdl_uid : Types.Uid.t;
    }
    and modtype =
        MtyL_ident of Path.t
      | MtyL_signature of signature
      | MtyL_functor of functor_parameter * modtype
      | MtyL_alias of Path.t
    and modtype_declaration = {
      mtdl_type : modtype option;
      mtdl_attributes : Parsetree.attributes;
      mtdl_loc : Location.t;
      mtdl_uid : Types.Uid.t;
    }
    and signature
    and signature_item =
        SigL_value of Ident.t * Types.value_description * Types.visibility
      | SigL_type of Ident.t * Types.type_declaration * Types.rec_status *
          Types.visibility
      | SigL_typext of Ident.t * Types.extension_constructor *
          Types.ext_status * Types.visibility
      | SigL_module of Ident.t * Types.module_presence * module_decl *
          Types.rec_status * Types.visibility
      | SigL_modtype of Ident.t * modtype_declaration * Types.visibility
      | SigL_class of Ident.t * Types.class_declaration * Types.rec_status *
          Types.visibility
      | SigL_class_type of Ident.t * Types.class_type_declaration *
          Types.rec_status * Types.visibility
    and functor_parameter = Unit | Named of Ident.t option * modtype
    val of_module_decl : Types.module_declaration -> module_decl
    val of_modtype : Types.module_type -> modtype
    val of_modtype_decl : Types.modtype_declaration -> modtype_declaration
    val of_signature : Types.signature -> signature
    val of_signature_items : signature_item list -> signature
    val of_signature_item : Types.signature_item -> signature_item
    val module_decl : scoping -> t -> module_decl -> module_decl
    val modtype : scoping -> t -> modtype -> modtype
    val modtype_decl :
      scoping -> t -> modtype_declaration -> modtype_declaration
    val signature : scoping -> t -> signature -> signature
    val signature_item : scoping -> t -> signature_item -> signature_item
    val force_module_decl : module_decl -> Types.module_declaration
    val force_modtype : modtype -> Types.module_type
    val force_modtype_decl : modtype_declaration -> Types.modtype_declaration
    val force_signature : signature -> Types.signature
    val force_signature_once : signature -> signature_item list
    val force_signature_item : signature_item -> Types.signature_item("DEBUG:rule", [Tag1 (("t", 733), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("typing/subst.mli", 20, 1112, 1112), ("typing/subst.mli", 20, 1112, 1118), 0), 0, 0, 0, Tag1 ("Subst", 1)), 1, 0); (("identity", 734), ((Tag3 ((("t", 733)), 0, (0)), 100000000, 0, -166), 0, (("typing/subst.mli", 34, 1663, 1663), ("typing/subst.mli", 34, 1663, 1678), 0), 0, Tag1 ("Subst", 2)), 0); (("add_type", 735), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -165), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -164), (Tag1 (0, (Tag3 ((("t", 733)), 0, (0)), 100000000, 0, -163), (Tag3 ((("t", 733)), 0, (0)), 100000000, 0, -162), 0), 100000000, 0, -161), 0), 100000000, 0, -160), 0), 100000000, 0, -159), 0, (("typing/subst.mli", 36, 1680, 1680), ("typing/subst.mli", 36, 1680, 1721), 0), 0, Tag1 ("Subst", 3)), 0); (("add_type_path", 736), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -158), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -157), (Tag1 (0, (Tag3 ((("t", 733)), 0, (0)), 100000000, 0, -156), (Tag3 ((("t", 733)), 0, (0)), 100000000, 0, -155), 0), 100000000, 0, -154), 0), 100000000, 0, -153), 0), 100000000, 0, -152), 0, (("typing/subst.mli", 37, 1722, 1722), ("typing/subst.mli", 37, 1722, 1767), 0), 0, Tag1 ("Subst", 4)), 0); (("add_type_function", 737), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -151), (Tag1 (("params"), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -150)], (0)), 100000000, 0, -149), (Tag1 (("body"), (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -148), (Tag1 (0, (Tag3 ((("t", 733)), 0, (0)), 100000000, 0, -147), (Tag3 ((("t", 733)), 0, (0)), 100000000, 0, -146), 0), 100000000, 0, -145), 0), 100000000, 0, -144), 0), 100000000, 0, -143), 0), 100000000, 0, -142), 0, (("typing/subst.mli", 38, 1768, 1768), ("typing/subst.mli", 39, 1791, 1852), 0), 0, Tag1 ("Subst", 5)), 0); (("add_module", 738), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -141), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -140), (Tag1 (0, (Tag3 ((("t", 733)), 0, (0)), 100000000, 0, -139), (Tag3 ((("t", 733)), 0, (0)), 100000000, 0, -138), 0), 100000000, 0, -137), 0), 100000000, 0, -136), 0), 100000000, 0, -135), 0, (("typing/subst.mli", 40, 1853, 1853), ("typing/subst.mli", 40, 1853, 1896), 0), 0, Tag1 ("Subst", 6)), 0); (("add_module_path", 739), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -134), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -133), (Tag1 (0, (Tag3 ((("t", 733)), 0, (0)), 100000000, 0, -132), (Tag3 ((("t", 733)), 0, (0)), 100000000, 0, -131), 0), 100000000, 0, -130), 0), 100000000, 0, -129), 0), 100000000, 0, -128), 0, (("typing/subst.mli", 41, 1897, 1897), ("typing/subst.mli", 41, 1897, 1944), 0), 0, Tag1 ("Subst", 7)), 0); (("add_modtype", 740), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -127), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -126), (Tag1 (0, (Tag3 ((("t", 733)), 0, (0)), 100000000, 0, -125), (Tag3 ((("t", 733)), 0, (0)), 100000000, 0, -124), 0), 100000000, 0, -123), 0), 100000000, 0, -122), 0), 100000000, 0, -121), 0, (("typing/subst.mli", 42, 1945, 1945), ("typing/subst.mli", 42, 1945, 1994), 0), 0, Tag1 ("Subst", 8)), 0); (("add_modtype_path", 741), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -120), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -119), (Tag1 (0, (Tag3 ((("t", 733)), 0, (0)), 100000000, 0, -118), (Tag3 ((("t", 733)), 0, (0)), 100000000, 0, -117), 0), 100000000, 0, -116), 0), 100000000, 0, -115), 0), 100000000, 0, -114), 0, (("typing/subst.mli", 43, 1995, 1995), ("typing/subst.mli", 43, 1995, 2048), 0), 0, Tag1 ("Subst", 9)), 0); (("for_saving", 742), ((Tag1 (0, (Tag3 ((("t", 733)), 0, (0)), 100000000, 0, -113), (Tag3 ((("t", 733)), 0, (0)), 100000000, 0, -112), 0), 100000000, 0, -111), 0, (("typing/subst.mli", 45, 2050, 2050), ("typing/subst.mli", 45, 2050, 2072), 0), 0, Tag1 ("Subst", 10)), 0); (("reset_for_saving", 743), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -110), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -109), 0), 100000000, 0, -108), 0, (("typing/subst.mli", 46, 2073, 2073), ("typing/subst.mli", 46, 2073, 2107), 0), 0, Tag1 ("Subst", 11)), 0); (("change_locs", 744), ((Tag1 (0, (Tag3 ((("t", 733)), 0, (0)), 100000000, 0, -107), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -106), (Tag3 ((("t", 733)), 0, (0)), 100000000, 0, -105), 0), 100000000, 0, -104), 0), 100000000, 0, -103), 0, (("typing/subst.mli", 47, 2108, 2108), ("typing/subst.mli", 47, 2108, 2145), 0), 0, Tag1 ("Subst", 12)), 0); (("module_path", 745), ((Tag1 (0, (Tag3 ((("t", 733)), 0, (0)), 100000000, 0, -102), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -101), (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -100), 0), 100000000, 0, -99), 0), 100000000, 0, -98), 0, (("typing/subst.mli", 49, 2147, 2147), ("typing/subst.mli", 49, 2147, 2185), 0), 0, Tag1 ("Subst", 13)), 0); (("type_path", 746), ((Tag1 (0, (Tag3 ((("t", 733)), 0, (0)), 100000000, 0, -97), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -96), (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -95), 0), 100000000, 0, -94), 0), 100000000, 0, -93), 0, (("typing/subst.mli", 50, 2186, 2186), ("typing/subst.mli", 50, 2186, 2222), 0), 0, Tag1 ("Subst", 14)), 0); (("modtype_path", 747), ((Tag1 (0, (Tag3 ((("t", 733)), 0, (0)), 100000000, 0, -92), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -91), (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -90), 0), 100000000, 0, -89), 0), 100000000, 0, -88), 0, (("typing/subst.mli", 51, 2223, 2223), ("typing/subst.mli", 51, 2223, 2262), 0), 0, Tag1 ("Subst", 15)), 0); (("type_expr", 748), ((Tag1 (0, (Tag3 ((("t", 733)), 0, (0)), 100000000, 0, -87), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -86), (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -85), 0), 100000000, 0, -84), 0), 100000000, 0, -83), 0, (("typing/subst.mli", 53, 2264, 2264), ("typing/subst.mli", 53, 2264, 2306), 0), 0, Tag1 ("Subst", 16)), 0); (("class_type", 749), ((Tag1 (0, (Tag3 ((("t", 733)), 0, (0)), 100000000, 0, -82), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_type"), 0, (0)), 100000000, 0, -81), (Tag3 (Tag1 ((Tag2 ("Types")), "class_type"), 0, (0)), 100000000, 0, -80), 0), 100000000, 0, -79), 0), 100000000, 0, -78), 0, (("typing/subst.mli", 54, 2307, 2307), ("typing/subst.mli", 54, 2307, 2352), 0), 0, Tag1 ("Subst", 17)), 0); (("value_description", 750), ((Tag1 (0, (Tag3 ((("t", 733)), 0, (0)), 100000000, 0, -77), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "value_description"), 0, (0)), 100000000, 0, -76), (Tag3 (Tag1 ((Tag2 ("Types")), "value_description"), 0, (0)), 100000000, 0, -75), 0), 100000000, 0, -74), 0), 100000000, 0, -73), 0, (("typing/subst.mli", 55, 2353, 2353), ("typing/subst.mli", 55, 2353, 2419), 0), 0, Tag1 ("Subst", 18)), 0); (("type_declaration", 751), ((Tag1 (0, (Tag3 ((("t", 733)), 0, (0)), 100000000, 0, -72), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -71), (Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -70), 0), 100000000, 0, -69), 0), 100000000, 0, -68), 0, (("typing/subst.mli", 56, 2420, 2420), ("typing/subst.mli", 56, 2420, 2483), 0), 0, Tag1 ("Subst", 19)), 0); (("extension_constructor", 752), ((Tag1 (0, (Tag3 ((("t", 733)), 0, (0)), 100000000, 0, -67), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "extension_constructor"), 0, (0)), 100000000, 0, -66), (Tag3 (Tag1 ((Tag2 ("Types")), "extension_constructor"), 0, (0)), 100000000, 0, -65), 0), 100000000, 0, -64), 0), 100000000, 0, -63), 0, (("typing/subst.mli", 57, 2484, 2484), ("typing/subst.mli", 58, 2511, 2570), 0), 0, Tag1 ("Subst", 20)), 0); (("class_declaration", 753), ((Tag1 (0, (Tag3 ((("t", 733)), 0, (0)), 100000000, 0, -62), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_declaration"), 0, (0)), 100000000, 0, -61), (Tag3 (Tag1 ((Tag2 ("Types")), "class_declaration"), 0, (0)), 100000000, 0, -60), 0), 100000000, 0, -59), 0), 100000000, 0, -58), 0, (("typing/subst.mli", 59, 2571, 2571), ("typing/subst.mli", 59, 2571, 2637), 0), 0, Tag1 ("Subst", 21)), 0); (("cltype_declaration", 754), ((Tag1 (0, (Tag3 ((("t", 733)), 0, (0)), 100000000, 0, -57), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_type_declaration"), 0, (0)), 100000000, 0, -56), (Tag3 (Tag1 ((Tag2 ("Types")), "class_type_declaration"), 0, (0)), 100000000, 0, -55), 0), 100000000, 0, -54), 0), 100000000, 0, -53), 0, (("typing/subst.mli", 60, 2638, 2638), ("typing/subst.mli", 60, 2638, 2715), 0), 0, Tag1 ("Subst", 22)), 0); Tag1 (("scoping", 755), (0, 0, Tag1 ([(("Keep", 520), (0), 0, (("typing/subst.mli", 72, 3102, 3104), ("typing/subst.mli", 72, 3102, 3110), 0), 0, Tag1 ("Subst", 24)); (("Make_local", 521), (0), 0, (("typing/subst.mli", 73, 3111, 3113), ("typing/subst.mli", 73, 3111, 3125), 0), 0, Tag1 ("Subst", 25)); (("Rescope", 522), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -52)]), 0, (("typing/subst.mli", 74, 3126, 3128), ("typing/subst.mli", 74, 3126, 3144), 0), 0, Tag1 ("Subst", 26))], 0), 1, 0, 0, 0, 0, 0, (("typing/subst.mli", 71, 3087, 3087), ("typing/subst.mli", 74, 3126, 3144), 0), 0, 0, 0, Tag1 ("Subst", 23)), 1, 0); (("modtype", 756), ((Tag1 (0, (Tag3 ((("scoping", 755)), 0, (0)), 100000000, 0, -51), (Tag1 (0, (Tag3 ((("t", 733)), 0, (0)), 100000000, 0, -50), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -49), (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -48), 0), 100000000, 0, -47), 0), 100000000, 0, -46), 0), 100000000, 0, -45), 0, (("typing/subst.mli", 76, 3146, 3146), ("typing/subst.mli", 76, 3146, 3201), 0), 0, Tag1 ("Subst", 27)), 0); (("signature", 757), ((Tag1 (0, (Tag3 ((("scoping", 755)), 0, (0)), 100000000, 0, -44), (Tag1 (0, (Tag3 ((("t", 733)), 0, (0)), 100000000, 0, -43), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "signature"), 0, (0)), 100000000, 0, -42), (Tag3 (Tag1 ((Tag2 ("Types")), "signature"), 0, (0)), 100000000, 0, -41), 0), 100000000, 0, -40), 0), 100000000, 0, -39), 0), 100000000, 0, -38), 0, (("typing/subst.mli", 77, 3202, 3202), ("typing/subst.mli", 77, 3202, 3255), 0), 0, Tag1 ("Subst", 28)), 0); (("signature_item", 758), ((Tag1 (0, (Tag3 ((("scoping", 755)), 0, (0)), 100000000, 0, -37), (Tag1 (0, (Tag3 ((("t", 733)), 0, (0)), 100000000, 0, -36), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "signature_item"), 0, (0)), 100000000, 0, -35), (Tag3 (Tag1 ((Tag2 ("Types")), "signature_item"), 0, (0)), 100000000, 0, -34), 0), 100000000, 0, -33), 0), 100000000, 0, -32), 0), 100000000, 0, -31), 0, (("typing/subst.mli", 78, 3256, 3256), ("typing/subst.mli", 78, 3256, 3324), 0), 0, Tag1 ("Subst", 29)), 0); (("modtype_declaration", 759), ((Tag1 (0, (Tag3 ((("scoping", 755)), 0, (0)), 100000000, 0, -30), (Tag1 (0, (Tag3 ((("t", 733)), 0, (0)), 100000000, 0, -29), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "modtype_declaration"), 0, (0)), 100000000, 0, -28), (Tag3 (Tag1 ((Tag2 ("Types")), "modtype_declaration"), 0, (0)), 100000000, 0, -27), 0), 100000000, 0, -26), 0), 100000000, 0, -25), 0), 100000000, 0, -24), 0, (("typing/subst.mli", 79, 3325, 3325), ("typing/subst.mli", 80, 3350, 3410), 0), 0, Tag1 ("Subst", 30)), 0); (("module_declaration", 760), ((Tag1 (0, (Tag3 ((("scoping", 755)), 0, (0)), 100000000, 0, -23), (Tag1 (0, (Tag3 ((("t", 733)), 0, (0)), 100000000, 0, -22), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_declaration"), 0, (0)), 100000000, 0, -21), (Tag3 (Tag1 ((Tag2 ("Types")), "module_declaration"), 0, (0)), 100000000, 0, -20), 0), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("typing/subst.mli", 81, 3411, 3411), ("typing/subst.mli", 81, 3411, 3491), 0), 0, Tag1 ("Subst", 31)), 0); (("compose", 761), ((Tag1 (0, (Tag3 ((("t", 733)), 0, (0)), 100000000, 0, -16), (Tag1 (0, (Tag3 ((("t", 733)), 0, (0)), 100000000, 0, -15), (Tag3 ((("t", 733)), 0, (0)), 100000000, 0, -14), 0), 100000000, 0, -13), 0), 100000000, 0, -12), 0, (("typing/subst.mli", 85, 3582, 3582), ("typing/subst.mli", 85, 3582, 3606), 0), 0, Tag1 ("Subst", 32)), 0); (("ctype_apply_env_empty", 762), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -11)], (0)), 100000000, 0, -10), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -9), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -8)], (0)), 100000000, 0, -7), (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3)], (0)), 100000000, 0, -2), 0, (("typing/subst.mli", 88, 3660, 3660), ("typing/subst.mli", 89, 3687, 3753), 0), 0, Tag1 ("Subst", 33)), 0); Tag3 (("Lazy", 763), 0, (Tag1 ([Tag1 (("module_decl", 764), (0, 0, [[(("mdl_type", 536), 0, (Tag3 ((("modtype", 765)), 0, (0)), 100000000, 0, -280), (("typing/subst.mli", 95, 3801, 3807), ("typing/subst.mli", 95, 3801, 3825), 0), 0, Tag1 ("Subst", 43)); (("mdl_attributes", 610), 0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "attributes"), 0, (0)), 100000000, 0, -281), (("typing/subst.mli", 96, 3826, 3832), ("typing/subst.mli", 96, 3826, 3869), 0), 0, Tag1 ("Subst", 44)); (("mdl_loc", 611), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -282), (("typing/subst.mli", 97, 3870, 3876), ("typing/subst.mli", 97, 3870, 3896), 0), 0, Tag1 ("Subst", 45)); (("mdl_uid", 654), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Types")), "Uid"), "t"), 0, (0)), 100000000, 0, -283), (("typing/subst.mli", 98, 3897, 3903), ("typing/subst.mli", 98, 3897, 3918), 0), 0, Tag1 ("Subst", 46))]], 1, 0, 0, 0, 0, 0, (("typing/subst.mli", 93, 3774, 3776), ("typing/subst.mli", 99, 3919, 3924), 0), 0, 0, 0, Tag1 ("Subst", 34)), 1, 0); Tag1 (("modtype", 765), (0, 0, Tag1 ([(("MtyL_ident", 655), ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -275)]), 0, (("typing/subst.mli", 102, 3942, 3946), ("typing/subst.mli", 102, 3942, 3968), 0), 0, Tag1 ("Subst", 47)); (("MtyL_signature", 656), ([(Tag3 ((("signature", 767)), 0, (0)), 100000000, 0, -276)]), 0, (("typing/subst.mli", 103, 3969, 3973), ("typing/subst.mli", 103, 3969, 4002), 0), 0, Tag1 ("Subst", 48)); (("MtyL_functor", 657), ([(Tag3 ((("functor_parameter", 769)), 0, (0)), 100000000, 0, -277); (Tag3 ((("modtype", 765)), 0, (0)), 100000000, 0, -278)]), 0, (("typing/subst.mli", 104, 4003, 4007), ("typing/subst.mli", 104, 4003, 4052), 0), 0, Tag1 ("Subst", 49)); (("MtyL_alias", 658), ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -279)]), 0, (("typing/subst.mli", 105, 4053, 4057), ("typing/subst.mli", 105, 4053, 4079), 0), 0, Tag1 ("Subst", 50))], 0), 1, 0, 0, 0, 0, 0, (("typing/subst.mli", 101, 3926, 3928), ("typing/subst.mli", 105, 4053, 4079), 0), 0, 0, 0, Tag1 ("Subst", 35)), 2, 0); Tag1 (("modtype_declaration", 766), (0, 0, [[(("mtdl_type", 659), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("modtype", 765)), 0, (0)), 100000000, 0, -271)], (0)), 100000000, 0, -270), (("typing/subst.mli", 109, 4115, 4121), ("typing/subst.mli", 109, 4115, 4147), 0), 0, Tag1 ("Subst", 51)); (("mtdl_attributes", 660), 0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "attributes"), 0, (0)), 100000000, 0, -272), (("typing/subst.mli", 110, 4170, 4176), ("typing/subst.mli", 110, 4170, 4214), 0), 0, Tag1 ("Subst", 52)); (("mtdl_loc", 661), 0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -273), (("typing/subst.mli", 111, 4215, 4221), ("typing/subst.mli", 111, 4215, 4242), 0), 0, Tag1 ("Subst", 53)); (("mtdl_uid", 662), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Types")), "Uid"), "t"), 0, (0)), 100000000, 0, -274), (("typing/subst.mli", 112, 4243, 4249), ("typing/subst.mli", 112, 4243, 4265), 0), 0, Tag1 ("Subst", 54))]], 1, 0, 0, 0, 0, 0, (("typing/subst.mli", 107, 4081, 4083), ("typing/subst.mli", 113, 4266, 4271), 0), 0, 0, 0, Tag1 ("Subst", 36)), 2, 0); Tag1 (("signature", 767), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("typing/subst.mli", 115, 4273, 4275), ("typing/subst.mli", 115, 4273, 4288), 0), 0, 0, 0, Tag1 ("Subst", 37)), 2, 0); Tag1 (("signature_item", 768), (0, 0, Tag1 ([(("SigL_value", 663), ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -243); (Tag3 (Tag1 ((Tag2 ("Types")), "value_description"), 0, (0)), 100000000, 0, -244); (Tag3 (Tag1 ((Tag2 ("Types")), "visibility"), 0, (0)), 100000000, 0, -245)]), 0, (("typing/subst.mli", 118, 4313, 4319), ("typing/subst.mli", 118, 4313, 4373), 0), 0, Tag1 ("Subst", 55)); (("SigL_type", 664), ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -246); (Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -247); (Tag3 (Tag1 ((Tag2 ("Types")), "rec_status"), 0, (0)), 100000000, 0, -248); (Tag3 (Tag1 ((Tag2 ("Types")), "visibility"), 0, (0)), 100000000, 0, -249)]), 0, (("typing/subst.mli", 119, 4374, 4378), ("typing/subst.mli", 119, 4374, 4445), 0), 0, Tag1 ("Subst", 56)); (("SigL_typext", 665), ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -250); (Tag3 (Tag1 ((Tag2 ("Types")), "extension_constructor"), 0, (0)), 100000000, 0, -251); (Tag3 (Tag1 ((Tag2 ("Types")), "ext_status"), 0, (0)), 100000000, 0, -252); (Tag3 (Tag1 ((Tag2 ("Types")), "visibility"), 0, (0)), 100000000, 0, -253)]), 0, (("typing/subst.mli", 120, 4446, 4450), ("typing/subst.mli", 120, 4446, 4524), 0), 0, Tag1 ("Subst", 57)); (("SigL_module", 666), ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -254); (Tag3 (Tag1 ((Tag2 ("Types")), "module_presence"), 0, (0)), 100000000, 0, -255); (Tag3 ((("module_decl", 764)), 0, (0)), 100000000, 0, -256); (Tag3 (Tag1 ((Tag2 ("Types")), "rec_status"), 0, (0)), 100000000, 0, -257); (Tag3 (Tag1 ((Tag2 ("Types")), "visibility"), 0, (0)), 100000000, 0, -258)]), 0, (("typing/subst.mli", 121, 4525, 4529), ("typing/subst.mli", 122, 4546, 4619), 0), 0, Tag1 ("Subst", 58)); (("SigL_modtype", 667), ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -259); (Tag3 ((("modtype_declaration", 766)), 0, (0)), 100000000, 0, -260); (Tag3 (Tag1 ((Tag2 ("Types")), "visibility"), 0, (0)), 100000000, 0, -261)]), 0, (("typing/subst.mli", 123, 4620, 4624), ("typing/subst.mli", 123, 4620, 4684), 0), 0, Tag1 ("Subst", 59)); (("SigL_class", 668), ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -262); (Tag3 (Tag1 ((Tag2 ("Types")), "class_declaration"), 0, (0)), 100000000, 0, -263); (Tag3 (Tag1 ((Tag2 ("Types")), "rec_status"), 0, (0)), 100000000, 0, -264); (Tag3 (Tag1 ((Tag2 ("Types")), "visibility"), 0, (0)), 100000000, 0, -265)]), 0, (("typing/subst.mli", 124, 4685, 4689), ("typing/subst.mli", 124, 4685, 4758), 0), 0, Tag1 ("Subst", 60)); (("SigL_class_type", 669), ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -266); (Tag3 (Tag1 ((Tag2 ("Types")), "class_type_declaration"), 0, (0)), 100000000, 0, -267); (Tag3 (Tag1 ((Tag2 ("Types")), "rec_status"), 0, (0)), 100000000, 0, -268); (Tag3 (Tag1 ((Tag2 ("Types")), "visibility"), 0, (0)), 100000000, 0, -269)]), 0, (("typing/subst.mli", 125, 4759, 4763), ("typing/subst.mli", 126, 4819, 4869), 0), 0, Tag1 ("Subst", 61))], 0), 1, 0, 0, 0, 0, 0, (("typing/subst.mli", 117, 4290, 4292), ("typing/subst.mli", 126, 4819, 4869), 0), 0, 0, 0, Tag1 ("Subst", 38)), 2, 0); Tag1 (("functor_parameter", 769), (0, 0, Tag1 ([(("Unit", 670), (0), 0, (("typing/subst.mli", 129, 4897, 4901), ("typing/subst.mli", 129, 4897, 4907), 0), 0, Tag1 ("Subst", 62)); (("Named", 671), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -241)], (0)), 100000000, 0, -240); (Tag3 ((("modtype", 765)), 0, (0)), 100000000, 0, -242)]), 0, (("typing/subst.mli", 130, 4908, 4912), ("typing/subst.mli", 130, 4908, 4947), 0), 0, Tag1 ("Subst", 63))], 0), 1, 0, 0, 0, 0, 0, (("typing/subst.mli", 128, 4871, 4873), ("typing/subst.mli", 130, 4908, 4947), 0), 0, 0, 0, Tag1 ("Subst", 39)), 2, 0); (("of_module_decl", 770), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_declaration"), 0, (0)), 100000000, 0, -239), (Tag3 ((("module_decl", 764)), 0, (0)), 100000000, 0, -238), 0), 100000000, 0, -237), 0, (("typing/subst.mli", 133, 4950, 4952), ("typing/subst.mli", 133, 4950, 5012), 0), 0, Tag1 ("Subst", 65)), 0); (("of_modtype", 771), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -236), (Tag3 ((("modtype", 765)), 0, (0)), 100000000, 0, -235), 0), 100000000, 0, -234), 0, (("typing/subst.mli", 134, 5013, 5015), ("typing/subst.mli", 134, 5013, 5060), 0), 0, Tag1 ("Subst", 66)), 0); (("of_modtype_decl", 772), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "modtype_declaration"), 0, (0)), 100000000, 0, -233), (Tag3 ((("modtype_declaration", 766)), 0, (0)), 100000000, 0, -232), 0), 100000000, 0, -231), 0, (("typing/subst.mli", 135, 5061, 5063), ("typing/subst.mli", 135, 5061, 5133), 0), 0, Tag1 ("Subst", 67)), 0); (("of_signature", 773), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "signature"), 0, (0)), 100000000, 0, -230), (Tag3 ((("signature", 767)), 0, (0)), 100000000, 0, -229), 0), 100000000, 0, -228), 0, (("typing/subst.mli", 136, 5134, 5136), ("typing/subst.mli", 136, 5134, 5183), 0), 0, Tag1 ("Subst", 68)), 0); (("of_signature_items", 774), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("signature_item", 768)), 0, (0)), 100000000, 0, -227)], (0)), 100000000, 0, -226), (Tag3 ((("signature", 767)), 0, (0)), 100000000, 0, -225), 0), 100000000, 0, -224), 0, (("typing/subst.mli", 137, 5184, 5186), ("typing/subst.mli", 137, 5184, 5243), 0), 0, Tag1 ("Subst", 69)), 0); (("of_signature_item", 775), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "signature_item"), 0, (0)), 100000000, 0, -223), (Tag3 ((("signature_item", 768)), 0, (0)), 100000000, 0, -222), 0), 100000000, 0, -221), 0, (("typing/subst.mli", 138, 5244, 5246), ("typing/subst.mli", 138, 5244, 5308), 0), 0, Tag1 ("Subst", 70)), 0); (("module_decl", 776), ((Tag1 (0, (Tag3 ((("scoping", 755)), 0, (0)), 100000000, 0, -220), (Tag1 (0, (Tag3 ((("t", 733)), 0, (0)), 100000000, 0, -219), (Tag1 (0, (Tag3 ((("module_decl", 764)), 0, (0)), 100000000, 0, -218), (Tag3 ((("module_decl", 764)), 0, (0)), 100000000, 0, -217), 0), 100000000, 0, -216), 0), 100000000, 0, -215), 0), 100000000, 0, -214), 0, (("typing/subst.mli", 140, 5310, 5312), ("typing/subst.mli", 140, 5310, 5372), 0), 0, Tag1 ("Subst", 71)), 0); (("modtype", 777), ((Tag1 (0, (Tag3 ((("scoping", 755)), 0, (0)), 100000000, 0, -213), (Tag1 (0, (Tag3 ((("t", 733)), 0, (0)), 100000000, 0, -212), (Tag1 (0, (Tag3 ((("modtype", 765)), 0, (0)), 100000000, 0, -211), (Tag3 ((("modtype", 765)), 0, (0)), 100000000, 0, -210), 0), 100000000, 0, -209), 0), 100000000, 0, -208), 0), 100000000, 0, -207), 0, (("typing/subst.mli", 141, 5373, 5375), ("typing/subst.mli", 141, 5373, 5423), 0), 0, Tag1 ("Subst", 72)), 0); (("modtype_decl", 778), ((Tag1 (0, (Tag3 ((("scoping", 755)), 0, (0)), 100000000, 0, -206), (Tag1 (0, (Tag3 ((("t", 733)), 0, (0)), 100000000, 0, -205), (Tag1 (0, (Tag3 ((("modtype_declaration", 766)), 0, (0)), 100000000, 0, -204), (Tag3 ((("modtype_declaration", 766)), 0, (0)), 100000000, 0, -203), 0), 100000000, 0, -202), 0), 100000000, 0, -201), 0), 100000000, 0, -200), 0, (("typing/subst.mli", 142, 5424, 5426), ("typing/subst.mli", 142, 5424, 5503), 0), 0, Tag1 ("Subst", 73)), 0); (("signature", 779), ((Tag1 (0, (Tag3 ((("scoping", 755)), 0, (0)), 100000000, 0, -199), (Tag1 (0, (Tag3 ((("t", 733)), 0, (0)), 100000000, 0, -198), (Tag1 (0, (Tag3 ((("signature", 767)), 0, (0)), 100000000, 0, -197), (Tag3 ((("signature", 767)), 0, (0)), 100000000, 0, -196), 0), 100000000, 0, -195), 0), 100000000, 0, -194), 0), 100000000, 0, -193), 0, (("typing/subst.mli", 143, 5504, 5506), ("typing/subst.mli", 143, 5504, 5560), 0), 0, Tag1 ("Subst", 74)), 0); (("signature_item", 780), ((Tag1 (0, (Tag3 ((("scoping", 755)), 0, (0)), 100000000, 0, -192), (Tag1 (0, (Tag3 ((("t", 733)), 0, (0)), 100000000, 0, -191), (Tag1 (0, (Tag3 ((("signature_item", 768)), 0, (0)), 100000000, 0, -190), (Tag3 ((("signature_item", 768)), 0, (0)), 100000000, 0, -189), 0), 100000000, 0, -188), 0), 100000000, 0, -187), 0), 100000000, 0, -186), 0, (("typing/subst.mli", 144, 5561, 5563), ("typing/subst.mli", 144, 5561, 5632), 0), 0, Tag1 ("Subst", 75)), 0); (("force_module_decl", 781), ((Tag1 (0, (Tag3 ((("module_decl", 764)), 0, (0)), 100000000, 0, -185), (Tag3 (Tag1 ((Tag2 ("Types")), "module_declaration"), 0, (0)), 100000000, 0, -184), 0), 100000000, 0, -183), 0, (("typing/subst.mli", 146, 5634, 5636), ("typing/subst.mli", 146, 5634, 5699), 0), 0, Tag1 ("Subst", 76)), 0); (("force_modtype", 782), ((Tag1 (0, (Tag3 ((("modtype", 765)), 0, (0)), 100000000, 0, -182), (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -181), 0), 100000000, 0, -180), 0, (("typing/subst.mli", 147, 5700, 5702), ("typing/subst.mli", 147, 5700, 5750), 0), 0, Tag1 ("Subst", 77)), 0); (("force_modtype_decl", 783), ((Tag1 (0, (Tag3 ((("modtype_declaration", 766)), 0, (0)), 100000000, 0, -179), (Tag3 (Tag1 ((Tag2 ("Types")), "modtype_declaration"), 0, (0)), 100000000, 0, -178), 0), 100000000, 0, -177), 0, (("typing/subst.mli", 148, 5751, 5753), ("typing/subst.mli", 148, 5751, 5826), 0), 0, Tag1 ("Subst", 78)), 0); (("force_signature", 784), ((Tag1 (0, (Tag3 ((("signature", 767)), 0, (0)), 100000000, 0, -176), (Tag3 (Tag1 ((Tag2 ("Types")), "signature"), 0, (0)), 100000000, 0, -175), 0), 100000000, 0, -174), 0, (("typing/subst.mli", 149, 5827, 5829), ("typing/subst.mli", 149, 5827, 5879), 0), 0, Tag1 ("Subst", 79)), 0); (("force_signature_once", 785), ((Tag1 (0, (Tag3 ((("signature", 767)), 0, (0)), 100000000, 0, -173), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("signature_item", 768)), 0, (0)), 100000000, 0, -172)], (0)), 100000000, 0, -171), 0), 100000000, 0, -170), 0, (("typing/subst.mli", 150, 5880, 5882), ("typing/subst.mli", 150, 5880, 5941), 0), 0, Tag1 ("Subst", 80)), 0); (("force_signature_item", 786), ((Tag1 (0, (Tag3 ((("signature_item", 768)), 0, (0)), 100000000, 0, -169), (Tag3 (Tag1 ((Tag2 ("Types")), "signature_item"), 0, (0)), 100000000, 0, -168), 0), 100000000, 0, -167), 0, (("typing/subst.mli", 151, 5942, 5944), ("typing/subst.mli", 151, 5942, 6009), 0), 0, Tag1 ("Subst", 81)), 0)]), 0, (("typing/subst.mli", 92, 3756, 3756), ("typing/subst.mli", 152, 6010, 6013), 0), Tag1 ("Subst", 82)), 0, 0)], "Subst", [("Subst", ("\021\031\148\223\127\186\189\135\027}\145r\216\143\177\156")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Types", ("\177\238\029.\220\006\163!\230\015\006\182\133\155\194\166")); ("Type_immediacy", ("\"\127k\011Q\241\211\138\193;8\142\129\141#\251")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shape", ("\235\127Y\213\025\137=\244\218\181\248N\189\188\216p")); ("Primitive", ("}Shh\162\015|\220A\203\249\232\245G\213\019")); ("Path", ("\012\183\178\025\1298\228*\021r\185\160Y\252\n\026")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Outcometree", ("9\021%\234\211\206\210\004H\165\208\2014\234Q\142")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Identifiable", ("\004F\207\014\158GU\001\184\214\187%/#;\211")); ("Ident", ("\b9;!\187.\220\163(x\b\174\\\223\020\004")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216"))], [(0)])

  end

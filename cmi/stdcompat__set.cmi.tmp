module type OrderedType = sig type t val compare : t -> t -> int end
module type S =
  sig
    type elt
    type t
    val empty : t
    val is_empty : t -> bool
    val mem : elt -> t -> bool
    val add : elt -> t -> t
    val singleton : elt -> t
    val remove : elt -> t -> t
    val union : t -> t -> t
    val inter : t -> t -> t
    val disjoint : t -> t -> bool
    val diff : t -> t -> t
    val compare : t -> t -> int
    val equal : t -> t -> bool
    val subset : t -> t -> bool
    val iter : (elt -> unit) -> t -> unit
    val map : (elt -> elt) -> t -> t
    val fold : (elt -> 'a -> 'a) -> t -> 'a -> 'a
    val for_all : (elt -> bool) -> t -> bool
    val exists : (elt -> bool) -> t -> bool
    val filter : (elt -> bool) -> t -> t
    val filter_map : (elt -> elt option) -> t -> t
    val partition : (elt -> bool) -> t -> t * t
    val cardinal : t -> int
    val elements : t -> elt list
    val min_elt : t -> elt
    val min_elt_opt : t -> elt option
    val max_elt : t -> elt
    val max_elt_opt : t -> elt option
    val choose : t -> elt
    val choose_opt : t -> elt option
    val split : elt -> t -> t * bool * t
    val find : elt -> t -> elt
    val find_opt : elt -> t -> elt option
    val find_first : (elt -> bool) -> t -> elt
    val find_first_opt : (elt -> bool) -> t -> elt option
    val find_last : (elt -> bool) -> t -> elt
    val find_last_opt : (elt -> bool) -> t -> elt option
    val of_list : elt list -> t
    val to_seq_from : elt -> t -> elt Seq.t
    val to_seq : t -> elt Seq.t
    val to_rev_seq : t -> elt Seq.t
    val add_seq : elt Seq.t -> t -> t
    val of_seq : elt Seq.t -> t
  end("DEBUG:rule", [Tag4 (("OrderedType", 536), ((Tag1 ([Tag1 (("t", 539), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("stdcompat__set_s.mli", 2, 20, 50), ("stdcompat__set_s.mli", 2, 20, 56), 0), 0, 0, 0, Tag1 ("Stdcompat__set_s", 0)), 1, 0); (("compare", 540), ((Tag1 (0, (Tag3 ((("t", 539)), 0, (0)), 100000000, 0, -6), (Tag1 (0, (Tag3 ((("t", 539)), 0, (0)), 100000000, 0, -5), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("stdcompat__set_s.mli", 2, 20, 57), ("stdcompat__set_s.mli", 2, 20, 84), 0), 0, Tag1 ("Stdcompat__set_s", 1)), 0)])), 0, (("stdcompat__set_s.mli", 2, 20, 20), ("stdcompat__set_s.mli", 2, 20, 88), 0), Tag1 ("Stdcompat__set_s", 2)), 0); Tag4 (("S", 537), ((Tag1 ([Tag1 (("elt", 541), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("stdcompat__set_s.mli", 7, 143, 147), ("stdcompat__set_s.mli", 7, 143, 155), 0), 0, 0, 0, Tag1 ("Stdcompat__set_s", 3)), 1, 0); Tag1 (("t", 542), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("stdcompat__set_s.mli", 7, 143, 156), ("stdcompat__set_s.mli", 7, 143, 162), 0), 0, 0, 0, Tag1 ("Stdcompat__set_s", 4)), 1, 0); (("empty", 543), ((Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -228), 0, (("stdcompat__set_s.mli", 7, 143, 163), ("stdcompat__set_s.mli", 7, 143, 176), 0), 0, Tag1 ("Stdcompat__set_s", 5)), 0); (("is_empty", 544), ((Tag1 (0, (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -227), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -226), 0), 100000000, 0, -225), 0, (("stdcompat__set_s.mli", 7, 143, 177), ("stdcompat__set_s.mli", 7, 143, 201), 0), 0, Tag1 ("Stdcompat__set_s", 6)), 0); (("mem", 545), ((Tag1 (0, (Tag3 ((("elt", 541)), 0, (0)), 100000000, 0, -224), (Tag1 (0, (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -223), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -222), 0), 100000000, 0, -221), 0), 100000000, 0, -220), 0, (("stdcompat__set_s.mli", 8, 202, 202), ("stdcompat__set_s.mli", 8, 202, 228), 0), 0, Tag1 ("Stdcompat__set_s", 7)), 0); (("add", 546), ((Tag1 (0, (Tag3 ((("elt", 541)), 0, (0)), 100000000, 0, -219), (Tag1 (0, (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -218), (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -217), 0), 100000000, 0, -216), 0), 100000000, 0, -215), 0, (("stdcompat__set_s.mli", 8, 202, 229), ("stdcompat__set_s.mli", 8, 202, 252), 0), 0, Tag1 ("Stdcompat__set_s", 8)), 0); (("singleton", 547), ((Tag1 (0, (Tag3 ((("elt", 541)), 0, (0)), 100000000, 0, -214), (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -213), 0), 100000000, 0, -212), 0, (("stdcompat__set_s.mli", 8, 202, 253), ("stdcompat__set_s.mli", 8, 202, 277), 0), 0, Tag1 ("Stdcompat__set_s", 9)), 0); (("remove", 548), ((Tag1 (0, (Tag3 ((("elt", 541)), 0, (0)), 100000000, 0, -211), (Tag1 (0, (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -210), (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -209), 0), 100000000, 0, -208), 0), 100000000, 0, -207), 0, (("stdcompat__set_s.mli", 9, 278, 278), ("stdcompat__set_s.mli", 9, 278, 304), 0), 0, Tag1 ("Stdcompat__set_s", 10)), 0); (("union", 549), ((Tag1 (0, (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -206), (Tag1 (0, (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -205), (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -204), 0), 100000000, 0, -203), 0), 100000000, 0, -202), 0, (("stdcompat__set_s.mli", 9, 278, 305), ("stdcompat__set_s.mli", 9, 278, 328), 0), 0, Tag1 ("Stdcompat__set_s", 11)), 0); (("inter", 550), ((Tag1 (0, (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -201), (Tag1 (0, (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -200), (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -199), 0), 100000000, 0, -198), 0), 100000000, 0, -197), 0, (("stdcompat__set_s.mli", 9, 278, 329), ("stdcompat__set_s.mli", 9, 278, 352), 0), 0, Tag1 ("Stdcompat__set_s", 12)), 0); (("disjoint", 551), ((Tag1 (0, (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -196), (Tag1 (0, (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -195), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -194), 0), 100000000, 0, -193), 0), 100000000, 0, -192), 0, (("stdcompat__set_s.mli", 10, 353, 353), ("stdcompat__set_s.mli", 10, 353, 382), 0), 0, Tag1 ("Stdcompat__set_s", 13)), 0); (("diff", 552), ((Tag1 (0, (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -191), (Tag1 (0, (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -190), (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -189), 0), 100000000, 0, -188), 0), 100000000, 0, -187), 0, (("stdcompat__set_s.mli", 10, 353, 383), ("stdcompat__set_s.mli", 10, 353, 405), 0), 0, Tag1 ("Stdcompat__set_s", 14)), 0); (("compare", 553), ((Tag1 (0, (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -186), (Tag1 (0, (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -185), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -184), 0), 100000000, 0, -183), 0), 100000000, 0, -182), 0, (("stdcompat__set_s.mli", 11, 406, 406), ("stdcompat__set_s.mli", 11, 406, 433), 0), 0, Tag1 ("Stdcompat__set_s", 15)), 0); (("equal", 554), ((Tag1 (0, (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -181), (Tag1 (0, (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -180), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -179), 0), 100000000, 0, -178), 0), 100000000, 0, -177), 0, (("stdcompat__set_s.mli", 11, 406, 434), ("stdcompat__set_s.mli", 11, 406, 460), 0), 0, Tag1 ("Stdcompat__set_s", 16)), 0); (("subset", 555), ((Tag1 (0, (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -176), (Tag1 (0, (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -175), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -174), 0), 100000000, 0, -173), 0), 100000000, 0, -172), 0, (("stdcompat__set_s.mli", 12, 461, 461), ("stdcompat__set_s.mli", 12, 461, 488), 0), 0, Tag1 ("Stdcompat__set_s", 17)), 0); (("iter", 556), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 541)), 0, (0)), 100000000, 0, -171), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -170), 0), 100000000, 0, -169), (Tag1 (0, (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -168), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -167), 0), 100000000, 0, -166), 0), 100000000, 0, -165), 0, (("stdcompat__set_s.mli", 12, 461, 489), ("stdcompat__set_s.mli", 12, 461, 526), 0), 0, Tag1 ("Stdcompat__set_s", 18)), 0); (("map", 557), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 541)), 0, (0)), 100000000, 0, -164), (Tag3 ((("elt", 541)), 0, (0)), 100000000, 0, -163), 0), 100000000, 0, -162), (Tag1 (0, (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -161), (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -160), 0), 100000000, 0, -159), 0), 100000000, 0, -158), 0, (("stdcompat__set_s.mli", 13, 527, 527), ("stdcompat__set_s.mli", 13, 527, 559), 0), 0, Tag1 ("Stdcompat__set_s", 19)), 0); (("fold", 558), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 541)), 0, (0)), 100000000, 0, -157), (Tag1 (0, ((("a")), 100000000, 0, -153), ((("a")), 100000000, 0, -153), 0), 100000000, 0, -156), 0), 100000000, 0, -155), (Tag1 (0, (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -154), (Tag1 (0, ((("a")), 100000000, 0, -153), ((("a")), 100000000, 0, -153), 0), 100000000, 0, -152), 0), 100000000, 0, -151), 0), 100000000, 0, -150), 0, (("stdcompat__set_s.mli", 14, 560, 560), ("stdcompat__set_s.mli", 14, 560, 605), 0), 0, Tag1 ("Stdcompat__set_s", 20)), 0); (("for_all", 559), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 541)), 0, (0)), 100000000, 0, -149), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -148), 0), 100000000, 0, -147), (Tag1 (0, (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -146), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -145), 0), 100000000, 0, -144), 0), 100000000, 0, -143), 0, (("stdcompat__set_s.mli", 15, 606, 606), ("stdcompat__set_s.mli", 15, 606, 646), 0), 0, Tag1 ("Stdcompat__set_s", 21)), 0); (("exists", 560), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 541)), 0, (0)), 100000000, 0, -142), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -141), 0), 100000000, 0, -140), (Tag1 (0, (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -139), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -138), 0), 100000000, 0, -137), 0), 100000000, 0, -136), 0, (("stdcompat__set_s.mli", 16, 647, 647), ("stdcompat__set_s.mli", 16, 647, 686), 0), 0, Tag1 ("Stdcompat__set_s", 22)), 0); (("filter", 561), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 541)), 0, (0)), 100000000, 0, -135), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -134), 0), 100000000, 0, -133), (Tag1 (0, (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -132), (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -131), 0), 100000000, 0, -130), 0), 100000000, 0, -129), 0, (("stdcompat__set_s.mli", 16, 647, 687), ("stdcompat__set_s.mli", 16, 647, 723), 0), 0, Tag1 ("Stdcompat__set_s", 23)), 0); (("filter_map", 562), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 541)), 0, (0)), 100000000, 0, -128), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 541)), 0, (0)), 100000000, 0, -127)], (0)), 100000000, 0, -126), 0), 100000000, 0, -125), (Tag1 (0, (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -124), (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -123), 0), 100000000, 0, -122), 0), 100000000, 0, -121), 0, (("stdcompat__set_s.mli", 17, 724, 724), ("stdcompat__set_s.mli", 17, 724, 770), 0), 0, Tag1 ("Stdcompat__set_s", 24)), 0); (("partition", 563), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 541)), 0, (0)), 100000000, 0, -120), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -119), 0), 100000000, 0, -118), (Tag1 (0, (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -117), (Tag2 ([(Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -115); (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -116)]), 100000000, 0, -114), 0), 100000000, 0, -113), 0), 100000000, 0, -112), 0, (("stdcompat__set_s.mli", 18, 771, 771), ("stdcompat__set_s.mli", 18, 771, 816), 0), 0, Tag1 ("Stdcompat__set_s", 25)), 0); (("cardinal", 564), ((Tag1 (0, (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -111), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -110), 0), 100000000, 0, -109), 0, (("stdcompat__set_s.mli", 18, 771, 817), ("stdcompat__set_s.mli", 18, 771, 840), 0), 0, Tag1 ("Stdcompat__set_s", 26)), 0); (("elements", 565), ((Tag1 (0, (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -108), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 541)), 0, (0)), 100000000, 0, -107)], (0)), 100000000, 0, -106), 0), 100000000, 0, -105), 0, (("stdcompat__set_s.mli", 19, 841, 841), ("stdcompat__set_s.mli", 19, 841, 869), 0), 0, Tag1 ("Stdcompat__set_s", 27)), 0); (("min_elt", 566), ((Tag1 (0, (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -104), (Tag3 ((("elt", 541)), 0, (0)), 100000000, 0, -103), 0), 100000000, 0, -102), 0, (("stdcompat__set_s.mli", 19, 841, 870), ("stdcompat__set_s.mli", 19, 841, 892), 0), 0, Tag1 ("Stdcompat__set_s", 28)), 0); (("min_elt_opt", 567), ((Tag1 (0, (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -101), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 541)), 0, (0)), 100000000, 0, -100)], (0)), 100000000, 0, -99), 0), 100000000, 0, -98), 0, (("stdcompat__set_s.mli", 20, 893, 893), ("stdcompat__set_s.mli", 20, 893, 926), 0), 0, Tag1 ("Stdcompat__set_s", 29)), 0); (("max_elt", 568), ((Tag1 (0, (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -97), (Tag3 ((("elt", 541)), 0, (0)), 100000000, 0, -96), 0), 100000000, 0, -95), 0, (("stdcompat__set_s.mli", 20, 893, 927), ("stdcompat__set_s.mli", 20, 893, 949), 0), 0, Tag1 ("Stdcompat__set_s", 30)), 0); (("max_elt_opt", 569), ((Tag1 (0, (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -94), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 541)), 0, (0)), 100000000, 0, -93)], (0)), 100000000, 0, -92), 0), 100000000, 0, -91), 0, (("stdcompat__set_s.mli", 21, 950, 950), ("stdcompat__set_s.mli", 21, 950, 983), 0), 0, Tag1 ("Stdcompat__set_s", 31)), 0); (("choose", 570), ((Tag1 (0, (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -90), (Tag3 ((("elt", 541)), 0, (0)), 100000000, 0, -89), 0), 100000000, 0, -88), 0, (("stdcompat__set_s.mli", 21, 950, 984), ("stdcompat__set_s.mli", 21, 950, 1005), 0), 0, Tag1 ("Stdcompat__set_s", 32)), 0); (("choose_opt", 571), ((Tag1 (0, (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -87), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 541)), 0, (0)), 100000000, 0, -86)], (0)), 100000000, 0, -85), 0), 100000000, 0, -84), 0, (("stdcompat__set_s.mli", 22, 1006, 1006), ("stdcompat__set_s.mli", 22, 1006, 1038), 0), 0, Tag1 ("Stdcompat__set_s", 33)), 0); (("split", 572), ((Tag1 (0, (Tag3 ((("elt", 541)), 0, (0)), 100000000, 0, -83), (Tag1 (0, (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -82), (Tag2 ([(Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -79); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -80); (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -81)]), 100000000, 0, -78), 0), 100000000, 0, -77), 0), 100000000, 0, -76), 0, (("stdcompat__set_s.mli", 22, 1006, 1039), ("stdcompat__set_s.mli", 22, 1006, 1077), 0), 0, Tag1 ("Stdcompat__set_s", 34)), 0); (("find", 573), ((Tag1 (0, (Tag3 ((("elt", 541)), 0, (0)), 100000000, 0, -75), (Tag1 (0, (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -74), (Tag3 ((("elt", 541)), 0, (0)), 100000000, 0, -73), 0), 100000000, 0, -72), 0), 100000000, 0, -71), 0, (("stdcompat__set_s.mli", 23, 1078, 1078), ("stdcompat__set_s.mli", 23, 1078, 1104), 0), 0, Tag1 ("Stdcompat__set_s", 35)), 0); (("find_opt", 574), ((Tag1 (0, (Tag3 ((("elt", 541)), 0, (0)), 100000000, 0, -70), (Tag1 (0, (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -69), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 541)), 0, (0)), 100000000, 0, -68)], (0)), 100000000, 0, -67), 0), 100000000, 0, -66), 0), 100000000, 0, -65), 0, (("stdcompat__set_s.mli", 23, 1078, 1105), ("stdcompat__set_s.mli", 23, 1078, 1142), 0), 0, Tag1 ("Stdcompat__set_s", 36)), 0); (("find_first", 575), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 541)), 0, (0)), 100000000, 0, -64), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -63), 0), 100000000, 0, -62), (Tag1 (0, (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -61), (Tag3 ((("elt", 541)), 0, (0)), 100000000, 0, -60), 0), 100000000, 0, -59), 0), 100000000, 0, -58), 0, (("stdcompat__set_s.mli", 24, 1143, 1143), ("stdcompat__set_s.mli", 24, 1143, 1185), 0), 0, Tag1 ("Stdcompat__set_s", 37)), 0); (("find_first_opt", 576), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 541)), 0, (0)), 100000000, 0, -57), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -56), 0), 100000000, 0, -55), (Tag1 (0, (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -54), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 541)), 0, (0)), 100000000, 0, -53)], (0)), 100000000, 0, -52), 0), 100000000, 0, -51), 0), 100000000, 0, -50), 0, (("stdcompat__set_s.mli", 25, 1186, 1186), ("stdcompat__set_s.mli", 25, 1186, 1239), 0), 0, Tag1 ("Stdcompat__set_s", 38)), 0); (("find_last", 577), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 541)), 0, (0)), 100000000, 0, -49), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -48), 0), 100000000, 0, -47), (Tag1 (0, (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -46), (Tag3 ((("elt", 541)), 0, (0)), 100000000, 0, -45), 0), 100000000, 0, -44), 0), 100000000, 0, -43), 0, (("stdcompat__set_s.mli", 26, 1240, 1240), ("stdcompat__set_s.mli", 26, 1240, 1281), 0), 0, Tag1 ("Stdcompat__set_s", 39)), 0); (("find_last_opt", 578), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 541)), 0, (0)), 100000000, 0, -42), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -41), 0), 100000000, 0, -40), (Tag1 (0, (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -39), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 541)), 0, (0)), 100000000, 0, -38)], (0)), 100000000, 0, -37), 0), 100000000, 0, -36), 0), 100000000, 0, -35), 0, (("stdcompat__set_s.mli", 27, 1282, 1282), ("stdcompat__set_s.mli", 27, 1282, 1334), 0), 0, Tag1 ("Stdcompat__set_s", 40)), 0); (("of_list", 579), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 541)), 0, (0)), 100000000, 0, -34)], (0)), 100000000, 0, -33), (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -32), 0), 100000000, 0, -31), 0, (("stdcompat__set_s.mli", 28, 1335, 1335), ("stdcompat__set_s.mli", 28, 1335, 1362), 0), 0, Tag1 ("Stdcompat__set_s", 41)), 0); (("to_seq_from", 580), ((Tag1 (0, (Tag3 ((("elt", 541)), 0, (0)), 100000000, 0, -30), (Tag1 (0, (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -29), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 541)), 0, (0)), 100000000, 0, -28)], (0)), 100000000, 0, -27), 0), 100000000, 0, -26), 0), 100000000, 0, -25), 0, (("stdcompat__set_s.mli", 28, 1335, 1363), ("stdcompat__set_s.mli", 28, 1335, 1402), 0), 0, Tag1 ("Stdcompat__set_s", 42)), 0); (("to_seq", 581), ((Tag1 (0, (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -24), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 541)), 0, (0)), 100000000, 0, -23)], (0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0, (("stdcompat__set_s.mli", 29, 1403, 1403), ("stdcompat__set_s.mli", 29, 1403, 1430), 0), 0, Tag1 ("Stdcompat__set_s", 43)), 0); (("to_rev_seq", 582), ((Tag1 (0, (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -20), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 541)), 0, (0)), 100000000, 0, -19)], (0)), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("stdcompat__set_s.mli", 29, 1403, 1431), ("stdcompat__set_s.mli", 29, 1403, 1462), 0), 0, Tag1 ("Stdcompat__set_s", 44)), 0); (("add_seq", 583), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 541)), 0, (0)), 100000000, 0, -16)], (0)), 100000000, 0, -15), (Tag1 (0, (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -14), (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -13), 0), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("stdcompat__set_s.mli", 30, 1463, 1463), ("stdcompat__set_s.mli", 30, 1463, 1496), 0), 0, Tag1 ("Stdcompat__set_s", 45)), 0); (("of_seq", 584), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 541)), 0, (0)), 100000000, 0, -10)], (0)), 100000000, 0, -9), (Tag3 ((("t", 542)), 0, (0)), 100000000, 0, -8), 0), 100000000, 0, -7), 0, (("stdcompat__set_s.mli", 30, 1463, 1497), ("stdcompat__set_s.mli", 30, 1463, 1524), 0), 0, Tag1 ("Stdcompat__set_s", 46)), 0)])), 0, (("stdcompat__set_s.mli", 6, 127, 127), ("stdcompat__set_s.mli", 30, 1463, 1528), 0), Tag1 ("Stdcompat__set_s", 47)), 0); Tag3 (("Make", 538), 1, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Set"), "Make")), 0, (("stdcompat__set_s.mli", 113, 4789, 4789), ("stdcompat__set_s.mli", 113, 4789, 4811), 0), Tag1 ("Stdcompat__set_s", 48)), 0, 0)], "Stdcompat__set", [("Stdcompat__set", ("\222\024?\241\1615\025\147\140z]\r#O\178\182")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Stdcompat__set_s", ("7\183al\196\129\182\189\184\209T\205\243\174\245\255")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

module Make = Set.Make

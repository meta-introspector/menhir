module Afl_instrument = Afl_instrument
module Alias_analysis = Alias_analysis
module Allocated_const = Allocated_const
module Arch = Arch
module Asmgen = Asmgen
module Asmlibrarian = Asmlibrarian
module Asmlink = Asmlink
module Asmpackager = Asmpackager
module Augment_specialised_args = Augment_specialised_args
module Backend_var = Backend_var
module Branch_relaxation = Branch_relaxation
module Build_export_info = Build_export_info
module CSE = CSE
module CSEgen = CSEgen
module Clambda = Clambda
module Clambda_primitives = Clambda_primitives
module Closure = Closure
module Closure_conversion = Closure_conversion
module Closure_conversion_aux = Closure_conversion_aux
module Closure_element = Closure_element
module Closure_id = Closure_id
module Closure_middle_end = Closure_middle_end
module Closure_offsets = Closure_offsets
module Closure_origin = Closure_origin
module Cmm = Cmm
module Cmm_helpers = Cmm_helpers
module Cmm_invariants = Cmm_invariants
module Cmmgen = Cmmgen
module Cmmgen_state = Cmmgen_state
module Coloring = Coloring
module Comballoc = Comballoc
module Compilation_unit = Compilation_unit
module Compilenv = Compilenv
module Convert_primitives = Convert_primitives
module Dataflow = Dataflow
module Deadcode = Deadcode
module Effect_analysis = Effect_analysis
module Emit = Emit
module Emitaux = Emitaux
module Export_id = Export_id
module Export_info = Export_info
module Export_info_for_pack = Export_info_for_pack
module Extract_projections = Extract_projections
module Find_recursive_functions = Find_recursive_functions
module Flambda = Flambda
module Flambda_invariants = Flambda_invariants
module Flambda_iterators = Flambda_iterators
module Flambda_middle_end = Flambda_middle_end
module Flambda_to_clambda = Flambda_to_clambda
module Flambda_utils = Flambda_utils
module Freshening = Freshening
module Id_types = Id_types
module Import_approx = Import_approx
module Inconstant_idents = Inconstant_idents
module Initialize_symbol_to_let_symbol = Initialize_symbol_to_let_symbol
module Inline_and_simplify = Inline_and_simplify
module Inline_and_simplify_aux = Inline_and_simplify_aux
module Inlining_cost = Inlining_cost
module Inlining_decision = Inlining_decision
module Inlining_stats = Inlining_stats
module Inlining_stats_types = Inlining_stats_types
module Inlining_transforms = Inlining_transforms
module Interf = Interf
module Internal_variable_names = Internal_variable_names
module Interval = Interval
module Invariant_params = Invariant_params
module Lift_code = Lift_code
module Lift_constants = Lift_constants
module Lift_let_to_initialize_symbol = Lift_let_to_initialize_symbol
module Linear = Linear
module Linear_format = Linear_format
module Linearize = Linearize
module Linkage_name = Linkage_name
module Linscan = Linscan
module Liveness = Liveness
module Mach = Mach
module Mutable_variable = Mutable_variable
module Optcompile = Optcompile
module Opterrors = Opterrors
module Optmaindriver = Optmaindriver
module Parameter = Parameter
module Pass_wrapper = Pass_wrapper
module Polling = Polling
module Printclambda = Printclambda
module Printclambda_primitives = Printclambda_primitives
module Printcmm = Printcmm
module Printlinear = Printlinear
module Printmach = Printmach
module Proc = Proc
module Projection = Projection
module Ref_to_variables = Ref_to_variables
module Reg = Reg
module Reload = Reload
module Reloadgen = Reloadgen
module Remove_free_vars_equal_to_args = Remove_free_vars_equal_to_args
module Remove_unused_arguments = Remove_unused_arguments
module Remove_unused_closure_vars = Remove_unused_closure_vars
module Remove_unused_program_constructs = Remove_unused_program_constructs
module Schedgen = Schedgen
module Scheduling = Scheduling
module Selectgen = Selectgen
module Selection = Selection
module Semantics_of_primitives = Semantics_of_primitives
module Set_of_closures_id = Set_of_closures_id
module Set_of_closures_origin = Set_of_closures_origin
module Share_constants = Share_constants
module Simple_value_approx = Simple_value_approx
module Simplify_boxed_integer_ops = Simplify_boxed_integer_ops
module Simplify_common = Simplify_common
module Simplify_primitives = Simplify_primitives
module Spill = Spill
module Split = Split
module Static_exception = Static_exception
module Strmatch = Strmatch
module Symbol = Symbol
module Tag = Tag
module Traverse_for_exported_symbols = Traverse_for_exported_symbols
module Un_anf = Un_anf
module Unbox_closures = Unbox_closures
module Unbox_free_vars_of_closures = Unbox_free_vars_of_closures
module Unbox_specialised_args = Unbox_specialised_args
module Var_within_closure = Var_within_closure
module Variable = Variable
module X86_dsl = X86_dsl
module X86_gas = X86_gas
module X86_masm = X86_masm("DEBUG:rule", [Tag3 (("Afl_instrument", 396), 1, (Tag3 ((Tag2 ("Afl_instrument"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 3, 44, 44), ("src/ocaml_optcomp/ocaml_optcomp.ml", 3, 44, 100), 0), Tag1 ("Ocaml_optcomp", 0)), 0, 0); Tag3 (("Alias_analysis", 397), 1, (Tag3 ((Tag2 ("Alias_analysis"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 4, 101, 101), ("src/ocaml_optcomp/ocaml_optcomp.ml", 4, 101, 157), 0), Tag1 ("Ocaml_optcomp", 1)), 0, 0); Tag3 (("Allocated_const", 398), 1, (Tag3 ((Tag2 ("Allocated_const"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 5, 158, 158), ("src/ocaml_optcomp/ocaml_optcomp.ml", 5, 158, 215), 0), Tag1 ("Ocaml_optcomp", 2)), 0, 0); Tag3 (("Arch", 399), 1, (Tag3 ((Tag2 ("Arch"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 6, 216, 216), ("src/ocaml_optcomp/ocaml_optcomp.ml", 6, 216, 262), 0), Tag1 ("Ocaml_optcomp", 3)), 0, 0); Tag3 (("Asmgen", 400), 1, (Tag3 ((Tag2 ("Asmgen"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 7, 263, 263), ("src/ocaml_optcomp/ocaml_optcomp.ml", 7, 263, 311), 0), Tag1 ("Ocaml_optcomp", 4)), 0, 0); Tag3 (("Asmlibrarian", 401), 1, (Tag3 ((Tag2 ("Asmlibrarian"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 8, 312, 312), ("src/ocaml_optcomp/ocaml_optcomp.ml", 8, 312, 366), 0), Tag1 ("Ocaml_optcomp", 5)), 0, 0); Tag3 (("Asmlink", 402), 1, (Tag3 ((Tag2 ("Asmlink"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 9, 367, 367), ("src/ocaml_optcomp/ocaml_optcomp.ml", 9, 367, 416), 0), Tag1 ("Ocaml_optcomp", 6)), 0, 0); Tag3 (("Asmpackager", 403), 1, (Tag3 ((Tag2 ("Asmpackager"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 10, 417, 417), ("src/ocaml_optcomp/ocaml_optcomp.ml", 10, 417, 470), 0), Tag1 ("Ocaml_optcomp", 7)), 0, 0); Tag3 (("Augment_specialised_args", 404), 1, (Tag3 ((Tag2 ("Augment_specialised_args"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 11, 471, 471), ("src/ocaml_optcomp/ocaml_optcomp.ml", 11, 471, 537), 0), Tag1 ("Ocaml_optcomp", 8)), 0, 0); Tag3 (("Backend_var", 405), 1, (Tag3 ((Tag2 ("Backend_var"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 12, 538, 538), ("src/ocaml_optcomp/ocaml_optcomp.ml", 12, 538, 591), 0), Tag1 ("Ocaml_optcomp", 9)), 0, 0); Tag3 (("Branch_relaxation", 406), 1, (Tag3 ((Tag2 ("Branch_relaxation"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 13, 592, 592), ("src/ocaml_optcomp/ocaml_optcomp.ml", 13, 592, 651), 0), Tag1 ("Ocaml_optcomp", 10)), 0, 0); Tag3 (("Build_export_info", 407), 1, (Tag3 ((Tag2 ("Build_export_info"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 14, 652, 652), ("src/ocaml_optcomp/ocaml_optcomp.ml", 14, 652, 711), 0), Tag1 ("Ocaml_optcomp", 11)), 0, 0); Tag3 (("CSE", 408), 1, (Tag3 ((Tag2 ("CSE"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 15, 712, 712), ("src/ocaml_optcomp/ocaml_optcomp.ml", 15, 712, 757), 0), Tag1 ("Ocaml_optcomp", 12)), 0, 0); Tag3 (("CSEgen", 409), 1, (Tag3 ((Tag2 ("CSEgen"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 16, 758, 758), ("src/ocaml_optcomp/ocaml_optcomp.ml", 16, 758, 806), 0), Tag1 ("Ocaml_optcomp", 13)), 0, 0); Tag3 (("Clambda", 410), 1, (Tag3 ((Tag2 ("Clambda"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 17, 807, 807), ("src/ocaml_optcomp/ocaml_optcomp.ml", 17, 807, 856), 0), Tag1 ("Ocaml_optcomp", 14)), 0, 0); Tag3 (("Clambda_primitives", 411), 1, (Tag3 ((Tag2 ("Clambda_primitives"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 18, 857, 857), ("src/ocaml_optcomp/ocaml_optcomp.ml", 18, 857, 917), 0), Tag1 ("Ocaml_optcomp", 15)), 0, 0); Tag3 (("Closure", 412), 1, (Tag3 ((Tag2 ("Closure"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 19, 918, 918), ("src/ocaml_optcomp/ocaml_optcomp.ml", 19, 918, 967), 0), Tag1 ("Ocaml_optcomp", 16)), 0, 0); Tag3 (("Closure_conversion", 413), 1, (Tag3 ((Tag2 ("Closure_conversion"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 20, 968, 968), ("src/ocaml_optcomp/ocaml_optcomp.ml", 20, 968, 1028), 0), Tag1 ("Ocaml_optcomp", 17)), 0, 0); Tag3 (("Closure_conversion_aux", 414), 1, (Tag3 ((Tag2 ("Closure_conversion_aux"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 21, 1029, 1029), ("src/ocaml_optcomp/ocaml_optcomp.ml", 21, 1029, 1093), 0), Tag1 ("Ocaml_optcomp", 18)), 0, 0); Tag3 (("Closure_element", 415), 1, (Tag3 ((Tag2 ("Closure_element"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 22, 1094, 1094), ("src/ocaml_optcomp/ocaml_optcomp.ml", 22, 1094, 1151), 0), Tag1 ("Ocaml_optcomp", 19)), 0, 0); Tag3 (("Closure_id", 416), 1, (Tag3 ((Tag2 ("Closure_id"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 23, 1152, 1152), ("src/ocaml_optcomp/ocaml_optcomp.ml", 23, 1152, 1204), 0), Tag1 ("Ocaml_optcomp", 20)), 0, 0); Tag3 (("Closure_middle_end", 417), 1, (Tag3 ((Tag2 ("Closure_middle_end"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 24, 1205, 1205), ("src/ocaml_optcomp/ocaml_optcomp.ml", 24, 1205, 1265), 0), Tag1 ("Ocaml_optcomp", 21)), 0, 0); Tag3 (("Closure_offsets", 418), 1, (Tag3 ((Tag2 ("Closure_offsets"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 25, 1266, 1266), ("src/ocaml_optcomp/ocaml_optcomp.ml", 25, 1266, 1323), 0), Tag1 ("Ocaml_optcomp", 22)), 0, 0); Tag3 (("Closure_origin", 419), 1, (Tag3 ((Tag2 ("Closure_origin"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 26, 1324, 1324), ("src/ocaml_optcomp/ocaml_optcomp.ml", 26, 1324, 1380), 0), Tag1 ("Ocaml_optcomp", 23)), 0, 0); Tag3 (("Cmm", 420), 1, (Tag3 ((Tag2 ("Cmm"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 27, 1381, 1381), ("src/ocaml_optcomp/ocaml_optcomp.ml", 27, 1381, 1426), 0), Tag1 ("Ocaml_optcomp", 24)), 0, 0); Tag3 (("Cmm_helpers", 421), 1, (Tag3 ((Tag2 ("Cmm_helpers"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 28, 1427, 1427), ("src/ocaml_optcomp/ocaml_optcomp.ml", 28, 1427, 1480), 0), Tag1 ("Ocaml_optcomp", 25)), 0, 0); Tag3 (("Cmm_invariants", 422), 1, (Tag3 ((Tag2 ("Cmm_invariants"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 29, 1481, 1481), ("src/ocaml_optcomp/ocaml_optcomp.ml", 29, 1481, 1537), 0), Tag1 ("Ocaml_optcomp", 26)), 0, 0); Tag3 (("Cmmgen", 423), 1, (Tag3 ((Tag2 ("Cmmgen"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 30, 1538, 1538), ("src/ocaml_optcomp/ocaml_optcomp.ml", 30, 1538, 1586), 0), Tag1 ("Ocaml_optcomp", 27)), 0, 0); Tag3 (("Cmmgen_state", 424), 1, (Tag3 ((Tag2 ("Cmmgen_state"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 31, 1587, 1587), ("src/ocaml_optcomp/ocaml_optcomp.ml", 31, 1587, 1641), 0), Tag1 ("Ocaml_optcomp", 28)), 0, 0); Tag3 (("Coloring", 425), 1, (Tag3 ((Tag2 ("Coloring"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 32, 1642, 1642), ("src/ocaml_optcomp/ocaml_optcomp.ml", 32, 1642, 1692), 0), Tag1 ("Ocaml_optcomp", 29)), 0, 0); Tag3 (("Comballoc", 426), 1, (Tag3 ((Tag2 ("Comballoc"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 33, 1693, 1693), ("src/ocaml_optcomp/ocaml_optcomp.ml", 33, 1693, 1744), 0), Tag1 ("Ocaml_optcomp", 30)), 0, 0); Tag3 (("Compilation_unit", 427), 1, (Tag3 ((Tag2 ("Compilation_unit"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 34, 1745, 1745), ("src/ocaml_optcomp/ocaml_optcomp.ml", 34, 1745, 1803), 0), Tag1 ("Ocaml_optcomp", 31)), 0, 0); Tag3 (("Compilenv", 428), 1, (Tag3 ((Tag2 ("Compilenv"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 35, 1804, 1804), ("src/ocaml_optcomp/ocaml_optcomp.ml", 35, 1804, 1855), 0), Tag1 ("Ocaml_optcomp", 32)), 0, 0); Tag3 (("Convert_primitives", 429), 1, (Tag3 ((Tag2 ("Convert_primitives"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 36, 1856, 1856), ("src/ocaml_optcomp/ocaml_optcomp.ml", 36, 1856, 1916), 0), Tag1 ("Ocaml_optcomp", 33)), 0, 0); Tag3 (("Dataflow", 430), 1, (Tag3 ((Tag2 ("Dataflow"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 37, 1917, 1917), ("src/ocaml_optcomp/ocaml_optcomp.ml", 37, 1917, 1967), 0), Tag1 ("Ocaml_optcomp", 34)), 0, 0); Tag3 (("Deadcode", 431), 1, (Tag3 ((Tag2 ("Deadcode"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 38, 1968, 1968), ("src/ocaml_optcomp/ocaml_optcomp.ml", 38, 1968, 2018), 0), Tag1 ("Ocaml_optcomp", 35)), 0, 0); Tag3 (("Effect_analysis", 432), 1, (Tag3 ((Tag2 ("Effect_analysis"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 39, 2019, 2019), ("src/ocaml_optcomp/ocaml_optcomp.ml", 39, 2019, 2076), 0), Tag1 ("Ocaml_optcomp", 36)), 0, 0); Tag3 (("Emit", 433), 1, (Tag3 ((Tag2 ("Emit"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 40, 2077, 2077), ("src/ocaml_optcomp/ocaml_optcomp.ml", 40, 2077, 2123), 0), Tag1 ("Ocaml_optcomp", 37)), 0, 0); Tag3 (("Emitaux", 434), 1, (Tag3 ((Tag2 ("Emitaux"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 41, 2124, 2124), ("src/ocaml_optcomp/ocaml_optcomp.ml", 41, 2124, 2173), 0), Tag1 ("Ocaml_optcomp", 38)), 0, 0); Tag3 (("Export_id", 435), 1, (Tag3 ((Tag2 ("Export_id"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 42, 2174, 2174), ("src/ocaml_optcomp/ocaml_optcomp.ml", 42, 2174, 2225), 0), Tag1 ("Ocaml_optcomp", 39)), 0, 0); Tag3 (("Export_info", 436), 1, (Tag3 ((Tag2 ("Export_info"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 43, 2226, 2226), ("src/ocaml_optcomp/ocaml_optcomp.ml", 43, 2226, 2279), 0), Tag1 ("Ocaml_optcomp", 40)), 0, 0); Tag3 (("Export_info_for_pack", 437), 1, (Tag3 ((Tag2 ("Export_info_for_pack"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 44, 2280, 2280), ("src/ocaml_optcomp/ocaml_optcomp.ml", 44, 2280, 2342), 0), Tag1 ("Ocaml_optcomp", 41)), 0, 0); Tag3 (("Extract_projections", 438), 1, (Tag3 ((Tag2 ("Extract_projections"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 45, 2343, 2343), ("src/ocaml_optcomp/ocaml_optcomp.ml", 45, 2343, 2404), 0), Tag1 ("Ocaml_optcomp", 42)), 0, 0); Tag3 (("Find_recursive_functions", 439), 1, (Tag3 ((Tag2 ("Find_recursive_functions"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 46, 2405, 2405), ("src/ocaml_optcomp/ocaml_optcomp.ml", 46, 2405, 2471), 0), Tag1 ("Ocaml_optcomp", 43)), 0, 0); Tag3 (("Flambda", 440), 1, (Tag3 ((Tag2 ("Flambda"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 47, 2472, 2472), ("src/ocaml_optcomp/ocaml_optcomp.ml", 47, 2472, 2521), 0), Tag1 ("Ocaml_optcomp", 44)), 0, 0); Tag3 (("Flambda_invariants", 441), 1, (Tag3 ((Tag2 ("Flambda_invariants"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 48, 2522, 2522), ("src/ocaml_optcomp/ocaml_optcomp.ml", 48, 2522, 2582), 0), Tag1 ("Ocaml_optcomp", 45)), 0, 0); Tag3 (("Flambda_iterators", 442), 1, (Tag3 ((Tag2 ("Flambda_iterators"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 49, 2583, 2583), ("src/ocaml_optcomp/ocaml_optcomp.ml", 49, 2583, 2642), 0), Tag1 ("Ocaml_optcomp", 46)), 0, 0); Tag3 (("Flambda_middle_end", 443), 1, (Tag3 ((Tag2 ("Flambda_middle_end"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 50, 2643, 2643), ("src/ocaml_optcomp/ocaml_optcomp.ml", 50, 2643, 2703), 0), Tag1 ("Ocaml_optcomp", 47)), 0, 0); Tag3 (("Flambda_to_clambda", 444), 1, (Tag3 ((Tag2 ("Flambda_to_clambda"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 51, 2704, 2704), ("src/ocaml_optcomp/ocaml_optcomp.ml", 51, 2704, 2764), 0), Tag1 ("Ocaml_optcomp", 48)), 0, 0); Tag3 (("Flambda_utils", 445), 1, (Tag3 ((Tag2 ("Flambda_utils"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 52, 2765, 2765), ("src/ocaml_optcomp/ocaml_optcomp.ml", 52, 2765, 2820), 0), Tag1 ("Ocaml_optcomp", 49)), 0, 0); Tag3 (("Freshening", 446), 1, (Tag3 ((Tag2 ("Freshening"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 53, 2821, 2821), ("src/ocaml_optcomp/ocaml_optcomp.ml", 53, 2821, 2873), 0), Tag1 ("Ocaml_optcomp", 50)), 0, 0); Tag3 (("Id_types", 447), 1, (Tag3 ((Tag2 ("Id_types"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 54, 2874, 2874), ("src/ocaml_optcomp/ocaml_optcomp.ml", 54, 2874, 2924), 0), Tag1 ("Ocaml_optcomp", 51)), 0, 0); Tag3 (("Import_approx", 448), 1, (Tag3 ((Tag2 ("Import_approx"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 55, 2925, 2925), ("src/ocaml_optcomp/ocaml_optcomp.ml", 55, 2925, 2980), 0), Tag1 ("Ocaml_optcomp", 52)), 0, 0); Tag3 (("Inconstant_idents", 449), 1, (Tag3 ((Tag2 ("Inconstant_idents"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 56, 2981, 2981), ("src/ocaml_optcomp/ocaml_optcomp.ml", 56, 2981, 3040), 0), Tag1 ("Ocaml_optcomp", 53)), 0, 0); Tag3 (("Initialize_symbol_to_let_symbol", 450), 1, (Tag3 ((Tag2 ("Initialize_symbol_to_let_symbol"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 57, 3041, 3041), ("src/ocaml_optcomp/ocaml_optcomp.ml", 57, 3041, 3114), 0), Tag1 ("Ocaml_optcomp", 54)), 0, 0); Tag3 (("Inline_and_simplify", 451), 1, (Tag3 ((Tag2 ("Inline_and_simplify"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 58, 3115, 3115), ("src/ocaml_optcomp/ocaml_optcomp.ml", 58, 3115, 3176), 0), Tag1 ("Ocaml_optcomp", 55)), 0, 0); Tag3 (("Inline_and_simplify_aux", 452), 1, (Tag3 ((Tag2 ("Inline_and_simplify_aux"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 59, 3177, 3177), ("src/ocaml_optcomp/ocaml_optcomp.ml", 59, 3177, 3242), 0), Tag1 ("Ocaml_optcomp", 56)), 0, 0); Tag3 (("Inlining_cost", 453), 1, (Tag3 ((Tag2 ("Inlining_cost"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 60, 3243, 3243), ("src/ocaml_optcomp/ocaml_optcomp.ml", 60, 3243, 3298), 0), Tag1 ("Ocaml_optcomp", 57)), 0, 0); Tag3 (("Inlining_decision", 454), 1, (Tag3 ((Tag2 ("Inlining_decision"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 61, 3299, 3299), ("src/ocaml_optcomp/ocaml_optcomp.ml", 61, 3299, 3358), 0), Tag1 ("Ocaml_optcomp", 58)), 0, 0); Tag3 (("Inlining_stats", 455), 1, (Tag3 ((Tag2 ("Inlining_stats"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 62, 3359, 3359), ("src/ocaml_optcomp/ocaml_optcomp.ml", 62, 3359, 3415), 0), Tag1 ("Ocaml_optcomp", 59)), 0, 0); Tag3 (("Inlining_stats_types", 456), 1, (Tag3 ((Tag2 ("Inlining_stats_types"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 63, 3416, 3416), ("src/ocaml_optcomp/ocaml_optcomp.ml", 63, 3416, 3478), 0), Tag1 ("Ocaml_optcomp", 60)), 0, 0); Tag3 (("Inlining_transforms", 457), 1, (Tag3 ((Tag2 ("Inlining_transforms"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 64, 3479, 3479), ("src/ocaml_optcomp/ocaml_optcomp.ml", 64, 3479, 3540), 0), Tag1 ("Ocaml_optcomp", 61)), 0, 0); Tag3 (("Interf", 458), 1, (Tag3 ((Tag2 ("Interf"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 65, 3541, 3541), ("src/ocaml_optcomp/ocaml_optcomp.ml", 65, 3541, 3589), 0), Tag1 ("Ocaml_optcomp", 62)), 0, 0); Tag3 (("Internal_variable_names", 459), 1, (Tag3 ((Tag2 ("Internal_variable_names"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 66, 3590, 3590), ("src/ocaml_optcomp/ocaml_optcomp.ml", 66, 3590, 3655), 0), Tag1 ("Ocaml_optcomp", 63)), 0, 0); Tag3 (("Interval", 460), 1, (Tag3 ((Tag2 ("Interval"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 67, 3656, 3656), ("src/ocaml_optcomp/ocaml_optcomp.ml", 67, 3656, 3706), 0), Tag1 ("Ocaml_optcomp", 64)), 0, 0); Tag3 (("Invariant_params", 461), 1, (Tag3 ((Tag2 ("Invariant_params"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 68, 3707, 3707), ("src/ocaml_optcomp/ocaml_optcomp.ml", 68, 3707, 3765), 0), Tag1 ("Ocaml_optcomp", 65)), 0, 0); Tag3 (("Lift_code", 462), 1, (Tag3 ((Tag2 ("Lift_code"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 69, 3766, 3766), ("src/ocaml_optcomp/ocaml_optcomp.ml", 69, 3766, 3817), 0), Tag1 ("Ocaml_optcomp", 66)), 0, 0); Tag3 (("Lift_constants", 463), 1, (Tag3 ((Tag2 ("Lift_constants"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 70, 3818, 3818), ("src/ocaml_optcomp/ocaml_optcomp.ml", 70, 3818, 3874), 0), Tag1 ("Ocaml_optcomp", 67)), 0, 0); Tag3 (("Lift_let_to_initialize_symbol", 464), 1, (Tag3 ((Tag2 ("Lift_let_to_initialize_symbol"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 71, 3875, 3875), ("src/ocaml_optcomp/ocaml_optcomp.ml", 71, 3875, 3946), 0), Tag1 ("Ocaml_optcomp", 68)), 0, 0); Tag3 (("Linear", 465), 1, (Tag3 ((Tag2 ("Linear"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 72, 3947, 3947), ("src/ocaml_optcomp/ocaml_optcomp.ml", 72, 3947, 3995), 0), Tag1 ("Ocaml_optcomp", 69)), 0, 0); Tag3 (("Linear_format", 466), 1, (Tag3 ((Tag2 ("Linear_format"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 73, 3996, 3996), ("src/ocaml_optcomp/ocaml_optcomp.ml", 73, 3996, 4051), 0), Tag1 ("Ocaml_optcomp", 70)), 0, 0); Tag3 (("Linearize", 467), 1, (Tag3 ((Tag2 ("Linearize"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 74, 4052, 4052), ("src/ocaml_optcomp/ocaml_optcomp.ml", 74, 4052, 4103), 0), Tag1 ("Ocaml_optcomp", 71)), 0, 0); Tag3 (("Linkage_name", 468), 1, (Tag3 ((Tag2 ("Linkage_name"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 75, 4104, 4104), ("src/ocaml_optcomp/ocaml_optcomp.ml", 75, 4104, 4158), 0), Tag1 ("Ocaml_optcomp", 72)), 0, 0); Tag3 (("Linscan", 469), 1, (Tag3 ((Tag2 ("Linscan"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 76, 4159, 4159), ("src/ocaml_optcomp/ocaml_optcomp.ml", 76, 4159, 4208), 0), Tag1 ("Ocaml_optcomp", 73)), 0, 0); Tag3 (("Liveness", 470), 1, (Tag3 ((Tag2 ("Liveness"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 77, 4209, 4209), ("src/ocaml_optcomp/ocaml_optcomp.ml", 77, 4209, 4259), 0), Tag1 ("Ocaml_optcomp", 74)), 0, 0); Tag3 (("Mach", 471), 1, (Tag3 ((Tag2 ("Mach"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 78, 4260, 4260), ("src/ocaml_optcomp/ocaml_optcomp.ml", 78, 4260, 4306), 0), Tag1 ("Ocaml_optcomp", 75)), 0, 0); Tag3 (("Mutable_variable", 472), 1, (Tag3 ((Tag2 ("Mutable_variable"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 79, 4307, 4307), ("src/ocaml_optcomp/ocaml_optcomp.ml", 79, 4307, 4365), 0), Tag1 ("Ocaml_optcomp", 76)), 0, 0); Tag3 (("Optcompile", 473), 1, (Tag3 ((Tag2 ("Optcompile"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 80, 4366, 4366), ("src/ocaml_optcomp/ocaml_optcomp.ml", 80, 4366, 4418), 0), Tag1 ("Ocaml_optcomp", 77)), 0, 0); Tag3 (("Opterrors", 474), 1, (Tag3 ((Tag2 ("Opterrors"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 81, 4419, 4419), ("src/ocaml_optcomp/ocaml_optcomp.ml", 81, 4419, 4470), 0), Tag1 ("Ocaml_optcomp", 78)), 0, 0); Tag3 (("Optmaindriver", 475), 1, (Tag3 ((Tag2 ("Optmaindriver"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 82, 4471, 4471), ("src/ocaml_optcomp/ocaml_optcomp.ml", 82, 4471, 4526), 0), Tag1 ("Ocaml_optcomp", 79)), 0, 0); Tag3 (("Parameter", 476), 1, (Tag3 ((Tag2 ("Parameter"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 83, 4527, 4527), ("src/ocaml_optcomp/ocaml_optcomp.ml", 83, 4527, 4578), 0), Tag1 ("Ocaml_optcomp", 80)), 0, 0); Tag3 (("Pass_wrapper", 477), 1, (Tag3 ((Tag2 ("Pass_wrapper"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 84, 4579, 4579), ("src/ocaml_optcomp/ocaml_optcomp.ml", 84, 4579, 4633), 0), Tag1 ("Ocaml_optcomp", 81)), 0, 0); Tag3 (("Polling", 478), 1, (Tag3 ((Tag2 ("Polling"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 85, 4634, 4634), ("src/ocaml_optcomp/ocaml_optcomp.ml", 85, 4634, 4683), 0), Tag1 ("Ocaml_optcomp", 82)), 0, 0); Tag3 (("Printclambda", 479), 1, (Tag3 ((Tag2 ("Printclambda"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 86, 4684, 4684), ("src/ocaml_optcomp/ocaml_optcomp.ml", 86, 4684, 4738), 0), Tag1 ("Ocaml_optcomp", 83)), 0, 0); Tag3 (("Printclambda_primitives", 480), 1, (Tag3 ((Tag2 ("Printclambda_primitives"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 87, 4739, 4739), ("src/ocaml_optcomp/ocaml_optcomp.ml", 87, 4739, 4804), 0), Tag1 ("Ocaml_optcomp", 84)), 0, 0); Tag3 (("Printcmm", 481), 1, (Tag3 ((Tag2 ("Printcmm"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 88, 4805, 4805), ("src/ocaml_optcomp/ocaml_optcomp.ml", 88, 4805, 4855), 0), Tag1 ("Ocaml_optcomp", 85)), 0, 0); Tag3 (("Printlinear", 482), 1, (Tag3 ((Tag2 ("Printlinear"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 89, 4856, 4856), ("src/ocaml_optcomp/ocaml_optcomp.ml", 89, 4856, 4909), 0), Tag1 ("Ocaml_optcomp", 86)), 0, 0); Tag3 (("Printmach", 483), 1, (Tag3 ((Tag2 ("Printmach"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 90, 4910, 4910), ("src/ocaml_optcomp/ocaml_optcomp.ml", 90, 4910, 4961), 0), Tag1 ("Ocaml_optcomp", 87)), 0, 0); Tag3 (("Proc", 484), 1, (Tag3 ((Tag2 ("Proc"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 91, 4962, 4962), ("src/ocaml_optcomp/ocaml_optcomp.ml", 91, 4962, 5008), 0), Tag1 ("Ocaml_optcomp", 88)), 0, 0); Tag3 (("Projection", 485), 1, (Tag3 ((Tag2 ("Projection"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 92, 5009, 5009), ("src/ocaml_optcomp/ocaml_optcomp.ml", 92, 5009, 5061), 0), Tag1 ("Ocaml_optcomp", 89)), 0, 0); Tag3 (("Ref_to_variables", 486), 1, (Tag3 ((Tag2 ("Ref_to_variables"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 93, 5062, 5062), ("src/ocaml_optcomp/ocaml_optcomp.ml", 93, 5062, 5120), 0), Tag1 ("Ocaml_optcomp", 90)), 0, 0); Tag3 (("Reg", 487), 1, (Tag3 ((Tag2 ("Reg"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 94, 5121, 5121), ("src/ocaml_optcomp/ocaml_optcomp.ml", 94, 5121, 5166), 0), Tag1 ("Ocaml_optcomp", 91)), 0, 0); Tag3 (("Reload", 488), 1, (Tag3 ((Tag2 ("Reload"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 95, 5167, 5167), ("src/ocaml_optcomp/ocaml_optcomp.ml", 95, 5167, 5215), 0), Tag1 ("Ocaml_optcomp", 92)), 0, 0); Tag3 (("Reloadgen", 489), 1, (Tag3 ((Tag2 ("Reloadgen"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 96, 5216, 5216), ("src/ocaml_optcomp/ocaml_optcomp.ml", 96, 5216, 5267), 0), Tag1 ("Ocaml_optcomp", 93)), 0, 0); Tag3 (("Remove_free_vars_equal_to_args", 490), 1, (Tag3 ((Tag2 ("Remove_free_vars_equal_to_args"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 97, 5268, 5268), ("src/ocaml_optcomp/ocaml_optcomp.ml", 97, 5268, 5340), 0), Tag1 ("Ocaml_optcomp", 94)), 0, 0); Tag3 (("Remove_unused_arguments", 491), 1, (Tag3 ((Tag2 ("Remove_unused_arguments"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 98, 5341, 5341), ("src/ocaml_optcomp/ocaml_optcomp.ml", 98, 5341, 5406), 0), Tag1 ("Ocaml_optcomp", 95)), 0, 0); Tag3 (("Remove_unused_closure_vars", 492), 1, (Tag3 ((Tag2 ("Remove_unused_closure_vars"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 99, 5407, 5407), ("src/ocaml_optcomp/ocaml_optcomp.ml", 99, 5407, 5475), 0), Tag1 ("Ocaml_optcomp", 96)), 0, 0); Tag3 (("Remove_unused_program_constructs", 493), 1, (Tag3 ((Tag2 ("Remove_unused_program_constructs"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 100, 5476, 5476), ("src/ocaml_optcomp/ocaml_optcomp.ml", 100, 5476, 5550), 0), Tag1 ("Ocaml_optcomp", 97)), 0, 0); Tag3 (("Schedgen", 494), 1, (Tag3 ((Tag2 ("Schedgen"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 101, 5551, 5551), ("src/ocaml_optcomp/ocaml_optcomp.ml", 101, 5551, 5601), 0), Tag1 ("Ocaml_optcomp", 98)), 0, 0); Tag3 (("Scheduling", 495), 1, (Tag3 ((Tag2 ("Scheduling"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 102, 5602, 5602), ("src/ocaml_optcomp/ocaml_optcomp.ml", 102, 5602, 5654), 0), Tag1 ("Ocaml_optcomp", 99)), 0, 0); Tag3 (("Selectgen", 496), 1, (Tag3 ((Tag2 ("Selectgen"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 103, 5655, 5655), ("src/ocaml_optcomp/ocaml_optcomp.ml", 103, 5655, 5706), 0), Tag1 ("Ocaml_optcomp", 100)), 0, 0); Tag3 (("Selection", 497), 1, (Tag3 ((Tag2 ("Selection"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 104, 5707, 5707), ("src/ocaml_optcomp/ocaml_optcomp.ml", 104, 5707, 5758), 0), Tag1 ("Ocaml_optcomp", 101)), 0, 0); Tag3 (("Semantics_of_primitives", 498), 1, (Tag3 ((Tag2 ("Semantics_of_primitives"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 105, 5759, 5759), ("src/ocaml_optcomp/ocaml_optcomp.ml", 105, 5759, 5824), 0), Tag1 ("Ocaml_optcomp", 102)), 0, 0); Tag3 (("Set_of_closures_id", 499), 1, (Tag3 ((Tag2 ("Set_of_closures_id"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 106, 5825, 5825), ("src/ocaml_optcomp/ocaml_optcomp.ml", 106, 5825, 5885), 0), Tag1 ("Ocaml_optcomp", 103)), 0, 0); Tag3 (("Set_of_closures_origin", 500), 1, (Tag3 ((Tag2 ("Set_of_closures_origin"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 107, 5886, 5886), ("src/ocaml_optcomp/ocaml_optcomp.ml", 107, 5886, 5950), 0), Tag1 ("Ocaml_optcomp", 104)), 0, 0); Tag3 (("Share_constants", 501), 1, (Tag3 ((Tag2 ("Share_constants"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 108, 5951, 5951), ("src/ocaml_optcomp/ocaml_optcomp.ml", 108, 5951, 6008), 0), Tag1 ("Ocaml_optcomp", 105)), 0, 0); Tag3 (("Simple_value_approx", 502), 1, (Tag3 ((Tag2 ("Simple_value_approx"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 109, 6009, 6009), ("src/ocaml_optcomp/ocaml_optcomp.ml", 109, 6009, 6070), 0), Tag1 ("Ocaml_optcomp", 106)), 0, 0); Tag3 (("Simplify_boxed_integer_ops", 503), 1, (Tag3 ((Tag2 ("Simplify_boxed_integer_ops"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 110, 6071, 6071), ("src/ocaml_optcomp/ocaml_optcomp.ml", 110, 6071, 6139), 0), Tag1 ("Ocaml_optcomp", 107)), 0, 0); Tag3 (("Simplify_common", 504), 1, (Tag3 ((Tag2 ("Simplify_common"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 111, 6140, 6140), ("src/ocaml_optcomp/ocaml_optcomp.ml", 111, 6140, 6197), 0), Tag1 ("Ocaml_optcomp", 108)), 0, 0); Tag3 (("Simplify_primitives", 505), 1, (Tag3 ((Tag2 ("Simplify_primitives"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 112, 6198, 6198), ("src/ocaml_optcomp/ocaml_optcomp.ml", 112, 6198, 6259), 0), Tag1 ("Ocaml_optcomp", 109)), 0, 0); Tag3 (("Spill", 506), 1, (Tag3 ((Tag2 ("Spill"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 113, 6260, 6260), ("src/ocaml_optcomp/ocaml_optcomp.ml", 113, 6260, 6307), 0), Tag1 ("Ocaml_optcomp", 110)), 0, 0); Tag3 (("Split", 507), 1, (Tag3 ((Tag2 ("Split"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 114, 6308, 6308), ("src/ocaml_optcomp/ocaml_optcomp.ml", 114, 6308, 6355), 0), Tag1 ("Ocaml_optcomp", 111)), 0, 0); Tag3 (("Static_exception", 508), 1, (Tag3 ((Tag2 ("Static_exception"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 115, 6356, 6356), ("src/ocaml_optcomp/ocaml_optcomp.ml", 115, 6356, 6414), 0), Tag1 ("Ocaml_optcomp", 112)), 0, 0); Tag3 (("Strmatch", 509), 1, (Tag3 ((Tag2 ("Strmatch"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 116, 6415, 6415), ("src/ocaml_optcomp/ocaml_optcomp.ml", 116, 6415, 6465), 0), Tag1 ("Ocaml_optcomp", 113)), 0, 0); Tag3 (("Symbol", 510), 1, (Tag3 ((Tag2 ("Symbol"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 117, 6466, 6466), ("src/ocaml_optcomp/ocaml_optcomp.ml", 117, 6466, 6514), 0), Tag1 ("Ocaml_optcomp", 114)), 0, 0); Tag3 (("Tag", 511), 1, (Tag3 ((Tag2 ("Tag"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 118, 6515, 6515), ("src/ocaml_optcomp/ocaml_optcomp.ml", 118, 6515, 6560), 0), Tag1 ("Ocaml_optcomp", 115)), 0, 0); Tag3 (("Traverse_for_exported_symbols", 512), 1, (Tag3 ((Tag2 ("Traverse_for_exported_symbols"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 119, 6561, 6561), ("src/ocaml_optcomp/ocaml_optcomp.ml", 119, 6561, 6632), 0), Tag1 ("Ocaml_optcomp", 116)), 0, 0); Tag3 (("Un_anf", 513), 1, (Tag3 ((Tag2 ("Un_anf"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 120, 6633, 6633), ("src/ocaml_optcomp/ocaml_optcomp.ml", 120, 6633, 6681), 0), Tag1 ("Ocaml_optcomp", 117)), 0, 0); Tag3 (("Unbox_closures", 514), 1, (Tag3 ((Tag2 ("Unbox_closures"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 121, 6682, 6682), ("src/ocaml_optcomp/ocaml_optcomp.ml", 121, 6682, 6738), 0), Tag1 ("Ocaml_optcomp", 118)), 0, 0); Tag3 (("Unbox_free_vars_of_closures", 515), 1, (Tag3 ((Tag2 ("Unbox_free_vars_of_closures"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 122, 6739, 6739), ("src/ocaml_optcomp/ocaml_optcomp.ml", 122, 6739, 6808), 0), Tag1 ("Ocaml_optcomp", 119)), 0, 0); Tag3 (("Unbox_specialised_args", 516), 1, (Tag3 ((Tag2 ("Unbox_specialised_args"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 123, 6809, 6809), ("src/ocaml_optcomp/ocaml_optcomp.ml", 123, 6809, 6873), 0), Tag1 ("Ocaml_optcomp", 120)), 0, 0); Tag3 (("Var_within_closure", 517), 1, (Tag3 ((Tag2 ("Var_within_closure"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 124, 6874, 6874), ("src/ocaml_optcomp/ocaml_optcomp.ml", 124, 6874, 6934), 0), Tag1 ("Ocaml_optcomp", 121)), 0, 0); Tag3 (("Variable", 518), 1, (Tag3 ((Tag2 ("Variable"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 125, 6935, 6935), ("src/ocaml_optcomp/ocaml_optcomp.ml", 125, 6935, 6985), 0), Tag1 ("Ocaml_optcomp", 122)), 0, 0); Tag3 (("X86_dsl", 519), 1, (Tag3 ((Tag2 ("X86_dsl"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 126, 6986, 6986), ("src/ocaml_optcomp/ocaml_optcomp.ml", 126, 6986, 7035), 0), Tag1 ("Ocaml_optcomp", 123)), 0, 0); Tag3 (("X86_gas", 520), 1, (Tag3 ((Tag2 ("X86_gas"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 127, 7036, 7036), ("src/ocaml_optcomp/ocaml_optcomp.ml", 127, 7036, 7085), 0), Tag1 ("Ocaml_optcomp", 124)), 0, 0); Tag3 (("X86_masm", 521), 1, (Tag3 ((Tag2 ("X86_masm"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 128, 7086, 7086), ("src/ocaml_optcomp/ocaml_optcomp.ml", 128, 7086, 7136), 0), Tag1 ("Ocaml_optcomp", 125)), 0, 0); Tag3 (("X86_proc", 522), 1, (Tag3 ((Tag2 ("X86_proc"))), 0, (("src/ocaml_optcomp/ocaml_optcomp.ml", 129, 7137, 7137), ("src/ocaml_optcomp/ocaml_optcomp.ml", 129, 7137, 7187), 0), Tag1 ("Ocaml_optcomp", 126)), 0, 0)], "Ocaml_optcomp", [("Ocaml_optcomp", ("\188\001H\019\255Z\195d\1908}\171\2441\143\030")); ["X86_proc"]; ["X86_masm"]; ["X86_gas"]; ["X86_dsl"]; ["Variable"]; ["Var_within_closure"]; ["Unbox_specialised_args"]; ["Unbox_free_vars_of_closures"]; ["Unbox_closures"]; ["Un_anf"]; ["Traverse_for_exported_symbols"]; ["Tag"]; ["Symbol"]; ["Strmatch"]; ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ["Static_exception"]; ["Split"]; ["Spill"]; ["Simplify_primitives"]; ["Simplify_common"]; ["Simplify_boxed_integer_ops"]; ["Simple_value_approx"]; ["Share_constants"]; ["Set_of_closures_origin"]; ["Set_of_closures_id"]; ["Semantics_of_primitives"]; ["Selection"]; ["Selectgen"]; ["Scheduling"]; ["Schedgen"]; ["Remove_unused_program_constructs"]; ["Remove_unused_closure_vars"]; ["Remove_unused_arguments"]; ["Remove_free_vars_equal_to_args"]; ["Reloadgen"]; ["Reload"]; ["Reg"]; ["Ref_to_variables"]; ["Projection"]; ["Proc"]; ["Printmach"]; ["Printlinear"]; ["Printcmm"]; ["Printclambda_primitives"]; ["Printclambda"]; ["Polling"]; ["Pass_wrapper"]; ["Parameter"]; ["Optmaindriver"]; ["Opterrors"]; ["Optcompile"]; ["Mutable_variable"]; ["Mach"]; ["Liveness"]; ["Linscan"]; ["Linkage_name"]; ["Linearize"]; ["Linear_format"]; ["Linear"]; ["Lift_let_to_initialize_symbol"]; ["Lift_constants"]; ["Lift_code"]; ["Invariant_params"]; ["Interval"]; ["Internal_variable_names"]; ["Interf"]; ["Inlining_transforms"]; ["Inlining_stats_types"]; ["Inlining_stats"]; ["Inlining_decision"]; ["Inlining_cost"]; ["Inline_and_simplify_aux"]; ["Inline_and_simplify"]; ["Initialize_symbol_to_let_symbol"]; ["Inconstant_idents"]; ["Import_approx"]; ["Id_types"]; ["Freshening"]; ["Flambda_utils"]; ["Flambda_to_clambda"]; ["Flambda_middle_end"]; ["Flambda_iterators"]; ["Flambda_invariants"]; ["Flambda"]; ["Find_recursive_functions"]; ["Extract_projections"]; ["Export_info_for_pack"]; ["Export_info"]; ["Export_id"]; ["Emitaux"]; ["Emit"]; ["Effect_analysis"]; ["Deadcode"]; ["Dataflow"]; ["Convert_primitives"]; ["Compilenv"]; ["Compilation_unit"]; ["Comballoc"]; ["Coloring"]; ["Cmmgen_state"]; ["Cmmgen"]; ["Cmm_invariants"]; ["Cmm_helpers"]; ["Cmm"]; ["Closure_origin"]; ["Closure_offsets"]; ["Closure_middle_end"]; ["Closure_id"]; ["Closure_element"]; ["Closure_conversion_aux"]; ["Closure_conversion"]; ["Closure"]; ["Clambda_primitives"]; ["Clambda"]; ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ["CSEgen"]; ["CSE"]; ["Build_export_info"]; ["Branch_relaxation"]; ["Backend_var"]; ["Augment_specialised_args"]; ["Asmpackager"]; ["Asmlink"]; ["Asmlibrarian"]; ["Asmgen"]; ["Arch"]; ["Allocated_const"]; ["Alias_analysis"]; ["Afl_instrument"]], [(0)])

module X86_proc = X86_proc

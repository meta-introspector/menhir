module Pattern :
  sig
    type t
    val make : string -> t
    val name : t -> string
    val matches : t -> string -> bool
  end
val split_path : string -> string * string option
val dot_suffixes : string -> string list
module Registrar :
  sig
    type 'context t
    val create :
      kind:string ->
      current_file:string ->
      string_of_context:('context -> string option) -> 'context t
    val register :
      kind:[ `Attribute | `Extension ] ->
      'context t -> 'context -> string -> unit
    val check_collisions : 'context t -> 'context -> string -> unit
    val spellcheck :
      'context t ->
      'context -> ?allowlist:string list -> string -> string option
    module Error :
      sig
        val createf :
          'context t ->
          'context ->
          ?allowlist:string list ->
          (string -> Ppxlib__.Location.Error.t, unit, string,
           Ppxlib__.Location.Error.t)
          format4 -> string Ppxlib__.Loc.t -> Ppxlib__.Location.Error.t
        val raise_errorf :
          'context t ->
          'context ->
          ?allowlist:string list ->
          (string -> Ppxlib__.Location.Error.t, unit, string,
           Ppxlib__.Location.Error.t)
          format4 -> string Ppxlib__.Loc.t -> 'a
        val error_extensionf :
          'context t ->
          'context ->
          ?allowlist:string list ->
          (string -> Ppxlib__.Location.Error.t, unit, string,
           Ppxlib__.Location.Error.t)
          format4 -> string Ppxlib__.Loc.t -> Ppxlib__.Import.extension
      end
    val raise_errorf :
      'context t ->
      'context ->
      ?allowlist:string list ->
      (string -> Ppxlib__.Location.Error.t, unit, string,
       Ppxlib__.Location.Error.t)
      format4 -> string Ppxlib__.Loc.t -> 'a
  end
module Allowlisted :
  sig
    val get_attribute_list : unit -> string list
    val get_extension_list : unit -> string list
    val is_allowlisted : kind:[ `Attribute | `Extension ] -> string -> bool
  end
module Reserved_namespaces :
  sig
    val reserve : string -> unit
    val is_in_reserved_namespaces : string -> bool
  end("DEBUG:rule", [Tag3 (("Pattern", 769), 0, (Tag1 ([Tag1 (("t", 776), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/name.mli", 4, 35, 37), ("src/name.mli", 4, 35, 43), 0), 0, 0, 0, Tag1 ("Ppxlib__Name", 0)), 1, 0); (("make", 777), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -25), (Tag3 ((("t", 776)), 0, (0)), 100000000, 0, -24), 0), 100000000, 0, -23), 0, (("src/name.mli", 6, 45, 47), ("src/name.mli", 6, 45, 69), 0), 0, Tag1 ("Ppxlib__Name", 1)), 0); (("name", 778), ((Tag1 (0, (Tag3 ((("t", 776)), 0, (0)), 100000000, 0, -22), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -21), 0), 100000000, 0, -20), 0, (("src/name.mli", 9, 120, 122), ("src/name.mli", 9, 120, 144), 0), 0, Tag1 ("Ppxlib__Name", 2)), 0); (("matches", 779), ((Tag1 (0, (Tag3 ((("t", 776)), 0, (0)), 100000000, 0, -19), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -18), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -17), 0), 100000000, 0, -16), 0), 100000000, 0, -15), 0, (("src/name.mli", 11, 146, 148), ("src/name.mli", 11, 146, 181), 0), 0, Tag1 ("Ppxlib__Name", 3)), 0)]), 0, (("src/name.mli", 3, 14, 14), ("src/name.mli", 20, 428, 431), 0), Tag1 ("Ppxlib__Name", 4)), 0, 0); (("split_path", 770), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -14), (Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -11); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -13)], (0)), 100000000, 0, -12)]), 100000000, 0, -10), 0), 100000000, 0, -9), 0, (("src/name.mli", 22, 433, 433), ("src/name.mli", 22, 433, 482), 0), 0, Tag1 ("Ppxlib__Name", 5)), 0); (("dot_suffixes", 771), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -8), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -7)], (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("src/name.mli", 27, 570, 570), ("src/name.mli", 27, 570, 610), 0), 0, Tag1 ("Ppxlib__Name", 6)), 0); Tag3 (("Registrar", 772), 0, (Tag1 ([Tag1 (("t", 780), ([((("context")), 100000000, 0, -85)], 1, 0, 1, 0, [7], [2], 0, 0, (("src/name.mli", 35, 742, 744), ("src/name.mli", 35, 742, 759), 0), 0, 0, 0, Tag1 ("Ppxlib__Name", 7)), 1, 0); (("create", 781), ((Tag1 (("kind"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -84), (Tag1 (("current_file"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -83), (Tag1 (("string_of_context"), (Tag1 (0, ((("context")), 100000000, 0, -79), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -82)], (0)), 100000000, 0, -81), 0), 100000000, 0, -80), (Tag3 ((("t", 780)), [((("context")), 100000000, 0, -79)], (0)), 100000000, 0, -78), 0), 100000000, 0, -77), 0), 100000000, 0, -76), 0), 100000000, 0, -75), 0, (("src/name.mli", 39, 872, 874), ("src/name.mli", 43, 1011, 1025), 0), 0, Tag1 ("Ppxlib__Name", 8)), 0); (("register", 782), ((Tag1 (("kind"), (Tag8 (([("Attribute", (0)); ("Extension", (0))], (0, 100000000, 0, -74), 1, 0, 0)), 100000000, 0, -73), (Tag1 (0, (Tag3 ((("t", 780)), [((("context")), 100000000, 0, -71)], (0)), 100000000, 0, -72), (Tag1 (0, ((("context")), 100000000, 0, -71), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -70), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -69), 0), 100000000, 0, -68), 0), 100000000, 0, -67), 0), 100000000, 0, -66), 0), 100000000, 0, -65), 0, (("src/name.mli", 51, 1288, 1290), ("src/name.mli", 52, 1305, 1385), 0), 0, Tag1 ("Ppxlib__Name", 9)), 0); (("check_collisions", 783), ((Tag1 (0, (Tag3 ((("t", 780)), [((("context")), 100000000, 0, -63)], (0)), 100000000, 0, -64), (Tag1 (0, ((("context")), 100000000, 0, -63), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -62), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -61), 0), 100000000, 0, -60), 0), 100000000, 0, -59), 0), 100000000, 0, -58), 0, (("src/name.mli", 54, 1387, 1389), ("src/name.mli", 54, 1387, 1452), 0), 0, Tag1 ("Ppxlib__Name", 10)), 0); (("spellcheck", 784), ((Tag1 (0, (Tag3 ((("t", 780)), [((("context")), 100000000, 0, -56)], (0)), 100000000, 0, -57), (Tag1 (0, ((("context")), 100000000, 0, -56), (Tag1 (Tag1 ("allowlist"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -55)], (0)), 100000000, 0, -54)], (0)), 100000000, 0, -53), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -52), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -51)], (0)), 100000000, 0, -50), 0), 100000000, 0, -49), 0), 100000000, 0, -48), 0), 100000000, 0, -47), 0), 100000000, 0, -46), 0, (("src/name.mli", 56, 1454, 1456), ("src/name.mli", 57, 1473, 1552), 0), 0, Tag1 ("Ppxlib__Name", 11)), 0); Tag3 (("Error", 785), 0, (Tag1 ([(("createf", 787), ((Tag1 (0, (Tag3 ((("t", 780)), [((("context")), 100000000, 0, -144)], (0)), 100000000, 0, -145), (Tag1 (0, ((("context")), 100000000, 0, -144), (Tag1 (Tag1 ("allowlist"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -143)], (0)), 100000000, 0, -142)], (0)), 100000000, 0, -141), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format4"), [(Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -137), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Location"), "Error"), "t"), 0, (0)), 100000000, 0, -136), 0), 100000000, 0, -135); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -138); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -139); (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Location"), "Error"), "t"), 0, (0)), 100000000, 0, -140)], (0)), 100000000, 0, -134), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Loc"), "t"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -133)], (0)), 100000000, 0, -132), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Location"), "Error"), "t"), 0, (0)), 100000000, 0, -131), 0), 100000000, 0, -130), 0), 100000000, 0, -129), 0), 100000000, 0, -128), 0), 100000000, 0, -127), 0), 100000000, 0, -126), 0, (("src/name.mli", 60, 1575, 1579), ("src/name.mli", 66, 1763, 1785), 0), 0, Tag1 ("Ppxlib__Name", 12)), 0); (("raise_errorf", 788), ((Tag1 (0, (Tag3 ((("t", 780)), [((("context")), 100000000, 0, -124)], (0)), 100000000, 0, -125), (Tag1 (0, ((("context")), 100000000, 0, -124), (Tag1 (Tag1 ("allowlist"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -123)], (0)), 100000000, 0, -122)], (0)), 100000000, 0, -121), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format4"), [(Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -117), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Location"), "Error"), "t"), 0, (0)), 100000000, 0, -116), 0), 100000000, 0, -115); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -118); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -119); (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Location"), "Error"), "t"), 0, (0)), 100000000, 0, -120)], (0)), 100000000, 0, -114), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Loc"), "t"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -113)], (0)), 100000000, 0, -112), ((("a")), 100000000, 0, -111), 0), 100000000, 0, -110), 0), 100000000, 0, -109), 0), 100000000, 0, -108), 0), 100000000, 0, -107), 0), 100000000, 0, -106), 0, (("src/name.mli", 68, 1787, 1791), ("src/name.mli", 74, 1980, 1988), 0), 0, Tag1 ("Ppxlib__Name", 13)), 0); (("error_extensionf", 789), ((Tag1 (0, (Tag3 ((("t", 780)), [((("context")), 100000000, 0, -104)], (0)), 100000000, 0, -105), (Tag1 (0, ((("context")), 100000000, 0, -104), (Tag1 (Tag1 ("allowlist"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -103)], (0)), 100000000, 0, -102)], (0)), 100000000, 0, -101), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format4"), [(Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -97), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Location"), "Error"), "t"), 0, (0)), 100000000, 0, -96), 0), 100000000, 0, -95); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -98); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -99); (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Location"), "Error"), "t"), 0, (0)), 100000000, 0, -100)], (0)), 100000000, 0, -94), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Loc"), "t"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -93)], (0)), 100000000, 0, -92), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Import"), "extension"), 0, (0)), 100000000, 0, -91), 0), 100000000, 0, -90), 0), 100000000, 0, -89), 0), 100000000, 0, -88), 0), 100000000, 0, -87), 0), 100000000, 0, -86), 0, (("src/name.mli", 76, 1990, 1994), ("src/name.mli", 82, 2187, 2202), 0), 0, Tag1 ("Ppxlib__Name", 14)), 0)]), 0, (("src/name.mli", 59, 1554, 1556), ("src/name.mli", 83, 2203, 2208), 0), Tag1 ("Ppxlib__Name", 15)), 0, 0); (("raise_errorf", 786), ((Tag1 (0, (Tag3 ((("t", 780)), [((("context")), 100000000, 0, -44)], (0)), 100000000, 0, -45), (Tag1 (0, ((("context")), 100000000, 0, -44), (Tag1 (Tag1 ("allowlist"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -43)], (0)), 100000000, 0, -42)], (0)), 100000000, 0, -41), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format4"), [(Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -37), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Location"), "Error"), "t"), 0, (0)), 100000000, 0, -36), 0), 100000000, 0, -35); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -38); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -39); (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Location"), "Error"), "t"), 0, (0)), 100000000, 0, -40)], (0)), 100000000, 0, -34), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib__")), "Loc"), "t"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -33)], (0)), 100000000, 0, -32), ((("a")), 100000000, 0, -31), 0), 100000000, 0, -30), 0), 100000000, 0, -29), 0), 100000000, 0, -28), 0), 100000000, 0, -27), 0), 100000000, 0, -26), 0, (("src/name.mli", 85, 2210, 2212), ("src/name.mli", 91, 2391, 2397), 0), 0, Tag1 ("Ppxlib__Name", 16)), 0)]), 0, (("src/name.mli", 34, 719, 719), ("src/name.mli", 92, 2398, 2401), 0), Tag1 ("Ppxlib__Name", 17)), 0, 0); Tag3 (("Allowlisted", 773), 0, (Tag1 ([(("get_attribute_list", 790), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -159), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -158)], (0)), 100000000, 0, -157), 0), 100000000, 0, -156), 0, (("src/name.mli", 95, 2428, 2430), ("src/name.mli", 95, 2428, 2474), 0), 0, Tag1 ("Ppxlib__Name", 18)), 0); (("get_extension_list", 791), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -155), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -154)], (0)), 100000000, 0, -153), 0), 100000000, 0, -152), 0, (("src/name.mli", 96, 2475, 2477), ("src/name.mli", 96, 2475, 2521), 0), 0, Tag1 ("Ppxlib__Name", 19)), 0); (("is_allowlisted", 792), ((Tag1 (("kind"), (Tag8 (([("Attribute", (0)); ("Extension", (0))], (0, 100000000, 0, -151), 1, 0, 0)), 100000000, 0, -150), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -149), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -148), 0), 100000000, 0, -147), 0), 100000000, 0, -146), 0, (("src/name.mli", 97, 2522, 2524), ("src/name.mli", 97, 2522, 2595), 0), 0, Tag1 ("Ppxlib__Name", 20)), 0)]), 0, (("src/name.mli", 94, 2403, 2403), ("src/name.mli", 98, 2596, 2599), 0), Tag1 ("Ppxlib__Name", 21)), 0, 0); Tag3 (("Reserved_namespaces", 774), 0, (Tag1 ([(("reserve", 793), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -165), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -164), 0), 100000000, 0, -163), 0, (("src/name.mli", 103, 2699, 2701), ("src/name.mli", 103, 2699, 2729), 0), 0, Tag1 ("Ppxlib__Name", 22)), 0); (("is_in_reserved_namespaces", 794), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -162), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -161), 0), 100000000, 0, -160), 0, (("src/name.mli", 115, 3223, 3225), ("src/name.mli", 115, 3223, 3271), 0), 0, Tag1 ("Ppxlib__Name", 23)), 0)]), 0, (("src/name.mli", 100, 2601, 2601), ("src/name.mli", 116, 3272, 3275), 0), Tag1 ("Ppxlib__Name", 24)), 0, 0); (("ignore_checks", 775), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/name.mli", 118, 3277, 3277), ("src/name.mli", 118, 3277, 3311), 0), 0, Tag1 ("Ppxlib__Name", 25)), 0)], "Ppxlib__Name", [("Ppxlib__Name", ("\202C\151nm\153EG\200\214[;s!)\140")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Types", ("\177\238\029.\220\006\163!\230\015\006\182\133\155\194\166")); ("Type_immediacy", ("\"\127k\011Q\241\211\138\193;8\142\129\141#\251")); ("Subst", ("\021\031\148\223\127\186\189\135\027}\145r\216\143\177\156")); ("Stdppx", ("=:\209>\156\207\149\181\248\131\161P-\254\025q")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__StringLabels", ("\134F\024\226\216Is#\223\230\234\169Z\206Gc")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__StdLabels", (".\193\n\229\139\017\212C-ZA\\kz-\128")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__ListLabels", ("*\194\012\191\020%\170\249m\002\180\178hk\205\220")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Char", ("\1794\1468\190\138\150g\231\240\140d\191.\212e")); ("Stdlib__BytesLabels", ("\145\128\000\239\186Z.\0310^\247\201\174\\\137R")); ("Stdlib__Bytes", ("C\134\194)\175\222\137p\205\246\244\r\241\164P\209")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Arg", ("\024%=\206\198p\149Y\007\004\216,&\254#\207")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shape", ("\235\127Y\213\025\137=\244\218\181\248N\189\188\216p")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("Profile", ("\201i\132?<qM\169\011\239@\142\202\182\023,")); ("Primitive", ("}Shh\162\015|\220A\203\249\232\245G\213\019")); ("Ppxlib_ast__Versions", ("\005+\189\023\165C\208\138FX6X\224\005\223\t")); ("Ppxlib_ast__Import", ("\027\222\n&\137\144M\230R\150g=Y\198\007\233")); ("Ppxlib_ast__Ast", ("?\026\134=\154d\183u\023\212\177\192\b]\250E")); ("Ppxlib_ast__", ("\182{\159J6;\249\149\208}`\139\002r\020x")); ("Ppxlib_ast", ("\002y:\229,^V\247~U\236~\232\131I\154")); ("Ppxlib__Location", ("\r\139A\176n\135\029#\213\194&\153}\132\b\193")); ("Ppxlib__Loc", ("\183\208\004g\131\162\223\177\235#:\182\128\020\166\155")); ("Ppxlib__Import", ("\146|\185\205\005c\141\174\165\006\1517\177}\\\241")); ("Ppxlib__", ("JQ\224\000Y\175_]O\b\254O\194|\017\237")); ("Path", ("\012\183\178\025\1298\228*\021r\185\160Y\252\n\026")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Outcometree", ("9\021%\234\211\206\210\004H\165\208\2014\234Q\142")); ("Ocaml_common", ("1\212\195\020\163\232\187\142G\192\221\180@\1278u")); ("Misc", ("*\026\026\234c\191\131\161\\\203\183\012O\252\153\198")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Load_path", ("\012@\228l\230\164S\172h\1726X\020\252o}")); ("Identifiable", ("\004F\207\014\158GU\001\184\214\187%/#;\211")); ("Ident", ("\b9;!\187.\220\163(x\b\174\\\223\020\004")); ("Env", ("\021\n\181\142x\b\169j\227\"\017\248*\178\245\223")); ("Compmisc", ("B\127\\\174\004T\179\002\242}-C\214\152H*")); ("Cmi_format", ("6\177\bU\139\"\023\152=\249\135\174\b\011Cg")); ("Clflags", ("\162v\193G\199E|\029\023{\b\243]B\144;")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Build_path_prefix_map", ("y\028\167\207D\220\198\216\011\208\172\149\2416\bc")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216")); ("Astlib__Parse", ("\203iQ\135d.\147$\t\207\203C\131\175\193\171")); ("Astlib__Longident", ("\n\192\233\142\177n\225\191\238\161#\150\204n\"Y")); ("Astlib__Location", ("nn\153\250\162\2239\215\129\229e\026xg\000U")); ("Astlib__Ast_501", ("\207\"A\188\024\242Q\223\153\146\239\128\168h\148&")); ("Astlib__Ast_500", ("\202\202\240\178Ep\168 [f\246\t\162T\141\254")); ("Astlib__Ast_414", ("i\179p\208\134r\2177\243\167\157nF\235\143\179")); ("Astlib__Ast_413", ("\240P\019\205\016\157\177\177O)\172\193\028\192\011\190")); ("Astlib__Ast_412", (">\181S\020\t\004\1998\163p\025\210s\216\251\169")); ("Astlib__Ast_411", ("\030\186y\191\005D\180nv\183\b@1\225\168+")); ("Astlib__Ast_410", ("\023\030O]m0\005\214X\n/\226c\201\214\232")); ("Astlib__Ast_409", ("P\147I\234\185H\181\153\207\221\003\165\139\161\150\027")); ("Astlib__Ast_408", ("\225\220%%\162\188\006W\007\252\001X\158\165,\004")); ("Astlib__Ast_407", ("\163\202\2018`\230bGY\138/\021'\148:\018")); ("Astlib__Ast_406", ("v\152\031Q\232\244\141\011p\012\161\164hy\203\151")); ("Astlib__Ast_405", ("\145;\017\238\241\127\173z\138\142Q4>\198\186\207")); ("Astlib__Ast_404", ("I\027\143Zr\250\2468\193\167uOo\029\236\148")); ("Astlib__Ast_403", ("\206M\242\247\155X\251\127\002Ly\024\154\245\153\180")); ("Astlib__Ast_402", ("\178]\161\230\193\144:\005/\\~\127'|\207\189")); ("Astlib__", ("\246\155.n\143$\1435\bi\005\019C\219\191A")); ("Astlib", ("\002*Xp\193\003\201C\234Q\143\029\232\1569\007"))], [(0)])

val ignore_checks : string -> bool

module Make :
  functor
    (G : sig
           type node
           val equal : node -> node -> bool
           val hash : node -> int
           type label
           val sources : (node -> unit) -> unit
           val successors : node -> (label -> int -> node -> unit) -> unit
           val estimate : node -> int
         end)
    ->
    sig
      type path = Edge of G.label * path | Source of G.node
      val reverse : path -> G.node * G.label list
      val search :
        (G.node * path -> unit) -> (G.node -> int) * (G.node -> path)("DEBUG:rule", [Tag3 (("Make", 506), 0, (Tag2 (((("G", 507)), Tag1 ([Tag1 (("node", 508), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/astar.mli", 24, 1452, 1454), ("src/astar.mli", 24, 1452, 1463), 0), 0, 0, 0, Tag1 ("Dune__exe__Astar", 0)), 1, 0); (("equal", 509), ((Tag1 (0, (Tag3 ((("node", 508)), 0, (0)), 100000000, 0, -28), (Tag1 (0, (Tag3 ((("node", 508)), 0, (0)), 100000000, 0, -27), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -26), 0), 100000000, 0, -25), 0), 100000000, 0, -24), 0, (("src/astar.mli", 25, 1464, 1474), ("src/astar.mli", 25, 1464, 1512), 0), 0, Tag1 ("Stdlib__Hashtbl", 32)), 0); (("hash", 510), ((Tag1 (0, (Tag3 ((("node", 508)), 0, (0)), 100000000, 0, -23), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0, (("src/astar.mli", 25, 1464, 1474), ("src/astar.mli", 25, 1464, 1512), 0), 0, Tag1 ("Stdlib__Hashtbl", 33)), 0); Tag1 (("label", 511), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/astar.mli", 28, 1535, 1537), ("src/astar.mli", 28, 1535, 1547), 0), 0, 0, 0, Tag1 ("Dune__exe__Astar", 2)), 1, 0); (("sources", 512), ((Tag1 (0, (Tag1 (0, (Tag3 ((("node", 508)), 0, (0)), 100000000, 0, -20), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -19), 0), 100000000, 0, -18), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("src/astar.mli", 32, 1578, 1580), ("src/astar.mli", 32, 1578, 1615), 0), 0, Tag1 ("Dune__exe__Astar", 3)), 0); (("successors", 513), ((Tag1 (0, (Tag3 ((("node", 508)), 0, (0)), 100000000, 0, -15), (Tag1 (0, (Tag1 (0, (Tag3 ((("label", 511)), 0, (0)), 100000000, 0, -14), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -13), (Tag1 (0, (Tag3 ((("node", 508)), 0, (0)), 100000000, 0, -12), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11), 0), 100000000, 0, -10), 0), 100000000, 0, -9), 0), 100000000, 0, -8), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("src/astar.mli", 37, 1772, 1774), ("src/astar.mli", 37, 1772, 1836), 0), 0, Tag1 ("Dune__exe__Astar", 4)), 0); (("estimate", 514), ((Tag1 (0, (Tag3 ((("node", 508)), 0, (0)), 100000000, 0, -4), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/astar.mli", 42, 2015, 2017), ("src/astar.mli", 42, 2015, 2042), 0), 0, Tag1 ("Dune__exe__Astar", 5)), 0)])), Tag1 ([Tag1 (("path", 515), (0, 0, Tag1 ([(("Edge", 493), ([(Tag3 (Tag1 ((("G", 507)), "label"), 0, (0)), 100000000, 0, -48); (Tag3 ((("path", 515)), 0, (0)), 100000000, 0, -49)]), 0, (("src/astar.mli", 50, 2199, 2203), ("src/astar.mli", 50, 2199, 2227), 0), 0, Tag1 ("Dune__exe__Astar", 8)); (("Source", 494), ([(Tag3 (Tag1 ((("G", 507)), "node"), 0, (0)), 100000000, 0, -50)]), 0, (("src/astar.mli", 51, 2228, 2232), ("src/astar.mli", 51, 2228, 2250), 0), 0, Tag1 ("Dune__exe__Astar", 9))], 0), 1, 0, 0, 0, 0, 0, (("src/astar.mli", 49, 2185, 2187), ("src/astar.mli", 51, 2228, 2250), 0), 0, 0, 0, Tag1 ("Dune__exe__Astar", 7)), 1, 0); (("reverse", 516), ((Tag1 (0, (Tag3 ((("path", 515)), 0, (0)), 100000000, 0, -47), (Tag2 ([(Tag3 (Tag1 ((("G", 507)), "node"), 0, (0)), 100000000, 0, -44); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("G", 507)), "label"), 0, (0)), 100000000, 0, -46)], (0)), 100000000, 0, -45)]), 100000000, 0, -43), 0), 100000000, 0, -42), 0, (("src/astar.mli", 56, 2408, 2410), ("src/astar.mli", 56, 2408, 2452), 0), 0, Tag1 ("Dune__exe__Astar", 10)), 0); (("search", 517), ((Tag1 (0, (Tag1 (0, (Tag2 ([(Tag3 (Tag1 ((("G", 507)), "node"), 0, (0)), 100000000, 0, -40); (Tag3 ((("path", 515)), 0, (0)), 100000000, 0, -41)]), 100000000, 0, -39), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -38), 0), 100000000, 0, -37), (Tag2 ([(Tag1 (0, (Tag3 (Tag1 ((("G", 507)), "node"), 0, (0)), 100000000, 0, -33), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -32), 0), 100000000, 0, -31); (Tag1 (0, (Tag3 (Tag1 ((("G", 507)), "node"), 0, (0)), 100000000, 0, -36), (Tag3 ((("path", 515)), 0, (0)), 100000000, 0, -35), 0), 100000000, 0, -34)]), 100000000, 0, -30), 0), 100000000, 0, -29), 0, (("src/astar.mli", 62, 2753, 2755), ("src/astar.mli", 62, 2753, 2828), 0), 0, Tag1 ("Dune__exe__Astar", 11)), 0)])), 0, (("src/astar.mli", 21, 1409, 1409), ("src/astar.mli", 64, 2830, 2833), 0), Tag1 ("Dune__exe__Astar", 12)), 0, 0)], "Dune__exe__Astar", [("Dune__exe__Astar", ("_\028\026\198\254\021\242\253=\245\172Z\240T&Z")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("MenhirSdk", ("F\232\012\196l\143\145[\255\2193U\197\027\176\139")); ("Dune__exe", ("\137\000\197\175$\007]\218\141\248\172\212\146c\153\212")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [1; (0)])

    end

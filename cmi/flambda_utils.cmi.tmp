val find_declaration :
  Closure_id.t ->
  Flambda.function_declarations -> Flambda.function_declaration
val find_declaration_variable :
  Closure_id.t -> Flambda.function_declarations -> Variable.t
val find_free_variable :
  Var_within_closure.t -> Flambda.set_of_closures -> Variable.t
val function_arity : Flambda.function_declaration -> int
val variables_bound_by_the_closure :
  Closure_id.t -> Flambda.function_declarations -> Variable.Set.t
val can_be_merged : Flambda.t -> Flambda.t -> bool
val description_of_toplevel_node : Flambda.t -> string
val make_closure_declaration :
  is_classic_mode:bool ->
  id:Variable.t -> body:Flambda.t -> params:Parameter.t list -> Flambda.t
val toplevel_substitution :
  Variable.t Variable.Map.t -> Flambda.expr -> Flambda.expr
val toplevel_substitution_named :
  Variable.t Variable.Map.t -> Flambda.named -> Flambda.named
val bind :
  bindings:(Variable.t * Flambda.named) list -> body:Flambda.t -> Flambda.t
val name_expr : name:Internal_variable_names.t -> Flambda.named -> Flambda.t
val name_expr_from_var : var:Variable.t -> Flambda.named -> Flambda.t
val initialize_symbols :
  Flambda.program -> (Symbol.t * Tag.t * Flambda.t list) list
val imported_symbols : Flambda.program -> Symbol.Set.t
val needed_import_symbols : Flambda.program -> Symbol.Set.t
val introduce_needed_import_symbols : Flambda.program -> Flambda.program
val root_symbol : Flambda.program -> Symbol.t
val might_raise_static_exn : Flambda.named -> Static_exception.t -> bool
val make_closure_map :
  Flambda.program -> Set_of_closures_id.t Closure_id.Map.t
val all_lifted_constants :
  Flambda.program -> (Symbol.t * Flambda.constant_defining_value) list
val all_lifted_constants_as_map :
  Flambda.program -> Flambda.constant_defining_value Symbol.Map.t
val all_lifted_constant_sets_of_closures :
  Flambda.program -> Set_of_closures_id.Set.t
val all_lifted_constant_closures : Flambda.program -> Closure_id.Set.t
val all_sets_of_closures : Flambda.program -> Flambda.set_of_closures list
val all_sets_of_closures_map :
  Flambda.program -> Flambda.set_of_closures Set_of_closures_id.Map.t
val substitute_read_symbol_field_for_variables :
  (Symbol.t * int list) Variable.Map.t -> Flambda.t -> Flambda.t
module Switch_storer :
  sig val mk_store : unit -> (Flambda.t, unit) Switch.t_store end
val fun_vars_referenced_in_decls :
  Flambda.function_declarations ->
  closure_symbol:(Closure_id.t -> Symbol.t) -> Variable.Set.t Variable.Map.t
val closures_required_by_entry_point :
  entry_point:Closure_id.t ->
  closure_symbol:(Closure_id.t -> Symbol.t) ->
  Flambda.function_declarations -> Variable.Set.t
val all_functions_parameters :
  Flambda.function_declarations -> Variable.Set.t
val all_free_symbols : Flambda.function_declarations -> Symbol.Set.t
val contains_stub : Flambda.function_declarations -> bool
val clean_projections :
  which_variables:Flambda.specialised_to Variable.Map.t ->
  Flambda.specialised_to Variable.Map.t
val projection_to_named : Projection.t -> Flambda.named
type specialised_to_same_as =
    Not_specialised
  | Specialised_and_aliased_to of Variable.Set.t
val parameters_specialised_to_the_same_variable :
  function_decls:Flambda.function_declarations ->
  specialised_args:Flambda.specialised_to Variable.Map.t ->
  ("DEBUG:rule", [(("find_declaration", 1779), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Closure_id")), "t"), 0, (0)), 100000000, 0, -177), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Flambda")), "function_declarations"), 0, (0)), 100000000, 0, -176), (Tag3 (Tag1 ((Tag2 ("Flambda")), "function_declaration"), 0, (0)), 100000000, 0, -175), 0), 100000000, 0, -174), 0), 100000000, 0, -173), 0, (("middle_end/flambda/flambda_utils.mli", 24, 1364, 1364), ("middle_end/flambda/flambda_utils.mli", 25, 1387, 1466), 0), 0, Tag1 ("Flambda_utils", 0)), 0); (("find_declaration_variable", 1780), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Closure_id")), "t"), 0, (0)), 100000000, 0, -172), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Flambda")), "function_declarations"), 0, (0)), 100000000, 0, -171), (Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -170), 0), 100000000, 0, -169), 0), 100000000, 0, -168), 0, (("middle_end/flambda/flambda_utils.mli", 29, 1558, 1558), ("middle_end/flambda/flambda_utils.mli", 30, 1590, 1651), 0), 0, Tag1 ("Flambda_utils", 1)), 0); (("find_free_variable", 1781), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Var_within_closure")), "t"), 0, (0)), 100000000, 0, -167), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Flambda")), "set_of_closures"), 0, (0)), 100000000, 0, -166), (Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -165), 0), 100000000, 0, -164), 0), 100000000, 0, -163), 0, (("middle_end/flambda/flambda_utils.mli", 33, 1732, 1732), ("middle_end/flambda/flambda_utils.mli", 34, 1757, 1820), 0), 0, Tag1 ("Flambda_utils", 2)), 0); (("function_arity", 1782), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Flambda")), "function_declaration"), 0, (0)), 100000000, 0, -162), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -161), 0), 100000000, 0, -160), 0, (("middle_end/flambda/flambda_utils.mli", 38, 1848, 1848), ("middle_end/flambda/flambda_utils.mli", 38, 1848, 1904), 0), 0, Tag1 ("Flambda_utils", 3)), 0); (("variables_bound_by_the_closure", 1783), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Closure_id")), "t"), 0, (0)), 100000000, 0, -159), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Flambda")), "function_declarations"), 0, (0)), 100000000, 0, -158), (Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Set"), "t"), 0, (0)), 100000000, 0, -157), 0), 100000000, 0, -156), 0), 100000000, 0, -155), 0, (("middle_end/flambda/flambda_utils.mli", 48, 2367, 2367), ("middle_end/flambda/flambda_utils.mli", 49, 2404, 2469), 0), 0, Tag1 ("Flambda_utils", 4)), 0); (("can_be_merged", 1784), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Flambda")), "t"), 0, (0)), 100000000, 0, -154), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Flambda")), "t"), 0, (0)), 100000000, 0, -153), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -152), 0), 100000000, 0, -151), 0), 100000000, 0, -150), 0, (("middle_end/flambda/flambda_utils.mli", 53, 2580, 2580), ("middle_end/flambda/flambda_utils.mli", 53, 2580, 2630), 0), 0, Tag1 ("Flambda_utils", 5)), 0); (("description_of_toplevel_node", 1785), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Flambda")), "t"), 0, (0)), 100000000, 0, -149), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -148), 0), 100000000, 0, -147), 0, (("middle_end/flambda/flambda_utils.mli", 55, 2632, 2632), ("middle_end/flambda/flambda_utils.mli", 55, 2632, 2686), 0), 0, Tag1 ("Flambda_utils", 6)), 0); (("make_closure_declaration", 1786), ((Tag1 (("is_classic_mode"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -146), (Tag1 (("id"), (Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -145), (Tag1 (("body"), (Tag3 (Tag1 ((Tag2 ("Flambda")), "t"), 0, (0)), 100000000, 0, -144), (Tag1 (("params"), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Parameter")), "t"), 0, (0)), 100000000, 0, -143)], (0)), 100000000, 0, -142), (Tag3 (Tag1 ((Tag2 ("Flambda")), "t"), 0, (0)), 100000000, 0, -141), 0), 100000000, 0, -140), 0), 100000000, 0, -139), 0), 100000000, 0, -138), 0), 100000000, 0, -137), 0, (("middle_end/flambda/flambda_utils.mli", 65, 3174, 3174), ("middle_end/flambda/flambda_utils.mli", 70, 3297, 3311), 0), 0, Tag1 ("Flambda_utils", 7)), 0); (("toplevel_substitution", 1787), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Map"), "t"), [(Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -136)], (0)), 100000000, 0, -135), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Flambda")), "expr"), 0, (0)), 100000000, 0, -134), (Tag3 (Tag1 ((Tag2 ("Flambda")), "expr"), 0, (0)), 100000000, 0, -133), 0), 100000000, 0, -132), 0), 100000000, 0, -131), 0, (("middle_end/flambda/flambda_utils.mli", 72, 3313, 3313), ("middle_end/flambda/flambda_utils.mli", 75, 3388, 3405), 0), 0, Tag1 ("Flambda_utils", 8)), 0); (("toplevel_substitution_named", 1788), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Map"), "t"), [(Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -130)], (0)), 100000000, 0, -129), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Flambda")), "named"), 0, (0)), 100000000, 0, -128), (Tag3 (Tag1 ((Tag2 ("Flambda")), "named"), 0, (0)), 100000000, 0, -127), 0), 100000000, 0, -126), 0), 100000000, 0, -125), 0, (("middle_end/flambda/flambda_utils.mli", 77, 3407, 3407), ("middle_end/flambda/flambda_utils.mli", 80, 3489, 3507), 0), 0, Tag1 ("Flambda_utils", 9)), 0); (("bind", 1789), ((Tag1 (("bindings"), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -123); (Tag3 (Tag1 ((Tag2 ("Flambda")), "named"), 0, (0)), 100000000, 0, -124)]), 100000000, 0, -122)], (0)), 100000000, 0, -121), (Tag1 (("body"), (Tag3 (Tag1 ((Tag2 ("Flambda")), "t"), 0, (0)), 100000000, 0, -120), (Tag3 (Tag1 ((Tag2 ("Flambda")), "t"), 0, (0)), 100000000, 0, -119), 0), 100000000, 0, -118), 0), 100000000, 0, -117), 0, (("middle_end/flambda/flambda_utils.mli", 85, 3657, 3657), ("middle_end/flambda/flambda_utils.mli", 88, 3734, 3748), 0), 0, Tag1 ("Flambda_utils", 10)), 0); (("name_expr", 1790), ((Tag1 (("name"), (Tag3 (Tag1 ((Tag2 ("Internal_variable_names")), "t"), 0, (0)), 100000000, 0, -116), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Flambda")), "named"), 0, (0)), 100000000, 0, -115), (Tag3 (Tag1 ((Tag2 ("Flambda")), "t"), 0, (0)), 100000000, 0, -114), 0), 100000000, 0, -113), 0), 100000000, 0, -112), 0, (("middle_end/flambda/flambda_utils.mli", 90, 3750, 3750), ("middle_end/flambda/flambda_utils.mli", 93, 3821, 3836), 0), 0, Tag1 ("Flambda_utils", 11)), 0); (("name_expr_from_var", 1791), ((Tag1 (("var"), (Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -111), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Flambda")), "named"), 0, (0)), 100000000, 0, -110), (Tag3 (Tag1 ((Tag2 ("Flambda")), "t"), 0, (0)), 100000000, 0, -109), 0), 100000000, 0, -108), 0), 100000000, 0, -107), 0, (("middle_end/flambda/flambda_utils.mli", 95, 3838, 3838), ("middle_end/flambda/flambda_utils.mli", 98, 3902, 3917), 0), 0, Tag1 ("Flambda_utils", 12)), 0); (("initialize_symbols", 1792), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Flambda")), "program"), 0, (0)), 100000000, 0, -106), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Symbol")), "t"), 0, (0)), 100000000, 0, -102); (Tag3 (Tag1 ((Tag2 ("Tag")), "t"), 0, (0)), 100000000, 0, -103); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Flambda")), "t"), 0, (0)), 100000000, 0, -105)], (0)), 100000000, 0, -104)]), 100000000, 0, -101)], (0)), 100000000, 0, -100), 0), 100000000, 0, -99), 0, (("middle_end/flambda/flambda_utils.mli", 100, 3919, 3919), ("middle_end/flambda/flambda_utils.mli", 102, 3963, 4008), 0), 0, Tag1 ("Flambda_utils", 13)), 0); (("imported_symbols", 1793), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Flambda")), "program"), 0, (0)), 100000000, 0, -98), (Tag3 (Tag1 (Tag1 ((Tag2 ("Symbol")), "Set"), "t"), 0, (0)), 100000000, 0, -97), 0), 100000000, 0, -96), 0, (("middle_end/flambda/flambda_utils.mli", 104, 4010, 4010), ("middle_end/flambda/flambda_utils.mli", 104, 4010, 4064), 0), 0, Tag1 ("Flambda_utils", 14)), 0); (("needed_import_symbols", 1794), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Flambda")), "program"), 0, (0)), 100000000, 0, -95), (Tag3 (Tag1 (Tag1 ((Tag2 ("Symbol")), "Set"), "t"), 0, (0)), 100000000, 0, -94), 0), 100000000, 0, -93), 0, (("middle_end/flambda/flambda_utils.mli", 106, 4066, 4066), ("middle_end/flambda/flambda_utils.mli", 106, 4066, 4125), 0), 0, Tag1 ("Flambda_utils", 15)), 0); (("introduce_needed_import_symbols", 1795), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Flambda")), "program"), 0, (0)), 100000000, 0, -92), (Tag3 (Tag1 ((Tag2 ("Flambda")), "program"), 0, (0)), 100000000, 0, -91), 0), 100000000, 0, -90), 0, (("middle_end/flambda/flambda_utils.mli", 108, 4127, 4127), ("middle_end/flambda/flambda_utils.mli", 108, 4127, 4199), 0), 0, Tag1 ("Flambda_utils", 16)), 0); (("root_symbol", 1796), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Flambda")), "program"), 0, (0)), 100000000, 0, -89), (Tag3 (Tag1 ((Tag2 ("Symbol")), "t"), 0, (0)), 100000000, 0, -88), 0), 100000000, 0, -87), 0, (("middle_end/flambda/flambda_utils.mli", 110, 4201, 4201), ("middle_end/flambda/flambda_utils.mli", 110, 4201, 4246), 0), 0, Tag1 ("Flambda_utils", 17)), 0); (("might_raise_static_exn", 1797), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Flambda")), "named"), 0, (0)), 100000000, 0, -86), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Static_exception")), "t"), 0, (0)), 100000000, 0, -85), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -84), 0), 100000000, 0, -83), 0), 100000000, 0, -82), 0, (("middle_end/flambda/flambda_utils.mli", 114, 4333, 4333), ("middle_end/flambda/flambda_utils.mli", 114, 4333, 4405), 0), 0, Tag1 ("Flambda_utils", 18)), 0); (("make_closure_map", 1798), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Flambda")), "program"), 0, (0)), 100000000, 0, -81), (Tag3 (Tag1 (Tag1 ((Tag2 ("Closure_id")), "Map"), "t"), [(Tag3 (Tag1 ((Tag2 ("Set_of_closures_id")), "t"), 0, (0)), 100000000, 0, -80)], (0)), 100000000, 0, -79), 0), 100000000, 0, -78), 0, (("middle_end/flambda/flambda_utils.mli", 118, 4532, 4532), ("middle_end/flambda/flambda_utils.mli", 120, 4574, 4616), 0), 0, Tag1 ("Flambda_utils", 19)), 0); (("all_lifted_constants", 1799), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Flambda")), "program"), 0, (0)), 100000000, 0, -77), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Symbol")), "t"), 0, (0)), 100000000, 0, -75); (Tag3 (Tag1 ((Tag2 ("Flambda")), "constant_defining_value"), 0, (0)), 100000000, 0, -76)]), 100000000, 0, -74)], (0)), 100000000, 0, -73), 0), 100000000, 0, -72), 0, (("middle_end/flambda/flambda_utils.mli", 124, 4739, 4739), ("middle_end/flambda/flambda_utils.mli", 126, 4785, 4839), 0), 0, Tag1 ("Flambda_utils", 20)), 0); (("all_lifted_constants_as_map", 1800), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Flambda")), "program"), 0, (0)), 100000000, 0, -71), (Tag3 (Tag1 (Tag1 ((Tag2 ("Symbol")), "Map"), "t"), [(Tag3 (Tag1 ((Tag2 ("Flambda")), "constant_defining_value"), 0, (0)), 100000000, 0, -70)], (0)), 100000000, 0, -69), 0), 100000000, 0, -68), 0, (("middle_end/flambda/flambda_utils.mli", 129, 4921, 4921), ("middle_end/flambda/flambda_utils.mli", 131, 4974, 5023), 0), 0, Tag1 ("Flambda_utils", 21)), 0); (("all_lifted_constant_sets_of_closures", 1801), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Flambda")), "program"), 0, (0)), 100000000, 0, -67), (Tag3 (Tag1 (Tag1 ((Tag2 ("Set_of_closures_id")), "Set"), "t"), 0, (0)), 100000000, 0, -66), 0), 100000000, 0, -65), 0, (("middle_end/flambda/flambda_utils.mli", 135, 5162, 5162), ("middle_end/flambda/flambda_utils.mli", 137, 5224, 5253), 0), 0, Tag1 ("Flambda_utils", 22)), 0); (("all_lifted_constant_closures", 1802), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Flambda")), "program"), 0, (0)), 100000000, 0, -64), (Tag3 (Tag1 (Tag1 ((Tag2 ("Closure_id")), "Set"), "t"), 0, (0)), 100000000, 0, -63), 0), 100000000, 0, -62), 0, (("middle_end/flambda/flambda_utils.mli", 139, 5255, 5255), ("middle_end/flambda/flambda_utils.mli", 139, 5255, 5325), 0), 0, Tag1 ("Flambda_utils", 23)), 0); (("all_sets_of_closures", 1803), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Flambda")), "program"), 0, (0)), 100000000, 0, -61), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Flambda")), "set_of_closures"), 0, (0)), 100000000, 0, -60)], (0)), 100000000, 0, -59), 0), 100000000, 0, -58), 0, (("middle_end/flambda/flambda_utils.mli", 143, 5416, 5416), ("middle_end/flambda/flambda_utils.mli", 143, 5416, 5490), 0), 0, Tag1 ("Flambda_utils", 24)), 0); (("all_sets_of_closures_map", 1804), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Flambda")), "program"), 0, (0)), 100000000, 0, -57), (Tag3 (Tag1 (Tag1 ((Tag2 ("Set_of_closures_id")), "Map"), "t"), [(Tag3 (Tag1 ((Tag2 ("Flambda")), "set_of_closures"), 0, (0)), 100000000, 0, -56)], (0)), 100000000, 0, -55), 0), 100000000, 0, -54), 0, (("middle_end/flambda/flambda_utils.mli", 145, 5492, 5492), ("middle_end/flambda/flambda_utils.mli", 147, 5542, 5595), 0), 0, Tag1 ("Flambda_utils", 25)), 0); (("substitute_read_symbol_field_for_variables", 1805), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Map"), "t"), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Symbol")), "t"), 0, (0)), 100000000, 0, -51); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -53)], (0)), 100000000, 0, -52)]), 100000000, 0, -50)], (0)), 100000000, 0, -49), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Flambda")), "t"), 0, (0)), 100000000, 0, -48), (Tag3 (Tag1 ((Tag2 ("Flambda")), "t"), 0, (0)), 100000000, 0, -47), 0), 100000000, 0, -46), 0), 100000000, 0, -45), 0, (("middle_end/flambda/flambda_utils.mli", 153, 5765, 5765), ("middle_end/flambda/flambda_utils.mli", 156, 5869, 5883), 0), 0, Tag1 ("Flambda_utils", 26)), 0); Tag3 (("Switch_storer", 1806), 0, (Tag1 ([(("mk_store", 1816), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -182), (Tag3 (Tag1 ((Tag2 ("Switch")), "t_store"), [(Tag3 (Tag1 ((Tag2 ("Flambda")), "t"), 0, (0)), 100000000, 0, -180); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -181)], (0)), 100000000, 0, -179), 0), 100000000, 0, -178), 0, (("middle_end/flambda/flambda_utils.mli", 160, 5961, 5963), ("middle_end/flambda/flambda_utils.mli", 160, 5961, 6018), 0), 0, Tag1 ("Flambda_utils", 27)), 0)]), 0, (("middle_end/flambda/flambda_utils.mli", 159, 5934, 5934), ("middle_end/flambda/flambda_utils.mli", 161, 6019, 6022), 0), Tag1 ("Flambda_utils", 28)), 0, 0); (("fun_vars_referenced_in_decls", 1807), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Flambda")), "function_declarations"), 0, (0)), 100000000, 0, -44), (Tag1 (("closure_symbol"), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Closure_id")), "t"), 0, (0)), 100000000, 0, -43), (Tag3 (Tag1 ((Tag2 ("Symbol")), "t"), 0, (0)), 100000000, 0, -42), 0), 100000000, 0, -41), (Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Map"), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Set"), "t"), 0, (0)), 100000000, 0, -40)], (0)), 100000000, 0, -39), 0), 100000000, 0, -38), 0), 100000000, 0, -37), 0, (("middle_end/flambda/flambda_utils.mli", 178, 7041, 7041), ("middle_end/flambda/flambda_utils.mli", 181, 7156, 7190), 0), 0, Tag1 ("Flambda_utils", 29)), 0); (("closures_required_by_entry_point", 1808), ((Tag1 (("entry_point"), (Tag3 (Tag1 ((Tag2 ("Closure_id")), "t"), 0, (0)), 100000000, 0, -36), (Tag1 (("closure_symbol"), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Closure_id")), "t"), 0, (0)), 100000000, 0, -35), (Tag3 (Tag1 ((Tag2 ("Symbol")), "t"), 0, (0)), 100000000, 0, -34), 0), 100000000, 0, -33), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Flambda")), "function_declarations"), 0, (0)), 100000000, 0, -32), (Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Set"), "t"), 0, (0)), 100000000, 0, -31), 0), 100000000, 0, -30), 0), 100000000, 0, -29), 0), 100000000, 0, -28), 0, (("middle_end/flambda/flambda_utils.mli", 185, 7311, 7311), ("middle_end/flambda/flambda_utils.mli", 189, 7460, 7479), 0), 0, Tag1 ("Flambda_utils", 30)), 0); (("all_functions_parameters", 1809), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Flambda")), "function_declarations"), 0, (0)), 100000000, 0, -27), (Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Set"), "t"), 0, (0)), 100000000, 0, -26), 0), 100000000, 0, -25), 0, (("middle_end/flambda/flambda_utils.mli", 191, 7481, 7481), ("middle_end/flambda/flambda_utils.mli", 191, 7481, 7559), 0), 0, Tag1 ("Flambda_utils", 31)), 0); (("all_free_symbols", 1810), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Flambda")), "function_declarations"), 0, (0)), 100000000, 0, -24), (Tag3 (Tag1 (Tag1 ((Tag2 ("Symbol")), "Set"), "t"), 0, (0)), 100000000, 0, -23), 0), 100000000, 0, -22), 0, (("middle_end/flambda/flambda_utils.mli", 193, 7561, 7561), ("middle_end/flambda/flambda_utils.mli", 193, 7561, 7629), 0), 0, Tag1 ("Flambda_utils", 32)), 0); (("contains_stub", 1811), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Flambda")), "function_declarations"), 0, (0)), 100000000, 0, -21), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -20), 0), 100000000, 0, -19), 0, (("middle_end/flambda/flambda_utils.mli", 195, 7631, 7631), ("middle_end/flambda/flambda_utils.mli", 195, 7631, 7688), 0), 0, Tag1 ("Flambda_utils", 33)), 0); (("clean_projections", 1812), ((Tag1 (("which_variables"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Map"), "t"), [(Tag3 (Tag1 ((Tag2 ("Flambda")), "specialised_to"), 0, (0)), 100000000, 0, -18)], (0)), 100000000, 0, -17), (Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Map"), "t"), [(Tag3 (Tag1 ((Tag2 ("Flambda")), "specialised_to"), 0, (0)), 100000000, 0, -16)], (0)), 100000000, 0, -15), 0), 100000000, 0, -14), 0, (("middle_end/flambda/flambda_utils.mli", 200, 7846, 7846), ("middle_end/flambda/flambda_utils.mli", 202, 7929, 7971), 0), 0, Tag1 ("Flambda_utils", 34)), 0); (("projection_to_named", 1813), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Projection")), "t"), 0, (0)), 100000000, 0, -13), (Tag3 (Tag1 ((Tag2 ("Flambda")), "named"), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("middle_end/flambda/flambda_utils.mli", 204, 7973, 7973), ("middle_end/flambda/flambda_utils.mli", 204, 7973, 8028), 0), 0, Tag1 ("Flambda_utils", 35)), 0); Tag1 (("specialised_to_same_as", 1814), (0, 0, Tag1 ([(("Not_specialised", 1038), (0), 0, (("middle_end/flambda/flambda_utils.mli", 207, 8060, 8062), ("middle_end/flambda/flambda_utils.mli", 207, 8060, 8079), 0), 0, Tag1 ("Flambda_utils", 37)); (("Specialised_and_aliased_to", 1039), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Set"), "t"), 0, (0)), 100000000, 0, -10)]), 0, (("middle_end/flambda/flambda_utils.mli", 208, 8080, 8082), ("middle_end/flambda/flambda_utils.mli", 208, 8080, 8128), 0), 0, Tag1 ("Flambda_utils", 38))], 0), 1, 0, 0, 0, 0, 0, (("middle_end/flambda/flambda_utils.mli", 206, 8030, 8030), ("middle_end/flambda/flambda_utils.mli", 208, 8080, 8128), 0), 0, 0, 0, Tag1 ("Flambda_utils", 36)), 1, 0); (("parameters_specialised_to_the_same_variable", 1815), ((Tag1 (("function_decls"), (Tag3 (Tag1 ((Tag2 ("Flambda")), "function_declarations"), 0, (0)), 100000000, 0, -9), (Tag1 (("specialised_args"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Map"), "t"), [(Tag3 (Tag1 ((Tag2 ("Flambda")), "specialised_to"), 0, (0)), 100000000, 0, -8)], (0)), 100000000, 0, -7), (Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Map"), "t"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("specialised_to_same_as", 1814)), 0, (0)), 100000000, 0, -6)], (0)), 100000000, 0, -5)], (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("middle_end/flambda/flambda_utils.mli", 216, 8502, 8502), ("middle_end/flambda/flambda_utils.mli", 219, 8660, 8707), 0), 0, Tag1 ("Flambda_utils", 39)), 0)], "Flambda_utils", [("Flambda_utils", ("y\1745\206\141\145E\234\020j\181=\243\153$\192")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Variable", ("\228'\154\1834\146\207\147+\193Aq\209h\190\220")); ("Var_within_closure", ("vQ\173\251u\026\012+}j\020C}T\151\220")); ("Types", ("\177\238\029.\220\006\163!\230\015\006\182\133\155\194\166")); ("Type_immediacy", ("\"\127k\011Q\241\211\138\193;8\142\129\141#\251")); ("Tag", ("\252\157\132\005\195\228\232\133\246\237\233\224\012\143\192\218")); ("Symbol", ("\179q\177\031_\169\139a\192\019\188\000V\236\232\t")); ("Switch", ("\171\016.\161\157\018`\163\194\222\202f\184\181\238r")); ("Subst", ("\021\031\148\223\127\186\189\135\027}\145r\216\143\177\156")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Static_exception", ("2{#\175\226\185\147\146\176\140\029O\023p\024\\")); ("Shape", ("\235\127Y\213\025\137=\244\218\181\248N\189\188\216p")); ("Set_of_closures_origin", ("$n\234\014\162\130\210K\171\btrA\244\254\195")); ("Set_of_closures_id", ("\178\228\011\028\027~\211\166\244\180\220-W\145_\243")); ("Projection", ("\250\207\030\021*\193\225\168\189!\224\228\192\212\236\224")); ("Primitive", ("}Shh\162\015|\220A\203\249\232\245G\213\019")); ("Path", ("\012\183\178\025\1298\228*\021r\185\160Y\252\n\026")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Parameter", ("*\152\238G\163\217\2377/\t\206\131\226\216K0")); ("Outcometree", ("9\021%\234\211\206\210\004H\165\208\2014\234Q\142")); ("Numbers", ("\004\020\227\212|\031Q6\146\217\211\156\221\234\254\195")); ("Mutable_variable", ("B^*^9`\212\152j\145_\017i.\128?")); ("Misc", ("*\026\026\234c\191\131\161\\\203\183\012O\252\153\198")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Load_path", ("\012@\228l\230\164S\172h\1726X\020\252o}")); ("Linkage_name", ("\023\000\172\166 s\214\ns\155s\156\005\252\154\207")); ("Lambda", ("\180\1419\236'\146K$\128\006\135q\135V\029\180")); ("Internal_variable_names", ("\024|\208(\224\206\012\006\179\203\020\000\179\228\154\218")); ("Identifiable", ("\004F\207\014\158GU\001\184\214\187%/#;\211")); ("Ident", ("\b9;!\187.\220\163(x\b\174\\\223\020\004")); ("Flambda", ("\195J|\022>U\206!\211\212\185N\180zh\241")); ("Env", ("\021\n\181\142x\b\169j\227\"\017\248*\178\245\223")); ("Debuginfo", ("\131\251\175\217P\194M\163\022\151\002\005\006\185:\185")); ("Compilation_unit", ("\007\240\020\003jK\000\210\174\021\189.8^\028K")); ("Cmi_format", ("6\177\bU\139\"\023\152=\249\135\174\b\011Cg")); ("Closure_origin", ("G\222\200`\213\247\022M|O\1488\194\030\187\229")); ("Closure_id", ("k\221yCH\015\186G\246]\003\233\198\179\217A")); ("Closure_element", ("a\194\018\239D1\143{\156A\011\219H#\149A")); ("Clambda_primitives", ("\199\176\237Hv\205\152\14717\179\017\246\221x`")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Build_path_prefix_map", ("y\028\167\207D\220\198\216\011\208\172\149\2416\bc")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216")); ("Allocated_const", ("\029\027.W\160\170!\199Q2\235\240\167\031,\004"))], [(0)])
specialised_to_same_as list Variable.Map.t

type position = First | Second
val swap_position : position -> position
val print_pos : Format.formatter -> position -> unit
type expanded_type = { ty : Types.type_expr; expanded : Types.type_expr; }
val trivial_expansion : Types.type_expr -> expanded_type
type 'a diff = { got : 'a; expected : 'a; }
val map_diff : ('a -> 'b) -> 'a diff -> 'b diff
type 'a escape_kind =
    Constructor of Path.t
  | Univ of Types.type_expr
  | Self
  | Module_type of Path.t
  | Equation of 'a
  | Constraint
type 'a escape = { kind : 'a escape_kind; context : Types.type_expr option; }
val map_escape : ('a -> 'b) -> 'a escape -> 'b escape
val explain : 'a list -> (prev:'a option -> 'a -> 'b option) -> 'b option
type unification = private Unification
type comparison = private Comparison
type fixed_row_case = Cannot_be_closed | Cannot_add_tags of string list
type 'variety variant =
    Incompatible_types_for : string -> 'a variant
  | No_tags : position *
      (Asttypes.label * Types.row_field) list -> 'b variant
  | No_intersection : unification variant
  | Fixed_row : position * fixed_row_case *
      Types.fixed_explanation -> unification variant
  | Presence_not_guaranteed_for : position * string -> comparison variant
  | Openness : position -> comparison variant
type 'variety obj =
    Missing_field : position * string -> 'a obj
  | Abstract_row : position -> 'b obj
  | Self_cannot_be_closed : unification obj
type ('a, 'variety) elt =
    Diff : 'a diff -> ('a, 'b) elt
  | Variant : 'variety variant -> ('a, 'variety) elt
  | Obj : 'variety obj -> ('a, 'variety) elt
  | Escape : 'a escape -> ('a, 'c) elt
  | Incompatible_fields : { name : string; diff : Types.type_expr diff;
    } -> ('a, 'd) elt
  | Rec_occur : Types.type_expr * Types.type_expr -> ('a, 'e) elt
type ('a, 'variety) t = ('a, 'variety) elt list
type 'variety trace = (Types.type_expr, 'variety) t
type 'variety error = (expanded_type, 'variety) t
val map : ('a -> 'b) -> ('a, 'variety) t -> ('b, 'variety) t
val incompatible_fields :
  name:string ->
  got:Types.type_expr ->
  expected:Types.type_expr -> (Types.type_expr, 'a) elt
val swap_trace : ('a, 'variety) t -> ('a, 'variety) t
type unification_error = private { trace : unification error; } [@@unboxed]
type equality_error = private {
  trace : comparison error;
  subst : (Types.type_expr * Types.type_expr) list;
}
type moregen_error = private { trace : comparison error; } [@@unboxed]
val unification_error : trace:unification error -> unification_error
val equality_error :
  trace:comparison error ->
  subst:(Types.type_expr * Types.type_expr) list -> equality_error
val moregen_error : trace:comparison error -> moregen_error
type comparison_error =
    Equality_error of equality_error
  | Moregen_error of moregen_error
val swap_unification_error : unification_error -> unification_error
module Subtype :
  sig
    type 'a elt = Diff of 'a diff
    type 'a t = 'a elt list
    type trace = Types.type_expr t
    type error_trace = expanded_type t
    type unification_error_trace = unification error
    type nonrec error = private {
      trace : error_trace;
      unification_trace : unification error;
    }
    val error :
      trace:error_trace -> unification_trace:unification_error_trace -> error
    val map : ('a -> 'b) -> 'a t -> 'b t("DEBUG:rule", [Tag1 (("position", 645), (0, 0, Tag1 ([(("First", 376), (0), 0, (("typing/errortrace.mli", 20, 1245, 1261), ("typing/errortrace.mli", 20, 1245, 1266), 0), 0, Tag1 ("Errortrace", 2)); (("Second", 377), (0), 0, (("typing/errortrace.mli", 20, 1245, 1267), ("typing/errortrace.mli", 20, 1245, 1275), 0), 0, Tag1 ("Errortrace", 3))], 0), 1, 0, 0, 0, 0, 0, (("typing/errortrace.mli", 20, 1245, 1245), ("typing/errortrace.mli", 20, 1245, 1275), 0), 0, 1, 0, Tag1 ("Errortrace", 1)), 1, 0); (("swap_position", 646), ((Tag1 (0, (Tag3 ((("position", 645)), 0, (0)), 100000000, 0, -177), (Tag3 ((("position", 645)), 0, (0)), 100000000, 0, -176), 0), 100000000, 0, -175), 0, (("typing/errortrace.mli", 22, 1277, 1277), ("typing/errortrace.mli", 22, 1277, 1317), 0), 0, Tag1 ("Errortrace", 4)), 0); (("print_pos", 647), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -174), (Tag1 (0, (Tag3 ((("position", 645)), 0, (0)), 100000000, 0, -173), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -172), 0), 100000000, 0, -171), 0), 100000000, 0, -170), 0, (("typing/errortrace.mli", 23, 1318, 1318), ("typing/errortrace.mli", 23, 1318, 1370), 0), 0, Tag1 ("Errortrace", 5)), 0); Tag1 (("expanded_type", 648), (0, 0, [[(("ty", 537), 0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -168), (("typing/errortrace.mli", 25, 1372, 1395), ("typing/errortrace.mli", 25, 1372, 1409), 0), 0, Tag1 ("Errortrace", 7)); (("expanded", 538), 0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -169), (("typing/errortrace.mli", 25, 1372, 1410), ("typing/errortrace.mli", 25, 1372, 1429), 0), 0, Tag1 ("Errortrace", 8))]], 1, 0, 0, 0, 0, 0, (("typing/errortrace.mli", 25, 1372, 1372), ("typing/errortrace.mli", 25, 1372, 1431), 0), 0, 0, 0, Tag1 ("Errortrace", 6)), 1, 0); (("trivial_expansion", 649), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -167), (Tag3 ((("expanded_type", 648)), 0, (0)), 100000000, 0, -166), 0), 100000000, 0, -165), 0, (("typing/errortrace.mli", 32, 1806, 1806), ("typing/errortrace.mli", 32, 1806, 1856), 0), 0, Tag1 ("Errortrace", 9)), 0); Tag1 (("diff", 650), ([((("a")), 100000000, 0, -164)], 1, [[(("got", 541), 0, ((("a")), 100000000, 0, -164), (("typing/errortrace.mli", 34, 1858, 1875), ("typing/errortrace.mli", 34, 1858, 1883), 0), 0, Tag1 ("Errortrace", 11)); (("expected", 542), 0, ((("a")), 100000000, 0, -164), (("typing/errortrace.mli", 34, 1858, 1884), ("typing/errortrace.mli", 34, 1858, 1896), 0), 0, Tag1 ("Errortrace", 12))]], 1, 0, [25], [0], 0, 0, (("typing/errortrace.mli", 34, 1858, 1858), ("typing/errortrace.mli", 34, 1858, 1898), 0), 0, 0, 0, Tag1 ("Errortrace", 10)), 1, 0); (("map_diff", 651), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -162), ((("b")), 100000000, 0, -160), 0), 100000000, 0, -163), (Tag1 (0, (Tag3 ((("diff", 650)), [((("a")), 100000000, 0, -162)], (0)), 100000000, 0, -161), (Tag3 ((("diff", 650)), [((("b")), 100000000, 0, -160)], (0)), 100000000, 0, -159), 0), 100000000, 0, -158), 0), 100000000, 0, -157), 0, (("typing/errortrace.mli", 37, 1973, 1973), ("typing/errortrace.mli", 37, 1973, 2019), 0), 0, Tag1 ("Errortrace", 13)), 0); Tag1 (("escape_kind", 652), ([((("a")), 100000000, 0, -156)], 1, Tag1 ([(("Constructor", 545), ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -153)]), 0, (("typing/errortrace.mli", 41, 2078, 2080), ("typing/errortrace.mli", 41, 2078, 2103), 0), 0, Tag1 ("Errortrace", 15)); (("Univ", 563), ([(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -154)]), 0, (("typing/errortrace.mli", 42, 2104, 2106), ("typing/errortrace.mli", 42, 2104, 2125), 0), 0, Tag1 ("Errortrace", 16)); (("Self", 564), (0), 0, (("typing/errortrace.mli", 45, 2252, 2254), ("typing/errortrace.mli", 45, 2252, 2260), 0), 0, Tag1 ("Errortrace", 17)); (("Module_type", 565), ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -155)]), 0, (("typing/errortrace.mli", 46, 2261, 2263), ("typing/errortrace.mli", 46, 2261, 2286), 0), 0, Tag1 ("Errortrace", 18)); (("Equation", 566), ([((("a")), 100000000, 0, -156)]), 0, (("typing/errortrace.mli", 47, 2287, 2289), ("typing/errortrace.mli", 47, 2287, 2305), 0), 0, Tag1 ("Errortrace", 19)); (("Constraint", 567), (0), 0, (("typing/errortrace.mli", 48, 2306, 2308), ("typing/errortrace.mli", 48, 2306, 2320), 0), 0, Tag1 ("Errortrace", 20))], 0), 1, 0, [25], [0], 0, 0, (("typing/errortrace.mli", 40, 2056, 2056), ("typing/errortrace.mli", 48, 2306, 2320), 0), 0, 0, 0, Tag1 ("Errortrace", 14)), 1, 0); Tag1 (("escape", 653), ([((("a")), 100000000, 0, -150)], 1, [[(("kind", 569), 0, (Tag3 ((("escape_kind", 652)), [((("a")), 100000000, 0, -150)], (0)), 100000000, 0, -149), (("typing/errortrace.mli", 51, 2339, 2343), ("typing/errortrace.mli", 51, 2339, 2365), 0), 0, Tag1 ("Errortrace", 22)); (("context", 570), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -152)], (0)), 100000000, 0, -151), (("typing/errortrace.mli", 52, 2366, 2370), ("typing/errortrace.mli", 52, 2366, 2396), 0), 0, Tag1 ("Errortrace", 23))]], 1, 0, [25], [0], 0, 0, (("typing/errortrace.mli", 50, 2322, 2322), ("typing/errortrace.mli", 52, 2366, 2398), 0), 0, 0, 0, Tag1 ("Errortrace", 21)), 1, 0); (("map_escape", 654), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -147), ((("b")), 100000000, 0, -145), 0), 100000000, 0, -148), (Tag1 (0, (Tag3 ((("escape", 653)), [((("a")), 100000000, 0, -147)], (0)), 100000000, 0, -146), (Tag3 ((("escape", 653)), [((("b")), 100000000, 0, -145)], (0)), 100000000, 0, -144), 0), 100000000, 0, -143), 0), 100000000, 0, -142), 0, (("typing/errortrace.mli", 54, 2400, 2400), ("typing/errortrace.mli", 54, 2400, 2453), 0), 0, Tag1 ("Errortrace", 24)), 0); (("explain", 655), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -139)], (0)), 100000000, 0, -141), (Tag1 (0, (Tag1 (("prev"), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -139)], (0)), 100000000, 0, -140), (Tag1 (0, ((("a")), 100000000, 0, -139), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -135)], (0)), 100000000, 0, -138), 0), 100000000, 0, -137), 0), 100000000, 0, -136), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -135)], (0)), 100000000, 0, -134), 0), 100000000, 0, -133), 0), 100000000, 0, -132), 0, (("typing/errortrace.mli", 56, 2455, 2455), ("typing/errortrace.mli", 58, 2520, 2531), 0), 0, Tag1 ("Errortrace", 25)), 0); Tag1 (("unification", 656), (0, 0, Tag1 ([(("Unification", 574), (0), 0, (("typing/errortrace.mli", 61, 2553, 2580), ("typing/errortrace.mli", 61, 2553, 2591), 0), 0, Tag1 ("Errortrace", 27))], 0), 0, 0, 0, 0, 0, 0, (("typing/errortrace.mli", 61, 2553, 2553), ("typing/errortrace.mli", 61, 2553, 2591), 0), 0, 1, 0, Tag1 ("Errortrace", 26)), 1, 0); Tag1 (("comparison", 657), (0, 0, Tag1 ([(("Comparison", 576), (0), 0, (("typing/errortrace.mli", 62, 2592, 2619), ("typing/errortrace.mli", 62, 2592, 2629), 0), 0, Tag1 ("Errortrace", 29))], 0), 0, 0, 0, 0, 0, 0, (("typing/errortrace.mli", 62, 2592, 2592), ("typing/errortrace.mli", 62, 2592, 2629), 0), 0, 1, 0, Tag1 ("Errortrace", 28)), 1, 0); Tag1 (("fixed_row_case", 658), (0, 0, Tag1 ([(("Cannot_be_closed", 578), (0), 0, (("typing/errortrace.mli", 65, 2653, 2655), ("typing/errortrace.mli", 65, 2653, 2673), 0), 0, Tag1 ("Errortrace", 31)); (("Cannot_add_tags", 579), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -131)], (0)), 100000000, 0, -130)]), 0, (("typing/errortrace.mli", 66, 2674, 2676), ("typing/errortrace.mli", 66, 2674, 2708), 0), 0, Tag1 ("Errortrace", 32))], 0), 1, 0, 0, 0, 0, 0, (("typing/errortrace.mli", 64, 2631, 2631), ("typing/errortrace.mli", 66, 2674, 2708), 0), 0, 0, 0, Tag1 ("Errortrace", 30)), 1, 0); Tag1 (("variant", 659), ([((("variety")), 100000000, 0, -129)], 1, Tag1 ([(("Incompatible_types_for", 581), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -107)]), ((Tag3 ((("variant", 659)), [((0), 100000000, 0, -106)], (0)), 100000000, 0, -105)), (("typing/errortrace.mli", 70, 2749, 2751), ("typing/errortrace.mli", 70, 2749, 2797), 0), 0, Tag1 ("Errortrace", 34)); (("No_tags", 582), ([(Tag3 ((("position", 645)), 0, (0)), 100000000, 0, -110); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "label"), 0, (0)), 100000000, 0, -113); (Tag3 (Tag1 ((Tag2 ("Types")), "row_field"), 0, (0)), 100000000, 0, -114)]), 100000000, 0, -112)], (0)), 100000000, 0, -111)]), ((Tag3 ((("variant", 659)), [((0), 100000000, 0, -109)], (0)), 100000000, 0, -108)), (("typing/errortrace.mli", 71, 2798, 2800), ("typing/errortrace.mli", 71, 2798, 2869), 0), 0, Tag1 ("Errortrace", 35)); (("No_intersection", 596), (0), ((Tag3 ((("variant", 659)), [(Tag3 ((("unification", 656)), 0, (0)), 100000000, 0, -116)], (0)), 100000000, 0, -115)), (("typing/errortrace.mli", 73, 2890, 2892), ("typing/errortrace.mli", 73, 2890, 2931), 0), 0, Tag1 ("Errortrace", 36)); (("Fixed_row", 597), ([(Tag3 ((("position", 645)), 0, (0)), 100000000, 0, -119); (Tag3 ((("fixed_row_case", 658)), 0, (0)), 100000000, 0, -120); (Tag3 (Tag1 ((Tag2 ("Types")), "fixed_explanation"), 0, (0)), 100000000, 0, -121)]), ((Tag3 ((("variant", 659)), [(Tag3 ((("unification", 656)), 0, (0)), 100000000, 0, -118)], (0)), 100000000, 0, -117)), (("typing/errortrace.mli", 74, 2932, 2934), ("typing/errortrace.mli", 75, 2948, 3022), 0), 0, Tag1 ("Errortrace", 37)); (("Presence_not_guaranteed_for", 598), ([(Tag3 ((("position", 645)), 0, (0)), 100000000, 0, -124); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -125)]), ((Tag3 ((("variant", 659)), [(Tag3 ((("comparison", 657)), 0, (0)), 100000000, 0, -123)], (0)), 100000000, 0, -122)), (("typing/errortrace.mli", 77, 3050, 3052), ("typing/errortrace.mli", 77, 3050, 3123), 0), 0, Tag1 ("Errortrace", 38)); (("Openness", 599), ([(Tag3 ((("position", 645)), 0, (0)), 100000000, 0, -128)]), ((Tag3 ((("variant", 659)), [(Tag3 ((("comparison", 657)), 0, (0)), 100000000, 0, -127)], (0)), 100000000, 0, -126)), (("typing/errortrace.mli", 78, 3124, 3126), ("typing/errortrace.mli", 78, 3124, 3203), 0), 0, Tag1 ("Errortrace", 39))], 0), 1, 0, [63], [0], 0, 0, (("typing/errortrace.mli", 68, 2710, 2710), ("typing/errortrace.mli", 78, 3124, 3203), 0), 0, 0, 0, Tag1 ("Errortrace", 33)), 1, 0); Tag1 (("obj", 660), ([((("variety")), 100000000, 0, -104)], 1, Tag1 ([(("Missing_field", 601), ([(Tag3 ((("position", 645)), 0, (0)), 100000000, 0, -97); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -98)]), ((Tag3 ((("obj", 660)), [((0), 100000000, 0, -96)], (0)), 100000000, 0, -95)), (("typing/errortrace.mli", 82, 3240, 3242), ("typing/errortrace.mli", 82, 3240, 3286), 0), 0, Tag1 ("Errortrace", 41)); (("Abstract_row", 602), ([(Tag3 ((("position", 645)), 0, (0)), 100000000, 0, -101)]), ((Tag3 ((("obj", 660)), [((0), 100000000, 0, -100)], (0)), 100000000, 0, -99)), (("typing/errortrace.mli", 83, 3287, 3289), ("typing/errortrace.mli", 83, 3287, 3323), 0), 0, Tag1 ("Errortrace", 42)); (("Self_cannot_be_closed", 603), (0), ((Tag3 ((("obj", 660)), [(Tag3 ((("unification", 656)), 0, (0)), 100000000, 0, -103)], (0)), 100000000, 0, -102)), (("typing/errortrace.mli", 85, 3344, 3346), ("typing/errortrace.mli", 85, 3344, 3387), 0), 0, Tag1 ("Errortrace", 43))], 0), 1, 0, [63], [0], 0, 0, (("typing/errortrace.mli", 80, 3205, 3205), ("typing/errortrace.mli", 85, 3344, 3387), 0), 0, 0, 0, Tag1 ("Errortrace", 40)), 1, 0); Tag1 (("elt", 661), ([((("a")), 100000000, 0, -93); ((("variety")), 100000000, 0, -94)], 2, Tag1 ([(("Diff", 605), ([(Tag3 ((("diff", 650)), [((("a")), 100000000, 0, -67)], (0)), 100000000, 0, -69)]), ((Tag3 ((("elt", 661)), [((("a")), 100000000, 0, -67); ((0), 100000000, 0, -68)], (0)), 100000000, 0, -66)), (("typing/errortrace.mli", 89, 3430, 3432), ("typing/errortrace.mli", 89, 3430, 3463), 0), 0, Tag1 ("Errortrace", 45)); (("Variant", 606), ([(Tag3 ((("variant", 659)), [((("variety")), 100000000, 0, -72)], (0)), 100000000, 0, -73)]), ((Tag3 ((("elt", 661)), [((("a")), 100000000, 0, -71); ((("variety")), 100000000, 0, -72)], (0)), 100000000, 0, -70)), (("typing/errortrace.mli", 90, 3464, 3466), ("typing/errortrace.mli", 90, 3464, 3516), 0), 0, Tag1 ("Errortrace", 46)); (("Obj", 607), ([(Tag3 ((("obj", 660)), [((("variety")), 100000000, 0, -76)], (0)), 100000000, 0, -77)]), ((Tag3 ((("elt", 661)), [((("a")), 100000000, 0, -75); ((("variety")), 100000000, 0, -76)], (0)), 100000000, 0, -74)), (("typing/errortrace.mli", 91, 3517, 3519), ("typing/errortrace.mli", 91, 3517, 3561), 0), 0, Tag1 ("Errortrace", 47)); (("Escape", 608), ([(Tag3 ((("escape", 653)), [((("a")), 100000000, 0, -79)], (0)), 100000000, 0, -81)]), ((Tag3 ((("elt", 661)), [((("a")), 100000000, 0, -79); ((0), 100000000, 0, -80)], (0)), 100000000, 0, -78)), (("typing/errortrace.mli", 92, 3562, 3564), ("typing/errortrace.mli", 92, 3562, 3599), 0), 0, Tag1 ("Errortrace", 48)); (("Incompatible_fields", 609), Tag1 ([(("name", 610), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -85), (("typing/errortrace.mli", 93, 3600, 3628), ("typing/errortrace.mli", 93, 3600, 3640), 0), 0, Tag1 ("Errortrace", 49)); (("diff", 611), 0, (Tag3 ((("diff", 650)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -87)], (0)), 100000000, 0, -86), (("typing/errortrace.mli", 93, 3600, 3641), ("typing/errortrace.mli", 93, 3600, 3661), 0), 0, Tag1 ("Errortrace", 50))]), ((Tag3 ((("elt", 661)), [((("a")), 100000000, 0, -83); ((0), 100000000, 0, -84)], (0)), 100000000, 0, -82)), (("typing/errortrace.mli", 93, 3600, 3602), ("typing/errortrace.mli", 93, 3600, 3678), 0), 0, Tag1 ("Errortrace", 51)); (("Rec_occur", 612), ([(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -91); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -92)]), ((Tag3 ((("elt", 661)), [((("a")), 100000000, 0, -89); ((0), 100000000, 0, -90)], (0)), 100000000, 0, -88)), (("typing/errortrace.mli", 95, 3746, 3748), ("typing/errortrace.mli", 95, 3746, 3798), 0), 0, Tag1 ("Errortrace", 52))], 0), 1, 0, [31; 63], [0; 0], 0, 0, (("typing/errortrace.mli", 87, 3389, 3389), ("typing/errortrace.mli", 95, 3746, 3798), 0), 0, 0, 0, Tag1 ("Errortrace", 44)), 1, 0); Tag1 (("t", 662), ([((("a")), 100000000, 0, -64); ((("variety")), 100000000, 0, -65)], 2, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 661)), [((("a")), 100000000, 0, -64); ((("variety")), 100000000, 0, -65)], (0)), 100000000, 0, -63)], (0)), 100000000, 0, -62)), [31; 63], [0; 0], 0, 0, (("typing/errortrace.mli", 97, 3800, 3800), ("typing/errortrace.mli", 97, 3800, 3847), 0), 0, 0, 0, Tag1 ("Errortrace", 59)), 1, 0); Tag1 (("trace", 663), ([((("variety")), 100000000, 0, -61)], 1, 0, 1, ((Tag3 ((("t", 662)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -60); ((("variety")), 100000000, 0, -61)], (0)), 100000000, 0, -59)), [63], [0], 0, 0, (("typing/errortrace.mli", 99, 3849, 3849), ("typing/errortrace.mli", 99, 3849, 3898), 0), 0, 0, 0, Tag1 ("Errortrace", 60)), 1, 0); Tag1 (("error", 664), ([((("variety")), 100000000, 0, -58)], 1, 0, 1, ((Tag3 ((("t", 662)), [(Tag3 ((("expanded_type", 648)), 0, (0)), 100000000, 0, -57); ((("variety")), 100000000, 0, -58)], (0)), 100000000, 0, -56)), [63], [0], 0, 0, (("typing/errortrace.mli", 100, 3899, 3899), ("typing/errortrace.mli", 100, 3899, 3948), 0), 0, 0, 0, Tag1 ("Errortrace", 61)), 1, 0); (("map", 665), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -54), ((("b")), 100000000, 0, -51), 0), 100000000, 0, -55), (Tag1 (0, (Tag3 ((("t", 662)), [((("a")), 100000000, 0, -54); ((("variety")), 100000000, 0, -52)], (0)), 100000000, 0, -53), (Tag3 ((("t", 662)), [((("b")), 100000000, 0, -51); ((("variety")), 100000000, 0, -52)], (0)), 100000000, 0, -50), 0), 100000000, 0, -49), 0), 100000000, 0, -48), 0, (("typing/errortrace.mli", 102, 3950, 3950), ("typing/errortrace.mli", 102, 3950, 4010), 0), 0, Tag1 ("Errortrace", 62)), 0); (("incompatible_fields", 666), ((Tag1 (("name"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -47), (Tag1 (("got"), (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -46), (Tag1 (("expected"), (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -45), (Tag3 ((("elt", 661)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -43); ((0), 100000000, 0, -44)], (0)), 100000000, 0, -42), 0), 100000000, 0, -41), 0), 100000000, 0, -40), 0), 100000000, 0, -39), 0, (("typing/errortrace.mli", 104, 4012, 4012), ("typing/errortrace.mli", 105, 4038, 4112), 0), 0, Tag1 ("Errortrace", 63)), 0); (("swap_trace", 667), ((Tag1 (0, (Tag3 ((("t", 662)), [((("a")), 100000000, 0, -36); ((("variety")), 100000000, 0, -37)], (0)), 100000000, 0, -38), (Tag3 ((("t", 662)), [((("a")), 100000000, 0, -36); ((("variety")), 100000000, 0, -37)], (0)), 100000000, 0, -35), 0), 100000000, 0, -34), 0, (("typing/errortrace.mli", 107, 4114, 4114), ("typing/errortrace.mli", 107, 4114, 4167), 0), 0, Tag1 ("Errortrace", 64)), 0); Tag1 (("unification_error", 668), (0, 0, ([(("trace", 620), 0, (Tag3 ((("error", 664)), [(Tag3 ((("unification", 656)), 0, (0)), 100000000, 0, -33)], (0)), 100000000, 0, -32), (("typing/errortrace.mli", 119, 4815, 4850), ("typing/errortrace.mli", 119, 4815, 4875), 0), 0, Tag1 ("Errortrace", 66))], (0)), 0, 0, 0, 0, 0, 0, (("typing/errortrace.mli", 119, 4815, 4815), ("typing/errortrace.mli", 119, 4815, 4889), 0), [(("unboxed", (("typing/errortrace.mli", 119, 4815, 4881), ("typing/errortrace.mli", 119, 4815, 4888), 0)), (0), (("typing/errortrace.mli", 119, 4815, 4878), ("typing/errortrace.mli", 119, 4815, 4889), 0))], 0, 0, Tag1 ("Errortrace", 65)), 1, 0); Tag1 (("equality_error", 669), (0, 0, [[(("trace", 622), 0, (Tag3 ((("error", 664)), [(Tag3 ((("comparison", 657)), 0, (0)), 100000000, 0, -27)], (0)), 100000000, 0, -26), (("typing/errortrace.mli", 122, 4921, 4925), ("typing/errortrace.mli", 122, 4921, 4950), 0), 0, Tag1 ("Errortrace", 68)); (("subst", 623), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -30); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -31)]), 100000000, 0, -29)], (0)), 100000000, 0, -28), (("typing/errortrace.mli", 123, 4951, 4955), ("typing/errortrace.mli", 123, 4951, 4991), 0), 0, Tag1 ("Errortrace", 69))]], 0, 0, 0, 0, 0, 0, (("typing/errortrace.mli", 121, 4891, 4891), ("typing/errortrace.mli", 123, 4951, 4993), 0), 0, 0, 0, Tag1 ("Errortrace", 67)), 1, 0); Tag1 (("moregen_error", 670), (0, 0, ([(("trace", 625), 0, (Tag3 ((("error", 664)), [(Tag3 ((("comparison", 657)), 0, (0)), 100000000, 0, -25)], (0)), 100000000, 0, -24), (("typing/errortrace.mli", 125, 4995, 5026), ("typing/errortrace.mli", 125, 4995, 5050), 0), 0, Tag1 ("Errortrace", 71))], (0)), 0, 0, 0, 0, 0, 0, (("typing/errortrace.mli", 125, 4995, 4995), ("typing/errortrace.mli", 125, 4995, 5064), 0), [(("unboxed", (("typing/errortrace.mli", 125, 4995, 5056), ("typing/errortrace.mli", 125, 4995, 5063), 0)), (0), (("typing/errortrace.mli", 125, 4995, 5053), ("typing/errortrace.mli", 125, 4995, 5064), 0))], 0, 0, Tag1 ("Errortrace", 70)), 1, 0); (("unification_error", 671), ((Tag1 (("trace"), (Tag3 ((("error", 664)), [(Tag3 ((("unification", 656)), 0, (0)), 100000000, 0, -23)], (0)), 100000000, 0, -22), (Tag3 ((("unification_error", 668)), 0, (0)), 100000000, 0, -21), 0), 100000000, 0, -20), 0, (("typing/errortrace.mli", 127, 5066, 5066), ("typing/errortrace.mli", 127, 5066, 5134), 0), 0, Tag1 ("Errortrace", 72)), 0); (("equality_error", 672), ((Tag1 (("trace"), (Tag3 ((("error", 664)), [(Tag3 ((("comparison", 657)), 0, (0)), 100000000, 0, -19)], (0)), 100000000, 0, -18), (Tag1 (("subst"), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -16); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -17)]), 100000000, 0, -15)], (0)), 100000000, 0, -14), (Tag3 ((("equality_error", 669)), 0, (0)), 100000000, 0, -13), 0), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("typing/errortrace.mli", 129, 5136, 5136), ("typing/errortrace.mli", 130, 5157, 5237), 0), 0, Tag1 ("Errortrace", 73)), 0); (("moregen_error", 673), ((Tag1 (("trace"), (Tag3 ((("error", 664)), [(Tag3 ((("comparison", 657)), 0, (0)), 100000000, 0, -10)], (0)), 100000000, 0, -9), (Tag3 ((("moregen_error", 670)), 0, (0)), 100000000, 0, -8), 0), 100000000, 0, -7), 0, (("typing/errortrace.mli", 132, 5239, 5239), ("typing/errortrace.mli", 132, 5239, 5298), 0), 0, Tag1 ("Errortrace", 74)), 0); Tag1 (("comparison_error", 674), (0, 0, Tag1 ([(("Equality_error", 630), ([(Tag3 ((("equality_error", 669)), 0, (0)), 100000000, 0, -5)]), 0, (("typing/errortrace.mli", 136, 5399, 5401), ("typing/errortrace.mli", 136, 5399, 5435), 0), 0, Tag1 ("Errortrace", 76)); (("Moregen_error", 631), ([(Tag3 ((("moregen_error", 670)), 0, (0)), 100000000, 0, -6)]), 0, (("typing/errortrace.mli", 137, 5436, 5438), ("typing/errortrace.mli", 137, 5436, 5471), 0), 0, Tag1 ("Errortrace", 77))], 0), 1, 0, 0, 0, 0, 0, (("typing/errortrace.mli", 135, 5375, 5375), ("typing/errortrace.mli", 137, 5436, 5471), 0), 0, 0, 0, Tag1 ("Errortrace", 75)), 1, 0); (("swap_unification_error", 675), ((Tag1 (0, (Tag3 ((("unification_error", 668)), 0, (0)), 100000000, 0, -4), (Tag3 ((("unification_error", 668)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("typing/errortrace.mli", 140, 5521, 5521), ("typing/errortrace.mli", 140, 5521, 5588), 0), 0, Tag1 ("Errortrace", 78)), 0); Tag3 (("Subtype", 676), 0, (Tag1 ([Tag1 (("elt", 677), ([((("a")), 100000000, 0, -203)], 1, Tag1 ([(("Diff", 634), ([(Tag3 ((("diff", 650)), [((("a")), 100000000, 0, -203)], (0)), 100000000, 0, -202)]), 0, (("typing/errortrace.mli", 144, 5627, 5631), ("typing/errortrace.mli", 144, 5627, 5648), 0), 0, Tag1 ("Errortrace", 80))], 0), 1, 0, [25], [0], 0, 0, (("typing/errortrace.mli", 143, 5611, 5613), ("typing/errortrace.mli", 144, 5627, 5648), 0), 0, 0, 1, Tag1 ("Errortrace", 79)), 1, 0); Tag1 (("t", 678), ([((("a")), 100000000, 0, -201)], 1, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 677)), [((("a")), 100000000, 0, -201)], (0)), 100000000, 0, -200)], (0)), 100000000, 0, -199)), [25], [0], 0, 0, (("typing/errortrace.mli", 146, 5650, 5652), ("typing/errortrace.mli", 146, 5650, 5675), 0), 0, 0, 0, Tag1 ("Errortrace", 81)), 1, 0); Tag1 (("trace", 679), (0, 0, 0, 1, ((Tag3 ((("t", 678)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -198)], (0)), 100000000, 0, -197)), 0, 0, 0, 0, (("typing/errortrace.mli", 155, 6134, 6136), ("typing/errortrace.mli", 155, 6134, 6166), 0), 0, 0, 0, Tag1 ("Errortrace", 82)), 1, 0); Tag1 (("error_trace", 680), (0, 0, 0, 1, ((Tag3 ((("t", 678)), [(Tag3 ((("expanded_type", 648)), 0, (0)), 100000000, 0, -196)], (0)), 100000000, 0, -195)), 0, 0, 0, 0, (("typing/errortrace.mli", 156, 6167, 6169), ("typing/errortrace.mli", 156, 6167, 6203), 0), 0, 0, 0, Tag1 ("Errortrace", 83)), 1, 0); Tag1 (("unification_error_trace", 681), (0, 0, 0, 1, ((Tag3 ((("error", 664)), [(Tag3 ((("unification", 656)), 0, (0)), 100000000, 0, -194)], (0)), 100000000, 0, -193)), 0, 0, 0, 0, (("typing/errortrace.mli", 158, 6205, 6207), ("typing/errortrace.mli", 158, 6205, 6255), 0), 0, 0, 0, Tag1 ("Errortrace", 84)), 1, 0); Tag1 (("error", 682), (0, 0, [[(("trace", 640), 0, (Tag3 ((("error_trace", 680)), 0, (0)), 100000000, 0, -190), (("typing/errortrace.mli", 161, 6313, 6319), ("typing/errortrace.mli", 162, 6351, 6356), 0), 0, Tag1 ("Errortrace", 86)); (("unification_trace", 641), 0, (Tag3 ((("error", 664)), [(Tag3 ((("unification", 656)), 0, (0)), 100000000, 0, -192)], (0)), 100000000, 0, -191), (("typing/errortrace.mli", 162, 6351, 6357), ("typing/errortrace.mli", 162, 6351, 6394), 0), 0, Tag1 ("Errortrace", 87))]], 0, 0, 0, 0, 0, 0, (("typing/errortrace.mli", 160, 6283, 6285), ("typing/errortrace.mli", 162, 6351, 6396), 0), 0, 0, 0, Tag1 ("Errortrace", 85)), 0, 0); (("error", 683), ((Tag1 (("trace"), (Tag3 ((("error_trace", 680)), 0, (0)), 100000000, 0, -189), (Tag1 (("unification_trace"), (Tag3 ((("unification_error_trace", 681)), 0, (0)), 100000000, 0, -188), (Tag3 ((("error", 682)), 0, (0)), 100000000, 0, -187), 0), 100000000, 0, -186), 0), 100000000, 0, -185), 0, (("typing/errortrace.mli", 164, 6398, 6400), ("typing/errortrace.mli", 165, 6412, 6487), 0), 0, Tag1 ("Errortrace", 88)), 0); (("map", 684), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -183), ((("b")), 100000000, 0, -181), 0), 100000000, 0, -184), (Tag1 (0, (Tag3 ((("t", 678)), [((("a")), 100000000, 0, -183)], (0)), 100000000, 0, -182), (Tag3 ((("t", 678)), [((("b")), 100000000, 0, -181)], (0)), 100000000, 0, -180), 0), 100000000, 0, -179), 0), 100000000, 0, -178), 0, (("typing/errortrace.mli", 167, 6489, 6491), ("typing/errortrace.mli", 167, 6489, 6527), 0), 0, Tag1 ("Errortrace", 89)), 0)]), 0, (("typing/errortrace.mli", 142, 5590, 5590), ("typing/errortrace.mli", 168, 6528, 6531), 0), Tag1 ("Errortrace", 90)), 0, 0)], "Errortrace", [("Errortrace", ("\238\196yV6<x\\\13126\144\141\000~\145")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Types", ("\177\238\029.\220\006\163!\230\015\006\182\133\155\194\166")); ("Type_immediacy", ("\"\127k\011Q\241\211\138\193;8\142\129\141#\251")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shape", ("\235\127Y\213\025\137=\244\218\181\248N\189\188\216p")); ("Primitive", ("}Shh\162\015|\220A\203\249\232\245G\213\019")); ("Path", ("\012\183\178\025\1298\228*\021r\185\160Y\252\n\026")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Outcometree", ("9\021%\234\211\206\210\004H\165\208\2014\234Q\142")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Identifiable", ("\004F\207\014\158GU\001\184\214\187%/#;\211")); ("Ident", ("\b9;!\187.\220\163(x\b\174\\\223\020\004")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216"))], [(0)])

  end

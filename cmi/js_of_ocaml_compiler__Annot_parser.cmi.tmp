type token =
    TWeakdef
  | TVersion
  | TVNum of string
  | TRequires
  | TProvides
  | TOTHER of string
  | TIf
  | TIdent of string
  | TComma
  | TColon
  | TBang
  | TAlways
  | TAlias
  | TA_Shallow
  | TA_Pure
  | TA_Object_literal
  | TA_Mutator
  | TA_Mutable
  | TA_Const
  | RPARENT
  | LT
  | LPARENT
  | LE
  | GT
  | GE
  | EQ
  | EOL
  | EOF
exception Error
val annot :
  (Lexing.lexbuf -> token) ->
  ("DEBUG:rule", [Tag1 (("token", 409), (0, 0, Tag1 ([(("TWeakdef", 337), (0), 0, (("compiler/lib/annot_parser.mli", 5, 42, 44), ("compiler/lib/annot_parser.mli", 5, 42, 54), 0), 0, Tag1 ("Js_of_ocaml_compiler__Annot_parser", 1)); (("TVersion", 338), (0), 0, (("compiler/lib/annot_parser.mli", 6, 55, 57), ("compiler/lib/annot_parser.mli", 6, 55, 67), 0), 0, Tag1 ("Js_of_ocaml_compiler__Annot_parser", 2)); (("TVNum", 339), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -9)]), 0, (("compiler/lib/annot_parser.mli", 7, 68, 70), ("compiler/lib/annot_parser.mli", 7, 68, 89), 0), 0, Tag1 ("Js_of_ocaml_compiler__Annot_parser", 3)); (("TRequires", 340), (0), 0, (("compiler/lib/annot_parser.mli", 8, 90, 92), ("compiler/lib/annot_parser.mli", 8, 90, 103), 0), 0, Tag1 ("Js_of_ocaml_compiler__Annot_parser", 4)); (("TProvides", 341), (0), 0, (("compiler/lib/annot_parser.mli", 9, 104, 106), ("compiler/lib/annot_parser.mli", 9, 104, 117), 0), 0, Tag1 ("Js_of_ocaml_compiler__Annot_parser", 5)); (("TOTHER", 342), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10)]), 0, (("compiler/lib/annot_parser.mli", 10, 118, 120), ("compiler/lib/annot_parser.mli", 10, 118, 140), 0), 0, Tag1 ("Js_of_ocaml_compiler__Annot_parser", 6)); (("TIf", 343), (0), 0, (("compiler/lib/annot_parser.mli", 11, 141, 143), ("compiler/lib/annot_parser.mli", 11, 141, 148), 0), 0, Tag1 ("Js_of_ocaml_compiler__Annot_parser", 7)); (("TIdent", 344), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -11)]), 0, (("compiler/lib/annot_parser.mli", 12, 149, 151), ("compiler/lib/annot_parser.mli", 12, 149, 171), 0), 0, Tag1 ("Js_of_ocaml_compiler__Annot_parser", 8)); (("TComma", 345), (0), 0, (("compiler/lib/annot_parser.mli", 13, 172, 174), ("compiler/lib/annot_parser.mli", 13, 172, 182), 0), 0, Tag1 ("Js_of_ocaml_compiler__Annot_parser", 9)); (("TColon", 346), (0), 0, (("compiler/lib/annot_parser.mli", 14, 183, 185), ("compiler/lib/annot_parser.mli", 14, 183, 193), 0), 0, Tag1 ("Js_of_ocaml_compiler__Annot_parser", 10)); (("TBang", 347), (0), 0, (("compiler/lib/annot_parser.mli", 15, 194, 196), ("compiler/lib/annot_parser.mli", 15, 194, 203), 0), 0, Tag1 ("Js_of_ocaml_compiler__Annot_parser", 11)); (("TAlways", 348), (0), 0, (("compiler/lib/annot_parser.mli", 16, 204, 206), ("compiler/lib/annot_parser.mli", 16, 204, 215), 0), 0, Tag1 ("Js_of_ocaml_compiler__Annot_parser", 12)); (("TAlias", 349), (0), 0, (("compiler/lib/annot_parser.mli", 17, 216, 218), ("compiler/lib/annot_parser.mli", 17, 216, 226), 0), 0, Tag1 ("Js_of_ocaml_compiler__Annot_parser", 13)); (("TA_Shallow", 350), (0), 0, (("compiler/lib/annot_parser.mli", 18, 227, 229), ("compiler/lib/annot_parser.mli", 18, 227, 241), 0), 0, Tag1 ("Js_of_ocaml_compiler__Annot_parser", 14)); (("TA_Pure", 351), (0), 0, (("compiler/lib/annot_parser.mli", 19, 242, 244), ("compiler/lib/annot_parser.mli", 19, 242, 253), 0), 0, Tag1 ("Js_of_ocaml_compiler__Annot_parser", 15)); (("TA_Object_literal", 352), (0), 0, (("compiler/lib/annot_parser.mli", 20, 254, 256), ("compiler/lib/annot_parser.mli", 20, 254, 275), 0), 0, Tag1 ("Js_of_ocaml_compiler__Annot_parser", 16)); (("TA_Mutator", 353), (0), 0, (("compiler/lib/annot_parser.mli", 21, 276, 278), ("compiler/lib/annot_parser.mli", 21, 276, 290), 0), 0, Tag1 ("Js_of_ocaml_compiler__Annot_parser", 17)); (("TA_Mutable", 354), (0), 0, (("compiler/lib/annot_parser.mli", 22, 291, 293), ("compiler/lib/annot_parser.mli", 22, 291, 305), 0), 0, Tag1 ("Js_of_ocaml_compiler__Annot_parser", 18)); (("TA_Const", 355), (0), 0, (("compiler/lib/annot_parser.mli", 23, 306, 308), ("compiler/lib/annot_parser.mli", 23, 306, 318), 0), 0, Tag1 ("Js_of_ocaml_compiler__Annot_parser", 19)); (("RPARENT", 356), (0), 0, (("compiler/lib/annot_parser.mli", 24, 319, 321), ("compiler/lib/annot_parser.mli", 24, 319, 330), 0), 0, Tag1 ("Js_of_ocaml_compiler__Annot_parser", 20)); (("LT", 357), (0), 0, (("compiler/lib/annot_parser.mli", 25, 331, 333), ("compiler/lib/annot_parser.mli", 25, 331, 337), 0), 0, Tag1 ("Js_of_ocaml_compiler__Annot_parser", 21)); (("LPARENT", 358), (0), 0, (("compiler/lib/annot_parser.mli", 26, 338, 340), ("compiler/lib/annot_parser.mli", 26, 338, 349), 0), 0, Tag1 ("Js_of_ocaml_compiler__Annot_parser", 22)); (("LE", 359), (0), 0, (("compiler/lib/annot_parser.mli", 27, 350, 352), ("compiler/lib/annot_parser.mli", 27, 350, 356), 0), 0, Tag1 ("Js_of_ocaml_compiler__Annot_parser", 23)); (("GT", 360), (0), 0, (("compiler/lib/annot_parser.mli", 28, 357, 359), ("compiler/lib/annot_parser.mli", 28, 357, 363), 0), 0, Tag1 ("Js_of_ocaml_compiler__Annot_parser", 24)); (("GE", 361), (0), 0, (("compiler/lib/annot_parser.mli", 29, 364, 366), ("compiler/lib/annot_parser.mli", 29, 364, 370), 0), 0, Tag1 ("Js_of_ocaml_compiler__Annot_parser", 25)); (("EQ", 362), (0), 0, (("compiler/lib/annot_parser.mli", 30, 371, 373), ("compiler/lib/annot_parser.mli", 30, 371, 377), 0), 0, Tag1 ("Js_of_ocaml_compiler__Annot_parser", 26)); (("EOL", 363), (0), 0, (("compiler/lib/annot_parser.mli", 31, 378, 380), ("compiler/lib/annot_parser.mli", 31, 378, 385), 0), 0, Tag1 ("Js_of_ocaml_compiler__Annot_parser", 27)); (("EOF", 364), (0), 0, (("compiler/lib/annot_parser.mli", 32, 386, 388), ("compiler/lib/annot_parser.mli", 32, 386, 393), 0), 0, Tag1 ("Js_of_ocaml_compiler__Annot_parser", 28))], 0), 1, 0, 0, 0, 0, 0, (("compiler/lib/annot_parser.mli", 4, 28, 28), ("compiler/lib/annot_parser.mli", 32, 386, 393), 0), 0, 0, 0, Tag1 ("Js_of_ocaml_compiler__Annot_parser", 0)), 1, 0); Tag2 (("Error", 410), ((Tag3 ("exn", 7)), 0, (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Js_of_ocaml_compiler__Annot_parser", 29)), 2, 0); (("annot", 411), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -8), (Tag3 ((("token", 409)), 0, (0)), 100000000, 0, -7), 0), 100000000, 0, -6), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -5), (Tag3 (Tag1 (Tag1 ((Tag2 ("Js_of_ocaml_compiler")), "Primitive"), "t"), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("compiler/lib/annot_parser.mli", 40, 504, 504), ("compiler/lib/annot_parser.mli", 40, 504, 573), 0), 0, Tag1 ("Js_of_ocaml_compiler__Annot_parser", 30)), 0)], "Js_of_ocaml_compiler__Annot_parser", [("Js_of_ocaml_compiler__Annot_parser", ("\193\243\223\206\219Ub\255v\144\2219\022!V\191")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__StringLabels", ("\134F\024\226\216Is#\223\230\234\169Z\206Gc")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Random", ("\020\005Xq\171\026\218\152X\135\254\023\133zK\200")); ("Stdlib__Printf", ("\215<\139]\021\142\224E\245m\198qc(W\229")); ("Stdlib__Printexc", ("\217u\168\235\179oi\167\235\255\025\017%d\192s")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__ListLabels", ("*\194\012\191\020%\170\249m\002\180\178hk\205\220")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Fun", ("\234t\181\000iQ\251,\b\020$\224\233\160\142\210")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Filename", ("z\163\210n\195\247\255\129\029SI\180\152\141h ")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Char", ("\1794\1468\190\138\150g\231\240\140d\191.\212e")); ("Stdlib__BytesLabels", ("\145\128\000\239\186Z.\0310^\247\201\174\\\137R")); ("Stdlib__Bytes", ("C\134\194)\175\222\137p\205\246\244\r\241\164P\209")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__ArrayLabels", ("\029\143d\025\218v\003\007\212jC\235/\205\006\198")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Js_of_ocaml_compiler__Stdlib", ("\162;P\232\137\003\012\252\217E\227\201\001\204\163j")); ("Js_of_ocaml_compiler__Primitive", ("\131\186\144\175\240\170t#\016p\219\012\\\020\211b")); ("Js_of_ocaml_compiler", ("\140\150\022\231\129$!^\139\156\170\236r\184~q")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
Lexing.lexbuf -> Js_of_ocaml_compiler.Primitive.t

type label = Cmm.label
type instruction = {
  mutable desc : instruction_desc;
  mutable next : instruction;
  arg : Reg.t array;
  res : Reg.t array;
  dbg : Debuginfo.t;
  live : Reg.Set.t;
}
and instruction_desc =
    Lprologue
  | Lend
  | Lop of Mach.operation
  | Lreloadretaddr
  | Lreturn
  | Llabel of label
  | Lbranch of label
  | Lcondbranch of Mach.test * label
  | Lcondbranch3 of label option * label option * label option
  | Lswitch of label array
  | Lentertrap
  | Ladjust_trap_depth of { delta_traps : int; }
  | Lpushtrap of { lbl_handler : label; }
  | Lpoptrap
  | Lraise of Lambda.raise_kind
val has_fallthrough : instruction_desc -> bool
val end_instr : instruction
val instr_cons :
  instruction_desc ->
  Reg.t array -> Reg.t array -> instruction -> instruction
val invert_test : Mach.test -> Mach.test
type fundecl = {
  fun_name : string;
  fun_args : Reg.Set.t;
  fun_body : instruction;
  fun_fast : bool;
  fun_dbg : Debuginfo.t;
  fun_tailrec_entry_point_label : label;
  fun_contains_calls : bool;
  fun_num_stack_slots : int array;
  fun_frame_required : bool;
  fun_prologue_required : bool;("DEBUG:rule", [Tag1 (("label", 525), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Cmm")), "label"), 0, (0)), 100000000, 0, -55)), 0, 0, 0, 0, (("asmcomp/linear.mli", 18, 1150, 1150), ("asmcomp/linear.mli", 18, 1150, 1172), 0), 0, 1, 0, Tag1 ("Linear", 0)), 1, 0); Tag1 (("instruction", 526), (0, 0, [[(("desc", 308), 1, (Tag3 ((("instruction_desc", 527)), 0, (0)), 100000000, 0, -47), (("asmcomp/linear.mli", 21, 1193, 1197), ("asmcomp/linear.mli", 21, 1193, 1228), 0), 0, Tag1 ("Linear", 8)); (("next", 309), 1, (Tag3 ((("instruction", 526)), 0, (0)), 100000000, 0, -48), (("asmcomp/linear.mli", 22, 1229, 1233), ("asmcomp/linear.mli", 22, 1229, 1259), 0), 0, Tag1 ("Linear", 9)); (("arg", 337), 0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Reg")), "t"), 0, (0)), 100000000, 0, -50)], (0)), 100000000, 0, -49), (("asmcomp/linear.mli", 23, 1260, 1264), ("asmcomp/linear.mli", 23, 1260, 1281), 0), 0, Tag1 ("Linear", 10)); (("res", 338), 0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Reg")), "t"), 0, (0)), 100000000, 0, -52)], (0)), 100000000, 0, -51), (("asmcomp/linear.mli", 24, 1282, 1286), ("asmcomp/linear.mli", 24, 1282, 1303), 0), 0, Tag1 ("Linear", 11)); (("dbg", 353), 0, (Tag3 (Tag1 ((Tag2 ("Debuginfo")), "t"), 0, (0)), 100000000, 0, -53), (("asmcomp/linear.mli", 25, 1304, 1308), ("asmcomp/linear.mli", 25, 1304, 1325), 0), 0, Tag1 ("Linear", 12)); (("live", 399), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Reg")), "Set"), "t"), 0, (0)), 100000000, 0, -54), (("asmcomp/linear.mli", 26, 1326, 1330), ("asmcomp/linear.mli", 26, 1326, 1345), 0), 0, Tag1 ("Linear", 13))]], 1, 0, 0, 0, 0, 0, (("asmcomp/linear.mli", 20, 1174, 1174), ("asmcomp/linear.mli", 26, 1326, 1347), 0), 0, 0, 0, Tag1 ("Linear", 6)), 1, 0); Tag1 (("instruction_desc", 527), (0, 0, Tag1 ([(("Lprologue", 400), (0), 0, (("asmcomp/linear.mli", 29, 1372, 1374), ("asmcomp/linear.mli", 29, 1372, 1385), 0), 0, Tag1 ("Linear", 14)); (("Lend", 401), (0), 0, (("asmcomp/linear.mli", 30, 1386, 1388), ("asmcomp/linear.mli", 30, 1386, 1394), 0), 0, Tag1 ("Linear", 15)); (("Lop", 402), ([(Tag3 (Tag1 ((Tag2 ("Mach")), "operation"), 0, (0)), 100000000, 0, -31)]), 0, (("asmcomp/linear.mli", 31, 1395, 1397), ("asmcomp/linear.mli", 31, 1395, 1420), 0), 0, Tag1 ("Linear", 22)); (("Lreloadretaddr", 418), (0), 0, (("asmcomp/linear.mli", 32, 1421, 1423), ("asmcomp/linear.mli", 32, 1421, 1439), 0), 0, Tag1 ("Linear", 23)); (("Lreturn", 419), (0), 0, (("asmcomp/linear.mli", 33, 1440, 1442), ("asmcomp/linear.mli", 33, 1440, 1451), 0), 0, Tag1 ("Linear", 24)); (("Llabel", 420), ([(Tag3 ((("label", 525)), 0, (0)), 100000000, 0, -32)]), 0, (("asmcomp/linear.mli", 34, 1452, 1454), ("asmcomp/linear.mli", 34, 1452, 1471), 0), 0, Tag1 ("Linear", 25)); (("Lbranch", 421), ([(Tag3 ((("label", 525)), 0, (0)), 100000000, 0, -33)]), 0, (("asmcomp/linear.mli", 35, 1472, 1474), ("asmcomp/linear.mli", 35, 1472, 1492), 0), 0, Tag1 ("Linear", 26)); (("Lcondbranch", 422), ([(Tag3 (Tag1 ((Tag2 ("Mach")), "test"), 0, (0)), 100000000, 0, -34); (Tag3 ((("label", 525)), 0, (0)), 100000000, 0, -35)]), 0, (("asmcomp/linear.mli", 36, 1493, 1495), ("asmcomp/linear.mli", 36, 1493, 1529), 0), 0, Tag1 ("Linear", 27)); (("Lcondbranch3", 423), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("label", 525)), 0, (0)), 100000000, 0, -37)], (0)), 100000000, 0, -36); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("label", 525)), 0, (0)), 100000000, 0, -39)], (0)), 100000000, 0, -38); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("label", 525)), 0, (0)), 100000000, 0, -41)], (0)), 100000000, 0, -40)]), 0, (("asmcomp/linear.mli", 37, 1530, 1532), ("asmcomp/linear.mli", 37, 1530, 1592), 0), 0, Tag1 ("Linear", 28)); (("Lswitch", 424), ([(Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("label", 525)), 0, (0)), 100000000, 0, -43)], (0)), 100000000, 0, -42)]), 0, (("asmcomp/linear.mli", 38, 1593, 1595), ("asmcomp/linear.mli", 38, 1593, 1619), 0), 0, Tag1 ("Linear", 29)); (("Lentertrap", 425), (0), 0, (("asmcomp/linear.mli", 39, 1620, 1622), ("asmcomp/linear.mli", 39, 1620, 1634), 0), 0, Tag1 ("Linear", 30)); (("Ladjust_trap_depth", 426), Tag1 ([(("delta_traps", 427), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -44), (("asmcomp/linear.mli", 40, 1635, 1663), ("asmcomp/linear.mli", 40, 1635, 1681), 0), 0, Tag1 ("Linear", 31))]), 0, (("asmcomp/linear.mli", 40, 1635, 1637), ("asmcomp/linear.mli", 40, 1635, 1683), 0), 0, Tag1 ("Linear", 32)); (("Lpushtrap", 428), Tag1 ([(("lbl_handler", 429), 0, (Tag3 ((("label", 525)), 0, (0)), 100000000, 0, -45), (("asmcomp/linear.mli", 41, 1684, 1703), ("asmcomp/linear.mli", 41, 1684, 1723), 0), 0, Tag1 ("Linear", 33))]), 0, (("asmcomp/linear.mli", 41, 1684, 1686), ("asmcomp/linear.mli", 41, 1684, 1725), 0), 0, Tag1 ("Linear", 34)); (("Lpoptrap", 430), (0), 0, (("asmcomp/linear.mli", 42, 1726, 1728), ("asmcomp/linear.mli", 42, 1726, 1738), 0), 0, Tag1 ("Linear", 35)); (("Lraise", 431), ([(Tag3 (Tag1 ((Tag2 ("Lambda")), "raise_kind"), 0, (0)), 100000000, 0, -46)]), 0, (("asmcomp/linear.mli", 43, 1739, 1741), ("asmcomp/linear.mli", 43, 1739, 1770), 0), 0, Tag1 ("Linear", 39))], 0), 1, 0, 0, 0, 0, 0, (("asmcomp/linear.mli", 28, 1349, 1349), ("asmcomp/linear.mli", 43, 1739, 1770), 0), 0, 0, 0, Tag1 ("Linear", 7)), 2, 0); (("has_fallthrough", 528), ((Tag1 (0, (Tag3 ((("instruction_desc", 527)), 0, (0)), 100000000, 0, -30), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -29), 0), 100000000, 0, -28), 0, (("asmcomp/linear.mli", 45, 1772, 1772), ("asmcomp/linear.mli", 45, 1772, 1819), 0), 0, Tag1 ("Linear", 50)), 0); (("end_instr", 529), ((Tag3 ((("instruction", 526)), 0, (0)), 100000000, 0, -27), 0, (("asmcomp/linear.mli", 46, 1820, 1820), ("asmcomp/linear.mli", 46, 1820, 1846), 0), 0, Tag1 ("Linear", 51)), 0); (("instr_cons", 530), ((Tag1 (0, (Tag3 ((("instruction_desc", 527)), 0, (0)), 100000000, 0, -26), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Reg")), "t"), 0, (0)), 100000000, 0, -25)], (0)), 100000000, 0, -24), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Reg")), "t"), 0, (0)), 100000000, 0, -23)], (0)), 100000000, 0, -22), (Tag1 (0, (Tag3 ((("instruction", 526)), 0, (0)), 100000000, 0, -21), (Tag3 ((("instruction", 526)), 0, (0)), 100000000, 0, -20), 0), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("asmcomp/linear.mli", 47, 1847, 1847), ("asmcomp/linear.mli", 48, 1863, 1941), 0), 0, Tag1 ("Linear", 52)), 0); (("invert_test", 531), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Mach")), "test"), 0, (0)), 100000000, 0, -15), (Tag3 (Tag1 ((Tag2 ("Mach")), "test"), 0, (0)), 100000000, 0, -14), 0), 100000000, 0, -13), 0, (("asmcomp/linear.mli", 49, 1942, 1942), ("asmcomp/linear.mli", 49, 1942, 1981), 0), 0, Tag1 ("Linear", 53)), 0); Tag1 (("fundecl", 532), (0, 0, [[(("fun_name", 515), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2), (("asmcomp/linear.mli", 52, 1998, 2002), ("asmcomp/linear.mli", 52, 1998, 2019), 0), 0, Tag1 ("Linear", 55)); (("fun_args", 516), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Reg")), "Set"), "t"), 0, (0)), 100000000, 0, -3), (("asmcomp/linear.mli", 53, 2020, 2024), ("asmcomp/linear.mli", 53, 2020, 2044), 0), 0, Tag1 ("Linear", 56)); (("fun_body", 517), 0, (Tag3 ((("instruction", 526)), 0, (0)), 100000000, 0, -4), (("asmcomp/linear.mli", 54, 2045, 2049), ("asmcomp/linear.mli", 54, 2045, 2071), 0), 0, Tag1 ("Linear", 57)); (("fun_fast", 518), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -5), (("asmcomp/linear.mli", 55, 2072, 2076), ("asmcomp/linear.mli", 55, 2072, 2091), 0), 0, Tag1 ("Linear", 58)); (("fun_dbg", 519), 0, (Tag3 (Tag1 ((Tag2 ("Debuginfo")), "t"), 0, (0)), 100000000, 0, -6), (("asmcomp/linear.mli", 56, 2092, 2096), ("asmcomp/linear.mli", 56, 2092, 2118), 0), 0, Tag1 ("Linear", 59)); (("fun_tailrec_entry_point_label", 520), 0, (Tag3 ((("label", 525)), 0, (0)), 100000000, 0, -7), (("asmcomp/linear.mli", 57, 2119, 2123), ("asmcomp/linear.mli", 57, 2119, 2161), 0), 0, Tag1 ("Linear", 60)); (("fun_contains_calls", 521), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -8), (("asmcomp/linear.mli", 58, 2162, 2166), ("asmcomp/linear.mli", 58, 2162, 2191), 0), 0, Tag1 ("Linear", 61)); (("fun_num_stack_slots", 522), 0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -10)], (0)), 100000000, 0, -9), (("asmcomp/linear.mli", 59, 2192, 2196), ("asmcomp/linear.mli", 59, 2192, 2227), 0), 0, Tag1 ("Linear", 62)); (("fun_frame_required", 523), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -11), (("asmcomp/linear.mli", 60, 2228, 2232), ("asmcomp/linear.mli", 60, 2228, 2257), 0), 0, Tag1 ("Linear", 63)); (("fun_prologue_required", 524), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -12), (("asmcomp/linear.mli", 61, 2258, 2262), ("asmcomp/linear.mli", 61, 2258, 2290), 0), 0, Tag1 ("Linear", 64))]], 1, 0, 0, 0, 0, 0, (("asmcomp/linear.mli", 51, 1983, 1983), ("asmcomp/linear.mli", 62, 2291, 2294), 0), 0, 0, 0, Tag1 ("Linear", 54)), 1, 0)], "Linear", [("Linear", ("%\195\240\191\217*`\216F1\029\212\248\171\223H")); ("X86_ast", ("_J}e\221\174\027(J\165T\180=\151\227n")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Types", ("\177\238\029.\220\006\163!\230\015\006\182\133\155\194\166")); ("Type_immediacy", ("\"\127k\011Q\241\211\138\193;8\142\129\141#\251")); ("Targetint", ("\246d\193-\187\015a_\181+\n \019\246;\150")); ("Subst", ("\021\031\148\223\127\186\189\135\027}\145r\216\143\177\156")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Arg", ("\024%=\206\198p\149Y\007\004\216,&\254#\207")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shape", ("\235\127Y\213\025\137=\244\218\181\248N\189\188\216p")); ("Reg", ("*\173\202\2069\136\224\129\178\171\139w\215DX\154")); ("Primitive", ("}Shh\162\015|\220A\203\249\232\245G\213\019")); ("Path", ("\012\183\178\025\1298\228*\021r\185\160Y\252\n\026")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Outcometree", ("9\021%\234\211\206\210\004H\165\208\2014\234Q\142")); ("Misc", ("*\026\026\234c\191\131\161\\\203\183\012O\252\153\198")); ("Mach", ("&\170\178\177#\189\191s\128\250H\146\198\206\134\167")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Load_path", ("\012@\228l\230\164S\172h\1726X\020\252o}")); ("Lambda", ("\180\1419\236'\146K$\128\006\135q\135V\029\180")); ("Identifiable", ("\004F\207\014\158GU\001\184\214\187%/#;\211")); ("Ident", ("\b9;!\187.\220\163(x\b\174\\\223\020\004")); ("Env", ("\021\n\181\142x\b\169j\227\"\017\248*\178\245\223")); ("Debuginfo", ("\131\251\175\217P\194M\163\022\151\002\005\006\185:\185")); ("Cmm", ("\245\177\229\137\140&\252'xF\207\167\160\025\167\223")); ("Cmi_format", ("6\177\bU\139\"\023\152=\249\135\174\b\011Cg")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Build_path_prefix_map", ("y\028\167\207D\220\198\216\011\208\172\149\2416\bc")); ("Backend_var", ("\182\144C\215j:\241\151\214\131?\204\253\002\029\151")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216")); ("Arch", ("9\221>\185\204\181\224\2279\164\221\212\213\028qT"))], [(0)])

}

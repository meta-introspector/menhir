module type S = sig type t val t_sexp_grammar : t Sexplib0.Sexp_grammar.t end
module type Sexp_grammar =
  sig
    module type S = S
    type grammar =
      Sexplib0__Sexp_grammar.grammar =
        Any of string
      | Bool
      | Char
      | Integer
      | Float
      | String
      | Option of grammar
      | List of list_grammar
      | Variant of variant
      | Union of grammar list
      | Tagged of grammar with_tag
      | Tyvar of string
      | Tycon of string * grammar list * defn list
      | Recursive of string * grammar list
      | Lazy of grammar lazy_t
    and list_grammar =
      Sexplib0__Sexp_grammar.list_grammar =
        Empty
      | Cons of grammar * list_grammar
      | Many of grammar
      | Fields of record
    and case_sensitivity =
      Sexplib0__Sexp_grammar.case_sensitivity =
        Case_insensitive
      | Case_sensitive
      | Case_sensitive_except_first_character
    and variant =
      Sexplib0__Sexp_grammar.variant = {
      case_sensitivity : case_sensitivity;
      clauses : clause with_tag_list list;
    }
    and clause =
      Sexplib0__Sexp_grammar.clause = {
      name : string;
      clause_kind : clause_kind;
    }
    and clause_kind =
      Sexplib0__Sexp_grammar.clause_kind =
        Atom_clause
      | List_clause of { args : list_grammar; }
    and record =
      Sexplib0__Sexp_grammar.record = {
      allow_extra_fields : bool;
      fields : field with_tag_list list;
    }
    and field =
      Sexplib0__Sexp_grammar.field = {
      name : string;
      required : bool;
      args : list_grammar;
    }
    and 'a with_tag =
      'a Sexplib0__Sexp_grammar.with_tag = {
      key : string;
      value : Sexplib0__.Sexp.t;
      grammar : 'a;
    }
    and 'a with_tag_list =
      'a Sexplib0__Sexp_grammar.with_tag_list =
        Tag of 'a with_tag_list with_tag
      | No_tag of 'a
    and defn =
      Sexplib0__Sexp_grammar.defn = {
      tycon : string;
      tyvars : string list;
      grammar : grammar;
    }
    type 'a t = 'a Sexplib0__Sexp_grammar.t = { untyped : grammar; } [@@unboxed]
    val coerce : 'a t -> 'b t
    val tag : 'a t -> key:string -> value:Sexplib0__.Sexp.t -> 'a t
    val doc_comment_tag : string
    val type_name_tag : string
    val assoc_tag : string
    val assoc_key_tag : string
    val assoc_value_tag : string
    val completion_suggested : string
    val remember_to_update_these_together :
      t_of_sexp:(Sexplib.Sexp.t -> 'a) ->
      t_sexp_grammar:'a t -> (Sexplib.Sexp.t -> 'a) * 'a t("DEBUG:rule", [Tag4 (("S", 482), ((Tag1 ([Tag1 (("t", 484), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/sexp_grammar_intf.ml", 2, 20, 22), ("src/sexp_grammar_intf.ml", 2, 20, 28), 0), 0, 0, 0, Tag1 ("Sexplib__Sexp_grammar_intf", 0)), 1, 0); (("t_sexp_grammar", 485), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("t", 484)), 0, (0)), 100000000, 0, -3)], (0)), 100000000, 0, -2), 0, (("src/sexp_grammar_intf.ml", 4, 30, 32), ("src/sexp_grammar_intf.ml", 4, 30, 78), 0), 0, Tag1 ("Sexplib__Sexp_grammar_intf", 2)), 0)])), 0, (("src/sexp_grammar_intf.ml", 1, 0, 0), ("src/sexp_grammar_intf.ml", 5, 79, 82), 0), Tag1 ("Sexplib__Sexp_grammar_intf", 3)), 0); Tag4 (("Sexp_grammar", 483), ((Tag1 ([Tag4 (("S", 486), ((((("S", 482)))), 0, (("src/sexp_grammar_intf.ml", 8, 115, 117), ("src/sexp_grammar_intf.ml", 8, 115, 134), 0), Tag1 ("Sexplib__Sexp_grammar_intf", 4)), 0); Tag1 (("grammar", 487), (0, 0, Tag1 ([(("Any", 287), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -75)]), 0, (("src/sexp_grammar.ml", 21, 889, 891), ("src/sexp_grammar.ml", 21, 889, 906), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 11)); (("Bool", 288), (0), 0, (("src/sexp_grammar.ml", 22, 976, 978), ("src/sexp_grammar.ml", 22, 976, 984), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 12)); (("Char", 289), (0), 0, (("src/sexp_grammar.ml", 23, 1051, 1053), ("src/sexp_grammar.ml", 23, 1051, 1059), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 13)); (("Integer", 290), (0), 0, (("src/sexp_grammar.ml", 24, 1101, 1103), ("src/sexp_grammar.ml", 24, 1101, 1112), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 14)); (("Float", 291), (0), 0, (("src/sexp_grammar.ml", 25, 1192, 1194), ("src/sexp_grammar.ml", 25, 1192, 1201), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 15)); (("String", 292), (0), 0, (("src/sexp_grammar.ml", 26, 1254, 1256), ("src/sexp_grammar.ml", 26, 1254, 1264), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 16)); (("Option", 293), ([(Tag3 ((("grammar", 487)), 0, (0)), 100000000, 0, -76)]), 0, (("src/sexp_grammar.ml", 27, 1289, 1291), ("src/sexp_grammar.ml", 27, 1289, 1310), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 17)); (("List", 294), ([(Tag3 ((("list_grammar", 488)), 0, (0)), 100000000, 0, -77)]), 0, (("src/sexp_grammar.ml", 28, 1380, 1382), ("src/sexp_grammar.ml", 28, 1380, 1404), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 18)); (("Variant", 295), ([(Tag3 ((("variant", 490)), 0, (0)), 100000000, 0, -78)]), 0, (("src/sexp_grammar.ml", 29, 1427, 1429), ("src/sexp_grammar.ml", 29, 1427, 1449), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 19)); (("Union", 296), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("grammar", 487)), 0, (0)), 100000000, 0, -80)], (0)), 100000000, 0, -79)]), 0, (("src/sexp_grammar.ml", 30, 1505, 1507), ("src/sexp_grammar.ml", 30, 1505, 1530), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 20)); (("Tagged", 297), ([(Tag3 ((("with_tag", 495)), [(Tag3 ((("grammar", 487)), 0, (0)), 100000000, 0, -82)], (0)), 100000000, 0, -81)]), 0, (("src/sexp_grammar.ml", 31, 1594, 1596), ("src/sexp_grammar.ml", 31, 1594, 1624), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 21)); (("Tyvar", 298), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -83)]), 0, (("src/sexp_grammar.ml", 33, 1692, 1694), ("src/sexp_grammar.ml", 33, 1692, 1711), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 22)); (("Tycon", 299), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -84); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("grammar", 487)), 0, (0)), 100000000, 0, -86)], (0)), 100000000, 0, -85); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("defn", 497)), 0, (0)), 100000000, 0, -88)], (0)), 100000000, 0, -87)]), 0, (("src/sexp_grammar.ml", 36, 1882, 1884), ("src/sexp_grammar.ml", 36, 1882, 1928), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 23)); (("Recursive", 300), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -89); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("grammar", 487)), 0, (0)), 100000000, 0, -91)], (0)), 100000000, 0, -90)]), 0, (("src/sexp_grammar.ml", 94, 3895, 3897), ("src/sexp_grammar.ml", 94, 3895, 3933), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 24)); (("Lazy", 301), ([(Tag3 ((Tag3 ("lazy_t", 14)), [(Tag3 ((("grammar", 487)), 0, (0)), 100000000, 0, -93)], (0)), 100000000, 0, -92)]), 0, (("src/sexp_grammar.ml", 98, 4172, 4174), ("src/sexp_grammar.ml", 98, 4172, 4198), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 25))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Sexplib0__Sexp_grammar")), "grammar"), 0, (0)), 100000000, 0, -74)), 0, 0, 0, 0, (("src/sexp_grammar.ml", 20, 874, 874), ("src/sexp_grammar.ml", 98, 4172, 4198), 0), 0, 0, 0, Tag1 ("Sexplib0__Sexp_grammar", 0)), 1, 0); Tag1 (("list_grammar", 488), (0, 0, Tag1 ([(("Empty", 302), (0), 0, (("src/sexp_grammar.ml", 104, 4393, 4395), ("src/sexp_grammar.ml", 104, 4393, 4402), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 26)); (("Cons", 303), ([(Tag3 ((("grammar", 487)), 0, (0)), 100000000, 0, -70); (Tag3 ((("list_grammar", 488)), 0, (0)), 100000000, 0, -71)]), 0, (("src/sexp_grammar.ml", 105, 4441, 4443), ("src/sexp_grammar.ml", 105, 4441, 4475), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 27)); (("Many", 304), ([(Tag3 ((("grammar", 487)), 0, (0)), 100000000, 0, -72)]), 0, (("src/sexp_grammar.ml", 107, 4557, 4559), ("src/sexp_grammar.ml", 107, 4557, 4576), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 28)); (("Fields", 305), ([(Tag3 ((("record", 493)), 0, (0)), 100000000, 0, -73)]), 0, (("src/sexp_grammar.ml", 108, 4644, 4646), ("src/sexp_grammar.ml", 108, 4644, 4664), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 29))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Sexplib0__Sexp_grammar")), "list_grammar"), 0, (0)), 100000000, 0, -69)), 0, 0, 0, 0, (("src/sexp_grammar.ml", 103, 4374, 4374), ("src/sexp_grammar.ml", 108, 4644, 4664), 0), 0, 0, 0, Tag1 ("Sexplib0__Sexp_grammar", 1)), 2, 0); Tag1 (("case_sensitivity", 489), (0, 0, Tag1 ([(("Case_insensitive", 306), (0), 0, (("src/sexp_grammar.ml", 112, 4809, 4811), ("src/sexp_grammar.ml", 112, 4809, 4829), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 30)); (("Case_sensitive", 307), (0), 0, (("src/sexp_grammar.ml", 113, 4894, 4896), ("src/sexp_grammar.ml", 113, 4894, 4912), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 31)); (("Case_sensitive_except_first_character", 308), (0), 0, (("src/sexp_grammar.ml", 114, 4981, 4983), ("src/sexp_grammar.ml", 114, 4981, 5022), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 32))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Sexplib0__Sexp_grammar")), "case_sensitivity"), 0, (0)), 100000000, 0, -68)), 0, 0, 0, 0, (("src/sexp_grammar.ml", 111, 4786, 4786), ("src/sexp_grammar.ml", 114, 4981, 5022), 0), 0, 1, 0, Tag1 ("Sexplib0__Sexp_grammar", 2)), 2, 0); Tag1 (("variant", 490), (0, 0, [[(("case_sensitivity", 309), 0, (Tag3 ((("case_sensitivity", 489)), 0, (0)), 100000000, 0, -64), (("src/sexp_grammar.ml", 120, 5239, 5243), ("src/sexp_grammar.ml", 121, 5279, 5282), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 33)); (("clauses", 310), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("with_tag_list", 496)), [(Tag3 ((("clause", 491)), 0, (0)), 100000000, 0, -67)], (0)), 100000000, 0, -66)], (0)), 100000000, 0, -65), (("src/sexp_grammar.ml", 121, 5279, 5283), ("src/sexp_grammar.ml", 121, 5279, 5318), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 34))]], 1, ((Tag3 (Tag1 ((Tag2 ("Sexplib0__Sexp_grammar")), "variant"), 0, (0)), 100000000, 0, -63)), 0, 0, 0, 0, (("src/sexp_grammar.ml", 119, 5225, 5225), ("src/sexp_grammar.ml", 122, 5319, 5322), 0), 0, 0, 0, Tag1 ("Sexplib0__Sexp_grammar", 3)), 2, 0); Tag1 (("clause", 491), (0, 0, [[(("name", 311), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -61), (("src/sexp_grammar.ml", 126, 5422, 5426), ("src/sexp_grammar.ml", 127, 5440, 5443), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 35)); (("clause_kind", 312), 0, (Tag3 ((("clause_kind", 492)), 0, (0)), 100000000, 0, -62), (("src/sexp_grammar.ml", 127, 5440, 5444), ("src/sexp_grammar.ml", 127, 5440, 5469), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 36))]], 1, ((Tag3 (Tag1 ((Tag2 ("Sexplib0__Sexp_grammar")), "clause"), 0, (0)), 100000000, 0, -60)), 0, 0, 0, 0, (("src/sexp_grammar.ml", 125, 5409, 5409), ("src/sexp_grammar.ml", 128, 5470, 5473), 0), 0, 0, 0, Tag1 ("Sexplib0__Sexp_grammar", 4)), 2, 0); Tag1 (("clause_kind", 492), (0, 0, Tag1 ([(("Atom_clause", 313), (0), 0, (("src/sexp_grammar.ml", 135, 5789, 5791), ("src/sexp_grammar.ml", 135, 5789, 5804), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 37)); (("List_clause", 314), Tag1 ([(("args", 315), 0, (Tag3 ((("list_grammar", 488)), 0, (0)), 100000000, 0, -59), (("src/sexp_grammar.ml", 136, 5805, 5826), ("src/sexp_grammar.ml", 136, 5805, 5845), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 38))]), 0, (("src/sexp_grammar.ml", 136, 5805, 5807), ("src/sexp_grammar.ml", 136, 5805, 5847), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 39))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Sexplib0__Sexp_grammar")), "clause_kind"), 0, (0)), 100000000, 0, -58)), 0, 0, 0, 0, (("src/sexp_grammar.ml", 134, 5771, 5771), ("src/sexp_grammar.ml", 136, 5805, 5847), 0), 0, 0, 0, Tag1 ("Sexplib0__Sexp_grammar", 5)), 2, 0); Tag1 (("record", 493), (0, 0, [[(("allow_extra_fields", 316), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -54), (("src/sexp_grammar.ml", 142, 6062, 6066), ("src/sexp_grammar.ml", 143, 6092, 6095), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 40)); (("fields", 317), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("with_tag_list", 496)), [(Tag3 ((("field", 494)), 0, (0)), 100000000, 0, -57)], (0)), 100000000, 0, -56)], (0)), 100000000, 0, -55), (("src/sexp_grammar.ml", 143, 6092, 6096), ("src/sexp_grammar.ml", 143, 6092, 6129), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 41))]], 1, ((Tag3 (Tag1 ((Tag2 ("Sexplib0__Sexp_grammar")), "record"), 0, (0)), 100000000, 0, -53)), 0, 0, 0, 0, (("src/sexp_grammar.ml", 141, 6049, 6049), ("src/sexp_grammar.ml", 144, 6130, 6133), 0), 0, 0, 0, Tag1 ("Sexplib0__Sexp_grammar", 6)), 2, 0); Tag1 (("field", 494), (0, 0, [[(("name", 318), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -50), (("src/sexp_grammar.ml", 150, 6356, 6360), ("src/sexp_grammar.ml", 151, 6374, 6377), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 42)); (("required", 319), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -51), (("src/sexp_grammar.ml", 151, 6374, 6378), ("src/sexp_grammar.ml", 152, 6394, 6397), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 43)); (("args", 320), 0, (Tag3 ((("list_grammar", 488)), 0, (0)), 100000000, 0, -52), (("src/sexp_grammar.ml", 152, 6394, 6398), ("src/sexp_grammar.ml", 152, 6394, 6417), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 44))]], 1, ((Tag3 (Tag1 ((Tag2 ("Sexplib0__Sexp_grammar")), "field"), 0, (0)), 100000000, 0, -49)), 0, 0, 0, 0, (("src/sexp_grammar.ml", 149, 6344, 6344), ("src/sexp_grammar.ml", 153, 6418, 6421), 0), 0, 0, 0, Tag1 ("Sexplib0__Sexp_grammar", 7)), 2, 0); Tag1 (("with_tag", 495), ([((("a")), 100000000, 0, -46)], 1, [[(("key", 321), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -47), (("src/sexp_grammar.ml", 157, 6500, 6504), ("src/sexp_grammar.ml", 158, 6517, 6520), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 45)); (("value", 341), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -48), (("src/sexp_grammar.ml", 158, 6517, 6521), ("src/sexp_grammar.ml", 159, 6536, 6539), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 46)); (("grammar", 342), 0, ((("a")), 100000000, 0, -46), (("src/sexp_grammar.ml", 159, 6536, 6540), ("src/sexp_grammar.ml", 159, 6536, 6552), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 47))]], 1, ((Tag3 (Tag1 ((Tag2 ("Sexplib0__Sexp_grammar")), "with_tag"), [((("a")), 100000000, 0, -46)], (0)), 100000000, 0, -45)), [25], [0], 0, 0, (("src/sexp_grammar.ml", 156, 6482, 6482), ("src/sexp_grammar.ml", 160, 6553, 6556), 0), 0, 0, 0, Tag1 ("Sexplib0__Sexp_grammar", 8)), 2, 0); Tag1 (("with_tag_list", 496), ([((("a")), 100000000, 0, -42)], 1, Tag1 ([(("Tag", 343), ([(Tag3 ((("with_tag", 495)), [(Tag3 ((("with_tag_list", 496)), [((("a")), 100000000, 0, -42)], (0)), 100000000, 0, -44)], (0)), 100000000, 0, -43)]), 0, (("src/sexp_grammar.ml", 163, 6581, 6583), ("src/sexp_grammar.ml", 163, 6581, 6617), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 48)); (("No_tag", 344), ([((("a")), 100000000, 0, -42)]), 0, (("src/sexp_grammar.ml", 164, 6618, 6620), ("src/sexp_grammar.ml", 164, 6618, 6634), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 49))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Sexplib0__Sexp_grammar")), "with_tag_list"), [((("a")), 100000000, 0, -42)], (0)), 100000000, 0, -41)), [25], [0], 0, 0, (("src/sexp_grammar.ml", 162, 6558, 6558), ("src/sexp_grammar.ml", 164, 6618, 6634), 0), 0, 0, 0, Tag1 ("Sexplib0__Sexp_grammar", 9)), 2, 0); Tag1 (("defn", 497), (0, 0, [[(("tycon", 345), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -37), (("src/sexp_grammar.ml", 171, 6939, 6943), ("src/sexp_grammar.ml", 172, 6958, 6961), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 50)); (("tyvars", 346), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -39)], (0)), 100000000, 0, -38), (("src/sexp_grammar.ml", 172, 6958, 6962), ("src/sexp_grammar.ml", 173, 6983, 6986), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 51)); (("grammar", 347), 0, (Tag3 ((("grammar", 487)), 0, (0)), 100000000, 0, -40), (("src/sexp_grammar.ml", 173, 6983, 6987), ("src/sexp_grammar.ml", 173, 6983, 7004), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 52))]], 1, ((Tag3 (Tag1 ((Tag2 ("Sexplib0__Sexp_grammar")), "defn"), 0, (0)), 100000000, 0, -36)), 0, 0, 0, 0, (("src/sexp_grammar.ml", 170, 6928, 6928), ("src/sexp_grammar.ml", 174, 7005, 7008), 0), 0, 0, 0, Tag1 ("Sexplib0__Sexp_grammar", 10)), 2, 0); Tag1 (("t", 498), ([((0), 100000000, 0, -34)], 1, ([(("untyped", 368), 0, (Tag3 ((("grammar", 487)), 0, (0)), 100000000, 0, -35), (("src/sexp_grammar.ml", 179, 7265, 7278), ("src/sexp_grammar.ml", 179, 7265, 7295), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 61))], (0)), 1, ((Tag3 (Tag1 ((Tag2 ("Sexplib0__Sexp_grammar")), "t"), [((0), 100000000, 0, -34)], (0)), 100000000, 0, -33)), [8], [0], 0, 0, (("src/sexp_grammar.ml", 179, 7265, 7265), ("src/sexp_grammar.ml", 179, 7265, 7309), 0), [(("unboxed", (("src/sexp_grammar.ml", 179, 7265, 7301), ("src/sexp_grammar.ml", 179, 7265, 7308), 0)), (0), (("src/sexp_grammar.ml", 179, 7265, 7298), ("src/sexp_grammar.ml", 179, 7265, 7309), 0))], 0, 0, Tag1 ("Sexplib0__Sexp_grammar", 60)), 1, 0); (("coerce", 499), ((Tag1 (0, (Tag3 ((("t", 498)), [((("a")), 100000000, 0, -32)], (0)), 100000000, 0, -31), (Tag3 ((("t", 498)), [((("b")), 100000000, 0, -30)], (0)), 100000000, 0, -29), 0), 100000000, 0, -28), 0, (("src/sexp_grammar.ml", 181, 7311, 7315), ("src/sexp_grammar.ml", 181, 7311, 7321), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 62)), 0); (("tag", 500), ((Tag1 (0, (Tag3 ((("t", 498)), [((("a")), 100000000, 0, -24)], (0)), 100000000, 0, -27), (Tag1 (("key"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -26), (Tag1 (("value"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -25), (Tag3 ((("t", 498)), [((("a")), 100000000, 0, -24)], (0)), 100000000, 0, -23), 0), 100000000, 0, -22), 0), 100000000, 0, -21), 0), 100000000, 0, -20), 0, (("src/sexp_grammar.ml", 183, 7373, 7377), ("src/sexp_grammar.ml", 183, 7373, 7380), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 66)), 0); (("doc_comment_tag", 501), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -19), 0, (("src/sexp_grammar.ml", 188, 7566, 7570), ("src/sexp_grammar.ml", 188, 7566, 7585), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 71)), 0); (("type_name_tag", 502), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -18), 0, (("src/sexp_grammar.ml", 191, 7694, 7698), ("src/sexp_grammar.ml", 191, 7694, 7711), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 72)), 0); (("assoc_tag", 503), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -17), 0, (("src/sexp_grammar.ml", 195, 7855, 7859), ("src/sexp_grammar.ml", 195, 7855, 7868), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 73)), 0); (("assoc_key_tag", 504), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -16), 0, (("src/sexp_grammar.ml", 199, 8009, 8013), ("src/sexp_grammar.ml", 199, 8009, 8026), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 74)), 0); (("assoc_value_tag", 505), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -15), 0, (("src/sexp_grammar.ml", 203, 8173, 8177), ("src/sexp_grammar.ml", 203, 8173, 8192), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 75)), 0); (("completion_suggested", 506), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -14), 0, (("src/sexp_grammar.ml", 207, 8376, 8380), ("src/sexp_grammar.ml", 207, 8376, 8400), 0), 0, Tag1 ("Sexplib0__Sexp_grammar", 76)), 0); (("remember_to_update_these_together", 507), ((Tag1 (("t_of_sexp"), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -13), ((("a")), 100000000, 0, -8), 0), 100000000, 0, -12), (Tag1 (("t_sexp_grammar"), (Tag3 ((("t", 498)), [((("a")), 100000000, 0, -8)], (0)), 100000000, 0, -11), (Tag2 ([(Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -9), ((("a")), 100000000, 0, -8), 0), 100000000, 0, -7); (Tag3 ((("t", 498)), [((("a")), 100000000, 0, -8)], (0)), 100000000, 0, -10)]), 100000000, 0, -6), 0), 100000000, 0, -5), 0), 100000000, 0, -4), 0, (("src/sexp_grammar_intf.ml", 20, 376, 378), ("src/sexp_grammar_intf.ml", 23, 475, 503), 0), 0, Tag1 ("Sexplib__Sexp_grammar_intf", 8)), 0)])), 0, (("src/sexp_grammar_intf.ml", 7, 84, 84), ("src/sexp_grammar_intf.ml", 24, 504, 507), 0), Tag1 ("Sexplib__Sexp_grammar_intf", 9)), 0)], "Sexplib__Sexp_grammar_intf", [("Sexplib__Sexp_grammar_intf", ("Z>\194\230m&\179h\127/\152\198\018\203\231\r")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Random", ("\020\005Xq\171\026\218\152X\135\254\023\133zK\200")); ("Stdlib__Printf", ("\215<\139]\021\142\224E\245m\198qc(W\229")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Bytes", ("C\134\194)\175\222\137p\205\246\244\r\241\164P\209")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sexplib__Type_with_layout", ("Q\170\019\238\156\246\192\156\b`\250o[6g\024")); ("Sexplib__Type", ("\147\252\252\167_\149\137\235\001d\241\255`\173Cs")); ("Sexplib__Src_pos", ("\157\022\246\144K\127\174bk\214\128&E\nh\213")); ("Sexplib__Sexp_intf", ("\\\031Fc\157\000\226\253\208\151\241\218a\195\187w")); ("Sexplib__Sexp", ("b\191\237;\251D\001\027M=x\201\143\185:d")); ("Sexplib__Pre_sexp", ("))\b\146\225\144^\227\218\181;f\220\tA\006")); ("Sexplib__Parser_with_layout", ("W\155\134\171aBJ\251|G6\192'S\210<")); ("Sexplib__Parser", ("\203&3\188\178\148:\254\176\140\127\227\029jQL")); ("Sexplib__Lexer", ("M\181eW\204\2193X\225\170yM\228!\146s")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("Sexplib", ("\249\031\145\178\014\020\n\209\129\143\012\015<K\177\189")); ("Parsexp__Positions", ("BE\135\222xW\224\233\184\004o\169\248\bH\230")); ("Parsexp__Parsexp_intf", ("\006\239e\204\167\243e2&\192H\160\029XNm")); ("Parsexp__Parser_intf", ("\154\197J\002\004\252i\162\190\241\151\210\157\024\167e")); ("Parsexp__Parser", ("n\164F;=\199\178\019\150]\2502\176\014a\165")); ("Parsexp__Parse_error_intf", ("\011\229\182\179W\161\176\160P\249\165\214ef\011\229")); ("Parsexp__Parse_error", ("*\031\166\142M\171\026\030\\K7\157Y\232\208\234")); ("Parsexp__Old_parser_cont_state", ("\2535&90\136_\154\027}Oc0\138%X")); ("Parsexp__Of_sexp_error", ("\253\171Y\150\210\218\191\255\160\211\134d/l\132\228")); ("Parsexp__Import", ("\017\029\157\225\239\135p*0\207\146\197\020\128\195!")); ("Parsexp__Cst", (")\228;6o~\227\000pRf\153\216\244sD")); ("Parsexp__Conv_intf", ("\004r\193,k\2254\168\149\229+hmw\134\228")); ("Parsexp__Conv_error", ("\195Bo\140A|\220\136\210\137\165&!\164\134\021")); ("Parsexp__Conv", ("\238|^\141\226\177\185\022$*\023\188\020\002P\229")); ("Parsexp__Automaton_state_intf", ("\196\146]2\143u|+%\027\185v2\225\r\229")); ("Parsexp__Automaton_state", ("L#\030=\218R\022 \228<\188-\r\211\157_")); ("Parsexp__Automaton_stack_intf", ("\235\204\0296]\2449F\029\b:\006\217\162f\024")); ("Parsexp__Automaton_stack", ("\246/\135\251\031)\015r\003\237\254S$\181\243\201")); ("Parsexp__", ("\182\180\203\030\218\020\246\196\221\171_\030GE\171\192")); ("Parsexp", ("\023d\176\173 \b\181o\028\163R\205\005\226BE")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

  end

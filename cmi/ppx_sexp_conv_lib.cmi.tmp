module Conv = Sexplib0.Sexp_conv
module Conv_error = Sexplib0.Sexp_conv_error
module Sexp_grammar = Sexplib0.Sexp_grammar
module Sexp :
  sig
    type t = Sexplib0__Sexp.t = Atom of string | List of t list
    val t_of_sexp : t -> t
    val sexp_of_t : t -> t
    val equal : t -> t -> bool
    val compare : t -> t -> int
    exception Not_found_s of t
    exception Of_sexp_error of exn * t
    val message : string -> (string * t) list -> t
    val default_indent : int ref
    val pp_hum : Format.formatter -> t -> unit
    val pp_hum_indent : int -> Format.formatter -> t -> unit
    val pp_mach : Format.formatter -> t -> unit
    val pp : Format.formatter -> t -> unit
    val to_string_hum : ?indent:int -> t -> string
    val to_string_mach : t -> string
    val to_string : t -> string
    val of_float_style : [ `No_underscores | `Underscores ] ref
    val of_int_style : [ `No_underscores | `Underscores ] ref
    module Private = Sexplib0__Sexp.Private
    val t_sexp_grammar : Sexplib0__.Sexp.t Sexplib0__.Sexp_grammar.t
  end("DEBUG:rule", [Tag3 (("Conv", 459), 1, (Tag3 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_conv")), 0, (("runtime-lib/ppx_sexp_conv_lib.ml", 1, 0, 0), ("runtime-lib/ppx_sexp_conv_lib.ml", 1, 0, 32), 0), Tag1 ("Ppx_sexp_conv_lib", 0)), 0, 0); Tag3 (("Conv_error", 460), 1, (Tag3 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_conv_error")), 0, (("runtime-lib/ppx_sexp_conv_lib.ml", 2, 33, 33), ("runtime-lib/ppx_sexp_conv_lib.ml", 2, 33, 77), 0), Tag1 ("Ppx_sexp_conv_lib", 1)), 0, 0); Tag3 (("Sexp_grammar", 461), 1, (Tag3 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar")), 0, (("runtime-lib/ppx_sexp_conv_lib.ml", 3, 78, 78), ("runtime-lib/ppx_sexp_conv_lib.ml", 3, 78, 121), 0), Tag1 ("Ppx_sexp_conv_lib", 2)), 0, 0); Tag3 (("Sexp", 462), 0, (Tag1 ([Tag1 (("t", 464), (0, 0, Tag1 ([(("Atom", 277), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -74)]), 0, (("src/sexp.mli", 4, 39, 41), ("src/sexp.mli", 4, 39, 57), 0), 0, Tag1 ("Sexplib0__Sexp", 1)); (("List", 278), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 464)), 0, (0)), 100000000, 0, -76)], (0)), 100000000, 0, -75)]), 0, (("src/sexp.mli", 5, 58, 60), ("src/sexp.mli", 5, 58, 76), 0), 0, Tag1 ("Sexplib0__Sexp", 2))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Sexplib0__Sexp")), "t"), 0, (0)), 100000000, 0, -73)), 0, 0, 0, 0, (("src/sexp.mli", 3, 30, 30), ("src/sexp.mli", 5, 58, 76), 0), 0, 0, 0, Tag1 ("Sexplib0__Sexp", 0)), 1, 0); (("t_of_sexp", 465), ((Tag1 (0, (Tag3 ((("t", 464)), 0, (0)), 100000000, 0, -72), (Tag3 ((("t", 464)), 0, (0)), 100000000, 0, -71), 0), 100000000, 0, -70), 0, (("src/sexp.mli", 9, 198, 198), ("src/sexp.mli", 9, 198, 220), 0), 0, Tag1 ("Sexplib0__Sexp", 3)), 0); (("sexp_of_t", 466), ((Tag1 (0, (Tag3 ((("t", 464)), 0, (0)), 100000000, 0, -69), (Tag3 ((("t", 464)), 0, (0)), 100000000, 0, -68), 0), 100000000, 0, -67), 0, (("src/sexp.mli", 10, 221, 221), ("src/sexp.mli", 10, 221, 243), 0), 0, Tag1 ("Sexplib0__Sexp", 4)), 0); (("equal", 467), ((Tag1 (0, (Tag3 ((("t", 464)), 0, (0)), 100000000, 0, -66), (Tag1 (0, (Tag3 ((("t", 464)), 0, (0)), 100000000, 0, -65), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -64), 0), 100000000, 0, -63), 0), 100000000, 0, -62), 0, (("src/sexp.mli", 11, 244, 244), ("src/sexp.mli", 11, 244, 270), 0), 0, Tag1 ("Sexplib0__Sexp", 5)), 0); (("compare", 468), ((Tag1 (0, (Tag3 ((("t", 464)), 0, (0)), 100000000, 0, -61), (Tag1 (0, (Tag3 ((("t", 464)), 0, (0)), 100000000, 0, -60), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -59), 0), 100000000, 0, -58), 0), 100000000, 0, -57), 0, (("src/sexp.mli", 12, 271, 271), ("src/sexp.mli", 12, 271, 298), 0), 0, Tag1 ("Sexplib0__Sexp", 6)), 0); Tag2 (("Not_found_s", 469), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((("t", 464)), 0, (0)), 100000000, 0, -56)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Sexplib0__Sexp", 7)), 2, 0); Tag2 (("Of_sexp_error", 470), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -54); (Tag3 ((("t", 464)), 0, (0)), 100000000, 0, -55)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Sexplib0__Sexp", 8)), 2, 0); (("message", 471), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -53), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -51); (Tag3 ((("t", 464)), 0, (0)), 100000000, 0, -52)]), 100000000, 0, -50)], (0)), 100000000, 0, -49), (Tag3 ((("t", 464)), 0, (0)), 100000000, 0, -48), 0), 100000000, 0, -47), 0), 100000000, 0, -46), 0, (("src/sexp.mli", 46, 1395, 1395), ("src/sexp.mli", 46, 1395, 1441), 0), 0, Tag1 ("Sexplib0__Sexp", 9)), 0); (("default_indent", 472), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -45)], (0)), 100000000, 0, -44), 0, (("src/sexp.mli", 54, 1593, 1593), ("src/sexp.mli", 54, 1593, 1621), 0), 0, Tag1 ("Sexplib0__Sexp", 10)), 0); (("pp_hum", 473), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -43), (Tag1 (0, (Tag3 ((("t", 464)), 0, (0)), 100000000, 0, -42), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -41), 0), 100000000, 0, -40), 0), 100000000, 0, -39), 0, (("src/sexp.mli", 60, 1768, 1768), ("src/sexp.mli", 60, 1768, 1810), 0), 0, Tag1 ("Sexplib0__Sexp", 11)), 0); (("pp_hum_indent", 474), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -38), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -37), (Tag1 (0, (Tag3 ((("t", 464)), 0, (0)), 100000000, 0, -36), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -35), 0), 100000000, 0, -34), 0), 100000000, 0, -33), 0), 100000000, 0, -32), 0, (("src/sexp.mli", 64, 1947, 1947), ("src/sexp.mli", 64, 1947, 2003), 0), 0, Tag1 ("Sexplib0__Sexp", 12)), 0); (("pp_mach", 475), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -31), (Tag1 (0, (Tag3 ((("t", 464)), 0, (0)), 100000000, 0, -30), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -29), 0), 100000000, 0, -28), 0), 100000000, 0, -27), 0, (("src/sexp.mli", 68, 2128, 2128), ("src/sexp.mli", 68, 2128, 2171), 0), 0, Tag1 ("Sexplib0__Sexp", 13)), 0); (("pp", 476), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -26), (Tag1 (0, (Tag3 ((("t", 464)), 0, (0)), 100000000, 0, -25), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -24), 0), 100000000, 0, -23), 0), 100000000, 0, -22), 0, (("src/sexp.mli", 71, 2199, 2199), ("src/sexp.mli", 71, 2199, 2237), 0), 0, Tag1 ("Sexplib0__Sexp", 14)), 0); (("to_string_hum", 477), ((Tag1 (Tag1 ("indent"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -21)], (0)), 100000000, 0, -20), (Tag1 (0, (Tag3 ((("t", 464)), 0, (0)), 100000000, 0, -19), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -18), 0), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("src/sexp.mli", 79, 2457, 2457), ("src/sexp.mli", 79, 2457, 2503), 0), 0, Tag1 ("Sexplib0__Sexp", 15)), 0); (("to_string_mach", 478), ((Tag1 (0, (Tag3 ((("t", 464)), 0, (0)), 100000000, 0, -15), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -14), 0), 100000000, 0, -13), 0, (("src/sexp.mli", 83, 2625, 2625), ("src/sexp.mli", 83, 2625, 2657), 0), 0, Tag1 ("Sexplib0__Sexp", 16)), 0); (("to_string", 479), ((Tag1 (0, (Tag3 ((("t", 464)), 0, (0)), 100000000, 0, -12), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -11), 0), 100000000, 0, -10), 0, (("src/sexp.mli", 86, 2692, 2692), ("src/sexp.mli", 86, 2692, 2719), 0), 0, Tag1 ("Sexplib0__Sexp", 17)), 0); (("of_float_style", 480), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag8 (([("No_underscores", (0)); ("Underscores", (0))], (0, 100000000, 0, -9), 1, 0, 0)), 100000000, 0, -8)], (0)), 100000000, 0, -7), 0, (("src/sexp.mli", 90, 2740, 2740), ("src/sexp.mli", 90, 2740, 2799), 0), 0, Tag1 ("Sexplib0__Sexp", 18)), 0); (("of_int_style", 481), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag8 (([("No_underscores", (0)); ("Underscores", (0))], (0, 100000000, 0, -6), 1, 0, 0)), 100000000, 0, -5)], (0)), 100000000, 0, -4), 0, (("src/sexp.mli", 91, 2800, 2800), ("src/sexp.mli", 91, 2800, 2857), 0), 0, Tag1 ("Sexplib0__Sexp", 19)), 0); Tag3 (("Private", 482), 0, (Tag3 (Tag1 ((Tag2 ("Sexplib0__Sexp")), "Private")), 0, (("src/sexp.mli", 96, 3009, 3009), ("src/sexp.mli", 115, 3539, 3542), 0), Tag1 ("Sexplib0__Sexp", 29)), 0, 0); (("t_sexp_grammar", 483), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -3)], (0)), 100000000, 0, -2), 0, (("runtime-lib/ppx_sexp_conv_lib.ml", 8, 169, 175), ("runtime-lib/ppx_sexp_conv_lib.ml", 8, 169, 189), 0), 0, Tag1 ("Ppx_sexp_conv_lib", 3)), 0)]), 0, (("runtime-lib/ppx_sexp_conv_lib.ml", 5, 123, 123), ("runtime-lib/ppx_sexp_conv_lib.ml", 9, 217, 220), 0), Tag1 ("Ppx_sexp_conv_lib", 5)), 0, 0); Tag3 (("Sexpable", 463), 1, (Tag3 (Tag1 ((Tag2 ("Sexplib0")), "Sexpable")), 0, (("runtime-lib/ppx_sexp_conv_lib.ml", 11, 222, 222), ("runtime-lib/ppx_sexp_conv_lib.ml", 11, 222, 257), 0), Tag1 ("Ppx_sexp_conv_lib", 6)), 0, 0)], "Ppx_sexp_conv_lib", [("Ppx_sexp_conv_lib", (" \141 \195\172\231\170\135\240\238\184\216\238\171U\248")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

module Sexpable = Sexplib0.Sexpable

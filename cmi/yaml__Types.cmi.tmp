type version = [ `V1_1 | `V1_2 ]
type encoding = [ `Any | `Utf16be | `Utf16le | `Utf8 ]
type scalar_style =
    [ `Any | `Double_quoted | `Folded | `Literal | `Plain | `Single_quoted ]
type layout_style = [ `Any | `Block | `Flow ]
type value =
    [ `A of value list
    | `Bool of bool
    | `Float of float
    | `Null
    | `O of (string * value) list
    | `String of string ]
type scalar = {
  anchor : string option;
  tag : string option;
  value : string;
  plain_implicit : bool;
  quoted_implicit : bool;
  style : scalar_style;
}
type yaml =
    [ `A of sequence | `Alias of string | `O of mapping | `Scalar of scalar ]
and sequence = {
  s_anchor : string option;
  s_tag : string option;
  s_implicit : bool;
  s_members : yaml list;
}
and mapping = {
  m_anchor : string option;
  m_tag : string option;
  m_implicit : bool;
  m_members : (yaml * yaml) list;
}("DEBUG:rule", [Tag1 (("version", 296), (0, 0, 0, 1, ((Tag8 (([("V1_1", (0)); ("V1_2", (0))], (0, 100000000, 0, -55), 1, 0, 0)), 100000000, 0, -54)), 0, 0, 0, 0, (("lib/types.ml", 15, 791, 791), ("lib/types.ml", 15, 791, 823), 0), 0, 1, 0, Tag1 ("Yaml__Types", 0)), 1, 0); Tag1 (("encoding", 297), (0, 0, 0, 1, ((Tag8 (([("Any", (0)); ("Utf16be", (0)); ("Utf16le", (0)); ("Utf8", (0))], (0, 100000000, 0, -53), 1, 0, 0)), 100000000, 0, -52)), 0, 0, 0, 0, (("lib/types.ml", 16, 824, 824), ("lib/types.ml", 16, 824, 878), 0), 0, 1, 0, Tag1 ("Yaml__Types", 1)), 1, 0); Tag1 (("scalar_style", 298), (0, 0, 0, 1, ((Tag8 (([("Any", (0)); ("Double_quoted", (0)); ("Folded", (0)); ("Literal", (0)); ("Plain", (0)); ("Single_quoted", (0))], (0, 100000000, 0, -51), 1, 0, 0)), 100000000, 0, -50)), 0, 0, 0, 0, (("lib/types.ml", 18, 880, 880), ("lib/types.ml", 19, 900, 974), 0), 0, 1, 0, Tag1 ("Yaml__Types", 2)), 1, 0); Tag1 (("layout_style", 299), (0, 0, 0, 1, ((Tag8 (([("Any", (0)); ("Block", (0)); ("Flow", (0))], (0, 100000000, 0, -49), 1, 0, 0)), 100000000, 0, -48)), 0, 0, 0, 0, (("lib/types.ml", 21, 976, 976), ("lib/types.ml", 21, 976, 1021), 0), 0, 1, 0, Tag1 ("Yaml__Types", 3)), 1, 0); Tag1 (("value", 300), (0, 0, 0, 1, ((Tag8 (([("A", (((Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("value", 300)), 0, (0)), 100000000, 0, -47)], (0)), 100000000, 0, -46)))); ("Bool", (((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -39)))); ("Float", (((Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -44)))); ("Null", (0)); ("O", (((Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -42); (Tag3 ((("value", 300)), 0, (0)), 100000000, 0, -43)]), 100000000, 0, -41)], (0)), 100000000, 0, -40)))); ("String", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -45))))], (0, 100000000, 0, -38), 1, 0, 0)), 100000000, 0, -37)), 0, 0, 0, 0, (("lib/types.ml", 23, 1023, 1023), ("lib/types.ml", 29, 1127, 1160), 0), 0, 0, 0, Tag1 ("Yaml__Types", 4)), 1, 0); Tag1 (("scalar", 301), (0, 0, [[(("anchor", 278), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -30)], (0)), 100000000, 0, -29), (("lib/types.ml", 32, 1178, 1180), ("lib/types.ml", 32, 1178, 1203), 0), 0, Tag1 ("Yaml__Types", 6)); (("tag", 279), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -32)], (0)), 100000000, 0, -31), (("lib/types.ml", 33, 1204, 1206), ("lib/types.ml", 33, 1204, 1226), 0), 0, Tag1 ("Yaml__Types", 7)); (("value", 280), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -33), (("lib/types.ml", 34, 1227, 1229), ("lib/types.ml", 34, 1227, 1244), 0), 0, Tag1 ("Yaml__Types", 8)); (("plain_implicit", 281), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -34), (("lib/types.ml", 35, 1245, 1247), ("lib/types.ml", 35, 1245, 1269), 0), 0, Tag1 ("Yaml__Types", 9)); (("quoted_implicit", 282), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -35), (("lib/types.ml", 36, 1270, 1272), ("lib/types.ml", 36, 1270, 1295), 0), 0, Tag1 ("Yaml__Types", 10)); (("style", 283), 0, (Tag3 ((("scalar_style", 298)), 0, (0)), 100000000, 0, -36), (("lib/types.ml", 37, 1296, 1298), ("lib/types.ml", 37, 1296, 1319), 0), 0, Tag1 ("Yaml__Types", 11))]], 1, 0, 0, 0, 0, 0, (("lib/types.ml", 31, 1162, 1162), ("lib/types.ml", 38, 1320, 1321), 0), 0, 0, 0, Tag1 ("Yaml__Types", 5)), 1, 0); Tag1 (("yaml", 302), (0, 0, 0, 1, ((Tag8 (([("A", (((Tag3 ((("sequence", 303)), 0, (0)), 100000000, 0, -26)))); ("Alias", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -27)))); ("O", (((Tag3 ((("mapping", 304)), 0, (0)), 100000000, 0, -25)))); ("Scalar", (((Tag3 ((("scalar", 301)), 0, (0)), 100000000, 0, -28))))], (0, 100000000, 0, -24), 1, 0, 0)), 100000000, 0, -23)), 0, 0, 0, 0, (("lib/types.ml", 40, 1323, 1323), ("lib/types.ml", 41, 1335, 1410), 0), 0, 0, 0, Tag1 ("Yaml__Types", 12)), 1, 0); Tag1 (("sequence", 303), (0, 0, [[(("s_anchor", 287), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -17)], (0)), 100000000, 0, -16), (("lib/types.ml", 44, 1429, 1431), ("lib/types.ml", 44, 1429, 1456), 0), 0, Tag1 ("Yaml__Types", 15)); (("s_tag", 288), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -19)], (0)), 100000000, 0, -18), (("lib/types.ml", 45, 1457, 1459), ("lib/types.ml", 45, 1457, 1481), 0), 0, Tag1 ("Yaml__Types", 16)); (("s_implicit", 289), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -20), (("lib/types.ml", 46, 1482, 1484), ("lib/types.ml", 46, 1482, 1502), 0), 0, Tag1 ("Yaml__Types", 17)); (("s_members", 290), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("yaml", 302)), 0, (0)), 100000000, 0, -22)], (0)), 100000000, 0, -21), (("lib/types.ml", 47, 1503, 1505), ("lib/types.ml", 47, 1503, 1527), 0), 0, Tag1 ("Yaml__Types", 18))]], 1, 0, 0, 0, 0, 0, (("lib/types.ml", 43, 1412, 1412), ("lib/types.ml", 48, 1528, 1529), 0), 0, 0, 0, Tag1 ("Yaml__Types", 13)), 2, 0); Tag1 (("mapping", 304), (0, 0, [[(("m_anchor", 291), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -8)], (0)), 100000000, 0, -7), (("lib/types.ml", 51, 1547, 1549), ("lib/types.ml", 51, 1547, 1574), 0), 0, Tag1 ("Yaml__Types", 19)); (("m_tag", 292), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10)], (0)), 100000000, 0, -9), (("lib/types.ml", 52, 1575, 1577), ("lib/types.ml", 52, 1575, 1599), 0), 0, Tag1 ("Yaml__Types", 20)); (("m_implicit", 293), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -11), (("lib/types.ml", 53, 1600, 1602), ("lib/types.ml", 53, 1600, 1620), 0), 0, Tag1 ("Yaml__Types", 21)); (("m_members", 294), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("yaml", 302)), 0, (0)), 100000000, 0, -14); (Tag3 ((("yaml", 302)), 0, (0)), 100000000, 0, -15)]), 100000000, 0, -13)], (0)), 100000000, 0, -12), (("lib/types.ml", 54, 1621, 1623), ("lib/types.ml", 54, 1621, 1654), 0), 0, Tag1 ("Yaml__Types", 22))]], 1, 0, 0, 0, 0, 0, (("lib/types.ml", 50, 1531, 1531), ("lib/types.ml", 55, 1655, 1656), 0), 0, 0, 0, Tag1 ("Yaml__Types", 14)), 2, 0); Tag1 (("res", 305), ([((("a")), 100000000, 0, -3)], 1, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [((("a")), 100000000, 0, -3); (Tag8 (([("Msg", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6))))], (0, 100000000, 0, -5), 1, 0, 0)), 100000000, 0, -4)], (0)), 100000000, 0, -2)), [25], [0], 0, 0, (("lib/types.ml", 57, 1658, 1658), ("lib/types.ml", 57, 1658, 1703), 0), 0, 0, 0, Tag1 ("Yaml__Types", 23)), 1, 0)], "Yaml__Types", [("Yaml__Types", ("\192\029\215z~\138S\017\192\160\134\235\133\222:^")); ("Yaml__", ("\130Q`\192\016\187{\245\167\022l\024\219\213\023\215")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

type 'a res = ('a, [ `Msg of string ]) result

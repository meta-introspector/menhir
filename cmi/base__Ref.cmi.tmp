type 'a t = 'a Base__.Import.Stdlib.ref = { mutable contents : 'a; }
val compare :
  'a Base__Ppx_compare_lib.compare -> 'a t Base__Ppx_compare_lib.compare
val equal :
  'a Base__Ppx_compare_lib.equal -> 'a t Base__Ppx_compare_lib.equal
val globalize : ('a -> 'a) -> 'a t -> 'a t
val t_of_sexp : (Sexplib0__.Sexp.t -> 'a) -> Sexplib0__.Sexp.t -> 'a t
val sexp_of_t : ('a -> Sexplib0__.Sexp.t) -> 'a t -> Sexplib0__.Sexp.t
val t_sexp_grammar :
  'a Sexplib0.Sexp_grammar.t -> 'a t Sexplib0.Sexp_grammar.t
external create : 'a -> 'a t = "%makemutable"
external ( ! ) : 'a t -> 'a = "%field0"
external ( := ) : 'a t -> 'a -> unit = "%setfield0"
val swap : 'a t -> 'a t -> unit
val replace : 'a t -> ('a -> 'a) -> unit
val set_temporarily : 'a t -> 'a -> f:(unit -> 'b) -> 'b
module And_value :
  sig
    type t = T : 'a Base__.Import.ref * 'a -> t
    val set : t -> unit
    val sets : t list -> unit
    val snapshot : t -> t
  end("DEBUG:rule", [Tag1 (("t", 1418), ([((("a")), 100000000, 0, -76)], 1, [[(("contents", 783), 1, ((("a")), 100000000, 0, -76), (("src/ref.mli", 6, 156, 186), ("src/ref.mli", 6, 156, 207), 0), 0, Tag1 ("Base__Ref", 1))]], 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Import"), "Stdlib"), "ref"), [((("a")), 100000000, 0, -76)], (0)), 100000000, 0, -75)), [63], [0], 0, 0, (("src/ref.mli", 6, 156, 156), ("src/ref.mli", 7, 210, 275), 0), [(("deriving_inline", (("src/ref.mli", 7, 210, 213), ("src/ref.mli", 7, 210, 228), 0)), ([([(Tag8 ([(((("compare"), (("src/ref.mli", 7, 210, 229), ("src/ref.mli", 7, 210, 236), 0))), (("src/ref.mli", 7, 210, 229), ("src/ref.mli", 7, 210, 236), 0), 0, 0); (((("equal"), (("src/ref.mli", 7, 210, 238), ("src/ref.mli", 7, 210, 243), 0))), (("src/ref.mli", 7, 210, 238), ("src/ref.mli", 7, 210, 243), 0), 0, 0); (((("globalize"), (("src/ref.mli", 7, 210, 245), ("src/ref.mli", 7, 210, 254), 0))), (("src/ref.mli", 7, 210, 245), ("src/ref.mli", 7, 210, 254), 0), 0, 0); (((("sexp"), (("src/ref.mli", 7, 210, 256), ("src/ref.mli", 7, 210, 260), 0))), (("src/ref.mli", 7, 210, 256), ("src/ref.mli", 7, 210, 260), 0), 0, 0); (((("sexp_grammar"), (("src/ref.mli", 7, 210, 262), ("src/ref.mli", 7, 210, 274), 0))), (("src/ref.mli", 7, 210, 262), ("src/ref.mli", 7, 210, 274), 0), 0, 0)]), (("src/ref.mli", 7, 210, 229), ("src/ref.mli", 7, 210, 274), 0), 0, 0)], (("src/ref.mli", 7, 210, 229), ("src/ref.mli", 7, 210, 274), 0))]), (("src/ref.mli", 7, 210, 210), ("src/ref.mli", 7, 210, 275), 0))], 0, 0, Tag1 ("Base__Ref", 0)), 1, 0); (("compare", 1419), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "compare"), [((("a")), 100000000, 0, -73)], (0)), 100000000, 0, -74), (Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "compare"), [(Tag3 ((("t", 1418)), [((("a")), 100000000, 0, -73)], (0)), 100000000, 0, -72)], (0)), 100000000, 0, -71), 0), 100000000, 0, -70), 0, (("src/ref.mli", 9, 277, 285), ("src/ref.mli", 9, 277, 337), 0), 0, Tag1 ("Base__Ppx_compare_lib", 8)), 0); (("equal", 1420), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "equal"), [((("a")), 100000000, 0, -68)], (0)), 100000000, 0, -69), (Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "equal"), [(Tag3 ((("t", 1418)), [((("a")), 100000000, 0, -68)], (0)), 100000000, 0, -67)], (0)), 100000000, 0, -66), 0), 100000000, 0, -65), 0, (("src/ref.mli", 10, 338, 346), ("src/ref.mli", 10, 338, 393), 0), 0, Tag1 ("Base__Ppx_compare_lib", 21)), 0); (("globalize", 1421), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -62), ((("a")), 100000000, 0, -62), 0), 100000000, 0, -64), (Tag1 (0, (Tag3 ((("t", 1418)), [((("a")), 100000000, 0, -62)], (0)), 100000000, 0, -63), (Tag3 ((("t", 1418)), [((("a")), 100000000, 0, -62)], (0)), 100000000, 0, -61), 0), 100000000, 0, -60), 0), 100000000, 0, -59), 0, (("src/ref.mli", 12, 395, 395), ("src/ref.mli", 12, 395, 469), 0), 0, Tag1 ("Base__Ref", 4)), 0); (("t_of_sexp", 1422), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -58), ((("a")), 100000000, 0, -55), 0), 100000000, 0, -57), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -56), (Tag3 ((("t", 1418)), [((("a")), 100000000, 0, -55)], (0)), 100000000, 0, -54), 0), 100000000, 0, -53), 0), 100000000, 0, -52), 0, (("src/ref.mli", 14, 471, 479), ("src/ref.mli", 14, 471, 522), 0), 0, Tag1 ("Sexplib0__Sexpable", 5)), 0); (("sexp_of_t", 1423), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -49), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -51), 0), 100000000, 0, -50), (Tag1 (0, (Tag3 ((("t", 1418)), [((("a")), 100000000, 0, -49)], (0)), 100000000, 0, -48), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -47), 0), 100000000, 0, -46), 0), 100000000, 0, -45), 0, (("src/ref.mli", 14, 471, 479), ("src/ref.mli", 14, 471, 522), 0), 0, Tag1 ("Sexplib0__Sexpable", 6)), 0); (("t_sexp_grammar", 1424), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [((("a")), 100000000, 0, -43)], (0)), 100000000, 0, -44), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("t", 1418)), [((("a")), 100000000, 0, -43)], (0)), 100000000, 0, -42)], (0)), 100000000, 0, -41), 0), 100000000, 0, -40), 0, (("src/ref.mli", 16, 524, 524), ("src/ref.mli", 16, 524, 603), 0), 0, Tag1 ("Base__Ref", 7)), 0); (("create", 1425), ((Tag1 (0, ((("a")), 100000000, 0, -39), (Tag3 ((("t", 1418)), [((("a")), 100000000, 0, -39)], (0)), 100000000, 0, -38), 0), 100000000, 0, -37), (("%makemutable", 1, 1, "", [0], 0)), (("src/ref.mli", 22, 674, 674), ("src/ref.mli", 22, 674, 733), 0), 0, Tag1 ("Base__Ref", 8)), 0); (("!", 1426), ((Tag1 (0, (Tag3 ((("t", 1418)), [((("a")), 100000000, 0, -35)], (0)), 100000000, 0, -36), ((("a")), 100000000, 0, -35), 0), 100000000, 0, -34), (("%field0", 1, 1, "", [0], 0)), (("src/ref.mli", 23, 734, 734), ("src/ref.mli", 23, 734, 787), 0), 0, Tag1 ("Base__Ref", 9)), 0); ((":=", 1427), ((Tag1 (0, (Tag3 ((("t", 1418)), [((("a")), 100000000, 0, -32)], (0)), 100000000, 0, -33), (Tag1 (0, ((("a")), 100000000, 0, -32), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -31), 0), 100000000, 0, -30), 0), 100000000, 0, -29), (("%setfield0", 2, 1, "", [0; 0], 0)), (("src/ref.mli", 24, 788, 788), ("src/ref.mli", 24, 788, 853), 0), 0, Tag1 ("Base__Ref", 10)), 0); (("swap", 1428), ((Tag1 (0, (Tag3 ((("t", 1418)), [((("a")), 100000000, 0, -27)], (0)), 100000000, 0, -28), (Tag1 (0, (Tag3 ((("t", 1418)), [((("a")), 100000000, 0, -27)], (0)), 100000000, 0, -26), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -25), 0), 100000000, 0, -24), 0), 100000000, 0, -23), 0, (("src/ref.mli", 27, 910, 910), ("src/ref.mli", 27, 910, 941), 0), 0, Tag1 ("Base__Ref", 11)), 0); (("replace", 1429), ((Tag1 (0, (Tag3 ((("t", 1418)), [((("a")), 100000000, 0, -21)], (0)), 100000000, 0, -22), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -21), ((("a")), 100000000, 0, -21), 0), 100000000, 0, -20), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("src/ref.mli", 30, 979, 979), ("src/ref.mli", 30, 979, 1029), 0), 0, Tag1 ("Base__Ref", 12)), 0); (("set_temporarily", 1430), ((Tag1 (0, (Tag3 ((("t", 1418)), [((("a")), 100000000, 0, -15)], (0)), 100000000, 0, -16), (Tag1 (0, ((("a")), 100000000, 0, -15), (Tag1 (("f"), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -14), ((("b")), 100000000, 0, -12), 0), 100000000, 0, -13), ((("b")), 100000000, 0, -12), 0), 100000000, 0, -11), 0), 100000000, 0, -10), 0), 100000000, 0, -9), 0, (("src/ref.mli", 34, 1205, 1205), ("src/ref.mli", 34, 1205, 1271), 0), 0, Tag1 ("Base__Ref", 13)), 0); Tag3 (("And_value", 1431), 0, (Tag1 ([Tag1 (("t", 1433), (0, 0, Tag1 ([(("T", 1392), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Import"), "ref"), [((("a")), 100000000, 0, -89)], (0)), 100000000, 0, -88); ((("a")), 100000000, 0, -89)]), ((Tag3 ((("t", 1433)), 0, (0)), 100000000, 0, -87)), (("src/ref.mli", 37, 1296, 1307), ("src/ref.mli", 37, 1296, 1327), 0), 0, Tag1 ("Base__Ref", 15))], 0), 1, 0, 0, 0, 0, 0, (("src/ref.mli", 37, 1296, 1298), ("src/ref.mli", 37, 1296, 1348), 0), [(("deriving", (("src/ref.mli", 37, 1296, 1331), ("src/ref.mli", 37, 1296, 1339), 0)), ([([(((("sexp_of"), (("src/ref.mli", 37, 1296, 1340), ("src/ref.mli", 37, 1296, 1347), 0))), (("src/ref.mli", 37, 1296, 1340), ("src/ref.mli", 37, 1296, 1347), 0), 0, 0)], (("src/ref.mli", 37, 1296, 1340), ("src/ref.mli", 37, 1296, 1347), 0))]), (("src/ref.mli", 37, 1296, 1328), ("src/ref.mli", 37, 1296, 1348), 0))], 0, 0, Tag1 ("Base__Ref", 14)), 1, 0); (("set", 1434), ((Tag1 (0, (Tag3 ((("t", 1433)), 0, (0)), 100000000, 0, -86), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -85), 0), 100000000, 0, -84), 0, (("src/ref.mli", 40, 1403, 1405), ("src/ref.mli", 40, 1403, 1424), 0), 0, Tag1 ("Base__Ref", 16)), 0); (("sets", 1435), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 1433)), 0, (0)), 100000000, 0, -83)], (0)), 100000000, 0, -82), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -81), 0), 100000000, 0, -80), 0, (("src/ref.mli", 43, 1467, 1469), ("src/ref.mli", 43, 1467, 1494), 0), 0, Tag1 ("Base__Ref", 17)), 0); (("snapshot", 1436), ((Tag1 (0, (Tag3 ((("t", 1433)), 0, (0)), 100000000, 0, -79), (Tag3 ((("t", 1433)), 0, (0)), 100000000, 0, -78), 0), 100000000, 0, -77), 0, (("src/ref.mli", 46, 1548, 1550), ("src/ref.mli", 46, 1548, 1571), 0), 0, Tag1 ("Base__Ref", 18)), 0)]), 0, (("src/ref.mli", 36, 1273, 1273), ("src/ref.mli", 47, 1572, 1575), 0), Tag1 ("Base__Ref", 19)), 0, 0); (("sets_temporarily", 1432), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("And_value", 1431)), "t"), 0, (0)), 100000000, 0, -8)], (0)), 100000000, 0, -7), (Tag1 (("f"), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -6), ((("a")), 100000000, 0, -4), 0), 100000000, 0, -5), ((("a")), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/ref.mli", 52, 1792, 1792), ("src/ref.mli", 52, 1792, 1865), 0), 0, Tag1 ("Base__Ref", 20)), 0)], "Base__Ref", [("Base__Ref", ("\250\254R\158s\203c\0025\029I6\149\179s\158")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__StdLabels", (".\193\n\229\139\017\212C-ZA\\kz-\128")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__MoreLabels", ("\248\232\248\254`<\230\241\161U\193U\1466J\238")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shadow_stdlib", ("\219zi\164\203\158e)\232\221\196\168\138x\142\018")); ("Sexplib0__Sexpable", ("\251${\207(\249/z\242\255\250^\141\156\210e")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Base_internalhash_types", ("0\148#2\226\223\018\135\173>!\020\237\017\255\149")); ("Base__Sexp", ("\154\187\171&\209=\153[\236\250!U\174`\190T")); ("Base__Ppx_hash_lib", ("\199\141\178\193\006\209L\007^\020(\131\224sn8")); ("Base__Ppx_compare_lib", ("\243\186~\233\228\199Ah\181.\223\004e\231\129S")); ("Base__Poly0", ("\230;\143\234\255.H\132KOe7\155\\\023f")); ("Base__Import0", ("\156\129U\197Y[\\\153\017Ho\203\173\204\220\020")); ("Base__Import", ("\014\187\247\141\187\181\142g\176:s_,\181\219\209")); ("Base__Hash_intf", ("h\004P\218\1531G\127\212\208A\024\140\164iq")); ("Base__Hash", ("\206Rc\194\234{s3\248\165\024\162\203{\206\206")); ("Base__Globalize", ("<\243w~.\180\196t\159\193\174[\227\139\215G")); ("Base__Bool0", ("\177f\254p\023\143&\239\020\136\206\242~\018F\251")); ("Base__", ("p\252\007\139\128\163W\025+\0225\001\246|P\158"))], [(0)])

val sets_temporarily : And_value.t list -> f:(unit -> 'a) -> 'a

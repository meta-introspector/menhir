type owner
val none : owner
val zero : owner
val fresh : unit -> owner
val is_uniquely_owned : owner -> owner -> bool("DEBUG:rule", [Tag1 (("owner", 294), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/Owner.mli", 17, 1107, 1107), ("src/Owner.mli", 17, 1107, 1117), 0), 0, 0, 0, Tag1 ("Sek__Owner", 0)), 1, 0); (("none", 295), ((Tag3 ((("owner", 294)), 0, (0)), 100000000, 0, -14), 0, (("src/Owner.mli", 21, 1254, 1254), ("src/Owner.mli", 21, 1254, 1269), 0), 0, Tag1 ("Sek__Owner", 1)), 0); (("zero", 296), ((Tag3 ((("owner", 294)), 0, (0)), 100000000, 0, -13), 0, (("src/Owner.mli", 24, 1325, 1325), ("src/Owner.mli", 24, 1325, 1340), 0), 0, Tag1 ("Sek__Owner", 2)), 0); (("fresh", 297), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12), (Tag3 ((("owner", 294)), 0, (0)), 100000000, 0, -11), 0), 100000000, 0, -10), 0, (("src/Owner.mli", 27, 1382, 1382), ("src/Owner.mli", 27, 1382, 1406), 0), 0, Tag1 ("Sek__Owner", 3)), 0); (("is_uniquely_owned", 298), ((Tag1 (0, (Tag3 ((("owner", 294)), 0, (0)), 100000000, 0, -9), (Tag1 (0, (Tag3 ((("owner", 294)), 0, (0)), 100000000, 0, -8), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("src/Owner.mli", 31, 1527, 1527), ("src/Owner.mli", 31, 1527, 1572), 0), 0, Tag1 ("Sek__Owner", 4)), 0); (("show", 299), ((Tag1 (0, (Tag3 ((("owner", 294)), 0, (0)), 100000000, 0, -4), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/Owner.mli", 35, 1685, 1685), ("src/Owner.mli", 35, 1685, 1710), 0), 0, Tag1 ("Sek__Owner", 5)), 0)], "Sek__Owner", [("Sek__Owner", ("\228~\155T\164\209\210ZNr\165\246\165\216\130-")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sek__", ("b\188\017\179d|~L\019\214\028\188\145y\210\250")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

val show : owner -> string

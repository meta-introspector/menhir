type t
val set_type_in_type : bool -> t -> t
val type_in_type : t -> bool
type 'a check_function = t -> 'a -> 'a -> bool
val check_leq : Univ.Universe.t check_function
val check_eq : Univ.Universe.t check_function
val check_eq_level : Univ.Level.t check_function
val initial_universes : t
val initial_universes_with : t -> t
val check_eq_instances : Univ.Instance.t check_function
type path_explanation
type explanation = Path of path_explanation | Other of Pp.t
type univ_inconsistency =
    Univ.constraint_type * Sorts.t * Sorts.t * explanation option
exception UniverseInconsistency of univ_inconsistency
val enforce_constraint : Univ.univ_constraint -> t -> t
val merge_constraints : Univ.Constraints.t -> t -> t
val check_constraint : t -> Univ.univ_constraint -> bool
val check_constraints : Univ.Constraints.t -> t -> bool
val check_eq_sort : t -> Sorts.t -> Sorts.t -> bool
val check_leq_sort : t -> Sorts.t -> Sorts.t -> bool
val enforce_leq_alg :
  Univ.Universe.t -> Univ.Universe.t -> t -> Univ.Constraints.t * t
exception AlreadyDeclared
module Bound : sig type t = Prop | Set end
val add_universe : Univ.Level.t -> lbound:Bound.t -> strict:bool -> t -> t
exception UndeclaredLevel of Univ.Level.t
val check_declared_universes : t -> Univ.Level.Set.t -> unit
val empty_universes : t
val constraints_of_universes :
  t -> Univ.Constraints.t * Univ.Level.Set.t list
val choose :
  (Univ.Level.t -> bool) -> t -> Univ.Level.t -> Univ.Level.t option
val constraints_for : kept:Univ.Level.Set.t -> t -> Univ.Constraints.t
val domain : t -> Univ.Level.Set.t
val check_subtype : Univ.AbstractContext.t check_function
type node = Alias of Univ.Level.t | Node of bool Univ.Level.Map.t
val repr : t -> node Univ.Level.Map.t
val pr_universes : (Univ.Level.t -> Pp.t) -> node Univ.Level.Map.t -> Pp.t
val explain_universe_inconsistency :
  (Univ.Level.t -> Pp.t) -> univ_inconsistency -> Pp.t
("DEBUG:rule", [Tag1 (("t", 647), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("kernel/uGraph.mli", 14, 720, 720), ("kernel/uGraph.mli", 14, 720, 726), 0), 0, 0, 0, Tag1 ("UGraph", 0)), 1, 0); (("set_type_in_type", 648), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -146), (Tag1 (0, (Tag3 ((("t", 647)), 0, (0)), 100000000, 0, -145), (Tag3 ((("t", 647)), 0, (0)), 100000000, 0, -144), 0), 100000000, 0, -143), 0), 100000000, 0, -142), 0, (("kernel/uGraph.mli", 16, 728, 728), ("kernel/uGraph.mli", 16, 728, 765), 0), 0, Tag1 ("UGraph", 1)), 0); (("type_in_type", 649), ((Tag1 (0, (Tag3 ((("t", 647)), 0, (0)), 100000000, 0, -141), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -140), 0), 100000000, 0, -139), 0, (("kernel/uGraph.mli", 23, 954, 954), ("kernel/uGraph.mli", 23, 954, 982), 0), 0, Tag1 ("UGraph", 2)), 0); Tag1 (("check_function", 650), ([((("a")), 100000000, 0, -137)], 1, 0, 1, ((Tag1 (0, (Tag3 ((("t", 647)), 0, (0)), 100000000, 0, -138), (Tag1 (0, ((("a")), 100000000, 0, -137), (Tag1 (0, ((("a")), 100000000, 0, -137), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -136), 0), 100000000, 0, -135), 0), 100000000, 0, -134), 0), 100000000, 0, -133)), [46], [0], 0, 0, (("kernel/uGraph.mli", 25, 984, 984), ("kernel/uGraph.mli", 25, 984, 1030), 0), 0, 0, 0, Tag1 ("UGraph", 3)), 1, 0); (("check_leq", 651), ((Tag3 ((("check_function", 650)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Universe"), "t"), 0, (0)), 100000000, 0, -132)], (0)), 100000000, 0, -131), 0, (("kernel/uGraph.mli", 27, 1032, 1032), ("kernel/uGraph.mli", 27, 1032, 1073), 0), 0, Tag1 ("UGraph", 4)), 0); (("check_eq", 652), ((Tag3 ((("check_function", 650)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Universe"), "t"), 0, (0)), 100000000, 0, -130)], (0)), 100000000, 0, -129), 0, (("kernel/uGraph.mli", 28, 1074, 1074), ("kernel/uGraph.mli", 28, 1074, 1114), 0), 0, Tag1 ("UGraph", 5)), 0); (("check_eq_level", 653), ((Tag3 ((("check_function", 650)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Level"), "t"), 0, (0)), 100000000, 0, -128)], (0)), 100000000, 0, -127), 0, (("kernel/uGraph.mli", 29, 1115, 1115), ("kernel/uGraph.mli", 29, 1115, 1158), 0), 0, Tag1 ("UGraph", 6)), 0); (("initial_universes", 654), ((Tag3 ((("t", 647)), 0, (0)), 100000000, 0, -126), 0, (("kernel/uGraph.mli", 32, 1210, 1210), ("kernel/uGraph.mli", 32, 1210, 1235), 0), 0, Tag1 ("UGraph", 7)), 0); (("initial_universes_with", 655), ((Tag1 (0, (Tag3 ((("t", 647)), 0, (0)), 100000000, 0, -125), (Tag3 ((("t", 647)), 0, (0)), 100000000, 0, -124), 0), 100000000, 0, -123), 0, (("kernel/uGraph.mli", 35, 1323, 1323), ("kernel/uGraph.mli", 35, 1323, 1358), 0), 0, Tag1 ("UGraph", 8)), 0); (("check_eq_instances", 656), ((Tag3 ((("check_function", 650)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Instance"), "t"), 0, (0)), 100000000, 0, -122)], (0)), 100000000, 0, -121), 0, (("kernel/uGraph.mli", 38, 1419, 1419), ("kernel/uGraph.mli", 38, 1419, 1469), 0), 0, Tag1 ("UGraph", 9)), 0); Tag1 (("path_explanation", 657), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("kernel/uGraph.mli", 46, 1721, 1721), ("kernel/uGraph.mli", 46, 1721, 1742), 0), 0, 0, 0, Tag1 ("UGraph", 10)), 1, 0); Tag1 (("explanation", 658), (0, 0, Tag1 ([(("Path", 386), ([(Tag3 ((("path_explanation", 657)), 0, (0)), 100000000, 0, -119)]), 0, (("kernel/uGraph.mli", 49, 1763, 1765), ("kernel/uGraph.mli", 49, 1763, 1791), 0), 0, Tag1 ("UGraph", 12)); (("Other", 387), ([(Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -120)]), 0, (("kernel/uGraph.mli", 50, 1792, 1794), ("kernel/uGraph.mli", 50, 1792, 1809), 0), 0, Tag1 ("UGraph", 13))], 0), 1, 0, 0, 0, 0, 0, (("kernel/uGraph.mli", 48, 1744, 1744), ("kernel/uGraph.mli", 50, 1792, 1809), 0), 0, 0, 0, Tag1 ("UGraph", 11)), 1, 0); Tag1 (("univ_inconsistency", 659), (0, 0, 0, 1, ((Tag2 ([(Tag3 (Tag1 ((Tag2 ("Univ")), "constraint_type"), 0, (0)), 100000000, 0, -114); (Tag3 (Tag1 ((Tag2 ("Sorts")), "t"), 0, (0)), 100000000, 0, -115); (Tag3 (Tag1 ((Tag2 ("Sorts")), "t"), 0, (0)), 100000000, 0, -116); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("explanation", 658)), 0, (0)), 100000000, 0, -118)], (0)), 100000000, 0, -117)]), 100000000, 0, -113)), 0, 0, 0, 0, (("kernel/uGraph.mli", 52, 1811, 1811), ("kernel/uGraph.mli", 52, 1811, 1893), 0), 0, 0, 0, Tag1 ("UGraph", 14)), 1, 0); Tag2 (("UniverseInconsistency", 660), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((("univ_inconsistency", 659)), 0, (0)), 100000000, 0, -112)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("UGraph", 15)), 2, 0); (("enforce_constraint", 661), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Univ")), "univ_constraint"), 0, (0)), 100000000, 0, -111), (Tag1 (0, (Tag3 ((("t", 647)), 0, (0)), 100000000, 0, -110), (Tag3 ((("t", 647)), 0, (0)), 100000000, 0, -109), 0), 100000000, 0, -108), 0), 100000000, 0, -107), 0, (("kernel/uGraph.mli", 56, 1950, 1950), ("kernel/uGraph.mli", 56, 1950, 2000), 0), 0, Tag1 ("UGraph", 16)), 0); (("merge_constraints", 662), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Constraints"), "t"), 0, (0)), 100000000, 0, -106), (Tag1 (0, (Tag3 ((("t", 647)), 0, (0)), 100000000, 0, -105), (Tag3 ((("t", 647)), 0, (0)), 100000000, 0, -104), 0), 100000000, 0, -103), 0), 100000000, 0, -102), 0, (("kernel/uGraph.mli", 58, 2002, 2002), ("kernel/uGraph.mli", 58, 2002, 2049), 0), 0, Tag1 ("UGraph", 17)), 0); (("check_constraint", 663), ((Tag1 (0, (Tag3 ((("t", 647)), 0, (0)), 100000000, 0, -101), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Univ")), "univ_constraint"), 0, (0)), 100000000, 0, -100), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -99), 0), 100000000, 0, -98), 0), 100000000, 0, -97), 0, (("kernel/uGraph.mli", 60, 2051, 2051), ("kernel/uGraph.mli", 60, 2051, 2103), 0), 0, Tag1 ("UGraph", 18)), 0); (("check_constraints", 664), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Constraints"), "t"), 0, (0)), 100000000, 0, -96), (Tag1 (0, (Tag3 ((("t", 647)), 0, (0)), 100000000, 0, -95), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -94), 0), 100000000, 0, -93), 0), 100000000, 0, -92), 0, (("kernel/uGraph.mli", 61, 2104, 2104), ("kernel/uGraph.mli", 61, 2104, 2154), 0), 0, Tag1 ("UGraph", 19)), 0); (("check_eq_sort", 665), ((Tag1 (0, (Tag3 ((("t", 647)), 0, (0)), 100000000, 0, -91), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sorts")), "t"), 0, (0)), 100000000, 0, -90), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sorts")), "t"), 0, (0)), 100000000, 0, -89), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -88), 0), 100000000, 0, -87), 0), 100000000, 0, -86), 0), 100000000, 0, -85), 0, (("kernel/uGraph.mli", 62, 2155, 2155), ("kernel/uGraph.mli", 62, 2155, 2207), 0), 0, Tag1 ("UGraph", 20)), 0); (("check_leq_sort", 666), ((Tag1 (0, (Tag3 ((("t", 647)), 0, (0)), 100000000, 0, -84), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sorts")), "t"), 0, (0)), 100000000, 0, -83), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sorts")), "t"), 0, (0)), 100000000, 0, -82), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -81), 0), 100000000, 0, -80), 0), 100000000, 0, -79), 0), 100000000, 0, -78), 0, (("kernel/uGraph.mli", 63, 2208, 2208), ("kernel/uGraph.mli", 63, 2208, 2260), 0), 0, Tag1 ("UGraph", 21)), 0); (("enforce_leq_alg", 667), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Universe"), "t"), 0, (0)), 100000000, 0, -77), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Universe"), "t"), 0, (0)), 100000000, 0, -76), (Tag1 (0, (Tag3 ((("t", 647)), 0, (0)), 100000000, 0, -75), (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Constraints"), "t"), 0, (0)), 100000000, 0, -73); (Tag3 ((("t", 647)), 0, (0)), 100000000, 0, -74)]), 100000000, 0, -72), 0), 100000000, 0, -71), 0), 100000000, 0, -70), 0), 100000000, 0, -69), 0, (("kernel/uGraph.mli", 65, 2262, 2262), ("kernel/uGraph.mli", 65, 2262, 2349), 0), 0, Tag1 ("UGraph", 22)), 0); Tag2 (("AlreadyDeclared", 668), ((Tag3 ("exn", 7)), 0, (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("UGraph", 23)), 2, 0); Tag3 (("Bound", 669), 0, (Tag1 ([Tag1 (("t", 684), (0, 0, Tag1 ([(("Prop", 543), (0), 0, (("kernel/uGraph.mli", 74, 2536, 2547), ("kernel/uGraph.mli", 74, 2536, 2551), 0), 0, Tag1 ("UGraph", 25)); (("Set", 544), (0), 0, (("kernel/uGraph.mli", 74, 2536, 2552), ("kernel/uGraph.mli", 74, 2536, 2557), 0), 0, Tag1 ("UGraph", 26))], 0), 1, 0, 0, 0, 0, 0, (("kernel/uGraph.mli", 74, 2536, 2538), ("kernel/uGraph.mli", 74, 2536, 2557), 0), 0, 1, 0, Tag1 ("UGraph", 24)), 1, 0)]), 0, (("kernel/uGraph.mli", 72, 2517, 2517), ("kernel/uGraph.mli", 76, 2639, 2642), 0), Tag1 ("UGraph", 27)), 0, 0); (("add_universe", 670), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Level"), "t"), 0, (0)), 100000000, 0, -68), (Tag1 (("lbound"), (Tag3 (Tag1 ((("Bound", 669)), "t"), 0, (0)), 100000000, 0, -67), (Tag1 (("strict"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -66), (Tag1 (0, (Tag3 ((("t", 647)), 0, (0)), 100000000, 0, -65), (Tag3 ((("t", 647)), 0, (0)), 100000000, 0, -64), 0), 100000000, 0, -63), 0), 100000000, 0, -62), 0), 100000000, 0, -61), 0), 100000000, 0, -60), 0, (("kernel/uGraph.mli", 78, 2644, 2644), ("kernel/uGraph.mli", 78, 2644, 2713), 0), 0, Tag1 ("UGraph", 28)), 0); Tag2 (("UndeclaredLevel", 671), ((Tag3 ("exn", 7)), 0, ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Level"), "t"), 0, (0)), 100000000, 0, -59)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("UGraph", 29)), 2, 0); (("check_declared_universes", 672), ((Tag1 (0, (Tag3 ((("t", 647)), 0, (0)), 100000000, 0, -58), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Univ")), "Level"), "Set"), "t"), 0, (0)), 100000000, 0, -57), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -56), 0), 100000000, 0, -55), 0), 100000000, 0, -54), 0, (("kernel/uGraph.mli", 84, 2887, 2887), ("kernel/uGraph.mli", 84, 2887, 2947), 0), 0, Tag1 ("UGraph", 30)), 0); (("empty_universes", 673), ((Tag3 ((("t", 647)), 0, (0)), 100000000, 0, -53), 0, (("kernel/uGraph.mli", 87, 2985, 2985), ("kernel/uGraph.mli", 87, 2985, 3008), 0), 0, Tag1 ("UGraph", 31)), 0); (("constraints_of_universes", 674), ((Tag1 (0, (Tag3 ((("t", 647)), 0, (0)), 100000000, 0, -52), (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Constraints"), "t"), 0, (0)), 100000000, 0, -49); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Univ")), "Level"), "Set"), "t"), 0, (0)), 100000000, 0, -51)], (0)), 100000000, 0, -50)]), 100000000, 0, -48), 0), 100000000, 0, -47), 0, (("kernel/uGraph.mli", 92, 3199, 3199), ("kernel/uGraph.mli", 92, 3199, 3267), 0), 0, Tag1 ("UGraph", 32)), 0); (("choose", 675), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Level"), "t"), 0, (0)), 100000000, 0, -46), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -45), 0), 100000000, 0, -44), (Tag1 (0, (Tag3 ((("t", 647)), 0, (0)), 100000000, 0, -43), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Level"), "t"), 0, (0)), 100000000, 0, -42), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Level"), "t"), 0, (0)), 100000000, 0, -41)], (0)), 100000000, 0, -40), 0), 100000000, 0, -39), 0), 100000000, 0, -38), 0), 100000000, 0, -37), 0, (("kernel/uGraph.mli", 94, 3269, 3269), ("kernel/uGraph.mli", 94, 3269, 3333), 0), 0, Tag1 ("UGraph", 33)), 0); (("constraints_for", 676), ((Tag1 (("kept"), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Univ")), "Level"), "Set"), "t"), 0, (0)), 100000000, 0, -36), (Tag1 (0, (Tag3 ((("t", 647)), 0, (0)), 100000000, 0, -35), (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Constraints"), "t"), 0, (0)), 100000000, 0, -34), 0), 100000000, 0, -33), 0), 100000000, 0, -32), 0, (("kernel/uGraph.mli", 102, 3613, 3613), ("kernel/uGraph.mli", 102, 3613, 3673), 0), 0, Tag1 ("UGraph", 34)), 0); (("domain", 677), ((Tag1 (0, (Tag3 ((("t", 647)), 0, (0)), 100000000, 0, -31), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Univ")), "Level"), "Set"), "t"), 0, (0)), 100000000, 0, -30), 0), 100000000, 0, -29), 0, (("kernel/uGraph.mli", 104, 3675, 3675), ("kernel/uGraph.mli", 104, 3675, 3704), 0), 0, Tag1 ("UGraph", 35)), 0); (("check_subtype", 678), ((Tag3 ((("check_function", 650)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "AbstractContext"), "t"), 0, (0)), 100000000, 0, -28)], (0)), 100000000, 0, -27), 0, (("kernel/uGraph.mli", 107, 3729, 3729), ("kernel/uGraph.mli", 107, 3729, 3781), 0), 0, Tag1 ("UGraph", 36)), 0); Tag1 (("node", 679), (0, 0, Tag1 ([(("Alias", 592), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Level"), "t"), 0, (0)), 100000000, 0, -24)]), 0, (("kernel/uGraph.mli", 114, 3905, 3905), ("kernel/uGraph.mli", 114, 3905, 3923), 0), 0, Tag1 ("UGraph", 38)); (("Node", 593), ([(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Univ")), "Level"), "Map"), "t"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -26)], (0)), 100000000, 0, -25)]), 0, (("kernel/uGraph.mli", 115, 3924, 3924), ("kernel/uGraph.mli", 115, 3924, 3950), 0), 0, Tag1 ("UGraph", 39))], 0), 1, 0, 0, 0, 0, 0, (("kernel/uGraph.mli", 113, 3893, 3893), ("kernel/uGraph.mli", 115, 3924, 3950), 0), 0, 0, 0, Tag1 ("UGraph", 37)), 1, 0); (("repr", 680), ((Tag1 (0, (Tag3 ((("t", 647)), 0, (0)), 100000000, 0, -23), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Univ")), "Level"), "Map"), "t"), [(Tag3 ((("node", 679)), 0, (0)), 100000000, 0, -22)], (0)), 100000000, 0, -21), 0), 100000000, 0, -20), 0, (("kernel/uGraph.mli", 117, 4003, 4003), ("kernel/uGraph.mli", 117, 4003, 4035), 0), 0, Tag1 ("UGraph", 40)), 0); (("pr_universes", 681), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Level"), "t"), 0, (0)), 100000000, 0, -19), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -18), 0), 100000000, 0, -17), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Univ")), "Level"), "Map"), "t"), [(Tag3 ((("node", 679)), 0, (0)), 100000000, 0, -16)], (0)), 100000000, 0, -15), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -14), 0), 100000000, 0, -13), 0), 100000000, 0, -12), 0, (("kernel/uGraph.mli", 121, 4080, 4080), ("kernel/uGraph.mli", 121, 4080, 4144), 0), 0, Tag1 ("UGraph", 41)), 0); (("explain_universe_inconsistency", 682), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Level"), "t"), 0, (0)), 100000000, 0, -11), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -10), 0), 100000000, 0, -9), (Tag1 (0, (Tag3 ((("univ_inconsistency", 659)), 0, (0)), 100000000, 0, -8), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("kernel/uGraph.mli", 123, 4146, 4146), ("kernel/uGraph.mli", 124, 4204, 4232), 0), 0, Tag1 ("UGraph", 42)), 0); (("check_universes_invariants", 683), ((Tag1 (0, (Tag3 ((("t", 647)), 0, (0)), 100000000, 0, -4), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("kernel/uGraph.mli", 127, 4255, 4255), ("kernel/uGraph.mli", 127, 4255, 4297), 0), 0, Tag1 ("UGraph", 43)), 0)], "UGraph", [("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])
val check_universes_invariants : t -> unit

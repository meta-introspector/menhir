val reset_meta_count : unit -> unit
val new_meta : 'a -> Extraction_plugin.Miniml.ml_type
val type_subst_list :
  Extraction_plugin.Miniml.ml_type list ->
  Extraction_plugin.Miniml.ml_type -> Extraction_plugin.Miniml.ml_type
val type_subst_vect :
  Extraction_plugin.Miniml.ml_type array ->
  Extraction_plugin.Miniml.ml_type -> Extraction_plugin.Miniml.ml_type
val instantiation :
  Extraction_plugin.Miniml.ml_schema -> Extraction_plugin.Miniml.ml_type
val needs_magic :
  Extraction_plugin.Miniml.ml_type * Extraction_plugin.Miniml.ml_type -> bool
val put_magic_if :
  bool -> Extraction_plugin.Miniml.ml_ast -> Extraction_plugin.Miniml.ml_ast
val put_magic :
  Extraction_plugin.Miniml.ml_type * Extraction_plugin.Miniml.ml_type ->
  Extraction_plugin.Miniml.ml_ast -> Extraction_plugin.Miniml.ml_ast
val generalizable : Extraction_plugin.Miniml.ml_ast -> bool
module Mlenv :
  sig
    type t
    val empty : t
    val get : t -> int -> Extraction_plugin.Miniml.ml_type
    val push_gen : t -> Extraction_plugin.Miniml.ml_type -> t
    val push_type : t -> Extraction_plugin.Miniml.ml_type -> t
    val push_std_type : t -> Extraction_plugin.Miniml.ml_type -> t
  end
val type_mem_kn : Names.MutInd.t -> Extraction_plugin.Miniml.ml_type -> bool
val type_maxvar : Extraction_plugin.Miniml.ml_type -> int
val type_decomp :
  Extraction_plugin.Miniml.ml_type ->
  Extraction_plugin.Miniml.ml_type list * Extraction_plugin.Miniml.ml_type
val type_recomp :
  Extraction_plugin.Miniml.ml_type list * Extraction_plugin.Miniml.ml_type ->
  Extraction_plugin.Miniml.ml_type
val var2var' :
  Extraction_plugin.Miniml.ml_type -> Extraction_plugin.Miniml.ml_type
type abbrev_map = Names.GlobRef.t -> Extraction_plugin.Miniml.ml_type option
val type_expand :
  abbrev_map ->
  Extraction_plugin.Miniml.ml_type -> Extraction_plugin.Miniml.ml_type
val type_simpl :
  Extraction_plugin.Miniml.ml_type -> Extraction_plugin.Miniml.ml_type
val type_to_sign :
  abbrev_map ->
  Extraction_plugin.Miniml.ml_type -> Extraction_plugin.Miniml.sign
val type_to_signature :
  abbrev_map ->
  Extraction_plugin.Miniml.ml_type -> Extraction_plugin.Miniml.signature
val type_expunge :
  abbrev_map ->
  Extraction_plugin.Miniml.ml_type -> Extraction_plugin.Miniml.ml_type
val type_expunge_from_sign :
  abbrev_map ->
  Extraction_plugin.Miniml.signature ->
  Extraction_plugin.Miniml.ml_type -> Extraction_plugin.Miniml.ml_type
val eq_ml_type :
  Extraction_plugin.Miniml.ml_type ->
  Extraction_plugin.Miniml.ml_type -> bool
val isTdummy : Extraction_plugin.Miniml.ml_type -> bool
val isMLdummy : Extraction_plugin.Miniml.ml_ast -> bool
val isKill : Extraction_plugin.Miniml.sign -> bool
val case_expunge :
  Extraction_plugin.Miniml.signature ->
  Extraction_plugin.Miniml.ml_ast ->
  Extraction_plugin.Miniml.ml_ident list * Extraction_plugin.Miniml.ml_ast
val term_expunge :
  Extraction_plugin.Miniml.signature ->
  Extraction_plugin.Miniml.ml_ident list * Extraction_plugin.Miniml.ml_ast ->
  Extraction_plugin.Miniml.ml_ast
val anonymous_name : Names.Id.t
val dummy_name : Names.Id.t
val id_of_name : Names.Name.t -> Names.Id.t
val id_of_mlid : Extraction_plugin.Miniml.ml_ident -> Names.Id.t
val tmp_id :
  Extraction_plugin.Miniml.ml_ident -> Extraction_plugin.Miniml.ml_ident
val collect_lams :
  Extraction_plugin.Miniml.ml_ast ->
  Extraction_plugin.Miniml.ml_ident list * Extraction_plugin.Miniml.ml_ast
val collect_n_lams :
  int ->
  Extraction_plugin.Miniml.ml_ast ->
  Extraction_plugin.Miniml.ml_ident list * Extraction_plugin.Miniml.ml_ast
val remove_n_lams :
  int -> Extraction_plugin.Miniml.ml_ast -> Extraction_plugin.Miniml.ml_ast
val nb_lams : Extraction_plugin.Miniml.ml_ast -> int
val named_lams :
  Extraction_plugin.Miniml.ml_ident list ->
  Extraction_plugin.Miniml.ml_ast -> Extraction_plugin.Miniml.ml_ast
val dummy_lams :
  Extraction_plugin.Miniml.ml_ast -> int -> Extraction_plugin.Miniml.ml_ast
val anonym_or_dummy_lams :
  Extraction_plugin.Miniml.ml_ast ->
  Extraction_plugin.Miniml.signature -> Extraction_plugin.Miniml.ml_ast
val eta_args_sign :
  int ->
  Extraction_plugin.Miniml.signature -> Extraction_plugin.Miniml.ml_ast list
val mlapp :
  Extraction_plugin.Miniml.ml_ast ->
  Extraction_plugin.Miniml.ml_ast list -> Extraction_plugin.Miniml.ml_ast
val ast_map :
  (Extraction_plugin.Miniml.ml_ast -> Extraction_plugin.Miniml.ml_ast) ->
  Extraction_plugin.Miniml.ml_ast -> Extraction_plugin.Miniml.ml_ast
val ast_map_lift :
  (int -> Extraction_plugin.Miniml.ml_ast -> Extraction_plugin.Miniml.ml_ast) ->
  int -> Extraction_plugin.Miniml.ml_ast -> Extraction_plugin.Miniml.ml_ast
val ast_iter :
  (Extraction_plugin.Miniml.ml_ast -> unit) ->
  Extraction_plugin.Miniml.ml_ast -> unit
val ast_occurs : int -> Extraction_plugin.Miniml.ml_ast -> bool
val ast_occurs_itvl : int -> int -> Extraction_plugin.Miniml.ml_ast -> bool
val ast_lift :
  int -> Extraction_plugin.Miniml.ml_ast -> Extraction_plugin.Miniml.ml_ast
val ast_pop :
  Extraction_plugin.Miniml.ml_ast -> Extraction_plugin.Miniml.ml_ast
val ast_subst :
  Extraction_plugin.Miniml.ml_ast ->
  Extraction_plugin.Miniml.ml_ast -> Extraction_plugin.Miniml.ml_ast
val ast_glob_subst :
  Extraction_plugin.Miniml.ml_ast Extraction_plugin.Table.Refmap'.t ->
  Extraction_plugin.Miniml.ml_ast -> Extraction_plugin.Miniml.ml_ast
val dump_unused_vars :
  Extraction_plugin.Miniml.ml_ast -> Extraction_plugin.Miniml.ml_ast
val normalize :
  Extraction_plugin.Miniml.ml_ast -> Extraction_plugin.Miniml.ml_ast
val optimize_fix :
  Extraction_plugin.Miniml.ml_ast -> Extraction_plugin.Miniml.ml_ast
val inline : Names.GlobRef.t -> Extraction_plugin.Miniml.ml_ast -> bool
val is_basic_pattern : Extraction_plugin.Miniml.ml_pattern -> bool
val has_deep_pattern : Extraction_plugin.Miniml.ml_branch array -> bool
val is_regular_match : Extraction_plugin.Miniml.ml_branch array -> bool
exception Impossible
type sign_kind = EmptySig | NonLogicalSig | SafeLogicalSig | UnsafeLogicalSig
val sign_kind : Extraction_plugin.Miniml.signature -> sign_kind
val sign_no_final_keeps :
  ("DEBUG:rule", [(("reset_meta_count", 803), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -277), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -276), 0), 100000000, 0, -275), 0, (("plugins/extraction/mlutil.mli", 17, 762, 762), ("plugins/extraction/mlutil.mli", 17, 762, 797), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 0)), 0); (("new_meta", 804), ((Tag1 (0, ((("a")), 100000000, 0, -274), (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_type"), 0, (0)), 100000000, 0, -273), 0), 100000000, 0, -272), 0, (("plugins/extraction/mlutil.mli", 18, 798, 798), ("plugins/extraction/mlutil.mli", 18, 798, 826), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 1)), 0); (("type_subst_list", 805), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_type"), 0, (0)), 100000000, 0, -271)], (0)), 100000000, 0, -270), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_type"), 0, (0)), 100000000, 0, -269), (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_type"), 0, (0)), 100000000, 0, -268), 0), 100000000, 0, -267), 0), 100000000, 0, -266), 0, (("plugins/extraction/mlutil.mli", 20, 828, 828), ("plugins/extraction/mlutil.mli", 20, 828, 884), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 2)), 0); (("type_subst_vect", 806), ((Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_type"), 0, (0)), 100000000, 0, -265)], (0)), 100000000, 0, -264), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_type"), 0, (0)), 100000000, 0, -263), (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_type"), 0, (0)), 100000000, 0, -262), 0), 100000000, 0, -261), 0), 100000000, 0, -260), 0, (("plugins/extraction/mlutil.mli", 21, 885, 885), ("plugins/extraction/mlutil.mli", 21, 885, 942), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 3)), 0); (("instantiation", 807), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_schema"), 0, (0)), 100000000, 0, -259), (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_type"), 0, (0)), 100000000, 0, -258), 0), 100000000, 0, -257), 0, (("plugins/extraction/mlutil.mli", 23, 944, 944), ("plugins/extraction/mlutil.mli", 23, 944, 984), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 4)), 0); (("needs_magic", 808), ((Tag1 (0, (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_type"), 0, (0)), 100000000, 0, -255); (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_type"), 0, (0)), 100000000, 0, -256)]), 100000000, 0, -254), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -253), 0), 100000000, 0, -252), 0, (("plugins/extraction/mlutil.mli", 25, 986, 986), ("plugins/extraction/mlutil.mli", 25, 986, 1029), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 5)), 0); (("put_magic_if", 809), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -251), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -250), (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -249), 0), 100000000, 0, -248), 0), 100000000, 0, -247), 0, (("plugins/extraction/mlutil.mli", 26, 1030, 1030), ("plugins/extraction/mlutil.mli", 26, 1030, 1073), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 6)), 0); (("put_magic", 810), ((Tag1 (0, (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_type"), 0, (0)), 100000000, 0, -245); (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_type"), 0, (0)), 100000000, 0, -246)]), 100000000, 0, -244), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -243), (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -242), 0), 100000000, 0, -241), 0), 100000000, 0, -240), 0, (("plugins/extraction/mlutil.mli", 27, 1074, 1074), ("plugins/extraction/mlutil.mli", 27, 1074, 1127), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 7)), 0); (("generalizable", 811), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -239), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -238), 0), 100000000, 0, -237), 0, (("plugins/extraction/mlutil.mli", 29, 1129, 1129), ("plugins/extraction/mlutil.mli", 29, 1129, 1163), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 8)), 0); Tag3 (("Mlenv", 812), 0, (Tag1 ([Tag1 (("t", 865), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("plugins/extraction/mlutil.mli", 34, 1213, 1215), ("plugins/extraction/mlutil.mli", 34, 1213, 1221), 0), 0, 0, 0, Tag1 ("Extraction_plugin__Mlutil", 9)), 1, 0); (("empty", 866), ((Tag3 ((("t", 865)), 0, (0)), 100000000, 0, -298), 0, (("plugins/extraction/mlutil.mli", 35, 1222, 1224), ("plugins/extraction/mlutil.mli", 35, 1222, 1237), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 10)), 0); (("get", 867), ((Tag1 (0, (Tag3 ((("t", 865)), 0, (0)), 100000000, 0, -297), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -296), (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_type"), 0, (0)), 100000000, 0, -295), 0), 100000000, 0, -294), 0), 100000000, 0, -293), 0, (("plugins/extraction/mlutil.mli", 38, 1309, 1311), ("plugins/extraction/mlutil.mli", 38, 1309, 1340), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 11)), 0); (("push_gen", 868), ((Tag1 (0, (Tag3 ((("t", 865)), 0, (0)), 100000000, 0, -292), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_type"), 0, (0)), 100000000, 0, -291), (Tag3 ((("t", 865)), 0, (0)), 100000000, 0, -290), 0), 100000000, 0, -289), 0), 100000000, 0, -288), 0, (("plugins/extraction/mlutil.mli", 41, 1412, 1414), ("plugins/extraction/mlutil.mli", 41, 1412, 1446), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 12)), 0); (("push_type", 869), ((Tag1 (0, (Tag3 ((("t", 865)), 0, (0)), 100000000, 0, -287), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_type"), 0, (0)), 100000000, 0, -286), (Tag3 ((("t", 865)), 0, (0)), 100000000, 0, -285), 0), 100000000, 0, -284), 0), 100000000, 0, -283), 0, (("plugins/extraction/mlutil.mli", 44, 1485, 1487), ("plugins/extraction/mlutil.mli", 44, 1485, 1520), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 13)), 0); (("push_std_type", 870), ((Tag1 (0, (Tag3 ((("t", 865)), 0, (0)), 100000000, 0, -282), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_type"), 0, (0)), 100000000, 0, -281), (Tag3 ((("t", 865)), 0, (0)), 100000000, 0, -280), 0), 100000000, 0, -279), 0), 100000000, 0, -278), 0, (("plugins/extraction/mlutil.mli", 47, 1571, 1573), ("plugins/extraction/mlutil.mli", 47, 1571, 1610), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 14)), 0)]), 0, (("plugins/extraction/mlutil.mli", 33, 1194, 1194), ("plugins/extraction/mlutil.mli", 48, 1611, 1614), 0), Tag1 ("Extraction_plugin__Mlutil", 15)), 0, 0); (("type_mem_kn", 813), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "MutInd"), "t"), 0, (0)), 100000000, 0, -236), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_type"), 0, (0)), 100000000, 0, -235), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -234), 0), 100000000, 0, -233), 0), 100000000, 0, -232), 0, (("plugins/extraction/mlutil.mli", 52, 1669, 1669), ("plugins/extraction/mlutil.mli", 52, 1669, 1714), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 16)), 0); (("type_maxvar", 814), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_type"), 0, (0)), 100000000, 0, -231), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -230), 0), 100000000, 0, -229), 0, (("plugins/extraction/mlutil.mli", 54, 1716, 1716), ("plugins/extraction/mlutil.mli", 54, 1716, 1748), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 17)), 0); (("type_decomp", 815), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_type"), 0, (0)), 100000000, 0, -228), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_type"), 0, (0)), 100000000, 0, -226)], (0)), 100000000, 0, -225); (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_type"), 0, (0)), 100000000, 0, -227)]), 100000000, 0, -224), 0), 100000000, 0, -223), 0, (("plugins/extraction/mlutil.mli", 56, 1750, 1750), ("plugins/extraction/mlutil.mli", 56, 1750, 1801), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 18)), 0); (("type_recomp", 816), ((Tag1 (0, (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_type"), 0, (0)), 100000000, 0, -221)], (0)), 100000000, 0, -220); (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_type"), 0, (0)), 100000000, 0, -222)]), 100000000, 0, -219), (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_type"), 0, (0)), 100000000, 0, -218), 0), 100000000, 0, -217), 0, (("plugins/extraction/mlutil.mli", 57, 1802, 1802), ("plugins/extraction/mlutil.mli", 57, 1802, 1853), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 19)), 0); (("var2var'", 817), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_type"), 0, (0)), 100000000, 0, -216), (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_type"), 0, (0)), 100000000, 0, -215), 0), 100000000, 0, -214), 0, (("plugins/extraction/mlutil.mli", 59, 1855, 1855), ("plugins/extraction/mlutil.mli", 59, 1855, 1888), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 20)), 0); Tag1 (("abbrev_map", 818), (0, 0, 0, 1, ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -213), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_type"), 0, (0)), 100000000, 0, -212)], (0)), 100000000, 0, -211), 0), 100000000, 0, -210)), 0, 0, 0, 0, (("plugins/extraction/mlutil.mli", 61, 1890, 1890), ("plugins/extraction/mlutil.mli", 61, 1890, 1935), 0), 0, 0, 0, Tag1 ("Extraction_plugin__Mlutil", 21)), 1, 0); (("type_expand", 819), ((Tag1 (0, (Tag3 ((("abbrev_map", 818)), 0, (0)), 100000000, 0, -209), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_type"), 0, (0)), 100000000, 0, -208), (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_type"), 0, (0)), 100000000, 0, -207), 0), 100000000, 0, -206), 0), 100000000, 0, -205), 0, (("plugins/extraction/mlutil.mli", 63, 1937, 1937), ("plugins/extraction/mlutil.mli", 63, 1937, 1987), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 22)), 0); (("type_simpl", 820), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_type"), 0, (0)), 100000000, 0, -204), (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_type"), 0, (0)), 100000000, 0, -203), 0), 100000000, 0, -202), 0, (("plugins/extraction/mlutil.mli", 64, 1988, 1988), ("plugins/extraction/mlutil.mli", 64, 1988, 2023), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 23)), 0); (("type_to_sign", 821), ((Tag1 (0, (Tag3 ((("abbrev_map", 818)), 0, (0)), 100000000, 0, -201), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_type"), 0, (0)), 100000000, 0, -200), (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "sign"), 0, (0)), 100000000, 0, -199), 0), 100000000, 0, -198), 0), 100000000, 0, -197), 0, (("plugins/extraction/mlutil.mli", 65, 2024, 2024), ("plugins/extraction/mlutil.mli", 65, 2024, 2072), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 24)), 0); (("type_to_signature", 822), ((Tag1 (0, (Tag3 ((("abbrev_map", 818)), 0, (0)), 100000000, 0, -196), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_type"), 0, (0)), 100000000, 0, -195), (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "signature"), 0, (0)), 100000000, 0, -194), 0), 100000000, 0, -193), 0), 100000000, 0, -192), 0, (("plugins/extraction/mlutil.mli", 66, 2073, 2073), ("plugins/extraction/mlutil.mli", 66, 2073, 2131), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 25)), 0); (("type_expunge", 823), ((Tag1 (0, (Tag3 ((("abbrev_map", 818)), 0, (0)), 100000000, 0, -191), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_type"), 0, (0)), 100000000, 0, -190), (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_type"), 0, (0)), 100000000, 0, -189), 0), 100000000, 0, -188), 0), 100000000, 0, -187), 0, (("plugins/extraction/mlutil.mli", 67, 2132, 2132), ("plugins/extraction/mlutil.mli", 67, 2132, 2183), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 26)), 0); (("type_expunge_from_sign", 824), ((Tag1 (0, (Tag3 ((("abbrev_map", 818)), 0, (0)), 100000000, 0, -186), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "signature"), 0, (0)), 100000000, 0, -185), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_type"), 0, (0)), 100000000, 0, -184), (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_type"), 0, (0)), 100000000, 0, -183), 0), 100000000, 0, -182), 0), 100000000, 0, -181), 0), 100000000, 0, -180), 0, (("plugins/extraction/mlutil.mli", 68, 2184, 2184), ("plugins/extraction/mlutil.mli", 68, 2184, 2258), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 27)), 0); (("eq_ml_type", 825), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_type"), 0, (0)), 100000000, 0, -179), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_type"), 0, (0)), 100000000, 0, -178), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -177), 0), 100000000, 0, -176), 0), 100000000, 0, -175), 0, (("plugins/extraction/mlutil.mli", 70, 2260, 2260), ("plugins/extraction/mlutil.mli", 70, 2260, 2303), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 28)), 0); (("isTdummy", 826), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_type"), 0, (0)), 100000000, 0, -174), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -173), 0), 100000000, 0, -172), 0, (("plugins/extraction/mlutil.mli", 71, 2304, 2304), ("plugins/extraction/mlutil.mli", 71, 2304, 2334), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 29)), 0); (("isMLdummy", 827), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -171), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -170), 0), 100000000, 0, -169), 0, (("plugins/extraction/mlutil.mli", 72, 2335, 2335), ("plugins/extraction/mlutil.mli", 72, 2335, 2365), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 30)), 0); (("isKill", 828), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "sign"), 0, (0)), 100000000, 0, -168), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -167), 0), 100000000, 0, -166), 0, (("plugins/extraction/mlutil.mli", 73, 2366, 2366), ("plugins/extraction/mlutil.mli", 73, 2366, 2391), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 31)), 0); (("case_expunge", 829), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "signature"), 0, (0)), 100000000, 0, -165), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -164), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ident"), 0, (0)), 100000000, 0, -162)], (0)), 100000000, 0, -161); (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -163)]), 100000000, 0, -160), 0), 100000000, 0, -159), 0), 100000000, 0, -158), 0, (("plugins/extraction/mlutil.mli", 75, 2393, 2393), ("plugins/extraction/mlutil.mli", 75, 2393, 2457), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 32)), 0); (("term_expunge", 830), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "signature"), 0, (0)), 100000000, 0, -157), (Tag1 (0, (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ident"), 0, (0)), 100000000, 0, -155)], (0)), 100000000, 0, -154); (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -156)]), 100000000, 0, -153), (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -152), 0), 100000000, 0, -151), 0), 100000000, 0, -150), 0, (("plugins/extraction/mlutil.mli", 76, 2458, 2458), ("plugins/extraction/mlutil.mli", 76, 2458, 2522), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 33)), 0); (("anonymous_name", 831), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -149), 0, (("plugins/extraction/mlutil.mli", 82, 2651, 2651), ("plugins/extraction/mlutil.mli", 82, 2651, 2676), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 34)), 0); (("dummy_name", 832), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -148), 0, (("plugins/extraction/mlutil.mli", 83, 2677, 2677), ("plugins/extraction/mlutil.mli", 83, 2677, 2698), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 35)), 0); (("id_of_name", 833), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -147), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -146), 0), 100000000, 0, -145), 0, (("plugins/extraction/mlutil.mli", 84, 2699, 2699), ("plugins/extraction/mlutil.mli", 84, 2699, 2730), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 36)), 0); (("id_of_mlid", 834), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ident"), 0, (0)), 100000000, 0, -144), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -143), 0), 100000000, 0, -142), 0, (("plugins/extraction/mlutil.mli", 85, 2731, 2731), ("plugins/extraction/mlutil.mli", 85, 2731, 2764), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 37)), 0); (("tmp_id", 835), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ident"), 0, (0)), 100000000, 0, -141), (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ident"), 0, (0)), 100000000, 0, -140), 0), 100000000, 0, -139), 0, (("plugins/extraction/mlutil.mli", 86, 2765, 2765), ("plugins/extraction/mlutil.mli", 86, 2765, 2798), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 38)), 0); (("collect_lams", 836), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -138), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ident"), 0, (0)), 100000000, 0, -136)], (0)), 100000000, 0, -135); (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -137)]), 100000000, 0, -134), 0), 100000000, 0, -133), 0, (("plugins/extraction/mlutil.mli", 91, 2908, 2908), ("plugins/extraction/mlutil.mli", 91, 2908, 2959), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 39)), 0); (("collect_n_lams", 837), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -132), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -131), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ident"), 0, (0)), 100000000, 0, -129)], (0)), 100000000, 0, -128); (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -130)]), 100000000, 0, -127), 0), 100000000, 0, -126), 0), 100000000, 0, -125), 0, (("plugins/extraction/mlutil.mli", 92, 2960, 2960), ("plugins/extraction/mlutil.mli", 92, 2960, 3020), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 40)), 0); (("remove_n_lams", 838), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -124), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -123), (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -122), 0), 100000000, 0, -121), 0), 100000000, 0, -120), 0, (("plugins/extraction/mlutil.mli", 93, 3021, 3021), ("plugins/extraction/mlutil.mli", 93, 3021, 3064), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 41)), 0); (("nb_lams", 839), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -119), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -118), 0), 100000000, 0, -117), 0, (("plugins/extraction/mlutil.mli", 94, 3065, 3065), ("plugins/extraction/mlutil.mli", 94, 3065, 3092), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 42)), 0); (("named_lams", 840), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ident"), 0, (0)), 100000000, 0, -116)], (0)), 100000000, 0, -115), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -114), (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -113), 0), 100000000, 0, -112), 0), 100000000, 0, -111), 0, (("plugins/extraction/mlutil.mli", 95, 3093, 3093), ("plugins/extraction/mlutil.mli", 95, 3093, 3143), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 43)), 0); (("dummy_lams", 841), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -110), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -109), (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -108), 0), 100000000, 0, -107), 0), 100000000, 0, -106), 0, (("plugins/extraction/mlutil.mli", 96, 3144, 3144), ("plugins/extraction/mlutil.mli", 96, 3144, 3184), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 44)), 0); (("anonym_or_dummy_lams", 842), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -105), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "signature"), 0, (0)), 100000000, 0, -104), (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -103), 0), 100000000, 0, -102), 0), 100000000, 0, -101), 0, (("plugins/extraction/mlutil.mli", 97, 3185, 3185), ("plugins/extraction/mlutil.mli", 97, 3185, 3241), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 45)), 0); (("eta_args_sign", 843), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -100), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "signature"), 0, (0)), 100000000, 0, -99), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -98)], (0)), 100000000, 0, -97), 0), 100000000, 0, -96), 0), 100000000, 0, -95), 0, (("plugins/extraction/mlutil.mli", 99, 3243, 3243), ("plugins/extraction/mlutil.mli", 99, 3243, 3294), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 46)), 0); (("mlapp", 844), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -94), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -93)], (0)), 100000000, 0, -92), (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -91), 0), 100000000, 0, -90), 0), 100000000, 0, -89), 0, (("plugins/extraction/mlutil.mli", 103, 3337, 3337), ("plugins/extraction/mlutil.mli", 103, 3337, 3380), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 47)), 0); (("ast_map", 845), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -88), (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -87), 0), 100000000, 0, -86), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -85), (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -84), 0), 100000000, 0, -83), 0), 100000000, 0, -82), 0, (("plugins/extraction/mlutil.mli", 104, 3381, 3381), ("plugins/extraction/mlutil.mli", 104, 3381, 3433), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 48)), 0); (("ast_map_lift", 846), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -81), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -80), (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -79), 0), 100000000, 0, -78), 0), 100000000, 0, -77), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -76), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -75), (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -74), 0), 100000000, 0, -73), 0), 100000000, 0, -72), 0), 100000000, 0, -71), 0, (("plugins/extraction/mlutil.mli", 105, 3434, 3434), ("plugins/extraction/mlutil.mli", 105, 3434, 3505), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 49)), 0); (("ast_iter", 847), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -70), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -69), 0), 100000000, 0, -68), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -67), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -66), 0), 100000000, 0, -65), 0), 100000000, 0, -64), 0, (("plugins/extraction/mlutil.mli", 106, 3506, 3506), ("plugins/extraction/mlutil.mli", 106, 3506, 3555), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 50)), 0); (("ast_occurs", 848), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -63), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -62), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -61), 0), 100000000, 0, -60), 0), 100000000, 0, -59), 0, (("plugins/extraction/mlutil.mli", 107, 3556, 3556), ("plugins/extraction/mlutil.mli", 107, 3556, 3594), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 51)), 0); (("ast_occurs_itvl", 849), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -58), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -57), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -56), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -55), 0), 100000000, 0, -54), 0), 100000000, 0, -53), 0), 100000000, 0, -52), 0, (("plugins/extraction/mlutil.mli", 108, 3595, 3595), ("plugins/extraction/mlutil.mli", 108, 3595, 3645), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 52)), 0); (("ast_lift", 850), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -51), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -50), (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -49), 0), 100000000, 0, -48), 0), 100000000, 0, -47), 0, (("plugins/extraction/mlutil.mli", 109, 3646, 3646), ("plugins/extraction/mlutil.mli", 109, 3646, 3684), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 53)), 0); (("ast_pop", 851), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -46), (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -45), 0), 100000000, 0, -44), 0, (("plugins/extraction/mlutil.mli", 110, 3685, 3685), ("plugins/extraction/mlutil.mli", 110, 3685, 3715), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 54)), 0); (("ast_subst", 852), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -43), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -42), (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -41), 0), 100000000, 0, -40), 0), 100000000, 0, -39), 0, (("plugins/extraction/mlutil.mli", 111, 3716, 3716), ("plugins/extraction/mlutil.mli", 111, 3716, 3758), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 55)), 0); (("ast_glob_subst", 853), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Table"), "Refmap'"), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -38)], (0)), 100000000, 0, -37), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -36), (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -35), 0), 100000000, 0, -34), 0), 100000000, 0, -33), 0, (("plugins/extraction/mlutil.mli", 113, 3760, 3760), ("plugins/extraction/mlutil.mli", 113, 3760, 3817), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 56)), 0); (("dump_unused_vars", 854), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -32), (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -31), 0), 100000000, 0, -30), 0, (("plugins/extraction/mlutil.mli", 115, 3819, 3819), ("plugins/extraction/mlutil.mli", 115, 3819, 3858), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 57)), 0); (("normalize", 855), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -29), (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -28), 0), 100000000, 0, -27), 0, (("plugins/extraction/mlutil.mli", 117, 3860, 3860), ("plugins/extraction/mlutil.mli", 117, 3860, 3892), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 58)), 0); (("optimize_fix", 856), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -26), (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -25), 0), 100000000, 0, -24), 0, (("plugins/extraction/mlutil.mli", 118, 3893, 3893), ("plugins/extraction/mlutil.mli", 118, 3893, 3928), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 59)), 0); (("inline", 857), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -23), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ast"), 0, (0)), 100000000, 0, -22), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -21), 0), 100000000, 0, -20), 0), 100000000, 0, -19), 0, (("plugins/extraction/mlutil.mli", 119, 3929, 3929), ("plugins/extraction/mlutil.mli", 119, 3929, 3969), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 60)), 0); (("is_basic_pattern", 858), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_pattern"), 0, (0)), 100000000, 0, -18), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("plugins/extraction/mlutil.mli", 121, 3971, 3971), ("plugins/extraction/mlutil.mli", 121, 3971, 4012), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 61)), 0); (("has_deep_pattern", 859), ((Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_branch"), 0, (0)), 100000000, 0, -15)], (0)), 100000000, 0, -14), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -13), 0), 100000000, 0, -12), 0, (("plugins/extraction/mlutil.mli", 122, 4013, 4013), ("plugins/extraction/mlutil.mli", 122, 4013, 4059), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 62)), 0); (("is_regular_match", 860), ((Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_branch"), 0, (0)), 100000000, 0, -11)], (0)), 100000000, 0, -10), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("plugins/extraction/mlutil.mli", 123, 4060, 4060), ("plugins/extraction/mlutil.mli", 123, 4060, 4106), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 63)), 0); Tag2 (("Impossible", 861), ((Tag3 ("exn", 7)), 0, (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Extraction_plugin__Mlutil", 64)), 2, 0); Tag1 (("sign_kind", 862), (0, 0, Tag1 ([(("EmptySig", 767), (0), 0, (("plugins/extraction/mlutil.mli", 130, 4183, 4185), ("plugins/extraction/mlutil.mli", 130, 4183, 4195), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 66)); (("NonLogicalSig", 768), (0), 0, (("plugins/extraction/mlutil.mli", 131, 4196, 4198), ("plugins/extraction/mlutil.mli", 131, 4196, 4213), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 67)); (("SafeLogicalSig", 769), (0), 0, (("plugins/extraction/mlutil.mli", 132, 4238, 4240), ("plugins/extraction/mlutil.mli", 132, 4238, 4256), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 68)); (("UnsafeLogicalSig", 770), (0), 0, (("plugins/extraction/mlutil.mli", 133, 4281, 4283), ("plugins/extraction/mlutil.mli", 133, 4281, 4301), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 69))], 0), 1, 0, 0, 0, 0, 0, (("plugins/extraction/mlutil.mli", 129, 4166, 4166), ("plugins/extraction/mlutil.mli", 133, 4281, 4301), 0), 0, 1, 0, Tag1 ("Extraction_plugin__Mlutil", 65)), 1, 0); (("sign_kind", 863), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "signature"), 0, (0)), 100000000, 0, -7), (Tag3 ((("sign_kind", 862)), 0, (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("plugins/extraction/mlutil.mli", 135, 4341, 4341), ("plugins/extraction/mlutil.mli", 135, 4341, 4379), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 70)), 0); (("sign_no_final_keeps", 864), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "signature"), 0, (0)), 100000000, 0, -4), (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "signature"), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("plugins/extraction/mlutil.mli", 137, 4381, 4381), ("plugins/extraction/mlutil.mli", 137, 4381, 4429), 0), 0, Tag1 ("Extraction_plugin__Mlutil", 71)), 0)], "Extraction_plugin__Mlutil", [("Extraction_plugin__Mlutil", ("\158\168=\252B\022\131\127\021\252\001\232=\028{\185")); ("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Vmemitcodes", ("wCd\138\165\158DD\241gH\236.\210\197\247")); ("Vmbytecodes", ("\025\021\151\137Dx\149W\236+[\143f\208\160\016")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("Range", ("\218\130\001r\237\r\144\171\164\021l\155\196\143sg")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Libnames", ("fp\0255\167\162\209\153\137\161\169#\246\193\003\198")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hook", ("\183\194\223\003\155\169',\187\240a;E\b\1396")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Extraction_plugin__Table", ("w\141\237\219\249\230m\252D)\247s1\205f\154")); ("Extraction_plugin__Miniml", ("\130\229}\135\140\233\017o.s\132\238\240\155\168f")); ("Extraction_plugin", ("o,\156$\195_6\238J\232\255\189\197B\169\n")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Environ", ("\171b\1579\229<\003Z\147IL\225X\254\182\204")); ("Declarations", ("\239\137n\019\030w$\182\166z^{\b\206\163\175")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CEphemeron", ("\204I\179-\206(x4\173\229\250\001PkH\151")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])
Extraction_plugin.Miniml.signature -> Extraction_plugin.Miniml.signature

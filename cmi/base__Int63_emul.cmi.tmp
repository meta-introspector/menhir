type t
val globalize : t -> t
val t_sexp_grammar : t Sexplib0.Sexp_grammar.t
val of_float : float -> t
val to_float : t -> float
val of_int_exn : int -> t
val to_int_exn : t -> int
val hash_fold_t : t Base__Ppx_hash_lib.hash_fold
val hash : t -> Base__Ppx_hash_lib.Std.Hash.hash_value
val t_of_sexp : Sexplib0__.Sexp.t -> t
val sexp_of_t : t -> Sexplib0__.Sexp.t
val of_string : string -> t
val to_string : t -> string
val ( >= ) : t -> t -> bool
val ( <= ) : t -> t -> bool
val ( = ) : t -> t -> bool
val ( > ) : t -> t -> bool
val ( < ) : t -> t -> bool
val ( <> ) : t -> t -> bool
val equal : t -> t -> bool
val compare : t -> t -> int
val min : t -> t -> t
val max : t -> t -> t
val ascending : t -> t -> int
val descending : t -> t -> int
val between : t -> low:t -> high:t -> bool
val clamp_exn : t -> min:t -> max:t -> t
val clamp : t -> min:t -> max:t -> t Base__.Or_error.t
type comparator_witness
val comparator : (t, comparator_witness) Base__Comparator.comparator
val pp : Base__.Formatter.t -> t -> unit
val hashable : t Base__.Hashable.t
val is_positive : t -> bool
val is_non_negative : t -> bool
val is_negative : t -> bool
val is_non_positive : t -> bool
val sign : t -> Base__Comparable_intf.Sign.t
val invariant : t Base__Invariant_intf.inv
module Hex :
  sig
    type nonrec t = t
    val t_of_sexp : Sexplib0__.Sexp.t -> t
    val sexp_of_t : t -> Sexplib0__.Sexp.t
    val t_sexp_grammar : t Sexplib0.Sexp_grammar.t
    val compare : t Base__Ppx_compare_lib.compare
    val hash_fold_t : t Base__Ppx_hash_lib.hash_fold
    val hash : t -> Base__Ppx_hash_lib.Std.Hash.hash_value
    val of_string : string -> t
    val to_string : t -> string
    val to_string_hum : ?delimiter:char -> t -> string
  end
val of_string_opt : string -> t option
val to_string_hum : ?delimiter:char -> t -> string
val zero : t
val one : t
val minus_one : t
val ( + ) : t -> t -> t
val ( - ) : t -> t -> t
val ( * ) : t -> t -> t
val ( ** ) : t -> t -> t
val neg : t -> t
val ( ~- ) : t -> t
val ( /% ) : t -> t -> t
val ( % ) : t -> t -> t
val ( / ) : t -> t -> t
val rem : t -> t -> t
val ( // ) : t -> t -> float
val ( land ) : t -> t -> t
val ( lor ) : t -> t -> t
val ( lxor ) : t -> t -> t
val lnot : t -> t
val ( lsl ) : t -> int -> t
val ( asr ) : t -> int -> t
val round :
  ?dir:[ `Down | `Nearest | `Up | `Zero ] -> t -> to_multiple_of:t -> t
val round_towards_zero : t -> to_multiple_of:t -> t
val round_down : t -> to_multiple_of:t -> t
val round_up : t -> to_multiple_of:t -> t
val round_nearest : t -> to_multiple_of:t -> t
val abs : t -> t
val succ : t -> t
val pred : t -> t
val pow : t -> t -> t
val bit_and : t -> t -> t
val bit_or : t -> t -> t
val bit_xor : t -> t -> t
val bit_not : t -> t
val popcount : t -> int
val shift_left : t -> int -> t
val shift_right : t -> int -> t
val decr : t Base__.Import.ref -> unit
val incr : t Base__.Import.ref -> unit
val of_int32_exn : int32 -> t
val to_int32_exn : t -> int32
val of_int64_exn : int64 -> t
val to_int64 : t -> int64
val of_nativeint_exn : nativeint -> t
val to_nativeint_exn : t -> nativeint
val of_float_unchecked : float -> t
val num_bits : int
val max_value : t
val min_value : t
val ( lsr ) : t -> int -> t
val shift_right_logical : t -> int -> t
val ceil_pow2 : t -> t
val floor_pow2 : t -> t
val ceil_log2 : t -> int
val floor_log2 : t -> int
val is_pow2 : t -> bool
val clz : t -> int
val ctz : t -> int
module O :
  sig
    val ( + ) : t -> t -> t
    val ( - ) : t -> t -> t
    val ( * ) : t -> t -> t
    val ( / ) : t -> t -> t
    val ( ~- ) : t -> t
    val ( ** ) : t -> t -> t
    val ( >= ) : t -> t -> bool
    val ( <= ) : t -> t -> bool
    val ( = ) : t -> t -> bool
    val ( > ) : t -> t -> bool
    val ( < ) : t -> t -> bool
    val ( <> ) : t -> t -> bool
    val abs : t -> t
    val neg : t -> t
    val zero : t
    val ( % ) : t -> t -> t
    val ( /% ) : t -> t -> t
    val ( // ) : t -> t -> float
    val ( land ) : t -> t -> t
    val ( lor ) : t -> t -> t
    val ( lxor ) : t -> t -> t
    val lnot : t -> t
    val ( lsl ) : t -> int -> t
    val ( asr ) : t -> int -> t
    val ( lsr ) : t -> int -> t
  end
val of_int : int -> t
val to_int : t -> int option
val to_int_trunc : t -> int
val of_int32 : int32 -> t
val to_int32 : t -> Base__.Int32.t option
val to_int32_trunc : t -> Base__.Int32.t
val of_int64 : Base__.Int64.t -> t option
val of_int64_trunc : Base__.Int64.t -> t
val of_nativeint : nativeint -> t option
val to_nativeint : t -> nativeint option
val of_nativeint_trunc : nativeint -> t
val to_nativeint_trunc : t -> nativeint
val bswap16 : t -> t
val bswap32 : t -> t
val bswap48 : t -> t
module W : sig val wrap_exn : int64 -> t val unwrap : t -> int64 end
module Repr :
  sig
    type ('underlying_type, 'intermediate_type) t =
        Int : (int, int) t
      | Int64 : (int64, t/2) t
  end("DEBUG:rule", [Tag1 (("t", 2351), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/int63_emul.mli", 6, 178, 178), ("src/int63_emul.mli", 6, 178, 214), 0), [(("deriving_inline", (("src/int63_emul.mli", 6, 178, 188), ("src/int63_emul.mli", 6, 178, 203), 0)), ([([(((("globalize"), (("src/int63_emul.mli", 6, 178, 204), ("src/int63_emul.mli", 6, 178, 213), 0))), (("src/int63_emul.mli", 6, 178, 204), ("src/int63_emul.mli", 6, 178, 213), 0), 0, 0)], (("src/int63_emul.mli", 6, 178, 204), ("src/int63_emul.mli", 6, 178, 213), 0))]), (("src/int63_emul.mli", 6, 178, 185), ("src/int63_emul.mli", 6, 178, 214), 0))], 0, 0, Tag1 ("Base__Int63_emul", 0)), 1, 0); (("globalize", 2352), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -426), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -425), 0), 100000000, 0, -424), 0, (("src/int63_emul.mli", 8, 216, 216), ("src/int63_emul.mli", 8, 216, 254), 0), 0, Tag1 ("Base__Int63_emul", 1)), 0); (("t_sexp_grammar", 2353), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -423)], (0)), 100000000, 0, -422), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 20)), 0); (("of_float", 2354), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -421), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -420), 0), 100000000, 0, -419), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Floatable", 1)), 0); (("to_float", 2355), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -418), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -417), 0), 100000000, 0, -416), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Floatable", 2)), 0); (("of_int_exn", 2356), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -415), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -414), 0), 100000000, 0, -413), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Intable", 1)), 0); (("to_int_exn", 2357), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -412), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -411), 0), 100000000, 0, -410), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Intable", 2)), 0); (("hash_fold_t", 2358), ((Tag3 (Tag1 ((Tag2 ("Base__Ppx_hash_lib")), "hash_fold"), [(Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -409)], (0)), 100000000, 0, -408), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Ppx_hash_lib", 4)), 0); (("hash", 2359), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -407), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__Ppx_hash_lib")), "Std"), "Hash"), "hash_value"), 0, (0)), 100000000, 0, -406), 0), 100000000, 0, -405), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Ppx_hash_lib", 5)), 0); (("t_of_sexp", 2360), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -404), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -403), 0), 100000000, 0, -402), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Sexplib0__Sexpable", 1)), 0); (("sexp_of_t", 2361), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -401), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -400), 0), 100000000, 0, -399), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Sexplib0__Sexpable", 2)), 0); (("of_string", 2362), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -398), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -397), 0), 100000000, 0, -396), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Stringable", 1)), 0); (("to_string", 2363), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -395), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -394), 0), 100000000, 0, -393), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Stringable", 2)), 0); ((">=", 2364), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -392), (Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -391), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -390), 0), 100000000, 0, -389), 0), 100000000, 0, -388), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Comparisons", 1)), 0); (("<=", 2365), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -387), (Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -386), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -385), 0), 100000000, 0, -384), 0), 100000000, 0, -383), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Comparisons", 2)), 0); (("=", 2366), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -382), (Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -381), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -380), 0), 100000000, 0, -379), 0), 100000000, 0, -378), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Comparisons", 3)), 0); ((">", 2367), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -377), (Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -376), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -375), 0), 100000000, 0, -374), 0), 100000000, 0, -373), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Comparisons", 4)), 0); (("<", 2368), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -372), (Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -371), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -370), 0), 100000000, 0, -369), 0), 100000000, 0, -368), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Comparisons", 5)), 0); (("<>", 2369), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -367), (Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -366), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -365), 0), 100000000, 0, -364), 0), 100000000, 0, -363), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Comparisons", 6)), 0); (("equal", 2370), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -362), (Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -361), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -360), 0), 100000000, 0, -359), 0), 100000000, 0, -358), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Comparisons", 8)), 0); (("compare", 2371), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -357), (Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -356), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -355), 0), 100000000, 0, -354), 0), 100000000, 0, -353), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Comparisons", 9)), 0); (("min", 2372), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -352), (Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -351), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -350), 0), 100000000, 0, -349), 0), 100000000, 0, -348), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Comparisons", 10)), 0); (("max", 2373), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -347), (Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -346), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -345), 0), 100000000, 0, -344), 0), 100000000, 0, -343), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Comparisons", 11)), 0); (("ascending", 2374), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -342), (Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -341), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -340), 0), 100000000, 0, -339), 0), 100000000, 0, -338), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Comparable_intf", 19)), 0); (("descending", 2375), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -337), (Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -336), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -335), 0), 100000000, 0, -334), 0), 100000000, 0, -333), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Comparable_intf", 20)), 0); (("between", 2376), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -332), (Tag1 (("low"), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -331), (Tag1 (("high"), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -330), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -329), 0), 100000000, 0, -328), 0), 100000000, 0, -327), 0), 100000000, 0, -326), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Comparable_intf", 21)), 0); (("clamp_exn", 2377), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -325), (Tag1 (("min"), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -324), (Tag1 (("max"), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -323), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -322), 0), 100000000, 0, -321), 0), 100000000, 0, -320), 0), 100000000, 0, -319), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Comparable_intf", 22)), 0); (("clamp", 2378), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -318), (Tag1 (("min"), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -317), (Tag1 (("max"), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -316), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -315)], (0)), 100000000, 0, -314), 0), 100000000, 0, -313), 0), 100000000, 0, -312), 0), 100000000, 0, -311), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Comparable_intf", 23)), 0); Tag1 (("comparator_witness", 2379), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, 0, 0, Tag1 ("Base__Comparator", 5)), 1, 0); (("comparator", 2380), ((Tag3 (Tag1 ((Tag2 ("Base__Comparator")), "comparator"), [(Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -309); (Tag3 ((("comparator_witness", 2379)), 0, (0)), 100000000, 0, -310)], (0)), 100000000, 0, -308), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Comparator", 6)), 0); (("pp", 2381), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Formatter"), "t"), 0, (0)), 100000000, 0, -307), (Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -306), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -305), 0), 100000000, 0, -304), 0), 100000000, 0, -303), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Pretty_printer", 2)), 0); (("hashable", 2382), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Hashable"), "t"), [(Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -302)], (0)), 100000000, 0, -301), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Identifiable_intf", 15)), 0); (("is_positive", 2383), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -300), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -299), 0), 100000000, 0, -298), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Comparable_intf", 13)), 0); (("is_non_negative", 2384), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -297), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -296), 0), 100000000, 0, -295), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Comparable_intf", 14)), 0); (("is_negative", 2385), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -294), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -293), 0), 100000000, 0, -292), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Comparable_intf", 15)), 0); (("is_non_positive", 2386), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -291), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -290), 0), 100000000, 0, -289), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Comparable_intf", 16)), 0); (("sign", 2387), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -288), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Comparable_intf")), "Sign"), "t"), 0, (0)), 100000000, 0, -287), 0), 100000000, 0, -286), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Comparable_intf", 17)), 0); (("invariant", 2388), ((Tag3 (Tag1 ((Tag2 ("Base__Invariant_intf")), "inv"), [(Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -285)], (0)), 100000000, 0, -284), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Invariant_intf", 3)), 0); Tag3 (("Hex", 2389), 0, (Tag1 ([Tag1 (("t", 2468), (0, 0, 0, 1, ((Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -454)), 0, 0, 0, 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), [(("deriving_inline", (("src/int_intf.ml", 44, 1730, 1755), ("src/int_intf.ml", 44, 1730, 1770), 0)), ([([(Tag8 ([(((("sexp"), (("src/int_intf.ml", 44, 1730, 1771), ("src/int_intf.ml", 44, 1730, 1775), 0))), (("src/int_intf.ml", 44, 1730, 1771), ("src/int_intf.ml", 44, 1730, 1775), 0), 0, 0); (((("sexp_grammar"), (("src/int_intf.ml", 44, 1730, 1777), ("src/int_intf.ml", 44, 1730, 1789), 0))), (("src/int_intf.ml", 44, 1730, 1777), ("src/int_intf.ml", 44, 1730, 1789), 0), 0, 0); (((("compare"), (("src/int_intf.ml", 44, 1730, 1791), ("src/int_intf.ml", 44, 1730, 1798), 0))), (("src/int_intf.ml", 44, 1730, 1791), ("src/int_intf.ml", 44, 1730, 1798), 0), 0, 0); (((("hash"), (("src/int_intf.ml", 44, 1730, 1800), ("src/int_intf.ml", 44, 1730, 1804), 0))), (("src/int_intf.ml", 44, 1730, 1800), ("src/int_intf.ml", 44, 1730, 1804), 0), 0, 0)]), (("src/int_intf.ml", 44, 1730, 1771), ("src/int_intf.ml", 44, 1730, 1804), 0), 0, 0)], (("src/int_intf.ml", 44, 1730, 1771), ("src/int_intf.ml", 44, 1730, 1804), 0))]), (("src/int_intf.ml", 44, 1730, 1752), ("src/int_intf.ml", 44, 1730, 1805), 0))], 0, 0, Tag1 ("Base__Int_intf", 8)), 0, 0); (("t_of_sexp", 2469), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -453), (Tag3 ((("t", 2468)), 0, (0)), 100000000, 0, -452), 0), 100000000, 0, -451), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Sexplib0__Sexpable", 1)), 0); (("sexp_of_t", 2470), ((Tag1 (0, (Tag3 ((("t", 2468)), 0, (0)), 100000000, 0, -450), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -449), 0), 100000000, 0, -448), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Sexplib0__Sexpable", 2)), 0); (("t_sexp_grammar", 2471), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("t", 2468)), 0, (0)), 100000000, 0, -447)], (0)), 100000000, 0, -446), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 11)), 0); (("compare", 2472), ((Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "compare"), [(Tag3 ((("t", 2468)), 0, (0)), 100000000, 0, -445)], (0)), 100000000, 0, -444), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Ppx_compare_lib", 5)), 0); (("hash_fold_t", 2473), ((Tag3 (Tag1 ((Tag2 ("Base__Ppx_hash_lib")), "hash_fold"), [(Tag3 ((("t", 2468)), 0, (0)), 100000000, 0, -443)], (0)), 100000000, 0, -442), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Ppx_hash_lib", 4)), 0); (("hash", 2474), ((Tag1 (0, (Tag3 ((("t", 2468)), 0, (0)), 100000000, 0, -441), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__Ppx_hash_lib")), "Std"), "Hash"), "hash_value"), 0, (0)), 100000000, 0, -440), 0), 100000000, 0, -439), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Ppx_hash_lib", 5)), 0); (("of_string", 2475), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -438), (Tag3 ((("t", 2468)), 0, (0)), 100000000, 0, -437), 0), 100000000, 0, -436), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Stringable", 1)), 0); (("to_string", 2476), ((Tag1 (0, (Tag3 ((("t", 2468)), 0, (0)), 100000000, 0, -435), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -434), 0), 100000000, 0, -433), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Stringable", 2)), 0); (("to_string_hum", 2477), ((Tag1 (Tag1 ("delimiter"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -432)], (0)), 100000000, 0, -431), (Tag1 (0, (Tag3 ((("t", 2468)), 0, (0)), 100000000, 0, -430), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -429), 0), 100000000, 0, -428), 0), 100000000, 0, -427), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 15)), 0)]), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), Tag1 ("Base__Int_intf", 16)), 0, 0); (("of_string_opt", 2390), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -283), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -282)], (0)), 100000000, 0, -281), 0), 100000000, 0, -280), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 27)), 0); (("to_string_hum", 2391), ((Tag1 (Tag1 ("delimiter"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -279)], (0)), 100000000, 0, -278), (Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -277), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -276), 0), 100000000, 0, -275), 0), 100000000, 0, -274), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 28)), 0); (("zero", 2392), ((Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -273), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 29)), 0); (("one", 2393), ((Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -272), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 30)), 0); (("minus_one", 2394), ((Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -271), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 31)), 0); (("+", 2395), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -270), (Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -269), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -268), 0), 100000000, 0, -267), 0), 100000000, 0, -266), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 32)), 0); (("-", 2396), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -265), (Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -264), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -263), 0), 100000000, 0, -262), 0), 100000000, 0, -261), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 33)), 0); (("*", 2397), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -260), (Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -259), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -258), 0), 100000000, 0, -257), 0), 100000000, 0, -256), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 34)), 0); (("**", 2398), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -255), (Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -254), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -253), 0), 100000000, 0, -252), 0), 100000000, 0, -251), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 35)), 0); (("neg", 2399), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -250), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -249), 0), 100000000, 0, -248), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 36)), 0); (("~-", 2400), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -247), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -246), 0), 100000000, 0, -245), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 37)), 0); (("/%", 2401), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -244), (Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -243), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -242), 0), 100000000, 0, -241), 0), 100000000, 0, -240), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 38)), 0); (("%", 2402), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -239), (Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -238), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -237), 0), 100000000, 0, -236), 0), 100000000, 0, -235), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 39)), 0); (("/", 2403), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -234), (Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -233), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -232), 0), 100000000, 0, -231), 0), 100000000, 0, -230), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 40)), 0); (("rem", 2404), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -229), (Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -228), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -227), 0), 100000000, 0, -226), 0), 100000000, 0, -225), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 41)), 0); (("//", 2405), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -224), (Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -223), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -222), 0), 100000000, 0, -221), 0), 100000000, 0, -220), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 42)), 0); (("land", 2406), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -219), (Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -218), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -217), 0), 100000000, 0, -216), 0), 100000000, 0, -215), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 43)), 0); (("lor", 2407), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -214), (Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -213), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -212), 0), 100000000, 0, -211), 0), 100000000, 0, -210), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 44)), 0); (("lxor", 2408), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -209), (Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -208), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -207), 0), 100000000, 0, -206), 0), 100000000, 0, -205), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 45)), 0); (("lnot", 2409), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -204), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -203), 0), 100000000, 0, -202), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 46)), 0); (("lsl", 2410), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -201), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -200), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -199), 0), 100000000, 0, -198), 0), 100000000, 0, -197), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 47)), 0); (("asr", 2411), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -196), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -195), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -194), 0), 100000000, 0, -193), 0), 100000000, 0, -192), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 48)), 0); (("round", 2412), ((Tag1 (Tag1 ("dir"), (Tag3 ((Tag3 ("option", 10)), [(Tag8 (([("Down", (0)); ("Nearest", (0)); ("Up", (0)); ("Zero", (0))], (0, 100000000, 0, -191), 1, 0, 0)), 100000000, 0, -190)], (0)), 100000000, 0, -189), (Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -188), (Tag1 (("to_multiple_of"), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -187), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -186), 0), 100000000, 0, -185), 0), 100000000, 0, -184), 0), 100000000, 0, -183), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 1)), 0); (("round_towards_zero", 2413), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -182), (Tag1 (("to_multiple_of"), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -181), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -180), 0), 100000000, 0, -179), 0), 100000000, 0, -178), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 2)), 0); (("round_down", 2414), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -177), (Tag1 (("to_multiple_of"), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -176), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -175), 0), 100000000, 0, -174), 0), 100000000, 0, -173), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 3)), 0); (("round_up", 2415), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -172), (Tag1 (("to_multiple_of"), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -171), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -170), 0), 100000000, 0, -169), 0), 100000000, 0, -168), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 4)), 0); (("round_nearest", 2416), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -167), (Tag1 (("to_multiple_of"), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -166), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -165), 0), 100000000, 0, -164), 0), 100000000, 0, -163), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 5)), 0); (("abs", 2417), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -162), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -161), 0), 100000000, 0, -160), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 50)), 0); (("succ", 2418), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -159), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -158), 0), 100000000, 0, -157), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 51)), 0); (("pred", 2419), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -156), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -155), 0), 100000000, 0, -154), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 52)), 0); (("pow", 2420), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -153), (Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -152), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -151), 0), 100000000, 0, -150), 0), 100000000, 0, -149), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 53)), 0); (("bit_and", 2421), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -148), (Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -147), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -146), 0), 100000000, 0, -145), 0), 100000000, 0, -144), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 54)), 0); (("bit_or", 2422), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -143), (Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -142), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -141), 0), 100000000, 0, -140), 0), 100000000, 0, -139), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 55)), 0); (("bit_xor", 2423), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -138), (Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -137), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -136), 0), 100000000, 0, -135), 0), 100000000, 0, -134), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 56)), 0); (("bit_not", 2424), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -133), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -132), 0), 100000000, 0, -131), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 57)), 0); (("popcount", 2425), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -130), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -129), 0), 100000000, 0, -128), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 58)), 0); (("shift_left", 2426), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -127), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -126), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -125), 0), 100000000, 0, -124), 0), 100000000, 0, -123), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 59)), 0); (("shift_right", 2427), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -122), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -121), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -120), 0), 100000000, 0, -119), 0), 100000000, 0, -118), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 60)), 0); (("decr", 2428), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Import"), "ref"), [(Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -117)], (0)), 100000000, 0, -116), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -115), 0), 100000000, 0, -114), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 61)), 0); (("incr", 2429), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Import"), "ref"), [(Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -113)], (0)), 100000000, 0, -112), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -111), 0), 100000000, 0, -110), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 62)), 0); (("of_int32_exn", 2430), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -109), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -108), 0), 100000000, 0, -107), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 63)), 0); (("to_int32_exn", 2431), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -106), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -105), 0), 100000000, 0, -104), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 64)), 0); (("of_int64_exn", 2432), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -103), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -102), 0), 100000000, 0, -101), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 65)), 0); (("to_int64", 2433), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -100), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -99), 0), 100000000, 0, -98), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 66)), 0); (("of_nativeint_exn", 2434), ((Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -97), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -96), 0), 100000000, 0, -95), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 67)), 0); (("to_nativeint_exn", 2435), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -94), (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -93), 0), 100000000, 0, -92), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 68)), 0); (("of_float_unchecked", 2436), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -91), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -90), 0), 100000000, 0, -89), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 69)), 0); (("num_bits", 2437), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -88), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 97)), 0); (("max_value", 2438), ((Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -87), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 98)), 0); (("min_value", 2439), ((Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -86), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 99)), 0); (("lsr", 2440), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -85), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -84), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -83), 0), 100000000, 0, -82), 0), 100000000, 0, -81), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 100)), 0); (("shift_right_logical", 2441), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -80), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -79), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -78), 0), 100000000, 0, -77), 0), 100000000, 0, -76), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 101)), 0); (("ceil_pow2", 2442), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -75), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -74), 0), 100000000, 0, -73), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 102)), 0); (("floor_pow2", 2443), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -72), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -71), 0), 100000000, 0, -70), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 103)), 0); (("ceil_log2", 2444), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -69), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -68), 0), 100000000, 0, -67), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 104)), 0); (("floor_log2", 2445), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -66), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -65), 0), 100000000, 0, -64), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 105)), 0); (("is_pow2", 2446), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -63), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -62), 0), 100000000, 0, -61), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 106)), 0); (("clz", 2447), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -60), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -59), 0), 100000000, 0, -58), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 107)), 0); (("ctz", 2448), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -57), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -56), 0), 100000000, 0, -55), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 108)), 0); Tag3 (("O", 2449), 0, (Tag1 ([(("+", 2478), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -567), (Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -566), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -565), 0), 100000000, 0, -564), 0), 100000000, 0, -563), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 72)), 0); (("-", 2479), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -562), (Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -561), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -560), 0), 100000000, 0, -559), 0), 100000000, 0, -558), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 73)), 0); (("*", 2480), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -557), (Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -556), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -555), 0), 100000000, 0, -554), 0), 100000000, 0, -553), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 74)), 0); (("/", 2481), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -552), (Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -551), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -550), 0), 100000000, 0, -549), 0), 100000000, 0, -548), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 75)), 0); (("~-", 2482), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -547), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -546), 0), 100000000, 0, -545), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 76)), 0); (("**", 2483), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -544), (Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -543), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -542), 0), 100000000, 0, -541), 0), 100000000, 0, -540), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 77)), 0); ((">=", 2484), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -539), (Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -538), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -537), 0), 100000000, 0, -536), 0), 100000000, 0, -535), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Comparisons", 1)), 0); (("<=", 2485), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -534), (Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -533), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -532), 0), 100000000, 0, -531), 0), 100000000, 0, -530), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Comparisons", 2)), 0); (("=", 2486), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -529), (Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -528), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -527), 0), 100000000, 0, -526), 0), 100000000, 0, -525), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Comparisons", 3)), 0); ((">", 2487), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -524), (Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -523), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -522), 0), 100000000, 0, -521), 0), 100000000, 0, -520), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Comparisons", 4)), 0); (("<", 2488), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -519), (Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -518), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -517), 0), 100000000, 0, -516), 0), 100000000, 0, -515), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Comparisons", 5)), 0); (("<>", 2489), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -514), (Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -513), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -512), 0), 100000000, 0, -511), 0), 100000000, 0, -510), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Comparisons", 6)), 0); (("abs", 2490), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -509), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -508), 0), 100000000, 0, -507), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 79)), 0); (("neg", 2491), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -506), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -505), 0), 100000000, 0, -504), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 80)), 0); (("zero", 2492), ((Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -503), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 81)), 0); (("%", 2493), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -502), (Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -501), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -500), 0), 100000000, 0, -499), 0), 100000000, 0, -498), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 82)), 0); (("/%", 2494), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -497), (Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -496), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -495), 0), 100000000, 0, -494), 0), 100000000, 0, -493), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 83)), 0); (("//", 2495), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -492), (Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -491), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -490), 0), 100000000, 0, -489), 0), 100000000, 0, -488), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 84)), 0); (("land", 2496), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -487), (Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -486), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -485), 0), 100000000, 0, -484), 0), 100000000, 0, -483), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 85)), 0); (("lor", 2497), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -482), (Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -481), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -480), 0), 100000000, 0, -479), 0), 100000000, 0, -478), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 86)), 0); (("lxor", 2498), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -477), (Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -476), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -475), 0), 100000000, 0, -474), 0), 100000000, 0, -473), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 87)), 0); (("lnot", 2499), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -472), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -471), 0), 100000000, 0, -470), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 88)), 0); (("lsl", 2500), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -469), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -468), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -467), 0), 100000000, 0, -466), 0), 100000000, 0, -465), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 89)), 0); (("asr", 2501), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -464), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -463), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -462), 0), 100000000, 0, -461), 0), 100000000, 0, -460), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 90)), 0); (("lsr", 2502), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -459), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -458), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -457), 0), 100000000, 0, -456), 0), 100000000, 0, -455), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), 0, Tag1 ("Base__Int_intf", 92)), 0)]), 0, (("src/int63_emul.mli", 12, 266, 274), ("src/int63_emul.mli", 12, 266, 301), 0), Tag1 ("Base__Int_intf", 110)), 0, 0); (("of_int", 2450), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -54), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -53), 0), 100000000, 0, -52), 0, (("src/int63_emul.mli", 14, 303, 303), ("src/int63_emul.mli", 14, 303, 324), 0), 0, Tag1 ("Base__Int63_emul", 3)), 0); (("to_int", 2451), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -51), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -50)], (0)), 100000000, 0, -49), 0), 100000000, 0, -48), 0, (("src/int63_emul.mli", 15, 325, 325), ("src/int63_emul.mli", 15, 325, 353), 0), 0, Tag1 ("Base__Int63_emul", 4)), 0); (("to_int_trunc", 2452), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -47), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -46), 0), 100000000, 0, -45), 0, (("src/int63_emul.mli", 16, 354, 354), ("src/int63_emul.mli", 16, 354, 381), 0), 0, Tag1 ("Base__Int63_emul", 5)), 0); (("of_int32", 2453), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -44), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -43), 0), 100000000, 0, -42), 0, (("src/int63_emul.mli", 17, 382, 382), ("src/int63_emul.mli", 17, 382, 407), 0), 0, Tag1 ("Base__Int63_emul", 6)), 0); (("to_int32", 2454), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -41), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Int32"), "t"), 0, (0)), 100000000, 0, -40)], (0)), 100000000, 0, -39), 0), 100000000, 0, -38), 0, (("src/int63_emul.mli", 18, 408, 408), ("src/int63_emul.mli", 18, 408, 442), 0), 0, Tag1 ("Base__Int63_emul", 7)), 0); (("to_int32_trunc", 2455), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -37), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Int32"), "t"), 0, (0)), 100000000, 0, -36), 0), 100000000, 0, -35), 0, (("src/int63_emul.mli", 19, 443, 443), ("src/int63_emul.mli", 19, 443, 476), 0), 0, Tag1 ("Base__Int63_emul", 8)), 0); (("of_int64", 2456), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Int64"), "t"), 0, (0)), 100000000, 0, -34), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -33)], (0)), 100000000, 0, -32), 0), 100000000, 0, -31), 0, (("src/int63_emul.mli", 20, 477, 477), ("src/int63_emul.mli", 20, 477, 511), 0), 0, Tag1 ("Base__Int63_emul", 9)), 0); (("of_int64_trunc", 2457), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Int64"), "t"), 0, (0)), 100000000, 0, -30), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -29), 0), 100000000, 0, -28), 0, (("src/int63_emul.mli", 21, 512, 512), ("src/int63_emul.mli", 21, 512, 545), 0), 0, Tag1 ("Base__Int63_emul", 10)), 0); (("of_nativeint", 2458), ((Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -27), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -26)], (0)), 100000000, 0, -25), 0), 100000000, 0, -24), 0, (("src/int63_emul.mli", 22, 546, 546), ("src/int63_emul.mli", 22, 546, 586), 0), 0, Tag1 ("Base__Int63_emul", 11)), 0); (("to_nativeint", 2459), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -23), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -22)], (0)), 100000000, 0, -21), 0), 100000000, 0, -20), 0, (("src/int63_emul.mli", 23, 587, 587), ("src/int63_emul.mli", 23, 587, 627), 0), 0, Tag1 ("Base__Int63_emul", 12)), 0); (("of_nativeint_trunc", 2460), ((Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -19), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("src/int63_emul.mli", 24, 628, 628), ("src/int63_emul.mli", 24, 628, 667), 0), 0, Tag1 ("Base__Int63_emul", 13)), 0); (("to_nativeint_trunc", 2461), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -16), (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -15), 0), 100000000, 0, -14), 0, (("src/int63_emul.mli", 25, 668, 668), ("src/int63_emul.mli", 25, 668, 707), 0), 0, Tag1 ("Base__Int63_emul", 14)), 0); (("bswap16", 2462), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -13), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("src/int63_emul.mli", 26, 708, 708), ("src/int63_emul.mli", 26, 708, 728), 0), 0, Tag1 ("Base__Int63_emul", 15)), 0); (("bswap32", 2463), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -10), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("src/int63_emul.mli", 27, 729, 729), ("src/int63_emul.mli", 27, 729, 749), 0), 0, Tag1 ("Base__Int63_emul", 16)), 0); (("bswap48", 2464), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -7), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("src/int63_emul.mli", 28, 750, 750), ("src/int63_emul.mli", 28, 750, 770), 0), 0, Tag1 ("Base__Int63_emul", 17)), 0); Tag3 (("W", 2465), 0, (Tag1 ([(("wrap_exn", 2503), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -573), (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -572), 0), 100000000, 0, -571), 0, (("src/int63_emul.mli", 32, 812, 814), ("src/int63_emul.mli", 32, 812, 839), 0), 0, Tag1 ("Base__Int63_emul", 18)), 0); (("unwrap", 2504), ((Tag1 (0, (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -570), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -569), 0), 100000000, 0, -568), 0, (("src/int63_emul.mli", 33, 840, 842), ("src/int63_emul.mli", 33, 840, 865), 0), 0, Tag1 ("Base__Int63_emul", 19)), 0)]), 0, (("src/int63_emul.mli", 31, 797, 797), ("src/int63_emul.mli", 34, 866, 869), 0), Tag1 ("Base__Int63_emul", 20)), 0, 0); Tag3 (("Repr", 2466), 0, (Tag1 ([Tag1 (("t", 2505), ([((("underlying_type")), 100000000, 0, -580); ((("intermediate_type")), 100000000, 0, -581)], 2, Tag1 ([(("Int", 1616), (0), ((Tag3 ((("t", 2505)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -575); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -576)], (0)), 100000000, 0, -574)), (("src/int63_emul.mli", 36, 871, 885), ("src/int63_emul.mli", 43, 1023, 1046), 0), 0, Tag1 ("Base__Int63_emul", 23)); (("Int64", 1617), (0), ((Tag3 ((("t", 2505)), [(Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -578); (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -579)], (0)), 100000000, 0, -577)), (("src/int63_emul.mli", 36, 871, 885), ("src/int63_emul.mli", 43, 1023, 1046), 0), 0, Tag1 ("Base__Int63_emul", 24))], 0), 1, 0, [63; 63], [0; 0], 0, 0, (("src/int63_emul.mli", 36, 871, 885), ("src/int63_emul.mli", 43, 1023, 1046), 0), 0, 1, 0, Tag1 ("Base__Int63_emul", 22)), 1, 0)]), 0, (("src/int63_emul.mli", 36, 871, 871), ("src/int63_emul.mli", 43, 1023, 1046), 0), Tag1 ("Base__Int63_emul", 26)), 0, 0); (("repr", 2467), ((Tag3 (Tag1 ((("Repr", 2466)), "t"), [(Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -3); (Tag3 ((("t", 2351)), 0, (0)), 100000000, 0, -4)], (0)), 100000000, 0, -2), 0, (("src/int63_emul.mli", 45, 1048, 1048), ("src/int63_emul.mli", 45, 1048, 1072), 0), 0, Tag1 ("Base__Int63_emul", 27)), 0)], "Base__Int63_emul", [("Base__Int63_emul", ("'\210s\232\177\204\254\024C\215\014\231\210\227n\235")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__StringLabels", ("\134F\024\226\216Is#\223\230\234\169Z\206Gc")); ("Stdlib__StdLabels", (".\193\n\229\139\017\212C-ZA\\kz-\128")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Printf", ("\215<\139]\021\142\224E\245m\198qc(W\229")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__MoreLabels", ("\248\232\248\254`<\230\241\161U\193U\1466J\238")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__ListLabels", ("*\194\012\191\020%\170\249m\002\180\178hk\205\220")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shadow_stdlib", ("\219zi\164\203\158e)\232\221\196\168\138x\142\018")); ("Sexplib0__Sexpable", ("\251${\207(\249/z\242\255\250^\141\156\210e")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv_error", ("kzv!\151~\198P\000\165\176d\007\251p\232")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Base_internalhash_types", ("0\148#2\226\223\018\135\173>!\020\237\017\255\149")); ("Base__T", ("+t\159\169\027\152\205\235\003\237\133\177\024\n6'")); ("Base__Sys0", ("\206z\231\154s\\\136\2364\131\005\014\031\152m3")); ("Base__Stringable", ("\170\025\162\136\234\162\n\161\1491>\145\210@\237t")); ("Base__String0", ("\212\221L\220\245\255\162P\228\224\189\216\135H\149O")); ("Base__Source_code_position0", ("_\003P6\254\029\206\005\130\136\180\019\145\230\000M")); ("Base__Sign0", ("\152\138\204\175\244\128J\165\221\165\160\150y\1305i")); ("Base__Sexp", ("\154\187\171&\209=\153[\236\250!U\174`\190T")); ("Base__Result", ("\204|\215\173FMa\2511<&\215T\194$\228")); ("Base__Printf", ("\000\196c,\214\127\226\174\220\190\253z!\242\028\250")); ("Base__Pretty_printer", ("\175\005\031\018\015a\159\220\154c'(a\239j\233")); ("Base__Ppx_hash_lib", ("\199\141\178\193\006\209L\007^\020(\131\224sn8")); ("Base__Ppx_compare_lib", ("\243\186~\233\228\199Ah\181.\223\004e\231\129S")); ("Base__Poly0", ("\230;\143\234\255.H\132KOe7\155\\\023f")); ("Base__Or_error", ("\193\133)\bO\210\2517\168*\203\148\143\200\127\177")); ("Base__Monad_intf", ("\208\203\163\152\184O\130?\012:\168\247}\018\253\155")); ("Base__Monad", ("!\244\168\2352=\137Lm\219\129K\216\199\145\\")); ("Base__Lazy", ("@`\165\196 \235)\136ANe:p\169$\185")); ("Base__Invariant_intf", ("\213\204\238\235\236[\198\145\028\2392\015\243\177S\249")); ("Base__Invariant", ("\135\153\136\\\129SD\228\202l\255\152\139\253\015\201")); ("Base__Intable", ("\028\249=Y\003]\231qd\238\172\004b\170\142\255")); ("Base__Int_intf", ("\238Q\2457\239\156\018\183J\015\240\178\193b\166@")); ("Base__Int64", ("\252B\186\239\245\155\209\227\136CIX@\189\003\029")); ("Base__Int32", ("\244*\172\133\227\025$@\180\027\024\132\195yO\027")); ("Base__Int0", ("N\1310\012\227\254\000\255_\222!\018\016\003\1779")); ("Base__Info_intf", ("\184\209'\173\251\219\167X|v\188]\190o5X")); ("Base__Info", ("-\011\149\203\248\030\2301\1907\1630\189\128\209\170")); ("Base__Import0", ("\156\129U\197Y[\\\153\017Ho\203\173\204\220\020")); ("Base__Import", ("\014\187\247\141\187\181\142g\176:s_,\181\219\209")); ("Base__Identifiable_intf", ("hK7}\187\129\022-r\233\241\192Q\161=j")); ("Base__Identifiable", ("L\020\162\189\228\217^\171\158H_\157\164c\130\242")); ("Base__Hashable_intf", ("\128\015G\244\135R\026\202\128F?)\193\004\195\181")); ("Base__Hashable", ("\027\187\158\245r}\018\193dbq\196\005\170g\252")); ("Base__Hash_intf", ("h\004P\218\1531G\127\212\208A\024\140\164iq")); ("Base__Hash", ("\206Rc\194\234{s3\248\165\024\162\203{\206\206")); ("Base__Globalize", ("<\243w~.\180\196t\159\193\174[\227\139\215G")); ("Base__Formatter", ("\193\149\030\140\154\1505b\162a`%\243\185'%")); ("Base__Floatable", ("\239\176\151\139\173ft(q\190\205\030C\170\197\177")); ("Base__Field", ("8In\234X\202\188G\186\208$\192\175\136\214v")); ("Base__Error", ("\199\218\231n\155/\159\156\146\247\148t\237\003\t\153")); ("Base__Either0", ("!9-\011n\2077eZ\212\031c\227\029\206\t")); ("Base__Comparisons", ("\196\196Y\"{\163~)\\G/\155:\004\141;")); ("Base__Comparator", ("\002\135z7b\025&\207\t\188\239&U3R\167")); ("Base__Comparable_intf", ("\252n\002\221\246\143r\235oJ\240\151\202\211\161\254")); ("Base__Comparable", (":\134'\156u#\215\225\129\191\162\229\200\185l\012")); ("Base__Bool0", ("\177f\254p\023\143&\239\020\136\206\242~\018F\251")); ("Base__Applicative_intf", ("J\176\203\159\235N(\235\027\232\198+\224\205*A")); ("Base__Applicative", ("\157\024\176\241a\165\204\133\003s3\214\007\131\244\n")); ("Base__", ("p\252\007\139\128\163W\025+\0225\001\246|P\158"))], [(0)])

val repr : (t, t) Repr.t

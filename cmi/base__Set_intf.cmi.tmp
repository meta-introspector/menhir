module type Elt_plain =
  sig
    type t
    val compare : t Base__Ppx_compare_lib.compare
    val sexp_of_t : t -> Sexplib0.Sexp.t
  end
module Without_comparator = Base__.Map_intf.Without_comparator
module With_comparator = Base__.Map_intf.With_comparator
module With_first_class_module = Base__.Map_intf.With_first_class_module
module Merge_to_sequence_element =
  Base__.Sequence.Merge_with_duplicates_element
module Named : sig type 'a t = { set : 'a; name : string; } end
module type Accessors_generic =
  sig
    type ('a, 'phantom) t
    type 'a elt
    val length : ('a, 'b) t -> int
    val is_empty : ('a, 'b) t -> bool
    val iter : ('a, 'b) t -> f:('a elt -> unit) -> unit
    val fold : ('a, 'b) t -> init:'acc -> f:('acc -> 'a elt -> 'acc) -> 'acc
    val fold_result :
      ('a, 'b) t ->
      init:'acc ->
      f:('acc -> 'a elt -> ('acc, 'e) Base__.Result.t) ->
      ('acc, 'e) Base__.Result.t
    val exists : ('a, 'b) t -> f:('a elt -> bool) -> bool
    val for_all : ('a, 'b) t -> f:('a elt -> bool) -> bool
    val count : ('a, 'b) t -> f:('a elt -> bool) -> int
    val sum :
      (module Base__Container_intf.Summable with type t = 'sum) ->
      ('a, 'b) t -> f:('a elt -> 'sum) -> 'sum
    val find : ('a, 'b) t -> f:('a elt -> bool) -> 'a elt option
    val find_map : ('a, 'c) t -> f:('a elt -> 'b option) -> 'b option
    val to_list : ('a, 'b) t -> 'a elt list
    val to_array : ('a, 'b) t -> 'a elt array
    type ('a, 'cmp) tree
    type ('a, 'cmp, 'z) access_options
    type 'cmp cmp
    val invariants : ('a, 'cmp, ('a, 'cmp) t -> bool) access_options
    val mem : ('a, 'cmp, ('a, 'cmp) t -> 'a elt -> bool) access_options
    val add :
      ('a, 'cmp, ('a, 'cmp) t -> 'a elt -> ('a, 'cmp) t) access_options
    val remove :
      ('a, 'cmp, ('a, 'cmp) t -> 'a elt -> ('a, 'cmp) t) access_options
    val union :
      ('a, 'cmp, ('a, 'cmp) t -> ('a, 'cmp) t -> ('a, 'cmp) t) access_options
    val inter :
      ('a, 'cmp, ('a, 'cmp) t -> ('a, 'cmp) t -> ('a, 'cmp) t) access_options
    val diff :
      ('a, 'cmp, ('a, 'cmp) t -> ('a, 'cmp) t -> ('a, 'cmp) t) access_options
    val symmetric_diff :
      ('a, 'cmp,
       ('a, 'cmp) t ->
       ('a, 'cmp) t -> ('a elt, 'a elt) Base__.Either.t Base__.Sequence.t)
      access_options
    val compare_direct :
      ('a, 'cmp, ('a, 'cmp) t -> ('a, 'cmp) t -> int) access_options
    val equal :
      ('a, 'cmp, ('a, 'cmp) t -> ('a, 'cmp) t -> bool) access_options
    val is_subset :
      ('a, 'cmp, ('a, 'cmp) t -> of_:('a, 'cmp) t -> bool) access_options
    val are_disjoint :
      ('a, 'cmp, ('a, 'cmp) t -> ('a, 'cmp) t -> bool) access_options
    module Named :
      sig
        val is_subset :
          ('a, 'cmp,
           ('a, 'cmp) t Named.t ->
           of_:('a, 'cmp) t Named.t -> unit Base__.Or_error.t)
          access_options
        val equal :
          ('a, 'cmp,
           ('a, 'cmp) t Named.t ->
           ('a, 'cmp) t Named.t -> unit Base__.Or_error.t)
          access_options
      end
    val fold_until :
      ('a, 'b) t ->
      init:'acc ->
      f:('acc -> 'a elt -> ('acc, 'final) Base__.Container.Continue_or_stop.t) ->
      finish:('acc -> 'final) -> 'final
    val fold_right :
      ('a, 'b) t -> init:'acc -> f:('a elt -> 'acc -> 'acc) -> 'acc
    val iter2 :
      ('a, 'cmp,
       ('a, 'cmp) t ->
       ('a, 'cmp) t ->
       f:([ `Both of 'a elt * 'a elt | `Left of 'a elt | `Right of 'a elt ] ->
          unit) ->
       unit)
      access_options
    val filter : ('a, 'cmp) t -> f:('a elt -> bool) -> ('a, 'cmp) t
    val partition_tf :
      ('a, 'cmp) t -> f:('a elt -> bool) -> ('a, 'cmp) t * ('a, 'cmp) t
    val elements : ('a, 'b) t -> 'a elt list
    val min_elt : ('a, 'b) t -> 'a elt option
    val min_elt_exn : ('a, 'b) t -> 'a elt
    val max_elt : ('a, 'b) t -> 'a elt option
    val max_elt_exn : ('a, 'b) t -> 'a elt
    val choose : ('a, 'b) t -> 'a elt option
    val choose_exn : ('a, 'b) t -> 'a elt
    val split :
      ('a, 'cmp,
       ('a, 'cmp) t -> 'a elt -> ('a, 'cmp) t * 'a elt option * ('a, 'cmp) t)
      access_options
    val split_le_gt :
      ('a, 'cmp, ('a, 'cmp) t -> 'a elt -> ('a, 'cmp) t * ('a, 'cmp) t)
      access_options
    val split_lt_ge :
      ('a, 'cmp, ('a, 'cmp) t -> 'a elt -> ('a, 'cmp) t * ('a, 'cmp) t)
      access_options
    val group_by :
      ('a, 'cmp) t -> equiv:('a elt -> 'a elt -> bool) -> ('a, 'cmp) t list
    val find_exn : ('a, 'b) t -> f:('a elt -> bool) -> 'a elt
    val nth : ('a, 'b) t -> int -> 'a elt option
    val remove_index :
      ('a, 'cmp, ('a, 'cmp) t -> int -> ('a, 'cmp) t) access_options
    val to_tree : ('a, 'cmp) t -> ('a elt, 'cmp cmp) tree
    val to_sequence :
      ('a, 'cmp,
       ?order:[ `Decreasing | `Increasing ] ->
       ?greater_or_equal_to:'a elt ->
       ?less_or_equal_to:'a elt -> ('a, 'cmp) t -> 'a elt Base__.Sequence.t)
      access_options
    val binary_search :
      ('a, 'cmp,
       ('a, 'cmp) t ->
       compare:('a elt -> 'key -> int) ->
       Base__.Binary_searchable.Which_target_by_key.t ->
       'key -> 'a elt option)
      access_options
    val binary_search_segmented :
      ('a, 'cmp,
       ('a, 'cmp) t ->
       segment_of:('a elt -> [ `Left | `Right ]) ->
       Base__.Binary_searchable.Which_target_by_segment.t -> 'a elt option)
      access_options
    val merge_to_sequence :
      ('a, 'cmp,
       ?order:[ `Decreasing | `Increasing ] ->
       ?greater_or_equal_to:'a elt ->
       ?less_or_equal_to:'a elt ->
       ('a, 'cmp) t ->
       ('a, 'cmp) t ->
       ('a elt, 'a elt) Merge_to_sequence_element.t Base__.Sequence.t)
      access_options
  end
module type Creators_generic =
  sig
    type ('a, 'cmp) t
    type ('a, 'cmp) set
    type ('a, 'cmp) tree
    type 'a elt
    type ('a, 'cmp, 'z) create_options
    type 'cmp cmp
    val empty : ('a, 'cmp, ('a, 'cmp) t) create_options
    val singleton : ('a, 'cmp, 'a elt -> ('a, 'cmp) t) create_options
    val union_list :
      ('a, 'cmp, ('a, 'cmp) t list -> ('a, 'cmp) t) create_options
    val of_list : ('a, 'cmp, 'a elt list -> ('a, 'cmp) t) create_options
    val of_sequence :
      ('a, 'cmp, 'a elt Base__.Sequence.t -> ('a, 'cmp) t) create_options
    val of_array : ('a, 'cmp, 'a elt array -> ('a, 'cmp) t) create_options
    val of_sorted_array :
      ('a, 'cmp, 'a elt array -> ('a, 'cmp) t Base__.Or_error.t)
      create_options
    val of_sorted_array_unchecked :
      ('a, 'cmp, 'a elt array -> ('a, 'cmp) t) create_options
    val of_increasing_iterator_unchecked :
      ('a, 'cmp, len:int -> f:(int -> 'a elt) -> ('a, 'cmp) t) create_options
    val stable_dedup_list :
      ('a, 'b, 'a elt list -> 'a elt list) create_options
    val map :
      ('b, 'cmp, ('a, 'c) set -> f:('a -> 'b elt) -> ('b, 'cmp) t)
      create_options
    val filter_map :
      ('b, 'cmp, ('a, 'c) set -> f:('a -> 'b elt option) -> ('b, 'cmp) t)
      create_options
    val of_tree :
      ('a, 'cmp, ('a elt, 'cmp cmp) tree -> ('a, 'cmp) t) create_options
  end
module type Creators_and_accessors_generic =
  sig
    type ('elt, 'cmp) t
    type ('elt, 'cmp) tree
    type 'elt elt
    type 'cmp cmp
    val length : ('a, 'b) t -> int
    val is_empty : ('a, 'b) t -> bool
    val iter : ('a, 'b) t -> f:('a elt -> unit) -> unit
    val fold : ('a, 'b) t -> init:'acc -> f:('acc -> 'a elt -> 'acc) -> 'acc
    val fold_result :
      ('a, 'b) t ->
      init:'acc ->
      f:('acc -> 'a elt -> ('acc, 'e) Base__.Result.t) ->
      ('acc, 'e) Base__.Result.t
    val exists : ('a, 'b) t -> f:('a elt -> bool) -> bool
    val for_all : ('a, 'b) t -> f:('a elt -> bool) -> bool
    val count : ('a, 'b) t -> f:('a elt -> bool) -> int
    val sum :
      (module Base__Container_intf.Summable with type t = 'sum) ->
      ('a, 'b) t -> f:('a elt -> 'sum) -> 'sum
    val find : ('a, 'b) t -> f:('a elt -> bool) -> 'a elt option
    val find_map : ('a, 'c) t -> f:('a elt -> 'b option) -> 'b option
    val to_list : ('a, 'b) t -> 'a elt list
    val to_array : ('a, 'b) t -> 'a elt array
    type ('a, 'cmp, 'z) access_options
    val invariants : ('a, 'cmp, ('a, 'cmp) t -> bool) access_options
    val mem : ('a, 'cmp, ('a, 'cmp) t -> 'a elt -> bool) access_options
    val add :
      ('a, 'cmp, ('a, 'cmp) t -> 'a elt -> ('a, 'cmp) t) access_options
    val remove :
      ('a, 'cmp, ('a, 'cmp) t -> 'a elt -> ('a, 'cmp) t) access_options
    val union :
      ('a, 'cmp, ('a, 'cmp) t -> ('a, 'cmp) t -> ('a, 'cmp) t) access_options
    val inter :
      ('a, 'cmp, ('a, 'cmp) t -> ('a, 'cmp) t -> ('a, 'cmp) t) access_options
    val diff :
      ('a, 'cmp, ('a, 'cmp) t -> ('a, 'cmp) t -> ('a, 'cmp) t) access_options
    val symmetric_diff :
      ('a, 'cmp,
       ('a, 'cmp) t ->
       ('a, 'cmp) t -> ('a elt, 'a elt) Base__.Either.t Base__.Sequence.t)
      access_options
    val compare_direct :
      ('a, 'cmp, ('a, 'cmp) t -> ('a, 'cmp) t -> int) access_options
    val equal :
      ('a, 'cmp, ('a, 'cmp) t -> ('a, 'cmp) t -> bool) access_options
    val is_subset :
      ('a, 'cmp, ('a, 'cmp) t -> of_:('a, 'cmp) t -> bool) access_options
    val are_disjoint :
      ('a, 'cmp, ('a, 'cmp) t -> ('a, 'cmp) t -> bool) access_options
    module Named :
      sig
        val is_subset :
          ('a, 'cmp,
           ('a, 'cmp) t Named.t ->
           of_:('a, 'cmp) t Named.t -> unit Base__.Or_error.t)
          access_options
        val equal :
          ('a, 'cmp,
           ('a, 'cmp) t Named.t ->
           ('a, 'cmp) t Named.t -> unit Base__.Or_error.t)
          access_options
      end
    val fold_until :
      ('a, 'b) t ->
      init:'acc ->
      f:('acc -> 'a elt -> ('acc, 'final) Base__.Container.Continue_or_stop.t) ->
      finish:('acc -> 'final) -> 'final
    val fold_right :
      ('a, 'b) t -> init:'acc -> f:('a elt -> 'acc -> 'acc) -> 'acc
    val iter2 :
      ('a, 'cmp,
       ('a, 'cmp) t ->
       ('a, 'cmp) t ->
       f:([ `Both of 'a elt * 'a elt | `Left of 'a elt | `Right of 'a elt ] ->
          unit) ->
       unit)
      access_options
    val filter : ('a, 'cmp) t -> f:('a elt -> bool) -> ('a, 'cmp) t
    val partition_tf :
      ('a, 'cmp) t -> f:('a elt -> bool) -> ('a, 'cmp) t * ('a, 'cmp) t
    val elements : ('a, 'b) t -> 'a elt list
    val min_elt : ('a, 'b) t -> 'a elt option
    val min_elt_exn : ('a, 'b) t -> 'a elt
    val max_elt : ('a, 'b) t -> 'a elt option
    val max_elt_exn : ('a, 'b) t -> 'a elt
    val choose : ('a, 'b) t -> 'a elt option
    val choose_exn : ('a, 'b) t -> 'a elt
    val split :
      ('a, 'cmp,
       ('a, 'cmp) t -> 'a elt -> ('a, 'cmp) t * 'a elt option * ('a, 'cmp) t)
      access_options
    val split_le_gt :
      ('a, 'cmp, ('a, 'cmp) t -> 'a elt -> ('a, 'cmp) t * ('a, 'cmp) t)
      access_options
    val split_lt_ge :
      ('a, 'cmp, ('a, 'cmp) t -> 'a elt -> ('a, 'cmp) t * ('a, 'cmp) t)
      access_options
    val group_by :
      ('a, 'cmp) t -> equiv:('a elt -> 'a elt -> bool) -> ('a, 'cmp) t list
    val find_exn : ('a, 'b) t -> f:('a elt -> bool) -> 'a elt
    val nth : ('a, 'b) t -> int -> 'a elt option
    val remove_index :
      ('a, 'cmp, ('a, 'cmp) t -> int -> ('a, 'cmp) t) access_options
    val to_tree : ('a, 'cmp) t -> ('a elt, 'cmp cmp) tree
    val to_sequence :
      ('a, 'cmp,
       ?order:[ `Decreasing | `Increasing ] ->
       ?greater_or_equal_to:'a elt ->
       ?less_or_equal_to:'a elt -> ('a, 'cmp) t -> 'a elt Base__.Sequence.t)
      access_options
    val binary_search :
      ('a, 'cmp,
       ('a, 'cmp) t ->
       compare:('a elt -> 'key -> int) ->
       Base__.Binary_searchable.Which_target_by_key.t ->
       'key -> 'a elt option)
      access_options
    val binary_search_segmented :
      ('a, 'cmp,
       ('a, 'cmp) t ->
       segment_of:('a elt -> [ `Left | `Right ]) ->
       Base__.Binary_searchable.Which_target_by_segment.t -> 'a elt option)
      access_options
    val merge_to_sequence :
      ('a, 'cmp,
       ?order:[ `Decreasing | `Increasing ] ->
       ?greater_or_equal_to:'a elt ->
       ?less_or_equal_to:'a elt ->
       ('a, 'cmp) t ->
       ('a, 'cmp) t ->
       ('a elt, 'a elt) Merge_to_sequence_element.t Base__.Sequence.t)
      access_options
    type ('a, 'cmp) set
    type ('a, 'cmp, 'z) create_options
    val empty : ('a, 'cmp, ('a, 'cmp) t) create_options
    val singleton : ('a, 'cmp, 'a elt -> ('a, 'cmp) t) create_options
    val union_list :
      ('a, 'cmp, ('a, 'cmp) t list -> ('a, 'cmp) t) create_options
    val of_list : ('a, 'cmp, 'a elt list -> ('a, 'cmp) t) create_options
    val of_sequence :
      ('a, 'cmp, 'a elt Base__.Sequence.t -> ('a, 'cmp) t) create_options
    val of_array : ('a, 'cmp, 'a elt array -> ('a, 'cmp) t) create_options
    val of_sorted_array :
      ('a, 'cmp, 'a elt array -> ('a, 'cmp) t Base__.Or_error.t)
      create_options
    val of_sorted_array_unchecked :
      ('a, 'cmp, 'a elt array -> ('a, 'cmp) t) create_options
    val of_increasing_iterator_unchecked :
      ('a, 'cmp, len:int -> f:(int -> 'a elt) -> ('a, 'cmp) t) create_options
    val stable_dedup_list :
      ('a, 'b, 'a elt list -> 'a elt list) create_options
    val map :
      ('b, 'cmp, ('a, 'c) set -> f:('a -> 'b elt) -> ('b, 'cmp) t)
      create_options
    val filter_map :
      ('b, 'cmp, ('a, 'c) set -> f:('a -> 'b elt option) -> ('b, 'cmp) t)
      create_options
    val of_tree :
      ('a, 'cmp, ('a elt, 'cmp cmp) tree -> ('a, 'cmp) t) create_options
  end
module type S_poly =
  sig
    type 'elt t
    type 'elt tree
    type comparator_witness
    val length : 'a t -> int
    val is_empty : 'a t -> bool
    val iter : 'a t -> f:('a -> unit) -> unit
    val fold : 'a t -> init:'acc -> f:('acc -> 'a -> 'acc) -> 'acc
    val fold_result :
      'a t ->
      init:'acc ->
      f:('acc -> 'a -> ('acc, 'e) Base__.Result.t) ->
      ('acc, 'e) Base__.Result.t
    val exists : 'a t -> f:('a -> bool) -> bool
    val for_all : 'a t -> f:('a -> bool) -> bool
    val count : 'a t -> f:('a -> bool) -> int
    val sum :
      (module Base__Container_intf.Summable with type t = 'sum) ->
      'a t -> f:('a -> 'sum) -> 'sum
    val find : 'a t -> f:('a -> bool) -> 'a option
    val find_map : 'a t -> f:('a -> 'b option) -> 'b option
    val to_list : 'a t -> 'a list
    val to_array : 'a t -> 'a array
    val invariants : ('a, 'cmp, 'a t -> bool) Without_comparator.t
    val mem : ('a, 'cmp, 'a t -> 'a -> bool) Without_comparator.t
    val add : ('a, 'cmp, 'a t -> 'a -> 'a t) Without_comparator.t
    val remove : ('a, 'cmp, 'a t -> 'a -> 'a t) Without_comparator.t
    val union : ('a, 'cmp, 'a t -> 'a t -> 'a t) Without_comparator.t
    val inter : ('a, 'cmp, 'a t -> 'a t -> 'a t) Without_comparator.t
    val diff : ('a, 'cmp, 'a t -> 'a t -> 'a t) Without_comparator.t
    val symmetric_diff :
      ('a, 'cmp, 'a t -> 'a t -> ('a, 'a) Base__.Either.t Base__.Sequence.t)
      Without_comparator.t
    val compare_direct : ('a, 'cmp, 'a t -> 'a t -> int) Without_comparator.t
    val equal : ('a, 'cmp, 'a t -> 'a t -> bool) Without_comparator.t
    val is_subset : ('a, 'cmp, 'a t -> of_:'a t -> bool) Without_comparator.t
    val are_disjoint : ('a, 'cmp, 'a t -> 'a t -> bool) Without_comparator.t
    module Named :
      sig
        val is_subset :
          ('a, 'cmp,
           'a t Named.t -> of_:'a t Named.t -> unit Base__.Or_error.t)
          Without_comparator.t
        val equal :
          ('a, 'cmp, 'a t Named.t -> 'a t Named.t -> unit Base__.Or_error.t)
          Without_comparator.t
      end
    val fold_until :
      'a t ->
      init:'acc ->
      f:('acc -> 'a -> ('acc, 'final) Base__.Container.Continue_or_stop.t) ->
      finish:('acc -> 'final) -> 'final
    val fold_right : 'a t -> init:'acc -> f:('a -> 'acc -> 'acc) -> 'acc
    val iter2 :
      ('a, 'cmp,
       'a t ->
       'a t ->
       f:([ `Both of 'a * 'a | `Left of 'a | `Right of 'a ] -> unit) -> unit)
      Without_comparator.t
    val filter : 'a t -> f:('a -> bool) -> 'a t
    val partition_tf : 'a t -> f:('a -> bool) -> 'a t * 'a t
    val elements : 'a t -> 'a list
    val min_elt : 'a t -> 'a option
    val min_elt_exn : 'a t -> 'a
    val max_elt : 'a t -> 'a option
    val max_elt_exn : 'a t -> 'a
    val choose : 'a t -> 'a option
    val choose_exn : 'a t -> 'a
    val split :
      ('a, 'cmp, 'a t -> 'a -> 'a t * 'a option * 'a t) Without_comparator.t
    val split_le_gt :
      ('a, 'cmp, 'a t -> 'a -> 'a t * 'a t) Without_comparator.t
    val split_lt_ge :
      ('a, 'cmp, 'a t -> 'a -> 'a t * 'a t) Without_comparator.t
    val group_by : 'a t -> equiv:('a -> 'a -> bool) -> 'a t list
    val find_exn : 'a t -> f:('a -> bool) -> 'a
    val nth : 'a t -> int -> 'a option
    val remove_index : ('a, 'cmp, 'a t -> int -> 'a t) Without_comparator.t
    val to_tree : 'a t -> 'a tree
    val to_sequence :
      ('a, 'cmp,
       ?order:[ `Decreasing | `Increasing ] ->
       ?greater_or_equal_to:'a ->
       ?less_or_equal_to:'a -> 'a t -> 'a Base__.Sequence.t)
      Without_comparator.t
    val binary_search :
      ('a, 'cmp,
       'a t ->
       compare:('a -> 'key -> int) ->
       Base__.Binary_searchable.Which_target_by_key.t -> 'key -> 'a option)
      Without_comparator.t
    val binary_search_segmented :
      ('a, 'cmp,
       'a t ->
       segment_of:('a -> [ `Left | `Right ]) ->
       Base__.Binary_searchable.Which_target_by_segment.t -> 'a option)
      Without_comparator.t
    val merge_to_sequence :
      ('a, 'cmp,
       ?order:[ `Decreasing | `Increasing ] ->
       ?greater_or_equal_to:'a ->
       ?less_or_equal_to:'a ->
       'a t -> 'a t -> ('a, 'a) Merge_to_sequence_element.t Base__.Sequence.t)
      Without_comparator.t
    type ('a, 'cmp) set
    val empty : ('a, 'cmp, 'a t) Without_comparator.t
    val singleton : ('a, 'cmp, 'a -> 'a t) Without_comparator.t
    val union_list : ('a, 'cmp, 'a t list -> 'a t) Without_comparator.t
    val of_list : ('a, 'cmp, 'a list -> 'a t) Without_comparator.t
    val of_sequence :
      ('a, 'cmp, 'a Base__.Sequence.t -> 'a t) Without_comparator.t
    val of_array : ('a, 'cmp, 'a array -> 'a t) Without_comparator.t
    val of_sorted_array :
      ('a, 'cmp, 'a array -> 'a t Base__.Or_error.t) Without_comparator.t
    val of_sorted_array_unchecked :
      ('a, 'cmp, 'a array -> 'a t) Without_comparator.t
    val of_increasing_iterator_unchecked :
      ('a, 'cmp, len:int -> f:(int -> 'a) -> 'a t) Without_comparator.t
    val stable_dedup_list : ('a, 'b, 'a list -> 'a list) Without_comparator.t
    val map :
      ('b, 'cmp, ('a, 'c) set -> f:('a -> 'b) -> 'b t) Without_comparator.t
    val filter_map :
      ('b, 'cmp, ('a, 'c) set -> f:('a -> 'b option) -> 'b t)
      Without_comparator.t
    val of_tree : ('a, 'cmp, 'a tree -> 'a t) Without_comparator.t
  end
module type For_deriving =
  sig
    type ('a, 'b) t
    module type Sexp_of_m =
      sig type t val sexp_of_t : t -> Sexplib0.Sexp.t end
    module type M_of_sexp =
      sig
        type t
        val t_of_sexp : Sexplib0.Sexp.t -> t
        type comparator_witness
        val comparator : (t, comparator_witness) Base__Comparator.comparator
      end
    module type M_sexp_grammar =
      sig type t val t_sexp_grammar : t Sexplib0.Sexp_grammar.t end
    module type Compare_m = sig end
    module type Equal_m = sig end
    module type Hash_fold_m = Base__.Hasher.S
    val sexp_of_m__t :
      (module Sexp_of_m with type t = 'elt) ->
      ('elt, 'cmp) t -> Base__.Sexp.t
    val m__t_of_sexp :
      (module M_of_sexp with type comparator_witness = 'cmp and type t = 'elt) ->
      Base__.Sexp.t -> ('elt, 'cmp) t
    val m__t_sexp_grammar :
      (module M_sexp_grammar with type t = 'elt) ->
      ('elt, 'cmp) t Sexplib0.Sexp_grammar.t
    val compare_m__t :
      (module Compare_m) -> ('elt, 'cmp) t -> ('elt, 'cmp) t -> int
    val equal_m__t :
      (module Equal_m) -> ('elt, 'cmp) t -> ('elt, 'cmp) t -> bool
    val hash_fold_m__t :
      (module Hash_fold_m with type t = 'elt) ->
      Base__.Hash.state -> ('elt, 'a) t -> Base__.Hash.state
    val hash_m__t :
      (module Hash_fold_m with type t = 'elt) -> ('elt, 'a) t -> int
  end
module type Set =
  sig
    type (!'elt, !'cmp) t
    val compare :
      'a Base__Ppx_compare_lib.compare ->
      'b Base__Ppx_compare_lib.compare ->
      ('a, 'b) t Base__Ppx_compare_lib.compare
    type ('k, 'cmp) comparator = ('k, 'cmp) Base__.Comparator.Module.t
    val invariants : ('a, 'b) t -> bool
    val comparator_s : ('a, 'cmp) t -> ('a, 'cmp) Base__.Comparator.Module.t
    val comparator : ('a, 'cmp) t -> ('a, 'cmp) Base__.Comparator.t
    val empty : ('a, 'cmp) Base__.Comparator.Module.t -> ('a, 'cmp) t
    val singleton :
      ('a, 'cmp) Base__.Comparator.Module.t -> 'a -> ('a, 'cmp) t
    val length : ('a, 'b) t -> int
    val is_empty : ('a, 'b) t -> bool
    val mem : ('a, 'b) t -> 'a -> bool
    val add : ('a, 'cmp) t -> 'a -> ('a, 'cmp) t
    val remove : ('a, 'cmp) t -> 'a -> ('a, 'cmp) t
    val union : ('a, 'cmp) t -> ('a, 'cmp) t -> ('a, 'cmp) t
    val union_list :
      ('a, 'cmp) Base__.Comparator.Module.t ->
      ('a, 'cmp) t list -> ('a, 'cmp) t
    val inter : ('a, 'cmp) t -> ('a, 'cmp) t -> ('a, 'cmp) t
    val diff : ('a, 'cmp) t -> ('a, 'cmp) t -> ('a, 'cmp) t
    val symmetric_diff :
      ('a, 'cmp) t ->
      ('a, 'cmp) t -> ('a, 'a) Base__.Either.t Base__.Sequence.t
    val compare_direct : ('a, 'cmp) t -> ('a, 'cmp) t -> int
    val hash_fold_direct :
      'a Base__.Hash.folder -> ('a, 'cmp) t Base__.Hash.folder
    val equal : ('a, 'cmp) t -> ('a, 'cmp) t -> bool
    val exists : ('a, 'b) t -> f:('a -> bool) -> bool
    val for_all : ('a, 'b) t -> f:('a -> bool) -> bool
    val count : ('a, 'b) t -> f:('a -> bool) -> int
    val sum :
      (module Base__.Container.Summable with type t = 'sum) ->
      ('a, 'b) t -> f:('a -> 'sum) -> 'sum
    val find : ('a, 'b) t -> f:('a -> bool) -> 'a option
    val find_map : ('a, 'c) t -> f:('a -> 'b option) -> 'b option
    val find_exn : ('a, 'b) t -> f:('a -> bool) -> 'a
    val nth : ('a, 'b) t -> int -> 'a option
    val remove_index : ('a, 'cmp) t -> int -> ('a, 'cmp) t
    val is_subset : ('a, 'cmp) t -> of_:('a, 'cmp) t -> bool
    val are_disjoint : ('a, 'cmp) t -> ('a, 'cmp) t -> bool
    module Named :
      sig
        type 'a t = 'a Named.t = { set : 'a; name : string; }
        val is_subset :
          ('a, 'cmp) t/2 t -> of_:('a, 'cmp) t/2 t -> unit Base__.Or_error.t
        val equal :
          ('a, 'cmp) t/2 t -> ('a, 'cmp) t/2 t -> unit Base__.Or_error.t
      end
    val of_list :
      ('a, 'cmp) Base__.Comparator.Module.t -> 'a list -> ('a, 'cmp) t
    val of_sequence :
      ('a, 'cmp) Base__.Comparator.Module.t ->
      'a Base__.Sequence.t -> ('a, 'cmp) t
    val of_array :
      ('a, 'cmp) Base__.Comparator.Module.t -> 'a array -> ('a, 'cmp) t
    val to_list : ('a, 'b) t -> 'a list
    val to_array : ('a, 'b) t -> 'a array
    val of_sorted_array :
      ('a, 'cmp) Base__.Comparator.Module.t ->
      'a array -> ('a, 'cmp) t Base__.Or_error.t
    val of_sorted_array_unchecked :
      ('a, 'cmp) Base__.Comparator.Module.t -> 'a array -> ('a, 'cmp) t
    val of_increasing_iterator_unchecked :
      ('a, 'cmp) Base__.Comparator.Module.t ->
      len:int -> f:(int -> 'a) -> ('a, 'cmp) t
    val stable_dedup_list :
      ('a, 'b) Base__.Comparator.Module.t -> 'a list -> 'a list
    val map :
      ('b, 'cmp) Base__.Comparator.Module.t ->
      ('a, 'c) t -> f:('a -> 'b) -> ('b, 'cmp) t
    val filter_map :
      ('b, 'cmp) Base__.Comparator.Module.t ->
      ('a, 'c) t -> f:('a -> 'b option) -> ('b, 'cmp) t
    val filter : ('a, 'cmp) t -> f:('a -> bool) -> ('a, 'cmp) t
    val fold : ('a, 'b) t -> init:'acc -> f:('acc -> 'a -> 'acc) -> 'acc
    val fold_result :
      ('a, 'b) t ->
      init:'acc ->
      f:('acc -> 'a -> ('acc, 'e) Base__.Result.t) ->
      ('acc, 'e) Base__.Result.t
    val fold_until :
      ('a, 'b) t ->
      init:'acc ->
      f:('acc -> 'a -> ('acc, 'final) Base__.Container.Continue_or_stop.t) ->
      finish:('acc -> 'final) -> 'final
    val fold_right :
      ('a, 'b) t -> init:'acc -> f:('a -> 'acc -> 'acc) -> 'acc
    val iter : ('a, 'b) t -> f:('a -> unit) -> unit
    val iter2 :
      ('a, 'cmp) t ->
      ('a, 'cmp) t ->
      f:([ `Both of 'a * 'a | `Left of 'a | `Right of 'a ] -> unit) -> unit
    val partition_tf :
      ('a, 'cmp) t -> f:('a -> bool) -> ('a, 'cmp) t * ('a, 'cmp) t
    val elements : ('a, 'b) t -> 'a list
    val min_elt : ('a, 'b) t -> 'a option
    val min_elt_exn : ('a, 'b) t -> 'a
    val max_elt : ('a, 'b) t -> 'a option
    val max_elt_exn : ('a, 'b) t -> 'a
    val choose : ('a, 'b) t -> 'a option
    val choose_exn : ('a, 'b) t -> 'a
    val split : ('a, 'cmp) t -> 'a -> ('a, 'cmp) t * 'a option * ('a, 'cmp) t
    val split_le_gt : ('a, 'cmp) t -> 'a -> ('a, 'cmp) t * ('a, 'cmp) t
    val split_lt_ge : ('a, 'cmp) t -> 'a -> ('a, 'cmp) t * ('a, 'cmp) t
    val group_by :
      ('a, 'cmp) t -> equiv:('a -> 'a -> bool) -> ('a, 'cmp) t list
    val to_sequence :
      ?order:[ `Decreasing | `Increasing ] ->
      ?greater_or_equal_to:'a ->
      ?less_or_equal_to:'a -> ('a, 'cmp) t -> 'a Base__.Sequence.t
    val binary_search :
      ('a, 'cmp) t ->
      compare:('a -> 'key -> int) ->
      [ `First_equal_to
      | `First_greater_than_or_equal_to
      | `First_strictly_greater_than
      | `Last_equal_to
      | `Last_less_than_or_equal_to
      | `Last_strictly_less_than ] -> 'key -> 'a option
    val binary_search_segmented :
      ('a, 'cmp) t ->
      segment_of:('a -> [ `Left | `Right ]) ->
      [ `First_on_right | `Last_on_left ] -> 'a option
    module Merge_to_sequence_element :
      sig
        type ('a, 'b) t =
          ('a, 'b) Base__.Sequence.Merge_with_duplicates_element.t =
            Left of 'a
          | Right of 'b
          | Both of 'a * 'b
        val compare :
          'a Base__Ppx_compare_lib.compare ->
          'b Base__Ppx_compare_lib.compare ->
          ('a, 'b) t Base__Ppx_compare_lib.compare
        val t_of_sexp :
          (Sexplib0__.Sexp.t -> 'a) ->
          (Sexplib0__.Sexp.t -> 'b) -> Sexplib0__.Sexp.t -> ('a, 'b) t
        val sexp_of_t :
          ('a -> Sexplib0__.Sexp.t) ->
          ('b -> Sexplib0__.Sexp.t) -> ('a, 'b) t -> Sexplib0__.Sexp.t
      end
    val merge_to_sequence :
      ?order:[ `Decreasing | `Increasing ] ->
      ?greater_or_equal_to:'a ->
      ?less_or_equal_to:'a ->
      ('a, 'cmp) t ->
      ('a, 'cmp) t -> ('a, 'a) Merge_to_sequence_element.t Base__.Sequence.t
    module M :
      functor (Elt : sig type t type comparator_witness end) ->
        sig type nonrec t = (Elt.t, Elt.comparator_witness) t end
    module type Sexp_of_m =
      sig type t val sexp_of_t : t -> Sexplib0.Sexp.t end
    module type M_of_sexp =
      sig
        type t
        val t_of_sexp : Sexplib0.Sexp.t -> t
        type comparator_witness
        val comparator : (t, comparator_witness) Base__Comparator.comparator
      end
    module type M_sexp_grammar =
      sig type t val t_sexp_grammar : t Sexplib0.Sexp_grammar.t end
    module type Compare_m = sig end
    module type Equal_m = sig end
    module type Hash_fold_m = Base__.Hasher.S
    val sexp_of_m__t :
      (module Sexp_of_m with type t = 'elt) ->
      ('elt, 'cmp) t -> Base__.Sexp.t
    val m__t_of_sexp :
      (module M_of_sexp with type comparator_witness = 'cmp and type t = 'elt) ->
      Base__.Sexp.t -> ('elt, 'cmp) t
    val m__t_sexp_grammar :
      (module M_sexp_grammar with type t = 'elt) ->
      ('elt, 'cmp) t Sexplib0.Sexp_grammar.t
    val compare_m__t :
      (module Compare_m) -> ('elt, 'cmp) t -> ('elt, 'cmp) t -> int
    val equal_m__t :
      (module Equal_m) -> ('elt, 'cmp) t -> ('elt, 'cmp) t -> bool
    val hash_fold_m__t :
      (module Hash_fold_m with type t = 'elt) ->
      Base__.Hash.state -> ('elt, 'a) t -> Base__.Hash.state
    val hash_m__t :
      (module Hash_fold_m with type t = 'elt) -> ('elt, 'a) t -> int
    module Poly :
      sig
        type 'elt t = ('elt, Base__.Comparator.Poly.comparator_witness) t/2
        type 'elt tree
        type comparator_witness
        val length : 'a t -> int
        val is_empty : 'a t -> bool
        val iter : 'a t -> f:('a -> unit) -> unit
        val fold : 'a t -> init:'acc -> f:('acc -> 'a -> 'acc) -> 'acc
        val fold_result :
          'a t ->
          init:'acc ->
          f:('acc -> 'a -> ('acc, 'e) Base__.Result.t) ->
          ('acc, 'e) Base__.Result.t
        val exists : 'a t -> f:('a -> bool) -> bool
        val for_all : 'a t -> f:('a -> bool) -> bool
        val count : 'a t -> f:('a -> bool) -> int
        val sum :
          (module Base__Container_intf.Summable with type t = 'sum) ->
          'a t -> f:('a -> 'sum) -> 'sum
        val find : 'a t -> f:('a -> bool) -> 'a option
        val find_map : 'a t -> f:('a -> 'b option) -> 'b option
        val to_list : 'a t -> 'a list
        val to_array : 'a t -> 'a array
        val invariants : ('a, 'cmp, 'a t -> bool) Without_comparator.t
        val mem : ('a, 'cmp, 'a t -> 'a -> bool) Without_comparator.t
        val add : ('a, 'cmp, 'a t -> 'a -> 'a t) Without_comparator.t
        val remove : ('a, 'cmp, 'a t -> 'a -> 'a t) Without_comparator.t
        val union : ('a, 'cmp, 'a t -> 'a t -> 'a t) Without_comparator.t
        val inter : ('a, 'cmp, 'a t -> 'a t -> 'a t) Without_comparator.t
        val diff : ('a, 'cmp, 'a t -> 'a t -> 'a t) Without_comparator.t
        val symmetric_diff :
          ('a, 'cmp,
           'a t -> 'a t -> ('a, 'a) Base__.Either.t Base__.Sequence.t)
          Without_comparator.t
        val compare_direct :
          ('a, 'cmp, 'a t -> 'a t -> int) Without_comparator.t
        val equal : ('a, 'cmp, 'a t -> 'a t -> bool) Without_comparator.t
        val is_subset :
          ('a, 'cmp, 'a t -> of_:'a t -> bool) Without_comparator.t
        val are_disjoint :
          ('a, 'cmp, 'a t -> 'a t -> bool) Without_comparator.t
        module Named :
          sig
            val is_subset :
              ('a, 'cmp,
               'a t Named/2.t -> of_:'a t Named/2.t -> unit Base__.Or_error.t)
              Without_comparator.t
            val equal :
              ('a, 'cmp,
               'a t Named/2.t -> 'a t Named/2.t -> unit Base__.Or_error.t)
              Without_comparator.t
          end
        val fold_until :
          'a t ->
          init:'acc ->
          f:('acc -> 'a -> ('acc, 'final) Base__.Container.Continue_or_stop.t) ->
          finish:('acc -> 'final) -> 'final
        val fold_right : 'a t -> init:'acc -> f:('a -> 'acc -> 'acc) -> 'acc
        val iter2 :
          ('a, 'cmp,
           'a t ->
           'a t ->
           f:([ `Both of 'a * 'a | `Left of 'a | `Right of 'a ] -> unit) ->
           unit)
          Without_comparator.t
        val filter : 'a t -> f:('a -> bool) -> 'a t
        val partition_tf : 'a t -> f:('a -> bool) -> 'a t * 'a t
        val elements : 'a t -> 'a list
        val min_elt : 'a t -> 'a option
        val min_elt_exn : 'a t -> 'a
        val max_elt : 'a t -> 'a option
        val max_elt_exn : 'a t -> 'a
        val choose : 'a t -> 'a option
        val choose_exn : 'a t -> 'a
        val split :
          ('a, 'cmp, 'a t -> 'a -> 'a t * 'a option * 'a t)
          Without_comparator.t
        val split_le_gt :
          ('a, 'cmp, 'a t -> 'a -> 'a t * 'a t) Without_comparator.t
        val split_lt_ge :
          ('a, 'cmp, 'a t -> 'a -> 'a t * 'a t) Without_comparator.t
        val group_by : 'a t -> equiv:('a -> 'a -> bool) -> 'a t list
        val find_exn : 'a t -> f:('a -> bool) -> 'a
        val nth : 'a t -> int -> 'a option
        val remove_index :
          ('a, 'cmp, 'a t -> int -> 'a t) Without_comparator.t
        val to_tree : 'a t -> 'a tree
        val to_sequence :
          ('a, 'cmp,
           ?order:[ `Decreasing | `Increasing ] ->
           ?greater_or_equal_to:'a ->
           ?less_or_equal_to:'a -> 'a t -> 'a Base__.Sequence.t)
          Without_comparator.t
        val binary_search :
          ('a, 'cmp,
           'a t ->
           compare:('a -> 'key -> int) ->
           Base__.Binary_searchable.Which_target_by_key.t ->
           'key -> 'a option)
          Without_comparator.t
        val binary_search_segmented :
          ('a, 'cmp,
           'a t ->
           segment_of:('a -> [ `Left | `Right ]) ->
           Base__.Binary_searchable.Which_target_by_segment.t -> 'a option)
          Without_comparator.t
        val merge_to_sequence :
          ('a, 'cmp,
           ?order:[ `Decreasing | `Increasing ] ->
           ?greater_or_equal_to:'a ->
           ?less_or_equal_to:'a ->
           'a t ->
           'a t -> ('a, 'a) Merge_to_sequence_element/2.t Base__.Sequence.t)
          Without_comparator.t
        type ('a, 'cmp) set
        val empty : ('a, 'cmp, 'a t) Without_comparator.t
        val singleton : ('a, 'cmp, 'a -> 'a t) Without_comparator.t
        val union_list : ('a, 'cmp, 'a t list -> 'a t) Without_comparator.t
        val of_list : ('a, 'cmp, 'a list -> 'a t) Without_comparator.t
        val of_sequence :
          ('a, 'cmp, 'a Base__.Sequence.t -> 'a t) Without_comparator.t
        val of_array : ('a, 'cmp, 'a array -> 'a t) Without_comparator.t
        val of_sorted_array :
          ('a, 'cmp, 'a array -> 'a t Base__.Or_error.t) Without_comparator.t
        val of_sorted_array_unchecked :
          ('a, 'cmp, 'a array -> 'a t) Without_comparator.t
        val of_increasing_iterator_unchecked :
          ('a, 'cmp, len:int -> f:(int -> 'a) -> 'a t) Without_comparator.t
        val stable_dedup_list :
          ('a, 'b, 'a list -> 'a list) Without_comparator.t
        val map :
          ('b, 'cmp, ('a, 'c) set -> f:('a -> 'b) -> 'b t)
          Without_comparator.t
        val filter_map :
          ('b, 'cmp, ('a, 'c) set -> f:('a -> 'b option) -> 'b t)
          Without_comparator.t
        val of_tree : ('a, 'cmp, 'a tree -> 'a t) Without_comparator.t
      end
    module Using_comparator :
      sig
        type nonrec ('elt, 'cmp) t = ('elt, 'cmp) t
        val sexp_of_t :
          ('elt -> Sexplib0.Sexp.t) ->
          ('cmp -> Sexplib0.Sexp.t) -> ('elt, 'cmp) t -> Sexplib0.Sexp.t
        val t_of_sexp_direct :
          comparator:('elt, 'cmp) Base__.Comparator.t ->
          (Base__.Sexp.t -> 'elt) -> Base__.Sexp.t -> ('elt, 'cmp) t
        module Tree :
          sig
            type ('a, 'cmp) t
            val sexp_of_t :
              ('a -> Sexplib0.Sexp.t) ->
              ('cmp -> Sexplib0.Sexp.t) -> ('a, 'cmp) t -> Sexplib0.Sexp.t
            val t_of_sexp_direct :
              comparator:('elt, 'cmp) Base__.Comparator.t ->
              (Base__.Sexp.t -> 'elt) -> Base__.Sexp.t -> ('elt, 'cmp) t
            val length : ('a, 'b) t -> int
            val is_empty : ('a, 'b) t -> bool
            val iter : ('a, 'b) t -> f:('a -> unit) -> unit
            val fold :
              ('a, 'b) t -> init:'acc -> f:('acc -> 'a -> 'acc) -> 'acc
            val fold_result :
              ('a, 'b) t ->
              init:'acc ->
              f:('acc -> 'a -> ('acc, 'e) Base__.Result.t) ->
              ('acc, 'e) Base__.Result.t
            val exists : ('a, 'b) t -> f:('a -> bool) -> bool
            val for_all : ('a, 'b) t -> f:('a -> bool) -> bool
            val count : ('a, 'b) t -> f:('a -> bool) -> int
            val sum :
              (module Base__Container_intf.Summable with type t = 'sum) ->
              ('a, 'b) t -> f:('a -> 'sum) -> 'sum
            val find : ('a, 'b) t -> f:('a -> bool) -> 'a option
            val find_map : ('a, 'c) t -> f:('a -> 'b option) -> 'b option
            val to_list : ('a, 'b) t -> 'a list
            val to_array : ('a, 'b) t -> 'a array
            val invariants :
              ('a, 'cmp, ('a, 'cmp) t -> bool) With_comparator.t
            val mem :
              ('a, 'cmp, ('a, 'cmp) t -> 'a -> bool) With_comparator.t
            val add :
              ('a, 'cmp, ('a, 'cmp) t -> 'a -> ('a, 'cmp) t)
              With_comparator.t
            val remove :
              ('a, 'cmp, ('a, 'cmp) t -> 'a -> ('a, 'cmp) t)
              With_comparator.t
            val union :
              ('a, 'cmp, ('a, 'cmp) t -> ('a, 'cmp) t -> ('a, 'cmp) t)
              With_comparator.t
            val inter :
              ('a, 'cmp, ('a, 'cmp) t -> ('a, 'cmp) t -> ('a, 'cmp) t)
              With_comparator.t
            val diff :
              ('a, 'cmp, ('a, 'cmp) t -> ('a, 'cmp) t -> ('a, 'cmp) t)
              With_comparator.t
            val symmetric_diff :
              ('a, 'cmp,
               ('a, 'cmp) t ->
               ('a, 'cmp) t -> ('a, 'a) Base__.Either.t Base__.Sequence.t)
              With_comparator.t
            val compare_direct :
              ('a, 'cmp, ('a, 'cmp) t -> ('a, 'cmp) t -> int)
              With_comparator.t
            val equal :
              ('a, 'cmp, ('a, 'cmp) t -> ('a, 'cmp) t -> bool)
              With_comparator.t
            val is_subset :
              ('a, 'cmp, ('a, 'cmp) t -> of_:('a, 'cmp) t -> bool)
              With_comparator.t
            val are_disjoint :
              ('a, 'cmp, ('a, 'cmp) t -> ('a, 'cmp) t -> bool)
              With_comparator.t
            module Named :
              sig
                val is_subset :
                  ('a, 'cmp,
                   ('a, 'cmp) t Named/2.t ->
                   of_:('a, 'cmp) t Named/2.t -> unit Base__.Or_error.t)
                  With_comparator.t
                val equal :
                  ('a, 'cmp,
                   ('a, 'cmp) t Named/2.t ->
                   ('a, 'cmp) t Named/2.t -> unit Base__.Or_error.t)
                  With_comparator.t
              end
            val fold_until :
              ('a, 'b) t ->
              init:'acc ->
              f:('acc ->
                 'a -> ('acc, 'final) Base__.Container.Continue_or_stop.t) ->
              finish:('acc -> 'final) -> 'final
            val fold_right :
              ('a, 'b) t -> init:'acc -> f:('a -> 'acc -> 'acc) -> 'acc
            val iter2 :
              ('a, 'cmp,
               ('a, 'cmp) t ->
               ('a, 'cmp) t ->
               f:([ `Both of 'a * 'a | `Left of 'a | `Right of 'a ] -> unit) ->
               unit)
              With_comparator.t
            val filter : ('a, 'cmp) t -> f:('a -> bool) -> ('a, 'cmp) t
            val partition_tf :
              ('a, 'cmp) t -> f:('a -> bool) -> ('a, 'cmp) t * ('a, 'cmp) t
            val elements : ('a, 'b) t -> 'a list
            val min_elt : ('a, 'b) t -> 'a option
            val min_elt_exn : ('a, 'b) t -> 'a
            val max_elt : ('a, 'b) t -> 'a option
            val max_elt_exn : ('a, 'b) t -> 'a
            val choose : ('a, 'b) t -> 'a option
            val choose_exn : ('a, 'b) t -> 'a
            val split :
              ('a, 'cmp,
               ('a, 'cmp) t -> 'a -> ('a, 'cmp) t * 'a option * ('a, 'cmp) t)
              With_comparator.t
            val split_le_gt :
              ('a, 'cmp, ('a, 'cmp) t -> 'a -> ('a, 'cmp) t * ('a, 'cmp) t)
              With_comparator.t
            val split_lt_ge :
              ('a, 'cmp, ('a, 'cmp) t -> 'a -> ('a, 'cmp) t * ('a, 'cmp) t)
              With_comparator.t
            val group_by :
              ('a, 'cmp) t -> equiv:('a -> 'a -> bool) -> ('a, 'cmp) t list
            val find_exn : ('a, 'b) t -> f:('a -> bool) -> 'a
            val nth : ('a, 'b) t -> int -> 'a option
            val remove_index :
              ('a, 'cmp, ('a, 'cmp) t -> int -> ('a, 'cmp) t)
              With_comparator.t
            val to_tree : ('a, 'cmp) t -> ('a, 'cmp) t
            val to_sequence :
              ('a, 'cmp,
               ?order:[ `Decreasing | `Increasing ] ->
               ?greater_or_equal_to:'a ->
               ?less_or_equal_to:'a -> ('a, 'cmp) t -> 'a Base__.Sequence.t)
              With_comparator.t
            val binary_search :
              ('a, 'cmp,
               ('a, 'cmp) t ->
               compare:('a -> 'key -> int) ->
               Base__.Binary_searchable.Which_target_by_key.t ->
               'key -> 'a option)
              With_comparator.t
            val binary_search_segmented :
              ('a, 'cmp,
               ('a, 'cmp) t ->
               segment_of:('a -> [ `Left | `Right ]) ->
               Base__.Binary_searchable.Which_target_by_segment.t ->
               'a option)
              With_comparator.t
            val merge_to_sequence :
              ('a, 'cmp,
               ?order:[ `Decreasing | `Increasing ] ->
               ?greater_or_equal_to:'a ->
               ?less_or_equal_to:'a ->
               ('a, 'cmp) t ->
               ('a, 'cmp) t ->
               ('a, 'a) Merge_to_sequence_element/2.t Base__.Sequence.t)
              With_comparator.t
            val empty : ('a, 'cmp, ('a, 'cmp) t) With_comparator.t
            val singleton : ('a, 'cmp, 'a -> ('a, 'cmp) t) With_comparator.t
            val union_list :
              ('a, 'cmp, ('a, 'cmp) t list -> ('a, 'cmp) t) With_comparator.t
            val of_list :
              ('a, 'cmp, 'a list -> ('a, 'cmp) t) With_comparator.t
            val of_sequence :
              ('a, 'cmp, 'a Base__.Sequence.t -> ('a, 'cmp) t)
              With_comparator.t
            val of_array :
              ('a, 'cmp, 'a array -> ('a, 'cmp) t) With_comparator.t
            val of_sorted_array :
              ('a, 'cmp, 'a array -> ('a, 'cmp) t Base__.Or_error.t)
              With_comparator.t
            val of_sorted_array_unchecked :
              ('a, 'cmp, 'a array -> ('a, 'cmp) t) With_comparator.t
            val of_increasing_iterator_unchecked :
              ('a, 'cmp, len:int -> f:(int -> 'a) -> ('a, 'cmp) t)
              With_comparator.t
            val stable_dedup_list :
              ('a, 'b, 'a list -> 'a list) With_comparator.t
            val map :
              ('b, 'cmp, ('a, 'c) t -> f:('a -> 'b) -> ('b, 'cmp) t)
              With_comparator.t
            val filter_map :
              ('b, 'cmp, ('a, 'c) t -> f:('a -> 'b option) -> ('b, 'cmp) t)
              With_comparator.t
            val of_tree :
              ('a, 'cmp, ('a, 'cmp) t -> ('a, 'cmp) t) With_comparator.t
            val empty_without_value_restriction : ('a, 'b) t
          end
        val length : ('a, 'b) t -> int
        val is_empty : ('a, 'b) t -> bool
        val iter : ('a, 'b) t -> f:('a -> unit) -> unit
        val fold : ('a, 'b) t -> init:'acc -> f:('acc -> 'a -> 'acc) -> 'acc
        val fold_result :
          ('a, 'b) t ->
          init:'acc ->
          f:('acc -> 'a -> ('acc, 'e) Base__.Result.t) ->
          ('acc, 'e) Base__.Result.t
        val exists : ('a, 'b) t -> f:('a -> bool) -> bool
        val for_all : ('a, 'b) t -> f:('a -> bool) -> bool
        val count : ('a, 'b) t -> f:('a -> bool) -> int
        val sum :
          (module Base__Container_intf.Summable with type t = 'sum) ->
          ('a, 'b) t -> f:('a -> 'sum) -> 'sum
        val find : ('a, 'b) t -> f:('a -> bool) -> 'a option
        val find_map : ('a, 'c) t -> f:('a -> 'b option) -> 'b option
        val to_list : ('a, 'b) t -> 'a list
        val to_array : ('a, 'b) t -> 'a array
        val invariants :
          ('a, 'cmp, ('a, 'cmp) t -> bool) Without_comparator.t
        val mem : ('a, 'cmp, ('a, 'cmp) t -> 'a -> bool) Without_comparator.t
        val add :
          ('a, 'cmp, ('a, 'cmp) t -> 'a -> ('a, 'cmp) t) Without_comparator.t
        val remove :
          ('a, 'cmp, ('a, 'cmp) t -> 'a -> ('a, 'cmp) t) Without_comparator.t
        val union :
          ('a, 'cmp, ('a, 'cmp) t -> ('a, 'cmp) t -> ('a, 'cmp) t)
          Without_comparator.t
        val inter :
          ('a, 'cmp, ('a, 'cmp) t -> ('a, 'cmp) t -> ('a, 'cmp) t)
          Without_comparator.t
        val diff :
          ('a, 'cmp, ('a, 'cmp) t -> ('a, 'cmp) t -> ('a, 'cmp) t)
          Without_comparator.t
        val symmetric_diff :
          ('a, 'cmp,
           ('a, 'cmp) t ->
           ('a, 'cmp) t -> ('a, 'a) Base__.Either.t Base__.Sequence.t)
          Without_comparator.t
        val compare_direct :
          ('a, 'cmp, ('a, 'cmp) t -> ('a, 'cmp) t -> int)
          Without_comparator.t
        val equal :
          ('a, 'cmp, ('a, 'cmp) t -> ('a, 'cmp) t -> bool)
          Without_comparator.t
        val is_subset :
          ('a, 'cmp, ('a, 'cmp) t -> of_:('a, 'cmp) t -> bool)
          Without_comparator.t
        val are_disjoint :
          ('a, 'cmp, ('a, 'cmp) t -> ('a, 'cmp) t -> bool)
          Without_comparator.t
        module Named :
          sig
            val is_subset :
              ('a, 'cmp,
               ('a, 'cmp) t Named/2.t ->
               of_:('a, 'cmp) t Named/2.t -> unit Base__.Or_error.t)
              Without_comparator.t
            val equal :
              ('a, 'cmp,
               ('a, 'cmp) t Named/2.t ->
               ('a, 'cmp) t Named/2.t -> unit Base__.Or_error.t)
              Without_comparator.t
          end
        val fold_until :
          ('a, 'b) t ->
          init:'acc ->
          f:('acc -> 'a -> ('acc, 'final) Base__.Container.Continue_or_stop.t) ->
          finish:('acc -> 'final) -> 'final
        val fold_right :
          ('a, 'b) t -> init:'acc -> f:('a -> 'acc -> 'acc) -> 'acc
        val iter2 :
          ('a, 'cmp,
           ('a, 'cmp) t ->
           ('a, 'cmp) t ->
           f:([ `Both of 'a * 'a | `Left of 'a | `Right of 'a ] -> unit) ->
           unit)
          Without_comparator.t
        val filter : ('a, 'cmp) t -> f:('a -> bool) -> ('a, 'cmp) t
        val partition_tf :
          ('a, 'cmp) t -> f:('a -> bool) -> ('a, 'cmp) t * ('a, 'cmp) t
        val elements : ('a, 'b) t -> 'a list
        val min_elt : ('a, 'b) t -> 'a option
        val min_elt_exn : ('a, 'b) t -> 'a
        val max_elt : ('a, 'b) t -> 'a option
        val max_elt_exn : ('a, 'b) t -> 'a
        val choose : ('a, 'b) t -> 'a option
        val choose_exn : ('a, 'b) t -> 'a
        val split :
          ('a, 'cmp,
           ('a, 'cmp) t -> 'a -> ('a, 'cmp) t * 'a option * ('a, 'cmp) t)
          Without_comparator.t
        val split_le_gt :
          ('a, 'cmp, ('a, 'cmp) t -> 'a -> ('a, 'cmp) t * ('a, 'cmp) t)
          Without_comparator.t
        val split_lt_ge :
          ('a, 'cmp, ('a, 'cmp) t -> 'a -> ('a, 'cmp) t * ('a, 'cmp) t)
          Without_comparator.t
        val group_by :
          ('a, 'cmp) t -> equiv:('a -> 'a -> bool) -> ('a, 'cmp) t list
        val find_exn : ('a, 'b) t -> f:('a -> bool) -> 'a
        val nth : ('a, 'b) t -> int -> 'a option
        val remove_index :
          ('a, 'cmp, ('a, 'cmp) t -> int -> ('a, 'cmp) t)
          Without_comparator.t
        val to_tree : ('a, 'cmp) t -> ('a, 'cmp) Tree.t
        val to_sequence :
          ('a, 'cmp,
           ?order:[ `Decreasing | `Increasing ] ->
           ?greater_or_equal_to:'a ->
           ?less_or_equal_to:'a -> ('a, 'cmp) t -> 'a Base__.Sequence.t)
          Without_comparator.t
        val binary_search :
          ('a, 'cmp,
           ('a, 'cmp) t ->
           compare:('a -> 'key -> int) ->
           Base__.Binary_searchable.Which_target_by_key.t ->
           'key -> 'a option)
          Without_comparator.t
        val binary_search_segmented :
          ('a, 'cmp,
           ('a, 'cmp) t ->
           segment_of:('a -> [ `Left | `Right ]) ->
           Base__.Binary_searchable.Which_target_by_segment.t -> 'a option)
          Without_comparator.t
        val merge_to_sequence :
          ('a, 'cmp,
           ?order:[ `Decreasing | `Increasing ] ->
           ?greater_or_equal_to:'a ->
           ?less_or_equal_to:'a ->
           ('a, 'cmp) t ->
           ('a, 'cmp) t ->
           ('a, 'a) Merge_to_sequence_element/2.t Base__.Sequence.t)
          Without_comparator.t
        val empty : ('a, 'cmp, ('a, 'cmp) t) With_comparator.t
        val singleton : ('a, 'cmp, 'a -> ('a, 'cmp) t) With_comparator.t
        val union_list :
          ('a, 'cmp, ('a, 'cmp) t list -> ('a, 'cmp) t) With_comparator.t
        val of_list : ('a, 'cmp, 'a list -> ('a, 'cmp) t) With_comparator.t
        val of_sequence :
          ('a, 'cmp, 'a Base__.Sequence.t -> ('a, 'cmp) t) With_comparator.t
        val of_array : ('a, 'cmp, 'a array -> ('a, 'cmp) t) With_comparator.t
        val of_sorted_array :
          ('a, 'cmp, 'a array -> ('a, 'cmp) t Base__.Or_error.t)
          With_comparator.t
        val of_sorted_array_unchecked :
          ('a, 'cmp, 'a array -> ('a, 'cmp) t) With_comparator.t
        val of_increasing_iterator_unchecked :
          ('a, 'cmp, len:int -> f:(int -> 'a) -> ('a, 'cmp) t)
          With_comparator.t
        val stable_dedup_list :
          ('a, 'b, 'a list -> 'a list) With_comparator.t
        val map :
          ('b, 'cmp, ('a, 'c) t -> f:('a -> 'b) -> ('b, 'cmp) t)
          With_comparator.t
        val filter_map :
          ('b, 'cmp, ('a, 'c) t -> f:('a -> 'b option) -> ('b, 'cmp) t)
          With_comparator.t
        val of_tree :
          ('a, 'cmp, ('a, 'cmp) Tree.t -> ('a, 'cmp) t) With_comparator.t
        val comparator_s :
          ('a, 'cmp) t -> ('a, 'cmp) Base__.Comparator.Module.t
        val comparator : ('a, 'cmp) t -> ('a, 'cmp) Base__.Comparator.t
        val hash_fold_direct :
          'elt Base__.Hash.folder -> ('elt, 'cmp) t Base__.Hash.folder
        module Empty_without_value_restriction :
          functor (Elt : Base__.Comparator.S1) ->
            sig val empty : ('a Elt.t, Elt.comparator_witness) t end
      end
    val to_tree : ('a, 'cmp) t -> ('a, 'cmp) Using_comparator.Tree.t
    val of_tree :
      ('a, 'cmp) Base__.Comparator.Module.t ->
      ('a, 'cmp) Using_comparator.Tree.t -> ('a, 'cmp) t
    module With_comparator = With_comparator
    module With_first_class_module = With_first_class_module
    module Without_comparator = Without_comparator
    module type For_deriving = For_deriving
    module type S_poly = S_poly
    module type Accessors_generic = Accessors_generic
    module type Creators_generic = Creators_generic
    module type Creators_and_accessors_generic =
      Creators_and_accessors_generic
    module type Elt_plain = Elt_plain("DEBUG:rule", [Tag4 (("Elt_plain", 7054), ((Tag1 ([Tag1 (("t", 7066), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/set_intf.ml", 5, 50, 52), ("src/set_intf.ml", 5, 50, 95), 0), [(("deriving_inline", (("src/set_intf.ml", 5, 50, 62), ("src/set_intf.ml", 5, 50, 77), 0)), ([([(Tag8 ([(((("compare"), (("src/set_intf.ml", 5, 50, 78), ("src/set_intf.ml", 5, 50, 85), 0))), (("src/set_intf.ml", 5, 50, 78), ("src/set_intf.ml", 5, 50, 85), 0), 0, 0); (((("sexp_of"), (("src/set_intf.ml", 5, 50, 87), ("src/set_intf.ml", 5, 50, 94), 0))), (("src/set_intf.ml", 5, 50, 87), ("src/set_intf.ml", 5, 50, 94), 0), 0, 0)]), (("src/set_intf.ml", 5, 50, 78), ("src/set_intf.ml", 5, 50, 94), 0), 0, 0)], (("src/set_intf.ml", 5, 50, 78), ("src/set_intf.ml", 5, 50, 94), 0))]), (("src/set_intf.ml", 5, 50, 59), ("src/set_intf.ml", 5, 50, 95), 0))], 0, 0, Tag1 ("Base__Set_intf", 0)), 1, 0); (("compare", 7067), ((Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "compare"), [(Tag3 ((("t", 7066)), 0, (0)), 100000000, 0, -6)], (0)), 100000000, 0, -5), 0, (("src/set_intf.ml", 7, 97, 107), ("src/set_intf.ml", 7, 97, 152), 0), 0, Tag1 ("Base__Ppx_compare_lib", 5)), 0); (("sexp_of_t", 7068), ((Tag1 (0, (Tag3 ((("t", 7066)), 0, (0)), 100000000, 0, -4), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/set_intf.ml", 9, 154, 156), ("src/set_intf.ml", 9, 154, 192), 0), 0, Tag1 ("Base__Set_intf", 2)), 0)])), 0, (("src/set_intf.ml", 4, 22, 22), ("src/set_intf.ml", 12, 205, 208), 0), Tag1 ("Base__Set_intf", 3)), 0); Tag3 (("Without_comparator", 7055), 1, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Map_intf"), "Without_comparator")), 0, (("src/set_intf.ml", 14, 210, 210), ("src/set_intf.ml", 14, 210, 265), 0), Tag1 ("Base__Set_intf", 4)), 0, 0); Tag3 (("With_comparator", 7056), 1, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Map_intf"), "With_comparator")), 0, (("src/set_intf.ml", 15, 266, 266), ("src/set_intf.ml", 15, 266, 315), 0), Tag1 ("Base__Set_intf", 5)), 0, 0); Tag3 (("With_first_class_module", 7057), 1, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Map_intf"), "With_first_class_module")), 0, (("src/set_intf.ml", 16, 316, 316), ("src/set_intf.ml", 16, 316, 381), 0), Tag1 ("Base__Set_intf", 6)), 0, 0); Tag3 (("Merge_to_sequence_element", 7058), 1, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "Merge_with_duplicates_element")), 0, (("src/set_intf.ml", 17, 382, 382), ("src/set_intf.ml", 17, 382, 455), 0), Tag1 ("Base__Set_intf", 7)), 0, 0); Tag3 (("Named", 7059), 0, (Tag1 ([Tag1 (("t", 7069), ([((("a")), 100000000, 0, -7)], 1, [[(("set", 982), 0, ((("a")), 100000000, 0, -7), (("src/set_intf.ml", 21, 493, 499), ("src/set_intf.ml", 22, 508, 513), 0), 0, Tag1 ("Base__Set_intf", 9)); (("name", 983), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -8), (("src/set_intf.ml", 22, 508, 514), ("src/set_intf.ml", 22, 508, 527), 0), 0, Tag1 ("Base__Set_intf", 10))]], 1, 0, [25], [0], 0, 0, (("src/set_intf.ml", 20, 479, 481), ("src/set_intf.ml", 23, 528, 533), 0), 0, 0, 0, Tag1 ("Base__Set_intf", 8)), 1, 0)]), 0, (("src/set_intf.ml", 19, 457, 457), ("src/set_intf.ml", 24, 534, 537), 0), Tag1 ("Base__Set_intf", 11)), 0, 0); Tag4 (("Accessors_generic", 7060), ((Tag1 ([Tag1 (("t", 7070), ([((("a")), 100000000, 0, -469); ((("phantom")), 100000000, 0, -470)], 2, 0, 1, 0, [7; 7], [2; 2], 0, 0, (("src/container_intf.ml", 427, 16271, 16273), ("src/container_intf.ml", 427, 16271, 16294), 0), 0, 0, 0, Tag1 ("Base__Container_intf", 91)), 1, 0); Tag1 (("elt", 7071), ([((("a")), 100000000, 0, -468)], 1, 0, 1, 0, [7], [2], 0, 0, (("src/container_intf.ml", 428, 16295, 16297), ("src/container_intf.ml", 428, 16295, 16308), 0), 0, 0, 0, Tag1 ("Base__Container_intf", 92)), 1, 0); (("length", 7072), ((Tag1 (0, (Tag3 ((("t", 7070)), [((0), 100000000, 0, -466); ((0), 100000000, 0, -467)], (0)), 100000000, 0, -465), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -464), 0), 100000000, 0, -463), 0, (("src/container_intf.ml", 430, 16310, 16312), ("src/container_intf.ml", 430, 16310, 16340), 0), 0, Tag1 ("Base__Container_intf", 93)), 0); (("is_empty", 7073), ((Tag1 (0, (Tag3 ((("t", 7070)), [((0), 100000000, 0, -461); ((0), 100000000, 0, -462)], (0)), 100000000, 0, -460), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -459), 0), 100000000, 0, -458), 0, (("src/container_intf.ml", 431, 16341, 16343), ("src/container_intf.ml", 431, 16341, 16374), 0), 0, Tag1 ("Base__Container_intf", 94)), 0); (("iter", 7074), ((Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -455); ((0), 100000000, 0, -457)], (0)), 100000000, 0, -456), (Tag1 (("f"), (Tag1 (0, (Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -455)], (0)), 100000000, 0, -454), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -453), 0), 100000000, 0, -452), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -451), 0), 100000000, 0, -450), 0), 100000000, 0, -449), 0, (("src/container_intf.ml", 433, 16461, 16463), ("src/container_intf.ml", 433, 16461, 16523), 0), 0, Tag1 ("Base__Container_intf", 96)), 0); (("fold", 7075), ((Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -446); ((0), 100000000, 0, -448)], (0)), 100000000, 0, -447), (Tag1 (("init"), ((("acc")), 100000000, 0, -442), (Tag1 (("f"), (Tag1 (0, ((("acc")), 100000000, 0, -442), (Tag1 (0, (Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -446)], (0)), 100000000, 0, -445), ((("acc")), 100000000, 0, -442), 0), 100000000, 0, -444), 0), 100000000, 0, -443), ((("acc")), 100000000, 0, -442), 0), 100000000, 0, -441), 0), 100000000, 0, -440), 0), 100000000, 0, -439), 0, (("src/container_intf.ml", 434, 16524, 16526), ("src/container_intf.ml", 434, 16524, 16607), 0), 0, Tag1 ("Base__Container_intf", 97)), 0); (("fold_result", 7076), ((Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -436); ((0), 100000000, 0, -438)], (0)), 100000000, 0, -437), (Tag1 (("init"), ((("acc")), 100000000, 0, -430), (Tag1 (("f"), (Tag1 (0, ((("acc")), 100000000, 0, -430), (Tag1 (0, (Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -436)], (0)), 100000000, 0, -435), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Result"), "t"), [((("acc")), 100000000, 0, -430); ((("e")), 100000000, 0, -431)], (0)), 100000000, 0, -434), 0), 100000000, 0, -433), 0), 100000000, 0, -432), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Result"), "t"), [((("acc")), 100000000, 0, -430); ((("e")), 100000000, 0, -431)], (0)), 100000000, 0, -429), 0), 100000000, 0, -428), 0), 100000000, 0, -427), 0), 100000000, 0, -426), 0, (("src/container_intf.ml", 436, 16609, 16611), ("src/container_intf.ml", 440, 16720, 16746), 0), 0, Tag1 ("Base__Container_intf", 98)), 0); (("exists", 7077), ((Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -423); ((0), 100000000, 0, -425)], (0)), 100000000, 0, -424), (Tag1 (("f"), (Tag1 (0, (Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -423)], (0)), 100000000, 0, -422), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -421), 0), 100000000, 0, -420), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -419), 0), 100000000, 0, -418), 0), 100000000, 0, -417), 0, (("src/container_intf.ml", 449, 16928, 16930), ("src/container_intf.ml", 449, 16928, 16992), 0), 0, Tag1 ("Base__Container_intf", 100)), 0); (("for_all", 7078), ((Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -414); ((0), 100000000, 0, -416)], (0)), 100000000, 0, -415), (Tag1 (("f"), (Tag1 (0, (Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -414)], (0)), 100000000, 0, -413), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -412), 0), 100000000, 0, -411), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -410), 0), 100000000, 0, -409), 0), 100000000, 0, -408), 0, (("src/container_intf.ml", 450, 16993, 16995), ("src/container_intf.ml", 450, 16993, 17058), 0), 0, Tag1 ("Base__Container_intf", 101)), 0); (("count", 7079), ((Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -405); ((0), 100000000, 0, -407)], (0)), 100000000, 0, -406), (Tag1 (("f"), (Tag1 (0, (Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -405)], (0)), 100000000, 0, -404), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -403), 0), 100000000, 0, -402), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -401), 0), 100000000, 0, -400), 0), 100000000, 0, -399), 0, (("src/container_intf.ml", 451, 17059, 17061), ("src/container_intf.ml", 451, 17059, 17121), 0), 0, Tag1 ("Base__Container_intf", 102)), 0); (("sum", 7080), ((Tag1 (0, (Tag11 (Tag1 ((Tag2 ("Base__Container_intf")), "Summable"), [(("t"), ((("sum")), 100000000, 0, -392))]), 100000000, 0, -398), (Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -395); ((0), 100000000, 0, -397)], (0)), 100000000, 0, -396), (Tag1 (("f"), (Tag1 (0, (Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -395)], (0)), 100000000, 0, -394), ((("sum")), 100000000, 0, -392), 0), 100000000, 0, -393), ((("sum")), 100000000, 0, -392), 0), 100000000, 0, -391), 0), 100000000, 0, -390), 0), 100000000, 0, -389), 0, (("src/container_intf.ml", 453, 17123, 17125), ("src/container_intf.ml", 457, 17230, 17241), 0), 0, Tag1 ("Base__Container_intf", 104)), 0); (("find", 7081), ((Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -383); ((0), 100000000, 0, -388)], (0)), 100000000, 0, -387), (Tag1 (("f"), (Tag1 (0, (Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -383)], (0)), 100000000, 0, -386), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -385), 0), 100000000, 0, -384), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -383)], (0)), 100000000, 0, -382)], (0)), 100000000, 0, -381), 0), 100000000, 0, -380), 0), 100000000, 0, -379), 0, (("src/container_intf.ml", 459, 17243, 17245), ("src/container_intf.ml", 459, 17243, 17314), 0), 0, Tag1 ("Base__Container_intf", 105)), 0); (("find_map", 7082), ((Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -376); ((0), 100000000, 0, -378)], (0)), 100000000, 0, -377), (Tag1 (("f"), (Tag1 (0, (Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -376)], (0)), 100000000, 0, -375), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -372)], (0)), 100000000, 0, -374), 0), 100000000, 0, -373), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -372)], (0)), 100000000, 0, -371), 0), 100000000, 0, -370), 0), 100000000, 0, -369), 0, (("src/container_intf.ml", 460, 17315, 17317), ("src/container_intf.ml", 460, 17315, 17391), 0), 0, Tag1 ("Base__Container_intf", 106)), 0); (("to_list", 7083), ((Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -366); ((0), 100000000, 0, -368)], (0)), 100000000, 0, -367), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -366)], (0)), 100000000, 0, -365)], (0)), 100000000, 0, -364), 0), 100000000, 0, -363), 0, (("src/container_intf.ml", 461, 17392, 17394), ("src/container_intf.ml", 461, 17392, 17432), 0), 0, Tag1 ("Base__Container_intf", 107)), 0); (("to_array", 7084), ((Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -360); ((0), 100000000, 0, -362)], (0)), 100000000, 0, -361), (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -360)], (0)), 100000000, 0, -359)], (0)), 100000000, 0, -358), 0), 100000000, 0, -357), 0, (("src/container_intf.ml", 462, 17433, 17435), ("src/container_intf.ml", 462, 17433, 17475), 0), 0, Tag1 ("Base__Container_intf", 108)), 0); Tag1 (("tree", 7085), ([((("a")), 100000000, 0, -355); ((("cmp")), 100000000, 0, -356)], 2, 0, 1, 0, [7; 7], [2; 2], 0, 0, (("src/set_intf.ml", 29, 604, 606), ("src/set_intf.ml", 29, 604, 626), 0), 0, 0, 0, Tag1 ("Base__Set_intf", 12)), 1, 0); Tag1 (("access_options", 7086), ([((("a")), 100000000, 0, -352); ((("cmp")), 100000000, 0, -353); ((("z")), 100000000, 0, -354)], 3, 0, 1, 0, [7; 7; 7], [2; 2; 2], 0, 0, (("src/set_intf.ml", 33, 788, 790), ("src/set_intf.ml", 33, 788, 824), 0), 0, 0, 0, Tag1 ("Base__Set_intf", 13)), 1, 0); Tag1 (("cmp", 7087), ([((("cmp")), 100000000, 0, -351)], 1, 0, 1, 0, [7], [2], 0, 0, (("src/set_intf.ml", 35, 826, 828), ("src/set_intf.ml", 35, 826, 841), 0), 0, 0, 0, Tag1 ("Base__Set_intf", 14)), 1, 0); (("invariants", 7088), ((Tag3 ((("access_options", 7086)), [((("a")), 100000000, 0, -346); ((("cmp")), 100000000, 0, -347); (Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -346); ((("cmp")), 100000000, 0, -347)], (0)), 100000000, 0, -350), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -349), 0), 100000000, 0, -348)], (0)), 100000000, 0, -345), 0, (("src/set_intf.ml", 37, 843, 845), ("src/set_intf.ml", 37, 843, 909), 0), 0, Tag1 ("Base__Set_intf", 15)), 0); (("mem", 7089), ((Tag3 ((("access_options", 7086)), [((("a")), 100000000, 0, -338); ((("cmp")), 100000000, 0, -339); (Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -338); ((("cmp")), 100000000, 0, -339)], (0)), 100000000, 0, -344), (Tag1 (0, (Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -338)], (0)), 100000000, 0, -343), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -342), 0), 100000000, 0, -341), 0), 100000000, 0, -340)], (0)), 100000000, 0, -337), 0, (("src/set_intf.ml", 40, 949, 951), ("src/set_intf.ml", 40, 949, 1018), 0), 0, Tag1 ("Base__Set_intf", 16)), 0); (("add", 7090), ((Tag3 ((("access_options", 7086)), [((("a")), 100000000, 0, -330); ((("cmp")), 100000000, 0, -331); (Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -330); ((("cmp")), 100000000, 0, -331)], (0)), 100000000, 0, -336), (Tag1 (0, (Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -330)], (0)), 100000000, 0, -335), (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -330); ((("cmp")), 100000000, 0, -331)], (0)), 100000000, 0, -334), 0), 100000000, 0, -333), 0), 100000000, 0, -332)], (0)), 100000000, 0, -329), 0, (("src/set_intf.ml", 42, 1020, 1022), ("src/set_intf.ml", 42, 1020, 1097), 0), 0, Tag1 ("Base__Set_intf", 17)), 0); (("remove", 7091), ((Tag3 ((("access_options", 7086)), [((("a")), 100000000, 0, -322); ((("cmp")), 100000000, 0, -323); (Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -322); ((("cmp")), 100000000, 0, -323)], (0)), 100000000, 0, -328), (Tag1 (0, (Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -322)], (0)), 100000000, 0, -327), (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -322); ((("cmp")), 100000000, 0, -323)], (0)), 100000000, 0, -326), 0), 100000000, 0, -325), 0), 100000000, 0, -324)], (0)), 100000000, 0, -321), 0, (("src/set_intf.ml", 43, 1098, 1100), ("src/set_intf.ml", 43, 1098, 1178), 0), 0, Tag1 ("Base__Set_intf", 18)), 0); (("union", 7092), ((Tag3 ((("access_options", 7086)), [((("a")), 100000000, 0, -314); ((("cmp")), 100000000, 0, -315); (Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -314); ((("cmp")), 100000000, 0, -315)], (0)), 100000000, 0, -320), (Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -314); ((("cmp")), 100000000, 0, -315)], (0)), 100000000, 0, -319), (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -314); ((("cmp")), 100000000, 0, -315)], (0)), 100000000, 0, -318), 0), 100000000, 0, -317), 0), 100000000, 0, -316)], (0)), 100000000, 0, -313), 0, (("src/set_intf.ml", 44, 1179, 1181), ("src/set_intf.ml", 44, 1179, 1264), 0), 0, Tag1 ("Base__Set_intf", 19)), 0); (("inter", 7093), ((Tag3 ((("access_options", 7086)), [((("a")), 100000000, 0, -306); ((("cmp")), 100000000, 0, -307); (Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -306); ((("cmp")), 100000000, 0, -307)], (0)), 100000000, 0, -312), (Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -306); ((("cmp")), 100000000, 0, -307)], (0)), 100000000, 0, -311), (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -306); ((("cmp")), 100000000, 0, -307)], (0)), 100000000, 0, -310), 0), 100000000, 0, -309), 0), 100000000, 0, -308)], (0)), 100000000, 0, -305), 0, (("src/set_intf.ml", 45, 1265, 1267), ("src/set_intf.ml", 45, 1265, 1350), 0), 0, Tag1 ("Base__Set_intf", 20)), 0); (("diff", 7094), ((Tag3 ((("access_options", 7086)), [((("a")), 100000000, 0, -298); ((("cmp")), 100000000, 0, -299); (Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -298); ((("cmp")), 100000000, 0, -299)], (0)), 100000000, 0, -304), (Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -298); ((("cmp")), 100000000, 0, -299)], (0)), 100000000, 0, -303), (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -298); ((("cmp")), 100000000, 0, -299)], (0)), 100000000, 0, -302), 0), 100000000, 0, -301), 0), 100000000, 0, -300)], (0)), 100000000, 0, -297), 0, (("src/set_intf.ml", 46, 1351, 1353), ("src/set_intf.ml", 46, 1351, 1435), 0), 0, Tag1 ("Base__Set_intf", 21)), 0); (("symmetric_diff", 7095), ((Tag3 ((("access_options", 7086)), [((("a")), 100000000, 0, -287); ((("cmp")), 100000000, 0, -288); (Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -287); ((("cmp")), 100000000, 0, -288)], (0)), 100000000, 0, -296), (Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -287); ((("cmp")), 100000000, 0, -288)], (0)), 100000000, 0, -295), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Either"), "t"), [(Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -287)], (0)), 100000000, 0, -293); (Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -287)], (0)), 100000000, 0, -294)], (0)), 100000000, 0, -292)], (0)), 100000000, 0, -291), 0), 100000000, 0, -290), 0), 100000000, 0, -289)], (0)), 100000000, 0, -286), 0, (("src/set_intf.ml", 48, 1437, 1439), ("src/set_intf.ml", 52, 1561, 1583), 0), 0, Tag1 ("Base__Set_intf", 22)), 0); (("compare_direct", 7096), ((Tag3 ((("access_options", 7086)), [((("a")), 100000000, 0, -279); ((("cmp")), 100000000, 0, -280); (Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -279); ((("cmp")), 100000000, 0, -280)], (0)), 100000000, 0, -285), (Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -279); ((("cmp")), 100000000, 0, -280)], (0)), 100000000, 0, -284), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -283), 0), 100000000, 0, -282), 0), 100000000, 0, -281)], (0)), 100000000, 0, -278), 0, (("src/set_intf.ml", 54, 1585, 1587), ("src/set_intf.ml", 54, 1585, 1670), 0), 0, Tag1 ("Base__Set_intf", 23)), 0); (("equal", 7097), ((Tag3 ((("access_options", 7086)), [((("a")), 100000000, 0, -271); ((("cmp")), 100000000, 0, -272); (Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -271); ((("cmp")), 100000000, 0, -272)], (0)), 100000000, 0, -277), (Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -271); ((("cmp")), 100000000, 0, -272)], (0)), 100000000, 0, -276), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -275), 0), 100000000, 0, -274), 0), 100000000, 0, -273)], (0)), 100000000, 0, -270), 0, (("src/set_intf.ml", 55, 1671, 1673), ("src/set_intf.ml", 55, 1671, 1748), 0), 0, Tag1 ("Base__Set_intf", 24)), 0); (("is_subset", 7098), ((Tag3 ((("access_options", 7086)), [((("a")), 100000000, 0, -263); ((("cmp")), 100000000, 0, -264); (Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -263); ((("cmp")), 100000000, 0, -264)], (0)), 100000000, 0, -269), (Tag1 (("of_"), (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -263); ((("cmp")), 100000000, 0, -264)], (0)), 100000000, 0, -268), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -267), 0), 100000000, 0, -266), 0), 100000000, 0, -265)], (0)), 100000000, 0, -262), 0, (("src/set_intf.ml", 56, 1749, 1751), ("src/set_intf.ml", 56, 1749, 1834), 0), 0, Tag1 ("Base__Set_intf", 25)), 0); (("are_disjoint", 7099), ((Tag3 ((("access_options", 7086)), [((("a")), 100000000, 0, -255); ((("cmp")), 100000000, 0, -256); (Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -255); ((("cmp")), 100000000, 0, -256)], (0)), 100000000, 0, -261), (Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -255); ((("cmp")), 100000000, 0, -256)], (0)), 100000000, 0, -260), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -259), 0), 100000000, 0, -258), 0), 100000000, 0, -257)], (0)), 100000000, 0, -254), 0, (("src/set_intf.ml", 57, 1835, 1837), ("src/set_intf.ml", 57, 1835, 1919), 0), 0, Tag1 ("Base__Set_intf", 26)), 0); Tag3 (("Named", 7100), 0, (Tag1 ([(("is_subset", 7125), ((Tag3 ((("access_options", 7086)), [((("a")), 100000000, 0, -483); ((("cmp")), 100000000, 0, -484); (Tag1 (0, (Tag3 (Tag1 ((("Named", 7059)), "t"), [(Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -483); ((("cmp")), 100000000, 0, -484)], (0)), 100000000, 0, -492)], (0)), 100000000, 0, -491), (Tag1 (("of_"), (Tag3 (Tag1 ((("Named", 7059)), "t"), [(Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -483); ((("cmp")), 100000000, 0, -484)], (0)), 100000000, 0, -490)], (0)), 100000000, 0, -489), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -488)], (0)), 100000000, 0, -487), 0), 100000000, 0, -486), 0), 100000000, 0, -485)], (0)), 100000000, 0, -482), 0, (("src/set_intf.ml", 60, 1942, 1946), ("src/set_intf.ml", 64, 2068, 2092), 0), 0, Tag1 ("Base__Set_intf", 27)), 0); (("equal", 7126), ((Tag3 ((("access_options", 7086)), [((("a")), 100000000, 0, -472); ((("cmp")), 100000000, 0, -473); (Tag1 (0, (Tag3 (Tag1 ((("Named", 7059)), "t"), [(Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -472); ((("cmp")), 100000000, 0, -473)], (0)), 100000000, 0, -481)], (0)), 100000000, 0, -480), (Tag1 (0, (Tag3 (Tag1 ((("Named", 7059)), "t"), [(Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -472); ((("cmp")), 100000000, 0, -473)], (0)), 100000000, 0, -479)], (0)), 100000000, 0, -478), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -477)], (0)), 100000000, 0, -476), 0), 100000000, 0, -475), 0), 100000000, 0, -474)], (0)), 100000000, 0, -471), 0, (("src/set_intf.ml", 66, 2094, 2098), ("src/set_intf.ml", 70, 2212, 2236), 0), 0, Tag1 ("Base__Set_intf", 28)), 0)]), 0, (("src/set_intf.ml", 59, 1921, 1923), ("src/set_intf.ml", 71, 2237, 2242), 0), Tag1 ("Base__Set_intf", 29)), 0, 0); (("fold_until", 7101), ((Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -251); ((0), 100000000, 0, -253)], (0)), 100000000, 0, -252), (Tag1 (("init"), ((("acc")), 100000000, 0, -246), (Tag1 (("f"), (Tag1 (0, ((("acc")), 100000000, 0, -246), (Tag1 (0, (Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -251)], (0)), 100000000, 0, -250), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Container"), "Continue_or_stop"), "t"), [((("acc")), 100000000, 0, -246); ((("final")), 100000000, 0, -244)], (0)), 100000000, 0, -249), 0), 100000000, 0, -248), 0), 100000000, 0, -247), (Tag1 (("finish"), (Tag1 (0, ((("acc")), 100000000, 0, -246), ((("final")), 100000000, 0, -244), 0), 100000000, 0, -245), ((("final")), 100000000, 0, -244), 0), 100000000, 0, -243), 0), 100000000, 0, -242), 0), 100000000, 0, -241), 0), 100000000, 0, -240), 0, (("src/set_intf.ml", 73, 2244, 2246), ("src/set_intf.ml", 78, 2419, 2432), 0), 0, Tag1 ("Base__Set_intf", 30)), 0); (("fold_right", 7102), ((Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -237); ((0), 100000000, 0, -239)], (0)), 100000000, 0, -238), (Tag1 (("init"), ((("acc")), 100000000, 0, -233), (Tag1 (("f"), (Tag1 (0, (Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -237)], (0)), 100000000, 0, -236), (Tag1 (0, ((("acc")), 100000000, 0, -233), ((("acc")), 100000000, 0, -233), 0), 100000000, 0, -235), 0), 100000000, 0, -234), ((("acc")), 100000000, 0, -233), 0), 100000000, 0, -232), 0), 100000000, 0, -231), 0), 100000000, 0, -230), 0, (("src/set_intf.ml", 80, 2434, 2436), ("src/set_intf.ml", 80, 2434, 2523), 0), 0, Tag1 ("Base__Set_intf", 31)), 0); (("iter2", 7103), ((Tag3 ((("access_options", 7086)), [((("a")), 100000000, 0, -213); ((("cmp")), 100000000, 0, -214); (Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -213); ((("cmp")), 100000000, 0, -214)], (0)), 100000000, 0, -229), (Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -213); ((("cmp")), 100000000, 0, -214)], (0)), 100000000, 0, -228), (Tag1 (("f"), (Tag1 (0, (Tag8 (([("Both", (((Tag2 ([(Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -213)], (0)), 100000000, 0, -226); (Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -213)], (0)), 100000000, 0, -227)]), 100000000, 0, -225)))); ("Left", (((Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -213)], (0)), 100000000, 0, -224)))); ("Right", (((Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -213)], (0)), 100000000, 0, -223))))], (0, 100000000, 0, -222), 1, 0, 0)), 100000000, 0, -221), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -220), 0), 100000000, 0, -219), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -218), 0), 100000000, 0, -217), 0), 100000000, 0, -216), 0), 100000000, 0, -215)], (0)), 100000000, 0, -212), 0, (("src/set_intf.ml", 82, 2525, 2527), ("src/set_intf.ml", 91, 2742, 2764), 0), 0, Tag1 ("Base__Set_intf", 32)), 0); (("filter", 7104), ((Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -206); ((("cmp")), 100000000, 0, -207)], (0)), 100000000, 0, -211), (Tag1 (("f"), (Tag1 (0, (Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -206)], (0)), 100000000, 0, -210), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -209), 0), 100000000, 0, -208), (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -206); ((("cmp")), 100000000, 0, -207)], (0)), 100000000, 0, -205), 0), 100000000, 0, -204), 0), 100000000, 0, -203), 0, (("src/set_intf.ml", 93, 2766, 2768), ("src/set_intf.ml", 93, 2766, 2841), 0), 0, Tag1 ("Base__Set_intf", 33)), 0); (("partition_tf", 7105), ((Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -196); ((("cmp")), 100000000, 0, -197)], (0)), 100000000, 0, -202), (Tag1 (("f"), (Tag1 (0, (Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -196)], (0)), 100000000, 0, -201), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -200), 0), 100000000, 0, -199), (Tag2 ([(Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -196); ((("cmp")), 100000000, 0, -197)], (0)), 100000000, 0, -195); (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -196); ((("cmp")), 100000000, 0, -197)], (0)), 100000000, 0, -198)]), 100000000, 0, -194), 0), 100000000, 0, -193), 0), 100000000, 0, -192), 0, (("src/set_intf.ml", 95, 2843, 2845), ("src/set_intf.ml", 98, 2918, 2952), 0), 0, Tag1 ("Base__Set_intf", 34)), 0); (("elements", 7106), ((Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -189); ((0), 100000000, 0, -191)], (0)), 100000000, 0, -190), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -189)], (0)), 100000000, 0, -188)], (0)), 100000000, 0, -187), 0), 100000000, 0, -186), 0, (("src/set_intf.ml", 100, 2954, 2956), ("src/set_intf.ml", 100, 2954, 2995), 0), 0, Tag1 ("Base__Set_intf", 35)), 0); (("min_elt", 7107), ((Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -183); ((0), 100000000, 0, -185)], (0)), 100000000, 0, -184), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -183)], (0)), 100000000, 0, -182)], (0)), 100000000, 0, -181), 0), 100000000, 0, -180), 0, (("src/set_intf.ml", 101, 2996, 2998), ("src/set_intf.ml", 101, 2996, 3038), 0), 0, Tag1 ("Base__Set_intf", 36)), 0); (("min_elt_exn", 7108), ((Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -177); ((0), 100000000, 0, -179)], (0)), 100000000, 0, -178), (Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -177)], (0)), 100000000, 0, -176), 0), 100000000, 0, -175), 0, (("src/set_intf.ml", 102, 3039, 3041), ("src/set_intf.ml", 102, 3039, 3078), 0), 0, Tag1 ("Base__Set_intf", 37)), 0); (("max_elt", 7109), ((Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -172); ((0), 100000000, 0, -174)], (0)), 100000000, 0, -173), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -172)], (0)), 100000000, 0, -171)], (0)), 100000000, 0, -170), 0), 100000000, 0, -169), 0, (("src/set_intf.ml", 103, 3079, 3081), ("src/set_intf.ml", 103, 3079, 3121), 0), 0, Tag1 ("Base__Set_intf", 38)), 0); (("max_elt_exn", 7110), ((Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -166); ((0), 100000000, 0, -168)], (0)), 100000000, 0, -167), (Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -166)], (0)), 100000000, 0, -165), 0), 100000000, 0, -164), 0, (("src/set_intf.ml", 104, 3122, 3124), ("src/set_intf.ml", 104, 3122, 3161), 0), 0, Tag1 ("Base__Set_intf", 39)), 0); (("choose", 7111), ((Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -161); ((0), 100000000, 0, -163)], (0)), 100000000, 0, -162), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -161)], (0)), 100000000, 0, -160)], (0)), 100000000, 0, -159), 0), 100000000, 0, -158), 0, (("src/set_intf.ml", 105, 3162, 3164), ("src/set_intf.ml", 105, 3162, 3203), 0), 0, Tag1 ("Base__Set_intf", 40)), 0); (("choose_exn", 7112), ((Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -155); ((0), 100000000, 0, -157)], (0)), 100000000, 0, -156), (Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -155)], (0)), 100000000, 0, -154), 0), 100000000, 0, -153), 0, (("src/set_intf.ml", 106, 3204, 3206), ("src/set_intf.ml", 106, 3204, 3242), 0), 0, Tag1 ("Base__Set_intf", 41)), 0); (("split", 7113), ((Tag3 ((("access_options", 7086)), [((("a")), 100000000, 0, -142); ((("cmp")), 100000000, 0, -143); (Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -142); ((("cmp")), 100000000, 0, -143)], (0)), 100000000, 0, -152), (Tag1 (0, (Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -142)], (0)), 100000000, 0, -151), (Tag2 ([(Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -142); ((("cmp")), 100000000, 0, -143)], (0)), 100000000, 0, -147); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -142)], (0)), 100000000, 0, -149)], (0)), 100000000, 0, -148); (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -142); ((("cmp")), 100000000, 0, -143)], (0)), 100000000, 0, -150)]), 100000000, 0, -146), 0), 100000000, 0, -145), 0), 100000000, 0, -144)], (0)), 100000000, 0, -141), 0, (("src/set_intf.ml", 108, 3244, 3246), ("src/set_intf.ml", 112, 3360, 3382), 0), 0, Tag1 ("Base__Set_intf", 42)), 0); (("split_le_gt", 7114), ((Tag3 ((("access_options", 7086)), [((("a")), 100000000, 0, -132); ((("cmp")), 100000000, 0, -133); (Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -132); ((("cmp")), 100000000, 0, -133)], (0)), 100000000, 0, -140), (Tag1 (0, (Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -132)], (0)), 100000000, 0, -139), (Tag2 ([(Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -132); ((("cmp")), 100000000, 0, -133)], (0)), 100000000, 0, -137); (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -132); ((("cmp")), 100000000, 0, -133)], (0)), 100000000, 0, -138)]), 100000000, 0, -136), 0), 100000000, 0, -135), 0), 100000000, 0, -134)], (0)), 100000000, 0, -131), 0, (("src/set_intf.ml", 114, 3384, 3386), ("src/set_intf.ml", 115, 3402, 3488), 0), 0, Tag1 ("Base__Set_intf", 43)), 0); (("split_lt_ge", 7115), ((Tag3 ((("access_options", 7086)), [((("a")), 100000000, 0, -122); ((("cmp")), 100000000, 0, -123); (Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -122); ((("cmp")), 100000000, 0, -123)], (0)), 100000000, 0, -130), (Tag1 (0, (Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -122)], (0)), 100000000, 0, -129), (Tag2 ([(Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -122); ((("cmp")), 100000000, 0, -123)], (0)), 100000000, 0, -127); (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -122); ((("cmp")), 100000000, 0, -123)], (0)), 100000000, 0, -128)]), 100000000, 0, -126), 0), 100000000, 0, -125), 0), 100000000, 0, -124)], (0)), 100000000, 0, -121), 0, (("src/set_intf.ml", 117, 3490, 3492), ("src/set_intf.ml", 118, 3508, 3594), 0), 0, Tag1 ("Base__Set_intf", 44)), 0); (("group_by", 7116), ((Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -113); ((("cmp")), 100000000, 0, -114)], (0)), 100000000, 0, -120), (Tag1 (("equiv"), (Tag1 (0, (Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -113)], (0)), 100000000, 0, -119), (Tag1 (0, (Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -113)], (0)), 100000000, 0, -118), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -117), 0), 100000000, 0, -116), 0), 100000000, 0, -115), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -113); ((("cmp")), 100000000, 0, -114)], (0)), 100000000, 0, -112)], (0)), 100000000, 0, -111), 0), 100000000, 0, -110), 0), 100000000, 0, -109), 0, (("src/set_intf.ml", 120, 3596, 3598), ("src/set_intf.ml", 123, 3681, 3705), 0), 0, Tag1 ("Base__Set_intf", 45)), 0); (("find_exn", 7117), ((Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -103); ((0), 100000000, 0, -108)], (0)), 100000000, 0, -107), (Tag1 (("f"), (Tag1 (0, (Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -103)], (0)), 100000000, 0, -106), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -105), 0), 100000000, 0, -104), (Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -103)], (0)), 100000000, 0, -102), 0), 100000000, 0, -101), 0), 100000000, 0, -100), 0, (("src/set_intf.ml", 125, 3707, 3709), ("src/set_intf.ml", 125, 3707, 3775), 0), 0, Tag1 ("Base__Set_intf", 46)), 0); (("nth", 7118), ((Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -96); ((0), 100000000, 0, -99)], (0)), 100000000, 0, -98), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -97), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -96)], (0)), 100000000, 0, -95)], (0)), 100000000, 0, -94), 0), 100000000, 0, -93), 0), 100000000, 0, -92), 0, (("src/set_intf.ml", 126, 3776, 3778), ("src/set_intf.ml", 126, 3776, 3821), 0), 0, Tag1 ("Base__Set_intf", 47)), 0); (("remove_index", 7119), ((Tag3 ((("access_options", 7086)), [((("a")), 100000000, 0, -85); ((("cmp")), 100000000, 0, -86); (Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -85); ((("cmp")), 100000000, 0, -86)], (0)), 100000000, 0, -91), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -90), (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -85); ((("cmp")), 100000000, 0, -86)], (0)), 100000000, 0, -89), 0), 100000000, 0, -88), 0), 100000000, 0, -87)], (0)), 100000000, 0, -84), 0, (("src/set_intf.ml", 127, 3822, 3824), ("src/set_intf.ml", 127, 3822, 3905), 0), 0, Tag1 ("Base__Set_intf", 48)), 0); (("to_tree", 7120), ((Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -80); ((("cmp")), 100000000, 0, -82)], (0)), 100000000, 0, -83), (Tag3 ((("tree", 7085)), [(Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -80)], (0)), 100000000, 0, -79); (Tag3 ((("cmp", 7087)), [((("cmp")), 100000000, 0, -82)], (0)), 100000000, 0, -81)], (0)), 100000000, 0, -78), 0), 100000000, 0, -77), 0, (("src/set_intf.ml", 128, 3906, 3908), ("src/set_intf.ml", 128, 3906, 3961), 0), 0, Tag1 ("Base__Set_intf", 49)), 0); (("to_sequence", 7121), ((Tag3 ((("access_options", 7086)), [((("a")), 100000000, 0, -61); ((("cmp")), 100000000, 0, -62); (Tag1 (Tag1 ("order"), (Tag3 ((Tag3 ("option", 10)), [(Tag8 (([("Decreasing", (0)); ("Increasing", (0))], (0, 100000000, 0, -76), 1, 0, 0)), 100000000, 0, -75)], (0)), 100000000, 0, -74), (Tag1 (Tag1 ("greater_or_equal_to"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -61)], (0)), 100000000, 0, -73)], (0)), 100000000, 0, -72), (Tag1 (Tag1 ("less_or_equal_to"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -61)], (0)), 100000000, 0, -71)], (0)), 100000000, 0, -70), (Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -61); ((("cmp")), 100000000, 0, -62)], (0)), 100000000, 0, -69), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -61)], (0)), 100000000, 0, -68)], (0)), 100000000, 0, -67), 0), 100000000, 0, -66), 0), 100000000, 0, -65), 0), 100000000, 0, -64), 0), 100000000, 0, -63)], (0)), 100000000, 0, -60), 0, (("src/set_intf.ml", 130, 3963, 3965), ("src/set_intf.ml", 138, 4172, 4194), 0), 0, Tag1 ("Base__Set_intf", 50)), 0); (("binary_search", 7122), ((Tag3 ((("access_options", 7086)), [((("a")), 100000000, 0, -45); ((("cmp")), 100000000, 0, -46); (Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -45); ((("cmp")), 100000000, 0, -46)], (0)), 100000000, 0, -59), (Tag1 (("compare"), (Tag1 (0, (Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -45)], (0)), 100000000, 0, -58), (Tag1 (0, ((("key")), 100000000, 0, -53), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -57), 0), 100000000, 0, -56), 0), 100000000, 0, -55), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Binary_searchable"), "Which_target_by_key"), "t"), 0, (0)), 100000000, 0, -54), (Tag1 (0, ((("key")), 100000000, 0, -53), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -45)], (0)), 100000000, 0, -52)], (0)), 100000000, 0, -51), 0), 100000000, 0, -50), 0), 100000000, 0, -49), 0), 100000000, 0, -48), 0), 100000000, 0, -47)], (0)), 100000000, 0, -44), 0, (("src/set_intf.ml", 140, 4196, 4198), ("src/set_intf.ml", 148, 4400, 4422), 0), 0, Tag1 ("Base__Set_intf", 51)), 0); (("binary_search_segmented", 7123), ((Tag3 ((("access_options", 7086)), [((("a")), 100000000, 0, -31); ((("cmp")), 100000000, 0, -32); (Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -31); ((("cmp")), 100000000, 0, -32)], (0)), 100000000, 0, -43), (Tag1 (("segment_of"), (Tag1 (0, (Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -31)], (0)), 100000000, 0, -42), (Tag8 (([("Left", (0)); ("Right", (0))], (0, 100000000, 0, -41), 1, 0, 0)), 100000000, 0, -40), 0), 100000000, 0, -39), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Binary_searchable"), "Which_target_by_segment"), "t"), 0, (0)), 100000000, 0, -38), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -31)], (0)), 100000000, 0, -37)], (0)), 100000000, 0, -36), 0), 100000000, 0, -35), 0), 100000000, 0, -34), 0), 100000000, 0, -33)], (0)), 100000000, 0, -30), 0, (("src/set_intf.ml", 150, 4424, 4426), ("src/set_intf.ml", 157, 4638, 4660), 0), 0, Tag1 ("Base__Set_intf", 52)), 0); (("merge_to_sequence", 7124), ((Tag3 ((("access_options", 7086)), [((("a")), 100000000, 0, -10); ((("cmp")), 100000000, 0, -11); (Tag1 (Tag1 ("order"), (Tag3 ((Tag3 ("option", 10)), [(Tag8 (([("Decreasing", (0)); ("Increasing", (0))], (0, 100000000, 0, -29), 1, 0, 0)), 100000000, 0, -28)], (0)), 100000000, 0, -27), (Tag1 (Tag1 ("greater_or_equal_to"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -10)], (0)), 100000000, 0, -26)], (0)), 100000000, 0, -25), (Tag1 (Tag1 ("less_or_equal_to"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -10)], (0)), 100000000, 0, -24)], (0)), 100000000, 0, -23), (Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -10); ((("cmp")), 100000000, 0, -11)], (0)), 100000000, 0, -22), (Tag1 (0, (Tag3 ((("t", 7070)), [((("a")), 100000000, 0, -10); ((("cmp")), 100000000, 0, -11)], (0)), 100000000, 0, -21), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag3 (Tag1 ((("Merge_to_sequence_element", 7058)), "t"), [(Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -10)], (0)), 100000000, 0, -19); (Tag3 ((("elt", 7071)), [((("a")), 100000000, 0, -10)], (0)), 100000000, 0, -20)], (0)), 100000000, 0, -18)], (0)), 100000000, 0, -17), 0), 100000000, 0, -16), 0), 100000000, 0, -15), 0), 100000000, 0, -14), 0), 100000000, 0, -13), 0), 100000000, 0, -12)], (0)), 100000000, 0, -9), 0, (("src/set_intf.ml", 159, 4662, 4664), ("src/set_intf.ml", 168, 4937, 4959), 0), 0, Tag1 ("Base__Set_intf", 53)), 0)])), 0, (("src/set_intf.ml", 26, 539, 539), ("src/set_intf.ml", 169, 4960, 4963), 0), Tag1 ("Base__Set_intf", 54)), 0); Tag4 (("Creators_generic", 7061), ((Tag1 ([Tag1 (("t", 7127), ([((("a")), 100000000, 0, -604); ((("cmp")), 100000000, 0, -605)], 2, 0, 1, 0, [7; 7], [2; 2], 0, 0, (("src/set_intf.ml", 172, 5000, 5002), ("src/set_intf.ml", 172, 5000, 5019), 0), 0, 0, 0, Tag1 ("Base__Set_intf", 55)), 1, 0); Tag1 (("set", 7128), ([((("a")), 100000000, 0, -602); ((("cmp")), 100000000, 0, -603)], 2, 0, 1, 0, [7; 7], [2; 2], 0, 0, (("src/set_intf.ml", 173, 5020, 5022), ("src/set_intf.ml", 173, 5020, 5041), 0), 0, 0, 0, Tag1 ("Base__Set_intf", 56)), 1, 0); Tag1 (("tree", 7129), ([((("a")), 100000000, 0, -600); ((("cmp")), 100000000, 0, -601)], 2, 0, 1, 0, [7; 7], [2; 2], 0, 0, (("src/set_intf.ml", 174, 5042, 5044), ("src/set_intf.ml", 174, 5042, 5064), 0), 0, 0, 0, Tag1 ("Base__Set_intf", 57)), 1, 0); Tag1 (("elt", 7130), ([((("a")), 100000000, 0, -599)], 1, 0, 1, 0, [7], [2], 0, 0, (("src/set_intf.ml", 175, 5065, 5067), ("src/set_intf.ml", 175, 5065, 5078), 0), 0, 0, 0, Tag1 ("Base__Set_intf", 58)), 1, 0); Tag1 (("create_options", 7131), ([((("a")), 100000000, 0, -596); ((("cmp")), 100000000, 0, -597); ((("z")), 100000000, 0, -598)], 3, 0, 1, 0, [7; 7; 7], [2; 2; 2], 0, 0, (("src/set_intf.ml", 176, 5079, 5081), ("src/set_intf.ml", 176, 5079, 5115), 0), 0, 0, 0, Tag1 ("Base__Set_intf", 59)), 1, 0); Tag1 (("cmp", 7132), ([((("cmp")), 100000000, 0, -595)], 1, 0, 1, 0, [7], [2], 0, 0, (("src/set_intf.ml", 177, 5116, 5118), ("src/set_intf.ml", 177, 5116, 5131), 0), 0, 0, 0, Tag1 ("Base__Set_intf", 60)), 1, 0); (("empty", 7133), ((Tag3 ((("create_options", 7131)), [((("a")), 100000000, 0, -592); ((("cmp")), 100000000, 0, -593); (Tag3 ((("t", 7127)), [((("a")), 100000000, 0, -592); ((("cmp")), 100000000, 0, -593)], (0)), 100000000, 0, -594)], (0)), 100000000, 0, -591), 0, (("src/set_intf.ml", 179, 5133, 5135), ("src/set_intf.ml", 179, 5133, 5186), 0), 0, Tag1 ("Base__Set_intf", 61)), 0); (("singleton", 7134), ((Tag3 ((("create_options", 7131)), [((("a")), 100000000, 0, -586); ((("cmp")), 100000000, 0, -587); (Tag1 (0, (Tag3 ((("elt", 7130)), [((("a")), 100000000, 0, -586)], (0)), 100000000, 0, -590), (Tag3 ((("t", 7127)), [((("a")), 100000000, 0, -586); ((("cmp")), 100000000, 0, -587)], (0)), 100000000, 0, -589), 0), 100000000, 0, -588)], (0)), 100000000, 0, -585), 0, (("src/set_intf.ml", 180, 5187, 5189), ("src/set_intf.ml", 180, 5187, 5254), 0), 0, Tag1 ("Base__Set_intf", 62)), 0); (("union_list", 7135), ((Tag3 ((("create_options", 7131)), [((("a")), 100000000, 0, -579); ((("cmp")), 100000000, 0, -580); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 7127)), [((("a")), 100000000, 0, -579); ((("cmp")), 100000000, 0, -580)], (0)), 100000000, 0, -584)], (0)), 100000000, 0, -583), (Tag3 ((("t", 7127)), [((("a")), 100000000, 0, -579); ((("cmp")), 100000000, 0, -580)], (0)), 100000000, 0, -582), 0), 100000000, 0, -581)], (0)), 100000000, 0, -578), 0, (("src/set_intf.ml", 181, 5255, 5257), ("src/set_intf.ml", 181, 5255, 5334), 0), 0, Tag1 ("Base__Set_intf", 63)), 0); (("of_list", 7136), ((Tag3 ((("create_options", 7131)), [((("a")), 100000000, 0, -572); ((("cmp")), 100000000, 0, -573); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 7130)), [((("a")), 100000000, 0, -572)], (0)), 100000000, 0, -577)], (0)), 100000000, 0, -576), (Tag3 ((("t", 7127)), [((("a")), 100000000, 0, -572); ((("cmp")), 100000000, 0, -573)], (0)), 100000000, 0, -575), 0), 100000000, 0, -574)], (0)), 100000000, 0, -571), 0, (("src/set_intf.ml", 182, 5335, 5337), ("src/set_intf.ml", 182, 5335, 5405), 0), 0, Tag1 ("Base__Set_intf", 64)), 0); (("of_sequence", 7137), ((Tag3 ((("create_options", 7131)), [((("a")), 100000000, 0, -565); ((("cmp")), 100000000, 0, -566); (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag3 ((("elt", 7130)), [((("a")), 100000000, 0, -565)], (0)), 100000000, 0, -570)], (0)), 100000000, 0, -569), (Tag3 ((("t", 7127)), [((("a")), 100000000, 0, -565); ((("cmp")), 100000000, 0, -566)], (0)), 100000000, 0, -568), 0), 100000000, 0, -567)], (0)), 100000000, 0, -564), 0, (("src/set_intf.ml", 183, 5406, 5408), ("src/set_intf.ml", 183, 5406, 5486), 0), 0, Tag1 ("Base__Set_intf", 65)), 0); (("of_array", 7138), ((Tag3 ((("create_options", 7131)), [((("a")), 100000000, 0, -558); ((("cmp")), 100000000, 0, -559); (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("elt", 7130)), [((("a")), 100000000, 0, -558)], (0)), 100000000, 0, -563)], (0)), 100000000, 0, -562), (Tag3 ((("t", 7127)), [((("a")), 100000000, 0, -558); ((("cmp")), 100000000, 0, -559)], (0)), 100000000, 0, -561), 0), 100000000, 0, -560)], (0)), 100000000, 0, -557), 0, (("src/set_intf.ml", 184, 5487, 5489), ("src/set_intf.ml", 184, 5487, 5559), 0), 0, Tag1 ("Base__Set_intf", 66)), 0); (("of_sorted_array", 7139), ((Tag3 ((("create_options", 7131)), [((("a")), 100000000, 0, -550); ((("cmp")), 100000000, 0, -551); (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("elt", 7130)), [((("a")), 100000000, 0, -550)], (0)), 100000000, 0, -556)], (0)), 100000000, 0, -555), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((("t", 7127)), [((("a")), 100000000, 0, -550); ((("cmp")), 100000000, 0, -551)], (0)), 100000000, 0, -554)], (0)), 100000000, 0, -553), 0), 100000000, 0, -552)], (0)), 100000000, 0, -549), 0, (("src/set_intf.ml", 185, 5560, 5562), ("src/set_intf.ml", 185, 5560, 5650), 0), 0, Tag1 ("Base__Set_intf", 67)), 0); (("of_sorted_array_unchecked", 7140), ((Tag3 ((("create_options", 7131)), [((("a")), 100000000, 0, -543); ((("cmp")), 100000000, 0, -544); (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("elt", 7130)), [((("a")), 100000000, 0, -543)], (0)), 100000000, 0, -548)], (0)), 100000000, 0, -547), (Tag3 ((("t", 7127)), [((("a")), 100000000, 0, -543); ((("cmp")), 100000000, 0, -544)], (0)), 100000000, 0, -546), 0), 100000000, 0, -545)], (0)), 100000000, 0, -542), 0, (("src/set_intf.ml", 186, 5651, 5653), ("src/set_intf.ml", 186, 5651, 5740), 0), 0, Tag1 ("Base__Set_intf", 68)), 0); (("of_increasing_iterator_unchecked", 7141), ((Tag3 ((("create_options", 7131)), [((("a")), 100000000, 0, -533); ((("cmp")), 100000000, 0, -534); (Tag1 (("len"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -541), (Tag1 (("f"), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -540), (Tag3 ((("elt", 7130)), [((("a")), 100000000, 0, -533)], (0)), 100000000, 0, -539), 0), 100000000, 0, -538), (Tag3 ((("t", 7127)), [((("a")), 100000000, 0, -533); ((("cmp")), 100000000, 0, -534)], (0)), 100000000, 0, -537), 0), 100000000, 0, -536), 0), 100000000, 0, -535)], (0)), 100000000, 0, -532), 0, (("src/set_intf.ml", 188, 5742, 5744), ("src/set_intf.ml", 189, 5781, 5868), 0), 0, Tag1 ("Base__Set_intf", 69)), 0); (("stable_dedup_list", 7142), ((Tag3 ((("create_options", 7131)), [((("a")), 100000000, 0, -525); ((0), 100000000, 0, -526); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 7130)), [((("a")), 100000000, 0, -525)], (0)), 100000000, 0, -531)], (0)), 100000000, 0, -530), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 7130)), [((("a")), 100000000, 0, -525)], (0)), 100000000, 0, -529)], (0)), 100000000, 0, -528), 0), 100000000, 0, -527)], (0)), 100000000, 0, -524), 0, (("src/set_intf.ml", 191, 5870, 5872), ("src/set_intf.ml", 191, 5870, 5946), 0), 0, Tag1 ("Base__Set_intf", 70)), 0); (("map", 7143), ((Tag3 ((("create_options", 7131)), [((("b")), 100000000, 0, -514); ((("cmp")), 100000000, 0, -515); (Tag1 (0, (Tag3 ((("set", 7128)), [((("a")), 100000000, 0, -521); ((0), 100000000, 0, -523)], (0)), 100000000, 0, -522), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -521), (Tag3 ((("elt", 7130)), [((("b")), 100000000, 0, -514)], (0)), 100000000, 0, -520), 0), 100000000, 0, -519), (Tag3 ((("t", 7127)), [((("b")), 100000000, 0, -514); ((("cmp")), 100000000, 0, -515)], (0)), 100000000, 0, -518), 0), 100000000, 0, -517), 0), 100000000, 0, -516)], (0)), 100000000, 0, -513), 0, (("src/set_intf.ml", 202, 6523, 6525), ("src/set_intf.ml", 203, 6533, 6623), 0), 0, Tag1 ("Base__Set_intf", 71)), 0); (("filter_map", 7144), ((Tag3 ((("create_options", 7131)), [((("b")), 100000000, 0, -502); ((("cmp")), 100000000, 0, -503); (Tag1 (0, (Tag3 ((("set", 7128)), [((("a")), 100000000, 0, -510); ((0), 100000000, 0, -512)], (0)), 100000000, 0, -511), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -510), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 7130)), [((("b")), 100000000, 0, -502)], (0)), 100000000, 0, -509)], (0)), 100000000, 0, -508), 0), 100000000, 0, -507), (Tag3 ((("t", 7127)), [((("b")), 100000000, 0, -502); ((("cmp")), 100000000, 0, -503)], (0)), 100000000, 0, -506), 0), 100000000, 0, -505), 0), 100000000, 0, -504)], (0)), 100000000, 0, -501), 0, (("src/set_intf.ml", 205, 6625, 6627), ("src/set_intf.ml", 209, 6741, 6763), 0), 0, Tag1 ("Base__Set_intf", 72)), 0); (("of_tree", 7145), ((Tag3 ((("create_options", 7131)), [((("a")), 100000000, 0, -494); ((("cmp")), 100000000, 0, -495); (Tag1 (0, (Tag3 ((("tree", 7129)), [(Tag3 ((("elt", 7130)), [((("a")), 100000000, 0, -494)], (0)), 100000000, 0, -499); (Tag3 ((("cmp", 7132)), [((("cmp")), 100000000, 0, -495)], (0)), 100000000, 0, -500)], (0)), 100000000, 0, -498), (Tag3 ((("t", 7127)), [((("a")), 100000000, 0, -494); ((("cmp")), 100000000, 0, -495)], (0)), 100000000, 0, -497), 0), 100000000, 0, -496)], (0)), 100000000, 0, -493), 0, (("src/set_intf.ml", 211, 6765, 6767), ("src/set_intf.ml", 211, 6765, 6847), 0), 0, Tag1 ("Base__Set_intf", 73)), 0)])), 0, (("src/set_intf.ml", 171, 4965, 4965), ("src/set_intf.ml", 212, 6848, 6851), 0), Tag1 ("Base__Set_intf", 74)), 0); Tag4 (("Creators_and_accessors_generic", 7062), ((Tag1 ([Tag1 (("t", 7146), ([((("elt")), 100000000, 0, -1173); ((("cmp")), 100000000, 0, -1174)], 2, 0, 1, 0, [7; 7], [2; 2], 0, 0, (("src/set_intf.ml", 215, 6902, 6904), ("src/set_intf.ml", 215, 6902, 6923), 0), 0, 0, 0, Tag1 ("Base__Set_intf", 75)), 1, 0); Tag1 (("tree", 7147), ([((("elt")), 100000000, 0, -1171); ((("cmp")), 100000000, 0, -1172)], 2, 0, 1, 0, [7; 7], [2; 2], 0, 0, (("src/set_intf.ml", 216, 6924, 6926), ("src/set_intf.ml", 216, 6924, 6948), 0), 0, 0, 0, Tag1 ("Base__Set_intf", 76)), 1, 0); Tag1 (("elt", 7148), ([((("elt")), 100000000, 0, -1170)], 1, 0, 1, 0, [7], [2], 0, 0, (("src/set_intf.ml", 217, 6949, 6951), ("src/set_intf.ml", 217, 6949, 6964), 0), 0, 0, 0, Tag1 ("Base__Set_intf", 77)), 1, 0); Tag1 (("cmp", 7149), ([((("cmp")), 100000000, 0, -1169)], 1, 0, 1, 0, [7], [2], 0, 0, (("src/set_intf.ml", 218, 6965, 6967), ("src/set_intf.ml", 218, 6965, 6980), 0), 0, 0, 0, Tag1 ("Base__Set_intf", 78)), 1, 0); (("length", 7150), ((Tag1 (0, (Tag3 ((("t", 7146)), [((0), 100000000, 0, -1167); ((0), 100000000, 0, -1168)], (0)), 100000000, 0, -1166), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1165), 0), 100000000, 0, -1164), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Container_intf", 93)), 0); (("is_empty", 7151), ((Tag1 (0, (Tag3 ((("t", 7146)), [((0), 100000000, 0, -1162); ((0), 100000000, 0, -1163)], (0)), 100000000, 0, -1161), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1160), 0), 100000000, 0, -1159), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Container_intf", 94)), 0); (("iter", 7152), ((Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -1156); ((0), 100000000, 0, -1158)], (0)), 100000000, 0, -1157), (Tag1 (("f"), (Tag1 (0, (Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -1156)], (0)), 100000000, 0, -1155), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1154), 0), 100000000, 0, -1153), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1152), 0), 100000000, 0, -1151), 0), 100000000, 0, -1150), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Container_intf", 96)), 0); (("fold", 7153), ((Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -1147); ((0), 100000000, 0, -1149)], (0)), 100000000, 0, -1148), (Tag1 (("init"), ((("acc")), 100000000, 0, -1143), (Tag1 (("f"), (Tag1 (0, ((("acc")), 100000000, 0, -1143), (Tag1 (0, (Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -1147)], (0)), 100000000, 0, -1146), ((("acc")), 100000000, 0, -1143), 0), 100000000, 0, -1145), 0), 100000000, 0, -1144), ((("acc")), 100000000, 0, -1143), 0), 100000000, 0, -1142), 0), 100000000, 0, -1141), 0), 100000000, 0, -1140), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Container_intf", 97)), 0); (("fold_result", 7154), ((Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -1137); ((0), 100000000, 0, -1139)], (0)), 100000000, 0, -1138), (Tag1 (("init"), ((("acc")), 100000000, 0, -1131), (Tag1 (("f"), (Tag1 (0, ((("acc")), 100000000, 0, -1131), (Tag1 (0, (Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -1137)], (0)), 100000000, 0, -1136), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Result"), "t"), [((("acc")), 100000000, 0, -1131); ((("e")), 100000000, 0, -1132)], (0)), 100000000, 0, -1135), 0), 100000000, 0, -1134), 0), 100000000, 0, -1133), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Result"), "t"), [((("acc")), 100000000, 0, -1131); ((("e")), 100000000, 0, -1132)], (0)), 100000000, 0, -1130), 0), 100000000, 0, -1129), 0), 100000000, 0, -1128), 0), 100000000, 0, -1127), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Container_intf", 98)), 0); (("exists", 7155), ((Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -1124); ((0), 100000000, 0, -1126)], (0)), 100000000, 0, -1125), (Tag1 (("f"), (Tag1 (0, (Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -1124)], (0)), 100000000, 0, -1123), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1122), 0), 100000000, 0, -1121), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1120), 0), 100000000, 0, -1119), 0), 100000000, 0, -1118), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Container_intf", 100)), 0); (("for_all", 7156), ((Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -1115); ((0), 100000000, 0, -1117)], (0)), 100000000, 0, -1116), (Tag1 (("f"), (Tag1 (0, (Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -1115)], (0)), 100000000, 0, -1114), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1113), 0), 100000000, 0, -1112), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1111), 0), 100000000, 0, -1110), 0), 100000000, 0, -1109), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Container_intf", 101)), 0); (("count", 7157), ((Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -1106); ((0), 100000000, 0, -1108)], (0)), 100000000, 0, -1107), (Tag1 (("f"), (Tag1 (0, (Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -1106)], (0)), 100000000, 0, -1105), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1104), 0), 100000000, 0, -1103), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1102), 0), 100000000, 0, -1101), 0), 100000000, 0, -1100), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Container_intf", 102)), 0); (("sum", 7158), ((Tag1 (0, (Tag11 (Tag1 ((Tag2 ("Base__Container_intf")), "Summable"), [(("t"), ((("sum")), 100000000, 0, -1093))]), 100000000, 0, -1099), (Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -1096); ((0), 100000000, 0, -1098)], (0)), 100000000, 0, -1097), (Tag1 (("f"), (Tag1 (0, (Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -1096)], (0)), 100000000, 0, -1095), ((("sum")), 100000000, 0, -1093), 0), 100000000, 0, -1094), ((("sum")), 100000000, 0, -1093), 0), 100000000, 0, -1092), 0), 100000000, 0, -1091), 0), 100000000, 0, -1090), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Container_intf", 104)), 0); (("find", 7159), ((Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -1084); ((0), 100000000, 0, -1089)], (0)), 100000000, 0, -1088), (Tag1 (("f"), (Tag1 (0, (Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -1084)], (0)), 100000000, 0, -1087), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1086), 0), 100000000, 0, -1085), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -1084)], (0)), 100000000, 0, -1083)], (0)), 100000000, 0, -1082), 0), 100000000, 0, -1081), 0), 100000000, 0, -1080), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Container_intf", 105)), 0); (("find_map", 7160), ((Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -1077); ((0), 100000000, 0, -1079)], (0)), 100000000, 0, -1078), (Tag1 (("f"), (Tag1 (0, (Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -1077)], (0)), 100000000, 0, -1076), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -1073)], (0)), 100000000, 0, -1075), 0), 100000000, 0, -1074), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -1073)], (0)), 100000000, 0, -1072), 0), 100000000, 0, -1071), 0), 100000000, 0, -1070), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Container_intf", 106)), 0); (("to_list", 7161), ((Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -1067); ((0), 100000000, 0, -1069)], (0)), 100000000, 0, -1068), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -1067)], (0)), 100000000, 0, -1066)], (0)), 100000000, 0, -1065), 0), 100000000, 0, -1064), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Container_intf", 107)), 0); (("to_array", 7162), ((Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -1061); ((0), 100000000, 0, -1063)], (0)), 100000000, 0, -1062), (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -1061)], (0)), 100000000, 0, -1060)], (0)), 100000000, 0, -1059), 0), 100000000, 0, -1058), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Container_intf", 108)), 0); Tag1 (("access_options", 7163), ([((("a")), 100000000, 0, -1055); ((("cmp")), 100000000, 0, -1056); ((("z")), 100000000, 0, -1057)], 3, 0, 1, 0, [7; 7; 7], [2; 2; 2], 0, 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, 0, 0, Tag1 ("Base__Set_intf", 13)), 1, 0); (("invariants", 7164), ((Tag3 ((("access_options", 7163)), [((("a")), 100000000, 0, -1050); ((("cmp")), 100000000, 0, -1051); (Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -1050); ((("cmp")), 100000000, 0, -1051)], (0)), 100000000, 0, -1054), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1053), 0), 100000000, 0, -1052)], (0)), 100000000, 0, -1049), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Set_intf", 15)), 0); (("mem", 7165), ((Tag3 ((("access_options", 7163)), [((("a")), 100000000, 0, -1042); ((("cmp")), 100000000, 0, -1043); (Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -1042); ((("cmp")), 100000000, 0, -1043)], (0)), 100000000, 0, -1048), (Tag1 (0, (Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -1042)], (0)), 100000000, 0, -1047), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1046), 0), 100000000, 0, -1045), 0), 100000000, 0, -1044)], (0)), 100000000, 0, -1041), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Set_intf", 16)), 0); (("add", 7166), ((Tag3 ((("access_options", 7163)), [((("a")), 100000000, 0, -1034); ((("cmp")), 100000000, 0, -1035); (Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -1034); ((("cmp")), 100000000, 0, -1035)], (0)), 100000000, 0, -1040), (Tag1 (0, (Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -1034)], (0)), 100000000, 0, -1039), (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -1034); ((("cmp")), 100000000, 0, -1035)], (0)), 100000000, 0, -1038), 0), 100000000, 0, -1037), 0), 100000000, 0, -1036)], (0)), 100000000, 0, -1033), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Set_intf", 17)), 0); (("remove", 7167), ((Tag3 ((("access_options", 7163)), [((("a")), 100000000, 0, -1026); ((("cmp")), 100000000, 0, -1027); (Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -1026); ((("cmp")), 100000000, 0, -1027)], (0)), 100000000, 0, -1032), (Tag1 (0, (Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -1026)], (0)), 100000000, 0, -1031), (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -1026); ((("cmp")), 100000000, 0, -1027)], (0)), 100000000, 0, -1030), 0), 100000000, 0, -1029), 0), 100000000, 0, -1028)], (0)), 100000000, 0, -1025), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Set_intf", 18)), 0); (("union", 7168), ((Tag3 ((("access_options", 7163)), [((("a")), 100000000, 0, -1018); ((("cmp")), 100000000, 0, -1019); (Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -1018); ((("cmp")), 100000000, 0, -1019)], (0)), 100000000, 0, -1024), (Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -1018); ((("cmp")), 100000000, 0, -1019)], (0)), 100000000, 0, -1023), (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -1018); ((("cmp")), 100000000, 0, -1019)], (0)), 100000000, 0, -1022), 0), 100000000, 0, -1021), 0), 100000000, 0, -1020)], (0)), 100000000, 0, -1017), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Set_intf", 19)), 0); (("inter", 7169), ((Tag3 ((("access_options", 7163)), [((("a")), 100000000, 0, -1010); ((("cmp")), 100000000, 0, -1011); (Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -1010); ((("cmp")), 100000000, 0, -1011)], (0)), 100000000, 0, -1016), (Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -1010); ((("cmp")), 100000000, 0, -1011)], (0)), 100000000, 0, -1015), (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -1010); ((("cmp")), 100000000, 0, -1011)], (0)), 100000000, 0, -1014), 0), 100000000, 0, -1013), 0), 100000000, 0, -1012)], (0)), 100000000, 0, -1009), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Set_intf", 20)), 0); (("diff", 7170), ((Tag3 ((("access_options", 7163)), [((("a")), 100000000, 0, -1002); ((("cmp")), 100000000, 0, -1003); (Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -1002); ((("cmp")), 100000000, 0, -1003)], (0)), 100000000, 0, -1008), (Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -1002); ((("cmp")), 100000000, 0, -1003)], (0)), 100000000, 0, -1007), (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -1002); ((("cmp")), 100000000, 0, -1003)], (0)), 100000000, 0, -1006), 0), 100000000, 0, -1005), 0), 100000000, 0, -1004)], (0)), 100000000, 0, -1001), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Set_intf", 21)), 0); (("symmetric_diff", 7171), ((Tag3 ((("access_options", 7163)), [((("a")), 100000000, 0, -991); ((("cmp")), 100000000, 0, -992); (Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -991); ((("cmp")), 100000000, 0, -992)], (0)), 100000000, 0, -1000), (Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -991); ((("cmp")), 100000000, 0, -992)], (0)), 100000000, 0, -999), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Either"), "t"), [(Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -991)], (0)), 100000000, 0, -997); (Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -991)], (0)), 100000000, 0, -998)], (0)), 100000000, 0, -996)], (0)), 100000000, 0, -995), 0), 100000000, 0, -994), 0), 100000000, 0, -993)], (0)), 100000000, 0, -990), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Set_intf", 22)), 0); (("compare_direct", 7172), ((Tag3 ((("access_options", 7163)), [((("a")), 100000000, 0, -983); ((("cmp")), 100000000, 0, -984); (Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -983); ((("cmp")), 100000000, 0, -984)], (0)), 100000000, 0, -989), (Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -983); ((("cmp")), 100000000, 0, -984)], (0)), 100000000, 0, -988), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -987), 0), 100000000, 0, -986), 0), 100000000, 0, -985)], (0)), 100000000, 0, -982), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Set_intf", 23)), 0); (("equal", 7173), ((Tag3 ((("access_options", 7163)), [((("a")), 100000000, 0, -975); ((("cmp")), 100000000, 0, -976); (Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -975); ((("cmp")), 100000000, 0, -976)], (0)), 100000000, 0, -981), (Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -975); ((("cmp")), 100000000, 0, -976)], (0)), 100000000, 0, -980), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -979), 0), 100000000, 0, -978), 0), 100000000, 0, -977)], (0)), 100000000, 0, -974), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Set_intf", 24)), 0); (("is_subset", 7174), ((Tag3 ((("access_options", 7163)), [((("a")), 100000000, 0, -967); ((("cmp")), 100000000, 0, -968); (Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -967); ((("cmp")), 100000000, 0, -968)], (0)), 100000000, 0, -973), (Tag1 (("of_"), (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -967); ((("cmp")), 100000000, 0, -968)], (0)), 100000000, 0, -972), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -971), 0), 100000000, 0, -970), 0), 100000000, 0, -969)], (0)), 100000000, 0, -966), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Set_intf", 25)), 0); (("are_disjoint", 7175), ((Tag3 ((("access_options", 7163)), [((("a")), 100000000, 0, -959); ((("cmp")), 100000000, 0, -960); (Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -959); ((("cmp")), 100000000, 0, -960)], (0)), 100000000, 0, -965), (Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -959); ((("cmp")), 100000000, 0, -960)], (0)), 100000000, 0, -964), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -963), 0), 100000000, 0, -962), 0), 100000000, 0, -961)], (0)), 100000000, 0, -958), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Set_intf", 26)), 0); Tag3 (("Named", 7176), 0, (Tag1 ([(("is_subset", 7216), ((Tag3 ((("access_options", 7163)), [((("a")), 100000000, 0, -1187); ((("cmp")), 100000000, 0, -1188); (Tag1 (0, (Tag3 (Tag1 ((("Named", 7059)), "t"), [(Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -1187); ((("cmp")), 100000000, 0, -1188)], (0)), 100000000, 0, -1196)], (0)), 100000000, 0, -1195), (Tag1 (("of_"), (Tag3 (Tag1 ((("Named", 7059)), "t"), [(Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -1187); ((("cmp")), 100000000, 0, -1188)], (0)), 100000000, 0, -1194)], (0)), 100000000, 0, -1193), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1192)], (0)), 100000000, 0, -1191), 0), 100000000, 0, -1190), 0), 100000000, 0, -1189)], (0)), 100000000, 0, -1186), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Set_intf", 27)), 0); (("equal", 7217), ((Tag3 ((("access_options", 7163)), [((("a")), 100000000, 0, -1176); ((("cmp")), 100000000, 0, -1177); (Tag1 (0, (Tag3 (Tag1 ((("Named", 7059)), "t"), [(Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -1176); ((("cmp")), 100000000, 0, -1177)], (0)), 100000000, 0, -1185)], (0)), 100000000, 0, -1184), (Tag1 (0, (Tag3 (Tag1 ((("Named", 7059)), "t"), [(Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -1176); ((("cmp")), 100000000, 0, -1177)], (0)), 100000000, 0, -1183)], (0)), 100000000, 0, -1182), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1181)], (0)), 100000000, 0, -1180), 0), 100000000, 0, -1179), 0), 100000000, 0, -1178)], (0)), 100000000, 0, -1175), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Set_intf", 28)), 0)]), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), Tag1 ("Base__Set_intf", 29)), 0, 0); (("fold_until", 7177), ((Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -955); ((0), 100000000, 0, -957)], (0)), 100000000, 0, -956), (Tag1 (("init"), ((("acc")), 100000000, 0, -950), (Tag1 (("f"), (Tag1 (0, ((("acc")), 100000000, 0, -950), (Tag1 (0, (Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -955)], (0)), 100000000, 0, -954), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Container"), "Continue_or_stop"), "t"), [((("acc")), 100000000, 0, -950); ((("final")), 100000000, 0, -948)], (0)), 100000000, 0, -953), 0), 100000000, 0, -952), 0), 100000000, 0, -951), (Tag1 (("finish"), (Tag1 (0, ((("acc")), 100000000, 0, -950), ((("final")), 100000000, 0, -948), 0), 100000000, 0, -949), ((("final")), 100000000, 0, -948), 0), 100000000, 0, -947), 0), 100000000, 0, -946), 0), 100000000, 0, -945), 0), 100000000, 0, -944), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Set_intf", 30)), 0); (("fold_right", 7178), ((Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -941); ((0), 100000000, 0, -943)], (0)), 100000000, 0, -942), (Tag1 (("init"), ((("acc")), 100000000, 0, -937), (Tag1 (("f"), (Tag1 (0, (Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -941)], (0)), 100000000, 0, -940), (Tag1 (0, ((("acc")), 100000000, 0, -937), ((("acc")), 100000000, 0, -937), 0), 100000000, 0, -939), 0), 100000000, 0, -938), ((("acc")), 100000000, 0, -937), 0), 100000000, 0, -936), 0), 100000000, 0, -935), 0), 100000000, 0, -934), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Set_intf", 31)), 0); (("iter2", 7179), ((Tag3 ((("access_options", 7163)), [((("a")), 100000000, 0, -917); ((("cmp")), 100000000, 0, -918); (Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -917); ((("cmp")), 100000000, 0, -918)], (0)), 100000000, 0, -933), (Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -917); ((("cmp")), 100000000, 0, -918)], (0)), 100000000, 0, -932), (Tag1 (("f"), (Tag1 (0, (Tag8 (([("Both", (((Tag2 ([(Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -917)], (0)), 100000000, 0, -930); (Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -917)], (0)), 100000000, 0, -931)]), 100000000, 0, -929)))); ("Left", (((Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -917)], (0)), 100000000, 0, -928)))); ("Right", (((Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -917)], (0)), 100000000, 0, -927))))], (0, 100000000, 0, -926), 1, 0, 0)), 100000000, 0, -925), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -924), 0), 100000000, 0, -923), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -922), 0), 100000000, 0, -921), 0), 100000000, 0, -920), 0), 100000000, 0, -919)], (0)), 100000000, 0, -916), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Set_intf", 32)), 0); (("filter", 7180), ((Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -910); ((("cmp")), 100000000, 0, -911)], (0)), 100000000, 0, -915), (Tag1 (("f"), (Tag1 (0, (Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -910)], (0)), 100000000, 0, -914), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -913), 0), 100000000, 0, -912), (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -910); ((("cmp")), 100000000, 0, -911)], (0)), 100000000, 0, -909), 0), 100000000, 0, -908), 0), 100000000, 0, -907), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Set_intf", 33)), 0); (("partition_tf", 7181), ((Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -900); ((("cmp")), 100000000, 0, -901)], (0)), 100000000, 0, -906), (Tag1 (("f"), (Tag1 (0, (Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -900)], (0)), 100000000, 0, -905), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -904), 0), 100000000, 0, -903), (Tag2 ([(Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -900); ((("cmp")), 100000000, 0, -901)], (0)), 100000000, 0, -899); (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -900); ((("cmp")), 100000000, 0, -901)], (0)), 100000000, 0, -902)]), 100000000, 0, -898), 0), 100000000, 0, -897), 0), 100000000, 0, -896), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Set_intf", 34)), 0); (("elements", 7182), ((Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -893); ((0), 100000000, 0, -895)], (0)), 100000000, 0, -894), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -893)], (0)), 100000000, 0, -892)], (0)), 100000000, 0, -891), 0), 100000000, 0, -890), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Set_intf", 35)), 0); (("min_elt", 7183), ((Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -887); ((0), 100000000, 0, -889)], (0)), 100000000, 0, -888), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -887)], (0)), 100000000, 0, -886)], (0)), 100000000, 0, -885), 0), 100000000, 0, -884), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Set_intf", 36)), 0); (("min_elt_exn", 7184), ((Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -881); ((0), 100000000, 0, -883)], (0)), 100000000, 0, -882), (Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -881)], (0)), 100000000, 0, -880), 0), 100000000, 0, -879), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Set_intf", 37)), 0); (("max_elt", 7185), ((Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -876); ((0), 100000000, 0, -878)], (0)), 100000000, 0, -877), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -876)], (0)), 100000000, 0, -875)], (0)), 100000000, 0, -874), 0), 100000000, 0, -873), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Set_intf", 38)), 0); (("max_elt_exn", 7186), ((Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -870); ((0), 100000000, 0, -872)], (0)), 100000000, 0, -871), (Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -870)], (0)), 100000000, 0, -869), 0), 100000000, 0, -868), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Set_intf", 39)), 0); (("choose", 7187), ((Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -865); ((0), 100000000, 0, -867)], (0)), 100000000, 0, -866), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -865)], (0)), 100000000, 0, -864)], (0)), 100000000, 0, -863), 0), 100000000, 0, -862), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Set_intf", 40)), 0); (("choose_exn", 7188), ((Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -859); ((0), 100000000, 0, -861)], (0)), 100000000, 0, -860), (Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -859)], (0)), 100000000, 0, -858), 0), 100000000, 0, -857), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Set_intf", 41)), 0); (("split", 7189), ((Tag3 ((("access_options", 7163)), [((("a")), 100000000, 0, -846); ((("cmp")), 100000000, 0, -847); (Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -846); ((("cmp")), 100000000, 0, -847)], (0)), 100000000, 0, -856), (Tag1 (0, (Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -846)], (0)), 100000000, 0, -855), (Tag2 ([(Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -846); ((("cmp")), 100000000, 0, -847)], (0)), 100000000, 0, -851); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -846)], (0)), 100000000, 0, -853)], (0)), 100000000, 0, -852); (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -846); ((("cmp")), 100000000, 0, -847)], (0)), 100000000, 0, -854)]), 100000000, 0, -850), 0), 100000000, 0, -849), 0), 100000000, 0, -848)], (0)), 100000000, 0, -845), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Set_intf", 42)), 0); (("split_le_gt", 7190), ((Tag3 ((("access_options", 7163)), [((("a")), 100000000, 0, -836); ((("cmp")), 100000000, 0, -837); (Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -836); ((("cmp")), 100000000, 0, -837)], (0)), 100000000, 0, -844), (Tag1 (0, (Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -836)], (0)), 100000000, 0, -843), (Tag2 ([(Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -836); ((("cmp")), 100000000, 0, -837)], (0)), 100000000, 0, -841); (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -836); ((("cmp")), 100000000, 0, -837)], (0)), 100000000, 0, -842)]), 100000000, 0, -840), 0), 100000000, 0, -839), 0), 100000000, 0, -838)], (0)), 100000000, 0, -835), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Set_intf", 43)), 0); (("split_lt_ge", 7191), ((Tag3 ((("access_options", 7163)), [((("a")), 100000000, 0, -826); ((("cmp")), 100000000, 0, -827); (Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -826); ((("cmp")), 100000000, 0, -827)], (0)), 100000000, 0, -834), (Tag1 (0, (Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -826)], (0)), 100000000, 0, -833), (Tag2 ([(Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -826); ((("cmp")), 100000000, 0, -827)], (0)), 100000000, 0, -831); (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -826); ((("cmp")), 100000000, 0, -827)], (0)), 100000000, 0, -832)]), 100000000, 0, -830), 0), 100000000, 0, -829), 0), 100000000, 0, -828)], (0)), 100000000, 0, -825), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Set_intf", 44)), 0); (("group_by", 7192), ((Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -817); ((("cmp")), 100000000, 0, -818)], (0)), 100000000, 0, -824), (Tag1 (("equiv"), (Tag1 (0, (Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -817)], (0)), 100000000, 0, -823), (Tag1 (0, (Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -817)], (0)), 100000000, 0, -822), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -821), 0), 100000000, 0, -820), 0), 100000000, 0, -819), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -817); ((("cmp")), 100000000, 0, -818)], (0)), 100000000, 0, -816)], (0)), 100000000, 0, -815), 0), 100000000, 0, -814), 0), 100000000, 0, -813), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Set_intf", 45)), 0); (("find_exn", 7193), ((Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -807); ((0), 100000000, 0, -812)], (0)), 100000000, 0, -811), (Tag1 (("f"), (Tag1 (0, (Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -807)], (0)), 100000000, 0, -810), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -809), 0), 100000000, 0, -808), (Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -807)], (0)), 100000000, 0, -806), 0), 100000000, 0, -805), 0), 100000000, 0, -804), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Set_intf", 46)), 0); (("nth", 7194), ((Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -800); ((0), 100000000, 0, -803)], (0)), 100000000, 0, -802), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -801), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -800)], (0)), 100000000, 0, -799)], (0)), 100000000, 0, -798), 0), 100000000, 0, -797), 0), 100000000, 0, -796), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Set_intf", 47)), 0); (("remove_index", 7195), ((Tag3 ((("access_options", 7163)), [((("a")), 100000000, 0, -789); ((("cmp")), 100000000, 0, -790); (Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -789); ((("cmp")), 100000000, 0, -790)], (0)), 100000000, 0, -795), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -794), (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -789); ((("cmp")), 100000000, 0, -790)], (0)), 100000000, 0, -793), 0), 100000000, 0, -792), 0), 100000000, 0, -791)], (0)), 100000000, 0, -788), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Set_intf", 48)), 0); (("to_tree", 7196), ((Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -784); ((("cmp")), 100000000, 0, -786)], (0)), 100000000, 0, -787), (Tag3 ((("tree", 7147)), [(Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -784)], (0)), 100000000, 0, -783); (Tag3 ((("cmp", 7149)), [((("cmp")), 100000000, 0, -786)], (0)), 100000000, 0, -785)], (0)), 100000000, 0, -782), 0), 100000000, 0, -781), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Set_intf", 49)), 0); (("to_sequence", 7197), ((Tag3 ((("access_options", 7163)), [((("a")), 100000000, 0, -765); ((("cmp")), 100000000, 0, -766); (Tag1 (Tag1 ("order"), (Tag3 ((Tag3 ("option", 10)), [(Tag8 (([("Decreasing", (0)); ("Increasing", (0))], (0, 100000000, 0, -780), 1, 0, 0)), 100000000, 0, -779)], (0)), 100000000, 0, -778), (Tag1 (Tag1 ("greater_or_equal_to"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -765)], (0)), 100000000, 0, -777)], (0)), 100000000, 0, -776), (Tag1 (Tag1 ("less_or_equal_to"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -765)], (0)), 100000000, 0, -775)], (0)), 100000000, 0, -774), (Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -765); ((("cmp")), 100000000, 0, -766)], (0)), 100000000, 0, -773), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -765)], (0)), 100000000, 0, -772)], (0)), 100000000, 0, -771), 0), 100000000, 0, -770), 0), 100000000, 0, -769), 0), 100000000, 0, -768), 0), 100000000, 0, -767)], (0)), 100000000, 0, -764), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Set_intf", 50)), 0); (("binary_search", 7198), ((Tag3 ((("access_options", 7163)), [((("a")), 100000000, 0, -749); ((("cmp")), 100000000, 0, -750); (Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -749); ((("cmp")), 100000000, 0, -750)], (0)), 100000000, 0, -763), (Tag1 (("compare"), (Tag1 (0, (Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -749)], (0)), 100000000, 0, -762), (Tag1 (0, ((("key")), 100000000, 0, -757), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -761), 0), 100000000, 0, -760), 0), 100000000, 0, -759), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Binary_searchable"), "Which_target_by_key"), "t"), 0, (0)), 100000000, 0, -758), (Tag1 (0, ((("key")), 100000000, 0, -757), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -749)], (0)), 100000000, 0, -756)], (0)), 100000000, 0, -755), 0), 100000000, 0, -754), 0), 100000000, 0, -753), 0), 100000000, 0, -752), 0), 100000000, 0, -751)], (0)), 100000000, 0, -748), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Set_intf", 51)), 0); (("binary_search_segmented", 7199), ((Tag3 ((("access_options", 7163)), [((("a")), 100000000, 0, -735); ((("cmp")), 100000000, 0, -736); (Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -735); ((("cmp")), 100000000, 0, -736)], (0)), 100000000, 0, -747), (Tag1 (("segment_of"), (Tag1 (0, (Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -735)], (0)), 100000000, 0, -746), (Tag8 (([("Left", (0)); ("Right", (0))], (0, 100000000, 0, -745), 1, 0, 0)), 100000000, 0, -744), 0), 100000000, 0, -743), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Binary_searchable"), "Which_target_by_segment"), "t"), 0, (0)), 100000000, 0, -742), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -735)], (0)), 100000000, 0, -741)], (0)), 100000000, 0, -740), 0), 100000000, 0, -739), 0), 100000000, 0, -738), 0), 100000000, 0, -737)], (0)), 100000000, 0, -734), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Set_intf", 52)), 0); (("merge_to_sequence", 7200), ((Tag3 ((("access_options", 7163)), [((("a")), 100000000, 0, -714); ((("cmp")), 100000000, 0, -715); (Tag1 (Tag1 ("order"), (Tag3 ((Tag3 ("option", 10)), [(Tag8 (([("Decreasing", (0)); ("Increasing", (0))], (0, 100000000, 0, -733), 1, 0, 0)), 100000000, 0, -732)], (0)), 100000000, 0, -731), (Tag1 (Tag1 ("greater_or_equal_to"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -714)], (0)), 100000000, 0, -730)], (0)), 100000000, 0, -729), (Tag1 (Tag1 ("less_or_equal_to"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -714)], (0)), 100000000, 0, -728)], (0)), 100000000, 0, -727), (Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -714); ((("cmp")), 100000000, 0, -715)], (0)), 100000000, 0, -726), (Tag1 (0, (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -714); ((("cmp")), 100000000, 0, -715)], (0)), 100000000, 0, -725), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag3 (Tag1 ((("Merge_to_sequence_element", 7058)), "t"), [(Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -714)], (0)), 100000000, 0, -723); (Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -714)], (0)), 100000000, 0, -724)], (0)), 100000000, 0, -722)], (0)), 100000000, 0, -721), 0), 100000000, 0, -720), 0), 100000000, 0, -719), 0), 100000000, 0, -718), 0), 100000000, 0, -717), 0), 100000000, 0, -716)], (0)), 100000000, 0, -713), 0, (("src/set_intf.ml", 221, 6992, 6996), ("src/set_intf.ml", 225, 7129, 7163), 0), 0, Tag1 ("Base__Set_intf", 53)), 0); Tag1 (("set", 7201), ([((("a")), 100000000, 0, -711); ((("cmp")), 100000000, 0, -712)], 2, 0, 1, 0, [7; 7], [2; 2], 0, 0, (("src/set_intf.ml", 228, 7175, 7179), ("src/set_intf.ml", 232, 7311, 7345), 0), 0, 0, 0, Tag1 ("Base__Set_intf", 56)), 1, 0); Tag1 (("create_options", 7202), ([((("a")), 100000000, 0, -708); ((("cmp")), 100000000, 0, -709); ((("z")), 100000000, 0, -710)], 3, 0, 1, 0, [7; 7; 7], [2; 2; 2], 0, 0, (("src/set_intf.ml", 228, 7175, 7179), ("src/set_intf.ml", 232, 7311, 7345), 0), 0, 0, 0, Tag1 ("Base__Set_intf", 59)), 1, 0); (("empty", 7203), ((Tag3 ((("create_options", 7202)), [((("a")), 100000000, 0, -705); ((("cmp")), 100000000, 0, -706); (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -705); ((("cmp")), 100000000, 0, -706)], (0)), 100000000, 0, -707)], (0)), 100000000, 0, -704), 0, (("src/set_intf.ml", 228, 7175, 7179), ("src/set_intf.ml", 232, 7311, 7345), 0), 0, Tag1 ("Base__Set_intf", 61)), 0); (("singleton", 7204), ((Tag3 ((("create_options", 7202)), [((("a")), 100000000, 0, -699); ((("cmp")), 100000000, 0, -700); (Tag1 (0, (Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -699)], (0)), 100000000, 0, -703), (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -699); ((("cmp")), 100000000, 0, -700)], (0)), 100000000, 0, -702), 0), 100000000, 0, -701)], (0)), 100000000, 0, -698), 0, (("src/set_intf.ml", 228, 7175, 7179), ("src/set_intf.ml", 232, 7311, 7345), 0), 0, Tag1 ("Base__Set_intf", 62)), 0); (("union_list", 7205), ((Tag3 ((("create_options", 7202)), [((("a")), 100000000, 0, -692); ((("cmp")), 100000000, 0, -693); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -692); ((("cmp")), 100000000, 0, -693)], (0)), 100000000, 0, -697)], (0)), 100000000, 0, -696), (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -692); ((("cmp")), 100000000, 0, -693)], (0)), 100000000, 0, -695), 0), 100000000, 0, -694)], (0)), 100000000, 0, -691), 0, (("src/set_intf.ml", 228, 7175, 7179), ("src/set_intf.ml", 232, 7311, 7345), 0), 0, Tag1 ("Base__Set_intf", 63)), 0); (("of_list", 7206), ((Tag3 ((("create_options", 7202)), [((("a")), 100000000, 0, -685); ((("cmp")), 100000000, 0, -686); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -685)], (0)), 100000000, 0, -690)], (0)), 100000000, 0, -689), (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -685); ((("cmp")), 100000000, 0, -686)], (0)), 100000000, 0, -688), 0), 100000000, 0, -687)], (0)), 100000000, 0, -684), 0, (("src/set_intf.ml", 228, 7175, 7179), ("src/set_intf.ml", 232, 7311, 7345), 0), 0, Tag1 ("Base__Set_intf", 64)), 0); (("of_sequence", 7207), ((Tag3 ((("create_options", 7202)), [((("a")), 100000000, 0, -678); ((("cmp")), 100000000, 0, -679); (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -678)], (0)), 100000000, 0, -683)], (0)), 100000000, 0, -682), (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -678); ((("cmp")), 100000000, 0, -679)], (0)), 100000000, 0, -681), 0), 100000000, 0, -680)], (0)), 100000000, 0, -677), 0, (("src/set_intf.ml", 228, 7175, 7179), ("src/set_intf.ml", 232, 7311, 7345), 0), 0, Tag1 ("Base__Set_intf", 65)), 0); (("of_array", 7208), ((Tag3 ((("create_options", 7202)), [((("a")), 100000000, 0, -671); ((("cmp")), 100000000, 0, -672); (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -671)], (0)), 100000000, 0, -676)], (0)), 100000000, 0, -675), (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -671); ((("cmp")), 100000000, 0, -672)], (0)), 100000000, 0, -674), 0), 100000000, 0, -673)], (0)), 100000000, 0, -670), 0, (("src/set_intf.ml", 228, 7175, 7179), ("src/set_intf.ml", 232, 7311, 7345), 0), 0, Tag1 ("Base__Set_intf", 66)), 0); (("of_sorted_array", 7209), ((Tag3 ((("create_options", 7202)), [((("a")), 100000000, 0, -663); ((("cmp")), 100000000, 0, -664); (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -663)], (0)), 100000000, 0, -669)], (0)), 100000000, 0, -668), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -663); ((("cmp")), 100000000, 0, -664)], (0)), 100000000, 0, -667)], (0)), 100000000, 0, -666), 0), 100000000, 0, -665)], (0)), 100000000, 0, -662), 0, (("src/set_intf.ml", 228, 7175, 7179), ("src/set_intf.ml", 232, 7311, 7345), 0), 0, Tag1 ("Base__Set_intf", 67)), 0); (("of_sorted_array_unchecked", 7210), ((Tag3 ((("create_options", 7202)), [((("a")), 100000000, 0, -656); ((("cmp")), 100000000, 0, -657); (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -656)], (0)), 100000000, 0, -661)], (0)), 100000000, 0, -660), (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -656); ((("cmp")), 100000000, 0, -657)], (0)), 100000000, 0, -659), 0), 100000000, 0, -658)], (0)), 100000000, 0, -655), 0, (("src/set_intf.ml", 228, 7175, 7179), ("src/set_intf.ml", 232, 7311, 7345), 0), 0, Tag1 ("Base__Set_intf", 68)), 0); (("of_increasing_iterator_unchecked", 7211), ((Tag3 ((("create_options", 7202)), [((("a")), 100000000, 0, -646); ((("cmp")), 100000000, 0, -647); (Tag1 (("len"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -654), (Tag1 (("f"), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -653), (Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -646)], (0)), 100000000, 0, -652), 0), 100000000, 0, -651), (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -646); ((("cmp")), 100000000, 0, -647)], (0)), 100000000, 0, -650), 0), 100000000, 0, -649), 0), 100000000, 0, -648)], (0)), 100000000, 0, -645), 0, (("src/set_intf.ml", 228, 7175, 7179), ("src/set_intf.ml", 232, 7311, 7345), 0), 0, Tag1 ("Base__Set_intf", 69)), 0); (("stable_dedup_list", 7212), ((Tag3 ((("create_options", 7202)), [((("a")), 100000000, 0, -638); ((0), 100000000, 0, -639); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -638)], (0)), 100000000, 0, -644)], (0)), 100000000, 0, -643), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -638)], (0)), 100000000, 0, -642)], (0)), 100000000, 0, -641), 0), 100000000, 0, -640)], (0)), 100000000, 0, -637), 0, (("src/set_intf.ml", 228, 7175, 7179), ("src/set_intf.ml", 232, 7311, 7345), 0), 0, Tag1 ("Base__Set_intf", 70)), 0); (("map", 7213), ((Tag3 ((("create_options", 7202)), [((("b")), 100000000, 0, -627); ((("cmp")), 100000000, 0, -628); (Tag1 (0, (Tag3 ((("set", 7201)), [((("a")), 100000000, 0, -634); ((0), 100000000, 0, -636)], (0)), 100000000, 0, -635), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -634), (Tag3 ((("elt", 7148)), [((("b")), 100000000, 0, -627)], (0)), 100000000, 0, -633), 0), 100000000, 0, -632), (Tag3 ((("t", 7146)), [((("b")), 100000000, 0, -627); ((("cmp")), 100000000, 0, -628)], (0)), 100000000, 0, -631), 0), 100000000, 0, -630), 0), 100000000, 0, -629)], (0)), 100000000, 0, -626), 0, (("src/set_intf.ml", 228, 7175, 7179), ("src/set_intf.ml", 232, 7311, 7345), 0), 0, Tag1 ("Base__Set_intf", 71)), 0); (("filter_map", 7214), ((Tag3 ((("create_options", 7202)), [((("b")), 100000000, 0, -615); ((("cmp")), 100000000, 0, -616); (Tag1 (0, (Tag3 ((("set", 7201)), [((("a")), 100000000, 0, -623); ((0), 100000000, 0, -625)], (0)), 100000000, 0, -624), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -623), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 7148)), [((("b")), 100000000, 0, -615)], (0)), 100000000, 0, -622)], (0)), 100000000, 0, -621), 0), 100000000, 0, -620), (Tag3 ((("t", 7146)), [((("b")), 100000000, 0, -615); ((("cmp")), 100000000, 0, -616)], (0)), 100000000, 0, -619), 0), 100000000, 0, -618), 0), 100000000, 0, -617)], (0)), 100000000, 0, -614), 0, (("src/set_intf.ml", 228, 7175, 7179), ("src/set_intf.ml", 232, 7311, 7345), 0), 0, Tag1 ("Base__Set_intf", 72)), 0); (("of_tree", 7215), ((Tag3 ((("create_options", 7202)), [((("a")), 100000000, 0, -607); ((("cmp")), 100000000, 0, -608); (Tag1 (0, (Tag3 ((("tree", 7147)), [(Tag3 ((("elt", 7148)), [((("a")), 100000000, 0, -607)], (0)), 100000000, 0, -612); (Tag3 ((("cmp", 7149)), [((("cmp")), 100000000, 0, -608)], (0)), 100000000, 0, -613)], (0)), 100000000, 0, -611), (Tag3 ((("t", 7146)), [((("a")), 100000000, 0, -607); ((("cmp")), 100000000, 0, -608)], (0)), 100000000, 0, -610), 0), 100000000, 0, -609)], (0)), 100000000, 0, -606), 0, (("src/set_intf.ml", 228, 7175, 7179), ("src/set_intf.ml", 232, 7311, 7345), 0), 0, Tag1 ("Base__Set_intf", 73)), 0)])), 0, (("src/set_intf.ml", 214, 6853, 6853), ("src/set_intf.ml", 233, 7346, 7349), 0), Tag1 ("Base__Set_intf", 87)), 0); Tag4 (("S_poly", 7063), ((Tag1 ([Tag1 (("t", 7218), ([((("elt")), 100000000, 0, -1660)], 1, 0, 1, 0, [7], [2], 0, 0, (("src/set_intf.ml", 236, 7376, 7378), ("src/set_intf.ml", 236, 7376, 7389), 0), 0, 0, 0, Tag1 ("Base__Set_intf", 88)), 1, 0); Tag1 (("tree", 7219), ([((("elt")), 100000000, 0, -1659)], 1, 0, 1, 0, [7], [2], 0, 0, (("src/set_intf.ml", 237, 7390, 7392), ("src/set_intf.ml", 237, 7390, 7406), 0), 0, 0, 0, Tag1 ("Base__Set_intf", 89)), 1, 0); Tag1 (("comparator_witness", 7220), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/set_intf.ml", 238, 7407, 7409), ("src/set_intf.ml", 238, 7407, 7432), 0), 0, 0, 0, Tag1 ("Base__Set_intf", 90)), 1, 0); (("length", 7221), ((Tag1 (0, (Tag3 ((("t", 7218)), [((0), 100000000, 0, -1658)], (0)), 100000000, 0, -1657), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1656), 0), 100000000, 0, -1655), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Container_intf", 93)), 0); (("is_empty", 7222), ((Tag1 (0, (Tag3 ((("t", 7218)), [((0), 100000000, 0, -1654)], (0)), 100000000, 0, -1653), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1652), 0), 100000000, 0, -1651), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Container_intf", 94)), 0); (("iter", 7223), ((Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1649)], (0)), 100000000, 0, -1650), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -1649), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1648), 0), 100000000, 0, -1647), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1646), 0), 100000000, 0, -1645), 0), 100000000, 0, -1644), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Container_intf", 96)), 0); (("fold", 7224), ((Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1642)], (0)), 100000000, 0, -1643), (Tag1 (("init"), ((("acc")), 100000000, 0, -1639), (Tag1 (("f"), (Tag1 (0, ((("acc")), 100000000, 0, -1639), (Tag1 (0, ((("a")), 100000000, 0, -1642), ((("acc")), 100000000, 0, -1639), 0), 100000000, 0, -1641), 0), 100000000, 0, -1640), ((("acc")), 100000000, 0, -1639), 0), 100000000, 0, -1638), 0), 100000000, 0, -1637), 0), 100000000, 0, -1636), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Container_intf", 97)), 0); (("fold_result", 7225), ((Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1634)], (0)), 100000000, 0, -1635), (Tag1 (("init"), ((("acc")), 100000000, 0, -1629), (Tag1 (("f"), (Tag1 (0, ((("acc")), 100000000, 0, -1629), (Tag1 (0, ((("a")), 100000000, 0, -1634), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Result"), "t"), [((("acc")), 100000000, 0, -1629); ((("e")), 100000000, 0, -1630)], (0)), 100000000, 0, -1633), 0), 100000000, 0, -1632), 0), 100000000, 0, -1631), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Result"), "t"), [((("acc")), 100000000, 0, -1629); ((("e")), 100000000, 0, -1630)], (0)), 100000000, 0, -1628), 0), 100000000, 0, -1627), 0), 100000000, 0, -1626), 0), 100000000, 0, -1625), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Container_intf", 98)), 0); (("exists", 7226), ((Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1623)], (0)), 100000000, 0, -1624), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -1623), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1622), 0), 100000000, 0, -1621), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1620), 0), 100000000, 0, -1619), 0), 100000000, 0, -1618), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Container_intf", 100)), 0); (("for_all", 7227), ((Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1616)], (0)), 100000000, 0, -1617), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -1616), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1615), 0), 100000000, 0, -1614), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1613), 0), 100000000, 0, -1612), 0), 100000000, 0, -1611), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Container_intf", 101)), 0); (("count", 7228), ((Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1609)], (0)), 100000000, 0, -1610), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -1609), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1608), 0), 100000000, 0, -1607), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1606), 0), 100000000, 0, -1605), 0), 100000000, 0, -1604), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Container_intf", 102)), 0); (("sum", 7229), ((Tag1 (0, (Tag11 (Tag1 ((Tag2 ("Base__Container_intf")), "Summable"), [(("t"), ((("sum")), 100000000, 0, -1599))]), 100000000, 0, -1603), (Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1601)], (0)), 100000000, 0, -1602), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -1601), ((("sum")), 100000000, 0, -1599), 0), 100000000, 0, -1600), ((("sum")), 100000000, 0, -1599), 0), 100000000, 0, -1598), 0), 100000000, 0, -1597), 0), 100000000, 0, -1596), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Container_intf", 104)), 0); (("find", 7230), ((Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1592)], (0)), 100000000, 0, -1595), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -1592), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1594), 0), 100000000, 0, -1593), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1592)], (0)), 100000000, 0, -1591), 0), 100000000, 0, -1590), 0), 100000000, 0, -1589), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Container_intf", 105)), 0); (("find_map", 7231), ((Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1587)], (0)), 100000000, 0, -1588), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -1587), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -1584)], (0)), 100000000, 0, -1586), 0), 100000000, 0, -1585), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -1584)], (0)), 100000000, 0, -1583), 0), 100000000, 0, -1582), 0), 100000000, 0, -1581), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Container_intf", 106)), 0); (("to_list", 7232), ((Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1579)], (0)), 100000000, 0, -1580), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -1579)], (0)), 100000000, 0, -1578), 0), 100000000, 0, -1577), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Container_intf", 107)), 0); (("to_array", 7233), ((Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1575)], (0)), 100000000, 0, -1576), (Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -1575)], (0)), 100000000, 0, -1574), 0), 100000000, 0, -1573), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Container_intf", 108)), 0); (("invariants", 7234), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -1568); ((("cmp")), 100000000, 0, -1569); (Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1568)], (0)), 100000000, 0, -1572), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1571), 0), 100000000, 0, -1570)], (0)), 100000000, 0, -1567), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 15)), 0); (("mem", 7235), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -1561); ((("cmp")), 100000000, 0, -1562); (Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1561)], (0)), 100000000, 0, -1566), (Tag1 (0, ((("a")), 100000000, 0, -1561), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1565), 0), 100000000, 0, -1564), 0), 100000000, 0, -1563)], (0)), 100000000, 0, -1560), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 16)), 0); (("add", 7236), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -1554); ((("cmp")), 100000000, 0, -1555); (Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1554)], (0)), 100000000, 0, -1559), (Tag1 (0, ((("a")), 100000000, 0, -1554), (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1554)], (0)), 100000000, 0, -1558), 0), 100000000, 0, -1557), 0), 100000000, 0, -1556)], (0)), 100000000, 0, -1553), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 17)), 0); (("remove", 7237), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -1547); ((("cmp")), 100000000, 0, -1548); (Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1547)], (0)), 100000000, 0, -1552), (Tag1 (0, ((("a")), 100000000, 0, -1547), (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1547)], (0)), 100000000, 0, -1551), 0), 100000000, 0, -1550), 0), 100000000, 0, -1549)], (0)), 100000000, 0, -1546), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 18)), 0); (("union", 7238), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -1539); ((("cmp")), 100000000, 0, -1540); (Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1539)], (0)), 100000000, 0, -1545), (Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1539)], (0)), 100000000, 0, -1544), (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1539)], (0)), 100000000, 0, -1543), 0), 100000000, 0, -1542), 0), 100000000, 0, -1541)], (0)), 100000000, 0, -1538), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 19)), 0); (("inter", 7239), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -1531); ((("cmp")), 100000000, 0, -1532); (Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1531)], (0)), 100000000, 0, -1537), (Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1531)], (0)), 100000000, 0, -1536), (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1531)], (0)), 100000000, 0, -1535), 0), 100000000, 0, -1534), 0), 100000000, 0, -1533)], (0)), 100000000, 0, -1530), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 20)), 0); (("diff", 7240), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -1523); ((("cmp")), 100000000, 0, -1524); (Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1523)], (0)), 100000000, 0, -1529), (Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1523)], (0)), 100000000, 0, -1528), (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1523)], (0)), 100000000, 0, -1527), 0), 100000000, 0, -1526), 0), 100000000, 0, -1525)], (0)), 100000000, 0, -1522), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 21)), 0); (("symmetric_diff", 7241), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -1514); ((("cmp")), 100000000, 0, -1515); (Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1514)], (0)), 100000000, 0, -1521), (Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1514)], (0)), 100000000, 0, -1520), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Either"), "t"), [((("a")), 100000000, 0, -1514); ((("a")), 100000000, 0, -1514)], (0)), 100000000, 0, -1519)], (0)), 100000000, 0, -1518), 0), 100000000, 0, -1517), 0), 100000000, 0, -1516)], (0)), 100000000, 0, -1513), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 22)), 0); (("compare_direct", 7242), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -1506); ((("cmp")), 100000000, 0, -1507); (Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1506)], (0)), 100000000, 0, -1512), (Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1506)], (0)), 100000000, 0, -1511), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1510), 0), 100000000, 0, -1509), 0), 100000000, 0, -1508)], (0)), 100000000, 0, -1505), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 23)), 0); (("equal", 7243), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -1498); ((("cmp")), 100000000, 0, -1499); (Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1498)], (0)), 100000000, 0, -1504), (Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1498)], (0)), 100000000, 0, -1503), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1502), 0), 100000000, 0, -1501), 0), 100000000, 0, -1500)], (0)), 100000000, 0, -1497), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 24)), 0); (("is_subset", 7244), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -1490); ((("cmp")), 100000000, 0, -1491); (Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1490)], (0)), 100000000, 0, -1496), (Tag1 (("of_"), (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1490)], (0)), 100000000, 0, -1495), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1494), 0), 100000000, 0, -1493), 0), 100000000, 0, -1492)], (0)), 100000000, 0, -1489), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 25)), 0); (("are_disjoint", 7245), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -1482); ((("cmp")), 100000000, 0, -1483); (Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1482)], (0)), 100000000, 0, -1488), (Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1482)], (0)), 100000000, 0, -1487), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1486), 0), 100000000, 0, -1485), 0), 100000000, 0, -1484)], (0)), 100000000, 0, -1481), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 26)), 0); Tag3 (("Named", 7246), 0, (Tag1 ([(("is_subset", 7285), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -1673); ((("cmp")), 100000000, 0, -1674); (Tag1 (0, (Tag3 (Tag1 ((("Named", 7059)), "t"), [(Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1673)], (0)), 100000000, 0, -1682)], (0)), 100000000, 0, -1681), (Tag1 (("of_"), (Tag3 (Tag1 ((("Named", 7059)), "t"), [(Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1673)], (0)), 100000000, 0, -1680)], (0)), 100000000, 0, -1679), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1678)], (0)), 100000000, 0, -1677), 0), 100000000, 0, -1676), 0), 100000000, 0, -1675)], (0)), 100000000, 0, -1672), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 27)), 0); (("equal", 7286), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -1662); ((("cmp")), 100000000, 0, -1663); (Tag1 (0, (Tag3 (Tag1 ((("Named", 7059)), "t"), [(Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1662)], (0)), 100000000, 0, -1671)], (0)), 100000000, 0, -1670), (Tag1 (0, (Tag3 (Tag1 ((("Named", 7059)), "t"), [(Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1662)], (0)), 100000000, 0, -1669)], (0)), 100000000, 0, -1668), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1667)], (0)), 100000000, 0, -1666), 0), 100000000, 0, -1665), 0), 100000000, 0, -1664)], (0)), 100000000, 0, -1661), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 28)), 0)]), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), Tag1 ("Base__Set_intf", 29)), 0, 0); (("fold_until", 7247), ((Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1479)], (0)), 100000000, 0, -1480), (Tag1 (("init"), ((("acc")), 100000000, 0, -1475), (Tag1 (("f"), (Tag1 (0, ((("acc")), 100000000, 0, -1475), (Tag1 (0, ((("a")), 100000000, 0, -1479), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Container"), "Continue_or_stop"), "t"), [((("acc")), 100000000, 0, -1475); ((("final")), 100000000, 0, -1473)], (0)), 100000000, 0, -1478), 0), 100000000, 0, -1477), 0), 100000000, 0, -1476), (Tag1 (("finish"), (Tag1 (0, ((("acc")), 100000000, 0, -1475), ((("final")), 100000000, 0, -1473), 0), 100000000, 0, -1474), ((("final")), 100000000, 0, -1473), 0), 100000000, 0, -1472), 0), 100000000, 0, -1471), 0), 100000000, 0, -1470), 0), 100000000, 0, -1469), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 30)), 0); (("fold_right", 7248), ((Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1467)], (0)), 100000000, 0, -1468), (Tag1 (("init"), ((("acc")), 100000000, 0, -1464), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -1467), (Tag1 (0, ((("acc")), 100000000, 0, -1464), ((("acc")), 100000000, 0, -1464), 0), 100000000, 0, -1466), 0), 100000000, 0, -1465), ((("acc")), 100000000, 0, -1464), 0), 100000000, 0, -1463), 0), 100000000, 0, -1462), 0), 100000000, 0, -1461), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 31)), 0); (("iter2", 7249), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -1448); ((("cmp")), 100000000, 0, -1449); (Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1448)], (0)), 100000000, 0, -1460), (Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1448)], (0)), 100000000, 0, -1459), (Tag1 (("f"), (Tag1 (0, (Tag8 (([("Both", (((Tag2 ([((("a")), 100000000, 0, -1448); ((("a")), 100000000, 0, -1448)]), 100000000, 0, -1458)))); ("Left", ((((("a")), 100000000, 0, -1448)))); ("Right", ((((("a")), 100000000, 0, -1448))))], (0, 100000000, 0, -1457), 1, 0, 0)), 100000000, 0, -1456), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1455), 0), 100000000, 0, -1454), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1453), 0), 100000000, 0, -1452), 0), 100000000, 0, -1451), 0), 100000000, 0, -1450)], (0)), 100000000, 0, -1447), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 32)), 0); (("filter", 7250), ((Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1443)], (0)), 100000000, 0, -1446), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -1443), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1445), 0), 100000000, 0, -1444), (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1443)], (0)), 100000000, 0, -1442), 0), 100000000, 0, -1441), 0), 100000000, 0, -1440), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 33)), 0); (("partition_tf", 7251), ((Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1435)], (0)), 100000000, 0, -1439), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -1435), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1438), 0), 100000000, 0, -1437), (Tag2 ([(Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1435)], (0)), 100000000, 0, -1434); (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1435)], (0)), 100000000, 0, -1436)]), 100000000, 0, -1433), 0), 100000000, 0, -1432), 0), 100000000, 0, -1431), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 34)), 0); (("elements", 7252), ((Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1429)], (0)), 100000000, 0, -1430), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -1429)], (0)), 100000000, 0, -1428), 0), 100000000, 0, -1427), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 35)), 0); (("min_elt", 7253), ((Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1425)], (0)), 100000000, 0, -1426), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1425)], (0)), 100000000, 0, -1424), 0), 100000000, 0, -1423), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 36)), 0); (("min_elt_exn", 7254), ((Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1421)], (0)), 100000000, 0, -1422), ((("a")), 100000000, 0, -1421), 0), 100000000, 0, -1420), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 37)), 0); (("max_elt", 7255), ((Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1418)], (0)), 100000000, 0, -1419), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1418)], (0)), 100000000, 0, -1417), 0), 100000000, 0, -1416), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 38)), 0); (("max_elt_exn", 7256), ((Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1414)], (0)), 100000000, 0, -1415), ((("a")), 100000000, 0, -1414), 0), 100000000, 0, -1413), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 39)), 0); (("choose", 7257), ((Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1411)], (0)), 100000000, 0, -1412), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1411)], (0)), 100000000, 0, -1410), 0), 100000000, 0, -1409), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 40)), 0); (("choose_exn", 7258), ((Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1407)], (0)), 100000000, 0, -1408), ((("a")), 100000000, 0, -1407), 0), 100000000, 0, -1406), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 41)), 0); (("split", 7259), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -1397); ((("cmp")), 100000000, 0, -1398); (Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1397)], (0)), 100000000, 0, -1405), (Tag1 (0, ((("a")), 100000000, 0, -1397), (Tag2 ([(Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1397)], (0)), 100000000, 0, -1402); (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1397)], (0)), 100000000, 0, -1403); (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1397)], (0)), 100000000, 0, -1404)]), 100000000, 0, -1401), 0), 100000000, 0, -1400), 0), 100000000, 0, -1399)], (0)), 100000000, 0, -1396), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 42)), 0); (("split_le_gt", 7260), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -1388); ((("cmp")), 100000000, 0, -1389); (Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1388)], (0)), 100000000, 0, -1395), (Tag1 (0, ((("a")), 100000000, 0, -1388), (Tag2 ([(Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1388)], (0)), 100000000, 0, -1393); (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1388)], (0)), 100000000, 0, -1394)]), 100000000, 0, -1392), 0), 100000000, 0, -1391), 0), 100000000, 0, -1390)], (0)), 100000000, 0, -1387), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 43)), 0); (("split_lt_ge", 7261), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -1379); ((("cmp")), 100000000, 0, -1380); (Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1379)], (0)), 100000000, 0, -1386), (Tag1 (0, ((("a")), 100000000, 0, -1379), (Tag2 ([(Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1379)], (0)), 100000000, 0, -1384); (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1379)], (0)), 100000000, 0, -1385)]), 100000000, 0, -1383), 0), 100000000, 0, -1382), 0), 100000000, 0, -1381)], (0)), 100000000, 0, -1378), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 44)), 0); (("group_by", 7262), ((Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1373)], (0)), 100000000, 0, -1377), (Tag1 (("equiv"), (Tag1 (0, ((("a")), 100000000, 0, -1373), (Tag1 (0, ((("a")), 100000000, 0, -1373), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1376), 0), 100000000, 0, -1375), 0), 100000000, 0, -1374), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1373)], (0)), 100000000, 0, -1372)], (0)), 100000000, 0, -1371), 0), 100000000, 0, -1370), 0), 100000000, 0, -1369), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 45)), 0); (("find_exn", 7263), ((Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1365)], (0)), 100000000, 0, -1368), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -1365), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1367), 0), 100000000, 0, -1366), ((("a")), 100000000, 0, -1365), 0), 100000000, 0, -1364), 0), 100000000, 0, -1363), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 46)), 0); (("nth", 7264), ((Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1360)], (0)), 100000000, 0, -1362), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1361), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1360)], (0)), 100000000, 0, -1359), 0), 100000000, 0, -1358), 0), 100000000, 0, -1357), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 47)), 0); (("remove_index", 7265), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -1350); ((("cmp")), 100000000, 0, -1351); (Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1350)], (0)), 100000000, 0, -1356), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1355), (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1350)], (0)), 100000000, 0, -1354), 0), 100000000, 0, -1353), 0), 100000000, 0, -1352)], (0)), 100000000, 0, -1349), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 48)), 0); (("to_tree", 7266), ((Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1347)], (0)), 100000000, 0, -1348), (Tag3 ((("tree", 7219)), [((("a")), 100000000, 0, -1347)], (0)), 100000000, 0, -1346), 0), 100000000, 0, -1345), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 49)), 0); (("to_sequence", 7267), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -1332); ((("cmp")), 100000000, 0, -1333); (Tag1 (Tag1 ("order"), (Tag3 ((Tag3 ("option", 10)), [(Tag8 (([("Decreasing", (0)); ("Increasing", (0))], (0, 100000000, 0, -1344), 1, 0, 0)), 100000000, 0, -1343)], (0)), 100000000, 0, -1342), (Tag1 (Tag1 ("greater_or_equal_to"), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1332)], (0)), 100000000, 0, -1341), (Tag1 (Tag1 ("less_or_equal_to"), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1332)], (0)), 100000000, 0, -1340), (Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1332)], (0)), 100000000, 0, -1339), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [((("a")), 100000000, 0, -1332)], (0)), 100000000, 0, -1338), 0), 100000000, 0, -1337), 0), 100000000, 0, -1336), 0), 100000000, 0, -1335), 0), 100000000, 0, -1334)], (0)), 100000000, 0, -1331), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 50)), 0); (("binary_search", 7268), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -1318); ((("cmp")), 100000000, 0, -1319); (Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1318)], (0)), 100000000, 0, -1330), (Tag1 (("compare"), (Tag1 (0, ((("a")), 100000000, 0, -1318), (Tag1 (0, ((("key")), 100000000, 0, -1325), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1329), 0), 100000000, 0, -1328), 0), 100000000, 0, -1327), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Binary_searchable"), "Which_target_by_key"), "t"), 0, (0)), 100000000, 0, -1326), (Tag1 (0, ((("key")), 100000000, 0, -1325), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1318)], (0)), 100000000, 0, -1324), 0), 100000000, 0, -1323), 0), 100000000, 0, -1322), 0), 100000000, 0, -1321), 0), 100000000, 0, -1320)], (0)), 100000000, 0, -1317), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 51)), 0); (("binary_search_segmented", 7269), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -1306); ((("cmp")), 100000000, 0, -1307); (Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1306)], (0)), 100000000, 0, -1316), (Tag1 (("segment_of"), (Tag1 (0, ((("a")), 100000000, 0, -1306), (Tag8 (([("Left", (0)); ("Right", (0))], (0, 100000000, 0, -1315), 1, 0, 0)), 100000000, 0, -1314), 0), 100000000, 0, -1313), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Binary_searchable"), "Which_target_by_segment"), "t"), 0, (0)), 100000000, 0, -1312), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1306)], (0)), 100000000, 0, -1311), 0), 100000000, 0, -1310), 0), 100000000, 0, -1309), 0), 100000000, 0, -1308)], (0)), 100000000, 0, -1305), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 52)), 0); (("merge_to_sequence", 7270), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -1289); ((("cmp")), 100000000, 0, -1290); (Tag1 (Tag1 ("order"), (Tag3 ((Tag3 ("option", 10)), [(Tag8 (([("Decreasing", (0)); ("Increasing", (0))], (0, 100000000, 0, -1304), 1, 0, 0)), 100000000, 0, -1303)], (0)), 100000000, 0, -1302), (Tag1 (Tag1 ("greater_or_equal_to"), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1289)], (0)), 100000000, 0, -1301), (Tag1 (Tag1 ("less_or_equal_to"), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1289)], (0)), 100000000, 0, -1300), (Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1289)], (0)), 100000000, 0, -1299), (Tag1 (0, (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1289)], (0)), 100000000, 0, -1298), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag3 (Tag1 ((("Merge_to_sequence_element", 7058)), "t"), [((("a")), 100000000, 0, -1289); ((("a")), 100000000, 0, -1289)], (0)), 100000000, 0, -1297)], (0)), 100000000, 0, -1296), 0), 100000000, 0, -1295), 0), 100000000, 0, -1294), 0), 100000000, 0, -1293), 0), 100000000, 0, -1292), 0), 100000000, 0, -1291)], (0)), 100000000, 0, -1288), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 53)), 0); Tag1 (("set", 7271), ([((("a")), 100000000, 0, -1286); ((("cmp")), 100000000, 0, -1287)], 2, 0, 1, 0, [7; 7], [2; 2], 0, 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, 0, 0, Tag1 ("Base__Set_intf", 56)), 1, 0); (("empty", 7272), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -1283); ((("cmp")), 100000000, 0, -1284); (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1283)], (0)), 100000000, 0, -1285)], (0)), 100000000, 0, -1282), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 61)), 0); (("singleton", 7273), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -1278); ((("cmp")), 100000000, 0, -1279); (Tag1 (0, ((("a")), 100000000, 0, -1278), (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1278)], (0)), 100000000, 0, -1281), 0), 100000000, 0, -1280)], (0)), 100000000, 0, -1277), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 62)), 0); (("union_list", 7274), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -1271); ((("cmp")), 100000000, 0, -1272); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1271)], (0)), 100000000, 0, -1276)], (0)), 100000000, 0, -1275), (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1271)], (0)), 100000000, 0, -1274), 0), 100000000, 0, -1273)], (0)), 100000000, 0, -1270), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 63)), 0); (("of_list", 7275), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -1265); ((("cmp")), 100000000, 0, -1266); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -1265)], (0)), 100000000, 0, -1269), (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1265)], (0)), 100000000, 0, -1268), 0), 100000000, 0, -1267)], (0)), 100000000, 0, -1264), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 64)), 0); (("of_sequence", 7276), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -1259); ((("cmp")), 100000000, 0, -1260); (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [((("a")), 100000000, 0, -1259)], (0)), 100000000, 0, -1263), (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1259)], (0)), 100000000, 0, -1262), 0), 100000000, 0, -1261)], (0)), 100000000, 0, -1258), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 65)), 0); (("of_array", 7277), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -1253); ((("cmp")), 100000000, 0, -1254); (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -1253)], (0)), 100000000, 0, -1257), (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1253)], (0)), 100000000, 0, -1256), 0), 100000000, 0, -1255)], (0)), 100000000, 0, -1252), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 66)), 0); (("of_sorted_array", 7278), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -1246); ((("cmp")), 100000000, 0, -1247); (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -1246)], (0)), 100000000, 0, -1251), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1246)], (0)), 100000000, 0, -1250)], (0)), 100000000, 0, -1249), 0), 100000000, 0, -1248)], (0)), 100000000, 0, -1245), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 67)), 0); (("of_sorted_array_unchecked", 7279), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -1240); ((("cmp")), 100000000, 0, -1241); (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -1240)], (0)), 100000000, 0, -1244), (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1240)], (0)), 100000000, 0, -1243), 0), 100000000, 0, -1242)], (0)), 100000000, 0, -1239), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 68)), 0); (("of_increasing_iterator_unchecked", 7280), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -1231); ((("cmp")), 100000000, 0, -1232); (Tag1 (("len"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1238), (Tag1 (("f"), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1237), ((("a")), 100000000, 0, -1231), 0), 100000000, 0, -1236), (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1231)], (0)), 100000000, 0, -1235), 0), 100000000, 0, -1234), 0), 100000000, 0, -1233)], (0)), 100000000, 0, -1230), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 69)), 0); (("stable_dedup_list", 7281), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -1225); ((0), 100000000, 0, -1226); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -1225)], (0)), 100000000, 0, -1229), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -1225)], (0)), 100000000, 0, -1228), 0), 100000000, 0, -1227)], (0)), 100000000, 0, -1224), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 70)), 0); (("map", 7282), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("b")), 100000000, 0, -1215); ((("cmp")), 100000000, 0, -1216); (Tag1 (0, (Tag3 ((("set", 7271)), [((("a")), 100000000, 0, -1221); ((0), 100000000, 0, -1223)], (0)), 100000000, 0, -1222), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -1221), ((("b")), 100000000, 0, -1215), 0), 100000000, 0, -1220), (Tag3 ((("t", 7218)), [((("b")), 100000000, 0, -1215)], (0)), 100000000, 0, -1219), 0), 100000000, 0, -1218), 0), 100000000, 0, -1217)], (0)), 100000000, 0, -1214), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 71)), 0); (("filter_map", 7283), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("b")), 100000000, 0, -1204); ((("cmp")), 100000000, 0, -1205); (Tag1 (0, (Tag3 ((("set", 7271)), [((("a")), 100000000, 0, -1211); ((0), 100000000, 0, -1213)], (0)), 100000000, 0, -1212), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -1211), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -1204)], (0)), 100000000, 0, -1210), 0), 100000000, 0, -1209), (Tag3 ((("t", 7218)), [((("b")), 100000000, 0, -1204)], (0)), 100000000, 0, -1208), 0), 100000000, 0, -1207), 0), 100000000, 0, -1206)], (0)), 100000000, 0, -1203), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 72)), 0); (("of_tree", 7284), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -1198); ((("cmp")), 100000000, 0, -1199); (Tag1 (0, (Tag3 ((("tree", 7219)), [((("a")), 100000000, 0, -1198)], (0)), 100000000, 0, -1202), (Tag3 ((("t", 7218)), [((("a")), 100000000, 0, -1198)], (0)), 100000000, 0, -1201), 0), 100000000, 0, -1200)], (0)), 100000000, 0, -1197), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 73)), 0)])), 0, (("src/set_intf.ml", 235, 7351, 7351), ("src/set_intf.ml", 248, 7791, 7794), 0), Tag1 ("Base__Set_intf", 97)), 0); Tag4 (("For_deriving", 7064), ((Tag1 ([Tag1 (("t", 7287), ([((("a")), 100000000, 0, -1737); ((("b")), 100000000, 0, -1738)], 2, 0, 1, 0, [7; 7], [2; 2], 0, 0, (("src/set_intf.ml", 251, 7827, 7829), ("src/set_intf.ml", 251, 7827, 7844), 0), 0, 0, 0, Tag1 ("Base__Set_intf", 98)), 1, 0); Tag4 (("Sexp_of_m", 7288), ((Tag1 ([Tag1 (("t", 7301), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/set_intf.ml", 254, 7876, 7880), ("src/set_intf.ml", 254, 7876, 7914), 0), [(("deriving_inline", (("src/set_intf.ml", 254, 7876, 7890), ("src/set_intf.ml", 254, 7876, 7905), 0)), ([([(((("sexp_of"), (("src/set_intf.ml", 254, 7876, 7906), ("src/set_intf.ml", 254, 7876, 7913), 0))), (("src/set_intf.ml", 254, 7876, 7906), ("src/set_intf.ml", 254, 7876, 7913), 0), 0, 0)], (("src/set_intf.ml", 254, 7876, 7906), ("src/set_intf.ml", 254, 7876, 7913), 0))]), (("src/set_intf.ml", 254, 7876, 7887), ("src/set_intf.ml", 254, 7876, 7914), 0))], 0, 0, Tag1 ("Base__Set_intf", 99)), 1, 0); (("sexp_of_t", 7302), ((Tag1 (0, (Tag3 ((("t", 7301)), 0, (0)), 100000000, 0, -1741), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1740), 0), 100000000, 0, -1739), 0, (("src/set_intf.ml", 256, 7916, 7920), ("src/set_intf.ml", 256, 7916, 7956), 0), 0, Tag1 ("Base__Set_intf", 100)), 0)])), 0, (("src/set_intf.ml", 253, 7846, 7848), ("src/set_intf.ml", 259, 7971, 7976), 0), Tag1 ("Base__Set_intf", 101)), 0); Tag4 (("M_of_sexp", 7289), ((Tag1 ([Tag1 (("t", 7303), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/set_intf.ml", 262, 8008, 8012), ("src/set_intf.ml", 262, 8008, 8046), 0), [(("deriving_inline", (("src/set_intf.ml", 262, 8008, 8022), ("src/set_intf.ml", 262, 8008, 8037), 0)), ([([(((("of_sexp"), (("src/set_intf.ml", 262, 8008, 8038), ("src/set_intf.ml", 262, 8008, 8045), 0))), (("src/set_intf.ml", 262, 8008, 8038), ("src/set_intf.ml", 262, 8008, 8045), 0), 0, 0)], (("src/set_intf.ml", 262, 8008, 8038), ("src/set_intf.ml", 262, 8008, 8045), 0))]), (("src/set_intf.ml", 262, 8008, 8019), ("src/set_intf.ml", 262, 8008, 8046), 0))], 0, 0, Tag1 ("Base__Set_intf", 102)), 1, 0); (("t_of_sexp", 7304), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1747), (Tag3 ((("t", 7303)), 0, (0)), 100000000, 0, -1746), 0), 100000000, 0, -1745), 0, (("src/set_intf.ml", 264, 8048, 8052), ("src/set_intf.ml", 264, 8048, 8088), 0), 0, Tag1 ("Base__Set_intf", 103)), 0); Tag1 (("comparator_witness", 7305), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/set_intf.ml", 268, 8104, 8116), ("src/set_intf.ml", 268, 8104, 8145), 0), 0, 0, 0, Tag1 ("Base__Comparator", 5)), 1, 0); (("comparator", 7306), ((Tag3 (Tag1 ((Tag2 ("Base__Comparator")), "comparator"), [(Tag3 ((("t", 7303)), 0, (0)), 100000000, 0, -1743); (Tag3 ((("comparator_witness", 7305)), 0, (0)), 100000000, 0, -1744)], (0)), 100000000, 0, -1742), 0, (("src/set_intf.ml", 268, 8104, 8116), ("src/set_intf.ml", 268, 8104, 8145), 0), 0, Tag1 ("Base__Comparator", 6)), 0)])), 0, (("src/set_intf.ml", 261, 7978, 7980), ("src/set_intf.ml", 269, 8146, 8151), 0), Tag1 ("Base__Set_intf", 105)), 0); Tag4 (("M_sexp_grammar", 7290), ((Tag1 ([Tag1 (("t", 7307), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/set_intf.ml", 272, 8188, 8192), ("src/set_intf.ml", 272, 8188, 8231), 0), [(("deriving_inline", (("src/set_intf.ml", 272, 8188, 8202), ("src/set_intf.ml", 272, 8188, 8217), 0)), ([([(((("sexp_grammar"), (("src/set_intf.ml", 272, 8188, 8218), ("src/set_intf.ml", 272, 8188, 8230), 0))), (("src/set_intf.ml", 272, 8188, 8218), ("src/set_intf.ml", 272, 8188, 8230), 0), 0, 0)], (("src/set_intf.ml", 272, 8188, 8218), ("src/set_intf.ml", 272, 8188, 8230), 0))]), (("src/set_intf.ml", 272, 8188, 8199), ("src/set_intf.ml", 272, 8188, 8231), 0))], 0, 0, Tag1 ("Base__Set_intf", 106)), 1, 0); (("t_sexp_grammar", 7308), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("t", 7307)), 0, (0)), 100000000, 0, -1749)], (0)), 100000000, 0, -1748), 0, (("src/set_intf.ml", 274, 8233, 8237), ("src/set_intf.ml", 274, 8233, 8283), 0), 0, Tag1 ("Base__Set_intf", 108)), 0)])), 0, (("src/set_intf.ml", 271, 8153, 8155), ("src/set_intf.ml", 277, 8298, 8303), 0), Tag1 ("Base__Set_intf", 109)), 0); Tag4 (("Compare_m", 7291), ((Tag1 (0)), 0, (("src/set_intf.ml", 279, 8305, 8307), ("src/set_intf.ml", 279, 8305, 8338), 0), Tag1 ("Base__Set_intf", 110)), 0); Tag4 (("Equal_m", 7292), ((Tag1 (0)), 0, (("src/set_intf.ml", 280, 8339, 8341), ("src/set_intf.ml", 280, 8339, 8370), 0), Tag1 ("Base__Set_intf", 111)), 0); Tag4 (("Hash_fold_m", 7293), (((Tag1 (Tag1 ((Tag2 ("Base__")), "Hasher"), "S"))), 0, (("src/set_intf.ml", 281, 8371, 8373), ("src/set_intf.ml", 281, 8371, 8407), 0), Tag1 ("Base__Set_intf", 112)), 0); (("sexp_of_m__t", 7294), ((Tag1 (0, (Tag11 ((("Sexp_of_m", 7288)), [(("t"), ((("elt")), 100000000, 0, -1734))]), 100000000, 0, -1736), (Tag1 (0, (Tag3 ((("t", 7287)), [((("elt")), 100000000, 0, -1734); ((("cmp")), 100000000, 0, -1735)], (0)), 100000000, 0, -1733), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1732), 0), 100000000, 0, -1731), 0), 100000000, 0, -1730), 0, (("src/set_intf.ml", 283, 8409, 8411), ("src/set_intf.ml", 283, 8409, 8495), 0), 0, Tag1 ("Base__Set_intf", 114)), 0); (("m__t_of_sexp", 7295), ((Tag1 (0, (Tag11 ((("M_of_sexp", 7289)), [(("comparator_witness"), ((("cmp")), 100000000, 0, -1727)); (("t"), ((("elt")), 100000000, 0, -1726))]), 100000000, 0, -1729), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1728), (Tag3 ((("t", 7287)), [((("elt")), 100000000, 0, -1726); ((("cmp")), 100000000, 0, -1727)], (0)), 100000000, 0, -1725), 0), 100000000, 0, -1724), 0), 100000000, 0, -1723), 0, (("src/set_intf.ml", 285, 8497, 8499), ("src/set_intf.ml", 288, 8610, 8631), 0), 0, Tag1 ("Base__Set_intf", 117)), 0); (("m__t_sexp_grammar", 7296), ((Tag1 (0, (Tag11 ((("M_sexp_grammar", 7290)), [(("t"), ((("elt")), 100000000, 0, -1720))]), 100000000, 0, -1722), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("t", 7287)), [((("elt")), 100000000, 0, -1720); ((("cmp")), 100000000, 0, -1721)], (0)), 100000000, 0, -1719)], (0)), 100000000, 0, -1718), 0), 100000000, 0, -1717), 0, (("src/set_intf.ml", 290, 8633, 8635), ("src/set_intf.ml", 292, 8707, 8752), 0), 0, Tag1 ("Base__Set_intf", 119)), 0); (("compare_m__t", 7297), ((Tag1 (0, (Tag11 ((("Compare_m", 7291)), 0), 100000000, 0, -1716), (Tag1 (0, (Tag3 ((("t", 7287)), [((("elt")), 100000000, 0, -1713); ((("cmp")), 100000000, 0, -1714)], (0)), 100000000, 0, -1715), (Tag1 (0, (Tag3 ((("t", 7287)), [((("elt")), 100000000, 0, -1713); ((("cmp")), 100000000, 0, -1714)], (0)), 100000000, 0, -1712), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1711), 0), 100000000, 0, -1710), 0), 100000000, 0, -1709), 0), 100000000, 0, -1708), 0, (("src/set_intf.ml", 294, 8754, 8756), ("src/set_intf.ml", 294, 8754, 8836), 0), 0, Tag1 ("Base__Set_intf", 120)), 0); (("equal_m__t", 7298), ((Tag1 (0, (Tag11 ((("Equal_m", 7292)), 0), 100000000, 0, -1707), (Tag1 (0, (Tag3 ((("t", 7287)), [((("elt")), 100000000, 0, -1704); ((("cmp")), 100000000, 0, -1705)], (0)), 100000000, 0, -1706), (Tag1 (0, (Tag3 ((("t", 7287)), [((("elt")), 100000000, 0, -1704); ((("cmp")), 100000000, 0, -1705)], (0)), 100000000, 0, -1703), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1702), 0), 100000000, 0, -1701), 0), 100000000, 0, -1700), 0), 100000000, 0, -1699), 0, (("src/set_intf.ml", 295, 8837, 8839), ("src/set_intf.ml", 295, 8837, 8916), 0), 0, Tag1 ("Base__Set_intf", 121)), 0); (("hash_fold_m__t", 7299), ((Tag1 (0, (Tag11 ((("Hash_fold_m", 7293)), [(("t"), ((("elt")), 100000000, 0, -1695))]), 100000000, 0, -1698), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Hash"), "state"), 0, (0)), 100000000, 0, -1697), (Tag1 (0, (Tag3 ((("t", 7287)), [((("elt")), 100000000, 0, -1695); ((0), 100000000, 0, -1696)], (0)), 100000000, 0, -1694), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Hash"), "state"), 0, (0)), 100000000, 0, -1693), 0), 100000000, 0, -1692), 0), 100000000, 0, -1691), 0), 100000000, 0, -1690), 0, (("src/set_intf.ml", 297, 8918, 8920), ("src/set_intf.ml", 301, 9023, 9040), 0), 0, Tag1 ("Base__Set_intf", 123)), 0); (("hash_m__t", 7300), ((Tag1 (0, (Tag11 ((("Hash_fold_m", 7293)), [(("t"), ((("elt")), 100000000, 0, -1687))]), 100000000, 0, -1689), (Tag1 (0, (Tag3 ((("t", 7287)), [((("elt")), 100000000, 0, -1687); ((0), 100000000, 0, -1688)], (0)), 100000000, 0, -1686), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1685), 0), 100000000, 0, -1684), 0), 100000000, 0, -1683), 0, (("src/set_intf.ml", 303, 9042, 9044), ("src/set_intf.ml", 303, 9042, 9121), 0), 0, Tag1 ("Base__Set_intf", 125)), 0)])), 0, (("src/set_intf.ml", 250, 7796, 7796), ("src/set_intf.ml", 304, 9122, 9125), 0), Tag1 ("Base__Set_intf", 126)), 0); Tag4 (("Set", 7065), ((Tag1 ([Tag1 (("t", 7309), ([((("elt")), 100000000, 0, -2313); ((("cmp")), 100000000, 0, -2314)], 2, 0, 1, 0, [15; 15], [2; 2], 0, 0, (("src/set_intf.ml", 317, 9693, 9695), ("src/set_intf.ml", 317, 9693, 9744), 0), [(("deriving_inline", (("src/set_intf.ml", 317, 9693, 9720), ("src/set_intf.ml", 317, 9693, 9735), 0)), ([([(((("compare"), (("src/set_intf.ml", 317, 9693, 9736), ("src/set_intf.ml", 317, 9693, 9743), 0))), (("src/set_intf.ml", 317, 9693, 9736), ("src/set_intf.ml", 317, 9693, 9743), 0), 0, 0)], (("src/set_intf.ml", 317, 9693, 9736), ("src/set_intf.ml", 317, 9693, 9743), 0))]), (("src/set_intf.ml", 317, 9693, 9717), ("src/set_intf.ml", 317, 9693, 9744), 0))], 0, 0, Tag1 ("Base__Set_intf", 127)), 1, 0); (("compare", 7310), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "compare"), [((("a")), 100000000, 0, -2309)], (0)), 100000000, 0, -2312), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "compare"), [((("b")), 100000000, 0, -2310)], (0)), 100000000, 0, -2311), (Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "compare"), [(Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2309); ((("b")), 100000000, 0, -2310)], (0)), 100000000, 0, -2308)], (0)), 100000000, 0, -2307), 0), 100000000, 0, -2306), 0), 100000000, 0, -2305), 0, (("src/set_intf.ml", 319, 9746, 9756), ("src/set_intf.ml", 319, 9746, 9830), 0), 0, Tag1 ("Base__Ppx_compare_lib", 11)), 0); Tag1 (("comparator", 7311), ([((("k")), 100000000, 0, -2303); ((("cmp")), 100000000, 0, -2304)], 2, 0, 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Module"), "t"), [((("k")), 100000000, 0, -2303); ((("cmp")), 100000000, 0, -2304)], (0)), 100000000, 0, -2302)), [63; 63], [0; 0], 0, 0, (("src/set_intf.ml", 323, 9844, 9846), ("src/set_intf.ml", 324, 9906, 9974), 0), [(("deprecated", (("src/set_intf.ml", 324, 9906, 9911), ("src/set_intf.ml", 324, 9906, 9921), 0)), ([([(Tag1 (Tag2 ("[since 2021-12] use [Comparator.Module.t] instead", (("src/set_intf.ml", 324, 9906, 9923), ("src/set_intf.ml", 324, 9906, 9972), 0), 0)), (("src/set_intf.ml", 324, 9906, 9922), ("src/set_intf.ml", 324, 9906, 9973), 0), 0, 0)], (("src/set_intf.ml", 324, 9906, 9922), ("src/set_intf.ml", 324, 9906, 9973), 0))]), (("src/set_intf.ml", 324, 9906, 9908), ("src/set_intf.ml", 324, 9906, 9974), 0))], 0, 0, Tag1 ("Base__Set_intf", 129)), 1, 0); (("invariants", 7312), ((Tag1 (0, (Tag3 ((("t", 7309)), [((0), 100000000, 0, -2300); ((0), 100000000, 0, -2301)], (0)), 100000000, 0, -2299), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2298), 0), 100000000, 0, -2297), 0, (("src/set_intf.ml", 327, 10064, 10066), ("src/set_intf.ml", 327, 10064, 10099), 0), 0, Tag1 ("Base__Set_intf", 130)), 0); (("comparator_s", 7313), ((Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2294); ((("cmp")), 100000000, 0, -2295)], (0)), 100000000, 0, -2296), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Module"), "t"), [((("a")), 100000000, 0, -2294); ((("cmp")), 100000000, 0, -2295)], (0)), 100000000, 0, -2293), 0), 100000000, 0, -2292), 0, (("src/set_intf.ml", 331, 10225, 10227), ("src/set_intf.ml", 331, 10225, 10292), 0), 0, Tag1 ("Base__Set_intf", 131)), 0); (("comparator", 7314), ((Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2289); ((("cmp")), 100000000, 0, -2290)], (0)), 100000000, 0, -2291), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "t"), [((("a")), 100000000, 0, -2289); ((("cmp")), 100000000, 0, -2290)], (0)), 100000000, 0, -2288), 0), 100000000, 0, -2287), 0, (("src/set_intf.ml", 333, 10294, 10296), ("src/set_intf.ml", 333, 10294, 10352), 0), 0, Tag1 ("Base__Set_intf", 132)), 0); (("empty", 7315), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Module"), "t"), [((("a")), 100000000, 0, -2284); ((("cmp")), 100000000, 0, -2285)], (0)), 100000000, 0, -2286), (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2284); ((("cmp")), 100000000, 0, -2285)], (0)), 100000000, 0, -2283), 0), 100000000, 0, -2282), 0, (("src/set_intf.ml", 336, 10418, 10420), ("src/set_intf.ml", 336, 10418, 10478), 0), 0, Tag1 ("Base__Set_intf", 133)), 0); (("singleton", 7316), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Module"), "t"), [((("a")), 100000000, 0, -2279); ((("cmp")), 100000000, 0, -2280)], (0)), 100000000, 0, -2281), (Tag1 (0, ((("a")), 100000000, 0, -2279), (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2279); ((("cmp")), 100000000, 0, -2280)], (0)), 100000000, 0, -2278), 0), 100000000, 0, -2277), 0), 100000000, 0, -2276), 0, (("src/set_intf.ml", 340, 10583, 10585), ("src/set_intf.ml", 340, 10583, 10653), 0), 0, Tag1 ("Base__Set_intf", 134)), 0); (("length", 7317), ((Tag1 (0, (Tag3 ((("t", 7309)), [((0), 100000000, 0, -2274); ((0), 100000000, 0, -2275)], (0)), 100000000, 0, -2273), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -2272), 0), 100000000, 0, -2271), 0, (("src/set_intf.ml", 343, 10708, 10710), ("src/set_intf.ml", 343, 10708, 10738), 0), 0, Tag1 ("Base__Set_intf", 135)), 0); (("is_empty", 7318), ((Tag1 (0, (Tag3 ((("t", 7309)), [((0), 100000000, 0, -2269); ((0), 100000000, 0, -2270)], (0)), 100000000, 0, -2268), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2267), 0), 100000000, 0, -2266), 0, (("src/set_intf.ml", 346, 10799, 10801), ("src/set_intf.ml", 346, 10799, 10832), 0), 0, Tag1 ("Base__Set_intf", 136)), 0); (("mem", 7319), ((Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2263); ((0), 100000000, 0, -2265)], (0)), 100000000, 0, -2264), (Tag1 (0, ((("a")), 100000000, 0, -2263), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2262), 0), 100000000, 0, -2261), 0), 100000000, 0, -2260), 0, (("src/set_intf.ml", 349, 10900, 10902), ("src/set_intf.ml", 349, 10900, 10935), 0), 0, Tag1 ("Base__Set_intf", 137)), 0); (("add", 7320), ((Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2257); ((("cmp")), 100000000, 0, -2258)], (0)), 100000000, 0, -2259), (Tag1 (0, ((("a")), 100000000, 0, -2257), (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2257); ((("cmp")), 100000000, 0, -2258)], (0)), 100000000, 0, -2256), 0), 100000000, 0, -2255), 0), 100000000, 0, -2254), 0, (("src/set_intf.ml", 353, 11044, 11046), ("src/set_intf.ml", 353, 11044, 11090), 0), 0, Tag1 ("Base__Set_intf", 138)), 0); (("remove", 7321), ((Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2251); ((("cmp")), 100000000, 0, -2252)], (0)), 100000000, 0, -2253), (Tag1 (0, ((("a")), 100000000, 0, -2251), (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2251); ((("cmp")), 100000000, 0, -2252)], (0)), 100000000, 0, -2250), 0), 100000000, 0, -2249), 0), 100000000, 0, -2248), 0, (("src/set_intf.ml", 357, 11217, 11219), ("src/set_intf.ml", 357, 11217, 11266), 0), 0, Tag1 ("Base__Set_intf", 139)), 0); (("union", 7322), ((Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2244); ((("cmp")), 100000000, 0, -2245)], (0)), 100000000, 0, -2247), (Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2244); ((("cmp")), 100000000, 0, -2245)], (0)), 100000000, 0, -2246), (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2244); ((("cmp")), 100000000, 0, -2245)], (0)), 100000000, 0, -2243), 0), 100000000, 0, -2242), 0), 100000000, 0, -2241), 0, (("src/set_intf.ml", 360, 11355, 11357), ("src/set_intf.ml", 360, 11355, 11413), 0), 0, Tag1 ("Base__Set_intf", 140)), 0); (("union_list", 7323), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Module"), "t"), [((("a")), 100000000, 0, -2236); ((("cmp")), 100000000, 0, -2237)], (0)), 100000000, 0, -2240), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2236); ((("cmp")), 100000000, 0, -2237)], (0)), 100000000, 0, -2239)], (0)), 100000000, 0, -2238), (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2236); ((("cmp")), 100000000, 0, -2237)], (0)), 100000000, 0, -2235), 0), 100000000, 0, -2234), 0), 100000000, 0, -2233), 0, (("src/set_intf.ml", 365, 11657, 11659), ("src/set_intf.ml", 365, 11657, 11743), 0), 0, Tag1 ("Base__Set_intf", 141)), 0); (("inter", 7324), ((Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2229); ((("cmp")), 100000000, 0, -2230)], (0)), 100000000, 0, -2232), (Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2229); ((("cmp")), 100000000, 0, -2230)], (0)), 100000000, 0, -2231), (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2229); ((("cmp")), 100000000, 0, -2230)], (0)), 100000000, 0, -2228), 0), 100000000, 0, -2227), 0), 100000000, 0, -2226), 0, (("src/set_intf.ml", 369, 11852, 11854), ("src/set_intf.ml", 369, 11852, 11910), 0), 0, Tag1 ("Base__Set_intf", 142)), 0); (("diff", 7325), ((Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2222); ((("cmp")), 100000000, 0, -2223)], (0)), 100000000, 0, -2225), (Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2222); ((("cmp")), 100000000, 0, -2223)], (0)), 100000000, 0, -2224), (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2222); ((("cmp")), 100000000, 0, -2223)], (0)), 100000000, 0, -2221), 0), 100000000, 0, -2220), 0), 100000000, 0, -2219), 0, (("src/set_intf.ml", 373, 12076, 12078), ("src/set_intf.ml", 373, 12076, 12133), 0), 0, Tag1 ("Base__Set_intf", 143)), 0); (("symmetric_diff", 7326), ((Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2215); ((("cmp")), 100000000, 0, -2217)], (0)), 100000000, 0, -2218), (Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2215); ((("cmp")), 100000000, 0, -2217)], (0)), 100000000, 0, -2216), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Either"), "t"), [((("a")), 100000000, 0, -2215); ((("a")), 100000000, 0, -2215)], (0)), 100000000, 0, -2214)], (0)), 100000000, 0, -2213), 0), 100000000, 0, -2212), 0), 100000000, 0, -2211), 0, (("src/set_intf.ml", 378, 12330, 12332), ("src/set_intf.ml", 378, 12330, 12413), 0), 0, Tag1 ("Base__Set_intf", 144)), 0); (("compare_direct", 7327), ((Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2208); ((("cmp")), 100000000, 0, -2209)], (0)), 100000000, 0, -2210), (Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2208); ((("cmp")), 100000000, 0, -2209)], (0)), 100000000, 0, -2207), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -2206), 0), 100000000, 0, -2205), 0), 100000000, 0, -2204), 0, (("src/set_intf.ml", 383, 12661, 12663), ("src/set_intf.ml", 383, 12661, 12719), 0), 0, Tag1 ("Base__Set_intf", 145)), 0); (("hash_fold_direct", 7328), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Hash"), "folder"), [((("a")), 100000000, 0, -2201)], (0)), 100000000, 0, -2203), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Hash"), "folder"), [(Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2201); ((("cmp")), 100000000, 0, -2202)], (0)), 100000000, 0, -2200)], (0)), 100000000, 0, -2199), 0), 100000000, 0, -2198), 0, (("src/set_intf.ml", 389, 13003, 13005), ("src/set_intf.ml", 389, 13003, 13070), 0), 0, Tag1 ("Base__Set_intf", 146)), 0); (("equal", 7329), ((Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2195); ((("cmp")), 100000000, 0, -2196)], (0)), 100000000, 0, -2197), (Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2195); ((("cmp")), 100000000, 0, -2196)], (0)), 100000000, 0, -2194), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2193), 0), 100000000, 0, -2192), 0), 100000000, 0, -2191), 0, (("src/set_intf.ml", 393, 13185, 13187), ("src/set_intf.ml", 393, 13185, 13235), 0), 0, Tag1 ("Base__Set_intf", 147)), 0); (("exists", 7330), ((Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2188); ((0), 100000000, 0, -2190)], (0)), 100000000, 0, -2189), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -2188), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2187), 0), 100000000, 0, -2186), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2185), 0), 100000000, 0, -2184), 0), 100000000, 0, -2183), 0, (("src/set_intf.ml", 397, 13394, 13396), ("src/set_intf.ml", 397, 13394, 13454), 0), 0, Tag1 ("Base__Set_intf", 148)), 0); (("for_all", 7331), ((Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2180); ((0), 100000000, 0, -2182)], (0)), 100000000, 0, -2181), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -2180), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2179), 0), 100000000, 0, -2178), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2177), 0), 100000000, 0, -2176), 0), 100000000, 0, -2175), 0, (("src/set_intf.ml", 401, 13603, 13605), ("src/set_intf.ml", 401, 13603, 13664), 0), 0, Tag1 ("Base__Set_intf", 149)), 0); (("count", 7332), ((Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2172); ((0), 100000000, 0, -2174)], (0)), 100000000, 0, -2173), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -2172), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2171), 0), 100000000, 0, -2170), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -2169), 0), 100000000, 0, -2168), 0), 100000000, 0, -2167), 0, (("src/set_intf.ml", 405, 13767, 13769), ("src/set_intf.ml", 405, 13767, 13825), 0), 0, Tag1 ("Base__Set_intf", 150)), 0); (("sum", 7333), ((Tag1 (0, (Tag11 (Tag1 (Tag1 ((Tag2 ("Base__")), "Container"), "Summable"), [(("t"), ((("sum")), 100000000, 0, -2161))]), 100000000, 0, -2166), (Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2163); ((0), 100000000, 0, -2165)], (0)), 100000000, 0, -2164), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -2163), ((("sum")), 100000000, 0, -2161), 0), 100000000, 0, -2162), ((("sum")), 100000000, 0, -2161), 0), 100000000, 0, -2160), 0), 100000000, 0, -2159), 0), 100000000, 0, -2158), 0, (("src/set_intf.ml", 409, 13908, 13910), ("src/set_intf.ml", 413, 14021, 14032), 0), 0, Tag1 ("Base__Set_intf", 152)), 0); (("find", 7334), ((Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2153); ((0), 100000000, 0, -2157)], (0)), 100000000, 0, -2156), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -2153), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2155), 0), 100000000, 0, -2154), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -2153)], (0)), 100000000, 0, -2152), 0), 100000000, 0, -2151), 0), 100000000, 0, -2150), 0, (("src/set_intf.ml", 418, 14232, 14234), ("src/set_intf.ml", 418, 14232, 14295), 0), 0, Tag1 ("Base__Set_intf", 153)), 0); (("find_map", 7335), ((Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2147); ((0), 100000000, 0, -2149)], (0)), 100000000, 0, -2148), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -2147), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -2144)], (0)), 100000000, 0, -2146), 0), 100000000, 0, -2145), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -2144)], (0)), 100000000, 0, -2143), 0), 100000000, 0, -2142), 0), 100000000, 0, -2141), 0, (("src/set_intf.ml", 423, 14504, 14506), ("src/set_intf.ml", 423, 14504, 14576), 0), 0, Tag1 ("Base__Set_intf", 154)), 0); (("find_exn", 7336), ((Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2136); ((0), 100000000, 0, -2140)], (0)), 100000000, 0, -2139), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -2136), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2138), 0), 100000000, 0, -2137), ((("a")), 100000000, 0, -2136), 0), 100000000, 0, -2135), 0), 100000000, 0, -2134), 0, (("src/set_intf.ml", 426, 14636, 14638), ("src/set_intf.ml", 426, 14636, 14696), 0), 0, Tag1 ("Base__Set_intf", 155)), 0); (("nth", 7337), ((Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2130); ((0), 100000000, 0, -2133)], (0)), 100000000, 0, -2132), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -2131), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -2130)], (0)), 100000000, 0, -2129), 0), 100000000, 0, -2128), 0), 100000000, 0, -2127), 0, (("src/set_intf.ml", 430, 14868, 14870), ("src/set_intf.ml", 430, 14868, 14909), 0), 0, Tag1 ("Base__Set_intf", 156)), 0); (("remove_index", 7338), ((Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2123); ((("cmp")), 100000000, 0, -2124)], (0)), 100000000, 0, -2126), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -2125), (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2123); ((("cmp")), 100000000, 0, -2124)], (0)), 100000000, 0, -2122), 0), 100000000, 0, -2121), 0), 100000000, 0, -2120), 0, (("src/set_intf.ml", 435, 15116, 15118), ("src/set_intf.ml", 435, 15116, 15172), 0), 0, Tag1 ("Base__Set_intf", 157)), 0); (("is_subset", 7339), ((Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2117); ((("cmp")), 100000000, 0, -2118)], (0)), 100000000, 0, -2119), (Tag1 (("of_"), (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2117); ((("cmp")), 100000000, 0, -2118)], (0)), 100000000, 0, -2116), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2115), 0), 100000000, 0, -2114), 0), 100000000, 0, -2113), 0, (("src/set_intf.ml", 438, 15249, 15251), ("src/set_intf.ml", 438, 15249, 15307), 0), 0, Tag1 ("Base__Set_intf", 158)), 0); (("are_disjoint", 7340), ((Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2110); ((("cmp")), 100000000, 0, -2111)], (0)), 100000000, 0, -2112), (Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2110); ((("cmp")), 100000000, 0, -2111)], (0)), 100000000, 0, -2109), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2108), 0), 100000000, 0, -2107), 0), 100000000, 0, -2106), 0, (("src/set_intf.ml", 442, 15413, 15415), ("src/set_intf.ml", 442, 15413, 15470), 0), 0, Tag1 ("Base__Set_intf", 159)), 0); Tag3 (("Named", 7341), 0, (Tag1 ([Tag1 (("t", 7405), ([((("a")), 100000000, 0, -2336)], 1, [[(("set", 3229), 0, ((("a")), 100000000, 0, -2336), (("src/set_intf.ml", 467, 16376, 16384), ("src/set_intf.ml", 468, 16393, 16400), 0), 0, Tag1 ("Base__Set_intf", 162)); (("name", 3230), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2337), (("src/set_intf.ml", 468, 16393, 16401), ("src/set_intf.ml", 468, 16393, 16414), 0), 0, Tag1 ("Base__Set_intf", 163))]], 1, ((Tag3 (Tag1 ((("Named", 7059)), "t"), [((("a")), 100000000, 0, -2336)], (0)), 100000000, 0, -2335)), [25], [0], 0, 0, (("src/set_intf.ml", 466, 16347, 16351), ("src/set_intf.ml", 469, 16415, 16422), 0), 0, 0, 0, Tag1 ("Base__Set_intf", 161)), 1, 0); (("is_subset", 7406), ((Tag1 (0, (Tag3 ((("t", 7405)), [(Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2331); ((("cmp")), 100000000, 0, -2332)], (0)), 100000000, 0, -2334)], (0)), 100000000, 0, -2333), (Tag1 (("of_"), (Tag3 ((("t", 7405)), [(Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2331); ((("cmp")), 100000000, 0, -2332)], (0)), 100000000, 0, -2330)], (0)), 100000000, 0, -2329), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2328)], (0)), 100000000, 0, -2327), 0), 100000000, 0, -2326), 0), 100000000, 0, -2325), 0, (("src/set_intf.ml", 473, 16549, 16553), ("src/set_intf.ml", 473, 16549, 16628), 0), 0, Tag1 ("Base__Set_intf", 164)), 0); (("equal", 7407), ((Tag1 (0, (Tag3 ((("t", 7405)), [(Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2321); ((("cmp")), 100000000, 0, -2322)], (0)), 100000000, 0, -2324)], (0)), 100000000, 0, -2323), (Tag1 (0, (Tag3 ((("t", 7405)), [(Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2321); ((("cmp")), 100000000, 0, -2322)], (0)), 100000000, 0, -2320)], (0)), 100000000, 0, -2319), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2318)], (0)), 100000000, 0, -2317), 0), 100000000, 0, -2316), 0), 100000000, 0, -2315), 0, (("src/set_intf.ml", 477, 16743, 16747), ("src/set_intf.ml", 477, 16743, 16814), 0), 0, Tag1 ("Base__Set_intf", 165)), 0)]), 0, (("src/set_intf.ml", 463, 16285, 16287), ("src/set_intf.ml", 478, 16815, 16820), 0), Tag1 ("Base__Set_intf", 166)), 0, 0); (("of_list", 7342), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Module"), "t"), [((("a")), 100000000, 0, -2102); ((("cmp")), 100000000, 0, -2103)], (0)), 100000000, 0, -2105), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -2102)], (0)), 100000000, 0, -2104), (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2102); ((("cmp")), 100000000, 0, -2103)], (0)), 100000000, 0, -2101), 0), 100000000, 0, -2100), 0), 100000000, 0, -2099), 0, (("src/set_intf.ml", 481, 16903, 16905), ("src/set_intf.ml", 481, 16903, 16976), 0), 0, Tag1 ("Base__Set_intf", 167)), 0); (("of_sequence", 7343), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Module"), "t"), [((("a")), 100000000, 0, -2095); ((("cmp")), 100000000, 0, -2096)], (0)), 100000000, 0, -2098), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [((("a")), 100000000, 0, -2095)], (0)), 100000000, 0, -2097), (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2095); ((("cmp")), 100000000, 0, -2096)], (0)), 100000000, 0, -2094), 0), 100000000, 0, -2093), 0), 100000000, 0, -2092), 0, (("src/set_intf.ml", 483, 16978, 16980), ("src/set_intf.ml", 483, 16978, 17061), 0), 0, Tag1 ("Base__Set_intf", 168)), 0); (("of_array", 7344), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Module"), "t"), [((("a")), 100000000, 0, -2088); ((("cmp")), 100000000, 0, -2089)], (0)), 100000000, 0, -2091), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -2088)], (0)), 100000000, 0, -2090), (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2088); ((("cmp")), 100000000, 0, -2089)], (0)), 100000000, 0, -2087), 0), 100000000, 0, -2086), 0), 100000000, 0, -2085), 0, (("src/set_intf.ml", 484, 17062, 17064), ("src/set_intf.ml", 484, 17062, 17137), 0), 0, Tag1 ("Base__Set_intf", 169)), 0); (("to_list", 7345), ((Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2082); ((0), 100000000, 0, -2084)], (0)), 100000000, 0, -2083), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -2082)], (0)), 100000000, 0, -2081), 0), 100000000, 0, -2080), 0, (("src/set_intf.ml", 488, 17252, 17254), ("src/set_intf.ml", 488, 17252, 17288), 0), 0, Tag1 ("Base__Set_intf", 170)), 0); (("to_array", 7346), ((Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2077); ((0), 100000000, 0, -2079)], (0)), 100000000, 0, -2078), (Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -2077)], (0)), 100000000, 0, -2076), 0), 100000000, 0, -2075), 0, (("src/set_intf.ml", 490, 17290, 17292), ("src/set_intf.ml", 490, 17290, 17328), 0), 0, Tag1 ("Base__Set_intf", 171)), 0); (("of_sorted_array", 7347), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Module"), "t"), [((("a")), 100000000, 0, -2071); ((("cmp")), 100000000, 0, -2072)], (0)), 100000000, 0, -2074), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -2071)], (0)), 100000000, 0, -2073), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2071); ((("cmp")), 100000000, 0, -2072)], (0)), 100000000, 0, -2070)], (0)), 100000000, 0, -2069), 0), 100000000, 0, -2068), 0), 100000000, 0, -2067), 0, (("src/set_intf.ml", 495, 17581, 17583), ("src/set_intf.ml", 498, 17657, 17687), 0), 0, Tag1 ("Base__Set_intf", 172)), 0); (("of_sorted_array_unchecked", 7348), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Module"), "t"), [((("a")), 100000000, 0, -2063); ((("cmp")), 100000000, 0, -2064)], (0)), 100000000, 0, -2066), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -2063)], (0)), 100000000, 0, -2065), (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2063); ((("cmp")), 100000000, 0, -2064)], (0)), 100000000, 0, -2062), 0), 100000000, 0, -2061), 0), 100000000, 0, -2060), 0, (("src/set_intf.ml", 501, 17766, 17768), ("src/set_intf.ml", 504, 17852, 17871), 0), 0, Tag1 ("Base__Set_intf", 173)), 0); (("of_increasing_iterator_unchecked", 7349), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Module"), "t"), [((("a")), 100000000, 0, -2054); ((("cmp")), 100000000, 0, -2055)], (0)), 100000000, 0, -2059), (Tag1 (("len"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -2058), (Tag1 (("f"), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -2057), ((("a")), 100000000, 0, -2054), 0), 100000000, 0, -2056), (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2054); ((("cmp")), 100000000, 0, -2055)], (0)), 100000000, 0, -2053), 0), 100000000, 0, -2052), 0), 100000000, 0, -2051), 0), 100000000, 0, -2050), 0, (("src/set_intf.ml", 510, 18210, 18212), ("src/set_intf.ml", 514, 18333, 18352), 0), 0, Tag1 ("Base__Set_intf", 174)), 0); (("stable_dedup_list", 7350), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Module"), "t"), [((("a")), 100000000, 0, -2046); ((0), 100000000, 0, -2049)], (0)), 100000000, 0, -2048), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -2046)], (0)), 100000000, 0, -2047), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -2046)], (0)), 100000000, 0, -2045), 0), 100000000, 0, -2044), 0), 100000000, 0, -2043), 0, (("src/set_intf.ml", 520, 18687, 18689), ("src/set_intf.ml", 520, 18687, 18762), 0), 0, Tag1 ("Base__Set_intf", 175)), 0); (("map", 7351), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Module"), "t"), [((("b")), 100000000, 0, -2036); ((("cmp")), 100000000, 0, -2037)], (0)), 100000000, 0, -2042), (Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2039); ((0), 100000000, 0, -2041)], (0)), 100000000, 0, -2040), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -2039), ((("b")), 100000000, 0, -2036), 0), 100000000, 0, -2038), (Tag3 ((("t", 7309)), [((("b")), 100000000, 0, -2036); ((("cmp")), 100000000, 0, -2037)], (0)), 100000000, 0, -2035), 0), 100000000, 0, -2034), 0), 100000000, 0, -2033), 0), 100000000, 0, -2032), 0, (("src/set_intf.ml", 524, 18931, 18933), ("src/set_intf.ml", 528, 19026, 19045), 0), 0, Tag1 ("Base__Set_intf", 176)), 0); (("filter_map", 7352), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Module"), "t"), [((("b")), 100000000, 0, -2024); ((("cmp")), 100000000, 0, -2025)], (0)), 100000000, 0, -2031), (Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2028); ((0), 100000000, 0, -2030)], (0)), 100000000, 0, -2029), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -2028), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -2024)], (0)), 100000000, 0, -2027), 0), 100000000, 0, -2026), (Tag3 ((("t", 7309)), [((("b")), 100000000, 0, -2024); ((("cmp")), 100000000, 0, -2025)], (0)), 100000000, 0, -2023), 0), 100000000, 0, -2022), 0), 100000000, 0, -2021), 0), 100000000, 0, -2020), 0, (("src/set_intf.ml", 531, 19132, 19134), ("src/set_intf.ml", 535, 19241, 19260), 0), 0, Tag1 ("Base__Set_intf", 177)), 0); (("filter", 7353), ((Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2015); ((("cmp")), 100000000, 0, -2016)], (0)), 100000000, 0, -2019), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -2015), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2018), 0), 100000000, 0, -2017), (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2015); ((("cmp")), 100000000, 0, -2016)], (0)), 100000000, 0, -2014), 0), 100000000, 0, -2013), 0), 100000000, 0, -2012), 0, (("src/set_intf.ml", 539, 19365, 19367), ("src/set_intf.ml", 539, 19365, 19436), 0), 0, Tag1 ("Base__Set_intf", 178)), 0); (("fold", 7354), ((Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2009); ((0), 100000000, 0, -2011)], (0)), 100000000, 0, -2010), (Tag1 (("init"), ((("acc")), 100000000, 0, -2006), (Tag1 (("f"), (Tag1 (0, ((("acc")), 100000000, 0, -2006), (Tag1 (0, ((("a")), 100000000, 0, -2009), ((("acc")), 100000000, 0, -2006), 0), 100000000, 0, -2008), 0), 100000000, 0, -2007), ((("acc")), 100000000, 0, -2006), 0), 100000000, 0, -2005), 0), 100000000, 0, -2004), 0), 100000000, 0, -2003), 0, (("src/set_intf.ml", 542, 19526, 19528), ("src/set_intf.ml", 542, 19526, 19605), 0), 0, Tag1 ("Base__Set_intf", 179)), 0); (("fold_result", 7355), ((Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -2000); ((0), 100000000, 0, -2002)], (0)), 100000000, 0, -2001), (Tag1 (("init"), ((("acc")), 100000000, 0, -1995), (Tag1 (("f"), (Tag1 (0, ((("acc")), 100000000, 0, -1995), (Tag1 (0, ((("a")), 100000000, 0, -2000), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Result"), "t"), [((("acc")), 100000000, 0, -1995); ((("e")), 100000000, 0, -1996)], (0)), 100000000, 0, -1999), 0), 100000000, 0, -1998), 0), 100000000, 0, -1997), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Result"), "t"), [((("acc")), 100000000, 0, -1995); ((("e")), 100000000, 0, -1996)], (0)), 100000000, 0, -1994), 0), 100000000, 0, -1993), 0), 100000000, 0, -1992), 0), 100000000, 0, -1991), 0, (("src/set_intf.ml", 546, 19763, 19765), ("src/set_intf.ml", 550, 19870, 19896), 0), 0, Tag1 ("Base__Set_intf", 180)), 0); (("fold_until", 7356), ((Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -1988); ((0), 100000000, 0, -1990)], (0)), 100000000, 0, -1989), (Tag1 (("init"), ((("acc")), 100000000, 0, -1984), (Tag1 (("f"), (Tag1 (0, ((("acc")), 100000000, 0, -1984), (Tag1 (0, ((("a")), 100000000, 0, -1988), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Container"), "Continue_or_stop"), "t"), [((("acc")), 100000000, 0, -1984); ((("final")), 100000000, 0, -1982)], (0)), 100000000, 0, -1987), 0), 100000000, 0, -1986), 0), 100000000, 0, -1985), (Tag1 (("finish"), (Tag1 (0, ((("acc")), 100000000, 0, -1984), ((("final")), 100000000, 0, -1982), 0), 100000000, 0, -1983), ((("final")), 100000000, 0, -1982), 0), 100000000, 0, -1981), 0), 100000000, 0, -1980), 0), 100000000, 0, -1979), 0), 100000000, 0, -1978), 0, (("src/set_intf.ml", 555, 20110, 20112), ("src/set_intf.ml", 560, 20281, 20294), 0), 0, Tag1 ("Base__Set_intf", 181)), 0); (("fold_right", 7357), ((Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -1975); ((0), 100000000, 0, -1977)], (0)), 100000000, 0, -1976), (Tag1 (("init"), ((("acc")), 100000000, 0, -1972), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -1975), (Tag1 (0, ((("acc")), 100000000, 0, -1972), ((("acc")), 100000000, 0, -1972), 0), 100000000, 0, -1974), 0), 100000000, 0, -1973), ((("acc")), 100000000, 0, -1972), 0), 100000000, 0, -1971), 0), 100000000, 0, -1970), 0), 100000000, 0, -1969), 0, (("src/set_intf.ml", 564, 20382, 20384), ("src/set_intf.ml", 564, 20382, 20467), 0), 0, Tag1 ("Base__Set_intf", 182)), 0); (("iter", 7358), ((Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -1966); ((0), 100000000, 0, -1968)], (0)), 100000000, 0, -1967), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -1966), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1965), 0), 100000000, 0, -1964), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1963), 0), 100000000, 0, -1962), 0), 100000000, 0, -1961), 0, (("src/set_intf.ml", 568, 20577, 20579), ("src/set_intf.ml", 568, 20577, 20635), 0), 0, Tag1 ("Base__Set_intf", 183)), 0); (("iter2", 7359), ((Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -1956); ((("cmp")), 100000000, 0, -1959)], (0)), 100000000, 0, -1960), (Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -1956); ((("cmp")), 100000000, 0, -1959)], (0)), 100000000, 0, -1958), (Tag1 (("f"), (Tag1 (0, (Tag8 (([("Both", (((Tag2 ([((("a")), 100000000, 0, -1956); ((("a")), 100000000, 0, -1956)]), 100000000, 0, -1957)))); ("Left", ((((("a")), 100000000, 0, -1956)))); ("Right", ((((("a")), 100000000, 0, -1956))))], (0, 100000000, 0, -1955), 1, 0, 0)), 100000000, 0, -1954), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1953), 0), 100000000, 0, -1952), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1951), 0), 100000000, 0, -1950), 0), 100000000, 0, -1949), 0), 100000000, 0, -1948), 0, (("src/set_intf.ml", 573, 20886, 20888), ("src/set_intf.ml", 577, 21017, 21028), 0), 0, Tag1 ("Base__Set_intf", 184)), 0); (("partition_tf", 7360), ((Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -1942); ((("cmp")), 100000000, 0, -1943)], (0)), 100000000, 0, -1947), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -1942), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1946), 0), 100000000, 0, -1945), (Tag2 ([(Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -1942); ((("cmp")), 100000000, 0, -1943)], (0)), 100000000, 0, -1941); (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -1942); ((("cmp")), 100000000, 0, -1943)], (0)), 100000000, 0, -1944)]), 100000000, 0, -1940), 0), 100000000, 0, -1939), 0), 100000000, 0, -1938), 0, (("src/set_intf.ml", 581, 21187, 21189), ("src/set_intf.ml", 584, 21258, 21292), 0), 0, Tag1 ("Base__Set_intf", 185)), 0); (("elements", 7361), ((Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -1935); ((0), 100000000, 0, -1937)], (0)), 100000000, 0, -1936), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -1935)], (0)), 100000000, 0, -1934), 0), 100000000, 0, -1933), 0, (("src/set_intf.ml", 587, 21323, 21325), ("src/set_intf.ml", 587, 21323, 21360), 0), 0, Tag1 ("Base__Set_intf", 186)), 0); (("min_elt", 7362), ((Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -1930); ((0), 100000000, 0, -1932)], (0)), 100000000, 0, -1931), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1930)], (0)), 100000000, 0, -1929), 0), 100000000, 0, -1928), 0, (("src/set_intf.ml", 590, 21425, 21427), ("src/set_intf.ml", 590, 21425, 21463), 0), 0, Tag1 ("Base__Set_intf", 187)), 0); (("min_elt_exn", 7363), ((Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -1925); ((0), 100000000, 0, -1927)], (0)), 100000000, 0, -1926), ((("a")), 100000000, 0, -1925), 0), 100000000, 0, -1924), 0, (("src/set_intf.ml", 593, 21540, 21542), ("src/set_intf.ml", 593, 21540, 21575), 0), 0, Tag1 ("Base__Set_intf", 188)), 0); (("max_elt", 7364), ((Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -1921); ((0), 100000000, 0, -1923)], (0)), 100000000, 0, -1922), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1921)], (0)), 100000000, 0, -1920), 0), 100000000, 0, -1919), 0, (("src/set_intf.ml", 596, 21640, 21642), ("src/set_intf.ml", 596, 21640, 21678), 0), 0, Tag1 ("Base__Set_intf", 189)), 0); (("max_elt_exn", 7365), ((Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -1916); ((0), 100000000, 0, -1918)], (0)), 100000000, 0, -1917), ((("a")), 100000000, 0, -1916), 0), 100000000, 0, -1915), 0, (("src/set_intf.ml", 599, 21755, 21757), ("src/set_intf.ml", 599, 21755, 21790), 0), 0, Tag1 ("Base__Set_intf", 190)), 0); (("choose", 7366), ((Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -1912); ((0), 100000000, 0, -1914)], (0)), 100000000, 0, -1913), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1912)], (0)), 100000000, 0, -1911), 0), 100000000, 0, -1910), 0, (("src/set_intf.ml", 602, 21862, 21864), ("src/set_intf.ml", 602, 21862, 21899), 0), 0, Tag1 ("Base__Set_intf", 191)), 0); (("choose_exn", 7367), ((Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -1907); ((0), 100000000, 0, -1909)], (0)), 100000000, 0, -1908), ((("a")), 100000000, 0, -1907), 0), 100000000, 0, -1906), 0, (("src/set_intf.ml", 605, 21967, 21969), ("src/set_intf.ml", 605, 21967, 22001), 0), 0, Tag1 ("Base__Set_intf", 192)), 0); (("split", 7368), ((Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -1901); ((("cmp")), 100000000, 0, -1902)], (0)), 100000000, 0, -1905), (Tag1 (0, ((("a")), 100000000, 0, -1901), (Tag2 ([(Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -1901); ((("cmp")), 100000000, 0, -1902)], (0)), 100000000, 0, -1900); (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1901)], (0)), 100000000, 0, -1903); (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -1901); ((("cmp")), 100000000, 0, -1902)], (0)), 100000000, 0, -1904)]), 100000000, 0, -1899), 0), 100000000, 0, -1898), 0), 100000000, 0, -1897), 0, (("src/set_intf.ml", 612, 22257, 22259), ("src/set_intf.ml", 612, 22257, 22332), 0), 0, Tag1 ("Base__Set_intf", 193)), 0); (("split_le_gt", 7369), ((Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -1893); ((("cmp")), 100000000, 0, -1894)], (0)), 100000000, 0, -1896), (Tag1 (0, ((("a")), 100000000, 0, -1893), (Tag2 ([(Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -1893); ((("cmp")), 100000000, 0, -1894)], (0)), 100000000, 0, -1892); (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -1893); ((("cmp")), 100000000, 0, -1894)], (0)), 100000000, 0, -1895)]), 100000000, 0, -1891), 0), 100000000, 0, -1890), 0), 100000000, 0, -1889), 0, (("src/set_intf.ml", 618, 22512, 22514), ("src/set_intf.ml", 618, 22512, 22581), 0), 0, Tag1 ("Base__Set_intf", 194)), 0); (("split_lt_ge", 7370), ((Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -1885); ((("cmp")), 100000000, 0, -1886)], (0)), 100000000, 0, -1888), (Tag1 (0, ((("a")), 100000000, 0, -1885), (Tag2 ([(Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -1885); ((("cmp")), 100000000, 0, -1886)], (0)), 100000000, 0, -1884); (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -1885); ((("cmp")), 100000000, 0, -1886)], (0)), 100000000, 0, -1887)]), 100000000, 0, -1883), 0), 100000000, 0, -1882), 0), 100000000, 0, -1881), 0, (("src/set_intf.ml", 624, 22761, 22763), ("src/set_intf.ml", 624, 22761, 22830), 0), 0, Tag1 ("Base__Set_intf", 195)), 0); (("group_by", 7371), ((Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -1875); ((("cmp")), 100000000, 0, -1876)], (0)), 100000000, 0, -1880), (Tag1 (("equiv"), (Tag1 (0, ((("a")), 100000000, 0, -1875), (Tag1 (0, ((("a")), 100000000, 0, -1875), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1879), 0), 100000000, 0, -1878), 0), 100000000, 0, -1877), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -1875); ((("cmp")), 100000000, 0, -1876)], (0)), 100000000, 0, -1874)], (0)), 100000000, 0, -1873), 0), 100000000, 0, -1872), 0), 100000000, 0, -1871), 0, (("src/set_intf.ml", 643, 23413, 23415), ("src/set_intf.ml", 643, 23413, 23501), 0), 0, Tag1 ("Base__Set_intf", 196)), 0); (("to_sequence", 7372), ((Tag1 (Tag1 ("order"), (Tag3 ((Tag3 ("option", 10)), [(Tag8 (([("Decreasing", (0)); ("Increasing", (0))], (0, 100000000, 0, -1870), 1, 0, 0)), 100000000, 0, -1869)], (0)), 100000000, 0, -1868), (Tag1 (Tag1 ("greater_or_equal_to"), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1863)], (0)), 100000000, 0, -1867), (Tag1 (Tag1 ("less_or_equal_to"), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1863)], (0)), 100000000, 0, -1866), (Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -1863); ((("cmp")), 100000000, 0, -1865)], (0)), 100000000, 0, -1864), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [((("a")), 100000000, 0, -1863)], (0)), 100000000, 0, -1862), 0), 100000000, 0, -1861), 0), 100000000, 0, -1860), 0), 100000000, 0, -1859), 0), 100000000, 0, -1858), 0, (("src/set_intf.ml", 649, 23836, 23838), ("src/set_intf.ml", 654, 23992, 24012), 0), 0, Tag1 ("Base__Set_intf", 197)), 0); (("binary_search", 7373), ((Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -1849); ((("cmp")), 100000000, 0, -1857)], (0)), 100000000, 0, -1856), (Tag1 (("compare"), (Tag1 (0, ((("a")), 100000000, 0, -1849), (Tag1 (0, ((("key")), 100000000, 0, -1850), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1855), 0), 100000000, 0, -1854), 0), 100000000, 0, -1853), (Tag1 (0, (Tag8 (([("First_equal_to", (0)); ("First_greater_than_or_equal_to", (0)); ("First_strictly_greater_than", (0)); ("Last_equal_to", (0)); ("Last_less_than_or_equal_to", (0)); ("Last_strictly_less_than", (0))], (0, 100000000, 0, -1852), 1, 0, 0)), 100000000, 0, -1851), (Tag1 (0, ((("key")), 100000000, 0, -1850), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1849)], (0)), 100000000, 0, -1848), 0), 100000000, 0, -1847), 0), 100000000, 0, -1846), 0), 100000000, 0, -1845), 0), 100000000, 0, -1844), 0, (("src/set_intf.ml", 672, 24701, 24703), ("src/set_intf.ml", 683, 25335, 25351), 0), 0, Tag1 ("Base__Set_intf", 198)), 0); (("binary_search_segmented", 7374), ((Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -1836); ((("cmp")), 100000000, 0, -1843)], (0)), 100000000, 0, -1842), (Tag1 (("segment_of"), (Tag1 (0, ((("a")), 100000000, 0, -1836), (Tag8 (([("Left", (0)); ("Right", (0))], (0, 100000000, 0, -1841), 1, 0, 0)), 100000000, 0, -1840), 0), 100000000, 0, -1839), (Tag1 (0, (Tag8 (([("First_on_right", (0)); ("Last_on_left", (0))], (0, 100000000, 0, -1838), 1, 0, 0)), 100000000, 0, -1837), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1836)], (0)), 100000000, 0, -1835), 0), 100000000, 0, -1834), 0), 100000000, 0, -1833), 0), 100000000, 0, -1832), 0, (("src/set_intf.ml", 700, 26115, 26117), ("src/set_intf.ml", 704, 26263, 26279), 0), 0, Tag1 ("Base__Set_intf", 199)), 0); Tag3 (("Merge_to_sequence_element", 7375), 0, (Tag1 ([Tag1 (("t", 7408), ([((("a")), 100000000, 0, -2369); ((("b")), 100000000, 0, -2370)], 2, Tag1 ([(("Left", 3310), ([((("a")), 100000000, 0, -2369)]), 0, (("src/set_intf.ml", 713, 26782, 26788), ("src/set_intf.ml", 713, 26782, 26800), 0), 0, Tag1 ("Base__Set_intf", 201)); (("Right", 3311), ([((("b")), 100000000, 0, -2370)]), 0, (("src/set_intf.ml", 714, 26801, 26807), ("src/set_intf.ml", 714, 26801, 26820), 0), 0, Tag1 ("Base__Set_intf", 202)); (("Both", 3312), ([((("a")), 100000000, 0, -2369); ((("b")), 100000000, 0, -2370)]), 0, (("src/set_intf.ml", 715, 26821, 26827), ("src/set_intf.ml", 715, 26821, 26844), 0), 0, Tag1 ("Base__Set_intf", 203))], 0), 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "Merge_with_duplicates_element"), "t"), [((("a")), 100000000, 0, -2369); ((("b")), 100000000, 0, -2370)], (0)), 100000000, 0, -2368)), [25; 25], [0; 0], 0, 0, (("src/set_intf.ml", 712, 26708, 26712), ("src/set_intf.ml", 716, 26845, 26882), 0), [(("deriving_inline", (("src/set_intf.ml", 716, 26845, 26852), ("src/set_intf.ml", 716, 26845, 26867), 0)), ([([(Tag8 ([(((("compare"), (("src/set_intf.ml", 716, 26845, 26868), ("src/set_intf.ml", 716, 26845, 26875), 0))), (("src/set_intf.ml", 716, 26845, 26868), ("src/set_intf.ml", 716, 26845, 26875), 0), 0, 0); (((("sexp"), (("src/set_intf.ml", 716, 26845, 26877), ("src/set_intf.ml", 716, 26845, 26881), 0))), (("src/set_intf.ml", 716, 26845, 26877), ("src/set_intf.ml", 716, 26845, 26881), 0), 0, 0)]), (("src/set_intf.ml", 716, 26845, 26868), ("src/set_intf.ml", 716, 26845, 26881), 0), 0, 0)], (("src/set_intf.ml", 716, 26845, 26868), ("src/set_intf.ml", 716, 26845, 26881), 0))]), (("src/set_intf.ml", 716, 26845, 26849), ("src/set_intf.ml", 716, 26845, 26882), 0))], 0, 0, Tag1 ("Base__Set_intf", 200)), 1, 0); (("compare", 7409), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "compare"), [((("a")), 100000000, 0, -2364)], (0)), 100000000, 0, -2367), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "compare"), [((("b")), 100000000, 0, -2365)], (0)), 100000000, 0, -2366), (Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "compare"), [(Tag3 ((("t", 7408)), [((("a")), 100000000, 0, -2364); ((("b")), 100000000, 0, -2365)], (0)), 100000000, 0, -2363)], (0)), 100000000, 0, -2362), 0), 100000000, 0, -2361), 0), 100000000, 0, -2360), 0, (("src/set_intf.ml", 718, 26884, 26896), ("src/set_intf.ml", 718, 26884, 26960), 0), 0, Tag1 ("Base__Ppx_compare_lib", 11)), 0); (("t_of_sexp", 7410), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -2359), ((("a")), 100000000, 0, -2353), 0), 100000000, 0, -2358), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -2357), ((("b")), 100000000, 0, -2354), 0), 100000000, 0, -2356), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -2355), (Tag3 ((("t", 7408)), [((("a")), 100000000, 0, -2353); ((("b")), 100000000, 0, -2354)], (0)), 100000000, 0, -2352), 0), 100000000, 0, -2351), 0), 100000000, 0, -2350), 0), 100000000, 0, -2349), 0, (("src/set_intf.ml", 719, 26961, 26973), ("src/set_intf.ml", 719, 26961, 27028), 0), 0, Tag1 ("Sexplib0__Sexpable", 9)), 0); (("sexp_of_t", 7411), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -2343), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -2348), 0), 100000000, 0, -2347), (Tag1 (0, (Tag1 (0, ((("b")), 100000000, 0, -2344), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -2346), 0), 100000000, 0, -2345), (Tag1 (0, (Tag3 ((("t", 7408)), [((("a")), 100000000, 0, -2343); ((("b")), 100000000, 0, -2344)], (0)), 100000000, 0, -2342), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -2341), 0), 100000000, 0, -2340), 0), 100000000, 0, -2339), 0), 100000000, 0, -2338), 0, (("src/set_intf.ml", 719, 26961, 26973), ("src/set_intf.ml", 719, 26961, 27028), 0), 0, Tag1 ("Sexplib0__Sexpable", 10)), 0)]), 0, (("src/set_intf.ml", 711, 26667, 26669), ("src/set_intf.ml", 722, 27043, 27048), 0), Tag1 ("Base__Set_intf", 206)), 0, 0); (("merge_to_sequence", 7376), ((Tag1 (Tag1 ("order"), (Tag3 ((Tag3 ("option", 10)), [(Tag8 (([("Decreasing", (0)); ("Increasing", (0))], (0, 100000000, 0, -1831), 1, 0, 0)), 100000000, 0, -1830)], (0)), 100000000, 0, -1829), (Tag1 (Tag1 ("greater_or_equal_to"), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1823)], (0)), 100000000, 0, -1828), (Tag1 (Tag1 ("less_or_equal_to"), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1823)], (0)), 100000000, 0, -1827), (Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -1823); ((("cmp")), 100000000, 0, -1825)], (0)), 100000000, 0, -1826), (Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -1823); ((("cmp")), 100000000, 0, -1825)], (0)), 100000000, 0, -1824), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag3 (Tag1 ((("Merge_to_sequence_element", 7375)), "t"), [((("a")), 100000000, 0, -1823); ((("a")), 100000000, 0, -1823)], (0)), 100000000, 0, -1822)], (0)), 100000000, 0, -1821), 0), 100000000, 0, -1820), 0), 100000000, 0, -1819), 0), 100000000, 0, -1818), 0), 100000000, 0, -1817), 0), 100000000, 0, -1816), 0, (("src/set_intf.ml", 724, 27050, 27052), ("src/set_intf.ml", 730, 27232, 27286), 0), 0, Tag1 ("Base__Set_intf", 207)), 0); Tag3 (("M", 7377), 0, (Tag2 (((("Elt", 7404)), Tag1 ([Tag1 (("t", 7412), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/set_intf.ml", 748, 27812, 27818), ("src/set_intf.ml", 748, 27812, 27824), 0), 0, 0, 0, Tag1 ("Base__Set_intf", 208)), 1, 0); Tag1 (("comparator_witness", 7413), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/set_intf.ml", 749, 27825, 27831), ("src/set_intf.ml", 749, 27825, 27854), 0), 0, 0, 0, Tag1 ("Base__Set_intf", 209)), 1, 0)])), Tag1 ([Tag1 (("t", 7414), (0, 0, 0, 1, ((Tag3 ((("t", 7309)), [(Tag3 (Tag1 ((("Elt", 7404)), "t"), 0, (0)), 100000000, 0, -2372); (Tag3 (Tag1 ((("Elt", 7404)), "comparator_witness"), 0, (0)), 100000000, 0, -2373)], (0)), 100000000, 0, -2371)), 0, 0, 0, 0, (("src/set_intf.ml", 751, 27870, 27874), ("src/set_intf.ml", 751, 27870, 27923), 0), 0, 0, 0, Tag1 ("Base__Set_intf", 211)), 0, 0)])), 0, (("src/set_intf.ml", 747, 27790, 27792), ("src/set_intf.ml", 752, 27924, 27929), 0), Tag1 ("Base__Set_intf", 212)), 0, 0); Tag4 (("Sexp_of_m", 7378), ((Tag1 ([Tag1 (("t", 7415), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/set_intf.ml", 754, 27931, 27941), ("src/set_intf.ml", 754, 27931, 27988), 0), [(("deriving_inline", (("src/set_intf.ml", 254, 7876, 7890), ("src/set_intf.ml", 254, 7876, 7905), 0)), ([([(((("sexp_of"), (("src/set_intf.ml", 254, 7876, 7906), ("src/set_intf.ml", 254, 7876, 7913), 0))), (("src/set_intf.ml", 254, 7876, 7906), ("src/set_intf.ml", 254, 7876, 7913), 0), 0, 0)], (("src/set_intf.ml", 254, 7876, 7906), ("src/set_intf.ml", 254, 7876, 7913), 0))]), (("src/set_intf.ml", 254, 7876, 7887), ("src/set_intf.ml", 254, 7876, 7914), 0))], 0, 0, Tag1 ("Base__Set_intf", 99)), 1, 0); (("sexp_of_t", 7416), ((Tag1 (0, (Tag3 ((("t", 7415)), 0, (0)), 100000000, 0, -2376), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -2375), 0), 100000000, 0, -2374), 0, (("src/set_intf.ml", 754, 27931, 27941), ("src/set_intf.ml", 754, 27931, 27988), 0), 0, Tag1 ("Base__Set_intf", 100)), 0)])), 0, (("src/set_intf.ml", 754, 27931, 27941), ("src/set_intf.ml", 754, 27931, 27988), 0), Tag1 ("Base__Set_intf", 101)), 0); Tag4 (("M_of_sexp", 7379), ((Tag1 ([Tag1 (("t", 7417), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/set_intf.ml", 754, 27931, 27941), ("src/set_intf.ml", 754, 27931, 27988), 0), [(("deriving_inline", (("src/set_intf.ml", 262, 8008, 8022), ("src/set_intf.ml", 262, 8008, 8037), 0)), ([([(((("of_sexp"), (("src/set_intf.ml", 262, 8008, 8038), ("src/set_intf.ml", 262, 8008, 8045), 0))), (("src/set_intf.ml", 262, 8008, 8038), ("src/set_intf.ml", 262, 8008, 8045), 0), 0, 0)], (("src/set_intf.ml", 262, 8008, 8038), ("src/set_intf.ml", 262, 8008, 8045), 0))]), (("src/set_intf.ml", 262, 8008, 8019), ("src/set_intf.ml", 262, 8008, 8046), 0))], 0, 0, Tag1 ("Base__Set_intf", 102)), 1, 0); (("t_of_sexp", 7418), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -2382), (Tag3 ((("t", 7417)), 0, (0)), 100000000, 0, -2381), 0), 100000000, 0, -2380), 0, (("src/set_intf.ml", 754, 27931, 27941), ("src/set_intf.ml", 754, 27931, 27988), 0), 0, Tag1 ("Base__Set_intf", 103)), 0); Tag1 (("comparator_witness", 7419), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/set_intf.ml", 754, 27931, 27941), ("src/set_intf.ml", 754, 27931, 27988), 0), 0, 0, 0, Tag1 ("Base__Comparator", 5)), 1, 0); (("comparator", 7420), ((Tag3 (Tag1 ((Tag2 ("Base__Comparator")), "comparator"), [(Tag3 ((("t", 7417)), 0, (0)), 100000000, 0, -2378); (Tag3 ((("comparator_witness", 7419)), 0, (0)), 100000000, 0, -2379)], (0)), 100000000, 0, -2377), 0, (("src/set_intf.ml", 754, 27931, 27941), ("src/set_intf.ml", 754, 27931, 27988), 0), 0, Tag1 ("Base__Comparator", 6)), 0)])), 0, (("src/set_intf.ml", 754, 27931, 27941), ("src/set_intf.ml", 754, 27931, 27988), 0), Tag1 ("Base__Set_intf", 105)), 0); Tag4 (("M_sexp_grammar", 7380), ((Tag1 ([Tag1 (("t", 7421), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/set_intf.ml", 754, 27931, 27941), ("src/set_intf.ml", 754, 27931, 27988), 0), [(("deriving_inline", (("src/set_intf.ml", 272, 8188, 8202), ("src/set_intf.ml", 272, 8188, 8217), 0)), ([([(((("sexp_grammar"), (("src/set_intf.ml", 272, 8188, 8218), ("src/set_intf.ml", 272, 8188, 8230), 0))), (("src/set_intf.ml", 272, 8188, 8218), ("src/set_intf.ml", 272, 8188, 8230), 0), 0, 0)], (("src/set_intf.ml", 272, 8188, 8218), ("src/set_intf.ml", 272, 8188, 8230), 0))]), (("src/set_intf.ml", 272, 8188, 8199), ("src/set_intf.ml", 272, 8188, 8231), 0))], 0, 0, Tag1 ("Base__Set_intf", 106)), 1, 0); (("t_sexp_grammar", 7422), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("t", 7421)), 0, (0)), 100000000, 0, -2384)], (0)), 100000000, 0, -2383), 0, (("src/set_intf.ml", 754, 27931, 27941), ("src/set_intf.ml", 754, 27931, 27988), 0), 0, Tag1 ("Base__Set_intf", 108)), 0)])), 0, (("src/set_intf.ml", 754, 27931, 27941), ("src/set_intf.ml", 754, 27931, 27988), 0), Tag1 ("Base__Set_intf", 109)), 0); Tag4 (("Compare_m", 7381), ((Tag1 (0)), 0, (("src/set_intf.ml", 754, 27931, 27941), ("src/set_intf.ml", 754, 27931, 27988), 0), Tag1 ("Base__Set_intf", 110)), 0); Tag4 (("Equal_m", 7382), ((Tag1 (0)), 0, (("src/set_intf.ml", 754, 27931, 27941), ("src/set_intf.ml", 754, 27931, 27988), 0), Tag1 ("Base__Set_intf", 111)), 0); Tag4 (("Hash_fold_m", 7383), (((Tag1 (Tag1 ((Tag2 ("Base__")), "Hasher"), "S"))), 0, (("src/set_intf.ml", 754, 27931, 27941), ("src/set_intf.ml", 754, 27931, 27988), 0), Tag1 ("Base__Set_intf", 112)), 0); (("sexp_of_m__t", 7384), ((Tag1 (0, (Tag11 ((("Sexp_of_m", 7378)), [(("t"), ((("elt")), 100000000, 0, -1813))]), 100000000, 0, -1815), (Tag1 (0, (Tag3 ((("t", 7309)), [((("elt")), 100000000, 0, -1813); ((("cmp")), 100000000, 0, -1814)], (0)), 100000000, 0, -1812), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1811), 0), 100000000, 0, -1810), 0), 100000000, 0, -1809), 0, (("src/set_intf.ml", 754, 27931, 27941), ("src/set_intf.ml", 754, 27931, 27988), 0), 0, Tag1 ("Base__Set_intf", 114)), 0); (("m__t_of_sexp", 7385), ((Tag1 (0, (Tag11 ((("M_of_sexp", 7379)), [(("comparator_witness"), ((("cmp")), 100000000, 0, -1806)); (("t"), ((("elt")), 100000000, 0, -1805))]), 100000000, 0, -1808), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1807), (Tag3 ((("t", 7309)), [((("elt")), 100000000, 0, -1805); ((("cmp")), 100000000, 0, -1806)], (0)), 100000000, 0, -1804), 0), 100000000, 0, -1803), 0), 100000000, 0, -1802), 0, (("src/set_intf.ml", 754, 27931, 27941), ("src/set_intf.ml", 754, 27931, 27988), 0), 0, Tag1 ("Base__Set_intf", 117)), 0); (("m__t_sexp_grammar", 7386), ((Tag1 (0, (Tag11 ((("M_sexp_grammar", 7380)), [(("t"), ((("elt")), 100000000, 0, -1799))]), 100000000, 0, -1801), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("t", 7309)), [((("elt")), 100000000, 0, -1799); ((("cmp")), 100000000, 0, -1800)], (0)), 100000000, 0, -1798)], (0)), 100000000, 0, -1797), 0), 100000000, 0, -1796), 0, (("src/set_intf.ml", 754, 27931, 27941), ("src/set_intf.ml", 754, 27931, 27988), 0), 0, Tag1 ("Base__Set_intf", 119)), 0); (("compare_m__t", 7387), ((Tag1 (0, (Tag11 ((("Compare_m", 7381)), 0), 100000000, 0, -1795), (Tag1 (0, (Tag3 ((("t", 7309)), [((("elt")), 100000000, 0, -1792); ((("cmp")), 100000000, 0, -1793)], (0)), 100000000, 0, -1794), (Tag1 (0, (Tag3 ((("t", 7309)), [((("elt")), 100000000, 0, -1792); ((("cmp")), 100000000, 0, -1793)], (0)), 100000000, 0, -1791), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1790), 0), 100000000, 0, -1789), 0), 100000000, 0, -1788), 0), 100000000, 0, -1787), 0, (("src/set_intf.ml", 754, 27931, 27941), ("src/set_intf.ml", 754, 27931, 27988), 0), 0, Tag1 ("Base__Set_intf", 120)), 0); (("equal_m__t", 7388), ((Tag1 (0, (Tag11 ((("Equal_m", 7382)), 0), 100000000, 0, -1786), (Tag1 (0, (Tag3 ((("t", 7309)), [((("elt")), 100000000, 0, -1783); ((("cmp")), 100000000, 0, -1784)], (0)), 100000000, 0, -1785), (Tag1 (0, (Tag3 ((("t", 7309)), [((("elt")), 100000000, 0, -1783); ((("cmp")), 100000000, 0, -1784)], (0)), 100000000, 0, -1782), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1781), 0), 100000000, 0, -1780), 0), 100000000, 0, -1779), 0), 100000000, 0, -1778), 0, (("src/set_intf.ml", 754, 27931, 27941), ("src/set_intf.ml", 754, 27931, 27988), 0), 0, Tag1 ("Base__Set_intf", 121)), 0); (("hash_fold_m__t", 7389), ((Tag1 (0, (Tag11 ((("Hash_fold_m", 7383)), [(("t"), ((("elt")), 100000000, 0, -1774))]), 100000000, 0, -1777), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Hash"), "state"), 0, (0)), 100000000, 0, -1776), (Tag1 (0, (Tag3 ((("t", 7309)), [((("elt")), 100000000, 0, -1774); ((0), 100000000, 0, -1775)], (0)), 100000000, 0, -1773), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Hash"), "state"), 0, (0)), 100000000, 0, -1772), 0), 100000000, 0, -1771), 0), 100000000, 0, -1770), 0), 100000000, 0, -1769), 0, (("src/set_intf.ml", 754, 27931, 27941), ("src/set_intf.ml", 754, 27931, 27988), 0), 0, Tag1 ("Base__Set_intf", 123)), 0); (("hash_m__t", 7390), ((Tag1 (0, (Tag11 ((("Hash_fold_m", 7383)), [(("t"), ((("elt")), 100000000, 0, -1766))]), 100000000, 0, -1768), (Tag1 (0, (Tag3 ((("t", 7309)), [((("elt")), 100000000, 0, -1766); ((0), 100000000, 0, -1767)], (0)), 100000000, 0, -1765), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1764), 0), 100000000, 0, -1763), 0), 100000000, 0, -1762), 0, (("src/set_intf.ml", 754, 27931, 27941), ("src/set_intf.ml", 754, 27931, 27988), 0), 0, Tag1 ("Base__Set_intf", 125)), 0); Tag3 (("Poly", 7391), 0, (Tag1 ([Tag1 (("t", 7423), ([((("elt")), 100000000, 0, -2849)], 1, 0, 1, ((Tag3 ((("t", 7309)), [((("elt")), 100000000, 0, -2849); (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Poly"), "comparator_witness"), 0, (0)), 100000000, 0, -2850)], (0)), 100000000, 0, -2848)), [15], [2], 0, 0, (("src/set_intf.ml", 757, 28018, 28046), ("src/set_intf.ml", 757, 28018, 28104), 0), 0, 0, 0, Tag1 ("Base__Set_intf", 214)), 1, 0); Tag1 (("tree", 7424), ([((("elt")), 100000000, 0, -2847)], 1, 0, 1, 0, [7], [2], 0, 0, (("src/set_intf.ml", 237, 7390, 7392), ("src/set_intf.ml", 237, 7390, 7406), 0), 0, 0, 0, Tag1 ("Base__Set_intf", 89)), 1, 0); Tag1 (("comparator_witness", 7425), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/set_intf.ml", 238, 7407, 7409), ("src/set_intf.ml", 238, 7407, 7432), 0), 0, 0, 0, Tag1 ("Base__Set_intf", 90)), 1, 0); (("length", 7426), ((Tag1 (0, (Tag3 ((("t", 7423)), [((0), 100000000, 0, -2846)], (0)), 100000000, 0, -2845), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -2844), 0), 100000000, 0, -2843), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Container_intf", 93)), 0); (("is_empty", 7427), ((Tag1 (0, (Tag3 ((("t", 7423)), [((0), 100000000, 0, -2842)], (0)), 100000000, 0, -2841), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2840), 0), 100000000, 0, -2839), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Container_intf", 94)), 0); (("iter", 7428), ((Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2837)], (0)), 100000000, 0, -2838), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -2837), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2836), 0), 100000000, 0, -2835), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2834), 0), 100000000, 0, -2833), 0), 100000000, 0, -2832), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Container_intf", 96)), 0); (("fold", 7429), ((Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2830)], (0)), 100000000, 0, -2831), (Tag1 (("init"), ((("acc")), 100000000, 0, -2827), (Tag1 (("f"), (Tag1 (0, ((("acc")), 100000000, 0, -2827), (Tag1 (0, ((("a")), 100000000, 0, -2830), ((("acc")), 100000000, 0, -2827), 0), 100000000, 0, -2829), 0), 100000000, 0, -2828), ((("acc")), 100000000, 0, -2827), 0), 100000000, 0, -2826), 0), 100000000, 0, -2825), 0), 100000000, 0, -2824), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Container_intf", 97)), 0); (("fold_result", 7430), ((Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2822)], (0)), 100000000, 0, -2823), (Tag1 (("init"), ((("acc")), 100000000, 0, -2817), (Tag1 (("f"), (Tag1 (0, ((("acc")), 100000000, 0, -2817), (Tag1 (0, ((("a")), 100000000, 0, -2822), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Result"), "t"), [((("acc")), 100000000, 0, -2817); ((("e")), 100000000, 0, -2818)], (0)), 100000000, 0, -2821), 0), 100000000, 0, -2820), 0), 100000000, 0, -2819), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Result"), "t"), [((("acc")), 100000000, 0, -2817); ((("e")), 100000000, 0, -2818)], (0)), 100000000, 0, -2816), 0), 100000000, 0, -2815), 0), 100000000, 0, -2814), 0), 100000000, 0, -2813), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Container_intf", 98)), 0); (("exists", 7431), ((Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2811)], (0)), 100000000, 0, -2812), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -2811), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2810), 0), 100000000, 0, -2809), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2808), 0), 100000000, 0, -2807), 0), 100000000, 0, -2806), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Container_intf", 100)), 0); (("for_all", 7432), ((Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2804)], (0)), 100000000, 0, -2805), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -2804), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2803), 0), 100000000, 0, -2802), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2801), 0), 100000000, 0, -2800), 0), 100000000, 0, -2799), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Container_intf", 101)), 0); (("count", 7433), ((Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2797)], (0)), 100000000, 0, -2798), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -2797), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2796), 0), 100000000, 0, -2795), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -2794), 0), 100000000, 0, -2793), 0), 100000000, 0, -2792), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Container_intf", 102)), 0); (("sum", 7434), ((Tag1 (0, (Tag11 (Tag1 ((Tag2 ("Base__Container_intf")), "Summable"), [(("t"), ((("sum")), 100000000, 0, -2787))]), 100000000, 0, -2791), (Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2789)], (0)), 100000000, 0, -2790), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -2789), ((("sum")), 100000000, 0, -2787), 0), 100000000, 0, -2788), ((("sum")), 100000000, 0, -2787), 0), 100000000, 0, -2786), 0), 100000000, 0, -2785), 0), 100000000, 0, -2784), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Container_intf", 104)), 0); (("find", 7435), ((Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2780)], (0)), 100000000, 0, -2783), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -2780), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2782), 0), 100000000, 0, -2781), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -2780)], (0)), 100000000, 0, -2779), 0), 100000000, 0, -2778), 0), 100000000, 0, -2777), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Container_intf", 105)), 0); (("find_map", 7436), ((Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2775)], (0)), 100000000, 0, -2776), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -2775), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -2772)], (0)), 100000000, 0, -2774), 0), 100000000, 0, -2773), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -2772)], (0)), 100000000, 0, -2771), 0), 100000000, 0, -2770), 0), 100000000, 0, -2769), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Container_intf", 106)), 0); (("to_list", 7437), ((Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2767)], (0)), 100000000, 0, -2768), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -2767)], (0)), 100000000, 0, -2766), 0), 100000000, 0, -2765), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Container_intf", 107)), 0); (("to_array", 7438), ((Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2763)], (0)), 100000000, 0, -2764), (Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -2763)], (0)), 100000000, 0, -2762), 0), 100000000, 0, -2761), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Container_intf", 108)), 0); (("invariants", 7439), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -2756); ((("cmp")), 100000000, 0, -2757); (Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2756)], (0)), 100000000, 0, -2760), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2759), 0), 100000000, 0, -2758)], (0)), 100000000, 0, -2755), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 15)), 0); (("mem", 7440), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -2749); ((("cmp")), 100000000, 0, -2750); (Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2749)], (0)), 100000000, 0, -2754), (Tag1 (0, ((("a")), 100000000, 0, -2749), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2753), 0), 100000000, 0, -2752), 0), 100000000, 0, -2751)], (0)), 100000000, 0, -2748), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 16)), 0); (("add", 7441), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -2742); ((("cmp")), 100000000, 0, -2743); (Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2742)], (0)), 100000000, 0, -2747), (Tag1 (0, ((("a")), 100000000, 0, -2742), (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2742)], (0)), 100000000, 0, -2746), 0), 100000000, 0, -2745), 0), 100000000, 0, -2744)], (0)), 100000000, 0, -2741), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 17)), 0); (("remove", 7442), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -2735); ((("cmp")), 100000000, 0, -2736); (Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2735)], (0)), 100000000, 0, -2740), (Tag1 (0, ((("a")), 100000000, 0, -2735), (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2735)], (0)), 100000000, 0, -2739), 0), 100000000, 0, -2738), 0), 100000000, 0, -2737)], (0)), 100000000, 0, -2734), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 18)), 0); (("union", 7443), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -2727); ((("cmp")), 100000000, 0, -2728); (Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2727)], (0)), 100000000, 0, -2733), (Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2727)], (0)), 100000000, 0, -2732), (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2727)], (0)), 100000000, 0, -2731), 0), 100000000, 0, -2730), 0), 100000000, 0, -2729)], (0)), 100000000, 0, -2726), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 19)), 0); (("inter", 7444), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -2719); ((("cmp")), 100000000, 0, -2720); (Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2719)], (0)), 100000000, 0, -2725), (Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2719)], (0)), 100000000, 0, -2724), (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2719)], (0)), 100000000, 0, -2723), 0), 100000000, 0, -2722), 0), 100000000, 0, -2721)], (0)), 100000000, 0, -2718), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 20)), 0); (("diff", 7445), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -2711); ((("cmp")), 100000000, 0, -2712); (Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2711)], (0)), 100000000, 0, -2717), (Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2711)], (0)), 100000000, 0, -2716), (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2711)], (0)), 100000000, 0, -2715), 0), 100000000, 0, -2714), 0), 100000000, 0, -2713)], (0)), 100000000, 0, -2710), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 21)), 0); (("symmetric_diff", 7446), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -2702); ((("cmp")), 100000000, 0, -2703); (Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2702)], (0)), 100000000, 0, -2709), (Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2702)], (0)), 100000000, 0, -2708), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Either"), "t"), [((("a")), 100000000, 0, -2702); ((("a")), 100000000, 0, -2702)], (0)), 100000000, 0, -2707)], (0)), 100000000, 0, -2706), 0), 100000000, 0, -2705), 0), 100000000, 0, -2704)], (0)), 100000000, 0, -2701), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 22)), 0); (("compare_direct", 7447), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -2694); ((("cmp")), 100000000, 0, -2695); (Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2694)], (0)), 100000000, 0, -2700), (Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2694)], (0)), 100000000, 0, -2699), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -2698), 0), 100000000, 0, -2697), 0), 100000000, 0, -2696)], (0)), 100000000, 0, -2693), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 23)), 0); (("equal", 7448), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -2686); ((("cmp")), 100000000, 0, -2687); (Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2686)], (0)), 100000000, 0, -2692), (Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2686)], (0)), 100000000, 0, -2691), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2690), 0), 100000000, 0, -2689), 0), 100000000, 0, -2688)], (0)), 100000000, 0, -2685), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 24)), 0); (("is_subset", 7449), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -2678); ((("cmp")), 100000000, 0, -2679); (Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2678)], (0)), 100000000, 0, -2684), (Tag1 (("of_"), (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2678)], (0)), 100000000, 0, -2683), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2682), 0), 100000000, 0, -2681), 0), 100000000, 0, -2680)], (0)), 100000000, 0, -2677), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 25)), 0); (("are_disjoint", 7450), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -2670); ((("cmp")), 100000000, 0, -2671); (Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2670)], (0)), 100000000, 0, -2676), (Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2670)], (0)), 100000000, 0, -2675), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2674), 0), 100000000, 0, -2673), 0), 100000000, 0, -2672)], (0)), 100000000, 0, -2669), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 26)), 0); Tag3 (("Named", 7451), 0, (Tag1 ([(("is_subset", 7490), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -2863); ((("cmp")), 100000000, 0, -2864); (Tag1 (0, (Tag3 (Tag1 ((("Named", 7059)), "t"), [(Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2863)], (0)), 100000000, 0, -2872)], (0)), 100000000, 0, -2871), (Tag1 (("of_"), (Tag3 (Tag1 ((("Named", 7059)), "t"), [(Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2863)], (0)), 100000000, 0, -2870)], (0)), 100000000, 0, -2869), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2868)], (0)), 100000000, 0, -2867), 0), 100000000, 0, -2866), 0), 100000000, 0, -2865)], (0)), 100000000, 0, -2862), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 27)), 0); (("equal", 7491), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -2852); ((("cmp")), 100000000, 0, -2853); (Tag1 (0, (Tag3 (Tag1 ((("Named", 7059)), "t"), [(Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2852)], (0)), 100000000, 0, -2861)], (0)), 100000000, 0, -2860), (Tag1 (0, (Tag3 (Tag1 ((("Named", 7059)), "t"), [(Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2852)], (0)), 100000000, 0, -2859)], (0)), 100000000, 0, -2858), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2857)], (0)), 100000000, 0, -2856), 0), 100000000, 0, -2855), 0), 100000000, 0, -2854)], (0)), 100000000, 0, -2851), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 28)), 0)]), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), Tag1 ("Base__Set_intf", 29)), 0, 0); (("fold_until", 7452), ((Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2667)], (0)), 100000000, 0, -2668), (Tag1 (("init"), ((("acc")), 100000000, 0, -2663), (Tag1 (("f"), (Tag1 (0, ((("acc")), 100000000, 0, -2663), (Tag1 (0, ((("a")), 100000000, 0, -2667), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Container"), "Continue_or_stop"), "t"), [((("acc")), 100000000, 0, -2663); ((("final")), 100000000, 0, -2661)], (0)), 100000000, 0, -2666), 0), 100000000, 0, -2665), 0), 100000000, 0, -2664), (Tag1 (("finish"), (Tag1 (0, ((("acc")), 100000000, 0, -2663), ((("final")), 100000000, 0, -2661), 0), 100000000, 0, -2662), ((("final")), 100000000, 0, -2661), 0), 100000000, 0, -2660), 0), 100000000, 0, -2659), 0), 100000000, 0, -2658), 0), 100000000, 0, -2657), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 30)), 0); (("fold_right", 7453), ((Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2655)], (0)), 100000000, 0, -2656), (Tag1 (("init"), ((("acc")), 100000000, 0, -2652), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -2655), (Tag1 (0, ((("acc")), 100000000, 0, -2652), ((("acc")), 100000000, 0, -2652), 0), 100000000, 0, -2654), 0), 100000000, 0, -2653), ((("acc")), 100000000, 0, -2652), 0), 100000000, 0, -2651), 0), 100000000, 0, -2650), 0), 100000000, 0, -2649), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 31)), 0); (("iter2", 7454), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -2636); ((("cmp")), 100000000, 0, -2637); (Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2636)], (0)), 100000000, 0, -2648), (Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2636)], (0)), 100000000, 0, -2647), (Tag1 (("f"), (Tag1 (0, (Tag8 (([("Both", (((Tag2 ([((("a")), 100000000, 0, -2636); ((("a")), 100000000, 0, -2636)]), 100000000, 0, -2646)))); ("Left", ((((("a")), 100000000, 0, -2636)))); ("Right", ((((("a")), 100000000, 0, -2636))))], (0, 100000000, 0, -2645), 1, 0, 0)), 100000000, 0, -2644), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2643), 0), 100000000, 0, -2642), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2641), 0), 100000000, 0, -2640), 0), 100000000, 0, -2639), 0), 100000000, 0, -2638)], (0)), 100000000, 0, -2635), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 32)), 0); (("filter", 7455), ((Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2631)], (0)), 100000000, 0, -2634), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -2631), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2633), 0), 100000000, 0, -2632), (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2631)], (0)), 100000000, 0, -2630), 0), 100000000, 0, -2629), 0), 100000000, 0, -2628), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 33)), 0); (("partition_tf", 7456), ((Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2623)], (0)), 100000000, 0, -2627), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -2623), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2626), 0), 100000000, 0, -2625), (Tag2 ([(Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2623)], (0)), 100000000, 0, -2622); (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2623)], (0)), 100000000, 0, -2624)]), 100000000, 0, -2621), 0), 100000000, 0, -2620), 0), 100000000, 0, -2619), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 34)), 0); (("elements", 7457), ((Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2617)], (0)), 100000000, 0, -2618), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -2617)], (0)), 100000000, 0, -2616), 0), 100000000, 0, -2615), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 35)), 0); (("min_elt", 7458), ((Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2613)], (0)), 100000000, 0, -2614), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -2613)], (0)), 100000000, 0, -2612), 0), 100000000, 0, -2611), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 36)), 0); (("min_elt_exn", 7459), ((Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2609)], (0)), 100000000, 0, -2610), ((("a")), 100000000, 0, -2609), 0), 100000000, 0, -2608), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 37)), 0); (("max_elt", 7460), ((Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2606)], (0)), 100000000, 0, -2607), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -2606)], (0)), 100000000, 0, -2605), 0), 100000000, 0, -2604), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 38)), 0); (("max_elt_exn", 7461), ((Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2602)], (0)), 100000000, 0, -2603), ((("a")), 100000000, 0, -2602), 0), 100000000, 0, -2601), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 39)), 0); (("choose", 7462), ((Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2599)], (0)), 100000000, 0, -2600), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -2599)], (0)), 100000000, 0, -2598), 0), 100000000, 0, -2597), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 40)), 0); (("choose_exn", 7463), ((Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2595)], (0)), 100000000, 0, -2596), ((("a")), 100000000, 0, -2595), 0), 100000000, 0, -2594), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 41)), 0); (("split", 7464), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -2585); ((("cmp")), 100000000, 0, -2586); (Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2585)], (0)), 100000000, 0, -2593), (Tag1 (0, ((("a")), 100000000, 0, -2585), (Tag2 ([(Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2585)], (0)), 100000000, 0, -2590); (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -2585)], (0)), 100000000, 0, -2591); (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2585)], (0)), 100000000, 0, -2592)]), 100000000, 0, -2589), 0), 100000000, 0, -2588), 0), 100000000, 0, -2587)], (0)), 100000000, 0, -2584), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 42)), 0); (("split_le_gt", 7465), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -2576); ((("cmp")), 100000000, 0, -2577); (Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2576)], (0)), 100000000, 0, -2583), (Tag1 (0, ((("a")), 100000000, 0, -2576), (Tag2 ([(Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2576)], (0)), 100000000, 0, -2581); (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2576)], (0)), 100000000, 0, -2582)]), 100000000, 0, -2580), 0), 100000000, 0, -2579), 0), 100000000, 0, -2578)], (0)), 100000000, 0, -2575), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 43)), 0); (("split_lt_ge", 7466), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -2567); ((("cmp")), 100000000, 0, -2568); (Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2567)], (0)), 100000000, 0, -2574), (Tag1 (0, ((("a")), 100000000, 0, -2567), (Tag2 ([(Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2567)], (0)), 100000000, 0, -2572); (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2567)], (0)), 100000000, 0, -2573)]), 100000000, 0, -2571), 0), 100000000, 0, -2570), 0), 100000000, 0, -2569)], (0)), 100000000, 0, -2566), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 44)), 0); (("group_by", 7467), ((Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2561)], (0)), 100000000, 0, -2565), (Tag1 (("equiv"), (Tag1 (0, ((("a")), 100000000, 0, -2561), (Tag1 (0, ((("a")), 100000000, 0, -2561), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2564), 0), 100000000, 0, -2563), 0), 100000000, 0, -2562), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2561)], (0)), 100000000, 0, -2560)], (0)), 100000000, 0, -2559), 0), 100000000, 0, -2558), 0), 100000000, 0, -2557), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 45)), 0); (("find_exn", 7468), ((Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2553)], (0)), 100000000, 0, -2556), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -2553), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2555), 0), 100000000, 0, -2554), ((("a")), 100000000, 0, -2553), 0), 100000000, 0, -2552), 0), 100000000, 0, -2551), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 46)), 0); (("nth", 7469), ((Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2548)], (0)), 100000000, 0, -2550), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -2549), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -2548)], (0)), 100000000, 0, -2547), 0), 100000000, 0, -2546), 0), 100000000, 0, -2545), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 47)), 0); (("remove_index", 7470), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -2538); ((("cmp")), 100000000, 0, -2539); (Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2538)], (0)), 100000000, 0, -2544), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -2543), (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2538)], (0)), 100000000, 0, -2542), 0), 100000000, 0, -2541), 0), 100000000, 0, -2540)], (0)), 100000000, 0, -2537), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 48)), 0); (("to_tree", 7471), ((Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2535)], (0)), 100000000, 0, -2536), (Tag3 ((("tree", 7424)), [((("a")), 100000000, 0, -2535)], (0)), 100000000, 0, -2534), 0), 100000000, 0, -2533), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 49)), 0); (("to_sequence", 7472), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -2520); ((("cmp")), 100000000, 0, -2521); (Tag1 (Tag1 ("order"), (Tag3 ((Tag3 ("option", 10)), [(Tag8 (([("Decreasing", (0)); ("Increasing", (0))], (0, 100000000, 0, -2532), 1, 0, 0)), 100000000, 0, -2531)], (0)), 100000000, 0, -2530), (Tag1 (Tag1 ("greater_or_equal_to"), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -2520)], (0)), 100000000, 0, -2529), (Tag1 (Tag1 ("less_or_equal_to"), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -2520)], (0)), 100000000, 0, -2528), (Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2520)], (0)), 100000000, 0, -2527), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [((("a")), 100000000, 0, -2520)], (0)), 100000000, 0, -2526), 0), 100000000, 0, -2525), 0), 100000000, 0, -2524), 0), 100000000, 0, -2523), 0), 100000000, 0, -2522)], (0)), 100000000, 0, -2519), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 50)), 0); (("binary_search", 7473), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -2506); ((("cmp")), 100000000, 0, -2507); (Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2506)], (0)), 100000000, 0, -2518), (Tag1 (("compare"), (Tag1 (0, ((("a")), 100000000, 0, -2506), (Tag1 (0, ((("key")), 100000000, 0, -2513), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -2517), 0), 100000000, 0, -2516), 0), 100000000, 0, -2515), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Binary_searchable"), "Which_target_by_key"), "t"), 0, (0)), 100000000, 0, -2514), (Tag1 (0, ((("key")), 100000000, 0, -2513), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -2506)], (0)), 100000000, 0, -2512), 0), 100000000, 0, -2511), 0), 100000000, 0, -2510), 0), 100000000, 0, -2509), 0), 100000000, 0, -2508)], (0)), 100000000, 0, -2505), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 51)), 0); (("binary_search_segmented", 7474), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -2494); ((("cmp")), 100000000, 0, -2495); (Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2494)], (0)), 100000000, 0, -2504), (Tag1 (("segment_of"), (Tag1 (0, ((("a")), 100000000, 0, -2494), (Tag8 (([("Left", (0)); ("Right", (0))], (0, 100000000, 0, -2503), 1, 0, 0)), 100000000, 0, -2502), 0), 100000000, 0, -2501), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Binary_searchable"), "Which_target_by_segment"), "t"), 0, (0)), 100000000, 0, -2500), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -2494)], (0)), 100000000, 0, -2499), 0), 100000000, 0, -2498), 0), 100000000, 0, -2497), 0), 100000000, 0, -2496)], (0)), 100000000, 0, -2493), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 52)), 0); (("merge_to_sequence", 7475), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -2477); ((("cmp")), 100000000, 0, -2478); (Tag1 (Tag1 ("order"), (Tag3 ((Tag3 ("option", 10)), [(Tag8 (([("Decreasing", (0)); ("Increasing", (0))], (0, 100000000, 0, -2492), 1, 0, 0)), 100000000, 0, -2491)], (0)), 100000000, 0, -2490), (Tag1 (Tag1 ("greater_or_equal_to"), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -2477)], (0)), 100000000, 0, -2489), (Tag1 (Tag1 ("less_or_equal_to"), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -2477)], (0)), 100000000, 0, -2488), (Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2477)], (0)), 100000000, 0, -2487), (Tag1 (0, (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2477)], (0)), 100000000, 0, -2486), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag3 (Tag1 ((("Merge_to_sequence_element", 7058)), "t"), [((("a")), 100000000, 0, -2477); ((("a")), 100000000, 0, -2477)], (0)), 100000000, 0, -2485)], (0)), 100000000, 0, -2484), 0), 100000000, 0, -2483), 0), 100000000, 0, -2482), 0), 100000000, 0, -2481), 0), 100000000, 0, -2480), 0), 100000000, 0, -2479)], (0)), 100000000, 0, -2476), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 53)), 0); Tag1 (("set", 7476), ([((("a")), 100000000, 0, -2474); ((("cmp")), 100000000, 0, -2475)], 2, 0, 1, 0, [7; 7], [2; 2], 0, 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, 0, 0, Tag1 ("Base__Set_intf", 56)), 1, 0); (("empty", 7477), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -2471); ((("cmp")), 100000000, 0, -2472); (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2471)], (0)), 100000000, 0, -2473)], (0)), 100000000, 0, -2470), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 61)), 0); (("singleton", 7478), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -2466); ((("cmp")), 100000000, 0, -2467); (Tag1 (0, ((("a")), 100000000, 0, -2466), (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2466)], (0)), 100000000, 0, -2469), 0), 100000000, 0, -2468)], (0)), 100000000, 0, -2465), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 62)), 0); (("union_list", 7479), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -2459); ((("cmp")), 100000000, 0, -2460); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2459)], (0)), 100000000, 0, -2464)], (0)), 100000000, 0, -2463), (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2459)], (0)), 100000000, 0, -2462), 0), 100000000, 0, -2461)], (0)), 100000000, 0, -2458), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 63)), 0); (("of_list", 7480), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -2453); ((("cmp")), 100000000, 0, -2454); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -2453)], (0)), 100000000, 0, -2457), (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2453)], (0)), 100000000, 0, -2456), 0), 100000000, 0, -2455)], (0)), 100000000, 0, -2452), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 64)), 0); (("of_sequence", 7481), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -2447); ((("cmp")), 100000000, 0, -2448); (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [((("a")), 100000000, 0, -2447)], (0)), 100000000, 0, -2451), (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2447)], (0)), 100000000, 0, -2450), 0), 100000000, 0, -2449)], (0)), 100000000, 0, -2446), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 65)), 0); (("of_array", 7482), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -2441); ((("cmp")), 100000000, 0, -2442); (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -2441)], (0)), 100000000, 0, -2445), (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2441)], (0)), 100000000, 0, -2444), 0), 100000000, 0, -2443)], (0)), 100000000, 0, -2440), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 66)), 0); (("of_sorted_array", 7483), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -2434); ((("cmp")), 100000000, 0, -2435); (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -2434)], (0)), 100000000, 0, -2439), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2434)], (0)), 100000000, 0, -2438)], (0)), 100000000, 0, -2437), 0), 100000000, 0, -2436)], (0)), 100000000, 0, -2433), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 67)), 0); (("of_sorted_array_unchecked", 7484), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -2428); ((("cmp")), 100000000, 0, -2429); (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -2428)], (0)), 100000000, 0, -2432), (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2428)], (0)), 100000000, 0, -2431), 0), 100000000, 0, -2430)], (0)), 100000000, 0, -2427), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 68)), 0); (("of_increasing_iterator_unchecked", 7485), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -2419); ((("cmp")), 100000000, 0, -2420); (Tag1 (("len"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -2426), (Tag1 (("f"), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -2425), ((("a")), 100000000, 0, -2419), 0), 100000000, 0, -2424), (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2419)], (0)), 100000000, 0, -2423), 0), 100000000, 0, -2422), 0), 100000000, 0, -2421)], (0)), 100000000, 0, -2418), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 69)), 0); (("stable_dedup_list", 7486), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -2413); ((0), 100000000, 0, -2414); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -2413)], (0)), 100000000, 0, -2417), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -2413)], (0)), 100000000, 0, -2416), 0), 100000000, 0, -2415)], (0)), 100000000, 0, -2412), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 70)), 0); (("map", 7487), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("b")), 100000000, 0, -2403); ((("cmp")), 100000000, 0, -2404); (Tag1 (0, (Tag3 ((("set", 7476)), [((("a")), 100000000, 0, -2409); ((0), 100000000, 0, -2411)], (0)), 100000000, 0, -2410), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -2409), ((("b")), 100000000, 0, -2403), 0), 100000000, 0, -2408), (Tag3 ((("t", 7423)), [((("b")), 100000000, 0, -2403)], (0)), 100000000, 0, -2407), 0), 100000000, 0, -2406), 0), 100000000, 0, -2405)], (0)), 100000000, 0, -2402), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 71)), 0); (("filter_map", 7488), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("b")), 100000000, 0, -2392); ((("cmp")), 100000000, 0, -2393); (Tag1 (0, (Tag3 ((("set", 7476)), [((("a")), 100000000, 0, -2399); ((0), 100000000, 0, -2401)], (0)), 100000000, 0, -2400), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -2399), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -2392)], (0)), 100000000, 0, -2398), 0), 100000000, 0, -2397), (Tag3 ((("t", 7423)), [((("b")), 100000000, 0, -2392)], (0)), 100000000, 0, -2396), 0), 100000000, 0, -2395), 0), 100000000, 0, -2394)], (0)), 100000000, 0, -2391), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 72)), 0); (("of_tree", 7489), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -2386); ((("cmp")), 100000000, 0, -2387); (Tag1 (0, (Tag3 ((("tree", 7424)), [((("a")), 100000000, 0, -2386)], (0)), 100000000, 0, -2390), (Tag3 ((("t", 7423)), [((("a")), 100000000, 0, -2386)], (0)), 100000000, 0, -2389), 0), 100000000, 0, -2388)], (0)), 100000000, 0, -2385), 0, (("src/set_intf.ml", 241, 7444, 7448), ("src/set_intf.ml", 247, 7712, 7790), 0), 0, Tag1 ("Base__Set_intf", 73)), 0)]), 0, (("src/set_intf.ml", 757, 28018, 28020), ("src/set_intf.ml", 757, 28018, 28104), 0), Tag1 ("Base__Set_intf", 215)), 0, 0); Tag3 (("Using_comparator", 7392), 0, (Tag1 ([Tag1 (("t", 7492), ([((("elt")), 100000000, 0, -3399); ((("cmp")), 100000000, 0, -3400)], 2, 0, 1, ((Tag3 ((("t", 7309)), [((("elt")), 100000000, 0, -3399); ((("cmp")), 100000000, 0, -3400)], (0)), 100000000, 0, -3398)), [15; 15], [2; 2], 0, 0, (("src/set_intf.ml", 763, 28373, 28377), ("src/set_intf.ml", 763, 28373, 28448), 0), [(("deriving_inline", (("src/set_intf.ml", 763, 28373, 28424), ("src/set_intf.ml", 763, 28373, 28439), 0)), ([([(((("sexp_of"), (("src/set_intf.ml", 763, 28373, 28440), ("src/set_intf.ml", 763, 28373, 28447), 0))), (("src/set_intf.ml", 763, 28373, 28440), ("src/set_intf.ml", 763, 28373, 28447), 0), 0, 0)], (("src/set_intf.ml", 763, 28373, 28440), ("src/set_intf.ml", 763, 28373, 28447), 0))]), (("src/set_intf.ml", 763, 28373, 28421), ("src/set_intf.ml", 763, 28373, 28448), 0))], 0, 0, Tag1 ("Base__Set_intf", 216)), 0, 0); (("sexp_of_t", 7493), ((Tag1 (0, (Tag1 (0, ((("elt")), 100000000, 0, -3392), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -3397), 0), 100000000, 0, -3396), (Tag1 (0, (Tag1 (0, ((("cmp")), 100000000, 0, -3393), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -3395), 0), 100000000, 0, -3394), (Tag1 (0, (Tag3 ((("t", 7492)), [((("elt")), 100000000, 0, -3392); ((("cmp")), 100000000, 0, -3393)], (0)), 100000000, 0, -3391), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -3390), 0), 100000000, 0, -3389), 0), 100000000, 0, -3388), 0), 100000000, 0, -3387), 0, (("src/set_intf.ml", 765, 28450, 28454), ("src/set_intf.ml", 769, 28562, 28586), 0), 0, Tag1 ("Base__Set_intf", 217)), 0); (("t_of_sexp_direct", 7494), ((Tag1 (("comparator"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "t"), [((("elt")), 100000000, 0, -3381); ((("cmp")), 100000000, 0, -3382)], (0)), 100000000, 0, -3386), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -3385), ((("elt")), 100000000, 0, -3381), 0), 100000000, 0, -3384), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -3383), (Tag3 ((("t", 7492)), [((("elt")), 100000000, 0, -3381); ((("cmp")), 100000000, 0, -3382)], (0)), 100000000, 0, -3380), 0), 100000000, 0, -3379), 0), 100000000, 0, -3378), 0), 100000000, 0, -3377), 0, (("src/set_intf.ml", 773, 28602, 28606), ("src/set_intf.ml", 777, 28715, 28738), 0), 0, Tag1 ("Base__Set_intf", 218)), 0); Tag3 (("Tree", 7495), 0, (Tag1 ([Tag1 (("t", 7564), ([((("a")), 100000000, 0, -3913); ((("cmp")), 100000000, 0, -3914)], 2, 0, 1, 0, [7; 7], [2; 2], 0, 0, (("src/set_intf.ml", 783, 29004, 29010), ("src/set_intf.ml", 783, 29004, 29055), 0), [(("deriving_inline", (("src/set_intf.ml", 783, 29004, 29031), ("src/set_intf.ml", 783, 29004, 29046), 0)), ([([(((("sexp_of"), (("src/set_intf.ml", 783, 29004, 29047), ("src/set_intf.ml", 783, 29004, 29054), 0))), (("src/set_intf.ml", 783, 29004, 29047), ("src/set_intf.ml", 783, 29004, 29054), 0), 0, 0)], (("src/set_intf.ml", 783, 29004, 29047), ("src/set_intf.ml", 783, 29004, 29054), 0))]), (("src/set_intf.ml", 783, 29004, 29028), ("src/set_intf.ml", 783, 29004, 29055), 0))], 0, 0, Tag1 ("Base__Set_intf", 219)), 1, 0); (("sexp_of_t", 7565), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -3907), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -3912), 0), 100000000, 0, -3911), (Tag1 (0, (Tag1 (0, ((("cmp")), 100000000, 0, -3908), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -3910), 0), 100000000, 0, -3909), (Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3907); ((("cmp")), 100000000, 0, -3908)], (0)), 100000000, 0, -3906), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -3905), 0), 100000000, 0, -3904), 0), 100000000, 0, -3903), 0), 100000000, 0, -3902), 0, (("src/set_intf.ml", 785, 29057, 29063), ("src/set_intf.ml", 789, 29173, 29199), 0), 0, Tag1 ("Base__Set_intf", 220)), 0); (("t_of_sexp_direct", 7566), ((Tag1 (("comparator"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "t"), [((("elt")), 100000000, 0, -3896); ((("cmp")), 100000000, 0, -3897)], (0)), 100000000, 0, -3901), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -3900), ((("elt")), 100000000, 0, -3896), 0), 100000000, 0, -3899), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -3898), (Tag3 ((("t", 7564)), [((("elt")), 100000000, 0, -3896); ((("cmp")), 100000000, 0, -3897)], (0)), 100000000, 0, -3895), 0), 100000000, 0, -3894), 0), 100000000, 0, -3893), 0), 100000000, 0, -3892), 0, (("src/set_intf.ml", 793, 29217, 29223), ("src/set_intf.ml", 797, 29338, 29363), 0), 0, Tag1 ("Base__Set_intf", 221)), 0); (("length", 7567), ((Tag1 (0, (Tag3 ((("t", 7564)), [((0), 100000000, 0, -3890); ((0), 100000000, 0, -3891)], (0)), 100000000, 0, -3889), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3888), 0), 100000000, 0, -3887), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Container_intf", 93)), 0); (("is_empty", 7568), ((Tag1 (0, (Tag3 ((("t", 7564)), [((0), 100000000, 0, -3885); ((0), 100000000, 0, -3886)], (0)), 100000000, 0, -3884), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3883), 0), 100000000, 0, -3882), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Container_intf", 94)), 0); (("iter", 7569), ((Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3879); ((0), 100000000, 0, -3881)], (0)), 100000000, 0, -3880), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -3879), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3878), 0), 100000000, 0, -3877), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3876), 0), 100000000, 0, -3875), 0), 100000000, 0, -3874), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Container_intf", 96)), 0); (("fold", 7570), ((Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3871); ((0), 100000000, 0, -3873)], (0)), 100000000, 0, -3872), (Tag1 (("init"), ((("acc")), 100000000, 0, -3868), (Tag1 (("f"), (Tag1 (0, ((("acc")), 100000000, 0, -3868), (Tag1 (0, ((("a")), 100000000, 0, -3871), ((("acc")), 100000000, 0, -3868), 0), 100000000, 0, -3870), 0), 100000000, 0, -3869), ((("acc")), 100000000, 0, -3868), 0), 100000000, 0, -3867), 0), 100000000, 0, -3866), 0), 100000000, 0, -3865), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Container_intf", 97)), 0); (("fold_result", 7571), ((Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3862); ((0), 100000000, 0, -3864)], (0)), 100000000, 0, -3863), (Tag1 (("init"), ((("acc")), 100000000, 0, -3857), (Tag1 (("f"), (Tag1 (0, ((("acc")), 100000000, 0, -3857), (Tag1 (0, ((("a")), 100000000, 0, -3862), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Result"), "t"), [((("acc")), 100000000, 0, -3857); ((("e")), 100000000, 0, -3858)], (0)), 100000000, 0, -3861), 0), 100000000, 0, -3860), 0), 100000000, 0, -3859), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Result"), "t"), [((("acc")), 100000000, 0, -3857); ((("e")), 100000000, 0, -3858)], (0)), 100000000, 0, -3856), 0), 100000000, 0, -3855), 0), 100000000, 0, -3854), 0), 100000000, 0, -3853), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Container_intf", 98)), 0); (("exists", 7572), ((Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3850); ((0), 100000000, 0, -3852)], (0)), 100000000, 0, -3851), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -3850), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3849), 0), 100000000, 0, -3848), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3847), 0), 100000000, 0, -3846), 0), 100000000, 0, -3845), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Container_intf", 100)), 0); (("for_all", 7573), ((Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3842); ((0), 100000000, 0, -3844)], (0)), 100000000, 0, -3843), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -3842), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3841), 0), 100000000, 0, -3840), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3839), 0), 100000000, 0, -3838), 0), 100000000, 0, -3837), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Container_intf", 101)), 0); (("count", 7574), ((Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3834); ((0), 100000000, 0, -3836)], (0)), 100000000, 0, -3835), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -3834), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3833), 0), 100000000, 0, -3832), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3831), 0), 100000000, 0, -3830), 0), 100000000, 0, -3829), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Container_intf", 102)), 0); (("sum", 7575), ((Tag1 (0, (Tag11 (Tag1 ((Tag2 ("Base__Container_intf")), "Summable"), [(("t"), ((("sum")), 100000000, 0, -3823))]), 100000000, 0, -3828), (Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3825); ((0), 100000000, 0, -3827)], (0)), 100000000, 0, -3826), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -3825), ((("sum")), 100000000, 0, -3823), 0), 100000000, 0, -3824), ((("sum")), 100000000, 0, -3823), 0), 100000000, 0, -3822), 0), 100000000, 0, -3821), 0), 100000000, 0, -3820), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Container_intf", 104)), 0); (("find", 7576), ((Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3815); ((0), 100000000, 0, -3819)], (0)), 100000000, 0, -3818), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -3815), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3817), 0), 100000000, 0, -3816), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -3815)], (0)), 100000000, 0, -3814), 0), 100000000, 0, -3813), 0), 100000000, 0, -3812), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Container_intf", 105)), 0); (("find_map", 7577), ((Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3809); ((0), 100000000, 0, -3811)], (0)), 100000000, 0, -3810), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -3809), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -3806)], (0)), 100000000, 0, -3808), 0), 100000000, 0, -3807), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -3806)], (0)), 100000000, 0, -3805), 0), 100000000, 0, -3804), 0), 100000000, 0, -3803), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Container_intf", 106)), 0); (("to_list", 7578), ((Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3800); ((0), 100000000, 0, -3802)], (0)), 100000000, 0, -3801), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -3800)], (0)), 100000000, 0, -3799), 0), 100000000, 0, -3798), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Container_intf", 107)), 0); (("to_array", 7579), ((Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3795); ((0), 100000000, 0, -3797)], (0)), 100000000, 0, -3796), (Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -3795)], (0)), 100000000, 0, -3794), 0), 100000000, 0, -3793), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Container_intf", 108)), 0); (("invariants", 7580), ((Tag3 (Tag1 ((("With_comparator", 7056)), "t"), [((("a")), 100000000, 0, -3788); ((("cmp")), 100000000, 0, -3789); (Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3788); ((("cmp")), 100000000, 0, -3789)], (0)), 100000000, 0, -3792), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3791), 0), 100000000, 0, -3790)], (0)), 100000000, 0, -3787), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 15)), 0); (("mem", 7581), ((Tag3 (Tag1 ((("With_comparator", 7056)), "t"), [((("a")), 100000000, 0, -3781); ((("cmp")), 100000000, 0, -3782); (Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3781); ((("cmp")), 100000000, 0, -3782)], (0)), 100000000, 0, -3786), (Tag1 (0, ((("a")), 100000000, 0, -3781), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3785), 0), 100000000, 0, -3784), 0), 100000000, 0, -3783)], (0)), 100000000, 0, -3780), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 16)), 0); (("add", 7582), ((Tag3 (Tag1 ((("With_comparator", 7056)), "t"), [((("a")), 100000000, 0, -3774); ((("cmp")), 100000000, 0, -3775); (Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3774); ((("cmp")), 100000000, 0, -3775)], (0)), 100000000, 0, -3779), (Tag1 (0, ((("a")), 100000000, 0, -3774), (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3774); ((("cmp")), 100000000, 0, -3775)], (0)), 100000000, 0, -3778), 0), 100000000, 0, -3777), 0), 100000000, 0, -3776)], (0)), 100000000, 0, -3773), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 17)), 0); (("remove", 7583), ((Tag3 (Tag1 ((("With_comparator", 7056)), "t"), [((("a")), 100000000, 0, -3767); ((("cmp")), 100000000, 0, -3768); (Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3767); ((("cmp")), 100000000, 0, -3768)], (0)), 100000000, 0, -3772), (Tag1 (0, ((("a")), 100000000, 0, -3767), (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3767); ((("cmp")), 100000000, 0, -3768)], (0)), 100000000, 0, -3771), 0), 100000000, 0, -3770), 0), 100000000, 0, -3769)], (0)), 100000000, 0, -3766), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 18)), 0); (("union", 7584), ((Tag3 (Tag1 ((("With_comparator", 7056)), "t"), [((("a")), 100000000, 0, -3759); ((("cmp")), 100000000, 0, -3760); (Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3759); ((("cmp")), 100000000, 0, -3760)], (0)), 100000000, 0, -3765), (Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3759); ((("cmp")), 100000000, 0, -3760)], (0)), 100000000, 0, -3764), (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3759); ((("cmp")), 100000000, 0, -3760)], (0)), 100000000, 0, -3763), 0), 100000000, 0, -3762), 0), 100000000, 0, -3761)], (0)), 100000000, 0, -3758), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 19)), 0); (("inter", 7585), ((Tag3 (Tag1 ((("With_comparator", 7056)), "t"), [((("a")), 100000000, 0, -3751); ((("cmp")), 100000000, 0, -3752); (Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3751); ((("cmp")), 100000000, 0, -3752)], (0)), 100000000, 0, -3757), (Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3751); ((("cmp")), 100000000, 0, -3752)], (0)), 100000000, 0, -3756), (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3751); ((("cmp")), 100000000, 0, -3752)], (0)), 100000000, 0, -3755), 0), 100000000, 0, -3754), 0), 100000000, 0, -3753)], (0)), 100000000, 0, -3750), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 20)), 0); (("diff", 7586), ((Tag3 (Tag1 ((("With_comparator", 7056)), "t"), [((("a")), 100000000, 0, -3743); ((("cmp")), 100000000, 0, -3744); (Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3743); ((("cmp")), 100000000, 0, -3744)], (0)), 100000000, 0, -3749), (Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3743); ((("cmp")), 100000000, 0, -3744)], (0)), 100000000, 0, -3748), (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3743); ((("cmp")), 100000000, 0, -3744)], (0)), 100000000, 0, -3747), 0), 100000000, 0, -3746), 0), 100000000, 0, -3745)], (0)), 100000000, 0, -3742), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 21)), 0); (("symmetric_diff", 7587), ((Tag3 (Tag1 ((("With_comparator", 7056)), "t"), [((("a")), 100000000, 0, -3734); ((("cmp")), 100000000, 0, -3735); (Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3734); ((("cmp")), 100000000, 0, -3735)], (0)), 100000000, 0, -3741), (Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3734); ((("cmp")), 100000000, 0, -3735)], (0)), 100000000, 0, -3740), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Either"), "t"), [((("a")), 100000000, 0, -3734); ((("a")), 100000000, 0, -3734)], (0)), 100000000, 0, -3739)], (0)), 100000000, 0, -3738), 0), 100000000, 0, -3737), 0), 100000000, 0, -3736)], (0)), 100000000, 0, -3733), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 22)), 0); (("compare_direct", 7588), ((Tag3 (Tag1 ((("With_comparator", 7056)), "t"), [((("a")), 100000000, 0, -3726); ((("cmp")), 100000000, 0, -3727); (Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3726); ((("cmp")), 100000000, 0, -3727)], (0)), 100000000, 0, -3732), (Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3726); ((("cmp")), 100000000, 0, -3727)], (0)), 100000000, 0, -3731), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3730), 0), 100000000, 0, -3729), 0), 100000000, 0, -3728)], (0)), 100000000, 0, -3725), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 23)), 0); (("equal", 7589), ((Tag3 (Tag1 ((("With_comparator", 7056)), "t"), [((("a")), 100000000, 0, -3718); ((("cmp")), 100000000, 0, -3719); (Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3718); ((("cmp")), 100000000, 0, -3719)], (0)), 100000000, 0, -3724), (Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3718); ((("cmp")), 100000000, 0, -3719)], (0)), 100000000, 0, -3723), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3722), 0), 100000000, 0, -3721), 0), 100000000, 0, -3720)], (0)), 100000000, 0, -3717), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 24)), 0); (("is_subset", 7590), ((Tag3 (Tag1 ((("With_comparator", 7056)), "t"), [((("a")), 100000000, 0, -3710); ((("cmp")), 100000000, 0, -3711); (Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3710); ((("cmp")), 100000000, 0, -3711)], (0)), 100000000, 0, -3716), (Tag1 (("of_"), (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3710); ((("cmp")), 100000000, 0, -3711)], (0)), 100000000, 0, -3715), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3714), 0), 100000000, 0, -3713), 0), 100000000, 0, -3712)], (0)), 100000000, 0, -3709), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 25)), 0); (("are_disjoint", 7591), ((Tag3 (Tag1 ((("With_comparator", 7056)), "t"), [((("a")), 100000000, 0, -3702); ((("cmp")), 100000000, 0, -3703); (Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3702); ((("cmp")), 100000000, 0, -3703)], (0)), 100000000, 0, -3708), (Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3702); ((("cmp")), 100000000, 0, -3703)], (0)), 100000000, 0, -3707), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3706), 0), 100000000, 0, -3705), 0), 100000000, 0, -3704)], (0)), 100000000, 0, -3701), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 26)), 0); Tag3 (("Named", 7592), 0, (Tag1 ([(("is_subset", 7631), ((Tag3 (Tag1 ((("With_comparator", 7056)), "t"), [((("a")), 100000000, 0, -3927); ((("cmp")), 100000000, 0, -3928); (Tag1 (0, (Tag3 (Tag1 ((("Named", 7059)), "t"), [(Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3927); ((("cmp")), 100000000, 0, -3928)], (0)), 100000000, 0, -3936)], (0)), 100000000, 0, -3935), (Tag1 (("of_"), (Tag3 (Tag1 ((("Named", 7059)), "t"), [(Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3927); ((("cmp")), 100000000, 0, -3928)], (0)), 100000000, 0, -3934)], (0)), 100000000, 0, -3933), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3932)], (0)), 100000000, 0, -3931), 0), 100000000, 0, -3930), 0), 100000000, 0, -3929)], (0)), 100000000, 0, -3926), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 27)), 0); (("equal", 7632), ((Tag3 (Tag1 ((("With_comparator", 7056)), "t"), [((("a")), 100000000, 0, -3916); ((("cmp")), 100000000, 0, -3917); (Tag1 (0, (Tag3 (Tag1 ((("Named", 7059)), "t"), [(Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3916); ((("cmp")), 100000000, 0, -3917)], (0)), 100000000, 0, -3925)], (0)), 100000000, 0, -3924), (Tag1 (0, (Tag3 (Tag1 ((("Named", 7059)), "t"), [(Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3916); ((("cmp")), 100000000, 0, -3917)], (0)), 100000000, 0, -3923)], (0)), 100000000, 0, -3922), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3921)], (0)), 100000000, 0, -3920), 0), 100000000, 0, -3919), 0), 100000000, 0, -3918)], (0)), 100000000, 0, -3915), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 28)), 0)]), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), Tag1 ("Base__Set_intf", 29)), 0, 0); (("fold_until", 7593), ((Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3698); ((0), 100000000, 0, -3700)], (0)), 100000000, 0, -3699), (Tag1 (("init"), ((("acc")), 100000000, 0, -3694), (Tag1 (("f"), (Tag1 (0, ((("acc")), 100000000, 0, -3694), (Tag1 (0, ((("a")), 100000000, 0, -3698), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Container"), "Continue_or_stop"), "t"), [((("acc")), 100000000, 0, -3694); ((("final")), 100000000, 0, -3692)], (0)), 100000000, 0, -3697), 0), 100000000, 0, -3696), 0), 100000000, 0, -3695), (Tag1 (("finish"), (Tag1 (0, ((("acc")), 100000000, 0, -3694), ((("final")), 100000000, 0, -3692), 0), 100000000, 0, -3693), ((("final")), 100000000, 0, -3692), 0), 100000000, 0, -3691), 0), 100000000, 0, -3690), 0), 100000000, 0, -3689), 0), 100000000, 0, -3688), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 30)), 0); (("fold_right", 7594), ((Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3685); ((0), 100000000, 0, -3687)], (0)), 100000000, 0, -3686), (Tag1 (("init"), ((("acc")), 100000000, 0, -3682), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -3685), (Tag1 (0, ((("acc")), 100000000, 0, -3682), ((("acc")), 100000000, 0, -3682), 0), 100000000, 0, -3684), 0), 100000000, 0, -3683), ((("acc")), 100000000, 0, -3682), 0), 100000000, 0, -3681), 0), 100000000, 0, -3680), 0), 100000000, 0, -3679), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 31)), 0); (("iter2", 7595), ((Tag3 (Tag1 ((("With_comparator", 7056)), "t"), [((("a")), 100000000, 0, -3666); ((("cmp")), 100000000, 0, -3667); (Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3666); ((("cmp")), 100000000, 0, -3667)], (0)), 100000000, 0, -3678), (Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3666); ((("cmp")), 100000000, 0, -3667)], (0)), 100000000, 0, -3677), (Tag1 (("f"), (Tag1 (0, (Tag8 (([("Both", (((Tag2 ([((("a")), 100000000, 0, -3666); ((("a")), 100000000, 0, -3666)]), 100000000, 0, -3676)))); ("Left", ((((("a")), 100000000, 0, -3666)))); ("Right", ((((("a")), 100000000, 0, -3666))))], (0, 100000000, 0, -3675), 1, 0, 0)), 100000000, 0, -3674), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3673), 0), 100000000, 0, -3672), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3671), 0), 100000000, 0, -3670), 0), 100000000, 0, -3669), 0), 100000000, 0, -3668)], (0)), 100000000, 0, -3665), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 32)), 0); (("filter", 7596), ((Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3660); ((("cmp")), 100000000, 0, -3661)], (0)), 100000000, 0, -3664), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -3660), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3663), 0), 100000000, 0, -3662), (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3660); ((("cmp")), 100000000, 0, -3661)], (0)), 100000000, 0, -3659), 0), 100000000, 0, -3658), 0), 100000000, 0, -3657), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 33)), 0); (("partition_tf", 7597), ((Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3651); ((("cmp")), 100000000, 0, -3652)], (0)), 100000000, 0, -3656), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -3651), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3655), 0), 100000000, 0, -3654), (Tag2 ([(Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3651); ((("cmp")), 100000000, 0, -3652)], (0)), 100000000, 0, -3650); (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3651); ((("cmp")), 100000000, 0, -3652)], (0)), 100000000, 0, -3653)]), 100000000, 0, -3649), 0), 100000000, 0, -3648), 0), 100000000, 0, -3647), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 34)), 0); (("elements", 7598), ((Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3644); ((0), 100000000, 0, -3646)], (0)), 100000000, 0, -3645), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -3644)], (0)), 100000000, 0, -3643), 0), 100000000, 0, -3642), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 35)), 0); (("min_elt", 7599), ((Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3639); ((0), 100000000, 0, -3641)], (0)), 100000000, 0, -3640), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -3639)], (0)), 100000000, 0, -3638), 0), 100000000, 0, -3637), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 36)), 0); (("min_elt_exn", 7600), ((Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3634); ((0), 100000000, 0, -3636)], (0)), 100000000, 0, -3635), ((("a")), 100000000, 0, -3634), 0), 100000000, 0, -3633), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 37)), 0); (("max_elt", 7601), ((Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3630); ((0), 100000000, 0, -3632)], (0)), 100000000, 0, -3631), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -3630)], (0)), 100000000, 0, -3629), 0), 100000000, 0, -3628), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 38)), 0); (("max_elt_exn", 7602), ((Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3625); ((0), 100000000, 0, -3627)], (0)), 100000000, 0, -3626), ((("a")), 100000000, 0, -3625), 0), 100000000, 0, -3624), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 39)), 0); (("choose", 7603), ((Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3621); ((0), 100000000, 0, -3623)], (0)), 100000000, 0, -3622), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -3621)], (0)), 100000000, 0, -3620), 0), 100000000, 0, -3619), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 40)), 0); (("choose_exn", 7604), ((Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3616); ((0), 100000000, 0, -3618)], (0)), 100000000, 0, -3617), ((("a")), 100000000, 0, -3616), 0), 100000000, 0, -3615), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 41)), 0); (("split", 7605), ((Tag3 (Tag1 ((("With_comparator", 7056)), "t"), [((("a")), 100000000, 0, -3606); ((("cmp")), 100000000, 0, -3607); (Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3606); ((("cmp")), 100000000, 0, -3607)], (0)), 100000000, 0, -3614), (Tag1 (0, ((("a")), 100000000, 0, -3606), (Tag2 ([(Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3606); ((("cmp")), 100000000, 0, -3607)], (0)), 100000000, 0, -3611); (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -3606)], (0)), 100000000, 0, -3612); (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3606); ((("cmp")), 100000000, 0, -3607)], (0)), 100000000, 0, -3613)]), 100000000, 0, -3610), 0), 100000000, 0, -3609), 0), 100000000, 0, -3608)], (0)), 100000000, 0, -3605), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 42)), 0); (("split_le_gt", 7606), ((Tag3 (Tag1 ((("With_comparator", 7056)), "t"), [((("a")), 100000000, 0, -3597); ((("cmp")), 100000000, 0, -3598); (Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3597); ((("cmp")), 100000000, 0, -3598)], (0)), 100000000, 0, -3604), (Tag1 (0, ((("a")), 100000000, 0, -3597), (Tag2 ([(Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3597); ((("cmp")), 100000000, 0, -3598)], (0)), 100000000, 0, -3602); (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3597); ((("cmp")), 100000000, 0, -3598)], (0)), 100000000, 0, -3603)]), 100000000, 0, -3601), 0), 100000000, 0, -3600), 0), 100000000, 0, -3599)], (0)), 100000000, 0, -3596), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 43)), 0); (("split_lt_ge", 7607), ((Tag3 (Tag1 ((("With_comparator", 7056)), "t"), [((("a")), 100000000, 0, -3588); ((("cmp")), 100000000, 0, -3589); (Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3588); ((("cmp")), 100000000, 0, -3589)], (0)), 100000000, 0, -3595), (Tag1 (0, ((("a")), 100000000, 0, -3588), (Tag2 ([(Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3588); ((("cmp")), 100000000, 0, -3589)], (0)), 100000000, 0, -3593); (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3588); ((("cmp")), 100000000, 0, -3589)], (0)), 100000000, 0, -3594)]), 100000000, 0, -3592), 0), 100000000, 0, -3591), 0), 100000000, 0, -3590)], (0)), 100000000, 0, -3587), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 44)), 0); (("group_by", 7608), ((Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3581); ((("cmp")), 100000000, 0, -3582)], (0)), 100000000, 0, -3586), (Tag1 (("equiv"), (Tag1 (0, ((("a")), 100000000, 0, -3581), (Tag1 (0, ((("a")), 100000000, 0, -3581), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3585), 0), 100000000, 0, -3584), 0), 100000000, 0, -3583), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3581); ((("cmp")), 100000000, 0, -3582)], (0)), 100000000, 0, -3580)], (0)), 100000000, 0, -3579), 0), 100000000, 0, -3578), 0), 100000000, 0, -3577), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 45)), 0); (("find_exn", 7609), ((Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3572); ((0), 100000000, 0, -3576)], (0)), 100000000, 0, -3575), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -3572), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3574), 0), 100000000, 0, -3573), ((("a")), 100000000, 0, -3572), 0), 100000000, 0, -3571), 0), 100000000, 0, -3570), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 46)), 0); (("nth", 7610), ((Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3566); ((0), 100000000, 0, -3569)], (0)), 100000000, 0, -3568), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3567), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -3566)], (0)), 100000000, 0, -3565), 0), 100000000, 0, -3564), 0), 100000000, 0, -3563), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 47)), 0); (("remove_index", 7611), ((Tag3 (Tag1 ((("With_comparator", 7056)), "t"), [((("a")), 100000000, 0, -3556); ((("cmp")), 100000000, 0, -3557); (Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3556); ((("cmp")), 100000000, 0, -3557)], (0)), 100000000, 0, -3562), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3561), (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3556); ((("cmp")), 100000000, 0, -3557)], (0)), 100000000, 0, -3560), 0), 100000000, 0, -3559), 0), 100000000, 0, -3558)], (0)), 100000000, 0, -3555), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 48)), 0); (("to_tree", 7612), ((Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3552); ((("cmp")), 100000000, 0, -3553)], (0)), 100000000, 0, -3554), (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3552); ((("cmp")), 100000000, 0, -3553)], (0)), 100000000, 0, -3551), 0), 100000000, 0, -3550), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 49)), 0); (("to_sequence", 7613), ((Tag3 (Tag1 ((("With_comparator", 7056)), "t"), [((("a")), 100000000, 0, -3537); ((("cmp")), 100000000, 0, -3538); (Tag1 (Tag1 ("order"), (Tag3 ((Tag3 ("option", 10)), [(Tag8 (([("Decreasing", (0)); ("Increasing", (0))], (0, 100000000, 0, -3549), 1, 0, 0)), 100000000, 0, -3548)], (0)), 100000000, 0, -3547), (Tag1 (Tag1 ("greater_or_equal_to"), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -3537)], (0)), 100000000, 0, -3546), (Tag1 (Tag1 ("less_or_equal_to"), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -3537)], (0)), 100000000, 0, -3545), (Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3537); ((("cmp")), 100000000, 0, -3538)], (0)), 100000000, 0, -3544), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [((("a")), 100000000, 0, -3537)], (0)), 100000000, 0, -3543), 0), 100000000, 0, -3542), 0), 100000000, 0, -3541), 0), 100000000, 0, -3540), 0), 100000000, 0, -3539)], (0)), 100000000, 0, -3536), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 50)), 0); (("binary_search", 7614), ((Tag3 (Tag1 ((("With_comparator", 7056)), "t"), [((("a")), 100000000, 0, -3523); ((("cmp")), 100000000, 0, -3524); (Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3523); ((("cmp")), 100000000, 0, -3524)], (0)), 100000000, 0, -3535), (Tag1 (("compare"), (Tag1 (0, ((("a")), 100000000, 0, -3523), (Tag1 (0, ((("key")), 100000000, 0, -3530), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3534), 0), 100000000, 0, -3533), 0), 100000000, 0, -3532), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Binary_searchable"), "Which_target_by_key"), "t"), 0, (0)), 100000000, 0, -3531), (Tag1 (0, ((("key")), 100000000, 0, -3530), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -3523)], (0)), 100000000, 0, -3529), 0), 100000000, 0, -3528), 0), 100000000, 0, -3527), 0), 100000000, 0, -3526), 0), 100000000, 0, -3525)], (0)), 100000000, 0, -3522), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 51)), 0); (("binary_search_segmented", 7615), ((Tag3 (Tag1 ((("With_comparator", 7056)), "t"), [((("a")), 100000000, 0, -3511); ((("cmp")), 100000000, 0, -3512); (Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3511); ((("cmp")), 100000000, 0, -3512)], (0)), 100000000, 0, -3521), (Tag1 (("segment_of"), (Tag1 (0, ((("a")), 100000000, 0, -3511), (Tag8 (([("Left", (0)); ("Right", (0))], (0, 100000000, 0, -3520), 1, 0, 0)), 100000000, 0, -3519), 0), 100000000, 0, -3518), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Binary_searchable"), "Which_target_by_segment"), "t"), 0, (0)), 100000000, 0, -3517), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -3511)], (0)), 100000000, 0, -3516), 0), 100000000, 0, -3515), 0), 100000000, 0, -3514), 0), 100000000, 0, -3513)], (0)), 100000000, 0, -3510), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 52)), 0); (("merge_to_sequence", 7616), ((Tag3 (Tag1 ((("With_comparator", 7056)), "t"), [((("a")), 100000000, 0, -3494); ((("cmp")), 100000000, 0, -3495); (Tag1 (Tag1 ("order"), (Tag3 ((Tag3 ("option", 10)), [(Tag8 (([("Decreasing", (0)); ("Increasing", (0))], (0, 100000000, 0, -3509), 1, 0, 0)), 100000000, 0, -3508)], (0)), 100000000, 0, -3507), (Tag1 (Tag1 ("greater_or_equal_to"), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -3494)], (0)), 100000000, 0, -3506), (Tag1 (Tag1 ("less_or_equal_to"), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -3494)], (0)), 100000000, 0, -3505), (Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3494); ((("cmp")), 100000000, 0, -3495)], (0)), 100000000, 0, -3504), (Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3494); ((("cmp")), 100000000, 0, -3495)], (0)), 100000000, 0, -3503), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag3 (Tag1 ((("Merge_to_sequence_element", 7058)), "t"), [((("a")), 100000000, 0, -3494); ((("a")), 100000000, 0, -3494)], (0)), 100000000, 0, -3502)], (0)), 100000000, 0, -3501), 0), 100000000, 0, -3500), 0), 100000000, 0, -3499), 0), 100000000, 0, -3498), 0), 100000000, 0, -3497), 0), 100000000, 0, -3496)], (0)), 100000000, 0, -3493), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 53)), 0); (("empty", 7617), ((Tag3 (Tag1 ((("With_comparator", 7056)), "t"), [((("a")), 100000000, 0, -3490); ((("cmp")), 100000000, 0, -3491); (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3490); ((("cmp")), 100000000, 0, -3491)], (0)), 100000000, 0, -3492)], (0)), 100000000, 0, -3489), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 61)), 0); (("singleton", 7618), ((Tag3 (Tag1 ((("With_comparator", 7056)), "t"), [((("a")), 100000000, 0, -3485); ((("cmp")), 100000000, 0, -3486); (Tag1 (0, ((("a")), 100000000, 0, -3485), (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3485); ((("cmp")), 100000000, 0, -3486)], (0)), 100000000, 0, -3488), 0), 100000000, 0, -3487)], (0)), 100000000, 0, -3484), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 62)), 0); (("union_list", 7619), ((Tag3 (Tag1 ((("With_comparator", 7056)), "t"), [((("a")), 100000000, 0, -3478); ((("cmp")), 100000000, 0, -3479); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3478); ((("cmp")), 100000000, 0, -3479)], (0)), 100000000, 0, -3483)], (0)), 100000000, 0, -3482), (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3478); ((("cmp")), 100000000, 0, -3479)], (0)), 100000000, 0, -3481), 0), 100000000, 0, -3480)], (0)), 100000000, 0, -3477), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 63)), 0); (("of_list", 7620), ((Tag3 (Tag1 ((("With_comparator", 7056)), "t"), [((("a")), 100000000, 0, -3472); ((("cmp")), 100000000, 0, -3473); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -3472)], (0)), 100000000, 0, -3476), (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3472); ((("cmp")), 100000000, 0, -3473)], (0)), 100000000, 0, -3475), 0), 100000000, 0, -3474)], (0)), 100000000, 0, -3471), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 64)), 0); (("of_sequence", 7621), ((Tag3 (Tag1 ((("With_comparator", 7056)), "t"), [((("a")), 100000000, 0, -3466); ((("cmp")), 100000000, 0, -3467); (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [((("a")), 100000000, 0, -3466)], (0)), 100000000, 0, -3470), (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3466); ((("cmp")), 100000000, 0, -3467)], (0)), 100000000, 0, -3469), 0), 100000000, 0, -3468)], (0)), 100000000, 0, -3465), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 65)), 0); (("of_array", 7622), ((Tag3 (Tag1 ((("With_comparator", 7056)), "t"), [((("a")), 100000000, 0, -3460); ((("cmp")), 100000000, 0, -3461); (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -3460)], (0)), 100000000, 0, -3464), (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3460); ((("cmp")), 100000000, 0, -3461)], (0)), 100000000, 0, -3463), 0), 100000000, 0, -3462)], (0)), 100000000, 0, -3459), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 66)), 0); (("of_sorted_array", 7623), ((Tag3 (Tag1 ((("With_comparator", 7056)), "t"), [((("a")), 100000000, 0, -3453); ((("cmp")), 100000000, 0, -3454); (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -3453)], (0)), 100000000, 0, -3458), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3453); ((("cmp")), 100000000, 0, -3454)], (0)), 100000000, 0, -3457)], (0)), 100000000, 0, -3456), 0), 100000000, 0, -3455)], (0)), 100000000, 0, -3452), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 67)), 0); (("of_sorted_array_unchecked", 7624), ((Tag3 (Tag1 ((("With_comparator", 7056)), "t"), [((("a")), 100000000, 0, -3447); ((("cmp")), 100000000, 0, -3448); (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -3447)], (0)), 100000000, 0, -3451), (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3447); ((("cmp")), 100000000, 0, -3448)], (0)), 100000000, 0, -3450), 0), 100000000, 0, -3449)], (0)), 100000000, 0, -3446), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 68)), 0); (("of_increasing_iterator_unchecked", 7625), ((Tag3 (Tag1 ((("With_comparator", 7056)), "t"), [((("a")), 100000000, 0, -3438); ((("cmp")), 100000000, 0, -3439); (Tag1 (("len"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3445), (Tag1 (("f"), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3444), ((("a")), 100000000, 0, -3438), 0), 100000000, 0, -3443), (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3438); ((("cmp")), 100000000, 0, -3439)], (0)), 100000000, 0, -3442), 0), 100000000, 0, -3441), 0), 100000000, 0, -3440)], (0)), 100000000, 0, -3437), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 69)), 0); (("stable_dedup_list", 7626), ((Tag3 (Tag1 ((("With_comparator", 7056)), "t"), [((("a")), 100000000, 0, -3432); ((0), 100000000, 0, -3433); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -3432)], (0)), 100000000, 0, -3436), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -3432)], (0)), 100000000, 0, -3435), 0), 100000000, 0, -3434)], (0)), 100000000, 0, -3431), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 70)), 0); (("map", 7627), ((Tag3 (Tag1 ((("With_comparator", 7056)), "t"), [((("b")), 100000000, 0, -3422); ((("cmp")), 100000000, 0, -3423); (Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3428); ((0), 100000000, 0, -3430)], (0)), 100000000, 0, -3429), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -3428), ((("b")), 100000000, 0, -3422), 0), 100000000, 0, -3427), (Tag3 ((("t", 7564)), [((("b")), 100000000, 0, -3422); ((("cmp")), 100000000, 0, -3423)], (0)), 100000000, 0, -3426), 0), 100000000, 0, -3425), 0), 100000000, 0, -3424)], (0)), 100000000, 0, -3421), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 71)), 0); (("filter_map", 7628), ((Tag3 (Tag1 ((("With_comparator", 7056)), "t"), [((("b")), 100000000, 0, -3411); ((("cmp")), 100000000, 0, -3412); (Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3418); ((0), 100000000, 0, -3420)], (0)), 100000000, 0, -3419), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -3418), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -3411)], (0)), 100000000, 0, -3417), 0), 100000000, 0, -3416), (Tag3 ((("t", 7564)), [((("b")), 100000000, 0, -3411); ((("cmp")), 100000000, 0, -3412)], (0)), 100000000, 0, -3415), 0), 100000000, 0, -3414), 0), 100000000, 0, -3413)], (0)), 100000000, 0, -3410), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 72)), 0); (("of_tree", 7629), ((Tag3 (Tag1 ((("With_comparator", 7056)), "t"), [((("a")), 100000000, 0, -3405); ((("cmp")), 100000000, 0, -3406); (Tag1 (0, (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3405); ((("cmp")), 100000000, 0, -3406)], (0)), 100000000, 0, -3409), (Tag3 ((("t", 7564)), [((("a")), 100000000, 0, -3405); ((("cmp")), 100000000, 0, -3406)], (0)), 100000000, 0, -3408), 0), 100000000, 0, -3407)], (0)), 100000000, 0, -3404), 0, (("src/set_intf.ml", 800, 29379, 29387), ("src/set_intf.ml", 807, 29694, 29773), 0), 0, Tag1 ("Base__Set_intf", 73)), 0); (("empty_without_value_restriction", 7630), ((Tag3 ((("t", 7564)), [((0), 100000000, 0, -3402); ((0), 100000000, 0, -3403)], (0)), 100000000, 0, -3401), 0, (("src/set_intf.ml", 809, 29775, 29781), ("src/set_intf.ml", 809, 29775, 29827), 0), 0, Tag1 ("Base__Set_intf", 229)), 0)]), 0, (("src/set_intf.ml", 779, 28740, 28744), ("src/set_intf.ml", 810, 29828, 29835), 0), Tag1 ("Base__Set_intf", 230)), 0, 0); (("length", 7496), ((Tag1 (0, (Tag3 ((("t", 7492)), [((0), 100000000, 0, -3375); ((0), 100000000, 0, -3376)], (0)), 100000000, 0, -3374), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3373), 0), 100000000, 0, -3372), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Container_intf", 93)), 0); (("is_empty", 7497), ((Tag1 (0, (Tag3 ((("t", 7492)), [((0), 100000000, 0, -3370); ((0), 100000000, 0, -3371)], (0)), 100000000, 0, -3369), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3368), 0), 100000000, 0, -3367), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Container_intf", 94)), 0); (("iter", 7498), ((Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3364); ((0), 100000000, 0, -3366)], (0)), 100000000, 0, -3365), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -3364), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3363), 0), 100000000, 0, -3362), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3361), 0), 100000000, 0, -3360), 0), 100000000, 0, -3359), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Container_intf", 96)), 0); (("fold", 7499), ((Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3356); ((0), 100000000, 0, -3358)], (0)), 100000000, 0, -3357), (Tag1 (("init"), ((("acc")), 100000000, 0, -3353), (Tag1 (("f"), (Tag1 (0, ((("acc")), 100000000, 0, -3353), (Tag1 (0, ((("a")), 100000000, 0, -3356), ((("acc")), 100000000, 0, -3353), 0), 100000000, 0, -3355), 0), 100000000, 0, -3354), ((("acc")), 100000000, 0, -3353), 0), 100000000, 0, -3352), 0), 100000000, 0, -3351), 0), 100000000, 0, -3350), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Container_intf", 97)), 0); (("fold_result", 7500), ((Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3347); ((0), 100000000, 0, -3349)], (0)), 100000000, 0, -3348), (Tag1 (("init"), ((("acc")), 100000000, 0, -3342), (Tag1 (("f"), (Tag1 (0, ((("acc")), 100000000, 0, -3342), (Tag1 (0, ((("a")), 100000000, 0, -3347), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Result"), "t"), [((("acc")), 100000000, 0, -3342); ((("e")), 100000000, 0, -3343)], (0)), 100000000, 0, -3346), 0), 100000000, 0, -3345), 0), 100000000, 0, -3344), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Result"), "t"), [((("acc")), 100000000, 0, -3342); ((("e")), 100000000, 0, -3343)], (0)), 100000000, 0, -3341), 0), 100000000, 0, -3340), 0), 100000000, 0, -3339), 0), 100000000, 0, -3338), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Container_intf", 98)), 0); (("exists", 7501), ((Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3335); ((0), 100000000, 0, -3337)], (0)), 100000000, 0, -3336), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -3335), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3334), 0), 100000000, 0, -3333), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3332), 0), 100000000, 0, -3331), 0), 100000000, 0, -3330), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Container_intf", 100)), 0); (("for_all", 7502), ((Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3327); ((0), 100000000, 0, -3329)], (0)), 100000000, 0, -3328), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -3327), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3326), 0), 100000000, 0, -3325), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3324), 0), 100000000, 0, -3323), 0), 100000000, 0, -3322), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Container_intf", 101)), 0); (("count", 7503), ((Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3319); ((0), 100000000, 0, -3321)], (0)), 100000000, 0, -3320), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -3319), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3318), 0), 100000000, 0, -3317), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3316), 0), 100000000, 0, -3315), 0), 100000000, 0, -3314), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Container_intf", 102)), 0); (("sum", 7504), ((Tag1 (0, (Tag11 (Tag1 ((Tag2 ("Base__Container_intf")), "Summable"), [(("t"), ((("sum")), 100000000, 0, -3308))]), 100000000, 0, -3313), (Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3310); ((0), 100000000, 0, -3312)], (0)), 100000000, 0, -3311), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -3310), ((("sum")), 100000000, 0, -3308), 0), 100000000, 0, -3309), ((("sum")), 100000000, 0, -3308), 0), 100000000, 0, -3307), 0), 100000000, 0, -3306), 0), 100000000, 0, -3305), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Container_intf", 104)), 0); (("find", 7505), ((Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3300); ((0), 100000000, 0, -3304)], (0)), 100000000, 0, -3303), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -3300), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3302), 0), 100000000, 0, -3301), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -3300)], (0)), 100000000, 0, -3299), 0), 100000000, 0, -3298), 0), 100000000, 0, -3297), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Container_intf", 105)), 0); (("find_map", 7506), ((Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3294); ((0), 100000000, 0, -3296)], (0)), 100000000, 0, -3295), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -3294), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -3291)], (0)), 100000000, 0, -3293), 0), 100000000, 0, -3292), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -3291)], (0)), 100000000, 0, -3290), 0), 100000000, 0, -3289), 0), 100000000, 0, -3288), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Container_intf", 106)), 0); (("to_list", 7507), ((Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3285); ((0), 100000000, 0, -3287)], (0)), 100000000, 0, -3286), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -3285)], (0)), 100000000, 0, -3284), 0), 100000000, 0, -3283), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Container_intf", 107)), 0); (("to_array", 7508), ((Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3280); ((0), 100000000, 0, -3282)], (0)), 100000000, 0, -3281), (Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -3280)], (0)), 100000000, 0, -3279), 0), 100000000, 0, -3278), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Container_intf", 108)), 0); (("invariants", 7509), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -3273); ((("cmp")), 100000000, 0, -3274); (Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3273); ((("cmp")), 100000000, 0, -3274)], (0)), 100000000, 0, -3277), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3276), 0), 100000000, 0, -3275)], (0)), 100000000, 0, -3272), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 15)), 0); (("mem", 7510), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -3266); ((("cmp")), 100000000, 0, -3267); (Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3266); ((("cmp")), 100000000, 0, -3267)], (0)), 100000000, 0, -3271), (Tag1 (0, ((("a")), 100000000, 0, -3266), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3270), 0), 100000000, 0, -3269), 0), 100000000, 0, -3268)], (0)), 100000000, 0, -3265), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 16)), 0); (("add", 7511), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -3259); ((("cmp")), 100000000, 0, -3260); (Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3259); ((("cmp")), 100000000, 0, -3260)], (0)), 100000000, 0, -3264), (Tag1 (0, ((("a")), 100000000, 0, -3259), (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3259); ((("cmp")), 100000000, 0, -3260)], (0)), 100000000, 0, -3263), 0), 100000000, 0, -3262), 0), 100000000, 0, -3261)], (0)), 100000000, 0, -3258), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 17)), 0); (("remove", 7512), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -3252); ((("cmp")), 100000000, 0, -3253); (Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3252); ((("cmp")), 100000000, 0, -3253)], (0)), 100000000, 0, -3257), (Tag1 (0, ((("a")), 100000000, 0, -3252), (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3252); ((("cmp")), 100000000, 0, -3253)], (0)), 100000000, 0, -3256), 0), 100000000, 0, -3255), 0), 100000000, 0, -3254)], (0)), 100000000, 0, -3251), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 18)), 0); (("union", 7513), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -3244); ((("cmp")), 100000000, 0, -3245); (Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3244); ((("cmp")), 100000000, 0, -3245)], (0)), 100000000, 0, -3250), (Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3244); ((("cmp")), 100000000, 0, -3245)], (0)), 100000000, 0, -3249), (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3244); ((("cmp")), 100000000, 0, -3245)], (0)), 100000000, 0, -3248), 0), 100000000, 0, -3247), 0), 100000000, 0, -3246)], (0)), 100000000, 0, -3243), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 19)), 0); (("inter", 7514), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -3236); ((("cmp")), 100000000, 0, -3237); (Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3236); ((("cmp")), 100000000, 0, -3237)], (0)), 100000000, 0, -3242), (Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3236); ((("cmp")), 100000000, 0, -3237)], (0)), 100000000, 0, -3241), (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3236); ((("cmp")), 100000000, 0, -3237)], (0)), 100000000, 0, -3240), 0), 100000000, 0, -3239), 0), 100000000, 0, -3238)], (0)), 100000000, 0, -3235), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 20)), 0); (("diff", 7515), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -3228); ((("cmp")), 100000000, 0, -3229); (Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3228); ((("cmp")), 100000000, 0, -3229)], (0)), 100000000, 0, -3234), (Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3228); ((("cmp")), 100000000, 0, -3229)], (0)), 100000000, 0, -3233), (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3228); ((("cmp")), 100000000, 0, -3229)], (0)), 100000000, 0, -3232), 0), 100000000, 0, -3231), 0), 100000000, 0, -3230)], (0)), 100000000, 0, -3227), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 21)), 0); (("symmetric_diff", 7516), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -3219); ((("cmp")), 100000000, 0, -3220); (Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3219); ((("cmp")), 100000000, 0, -3220)], (0)), 100000000, 0, -3226), (Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3219); ((("cmp")), 100000000, 0, -3220)], (0)), 100000000, 0, -3225), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Either"), "t"), [((("a")), 100000000, 0, -3219); ((("a")), 100000000, 0, -3219)], (0)), 100000000, 0, -3224)], (0)), 100000000, 0, -3223), 0), 100000000, 0, -3222), 0), 100000000, 0, -3221)], (0)), 100000000, 0, -3218), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 22)), 0); (("compare_direct", 7517), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -3211); ((("cmp")), 100000000, 0, -3212); (Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3211); ((("cmp")), 100000000, 0, -3212)], (0)), 100000000, 0, -3217), (Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3211); ((("cmp")), 100000000, 0, -3212)], (0)), 100000000, 0, -3216), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3215), 0), 100000000, 0, -3214), 0), 100000000, 0, -3213)], (0)), 100000000, 0, -3210), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 23)), 0); (("equal", 7518), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -3203); ((("cmp")), 100000000, 0, -3204); (Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3203); ((("cmp")), 100000000, 0, -3204)], (0)), 100000000, 0, -3209), (Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3203); ((("cmp")), 100000000, 0, -3204)], (0)), 100000000, 0, -3208), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3207), 0), 100000000, 0, -3206), 0), 100000000, 0, -3205)], (0)), 100000000, 0, -3202), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 24)), 0); (("is_subset", 7519), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -3195); ((("cmp")), 100000000, 0, -3196); (Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3195); ((("cmp")), 100000000, 0, -3196)], (0)), 100000000, 0, -3201), (Tag1 (("of_"), (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3195); ((("cmp")), 100000000, 0, -3196)], (0)), 100000000, 0, -3200), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3199), 0), 100000000, 0, -3198), 0), 100000000, 0, -3197)], (0)), 100000000, 0, -3194), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 25)), 0); (("are_disjoint", 7520), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -3187); ((("cmp")), 100000000, 0, -3188); (Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3187); ((("cmp")), 100000000, 0, -3188)], (0)), 100000000, 0, -3193), (Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3187); ((("cmp")), 100000000, 0, -3188)], (0)), 100000000, 0, -3192), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3191), 0), 100000000, 0, -3190), 0), 100000000, 0, -3189)], (0)), 100000000, 0, -3186), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 26)), 0); Tag3 (("Named", 7521), 0, (Tag1 ([(("is_subset", 7633), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -3949); ((("cmp")), 100000000, 0, -3950); (Tag1 (0, (Tag3 (Tag1 ((("Named", 7059)), "t"), [(Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3949); ((("cmp")), 100000000, 0, -3950)], (0)), 100000000, 0, -3958)], (0)), 100000000, 0, -3957), (Tag1 (("of_"), (Tag3 (Tag1 ((("Named", 7059)), "t"), [(Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3949); ((("cmp")), 100000000, 0, -3950)], (0)), 100000000, 0, -3956)], (0)), 100000000, 0, -3955), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3954)], (0)), 100000000, 0, -3953), 0), 100000000, 0, -3952), 0), 100000000, 0, -3951)], (0)), 100000000, 0, -3948), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 27)), 0); (("equal", 7634), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -3938); ((("cmp")), 100000000, 0, -3939); (Tag1 (0, (Tag3 (Tag1 ((("Named", 7059)), "t"), [(Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3938); ((("cmp")), 100000000, 0, -3939)], (0)), 100000000, 0, -3947)], (0)), 100000000, 0, -3946), (Tag1 (0, (Tag3 (Tag1 ((("Named", 7059)), "t"), [(Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3938); ((("cmp")), 100000000, 0, -3939)], (0)), 100000000, 0, -3945)], (0)), 100000000, 0, -3944), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3943)], (0)), 100000000, 0, -3942), 0), 100000000, 0, -3941), 0), 100000000, 0, -3940)], (0)), 100000000, 0, -3937), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 28)), 0)]), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), Tag1 ("Base__Set_intf", 29)), 0, 0); (("fold_until", 7522), ((Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3183); ((0), 100000000, 0, -3185)], (0)), 100000000, 0, -3184), (Tag1 (("init"), ((("acc")), 100000000, 0, -3179), (Tag1 (("f"), (Tag1 (0, ((("acc")), 100000000, 0, -3179), (Tag1 (0, ((("a")), 100000000, 0, -3183), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Container"), "Continue_or_stop"), "t"), [((("acc")), 100000000, 0, -3179); ((("final")), 100000000, 0, -3177)], (0)), 100000000, 0, -3182), 0), 100000000, 0, -3181), 0), 100000000, 0, -3180), (Tag1 (("finish"), (Tag1 (0, ((("acc")), 100000000, 0, -3179), ((("final")), 100000000, 0, -3177), 0), 100000000, 0, -3178), ((("final")), 100000000, 0, -3177), 0), 100000000, 0, -3176), 0), 100000000, 0, -3175), 0), 100000000, 0, -3174), 0), 100000000, 0, -3173), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 30)), 0); (("fold_right", 7523), ((Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3170); ((0), 100000000, 0, -3172)], (0)), 100000000, 0, -3171), (Tag1 (("init"), ((("acc")), 100000000, 0, -3167), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -3170), (Tag1 (0, ((("acc")), 100000000, 0, -3167), ((("acc")), 100000000, 0, -3167), 0), 100000000, 0, -3169), 0), 100000000, 0, -3168), ((("acc")), 100000000, 0, -3167), 0), 100000000, 0, -3166), 0), 100000000, 0, -3165), 0), 100000000, 0, -3164), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 31)), 0); (("iter2", 7524), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -3151); ((("cmp")), 100000000, 0, -3152); (Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3151); ((("cmp")), 100000000, 0, -3152)], (0)), 100000000, 0, -3163), (Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3151); ((("cmp")), 100000000, 0, -3152)], (0)), 100000000, 0, -3162), (Tag1 (("f"), (Tag1 (0, (Tag8 (([("Both", (((Tag2 ([((("a")), 100000000, 0, -3151); ((("a")), 100000000, 0, -3151)]), 100000000, 0, -3161)))); ("Left", ((((("a")), 100000000, 0, -3151)))); ("Right", ((((("a")), 100000000, 0, -3151))))], (0, 100000000, 0, -3160), 1, 0, 0)), 100000000, 0, -3159), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3158), 0), 100000000, 0, -3157), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3156), 0), 100000000, 0, -3155), 0), 100000000, 0, -3154), 0), 100000000, 0, -3153)], (0)), 100000000, 0, -3150), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 32)), 0); (("filter", 7525), ((Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3145); ((("cmp")), 100000000, 0, -3146)], (0)), 100000000, 0, -3149), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -3145), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3148), 0), 100000000, 0, -3147), (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3145); ((("cmp")), 100000000, 0, -3146)], (0)), 100000000, 0, -3144), 0), 100000000, 0, -3143), 0), 100000000, 0, -3142), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 33)), 0); (("partition_tf", 7526), ((Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3136); ((("cmp")), 100000000, 0, -3137)], (0)), 100000000, 0, -3141), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -3136), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3140), 0), 100000000, 0, -3139), (Tag2 ([(Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3136); ((("cmp")), 100000000, 0, -3137)], (0)), 100000000, 0, -3135); (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3136); ((("cmp")), 100000000, 0, -3137)], (0)), 100000000, 0, -3138)]), 100000000, 0, -3134), 0), 100000000, 0, -3133), 0), 100000000, 0, -3132), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 34)), 0); (("elements", 7527), ((Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3129); ((0), 100000000, 0, -3131)], (0)), 100000000, 0, -3130), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -3129)], (0)), 100000000, 0, -3128), 0), 100000000, 0, -3127), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 35)), 0); (("min_elt", 7528), ((Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3124); ((0), 100000000, 0, -3126)], (0)), 100000000, 0, -3125), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -3124)], (0)), 100000000, 0, -3123), 0), 100000000, 0, -3122), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 36)), 0); (("min_elt_exn", 7529), ((Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3119); ((0), 100000000, 0, -3121)], (0)), 100000000, 0, -3120), ((("a")), 100000000, 0, -3119), 0), 100000000, 0, -3118), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 37)), 0); (("max_elt", 7530), ((Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3115); ((0), 100000000, 0, -3117)], (0)), 100000000, 0, -3116), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -3115)], (0)), 100000000, 0, -3114), 0), 100000000, 0, -3113), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 38)), 0); (("max_elt_exn", 7531), ((Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3110); ((0), 100000000, 0, -3112)], (0)), 100000000, 0, -3111), ((("a")), 100000000, 0, -3110), 0), 100000000, 0, -3109), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 39)), 0); (("choose", 7532), ((Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3106); ((0), 100000000, 0, -3108)], (0)), 100000000, 0, -3107), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -3106)], (0)), 100000000, 0, -3105), 0), 100000000, 0, -3104), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 40)), 0); (("choose_exn", 7533), ((Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3101); ((0), 100000000, 0, -3103)], (0)), 100000000, 0, -3102), ((("a")), 100000000, 0, -3101), 0), 100000000, 0, -3100), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 41)), 0); (("split", 7534), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -3091); ((("cmp")), 100000000, 0, -3092); (Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3091); ((("cmp")), 100000000, 0, -3092)], (0)), 100000000, 0, -3099), (Tag1 (0, ((("a")), 100000000, 0, -3091), (Tag2 ([(Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3091); ((("cmp")), 100000000, 0, -3092)], (0)), 100000000, 0, -3096); (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -3091)], (0)), 100000000, 0, -3097); (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3091); ((("cmp")), 100000000, 0, -3092)], (0)), 100000000, 0, -3098)]), 100000000, 0, -3095), 0), 100000000, 0, -3094), 0), 100000000, 0, -3093)], (0)), 100000000, 0, -3090), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 42)), 0); (("split_le_gt", 7535), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -3082); ((("cmp")), 100000000, 0, -3083); (Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3082); ((("cmp")), 100000000, 0, -3083)], (0)), 100000000, 0, -3089), (Tag1 (0, ((("a")), 100000000, 0, -3082), (Tag2 ([(Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3082); ((("cmp")), 100000000, 0, -3083)], (0)), 100000000, 0, -3087); (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3082); ((("cmp")), 100000000, 0, -3083)], (0)), 100000000, 0, -3088)]), 100000000, 0, -3086), 0), 100000000, 0, -3085), 0), 100000000, 0, -3084)], (0)), 100000000, 0, -3081), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 43)), 0); (("split_lt_ge", 7536), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -3073); ((("cmp")), 100000000, 0, -3074); (Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3073); ((("cmp")), 100000000, 0, -3074)], (0)), 100000000, 0, -3080), (Tag1 (0, ((("a")), 100000000, 0, -3073), (Tag2 ([(Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3073); ((("cmp")), 100000000, 0, -3074)], (0)), 100000000, 0, -3078); (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3073); ((("cmp")), 100000000, 0, -3074)], (0)), 100000000, 0, -3079)]), 100000000, 0, -3077), 0), 100000000, 0, -3076), 0), 100000000, 0, -3075)], (0)), 100000000, 0, -3072), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 44)), 0); (("group_by", 7537), ((Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3066); ((("cmp")), 100000000, 0, -3067)], (0)), 100000000, 0, -3071), (Tag1 (("equiv"), (Tag1 (0, ((("a")), 100000000, 0, -3066), (Tag1 (0, ((("a")), 100000000, 0, -3066), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3070), 0), 100000000, 0, -3069), 0), 100000000, 0, -3068), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3066); ((("cmp")), 100000000, 0, -3067)], (0)), 100000000, 0, -3065)], (0)), 100000000, 0, -3064), 0), 100000000, 0, -3063), 0), 100000000, 0, -3062), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 45)), 0); (("find_exn", 7538), ((Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3057); ((0), 100000000, 0, -3061)], (0)), 100000000, 0, -3060), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -3057), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3059), 0), 100000000, 0, -3058), ((("a")), 100000000, 0, -3057), 0), 100000000, 0, -3056), 0), 100000000, 0, -3055), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 46)), 0); (("nth", 7539), ((Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3051); ((0), 100000000, 0, -3054)], (0)), 100000000, 0, -3053), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3052), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -3051)], (0)), 100000000, 0, -3050), 0), 100000000, 0, -3049), 0), 100000000, 0, -3048), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 47)), 0); (("remove_index", 7540), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -3041); ((("cmp")), 100000000, 0, -3042); (Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3041); ((("cmp")), 100000000, 0, -3042)], (0)), 100000000, 0, -3047), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3046), (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3041); ((("cmp")), 100000000, 0, -3042)], (0)), 100000000, 0, -3045), 0), 100000000, 0, -3044), 0), 100000000, 0, -3043)], (0)), 100000000, 0, -3040), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 48)), 0); (("to_tree", 7541), ((Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3037); ((("cmp")), 100000000, 0, -3038)], (0)), 100000000, 0, -3039), (Tag3 (Tag1 ((("Tree", 7495)), "t"), [((("a")), 100000000, 0, -3037); ((("cmp")), 100000000, 0, -3038)], (0)), 100000000, 0, -3036), 0), 100000000, 0, -3035), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 49)), 0); (("to_sequence", 7542), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -3022); ((("cmp")), 100000000, 0, -3023); (Tag1 (Tag1 ("order"), (Tag3 ((Tag3 ("option", 10)), [(Tag8 (([("Decreasing", (0)); ("Increasing", (0))], (0, 100000000, 0, -3034), 1, 0, 0)), 100000000, 0, -3033)], (0)), 100000000, 0, -3032), (Tag1 (Tag1 ("greater_or_equal_to"), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -3022)], (0)), 100000000, 0, -3031), (Tag1 (Tag1 ("less_or_equal_to"), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -3022)], (0)), 100000000, 0, -3030), (Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3022); ((("cmp")), 100000000, 0, -3023)], (0)), 100000000, 0, -3029), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [((("a")), 100000000, 0, -3022)], (0)), 100000000, 0, -3028), 0), 100000000, 0, -3027), 0), 100000000, 0, -3026), 0), 100000000, 0, -3025), 0), 100000000, 0, -3024)], (0)), 100000000, 0, -3021), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 50)), 0); (("binary_search", 7543), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -3008); ((("cmp")), 100000000, 0, -3009); (Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -3008); ((("cmp")), 100000000, 0, -3009)], (0)), 100000000, 0, -3020), (Tag1 (("compare"), (Tag1 (0, ((("a")), 100000000, 0, -3008), (Tag1 (0, ((("key")), 100000000, 0, -3015), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3019), 0), 100000000, 0, -3018), 0), 100000000, 0, -3017), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Binary_searchable"), "Which_target_by_key"), "t"), 0, (0)), 100000000, 0, -3016), (Tag1 (0, ((("key")), 100000000, 0, -3015), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -3008)], (0)), 100000000, 0, -3014), 0), 100000000, 0, -3013), 0), 100000000, 0, -3012), 0), 100000000, 0, -3011), 0), 100000000, 0, -3010)], (0)), 100000000, 0, -3007), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 51)), 0); (("binary_search_segmented", 7544), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -2996); ((("cmp")), 100000000, 0, -2997); (Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -2996); ((("cmp")), 100000000, 0, -2997)], (0)), 100000000, 0, -3006), (Tag1 (("segment_of"), (Tag1 (0, ((("a")), 100000000, 0, -2996), (Tag8 (([("Left", (0)); ("Right", (0))], (0, 100000000, 0, -3005), 1, 0, 0)), 100000000, 0, -3004), 0), 100000000, 0, -3003), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Binary_searchable"), "Which_target_by_segment"), "t"), 0, (0)), 100000000, 0, -3002), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -2996)], (0)), 100000000, 0, -3001), 0), 100000000, 0, -3000), 0), 100000000, 0, -2999), 0), 100000000, 0, -2998)], (0)), 100000000, 0, -2995), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 52)), 0); (("merge_to_sequence", 7545), ((Tag3 (Tag1 ((("Without_comparator", 7055)), "t"), [((("a")), 100000000, 0, -2979); ((("cmp")), 100000000, 0, -2980); (Tag1 (Tag1 ("order"), (Tag3 ((Tag3 ("option", 10)), [(Tag8 (([("Decreasing", (0)); ("Increasing", (0))], (0, 100000000, 0, -2994), 1, 0, 0)), 100000000, 0, -2993)], (0)), 100000000, 0, -2992), (Tag1 (Tag1 ("greater_or_equal_to"), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -2979)], (0)), 100000000, 0, -2991), (Tag1 (Tag1 ("less_or_equal_to"), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -2979)], (0)), 100000000, 0, -2990), (Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -2979); ((("cmp")), 100000000, 0, -2980)], (0)), 100000000, 0, -2989), (Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -2979); ((("cmp")), 100000000, 0, -2980)], (0)), 100000000, 0, -2988), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag3 (Tag1 ((("Merge_to_sequence_element", 7058)), "t"), [((("a")), 100000000, 0, -2979); ((("a")), 100000000, 0, -2979)], (0)), 100000000, 0, -2987)], (0)), 100000000, 0, -2986), 0), 100000000, 0, -2985), 0), 100000000, 0, -2984), 0), 100000000, 0, -2983), 0), 100000000, 0, -2982), 0), 100000000, 0, -2981)], (0)), 100000000, 0, -2978), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 53)), 0); (("empty", 7546), ((Tag3 (Tag1 ((("With_comparator", 7056)), "t"), [((("a")), 100000000, 0, -2975); ((("cmp")), 100000000, 0, -2976); (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -2975); ((("cmp")), 100000000, 0, -2976)], (0)), 100000000, 0, -2977)], (0)), 100000000, 0, -2974), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 61)), 0); (("singleton", 7547), ((Tag3 (Tag1 ((("With_comparator", 7056)), "t"), [((("a")), 100000000, 0, -2970); ((("cmp")), 100000000, 0, -2971); (Tag1 (0, ((("a")), 100000000, 0, -2970), (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -2970); ((("cmp")), 100000000, 0, -2971)], (0)), 100000000, 0, -2973), 0), 100000000, 0, -2972)], (0)), 100000000, 0, -2969), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 62)), 0); (("union_list", 7548), ((Tag3 (Tag1 ((("With_comparator", 7056)), "t"), [((("a")), 100000000, 0, -2963); ((("cmp")), 100000000, 0, -2964); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -2963); ((("cmp")), 100000000, 0, -2964)], (0)), 100000000, 0, -2968)], (0)), 100000000, 0, -2967), (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -2963); ((("cmp")), 100000000, 0, -2964)], (0)), 100000000, 0, -2966), 0), 100000000, 0, -2965)], (0)), 100000000, 0, -2962), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 63)), 0); (("of_list", 7549), ((Tag3 (Tag1 ((("With_comparator", 7056)), "t"), [((("a")), 100000000, 0, -2957); ((("cmp")), 100000000, 0, -2958); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -2957)], (0)), 100000000, 0, -2961), (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -2957); ((("cmp")), 100000000, 0, -2958)], (0)), 100000000, 0, -2960), 0), 100000000, 0, -2959)], (0)), 100000000, 0, -2956), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 64)), 0); (("of_sequence", 7550), ((Tag3 (Tag1 ((("With_comparator", 7056)), "t"), [((("a")), 100000000, 0, -2951); ((("cmp")), 100000000, 0, -2952); (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [((("a")), 100000000, 0, -2951)], (0)), 100000000, 0, -2955), (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -2951); ((("cmp")), 100000000, 0, -2952)], (0)), 100000000, 0, -2954), 0), 100000000, 0, -2953)], (0)), 100000000, 0, -2950), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 65)), 0); (("of_array", 7551), ((Tag3 (Tag1 ((("With_comparator", 7056)), "t"), [((("a")), 100000000, 0, -2945); ((("cmp")), 100000000, 0, -2946); (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -2945)], (0)), 100000000, 0, -2949), (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -2945); ((("cmp")), 100000000, 0, -2946)], (0)), 100000000, 0, -2948), 0), 100000000, 0, -2947)], (0)), 100000000, 0, -2944), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 66)), 0); (("of_sorted_array", 7552), ((Tag3 (Tag1 ((("With_comparator", 7056)), "t"), [((("a")), 100000000, 0, -2938); ((("cmp")), 100000000, 0, -2939); (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -2938)], (0)), 100000000, 0, -2943), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -2938); ((("cmp")), 100000000, 0, -2939)], (0)), 100000000, 0, -2942)], (0)), 100000000, 0, -2941), 0), 100000000, 0, -2940)], (0)), 100000000, 0, -2937), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 67)), 0); (("of_sorted_array_unchecked", 7553), ((Tag3 (Tag1 ((("With_comparator", 7056)), "t"), [((("a")), 100000000, 0, -2932); ((("cmp")), 100000000, 0, -2933); (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -2932)], (0)), 100000000, 0, -2936), (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -2932); ((("cmp")), 100000000, 0, -2933)], (0)), 100000000, 0, -2935), 0), 100000000, 0, -2934)], (0)), 100000000, 0, -2931), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 68)), 0); (("of_increasing_iterator_unchecked", 7554), ((Tag3 (Tag1 ((("With_comparator", 7056)), "t"), [((("a")), 100000000, 0, -2923); ((("cmp")), 100000000, 0, -2924); (Tag1 (("len"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -2930), (Tag1 (("f"), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -2929), ((("a")), 100000000, 0, -2923), 0), 100000000, 0, -2928), (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -2923); ((("cmp")), 100000000, 0, -2924)], (0)), 100000000, 0, -2927), 0), 100000000, 0, -2926), 0), 100000000, 0, -2925)], (0)), 100000000, 0, -2922), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 69)), 0); (("stable_dedup_list", 7555), ((Tag3 (Tag1 ((("With_comparator", 7056)), "t"), [((("a")), 100000000, 0, -2917); ((0), 100000000, 0, -2918); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -2917)], (0)), 100000000, 0, -2921), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -2917)], (0)), 100000000, 0, -2920), 0), 100000000, 0, -2919)], (0)), 100000000, 0, -2916), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 70)), 0); (("map", 7556), ((Tag3 (Tag1 ((("With_comparator", 7056)), "t"), [((("b")), 100000000, 0, -2907); ((("cmp")), 100000000, 0, -2908); (Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -2913); ((0), 100000000, 0, -2915)], (0)), 100000000, 0, -2914), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -2913), ((("b")), 100000000, 0, -2907), 0), 100000000, 0, -2912), (Tag3 ((("t", 7492)), [((("b")), 100000000, 0, -2907); ((("cmp")), 100000000, 0, -2908)], (0)), 100000000, 0, -2911), 0), 100000000, 0, -2910), 0), 100000000, 0, -2909)], (0)), 100000000, 0, -2906), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 71)), 0); (("filter_map", 7557), ((Tag3 (Tag1 ((("With_comparator", 7056)), "t"), [((("b")), 100000000, 0, -2896); ((("cmp")), 100000000, 0, -2897); (Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -2903); ((0), 100000000, 0, -2905)], (0)), 100000000, 0, -2904), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -2903), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -2896)], (0)), 100000000, 0, -2902), 0), 100000000, 0, -2901), (Tag3 ((("t", 7492)), [((("b")), 100000000, 0, -2896); ((("cmp")), 100000000, 0, -2897)], (0)), 100000000, 0, -2900), 0), 100000000, 0, -2899), 0), 100000000, 0, -2898)], (0)), 100000000, 0, -2895), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 72)), 0); (("of_tree", 7558), ((Tag3 (Tag1 ((("With_comparator", 7056)), "t"), [((("a")), 100000000, 0, -2890); ((("cmp")), 100000000, 0, -2891); (Tag1 (0, (Tag3 (Tag1 ((("Tree", 7495)), "t"), [((("a")), 100000000, 0, -2890); ((("cmp")), 100000000, 0, -2891)], (0)), 100000000, 0, -2894), (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -2890); ((("cmp")), 100000000, 0, -2891)], (0)), 100000000, 0, -2893), 0), 100000000, 0, -2892)], (0)), 100000000, 0, -2889), 0, (("src/set_intf.ml", 813, 29849, 29855), ("src/set_intf.ml", 820, 30158, 30235), 0), 0, Tag1 ("Base__Set_intf", 73)), 0); (("comparator_s", 7559), ((Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -2886); ((("cmp")), 100000000, 0, -2887)], (0)), 100000000, 0, -2888), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Module"), "t"), [((("a")), 100000000, 0, -2886); ((("cmp")), 100000000, 0, -2887)], (0)), 100000000, 0, -2885), 0), 100000000, 0, -2884), 0, (("src/set_intf.ml", 822, 30237, 30241), ("src/set_intf.ml", 822, 30237, 30306), 0), 0, Tag1 ("Base__Set_intf", 238)), 0); (("comparator", 7560), ((Tag1 (0, (Tag3 ((("t", 7492)), [((("a")), 100000000, 0, -2881); ((("cmp")), 100000000, 0, -2882)], (0)), 100000000, 0, -2883), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "t"), [((("a")), 100000000, 0, -2881); ((("cmp")), 100000000, 0, -2882)], (0)), 100000000, 0, -2880), 0), 100000000, 0, -2879), 0, (("src/set_intf.ml", 823, 30307, 30311), ("src/set_intf.ml", 823, 30307, 30367), 0), 0, Tag1 ("Base__Set_intf", 239)), 0); (("hash_fold_direct", 7561), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Hash"), "folder"), [((("elt")), 100000000, 0, -2876)], (0)), 100000000, 0, -2878), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Hash"), "folder"), [(Tag3 ((("t", 7492)), [((("elt")), 100000000, 0, -2876); ((("cmp")), 100000000, 0, -2877)], (0)), 100000000, 0, -2875)], (0)), 100000000, 0, -2874), 0), 100000000, 0, -2873), 0, (("src/set_intf.ml", 824, 30368, 30372), ("src/set_intf.ml", 824, 30368, 30441), 0), 0, Tag1 ("Base__Set_intf", 240)), 0); Tag3 (("Empty_without_value_restriction", 7562), 0, (Tag2 (((("Elt", 7563)), (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "S1"))), Tag1 ([(("empty", 7635), ((Tag3 ((("t", 7492)), [(Tag3 (Tag1 ((("Elt", 7563)), "t"), [((("a")), 100000000, 0, -3961)], (0)), 100000000, 0, -3960); (Tag3 (Tag1 ((("Elt", 7563)), "comparator_witness"), 0, (0)), 100000000, 0, -3962)], (0)), 100000000, 0, -3959), 0, (("src/set_intf.ml", 827, 30514, 30520), ("src/set_intf.ml", 827, 30514, 30568), 0), 0, Tag1 ("Base__Set_intf", 242)), 0)])), 0, (("src/set_intf.ml", 826, 30443, 30447), ("src/set_intf.ml", 828, 30569, 30576), 0), Tag1 ("Base__Set_intf", 243)), 0, 0)]), 0, (("src/set_intf.ml", 762, 28341, 28343), ("src/set_intf.ml", 829, 30577, 30582), 0), Tag1 ("Base__Set_intf", 244)), 0, 0); (("to_tree", 7393), ((Tag1 (0, (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -1759); ((("cmp")), 100000000, 0, -1760)], (0)), 100000000, 0, -1761), (Tag3 (Tag1 (Tag1 ((("Using_comparator", 7392)), "Tree"), "t"), [((("a")), 100000000, 0, -1759); ((("cmp")), 100000000, 0, -1760)], (0)), 100000000, 0, -1758), 0), 100000000, 0, -1757), 0, (("src/set_intf.ml", 831, 30584, 30586), ("src/set_intf.ml", 831, 30584, 30650), 0), 0, Tag1 ("Base__Set_intf", 245)), 0); (("of_tree", 7394), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Module"), "t"), [((("a")), 100000000, 0, -1753); ((("cmp")), 100000000, 0, -1754)], (0)), 100000000, 0, -1756), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((("Using_comparator", 7392)), "Tree"), "t"), [((("a")), 100000000, 0, -1753); ((("cmp")), 100000000, 0, -1754)], (0)), 100000000, 0, -1755), (Tag3 ((("t", 7309)), [((("a")), 100000000, 0, -1753); ((("cmp")), 100000000, 0, -1754)], (0)), 100000000, 0, -1752), 0), 100000000, 0, -1751), 0), 100000000, 0, -1750), 0, (("src/set_intf.ml", 833, 30652, 30654), ("src/set_intf.ml", 836, 30746, 30765), 0), 0, Tag1 ("Base__Set_intf", 246)), 0); Tag3 (("With_comparator", 7395), 1, (Tag3 ((("With_comparator", 7056))), 0, (("src/set_intf.ml", 842, 30877, 30879), ("src/set_intf.ml", 842, 30877, 30919), 0), Tag1 ("Base__Set_intf", 247)), 0, 0); Tag3 (("With_first_class_module", 7396), 1, (Tag3 ((("With_first_class_module", 7057))), 0, (("src/set_intf.ml", 843, 30920, 30922), ("src/set_intf.ml", 843, 30920, 30978), 0), Tag1 ("Base__Set_intf", 248)), 0, 0); Tag3 (("Without_comparator", 7397), 1, (Tag3 ((("Without_comparator", 7055))), 0, (("src/set_intf.ml", 844, 30979, 30981), ("src/set_intf.ml", 844, 30979, 31027), 0), Tag1 ("Base__Set_intf", 249)), 0, 0); Tag4 (("For_deriving", 7398), ((((("For_deriving", 7064)))), 0, (("src/set_intf.ml", 846, 31029, 31031), ("src/set_intf.ml", 846, 31029, 31070), 0), Tag1 ("Base__Set_intf", 250)), 0); Tag4 (("S_poly", 7399), ((((("S_poly", 7063)))), 0, (("src/set_intf.ml", 847, 31071, 31073), ("src/set_intf.ml", 847, 31071, 31100), 0), Tag1 ("Base__Set_intf", 251)), 0); Tag4 (("Accessors_generic", 7400), ((((("Accessors_generic", 7060)))), 0, (("src/set_intf.ml", 848, 31101, 31103), ("src/set_intf.ml", 848, 31101, 31152), 0), Tag1 ("Base__Set_intf", 252)), 0); Tag4 (("Creators_generic", 7401), ((((("Creators_generic", 7061)))), 0, (("src/set_intf.ml", 849, 31153, 31155), ("src/set_intf.ml", 849, 31153, 31202), 0), Tag1 ("Base__Set_intf", 253)), 0); Tag4 (("Creators_and_accessors_generic", 7402), ((((("Creators_and_accessors_generic", 7062)))), 0, (("src/set_intf.ml", 850, 31203, 31205), ("src/set_intf.ml", 850, 31203, 31280), 0), Tag1 ("Base__Set_intf", 254)), 0); Tag4 (("Elt_plain", 7403), ((((("Elt_plain", 7054)))), 0, (("src/set_intf.ml", 851, 31281, 31283), ("src/set_intf.ml", 851, 31281, 31316), 0), Tag1 ("Base__Set_intf", 255)), 0)])), 0, (("src/set_intf.ml", 306, 9127, 9127), ("src/set_intf.ml", 852, 31317, 31320), 0), Tag1 ("Base__Set_intf", 256)), 0)], "Base__Set_intf", [("Base__Set_intf", ("\253\020\241\175\129\197\244c\243.i\188\127\027\175p")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__StringLabels", ("\134F\024\226\216Is#\223\230\234\169Z\206Gc")); ("Stdlib__StdLabels", (".\193\n\229\139\017\212C-ZA\\kz-\128")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Printf", ("\215<\139]\021\142\224E\245m\198qc(W\229")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__MoreLabels", ("\248\232\248\254`<\230\241\161U\193U\1466J\238")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__ListLabels", ("*\194\012\191\020%\170\249m\002\180\178hk\205\220")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shadow_stdlib", ("\219zi\164\203\158e)\232\221\196\168\138x\142\018")); ("Sexplib0__Sexpable", ("\251${\207(\249/z\242\255\250^\141\156\210e")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv_error", ("kzv!\151~\198P\000\165\176d\007\251p\232")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Base_internalhash_types", ("0\148#2\226\223\018\135\173>!\020\237\017\255\149")); ("Base__With_return", ("S\142\136\128>E\001\1583\028\161\217I\183\1279")); ("Base__T", ("+t\159\169\027\152\205\235\003\237\133\177\024\n6'")); ("Base__Sys0", ("\206z\231\154s\\\136\2364\131\005\014\031\152m3")); ("Base__String0", ("\212\221L\220\245\255\162P\228\224\189\216\135H\149O")); ("Base__Source_code_position0", ("_\003P6\254\029\206\005\130\136\180\019\145\230\000M")); ("Base__Sexp", ("\154\187\171&\209=\153[\236\250!U\174`\190T")); ("Base__Sequence", ("{L\140\211\223\183\000\030\151\247FnY\196\210\201")); ("Base__Result", ("\204|\215\173FMa\2511<&\215T\194$\228")); ("Base__Printf", ("\000\196c,\214\127\226\174\220\190\253z!\242\028\250")); ("Base__Ppx_hash_lib", ("\199\141\178\193\006\209L\007^\020(\131\224sn8")); ("Base__Ppx_enumerate_lib", ("G\171\178\012Em\142\235@\152fg\020\140~(")); ("Base__Ppx_compare_lib", ("\243\186~\233\228\199Ah\181.\223\004e\231\129S")); ("Base__Poly0", ("\230;\143\234\255.H\132KOe7\155\\\023f")); ("Base__Or_error", ("\193\133)\bO\210\2517\168*\203\148\143\200\127\177")); ("Base__Monad_intf", ("\208\203\163\152\184O\130?\012:\168\247}\018\253\155")); ("Base__Monad", ("!\244\168\2352=\137Lm\219\129K\216\199\145\\")); ("Base__Maybe_bound", ("\211{0\211\222\218\143\007\232\138\213\212\228f\247C")); ("Base__Map_intf", ("\165\147vd?\227\030\182nf7\200\220)\180\015")); ("Base__Lazy", ("@`\165\196 \235)\136ANe:p\169$\185")); ("Base__Invariant_intf", ("\213\204\238\235\236[\198\145\028\2392\015\243\177S\249")); ("Base__Invariant", ("\135\153\136\\\129SD\228\202l\255\152\139\253\015\201")); ("Base__Int0", ("N\1310\012\227\254\000\255_\222!\018\016\003\1779")); ("Base__Info_intf", ("\184\209'\173\251\219\167X|v\188]\190o5X")); ("Base__Info", ("-\011\149\203\248\030\2301\1907\1630\189\128\209\170")); ("Base__Indexed_container_intf", ("\179\2213\145j\\\136\tl2\240\006\188j$r")); ("Base__Indexed_container", ("\196\246\213\141\196d\130\002\232\162\144y\149\236\145\218")); ("Base__Import0", ("\156\129U\197Y[\\\153\017Ho\203\173\204\220\020")); ("Base__Import", ("\014\187\247\141\187\181\142g\176:s_,\181\219\209")); ("Base__Hasher", ("\221\138\140\019\232Yk%\201\018\025\140\254\141\254\250")); ("Base__Hash_intf", ("h\004P\218\1531G\127\212\208A\024\140\164iq")); ("Base__Hash", ("\206Rc\194\234{s3\248\165\024\162\203{\206\206")); ("Base__Globalize", ("<\243w~.\180\196t\159\193\174[\227\139\215G")); ("Base__Formatter", ("\193\149\030\140\154\1505b\162a`%\243\185'%")); ("Base__Field", ("8In\234X\202\188G\186\208$\192\175\136\214v")); ("Base__Error", ("\199\218\231n\155/\159\156\146\247\148t\237\003\t\153")); ("Base__Either_intf", ("\198\253n\235\170\"\029\207\169\248\161\226`(6\182")); ("Base__Either0", ("!9-\011n\2077eZ\212\031c\227\029\206\t")); ("Base__Either", ("\011+\000L\150v\2387\\C\181\179\242\251sk")); ("Base__Container_intf", ("\170vo*\208\209\141\219\196\168\236l\016\246\012c")); ("Base__Container", ("\191|>_\153W\235M\180uKz\214w`q")); ("Base__Comparator", ("\002\135z7b\025&\207\t\188\239&U3R\167")); ("Base__Bool0", ("\177f\254p\023\143&\239\020\136\206\242~\018F\251")); ("Base__Binary_searchable_intf", ("/\213\237\209\200\192$w\158\234\169\148\012\221W\019")); ("Base__Binary_searchable", ("V\022B_\233\194\145K\248\233\025\175U\155i\197")); ("Base__Applicative_intf", ("J\176\203\159\235N(\235\027\232\198+\224\205*A")); ("Base__Applicative", ("\157\024\176\241a\165\204\133\003s3\214\007\131\244\n")); ("Base__", ("p\252\007\139\128\163W\025+\0225\001\246|P\158"))], [(0)])

  end

type binary_annots =
    Packed of Types.signature * string list
  | Implementation of Typedtree.structure
  | Interface of Typedtree.signature
  | Partial_implementation of binary_part array
  | Partial_interface of binary_part array
and binary_part =
    Partial_structure of Typedtree.structure
  | Partial_structure_item of Typedtree.structure_item
  | Partial_expression of Typedtree.expression
  | Partial_pattern : 'k Typedtree.pattern_category *
      'k Typedtree.general_pattern -> binary_part
  | Partial_class_expr of Typedtree.class_expr
  | Partial_signature of Typedtree.signature
  | Partial_signature_item of Typedtree.signature_item
  | Partial_module_type of Typedtree.module_type
type cmt_infos = {
  cmt_modname : Misc.modname;
  cmt_annots : binary_annots;
  cmt_value_dependencies :
    (Types.value_description * Types.value_description) list;
  cmt_comments : (string * Location.t) list;
  cmt_args : string array;
  cmt_sourcefile : string option;
  cmt_builddir : string;
  cmt_loadpath : string list;
  cmt_source_digest : string option;
  cmt_initial_env : Env.t;
  cmt_imports : Misc.crcs;
  cmt_interface_digest : Digest.t option;
  cmt_use_summaries : bool;
  cmt_uid_to_loc : Location.t Shape.Uid.Tbl.t;
  cmt_impl_shape : Shape.t option;
}
type error = Not_a_typedtree of string
exception Error of error
val read : string -> Cmi_format.cmi_infos option * cmt_infos option
val read_cmt : string -> cmt_infos
val read_cmi : string -> Cmi_format.cmi_infos
val save_cmt :
  string ->
  string ->
  binary_annots ->
  string option ->
  Env.t -> Cmi_format.cmi_infos option -> Shape.t option -> unit
val read_magic_number : in_channel -> string
val clear : unit -> unit
val add_saved_type : binary_part -> unit
val get_saved_types : unit -> binary_part list
val set_saved_types : binary_part list -> unit
val record_value_dependency :
  ("DEBUG:rule", [Tag1 (("binary_annots", 1143), (0, 0, Tag1 ([(("Packed", 441), ([(Tag3 (Tag1 ((Tag2 ("Types")), "signature"), 0, (0)), 100000000, 0, -96); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -98)], (0)), 100000000, 0, -97)]), 0, (("file_formats/cmt_format.mli", 37, 1727, 1729), ("file_formats/cmt_format.mli", 37, 1727, 1770), 0), 0, Tag1 ("Cmt_format", 6)); (("Implementation", 548), ([(Tag3 (Tag1 ((Tag2 ("Typedtree")), "structure"), 0, (0)), 100000000, 0, -99)]), 0, (("file_formats/cmt_format.mli", 38, 1771, 1773), ("file_formats/cmt_format.mli", 38, 1771, 1802), 0), 0, Tag1 ("Cmt_format", 7)); (("Interface", 549), ([(Tag3 (Tag1 ((Tag2 ("Typedtree")), "signature"), 0, (0)), 100000000, 0, -100)]), 0, (("file_formats/cmt_format.mli", 39, 1803, 1805), ("file_formats/cmt_format.mli", 39, 1803, 1829), 0), 0, Tag1 ("Cmt_format", 8)); (("Partial_implementation", 550), ([(Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("binary_part", 1144)), 0, (0)), 100000000, 0, -102)], (0)), 100000000, 0, -101)]), 0, (("file_formats/cmt_format.mli", 40, 1830, 1832), ("file_formats/cmt_format.mli", 40, 1830, 1877), 0), 0, Tag1 ("Cmt_format", 9)); (("Partial_interface", 551), ([(Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("binary_part", 1144)), 0, (0)), 100000000, 0, -104)], (0)), 100000000, 0, -103)]), 0, (("file_formats/cmt_format.mli", 41, 1878, 1880), ("file_formats/cmt_format.mli", 41, 1878, 1920), 0), 0, Tag1 ("Cmt_format", 10))], 0), 1, 0, 0, 0, 0, 0, (("file_formats/cmt_format.mli", 36, 1706, 1706), ("file_formats/cmt_format.mli", 41, 1878, 1920), 0), 0, 0, 0, Tag1 ("Cmt_format", 3)), 1, 0); Tag1 (("binary_part", 1144), (0, 0, Tag1 ([(("Partial_structure", 552), ([(Tag3 (Tag1 ((Tag2 ("Typedtree")), "structure"), 0, (0)), 100000000, 0, -85)]), 0, (("file_formats/cmt_format.mli", 44, 1940, 1942), ("file_formats/cmt_format.mli", 44, 1940, 1974), 0), 0, Tag1 ("Cmt_format", 11)); (("Partial_structure_item", 553), ([(Tag3 (Tag1 ((Tag2 ("Typedtree")), "structure_item"), 0, (0)), 100000000, 0, -86)]), 0, (("file_formats/cmt_format.mli", 45, 1975, 1977), ("file_formats/cmt_format.mli", 45, 1975, 2019), 0), 0, Tag1 ("Cmt_format", 12)); (("Partial_expression", 554), ([(Tag3 (Tag1 ((Tag2 ("Typedtree")), "expression"), 0, (0)), 100000000, 0, -87)]), 0, (("file_formats/cmt_format.mli", 46, 2020, 2022), ("file_formats/cmt_format.mli", 46, 2020, 2056), 0), 0, Tag1 ("Cmt_format", 13)); (("Partial_pattern", 555), ([(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern_category"), [((("k")), 100000000, 0, -90)], (0)), 100000000, 0, -89); (Tag3 (Tag1 ((Tag2 ("Typedtree")), "general_pattern"), [((("k")), 100000000, 0, -90)], (0)), 100000000, 0, -91)]), ((Tag3 ((("binary_part", 1144)), 0, (0)), 100000000, 0, -88)), (("file_formats/cmt_format.mli", 47, 2057, 2059), ("file_formats/cmt_format.mli", 47, 2057, 2134), 0), 0, Tag1 ("Cmt_format", 14)); (("Partial_class_expr", 556), ([(Tag3 (Tag1 ((Tag2 ("Typedtree")), "class_expr"), 0, (0)), 100000000, 0, -92)]), 0, (("file_formats/cmt_format.mli", 48, 2135, 2137), ("file_formats/cmt_format.mli", 48, 2135, 2171), 0), 0, Tag1 ("Cmt_format", 15)); (("Partial_signature", 557), ([(Tag3 (Tag1 ((Tag2 ("Typedtree")), "signature"), 0, (0)), 100000000, 0, -93)]), 0, (("file_formats/cmt_format.mli", 49, 2172, 2174), ("file_formats/cmt_format.mli", 49, 2172, 2206), 0), 0, Tag1 ("Cmt_format", 16)); (("Partial_signature_item", 558), ([(Tag3 (Tag1 ((Tag2 ("Typedtree")), "signature_item"), 0, (0)), 100000000, 0, -94)]), 0, (("file_formats/cmt_format.mli", 50, 2207, 2209), ("file_formats/cmt_format.mli", 50, 2207, 2251), 0), 0, Tag1 ("Cmt_format", 17)); (("Partial_module_type", 559), ([(Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_type"), 0, (0)), 100000000, 0, -95)]), 0, (("file_formats/cmt_format.mli", 51, 2252, 2254), ("file_formats/cmt_format.mli", 51, 2252, 2290), 0), 0, Tag1 ("Cmt_format", 18))], 0), 1, 0, 0, 0, 0, 0, (("file_formats/cmt_format.mli", 43, 1922, 1922), ("file_formats/cmt_format.mli", 51, 2252, 2290), 0), 0, 0, 0, Tag1 ("Cmt_format", 4)), 2, 0); Tag1 (("cmt_infos", 1145), (0, 0, [[(("cmt_modname", 561), 0, (Tag3 (Tag1 ((Tag2 ("Misc")), "modname"), 0, (0)), 100000000, 0, -57), (("file_formats/cmt_format.mli", 54, 2311, 2313), ("file_formats/cmt_format.mli", 54, 2311, 2335), 0), 0, Tag1 ("Cmt_format", 21)); (("cmt_annots", 562), 0, (Tag3 ((("binary_annots", 1143)), 0, (0)), 100000000, 0, -58), (("file_formats/cmt_format.mli", 55, 2336, 2338), ("file_formats/cmt_format.mli", 55, 2336, 2365), 0), 0, Tag1 ("Cmt_format", 22)); (("cmt_value_dependencies", 563), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Types")), "value_description"), 0, (0)), 100000000, 0, -61); (Tag3 (Tag1 ((Tag2 ("Types")), "value_description"), 0, (0)), 100000000, 0, -62)]), 100000000, 0, -60)], (0)), 100000000, 0, -59), (("file_formats/cmt_format.mli", 56, 2366, 2368), ("file_formats/cmt_format.mli", 57, 2393, 2454), 0), 0, Tag1 ("Cmt_format", 23)); (("cmt_comments", 630), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -65); (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -66)]), 100000000, 0, -64)], (0)), 100000000, 0, -63), (("file_formats/cmt_format.mli", 58, 2455, 2457), ("file_formats/cmt_format.mli", 58, 2455, 2499), 0), 0, Tag1 ("Cmt_format", 24)); (("cmt_args", 631), 0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -68)], (0)), 100000000, 0, -67), (("file_formats/cmt_format.mli", 59, 2500, 2502), ("file_formats/cmt_format.mli", 59, 2500, 2526), 0), 0, Tag1 ("Cmt_format", 25)); (("cmt_sourcefile", 632), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -70)], (0)), 100000000, 0, -69), (("file_formats/cmt_format.mli", 60, 2527, 2529), ("file_formats/cmt_format.mli", 60, 2527, 2560), 0), 0, Tag1 ("Cmt_format", 26)); (("cmt_builddir", 633), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -71), (("file_formats/cmt_format.mli", 61, 2561, 2563), ("file_formats/cmt_format.mli", 61, 2561, 2585), 0), 0, Tag1 ("Cmt_format", 27)); (("cmt_loadpath", 634), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -73)], (0)), 100000000, 0, -72), (("file_formats/cmt_format.mli", 62, 2586, 2588), ("file_formats/cmt_format.mli", 62, 2586, 2615), 0), 0, Tag1 ("Cmt_format", 28)); (("cmt_source_digest", 635), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -75)], (0)), 100000000, 0, -74), (("file_formats/cmt_format.mli", 63, 2616, 2618), ("file_formats/cmt_format.mli", 63, 2616, 2652), 0), 0, Tag1 ("Cmt_format", 29)); (("cmt_initial_env", 804), 0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -76), (("file_formats/cmt_format.mli", 64, 2653, 2655), ("file_formats/cmt_format.mli", 64, 2653, 2679), 0), 0, Tag1 ("Cmt_format", 30)); (("cmt_imports", 805), 0, (Tag3 (Tag1 ((Tag2 ("Misc")), "crcs"), 0, (0)), 100000000, 0, -77), (("file_formats/cmt_format.mli", 65, 2680, 2682), ("file_formats/cmt_format.mli", 65, 2680, 2701), 0), 0, Tag1 ("Cmt_format", 31)); (("cmt_interface_digest", 819), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Digest"), "t"), 0, (0)), 100000000, 0, -79)], (0)), 100000000, 0, -78), (("file_formats/cmt_format.mli", 66, 2702, 2704), ("file_formats/cmt_format.mli", 66, 2702, 2743), 0), 0, Tag1 ("Cmt_format", 32)); (("cmt_use_summaries", 820), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -80), (("file_formats/cmt_format.mli", 67, 2744, 2746), ("file_formats/cmt_format.mli", 67, 2744, 2771), 0), 0, Tag1 ("Cmt_format", 33)); (("cmt_uid_to_loc", 893), 0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Shape")), "Uid"), "Tbl"), "t"), [(Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -82)], (0)), 100000000, 0, -81), (("file_formats/cmt_format.mli", 68, 2772, 2774), ("file_formats/cmt_format.mli", 68, 2772, 2818), 0), 0, Tag1 ("Cmt_format", 34)); (("cmt_impl_shape", 894), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Shape")), "t"), 0, (0)), 100000000, 0, -84)], (0)), 100000000, 0, -83), (("file_formats/cmt_format.mli", 69, 2819, 2821), ("file_formats/cmt_format.mli", 69, 2819, 2853), 0), 0, Tag1 ("Cmt_format", 35))]], 1, 0, 0, 0, 0, 0, (("file_formats/cmt_format.mli", 53, 2292, 2292), ("file_formats/cmt_format.mli", 70, 2873, 2874), 0), 0, 0, 0, Tag1 ("Cmt_format", 19)), 1, 0); Tag1 (("error", 1146), (0, 0, Tag1 ([(("Not_a_typedtree", 1123), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -56)]), 0, (("file_formats/cmt_format.mli", 73, 2889, 2893), ("file_formats/cmt_format.mli", 73, 2889, 2918), 0), 0, Tag1 ("Cmt_format", 37))], 0), 1, 0, 0, 0, 0, 0, (("file_formats/cmt_format.mli", 72, 2876, 2876), ("file_formats/cmt_format.mli", 73, 2889, 2918), 0), 0, 0, 1, Tag1 ("Cmt_format", 36)), 1, 0); Tag2 (("Error", 1147), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((("error", 1146)), 0, (0)), 100000000, 0, -55)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Cmt_format", 38)), 2, 0); (("read", 1148), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -54), (Tag2 ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Cmi_format")), "cmi_infos"), 0, (0)), 100000000, 0, -51)], (0)), 100000000, 0, -50); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("cmt_infos", 1145)), 0, (0)), 100000000, 0, -53)], (0)), 100000000, 0, -52)]), 100000000, 0, -49), 0), 100000000, 0, -48), 0, (("file_formats/cmt_format.mli", 85, 3287, 3287), ("file_formats/cmt_format.mli", 85, 3287, 3354), 0), 0, Tag1 ("Cmt_format", 39)), 0); (("read_cmt", 1149), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -47), (Tag3 ((("cmt_infos", 1145)), 0, (0)), 100000000, 0, -46), 0), 100000000, 0, -45), 0, (("file_formats/cmt_format.mli", 87, 3356, 3356), ("file_formats/cmt_format.mli", 87, 3356, 3390), 0), 0, Tag1 ("Cmt_format", 40)), 0); (("read_cmi", 1150), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -44), (Tag3 (Tag1 ((Tag2 ("Cmi_format")), "cmi_infos"), 0, (0)), 100000000, 0, -43), 0), 100000000, 0, -42), 0, (("file_formats/cmt_format.mli", 88, 3391, 3391), ("file_formats/cmt_format.mli", 88, 3391, 3436), 0), 0, Tag1 ("Cmt_format", 41)), 0); (("save_cmt", 1151), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -41), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -40), (Tag1 (0, (Tag3 ((("binary_annots", 1143)), 0, (0)), 100000000, 0, -39), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -38)], (0)), 100000000, 0, -37), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -36), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Cmi_format")), "cmi_infos"), 0, (0)), 100000000, 0, -35)], (0)), 100000000, 0, -34), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Shape")), "t"), 0, (0)), 100000000, 0, -33)], (0)), 100000000, 0, -32), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -31), 0), 100000000, 0, -30), 0), 100000000, 0, -29), 0), 100000000, 0, -28), 0), 100000000, 0, -27), 0), 100000000, 0, -26), 0), 100000000, 0, -25), 0), 100000000, 0, -24), 0, (("file_formats/cmt_format.mli", 92, 3541, 3541), ("file_formats/cmt_format.mli", 100, 3800, 3806), 0), 0, Tag1 ("Cmt_format", 42)), 0); (("read_magic_number", 1152), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "in_channel"), 0, (0)), 100000000, 0, -23), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0, (("file_formats/cmt_format.mli", 104, 3839, 3839), ("file_formats/cmt_format.mli", 104, 3839, 3883), 0), 0, Tag1 ("Cmt_format", 43)), 0); (("clear", 1153), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -20), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -19), 0), 100000000, 0, -18), 0, (("file_formats/cmt_format.mli", 106, 3885, 3885), ("file_formats/cmt_format.mli", 106, 3885, 3908), 0), 0, Tag1 ("Cmt_format", 44)), 0); (("add_saved_type", 1154), ((Tag1 (0, (Tag3 ((("binary_part", 1144)), 0, (0)), 100000000, 0, -17), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -16), 0), 100000000, 0, -15), 0, (("file_formats/cmt_format.mli", 108, 3910, 3910), ("file_formats/cmt_format.mli", 108, 3910, 3950), 0), 0, Tag1 ("Cmt_format", 45)), 0); (("get_saved_types", 1155), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -14), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("binary_part", 1144)), 0, (0)), 100000000, 0, -13)], (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("file_formats/cmt_format.mli", 109, 3951, 3951), ("file_formats/cmt_format.mli", 109, 3951, 3997), 0), 0, Tag1 ("Cmt_format", 46)), 0); (("set_saved_types", 1156), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("binary_part", 1144)), 0, (0)), 100000000, 0, -10)], (0)), 100000000, 0, -9), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8), 0), 100000000, 0, -7), 0, (("file_formats/cmt_format.mli", 110, 3998, 3998), ("file_formats/cmt_format.mli", 110, 3998, 4044), 0), 0, Tag1 ("Cmt_format", 47)), 0); (("record_value_dependency", 1157), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "value_description"), 0, (0)), 100000000, 0, -6), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "value_description"), 0, (0)), 100000000, 0, -5), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("file_formats/cmt_format.mli", 112, 4046, 4046), ("file_formats/cmt_format.mli", 113, 4075, 4135), 0), 0, Tag1 ("Cmt_format", 48)), 0)], "Cmt_format", [("Cmt_format", ("QJ:!\176\128(\204\251s\181d'\n\185\158")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Types", ("\177\238\029.\220\006\163!\230\015\006\182\133\155\194\166")); ("Typedtree", ("c5z\186\175w\146\254\018V\184\031\0038\004\227")); ("Type_immediacy", ("\"\127k\011Q\241\211\138\193;8\142\129\141#\251")); ("Subst", ("\021\031\148\223\127\186\189\135\027}\145r\216\143\177\156")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shape", ("\235\127Y\213\025\137=\244\218\181\248N\189\188\216p")); ("Primitive", ("}Shh\162\015|\220A\203\249\232\245G\213\019")); ("Path", ("\012\183\178\025\1298\228*\021r\185\160Y\252\n\026")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Outcometree", ("9\021%\234\211\206\210\004H\165\208\2014\234Q\142")); ("Misc", ("*\026\026\234c\191\131\161\\\203\183\012O\252\153\198")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Load_path", ("\012@\228l\230\164S\172h\1726X\020\252o}")); ("Identifiable", ("\004F\207\014\158GU\001\184\214\187%/#;\211")); ("Ident", ("\b9;!\187.\220\163(x\b\174\\\223\020\004")); ("Env", ("\021\n\181\142x\b\169j\227\"\017\248*\178\245\223")); ("Cmi_format", ("6\177\bU\139\"\023\152=\249\135\174\b\011Cg")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Build_path_prefix_map", ("y\028\167\207D\220\198\216\011\208\172\149\2416\bc")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216"))], [(0)])
Types.value_description -> Types.value_description -> unit

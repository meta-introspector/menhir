module Big_int :
  sig
    type big_int = Big_int.big_int
    val zero_big_int : big_int
    val unit_big_int : big_int
    val minus_big_int : big_int -> big_int
    val abs_big_int : big_int -> big_int
    val add_big_int : big_int -> big_int -> big_int
    val succ_big_int : big_int -> big_int
    val add_int_big_int : int -> big_int -> big_int
    val sub_big_int : big_int -> big_int -> big_int
    val pred_big_int : big_int -> big_int
    val mult_big_int : big_int -> big_int -> big_int
    val mult_int_big_int : int -> big_int -> big_int
    val square_big_int : big_int -> big_int
    val sqrt_big_int : big_int -> big_int
    val quomod_big_int : big_int -> big_int -> big_int * big_int
    val div_big_int : big_int -> big_int -> big_int
    val mod_big_int : big_int -> big_int -> big_int
    val gcd_big_int : big_int -> big_int -> big_int
    val power_int_positive_int : int -> int -> big_int
    val power_big_int_positive_int : big_int -> int -> big_int
    val power_int_positive_big_int : int -> big_int -> big_int
    val power_big_int_positive_big_int : big_int -> big_int -> big_int
    val sign_big_int : big_int -> int
    val compare_big_int : big_int -> big_int -> int
    val eq_big_int : big_int -> big_int -> bool
    val le_big_int : big_int -> big_int -> bool
    val ge_big_int : big_int -> big_int -> bool
    val lt_big_int : big_int -> big_int -> bool
    val gt_big_int : big_int -> big_int -> bool
    val max_big_int : big_int -> big_int -> big_int
    val min_big_int : big_int -> big_int -> big_int
    val num_digits_big_int : big_int -> int
    val num_bits_big_int : big_int -> int
    val string_of_big_int : big_int -> string
    val big_int_of_string : string -> big_int
    val big_int_of_string_opt : string -> big_int option
    val big_int_of_int : int -> big_int
    val is_int_big_int : big_int -> bool
    val int_of_big_int : big_int -> int
    val int_of_big_int_opt : big_int -> int option
    val big_int_of_int32 : int32 -> big_int
    val big_int_of_nativeint : nativeint -> big_int
    val big_int_of_int64 : int64 -> big_int
    val int32_of_big_int : big_int -> int32
    val int32_of_big_int_opt : big_int -> int32 option
    val nativeint_of_big_int : big_int -> nativeint
    val nativeint_of_big_int_opt : big_int -> nativeint option
    val int64_of_big_int : big_int -> int64
    val int64_of_big_int_opt : big_int -> int64 option
    val float_of_big_int : big_int -> float
    val and_big_int : big_int -> big_int -> big_int
    val or_big_int : big_int -> big_int -> big_int
    val xor_big_int : big_int -> big_int -> big_int
    val shift_left_big_int : big_int -> int -> big_int
    val shift_right_big_int : big_int -> int -> big_int
    val shift_right_towards_zero_big_int : big_int -> int -> big_int
    val extract_big_int : big_int -> int -> int -> big_int
    val nat_of_big_int : big_int -> Nat.nat
    val big_int_of_nat : Nat.nat -> big_int
    val base_power_big_int : int -> int -> big_int -> big_int
    val sys_big_int_of_string : string -> int -> int -> big_int
    val round_futur_last_digit : bytes -> int -> int -> bool
    val approx_big_int : int -> big_int -> string
    val round_big_int_to_float : big_int -> bool -> float
    val sexp_of_big_int : Big_int.big_int -> Sexplib.Sexp.t
    val big_int_of_sexp : Sexplib.Sexp.t -> Big_int.big_int
  end
module Nat :
  sig
    type nat = Nat.nat
    external create_nat : int -> nat = "create_nat"
    val make_nat : int -> nat
    external set_to_zero_nat : nat -> int -> int -> unit = "set_to_zero_nat"
    external blit_nat : nat -> int -> nat -> int -> int -> unit = "blit_nat"
    val copy_nat : nat -> int -> int -> nat
    external set_digit_nat : nat -> int -> int -> unit = "set_digit_nat"
    external nth_digit_nat : nat -> int -> int = "nth_digit_nat"
    external set_digit_nat_native : nat -> int -> nativeint -> unit
      = "set_digit_nat_native"
    external nth_digit_nat_native : nat -> int -> nativeint
      = "nth_digit_nat_native"
    val length_nat : nat -> int
    external num_digits_nat : nat -> int -> int -> int = "num_digits_nat"
    external num_leading_zero_bits_in_digit : nat -> int -> int
      = "num_leading_zero_bits_in_digit"
    external is_digit_int : nat -> int -> bool = "is_digit_int"
    external is_digit_zero : nat -> int -> bool = "is_digit_zero"
    external is_digit_normalized : nat -> int -> bool = "is_digit_normalized"
    external is_digit_odd : nat -> int -> bool = "is_digit_odd"
    val is_zero_nat : nat -> int -> int -> bool
    val is_nat_int : nat -> int -> int -> bool
    val int_of_nat : nat -> int
    val nat_of_int : int -> nat
    external incr_nat : nat -> int -> int -> int -> int = "incr_nat"
    external add_nat : nat -> int -> int -> nat -> int -> int -> int -> int
      = "add_nat" "add_nat_native"
    external complement_nat : nat -> int -> int -> unit = "complement_nat"
    external decr_nat : nat -> int -> int -> int -> int = "decr_nat"
    external sub_nat : nat -> int -> int -> nat -> int -> int -> int -> int
      = "sub_nat" "sub_nat_native"
    external mult_digit_nat :
      nat -> int -> int -> nat -> int -> int -> nat -> int -> int
      = "mult_digit_nat" "mult_digit_nat_native"
    external mult_nat :
      nat -> int -> int -> nat -> int -> int -> nat -> int -> int -> int
      = "mult_nat" "mult_nat_native"
    external square_nat : nat -> int -> int -> nat -> int -> int -> int
      = "square_nat" "square_nat_native"
    external shift_left_nat : nat -> int -> int -> nat -> int -> int -> unit
      = "shift_left_nat" "shift_left_nat_native"
    external div_digit_nat :
      nat -> int -> nat -> int -> nat -> int -> int -> nat -> int -> unit
      = "div_digit_nat" "div_digit_nat_native"
    external div_nat : nat -> int -> int -> nat -> int -> int -> unit
      = "div_nat" "div_nat_native"
    external shift_right_nat : nat -> int -> int -> nat -> int -> int -> unit
      = "shift_right_nat" "shift_right_nat_native"
    external compare_digits_nat : nat -> int -> nat -> int -> int
      = "compare_digits_nat"
    external compare_nat : nat -> int -> int -> nat -> int -> int -> int
      = "compare_nat" "compare_nat_native"
    val eq_nat : nat -> int -> int -> nat -> int -> int -> bool
    val le_nat : nat -> int -> int -> nat -> int -> int -> bool
    val lt_nat : nat -> int -> int -> nat -> int -> int -> bool
    val ge_nat : nat -> int -> int -> nat -> int -> int -> bool
    val gt_nat : nat -> int -> int -> nat -> int -> int -> bool
    external land_digit_nat : nat -> int -> nat -> int -> unit
      = "land_digit_nat"
    external lor_digit_nat : nat -> int -> nat -> int -> unit
      = "lor_digit_nat"
    external lxor_digit_nat : nat -> int -> nat -> int -> unit
      = "lxor_digit_nat"
    val gcd_nat : nat -> int -> int -> nat -> int -> int -> int
    val sqrt_nat : nat -> int -> int -> nat
    val string_of_nat : nat -> string
    val nat_of_string : string -> nat
    val sys_nat_of_string : int -> string -> int -> int -> nat
    val float_of_nat : nat -> float
    val make_power_base : int -> nat -> int * int
    val power_base_int : int -> int -> nat
    val length_of_digit : int
    val sexp_of_nat : Nat.nat -> Sexplib.Sexp.t
    val nat_of_sexp : Sexplib.Sexp.t -> Nat.nat
  end
module Ratio :
  sig
    type ratio = Ratio.ratio
    val null_denominator : ratio -> bool
    val numerator_ratio : ratio -> Big_int.big_int
    val denominator_ratio : ratio -> Big_int.big_int
    val sign_ratio : ratio -> int
    val normalize_ratio : ratio -> ratio
    val cautious_normalize_ratio : ratio -> ratio
    val cautious_normalize_ratio_when_printing : ratio -> ratio
    val create_ratio : Big_int.big_int -> Big_int.big_int -> ratio
    val create_normalized_ratio : Big_int.big_int -> Big_int.big_int -> ratio
    val is_normalized_ratio : ratio -> bool
    val report_sign_ratio : ratio -> Big_int.big_int -> Big_int.big_int
    val abs_ratio : ratio -> ratio
    val is_integer_ratio : ratio -> bool
    val add_ratio : ratio -> ratio -> ratio
    val minus_ratio : ratio -> ratio
    val add_int_ratio : int -> ratio -> ratio
    val add_big_int_ratio : Big_int.big_int -> ratio -> ratio
    val sub_ratio : ratio -> ratio -> ratio
    val mult_ratio : ratio -> ratio -> ratio
    val mult_int_ratio : int -> ratio -> ratio
    val mult_big_int_ratio : Big_int.big_int -> ratio -> ratio
    val square_ratio : ratio -> ratio
    val inverse_ratio : ratio -> ratio
    val div_ratio : ratio -> ratio -> ratio
    val integer_ratio : ratio -> Big_int.big_int
    val floor_ratio : ratio -> Big_int.big_int
    val round_ratio : ratio -> Big_int.big_int
    val ceiling_ratio : ratio -> Big_int.big_int
    val eq_ratio : ratio -> ratio -> bool
    val compare_ratio : ratio -> ratio -> int
    val lt_ratio : ratio -> ratio -> bool
    val le_ratio : ratio -> ratio -> bool
    val gt_ratio : ratio -> ratio -> bool
    val ge_ratio : ratio -> ratio -> bool
    val max_ratio : ratio -> ratio -> ratio
    val min_ratio : ratio -> ratio -> ratio
    val eq_big_int_ratio : Big_int.big_int -> ratio -> bool
    val compare_big_int_ratio : Big_int.big_int -> ratio -> int
    val lt_big_int_ratio : Big_int.big_int -> ratio -> bool
    val le_big_int_ratio : Big_int.big_int -> ratio -> bool
    val gt_big_int_ratio : Big_int.big_int -> ratio -> bool
    val ge_big_int_ratio : Big_int.big_int -> ratio -> bool
    val int_of_ratio : ratio -> int
    val ratio_of_int : int -> ratio
    val ratio_of_nat : Nat.nat -> ratio
    val nat_of_ratio : ratio -> Nat.nat
    val ratio_of_big_int : Big_int.big_int -> ratio
    val big_int_of_ratio : ratio -> Big_int.big_int
    val div_int_ratio : int -> ratio -> ratio
    val div_ratio_int : ratio -> int -> ratio
    val div_big_int_ratio : Big_int.big_int -> ratio -> ratio
    val div_ratio_big_int : ratio -> Big_int.big_int -> ratio
    val approx_ratio_fix : int -> ratio -> string
    val approx_ratio_exp : int -> ratio -> string
    val float_of_rational_string : ratio -> string
    val string_of_ratio : ratio -> string
    val ratio_of_string : string -> ratio
    val float_of_ratio : ratio -> float
    val power_ratio_positive_int : ratio -> int -> ratio
    val power_ratio_positive_big_int : ratio -> Big_int.big_int -> ratio
    val sexp_of_ratio : Ratio.ratio -> Sexplib.Sexp.t
    val ratio_of_sexp : Sexplib.Sexp.t -> Ratio.ratio
  end
module Num :
  sig
    type num =
      Num.num =
        Int of int
      | Big_int of Big_int.big_int
      | Ratio of Ratio.ratio
    val ( +/ ) : num -> num -> num
    val add_num : num -> num -> num
    val minus_num : num -> num
    val ( -/ ) : num -> num -> num
    val sub_num : num -> num -> num
    val ( */ ) : num -> num -> num
    val mult_num : num -> num -> num
    val square_num : num -> num
    val ( // ) : num -> num -> num
    val div_num : num -> num -> num
    val quo_num : num -> num -> num
    val mod_num : num -> num -> num
    val ( **/ ) : num -> num -> num
    val power_num : num -> num -> num
    val abs_num : num -> num
    val succ_num : num -> num
    val pred_num : num -> num
    val incr_num : num ref -> unit
    val decr_num : num ref -> unit
    val is_integer_num : num -> bool
    val integer_num : num -> num
    val floor_num : num -> num
    val round_num : num -> num
    val ceiling_num : num -> num
    val sign_num : num -> int
    val ( =/ ) : num -> num -> bool
    val ( </ ) : num -> num -> bool
    val ( >/ ) : num -> num -> bool
    val ( <=/ ) : num -> num -> bool
    val ( >=/ ) : num -> num -> bool
    val ( <>/ ) : num -> num -> bool
    val eq_num : num -> num -> bool
    val lt_num : num -> num -> bool
    val le_num : num -> num -> bool
    val gt_num : num -> num -> bool
    val ge_num : num -> num -> bool
    val compare_num : num -> num -> int
    val max_num : num -> num -> num
    val min_num : num -> num -> num
    val string_of_num : num -> string
    val approx_num_fix : int -> num -> string
    val approx_num_exp : int -> num -> string
    val num_of_string : string -> num
    val num_of_string_opt : string -> num option
    val int_of_num : num -> int
    val int_of_num_opt : num -> int option
    val num_of_int : int -> num
    val nat_of_num : num -> Nat.nat
    val nat_of_num_opt : num -> Nat.nat option
    val num_of_nat : Nat.nat -> num
    val num_of_big_int : Big_int.big_int -> num
    val big_int_of_num : num -> Big_int.big_int
    val big_int_of_num_opt : num -> Big_int.big_int option
    val ratio_of_num : num -> Ratio.ratio
    val num_of_ratio : Ratio.ratio -> num
    val float_of_num : num -> float
    val sexp_of_num : Num.num -> Sexplib.Sexp.t
    val num_of_sexp : Sexplib.Sexp.t -> Num.num("DEBUG:rule", [Tag3 (("Big_int", 993), 0, (Tag1 ([Tag1 (("big_int", 997), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -274)), 0, 0, 0, 0, (("big_int.mli", 23, 1214, 1214), ("big_int.mli", 23, 1214, 1226), 0), 0, 0, 0, Tag1 ("Big_int", 0)), 1, 0); (("zero_big_int", 998), ((Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -273), 0, (("big_int.mli", 26, 1269, 1269), ("big_int.mli", 26, 1269, 1295), 0), 0, Tag1 ("Big_int", 1)), 0); (("unit_big_int", 999), ((Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -272), 0, (("big_int.mli", 29, 1325, 1325), ("big_int.mli", 29, 1325, 1351), 0), 0, Tag1 ("Big_int", 2)), 0); (("minus_big_int", 1000), ((Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -271), (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -270), 0), 100000000, 0, -269), 0, (("big_int.mli", 34, 1423, 1423), ("big_int.mli", 34, 1423, 1461), 0), 0, Tag1 ("Big_int", 3)), 0); (("abs_big_int", 1001), ((Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -268), (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -267), 0), 100000000, 0, -266), 0, (("big_int.mli", 37, 1486, 1486), ("big_int.mli", 37, 1486, 1522), 0), 0, Tag1 ("Big_int", 4)), 0); (("add_big_int", 1002), ((Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -265), (Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -264), (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -263), 0), 100000000, 0, -262), 0), 100000000, 0, -261), 0, (("big_int.mli", 40, 1547, 1547), ("big_int.mli", 40, 1547, 1594), 0), 0, Tag1 ("Big_int", 5)), 0); (("succ_big_int", 1003), ((Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -260), (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -259), 0), 100000000, 0, -258), 0, (("big_int.mli", 43, 1613, 1613), ("big_int.mli", 43, 1613, 1650), 0), 0, Tag1 ("Big_int", 6)), 0); (("add_int_big_int", 1004), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -257), (Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -256), (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -255), 0), 100000000, 0, -254), 0), 100000000, 0, -253), 0, (("big_int.mli", 46, 1678, 1678), ("big_int.mli", 46, 1678, 1725), 0), 0, Tag1 ("Big_int", 7)), 0); (("sub_big_int", 1005), ((Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -252), (Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -251), (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -250), 0), 100000000, 0, -249), 0), 100000000, 0, -248), 0, (("big_int.mli", 49, 1780, 1780), ("big_int.mli", 49, 1780, 1827), 0), 0, Tag1 ("Big_int", 8)), 0); (("pred_big_int", 1006), ((Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -247), (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -246), 0), 100000000, 0, -245), 0, (("big_int.mli", 52, 1849, 1849), ("big_int.mli", 52, 1849, 1886), 0), 0, Tag1 ("Big_int", 9)), 0); (("mult_big_int", 1007), ((Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -244), (Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -243), (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -242), 0), 100000000, 0, -241), 0), 100000000, 0, -240), 0, (("big_int.mli", 55, 1921, 1921), ("big_int.mli", 55, 1921, 1969), 0), 0, Tag1 ("Big_int", 10)), 0); (("mult_int_big_int", 1008), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -239), (Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -238), (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -237), 0), 100000000, 0, -236), 0), 100000000, 0, -235), 0, (("big_int.mli", 58, 2014, 2014), ("big_int.mli", 58, 2014, 2062), 0), 0, Tag1 ("Big_int", 11)), 0); (("square_big_int", 1009), ((Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -234), (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -233), 0), 100000000, 0, -232), 0, (("big_int.mli", 61, 2122, 2122), ("big_int.mli", 61, 2122, 2160), 0), 0, Tag1 ("Big_int", 12)), 0); (("sqrt_big_int", 1010), ((Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -231), (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -230), 0), 100000000, 0, -229), 0, (("big_int.mli", 64, 2212, 2212), ("big_int.mli", 64, 2212, 2248), 0), 0, Tag1 ("Big_int", 13)), 0); (("quomod_big_int", 1011), ((Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -228), (Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -227), (Tag2 ([(Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -225); (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -226)]), 100000000, 0, -224), 0), 100000000, 0, -223), 0), 100000000, 0, -222), 0, (("big_int.mli", 69, 2451, 2451), ("big_int.mli", 69, 2451, 2511), 0), 0, Tag1 ("Big_int", 14)), 0); (("div_big_int", 1012), ((Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -221), (Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -220), (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -219), 0), 100000000, 0, -218), 0), 100000000, 0, -217), 0, (("big_int.mli", 77, 2835, 2835), ("big_int.mli", 77, 2835, 2882), 0), 0, Tag1 ("Big_int", 15)), 0); (("mod_big_int", 1013), ((Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -216), (Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -215), (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -214), 0), 100000000, 0, -213), 0), 100000000, 0, -212), 0, (("big_int.mli", 81, 3013, 3013), ("big_int.mli", 81, 3013, 3060), 0), 0, Tag1 ("Big_int", 16)), 0); (("gcd_big_int", 1014), ((Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -211), (Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -210), (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -209), 0), 100000000, 0, -208), 0), 100000000, 0, -207), 0, (("big_int.mli", 85, 3191, 3191), ("big_int.mli", 85, 3191, 3238), 0), 0, Tag1 ("Big_int", 17)), 0); (("power_int_positive_int", 1015), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -206), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -205), (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -204), 0), 100000000, 0, -203), 0), 100000000, 0, -202), 0, (("big_int.mli", 88, 3292, 3292), ("big_int.mli", 88, 3292, 3341), 0), 0, Tag1 ("Big_int", 18)), 0); (("power_big_int_positive_int", 1016), ((Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -201), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -200), (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -199), 0), 100000000, 0, -198), 0), 100000000, 0, -197), 0, (("big_int.mli", 89, 3342, 3342), ("big_int.mli", 89, 3342, 3399), 0), 0, Tag1 ("Big_int", 19)), 0); (("power_int_positive_big_int", 1017), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -196), (Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -195), (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -194), 0), 100000000, 0, -193), 0), 100000000, 0, -192), 0, (("big_int.mli", 90, 3400, 3400), ("big_int.mli", 90, 3400, 3457), 0), 0, Tag1 ("Big_int", 20)), 0); (("power_big_int_positive_big_int", 1018), ((Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -191), (Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -190), (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -189), 0), 100000000, 0, -188), 0), 100000000, 0, -187), 0, (("big_int.mli", 91, 3458, 3458), ("big_int.mli", 91, 3458, 3523), 0), 0, Tag1 ("Big_int", 21)), 0); (("sign_big_int", 1019), ((Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -186), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -185), 0), 100000000, 0, -184), 0, (("big_int.mli", 100, 3883, 3883), ("big_int.mli", 100, 3883, 3916), 0), 0, Tag1 ("Big_int", 22)), 0); (("compare_big_int", 1020), ((Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -183), (Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -182), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -181), 0), 100000000, 0, -180), 0), 100000000, 0, -179), 0, (("big_int.mli", 104, 4041, 4041), ("big_int.mli", 104, 4041, 4088), 0), 0, Tag1 ("Big_int", 23)), 0); (("eq_big_int", 1021), ((Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -178), (Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -177), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -176), 0), 100000000, 0, -175), 0), 100000000, 0, -174), 0, (("big_int.mli", 109, 4257, 4257), ("big_int.mli", 109, 4257, 4300), 0), 0, Tag1 ("Big_int", 24)), 0); (("le_big_int", 1022), ((Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -173), (Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -172), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -171), 0), 100000000, 0, -170), 0), 100000000, 0, -169), 0, (("big_int.mli", 110, 4301, 4301), ("big_int.mli", 110, 4301, 4344), 0), 0, Tag1 ("Big_int", 25)), 0); (("ge_big_int", 1023), ((Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -168), (Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -167), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -166), 0), 100000000, 0, -165), 0), 100000000, 0, -164), 0, (("big_int.mli", 111, 4345, 4345), ("big_int.mli", 111, 4345, 4388), 0), 0, Tag1 ("Big_int", 26)), 0); (("lt_big_int", 1024), ((Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -163), (Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -162), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -161), 0), 100000000, 0, -160), 0), 100000000, 0, -159), 0, (("big_int.mli", 112, 4389, 4389), ("big_int.mli", 112, 4389, 4432), 0), 0, Tag1 ("Big_int", 27)), 0); (("gt_big_int", 1025), ((Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -158), (Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -157), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -156), 0), 100000000, 0, -155), 0), 100000000, 0, -154), 0, (("big_int.mli", 113, 4433, 4433), ("big_int.mli", 113, 4433, 4476), 0), 0, Tag1 ("Big_int", 28)), 0); (("max_big_int", 1026), ((Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -153), (Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -152), (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -151), 0), 100000000, 0, -150), 0), 100000000, 0, -149), 0, (("big_int.mli", 116, 4537, 4537), ("big_int.mli", 116, 4537, 4584), 0), 0, Tag1 ("Big_int", 29)), 0); (("min_big_int", 1027), ((Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -148), (Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -147), (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -146), 0), 100000000, 0, -145), 0), 100000000, 0, -144), 0, (("big_int.mli", 119, 4634, 4634), ("big_int.mli", 119, 4634, 4681), 0), 0, Tag1 ("Big_int", 30)), 0); (("num_digits_big_int", 1028), ((Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -143), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -142), 0), 100000000, 0, -141), 0, (("big_int.mli", 122, 4731, 4731), ("big_int.mli", 122, 4731, 4770), 0), 0, Tag1 ("Big_int", 31)), 0); (("num_bits_big_int", 1029), ((Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -140), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -139), 0), 100000000, 0, -138), 0, (("big_int.mli", 126, 4872, 4872), ("big_int.mli", 126, 4872, 4909), 0), 0, Tag1 ("Big_int", 32)), 0); (("string_of_big_int", 1030), ((Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -137), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -136), 0), 100000000, 0, -135), 0, (("big_int.mli", 136, 5242, 5242), ("big_int.mli", 136, 5242, 5283), 0), 0, Tag1 ("Big_int", 33)), 0); (("big_int_of_string", 1031), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -134), (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -133), 0), 100000000, 0, -132), 0, (("big_int.mli", 140, 5393, 5393), ("big_int.mli", 140, 5393, 5434), 0), 0, Tag1 ("Big_int", 34)), 0); (("big_int_of_string_opt", 1032), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -131), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -130)], (0)), 100000000, 0, -129), 0), 100000000, 0, -128), 0, (("big_int.mli", 146, 5653, 5653), ("big_int.mli", 146, 5653, 5704), 0), 0, Tag1 ("Big_int", 35)), 0); (("big_int_of_int", 1033), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -127), (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -126), 0), 100000000, 0, -125), 0, (("big_int.mli", 157, 5977, 5977), ("big_int.mli", 157, 5977, 6012), 0), 0, Tag1 ("Big_int", 36)), 0); (("is_int_big_int", 1034), ((Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -124), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -123), 0), 100000000, 0, -122), 0, (("big_int.mli", 160, 6063, 6063), ("big_int.mli", 160, 6063, 6099), 0), 0, Tag1 ("Big_int", 37)), 0); (("int_of_big_int", 1035), ((Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -121), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -120), 0), 100000000, 0, -119), 0, (("big_int.mli", 169, 6530, 6530), ("big_int.mli", 169, 6530, 6565), 0), 0, Tag1 ("Big_int", 38)), 0); (("int_of_big_int_opt", 1036), ((Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -118), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -117)], (0)), 100000000, 0, -116), 0), 100000000, 0, -115), 0, (("big_int.mli", 174, 6753, 6753), ("big_int.mli", 174, 6753, 6798), 0), 0, Tag1 ("Big_int", 39)), 0); (("big_int_of_int32", 1037), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -114), (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -113), 0), 100000000, 0, -112), 0, (("big_int.mli", 181, 6961, 6961), ("big_int.mli", 181, 6961, 7000), 0), 0, Tag1 ("Big_int", 40)), 0); (("big_int_of_nativeint", 1038), ((Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -111), (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -110), 0), 100000000, 0, -109), 0, (("big_int.mli", 184, 7052, 7052), ("big_int.mli", 184, 7052, 7099), 0), 0, Tag1 ("Big_int", 41)), 0); (("big_int_of_int64", 1039), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -108), (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -107), 0), 100000000, 0, -106), 0, (("big_int.mli", 187, 7151, 7151), ("big_int.mli", 187, 7151, 7190), 0), 0, Tag1 ("Big_int", 42)), 0); (("int32_of_big_int", 1040), ((Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -105), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -104), 0), 100000000, 0, -103), 0, (("big_int.mli", 190, 7242, 7242), ("big_int.mli", 190, 7242, 7281), 0), 0, Tag1 ("Big_int", 43)), 0); (("int32_of_big_int_opt", 1041), ((Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -102), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -101)], (0)), 100000000, 0, -100), 0), 100000000, 0, -99), 0, (("big_int.mli", 195, 7445, 7445), ("big_int.mli", 195, 7445, 7494), 0), 0, Tag1 ("Big_int", 44)), 0); (("nativeint_of_big_int", 1042), ((Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -98), (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -97), 0), 100000000, 0, -96), 0, (("big_int.mli", 201, 7644, 7644), ("big_int.mli", 201, 7644, 7691), 0), 0, Tag1 ("Big_int", 45)), 0); (("nativeint_of_big_int_opt", 1043), ((Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -95), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -94)], (0)), 100000000, 0, -93), 0), 100000000, 0, -92), 0, (("big_int.mli", 206, 7874, 7874), ("big_int.mli", 206, 7874, 7931), 0), 0, Tag1 ("Big_int", 46)), 0); (("int64_of_big_int", 1044), ((Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -91), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -90), 0), 100000000, 0, -89), 0, (("big_int.mli", 213, 8103, 8103), ("big_int.mli", 213, 8103, 8142), 0), 0, Tag1 ("Big_int", 47)), 0); (("int64_of_big_int_opt", 1045), ((Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -88), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -87)], (0)), 100000000, 0, -86), 0), 100000000, 0, -85), 0, (("big_int.mli", 218, 8306, 8306), ("big_int.mli", 218, 8306, 8355), 0), 0, Tag1 ("Big_int", 48)), 0); (("float_of_big_int", 1046), ((Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -84), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -83), 0), 100000000, 0, -82), 0, (("big_int.mli", 224, 8504, 8504), ("big_int.mli", 224, 8504, 8543), 0), 0, Tag1 ("Big_int", 49)), 0); (("and_big_int", 1047), ((Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -81), (Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -80), (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -79), 0), 100000000, 0, -78), 0), 100000000, 0, -77), 0, (("big_int.mli", 230, 8676, 8676), ("big_int.mli", 230, 8676, 8723), 0), 0, Tag1 ("Big_int", 50)), 0); (("or_big_int", 1048), ((Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -76), (Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -75), (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -74), 0), 100000000, 0, -73), 0), 100000000, 0, -72), 0, (("big_int.mli", 234, 8815, 8815), ("big_int.mli", 234, 8815, 8861), 0), 0, Tag1 ("Big_int", 51)), 0); (("xor_big_int", 1049), ((Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -71), (Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -70), (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -69), 0), 100000000, 0, -68), 0), 100000000, 0, -67), 0, (("big_int.mli", 238, 8952, 8952), ("big_int.mli", 238, 8952, 8999), 0), 0, Tag1 ("Big_int", 52)), 0); (("shift_left_big_int", 1050), ((Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -66), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -65), (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -64), 0), 100000000, 0, -63), 0), 100000000, 0, -62), 0, (("big_int.mli", 242, 9100, 9100), ("big_int.mli", 242, 9100, 9150), 0), 0, Tag1 ("Big_int", 53)), 0); (("shift_right_big_int", 1051), ((Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -61), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -60), (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -59), 0), 100000000, 0, -58), 0), 100000000, 0, -57), 0, (("big_int.mli", 246, 9279, 9279), ("big_int.mli", 246, 9279, 9330), 0), 0, Tag1 ("Big_int", 54)), 0); (("shift_right_towards_zero_big_int", 1052), ((Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -56), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -55), (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -54), 0), 100000000, 0, -53), 0), 100000000, 0, -52), 0, (("big_int.mli", 251, 9520, 9520), ("big_int.mli", 251, 9520, 9584), 0), 0, Tag1 ("Big_int", 55)), 0); (("extract_big_int", 1053), ((Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -51), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -50), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -49), (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -48), 0), 100000000, 0, -47), 0), 100000000, 0, -46), 0), 100000000, 0, -45), 0, (("big_int.mli", 258, 9896, 9896), ("big_int.mli", 258, 9896, 9950), 0), 0, Tag1 ("Big_int", 56)), 0); (("nat_of_big_int", 1054), ((Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -44), (Tag3 (Tag1 ((Tag2 ("Nat")), "nat"), 0, (0)), 100000000, 0, -43), 0), 100000000, 0, -42), 0, (("big_int.mli", 268, 10245, 10245), ("big_int.mli", 268, 10245, 10280), 0), 0, Tag1 ("Big_int", 57)), 0); (("big_int_of_nat", 1055), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Nat")), "nat"), 0, (0)), 100000000, 0, -41), (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -40), 0), 100000000, 0, -39), 0, (("big_int.mli", 269, 10281, 10281), ("big_int.mli", 269, 10281, 10316), 0), 0, Tag1 ("Big_int", 58)), 0); (("base_power_big_int", 1056), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -38), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -37), (Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -36), (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -35), 0), 100000000, 0, -34), 0), 100000000, 0, -33), 0), 100000000, 0, -32), 0, (("big_int.mli", 270, 10317, 10317), ("big_int.mli", 270, 10317, 10373), 0), 0, Tag1 ("Big_int", 59)), 0); (("sys_big_int_of_string", 1057), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -31), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -30), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -29), (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -28), 0), 100000000, 0, -27), 0), 100000000, 0, -26), 0), 100000000, 0, -25), 0, (("big_int.mli", 271, 10374, 10374), ("big_int.mli", 271, 10374, 10432), 0), 0, Tag1 ("Big_int", 60)), 0); (("round_futur_last_digit", 1058), ((Tag1 (0, (Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -24), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -23), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -22), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -21), 0), 100000000, 0, -20), 0), 100000000, 0, -19), 0), 100000000, 0, -18), 0, (("big_int.mli", 272, 10433, 10433), ("big_int.mli", 272, 10433, 10489), 0), 0, Tag1 ("Big_int", 61)), 0); (("approx_big_int", 1059), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -17), (Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -16), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -15), 0), 100000000, 0, -14), 0), 100000000, 0, -13), 0, (("big_int.mli", 273, 10490, 10490), ("big_int.mli", 273, 10490, 10534), 0), 0, Tag1 ("Big_int", 62)), 0); (("round_big_int_to_float", 1060), ((Tag1 (0, (Tag3 ((("big_int", 997)), 0, (0)), 100000000, 0, -12), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -11), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -10), 0), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("big_int.mli", 275, 10536, 10536), ("big_int.mli", 275, 10536, 10588), 0), 0, Tag1 ("Big_int", 63)), 0); (("sexp_of_big_int", 1061), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -7), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("num/lib/std.ml", 4, 43, 49), ("num/lib/std.ml", 4, 43, 64), 0), 0, Tag1 ("Sexplib_num__Std", 0)), 0); (("big_int_of_sexp", 1062), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -4), (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("num/lib/std.ml", 5, 100, 106), ("num/lib/std.ml", 5, 100, 121), 0), 0, Tag1 ("Sexplib_num__Std", 1)), 0)]), 0, (("num/lib/std.ml", 1, 0, 0), ("num/lib/std.ml", 6, 157, 160), 0), Tag1 ("Sexplib_num__Std", 2)), 0, 0); Tag3 (("Nat", 994), 0, (Tag1 ([Tag1 (("nat", 1063), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Nat")), "nat"), 0, (0)), 100000000, 0, -718)), 0, 0, 0, 0, (("nat.mli", 18, 1130, 1130), ("nat.mli", 18, 1130, 1138), 0), 0, 0, 0, Tag1 ("Nat", 0)), 1, 0); (("create_nat", 1064), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -717), (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -716), 0), 100000000, 0, -715), (("create_nat", 1, 1, "", [0], 0)), (("nat.mli", 23, 1268, 1268), ("nat.mli", 23, 1268, 1314), 0), 0, Tag1 ("Nat", 1)), 0); (("make_nat", 1065), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -714), (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -713), 0), 100000000, 0, -712), 0, (("nat.mli", 24, 1315, 1315), ("nat.mli", 24, 1315, 1339), 0), 0, Tag1 ("Nat", 2)), 0); (("set_to_zero_nat", 1066), ((Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -711), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -710), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -709), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -708), 0), 100000000, 0, -707), 0), 100000000, 0, -706), 0), 100000000, 0, -705), (("set_to_zero_nat", 3, 1, "", [0; 0; 0], 0)), (("nat.mli", 25, 1340, 1340), ("nat.mli", 25, 1340, 1411), 0), 0, Tag1 ("Nat", 3)), 0); (("blit_nat", 1067), ((Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -704), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -703), (Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -702), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -701), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -700), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -699), 0), 100000000, 0, -698), 0), 100000000, 0, -697), 0), 100000000, 0, -696), 0), 100000000, 0, -695), 0), 100000000, 0, -694), (("blit_nat", 5, 1, "", [0; 0; 0; 0; 0], 0)), (("nat.mli", 26, 1412, 1412), ("nat.mli", 26, 1412, 1483), 0), 0, Tag1 ("Nat", 4)), 0); (("copy_nat", 1068), ((Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -693), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -692), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -691), (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -690), 0), 100000000, 0, -689), 0), 100000000, 0, -688), 0), 100000000, 0, -687), 0, (("nat.mli", 27, 1484, 1484), ("nat.mli", 27, 1484, 1522), 0), 0, Tag1 ("Nat", 5)), 0); (("set_digit_nat", 1069), ((Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -686), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -685), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -684), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -683), 0), 100000000, 0, -682), 0), 100000000, 0, -681), 0), 100000000, 0, -680), (("set_digit_nat", 3, 1, "", [0; 0; 0], 0)), (("nat.mli", 28, 1523, 1523), ("nat.mli", 28, 1523, 1590), 0), 0, Tag1 ("Nat", 6)), 0); (("nth_digit_nat", 1070), ((Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -679), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -678), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -677), 0), 100000000, 0, -676), 0), 100000000, 0, -675), (("nth_digit_nat", 2, 1, "", [0; 0], 0)), (("nat.mli", 29, 1591, 1591), ("nat.mli", 29, 1591, 1650), 0), 0, Tag1 ("Nat", 7)), 0); (("set_digit_nat_native", 1071), ((Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -674), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -673), (Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -672), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -671), 0), 100000000, 0, -670), 0), 100000000, 0, -669), 0), 100000000, 0, -668), (("set_digit_nat_native", 3, 1, "", [0; 0; 0], 0)), (("nat.mli", 30, 1651, 1651), ("nat.mli", 31, 1714, 1767), 0), 0, Tag1 ("Nat", 8)), 0); (("nth_digit_nat_native", 1072), ((Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -667), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -666), (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -665), 0), 100000000, 0, -664), 0), 100000000, 0, -663), (("nth_digit_nat_native", 2, 1, "", [0; 0], 0)), (("nat.mli", 32, 1768, 1768), ("nat.mli", 32, 1768, 1847), 0), 0, Tag1 ("Nat", 9)), 0); (("length_nat", 1073), ((Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -662), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -661), 0), 100000000, 0, -660), 0, (("nat.mli", 33, 1848, 1848), ("nat.mli", 33, 1848, 1875), 0), 0, Tag1 ("Nat", 10)), 0); (("num_digits_nat", 1074), ((Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -659), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -658), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -657), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -656), 0), 100000000, 0, -655), 0), 100000000, 0, -654), 0), 100000000, 0, -653), (("num_digits_nat", 3, 1, "", [0; 0; 0], 0)), (("nat.mli", 34, 1876, 1876), ("nat.mli", 34, 1876, 1944), 0), 0, Tag1 ("Nat", 11)), 0); (("num_leading_zero_bits_in_digit", 1075), ((Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -652), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -651), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -650), 0), 100000000, 0, -649), 0), 100000000, 0, -648), (("num_leading_zero_bits_in_digit", 2, 1, "", [0; 0], 0)), (("nat.mli", 35, 1945, 1945), ("nat.mli", 36, 2004, 2077), 0), 0, Tag1 ("Nat", 12)), 0); (("is_digit_int", 1076), ((Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -647), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -646), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -645), 0), 100000000, 0, -644), 0), 100000000, 0, -643), (("is_digit_int", 2, 1, "", [0; 0], 0)), (("nat.mli", 37, 2078, 2078), ("nat.mli", 37, 2078, 2136), 0), 0, Tag1 ("Nat", 13)), 0); (("is_digit_zero", 1077), ((Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -642), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -641), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -640), 0), 100000000, 0, -639), 0), 100000000, 0, -638), (("is_digit_zero", 2, 1, "", [0; 0], 0)), (("nat.mli", 38, 2137, 2137), ("nat.mli", 38, 2137, 2197), 0), 0, Tag1 ("Nat", 14)), 0); (("is_digit_normalized", 1078), ((Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -637), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -636), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -635), 0), 100000000, 0, -634), 0), 100000000, 0, -633), (("is_digit_normalized", 2, 1, "", [0; 0], 0)), (("nat.mli", 39, 2198, 2198), ("nat.mli", 39, 2198, 2270), 0), 0, Tag1 ("Nat", 15)), 0); (("is_digit_odd", 1079), ((Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -632), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -631), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -630), 0), 100000000, 0, -629), 0), 100000000, 0, -628), (("is_digit_odd", 2, 1, "", [0; 0], 0)), (("nat.mli", 40, 2271, 2271), ("nat.mli", 40, 2271, 2329), 0), 0, Tag1 ("Nat", 16)), 0); (("is_zero_nat", 1080), ((Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -627), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -626), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -625), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -624), 0), 100000000, 0, -623), 0), 100000000, 0, -622), 0), 100000000, 0, -621), 0, (("nat.mli", 41, 2330, 2330), ("nat.mli", 41, 2330, 2372), 0), 0, Tag1 ("Nat", 17)), 0); (("is_nat_int", 1081), ((Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -620), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -619), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -618), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -617), 0), 100000000, 0, -616), 0), 100000000, 0, -615), 0), 100000000, 0, -614), 0, (("nat.mli", 42, 2373, 2373), ("nat.mli", 42, 2373, 2414), 0), 0, Tag1 ("Nat", 18)), 0); (("int_of_nat", 1082), ((Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -613), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -612), 0), 100000000, 0, -611), 0, (("nat.mli", 43, 2415, 2415), ("nat.mli", 43, 2415, 2441), 0), 0, Tag1 ("Nat", 19)), 0); (("nat_of_int", 1083), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -610), (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -609), 0), 100000000, 0, -608), 0, (("nat.mli", 44, 2442, 2442), ("nat.mli", 44, 2442, 2468), 0), 0, Tag1 ("Nat", 20)), 0); (("incr_nat", 1084), ((Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -607), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -606), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -605), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -604), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -603), 0), 100000000, 0, -602), 0), 100000000, 0, -601), 0), 100000000, 0, -600), 0), 100000000, 0, -599), (("incr_nat", 4, 1, "", [0; 0; 0; 0], 0)), (("nat.mli", 45, 2469, 2469), ("nat.mli", 45, 2469, 2532), 0), 0, Tag1 ("Nat", 21)), 0); (("add_nat", 1085), ((Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -598), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -597), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -596), (Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -595), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -594), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -593), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -592), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -591), 0), 100000000, 0, -590), 0), 100000000, 0, -589), 0), 100000000, 0, -588), 0), 100000000, 0, -587), 0), 100000000, 0, -586), 0), 100000000, 0, -585), 0), 100000000, 0, -584), (("add_nat", 7, 1, "add_nat_native", [0; 0; 0; 0; 0; 0; 0], 0)), (("nat.mli", 46, 2533, 2533), ("nat.mli", 47, 2604, 2648), 0), 0, Tag1 ("Nat", 22)), 0); (("complement_nat", 1086), ((Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -583), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -582), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -581), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -580), 0), 100000000, 0, -579), 0), 100000000, 0, -578), 0), 100000000, 0, -577), (("complement_nat", 3, 1, "", [0; 0; 0], 0)), (("nat.mli", 48, 2649, 2649), ("nat.mli", 48, 2649, 2718), 0), 0, Tag1 ("Nat", 23)), 0); (("decr_nat", 1087), ((Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -576), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -575), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -574), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -573), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -572), 0), 100000000, 0, -571), 0), 100000000, 0, -570), 0), 100000000, 0, -569), 0), 100000000, 0, -568), (("decr_nat", 4, 1, "", [0; 0; 0; 0], 0)), (("nat.mli", 49, 2719, 2719), ("nat.mli", 49, 2719, 2782), 0), 0, Tag1 ("Nat", 24)), 0); (("sub_nat", 1088), ((Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -567), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -566), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -565), (Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -564), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -563), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -562), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -561), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -560), 0), 100000000, 0, -559), 0), 100000000, 0, -558), 0), 100000000, 0, -557), 0), 100000000, 0, -556), 0), 100000000, 0, -555), 0), 100000000, 0, -554), 0), 100000000, 0, -553), (("sub_nat", 7, 1, "sub_nat_native", [0; 0; 0; 0; 0; 0; 0], 0)), (("nat.mli", 50, 2783, 2783), ("nat.mli", 51, 2854, 2898), 0), 0, Tag1 ("Nat", 25)), 0); (("mult_digit_nat", 1089), ((Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -552), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -551), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -550), (Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -549), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -548), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -547), (Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -546), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -545), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -544), 0), 100000000, 0, -543), 0), 100000000, 0, -542), 0), 100000000, 0, -541), 0), 100000000, 0, -540), 0), 100000000, 0, -539), 0), 100000000, 0, -538), 0), 100000000, 0, -537), 0), 100000000, 0, -536), (("mult_digit_nat", 8, 1, "mult_digit_nat_native", [0; 0; 0; 0; 0; 0; 0; 0], 0)), (("nat.mli", 52, 2899, 2899), ("nat.mli", 54, 2988, 3032), 0), 0, Tag1 ("Nat", 26)), 0); (("mult_nat", 1090), ((Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -535), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -534), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -533), (Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -532), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -531), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -530), (Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -529), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -528), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -527), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -526), 0), 100000000, 0, -525), 0), 100000000, 0, -524), 0), 100000000, 0, -523), 0), 100000000, 0, -522), 0), 100000000, 0, -521), 0), 100000000, 0, -520), 0), 100000000, 0, -519), 0), 100000000, 0, -518), 0), 100000000, 0, -517), (("mult_nat", 9, 1, "mult_nat_native", [0; 0; 0; 0; 0; 0; 0; 0; 0], 0)), (("nat.mli", 55, 3033, 3033), ("nat.mli", 57, 3123, 3155), 0), 0, Tag1 ("Nat", 27)), 0); (("square_nat", 1091), ((Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -516), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -515), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -514), (Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -513), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -512), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -511), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -510), 0), 100000000, 0, -509), 0), 100000000, 0, -508), 0), 100000000, 0, -507), 0), 100000000, 0, -506), 0), 100000000, 0, -505), 0), 100000000, 0, -504), (("square_nat", 6, 1, "square_nat_native", [0; 0; 0; 0; 0; 0], 0)), (("nat.mli", 58, 3156, 3156), ("nat.mli", 59, 3223, 3276), 0), 0, Tag1 ("Nat", 28)), 0); (("shift_left_nat", 1092), ((Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -503), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -502), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -501), (Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -500), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -499), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -498), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -497), 0), 100000000, 0, -496), 0), 100000000, 0, -495), 0), 100000000, 0, -494), 0), 100000000, 0, -493), 0), 100000000, 0, -492), 0), 100000000, 0, -491), (("shift_left_nat", 6, 1, "shift_left_nat_native", [0; 0; 0; 0; 0; 0], 0)), (("nat.mli", 60, 3277, 3277), ("nat.mli", 61, 3349, 3414), 0), 0, Tag1 ("Nat", 29)), 0); (("div_digit_nat", 1093), ((Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -490), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -489), (Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -488), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -487), (Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -486), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -485), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -484), (Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -483), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -482), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -481), 0), 100000000, 0, -480), 0), 100000000, 0, -479), 0), 100000000, 0, -478), 0), 100000000, 0, -477), 0), 100000000, 0, -476), 0), 100000000, 0, -475), 0), 100000000, 0, -474), 0), 100000000, 0, -473), 0), 100000000, 0, -472), (("div_digit_nat", 9, 1, "div_digit_nat_native", [0; 0; 0; 0; 0; 0; 0; 0; 0], 0)), (("nat.mli", 62, 3415, 3415), ("nat.mli", 64, 3511, 3553), 0), 0, Tag1 ("Nat", 30)), 0); (("div_nat", 1094), ((Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -471), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -470), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -469), (Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -468), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -467), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -466), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -465), 0), 100000000, 0, -464), 0), 100000000, 0, -463), 0), 100000000, 0, -462), 0), 100000000, 0, -461), 0), 100000000, 0, -460), 0), 100000000, 0, -459), (("div_nat", 6, 1, "div_nat_native", [0; 0; 0; 0; 0; 0], 0)), (("nat.mli", 65, 3554, 3554), ("nat.mli", 66, 3619, 3663), 0), 0, Tag1 ("Nat", 31)), 0); (("shift_right_nat", 1095), ((Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -458), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -457), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -456), (Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -455), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -454), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -453), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -452), 0), 100000000, 0, -451), 0), 100000000, 0, -450), 0), 100000000, 0, -449), 0), 100000000, 0, -448), 0), 100000000, 0, -447), 0), 100000000, 0, -446), (("shift_right_nat", 6, 1, "shift_right_nat_native", [0; 0; 0; 0; 0; 0], 0)), (("nat.mli", 67, 3664, 3664), ("nat.mli", 68, 3737, 3805), 0), 0, Tag1 ("Nat", 32)), 0); (("compare_digits_nat", 1096), ((Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -445), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -444), (Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -443), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -442), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -441), 0), 100000000, 0, -440), 0), 100000000, 0, -439), 0), 100000000, 0, -438), 0), 100000000, 0, -437), (("compare_digits_nat", 4, 1, "", [0; 0; 0; 0], 0)), (("nat.mli", 69, 3806, 3806), ("nat.mli", 70, 3867, 3916), 0), 0, Tag1 ("Nat", 33)), 0); (("compare_nat", 1097), ((Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -436), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -435), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -434), (Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -433), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -432), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -431), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -430), 0), 100000000, 0, -429), 0), 100000000, 0, -428), 0), 100000000, 0, -427), 0), 100000000, 0, -426), 0), 100000000, 0, -425), 0), 100000000, 0, -424), (("compare_nat", 6, 1, "compare_nat_native", [0; 0; 0; 0; 0; 0], 0)), (("nat.mli", 71, 3917, 3917), ("nat.mli", 72, 3985, 4041), 0), 0, Tag1 ("Nat", 34)), 0); (("eq_nat", 1098), ((Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -423), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -422), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -421), (Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -420), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -419), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -418), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -417), 0), 100000000, 0, -416), 0), 100000000, 0, -415), 0), 100000000, 0, -414), 0), 100000000, 0, -413), 0), 100000000, 0, -412), 0), 100000000, 0, -411), 0, (("nat.mli", 73, 4042, 4042), ("nat.mli", 73, 4042, 4101), 0), 0, Tag1 ("Nat", 35)), 0); (("le_nat", 1099), ((Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -410), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -409), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -408), (Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -407), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -406), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -405), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -404), 0), 100000000, 0, -403), 0), 100000000, 0, -402), 0), 100000000, 0, -401), 0), 100000000, 0, -400), 0), 100000000, 0, -399), 0), 100000000, 0, -398), 0, (("nat.mli", 74, 4102, 4102), ("nat.mli", 74, 4102, 4161), 0), 0, Tag1 ("Nat", 36)), 0); (("lt_nat", 1100), ((Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -397), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -396), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -395), (Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -394), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -393), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -392), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -391), 0), 100000000, 0, -390), 0), 100000000, 0, -389), 0), 100000000, 0, -388), 0), 100000000, 0, -387), 0), 100000000, 0, -386), 0), 100000000, 0, -385), 0, (("nat.mli", 75, 4162, 4162), ("nat.mli", 75, 4162, 4221), 0), 0, Tag1 ("Nat", 37)), 0); (("ge_nat", 1101), ((Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -384), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -383), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -382), (Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -381), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -380), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -379), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -378), 0), 100000000, 0, -377), 0), 100000000, 0, -376), 0), 100000000, 0, -375), 0), 100000000, 0, -374), 0), 100000000, 0, -373), 0), 100000000, 0, -372), 0, (("nat.mli", 76, 4222, 4222), ("nat.mli", 76, 4222, 4281), 0), 0, Tag1 ("Nat", 38)), 0); (("gt_nat", 1102), ((Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -371), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -370), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -369), (Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -368), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -367), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -366), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -365), 0), 100000000, 0, -364), 0), 100000000, 0, -363), 0), 100000000, 0, -362), 0), 100000000, 0, -361), 0), 100000000, 0, -360), 0), 100000000, 0, -359), 0, (("nat.mli", 77, 4282, 4282), ("nat.mli", 77, 4282, 4341), 0), 0, Tag1 ("Nat", 39)), 0); (("land_digit_nat", 1103), ((Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -358), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -357), (Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -356), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -355), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -354), 0), 100000000, 0, -353), 0), 100000000, 0, -352), 0), 100000000, 0, -351), 0), 100000000, 0, -350), (("land_digit_nat", 4, 1, "", [0; 0; 0; 0], 0)), (("nat.mli", 78, 4342, 4342), ("nat.mli", 78, 4342, 4418), 0), 0, Tag1 ("Nat", 40)), 0); (("lor_digit_nat", 1104), ((Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -349), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -348), (Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -347), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -346), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -345), 0), 100000000, 0, -344), 0), 100000000, 0, -343), 0), 100000000, 0, -342), 0), 100000000, 0, -341), (("lor_digit_nat", 4, 1, "", [0; 0; 0; 0], 0)), (("nat.mli", 79, 4419, 4419), ("nat.mli", 79, 4419, 4493), 0), 0, Tag1 ("Nat", 41)), 0); (("lxor_digit_nat", 1105), ((Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -340), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -339), (Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -338), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -337), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -336), 0), 100000000, 0, -335), 0), 100000000, 0, -334), 0), 100000000, 0, -333), 0), 100000000, 0, -332), (("lxor_digit_nat", 4, 1, "", [0; 0; 0; 0], 0)), (("nat.mli", 80, 4494, 4494), ("nat.mli", 80, 4494, 4570), 0), 0, Tag1 ("Nat", 42)), 0); (("gcd_nat", 1106), ((Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -331), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -330), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -329), (Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -328), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -327), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -326), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -325), 0), 100000000, 0, -324), 0), 100000000, 0, -323), 0), 100000000, 0, -322), 0), 100000000, 0, -321), 0), 100000000, 0, -320), 0), 100000000, 0, -319), 0, (("nat.mli", 81, 4571, 4571), ("nat.mli", 81, 4571, 4630), 0), 0, Tag1 ("Nat", 43)), 0); (("sqrt_nat", 1107), ((Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -318), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -317), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -316), (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -315), 0), 100000000, 0, -314), 0), 100000000, 0, -313), 0), 100000000, 0, -312), 0, (("nat.mli", 82, 4631, 4631), ("nat.mli", 82, 4631, 4670), 0), 0, Tag1 ("Nat", 44)), 0); (("string_of_nat", 1108), ((Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -311), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -310), 0), 100000000, 0, -309), 0, (("nat.mli", 83, 4671, 4671), ("nat.mli", 83, 4671, 4704), 0), 0, Tag1 ("Nat", 45)), 0); (("nat_of_string", 1109), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -308), (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -307), 0), 100000000, 0, -306), 0, (("nat.mli", 84, 4705, 4705), ("nat.mli", 84, 4705, 4738), 0), 0, Tag1 ("Nat", 46)), 0); (("sys_nat_of_string", 1110), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -305), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -304), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -303), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -302), (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -301), 0), 100000000, 0, -300), 0), 100000000, 0, -299), 0), 100000000, 0, -298), 0), 100000000, 0, -297), 0, (("nat.mli", 85, 4739, 4739), ("nat.mli", 85, 4739, 4797), 0), 0, Tag1 ("Nat", 47)), 0); (("float_of_nat", 1111), ((Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -296), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -295), 0), 100000000, 0, -294), 0, (("nat.mli", 86, 4798, 4798), ("nat.mli", 86, 4798, 4829), 0), 0, Tag1 ("Nat", 48)), 0); (("make_power_base", 1112), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -293), (Tag1 (0, (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -292), (Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -290); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -291)]), 100000000, 0, -289), 0), 100000000, 0, -288), 0), 100000000, 0, -287), 0, (("nat.mli", 87, 4830, 4830), ("nat.mli", 87, 4830, 4876), 0), 0, Tag1 ("Nat", 49)), 0); (("power_base_int", 1113), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -286), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -285), (Tag3 ((("nat", 1063)), 0, (0)), 100000000, 0, -284), 0), 100000000, 0, -283), 0), 100000000, 0, -282), 0, (("nat.mli", 88, 4877, 4877), ("nat.mli", 88, 4877, 4915), 0), 0, Tag1 ("Nat", 50)), 0); (("length_of_digit", 1114), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -281), 0, (("nat.mli", 89, 4916, 4916), ("nat.mli", 89, 4916, 4940), 0), 0, Tag1 ("Nat", 51)), 0); (("sexp_of_nat", 1115), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Nat")), "nat"), 0, (0)), 100000000, 0, -280), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -279), 0), 100000000, 0, -278), 0, (("num/lib/std.ml", 11, 197, 203), ("num/lib/std.ml", 11, 197, 214), 0), 0, Tag1 ("Sexplib_num__Std", 3)), 0); (("nat_of_sexp", 1116), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -277), (Tag3 (Tag1 ((Tag2 ("Nat")), "nat"), 0, (0)), 100000000, 0, -276), 0), 100000000, 0, -275), 0, (("num/lib/std.ml", 12, 246, 252), ("num/lib/std.ml", 12, 246, 263), 0), 0, Tag1 ("Sexplib_num__Std", 4)), 0)]), 0, (("num/lib/std.ml", 8, 162, 162), ("num/lib/std.ml", 13, 295, 298), 0), Tag1 ("Sexplib_num__Std", 5)), 0, 0); Tag3 (("Ratio", 995), 0, (Tag1 ([Tag1 (("ratio", 1117), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Ratio")), "ratio"), 0, (0)), 100000000, 0, -971)), 0, 0, 0, 0, (("ratio.mli", 29, 1516, 1516), ("ratio.mli", 29, 1516, 1526), 0), 0, 0, 0, Tag1 ("Ratio", 0)), 1, 0); (("null_denominator", 1118), ((Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -970), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -969), 0), 100000000, 0, -968), 0, (("ratio.mli", 33, 1537, 1537), ("ratio.mli", 33, 1537, 1573), 0), 0, Tag1 ("Ratio", 1)), 0); (("numerator_ratio", 1119), ((Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -967), (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -966), 0), 100000000, 0, -965), 0, (("ratio.mli", 34, 1574, 1574), ("ratio.mli", 34, 1574, 1612), 0), 0, Tag1 ("Ratio", 2)), 0); (("denominator_ratio", 1120), ((Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -964), (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -963), 0), 100000000, 0, -962), 0, (("ratio.mli", 35, 1613, 1613), ("ratio.mli", 35, 1613, 1653), 0), 0, Tag1 ("Ratio", 3)), 0); (("sign_ratio", 1121), ((Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -961), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -960), 0), 100000000, 0, -959), 0, (("ratio.mli", 36, 1654, 1654), ("ratio.mli", 36, 1654, 1683), 0), 0, Tag1 ("Ratio", 4)), 0); (("normalize_ratio", 1122), ((Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -958), (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -957), 0), 100000000, 0, -956), 0, (("ratio.mli", 37, 1684, 1684), ("ratio.mli", 37, 1684, 1720), 0), 0, Tag1 ("Ratio", 5)), 0); (("cautious_normalize_ratio", 1123), ((Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -955), (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -954), 0), 100000000, 0, -953), 0, (("ratio.mli", 38, 1721, 1721), ("ratio.mli", 38, 1721, 1766), 0), 0, Tag1 ("Ratio", 6)), 0); (("cautious_normalize_ratio_when_printing", 1124), ((Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -952), (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -951), 0), 100000000, 0, -950), 0, (("ratio.mli", 39, 1767, 1767), ("ratio.mli", 39, 1767, 1826), 0), 0, Tag1 ("Ratio", 7)), 0); (("create_ratio", 1125), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -949), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -948), (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -947), 0), 100000000, 0, -946), 0), 100000000, 0, -945), 0, (("ratio.mli", 40, 1827, 1827), ("ratio.mli", 40, 1827, 1873), 0), 0, Tag1 ("Ratio", 8)), 0); (("create_normalized_ratio", 1126), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -944), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -943), (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -942), 0), 100000000, 0, -941), 0), 100000000, 0, -940), 0, (("ratio.mli", 41, 1896, 1896), ("ratio.mli", 41, 1896, 1953), 0), 0, Tag1 ("Ratio", 9)), 0); (("is_normalized_ratio", 1127), ((Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -939), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -938), 0), 100000000, 0, -937), 0, (("ratio.mli", 43, 2018, 2018), ("ratio.mli", 43, 2018, 2057), 0), 0, Tag1 ("Ratio", 10)), 0); (("report_sign_ratio", 1128), ((Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -936), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -935), (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -934), 0), 100000000, 0, -933), 0), 100000000, 0, -932), 0, (("ratio.mli", 44, 2058, 2058), ("ratio.mli", 44, 2058, 2109), 0), 0, Tag1 ("Ratio", 11)), 0); (("abs_ratio", 1129), ((Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -931), (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -930), 0), 100000000, 0, -929), 0, (("ratio.mli", 45, 2110, 2110), ("ratio.mli", 45, 2110, 2140), 0), 0, Tag1 ("Ratio", 12)), 0); (("is_integer_ratio", 1130), ((Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -928), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -927), 0), 100000000, 0, -926), 0, (("ratio.mli", 46, 2141, 2141), ("ratio.mli", 46, 2141, 2177), 0), 0, Tag1 ("Ratio", 13)), 0); (("add_ratio", 1131), ((Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -925), (Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -924), (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -923), 0), 100000000, 0, -922), 0), 100000000, 0, -921), 0, (("ratio.mli", 47, 2178, 2178), ("ratio.mli", 47, 2178, 2217), 0), 0, Tag1 ("Ratio", 14)), 0); (("minus_ratio", 1132), ((Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -920), (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -919), 0), 100000000, 0, -918), 0, (("ratio.mli", 48, 2218, 2218), ("ratio.mli", 48, 2218, 2250), 0), 0, Tag1 ("Ratio", 15)), 0); (("add_int_ratio", 1133), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -917), (Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -916), (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -915), 0), 100000000, 0, -914), 0), 100000000, 0, -913), 0, (("ratio.mli", 49, 2251, 2251), ("ratio.mli", 49, 2251, 2292), 0), 0, Tag1 ("Ratio", 16)), 0); (("add_big_int_ratio", 1134), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -912), (Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -911), (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -910), 0), 100000000, 0, -909), 0), 100000000, 0, -908), 0, (("ratio.mli", 50, 2293, 2293), ("ratio.mli", 50, 2293, 2342), 0), 0, Tag1 ("Ratio", 17)), 0); (("sub_ratio", 1135), ((Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -907), (Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -906), (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -905), 0), 100000000, 0, -904), 0), 100000000, 0, -903), 0, (("ratio.mli", 51, 2343, 2343), ("ratio.mli", 51, 2343, 2382), 0), 0, Tag1 ("Ratio", 18)), 0); (("mult_ratio", 1136), ((Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -902), (Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -901), (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -900), 0), 100000000, 0, -899), 0), 100000000, 0, -898), 0, (("ratio.mli", 52, 2383, 2383), ("ratio.mli", 52, 2383, 2423), 0), 0, Tag1 ("Ratio", 19)), 0); (("mult_int_ratio", 1137), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -897), (Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -896), (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -895), 0), 100000000, 0, -894), 0), 100000000, 0, -893), 0, (("ratio.mli", 53, 2424, 2424), ("ratio.mli", 53, 2424, 2466), 0), 0, Tag1 ("Ratio", 20)), 0); (("mult_big_int_ratio", 1138), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -892), (Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -891), (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -890), 0), 100000000, 0, -889), 0), 100000000, 0, -888), 0, (("ratio.mli", 54, 2467, 2467), ("ratio.mli", 54, 2467, 2517), 0), 0, Tag1 ("Ratio", 21)), 0); (("square_ratio", 1139), ((Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -887), (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -886), 0), 100000000, 0, -885), 0, (("ratio.mli", 55, 2518, 2518), ("ratio.mli", 55, 2518, 2551), 0), 0, Tag1 ("Ratio", 22)), 0); (("inverse_ratio", 1140), ((Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -884), (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -883), 0), 100000000, 0, -882), 0, (("ratio.mli", 56, 2552, 2552), ("ratio.mli", 56, 2552, 2586), 0), 0, Tag1 ("Ratio", 23)), 0); (("div_ratio", 1141), ((Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -881), (Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -880), (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -879), 0), 100000000, 0, -878), 0), 100000000, 0, -877), 0, (("ratio.mli", 57, 2587, 2587), ("ratio.mli", 57, 2587, 2626), 0), 0, Tag1 ("Ratio", 24)), 0); (("integer_ratio", 1142), ((Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -876), (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -875), 0), 100000000, 0, -874), 0, (("ratio.mli", 58, 2627, 2627), ("ratio.mli", 58, 2627, 2663), 0), 0, Tag1 ("Ratio", 25)), 0); (("floor_ratio", 1143), ((Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -873), (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -872), 0), 100000000, 0, -871), 0, (("ratio.mli", 59, 2664, 2664), ("ratio.mli", 59, 2664, 2698), 0), 0, Tag1 ("Ratio", 26)), 0); (("round_ratio", 1144), ((Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -870), (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -869), 0), 100000000, 0, -868), 0, (("ratio.mli", 60, 2699, 2699), ("ratio.mli", 60, 2699, 2733), 0), 0, Tag1 ("Ratio", 27)), 0); (("ceiling_ratio", 1145), ((Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -867), (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -866), 0), 100000000, 0, -865), 0, (("ratio.mli", 61, 2734, 2734), ("ratio.mli", 61, 2734, 2770), 0), 0, Tag1 ("Ratio", 28)), 0); (("eq_ratio", 1146), ((Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -864), (Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -863), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -862), 0), 100000000, 0, -861), 0), 100000000, 0, -860), 0, (("ratio.mli", 62, 2771, 2771), ("ratio.mli", 62, 2771, 2808), 0), 0, Tag1 ("Ratio", 29)), 0); (("compare_ratio", 1147), ((Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -859), (Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -858), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -857), 0), 100000000, 0, -856), 0), 100000000, 0, -855), 0, (("ratio.mli", 63, 2809, 2809), ("ratio.mli", 63, 2809, 2850), 0), 0, Tag1 ("Ratio", 30)), 0); (("lt_ratio", 1148), ((Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -854), (Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -853), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -852), 0), 100000000, 0, -851), 0), 100000000, 0, -850), 0, (("ratio.mli", 64, 2851, 2851), ("ratio.mli", 64, 2851, 2888), 0), 0, Tag1 ("Ratio", 31)), 0); (("le_ratio", 1149), ((Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -849), (Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -848), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -847), 0), 100000000, 0, -846), 0), 100000000, 0, -845), 0, (("ratio.mli", 65, 2889, 2889), ("ratio.mli", 65, 2889, 2926), 0), 0, Tag1 ("Ratio", 32)), 0); (("gt_ratio", 1150), ((Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -844), (Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -843), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -842), 0), 100000000, 0, -841), 0), 100000000, 0, -840), 0, (("ratio.mli", 66, 2927, 2927), ("ratio.mli", 66, 2927, 2964), 0), 0, Tag1 ("Ratio", 33)), 0); (("ge_ratio", 1151), ((Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -839), (Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -838), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -837), 0), 100000000, 0, -836), 0), 100000000, 0, -835), 0, (("ratio.mli", 67, 2965, 2965), ("ratio.mli", 67, 2965, 3002), 0), 0, Tag1 ("Ratio", 34)), 0); (("max_ratio", 1152), ((Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -834), (Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -833), (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -832), 0), 100000000, 0, -831), 0), 100000000, 0, -830), 0, (("ratio.mli", 68, 3003, 3003), ("ratio.mli", 68, 3003, 3042), 0), 0, Tag1 ("Ratio", 35)), 0); (("min_ratio", 1153), ((Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -829), (Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -828), (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -827), 0), 100000000, 0, -826), 0), 100000000, 0, -825), 0, (("ratio.mli", 69, 3043, 3043), ("ratio.mli", 69, 3043, 3082), 0), 0, Tag1 ("Ratio", 36)), 0); (("eq_big_int_ratio", 1154), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -824), (Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -823), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -822), 0), 100000000, 0, -821), 0), 100000000, 0, -820), 0, (("ratio.mli", 70, 3083, 3083), ("ratio.mli", 70, 3083, 3130), 0), 0, Tag1 ("Ratio", 37)), 0); (("compare_big_int_ratio", 1155), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -819), (Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -818), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -817), 0), 100000000, 0, -816), 0), 100000000, 0, -815), 0, (("ratio.mli", 71, 3131, 3131), ("ratio.mli", 71, 3131, 3182), 0), 0, Tag1 ("Ratio", 38)), 0); (("lt_big_int_ratio", 1156), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -814), (Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -813), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -812), 0), 100000000, 0, -811), 0), 100000000, 0, -810), 0, (("ratio.mli", 72, 3183, 3183), ("ratio.mli", 72, 3183, 3230), 0), 0, Tag1 ("Ratio", 39)), 0); (("le_big_int_ratio", 1157), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -809), (Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -808), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -807), 0), 100000000, 0, -806), 0), 100000000, 0, -805), 0, (("ratio.mli", 73, 3231, 3231), ("ratio.mli", 73, 3231, 3278), 0), 0, Tag1 ("Ratio", 40)), 0); (("gt_big_int_ratio", 1158), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -804), (Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -803), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -802), 0), 100000000, 0, -801), 0), 100000000, 0, -800), 0, (("ratio.mli", 74, 3279, 3279), ("ratio.mli", 74, 3279, 3326), 0), 0, Tag1 ("Ratio", 41)), 0); (("ge_big_int_ratio", 1159), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -799), (Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -798), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -797), 0), 100000000, 0, -796), 0), 100000000, 0, -795), 0, (("ratio.mli", 75, 3327, 3327), ("ratio.mli", 75, 3327, 3374), 0), 0, Tag1 ("Ratio", 42)), 0); (("int_of_ratio", 1160), ((Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -794), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -793), 0), 100000000, 0, -792), 0, (("ratio.mli", 76, 3375, 3375), ("ratio.mli", 76, 3375, 3406), 0), 0, Tag1 ("Ratio", 43)), 0); (("ratio_of_int", 1161), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -791), (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -790), 0), 100000000, 0, -789), 0, (("ratio.mli", 77, 3407, 3407), ("ratio.mli", 77, 3407, 3438), 0), 0, Tag1 ("Ratio", 44)), 0); (("ratio_of_nat", 1162), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Nat")), "nat"), 0, (0)), 100000000, 0, -788), (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -787), 0), 100000000, 0, -786), 0, (("ratio.mli", 78, 3439, 3439), ("ratio.mli", 78, 3439, 3470), 0), 0, Tag1 ("Ratio", 45)), 0); (("nat_of_ratio", 1163), ((Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -785), (Tag3 (Tag1 ((Tag2 ("Nat")), "nat"), 0, (0)), 100000000, 0, -784), 0), 100000000, 0, -783), 0, (("ratio.mli", 79, 3471, 3471), ("ratio.mli", 79, 3471, 3502), 0), 0, Tag1 ("Ratio", 46)), 0); (("ratio_of_big_int", 1164), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -782), (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -781), 0), 100000000, 0, -780), 0, (("ratio.mli", 80, 3503, 3503), ("ratio.mli", 80, 3503, 3542), 0), 0, Tag1 ("Ratio", 47)), 0); (("big_int_of_ratio", 1165), ((Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -779), (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -778), 0), 100000000, 0, -777), 0, (("ratio.mli", 81, 3543, 3543), ("ratio.mli", 81, 3543, 3582), 0), 0, Tag1 ("Ratio", 48)), 0); (("div_int_ratio", 1166), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -776), (Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -775), (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -774), 0), 100000000, 0, -773), 0), 100000000, 0, -772), 0, (("ratio.mli", 82, 3583, 3583), ("ratio.mli", 82, 3583, 3624), 0), 0, Tag1 ("Ratio", 49)), 0); (("div_ratio_int", 1167), ((Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -771), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -770), (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -769), 0), 100000000, 0, -768), 0), 100000000, 0, -767), 0, (("ratio.mli", 83, 3625, 3625), ("ratio.mli", 83, 3625, 3666), 0), 0, Tag1 ("Ratio", 50)), 0); (("div_big_int_ratio", 1168), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -766), (Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -765), (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -764), 0), 100000000, 0, -763), 0), 100000000, 0, -762), 0, (("ratio.mli", 84, 3667, 3667), ("ratio.mli", 84, 3667, 3716), 0), 0, Tag1 ("Ratio", 51)), 0); (("div_ratio_big_int", 1169), ((Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -761), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -760), (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -759), 0), 100000000, 0, -758), 0), 100000000, 0, -757), 0, (("ratio.mli", 85, 3717, 3717), ("ratio.mli", 85, 3717, 3766), 0), 0, Tag1 ("Ratio", 52)), 0); (("approx_ratio_fix", 1170), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -756), (Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -755), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -754), 0), 100000000, 0, -753), 0), 100000000, 0, -752), 0, (("ratio.mli", 86, 3767, 3767), ("ratio.mli", 86, 3767, 3812), 0), 0, Tag1 ("Ratio", 53)), 0); (("approx_ratio_exp", 1171), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -751), (Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -750), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -749), 0), 100000000, 0, -748), 0), 100000000, 0, -747), 0, (("ratio.mli", 87, 3813, 3813), ("ratio.mli", 87, 3813, 3858), 0), 0, Tag1 ("Ratio", 54)), 0); (("float_of_rational_string", 1172), ((Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -746), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -745), 0), 100000000, 0, -744), 0, (("ratio.mli", 88, 3859, 3859), ("ratio.mli", 88, 3859, 3905), 0), 0, Tag1 ("Ratio", 55)), 0); (("string_of_ratio", 1173), ((Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -743), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -742), 0), 100000000, 0, -741), 0, (("ratio.mli", 89, 3906, 3906), ("ratio.mli", 89, 3906, 3943), 0), 0, Tag1 ("Ratio", 56)), 0); (("ratio_of_string", 1174), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -740), (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -739), 0), 100000000, 0, -738), 0, (("ratio.mli", 90, 3944, 3944), ("ratio.mli", 90, 3944, 3981), 0), 0, Tag1 ("Ratio", 57)), 0); (("float_of_ratio", 1175), ((Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -737), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -736), 0), 100000000, 0, -735), 0, (("ratio.mli", 91, 3982, 3982), ("ratio.mli", 91, 3982, 4017), 0), 0, Tag1 ("Ratio", 58)), 0); (("power_ratio_positive_int", 1176), ((Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -734), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -733), (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -732), 0), 100000000, 0, -731), 0), 100000000, 0, -730), 0, (("ratio.mli", 92, 4018, 4018), ("ratio.mli", 92, 4018, 4070), 0), 0, Tag1 ("Ratio", 59)), 0); (("power_ratio_positive_big_int", 1177), ((Tag1 (0, (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -729), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -728), (Tag3 ((("ratio", 1117)), 0, (0)), 100000000, 0, -727), 0), 100000000, 0, -726), 0), 100000000, 0, -725), 0, (("ratio.mli", 93, 4071, 4071), ("ratio.mli", 93, 4071, 4131), 0), 0, Tag1 ("Ratio", 60)), 0); (("sexp_of_ratio", 1178), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ratio")), "ratio"), 0, (0)), 100000000, 0, -724), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -723), 0), 100000000, 0, -722), 0, (("num/lib/std.ml", 18, 339, 345), ("num/lib/std.ml", 18, 339, 358), 0), 0, Tag1 ("Sexplib_num__Std", 6)), 0); (("ratio_of_sexp", 1179), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -721), (Tag3 (Tag1 ((Tag2 ("Ratio")), "ratio"), 0, (0)), 100000000, 0, -720), 0), 100000000, 0, -719), 0, (("num/lib/std.ml", 19, 392, 398), ("num/lib/std.ml", 19, 392, 411), 0), 0, Tag1 ("Sexplib_num__Std", 7)), 0)]), 0, (("num/lib/std.ml", 15, 300, 300), ("num/lib/std.ml", 20, 445, 448), 0), Tag1 ("Sexplib_num__Std", 8)), 0, 0); Tag3 (("Num", 996), 0, (Tag1 ([Tag1 (("num", 1180), (0, 0, Tag1 ([(("Int", 447), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1209)]), 0, (("num.mli", 28, 1338, 1342), ("num.mli", 28, 1338, 1352), 0), 0, Tag1 ("Num", 1)); (("Big_int", 448), ([(Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -1210)]), 0, (("num.mli", 29, 1353, 1355), ("num.mli", 29, 1353, 1375), 0), 0, Tag1 ("Num", 2)); (("Ratio", 449), ([(Tag3 (Tag1 ((Tag2 ("Ratio")), "ratio"), 0, (0)), 100000000, 0, -1211)]), 0, (("num.mli", 30, 1376, 1378), ("num.mli", 30, 1376, 1394), 0), 0, Tag1 ("Num", 3))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Num")), "num"), 0, (0)), 100000000, 0, -1208)), 0, 0, 0, 0, (("num.mli", 27, 1327, 1327), ("num.mli", 30, 1376, 1394), 0), 0, 0, 0, Tag1 ("Num", 0)), 1, 0); (("+/", 1181), ((Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1207), (Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1206), (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1205), 0), 100000000, 0, -1204), 0), 100000000, 0, -1203), 0, (("num.mli", 36, 1432, 1432), ("num.mli", 36, 1432, 1462), 0), 0, Tag1 ("Num", 4)), 0); (("add_num", 1182), ((Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1202), (Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1201), (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1200), 0), 100000000, 0, -1199), 0), 100000000, 0, -1198), 0, (("num.mli", 39, 1494, 1494), ("num.mli", 39, 1494, 1525), 0), 0, Tag1 ("Num", 5)), 0); (("minus_num", 1183), ((Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1197), (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1196), 0), 100000000, 0, -1195), 0, (("num.mli", 42, 1543, 1543), ("num.mli", 42, 1543, 1569), 0), 0, Tag1 ("Num", 6)), 0); (("-/", 1184), ((Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1194), (Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1193), (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1192), 0), 100000000, 0, -1191), 0), 100000000, 0, -1190), 0, (("num.mli", 45, 1594, 1594), ("num.mli", 45, 1594, 1624), 0), 0, Tag1 ("Num", 7)), 0); (("sub_num", 1185), ((Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1189), (Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1188), (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1187), 0), 100000000, 0, -1186), 0), 100000000, 0, -1185), 0, (("num.mli", 48, 1656, 1656), ("num.mli", 48, 1656, 1687), 0), 0, Tag1 ("Num", 8)), 0); (("*/", 1186), ((Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1184), (Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1183), (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1182), 0), 100000000, 0, -1181), 0), 100000000, 0, -1180), 0, (("num.mli", 51, 1708, 1708), ("num.mli", 51, 1708, 1738), 0), 0, Tag1 ("Num", 9)), 0); (("mult_num", 1187), ((Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1179), (Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1178), (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1177), 0), 100000000, 0, -1176), 0), 100000000, 0, -1175), 0, (("num.mli", 54, 1771, 1771), ("num.mli", 54, 1771, 1803), 0), 0, Tag1 ("Num", 10)), 0); (("square_num", 1188), ((Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1174), (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1173), 0), 100000000, 0, -1172), 0, (("num.mli", 57, 1827, 1827), ("num.mli", 57, 1827, 1854), 0), 0, Tag1 ("Num", 11)), 0); (("//", 1189), ((Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1171), (Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1170), (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1169), 0), 100000000, 0, -1168), 0), 100000000, 0, -1167), 0, (("num.mli", 60, 1872, 1872), ("num.mli", 60, 1872, 1902), 0), 0, Tag1 ("Num", 12)), 0); (("div_num", 1190), ((Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1166), (Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1165), (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1164), 0), 100000000, 0, -1163), 0), 100000000, 0, -1162), 0, (("num.mli", 63, 1934, 1934), ("num.mli", 63, 1934, 1965), 0), 0, Tag1 ("Num", 13)), 0); (("quo_num", 1191), ((Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1161), (Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1160), (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1159), 0), 100000000, 0, -1158), 0), 100000000, 0, -1157), 0, (("num.mli", 66, 1983, 1983), ("num.mli", 66, 1983, 2014), 0), 0, Tag1 ("Num", 14)), 0); (("mod_num", 1192), ((Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1156), (Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1155), (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1154), 0), 100000000, 0, -1153), 0), 100000000, 0, -1152), 0, (("num.mli", 69, 2053, 2053), ("num.mli", 69, 2053, 2084), 0), 0, Tag1 ("Num", 15)), 0); (("**/", 1193), ((Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1151), (Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1150), (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1149), 0), 100000000, 0, -1148), 0), 100000000, 0, -1147), 0, (("num.mli", 72, 2124, 2124), ("num.mli", 72, 2124, 2155), 0), 0, Tag1 ("Num", 16)), 0); (("power_num", 1194), ((Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1146), (Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1145), (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1144), 0), 100000000, 0, -1143), 0), 100000000, 0, -1142), 0, (("num.mli", 75, 2190, 2190), ("num.mli", 75, 2190, 2223), 0), 0, Tag1 ("Num", 17)), 0); (("abs_num", 1195), ((Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1141), (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1140), 0), 100000000, 0, -1139), 0, (("num.mli", 78, 2247, 2247), ("num.mli", 78, 2247, 2271), 0), 0, Tag1 ("Num", 18)), 0); (("succ_num", 1196), ((Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1138), (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1137), 0), 100000000, 0, -1136), 0, (("num.mli", 81, 2296, 2296), ("num.mli", 81, 2296, 2321), 0), 0, Tag1 ("Num", 19)), 0); (("pred_num", 1197), ((Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1135), (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1134), 0), 100000000, 0, -1133), 0, (("num.mli", 84, 2348, 2348), ("num.mli", 84, 2348, 2373), 0), 0, Tag1 ("Num", 20)), 0); (("incr_num", 1198), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1132)], (0)), 100000000, 0, -1131), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1130), 0), 100000000, 0, -1129), 0, (("num.mli", 87, 2400, 2400), ("num.mli", 87, 2400, 2430), 0), 0, Tag1 ("Num", 21)), 0); (("decr_num", 1199), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1128)], (0)), 100000000, 0, -1127), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1126), 0), 100000000, 0, -1125), 0, (("num.mli", 90, 2500, 2500), ("num.mli", 90, 2500, 2530), 0), 0, Tag1 ("Num", 22)), 0); (("is_integer_num", 1200), ((Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1124), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1123), 0), 100000000, 0, -1122), 0, (("num.mli", 93, 2600, 2600), ("num.mli", 93, 2600, 2632), 0), 0, Tag1 ("Num", 23)), 0); (("integer_num", 1201), ((Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1121), (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1120), 0), 100000000, 0, -1119), 0, (("num.mli", 98, 2746, 2746), ("num.mli", 98, 2746, 2774), 0), 0, Tag1 ("Num", 24)), 0); (("floor_num", 1202), ((Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1118), (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1117), 0), 100000000, 0, -1116), 0, (("num.mli", 102, 2876, 2876), ("num.mli", 102, 2876, 2902), 0), 0, Tag1 ("Num", 25)), 0); (("round_num", 1203), ((Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1115), (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1114), 0), 100000000, 0, -1113), 0, (("num.mli", 105, 2978, 2978), ("num.mli", 105, 2978, 3004), 0), 0, Tag1 ("Num", 26)), 0); (("ceiling_num", 1204), ((Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1112), (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1111), 0), 100000000, 0, -1110), 0, (("num.mli", 109, 3100, 3100), ("num.mli", 109, 3100, 3128), 0), 0, Tag1 ("Num", 27)), 0); (("sign_num", 1205), ((Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1109), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1108), 0), 100000000, 0, -1107), 0, (("num.mli", 113, 3207, 3207), ("num.mli", 113, 3207, 3232), 0), 0, Tag1 ("Num", 28)), 0); (("=/", 1206), ((Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1106), (Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1105), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1104), 0), 100000000, 0, -1103), 0), 100000000, 0, -1102), 0, (("num.mli", 118, 3344, 3344), ("num.mli", 118, 3344, 3375), 0), 0, Tag1 ("Num", 29)), 0); (("</", 1207), ((Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1101), (Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1100), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1099), 0), 100000000, 0, -1098), 0), 100000000, 0, -1097), 0, (("num.mli", 119, 3376, 3376), ("num.mli", 119, 3376, 3407), 0), 0, Tag1 ("Num", 30)), 0); ((">/", 1208), ((Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1096), (Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1095), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1094), 0), 100000000, 0, -1093), 0), 100000000, 0, -1092), 0, (("num.mli", 120, 3408, 3408), ("num.mli", 120, 3408, 3439), 0), 0, Tag1 ("Num", 31)), 0); (("<=/", 1209), ((Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1091), (Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1090), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1089), 0), 100000000, 0, -1088), 0), 100000000, 0, -1087), 0, (("num.mli", 121, 3440, 3440), ("num.mli", 121, 3440, 3472), 0), 0, Tag1 ("Num", 32)), 0); ((">=/", 1210), ((Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1086), (Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1085), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1084), 0), 100000000, 0, -1083), 0), 100000000, 0, -1082), 0, (("num.mli", 122, 3473, 3473), ("num.mli", 122, 3473, 3505), 0), 0, Tag1 ("Num", 33)), 0); (("<>/", 1211), ((Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1081), (Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1080), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1079), 0), 100000000, 0, -1078), 0), 100000000, 0, -1077), 0, (("num.mli", 123, 3506, 3506), ("num.mli", 123, 3506, 3538), 0), 0, Tag1 ("Num", 34)), 0); (("eq_num", 1212), ((Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1076), (Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1075), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1074), 0), 100000000, 0, -1073), 0), 100000000, 0, -1072), 0, (("num.mli", 124, 3539, 3539), ("num.mli", 124, 3539, 3570), 0), 0, Tag1 ("Num", 35)), 0); (("lt_num", 1213), ((Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1071), (Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1070), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1069), 0), 100000000, 0, -1068), 0), 100000000, 0, -1067), 0, (("num.mli", 125, 3571, 3571), ("num.mli", 125, 3571, 3602), 0), 0, Tag1 ("Num", 36)), 0); (("le_num", 1214), ((Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1066), (Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1065), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1064), 0), 100000000, 0, -1063), 0), 100000000, 0, -1062), 0, (("num.mli", 126, 3603, 3603), ("num.mli", 126, 3603, 3634), 0), 0, Tag1 ("Num", 37)), 0); (("gt_num", 1215), ((Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1061), (Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1060), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1059), 0), 100000000, 0, -1058), 0), 100000000, 0, -1057), 0, (("num.mli", 127, 3635, 3635), ("num.mli", 127, 3635, 3666), 0), 0, Tag1 ("Num", 38)), 0); (("ge_num", 1216), ((Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1056), (Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1055), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1054), 0), 100000000, 0, -1053), 0), 100000000, 0, -1052), 0, (("num.mli", 128, 3667, 3667), ("num.mli", 128, 3667, 3698), 0), 0, Tag1 ("Num", 39)), 0); (("compare_num", 1217), ((Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1051), (Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1050), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1049), 0), 100000000, 0, -1048), 0), 100000000, 0, -1047), 0, (("num.mli", 130, 3700, 3700), ("num.mli", 130, 3700, 3735), 0), 0, Tag1 ("Num", 40)), 0); (("max_num", 1218), ((Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1046), (Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1045), (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1044), 0), 100000000, 0, -1043), 0), 100000000, 0, -1042), 0, (("num.mli", 134, 3854, 3854), ("num.mli", 134, 3854, 3885), 0), 0, Tag1 ("Num", 41)), 0); (("min_num", 1219), ((Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1041), (Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1040), (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1039), 0), 100000000, 0, -1038), 0), 100000000, 0, -1037), 0, (("num.mli", 137, 3935, 3935), ("num.mli", 137, 3935, 3966), 0), 0, Tag1 ("Num", 42)), 0); (("string_of_num", 1220), ((Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1036), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1035), 0), 100000000, 0, -1034), 0, (("num.mli", 143, 4052, 4052), ("num.mli", 143, 4052, 4085), 0), 0, Tag1 ("Num", 43)), 0); (("approx_num_fix", 1221), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1033), (Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1032), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1031), 0), 100000000, 0, -1030), 0), 100000000, 0, -1029), 0, (("num.mli", 146, 4151, 4151), ("num.mli", 146, 4151, 4192), 0), 0, Tag1 ("Num", 44)), 0); (("approx_num_exp", 1222), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1028), (Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1027), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1026), 0), 100000000, 0, -1025), 0), 100000000, 0, -1024), 0, (("num.mli", 149, 4227, 4227), ("num.mli", 149, 4227, 4268), 0), 0, Tag1 ("Num", 45)), 0); (("num_of_string", 1223), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1023), (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1022), 0), 100000000, 0, -1021), 0, (("num.mli", 157, 4653, 4653), ("num.mli", 157, 4653, 4686), 0), 0, Tag1 ("Num", 46)), 0); (("num_of_string_opt", 1224), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1020), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1019)], (0)), 100000000, 0, -1018), 0), 100000000, 0, -1017), 0, (("num.mli", 162, 4827, 4827), ("num.mli", 162, 4827, 4870), 0), 0, Tag1 ("Num", 47)), 0); (("int_of_num", 1225), ((Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1016), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1015), 0), 100000000, 0, -1014), 0, (("num.mli", 174, 5145, 5145), ("num.mli", 174, 5145, 5172), 0), 0, Tag1 ("Num", 48)), 0); (("int_of_num_opt", 1226), ((Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1013), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1012)], (0)), 100000000, 0, -1011), 0), 100000000, 0, -1010), 0, (("num.mli", 175, 5173, 5173), ("num.mli", 175, 5173, 5210), 0), 0, Tag1 ("Num", 49)), 0); (("num_of_int", 1227), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1009), (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1008), 0), 100000000, 0, -1007), 0, (("num.mli", 176, 5211, 5211), ("num.mli", 176, 5211, 5238), 0), 0, Tag1 ("Num", 50)), 0); (("nat_of_num", 1228), ((Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1006), (Tag3 (Tag1 ((Tag2 ("Nat")), "nat"), 0, (0)), 100000000, 0, -1005), 0), 100000000, 0, -1004), 0, (("num.mli", 177, 5239, 5239), ("num.mli", 177, 5239, 5266), 0), 0, Tag1 ("Num", 51)), 0); (("nat_of_num_opt", 1229), ((Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -1003), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Nat")), "nat"), 0, (0)), 100000000, 0, -1002)], (0)), 100000000, 0, -1001), 0), 100000000, 0, -1000), 0, (("num.mli", 178, 5267, 5267), ("num.mli", 178, 5267, 5304), 0), 0, Tag1 ("Num", 52)), 0); (("num_of_nat", 1230), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Nat")), "nat"), 0, (0)), 100000000, 0, -999), (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -998), 0), 100000000, 0, -997), 0, (("num.mli", 179, 5305, 5305), ("num.mli", 179, 5305, 5332), 0), 0, Tag1 ("Num", 53)), 0); (("num_of_big_int", 1231), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -996), (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -995), 0), 100000000, 0, -994), 0, (("num.mli", 180, 5333, 5333), ("num.mli", 180, 5333, 5368), 0), 0, Tag1 ("Num", 54)), 0); (("big_int_of_num", 1232), ((Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -993), (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -992), 0), 100000000, 0, -991), 0, (("num.mli", 181, 5369, 5369), ("num.mli", 181, 5369, 5404), 0), 0, Tag1 ("Num", 55)), 0); (("big_int_of_num_opt", 1233), ((Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -990), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -989)], (0)), 100000000, 0, -988), 0), 100000000, 0, -987), 0, (("num.mli", 182, 5405, 5405), ("num.mli", 182, 5405, 5450), 0), 0, Tag1 ("Num", 56)), 0); (("ratio_of_num", 1234), ((Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -986), (Tag3 (Tag1 ((Tag2 ("Ratio")), "ratio"), 0, (0)), 100000000, 0, -985), 0), 100000000, 0, -984), 0, (("num.mli", 183, 5451, 5451), ("num.mli", 183, 5451, 5482), 0), 0, Tag1 ("Num", 57)), 0); (("num_of_ratio", 1235), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ratio")), "ratio"), 0, (0)), 100000000, 0, -983), (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -982), 0), 100000000, 0, -981), 0, (("num.mli", 184, 5483, 5483), ("num.mli", 184, 5483, 5514), 0), 0, Tag1 ("Num", 58)), 0); (("float_of_num", 1236), ((Tag1 (0, (Tag3 ((("num", 1180)), 0, (0)), 100000000, 0, -980), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -979), 0), 100000000, 0, -978), 0, (("num.mli", 185, 5515, 5515), ("num.mli", 185, 5515, 5546), 0), 0, Tag1 ("Num", 59)), 0); (("sexp_of_num", 1237), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Num")), "num"), 0, (0)), 100000000, 0, -977), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -976), 0), 100000000, 0, -975), 0, (("num/lib/std.ml", 25, 485, 491), ("num/lib/std.ml", 25, 485, 502), 0), 0, Tag1 ("Sexplib_num__Std", 9)), 0); (("num_of_sexp", 1238), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -974), (Tag3 (Tag1 ((Tag2 ("Num")), "num"), 0, (0)), 100000000, 0, -973), 0), 100000000, 0, -972), 0, (("num/lib/std.ml", 26, 534, 540), ("num/lib/std.ml", 26, 534, 551), 0), 0, Tag1 ("Sexplib_num__Std", 10)), 0)]), 0, (("num/lib/std.ml", 22, 450, 450), ("num/lib/std.ml", 27, 583, 586), 0), Tag1 ("Sexplib_num__Std", 11)), 0, 0)], "Sexplib_num__Std", [("Sexplib_num__Std", ("\249!\162 \186\239\1758\027\191\200\214\1956tw")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Random", ("\020\005Xq\171\026\218\152X\135\254\023\133zK\200")); ("Stdlib__Printf", ("\215<\139]\021\142\224E\245m\198qc(W\229")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Bytes", ("C\134\194)\175\222\137p\205\246\244\r\241\164P\209")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sexplib_num__Sexplib_num_conv", ("\n\211\139\014\219\170\137\132\145J\146\022i|\243\209")); ("Sexplib_num", ("\140w|?\006k\215i\183d\196\2116Z\213^")); ("Sexplib__Type_with_layout", ("Q\170\019\238\156\246\192\156\b`\250o[6g\024")); ("Sexplib__Type", ("\147\252\252\167_\149\137\235\001d\241\255`\173Cs")); ("Sexplib__Src_pos", ("\157\022\246\144K\127\174bk\214\128&E\nh\213")); ("Sexplib__Sexp_intf", ("\\\031Fc\157\000\226\253\208\151\241\218a\195\187w")); ("Sexplib__Sexp", ("b\191\237;\251D\001\027M=x\201\143\185:d")); ("Sexplib__Pre_sexp", ("))\b\146\225\144^\227\218\181;f\220\tA\006")); ("Sexplib__Parser_with_layout", ("W\155\134\171aBJ\251|G6\192'S\210<")); ("Sexplib__Parser", ("\203&3\188\178\148:\254\176\140\127\227\029jQL")); ("Sexplib__Lexer", ("M\181eW\204\2193X\225\170yM\228!\146s")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("Sexplib", ("\249\031\145\178\014\020\n\209\129\143\012\015<K\177\189")); ("Ratio", ("\133\177\241\180\127#AW\127v\180\025\250\143\018W")); ("Parsexp__Positions", ("BE\135\222xW\224\233\184\004o\169\248\bH\230")); ("Parsexp__Parsexp_intf", ("\006\239e\204\167\243e2&\192H\160\029XNm")); ("Parsexp__Parser_intf", ("\154\197J\002\004\252i\162\190\241\151\210\157\024\167e")); ("Parsexp__Parser", ("n\164F;=\199\178\019\150]\2502\176\014a\165")); ("Parsexp__Parse_error_intf", ("\011\229\182\179W\161\176\160P\249\165\214ef\011\229")); ("Parsexp__Parse_error", ("*\031\166\142M\171\026\030\\K7\157Y\232\208\234")); ("Parsexp__Old_parser_cont_state", ("\2535&90\136_\154\027}Oc0\138%X")); ("Parsexp__Of_sexp_error", ("\253\171Y\150\210\218\191\255\160\211\134d/l\132\228")); ("Parsexp__Import", ("\017\029\157\225\239\135p*0\207\146\197\020\128\195!")); ("Parsexp__Cst", (")\228;6o~\227\000pRf\153\216\244sD")); ("Parsexp__Conv_intf", ("\004r\193,k\2254\168\149\229+hmw\134\228")); ("Parsexp__Conv_error", ("\195Bo\140A|\220\136\210\137\165&!\164\134\021")); ("Parsexp__Conv", ("\238|^\141\226\177\185\022$*\023\188\020\002P\229")); ("Parsexp__Automaton_state_intf", ("\196\146]2\143u|+%\027\185v2\225\r\229")); ("Parsexp__Automaton_state", ("L#\030=\218R\022 \228<\188-\r\211\157_")); ("Parsexp__Automaton_stack_intf", ("\235\204\0296]\2449F\029\b:\006\217\162f\024")); ("Parsexp__Automaton_stack", ("\246/\135\251\031)\015r\003\237\254S$\181\243\201")); ("Parsexp__", ("\182\180\203\030\218\020\246\196\221\171_\030GE\171\192")); ("Parsexp", ("\023d\176\173 \b\181o\028\163R\205\005\226BE")); ("Num", ("^Dd\228\"\203\221'\209\144a\020\148\026\225U")); ("Nat", ("\158\218\202\184\174E)\133)>\025\209\140\204/Z")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Big_int", ("t\020\020^p\161P\198\185\167\t\215\248\017\232\207"))], [(0)])

  end

module Name = Odoc_name
type exception_alias = {
  ea_name : Name.t;
  mutable ea_ex : t_exception option;
}
and t_exception = {
  ex_name : Name.t;
  mutable ex_info : Odoc_types.info option;
  ex_args : Odoc_type.constructor_args;
  ex_ret : Types.type_expr option;
  ex_alias : exception_alias option;
  mutable ex_loc : Odoc_types.location;
  mutable ex_code : string option;("DEBUG:rule", [Tag3 (("Name", 435), 1, (Tag3 ((Tag2 ("Odoc_name"))), 0, (("odoc_exception.mli", 22, 1323, 1323), ("odoc_exception.mli", 22, 1323, 1346), 0), Tag1 ("Odoc_exception", 0)), 0, 0); Tag1 (("exception_alias", 436), (0, 0, [[(("ea_name", 292), 0, (Tag3 (Tag1 ((("Name", 435)), "t"), 0, (0)), 100000000, 0, -13), (("odoc_exception.mli", 25, 1373, 1375), ("odoc_exception.mli", 25, 1373, 1392), 0), 0, Tag1 ("Odoc_exception", 3)); (("ea_ex", 293), 1, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t_exception", 437)), 0, (0)), 100000000, 0, -15)], (0)), 100000000, 0, -14), (("odoc_exception.mli", 26, 1393, 1395), ("odoc_exception.mli", 26, 1393, 1430), 0), 0, Tag1 ("Odoc_exception", 4))]], 1, 0, 0, 0, 0, 0, (("odoc_exception.mli", 24, 1348, 1348), ("odoc_exception.mli", 27, 1431, 1432), 0), 0, 0, 0, Tag1 ("Odoc_exception", 1)), 1, 0); Tag1 (("t_exception", 437), (0, 0, [[(("ex_name", 294), 0, (Tag3 (Tag1 ((("Name", 435)), "t"), 0, (0)), 100000000, 0, -2), (("odoc_exception.mli", 29, 1453, 1455), ("odoc_exception.mli", 29, 1453, 1472), 0), 0, Tag1 ("Odoc_exception", 6)); (("ex_info", 314), 1, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Odoc_types")), "info"), 0, (0)), 100000000, 0, -4)], (0)), 100000000, 0, -3), (("odoc_exception.mli", 30, 1473, 1475), ("odoc_exception.mli", 30, 1473, 1516), 0), 0, Tag1 ("Odoc_exception", 7)); (("ex_args", 324), 0, (Tag3 (Tag1 ((Tag2 ("Odoc_type")), "constructor_args"), 0, (0)), 100000000, 0, -5), (("odoc_exception.mli", 31, 1517, 1519), ("odoc_exception.mli", 31, 1517, 1556), 0), 0, Tag1 ("Odoc_exception", 8)); (("ex_ret", 431), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -7)], (0)), 100000000, 0, -6), (("odoc_exception.mli", 32, 1557, 1559), ("odoc_exception.mli", 32, 1557, 1591), 0), 0, Tag1 ("Odoc_exception", 9)); (("ex_alias", 432), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("exception_alias", 436)), 0, (0)), 100000000, 0, -9)], (0)), 100000000, 0, -8), (("odoc_exception.mli", 33, 1592, 1594), ("odoc_exception.mli", 33, 1592, 1628), 0), 0, Tag1 ("Odoc_exception", 10)); (("ex_loc", 433), 1, (Tag3 (Tag1 ((Tag2 ("Odoc_types")), "location"), 0, (0)), 100000000, 0, -10), (("odoc_exception.mli", 34, 1629, 1631), ("odoc_exception.mli", 34, 1629, 1668), 0), 0, Tag1 ("Odoc_exception", 11)); (("ex_code", 434), 1, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12)], (0)), 100000000, 0, -11), (("odoc_exception.mli", 35, 1669, 1671), ("odoc_exception.mli", 35, 1669, 1703), 0), 0, Tag1 ("Odoc_exception", 12))]], 1, 0, 0, 0, 0, 0, (("odoc_exception.mli", 28, 1433, 1433), ("odoc_exception.mli", 36, 1704, 1705), 0), 0, 0, 0, Tag1 ("Odoc_exception", 2)), 2, 0)], "Odoc_exception", [("Odoc_exception", ("\229\177~\170m:\200\2180e\002\1504\rj\160")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Types", ("\177\238\029.\220\006\163!\230\015\006\182\133\155\194\166")); ("Type_immediacy", ("\"\127k\011Q\241\211\138\193;8\142\129\141#\251")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shape", ("\235\127Y\213\025\137=\244\218\181\248N\189\188\216p")); ("Primitive", ("}Shh\162\015|\220A\203\249\232\245G\213\019")); ("Path", ("\012\183\178\025\1298\228*\021r\185\160Y\252\n\026")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Outcometree", ("9\021%\234\211\206\210\004H\165\208\2014\234Q\142")); ("Odoc_types", ("<k{\137\201\170z%E\221\170\147\151\127\189\015")); ("Odoc_type", ("\236\128j}\240\188\1487q\214\192oj\158\133\170")); ("Odoc_name", ("\248'\1872Z\r\160\146\012'\180V\240\1577f")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Identifiable", ("\004F\207\014\158GU\001\184\214\187%/#;\211")); ("Ident", ("\b9;!\187.\220\163(x\b\174\\\223\020\004")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216"))], [(0)])

}

module type Infix =
  sig
    type t
    val ( + ) : t -> t -> t
    val ( - ) : t -> t -> t
    val ( * ) : t -> t -> t
    val ( / ) : t -> t -> t
    val ( mod ) : t -> t -> t
    val ( land ) : t -> t -> t
    val ( lor ) : t -> t -> t
    val ( lxor ) : t -> t -> t
    val ( lsl ) : t -> int -> t
    val ( lsr ) : t -> int -> t
    val ( asr ) : t -> int -> t
  end
module type S =
  sig
    type t
    module Infix :
      sig
        val ( + ) : t -> t -> t
        val ( - ) : t -> t -> t
        val ( * ) : t -> t -> t
        val ( / ) : t -> t -> t
        val ( mod ) : t -> t -> t
        val ( land ) : t -> t -> t
        val ( lor ) : t -> t -> t
        val ( lxor ) : t -> t -> t
        val ( lsl ) : t -> int -> t
        val ( lsr ) : t -> int -> t
        val ( asr ) : t -> int -> t
      end
    val add : t -> t -> t
    val sub : t -> t -> t
    val mul : t -> t -> t
    val div : t -> t -> t
    val rem : t -> t -> t
    val max_int : t
    val logand : t -> t -> t
    val logor : t -> t -> t
    val logxor : t -> t -> t
    val shift_left : t -> int -> t
    val shift_right : t -> int -> t
    val of_int : int -> t
    val to_int : t -> int
    val of_string : string -> t
    val to_string : t -> string
    val to_hexstring : t -> string
    val zero : t
    val one : t
    val lognot : t -> t
    val succ : t -> t
    val pred : t -> t
    val compare : t -> t -> int
    val equal : t -> t -> bool
    val max : t -> t -> t
    val min : t -> t -> t
    val of_string_opt : string -> t option
    val pp : Format.formatter -> t -> unit
    val pp_hex : Format.formatter -> t -> unit
    val neg : t -> t
    val abs : t -> t
    val minus_one : t
    val min_int : t
    val shift_right_logical : t -> int -> t
    val of_nativeint : nativeint -> t
    val to_nativeint : t -> nativeint
    val of_int64 : int64 -> t
    val to_int64 : t -> int64
  end
module Int :
  sig
    type t = int
    module Infix :
      sig
        val ( + ) : t -> t -> t
        val ( - ) : t -> t -> t
        val ( * ) : t -> t -> t
        val ( / ) : t -> t -> t
        val ( mod ) : t -> t -> t
        val ( land ) : t -> t -> t
        val ( lor ) : t -> t -> t
        val ( lxor ) : t -> t -> t
        val ( lsl ) : t -> int -> t
        val ( lsr ) : t -> int -> t
        val ( asr ) : t -> int -> t
      end
    val add : t -> t -> t
    val sub : t -> t -> t
    val mul : t -> t -> t
    val div : t -> t -> t
    val rem : t -> t -> t
    val max_int : t
    val logand : t -> t -> t
    val logor : t -> t -> t
    val logxor : t -> t -> t
    val shift_left : t -> int -> t
    val shift_right : t -> int -> t
    val of_int : int -> t
    val to_int : t -> int
    val of_string : string -> t
    val to_string : t -> string
    val to_hexstring : t -> string
    val zero : t
    val one : t
    val lognot : t -> t
    val succ : t -> t
    val pred : t -> t
    val compare : t -> t -> int
    val equal : t -> t -> bool
    val max : t -> t -> t
    val min : t -> t -> t
    val of_string_opt : string -> t option
    val pp : Format.formatter -> t -> unit
    val pp_hex : Format.formatter -> t -> unit
    val neg : t -> t
    val abs : t -> t
    val minus_one : t
    val min_int : t
    val shift_right_logical : t -> int -> t
    val of_nativeint : nativeint -> t
    val to_nativeint : t -> nativeint
    val of_int64 : int64 -> t
    val to_int64 : t -> int64
  end
module Int32 :
  sig
    type t = int32
    module Infix :
      sig
        val ( + ) : t -> t -> t
        val ( - ) : t -> t -> t
        val ( * ) : t -> t -> t
        val ( / ) : t -> t -> t
        val ( mod ) : t -> t -> t
        val ( land ) : t -> t -> t
        val ( lor ) : t -> t -> t
        val ( lxor ) : t -> t -> t
        val ( lsl ) : t -> int -> t
        val ( lsr ) : t -> int -> t
        val ( asr ) : t -> int -> t
      end
    val add : t -> t -> t
    val sub : t -> t -> t
    val mul : t -> t -> t
    val div : t -> t -> t
    val rem : t -> t -> t
    val max_int : t
    val logand : t -> t -> t
    val logor : t -> t -> t
    val logxor : t -> t -> t
    val shift_left : t -> int -> t
    val shift_right : t -> int -> t
    val of_int : int -> t
    val to_int : t -> int
    val of_string : string -> t
    val to_string : t -> string
    val to_hexstring : t -> string
    val zero : t
    val one : t
    val lognot : t -> t
    val succ : t -> t
    val pred : t -> t
    val compare : t -> t -> int
    val equal : t -> t -> bool
    val max : t -> t -> t
    val min : t -> t -> t
    val of_string_opt : string -> t option
    val pp : Format.formatter -> t -> unit
    val pp_hex : Format.formatter -> t -> unit
    val neg : t -> t
    val abs : t -> t
    val minus_one : t
    val min_int : t
    val shift_right_logical : t -> int -> t
    val of_nativeint : nativeint -> t
    val to_nativeint : t -> nativeint
    val of_int64 : int64 -> t
    val to_int64 : t -> int64
  end
module Int64 :
  sig
    type t = int64
    module Infix :
      sig
        val ( + ) : t -> t -> t
        val ( - ) : t -> t -> t
        val ( * ) : t -> t -> t
        val ( / ) : t -> t -> t
        val ( mod ) : t -> t -> t
        val ( land ) : t -> t -> t
        val ( lor ) : t -> t -> t
        val ( lxor ) : t -> t -> t
        val ( lsl ) : t -> int -> t
        val ( lsr ) : t -> int -> t
        val ( asr ) : t -> int -> t
      end
    val add : t -> t -> t
    val sub : t -> t -> t
    val mul : t -> t -> t
    val div : t -> t -> t
    val rem : t -> t -> t
    val max_int : t
    val logand : t -> t -> t
    val logor : t -> t -> t
    val logxor : t -> t -> t
    val shift_left : t -> int -> t
    val shift_right : t -> int -> t
    val of_int : int -> t
    val to_int : t -> int
    val of_string : string -> t
    val to_string : t -> string
    val to_hexstring : t -> string
    val zero : t
    val one : t
    val lognot : t -> t
    val succ : t -> t
    val pred : t -> t
    val compare : t -> t -> int
    val equal : t -> t -> bool
    val max : t -> t -> t
    val min : t -> t -> t
    val of_string_opt : string -> t option
    val pp : Format.formatter -> t -> unit
    val pp_hex : Format.formatter -> t -> unit
    val neg : t -> t
    val abs : t -> t
    val minus_one : t
    val min_int : t
    val shift_right_logical : t -> int -> t
    val of_nativeint : nativeint -> t
    val to_nativeint : t -> nativeint
    val of_int64 : int64 -> t
    val to_int64 : t -> int64
  end
module SInt : S
module Long : S
module LLong : S
type sint = SInt.t
type long = Long.t
type llong = LLong.t("DEBUG:rule", [Tag4 (("Infix", 890), ((Tag1 ([Tag1 (("t", 902), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/signed.mli", 12, 258, 260), ("src/signed.mli", 12, 258, 266), 0), 0, 0, 0, Tag1 ("Signed", 0)), 1, 0); (("+", 903), ((Tag1 (0, (Tag3 ((("t", 902)), 0, (0)), 100000000, 0, -62), (Tag1 (0, (Tag3 ((("t", 902)), 0, (0)), 100000000, 0, -61), (Tag3 ((("t", 902)), 0, (0)), 100000000, 0, -60), 0), 100000000, 0, -59), 0), 100000000, 0, -58), 0, (("src/signed.mli", 14, 268, 278), ("src/signed.mli", 14, 268, 309), 0), 0, Tag1 ("Unsigned", 1)), 0); (("-", 904), ((Tag1 (0, (Tag3 ((("t", 902)), 0, (0)), 100000000, 0, -57), (Tag1 (0, (Tag3 ((("t", 902)), 0, (0)), 100000000, 0, -56), (Tag3 ((("t", 902)), 0, (0)), 100000000, 0, -55), 0), 100000000, 0, -54), 0), 100000000, 0, -53), 0, (("src/signed.mli", 14, 268, 278), ("src/signed.mli", 14, 268, 309), 0), 0, Tag1 ("Unsigned", 2)), 0); (("*", 905), ((Tag1 (0, (Tag3 ((("t", 902)), 0, (0)), 100000000, 0, -52), (Tag1 (0, (Tag3 ((("t", 902)), 0, (0)), 100000000, 0, -51), (Tag3 ((("t", 902)), 0, (0)), 100000000, 0, -50), 0), 100000000, 0, -49), 0), 100000000, 0, -48), 0, (("src/signed.mli", 14, 268, 278), ("src/signed.mli", 14, 268, 309), 0), 0, Tag1 ("Unsigned", 3)), 0); (("/", 906), ((Tag1 (0, (Tag3 ((("t", 902)), 0, (0)), 100000000, 0, -47), (Tag1 (0, (Tag3 ((("t", 902)), 0, (0)), 100000000, 0, -46), (Tag3 ((("t", 902)), 0, (0)), 100000000, 0, -45), 0), 100000000, 0, -44), 0), 100000000, 0, -43), 0, (("src/signed.mli", 14, 268, 278), ("src/signed.mli", 14, 268, 309), 0), 0, Tag1 ("Unsigned", 4)), 0); (("mod", 907), ((Tag1 (0, (Tag3 ((("t", 902)), 0, (0)), 100000000, 0, -42), (Tag1 (0, (Tag3 ((("t", 902)), 0, (0)), 100000000, 0, -41), (Tag3 ((("t", 902)), 0, (0)), 100000000, 0, -40), 0), 100000000, 0, -39), 0), 100000000, 0, -38), 0, (("src/signed.mli", 14, 268, 278), ("src/signed.mli", 14, 268, 309), 0), 0, Tag1 ("Unsigned", 5)), 0); (("land", 908), ((Tag1 (0, (Tag3 ((("t", 902)), 0, (0)), 100000000, 0, -37), (Tag1 (0, (Tag3 ((("t", 902)), 0, (0)), 100000000, 0, -36), (Tag3 ((("t", 902)), 0, (0)), 100000000, 0, -35), 0), 100000000, 0, -34), 0), 100000000, 0, -33), 0, (("src/signed.mli", 14, 268, 278), ("src/signed.mli", 14, 268, 309), 0), 0, Tag1 ("Unsigned", 6)), 0); (("lor", 909), ((Tag1 (0, (Tag3 ((("t", 902)), 0, (0)), 100000000, 0, -32), (Tag1 (0, (Tag3 ((("t", 902)), 0, (0)), 100000000, 0, -31), (Tag3 ((("t", 902)), 0, (0)), 100000000, 0, -30), 0), 100000000, 0, -29), 0), 100000000, 0, -28), 0, (("src/signed.mli", 14, 268, 278), ("src/signed.mli", 14, 268, 309), 0), 0, Tag1 ("Unsigned", 7)), 0); (("lxor", 910), ((Tag1 (0, (Tag3 ((("t", 902)), 0, (0)), 100000000, 0, -27), (Tag1 (0, (Tag3 ((("t", 902)), 0, (0)), 100000000, 0, -26), (Tag3 ((("t", 902)), 0, (0)), 100000000, 0, -25), 0), 100000000, 0, -24), 0), 100000000, 0, -23), 0, (("src/signed.mli", 14, 268, 278), ("src/signed.mli", 14, 268, 309), 0), 0, Tag1 ("Unsigned", 8)), 0); (("lsl", 911), ((Tag1 (0, (Tag3 ((("t", 902)), 0, (0)), 100000000, 0, -22), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -21), (Tag3 ((("t", 902)), 0, (0)), 100000000, 0, -20), 0), 100000000, 0, -19), 0), 100000000, 0, -18), 0, (("src/signed.mli", 14, 268, 278), ("src/signed.mli", 14, 268, 309), 0), 0, Tag1 ("Unsigned", 9)), 0); (("lsr", 912), ((Tag1 (0, (Tag3 ((("t", 902)), 0, (0)), 100000000, 0, -17), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -16), (Tag3 ((("t", 902)), 0, (0)), 100000000, 0, -15), 0), 100000000, 0, -14), 0), 100000000, 0, -13), 0, (("src/signed.mli", 14, 268, 278), ("src/signed.mli", 14, 268, 309), 0), 0, Tag1 ("Unsigned", 10)), 0); (("asr", 913), ((Tag1 (0, (Tag3 ((("t", 902)), 0, (0)), 100000000, 0, -12), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -11), (Tag3 ((("t", 902)), 0, (0)), 100000000, 0, -10), 0), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("src/signed.mli", 16, 311, 313), ("src/signed.mli", 16, 311, 338), 0), 0, Tag1 ("Signed", 2)), 0)])), 0, (("src/signed.mli", 11, 234, 234), ("src/signed.mli", 18, 416, 419), 0), Tag1 ("Signed", 3)), 0); Tag4 (("S", 891), ((Tag1 ([Tag1 (("t", 914), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/signed.mli", 22, 442, 444), ("src/signed.mli", 22, 442, 450), 0), 0, 0, 0, Tag1 ("Signed", 4)), 1, 0); Tag3 (("Infix", 915), 0, (Tag1 ([(("+", 953), ((Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -253), (Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -252), (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -251), 0), 100000000, 0, -250), 0), 100000000, 0, -249), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 1)), 0); (("-", 954), ((Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -248), (Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -247), (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -246), 0), 100000000, 0, -245), 0), 100000000, 0, -244), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 2)), 0); (("*", 955), ((Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -243), (Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -242), (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -241), 0), 100000000, 0, -240), 0), 100000000, 0, -239), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 3)), 0); (("/", 956), ((Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -238), (Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -237), (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -236), 0), 100000000, 0, -235), 0), 100000000, 0, -234), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 4)), 0); (("mod", 957), ((Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -233), (Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -232), (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -231), 0), 100000000, 0, -230), 0), 100000000, 0, -229), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 5)), 0); (("land", 958), ((Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -228), (Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -227), (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -226), 0), 100000000, 0, -225), 0), 100000000, 0, -224), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 6)), 0); (("lor", 959), ((Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -223), (Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -222), (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -221), 0), 100000000, 0, -220), 0), 100000000, 0, -219), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 7)), 0); (("lxor", 960), ((Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -218), (Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -217), (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -216), 0), 100000000, 0, -215), 0), 100000000, 0, -214), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 8)), 0); (("lsl", 961), ((Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -213), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -212), (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -211), 0), 100000000, 0, -210), 0), 100000000, 0, -209), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 9)), 0); (("lsr", 962), ((Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -208), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -207), (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -206), 0), 100000000, 0, -205), 0), 100000000, 0, -204), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 10)), 0); (("asr", 963), ((Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -203), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -202), (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -201), 0), 100000000, 0, -200), 0), 100000000, 0, -199), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Signed", 2)), 0)]), 0, (("src/signed.mli", 24, 452, 454), ("src/signed.mli", 24, 452, 491), 0), Tag1 ("Signed", 6)), 0, 0); (("add", 916), ((Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -198), (Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -197), (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -196), 0), 100000000, 0, -195), 0), 100000000, 0, -194), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 13)), 0); (("sub", 917), ((Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -193), (Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -192), (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -191), 0), 100000000, 0, -190), 0), 100000000, 0, -189), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 14)), 0); (("mul", 918), ((Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -188), (Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -187), (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -186), 0), 100000000, 0, -185), 0), 100000000, 0, -184), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 15)), 0); (("div", 919), ((Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -183), (Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -182), (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -181), 0), 100000000, 0, -180), 0), 100000000, 0, -179), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 16)), 0); (("rem", 920), ((Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -178), (Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -177), (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -176), 0), 100000000, 0, -175), 0), 100000000, 0, -174), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 17)), 0); (("max_int", 921), ((Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -173), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 18)), 0); (("logand", 922), ((Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -172), (Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -171), (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -170), 0), 100000000, 0, -169), 0), 100000000, 0, -168), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 19)), 0); (("logor", 923), ((Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -167), (Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -166), (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -165), 0), 100000000, 0, -164), 0), 100000000, 0, -163), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 20)), 0); (("logxor", 924), ((Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -162), (Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -161), (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -160), 0), 100000000, 0, -159), 0), 100000000, 0, -158), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 21)), 0); (("shift_left", 925), ((Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -157), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -156), (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -155), 0), 100000000, 0, -154), 0), 100000000, 0, -153), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 22)), 0); (("shift_right", 926), ((Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -152), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -151), (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -150), 0), 100000000, 0, -149), 0), 100000000, 0, -148), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 23)), 0); (("of_int", 927), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -147), (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -146), 0), 100000000, 0, -145), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 24)), 0); (("to_int", 928), ((Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -144), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -143), 0), 100000000, 0, -142), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 25)), 0); (("of_string", 929), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -141), (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -140), 0), 100000000, 0, -139), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 28)), 0); (("to_string", 930), ((Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -138), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -137), 0), 100000000, 0, -136), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 29)), 0); (("to_hexstring", 931), ((Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -135), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -134), 0), 100000000, 0, -133), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 30)), 0); (("zero", 932), ((Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -132), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 31)), 0); (("one", 933), ((Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -131), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 32)), 0); (("lognot", 934), ((Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -130), (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -129), 0), 100000000, 0, -128), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 33)), 0); (("succ", 935), ((Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -127), (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -126), 0), 100000000, 0, -125), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 34)), 0); (("pred", 936), ((Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -124), (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -123), 0), 100000000, 0, -122), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 35)), 0); (("compare", 937), ((Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -121), (Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -120), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -119), 0), 100000000, 0, -118), 0), 100000000, 0, -117), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 36)), 0); (("equal", 938), ((Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -116), (Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -115), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -114), 0), 100000000, 0, -113), 0), 100000000, 0, -112), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 37)), 0); (("max", 939), ((Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -111), (Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -110), (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -109), 0), 100000000, 0, -108), 0), 100000000, 0, -107), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 38)), 0); (("min", 940), ((Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -106), (Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -105), (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -104), 0), 100000000, 0, -103), 0), 100000000, 0, -102), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 39)), 0); (("of_string_opt", 941), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -101), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -100)], (0)), 100000000, 0, -99), 0), 100000000, 0, -98), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 40)), 0); (("pp", 942), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -97), (Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -96), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -95), 0), 100000000, 0, -94), 0), 100000000, 0, -93), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 41)), 0); (("pp_hex", 943), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -92), (Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -91), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -90), 0), 100000000, 0, -89), 0), 100000000, 0, -88), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 42)), 0); (("neg", 944), ((Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -87), (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -86), 0), 100000000, 0, -85), 0, (("src/signed.mli", 29, 580, 582), ("src/signed.mli", 29, 580, 598), 0), 0, Tag1 ("Signed", 8)), 0); (("abs", 945), ((Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -84), (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -83), 0), 100000000, 0, -82), 0, (("src/signed.mli", 32, 625, 627), ("src/signed.mli", 32, 625, 643), 0), 0, Tag1 ("Signed", 9)), 0); (("minus_one", 946), ((Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -81), 0, (("src/signed.mli", 35, 697, 699), ("src/signed.mli", 35, 697, 716), 0), 0, Tag1 ("Signed", 10)), 0); (("min_int", 947), ((Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -80), 0, (("src/signed.mli", 38, 740, 742), ("src/signed.mli", 38, 740, 757), 0), 0, Tag1 ("Signed", 11)), 0); (("shift_right_logical", 948), ((Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -79), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -78), (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -77), 0), 100000000, 0, -76), 0), 100000000, 0, -75), 0, (("src/signed.mli", 41, 804, 806), ("src/signed.mli", 41, 804, 845), 0), 0, Tag1 ("Signed", 12)), 0); (("of_nativeint", 949), ((Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -74), (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -73), 0), 100000000, 0, -72), 0, (("src/signed.mli", 45, 965, 967), ("src/signed.mli", 45, 965, 1000), 0), 0, Tag1 ("Signed", 13)), 0); (("to_nativeint", 950), ((Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -71), (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -70), 0), 100000000, 0, -69), 0, (("src/signed.mli", 48, 1066, 1068), ("src/signed.mli", 48, 1066, 1101), 0), 0, Tag1 ("Signed", 14)), 0); (("of_int64", 951), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -68), (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -67), 0), 100000000, 0, -66), 0, (("src/signed.mli", 51, 1167, 1169), ("src/signed.mli", 51, 1167, 1194), 0), 0, Tag1 ("Signed", 15)), 0); (("to_int64", 952), ((Tag1 (0, (Tag3 ((("t", 914)), 0, (0)), 100000000, 0, -65), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -64), 0), 100000000, 0, -63), 0, (("src/signed.mli", 54, 1256, 1258), ("src/signed.mli", 54, 1256, 1283), 0), 0, Tag1 ("Signed", 16)), 0)])), 0, (("src/signed.mli", 21, 422, 422), ("src/signed.mli", 56, 1345, 1348), 0), Tag1 ("Signed", 17)), 0); Tag3 (("Int", 892), 0, (Tag1 ([Tag1 (("t", 964), (0, 0, 0, 1, ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -390)), 0, 0, 0, 0, (("src/signed.mli", 59, 1383, 1403), ("src/signed.mli", 59, 1383, 1415), 0), 0, 1, 0, Tag1 ("Signed", 18)), 1, 0); Tag3 (("Infix", 965), 0, (Tag1 ([(("+", 1003), ((Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -445), (Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -444), (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -443), 0), 100000000, 0, -442), 0), 100000000, 0, -441), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 1)), 0); (("-", 1004), ((Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -440), (Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -439), (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -438), 0), 100000000, 0, -437), 0), 100000000, 0, -436), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 2)), 0); (("*", 1005), ((Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -435), (Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -434), (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -433), 0), 100000000, 0, -432), 0), 100000000, 0, -431), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 3)), 0); (("/", 1006), ((Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -430), (Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -429), (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -428), 0), 100000000, 0, -427), 0), 100000000, 0, -426), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 4)), 0); (("mod", 1007), ((Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -425), (Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -424), (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -423), 0), 100000000, 0, -422), 0), 100000000, 0, -421), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 5)), 0); (("land", 1008), ((Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -420), (Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -419), (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -418), 0), 100000000, 0, -417), 0), 100000000, 0, -416), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 6)), 0); (("lor", 1009), ((Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -415), (Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -414), (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -413), 0), 100000000, 0, -412), 0), 100000000, 0, -411), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 7)), 0); (("lxor", 1010), ((Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -410), (Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -409), (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -408), 0), 100000000, 0, -407), 0), 100000000, 0, -406), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 8)), 0); (("lsl", 1011), ((Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -405), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -404), (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -403), 0), 100000000, 0, -402), 0), 100000000, 0, -401), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 9)), 0); (("lsr", 1012), ((Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -400), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -399), (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -398), 0), 100000000, 0, -397), 0), 100000000, 0, -396), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 10)), 0); (("asr", 1013), ((Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -395), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -394), (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -393), 0), 100000000, 0, -392), 0), 100000000, 0, -391), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Signed", 2)), 0)]), 0, (("src/signed.mli", 24, 452, 454), ("src/signed.mli", 24, 452, 491), 0), Tag1 ("Signed", 6)), 0, 0); (("add", 966), ((Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -389), (Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -388), (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -387), 0), 100000000, 0, -386), 0), 100000000, 0, -385), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 13)), 0); (("sub", 967), ((Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -384), (Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -383), (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -382), 0), 100000000, 0, -381), 0), 100000000, 0, -380), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 14)), 0); (("mul", 968), ((Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -379), (Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -378), (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -377), 0), 100000000, 0, -376), 0), 100000000, 0, -375), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 15)), 0); (("div", 969), ((Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -374), (Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -373), (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -372), 0), 100000000, 0, -371), 0), 100000000, 0, -370), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 16)), 0); (("rem", 970), ((Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -369), (Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -368), (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -367), 0), 100000000, 0, -366), 0), 100000000, 0, -365), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 17)), 0); (("max_int", 971), ((Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -364), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 18)), 0); (("logand", 972), ((Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -363), (Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -362), (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -361), 0), 100000000, 0, -360), 0), 100000000, 0, -359), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 19)), 0); (("logor", 973), ((Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -358), (Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -357), (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -356), 0), 100000000, 0, -355), 0), 100000000, 0, -354), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 20)), 0); (("logxor", 974), ((Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -353), (Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -352), (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -351), 0), 100000000, 0, -350), 0), 100000000, 0, -349), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 21)), 0); (("shift_left", 975), ((Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -348), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -347), (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -346), 0), 100000000, 0, -345), 0), 100000000, 0, -344), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 22)), 0); (("shift_right", 976), ((Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -343), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -342), (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -341), 0), 100000000, 0, -340), 0), 100000000, 0, -339), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 23)), 0); (("of_int", 977), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -338), (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -337), 0), 100000000, 0, -336), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 24)), 0); (("to_int", 978), ((Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -335), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -334), 0), 100000000, 0, -333), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 25)), 0); (("of_string", 979), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -332), (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -331), 0), 100000000, 0, -330), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 28)), 0); (("to_string", 980), ((Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -329), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -328), 0), 100000000, 0, -327), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 29)), 0); (("to_hexstring", 981), ((Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -326), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -325), 0), 100000000, 0, -324), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 30)), 0); (("zero", 982), ((Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -323), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 31)), 0); (("one", 983), ((Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -322), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 32)), 0); (("lognot", 984), ((Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -321), (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -320), 0), 100000000, 0, -319), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 33)), 0); (("succ", 985), ((Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -318), (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -317), 0), 100000000, 0, -316), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 34)), 0); (("pred", 986), ((Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -315), (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -314), 0), 100000000, 0, -313), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 35)), 0); (("compare", 987), ((Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -312), (Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -311), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -310), 0), 100000000, 0, -309), 0), 100000000, 0, -308), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 36)), 0); (("equal", 988), ((Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -307), (Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -306), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -305), 0), 100000000, 0, -304), 0), 100000000, 0, -303), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 37)), 0); (("max", 989), ((Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -302), (Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -301), (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -300), 0), 100000000, 0, -299), 0), 100000000, 0, -298), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 38)), 0); (("min", 990), ((Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -297), (Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -296), (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -295), 0), 100000000, 0, -294), 0), 100000000, 0, -293), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 39)), 0); (("of_string_opt", 991), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -292), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -291)], (0)), 100000000, 0, -290), 0), 100000000, 0, -289), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 40)), 0); (("pp", 992), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -288), (Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -287), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -286), 0), 100000000, 0, -285), 0), 100000000, 0, -284), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 41)), 0); (("pp_hex", 993), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -283), (Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -282), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -281), 0), 100000000, 0, -280), 0), 100000000, 0, -279), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 42)), 0); (("neg", 994), ((Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -278), (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -277), 0), 100000000, 0, -276), 0, (("src/signed.mli", 29, 580, 582), ("src/signed.mli", 29, 580, 598), 0), 0, Tag1 ("Signed", 8)), 0); (("abs", 995), ((Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -275), (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -274), 0), 100000000, 0, -273), 0, (("src/signed.mli", 32, 625, 627), ("src/signed.mli", 32, 625, 643), 0), 0, Tag1 ("Signed", 9)), 0); (("minus_one", 996), ((Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -272), 0, (("src/signed.mli", 35, 697, 699), ("src/signed.mli", 35, 697, 716), 0), 0, Tag1 ("Signed", 10)), 0); (("min_int", 997), ((Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -271), 0, (("src/signed.mli", 38, 740, 742), ("src/signed.mli", 38, 740, 757), 0), 0, Tag1 ("Signed", 11)), 0); (("shift_right_logical", 998), ((Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -270), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -269), (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -268), 0), 100000000, 0, -267), 0), 100000000, 0, -266), 0, (("src/signed.mli", 41, 804, 806), ("src/signed.mli", 41, 804, 845), 0), 0, Tag1 ("Signed", 12)), 0); (("of_nativeint", 999), ((Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -265), (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -264), 0), 100000000, 0, -263), 0, (("src/signed.mli", 45, 965, 967), ("src/signed.mli", 45, 965, 1000), 0), 0, Tag1 ("Signed", 13)), 0); (("to_nativeint", 1000), ((Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -262), (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -261), 0), 100000000, 0, -260), 0, (("src/signed.mli", 48, 1066, 1068), ("src/signed.mli", 48, 1066, 1101), 0), 0, Tag1 ("Signed", 14)), 0); (("of_int64", 1001), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -259), (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -258), 0), 100000000, 0, -257), 0, (("src/signed.mli", 51, 1167, 1169), ("src/signed.mli", 51, 1167, 1194), 0), 0, Tag1 ("Signed", 15)), 0); (("to_int64", 1002), ((Tag1 (0, (Tag3 ((("t", 964)), 0, (0)), 100000000, 0, -256), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -255), 0), 100000000, 0, -254), 0, (("src/signed.mli", 54, 1256, 1258), ("src/signed.mli", 54, 1256, 1283), 0), 0, Tag1 ("Signed", 16)), 0)]), 0, (("src/signed.mli", 59, 1383, 1383), ("src/signed.mli", 59, 1383, 1415), 0), Tag1 ("Signed", 19)), 0, 0); Tag3 (("Int32", 893), 0, (Tag1 ([Tag1 (("t", 1014), (0, 0, 0, 1, ((Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -582)), 0, 0, 0, 0, (("src/signed.mli", 62, 1460, 1482), ("src/signed.mli", 62, 1460, 1496), 0), 0, 0, 0, Tag1 ("Signed", 20)), 1, 0); Tag3 (("Infix", 1015), 0, (Tag1 ([(("+", 1053), ((Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -637), (Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -636), (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -635), 0), 100000000, 0, -634), 0), 100000000, 0, -633), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 1)), 0); (("-", 1054), ((Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -632), (Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -631), (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -630), 0), 100000000, 0, -629), 0), 100000000, 0, -628), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 2)), 0); (("*", 1055), ((Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -627), (Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -626), (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -625), 0), 100000000, 0, -624), 0), 100000000, 0, -623), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 3)), 0); (("/", 1056), ((Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -622), (Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -621), (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -620), 0), 100000000, 0, -619), 0), 100000000, 0, -618), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 4)), 0); (("mod", 1057), ((Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -617), (Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -616), (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -615), 0), 100000000, 0, -614), 0), 100000000, 0, -613), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 5)), 0); (("land", 1058), ((Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -612), (Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -611), (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -610), 0), 100000000, 0, -609), 0), 100000000, 0, -608), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 6)), 0); (("lor", 1059), ((Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -607), (Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -606), (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -605), 0), 100000000, 0, -604), 0), 100000000, 0, -603), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 7)), 0); (("lxor", 1060), ((Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -602), (Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -601), (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -600), 0), 100000000, 0, -599), 0), 100000000, 0, -598), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 8)), 0); (("lsl", 1061), ((Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -597), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -596), (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -595), 0), 100000000, 0, -594), 0), 100000000, 0, -593), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 9)), 0); (("lsr", 1062), ((Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -592), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -591), (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -590), 0), 100000000, 0, -589), 0), 100000000, 0, -588), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 10)), 0); (("asr", 1063), ((Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -587), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -586), (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -585), 0), 100000000, 0, -584), 0), 100000000, 0, -583), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Signed", 2)), 0)]), 0, (("src/signed.mli", 24, 452, 454), ("src/signed.mli", 24, 452, 491), 0), Tag1 ("Signed", 6)), 0, 0); (("add", 1016), ((Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -581), (Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -580), (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -579), 0), 100000000, 0, -578), 0), 100000000, 0, -577), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 13)), 0); (("sub", 1017), ((Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -576), (Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -575), (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -574), 0), 100000000, 0, -573), 0), 100000000, 0, -572), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 14)), 0); (("mul", 1018), ((Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -571), (Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -570), (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -569), 0), 100000000, 0, -568), 0), 100000000, 0, -567), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 15)), 0); (("div", 1019), ((Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -566), (Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -565), (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -564), 0), 100000000, 0, -563), 0), 100000000, 0, -562), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 16)), 0); (("rem", 1020), ((Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -561), (Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -560), (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -559), 0), 100000000, 0, -558), 0), 100000000, 0, -557), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 17)), 0); (("max_int", 1021), ((Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -556), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 18)), 0); (("logand", 1022), ((Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -555), (Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -554), (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -553), 0), 100000000, 0, -552), 0), 100000000, 0, -551), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 19)), 0); (("logor", 1023), ((Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -550), (Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -549), (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -548), 0), 100000000, 0, -547), 0), 100000000, 0, -546), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 20)), 0); (("logxor", 1024), ((Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -545), (Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -544), (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -543), 0), 100000000, 0, -542), 0), 100000000, 0, -541), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 21)), 0); (("shift_left", 1025), ((Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -540), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -539), (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -538), 0), 100000000, 0, -537), 0), 100000000, 0, -536), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 22)), 0); (("shift_right", 1026), ((Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -535), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -534), (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -533), 0), 100000000, 0, -532), 0), 100000000, 0, -531), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 23)), 0); (("of_int", 1027), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -530), (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -529), 0), 100000000, 0, -528), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 24)), 0); (("to_int", 1028), ((Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -527), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -526), 0), 100000000, 0, -525), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 25)), 0); (("of_string", 1029), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -524), (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -523), 0), 100000000, 0, -522), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 28)), 0); (("to_string", 1030), ((Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -521), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -520), 0), 100000000, 0, -519), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 29)), 0); (("to_hexstring", 1031), ((Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -518), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -517), 0), 100000000, 0, -516), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 30)), 0); (("zero", 1032), ((Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -515), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 31)), 0); (("one", 1033), ((Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -514), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 32)), 0); (("lognot", 1034), ((Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -513), (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -512), 0), 100000000, 0, -511), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 33)), 0); (("succ", 1035), ((Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -510), (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -509), 0), 100000000, 0, -508), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 34)), 0); (("pred", 1036), ((Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -507), (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -506), 0), 100000000, 0, -505), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 35)), 0); (("compare", 1037), ((Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -504), (Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -503), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -502), 0), 100000000, 0, -501), 0), 100000000, 0, -500), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 36)), 0); (("equal", 1038), ((Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -499), (Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -498), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -497), 0), 100000000, 0, -496), 0), 100000000, 0, -495), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 37)), 0); (("max", 1039), ((Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -494), (Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -493), (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -492), 0), 100000000, 0, -491), 0), 100000000, 0, -490), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 38)), 0); (("min", 1040), ((Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -489), (Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -488), (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -487), 0), 100000000, 0, -486), 0), 100000000, 0, -485), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 39)), 0); (("of_string_opt", 1041), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -484), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -483)], (0)), 100000000, 0, -482), 0), 100000000, 0, -481), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 40)), 0); (("pp", 1042), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -480), (Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -479), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -478), 0), 100000000, 0, -477), 0), 100000000, 0, -476), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 41)), 0); (("pp_hex", 1043), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -475), (Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -474), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -473), 0), 100000000, 0, -472), 0), 100000000, 0, -471), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 42)), 0); (("neg", 1044), ((Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -470), (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -469), 0), 100000000, 0, -468), 0, (("src/signed.mli", 29, 580, 582), ("src/signed.mli", 29, 580, 598), 0), 0, Tag1 ("Signed", 8)), 0); (("abs", 1045), ((Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -467), (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -466), 0), 100000000, 0, -465), 0, (("src/signed.mli", 32, 625, 627), ("src/signed.mli", 32, 625, 643), 0), 0, Tag1 ("Signed", 9)), 0); (("minus_one", 1046), ((Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -464), 0, (("src/signed.mli", 35, 697, 699), ("src/signed.mli", 35, 697, 716), 0), 0, Tag1 ("Signed", 10)), 0); (("min_int", 1047), ((Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -463), 0, (("src/signed.mli", 38, 740, 742), ("src/signed.mli", 38, 740, 757), 0), 0, Tag1 ("Signed", 11)), 0); (("shift_right_logical", 1048), ((Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -462), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -461), (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -460), 0), 100000000, 0, -459), 0), 100000000, 0, -458), 0, (("src/signed.mli", 41, 804, 806), ("src/signed.mli", 41, 804, 845), 0), 0, Tag1 ("Signed", 12)), 0); (("of_nativeint", 1049), ((Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -457), (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -456), 0), 100000000, 0, -455), 0, (("src/signed.mli", 45, 965, 967), ("src/signed.mli", 45, 965, 1000), 0), 0, Tag1 ("Signed", 13)), 0); (("to_nativeint", 1050), ((Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -454), (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -453), 0), 100000000, 0, -452), 0, (("src/signed.mli", 48, 1066, 1068), ("src/signed.mli", 48, 1066, 1101), 0), 0, Tag1 ("Signed", 14)), 0); (("of_int64", 1051), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -451), (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -450), 0), 100000000, 0, -449), 0, (("src/signed.mli", 51, 1167, 1169), ("src/signed.mli", 51, 1167, 1194), 0), 0, Tag1 ("Signed", 15)), 0); (("to_int64", 1052), ((Tag1 (0, (Tag3 ((("t", 1014)), 0, (0)), 100000000, 0, -448), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -447), 0), 100000000, 0, -446), 0, (("src/signed.mli", 54, 1256, 1258), ("src/signed.mli", 54, 1256, 1283), 0), 0, Tag1 ("Signed", 16)), 0)]), 0, (("src/signed.mli", 62, 1460, 1460), ("src/signed.mli", 62, 1460, 1496), 0), Tag1 ("Signed", 21)), 0, 0); Tag3 (("Int64", 894), 0, (Tag1 ([Tag1 (("t", 1064), (0, 0, 0, 1, ((Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -774)), 0, 0, 0, 0, (("src/signed.mli", 65, 1548, 1570), ("src/signed.mli", 65, 1548, 1584), 0), 0, 0, 0, Tag1 ("Signed", 22)), 1, 0); Tag3 (("Infix", 1065), 0, (Tag1 ([(("+", 1103), ((Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -829), (Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -828), (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -827), 0), 100000000, 0, -826), 0), 100000000, 0, -825), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 1)), 0); (("-", 1104), ((Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -824), (Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -823), (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -822), 0), 100000000, 0, -821), 0), 100000000, 0, -820), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 2)), 0); (("*", 1105), ((Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -819), (Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -818), (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -817), 0), 100000000, 0, -816), 0), 100000000, 0, -815), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 3)), 0); (("/", 1106), ((Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -814), (Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -813), (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -812), 0), 100000000, 0, -811), 0), 100000000, 0, -810), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 4)), 0); (("mod", 1107), ((Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -809), (Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -808), (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -807), 0), 100000000, 0, -806), 0), 100000000, 0, -805), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 5)), 0); (("land", 1108), ((Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -804), (Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -803), (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -802), 0), 100000000, 0, -801), 0), 100000000, 0, -800), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 6)), 0); (("lor", 1109), ((Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -799), (Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -798), (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -797), 0), 100000000, 0, -796), 0), 100000000, 0, -795), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 7)), 0); (("lxor", 1110), ((Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -794), (Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -793), (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -792), 0), 100000000, 0, -791), 0), 100000000, 0, -790), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 8)), 0); (("lsl", 1111), ((Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -789), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -788), (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -787), 0), 100000000, 0, -786), 0), 100000000, 0, -785), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 9)), 0); (("lsr", 1112), ((Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -784), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -783), (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -782), 0), 100000000, 0, -781), 0), 100000000, 0, -780), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Unsigned", 10)), 0); (("asr", 1113), ((Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -779), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -778), (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -777), 0), 100000000, 0, -776), 0), 100000000, 0, -775), 0, (("src/signed.mli", 24, 452, 469), ("src/signed.mli", 24, 452, 491), 0), 0, Tag1 ("Signed", 2)), 0)]), 0, (("src/signed.mli", 24, 452, 454), ("src/signed.mli", 24, 452, 491), 0), Tag1 ("Signed", 6)), 0, 0); (("add", 1066), ((Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -773), (Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -772), (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -771), 0), 100000000, 0, -770), 0), 100000000, 0, -769), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 13)), 0); (("sub", 1067), ((Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -768), (Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -767), (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -766), 0), 100000000, 0, -765), 0), 100000000, 0, -764), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 14)), 0); (("mul", 1068), ((Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -763), (Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -762), (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -761), 0), 100000000, 0, -760), 0), 100000000, 0, -759), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 15)), 0); (("div", 1069), ((Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -758), (Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -757), (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -756), 0), 100000000, 0, -755), 0), 100000000, 0, -754), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 16)), 0); (("rem", 1070), ((Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -753), (Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -752), (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -751), 0), 100000000, 0, -750), 0), 100000000, 0, -749), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 17)), 0); (("max_int", 1071), ((Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -748), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 18)), 0); (("logand", 1072), ((Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -747), (Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -746), (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -745), 0), 100000000, 0, -744), 0), 100000000, 0, -743), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 19)), 0); (("logor", 1073), ((Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -742), (Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -741), (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -740), 0), 100000000, 0, -739), 0), 100000000, 0, -738), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 20)), 0); (("logxor", 1074), ((Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -737), (Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -736), (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -735), 0), 100000000, 0, -734), 0), 100000000, 0, -733), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 21)), 0); (("shift_left", 1075), ((Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -732), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -731), (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -730), 0), 100000000, 0, -729), 0), 100000000, 0, -728), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 22)), 0); (("shift_right", 1076), ((Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -727), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -726), (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -725), 0), 100000000, 0, -724), 0), 100000000, 0, -723), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 23)), 0); (("of_int", 1077), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -722), (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -721), 0), 100000000, 0, -720), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 24)), 0); (("to_int", 1078), ((Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -719), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -718), 0), 100000000, 0, -717), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 25)), 0); (("of_string", 1079), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -716), (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -715), 0), 100000000, 0, -714), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 28)), 0); (("to_string", 1080), ((Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -713), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -712), 0), 100000000, 0, -711), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 29)), 0); (("to_hexstring", 1081), ((Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -710), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -709), 0), 100000000, 0, -708), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 30)), 0); (("zero", 1082), ((Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -707), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 31)), 0); (("one", 1083), ((Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -706), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 32)), 0); (("lognot", 1084), ((Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -705), (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -704), 0), 100000000, 0, -703), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 33)), 0); (("succ", 1085), ((Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -702), (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -701), 0), 100000000, 0, -700), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 34)), 0); (("pred", 1086), ((Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -699), (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -698), 0), 100000000, 0, -697), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 35)), 0); (("compare", 1087), ((Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -696), (Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -695), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -694), 0), 100000000, 0, -693), 0), 100000000, 0, -692), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 36)), 0); (("equal", 1088), ((Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -691), (Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -690), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -689), 0), 100000000, 0, -688), 0), 100000000, 0, -687), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 37)), 0); (("max", 1089), ((Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -686), (Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -685), (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -684), 0), 100000000, 0, -683), 0), 100000000, 0, -682), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 38)), 0); (("min", 1090), ((Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -681), (Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -680), (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -679), 0), 100000000, 0, -678), 0), 100000000, 0, -677), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 39)), 0); (("of_string_opt", 1091), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -676), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -675)], (0)), 100000000, 0, -674), 0), 100000000, 0, -673), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 40)), 0); (("pp", 1092), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -672), (Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -671), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -670), 0), 100000000, 0, -669), 0), 100000000, 0, -668), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 41)), 0); (("pp_hex", 1093), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -667), (Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -666), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -665), 0), 100000000, 0, -664), 0), 100000000, 0, -663), 0, (("src/signed.mli", 26, 493, 503), ("src/signed.mli", 27, 531, 578), 0), 0, Tag1 ("Unsigned", 42)), 0); (("neg", 1094), ((Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -662), (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -661), 0), 100000000, 0, -660), 0, (("src/signed.mli", 29, 580, 582), ("src/signed.mli", 29, 580, 598), 0), 0, Tag1 ("Signed", 8)), 0); (("abs", 1095), ((Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -659), (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -658), 0), 100000000, 0, -657), 0, (("src/signed.mli", 32, 625, 627), ("src/signed.mli", 32, 625, 643), 0), 0, Tag1 ("Signed", 9)), 0); (("minus_one", 1096), ((Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -656), 0, (("src/signed.mli", 35, 697, 699), ("src/signed.mli", 35, 697, 716), 0), 0, Tag1 ("Signed", 10)), 0); (("min_int", 1097), ((Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -655), 0, (("src/signed.mli", 38, 740, 742), ("src/signed.mli", 38, 740, 757), 0), 0, Tag1 ("Signed", 11)), 0); (("shift_right_logical", 1098), ((Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -654), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -653), (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -652), 0), 100000000, 0, -651), 0), 100000000, 0, -650), 0, (("src/signed.mli", 41, 804, 806), ("src/signed.mli", 41, 804, 845), 0), 0, Tag1 ("Signed", 12)), 0); (("of_nativeint", 1099), ((Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -649), (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -648), 0), 100000000, 0, -647), 0, (("src/signed.mli", 45, 965, 967), ("src/signed.mli", 45, 965, 1000), 0), 0, Tag1 ("Signed", 13)), 0); (("to_nativeint", 1100), ((Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -646), (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -645), 0), 100000000, 0, -644), 0, (("src/signed.mli", 48, 1066, 1068), ("src/signed.mli", 48, 1066, 1101), 0), 0, Tag1 ("Signed", 14)), 0); (("of_int64", 1101), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -643), (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -642), 0), 100000000, 0, -641), 0, (("src/signed.mli", 51, 1167, 1169), ("src/signed.mli", 51, 1167, 1194), 0), 0, Tag1 ("Signed", 15)), 0); (("to_int64", 1102), ((Tag1 (0, (Tag3 ((("t", 1064)), 0, (0)), 100000000, 0, -640), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -639), 0), 100000000, 0, -638), 0, (("src/signed.mli", 54, 1256, 1258), ("src/signed.mli", 54, 1256, 1283), 0), 0, Tag1 ("Signed", 16)), 0)]), 0, (("src/signed.mli", 65, 1548, 1548), ("src/signed.mli", 65, 1548, 1584), 0), Tag1 ("Signed", 23)), 0, 0); Tag3 (("SInt", 895), 0, (((("S", 891))), 0, (("src/signed.mli", 68, 1636, 1636), ("src/signed.mli", 68, 1636, 1651), 0), Tag1 ("Signed", 24)), 0, 0); Tag3 (("Long", 896), 0, (((("S", 891))), 0, (("src/signed.mli", 71, 1700, 1700), ("src/signed.mli", 71, 1700, 1715), 0), Tag1 ("Signed", 25)), 0, 0); Tag3 (("LLong", 897), 0, (((("S", 891))), 0, (("src/signed.mli", 74, 1769, 1769), ("src/signed.mli", 74, 1769, 1785), 0), Tag1 ("Signed", 26)), 0, 0); Tag1 (("sint", 898), (0, 0, 0, 1, ((Tag3 (Tag1 ((("SInt", 895)), "t"), 0, (0)), 100000000, 0, -7)), 0, 0, 0, 0, (("src/signed.mli", 77, 1844, 1844), ("src/signed.mli", 77, 1844, 1862), 0), 0, 0, 0, Tag1 ("Signed", 27)), 1, 0); Tag1 (("long", 899), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Long", 896)), "t"), 0, (0)), 100000000, 0, -6)), 0, 0, 0, 0, (("src/signed.mli", 80, 1896, 1896), ("src/signed.mli", 80, 1896, 1914), 0), 0, 0, 0, Tag1 ("Signed", 28)), 1, 0); Tag1 (("llong", 900), (0, 0, 0, 1, ((Tag3 (Tag1 ((("LLong", 897)), "t"), 0, (0)), 100000000, 0, -5)), 0, 0, 0, 0, (("src/signed.mli", 83, 1953, 1953), ("src/signed.mli", 83, 1953, 1973), 0), 0, 0, 0, Tag1 ("Signed", 29)), 1, 0); (("of_byte_size", 901), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -4), (Tag11 ((("S", 891)), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/signed.mli", 86, 2017, 2017), ("src/signed.mli", 86, 2017, 2053), 0), 0, Tag1 ("Signed", 30)), 0)], "Signed", [("Signed", ("R\017i\"\030\024\134f\143\198\192\180>t\175\225")); ("Unsigned", ("cd\205\030\181\167\151\005!\134;\177\228\249\168+")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

val of_byte_size : int -> (module S)

val iter :
  (Sek__.PrivateSignatures.pov ->
   'c -> 'a Sek__.PublicTypeAbbreviations.segments) ->
  Sek__.PrivateSignatures.pov -> ('a -> unit) -> 'c -> unit
val iter2 :
  (Sek__.PrivateSignatures.pov ->
   'c1 -> 'c2 -> ('a1, 'a2) Sek__.PublicTypeAbbreviations.segments2) ->
  Sek__.PrivateSignatures.pov -> ('a1 -> 'a2 -> unit) -> 'c1 -> 'c2 -> unit
val fill_circularly :
  'a array ->
  Sek__.PublicTypeAbbreviations.index ->
  Sek__.PublicTypeAbbreviations.length -> 'a -> unit
val blit_circularly :
  'a array ->
  Sek__.PublicTypeAbbreviations.index ->
  'a array ->
  Sek__.PublicTypeAbbreviations.index ->
  Sek__.PublicTypeAbbreviations.length -> unit
val cut :
  Sek__.PublicTypeAbbreviations.capacity ->
  Sek__.PublicTypeAbbreviations.capacity ->
  Sek__.PublicTypeAbbreviations.length ->
  (Sek__.PublicTypeAbbreviations.index * Sek__.PublicTypeAbbreviations.length) *
  ((Sek__.PublicTypeAbbreviations.index ->
    Sek__.PublicTypeAbbreviations.length -> unit) ->
   unit) *
  (Sek__.PublicTypeAbbreviations.index * Sek__.PublicTypeAbbreviations.length)
val concat_segments :
  Sek__.PrivateSignatures.pov ->
  'a ->
  Sek__.PublicTypeAbbreviations.capacity ->
  ("DEBUG:rule", [(("iter", 326), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PrivateSignatures"), "pov"), 0, (0)), 100000000, 0, -84), (Tag1 (0, ((("c")), 100000000, 0, -76), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "segments"), [((("a")), 100000000, 0, -79)], (0)), 100000000, 0, -83), 0), 100000000, 0, -82), 0), 100000000, 0, -81), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PrivateSignatures"), "pov"), 0, (0)), 100000000, 0, -80), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -79), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -78), 0), 100000000, 0, -77), (Tag1 (0, ((("c")), 100000000, 0, -76), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -75), 0), 100000000, 0, -74), 0), 100000000, 0, -73), 0), 100000000, 0, -72), 0), 100000000, 0, -71), 0, (("src/ArrayExtra.mli", 20, 1269, 1269), ("src/ArrayExtra.mli", 22, 1311, 1346), 0), 0, Tag1 ("Sek__ArrayExtra", 0)), 0); (("iter2", 327), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PrivateSignatures"), "pov"), 0, (0)), 100000000, 0, -70), (Tag1 (0, ((("c1")), 100000000, 0, -59), (Tag1 (0, ((("c2")), 100000000, 0, -58), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "segments2"), [((("a1")), 100000000, 0, -64); ((("a2")), 100000000, 0, -63)], (0)), 100000000, 0, -69), 0), 100000000, 0, -68), 0), 100000000, 0, -67), 0), 100000000, 0, -66), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PrivateSignatures"), "pov"), 0, (0)), 100000000, 0, -65), (Tag1 (0, (Tag1 (0, ((("a1")), 100000000, 0, -64), (Tag1 (0, ((("a2")), 100000000, 0, -63), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -62), 0), 100000000, 0, -61), 0), 100000000, 0, -60), (Tag1 (0, ((("c1")), 100000000, 0, -59), (Tag1 (0, ((("c2")), 100000000, 0, -58), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -57), 0), 100000000, 0, -56), 0), 100000000, 0, -55), 0), 100000000, 0, -54), 0), 100000000, 0, -53), 0), 100000000, 0, -52), 0, (("src/ArrayExtra.mli", 27, 1535, 1535), ("src/ArrayExtra.mli", 29, 1595, 1646), 0), 0, Tag1 ("Sek__ArrayExtra", 1)), 0); (("fill_circularly", 328), ((Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -48)], (0)), 100000000, 0, -51), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "index"), 0, (0)), 100000000, 0, -50), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "length"), 0, (0)), 100000000, 0, -49), (Tag1 (0, ((("a")), 100000000, 0, -48), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -47), 0), 100000000, 0, -46), 0), 100000000, 0, -45), 0), 100000000, 0, -44), 0), 100000000, 0, -43), 0, (("src/ArrayExtra.mli", 34, 1877, 1877), ("src/ArrayExtra.mli", 34, 1877, 1939), 0), 0, Tag1 ("Sek__ArrayExtra", 2)), 0); (("blit_circularly", 329), ((Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -40)], (0)), 100000000, 0, -42), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "index"), 0, (0)), 100000000, 0, -41), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -40)], (0)), 100000000, 0, -39), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "index"), 0, (0)), 100000000, 0, -38), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "length"), 0, (0)), 100000000, 0, -37), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -36), 0), 100000000, 0, -35), 0), 100000000, 0, -34), 0), 100000000, 0, -33), 0), 100000000, 0, -32), 0), 100000000, 0, -31), 0, (("src/ArrayExtra.mli", 43, 2484, 2484), ("src/ArrayExtra.mli", 43, 2484, 2561), 0), 0, Tag1 ("Sek__ArrayExtra", 3)), 0); (("cut", 330), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "capacity"), 0, (0)), 100000000, 0, -30), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "capacity"), 0, (0)), 100000000, 0, -29), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "length"), 0, (0)), 100000000, 0, -28), (Tag2 ([(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "index"), 0, (0)), 100000000, 0, -16); (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "length"), 0, (0)), 100000000, 0, -17)]), 100000000, 0, -15); (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "index"), 0, (0)), 100000000, 0, -24), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "length"), 0, (0)), 100000000, 0, -23), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0), 100000000, 0, -20), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -19), 0), 100000000, 0, -18); (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "index"), 0, (0)), 100000000, 0, -26); (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "length"), 0, (0)), 100000000, 0, -27)]), 100000000, 0, -25)]), 100000000, 0, -14), 0), 100000000, 0, -13), 0), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("src/ArrayExtra.mli", 52, 3089, 3089), ("src/ArrayExtra.mli", 56, 3199, 3219), 0), 0, Tag1 ("Sek__ArrayExtra", 4)), 0); (("concat_segments", 331), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PrivateSignatures"), "pov"), 0, (0)), 100000000, 0, -10), (Tag1 (0, ((("a")), 100000000, 0, -7), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "capacity"), 0, (0)), 100000000, 0, -9), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "segments"), [((("a")), 100000000, 0, -7)], (0)), 100000000, 0, -8), (Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -7)], (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/ArrayExtra.mli", 68, 3951, 3951), ("src/ArrayExtra.mli", 68, 3951, 4020), 0), 0, Tag1 ("Sek__ArrayExtra", 5)), 0)], "Sek__ArrayExtra", [("Sek__ArrayExtra", ("\183\025\226\151Ya\157\204?\019\225\214H\248\193\209")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sek__PublicTypeAbbreviations", ("\201\251\244\167\199\157\227\233\251\227b\132\146]>\232")); ("Sek__PrivateSignatures", ("\187[j\006\197\232[2-\184F\232V~a\184")); ("Sek__Owner", ("\228~\155T\164\209\210ZNr\165\246\165\216\130-")); ("Sek__", ("b\188\017\179d|~L\019\214\028\188\145y\210\250")); ("PPrintEngine", ("V_\162\193\202\031c\185\nQ\232bL\0299\195")); ("PPrint", ("a\179\180\0030=\b^\136P\234\220\171\0210A")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
'a Sek__.PublicTypeAbbreviations.segments -> 'a array

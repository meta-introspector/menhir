val mkArrow :
  Constr.types -> Sorts.relevance -> Constr.types -> Constr.constr
val mkArrowR : Constr.types -> Constr.types -> Constr.constr
val mkNamedLambda :
  Names.Id.t Context.binder_annot ->
  Constr.types -> Constr.constr -> Constr.constr
val mkNamedLetIn :
  Names.Id.t Context.binder_annot ->
  Constr.constr -> Constr.types -> Constr.constr -> Constr.constr
val mkNamedProd :
  Names.Id.t Context.binder_annot ->
  Constr.types -> Constr.types -> Constr.types
val mkProd_or_LetIn : Constr.rel_declaration -> Constr.types -> Constr.types
val mkProd_wo_LetIn : Constr.rel_declaration -> Constr.types -> Constr.types
val mkNamedProd_or_LetIn :
  Constr.named_declaration -> Constr.types -> Constr.types
val mkNamedProd_wo_LetIn :
  Constr.named_declaration -> Constr.types -> Constr.types
val mkLambda_or_LetIn :
  Constr.rel_declaration -> Constr.constr -> Constr.constr
val mkNamedLambda_or_LetIn :
  Constr.named_declaration -> Constr.constr -> Constr.constr
val applist : Constr.constr * Constr.constr list -> Constr.constr
val applistc : Constr.constr -> Constr.constr list -> Constr.constr
val appvect : Constr.constr * Constr.constr array -> Constr.constr
val appvectc : Constr.constr -> Constr.constr array -> Constr.constr
val prodn :
  int ->
  (Names.Name.t Context.binder_annot * Constr.constr) list ->
  Constr.constr -> Constr.constr
val compose_prod :
  (Names.Name.t Context.binder_annot * Constr.constr) list ->
  Constr.constr -> Constr.constr
val lamn :
  int ->
  (Names.Name.t Context.binder_annot * Constr.constr) list ->
  Constr.constr -> Constr.constr
val compose_lam :
  (Names.Name.t Context.binder_annot * Constr.constr) list ->
  Constr.constr -> Constr.constr
val to_lambda : int -> Constr.constr -> Constr.constr
val to_prod : int -> Constr.constr -> Constr.constr
val it_mkLambda_or_LetIn :
  Constr.constr -> Constr.rel_context -> Constr.constr
val it_mkProd_wo_LetIn : Constr.types -> Constr.rel_context -> Constr.types
val it_mkProd_or_LetIn : Constr.types -> Constr.rel_context -> Constr.types
val lambda_applist : Constr.constr -> Constr.constr list -> Constr.constr
val lambda_appvect : Constr.constr -> Constr.constr array -> Constr.constr
val lambda_applist_decls :
  int -> Constr.constr -> Constr.constr list -> Constr.constr
val lambda_appvect_decls :
  int -> Constr.constr -> Constr.constr array -> Constr.constr
val prod_appvect : Constr.types -> Constr.constr array -> Constr.types
val prod_applist : Constr.types -> Constr.constr list -> Constr.types
val prod_appvect_decls :
  int -> Constr.types -> Constr.constr array -> Constr.types
val prod_applist_decls :
  int -> Constr.types -> Constr.constr list -> Constr.types
val decompose_prod :
  Constr.constr ->
  (Names.Name.t Context.binder_annot * Constr.constr) list * Constr.constr
val decompose_lambda :
  Constr.constr ->
  (Names.Name.t Context.binder_annot * Constr.constr) list * Constr.constr
val decompose_prod_n :
  int ->
  Constr.constr ->
  (Names.Name.t Context.binder_annot * Constr.constr) list * Constr.constr
val decompose_lambda_n :
  int ->
  Constr.constr ->
  (Names.Name.t Context.binder_annot * Constr.constr) list * Constr.constr
val decompose_prod_decls : Constr.types -> Constr.rel_context * Constr.types
val decompose_lambda_decls :
  Constr.constr -> Constr.rel_context * Constr.constr
val decompose_prod_n_decls :
  int -> Constr.types -> Constr.rel_context * Constr.types
val decompose_lambda_n_assum :
  int -> Constr.constr -> Constr.rel_context * Constr.constr
val decompose_lambda_n_decls :
  int -> Constr.constr -> Constr.rel_context * Constr.constr
val prod_decls : Constr.types -> Constr.rel_context
val lambda_decls : Constr.constr -> Constr.rel_context
val prod_n_decls : int -> Constr.types -> Constr.rel_context
val lam_n_assum : int -> Constr.constr -> Constr.rel_context
val strip_prod : Constr.types -> Constr.types
val strip_lam : Constr.constr -> Constr.constr
val strip_prod_n : int -> Constr.types -> Constr.types
val strip_lam_n : int -> Constr.constr -> Constr.constr
val strip_prod_decls : Constr.types -> Constr.types
val strip_lambda_decls : Constr.constr -> Constr.constr
type arity = Constr.rel_context * Sorts.t
val mkArity : arity -> Constr.types
val destArity : Constr.types -> arity
val isArity : Constr.types -> bool
type sorts_family =
  Sorts.family =
    InSProp
  | InProp
  | InSet
  | InType
  | InQSort
type sorts =
  Sorts.t = private
    SProp
  | Prop
  | Set
  | Type of Univ.Universe.t
  | QSort of Sorts.QVar.t * Univ.Universe.t
val decompose_prod_assum : Constr.types -> Constr.rel_context * Constr.types
val decompose_lam_assum : Constr.constr -> Constr.rel_context * Constr.constr
val decompose_prod_n_assum :
  int -> Constr.types -> Constr.rel_context * Constr.types
val prod_assum : Constr.types -> Constr.rel_context
val lam_assum : Constr.constr -> Constr.rel_context
val prod_n_assum : int -> Constr.types -> Constr.rel_context
val strip_prod_assum : Constr.types -> Constr.types
val strip_lam_assum : Constr.constr -> Constr.constr
val decompose_lam :
  Constr.t -> (Names.Name.t Context.binder_annot * Constr.t) list * Constr.t
val decompose_lam_n :
  int ->
  Constr.t -> (Names.Name.t Context.binder_annot * Constr.t) list * Constr.t
val decompose_lam_n_assum : int -> Constr.t -> Constr.rel_context * Constr.t
("DEBUG:rule", [(("mkArrow", 788), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -408), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sorts")), "relevance"), 0, (0)), 100000000, 0, -407), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -406), (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -405), 0), 100000000, 0, -404), 0), 100000000, 0, -403), 0), 100000000, 0, -402), 0, (("kernel/term.mli", 20, 918, 918), ("kernel/term.mli", 20, 918, 975), 0), 0, Tag1 ("Term", 1)), 0); (("mkArrowR", 789), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -401), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -400), (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -399), 0), 100000000, 0, -398), 0), 100000000, 0, -397), 0, (("kernel/term.mli", 22, 977, 977), ("kernel/term.mli", 22, 977, 1016), 0), 0, Tag1 ("Term", 2)), 0); (("mkNamedLambda", 790), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -396)], (0)), 100000000, 0, -395), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -394), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -393), (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -392), 0), 100000000, 0, -391), 0), 100000000, 0, -390), 0), 100000000, 0, -389), 0, (("kernel/term.mli", 26, 1106, 1106), ("kernel/term.mli", 26, 1106, 1180), 0), 0, Tag1 ("Term", 3)), 0); (("mkNamedLetIn", 791), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -388)], (0)), 100000000, 0, -387), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -386), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -385), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -384), (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -383), 0), 100000000, 0, -382), 0), 100000000, 0, -381), 0), 100000000, 0, -380), 0), 100000000, 0, -379), 0, (("kernel/term.mli", 27, 1181, 1181), ("kernel/term.mli", 27, 1181, 1264), 0), 0, Tag1 ("Term", 4)), 0); (("mkNamedProd", 792), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -378)], (0)), 100000000, 0, -377), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -376), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -375), (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -374), 0), 100000000, 0, -373), 0), 100000000, 0, -372), 0), 100000000, 0, -371), 0, (("kernel/term.mli", 28, 1265, 1265), ("kernel/term.mli", 28, 1265, 1335), 0), 0, Tag1 ("Term", 5)), 0); (("mkProd_or_LetIn", 793), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "rel_declaration"), 0, (0)), 100000000, 0, -370), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -369), (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -368), 0), 100000000, 0, -367), 0), 100000000, 0, -366), 0, (("kernel/term.mli", 31, 1385, 1385), ("kernel/term.mli", 31, 1385, 1447), 0), 0, Tag1 ("Term", 6)), 0); (("mkProd_wo_LetIn", 794), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "rel_declaration"), 0, (0)), 100000000, 0, -365), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -364), (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -363), 0), 100000000, 0, -362), 0), 100000000, 0, -361), 0, (("kernel/term.mli", 32, 1448, 1448), ("kernel/term.mli", 32, 1448, 1510), 0), 0, Tag1 ("Term", 7)), 0); (("mkNamedProd_or_LetIn", 795), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "named_declaration"), 0, (0)), 100000000, 0, -360), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -359), (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -358), 0), 100000000, 0, -357), 0), 100000000, 0, -356), 0, (("kernel/term.mli", 33, 1511, 1511), ("kernel/term.mli", 33, 1511, 1580), 0), 0, Tag1 ("Term", 8)), 0); (("mkNamedProd_wo_LetIn", 796), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "named_declaration"), 0, (0)), 100000000, 0, -355), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -354), (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -353), 0), 100000000, 0, -352), 0), 100000000, 0, -351), 0, (("kernel/term.mli", 34, 1581, 1581), ("kernel/term.mli", 34, 1581, 1650), 0), 0, Tag1 ("Term", 9)), 0); (("mkLambda_or_LetIn", 797), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "rel_declaration"), 0, (0)), 100000000, 0, -350), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -349), (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -348), 0), 100000000, 0, -347), 0), 100000000, 0, -346), 0, (("kernel/term.mli", 37, 1700, 1700), ("kernel/term.mli", 37, 1700, 1766), 0), 0, Tag1 ("Term", 10)), 0); (("mkNamedLambda_or_LetIn", 798), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "named_declaration"), 0, (0)), 100000000, 0, -345), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -344), (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -343), 0), 100000000, 0, -342), 0), 100000000, 0, -341), 0, (("kernel/term.mli", 38, 1767, 1767), ("kernel/term.mli", 38, 1767, 1840), 0), 0, Tag1 ("Term", 11)), 0); (("applist", 799), ((Tag1 (0, (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -338); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -340)], (0)), 100000000, 0, -339)]), 100000000, 0, -337), (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -336), 0), 100000000, 0, -335), 0, (("kernel/term.mli", 44, 1940, 1940), ("kernel/term.mli", 44, 1940, 1984), 0), 0, Tag1 ("Term", 12)), 0); (("applistc", 800), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -334), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -333)], (0)), 100000000, 0, -332), (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -331), 0), 100000000, 0, -330), 0), 100000000, 0, -329), 0, (("kernel/term.mli", 45, 1985, 1985), ("kernel/term.mli", 45, 1985, 2031), 0), 0, Tag1 ("Term", 13)), 0); (("appvect", 801), ((Tag1 (0, (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -326); (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -328)], (0)), 100000000, 0, -327)]), 100000000, 0, -325), (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -324), 0), 100000000, 0, -323), 0, (("kernel/term.mli", 46, 2032, 2032), ("kernel/term.mli", 46, 2032, 2077), 0), 0, Tag1 ("Term", 14)), 0); (("appvectc", 802), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -322), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -321)], (0)), 100000000, 0, -320), (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -319), 0), 100000000, 0, -318), 0), 100000000, 0, -317), 0, (("kernel/term.mli", 47, 2078, 2078), ("kernel/term.mli", 47, 2078, 2125), 0), 0, Tag1 ("Term", 15)), 0); (("prodn", 803), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -316), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -314)], (0)), 100000000, 0, -313); (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -315)]), 100000000, 0, -312)], (0)), 100000000, 0, -311), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -310), (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -309), 0), 100000000, 0, -308), 0), 100000000, 0, -307), 0), 100000000, 0, -306), 0, (("kernel/term.mli", 51, 2228, 2228), ("kernel/term.mli", 51, 2228, 2310), 0), 0, Tag1 ("Term", 16)), 0); (("compose_prod", 804), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -304)], (0)), 100000000, 0, -303); (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -305)]), 100000000, 0, -302)], (0)), 100000000, 0, -301), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -300), (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -299), 0), 100000000, 0, -298), 0), 100000000, 0, -297), 0, (("kernel/term.mli", 57, 2456, 2456), ("kernel/term.mli", 57, 2456, 2538), 0), 0, Tag1 ("Term", 17)), 0); (("lamn", 805), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -296), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -294)], (0)), 100000000, 0, -293); (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -295)]), 100000000, 0, -292)], (0)), 100000000, 0, -291), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -290), (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -289), 0), 100000000, 0, -288), 0), 100000000, 0, -287), 0), 100000000, 0, -286), 0, (("kernel/term.mli", 62, 2649, 2649), ("kernel/term.mli", 62, 2649, 2730), 0), 0, Tag1 ("Term", 18)), 0); (("compose_lam", 806), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -284)], (0)), 100000000, 0, -283); (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -285)]), 100000000, 0, -282)], (0)), 100000000, 0, -281), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -280), (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -279), 0), 100000000, 0, -278), 0), 100000000, 0, -277), 0, (("kernel/term.mli", 68, 2869, 2869), ("kernel/term.mli", 68, 2869, 2950), 0), 0, Tag1 ("Term", 19)), 0); (("to_lambda", 807), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -276), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -275), (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -274), 0), 100000000, 0, -273), 0), 100000000, 0, -272), 0, (("kernel/term.mli", 73, 3069, 3069), ("kernel/term.mli", 73, 3069, 3108), 0), 0, Tag1 ("Term", 20)), 0); (("to_prod", 808), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -271), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -270), (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -269), 0), 100000000, 0, -268), 0), 100000000, 0, -267), 0, (("kernel/term.mli", 78, 3225, 3225), ("kernel/term.mli", 78, 3225, 3262), 0), 0, Tag1 ("Term", 21)), 0); (("it_mkLambda_or_LetIn", 809), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -266), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "rel_context"), 0, (0)), 100000000, 0, -265), (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -264), 0), 100000000, 0, -263), 0), 100000000, 0, -262), 0, (("kernel/term.mli", 80, 3264, 3264), ("kernel/term.mli", 80, 3264, 3329), 0), 0, Tag1 ("Term", 22)), 0); (("it_mkProd_wo_LetIn", 810), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -261), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "rel_context"), 0, (0)), 100000000, 0, -260), (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -259), 0), 100000000, 0, -258), 0), 100000000, 0, -257), 0, (("kernel/term.mli", 81, 3330, 3330), ("kernel/term.mli", 81, 3330, 3391), 0), 0, Tag1 ("Term", 23)), 0); (("it_mkProd_or_LetIn", 811), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -256), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "rel_context"), 0, (0)), 100000000, 0, -255), (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -254), 0), 100000000, 0, -253), 0), 100000000, 0, -252), 0, (("kernel/term.mli", 82, 3392, 3392), ("kernel/term.mli", 82, 3392, 3453), 0), 0, Tag1 ("Term", 24)), 0); (("lambda_applist", 812), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -251), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -250)], (0)), 100000000, 0, -249), (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -248), 0), 100000000, 0, -247), 0), 100000000, 0, -246), 0, (("kernel/term.mli", 87, 3632, 3632), ("kernel/term.mli", 87, 3632, 3684), 0), 0, Tag1 ("Term", 25)), 0); (("lambda_appvect", 813), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -245), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -244)], (0)), 100000000, 0, -243), (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -242), 0), 100000000, 0, -241), 0), 100000000, 0, -240), 0, (("kernel/term.mli", 88, 3685, 3685), ("kernel/term.mli", 88, 3685, 3738), 0), 0, Tag1 ("Term", 26)), 0); (("lambda_applist_decls", 814), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -239), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -238), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -237)], (0)), 100000000, 0, -236), (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -235), 0), 100000000, 0, -234), 0), 100000000, 0, -233), 0), 100000000, 0, -232), 0, (("kernel/term.mli", 94, 3999, 3999), ("kernel/term.mli", 94, 3999, 4064), 0), 0, Tag1 ("Term", 27)), 0); (("lambda_appvect_decls", 815), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -231), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -230), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -229)], (0)), 100000000, 0, -228), (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -227), 0), 100000000, 0, -226), 0), 100000000, 0, -225), 0), 100000000, 0, -224), 0, (("kernel/term.mli", 95, 4065, 4065), ("kernel/term.mli", 95, 4065, 4131), 0), 0, Tag1 ("Term", 28)), 0); (("prod_appvect", 816), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -223), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -222)], (0)), 100000000, 0, -221), (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -220), 0), 100000000, 0, -219), 0), 100000000, 0, -218), 0, (("kernel/term.mli", 101, 4250, 4250), ("kernel/term.mli", 101, 4250, 4299), 0), 0, Tag1 ("Term", 29)), 0); (("prod_applist", 817), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -217), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -216)], (0)), 100000000, 0, -215), (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -214), 0), 100000000, 0, -213), 0), 100000000, 0, -212), 0, (("kernel/term.mli", 102, 4300, 4300), ("kernel/term.mli", 102, 4300, 4348), 0), 0, Tag1 ("Term", 30)), 0); (("prod_appvect_decls", 818), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -211), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -210), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -209)], (0)), 100000000, 0, -208), (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -207), 0), 100000000, 0, -206), 0), 100000000, 0, -205), 0), 100000000, 0, -204), 0, (("kernel/term.mli", 108, 4608, 4608), ("kernel/term.mli", 108, 4608, 4670), 0), 0, Tag1 ("Term", 31)), 0); (("prod_applist_decls", 819), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -203), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -202), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -201)], (0)), 100000000, 0, -200), (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -199), 0), 100000000, 0, -198), 0), 100000000, 0, -197), 0), 100000000, 0, -196), 0, (("kernel/term.mli", 109, 4671, 4671), ("kernel/term.mli", 109, 4671, 4732), 0), 0, Tag1 ("Term", 32)), 0); (("decompose_prod", 820), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -195), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -192)], (0)), 100000000, 0, -191); (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -193)]), 100000000, 0, -190)], (0)), 100000000, 0, -189); (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -194)]), 100000000, 0, -188), 0), 100000000, 0, -187), 0, (("kernel/term.mli", 115, 4942, 4942), ("kernel/term.mli", 115, 4942, 5025), 0), 0, Tag1 ("Term", 33)), 0); (("decompose_lambda", 821), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -186), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -183)], (0)), 100000000, 0, -182); (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -184)]), 100000000, 0, -181)], (0)), 100000000, 0, -180); (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -185)]), 100000000, 0, -179), 0), 100000000, 0, -178), 0, (("kernel/term.mli", 119, 5196, 5196), ("kernel/term.mli", 119, 5196, 5281), 0), 0, Tag1 ("Term", 34)), 0); (("decompose_prod_n", 822), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -177), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -176), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -173)], (0)), 100000000, 0, -172); (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -174)]), 100000000, 0, -171)], (0)), 100000000, 0, -170); (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -175)]), 100000000, 0, -169), 0), 100000000, 0, -168), 0), 100000000, 0, -167), 0, (("kernel/term.mli", 125, 5486, 5486), ("kernel/term.mli", 125, 5486, 5578), 0), 0, Tag1 ("Term", 35)), 0); (("decompose_lambda_n", 823), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -166), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -165), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -162)], (0)), 100000000, 0, -161); (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -163)]), 100000000, 0, -160)], (0)), 100000000, 0, -159); (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -164)]), 100000000, 0, -158), 0), 100000000, 0, -157), 0), 100000000, 0, -156), 0, (("kernel/term.mli", 130, 5796, 5796), ("kernel/term.mli", 130, 5796, 5890), 0), 0, Tag1 ("Term", 36)), 0); (("decompose_prod_decls", 824), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -155), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constr")), "rel_context"), 0, (0)), 100000000, 0, -153); (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -154)]), 100000000, 0, -152), 0), 100000000, 0, -151), 0, (("kernel/term.mli", 134, 6033, 6033), ("kernel/term.mli", 134, 6033, 6095), 0), 0, Tag1 ("Term", 37)), 0); (("decompose_lambda_decls", 825), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -150), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constr")), "rel_context"), 0, (0)), 100000000, 0, -148); (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -149)]), 100000000, 0, -147), 0), 100000000, 0, -146), 0, (("kernel/term.mli", 137, 6133, 6133), ("kernel/term.mli", 137, 6133, 6199), 0), 0, Tag1 ("Term", 38)), 0); (("decompose_prod_n_decls", 826), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -145), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -144), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constr")), "rel_context"), 0, (0)), 100000000, 0, -142); (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -143)]), 100000000, 0, -141), 0), 100000000, 0, -140), 0), 100000000, 0, -139), 0, (("kernel/term.mli", 140, 6268, 6268), ("kernel/term.mli", 140, 6268, 6339), 0), 0, Tag1 ("Term", 39)), 0); (("decompose_lambda_n_assum", 827), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -138), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -137), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constr")), "rel_context"), 0, (0)), 100000000, 0, -135); (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -136)]), 100000000, 0, -134), 0), 100000000, 0, -133), 0), 100000000, 0, -132), 0, (("kernel/term.mli", 143, 6389, 6389), ("kernel/term.mli", 143, 6389, 6464), 0), 0, Tag1 ("Term", 40)), 0); (("decompose_lambda_n_decls", 828), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -131), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -130), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constr")), "rel_context"), 0, (0)), 100000000, 0, -128); (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -129)]), 100000000, 0, -127), 0), 100000000, 0, -126), 0), 100000000, 0, -125), 0, (("kernel/term.mli", 146, 6496, 6496), ("kernel/term.mli", 146, 6496, 6571), 0), 0, Tag1 ("Term", 41)), 0); (("prod_decls", 829), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -124), (Tag3 (Tag1 ((Tag2 ("Constr")), "rel_context"), 0, (0)), 100000000, 0, -123), 0), 100000000, 0, -122), 0, (("kernel/term.mli", 149, 6645, 6645), ("kernel/term.mli", 149, 6645, 6689), 0), 0, Tag1 ("Term", 42)), 0); (("lambda_decls", 830), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -121), (Tag3 (Tag1 ((Tag2 ("Constr")), "rel_context"), 0, (0)), 100000000, 0, -120), 0), 100000000, 0, -119), 0, (("kernel/term.mli", 150, 6690, 6690), ("kernel/term.mli", 150, 6690, 6737), 0), 0, Tag1 ("Term", 43)), 0); (("prod_n_decls", 831), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -118), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -117), (Tag3 (Tag1 ((Tag2 ("Constr")), "rel_context"), 0, (0)), 100000000, 0, -116), 0), 100000000, 0, -115), 0), 100000000, 0, -114), 0, (("kernel/term.mli", 153, 6826, 6826), ("kernel/term.mli", 153, 6826, 6879), 0), 0, Tag1 ("Term", 44)), 0); (("lam_n_assum", 832), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -113), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -112), (Tag3 (Tag1 ((Tag2 ("Constr")), "rel_context"), 0, (0)), 100000000, 0, -111), 0), 100000000, 0, -110), 0), 100000000, 0, -109), 0, (("kernel/term.mli", 156, 6972, 6972), ("kernel/term.mli", 156, 6972, 7025), 0), 0, Tag1 ("Term", 45)), 0); (("strip_prod", 833), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -108), (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -107), 0), 100000000, 0, -106), 0, (("kernel/term.mli", 159, 7081, 7081), ("kernel/term.mli", 159, 7081, 7112), 0), 0, Tag1 ("Term", 46)), 0); (("strip_lam", 834), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -105), (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -104), 0), 100000000, 0, -103), 0, (("kernel/term.mli", 160, 7113, 7113), ("kernel/term.mli", 160, 7113, 7145), 0), 0, Tag1 ("Term", 47)), 0); (("strip_prod_n", 835), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -102), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -101), (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -100), 0), 100000000, 0, -99), 0), 100000000, 0, -98), 0, (("kernel/term.mli", 163, 7212, 7212), ("kernel/term.mli", 163, 7212, 7252), 0), 0, Tag1 ("Term", 48)), 0); (("strip_lam_n", 836), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -97), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -96), (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -95), 0), 100000000, 0, -94), 0), 100000000, 0, -93), 0, (("kernel/term.mli", 164, 7253, 7253), ("kernel/term.mli", 164, 7253, 7294), 0), 0, Tag1 ("Term", 49)), 0); (("strip_prod_decls", 837), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -92), (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -91), 0), 100000000, 0, -90), 0, (("kernel/term.mli", 167, 7369, 7369), ("kernel/term.mli", 167, 7369, 7406), 0), 0, Tag1 ("Term", 50)), 0); (("strip_lambda_decls", 838), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -89), (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -88), 0), 100000000, 0, -87), 0, (("kernel/term.mli", 168, 7407, 7407), ("kernel/term.mli", 168, 7407, 7448), 0), 0, Tag1 ("Term", 51)), 0); Tag1 (("arity", 839), (0, 0, 0, 1, ((Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constr")), "rel_context"), 0, (0)), 100000000, 0, -85); (Tag3 (Tag1 ((Tag2 ("Sorts")), "t"), 0, (0)), 100000000, 0, -86)]), 100000000, 0, -84)), 0, 0, 0, 0, (("kernel/term.mli", 175, 7637, 7637), ("kernel/term.mli", 175, 7637, 7678), 0), 0, 0, 0, Tag1 ("Term", 52)), 1, 0); (("mkArity", 840), ((Tag1 (0, (Tag3 ((("arity", 839)), 0, (0)), 100000000, 0, -83), (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -82), 0), 100000000, 0, -81), 0, (("kernel/term.mli", 178, 7728, 7728), ("kernel/term.mli", 178, 7728, 7756), 0), 0, Tag1 ("Term", 53)), 0); (("destArity", 841), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -80), (Tag3 ((("arity", 839)), 0, (0)), 100000000, 0, -79), 0), 100000000, 0, -78), 0, (("kernel/term.mli", 181, 7809, 7809), ("kernel/term.mli", 181, 7809, 7839), 0), 0, Tag1 ("Term", 54)), 0); (("isArity", 842), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -77), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -76), 0), 100000000, 0, -75), 0, (("kernel/term.mli", 184, 7888, 7888), ("kernel/term.mli", 184, 7888, 7915), 0), 0, Tag1 ("Term", 55)), 0); Tag1 (("sorts_family", 843), (0, 0, Tag1 ([(("InSProp", 681), (0), 0, (("kernel/term.mli", 187, 7934, 7969), ("kernel/term.mli", 187, 7934, 7976), 0), 0, Tag1 ("Term", 57)); (("InProp", 682), (0), 0, (("kernel/term.mli", 187, 7934, 7977), ("kernel/term.mli", 187, 7934, 7985), 0), 0, Tag1 ("Term", 58)); (("InSet", 683), (0), 0, (("kernel/term.mli", 187, 7934, 7986), ("kernel/term.mli", 187, 7934, 7993), 0), 0, Tag1 ("Term", 59)); (("InType", 684), (0), 0, (("kernel/term.mli", 187, 7934, 7994), ("kernel/term.mli", 187, 7934, 8002), 0), 0, Tag1 ("Term", 60)); (("InQSort", 685), (0), 0, (("kernel/term.mli", 187, 7934, 8003), ("kernel/term.mli", 187, 7934, 8012), 0), 0, Tag1 ("Term", 61))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Sorts")), "family"), 0, (0)), 100000000, 0, -74)), 0, 0, 0, 0, (("kernel/term.mli", 187, 7934, 7934), ("kernel/term.mli", 188, 8013, 8058), 0), [(("ocaml.deprecated", (("kernel/term.mli", 188, 8013, 8016), ("kernel/term.mli", 188, 8013, 8032), 0)), ([([(Tag1 (Tag2 ("Alias for Sorts.family", (("kernel/term.mli", 188, 8013, 8034), ("kernel/term.mli", 188, 8013, 8056), 0), 0)), (("kernel/term.mli", 188, 8013, 8033), ("kernel/term.mli", 188, 8013, 8057), 0), 0, 0)], (("kernel/term.mli", 188, 8013, 8033), ("kernel/term.mli", 188, 8013, 8057), 0))]), (("kernel/term.mli", 188, 8013, 8013), ("kernel/term.mli", 188, 8013, 8058), 0))], 1, 0, Tag1 ("Term", 56)), 1, 0); Tag1 (("sorts", 844), (0, 0, Tag1 ([(("SProp", 687), (0), 0, (("kernel/term.mli", 191, 8091, 8093), ("kernel/term.mli", 191, 8091, 8100), 0), 0, Tag1 ("Term", 63)); (("Prop", 688), (0), 0, (("kernel/term.mli", 191, 8091, 8101), ("kernel/term.mli", 191, 8091, 8107), 0), 0, Tag1 ("Term", 64)); (("Set", 689), (0), 0, (("kernel/term.mli", 191, 8091, 8108), ("kernel/term.mli", 191, 8091, 8113), 0), 0, Tag1 ("Term", 65)); (("Type", 690), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Universe"), "t"), 0, (0)), 100000000, 0, -71)]), 0, (("kernel/term.mli", 192, 8114, 8116), ("kernel/term.mli", 192, 8114, 8141), 0), 0, Tag1 ("Term", 66)); (("QSort", 768), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Sorts")), "QVar"), "t"), 0, (0)), 100000000, 0, -72); (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Universe"), "t"), 0, (0)), 100000000, 0, -73)]), 0, (("kernel/term.mli", 193, 8155, 8157), ("kernel/term.mli", 193, 8155, 8198), 0), 0, Tag1 ("Term", 67))], 0), 0, ((Tag3 (Tag1 ((Tag2 ("Sorts")), "t"), 0, (0)), 100000000, 0, -70)), 0, 0, 0, 0, (("kernel/term.mli", 190, 8060, 8060), ("kernel/term.mli", 194, 8199, 8239), 0), [(("ocaml.deprecated", (("kernel/term.mli", 194, 8199, 8202), ("kernel/term.mli", 194, 8199, 8218), 0)), ([([(Tag1 (Tag2 ("Alias for Sorts.t", (("kernel/term.mli", 194, 8199, 8220), ("kernel/term.mli", 194, 8199, 8237), 0), 0)), (("kernel/term.mli", 194, 8199, 8219), ("kernel/term.mli", 194, 8199, 8238), 0), 0, 0)], (("kernel/term.mli", 194, 8199, 8219), ("kernel/term.mli", 194, 8199, 8238), 0))]), (("kernel/term.mli", 194, 8199, 8199), ("kernel/term.mli", 194, 8199, 8239), 0))], 0, 0, Tag1 ("Term", 62)), 1, 0); (("decompose_prod_assum", 845), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -69), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constr")), "rel_context"), 0, (0)), 100000000, 0, -67); (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -68)]), 100000000, 0, -66), 0), 100000000, 0, -65), 0, (("kernel/term.mli", 196, 8241, 8241), ("kernel/term.mli", 197, 8304, 8362), 0), [(("ocaml.deprecated", (("kernel/term.mli", 197, 8304, 8307), ("kernel/term.mli", 197, 8304, 8323), 0)), ([([(Tag1 (Tag2 ("Use [decompose_prod_decls] instead.", (("kernel/term.mli", 197, 8304, 8325), ("kernel/term.mli", 197, 8304, 8360), 0), 0)), (("kernel/term.mli", 197, 8304, 8324), ("kernel/term.mli", 197, 8304, 8361), 0), 0, 0)], (("kernel/term.mli", 197, 8304, 8324), ("kernel/term.mli", 197, 8304, 8361), 0))]), (("kernel/term.mli", 197, 8304, 8304), ("kernel/term.mli", 197, 8304, 8362), 0))], Tag1 ("Term", 68)), 0); (("decompose_lam_assum", 846), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -64), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constr")), "rel_context"), 0, (0)), 100000000, 0, -62); (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -63)]), 100000000, 0, -61), 0), 100000000, 0, -60), 0, (("kernel/term.mli", 198, 8363, 8363), ("kernel/term.mli", 199, 8427, 8487), 0), [(("ocaml.deprecated", (("kernel/term.mli", 199, 8427, 8430), ("kernel/term.mli", 199, 8427, 8446), 0)), ([([(Tag1 (Tag2 ("Use [decompose_lambda_decls] instead.", (("kernel/term.mli", 199, 8427, 8448), ("kernel/term.mli", 199, 8427, 8485), 0), 0)), (("kernel/term.mli", 199, 8427, 8447), ("kernel/term.mli", 199, 8427, 8486), 0), 0, 0)], (("kernel/term.mli", 199, 8427, 8447), ("kernel/term.mli", 199, 8427, 8486), 0))]), (("kernel/term.mli", 199, 8427, 8427), ("kernel/term.mli", 199, 8427, 8487), 0))], Tag1 ("Term", 69)), 0); (("decompose_prod_n_assum", 847), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -59), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -58), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constr")), "rel_context"), 0, (0)), 100000000, 0, -56); (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -57)]), 100000000, 0, -55), 0), 100000000, 0, -54), 0), 100000000, 0, -53), 0, (("kernel/term.mli", 200, 8488, 8488), ("kernel/term.mli", 201, 8560, 8620), 0), [(("ocaml.deprecated", (("kernel/term.mli", 201, 8560, 8563), ("kernel/term.mli", 201, 8560, 8579), 0)), ([([(Tag1 (Tag2 ("Use [decompose_prod_n_decls] instead.", (("kernel/term.mli", 201, 8560, 8581), ("kernel/term.mli", 201, 8560, 8618), 0), 0)), (("kernel/term.mli", 201, 8560, 8580), ("kernel/term.mli", 201, 8560, 8619), 0), 0, 0)], (("kernel/term.mli", 201, 8560, 8580), ("kernel/term.mli", 201, 8560, 8619), 0))]), (("kernel/term.mli", 201, 8560, 8560), ("kernel/term.mli", 201, 8560, 8620), 0))], Tag1 ("Term", 70)), 0); (("prod_assum", 848), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -52), (Tag3 (Tag1 ((Tag2 ("Constr")), "rel_context"), 0, (0)), 100000000, 0, -51), 0), 100000000, 0, -50), 0, (("kernel/term.mli", 202, 8621, 8621), ("kernel/term.mli", 203, 8666, 8714), 0), [(("ocaml.deprecated", (("kernel/term.mli", 203, 8666, 8669), ("kernel/term.mli", 203, 8666, 8685), 0)), ([([(Tag1 (Tag2 ("Use [prod_decls] instead.", (("kernel/term.mli", 203, 8666, 8687), ("kernel/term.mli", 203, 8666, 8712), 0), 0)), (("kernel/term.mli", 203, 8666, 8686), ("kernel/term.mli", 203, 8666, 8713), 0), 0, 0)], (("kernel/term.mli", 203, 8666, 8686), ("kernel/term.mli", 203, 8666, 8713), 0))]), (("kernel/term.mli", 203, 8666, 8666), ("kernel/term.mli", 203, 8666, 8714), 0))], Tag1 ("Term", 71)), 0); (("lam_assum", 849), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -49), (Tag3 (Tag1 ((Tag2 ("Constr")), "rel_context"), 0, (0)), 100000000, 0, -48), 0), 100000000, 0, -47), 0, (("kernel/term.mli", 204, 8715, 8715), ("kernel/term.mli", 205, 8760, 8810), 0), [(("ocaml.deprecated", (("kernel/term.mli", 205, 8760, 8763), ("kernel/term.mli", 205, 8760, 8779), 0)), ([([(Tag1 (Tag2 ("Use [lambda_decls] instead.", (("kernel/term.mli", 205, 8760, 8781), ("kernel/term.mli", 205, 8760, 8808), 0), 0)), (("kernel/term.mli", 205, 8760, 8780), ("kernel/term.mli", 205, 8760, 8809), 0), 0, 0)], (("kernel/term.mli", 205, 8760, 8780), ("kernel/term.mli", 205, 8760, 8809), 0))]), (("kernel/term.mli", 205, 8760, 8760), ("kernel/term.mli", 205, 8760, 8810), 0))], Tag1 ("Term", 72)), 0); (("prod_n_assum", 850), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -46), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -45), (Tag3 (Tag1 ((Tag2 ("Constr")), "rel_context"), 0, (0)), 100000000, 0, -44), 0), 100000000, 0, -43), 0), 100000000, 0, -42), 0, (("kernel/term.mli", 206, 8811, 8811), ("kernel/term.mli", 207, 8865, 8915), 0), [(("ocaml.deprecated", (("kernel/term.mli", 207, 8865, 8868), ("kernel/term.mli", 207, 8865, 8884), 0)), ([([(Tag1 (Tag2 ("Use [prod_n_decls] instead.", (("kernel/term.mli", 207, 8865, 8886), ("kernel/term.mli", 207, 8865, 8913), 0), 0)), (("kernel/term.mli", 207, 8865, 8885), ("kernel/term.mli", 207, 8865, 8914), 0), 0, 0)], (("kernel/term.mli", 207, 8865, 8885), ("kernel/term.mli", 207, 8865, 8914), 0))]), (("kernel/term.mli", 207, 8865, 8865), ("kernel/term.mli", 207, 8865, 8915), 0))], Tag1 ("Term", 73)), 0); (("strip_prod_assum", 851), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -41), (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -40), 0), 100000000, 0, -39), 0, (("kernel/term.mli", 208, 8916, 8916), ("kernel/term.mli", 209, 8954, 9008), 0), [(("ocaml.deprecated", (("kernel/term.mli", 209, 8954, 8957), ("kernel/term.mli", 209, 8954, 8973), 0)), ([([(Tag1 (Tag2 ("Use [strip_prod_decls] instead.", (("kernel/term.mli", 209, 8954, 8975), ("kernel/term.mli", 209, 8954, 9006), 0), 0)), (("kernel/term.mli", 209, 8954, 8974), ("kernel/term.mli", 209, 8954, 9007), 0), 0, 0)], (("kernel/term.mli", 209, 8954, 8974), ("kernel/term.mli", 209, 8954, 9007), 0))]), (("kernel/term.mli", 209, 8954, 8954), ("kernel/term.mli", 209, 8954, 9008), 0))], Tag1 ("Term", 74)), 0); (("strip_lam_assum", 852), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -38), (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -37), 0), 100000000, 0, -36), 0, (("kernel/term.mli", 210, 9009, 9009), ("kernel/term.mli", 211, 9048, 9104), 0), [(("ocaml.deprecated", (("kernel/term.mli", 211, 9048, 9051), ("kernel/term.mli", 211, 9048, 9067), 0)), ([([(Tag1 (Tag2 ("Use [strip_lambda_decls] instead.", (("kernel/term.mli", 211, 9048, 9069), ("kernel/term.mli", 211, 9048, 9102), 0), 0)), (("kernel/term.mli", 211, 9048, 9068), ("kernel/term.mli", 211, 9048, 9103), 0), 0, 0)], (("kernel/term.mli", 211, 9048, 9068), ("kernel/term.mli", 211, 9048, 9103), 0))]), (("kernel/term.mli", 211, 9048, 9048), ("kernel/term.mli", 211, 9048, 9104), 0))], Tag1 ("Term", 75)), 0); (("decompose_lam", 853), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "t"), 0, (0)), 100000000, 0, -35), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -32)], (0)), 100000000, 0, -31); (Tag3 (Tag1 ((Tag2 ("Constr")), "t"), 0, (0)), 100000000, 0, -33)]), 100000000, 0, -30)], (0)), 100000000, 0, -29); (Tag3 (Tag1 ((Tag2 ("Constr")), "t"), 0, (0)), 100000000, 0, -34)]), 100000000, 0, -28), 0), 100000000, 0, -27), 0, (("kernel/term.mli", 213, 9106, 9106), ("kernel/term.mli", 214, 9174, 9228), 0), [(("ocaml.deprecated", (("kernel/term.mli", 214, 9174, 9177), ("kernel/term.mli", 214, 9174, 9193), 0)), ([([(Tag1 (Tag2 ("Use [decompose_lambda] instead.", (("kernel/term.mli", 214, 9174, 9195), ("kernel/term.mli", 214, 9174, 9226), 0), 0)), (("kernel/term.mli", 214, 9174, 9194), ("kernel/term.mli", 214, 9174, 9227), 0), 0, 0)], (("kernel/term.mli", 214, 9174, 9194), ("kernel/term.mli", 214, 9174, 9227), 0))]), (("kernel/term.mli", 214, 9174, 9174), ("kernel/term.mli", 214, 9174, 9228), 0))], Tag1 ("Term", 76)), 0); (("decompose_lam_n", 854), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -26), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "t"), 0, (0)), 100000000, 0, -25), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -22)], (0)), 100000000, 0, -21); (Tag3 (Tag1 ((Tag2 ("Constr")), "t"), 0, (0)), 100000000, 0, -23)]), 100000000, 0, -20)], (0)), 100000000, 0, -19); (Tag3 (Tag1 ((Tag2 ("Constr")), "t"), 0, (0)), 100000000, 0, -24)]), 100000000, 0, -18), 0), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("kernel/term.mli", 215, 9229, 9229), ("kernel/term.mli", 216, 9306, 9362), 0), [(("ocaml.deprecated", (("kernel/term.mli", 216, 9306, 9309), ("kernel/term.mli", 216, 9306, 9325), 0)), ([([(Tag1 (Tag2 ("Use [decompose_lambda_n] instead.", (("kernel/term.mli", 216, 9306, 9327), ("kernel/term.mli", 216, 9306, 9360), 0), 0)), (("kernel/term.mli", 216, 9306, 9326), ("kernel/term.mli", 216, 9306, 9361), 0), 0, 0)], (("kernel/term.mli", 216, 9306, 9326), ("kernel/term.mli", 216, 9306, 9361), 0))]), (("kernel/term.mli", 216, 9306, 9306), ("kernel/term.mli", 216, 9306, 9362), 0))], Tag1 ("Term", 77)), 0); (("decompose_lam_n_assum", 855), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -15), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "t"), 0, (0)), 100000000, 0, -14), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constr")), "rel_context"), 0, (0)), 100000000, 0, -12); (Tag3 (Tag1 ((Tag2 ("Constr")), "t"), 0, (0)), 100000000, 0, -13)]), 100000000, 0, -11), 0), 100000000, 0, -10), 0), 100000000, 0, -9), 0, (("kernel/term.mli", 217, 9363, 9363), ("kernel/term.mli", 218, 9419, 9481), 0), [(("ocaml.deprecated", (("kernel/term.mli", 218, 9419, 9422), ("kernel/term.mli", 218, 9419, 9438), 0)), ([([(Tag1 (Tag2 ("Use [decompose_lambda_n_assum] instead.", (("kernel/term.mli", 218, 9419, 9440), ("kernel/term.mli", 218, 9419, 9479), 0), 0)), (("kernel/term.mli", 218, 9419, 9439), ("kernel/term.mli", 218, 9419, 9480), 0), 0, 0)], (("kernel/term.mli", 218, 9419, 9439), ("kernel/term.mli", 218, 9419, 9480), 0))]), (("kernel/term.mli", 218, 9419, 9419), ("kernel/term.mli", 218, 9419, 9481), 0))], Tag1 ("Term", 78)), 0); (("decompose_lam_n_decls", 856), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -8), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "t"), 0, (0)), 100000000, 0, -7), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constr")), "rel_context"), 0, (0)), 100000000, 0, -5); (Tag3 (Tag1 ((Tag2 ("Constr")), "t"), 0, (0)), 100000000, 0, -6)]), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("kernel/term.mli", 219, 9482, 9482), ("kernel/term.mli", 220, 9538, 9600), 0), [(("ocaml.deprecated", (("kernel/term.mli", 220, 9538, 9541), ("kernel/term.mli", 220, 9538, 9557), 0)), ([([(Tag1 (Tag2 ("Use [decompose_lambda_n_decls] instead.", (("kernel/term.mli", 220, 9538, 9559), ("kernel/term.mli", 220, 9538, 9598), 0), 0)), (("kernel/term.mli", 220, 9538, 9558), ("kernel/term.mli", 220, 9538, 9599), 0), 0, 0)], (("kernel/term.mli", 220, 9538, 9558), ("kernel/term.mli", 220, 9538, 9599), 0))]), (("kernel/term.mli", 220, 9538, 9538), ("kernel/term.mli", 220, 9538, 9600), 0))], Tag1 ("Term", 79)), 0)], "Term", [("Term", ("/\189lc\191\203\189N]\237E\210\202\212_J")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])
val decompose_lam_n_decls : int -> Constr.t -> Constr.rel_context * Constr.t

type num = Int of int | Big_int of Big_int.big_int | Ratio of Ratio.ratio
val ( +/ ) : num -> num -> num
val add_num : num -> num -> num
val minus_num : num -> num
val ( -/ ) : num -> num -> num
val sub_num : num -> num -> num
val ( */ ) : num -> num -> num
val mult_num : num -> num -> num
val square_num : num -> num
val ( // ) : num -> num -> num
val div_num : num -> num -> num
val quo_num : num -> num -> num
val mod_num : num -> num -> num
val ( **/ ) : num -> num -> num
val power_num : num -> num -> num
val abs_num : num -> num
val succ_num : num -> num
val pred_num : num -> num
val incr_num : num ref -> unit
val decr_num : num ref -> unit
val is_integer_num : num -> bool
val integer_num : num -> num
val floor_num : num -> num
val round_num : num -> num
val ceiling_num : num -> num
val sign_num : num -> int
val ( =/ ) : num -> num -> bool
val ( </ ) : num -> num -> bool
val ( >/ ) : num -> num -> bool
val ( <=/ ) : num -> num -> bool
val ( >=/ ) : num -> num -> bool
val ( <>/ ) : num -> num -> bool
val eq_num : num -> num -> bool
val lt_num : num -> num -> bool
val le_num : num -> num -> bool
val gt_num : num -> num -> bool
val ge_num : num -> num -> bool
val compare_num : num -> num -> int
val max_num : num -> num -> num
val min_num : num -> num -> num
val string_of_num : num -> string
val approx_num_fix : int -> num -> string
val approx_num_exp : int -> num -> string
val num_of_string : string -> num
val num_of_string_opt : string -> num option
val int_of_num : num -> int
val int_of_num_opt : num -> int option
val num_of_int : int -> num
val nat_of_num : num -> Nat.nat
val nat_of_num_opt : num -> Nat.nat option
val num_of_nat : Nat.nat -> num
val num_of_big_int : Big_int.big_int -> num
val big_int_of_num : num -> Big_int.big_int
val big_int_of_num_opt : num -> Big_int.big_int option
val ratio_of_num : num -> Ratio.ratio
val num_of_ratio : Ratio.ratio -> num("DEBUG:rule", [Tag1 (("num", 506), (0, 0, Tag1 ([(("Int", 447), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -232)]), 0, (("num.mli", 28, 1338, 1342), ("num.mli", 28, 1338, 1352), 0), 0, Tag1 ("Num", 1)); (("Big_int", 448), ([(Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -233)]), 0, (("num.mli", 29, 1353, 1355), ("num.mli", 29, 1353, 1375), 0), 0, Tag1 ("Num", 2)); (("Ratio", 449), ([(Tag3 (Tag1 ((Tag2 ("Ratio")), "ratio"), 0, (0)), 100000000, 0, -234)]), 0, (("num.mli", 30, 1376, 1378), ("num.mli", 30, 1376, 1394), 0), 0, Tag1 ("Num", 3))], 0), 1, 0, 0, 0, 0, 0, (("num.mli", 27, 1327, 1327), ("num.mli", 30, 1376, 1394), 0), 0, 0, 0, Tag1 ("Num", 0)), 1, 0); (("+/", 507), ((Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -231), (Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -230), (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -229), 0), 100000000, 0, -228), 0), 100000000, 0, -227), 0, (("num.mli", 36, 1432, 1432), ("num.mli", 36, 1432, 1462), 0), 0, Tag1 ("Num", 4)), 0); (("add_num", 508), ((Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -226), (Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -225), (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -224), 0), 100000000, 0, -223), 0), 100000000, 0, -222), 0, (("num.mli", 39, 1494, 1494), ("num.mli", 39, 1494, 1525), 0), 0, Tag1 ("Num", 5)), 0); (("minus_num", 509), ((Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -221), (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -220), 0), 100000000, 0, -219), 0, (("num.mli", 42, 1543, 1543), ("num.mli", 42, 1543, 1569), 0), 0, Tag1 ("Num", 6)), 0); (("-/", 510), ((Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -218), (Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -217), (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -216), 0), 100000000, 0, -215), 0), 100000000, 0, -214), 0, (("num.mli", 45, 1594, 1594), ("num.mli", 45, 1594, 1624), 0), 0, Tag1 ("Num", 7)), 0); (("sub_num", 511), ((Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -213), (Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -212), (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -211), 0), 100000000, 0, -210), 0), 100000000, 0, -209), 0, (("num.mli", 48, 1656, 1656), ("num.mli", 48, 1656, 1687), 0), 0, Tag1 ("Num", 8)), 0); (("*/", 512), ((Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -208), (Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -207), (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -206), 0), 100000000, 0, -205), 0), 100000000, 0, -204), 0, (("num.mli", 51, 1708, 1708), ("num.mli", 51, 1708, 1738), 0), 0, Tag1 ("Num", 9)), 0); (("mult_num", 513), ((Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -203), (Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -202), (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -201), 0), 100000000, 0, -200), 0), 100000000, 0, -199), 0, (("num.mli", 54, 1771, 1771), ("num.mli", 54, 1771, 1803), 0), 0, Tag1 ("Num", 10)), 0); (("square_num", 514), ((Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -198), (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -197), 0), 100000000, 0, -196), 0, (("num.mli", 57, 1827, 1827), ("num.mli", 57, 1827, 1854), 0), 0, Tag1 ("Num", 11)), 0); (("//", 515), ((Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -195), (Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -194), (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -193), 0), 100000000, 0, -192), 0), 100000000, 0, -191), 0, (("num.mli", 60, 1872, 1872), ("num.mli", 60, 1872, 1902), 0), 0, Tag1 ("Num", 12)), 0); (("div_num", 516), ((Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -190), (Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -189), (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -188), 0), 100000000, 0, -187), 0), 100000000, 0, -186), 0, (("num.mli", 63, 1934, 1934), ("num.mli", 63, 1934, 1965), 0), 0, Tag1 ("Num", 13)), 0); (("quo_num", 517), ((Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -185), (Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -184), (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -183), 0), 100000000, 0, -182), 0), 100000000, 0, -181), 0, (("num.mli", 66, 1983, 1983), ("num.mli", 66, 1983, 2014), 0), 0, Tag1 ("Num", 14)), 0); (("mod_num", 518), ((Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -180), (Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -179), (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -178), 0), 100000000, 0, -177), 0), 100000000, 0, -176), 0, (("num.mli", 69, 2053, 2053), ("num.mli", 69, 2053, 2084), 0), 0, Tag1 ("Num", 15)), 0); (("**/", 519), ((Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -175), (Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -174), (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -173), 0), 100000000, 0, -172), 0), 100000000, 0, -171), 0, (("num.mli", 72, 2124, 2124), ("num.mli", 72, 2124, 2155), 0), 0, Tag1 ("Num", 16)), 0); (("power_num", 520), ((Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -170), (Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -169), (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -168), 0), 100000000, 0, -167), 0), 100000000, 0, -166), 0, (("num.mli", 75, 2190, 2190), ("num.mli", 75, 2190, 2223), 0), 0, Tag1 ("Num", 17)), 0); (("abs_num", 521), ((Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -165), (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -164), 0), 100000000, 0, -163), 0, (("num.mli", 78, 2247, 2247), ("num.mli", 78, 2247, 2271), 0), 0, Tag1 ("Num", 18)), 0); (("succ_num", 522), ((Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -162), (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -161), 0), 100000000, 0, -160), 0, (("num.mli", 81, 2296, 2296), ("num.mli", 81, 2296, 2321), 0), 0, Tag1 ("Num", 19)), 0); (("pred_num", 523), ((Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -159), (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -158), 0), 100000000, 0, -157), 0, (("num.mli", 84, 2348, 2348), ("num.mli", 84, 2348, 2373), 0), 0, Tag1 ("Num", 20)), 0); (("incr_num", 524), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -156)], (0)), 100000000, 0, -155), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -154), 0), 100000000, 0, -153), 0, (("num.mli", 87, 2400, 2400), ("num.mli", 87, 2400, 2430), 0), 0, Tag1 ("Num", 21)), 0); (("decr_num", 525), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -152)], (0)), 100000000, 0, -151), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -150), 0), 100000000, 0, -149), 0, (("num.mli", 90, 2500, 2500), ("num.mli", 90, 2500, 2530), 0), 0, Tag1 ("Num", 22)), 0); (("is_integer_num", 526), ((Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -148), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -147), 0), 100000000, 0, -146), 0, (("num.mli", 93, 2600, 2600), ("num.mli", 93, 2600, 2632), 0), 0, Tag1 ("Num", 23)), 0); (("integer_num", 527), ((Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -145), (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -144), 0), 100000000, 0, -143), 0, (("num.mli", 98, 2746, 2746), ("num.mli", 98, 2746, 2774), 0), 0, Tag1 ("Num", 24)), 0); (("floor_num", 528), ((Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -142), (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -141), 0), 100000000, 0, -140), 0, (("num.mli", 102, 2876, 2876), ("num.mli", 102, 2876, 2902), 0), 0, Tag1 ("Num", 25)), 0); (("round_num", 529), ((Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -139), (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -138), 0), 100000000, 0, -137), 0, (("num.mli", 105, 2978, 2978), ("num.mli", 105, 2978, 3004), 0), 0, Tag1 ("Num", 26)), 0); (("ceiling_num", 530), ((Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -136), (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -135), 0), 100000000, 0, -134), 0, (("num.mli", 109, 3100, 3100), ("num.mli", 109, 3100, 3128), 0), 0, Tag1 ("Num", 27)), 0); (("sign_num", 531), ((Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -133), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -132), 0), 100000000, 0, -131), 0, (("num.mli", 113, 3207, 3207), ("num.mli", 113, 3207, 3232), 0), 0, Tag1 ("Num", 28)), 0); (("=/", 532), ((Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -130), (Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -129), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -128), 0), 100000000, 0, -127), 0), 100000000, 0, -126), 0, (("num.mli", 118, 3344, 3344), ("num.mli", 118, 3344, 3375), 0), 0, Tag1 ("Num", 29)), 0); (("</", 533), ((Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -125), (Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -124), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -123), 0), 100000000, 0, -122), 0), 100000000, 0, -121), 0, (("num.mli", 119, 3376, 3376), ("num.mli", 119, 3376, 3407), 0), 0, Tag1 ("Num", 30)), 0); ((">/", 534), ((Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -120), (Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -119), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -118), 0), 100000000, 0, -117), 0), 100000000, 0, -116), 0, (("num.mli", 120, 3408, 3408), ("num.mli", 120, 3408, 3439), 0), 0, Tag1 ("Num", 31)), 0); (("<=/", 535), ((Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -115), (Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -114), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -113), 0), 100000000, 0, -112), 0), 100000000, 0, -111), 0, (("num.mli", 121, 3440, 3440), ("num.mli", 121, 3440, 3472), 0), 0, Tag1 ("Num", 32)), 0); ((">=/", 536), ((Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -110), (Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -109), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -108), 0), 100000000, 0, -107), 0), 100000000, 0, -106), 0, (("num.mli", 122, 3473, 3473), ("num.mli", 122, 3473, 3505), 0), 0, Tag1 ("Num", 33)), 0); (("<>/", 537), ((Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -105), (Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -104), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -103), 0), 100000000, 0, -102), 0), 100000000, 0, -101), 0, (("num.mli", 123, 3506, 3506), ("num.mli", 123, 3506, 3538), 0), 0, Tag1 ("Num", 34)), 0); (("eq_num", 538), ((Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -100), (Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -99), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -98), 0), 100000000, 0, -97), 0), 100000000, 0, -96), 0, (("num.mli", 124, 3539, 3539), ("num.mli", 124, 3539, 3570), 0), 0, Tag1 ("Num", 35)), 0); (("lt_num", 539), ((Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -95), (Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -94), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -93), 0), 100000000, 0, -92), 0), 100000000, 0, -91), 0, (("num.mli", 125, 3571, 3571), ("num.mli", 125, 3571, 3602), 0), 0, Tag1 ("Num", 36)), 0); (("le_num", 540), ((Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -90), (Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -89), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -88), 0), 100000000, 0, -87), 0), 100000000, 0, -86), 0, (("num.mli", 126, 3603, 3603), ("num.mli", 126, 3603, 3634), 0), 0, Tag1 ("Num", 37)), 0); (("gt_num", 541), ((Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -85), (Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -84), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -83), 0), 100000000, 0, -82), 0), 100000000, 0, -81), 0, (("num.mli", 127, 3635, 3635), ("num.mli", 127, 3635, 3666), 0), 0, Tag1 ("Num", 38)), 0); (("ge_num", 542), ((Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -80), (Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -79), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -78), 0), 100000000, 0, -77), 0), 100000000, 0, -76), 0, (("num.mli", 128, 3667, 3667), ("num.mli", 128, 3667, 3698), 0), 0, Tag1 ("Num", 39)), 0); (("compare_num", 543), ((Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -75), (Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -74), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -73), 0), 100000000, 0, -72), 0), 100000000, 0, -71), 0, (("num.mli", 130, 3700, 3700), ("num.mli", 130, 3700, 3735), 0), 0, Tag1 ("Num", 40)), 0); (("max_num", 544), ((Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -70), (Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -69), (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -68), 0), 100000000, 0, -67), 0), 100000000, 0, -66), 0, (("num.mli", 134, 3854, 3854), ("num.mli", 134, 3854, 3885), 0), 0, Tag1 ("Num", 41)), 0); (("min_num", 545), ((Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -65), (Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -64), (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -63), 0), 100000000, 0, -62), 0), 100000000, 0, -61), 0, (("num.mli", 137, 3935, 3935), ("num.mli", 137, 3935, 3966), 0), 0, Tag1 ("Num", 42)), 0); (("string_of_num", 546), ((Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -60), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -59), 0), 100000000, 0, -58), 0, (("num.mli", 143, 4052, 4052), ("num.mli", 143, 4052, 4085), 0), 0, Tag1 ("Num", 43)), 0); (("approx_num_fix", 547), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -57), (Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -56), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -55), 0), 100000000, 0, -54), 0), 100000000, 0, -53), 0, (("num.mli", 146, 4151, 4151), ("num.mli", 146, 4151, 4192), 0), 0, Tag1 ("Num", 44)), 0); (("approx_num_exp", 548), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -52), (Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -51), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -50), 0), 100000000, 0, -49), 0), 100000000, 0, -48), 0, (("num.mli", 149, 4227, 4227), ("num.mli", 149, 4227, 4268), 0), 0, Tag1 ("Num", 45)), 0); (("num_of_string", 549), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -47), (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -46), 0), 100000000, 0, -45), 0, (("num.mli", 157, 4653, 4653), ("num.mli", 157, 4653, 4686), 0), 0, Tag1 ("Num", 46)), 0); (("num_of_string_opt", 550), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -44), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -43)], (0)), 100000000, 0, -42), 0), 100000000, 0, -41), 0, (("num.mli", 162, 4827, 4827), ("num.mli", 162, 4827, 4870), 0), 0, Tag1 ("Num", 47)), 0); (("int_of_num", 551), ((Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -40), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -39), 0), 100000000, 0, -38), 0, (("num.mli", 174, 5145, 5145), ("num.mli", 174, 5145, 5172), 0), 0, Tag1 ("Num", 48)), 0); (("int_of_num_opt", 552), ((Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -37), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -36)], (0)), 100000000, 0, -35), 0), 100000000, 0, -34), 0, (("num.mli", 175, 5173, 5173), ("num.mli", 175, 5173, 5210), 0), 0, Tag1 ("Num", 49)), 0); (("num_of_int", 553), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -33), (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -32), 0), 100000000, 0, -31), 0, (("num.mli", 176, 5211, 5211), ("num.mli", 176, 5211, 5238), 0), 0, Tag1 ("Num", 50)), 0); (("nat_of_num", 554), ((Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -30), (Tag3 (Tag1 ((Tag2 ("Nat")), "nat"), 0, (0)), 100000000, 0, -29), 0), 100000000, 0, -28), 0, (("num.mli", 177, 5239, 5239), ("num.mli", 177, 5239, 5266), 0), 0, Tag1 ("Num", 51)), 0); (("nat_of_num_opt", 555), ((Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -27), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Nat")), "nat"), 0, (0)), 100000000, 0, -26)], (0)), 100000000, 0, -25), 0), 100000000, 0, -24), 0, (("num.mli", 178, 5267, 5267), ("num.mli", 178, 5267, 5304), 0), 0, Tag1 ("Num", 52)), 0); (("num_of_nat", 556), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Nat")), "nat"), 0, (0)), 100000000, 0, -23), (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0, (("num.mli", 179, 5305, 5305), ("num.mli", 179, 5305, 5332), 0), 0, Tag1 ("Num", 53)), 0); (("num_of_big_int", 557), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -20), (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -19), 0), 100000000, 0, -18), 0, (("num.mli", 180, 5333, 5333), ("num.mli", 180, 5333, 5368), 0), 0, Tag1 ("Num", 54)), 0); (("big_int_of_num", 558), ((Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -17), (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -16), 0), 100000000, 0, -15), 0, (("num.mli", 181, 5369, 5369), ("num.mli", 181, 5369, 5404), 0), 0, Tag1 ("Num", 55)), 0); (("big_int_of_num_opt", 559), ((Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -14), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -13)], (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("num.mli", 182, 5405, 5405), ("num.mli", 182, 5405, 5450), 0), 0, Tag1 ("Num", 56)), 0); (("ratio_of_num", 560), ((Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -10), (Tag3 (Tag1 ((Tag2 ("Ratio")), "ratio"), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("num.mli", 183, 5451, 5451), ("num.mli", 183, 5451, 5482), 0), 0, Tag1 ("Num", 57)), 0); (("num_of_ratio", 561), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ratio")), "ratio"), 0, (0)), 100000000, 0, -7), (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("num.mli", 184, 5483, 5483), ("num.mli", 184, 5483, 5514), 0), 0, Tag1 ("Num", 58)), 0); (("float_of_num", 562), ((Tag1 (0, (Tag3 ((("num", 506)), 0, (0)), 100000000, 0, -4), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("num.mli", 185, 5515, 5515), ("num.mli", 185, 5515, 5546), 0), 0, Tag1 ("Num", 59)), 0)], "Num", [("Num", ("^Dd\228\"\203\221'\209\144a\020\148\026\225U")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Ratio", ("\133\177\241\180\127#AW\127v\180\025\250\143\018W")); ("Nat", ("\158\218\202\184\174E)\133)>\025\209\140\204/Z")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Big_int", ("t\020\020^p\161P\198\185\167\t\215\248\017\232\207"))], [(0)])

val float_of_num : num -> float

type ('a, 'arity, 'b) Refl__.Desc.typed_attribute_kind +=
    Attribute_value : ('a, 'arity, int) Refl__.Desc.typed_attribute_kind
val lift_zero :
  ('cases Refl__.Desc.binary_choice * int option) list ->
  (('cases * 'a) Refl__.Desc.binary_choice * int option) list
val lift_one :
  ('cases Refl__.Desc.binary_choice * int option) list ->
  (('a * 'cases) Refl__.Desc.binary_choice * int option) list
val merge : 'a list -> 'a list -> 'a list
val constructor_assoc :
  ('cases, 'structures, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
   'direct, 'gadt)
  Refl__.Desc.constructors ->
  ('cases Refl__.Desc.binary_choice * int option) list
val constructor_assoc_with_default_values :
  ('a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i) Refl__.Desc.constructors ->
  ('a Refl__.Desc.binary_choice * int) list
val fold :
  (int -> int -> int) ->
  ('a, [ `RecGroup of [ `Name of [ `Constr of 'structures ] ] * 'b ], 'arity,
   'rec_group, [> `Constr ], 'positive, 'negative, 'direct, 'gadt)
  Refl__.Desc.desc -> int
type ('a, 'b) enum_structure =
    [ `RecGroup of [ `Name of [ `Constr of 'a ] ] * 'b ]
val min :
  ('a, ('structures, 'b) enum_structure, 'arity, 'rec_group, [> `Constr ],
   'positive, 'negative, 'direct, 'gadt)
  Refl__.Desc.desc -> int
val max :
  ('a, ('structures, 'b) enum_structure, 'arity, 'rec_group, [> `Constr ],
   'positive, 'negative, 'direct, 'gadt)
  Refl__.Desc.desc -> int
val check_choice :
  'cases Refl__.Desc.binary_choice ->
  'cases Refl__.Desc.binary_choice * int -> bool
val check_value : int -> 'cases Refl__.Desc.binary_choice * int -> bool
val to_int_opt :
  ('a, ('structures, 'b) enum_structure, 'arity, 'rec_group, [> `Constr ],
   'positive, 'negative, 'direct, 'gadt)
  Refl__.Desc.desc -> 'a -> int option
val of_int_opt :
  ('a, ('structures, 'b) enum_structure, 'arity, 'rec_group, [> `Constr ],
   'positive, 'negative, 'direct, 'gadt)
  Refl__.Desc.desc -> int -> 'a option
val to_string :
  ('a, ('structures, 'b) enum_structure, 'arity, 'rec_group, [> `Constr ],
   'positive, 'negative, 'direct, 'gadt)
  Refl__.Desc.desc -> 'a -> string
val of_string_aux :
  ('cases, 'structures, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
   'direct, 'gadt)
  Refl__.Desc.constructors ->
  string -> 'cases Refl__.Desc.binary_choice option
val of_string_opt :
  ('a, ('structures, 'b) enum_structure, 'arity, 'rec_group, [> `Constr ],
   'positive, 'negative, 'direct, 'gadt)
  Refl__.Desc.desc ->("DEBUG:rule", [Tag2 (("Attribute_value", 2185), (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "typed_attribute_kind"), [((("a")), 100000000, 0, -233); ((("arity")), 100000000, 0, -234); ((("b")), 100000000, 0, -235)], (0), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "typed_attribute_kind"), [((("a")), 100000000, 0, -230); ((("arity")), 100000000, 0, -231); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -232)], (0)), 100000000, 0, -229)), 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Refl__Enum", 37)), 0, 0); (("lift_zero", 2186), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "binary_choice"), [((("cases")), 100000000, 0, -220)], (0)), 100000000, 0, -226); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -228)], (0)), 100000000, 0, -227)]), 100000000, 0, -225)], (0)), 100000000, 0, -224), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "binary_choice"), [(Tag2 ([((("cases")), 100000000, 0, -220); ((0), 100000000, 0, -221)]), 100000000, 0, -219)], (0)), 100000000, 0, -218); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -223)], (0)), 100000000, 0, -222)]), 100000000, 0, -217)], (0)), 100000000, 0, -216), 0), 100000000, 0, -215), 0, (("runtime/enum.ml", 8, 131, 139), ("runtime/enum.ml", 8, 131, 148), 0), 0, Tag1 ("Refl__Enum", 38)), 0); (("lift_one", 2187), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "binary_choice"), [((("cases")), 100000000, 0, -207)], (0)), 100000000, 0, -212); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -214)], (0)), 100000000, 0, -213)]), 100000000, 0, -211)], (0)), 100000000, 0, -210), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "binary_choice"), [(Tag2 ([((0), 100000000, 0, -206); ((("cases")), 100000000, 0, -207)]), 100000000, 0, -205)], (0)), 100000000, 0, -204); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -209)], (0)), 100000000, 0, -208)]), 100000000, 0, -203)], (0)), 100000000, 0, -202), 0), 100000000, 0, -201), 0, (("runtime/enum.ml", 14, 347, 355), ("runtime/enum.ml", 14, 347, 363), 0), 0, Tag1 ("Refl__Enum", 78)), 0); (("merge", 2188), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -200)], (0)), 100000000, 0, -199), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -200)], (0)), 100000000, 0, -199), (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -200)], (0)), 100000000, 0, -199), 0), 100000000, 0, -198), 0), 100000000, 0, -197), 0, (("runtime/enum.ml", 20, 560, 568), ("runtime/enum.ml", 20, 560, 573), 0), 0, Tag1 ("Refl__Enum", 83)), 0); (("constructor_assoc", 2189), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "constructors"), [((("cases")), 100000000, 0, -185); ((("structures")), 100000000, 0, -189); ((("arity")), 100000000, 0, -190); ((("rec_group")), 100000000, 0, -191); ((("kinds")), 100000000, 0, -192); ((("positive")), 100000000, 0, -193); ((("negative")), 100000000, 0, -194); ((("direct")), 100000000, 0, -195); ((("gadt")), 100000000, 0, -196)], (0)), 100000000, 0, -188), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "binary_choice"), [((("cases")), 100000000, 0, -185)], (0)), 100000000, 0, -184); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -187)], (0)), 100000000, 0, -186)]), 100000000, 0, -183)], (0)), 100000000, 0, -182), 0), 100000000, 0, -181), 0, (("runtime/enum.ml", 26, 694, 702), ("runtime/enum.ml", 26, 694, 719), 0), 0, Tag1 ("Refl__Enum", 91)), 0); (("constructor_assoc_with_default_values", 2190), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "constructors"), [((0), 100000000, 0, -170); ((0), 100000000, 0, -173); ((0), 100000000, 0, -174); ((0), 100000000, 0, -175); ((0), 100000000, 0, -176); ((0), 100000000, 0, -177); ((0), 100000000, 0, -178); ((0), 100000000, 0, -179); ((0), 100000000, 0, -180)], (0)), 100000000, 0, -172), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "binary_choice"), [((0), 100000000, 0, -170)], (0)), 100000000, 0, -169); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -171)]), 100000000, 0, -168)], (0)), 100000000, 0, -167), 0), 100000000, 0, -166), 0, (("runtime/enum.ml", 44, 1295, 1299), ("runtime/enum.ml", 44, 1295, 1336), 0), 0, Tag1 ("Refl__Enum", 121)), 0); (("fold", 2191), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -165), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -164), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -163), 0), 100000000, 0, -162), 0), 100000000, 0, -161), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [((("a")), 100000000, 0, -143); (Tag8 (([("RecGroup", (((Tag2 ([(Tag8 (([("Name", (((Tag8 (([("Constr", ((((("structures")), 100000000, 0, -151))))], (0, 100000000, 0, -150), 1, 0, 0)), 100000000, 0, -149))))], (0, 100000000, 0, -148), 1, 0, 0)), 100000000, 0, -147); ((0), 100000000, 0, -152)]), 100000000, 0, -146))))], (0, 100000000, 0, -145), 1, 0, 0)), 100000000, 0, -144); ((("arity")), 100000000, 0, -153); ((("rec_group")), 100000000, 0, -154); (Tag8 (([("Constr", (0))], ((0), 100000000, 0, -156), 0, 0, 0)), 100000000, 0, -155); ((("positive")), 100000000, 0, -157); ((("negative")), 100000000, 0, -158); ((("direct")), 100000000, 0, -159); ((("gadt")), 100000000, 0, -160)], (0)), 100000000, 0, -142), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -141), 0), 100000000, 0, -140), 0), 100000000, 0, -139), 0, (("runtime/enum.ml", 53, 1662, 1666), ("runtime/enum.ml", 53, 1662, 1670), 0), 0, Tag1 ("Refl__Enum", 132)), 0); Tag1 (("enum_structure", 2192), ([((("a")), 100000000, 0, -137); ((("b")), 100000000, 0, -138)], 2, 0, 1, ((Tag8 (([("RecGroup", (((Tag2 ([(Tag8 (([("Name", (((Tag8 (([("Constr", ((((("a")), 100000000, 0, -137))))], (0, 100000000, 0, -136), 1, 0, 0)), 100000000, 0, -135))))], (0, 100000000, 0, -134), 1, 0, 0)), 100000000, 0, -133); ((("b")), 100000000, 0, -138)]), 100000000, 0, -132))))], (0, 100000000, 0, -131), 1, 0, 0)), 100000000, 0, -130)), [25; 25], [0; 0], 0, 0, (("runtime/enum.ml", 67, 2157, 2157), ("runtime/enum.ml", 68, 2188, 2238), 0), 0, 0, 0, Tag1 ("Refl__Enum", 387)), 1, 0); (("min", 2193), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [((("a")), 100000000, 0, -118); (Tag3 ((("enum_structure", 2192)), [((("structures")), 100000000, 0, -120); ((0), 100000000, 0, -121)], (0)), 100000000, 0, -119); ((("arity")), 100000000, 0, -122); ((("rec_group")), 100000000, 0, -123); (Tag8 (([("Constr", (0))], ((0), 100000000, 0, -125), 0, 0, 0)), 100000000, 0, -124); ((("positive")), 100000000, 0, -126); ((("negative")), 100000000, 0, -127); ((("direct")), 100000000, 0, -128); ((("gadt")), 100000000, 0, -129)], (0)), 100000000, 0, -117), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -116), 0), 100000000, 0, -115), 0, (("runtime/enum.ml", 70, 2240, 2244), ("runtime/enum.ml", 70, 2240, 2247), 0), 0, Tag1 ("Refl__Enum", 388)), 0); (("max", 2194), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [((("a")), 100000000, 0, -103); (Tag3 ((("enum_structure", 2192)), [((("structures")), 100000000, 0, -105); ((0), 100000000, 0, -106)], (0)), 100000000, 0, -104); ((("arity")), 100000000, 0, -107); ((("rec_group")), 100000000, 0, -108); (Tag8 (([("Constr", (0))], ((0), 100000000, 0, -110), 0, 0, 0)), 100000000, 0, -109); ((("positive")), 100000000, 0, -111); ((("negative")), 100000000, 0, -112); ((("direct")), 100000000, 0, -113); ((("gadt")), 100000000, 0, -114)], (0)), 100000000, 0, -102), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -101), 0), 100000000, 0, -100), 0, (("runtime/enum.ml", 78, 2431, 2435), ("runtime/enum.ml", 78, 2431, 2438), 0), 0, Tag1 ("Refl__Enum", 391)), 0); (("check_choice", 2195), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "binary_choice"), [((("cases")), 100000000, 0, -97)], (0)), 100000000, 0, -99), (Tag1 (0, (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "binary_choice"), [((("cases")), 100000000, 0, -97)], (0)), 100000000, 0, -96); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -98)]), 100000000, 0, -95), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -94), 0), 100000000, 0, -93), 0), 100000000, 0, -92), 0, (("runtime/enum.ml", 86, 2622, 2626), ("runtime/enum.ml", 86, 2622, 2638), 0), 0, Tag1 ("Refl__Enum", 394)), 0); (("check_value", 2196), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -91), (Tag1 (0, (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "binary_choice"), [((("cases")), 100000000, 0, -89)], (0)), 100000000, 0, -88); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -90)]), 100000000, 0, -87), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -86), 0), 100000000, 0, -85), 0), 100000000, 0, -84), 0, (("runtime/enum.ml", 90, 2747, 2751), ("runtime/enum.ml", 90, 2747, 2762), 0), 0, Tag1 ("Refl__Enum", 397)), 0); (("to_int_opt", 2197), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [((("a")), 100000000, 0, -71); (Tag3 ((("enum_structure", 2192)), [((("structures")), 100000000, 0, -74); ((0), 100000000, 0, -75)], (0)), 100000000, 0, -73); ((("arity")), 100000000, 0, -76); ((("rec_group")), 100000000, 0, -77); (Tag8 (([("Constr", (0))], ((0), 100000000, 0, -79), 0, 0, 0)), 100000000, 0, -78); ((("positive")), 100000000, 0, -80); ((("negative")), 100000000, 0, -81); ((("direct")), 100000000, 0, -82); ((("gadt")), 100000000, 0, -83)], (0)), 100000000, 0, -72), (Tag1 (0, ((("a")), 100000000, 0, -71), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -70)], (0)), 100000000, 0, -69), 0), 100000000, 0, -68), 0), 100000000, 0, -67), 0, (("runtime/enum.ml", 94, 2830, 2834), ("runtime/enum.ml", 94, 2830, 2844), 0), 0, Tag1 ("Refl__Enum", 400)), 0); (("of_int_opt", 2198), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [((("a")), 100000000, 0, -53); (Tag3 ((("enum_structure", 2192)), [((("structures")), 100000000, 0, -57); ((0), 100000000, 0, -58)], (0)), 100000000, 0, -56); ((("arity")), 100000000, 0, -59); ((("rec_group")), 100000000, 0, -60); (Tag8 (([("Constr", (0))], ((0), 100000000, 0, -62), 0, 0, 0)), 100000000, 0, -61); ((("positive")), 100000000, 0, -63); ((("negative")), 100000000, 0, -64); ((("direct")), 100000000, 0, -65); ((("gadt")), 100000000, 0, -66)], (0)), 100000000, 0, -55), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -54), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -53)], (0)), 100000000, 0, -52), 0), 100000000, 0, -51), 0), 100000000, 0, -50), 0, (("runtime/enum.ml", 107, 3284, 3288), ("runtime/enum.ml", 107, 3284, 3298), 0), 0, Tag1 ("Refl__Enum", 652)), 0); (("to_string", 2199), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [((("a")), 100000000, 0, -37); (Tag3 ((("enum_structure", 2192)), [((("structures")), 100000000, 0, -40); ((0), 100000000, 0, -41)], (0)), 100000000, 0, -39); ((("arity")), 100000000, 0, -42); ((("rec_group")), 100000000, 0, -43); (Tag8 (([("Constr", (0))], ((0), 100000000, 0, -45), 0, 0, 0)), 100000000, 0, -44); ((("positive")), 100000000, 0, -46); ((("negative")), 100000000, 0, -47); ((("direct")), 100000000, 0, -48); ((("gadt")), 100000000, 0, -49)], (0)), 100000000, 0, -38), (Tag1 (0, ((("a")), 100000000, 0, -37), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -36), 0), 100000000, 0, -35), 0), 100000000, 0, -34), 0, (("runtime/enum.ml", 120, 3759, 3763), ("runtime/enum.ml", 120, 3759, 3772), 0), 0, Tag1 ("Refl__Enum", 905)), 0); (("of_string_aux", 2200), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "constructors"), [((("cases")), 100000000, 0, -23); ((("structures")), 100000000, 0, -26); ((("arity")), 100000000, 0, -27); ((("rec_group")), 100000000, 0, -28); ((("kinds")), 100000000, 0, -29); ((("positive")), 100000000, 0, -30); ((("negative")), 100000000, 0, -31); ((("direct")), 100000000, 0, -32); ((("gadt")), 100000000, 0, -33)], (0)), 100000000, 0, -25), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -24), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "binary_choice"), [((("cases")), 100000000, 0, -23)], (0)), 100000000, 0, -22)], (0)), 100000000, 0, -21), 0), 100000000, 0, -20), 0), 100000000, 0, -19), 0, (("runtime/enum.ml", 133, 4172, 4180), ("runtime/enum.ml", 133, 4172, 4193), 0), 0, Tag1 ("Refl__Enum", 1175)), 0); (("of_string_opt", 2201), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [((("a")), 100000000, 0, -5); (Tag3 ((("enum_structure", 2192)), [((("structures")), 100000000, 0, -9); ((0), 100000000, 0, -10)], (0)), 100000000, 0, -8); ((("arity")), 100000000, 0, -11); ((("rec_group")), 100000000, 0, -12); (Tag8 (([("Constr", (0))], ((0), 100000000, 0, -14), 0, 0, 0)), 100000000, 0, -13); ((("positive")), 100000000, 0, -15); ((("negative")), 100000000, 0, -16); ((("direct")), 100000000, 0, -17); ((("gadt")), 100000000, 0, -18)], (0)), 100000000, 0, -7), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -5)], (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("runtime/enum.ml", 154, 4841, 4845), ("runtime/enum.ml", 154, 4841, 4858), 0), 0, Tag1 ("Refl__Enum", 1208)), 0)], "Refl__Enum", [("Refl__Enum", ("\225G\183\154sJ\001`>\254\138gKXSb")); ("Traverse__Values", ("}\239\001\023\024&\227\167Sl\002\148\026\190\180\025")); ("Traverse__Modules", ("=\175q\026#\242\139\b\202\252\139\207\195\170\254\202")); ("Traverse__Interface", ("\252\146\219\195\199\167\234\143+\145l\200\254\244s}")); ("Traverse__", ("y\220\011\221C%Ob7%t,\252N21")); ("Traverse", ("\019\209\190\177II\1552 \b\174\006\b\1643\152")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Option", ("^R\130\196\247\161\173\178\160\143)K\129\026\142\183")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Stdcompat__stdlib_s", ("?\143\027\238\145\138\139e`\216P\248\156\178=\206")); ("Stdcompat__init", ("r\254q\255\217]\232\239'\192d\165\222\016\157\133")); ("Stdcompat", ("\139\1989\181:\137\230\132\240\223\206\210Y\135S\\")); ("Refl__Tools", ("i\215\207\166d\225\190DU\241\194\224\137P\158e")); ("Refl__Desc", ("\221\150mt\149.2\132\189\244\007\164&\203\225\172")); ("Refl__", ("i\003\196\150\161\159\229g\157\181\149\015g%\221\240")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
 string -> 'a option

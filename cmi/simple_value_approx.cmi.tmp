type 'a boxed_int =
    Int32 : int32 boxed_int
  | Int64 : int64 boxed_int
  | Nativeint : nativeint boxed_int
type value_string = { contents : string option; size : int; }
type unresolved_value =
    Set_of_closures_id of Set_of_closures_id.t
  | Symbol of Symbol.t
type unknown_because_of = Unresolved_value of unresolved_value | Other
type t = private {
  descr : descr;
  var : Variable.t option;
  symbol : (Symbol.t * int option) option;
}
and descr = private
    Value_block of Tag.t * t array
  | Value_int of int
  | Value_char of char
  | Value_float of float option
  | Value_boxed_int : 'a boxed_int * 'a -> descr
  | Value_set_of_closures of value_set_of_closures
  | Value_closure of value_closure
  | Value_string of value_string
  | Value_float_array of value_float_array
  | Value_unknown of unknown_because_of
  | Value_bottom
  | Value_extern of Export_id.t
  | Value_symbol of Symbol.t
  | Value_unresolved of unresolved_value
and value_closure = { set_of_closures : t; closure_id : Closure_id.t; }
and function_declarations = private {
  is_classic_mode : bool;
  set_of_closures_id : Set_of_closures_id.t;
  set_of_closures_origin : Set_of_closures_origin.t;
  funs : function_declaration Variable.Map.t;
}
and function_body = private {
  free_variables : Variable.Set.t;
  free_symbols : Symbol.Set.t;
  stub : bool;
  dbg : Debuginfo.t;
  inline : Lambda.inline_attribute;
  specialise : Lambda.specialise_attribute;
  is_a_functor : bool;
  body : Flambda.t;
  poll : Lambda.poll_attribute;
}
and function_declaration = private {
  closure_origin : Closure_origin.t;
  params : Parameter.t list;
  function_body : function_body option;
}
and value_set_of_closures = private {
  function_decls : function_declarations;
  bound_vars : t Var_within_closure.Map.t;
  free_vars : Flambda.specialised_to Variable.Map.t;
  invariant_params : Variable.Set.t Variable.Map.t Lazy.t;
  recursive : Variable.Set.t Lazy.t;
  size : int option Variable.Map.t Lazy.t;
  specialised_args : Flambda.specialised_to Variable.Map.t;
  freshening : Freshening.Project_var.t;
  direct_call_surrogates : Closure_id.t Closure_id.Map.t;
}
and value_float_array_contents = Contents of t array | Unknown_or_mutable
and value_float_array = {
  contents : value_float_array_contents;
  size : int;
}
val descr : t -> descr
val descrs : t list -> descr list
val print : Format.formatter -> t -> unit
val print_descr : Format.formatter -> descr -> unit
val print_value_set_of_closures :
  Format.formatter -> value_set_of_closures -> unit
val print_function_declarations :
  Format.formatter -> function_declarations -> unit
val function_declarations_approx :
  keep_body:(Variable.t -> Flambda.function_declaration -> bool) ->
  Flambda.function_declarations -> function_declarations
val create_value_set_of_closures :
  function_decls:function_declarations ->
  bound_vars:t Var_within_closure.Map.t ->
  free_vars:Flambda.specialised_to Variable.Map.t ->
  invariant_params:Variable.Set.t Variable.Map.t lazy_t ->
  recursive:Variable.Set.t Lazy.t ->
  specialised_args:Flambda.specialised_to Variable.Map.t ->
  freshening:Freshening.Project_var.t ->
  direct_call_surrogates:Closure_id.t Closure_id.Map.t ->
  value_set_of_closures
val update_freshening_of_value_set_of_closures :
  value_set_of_closures ->
  freshening:Freshening.Project_var.t -> value_set_of_closures
val value_unknown : unknown_because_of -> t
val value_int : int -> t
val value_char : char -> t
val value_float : float -> t
val value_any_float : t
val value_mutable_float_array : size:int -> t
val value_immutable_float_array : t array -> t
val value_string : int -> string option -> t
val value_boxed_int : 'i boxed_int -> 'i -> t
val value_block : Tag.t -> t array -> t
val value_extern : Export_id.t -> t
val value_symbol : Symbol.t -> t
val value_bottom : t
val value_unresolved : unresolved_value -> t
val value_closure :
  ?closure_var:Variable.t ->
  ?set_of_closures_var:Variable.t ->
  ?set_of_closures_symbol:Symbol.t ->
  value_set_of_closures -> Closure_id.t -> t
val value_set_of_closures :
  ?set_of_closures_var:Variable.t -> value_set_of_closures -> t
val make_const_int : int -> Flambda.t * t
val make_const_char : char -> Flambda.t * t
val make_const_bool : bool -> Flambda.t * t
val make_const_float : float -> Flambda.t * t
val make_const_boxed_int : 'i boxed_int -> 'i -> Flambda.t * t
val make_const_int_named : int -> Flambda.named * t
val make_const_char_named : char -> Flambda.named * t
val make_const_bool_named : bool -> Flambda.named * t
val make_const_float_named : float -> Flambda.named * t
val make_const_boxed_int_named : 'i boxed_int -> 'i -> Flambda.named * t
val augment_with_variable : t -> Variable.t -> t
val augment_with_symbol : t -> Symbol.t -> t
val augment_with_symbol_field : t -> Symbol.t -> int -> t
val replace_description : t -> descr -> t
val augment_with_kind : t -> Lambda.value_kind -> t
val augment_kind_with_approx : t -> Lambda.value_kind -> Lambda.value_kind
val equal_boxed_int : 'a boxed_int -> 'a -> 'b boxed_int -> 'b -> bool
val meet : really_import_approx:(t -> t) -> t -> t -> t
val known : t -> bool
val useful : t -> bool
val all_not_useful : t list -> bool
val warn_on_mutation : t -> bool
type simplification_summary = Nothing_done | Replaced_term
type simplification_result = Flambda.t * simplification_summary * t
type simplification_result_named = Flambda.named * simplification_summary * t
val simplify : t -> Flambda.t -> simplification_result
val simplify_using_env :
  t ->
  is_present_in_env:(Variable.t -> bool) ->
  Flambda.t -> simplification_result
val simplify_named : t -> Flambda.named -> simplification_result_named
val simplify_named_using_env :
  t ->
  is_present_in_env:(Variable.t -> bool) ->
  Flambda.named -> simplification_result_named
val simplify_var_to_var_using_env :
  t -> is_present_in_env:(Variable.t -> bool) -> Variable.t option
val simplify_var : t -> (Flambda.named * t) option
type get_field_result = Ok of t | Unreachable
val get_field : t -> field_index:int -> get_field_result
type checked_approx_for_block = Wrong | Ok of Tag.t * t array
val check_approx_for_block : t -> checked_approx_for_block
val approx_for_bound_var : value_set_of_closures -> Var_within_closure.t -> t
val freshen_and_check_closure_id :
  value_set_of_closures -> Closure_id.t -> Closure_id.t
type strict_checked_approx_for_set_of_closures =
    Wrong
  | Ok of Variable.t option * value_set_of_closures
val strict_check_approx_for_set_of_closures :
  t -> strict_checked_approx_for_set_of_closures
type checked_approx_for_set_of_closures =
    Wrong
  | Unresolved of unresolved_value
  | Unknown
  | Unknown_because_of_unresolved_value of unresolved_value
  | Ok of Variable.t option * value_set_of_closures
val check_approx_for_set_of_closures :
  t -> checked_approx_for_set_of_closures
type checked_approx_for_closure =
    Wrong
  | Ok of value_closure * Variable.t option * Symbol.t option *
      value_set_of_closures
val check_approx_for_closure : t -> checked_approx_for_closure
type checked_approx_for_closure_allowing_unresolved =
    Wrong
  | Unresolved of unresolved_value
  | Unknown
  | Unknown_because_of_unresolved_value of unresolved_value
  | Ok of value_closure * Variable.t option * Symbol.t option *
      value_set_of_closures
val check_approx_for_closure_allowing_unresolved :
  t -> checked_approx_for_closure_allowing_unresolved
val check_approx_for_float : t -> float option
val float_array_as_constant : value_float_array -> float list option
val check_approx_for_string : t -> string option
type switch_branch_selection = Cannot_be_taken | Can_be_taken | Must_be_taken
val potentially_taken_const_switch_branch :
  t -> int -> switch_branch_selection
val potentially_taken_block_switch_branch :
  t -> int -> switch_branch_selection
val function_arity : function_declaration -> int
val update_function_declarations :
  function_declarations ->
  funs:function_declaration Variable.Map.t -> function_declarations
val import_function_declarations_for_pack :
  function_declarations ->
  (Set_of_closures_id.t -> Set_of_closures_id.t) ->
  (Set_of_closures_origin.t -> Set_of_closures_origin.t) ->
  function_declarations
val update_function_declaration_body :
  function_declaration -> (Flambda.t -> Flambda.t) -> function_declaration
val make_closure_map :
  function_declarations Set_of_closures_id.Map.t ->
  function_declarations Closure_id.Map.t
("DEBUG:rule", [Tag1 (("boxed_int", 2110), ([((("a")), 100000000, 0, -498)], 1, Tag1 ([(("Int32", 270), (0), ((Tag3 ((("boxed_int", 2110)), [(Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -493)], (0)), 100000000, 0, -492)), (("middle_end/flambda/simple_value_approx.mli", 24, 1420, 1422), ("middle_end/flambda/simple_value_approx.mli", 24, 1420, 1447), 0), 0, Tag1 ("Simple_value_approx", 1)); (("Int64", 271), (0), ((Tag3 ((("boxed_int", 2110)), [(Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -495)], (0)), 100000000, 0, -494)), (("middle_end/flambda/simple_value_approx.mli", 25, 1448, 1450), ("middle_end/flambda/simple_value_approx.mli", 25, 1448, 1475), 0), 0, Tag1 ("Simple_value_approx", 2)); (("Nativeint", 272), (0), ((Tag3 ((("boxed_int", 2110)), [(Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -497)], (0)), 100000000, 0, -496)), (("middle_end/flambda/simple_value_approx.mli", 26, 1476, 1478), ("middle_end/flambda/simple_value_approx.mli", 26, 1476, 1511), 0), 0, Tag1 ("Simple_value_approx", 3))], 0), 1, 0, [63], [0], 0, 0, (("middle_end/flambda/simple_value_approx.mli", 23, 1400, 1400), ("middle_end/flambda/simple_value_approx.mli", 26, 1476, 1511), 0), 0, 1, 0, Tag1 ("Simple_value_approx", 0)), 1, 0); Tag1 (("value_string", 2111), (0, 0, [[(("contents", 274), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -490)], (0)), 100000000, 0, -489), (("middle_end/flambda/simple_value_approx.mli", 29, 1535, 1537), ("middle_end/flambda/simple_value_approx.mli", 29, 1535, 1562), 0), 0, Tag1 ("Simple_value_approx", 5)); (("size", 275), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -491), (("middle_end/flambda/simple_value_approx.mli", 30, 1599, 1601), ("middle_end/flambda/simple_value_approx.mli", 30, 1599, 1612), 0), 0, Tag1 ("Simple_value_approx", 6))]], 1, 0, 0, 0, 0, 0, (("middle_end/flambda/simple_value_approx.mli", 28, 1513, 1513), ("middle_end/flambda/simple_value_approx.mli", 31, 1613, 1614), 0), 0, 0, 0, Tag1 ("Simple_value_approx", 4)), 1, 0); Tag1 (("unresolved_value", 2112), (0, 0, Tag1 ([(("Set_of_closures_id", 277), ([(Tag3 (Tag1 ((Tag2 ("Set_of_closures_id")), "t"), 0, (0)), 100000000, 0, -487)]), 0, (("middle_end/flambda/simple_value_approx.mli", 34, 1640, 1642), ("middle_end/flambda/simple_value_approx.mli", 34, 1640, 1686), 0), 0, Tag1 ("Simple_value_approx", 8)); (("Symbol", 291), ([(Tag3 (Tag1 ((Tag2 ("Symbol")), "t"), 0, (0)), 100000000, 0, -488)]), 0, (("middle_end/flambda/simple_value_approx.mli", 35, 1687, 1689), ("middle_end/flambda/simple_value_approx.mli", 35, 1687, 1709), 0), 0, Tag1 ("Simple_value_approx", 9))], 0), 1, 0, 0, 0, 0, 0, (("middle_end/flambda/simple_value_approx.mli", 33, 1616, 1616), ("middle_end/flambda/simple_value_approx.mli", 35, 1687, 1709), 0), 0, 0, 0, Tag1 ("Simple_value_approx", 7)), 1, 0); Tag1 (("unknown_because_of", 2113), (0, 0, Tag1 ([(("Unresolved_value", 310), ([(Tag3 ((("unresolved_value", 2112)), 0, (0)), 100000000, 0, -486)]), 0, (("middle_end/flambda/simple_value_approx.mli", 38, 1737, 1739), ("middle_end/flambda/simple_value_approx.mli", 38, 1737, 1777), 0), 0, Tag1 ("Simple_value_approx", 11)); (("Other", 311), (0), 0, (("middle_end/flambda/simple_value_approx.mli", 39, 1778, 1780), ("middle_end/flambda/simple_value_approx.mli", 39, 1778, 1787), 0), 0, Tag1 ("Simple_value_approx", 12))], 0), 1, 0, 0, 0, 0, 0, (("middle_end/flambda/simple_value_approx.mli", 37, 1711, 1711), ("middle_end/flambda/simple_value_approx.mli", 39, 1778, 1787), 0), 0, 0, 0, Tag1 ("Simple_value_approx", 10)), 1, 0); Tag1 (("t", 2114), (0, 0, [[(("descr", 321), 0, (Tag3 ((("descr", 2115)), 0, (0)), 100000000, 0, -478), (("middle_end/flambda/simple_value_approx.mli", 118, 5249, 5251), ("middle_end/flambda/simple_value_approx.mli", 118, 5249, 5265), 0), 0, Tag1 ("Simple_value_approx", 22)); (("var", 346), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -480)], (0)), 100000000, 0, -479), (("middle_end/flambda/simple_value_approx.mli", 119, 5266, 5268), ("middle_end/flambda/simple_value_approx.mli", 119, 5266, 5292), 0), 0, Tag1 ("Simple_value_approx", 23)); (("symbol", 347), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Symbol")), "t"), 0, (0)), 100000000, 0, -483); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -485)], (0)), 100000000, 0, -484)]), 100000000, 0, -482)], (0)), 100000000, 0, -481), (("middle_end/flambda/simple_value_approx.mli", 120, 5293, 5295), ("middle_end/flambda/simple_value_approx.mli", 120, 5293, 5335), 0), 0, Tag1 ("Simple_value_approx", 24))]], 0, 0, 0, 0, 0, 0, (("middle_end/flambda/simple_value_approx.mli", 117, 5230, 5230), ("middle_end/flambda/simple_value_approx.mli", 121, 5336, 5337), 0), 0, 0, 0, Tag1 ("Simple_value_approx", 13)), 1, 0); Tag1 (("descr", 2115), (0, 0, Tag1 ([(("Value_block", 348), ([(Tag3 (Tag1 ((Tag2 ("Tag")), "t"), 0, (0)), 100000000, 0, -460); (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -462)], (0)), 100000000, 0, -461)]), 0, (("middle_end/flambda/simple_value_approx.mli", 124, 5359, 5361), ("middle_end/flambda/simple_value_approx.mli", 124, 5359, 5393), 0), 0, Tag1 ("Simple_value_approx", 25)); (("Value_int", 363), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -463)]), 0, (("middle_end/flambda/simple_value_approx.mli", 125, 5394, 5396), ("middle_end/flambda/simple_value_approx.mli", 125, 5394, 5414), 0), 0, Tag1 ("Simple_value_approx", 26)); (("Value_char", 364), ([(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -464)]), 0, (("middle_end/flambda/simple_value_approx.mli", 126, 5415, 5417), ("middle_end/flambda/simple_value_approx.mli", 126, 5415, 5437), 0), 0, Tag1 ("Simple_value_approx", 27)); (("Value_float", 365), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -466)], (0)), 100000000, 0, -465)]), 0, (("middle_end/flambda/simple_value_approx.mli", 127, 5438, 5440), ("middle_end/flambda/simple_value_approx.mli", 127, 5438, 5469), 0), 0, Tag1 ("Simple_value_approx", 28)); (("Value_boxed_int", 366), ([(Tag3 ((("boxed_int", 2110)), [((("a")), 100000000, 0, -469)], (0)), 100000000, 0, -468); ((("a")), 100000000, 0, -469)]), ((Tag3 ((("descr", 2115)), 0, (0)), 100000000, 0, -467)), (("middle_end/flambda/simple_value_approx.mli", 128, 5470, 5472), ("middle_end/flambda/simple_value_approx.mli", 128, 5470, 5518), 0), 0, Tag1 ("Simple_value_approx", 29)); (("Value_set_of_closures", 367), ([(Tag3 ((("value_set_of_closures", 2120)), 0, (0)), 100000000, 0, -470)]), 0, (("middle_end/flambda/simple_value_approx.mli", 129, 5519, 5521), ("middle_end/flambda/simple_value_approx.mli", 129, 5519, 5569), 0), 0, Tag1 ("Simple_value_approx", 30)); (("Value_closure", 368), ([(Tag3 ((("value_closure", 2116)), 0, (0)), 100000000, 0, -471)]), 0, (("middle_end/flambda/simple_value_approx.mli", 130, 5570, 5572), ("middle_end/flambda/simple_value_approx.mli", 130, 5570, 5604), 0), 0, Tag1 ("Simple_value_approx", 31)); (("Value_string", 369), ([(Tag3 ((("value_string", 2111)), 0, (0)), 100000000, 0, -472)]), 0, (("middle_end/flambda/simple_value_approx.mli", 131, 5605, 5607), ("middle_end/flambda/simple_value_approx.mli", 131, 5605, 5637), 0), 0, Tag1 ("Simple_value_approx", 32)); (("Value_float_array", 370), ([(Tag3 ((("value_float_array", 2122)), 0, (0)), 100000000, 0, -473)]), 0, (("middle_end/flambda/simple_value_approx.mli", 132, 5638, 5640), ("middle_end/flambda/simple_value_approx.mli", 132, 5638, 5680), 0), 0, Tag1 ("Simple_value_approx", 33)); (("Value_unknown", 371), ([(Tag3 ((("unknown_because_of", 2113)), 0, (0)), 100000000, 0, -474)]), 0, (("middle_end/flambda/simple_value_approx.mli", 133, 5681, 5683), ("middle_end/flambda/simple_value_approx.mli", 133, 5681, 5720), 0), 0, Tag1 ("Simple_value_approx", 34)); (("Value_bottom", 372), (0), 0, (("middle_end/flambda/simple_value_approx.mli", 134, 5721, 5723), ("middle_end/flambda/simple_value_approx.mli", 134, 5721, 5737), 0), 0, Tag1 ("Simple_value_approx", 35)); (("Value_extern", 373), ([(Tag3 (Tag1 ((Tag2 ("Export_id")), "t"), 0, (0)), 100000000, 0, -475)]), 0, (("middle_end/flambda/simple_value_approx.mli", 135, 5738, 5740), ("middle_end/flambda/simple_value_approx.mli", 135, 5738, 5769), 0), 0, Tag1 ("Simple_value_approx", 36)); (("Value_symbol", 387), ([(Tag3 (Tag1 ((Tag2 ("Symbol")), "t"), 0, (0)), 100000000, 0, -476)]), 0, (("middle_end/flambda/simple_value_approx.mli", 136, 5770, 5772), ("middle_end/flambda/simple_value_approx.mli", 136, 5770, 5798), 0), 0, Tag1 ("Simple_value_approx", 37)); (("Value_unresolved", 388), ([(Tag3 ((("unresolved_value", 2112)), 0, (0)), 100000000, 0, -477)]), 0, (("middle_end/flambda/simple_value_approx.mli", 137, 5799, 5801), ("middle_end/flambda/simple_value_approx.mli", 137, 5799, 5839), 0), 0, Tag1 ("Simple_value_approx", 38))], 0), 0, 0, 0, 0, 0, 0, (("middle_end/flambda/simple_value_approx.mli", 123, 5339, 5339), ("middle_end/flambda/simple_value_approx.mli", 137, 5799, 5839), 0), 0, 0, 0, Tag1 ("Simple_value_approx", 14)), 2, 0); Tag1 (("value_closure", 2116), (0, 0, [[(("set_of_closures", 389), 0, (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -458), (("middle_end/flambda/simple_value_approx.mli", 141, 5913, 5915), ("middle_end/flambda/simple_value_approx.mli", 141, 5913, 5935), 0), 0, Tag1 ("Simple_value_approx", 39)); (("closure_id", 408), 0, (Tag3 (Tag1 ((Tag2 ("Closure_id")), "t"), 0, (0)), 100000000, 0, -459), (("middle_end/flambda/simple_value_approx.mli", 142, 5936, 5938), ("middle_end/flambda/simple_value_approx.mli", 142, 5936, 5964), 0), 0, Tag1 ("Simple_value_approx", 40))]], 1, 0, 0, 0, 0, 0, (("middle_end/flambda/simple_value_approx.mli", 140, 5891, 5891), ("middle_end/flambda/simple_value_approx.mli", 143, 5965, 5966), 0), 0, 0, 0, Tag1 ("Simple_value_approx", 15)), 2, 0); Tag1 (("function_declarations", 2117), (0, 0, [[(("is_classic_mode", 409), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -453), (("middle_end/flambda/simple_value_approx.mli", 146, 6006, 6008), ("middle_end/flambda/simple_value_approx.mli", 146, 6006, 6030), 0), 0, Tag1 ("Simple_value_approx", 41)); (("set_of_closures_id", 410), 0, (Tag3 (Tag1 ((Tag2 ("Set_of_closures_id")), "t"), 0, (0)), 100000000, 0, -454), (("middle_end/flambda/simple_value_approx.mli", 147, 6031, 6033), ("middle_end/flambda/simple_value_approx.mli", 147, 6031, 6075), 0), 0, Tag1 ("Simple_value_approx", 42)); (("set_of_closures_origin", 424), 0, (Tag3 (Tag1 ((Tag2 ("Set_of_closures_origin")), "t"), 0, (0)), 100000000, 0, -455), (("middle_end/flambda/simple_value_approx.mli", 148, 6076, 6078), ("middle_end/flambda/simple_value_approx.mli", 148, 6076, 6128), 0), 0, Tag1 ("Simple_value_approx", 43)); (("funs", 482), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Map"), "t"), [(Tag3 ((("function_declaration", 2119)), 0, (0)), 100000000, 0, -457)], (0)), 100000000, 0, -456), (("middle_end/flambda/simple_value_approx.mli", 149, 6129, 6131), ("middle_end/flambda/simple_value_approx.mli", 149, 6129, 6174), 0), 0, Tag1 ("Simple_value_approx", 44))]], 0, 0, 0, 0, 0, 0, (("middle_end/flambda/simple_value_approx.mli", 145, 5968, 5968), ("middle_end/flambda/simple_value_approx.mli", 150, 6175, 6176), 0), 0, 0, 0, Tag1 ("Simple_value_approx", 16)), 2, 0); Tag1 (("function_body", 2118), (0, 0, [[(("free_variables", 531), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Set"), "t"), 0, (0)), 100000000, 0, -444), (("middle_end/flambda/simple_value_approx.mli", 153, 6208, 6210), ("middle_end/flambda/simple_value_approx.mli", 153, 6208, 6242), 0), 0, Tag1 ("Simple_value_approx", 48)); (("free_symbols", 580), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Symbol")), "Set"), "t"), 0, (0)), 100000000, 0, -445), (("middle_end/flambda/simple_value_approx.mli", 154, 6243, 6245), ("middle_end/flambda/simple_value_approx.mli", 154, 6243, 6273), 0), 0, Tag1 ("Simple_value_approx", 49)); (("stub", 581), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -446), (("middle_end/flambda/simple_value_approx.mli", 155, 6274, 6276), ("middle_end/flambda/simple_value_approx.mli", 155, 6274, 6288), 0), 0, Tag1 ("Simple_value_approx", 50)); (("dbg", 596), 0, (Tag3 (Tag1 ((Tag2 ("Debuginfo")), "t"), 0, (0)), 100000000, 0, -447), (("middle_end/flambda/simple_value_approx.mli", 156, 6289, 6291), ("middle_end/flambda/simple_value_approx.mli", 156, 6289, 6309), 0), 0, Tag1 ("Simple_value_approx", 51)); (("inline", 675), 0, (Tag3 (Tag1 ((Tag2 ("Lambda")), "inline_attribute"), 0, (0)), 100000000, 0, -448), (("middle_end/flambda/simple_value_approx.mli", 157, 6310, 6312), ("middle_end/flambda/simple_value_approx.mli", 157, 6310, 6345), 0), 0, Tag1 ("Simple_value_approx", 52)); (("specialise", 676), 0, (Tag3 (Tag1 ((Tag2 ("Lambda")), "specialise_attribute"), 0, (0)), 100000000, 0, -449), (("middle_end/flambda/simple_value_approx.mli", 158, 6346, 6348), ("middle_end/flambda/simple_value_approx.mli", 158, 6346, 6389), 0), 0, Tag1 ("Simple_value_approx", 53)); (("is_a_functor", 677), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -450), (("middle_end/flambda/simple_value_approx.mli", 159, 6390, 6392), ("middle_end/flambda/simple_value_approx.mli", 159, 6390, 6412), 0), 0, Tag1 ("Simple_value_approx", 54)); (("body", 746), 0, (Tag3 (Tag1 ((Tag2 ("Flambda")), "t"), 0, (0)), 100000000, 0, -451), (("middle_end/flambda/simple_value_approx.mli", 160, 6413, 6415), ("middle_end/flambda/simple_value_approx.mli", 160, 6413, 6432), 0), 0, Tag1 ("Simple_value_approx", 55)); (("poll", 747), 0, (Tag3 (Tag1 ((Tag2 ("Lambda")), "poll_attribute"), 0, (0)), 100000000, 0, -452), (("middle_end/flambda/simple_value_approx.mli", 161, 6433, 6435), ("middle_end/flambda/simple_value_approx.mli", 161, 6433, 6463), 0), 0, Tag1 ("Simple_value_approx", 56))]], 0, 0, 0, 0, 0, 0, (("middle_end/flambda/simple_value_approx.mli", 152, 6178, 6178), ("middle_end/flambda/simple_value_approx.mli", 162, 6464, 6465), 0), 0, 0, 0, Tag1 ("Simple_value_approx", 17)), 2, 0); Tag1 (("function_declaration", 2119), (0, 0, [[(("closure_origin", 994), 0, (Tag3 (Tag1 ((Tag2 ("Closure_origin")), "t"), 0, (0)), 100000000, 0, -439), (("middle_end/flambda/simple_value_approx.mli", 165, 6504, 6506), ("middle_end/flambda/simple_value_approx.mli", 165, 6504, 6540), 0), 0, Tag1 ("Simple_value_approx", 57)); (("params", 1011), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Parameter")), "t"), 0, (0)), 100000000, 0, -441)], (0)), 100000000, 0, -440), (("middle_end/flambda/simple_value_approx.mli", 166, 6541, 6543), ("middle_end/flambda/simple_value_approx.mli", 166, 6541, 6569), 0), 0, Tag1 ("Simple_value_approx", 58)); (("function_body", 1012), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("function_body", 2118)), 0, (0)), 100000000, 0, -443)], (0)), 100000000, 0, -442), (("middle_end/flambda/simple_value_approx.mli", 167, 6570, 6572), ("middle_end/flambda/simple_value_approx.mli", 167, 6570, 6609), 0), 0, Tag1 ("Simple_value_approx", 59))]], 0, 0, 0, 0, 0, 0, (("middle_end/flambda/simple_value_approx.mli", 164, 6467, 6467), ("middle_end/flambda/simple_value_approx.mli", 168, 6610, 6611), 0), 0, 0, 0, Tag1 ("Simple_value_approx", 18)), 2, 0); Tag1 (("value_set_of_closures", 2120), (0, 0, [[(("function_decls", 1013), 0, (Tag3 ((("function_declarations", 2117)), 0, (0)), 100000000, 0, -420), (("middle_end/flambda/simple_value_approx.mli", 181, 7083, 7085), ("middle_end/flambda/simple_value_approx.mli", 181, 7083, 7124), 0), 0, Tag1 ("Simple_value_approx", 60)); (("bound_vars", 1089), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Var_within_closure")), "Map"), "t"), [(Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -422)], (0)), 100000000, 0, -421), (("middle_end/flambda/simple_value_approx.mli", 182, 7125, 7127), ("middle_end/flambda/simple_value_approx.mli", 182, 7125, 7167), 0), 0, Tag1 ("Simple_value_approx", 61)); (("free_vars", 1090), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Map"), "t"), [(Tag3 (Tag1 ((Tag2 ("Flambda")), "specialised_to"), 0, (0)), 100000000, 0, -424)], (0)), 100000000, 0, -423), (("middle_end/flambda/simple_value_approx.mli", 183, 7168, 7170), ("middle_end/flambda/simple_value_approx.mli", 183, 7168, 7220), 0), 0, Tag1 ("Simple_value_approx", 62)); (("invariant_params", 1100), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lazy"), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Map"), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Set"), "t"), 0, (0)), 100000000, 0, -427)], (0)), 100000000, 0, -426)], (0)), 100000000, 0, -425), (("middle_end/flambda/simple_value_approx.mli", 184, 7221, 7223), ("middle_end/flambda/simple_value_approx.mli", 184, 7221, 7279), 0), 0, Tag1 ("Simple_value_approx", 63)); (("recursive", 1101), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lazy"), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Set"), "t"), 0, (0)), 100000000, 0, -429)], (0)), 100000000, 0, -428), (("middle_end/flambda/simple_value_approx.mli", 185, 7280, 7282), ("middle_end/flambda/simple_value_approx.mli", 185, 7280, 7316), 0), 0, Tag1 ("Simple_value_approx", 64)); (("size", 1102), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lazy"), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Map"), "t"), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -433)], (0)), 100000000, 0, -432)], (0)), 100000000, 0, -431)], (0)), 100000000, 0, -430), (("middle_end/flambda/simple_value_approx.mli", 186, 7317, 7319), ("middle_end/flambda/simple_value_approx.mli", 186, 7317, 7359), 0), 0, Tag1 ("Simple_value_approx", 65)); (("specialised_args", 1103), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Map"), "t"), [(Tag3 (Tag1 ((Tag2 ("Flambda")), "specialised_to"), 0, (0)), 100000000, 0, -435)], (0)), 100000000, 0, -434), (("middle_end/flambda/simple_value_approx.mli", 189, 7458, 7460), ("middle_end/flambda/simple_value_approx.mli", 189, 7458, 7517), 0), 0, Tag1 ("Simple_value_approx", 66)); (("freshening", 1131), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Freshening")), "Project_var"), "t"), 0, (0)), 100000000, 0, -436), (("middle_end/flambda/simple_value_approx.mli", 191, 7584, 7586), ("middle_end/flambda/simple_value_approx.mli", 191, 7584, 7624), 0), 0, Tag1 ("Simple_value_approx", 67)); (("direct_call_surrogates", 1189), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Closure_id")), "Map"), "t"), [(Tag3 (Tag1 ((Tag2 ("Closure_id")), "t"), 0, (0)), 100000000, 0, -438)], (0)), 100000000, 0, -437), (("middle_end/flambda/simple_value_approx.mli", 192, 7625, 7627), ("middle_end/flambda/simple_value_approx.mli", 192, 7625, 7682), 0), 0, Tag1 ("Simple_value_approx", 68))]], 0, 0, 0, 0, 0, 0, (("middle_end/flambda/simple_value_approx.mli", 180, 7045, 7045), ("middle_end/flambda/simple_value_approx.mli", 193, 7683, 7684), 0), 0, 0, 0, Tag1 ("Simple_value_approx", 19)), 2, 0); Tag1 (("value_float_array_contents", 2121), (0, 0, Tag1 ([(("Contents", 1190), ([(Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -419)], (0)), 100000000, 0, -418)]), 0, (("middle_end/flambda/simple_value_approx.mli", 196, 7719, 7721), ("middle_end/flambda/simple_value_approx.mli", 196, 7719, 7742), 0), 0, Tag1 ("Simple_value_approx", 69)); (("Unknown_or_mutable", 1191), (0), 0, (("middle_end/flambda/simple_value_approx.mli", 197, 7743, 7745), ("middle_end/flambda/simple_value_approx.mli", 197, 7743, 7765), 0), 0, Tag1 ("Simple_value_approx", 70))], 0), 1, 0, 0, 0, 0, 0, (("middle_end/flambda/simple_value_approx.mli", 195, 7686, 7686), ("middle_end/flambda/simple_value_approx.mli", 197, 7743, 7765), 0), 0, 0, 0, Tag1 ("Simple_value_approx", 20)), 2, 0); Tag1 (("value_float_array", 2122), (0, 0, [[(("contents", 1192), 0, (Tag3 ((("value_float_array_contents", 2121)), 0, (0)), 100000000, 0, -416), (("middle_end/flambda/simple_value_approx.mli", 200, 7793, 7795), ("middle_end/flambda/simple_value_approx.mli", 200, 7793, 7833), 0), 0, Tag1 ("Simple_value_approx", 71)); (("size", 1193), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -417), (("middle_end/flambda/simple_value_approx.mli", 201, 7834, 7836), ("middle_end/flambda/simple_value_approx.mli", 201, 7834, 7847), 0), 0, Tag1 ("Simple_value_approx", 72))]], 1, 0, 0, 0, 0, 0, (("middle_end/flambda/simple_value_approx.mli", 199, 7767, 7767), ("middle_end/flambda/simple_value_approx.mli", 202, 7848, 7849), 0), 0, 0, 0, Tag1 ("Simple_value_approx", 21)), 2, 0); (("descr", 2123), ((Tag1 (0, (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -415), (Tag3 ((("descr", 2115)), 0, (0)), 100000000, 0, -414), 0), 100000000, 0, -413), 0, (("middle_end/flambda/simple_value_approx.mli", 205, 7909, 7909), ("middle_end/flambda/simple_value_approx.mli", 205, 7909, 7931), 0), 0, Tag1 ("Simple_value_approx", 73)), 0); (("descrs", 2124), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -412)], (0)), 100000000, 0, -411), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("descr", 2115)), 0, (0)), 100000000, 0, -410)], (0)), 100000000, 0, -409), 0), 100000000, 0, -408), 0, (("middle_end/flambda/simple_value_approx.mli", 206, 7932, 7932), ("middle_end/flambda/simple_value_approx.mli", 206, 7932, 7965), 0), 0, Tag1 ("Simple_value_approx", 74)), 0); (("print", 2125), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -407), (Tag1 (0, (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -406), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -405), 0), 100000000, 0, -404), 0), 100000000, 0, -403), 0, (("middle_end/flambda/simple_value_approx.mli", 209, 8024, 8024), ("middle_end/flambda/simple_value_approx.mli", 209, 8024, 8065), 0), 0, Tag1 ("Simple_value_approx", 75)), 0); (("print_descr", 2126), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -402), (Tag1 (0, (Tag3 ((("descr", 2115)), 0, (0)), 100000000, 0, -401), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -400), 0), 100000000, 0, -399), 0), 100000000, 0, -398), 0, (("middle_end/flambda/simple_value_approx.mli", 210, 8066, 8066), ("middle_end/flambda/simple_value_approx.mli", 210, 8066, 8117), 0), 0, Tag1 ("Simple_value_approx", 76)), 0); (("print_value_set_of_closures", 2127), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -397), (Tag1 (0, (Tag3 ((("value_set_of_closures", 2120)), 0, (0)), 100000000, 0, -396), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -395), 0), 100000000, 0, -394), 0), 100000000, 0, -393), 0, (("middle_end/flambda/simple_value_approx.mli", 211, 8118, 8118), ("middle_end/flambda/simple_value_approx.mli", 214, 8199, 8208), 0), 0, Tag1 ("Simple_value_approx", 77)), 0); (("print_function_declarations", 2128), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -392), (Tag1 (0, (Tag3 ((("function_declarations", 2117)), 0, (0)), 100000000, 0, -391), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -390), 0), 100000000, 0, -389), 0), 100000000, 0, -388), 0, (("middle_end/flambda/simple_value_approx.mli", 215, 8209, 8209), ("middle_end/flambda/simple_value_approx.mli", 218, 8289, 8298), 0), 0, Tag1 ("Simple_value_approx", 78)), 0); (("function_declarations_approx", 2129), ((Tag1 (("keep_body"), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -387), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Flambda")), "function_declaration"), 0, (0)), 100000000, 0, -386), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -385), 0), 100000000, 0, -384), 0), 100000000, 0, -383), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Flambda")), "function_declarations"), 0, (0)), 100000000, 0, -382), (Tag3 ((("function_declarations", 2117)), 0, (0)), 100000000, 0, -381), 0), 100000000, 0, -380), 0), 100000000, 0, -379), 0, (("middle_end/flambda/simple_value_approx.mli", 220, 8300, 8300), ("middle_end/flambda/simple_value_approx.mli", 223, 8436, 8462), 0), 0, Tag1 ("Simple_value_approx", 79)), 0); (("create_value_set_of_closures", 2130), ((Tag1 (("function_decls"), (Tag3 ((("function_declarations", 2117)), 0, (0)), 100000000, 0, -378), (Tag1 (("bound_vars"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Var_within_closure")), "Map"), "t"), [(Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -377)], (0)), 100000000, 0, -376), (Tag1 (("free_vars"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Map"), "t"), [(Tag3 (Tag1 ((Tag2 ("Flambda")), "specialised_to"), 0, (0)), 100000000, 0, -375)], (0)), 100000000, 0, -374), (Tag1 (("invariant_params"), (Tag3 ((Tag3 ("lazy_t", 14)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Map"), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Set"), "t"), 0, (0)), 100000000, 0, -373)], (0)), 100000000, 0, -372)], (0)), 100000000, 0, -371), (Tag1 (("recursive"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lazy"), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Set"), "t"), 0, (0)), 100000000, 0, -370)], (0)), 100000000, 0, -369), (Tag1 (("specialised_args"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Map"), "t"), [(Tag3 (Tag1 ((Tag2 ("Flambda")), "specialised_to"), 0, (0)), 100000000, 0, -368)], (0)), 100000000, 0, -367), (Tag1 (("freshening"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Freshening")), "Project_var"), "t"), 0, (0)), 100000000, 0, -366), (Tag1 (("direct_call_surrogates"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Closure_id")), "Map"), "t"), [(Tag3 (Tag1 ((Tag2 ("Closure_id")), "t"), 0, (0)), 100000000, 0, -365)], (0)), 100000000, 0, -364), (Tag3 ((("value_set_of_closures", 2120)), 0, (0)), 100000000, 0, -363), 0), 100000000, 0, -362), 0), 100000000, 0, -361), 0), 100000000, 0, -360), 0), 100000000, 0, -359), 0), 100000000, 0, -358), 0), 100000000, 0, -357), 0), 100000000, 0, -356), 0), 100000000, 0, -355), 0, (("middle_end/flambda/simple_value_approx.mli", 225, 8464, 8464), ("middle_end/flambda/simple_value_approx.mli", 234, 8890, 8916), 0), 0, Tag1 ("Simple_value_approx", 80)), 0); (("update_freshening_of_value_set_of_closures", 2131), ((Tag1 (0, (Tag3 ((("value_set_of_closures", 2120)), 0, (0)), 100000000, 0, -354), (Tag1 (("freshening"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Freshening")), "Project_var"), "t"), 0, (0)), 100000000, 0, -353), (Tag3 ((("value_set_of_closures", 2120)), 0, (0)), 100000000, 0, -352), 0), 100000000, 0, -351), 0), 100000000, 0, -350), 0, (("middle_end/flambda/simple_value_approx.mli", 236, 8918, 8918), ("middle_end/flambda/simple_value_approx.mli", 239, 9033, 9059), 0), 0, Tag1 ("Simple_value_approx", 81)), 0); (("value_unknown", 2132), ((Tag1 (0, (Tag3 ((("unknown_because_of", 2113)), 0, (0)), 100000000, 0, -349), (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -348), 0), 100000000, 0, -347), 0, (("middle_end/flambda/simple_value_approx.mli", 242, 9106, 9106), ("middle_end/flambda/simple_value_approx.mli", 242, 9106, 9149), 0), 0, Tag1 ("Simple_value_approx", 82)), 0); (("value_int", 2133), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -346), (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -345), 0), 100000000, 0, -344), 0, (("middle_end/flambda/simple_value_approx.mli", 243, 9150, 9150), ("middle_end/flambda/simple_value_approx.mli", 243, 9150, 9174), 0), 0, Tag1 ("Simple_value_approx", 83)), 0); (("value_char", 2134), ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -343), (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -342), 0), 100000000, 0, -341), 0, (("middle_end/flambda/simple_value_approx.mli", 244, 9175, 9175), ("middle_end/flambda/simple_value_approx.mli", 244, 9175, 9201), 0), 0, Tag1 ("Simple_value_approx", 84)), 0); (("value_float", 2135), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -340), (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -339), 0), 100000000, 0, -338), 0, (("middle_end/flambda/simple_value_approx.mli", 245, 9202, 9202), ("middle_end/flambda/simple_value_approx.mli", 245, 9202, 9230), 0), 0, Tag1 ("Simple_value_approx", 85)), 0); (("value_any_float", 2136), ((Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -337), 0, (("middle_end/flambda/simple_value_approx.mli", 246, 9231, 9231), ("middle_end/flambda/simple_value_approx.mli", 246, 9231, 9254), 0), 0, Tag1 ("Simple_value_approx", 86)), 0); (("value_mutable_float_array", 2137), ((Tag1 (("size"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -336), (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -335), 0), 100000000, 0, -334), 0, (("middle_end/flambda/simple_value_approx.mli", 247, 9255, 9255), ("middle_end/flambda/simple_value_approx.mli", 247, 9255, 9300), 0), 0, Tag1 ("Simple_value_approx", 87)), 0); (("value_immutable_float_array", 2138), ((Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -333)], (0)), 100000000, 0, -332), (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -331), 0), 100000000, 0, -330), 0, (("middle_end/flambda/simple_value_approx.mli", 248, 9301, 9301), ("middle_end/flambda/simple_value_approx.mli", 248, 9301, 9347), 0), 0, Tag1 ("Simple_value_approx", 88)), 0); (("value_string", 2139), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -329), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -328)], (0)), 100000000, 0, -327), (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -326), 0), 100000000, 0, -325), 0), 100000000, 0, -324), 0, (("middle_end/flambda/simple_value_approx.mli", 249, 9348, 9348), ("middle_end/flambda/simple_value_approx.mli", 249, 9348, 9392), 0), 0, Tag1 ("Simple_value_approx", 89)), 0); (("value_boxed_int", 2140), ((Tag1 (0, (Tag3 ((("boxed_int", 2110)), [((("i")), 100000000, 0, -322)], (0)), 100000000, 0, -323), (Tag1 (0, ((("i")), 100000000, 0, -322), (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -321), 0), 100000000, 0, -320), 0), 100000000, 0, -319), 0, (("middle_end/flambda/simple_value_approx.mli", 250, 9393, 9393), ("middle_end/flambda/simple_value_approx.mli", 250, 9393, 9438), 0), 0, Tag1 ("Simple_value_approx", 90)), 0); (("value_block", 2141), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Tag")), "t"), 0, (0)), 100000000, 0, -318), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -317)], (0)), 100000000, 0, -316), (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -315), 0), 100000000, 0, -314), 0), 100000000, 0, -313), 0, (("middle_end/flambda/simple_value_approx.mli", 251, 9439, 9439), ("middle_end/flambda/simple_value_approx.mli", 251, 9439, 9478), 0), 0, Tag1 ("Simple_value_approx", 91)), 0); (("value_extern", 2142), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Export_id")), "t"), 0, (0)), 100000000, 0, -312), (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -311), 0), 100000000, 0, -310), 0, (("middle_end/flambda/simple_value_approx.mli", 252, 9479, 9479), ("middle_end/flambda/simple_value_approx.mli", 252, 9479, 9514), 0), 0, Tag1 ("Simple_value_approx", 92)), 0); (("value_symbol", 2143), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Symbol")), "t"), 0, (0)), 100000000, 0, -309), (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -308), 0), 100000000, 0, -307), 0, (("middle_end/flambda/simple_value_approx.mli", 253, 9515, 9515), ("middle_end/flambda/simple_value_approx.mli", 253, 9515, 9547), 0), 0, Tag1 ("Simple_value_approx", 93)), 0); (("value_bottom", 2144), ((Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -306), 0, (("middle_end/flambda/simple_value_approx.mli", 254, 9548, 9548), ("middle_end/flambda/simple_value_approx.mli", 254, 9548, 9568), 0), 0, Tag1 ("Simple_value_approx", 94)), 0); (("value_unresolved", 2145), ((Tag1 (0, (Tag3 ((("unresolved_value", 2112)), 0, (0)), 100000000, 0, -305), (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -304), 0), 100000000, 0, -303), 0, (("middle_end/flambda/simple_value_approx.mli", 255, 9569, 9569), ("middle_end/flambda/simple_value_approx.mli", 255, 9569, 9613), 0), 0, Tag1 ("Simple_value_approx", 95)), 0); (("value_closure", 2146), ((Tag1 (Tag1 ("closure_var"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -302)], (0)), 100000000, 0, -301), (Tag1 (Tag1 ("set_of_closures_var"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -300)], (0)), 100000000, 0, -299), (Tag1 (Tag1 ("set_of_closures_symbol"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Symbol")), "t"), 0, (0)), 100000000, 0, -298)], (0)), 100000000, 0, -297), (Tag1 (0, (Tag3 ((("value_set_of_closures", 2120)), 0, (0)), 100000000, 0, -296), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Closure_id")), "t"), 0, (0)), 100000000, 0, -295), (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -294), 0), 100000000, 0, -293), 0), 100000000, 0, -292), 0), 100000000, 0, -291), 0), 100000000, 0, -290), 0), 100000000, 0, -289), 0, (("middle_end/flambda/simple_value_approx.mli", 263, 10019, 10019), ("middle_end/flambda/simple_value_approx.mli", 269, 10186, 10192), 0), 0, Tag1 ("Simple_value_approx", 96)), 0); (("value_set_of_closures", 2147), ((Tag1 (Tag1 ("set_of_closures_var"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -288)], (0)), 100000000, 0, -287), (Tag1 (0, (Tag3 ((("value_set_of_closures", 2120)), 0, (0)), 100000000, 0, -286), (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -285), 0), 100000000, 0, -284), 0), 100000000, 0, -283), 0, (("middle_end/flambda/simple_value_approx.mli", 273, 10339, 10339), ("middle_end/flambda/simple_value_approx.mli", 276, 10429, 10435), 0), 0, Tag1 ("Simple_value_approx", 97)), 0); (("make_const_int", 2148), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -282), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Flambda")), "t"), 0, (0)), 100000000, 0, -280); (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -281)]), 100000000, 0, -279), 0), 100000000, 0, -278), 0, (("middle_end/flambda/simple_value_approx.mli", 280, 10573, 10573), ("middle_end/flambda/simple_value_approx.mli", 280, 10573, 10614), 0), 0, Tag1 ("Simple_value_approx", 98)), 0); (("make_const_char", 2149), ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -277), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Flambda")), "t"), 0, (0)), 100000000, 0, -275); (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -276)]), 100000000, 0, -274), 0), 100000000, 0, -273), 0, (("middle_end/flambda/simple_value_approx.mli", 281, 10615, 10615), ("middle_end/flambda/simple_value_approx.mli", 281, 10615, 10658), 0), 0, Tag1 ("Simple_value_approx", 99)), 0); (("make_const_bool", 2150), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -272), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Flambda")), "t"), 0, (0)), 100000000, 0, -270); (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -271)]), 100000000, 0, -269), 0), 100000000, 0, -268), 0, (("middle_end/flambda/simple_value_approx.mli", 282, 10659, 10659), ("middle_end/flambda/simple_value_approx.mli", 282, 10659, 10702), 0), 0, Tag1 ("Simple_value_approx", 100)), 0); (("make_const_float", 2151), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -267), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Flambda")), "t"), 0, (0)), 100000000, 0, -265); (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -266)]), 100000000, 0, -264), 0), 100000000, 0, -263), 0, (("middle_end/flambda/simple_value_approx.mli", 283, 10703, 10703), ("middle_end/flambda/simple_value_approx.mli", 283, 10703, 10748), 0), 0, Tag1 ("Simple_value_approx", 101)), 0); (("make_const_boxed_int", 2152), ((Tag1 (0, (Tag3 ((("boxed_int", 2110)), [((("i")), 100000000, 0, -261)], (0)), 100000000, 0, -262), (Tag1 (0, ((("i")), 100000000, 0, -261), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Flambda")), "t"), 0, (0)), 100000000, 0, -259); (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -260)]), 100000000, 0, -258), 0), 100000000, 0, -257), 0), 100000000, 0, -256), 0, (("middle_end/flambda/simple_value_approx.mli", 284, 10749, 10749), ("middle_end/flambda/simple_value_approx.mli", 284, 10749, 10811), 0), 0, Tag1 ("Simple_value_approx", 102)), 0); (("make_const_int_named", 2153), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -255), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Flambda")), "named"), 0, (0)), 100000000, 0, -253); (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -254)]), 100000000, 0, -252), 0), 100000000, 0, -251), 0, (("middle_end/flambda/simple_value_approx.mli", 286, 10813, 10813), ("middle_end/flambda/simple_value_approx.mli", 286, 10813, 10864), 0), 0, Tag1 ("Simple_value_approx", 103)), 0); (("make_const_char_named", 2154), ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -250), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Flambda")), "named"), 0, (0)), 100000000, 0, -248); (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -249)]), 100000000, 0, -247), 0), 100000000, 0, -246), 0, (("middle_end/flambda/simple_value_approx.mli", 287, 10865, 10865), ("middle_end/flambda/simple_value_approx.mli", 287, 10865, 10918), 0), 0, Tag1 ("Simple_value_approx", 104)), 0); (("make_const_bool_named", 2155), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -245), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Flambda")), "named"), 0, (0)), 100000000, 0, -243); (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -244)]), 100000000, 0, -242), 0), 100000000, 0, -241), 0, (("middle_end/flambda/simple_value_approx.mli", 288, 10919, 10919), ("middle_end/flambda/simple_value_approx.mli", 288, 10919, 10972), 0), 0, Tag1 ("Simple_value_approx", 105)), 0); (("make_const_float_named", 2156), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -240), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Flambda")), "named"), 0, (0)), 100000000, 0, -238); (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -239)]), 100000000, 0, -237), 0), 100000000, 0, -236), 0, (("middle_end/flambda/simple_value_approx.mli", 289, 10973, 10973), ("middle_end/flambda/simple_value_approx.mli", 289, 10973, 11028), 0), 0, Tag1 ("Simple_value_approx", 106)), 0); (("make_const_boxed_int_named", 2157), ((Tag1 (0, (Tag3 ((("boxed_int", 2110)), [((("i")), 100000000, 0, -234)], (0)), 100000000, 0, -235), (Tag1 (0, ((("i")), 100000000, 0, -234), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Flambda")), "named"), 0, (0)), 100000000, 0, -232); (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -233)]), 100000000, 0, -231), 0), 100000000, 0, -230), 0), 100000000, 0, -229), 0, (("middle_end/flambda/simple_value_approx.mli", 290, 11029, 11029), ("middle_end/flambda/simple_value_approx.mli", 290, 11029, 11101), 0), 0, Tag1 ("Simple_value_approx", 107)), 0); (("augment_with_variable", 2158), ((Tag1 (0, (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -228), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -227), (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -226), 0), 100000000, 0, -225), 0), 100000000, 0, -224), 0, (("middle_end/flambda/simple_value_approx.mli", 295, 11316, 11316), ("middle_end/flambda/simple_value_approx.mli", 295, 11316, 11364), 0), 0, Tag1 ("Simple_value_approx", 108)), 0); (("augment_with_symbol", 2159), ((Tag1 (0, (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -223), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Symbol")), "t"), 0, (0)), 100000000, 0, -222), (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -221), 0), 100000000, 0, -220), 0), 100000000, 0, -219), 0, (("middle_end/flambda/simple_value_approx.mli", 298, 11431, 11431), ("middle_end/flambda/simple_value_approx.mli", 298, 11431, 11475), 0), 0, Tag1 ("Simple_value_approx", 109)), 0); (("augment_with_symbol_field", 2160), ((Tag1 (0, (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -218), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Symbol")), "t"), 0, (0)), 100000000, 0, -217), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -216), (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -215), 0), 100000000, 0, -214), 0), 100000000, 0, -213), 0), 100000000, 0, -212), 0, (("middle_end/flambda/simple_value_approx.mli", 301, 11546, 11546), ("middle_end/flambda/simple_value_approx.mli", 301, 11546, 11603), 0), 0, Tag1 ("Simple_value_approx", 110)), 0); (("replace_description", 2161), ((Tag1 (0, (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -211), (Tag1 (0, (Tag3 ((("descr", 2115)), 0, (0)), 100000000, 0, -210), (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -209), 0), 100000000, 0, -208), 0), 100000000, 0, -207), 0, (("middle_end/flambda/simple_value_approx.mli", 304, 11661, 11661), ("middle_end/flambda/simple_value_approx.mli", 304, 11661, 11702), 0), 0, Tag1 ("Simple_value_approx", 111)), 0); (("augment_with_kind", 2162), ((Tag1 (0, (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -206), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Lambda")), "value_kind"), 0, (0)), 100000000, 0, -205), (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -204), 0), 100000000, 0, -203), 0), 100000000, 0, -202), 0, (("middle_end/flambda/simple_value_approx.mli", 307, 11767, 11767), ("middle_end/flambda/simple_value_approx.mli", 307, 11767, 11818), 0), 0, Tag1 ("Simple_value_approx", 112)), 0); (("augment_kind_with_approx", 2163), ((Tag1 (0, (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -201), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Lambda")), "value_kind"), 0, (0)), 100000000, 0, -200), (Tag3 (Tag1 ((Tag2 ("Lambda")), "value_kind"), 0, (0)), 100000000, 0, -199), 0), 100000000, 0, -198), 0), 100000000, 0, -197), 0, (("middle_end/flambda/simple_value_approx.mli", 310, 11883, 11883), ("middle_end/flambda/simple_value_approx.mli", 310, 11883, 11957), 0), 0, Tag1 ("Simple_value_approx", 113)), 0); (("equal_boxed_int", 2164), ((Tag1 (0, (Tag3 ((("boxed_int", 2110)), [((("a")), 100000000, 0, -195)], (0)), 100000000, 0, -196), (Tag1 (0, ((("a")), 100000000, 0, -195), (Tag1 (0, (Tag3 ((("boxed_int", 2110)), [((("b")), 100000000, 0, -193)], (0)), 100000000, 0, -194), (Tag1 (0, ((("b")), 100000000, 0, -193), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -192), 0), 100000000, 0, -191), 0), 100000000, 0, -190), 0), 100000000, 0, -189), 0), 100000000, 0, -188), 0, (("middle_end/flambda/simple_value_approx.mli", 312, 11959, 11959), ("middle_end/flambda/simple_value_approx.mli", 312, 11959, 12029), 0), 0, Tag1 ("Simple_value_approx", 114)), 0); (("meet", 2165), ((Tag1 (("really_import_approx"), (Tag1 (0, (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -187), (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -186), 0), 100000000, 0, -185), (Tag1 (0, (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -184), (Tag1 (0, (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -183), (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -182), 0), 100000000, 0, -181), 0), 100000000, 0, -180), 0), 100000000, 0, -179), 0, (("middle_end/flambda/simple_value_approx.mli", 316, 12172, 12172), ("middle_end/flambda/simple_value_approx.mli", 316, 12172, 12227), 0), 0, Tag1 ("Simple_value_approx", 115)), 0); (("known", 2166), ((Tag1 (0, (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -178), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -177), 0), 100000000, 0, -176), 0, (("middle_end/flambda/simple_value_approx.mli", 319, 12295, 12295), ("middle_end/flambda/simple_value_approx.mli", 319, 12295, 12316), 0), 0, Tag1 ("Simple_value_approx", 116)), 0); (("useful", 2167), ((Tag1 (0, (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -175), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -174), 0), 100000000, 0, -173), 0, (("middle_end/flambda/simple_value_approx.mli", 322, 12392, 12392), ("middle_end/flambda/simple_value_approx.mli", 322, 12392, 12414), 0), 0, Tag1 ("Simple_value_approx", 117)), 0); (("all_not_useful", 2168), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -172)], (0)), 100000000, 0, -171), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -170), 0), 100000000, 0, -169), 0, (("middle_end/flambda/simple_value_approx.mli", 325, 12495, 12495), ("middle_end/flambda/simple_value_approx.mli", 325, 12495, 12530), 0), 0, Tag1 ("Simple_value_approx", 118)), 0); (("warn_on_mutation", 2169), ((Tag1 (0, (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -168), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -167), 0), 100000000, 0, -166), 0, (("middle_end/flambda/simple_value_approx.mli", 330, 12716, 12716), ("middle_end/flambda/simple_value_approx.mli", 330, 12716, 12748), 0), 0, Tag1 ("Simple_value_approx", 119)), 0); Tag1 (("simplification_summary", 2170), (0, 0, Tag1 ([(("Nothing_done", 1906), (0), 0, (("middle_end/flambda/simple_value_approx.mli", 333, 12780, 12782), ("middle_end/flambda/simple_value_approx.mli", 333, 12780, 12796), 0), 0, Tag1 ("Simple_value_approx", 121)); (("Replaced_term", 1907), (0), 0, (("middle_end/flambda/simple_value_approx.mli", 334, 12797, 12799), ("middle_end/flambda/simple_value_approx.mli", 334, 12797, 12814), 0), 0, Tag1 ("Simple_value_approx", 122))], 0), 1, 0, 0, 0, 0, 0, (("middle_end/flambda/simple_value_approx.mli", 332, 12750, 12750), ("middle_end/flambda/simple_value_approx.mli", 334, 12797, 12814), 0), 0, 1, 0, Tag1 ("Simple_value_approx", 120)), 1, 0); Tag1 (("simplification_result", 2171), (0, 0, 0, 1, ((Tag2 ([(Tag3 (Tag1 ((Tag2 ("Flambda")), "t"), 0, (0)), 100000000, 0, -163); (Tag3 ((("simplification_summary", 2170)), 0, (0)), 100000000, 0, -164); (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -165)]), 100000000, 0, -162)), 0, 0, 0, 0, (("middle_end/flambda/simple_value_approx.mli", 336, 12816, 12816), ("middle_end/flambda/simple_value_approx.mli", 336, 12816, 12883), 0), 0, 0, 0, Tag1 ("Simple_value_approx", 123)), 1, 0); Tag1 (("simplification_result_named", 2172), (0, 0, 0, 1, ((Tag2 ([(Tag3 (Tag1 ((Tag2 ("Flambda")), "named"), 0, (0)), 100000000, 0, -159); (Tag3 ((("simplification_summary", 2170)), 0, (0)), 100000000, 0, -160); (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -161)]), 100000000, 0, -158)), 0, 0, 0, 0, (("middle_end/flambda/simple_value_approx.mli", 337, 12884, 12884), ("middle_end/flambda/simple_value_approx.mli", 337, 12884, 12961), 0), 0, 0, 0, Tag1 ("Simple_value_approx", 124)), 1, 0); (("simplify", 2173), ((Tag1 (0, (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -157), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Flambda")), "t"), 0, (0)), 100000000, 0, -156), (Tag3 ((("simplification_result", 2171)), 0, (0)), 100000000, 0, -155), 0), 100000000, 0, -154), 0), 100000000, 0, -153), 0, (("middle_end/flambda/simple_value_approx.mli", 342, 13168, 13168), ("middle_end/flambda/simple_value_approx.mli", 342, 13168, 13222), 0), 0, Tag1 ("Simple_value_approx", 125)), 0); (("simplify_using_env", 2174), ((Tag1 (0, (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -152), (Tag1 (("is_present_in_env"), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -151), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -150), 0), 100000000, 0, -149), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Flambda")), "t"), 0, (0)), 100000000, 0, -148), (Tag3 ((("simplification_result", 2171)), 0, (0)), 100000000, 0, -147), 0), 100000000, 0, -146), 0), 100000000, 0, -145), 0), 100000000, 0, -144), 0, (("middle_end/flambda/simple_value_approx.mli", 348, 13502, 13502), ("middle_end/flambda/simple_value_approx.mli", 352, 13591, 13617), 0), 0, Tag1 ("Simple_value_approx", 126)), 0); (("simplify_named", 2175), ((Tag1 (0, (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -143), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Flambda")), "named"), 0, (0)), 100000000, 0, -142), (Tag3 ((("simplification_result_named", 2172)), 0, (0)), 100000000, 0, -141), 0), 100000000, 0, -140), 0), 100000000, 0, -139), 0, (("middle_end/flambda/simple_value_approx.mli", 354, 13619, 13619), ("middle_end/flambda/simple_value_approx.mli", 354, 13619, 13689), 0), 0, Tag1 ("Simple_value_approx", 127)), 0); (("simplify_named_using_env", 2176), ((Tag1 (0, (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -138), (Tag1 (("is_present_in_env"), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -137), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -136), 0), 100000000, 0, -135), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Flambda")), "named"), 0, (0)), 100000000, 0, -134), (Tag3 ((("simplification_result_named", 2172)), 0, (0)), 100000000, 0, -133), 0), 100000000, 0, -132), 0), 100000000, 0, -131), 0), 100000000, 0, -130), 0, (("middle_end/flambda/simple_value_approx.mli", 356, 13691, 13691), ("middle_end/flambda/simple_value_approx.mli", 360, 13790, 13822), 0), 0, Tag1 ("Simple_value_approx", 128)), 0); (("simplify_var_to_var_using_env", 2177), ((Tag1 (0, (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -129), (Tag1 (("is_present_in_env"), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -128), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -127), 0), 100000000, 0, -126), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -125)], (0)), 100000000, 0, -124), 0), 100000000, 0, -123), 0), 100000000, 0, -122), 0, (("middle_end/flambda/simple_value_approx.mli", 365, 14012, 14012), ("middle_end/flambda/simple_value_approx.mli", 368, 14097, 14119), 0), 0, Tag1 ("Simple_value_approx", 129)), 0); (("simplify_var", 2178), ((Tag1 (0, (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -121), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Flambda")), "named"), 0, (0)), 100000000, 0, -119); (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -120)]), 100000000, 0, -118)], (0)), 100000000, 0, -117), 0), 100000000, 0, -116), 0, (("middle_end/flambda/simple_value_approx.mli", 370, 14121, 14121), ("middle_end/flambda/simple_value_approx.mli", 370, 14121, 14171), 0), 0, Tag1 ("Simple_value_approx", 130)), 0); Tag1 (("get_field_result", 2179), (0, 0, Tag1 ([(("Ok", 1917), ([(Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -115)]), 0, (("middle_end/flambda/simple_value_approx.mli", 373, 14197, 14199), ("middle_end/flambda/simple_value_approx.mli", 373, 14197, 14208), 0), 0, Tag1 ("Simple_value_approx", 132)); (("Unreachable", 1918), (0), 0, (("middle_end/flambda/simple_value_approx.mli", 374, 14209, 14211), ("middle_end/flambda/simple_value_approx.mli", 374, 14209, 14224), 0), 0, Tag1 ("Simple_value_approx", 133))], 0), 1, 0, 0, 0, 0, 0, (("middle_end/flambda/simple_value_approx.mli", 372, 14173, 14173), ("middle_end/flambda/simple_value_approx.mli", 374, 14209, 14224), 0), 0, 0, 0, Tag1 ("Simple_value_approx", 131)), 1, 0); (("get_field", 2180), ((Tag1 (0, (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -114), (Tag1 (("field_index"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -113), (Tag3 ((("get_field_result", 2179)), 0, (0)), 100000000, 0, -112), 0), 100000000, 0, -111), 0), 100000000, 0, -110), 0, (("middle_end/flambda/simple_value_approx.mli", 382, 14595, 14595), ("middle_end/flambda/simple_value_approx.mli", 382, 14595, 14651), 0), 0, Tag1 ("Simple_value_approx", 134)), 0); Tag1 (("checked_approx_for_block", 2181), (0, 0, Tag1 ([(("Wrong", 1921), (0), 0, (("middle_end/flambda/simple_value_approx.mli", 385, 14685, 14687), ("middle_end/flambda/simple_value_approx.mli", 385, 14685, 14694), 0), 0, Tag1 ("Simple_value_approx", 136)); (("Ok", 1922), ([(Tag3 (Tag1 ((Tag2 ("Tag")), "t"), 0, (0)), 100000000, 0, -107); (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -109)], (0)), 100000000, 0, -108)]), 0, (("middle_end/flambda/simple_value_approx.mli", 386, 14695, 14697), ("middle_end/flambda/simple_value_approx.mli", 386, 14695, 14720), 0), 0, Tag1 ("Simple_value_approx", 137))], 0), 1, 0, 0, 0, 0, 0, (("middle_end/flambda/simple_value_approx.mli", 384, 14653, 14653), ("middle_end/flambda/simple_value_approx.mli", 386, 14695, 14720), 0), 0, 0, 0, Tag1 ("Simple_value_approx", 135)), 1, 0); (("check_approx_for_block", 2182), ((Tag1 (0, (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -106), (Tag3 ((("checked_approx_for_block", 2181)), 0, (0)), 100000000, 0, -105), 0), 100000000, 0, -104), 0, (("middle_end/flambda/simple_value_approx.mli", 390, 14812, 14812), ("middle_end/flambda/simple_value_approx.mli", 390, 14812, 14870), 0), 0, Tag1 ("Simple_value_approx", 138)), 0); (("approx_for_bound_var", 2183), ((Tag1 (0, (Tag3 ((("value_set_of_closures", 2120)), 0, (0)), 100000000, 0, -103), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Var_within_closure")), "t"), 0, (0)), 100000000, 0, -102), (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -101), 0), 100000000, 0, -100), 0), 100000000, 0, -99), 0, (("middle_end/flambda/simple_value_approx.mli", 395, 15051, 15051), ("middle_end/flambda/simple_value_approx.mli", 395, 15051, 15128), 0), 0, Tag1 ("Simple_value_approx", 139)), 0); (("freshen_and_check_closure_id", 2184), ((Tag1 (0, (Tag3 ((("value_set_of_closures", 2120)), 0, (0)), 100000000, 0, -98), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Closure_id")), "t"), 0, (0)), 100000000, 0, -97), (Tag3 (Tag1 ((Tag2 ("Closure_id")), "t"), 0, (0)), 100000000, 0, -96), 0), 100000000, 0, -95), 0), 100000000, 0, -94), 0, (("middle_end/flambda/simple_value_approx.mli", 401, 15425, 15425), ("middle_end/flambda/simple_value_approx.mli", 404, 15503, 15520), 0), 0, Tag1 ("Simple_value_approx", 140)), 0); Tag1 (("strict_checked_approx_for_set_of_closures", 2185), (0, 0, Tag1 ([(("Wrong", 1927), (0), 0, (("middle_end/flambda/simple_value_approx.mli", 407, 15571, 15573), ("middle_end/flambda/simple_value_approx.mli", 407, 15571, 15580), 0), 0, Tag1 ("Simple_value_approx", 142)); (("Ok", 1928), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -92)], (0)), 100000000, 0, -91); (Tag3 ((("value_set_of_closures", 2120)), 0, (0)), 100000000, 0, -93)]), 0, (("middle_end/flambda/simple_value_approx.mli", 408, 15581, 15583), ("middle_end/flambda/simple_value_approx.mli", 408, 15581, 15632), 0), 0, Tag1 ("Simple_value_approx", 143))], 0), 1, 0, 0, 0, 0, 0, (("middle_end/flambda/simple_value_approx.mli", 406, 15522, 15522), ("middle_end/flambda/simple_value_approx.mli", 408, 15581, 15632), 0), 0, 0, 0, Tag1 ("Simple_value_approx", 141)), 1, 0); (("strict_check_approx_for_set_of_closures", 2186), ((Tag1 (0, (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -90), (Tag3 ((("strict_checked_approx_for_set_of_closures", 2185)), 0, (0)), 100000000, 0, -89), 0), 100000000, 0, -88), 0, (("middle_end/flambda/simple_value_approx.mli", 410, 15634, 15634), ("middle_end/flambda/simple_value_approx.mli", 412, 15685, 15731), 0), 0, Tag1 ("Simple_value_approx", 144)), 0); Tag1 (("checked_approx_for_set_of_closures", 2187), (0, 0, Tag1 ([(("Wrong", 1931), (0), 0, (("middle_end/flambda/simple_value_approx.mli", 415, 15775, 15777), ("middle_end/flambda/simple_value_approx.mli", 415, 15775, 15784), 0), 0, Tag1 ("Simple_value_approx", 146)); (("Unresolved", 1932), ([(Tag3 ((("unresolved_value", 2112)), 0, (0)), 100000000, 0, -83)]), 0, (("middle_end/flambda/simple_value_approx.mli", 416, 15785, 15787), ("middle_end/flambda/simple_value_approx.mli", 416, 15785, 15819), 0), 0, Tag1 ("Simple_value_approx", 147)); (("Unknown", 1933), (0), 0, (("middle_end/flambda/simple_value_approx.mli", 417, 15820, 15822), ("middle_end/flambda/simple_value_approx.mli", 417, 15820, 15831), 0), 0, Tag1 ("Simple_value_approx", 148)); (("Unknown_because_of_unresolved_value", 1934), ([(Tag3 ((("unresolved_value", 2112)), 0, (0)), 100000000, 0, -84)]), 0, (("middle_end/flambda/simple_value_approx.mli", 418, 15832, 15834), ("middle_end/flambda/simple_value_approx.mli", 418, 15832, 15891), 0), 0, Tag1 ("Simple_value_approx", 149)); (("Ok", 1935), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -86)], (0)), 100000000, 0, -85); (Tag3 ((("value_set_of_closures", 2120)), 0, (0)), 100000000, 0, -87)]), 0, (("middle_end/flambda/simple_value_approx.mli", 421, 16014, 16016), ("middle_end/flambda/simple_value_approx.mli", 421, 16014, 16065), 0), 0, Tag1 ("Simple_value_approx", 150))], 0), 1, 0, 0, 0, 0, 0, (("middle_end/flambda/simple_value_approx.mli", 414, 15733, 15733), ("middle_end/flambda/simple_value_approx.mli", 421, 16014, 16065), 0), 0, 0, 0, Tag1 ("Simple_value_approx", 145)), 1, 0); (("check_approx_for_set_of_closures", 2188), ((Tag1 (0, (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -82), (Tag3 ((("checked_approx_for_set_of_closures", 2187)), 0, (0)), 100000000, 0, -81), 0), 100000000, 0, -80), 0, (("middle_end/flambda/simple_value_approx.mli", 426, 16264, 16264), ("middle_end/flambda/simple_value_approx.mli", 426, 16264, 16342), 0), 0, Tag1 ("Simple_value_approx", 151)), 0); Tag1 (("checked_approx_for_closure", 2189), (0, 0, Tag1 ([(("Wrong", 1938), (0), 0, (("middle_end/flambda/simple_value_approx.mli", 429, 16378, 16380), ("middle_end/flambda/simple_value_approx.mli", 429, 16378, 16387), 0), 0, Tag1 ("Simple_value_approx", 153)); (("Ok", 1939), ([(Tag3 ((("value_closure", 2116)), 0, (0)), 100000000, 0, -74); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -76)], (0)), 100000000, 0, -75); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Symbol")), "t"), 0, (0)), 100000000, 0, -78)], (0)), 100000000, 0, -77); (Tag3 ((("value_set_of_closures", 2120)), 0, (0)), 100000000, 0, -79)]), 0, (("middle_end/flambda/simple_value_approx.mli", 430, 16388, 16390), ("middle_end/flambda/simple_value_approx.mli", 431, 16432, 16483), 0), 0, Tag1 ("Simple_value_approx", 154))], 0), 1, 0, 0, 0, 0, 0, (("middle_end/flambda/simple_value_approx.mli", 428, 16344, 16344), ("middle_end/flambda/simple_value_approx.mli", 431, 16432, 16483), 0), 0, 0, 0, Tag1 ("Simple_value_approx", 152)), 1, 0); (("check_approx_for_closure", 2190), ((Tag1 (0, (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -73), (Tag3 ((("checked_approx_for_closure", 2189)), 0, (0)), 100000000, 0, -72), 0), 100000000, 0, -71), 0, (("middle_end/flambda/simple_value_approx.mli", 438, 16798, 16798), ("middle_end/flambda/simple_value_approx.mli", 438, 16798, 16860), 0), 0, Tag1 ("Simple_value_approx", 155)), 0); Tag1 (("checked_approx_for_closure_allowing_unresolved", 2191), (0, 0, Tag1 ([(("Wrong", 1942), (0), 0, (("middle_end/flambda/simple_value_approx.mli", 441, 16916, 16918), ("middle_end/flambda/simple_value_approx.mli", 441, 16916, 16925), 0), 0, Tag1 ("Simple_value_approx", 157)); (("Unresolved", 1943), ([(Tag3 ((("unresolved_value", 2112)), 0, (0)), 100000000, 0, -63)]), 0, (("middle_end/flambda/simple_value_approx.mli", 442, 16926, 16928), ("middle_end/flambda/simple_value_approx.mli", 442, 16926, 16960), 0), 0, Tag1 ("Simple_value_approx", 158)); (("Unknown", 1944), (0), 0, (("middle_end/flambda/simple_value_approx.mli", 443, 16961, 16963), ("middle_end/flambda/simple_value_approx.mli", 443, 16961, 16972), 0), 0, Tag1 ("Simple_value_approx", 159)); (("Unknown_because_of_unresolved_value", 1945), ([(Tag3 ((("unresolved_value", 2112)), 0, (0)), 100000000, 0, -64)]), 0, (("middle_end/flambda/simple_value_approx.mli", 444, 16973, 16975), ("middle_end/flambda/simple_value_approx.mli", 444, 16973, 17032), 0), 0, Tag1 ("Simple_value_approx", 160)); (("Ok", 1946), ([(Tag3 ((("value_closure", 2116)), 0, (0)), 100000000, 0, -65); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Variable")), "t"), 0, (0)), 100000000, 0, -67)], (0)), 100000000, 0, -66); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Symbol")), "t"), 0, (0)), 100000000, 0, -69)], (0)), 100000000, 0, -68); (Tag3 ((("value_set_of_closures", 2120)), 0, (0)), 100000000, 0, -70)]), 0, (("middle_end/flambda/simple_value_approx.mli", 445, 17033, 17035), ("middle_end/flambda/simple_value_approx.mli", 446, 17077, 17128), 0), 0, Tag1 ("Simple_value_approx", 161))], 0), 1, 0, 0, 0, 0, 0, (("middle_end/flambda/simple_value_approx.mli", 440, 16862, 16862), ("middle_end/flambda/simple_value_approx.mli", 446, 17077, 17128), 0), 0, 0, 0, Tag1 ("Simple_value_approx", 156)), 1, 0); (("check_approx_for_closure_allowing_unresolved", 2192), ((Tag1 (0, (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -62), (Tag3 ((("checked_approx_for_closure_allowing_unresolved", 2191)), 0, (0)), 100000000, 0, -61), 0), 100000000, 0, -60), 0, (("middle_end/flambda/simple_value_approx.mli", 450, 17272, 17272), ("middle_end/flambda/simple_value_approx.mli", 452, 17328, 17379), 0), 0, Tag1 ("Simple_value_approx", 162)), 0); (("check_approx_for_float", 2193), ((Tag1 (0, (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -59), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -58)], (0)), 100000000, 0, -57), 0), 100000000, 0, -56), 0, (("middle_end/flambda/simple_value_approx.mli", 455, 17449, 17449), ("middle_end/flambda/simple_value_approx.mli", 455, 17449, 17495), 0), 0, Tag1 ("Simple_value_approx", 163)), 0); (("float_array_as_constant", 2194), ((Tag1 (0, (Tag3 ((("value_float_array", 2122)), 0, (0)), 100000000, 0, -55), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -54)], (0)), 100000000, 0, -53)], (0)), 100000000, 0, -52), 0), 100000000, 0, -51), 0, (("middle_end/flambda/simple_value_approx.mli", 458, 17571, 17571), ("middle_end/flambda/simple_value_approx.mli", 458, 17571, 17639), 0), 0, Tag1 ("Simple_value_approx", 164)), 0); (("check_approx_for_string", 2195), ((Tag1 (0, (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -50), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -49)], (0)), 100000000, 0, -48), 0), 100000000, 0, -47), 0, (("middle_end/flambda/simple_value_approx.mli", 461, 17710, 17710), ("middle_end/flambda/simple_value_approx.mli", 461, 17710, 17758), 0), 0, Tag1 ("Simple_value_approx", 165)), 0); Tag1 (("switch_branch_selection", 2196), (0, 0, Tag1 ([(("Cannot_be_taken", 1952), (0), 0, (("middle_end/flambda/simple_value_approx.mli", 464, 17791, 17793), ("middle_end/flambda/simple_value_approx.mli", 464, 17791, 17810), 0), 0, Tag1 ("Simple_value_approx", 167)); (("Can_be_taken", 1953), (0), 0, (("middle_end/flambda/simple_value_approx.mli", 465, 17811, 17813), ("middle_end/flambda/simple_value_approx.mli", 465, 17811, 17827), 0), 0, Tag1 ("Simple_value_approx", 168)); (("Must_be_taken", 1954), (0), 0, (("middle_end/flambda/simple_value_approx.mli", 466, 17828, 17830), ("middle_end/flambda/simple_value_approx.mli", 466, 17828, 17845), 0), 0, Tag1 ("Simple_value_approx", 169))], 0), 1, 0, 0, 0, 0, 0, (("middle_end/flambda/simple_value_approx.mli", 463, 17760, 17760), ("middle_end/flambda/simple_value_approx.mli", 466, 17828, 17845), 0), 0, 1, 0, Tag1 ("Simple_value_approx", 166)), 1, 0); (("potentially_taken_const_switch_branch", 2197), ((Tag1 (0, (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -46), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -45), (Tag3 ((("switch_branch_selection", 2196)), 0, (0)), 100000000, 0, -44), 0), 100000000, 0, -43), 0), 100000000, 0, -42), 0, (("middle_end/flambda/simple_value_approx.mli", 469, 17913, 17913), ("middle_end/flambda/simple_value_approx.mli", 469, 17913, 17992), 0), 0, Tag1 ("Simple_value_approx", 170)), 0); (("potentially_taken_block_switch_branch", 2198), ((Tag1 (0, (Tag3 ((("t", 2114)), 0, (0)), 100000000, 0, -41), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -40), (Tag3 ((("switch_branch_selection", 2196)), 0, (0)), 100000000, 0, -39), 0), 100000000, 0, -38), 0), 100000000, 0, -37), 0, (("middle_end/flambda/simple_value_approx.mli", 470, 17993, 17993), ("middle_end/flambda/simple_value_approx.mli", 470, 17993, 18072), 0), 0, Tag1 ("Simple_value_approx", 171)), 0); (("function_arity", 2199), ((Tag1 (0, (Tag3 ((("function_declaration", 2119)), 0, (0)), 100000000, 0, -36), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -35), 0), 100000000, 0, -34), 0, (("middle_end/flambda/simple_value_approx.mli", 472, 18074, 18074), ("middle_end/flambda/simple_value_approx.mli", 472, 18074, 18122), 0), 0, Tag1 ("Simple_value_approx", 172)), 0); (("update_function_declarations", 2200), ((Tag1 (0, (Tag3 ((("function_declarations", 2117)), 0, (0)), 100000000, 0, -33), (Tag1 (("funs"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Variable")), "Map"), "t"), [(Tag3 ((("function_declaration", 2119)), 0, (0)), 100000000, 0, -32)], (0)), 100000000, 0, -31), (Tag3 ((("function_declarations", 2117)), 0, (0)), 100000000, 0, -30), 0), 100000000, 0, -29), 0), 100000000, 0, -28), 0, (("middle_end/flambda/simple_value_approx.mli", 476, 18220, 18220), ("middle_end/flambda/simple_value_approx.mli", 479, 18326, 18352), 0), 0, Tag1 ("Simple_value_approx", 173)), 0); (("import_function_declarations_for_pack", 2201), ((Tag1 (0, (Tag3 ((("function_declarations", 2117)), 0, (0)), 100000000, 0, -27), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Set_of_closures_id")), "t"), 0, (0)), 100000000, 0, -26), (Tag3 (Tag1 ((Tag2 ("Set_of_closures_id")), "t"), 0, (0)), 100000000, 0, -25), 0), 100000000, 0, -24), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Set_of_closures_origin")), "t"), 0, (0)), 100000000, 0, -23), (Tag3 (Tag1 ((Tag2 ("Set_of_closures_origin")), "t"), 0, (0)), 100000000, 0, -22), 0), 100000000, 0, -21), (Tag3 ((("function_declarations", 2117)), 0, (0)), 100000000, 0, -20), 0), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("middle_end/flambda/simple_value_approx.mli", 481, 18354, 18354), ("middle_end/flambda/simple_value_approx.mli", 485, 18535, 18561), 0), 0, Tag1 ("Simple_value_approx", 174)), 0); (("update_function_declaration_body", 2202), ((Tag1 (0, (Tag3 ((("function_declaration", 2119)), 0, (0)), 100000000, 0, -16), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Flambda")), "t"), 0, (0)), 100000000, 0, -15), (Tag3 (Tag1 ((Tag2 ("Flambda")), "t"), 0, (0)), 100000000, 0, -14), 0), 100000000, 0, -13), (Tag3 ((("function_declaration", 2119)), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0), 100000000, 0, -10), 0, (("middle_end/flambda/simple_value_approx.mli", 487, 18563, 18563), ("middle_end/flambda/simple_value_approx.mli", 490, 18658, 18684), 0), 0, Tag1 ("Simple_value_approx", 175)), 0); (("make_closure_map", 2203), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Set_of_closures_id")), "Map"), "t"), [(Tag3 ((("function_declarations", 2117)), 0, (0)), 100000000, 0, -9)], (0)), 100000000, 0, -8), (Tag3 (Tag1 (Tag1 ((Tag2 ("Closure_id")), "Map"), "t"), [(Tag3 ((("function_declarations", 2117)), 0, (0)), 100000000, 0, -7)], (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("middle_end/flambda/simple_value_approx.mli", 494, 18810, 18810), ("middle_end/flambda/simple_value_approx.mli", 496, 18883, 18926), 0), 0, Tag1 ("Simple_value_approx", 176)), 0); (("clear_function_bodies", 2204), ((Tag1 (0, (Tag3 ((("function_declarations", 2117)), 0, (0)), 100000000, 0, -4), (Tag3 ((("function_declarations", 2117)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("middle_end/flambda/simple_value_approx.mli", 498, 18928, 18928), ("middle_end/flambda/simple_value_approx.mli", 498, 18928, 19002), 0), 0, Tag1 ("Simple_value_approx", 177)), 0)], "Simple_value_approx", [("Simple_value_approx", ("\019\b\\\255\223\2510j\n?G\183\243\154v\213")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Variable", ("\228'\154\1834\146\207\147+\193Aq\209h\190\220")); ("Var_within_closure", ("vQ\173\251u\026\012+}j\020C}T\151\220")); ("Types", ("\177\238\029.\220\006\163!\230\015\006\182\133\155\194\166")); ("Type_immediacy", ("\"\127k\011Q\241\211\138\193;8\142\129\141#\251")); ("Tag", ("\252\157\132\005\195\228\232\133\246\237\233\224\012\143\192\218")); ("Symbol", ("\179q\177\031_\169\139a\192\019\188\000V\236\232\t")); ("Subst", ("\021\031\148\223\127\186\189\135\027}\145r\216\143\177\156")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Static_exception", ("2{#\175\226\185\147\146\176\140\029O\023p\024\\")); ("Shape", ("\235\127Y\213\025\137=\244\218\181\248N\189\188\216p")); ("Set_of_closures_origin", ("$n\234\014\162\130\210K\171\btrA\244\254\195")); ("Set_of_closures_id", ("\178\228\011\028\027~\211\166\244\180\220-W\145_\243")); ("Projection", ("\250\207\030\021*\193\225\168\189!\224\228\192\212\236\224")); ("Primitive", ("}Shh\162\015|\220A\203\249\232\245G\213\019")); ("Path", ("\012\183\178\025\1298\228*\021r\185\160Y\252\n\026")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Parameter", ("*\152\238G\163\217\2377/\t\206\131\226\216K0")); ("Outcometree", ("9\021%\234\211\206\210\004H\165\208\2014\234Q\142")); ("Numbers", ("\004\020\227\212|\031Q6\146\217\211\156\221\234\254\195")); ("Mutable_variable", ("B^*^9`\212\152j\145_\017i.\128?")); ("Misc", ("*\026\026\234c\191\131\161\\\203\183\012O\252\153\198")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Load_path", ("\012@\228l\230\164S\172h\1726X\020\252o}")); ("Linkage_name", ("\023\000\172\166 s\214\ns\155s\156\005\252\154\207")); ("Lambda", ("\180\1419\236'\146K$\128\006\135q\135V\029\180")); ("Internal_variable_names", ("\024|\208(\224\206\012\006\179\203\020\000\179\228\154\218")); ("Identifiable", ("\004F\207\014\158GU\001\184\214\187%/#;\211")); ("Ident", ("\b9;!\187.\220\163(x\b\174\\\223\020\004")); ("Freshening", ("@\017\191q\232\253\236\139\131\160Z\000b\223\184\228")); ("Flambda", ("\195J|\022>U\206!\211\212\185N\180zh\241")); ("Export_id", ("\017\209\152\144X\251!\178\238\152t\173\191Kl\232")); ("Env", ("\021\n\181\142x\b\169j\227\"\017\248*\178\245\223")); ("Debuginfo", ("\131\251\175\217P\194M\163\022\151\002\005\006\185:\185")); ("Compilation_unit", ("\007\240\020\003jK\000\210\174\021\189.8^\028K")); ("Cmi_format", ("6\177\bU\139\"\023\152=\249\135\174\b\011Cg")); ("Closure_origin", ("G\222\200`\213\247\022M|O\1488\194\030\187\229")); ("Closure_id", ("k\221yCH\015\186G\246]\003\233\198\179\217A")); ("Closure_element", ("a\194\018\239D1\143{\156A\011\219H#\149A")); ("Clambda_primitives", ("\199\176\237Hv\205\152\14717\179\017\246\221x`")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Build_path_prefix_map", ("y\028\167\207D\220\198\216\011\208\172\149\2416\bc")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216")); ("Allocated_const", ("\029\027.W\160\170!\199Q2\235\240\167\031,\004"))], [(0)])
val clear_function_bodies : function_declarations -> function_declarations

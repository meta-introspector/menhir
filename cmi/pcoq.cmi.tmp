type ty_pattern = TPattern : 'a Tok.p -> ty_pattern
module Parsable :
  sig
    type t
    val make : ?loc:Loc.t -> (unit, char) Gramlib.Stream.t -> t
    val comments : t -> ((int * int) * string) list
    val loc : t -> Loc.t
    val consume : t -> int -> unit
  end
module Entry :
  sig
    type 'a t
    val make : string -> 'a t
    val parse : 'a t -> Parsable.t -> 'a
    val name : 'a t -> string
    type 'a parser_fun = {
      parser_fun :
        CLexer.keyword_state ->
        (CLexer.keyword_state, Tok.t) Gramlib.LStream.t -> 'a;
    }
    val of_parser : string -> 'a parser_fun -> 'a t
    val parse_token_stream :
      'a t -> (CLexer.keyword_state, Tok.t) Gramlib.LStream.t -> 'a
    val print : Format.formatter -> 'a t -> unit
    val is_empty : 'a t -> bool
    type any_t = Any : 'a t -> any_t
    val accumulate_in : 'a t -> any_t list CString.Map.t
  end
module rec Symbol :
  sig
    type ('self, 'trec, 'a) t
    val nterm : 'a Entry.t -> ('self, Gramlib__Grammar.norec, 'a) t
    val nterml :
      'a Entry.t -> string -> ('self, Gramlib__Grammar.norec, 'a) t
    val list0 : ('self, 'trec, 'a) t -> ('self, 'trec, 'a list) t
    val list0sep :
      ('self, 'trec, 'a) t ->
      ('self, Gramlib__Grammar.norec, unit) t ->
      bool -> ('self, 'trec, 'a list) t
    val list1 : ('self, 'trec, 'a) t -> ('self, 'trec, 'a list) t
    val list1sep :
      ('self, 'trec, 'a) t ->
      ('self, Gramlib__Grammar.norec, unit) t ->
      bool -> ('self, 'trec, 'a list) t
    val opt : ('self, 'trec, 'a) t -> ('self, 'trec, 'a option) t
    val self : ('self, Gramlib__Grammar.mayrec, 'self) t
    val next : ('self, Gramlib__Grammar.mayrec, 'self) t
    val token : 'c Tok.p -> ('self, Gramlib__Grammar.norec, 'c) t
    val tokens : ty_pattern list -> ('self, Gramlib__Grammar.norec, unit) t
    val rules : 'a Rules.t list -> ('self, Gramlib__Grammar.norec, 'a) t
  end
and Rule :
  sig
    type ('self, 'trec, 'f, 'r) t
    val stop : ('self, Gramlib__Grammar.norec, 'r, 'r) t
    val next :
      ('self, 'c, 'a, 'r) t ->
      ('self, 'd, 'b) Symbol.t ->
      ('self, Gramlib__Grammar.mayrec, 'b -> 'a, 'r) t
    val next_norec :
      ('self, Gramlib__Grammar.norec, 'a, 'r) Rule.t ->
      ('self, Gramlib__Grammar.norec, 'b) Symbol.t ->
      ('self, Gramlib__Grammar.norec, 'b -> 'a, 'r) t
  end
and Rules :
  sig
    type 'a t
    val make :
      ('b, Gramlib__Grammar.norec, 'f, Loc.t -> 'a) Rule.t -> 'f -> 'a t
  end
module Production :
  sig type 'a t val make : ('a, 'b, 'f, Loc.t -> 'a) Rule.t -> 'f -> 'a t end
type 'a single_extend_statement =
    string option * Gramlib.Gramext.g_assoc option * 'a Production.t list
type 'a extend_statement =
    Reuse of string option * 'a Production.t list
  | Fresh of Gramlib.Gramext.position * 'a single_extend_statement list
val generalize_symbol :
  ('a, 'tr, 'c) Symbol.t -> ('a, Gramlib__Grammar.norec, 'c) Symbol.t option
val level_of_nonterm :
  ('a, Gramlib__Grammar.norec, 'c) Symbol.t -> string option
module Lookahead :
  sig
    type t
    val to_entry : string -> t -> unit Entry.t
    val ( >> ) : t -> t -> t
    val ( <+> ) : t -> t -> t
    val lk_list : t -> t
    val check_no_space : t
    val lk_kw : string -> t
    val lk_kws : string list -> t
    val lk_nat : t
    val lk_ident : t
    val lk_name : t
    val lk_ident_except : string list -> t
    val lk_ident_list : t
  end
val terminal : string -> string Tok.p
val parse_string : 'a Entry.t -> ?loc:Loc.t -> string -> 'a
val eoi_entry : 'a Entry.t -> 'a Entry.t
val create_generic_entry2 :
  string -> ('a, Genarg.rlevel) Genarg.abstract_argument_type -> 'a Entry.t
val register_grammar :
  ('raw, 'glb, 'top) Genarg.genarg_type -> 'raw Entry.t -> unit
val genarg_grammar : ('raw, 'glb, 'top) Genarg.genarg_type -> 'raw Entry.t
module Prim :
  sig
    val preident : string Entry.t
    val ident : Names.Id.t Entry.t
    val name : Names.lname Entry.t
    val identref : Names.lident Entry.t
    val univ_decl : Constrexpr.universe_decl_expr Entry.t
    val ident_decl : Constrexpr.ident_decl Entry.t
    val pattern_ident : Names.lident Entry.t
    val base_ident : Names.Id.t Entry.t
    val bignat : string Entry.t
    val natural : int Entry.t
    val bigint : string Entry.t
    val integer : int Entry.t
    val string : string Entry.t
    val lstring : Names.lstring Entry.t
    val reference : Libnames.qualid Entry.t
    val fields : (Names.Id.t list * Names.Id.t) Entry.t
    val qualid : Libnames.qualid Entry.t
    val fullyqualid : Names.Id.t list CAst.t Entry.t
    val by_notation : (string * string option) Entry.t
    val smart_global : Libnames.qualid Constrexpr.or_by_notation Entry.t
    val dirpath : Names.DirPath.t Entry.t
    val ne_string : string Entry.t
    val ne_lstring : Names.lstring Entry.t
    val hyp : Names.lident Entry.t
    val var : Names.lident Entry.t
    val bar_cbrace : unit Entry.t
    val strategy_level : Conv_oracle.level Entry.t
  end
module Constr :
  sig
    val constr : Constrexpr.constr_expr Entry.t
    val constr_eoi : Constrexpr.constr_expr Entry.t
    val lconstr : Constrexpr.constr_expr Entry.t
    val binder_constr : Constrexpr.constr_expr Entry.t
    val term : Constrexpr.constr_expr Entry.t
    val ident : Names.Id.t Entry.t
    val global : Libnames.qualid Entry.t
    val universe_name : Constrexpr.sort_name_expr Entry.t
    val universe_level : Constrexpr.univ_level_expr Entry.t
    val sort : Constrexpr.sort_expr Entry.t
    val sort_family : Sorts.family Entry.t
    val pattern : Constrexpr.cases_pattern_expr Entry.t
    val constr_pattern : Constrexpr.constr_expr Entry.t
    val cpattern : Constrexpr.constr_expr Entry.t
    val closed_binder : Constrexpr.local_binder_expr list Entry.t
    val binder : Constrexpr.local_binder_expr list Entry.t
    val binders : Constrexpr.local_binder_expr list Entry.t
    val open_binders : Constrexpr.local_binder_expr list Entry.t
    val one_open_binder : Constrexpr.kinded_cases_pattern_expr Entry.t
    val one_closed_binder : Constrexpr.kinded_cases_pattern_expr Entry.t
    val binders_fixannot :
      (Constrexpr.local_binder_expr list *
       Constrexpr.recursion_order_expr option)
      Entry.t
    val typeclass_constraint :
      (Names.lname * bool * Constrexpr.constr_expr) Entry.t
    val record_declaration : Constrexpr.constr_expr Entry.t
    val arg :
      (Constrexpr.constr_expr * Constrexpr.explicitation CAst.t option)
      Entry.t
    val type_cstr : Constrexpr.constr_expr Entry.t
  end
module Module :
  sig
    val module_expr : Constrexpr.module_ast Entry.t
    val module_type : Constrexpr.module_ast Entry.t
  end
val epsilon_value : ('a -> 'self) -> ('self, 'b, 'a) Symbol.t -> 'self option
val grammar_extend : 'a Entry.t -> 'a extend_statement -> unit
module GramState : Store.S
type 'a grammar_command
type gram_reinit = Gramlib.Gramext.g_assoc * Gramlib.Gramext.position
type extend_rule =
    ExtendRule : 'a Entry.t * 'a extend_statement -> extend_rule
  | ExtendRuleReinit : 'a Entry.t * gram_reinit *
      'a extend_statement -> extend_rule
type 'a grammar_extension = {
  gext_fun : 'a -> GramState.t -> extend_rule list * GramState.t;
  gext_eq : 'a -> 'a -> bool;
}
val create_grammar_command :
  string -> 'a grammar_extension -> 'a grammar_command
val extend_grammar_command : 'a grammar_command -> 'a -> unit
type ('a, 'b) entry_command
type ('a, 'b) entry_extension = {
  eext_fun : 'a -> GramState.t -> string list * GramState.t;
  eext_eq : 'a -> 'a -> bool;
}
val create_entry_command :
  string -> ('a, 'b) entry_extension -> ('a, 'b) entry_command
val extend_entry_command : ('a, 'b) entry_command -> 'a -> 'b Entry.t list
val find_custom_entry : ('a, 'b) entry_command -> string -> 'b Entry.t
val with_grammar_rule_protection : ('a -> 'b) -> 'a -> 'b
type frozen_t
val parser_summary_tag : frozen_t Summary.Dyn.tag
val register_grammars_by_name : string -> Entry.any_t list -> unit
val find_grammars_by_name : string -> Entry.any_t list
val freeze : unit -> frozen_t
val unfreeze : frozen_t -> unit
val get_keyword_state : unit -> CLexer.keyword_state
("DEBUG:rule", [Tag1 (("ty_pattern", 1739), (0, 0, Tag1 ([(("TPattern", 280), ([(Tag3 (Tag1 ((Tag2 ("Tok")), "p"), [((("a")), 100000000, 0, -185)], (0)), 100000000, 0, -184)]), ((Tag3 ((("ty_pattern", 1739)), 0, (0)), 100000000, 0, -183)), (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), 0, Tag1 ("Gramlib__Grammar", 6))], 0), 1, 0, 0, 0, 0, 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), 0, 0, 1, Tag1 ("Gramlib__Grammar", 5)), 1, 0); Tag3 (("Parsable", 1740), 0, (Tag1 ([Tag1 (("t", 1783), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), 0, 0, 0, Tag1 ("Gramlib__Grammar", 11)), 1, 0); (("make", 1784), ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -209)], (0)), 100000000, 0, -208), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Gramlib")), "Stream"), "t"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -206); (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -207)], (0)), 100000000, 0, -205), (Tag3 ((("t", 1783)), 0, (0)), 100000000, 0, -204), 0), 100000000, 0, -203), 0), 100000000, 0, -202), 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), 0, Tag1 ("Gramlib__Grammar", 13)), 0); (("comments", 1785), ((Tag1 (0, (Tag3 ((("t", 1783)), 0, (0)), 100000000, 0, -201), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -198); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -199)]), 100000000, 0, -197); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -200)]), 100000000, 0, -196)], (0)), 100000000, 0, -195), 0), 100000000, 0, -194), 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), 0, Tag1 ("Gramlib__Grammar", 14)), 0); (("loc", 1786), ((Tag1 (0, (Tag3 ((("t", 1783)), 0, (0)), 100000000, 0, -193), (Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -192), 0), 100000000, 0, -191), 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), 0, Tag1 ("Gramlib__Grammar", 15)), 0); (("consume", 1787), ((Tag1 (0, (Tag3 ((("t", 1783)), 0, (0)), 100000000, 0, -190), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -189), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -188), 0), 100000000, 0, -187), 0), 100000000, 0, -186), 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), 0, Tag1 ("Gramlib__Grammar", 16)), 0)]), 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), Tag1 ("Gramlib__Grammar", 17)), 0, 0); Tag3 (("Entry", 1741), 0, (Tag1 ([Tag1 (("t", 1788), ([((("a")), 100000000, 0, -262)], 1, 0, 1, 0, [7], [2], 0, 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), 0, 0, 0, Tag1 ("Gramlib__Grammar", 18)), 1, 0); (("make", 1789), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -261), (Tag3 ((("t", 1788)), [((("a")), 100000000, 0, -260)], (0)), 100000000, 0, -259), 0), 100000000, 0, -258), 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), 0, Tag1 ("Gramlib__Grammar", 19)), 0); (("parse", 1790), ((Tag1 (0, (Tag3 ((("t", 1788)), [((("a")), 100000000, 0, -255)], (0)), 100000000, 0, -257), (Tag1 (0, (Tag3 (Tag1 ((("Parsable", 1740)), "t"), 0, (0)), 100000000, 0, -256), ((("a")), 100000000, 0, -255), 0), 100000000, 0, -254), 0), 100000000, 0, -253), 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), 0, Tag1 ("Gramlib__Grammar", 20)), 0); (("name", 1791), ((Tag1 (0, (Tag3 ((("t", 1788)), [((("a")), 100000000, 0, -252)], (0)), 100000000, 0, -251), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -250), 0), 100000000, 0, -249), 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), 0, Tag1 ("Gramlib__Grammar", 21)), 0); Tag1 (("parser_fun", 1792), ([((("a")), 100000000, 0, -244)], 1, [[(("parser_fun", 343), 0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("CLexer")), "keyword_state"), 0, (0)), 100000000, 0, -248), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Gramlib")), "LStream"), "t"), [(Tag3 (Tag1 ((Tag2 ("CLexer")), "keyword_state"), 0, (0)), 100000000, 0, -246); (Tag3 (Tag1 ((Tag2 ("Tok")), "t"), 0, (0)), 100000000, 0, -247)], (0)), 100000000, 0, -245), ((("a")), 100000000, 0, -244), 0), 100000000, 0, -243), 0), 100000000, 0, -242), (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), 0, Tag1 ("Gramlib__Grammar", 23))]], 1, 0, [25], [0], 0, 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), 0, 0, 1, Tag1 ("Gramlib__Grammar", 22)), 1, 0); (("of_parser", 1793), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -241), (Tag1 (0, (Tag3 ((("parser_fun", 1792)), [((("a")), 100000000, 0, -239)], (0)), 100000000, 0, -240), (Tag3 ((("t", 1788)), [((("a")), 100000000, 0, -239)], (0)), 100000000, 0, -238), 0), 100000000, 0, -237), 0), 100000000, 0, -236), 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), 0, Tag1 ("Gramlib__Grammar", 24)), 0); (("parse_token_stream", 1794), ((Tag1 (0, (Tag3 ((("t", 1788)), [((("a")), 100000000, 0, -231)], (0)), 100000000, 0, -235), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Gramlib")), "LStream"), "t"), [(Tag3 (Tag1 ((Tag2 ("CLexer")), "keyword_state"), 0, (0)), 100000000, 0, -233); (Tag3 (Tag1 ((Tag2 ("Tok")), "t"), 0, (0)), 100000000, 0, -234)], (0)), 100000000, 0, -232), ((("a")), 100000000, 0, -231), 0), 100000000, 0, -230), 0), 100000000, 0, -229), 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), 0, Tag1 ("Gramlib__Grammar", 25)), 0); (("print", 1795), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -228), (Tag1 (0, (Tag3 ((("t", 1788)), [((("a")), 100000000, 0, -227)], (0)), 100000000, 0, -226), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -225), 0), 100000000, 0, -224), 0), 100000000, 0, -223), 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), 0, Tag1 ("Gramlib__Grammar", 26)), 0); (("is_empty", 1796), ((Tag1 (0, (Tag3 ((("t", 1788)), [((("a")), 100000000, 0, -222)], (0)), 100000000, 0, -221), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -220), 0), 100000000, 0, -219), 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), 0, Tag1 ("Gramlib__Grammar", 27)), 0); Tag1 (("any_t", 1797), (0, 0, Tag1 ([(("Any", 518), ([(Tag3 ((("t", 1788)), [((("a")), 100000000, 0, -218)], (0)), 100000000, 0, -217)]), ((Tag3 ((("any_t", 1797)), 0, (0)), 100000000, 0, -216)), (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), 0, Tag1 ("Gramlib__Grammar", 29))], 0), 1, 0, 0, 0, 0, 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), 0, 0, 1, Tag1 ("Gramlib__Grammar", 28)), 1, 0); (("accumulate_in", 1798), ((Tag1 (0, (Tag3 ((("t", 1788)), [((("a")), 100000000, 0, -215)], (0)), 100000000, 0, -214), (Tag3 (Tag1 (Tag1 ((Tag2 ("CString")), "Map"), "t"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("any_t", 1797)), 0, (0)), 100000000, 0, -213)], (0)), 100000000, 0, -212)], (0)), 100000000, 0, -211), 0), 100000000, 0, -210), 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), 0, Tag1 ("Gramlib__Grammar", 30)), 0)]), 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), Tag1 ("Gramlib__Grammar", 31)), 0, 0); Tag3 (("Symbol", 1742), 0, (Tag1 ([Tag1 (("t", 1799), ([((("self")), 100000000, 0, -350); ((("trec")), 100000000, 0, -351); ((("a")), 100000000, 0, -352)], 3, 0, 1, 0, [7; 7; 7], [2; 2; 2], 0, 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), 0, 0, 0, Tag1 ("Gramlib__Grammar", 54)), 1, 0); (("nterm", 1800), ((Tag1 (0, (Tag3 (Tag1 ((("Entry", 1741)), "t"), [((("a")), 100000000, 0, -348)], (0)), 100000000, 0, -349), (Tag3 ((("t", 1799)), [((("self")), 100000000, 0, -346); (Tag3 (Tag1 ((Tag2 ("Gramlib__Grammar")), "norec"), 0, (0)), 100000000, 0, -347); ((("a")), 100000000, 0, -348)], (0)), 100000000, 0, -345), 0), 100000000, 0, -344), 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), 0, Tag1 ("Gramlib__Grammar", 55)), 0); (("nterml", 1801), ((Tag1 (0, (Tag3 (Tag1 ((("Entry", 1741)), "t"), [((("a")), 100000000, 0, -341)], (0)), 100000000, 0, -343), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -342), (Tag3 ((("t", 1799)), [((("self")), 100000000, 0, -339); (Tag3 (Tag1 ((Tag2 ("Gramlib__Grammar")), "norec"), 0, (0)), 100000000, 0, -340); ((("a")), 100000000, 0, -341)], (0)), 100000000, 0, -338), 0), 100000000, 0, -337), 0), 100000000, 0, -336), 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), 0, Tag1 ("Gramlib__Grammar", 56)), 0); (("list0", 1802), ((Tag1 (0, (Tag3 ((("t", 1799)), [((("self")), 100000000, 0, -331); ((("trec")), 100000000, 0, -332); ((("a")), 100000000, 0, -334)], (0)), 100000000, 0, -335), (Tag3 ((("t", 1799)), [((("self")), 100000000, 0, -331); ((("trec")), 100000000, 0, -332); (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -334)], (0)), 100000000, 0, -333)], (0)), 100000000, 0, -330), 0), 100000000, 0, -329), 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), 0, Tag1 ("Gramlib__Grammar", 57)), 0); (("list0sep", 1803), ((Tag1 (0, (Tag3 ((("t", 1799)), [((("self")), 100000000, 0, -320); ((("trec")), 100000000, 0, -321); ((("a")), 100000000, 0, -323)], (0)), 100000000, 0, -328), (Tag1 (0, (Tag3 ((("t", 1799)), [((("self")), 100000000, 0, -320); (Tag3 (Tag1 ((Tag2 ("Gramlib__Grammar")), "norec"), 0, (0)), 100000000, 0, -326); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -327)], (0)), 100000000, 0, -325), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -324), (Tag3 ((("t", 1799)), [((("self")), 100000000, 0, -320); ((("trec")), 100000000, 0, -321); (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -323)], (0)), 100000000, 0, -322)], (0)), 100000000, 0, -319), 0), 100000000, 0, -318), 0), 100000000, 0, -317), 0), 100000000, 0, -316), 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), 0, Tag1 ("Gramlib__Grammar", 58)), 0); (("list1", 1804), ((Tag1 (0, (Tag3 ((("t", 1799)), [((("self")), 100000000, 0, -311); ((("trec")), 100000000, 0, -312); ((("a")), 100000000, 0, -314)], (0)), 100000000, 0, -315), (Tag3 ((("t", 1799)), [((("self")), 100000000, 0, -311); ((("trec")), 100000000, 0, -312); (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -314)], (0)), 100000000, 0, -313)], (0)), 100000000, 0, -310), 0), 100000000, 0, -309), 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), 0, Tag1 ("Gramlib__Grammar", 59)), 0); (("list1sep", 1805), ((Tag1 (0, (Tag3 ((("t", 1799)), [((("self")), 100000000, 0, -300); ((("trec")), 100000000, 0, -301); ((("a")), 100000000, 0, -303)], (0)), 100000000, 0, -308), (Tag1 (0, (Tag3 ((("t", 1799)), [((("self")), 100000000, 0, -300); (Tag3 (Tag1 ((Tag2 ("Gramlib__Grammar")), "norec"), 0, (0)), 100000000, 0, -306); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -307)], (0)), 100000000, 0, -305), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -304), (Tag3 ((("t", 1799)), [((("self")), 100000000, 0, -300); ((("trec")), 100000000, 0, -301); (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -303)], (0)), 100000000, 0, -302)], (0)), 100000000, 0, -299), 0), 100000000, 0, -298), 0), 100000000, 0, -297), 0), 100000000, 0, -296), 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), 0, Tag1 ("Gramlib__Grammar", 60)), 0); (("opt", 1806), ((Tag1 (0, (Tag3 ((("t", 1799)), [((("self")), 100000000, 0, -291); ((("trec")), 100000000, 0, -292); ((("a")), 100000000, 0, -294)], (0)), 100000000, 0, -295), (Tag3 ((("t", 1799)), [((("self")), 100000000, 0, -291); ((("trec")), 100000000, 0, -292); (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -294)], (0)), 100000000, 0, -293)], (0)), 100000000, 0, -290), 0), 100000000, 0, -289), 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), 0, Tag1 ("Gramlib__Grammar", 61)), 0); (("self", 1807), ((Tag3 ((("t", 1799)), [((("self")), 100000000, 0, -287); (Tag3 (Tag1 ((Tag2 ("Gramlib__Grammar")), "mayrec"), 0, (0)), 100000000, 0, -288); ((("self")), 100000000, 0, -287)], (0)), 100000000, 0, -286), 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), 0, Tag1 ("Gramlib__Grammar", 62)), 0); (("next", 1808), ((Tag3 ((("t", 1799)), [((("self")), 100000000, 0, -284); (Tag3 (Tag1 ((Tag2 ("Gramlib__Grammar")), "mayrec"), 0, (0)), 100000000, 0, -285); ((("self")), 100000000, 0, -284)], (0)), 100000000, 0, -283), 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), 0, Tag1 ("Gramlib__Grammar", 63)), 0); (("token", 1809), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Tok")), "p"), [((("c")), 100000000, 0, -281)], (0)), 100000000, 0, -282), (Tag3 ((("t", 1799)), [((("self")), 100000000, 0, -279); (Tag3 (Tag1 ((Tag2 ("Gramlib__Grammar")), "norec"), 0, (0)), 100000000, 0, -280); ((("c")), 100000000, 0, -281)], (0)), 100000000, 0, -278), 0), 100000000, 0, -277), 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), 0, Tag1 ("Gramlib__Grammar", 64)), 0); (("tokens", 1810), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("ty_pattern", 1739)), 0, (0)), 100000000, 0, -276)], (0)), 100000000, 0, -275), (Tag3 ((("t", 1799)), [((("self")), 100000000, 0, -272); (Tag3 (Tag1 ((Tag2 ("Gramlib__Grammar")), "norec"), 0, (0)), 100000000, 0, -273); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -274)], (0)), 100000000, 0, -271), 0), 100000000, 0, -270), 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), 0, Tag1 ("Gramlib__Grammar", 65)), 0); (("rules", 1811), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Rules", 1744)), "t"), [((("a")), 100000000, 0, -267)], (0)), 100000000, 0, -269)], (0)), 100000000, 0, -268), (Tag3 ((("t", 1799)), [((("self")), 100000000, 0, -265); (Tag3 (Tag1 ((Tag2 ("Gramlib__Grammar")), "norec"), 0, (0)), 100000000, 0, -266); ((("a")), 100000000, 0, -267)], (0)), 100000000, 0, -264), 0), 100000000, 0, -263), 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), 0, Tag1 ("Gramlib__Grammar", 66)), 0)]), 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), Tag1 ("Gramlib__Grammar", 32)), 1, 0); Tag3 (("Rule", 1743), 0, (Tag1 ([Tag1 (("t", 1812), ([((("self")), 100000000, 0, -383); ((("trec")), 100000000, 0, -384); ((("f")), 100000000, 0, -385); ((("r")), 100000000, 0, -386)], 4, 0, 1, 0, [7; 7; 7; 7], [2; 2; 2; 2], 0, 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), 0, 0, 0, Tag1 ("Gramlib__Grammar", 67)), 1, 0); (("stop", 1813), ((Tag3 ((("t", 1812)), [((("self")), 100000000, 0, -380); (Tag3 (Tag1 ((Tag2 ("Gramlib__Grammar")), "norec"), 0, (0)), 100000000, 0, -381); ((("r")), 100000000, 0, -382); ((("r")), 100000000, 0, -382)], (0)), 100000000, 0, -379), 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), 0, Tag1 ("Gramlib__Grammar", 68)), 0); (("next", 1814), ((Tag1 (0, (Tag3 ((("t", 1812)), [((("self")), 100000000, 0, -369); ((0), 100000000, 0, -378); ((("a")), 100000000, 0, -372); ((("r")), 100000000, 0, -374)], (0)), 100000000, 0, -377), (Tag1 (0, (Tag3 (Tag1 ((("Symbol", 1742)), "t"), [((("self")), 100000000, 0, -369); ((0), 100000000, 0, -376); ((("b")), 100000000, 0, -373)], (0)), 100000000, 0, -375), (Tag3 ((("t", 1812)), [((("self")), 100000000, 0, -369); (Tag3 (Tag1 ((Tag2 ("Gramlib__Grammar")), "mayrec"), 0, (0)), 100000000, 0, -370); (Tag1 (0, ((("b")), 100000000, 0, -373), ((("a")), 100000000, 0, -372), 0), 100000000, 0, -371); ((("r")), 100000000, 0, -374)], (0)), 100000000, 0, -368), 0), 100000000, 0, -367), 0), 100000000, 0, -366), 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), 0, Tag1 ("Gramlib__Grammar", 69)), 0); (("next_norec", 1815), ((Tag1 (0, (Tag3 (Tag1 ((("Rule", 1743)), "t"), [((("self")), 100000000, 0, -356); (Tag3 (Tag1 ((Tag2 ("Gramlib__Grammar")), "norec"), 0, (0)), 100000000, 0, -365); ((("a")), 100000000, 0, -359); ((("r")), 100000000, 0, -361)], (0)), 100000000, 0, -364), (Tag1 (0, (Tag3 (Tag1 ((("Symbol", 1742)), "t"), [((("self")), 100000000, 0, -356); (Tag3 (Tag1 ((Tag2 ("Gramlib__Grammar")), "norec"), 0, (0)), 100000000, 0, -363); ((("b")), 100000000, 0, -360)], (0)), 100000000, 0, -362), (Tag3 ((("t", 1812)), [((("self")), 100000000, 0, -356); (Tag3 (Tag1 ((Tag2 ("Gramlib__Grammar")), "norec"), 0, (0)), 100000000, 0, -357); (Tag1 (0, ((("b")), 100000000, 0, -360), ((("a")), 100000000, 0, -359), 0), 100000000, 0, -358); ((("r")), 100000000, 0, -361)], (0)), 100000000, 0, -355), 0), 100000000, 0, -354), 0), 100000000, 0, -353), 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), 0, Tag1 ("Gramlib__Grammar", 70)), 0)]), 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), Tag1 ("Gramlib__Grammar", 33)), 2, 0); Tag3 (("Rules", 1744), 0, (Tag1 ([Tag1 (("t", 1816), ([((("a")), 100000000, 0, -397)], 1, 0, 1, 0, [7], [2], 0, 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), 0, 0, 0, Tag1 ("Gramlib__Grammar", 71)), 1, 0); (("make", 1817), ((Tag1 (0, (Tag3 (Tag1 ((("Rule", 1743)), "t"), [((0), 100000000, 0, -393); (Tag3 (Tag1 ((Tag2 ("Gramlib__Grammar")), "norec"), 0, (0)), 100000000, 0, -394); ((("f")), 100000000, 0, -391); (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -396), ((("a")), 100000000, 0, -390), 0), 100000000, 0, -395)], (0)), 100000000, 0, -392), (Tag1 (0, ((("f")), 100000000, 0, -391), (Tag3 ((("t", 1816)), [((("a")), 100000000, 0, -390)], (0)), 100000000, 0, -389), 0), 100000000, 0, -388), 0), 100000000, 0, -387), 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), 0, Tag1 ("Gramlib__Grammar", 72)), 0)]), 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), Tag1 ("Gramlib__Grammar", 34)), 2, 0); Tag3 (("Production", 1745), 0, (Tag1 ([Tag1 (("t", 1818), ([((("a")), 100000000, 0, -407)], 1, 0, 1, 0, [7], [2], 0, 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), 0, 0, 0, Tag1 ("Gramlib__Grammar", 73)), 1, 0); (("make", 1819), ((Tag1 (0, (Tag3 (Tag1 ((("Rule", 1743)), "t"), [((("a")), 100000000, 0, -401); ((0), 100000000, 0, -404); ((("f")), 100000000, 0, -402); (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -406), ((("a")), 100000000, 0, -401), 0), 100000000, 0, -405)], (0)), 100000000, 0, -403), (Tag1 (0, ((("f")), 100000000, 0, -402), (Tag3 ((("t", 1818)), [((("a")), 100000000, 0, -401)], (0)), 100000000, 0, -400), 0), 100000000, 0, -399), 0), 100000000, 0, -398), 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), 0, Tag1 ("Gramlib__Grammar", 74)), 0)]), 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), Tag1 ("Gramlib__Grammar", 75)), 0, 0); Tag1 (("single_extend_statement", 1746), ([((("a")), 100000000, 0, -182)], 1, 0, 1, ((Tag2 ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -177)], (0)), 100000000, 0, -176); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Gramlib")), "Gramext"), "g_assoc"), 0, (0)), 100000000, 0, -179)], (0)), 100000000, 0, -178); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Production", 1745)), "t"), [((("a")), 100000000, 0, -182)], (0)), 100000000, 0, -181)], (0)), 100000000, 0, -180)]), 100000000, 0, -175)), [7], [0], 0, 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), 0, 0, 0, Tag1 ("Gramlib__Grammar", 76)), 1, 0); Tag1 (("extend_statement", 1747), ([((("a")), 100000000, 0, -171)], 1, Tag1 ([(("Reuse", 712), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -168)], (0)), 100000000, 0, -167); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Production", 1745)), "t"), [((("a")), 100000000, 0, -171)], (0)), 100000000, 0, -170)], (0)), 100000000, 0, -169)]), 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), 0, Tag1 ("Gramlib__Grammar", 78)); (("Fresh", 713), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Gramlib")), "Gramext"), "position"), 0, (0)), 100000000, 0, -172); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("single_extend_statement", 1746)), [((("a")), 100000000, 0, -171)], (0)), 100000000, 0, -174)], (0)), 100000000, 0, -173)]), 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), 0, Tag1 ("Gramlib__Grammar", 79))], 0), 1, 0, [15], [0], 0, 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), 0, 0, 0, Tag1 ("Gramlib__Grammar", 77)), 1, 0); (("generalize_symbol", 1748), ((Tag1 (0, (Tag3 (Tag1 ((("Symbol", 1742)), "t"), [((("a")), 100000000, 0, -162); ((("tr")), 100000000, 0, -166); ((("c")), 100000000, 0, -164)], (0)), 100000000, 0, -165), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("Symbol", 1742)), "t"), [((("a")), 100000000, 0, -162); (Tag3 (Tag1 ((Tag2 ("Gramlib__Grammar")), "norec"), 0, (0)), 100000000, 0, -163); ((("c")), 100000000, 0, -164)], (0)), 100000000, 0, -161)], (0)), 100000000, 0, -160), 0), 100000000, 0, -159), 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), 0, Tag1 ("Gramlib__Grammar", 80)), 0); (("level_of_nonterm", 1749), ((Tag1 (0, (Tag3 (Tag1 ((("Symbol", 1742)), "t"), [((("a")), 100000000, 0, -156); (Tag3 (Tag1 ((Tag2 ("Gramlib__Grammar")), "norec"), 0, (0)), 100000000, 0, -157); ((("c")), 100000000, 0, -158)], (0)), 100000000, 0, -155), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -154)], (0)), 100000000, 0, -153), 0), 100000000, 0, -152), 0, (("parsing/pcoq.mli", 18, 756, 764), ("parsing/pcoq.mli", 25, 991, 1022), 0), 0, Tag1 ("Gramlib__Grammar", 81)), 0); Tag3 (("Lookahead", 1750), 0, (Tag1 ([Tag1 (("t", 1820), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("parsing/pcoq.mli", 28, 1047, 1049), ("parsing/pcoq.mli", 28, 1047, 1055), 0), 0, 0, 0, Tag1 ("Pcoq", 7)), 1, 0); (("to_entry", 1821), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -442), (Tag1 (0, (Tag3 ((("t", 1820)), 0, (0)), 100000000, 0, -441), (Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -440)], (0)), 100000000, 0, -439), 0), 100000000, 0, -438), 0), 100000000, 0, -437), 0, (("parsing/pcoq.mli", 29, 1056, 1058), ("parsing/pcoq.mli", 29, 1056, 1100), 0), 0, Tag1 ("Pcoq", 8)), 0); ((">>", 1822), ((Tag1 (0, (Tag3 ((("t", 1820)), 0, (0)), 100000000, 0, -436), (Tag1 (0, (Tag3 ((("t", 1820)), 0, (0)), 100000000, 0, -435), (Tag3 ((("t", 1820)), 0, (0)), 100000000, 0, -434), 0), 100000000, 0, -433), 0), 100000000, 0, -432), 0, (("parsing/pcoq.mli", 30, 1101, 1103), ("parsing/pcoq.mli", 30, 1101, 1125), 0), 0, Tag1 ("Pcoq", 9)), 0); (("<+>", 1823), ((Tag1 (0, (Tag3 ((("t", 1820)), 0, (0)), 100000000, 0, -431), (Tag1 (0, (Tag3 ((("t", 1820)), 0, (0)), 100000000, 0, -430), (Tag3 ((("t", 1820)), 0, (0)), 100000000, 0, -429), 0), 100000000, 0, -428), 0), 100000000, 0, -427), 0, (("parsing/pcoq.mli", 31, 1126, 1128), ("parsing/pcoq.mli", 31, 1126, 1151), 0), 0, Tag1 ("Pcoq", 10)), 0); (("lk_list", 1824), ((Tag1 (0, (Tag3 ((("t", 1820)), 0, (0)), 100000000, 0, -426), (Tag3 ((("t", 1820)), 0, (0)), 100000000, 0, -425), 0), 100000000, 0, -424), 0, (("parsing/pcoq.mli", 32, 1152, 1154), ("parsing/pcoq.mli", 32, 1152, 1174), 0), 0, Tag1 ("Pcoq", 11)), 0); (("check_no_space", 1825), ((Tag3 ((("t", 1820)), 0, (0)), 100000000, 0, -423), 0, (("parsing/pcoq.mli", 33, 1175, 1177), ("parsing/pcoq.mli", 33, 1175, 1199), 0), 0, Tag1 ("Pcoq", 12)), 0); (("lk_kw", 1826), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -422), (Tag3 ((("t", 1820)), 0, (0)), 100000000, 0, -421), 0), 100000000, 0, -420), 0, (("parsing/pcoq.mli", 34, 1200, 1202), ("parsing/pcoq.mli", 34, 1200, 1225), 0), 0, Tag1 ("Pcoq", 13)), 0); (("lk_kws", 1827), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -419)], (0)), 100000000, 0, -418), (Tag3 ((("t", 1820)), 0, (0)), 100000000, 0, -417), 0), 100000000, 0, -416), 0, (("parsing/pcoq.mli", 35, 1226, 1228), ("parsing/pcoq.mli", 35, 1226, 1257), 0), 0, Tag1 ("Pcoq", 14)), 0); (("lk_nat", 1828), ((Tag3 ((("t", 1820)), 0, (0)), 100000000, 0, -415), 0, (("parsing/pcoq.mli", 36, 1258, 1260), ("parsing/pcoq.mli", 36, 1258, 1274), 0), 0, Tag1 ("Pcoq", 15)), 0); (("lk_ident", 1829), ((Tag3 ((("t", 1820)), 0, (0)), 100000000, 0, -414), 0, (("parsing/pcoq.mli", 37, 1275, 1277), ("parsing/pcoq.mli", 37, 1275, 1293), 0), 0, Tag1 ("Pcoq", 16)), 0); (("lk_name", 1830), ((Tag3 ((("t", 1820)), 0, (0)), 100000000, 0, -413), 0, (("parsing/pcoq.mli", 38, 1294, 1296), ("parsing/pcoq.mli", 38, 1294, 1311), 0), 0, Tag1 ("Pcoq", 17)), 0); (("lk_ident_except", 1831), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -412)], (0)), 100000000, 0, -411), (Tag3 ((("t", 1820)), 0, (0)), 100000000, 0, -410), 0), 100000000, 0, -409), 0, (("parsing/pcoq.mli", 39, 1312, 1314), ("parsing/pcoq.mli", 39, 1312, 1352), 0), 0, Tag1 ("Pcoq", 18)), 0); (("lk_ident_list", 1832), ((Tag3 ((("t", 1820)), 0, (0)), 100000000, 0, -408), 0, (("parsing/pcoq.mli", 40, 1353, 1355), ("parsing/pcoq.mli", 40, 1353, 1376), 0), 0, Tag1 ("Pcoq", 19)), 0)]), 0, (("parsing/pcoq.mli", 27, 1024, 1024), ("parsing/pcoq.mli", 41, 1377, 1380), 0), Tag1 ("Pcoq", 20)), 0, 0); (("terminal", 1751), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -151), (Tag3 (Tag1 ((Tag2 ("Tok")), "p"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -150)], (0)), 100000000, 0, -149), 0), 100000000, 0, -148), 0, (("parsing/pcoq.mli", 44, 1437, 1437), ("parsing/pcoq.mli", 44, 1437, 1474), 0), 0, Tag1 ("Pcoq", 21)), 0); (("parse_string", 1752), ((Tag1 (0, (Tag3 (Tag1 ((("Entry", 1741)), "t"), [((("a")), 100000000, 0, -143)], (0)), 100000000, 0, -147), (Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -146)], (0)), 100000000, 0, -145), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -144), ((("a")), 100000000, 0, -143), 0), 100000000, 0, -142), 0), 100000000, 0, -141), 0), 100000000, 0, -140), 0, (("parsing/pcoq.mli", 133, 4479, 4479), ("parsing/pcoq.mli", 133, 4479, 4538), 0), 0, Tag1 ("Pcoq", 23)), 0); (("eoi_entry", 1753), ((Tag1 (0, (Tag3 (Tag1 ((("Entry", 1741)), "t"), [((("a")), 100000000, 0, -138)], (0)), 100000000, 0, -139), (Tag3 (Tag1 ((("Entry", 1741)), "t"), [((("a")), 100000000, 0, -138)], (0)), 100000000, 0, -137), 0), 100000000, 0, -136), 0, (("parsing/pcoq.mli", 134, 4539, 4539), ("parsing/pcoq.mli", 134, 4539, 4579), 0), 0, Tag1 ("Pcoq", 24)), 0); (("create_generic_entry2", 1754), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -135), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Genarg")), "abstract_argument_type"), [((("a")), 100000000, 0, -132); (Tag3 (Tag1 ((Tag2 ("Genarg")), "rlevel"), 0, (0)), 100000000, 0, -134)], (0)), 100000000, 0, -133), (Tag3 (Tag1 ((("Entry", 1741)), "t"), [((("a")), 100000000, 0, -132)], (0)), 100000000, 0, -131), 0), 100000000, 0, -130), 0), 100000000, 0, -129), 0, (("parsing/pcoq.mli", 136, 4581, 4581), ("parsing/pcoq.mli", 137, 4619, 4670), 0), 0, Tag1 ("Pcoq", 25)), 0); (("register_grammar", 1755), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Genarg")), "genarg_type"), [((("raw")), 100000000, 0, -125); ((("glb")), 100000000, 0, -127); ((("top")), 100000000, 0, -128)], (0)), 100000000, 0, -126), (Tag1 (0, (Tag3 (Tag1 ((("Entry", 1741)), "t"), [((("raw")), 100000000, 0, -125)], (0)), 100000000, 0, -124), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -123), 0), 100000000, 0, -122), 0), 100000000, 0, -121), 0, (("parsing/pcoq.mli", 139, 4672, 4672), ("parsing/pcoq.mli", 139, 4672, 4749), 0), 0, Tag1 ("Pcoq", 26)), 0); (("genarg_grammar", 1756), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Genarg")), "genarg_type"), [((("raw")), 100000000, 0, -117); ((("glb")), 100000000, 0, -119); ((("top")), 100000000, 0, -120)], (0)), 100000000, 0, -118), (Tag3 (Tag1 ((("Entry", 1741)), "t"), [((("raw")), 100000000, 0, -117)], (0)), 100000000, 0, -116), 0), 100000000, 0, -115), 0, (("parsing/pcoq.mli", 140, 4750, 4750), ("parsing/pcoq.mli", 140, 4750, 4817), 0), 0, Tag1 ("Pcoq", 27)), 0); Tag3 (("Prim", 1757), 0, (Tag1 ([(("preident", 1833), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -505)], (0)), 100000000, 0, -504), 0, (("parsing/pcoq.mli", 146, 4872, 4876), ("parsing/pcoq.mli", 146, 4872, 4905), 0), 0, Tag1 ("Pcoq", 28)), 0); (("ident", 1834), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -503)], (0)), 100000000, 0, -502), 0, (("parsing/pcoq.mli", 147, 4906, 4910), ("parsing/pcoq.mli", 147, 4906, 4934), 0), 0, Tag1 ("Pcoq", 29)), 0); (("name", 1835), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 (Tag1 ((Tag2 ("Names")), "lname"), 0, (0)), 100000000, 0, -501)], (0)), 100000000, 0, -500), 0, (("parsing/pcoq.mli", 148, 4935, 4939), ("parsing/pcoq.mli", 148, 4935, 4963), 0), 0, Tag1 ("Pcoq", 30)), 0); (("identref", 1836), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -499)], (0)), 100000000, 0, -498), 0, (("parsing/pcoq.mli", 149, 4964, 4968), ("parsing/pcoq.mli", 149, 4964, 4997), 0), 0, Tag1 ("Pcoq", 31)), 0); (("univ_decl", 1837), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "universe_decl_expr"), 0, (0)), 100000000, 0, -497)], (0)), 100000000, 0, -496), 0, (("parsing/pcoq.mli", 150, 4998, 5002), ("parsing/pcoq.mli", 150, 4998, 5044), 0), 0, Tag1 ("Pcoq", 32)), 0); (("ident_decl", 1838), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "ident_decl"), 0, (0)), 100000000, 0, -495)], (0)), 100000000, 0, -494), 0, (("parsing/pcoq.mli", 151, 5045, 5049), ("parsing/pcoq.mli", 151, 5045, 5084), 0), 0, Tag1 ("Pcoq", 33)), 0); (("pattern_ident", 1839), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -493)], (0)), 100000000, 0, -492), 0, (("parsing/pcoq.mli", 152, 5085, 5089), ("parsing/pcoq.mli", 152, 5085, 5123), 0), 0, Tag1 ("Pcoq", 34)), 0); (("base_ident", 1840), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -491)], (0)), 100000000, 0, -490), 0, (("parsing/pcoq.mli", 153, 5124, 5128), ("parsing/pcoq.mli", 153, 5124, 5157), 0), 0, Tag1 ("Pcoq", 35)), 0); (("bignat", 1841), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -489)], (0)), 100000000, 0, -488), 0, (("parsing/pcoq.mli", 154, 5158, 5162), ("parsing/pcoq.mli", 154, 5158, 5189), 0), 0, Tag1 ("Pcoq", 36)), 0); (("natural", 1842), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -487)], (0)), 100000000, 0, -486), 0, (("parsing/pcoq.mli", 155, 5190, 5194), ("parsing/pcoq.mli", 155, 5190, 5219), 0), 0, Tag1 ("Pcoq", 37)), 0); (("bigint", 1843), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -485)], (0)), 100000000, 0, -484), 0, (("parsing/pcoq.mli", 156, 5220, 5224), ("parsing/pcoq.mli", 156, 5220, 5251), 0), 0, Tag1 ("Pcoq", 38)), 0); (("integer", 1844), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -483)], (0)), 100000000, 0, -482), 0, (("parsing/pcoq.mli", 157, 5252, 5256), ("parsing/pcoq.mli", 157, 5252, 5281), 0), 0, Tag1 ("Pcoq", 39)), 0); (("string", 1845), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -481)], (0)), 100000000, 0, -480), 0, (("parsing/pcoq.mli", 158, 5282, 5286), ("parsing/pcoq.mli", 158, 5282, 5313), 0), 0, Tag1 ("Pcoq", 40)), 0); (("lstring", 1846), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 (Tag1 ((Tag2 ("Names")), "lstring"), 0, (0)), 100000000, 0, -479)], (0)), 100000000, 0, -478), 0, (("parsing/pcoq.mli", 159, 5314, 5318), ("parsing/pcoq.mli", 159, 5314, 5347), 0), 0, Tag1 ("Pcoq", 41)), 0); (("reference", 1847), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -477)], (0)), 100000000, 0, -476), 0, (("parsing/pcoq.mli", 160, 5348, 5352), ("parsing/pcoq.mli", 160, 5348, 5382), 0), 0, Tag1 ("Pcoq", 42)), 0); (("fields", 1848), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -474)], (0)), 100000000, 0, -473); (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -475)]), 100000000, 0, -472)], (0)), 100000000, 0, -471), 0, (("parsing/pcoq.mli", 161, 5383, 5387), ("parsing/pcoq.mli", 161, 5383, 5426), 0), 0, Tag1 ("Pcoq", 43)), 0); (("qualid", 1849), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -470)], (0)), 100000000, 0, -469), 0, (("parsing/pcoq.mli", 162, 5427, 5431), ("parsing/pcoq.mli", 162, 5427, 5458), 0), 0, Tag1 ("Pcoq", 44)), 0); (("fullyqualid", 1850), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -468)], (0)), 100000000, 0, -467)], (0)), 100000000, 0, -466)], (0)), 100000000, 0, -465), 0, (("parsing/pcoq.mli", 163, 5459, 5463), ("parsing/pcoq.mli", 163, 5459, 5505), 0), 0, Tag1 ("Pcoq", 45)), 0); (("by_notation", 1851), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -462); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -464)], (0)), 100000000, 0, -463)]), 100000000, 0, -461)], (0)), 100000000, 0, -460), 0, (("parsing/pcoq.mli", 164, 5506, 5510), ("parsing/pcoq.mli", 164, 5506, 5560), 0), 0, Tag1 ("Pcoq", 46)), 0); (("smart_global", 1852), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "or_by_notation"), [(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -459)], (0)), 100000000, 0, -458)], (0)), 100000000, 0, -457), 0, (("parsing/pcoq.mli", 165, 5561, 5565), ("parsing/pcoq.mli", 165, 5561, 5613), 0), 0, Tag1 ("Pcoq", 47)), 0); (("dirpath", 1853), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "DirPath"), "t"), 0, (0)), 100000000, 0, -456)], (0)), 100000000, 0, -455), 0, (("parsing/pcoq.mli", 166, 5614, 5618), ("parsing/pcoq.mli", 166, 5614, 5649), 0), 0, Tag1 ("Pcoq", 48)), 0); (("ne_string", 1854), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -454)], (0)), 100000000, 0, -453), 0, (("parsing/pcoq.mli", 167, 5650, 5654), ("parsing/pcoq.mli", 167, 5650, 5684), 0), 0, Tag1 ("Pcoq", 49)), 0); (("ne_lstring", 1855), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 (Tag1 ((Tag2 ("Names")), "lstring"), 0, (0)), 100000000, 0, -452)], (0)), 100000000, 0, -451), 0, (("parsing/pcoq.mli", 168, 5685, 5689), ("parsing/pcoq.mli", 168, 5685, 5721), 0), 0, Tag1 ("Pcoq", 50)), 0); (("hyp", 1856), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -450)], (0)), 100000000, 0, -449), 0, (("parsing/pcoq.mli", 169, 5722, 5726), ("parsing/pcoq.mli", 169, 5722, 5750), 0), 0, Tag1 ("Pcoq", 51)), 0); (("var", 1857), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -448)], (0)), 100000000, 0, -447), 0, (("parsing/pcoq.mli", 170, 5751, 5755), ("parsing/pcoq.mli", 170, 5751, 5815), 0), [(("ocaml.deprecated", (("parsing/pcoq.mli", 170, 5751, 5783), ("parsing/pcoq.mli", 170, 5751, 5799), 0)), ([([(Tag1 (Tag2 ("Use Prim.hyp", (("parsing/pcoq.mli", 170, 5751, 5801), ("parsing/pcoq.mli", 170, 5751, 5813), 0), 0)), (("parsing/pcoq.mli", 170, 5751, 5800), ("parsing/pcoq.mli", 170, 5751, 5814), 0), 0, 0)], (("parsing/pcoq.mli", 170, 5751, 5800), ("parsing/pcoq.mli", 170, 5751, 5814), 0))]), (("parsing/pcoq.mli", 170, 5751, 5780), ("parsing/pcoq.mli", 170, 5751, 5815), 0))], Tag1 ("Pcoq", 52)), 0); (("bar_cbrace", 1858), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -446)], (0)), 100000000, 0, -445), 0, (("parsing/pcoq.mli", 171, 5816, 5820), ("parsing/pcoq.mli", 171, 5816, 5849), 0), 0, Tag1 ("Pcoq", 53)), 0); (("strategy_level", 1859), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 (Tag1 ((Tag2 ("Conv_oracle")), "level"), 0, (0)), 100000000, 0, -444)], (0)), 100000000, 0, -443), 0, (("parsing/pcoq.mli", 172, 5850, 5854), ("parsing/pcoq.mli", 172, 5850, 5900), 0), 0, Tag1 ("Pcoq", 54)), 0)]), 0, (("parsing/pcoq.mli", 142, 4819, 4819), ("parsing/pcoq.mli", 173, 5901, 5906), 0), Tag1 ("Pcoq", 55)), 0, 0); Tag3 (("Constr", 1758), 0, (Tag1 ([(("constr", 1860), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -570)], (0)), 100000000, 0, -569), 0, (("parsing/pcoq.mli", 177, 5930, 5934), ("parsing/pcoq.mli", 177, 5930, 5966), 0), 0, Tag1 ("Pcoq", 56)), 0); (("constr_eoi", 1861), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -568)], (0)), 100000000, 0, -567), 0, (("parsing/pcoq.mli", 178, 5967, 5971), ("parsing/pcoq.mli", 178, 5967, 6007), 0), 0, Tag1 ("Pcoq", 57)), 0); (("lconstr", 1862), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -566)], (0)), 100000000, 0, -565), 0, (("parsing/pcoq.mli", 179, 6008, 6012), ("parsing/pcoq.mli", 179, 6008, 6045), 0), 0, Tag1 ("Pcoq", 58)), 0); (("binder_constr", 1863), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -564)], (0)), 100000000, 0, -563), 0, (("parsing/pcoq.mli", 180, 6046, 6050), ("parsing/pcoq.mli", 180, 6046, 6089), 0), 0, Tag1 ("Pcoq", 59)), 0); (("term", 1864), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -562)], (0)), 100000000, 0, -561), 0, (("parsing/pcoq.mli", 181, 6090, 6094), ("parsing/pcoq.mli", 181, 6090, 6124), 0), 0, Tag1 ("Pcoq", 60)), 0); (("ident", 1865), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -560)], (0)), 100000000, 0, -559), 0, (("parsing/pcoq.mli", 182, 6125, 6129), ("parsing/pcoq.mli", 182, 6125, 6153), 0), 0, Tag1 ("Pcoq", 61)), 0); (("global", 1866), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -558)], (0)), 100000000, 0, -557), 0, (("parsing/pcoq.mli", 183, 6154, 6158), ("parsing/pcoq.mli", 183, 6154, 6185), 0), 0, Tag1 ("Pcoq", 62)), 0); (("universe_name", 1867), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "sort_name_expr"), 0, (0)), 100000000, 0, -556)], (0)), 100000000, 0, -555), 0, (("parsing/pcoq.mli", 184, 6186, 6190), ("parsing/pcoq.mli", 184, 6186, 6232), 0), 0, Tag1 ("Pcoq", 63)), 0); (("universe_level", 1868), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "univ_level_expr"), 0, (0)), 100000000, 0, -554)], (0)), 100000000, 0, -553), 0, (("parsing/pcoq.mli", 185, 6233, 6237), ("parsing/pcoq.mli", 185, 6233, 6281), 0), 0, Tag1 ("Pcoq", 64)), 0); (("sort", 1869), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "sort_expr"), 0, (0)), 100000000, 0, -552)], (0)), 100000000, 0, -551), 0, (("parsing/pcoq.mli", 186, 6282, 6286), ("parsing/pcoq.mli", 186, 6282, 6314), 0), 0, Tag1 ("Pcoq", 65)), 0); (("sort_family", 1870), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 (Tag1 ((Tag2 ("Sorts")), "family"), 0, (0)), 100000000, 0, -550)], (0)), 100000000, 0, -549), 0, (("parsing/pcoq.mli", 187, 6315, 6319), ("parsing/pcoq.mli", 187, 6315, 6357), 0), 0, Tag1 ("Pcoq", 66)), 0); (("pattern", 1871), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "cases_pattern_expr"), 0, (0)), 100000000, 0, -548)], (0)), 100000000, 0, -547), 0, (("parsing/pcoq.mli", 188, 6358, 6362), ("parsing/pcoq.mli", 188, 6358, 6402), 0), 0, Tag1 ("Pcoq", 67)), 0); (("constr_pattern", 1872), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -546)], (0)), 100000000, 0, -545), 0, (("parsing/pcoq.mli", 189, 6403, 6407), ("parsing/pcoq.mli", 189, 6403, 6447), 0), 0, Tag1 ("Pcoq", 68)), 0); (("cpattern", 1873), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -544)], (0)), 100000000, 0, -543), 0, (("parsing/pcoq.mli", 190, 6448, 6452), ("parsing/pcoq.mli", 190, 6448, 6486), 0), 0, Tag1 ("Pcoq", 69)), 0); (("closed_binder", 1874), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "local_binder_expr"), 0, (0)), 100000000, 0, -542)], (0)), 100000000, 0, -541)], (0)), 100000000, 0, -540), 0, (("parsing/pcoq.mli", 191, 6487, 6491), ("parsing/pcoq.mli", 191, 6487, 6541), 0), 0, Tag1 ("Pcoq", 70)), 0); (("binder", 1875), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "local_binder_expr"), 0, (0)), 100000000, 0, -539)], (0)), 100000000, 0, -538)], (0)), 100000000, 0, -537), 0, (("parsing/pcoq.mli", 192, 6542, 6546), ("parsing/pcoq.mli", 192, 6542, 6589), 0), 0, Tag1 ("Pcoq", 71)), 0); (("binders", 1876), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "local_binder_expr"), 0, (0)), 100000000, 0, -536)], (0)), 100000000, 0, -535)], (0)), 100000000, 0, -534), 0, (("parsing/pcoq.mli", 193, 6622, 6626), ("parsing/pcoq.mli", 193, 6622, 6670), 0), 0, Tag1 ("Pcoq", 72)), 0); (("open_binders", 1877), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "local_binder_expr"), 0, (0)), 100000000, 0, -533)], (0)), 100000000, 0, -532)], (0)), 100000000, 0, -531), 0, (("parsing/pcoq.mli", 194, 6692, 6696), ("parsing/pcoq.mli", 194, 6692, 6745), 0), 0, Tag1 ("Pcoq", 73)), 0); (("one_open_binder", 1878), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "kinded_cases_pattern_expr"), 0, (0)), 100000000, 0, -530)], (0)), 100000000, 0, -529), 0, (("parsing/pcoq.mli", 195, 6746, 6750), ("parsing/pcoq.mli", 195, 6746, 6805), 0), 0, Tag1 ("Pcoq", 74)), 0); (("one_closed_binder", 1879), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "kinded_cases_pattern_expr"), 0, (0)), 100000000, 0, -528)], (0)), 100000000, 0, -527), 0, (("parsing/pcoq.mli", 196, 6806, 6810), ("parsing/pcoq.mli", 196, 6806, 6867), 0), 0, Tag1 ("Pcoq", 75)), 0); (("binders_fixannot", 1880), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "local_binder_expr"), 0, (0)), 100000000, 0, -524)], (0)), 100000000, 0, -523); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "recursion_order_expr"), 0, (0)), 100000000, 0, -526)], (0)), 100000000, 0, -525)]), 100000000, 0, -522)], (0)), 100000000, 0, -521), 0, (("parsing/pcoq.mli", 197, 6868, 6872), ("parsing/pcoq.mli", 197, 6868, 6957), 0), 0, Tag1 ("Pcoq", 76)), 0); (("typeclass_constraint", 1881), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Names")), "lname"), 0, (0)), 100000000, 0, -518); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -519); (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -520)]), 100000000, 0, -517)], (0)), 100000000, 0, -516), 0, (("parsing/pcoq.mli", 198, 6958, 6962), ("parsing/pcoq.mli", 198, 6958, 7025), 0), 0, Tag1 ("Pcoq", 77)), 0); (("record_declaration", 1882), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -515)], (0)), 100000000, 0, -514), 0, (("parsing/pcoq.mli", 199, 7026, 7030), ("parsing/pcoq.mli", 199, 7026, 7074), 0), 0, Tag1 ("Pcoq", 78)), 0); (("arg", 1883), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -510); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "explicitation"), 0, (0)), 100000000, 0, -513)], (0)), 100000000, 0, -512)], (0)), 100000000, 0, -511)]), 100000000, 0, -509)], (0)), 100000000, 0, -508), 0, (("parsing/pcoq.mli", 200, 7075, 7079), ("parsing/pcoq.mli", 200, 7075, 7140), 0), 0, Tag1 ("Pcoq", 79)), 0); (("type_cstr", 1884), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -507)], (0)), 100000000, 0, -506), 0, (("parsing/pcoq.mli", 201, 7141, 7145), ("parsing/pcoq.mli", 201, 7141, 7180), 0), 0, Tag1 ("Pcoq", 80)), 0)]), 0, (("parsing/pcoq.mli", 175, 5908, 5908), ("parsing/pcoq.mli", 202, 7181, 7186), 0), Tag1 ("Pcoq", 81)), 0, 0); Tag3 (("Module", 1759), 0, (Tag1 ([(("module_expr", 1885), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "module_ast"), 0, (0)), 100000000, 0, -574)], (0)), 100000000, 0, -573), 0, (("parsing/pcoq.mli", 206, 7210, 7214), ("parsing/pcoq.mli", 206, 7210, 7250), 0), 0, Tag1 ("Pcoq", 82)), 0); (("module_type", 1886), ((Tag3 (Tag1 ((("Entry", 1741)), "t"), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "module_ast"), 0, (0)), 100000000, 0, -572)], (0)), 100000000, 0, -571), 0, (("parsing/pcoq.mli", 207, 7251, 7255), ("parsing/pcoq.mli", 207, 7251, 7291), 0), 0, Tag1 ("Pcoq", 83)), 0)]), 0, (("parsing/pcoq.mli", 204, 7188, 7188), ("parsing/pcoq.mli", 208, 7292, 7297), 0), Tag1 ("Pcoq", 84)), 0, 0); (("epsilon_value", 1760), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -113), ((("self")), 100000000, 0, -110), 0), 100000000, 0, -114), (Tag1 (0, (Tag3 (Tag1 ((("Symbol", 1742)), "t"), [((("self")), 100000000, 0, -110); ((0), 100000000, 0, -112); ((("a")), 100000000, 0, -113)], (0)), 100000000, 0, -111), (Tag3 ((Tag3 ("option", 10)), [((("self")), 100000000, 0, -110)], (0)), 100000000, 0, -109), 0), 100000000, 0, -108), 0), 100000000, 0, -107), 0, (("parsing/pcoq.mli", 212, 7339, 7339), ("parsing/pcoq.mli", 212, 7339, 7415), 0), 0, Tag1 ("Pcoq", 85)), 0); (("grammar_extend", 1761), ((Tag1 (0, (Tag3 (Tag1 ((("Entry", 1741)), "t"), [((("a")), 100000000, 0, -105)], (0)), 100000000, 0, -106), (Tag1 (0, (Tag3 ((("extend_statement", 1747)), [((("a")), 100000000, 0, -105)], (0)), 100000000, 0, -104), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -103), 0), 100000000, 0, -102), 0), 100000000, 0, -101), 0, (("parsing/pcoq.mli", 216, 7474, 7474), ("parsing/pcoq.mli", 216, 7474, 7536), 0), 0, Tag1 ("Pcoq", 86)), 0); Tag3 (("GramState", 1762), 0, ((Tag1 ((Tag2 ("Store")), "S")), 0, (("parsing/pcoq.mli", 223, 7780, 7780), ("parsing/pcoq.mli", 223, 7780, 7806), 0), Tag1 ("Pcoq", 87)), 0, 0); Tag1 (("grammar_command", 1763), ([((("a")), 100000000, 0, -100)], 1, 0, 1, 0, [7], [2], 0, 0, (("parsing/pcoq.mli", 228, 7925, 7925), ("parsing/pcoq.mli", 228, 7925, 7948), 0), 0, 0, 0, Tag1 ("Pcoq", 88)), 1, 0); Tag1 (("gram_reinit", 1764), (0, 0, 0, 1, ((Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Gramlib")), "Gramext"), "g_assoc"), 0, (0)), 100000000, 0, -98); (Tag3 (Tag1 (Tag1 ((Tag2 ("Gramlib")), "Gramext"), "position"), 0, (0)), 100000000, 0, -99)]), 100000000, 0, -97)), 0, 0, 0, 0, (("parsing/pcoq.mli", 232, 8040, 8040), ("parsing/pcoq.mli", 232, 8040, 8109), 0), 0, 0, 0, Tag1 ("Pcoq", 89)), 1, 0); Tag1 (("extend_rule", 1765), (0, 0, Tag1 ([(("ExtendRule", 1483), ([(Tag3 (Tag1 ((("Entry", 1741)), "t"), [((("a")), 100000000, 0, -90)], (0)), 100000000, 0, -89); (Tag3 ((("extend_statement", 1747)), [((("a")), 100000000, 0, -90)], (0)), 100000000, 0, -91)]), ((Tag3 ((("extend_rule", 1765)), 0, (0)), 100000000, 0, -88)), (("parsing/pcoq.mli", 236, 8167, 8167), ("parsing/pcoq.mli", 236, 8167, 8229), 0), 0, Tag1 ("Pcoq", 91)); (("ExtendRuleReinit", 1484), ([(Tag3 (Tag1 ((("Entry", 1741)), "t"), [((("a")), 100000000, 0, -94)], (0)), 100000000, 0, -93); (Tag3 ((("gram_reinit", 1764)), 0, (0)), 100000000, 0, -95); (Tag3 ((("extend_statement", 1747)), [((("a")), 100000000, 0, -94)], (0)), 100000000, 0, -96)]), ((Tag3 ((("extend_rule", 1765)), 0, (0)), 100000000, 0, -92)), (("parsing/pcoq.mli", 237, 8230, 8230), ("parsing/pcoq.mli", 237, 8230, 8312), 0), 0, Tag1 ("Pcoq", 92))], 0), 1, 0, 0, 0, 0, 0, (("parsing/pcoq.mli", 235, 8148, 8148), ("parsing/pcoq.mli", 237, 8230, 8312), 0), 0, 0, 0, Tag1 ("Pcoq", 90)), 1, 0); Tag1 (("grammar_extension", 1766), ([((("a")), 100000000, 0, -84)], 1, [[(("gext_fun", 1494), 0, (Tag1 (0, ((("a")), 100000000, 0, -84), (Tag1 (0, (Tag3 (Tag1 ((("GramState", 1762)), "t"), 0, (0)), 100000000, 0, -83), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("extend_rule", 1765)), 0, (0)), 100000000, 0, -81)], (0)), 100000000, 0, -80); (Tag3 (Tag1 ((("GramState", 1762)), "t"), 0, (0)), 100000000, 0, -82)]), 100000000, 0, -79), 0), 100000000, 0, -78), 0), 100000000, 0, -77), (("parsing/pcoq.mli", 240, 8344, 8346), ("parsing/pcoq.mli", 240, 8344, 8409), 0), 0, Tag1 ("Pcoq", 94)); (("gext_eq", 1495), 0, (Tag1 (0, ((("a")), 100000000, 0, -84), (Tag1 (0, ((("a")), 100000000, 0, -84), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -87), 0), 100000000, 0, -86), 0), 100000000, 0, -85), (("parsing/pcoq.mli", 241, 8410, 8412), ("parsing/pcoq.mli", 241, 8410, 8439), 0), 0, Tag1 ("Pcoq", 95))]], 1, 0, [46], [0], 0, 0, (("parsing/pcoq.mli", 239, 8314, 8314), ("parsing/pcoq.mli", 242, 8440, 8441), 0), 0, 0, 0, Tag1 ("Pcoq", 93)), 1, 0); (("create_grammar_command", 1767), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -76), (Tag1 (0, (Tag3 ((("grammar_extension", 1766)), [((("a")), 100000000, 0, -74)], (0)), 100000000, 0, -75), (Tag3 ((("grammar_command", 1763)), [((("a")), 100000000, 0, -74)], (0)), 100000000, 0, -73), 0), 100000000, 0, -72), 0), 100000000, 0, -71), 0, (("parsing/pcoq.mli", 248, 8725, 8725), ("parsing/pcoq.mli", 248, 8725, 8806), 0), 0, Tag1 ("Pcoq", 96)), 0); (("extend_grammar_command", 1768), ((Tag1 (0, (Tag3 ((("grammar_command", 1763)), [((("a")), 100000000, 0, -69)], (0)), 100000000, 0, -70), (Tag1 (0, ((("a")), 100000000, 0, -69), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -68), 0), 100000000, 0, -67), 0), 100000000, 0, -66), 0, (("parsing/pcoq.mli", 252, 8952, 8952), ("parsing/pcoq.mli", 252, 8952, 9013), 0), 0, Tag1 ("Pcoq", 97)), 0); Tag1 (("entry_command", 1769), ([((("a")), 100000000, 0, -64); ((("b")), 100000000, 0, -65)], 2, 0, 1, 0, [7; 7], [2; 2], 0, 0, (("parsing/pcoq.mli", 257, 9112, 9112), ("parsing/pcoq.mli", 257, 9112, 9139), 0), 0, 0, 0, Tag1 ("Pcoq", 98)), 1, 0); Tag1 (("entry_extension", 1770), ([((("a")), 100000000, 0, -59); ((("b")), 100000000, 0, -63)], 2, [[(("eext_fun", 1500), 0, (Tag1 (0, ((("a")), 100000000, 0, -59), (Tag1 (0, (Tag3 (Tag1 ((("GramState", 1762)), "t"), 0, (0)), 100000000, 0, -58), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -56)], (0)), 100000000, 0, -55); (Tag3 (Tag1 ((("GramState", 1762)), "t"), 0, (0)), 100000000, 0, -57)]), 100000000, 0, -54), 0), 100000000, 0, -53), 0), 100000000, 0, -52), (("parsing/pcoq.mli", 262, 9261, 9263), ("parsing/pcoq.mli", 262, 9261, 9321), 0), 0, Tag1 ("Pcoq", 100)); (("eext_eq", 1501), 0, (Tag1 (0, ((("a")), 100000000, 0, -59), (Tag1 (0, ((("a")), 100000000, 0, -59), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -62), 0), 100000000, 0, -61), 0), 100000000, 0, -60), (("parsing/pcoq.mli", 263, 9322, 9324), ("parsing/pcoq.mli", 263, 9322, 9351), 0), 0, Tag1 ("Pcoq", 101))]], 1, 0, [46; 8], [0; 0], 0, 0, (("parsing/pcoq.mli", 261, 9227, 9227), ("parsing/pcoq.mli", 264, 9352, 9353), 0), 0, 0, 0, Tag1 ("Pcoq", 99)), 1, 0); (("create_entry_command", 1771), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -51), (Tag1 (0, (Tag3 ((("entry_extension", 1770)), [((("a")), 100000000, 0, -48); ((("b")), 100000000, 0, -49)], (0)), 100000000, 0, -50), (Tag3 ((("entry_command", 1769)), [((("a")), 100000000, 0, -48); ((("b")), 100000000, 0, -49)], (0)), 100000000, 0, -47), 0), 100000000, 0, -46), 0), 100000000, 0, -45), 0, (("parsing/pcoq.mli", 270, 9615, 9615), ("parsing/pcoq.mli", 270, 9615, 9702), 0), 0, Tag1 ("Pcoq", 102)), 0); (("extend_entry_command", 1772), ((Tag1 (0, (Tag3 ((("entry_command", 1769)), [((("a")), 100000000, 0, -43); ((("b")), 100000000, 0, -42)], (0)), 100000000, 0, -44), (Tag1 (0, ((("a")), 100000000, 0, -43), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Entry", 1741)), "t"), [((("b")), 100000000, 0, -42)], (0)), 100000000, 0, -41)], (0)), 100000000, 0, -40), 0), 100000000, 0, -39), 0), 100000000, 0, -38), 0, (("parsing/pcoq.mli", 274, 9851, 9851), ("parsing/pcoq.mli", 274, 9851, 9925), 0), 0, Tag1 ("Pcoq", 103)), 0); (("find_custom_entry", 1773), ((Tag1 (0, (Tag3 ((("entry_command", 1769)), [((("a")), 100000000, 0, -37); ((("b")), 100000000, 0, -34)], (0)), 100000000, 0, -36), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -35), (Tag3 (Tag1 ((("Entry", 1741)), "t"), [((("b")), 100000000, 0, -34)], (0)), 100000000, 0, -33), 0), 100000000, 0, -32), 0), 100000000, 0, -31), 0, (("parsing/pcoq.mli", 277, 9991, 9991), ("parsing/pcoq.mli", 277, 9991, 10061), 0), 0, Tag1 ("Pcoq", 104)), 0); (("with_grammar_rule_protection", 1774), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -29), ((("b")), 100000000, 0, -28), 0), 100000000, 0, -30), (Tag1 (0, ((("a")), 100000000, 0, -29), ((("b")), 100000000, 0, -28), 0), 100000000, 0, -27), 0), 100000000, 0, -26), 0, (("parsing/pcoq.mli", 283, 10221, 10221), ("parsing/pcoq.mli", 283, 10221, 10278), 0), 0, Tag1 ("Pcoq", 105)), 0); Tag1 (("frozen_t", 1775), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("parsing/pcoq.mli", 285, 10280, 10280), ("parsing/pcoq.mli", 285, 10280, 10293), 0), 0, 0, 0, Tag1 ("Pcoq", 106)), 1, 0); (("parser_summary_tag", 1776), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Summary")), "Dyn"), "tag"), [(Tag3 ((("frozen_t", 1775)), 0, (0)), 100000000, 0, -25)], (0)), 100000000, 0, -24), 0, (("parsing/pcoq.mli", 286, 10294, 10294), ("parsing/pcoq.mli", 286, 10294, 10343), 0), 0, Tag1 ("Pcoq", 107)), 0); (("register_grammars_by_name", 1777), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -23), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Entry", 1741)), "any_t"), 0, (0)), 100000000, 0, -22)], (0)), 100000000, 0, -21), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -20), 0), 100000000, 0, -19), 0), 100000000, 0, -18), 0, (("parsing/pcoq.mli", 290, 10382, 10382), ("parsing/pcoq.mli", 290, 10382, 10448), 0), 0, Tag1 ("Pcoq", 108)), 0); (("find_grammars_by_name", 1778), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -17), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Entry", 1741)), "any_t"), 0, (0)), 100000000, 0, -16)], (0)), 100000000, 0, -15), 0), 100000000, 0, -14), 0, (("parsing/pcoq.mli", 291, 10449, 10449), ("parsing/pcoq.mli", 291, 10449, 10503), 0), 0, Tag1 ("Pcoq", 109)), 0); (("freeze", 1779), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -13), (Tag3 ((("frozen_t", 1775)), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("parsing/pcoq.mli", 294, 10535, 10535), ("parsing/pcoq.mli", 294, 10535, 10564), 0), 0, Tag1 ("Pcoq", 110)), 0); (("unfreeze", 1780), ((Tag1 (0, (Tag3 ((("frozen_t", 1775)), 0, (0)), 100000000, 0, -10), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("parsing/pcoq.mli", 295, 10565, 10565), ("parsing/pcoq.mli", 295, 10565, 10596), 0), 0, Tag1 ("Pcoq", 111)), 0); (("get_keyword_state", 1781), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7), (Tag3 (Tag1 ((Tag2 ("CLexer")), "keyword_state"), 0, (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("parsing/pcoq.mli", 297, 10598, 10598), ("parsing/pcoq.mli", 297, 10598, 10650), 0), 0, Tag1 ("Pcoq", 112)), 0); (("set_keyword_state", 1782), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("CLexer")), "keyword_state"), 0, (0)), 100000000, 0, -4), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("parsing/pcoq.mli", 298, 10651, 10651), ("parsing/pcoq.mli", 298, 10651, 10703), 0), 0, Tag1 ("Pcoq", 113)), 0)], "Pcoq", [("Pcoq", ("\231\158\223M\188\002_J\154\240\176\002\022p\243\154")); ("Z", ("\253\196\2168\027\199O\134\220\218\031'\1484\233o")); ("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Vmemitcodes", ("wCd\138\165\158DD\241gH\236.\210\197\247")); ("Vmbytecodes", ("\025\021\151\137Dx\149W\236+[\143f\208\160\016")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Unix", (":B72R\011\005Sj\189)\011\239PH\254")); ("UnivSubst", ("\190qu\031mc\130\181\003G]\132\"\219m)")); ("UnivProblem", ("6'\161\018\181\001.\253\000\141a6\171\1727\155")); ("UnivNames", ("%\151_\209%+JM$n\001\232\194n\178N")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UState", ("SD\203\215|\136\n\251\239\208\148\215C\n\167\005")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Tok", ("\162\196\180\135\219\014\184\165;\207\025\215\176g\188\225")); ("Summary", ("\148G\135\226\024L3\246\021\028U\146\164`\253\250")); ("Store", ("/dT\252\145\179pq\216{\181\206\190K+U")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Random", ("\020\005Xq\171\026\218\152X\135\254\023\133zK\200")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("Section", ("\245\207\b\021\142v=\155#w\246}\"4b\006")); ("Safe_typing", (")\250?\164\145\132\241\127\186\152h+\145\"\237l")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("Range", ("\218\130\001r\237\r\144\171\164\021l\155\196\143sg")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Pattern", ("\195C\140Wb=\022\222\208\227^K\003\020\215X")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("NumTok", ("vd\023^\251\244B\166\145'\156\196-0\027\169")); ("Nativevalues", ("8:\007\025e\226c,\001\171\146#l\210\171\152")); ("Nativelib", ("V\239\205Y1\147E:,\176\196Hy\1483|")); ("Nativecode", ("\190\185\255\006m\012\210\163\138Rz\247\15283\183")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Namegen", ("\187\222\224T\255\020\1808-\212*\164\131\177\157x")); ("Monad", ("\244\171T\157\194p\187\160\149\195{\132\222\020\253\148")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Libnames", ("fp\0255\167\162\209\153\137\161\169#\246\193\003\198")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hook", ("\183\194\223\003\155\169',\187\240a;E\b\1396")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Gramlib__Stream", ("\248\\H\205_76\253\136\146\200\031\165\021=t")); ("Gramlib__Plexing", ("\028\200j\003G\198\183\184f\243\148a\020\011\160\171")); ("Gramlib__LStream", ("B\143\148\148@\016M\192w\155\223\189\218\224\002\004")); ("Gramlib__Grammar", ("zuU\178r\159\234NC\015_hKT\240\151")); ("Gramlib__Gramext", ("B\171oA\172\212\187>\175\233Q\145\"\176TM")); ("Gramlib", ("\154\143\210e\021i\246\176\224\194\220\217\007\145\139A")); ("Glob_term", ("\165=a\227\160\153.\021_$\232\209T\236\153O")); ("Genlambda", ("\170}\024\241\141\222\136S\169\219\2212i\134KI")); ("Genarg", ("\1434\015\001\152\196\005s\156\136\195\185\247\b3\t")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evd", ("\211\205p\193\216\129r\006\239oN\142ar\196\175")); ("Evar_kinds", ("\023L\186\132\218}\254\221\185\198\220\200h\003{\021")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Environ", ("\171b\1579\229<\003Z\147IL\225X\254\182\204")); ("Entries", ("\172\201\198\221Ap\027_{\174\141C\021\";p")); ("EConstr", ("\201aW\156\157;N\004\201V\208\006L\166\211)")); ("Dyn", ("\131z`\205v\2306\007x\027&K.?;\169")); ("Declarations", ("\239\137n\019\030w$\182\166z^{\b\206\163\175")); ("DAst", ("\224/\200)\007\184ni\134\b\139\204\241\005w\212")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Conversion", ("\158\150&\195M\tv\127|\029\158RRK\211A")); ("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constrexpr", ("p'r\245\184chL\183\249\"\213]\1741\237")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CUnix", ("\140Zl\153\167\011J\015\005|th\247OTu")); ("CString", ("\243~4C\023~\169\148x\206\165\207\195\177Q\184")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CLexer", ("\158\155\242\159%gC\237\011\196\158\255\163\217\239G")); ("CEphemeron", ("\204I\179-\206(x4\173\229\250\001PkH\151")); ("CDebug", ("^4\210p7\239!3\138\138\213?\239`\250\157")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])
val set_keyword_state : CLexer.keyword_state -> unit

type values
type structured_values
type vm_env
type vprod
type vfun
type vfix
type vcofix
type vblock
type arguments
type vstack = values array
type to_update
type tag = int
val type_atom_tag : tag
val max_atom_tag : tag
val proj_tag : tag
val fix_app_tag : tag
val switch_tag : tag
val cofix_tag : tag
val cofix_evaluated_tag : tag
type structured_constant =
    Const_sort of Sorts.t
  | Const_ind of Names.inductive
  | Const_b0 of tag
  | Const_univ_level of Univ.Level.t
  | Const_val of structured_values
  | Const_uint of Uint63.t
  | Const_float of Float64.t
val pp_struct_const : structured_constant -> Pp.t
type reloc_table = (tag * int) array
type annot_switch = {
  rtbl : reloc_table;
  tailcall : bool;
  max_stack_size : int;
}
val eq_structured_constant :
  structured_constant -> structured_constant -> bool
val hash_structured_constant : structured_constant -> int
val eq_annot_switch : annot_switch -> annot_switch -> bool
val hash_annot_switch : annot_switch -> int
val fun_val : vfun -> values
val fix_val : vfix -> values
val cofix_upd_val : to_update -> values
val inj_env : values array -> vm_env
val fun_env : vfun -> vm_env
val fix_env : vfix -> vm_env
val cofix_env : vcofix -> vm_env
val cofix_upd_env : to_update -> vm_env
val fun_of_val : values -> vfun
val crazy_val : values
type tcode
type vswitch = {
  sw_type_code : tcode;
  sw_code : tcode;
  sw_annot : annot_switch;
  sw_stk : vstack;
  sw_env : vm_env;
}
external mkAccuCode : int -> tcode = "coq_makeaccu"
val fun_code : vfun -> tcode
val fix_code : vfix -> tcode
val cofix_upd_code : to_update -> tcode
type id_key =
    ConstKey of Names.Constant.t
  | VarKey of Names.Id.t
  | RelKey of Int.t
  | EvarKey of Evar.t
val eq_id_key : id_key -> id_key -> bool
type atom = Aid of id_key | Aind of Names.inductive | Asort of Sorts.t
val get_atom_rel : unit -> atom array
type zipper =
    Zapp of arguments
  | Zfix of vfix * arguments
  | Zswitch of vswitch
  | Zproj of int
type stack = zipper list
type accumulator = atom * stack
type kind =
    (values, accumulator, vfun, vprod, vfix * arguments option,
     vcofix * to_update * arguments option, vblock)
    Values.kind
val pr_atom : atom -> Pp.t
val pr_kind : kind -> Pp.t
val pr_stack : stack -> Pp.t
val val_of_str_const : structured_constant -> values
val val_of_rel : int -> values
val val_of_named : Names.Id.t -> values
val val_of_constant : Names.Constant.t -> values
val val_of_evar : Evar.t -> values
val val_of_proj : int -> values -> values
val val_of_atom : atom -> values
val val_of_int : int -> structured_values
val val_of_block : tag -> structured_values array -> structured_values
val val_of_uint : Uint63.t -> structured_values
external val_of_annot_switch : annot_switch -> values = "%identity"
val whd_val : values -> kind
val uni_lvl_val : values -> Univ.Level.t
val nargs : arguments -> int
val arg : arguments -> int -> values
val dom : vprod -> values
val codom : vprod -> vfun
external closure_arity : vfun -> int = "coq_closure_arity"
val current_fix : vfix -> int
val check_fix : vfix -> vfix -> bool
val rec_args : vfix -> int array
val first_fix : vfix -> vfix
val fix_types : vfix -> tcode array
val cofix_types : vcofix -> tcode array
val mk_fix_body : int -> int -> vfix -> vfun array
val current_cofix : vcofix -> int
val check_cofix : vcofix -> vcofix -> bool
val mk_cofix_body :
  (vfun -> vstack -> values) -> int -> int -> vcofix -> values array
val btag : vblock -> int
val bsize : vblock -> int
val bfield : vblock -> int -> values
val check_switch : vswitch -> vswitch -> bool
val branch_arg : int -> tag * int -> values
val parray_make : values
val parray_get : values
val parray_get_default : values
val parray_set : values
val parray_copy : values("DEBUG:rule", [Tag1 (("values", 796), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("kernel/vmvalues.mli", 15, 703, 703), ("kernel/vmvalues.mli", 15, 703, 714), 0), 0, 0, 0, Tag1 ("Vmvalues", 0)), 1, 0); Tag1 (("structured_values", 797), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("kernel/vmvalues.mli", 16, 715, 715), ("kernel/vmvalues.mli", 16, 715, 737), 0), 0, 0, 0, Tag1 ("Vmvalues", 1)), 1, 0); Tag1 (("vm_env", 798), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("kernel/vmvalues.mli", 17, 738, 738), ("kernel/vmvalues.mli", 17, 738, 749), 0), 0, 0, 0, Tag1 ("Vmvalues", 2)), 1, 0); Tag1 (("vprod", 799), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("kernel/vmvalues.mli", 18, 750, 750), ("kernel/vmvalues.mli", 18, 750, 760), 0), 0, 0, 0, Tag1 ("Vmvalues", 3)), 1, 0); Tag1 (("vfun", 800), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("kernel/vmvalues.mli", 19, 761, 761), ("kernel/vmvalues.mli", 19, 761, 770), 0), 0, 0, 0, Tag1 ("Vmvalues", 4)), 1, 0); Tag1 (("vfix", 801), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("kernel/vmvalues.mli", 20, 771, 771), ("kernel/vmvalues.mli", 20, 771, 780), 0), 0, 0, 0, Tag1 ("Vmvalues", 5)), 1, 0); Tag1 (("vcofix", 802), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("kernel/vmvalues.mli", 21, 781, 781), ("kernel/vmvalues.mli", 21, 781, 792), 0), 0, 0, 0, Tag1 ("Vmvalues", 6)), 1, 0); Tag1 (("vblock", 803), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("kernel/vmvalues.mli", 22, 793, 793), ("kernel/vmvalues.mli", 22, 793, 804), 0), 0, 0, 0, Tag1 ("Vmvalues", 7)), 1, 0); Tag1 (("arguments", 804), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("kernel/vmvalues.mli", 23, 805, 805), ("kernel/vmvalues.mli", 23, 805, 819), 0), 0, 0, 0, Tag1 ("Vmvalues", 8)), 1, 0); Tag1 (("vstack", 805), (0, 0, 0, 1, ((Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("values", 796)), 0, (0)), 100000000, 0, -283)], (0)), 100000000, 0, -282)), 0, 0, 0, 0, (("kernel/vmvalues.mli", 24, 820, 820), ("kernel/vmvalues.mli", 24, 820, 846), 0), 0, 0, 0, Tag1 ("Vmvalues", 9)), 1, 0); Tag1 (("to_update", 806), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("kernel/vmvalues.mli", 25, 847, 847), ("kernel/vmvalues.mli", 25, 847, 861), 0), 0, 0, 0, Tag1 ("Vmvalues", 10)), 1, 0); Tag1 (("tag", 807), (0, 0, 0, 1, ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -281)), 0, 0, 0, 0, (("kernel/vmvalues.mli", 27, 863, 863), ("kernel/vmvalues.mli", 27, 863, 877), 0), 0, 1, 0, Tag1 ("Vmvalues", 11)), 1, 0); (("type_atom_tag", 808), ((Tag3 ((("tag", 807)), 0, (0)), 100000000, 0, -280), 0, (("kernel/vmvalues.mli", 29, 879, 879), ("kernel/vmvalues.mli", 29, 879, 902), 0), 0, Tag1 ("Vmvalues", 12)), 0); (("max_atom_tag", 809), ((Tag3 ((("tag", 807)), 0, (0)), 100000000, 0, -279), 0, (("kernel/vmvalues.mli", 30, 903, 903), ("kernel/vmvalues.mli", 30, 903, 925), 0), 0, Tag1 ("Vmvalues", 13)), 0); (("proj_tag", 810), ((Tag3 ((("tag", 807)), 0, (0)), 100000000, 0, -278), 0, (("kernel/vmvalues.mli", 31, 926, 926), ("kernel/vmvalues.mli", 31, 926, 944), 0), 0, Tag1 ("Vmvalues", 14)), 0); (("fix_app_tag", 811), ((Tag3 ((("tag", 807)), 0, (0)), 100000000, 0, -277), 0, (("kernel/vmvalues.mli", 32, 945, 945), ("kernel/vmvalues.mli", 32, 945, 966), 0), 0, Tag1 ("Vmvalues", 15)), 0); (("switch_tag", 812), ((Tag3 ((("tag", 807)), 0, (0)), 100000000, 0, -276), 0, (("kernel/vmvalues.mli", 33, 967, 967), ("kernel/vmvalues.mli", 33, 967, 987), 0), 0, Tag1 ("Vmvalues", 16)), 0); (("cofix_tag", 813), ((Tag3 ((("tag", 807)), 0, (0)), 100000000, 0, -275), 0, (("kernel/vmvalues.mli", 34, 988, 988), ("kernel/vmvalues.mli", 34, 988, 1007), 0), 0, Tag1 ("Vmvalues", 17)), 0); (("cofix_evaluated_tag", 814), ((Tag3 ((("tag", 807)), 0, (0)), 100000000, 0, -274), 0, (("kernel/vmvalues.mli", 35, 1008, 1008), ("kernel/vmvalues.mli", 35, 1008, 1037), 0), 0, Tag1 ("Vmvalues", 18)), 0); Tag1 (("structured_constant", 815), (0, 0, Tag1 ([(("Const_sort", 374), ([(Tag3 (Tag1 ((Tag2 ("Sorts")), "t"), 0, (0)), 100000000, 0, -267)]), 0, (("kernel/vmvalues.mli", 38, 1066, 1068), ("kernel/vmvalues.mli", 38, 1066, 1091), 0), 0, Tag1 ("Vmvalues", 20)); (("Const_ind", 407), ([(Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -268)]), 0, (("kernel/vmvalues.mli", 39, 1092, 1094), ("kernel/vmvalues.mli", 39, 1092, 1118), 0), 0, Tag1 ("Vmvalues", 21)); (("Const_b0", 408), ([(Tag3 ((("tag", 807)), 0, (0)), 100000000, 0, -269)]), 0, (("kernel/vmvalues.mli", 40, 1119, 1121), ("kernel/vmvalues.mli", 40, 1119, 1138), 0), 0, Tag1 ("Vmvalues", 22)); (("Const_univ_level", 409), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Level"), "t"), 0, (0)), 100000000, 0, -270)]), 0, (("kernel/vmvalues.mli", 41, 1139, 1141), ("kernel/vmvalues.mli", 41, 1139, 1175), 0), 0, Tag1 ("Vmvalues", 23)); (("Const_val", 481), ([(Tag3 ((("structured_values", 797)), 0, (0)), 100000000, 0, -271)]), 0, (("kernel/vmvalues.mli", 42, 1176, 1178), ("kernel/vmvalues.mli", 42, 1176, 1210), 0), 0, Tag1 ("Vmvalues", 24)); (("Const_uint", 482), ([(Tag3 (Tag1 ((Tag2 ("Uint63")), "t"), 0, (0)), 100000000, 0, -272)]), 0, (("kernel/vmvalues.mli", 43, 1211, 1213), ("kernel/vmvalues.mli", 43, 1211, 1237), 0), 0, Tag1 ("Vmvalues", 25)); (("Const_float", 530), ([(Tag3 (Tag1 ((Tag2 ("Float64")), "t"), 0, (0)), 100000000, 0, -273)]), 0, (("kernel/vmvalues.mli", 44, 1238, 1240), ("kernel/vmvalues.mli", 44, 1238, 1266), 0), 0, Tag1 ("Vmvalues", 26))], 0), 1, 0, 0, 0, 0, 0, (("kernel/vmvalues.mli", 37, 1039, 1039), ("kernel/vmvalues.mli", 44, 1238, 1266), 0), 0, 0, 0, Tag1 ("Vmvalues", 19)), 1, 0); (("pp_struct_const", 816), ((Tag1 (0, (Tag3 ((("structured_constant", 815)), 0, (0)), 100000000, 0, -266), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -265), 0), 100000000, 0, -264), 0, (("kernel/vmvalues.mli", 46, 1268, 1268), ("kernel/vmvalues.mli", 46, 1268, 1317), 0), 0, Tag1 ("Vmvalues", 27)), 0); Tag1 (("reloc_table", 817), (0, 0, 0, 1, ((Tag3 ((Tag3 ("array", 8)), [(Tag2 ([(Tag3 ((("tag", 807)), 0, (0)), 100000000, 0, -262); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -263)]), 100000000, 0, -261)], (0)), 100000000, 0, -260)), 0, 0, 0, 0, (("kernel/vmvalues.mli", 48, 1319, 1319), ("kernel/vmvalues.mli", 48, 1319, 1355), 0), 0, 0, 0, Tag1 ("Vmvalues", 28)), 1, 0); Tag1 (("annot_switch", 818), (0, 0, [[(("rtbl", 654), 0, (Tag3 ((("reloc_table", 817)), 0, (0)), 100000000, 0, -257), (("kernel/vmvalues.mli", 51, 1377, 1382), ("kernel/vmvalues.mli", 51, 1377, 1401), 0), 0, Tag1 ("Vmvalues", 30)); (("tailcall", 655), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -258), (("kernel/vmvalues.mli", 51, 1377, 1402), ("kernel/vmvalues.mli", 51, 1377, 1418), 0), 0, Tag1 ("Vmvalues", 31)); (("max_stack_size", 656), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -259), (("kernel/vmvalues.mli", 51, 1377, 1419), ("kernel/vmvalues.mli", 51, 1377, 1439), 0), 0, Tag1 ("Vmvalues", 32))]], 1, 0, 0, 0, 0, 0, (("kernel/vmvalues.mli", 50, 1357, 1357), ("kernel/vmvalues.mli", 51, 1377, 1441), 0), 0, 0, 0, Tag1 ("Vmvalues", 29)), 1, 0); (("eq_structured_constant", 819), ((Tag1 (0, (Tag3 ((("structured_constant", 815)), 0, (0)), 100000000, 0, -256), (Tag1 (0, (Tag3 ((("structured_constant", 815)), 0, (0)), 100000000, 0, -255), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -254), 0), 100000000, 0, -253), 0), 100000000, 0, -252), 0, (("kernel/vmvalues.mli", 53, 1443, 1443), ("kernel/vmvalues.mli", 53, 1443, 1522), 0), 0, Tag1 ("Vmvalues", 33)), 0); (("hash_structured_constant", 820), ((Tag1 (0, (Tag3 ((("structured_constant", 815)), 0, (0)), 100000000, 0, -251), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -250), 0), 100000000, 0, -249), 0, (("kernel/vmvalues.mli", 54, 1523, 1523), ("kernel/vmvalues.mli", 54, 1523, 1580), 0), 0, Tag1 ("Vmvalues", 34)), 0); (("eq_annot_switch", 821), ((Tag1 (0, (Tag3 ((("annot_switch", 818)), 0, (0)), 100000000, 0, -248), (Tag1 (0, (Tag3 ((("annot_switch", 818)), 0, (0)), 100000000, 0, -247), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -246), 0), 100000000, 0, -245), 0), 100000000, 0, -244), 0, (("kernel/vmvalues.mli", 56, 1582, 1582), ("kernel/vmvalues.mli", 56, 1582, 1640), 0), 0, Tag1 ("Vmvalues", 35)), 0); (("hash_annot_switch", 822), ((Tag1 (0, (Tag3 ((("annot_switch", 818)), 0, (0)), 100000000, 0, -243), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -242), 0), 100000000, 0, -241), 0, (("kernel/vmvalues.mli", 57, 1641, 1641), ("kernel/vmvalues.mli", 57, 1641, 1684), 0), 0, Tag1 ("Vmvalues", 36)), 0); (("fun_val", 823), ((Tag1 (0, (Tag3 ((("vfun", 800)), 0, (0)), 100000000, 0, -240), (Tag3 ((("values", 796)), 0, (0)), 100000000, 0, -239), 0), 100000000, 0, -238), 0, (("kernel/vmvalues.mli", 59, 1686, 1686), ("kernel/vmvalues.mli", 59, 1686, 1714), 0), 0, Tag1 ("Vmvalues", 37)), 0); (("fix_val", 824), ((Tag1 (0, (Tag3 ((("vfix", 801)), 0, (0)), 100000000, 0, -237), (Tag3 ((("values", 796)), 0, (0)), 100000000, 0, -236), 0), 100000000, 0, -235), 0, (("kernel/vmvalues.mli", 60, 1715, 1715), ("kernel/vmvalues.mli", 60, 1715, 1743), 0), 0, Tag1 ("Vmvalues", 38)), 0); (("cofix_upd_val", 825), ((Tag1 (0, (Tag3 ((("to_update", 806)), 0, (0)), 100000000, 0, -234), (Tag3 ((("values", 796)), 0, (0)), 100000000, 0, -233), 0), 100000000, 0, -232), 0, (("kernel/vmvalues.mli", 61, 1744, 1744), ("kernel/vmvalues.mli", 61, 1744, 1783), 0), 0, Tag1 ("Vmvalues", 39)), 0); (("inj_env", 826), ((Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("values", 796)), 0, (0)), 100000000, 0, -231)], (0)), 100000000, 0, -230), (Tag3 ((("vm_env", 798)), 0, (0)), 100000000, 0, -229), 0), 100000000, 0, -228), 0, (("kernel/vmvalues.mli", 63, 1785, 1785), ("kernel/vmvalues.mli", 63, 1785, 1821), 0), 0, Tag1 ("Vmvalues", 40)), 0); (("fun_env", 827), ((Tag1 (0, (Tag3 ((("vfun", 800)), 0, (0)), 100000000, 0, -227), (Tag3 ((("vm_env", 798)), 0, (0)), 100000000, 0, -226), 0), 100000000, 0, -225), 0, (("kernel/vmvalues.mli", 64, 1822, 1822), ("kernel/vmvalues.mli", 64, 1822, 1850), 0), 0, Tag1 ("Vmvalues", 41)), 0); (("fix_env", 828), ((Tag1 (0, (Tag3 ((("vfix", 801)), 0, (0)), 100000000, 0, -224), (Tag3 ((("vm_env", 798)), 0, (0)), 100000000, 0, -223), 0), 100000000, 0, -222), 0, (("kernel/vmvalues.mli", 65, 1851, 1851), ("kernel/vmvalues.mli", 65, 1851, 1879), 0), 0, Tag1 ("Vmvalues", 42)), 0); (("cofix_env", 829), ((Tag1 (0, (Tag3 ((("vcofix", 802)), 0, (0)), 100000000, 0, -221), (Tag3 ((("vm_env", 798)), 0, (0)), 100000000, 0, -220), 0), 100000000, 0, -219), 0, (("kernel/vmvalues.mli", 66, 1880, 1880), ("kernel/vmvalues.mli", 66, 1880, 1912), 0), 0, Tag1 ("Vmvalues", 43)), 0); (("cofix_upd_env", 830), ((Tag1 (0, (Tag3 ((("to_update", 806)), 0, (0)), 100000000, 0, -218), (Tag3 ((("vm_env", 798)), 0, (0)), 100000000, 0, -217), 0), 100000000, 0, -216), 0, (("kernel/vmvalues.mli", 67, 1913, 1913), ("kernel/vmvalues.mli", 67, 1913, 1952), 0), 0, Tag1 ("Vmvalues", 44)), 0); (("fun_of_val", 831), ((Tag1 (0, (Tag3 ((("values", 796)), 0, (0)), 100000000, 0, -215), (Tag3 ((("vfun", 800)), 0, (0)), 100000000, 0, -214), 0), 100000000, 0, -213), 0, (("kernel/vmvalues.mli", 70, 2016, 2016), ("kernel/vmvalues.mli", 70, 2016, 2047), 0), 0, Tag1 ("Vmvalues", 45)), 0); (("crazy_val", 832), ((Tag3 ((("values", 796)), 0, (0)), 100000000, 0, -212), 0, (("kernel/vmvalues.mli", 72, 2049, 2049), ("kernel/vmvalues.mli", 72, 2049, 2071), 0), 0, Tag1 ("Vmvalues", 46)), 0); Tag1 (("tcode", 833), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("kernel/vmvalues.mli", 76, 2094, 2094), ("kernel/vmvalues.mli", 76, 2094, 2104), 0), 0, 0, 0, Tag1 ("Vmvalues", 47)), 1, 0); Tag1 (("vswitch", 834), (0, 0, [[(("sw_type_code", 673), 0, (Tag3 ((("tcode", 833)), 0, (0)), 100000000, 0, -207), (("kernel/vmvalues.mli", 79, 2123, 2127), ("kernel/vmvalues.mli", 79, 2123, 2148), 0), 0, Tag1 ("Vmvalues", 49)); (("sw_code", 674), 0, (Tag3 ((("tcode", 833)), 0, (0)), 100000000, 0, -208), (("kernel/vmvalues.mli", 80, 2149, 2153), ("kernel/vmvalues.mli", 80, 2149, 2169), 0), 0, Tag1 ("Vmvalues", 50)); (("sw_annot", 675), 0, (Tag3 ((("annot_switch", 818)), 0, (0)), 100000000, 0, -209), (("kernel/vmvalues.mli", 81, 2170, 2174), ("kernel/vmvalues.mli", 81, 2170, 2198), 0), 0, Tag1 ("Vmvalues", 51)); (("sw_stk", 676), 0, (Tag3 ((("vstack", 805)), 0, (0)), 100000000, 0, -210), (("kernel/vmvalues.mli", 82, 2199, 2203), ("kernel/vmvalues.mli", 82, 2199, 2219), 0), 0, Tag1 ("Vmvalues", 52)); (("sw_env", 677), 0, (Tag3 ((("vm_env", 798)), 0, (0)), 100000000, 0, -211), (("kernel/vmvalues.mli", 83, 2220, 2224), ("kernel/vmvalues.mli", 83, 2220, 2239), 0), 0, Tag1 ("Vmvalues", 53))]], 1, 0, 0, 0, 0, 0, (("kernel/vmvalues.mli", 78, 2106, 2106), ("kernel/vmvalues.mli", 84, 2240, 2243), 0), 0, 0, 0, Tag1 ("Vmvalues", 48)), 1, 0); (("mkAccuCode", 835), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -206), (Tag3 ((("tcode", 833)), 0, (0)), 100000000, 0, -205), 0), 100000000, 0, -204), (("coq_makeaccu", 1, 1, "", [0], 0)), (("kernel/vmvalues.mli", 86, 2245, 2245), ("kernel/vmvalues.mli", 86, 2245, 2296), 0), 0, Tag1 ("Vmvalues", 54)), 0); (("fun_code", 836), ((Tag1 (0, (Tag3 ((("vfun", 800)), 0, (0)), 100000000, 0, -203), (Tag3 ((("tcode", 833)), 0, (0)), 100000000, 0, -202), 0), 100000000, 0, -201), 0, (("kernel/vmvalues.mli", 88, 2298, 2298), ("kernel/vmvalues.mli", 88, 2298, 2326), 0), 0, Tag1 ("Vmvalues", 55)), 0); (("fix_code", 837), ((Tag1 (0, (Tag3 ((("vfix", 801)), 0, (0)), 100000000, 0, -200), (Tag3 ((("tcode", 833)), 0, (0)), 100000000, 0, -199), 0), 100000000, 0, -198), 0, (("kernel/vmvalues.mli", 89, 2327, 2327), ("kernel/vmvalues.mli", 89, 2327, 2355), 0), 0, Tag1 ("Vmvalues", 56)), 0); (("cofix_upd_code", 838), ((Tag1 (0, (Tag3 ((("to_update", 806)), 0, (0)), 100000000, 0, -197), (Tag3 ((("tcode", 833)), 0, (0)), 100000000, 0, -196), 0), 100000000, 0, -195), 0, (("kernel/vmvalues.mli", 90, 2356, 2356), ("kernel/vmvalues.mli", 90, 2356, 2395), 0), 0, Tag1 ("Vmvalues", 57)), 0); Tag1 (("id_key", 839), (0, 0, Tag1 ([(("ConstKey", 683), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -191)]), 0, (("kernel/vmvalues.mli", 93, 2411, 2411), ("kernel/vmvalues.mli", 93, 2411, 2435), 0), 0, Tag1 ("Vmvalues", 59)); (("VarKey", 702), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -192)]), 0, (("kernel/vmvalues.mli", 94, 2436, 2436), ("kernel/vmvalues.mli", 94, 2436, 2452), 0), 0, Tag1 ("Vmvalues", 60)); (("RelKey", 719), ([(Tag3 (Tag1 ((Tag2 ("Int")), "t"), 0, (0)), 100000000, 0, -193)]), 0, (("kernel/vmvalues.mli", 95, 2453, 2453), ("kernel/vmvalues.mli", 95, 2453, 2470), 0), 0, Tag1 ("Vmvalues", 61)); (("EvarKey", 729), ([(Tag3 (Tag1 ((Tag2 ("Evar")), "t"), 0, (0)), 100000000, 0, -194)]), 0, (("kernel/vmvalues.mli", 96, 2471, 2471), ("kernel/vmvalues.mli", 96, 2471, 2490), 0), 0, Tag1 ("Vmvalues", 62))], 0), 1, 0, 0, 0, 0, 0, (("kernel/vmvalues.mli", 92, 2397, 2397), ("kernel/vmvalues.mli", 96, 2471, 2490), 0), 0, 0, 0, Tag1 ("Vmvalues", 58)), 1, 0); (("eq_id_key", 840), ((Tag1 (0, (Tag3 ((("id_key", 839)), 0, (0)), 100000000, 0, -190), (Tag1 (0, (Tag3 ((("id_key", 839)), 0, (0)), 100000000, 0, -189), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -188), 0), 100000000, 0, -187), 0), 100000000, 0, -186), 0, (("kernel/vmvalues.mli", 98, 2492, 2492), ("kernel/vmvalues.mli", 98, 2492, 2532), 0), 0, Tag1 ("Vmvalues", 63)), 0); Tag1 (("atom", 841), (0, 0, Tag1 ([(("Aid", 741), ([(Tag3 ((("id_key", 839)), 0, (0)), 100000000, 0, -183)]), 0, (("kernel/vmvalues.mli", 101, 2546, 2548), ("kernel/vmvalues.mli", 101, 2546, 2563), 0), 0, Tag1 ("Vmvalues", 65)); (("Aind", 742), ([(Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -184)]), 0, (("kernel/vmvalues.mli", 102, 2564, 2566), ("kernel/vmvalues.mli", 102, 2564, 2585), 0), 0, Tag1 ("Vmvalues", 66)); (("Asort", 743), ([(Tag3 (Tag1 ((Tag2 ("Sorts")), "t"), 0, (0)), 100000000, 0, -185)]), 0, (("kernel/vmvalues.mli", 103, 2586, 2588), ("kernel/vmvalues.mli", 103, 2586, 2606), 0), 0, Tag1 ("Vmvalues", 67))], 0), 1, 0, 0, 0, 0, 0, (("kernel/vmvalues.mli", 100, 2534, 2534), ("kernel/vmvalues.mli", 103, 2586, 2606), 0), 0, 0, 0, Tag1 ("Vmvalues", 64)), 1, 0); (("get_atom_rel", 842), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -182), (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("atom", 841)), 0, (0)), 100000000, 0, -181)], (0)), 100000000, 0, -180), 0), 100000000, 0, -179), 0, (("kernel/vmvalues.mli", 105, 2608, 2608), ("kernel/vmvalues.mli", 105, 2608, 2645), 0), 0, Tag1 ("Vmvalues", 68)), 0); Tag1 (("zipper", 843), (0, 0, Tag1 ([(("Zapp", 746), ([(Tag3 ((("arguments", 804)), 0, (0)), 100000000, 0, -174)]), 0, (("kernel/vmvalues.mli", 111, 2705, 2707), ("kernel/vmvalues.mli", 111, 2705, 2726), 0), 0, Tag1 ("Vmvalues", 70)); (("Zfix", 747), ([(Tag3 ((("vfix", 801)), 0, (0)), 100000000, 0, -175); (Tag3 ((("arguments", 804)), 0, (0)), 100000000, 0, -176)]), 0, (("kernel/vmvalues.mli", 112, 2727, 2729), ("kernel/vmvalues.mli", 112, 2727, 2755), 0), 0, Tag1 ("Vmvalues", 71)); (("Zswitch", 748), ([(Tag3 ((("vswitch", 834)), 0, (0)), 100000000, 0, -177)]), 0, (("kernel/vmvalues.mli", 113, 2779, 2781), ("kernel/vmvalues.mli", 113, 2779, 2801), 0), 0, Tag1 ("Vmvalues", 72)); (("Zproj", 749), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -178)]), 0, (("kernel/vmvalues.mli", 114, 2802, 2804), ("kernel/vmvalues.mli", 114, 2802, 2818), 0), 0, Tag1 ("Vmvalues", 73))], 0), 1, 0, 0, 0, 0, 0, (("kernel/vmvalues.mli", 110, 2691, 2691), ("kernel/vmvalues.mli", 114, 2802, 2818), 0), 0, 0, 0, Tag1 ("Vmvalues", 69)), 1, 0); Tag1 (("stack", 844), (0, 0, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("zipper", 843)), 0, (0)), 100000000, 0, -173)], (0)), 100000000, 0, -172)), 0, 0, 0, 0, (("kernel/vmvalues.mli", 116, 2872, 2872), ("kernel/vmvalues.mli", 116, 2872, 2896), 0), 0, 0, 0, Tag1 ("Vmvalues", 74)), 1, 0); Tag1 (("accumulator", 845), (0, 0, 0, 1, ((Tag2 ([(Tag3 ((("atom", 841)), 0, (0)), 100000000, 0, -170); (Tag3 ((("stack", 844)), 0, (0)), 100000000, 0, -171)]), 100000000, 0, -169)), 0, 0, 0, 0, (("kernel/vmvalues.mli", 118, 2898, 2898), ("kernel/vmvalues.mli", 118, 2898, 2929), 0), 0, 0, 0, Tag1 ("Vmvalues", 75)), 1, 0); Tag1 (("kind", 846), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Values")), "kind"), [(Tag3 ((("values", 796)), 0, (0)), 100000000, 0, -155); (Tag3 ((("accumulator", 845)), 0, (0)), 100000000, 0, -156); (Tag3 ((("vfun", 800)), 0, (0)), 100000000, 0, -157); (Tag3 ((("vprod", 799)), 0, (0)), 100000000, 0, -158); (Tag2 ([(Tag3 ((("vfix", 801)), 0, (0)), 100000000, 0, -160); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("arguments", 804)), 0, (0)), 100000000, 0, -162)], (0)), 100000000, 0, -161)]), 100000000, 0, -159); (Tag2 ([(Tag3 ((("vcofix", 802)), 0, (0)), 100000000, 0, -164); (Tag3 ((("to_update", 806)), 0, (0)), 100000000, 0, -165); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("arguments", 804)), 0, (0)), 100000000, 0, -167)], (0)), 100000000, 0, -166)]), 100000000, 0, -163); (Tag3 ((("vblock", 803)), 0, (0)), 100000000, 0, -168)], (0)), 100000000, 0, -154)), 0, 0, 0, 0, (("kernel/vmvalues.mli", 120, 2931, 2931), ("kernel/vmvalues.mli", 120, 2931, 3061), 0), 0, 0, 0, Tag1 ("Vmvalues", 76)), 1, 0); (("pr_atom", 847), ((Tag1 (0, (Tag3 ((("atom", 841)), 0, (0)), 100000000, 0, -153), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -152), 0), 100000000, 0, -151), 0, (("kernel/vmvalues.mli", 124, 3099, 3099), ("kernel/vmvalues.mli", 124, 3099, 3125), 0), 0, Tag1 ("Vmvalues", 77)), 0); (("pr_kind", 848), ((Tag1 (0, (Tag3 ((("kind", 846)), 0, (0)), 100000000, 0, -150), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -149), 0), 100000000, 0, -148), 0, (("kernel/vmvalues.mli", 125, 3126, 3126), ("kernel/vmvalues.mli", 125, 3126, 3152), 0), 0, Tag1 ("Vmvalues", 78)), 0); (("pr_stack", 849), ((Tag1 (0, (Tag3 ((("stack", 844)), 0, (0)), 100000000, 0, -147), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -146), 0), 100000000, 0, -145), 0, (("kernel/vmvalues.mli", 126, 3153, 3153), ("kernel/vmvalues.mli", 126, 3153, 3181), 0), 0, Tag1 ("Vmvalues", 79)), 0); (("val_of_str_const", 850), ((Tag1 (0, (Tag3 ((("structured_constant", 815)), 0, (0)), 100000000, 0, -144), (Tag3 ((("values", 796)), 0, (0)), 100000000, 0, -143), 0), 100000000, 0, -142), 0, (("kernel/vmvalues.mli", 130, 3204, 3204), ("kernel/vmvalues.mli", 130, 3204, 3256), 0), 0, Tag1 ("Vmvalues", 80)), 0); (("val_of_rel", 851), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -141), (Tag3 ((("values", 796)), 0, (0)), 100000000, 0, -140), 0), 100000000, 0, -139), 0, (("kernel/vmvalues.mli", 131, 3257, 3257), ("kernel/vmvalues.mli", 131, 3257, 3287), 0), 0, Tag1 ("Vmvalues", 81)), 0); (("val_of_named", 852), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -138), (Tag3 ((("values", 796)), 0, (0)), 100000000, 0, -137), 0), 100000000, 0, -136), 0, (("kernel/vmvalues.mli", 132, 3288, 3288), ("kernel/vmvalues.mli", 132, 3288, 3321), 0), 0, Tag1 ("Vmvalues", 82)), 0); (("val_of_constant", 853), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -135), (Tag3 ((("values", 796)), 0, (0)), 100000000, 0, -134), 0), 100000000, 0, -133), 0, (("kernel/vmvalues.mli", 133, 3322, 3322), ("kernel/vmvalues.mli", 133, 3322, 3364), 0), 0, Tag1 ("Vmvalues", 83)), 0); (("val_of_evar", 854), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evar")), "t"), 0, (0)), 100000000, 0, -132), (Tag3 ((("values", 796)), 0, (0)), 100000000, 0, -131), 0), 100000000, 0, -130), 0, (("kernel/vmvalues.mli", 134, 3365, 3365), ("kernel/vmvalues.mli", 134, 3365, 3399), 0), 0, Tag1 ("Vmvalues", 84)), 0); (("val_of_proj", 855), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -129), (Tag1 (0, (Tag3 ((("values", 796)), 0, (0)), 100000000, 0, -128), (Tag3 ((("values", 796)), 0, (0)), 100000000, 0, -127), 0), 100000000, 0, -126), 0), 100000000, 0, -125), 0, (("kernel/vmvalues.mli", 135, 3400, 3400), ("kernel/vmvalues.mli", 135, 3400, 3441), 0), 0, Tag1 ("Vmvalues", 85)), 0); (("val_of_atom", 856), ((Tag1 (0, (Tag3 ((("atom", 841)), 0, (0)), 100000000, 0, -124), (Tag3 ((("values", 796)), 0, (0)), 100000000, 0, -123), 0), 100000000, 0, -122), 0, (("kernel/vmvalues.mli", 136, 3442, 3442), ("kernel/vmvalues.mli", 136, 3442, 3474), 0), 0, Tag1 ("Vmvalues", 86)), 0); (("val_of_int", 857), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -121), (Tag3 ((("structured_values", 797)), 0, (0)), 100000000, 0, -120), 0), 100000000, 0, -119), 0, (("kernel/vmvalues.mli", 137, 3475, 3475), ("kernel/vmvalues.mli", 137, 3475, 3516), 0), 0, Tag1 ("Vmvalues", 87)), 0); (("val_of_block", 858), ((Tag1 (0, (Tag3 ((("tag", 807)), 0, (0)), 100000000, 0, -118), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("structured_values", 797)), 0, (0)), 100000000, 0, -117)], (0)), 100000000, 0, -116), (Tag3 ((("structured_values", 797)), 0, (0)), 100000000, 0, -115), 0), 100000000, 0, -114), 0), 100000000, 0, -113), 0, (("kernel/vmvalues.mli", 138, 3517, 3517), ("kernel/vmvalues.mli", 138, 3517, 3587), 0), 0, Tag1 ("Vmvalues", 88)), 0); (("val_of_uint", 859), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Uint63")), "t"), 0, (0)), 100000000, 0, -112), (Tag3 ((("structured_values", 797)), 0, (0)), 100000000, 0, -111), 0), 100000000, 0, -110), 0, (("kernel/vmvalues.mli", 139, 3588, 3588), ("kernel/vmvalues.mli", 139, 3588, 3635), 0), 0, Tag1 ("Vmvalues", 89)), 0); (("val_of_annot_switch", 860), ((Tag1 (0, (Tag3 ((("annot_switch", 818)), 0, (0)), 100000000, 0, -109), (Tag3 ((("values", 796)), 0, (0)), 100000000, 0, -108), 0), 100000000, 0, -107), (("%identity", 1, 1, "", [0], 0)), (("kernel/vmvalues.mli", 141, 3637, 3637), ("kernel/vmvalues.mli", 141, 3637, 3704), 0), 0, Tag1 ("Vmvalues", 90)), 0); (("whd_val", 861), ((Tag1 (0, (Tag3 ((("values", 796)), 0, (0)), 100000000, 0, -106), (Tag3 ((("kind", 846)), 0, (0)), 100000000, 0, -105), 0), 100000000, 0, -104), 0, (("kernel/vmvalues.mli", 145, 3726, 3726), ("kernel/vmvalues.mli", 145, 3726, 3754), 0), 0, Tag1 ("Vmvalues", 91)), 0); (("uni_lvl_val", 862), ((Tag1 (0, (Tag3 ((("values", 796)), 0, (0)), 100000000, 0, -103), (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Level"), "t"), 0, (0)), 100000000, 0, -102), 0), 100000000, 0, -101), 0, (("kernel/vmvalues.mli", 146, 3755, 3755), ("kernel/vmvalues.mli", 146, 3755, 3795), 0), 0, Tag1 ("Vmvalues", 92)), 0); (("nargs", 863), ((Tag1 (0, (Tag3 ((("arguments", 804)), 0, (0)), 100000000, 0, -100), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -99), 0), 100000000, 0, -98), 0, (("kernel/vmvalues.mli", 150, 3815, 3815), ("kernel/vmvalues.mli", 150, 3815, 3843), 0), 0, Tag1 ("Vmvalues", 93)), 0); (("arg", 864), ((Tag1 (0, (Tag3 ((("arguments", 804)), 0, (0)), 100000000, 0, -97), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -96), (Tag3 ((("values", 796)), 0, (0)), 100000000, 0, -95), 0), 100000000, 0, -94), 0), 100000000, 0, -93), 0, (("kernel/vmvalues.mli", 151, 3844, 3844), ("kernel/vmvalues.mli", 151, 3844, 3880), 0), 0, Tag1 ("Vmvalues", 94)), 0); (("dom", 865), ((Tag1 (0, (Tag3 ((("vprod", 799)), 0, (0)), 100000000, 0, -92), (Tag3 ((("values", 796)), 0, (0)), 100000000, 0, -91), 0), 100000000, 0, -90), 0, (("kernel/vmvalues.mli", 155, 3898, 3898), ("kernel/vmvalues.mli", 155, 3898, 3923), 0), 0, Tag1 ("Vmvalues", 95)), 0); (("codom", 866), ((Tag1 (0, (Tag3 ((("vprod", 799)), 0, (0)), 100000000, 0, -89), (Tag3 ((("vfun", 800)), 0, (0)), 100000000, 0, -88), 0), 100000000, 0, -87), 0, (("kernel/vmvalues.mli", 156, 3924, 3924), ("kernel/vmvalues.mli", 156, 3924, 3949), 0), 0, Tag1 ("Vmvalues", 96)), 0); (("closure_arity", 867), ((Tag1 (0, (Tag3 ((("vfun", 800)), 0, (0)), 100000000, 0, -86), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -85), 0), 100000000, 0, -84), (("coq_closure_arity", 1, 1, "", [0], 0)), (("kernel/vmvalues.mli", 159, 3962, 3962), ("kernel/vmvalues.mli", 159, 3962, 4020), 0), 0, Tag1 ("Vmvalues", 97)), 0); (("current_fix", 868), ((Tag1 (0, (Tag3 ((("vfix", 801)), 0, (0)), 100000000, 0, -83), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -82), 0), 100000000, 0, -81), 0, (("kernel/vmvalues.mli", 163, 4034, 4034), ("kernel/vmvalues.mli", 163, 4034, 4063), 0), 0, Tag1 ("Vmvalues", 98)), 0); (("check_fix", 869), ((Tag1 (0, (Tag3 ((("vfix", 801)), 0, (0)), 100000000, 0, -80), (Tag1 (0, (Tag3 ((("vfix", 801)), 0, (0)), 100000000, 0, -79), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -78), 0), 100000000, 0, -77), 0), 100000000, 0, -76), 0, (("kernel/vmvalues.mli", 164, 4064, 4064), ("kernel/vmvalues.mli", 164, 4064, 4100), 0), 0, Tag1 ("Vmvalues", 99)), 0); (("rec_args", 870), ((Tag1 (0, (Tag3 ((("vfix", 801)), 0, (0)), 100000000, 0, -75), (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -74)], (0)), 100000000, 0, -73), 0), 100000000, 0, -72), 0, (("kernel/vmvalues.mli", 165, 4101, 4101), ("kernel/vmvalues.mli", 165, 4101, 4133), 0), 0, Tag1 ("Vmvalues", 100)), 0); (("first_fix", 871), ((Tag1 (0, (Tag3 ((("vfix", 801)), 0, (0)), 100000000, 0, -71), (Tag3 ((("vfix", 801)), 0, (0)), 100000000, 0, -70), 0), 100000000, 0, -69), 0, (("kernel/vmvalues.mli", 166, 4134, 4134), ("kernel/vmvalues.mli", 166, 4134, 4162), 0), 0, Tag1 ("Vmvalues", 101)), 0); (("fix_types", 872), ((Tag1 (0, (Tag3 ((("vfix", 801)), 0, (0)), 100000000, 0, -68), (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("tcode", 833)), 0, (0)), 100000000, 0, -67)], (0)), 100000000, 0, -66), 0), 100000000, 0, -65), 0, (("kernel/vmvalues.mli", 167, 4163, 4163), ("kernel/vmvalues.mli", 167, 4163, 4198), 0), 0, Tag1 ("Vmvalues", 102)), 0); (("cofix_types", 873), ((Tag1 (0, (Tag3 ((("vcofix", 802)), 0, (0)), 100000000, 0, -64), (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("tcode", 833)), 0, (0)), 100000000, 0, -63)], (0)), 100000000, 0, -62), 0), 100000000, 0, -61), 0, (("kernel/vmvalues.mli", 168, 4199, 4199), ("kernel/vmvalues.mli", 168, 4199, 4238), 0), 0, Tag1 ("Vmvalues", 103)), 0); (("mk_fix_body", 874), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -60), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -59), (Tag1 (0, (Tag3 ((("vfix", 801)), 0, (0)), 100000000, 0, -58), (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("vfun", 800)), 0, (0)), 100000000, 0, -57)], (0)), 100000000, 0, -56), 0), 100000000, 0, -55), 0), 100000000, 0, -54), 0), 100000000, 0, -53), 0, (("kernel/vmvalues.mli", 169, 4239, 4239), ("kernel/vmvalues.mli", 169, 4239, 4289), 0), 0, Tag1 ("Vmvalues", 104)), 0); (("current_cofix", 875), ((Tag1 (0, (Tag3 ((("vcofix", 802)), 0, (0)), 100000000, 0, -52), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -51), 0), 100000000, 0, -50), 0, (("kernel/vmvalues.mli", 173, 4305, 4305), ("kernel/vmvalues.mli", 173, 4305, 4338), 0), 0, Tag1 ("Vmvalues", 105)), 0); (("check_cofix", 876), ((Tag1 (0, (Tag3 ((("vcofix", 802)), 0, (0)), 100000000, 0, -49), (Tag1 (0, (Tag3 ((("vcofix", 802)), 0, (0)), 100000000, 0, -48), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -47), 0), 100000000, 0, -46), 0), 100000000, 0, -45), 0, (("kernel/vmvalues.mli", 174, 4339, 4339), ("kernel/vmvalues.mli", 174, 4339, 4381), 0), 0, Tag1 ("Vmvalues", 106)), 0); (("mk_cofix_body", 877), ((Tag1 (0, (Tag1 (0, (Tag3 ((("vfun", 800)), 0, (0)), 100000000, 0, -44), (Tag1 (0, (Tag3 ((("vstack", 805)), 0, (0)), 100000000, 0, -43), (Tag3 ((("values", 796)), 0, (0)), 100000000, 0, -42), 0), 100000000, 0, -41), 0), 100000000, 0, -40), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -39), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -38), (Tag1 (0, (Tag3 ((("vcofix", 802)), 0, (0)), 100000000, 0, -37), (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("values", 796)), 0, (0)), 100000000, 0, -36)], (0)), 100000000, 0, -35), 0), 100000000, 0, -34), 0), 100000000, 0, -33), 0), 100000000, 0, -32), 0), 100000000, 0, -31), 0, (("kernel/vmvalues.mli", 175, 4382, 4382), ("kernel/vmvalues.mli", 175, 4382, 4468), 0), 0, Tag1 ("Vmvalues", 107)), 0); (("btag", 878), ((Tag1 (0, (Tag3 ((("vblock", 803)), 0, (0)), 100000000, 0, -30), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -29), 0), 100000000, 0, -28), 0, (("kernel/vmvalues.mli", 179, 4484, 4484), ("kernel/vmvalues.mli", 179, 4484, 4509), 0), 0, Tag1 ("Vmvalues", 108)), 0); (("bsize", 879), ((Tag1 (0, (Tag3 ((("vblock", 803)), 0, (0)), 100000000, 0, -27), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -26), 0), 100000000, 0, -25), 0, (("kernel/vmvalues.mli", 180, 4510, 4510), ("kernel/vmvalues.mli", 180, 4510, 4535), 0), 0, Tag1 ("Vmvalues", 109)), 0); (("bfield", 880), ((Tag1 (0, (Tag3 ((("vblock", 803)), 0, (0)), 100000000, 0, -24), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -23), (Tag3 ((("values", 796)), 0, (0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0), 100000000, 0, -20), 0, (("kernel/vmvalues.mli", 181, 4536, 4536), ("kernel/vmvalues.mli", 181, 4536, 4572), 0), 0, Tag1 ("Vmvalues", 110)), 0); (("check_switch", 881), ((Tag1 (0, (Tag3 ((("vswitch", 834)), 0, (0)), 100000000, 0, -19), (Tag1 (0, (Tag3 ((("vswitch", 834)), 0, (0)), 100000000, 0, -18), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -17), 0), 100000000, 0, -16), 0), 100000000, 0, -15), 0, (("kernel/vmvalues.mli", 185, 4589, 4589), ("kernel/vmvalues.mli", 185, 4589, 4634), 0), 0, Tag1 ("Vmvalues", 111)), 0); (("branch_arg", 882), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -14), (Tag1 (0, (Tag2 ([(Tag3 ((("tag", 807)), 0, (0)), 100000000, 0, -12); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -13)]), 100000000, 0, -11), (Tag3 ((("values", 796)), 0, (0)), 100000000, 0, -10), 0), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("kernel/vmvalues.mli", 186, 4635, 4635), ("kernel/vmvalues.mli", 186, 4635, 4678), 0), 0, Tag1 ("Vmvalues", 112)), 0); (("parray_make", 883), ((Tag3 ((("values", 796)), 0, (0)), 100000000, 0, -7), 0, (("kernel/vmvalues.mli", 189, 4759, 4759), ("kernel/vmvalues.mli", 189, 4759, 4783), 0), 0, Tag1 ("Vmvalues", 113)), 0); (("parray_get", 884), ((Tag3 ((("values", 796)), 0, (0)), 100000000, 0, -6), 0, (("kernel/vmvalues.mli", 190, 4784, 4784), ("kernel/vmvalues.mli", 190, 4784, 4807), 0), 0, Tag1 ("Vmvalues", 114)), 0); (("parray_get_default", 885), ((Tag3 ((("values", 796)), 0, (0)), 100000000, 0, -5), 0, (("kernel/vmvalues.mli", 191, 4808, 4808), ("kernel/vmvalues.mli", 191, 4808, 4839), 0), 0, Tag1 ("Vmvalues", 115)), 0); (("parray_set", 886), ((Tag3 ((("values", 796)), 0, (0)), 100000000, 0, -4), 0, (("kernel/vmvalues.mli", 192, 4840, 4840), ("kernel/vmvalues.mli", 192, 4840, 4863), 0), 0, Tag1 ("Vmvalues", 116)), 0); (("parray_copy", 887), ((Tag3 ((("values", 796)), 0, (0)), 100000000, 0, -3), 0, (("kernel/vmvalues.mli", 193, 4864, 4864), ("kernel/vmvalues.mli", 193, 4864, 4888), 0), 0, Tag1 ("Vmvalues", 117)), 0); (("parray_length", 888), ((Tag3 ((("values", 796)), 0, (0)), 100000000, 0, -2), 0, (("kernel/vmvalues.mli", 194, 4889, 4889), ("kernel/vmvalues.mli", 194, 4889, 4915), 0), 0, Tag1 ("Vmvalues", 118)), 0)], "Vmvalues", [("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])

val parray_length : values

type t =
  Base__.Import.Stdlib.Lexing.position = {
  pos_fname : string;
  pos_lnum : int;
  pos_bol : int;
  pos_cnum : int;
}
val hash_fold_t : t Base__Ppx_hash_lib.hash_fold
val hash : t -> Base__Ppx_hash_lib.Std.Hash.hash_value
val sexp_of_t : t -> Sexplib0.Sexp.t
val ( >= ) : t -> t -> bool
val ( <= ) : t -> t -> bool
val ( = ) : t -> t -> bool
val ( > ) : t -> t -> bool
val ( < ) : t -> t -> bool
val ( <> ) : t -> t -> bool
val equal : t -> t -> bool
val compare : t -> t -> int
val min : t -> t -> t
val max : t -> t -> t
val ascending : t -> t -> int
val descending : t -> t -> int
val between : t -> low:t -> high:t -> bool
val clamp_exn : t -> min:t -> max:t -> t
val clamp : t -> min:t -> max:t -> t Base__.Or_error.t
type comparator_witness
val comparator : (t, comparator_witness) Base__Comparator.comparator
val to_string : t -> string("DEBUG:rule", [Tag1 (("t", 1667), (0, 0, [[(("pos_fname", 783), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -106), (("src/source_code_position.mli", 11, 365, 369), ("src/source_code_position.mli", 12, 388, 391), 0), 0, Tag1 ("Base__Source_code_position", 1)); (("pos_lnum", 784), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -107), (("src/source_code_position.mli", 12, 388, 392), ("src/source_code_position.mli", 13, 407, 410), 0), 0, Tag1 ("Base__Source_code_position", 2)); (("pos_bol", 785), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -108), (("src/source_code_position.mli", 13, 407, 411), ("src/source_code_position.mli", 14, 425, 428), 0), 0, Tag1 ("Base__Source_code_position", 3)); (("pos_cnum", 786), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -109), (("src/source_code_position.mli", 14, 425, 429), ("src/source_code_position.mli", 14, 425, 443), 0), 0, Tag1 ("Base__Source_code_position", 4))]], 1, ((Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Import"), "Stdlib"), "Lexing"), "position"), 0, (0)), 100000000, 0, -105)), 0, 0, 0, 0, (("src/source_code_position.mli", 10, 331, 331), ("src/source_code_position.mli", 16, 448, 481), 0), [(("deriving_inline", (("src/source_code_position.mli", 16, 448, 451), ("src/source_code_position.mli", 16, 448, 466), 0)), ([([(Tag8 ([(((("hash"), (("src/source_code_position.mli", 16, 448, 467), ("src/source_code_position.mli", 16, 448, 471), 0))), (("src/source_code_position.mli", 16, 448, 467), ("src/source_code_position.mli", 16, 448, 471), 0), 0, 0); (((("sexp_of"), (("src/source_code_position.mli", 16, 448, 473), ("src/source_code_position.mli", 16, 448, 480), 0))), (("src/source_code_position.mli", 16, 448, 473), ("src/source_code_position.mli", 16, 448, 480), 0), 0, 0)]), (("src/source_code_position.mli", 16, 448, 467), ("src/source_code_position.mli", 16, 448, 480), 0), 0, 0)], (("src/source_code_position.mli", 16, 448, 467), ("src/source_code_position.mli", 16, 448, 480), 0))]), (("src/source_code_position.mli", 16, 448, 448), ("src/source_code_position.mli", 16, 448, 481), 0))], 0, 0, Tag1 ("Base__Source_code_position", 0)), 1, 0); (("hash_fold_t", 1668), ((Tag3 (Tag1 ((Tag2 ("Base__Ppx_hash_lib")), "hash_fold"), [(Tag3 ((("t", 1667)), 0, (0)), 100000000, 0, -104)], (0)), 100000000, 0, -103), 0, (("src/source_code_position.mli", 18, 483, 491), ("src/source_code_position.mli", 18, 483, 531), 0), 0, Tag1 ("Base__Ppx_hash_lib", 4)), 0); (("hash", 1669), ((Tag1 (0, (Tag3 ((("t", 1667)), 0, (0)), 100000000, 0, -102), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__Ppx_hash_lib")), "Std"), "Hash"), "hash_value"), 0, (0)), 100000000, 0, -101), 0), 100000000, 0, -100), 0, (("src/source_code_position.mli", 18, 483, 491), ("src/source_code_position.mli", 18, 483, 531), 0), 0, Tag1 ("Base__Ppx_hash_lib", 5)), 0); (("sexp_of_t", 1670), ((Tag1 (0, (Tag3 ((("t", 1667)), 0, (0)), 100000000, 0, -99), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -98), 0), 100000000, 0, -97), 0, (("src/source_code_position.mli", 20, 533, 533), ("src/source_code_position.mli", 20, 533, 569), 0), 0, Tag1 ("Base__Source_code_position", 6)), 0); ((">=", 1671), ((Tag1 (0, (Tag3 ((("t", 1667)), 0, (0)), 100000000, 0, -96), (Tag1 (0, (Tag3 ((("t", 1667)), 0, (0)), 100000000, 0, -95), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -94), 0), 100000000, 0, -93), 0), 100000000, 0, -92), 0, (("src/source_code_position.mli", 24, 581, 589), ("src/source_code_position.mli", 24, 581, 618), 0), 0, Tag1 ("Base__Comparisons", 1)), 0); (("<=", 1672), ((Tag1 (0, (Tag3 ((("t", 1667)), 0, (0)), 100000000, 0, -91), (Tag1 (0, (Tag3 ((("t", 1667)), 0, (0)), 100000000, 0, -90), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -89), 0), 100000000, 0, -88), 0), 100000000, 0, -87), 0, (("src/source_code_position.mli", 24, 581, 589), ("src/source_code_position.mli", 24, 581, 618), 0), 0, Tag1 ("Base__Comparisons", 2)), 0); (("=", 1673), ((Tag1 (0, (Tag3 ((("t", 1667)), 0, (0)), 100000000, 0, -86), (Tag1 (0, (Tag3 ((("t", 1667)), 0, (0)), 100000000, 0, -85), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -84), 0), 100000000, 0, -83), 0), 100000000, 0, -82), 0, (("src/source_code_position.mli", 24, 581, 589), ("src/source_code_position.mli", 24, 581, 618), 0), 0, Tag1 ("Base__Comparisons", 3)), 0); ((">", 1674), ((Tag1 (0, (Tag3 ((("t", 1667)), 0, (0)), 100000000, 0, -81), (Tag1 (0, (Tag3 ((("t", 1667)), 0, (0)), 100000000, 0, -80), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -79), 0), 100000000, 0, -78), 0), 100000000, 0, -77), 0, (("src/source_code_position.mli", 24, 581, 589), ("src/source_code_position.mli", 24, 581, 618), 0), 0, Tag1 ("Base__Comparisons", 4)), 0); (("<", 1675), ((Tag1 (0, (Tag3 ((("t", 1667)), 0, (0)), 100000000, 0, -76), (Tag1 (0, (Tag3 ((("t", 1667)), 0, (0)), 100000000, 0, -75), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -74), 0), 100000000, 0, -73), 0), 100000000, 0, -72), 0, (("src/source_code_position.mli", 24, 581, 589), ("src/source_code_position.mli", 24, 581, 618), 0), 0, Tag1 ("Base__Comparisons", 5)), 0); (("<>", 1676), ((Tag1 (0, (Tag3 ((("t", 1667)), 0, (0)), 100000000, 0, -71), (Tag1 (0, (Tag3 ((("t", 1667)), 0, (0)), 100000000, 0, -70), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -69), 0), 100000000, 0, -68), 0), 100000000, 0, -67), 0, (("src/source_code_position.mli", 24, 581, 589), ("src/source_code_position.mli", 24, 581, 618), 0), 0, Tag1 ("Base__Comparisons", 6)), 0); (("equal", 1677), ((Tag1 (0, (Tag3 ((("t", 1667)), 0, (0)), 100000000, 0, -66), (Tag1 (0, (Tag3 ((("t", 1667)), 0, (0)), 100000000, 0, -65), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -64), 0), 100000000, 0, -63), 0), 100000000, 0, -62), 0, (("src/source_code_position.mli", 24, 581, 589), ("src/source_code_position.mli", 24, 581, 618), 0), 0, Tag1 ("Base__Comparisons", 8)), 0); (("compare", 1678), ((Tag1 (0, (Tag3 ((("t", 1667)), 0, (0)), 100000000, 0, -61), (Tag1 (0, (Tag3 ((("t", 1667)), 0, (0)), 100000000, 0, -60), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -59), 0), 100000000, 0, -58), 0), 100000000, 0, -57), 0, (("src/source_code_position.mli", 24, 581, 589), ("src/source_code_position.mli", 24, 581, 618), 0), 0, Tag1 ("Base__Comparisons", 9)), 0); (("min", 1679), ((Tag1 (0, (Tag3 ((("t", 1667)), 0, (0)), 100000000, 0, -56), (Tag1 (0, (Tag3 ((("t", 1667)), 0, (0)), 100000000, 0, -55), (Tag3 ((("t", 1667)), 0, (0)), 100000000, 0, -54), 0), 100000000, 0, -53), 0), 100000000, 0, -52), 0, (("src/source_code_position.mli", 24, 581, 589), ("src/source_code_position.mli", 24, 581, 618), 0), 0, Tag1 ("Base__Comparisons", 10)), 0); (("max", 1680), ((Tag1 (0, (Tag3 ((("t", 1667)), 0, (0)), 100000000, 0, -51), (Tag1 (0, (Tag3 ((("t", 1667)), 0, (0)), 100000000, 0, -50), (Tag3 ((("t", 1667)), 0, (0)), 100000000, 0, -49), 0), 100000000, 0, -48), 0), 100000000, 0, -47), 0, (("src/source_code_position.mli", 24, 581, 589), ("src/source_code_position.mli", 24, 581, 618), 0), 0, Tag1 ("Base__Comparisons", 11)), 0); (("ascending", 1681), ((Tag1 (0, (Tag3 ((("t", 1667)), 0, (0)), 100000000, 0, -46), (Tag1 (0, (Tag3 ((("t", 1667)), 0, (0)), 100000000, 0, -45), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -44), 0), 100000000, 0, -43), 0), 100000000, 0, -42), 0, (("src/source_code_position.mli", 24, 581, 589), ("src/source_code_position.mli", 24, 581, 618), 0), 0, Tag1 ("Base__Comparable_intf", 19)), 0); (("descending", 1682), ((Tag1 (0, (Tag3 ((("t", 1667)), 0, (0)), 100000000, 0, -41), (Tag1 (0, (Tag3 ((("t", 1667)), 0, (0)), 100000000, 0, -40), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -39), 0), 100000000, 0, -38), 0), 100000000, 0, -37), 0, (("src/source_code_position.mli", 24, 581, 589), ("src/source_code_position.mli", 24, 581, 618), 0), 0, Tag1 ("Base__Comparable_intf", 20)), 0); (("between", 1683), ((Tag1 (0, (Tag3 ((("t", 1667)), 0, (0)), 100000000, 0, -36), (Tag1 (("low"), (Tag3 ((("t", 1667)), 0, (0)), 100000000, 0, -35), (Tag1 (("high"), (Tag3 ((("t", 1667)), 0, (0)), 100000000, 0, -34), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -33), 0), 100000000, 0, -32), 0), 100000000, 0, -31), 0), 100000000, 0, -30), 0, (("src/source_code_position.mli", 24, 581, 589), ("src/source_code_position.mli", 24, 581, 618), 0), 0, Tag1 ("Base__Comparable_intf", 21)), 0); (("clamp_exn", 1684), ((Tag1 (0, (Tag3 ((("t", 1667)), 0, (0)), 100000000, 0, -29), (Tag1 (("min"), (Tag3 ((("t", 1667)), 0, (0)), 100000000, 0, -28), (Tag1 (("max"), (Tag3 ((("t", 1667)), 0, (0)), 100000000, 0, -27), (Tag3 ((("t", 1667)), 0, (0)), 100000000, 0, -26), 0), 100000000, 0, -25), 0), 100000000, 0, -24), 0), 100000000, 0, -23), 0, (("src/source_code_position.mli", 24, 581, 589), ("src/source_code_position.mli", 24, 581, 618), 0), 0, Tag1 ("Base__Comparable_intf", 22)), 0); (("clamp", 1685), ((Tag1 (0, (Tag3 ((("t", 1667)), 0, (0)), 100000000, 0, -22), (Tag1 (("min"), (Tag3 ((("t", 1667)), 0, (0)), 100000000, 0, -21), (Tag1 (("max"), (Tag3 ((("t", 1667)), 0, (0)), 100000000, 0, -20), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((("t", 1667)), 0, (0)), 100000000, 0, -19)], (0)), 100000000, 0, -18), 0), 100000000, 0, -17), 0), 100000000, 0, -16), 0), 100000000, 0, -15), 0, (("src/source_code_position.mli", 24, 581, 589), ("src/source_code_position.mli", 24, 581, 618), 0), 0, Tag1 ("Base__Comparable_intf", 23)), 0); Tag1 (("comparator_witness", 1686), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/source_code_position.mli", 24, 581, 589), ("src/source_code_position.mli", 24, 581, 618), 0), 0, 0, 0, Tag1 ("Base__Comparator", 5)), 1, 0); (("comparator", 1687), ((Tag3 (Tag1 ((Tag2 ("Base__Comparator")), "comparator"), [(Tag3 ((("t", 1667)), 0, (0)), 100000000, 0, -13); (Tag3 ((("comparator_witness", 1686)), 0, (0)), 100000000, 0, -14)], (0)), 100000000, 0, -12), 0, (("src/source_code_position.mli", 24, 581, 589), ("src/source_code_position.mli", 24, 581, 618), 0), 0, Tag1 ("Base__Comparator", 6)), 0); (("to_string", 1688), ((Tag1 (0, (Tag3 ((("t", 1667)), 0, (0)), 100000000, 0, -11), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10), 0), 100000000, 0, -9), 0, (("src/source_code_position.mli", 27, 685, 685), ("src/source_code_position.mli", 27, 685, 712), 0), 0, Tag1 ("Base__Source_code_position", 8)), 0); (("of_pos", 1689), ((Tag1 (0, (Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -6); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -7); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -8)]), 100000000, 0, -4), (Tag3 ((("t", 1667)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/source_code_position.mli", 30, 786, 786), ("src/source_code_position.mli", 30, 786, 828), 0), 0, Tag1 ("Base__Source_code_position", 9)), 0)], "Base__Source_code_position", [("Base__Source_code_position", ("i\235\201'\004\215\194\157\004\174X9+b\0231")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__StringLabels", ("\134F\024\226\216Is#\223\230\234\169Z\206Gc")); ("Stdlib__StdLabels", (".\193\n\229\139\017\212C-ZA\\kz-\128")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Printf", ("\215<\139]\021\142\224E\245m\198qc(W\229")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__MoreLabels", ("\248\232\248\254`<\230\241\161U\193U\1466J\238")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__ListLabels", ("*\194\012\191\020%\170\249m\002\180\178hk\205\220")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shadow_stdlib", ("\219zi\164\203\158e)\232\221\196\168\138x\142\018")); ("Sexplib0__Sexpable", ("\251${\207(\249/z\242\255\250^\141\156\210e")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv_error", ("kzv!\151~\198P\000\165\176d\007\251p\232")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Base_internalhash_types", ("0\148#2\226\223\018\135\173>!\020\237\017\255\149")); ("Base__T", ("+t\159\169\027\152\205\235\003\237\133\177\024\n6'")); ("Base__Sys0", ("\206z\231\154s\\\136\2364\131\005\014\031\152m3")); ("Base__String0", ("\212\221L\220\245\255\162P\228\224\189\216\135H\149O")); ("Base__Source_code_position0", ("_\003P6\254\029\206\005\130\136\180\019\145\230\000M")); ("Base__Sign0", ("\152\138\204\175\244\128J\165\221\165\160\150y\1305i")); ("Base__Sexp", ("\154\187\171&\209=\153[\236\250!U\174`\190T")); ("Base__Result", ("\204|\215\173FMa\2511<&\215T\194$\228")); ("Base__Printf", ("\000\196c,\214\127\226\174\220\190\253z!\242\028\250")); ("Base__Ppx_hash_lib", ("\199\141\178\193\006\209L\007^\020(\131\224sn8")); ("Base__Ppx_compare_lib", ("\243\186~\233\228\199Ah\181.\223\004e\231\129S")); ("Base__Poly0", ("\230;\143\234\255.H\132KOe7\155\\\023f")); ("Base__Or_error", ("\193\133)\bO\210\2517\168*\203\148\143\200\127\177")); ("Base__Monad_intf", ("\208\203\163\152\184O\130?\012:\168\247}\018\253\155")); ("Base__Monad", ("!\244\168\2352=\137Lm\219\129K\216\199\145\\")); ("Base__Lazy", ("@`\165\196 \235)\136ANe:p\169$\185")); ("Base__Invariant_intf", ("\213\204\238\235\236[\198\145\028\2392\015\243\177S\249")); ("Base__Invariant", ("\135\153\136\\\129SD\228\202l\255\152\139\253\015\201")); ("Base__Int0", ("N\1310\012\227\254\000\255_\222!\018\016\003\1779")); ("Base__Info_intf", ("\184\209'\173\251\219\167X|v\188]\190o5X")); ("Base__Info", ("-\011\149\203\248\030\2301\1907\1630\189\128\209\170")); ("Base__Import0", ("\156\129U\197Y[\\\153\017Ho\203\173\204\220\020")); ("Base__Import", ("\014\187\247\141\187\181\142g\176:s_,\181\219\209")); ("Base__Hash_intf", ("h\004P\218\1531G\127\212\208A\024\140\164iq")); ("Base__Hash", ("\206Rc\194\234{s3\248\165\024\162\203{\206\206")); ("Base__Globalize", ("<\243w~.\180\196t\159\193\174[\227\139\215G")); ("Base__Formatter", ("\193\149\030\140\154\1505b\162a`%\243\185'%")); ("Base__Field", ("8In\234X\202\188G\186\208$\192\175\136\214v")); ("Base__Error", ("\199\218\231n\155/\159\156\146\247\148t\237\003\t\153")); ("Base__Either0", ("!9-\011n\2077eZ\212\031c\227\029\206\t")); ("Base__Comparisons", ("\196\196Y\"{\163~)\\G/\155:\004\141;")); ("Base__Comparator", ("\002\135z7b\025&\207\t\188\239&U3R\167")); ("Base__Comparable_intf", ("\252n\002\221\246\143r\235oJ\240\151\202\211\161\254")); ("Base__Comparable", (":\134'\156u#\215\225\129\191\162\229\200\185l\012")); ("Base__Bool0", ("\177f\254p\023\143&\239\020\136\206\242~\018F\251")); ("Base__Applicative_intf", ("J\176\203\159\235N(\235\027\232\198+\224\205*A")); ("Base__Applicative", ("\157\024\176\241a\165\204\133\003s3\214\007\131\244\n")); ("Base__", ("p\252\007\139\128\163W\025+\0225\001\246|P\158"))], [(0)])

val of_pos : string * int * int * int -> t

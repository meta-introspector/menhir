type position = Errortrace.position = First | Second
type primitive_mismatch =
    Name
  | Arity
  | No_alloc of position
  | Native_name
  | Result_repr
  | Argument_repr of int
type value_mismatch =
    Primitive_mismatch of primitive_mismatch
  | Not_a_primitive
  | Type of Errortrace.moregen_error
exception Dont_match of value_mismatch
type privacy_mismatch =
    Private_type_abbreviation
  | Private_variant_type
  | Private_record_type
  | Private_extensible_variant
  | Private_row_type
type type_kind = Kind_abstract | Kind_record | Kind_variant | Kind_open
type kind_mismatch = type_kind * type_kind
type label_mismatch =
    Type of Errortrace.equality_error
  | Mutability of position
type record_change =
    (Types.label_declaration, Types.label_declaration, label_mismatch)
    Diffing_with_keys.change
type record_mismatch =
    Label_mismatch of record_change list
  | Unboxed_float_representation of position
type constructor_mismatch =
    Type of Errortrace.equality_error
  | Arity
  | Inline_record of record_change list
  | Kind of position
  | Explicit_return_type of position
type extension_constructor_mismatch =
    Constructor_privacy
  | Constructor_mismatch of Ident.t * Types.extension_constructor *
      Types.extension_constructor * constructor_mismatch
type variant_change =
    (Types.constructor_declaration, Types.constructor_declaration,
     constructor_mismatch)
    Diffing_with_keys.change
type private_variant_mismatch =
    Only_outer_closed
  | Missing of position * string
  | Presence of string
  | Incompatible_types_for of string
  | Types of Errortrace.equality_error
type private_object_mismatch =
    Missing of string
  | Types of Errortrace.equality_error
type type_mismatch =
    Arity
  | Privacy of privacy_mismatch
  | Kind of kind_mismatch
  | Constraint of Errortrace.equality_error
  | Manifest of Errortrace.equality_error
  | Private_variant of Types.type_expr * Types.type_expr *
      private_variant_mismatch
  | Private_object of Types.type_expr * Types.type_expr *
      private_object_mismatch
  | Variance
  | Record_mismatch of record_mismatch
  | Variant_mismatch of variant_change list
  | Unboxed_representation of position
  | Immediate of Type_immediacy.Violation.t
val value_descriptions :
  loc:Location.t ->
  Env.t ->
  string ->
  Types.value_description ->
  Types.value_description -> Typedtree.module_coercion
val type_declarations :
  ?equality:bool ->
  loc:Location.t ->
  Env.t ->
  mark:bool ->
  string ->
  Types.type_declaration ->
  Path.t -> Types.type_declaration -> type_mismatch option
val extension_constructors :
  loc:Location.t ->
  Env.t ->
  mark:bool ->
  Ident.t ->
  Types.extension_constructor ->
  Types.extension_constructor -> extension_constructor_mismatch option
val report_value_mismatch :
  string -> string -> Env.t -> Format.formatter -> value_mismatch -> unit
val report_type_mismatch :
  string ->
  string -> string -> Env.t -> Format.formatter -> type_mismatch -> unit
val report_extension_constructor_mismatch :
  string ->
  string ->
  string ->
  ("DEBUG:rule", [Tag1 (("position", 1037), (0, 0, Tag1 ([(("First", 475), (0), 0, (("typing/includecore.mli", 21, 1152, 1190), ("typing/includecore.mli", 21, 1152, 1195), 0), 0, Tag1 ("Includecore", 5)); (("Second", 476), (0), 0, (("typing/includecore.mli", 21, 1152, 1196), ("typing/includecore.mli", 21, 1152, 1204), 0), 0, Tag1 ("Includecore", 6))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Errortrace")), "position"), 0, (0)), 100000000, 0, -135)), 0, 0, 0, 0, (("typing/includecore.mli", 21, 1152, 1152), ("typing/includecore.mli", 21, 1152, 1204), 0), 0, 1, 0, Tag1 ("Includecore", 4)), 1, 0); Tag1 (("primitive_mismatch", 1038), (0, 0, Tag1 ([(("Name", 510), (0), 0, (("typing/includecore.mli", 24, 1232, 1234), ("typing/includecore.mli", 24, 1232, 1240), 0), 0, Tag1 ("Includecore", 9)); (("Arity", 511), (0), 0, (("typing/includecore.mli", 25, 1241, 1243), ("typing/includecore.mli", 25, 1241, 1250), 0), 0, Tag1 ("Includecore", 10)); (("No_alloc", 512), ([(Tag3 ((("position", 1037)), 0, (0)), 100000000, 0, -133)]), 0, (("typing/includecore.mli", 26, 1251, 1253), ("typing/includecore.mli", 26, 1251, 1275), 0), 0, Tag1 ("Includecore", 11)); (("Native_name", 513), (0), 0, (("typing/includecore.mli", 27, 1276, 1278), ("typing/includecore.mli", 27, 1276, 1291), 0), 0, Tag1 ("Includecore", 12)); (("Result_repr", 514), (0), 0, (("typing/includecore.mli", 28, 1292, 1294), ("typing/includecore.mli", 28, 1292, 1307), 0), 0, Tag1 ("Includecore", 13)); (("Argument_repr", 515), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -134)]), 0, (("typing/includecore.mli", 29, 1308, 1310), ("typing/includecore.mli", 29, 1308, 1332), 0), 0, Tag1 ("Includecore", 14))], 0), 1, 0, 0, 0, 0, 0, (("typing/includecore.mli", 23, 1206, 1206), ("typing/includecore.mli", 29, 1308, 1332), 0), 0, 0, 0, Tag1 ("Includecore", 8)), 1, 0); Tag1 (("value_mismatch", 1039), (0, 0, Tag1 ([(("Primitive_mismatch", 517), ([(Tag3 ((("primitive_mismatch", 1038)), 0, (0)), 100000000, 0, -131)]), 0, (("typing/includecore.mli", 32, 1356, 1358), ("typing/includecore.mli", 32, 1356, 1400), 0), 0, Tag1 ("Includecore", 16)); (("Not_a_primitive", 518), (0), 0, (("typing/includecore.mli", 33, 1401, 1403), ("typing/includecore.mli", 33, 1401, 1420), 0), 0, Tag1 ("Includecore", 17)); (("Type", 519), ([(Tag3 (Tag1 ((Tag2 ("Errortrace")), "moregen_error"), 0, (0)), 100000000, 0, -132)]), 0, (("typing/includecore.mli", 34, 1421, 1423), ("typing/includecore.mli", 34, 1421, 1457), 0), 0, Tag1 ("Includecore", 18))], 0), 1, 0, 0, 0, 0, 0, (("typing/includecore.mli", 31, 1334, 1334), ("typing/includecore.mli", 34, 1421, 1457), 0), 0, 0, 0, Tag1 ("Includecore", 15)), 1, 0); Tag2 (("Dont_match", 1040), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((("value_mismatch", 1039)), 0, (0)), 100000000, 0, -130)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Includecore", 19)), 2, 0); Tag1 (("privacy_mismatch", 1041), (0, 0, Tag1 ([(("Private_type_abbreviation", 522), (0), 0, (("typing/includecore.mli", 40, 1585, 1587), ("typing/includecore.mli", 40, 1585, 1614), 0), 0, Tag1 ("Includecore", 21)); (("Private_variant_type", 523), (0), 0, (("typing/includecore.mli", 41, 1615, 1617), ("typing/includecore.mli", 41, 1615, 1639), 0), 0, Tag1 ("Includecore", 22)); (("Private_record_type", 524), (0), 0, (("typing/includecore.mli", 42, 1640, 1642), ("typing/includecore.mli", 42, 1640, 1663), 0), 0, Tag1 ("Includecore", 23)); (("Private_extensible_variant", 525), (0), 0, (("typing/includecore.mli", 43, 1664, 1666), ("typing/includecore.mli", 43, 1664, 1694), 0), 0, Tag1 ("Includecore", 24)); (("Private_row_type", 526), (0), 0, (("typing/includecore.mli", 44, 1695, 1697), ("typing/includecore.mli", 44, 1695, 1715), 0), 0, Tag1 ("Includecore", 25))], 0), 1, 0, 0, 0, 0, 0, (("typing/includecore.mli", 39, 1561, 1561), ("typing/includecore.mli", 44, 1695, 1715), 0), 0, 1, 0, Tag1 ("Includecore", 20)), 1, 0); Tag1 (("type_kind", 1042), (0, 0, Tag1 ([(("Kind_abstract", 528), (0), 0, (("typing/includecore.mli", 47, 1734, 1736), ("typing/includecore.mli", 47, 1734, 1751), 0), 0, Tag1 ("Includecore", 27)); (("Kind_record", 529), (0), 0, (("typing/includecore.mli", 48, 1752, 1754), ("typing/includecore.mli", 48, 1752, 1767), 0), 0, Tag1 ("Includecore", 28)); (("Kind_variant", 530), (0), 0, (("typing/includecore.mli", 49, 1768, 1770), ("typing/includecore.mli", 49, 1768, 1784), 0), 0, Tag1 ("Includecore", 29)); (("Kind_open", 531), (0), 0, (("typing/includecore.mli", 50, 1785, 1787), ("typing/includecore.mli", 50, 1785, 1798), 0), 0, Tag1 ("Includecore", 30))], 0), 1, 0, 0, 0, 0, 0, (("typing/includecore.mli", 46, 1717, 1717), ("typing/includecore.mli", 50, 1785, 1798), 0), 0, 1, 0, Tag1 ("Includecore", 26)), 1, 0); Tag1 (("kind_mismatch", 1043), (0, 0, 0, 1, ((Tag2 ([(Tag3 ((("type_kind", 1042)), 0, (0)), 100000000, 0, -128); (Tag3 ((("type_kind", 1042)), 0, (0)), 100000000, 0, -129)]), 100000000, 0, -127)), 0, 0, 0, 0, (("typing/includecore.mli", 52, 1800, 1800), ("typing/includecore.mli", 52, 1800, 1842), 0), 0, 0, 0, Tag1 ("Includecore", 31)), 1, 0); Tag1 (("label_mismatch", 1044), (0, 0, Tag1 ([(("Type", 534), ([(Tag3 (Tag1 ((Tag2 ("Errortrace")), "equality_error"), 0, (0)), 100000000, 0, -125)]), 0, (("typing/includecore.mli", 55, 1866, 1868), ("typing/includecore.mli", 55, 1866, 1903), 0), 0, Tag1 ("Includecore", 33)); (("Mutability", 535), ([(Tag3 ((("position", 1037)), 0, (0)), 100000000, 0, -126)]), 0, (("typing/includecore.mli", 56, 1904, 1906), ("typing/includecore.mli", 56, 1904, 1930), 0), 0, Tag1 ("Includecore", 34))], 0), 1, 0, 0, 0, 0, 0, (("typing/includecore.mli", 54, 1844, 1844), ("typing/includecore.mli", 56, 1904, 1930), 0), 0, 0, 0, Tag1 ("Includecore", 32)), 1, 0); Tag1 (("record_change", 1045), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Diffing_with_keys")), "change"), [(Tag3 (Tag1 ((Tag2 ("Types")), "label_declaration"), 0, (0)), 100000000, 0, -122); (Tag3 (Tag1 ((Tag2 ("Types")), "label_declaration"), 0, (0)), 100000000, 0, -123); (Tag3 ((("label_mismatch", 1044)), 0, (0)), 100000000, 0, -124)], (0)), 100000000, 0, -121)), 0, 0, 0, 0, (("typing/includecore.mli", 58, 1932, 1932), ("typing/includecore.mli", 59, 1953, 2033), 0), 0, 0, 0, Tag1 ("Includecore", 35)), 1, 0); Tag1 (("record_mismatch", 1046), (0, 0, Tag1 ([(("Label_mismatch", 546), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("record_change", 1045)), 0, (0)), 100000000, 0, -119)], (0)), 100000000, 0, -118)]), 0, (("typing/includecore.mli", 62, 2058, 2060), ("typing/includecore.mli", 62, 2058, 2098), 0), 0, Tag1 ("Includecore", 43)); (("Unboxed_float_representation", 547), ([(Tag3 ((("position", 1037)), 0, (0)), 100000000, 0, -120)]), 0, (("typing/includecore.mli", 63, 2099, 2101), ("typing/includecore.mli", 63, 2099, 2143), 0), 0, Tag1 ("Includecore", 44))], 0), 1, 0, 0, 0, 0, 0, (("typing/includecore.mli", 61, 2035, 2035), ("typing/includecore.mli", 63, 2099, 2143), 0), 0, 0, 0, Tag1 ("Includecore", 42)), 1, 0); Tag1 (("constructor_mismatch", 1047), (0, 0, Tag1 ([(("Type", 549), ([(Tag3 (Tag1 ((Tag2 ("Errortrace")), "equality_error"), 0, (0)), 100000000, 0, -113)]), 0, (("typing/includecore.mli", 66, 2173, 2175), ("typing/includecore.mli", 66, 2173, 2210), 0), 0, Tag1 ("Includecore", 46)); (("Arity", 550), (0), 0, (("typing/includecore.mli", 67, 2211, 2213), ("typing/includecore.mli", 67, 2211, 2220), 0), 0, Tag1 ("Includecore", 47)); (("Inline_record", 551), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("record_change", 1045)), 0, (0)), 100000000, 0, -115)], (0)), 100000000, 0, -114)]), 0, (("typing/includecore.mli", 68, 2221, 2223), ("typing/includecore.mli", 68, 2221, 2260), 0), 0, Tag1 ("Includecore", 48)); (("Kind", 552), ([(Tag3 ((("position", 1037)), 0, (0)), 100000000, 0, -116)]), 0, (("typing/includecore.mli", 69, 2261, 2263), ("typing/includecore.mli", 69, 2261, 2281), 0), 0, Tag1 ("Includecore", 49)); (("Explicit_return_type", 553), ([(Tag3 ((("position", 1037)), 0, (0)), 100000000, 0, -117)]), 0, (("typing/includecore.mli", 70, 2282, 2284), ("typing/includecore.mli", 70, 2282, 2318), 0), 0, Tag1 ("Includecore", 50))], 0), 1, 0, 0, 0, 0, 0, (("typing/includecore.mli", 65, 2145, 2145), ("typing/includecore.mli", 70, 2282, 2318), 0), 0, 0, 0, Tag1 ("Includecore", 45)), 1, 0); Tag1 (("extension_constructor_mismatch", 1048), (0, 0, Tag1 ([(("Constructor_privacy", 555), (0), 0, (("typing/includecore.mli", 73, 2358, 2360), ("typing/includecore.mli", 73, 2358, 2381), 0), 0, Tag1 ("Includecore", 52)); (("Constructor_mismatch", 556), ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -109); (Tag3 (Tag1 ((Tag2 ("Types")), "extension_constructor"), 0, (0)), 100000000, 0, -110); (Tag3 (Tag1 ((Tag2 ("Types")), "extension_constructor"), 0, (0)), 100000000, 0, -111); (Tag3 ((("constructor_mismatch", 1047)), 0, (0)), 100000000, 0, -112)]), 0, (("typing/includecore.mli", 74, 2382, 2384), ("typing/includecore.mli", 77, 2522, 2572), 0), 0, Tag1 ("Includecore", 53))], 0), 1, 0, 0, 0, 0, 0, (("typing/includecore.mli", 72, 2320, 2320), ("typing/includecore.mli", 77, 2522, 2572), 0), 0, 0, 0, Tag1 ("Includecore", 51)), 1, 0); Tag1 (("variant_change", 1049), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Diffing_with_keys")), "change"), [(Tag3 (Tag1 ((Tag2 ("Types")), "constructor_declaration"), 0, (0)), 100000000, 0, -106); (Tag3 (Tag1 ((Tag2 ("Types")), "constructor_declaration"), 0, (0)), 100000000, 0, -107); (Tag3 ((("constructor_mismatch", 1047)), 0, (0)), 100000000, 0, -108)], (0)), 100000000, 0, -105)), 0, 0, 0, 0, (("typing/includecore.mli", 78, 2573, 2573), ("typing/includecore.mli", 80, 2663, 2691), 0), 0, 0, 0, Tag1 ("Includecore", 54)), 1, 0); Tag1 (("private_variant_mismatch", 1050), (0, 0, Tag1 ([(("Only_outer_closed", 598), (0), 0, (("typing/includecore.mli", 83, 2725, 2727), ("typing/includecore.mli", 83, 2725, 2746), 0), 0, Tag1 ("Includecore", 56)); (("Missing", 599), ([(Tag3 ((("position", 1037)), 0, (0)), 100000000, 0, -100); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -101)]), 0, (("typing/includecore.mli", 84, 2747, 2749), ("typing/includecore.mli", 84, 2747, 2779), 0), 0, Tag1 ("Includecore", 57)); (("Presence", 600), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -102)]), 0, (("typing/includecore.mli", 85, 2780, 2782), ("typing/includecore.mli", 85, 2780, 2802), 0), 0, Tag1 ("Includecore", 58)); (("Incompatible_types_for", 601), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -103)]), 0, (("typing/includecore.mli", 86, 2803, 2805), ("typing/includecore.mli", 86, 2803, 2839), 0), 0, Tag1 ("Includecore", 59)); (("Types", 602), ([(Tag3 (Tag1 ((Tag2 ("Errortrace")), "equality_error"), 0, (0)), 100000000, 0, -104)]), 0, (("typing/includecore.mli", 87, 2840, 2842), ("typing/includecore.mli", 87, 2840, 2878), 0), 0, Tag1 ("Includecore", 60))], 0), 1, 0, 0, 0, 0, 0, (("typing/includecore.mli", 82, 2693, 2693), ("typing/includecore.mli", 87, 2840, 2878), 0), 0, 0, 0, Tag1 ("Includecore", 55)), 1, 0); Tag1 (("private_object_mismatch", 1051), (0, 0, Tag1 ([(("Missing", 604), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -98)]), 0, (("typing/includecore.mli", 90, 2911, 2913), ("typing/includecore.mli", 90, 2911, 2932), 0), 0, Tag1 ("Includecore", 62)); (("Types", 605), ([(Tag3 (Tag1 ((Tag2 ("Errortrace")), "equality_error"), 0, (0)), 100000000, 0, -99)]), 0, (("typing/includecore.mli", 91, 2933, 2935), ("typing/includecore.mli", 91, 2933, 2971), 0), 0, Tag1 ("Includecore", 63))], 0), 1, 0, 0, 0, 0, 0, (("typing/includecore.mli", 89, 2880, 2880), ("typing/includecore.mli", 91, 2933, 2971), 0), 0, 0, 0, Tag1 ("Includecore", 61)), 1, 0); Tag1 (("type_mismatch", 1052), (0, 0, Tag1 ([(("Arity", 607), (0), 0, (("typing/includecore.mli", 94, 2994, 2996), ("typing/includecore.mli", 94, 2994, 3003), 0), 0, Tag1 ("Includecore", 65)); (("Privacy", 608), ([(Tag3 ((("privacy_mismatch", 1041)), 0, (0)), 100000000, 0, -83)]), 0, (("typing/includecore.mli", 95, 3004, 3006), ("typing/includecore.mli", 95, 3004, 3035), 0), 0, Tag1 ("Includecore", 66)); (("Kind", 609), ([(Tag3 ((("kind_mismatch", 1043)), 0, (0)), 100000000, 0, -84)]), 0, (("typing/includecore.mli", 96, 3036, 3038), ("typing/includecore.mli", 96, 3036, 3061), 0), 0, Tag1 ("Includecore", 67)); (("Constraint", 610), ([(Tag3 (Tag1 ((Tag2 ("Errortrace")), "equality_error"), 0, (0)), 100000000, 0, -85)]), 0, (("typing/includecore.mli", 97, 3062, 3064), ("typing/includecore.mli", 97, 3062, 3105), 0), 0, Tag1 ("Includecore", 68)); (("Manifest", 611), ([(Tag3 (Tag1 ((Tag2 ("Errortrace")), "equality_error"), 0, (0)), 100000000, 0, -86)]), 0, (("typing/includecore.mli", 98, 3106, 3108), ("typing/includecore.mli", 98, 3106, 3147), 0), 0, Tag1 ("Includecore", 69)); (("Private_variant", 612), ([(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -87); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -88); (Tag3 ((("private_variant_mismatch", 1050)), 0, (0)), 100000000, 0, -89)]), 0, (("typing/includecore.mli", 99, 3148, 3150), ("typing/includecore.mli", 99, 3148, 3219), 0), 0, Tag1 ("Includecore", 70)); (("Private_object", 613), ([(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -90); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -91); (Tag3 ((("private_object_mismatch", 1051)), 0, (0)), 100000000, 0, -92)]), 0, (("typing/includecore.mli", 100, 3220, 3222), ("typing/includecore.mli", 100, 3220, 3289), 0), 0, Tag1 ("Includecore", 71)); (("Variance", 614), (0), 0, (("typing/includecore.mli", 101, 3290, 3292), ("typing/includecore.mli", 101, 3290, 3302), 0), 0, Tag1 ("Includecore", 72)); (("Record_mismatch", 615), ([(Tag3 ((("record_mismatch", 1046)), 0, (0)), 100000000, 0, -93)]), 0, (("typing/includecore.mli", 102, 3303, 3305), ("typing/includecore.mli", 102, 3303, 3341), 0), 0, Tag1 ("Includecore", 73)); (("Variant_mismatch", 616), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("variant_change", 1049)), 0, (0)), 100000000, 0, -95)], (0)), 100000000, 0, -94)]), 0, (("typing/includecore.mli", 103, 3342, 3344), ("typing/includecore.mli", 103, 3342, 3385), 0), 0, Tag1 ("Includecore", 74)); (("Unboxed_representation", 617), ([(Tag3 ((("position", 1037)), 0, (0)), 100000000, 0, -96)]), 0, (("typing/includecore.mli", 104, 3386, 3388), ("typing/includecore.mli", 104, 3386, 3424), 0), 0, Tag1 ("Includecore", 75)); (("Immediate", 618), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Type_immediacy")), "Violation"), "t"), 0, (0)), 100000000, 0, -97)]), 0, (("typing/includecore.mli", 105, 3425, 3427), ("typing/includecore.mli", 105, 3425, 3468), 0), 0, Tag1 ("Includecore", 76))], 0), 1, 0, 0, 0, 0, 0, (("typing/includecore.mli", 93, 2973, 2973), ("typing/includecore.mli", 105, 3425, 3468), 0), 0, 0, 0, Tag1 ("Includecore", 64)), 1, 0); (("value_descriptions", 1053), ((Tag1 (("loc"), (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -82), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -81), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -80), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "value_description"), 0, (0)), 100000000, 0, -79), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "value_description"), 0, (0)), 100000000, 0, -78), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_coercion"), 0, (0)), 100000000, 0, -77), 0), 100000000, 0, -76), 0), 100000000, 0, -75), 0), 100000000, 0, -74), 0), 100000000, 0, -73), 0), 100000000, 0, -72), 0, (("typing/includecore.mli", 107, 3470, 3470), ("typing/includecore.mli", 109, 3533, 3592), 0), 0, Tag1 ("Includecore", 77)), 0); (("type_declarations", 1054), ((Tag1 (Tag1 ("equality"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -71)], (0)), 100000000, 0, -70), (Tag1 (("loc"), (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -69), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -68), (Tag1 (("mark"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -67), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -66), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -65), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -64), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -63), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("type_mismatch", 1052)), 0, (0)), 100000000, 0, -62)], (0)), 100000000, 0, -61), 0), 100000000, 0, -60), 0), 100000000, 0, -59), 0), 100000000, 0, -58), 0), 100000000, 0, -57), 0), 100000000, 0, -56), 0), 100000000, 0, -55), 0), 100000000, 0, -54), 0), 100000000, 0, -53), 0, (("typing/includecore.mli", 111, 3594, 3594), ("typing/includecore.mli", 115, 3691, 3763), 0), 0, Tag1 ("Includecore", 78)), 0); (("extension_constructors", 1055), ((Tag1 (("loc"), (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -52), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -51), (Tag1 (("mark"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -50), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -49), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "extension_constructor"), 0, (0)), 100000000, 0, -48), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "extension_constructor"), 0, (0)), 100000000, 0, -47), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("extension_constructor_mismatch", 1048)), 0, (0)), 100000000, 0, -46)], (0)), 100000000, 0, -45), 0), 100000000, 0, -44), 0), 100000000, 0, -43), 0), 100000000, 0, -42), 0), 100000000, 0, -41), 0), 100000000, 0, -40), 0), 100000000, 0, -39), 0, (("typing/includecore.mli", 117, 3765, 3765), ("typing/includecore.mli", 120, 3898, 3937), 0), 0, Tag1 ("Includecore", 79)), 0); (("report_value_mismatch", 1056), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -38), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -37), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -36), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -35), (Tag1 (0, (Tag3 ((("value_mismatch", 1039)), 0, (0)), 100000000, 0, -34), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -33), 0), 100000000, 0, -32), 0), 100000000, 0, -31), 0), 100000000, 0, -30), 0), 100000000, 0, -29), 0), 100000000, 0, -28), 0, (("typing/includecore.mli", 126, 4012, 4012), ("typing/includecore.mli", 129, 4073, 4117), 0), 0, Tag1 ("Includecore", 80)), 0); (("report_type_mismatch", 1057), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -27), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -26), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -25), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -24), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -23), (Tag1 (0, (Tag3 ((("type_mismatch", 1052)), 0, (0)), 100000000, 0, -22), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -21), 0), 100000000, 0, -20), 0), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), 0), 100000000, 0, -16), 0), 100000000, 0, -15), 0, (("typing/includecore.mli", 131, 4119, 4119), ("typing/includecore.mli", 134, 4189, 4232), 0), 0, Tag1 ("Includecore", 81)), 0); (("report_extension_constructor_mismatch", 1058), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -14), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -13), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -11), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -10), (Tag1 (0, (Tag3 ((("extension_constructor_mismatch", 1048)), 0, (0)), 100000000, 0, -9), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8), 0), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("typing/includecore.mli", 136, 4234, 4234), ("typing/includecore.mli", 139, 4321, 4381), 0), 0, Tag1 ("Includecore", 82)), 0)], "Includecore", [("Includecore", (";Q E\158\170\208\130\1750\136E\012\1798|")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Types", ("\177\238\029.\220\006\163!\230\015\006\182\133\155\194\166")); ("Typedtree", ("c5z\186\175w\146\254\018V\184\031\0038\004\227")); ("Type_immediacy", ("\"\127k\011Q\241\211\138\193;8\142\129\141#\251")); ("Subst", ("\021\031\148\223\127\186\189\135\027}\145r\216\143\177\156")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shape", ("\235\127Y\213\025\137=\244\218\181\248N\189\188\216p")); ("Primitive", ("}Shh\162\015|\220A\203\249\232\245G\213\019")); ("Path", ("\012\183\178\025\1298\228*\021r\185\160Y\252\n\026")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Outcometree", ("9\021%\234\211\206\210\004H\165\208\2014\234Q\142")); ("Misc", ("*\026\026\234c\191\131\161\\\203\183\012O\252\153\198")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Load_path", ("\012@\228l\230\164S\172h\1726X\020\252o}")); ("Identifiable", ("\004F\207\014\158GU\001\184\214\187%/#;\211")); ("Ident", ("\b9;!\187.\220\163(x\b\174\\\223\020\004")); ("Errortrace", ("\238\196yV6<x\\\13126\144\141\000~\145")); ("Env", ("\021\n\181\142x\b\169j\227\"\017\248*\178\245\223")); ("Diffing_with_keys", ("\198\208\133q\023\211C\197\210Q\023\001#o\193H")); ("Diffing", ("\027\205S\011\160W\184\023\131\250\1571\177\026\005Q")); ("Cmi_format", ("6\177\bU\139\"\023\152=\249\135\174\b\011Cg")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Build_path_prefix_map", ("y\028\167\207D\220\198\216\011\208\172\149\2416\bc")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216"))], [(0)])
Env.t -> Format.formatter -> extension_constructor_mismatch -> unit

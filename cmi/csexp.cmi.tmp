module type Sexp = sig type t = Atom of string | List of t list end
module type S =
  sig
    type sexp
    val parse_string : string -> (sexp, int * string) result
    val parse_string_many : string -> (sexp list, int * string) result
    val input : in_channel -> (sexp, string) result
    val input_opt : in_channel -> (sexp option, string) result
    val input_many : in_channel -> (sexp list, string) result
    val serialised_length : sexp -> int
    val to_string : sexp -> string
    val to_buffer : Buffer.t -> sexp -> unit
    val to_channel : out_channel -> sexp -> unit
    module Parser :
      sig
        exception Parse_error of string
        val premature_end_of_input : string
        module Lexer :
          sig
            type t
            val create : unit -> t
            type _ token =
                Await : [> `other ] token
              | Lparen : [> `other ] token
              | Rparen : [> `other ] token
              | Atom : int -> [> `atom ] token
            val feed : t -> char -> [ `atom | `other ] token
            val feed_eoi : t -> unit
          end
        module Stack :
          sig
            type t = Empty | Open of t | Sexp of sexp * t
            val to_list : t -> sexp list
            val open_paren : t -> t
            val close_paren : t -> t
            val add_atom : string -> t -> t
            val add_token : [ `other ] Lexer.token -> t -> t
          end
      end
    module type Input =
      sig
        type t
        module Monad :
          sig
            type 'a t
            val return : 'a -> 'a t
            val bind : 'a t -> ('a -> 'b t) -> 'b t
          end
        val read_string : t -> int -> (string, string) result Monad.t
        val read_char : t -> (char, string) result Monad.t
      end
    module Make_parser :
      functor (Input : Input) ->
        sig
          val parse : Input.t -> (sexp, string) result Input.Monad.t
          val parse_many :
            Input.t -> (sexp list, string) result Input.Monad.t
        end
  end
module Make :
  functor (Sexp : Sexp) ->
    sig
      val parse_string : string -> (Sexp.t, int * string) result
      val parse_string_many : string -> (Sexp.t list, int * string) result
      val input : in_channel -> (Sexp.t, string) result
      val input_opt : in_channel -> (Sexp.t option, string) result
      val input_many : in_channel -> (Sexp.t list, string) result
      val serialised_length : Sexp.t -> int
      val to_string : Sexp.t -> string
      val to_buffer : Buffer.t -> Sexp.t -> unit
      val to_channel : out_channel -> Sexp.t -> unit
      module Parser :
        sig
          exception Parse_error of string
          val premature_end_of_input : string
          module Lexer :
            sig
              type t
              val create : unit -> t
              type _ token =
                  Await : [> `other ] token
                | Lparen : [> `other ] token
                | Rparen : [> `other ] token
                | Atom : int -> [> `atom ] token
              val feed : t -> char -> [ `atom | `other ] token
              val feed_eoi : t -> unit
            end
          module Stack :
            sig
              type t = Empty | Open of t | Sexp of Sexp.t * t
              val to_list : t -> Sexp.t list
              val open_paren : t -> t
              val close_paren : t -> t
              val add_atom : string -> t -> t
              val add_token : [ `other ] Lexer.token -> t -> t
            end
        end
      module type Input =
        sig
          type t
          module Monad :
            sig
              type 'a t
              val return : 'a -> 'a t
              val bind : 'a t -> ('a -> 'b t) -> 'b t
            end
          val read_string : t -> int -> (string, string) result Monad.t
          val read_char : t -> (char, string) result Monad.t
        end
      module Make_parser :
        functor (Input : Input) ->
          sig
            val parse : Input.t -> (Sexp.t, string) result Input.Monad.t
            val parse_many :
              Input.t -> (Sexp.t list, string) result Input.Monad.t
          end
    end
type t = Atom of string | List of t list
val parse_string : string -> (t, int * string) result
val parse_string_many : string -> (t list, int * string) result
val input : in_channel -> (t, string) result
val input_opt : in_channel -> (t option, string) result
val input_many : in_channel -> (t list, string) result
val serialised_length : t -> int
val to_string : t -> string
val to_buffer : Buffer.t -> t -> unit
val to_channel : out_channel -> t -> unit
module Parser :
  sig
    exception Parse_error of string
    val premature_end_of_input : string
    module Lexer :
      sig
        type t
        val create : unit -> t
        type _ token =
            Await : [> `other ] token
          | Lparen : [> `other ] token
          | Rparen : [> `other ] token
          | Atom : int -> [> `atom ] token
        val feed : t -> char -> [ `atom | `other ] token
        val feed_eoi : t -> unit
      end
    module Stack :
      sig
        type t = Empty | Open of t | Sexp of t/2 * t
        val to_list : t -> t/2 list
        val open_paren : t -> t
        val close_paren : t -> t
        val add_atom : string -> t -> t
        val add_token : [ `other ] Lexer.token -> t -> t
      end
  end
module type Input =
  sig
    type t
    module Monad :
      sig
        type 'a t
        val return : 'a -> 'a t
        val bind : 'a t -> ('a -> 'b t) -> 'b t
      end
    val read_string : t -> int -> (string, string) result Monad.t
    val read_char : t -> (char, string) result Monad.t
  end
module Make_parser :
  functor (Input : Input) ->
    sig
      val parse : Input.t -> (t, string) result Input.Monad.t
      val parse_many : Input.t -> (t list, string) result Input.Monad.t("DEBUG:rule", [Tag4 (("Sexp", 791), ((Tag1 ([Tag1 (("t", 809), (0, 0, Tag1 ([(("Atom", 270), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -53)]), 0, (("src/csexp.mli", 25, 913, 917), ("src/csexp.mli", 25, 913, 933), 0), 0, Tag1 ("Csexp", 1)); (("List", 271), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 809)), 0, (0)), 100000000, 0, -55)], (0)), 100000000, 0, -54)]), 0, (("src/csexp.mli", 26, 934, 938), ("src/csexp.mli", 26, 934, 954), 0), 0, Tag1 ("Csexp", 2))], 0), 1, 0, 0, 0, 0, 0, (("src/csexp.mli", 24, 902, 904), ("src/csexp.mli", 26, 934, 954), 0), 0, 0, 0, Tag1 ("Csexp", 0)), 1, 0)])), 0, (("src/csexp.mli", 23, 879, 879), ("src/csexp.mli", 27, 955, 958), 0), Tag1 ("Csexp", 3)), 0); Tag4 (("S", 792), ((Tag1 ([Tag1 (("sexp", 810), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/csexp.mli", 31, 1001, 1003), ("src/csexp.mli", 31, 1001, 1012), 0), 0, 0, 0, Tag1 ("Csexp", 4)), 1, 0); (("parse_string", 811), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -103), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((("sexp", 810)), 0, (0)), 100000000, 0, -99); (Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -101); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -102)]), 100000000, 0, -100)], (0)), 100000000, 0, -98), 0), 100000000, 0, -97), 0, (("src/csexp.mli", 37, 1276, 1278), ("src/csexp.mli", 37, 1276, 1334), 0), 0, Tag1 ("Csexp", 5)), 0); (("parse_string_many", 812), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -96), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("sexp", 810)), 0, (0)), 100000000, 0, -92)], (0)), 100000000, 0, -91); (Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -94); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -95)]), 100000000, 0, -93)], (0)), 100000000, 0, -90), 0), 100000000, 0, -89), 0, (("src/csexp.mli", 41, 1436, 1438), ("src/csexp.mli", 41, 1436, 1504), 0), 0, Tag1 ("Csexp", 6)), 0); (("input", 813), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "in_channel"), 0, (0)), 100000000, 0, -88), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((("sexp", 810)), 0, (0)), 100000000, 0, -86); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -87)], (0)), 100000000, 0, -85), 0), 100000000, 0, -84), 0, (("src/csexp.mli", 45, 1667, 1669), ("src/csexp.mli", 45, 1667, 1716), 0), 0, Tag1 ("Csexp", 7)), 0); (("input_opt", 814), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "in_channel"), 0, (0)), 100000000, 0, -83), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("sexp", 810)), 0, (0)), 100000000, 0, -81)], (0)), 100000000, 0, -80); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -82)], (0)), 100000000, 0, -79), 0), 100000000, 0, -78), 0, (("src/csexp.mli", 51, 1968, 1970), ("src/csexp.mli", 51, 1968, 2028), 0), 0, Tag1 ("Csexp", 8)), 0); (("input_many", 815), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "in_channel"), 0, (0)), 100000000, 0, -77), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("sexp", 810)), 0, (0)), 100000000, 0, -75)], (0)), 100000000, 0, -74); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -76)], (0)), 100000000, 0, -73), 0), 100000000, 0, -72), 0, (("src/csexp.mli", 54, 2098, 2100), ("src/csexp.mli", 54, 2098, 2157), 0), 0, Tag1 ("Csexp", 9)), 0); (("serialised_length", 816), ((Tag1 (0, (Tag3 ((("sexp", 810)), 0, (0)), 100000000, 0, -71), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -70), 0), 100000000, 0, -69), 0, (("src/csexp.mli", 59, 2256, 2258), ("src/csexp.mli", 59, 2256, 2293), 0), 0, Tag1 ("Csexp", 10)), 0); (("to_string", 817), ((Tag1 (0, (Tag3 ((("sexp", 810)), 0, (0)), 100000000, 0, -68), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -67), 0), 100000000, 0, -66), 0, (("src/csexp.mli", 63, 2387, 2389), ("src/csexp.mli", 63, 2387, 2419), 0), 0, Tag1 ("Csexp", 11)), 0); (("to_buffer", 818), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Buffer"), "t"), 0, (0)), 100000000, 0, -65), (Tag1 (0, (Tag3 ((("sexp", 810)), 0, (0)), 100000000, 0, -64), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -63), 0), 100000000, 0, -62), 0), 100000000, 0, -61), 0, (("src/csexp.mli", 67, 2538, 2540), ("src/csexp.mli", 67, 2538, 2580), 0), 0, Tag1 ("Csexp", 12)), 0); (("to_channel", 819), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -60), (Tag1 (0, (Tag3 ((("sexp", 810)), 0, (0)), 100000000, 0, -59), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -58), 0), 100000000, 0, -57), 0), 100000000, 0, -56), 0, (("src/csexp.mli", 71, 2695, 2697), ("src/csexp.mli", 71, 2695, 2741), 0), 0, Tag1 ("Csexp", 13)), 0); Tag3 (("Parser", 820), 0, (Tag1 ([Tag2 (("Parse_error", 824), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -105)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Csexp", 14)), 2, 0); (("premature_end_of_input", 825), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -104), 0, (("src/csexp.mli", 259, 10290, 10294), ("src/csexp.mli", 259, 10290, 10329), 0), 0, Tag1 ("Csexp", 15)), 0); Tag3 (("Lexer", 826), 0, (Tag1 ([Tag1 (("t", 828), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/csexp.mli", 264, 10385, 10391), ("src/csexp.mli", 264, 10385, 10397), 0), 0, 0, 0, Tag1 ("Csexp", 16)), 1, 0); (("create", 829), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -132), (Tag3 ((("t", 828)), 0, (0)), 100000000, 0, -131), 0), 100000000, 0, -130), 0, (("src/csexp.mli", 266, 10399, 10405), ("src/csexp.mli", 266, 10399, 10427), 0), 0, Tag1 ("Csexp", 17)), 0); Tag1 (("token", 830), ([((("_")), 100000000, 0, -129)], 1, Tag1 ([(("Await", 329), (0), ((Tag3 ((("token", 830)), [(Tag8 (([("other", (0))], ((0), 100000000, 0, -118), 0, 0, 0)), 100000000, 0, -117)], (0)), 100000000, 0, -116)), (("src/csexp.mli", 269, 10450, 10458), ("src/csexp.mli", 269, 10450, 10485), 0), 0, Tag1 ("Csexp", 19)); (("Lparen", 330), (0), ((Tag3 ((("token", 830)), [(Tag8 (([("other", (0))], ((0), 100000000, 0, -121), 0, 0, 0)), 100000000, 0, -120)], (0)), 100000000, 0, -119)), (("src/csexp.mli", 270, 10486, 10494), ("src/csexp.mli", 270, 10486, 10522), 0), 0, Tag1 ("Csexp", 20)); (("Rparen", 331), (0), ((Tag3 ((("token", 830)), [(Tag8 (([("other", (0))], ((0), 100000000, 0, -124), 0, 0, 0)), 100000000, 0, -123)], (0)), 100000000, 0, -122)), (("src/csexp.mli", 271, 10523, 10531), ("src/csexp.mli", 271, 10523, 10559), 0), 0, Tag1 ("Csexp", 21)); (("Atom", 332), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -128)]), ((Tag3 ((("token", 830)), [(Tag8 (([("atom", (0))], ((0), 100000000, 0, -127), 0, 0, 0)), 100000000, 0, -126)], (0)), 100000000, 0, -125)), (("src/csexp.mli", 272, 10560, 10568), ("src/csexp.mli", 272, 10560, 10600), 0), 0, Tag1 ("Csexp", 22))], 0), 1, 0, [63], [0], 0, 0, (("src/csexp.mli", 268, 10429, 10435), ("src/csexp.mli", 272, 10560, 10600), 0), 0, 0, 0, Tag1 ("Csexp", 18)), 1, 0); (("feed", 831), ((Tag1 (0, (Tag3 ((("t", 828)), 0, (0)), 100000000, 0, -115), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -114), (Tag3 ((("token", 830)), [(Tag8 (([("atom", (0)); ("other", (0))], (0, 100000000, 0, -113), 1, 0, 0)), 100000000, 0, -112)], (0)), 100000000, 0, -111), 0), 100000000, 0, -110), 0), 100000000, 0, -109), 0, (("src/csexp.mli", 277, 10677, 10683), ("src/csexp.mli", 277, 10677, 10731), 0), 0, Tag1 ("Csexp", 23)), 0); (("feed_eoi", 832), ((Tag1 (0, (Tag3 ((("t", 828)), 0, (0)), 100000000, 0, -108), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -107), 0), 100000000, 0, -106), 0, (("src/csexp.mli", 286, 11036, 11042), ("src/csexp.mli", 286, 11036, 11066), 0), 0, Tag1 ("Csexp", 24)), 0)]), 0, (("src/csexp.mli", 261, 10331, 10335), ("src/csexp.mli", 287, 11067, 11074), 0), Tag1 ("Csexp", 25)), 0, 0); Tag3 (("Stack", 827), 0, (Tag1 ([Tag1 (("t", 833), (0, 0, Tag1 ([(("Empty", 337), (0), 0, (("src/csexp.mli", 293, 11142, 11150), ("src/csexp.mli", 293, 11142, 11157), 0), 0, Tag1 ("Csexp", 27)); (("Open", 338), ([(Tag3 ((("t", 833)), 0, (0)), 100000000, 0, -155)]), 0, (("src/csexp.mli", 294, 11158, 11166), ("src/csexp.mli", 294, 11158, 11177), 0), 0, Tag1 ("Csexp", 28)); (("Sexp", 339), ([(Tag3 ((("sexp", 810)), 0, (0)), 100000000, 0, -156); (Tag3 ((("t", 833)), 0, (0)), 100000000, 0, -157)]), 0, (("src/csexp.mli", 295, 11178, 11186), ("src/csexp.mli", 295, 11178, 11204), 0), 0, Tag1 ("Csexp", 29))], 0), 1, 0, 0, 0, 0, 0, (("src/csexp.mli", 292, 11127, 11133), ("src/csexp.mli", 295, 11178, 11204), 0), 0, 0, 0, Tag1 ("Csexp", 26)), 1, 0); (("to_list", 834), ((Tag1 (0, (Tag3 ((("t", 833)), 0, (0)), 100000000, 0, -154), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("sexp", 810)), 0, (0)), 100000000, 0, -153)], (0)), 100000000, 0, -152), 0), 100000000, 0, -151), 0, (("src/csexp.mli", 307, 11556, 11562), ("src/csexp.mli", 307, 11556, 11590), 0), 0, Tag1 ("Csexp", 30)), 0); (("open_paren", 835), ((Tag1 (0, (Tag3 ((("t", 833)), 0, (0)), 100000000, 0, -150), (Tag3 ((("t", 833)), 0, (0)), 100000000, 0, -149), 0), 100000000, 0, -148), 0, (("src/csexp.mli", 310, 11629, 11635), ("src/csexp.mli", 310, 11629, 11658), 0), 0, Tag1 ("Csexp", 31)), 0); (("close_paren", 836), ((Tag1 (0, (Tag3 ((("t", 833)), 0, (0)), 100000000, 0, -147), (Tag3 ((("t", 833)), 0, (0)), 100000000, 0, -146), 0), 100000000, 0, -145), 0, (("src/csexp.mli", 322, 12043, 12049), ("src/csexp.mli", 322, 12043, 12073), 0), 0, Tag1 ("Csexp", 32)), 0); (("add_atom", 837), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -144), (Tag1 (0, (Tag3 ((("t", 833)), 0, (0)), 100000000, 0, -143), (Tag3 ((("t", 833)), 0, (0)), 100000000, 0, -142), 0), 100000000, 0, -141), 0), 100000000, 0, -140), 0, (("src/csexp.mli", 330, 12240, 12246), ("src/csexp.mli", 330, 12240, 12277), 0), 0, Tag1 ("Csexp", 33)), 0); (("add_token", 838), ((Tag1 (0, (Tag3 (Tag1 ((("Lexer", 826)), "token"), [(Tag8 (([("other", (0))], (0, 100000000, 0, -139), 1, 0, 0)), 100000000, 0, -138)], (0)), 100000000, 0, -137), (Tag1 (0, (Tag3 ((("t", 833)), 0, (0)), 100000000, 0, -136), (Tag3 ((("t", 833)), 0, (0)), 100000000, 0, -135), 0), 100000000, 0, -134), 0), 100000000, 0, -133), 0, (("src/csexp.mli", 335, 12360, 12366), ("src/csexp.mli", 335, 12360, 12414), 0), 0, Tag1 ("Csexp", 34)), 0)]), 0, (("src/csexp.mli", 289, 11076, 11080), ("src/csexp.mli", 336, 12415, 12422), 0), Tag1 ("Csexp", 35)), 0, 0)]), 0, (("src/csexp.mli", 78, 2900, 2902), ("src/csexp.mli", 337, 12423, 12428), 0), Tag1 ("Csexp", 36)), 0, 0); Tag4 (("Input", 821), ((Tag1 ([Tag1 (("t", 839), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/csexp.mli", 348, 12788, 12792), ("src/csexp.mli", 348, 12788, 12798), 0), 0, 0, 0, Tag1 ("Csexp", 37)), 1, 0); Tag3 (("Monad", 840), 0, (Tag1 ([Tag1 (("t", 843), ([((("a")), 100000000, 0, -183)], 1, 0, 1, 0, [7], [2], 0, 0, (("src/csexp.mli", 351, 12823, 12829), ("src/csexp.mli", 351, 12823, 12838), 0), 0, 0, 0, Tag1 ("Csexp", 38)), 1, 0); (("return", 844), ((Tag1 (0, ((("a")), 100000000, 0, -182), (Tag3 ((("t", 843)), [((("a")), 100000000, 0, -182)], (0)), 100000000, 0, -181), 0), 100000000, 0, -180), 0, (("src/csexp.mli", 353, 12840, 12846), ("src/csexp.mli", 353, 12840, 12869), 0), 0, Tag1 ("Csexp", 39)), 0); (("bind", 845), ((Tag1 (0, (Tag3 ((("t", 843)), [((("a")), 100000000, 0, -178)], (0)), 100000000, 0, -179), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -178), (Tag3 ((("t", 843)), [((("b")), 100000000, 0, -175)], (0)), 100000000, 0, -177), 0), 100000000, 0, -176), (Tag3 ((("t", 843)), [((("b")), 100000000, 0, -175)], (0)), 100000000, 0, -174), 0), 100000000, 0, -173), 0), 100000000, 0, -172), 0, (("src/csexp.mli", 355, 12871, 12877), ("src/csexp.mli", 355, 12871, 12916), 0), 0, Tag1 ("Csexp", 40)), 0)]), 0, (("src/csexp.mli", 350, 12800, 12804), ("src/csexp.mli", 356, 12917, 12924), 0), Tag1 ("Csexp", 41)), 0, 0); (("read_string", 841), ((Tag1 (0, (Tag3 ((("t", 839)), 0, (0)), 100000000, 0, -171), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -170), (Tag3 (Tag1 ((("Monad", 840)), "t"), [(Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -168); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -169)], (0)), 100000000, 0, -167)], (0)), 100000000, 0, -166), 0), 100000000, 0, -165), 0), 100000000, 0, -164), 0, (("src/csexp.mli", 358, 12926, 12930), ("src/csexp.mli", 358, 12926, 12991), 0), 0, Tag1 ("Csexp", 42)), 0); (("read_char", 842), ((Tag1 (0, (Tag3 ((("t", 839)), 0, (0)), 100000000, 0, -163), (Tag3 (Tag1 ((("Monad", 840)), "t"), [(Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -161); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -162)], (0)), 100000000, 0, -160)], (0)), 100000000, 0, -159), 0), 100000000, 0, -158), 0, (("src/csexp.mli", 360, 12993, 12997), ("src/csexp.mli", 360, 12993, 13047), 0), 0, Tag1 ("Csexp", 43)), 0)])), [(("deprecated", (("src/csexp.mli", 362, 13054, 13059), ("src/csexp.mli", 362, 13054, 13069), 0)), ([([(Tag1 (Tag2 ("Use Parser module instead", (("src/csexp.mli", 362, 13054, 13071), ("src/csexp.mli", 362, 13054, 13096), 0), 0)), (("src/csexp.mli", 362, 13054, 13070), ("src/csexp.mli", 362, 13054, 13097), 0), 0, 0)], (("src/csexp.mli", 362, 13054, 13070), ("src/csexp.mli", 362, 13054, 13097), 0))]), (("src/csexp.mli", 362, 13054, 13056), ("src/csexp.mli", 362, 13054, 13098), 0))], (("src/csexp.mli", 347, 12762, 12764), ("src/csexp.mli", 362, 13054, 13098), 0), Tag1 ("Csexp", 44)), 0); Tag3 (("Make_parser", 822), 0, (Tag2 (((("Input", 823)), ((("Input", 821)))), Tag1 ([(("parse", 846), ((Tag1 (0, (Tag3 (Tag1 ((("Input", 823)), "t"), 0, (0)), 100000000, 0, -196), (Tag3 (Tag1 (Tag1 ((("Input", 823)), "Monad"), "t"), [(Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((("sexp", 810)), 0, (0)), 100000000, 0, -194); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -195)], (0)), 100000000, 0, -193)], (0)), 100000000, 0, -192), 0), 100000000, 0, -191), 0, (("src/csexp.mli", 367, 13164, 13168), ("src/csexp.mli", 367, 13164, 13226), 0), 0, Tag1 ("Csexp", 46)), 0); (("parse_many", 847), ((Tag1 (0, (Tag3 (Tag1 ((("Input", 823)), "t"), 0, (0)), 100000000, 0, -190), (Tag3 (Tag1 (Tag1 ((("Input", 823)), "Monad"), "t"), [(Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("sexp", 810)), 0, (0)), 100000000, 0, -188)], (0)), 100000000, 0, -187); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -189)], (0)), 100000000, 0, -186)], (0)), 100000000, 0, -185), 0), 100000000, 0, -184), 0, (("src/csexp.mli", 369, 13228, 13232), ("src/csexp.mli", 369, 13228, 13300), 0), 0, Tag1 ("Csexp", 47)), 0)])), [(("deprecated", (("src/csexp.mli", 371, 13307, 13312), ("src/csexp.mli", 371, 13307, 13322), 0)), ([([(Tag1 (Tag2 ("Use Parser module instead", (("src/csexp.mli", 371, 13307, 13324), ("src/csexp.mli", 371, 13307, 13349), 0), 0)), (("src/csexp.mli", 371, 13307, 13323), ("src/csexp.mli", 371, 13307, 13350), 0), 0, 0)], (("src/csexp.mli", 371, 13307, 13323), ("src/csexp.mli", 371, 13307, 13350), 0))]), (("src/csexp.mli", 371, 13307, 13309), ("src/csexp.mli", 371, 13307, 13351), 0))], (("src/csexp.mli", 366, 13121, 13123), ("src/csexp.mli", 371, 13307, 13351), 0), Tag1 ("Csexp", 48)), 0, 0)])), 0, (("src/csexp.mli", 29, 960, 960), ("src/csexp.mli", 372, 13352, 13355), 0), Tag1 ("Csexp", 49)), 0); Tag3 (("Make", 793), 0, (Tag2 (((("Sexp", 808)), ((("Sexp", 791)))), Tag1 ([(("parse_string", 848), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -244), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 (Tag1 ((("Sexp", 808)), "t"), 0, (0)), 100000000, 0, -240); (Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -242); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -243)]), 100000000, 0, -241)], (0)), 100000000, 0, -239), 0), 100000000, 0, -238), 0, (("src/csexp.mli", 374, 13357, 13385), ("src/csexp.mli", 374, 13357, 13411), 0), 0, Tag1 ("Csexp", 5)), 0); (("parse_string_many", 849), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -237), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Sexp", 808)), "t"), 0, (0)), 100000000, 0, -233)], (0)), 100000000, 0, -232); (Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -235); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -236)]), 100000000, 0, -234)], (0)), 100000000, 0, -231), 0), 100000000, 0, -230), 0, (("src/csexp.mli", 374, 13357, 13385), ("src/csexp.mli", 374, 13357, 13411), 0), 0, Tag1 ("Csexp", 6)), 0); (("input", 850), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "in_channel"), 0, (0)), 100000000, 0, -229), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 (Tag1 ((("Sexp", 808)), "t"), 0, (0)), 100000000, 0, -227); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -228)], (0)), 100000000, 0, -226), 0), 100000000, 0, -225), 0, (("src/csexp.mli", 374, 13357, 13385), ("src/csexp.mli", 374, 13357, 13411), 0), 0, Tag1 ("Csexp", 7)), 0); (("input_opt", 851), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "in_channel"), 0, (0)), 100000000, 0, -224), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("Sexp", 808)), "t"), 0, (0)), 100000000, 0, -222)], (0)), 100000000, 0, -221); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -223)], (0)), 100000000, 0, -220), 0), 100000000, 0, -219), 0, (("src/csexp.mli", 374, 13357, 13385), ("src/csexp.mli", 374, 13357, 13411), 0), 0, Tag1 ("Csexp", 8)), 0); (("input_many", 852), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "in_channel"), 0, (0)), 100000000, 0, -218), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Sexp", 808)), "t"), 0, (0)), 100000000, 0, -216)], (0)), 100000000, 0, -215); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -217)], (0)), 100000000, 0, -214), 0), 100000000, 0, -213), 0, (("src/csexp.mli", 374, 13357, 13385), ("src/csexp.mli", 374, 13357, 13411), 0), 0, Tag1 ("Csexp", 9)), 0); (("serialised_length", 853), ((Tag1 (0, (Tag3 (Tag1 ((("Sexp", 808)), "t"), 0, (0)), 100000000, 0, -212), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -211), 0), 100000000, 0, -210), 0, (("src/csexp.mli", 374, 13357, 13385), ("src/csexp.mli", 374, 13357, 13411), 0), 0, Tag1 ("Csexp", 10)), 0); (("to_string", 854), ((Tag1 (0, (Tag3 (Tag1 ((("Sexp", 808)), "t"), 0, (0)), 100000000, 0, -209), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -208), 0), 100000000, 0, -207), 0, (("src/csexp.mli", 374, 13357, 13385), ("src/csexp.mli", 374, 13357, 13411), 0), 0, Tag1 ("Csexp", 11)), 0); (("to_buffer", 855), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Buffer"), "t"), 0, (0)), 100000000, 0, -206), (Tag1 (0, (Tag3 (Tag1 ((("Sexp", 808)), "t"), 0, (0)), 100000000, 0, -205), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -204), 0), 100000000, 0, -203), 0), 100000000, 0, -202), 0, (("src/csexp.mli", 374, 13357, 13385), ("src/csexp.mli", 374, 13357, 13411), 0), 0, Tag1 ("Csexp", 12)), 0); (("to_channel", 856), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -201), (Tag1 (0, (Tag3 (Tag1 ((("Sexp", 808)), "t"), 0, (0)), 100000000, 0, -200), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -199), 0), 100000000, 0, -198), 0), 100000000, 0, -197), 0, (("src/csexp.mli", 374, 13357, 13385), ("src/csexp.mli", 374, 13357, 13411), 0), 0, Tag1 ("Csexp", 13)), 0); Tag3 (("Parser", 857), 0, (Tag1 ([Tag2 (("Parse_error", 861), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -246)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Csexp", 14)), 2, 0); (("premature_end_of_input", 862), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -245), 0, (("src/csexp.mli", 374, 13357, 13385), ("src/csexp.mli", 374, 13357, 13411), 0), 0, Tag1 ("Csexp", 15)), 0); Tag3 (("Lexer", 863), 0, (Tag1 ([Tag1 (("t", 865), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/csexp.mli", 374, 13357, 13385), ("src/csexp.mli", 374, 13357, 13411), 0), 0, 0, 0, Tag1 ("Csexp", 16)), 1, 0); (("create", 866), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -273), (Tag3 ((("t", 865)), 0, (0)), 100000000, 0, -272), 0), 100000000, 0, -271), 0, (("src/csexp.mli", 374, 13357, 13385), ("src/csexp.mli", 374, 13357, 13411), 0), 0, Tag1 ("Csexp", 17)), 0); Tag1 (("token", 867), ([((("_")), 100000000, 0, -270)], 1, Tag1 ([(("Await", 329), (0), ((Tag3 ((("token", 867)), [(Tag8 (([("other", (0))], ((0), 100000000, 0, -259), 0, 0, 0)), 100000000, 0, -258)], (0)), 100000000, 0, -257)), (("src/csexp.mli", 374, 13357, 13385), ("src/csexp.mli", 374, 13357, 13411), 0), 0, Tag1 ("Csexp", 19)); (("Lparen", 330), (0), ((Tag3 ((("token", 867)), [(Tag8 (([("other", (0))], ((0), 100000000, 0, -262), 0, 0, 0)), 100000000, 0, -261)], (0)), 100000000, 0, -260)), (("src/csexp.mli", 374, 13357, 13385), ("src/csexp.mli", 374, 13357, 13411), 0), 0, Tag1 ("Csexp", 20)); (("Rparen", 331), (0), ((Tag3 ((("token", 867)), [(Tag8 (([("other", (0))], ((0), 100000000, 0, -265), 0, 0, 0)), 100000000, 0, -264)], (0)), 100000000, 0, -263)), (("src/csexp.mli", 374, 13357, 13385), ("src/csexp.mli", 374, 13357, 13411), 0), 0, Tag1 ("Csexp", 21)); (("Atom", 332), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -269)]), ((Tag3 ((("token", 867)), [(Tag8 (([("atom", (0))], ((0), 100000000, 0, -268), 0, 0, 0)), 100000000, 0, -267)], (0)), 100000000, 0, -266)), (("src/csexp.mli", 374, 13357, 13385), ("src/csexp.mli", 374, 13357, 13411), 0), 0, Tag1 ("Csexp", 22))], 0), 1, 0, [63], [0], 0, 0, (("src/csexp.mli", 374, 13357, 13385), ("src/csexp.mli", 374, 13357, 13411), 0), 0, 0, 0, Tag1 ("Csexp", 18)), 1, 0); (("feed", 868), ((Tag1 (0, (Tag3 ((("t", 865)), 0, (0)), 100000000, 0, -256), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -255), (Tag3 ((("token", 867)), [(Tag8 (([("atom", (0)); ("other", (0))], (0, 100000000, 0, -254), 1, 0, 0)), 100000000, 0, -253)], (0)), 100000000, 0, -252), 0), 100000000, 0, -251), 0), 100000000, 0, -250), 0, (("src/csexp.mli", 374, 13357, 13385), ("src/csexp.mli", 374, 13357, 13411), 0), 0, Tag1 ("Csexp", 23)), 0); (("feed_eoi", 869), ((Tag1 (0, (Tag3 ((("t", 865)), 0, (0)), 100000000, 0, -249), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -248), 0), 100000000, 0, -247), 0, (("src/csexp.mli", 374, 13357, 13385), ("src/csexp.mli", 374, 13357, 13411), 0), 0, Tag1 ("Csexp", 24)), 0)]), 0, (("src/csexp.mli", 374, 13357, 13385), ("src/csexp.mli", 374, 13357, 13411), 0), Tag1 ("Csexp", 25)), 0, 0); Tag3 (("Stack", 864), 0, (Tag1 ([Tag1 (("t", 870), (0, 0, Tag1 ([(("Empty", 337), (0), 0, (("src/csexp.mli", 374, 13357, 13385), ("src/csexp.mli", 374, 13357, 13411), 0), 0, Tag1 ("Csexp", 27)); (("Open", 338), ([(Tag3 ((("t", 870)), 0, (0)), 100000000, 0, -296)]), 0, (("src/csexp.mli", 374, 13357, 13385), ("src/csexp.mli", 374, 13357, 13411), 0), 0, Tag1 ("Csexp", 28)); (("Sexp", 339), ([(Tag3 (Tag1 ((("Sexp", 808)), "t"), 0, (0)), 100000000, 0, -297); (Tag3 ((("t", 870)), 0, (0)), 100000000, 0, -298)]), 0, (("src/csexp.mli", 374, 13357, 13385), ("src/csexp.mli", 374, 13357, 13411), 0), 0, Tag1 ("Csexp", 29))], 0), 1, 0, 0, 0, 0, 0, (("src/csexp.mli", 374, 13357, 13385), ("src/csexp.mli", 374, 13357, 13411), 0), 0, 0, 0, Tag1 ("Csexp", 26)), 1, 0); (("to_list", 871), ((Tag1 (0, (Tag3 ((("t", 870)), 0, (0)), 100000000, 0, -295), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Sexp", 808)), "t"), 0, (0)), 100000000, 0, -294)], (0)), 100000000, 0, -293), 0), 100000000, 0, -292), 0, (("src/csexp.mli", 374, 13357, 13385), ("src/csexp.mli", 374, 13357, 13411), 0), 0, Tag1 ("Csexp", 30)), 0); (("open_paren", 872), ((Tag1 (0, (Tag3 ((("t", 870)), 0, (0)), 100000000, 0, -291), (Tag3 ((("t", 870)), 0, (0)), 100000000, 0, -290), 0), 100000000, 0, -289), 0, (("src/csexp.mli", 374, 13357, 13385), ("src/csexp.mli", 374, 13357, 13411), 0), 0, Tag1 ("Csexp", 31)), 0); (("close_paren", 873), ((Tag1 (0, (Tag3 ((("t", 870)), 0, (0)), 100000000, 0, -288), (Tag3 ((("t", 870)), 0, (0)), 100000000, 0, -287), 0), 100000000, 0, -286), 0, (("src/csexp.mli", 374, 13357, 13385), ("src/csexp.mli", 374, 13357, 13411), 0), 0, Tag1 ("Csexp", 32)), 0); (("add_atom", 874), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -285), (Tag1 (0, (Tag3 ((("t", 870)), 0, (0)), 100000000, 0, -284), (Tag3 ((("t", 870)), 0, (0)), 100000000, 0, -283), 0), 100000000, 0, -282), 0), 100000000, 0, -281), 0, (("src/csexp.mli", 374, 13357, 13385), ("src/csexp.mli", 374, 13357, 13411), 0), 0, Tag1 ("Csexp", 33)), 0); (("add_token", 875), ((Tag1 (0, (Tag3 (Tag1 ((("Lexer", 863)), "token"), [(Tag8 (([("other", (0))], (0, 100000000, 0, -280), 1, 0, 0)), 100000000, 0, -279)], (0)), 100000000, 0, -278), (Tag1 (0, (Tag3 ((("t", 870)), 0, (0)), 100000000, 0, -277), (Tag3 ((("t", 870)), 0, (0)), 100000000, 0, -276), 0), 100000000, 0, -275), 0), 100000000, 0, -274), 0, (("src/csexp.mli", 374, 13357, 13385), ("src/csexp.mli", 374, 13357, 13411), 0), 0, Tag1 ("Csexp", 34)), 0)]), 0, (("src/csexp.mli", 374, 13357, 13385), ("src/csexp.mli", 374, 13357, 13411), 0), Tag1 ("Csexp", 35)), 0, 0)]), 0, (("src/csexp.mli", 374, 13357, 13385), ("src/csexp.mli", 374, 13357, 13411), 0), Tag1 ("Csexp", 36)), 0, 0); Tag4 (("Input", 858), ((Tag1 ([Tag1 (("t", 876), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/csexp.mli", 374, 13357, 13385), ("src/csexp.mli", 374, 13357, 13411), 0), 0, 0, 0, Tag1 ("Csexp", 37)), 1, 0); Tag3 (("Monad", 877), 0, (Tag1 ([Tag1 (("t", 880), ([((("a")), 100000000, 0, -324)], 1, 0, 1, 0, [7], [2], 0, 0, (("src/csexp.mli", 374, 13357, 13385), ("src/csexp.mli", 374, 13357, 13411), 0), 0, 0, 0, Tag1 ("Csexp", 38)), 1, 0); (("return", 881), ((Tag1 (0, ((("a")), 100000000, 0, -323), (Tag3 ((("t", 880)), [((("a")), 100000000, 0, -323)], (0)), 100000000, 0, -322), 0), 100000000, 0, -321), 0, (("src/csexp.mli", 374, 13357, 13385), ("src/csexp.mli", 374, 13357, 13411), 0), 0, Tag1 ("Csexp", 39)), 0); (("bind", 882), ((Tag1 (0, (Tag3 ((("t", 880)), [((("a")), 100000000, 0, -319)], (0)), 100000000, 0, -320), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -319), (Tag3 ((("t", 880)), [((("b")), 100000000, 0, -316)], (0)), 100000000, 0, -318), 0), 100000000, 0, -317), (Tag3 ((("t", 880)), [((("b")), 100000000, 0, -316)], (0)), 100000000, 0, -315), 0), 100000000, 0, -314), 0), 100000000, 0, -313), 0, (("src/csexp.mli", 374, 13357, 13385), ("src/csexp.mli", 374, 13357, 13411), 0), 0, Tag1 ("Csexp", 40)), 0)]), 0, (("src/csexp.mli", 374, 13357, 13385), ("src/csexp.mli", 374, 13357, 13411), 0), Tag1 ("Csexp", 41)), 0, 0); (("read_string", 878), ((Tag1 (0, (Tag3 ((("t", 876)), 0, (0)), 100000000, 0, -312), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -311), (Tag3 (Tag1 ((("Monad", 877)), "t"), [(Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -309); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -310)], (0)), 100000000, 0, -308)], (0)), 100000000, 0, -307), 0), 100000000, 0, -306), 0), 100000000, 0, -305), 0, (("src/csexp.mli", 374, 13357, 13385), ("src/csexp.mli", 374, 13357, 13411), 0), 0, Tag1 ("Csexp", 42)), 0); (("read_char", 879), ((Tag1 (0, (Tag3 ((("t", 876)), 0, (0)), 100000000, 0, -304), (Tag3 (Tag1 ((("Monad", 877)), "t"), [(Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -302); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -303)], (0)), 100000000, 0, -301)], (0)), 100000000, 0, -300), 0), 100000000, 0, -299), 0, (("src/csexp.mli", 374, 13357, 13385), ("src/csexp.mli", 374, 13357, 13411), 0), 0, Tag1 ("Csexp", 43)), 0)])), [(("deprecated", (("src/csexp.mli", 362, 13054, 13059), ("src/csexp.mli", 362, 13054, 13069), 0)), ([([(Tag1 (Tag2 ("Use Parser module instead", (("src/csexp.mli", 362, 13054, 13071), ("src/csexp.mli", 362, 13054, 13096), 0), 0)), (("src/csexp.mli", 362, 13054, 13070), ("src/csexp.mli", 362, 13054, 13097), 0), 0, 0)], (("src/csexp.mli", 362, 13054, 13070), ("src/csexp.mli", 362, 13054, 13097), 0))]), (("src/csexp.mli", 362, 13054, 13056), ("src/csexp.mli", 362, 13054, 13098), 0))], (("src/csexp.mli", 374, 13357, 13385), ("src/csexp.mli", 374, 13357, 13411), 0), Tag1 ("Csexp", 44)), 0); Tag3 (("Make_parser", 859), 0, (Tag2 (((("Input", 860)), ((("Input", 858)))), Tag1 ([(("parse", 883), ((Tag1 (0, (Tag3 (Tag1 ((("Input", 860)), "t"), 0, (0)), 100000000, 0, -337), (Tag3 (Tag1 (Tag1 ((("Input", 860)), "Monad"), "t"), [(Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 (Tag1 ((("Sexp", 808)), "t"), 0, (0)), 100000000, 0, -335); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -336)], (0)), 100000000, 0, -334)], (0)), 100000000, 0, -333), 0), 100000000, 0, -332), 0, (("src/csexp.mli", 374, 13357, 13385), ("src/csexp.mli", 374, 13357, 13411), 0), 0, Tag1 ("Csexp", 46)), 0); (("parse_many", 884), ((Tag1 (0, (Tag3 (Tag1 ((("Input", 860)), "t"), 0, (0)), 100000000, 0, -331), (Tag3 (Tag1 (Tag1 ((("Input", 860)), "Monad"), "t"), [(Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Sexp", 808)), "t"), 0, (0)), 100000000, 0, -329)], (0)), 100000000, 0, -328); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -330)], (0)), 100000000, 0, -327)], (0)), 100000000, 0, -326), 0), 100000000, 0, -325), 0, (("src/csexp.mli", 374, 13357, 13385), ("src/csexp.mli", 374, 13357, 13411), 0), 0, Tag1 ("Csexp", 47)), 0)])), [(("deprecated", (("src/csexp.mli", 371, 13307, 13312), ("src/csexp.mli", 371, 13307, 13322), 0)), ([([(Tag1 (Tag2 ("Use Parser module instead", (("src/csexp.mli", 371, 13307, 13324), ("src/csexp.mli", 371, 13307, 13349), 0), 0)), (("src/csexp.mli", 371, 13307, 13323), ("src/csexp.mli", 371, 13307, 13350), 0), 0, 0)], (("src/csexp.mli", 371, 13307, 13323), ("src/csexp.mli", 371, 13307, 13350), 0))]), (("src/csexp.mli", 371, 13307, 13309), ("src/csexp.mli", 371, 13307, 13351), 0))], (("src/csexp.mli", 374, 13357, 13385), ("src/csexp.mli", 374, 13357, 13411), 0), Tag1 ("Csexp", 48)), 0, 0)])), 0, (("src/csexp.mli", 374, 13357, 13357), ("src/csexp.mli", 374, 13357, 13411), 0), Tag1 ("Csexp", 52)), 0, 0); Tag1 (("t", 794), (0, 0, Tag1 ([(("Atom", 270), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -50)]), 0, (("src/csexp.mli", 25, 913, 917), ("src/csexp.mli", 25, 913, 933), 0), 0, Tag1 ("Csexp", 1)); (("List", 271), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 794)), 0, (0)), 100000000, 0, -52)], (0)), 100000000, 0, -51)]), 0, (("src/csexp.mli", 26, 934, 938), ("src/csexp.mli", 26, 934, 954), 0), 0, Tag1 ("Csexp", 2))], 0), 1, 0, 0, 0, 0, 0, (("src/csexp.mli", 24, 902, 904), ("src/csexp.mli", 26, 934, 954), 0), 0, 0, 0, Tag1 ("Csexp", 0)), 1, 0); (("parse_string", 795), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -49), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((("t", 794)), 0, (0)), 100000000, 0, -45); (Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -47); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -48)]), 100000000, 0, -46)], (0)), 100000000, 0, -44), 0), 100000000, 0, -43), 0, (("src/csexp.mli", 378, 13427, 13435), ("src/csexp.mli", 378, 13427, 13456), 0), 0, Tag1 ("Csexp", 5)), 0); (("parse_string_many", 796), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -42), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 794)), 0, (0)), 100000000, 0, -38)], (0)), 100000000, 0, -37); (Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -40); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -41)]), 100000000, 0, -39)], (0)), 100000000, 0, -36), 0), 100000000, 0, -35), 0, (("src/csexp.mli", 378, 13427, 13435), ("src/csexp.mli", 378, 13427, 13456), 0), 0, Tag1 ("Csexp", 6)), 0); (("input", 797), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "in_channel"), 0, (0)), 100000000, 0, -34), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((("t", 794)), 0, (0)), 100000000, 0, -32); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -33)], (0)), 100000000, 0, -31), 0), 100000000, 0, -30), 0, (("src/csexp.mli", 378, 13427, 13435), ("src/csexp.mli", 378, 13427, 13456), 0), 0, Tag1 ("Csexp", 7)), 0); (("input_opt", 798), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "in_channel"), 0, (0)), 100000000, 0, -29), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 794)), 0, (0)), 100000000, 0, -27)], (0)), 100000000, 0, -26); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -28)], (0)), 100000000, 0, -25), 0), 100000000, 0, -24), 0, (("src/csexp.mli", 378, 13427, 13435), ("src/csexp.mli", 378, 13427, 13456), 0), 0, Tag1 ("Csexp", 8)), 0); (("input_many", 799), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "in_channel"), 0, (0)), 100000000, 0, -23), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 794)), 0, (0)), 100000000, 0, -21)], (0)), 100000000, 0, -20); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -22)], (0)), 100000000, 0, -19), 0), 100000000, 0, -18), 0, (("src/csexp.mli", 378, 13427, 13435), ("src/csexp.mli", 378, 13427, 13456), 0), 0, Tag1 ("Csexp", 9)), 0); (("serialised_length", 800), ((Tag1 (0, (Tag3 ((("t", 794)), 0, (0)), 100000000, 0, -17), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -16), 0), 100000000, 0, -15), 0, (("src/csexp.mli", 378, 13427, 13435), ("src/csexp.mli", 378, 13427, 13456), 0), 0, Tag1 ("Csexp", 10)), 0); (("to_string", 801), ((Tag1 (0, (Tag3 ((("t", 794)), 0, (0)), 100000000, 0, -14), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -13), 0), 100000000, 0, -12), 0, (("src/csexp.mli", 378, 13427, 13435), ("src/csexp.mli", 378, 13427, 13456), 0), 0, Tag1 ("Csexp", 11)), 0); (("to_buffer", 802), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Buffer"), "t"), 0, (0)), 100000000, 0, -11), (Tag1 (0, (Tag3 ((("t", 794)), 0, (0)), 100000000, 0, -10), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0), 100000000, 0, -7), 0, (("src/csexp.mli", 378, 13427, 13435), ("src/csexp.mli", 378, 13427, 13456), 0), 0, Tag1 ("Csexp", 12)), 0); (("to_channel", 803), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -6), (Tag1 (0, (Tag3 ((("t", 794)), 0, (0)), 100000000, 0, -5), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/csexp.mli", 378, 13427, 13435), ("src/csexp.mli", 378, 13427, 13456), 0), 0, Tag1 ("Csexp", 13)), 0); Tag3 (("Parser", 804), 0, (Tag1 ([Tag2 (("Parse_error", 885), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -339)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Csexp", 14)), 2, 0); (("premature_end_of_input", 886), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -338), 0, (("src/csexp.mli", 378, 13427, 13435), ("src/csexp.mli", 378, 13427, 13456), 0), 0, Tag1 ("Csexp", 15)), 0); Tag3 (("Lexer", 887), 0, (Tag1 ([Tag1 (("t", 889), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/csexp.mli", 378, 13427, 13435), ("src/csexp.mli", 378, 13427, 13456), 0), 0, 0, 0, Tag1 ("Csexp", 16)), 1, 0); (("create", 890), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -366), (Tag3 ((("t", 889)), 0, (0)), 100000000, 0, -365), 0), 100000000, 0, -364), 0, (("src/csexp.mli", 378, 13427, 13435), ("src/csexp.mli", 378, 13427, 13456), 0), 0, Tag1 ("Csexp", 17)), 0); Tag1 (("token", 891), ([((("_")), 100000000, 0, -363)], 1, Tag1 ([(("Await", 329), (0), ((Tag3 ((("token", 891)), [(Tag8 (([("other", (0))], ((0), 100000000, 0, -352), 0, 0, 0)), 100000000, 0, -351)], (0)), 100000000, 0, -350)), (("src/csexp.mli", 378, 13427, 13435), ("src/csexp.mli", 378, 13427, 13456), 0), 0, Tag1 ("Csexp", 19)); (("Lparen", 330), (0), ((Tag3 ((("token", 891)), [(Tag8 (([("other", (0))], ((0), 100000000, 0, -355), 0, 0, 0)), 100000000, 0, -354)], (0)), 100000000, 0, -353)), (("src/csexp.mli", 378, 13427, 13435), ("src/csexp.mli", 378, 13427, 13456), 0), 0, Tag1 ("Csexp", 20)); (("Rparen", 331), (0), ((Tag3 ((("token", 891)), [(Tag8 (([("other", (0))], ((0), 100000000, 0, -358), 0, 0, 0)), 100000000, 0, -357)], (0)), 100000000, 0, -356)), (("src/csexp.mli", 378, 13427, 13435), ("src/csexp.mli", 378, 13427, 13456), 0), 0, Tag1 ("Csexp", 21)); (("Atom", 332), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -362)]), ((Tag3 ((("token", 891)), [(Tag8 (([("atom", (0))], ((0), 100000000, 0, -361), 0, 0, 0)), 100000000, 0, -360)], (0)), 100000000, 0, -359)), (("src/csexp.mli", 378, 13427, 13435), ("src/csexp.mli", 378, 13427, 13456), 0), 0, Tag1 ("Csexp", 22))], 0), 1, 0, [63], [0], 0, 0, (("src/csexp.mli", 378, 13427, 13435), ("src/csexp.mli", 378, 13427, 13456), 0), 0, 0, 0, Tag1 ("Csexp", 18)), 1, 0); (("feed", 892), ((Tag1 (0, (Tag3 ((("t", 889)), 0, (0)), 100000000, 0, -349), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -348), (Tag3 ((("token", 891)), [(Tag8 (([("atom", (0)); ("other", (0))], (0, 100000000, 0, -347), 1, 0, 0)), 100000000, 0, -346)], (0)), 100000000, 0, -345), 0), 100000000, 0, -344), 0), 100000000, 0, -343), 0, (("src/csexp.mli", 378, 13427, 13435), ("src/csexp.mli", 378, 13427, 13456), 0), 0, Tag1 ("Csexp", 23)), 0); (("feed_eoi", 893), ((Tag1 (0, (Tag3 ((("t", 889)), 0, (0)), 100000000, 0, -342), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -341), 0), 100000000, 0, -340), 0, (("src/csexp.mli", 378, 13427, 13435), ("src/csexp.mli", 378, 13427, 13456), 0), 0, Tag1 ("Csexp", 24)), 0)]), 0, (("src/csexp.mli", 378, 13427, 13435), ("src/csexp.mli", 378, 13427, 13456), 0), Tag1 ("Csexp", 25)), 0, 0); Tag3 (("Stack", 888), 0, (Tag1 ([Tag1 (("t", 894), (0, 0, Tag1 ([(("Empty", 337), (0), 0, (("src/csexp.mli", 378, 13427, 13435), ("src/csexp.mli", 378, 13427, 13456), 0), 0, Tag1 ("Csexp", 27)); (("Open", 338), ([(Tag3 ((("t", 894)), 0, (0)), 100000000, 0, -389)]), 0, (("src/csexp.mli", 378, 13427, 13435), ("src/csexp.mli", 378, 13427, 13456), 0), 0, Tag1 ("Csexp", 28)); (("Sexp", 339), ([(Tag3 ((("t", 794)), 0, (0)), 100000000, 0, -390); (Tag3 ((("t", 894)), 0, (0)), 100000000, 0, -391)]), 0, (("src/csexp.mli", 378, 13427, 13435), ("src/csexp.mli", 378, 13427, 13456), 0), 0, Tag1 ("Csexp", 29))], 0), 1, 0, 0, 0, 0, 0, (("src/csexp.mli", 378, 13427, 13435), ("src/csexp.mli", 378, 13427, 13456), 0), 0, 0, 0, Tag1 ("Csexp", 26)), 1, 0); (("to_list", 895), ((Tag1 (0, (Tag3 ((("t", 894)), 0, (0)), 100000000, 0, -388), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 794)), 0, (0)), 100000000, 0, -387)], (0)), 100000000, 0, -386), 0), 100000000, 0, -385), 0, (("src/csexp.mli", 378, 13427, 13435), ("src/csexp.mli", 378, 13427, 13456), 0), 0, Tag1 ("Csexp", 30)), 0); (("open_paren", 896), ((Tag1 (0, (Tag3 ((("t", 894)), 0, (0)), 100000000, 0, -384), (Tag3 ((("t", 894)), 0, (0)), 100000000, 0, -383), 0), 100000000, 0, -382), 0, (("src/csexp.mli", 378, 13427, 13435), ("src/csexp.mli", 378, 13427, 13456), 0), 0, Tag1 ("Csexp", 31)), 0); (("close_paren", 897), ((Tag1 (0, (Tag3 ((("t", 894)), 0, (0)), 100000000, 0, -381), (Tag3 ((("t", 894)), 0, (0)), 100000000, 0, -380), 0), 100000000, 0, -379), 0, (("src/csexp.mli", 378, 13427, 13435), ("src/csexp.mli", 378, 13427, 13456), 0), 0, Tag1 ("Csexp", 32)), 0); (("add_atom", 898), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -378), (Tag1 (0, (Tag3 ((("t", 894)), 0, (0)), 100000000, 0, -377), (Tag3 ((("t", 894)), 0, (0)), 100000000, 0, -376), 0), 100000000, 0, -375), 0), 100000000, 0, -374), 0, (("src/csexp.mli", 378, 13427, 13435), ("src/csexp.mli", 378, 13427, 13456), 0), 0, Tag1 ("Csexp", 33)), 0); (("add_token", 899), ((Tag1 (0, (Tag3 (Tag1 ((("Lexer", 887)), "token"), [(Tag8 (([("other", (0))], (0, 100000000, 0, -373), 1, 0, 0)), 100000000, 0, -372)], (0)), 100000000, 0, -371), (Tag1 (0, (Tag3 ((("t", 894)), 0, (0)), 100000000, 0, -370), (Tag3 ((("t", 894)), 0, (0)), 100000000, 0, -369), 0), 100000000, 0, -368), 0), 100000000, 0, -367), 0, (("src/csexp.mli", 378, 13427, 13435), ("src/csexp.mli", 378, 13427, 13456), 0), 0, Tag1 ("Csexp", 34)), 0)]), 0, (("src/csexp.mli", 378, 13427, 13435), ("src/csexp.mli", 378, 13427, 13456), 0), Tag1 ("Csexp", 35)), 0, 0)]), 0, (("src/csexp.mli", 378, 13427, 13435), ("src/csexp.mli", 378, 13427, 13456), 0), Tag1 ("Csexp", 36)), 0, 0); Tag4 (("Input", 805), ((Tag1 ([Tag1 (("t", 900), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/csexp.mli", 378, 13427, 13435), ("src/csexp.mli", 378, 13427, 13456), 0), 0, 0, 0, Tag1 ("Csexp", 37)), 1, 0); Tag3 (("Monad", 901), 0, (Tag1 ([Tag1 (("t", 904), ([((("a")), 100000000, 0, -417)], 1, 0, 1, 0, [7], [2], 0, 0, (("src/csexp.mli", 378, 13427, 13435), ("src/csexp.mli", 378, 13427, 13456), 0), 0, 0, 0, Tag1 ("Csexp", 38)), 1, 0); (("return", 905), ((Tag1 (0, ((("a")), 100000000, 0, -416), (Tag3 ((("t", 904)), [((("a")), 100000000, 0, -416)], (0)), 100000000, 0, -415), 0), 100000000, 0, -414), 0, (("src/csexp.mli", 378, 13427, 13435), ("src/csexp.mli", 378, 13427, 13456), 0), 0, Tag1 ("Csexp", 39)), 0); (("bind", 906), ((Tag1 (0, (Tag3 ((("t", 904)), [((("a")), 100000000, 0, -412)], (0)), 100000000, 0, -413), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -412), (Tag3 ((("t", 904)), [((("b")), 100000000, 0, -409)], (0)), 100000000, 0, -411), 0), 100000000, 0, -410), (Tag3 ((("t", 904)), [((("b")), 100000000, 0, -409)], (0)), 100000000, 0, -408), 0), 100000000, 0, -407), 0), 100000000, 0, -406), 0, (("src/csexp.mli", 378, 13427, 13435), ("src/csexp.mli", 378, 13427, 13456), 0), 0, Tag1 ("Csexp", 40)), 0)]), 0, (("src/csexp.mli", 378, 13427, 13435), ("src/csexp.mli", 378, 13427, 13456), 0), Tag1 ("Csexp", 41)), 0, 0); (("read_string", 902), ((Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -405), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -404), (Tag3 (Tag1 ((("Monad", 901)), "t"), [(Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -402); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -403)], (0)), 100000000, 0, -401)], (0)), 100000000, 0, -400), 0), 100000000, 0, -399), 0), 100000000, 0, -398), 0, (("src/csexp.mli", 378, 13427, 13435), ("src/csexp.mli", 378, 13427, 13456), 0), 0, Tag1 ("Csexp", 42)), 0); (("read_char", 903), ((Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -397), (Tag3 (Tag1 ((("Monad", 901)), "t"), [(Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -395); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -396)], (0)), 100000000, 0, -394)], (0)), 100000000, 0, -393), 0), 100000000, 0, -392), 0, (("src/csexp.mli", 378, 13427, 13435), ("src/csexp.mli", 378, 13427, 13456), 0), 0, Tag1 ("Csexp", 43)), 0)])), [(("deprecated", (("src/csexp.mli", 362, 13054, 13059), ("src/csexp.mli", 362, 13054, 13069), 0)), ([([(Tag1 (Tag2 ("Use Parser module instead", (("src/csexp.mli", 362, 13054, 13071), ("src/csexp.mli", 362, 13054, 13096), 0), 0)), (("src/csexp.mli", 362, 13054, 13070), ("src/csexp.mli", 362, 13054, 13097), 0), 0, 0)], (("src/csexp.mli", 362, 13054, 13070), ("src/csexp.mli", 362, 13054, 13097), 0))]), (("src/csexp.mli", 362, 13054, 13056), ("src/csexp.mli", 362, 13054, 13098), 0))], (("src/csexp.mli", 378, 13427, 13435), ("src/csexp.mli", 378, 13427, 13456), 0), Tag1 ("Csexp", 44)), 0); Tag3 (("Make_parser", 806), 0, (Tag2 (((("Input", 807)), ((("Input", 805)))), Tag1 ([(("parse", 907), ((Tag1 (0, (Tag3 (Tag1 ((("Input", 807)), "t"), 0, (0)), 100000000, 0, -430), (Tag3 (Tag1 (Tag1 ((("Input", 807)), "Monad"), "t"), [(Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((("t", 794)), 0, (0)), 100000000, 0, -428); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -429)], (0)), 100000000, 0, -427)], (0)), 100000000, 0, -426), 0), 100000000, 0, -425), 0, (("src/csexp.mli", 378, 13427, 13435), ("src/csexp.mli", 378, 13427, 13456), 0), 0, Tag1 ("Csexp", 46)), 0); (("parse_many", 908), ((Tag1 (0, (Tag3 (Tag1 ((("Input", 807)), "t"), 0, (0)), 100000000, 0, -424), (Tag3 (Tag1 (Tag1 ((("Input", 807)), "Monad"), "t"), [(Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 794)), 0, (0)), 100000000, 0, -422)], (0)), 100000000, 0, -421); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -423)], (0)), 100000000, 0, -420)], (0)), 100000000, 0, -419), 0), 100000000, 0, -418), 0, (("src/csexp.mli", 378, 13427, 13435), ("src/csexp.mli", 378, 13427, 13456), 0), 0, Tag1 ("Csexp", 47)), 0)])), [(("deprecated", (("src/csexp.mli", 371, 13307, 13312), ("src/csexp.mli", 371, 13307, 13322), 0)), ([([(Tag1 (Tag2 ("Use Parser module instead", (("src/csexp.mli", 371, 13307, 13324), ("src/csexp.mli", 371, 13307, 13349), 0), 0)), (("src/csexp.mli", 371, 13307, 13323), ("src/csexp.mli", 371, 13307, 13350), 0), 0, 0)], (("src/csexp.mli", 371, 13307, 13323), ("src/csexp.mli", 371, 13307, 13350), 0))]), (("src/csexp.mli", 371, 13307, 13309), ("src/csexp.mli", 371, 13307, 13351), 0))], (("src/csexp.mli", 378, 13427, 13435), ("src/csexp.mli", 378, 13427, 13456), 0), Tag1 ("Csexp", 48)), 0, 0)], "Csexp", [("Csexp", ("\137\203\236\004`\227\026\228\022\173~%\155\141\220\232")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

    end

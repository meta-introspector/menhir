type ('a, 'b) result = ('a, 'b) result = Ok of 'a | Error of 'b
val ( >>= ) : ('a, 'b) result -> ('a -> ('c, 'b) result) -> ('c, 'b) result
val ( >>| ) : ('a, 'b) result -> ('a -> 'c) -> ('c, 'b) result
module R :
  sig
    type ('a, 'b) t = ('a, 'b) result
    val ok : 'a -> ('a, 'b) result
    val error : 'b -> ('a, 'b) result
    val reword_error : ('b -> 'c) -> ('a, 'b) result -> ('a, 'c) result
    val get_ok : ('a, 'b) result -> 'a
    val get_error : ('a, 'b) result -> 'b
    val return : 'a -> ('a, 'b) result
    val fail : 'b -> ('a, 'b) result
    val bind : ('a, 'b) result -> ('a -> ('c, 'b) result) -> ('c, 'b) result
    val map : ('a -> 'c) -> ('a, 'b) result -> ('c, 'b) result
    val join : (('a, 'b) result, 'b) result -> ('a, 'b) result
    val ( >>= ) :
      ('a, 'b) result -> ('a -> ('c, 'b) result) -> ('c, 'b) result
    val ( >>| ) : ('a, 'b) result -> ('a -> 'c) -> ('c, 'b) result
    module Infix :
      sig
        val ( >>= ) :
          ('a, 'b) result -> ('a -> ('c, 'b) result) -> ('c, 'b) result
        val ( >>| ) : ('a, 'b) result -> ('a -> 'c) -> ('c, 'b) result
      end
    type msg = [ `Msg of string ]
    val msg : string -> [> msg ]
    val msgf : ('a, Format.formatter, unit, [> msg ]) format4 -> 'a
    val pp_msg : Format.formatter -> msg -> unit
    val error_msg : string -> ('a, [> msg ]) result
    val error_msgf :
      ('a, Format.formatter, unit, ('b, [> msg ]) result) format4 -> 'a
    val reword_error_msg :
      ?replace:bool ->
      (string -> msg) -> ('a, msg) result -> ('a, [> msg ]) result
    val error_to_msg :
      pp_error:(Format.formatter -> 'b -> unit) ->
      ('a, 'b) result -> ('a, [> msg ]) result
    val error_msg_to_invalid_arg : ('a, msg) result -> 'a
    val open_error_msg : ('a, msg) result -> ('a, [> msg ]) result
    val failwith_error_msg : ('a, msg) result -> 'a
    type exn_trap = [ `Exn_trap of exn * Printexc.raw_backtrace ]
    val pp_exn_trap : Format.formatter -> exn_trap -> unit
    val trap_exn : ('a -> 'b) -> 'a -> ('b, [> exn_trap ]) result
    val error_exn_trap_to_msg :
      ('a, exn_trap) result -> ('a, [> msg ]) result
    val open_error_exn_trap :
      ('a, exn_trap) result -> ('a, [> exn_trap ]) result
    val pp :
      ok:(Format.formatter -> 'a -> unit) ->
      error:(Format.formatter -> 'b -> unit) ->
      Format.formatter -> ('a, 'b) result -> unit
    val dump :
      ok:(Format.formatter -> 'a -> unit) ->
      error:(Format.formatter -> 'b -> unit) ->
      Format.formatter -> ('a, 'b) result -> unit
    val is_ok : ('a, 'b) result -> bool
    val is_error : ('a, 'b) result -> bool
    val equal :
      ok:('a -> 'a -> bool) ->
      error:('b -> 'b -> bool) -> ('a, 'b) result -> ('a, 'b) result -> bool
    val compare :
      ok:('a -> 'a -> int) ->
      error:('b -> 'b -> int) -> ('a, 'b) result -> ('a, 'b) result -> int
    val to_option : ('a, 'b) result -> 'a option
    val of_option :
      none:(unit -> ('a, 'b) result) -> 'a option -> ('a, 'b) result
    val to_presult : ('a, 'b) result -> [> `Error of 'b | `Ok of 'a ]
    val of_presult : [< `Error of 'b | `Ok of 'a ] -> ('a, 'b) result
    val ignore_error : use:('b -> 'a) -> ('a, 'b) result -> 'a
    val kignore_error :
      use:('b -> ('a, 'c) result) -> ('a, 'b) result -> ('a, 'c) result("DEBUG:rule", [Tag1 (("result", 568), ([((("a")), 100000000, 0, -20); ((("b")), 100000000, 0, -21)], 2, Tag1 ([(("Ok", 270), ([((("a")), 100000000, 0, -20)]), 0, (("src/rresult.mli", 24, 931, 979), ("src/rresult.mli", 24, 931, 987), 0), 0, Tag1 ("Rresult", 1)); (("Error", 271), ([((("b")), 100000000, 0, -21)]), 0, (("src/rresult.mli", 24, 931, 988), ("src/rresult.mli", 24, 931, 1001), 0), 0, Tag1 ("Rresult", 2))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [((("a")), 100000000, 0, -20); ((("b")), 100000000, 0, -21)], (0)), 100000000, 0, -19)), [25; 25], [0; 0], 0, 0, (("src/rresult.mli", 24, 931, 931), ("src/rresult.mli", 24, 931, 1001), 0), 0, 0, 0, Tag1 ("Rresult", 0)), 1, 0); ((">>=", 569), ((Tag1 (0, (Tag3 ((("result", 568)), [((("a")), 100000000, 0, -17); ((("b")), 100000000, 0, -14)], (0)), 100000000, 0, -18), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -17), (Tag3 ((("result", 568)), [((("c")), 100000000, 0, -13); ((("b")), 100000000, 0, -14)], (0)), 100000000, 0, -16), 0), 100000000, 0, -15), (Tag3 ((("result", 568)), [((("c")), 100000000, 0, -13); ((("b")), 100000000, 0, -14)], (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0), 100000000, 0, -10), 0, (("src/rresult.mli", 26, 1003, 1003), ("src/rresult.mli", 26, 1003, 1078), 0), 0, Tag1 ("Rresult", 3)), 0); ((">>|", 570), ((Tag1 (0, (Tag3 ((("result", 568)), [((("a")), 100000000, 0, -8); ((("b")), 100000000, 0, -6)], (0)), 100000000, 0, -9), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -8), ((("c")), 100000000, 0, -5), 0), 100000000, 0, -7), (Tag3 ((("result", 568)), [((("c")), 100000000, 0, -5); ((("b")), 100000000, 0, -6)], (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/rresult.mli", 29, 1110, 1110), ("src/rresult.mli", 29, 1110, 1172), 0), 0, Tag1 ("Rresult", 4)), 0); Tag3 (("R", 571), 0, (Tag1 ([Tag1 (("t", 572), ([((("a")), 100000000, 0, -331); ((("b")), 100000000, 0, -332)], 2, 0, 1, ((Tag3 ((("result", 568)), [((("a")), 100000000, 0, -331); ((("b")), 100000000, 0, -332)], (0)), 100000000, 0, -330)), [25; 25], [0; 0], 0, 0, (("src/rresult.mli", 37, 1275, 1277), ("src/rresult.mli", 37, 1275, 1310), 0), 0, 0, 0, Tag1 ("Rresult", 5)), 1, 0); (("ok", 573), ((Tag1 (0, ((("a")), 100000000, 0, -328), (Tag3 ((("result", 568)), [((("a")), 100000000, 0, -328); ((("b")), 100000000, 0, -329)], (0)), 100000000, 0, -327), 0), 100000000, 0, -326), 0, (("src/rresult.mli", 40, 1343, 1345), ("src/rresult.mli", 40, 1343, 1375), 0), 0, Tag1 ("Rresult", 6)), 0); (("error", 574), ((Tag1 (0, ((("b")), 100000000, 0, -325), (Tag3 ((("result", 568)), [((("a")), 100000000, 0, -324); ((("b")), 100000000, 0, -325)], (0)), 100000000, 0, -323), 0), 100000000, 0, -322), 0, (("src/rresult.mli", 43, 1404, 1406), ("src/rresult.mli", 43, 1404, 1439), 0), 0, Tag1 ("Rresult", 7)), 0); (("reword_error", 575), ((Tag1 (0, (Tag1 (0, ((("b")), 100000000, 0, -320), ((("c")), 100000000, 0, -318), 0), 100000000, 0, -321), (Tag1 (0, (Tag3 ((("result", 568)), [((("a")), 100000000, 0, -317); ((("b")), 100000000, 0, -320)], (0)), 100000000, 0, -319), (Tag3 ((("result", 568)), [((("a")), 100000000, 0, -317); ((("c")), 100000000, 0, -318)], (0)), 100000000, 0, -316), 0), 100000000, 0, -315), 0), 100000000, 0, -314), 0, (("src/rresult.mli", 46, 1474, 1476), ("src/rresult.mli", 46, 1474, 1543), 0), 0, Tag1 ("Rresult", 8)), 0); (("get_ok", 576), ((Tag1 (0, (Tag3 ((("result", 568)), [((("a")), 100000000, 0, -311); ((("b")), 100000000, 0, -313)], (0)), 100000000, 0, -312), ((("a")), 100000000, 0, -311), 0), 100000000, 0, -310), 0, (("src/rresult.mli", 52, 1667, 1669), ("src/rresult.mli", 52, 1667, 1703), 0), 0, Tag1 ("Rresult", 9)), 0); (("get_error", 577), ((Tag1 (0, (Tag3 ((("result", 568)), [((("a")), 100000000, 0, -309); ((("b")), 100000000, 0, -307)], (0)), 100000000, 0, -308), ((("b")), 100000000, 0, -307), 0), 100000000, 0, -306), 0, (("src/rresult.mli", 56, 1793, 1795), ("src/rresult.mli", 56, 1793, 1832), 0), 0, Tag1 ("Rresult", 10)), 0); (("return", 578), ((Tag1 (0, ((("a")), 100000000, 0, -304), (Tag3 ((("result", 568)), [((("a")), 100000000, 0, -304); ((("b")), 100000000, 0, -305)], (0)), 100000000, 0, -303), 0), 100000000, 0, -302), 0, (("src/rresult.mli", 61, 1938, 1940), ("src/rresult.mli", 61, 1938, 1974), 0), 0, Tag1 ("Rresult", 11)), 0); (("fail", 579), ((Tag1 (0, ((("b")), 100000000, 0, -301), (Tag3 ((("result", 568)), [((("a")), 100000000, 0, -300); ((("b")), 100000000, 0, -301)], (0)), 100000000, 0, -299), 0), 100000000, 0, -298), 0, (("src/rresult.mli", 62, 1975, 1977), ("src/rresult.mli", 62, 1975, 2009), 0), 0, Tag1 ("Rresult", 12)), 0); (("bind", 580), ((Tag1 (0, (Tag3 ((("result", 568)), [((("a")), 100000000, 0, -296); ((("b")), 100000000, 0, -293)], (0)), 100000000, 0, -297), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -296), (Tag3 ((("result", 568)), [((("c")), 100000000, 0, -292); ((("b")), 100000000, 0, -293)], (0)), 100000000, 0, -295), 0), 100000000, 0, -294), (Tag3 ((("result", 568)), [((("c")), 100000000, 0, -292); ((("b")), 100000000, 0, -293)], (0)), 100000000, 0, -291), 0), 100000000, 0, -290), 0), 100000000, 0, -289), 0, (("src/rresult.mli", 67, 2053, 2055), ("src/rresult.mli", 67, 2053, 2127), 0), 0, Tag1 ("Rresult", 13)), 0); (("map", 581), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -287), ((("c")), 100000000, 0, -284), 0), 100000000, 0, -288), (Tag1 (0, (Tag3 ((("result", 568)), [((("a")), 100000000, 0, -287); ((("b")), 100000000, 0, -285)], (0)), 100000000, 0, -286), (Tag3 ((("result", 568)), [((("c")), 100000000, 0, -284); ((("b")), 100000000, 0, -285)], (0)), 100000000, 0, -283), 0), 100000000, 0, -282), 0), 100000000, 0, -281), 0, (("src/rresult.mli", 70, 2198, 2200), ("src/rresult.mli", 70, 2198, 2258), 0), 0, Tag1 ("Rresult", 14)), 0); (("join", 582), ((Tag1 (0, (Tag3 ((("result", 568)), [(Tag3 ((("result", 568)), [((("a")), 100000000, 0, -277); ((("b")), 100000000, 0, -278)], (0)), 100000000, 0, -280); ((("b")), 100000000, 0, -278)], (0)), 100000000, 0, -279), (Tag3 ((("result", 568)), [((("a")), 100000000, 0, -277); ((("b")), 100000000, 0, -278)], (0)), 100000000, 0, -276), 0), 100000000, 0, -275), 0, (("src/rresult.mli", 73, 2313, 2315), ("src/rresult.mli", 73, 2313, 2373), 0), 0, Tag1 ("Rresult", 15)), 0); ((">>=", 583), ((Tag1 (0, (Tag3 ((("result", 568)), [((("a")), 100000000, 0, -273); ((("b")), 100000000, 0, -270)], (0)), 100000000, 0, -274), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -273), (Tag3 ((("result", 568)), [((("c")), 100000000, 0, -269); ((("b")), 100000000, 0, -270)], (0)), 100000000, 0, -272), 0), 100000000, 0, -271), (Tag3 ((("result", 568)), [((("c")), 100000000, 0, -269); ((("b")), 100000000, 0, -270)], (0)), 100000000, 0, -268), 0), 100000000, 0, -267), 0), 100000000, 0, -266), 0, (("src/rresult.mli", 76, 2433, 2435), ("src/rresult.mli", 76, 2433, 2510), 0), 0, Tag1 ("Rresult", 16)), 0); ((">>|", 584), ((Tag1 (0, (Tag3 ((("result", 568)), [((("a")), 100000000, 0, -264); ((("b")), 100000000, 0, -262)], (0)), 100000000, 0, -265), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -264), ((("c")), 100000000, 0, -261), 0), 100000000, 0, -263), (Tag3 ((("result", 568)), [((("c")), 100000000, 0, -261); ((("b")), 100000000, 0, -262)], (0)), 100000000, 0, -260), 0), 100000000, 0, -259), 0), 100000000, 0, -258), 0, (("src/rresult.mli", 79, 2549, 2551), ("src/rresult.mli", 79, 2549, 2613), 0), 0, Tag1 ("Rresult", 17)), 0); Tag3 (("Infix", 585), 0, (Tag1 ([((">>=", 614), ((Tag1 (0, (Tag3 ((("result", 568)), [((("a")), 100000000, 0, -348); ((("b")), 100000000, 0, -345)], (0)), 100000000, 0, -349), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -348), (Tag3 ((("result", 568)), [((("c")), 100000000, 0, -344); ((("b")), 100000000, 0, -345)], (0)), 100000000, 0, -347), 0), 100000000, 0, -346), (Tag3 ((("result", 568)), [((("c")), 100000000, 0, -344); ((("b")), 100000000, 0, -345)], (0)), 100000000, 0, -343), 0), 100000000, 0, -342), 0), 100000000, 0, -341), 0, (("src/rresult.mli", 89, 2769, 2773), ("src/rresult.mli", 89, 2769, 2848), 0), 0, Tag1 ("Rresult", 18)), 0); ((">>|", 615), ((Tag1 (0, (Tag3 ((("result", 568)), [((("a")), 100000000, 0, -339); ((("b")), 100000000, 0, -337)], (0)), 100000000, 0, -340), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -339), ((("c")), 100000000, 0, -336), 0), 100000000, 0, -338), (Tag3 ((("result", 568)), [((("c")), 100000000, 0, -336); ((("b")), 100000000, 0, -337)], (0)), 100000000, 0, -335), 0), 100000000, 0, -334), 0), 100000000, 0, -333), 0, (("src/rresult.mli", 92, 2884, 2888), ("src/rresult.mli", 92, 2884, 2950), 0), 0, Tag1 ("Rresult", 19)), 0)]), 0, (("src/rresult.mli", 85, 2716, 2718), ("src/rresult.mli", 94, 2985, 2990), 0), Tag1 ("Rresult", 20)), 0, 0); Tag1 (("msg", 586), (0, 0, 0, 1, ((Tag8 (([("Msg", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -257))))], (0, 100000000, 0, -256), 1, 0, 0)), 100000000, 0, -255)), 0, 0, 0, 0, (("src/rresult.mli", 98, 3026, 3028), ("src/rresult.mli", 98, 3026, 3057), 0), 0, 0, 0, Tag1 ("Rresult", 21)), 1, 0); (("msg", 587), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -254), (Tag8 (([("Msg", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -253))))], ((0), 100000000, 0, -252), 0, 0, ([(("msg", 586))]))), 100000000, 0, -251), 0), 100000000, 0, -250), 0, (("src/rresult.mli", 101, 3099, 3101), ("src/rresult.mli", 101, 3099, 3128), 0), 0, Tag1 ("Rresult", 22)), 0); (("msgf", 588), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format4"), [((("a")), 100000000, 0, -243); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -245); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -246); (Tag8 (([("Msg", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -249))))], ((0), 100000000, 0, -248), 0, 0, ([(("msg", 586))]))), 100000000, 0, -247)], (0)), 100000000, 0, -244), ((("a")), 100000000, 0, -243), 0), 100000000, 0, -242), 0, (("src/rresult.mli", 104, 3160, 3162), ("src/rresult.mli", 104, 3160, 3224), 0), 0, Tag1 ("Rresult", 23)), 0); (("pp_msg", 589), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -241), (Tag1 (0, (Tag3 ((("msg", 586)), 0, (0)), 100000000, 0, -240), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -239), 0), 100000000, 0, -238), 0), 100000000, 0, -237), 0, (("src/rresult.mli", 107, 3288, 3290), ("src/rresult.mli", 107, 3288, 3334), 0), 0, Tag1 ("Rresult", 24)), 0); (("error_msg", 590), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -236), (Tag3 ((("result", 568)), [((("a")), 100000000, 0, -232); (Tag8 (([("Msg", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -235))))], ((0), 100000000, 0, -234), 0, 0, ([(("msg", 586))]))), 100000000, 0, -233)], (0)), 100000000, 0, -231), 0), 100000000, 0, -230), 0, (("src/rresult.mli", 110, 3381, 3383), ("src/rresult.mli", 110, 3381, 3429), 0), 0, Tag1 ("Rresult", 25)), 0); (("error_msgf", 591), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format4"), [((("a")), 100000000, 0, -221); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -223); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -224); (Tag3 ((("result", 568)), [((("b")), 100000000, 0, -226); (Tag8 (([("Msg", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -229))))], ((0), 100000000, 0, -228), 0, 0, ([(("msg", 586))]))), 100000000, 0, -227)], (0)), 100000000, 0, -225)], (0)), 100000000, 0, -222), ((("a")), 100000000, 0, -221), 0), 100000000, 0, -220), 0, (("src/rresult.mli", 113, 3475, 3477), ("src/rresult.mli", 114, 3545, 3564), 0), 0, Tag1 ("Rresult", 26)), 0); (("reword_error_msg", 592), ((Tag1 (Tag1 ("replace"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -219)], (0)), 100000000, 0, -218), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -217), (Tag3 ((("msg", 586)), 0, (0)), 100000000, 0, -216), 0), 100000000, 0, -215), (Tag1 (0, (Tag3 ((("result", 568)), [((("a")), 100000000, 0, -209); (Tag3 ((("msg", 586)), 0, (0)), 100000000, 0, -214)], (0)), 100000000, 0, -213), (Tag3 ((("result", 568)), [((("a")), 100000000, 0, -209); (Tag8 (([("Msg", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -212))))], ((0), 100000000, 0, -211), 0, 0, ([(("msg", 586))]))), 100000000, 0, -210)], (0)), 100000000, 0, -208), 0), 100000000, 0, -207), 0), 100000000, 0, -206), 0), 100000000, 0, -205), 0, (("src/rresult.mli", 117, 3646, 3648), ("src/rresult.mli", 118, 3708, 3752), 0), 0, Tag1 ("Rresult", 27)), 0); (("error_to_msg", 593), ((Tag1 (("pp_error"), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -204), (Tag1 (0, ((("b")), 100000000, 0, -200), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -203), 0), 100000000, 0, -202), 0), 100000000, 0, -201), (Tag1 (0, (Tag3 ((("result", 568)), [((("a")), 100000000, 0, -195); ((("b")), 100000000, 0, -200)], (0)), 100000000, 0, -199), (Tag3 ((("result", 568)), [((("a")), 100000000, 0, -195); (Tag8 (([("Msg", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -198))))], ((0), 100000000, 0, -197), 0, 0, ([(("msg", 586))]))), 100000000, 0, -196)], (0)), 100000000, 0, -194), 0), 100000000, 0, -193), 0), 100000000, 0, -192), 0, (("src/rresult.mli", 123, 3958, 3960), ("src/rresult.mli", 124, 4024, 4067), 0), 0, Tag1 ("Rresult", 28)), 0); (("error_msg_to_invalid_arg", 594), ((Tag1 (0, (Tag3 ((("result", 568)), [((("a")), 100000000, 0, -189); (Tag3 ((("msg", 586)), 0, (0)), 100000000, 0, -191)], (0)), 100000000, 0, -190), ((("a")), 100000000, 0, -189), 0), 100000000, 0, -188), 0, (("src/rresult.mli", 128, 4171, 4173), ("src/rresult.mli", 128, 4171, 4226), 0), 0, Tag1 ("Rresult", 29)), 0); (("open_error_msg", 595), ((Tag1 (0, (Tag3 ((("result", 568)), [((("a")), 100000000, 0, -182); (Tag3 ((("msg", 586)), 0, (0)), 100000000, 0, -187)], (0)), 100000000, 0, -186), (Tag3 ((("result", 568)), [((("a")), 100000000, 0, -182); (Tag8 (([("Msg", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -185))))], ((0), 100000000, 0, -184), 0, 0, ([(("msg", 586))]))), 100000000, 0, -183)], (0)), 100000000, 0, -181), 0), 100000000, 0, -180), 0, (("src/rresult.mli", 133, 4354, 4356), ("src/rresult.mli", 133, 4354, 4417), 0), 0, Tag1 ("Rresult", 30)), 0); (("failwith_error_msg", 596), ((Tag1 (0, (Tag3 ((("result", 568)), [((("a")), 100000000, 0, -177); (Tag3 ((("msg", 586)), 0, (0)), 100000000, 0, -179)], (0)), 100000000, 0, -178), ((("a")), 100000000, 0, -177), 0), 100000000, 0, -176), 0, (("src/rresult.mli", 137, 4523, 4525), ("src/rresult.mli", 137, 4523, 4572), 0), 0, Tag1 ("Rresult", 31)), 0); Tag1 (("exn_trap", 597), (0, 0, 0, 1, ((Tag8 (([("Exn_trap", (((Tag2 ([(Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -174); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Printexc"), "raw_backtrace"), 0, (0)), 100000000, 0, -175)]), 100000000, 0, -173))))], (0, 100000000, 0, -172), 1, 0, 0)), 100000000, 0, -171)), 0, 0, 0, 0, (("src/rresult.mli", 145, 4757, 4759), ("src/rresult.mli", 145, 4757, 4820), 0), 0, 0, 0, Tag1 ("Rresult", 32)), 1, 0); (("pp_exn_trap", 598), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -170), (Tag1 (0, (Tag3 ((("exn_trap", 597)), 0, (0)), 100000000, 0, -169), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -168), 0), 100000000, 0, -167), 0), 100000000, 0, -166), 0, (("src/rresult.mli", 148, 4861, 4863), ("src/rresult.mli", 148, 4861, 4917), 0), 0, Tag1 ("Rresult", 33)), 0); (("trap_exn", 599), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -164), ((("b")), 100000000, 0, -158), 0), 100000000, 0, -165), (Tag1 (0, ((("a")), 100000000, 0, -164), (Tag3 ((("result", 568)), [((("b")), 100000000, 0, -158); (Tag8 (([("Exn_trap", (((Tag2 ([(Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -162); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Printexc"), "raw_backtrace"), 0, (0)), 100000000, 0, -163)]), 100000000, 0, -161))))], ((0), 100000000, 0, -160), 0, 0, ([(("exn_trap", 597))]))), 100000000, 0, -159)], (0)), 100000000, 0, -157), 0), 100000000, 0, -156), 0), 100000000, 0, -155), 0, (("src/rresult.mli", 151, 4971, 4973), ("src/rresult.mli", 151, 4971, 5033), 0), 0, Tag1 ("Rresult", 34)), 0); (("error_exn_trap_to_msg", 600), ((Tag1 (0, (Tag3 ((("result", 568)), [((("a")), 100000000, 0, -149); (Tag3 ((("exn_trap", 597)), 0, (0)), 100000000, 0, -154)], (0)), 100000000, 0, -153), (Tag3 ((("result", 568)), [((("a")), 100000000, 0, -149); (Tag8 (([("Msg", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -152))))], ((0), 100000000, 0, -151), 0, 0, ([(("msg", 586))]))), 100000000, 0, -150)], (0)), 100000000, 0, -148), 0), 100000000, 0, -147), 0, (("src/rresult.mli", 155, 5141, 5143), ("src/rresult.mli", 155, 5141, 5216), 0), 0, Tag1 ("Rresult", 35)), 0); (("open_error_exn_trap", 601), ((Tag1 (0, (Tag3 ((("result", 568)), [((("a")), 100000000, 0, -139); (Tag3 ((("exn_trap", 597)), 0, (0)), 100000000, 0, -146)], (0)), 100000000, 0, -145), (Tag3 ((("result", 568)), [((("a")), 100000000, 0, -139); (Tag8 (([("Exn_trap", (((Tag2 ([(Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -143); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Printexc"), "raw_backtrace"), 0, (0)), 100000000, 0, -144)]), 100000000, 0, -142))))], ((0), 100000000, 0, -141), 0, 0, ([(("exn_trap", 597))]))), 100000000, 0, -140)], (0)), 100000000, 0, -138), 0), 100000000, 0, -137), 0, (("src/rresult.mli", 159, 5318, 5320), ("src/rresult.mli", 159, 5318, 5396), 0), 0, Tag1 ("Rresult", 36)), 0); (("pp", 602), ((Tag1 (("ok"), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -136), (Tag1 (0, ((("a")), 100000000, 0, -126), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -135), 0), 100000000, 0, -134), 0), 100000000, 0, -133), (Tag1 (("error"), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -132), (Tag1 (0, ((("b")), 100000000, 0, -127), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -131), 0), 100000000, 0, -130), 0), 100000000, 0, -129), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -128), (Tag1 (0, (Tag3 ((("result", 568)), [((("a")), 100000000, 0, -126); ((("b")), 100000000, 0, -127)], (0)), 100000000, 0, -125), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -124), 0), 100000000, 0, -123), 0), 100000000, 0, -122), 0), 100000000, 0, -121), 0), 100000000, 0, -120), 0, (("src/rresult.mli", 165, 5550, 5552), ("src/rresult.mli", 168, 5670, 5697), 0), 0, Tag1 ("Rresult", 37)), 0); (("dump", 603), ((Tag1 (("ok"), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -119), (Tag1 (0, ((("a")), 100000000, 0, -109), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -118), 0), 100000000, 0, -117), 0), 100000000, 0, -116), (Tag1 (("error"), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -115), (Tag1 (0, ((("b")), 100000000, 0, -110), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -114), 0), 100000000, 0, -113), 0), 100000000, 0, -112), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -111), (Tag1 (0, (Tag3 ((("result", 568)), [((("a")), 100000000, 0, -109); ((("b")), 100000000, 0, -110)], (0)), 100000000, 0, -108), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -107), 0), 100000000, 0, -106), 0), 100000000, 0, -105), 0), 100000000, 0, -104), 0), 100000000, 0, -103), 0, (("src/rresult.mli", 172, 5797, 5799), ("src/rresult.mli", 175, 5919, 5946), 0), 0, Tag1 ("Rresult", 38)), 0); (("is_ok", 604), ((Tag1 (0, (Tag3 ((("result", 568)), [((("a")), 100000000, 0, -101); ((("b")), 100000000, 0, -102)], (0)), 100000000, 0, -100), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -99), 0), 100000000, 0, -98), 0, (("src/rresult.mli", 181, 6123, 6125), ("src/rresult.mli", 181, 6123, 6160), 0), 0, Tag1 ("Rresult", 39)), 0); (("is_error", 605), ((Tag1 (0, (Tag3 ((("result", 568)), [((("a")), 100000000, 0, -96); ((("b")), 100000000, 0, -97)], (0)), 100000000, 0, -95), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -94), 0), 100000000, 0, -93), 0, (("src/rresult.mli", 184, 6207, 6209), ("src/rresult.mli", 184, 6207, 6247), 0), 0, Tag1 ("Rresult", 40)), 0); (("equal", 606), ((Tag1 (("ok"), (Tag1 (0, ((("a")), 100000000, 0, -84), (Tag1 (0, ((("a")), 100000000, 0, -84), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -92), 0), 100000000, 0, -91), 0), 100000000, 0, -90), (Tag1 (("error"), (Tag1 (0, ((("b")), 100000000, 0, -85), (Tag1 (0, ((("b")), 100000000, 0, -85), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -89), 0), 100000000, 0, -88), 0), 100000000, 0, -87), (Tag1 (0, (Tag3 ((("result", 568)), [((("a")), 100000000, 0, -84); ((("b")), 100000000, 0, -85)], (0)), 100000000, 0, -86), (Tag1 (0, (Tag3 ((("result", 568)), [((("a")), 100000000, 0, -84); ((("b")), 100000000, 0, -85)], (0)), 100000000, 0, -83), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -82), 0), 100000000, 0, -81), 0), 100000000, 0, -80), 0), 100000000, 0, -79), 0), 100000000, 0, -78), 0, (("src/rresult.mli", 187, 6300, 6302), ("src/rresult.mli", 188, 6367, 6413), 0), 0, Tag1 ("Rresult", 41)), 0); (("compare", 607), ((Tag1 (("ok"), (Tag1 (0, ((("a")), 100000000, 0, -69), (Tag1 (0, ((("a")), 100000000, 0, -69), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -77), 0), 100000000, 0, -76), 0), 100000000, 0, -75), (Tag1 (("error"), (Tag1 (0, ((("b")), 100000000, 0, -70), (Tag1 (0, ((("b")), 100000000, 0, -70), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -74), 0), 100000000, 0, -73), 0), 100000000, 0, -72), (Tag1 (0, (Tag3 ((("result", 568)), [((("a")), 100000000, 0, -69); ((("b")), 100000000, 0, -70)], (0)), 100000000, 0, -71), (Tag1 (0, (Tag3 ((("result", 568)), [((("a")), 100000000, 0, -69); ((("b")), 100000000, 0, -70)], (0)), 100000000, 0, -68), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -67), 0), 100000000, 0, -66), 0), 100000000, 0, -65), 0), 100000000, 0, -64), 0), 100000000, 0, -63), 0, (("src/rresult.mli", 192, 6510, 6512), ("src/rresult.mli", 193, 6577, 6622), 0), 0, Tag1 ("Rresult", 42)), 0); (("to_option", 608), ((Tag1 (0, (Tag3 ((("result", 568)), [((("a")), 100000000, 0, -60); ((("b")), 100000000, 0, -62)], (0)), 100000000, 0, -61), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -60)], (0)), 100000000, 0, -59), 0), 100000000, 0, -58), 0, (("src/rresult.mli", 199, 6750, 6752), ("src/rresult.mli", 199, 6750, 6796), 0), 0, Tag1 ("Rresult", 43)), 0); (("of_option", 609), ((Tag1 (("none"), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -57), (Tag3 ((("result", 568)), [((("a")), 100000000, 0, -52); ((("b")), 100000000, 0, -53)], (0)), 100000000, 0, -56), 0), 100000000, 0, -55), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -52)], (0)), 100000000, 0, -54), (Tag3 ((("result", 568)), [((("a")), 100000000, 0, -52); ((("b")), 100000000, 0, -53)], (0)), 100000000, 0, -51), 0), 100000000, 0, -50), 0), 100000000, 0, -49), 0, (("src/rresult.mli", 202, 6869, 6871), ("src/rresult.mli", 202, 6869, 6949), 0), 0, Tag1 ("Rresult", 44)), 0); (("to_presult", 610), ((Tag1 (0, (Tag3 ((("result", 568)), [((("a")), 100000000, 0, -47); ((("b")), 100000000, 0, -46)], (0)), 100000000, 0, -48), (Tag8 (([("Error", ((((("b")), 100000000, 0, -46)))); ("Ok", ((((("a")), 100000000, 0, -47))))], ((0), 100000000, 0, -45), 0, 0, 0)), 100000000, 0, -44), 0), 100000000, 0, -43), 0, (("src/rresult.mli", 205, 7031, 7033), ("src/rresult.mli", 205, 7031, 7098), 0), 0, Tag1 ("Rresult", 45)), 0); (("of_presult", 611), ((Tag1 (0, (Tag8 (([("Error", Tag1 (0, [((("b")), 100000000, 0, -40)], 0, (1))); ("Ok", Tag1 (0, [((("a")), 100000000, 0, -39)], 0, (1)))], ((0), 100000000, 0, -42), 1, 0, 0)), 100000000, 0, -41), (Tag3 ((("result", 568)), [((("a")), 100000000, 0, -39); ((("b")), 100000000, 0, -40)], (0)), 100000000, 0, -38), 0), 100000000, 0, -37), 0, (("src/rresult.mli", 208, 7170, 7172), ("src/rresult.mli", 208, 7170, 7237), 0), 0, Tag1 ("Rresult", 46)), 0); (("ignore_error", 612), ((Tag1 (("use"), (Tag1 (0, ((("b")), 100000000, 0, -35), ((("a")), 100000000, 0, -33), 0), 100000000, 0, -36), (Tag1 (0, (Tag3 ((("result", 568)), [((("a")), 100000000, 0, -33); ((("b")), 100000000, 0, -35)], (0)), 100000000, 0, -34), ((("a")), 100000000, 0, -33), 0), 100000000, 0, -32), 0), 100000000, 0, -31), 0, (("src/rresult.mli", 215, 7404, 7406), ("src/rresult.mli", 215, 7404, 7464), 0), 0, Tag1 ("Rresult", 47)), 0); (("kignore_error", 613), ((Tag1 (("use"), (Tag1 (0, ((("b")), 100000000, 0, -28), (Tag3 ((("result", 568)), [((("a")), 100000000, 0, -25); ((("c")), 100000000, 0, -26)], (0)), 100000000, 0, -30), 0), 100000000, 0, -29), (Tag1 (0, (Tag3 ((("result", 568)), [((("a")), 100000000, 0, -25); ((("b")), 100000000, 0, -28)], (0)), 100000000, 0, -27), (Tag3 ((("result", 568)), [((("a")), 100000000, 0, -25); ((("c")), 100000000, 0, -26)], (0)), 100000000, 0, -24), 0), 100000000, 0, -23), 0), 100000000, 0, -22), 0, (("src/rresult.mli", 219, 7554, 7556), ("src/rresult.mli", 220, 7576, 7645), 0), 0, Tag1 ("Rresult", 48)), 0)]), 0, (("src/rresult.mli", 33, 1237, 1237), ("src/rresult.mli", 223, 7739, 7742), 0), Tag1 ("Rresult", 49)), 0, 0)], "Rresult", [("Rresult", ("\201Z\255iJ\0071xwM\137\148\252<\172u")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Printexc", ("\217u\168\235\179oi\167\235\255\025\017%d\192s")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

  end

type worker_id = string
type 'a cpanel = {
  exit : unit -> unit;
  cancelled : unit -> bool;
  extra : 'a;
}
module type PoolModel =
  sig
    type process
    val spawn :
      int ->
      CoqworkmgrApi.priority ->
      worker_id * process * CThread.thread_ic * out_channel
    type extra
    val manager :
      extra cpanel ->
      worker_id * process * CThread.thread_ic * out_channel -> unit
  end
module Make :
  functor (Model : PoolModel) ->
    sig
      type pool
      val create : Model.extra -> size:int -> CoqworkmgrApi.priority -> pool
      val is_empty : pool -> bool
      val n_workers : pool -> int
      val cancel : worker_id -> pool -> unit
      val cancel_all : pool -> unit
      val destroy : pool -> unit
      val worker_handshake : CThread.thread_ic -> out_channel -> unit("DEBUG:rule", [Tag1 (("worker_id", 318), (0, 0, 0, 1, ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -9)), 0, 0, 0, 0, (("stm/workerPool.mli", 11, 676, 676), ("stm/workerPool.mli", 11, 676, 699), 0), 0, 0, 0, Tag1 ("WorkerPool", 0)), 1, 0); Tag1 (("cpanel", 319), ([((("a")), 100000000, 0, -8)], 1, [[(("exit", 271), 0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), (("stm/workerPool.mli", 14, 720, 722), ("stm/workerPool.mli", 14, 720, 742), 0), 0, Tag1 ("WorkerPool", 2)); (("cancelled", 272), 0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -6), 0), 100000000, 0, -5), (("stm/workerPool.mli", 15, 798, 800), ("stm/workerPool.mli", 15, 798, 825), 0), 0, Tag1 ("WorkerPool", 3)); (("extra", 273), 0, ((("a")), 100000000, 0, -8), (("stm/workerPool.mli", 16, 876, 878), ("stm/workerPool.mli", 16, 876, 889), 0), 0, Tag1 ("WorkerPool", 4))]], 1, 0, [25], [0], 0, 0, (("stm/workerPool.mli", 13, 701, 701), ("stm/workerPool.mli", 17, 954, 955), 0), 0, 0, 0, Tag1 ("WorkerPool", 1)), 1, 0); Tag4 (("PoolModel", 320), ((Tag1 ([Tag1 (("process", 323), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("stm/workerPool.mli", 21, 1030, 1032), ("stm/workerPool.mli", 21, 1030, 1044), 0), 0, 0, 0, Tag1 ("WorkerPool", 5)), 1, 0); (("spawn", 324), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -28), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("CoqworkmgrApi")), "priority"), 0, (0)), 100000000, 0, -27), (Tag2 ([(Tag3 ((("worker_id", 318)), 0, (0)), 100000000, 0, -23); (Tag3 ((("process", 323)), 0, (0)), 100000000, 0, -24); (Tag3 (Tag1 ((Tag2 ("CThread")), "thread_ic"), 0, (0)), 100000000, 0, -25); (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -26)]), 100000000, 0, -22), 0), 100000000, 0, -21), 0), 100000000, 0, -20), 0, (("stm/workerPool.mli", 22, 1045, 1047), ("stm/workerPool.mli", 23, 1092, 1149), 0), 0, Tag1 ("WorkerPool", 6)), 0); Tag1 (("extra", 325), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("stm/workerPool.mli", 26, 1201, 1203), ("stm/workerPool.mli", 26, 1201, 1213), 0), 0, 0, 0, Tag1 ("WorkerPool", 7)), 1, 0); (("manager", 326), ((Tag1 (0, (Tag3 ((("cpanel", 319)), [(Tag3 ((("extra", 325)), 0, (0)), 100000000, 0, -19)], (0)), 100000000, 0, -18), (Tag1 (0, (Tag2 ([(Tag3 ((("worker_id", 318)), 0, (0)), 100000000, 0, -14); (Tag3 ((("process", 323)), 0, (0)), 100000000, 0, -15); (Tag3 (Tag1 ((Tag2 ("CThread")), "thread_ic"), 0, (0)), 100000000, 0, -16); (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -17)]), 100000000, 0, -13), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0), 100000000, 0, -10), 0, (("stm/workerPool.mli", 27, 1214, 1216), ("stm/workerPool.mli", 28, 1230, 1311), 0), 0, Tag1 ("WorkerPool", 8)), 0)])), 0, (("stm/workerPool.mli", 19, 957, 957), ("stm/workerPool.mli", 29, 1312, 1315), 0), Tag1 ("WorkerPool", 9)), 0); Tag3 (("Make", 321), 0, (Tag2 (((("Model", 322)), ((("PoolModel", 320)))), Tag1 ([Tag1 (("pool", 327), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("stm/workerPool.mli", 33, 1355, 1357), ("stm/workerPool.mli", 33, 1355, 1366), 0), 0, 0, 0, Tag1 ("WorkerPool", 11)), 1, 0); (("create", 328), ((Tag1 (0, (Tag3 (Tag1 ((("Model", 322)), "extra"), 0, (0)), 100000000, 0, -57), (Tag1 (("size"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -56), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("CoqworkmgrApi")), "priority"), 0, (0)), 100000000, 0, -55), (Tag3 ((("pool", 327)), 0, (0)), 100000000, 0, -54), 0), 100000000, 0, -53), 0), 100000000, 0, -52), 0), 100000000, 0, -51), 0, (("stm/workerPool.mli", 35, 1368, 1370), ("stm/workerPool.mli", 35, 1368, 1440), 0), 0, Tag1 ("WorkerPool", 12)), 0); (("is_empty", 329), ((Tag1 (0, (Tag3 ((("pool", 327)), 0, (0)), 100000000, 0, -50), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -49), 0), 100000000, 0, -48), 0, (("stm/workerPool.mli", 37, 1442, 1444), ("stm/workerPool.mli", 37, 1442, 1471), 0), 0, Tag1 ("WorkerPool", 13)), 0); (("n_workers", 330), ((Tag1 (0, (Tag3 ((("pool", 327)), 0, (0)), 100000000, 0, -47), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -46), 0), 100000000, 0, -45), 0, (("stm/workerPool.mli", 38, 1472, 1474), ("stm/workerPool.mli", 38, 1472, 1501), 0), 0, Tag1 ("WorkerPool", 14)), 0); (("cancel", 331), ((Tag1 (0, (Tag3 ((("worker_id", 318)), 0, (0)), 100000000, 0, -44), (Tag1 (0, (Tag3 ((("pool", 327)), 0, (0)), 100000000, 0, -43), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -42), 0), 100000000, 0, -41), 0), 100000000, 0, -40), 0, (("stm/workerPool.mli", 41, 1525, 1527), ("stm/workerPool.mli", 41, 1525, 1565), 0), 0, Tag1 ("WorkerPool", 15)), 0); (("cancel_all", 332), ((Tag1 (0, (Tag3 ((("pool", 327)), 0, (0)), 100000000, 0, -39), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -38), 0), 100000000, 0, -37), 0, (("stm/workerPool.mli", 42, 1566, 1568), ("stm/workerPool.mli", 42, 1566, 1597), 0), 0, Tag1 ("WorkerPool", 16)), 0); (("destroy", 333), ((Tag1 (0, (Tag3 ((("pool", 327)), 0, (0)), 100000000, 0, -36), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -35), 0), 100000000, 0, -34), 0, (("stm/workerPool.mli", 44, 1664, 1666), ("stm/workerPool.mli", 44, 1664, 1692), 0), 0, Tag1 ("WorkerPool", 17)), 0); (("worker_handshake", 334), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("CThread")), "thread_ic"), 0, (0)), 100000000, 0, -33), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -32), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -31), 0), 100000000, 0, -30), 0), 100000000, 0, -29), 0, (("stm/workerPool.mli", 47, 1739, 1741), ("stm/workerPool.mli", 47, 1739, 1804), 0), 0, Tag1 ("WorkerPool", 18)), 0)])), 0, (("stm/workerPool.mli", 31, 1317, 1317), ("stm/workerPool.mli", 49, 1806, 1809), 0), Tag1 ("WorkerPool", 19)), 0, 0)], "WorkerPool", [("WorkerPool", ("\210\236dD\187Bu\159\205\193\153I\252,\232\012")); ("Unix", (":B72R\011\005Sj\189)\011\239PH\254")); ("Thread", ("q\0258z^I\139\141\195\247qk\255\176\212\018")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Mutex", ("\168\133?\146'\239J\190R\226\n}Z\213\b\191")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Bytes", ("C\134\194)\175\222\137p\205\246\244\r\241\164P\209")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("CoqworkmgrApi", ("\139.\203-\030\232\208s\224\250\222\159tE&\183")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CThread", ("\216\178\194\195l\164\022S_\250\024=\167\215\208%"))], [(0)])

    end

type t = private Base__.Info.t
val compare : t Base__Ppx_compare_lib.compare
val equal : t Base__Ppx_compare_lib.equal
val hash_fold_t : t Base__Ppx_hash_lib.hash_fold
val hash : t -> Base__Ppx_hash_lib.Std.Hash.hash_value
val t_of_sexp : Sexplib0__.Sexp.t -> t
val sexp_of_t : t -> Sexplib0__.Sexp.t
val t_sexp_grammar : t Sexplib0.Sexp_grammar.t
val invariant : t Base__Invariant_intf.inv
val to_string_hum : t -> string
val to_string_mach : t -> string
val to_string_hum_deprecated : t -> string
val of_string : string -> t
val of_lazy : string Base__.Lazy.t -> t
val of_lazy_sexp : Base__.Sexp.t Base__.Lazy.t -> t
val of_thunk : (unit -> string) -> t
val of_lazy_t : t Base__.Lazy.t -> t
val create :
  ?here:Base__.Source_code_position0.t ->
  ?strict:unit -> string -> 'a -> ('a -> Base__.Sexp.t) -> t
val create_s : Base__.Sexp.t -> t
val createf : ('a, unit, string, t) format4 -> 'a
val tag : t -> tag:string -> t
val tag_s : t -> tag:Base__.Sexp.t -> t
val tag_s_lazy : t -> tag:Base__.Sexp.t Base__.Lazy.t -> t
val tag_arg : t -> string -> 'a -> ('a -> Base__.Sexp.t) -> t
val of_list : ?trunc_after:int -> t list -> t
val of_exn : ?backtrace:[ `Get | `This of string ] -> exn -> t
val to_exn : t -> exn
val pp : Base__.Formatter.t -> t -> unit
module Internal_repr :
  sig
    type t =
        Could_not_construct of Base__.Sexp.t
      | String of string
      | Exn of exn
      | Sexp of Base__.Sexp.t
      | Tag_sexp of string * Base__.Sexp.t *
          Base__.Source_code_position0.t option
      | Tag_t of string * t
      | Tag_arg of string * Base__.Sexp.t * t
      | Of_list of int option * t list
      | With_backtrace of t * string
    val sexp_of_t : t -> Sexplib0.Sexp.t
    val of_info : t/2 -> t
    val to_info : t -> t/2
  end
val raise : t -> 'a
val raise_s : Base__.Sexp.t -> 'a
val to_info : t -> Base__.Info.t("DEBUG:rule", [Tag1 (("t", 1097), (0, 0, 0, 0, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Info"), "t"), 0, (0)), 100000000, 0, -134)), 0, 0, 0, 0, (("src/error.mli", 6, 112, 137), ("src/error.mli", 6, 112, 160), 0), 0, 0, 0, Tag1 ("Base__Error", 0)), 1, 0); (("compare", 1098), ((Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "compare"), [(Tag3 ((("t", 1097)), 0, (0)), 100000000, 0, -133)], (0)), 100000000, 0, -132), 0, (("src/info_intf.ml", 40, 1367, 1377), ("src/info_intf.ml", 40, 1367, 1422), 0), 0, Tag1 ("Base__Ppx_compare_lib", 5)), 0); (("equal", 1099), ((Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "equal"), [(Tag3 ((("t", 1097)), 0, (0)), 100000000, 0, -131)], (0)), 100000000, 0, -130), 0, (("src/info_intf.ml", 41, 1423, 1433), ("src/info_intf.ml", 41, 1423, 1473), 0), 0, Tag1 ("Base__Ppx_compare_lib", 18)), 0); (("hash_fold_t", 1100), ((Tag3 (Tag1 ((Tag2 ("Base__Ppx_hash_lib")), "hash_fold"), [(Tag3 ((("t", 1097)), 0, (0)), 100000000, 0, -129)], (0)), 100000000, 0, -128), 0, (("src/info_intf.ml", 42, 1474, 1484), ("src/info_intf.ml", 42, 1474, 1524), 0), 0, Tag1 ("Base__Ppx_hash_lib", 4)), 0); (("hash", 1101), ((Tag1 (0, (Tag3 ((("t", 1097)), 0, (0)), 100000000, 0, -127), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__Ppx_hash_lib")), "Std"), "Hash"), "hash_value"), 0, (0)), 100000000, 0, -126), 0), 100000000, 0, -125), 0, (("src/info_intf.ml", 42, 1474, 1484), ("src/info_intf.ml", 42, 1474, 1524), 0), 0, Tag1 ("Base__Ppx_hash_lib", 5)), 0); (("t_of_sexp", 1102), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -124), (Tag3 ((("t", 1097)), 0, (0)), 100000000, 0, -123), 0), 100000000, 0, -122), 0, (("src/info_intf.ml", 43, 1525, 1535), ("src/info_intf.ml", 43, 1525, 1571), 0), 0, Tag1 ("Sexplib0__Sexpable", 1)), 0); (("sexp_of_t", 1103), ((Tag1 (0, (Tag3 ((("t", 1097)), 0, (0)), 100000000, 0, -121), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -120), 0), 100000000, 0, -119), 0, (("src/info_intf.ml", 43, 1525, 1535), ("src/info_intf.ml", 43, 1525, 1571), 0), 0, Tag1 ("Sexplib0__Sexpable", 2)), 0); (("t_sexp_grammar", 1104), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("t", 1097)), 0, (0)), 100000000, 0, -118)], (0)), 100000000, 0, -117), 0, (("src/info_intf.ml", 45, 1573, 1575), ("src/info_intf.ml", 45, 1573, 1621), 0), 0, Tag1 ("Base__Info_intf", 6)), 0); (("invariant", 1105), ((Tag3 (Tag1 ((Tag2 ("Base__Invariant_intf")), "inv"), [(Tag3 ((("t", 1097)), 0, (0)), 100000000, 0, -116)], (0)), 100000000, 0, -115), 0, (("src/info_intf.ml", 49, 1635, 1645), ("src/info_intf.ml", 49, 1635, 1678), 0), 0, Tag1 ("Base__Invariant_intf", 3)), 0); (("to_string_hum", 1106), ((Tag1 (0, (Tag3 ((("t", 1097)), 0, (0)), 100000000, 0, -114), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -113), 0), 100000000, 0, -112), 0, (("src/info_intf.ml", 58, 2058, 2060), ("src/info_intf.ml", 58, 2058, 2091), 0), 0, Tag1 ("Base__Info_intf", 8)), 0); (("to_string_mach", 1107), ((Tag1 (0, (Tag3 ((("t", 1097)), 0, (0)), 100000000, 0, -111), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -110), 0), 100000000, 0, -109), 0, (("src/info_intf.ml", 61, 2161, 2163), ("src/info_intf.ml", 61, 2161, 2195), 0), 0, Tag1 ("Base__Info_intf", 9)), 0); (("to_string_hum_deprecated", 1108), ((Tag1 (0, (Tag3 ((("t", 1097)), 0, (0)), 100000000, 0, -108), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -107), 0), 100000000, 0, -106), 0, (("src/info_intf.ml", 67, 2393, 2395), ("src/info_intf.ml", 67, 2393, 2437), 0), 0, Tag1 ("Base__Info_intf", 10)), 0); (("of_string", 1109), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -105), (Tag3 ((("t", 1097)), 0, (0)), 100000000, 0, -104), 0), 100000000, 0, -103), 0, (("src/info_intf.ml", 70, 2440, 2442), ("src/info_intf.ml", 70, 2440, 2469), 0), 0, Tag1 ("Base__Info_intf", 11)), 0); (("of_lazy", 1110), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Lazy"), "t"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -102)], (0)), 100000000, 0, -101), (Tag3 ((("t", 1097)), 0, (0)), 100000000, 0, -100), 0), 100000000, 0, -99), 0, (("src/info_intf.ml", 75, 2624, 2626), ("src/info_intf.ml", 75, 2624, 2658), 0), 0, Tag1 ("Base__Info_intf", 12)), 0); (("of_lazy_sexp", 1111), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Lazy"), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -98)], (0)), 100000000, 0, -97), (Tag3 ((("t", 1097)), 0, (0)), 100000000, 0, -96), 0), 100000000, 0, -95), 0, (("src/info_intf.ml", 76, 2659, 2661), ("src/info_intf.ml", 76, 2659, 2698), 0), 0, Tag1 ("Base__Info_intf", 13)), 0); (("of_thunk", 1112), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -94), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -93), 0), 100000000, 0, -92), (Tag3 ((("t", 1097)), 0, (0)), 100000000, 0, -91), 0), 100000000, 0, -90), 0, (("src/info_intf.ml", 77, 2699, 2701), ("src/info_intf.ml", 77, 2699, 2737), 0), 0, Tag1 ("Base__Info_intf", 14)), 0); (("of_lazy_t", 1113), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Lazy"), "t"), [(Tag3 ((("t", 1097)), 0, (0)), 100000000, 0, -89)], (0)), 100000000, 0, -88), (Tag3 ((("t", 1097)), 0, (0)), 100000000, 0, -87), 0), 100000000, 0, -86), 0, (("src/info_intf.ml", 78, 2738, 2740), ("src/info_intf.ml", 78, 2738, 2769), 0), 0, Tag1 ("Base__Info_intf", 15)), 0); (("create", 1114), ((Tag1 (Tag1 ("here"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Source_code_position0"), "t"), 0, (0)), 100000000, 0, -85)], (0)), 100000000, 0, -84), (Tag1 (Tag1 ("strict"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -83)], (0)), 100000000, 0, -82), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -81), (Tag1 (0, ((("a")), 100000000, 0, -80), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -80), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -79), 0), 100000000, 0, -78), (Tag3 ((("t", 1097)), 0, (0)), 100000000, 0, -77), 0), 100000000, 0, -76), 0), 100000000, 0, -75), 0), 100000000, 0, -74), 0), 100000000, 0, -73), 0), 100000000, 0, -72), 0, (("src/info_intf.ml", 84, 3108, 3110), ("src/info_intf.ml", 90, 3224, 3232), 0), 0, Tag1 ("Base__Info_intf", 16)), 0); (("create_s", 1115), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -71), (Tag3 ((("t", 1097)), 0, (0)), 100000000, 0, -70), 0), 100000000, 0, -69), 0, (("src/info_intf.ml", 92, 3234, 3236), ("src/info_intf.ml", 92, 3234, 3262), 0), 0, Tag1 ("Base__Info_intf", 17)), 0); (("createf", 1116), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format4"), [((("a")), 100000000, 0, -64); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -66); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -67); (Tag3 ((("t", 1097)), 0, (0)), 100000000, 0, -68)], (0)), 100000000, 0, -65), ((("a")), 100000000, 0, -64), 0), 100000000, 0, -63), 0, (("src/info_intf.ml", 96, 3373, 3375), ("src/info_intf.ml", 96, 3373, 3424), 0), 0, Tag1 ("Base__Info_intf", 18)), 0); (("tag", 1117), ((Tag1 (0, (Tag3 ((("t", 1097)), 0, (0)), 100000000, 0, -62), (Tag1 (("tag"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -61), (Tag3 ((("t", 1097)), 0, (0)), 100000000, 0, -60), 0), 100000000, 0, -59), 0), 100000000, 0, -58), 0, (("src/info_intf.ml", 99, 3463, 3465), ("src/info_intf.ml", 99, 3463, 3495), 0), 0, Tag1 ("Base__Info_intf", 19)), 0); (("tag_s", 1118), ((Tag1 (0, (Tag3 ((("t", 1097)), 0, (0)), 100000000, 0, -57), (Tag1 (("tag"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -56), (Tag3 ((("t", 1097)), 0, (0)), 100000000, 0, -55), 0), 100000000, 0, -54), 0), 100000000, 0, -53), 0, (("src/info_intf.ml", 102, 3532, 3534), ("src/info_intf.ml", 102, 3532, 3566), 0), 0, Tag1 ("Base__Info_intf", 20)), 0); (("tag_s_lazy", 1119), ((Tag1 (0, (Tag3 ((("t", 1097)), 0, (0)), 100000000, 0, -52), (Tag1 (("tag"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Lazy"), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -51)], (0)), 100000000, 0, -50), (Tag3 ((("t", 1097)), 0, (0)), 100000000, 0, -49), 0), 100000000, 0, -48), 0), 100000000, 0, -47), 0, (("src/info_intf.ml", 105, 3608, 3610), ("src/info_intf.ml", 105, 3608, 3654), 0), 0, Tag1 ("Base__Info_intf", 21)), 0); (("tag_arg", 1120), ((Tag1 (0, (Tag3 ((("t", 1097)), 0, (0)), 100000000, 0, -46), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -45), (Tag1 (0, ((("a")), 100000000, 0, -44), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -44), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -43), 0), 100000000, 0, -42), (Tag3 ((("t", 1097)), 0, (0)), 100000000, 0, -41), 0), 100000000, 0, -40), 0), 100000000, 0, -39), 0), 100000000, 0, -38), 0), 100000000, 0, -37), 0, (("src/info_intf.ml", 108, 3744, 3746), ("src/info_intf.ml", 108, 3744, 3800), 0), 0, Tag1 ("Base__Info_intf", 22)), 0); (("of_list", 1121), ((Tag1 (Tag1 ("trunc_after"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -36)], (0)), 100000000, 0, -35), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 1097)), 0, (0)), 100000000, 0, -34)], (0)), 100000000, 0, -33), (Tag3 ((("t", 1097)), 0, (0)), 100000000, 0, -32), 0), 100000000, 0, -31), 0), 100000000, 0, -30), 0, (("src/info_intf.ml", 111, 3845, 3847), ("src/info_intf.ml", 111, 3845, 3892), 0), 0, Tag1 ("Base__Info_intf", 23)), 0); (("of_exn", 1122), ((Tag1 (Tag1 ("backtrace"), (Tag3 ((Tag3 ("option", 10)), [(Tag8 (([("Get", (0)); ("This", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -29))))], (0, 100000000, 0, -28), 1, 0, 0)), 100000000, 0, -27)], (0)), 100000000, 0, -26), (Tag1 (0, (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -25), (Tag3 ((("t", 1097)), 0, (0)), 100000000, 0, -24), 0), 100000000, 0, -23), 0), 100000000, 0, -22), 0, (("src/info_intf.ml", 119, 4287, 4289), ("src/info_intf.ml", 119, 4287, 4351), 0), 0, Tag1 ("Base__Info_intf", 24)), 0); (("to_exn", 1123), ((Tag1 (0, (Tag3 ((("t", 1097)), 0, (0)), 100000000, 0, -21), (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -20), 0), 100000000, 0, -19), 0, (("src/info_intf.ml", 121, 4353, 4355), ("src/info_intf.ml", 121, 4353, 4376), 0), 0, Tag1 ("Base__Info_intf", 25)), 0); (("pp", 1124), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Formatter"), "t"), 0, (0)), 100000000, 0, -18), (Tag1 (0, (Tag3 ((("t", 1097)), 0, (0)), 100000000, 0, -17), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -16), 0), 100000000, 0, -15), 0), 100000000, 0, -14), 0, (("src/info_intf.ml", 122, 4377, 4379), ("src/info_intf.ml", 122, 4377, 4412), 0), 0, Tag1 ("Base__Info_intf", 26)), 0); Tag3 (("Internal_repr", 1125), 0, (Tag1 ([Tag1 (("t", 1130), (0, 0, Tag1 ([(("Could_not_construct", 1005), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -144)]), 0, (("src/info_intf.ml", 124, 4414, 4439), ("src/info_intf.ml", 148, 5117, 5138), 0), 0, Tag1 ("Base__Info_intf", 29)); (("String", 1006), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -145)]), 0, (("src/info_intf.ml", 124, 4414, 4439), ("src/info_intf.ml", 148, 5117, 5138), 0), 0, Tag1 ("Base__Info_intf", 30)); (("Exn", 1007), ([(Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -146)]), 0, (("src/info_intf.ml", 124, 4414, 4439), ("src/info_intf.ml", 148, 5117, 5138), 0), 0, Tag1 ("Base__Info_intf", 31)); (("Sexp", 1008), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -147)]), 0, (("src/info_intf.ml", 124, 4414, 4439), ("src/info_intf.ml", 148, 5117, 5138), 0), 0, Tag1 ("Base__Info_intf", 32)); (("Tag_sexp", 1009), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -148); (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -149); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Source_code_position0"), "t"), 0, (0)), 100000000, 0, -151)], (0)), 100000000, 0, -150)]), 0, (("src/info_intf.ml", 124, 4414, 4439), ("src/info_intf.ml", 148, 5117, 5138), 0), 0, Tag1 ("Base__Info_intf", 33)); (("Tag_t", 1010), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -152); (Tag3 ((("t", 1130)), 0, (0)), 100000000, 0, -153)]), 0, (("src/info_intf.ml", 124, 4414, 4439), ("src/info_intf.ml", 148, 5117, 5138), 0), 0, Tag1 ("Base__Info_intf", 34)); (("Tag_arg", 1011), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -154); (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -155); (Tag3 ((("t", 1130)), 0, (0)), 100000000, 0, -156)]), 0, (("src/info_intf.ml", 124, 4414, 4439), ("src/info_intf.ml", 148, 5117, 5138), 0), 0, Tag1 ("Base__Info_intf", 35)); (("Of_list", 1012), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -158)], (0)), 100000000, 0, -157); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 1130)), 0, (0)), 100000000, 0, -160)], (0)), 100000000, 0, -159)]), 0, (("src/info_intf.ml", 124, 4414, 4439), ("src/info_intf.ml", 148, 5117, 5138), 0), 0, Tag1 ("Base__Info_intf", 36)); (("With_backtrace", 1013), ([(Tag3 ((("t", 1130)), 0, (0)), 100000000, 0, -161); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -162)]), 0, (("src/info_intf.ml", 124, 4414, 4439), ("src/info_intf.ml", 148, 5117, 5138), 0), 0, Tag1 ("Base__Info_intf", 37))], 0), 1, 0, 0, 0, 0, 0, (("src/info_intf.ml", 124, 4414, 4439), ("src/info_intf.ml", 148, 5117, 5138), 0), [(("deriving_inline", (("src/info_intf.ml", 139, 4966, 4973), ("src/info_intf.ml", 139, 4966, 4988), 0)), ([([(((("sexp_of"), (("src/info_intf.ml", 139, 4966, 4989), ("src/info_intf.ml", 139, 4966, 4996), 0))), (("src/info_intf.ml", 139, 4966, 4989), ("src/info_intf.ml", 139, 4966, 4996), 0), 0, 0)], (("src/info_intf.ml", 139, 4966, 4989), ("src/info_intf.ml", 139, 4966, 4996), 0))]), (("src/info_intf.ml", 139, 4966, 4970), ("src/info_intf.ml", 139, 4966, 4997), 0))], 0, 0, Tag1 ("Base__Info_intf", 28)), 1, 0); (("sexp_of_t", 1131), ((Tag1 (0, (Tag3 ((("t", 1130)), 0, (0)), 100000000, 0, -143), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -142), 0), 100000000, 0, -141), 0, (("src/info_intf.ml", 124, 4414, 4439), ("src/info_intf.ml", 148, 5117, 5138), 0), 0, Tag1 ("Base__Info_intf", 38)), 0); (("of_info", 1132), ((Tag1 (0, (Tag3 ((("t", 1097)), 0, (0)), 100000000, 0, -140), (Tag3 ((("t", 1130)), 0, (0)), 100000000, 0, -139), 0), 100000000, 0, -138), 0, (("src/info_intf.ml", 124, 4414, 4439), ("src/info_intf.ml", 148, 5117, 5138), 0), 0, Tag1 ("Base__Info_intf", 39)), 0); (("to_info", 1133), ((Tag1 (0, (Tag3 ((("t", 1130)), 0, (0)), 100000000, 0, -137), (Tag3 ((("t", 1097)), 0, (0)), 100000000, 0, -136), 0), 100000000, 0, -135), 0, (("src/info_intf.ml", 124, 4414, 4439), ("src/info_intf.ml", 148, 5117, 5138), 0), 0, Tag1 ("Base__Info_intf", 40)), 0)]), 0, (("src/info_intf.ml", 124, 4414, 4416), ("src/info_intf.ml", 148, 5117, 5138), 0), Tag1 ("Base__Info_intf", 42)), 0, 0); (("raise", 1126), ((Tag1 (0, (Tag3 ((("t", 1097)), 0, (0)), 100000000, 0, -13), ((0), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("src/error.mli", 10, 278, 278), ("src/error.mli", 10, 278, 296), 0), 0, Tag1 ("Base__Error", 1)), 0); (("raise_s", 1127), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -10), ((0), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("src/error.mli", 12, 298, 298), ("src/error.mli", 12, 298, 323), 0), 0, Tag1 ("Base__Error", 2)), 0); (("to_info", 1128), ((Tag1 (0, (Tag3 ((("t", 1097)), 0, (0)), 100000000, 0, -7), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Info"), "t"), 0, (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("src/error.mli", 13, 324, 324), ("src/error.mli", 13, 324, 349), 0), 0, Tag1 ("Base__Error", 3)), 0); (("of_info", 1129), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Info"), "t"), 0, (0)), 100000000, 0, -4), (Tag3 ((("t", 1097)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/error.mli", 14, 350, 350), ("src/error.mli", 14, 350, 375), 0), 0, Tag1 ("Base__Error", 4)), 0)], "Base__Error", [("Base__Error", ("\199\218\231n\155/\159\156\146\247\148t\237\003\t\153")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__StringLabels", ("\134F\024\226\216Is#\223\230\234\169Z\206Gc")); ("Stdlib__StdLabels", (".\193\n\229\139\017\212C-ZA\\kz-\128")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__MoreLabels", ("\248\232\248\254`<\230\241\161U\193U\1466J\238")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__ListLabels", ("*\194\012\191\020%\170\249m\002\180\178hk\205\220")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shadow_stdlib", ("\219zi\164\203\158e)\232\221\196\168\138x\142\018")); ("Sexplib0__Sexpable", ("\251${\207(\249/z\242\255\250^\141\156\210e")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Base_internalhash_types", ("0\148#2\226\223\018\135\173>!\020\237\017\255\149")); ("Base__Sys0", ("\206z\231\154s\\\136\2364\131\005\014\031\152m3")); ("Base__String0", ("\212\221L\220\245\255\162P\228\224\189\216\135H\149O")); ("Base__Source_code_position0", ("_\003P6\254\029\206\005\130\136\180\019\145\230\000M")); ("Base__Sexp", ("\154\187\171&\209=\153[\236\250!U\174`\190T")); ("Base__Printf", ("\000\196c,\214\127\226\174\220\190\253z!\242\028\250")); ("Base__Ppx_hash_lib", ("\199\141\178\193\006\209L\007^\020(\131\224sn8")); ("Base__Ppx_compare_lib", ("\243\186~\233\228\199Ah\181.\223\004e\231\129S")); ("Base__Poly0", ("\230;\143\234\255.H\132KOe7\155\\\023f")); ("Base__Monad_intf", ("\208\203\163\152\184O\130?\012:\168\247}\018\253\155")); ("Base__Monad", ("!\244\168\2352=\137Lm\219\129K\216\199\145\\")); ("Base__Lazy", ("@`\165\196 \235)\136ANe:p\169$\185")); ("Base__Invariant_intf", ("\213\204\238\235\236[\198\145\028\2392\015\243\177S\249")); ("Base__Int0", ("N\1310\012\227\254\000\255_\222!\018\016\003\1779")); ("Base__Info_intf", ("\184\209'\173\251\219\167X|v\188]\190o5X")); ("Base__Info", ("-\011\149\203\248\030\2301\1907\1630\189\128\209\170")); ("Base__Import0", ("\156\129U\197Y[\\\153\017Ho\203\173\204\220\020")); ("Base__Import", ("\014\187\247\141\187\181\142g\176:s_,\181\219\209")); ("Base__Hash_intf", ("h\004P\218\1531G\127\212\208A\024\140\164iq")); ("Base__Hash", ("\206Rc\194\234{s3\248\165\024\162\203{\206\206")); ("Base__Globalize", ("<\243w~.\180\196t\159\193\174[\227\139\215G")); ("Base__Formatter", ("\193\149\030\140\154\1505b\162a`%\243\185'%")); ("Base__Field", ("8In\234X\202\188G\186\208$\192\175\136\214v")); ("Base__Comparator", ("\002\135z7b\025&\207\t\188\239&U3R\167")); ("Base__Bool0", ("\177f\254p\023\143&\239\020\136\206\242~\018F\251")); ("Base__", ("p\252\007\139\128\163W\025+\0225\001\246|P\158"))], [(0)])

val of_info : Base__.Info.t -> t

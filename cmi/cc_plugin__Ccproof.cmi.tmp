type rule =
    Ax of Cc_plugin.Ccalgo.axiom
  | SymAx of Cc_plugin.Ccalgo.axiom
  | Refl of Cc_plugin.Ccalgo.ATerm.t
  | Trans of proof * proof
  | Congr of proof * proof
  | Inject of proof * Constr.pconstructor * int * int
and proof = private {
  p_lhs : Cc_plugin.Ccalgo.ATerm.t;
  p_rhs : Cc_plugin.Ccalgo.ATerm.t;
  p_rule : rule;
}
val build_proof :
  Environ.env ->
  Evd.evar_map ->
  Cc_plugin.Ccalgo.forest ->
  [ `Discr of
      int * Cc_plugin.Ccalgo.pa_constructor * int *
      Cc_plugin.Ccalgo.pa_constructor
  | `Prove of int * int ] ->("DEBUG:rule", [Tag1 (("rule", 1052), (0, 0, Tag1 ([(("Ax", 464), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Cc_plugin")), "Ccalgo"), "axiom"), 0, (0)), 100000000, 0, -23)]), 0, (("plugins/cc/ccproof.mli", 15, 713, 713), ("plugins/cc/ccproof.mli", 15, 713, 726), 0), 0, Tag1 ("Cc_plugin__Ccproof", 3)); (("SymAx", 465), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Cc_plugin")), "Ccalgo"), "axiom"), 0, (0)), 100000000, 0, -24)]), 0, (("plugins/cc/ccproof.mli", 17, 775, 775), ("plugins/cc/ccproof.mli", 17, 775, 791), 0), 0, Tag1 ("Cc_plugin__Ccproof", 4)); (("Refl", 466), ([(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Cc_plugin")), "Ccalgo"), "ATerm"), "t"), 0, (0)), 100000000, 0, -25)]), 0, (("plugins/cc/ccproof.mli", 19, 839, 839), ("plugins/cc/ccproof.mli", 19, 839, 856), 0), 0, Tag1 ("Cc_plugin__Ccproof", 5)); (("Trans", 506), ([(Tag3 ((("proof", 1053)), 0, (0)), 100000000, 0, -26); (Tag3 ((("proof", 1053)), 0, (0)), 100000000, 0, -27)]), 0, (("plugins/cc/ccproof.mli", 20, 878, 878), ("plugins/cc/ccproof.mli", 20, 878, 902), 0), 0, Tag1 ("Cc_plugin__Ccproof", 6)); (("Congr", 507), ([(Tag3 ((("proof", 1053)), 0, (0)), 100000000, 0, -28); (Tag3 ((("proof", 1053)), 0, (0)), 100000000, 0, -29)]), 0, (("plugins/cc/ccproof.mli", 22, 963, 963), ("plugins/cc/ccproof.mli", 22, 963, 987), 0), 0, Tag1 ("Cc_plugin__Ccproof", 7)); (("Inject", 508), ([(Tag3 ((("proof", 1053)), 0, (0)), 100000000, 0, -30); (Tag3 (Tag1 ((Tag2 ("Constr")), "pconstructor"), 0, (0)), 100000000, 0, -31); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -32); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -33)]), 0, (("plugins/cc/ccproof.mli", 25, 1122, 1122), ("plugins/cc/ccproof.mli", 25, 1122, 1166), 0), 0, Tag1 ("Cc_plugin__Ccproof", 8))], 0), 1, 0, 0, 0, 0, 0, (("plugins/cc/ccproof.mli", 14, 701, 701), ("plugins/cc/ccproof.mli", 25, 1122, 1166), 0), 0, 0, 0, Tag1 ("Cc_plugin__Ccproof", 1)), 1, 0); Tag1 (("proof", 1053), (0, 0, [[(("p_lhs", 509), 0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Cc_plugin")), "Ccalgo"), "ATerm"), "t"), 0, (0)), 100000000, 0, -20), (("plugins/cc/ccproof.mli", 29, 1312, 1325), ("plugins/cc/ccproof.mli", 29, 1312, 1339), 0), 0, Tag1 ("Cc_plugin__Ccproof", 9)); (("p_rhs", 510), 0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Cc_plugin")), "Ccalgo"), "ATerm"), "t"), 0, (0)), 100000000, 0, -21), (("plugins/cc/ccproof.mli", 29, 1312, 1339), ("plugins/cc/ccproof.mli", 29, 1312, 1353), 0), 0, Tag1 ("Cc_plugin__Ccproof", 10)); (("p_rule", 511), 0, (Tag3 ((("rule", 1052)), 0, (0)), 100000000, 0, -22), (("plugins/cc/ccproof.mli", 29, 1312, 1353), ("plugins/cc/ccproof.mli", 29, 1312, 1364), 0), 0, Tag1 ("Cc_plugin__Ccproof", 11))]], 0, 0, 0, 0, 0, 0, (("plugins/cc/ccproof.mli", 28, 1300, 1300), ("plugins/cc/ccproof.mli", 29, 1312, 1365), 0), 0, 0, 0, Tag1 ("Cc_plugin__Ccproof", 2)), 2, 0); (("build_proof", 1054), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -19), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -18), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Cc_plugin")), "Ccalgo"), "forest"), 0, (0)), 100000000, 0, -17), (Tag1 (0, (Tag8 (([("Discr", (((Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -13); (Tag3 (Tag1 (Tag1 ((Tag2 ("Cc_plugin")), "Ccalgo"), "pa_constructor"), 0, (0)), 100000000, 0, -14); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -15); (Tag3 (Tag1 (Tag1 ((Tag2 ("Cc_plugin")), "Ccalgo"), "pa_constructor"), 0, (0)), 100000000, 0, -16)]), 100000000, 0, -12)))); ("Prove", (((Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -10); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -11)]), 100000000, 0, -9))))], (0, 100000000, 0, -8), 1, 0, 0)), 100000000, 0, -7), (Tag3 ((("proof", 1053)), 0, (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("plugins/cc/ccproof.mli", 33, 1404, 1404), ("plugins/cc/ccproof.mli", 36, 1523, 1557), 0), 0, Tag1 ("Cc_plugin__Ccproof", 12)), 0)], "Cc_plugin__Ccproof", [("Cc_plugin__Ccproof", ("\136\195.\134\153\169\177V\173\239\r\253\024\149\178\178")); ("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Vmemitcodes", ("wCd\138\165\158DD\241gH\236.\210\197\247")); ("Vmbytecodes", ("\025\021\151\137Dx\149W\236+[\143f\208\160\016")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Unix", (":B72R\011\005Sj\189)\011\239PH\254")); ("UnivSubst", ("\190qu\031mc\130\181\003G]\132\"\219m)")); ("UnivProblem", ("6'\161\018\181\001.\253\000\141a6\171\1727\155")); ("UnivNames", ("%\151_\209%+JM$n\001\232\194n\178N")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UState", ("SD\203\215|\136\n\251\239\208\148\215C\n\167\005")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Summary", ("\148G\135\226\024L3\246\021\028U\146\164`\253\250")); ("Store", ("/dT\252\145\179pq\216{\181\206\190K+U")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("Section", ("\245\207\b\021\142v=\155#w\246}\"4b\006")); ("Safe_typing", (")\250?\164\145\132\241\127\186\152h+\145\"\237l")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("Range", ("\218\130\001r\237\r\144\171\164\021l\155\196\143sg")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("Nativevalues", ("8:\007\025e\226c,\001\171\146#l\210\171\152")); ("Nativelib", ("V\239\205Y1\147E:,\176\196Hy\1483|")); ("Nativecode", ("\190\185\255\006m\012\210\163\138Rz\247\15283\183")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Monad", ("\244\171T\157\194p\187\160\149\195{\132\222\020\253\148")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Libnames", ("fp\0255\167\162\209\153\137\161\169#\246\193\003\198")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hook", ("\183\194\223\003\155\169',\187\240a;E\b\1396")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Genlambda", ("\170}\024\241\141\222\136S\169\219\2212i\134KI")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evd", ("\211\205p\193\216\129r\006\239oN\142ar\196\175")); ("Evar_kinds", ("\023L\186\132\218}\254\221\185\198\220\200h\003{\021")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Environ", ("\171b\1579\229<\003Z\147IL\225X\254\182\204")); ("Entries", ("\172\201\198\221Ap\027_{\174\141C\021\";p")); ("EConstr", ("\201aW\156\157;N\004\201V\208\006L\166\211)")); ("Dyn", ("\131z`\205v\2306\007x\027&K.?;\169")); ("Declarations", ("\239\137n\019\030w$\182\166z^{\b\206\163\175")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Conversion", ("\158\150&\195M\tv\127|\029\158RRK\211A")); ("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("Cc_plugin__Ccalgo", ("\166\b\168\142\029\212_\163R\249ts\199f?\t")); ("Cc_plugin", ("\1458v\208\200L!\175\252\222\021\027\020\028\1675")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CUnix", ("\140Zl\153\167\011J\015\005|th\247OTu")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CEphemeron", ("\204I\179-\206(x4\173\229\250\001PkH\151")); ("CDebug", ("^4\210p7\239!3\138\138\213?\239`\250\157")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])
 proof

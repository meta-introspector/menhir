module Relative :
  sig
    type t = { row : int; col : int; }
    val sexp_of_t : t -> Sexplib.Type.t
    val zero : t
    val add : t -> t -> t
    val sub : t -> t -> t
  end
module Absolute :
  sig
    type t = { row : int; col : int; }
    val sexp_of_t : t -> Sexplib.Type.t
    val origin : t
    val of_lexing : Lexing.position -> t
    val diff : t -> t -> Relative.t
    val add : t -> Relative.t -> t
    val sub : t -> Relative.t -> t
    val geq : t -> t -> bool("DEBUG:rule", [Tag3 (("Relative", 330), 0, (Tag1 ([Tag1 (("t", 332), (0, 0, [[(("row", 287), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -16), (("src/src_pos.mli", 5, 86, 92), ("src/src_pos.mli", 6, 102, 107), 0), 0, Tag1 ("Sexplib__Src_pos", 1)); (("col", 288), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -17), (("src/src_pos.mli", 6, 102, 108), ("src/src_pos.mli", 6, 102, 117), 0), 0, Tag1 ("Sexplib__Src_pos", 2))]], 1, 0, 0, 0, 0, 0, (("src/src_pos.mli", 4, 75, 77), ("src/src_pos.mli", 7, 118, 123), 0), 0, 0, 0, Tag1 ("Sexplib__Src_pos", 0)), 1, 0); (("sexp_of_t", 333), ((Tag1 (0, (Tag3 ((("t", 332)), 0, (0)), 100000000, 0, -15), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Type"), "t"), 0, (0)), 100000000, 0, -14), 0), 100000000, 0, -13), 0, (("src/src_pos.mli", 9, 125, 127), ("src/src_pos.mli", 9, 125, 154), 0), 0, Tag1 ("Sexplib__Src_pos", 3)), 0); (("zero", 334), ((Tag3 ((("t", 332)), 0, (0)), 100000000, 0, -12), 0, (("src/src_pos.mli", 10, 155, 157), ("src/src_pos.mli", 10, 155, 169), 0), 0, Tag1 ("Sexplib__Src_pos", 4)), 0); (("add", 335), ((Tag1 (0, (Tag3 ((("t", 332)), 0, (0)), 100000000, 0, -11), (Tag1 (0, (Tag3 ((("t", 332)), 0, (0)), 100000000, 0, -10), (Tag3 ((("t", 332)), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0), 100000000, 0, -7), 0, (("src/src_pos.mli", 11, 170, 172), ("src/src_pos.mli", 11, 170, 193), 0), 0, Tag1 ("Sexplib__Src_pos", 5)), 0); (("sub", 336), ((Tag1 (0, (Tag3 ((("t", 332)), 0, (0)), 100000000, 0, -6), (Tag1 (0, (Tag3 ((("t", 332)), 0, (0)), 100000000, 0, -5), (Tag3 ((("t", 332)), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/src_pos.mli", 12, 194, 196), ("src/src_pos.mli", 12, 194, 217), 0), 0, Tag1 ("Sexplib__Src_pos", 6)), 0)]), 0, (("src/src_pos.mli", 3, 53, 53), ("src/src_pos.mli", 13, 218, 221), 0), Tag1 ("Sexplib__Src_pos", 7)), 0, 0); Tag3 (("Absolute", 331), 0, (Tag1 ([Tag1 (("t", 337), (0, 0, [[(("row", 296), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -45), (("src/src_pos.mli", 17, 256, 262), ("src/src_pos.mli", 18, 272, 277), 0), 0, Tag1 ("Sexplib__Src_pos", 9)); (("col", 297), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -46), (("src/src_pos.mli", 18, 272, 278), ("src/src_pos.mli", 18, 272, 287), 0), 0, Tag1 ("Sexplib__Src_pos", 10))]], 1, 0, 0, 0, 0, 0, (("src/src_pos.mli", 16, 245, 247), ("src/src_pos.mli", 19, 288, 293), 0), 0, 0, 0, Tag1 ("Sexplib__Src_pos", 8)), 1, 0); (("sexp_of_t", 338), ((Tag1 (0, (Tag3 ((("t", 337)), 0, (0)), 100000000, 0, -44), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Type"), "t"), 0, (0)), 100000000, 0, -43), 0), 100000000, 0, -42), 0, (("src/src_pos.mli", 21, 295, 297), ("src/src_pos.mli", 21, 295, 324), 0), 0, Tag1 ("Sexplib__Src_pos", 11)), 0); (("origin", 339), ((Tag3 ((("t", 337)), 0, (0)), 100000000, 0, -41), 0, (("src/src_pos.mli", 22, 325, 327), ("src/src_pos.mli", 22, 325, 341), 0), 0, Tag1 ("Sexplib__Src_pos", 12)), 0); (("of_lexing", 340), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -40), (Tag3 ((("t", 337)), 0, (0)), 100000000, 0, -39), 0), 100000000, 0, -38), 0, (("src/src_pos.mli", 23, 372, 374), ("src/src_pos.mli", 23, 372, 410), 0), 0, Tag1 ("Sexplib__Src_pos", 13)), 0); (("diff", 341), ((Tag1 (0, (Tag3 ((("t", 337)), 0, (0)), 100000000, 0, -37), (Tag1 (0, (Tag3 ((("t", 337)), 0, (0)), 100000000, 0, -36), (Tag3 (Tag1 ((("Relative", 330)), "t"), 0, (0)), 100000000, 0, -35), 0), 100000000, 0, -34), 0), 100000000, 0, -33), 0, (("src/src_pos.mli", 24, 411, 413), ("src/src_pos.mli", 24, 411, 444), 0), 0, Tag1 ("Sexplib__Src_pos", 14)), 0); (("add", 342), ((Tag1 (0, (Tag3 ((("t", 337)), 0, (0)), 100000000, 0, -32), (Tag1 (0, (Tag3 (Tag1 ((("Relative", 330)), "t"), 0, (0)), 100000000, 0, -31), (Tag3 ((("t", 337)), 0, (0)), 100000000, 0, -30), 0), 100000000, 0, -29), 0), 100000000, 0, -28), 0, (("src/src_pos.mli", 25, 445, 447), ("src/src_pos.mli", 25, 445, 477), 0), 0, Tag1 ("Sexplib__Src_pos", 15)), 0); (("sub", 343), ((Tag1 (0, (Tag3 ((("t", 337)), 0, (0)), 100000000, 0, -27), (Tag1 (0, (Tag3 (Tag1 ((("Relative", 330)), "t"), 0, (0)), 100000000, 0, -26), (Tag3 ((("t", 337)), 0, (0)), 100000000, 0, -25), 0), 100000000, 0, -24), 0), 100000000, 0, -23), 0, (("src/src_pos.mli", 26, 478, 480), ("src/src_pos.mli", 26, 478, 510), 0), 0, Tag1 ("Sexplib__Src_pos", 16)), 0); (("geq", 344), ((Tag1 (0, (Tag3 ((("t", 337)), 0, (0)), 100000000, 0, -22), (Tag1 (0, (Tag3 ((("t", 337)), 0, (0)), 100000000, 0, -21), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -20), 0), 100000000, 0, -19), 0), 100000000, 0, -18), 0, (("src/src_pos.mli", 29, 546, 548), ("src/src_pos.mli", 29, 546, 572), 0), 0, Tag1 ("Sexplib__Src_pos", 17)), 0)]), 0, (("src/src_pos.mli", 15, 223, 223), ("src/src_pos.mli", 30, 573, 576), 0), Tag1 ("Sexplib__Src_pos", 18)), 0, 0)], "Sexplib__Src_pos", [("Sexplib__Src_pos", ("\157\022\246\144K\127\174bk\214\128&E\nh\213")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sexplib__Type", ("\147\252\252\167_\149\137\235\001d\241\255`\173Cs")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("Sexplib", ("\249\031\145\178\014\020\n\209\129\143\012\015<K\177\189")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

  end

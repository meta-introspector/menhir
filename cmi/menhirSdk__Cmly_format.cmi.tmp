type terminal = int
type nonterminal = int
type production = int
type lr0 = int
type lr1 = int
type ocamltype = string
type ocamlexpr = string
type range = { r_start : Lexing.position; r_end : Lexing.position; }
type attribute = {
  a_label : string;
  a_payload : string;
  a_position : range;
}
type attributes = attribute list
type terminal_def = {
  t_name : string;
  t_kind : [ `EOF | `ERROR | `PSEUDO | `REGULAR ];
  t_type : ocamltype option;
  t_attributes : attributes;
}
type nonterminal_def = {
  n_name : string;
  n_kind : [ `REGULAR | `START ];
  n_mangled_name : string;
  n_type : ocamltype option;
  n_positions : range list;
  n_nullable : bool;
  n_first : terminal list;
  n_attributes : attributes;
}
type symbol = T of terminal | N of nonterminal
type identifier = string
type action = {
  a_expr : ocamlexpr;
  a_keywords : MenhirSdk.Keyword.keyword list;
}
type producer_def = symbol * identifier * attributes
type production_def = {
  p_kind : [ `REGULAR | `START ];
  p_lhs : nonterminal;
  p_rhs : producer_def array;
  p_positions : range list;
  p_action : action option;
  p_attributes : attributes;
}
type lr0_state_def = {
  lr0_incoming : symbol option;
  lr0_items : (production * int) list;
}
type lr1_state_def = {
  lr1_lr0 : lr0;
  lr1_transitions : (symbol * lr1) list;
  lr1_reductions : (terminal * production list) list;
}
type grammar = {
  g_basename : string;
  g_preludes : string list;
  g_postludes : string list;
  g_terminals : terminal_def array;
  g_nonterminals : nonterminal_def array;
  g_productions : production_def array;
  g_lr0_states : lr0_state_def array;
  g_lr1_states : lr1_state_def array;
  g_entry_points : (nonterminal * production * lr1) list;
  g_attributes : attributes;
  g_parameters : string list;("DEBUG:rule", [Tag1 (("terminal", 397), (0, 0, 0, 1, ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -92)), 0, 0, 0, 0, (("sdk/cmly_format.ml", 25, 1528, 1528), ("sdk/cmly_format.ml", 25, 1528, 1550), 0), 0, 1, 0, Tag1 ("MenhirSdk__Cmly_format", 0)), 1, 0); Tag1 (("nonterminal", 398), (0, 0, 0, 1, ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -91)), 0, 0, 0, 0, (("sdk/cmly_format.ml", 26, 1551, 1551), ("sdk/cmly_format.ml", 26, 1551, 1573), 0), 0, 1, 0, Tag1 ("MenhirSdk__Cmly_format", 1)), 1, 0); Tag1 (("production", 399), (0, 0, 0, 1, ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -90)), 0, 0, 0, 0, (("sdk/cmly_format.ml", 27, 1574, 1574), ("sdk/cmly_format.ml", 27, 1574, 1596), 0), 0, 1, 0, Tag1 ("MenhirSdk__Cmly_format", 2)), 1, 0); Tag1 (("lr0", 400), (0, 0, 0, 1, ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -89)), 0, 0, 0, 0, (("sdk/cmly_format.ml", 28, 1597, 1597), ("sdk/cmly_format.ml", 28, 1597, 1619), 0), 0, 1, 0, Tag1 ("MenhirSdk__Cmly_format", 3)), 1, 0); Tag1 (("lr1", 401), (0, 0, 0, 1, ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -88)), 0, 0, 0, 0, (("sdk/cmly_format.ml", 29, 1620, 1620), ("sdk/cmly_format.ml", 29, 1620, 1642), 0), 0, 1, 0, Tag1 ("MenhirSdk__Cmly_format", 4)), 1, 0); Tag1 (("ocamltype", 402), (0, 0, 0, 1, ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -87)), 0, 0, 0, 0, (("sdk/cmly_format.ml", 31, 1644, 1644), ("sdk/cmly_format.ml", 31, 1644, 1669), 0), 0, 0, 0, Tag1 ("MenhirSdk__Cmly_format", 5)), 1, 0); Tag1 (("ocamlexpr", 403), (0, 0, 0, 1, ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -86)), 0, 0, 0, 0, (("sdk/cmly_format.ml", 32, 1670, 1670), ("sdk/cmly_format.ml", 32, 1670, 1695), 0), 0, 0, 0, Tag1 ("MenhirSdk__Cmly_format", 6)), 1, 0); Tag1 (("range", 404), (0, 0, [[(("r_start", 306), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -84), (("sdk/cmly_format.ml", 35, 1712, 1714), ("sdk/cmly_format.ml", 35, 1712, 1739), 0), 0, Tag1 ("MenhirSdk__Cmly_format", 8)); (("r_end", 307), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -85), (("sdk/cmly_format.ml", 36, 1740, 1742), ("sdk/cmly_format.ml", 36, 1740, 1765), 0), 0, Tag1 ("MenhirSdk__Cmly_format", 9))]], 1, 0, 0, 0, 0, 0, (("sdk/cmly_format.ml", 34, 1697, 1697), ("sdk/cmly_format.ml", 37, 1766, 1767), 0), 0, 0, 0, Tag1 ("MenhirSdk__Cmly_format", 7)), 1, 0); Tag1 (("attribute", 405), (0, 0, [[(("a_label", 333), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -81), (("sdk/cmly_format.ml", 40, 1788, 1790), ("sdk/cmly_format.ml", 40, 1788, 1806), 0), 0, Tag1 ("MenhirSdk__Cmly_format", 11)); (("a_payload", 334), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -82), (("sdk/cmly_format.ml", 41, 1807, 1809), ("sdk/cmly_format.ml", 41, 1807, 1827), 0), 0, Tag1 ("MenhirSdk__Cmly_format", 12)); (("a_position", 335), 0, (Tag3 ((("range", 404)), 0, (0)), 100000000, 0, -83), (("sdk/cmly_format.ml", 42, 1828, 1830), ("sdk/cmly_format.ml", 42, 1828, 1848), 0), 0, Tag1 ("MenhirSdk__Cmly_format", 13))]], 1, 0, 0, 0, 0, 0, (("sdk/cmly_format.ml", 39, 1769, 1769), ("sdk/cmly_format.ml", 43, 1849, 1850), 0), 0, 0, 0, Tag1 ("MenhirSdk__Cmly_format", 10)), 1, 0); Tag1 (("attributes", 406), (0, 0, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("attribute", 405)), 0, (0)), 100000000, 0, -80)], (0)), 100000000, 0, -79)), 0, 0, 0, 0, (("sdk/cmly_format.ml", 45, 1852, 1852), ("sdk/cmly_format.ml", 46, 1870, 1886), 0), 0, 0, 0, Tag1 ("MenhirSdk__Cmly_format", 14)), 1, 0); Tag1 (("terminal_def", 407), (0, 0, [[(("t_name", 338), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -73), (("sdk/cmly_format.ml", 49, 1910, 1912), ("sdk/cmly_format.ml", 49, 1910, 1927), 0), 0, Tag1 ("MenhirSdk__Cmly_format", 16)); (("t_kind", 339), 0, (Tag8 (([("EOF", (0)); ("ERROR", (0)); ("PSEUDO", (0)); ("REGULAR", (0))], (0, 100000000, 0, -75), 1, 0, 0)), 100000000, 0, -74), (("sdk/cmly_format.ml", 50, 1928, 1930), ("sdk/cmly_format.ml", 50, 1928, 1975), 0), 0, Tag1 ("MenhirSdk__Cmly_format", 17)); (("t_type", 340), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("ocamltype", 402)), 0, (0)), 100000000, 0, -77)], (0)), 100000000, 0, -76), (("sdk/cmly_format.ml", 51, 1976, 1978), ("sdk/cmly_format.ml", 51, 1976, 2003), 0), 0, Tag1 ("MenhirSdk__Cmly_format", 18)); (("t_attributes", 341), 0, (Tag3 ((("attributes", 406)), 0, (0)), 100000000, 0, -78), (("sdk/cmly_format.ml", 52, 2004, 2006), ("sdk/cmly_format.ml", 52, 2004, 2031), 0), 0, Tag1 ("MenhirSdk__Cmly_format", 19))]], 1, 0, 0, 0, 0, 0, (("sdk/cmly_format.ml", 48, 1888, 1888), ("sdk/cmly_format.ml", 53, 2032, 2033), 0), 0, 0, 0, Tag1 ("MenhirSdk__Cmly_format", 15)), 1, 0); Tag1 (("nonterminal_def", 408), (0, 0, [[(("n_name", 343), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -61), (("sdk/cmly_format.ml", 56, 2060, 2062), ("sdk/cmly_format.ml", 56, 2060, 2077), 0), 0, Tag1 ("MenhirSdk__Cmly_format", 21)); (("n_kind", 344), 0, (Tag8 (([("REGULAR", (0)); ("START", (0))], (0, 100000000, 0, -63), 1, 0, 0)), 100000000, 0, -62), (("sdk/cmly_format.ml", 57, 2078, 2080), ("sdk/cmly_format.ml", 57, 2078, 2108), 0), 0, Tag1 ("MenhirSdk__Cmly_format", 22)); (("n_mangled_name", 345), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -64), (("sdk/cmly_format.ml", 58, 2109, 2111), ("sdk/cmly_format.ml", 58, 2109, 2134), 0), 0, Tag1 ("MenhirSdk__Cmly_format", 23)); (("n_type", 346), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("ocamltype", 402)), 0, (0)), 100000000, 0, -66)], (0)), 100000000, 0, -65), (("sdk/cmly_format.ml", 59, 2135, 2137), ("sdk/cmly_format.ml", 59, 2135, 2162), 0), 0, Tag1 ("MenhirSdk__Cmly_format", 24)); (("n_positions", 347), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("range", 404)), 0, (0)), 100000000, 0, -68)], (0)), 100000000, 0, -67), (("sdk/cmly_format.ml", 60, 2163, 2165), ("sdk/cmly_format.ml", 60, 2163, 2189), 0), 0, Tag1 ("MenhirSdk__Cmly_format", 25)); (("n_nullable", 348), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -69), (("sdk/cmly_format.ml", 61, 2190, 2192), ("sdk/cmly_format.ml", 61, 2190, 2209), 0), 0, Tag1 ("MenhirSdk__Cmly_format", 26)); (("n_first", 349), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("terminal", 397)), 0, (0)), 100000000, 0, -71)], (0)), 100000000, 0, -70), (("sdk/cmly_format.ml", 62, 2210, 2212), ("sdk/cmly_format.ml", 62, 2210, 2235), 0), 0, Tag1 ("MenhirSdk__Cmly_format", 27)); (("n_attributes", 350), 0, (Tag3 ((("attributes", 406)), 0, (0)), 100000000, 0, -72), (("sdk/cmly_format.ml", 63, 2236, 2238), ("sdk/cmly_format.ml", 63, 2236, 2263), 0), 0, Tag1 ("MenhirSdk__Cmly_format", 28))]], 1, 0, 0, 0, 0, 0, (("sdk/cmly_format.ml", 55, 2035, 2035), ("sdk/cmly_format.ml", 64, 2264, 2265), 0), 0, 0, 0, Tag1 ("MenhirSdk__Cmly_format", 20)), 1, 0); Tag1 (("symbol", 409), (0, 0, Tag1 ([(("T", 352), ([(Tag3 ((("terminal", 397)), 0, (0)), 100000000, 0, -59)]), 0, (("sdk/cmly_format.ml", 67, 2281, 2283), ("sdk/cmly_format.ml", 67, 2281, 2298), 0), 0, Tag1 ("MenhirSdk__Cmly_format", 30)); (("N", 353), ([(Tag3 ((("nonterminal", 398)), 0, (0)), 100000000, 0, -60)]), 0, (("sdk/cmly_format.ml", 68, 2299, 2301), ("sdk/cmly_format.ml", 68, 2299, 2319), 0), 0, Tag1 ("MenhirSdk__Cmly_format", 31))], 0), 1, 0, 0, 0, 0, 0, (("sdk/cmly_format.ml", 66, 2267, 2267), ("sdk/cmly_format.ml", 68, 2299, 2319), 0), 0, 0, 0, Tag1 ("MenhirSdk__Cmly_format", 29)), 1, 0); Tag1 (("identifier", 410), (0, 0, 0, 1, ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -58)), 0, 0, 0, 0, (("sdk/cmly_format.ml", 70, 2321, 2321), ("sdk/cmly_format.ml", 70, 2321, 2345), 0), 0, 0, 0, Tag1 ("MenhirSdk__Cmly_format", 32)), 1, 0); Tag1 (("action", 411), (0, 0, [[(("a_expr", 356), 0, (Tag3 ((("ocamlexpr", 403)), 0, (0)), 100000000, 0, -55), (("sdk/cmly_format.ml", 73, 2363, 2365), ("sdk/cmly_format.ml", 73, 2363, 2383), 0), 0, Tag1 ("MenhirSdk__Cmly_format", 34)); (("a_keywords", 363), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("MenhirSdk")), "Keyword"), "keyword"), 0, (0)), 100000000, 0, -57)], (0)), 100000000, 0, -56), (("sdk/cmly_format.ml", 74, 2384, 2386), ("sdk/cmly_format.ml", 74, 2384, 2419), 0), 0, Tag1 ("MenhirSdk__Cmly_format", 35))]], 1, 0, 0, 0, 0, 0, (("sdk/cmly_format.ml", 72, 2347, 2347), ("sdk/cmly_format.ml", 75, 2420, 2421), 0), 0, 0, 0, Tag1 ("MenhirSdk__Cmly_format", 33)), 1, 0); Tag1 (("producer_def", 412), (0, 0, 0, 1, ((Tag2 ([(Tag3 ((("symbol", 409)), 0, (0)), 100000000, 0, -52); (Tag3 ((("identifier", 410)), 0, (0)), 100000000, 0, -53); (Tag3 ((("attributes", 406)), 0, (0)), 100000000, 0, -54)]), 100000000, 0, -51)), 0, 0, 0, 0, (("sdk/cmly_format.ml", 77, 2423, 2423), ("sdk/cmly_format.ml", 78, 2443, 2477), 0), 0, 0, 0, Tag1 ("MenhirSdk__Cmly_format", 36)), 1, 0); Tag1 (("production_def", 413), (0, 0, [[(("p_kind", 372), 0, (Tag8 (([("REGULAR", (0)); ("START", (0))], (0, 100000000, 0, -42), 1, 0, 0)), 100000000, 0, -41), (("sdk/cmly_format.ml", 81, 2503, 2505), ("sdk/cmly_format.ml", 81, 2503, 2533), 0), 0, Tag1 ("MenhirSdk__Cmly_format", 38)); (("p_lhs", 373), 0, (Tag3 ((("nonterminal", 398)), 0, (0)), 100000000, 0, -43), (("sdk/cmly_format.ml", 82, 2534, 2536), ("sdk/cmly_format.ml", 82, 2534, 2555), 0), 0, Tag1 ("MenhirSdk__Cmly_format", 39)); (("p_rhs", 374), 0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("producer_def", 412)), 0, (0)), 100000000, 0, -45)], (0)), 100000000, 0, -44), (("sdk/cmly_format.ml", 83, 2556, 2558), ("sdk/cmly_format.ml", 83, 2556, 2584), 0), 0, Tag1 ("MenhirSdk__Cmly_format", 40)); (("p_positions", 375), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("range", 404)), 0, (0)), 100000000, 0, -47)], (0)), 100000000, 0, -46), (("sdk/cmly_format.ml", 84, 2585, 2587), ("sdk/cmly_format.ml", 84, 2585, 2611), 0), 0, Tag1 ("MenhirSdk__Cmly_format", 41)); (("p_action", 376), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("action", 411)), 0, (0)), 100000000, 0, -49)], (0)), 100000000, 0, -48), (("sdk/cmly_format.ml", 85, 2612, 2614), ("sdk/cmly_format.ml", 85, 2612, 2638), 0), 0, Tag1 ("MenhirSdk__Cmly_format", 42)); (("p_attributes", 377), 0, (Tag3 ((("attributes", 406)), 0, (0)), 100000000, 0, -50), (("sdk/cmly_format.ml", 86, 2639, 2641), ("sdk/cmly_format.ml", 86, 2639, 2666), 0), 0, Tag1 ("MenhirSdk__Cmly_format", 43))]], 1, 0, 0, 0, 0, 0, (("sdk/cmly_format.ml", 80, 2479, 2479), ("sdk/cmly_format.ml", 87, 2667, 2668), 0), 0, 0, 0, Tag1 ("MenhirSdk__Cmly_format", 37)), 1, 0); Tag1 (("lr0_state_def", 414), (0, 0, [[(("lr0_incoming", 379), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("symbol", 409)), 0, (0)), 100000000, 0, -36)], (0)), 100000000, 0, -35), (("sdk/cmly_format.ml", 90, 2693, 2695), ("sdk/cmly_format.ml", 90, 2693, 2723), 0), 0, Tag1 ("MenhirSdk__Cmly_format", 45)); (("lr0_items", 380), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("production", 399)), 0, (0)), 100000000, 0, -39); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -40)]), 100000000, 0, -38)], (0)), 100000000, 0, -37), (("sdk/cmly_format.ml", 91, 2724, 2726), ("sdk/cmly_format.ml", 91, 2724, 2761), 0), 0, Tag1 ("MenhirSdk__Cmly_format", 46))]], 1, 0, 0, 0, 0, 0, (("sdk/cmly_format.ml", 89, 2670, 2670), ("sdk/cmly_format.ml", 92, 2762, 2763), 0), 0, 0, 0, Tag1 ("MenhirSdk__Cmly_format", 44)), 1, 0); Tag1 (("lr1_state_def", 415), (0, 0, [[(("lr1_lr0", 382), 0, (Tag3 ((("lr0", 400)), 0, (0)), 100000000, 0, -25), (("sdk/cmly_format.ml", 95, 2788, 2790), ("sdk/cmly_format.ml", 95, 2788, 2803), 0), 0, Tag1 ("MenhirSdk__Cmly_format", 48)); (("lr1_transitions", 383), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("symbol", 409)), 0, (0)), 100000000, 0, -28); (Tag3 ((("lr1", 401)), 0, (0)), 100000000, 0, -29)]), 100000000, 0, -27)], (0)), 100000000, 0, -26), (("sdk/cmly_format.ml", 96, 2804, 2806), ("sdk/cmly_format.ml", 96, 2804, 2843), 0), 0, Tag1 ("MenhirSdk__Cmly_format", 49)); (("lr1_reductions", 384), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("terminal", 397)), 0, (0)), 100000000, 0, -32); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("production", 399)), 0, (0)), 100000000, 0, -34)], (0)), 100000000, 0, -33)]), 100000000, 0, -31)], (0)), 100000000, 0, -30), (("sdk/cmly_format.ml", 97, 2844, 2846), ("sdk/cmly_format.ml", 97, 2844, 2896), 0), 0, Tag1 ("MenhirSdk__Cmly_format", 50))]], 1, 0, 0, 0, 0, 0, (("sdk/cmly_format.ml", 94, 2765, 2765), ("sdk/cmly_format.ml", 98, 2897, 2898), 0), 0, 0, 0, Tag1 ("MenhirSdk__Cmly_format", 47)), 1, 0); Tag1 (("grammar", 416), (0, 0, [[(("g_basename", 386), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2), (("sdk/cmly_format.ml", 101, 2917, 2919), ("sdk/cmly_format.ml", 101, 2917, 2943), 0), 0, Tag1 ("MenhirSdk__Cmly_format", 52)); (("g_preludes", 387), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4)], (0)), 100000000, 0, -3), (("sdk/cmly_format.ml", 102, 2944, 2946), ("sdk/cmly_format.ml", 102, 2944, 2975), 0), 0, Tag1 ("MenhirSdk__Cmly_format", 53)); (("g_postludes", 388), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6)], (0)), 100000000, 0, -5), (("sdk/cmly_format.ml", 103, 2976, 2978), ("sdk/cmly_format.ml", 103, 2976, 3007), 0), 0, Tag1 ("MenhirSdk__Cmly_format", 54)); (("g_terminals", 389), 0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("terminal_def", 407)), 0, (0)), 100000000, 0, -8)], (0)), 100000000, 0, -7), (("sdk/cmly_format.ml", 104, 3008, 3010), ("sdk/cmly_format.ml", 104, 3008, 3049), 0), 0, Tag1 ("MenhirSdk__Cmly_format", 55)); (("g_nonterminals", 390), 0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("nonterminal_def", 408)), 0, (0)), 100000000, 0, -10)], (0)), 100000000, 0, -9), (("sdk/cmly_format.ml", 105, 3050, 3052), ("sdk/cmly_format.ml", 105, 3050, 3091), 0), 0, Tag1 ("MenhirSdk__Cmly_format", 56)); (("g_productions", 391), 0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("production_def", 413)), 0, (0)), 100000000, 0, -12)], (0)), 100000000, 0, -11), (("sdk/cmly_format.ml", 106, 3092, 3094), ("sdk/cmly_format.ml", 106, 3092, 3133), 0), 0, Tag1 ("MenhirSdk__Cmly_format", 57)); (("g_lr0_states", 392), 0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("lr0_state_def", 414)), 0, (0)), 100000000, 0, -14)], (0)), 100000000, 0, -13), (("sdk/cmly_format.ml", 107, 3134, 3136), ("sdk/cmly_format.ml", 107, 3134, 3175), 0), 0, Tag1 ("MenhirSdk__Cmly_format", 58)); (("g_lr1_states", 393), 0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("lr1_state_def", 415)), 0, (0)), 100000000, 0, -16)], (0)), 100000000, 0, -15), (("sdk/cmly_format.ml", 108, 3176, 3178), ("sdk/cmly_format.ml", 108, 3176, 3217), 0), 0, Tag1 ("MenhirSdk__Cmly_format", 59)); (("g_entry_points", 394), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("nonterminal", 398)), 0, (0)), 100000000, 0, -19); (Tag3 ((("production", 399)), 0, (0)), 100000000, 0, -20); (Tag3 ((("lr1", 401)), 0, (0)), 100000000, 0, -21)]), 100000000, 0, -18)], (0)), 100000000, 0, -17), (("sdk/cmly_format.ml", 109, 3218, 3220), ("sdk/cmly_format.ml", 109, 3218, 3275), 0), 0, Tag1 ("MenhirSdk__Cmly_format", 60)); (("g_attributes", 395), 0, (Tag3 ((("attributes", 406)), 0, (0)), 100000000, 0, -22), (("sdk/cmly_format.ml", 110, 3276, 3278), ("sdk/cmly_format.ml", 110, 3276, 3306), 0), 0, Tag1 ("MenhirSdk__Cmly_format", 61)); (("g_parameters", 396), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -24)], (0)), 100000000, 0, -23), (("sdk/cmly_format.ml", 111, 3307, 3309), ("sdk/cmly_format.ml", 111, 3307, 3338), 0), 0, Tag1 ("MenhirSdk__Cmly_format", 62))]], 1, 0, 0, 0, 0, 0, (("sdk/cmly_format.ml", 100, 2900, 2900), ("sdk/cmly_format.ml", 112, 3339, 3340), 0), 0, 0, 0, Tag1 ("MenhirSdk__Cmly_format", 51)), 1, 0)], "MenhirSdk__Cmly_format", [("MenhirSdk__Cmly_format", ("\208\156Ym\237\127_ @E\022\014\254vD\159")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("MenhirSdk__Keyword", ("\171\145\177^\199\189\197f\150\136y\144\252\234>\178")); ("MenhirSdk", ("F\232\012\196l\143\145[\255\2193U\197\027\176\139")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

}

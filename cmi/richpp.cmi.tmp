type 'annotation located = {
  annotation : 'annotation option;
  startpos : int;
  endpos : int;
}
val rich_pp :
  width:int -> ?depth:int -> Pp.t -> Pp.pp_tag located Xml_datatype.gxml
val annotations_positions :
  'annotation located Xml_datatype.gxml -> ('annotation * (int * int)) list
val xml_of_rich_pp :
  ('annotation -> string) ->
  ('annotation -> (string * string) list) ->
  'annotation located Xml_datatype.gxml -> Xml_datatype.xml
type richpp = Xml_datatype.xml
("DEBUG:rule", [Tag1 (("located", 342), ([((("annotation")), 100000000, 0, -45)], 1, [[(("annotation", 270), 0, (Tag3 ((Tag3 ("option", 10)), [((("annotation")), 100000000, 0, -45)], (0)), 100000000, 0, -44), (("ide/coqide/protocol/richpp.mli", 16, 862, 864), ("ide/coqide/protocol/richpp.mli", 16, 862, 896), 0), 0, Tag1 ("Richpp", 1)); (("startpos", 271), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -46), (("ide/coqide/protocol/richpp.mli", 17, 897, 899), ("ide/coqide/protocol/richpp.mli", 17, 897, 916), 0), 0, Tag1 ("Richpp", 2)); (("endpos", 272), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -47), (("ide/coqide/protocol/richpp.mli", 18, 917, 919), ("ide/coqide/protocol/richpp.mli", 18, 917, 935), 0), 0, Tag1 ("Richpp", 3))]], 1, 0, [25], [0], 0, 0, (("ide/coqide/protocol/richpp.mli", 15, 833, 833), ("ide/coqide/protocol/richpp.mli", 19, 936, 937), 0), 0, 0, 0, Tag1 ("Richpp", 0)), 1, 0); (("rich_pp", 343), ((Tag1 (("width"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -43), (Tag1 (Tag1 ("depth"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -42)], (0)), 100000000, 0, -41), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -40), (Tag3 (Tag1 ((Tag2 ("Xml_datatype")), "gxml"), [(Tag3 ((("located", 342)), [(Tag3 (Tag1 ((Tag2 ("Pp")), "pp_tag"), 0, (0)), 100000000, 0, -39)], (0)), 100000000, 0, -38)], (0)), 100000000, 0, -37), 0), 100000000, 0, -36), 0), 100000000, 0, -35), 0), 100000000, 0, -34), 0, (("ide/coqide/protocol/richpp.mli", 29, 1345, 1345), ("ide/coqide/protocol/richpp.mli", 29, 1345, 1429), 0), 0, Tag1 ("Richpp", 4)), 0); (("annotations_positions", 344), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Xml_datatype")), "gxml"), [(Tag3 ((("located", 342)), [((("annotation")), 100000000, 0, -28)], (0)), 100000000, 0, -33)], (0)), 100000000, 0, -32), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("annotation")), 100000000, 0, -28); (Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -30); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -31)]), 100000000, 0, -29)]), 100000000, 0, -27)], (0)), 100000000, 0, -26), 0), 100000000, 0, -25), 0, (("ide/coqide/protocol/richpp.mli", 34, 1581, 1581), ("ide/coqide/protocol/richpp.mli", 36, 1652, 1686), 0), 0, Tag1 ("Richpp", 5)), 0); (("xml_of_rich_pp", 345), ((Tag1 (0, (Tag1 (0, ((("annotation")), 100000000, 0, -17), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -24), 0), 100000000, 0, -23), (Tag1 (0, (Tag1 (0, ((("annotation")), 100000000, 0, -17), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -21); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -22)]), 100000000, 0, -20)], (0)), 100000000, 0, -19), 0), 100000000, 0, -18), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Xml_datatype")), "gxml"), [(Tag3 ((("located", 342)), [((("annotation")), 100000000, 0, -17)], (0)), 100000000, 0, -16)], (0)), 100000000, 0, -15), (Tag3 (Tag1 ((Tag2 ("Xml_datatype")), "xml"), 0, (0)), 100000000, 0, -14), 0), 100000000, 0, -13), 0), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("ide/coqide/protocol/richpp.mli", 40, 1793, 1793), ("ide/coqide/protocol/richpp.mli", 44, 1931, 1949), 0), 0, Tag1 ("Richpp", 6)), 0); Tag1 (("richpp", 346), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Xml_datatype")), "xml"), 0, (0)), 100000000, 0, -10)), 0, 0, 0, 0, (("ide/coqide/protocol/richpp.mli", 48, 1977, 1977), ("ide/coqide/protocol/richpp.mli", 48, 1977, 2007), 0), 0, 0, 0, Tag1 ("Richpp", 7)), 1, 0); (("richpp_of_pp", 347), ((Tag1 (("width"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -9), (Tag1 (Tag1 ("depth"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -8)], (0)), 100000000, 0, -7), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -6), (Tag3 ((("richpp", 346)), 0, (0)), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("ide/coqide/protocol/richpp.mli", 52, 2053, 2053), ("ide/coqide/protocol/richpp.mli", 52, 2053, 2113), 0), 0, Tag1 ("Richpp", 8)), 0)], "Richpp", [("Richpp", ("\177&\219\023\166\024u\223\198\149Gw\169\244,\229")); ("Xml_datatype", ("\200_,.\243\247\166\156\210\247\226\250Oey\171")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
val richpp_of_pp : width:int -> ?depth:int -> Pp.t -> richpp

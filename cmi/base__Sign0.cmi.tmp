type t = Neg | Zero | Pos
val t_of_sexp : Sexplib0.Sexp.t -> t
val sexp_of_t : t -> Sexplib0.Sexp.t
val t_sexp_grammar : t Sexplib0.Sexp_grammar.t
val compare : t -> t -> int
val hash_fold_t :
  Base__.Ppx_hash_lib.Std.Hash.state ->
  t -> Base__.Ppx_hash_lib.Std.Hash.state
val all : t list
module Replace_polymorphic_compare :
  sig
    val ( < ) : t -> t -> bool
    val ( <= ) : t -> t -> bool
    val ( <> ) : t -> t -> bool
    val ( = ) : t -> t -> bool
    val ( > ) : t -> t -> bool
    val ( >= ) : t -> t -> bool
    val ascending : t -> t -> int
    val descending : t -> t -> int
    val compare : t -> t -> int
    val equal : t -> t -> bool
    val max : t -> t -> t
    val min : t -> t -> t
  end
val of_string : string -> t
val to_string : t -> string
val to_int : t -> int
val hash : t -> int
val module_name : string("DEBUG:rule", [Tag1 (("t", 1531), (0, 0, Tag1 ([(("Neg", 783), (0), 0, (("src/sign0.ml", 6, 107, 109), ("src/sign0.ml", 6, 107, 114), 0), 0, Tag1 ("Base__Sign0", 1)); (("Zero", 784), (0), 0, (("src/sign0.ml", 7, 115, 117), ("src/sign0.ml", 7, 115, 123), 0), 0, Tag1 ("Base__Sign0", 2)); (("Pos", 785), (0), 0, (("src/sign0.ml", 8, 124, 126), ("src/sign0.ml", 8, 124, 131), 0), 0, Tag1 ("Base__Sign0", 3))], 0), 1, 0, 0, 0, 0, 0, (("src/sign0.ml", 5, 98, 98), ("src/sign0.ml", 9, 132, 196), 0), [(("deriving_inline", (("src/sign0.ml", 9, 132, 135), ("src/sign0.ml", 9, 132, 150), 0)), ([([(Tag8 ([(((("sexp"), (("src/sign0.ml", 9, 132, 151), ("src/sign0.ml", 9, 132, 155), 0))), (("src/sign0.ml", 9, 132, 151), ("src/sign0.ml", 9, 132, 155), 0), 0, 0); (((("sexp_grammar"), (("src/sign0.ml", 9, 132, 157), ("src/sign0.ml", 9, 132, 169), 0))), (("src/sign0.ml", 9, 132, 157), ("src/sign0.ml", 9, 132, 169), 0), 0, 0); (((("compare"), (("src/sign0.ml", 9, 132, 171), ("src/sign0.ml", 9, 132, 178), 0))), (("src/sign0.ml", 9, 132, 171), ("src/sign0.ml", 9, 132, 178), 0), 0, 0); (((("hash"), (("src/sign0.ml", 9, 132, 180), ("src/sign0.ml", 9, 132, 184), 0))), (("src/sign0.ml", 9, 132, 180), ("src/sign0.ml", 9, 132, 184), 0), 0, 0); (((("enumerate"), (("src/sign0.ml", 9, 132, 186), ("src/sign0.ml", 9, 132, 195), 0))), (("src/sign0.ml", 9, 132, 186), ("src/sign0.ml", 9, 132, 195), 0), 0, 0)]), (("src/sign0.ml", 9, 132, 151), ("src/sign0.ml", 9, 132, 195), 0), 0, 0)], (("src/sign0.ml", 9, 132, 151), ("src/sign0.ml", 9, 132, 195), 0))]), (("src/sign0.ml", 9, 132, 132), ("src/sign0.ml", 9, 132, 196), 0))], 1, 0, Tag1 ("Base__Sign0", 0)), 1, 0); (("t_of_sexp", 1532), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -37), (Tag3 ((("t", 1531)), 0, (0)), 100000000, 0, -36), 0), 100000000, 0, -35), 0, (("src/sign0.ml", 11, 198, 202), ("src/sign0.ml", 11, 198, 211), 0), 0, Tag1 ("Base__Sign0", 4)), 0); (("sexp_of_t", 1533), ((Tag1 (0, (Tag3 ((("t", 1531)), 0, (0)), 100000000, 0, -34), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -33), 0), 100000000, 0, -32), 0, (("src/sign0.ml", 31, 1301, 1305), ("src/sign0.ml", 31, 1301, 1314), 0), 0, Tag1 ("Base__Sign0", 12)), 0); (("t_sexp_grammar", 1534), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("t", 1531)), 0, (0)), 100000000, 0, -31)], (0)), 100000000, 0, -30), 0, (("src/sign0.ml", 39, 1486, 1491), ("src/sign0.ml", 39, 1486, 1505), 0), 0, Tag1 ("Base__Sign0", 14)), 0); (("compare", 1535), ((Tag1 (0, (Tag3 ((("t", 1531)), 0, (0)), 100000000, 0, -29), (Tag1 (0, (Tag3 ((("t", 1531)), 0, (0)), 100000000, 0, -28), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -27), 0), 100000000, 0, -26), 0), 100000000, 0, -25), 0, (("src/sign0.ml", 52, 1880, 1884), ("src/sign0.ml", 52, 1880, 1891), 0), 0, Tag1 ("Base__Sign0", 16)), 0); (("hash_fold_t", 1536), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -24), (Tag1 (0, (Tag3 ((("t", 1531)), 0, (0)), 100000000, 0, -23), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Ppx_hash_lib"), "Std"), "Hash"), "state"), 0, (0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0), 100000000, 0, -20), 0, (("src/sign0.ml", 54, 1928, 1933), ("src/sign0.ml", 54, 1928, 1944), 0), 0, Tag1 ("Base__Sign0", 17)), 0); (("all", 1537), ((Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 1531)), 0, (0)), 100000000, 0, -19)], (0)), 100000000, 0, -18), 0, (("src/sign0.ml", 72, 2509, 2513), ("src/sign0.ml", 72, 2509, 2516), 0), 0, Tag1 ("Base__Sign0", 25)), 0); Tag3 (("Replace_polymorphic_compare", 1538), 0, (Tag1 ([(("<", 1545), ((Tag1 (0, (Tag3 ((("t", 1531)), 0, (0)), 100000000, 0, -95), (Tag1 (0, (Tag3 ((("t", 1531)), 0, (0)), 100000000, 0, -94), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -93), 0), 100000000, 0, -92), 0), 100000000, 0, -91), 0, (("src/sign0.ml", 77, 2604, 2610), ("src/sign0.ml", 77, 2604, 2615), 0), 0, Tag1 ("Base__Sign0", 26)), 0); (("<=", 1546), ((Tag1 (0, (Tag3 ((("t", 1531)), 0, (0)), 100000000, 0, -90), (Tag1 (0, (Tag3 ((("t", 1531)), 0, (0)), 100000000, 0, -89), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -88), 0), 100000000, 0, -87), 0), 100000000, 0, -86), 0, (("src/sign0.ml", 78, 2643, 2649), ("src/sign0.ml", 78, 2643, 2655), 0), 0, Tag1 ("Base__Sign0", 29)), 0); (("<>", 1547), ((Tag1 (0, (Tag3 ((("t", 1531)), 0, (0)), 100000000, 0, -85), (Tag1 (0, (Tag3 ((("t", 1531)), 0, (0)), 100000000, 0, -84), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -83), 0), 100000000, 0, -82), 0), 100000000, 0, -81), 0, (("src/sign0.ml", 79, 2684, 2690), ("src/sign0.ml", 79, 2684, 2696), 0), 0, Tag1 ("Base__Sign0", 32)), 0); (("=", 1548), ((Tag1 (0, (Tag3 ((("t", 1531)), 0, (0)), 100000000, 0, -80), (Tag1 (0, (Tag3 ((("t", 1531)), 0, (0)), 100000000, 0, -79), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -78), 0), 100000000, 0, -77), 0), 100000000, 0, -76), 0, (("src/sign0.ml", 80, 2725, 2731), ("src/sign0.ml", 80, 2725, 2736), 0), 0, Tag1 ("Base__Sign0", 35)), 0); ((">", 1549), ((Tag1 (0, (Tag3 ((("t", 1531)), 0, (0)), 100000000, 0, -75), (Tag1 (0, (Tag3 ((("t", 1531)), 0, (0)), 100000000, 0, -74), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -73), 0), 100000000, 0, -72), 0), 100000000, 0, -71), 0, (("src/sign0.ml", 81, 2764, 2770), ("src/sign0.ml", 81, 2764, 2775), 0), 0, Tag1 ("Base__Sign0", 38)), 0); ((">=", 1550), ((Tag1 (0, (Tag3 ((("t", 1531)), 0, (0)), 100000000, 0, -70), (Tag1 (0, (Tag3 ((("t", 1531)), 0, (0)), 100000000, 0, -69), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -68), 0), 100000000, 0, -67), 0), 100000000, 0, -66), 0, (("src/sign0.ml", 82, 2803, 2809), ("src/sign0.ml", 82, 2803, 2815), 0), 0, Tag1 ("Base__Sign0", 41)), 0); (("ascending", 1551), ((Tag1 (0, (Tag3 ((("t", 1531)), 0, (0)), 100000000, 0, -65), (Tag1 (0, (Tag3 ((("t", 1531)), 0, (0)), 100000000, 0, -64), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -63), 0), 100000000, 0, -62), 0), 100000000, 0, -61), 0, (("src/sign0.ml", 83, 2844, 2850), ("src/sign0.ml", 83, 2844, 2859), 0), 0, Tag1 ("Base__Sign0", 44)), 0); (("descending", 1552), ((Tag1 (0, (Tag3 ((("t", 1531)), 0, (0)), 100000000, 0, -60), (Tag1 (0, (Tag3 ((("t", 1531)), 0, (0)), 100000000, 0, -59), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -58), 0), 100000000, 0, -57), 0), 100000000, 0, -56), 0, (("src/sign0.ml", 84, 2891, 2897), ("src/sign0.ml", 84, 2891, 2907), 0), 0, Tag1 ("Base__Sign0", 47)), 0); (("compare", 1553), ((Tag1 (0, (Tag3 ((("t", 1531)), 0, (0)), 100000000, 0, -55), (Tag1 (0, (Tag3 ((("t", 1531)), 0, (0)), 100000000, 0, -54), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -53), 0), 100000000, 0, -52), 0), 100000000, 0, -51), 0, (("src/sign0.ml", 85, 2940, 2946), ("src/sign0.ml", 85, 2940, 2953), 0), 0, Tag1 ("Base__Sign0", 50)), 0); (("equal", 1554), ((Tag1 (0, (Tag3 ((("t", 1531)), 0, (0)), 100000000, 0, -50), (Tag1 (0, (Tag3 ((("t", 1531)), 0, (0)), 100000000, 0, -49), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -48), 0), 100000000, 0, -47), 0), 100000000, 0, -46), 0, (("src/sign0.ml", 86, 2983, 2989), ("src/sign0.ml", 86, 2983, 2994), 0), 0, Tag1 ("Base__Sign0", 53)), 0); (("max", 1555), ((Tag1 (0, (Tag3 ((("t", 1531)), 0, (0)), 100000000, 0, -45), (Tag1 (0, (Tag3 ((("t", 1531)), 0, (0)), 100000000, 0, -44), (Tag3 ((("t", 1531)), 0, (0)), 100000000, 0, -44), 0), 100000000, 0, -43), 0), 100000000, 0, -42), 0, (("src/sign0.ml", 87, 3022, 3028), ("src/sign0.ml", 87, 3022, 3031), 0), 0, Tag1 ("Base__Sign0", 56)), 0); (("min", 1556), ((Tag1 (0, (Tag3 ((("t", 1531)), 0, (0)), 100000000, 0, -41), (Tag1 (0, (Tag3 ((("t", 1531)), 0, (0)), 100000000, 0, -40), (Tag3 ((("t", 1531)), 0, (0)), 100000000, 0, -40), 0), 100000000, 0, -39), 0), 100000000, 0, -38), 0, (("src/sign0.ml", 88, 3068, 3074), ("src/sign0.ml", 88, 3068, 3077), 0), 0, Tag1 ("Base__Sign0", 59)), 0)]), 0, (("src/sign0.ml", 76, 2560, 2560), ("src/sign0.ml", 89, 3114, 3117), 0), Tag1 ("Base__Sign0", 62)), 0, 0); (("of_string", 1539), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -17), (Tag3 ((("t", 1531)), 0, (0)), 100000000, 0, -16), 0), 100000000, 0, -15), 0, (("src/sign0.ml", 91, 3119, 3123), ("src/sign0.ml", 91, 3119, 3132), 0), 0, Tag1 ("Base__Sign0", 63)), 0); (("to_string", 1540), ((Tag1 (0, (Tag3 ((("t", 1531)), 0, (0)), 100000000, 0, -14), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -13), 0), 100000000, 0, -12), 0, (("src/sign0.ml", 92, 3166, 3170), ("src/sign0.ml", 92, 3166, 3179), 0), 0, Tag1 ("Base__Sign0", 65)), 0); (("to_int", 1541), ((Tag1 (0, (Tag3 ((("t", 1531)), 0, (0)), 100000000, 0, -11), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -10), 0), 100000000, 0, -9), 0, (("src/sign0.ml", 94, 3214, 3218), ("src/sign0.ml", 94, 3214, 3224), 0), 0, Tag1 ("Base__Sign0", 67)), 0); (("hash", 1542), ((Tag1 (0, (Tag3 ((("t", 1531)), 0, (0)), 100000000, 0, -8), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -7), 0), 100000000, 0, -6), 0, (("src/sign0.ml", 103, 3363, 3367), ("src/sign0.ml", 103, 3363, 3371), 0), 0, Tag1 ("Base__Sign0", 68)), 0); (("module_name", 1543), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5), 0, (("src/sign0.ml", 104, 3381, 3385), ("src/sign0.ml", 104, 3381, 3396), 0), 0, Tag1 ("Base__Sign0", 69)), 0); (("of_int", 1544), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -4), (Tag3 ((("t", 1531)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/sign0.ml", 105, 3411, 3415), ("src/sign0.ml", 105, 3411, 3421), 0), 0, Tag1 ("Base__Sign0", 70)), 0)], "Base__Sign0", [("Base__Sign0", ("\152\138\204\175\244\128J\165\221\165\160\150y\1305i")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__StringLabels", ("\134F\024\226\216Is#\223\230\234\169Z\206Gc")); ("Stdlib__StdLabels", (".\193\n\229\139\017\212C-ZA\\kz-\128")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Printf", ("\215<\139]\021\142\224E\245m\198qc(W\229")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__MoreLabels", ("\248\232\248\254`<\230\241\161U\193U\1466J\238")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__ListLabels", ("*\194\012\191\020%\170\249m\002\180\178hk\205\220")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shadow_stdlib", ("\219zi\164\203\158e)\232\221\196\168\138x\142\018")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv_error", ("kzv!\151~\198P\000\165\176d\007\251p\232")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Base_internalhash_types", ("0\148#2\226\223\018\135\173>!\020\237\017\255\149")); ("Base__Sexp", ("\154\187\171&\209=\153[\236\250!U\174`\190T")); ("Base__Ppx_hash_lib", ("\199\141\178\193\006\209L\007^\020(\131\224sn8")); ("Base__Ppx_compare_lib", ("\243\186~\233\228\199Ah\181.\223\004e\231\129S")); ("Base__Poly0", ("\230;\143\234\255.H\132KOe7\155\\\023f")); ("Base__Import0", ("\156\129U\197Y[\\\153\017Ho\203\173\204\220\020")); ("Base__Import", ("\014\187\247\141\187\181\142g\176:s_,\181\219\209")); ("Base__Hash_intf", ("h\004P\218\1531G\127\212\208A\024\140\164iq")); ("Base__Hash", ("\206Rc\194\234{s3\248\165\024\162\203{\206\206")); ("Base__Globalize", ("<\243w~.\180\196t\159\193\174[\227\139\215G")); ("Base__Bool0", ("\177f\254p\023\143&\239\020\136\206\242~\018F\251")); ("Base__", ("p\252\007\139\128\163W\025+\0225\001\246|P\158"))], [(0)])

val of_int : int -> t

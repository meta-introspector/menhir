type (!'key, +!'value, !'cmp) t
module Or_duplicate = Base__Map_intf.Or_duplicate
module Continue_or_stop = Base__Map_intf.Continue_or_stop
module Finished_or_unfinished :
  sig
    type t = Base__Map_intf.Finished_or_unfinished.t = Finished | Unfinished
    val compare : t Base__Ppx_compare_lib.compare
    val all : t list
    val equal : t Base__Ppx_compare_lib.equal
    val sexp_of_t : t -> Sexplib0.Sexp.t
    val of_continue_or_stop : Continue_or_stop.t -> t
    val to_continue_or_stop : t -> Continue_or_stop.t
  end
module Merge_element :
  sig
    type ('left, 'right) t =
        [ `Both of 'left * 'right | `Left of 'left | `Right of 'right ]
    val compare :
      ('left -> 'left -> int) ->
      ('right -> 'right -> int) ->
      ('left, 'right) t -> ('left, 'right) t -> int
    val equal :
      ('left -> 'left -> bool) ->
      ('right -> 'right -> bool) ->
      ('left, 'right) t -> ('left, 'right) t -> bool
    val sexp_of_t :
      ('left -> Sexplib0.Sexp.t) ->
      ('right -> Sexplib0.Sexp.t) -> ('left, 'right) t -> Sexplib0.Sexp.t
    val left : ('left, 'a) t -> 'left option
    val right : ('a, 'right) t -> 'right option
    val left_value : ('left, 'a) t -> default:'left -> 'left
    val right_value : ('a, 'right) t -> default:'right -> 'right
    val values :
      ('left, 'right) t ->
      left_default:'left -> right_default:'right -> 'left * 'right
  end
type ('k, 'cmp) comparator = ('k, 'cmp) Base__.Comparator.Module.t
val invariants : ('a, 'b, 'c) t -> bool
val comparator_s : ('a, 'b, 'cmp) t -> ('a, 'cmp) Base__.Comparator.Module.t
val comparator : ('a, 'b, 'cmp) t -> ('a, 'cmp) Base__.Comparator.t
val empty : ('a, 'cmp) Base__.Comparator.Module.t -> ('a, 'b, 'cmp) t
val singleton :
  ('a, 'cmp) Base__.Comparator.Module.t -> 'a -> 'b -> ('a, 'b, 'cmp) t
val of_alist :
  ('a, 'cmp) Base__.Comparator.Module.t ->
  ('a * 'b) list -> [ `Duplicate_key of 'a | `Ok of ('a, 'b, 'cmp) t ]
val of_alist_or_error :
  ('a, 'cmp) Base__.Comparator.Module.t ->
  ('a * 'b) list -> ('a, 'b, 'cmp) t Base__.Or_error.t
val of_alist_exn :
  ('a, 'cmp) Base__.Comparator.Module.t -> ('a * 'b) list -> ('a, 'b, 'cmp) t
val of_alist_multi :
  ('a, 'cmp) Base__.Comparator.Module.t ->
  ('a * 'b) list -> ('a, 'b list, 'cmp) t
val of_alist_fold :
  ('a, 'cmp) Base__.Comparator.Module.t ->
  ('a * 'b) list -> init:'c -> f:('c -> 'b -> 'c) -> ('a, 'c, 'cmp) t
val of_alist_reduce :
  ('a, 'cmp) Base__.Comparator.Module.t ->
  ('a * 'b) list -> f:('b -> 'b -> 'b) -> ('a, 'b, 'cmp) t
val of_iteri :
  ('a, 'cmp) Base__.Comparator.Module.t ->
  iteri:(f:(key:'a -> data:'b -> unit) -> unit) ->
  [ `Duplicate_key of 'a | `Ok of ('a, 'b, 'cmp) t ]
val of_iteri_exn :
  ('a, 'cmp) Base__.Comparator.Module.t ->
  iteri:(f:(key:'a -> data:'b -> unit) -> unit) -> ('a, 'b, 'cmp) t
val of_sorted_array :
  ('a, 'cmp) Base__.Comparator.Module.t ->
  ('a * 'b) array -> ('a, 'b, 'cmp) t Base__.Or_error.t
val of_sorted_array_unchecked :
  ('a, 'cmp) Base__.Comparator.Module.t ->
  ('a * 'b) array -> ('a, 'b, 'cmp) t
val of_increasing_iterator_unchecked :
  ('a, 'cmp) Base__.Comparator.Module.t ->
  len:int -> f:(int -> 'a * 'b) -> ('a, 'b, 'cmp) t
val of_increasing_sequence :
  ('k, 'cmp) Base__.Comparator.Module.t ->
  ('k * 'v) Base__.Sequence.t -> ('k, 'v, 'cmp) t Base__.Or_error.t
val of_sequence :
  ('k, 'cmp) Base__.Comparator.Module.t ->
  ('k * 'v) Base__.Sequence.t ->
  [ `Duplicate_key of 'k | `Ok of ('k, 'v, 'cmp) t ]
val of_sequence_or_error :
  ('a, 'cmp) Base__.Comparator.Module.t ->
  ('a * 'b) Base__.Sequence.t -> ('a, 'b, 'cmp) t Base__.Or_error.t
val of_sequence_exn :
  ('a, 'cmp) Base__.Comparator.Module.t ->
  ('a * 'b) Base__.Sequence.t -> ('a, 'b, 'cmp) t
val of_sequence_multi :
  ('a, 'cmp) Base__.Comparator.Module.t ->
  ('a * 'b) Base__.Sequence.t -> ('a, 'b list, 'cmp) t
val of_sequence_fold :
  ('a, 'cmp) Base__.Comparator.Module.t ->
  ('a * 'b) Base__.Sequence.t ->
  init:'c -> f:('c -> 'b -> 'c) -> ('a, 'c, 'cmp) t
val of_sequence_reduce :
  ('a, 'cmp) Base__.Comparator.Module.t ->
  ('a * 'b) Base__.Sequence.t -> f:('b -> 'b -> 'b) -> ('a, 'b, 'cmp) t
val of_list_with_key :
  ('k, 'cmp) Base__.Comparator.Module.t ->
  'v list ->
  get_key:('v -> 'k) -> [ `Duplicate_key of 'k | `Ok of ('k, 'v, 'cmp) t ]
val of_list_with_key_or_error :
  ('k, 'cmp) Base__.Comparator.Module.t ->
  'v list -> get_key:('v -> 'k) -> ('k, 'v, 'cmp) t Base__.Or_error.t
val of_list_with_key_exn :
  ('k, 'cmp) Base__.Comparator.Module.t ->
  'v list -> get_key:('v -> 'k) -> ('k, 'v, 'cmp) t
val of_list_with_key_multi :
  ('k, 'cmp) Base__.Comparator.Module.t ->
  'v list -> get_key:('v -> 'k) -> ('k, 'v list, 'cmp) t
val is_empty : ('a, 'b, 'c) t -> bool
val length : ('a, 'b, 'c) t -> int
val set : ('k, 'v, 'cmp) t -> key:'k -> data:'v -> ('k, 'v, 'cmp) t
val add :
  ('k, 'v, 'cmp) t -> key:'k -> data:'v -> ('k, 'v, 'cmp) t Or_duplicate.t
val add_exn : ('k, 'v, 'cmp) t -> key:'k -> data:'v -> ('k, 'v, 'cmp) t
val add_multi :
  ('k, 'v list, 'cmp) t -> key:'k -> data:'v -> ('k, 'v list, 'cmp) t
val remove_multi : ('k, 'v list, 'cmp) t -> 'k -> ('k, 'v list, 'cmp) t
val find_multi : ('k, 'v list, 'cmp) t -> 'k -> 'v list
val change :
  ('k, 'v, 'cmp) t -> 'k -> f:('v option -> 'v option) -> ('k, 'v, 'cmp) t
val update :
  ('k, 'v, 'cmp) t -> 'k -> f:('v option -> 'v) -> ('k, 'v, 'cmp) t
val find : ('k, 'v, 'cmp) t -> 'k -> 'v option
val find_exn : ('k, 'v, 'cmp) t -> 'k -> 'v
val remove : ('k, 'v, 'cmp) t -> 'k -> ('k, 'v, 'cmp) t
val mem : ('k, 'a, 'cmp) t -> 'k -> bool
val iter_keys : ('k, 'a, 'b) t -> f:('k -> unit) -> unit
val iter : ('a, 'v, 'b) t -> f:('v -> unit) -> unit
val iteri : ('k, 'v, 'a) t -> f:(key:'k -> data:'v -> unit) -> unit
val iteri_until :
  ('k, 'v, 'a) t ->
  f:(key:'k -> data:'v -> Continue_or_stop.t) -> Finished_or_unfinished.t
val iter2 :
  ('k, 'v1, 'cmp) t ->
  ('k, 'v2, 'cmp) t ->
  f:(key:'k -> data:('v1, 'v2) Merge_element.t -> unit) -> unit
val map : ('k, 'v1, 'cmp) t -> f:('v1 -> 'v2) -> ('k, 'v2, 'cmp) t
val mapi :
  ('k, 'v1, 'cmp) t -> f:(key:'k -> data:'v1 -> 'v2) -> ('k, 'v2, 'cmp) t
val map_keys :
  ('k2, 'cmp2) Base__.Comparator.Module.t ->
  ('k1, 'v, 'cmp1) t ->
  f:('k1 -> 'k2) -> [ `Duplicate_key of 'k2 | `Ok of ('k2, 'v, 'cmp2) t ]
val map_keys_exn :
  ('k2, 'cmp2) Base__.Comparator.Module.t ->
  ('k1, 'v, 'cmp1) t -> f:('k1 -> 'k2) -> ('k2, 'v, 'cmp2) t
val fold :
  ('k, 'v, 'a) t ->
  init:'acc -> f:(key:'k -> data:'v -> 'acc -> 'acc) -> 'acc
val fold_until :
  ('k, 'v, 'a) t ->
  init:'acc ->
  f:(key:'k ->
     data:'v -> 'acc -> ('acc, 'final) Base__.Container.Continue_or_stop.t) ->
  finish:('acc -> 'final) -> 'final
val fold_right :
  ('k, 'v, 'a) t ->
  init:'acc -> f:(key:'k -> data:'v -> 'acc -> 'acc) -> 'acc
val fold2 :
  ('k, 'v1, 'cmp) t ->
  ('k, 'v2, 'cmp) t ->
  init:'acc ->
  f:(key:'k -> data:('v1, 'v2) Merge_element.t -> 'acc -> 'acc) -> 'acc
val filter_keys : ('k, 'v, 'cmp) t -> f:('k -> bool) -> ('k, 'v, 'cmp) t
val filter : ('k, 'v, 'cmp) t -> f:('v -> bool) -> ('k, 'v, 'cmp) t
val filteri :
  ('k, 'v, 'cmp) t -> f:(key:'k -> data:'v -> bool) -> ('k, 'v, 'cmp) t
val filter_map :
  ('k, 'v1, 'cmp) t -> f:('v1 -> 'v2 option) -> ('k, 'v2, 'cmp) t
val filter_mapi :
  ('k, 'v1, 'cmp) t ->
  f:(key:'k -> data:'v1 -> 'v2 option) -> ('k, 'v2, 'cmp) t
val partition_mapi :
  ('k, 'v1, 'cmp) t ->
  f:(key:'k -> data:'v1 -> ('v2, 'v3) Base__.Either.t) ->
  ('k, 'v2, 'cmp) t * ('k, 'v3, 'cmp) t
val partition_map :
  ('k, 'v1, 'cmp) t ->
  f:('v1 -> ('v2, 'v3) Base__.Either.t) ->
  ('k, 'v2, 'cmp) t * ('k, 'v3, 'cmp) t
val partitioni_tf :
  ('k, 'v, 'cmp) t ->
  f:(key:'k -> data:'v -> bool) -> ('k, 'v, 'cmp) t * ('k, 'v, 'cmp) t
val partition_tf :
  ('k, 'v, 'cmp) t -> f:('v -> bool) -> ('k, 'v, 'cmp) t * ('k, 'v, 'cmp) t
val combine_errors :
  ('k, 'v Base__.Or_error.t, 'cmp) t -> ('k, 'v, 'cmp) t Base__.Or_error.t
val compare_direct :
  ('v -> 'v -> int) -> ('k, 'v, 'cmp) t -> ('k, 'v, 'cmp) t -> int
val hash_fold_direct :
  'k Base__.Hash.folder ->
  'v Base__.Hash.folder -> ('k, 'v, 'cmp) t Base__.Hash.folder
val equal :
  ('v -> 'v -> bool) -> ('k, 'v, 'cmp) t -> ('k, 'v, 'cmp) t -> bool
val keys : ('k, 'a, 'b) t -> 'k list
val data : ('a, 'v, 'b) t -> 'v list
val to_alist :
  ?key_order:[ `Decreasing | `Increasing ] ->
  ('k, 'v, 'a) t -> ('k * 'v) list
val merge :
  ('k, 'v1, 'cmp) t ->
  ('k, 'v2, 'cmp) t ->
  f:(key:'k -> ('v1, 'v2) Merge_element.t -> 'v3 option) -> ('k, 'v3, 'cmp) t
val merge_skewed :
  ('k, 'v, 'cmp) t ->
  ('k, 'v, 'cmp) t -> combine:(key:'k -> 'v -> 'v -> 'v) -> ('k, 'v, 'cmp) t
module Symmetric_diff_element :
  sig
    type ('k, 'v) t =
        'k * [ `Left of 'v | `Right of 'v | `Unequal of 'v * 'v ]
    val compare :
      'a Base__Ppx_compare_lib.compare ->
      'b Base__Ppx_compare_lib.compare ->
      ('a, 'b) t Base__Ppx_compare_lib.compare
    val equal :
      'a Base__Ppx_compare_lib.equal ->
      'b Base__Ppx_compare_lib.equal ->
      ('a, 'b) t Base__Ppx_compare_lib.equal
    val t_of_sexp :
      (Sexplib0__.Sexp.t -> 'a) ->
      (Sexplib0__.Sexp.t -> 'b) -> Sexplib0__.Sexp.t -> ('a, 'b) t
    val sexp_of_t :
      ('a -> Sexplib0__.Sexp.t) ->
      ('b -> Sexplib0__.Sexp.t) -> ('a, 'b) t -> Sexplib0__.Sexp.t
    val t_sexp_grammar :
      'k Sexplib0.Sexp_grammar.t ->
      'v Sexplib0.Sexp_grammar.t -> ('k, 'v) t Sexplib0.Sexp_grammar.t
  end
val symmetric_diff :
  ('k, 'v, 'cmp) t ->
  ('k, 'v, 'cmp) t ->
  data_equal:('v -> 'v -> bool) ->
  ('k, 'v) Symmetric_diff_element.t Base__.Sequence.t
val fold_symmetric_diff :
  ('k, 'v, 'cmp) t ->
  ('k, 'v, 'cmp) t ->
  data_equal:('v -> 'v -> bool) ->
  init:'acc -> f:('acc -> ('k, 'v) Symmetric_diff_element.t -> 'acc) -> 'acc
val min_elt : ('k, 'v, 'a) t -> ('k * 'v) option
val min_elt_exn : ('k, 'v, 'a) t -> 'k * 'v
val max_elt : ('k, 'v, 'a) t -> ('k * 'v) option
val max_elt_exn : ('k, 'v, 'a) t -> 'k * 'v
val transpose_keys :
  ('k2, 'cmp2) Base__.Comparator.Module.t ->
  ('k1, ('k2, 'v, 'cmp2) t, 'cmp1) t -> ('k2, ('k1, 'v, 'cmp1) t, 'cmp2) t
val for_all : ('k, 'v, 'a) t -> f:('v -> bool) -> bool
val for_alli : ('k, 'v, 'a) t -> f:(key:'k -> data:'v -> bool) -> bool
val exists : ('k, 'v, 'a) t -> f:('v -> bool) -> bool
val existsi : ('k, 'v, 'a) t -> f:(key:'k -> data:'v -> bool) -> bool
val count : ('k, 'v, 'a) t -> f:('v -> bool) -> int
val counti : ('k, 'v, 'a) t -> f:(key:'k -> data:'v -> bool) -> int
val split :
  ('k, 'v, 'cmp) t ->
  'k -> ('k, 'v, 'cmp) t * ('k * 'v) option * ('k, 'v, 'cmp) t
val split_le_gt :
  ('k, 'v, 'cmp) t -> 'k -> ('k, 'v, 'cmp) t * ('k, 'v, 'cmp) t
val split_lt_ge :
  ('k, 'v, 'cmp) t -> 'k -> ('k, 'v, 'cmp) t * ('k, 'v, 'cmp) t
val append :
  lower_part:('k, 'v, 'cmp) t ->
  upper_part:('k, 'v, 'cmp) t ->
  [ `Ok of ('k, 'v, 'cmp) t | `Overlapping_key_ranges ]
val subrange :
  ('k, 'v, 'cmp) t ->
  lower_bound:'k Base__.Maybe_bound.t ->
  upper_bound:'k Base__.Maybe_bound.t -> ('k, 'v, 'cmp) t
val fold_range_inclusive :
  ('k, 'v, 'cmp) t ->
  min:'k ->
  max:'k -> init:'acc -> f:(key:'k -> data:'v -> 'acc -> 'acc) -> 'acc
val range_to_alist : ('k, 'v, 'cmp) t -> min:'k -> max:'k -> ('k * 'v) list
val closest_key :
  ('k, 'v, 'cmp) t ->
  [ `Greater_or_equal_to | `Greater_than | `Less_or_equal_to | `Less_than ] ->
  'k -> ('k * 'v) option
val nth : ('k, 'v, 'a) t -> int -> ('k * 'v) option
val nth_exn : ('k, 'v, 'a) t -> int -> 'k * 'v
val rank : ('k, 'v, 'cmp) t -> 'k -> int option
val to_sequence :
  ?order:[ `Decreasing_key | `Increasing_key ] ->
  ?keys_greater_or_equal_to:'k ->
  ?keys_less_or_equal_to:'k ->
  ('k, 'v, 'cmp) t -> ('k * 'v) Base__.Sequence.t
val binary_search :
  ('k, 'v, 'cmp) t ->
  compare:(key:'k -> data:'v -> 'key -> int) ->
  [ `First_equal_to
  | `First_greater_than_or_equal_to
  | `First_strictly_greater_than
  | `Last_equal_to
  | `Last_less_than_or_equal_to
  | `Last_strictly_less_than ] -> 'key -> ('k * 'v) option
val binary_search_segmented :
  ('k, 'v, 'cmp) t ->
  segment_of:(key:'k -> data:'v -> [ `Left | `Right ]) ->
  [ `First_on_right | `Last_on_left ] -> ('k * 'v) option
val binary_search_subrange :
  ('k, 'v, 'cmp) t ->
  compare:(key:'k -> data:'v -> 'bound -> int) ->
  lower_bound:'bound Base__.Maybe_bound.t ->
  upper_bound:'bound Base__.Maybe_bound.t -> ('k, 'v, 'cmp) t
module Make_applicative_traversals :
  functor (A : Base__.Applicative.Lazy_applicative) ->
    sig
      val mapi :
        ('k, 'v1, 'cmp) t ->
        f:(key:'k -> data:'v1 -> 'v2 A.t) -> ('k, 'v2, 'cmp) t A.t
      val filter_mapi :
        ('k, 'v1, 'cmp) t ->
        f:(key:'k -> data:'v1 -> 'v2 option A.t) -> ('k, 'v2, 'cmp) t A.t
    end
module M :
  functor (K : sig type t type comparator_witness end) ->
    sig type nonrec 'v t = (K.t, 'v, K.comparator_witness) t end
module type Sexp_of_m = sig type t val sexp_of_t : t -> Sexplib0.Sexp.t end
module type M_of_sexp =
  sig
    type t
    val t_of_sexp : Sexplib0.Sexp.t -> t
    type comparator_witness
    val comparator : (t, comparator_witness) Base__Comparator.comparator
  end
module type M_sexp_grammar =
  sig type t val t_sexp_grammar : t Sexplib0.Sexp_grammar.t end
module type Compare_m = sig end
module type Equal_m = sig end
module type Hash_fold_m = Base__.Hasher.S
val sexp_of_m__t :
  (module Sexp_of_m with type t = 'k) ->
  ('v -> Base__.Sexp.t) -> ('k, 'v, 'cmp) t -> Base__.Sexp.t
val m__t_of_sexp :
  (module M_of_sexp with type comparator_witness = 'cmp and type t = 'k) ->
  (Base__.Sexp.t -> 'v) -> Base__.Sexp.t -> ('k, 'v, 'cmp) t
val m__t_sexp_grammar :
  (module M_sexp_grammar with type t = 'k) ->
  'v Sexplib0.Sexp_grammar.t -> ('k, 'v, 'cmp) t Sexplib0.Sexp_grammar.t
val compare_m__t :
  (module Compare_m) ->
  ('v -> 'v -> int) -> ('k, 'v, 'cmp) t -> ('k, 'v, 'cmp) t -> int
val equal_m__t :
  (module Equal_m) ->
  ('v -> 'v -> bool) -> ('k, 'v, 'cmp) t -> ('k, 'v, 'cmp) t -> bool
val hash_fold_m__t :
  (module Hash_fold_m with type t = 'k) ->
  (Base__.Hash.state -> 'v -> Base__.Hash.state) ->
  Base__.Hash.state -> ('k, 'v, 'a) t -> Base__.Hash.state
module Using_comparator :
  sig
    type nonrec ('k, 'v, 'cmp) t = ('k, 'v, 'cmp) t
    val sexp_of_t :
      ('k -> Sexplib0.Sexp.t) ->
      ('v -> Sexplib0.Sexp.t) ->
      ('cmp -> Sexplib0.Sexp.t) -> ('k, 'v, 'cmp) t -> Sexplib0.Sexp.t
    val t_of_sexp_direct :
      comparator:('k, 'cmp) Base__.Comparator.t ->
      (Base__.Sexp.t -> 'k) ->
      (Base__.Sexp.t -> 'v) -> Base__.Sexp.t -> ('k, 'v, 'cmp) t
    module Tree :
      sig
        type (+'k, +'v, 'cmp) t
        val sexp_of_t :
          ('k -> Sexplib0.Sexp.t) ->
          ('v -> Sexplib0.Sexp.t) ->
          ('cmp -> Sexplib0.Sexp.t) -> ('k, 'v, 'cmp) t -> Sexplib0.Sexp.t
        val t_of_sexp_direct :
          comparator:('k, 'cmp) Base__.Comparator.t ->
          (Base__.Sexp.t -> 'k) ->
          (Base__.Sexp.t -> 'v) -> Base__.Sexp.t -> ('k, 'v, 'cmp) t
        val empty :
          ('k, 'cmp, ('k, 'a, 'cmp) t) Base__Map_intf.With_comparator.t
        val singleton :
          ('k, 'cmp, 'k -> 'v -> ('k, 'v, 'cmp) t)
          Base__Map_intf.With_comparator.t
        val map_keys :
          ('k2, 'cmp2,
           ('k1, 'v, 'cmp1) t ->
           f:('k1 -> 'k2) ->
           [ `Duplicate_key of 'k2 | `Ok of ('k2, 'v, 'cmp2) t ])
          Base__Map_intf.With_comparator.t
        val map_keys_exn :
          ('k2, 'cmp2,
           ('k1, 'v, 'cmp1) t -> f:('k1 -> 'k2) -> ('k2, 'v, 'cmp2) t)
          Base__Map_intf.With_comparator.t
        val transpose_keys :
          ('k1, 'cmp1,
           ('k2, 'cmp2,
            ('k1, ('k2, 'a, 'cmp2) t, 'cmp1) t ->
            ('k2, ('k1, 'a, 'cmp1) t, 'cmp2) t)
           Base__Map_intf.With_comparator.t)
          Base__Map_intf.With_comparator.t
        val of_sorted_array :
          ('k, 'cmp, ('k * 'v) array -> ('k, 'v, 'cmp) t Base__.Or_error.t)
          Base__Map_intf.With_comparator.t
        val of_sorted_array_unchecked :
          ('k, 'cmp, ('k * 'v) array -> ('k, 'v, 'cmp) t)
          Base__Map_intf.With_comparator.t
        val of_increasing_iterator_unchecked :
          ('k, 'cmp, len:int -> f:(int -> 'k * 'v) -> ('k, 'v, 'cmp) t)
          Base__Map_intf.With_comparator.t
        val of_alist :
          ('k, 'cmp,
           ('k * 'v) list ->
           [ `Duplicate_key of 'k | `Ok of ('k, 'v, 'cmp) t ])
          Base__Map_intf.With_comparator.t
        val of_alist_or_error :
          ('k, 'cmp, ('k * 'v) list -> ('k, 'v, 'cmp) t Base__.Or_error.t)
          Base__Map_intf.With_comparator.t
        val of_alist_exn :
          ('k, 'cmp, ('k * 'v) list -> ('k, 'v, 'cmp) t)
          Base__Map_intf.With_comparator.t
        val of_alist_multi :
          ('k, 'cmp, ('k * 'v) list -> ('k, 'v list, 'cmp) t)
          Base__Map_intf.With_comparator.t
        val of_alist_fold :
          ('k, 'cmp,
           ('k * 'v1) list ->
           init:'v2 -> f:('v2 -> 'v1 -> 'v2) -> ('k, 'v2, 'cmp) t)
          Base__Map_intf.With_comparator.t
        val of_alist_reduce :
          ('k, 'cmp,
           ('k * 'v) list -> f:('v -> 'v -> 'v) -> ('k, 'v, 'cmp) t)
          Base__Map_intf.With_comparator.t
        val of_increasing_sequence :
          ('k, 'cmp,
           ('k * 'v) Base__.Sequence.t -> ('k, 'v, 'cmp) t Base__.Or_error.t)
          Base__Map_intf.With_comparator.t
        val of_sequence :
          ('k, 'cmp,
           ('k * 'v) Base__.Sequence.t ->
           [ `Duplicate_key of 'k | `Ok of ('k, 'v, 'cmp) t ])
          Base__Map_intf.With_comparator.t
        val of_sequence_or_error :
          ('k, 'cmp,
           ('k * 'v) Base__.Sequence.t -> ('k, 'v, 'cmp) t Base__.Or_error.t)
          Base__Map_intf.With_comparator.t
        val of_sequence_exn :
          ('k, 'cmp, ('k * 'v) Base__.Sequence.t -> ('k, 'v, 'cmp) t)
          Base__Map_intf.With_comparator.t
        val of_sequence_multi :
          ('k, 'cmp, ('k * 'v) Base__.Sequence.t -> ('k, 'v list, 'cmp) t)
          Base__Map_intf.With_comparator.t
        val of_sequence_fold :
          ('k, 'cmp,
           ('k * 'v1) Base__.Sequence.t ->
           init:'v2 -> f:('v2 -> 'v1 -> 'v2) -> ('k, 'v2, 'cmp) t)
          Base__Map_intf.With_comparator.t
        val of_sequence_reduce :
          ('k, 'cmp,
           ('k * 'v) Base__.Sequence.t ->
           f:('v -> 'v -> 'v) -> ('k, 'v, 'cmp) t)
          Base__Map_intf.With_comparator.t
        val of_list_with_key :
          ('k, 'cmp,
           'v list ->
           get_key:('v -> 'k) ->
           [ `Duplicate_key of 'k | `Ok of ('k, 'v, 'cmp) t ])
          Base__Map_intf.With_comparator.t
        val of_list_with_key_or_error :
          ('k, 'cmp,
           'v list ->
           get_key:('v -> 'k) -> ('k, 'v, 'cmp) t Base__.Or_error.t)
          Base__Map_intf.With_comparator.t
        val of_list_with_key_exn :
          ('k, 'cmp, 'v list -> get_key:('v -> 'k) -> ('k, 'v, 'cmp) t)
          Base__Map_intf.With_comparator.t
        val of_list_with_key_multi :
          ('k, 'cmp, 'v list -> get_key:('v -> 'k) -> ('k, 'v list, 'cmp) t)
          Base__Map_intf.With_comparator.t
        val of_iteri :
          ('k, 'cmp,
           iteri:(f:(key:'k -> data:'v -> unit) -> unit) ->
           [ `Duplicate_key of 'k | `Ok of ('k, 'v, 'cmp) t ])
          Base__Map_intf.With_comparator.t
        val of_iteri_exn :
          ('k, 'cmp,
           iteri:(f:(key:'k -> data:'v -> unit) -> unit) -> ('k, 'v, 'cmp) t)
          Base__Map_intf.With_comparator.t
        val of_tree :
          ('k, 'cmp, ('k, 'v, 'cmp) t -> ('k, 'v, 'cmp) t)
          Base__Map_intf.With_comparator.t
        val invariants :
          ('k, 'cmp, ('k, 'v, 'cmp) t -> bool)
          Base__Map_intf.With_comparator.t
        val is_empty : ('a, 'b, 'c) t -> bool
        val length : ('a, 'b, 'c) t -> int
        val add :
          ('k, 'cmp,
           ('k, 'v, 'cmp) t ->
           key:'k ->
           data:'v -> ('k, 'v, 'cmp) t Base__Map_intf.Or_duplicate.t)
          Base__Map_intf.With_comparator.t
        val add_exn :
          ('k, 'cmp,
           ('k, 'v, 'cmp) t -> key:'k -> data:'v -> ('k, 'v, 'cmp) t)
          Base__Map_intf.With_comparator.t
        val set :
          ('k, 'cmp,
           ('k, 'v, 'cmp) t -> key:'k -> data:'v -> ('k, 'v, 'cmp) t)
          Base__Map_intf.With_comparator.t
        val add_multi :
          ('k, 'cmp,
           ('k, 'v list, 'cmp) t ->
           key:'k -> data:'v -> ('k, 'v list, 'cmp) t)
          Base__Map_intf.With_comparator.t
        val remove_multi :
          ('k, 'cmp, ('k, 'v list, 'cmp) t -> 'k -> ('k, 'v list, 'cmp) t)
          Base__Map_intf.With_comparator.t
        val find_multi :
          ('k, 'cmp, ('k, 'v list, 'cmp) t -> 'k -> 'v list)
          Base__Map_intf.With_comparator.t
        val change :
          ('k, 'cmp,
           ('k, 'v, 'cmp) t ->
           'k -> f:('v option -> 'v option) -> ('k, 'v, 'cmp) t)
          Base__Map_intf.With_comparator.t
        val update :
          ('k, 'cmp,
           ('k, 'v, 'cmp) t -> 'k -> f:('v option -> 'v) -> ('k, 'v, 'cmp) t)
          Base__Map_intf.With_comparator.t
        val find :
          ('k, 'cmp, ('k, 'v, 'cmp) t -> 'k -> 'v option)
          Base__Map_intf.With_comparator.t
        val find_exn :
          ('k, 'cmp, ('k, 'v, 'cmp) t -> 'k -> 'v)
          Base__Map_intf.With_comparator.t
        val remove :
          ('k, 'cmp, ('k, 'v, 'cmp) t -> 'k -> ('k, 'v, 'cmp) t)
          Base__Map_intf.With_comparator.t
        val mem :
          ('k, 'cmp, ('k, 'a, 'cmp) t -> 'k -> bool)
          Base__Map_intf.With_comparator.t
        val iter_keys : ('k, 'a, 'b) t -> f:('k -> unit) -> unit
        val iter : ('a, 'v, 'b) t -> f:('v -> unit) -> unit
        val iteri : ('k, 'v, 'a) t -> f:(key:'k -> data:'v -> unit) -> unit
        val iteri_until :
          ('k, 'v, 'a) t ->
          f:(key:'k -> data:'v -> Base__Map_intf.Continue_or_stop.t) ->
          Base__Map_intf.Finished_or_unfinished.t
        val iter2 :
          ('k, 'cmp,
           ('k, 'v1, 'cmp) t ->
           ('k, 'v2, 'cmp) t ->
           f:(key:'k ->
              data:('v1, 'v2) Base__Map_intf.Merge_element.t -> unit) ->
           unit)
          Base__Map_intf.With_comparator.t
        val map : ('k, 'v1, 'cmp) t -> f:('v1 -> 'v2) -> ('k, 'v2, 'cmp) t
        val mapi :
          ('k, 'v1, 'cmp) t ->
          f:(key:'k -> data:'v1 -> 'v2) -> ('k, 'v2, 'cmp) t
        val fold :
          ('k, 'v, 'a) t ->
          init:'acc -> f:(key:'k -> data:'v -> 'acc -> 'acc) -> 'acc
        val fold_until :
          ('k, 'v, 'a) t ->
          init:'acc ->
          f:(key:'k ->
             data:'v ->
             'acc -> ('acc, 'final) Base__.Container.Continue_or_stop.t) ->
          finish:('acc -> 'final) -> 'final
        val fold_right :
          ('k, 'v, 'a) t ->
          init:'acc -> f:(key:'k -> data:'v -> 'acc -> 'acc) -> 'acc
        val fold2 :
          ('k, 'cmp,
           ('k, 'v1, 'cmp) t ->
           ('k, 'v2, 'cmp) t ->
           init:'acc ->
           f:(key:'k ->
              data:('v1, 'v2) Base__Map_intf.Merge_element.t -> 'acc -> 'acc) ->
           'acc)
          Base__Map_intf.With_comparator.t
        val filter_keys :
          ('k, 'v, 'cmp) t -> f:('k -> bool) -> ('k, 'v, 'cmp) t
        val filter : ('k, 'v, 'cmp) t -> f:('v -> bool) -> ('k, 'v, 'cmp) t
        val filteri :
          ('k, 'v, 'cmp) t ->
          f:(key:'k -> data:'v -> bool) -> ('k, 'v, 'cmp) t
        val filter_map :
          ('k, 'v1, 'cmp) t -> f:('v1 -> 'v2 option) -> ('k, 'v2, 'cmp) t
        val filter_mapi :
          ('k, 'v1, 'cmp) t ->
          f:(key:'k -> data:'v1 -> 'v2 option) -> ('k, 'v2, 'cmp) t
        val partition_mapi :
          ('k, 'v1, 'cmp) t ->
          f:(key:'k -> data:'v1 -> ('v2, 'v3) Base__.Either.t) ->
          ('k, 'v2, 'cmp) t * ('k, 'v3, 'cmp) t
        val partition_map :
          ('k, 'v1, 'cmp) t ->
          f:('v1 -> ('v2, 'v3) Base__.Either.t) ->
          ('k, 'v2, 'cmp) t * ('k, 'v3, 'cmp) t
        val partitioni_tf :
          ('k, 'v, 'cmp) t ->
          f:(key:'k -> data:'v -> bool) ->
          ('k, 'v, 'cmp) t * ('k, 'v, 'cmp) t
        val partition_tf :
          ('k, 'v, 'cmp) t ->
          f:('v -> bool) -> ('k, 'v, 'cmp) t * ('k, 'v, 'cmp) t
        val combine_errors :
          ('k, 'cmp,
           ('k, 'v Base__.Or_error.t, 'cmp) t ->
           ('k, 'v, 'cmp) t Base__.Or_error.t)
          Base__Map_intf.With_comparator.t
        val compare_direct :
          ('k, 'cmp,
           ('v -> 'v -> int) -> ('k, 'v, 'cmp) t -> ('k, 'v, 'cmp) t -> int)
          Base__Map_intf.With_comparator.t
        val equal :
          ('k, 'cmp,
           ('v -> 'v -> bool) -> ('k, 'v, 'cmp) t -> ('k, 'v, 'cmp) t -> bool)
          Base__Map_intf.With_comparator.t
        val keys : ('k, 'a, 'b) t -> 'k list
        val data : ('a, 'v, 'b) t -> 'v list
        val to_alist :
          ?key_order:[ `Decreasing | `Increasing ] ->
          ('k, 'v, 'a) t -> ('k * 'v) list
        val merge :
          ('k, 'cmp,
           ('k, 'v1, 'cmp) t ->
           ('k, 'v2, 'cmp) t ->
           f:(key:'k ->
              ('v1, 'v2) Base__Map_intf.Merge_element.t -> 'v3 option) ->
           ('k, 'v3, 'cmp) t)
          Base__Map_intf.With_comparator.t
        val merge_skewed :
          ('k, 'cmp,
           ('k, 'v, 'cmp) t ->
           ('k, 'v, 'cmp) t ->
           combine:(key:'k -> 'v -> 'v -> 'v) -> ('k, 'v, 'cmp) t)
          Base__Map_intf.With_comparator.t
        val symmetric_diff :
          ('k, 'cmp,
           ('k, 'v, 'cmp) t ->
           ('k, 'v, 'cmp) t ->
           data_equal:('v -> 'v -> bool) ->
           ('k, 'v) Base__Map_intf.Symmetric_diff_element.t Base__.Sequence.t)
          Base__Map_intf.With_comparator.t
        val fold_symmetric_diff :
          ('k, 'cmp,
           ('k, 'v, 'cmp) t ->
           ('k, 'v, 'cmp) t ->
           data_equal:('v -> 'v -> bool) ->
           init:'acc ->
           f:('acc ->
              ('k, 'v) Base__Map_intf.Symmetric_diff_element.t -> 'acc) ->
           'acc)
          Base__Map_intf.With_comparator.t
        val min_elt : ('k, 'v, 'a) t -> ('k * 'v) option
        val min_elt_exn : ('k, 'v, 'a) t -> 'k * 'v
        val max_elt : ('k, 'v, 'a) t -> ('k * 'v) option
        val max_elt_exn : ('k, 'v, 'a) t -> 'k * 'v
        val for_all : ('k, 'v, 'a) t -> f:('v -> bool) -> bool
        val for_alli :
          ('k, 'v, 'a) t -> f:(key:'k -> data:'v -> bool) -> bool
        val exists : ('k, 'v, 'a) t -> f:('v -> bool) -> bool
        val existsi : ('k, 'v, 'a) t -> f:(key:'k -> data:'v -> bool) -> bool
        val count : ('k, 'v, 'a) t -> f:('v -> bool) -> int
        val counti : ('k, 'v, 'a) t -> f:(key:'k -> data:'v -> bool) -> int
        val split :
          ('k, 'cmp,
           ('k, 'v, 'cmp) t ->
           'k -> ('k, 'v, 'cmp) t * ('k * 'v) option * ('k, 'v, 'cmp) t)
          Base__Map_intf.With_comparator.t
        val split_le_gt :
          ('k, 'cmp,
           ('k, 'v, 'cmp) t -> 'k -> ('k, 'v, 'cmp) t * ('k, 'v, 'cmp) t)
          Base__Map_intf.With_comparator.t
        val split_lt_ge :
          ('k, 'cmp,
           ('k, 'v, 'cmp) t -> 'k -> ('k, 'v, 'cmp) t * ('k, 'v, 'cmp) t)
          Base__Map_intf.With_comparator.t
        val append :
          ('k, 'cmp,
           lower_part:('k, 'v, 'cmp) t ->
           upper_part:('k, 'v, 'cmp) t ->
           [ `Ok of ('k, 'v, 'cmp) t | `Overlapping_key_ranges ])
          Base__Map_intf.With_comparator.t
        val subrange :
          ('k, 'cmp,
           ('k, 'v, 'cmp) t ->
           lower_bound:'k Base__.Maybe_bound.t ->
           upper_bound:'k Base__.Maybe_bound.t -> ('k, 'v, 'cmp) t)
          Base__Map_intf.With_comparator.t
        val fold_range_inclusive :
          ('k, 'cmp,
           ('k, 'v, 'cmp) t ->
           min:'k ->
           max:'k ->
           init:'acc -> f:(key:'k -> data:'v -> 'acc -> 'acc) -> 'acc)
          Base__Map_intf.With_comparator.t
        val range_to_alist :
          ('k, 'cmp, ('k, 'v, 'cmp) t -> min:'k -> max:'k -> ('k * 'v) list)
          Base__Map_intf.With_comparator.t
        val closest_key :
          ('k, 'cmp,
           ('k, 'v, 'cmp) t ->
           [ `Greater_or_equal_to
           | `Greater_than
           | `Less_or_equal_to
           | `Less_than ] -> 'k -> ('k * 'v) option)
          Base__Map_intf.With_comparator.t
        val nth : ('k, 'v, 'cmp) t -> int -> ('k * 'v) option
        val nth_exn : ('k, 'v, 'cmp) t -> int -> 'k * 'v
        val rank :
          ('k, 'cmp, ('k, 'a, 'cmp) t -> 'k -> int option)
          Base__Map_intf.With_comparator.t
        val to_tree : ('k, 'v, 'cmp) t -> ('k, 'v, 'cmp) t
        val to_sequence :
          ('k, 'cmp,
           ?order:[ `Decreasing_key | `Increasing_key ] ->
           ?keys_greater_or_equal_to:'k ->
           ?keys_less_or_equal_to:'k ->
           ('k, 'v, 'cmp) t -> ('k * 'v) Base__.Sequence.t)
          Base__Map_intf.With_comparator.t
        val binary_search :
          ('k, 'cmp,
           ('k, 'v, 'cmp) t ->
           compare:(key:'k -> data:'v -> 'key -> int) ->
           Base__.Binary_searchable.Which_target_by_key.t ->
           'key -> ('k * 'v) option)
          Base__Map_intf.With_comparator.t
        val binary_search_segmented :
          ('k, 'cmp,
           ('k, 'v, 'cmp) t ->
           segment_of:(key:'k -> data:'v -> [ `Left | `Right ]) ->
           Base__.Binary_searchable.Which_target_by_segment.t ->
           ('k * 'v) option)
          Base__Map_intf.With_comparator.t
        val binary_search_subrange :
          ('k, 'cmp,
           ('k, 'v, 'cmp) t ->
           compare:(key:'k -> data:'v -> 'bound -> int) ->
           lower_bound:'bound Base__.Maybe_bound.t ->
           upper_bound:'bound Base__.Maybe_bound.t -> ('k, 'v, 'cmp) t)
          Base__Map_intf.With_comparator.t
        module Make_applicative_traversals :
          functor (A : Base__.Applicative.Lazy_applicative) ->
            sig
              val mapi :
                ('k, 'v1, 'cmp) t ->
                f:(key:'k -> data:'v1 -> 'v2 A.t) -> ('k, 'v2, 'cmp) t A.t
              val filter_mapi :
                ('k, 'v1, 'cmp) t ->
                f:(key:'k -> data:'v1 -> 'v2 option A.t) ->
                ('k, 'v2, 'cmp) t A.t
            end
        val empty_without_value_restriction : ('a, 'b, 'c) t
        module Build_increasing :
          sig
            type ('k, 'v, 'w) t
            val empty : ('k, 'v, 'w) t
            val add_exn :
              ('k, 'v, 'w) t ->
              comparator:('k, 'w) Base__.Comparator.t ->
              key:'k -> data:'v -> ('k, 'v, 'w) t
            val to_tree : ('k, 'v, 'w) t -> ('k, 'v, 'w) t/2
          end
      end
    val empty : ('k, 'cmp, ('k, 'a, 'cmp) t) Base__Map_intf.With_comparator.t
    val singleton :
      ('k, 'cmp, 'k -> 'v -> ('k, 'v, 'cmp) t)
      Base__Map_intf.With_comparator.t
    val map_keys :
      ('k2, 'cmp2,
       ('k1, 'v, 'cmp1) t ->
       f:('k1 -> 'k2) ->
       [ `Duplicate_key of 'k2 | `Ok of ('k2, 'v, 'cmp2) t ])
      Base__Map_intf.With_comparator.t
    val map_keys_exn :
      ('k2, 'cmp2,
       ('k1, 'v, 'cmp1) t -> f:('k1 -> 'k2) -> ('k2, 'v, 'cmp2) t)
      Base__Map_intf.With_comparator.t
    val transpose_keys :
      ('k1, 'cmp1,
       ('k2, 'cmp2,
        ('k1, ('k2, 'a, 'cmp2) t, 'cmp1) t ->
        ('k2, ('k1, 'a, 'cmp1) t, 'cmp2) t)
       Base__Map_intf.With_comparator.t)
      Base__Map_intf.Without_comparator.t
    val of_sorted_array :
      ('k, 'cmp, ('k * 'v) array -> ('k, 'v, 'cmp) t Base__.Or_error.t)
      Base__Map_intf.With_comparator.t
    val of_sorted_array_unchecked :
      ('k, 'cmp, ('k * 'v) array -> ('k, 'v, 'cmp) t)
      Base__Map_intf.With_comparator.t
    val of_increasing_iterator_unchecked :
      ('k, 'cmp, len:int -> f:(int -> 'k * 'v) -> ('k, 'v, 'cmp) t)
      Base__Map_intf.With_comparator.t
    val of_alist :
      ('k, 'cmp,
       ('k * 'v) list -> [ `Duplicate_key of 'k | `Ok of ('k, 'v, 'cmp) t ])
      Base__Map_intf.With_comparator.t
    val of_alist_or_error :
      ('k, 'cmp, ('k * 'v) list -> ('k, 'v, 'cmp) t Base__.Or_error.t)
      Base__Map_intf.With_comparator.t
    val of_alist_exn :
      ('k, 'cmp, ('k * 'v) list -> ('k, 'v, 'cmp) t)
      Base__Map_intf.With_comparator.t
    val of_alist_multi :
      ('k, 'cmp, ('k * 'v) list -> ('k, 'v list, 'cmp) t)
      Base__Map_intf.With_comparator.t
    val of_alist_fold :
      ('k, 'cmp,
       ('k * 'v1) list ->
       init:'v2 -> f:('v2 -> 'v1 -> 'v2) -> ('k, 'v2, 'cmp) t)
      Base__Map_intf.With_comparator.t
    val of_alist_reduce :
      ('k, 'cmp, ('k * 'v) list -> f:('v -> 'v -> 'v) -> ('k, 'v, 'cmp) t)
      Base__Map_intf.With_comparator.t
    val of_increasing_sequence :
      ('k, 'cmp,
       ('k * 'v) Base__.Sequence.t -> ('k, 'v, 'cmp) t Base__.Or_error.t)
      Base__Map_intf.With_comparator.t
    val of_sequence :
      ('k, 'cmp,
       ('k * 'v) Base__.Sequence.t ->
       [ `Duplicate_key of 'k | `Ok of ('k, 'v, 'cmp) t ])
      Base__Map_intf.With_comparator.t
    val of_sequence_or_error :
      ('k, 'cmp,
       ('k * 'v) Base__.Sequence.t -> ('k, 'v, 'cmp) t Base__.Or_error.t)
      Base__Map_intf.With_comparator.t
    val of_sequence_exn :
      ('k, 'cmp, ('k * 'v) Base__.Sequence.t -> ('k, 'v, 'cmp) t)
      Base__Map_intf.With_comparator.t
    val of_sequence_multi :
      ('k, 'cmp, ('k * 'v) Base__.Sequence.t -> ('k, 'v list, 'cmp) t)
      Base__Map_intf.With_comparator.t
    val of_sequence_fold :
      ('k, 'cmp,
       ('k * 'v1) Base__.Sequence.t ->
       init:'v2 -> f:('v2 -> 'v1 -> 'v2) -> ('k, 'v2, 'cmp) t)
      Base__Map_intf.With_comparator.t
    val of_sequence_reduce :
      ('k, 'cmp,
       ('k * 'v) Base__.Sequence.t -> f:('v -> 'v -> 'v) -> ('k, 'v, 'cmp) t)
      Base__Map_intf.With_comparator.t
    val of_list_with_key :
      ('k, 'cmp,
       'v list ->
       get_key:('v -> 'k) ->
       [ `Duplicate_key of 'k | `Ok of ('k, 'v, 'cmp) t ])
      Base__Map_intf.With_comparator.t
    val of_list_with_key_or_error :
      ('k, 'cmp,
       'v list -> get_key:('v -> 'k) -> ('k, 'v, 'cmp) t Base__.Or_error.t)
      Base__Map_intf.With_comparator.t
    val of_list_with_key_exn :
      ('k, 'cmp, 'v list -> get_key:('v -> 'k) -> ('k, 'v, 'cmp) t)
      Base__Map_intf.With_comparator.t
    val of_list_with_key_multi :
      ('k, 'cmp, 'v list -> get_key:('v -> 'k) -> ('k, 'v list, 'cmp) t)
      Base__Map_intf.With_comparator.t
    val of_iteri :
      ('k, 'cmp,
       iteri:(f:(key:'k -> data:'v -> unit) -> unit) ->
       [ `Duplicate_key of 'k | `Ok of ('k, 'v, 'cmp) t ])
      Base__Map_intf.With_comparator.t
    val of_iteri_exn :
      ('k, 'cmp,
       iteri:(f:(key:'k -> data:'v -> unit) -> unit) -> ('k, 'v, 'cmp) t)
      Base__Map_intf.With_comparator.t
    val of_tree :
      ('k, 'cmp, ('k, 'v, 'cmp) Tree.t -> ('k, 'v, 'cmp) t)
      Base__Map_intf.With_comparator.t
    val invariants :
      ('k, 'cmp, ('k, 'v, 'cmp) t -> bool)
      Base__Map_intf.Without_comparator.t
    val is_empty : ('a, 'b, 'c) t -> bool
    val length : ('a, 'b, 'c) t -> int
    val add :
      ('k, 'cmp,
       ('k, 'v, 'cmp) t ->
       key:'k -> data:'v -> ('k, 'v, 'cmp) t Base__Map_intf.Or_duplicate.t)
      Base__Map_intf.Without_comparator.t
    val add_exn :
      ('k, 'cmp, ('k, 'v, 'cmp) t -> key:'k -> data:'v -> ('k, 'v, 'cmp) t)
      Base__Map_intf.Without_comparator.t
    val set :
      ('k, 'cmp, ('k, 'v, 'cmp) t -> key:'k -> data:'v -> ('k, 'v, 'cmp) t)
      Base__Map_intf.Without_comparator.t
    val add_multi :
      ('k, 'cmp,
       ('k, 'v list, 'cmp) t -> key:'k -> data:'v -> ('k, 'v list, 'cmp) t)
      Base__Map_intf.Without_comparator.t
    val remove_multi :
      ('k, 'cmp, ('k, 'v list, 'cmp) t -> 'k -> ('k, 'v list, 'cmp) t)
      Base__Map_intf.Without_comparator.t
    val find_multi :
      ('k, 'cmp, ('k, 'v list, 'cmp) t -> 'k -> 'v list)
      Base__Map_intf.Without_comparator.t
    val change :
      ('k, 'cmp,
       ('k, 'v, 'cmp) t ->
       'k -> f:('v option -> 'v option) -> ('k, 'v, 'cmp) t)
      Base__Map_intf.Without_comparator.t
    val update :
      ('k, 'cmp,
       ('k, 'v, 'cmp) t -> 'k -> f:('v option -> 'v) -> ('k, 'v, 'cmp) t)
      Base__Map_intf.Without_comparator.t
    val find :
      ('k, 'cmp, ('k, 'v, 'cmp) t -> 'k -> 'v option)
      Base__Map_intf.Without_comparator.t
    val find_exn :
      ('k, 'cmp, ('k, 'v, 'cmp) t -> 'k -> 'v)
      Base__Map_intf.Without_comparator.t
    val remove :
      ('k, 'cmp, ('k, 'v, 'cmp) t -> 'k -> ('k, 'v, 'cmp) t)
      Base__Map_intf.Without_comparator.t
    val mem :
      ('k, 'cmp, ('k, 'a, 'cmp) t -> 'k -> bool)
      Base__Map_intf.Without_comparator.t
    val iter_keys : ('k, 'a, 'b) t -> f:('k -> unit) -> unit
    val iter : ('a, 'v, 'b) t -> f:('v -> unit) -> unit
    val iteri : ('k, 'v, 'a) t -> f:(key:'k -> data:'v -> unit) -> unit
    val iteri_until :
      ('k, 'v, 'a) t ->
      f:(key:'k -> data:'v -> Base__Map_intf.Continue_or_stop.t) ->
      Base__Map_intf.Finished_or_unfinished.t
    val iter2 :
      ('k, 'cmp,
       ('k, 'v1, 'cmp) t ->
       ('k, 'v2, 'cmp) t ->
       f:(key:'k -> data:('v1, 'v2) Base__Map_intf.Merge_element.t -> unit) ->
       unit)
      Base__Map_intf.Without_comparator.t
    val map : ('k, 'v1, 'cmp) t -> f:('v1 -> 'v2) -> ('k, 'v2, 'cmp) t
    val mapi :
      ('k, 'v1, 'cmp) t -> f:(key:'k -> data:'v1 -> 'v2) -> ('k, 'v2, 'cmp) t
    val fold :
      ('k, 'v, 'a) t ->
      init:'acc -> f:(key:'k -> data:'v -> 'acc -> 'acc) -> 'acc
    val fold_until :
      ('k, 'v, 'a) t ->
      init:'acc ->
      f:(key:'k ->
         data:'v ->
         'acc -> ('acc, 'final) Base__.Container.Continue_or_stop.t) ->
      finish:('acc -> 'final) -> 'final
    val fold_right :
      ('k, 'v, 'a) t ->
      init:'acc -> f:(key:'k -> data:'v -> 'acc -> 'acc) -> 'acc
    val fold2 :
      ('k, 'cmp,
       ('k, 'v1, 'cmp) t ->
       ('k, 'v2, 'cmp) t ->
       init:'acc ->
       f:(key:'k ->
          data:('v1, 'v2) Base__Map_intf.Merge_element.t -> 'acc -> 'acc) ->
       'acc)
      Base__Map_intf.Without_comparator.t
    val filter_keys : ('k, 'v, 'cmp) t -> f:('k -> bool) -> ('k, 'v, 'cmp) t
    val filter : ('k, 'v, 'cmp) t -> f:('v -> bool) -> ('k, 'v, 'cmp) t
    val filteri :
      ('k, 'v, 'cmp) t -> f:(key:'k -> data:'v -> bool) -> ('k, 'v, 'cmp) t
    val filter_map :
      ('k, 'v1, 'cmp) t -> f:('v1 -> 'v2 option) -> ('k, 'v2, 'cmp) t
    val filter_mapi :
      ('k, 'v1, 'cmp) t ->
      f:(key:'k -> data:'v1 -> 'v2 option) -> ('k, 'v2, 'cmp) t
    val partition_mapi :
      ('k, 'v1, 'cmp) t ->
      f:(key:'k -> data:'v1 -> ('v2, 'v3) Base__.Either.t) ->
      ('k, 'v2, 'cmp) t * ('k, 'v3, 'cmp) t
    val partition_map :
      ('k, 'v1, 'cmp) t ->
      f:('v1 -> ('v2, 'v3) Base__.Either.t) ->
      ('k, 'v2, 'cmp) t * ('k, 'v3, 'cmp) t
    val partitioni_tf :
      ('k, 'v, 'cmp) t ->
      f:(key:'k -> data:'v -> bool) -> ('k, 'v, 'cmp) t * ('k, 'v, 'cmp) t
    val partition_tf :
      ('k, 'v, 'cmp) t ->
      f:('v -> bool) -> ('k, 'v, 'cmp) t * ('k, 'v, 'cmp) t
    val combine_errors :
      ('k, 'cmp,
       ('k, 'v Base__.Or_error.t, 'cmp) t ->
       ('k, 'v, 'cmp) t Base__.Or_error.t)
      Base__Map_intf.Without_comparator.t
    val compare_direct :
      ('k, 'cmp,
       ('v -> 'v -> int) -> ('k, 'v, 'cmp) t -> ('k, 'v, 'cmp) t -> int)
      Base__Map_intf.Without_comparator.t
    val equal :
      ('k, 'cmp,
       ('v -> 'v -> bool) -> ('k, 'v, 'cmp) t -> ('k, 'v, 'cmp) t -> bool)
      Base__Map_intf.Without_comparator.t
    val keys : ('k, 'a, 'b) t -> 'k list
    val data : ('a, 'v, 'b) t -> 'v list
    val to_alist :
      ?key_order:[ `Decreasing | `Increasing ] ->
      ('k, 'v, 'a) t -> ('k * 'v) list
    val merge :
      ('k, 'cmp,
       ('k, 'v1, 'cmp) t ->
       ('k, 'v2, 'cmp) t ->
       f:(key:'k -> ('v1, 'v2) Base__Map_intf.Merge_element.t -> 'v3 option) ->
       ('k, 'v3, 'cmp) t)
      Base__Map_intf.Without_comparator.t
    val merge_skewed :
      ('k, 'cmp,
       ('k, 'v, 'cmp) t ->
       ('k, 'v, 'cmp) t ->
       combine:(key:'k -> 'v -> 'v -> 'v) -> ('k, 'v, 'cmp) t)
      Base__Map_intf.Without_comparator.t
    val symmetric_diff :
      ('k, 'cmp,
       ('k, 'v, 'cmp) t ->
       ('k, 'v, 'cmp) t ->
       data_equal:('v -> 'v -> bool) ->
       ('k, 'v) Base__Map_intf.Symmetric_diff_element.t Base__.Sequence.t)
      Base__Map_intf.Without_comparator.t
    val fold_symmetric_diff :
      ('k, 'cmp,
       ('k, 'v, 'cmp) t ->
       ('k, 'v, 'cmp) t ->
       data_equal:('v -> 'v -> bool) ->
       init:'acc ->
       f:('acc -> ('k, 'v) Base__Map_intf.Symmetric_diff_element.t -> 'acc) ->
       'acc)
      Base__Map_intf.Without_comparator.t
    val min_elt : ('k, 'v, 'a) t -> ('k * 'v) option
    val min_elt_exn : ('k, 'v, 'a) t -> 'k * 'v
    val max_elt : ('k, 'v, 'a) t -> ('k * 'v) option
    val max_elt_exn : ('k, 'v, 'a) t -> 'k * 'v
    val for_all : ('k, 'v, 'a) t -> f:('v -> bool) -> bool
    val for_alli : ('k, 'v, 'a) t -> f:(key:'k -> data:'v -> bool) -> bool
    val exists : ('k, 'v, 'a) t -> f:('v -> bool) -> bool
    val existsi : ('k, 'v, 'a) t -> f:(key:'k -> data:'v -> bool) -> bool
    val count : ('k, 'v, 'a) t -> f:('v -> bool) -> int
    val counti : ('k, 'v, 'a) t -> f:(key:'k -> data:'v -> bool) -> int
    val split :
      ('k, 'cmp,
       ('k, 'v, 'cmp) t ->
       'k -> ('k, 'v, 'cmp) t * ('k * 'v) option * ('k, 'v, 'cmp) t)
      Base__Map_intf.Without_comparator.t
    val split_le_gt :
      ('k, 'cmp,
       ('k, 'v, 'cmp) t -> 'k -> ('k, 'v, 'cmp) t * ('k, 'v, 'cmp) t)
      Base__Map_intf.Without_comparator.t
    val split_lt_ge :
      ('k, 'cmp,
       ('k, 'v, 'cmp) t -> 'k -> ('k, 'v, 'cmp) t * ('k, 'v, 'cmp) t)
      Base__Map_intf.Without_comparator.t
    val append :
      ('k, 'cmp,
       lower_part:('k, 'v, 'cmp) t ->
       upper_part:('k, 'v, 'cmp) t ->
       [ `Ok of ('k, 'v, 'cmp) t | `Overlapping_key_ranges ])
      Base__Map_intf.Without_comparator.t
    val subrange :
      ('k, 'cmp,
       ('k, 'v, 'cmp) t ->
       lower_bound:'k Base__.Maybe_bound.t ->
       upper_bound:'k Base__.Maybe_bound.t -> ('k, 'v, 'cmp) t)
      Base__Map_intf.Without_comparator.t
    val fold_range_inclusive :
      ('k, 'cmp,
       ('k, 'v, 'cmp) t ->
       min:'k ->
       max:'k -> init:'acc -> f:(key:'k -> data:'v -> 'acc -> 'acc) -> 'acc)
      Base__Map_intf.Without_comparator.t
    val range_to_alist :
      ('k, 'cmp, ('k, 'v, 'cmp) t -> min:'k -> max:'k -> ('k * 'v) list)
      Base__Map_intf.Without_comparator.t
    val closest_key :
      ('k, 'cmp,
       ('k, 'v, 'cmp) t ->
       [ `Greater_or_equal_to
       | `Greater_than
       | `Less_or_equal_to
       | `Less_than ] -> 'k -> ('k * 'v) option)
      Base__Map_intf.Without_comparator.t
    val nth : ('k, 'v, 'cmp) t -> int -> ('k * 'v) option
    val nth_exn : ('k, 'v, 'cmp) t -> int -> 'k * 'v
    val rank :
      ('k, 'cmp, ('k, 'a, 'cmp) t -> 'k -> int option)
      Base__Map_intf.Without_comparator.t
    val to_tree : ('k, 'v, 'cmp) t -> ('k, 'v, 'cmp) Tree.t
    val to_sequence :
      ('k, 'cmp,
       ?order:[ `Decreasing_key | `Increasing_key ] ->
       ?keys_greater_or_equal_to:'k ->
       ?keys_less_or_equal_to:'k ->
       ('k, 'v, 'cmp) t -> ('k * 'v) Base__.Sequence.t)
      Base__Map_intf.Without_comparator.t
    val binary_search :
      ('k, 'cmp,
       ('k, 'v, 'cmp) t ->
       compare:(key:'k -> data:'v -> 'key -> int) ->
       Base__.Binary_searchable.Which_target_by_key.t ->
       'key -> ('k * 'v) option)
      Base__Map_intf.Without_comparator.t
    val binary_search_segmented :
      ('k, 'cmp,
       ('k, 'v, 'cmp) t ->
       segment_of:(key:'k -> data:'v -> [ `Left | `Right ]) ->
       Base__.Binary_searchable.Which_target_by_segment.t -> ('k * 'v) option)
      Base__Map_intf.Without_comparator.t
    val binary_search_subrange :
      ('k, 'cmp,
       ('k, 'v, 'cmp) t ->
       compare:(key:'k -> data:'v -> 'bound -> int) ->
       lower_bound:'bound Base__.Maybe_bound.t ->
       upper_bound:'bound Base__.Maybe_bound.t -> ('k, 'v, 'cmp) t)
      Base__Map_intf.Without_comparator.t
    module Make_applicative_traversals :
      functor (A : Base__.Applicative.Lazy_applicative) ->
        sig
          val mapi :
            ('k, 'v1, 'cmp) t ->
            f:(key:'k -> data:'v1 -> 'v2 A.t) -> ('k, 'v2, 'cmp) t A.t
          val filter_mapi :
            ('k, 'v1, 'cmp) t ->
            f:(key:'k -> data:'v1 -> 'v2 option A.t) -> ('k, 'v2, 'cmp) t A.t
        end
    val comparator : ('a, 'b, 'cmp) t -> ('a, 'cmp) Base__.Comparator.t
    val hash_fold_direct :
      'k Base__.Hash.folder ->
      'v Base__.Hash.folder -> ('k, 'v, 'cmp) t Base__.Hash.folder
    module Empty_without_value_restriction :
      functor (K : Base__.Comparator.S1) ->
        sig val empty : ('a K.t, 'v, K.comparator_witness) t end
  end
module Poly :
  sig
    type ('key, 'value) t =
        ('key, 'value, Base__.Comparator.Poly.comparator_witness) t/2
    type ('key, 'value) tree =
        ('key, 'value, Base__.Comparator.Poly.comparator_witness)
        Using_comparator.Tree.t
    type comparator_witness = Base__.Comparator.Poly.comparator_witness
    val empty : ('k, 'cmp, ('k, 'a) t) Base__Map_intf.Without_comparator.t
    val singleton :
      ('k, 'cmp, 'k -> 'v -> ('k, 'v) t) Base__Map_intf.Without_comparator.t
    val map_keys :
      ('k2, 'cmp2,
       ('k1, 'v) t ->
       f:('k1 -> 'k2) -> [ `Duplicate_key of 'k2 | `Ok of ('k2, 'v) t ])
      Base__Map_intf.Without_comparator.t
    val map_keys_exn :
      ('k2, 'cmp2, ('k1, 'v) t -> f:('k1 -> 'k2) -> ('k2, 'v) t)
      Base__Map_intf.Without_comparator.t
    val transpose_keys :
      ('k1, 'cmp1,
       ('k2, 'cmp2, ('k1, ('k2, 'a) t) t -> ('k2, ('k1, 'a) t) t)
       Base__Map_intf.Without_comparator.t)
      Base__Map_intf.Without_comparator.t
    val of_sorted_array :
      ('k, 'cmp, ('k * 'v) array -> ('k, 'v) t Base__.Or_error.t)
      Base__Map_intf.Without_comparator.t
    val of_sorted_array_unchecked :
      ('k, 'cmp, ('k * 'v) array -> ('k, 'v) t)
      Base__Map_intf.Without_comparator.t
    val of_increasing_iterator_unchecked :
      ('k, 'cmp, len:int -> f:(int -> 'k * 'v) -> ('k, 'v) t)
      Base__Map_intf.Without_comparator.t
    val of_alist :
      ('k, 'cmp,
       ('k * 'v) list -> [ `Duplicate_key of 'k | `Ok of ('k, 'v) t ])
      Base__Map_intf.Without_comparator.t
    val of_alist_or_error :
      ('k, 'cmp, ('k * 'v) list -> ('k, 'v) t Base__.Or_error.t)
      Base__Map_intf.Without_comparator.t
    val of_alist_exn :
      ('k, 'cmp, ('k * 'v) list -> ('k, 'v) t)
      Base__Map_intf.Without_comparator.t
    val of_alist_multi :
      ('k, 'cmp, ('k * 'v) list -> ('k, 'v list) t)
      Base__Map_intf.Without_comparator.t
    val of_alist_fold :
      ('k, 'cmp,
       ('k * 'v1) list -> init:'v2 -> f:('v2 -> 'v1 -> 'v2) -> ('k, 'v2) t)
      Base__Map_intf.Without_comparator.t
    val of_alist_reduce :
      ('k, 'cmp, ('k * 'v) list -> f:('v -> 'v -> 'v) -> ('k, 'v) t)
      Base__Map_intf.Without_comparator.t
    val of_increasing_sequence :
      ('k, 'cmp, ('k * 'v) Base__.Sequence.t -> ('k, 'v) t Base__.Or_error.t)
      Base__Map_intf.Without_comparator.t
    val of_sequence :
      ('k, 'cmp,
       ('k * 'v) Base__.Sequence.t ->
       [ `Duplicate_key of 'k | `Ok of ('k, 'v) t ])
      Base__Map_intf.Without_comparator.t
    val of_sequence_or_error :
      ('k, 'cmp, ('k * 'v) Base__.Sequence.t -> ('k, 'v) t Base__.Or_error.t)
      Base__Map_intf.Without_comparator.t
    val of_sequence_exn :
      ('k, 'cmp, ('k * 'v) Base__.Sequence.t -> ('k, 'v) t)
      Base__Map_intf.Without_comparator.t
    val of_sequence_multi :
      ('k, 'cmp, ('k * 'v) Base__.Sequence.t -> ('k, 'v list) t)
      Base__Map_intf.Without_comparator.t
    val of_sequence_fold :
      ('k, 'cmp,
       ('k * 'v1) Base__.Sequence.t ->
       init:'v2 -> f:('v2 -> 'v1 -> 'v2) -> ('k, 'v2) t)
      Base__Map_intf.Without_comparator.t
    val of_sequence_reduce :
      ('k, 'cmp,
       ('k * 'v) Base__.Sequence.t -> f:('v -> 'v -> 'v) -> ('k, 'v) t)
      Base__Map_intf.Without_comparator.t
    val of_list_with_key :
      ('k, 'cmp,
       'v list ->
       get_key:('v -> 'k) -> [ `Duplicate_key of 'k | `Ok of ('k, 'v) t ])
      Base__Map_intf.Without_comparator.t
    val of_list_with_key_or_error :
      ('k, 'cmp,
       'v list -> get_key:('v -> 'k) -> ('k, 'v) t Base__.Or_error.t)
      Base__Map_intf.Without_comparator.t
    val of_list_with_key_exn :
      ('k, 'cmp, 'v list -> get_key:('v -> 'k) -> ('k, 'v) t)
      Base__Map_intf.Without_comparator.t
    val of_list_with_key_multi :
      ('k, 'cmp, 'v list -> get_key:('v -> 'k) -> ('k, 'v list) t)
      Base__Map_intf.Without_comparator.t
    val of_iteri :
      ('k, 'cmp,
       iteri:(f:(key:'k -> data:'v -> unit) -> unit) ->
       [ `Duplicate_key of 'k | `Ok of ('k, 'v) t ])
      Base__Map_intf.Without_comparator.t
    val of_iteri_exn :
      ('k, 'cmp, iteri:(f:(key:'k -> data:'v -> unit) -> unit) -> ('k, 'v) t)
      Base__Map_intf.Without_comparator.t
    val of_tree :
      ('k, 'cmp, ('k, 'v) tree -> ('k, 'v) t)
      Base__Map_intf.Without_comparator.t
    val invariants :
      ('k, 'cmp, ('k, 'v) t -> bool) Base__Map_intf.Without_comparator.t
    val is_empty : ('a, 'b) t -> bool
    val length : ('a, 'b) t -> int
    val add :
      ('k, 'cmp,
       ('k, 'v) t ->
       key:'k -> data:'v -> ('k, 'v) t Base__Map_intf.Or_duplicate.t)
      Base__Map_intf.Without_comparator.t
    val add_exn :
      ('k, 'cmp, ('k, 'v) t -> key:'k -> data:'v -> ('k, 'v) t)
      Base__Map_intf.Without_comparator.t
    val set :
      ('k, 'cmp, ('k, 'v) t -> key:'k -> data:'v -> ('k, 'v) t)
      Base__Map_intf.Without_comparator.t
    val add_multi :
      ('k, 'cmp, ('k, 'v list) t -> key:'k -> data:'v -> ('k, 'v list) t)
      Base__Map_intf.Without_comparator.t
    val remove_multi :
      ('k, 'cmp, ('k, 'v list) t -> 'k -> ('k, 'v list) t)
      Base__Map_intf.Without_comparator.t
    val find_multi :
      ('k, 'cmp, ('k, 'v list) t -> 'k -> 'v list)
      Base__Map_intf.Without_comparator.t
    val change :
      ('k, 'cmp,
       ('k, 'v) t -> 'k -> f:('v option -> 'v option) -> ('k, 'v) t)
      Base__Map_intf.Without_comparator.t
    val update :
      ('k, 'cmp, ('k, 'v) t -> 'k -> f:('v option -> 'v) -> ('k, 'v) t)
      Base__Map_intf.Without_comparator.t
    val find :
      ('k, 'cmp, ('k, 'v) t -> 'k -> 'v option)
      Base__Map_intf.Without_comparator.t
    val find_exn :
      ('k, 'cmp, ('k, 'v) t -> 'k -> 'v) Base__Map_intf.Without_comparator.t
    val remove :
      ('k, 'cmp, ('k, 'v) t -> 'k -> ('k, 'v) t)
      Base__Map_intf.Without_comparator.t
    val mem :
      ('k, 'cmp, ('k, 'a) t -> 'k -> bool)
      Base__Map_intf.Without_comparator.t
    val iter_keys : ('k, 'a) t -> f:('k -> unit) -> unit
    val iter : ('a, 'v) t -> f:('v -> unit) -> unit
    val iteri : ('k, 'v) t -> f:(key:'k -> data:'v -> unit) -> unit
    val iteri_until :
      ('k, 'v) t ->
      f:(key:'k -> data:'v -> Base__Map_intf.Continue_or_stop.t) ->
      Base__Map_intf.Finished_or_unfinished.t
    val iter2 :
      ('k, 'cmp,
       ('k, 'v1) t ->
       ('k, 'v2) t ->
       f:(key:'k -> data:('v1, 'v2) Base__Map_intf.Merge_element.t -> unit) ->
       unit)
      Base__Map_intf.Without_comparator.t
    val map : ('k, 'v1) t -> f:('v1 -> 'v2) -> ('k, 'v2) t
    val mapi : ('k, 'v1) t -> f:(key:'k -> data:'v1 -> 'v2) -> ('k, 'v2) t
    val fold :
      ('k, 'v) t ->
      init:'acc -> f:(key:'k -> data:'v -> 'acc -> 'acc) -> 'acc
    val fold_until :
      ('k, 'v) t ->
      init:'acc ->
      f:(key:'k ->
         data:'v ->
         'acc -> ('acc, 'final) Base__.Container.Continue_or_stop.t) ->
      finish:('acc -> 'final) -> 'final
    val fold_right :
      ('k, 'v) t ->
      init:'acc -> f:(key:'k -> data:'v -> 'acc -> 'acc) -> 'acc
    val fold2 :
      ('k, 'cmp,
       ('k, 'v1) t ->
       ('k, 'v2) t ->
       init:'acc ->
       f:(key:'k ->
          data:('v1, 'v2) Base__Map_intf.Merge_element.t -> 'acc -> 'acc) ->
       'acc)
      Base__Map_intf.Without_comparator.t
    val filter_keys : ('k, 'v) t -> f:('k -> bool) -> ('k, 'v) t
    val filter : ('k, 'v) t -> f:('v -> bool) -> ('k, 'v) t
    val filteri : ('k, 'v) t -> f:(key:'k -> data:'v -> bool) -> ('k, 'v) t
    val filter_map : ('k, 'v1) t -> f:('v1 -> 'v2 option) -> ('k, 'v2) t
    val filter_mapi :
      ('k, 'v1) t -> f:(key:'k -> data:'v1 -> 'v2 option) -> ('k, 'v2) t
    val partition_mapi :
      ('k, 'v1) t ->
      f:(key:'k -> data:'v1 -> ('v2, 'v3) Base__.Either.t) ->
      ('k, 'v2) t * ('k, 'v3) t
    val partition_map :
      ('k, 'v1) t ->
      f:('v1 -> ('v2, 'v3) Base__.Either.t) -> ('k, 'v2) t * ('k, 'v3) t
    val partitioni_tf :
      ('k, 'v) t -> f:(key:'k -> data:'v -> bool) -> ('k, 'v) t * ('k, 'v) t
    val partition_tf :
      ('k, 'v) t -> f:('v -> bool) -> ('k, 'v) t * ('k, 'v) t
    val combine_errors :
      ('k, 'cmp,
       ('k, 'v Base__.Or_error.t) t -> ('k, 'v) t Base__.Or_error.t)
      Base__Map_intf.Without_comparator.t
    val compare_direct :
      ('k, 'cmp, ('v -> 'v -> int) -> ('k, 'v) t -> ('k, 'v) t -> int)
      Base__Map_intf.Without_comparator.t
    val equal :
      ('k, 'cmp, ('v -> 'v -> bool) -> ('k, 'v) t -> ('k, 'v) t -> bool)
      Base__Map_intf.Without_comparator.t
    val keys : ('k, 'a) t -> 'k list
    val data : ('a, 'v) t -> 'v list
    val to_alist :
      ?key_order:[ `Decreasing | `Increasing ] ->
      ('k, 'v) t -> ('k * 'v) list
    val merge :
      ('k, 'cmp,
       ('k, 'v1) t ->
       ('k, 'v2) t ->
       f:(key:'k -> ('v1, 'v2) Base__Map_intf.Merge_element.t -> 'v3 option) ->
       ('k, 'v3) t)
      Base__Map_intf.Without_comparator.t
    val merge_skewed :
      ('k, 'cmp,
       ('k, 'v) t ->
       ('k, 'v) t -> combine:(key:'k -> 'v -> 'v -> 'v) -> ('k, 'v) t)
      Base__Map_intf.Without_comparator.t
    val symmetric_diff :
      ('k, 'cmp,
       ('k, 'v) t ->
       ('k, 'v) t ->
       data_equal:('v -> 'v -> bool) ->
       ('k, 'v) Base__Map_intf.Symmetric_diff_element.t Base__.Sequence.t)
      Base__Map_intf.Without_comparator.t
    val fold_symmetric_diff :
      ('k, 'cmp,
       ('k, 'v) t ->
       ('k, 'v) t ->
       data_equal:('v -> 'v -> bool) ->
       init:'acc ->
       f:('acc -> ('k, 'v) Base__Map_intf.Symmetric_diff_element.t -> 'acc) ->
       'acc)
      Base__Map_intf.Without_comparator.t
    val min_elt : ('k, 'v) t -> ('k * 'v) option
    val min_elt_exn : ('k, 'v) t -> 'k * 'v
    val max_elt : ('k, 'v) t -> ('k * 'v) option
    val max_elt_exn : ('k, 'v) t -> 'k * 'v
    val for_all : ('k, 'v) t -> f:('v -> bool) -> bool
    val for_alli : ('k, 'v) t -> f:(key:'k -> data:'v -> bool) -> bool
    val exists : ('k, 'v) t -> f:('v -> bool) -> bool
    val existsi : ('k, 'v) t -> f:(key:'k -> data:'v -> bool) -> bool
    val count : ('k, 'v) t -> f:('v -> bool) -> int
    val counti : ('k, 'v) t -> f:(key:'k -> data:'v -> bool) -> int
    val split :
      ('k, 'cmp,
       ('k, 'v) t -> 'k -> ('k, 'v) t * ('k * 'v) option * ('k, 'v) t)
      Base__Map_intf.Without_comparator.t
    val split_le_gt :
      ('k, 'cmp, ('k, 'v) t -> 'k -> ('k, 'v) t * ('k, 'v) t)
      Base__Map_intf.Without_comparator.t
    val split_lt_ge :
      ('k, 'cmp, ('k, 'v) t -> 'k -> ('k, 'v) t * ('k, 'v) t)
      Base__Map_intf.Without_comparator.t
    val append :
      ('k, 'cmp,
       lower_part:('k, 'v) t ->
       upper_part:('k, 'v) t ->
       [ `Ok of ('k, 'v) t | `Overlapping_key_ranges ])
      Base__Map_intf.Without_comparator.t
    val subrange :
      ('k, 'cmp,
       ('k, 'v) t ->
       lower_bound:'k Base__.Maybe_bound.t ->
       upper_bound:'k Base__.Maybe_bound.t -> ('k, 'v) t)
      Base__Map_intf.Without_comparator.t
    val fold_range_inclusive :
      ('k, 'cmp,
       ('k, 'v) t ->
       min:'k ->
       max:'k -> init:'acc -> f:(key:'k -> data:'v -> 'acc -> 'acc) -> 'acc)
      Base__Map_intf.Without_comparator.t
    val range_to_alist :
      ('k, 'cmp, ('k, 'v) t -> min:'k -> max:'k -> ('k * 'v) list)
      Base__Map_intf.Without_comparator.t
    val closest_key :
      ('k, 'cmp,
       ('k, 'v) t ->
       [ `Greater_or_equal_to
       | `Greater_than
       | `Less_or_equal_to
       | `Less_than ] -> 'k -> ('k * 'v) option)
      Base__Map_intf.Without_comparator.t
    val nth : ('k, 'v) t -> int -> ('k * 'v) option
    val nth_exn : ('k, 'v) t -> int -> 'k * 'v
    val rank :
      ('k, 'cmp, ('k, 'a) t -> 'k -> int option)
      Base__Map_intf.Without_comparator.t
    val to_tree : ('k, 'v) t -> ('k, 'v) tree
    val to_sequence :
      ('k, 'cmp,
       ?order:[ `Decreasing_key | `Increasing_key ] ->
       ?keys_greater_or_equal_to:'k ->
       ?keys_less_or_equal_to:'k -> ('k, 'v) t -> ('k * 'v) Base__.Sequence.t)
      Base__Map_intf.Without_comparator.t
    val binary_search :
      ('k, 'cmp,
       ('k, 'v) t ->
       compare:(key:'k -> data:'v -> 'key -> int) ->
       Base__.Binary_searchable.Which_target_by_key.t ->
       'key -> ('k * 'v) option)
      Base__Map_intf.Without_comparator.t
    val binary_search_segmented :
      ('k, 'cmp,
       ('k, 'v) t ->
       segment_of:(key:'k -> data:'v -> [ `Left | `Right ]) ->
       Base__.Binary_searchable.Which_target_by_segment.t -> ('k * 'v) option)
      Base__Map_intf.Without_comparator.t
    val binary_search_subrange :
      ('k, 'cmp,
       ('k, 'v) t ->
       compare:(key:'k -> data:'v -> 'bound -> int) ->
       lower_bound:'bound Base__.Maybe_bound.t ->
       upper_bound:'bound Base__.Maybe_bound.t -> ('k, 'v) t)
      Base__Map_intf.Without_comparator.t
    module Make_applicative_traversals :
      functor (A : Base__.Applicative.Lazy_applicative) ->
        sig
          val mapi :
            ('k, 'v1) t ->
            f:(key:'k -> data:'v1 -> 'v2 A.t) -> ('k, 'v2) t A.t
          val filter_mapi :
            ('k, 'v1) t ->
            f:(key:'k -> data:'v1 -> 'v2 option A.t) -> ('k, 'v2) t A.t
        end
  end
val of_tree :
  ('k, 'cmp) Base__.Comparator.Module.t ->
  ('k, 'v, 'cmp) Using_comparator.Tree.t -> ('k, 'v, 'cmp) t
val to_tree : ('k, 'v, 'cmp) t -> ('k, 'v, 'cmp) Using_comparator.Tree.t
module With_comparator = Base__Map_intf.With_comparator
module With_first_class_module = Base__Map_intf.With_first_class_module
module Without_comparator = Base__Map_intf.Without_comparator
module type For_deriving = Base__Map_intf.For_deriving
module type S_poly = Base__Map_intf.S_poly
module type Accessors_generic = Base__Map_intf.Accessors_generic
module type Creators_and_accessors_generic =
  Base__Map_intf.Creators_and_accessors_generic
("DEBUG:rule", [Tag1 (("t", 3412), ([((("key")), 100000000, 0, -1114); ((("value")), 100000000, 0, -1115); ((("cmp")), 100000000, 0, -1116)], 3, 0, 1, 0, [15; 9; 15], [2; 2; 2], 0, 0, (("src/map_intf.ml", 1008, 30026, 30028), ("src/map_intf.ml", 1008, 30026, 30059), 0), 0, 0, 0, Tag1 ("Base__Map_intf", 356)), 1, 0); Tag3 (("Or_duplicate", 3413), 1, (Tag3 (Tag1 ((Tag2 ("Base__Map_intf")), "Or_duplicate")), 0, (("src/map_intf.ml", 1010, 30061, 30063), ("src/map_intf.ml", 1010, 30061, 30097), 0), Tag1 ("Base__Map_intf", 357)), 0, 0); Tag3 (("Continue_or_stop", 3414), 1, (Tag3 (Tag1 ((Tag2 ("Base__Map_intf")), "Continue_or_stop")), 0, (("src/map_intf.ml", 1011, 30098, 30100), ("src/map_intf.ml", 1011, 30098, 30142), 0), Tag1 ("Base__Map_intf", 358)), 0, 0); Tag3 (("Finished_or_unfinished", 3415), 0, (Tag1 ([Tag1 (("t", 3547), (0, 0, Tag1 ([(("Finished", 5099), (0), 0, (("src/map_intf.ml", 1015, 30222, 30228), ("src/map_intf.ml", 1015, 30222, 30238), 0), 0, Tag1 ("Base__Map_intf", 360)); (("Unfinished", 5100), (0), 0, (("src/map_intf.ml", 1016, 30239, 30245), ("src/map_intf.ml", 1016, 30239, 30257), 0), 0, Tag1 ("Base__Map_intf", 361))], 0), 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Finished_or_unfinished"), "t"), 0, (0)), 100000000, 0, -1132)), 0, 0, 0, 0, (("src/map_intf.ml", 1014, 30182, 30186), ("src/map_intf.ml", 1017, 30258, 30316), 0), [(("deriving_inline", (("src/map_intf.ml", 1017, 30258, 30265), ("src/map_intf.ml", 1017, 30258, 30280), 0)), ([([(Tag8 ([(((("compare"), (("src/map_intf.ml", 1017, 30258, 30281), ("src/map_intf.ml", 1017, 30258, 30288), 0))), (("src/map_intf.ml", 1017, 30258, 30281), ("src/map_intf.ml", 1017, 30258, 30288), 0), 0, 0); (((("enumerate"), (("src/map_intf.ml", 1017, 30258, 30290), ("src/map_intf.ml", 1017, 30258, 30299), 0))), (("src/map_intf.ml", 1017, 30258, 30290), ("src/map_intf.ml", 1017, 30258, 30299), 0), 0, 0); (((("equal"), (("src/map_intf.ml", 1017, 30258, 30301), ("src/map_intf.ml", 1017, 30258, 30306), 0))), (("src/map_intf.ml", 1017, 30258, 30301), ("src/map_intf.ml", 1017, 30258, 30306), 0), 0, 0); (((("sexp_of"), (("src/map_intf.ml", 1017, 30258, 30308), ("src/map_intf.ml", 1017, 30258, 30315), 0))), (("src/map_intf.ml", 1017, 30258, 30308), ("src/map_intf.ml", 1017, 30258, 30315), 0), 0, 0)]), (("src/map_intf.ml", 1017, 30258, 30281), ("src/map_intf.ml", 1017, 30258, 30315), 0), 0, 0)], (("src/map_intf.ml", 1017, 30258, 30281), ("src/map_intf.ml", 1017, 30258, 30315), 0))]), (("src/map_intf.ml", 1017, 30258, 30262), ("src/map_intf.ml", 1017, 30258, 30316), 0))], 1, 0, Tag1 ("Base__Map_intf", 359)), 1, 0); (("compare", 3548), ((Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "compare"), [(Tag3 ((("t", 3547)), 0, (0)), 100000000, 0, -1131)], (0)), 100000000, 0, -1130), 0, (("src/map_intf.ml", 1019, 30318, 30330), ("src/map_intf.ml", 1019, 30318, 30375), 0), 0, Tag1 ("Base__Ppx_compare_lib", 5)), 0); (("all", 3549), ((Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 3547)), 0, (0)), 100000000, 0, -1129)], (0)), 100000000, 0, -1128), 0, (("src/map_intf.ml", 1020, 30376, 30388), ("src/map_intf.ml", 1020, 30376, 30435), 0), 0, Tag1 ("Base__Ppx_enumerate_lib", 2)), 0); (("equal", 3550), ((Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "equal"), [(Tag3 ((("t", 3547)), 0, (0)), 100000000, 0, -1127)], (0)), 100000000, 0, -1126), 0, (("src/map_intf.ml", 1021, 30436, 30448), ("src/map_intf.ml", 1021, 30436, 30488), 0), 0, Tag1 ("Base__Ppx_compare_lib", 18)), 0); (("sexp_of_t", 3551), ((Tag1 (0, (Tag3 ((("t", 3547)), 0, (0)), 100000000, 0, -1125), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1124), 0), 100000000, 0, -1123), 0, (("src/map_intf.ml", 1023, 30490, 30494), ("src/map_intf.ml", 1023, 30490, 30530), 0), 0, Tag1 ("Base__Map_intf", 365)), 0); (("of_continue_or_stop", 3552), ((Tag1 (0, (Tag3 (Tag1 ((("Continue_or_stop", 3414)), "t"), 0, (0)), 100000000, 0, -1122), (Tag3 ((("t", 3547)), 0, (0)), 100000000, 0, -1121), 0), 100000000, 0, -1120), 0, (("src/map_intf.ml", 1028, 30615, 30619), ("src/map_intf.ml", 1028, 30615, 30668), 0), 0, Tag1 ("Base__Map_intf", 366)), 0); (("to_continue_or_stop", 3553), ((Tag1 (0, (Tag3 ((("t", 3547)), 0, (0)), 100000000, 0, -1119), (Tag3 (Tag1 ((("Continue_or_stop", 3414)), "t"), 0, (0)), 100000000, 0, -1118), 0), 100000000, 0, -1117), 0, (("src/map_intf.ml", 1031, 30739, 30743), ("src/map_intf.ml", 1031, 30739, 30792), 0), 0, Tag1 ("Base__Map_intf", 367)), 0)]), 0, (("src/map_intf.ml", 1013, 30144, 30146), ("src/map_intf.ml", 1032, 30793, 30798), 0), Tag1 ("Base__Map_intf", 368)), 0, 0); Tag3 (("Merge_element", 3416), 0, (Tag1 ([Tag1 (("t", 3554), ([((("left")), 100000000, 0, -1204); ((("right")), 100000000, 0, -1203)], 2, 0, 1, ((Tag8 (([("Both", (((Tag2 ([((("left")), 100000000, 0, -1204); ((("right")), 100000000, 0, -1203)]), 100000000, 0, -1205)))); ("Left", ((((("left")), 100000000, 0, -1204)))); ("Right", ((((("right")), 100000000, 0, -1203))))], (0, 100000000, 0, -1202), 1, 0, 0)), 100000000, 0, -1201)), [25; 25], [0; 0], 0, 0, (("src/map_intf.ml", 1035, 30829, 30833), ("src/map_intf.ml", 1040, 30946, 30993), 0), [(("deriving_inline", (("src/map_intf.ml", 1040, 30946, 30953), ("src/map_intf.ml", 1040, 30946, 30968), 0)), ([([(Tag8 ([(((("compare"), (("src/map_intf.ml", 1040, 30946, 30969), ("src/map_intf.ml", 1040, 30946, 30976), 0))), (("src/map_intf.ml", 1040, 30946, 30969), ("src/map_intf.ml", 1040, 30946, 30976), 0), 0, 0); (((("equal"), (("src/map_intf.ml", 1040, 30946, 30978), ("src/map_intf.ml", 1040, 30946, 30983), 0))), (("src/map_intf.ml", 1040, 30946, 30978), ("src/map_intf.ml", 1040, 30946, 30983), 0), 0, 0); (((("sexp_of"), (("src/map_intf.ml", 1040, 30946, 30985), ("src/map_intf.ml", 1040, 30946, 30992), 0))), (("src/map_intf.ml", 1040, 30946, 30985), ("src/map_intf.ml", 1040, 30946, 30992), 0), 0, 0)]), (("src/map_intf.ml", 1040, 30946, 30969), ("src/map_intf.ml", 1040, 30946, 30992), 0), 0, 0)], (("src/map_intf.ml", 1040, 30946, 30969), ("src/map_intf.ml", 1040, 30946, 30992), 0))]), (("src/map_intf.ml", 1040, 30946, 30950), ("src/map_intf.ml", 1040, 30946, 30993), 0))], 0, 0, Tag1 ("Base__Map_intf", 369)), 1, 0); (("compare", 3555), ((Tag1 (0, (Tag1 (0, ((("left")), 100000000, 0, -1192), (Tag1 (0, ((("left")), 100000000, 0, -1192), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1200), 0), 100000000, 0, -1199), 0), 100000000, 0, -1198), (Tag1 (0, (Tag1 (0, ((("right")), 100000000, 0, -1193), (Tag1 (0, ((("right")), 100000000, 0, -1193), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1197), 0), 100000000, 0, -1196), 0), 100000000, 0, -1195), (Tag1 (0, (Tag3 ((("t", 3554)), [((("left")), 100000000, 0, -1192); ((("right")), 100000000, 0, -1193)], (0)), 100000000, 0, -1194), (Tag1 (0, (Tag3 ((("t", 3554)), [((("left")), 100000000, 0, -1192); ((("right")), 100000000, 0, -1193)], (0)), 100000000, 0, -1191), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1190), 0), 100000000, 0, -1189), 0), 100000000, 0, -1188), 0), 100000000, 0, -1187), 0), 100000000, 0, -1186), 0, (("src/map_intf.ml", 1042, 30995, 30999), ("src/map_intf.ml", 1047, 31133, 31145), 0), 0, Tag1 ("Base__Map_intf", 370)), 0); (("equal", 3556), ((Tag1 (0, (Tag1 (0, ((("left")), 100000000, 0, -1177), (Tag1 (0, ((("left")), 100000000, 0, -1177), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1185), 0), 100000000, 0, -1184), 0), 100000000, 0, -1183), (Tag1 (0, (Tag1 (0, ((("right")), 100000000, 0, -1178), (Tag1 (0, ((("right")), 100000000, 0, -1178), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1182), 0), 100000000, 0, -1181), 0), 100000000, 0, -1180), (Tag1 (0, (Tag3 ((("t", 3554)), [((("left")), 100000000, 0, -1177); ((("right")), 100000000, 0, -1178)], (0)), 100000000, 0, -1179), (Tag1 (0, (Tag3 ((("t", 3554)), [((("left")), 100000000, 0, -1177); ((("right")), 100000000, 0, -1178)], (0)), 100000000, 0, -1176), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1175), 0), 100000000, 0, -1174), 0), 100000000, 0, -1173), 0), 100000000, 0, -1172), 0), 100000000, 0, -1171), 0, (("src/map_intf.ml", 1049, 31147, 31151), ("src/map_intf.ml", 1054, 31285, 31298), 0), 0, Tag1 ("Base__Map_intf", 371)), 0); (("sexp_of_t", 3557), ((Tag1 (0, (Tag1 (0, ((("left")), 100000000, 0, -1165), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1170), 0), 100000000, 0, -1169), (Tag1 (0, (Tag1 (0, ((("right")), 100000000, 0, -1166), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1168), 0), 100000000, 0, -1167), (Tag1 (0, (Tag3 ((("t", 3554)), [((("left")), 100000000, 0, -1165); ((("right")), 100000000, 0, -1166)], (0)), 100000000, 0, -1164), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1163), 0), 100000000, 0, -1162), 0), 100000000, 0, -1161), 0), 100000000, 0, -1160), 0, (("src/map_intf.ml", 1056, 31300, 31304), ("src/map_intf.ml", 1060, 31418, 31442), 0), 0, Tag1 ("Base__Map_intf", 372)), 0); (("left", 3558), ((Tag1 (0, (Tag3 ((("t", 3554)), [((("left")), 100000000, 0, -1157); ((0), 100000000, 0, -1159)], (0)), 100000000, 0, -1158), (Tag3 ((Tag3 ("option", 10)), [((("left")), 100000000, 0, -1157)], (0)), 100000000, 0, -1156), 0), 100000000, 0, -1155), 0, (("src/map_intf.ml", 1064, 31458, 31462), ("src/map_intf.ml", 1064, 31458, 31501), 0), 0, Tag1 ("Base__Map_intf", 373)), 0); (("right", 3559), ((Tag1 (0, (Tag3 ((("t", 3554)), [((0), 100000000, 0, -1154); ((("right")), 100000000, 0, -1152)], (0)), 100000000, 0, -1153), (Tag3 ((Tag3 ("option", 10)), [((("right")), 100000000, 0, -1152)], (0)), 100000000, 0, -1151), 0), 100000000, 0, -1150), 0, (("src/map_intf.ml", 1065, 31502, 31506), ("src/map_intf.ml", 1065, 31502, 31548), 0), 0, Tag1 ("Base__Map_intf", 374)), 0); (("left_value", 3560), ((Tag1 (0, (Tag3 ((("t", 3554)), [((("left")), 100000000, 0, -1147); ((0), 100000000, 0, -1149)], (0)), 100000000, 0, -1148), (Tag1 (("default"), ((("left")), 100000000, 0, -1147), ((("left")), 100000000, 0, -1147), 0), 100000000, 0, -1146), 0), 100000000, 0, -1145), 0, (("src/map_intf.ml", 1066, 31549, 31553), ("src/map_intf.ml", 1066, 31549, 31608), 0), 0, Tag1 ("Base__Map_intf", 375)), 0); (("right_value", 3561), ((Tag1 (0, (Tag3 ((("t", 3554)), [((0), 100000000, 0, -1144); ((("right")), 100000000, 0, -1142)], (0)), 100000000, 0, -1143), (Tag1 (("default"), ((("right")), 100000000, 0, -1142), ((("right")), 100000000, 0, -1142), 0), 100000000, 0, -1141), 0), 100000000, 0, -1140), 0, (("src/map_intf.ml", 1067, 31609, 31613), ("src/map_intf.ml", 1067, 31609, 31672), 0), 0, Tag1 ("Base__Map_intf", 376)), 0); (("values", 3562), ((Tag1 (0, (Tag3 ((("t", 3554)), [((("left")), 100000000, 0, -1137); ((("right")), 100000000, 0, -1138)], (0)), 100000000, 0, -1139), (Tag1 (("left_default"), ((("left")), 100000000, 0, -1137), (Tag1 (("right_default"), ((("right")), 100000000, 0, -1138), (Tag2 ([((("left")), 100000000, 0, -1137); ((("right")), 100000000, 0, -1138)]), 100000000, 0, -1136), 0), 100000000, 0, -1135), 0), 100000000, 0, -1134), 0), 100000000, 0, -1133), 0, (("src/map_intf.ml", 1069, 31674, 31678), ("src/map_intf.ml", 1073, 31774, 31797), 0), 0, Tag1 ("Base__Map_intf", 377)), 0)]), 0, (("src/map_intf.ml", 1034, 30800, 30802), ("src/map_intf.ml", 1074, 31798, 31803), 0), Tag1 ("Base__Map_intf", 378)), 0, 0); Tag1 (("comparator", 3417), ([((("k")), 100000000, 0, -1112); ((("cmp")), 100000000, 0, -1113)], 2, 0, 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Module"), "t"), [((("k")), 100000000, 0, -1112); ((("cmp")), 100000000, 0, -1113)], (0)), 100000000, 0, -1111)), [63; 63], [0; 0], 0, 0, (("src/map_intf.ml", 1076, 31805, 31807), ("src/map_intf.ml", 1077, 31867, 31935), 0), [(("deprecated", (("src/map_intf.ml", 1077, 31867, 31872), ("src/map_intf.ml", 1077, 31867, 31882), 0)), ([([(Tag1 (Tag2 ("[since 2021-12] use [Comparator.Module.t] instead", (("src/map_intf.ml", 1077, 31867, 31884), ("src/map_intf.ml", 1077, 31867, 31933), 0), 0)), (("src/map_intf.ml", 1077, 31867, 31883), ("src/map_intf.ml", 1077, 31867, 31934), 0), 0, 0)], (("src/map_intf.ml", 1077, 31867, 31883), ("src/map_intf.ml", 1077, 31867, 31934), 0))]), (("src/map_intf.ml", 1077, 31867, 31869), ("src/map_intf.ml", 1077, 31867, 31935), 0))], 0, 0, Tag1 ("Base__Map_intf", 379)), 1, 0); (("invariants", 3418), ((Tag1 (0, (Tag3 ((("t", 3412)), [((0), 100000000, 0, -1108); ((0), 100000000, 0, -1109); ((0), 100000000, 0, -1110)], (0)), 100000000, 0, -1107), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1106), 0), 100000000, 0, -1105), 0, (("src/map_intf.ml", 1080, 32007, 32009), ("src/map_intf.ml", 1080, 32007, 32045), 0), 0, Tag1 ("Base__Map_intf", 380)), 0); (("comparator_s", 3419), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("a")), 100000000, 0, -1101); ((0), 100000000, 0, -1104); ((("cmp")), 100000000, 0, -1102)], (0)), 100000000, 0, -1103), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Module"), "t"), [((("a")), 100000000, 0, -1101); ((("cmp")), 100000000, 0, -1102)], (0)), 100000000, 0, -1100), 0), 100000000, 0, -1099), 0, (("src/map_intf.ml", 1084, 32172, 32174), ("src/map_intf.ml", 1084, 32172, 32242), 0), 0, Tag1 ("Base__Map_intf", 381)), 0); (("comparator", 3420), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("a")), 100000000, 0, -1095); ((0), 100000000, 0, -1098); ((("cmp")), 100000000, 0, -1096)], (0)), 100000000, 0, -1097), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "t"), [((("a")), 100000000, 0, -1095); ((("cmp")), 100000000, 0, -1096)], (0)), 100000000, 0, -1094), 0), 100000000, 0, -1093), 0, (("src/map_intf.ml", 1086, 32244, 32246), ("src/map_intf.ml", 1086, 32244, 32305), 0), 0, Tag1 ("Base__Map_intf", 382)), 0); (("empty", 3421), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Module"), "t"), [((("a")), 100000000, 0, -1089); ((("cmp")), 100000000, 0, -1091)], (0)), 100000000, 0, -1092), (Tag3 ((("t", 3412)), [((("a")), 100000000, 0, -1089); ((("b")), 100000000, 0, -1090); ((("cmp")), 100000000, 0, -1091)], (0)), 100000000, 0, -1088), 0), 100000000, 0, -1087), 0, (("src/map_intf.ml", 1089, 32331, 32333), ("src/map_intf.ml", 1089, 32331, 32395), 0), 0, Tag1 ("Base__Map_intf", 383)), 0); (("singleton", 3422), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Module"), "t"), [((("a")), 100000000, 0, -1083); ((("cmp")), 100000000, 0, -1085)], (0)), 100000000, 0, -1086), (Tag1 (0, ((("a")), 100000000, 0, -1083), (Tag1 (0, ((("b")), 100000000, 0, -1084), (Tag3 ((("t", 3412)), [((("a")), 100000000, 0, -1083); ((("b")), 100000000, 0, -1084); ((("cmp")), 100000000, 0, -1085)], (0)), 100000000, 0, -1082), 0), 100000000, 0, -1081), 0), 100000000, 0, -1080), 0), 100000000, 0, -1079), 0, (("src/map_intf.ml", 1092, 32439, 32441), ("src/map_intf.ml", 1092, 32439, 32519), 0), 0, Tag1 ("Base__Map_intf", 384)), 0); (("of_alist", 3423), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Module"), "t"), [((("a")), 100000000, 0, -1073); ((("cmp")), 100000000, 0, -1075)], (0)), 100000000, 0, -1078), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("a")), 100000000, 0, -1073); ((("b")), 100000000, 0, -1074)]), 100000000, 0, -1077)], (0)), 100000000, 0, -1076), (Tag8 (([("Duplicate_key", ((((("a")), 100000000, 0, -1073)))); ("Ok", (((Tag3 ((("t", 3412)), [((("a")), 100000000, 0, -1073); ((("b")), 100000000, 0, -1074); ((("cmp")), 100000000, 0, -1075)], (0)), 100000000, 0, -1072))))], (0, 100000000, 0, -1071), 1, 0, 0)), 100000000, 0, -1070), 0), 100000000, 0, -1069), 0), 100000000, 0, -1068), 0, (("src/map_intf.ml", 1095, 32587, 32589), ("src/map_intf.ml", 1098, 32662, 32719), 0), 0, Tag1 ("Base__Map_intf", 385)), 0); (("of_alist_or_error", 3424), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Module"), "t"), [((("a")), 100000000, 0, -1062); ((("cmp")), 100000000, 0, -1064)], (0)), 100000000, 0, -1067), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("a")), 100000000, 0, -1062); ((("b")), 100000000, 0, -1063)]), 100000000, 0, -1066)], (0)), 100000000, 0, -1065), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((("t", 3412)), [((("a")), 100000000, 0, -1062); ((("b")), 100000000, 0, -1063); ((("cmp")), 100000000, 0, -1064)], (0)), 100000000, 0, -1061)], (0)), 100000000, 0, -1060), 0), 100000000, 0, -1059), 0), 100000000, 0, -1058), 0, (("src/map_intf.ml", 1102, 32846, 32848), ("src/map_intf.ml", 1105, 32930, 32964), 0), 0, Tag1 ("Base__Map_intf", 386)), 0); (("of_alist_exn", 3425), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Module"), "t"), [((("a")), 100000000, 0, -1052); ((("cmp")), 100000000, 0, -1054)], (0)), 100000000, 0, -1057), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("a")), 100000000, 0, -1052); ((("b")), 100000000, 0, -1053)]), 100000000, 0, -1056)], (0)), 100000000, 0, -1055), (Tag3 ((("t", 3412)), [((("a")), 100000000, 0, -1052); ((("b")), 100000000, 0, -1053); ((("cmp")), 100000000, 0, -1054)], (0)), 100000000, 0, -1051), 0), 100000000, 0, -1050), 0), 100000000, 0, -1049), 0, (("src/map_intf.ml", 1109, 33093, 33095), ("src/map_intf.ml", 1109, 33093, 33182), 0), 0, Tag1 ("Base__Map_intf", 387)), 0); (("of_alist_multi", 3426), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Module"), "t"), [((("a")), 100000000, 0, -1042); ((("cmp")), 100000000, 0, -1045)], (0)), 100000000, 0, -1048), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("a")), 100000000, 0, -1042); ((("b")), 100000000, 0, -1044)]), 100000000, 0, -1047)], (0)), 100000000, 0, -1046), (Tag3 ((("t", 3412)), [((("a")), 100000000, 0, -1042); (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -1044)], (0)), 100000000, 0, -1043); ((("cmp")), 100000000, 0, -1045)], (0)), 100000000, 0, -1041), 0), 100000000, 0, -1040), 0), 100000000, 0, -1039), 0, (("src/map_intf.ml", 1114, 33373, 33375), ("src/map_intf.ml", 1117, 33454, 33482), 0), 0, Tag1 ("Base__Map_intf", 388)), 0); (("of_alist_fold", 3427), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Module"), "t"), [((("a")), 100000000, 0, -1030); ((("cmp")), 100000000, 0, -1032)], (0)), 100000000, 0, -1038), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("a")), 100000000, 0, -1030); ((("b")), 100000000, 0, -1035)]), 100000000, 0, -1037)], (0)), 100000000, 0, -1036), (Tag1 (("init"), ((("c")), 100000000, 0, -1031), (Tag1 (("f"), (Tag1 (0, ((("c")), 100000000, 0, -1031), (Tag1 (0, ((("b")), 100000000, 0, -1035), ((("c")), 100000000, 0, -1031), 0), 100000000, 0, -1034), 0), 100000000, 0, -1033), (Tag3 ((("t", 3412)), [((("a")), 100000000, 0, -1030); ((("c")), 100000000, 0, -1031); ((("cmp")), 100000000, 0, -1032)], (0)), 100000000, 0, -1029), 0), 100000000, 0, -1028), 0), 100000000, 0, -1027), 0), 100000000, 0, -1026), 0), 100000000, 0, -1025), 0, (("src/map_intf.ml", 1135, 33972, 33974), ("src/map_intf.ml", 1140, 34103, 34126), 0), 0, Tag1 ("Base__Map_intf", 389)), 0); (("of_alist_reduce", 3428), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Module"), "t"), [((("a")), 100000000, 0, -1017); ((("cmp")), 100000000, 0, -1019)], (0)), 100000000, 0, -1024), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("a")), 100000000, 0, -1017); ((("b")), 100000000, 0, -1018)]), 100000000, 0, -1023)], (0)), 100000000, 0, -1022), (Tag1 (("f"), (Tag1 (0, ((("b")), 100000000, 0, -1018), (Tag1 (0, ((("b")), 100000000, 0, -1018), ((("b")), 100000000, 0, -1018), 0), 100000000, 0, -1021), 0), 100000000, 0, -1020), (Tag3 ((("t", 3412)), [((("a")), 100000000, 0, -1017); ((("b")), 100000000, 0, -1018); ((("cmp")), 100000000, 0, -1019)], (0)), 100000000, 0, -1016), 0), 100000000, 0, -1015), 0), 100000000, 0, -1014), 0), 100000000, 0, -1013), 0, (("src/map_intf.ml", 1144, 34233, 34235), ("src/map_intf.ml", 1148, 34351, 34374), 0), 0, Tag1 ("Base__Map_intf", 390)), 0); (("of_iteri", 3429), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Module"), "t"), [((("a")), 100000000, 0, -1004); ((("cmp")), 100000000, 0, -1006)], (0)), 100000000, 0, -1012), (Tag1 (("iteri"), (Tag1 (("f"), (Tag1 (("key"), ((("a")), 100000000, 0, -1004), (Tag1 (("data"), ((("b")), 100000000, 0, -1005), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1011), 0), 100000000, 0, -1010), 0), 100000000, 0, -1009), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1008), 0), 100000000, 0, -1007), (Tag8 (([("Duplicate_key", ((((("a")), 100000000, 0, -1004)))); ("Ok", (((Tag3 ((("t", 3412)), [((("a")), 100000000, 0, -1004); ((("b")), 100000000, 0, -1005); ((("cmp")), 100000000, 0, -1006)], (0)), 100000000, 0, -1003))))], (0, 100000000, 0, -1002), 1, 0, 0)), 100000000, 0, -1001), 0), 100000000, 0, -1000), 0), 100000000, 0, -999), 0, (("src/map_intf.ml", 1154, 34692, 34694), ("src/map_intf.ml", 1157, 34818, 34875), 0), 0, Tag1 ("Base__Map_intf", 391)), 0); (("of_iteri_exn", 3430), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Module"), "t"), [((("a")), 100000000, 0, -990); ((("cmp")), 100000000, 0, -992)], (0)), 100000000, 0, -998), (Tag1 (("iteri"), (Tag1 (("f"), (Tag1 (("key"), ((("a")), 100000000, 0, -990), (Tag1 (("data"), ((("b")), 100000000, 0, -991), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -997), 0), 100000000, 0, -996), 0), 100000000, 0, -995), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -994), 0), 100000000, 0, -993), (Tag3 ((("t", 3412)), [((("a")), 100000000, 0, -990); ((("b")), 100000000, 0, -991); ((("cmp")), 100000000, 0, -992)], (0)), 100000000, 0, -989), 0), 100000000, 0, -988), 0), 100000000, 0, -987), 0, (("src/map_intf.ml", 1160, 34971, 34973), ("src/map_intf.ml", 1163, 35101, 35124), 0), 0, Tag1 ("Base__Map_intf", 392)), 0); (("of_sorted_array", 3431), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Module"), "t"), [((("a")), 100000000, 0, -981); ((("cmp")), 100000000, 0, -983)], (0)), 100000000, 0, -986), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag2 ([((("a")), 100000000, 0, -981); ((("b")), 100000000, 0, -982)]), 100000000, 0, -985)], (0)), 100000000, 0, -984), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((("t", 3412)), [((("a")), 100000000, 0, -981); ((("b")), 100000000, 0, -982); ((("cmp")), 100000000, 0, -983)], (0)), 100000000, 0, -980)], (0)), 100000000, 0, -979), 0), 100000000, 0, -978), 0), 100000000, 0, -977), 0, (("src/map_intf.ml", 1169, 35422, 35424), ("src/map_intf.ml", 1172, 35505, 35539), 0), 0, Tag1 ("Base__Map_intf", 393)), 0); (("of_sorted_array_unchecked", 3432), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Module"), "t"), [((("a")), 100000000, 0, -971); ((("cmp")), 100000000, 0, -973)], (0)), 100000000, 0, -976), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag2 ([((("a")), 100000000, 0, -971); ((("b")), 100000000, 0, -972)]), 100000000, 0, -975)], (0)), 100000000, 0, -974), (Tag3 ((("t", 3412)), [((("a")), 100000000, 0, -971); ((("b")), 100000000, 0, -972); ((("cmp")), 100000000, 0, -973)], (0)), 100000000, 0, -970), 0), 100000000, 0, -969), 0), 100000000, 0, -968), 0, (("src/map_intf.ml", 1176, 35673, 35675), ("src/map_intf.ml", 1179, 35766, 35789), 0), 0, Tag1 ("Base__Map_intf", 394)), 0); (("of_increasing_iterator_unchecked", 3433), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Module"), "t"), [((("a")), 100000000, 0, -960); ((("cmp")), 100000000, 0, -962)], (0)), 100000000, 0, -967), (Tag1 (("len"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -966), (Tag1 (("f"), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -965), (Tag2 ([((("a")), 100000000, 0, -960); ((("b")), 100000000, 0, -961)]), 100000000, 0, -964), 0), 100000000, 0, -963), (Tag3 ((("t", 3412)), [((("a")), 100000000, 0, -960); ((("b")), 100000000, 0, -961); ((("cmp")), 100000000, 0, -962)], (0)), 100000000, 0, -959), 0), 100000000, 0, -958), 0), 100000000, 0, -957), 0), 100000000, 0, -956), 0, (("src/map_intf.ml", 1185, 36128, 36130), ("src/map_intf.ml", 1189, 36256, 36279), 0), 0, Tag1 ("Base__Map_intf", 395)), 0); (("of_increasing_sequence", 3434), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Module"), "t"), [((("k")), 100000000, 0, -950); ((("cmp")), 100000000, 0, -952)], (0)), 100000000, 0, -955), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag2 ([((("k")), 100000000, 0, -950); ((("v")), 100000000, 0, -951)]), 100000000, 0, -954)], (0)), 100000000, 0, -953), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -950); ((("v")), 100000000, 0, -951); ((("cmp")), 100000000, 0, -952)], (0)), 100000000, 0, -949)], (0)), 100000000, 0, -948), 0), 100000000, 0, -947), 0), 100000000, 0, -946), 0, (("src/map_intf.ml", 1196, 36527, 36529), ("src/map_intf.ml", 1199, 36622, 36656), 0), 0, Tag1 ("Base__Map_intf", 396)), 0); (("of_sequence", 3435), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Module"), "t"), [((("k")), 100000000, 0, -940); ((("cmp")), 100000000, 0, -942)], (0)), 100000000, 0, -945), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag2 ([((("k")), 100000000, 0, -940); ((("v")), 100000000, 0, -941)]), 100000000, 0, -944)], (0)), 100000000, 0, -943), (Tag8 (([("Duplicate_key", ((((("k")), 100000000, 0, -940)))); ("Ok", (((Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -940); ((("v")), 100000000, 0, -941); ((("cmp")), 100000000, 0, -942)], (0)), 100000000, 0, -939))))], (0, 100000000, 0, -938), 1, 0, 0)), 100000000, 0, -937), 0), 100000000, 0, -936), 0), 100000000, 0, -935), 0, (("src/map_intf.ml", 1208, 36926, 36928), ("src/map_intf.ml", 1211, 37010, 37067), 0), 0, Tag1 ("Base__Map_intf", 397)), 0); (("of_sequence_or_error", 3436), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Module"), "t"), [((("a")), 100000000, 0, -929); ((("cmp")), 100000000, 0, -931)], (0)), 100000000, 0, -934), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag2 ([((("a")), 100000000, 0, -929); ((("b")), 100000000, 0, -930)]), 100000000, 0, -933)], (0)), 100000000, 0, -932), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((("t", 3412)), [((("a")), 100000000, 0, -929); ((("b")), 100000000, 0, -930); ((("cmp")), 100000000, 0, -931)], (0)), 100000000, 0, -928)], (0)), 100000000, 0, -927), 0), 100000000, 0, -926), 0), 100000000, 0, -925), 0, (("src/map_intf.ml", 1219, 37345, 37347), ("src/map_intf.ml", 1222, 37438, 37472), 0), 0, Tag1 ("Base__Map_intf", 398)), 0); (("of_sequence_exn", 3437), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Module"), "t"), [((("a")), 100000000, 0, -919); ((("cmp")), 100000000, 0, -921)], (0)), 100000000, 0, -924), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag2 ([((("a")), 100000000, 0, -919); ((("b")), 100000000, 0, -920)]), 100000000, 0, -923)], (0)), 100000000, 0, -922), (Tag3 ((("t", 3412)), [((("a")), 100000000, 0, -919); ((("b")), 100000000, 0, -920); ((("cmp")), 100000000, 0, -921)], (0)), 100000000, 0, -918), 0), 100000000, 0, -917), 0), 100000000, 0, -916), 0, (("src/map_intf.ml", 1230, 37742, 37744), ("src/map_intf.ml", 1233, 37830, 37853), 0), 0, Tag1 ("Base__Map_intf", 399)), 0); (("of_sequence_multi", 3438), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Module"), "t"), [((("a")), 100000000, 0, -909); ((("cmp")), 100000000, 0, -912)], (0)), 100000000, 0, -915), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag2 ([((("a")), 100000000, 0, -909); ((("b")), 100000000, 0, -911)]), 100000000, 0, -914)], (0)), 100000000, 0, -913), (Tag3 ((("t", 3412)), [((("a")), 100000000, 0, -909); (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -911)], (0)), 100000000, 0, -910); ((("cmp")), 100000000, 0, -912)], (0)), 100000000, 0, -908), 0), 100000000, 0, -907), 0), 100000000, 0, -906), 0, (("src/map_intf.ml", 1242, 38187, 38189), ("src/map_intf.ml", 1245, 38277, 38305), 0), 0, Tag1 ("Base__Map_intf", 400)), 0); (("of_sequence_fold", 3439), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Module"), "t"), [((("a")), 100000000, 0, -897); ((("cmp")), 100000000, 0, -899)], (0)), 100000000, 0, -905), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag2 ([((("a")), 100000000, 0, -897); ((("b")), 100000000, 0, -902)]), 100000000, 0, -904)], (0)), 100000000, 0, -903), (Tag1 (("init"), ((("c")), 100000000, 0, -898), (Tag1 (("f"), (Tag1 (0, ((("c")), 100000000, 0, -898), (Tag1 (0, ((("b")), 100000000, 0, -902), ((("c")), 100000000, 0, -898), 0), 100000000, 0, -901), 0), 100000000, 0, -900), (Tag3 ((("t", 3412)), [((("a")), 100000000, 0, -897); ((("c")), 100000000, 0, -898); ((("cmp")), 100000000, 0, -899)], (0)), 100000000, 0, -896), 0), 100000000, 0, -895), 0), 100000000, 0, -894), 0), 100000000, 0, -893), 0), 100000000, 0, -892), 0, (("src/map_intf.ml", 1253, 38572, 38574), ("src/map_intf.ml", 1258, 38712, 38735), 0), 0, Tag1 ("Base__Map_intf", 401)), 0); (("of_sequence_reduce", 3440), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Module"), "t"), [((("a")), 100000000, 0, -884); ((("cmp")), 100000000, 0, -886)], (0)), 100000000, 0, -891), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag2 ([((("a")), 100000000, 0, -884); ((("b")), 100000000, 0, -885)]), 100000000, 0, -890)], (0)), 100000000, 0, -889), (Tag1 (("f"), (Tag1 (0, ((("b")), 100000000, 0, -885), (Tag1 (0, ((("b")), 100000000, 0, -885), ((("b")), 100000000, 0, -885), 0), 100000000, 0, -888), 0), 100000000, 0, -887), (Tag3 ((("t", 3412)), [((("a")), 100000000, 0, -884); ((("b")), 100000000, 0, -885); ((("cmp")), 100000000, 0, -886)], (0)), 100000000, 0, -883), 0), 100000000, 0, -882), 0), 100000000, 0, -881), 0), 100000000, 0, -880), 0, (("src/map_intf.ml", 1265, 38994, 38996), ("src/map_intf.ml", 1269, 39121, 39144), 0), 0, Tag1 ("Base__Map_intf", 402)), 0); (("of_list_with_key", 3441), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Module"), "t"), [((("k")), 100000000, 0, -874); ((("cmp")), 100000000, 0, -876)], (0)), 100000000, 0, -879), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -875)], (0)), 100000000, 0, -878), (Tag1 (("get_key"), (Tag1 (0, ((("v")), 100000000, 0, -875), ((("k")), 100000000, 0, -874), 0), 100000000, 0, -877), (Tag8 (([("Duplicate_key", ((((("k")), 100000000, 0, -874)))); ("Ok", (((Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -874); ((("v")), 100000000, 0, -875); ((("cmp")), 100000000, 0, -876)], (0)), 100000000, 0, -873))))], (0, 100000000, 0, -872), 1, 0, 0)), 100000000, 0, -871), 0), 100000000, 0, -870), 0), 100000000, 0, -869), 0), 100000000, 0, -868), 0, (("src/map_intf.ml", 1273, 39242, 39244), ("src/map_intf.ml", 1277, 39354, 39411), 0), 0, Tag1 ("Base__Map_intf", 403)), 0); (("of_list_with_key_or_error", 3442), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Module"), "t"), [((("k")), 100000000, 0, -862); ((("cmp")), 100000000, 0, -864)], (0)), 100000000, 0, -867), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -863)], (0)), 100000000, 0, -866), (Tag1 (("get_key"), (Tag1 (0, ((("v")), 100000000, 0, -863), ((("k")), 100000000, 0, -862), 0), 100000000, 0, -865), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -862); ((("v")), 100000000, 0, -863); ((("cmp")), 100000000, 0, -864)], (0)), 100000000, 0, -861)], (0)), 100000000, 0, -860), 0), 100000000, 0, -859), 0), 100000000, 0, -858), 0), 100000000, 0, -857), 0, (("src/map_intf.ml", 1280, 39481, 39483), ("src/map_intf.ml", 1284, 39602, 39636), 0), 0, Tag1 ("Base__Map_intf", 404)), 0); (("of_list_with_key_exn", 3443), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Module"), "t"), [((("k")), 100000000, 0, -851); ((("cmp")), 100000000, 0, -853)], (0)), 100000000, 0, -856), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -852)], (0)), 100000000, 0, -855), (Tag1 (("get_key"), (Tag1 (0, ((("v")), 100000000, 0, -852), ((("k")), 100000000, 0, -851), 0), 100000000, 0, -854), (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -851); ((("v")), 100000000, 0, -852); ((("cmp")), 100000000, 0, -853)], (0)), 100000000, 0, -850), 0), 100000000, 0, -849), 0), 100000000, 0, -848), 0), 100000000, 0, -847), 0, (("src/map_intf.ml", 1287, 39697, 39699), ("src/map_intf.ml", 1291, 39813, 39836), 0), 0, Tag1 ("Base__Map_intf", 405)), 0); (("of_list_with_key_multi", 3444), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Module"), "t"), [((("k")), 100000000, 0, -840); ((("cmp")), 100000000, 0, -843)], (0)), 100000000, 0, -846), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -842)], (0)), 100000000, 0, -845), (Tag1 (("get_key"), (Tag1 (0, ((("v")), 100000000, 0, -842), ((("k")), 100000000, 0, -840), 0), 100000000, 0, -844), (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -840); (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -842)], (0)), 100000000, 0, -841); ((("cmp")), 100000000, 0, -843)], (0)), 100000000, 0, -839), 0), 100000000, 0, -838), 0), 100000000, 0, -837), 0), 100000000, 0, -836), 0, (("src/map_intf.ml", 1294, 39927, 39929), ("src/map_intf.ml", 1298, 40045, 40073), 0), 0, Tag1 ("Base__Map_intf", 406)), 0); (("is_empty", 3445), ((Tag1 (0, (Tag3 ((("t", 3412)), [((0), 100000000, 0, -833); ((0), 100000000, 0, -834); ((0), 100000000, 0, -835)], (0)), 100000000, 0, -832), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -831), 0), 100000000, 0, -830), 0, (("src/map_intf.ml", 1301, 40114, 40116), ("src/map_intf.ml", 1301, 40114, 40150), 0), 0, Tag1 ("Base__Map_intf", 407)), 0); (("length", 3446), ((Tag1 (0, (Tag3 ((("t", 3412)), [((0), 100000000, 0, -827); ((0), 100000000, 0, -828); ((0), 100000000, 0, -829)], (0)), 100000000, 0, -826), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -825), 0), 100000000, 0, -824), 0, (("src/map_intf.ml", 1305, 40255, 40257), ("src/map_intf.ml", 1305, 40255, 40288), 0), 0, Tag1 ("Base__Map_intf", 408)), 0); (("set", 3447), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -820); ((("v")), 100000000, 0, -821); ((("cmp")), 100000000, 0, -822)], (0)), 100000000, 0, -823), (Tag1 (("key"), ((("k")), 100000000, 0, -820), (Tag1 (("data"), ((("v")), 100000000, 0, -821), (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -820); ((("v")), 100000000, 0, -821); ((("cmp")), 100000000, 0, -822)], (0)), 100000000, 0, -819), 0), 100000000, 0, -818), 0), 100000000, 0, -817), 0), 100000000, 0, -816), 0, (("src/map_intf.ml", 1309, 40418, 40420), ("src/map_intf.ml", 1309, 40418, 40487), 0), 0, Tag1 ("Base__Map_intf", 409)), 0); (("add", 3448), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -812); ((("v")), 100000000, 0, -813); ((("cmp")), 100000000, 0, -814)], (0)), 100000000, 0, -815), (Tag1 (("key"), ((("k")), 100000000, 0, -812), (Tag1 (("data"), ((("v")), 100000000, 0, -813), (Tag3 (Tag1 ((("Or_duplicate", 3413)), "t"), [(Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -812); ((("v")), 100000000, 0, -813); ((("cmp")), 100000000, 0, -814)], (0)), 100000000, 0, -811)], (0)), 100000000, 0, -810), 0), 100000000, 0, -809), 0), 100000000, 0, -808), 0), 100000000, 0, -807), 0, (("src/map_intf.ml", 1313, 40668, 40670), ("src/map_intf.ml", 1313, 40668, 40752), 0), 0, Tag1 ("Base__Map_intf", 410)), 0); (("add_exn", 3449), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -803); ((("v")), 100000000, 0, -804); ((("cmp")), 100000000, 0, -805)], (0)), 100000000, 0, -806), (Tag1 (("key"), ((("k")), 100000000, 0, -803), (Tag1 (("data"), ((("v")), 100000000, 0, -804), (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -803); ((("v")), 100000000, 0, -804); ((("cmp")), 100000000, 0, -805)], (0)), 100000000, 0, -802), 0), 100000000, 0, -801), 0), 100000000, 0, -800), 0), 100000000, 0, -799), 0, (("src/map_intf.ml", 1315, 40754, 40756), ("src/map_intf.ml", 1315, 40754, 40827), 0), 0, Tag1 ("Base__Map_intf", 411)), 0); (("add_multi", 3450), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -793); (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -795)], (0)), 100000000, 0, -798); ((("cmp")), 100000000, 0, -796)], (0)), 100000000, 0, -797), (Tag1 (("key"), ((("k")), 100000000, 0, -793), (Tag1 (("data"), ((("v")), 100000000, 0, -795), (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -793); (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -795)], (0)), 100000000, 0, -794); ((("cmp")), 100000000, 0, -796)], (0)), 100000000, 0, -792), 0), 100000000, 0, -791), 0), 100000000, 0, -790), 0), 100000000, 0, -789), 0, (("src/map_intf.ml", 1319, 40952, 40954), ("src/map_intf.ml", 1319, 40952, 41037), 0), 0, Tag1 ("Base__Map_intf", 412)), 0); (("remove_multi", 3451), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -783); (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -785)], (0)), 100000000, 0, -788); ((("cmp")), 100000000, 0, -786)], (0)), 100000000, 0, -787), (Tag1 (0, ((("k")), 100000000, 0, -783), (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -783); (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -785)], (0)), 100000000, 0, -784); ((("cmp")), 100000000, 0, -786)], (0)), 100000000, 0, -782), 0), 100000000, 0, -781), 0), 100000000, 0, -780), 0, (("src/map_intf.ml", 1323, 41147, 41149), ("src/map_intf.ml", 1323, 41147, 41220), 0), 0, Tag1 ("Base__Map_intf", 413)), 0); (("find_multi", 3452), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -776); (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -775)], (0)), 100000000, 0, -778); ((("cmp")), 100000000, 0, -779)], (0)), 100000000, 0, -777), (Tag1 (0, ((("k")), 100000000, 0, -776), (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -775)], (0)), 100000000, 0, -774), 0), 100000000, 0, -773), 0), 100000000, 0, -772), 0, (("src/map_intf.ml", 1326, 41309, 41311), ("src/map_intf.ml", 1326, 41309, 41366), 0), 0, Tag1 ("Base__Map_intf", 414)), 0); (("change", 3453), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -765); ((("v")), 100000000, 0, -766); ((("cmp")), 100000000, 0, -767)], (0)), 100000000, 0, -771), (Tag1 (0, ((("k")), 100000000, 0, -765), (Tag1 (("f"), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("v")), 100000000, 0, -766)], (0)), 100000000, 0, -770), (Tag3 ((Tag3 ("option", 10)), [((("v")), 100000000, 0, -766)], (0)), 100000000, 0, -769), 0), 100000000, 0, -768), (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -765); ((("v")), 100000000, 0, -766); ((("cmp")), 100000000, 0, -767)], (0)), 100000000, 0, -764), 0), 100000000, 0, -763), 0), 100000000, 0, -762), 0), 100000000, 0, -761), 0, (("src/map_intf.ml", 1331, 41565, 41567), ("src/map_intf.ml", 1335, 41656, 41679), 0), 0, Tag1 ("Base__Map_intf", 415)), 0); (("update", 3454), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -755); ((("v")), 100000000, 0, -756); ((("cmp")), 100000000, 0, -757)], (0)), 100000000, 0, -760), (Tag1 (0, ((("k")), 100000000, 0, -755), (Tag1 (("f"), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("v")), 100000000, 0, -756)], (0)), 100000000, 0, -759), ((("v")), 100000000, 0, -756), 0), 100000000, 0, -758), (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -755); ((("v")), 100000000, 0, -756); ((("cmp")), 100000000, 0, -757)], (0)), 100000000, 0, -754), 0), 100000000, 0, -753), 0), 100000000, 0, -752), 0), 100000000, 0, -751), 0, (("src/map_intf.ml", 1338, 41752, 41754), ("src/map_intf.ml", 1338, 41752, 41842), 0), 0, Tag1 ("Base__Map_intf", 416)), 0); (("find", 3455), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -748); ((("v")), 100000000, 0, -747); ((("cmp")), 100000000, 0, -750)], (0)), 100000000, 0, -749), (Tag1 (0, ((("k")), 100000000, 0, -748), (Tag3 ((Tag3 ("option", 10)), [((("v")), 100000000, 0, -747)], (0)), 100000000, 0, -746), 0), 100000000, 0, -745), 0), 100000000, 0, -744), 0, (("src/map_intf.ml", 1342, 41925, 41927), ("src/map_intf.ml", 1342, 41925, 41973), 0), 0, Tag1 ("Base__Map_intf", 417)), 0); (("find_exn", 3456), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -741); ((("v")), 100000000, 0, -740); ((("cmp")), 100000000, 0, -743)], (0)), 100000000, 0, -742), (Tag1 (0, ((("k")), 100000000, 0, -741), ((("v")), 100000000, 0, -740), 0), 100000000, 0, -739), 0), 100000000, 0, -738), 0, (("src/map_intf.ml", 1346, 42092, 42094), ("src/map_intf.ml", 1346, 42092, 42137), 0), 0, Tag1 ("Base__Map_intf", 418)), 0); (("remove", 3457), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -734); ((("v")), 100000000, 0, -735); ((("cmp")), 100000000, 0, -736)], (0)), 100000000, 0, -737), (Tag1 (0, ((("k")), 100000000, 0, -734), (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -734); ((("v")), 100000000, 0, -735); ((("cmp")), 100000000, 0, -736)], (0)), 100000000, 0, -733), 0), 100000000, 0, -732), 0), 100000000, 0, -731), 0, (("src/map_intf.ml", 1349, 42216, 42218), ("src/map_intf.ml", 1349, 42216, 42273), 0), 0, Tag1 ("Base__Map_intf", 419)), 0); (("mem", 3458), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -727); ((0), 100000000, 0, -729); ((("cmp")), 100000000, 0, -730)], (0)), 100000000, 0, -728), (Tag1 (0, ((("k")), 100000000, 0, -727), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -726), 0), 100000000, 0, -725), 0), 100000000, 0, -724), 0, (("src/map_intf.ml", 1352, 42348, 42350), ("src/map_intf.ml", 1352, 42348, 42389), 0), 0, Tag1 ("Base__Map_intf", 420)), 0); (("iter_keys", 3459), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -720); ((0), 100000000, 0, -722); ((0), 100000000, 0, -723)], (0)), 100000000, 0, -721), (Tag1 (("f"), (Tag1 (0, ((("k")), 100000000, 0, -720), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -719), 0), 100000000, 0, -718), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -717), 0), 100000000, 0, -716), 0), 100000000, 0, -715), 0, (("src/map_intf.ml", 1354, 42391, 42393), ("src/map_intf.ml", 1354, 42391, 42457), 0), 0, Tag1 ("Base__Map_intf", 421)), 0); (("iter", 3460), ((Tag1 (0, (Tag3 ((("t", 3412)), [((0), 100000000, 0, -713); ((("v")), 100000000, 0, -711); ((0), 100000000, 0, -714)], (0)), 100000000, 0, -712), (Tag1 (("f"), (Tag1 (0, ((("v")), 100000000, 0, -711), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -710), 0), 100000000, 0, -709), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -708), 0), 100000000, 0, -707), 0), 100000000, 0, -706), 0, (("src/map_intf.ml", 1355, 42458, 42460), ("src/map_intf.ml", 1355, 42458, 42519), 0), 0, Tag1 ("Base__Map_intf", 422)), 0); (("iteri", 3461), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -703); ((("v")), 100000000, 0, -702); ((0), 100000000, 0, -705)], (0)), 100000000, 0, -704), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -703), (Tag1 (("data"), ((("v")), 100000000, 0, -702), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -701), 0), 100000000, 0, -700), 0), 100000000, 0, -699), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -698), 0), 100000000, 0, -697), 0), 100000000, 0, -696), 0, (("src/map_intf.ml", 1356, 42520, 42522), ("src/map_intf.ml", 1356, 42520, 42598), 0), 0, Tag1 ("Base__Map_intf", 423)), 0); (("iteri_until", 3462), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -693); ((("v")), 100000000, 0, -692); ((0), 100000000, 0, -695)], (0)), 100000000, 0, -694), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -693), (Tag1 (("data"), ((("v")), 100000000, 0, -692), (Tag3 (Tag1 ((("Continue_or_stop", 3414)), "t"), 0, (0)), 100000000, 0, -691), 0), 100000000, 0, -690), 0), 100000000, 0, -689), (Tag3 (Tag1 ((("Finished_or_unfinished", 3415)), "t"), 0, (0)), 100000000, 0, -688), 0), 100000000, 0, -687), 0), 100000000, 0, -686), 0, (("src/map_intf.ml", 1360, 42765, 42767), ("src/map_intf.ml", 1363, 42865, 42896), 0), 0, Tag1 ("Base__Map_intf", 424)), 0); (("iter2", 3463), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -682); ((("v1")), 100000000, 0, -680); ((("cmp")), 100000000, 0, -684)], (0)), 100000000, 0, -685), (Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -682); ((("v2")), 100000000, 0, -681); ((("cmp")), 100000000, 0, -684)], (0)), 100000000, 0, -683), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -682), (Tag1 (("data"), (Tag3 (Tag1 ((("Merge_element", 3416)), "t"), [((("v1")), 100000000, 0, -680); ((("v2")), 100000000, 0, -681)], (0)), 100000000, 0, -679), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -678), 0), 100000000, 0, -677), 0), 100000000, 0, -676), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -675), 0), 100000000, 0, -674), 0), 100000000, 0, -673), 0), 100000000, 0, -672), 0, (("src/map_intf.ml", 1368, 43134, 43136), ("src/map_intf.ml", 1372, 43267, 43278), 0), 0, Tag1 ("Base__Map_intf", 425)), 0); (("map", 3464), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -666); ((("v1")), 100000000, 0, -670); ((("cmp")), 100000000, 0, -668)], (0)), 100000000, 0, -671), (Tag1 (("f"), (Tag1 (0, ((("v1")), 100000000, 0, -670), ((("v2")), 100000000, 0, -667), 0), 100000000, 0, -669), (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -666); ((("v2")), 100000000, 0, -667); ((("cmp")), 100000000, 0, -668)], (0)), 100000000, 0, -665), 0), 100000000, 0, -664), 0), 100000000, 0, -663), 0, (("src/map_intf.ml", 1375, 43369, 43371), ("src/map_intf.ml", 1375, 43369, 43447), 0), 0, Tag1 ("Base__Map_intf", 426)), 0); (("mapi", 3465), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -656); ((("v1")), 100000000, 0, -661); ((("cmp")), 100000000, 0, -658)], (0)), 100000000, 0, -662), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -656), (Tag1 (("data"), ((("v1")), 100000000, 0, -661), ((("v2")), 100000000, 0, -657), 0), 100000000, 0, -660), 0), 100000000, 0, -659), (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -656); ((("v2")), 100000000, 0, -657); ((("cmp")), 100000000, 0, -658)], (0)), 100000000, 0, -655), 0), 100000000, 0, -654), 0), 100000000, 0, -653), 0, (("src/map_intf.ml", 1378, 43536, 43538), ("src/map_intf.ml", 1381, 43619, 43643), 0), 0, Tag1 ("Base__Map_intf", 427)), 0); (("map_keys", 3466), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Module"), "t"), [((("k2")), 100000000, 0, -645); ((("cmp2")), 100000000, 0, -647)], (0)), 100000000, 0, -652), (Tag1 (0, (Tag3 ((("t", 3412)), [((("k1")), 100000000, 0, -649); ((("v")), 100000000, 0, -646); ((("cmp1")), 100000000, 0, -651)], (0)), 100000000, 0, -650), (Tag1 (("f"), (Tag1 (0, ((("k1")), 100000000, 0, -649), ((("k2")), 100000000, 0, -645), 0), 100000000, 0, -648), (Tag8 (([("Duplicate_key", ((((("k2")), 100000000, 0, -645)))); ("Ok", (((Tag3 ((("t", 3412)), [((("k2")), 100000000, 0, -645); ((("v")), 100000000, 0, -646); ((("cmp2")), 100000000, 0, -647)], (0)), 100000000, 0, -644))))], (0, 100000000, 0, -643), 1, 0, 0)), 100000000, 0, -642), 0), 100000000, 0, -641), 0), 100000000, 0, -640), 0), 100000000, 0, -639), 0, (("src/map_intf.ml", 1384, 43734, 43736), ("src/map_intf.ml", 1388, 43847, 43907), 0), 0, Tag1 ("Base__Map_intf", 428)), 0); (("map_keys_exn", 3467), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Module"), "t"), [((("k2")), 100000000, 0, -631); ((("cmp2")), 100000000, 0, -633)], (0)), 100000000, 0, -638), (Tag1 (0, (Tag3 ((("t", 3412)), [((("k1")), 100000000, 0, -635); ((("v")), 100000000, 0, -632); ((("cmp1")), 100000000, 0, -637)], (0)), 100000000, 0, -636), (Tag1 (("f"), (Tag1 (0, ((("k1")), 100000000, 0, -635), ((("k2")), 100000000, 0, -631), 0), 100000000, 0, -634), (Tag3 ((("t", 3412)), [((("k2")), 100000000, 0, -631); ((("v")), 100000000, 0, -632); ((("cmp2")), 100000000, 0, -633)], (0)), 100000000, 0, -630), 0), 100000000, 0, -629), 0), 100000000, 0, -628), 0), 100000000, 0, -627), 0, (("src/map_intf.ml", 1391, 43964, 43966), ("src/map_intf.ml", 1395, 44081, 44106), 0), 0, Tag1 ("Base__Map_intf", 429)), 0); (("fold", 3468), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -624); ((("v")), 100000000, 0, -623); ((0), 100000000, 0, -626)], (0)), 100000000, 0, -625), (Tag1 (("init"), ((("acc")), 100000000, 0, -619), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -624), (Tag1 (("data"), ((("v")), 100000000, 0, -623), (Tag1 (0, ((("acc")), 100000000, 0, -619), ((("acc")), 100000000, 0, -619), 0), 100000000, 0, -622), 0), 100000000, 0, -621), 0), 100000000, 0, -620), ((("acc")), 100000000, 0, -619), 0), 100000000, 0, -618), 0), 100000000, 0, -617), 0), 100000000, 0, -616), 0, (("src/map_intf.ml", 1398, 44183, 44185), ("src/map_intf.ml", 1402, 44287, 44298), 0), 0, Tag1 ("Base__Map_intf", 430)), 0); (("fold_until", 3469), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -613); ((("v")), 100000000, 0, -612); ((0), 100000000, 0, -615)], (0)), 100000000, 0, -614), (Tag1 (("init"), ((("acc")), 100000000, 0, -607), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -613), (Tag1 (("data"), ((("v")), 100000000, 0, -612), (Tag1 (0, ((("acc")), 100000000, 0, -607), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Container"), "Continue_or_stop"), "t"), [((("acc")), 100000000, 0, -607); ((("final")), 100000000, 0, -605)], (0)), 100000000, 0, -611), 0), 100000000, 0, -610), 0), 100000000, 0, -609), 0), 100000000, 0, -608), (Tag1 (("finish"), (Tag1 (0, ((("acc")), 100000000, 0, -607), ((("final")), 100000000, 0, -605), 0), 100000000, 0, -606), ((("final")), 100000000, 0, -605), 0), 100000000, 0, -604), 0), 100000000, 0, -603), 0), 100000000, 0, -602), 0), 100000000, 0, -601), 0, (("src/map_intf.ml", 1408, 44647, 44649), ("src/map_intf.ml", 1415, 44858, 44871), 0), 0, Tag1 ("Base__Map_intf", 431)), 0); (("fold_right", 3470), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -598); ((("v")), 100000000, 0, -597); ((0), 100000000, 0, -600)], (0)), 100000000, 0, -599), (Tag1 (("init"), ((("acc")), 100000000, 0, -593), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -598), (Tag1 (("data"), ((("v")), 100000000, 0, -597), (Tag1 (0, ((("acc")), 100000000, 0, -593), ((("acc")), 100000000, 0, -593), 0), 100000000, 0, -596), 0), 100000000, 0, -595), 0), 100000000, 0, -594), ((("acc")), 100000000, 0, -593), 0), 100000000, 0, -592), 0), 100000000, 0, -591), 0), 100000000, 0, -590), 0, (("src/map_intf.ml", 1418, 44948, 44950), ("src/map_intf.ml", 1422, 45058, 45069), 0), 0, Tag1 ("Base__Map_intf", 432)), 0); (("fold2", 3471), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -586); ((("v1")), 100000000, 0, -584); ((("cmp")), 100000000, 0, -588)], (0)), 100000000, 0, -589), (Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -586); ((("v2")), 100000000, 0, -585); ((("cmp")), 100000000, 0, -588)], (0)), 100000000, 0, -587), (Tag1 (("init"), ((("acc")), 100000000, 0, -579), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -586), (Tag1 (("data"), (Tag3 (Tag1 ((("Merge_element", 3416)), "t"), [((("v1")), 100000000, 0, -584); ((("v2")), 100000000, 0, -585)], (0)), 100000000, 0, -583), (Tag1 (0, ((("acc")), 100000000, 0, -579), ((("acc")), 100000000, 0, -579), 0), 100000000, 0, -582), 0), 100000000, 0, -581), 0), 100000000, 0, -580), ((("acc")), 100000000, 0, -579), 0), 100000000, 0, -578), 0), 100000000, 0, -577), 0), 100000000, 0, -576), 0), 100000000, 0, -575), 0, (("src/map_intf.ml", 1425, 45128, 45130), ("src/map_intf.ml", 1430, 45286, 45297), 0), 0, Tag1 ("Base__Map_intf", 433)), 0); (("filter_keys", 3472), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -569); ((("v")), 100000000, 0, -570); ((("cmp")), 100000000, 0, -571)], (0)), 100000000, 0, -574), (Tag1 (("f"), (Tag1 (0, ((("k")), 100000000, 0, -569), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -573), 0), 100000000, 0, -572), (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -569); ((("v")), 100000000, 0, -570); ((("cmp")), 100000000, 0, -571)], (0)), 100000000, 0, -568), 0), 100000000, 0, -567), 0), 100000000, 0, -566), 0, (("src/map_intf.ml", 1440, 45757, 45759), ("src/map_intf.ml", 1440, 45757, 45841), 0), 0, Tag1 ("Base__Map_intf", 434)), 0); (("filter", 3473), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -560); ((("v")), 100000000, 0, -561); ((("cmp")), 100000000, 0, -562)], (0)), 100000000, 0, -565), (Tag1 (("f"), (Tag1 (0, ((("v")), 100000000, 0, -561), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -564), 0), 100000000, 0, -563), (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -560); ((("v")), 100000000, 0, -561); ((("cmp")), 100000000, 0, -562)], (0)), 100000000, 0, -559), 0), 100000000, 0, -558), 0), 100000000, 0, -557), 0, (("src/map_intf.ml", 1442, 45843, 45845), ("src/map_intf.ml", 1442, 45843, 45922), 0), 0, Tag1 ("Base__Map_intf", 435)), 0); (("filteri", 3474), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -550); ((("v")), 100000000, 0, -551); ((("cmp")), 100000000, 0, -552)], (0)), 100000000, 0, -556), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -550), (Tag1 (("data"), ((("v")), 100000000, 0, -551), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -555), 0), 100000000, 0, -554), 0), 100000000, 0, -553), (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -550); ((("v")), 100000000, 0, -551); ((("cmp")), 100000000, 0, -552)], (0)), 100000000, 0, -549), 0), 100000000, 0, -548), 0), 100000000, 0, -547), 0, (("src/map_intf.ml", 1444, 45924, 45926), ("src/map_intf.ml", 1447, 46009, 46032), 0), 0, Tag1 ("Base__Map_intf", 436)), 0); (("filter_map", 3475), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -540); ((("v1")), 100000000, 0, -545); ((("cmp")), 100000000, 0, -542)], (0)), 100000000, 0, -546), (Tag1 (("f"), (Tag1 (0, ((("v1")), 100000000, 0, -545), (Tag3 ((Tag3 ("option", 10)), [((("v2")), 100000000, 0, -541)], (0)), 100000000, 0, -544), 0), 100000000, 0, -543), (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -540); ((("v2")), 100000000, 0, -541); ((("cmp")), 100000000, 0, -542)], (0)), 100000000, 0, -539), 0), 100000000, 0, -538), 0), 100000000, 0, -537), 0, (("src/map_intf.ml", 1450, 46124, 46126), ("src/map_intf.ml", 1453, 46205, 46229), 0), 0, Tag1 ("Base__Map_intf", 437)), 0); (("filter_mapi", 3476), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -529); ((("v1")), 100000000, 0, -535); ((("cmp")), 100000000, 0, -531)], (0)), 100000000, 0, -536), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -529), (Tag1 (("data"), ((("v1")), 100000000, 0, -535), (Tag3 ((Tag3 ("option", 10)), [((("v2")), 100000000, 0, -530)], (0)), 100000000, 0, -534), 0), 100000000, 0, -533), 0), 100000000, 0, -532), (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -529); ((("v2")), 100000000, 0, -530); ((("cmp")), 100000000, 0, -531)], (0)), 100000000, 0, -528), 0), 100000000, 0, -527), 0), 100000000, 0, -526), 0, (("src/map_intf.ml", 1457, 46331, 46333), ("src/map_intf.ml", 1460, 46428, 46452), 0), 0, Tag1 ("Base__Map_intf", 438)), 0); (("partition_mapi", 3477), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -516); ((("v1")), 100000000, 0, -524); ((("cmp")), 100000000, 0, -518)], (0)), 100000000, 0, -525), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -516), (Tag1 (("data"), ((("v1")), 100000000, 0, -524), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Either"), "t"), [((("v2")), 100000000, 0, -517); ((("v3")), 100000000, 0, -520)], (0)), 100000000, 0, -523), 0), 100000000, 0, -522), 0), 100000000, 0, -521), (Tag2 ([(Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -516); ((("v2")), 100000000, 0, -517); ((("cmp")), 100000000, 0, -518)], (0)), 100000000, 0, -515); (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -516); ((("v3")), 100000000, 0, -520); ((("cmp")), 100000000, 0, -518)], (0)), 100000000, 0, -519)]), 100000000, 0, -514), 0), 100000000, 0, -513), 0), 100000000, 0, -512), 0, (("src/map_intf.ml", 1464, 46614, 46616), ("src/map_intf.ml", 1467, 46723, 46767), 0), 0, Tag1 ("Base__Map_intf", 439)), 0); (("partition_map", 3478), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -503); ((("v1")), 100000000, 0, -510); ((("cmp")), 100000000, 0, -505)], (0)), 100000000, 0, -511), (Tag1 (("f"), (Tag1 (0, ((("v1")), 100000000, 0, -510), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Either"), "t"), [((("v2")), 100000000, 0, -504); ((("v3")), 100000000, 0, -507)], (0)), 100000000, 0, -509), 0), 100000000, 0, -508), (Tag2 ([(Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -503); ((("v2")), 100000000, 0, -504); ((("cmp")), 100000000, 0, -505)], (0)), 100000000, 0, -502); (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -503); ((("v3")), 100000000, 0, -507); ((("cmp")), 100000000, 0, -505)], (0)), 100000000, 0, -506)]), 100000000, 0, -501), 0), 100000000, 0, -500), 0), 100000000, 0, -499), 0, (("src/map_intf.ml", 1470, 46850, 46852), ("src/map_intf.ml", 1473, 46943, 46987), 0), 0, Tag1 ("Base__Map_intf", 440)), 0); (("partitioni_tf", 3479), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -491); ((("v")), 100000000, 0, -492); ((("cmp")), 100000000, 0, -493)], (0)), 100000000, 0, -498), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -491), (Tag1 (("data"), ((("v")), 100000000, 0, -492), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -497), 0), 100000000, 0, -496), 0), 100000000, 0, -495), (Tag2 ([(Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -491); ((("v")), 100000000, 0, -492); ((("cmp")), 100000000, 0, -493)], (0)), 100000000, 0, -490); (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -491); ((("v")), 100000000, 0, -492); ((("cmp")), 100000000, 0, -493)], (0)), 100000000, 0, -494)]), 100000000, 0, -489), 0), 100000000, 0, -488), 0), 100000000, 0, -487), 0, (("src/map_intf.ml", 1484, 47172, 47174), ("src/map_intf.ml", 1487, 47263, 47305), 0), 0, Tag1 ("Base__Map_intf", 441)), 0); (("partition_tf", 3480), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -480); ((("v")), 100000000, 0, -481); ((("cmp")), 100000000, 0, -482)], (0)), 100000000, 0, -486), (Tag1 (("f"), (Tag1 (0, ((("v")), 100000000, 0, -481), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -485), 0), 100000000, 0, -484), (Tag2 ([(Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -480); ((("v")), 100000000, 0, -481); ((("cmp")), 100000000, 0, -482)], (0)), 100000000, 0, -479); (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -480); ((("v")), 100000000, 0, -481); ((("cmp")), 100000000, 0, -482)], (0)), 100000000, 0, -483)]), 100000000, 0, -478), 0), 100000000, 0, -477), 0), 100000000, 0, -476), 0, (("src/map_intf.ml", 1490, 47386, 47388), ("src/map_intf.ml", 1493, 47461, 47503), 0), 0, Tag1 ("Base__Map_intf", 442)), 0); (("combine_errors", 3481), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -471); (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [((("v")), 100000000, 0, -472)], (0)), 100000000, 0, -475); ((("cmp")), 100000000, 0, -473)], (0)), 100000000, 0, -474), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -471); ((("v")), 100000000, 0, -472); ((("cmp")), 100000000, 0, -473)], (0)), 100000000, 0, -470)], (0)), 100000000, 0, -469), 0), 100000000, 0, -468), 0, (("src/map_intf.ml", 1497, 47629, 47631), ("src/map_intf.ml", 1497, 47629, 47710), 0), 0, Tag1 ("Base__Map_intf", 443)), 0); (("compare_direct", 3482), ((Tag1 (0, (Tag1 (0, ((("v")), 100000000, 0, -462), (Tag1 (0, ((("v")), 100000000, 0, -462), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -467), 0), 100000000, 0, -466), 0), 100000000, 0, -465), (Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -461); ((("v")), 100000000, 0, -462); ((("cmp")), 100000000, 0, -463)], (0)), 100000000, 0, -464), (Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -461); ((("v")), 100000000, 0, -462); ((("cmp")), 100000000, 0, -463)], (0)), 100000000, 0, -460), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -459), 0), 100000000, 0, -458), 0), 100000000, 0, -457), 0), 100000000, 0, -456), 0, (("src/map_intf.ml", 1501, 47870, 47872), ("src/map_intf.ml", 1501, 47870, 47957), 0), 0, Tag1 ("Base__Map_intf", 444)), 0); (("hash_fold_direct", 3483), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Hash"), "folder"), [((("k")), 100000000, 0, -451)], (0)), 100000000, 0, -455), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Hash"), "folder"), [((("v")), 100000000, 0, -452)], (0)), 100000000, 0, -454), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Hash"), "folder"), [(Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -451); ((("v")), 100000000, 0, -452); ((("cmp")), 100000000, 0, -453)], (0)), 100000000, 0, -450)], (0)), 100000000, 0, -449), 0), 100000000, 0, -448), 0), 100000000, 0, -447), 0, (("src/map_intf.ml", 1507, 48241, 48243), ("src/map_intf.ml", 1507, 48241, 48330), 0), 0, Tag1 ("Base__Map_intf", 445)), 0); (("equal", 3484), ((Tag1 (0, (Tag1 (0, ((("v")), 100000000, 0, -441), (Tag1 (0, ((("v")), 100000000, 0, -441), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -446), 0), 100000000, 0, -445), 0), 100000000, 0, -444), (Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -440); ((("v")), 100000000, 0, -441); ((("cmp")), 100000000, 0, -442)], (0)), 100000000, 0, -443), (Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -440); ((("v")), 100000000, 0, -441); ((("cmp")), 100000000, 0, -442)], (0)), 100000000, 0, -439), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -438), 0), 100000000, 0, -437), 0), 100000000, 0, -436), 0), 100000000, 0, -435), 0, (("src/map_intf.ml", 1512, 48580, 48582), ("src/map_intf.ml", 1512, 48580, 48660), 0), 0, Tag1 ("Base__Map_intf", 446)), 0); (("keys", 3485), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -431); ((0), 100000000, 0, -433); ((0), 100000000, 0, -434)], (0)), 100000000, 0, -432), (Tag3 ((Tag3 ("list", 9)), [((("k")), 100000000, 0, -431)], (0)), 100000000, 0, -430), 0), 100000000, 0, -429), 0, (("src/map_intf.ml", 1515, 48716, 48718), ("src/map_intf.ml", 1515, 48716, 48752), 0), 0, Tag1 ("Base__Map_intf", 447)), 0); (("data", 3486), ((Tag1 (0, (Tag3 ((("t", 3412)), [((0), 100000000, 0, -427); ((("v")), 100000000, 0, -425); ((0), 100000000, 0, -428)], (0)), 100000000, 0, -426), (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -425)], (0)), 100000000, 0, -424), 0), 100000000, 0, -423), 0, (("src/map_intf.ml", 1518, 48808, 48810), ("src/map_intf.ml", 1518, 48808, 48844), 0), 0, Tag1 ("Base__Map_intf", 448)), 0); (("to_alist", 3487), ((Tag1 (Tag1 ("key_order"), (Tag3 ((Tag3 ("option", 10)), [(Tag8 (([("Decreasing", (0)); ("Increasing", (0))], (0, 100000000, 0, -422), 1, 0, 0)), 100000000, 0, -421)], (0)), 100000000, 0, -420), (Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -416); ((("v")), 100000000, 0, -417); ((0), 100000000, 0, -419)], (0)), 100000000, 0, -418), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("k")), 100000000, 0, -416); ((("v")), 100000000, 0, -417)]), 100000000, 0, -415)], (0)), 100000000, 0, -414), 0), 100000000, 0, -413), 0), 100000000, 0, -412), 0, (("src/map_intf.ml", 1521, 48903, 48905), ("src/map_intf.ml", 1524, 49019, 49040), 0), 0, Tag1 ("Base__Map_intf", 449)), 0); (("merge", 3488), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -401); ((("v1")), 100000000, 0, -408); ((("cmp")), 100000000, 0, -403)], (0)), 100000000, 0, -411), (Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -401); ((("v2")), 100000000, 0, -409); ((("cmp")), 100000000, 0, -403)], (0)), 100000000, 0, -410), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -401), (Tag1 (0, (Tag3 (Tag1 ((("Merge_element", 3416)), "t"), [((("v1")), 100000000, 0, -408); ((("v2")), 100000000, 0, -409)], (0)), 100000000, 0, -407), (Tag3 ((Tag3 ("option", 10)), [((("v3")), 100000000, 0, -402)], (0)), 100000000, 0, -406), 0), 100000000, 0, -405), 0), 100000000, 0, -404), (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -401); ((("v3")), 100000000, 0, -402); ((("cmp")), 100000000, 0, -403)], (0)), 100000000, 0, -400), 0), 100000000, 0, -399), 0), 100000000, 0, -398), 0), 100000000, 0, -397), 0, (("src/map_intf.ml", 1530, 49257, 49259), ("src/map_intf.ml", 1534, 49391, 49415), 0), 0, Tag1 ("Base__Map_intf", 450)), 0); (("merge_skewed", 3489), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -389); ((("v")), 100000000, 0, -390); ((("cmp")), 100000000, 0, -391)], (0)), 100000000, 0, -396), (Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -389); ((("v")), 100000000, 0, -390); ((("cmp")), 100000000, 0, -391)], (0)), 100000000, 0, -395), (Tag1 (("combine"), (Tag1 (("key"), ((("k")), 100000000, 0, -389), (Tag1 (0, ((("v")), 100000000, 0, -390), (Tag1 (0, ((("v")), 100000000, 0, -390), ((("v")), 100000000, 0, -390), 0), 100000000, 0, -394), 0), 100000000, 0, -393), 0), 100000000, 0, -392), (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -389); ((("v")), 100000000, 0, -390); ((("cmp")), 100000000, 0, -391)], (0)), 100000000, 0, -388), 0), 100000000, 0, -387), 0), 100000000, 0, -386), 0), 100000000, 0, -385), 0, (("src/map_intf.ml", 1544, 50001, 50003), ("src/map_intf.ml", 1548, 50120, 50143), 0), 0, Tag1 ("Base__Map_intf", 451)), 0); Tag3 (("Symmetric_diff_element", 3490), 0, (Tag1 ([Tag1 (("t", 3563), ([((("k")), 100000000, 0, -1253); ((("v")), 100000000, 0, -1256)], 2, 0, 1, ((Tag2 ([((("k")), 100000000, 0, -1253); (Tag8 (([("Left", ((((("v")), 100000000, 0, -1256)))); ("Right", ((((("v")), 100000000, 0, -1256)))); ("Unequal", (((Tag2 ([((("v")), 100000000, 0, -1256); ((("v")), 100000000, 0, -1256)]), 100000000, 0, -1257))))], (0, 100000000, 0, -1255), 1, 0, 0)), 100000000, 0, -1254)]), 100000000, 0, -1252)), [25; 25], [0; 0], 0, 0, (("src/map_intf.ml", 1551, 50183, 50187), ("src/map_intf.ml", 1552, 50263, 50321), 0), [(("deriving_inline", (("src/map_intf.ml", 1552, 50263, 50270), ("src/map_intf.ml", 1552, 50263, 50285), 0)), ([([(Tag8 ([(((("compare"), (("src/map_intf.ml", 1552, 50263, 50286), ("src/map_intf.ml", 1552, 50263, 50293), 0))), (("src/map_intf.ml", 1552, 50263, 50286), ("src/map_intf.ml", 1552, 50263, 50293), 0), 0, 0); (((("equal"), (("src/map_intf.ml", 1552, 50263, 50295), ("src/map_intf.ml", 1552, 50263, 50300), 0))), (("src/map_intf.ml", 1552, 50263, 50295), ("src/map_intf.ml", 1552, 50263, 50300), 0), 0, 0); (((("sexp"), (("src/map_intf.ml", 1552, 50263, 50302), ("src/map_intf.ml", 1552, 50263, 50306), 0))), (("src/map_intf.ml", 1552, 50263, 50302), ("src/map_intf.ml", 1552, 50263, 50306), 0), 0, 0); (((("sexp_grammar"), (("src/map_intf.ml", 1552, 50263, 50308), ("src/map_intf.ml", 1552, 50263, 50320), 0))), (("src/map_intf.ml", 1552, 50263, 50308), ("src/map_intf.ml", 1552, 50263, 50320), 0), 0, 0)]), (("src/map_intf.ml", 1552, 50263, 50286), ("src/map_intf.ml", 1552, 50263, 50320), 0), 0, 0)], (("src/map_intf.ml", 1552, 50263, 50286), ("src/map_intf.ml", 1552, 50263, 50320), 0))]), (("src/map_intf.ml", 1552, 50263, 50267), ("src/map_intf.ml", 1552, 50263, 50321), 0))], 0, 0, Tag1 ("Base__Map_intf", 452)), 1, 0); (("compare", 3564), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "compare"), [((("a")), 100000000, 0, -1248)], (0)), 100000000, 0, -1251), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "compare"), [((("b")), 100000000, 0, -1249)], (0)), 100000000, 0, -1250), (Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "compare"), [(Tag3 ((("t", 3563)), [((("a")), 100000000, 0, -1248); ((("b")), 100000000, 0, -1249)], (0)), 100000000, 0, -1247)], (0)), 100000000, 0, -1246), 0), 100000000, 0, -1245), 0), 100000000, 0, -1244), 0, (("src/map_intf.ml", 1554, 50323, 50335), ("src/map_intf.ml", 1554, 50323, 50399), 0), 0, Tag1 ("Base__Ppx_compare_lib", 11)), 0); (("equal", 3565), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "equal"), [((("a")), 100000000, 0, -1240)], (0)), 100000000, 0, -1243), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "equal"), [((("b")), 100000000, 0, -1241)], (0)), 100000000, 0, -1242), (Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "equal"), [(Tag3 ((("t", 3563)), [((("a")), 100000000, 0, -1240); ((("b")), 100000000, 0, -1241)], (0)), 100000000, 0, -1239)], (0)), 100000000, 0, -1238), 0), 100000000, 0, -1237), 0), 100000000, 0, -1236), 0, (("src/map_intf.ml", 1555, 50400, 50412), ("src/map_intf.ml", 1555, 50400, 50471), 0), 0, Tag1 ("Base__Ppx_compare_lib", 24)), 0); (("t_of_sexp", 3566), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1235), ((("a")), 100000000, 0, -1229), 0), 100000000, 0, -1234), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1233), ((("b")), 100000000, 0, -1230), 0), 100000000, 0, -1232), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1231), (Tag3 ((("t", 3563)), [((("a")), 100000000, 0, -1229); ((("b")), 100000000, 0, -1230)], (0)), 100000000, 0, -1228), 0), 100000000, 0, -1227), 0), 100000000, 0, -1226), 0), 100000000, 0, -1225), 0, (("src/map_intf.ml", 1556, 50472, 50484), ("src/map_intf.ml", 1556, 50472, 50539), 0), 0, Tag1 ("Sexplib0__Sexpable", 9)), 0); (("sexp_of_t", 3567), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -1219), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1224), 0), 100000000, 0, -1223), (Tag1 (0, (Tag1 (0, ((("b")), 100000000, 0, -1220), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1222), 0), 100000000, 0, -1221), (Tag1 (0, (Tag3 ((("t", 3563)), [((("a")), 100000000, 0, -1219); ((("b")), 100000000, 0, -1220)], (0)), 100000000, 0, -1218), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1217), 0), 100000000, 0, -1216), 0), 100000000, 0, -1215), 0), 100000000, 0, -1214), 0, (("src/map_intf.ml", 1556, 50472, 50484), ("src/map_intf.ml", 1556, 50472, 50539), 0), 0, Tag1 ("Sexplib0__Sexpable", 10)), 0); (("t_sexp_grammar", 3568), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [((("k")), 100000000, 0, -1210)], (0)), 100000000, 0, -1213), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [((("v")), 100000000, 0, -1211)], (0)), 100000000, 0, -1212), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("t", 3563)), [((("k")), 100000000, 0, -1210); ((("v")), 100000000, 0, -1211)], (0)), 100000000, 0, -1209)], (0)), 100000000, 0, -1208), 0), 100000000, 0, -1207), 0), 100000000, 0, -1206), 0, (("src/map_intf.ml", 1558, 50541, 50545), ("src/map_intf.ml", 1561, 50636, 50679), 0), 0, Tag1 ("Base__Map_intf", 456)), 0)]), 0, (("src/map_intf.ml", 1550, 50145, 50147), ("src/map_intf.ml", 1564, 50694, 50699), 0), Tag1 ("Base__Map_intf", 457)), 0, 0); (("symmetric_diff", 3491), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -377); ((("v")), 100000000, 0, -378); ((("cmp")), 100000000, 0, -383)], (0)), 100000000, 0, -384), (Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -377); ((("v")), 100000000, 0, -378); ((("cmp")), 100000000, 0, -383)], (0)), 100000000, 0, -382), (Tag1 (("data_equal"), (Tag1 (0, ((("v")), 100000000, 0, -378), (Tag1 (0, ((("v")), 100000000, 0, -378), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -381), 0), 100000000, 0, -380), 0), 100000000, 0, -379), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag3 (Tag1 ((("Symmetric_diff_element", 3490)), "t"), [((("k")), 100000000, 0, -377); ((("v")), 100000000, 0, -378)], (0)), 100000000, 0, -376)], (0)), 100000000, 0, -375), 0), 100000000, 0, -374), 0), 100000000, 0, -373), 0), 100000000, 0, -372), 0, (("src/map_intf.ml", 1578, 51519, 51521), ("src/map_intf.ml", 1582, 51625, 51676), 0), 0, Tag1 ("Base__Map_intf", 458)), 0); (("fold_symmetric_diff", 3492), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -364); ((("v")), 100000000, 0, -365); ((("cmp")), 100000000, 0, -370)], (0)), 100000000, 0, -371), (Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -364); ((("v")), 100000000, 0, -365); ((("cmp")), 100000000, 0, -370)], (0)), 100000000, 0, -369), (Tag1 (("data_equal"), (Tag1 (0, ((("v")), 100000000, 0, -365), (Tag1 (0, ((("v")), 100000000, 0, -365), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -368), 0), 100000000, 0, -367), 0), 100000000, 0, -366), (Tag1 (("init"), ((("acc")), 100000000, 0, -360), (Tag1 (("f"), (Tag1 (0, ((("acc")), 100000000, 0, -360), (Tag1 (0, (Tag3 (Tag1 ((("Symmetric_diff_element", 3490)), "t"), [((("k")), 100000000, 0, -364); ((("v")), 100000000, 0, -365)], (0)), 100000000, 0, -363), ((("acc")), 100000000, 0, -360), 0), 100000000, 0, -362), 0), 100000000, 0, -361), ((("acc")), 100000000, 0, -360), 0), 100000000, 0, -359), 0), 100000000, 0, -358), 0), 100000000, 0, -357), 0), 100000000, 0, -356), 0), 100000000, 0, -355), 0, (("src/map_intf.ml", 1587, 51918, 51920), ("src/map_intf.ml", 1593, 52127, 52138), 0), 0, Tag1 ("Base__Map_intf", 459)), 0); (("min_elt", 3493), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -351); ((("v")), 100000000, 0, -352); ((0), 100000000, 0, -354)], (0)), 100000000, 0, -353), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([((("k")), 100000000, 0, -351); ((("v")), 100000000, 0, -352)]), 100000000, 0, -350)], (0)), 100000000, 0, -349), 0), 100000000, 0, -348), 0, (("src/map_intf.ml", 1597, 52264, 52266), ("src/map_intf.ml", 1597, 52264, 52313), 0), 0, Tag1 ("Base__Map_intf", 460)), 0); (("min_elt_exn", 3494), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -344); ((("v")), 100000000, 0, -345); ((0), 100000000, 0, -347)], (0)), 100000000, 0, -346), (Tag2 ([((("k")), 100000000, 0, -344); ((("v")), 100000000, 0, -345)]), 100000000, 0, -343), 0), 100000000, 0, -342), 0, (("src/map_intf.ml", 1599, 52315, 52317), ("src/map_intf.ml", 1599, 52315, 52359), 0), 0, Tag1 ("Base__Map_intf", 461)), 0); (("max_elt", 3495), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -338); ((("v")), 100000000, 0, -339); ((0), 100000000, 0, -341)], (0)), 100000000, 0, -340), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([((("k")), 100000000, 0, -338); ((("v")), 100000000, 0, -339)]), 100000000, 0, -337)], (0)), 100000000, 0, -336), 0), 100000000, 0, -335), 0, (("src/map_intf.ml", 1603, 52494, 52496), ("src/map_intf.ml", 1603, 52494, 52543), 0), 0, Tag1 ("Base__Map_intf", 462)), 0); (("max_elt_exn", 3496), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -331); ((("v")), 100000000, 0, -332); ((0), 100000000, 0, -334)], (0)), 100000000, 0, -333), (Tag2 ([((("k")), 100000000, 0, -331); ((("v")), 100000000, 0, -332)]), 100000000, 0, -330), 0), 100000000, 0, -329), 0, (("src/map_intf.ml", 1605, 52545, 52547), ("src/map_intf.ml", 1605, 52545, 52589), 0), 0, Tag1 ("Base__Map_intf", 463)), 0); (("transpose_keys", 3497), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Module"), "t"), [((("k2")), 100000000, 0, -320); ((("cmp2")), 100000000, 0, -325)], (0)), 100000000, 0, -328), (Tag1 (0, (Tag3 ((("t", 3412)), [((("k1")), 100000000, 0, -322); (Tag3 ((("t", 3412)), [((("k2")), 100000000, 0, -320); ((("v")), 100000000, 0, -323); ((("cmp2")), 100000000, 0, -325)], (0)), 100000000, 0, -327); ((("cmp1")), 100000000, 0, -324)], (0)), 100000000, 0, -326), (Tag3 ((("t", 3412)), [((("k2")), 100000000, 0, -320); (Tag3 ((("t", 3412)), [((("k1")), 100000000, 0, -322); ((("v")), 100000000, 0, -323); ((("cmp1")), 100000000, 0, -324)], (0)), 100000000, 0, -321); ((("cmp2")), 100000000, 0, -325)], (0)), 100000000, 0, -319), 0), 100000000, 0, -318), 0), 100000000, 0, -317), 0, (("src/map_intf.ml", 1609, 52743, 52745), ("src/map_intf.ml", 1612, 52846, 52887), 0), 0, Tag1 ("Base__Map_intf", 464)), 0); (("for_all", 3498), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -315); ((("v")), 100000000, 0, -313); ((0), 100000000, 0, -316)], (0)), 100000000, 0, -314), (Tag1 (("f"), (Tag1 (0, ((("v")), 100000000, 0, -313), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -312), 0), 100000000, 0, -311), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -310), 0), 100000000, 0, -309), 0), 100000000, 0, -308), 0, (("src/map_intf.ml", 1616, 52971, 52973), ("src/map_intf.ml", 1616, 52971, 53036), 0), 0, Tag1 ("Base__Map_intf", 465)), 0); (("for_alli", 3499), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -305); ((("v")), 100000000, 0, -304); ((0), 100000000, 0, -307)], (0)), 100000000, 0, -306), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -305), (Tag1 (("data"), ((("v")), 100000000, 0, -304), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -303), 0), 100000000, 0, -302), 0), 100000000, 0, -301), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -300), 0), 100000000, 0, -299), 0), 100000000, 0, -298), 0, (("src/map_intf.ml", 1617, 53037, 53039), ("src/map_intf.ml", 1617, 53037, 53118), 0), 0, Tag1 ("Base__Map_intf", 466)), 0); (("exists", 3500), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -296); ((("v")), 100000000, 0, -294); ((0), 100000000, 0, -297)], (0)), 100000000, 0, -295), (Tag1 (("f"), (Tag1 (0, ((("v")), 100000000, 0, -294), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -293), 0), 100000000, 0, -292), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -291), 0), 100000000, 0, -290), 0), 100000000, 0, -289), 0, (("src/map_intf.ml", 1618, 53119, 53121), ("src/map_intf.ml", 1618, 53119, 53183), 0), 0, Tag1 ("Base__Map_intf", 467)), 0); (("existsi", 3501), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -286); ((("v")), 100000000, 0, -285); ((0), 100000000, 0, -288)], (0)), 100000000, 0, -287), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -286), (Tag1 (("data"), ((("v")), 100000000, 0, -285), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -284), 0), 100000000, 0, -283), 0), 100000000, 0, -282), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -281), 0), 100000000, 0, -280), 0), 100000000, 0, -279), 0, (("src/map_intf.ml", 1619, 53184, 53186), ("src/map_intf.ml", 1619, 53184, 53264), 0), 0, Tag1 ("Base__Map_intf", 468)), 0); (("count", 3502), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -277); ((("v")), 100000000, 0, -275); ((0), 100000000, 0, -278)], (0)), 100000000, 0, -276), (Tag1 (("f"), (Tag1 (0, ((("v")), 100000000, 0, -275), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -274), 0), 100000000, 0, -273), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -272), 0), 100000000, 0, -271), 0), 100000000, 0, -270), 0, (("src/map_intf.ml", 1620, 53265, 53267), ("src/map_intf.ml", 1620, 53265, 53327), 0), 0, Tag1 ("Base__Map_intf", 469)), 0); (("counti", 3503), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -267); ((("v")), 100000000, 0, -266); ((0), 100000000, 0, -269)], (0)), 100000000, 0, -268), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -267), (Tag1 (("data"), ((("v")), 100000000, 0, -266), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -265), 0), 100000000, 0, -264), 0), 100000000, 0, -263), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -262), 0), 100000000, 0, -261), 0), 100000000, 0, -260), 0, (("src/map_intf.ml", 1621, 53328, 53330), ("src/map_intf.ml", 1621, 53328, 53406), 0), 0, Tag1 ("Base__Map_intf", 470)), 0); (("split", 3504), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -253); ((("v")), 100000000, 0, -254); ((("cmp")), 100000000, 0, -255)], (0)), 100000000, 0, -259), (Tag1 (0, ((("k")), 100000000, 0, -253), (Tag2 ([(Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -253); ((("v")), 100000000, 0, -254); ((("cmp")), 100000000, 0, -255)], (0)), 100000000, 0, -252); (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([((("k")), 100000000, 0, -253); ((("v")), 100000000, 0, -254)]), 100000000, 0, -257)], (0)), 100000000, 0, -256); (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -253); ((("v")), 100000000, 0, -254); ((("cmp")), 100000000, 0, -255)], (0)), 100000000, 0, -258)]), 100000000, 0, -251), 0), 100000000, 0, -250), 0), 100000000, 0, -249), 0, (("src/map_intf.ml", 1630, 53778, 53780), ("src/map_intf.ml", 1633, 53824, 53885), 0), 0, Tag1 ("Base__Map_intf", 471)), 0); (("split_le_gt", 3505), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -244); ((("v")), 100000000, 0, -245); ((("cmp")), 100000000, 0, -246)], (0)), 100000000, 0, -248), (Tag1 (0, ((("k")), 100000000, 0, -244), (Tag2 ([(Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -244); ((("v")), 100000000, 0, -245); ((("cmp")), 100000000, 0, -246)], (0)), 100000000, 0, -243); (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -244); ((("v")), 100000000, 0, -245); ((("cmp")), 100000000, 0, -246)], (0)), 100000000, 0, -247)]), 100000000, 0, -242), 0), 100000000, 0, -241), 0), 100000000, 0, -240), 0, (("src/map_intf.ml", 1641, 54239, 54241), ("src/map_intf.ml", 1641, 54239, 54320), 0), 0, Tag1 ("Base__Map_intf", 472)), 0); (("split_lt_ge", 3506), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -235); ((("v")), 100000000, 0, -236); ((("cmp")), 100000000, 0, -237)], (0)), 100000000, 0, -239), (Tag1 (0, ((("k")), 100000000, 0, -235), (Tag2 ([(Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -235); ((("v")), 100000000, 0, -236); ((("cmp")), 100000000, 0, -237)], (0)), 100000000, 0, -234); (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -235); ((("v")), 100000000, 0, -236); ((("cmp")), 100000000, 0, -237)], (0)), 100000000, 0, -238)]), 100000000, 0, -233), 0), 100000000, 0, -232), 0), 100000000, 0, -231), 0, (("src/map_intf.ml", 1649, 54674, 54676), ("src/map_intf.ml", 1649, 54674, 54755), 0), 0, Tag1 ("Base__Map_intf", 473)), 0); (("append", 3507), ((Tag1 (("lower_part"), (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -226); ((("v")), 100000000, 0, -227); ((("cmp")), 100000000, 0, -228)], (0)), 100000000, 0, -230), (Tag1 (("upper_part"), (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -226); ((("v")), 100000000, 0, -227); ((("cmp")), 100000000, 0, -228)], (0)), 100000000, 0, -229), (Tag8 (([("Ok", (((Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -226); ((("v")), 100000000, 0, -227); ((("cmp")), 100000000, 0, -228)], (0)), 100000000, 0, -225)))); ("Overlapping_key_ranges", (0))], (0, 100000000, 0, -224), 1, 0, 0)), 100000000, 0, -223), 0), 100000000, 0, -222), 0), 100000000, 0, -221), 0, (("src/map_intf.ml", 1666, 55451, 55453), ("src/map_intf.ml", 1669, 55534, 55594), 0), 0, Tag1 ("Base__Map_intf", 474)), 0); (("subrange", 3508), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -215); ((("v")), 100000000, 0, -216); ((("cmp")), 100000000, 0, -217)], (0)), 100000000, 0, -220), (Tag1 (("lower_bound"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Maybe_bound"), "t"), [((("k")), 100000000, 0, -215)], (0)), 100000000, 0, -219), (Tag1 (("upper_bound"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Maybe_bound"), "t"), [((("k")), 100000000, 0, -215)], (0)), 100000000, 0, -218), (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -215); ((("v")), 100000000, 0, -216); ((("cmp")), 100000000, 0, -217)], (0)), 100000000, 0, -214), 0), 100000000, 0, -213), 0), 100000000, 0, -212), 0), 100000000, 0, -211), 0, (("src/map_intf.ml", 1678, 56038, 56040), ("src/map_intf.ml", 1682, 56149, 56172), 0), 0, Tag1 ("Base__Map_intf", 475)), 0); (("fold_range_inclusive", 3509), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -208); ((("v")), 100000000, 0, -207); ((("cmp")), 100000000, 0, -210)], (0)), 100000000, 0, -209), (Tag1 (("min"), ((("k")), 100000000, 0, -208), (Tag1 (("max"), ((("k")), 100000000, 0, -208), (Tag1 (("init"), ((("acc")), 100000000, 0, -203), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -208), (Tag1 (("data"), ((("v")), 100000000, 0, -207), (Tag1 (0, ((("acc")), 100000000, 0, -203), ((("acc")), 100000000, 0, -203), 0), 100000000, 0, -206), 0), 100000000, 0, -205), 0), 100000000, 0, -204), ((("acc")), 100000000, 0, -203), 0), 100000000, 0, -202), 0), 100000000, 0, -201), 0), 100000000, 0, -200), 0), 100000000, 0, -199), 0), 100000000, 0, -198), 0, (("src/map_intf.ml", 1687, 56371, 56373), ("src/map_intf.ml", 1693, 56522, 56533), 0), 0, Tag1 ("Base__Map_intf", 476)), 0); (("range_to_alist", 3510), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -194); ((("v")), 100000000, 0, -195); ((("cmp")), 100000000, 0, -197)], (0)), 100000000, 0, -196), (Tag1 (("min"), ((("k")), 100000000, 0, -194), (Tag1 (("max"), ((("k")), 100000000, 0, -194), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("k")), 100000000, 0, -194); ((("v")), 100000000, 0, -195)]), 100000000, 0, -193)], (0)), 100000000, 0, -192), 0), 100000000, 0, -191), 0), 100000000, 0, -190), 0), 100000000, 0, -189), 0, (("src/map_intf.ml", 1698, 56726, 56728), ("src/map_intf.ml", 1698, 56726, 56803), 0), 0, Tag1 ("Base__Map_intf", 477)), 0); (("closest_key", 3511), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -183); ((("v")), 100000000, 0, -184); ((("cmp")), 100000000, 0, -188)], (0)), 100000000, 0, -187), (Tag1 (0, (Tag8 (([("Greater_or_equal_to", (0)); ("Greater_than", (0)); ("Less_or_equal_to", (0)); ("Less_than", (0))], (0, 100000000, 0, -186), 1, 0, 0)), 100000000, 0, -185), (Tag1 (0, ((("k")), 100000000, 0, -183), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([((("k")), 100000000, 0, -183); ((("v")), 100000000, 0, -184)]), 100000000, 0, -182)], (0)), 100000000, 0, -181), 0), 100000000, 0, -180), 0), 100000000, 0, -179), 0), 100000000, 0, -178), 0, (("src/map_intf.ml", 1709, 57269, 57271), ("src/map_intf.ml", 1713, 57402, 57425), 0), 0, Tag1 ("Base__Map_intf", 478)), 0); (("nth", 3512), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -173); ((("v")), 100000000, 0, -174); ((0), 100000000, 0, -177)], (0)), 100000000, 0, -176), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -175), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([((("k")), 100000000, 0, -173); ((("v")), 100000000, 0, -174)]), 100000000, 0, -172)], (0)), 100000000, 0, -171), 0), 100000000, 0, -170), 0), 100000000, 0, -169), 0, (("src/map_intf.ml", 1717, 57610, 57612), ("src/map_intf.ml", 1717, 57610, 57662), 0), 0, Tag1 ("Base__Map_intf", 479)), 0); (("nth_exn", 3513), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -164); ((("v")), 100000000, 0, -165); ((0), 100000000, 0, -168)], (0)), 100000000, 0, -167), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -166), (Tag2 ([((("k")), 100000000, 0, -164); ((("v")), 100000000, 0, -165)]), 100000000, 0, -163), 0), 100000000, 0, -162), 0), 100000000, 0, -161), 0, (("src/map_intf.ml", 1719, 57664, 57666), ("src/map_intf.ml", 1719, 57664, 57711), 0), 0, Tag1 ("Base__Map_intf", 480)), 0); (("rank", 3514), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -157); ((("v")), 100000000, 0, -159); ((("cmp")), 100000000, 0, -160)], (0)), 100000000, 0, -158), (Tag1 (0, ((("k")), 100000000, 0, -157), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -156)], (0)), 100000000, 0, -155), 0), 100000000, 0, -154), 0), 100000000, 0, -153), 0, (("src/map_intf.ml", 1723, 57837, 57839), ("src/map_intf.ml", 1723, 57837, 57886), 0), 0, Tag1 ("Base__Map_intf", 481)), 0); (("to_sequence", 3515), ((Tag1 (Tag1 ("order"), (Tag3 ((Tag3 ("option", 10)), [(Tag8 (([("Decreasing_key", (0)); ("Increasing_key", (0))], (0, 100000000, 0, -152), 1, 0, 0)), 100000000, 0, -151)], (0)), 100000000, 0, -150), (Tag1 (Tag1 ("keys_greater_or_equal_to"), (Tag3 ((Tag3 ("option", 10)), [((("k")), 100000000, 0, -144)], (0)), 100000000, 0, -149), (Tag1 (Tag1 ("keys_less_or_equal_to"), (Tag3 ((Tag3 ("option", 10)), [((("k")), 100000000, 0, -144)], (0)), 100000000, 0, -148), (Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -144); ((("v")), 100000000, 0, -145); ((("cmp")), 100000000, 0, -147)], (0)), 100000000, 0, -146), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag2 ([((("k")), 100000000, 0, -144); ((("v")), 100000000, 0, -145)]), 100000000, 0, -143)], (0)), 100000000, 0, -142), 0), 100000000, 0, -141), 0), 100000000, 0, -140), 0), 100000000, 0, -139), 0), 100000000, 0, -138), 0, (("src/map_intf.ml", 1738, 58542, 58544), ("src/map_intf.ml", 1743, 58720, 58747), 0), 0, Tag1 ("Base__Map_intf", 482)), 0); (("binary_search", 3516), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -127); ((("v")), 100000000, 0, -128); ((("cmp")), 100000000, 0, -137)], (0)), 100000000, 0, -136), (Tag1 (("compare"), (Tag1 (("key"), ((("k")), 100000000, 0, -127), (Tag1 (("data"), ((("v")), 100000000, 0, -128), (Tag1 (0, ((("key")), 100000000, 0, -129), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -135), 0), 100000000, 0, -134), 0), 100000000, 0, -133), 0), 100000000, 0, -132), (Tag1 (0, (Tag8 (([("First_equal_to", (0)); ("First_greater_than_or_equal_to", (0)); ("First_strictly_greater_than", (0)); ("Last_equal_to", (0)); ("Last_less_than_or_equal_to", (0)); ("Last_strictly_less_than", (0))], (0, 100000000, 0, -131), 1, 0, 0)), 100000000, 0, -130), (Tag1 (0, ((("key")), 100000000, 0, -129), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([((("k")), 100000000, 0, -127); ((("v")), 100000000, 0, -128)]), 100000000, 0, -126)], (0)), 100000000, 0, -125), 0), 100000000, 0, -124), 0), 100000000, 0, -123), 0), 100000000, 0, -122), 0), 100000000, 0, -121), 0, (("src/map_intf.ml", 1761, 59448, 59450), ("src/map_intf.ml", 1772, 60101, 60124), 0), 0, Tag1 ("Base__Map_intf", 483)), 0); (("binary_search_segmented", 3517), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -111); ((("v")), 100000000, 0, -112); ((("cmp")), 100000000, 0, -120)], (0)), 100000000, 0, -119), (Tag1 (("segment_of"), (Tag1 (("key"), ((("k")), 100000000, 0, -111), (Tag1 (("data"), ((("v")), 100000000, 0, -112), (Tag8 (([("Left", (0)); ("Right", (0))], (0, 100000000, 0, -118), 1, 0, 0)), 100000000, 0, -117), 0), 100000000, 0, -116), 0), 100000000, 0, -115), (Tag1 (0, (Tag8 (([("First_on_right", (0)); ("Last_on_left", (0))], (0, 100000000, 0, -114), 1, 0, 0)), 100000000, 0, -113), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([((("k")), 100000000, 0, -111); ((("v")), 100000000, 0, -112)]), 100000000, 0, -110)], (0)), 100000000, 0, -109), 0), 100000000, 0, -108), 0), 100000000, 0, -107), 0), 100000000, 0, -106), 0, (("src/map_intf.ml", 1789, 60899, 60901), ("src/map_intf.ml", 1793, 61066, 61089), 0), 0, Tag1 ("Base__Map_intf", 484)), 0); (("binary_search_subrange", 3518), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -95); ((("v")), 100000000, 0, -96); ((("cmp")), 100000000, 0, -97)], (0)), 100000000, 0, -105), (Tag1 (("compare"), (Tag1 (("key"), ((("k")), 100000000, 0, -95), (Tag1 (("data"), ((("v")), 100000000, 0, -96), (Tag1 (0, ((("bound")), 100000000, 0, -99), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -104), 0), 100000000, 0, -103), 0), 100000000, 0, -102), 0), 100000000, 0, -101), (Tag1 (("lower_bound"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Maybe_bound"), "t"), [((("bound")), 100000000, 0, -99)], (0)), 100000000, 0, -100), (Tag1 (("upper_bound"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Maybe_bound"), "t"), [((("bound")), 100000000, 0, -99)], (0)), 100000000, 0, -98), (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -95); ((("v")), 100000000, 0, -96); ((("cmp")), 100000000, 0, -97)], (0)), 100000000, 0, -94), 0), 100000000, 0, -93), 0), 100000000, 0, -92), 0), 100000000, 0, -91), 0), 100000000, 0, -90), 0, (("src/map_intf.ml", 1809, 61692, 61694), ("src/map_intf.ml", 1814, 61887, 61910), 0), 0, Tag1 ("Base__Map_intf", 485)), 0); Tag3 (("Make_applicative_traversals", 3519), 0, (Tag2 (((("A", 3546)), (Tag1 (Tag1 ((Tag2 ("Base__")), "Applicative"), "Lazy_applicative"))), Tag1 ([(("mapi", 3569), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -1275); ((("v1")), 100000000, 0, -1281); ((("cmp")), 100000000, 0, -1277)], (0)), 100000000, 0, -1282), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -1275), (Tag1 (("data"), ((("v1")), 100000000, 0, -1281), (Tag3 (Tag1 ((("A", 3546)), "t"), [((("v2")), 100000000, 0, -1276)], (0)), 100000000, 0, -1280), 0), 100000000, 0, -1279), 0), 100000000, 0, -1278), (Tag3 (Tag1 ((("A", 3546)), "t"), [(Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -1275); ((("v2")), 100000000, 0, -1276); ((("cmp")), 100000000, 0, -1277)], (0)), 100000000, 0, -1274)], (0)), 100000000, 0, -1273), 0), 100000000, 0, -1272), 0), 100000000, 0, -1271), 0, (("src/map_intf.ml", 1820, 62229, 62233), ("src/map_intf.ml", 1823, 62312, 62342), 0), 0, Tag1 ("Base__Map_intf", 487)), 0); (("filter_mapi", 3570), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -1262); ((("v1")), 100000000, 0, -1269); ((("cmp")), 100000000, 0, -1264)], (0)), 100000000, 0, -1270), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -1262), (Tag1 (("data"), ((("v1")), 100000000, 0, -1269), (Tag3 (Tag1 ((("A", 3546)), "t"), [(Tag3 ((Tag3 ("option", 10)), [((("v2")), 100000000, 0, -1263)], (0)), 100000000, 0, -1268)], (0)), 100000000, 0, -1267), 0), 100000000, 0, -1266), 0), 100000000, 0, -1265), (Tag3 (Tag1 ((("A", 3546)), "t"), [(Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -1262); ((("v2")), 100000000, 0, -1263); ((("cmp")), 100000000, 0, -1264)], (0)), 100000000, 0, -1261)], (0)), 100000000, 0, -1260), 0), 100000000, 0, -1259), 0), 100000000, 0, -1258), 0, (("src/map_intf.ml", 1825, 62344, 62348), ("src/map_intf.ml", 1828, 62441, 62471), 0), 0, Tag1 ("Base__Map_intf", 488)), 0)])), 0, (("src/map_intf.ml", 1819, 62151, 62153), ("src/map_intf.ml", 1829, 62472, 62477), 0), Tag1 ("Base__Map_intf", 489)), 0, 0); Tag3 (("M", 3520), 0, (Tag2 (((("K", 3545)), Tag1 ([Tag1 (("t", 3571), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/map_intf.ml", 1860, 63480, 63486), ("src/map_intf.ml", 1860, 63480, 63492), 0), 0, 0, 0, Tag1 ("Base__Map_intf", 490)), 1, 0); Tag1 (("comparator_witness", 3572), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/map_intf.ml", 1861, 63493, 63499), ("src/map_intf.ml", 1861, 63493, 63522), 0), 0, 0, 0, Tag1 ("Base__Map_intf", 491)), 1, 0)])), Tag1 ([Tag1 (("t", 3573), ([((("v")), 100000000, 0, -1285)], 1, 0, 1, ((Tag3 ((("t", 3412)), [(Tag3 (Tag1 ((("K", 3545)), "t"), 0, (0)), 100000000, 0, -1284); ((("v")), 100000000, 0, -1285); (Tag3 (Tag1 ((("K", 3545)), "comparator_witness"), 0, (0)), 100000000, 0, -1286)], (0)), 100000000, 0, -1283)), [9], [2], 0, 0, (("src/map_intf.ml", 1863, 63538, 63542), ("src/map_intf.ml", 1863, 63538, 63594), 0), 0, 0, 0, Tag1 ("Base__Map_intf", 493)), 0, 0)])), 0, (("src/map_intf.ml", 1859, 63460, 63462), ("src/map_intf.ml", 1864, 63595, 63600), 0), Tag1 ("Base__Map_intf", 494)), 0, 0); Tag4 (("Sexp_of_m", 3521), ((Tag1 ([Tag1 (("t", 3574), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/map_intf.ml", 1866, 63602, 63612), ("src/map_intf.ml", 1866, 63602, 63683), 0), [(("deriving_inline", (("src/map_intf.ml", 936, 28461, 28475), ("src/map_intf.ml", 936, 28461, 28490), 0)), ([([(((("sexp_of"), (("src/map_intf.ml", 936, 28461, 28491), ("src/map_intf.ml", 936, 28461, 28498), 0))), (("src/map_intf.ml", 936, 28461, 28491), ("src/map_intf.ml", 936, 28461, 28498), 0), 0, 0)], (("src/map_intf.ml", 936, 28461, 28491), ("src/map_intf.ml", 936, 28461, 28498), 0))]), (("src/map_intf.ml", 936, 28461, 28472), ("src/map_intf.ml", 936, 28461, 28499), 0))], 0, 0, Tag1 ("Base__Map_intf", 331)), 1, 0); (("sexp_of_t", 3575), ((Tag1 (0, (Tag3 ((("t", 3574)), 0, (0)), 100000000, 0, -1289), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1288), 0), 100000000, 0, -1287), 0, (("src/map_intf.ml", 1866, 63602, 63612), ("src/map_intf.ml", 1866, 63602, 63683), 0), 0, Tag1 ("Base__Map_intf", 332)), 0)])), 0, (("src/map_intf.ml", 1866, 63602, 63612), ("src/map_intf.ml", 1866, 63602, 63683), 0), Tag1 ("Base__Map_intf", 333)), 0); Tag4 (("M_of_sexp", 3522), ((Tag1 ([Tag1 (("t", 3576), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/map_intf.ml", 1866, 63602, 63612), ("src/map_intf.ml", 1866, 63602, 63683), 0), [(("deriving_inline", (("src/map_intf.ml", 944, 28593, 28607), ("src/map_intf.ml", 944, 28593, 28622), 0)), ([([(((("of_sexp"), (("src/map_intf.ml", 944, 28593, 28623), ("src/map_intf.ml", 944, 28593, 28630), 0))), (("src/map_intf.ml", 944, 28593, 28623), ("src/map_intf.ml", 944, 28593, 28630), 0), 0, 0)], (("src/map_intf.ml", 944, 28593, 28623), ("src/map_intf.ml", 944, 28593, 28630), 0))]), (("src/map_intf.ml", 944, 28593, 28604), ("src/map_intf.ml", 944, 28593, 28631), 0))], 0, 0, Tag1 ("Base__Map_intf", 334)), 1, 0); (("t_of_sexp", 3577), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -1295), (Tag3 ((("t", 3576)), 0, (0)), 100000000, 0, -1294), 0), 100000000, 0, -1293), 0, (("src/map_intf.ml", 1866, 63602, 63612), ("src/map_intf.ml", 1866, 63602, 63683), 0), 0, Tag1 ("Base__Map_intf", 335)), 0); Tag1 (("comparator_witness", 3578), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/map_intf.ml", 1866, 63602, 63612), ("src/map_intf.ml", 1866, 63602, 63683), 0), 0, 0, 0, Tag1 ("Base__Comparator", 5)), 1, 0); (("comparator", 3579), ((Tag3 (Tag1 ((Tag2 ("Base__Comparator")), "comparator"), [(Tag3 ((("t", 3576)), 0, (0)), 100000000, 0, -1291); (Tag3 ((("comparator_witness", 3578)), 0, (0)), 100000000, 0, -1292)], (0)), 100000000, 0, -1290), 0, (("src/map_intf.ml", 1866, 63602, 63612), ("src/map_intf.ml", 1866, 63602, 63683), 0), 0, Tag1 ("Base__Comparator", 6)), 0)])), 0, (("src/map_intf.ml", 1866, 63602, 63612), ("src/map_intf.ml", 1866, 63602, 63683), 0), Tag1 ("Base__Map_intf", 337)), 0); Tag4 (("M_sexp_grammar", 3523), ((Tag1 ([Tag1 (("t", 3580), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/map_intf.ml", 1866, 63602, 63612), ("src/map_intf.ml", 1866, 63602, 63683), 0), [(("deriving_inline", (("src/map_intf.ml", 954, 28773, 28787), ("src/map_intf.ml", 954, 28773, 28802), 0)), ([([(((("sexp_grammar"), (("src/map_intf.ml", 954, 28773, 28803), ("src/map_intf.ml", 954, 28773, 28815), 0))), (("src/map_intf.ml", 954, 28773, 28803), ("src/map_intf.ml", 954, 28773, 28815), 0), 0, 0)], (("src/map_intf.ml", 954, 28773, 28803), ("src/map_intf.ml", 954, 28773, 28815), 0))]), (("src/map_intf.ml", 954, 28773, 28784), ("src/map_intf.ml", 954, 28773, 28816), 0))], 0, 0, Tag1 ("Base__Map_intf", 338)), 1, 0); (("t_sexp_grammar", 3581), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("t", 3580)), 0, (0)), 100000000, 0, -1297)], (0)), 100000000, 0, -1296), 0, (("src/map_intf.ml", 1866, 63602, 63612), ("src/map_intf.ml", 1866, 63602, 63683), 0), 0, Tag1 ("Base__Map_intf", 339)), 0)])), 0, (("src/map_intf.ml", 1866, 63602, 63612), ("src/map_intf.ml", 1866, 63602, 63683), 0), Tag1 ("Base__Map_intf", 340)), 0); Tag4 (("Compare_m", 3524), ((Tag1 (0)), 0, (("src/map_intf.ml", 1866, 63602, 63612), ("src/map_intf.ml", 1866, 63602, 63683), 0), Tag1 ("Base__Map_intf", 341)), 0); Tag4 (("Equal_m", 3525), ((Tag1 (0)), 0, (("src/map_intf.ml", 1866, 63602, 63612), ("src/map_intf.ml", 1866, 63602, 63683), 0), Tag1 ("Base__Map_intf", 342)), 0); Tag4 (("Hash_fold_m", 3526), (((Tag1 (Tag1 ((Tag2 ("Base__")), "Hasher"), "S"))), 0, (("src/map_intf.ml", 1866, 63602, 63612), ("src/map_intf.ml", 1866, 63602, 63683), 0), Tag1 ("Base__Map_intf", 343)), 0); (("sexp_of_m__t", 3527), ((Tag1 (0, (Tag11 ((("Sexp_of_m", 3521)), [(("t"), ((("k")), 100000000, 0, -84))]), 100000000, 0, -89), (Tag1 (0, (Tag1 (0, ((("v")), 100000000, 0, -85), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -88), 0), 100000000, 0, -87), (Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -84); ((("v")), 100000000, 0, -85); ((("cmp")), 100000000, 0, -86)], (0)), 100000000, 0, -83), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -82), 0), 100000000, 0, -81), 0), 100000000, 0, -80), 0), 100000000, 0, -79), 0, (("src/map_intf.ml", 1866, 63602, 63612), ("src/map_intf.ml", 1866, 63602, 63683), 0), 0, Tag1 ("Base__Map_intf", 345)), 0); (("m__t_of_sexp", 3528), ((Tag1 (0, (Tag11 ((("M_of_sexp", 3522)), [(("comparator_witness"), ((("cmp")), 100000000, 0, -74)); (("t"), ((("k")), 100000000, 0, -72))]), 100000000, 0, -78), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -77), ((("v")), 100000000, 0, -73), 0), 100000000, 0, -76), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -75), (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -72); ((("v")), 100000000, 0, -73); ((("cmp")), 100000000, 0, -74)], (0)), 100000000, 0, -71), 0), 100000000, 0, -70), 0), 100000000, 0, -69), 0), 100000000, 0, -68), 0, (("src/map_intf.ml", 1866, 63602, 63612), ("src/map_intf.ml", 1866, 63602, 63683), 0), 0, Tag1 ("Base__Map_intf", 348)), 0); (("m__t_sexp_grammar", 3529), ((Tag1 (0, (Tag11 ((("M_sexp_grammar", 3523)), [(("t"), ((("k")), 100000000, 0, -63))]), 100000000, 0, -67), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [((("v")), 100000000, 0, -64)], (0)), 100000000, 0, -66), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -63); ((("v")), 100000000, 0, -64); ((("cmp")), 100000000, 0, -65)], (0)), 100000000, 0, -62)], (0)), 100000000, 0, -61), 0), 100000000, 0, -60), 0), 100000000, 0, -59), 0, (("src/map_intf.ml", 1866, 63602, 63612), ("src/map_intf.ml", 1866, 63602, 63683), 0), 0, Tag1 ("Base__Map_intf", 350)), 0); (("compare_m__t", 3530), ((Tag1 (0, (Tag11 ((("Compare_m", 3524)), 0), 100000000, 0, -58), (Tag1 (0, (Tag1 (0, ((("v")), 100000000, 0, -52), (Tag1 (0, ((("v")), 100000000, 0, -52), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -57), 0), 100000000, 0, -56), 0), 100000000, 0, -55), (Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -51); ((("v")), 100000000, 0, -52); ((("cmp")), 100000000, 0, -53)], (0)), 100000000, 0, -54), (Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -51); ((("v")), 100000000, 0, -52); ((("cmp")), 100000000, 0, -53)], (0)), 100000000, 0, -50), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -49), 0), 100000000, 0, -48), 0), 100000000, 0, -47), 0), 100000000, 0, -46), 0), 100000000, 0, -45), 0, (("src/map_intf.ml", 1866, 63602, 63612), ("src/map_intf.ml", 1866, 63602, 63683), 0), 0, Tag1 ("Base__Map_intf", 351)), 0); (("equal_m__t", 3531), ((Tag1 (0, (Tag11 ((("Equal_m", 3525)), 0), 100000000, 0, -44), (Tag1 (0, (Tag1 (0, ((("v")), 100000000, 0, -38), (Tag1 (0, ((("v")), 100000000, 0, -38), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -43), 0), 100000000, 0, -42), 0), 100000000, 0, -41), (Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -37); ((("v")), 100000000, 0, -38); ((("cmp")), 100000000, 0, -39)], (0)), 100000000, 0, -40), (Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -37); ((("v")), 100000000, 0, -38); ((("cmp")), 100000000, 0, -39)], (0)), 100000000, 0, -36), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -35), 0), 100000000, 0, -34), 0), 100000000, 0, -33), 0), 100000000, 0, -32), 0), 100000000, 0, -31), 0, (("src/map_intf.ml", 1866, 63602, 63612), ("src/map_intf.ml", 1866, 63602, 63683), 0), 0, Tag1 ("Base__Map_intf", 352)), 0); (("hash_fold_m__t", 3532), ((Tag1 (0, (Tag11 ((("Hash_fold_m", 3526)), [(("t"), ((("k")), 100000000, 0, -22))]), 100000000, 0, -30), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Hash"), "state"), 0, (0)), 100000000, 0, -29), (Tag1 (0, ((("v")), 100000000, 0, -23), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Hash"), "state"), 0, (0)), 100000000, 0, -28), 0), 100000000, 0, -27), 0), 100000000, 0, -26), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Hash"), "state"), 0, (0)), 100000000, 0, -25), (Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -22); ((("v")), 100000000, 0, -23); ((0), 100000000, 0, -24)], (0)), 100000000, 0, -21), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Hash"), "state"), 0, (0)), 100000000, 0, -20), 0), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("src/map_intf.ml", 1866, 63602, 63612), ("src/map_intf.ml", 1866, 63602, 63683), 0), 0, Tag1 ("Base__Map_intf", 354)), 0); Tag3 (("Using_comparator", 3533), 0, (Tag1 ([Tag1 (("t", 3582), ([((("k")), 100000000, 0, -2363); ((("v")), 100000000, 0, -2364); ((("cmp")), 100000000, 0, -2365)], 3, 0, 1, ((Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -2363); ((("v")), 100000000, 0, -2364); ((("cmp")), 100000000, 0, -2365)], (0)), 100000000, 0, -2362)), [15; 9; 15], [2; 2; 2], 0, 0, (("src/map_intf.ml", 1872, 63952, 63956), ("src/map_intf.ml", 1872, 63952, 64032), 0), [(("deriving_inline", (("src/map_intf.ml", 1872, 63952, 64008), ("src/map_intf.ml", 1872, 63952, 64023), 0)), ([([(((("sexp_of"), (("src/map_intf.ml", 1872, 63952, 64024), ("src/map_intf.ml", 1872, 63952, 64031), 0))), (("src/map_intf.ml", 1872, 63952, 64024), ("src/map_intf.ml", 1872, 63952, 64031), 0), 0, 0)], (("src/map_intf.ml", 1872, 63952, 64024), ("src/map_intf.ml", 1872, 63952, 64031), 0))]), (("src/map_intf.ml", 1872, 63952, 64005), ("src/map_intf.ml", 1872, 63952, 64032), 0))], 0, 0, Tag1 ("Base__Map_intf", 496)), 0, 0); (("sexp_of_t", 3583), ((Tag1 (0, (Tag1 (0, ((("k")), 100000000, 0, -2353), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -2361), 0), 100000000, 0, -2360), (Tag1 (0, (Tag1 (0, ((("v")), 100000000, 0, -2354), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -2359), 0), 100000000, 0, -2358), (Tag1 (0, (Tag1 (0, ((("cmp")), 100000000, 0, -2355), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -2357), 0), 100000000, 0, -2356), (Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -2353); ((("v")), 100000000, 0, -2354); ((("cmp")), 100000000, 0, -2355)], (0)), 100000000, 0, -2352), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -2351), 0), 100000000, 0, -2350), 0), 100000000, 0, -2349), 0), 100000000, 0, -2348), 0), 100000000, 0, -2347), 0, (("src/map_intf.ml", 1874, 64034, 64038), ("src/map_intf.ml", 1879, 64179, 64203), 0), 0, Tag1 ("Base__Map_intf", 497)), 0); (("t_of_sexp_direct", 3584), ((Tag1 (("comparator"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "t"), [((("k")), 100000000, 0, -2338); ((("cmp")), 100000000, 0, -2340)], (0)), 100000000, 0, -2346), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -2345), ((("k")), 100000000, 0, -2338), 0), 100000000, 0, -2344), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -2343), ((("v")), 100000000, 0, -2339), 0), 100000000, 0, -2342), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -2341), (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -2338); ((("v")), 100000000, 0, -2339); ((("cmp")), 100000000, 0, -2340)], (0)), 100000000, 0, -2337), 0), 100000000, 0, -2336), 0), 100000000, 0, -2335), 0), 100000000, 0, -2334), 0), 100000000, 0, -2333), 0, (("src/map_intf.ml", 1883, 64219, 64223), ("src/map_intf.ml", 1888, 64352, 64377), 0), 0, Tag1 ("Base__Map_intf", 498)), 0); Tag3 (("Tree", 3585), 0, (Tag1 ([Tag1 (("t", 3691), ([((("k")), 100000000, 0, -3419); ((("v")), 100000000, 0, -3420); ((("cmp")), 100000000, 0, -3421)], 3, 0, 1, 0, [1; 1; 7], [2; 2; 2], 0, 0, (("src/map_intf.ml", 1891, 64401, 64407), ("src/map_intf.ml", 1891, 64401, 64458), 0), [(("deriving_inline", (("src/map_intf.ml", 1891, 64401, 64434), ("src/map_intf.ml", 1891, 64401, 64449), 0)), ([([(((("sexp_of"), (("src/map_intf.ml", 1891, 64401, 64450), ("src/map_intf.ml", 1891, 64401, 64457), 0))), (("src/map_intf.ml", 1891, 64401, 64450), ("src/map_intf.ml", 1891, 64401, 64457), 0), 0, 0)], (("src/map_intf.ml", 1891, 64401, 64450), ("src/map_intf.ml", 1891, 64401, 64457), 0))]), (("src/map_intf.ml", 1891, 64401, 64431), ("src/map_intf.ml", 1891, 64401, 64458), 0))], 0, 0, Tag1 ("Base__Map_intf", 499)), 1, 0); (("sexp_of_t", 3692), ((Tag1 (0, (Tag1 (0, ((("k")), 100000000, 0, -3410), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -3418), 0), 100000000, 0, -3417), (Tag1 (0, (Tag1 (0, ((("v")), 100000000, 0, -3411), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -3416), 0), 100000000, 0, -3415), (Tag1 (0, (Tag1 (0, ((("cmp")), 100000000, 0, -3412), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -3414), 0), 100000000, 0, -3413), (Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3410); ((("v")), 100000000, 0, -3411); ((("cmp")), 100000000, 0, -3412)], (0)), 100000000, 0, -3409), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -3408), 0), 100000000, 0, -3407), 0), 100000000, 0, -3406), 0), 100000000, 0, -3405), 0), 100000000, 0, -3404), 0, (("src/map_intf.ml", 1893, 64460, 64466), ("src/map_intf.ml", 1898, 64615, 64641), 0), 0, Tag1 ("Base__Map_intf", 500)), 0); (("t_of_sexp_direct", 3693), ((Tag1 (("comparator"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "t"), [((("k")), 100000000, 0, -3395); ((("cmp")), 100000000, 0, -3397)], (0)), 100000000, 0, -3403), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -3402), ((("k")), 100000000, 0, -3395), 0), 100000000, 0, -3401), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -3400), ((("v")), 100000000, 0, -3396), 0), 100000000, 0, -3399), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -3398), (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3395); ((("v")), 100000000, 0, -3396); ((("cmp")), 100000000, 0, -3397)], (0)), 100000000, 0, -3394), 0), 100000000, 0, -3393), 0), 100000000, 0, -3392), 0), 100000000, 0, -3391), 0), 100000000, 0, -3390), 0, (("src/map_intf.ml", 1902, 64659, 64665), ("src/map_intf.ml", 1907, 64802, 64829), 0), 0, Tag1 ("Base__Map_intf", 501)), 0); (("empty", 3694), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -3386); ((("cmp")), 100000000, 0, -3387); (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3386); ((0), 100000000, 0, -3389); ((("cmp")), 100000000, 0, -3387)], (0)), 100000000, 0, -3388)], (0)), 100000000, 0, -3385), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 273)), 0); (("singleton", 3695), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -3379); ((("cmp")), 100000000, 0, -3380); (Tag1 (0, ((("k")), 100000000, 0, -3379), (Tag1 (0, ((("v")), 100000000, 0, -3384), (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3379); ((("v")), 100000000, 0, -3384); ((("cmp")), 100000000, 0, -3380)], (0)), 100000000, 0, -3383), 0), 100000000, 0, -3382), 0), 100000000, 0, -3381)], (0)), 100000000, 0, -3378), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 274)), 0); (("map_keys", 3696), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k2")), 100000000, 0, -3366); ((("cmp2")), 100000000, 0, -3367); (Tag1 (0, (Tag3 ((("t", 3691)), [((("k1")), 100000000, 0, -3375); ((("v")), 100000000, 0, -3373); ((("cmp1")), 100000000, 0, -3377)], (0)), 100000000, 0, -3376), (Tag1 (("f"), (Tag1 (0, ((("k1")), 100000000, 0, -3375), ((("k2")), 100000000, 0, -3366), 0), 100000000, 0, -3374), (Tag8 (([("Duplicate_key", ((((("k2")), 100000000, 0, -3366)))); ("Ok", (((Tag3 ((("t", 3691)), [((("k2")), 100000000, 0, -3366); ((("v")), 100000000, 0, -3373); ((("cmp2")), 100000000, 0, -3367)], (0)), 100000000, 0, -3372))))], (0, 100000000, 0, -3371), 1, 0, 0)), 100000000, 0, -3370), 0), 100000000, 0, -3369), 0), 100000000, 0, -3368)], (0)), 100000000, 0, -3365), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 275)), 0); (("map_keys_exn", 3697), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k2")), 100000000, 0, -3355); ((("cmp2")), 100000000, 0, -3356); (Tag1 (0, (Tag3 ((("t", 3691)), [((("k1")), 100000000, 0, -3362); ((("v")), 100000000, 0, -3360); ((("cmp1")), 100000000, 0, -3364)], (0)), 100000000, 0, -3363), (Tag1 (("f"), (Tag1 (0, ((("k1")), 100000000, 0, -3362), ((("k2")), 100000000, 0, -3355), 0), 100000000, 0, -3361), (Tag3 ((("t", 3691)), [((("k2")), 100000000, 0, -3355); ((("v")), 100000000, 0, -3360); ((("cmp2")), 100000000, 0, -3356)], (0)), 100000000, 0, -3359), 0), 100000000, 0, -3358), 0), 100000000, 0, -3357)], (0)), 100000000, 0, -3354), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 276)), 0); (("transpose_keys", 3698), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k1")), 100000000, 0, -3343); ((("cmp1")), 100000000, 0, -3344); (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k2")), 100000000, 0, -3346); ((("cmp2")), 100000000, 0, -3347); (Tag1 (0, (Tag3 ((("t", 3691)), [((("k1")), 100000000, 0, -3343); (Tag3 ((("t", 3691)), [((("k2")), 100000000, 0, -3346); ((("a")), 100000000, 0, -3351); ((("cmp2")), 100000000, 0, -3347)], (0)), 100000000, 0, -3353); ((("cmp1")), 100000000, 0, -3344)], (0)), 100000000, 0, -3352), (Tag3 ((("t", 3691)), [((("k2")), 100000000, 0, -3346); (Tag3 ((("t", 3691)), [((("k1")), 100000000, 0, -3343); ((("a")), 100000000, 0, -3351); ((("cmp1")), 100000000, 0, -3344)], (0)), 100000000, 0, -3350); ((("cmp2")), 100000000, 0, -3347)], (0)), 100000000, 0, -3349), 0), 100000000, 0, -3348)], (0)), 100000000, 0, -3345)], (0)), 100000000, 0, -3342), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 277)), 0); (("of_sorted_array", 3699), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -3334); ((("cmp")), 100000000, 0, -3335); (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag2 ([((("k")), 100000000, 0, -3334); ((("v")), 100000000, 0, -3339)]), 100000000, 0, -3341)], (0)), 100000000, 0, -3340), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3334); ((("v")), 100000000, 0, -3339); ((("cmp")), 100000000, 0, -3335)], (0)), 100000000, 0, -3338)], (0)), 100000000, 0, -3337), 0), 100000000, 0, -3336)], (0)), 100000000, 0, -3333), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 278)), 0); (("of_sorted_array_unchecked", 3700), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -3326); ((("cmp")), 100000000, 0, -3327); (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag2 ([((("k")), 100000000, 0, -3326); ((("v")), 100000000, 0, -3330)]), 100000000, 0, -3332)], (0)), 100000000, 0, -3331), (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3326); ((("v")), 100000000, 0, -3330); ((("cmp")), 100000000, 0, -3327)], (0)), 100000000, 0, -3329), 0), 100000000, 0, -3328)], (0)), 100000000, 0, -3325), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 279)), 0); (("of_increasing_iterator_unchecked", 3701), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -3315); ((("cmp")), 100000000, 0, -3316); (Tag1 (("len"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3324), (Tag1 (("f"), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3323), (Tag2 ([((("k")), 100000000, 0, -3315); ((("v")), 100000000, 0, -3320)]), 100000000, 0, -3322), 0), 100000000, 0, -3321), (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3315); ((("v")), 100000000, 0, -3320); ((("cmp")), 100000000, 0, -3316)], (0)), 100000000, 0, -3319), 0), 100000000, 0, -3318), 0), 100000000, 0, -3317)], (0)), 100000000, 0, -3314), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 280)), 0); (("of_alist", 3702), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -3305); ((("cmp")), 100000000, 0, -3306); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("k")), 100000000, 0, -3305); ((("v")), 100000000, 0, -3311)]), 100000000, 0, -3313)], (0)), 100000000, 0, -3312), (Tag8 (([("Duplicate_key", ((((("k")), 100000000, 0, -3305)))); ("Ok", (((Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3305); ((("v")), 100000000, 0, -3311); ((("cmp")), 100000000, 0, -3306)], (0)), 100000000, 0, -3310))))], (0, 100000000, 0, -3309), 1, 0, 0)), 100000000, 0, -3308), 0), 100000000, 0, -3307)], (0)), 100000000, 0, -3304), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 281)), 0); (("of_alist_or_error", 3703), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -3296); ((("cmp")), 100000000, 0, -3297); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("k")), 100000000, 0, -3296); ((("v")), 100000000, 0, -3301)]), 100000000, 0, -3303)], (0)), 100000000, 0, -3302), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3296); ((("v")), 100000000, 0, -3301); ((("cmp")), 100000000, 0, -3297)], (0)), 100000000, 0, -3300)], (0)), 100000000, 0, -3299), 0), 100000000, 0, -3298)], (0)), 100000000, 0, -3295), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 282)), 0); (("of_alist_exn", 3704), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -3288); ((("cmp")), 100000000, 0, -3289); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("k")), 100000000, 0, -3288); ((("v")), 100000000, 0, -3292)]), 100000000, 0, -3294)], (0)), 100000000, 0, -3293), (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3288); ((("v")), 100000000, 0, -3292); ((("cmp")), 100000000, 0, -3289)], (0)), 100000000, 0, -3291), 0), 100000000, 0, -3290)], (0)), 100000000, 0, -3287), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 283)), 0); (("of_alist_multi", 3705), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -3279); ((("cmp")), 100000000, 0, -3280); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("k")), 100000000, 0, -3279); ((("v")), 100000000, 0, -3284)]), 100000000, 0, -3286)], (0)), 100000000, 0, -3285), (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3279); (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -3284)], (0)), 100000000, 0, -3283); ((("cmp")), 100000000, 0, -3280)], (0)), 100000000, 0, -3282), 0), 100000000, 0, -3281)], (0)), 100000000, 0, -3278), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 284)), 0); (("of_alist_fold", 3706), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -3266); ((("cmp")), 100000000, 0, -3267); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("k")), 100000000, 0, -3266); ((("v1")), 100000000, 0, -3275)]), 100000000, 0, -3277)], (0)), 100000000, 0, -3276), (Tag1 (("init"), ((("v2")), 100000000, 0, -3272), (Tag1 (("f"), (Tag1 (0, ((("v2")), 100000000, 0, -3272), (Tag1 (0, ((("v1")), 100000000, 0, -3275), ((("v2")), 100000000, 0, -3272), 0), 100000000, 0, -3274), 0), 100000000, 0, -3273), (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3266); ((("v2")), 100000000, 0, -3272); ((("cmp")), 100000000, 0, -3267)], (0)), 100000000, 0, -3271), 0), 100000000, 0, -3270), 0), 100000000, 0, -3269), 0), 100000000, 0, -3268)], (0)), 100000000, 0, -3265), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 285)), 0); (("of_alist_reduce", 3707), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -3255); ((("cmp")), 100000000, 0, -3256); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("k")), 100000000, 0, -3255); ((("v")), 100000000, 0, -3260)]), 100000000, 0, -3264)], (0)), 100000000, 0, -3263), (Tag1 (("f"), (Tag1 (0, ((("v")), 100000000, 0, -3260), (Tag1 (0, ((("v")), 100000000, 0, -3260), ((("v")), 100000000, 0, -3260), 0), 100000000, 0, -3262), 0), 100000000, 0, -3261), (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3255); ((("v")), 100000000, 0, -3260); ((("cmp")), 100000000, 0, -3256)], (0)), 100000000, 0, -3259), 0), 100000000, 0, -3258), 0), 100000000, 0, -3257)], (0)), 100000000, 0, -3254), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 286)), 0); (("of_increasing_sequence", 3708), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -3246); ((("cmp")), 100000000, 0, -3247); (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag2 ([((("k")), 100000000, 0, -3246); ((("v")), 100000000, 0, -3251)]), 100000000, 0, -3253)], (0)), 100000000, 0, -3252), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3246); ((("v")), 100000000, 0, -3251); ((("cmp")), 100000000, 0, -3247)], (0)), 100000000, 0, -3250)], (0)), 100000000, 0, -3249), 0), 100000000, 0, -3248)], (0)), 100000000, 0, -3245), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 287)), 0); (("of_sequence", 3709), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -3236); ((("cmp")), 100000000, 0, -3237); (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag2 ([((("k")), 100000000, 0, -3236); ((("v")), 100000000, 0, -3242)]), 100000000, 0, -3244)], (0)), 100000000, 0, -3243), (Tag8 (([("Duplicate_key", ((((("k")), 100000000, 0, -3236)))); ("Ok", (((Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3236); ((("v")), 100000000, 0, -3242); ((("cmp")), 100000000, 0, -3237)], (0)), 100000000, 0, -3241))))], (0, 100000000, 0, -3240), 1, 0, 0)), 100000000, 0, -3239), 0), 100000000, 0, -3238)], (0)), 100000000, 0, -3235), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 288)), 0); (("of_sequence_or_error", 3710), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -3227); ((("cmp")), 100000000, 0, -3228); (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag2 ([((("k")), 100000000, 0, -3227); ((("v")), 100000000, 0, -3232)]), 100000000, 0, -3234)], (0)), 100000000, 0, -3233), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3227); ((("v")), 100000000, 0, -3232); ((("cmp")), 100000000, 0, -3228)], (0)), 100000000, 0, -3231)], (0)), 100000000, 0, -3230), 0), 100000000, 0, -3229)], (0)), 100000000, 0, -3226), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 289)), 0); (("of_sequence_exn", 3711), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -3219); ((("cmp")), 100000000, 0, -3220); (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag2 ([((("k")), 100000000, 0, -3219); ((("v")), 100000000, 0, -3223)]), 100000000, 0, -3225)], (0)), 100000000, 0, -3224), (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3219); ((("v")), 100000000, 0, -3223); ((("cmp")), 100000000, 0, -3220)], (0)), 100000000, 0, -3222), 0), 100000000, 0, -3221)], (0)), 100000000, 0, -3218), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 290)), 0); (("of_sequence_multi", 3712), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -3210); ((("cmp")), 100000000, 0, -3211); (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag2 ([((("k")), 100000000, 0, -3210); ((("v")), 100000000, 0, -3215)]), 100000000, 0, -3217)], (0)), 100000000, 0, -3216), (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3210); (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -3215)], (0)), 100000000, 0, -3214); ((("cmp")), 100000000, 0, -3211)], (0)), 100000000, 0, -3213), 0), 100000000, 0, -3212)], (0)), 100000000, 0, -3209), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 291)), 0); (("of_sequence_fold", 3713), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -3197); ((("cmp")), 100000000, 0, -3198); (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag2 ([((("k")), 100000000, 0, -3197); ((("v1")), 100000000, 0, -3206)]), 100000000, 0, -3208)], (0)), 100000000, 0, -3207), (Tag1 (("init"), ((("v2")), 100000000, 0, -3203), (Tag1 (("f"), (Tag1 (0, ((("v2")), 100000000, 0, -3203), (Tag1 (0, ((("v1")), 100000000, 0, -3206), ((("v2")), 100000000, 0, -3203), 0), 100000000, 0, -3205), 0), 100000000, 0, -3204), (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3197); ((("v2")), 100000000, 0, -3203); ((("cmp")), 100000000, 0, -3198)], (0)), 100000000, 0, -3202), 0), 100000000, 0, -3201), 0), 100000000, 0, -3200), 0), 100000000, 0, -3199)], (0)), 100000000, 0, -3196), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 292)), 0); (("of_sequence_reduce", 3714), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -3186); ((("cmp")), 100000000, 0, -3187); (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag2 ([((("k")), 100000000, 0, -3186); ((("v")), 100000000, 0, -3191)]), 100000000, 0, -3195)], (0)), 100000000, 0, -3194), (Tag1 (("f"), (Tag1 (0, ((("v")), 100000000, 0, -3191), (Tag1 (0, ((("v")), 100000000, 0, -3191), ((("v")), 100000000, 0, -3191), 0), 100000000, 0, -3193), 0), 100000000, 0, -3192), (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3186); ((("v")), 100000000, 0, -3191); ((("cmp")), 100000000, 0, -3187)], (0)), 100000000, 0, -3190), 0), 100000000, 0, -3189), 0), 100000000, 0, -3188)], (0)), 100000000, 0, -3185), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 293)), 0); (("of_list_with_key", 3715), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -3175); ((("cmp")), 100000000, 0, -3176); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -3182)], (0)), 100000000, 0, -3184), (Tag1 (("get_key"), (Tag1 (0, ((("v")), 100000000, 0, -3182), ((("k")), 100000000, 0, -3175), 0), 100000000, 0, -3183), (Tag8 (([("Duplicate_key", ((((("k")), 100000000, 0, -3175)))); ("Ok", (((Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3175); ((("v")), 100000000, 0, -3182); ((("cmp")), 100000000, 0, -3176)], (0)), 100000000, 0, -3181))))], (0, 100000000, 0, -3180), 1, 0, 0)), 100000000, 0, -3179), 0), 100000000, 0, -3178), 0), 100000000, 0, -3177)], (0)), 100000000, 0, -3174), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 294)), 0); (("of_list_with_key_or_error", 3716), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -3165); ((("cmp")), 100000000, 0, -3166); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -3171)], (0)), 100000000, 0, -3173), (Tag1 (("get_key"), (Tag1 (0, ((("v")), 100000000, 0, -3171), ((("k")), 100000000, 0, -3165), 0), 100000000, 0, -3172), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3165); ((("v")), 100000000, 0, -3171); ((("cmp")), 100000000, 0, -3166)], (0)), 100000000, 0, -3170)], (0)), 100000000, 0, -3169), 0), 100000000, 0, -3168), 0), 100000000, 0, -3167)], (0)), 100000000, 0, -3164), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 295)), 0); (("of_list_with_key_exn", 3717), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -3156); ((("cmp")), 100000000, 0, -3157); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -3161)], (0)), 100000000, 0, -3163), (Tag1 (("get_key"), (Tag1 (0, ((("v")), 100000000, 0, -3161), ((("k")), 100000000, 0, -3156), 0), 100000000, 0, -3162), (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3156); ((("v")), 100000000, 0, -3161); ((("cmp")), 100000000, 0, -3157)], (0)), 100000000, 0, -3160), 0), 100000000, 0, -3159), 0), 100000000, 0, -3158)], (0)), 100000000, 0, -3155), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 296)), 0); (("of_list_with_key_multi", 3718), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -3146); ((("cmp")), 100000000, 0, -3147); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -3152)], (0)), 100000000, 0, -3154), (Tag1 (("get_key"), (Tag1 (0, ((("v")), 100000000, 0, -3152), ((("k")), 100000000, 0, -3146), 0), 100000000, 0, -3153), (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3146); (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -3152)], (0)), 100000000, 0, -3151); ((("cmp")), 100000000, 0, -3147)], (0)), 100000000, 0, -3150), 0), 100000000, 0, -3149), 0), 100000000, 0, -3148)], (0)), 100000000, 0, -3145), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 297)), 0); (("of_iteri", 3719), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -3133); ((("cmp")), 100000000, 0, -3134); (Tag1 (("iteri"), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -3133), (Tag1 (("data"), ((("v")), 100000000, 0, -3139), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3144), 0), 100000000, 0, -3143), 0), 100000000, 0, -3142), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3141), 0), 100000000, 0, -3140), (Tag8 (([("Duplicate_key", ((((("k")), 100000000, 0, -3133)))); ("Ok", (((Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3133); ((("v")), 100000000, 0, -3139); ((("cmp")), 100000000, 0, -3134)], (0)), 100000000, 0, -3138))))], (0, 100000000, 0, -3137), 1, 0, 0)), 100000000, 0, -3136), 0), 100000000, 0, -3135)], (0)), 100000000, 0, -3132), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 298)), 0); (("of_iteri_exn", 3720), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -3122); ((("cmp")), 100000000, 0, -3123); (Tag1 (("iteri"), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -3122), (Tag1 (("data"), ((("v")), 100000000, 0, -3126), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3131), 0), 100000000, 0, -3130), 0), 100000000, 0, -3129), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3128), 0), 100000000, 0, -3127), (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3122); ((("v")), 100000000, 0, -3126); ((("cmp")), 100000000, 0, -3123)], (0)), 100000000, 0, -3125), 0), 100000000, 0, -3124)], (0)), 100000000, 0, -3121), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 299)), 0); (("of_tree", 3721), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -3115); ((("cmp")), 100000000, 0, -3116); (Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3115); ((("v")), 100000000, 0, -3119); ((("cmp")), 100000000, 0, -3116)], (0)), 100000000, 0, -3120), (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3115); ((("v")), 100000000, 0, -3119); ((("cmp")), 100000000, 0, -3116)], (0)), 100000000, 0, -3118), 0), 100000000, 0, -3117)], (0)), 100000000, 0, -3114), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 300)), 0); (("invariants", 3722), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -3108); ((("cmp")), 100000000, 0, -3109); (Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3108); ((("v")), 100000000, 0, -3113); ((("cmp")), 100000000, 0, -3109)], (0)), 100000000, 0, -3112), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3111), 0), 100000000, 0, -3110)], (0)), 100000000, 0, -3107), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 191)), 0); (("is_empty", 3723), ((Tag1 (0, (Tag3 ((("t", 3691)), [((0), 100000000, 0, -3104); ((0), 100000000, 0, -3105); ((0), 100000000, 0, -3106)], (0)), 100000000, 0, -3103), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3102), 0), 100000000, 0, -3101), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 192)), 0); (("length", 3724), ((Tag1 (0, (Tag3 ((("t", 3691)), [((0), 100000000, 0, -3098); ((0), 100000000, 0, -3099); ((0), 100000000, 0, -3100)], (0)), 100000000, 0, -3097), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3096), 0), 100000000, 0, -3095), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 193)), 0); (("add", 3725), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -3086); ((("cmp")), 100000000, 0, -3087); (Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3086); ((("v")), 100000000, 0, -3093); ((("cmp")), 100000000, 0, -3087)], (0)), 100000000, 0, -3094), (Tag1 (("key"), ((("k")), 100000000, 0, -3086), (Tag1 (("data"), ((("v")), 100000000, 0, -3093), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Or_duplicate"), "t"), [(Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3086); ((("v")), 100000000, 0, -3093); ((("cmp")), 100000000, 0, -3087)], (0)), 100000000, 0, -3092)], (0)), 100000000, 0, -3091), 0), 100000000, 0, -3090), 0), 100000000, 0, -3089), 0), 100000000, 0, -3088)], (0)), 100000000, 0, -3085), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 194)), 0); (("add_exn", 3726), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -3077); ((("cmp")), 100000000, 0, -3078); (Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3077); ((("v")), 100000000, 0, -3083); ((("cmp")), 100000000, 0, -3078)], (0)), 100000000, 0, -3084), (Tag1 (("key"), ((("k")), 100000000, 0, -3077), (Tag1 (("data"), ((("v")), 100000000, 0, -3083), (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3077); ((("v")), 100000000, 0, -3083); ((("cmp")), 100000000, 0, -3078)], (0)), 100000000, 0, -3082), 0), 100000000, 0, -3081), 0), 100000000, 0, -3080), 0), 100000000, 0, -3079)], (0)), 100000000, 0, -3076), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 195)), 0); (("set", 3727), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -3068); ((("cmp")), 100000000, 0, -3069); (Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3068); ((("v")), 100000000, 0, -3074); ((("cmp")), 100000000, 0, -3069)], (0)), 100000000, 0, -3075), (Tag1 (("key"), ((("k")), 100000000, 0, -3068), (Tag1 (("data"), ((("v")), 100000000, 0, -3074), (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3068); ((("v")), 100000000, 0, -3074); ((("cmp")), 100000000, 0, -3069)], (0)), 100000000, 0, -3073), 0), 100000000, 0, -3072), 0), 100000000, 0, -3071), 0), 100000000, 0, -3070)], (0)), 100000000, 0, -3067), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 196)), 0); (("add_multi", 3728), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -3057); ((("cmp")), 100000000, 0, -3058); (Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3057); (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -3064)], (0)), 100000000, 0, -3066); ((("cmp")), 100000000, 0, -3058)], (0)), 100000000, 0, -3065), (Tag1 (("key"), ((("k")), 100000000, 0, -3057), (Tag1 (("data"), ((("v")), 100000000, 0, -3064), (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3057); (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -3064)], (0)), 100000000, 0, -3063); ((("cmp")), 100000000, 0, -3058)], (0)), 100000000, 0, -3062), 0), 100000000, 0, -3061), 0), 100000000, 0, -3060), 0), 100000000, 0, -3059)], (0)), 100000000, 0, -3056), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 197)), 0); (("remove_multi", 3729), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -3047); ((("cmp")), 100000000, 0, -3048); (Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3047); (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -3053)], (0)), 100000000, 0, -3055); ((("cmp")), 100000000, 0, -3048)], (0)), 100000000, 0, -3054), (Tag1 (0, ((("k")), 100000000, 0, -3047), (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3047); (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -3053)], (0)), 100000000, 0, -3052); ((("cmp")), 100000000, 0, -3048)], (0)), 100000000, 0, -3051), 0), 100000000, 0, -3050), 0), 100000000, 0, -3049)], (0)), 100000000, 0, -3046), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 198)), 0); (("find_multi", 3730), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -3038); ((("cmp")), 100000000, 0, -3039); (Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3038); (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -3043)], (0)), 100000000, 0, -3045); ((("cmp")), 100000000, 0, -3039)], (0)), 100000000, 0, -3044), (Tag1 (0, ((("k")), 100000000, 0, -3038), (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -3043)], (0)), 100000000, 0, -3042), 0), 100000000, 0, -3041), 0), 100000000, 0, -3040)], (0)), 100000000, 0, -3037), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 199)), 0); (("change", 3731), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -3026); ((("cmp")), 100000000, 0, -3027); (Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3026); ((("v")), 100000000, 0, -3032); ((("cmp")), 100000000, 0, -3027)], (0)), 100000000, 0, -3036), (Tag1 (0, ((("k")), 100000000, 0, -3026), (Tag1 (("f"), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("v")), 100000000, 0, -3032)], (0)), 100000000, 0, -3035), (Tag3 ((Tag3 ("option", 10)), [((("v")), 100000000, 0, -3032)], (0)), 100000000, 0, -3034), 0), 100000000, 0, -3033), (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3026); ((("v")), 100000000, 0, -3032); ((("cmp")), 100000000, 0, -3027)], (0)), 100000000, 0, -3031), 0), 100000000, 0, -3030), 0), 100000000, 0, -3029), 0), 100000000, 0, -3028)], (0)), 100000000, 0, -3025), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 200)), 0); (("update", 3732), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -3015); ((("cmp")), 100000000, 0, -3016); (Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3015); ((("v")), 100000000, 0, -3021); ((("cmp")), 100000000, 0, -3016)], (0)), 100000000, 0, -3024), (Tag1 (0, ((("k")), 100000000, 0, -3015), (Tag1 (("f"), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("v")), 100000000, 0, -3021)], (0)), 100000000, 0, -3023), ((("v")), 100000000, 0, -3021), 0), 100000000, 0, -3022), (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3015); ((("v")), 100000000, 0, -3021); ((("cmp")), 100000000, 0, -3016)], (0)), 100000000, 0, -3020), 0), 100000000, 0, -3019), 0), 100000000, 0, -3018), 0), 100000000, 0, -3017)], (0)), 100000000, 0, -3014), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 201)), 0); (("find", 3733), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -3007); ((("cmp")), 100000000, 0, -3008); (Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3007); ((("v")), 100000000, 0, -3012); ((("cmp")), 100000000, 0, -3008)], (0)), 100000000, 0, -3013), (Tag1 (0, ((("k")), 100000000, 0, -3007), (Tag3 ((Tag3 ("option", 10)), [((("v")), 100000000, 0, -3012)], (0)), 100000000, 0, -3011), 0), 100000000, 0, -3010), 0), 100000000, 0, -3009)], (0)), 100000000, 0, -3006), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 202)), 0); (("find_exn", 3734), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -3000); ((("cmp")), 100000000, 0, -3001); (Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3000); ((("v")), 100000000, 0, -3004); ((("cmp")), 100000000, 0, -3001)], (0)), 100000000, 0, -3005), (Tag1 (0, ((("k")), 100000000, 0, -3000), ((("v")), 100000000, 0, -3004), 0), 100000000, 0, -3003), 0), 100000000, 0, -3002)], (0)), 100000000, 0, -2999), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 203)), 0); (("remove", 3735), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -2992); ((("cmp")), 100000000, 0, -2993); (Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2992); ((("v")), 100000000, 0, -2997); ((("cmp")), 100000000, 0, -2993)], (0)), 100000000, 0, -2998), (Tag1 (0, ((("k")), 100000000, 0, -2992), (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2992); ((("v")), 100000000, 0, -2997); ((("cmp")), 100000000, 0, -2993)], (0)), 100000000, 0, -2996), 0), 100000000, 0, -2995), 0), 100000000, 0, -2994)], (0)), 100000000, 0, -2991), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 204)), 0); (("mem", 3736), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -2984); ((("cmp")), 100000000, 0, -2985); (Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2984); ((0), 100000000, 0, -2990); ((("cmp")), 100000000, 0, -2985)], (0)), 100000000, 0, -2989), (Tag1 (0, ((("k")), 100000000, 0, -2984), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2988), 0), 100000000, 0, -2987), 0), 100000000, 0, -2986)], (0)), 100000000, 0, -2983), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 205)), 0); (("iter_keys", 3737), ((Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2979); ((0), 100000000, 0, -2981); ((0), 100000000, 0, -2982)], (0)), 100000000, 0, -2980), (Tag1 (("f"), (Tag1 (0, ((("k")), 100000000, 0, -2979), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2978), 0), 100000000, 0, -2977), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2976), 0), 100000000, 0, -2975), 0), 100000000, 0, -2974), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 206)), 0); (("iter", 3738), ((Tag1 (0, (Tag3 ((("t", 3691)), [((0), 100000000, 0, -2972); ((("v")), 100000000, 0, -2970); ((0), 100000000, 0, -2973)], (0)), 100000000, 0, -2971), (Tag1 (("f"), (Tag1 (0, ((("v")), 100000000, 0, -2970), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2969), 0), 100000000, 0, -2968), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2967), 0), 100000000, 0, -2966), 0), 100000000, 0, -2965), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 207)), 0); (("iteri", 3739), ((Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2962); ((("v")), 100000000, 0, -2961); ((0), 100000000, 0, -2964)], (0)), 100000000, 0, -2963), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -2962), (Tag1 (("data"), ((("v")), 100000000, 0, -2961), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2960), 0), 100000000, 0, -2959), 0), 100000000, 0, -2958), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2957), 0), 100000000, 0, -2956), 0), 100000000, 0, -2955), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 208)), 0); (("iteri_until", 3740), ((Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2952); ((("v")), 100000000, 0, -2951); ((0), 100000000, 0, -2954)], (0)), 100000000, 0, -2953), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -2952), (Tag1 (("data"), ((("v")), 100000000, 0, -2951), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Continue_or_stop"), "t"), 0, (0)), 100000000, 0, -2950), 0), 100000000, 0, -2949), 0), 100000000, 0, -2948), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Finished_or_unfinished"), "t"), 0, (0)), 100000000, 0, -2947), 0), 100000000, 0, -2946), 0), 100000000, 0, -2945), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 209)), 0); (("iter2", 3741), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -2931); ((("cmp")), 100000000, 0, -2932); (Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2931); ((("v1")), 100000000, 0, -2941); ((("cmp")), 100000000, 0, -2932)], (0)), 100000000, 0, -2944), (Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2931); ((("v2")), 100000000, 0, -2942); ((("cmp")), 100000000, 0, -2932)], (0)), 100000000, 0, -2943), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -2931), (Tag1 (("data"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Merge_element"), "t"), [((("v1")), 100000000, 0, -2941); ((("v2")), 100000000, 0, -2942)], (0)), 100000000, 0, -2940), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2939), 0), 100000000, 0, -2938), 0), 100000000, 0, -2937), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2936), 0), 100000000, 0, -2935), 0), 100000000, 0, -2934), 0), 100000000, 0, -2933)], (0)), 100000000, 0, -2930), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 210)), 0); (("map", 3742), ((Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2924); ((("v1")), 100000000, 0, -2928); ((("cmp")), 100000000, 0, -2926)], (0)), 100000000, 0, -2929), (Tag1 (("f"), (Tag1 (0, ((("v1")), 100000000, 0, -2928), ((("v2")), 100000000, 0, -2925), 0), 100000000, 0, -2927), (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2924); ((("v2")), 100000000, 0, -2925); ((("cmp")), 100000000, 0, -2926)], (0)), 100000000, 0, -2923), 0), 100000000, 0, -2922), 0), 100000000, 0, -2921), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 211)), 0); (("mapi", 3743), ((Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2914); ((("v1")), 100000000, 0, -2919); ((("cmp")), 100000000, 0, -2916)], (0)), 100000000, 0, -2920), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -2914), (Tag1 (("data"), ((("v1")), 100000000, 0, -2919), ((("v2")), 100000000, 0, -2915), 0), 100000000, 0, -2918), 0), 100000000, 0, -2917), (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2914); ((("v2")), 100000000, 0, -2915); ((("cmp")), 100000000, 0, -2916)], (0)), 100000000, 0, -2913), 0), 100000000, 0, -2912), 0), 100000000, 0, -2911), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 212)), 0); (("fold", 3744), ((Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2908); ((("v")), 100000000, 0, -2907); ((0), 100000000, 0, -2910)], (0)), 100000000, 0, -2909), (Tag1 (("init"), ((("acc")), 100000000, 0, -2903), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -2908), (Tag1 (("data"), ((("v")), 100000000, 0, -2907), (Tag1 (0, ((("acc")), 100000000, 0, -2903), ((("acc")), 100000000, 0, -2903), 0), 100000000, 0, -2906), 0), 100000000, 0, -2905), 0), 100000000, 0, -2904), ((("acc")), 100000000, 0, -2903), 0), 100000000, 0, -2902), 0), 100000000, 0, -2901), 0), 100000000, 0, -2900), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 213)), 0); (("fold_until", 3745), ((Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2897); ((("v")), 100000000, 0, -2896); ((0), 100000000, 0, -2899)], (0)), 100000000, 0, -2898), (Tag1 (("init"), ((("acc")), 100000000, 0, -2891), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -2897), (Tag1 (("data"), ((("v")), 100000000, 0, -2896), (Tag1 (0, ((("acc")), 100000000, 0, -2891), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Container"), "Continue_or_stop"), "t"), [((("acc")), 100000000, 0, -2891); ((("final")), 100000000, 0, -2889)], (0)), 100000000, 0, -2895), 0), 100000000, 0, -2894), 0), 100000000, 0, -2893), 0), 100000000, 0, -2892), (Tag1 (("finish"), (Tag1 (0, ((("acc")), 100000000, 0, -2891), ((("final")), 100000000, 0, -2889), 0), 100000000, 0, -2890), ((("final")), 100000000, 0, -2889), 0), 100000000, 0, -2888), 0), 100000000, 0, -2887), 0), 100000000, 0, -2886), 0), 100000000, 0, -2885), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 214)), 0); (("fold_right", 3746), ((Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2882); ((("v")), 100000000, 0, -2881); ((0), 100000000, 0, -2884)], (0)), 100000000, 0, -2883), (Tag1 (("init"), ((("acc")), 100000000, 0, -2877), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -2882), (Tag1 (("data"), ((("v")), 100000000, 0, -2881), (Tag1 (0, ((("acc")), 100000000, 0, -2877), ((("acc")), 100000000, 0, -2877), 0), 100000000, 0, -2880), 0), 100000000, 0, -2879), 0), 100000000, 0, -2878), ((("acc")), 100000000, 0, -2877), 0), 100000000, 0, -2876), 0), 100000000, 0, -2875), 0), 100000000, 0, -2874), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 215)), 0); (("fold2", 3747), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -2859); ((("cmp")), 100000000, 0, -2860); (Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2859); ((("v1")), 100000000, 0, -2870); ((("cmp")), 100000000, 0, -2860)], (0)), 100000000, 0, -2873), (Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2859); ((("v2")), 100000000, 0, -2871); ((("cmp")), 100000000, 0, -2860)], (0)), 100000000, 0, -2872), (Tag1 (("init"), ((("acc")), 100000000, 0, -2865), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -2859), (Tag1 (("data"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Merge_element"), "t"), [((("v1")), 100000000, 0, -2870); ((("v2")), 100000000, 0, -2871)], (0)), 100000000, 0, -2869), (Tag1 (0, ((("acc")), 100000000, 0, -2865), ((("acc")), 100000000, 0, -2865), 0), 100000000, 0, -2868), 0), 100000000, 0, -2867), 0), 100000000, 0, -2866), ((("acc")), 100000000, 0, -2865), 0), 100000000, 0, -2864), 0), 100000000, 0, -2863), 0), 100000000, 0, -2862), 0), 100000000, 0, -2861)], (0)), 100000000, 0, -2858), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 216)), 0); (("filter_keys", 3748), ((Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2852); ((("v")), 100000000, 0, -2853); ((("cmp")), 100000000, 0, -2854)], (0)), 100000000, 0, -2857), (Tag1 (("f"), (Tag1 (0, ((("k")), 100000000, 0, -2852), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2856), 0), 100000000, 0, -2855), (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2852); ((("v")), 100000000, 0, -2853); ((("cmp")), 100000000, 0, -2854)], (0)), 100000000, 0, -2851), 0), 100000000, 0, -2850), 0), 100000000, 0, -2849), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 217)), 0); (("filter", 3749), ((Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2843); ((("v")), 100000000, 0, -2844); ((("cmp")), 100000000, 0, -2845)], (0)), 100000000, 0, -2848), (Tag1 (("f"), (Tag1 (0, ((("v")), 100000000, 0, -2844), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2847), 0), 100000000, 0, -2846), (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2843); ((("v")), 100000000, 0, -2844); ((("cmp")), 100000000, 0, -2845)], (0)), 100000000, 0, -2842), 0), 100000000, 0, -2841), 0), 100000000, 0, -2840), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 218)), 0); (("filteri", 3750), ((Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2833); ((("v")), 100000000, 0, -2834); ((("cmp")), 100000000, 0, -2835)], (0)), 100000000, 0, -2839), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -2833), (Tag1 (("data"), ((("v")), 100000000, 0, -2834), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2838), 0), 100000000, 0, -2837), 0), 100000000, 0, -2836), (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2833); ((("v")), 100000000, 0, -2834); ((("cmp")), 100000000, 0, -2835)], (0)), 100000000, 0, -2832), 0), 100000000, 0, -2831), 0), 100000000, 0, -2830), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 219)), 0); (("filter_map", 3751), ((Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2823); ((("v1")), 100000000, 0, -2828); ((("cmp")), 100000000, 0, -2825)], (0)), 100000000, 0, -2829), (Tag1 (("f"), (Tag1 (0, ((("v1")), 100000000, 0, -2828), (Tag3 ((Tag3 ("option", 10)), [((("v2")), 100000000, 0, -2824)], (0)), 100000000, 0, -2827), 0), 100000000, 0, -2826), (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2823); ((("v2")), 100000000, 0, -2824); ((("cmp")), 100000000, 0, -2825)], (0)), 100000000, 0, -2822), 0), 100000000, 0, -2821), 0), 100000000, 0, -2820), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 220)), 0); (("filter_mapi", 3752), ((Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2812); ((("v1")), 100000000, 0, -2818); ((("cmp")), 100000000, 0, -2814)], (0)), 100000000, 0, -2819), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -2812), (Tag1 (("data"), ((("v1")), 100000000, 0, -2818), (Tag3 ((Tag3 ("option", 10)), [((("v2")), 100000000, 0, -2813)], (0)), 100000000, 0, -2817), 0), 100000000, 0, -2816), 0), 100000000, 0, -2815), (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2812); ((("v2")), 100000000, 0, -2813); ((("cmp")), 100000000, 0, -2814)], (0)), 100000000, 0, -2811), 0), 100000000, 0, -2810), 0), 100000000, 0, -2809), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 221)), 0); (("partition_mapi", 3753), ((Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2799); ((("v1")), 100000000, 0, -2807); ((("cmp")), 100000000, 0, -2801)], (0)), 100000000, 0, -2808), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -2799), (Tag1 (("data"), ((("v1")), 100000000, 0, -2807), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Either"), "t"), [((("v2")), 100000000, 0, -2800); ((("v3")), 100000000, 0, -2803)], (0)), 100000000, 0, -2806), 0), 100000000, 0, -2805), 0), 100000000, 0, -2804), (Tag2 ([(Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2799); ((("v2")), 100000000, 0, -2800); ((("cmp")), 100000000, 0, -2801)], (0)), 100000000, 0, -2798); (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2799); ((("v3")), 100000000, 0, -2803); ((("cmp")), 100000000, 0, -2801)], (0)), 100000000, 0, -2802)]), 100000000, 0, -2797), 0), 100000000, 0, -2796), 0), 100000000, 0, -2795), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 222)), 0); (("partition_map", 3754), ((Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2786); ((("v1")), 100000000, 0, -2793); ((("cmp")), 100000000, 0, -2788)], (0)), 100000000, 0, -2794), (Tag1 (("f"), (Tag1 (0, ((("v1")), 100000000, 0, -2793), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Either"), "t"), [((("v2")), 100000000, 0, -2787); ((("v3")), 100000000, 0, -2790)], (0)), 100000000, 0, -2792), 0), 100000000, 0, -2791), (Tag2 ([(Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2786); ((("v2")), 100000000, 0, -2787); ((("cmp")), 100000000, 0, -2788)], (0)), 100000000, 0, -2785); (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2786); ((("v3")), 100000000, 0, -2790); ((("cmp")), 100000000, 0, -2788)], (0)), 100000000, 0, -2789)]), 100000000, 0, -2784), 0), 100000000, 0, -2783), 0), 100000000, 0, -2782), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 223)), 0); (("partitioni_tf", 3755), ((Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2774); ((("v")), 100000000, 0, -2775); ((("cmp")), 100000000, 0, -2776)], (0)), 100000000, 0, -2781), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -2774), (Tag1 (("data"), ((("v")), 100000000, 0, -2775), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2780), 0), 100000000, 0, -2779), 0), 100000000, 0, -2778), (Tag2 ([(Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2774); ((("v")), 100000000, 0, -2775); ((("cmp")), 100000000, 0, -2776)], (0)), 100000000, 0, -2773); (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2774); ((("v")), 100000000, 0, -2775); ((("cmp")), 100000000, 0, -2776)], (0)), 100000000, 0, -2777)]), 100000000, 0, -2772), 0), 100000000, 0, -2771), 0), 100000000, 0, -2770), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 224)), 0); (("partition_tf", 3756), ((Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2763); ((("v")), 100000000, 0, -2764); ((("cmp")), 100000000, 0, -2765)], (0)), 100000000, 0, -2769), (Tag1 (("f"), (Tag1 (0, ((("v")), 100000000, 0, -2764), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2768), 0), 100000000, 0, -2767), (Tag2 ([(Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2763); ((("v")), 100000000, 0, -2764); ((("cmp")), 100000000, 0, -2765)], (0)), 100000000, 0, -2762); (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2763); ((("v")), 100000000, 0, -2764); ((("cmp")), 100000000, 0, -2765)], (0)), 100000000, 0, -2766)]), 100000000, 0, -2761), 0), 100000000, 0, -2760), 0), 100000000, 0, -2759), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 225)), 0); (("combine_errors", 3757), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -2751); ((("cmp")), 100000000, 0, -2752); (Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2751); (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [((("v")), 100000000, 0, -2756)], (0)), 100000000, 0, -2758); ((("cmp")), 100000000, 0, -2752)], (0)), 100000000, 0, -2757), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2751); ((("v")), 100000000, 0, -2756); ((("cmp")), 100000000, 0, -2752)], (0)), 100000000, 0, -2755)], (0)), 100000000, 0, -2754), 0), 100000000, 0, -2753)], (0)), 100000000, 0, -2750), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 226)), 0); (("compare_direct", 3758), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -2738); ((("cmp")), 100000000, 0, -2739); (Tag1 (0, (Tag1 (0, ((("v")), 100000000, 0, -2745), (Tag1 (0, ((("v")), 100000000, 0, -2745), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -2749), 0), 100000000, 0, -2748), 0), 100000000, 0, -2747), (Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2738); ((("v")), 100000000, 0, -2745); ((("cmp")), 100000000, 0, -2739)], (0)), 100000000, 0, -2746), (Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2738); ((("v")), 100000000, 0, -2745); ((("cmp")), 100000000, 0, -2739)], (0)), 100000000, 0, -2744), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -2743), 0), 100000000, 0, -2742), 0), 100000000, 0, -2741), 0), 100000000, 0, -2740)], (0)), 100000000, 0, -2737), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 227)), 0); (("equal", 3759), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -2725); ((("cmp")), 100000000, 0, -2726); (Tag1 (0, (Tag1 (0, ((("v")), 100000000, 0, -2732), (Tag1 (0, ((("v")), 100000000, 0, -2732), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2736), 0), 100000000, 0, -2735), 0), 100000000, 0, -2734), (Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2725); ((("v")), 100000000, 0, -2732); ((("cmp")), 100000000, 0, -2726)], (0)), 100000000, 0, -2733), (Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2725); ((("v")), 100000000, 0, -2732); ((("cmp")), 100000000, 0, -2726)], (0)), 100000000, 0, -2731), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2730), 0), 100000000, 0, -2729), 0), 100000000, 0, -2728), 0), 100000000, 0, -2727)], (0)), 100000000, 0, -2724), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 228)), 0); (("keys", 3760), ((Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2720); ((0), 100000000, 0, -2722); ((0), 100000000, 0, -2723)], (0)), 100000000, 0, -2721), (Tag3 ((Tag3 ("list", 9)), [((("k")), 100000000, 0, -2720)], (0)), 100000000, 0, -2719), 0), 100000000, 0, -2718), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 229)), 0); (("data", 3761), ((Tag1 (0, (Tag3 ((("t", 3691)), [((0), 100000000, 0, -2716); ((("v")), 100000000, 0, -2714); ((0), 100000000, 0, -2717)], (0)), 100000000, 0, -2715), (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -2714)], (0)), 100000000, 0, -2713), 0), 100000000, 0, -2712), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 230)), 0); (("to_alist", 3762), ((Tag1 (Tag1 ("key_order"), (Tag3 ((Tag3 ("option", 10)), [(Tag8 (([("Decreasing", (0)); ("Increasing", (0))], (0, 100000000, 0, -2711), 1, 0, 0)), 100000000, 0, -2710)], (0)), 100000000, 0, -2709), (Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2705); ((("v")), 100000000, 0, -2706); ((0), 100000000, 0, -2708)], (0)), 100000000, 0, -2707), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("k")), 100000000, 0, -2705); ((("v")), 100000000, 0, -2706)]), 100000000, 0, -2704)], (0)), 100000000, 0, -2703), 0), 100000000, 0, -2702), 0), 100000000, 0, -2701), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 231)), 0); (("merge", 3763), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -2686); ((("cmp")), 100000000, 0, -2687); (Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2686); ((("v1")), 100000000, 0, -2697); ((("cmp")), 100000000, 0, -2687)], (0)), 100000000, 0, -2700), (Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2686); ((("v2")), 100000000, 0, -2698); ((("cmp")), 100000000, 0, -2687)], (0)), 100000000, 0, -2699), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -2686), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Merge_element"), "t"), [((("v1")), 100000000, 0, -2697); ((("v2")), 100000000, 0, -2698)], (0)), 100000000, 0, -2696), (Tag3 ((Tag3 ("option", 10)), [((("v3")), 100000000, 0, -2692)], (0)), 100000000, 0, -2695), 0), 100000000, 0, -2694), 0), 100000000, 0, -2693), (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2686); ((("v3")), 100000000, 0, -2692); ((("cmp")), 100000000, 0, -2687)], (0)), 100000000, 0, -2691), 0), 100000000, 0, -2690), 0), 100000000, 0, -2689), 0), 100000000, 0, -2688)], (0)), 100000000, 0, -2685), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 232)), 0); (("merge_skewed", 3764), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -2673); ((("cmp")), 100000000, 0, -2674); (Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2673); ((("v")), 100000000, 0, -2679); ((("cmp")), 100000000, 0, -2674)], (0)), 100000000, 0, -2684), (Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2673); ((("v")), 100000000, 0, -2679); ((("cmp")), 100000000, 0, -2674)], (0)), 100000000, 0, -2683), (Tag1 (("combine"), (Tag1 (("key"), ((("k")), 100000000, 0, -2673), (Tag1 (0, ((("v")), 100000000, 0, -2679), (Tag1 (0, ((("v")), 100000000, 0, -2679), ((("v")), 100000000, 0, -2679), 0), 100000000, 0, -2682), 0), 100000000, 0, -2681), 0), 100000000, 0, -2680), (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2673); ((("v")), 100000000, 0, -2679); ((("cmp")), 100000000, 0, -2674)], (0)), 100000000, 0, -2678), 0), 100000000, 0, -2677), 0), 100000000, 0, -2676), 0), 100000000, 0, -2675)], (0)), 100000000, 0, -2672), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 233)), 0); (("symmetric_diff", 3765), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -2659); ((("cmp")), 100000000, 0, -2660); (Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2659); ((("v")), 100000000, 0, -2666); ((("cmp")), 100000000, 0, -2660)], (0)), 100000000, 0, -2671), (Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2659); ((("v")), 100000000, 0, -2666); ((("cmp")), 100000000, 0, -2660)], (0)), 100000000, 0, -2670), (Tag1 (("data_equal"), (Tag1 (0, ((("v")), 100000000, 0, -2666), (Tag1 (0, ((("v")), 100000000, 0, -2666), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2669), 0), 100000000, 0, -2668), 0), 100000000, 0, -2667), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Symmetric_diff_element"), "t"), [((("k")), 100000000, 0, -2659); ((("v")), 100000000, 0, -2666)], (0)), 100000000, 0, -2665)], (0)), 100000000, 0, -2664), 0), 100000000, 0, -2663), 0), 100000000, 0, -2662), 0), 100000000, 0, -2661)], (0)), 100000000, 0, -2658), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 234)), 0); (("fold_symmetric_diff", 3766), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -2641); ((("cmp")), 100000000, 0, -2642); (Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2641); ((("v")), 100000000, 0, -2652); ((("cmp")), 100000000, 0, -2642)], (0)), 100000000, 0, -2657), (Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2641); ((("v")), 100000000, 0, -2652); ((("cmp")), 100000000, 0, -2642)], (0)), 100000000, 0, -2656), (Tag1 (("data_equal"), (Tag1 (0, ((("v")), 100000000, 0, -2652), (Tag1 (0, ((("v")), 100000000, 0, -2652), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2655), 0), 100000000, 0, -2654), 0), 100000000, 0, -2653), (Tag1 (("init"), ((("acc")), 100000000, 0, -2648), (Tag1 (("f"), (Tag1 (0, ((("acc")), 100000000, 0, -2648), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Symmetric_diff_element"), "t"), [((("k")), 100000000, 0, -2641); ((("v")), 100000000, 0, -2652)], (0)), 100000000, 0, -2651), ((("acc")), 100000000, 0, -2648), 0), 100000000, 0, -2650), 0), 100000000, 0, -2649), ((("acc")), 100000000, 0, -2648), 0), 100000000, 0, -2647), 0), 100000000, 0, -2646), 0), 100000000, 0, -2645), 0), 100000000, 0, -2644), 0), 100000000, 0, -2643)], (0)), 100000000, 0, -2640), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 235)), 0); (("min_elt", 3767), ((Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2636); ((("v")), 100000000, 0, -2637); ((0), 100000000, 0, -2639)], (0)), 100000000, 0, -2638), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([((("k")), 100000000, 0, -2636); ((("v")), 100000000, 0, -2637)]), 100000000, 0, -2635)], (0)), 100000000, 0, -2634), 0), 100000000, 0, -2633), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 236)), 0); (("min_elt_exn", 3768), ((Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2629); ((("v")), 100000000, 0, -2630); ((0), 100000000, 0, -2632)], (0)), 100000000, 0, -2631), (Tag2 ([((("k")), 100000000, 0, -2629); ((("v")), 100000000, 0, -2630)]), 100000000, 0, -2628), 0), 100000000, 0, -2627), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 237)), 0); (("max_elt", 3769), ((Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2623); ((("v")), 100000000, 0, -2624); ((0), 100000000, 0, -2626)], (0)), 100000000, 0, -2625), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([((("k")), 100000000, 0, -2623); ((("v")), 100000000, 0, -2624)]), 100000000, 0, -2622)], (0)), 100000000, 0, -2621), 0), 100000000, 0, -2620), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 238)), 0); (("max_elt_exn", 3770), ((Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2616); ((("v")), 100000000, 0, -2617); ((0), 100000000, 0, -2619)], (0)), 100000000, 0, -2618), (Tag2 ([((("k")), 100000000, 0, -2616); ((("v")), 100000000, 0, -2617)]), 100000000, 0, -2615), 0), 100000000, 0, -2614), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 239)), 0); (("for_all", 3771), ((Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2612); ((("v")), 100000000, 0, -2610); ((0), 100000000, 0, -2613)], (0)), 100000000, 0, -2611), (Tag1 (("f"), (Tag1 (0, ((("v")), 100000000, 0, -2610), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2609), 0), 100000000, 0, -2608), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2607), 0), 100000000, 0, -2606), 0), 100000000, 0, -2605), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 240)), 0); (("for_alli", 3772), ((Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2602); ((("v")), 100000000, 0, -2601); ((0), 100000000, 0, -2604)], (0)), 100000000, 0, -2603), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -2602), (Tag1 (("data"), ((("v")), 100000000, 0, -2601), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2600), 0), 100000000, 0, -2599), 0), 100000000, 0, -2598), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2597), 0), 100000000, 0, -2596), 0), 100000000, 0, -2595), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 241)), 0); (("exists", 3773), ((Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2593); ((("v")), 100000000, 0, -2591); ((0), 100000000, 0, -2594)], (0)), 100000000, 0, -2592), (Tag1 (("f"), (Tag1 (0, ((("v")), 100000000, 0, -2591), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2590), 0), 100000000, 0, -2589), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2588), 0), 100000000, 0, -2587), 0), 100000000, 0, -2586), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 242)), 0); (("existsi", 3774), ((Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2583); ((("v")), 100000000, 0, -2582); ((0), 100000000, 0, -2585)], (0)), 100000000, 0, -2584), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -2583), (Tag1 (("data"), ((("v")), 100000000, 0, -2582), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2581), 0), 100000000, 0, -2580), 0), 100000000, 0, -2579), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2578), 0), 100000000, 0, -2577), 0), 100000000, 0, -2576), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 243)), 0); (("count", 3775), ((Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2574); ((("v")), 100000000, 0, -2572); ((0), 100000000, 0, -2575)], (0)), 100000000, 0, -2573), (Tag1 (("f"), (Tag1 (0, ((("v")), 100000000, 0, -2572), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2571), 0), 100000000, 0, -2570), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -2569), 0), 100000000, 0, -2568), 0), 100000000, 0, -2567), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 244)), 0); (("counti", 3776), ((Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2564); ((("v")), 100000000, 0, -2563); ((0), 100000000, 0, -2566)], (0)), 100000000, 0, -2565), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -2564), (Tag1 (("data"), ((("v")), 100000000, 0, -2563), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2562), 0), 100000000, 0, -2561), 0), 100000000, 0, -2560), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -2559), 0), 100000000, 0, -2558), 0), 100000000, 0, -2557), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 245)), 0); (("split", 3777), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -2546); ((("cmp")), 100000000, 0, -2547); (Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2546); ((("v")), 100000000, 0, -2552); ((("cmp")), 100000000, 0, -2547)], (0)), 100000000, 0, -2556), (Tag1 (0, ((("k")), 100000000, 0, -2546), (Tag2 ([(Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2546); ((("v")), 100000000, 0, -2552); ((("cmp")), 100000000, 0, -2547)], (0)), 100000000, 0, -2551); (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([((("k")), 100000000, 0, -2546); ((("v")), 100000000, 0, -2552)]), 100000000, 0, -2554)], (0)), 100000000, 0, -2553); (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2546); ((("v")), 100000000, 0, -2552); ((("cmp")), 100000000, 0, -2547)], (0)), 100000000, 0, -2555)]), 100000000, 0, -2550), 0), 100000000, 0, -2549), 0), 100000000, 0, -2548)], (0)), 100000000, 0, -2545), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 246)), 0); (("split_le_gt", 3778), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -2536); ((("cmp")), 100000000, 0, -2537); (Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2536); ((("v")), 100000000, 0, -2542); ((("cmp")), 100000000, 0, -2537)], (0)), 100000000, 0, -2544), (Tag1 (0, ((("k")), 100000000, 0, -2536), (Tag2 ([(Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2536); ((("v")), 100000000, 0, -2542); ((("cmp")), 100000000, 0, -2537)], (0)), 100000000, 0, -2541); (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2536); ((("v")), 100000000, 0, -2542); ((("cmp")), 100000000, 0, -2537)], (0)), 100000000, 0, -2543)]), 100000000, 0, -2540), 0), 100000000, 0, -2539), 0), 100000000, 0, -2538)], (0)), 100000000, 0, -2535), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 247)), 0); (("split_lt_ge", 3779), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -2526); ((("cmp")), 100000000, 0, -2527); (Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2526); ((("v")), 100000000, 0, -2532); ((("cmp")), 100000000, 0, -2527)], (0)), 100000000, 0, -2534), (Tag1 (0, ((("k")), 100000000, 0, -2526), (Tag2 ([(Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2526); ((("v")), 100000000, 0, -2532); ((("cmp")), 100000000, 0, -2527)], (0)), 100000000, 0, -2531); (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2526); ((("v")), 100000000, 0, -2532); ((("cmp")), 100000000, 0, -2527)], (0)), 100000000, 0, -2533)]), 100000000, 0, -2530), 0), 100000000, 0, -2529), 0), 100000000, 0, -2528)], (0)), 100000000, 0, -2525), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 248)), 0); (("append", 3780), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -2515); ((("cmp")), 100000000, 0, -2516); (Tag1 (("lower_part"), (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2515); ((("v")), 100000000, 0, -2522); ((("cmp")), 100000000, 0, -2516)], (0)), 100000000, 0, -2524), (Tag1 (("upper_part"), (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2515); ((("v")), 100000000, 0, -2522); ((("cmp")), 100000000, 0, -2516)], (0)), 100000000, 0, -2523), (Tag8 (([("Ok", (((Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2515); ((("v")), 100000000, 0, -2522); ((("cmp")), 100000000, 0, -2516)], (0)), 100000000, 0, -2521)))); ("Overlapping_key_ranges", (0))], (0, 100000000, 0, -2520), 1, 0, 0)), 100000000, 0, -2519), 0), 100000000, 0, -2518), 0), 100000000, 0, -2517)], (0)), 100000000, 0, -2514), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 249)), 0); (("subrange", 3781), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -2504); ((("cmp")), 100000000, 0, -2505); (Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2504); ((("v")), 100000000, 0, -2510); ((("cmp")), 100000000, 0, -2505)], (0)), 100000000, 0, -2513), (Tag1 (("lower_bound"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Maybe_bound"), "t"), [((("k")), 100000000, 0, -2504)], (0)), 100000000, 0, -2512), (Tag1 (("upper_bound"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Maybe_bound"), "t"), [((("k")), 100000000, 0, -2504)], (0)), 100000000, 0, -2511), (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2504); ((("v")), 100000000, 0, -2510); ((("cmp")), 100000000, 0, -2505)], (0)), 100000000, 0, -2509), 0), 100000000, 0, -2508), 0), 100000000, 0, -2507), 0), 100000000, 0, -2506)], (0)), 100000000, 0, -2503), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 250)), 0); (("fold_range_inclusive", 3782), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -2490); ((("cmp")), 100000000, 0, -2491); (Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2490); ((("v")), 100000000, 0, -2501); ((("cmp")), 100000000, 0, -2491)], (0)), 100000000, 0, -2502), (Tag1 (("min"), ((("k")), 100000000, 0, -2490), (Tag1 (("max"), ((("k")), 100000000, 0, -2490), (Tag1 (("init"), ((("acc")), 100000000, 0, -2497), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -2490), (Tag1 (("data"), ((("v")), 100000000, 0, -2501), (Tag1 (0, ((("acc")), 100000000, 0, -2497), ((("acc")), 100000000, 0, -2497), 0), 100000000, 0, -2500), 0), 100000000, 0, -2499), 0), 100000000, 0, -2498), ((("acc")), 100000000, 0, -2497), 0), 100000000, 0, -2496), 0), 100000000, 0, -2495), 0), 100000000, 0, -2494), 0), 100000000, 0, -2493), 0), 100000000, 0, -2492)], (0)), 100000000, 0, -2489), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 251)), 0); (("range_to_alist", 3783), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -2480); ((("cmp")), 100000000, 0, -2481); (Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2480); ((("v")), 100000000, 0, -2487); ((("cmp")), 100000000, 0, -2481)], (0)), 100000000, 0, -2488), (Tag1 (("min"), ((("k")), 100000000, 0, -2480), (Tag1 (("max"), ((("k")), 100000000, 0, -2480), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("k")), 100000000, 0, -2480); ((("v")), 100000000, 0, -2487)]), 100000000, 0, -2486)], (0)), 100000000, 0, -2485), 0), 100000000, 0, -2484), 0), 100000000, 0, -2483), 0), 100000000, 0, -2482)], (0)), 100000000, 0, -2479), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 252)), 0); (("closest_key", 3784), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -2468); ((("cmp")), 100000000, 0, -2469); (Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2468); ((("v")), 100000000, 0, -2475); ((("cmp")), 100000000, 0, -2469)], (0)), 100000000, 0, -2478), (Tag1 (0, (Tag8 (([("Greater_or_equal_to", (0)); ("Greater_than", (0)); ("Less_or_equal_to", (0)); ("Less_than", (0))], (0, 100000000, 0, -2477), 1, 0, 0)), 100000000, 0, -2476), (Tag1 (0, ((("k")), 100000000, 0, -2468), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([((("k")), 100000000, 0, -2468); ((("v")), 100000000, 0, -2475)]), 100000000, 0, -2474)], (0)), 100000000, 0, -2473), 0), 100000000, 0, -2472), 0), 100000000, 0, -2471), 0), 100000000, 0, -2470)], (0)), 100000000, 0, -2467), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 253)), 0); (("nth", 3785), ((Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2462); ((("v")), 100000000, 0, -2463); ((("cmp")), 100000000, 0, -2466)], (0)), 100000000, 0, -2465), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -2464), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([((("k")), 100000000, 0, -2462); ((("v")), 100000000, 0, -2463)]), 100000000, 0, -2461)], (0)), 100000000, 0, -2460), 0), 100000000, 0, -2459), 0), 100000000, 0, -2458), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 254)), 0); (("nth_exn", 3786), ((Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2453); ((("v")), 100000000, 0, -2454); ((("cmp")), 100000000, 0, -2457)], (0)), 100000000, 0, -2456), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -2455), (Tag2 ([((("k")), 100000000, 0, -2453); ((("v")), 100000000, 0, -2454)]), 100000000, 0, -2452), 0), 100000000, 0, -2451), 0), 100000000, 0, -2450), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 255)), 0); (("rank", 3787), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -2442); ((("cmp")), 100000000, 0, -2443); (Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2442); ((0), 100000000, 0, -2449); ((("cmp")), 100000000, 0, -2443)], (0)), 100000000, 0, -2448), (Tag1 (0, ((("k")), 100000000, 0, -2442), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -2447)], (0)), 100000000, 0, -2446), 0), 100000000, 0, -2445), 0), 100000000, 0, -2444)], (0)), 100000000, 0, -2441), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 256)), 0); (("to_tree", 3788), ((Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2437); ((("v")), 100000000, 0, -2438); ((("cmp")), 100000000, 0, -2439)], (0)), 100000000, 0, -2440), (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2437); ((("v")), 100000000, 0, -2438); ((("cmp")), 100000000, 0, -2439)], (0)), 100000000, 0, -2436), 0), 100000000, 0, -2435), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 257)), 0); (("to_sequence", 3789), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -2420); ((("cmp")), 100000000, 0, -2421); (Tag1 (Tag1 ("order"), (Tag3 ((Tag3 ("option", 10)), [(Tag8 (([("Decreasing_key", (0)); ("Increasing_key", (0))], (0, 100000000, 0, -2434), 1, 0, 0)), 100000000, 0, -2433)], (0)), 100000000, 0, -2432), (Tag1 (Tag1 ("keys_greater_or_equal_to"), (Tag3 ((Tag3 ("option", 10)), [((("k")), 100000000, 0, -2420)], (0)), 100000000, 0, -2431), (Tag1 (Tag1 ("keys_less_or_equal_to"), (Tag3 ((Tag3 ("option", 10)), [((("k")), 100000000, 0, -2420)], (0)), 100000000, 0, -2430), (Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2420); ((("v")), 100000000, 0, -2428); ((("cmp")), 100000000, 0, -2421)], (0)), 100000000, 0, -2429), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag2 ([((("k")), 100000000, 0, -2420); ((("v")), 100000000, 0, -2428)]), 100000000, 0, -2427)], (0)), 100000000, 0, -2426), 0), 100000000, 0, -2425), 0), 100000000, 0, -2424), 0), 100000000, 0, -2423), 0), 100000000, 0, -2422)], (0)), 100000000, 0, -2419), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 258)), 0); (("binary_search", 3790), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -2403); ((("cmp")), 100000000, 0, -2404); (Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2403); ((("v")), 100000000, 0, -2411); ((("cmp")), 100000000, 0, -2404)], (0)), 100000000, 0, -2418), (Tag1 (("compare"), (Tag1 (("key"), ((("k")), 100000000, 0, -2403), (Tag1 (("data"), ((("v")), 100000000, 0, -2411), (Tag1 (0, ((("key")), 100000000, 0, -2412), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -2417), 0), 100000000, 0, -2416), 0), 100000000, 0, -2415), 0), 100000000, 0, -2414), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Binary_searchable"), "Which_target_by_key"), "t"), 0, (0)), 100000000, 0, -2413), (Tag1 (0, ((("key")), 100000000, 0, -2412), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([((("k")), 100000000, 0, -2403); ((("v")), 100000000, 0, -2411)]), 100000000, 0, -2410)], (0)), 100000000, 0, -2409), 0), 100000000, 0, -2408), 0), 100000000, 0, -2407), 0), 100000000, 0, -2406), 0), 100000000, 0, -2405)], (0)), 100000000, 0, -2402), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 259)), 0); (("binary_search_segmented", 3791), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -2388); ((("cmp")), 100000000, 0, -2389); (Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2388); ((("v")), 100000000, 0, -2395); ((("cmp")), 100000000, 0, -2389)], (0)), 100000000, 0, -2401), (Tag1 (("segment_of"), (Tag1 (("key"), ((("k")), 100000000, 0, -2388), (Tag1 (("data"), ((("v")), 100000000, 0, -2395), (Tag8 (([("Left", (0)); ("Right", (0))], (0, 100000000, 0, -2400), 1, 0, 0)), 100000000, 0, -2399), 0), 100000000, 0, -2398), 0), 100000000, 0, -2397), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Binary_searchable"), "Which_target_by_segment"), "t"), 0, (0)), 100000000, 0, -2396), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([((("k")), 100000000, 0, -2388); ((("v")), 100000000, 0, -2395)]), 100000000, 0, -2394)], (0)), 100000000, 0, -2393), 0), 100000000, 0, -2392), 0), 100000000, 0, -2391), 0), 100000000, 0, -2390)], (0)), 100000000, 0, -2387), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 260)), 0); (("binary_search_subrange", 3792), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -2371); ((("cmp")), 100000000, 0, -2372); (Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2371); ((("v")), 100000000, 0, -2378); ((("cmp")), 100000000, 0, -2372)], (0)), 100000000, 0, -2386), (Tag1 (("compare"), (Tag1 (("key"), ((("k")), 100000000, 0, -2371), (Tag1 (("data"), ((("v")), 100000000, 0, -2378), (Tag1 (0, ((("bound")), 100000000, 0, -2380), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -2385), 0), 100000000, 0, -2384), 0), 100000000, 0, -2383), 0), 100000000, 0, -2382), (Tag1 (("lower_bound"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Maybe_bound"), "t"), [((("bound")), 100000000, 0, -2380)], (0)), 100000000, 0, -2381), (Tag1 (("upper_bound"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Maybe_bound"), "t"), [((("bound")), 100000000, 0, -2380)], (0)), 100000000, 0, -2379), (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -2371); ((("v")), 100000000, 0, -2378); ((("cmp")), 100000000, 0, -2372)], (0)), 100000000, 0, -2377), 0), 100000000, 0, -2376), 0), 100000000, 0, -2375), 0), 100000000, 0, -2374), 0), 100000000, 0, -2373)], (0)), 100000000, 0, -2370), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 261)), 0); Tag3 (("Make_applicative_traversals", 3793), 0, (Tag2 (((("A", 3796)), (Tag1 (Tag1 ((Tag2 ("Base__")), "Applicative"), "Lazy_applicative"))), Tag1 ([(("mapi", 3797), ((Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3439); ((("v1")), 100000000, 0, -3445); ((("cmp")), 100000000, 0, -3441)], (0)), 100000000, 0, -3446), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -3439), (Tag1 (("data"), ((("v1")), 100000000, 0, -3445), (Tag3 (Tag1 ((("A", 3796)), "t"), [((("v2")), 100000000, 0, -3440)], (0)), 100000000, 0, -3444), 0), 100000000, 0, -3443), 0), 100000000, 0, -3442), (Tag3 (Tag1 ((("A", 3796)), "t"), [(Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3439); ((("v2")), 100000000, 0, -3440); ((("cmp")), 100000000, 0, -3441)], (0)), 100000000, 0, -3438)], (0)), 100000000, 0, -3437), 0), 100000000, 0, -3436), 0), 100000000, 0, -3435), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 263)), 0); (("filter_mapi", 3798), ((Tag1 (0, (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3426); ((("v1")), 100000000, 0, -3433); ((("cmp")), 100000000, 0, -3428)], (0)), 100000000, 0, -3434), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -3426), (Tag1 (("data"), ((("v1")), 100000000, 0, -3433), (Tag3 (Tag1 ((("A", 3796)), "t"), [(Tag3 ((Tag3 ("option", 10)), [((("v2")), 100000000, 0, -3427)], (0)), 100000000, 0, -3432)], (0)), 100000000, 0, -3431), 0), 100000000, 0, -3430), 0), 100000000, 0, -3429), (Tag3 (Tag1 ((("A", 3796)), "t"), [(Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3426); ((("v2")), 100000000, 0, -3427); ((("cmp")), 100000000, 0, -3428)], (0)), 100000000, 0, -3425)], (0)), 100000000, 0, -3424), 0), 100000000, 0, -3423), 0), 100000000, 0, -3422), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), 0, Tag1 ("Base__Map_intf", 264)), 0)])), 0, (("src/map_intf.ml", 1910, 64845, 64853), ("src/map_intf.ml", 1916, 65131, 65210), 0), Tag1 ("Base__Map_intf", 265)), 0, 0); (("empty_without_value_restriction", 3794), ((Tag3 ((("t", 3691)), [((0), 100000000, 0, -2367); ((0), 100000000, 0, -2368); ((0), 100000000, 0, -2369)], (0)), 100000000, 0, -2366), 0, (("src/map_intf.ml", 1918, 65212, 65218), ("src/map_intf.ml", 1918, 65212, 65267), 0), 0, Tag1 ("Base__Map_intf", 508)), 0); Tag3 (("Build_increasing", 3795), 0, (Tag1 ([Tag1 (("t", 3799), ([((("k")), 100000000, 0, -3467); ((("v")), 100000000, 0, -3468); ((("w")), 100000000, 0, -3469)], 3, 0, 1, 0, [7; 7; 7], [2; 2; 2], 0, 0, (("src/map_intf.ml", 1931, 65912, 65920), ("src/map_intf.ml", 1931, 65912, 65939), 0), 0, 0, 0, Tag1 ("Base__Map_intf", 510)), 1, 0); (("empty", 3800), ((Tag3 ((("t", 3799)), [((("k")), 100000000, 0, -3464); ((("v")), 100000000, 0, -3465); ((("w")), 100000000, 0, -3466)], (0)), 100000000, 0, -3463), 0, (("src/map_intf.ml", 1933, 65941, 65949), ("src/map_intf.ml", 1933, 65941, 65975), 0), 0, Tag1 ("Base__Map_intf", 511)), 0); (("add_exn", 3801), ((Tag1 (0, (Tag3 ((("t", 3799)), [((("k")), 100000000, 0, -3458); ((("v")), 100000000, 0, -3459); ((("w")), 100000000, 0, -3460)], (0)), 100000000, 0, -3462), (Tag1 (("comparator"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "t"), [((("k")), 100000000, 0, -3458); ((("w")), 100000000, 0, -3460)], (0)), 100000000, 0, -3461), (Tag1 (("key"), ((("k")), 100000000, 0, -3458), (Tag1 (("data"), ((("v")), 100000000, 0, -3459), (Tag3 ((("t", 3799)), [((("k")), 100000000, 0, -3458); ((("v")), 100000000, 0, -3459); ((("w")), 100000000, 0, -3460)], (0)), 100000000, 0, -3457), 0), 100000000, 0, -3456), 0), 100000000, 0, -3455), 0), 100000000, 0, -3454), 0), 100000000, 0, -3453), 0, (("src/map_intf.ml", 1937, 66121, 66129), ("src/map_intf.ml", 1942, 66256, 66283), 0), 0, Tag1 ("Base__Map_intf", 512)), 0); (("to_tree", 3802), ((Tag1 (0, (Tag3 ((("t", 3799)), [((("k")), 100000000, 0, -3449); ((("v")), 100000000, 0, -3450); ((("w")), 100000000, 0, -3451)], (0)), 100000000, 0, -3452), (Tag3 ((("t", 3691)), [((("k")), 100000000, 0, -3449); ((("v")), 100000000, 0, -3450); ((("w")), 100000000, 0, -3451)], (0)), 100000000, 0, -3448), 0), 100000000, 0, -3447), 0, (("src/map_intf.ml", 1945, 66330, 66338), ("src/map_intf.ml", 1945, 66330, 66387), 0), 0, Tag1 ("Base__Map_intf", 513)), 0)]), 0, (("src/map_intf.ml", 1929, 65827, 65833), ("src/map_intf.ml", 1946, 66388, 66397), 0), Tag1 ("Base__Map_intf", 514)), 0, 0)]), 0, (("src/map_intf.ml", 1890, 64379, 64383), ("src/map_intf.ml", 1947, 66398, 66405), 0), Tag1 ("Base__Map_intf", 515)), 0, 0); (("empty", 3586), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -2329); ((("cmp")), 100000000, 0, -2330); (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -2329); ((0), 100000000, 0, -2332); ((("cmp")), 100000000, 0, -2330)], (0)), 100000000, 0, -2331)], (0)), 100000000, 0, -2328), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 273)), 0); (("singleton", 3587), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -2322); ((("cmp")), 100000000, 0, -2323); (Tag1 (0, ((("k")), 100000000, 0, -2322), (Tag1 (0, ((("v")), 100000000, 0, -2327), (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -2322); ((("v")), 100000000, 0, -2327); ((("cmp")), 100000000, 0, -2323)], (0)), 100000000, 0, -2326), 0), 100000000, 0, -2325), 0), 100000000, 0, -2324)], (0)), 100000000, 0, -2321), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 274)), 0); (("map_keys", 3588), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k2")), 100000000, 0, -2309); ((("cmp2")), 100000000, 0, -2310); (Tag1 (0, (Tag3 ((("t", 3582)), [((("k1")), 100000000, 0, -2318); ((("v")), 100000000, 0, -2316); ((("cmp1")), 100000000, 0, -2320)], (0)), 100000000, 0, -2319), (Tag1 (("f"), (Tag1 (0, ((("k1")), 100000000, 0, -2318), ((("k2")), 100000000, 0, -2309), 0), 100000000, 0, -2317), (Tag8 (([("Duplicate_key", ((((("k2")), 100000000, 0, -2309)))); ("Ok", (((Tag3 ((("t", 3582)), [((("k2")), 100000000, 0, -2309); ((("v")), 100000000, 0, -2316); ((("cmp2")), 100000000, 0, -2310)], (0)), 100000000, 0, -2315))))], (0, 100000000, 0, -2314), 1, 0, 0)), 100000000, 0, -2313), 0), 100000000, 0, -2312), 0), 100000000, 0, -2311)], (0)), 100000000, 0, -2308), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 275)), 0); (("map_keys_exn", 3589), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k2")), 100000000, 0, -2298); ((("cmp2")), 100000000, 0, -2299); (Tag1 (0, (Tag3 ((("t", 3582)), [((("k1")), 100000000, 0, -2305); ((("v")), 100000000, 0, -2303); ((("cmp1")), 100000000, 0, -2307)], (0)), 100000000, 0, -2306), (Tag1 (("f"), (Tag1 (0, ((("k1")), 100000000, 0, -2305), ((("k2")), 100000000, 0, -2298), 0), 100000000, 0, -2304), (Tag3 ((("t", 3582)), [((("k2")), 100000000, 0, -2298); ((("v")), 100000000, 0, -2303); ((("cmp2")), 100000000, 0, -2299)], (0)), 100000000, 0, -2302), 0), 100000000, 0, -2301), 0), 100000000, 0, -2300)], (0)), 100000000, 0, -2297), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 276)), 0); (("transpose_keys", 3590), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k1")), 100000000, 0, -2286); ((("cmp1")), 100000000, 0, -2287); (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k2")), 100000000, 0, -2289); ((("cmp2")), 100000000, 0, -2290); (Tag1 (0, (Tag3 ((("t", 3582)), [((("k1")), 100000000, 0, -2286); (Tag3 ((("t", 3582)), [((("k2")), 100000000, 0, -2289); ((("a")), 100000000, 0, -2294); ((("cmp2")), 100000000, 0, -2290)], (0)), 100000000, 0, -2296); ((("cmp1")), 100000000, 0, -2287)], (0)), 100000000, 0, -2295), (Tag3 ((("t", 3582)), [((("k2")), 100000000, 0, -2289); (Tag3 ((("t", 3582)), [((("k1")), 100000000, 0, -2286); ((("a")), 100000000, 0, -2294); ((("cmp1")), 100000000, 0, -2287)], (0)), 100000000, 0, -2293); ((("cmp2")), 100000000, 0, -2290)], (0)), 100000000, 0, -2292), 0), 100000000, 0, -2291)], (0)), 100000000, 0, -2288)], (0)), 100000000, 0, -2285), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 277)), 0); (("of_sorted_array", 3591), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -2277); ((("cmp")), 100000000, 0, -2278); (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag2 ([((("k")), 100000000, 0, -2277); ((("v")), 100000000, 0, -2282)]), 100000000, 0, -2284)], (0)), 100000000, 0, -2283), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -2277); ((("v")), 100000000, 0, -2282); ((("cmp")), 100000000, 0, -2278)], (0)), 100000000, 0, -2281)], (0)), 100000000, 0, -2280), 0), 100000000, 0, -2279)], (0)), 100000000, 0, -2276), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 278)), 0); (("of_sorted_array_unchecked", 3592), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -2269); ((("cmp")), 100000000, 0, -2270); (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag2 ([((("k")), 100000000, 0, -2269); ((("v")), 100000000, 0, -2273)]), 100000000, 0, -2275)], (0)), 100000000, 0, -2274), (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -2269); ((("v")), 100000000, 0, -2273); ((("cmp")), 100000000, 0, -2270)], (0)), 100000000, 0, -2272), 0), 100000000, 0, -2271)], (0)), 100000000, 0, -2268), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 279)), 0); (("of_increasing_iterator_unchecked", 3593), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -2258); ((("cmp")), 100000000, 0, -2259); (Tag1 (("len"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -2267), (Tag1 (("f"), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -2266), (Tag2 ([((("k")), 100000000, 0, -2258); ((("v")), 100000000, 0, -2263)]), 100000000, 0, -2265), 0), 100000000, 0, -2264), (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -2258); ((("v")), 100000000, 0, -2263); ((("cmp")), 100000000, 0, -2259)], (0)), 100000000, 0, -2262), 0), 100000000, 0, -2261), 0), 100000000, 0, -2260)], (0)), 100000000, 0, -2257), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 280)), 0); (("of_alist", 3594), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -2248); ((("cmp")), 100000000, 0, -2249); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("k")), 100000000, 0, -2248); ((("v")), 100000000, 0, -2254)]), 100000000, 0, -2256)], (0)), 100000000, 0, -2255), (Tag8 (([("Duplicate_key", ((((("k")), 100000000, 0, -2248)))); ("Ok", (((Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -2248); ((("v")), 100000000, 0, -2254); ((("cmp")), 100000000, 0, -2249)], (0)), 100000000, 0, -2253))))], (0, 100000000, 0, -2252), 1, 0, 0)), 100000000, 0, -2251), 0), 100000000, 0, -2250)], (0)), 100000000, 0, -2247), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 281)), 0); (("of_alist_or_error", 3595), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -2239); ((("cmp")), 100000000, 0, -2240); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("k")), 100000000, 0, -2239); ((("v")), 100000000, 0, -2244)]), 100000000, 0, -2246)], (0)), 100000000, 0, -2245), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -2239); ((("v")), 100000000, 0, -2244); ((("cmp")), 100000000, 0, -2240)], (0)), 100000000, 0, -2243)], (0)), 100000000, 0, -2242), 0), 100000000, 0, -2241)], (0)), 100000000, 0, -2238), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 282)), 0); (("of_alist_exn", 3596), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -2231); ((("cmp")), 100000000, 0, -2232); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("k")), 100000000, 0, -2231); ((("v")), 100000000, 0, -2235)]), 100000000, 0, -2237)], (0)), 100000000, 0, -2236), (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -2231); ((("v")), 100000000, 0, -2235); ((("cmp")), 100000000, 0, -2232)], (0)), 100000000, 0, -2234), 0), 100000000, 0, -2233)], (0)), 100000000, 0, -2230), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 283)), 0); (("of_alist_multi", 3597), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -2222); ((("cmp")), 100000000, 0, -2223); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("k")), 100000000, 0, -2222); ((("v")), 100000000, 0, -2227)]), 100000000, 0, -2229)], (0)), 100000000, 0, -2228), (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -2222); (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -2227)], (0)), 100000000, 0, -2226); ((("cmp")), 100000000, 0, -2223)], (0)), 100000000, 0, -2225), 0), 100000000, 0, -2224)], (0)), 100000000, 0, -2221), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 284)), 0); (("of_alist_fold", 3598), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -2209); ((("cmp")), 100000000, 0, -2210); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("k")), 100000000, 0, -2209); ((("v1")), 100000000, 0, -2218)]), 100000000, 0, -2220)], (0)), 100000000, 0, -2219), (Tag1 (("init"), ((("v2")), 100000000, 0, -2215), (Tag1 (("f"), (Tag1 (0, ((("v2")), 100000000, 0, -2215), (Tag1 (0, ((("v1")), 100000000, 0, -2218), ((("v2")), 100000000, 0, -2215), 0), 100000000, 0, -2217), 0), 100000000, 0, -2216), (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -2209); ((("v2")), 100000000, 0, -2215); ((("cmp")), 100000000, 0, -2210)], (0)), 100000000, 0, -2214), 0), 100000000, 0, -2213), 0), 100000000, 0, -2212), 0), 100000000, 0, -2211)], (0)), 100000000, 0, -2208), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 285)), 0); (("of_alist_reduce", 3599), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -2198); ((("cmp")), 100000000, 0, -2199); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("k")), 100000000, 0, -2198); ((("v")), 100000000, 0, -2203)]), 100000000, 0, -2207)], (0)), 100000000, 0, -2206), (Tag1 (("f"), (Tag1 (0, ((("v")), 100000000, 0, -2203), (Tag1 (0, ((("v")), 100000000, 0, -2203), ((("v")), 100000000, 0, -2203), 0), 100000000, 0, -2205), 0), 100000000, 0, -2204), (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -2198); ((("v")), 100000000, 0, -2203); ((("cmp")), 100000000, 0, -2199)], (0)), 100000000, 0, -2202), 0), 100000000, 0, -2201), 0), 100000000, 0, -2200)], (0)), 100000000, 0, -2197), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 286)), 0); (("of_increasing_sequence", 3600), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -2189); ((("cmp")), 100000000, 0, -2190); (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag2 ([((("k")), 100000000, 0, -2189); ((("v")), 100000000, 0, -2194)]), 100000000, 0, -2196)], (0)), 100000000, 0, -2195), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -2189); ((("v")), 100000000, 0, -2194); ((("cmp")), 100000000, 0, -2190)], (0)), 100000000, 0, -2193)], (0)), 100000000, 0, -2192), 0), 100000000, 0, -2191)], (0)), 100000000, 0, -2188), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 287)), 0); (("of_sequence", 3601), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -2179); ((("cmp")), 100000000, 0, -2180); (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag2 ([((("k")), 100000000, 0, -2179); ((("v")), 100000000, 0, -2185)]), 100000000, 0, -2187)], (0)), 100000000, 0, -2186), (Tag8 (([("Duplicate_key", ((((("k")), 100000000, 0, -2179)))); ("Ok", (((Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -2179); ((("v")), 100000000, 0, -2185); ((("cmp")), 100000000, 0, -2180)], (0)), 100000000, 0, -2184))))], (0, 100000000, 0, -2183), 1, 0, 0)), 100000000, 0, -2182), 0), 100000000, 0, -2181)], (0)), 100000000, 0, -2178), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 288)), 0); (("of_sequence_or_error", 3602), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -2170); ((("cmp")), 100000000, 0, -2171); (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag2 ([((("k")), 100000000, 0, -2170); ((("v")), 100000000, 0, -2175)]), 100000000, 0, -2177)], (0)), 100000000, 0, -2176), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -2170); ((("v")), 100000000, 0, -2175); ((("cmp")), 100000000, 0, -2171)], (0)), 100000000, 0, -2174)], (0)), 100000000, 0, -2173), 0), 100000000, 0, -2172)], (0)), 100000000, 0, -2169), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 289)), 0); (("of_sequence_exn", 3603), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -2162); ((("cmp")), 100000000, 0, -2163); (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag2 ([((("k")), 100000000, 0, -2162); ((("v")), 100000000, 0, -2166)]), 100000000, 0, -2168)], (0)), 100000000, 0, -2167), (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -2162); ((("v")), 100000000, 0, -2166); ((("cmp")), 100000000, 0, -2163)], (0)), 100000000, 0, -2165), 0), 100000000, 0, -2164)], (0)), 100000000, 0, -2161), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 290)), 0); (("of_sequence_multi", 3604), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -2153); ((("cmp")), 100000000, 0, -2154); (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag2 ([((("k")), 100000000, 0, -2153); ((("v")), 100000000, 0, -2158)]), 100000000, 0, -2160)], (0)), 100000000, 0, -2159), (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -2153); (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -2158)], (0)), 100000000, 0, -2157); ((("cmp")), 100000000, 0, -2154)], (0)), 100000000, 0, -2156), 0), 100000000, 0, -2155)], (0)), 100000000, 0, -2152), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 291)), 0); (("of_sequence_fold", 3605), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -2140); ((("cmp")), 100000000, 0, -2141); (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag2 ([((("k")), 100000000, 0, -2140); ((("v1")), 100000000, 0, -2149)]), 100000000, 0, -2151)], (0)), 100000000, 0, -2150), (Tag1 (("init"), ((("v2")), 100000000, 0, -2146), (Tag1 (("f"), (Tag1 (0, ((("v2")), 100000000, 0, -2146), (Tag1 (0, ((("v1")), 100000000, 0, -2149), ((("v2")), 100000000, 0, -2146), 0), 100000000, 0, -2148), 0), 100000000, 0, -2147), (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -2140); ((("v2")), 100000000, 0, -2146); ((("cmp")), 100000000, 0, -2141)], (0)), 100000000, 0, -2145), 0), 100000000, 0, -2144), 0), 100000000, 0, -2143), 0), 100000000, 0, -2142)], (0)), 100000000, 0, -2139), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 292)), 0); (("of_sequence_reduce", 3606), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -2129); ((("cmp")), 100000000, 0, -2130); (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag2 ([((("k")), 100000000, 0, -2129); ((("v")), 100000000, 0, -2134)]), 100000000, 0, -2138)], (0)), 100000000, 0, -2137), (Tag1 (("f"), (Tag1 (0, ((("v")), 100000000, 0, -2134), (Tag1 (0, ((("v")), 100000000, 0, -2134), ((("v")), 100000000, 0, -2134), 0), 100000000, 0, -2136), 0), 100000000, 0, -2135), (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -2129); ((("v")), 100000000, 0, -2134); ((("cmp")), 100000000, 0, -2130)], (0)), 100000000, 0, -2133), 0), 100000000, 0, -2132), 0), 100000000, 0, -2131)], (0)), 100000000, 0, -2128), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 293)), 0); (("of_list_with_key", 3607), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -2118); ((("cmp")), 100000000, 0, -2119); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -2125)], (0)), 100000000, 0, -2127), (Tag1 (("get_key"), (Tag1 (0, ((("v")), 100000000, 0, -2125), ((("k")), 100000000, 0, -2118), 0), 100000000, 0, -2126), (Tag8 (([("Duplicate_key", ((((("k")), 100000000, 0, -2118)))); ("Ok", (((Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -2118); ((("v")), 100000000, 0, -2125); ((("cmp")), 100000000, 0, -2119)], (0)), 100000000, 0, -2124))))], (0, 100000000, 0, -2123), 1, 0, 0)), 100000000, 0, -2122), 0), 100000000, 0, -2121), 0), 100000000, 0, -2120)], (0)), 100000000, 0, -2117), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 294)), 0); (("of_list_with_key_or_error", 3608), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -2108); ((("cmp")), 100000000, 0, -2109); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -2114)], (0)), 100000000, 0, -2116), (Tag1 (("get_key"), (Tag1 (0, ((("v")), 100000000, 0, -2114), ((("k")), 100000000, 0, -2108), 0), 100000000, 0, -2115), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -2108); ((("v")), 100000000, 0, -2114); ((("cmp")), 100000000, 0, -2109)], (0)), 100000000, 0, -2113)], (0)), 100000000, 0, -2112), 0), 100000000, 0, -2111), 0), 100000000, 0, -2110)], (0)), 100000000, 0, -2107), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 295)), 0); (("of_list_with_key_exn", 3609), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -2099); ((("cmp")), 100000000, 0, -2100); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -2104)], (0)), 100000000, 0, -2106), (Tag1 (("get_key"), (Tag1 (0, ((("v")), 100000000, 0, -2104), ((("k")), 100000000, 0, -2099), 0), 100000000, 0, -2105), (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -2099); ((("v")), 100000000, 0, -2104); ((("cmp")), 100000000, 0, -2100)], (0)), 100000000, 0, -2103), 0), 100000000, 0, -2102), 0), 100000000, 0, -2101)], (0)), 100000000, 0, -2098), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 296)), 0); (("of_list_with_key_multi", 3610), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -2089); ((("cmp")), 100000000, 0, -2090); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -2095)], (0)), 100000000, 0, -2097), (Tag1 (("get_key"), (Tag1 (0, ((("v")), 100000000, 0, -2095), ((("k")), 100000000, 0, -2089), 0), 100000000, 0, -2096), (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -2089); (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -2095)], (0)), 100000000, 0, -2094); ((("cmp")), 100000000, 0, -2090)], (0)), 100000000, 0, -2093), 0), 100000000, 0, -2092), 0), 100000000, 0, -2091)], (0)), 100000000, 0, -2088), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 297)), 0); (("of_iteri", 3611), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -2076); ((("cmp")), 100000000, 0, -2077); (Tag1 (("iteri"), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -2076), (Tag1 (("data"), ((("v")), 100000000, 0, -2082), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2087), 0), 100000000, 0, -2086), 0), 100000000, 0, -2085), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2084), 0), 100000000, 0, -2083), (Tag8 (([("Duplicate_key", ((((("k")), 100000000, 0, -2076)))); ("Ok", (((Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -2076); ((("v")), 100000000, 0, -2082); ((("cmp")), 100000000, 0, -2077)], (0)), 100000000, 0, -2081))))], (0, 100000000, 0, -2080), 1, 0, 0)), 100000000, 0, -2079), 0), 100000000, 0, -2078)], (0)), 100000000, 0, -2075), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 298)), 0); (("of_iteri_exn", 3612), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -2065); ((("cmp")), 100000000, 0, -2066); (Tag1 (("iteri"), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -2065), (Tag1 (("data"), ((("v")), 100000000, 0, -2069), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2074), 0), 100000000, 0, -2073), 0), 100000000, 0, -2072), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2071), 0), 100000000, 0, -2070), (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -2065); ((("v")), 100000000, 0, -2069); ((("cmp")), 100000000, 0, -2066)], (0)), 100000000, 0, -2068), 0), 100000000, 0, -2067)], (0)), 100000000, 0, -2064), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 299)), 0); (("of_tree", 3613), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator"), "t"), [((("k")), 100000000, 0, -2058); ((("cmp")), 100000000, 0, -2059); (Tag1 (0, (Tag3 (Tag1 ((("Tree", 3585)), "t"), [((("k")), 100000000, 0, -2058); ((("v")), 100000000, 0, -2062); ((("cmp")), 100000000, 0, -2059)], (0)), 100000000, 0, -2063), (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -2058); ((("v")), 100000000, 0, -2062); ((("cmp")), 100000000, 0, -2059)], (0)), 100000000, 0, -2061), 0), 100000000, 0, -2060)], (0)), 100000000, 0, -2057), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 300)), 0); (("invariants", 3614), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -2051); ((("cmp")), 100000000, 0, -2052); (Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -2051); ((("v")), 100000000, 0, -2056); ((("cmp")), 100000000, 0, -2052)], (0)), 100000000, 0, -2055), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2054), 0), 100000000, 0, -2053)], (0)), 100000000, 0, -2050), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 191)), 0); (("is_empty", 3615), ((Tag1 (0, (Tag3 ((("t", 3582)), [((0), 100000000, 0, -2047); ((0), 100000000, 0, -2048); ((0), 100000000, 0, -2049)], (0)), 100000000, 0, -2046), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2045), 0), 100000000, 0, -2044), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 192)), 0); (("length", 3616), ((Tag1 (0, (Tag3 ((("t", 3582)), [((0), 100000000, 0, -2041); ((0), 100000000, 0, -2042); ((0), 100000000, 0, -2043)], (0)), 100000000, 0, -2040), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -2039), 0), 100000000, 0, -2038), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 193)), 0); (("add", 3617), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -2029); ((("cmp")), 100000000, 0, -2030); (Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -2029); ((("v")), 100000000, 0, -2036); ((("cmp")), 100000000, 0, -2030)], (0)), 100000000, 0, -2037), (Tag1 (("key"), ((("k")), 100000000, 0, -2029), (Tag1 (("data"), ((("v")), 100000000, 0, -2036), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Or_duplicate"), "t"), [(Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -2029); ((("v")), 100000000, 0, -2036); ((("cmp")), 100000000, 0, -2030)], (0)), 100000000, 0, -2035)], (0)), 100000000, 0, -2034), 0), 100000000, 0, -2033), 0), 100000000, 0, -2032), 0), 100000000, 0, -2031)], (0)), 100000000, 0, -2028), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 194)), 0); (("add_exn", 3618), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -2020); ((("cmp")), 100000000, 0, -2021); (Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -2020); ((("v")), 100000000, 0, -2026); ((("cmp")), 100000000, 0, -2021)], (0)), 100000000, 0, -2027), (Tag1 (("key"), ((("k")), 100000000, 0, -2020), (Tag1 (("data"), ((("v")), 100000000, 0, -2026), (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -2020); ((("v")), 100000000, 0, -2026); ((("cmp")), 100000000, 0, -2021)], (0)), 100000000, 0, -2025), 0), 100000000, 0, -2024), 0), 100000000, 0, -2023), 0), 100000000, 0, -2022)], (0)), 100000000, 0, -2019), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 195)), 0); (("set", 3619), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -2011); ((("cmp")), 100000000, 0, -2012); (Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -2011); ((("v")), 100000000, 0, -2017); ((("cmp")), 100000000, 0, -2012)], (0)), 100000000, 0, -2018), (Tag1 (("key"), ((("k")), 100000000, 0, -2011), (Tag1 (("data"), ((("v")), 100000000, 0, -2017), (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -2011); ((("v")), 100000000, 0, -2017); ((("cmp")), 100000000, 0, -2012)], (0)), 100000000, 0, -2016), 0), 100000000, 0, -2015), 0), 100000000, 0, -2014), 0), 100000000, 0, -2013)], (0)), 100000000, 0, -2010), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 196)), 0); (("add_multi", 3620), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -2000); ((("cmp")), 100000000, 0, -2001); (Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -2000); (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -2007)], (0)), 100000000, 0, -2009); ((("cmp")), 100000000, 0, -2001)], (0)), 100000000, 0, -2008), (Tag1 (("key"), ((("k")), 100000000, 0, -2000), (Tag1 (("data"), ((("v")), 100000000, 0, -2007), (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -2000); (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -2007)], (0)), 100000000, 0, -2006); ((("cmp")), 100000000, 0, -2001)], (0)), 100000000, 0, -2005), 0), 100000000, 0, -2004), 0), 100000000, 0, -2003), 0), 100000000, 0, -2002)], (0)), 100000000, 0, -1999), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 197)), 0); (("remove_multi", 3621), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -1990); ((("cmp")), 100000000, 0, -1991); (Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1990); (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -1996)], (0)), 100000000, 0, -1998); ((("cmp")), 100000000, 0, -1991)], (0)), 100000000, 0, -1997), (Tag1 (0, ((("k")), 100000000, 0, -1990), (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1990); (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -1996)], (0)), 100000000, 0, -1995); ((("cmp")), 100000000, 0, -1991)], (0)), 100000000, 0, -1994), 0), 100000000, 0, -1993), 0), 100000000, 0, -1992)], (0)), 100000000, 0, -1989), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 198)), 0); (("find_multi", 3622), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -1981); ((("cmp")), 100000000, 0, -1982); (Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1981); (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -1986)], (0)), 100000000, 0, -1988); ((("cmp")), 100000000, 0, -1982)], (0)), 100000000, 0, -1987), (Tag1 (0, ((("k")), 100000000, 0, -1981), (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -1986)], (0)), 100000000, 0, -1985), 0), 100000000, 0, -1984), 0), 100000000, 0, -1983)], (0)), 100000000, 0, -1980), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 199)), 0); (("change", 3623), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -1969); ((("cmp")), 100000000, 0, -1970); (Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1969); ((("v")), 100000000, 0, -1975); ((("cmp")), 100000000, 0, -1970)], (0)), 100000000, 0, -1979), (Tag1 (0, ((("k")), 100000000, 0, -1969), (Tag1 (("f"), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("v")), 100000000, 0, -1975)], (0)), 100000000, 0, -1978), (Tag3 ((Tag3 ("option", 10)), [((("v")), 100000000, 0, -1975)], (0)), 100000000, 0, -1977), 0), 100000000, 0, -1976), (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1969); ((("v")), 100000000, 0, -1975); ((("cmp")), 100000000, 0, -1970)], (0)), 100000000, 0, -1974), 0), 100000000, 0, -1973), 0), 100000000, 0, -1972), 0), 100000000, 0, -1971)], (0)), 100000000, 0, -1968), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 200)), 0); (("update", 3624), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -1958); ((("cmp")), 100000000, 0, -1959); (Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1958); ((("v")), 100000000, 0, -1964); ((("cmp")), 100000000, 0, -1959)], (0)), 100000000, 0, -1967), (Tag1 (0, ((("k")), 100000000, 0, -1958), (Tag1 (("f"), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("v")), 100000000, 0, -1964)], (0)), 100000000, 0, -1966), ((("v")), 100000000, 0, -1964), 0), 100000000, 0, -1965), (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1958); ((("v")), 100000000, 0, -1964); ((("cmp")), 100000000, 0, -1959)], (0)), 100000000, 0, -1963), 0), 100000000, 0, -1962), 0), 100000000, 0, -1961), 0), 100000000, 0, -1960)], (0)), 100000000, 0, -1957), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 201)), 0); (("find", 3625), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -1950); ((("cmp")), 100000000, 0, -1951); (Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1950); ((("v")), 100000000, 0, -1955); ((("cmp")), 100000000, 0, -1951)], (0)), 100000000, 0, -1956), (Tag1 (0, ((("k")), 100000000, 0, -1950), (Tag3 ((Tag3 ("option", 10)), [((("v")), 100000000, 0, -1955)], (0)), 100000000, 0, -1954), 0), 100000000, 0, -1953), 0), 100000000, 0, -1952)], (0)), 100000000, 0, -1949), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 202)), 0); (("find_exn", 3626), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -1943); ((("cmp")), 100000000, 0, -1944); (Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1943); ((("v")), 100000000, 0, -1947); ((("cmp")), 100000000, 0, -1944)], (0)), 100000000, 0, -1948), (Tag1 (0, ((("k")), 100000000, 0, -1943), ((("v")), 100000000, 0, -1947), 0), 100000000, 0, -1946), 0), 100000000, 0, -1945)], (0)), 100000000, 0, -1942), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 203)), 0); (("remove", 3627), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -1935); ((("cmp")), 100000000, 0, -1936); (Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1935); ((("v")), 100000000, 0, -1940); ((("cmp")), 100000000, 0, -1936)], (0)), 100000000, 0, -1941), (Tag1 (0, ((("k")), 100000000, 0, -1935), (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1935); ((("v")), 100000000, 0, -1940); ((("cmp")), 100000000, 0, -1936)], (0)), 100000000, 0, -1939), 0), 100000000, 0, -1938), 0), 100000000, 0, -1937)], (0)), 100000000, 0, -1934), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 204)), 0); (("mem", 3628), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -1927); ((("cmp")), 100000000, 0, -1928); (Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1927); ((0), 100000000, 0, -1933); ((("cmp")), 100000000, 0, -1928)], (0)), 100000000, 0, -1932), (Tag1 (0, ((("k")), 100000000, 0, -1927), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1931), 0), 100000000, 0, -1930), 0), 100000000, 0, -1929)], (0)), 100000000, 0, -1926), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 205)), 0); (("iter_keys", 3629), ((Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1922); ((0), 100000000, 0, -1924); ((0), 100000000, 0, -1925)], (0)), 100000000, 0, -1923), (Tag1 (("f"), (Tag1 (0, ((("k")), 100000000, 0, -1922), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1921), 0), 100000000, 0, -1920), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1919), 0), 100000000, 0, -1918), 0), 100000000, 0, -1917), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 206)), 0); (("iter", 3630), ((Tag1 (0, (Tag3 ((("t", 3582)), [((0), 100000000, 0, -1915); ((("v")), 100000000, 0, -1913); ((0), 100000000, 0, -1916)], (0)), 100000000, 0, -1914), (Tag1 (("f"), (Tag1 (0, ((("v")), 100000000, 0, -1913), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1912), 0), 100000000, 0, -1911), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1910), 0), 100000000, 0, -1909), 0), 100000000, 0, -1908), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 207)), 0); (("iteri", 3631), ((Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1905); ((("v")), 100000000, 0, -1904); ((0), 100000000, 0, -1907)], (0)), 100000000, 0, -1906), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -1905), (Tag1 (("data"), ((("v")), 100000000, 0, -1904), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1903), 0), 100000000, 0, -1902), 0), 100000000, 0, -1901), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1900), 0), 100000000, 0, -1899), 0), 100000000, 0, -1898), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 208)), 0); (("iteri_until", 3632), ((Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1895); ((("v")), 100000000, 0, -1894); ((0), 100000000, 0, -1897)], (0)), 100000000, 0, -1896), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -1895), (Tag1 (("data"), ((("v")), 100000000, 0, -1894), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Continue_or_stop"), "t"), 0, (0)), 100000000, 0, -1893), 0), 100000000, 0, -1892), 0), 100000000, 0, -1891), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Finished_or_unfinished"), "t"), 0, (0)), 100000000, 0, -1890), 0), 100000000, 0, -1889), 0), 100000000, 0, -1888), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 209)), 0); (("iter2", 3633), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -1874); ((("cmp")), 100000000, 0, -1875); (Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1874); ((("v1")), 100000000, 0, -1884); ((("cmp")), 100000000, 0, -1875)], (0)), 100000000, 0, -1887), (Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1874); ((("v2")), 100000000, 0, -1885); ((("cmp")), 100000000, 0, -1875)], (0)), 100000000, 0, -1886), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -1874), (Tag1 (("data"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Merge_element"), "t"), [((("v1")), 100000000, 0, -1884); ((("v2")), 100000000, 0, -1885)], (0)), 100000000, 0, -1883), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1882), 0), 100000000, 0, -1881), 0), 100000000, 0, -1880), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1879), 0), 100000000, 0, -1878), 0), 100000000, 0, -1877), 0), 100000000, 0, -1876)], (0)), 100000000, 0, -1873), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 210)), 0); (("map", 3634), ((Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1867); ((("v1")), 100000000, 0, -1871); ((("cmp")), 100000000, 0, -1869)], (0)), 100000000, 0, -1872), (Tag1 (("f"), (Tag1 (0, ((("v1")), 100000000, 0, -1871), ((("v2")), 100000000, 0, -1868), 0), 100000000, 0, -1870), (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1867); ((("v2")), 100000000, 0, -1868); ((("cmp")), 100000000, 0, -1869)], (0)), 100000000, 0, -1866), 0), 100000000, 0, -1865), 0), 100000000, 0, -1864), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 211)), 0); (("mapi", 3635), ((Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1857); ((("v1")), 100000000, 0, -1862); ((("cmp")), 100000000, 0, -1859)], (0)), 100000000, 0, -1863), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -1857), (Tag1 (("data"), ((("v1")), 100000000, 0, -1862), ((("v2")), 100000000, 0, -1858), 0), 100000000, 0, -1861), 0), 100000000, 0, -1860), (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1857); ((("v2")), 100000000, 0, -1858); ((("cmp")), 100000000, 0, -1859)], (0)), 100000000, 0, -1856), 0), 100000000, 0, -1855), 0), 100000000, 0, -1854), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 212)), 0); (("fold", 3636), ((Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1851); ((("v")), 100000000, 0, -1850); ((0), 100000000, 0, -1853)], (0)), 100000000, 0, -1852), (Tag1 (("init"), ((("acc")), 100000000, 0, -1846), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -1851), (Tag1 (("data"), ((("v")), 100000000, 0, -1850), (Tag1 (0, ((("acc")), 100000000, 0, -1846), ((("acc")), 100000000, 0, -1846), 0), 100000000, 0, -1849), 0), 100000000, 0, -1848), 0), 100000000, 0, -1847), ((("acc")), 100000000, 0, -1846), 0), 100000000, 0, -1845), 0), 100000000, 0, -1844), 0), 100000000, 0, -1843), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 213)), 0); (("fold_until", 3637), ((Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1840); ((("v")), 100000000, 0, -1839); ((0), 100000000, 0, -1842)], (0)), 100000000, 0, -1841), (Tag1 (("init"), ((("acc")), 100000000, 0, -1834), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -1840), (Tag1 (("data"), ((("v")), 100000000, 0, -1839), (Tag1 (0, ((("acc")), 100000000, 0, -1834), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Container"), "Continue_or_stop"), "t"), [((("acc")), 100000000, 0, -1834); ((("final")), 100000000, 0, -1832)], (0)), 100000000, 0, -1838), 0), 100000000, 0, -1837), 0), 100000000, 0, -1836), 0), 100000000, 0, -1835), (Tag1 (("finish"), (Tag1 (0, ((("acc")), 100000000, 0, -1834), ((("final")), 100000000, 0, -1832), 0), 100000000, 0, -1833), ((("final")), 100000000, 0, -1832), 0), 100000000, 0, -1831), 0), 100000000, 0, -1830), 0), 100000000, 0, -1829), 0), 100000000, 0, -1828), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 214)), 0); (("fold_right", 3638), ((Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1825); ((("v")), 100000000, 0, -1824); ((0), 100000000, 0, -1827)], (0)), 100000000, 0, -1826), (Tag1 (("init"), ((("acc")), 100000000, 0, -1820), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -1825), (Tag1 (("data"), ((("v")), 100000000, 0, -1824), (Tag1 (0, ((("acc")), 100000000, 0, -1820), ((("acc")), 100000000, 0, -1820), 0), 100000000, 0, -1823), 0), 100000000, 0, -1822), 0), 100000000, 0, -1821), ((("acc")), 100000000, 0, -1820), 0), 100000000, 0, -1819), 0), 100000000, 0, -1818), 0), 100000000, 0, -1817), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 215)), 0); (("fold2", 3639), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -1802); ((("cmp")), 100000000, 0, -1803); (Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1802); ((("v1")), 100000000, 0, -1813); ((("cmp")), 100000000, 0, -1803)], (0)), 100000000, 0, -1816), (Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1802); ((("v2")), 100000000, 0, -1814); ((("cmp")), 100000000, 0, -1803)], (0)), 100000000, 0, -1815), (Tag1 (("init"), ((("acc")), 100000000, 0, -1808), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -1802), (Tag1 (("data"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Merge_element"), "t"), [((("v1")), 100000000, 0, -1813); ((("v2")), 100000000, 0, -1814)], (0)), 100000000, 0, -1812), (Tag1 (0, ((("acc")), 100000000, 0, -1808), ((("acc")), 100000000, 0, -1808), 0), 100000000, 0, -1811), 0), 100000000, 0, -1810), 0), 100000000, 0, -1809), ((("acc")), 100000000, 0, -1808), 0), 100000000, 0, -1807), 0), 100000000, 0, -1806), 0), 100000000, 0, -1805), 0), 100000000, 0, -1804)], (0)), 100000000, 0, -1801), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 216)), 0); (("filter_keys", 3640), ((Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1795); ((("v")), 100000000, 0, -1796); ((("cmp")), 100000000, 0, -1797)], (0)), 100000000, 0, -1800), (Tag1 (("f"), (Tag1 (0, ((("k")), 100000000, 0, -1795), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1799), 0), 100000000, 0, -1798), (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1795); ((("v")), 100000000, 0, -1796); ((("cmp")), 100000000, 0, -1797)], (0)), 100000000, 0, -1794), 0), 100000000, 0, -1793), 0), 100000000, 0, -1792), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 217)), 0); (("filter", 3641), ((Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1786); ((("v")), 100000000, 0, -1787); ((("cmp")), 100000000, 0, -1788)], (0)), 100000000, 0, -1791), (Tag1 (("f"), (Tag1 (0, ((("v")), 100000000, 0, -1787), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1790), 0), 100000000, 0, -1789), (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1786); ((("v")), 100000000, 0, -1787); ((("cmp")), 100000000, 0, -1788)], (0)), 100000000, 0, -1785), 0), 100000000, 0, -1784), 0), 100000000, 0, -1783), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 218)), 0); (("filteri", 3642), ((Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1776); ((("v")), 100000000, 0, -1777); ((("cmp")), 100000000, 0, -1778)], (0)), 100000000, 0, -1782), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -1776), (Tag1 (("data"), ((("v")), 100000000, 0, -1777), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1781), 0), 100000000, 0, -1780), 0), 100000000, 0, -1779), (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1776); ((("v")), 100000000, 0, -1777); ((("cmp")), 100000000, 0, -1778)], (0)), 100000000, 0, -1775), 0), 100000000, 0, -1774), 0), 100000000, 0, -1773), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 219)), 0); (("filter_map", 3643), ((Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1766); ((("v1")), 100000000, 0, -1771); ((("cmp")), 100000000, 0, -1768)], (0)), 100000000, 0, -1772), (Tag1 (("f"), (Tag1 (0, ((("v1")), 100000000, 0, -1771), (Tag3 ((Tag3 ("option", 10)), [((("v2")), 100000000, 0, -1767)], (0)), 100000000, 0, -1770), 0), 100000000, 0, -1769), (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1766); ((("v2")), 100000000, 0, -1767); ((("cmp")), 100000000, 0, -1768)], (0)), 100000000, 0, -1765), 0), 100000000, 0, -1764), 0), 100000000, 0, -1763), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 220)), 0); (("filter_mapi", 3644), ((Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1755); ((("v1")), 100000000, 0, -1761); ((("cmp")), 100000000, 0, -1757)], (0)), 100000000, 0, -1762), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -1755), (Tag1 (("data"), ((("v1")), 100000000, 0, -1761), (Tag3 ((Tag3 ("option", 10)), [((("v2")), 100000000, 0, -1756)], (0)), 100000000, 0, -1760), 0), 100000000, 0, -1759), 0), 100000000, 0, -1758), (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1755); ((("v2")), 100000000, 0, -1756); ((("cmp")), 100000000, 0, -1757)], (0)), 100000000, 0, -1754), 0), 100000000, 0, -1753), 0), 100000000, 0, -1752), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 221)), 0); (("partition_mapi", 3645), ((Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1742); ((("v1")), 100000000, 0, -1750); ((("cmp")), 100000000, 0, -1744)], (0)), 100000000, 0, -1751), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -1742), (Tag1 (("data"), ((("v1")), 100000000, 0, -1750), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Either"), "t"), [((("v2")), 100000000, 0, -1743); ((("v3")), 100000000, 0, -1746)], (0)), 100000000, 0, -1749), 0), 100000000, 0, -1748), 0), 100000000, 0, -1747), (Tag2 ([(Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1742); ((("v2")), 100000000, 0, -1743); ((("cmp")), 100000000, 0, -1744)], (0)), 100000000, 0, -1741); (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1742); ((("v3")), 100000000, 0, -1746); ((("cmp")), 100000000, 0, -1744)], (0)), 100000000, 0, -1745)]), 100000000, 0, -1740), 0), 100000000, 0, -1739), 0), 100000000, 0, -1738), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 222)), 0); (("partition_map", 3646), ((Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1729); ((("v1")), 100000000, 0, -1736); ((("cmp")), 100000000, 0, -1731)], (0)), 100000000, 0, -1737), (Tag1 (("f"), (Tag1 (0, ((("v1")), 100000000, 0, -1736), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Either"), "t"), [((("v2")), 100000000, 0, -1730); ((("v3")), 100000000, 0, -1733)], (0)), 100000000, 0, -1735), 0), 100000000, 0, -1734), (Tag2 ([(Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1729); ((("v2")), 100000000, 0, -1730); ((("cmp")), 100000000, 0, -1731)], (0)), 100000000, 0, -1728); (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1729); ((("v3")), 100000000, 0, -1733); ((("cmp")), 100000000, 0, -1731)], (0)), 100000000, 0, -1732)]), 100000000, 0, -1727), 0), 100000000, 0, -1726), 0), 100000000, 0, -1725), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 223)), 0); (("partitioni_tf", 3647), ((Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1717); ((("v")), 100000000, 0, -1718); ((("cmp")), 100000000, 0, -1719)], (0)), 100000000, 0, -1724), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -1717), (Tag1 (("data"), ((("v")), 100000000, 0, -1718), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1723), 0), 100000000, 0, -1722), 0), 100000000, 0, -1721), (Tag2 ([(Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1717); ((("v")), 100000000, 0, -1718); ((("cmp")), 100000000, 0, -1719)], (0)), 100000000, 0, -1716); (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1717); ((("v")), 100000000, 0, -1718); ((("cmp")), 100000000, 0, -1719)], (0)), 100000000, 0, -1720)]), 100000000, 0, -1715), 0), 100000000, 0, -1714), 0), 100000000, 0, -1713), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 224)), 0); (("partition_tf", 3648), ((Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1706); ((("v")), 100000000, 0, -1707); ((("cmp")), 100000000, 0, -1708)], (0)), 100000000, 0, -1712), (Tag1 (("f"), (Tag1 (0, ((("v")), 100000000, 0, -1707), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1711), 0), 100000000, 0, -1710), (Tag2 ([(Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1706); ((("v")), 100000000, 0, -1707); ((("cmp")), 100000000, 0, -1708)], (0)), 100000000, 0, -1705); (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1706); ((("v")), 100000000, 0, -1707); ((("cmp")), 100000000, 0, -1708)], (0)), 100000000, 0, -1709)]), 100000000, 0, -1704), 0), 100000000, 0, -1703), 0), 100000000, 0, -1702), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 225)), 0); (("combine_errors", 3649), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -1694); ((("cmp")), 100000000, 0, -1695); (Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1694); (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [((("v")), 100000000, 0, -1699)], (0)), 100000000, 0, -1701); ((("cmp")), 100000000, 0, -1695)], (0)), 100000000, 0, -1700), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1694); ((("v")), 100000000, 0, -1699); ((("cmp")), 100000000, 0, -1695)], (0)), 100000000, 0, -1698)], (0)), 100000000, 0, -1697), 0), 100000000, 0, -1696)], (0)), 100000000, 0, -1693), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 226)), 0); (("compare_direct", 3650), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -1681); ((("cmp")), 100000000, 0, -1682); (Tag1 (0, (Tag1 (0, ((("v")), 100000000, 0, -1688), (Tag1 (0, ((("v")), 100000000, 0, -1688), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1692), 0), 100000000, 0, -1691), 0), 100000000, 0, -1690), (Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1681); ((("v")), 100000000, 0, -1688); ((("cmp")), 100000000, 0, -1682)], (0)), 100000000, 0, -1689), (Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1681); ((("v")), 100000000, 0, -1688); ((("cmp")), 100000000, 0, -1682)], (0)), 100000000, 0, -1687), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1686), 0), 100000000, 0, -1685), 0), 100000000, 0, -1684), 0), 100000000, 0, -1683)], (0)), 100000000, 0, -1680), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 227)), 0); (("equal", 3651), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -1668); ((("cmp")), 100000000, 0, -1669); (Tag1 (0, (Tag1 (0, ((("v")), 100000000, 0, -1675), (Tag1 (0, ((("v")), 100000000, 0, -1675), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1679), 0), 100000000, 0, -1678), 0), 100000000, 0, -1677), (Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1668); ((("v")), 100000000, 0, -1675); ((("cmp")), 100000000, 0, -1669)], (0)), 100000000, 0, -1676), (Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1668); ((("v")), 100000000, 0, -1675); ((("cmp")), 100000000, 0, -1669)], (0)), 100000000, 0, -1674), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1673), 0), 100000000, 0, -1672), 0), 100000000, 0, -1671), 0), 100000000, 0, -1670)], (0)), 100000000, 0, -1667), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 228)), 0); (("keys", 3652), ((Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1663); ((0), 100000000, 0, -1665); ((0), 100000000, 0, -1666)], (0)), 100000000, 0, -1664), (Tag3 ((Tag3 ("list", 9)), [((("k")), 100000000, 0, -1663)], (0)), 100000000, 0, -1662), 0), 100000000, 0, -1661), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 229)), 0); (("data", 3653), ((Tag1 (0, (Tag3 ((("t", 3582)), [((0), 100000000, 0, -1659); ((("v")), 100000000, 0, -1657); ((0), 100000000, 0, -1660)], (0)), 100000000, 0, -1658), (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -1657)], (0)), 100000000, 0, -1656), 0), 100000000, 0, -1655), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 230)), 0); (("to_alist", 3654), ((Tag1 (Tag1 ("key_order"), (Tag3 ((Tag3 ("option", 10)), [(Tag8 (([("Decreasing", (0)); ("Increasing", (0))], (0, 100000000, 0, -1654), 1, 0, 0)), 100000000, 0, -1653)], (0)), 100000000, 0, -1652), (Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1648); ((("v")), 100000000, 0, -1649); ((0), 100000000, 0, -1651)], (0)), 100000000, 0, -1650), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("k")), 100000000, 0, -1648); ((("v")), 100000000, 0, -1649)]), 100000000, 0, -1647)], (0)), 100000000, 0, -1646), 0), 100000000, 0, -1645), 0), 100000000, 0, -1644), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 231)), 0); (("merge", 3655), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -1629); ((("cmp")), 100000000, 0, -1630); (Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1629); ((("v1")), 100000000, 0, -1640); ((("cmp")), 100000000, 0, -1630)], (0)), 100000000, 0, -1643), (Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1629); ((("v2")), 100000000, 0, -1641); ((("cmp")), 100000000, 0, -1630)], (0)), 100000000, 0, -1642), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -1629), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Merge_element"), "t"), [((("v1")), 100000000, 0, -1640); ((("v2")), 100000000, 0, -1641)], (0)), 100000000, 0, -1639), (Tag3 ((Tag3 ("option", 10)), [((("v3")), 100000000, 0, -1635)], (0)), 100000000, 0, -1638), 0), 100000000, 0, -1637), 0), 100000000, 0, -1636), (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1629); ((("v3")), 100000000, 0, -1635); ((("cmp")), 100000000, 0, -1630)], (0)), 100000000, 0, -1634), 0), 100000000, 0, -1633), 0), 100000000, 0, -1632), 0), 100000000, 0, -1631)], (0)), 100000000, 0, -1628), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 232)), 0); (("merge_skewed", 3656), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -1616); ((("cmp")), 100000000, 0, -1617); (Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1616); ((("v")), 100000000, 0, -1622); ((("cmp")), 100000000, 0, -1617)], (0)), 100000000, 0, -1627), (Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1616); ((("v")), 100000000, 0, -1622); ((("cmp")), 100000000, 0, -1617)], (0)), 100000000, 0, -1626), (Tag1 (("combine"), (Tag1 (("key"), ((("k")), 100000000, 0, -1616), (Tag1 (0, ((("v")), 100000000, 0, -1622), (Tag1 (0, ((("v")), 100000000, 0, -1622), ((("v")), 100000000, 0, -1622), 0), 100000000, 0, -1625), 0), 100000000, 0, -1624), 0), 100000000, 0, -1623), (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1616); ((("v")), 100000000, 0, -1622); ((("cmp")), 100000000, 0, -1617)], (0)), 100000000, 0, -1621), 0), 100000000, 0, -1620), 0), 100000000, 0, -1619), 0), 100000000, 0, -1618)], (0)), 100000000, 0, -1615), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 233)), 0); (("symmetric_diff", 3657), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -1602); ((("cmp")), 100000000, 0, -1603); (Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1602); ((("v")), 100000000, 0, -1609); ((("cmp")), 100000000, 0, -1603)], (0)), 100000000, 0, -1614), (Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1602); ((("v")), 100000000, 0, -1609); ((("cmp")), 100000000, 0, -1603)], (0)), 100000000, 0, -1613), (Tag1 (("data_equal"), (Tag1 (0, ((("v")), 100000000, 0, -1609), (Tag1 (0, ((("v")), 100000000, 0, -1609), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1612), 0), 100000000, 0, -1611), 0), 100000000, 0, -1610), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Symmetric_diff_element"), "t"), [((("k")), 100000000, 0, -1602); ((("v")), 100000000, 0, -1609)], (0)), 100000000, 0, -1608)], (0)), 100000000, 0, -1607), 0), 100000000, 0, -1606), 0), 100000000, 0, -1605), 0), 100000000, 0, -1604)], (0)), 100000000, 0, -1601), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 234)), 0); (("fold_symmetric_diff", 3658), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -1584); ((("cmp")), 100000000, 0, -1585); (Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1584); ((("v")), 100000000, 0, -1595); ((("cmp")), 100000000, 0, -1585)], (0)), 100000000, 0, -1600), (Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1584); ((("v")), 100000000, 0, -1595); ((("cmp")), 100000000, 0, -1585)], (0)), 100000000, 0, -1599), (Tag1 (("data_equal"), (Tag1 (0, ((("v")), 100000000, 0, -1595), (Tag1 (0, ((("v")), 100000000, 0, -1595), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1598), 0), 100000000, 0, -1597), 0), 100000000, 0, -1596), (Tag1 (("init"), ((("acc")), 100000000, 0, -1591), (Tag1 (("f"), (Tag1 (0, ((("acc")), 100000000, 0, -1591), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Symmetric_diff_element"), "t"), [((("k")), 100000000, 0, -1584); ((("v")), 100000000, 0, -1595)], (0)), 100000000, 0, -1594), ((("acc")), 100000000, 0, -1591), 0), 100000000, 0, -1593), 0), 100000000, 0, -1592), ((("acc")), 100000000, 0, -1591), 0), 100000000, 0, -1590), 0), 100000000, 0, -1589), 0), 100000000, 0, -1588), 0), 100000000, 0, -1587), 0), 100000000, 0, -1586)], (0)), 100000000, 0, -1583), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 235)), 0); (("min_elt", 3659), ((Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1579); ((("v")), 100000000, 0, -1580); ((0), 100000000, 0, -1582)], (0)), 100000000, 0, -1581), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([((("k")), 100000000, 0, -1579); ((("v")), 100000000, 0, -1580)]), 100000000, 0, -1578)], (0)), 100000000, 0, -1577), 0), 100000000, 0, -1576), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 236)), 0); (("min_elt_exn", 3660), ((Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1572); ((("v")), 100000000, 0, -1573); ((0), 100000000, 0, -1575)], (0)), 100000000, 0, -1574), (Tag2 ([((("k")), 100000000, 0, -1572); ((("v")), 100000000, 0, -1573)]), 100000000, 0, -1571), 0), 100000000, 0, -1570), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 237)), 0); (("max_elt", 3661), ((Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1566); ((("v")), 100000000, 0, -1567); ((0), 100000000, 0, -1569)], (0)), 100000000, 0, -1568), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([((("k")), 100000000, 0, -1566); ((("v")), 100000000, 0, -1567)]), 100000000, 0, -1565)], (0)), 100000000, 0, -1564), 0), 100000000, 0, -1563), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 238)), 0); (("max_elt_exn", 3662), ((Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1559); ((("v")), 100000000, 0, -1560); ((0), 100000000, 0, -1562)], (0)), 100000000, 0, -1561), (Tag2 ([((("k")), 100000000, 0, -1559); ((("v")), 100000000, 0, -1560)]), 100000000, 0, -1558), 0), 100000000, 0, -1557), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 239)), 0); (("for_all", 3663), ((Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1555); ((("v")), 100000000, 0, -1553); ((0), 100000000, 0, -1556)], (0)), 100000000, 0, -1554), (Tag1 (("f"), (Tag1 (0, ((("v")), 100000000, 0, -1553), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1552), 0), 100000000, 0, -1551), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1550), 0), 100000000, 0, -1549), 0), 100000000, 0, -1548), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 240)), 0); (("for_alli", 3664), ((Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1545); ((("v")), 100000000, 0, -1544); ((0), 100000000, 0, -1547)], (0)), 100000000, 0, -1546), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -1545), (Tag1 (("data"), ((("v")), 100000000, 0, -1544), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1543), 0), 100000000, 0, -1542), 0), 100000000, 0, -1541), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1540), 0), 100000000, 0, -1539), 0), 100000000, 0, -1538), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 241)), 0); (("exists", 3665), ((Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1536); ((("v")), 100000000, 0, -1534); ((0), 100000000, 0, -1537)], (0)), 100000000, 0, -1535), (Tag1 (("f"), (Tag1 (0, ((("v")), 100000000, 0, -1534), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1533), 0), 100000000, 0, -1532), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1531), 0), 100000000, 0, -1530), 0), 100000000, 0, -1529), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 242)), 0); (("existsi", 3666), ((Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1526); ((("v")), 100000000, 0, -1525); ((0), 100000000, 0, -1528)], (0)), 100000000, 0, -1527), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -1526), (Tag1 (("data"), ((("v")), 100000000, 0, -1525), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1524), 0), 100000000, 0, -1523), 0), 100000000, 0, -1522), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1521), 0), 100000000, 0, -1520), 0), 100000000, 0, -1519), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 243)), 0); (("count", 3667), ((Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1517); ((("v")), 100000000, 0, -1515); ((0), 100000000, 0, -1518)], (0)), 100000000, 0, -1516), (Tag1 (("f"), (Tag1 (0, ((("v")), 100000000, 0, -1515), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1514), 0), 100000000, 0, -1513), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1512), 0), 100000000, 0, -1511), 0), 100000000, 0, -1510), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 244)), 0); (("counti", 3668), ((Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1507); ((("v")), 100000000, 0, -1506); ((0), 100000000, 0, -1509)], (0)), 100000000, 0, -1508), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -1507), (Tag1 (("data"), ((("v")), 100000000, 0, -1506), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1505), 0), 100000000, 0, -1504), 0), 100000000, 0, -1503), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1502), 0), 100000000, 0, -1501), 0), 100000000, 0, -1500), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 245)), 0); (("split", 3669), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -1489); ((("cmp")), 100000000, 0, -1490); (Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1489); ((("v")), 100000000, 0, -1495); ((("cmp")), 100000000, 0, -1490)], (0)), 100000000, 0, -1499), (Tag1 (0, ((("k")), 100000000, 0, -1489), (Tag2 ([(Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1489); ((("v")), 100000000, 0, -1495); ((("cmp")), 100000000, 0, -1490)], (0)), 100000000, 0, -1494); (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([((("k")), 100000000, 0, -1489); ((("v")), 100000000, 0, -1495)]), 100000000, 0, -1497)], (0)), 100000000, 0, -1496); (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1489); ((("v")), 100000000, 0, -1495); ((("cmp")), 100000000, 0, -1490)], (0)), 100000000, 0, -1498)]), 100000000, 0, -1493), 0), 100000000, 0, -1492), 0), 100000000, 0, -1491)], (0)), 100000000, 0, -1488), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 246)), 0); (("split_le_gt", 3670), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -1479); ((("cmp")), 100000000, 0, -1480); (Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1479); ((("v")), 100000000, 0, -1485); ((("cmp")), 100000000, 0, -1480)], (0)), 100000000, 0, -1487), (Tag1 (0, ((("k")), 100000000, 0, -1479), (Tag2 ([(Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1479); ((("v")), 100000000, 0, -1485); ((("cmp")), 100000000, 0, -1480)], (0)), 100000000, 0, -1484); (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1479); ((("v")), 100000000, 0, -1485); ((("cmp")), 100000000, 0, -1480)], (0)), 100000000, 0, -1486)]), 100000000, 0, -1483), 0), 100000000, 0, -1482), 0), 100000000, 0, -1481)], (0)), 100000000, 0, -1478), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 247)), 0); (("split_lt_ge", 3671), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -1469); ((("cmp")), 100000000, 0, -1470); (Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1469); ((("v")), 100000000, 0, -1475); ((("cmp")), 100000000, 0, -1470)], (0)), 100000000, 0, -1477), (Tag1 (0, ((("k")), 100000000, 0, -1469), (Tag2 ([(Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1469); ((("v")), 100000000, 0, -1475); ((("cmp")), 100000000, 0, -1470)], (0)), 100000000, 0, -1474); (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1469); ((("v")), 100000000, 0, -1475); ((("cmp")), 100000000, 0, -1470)], (0)), 100000000, 0, -1476)]), 100000000, 0, -1473), 0), 100000000, 0, -1472), 0), 100000000, 0, -1471)], (0)), 100000000, 0, -1468), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 248)), 0); (("append", 3672), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -1458); ((("cmp")), 100000000, 0, -1459); (Tag1 (("lower_part"), (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1458); ((("v")), 100000000, 0, -1465); ((("cmp")), 100000000, 0, -1459)], (0)), 100000000, 0, -1467), (Tag1 (("upper_part"), (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1458); ((("v")), 100000000, 0, -1465); ((("cmp")), 100000000, 0, -1459)], (0)), 100000000, 0, -1466), (Tag8 (([("Ok", (((Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1458); ((("v")), 100000000, 0, -1465); ((("cmp")), 100000000, 0, -1459)], (0)), 100000000, 0, -1464)))); ("Overlapping_key_ranges", (0))], (0, 100000000, 0, -1463), 1, 0, 0)), 100000000, 0, -1462), 0), 100000000, 0, -1461), 0), 100000000, 0, -1460)], (0)), 100000000, 0, -1457), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 249)), 0); (("subrange", 3673), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -1447); ((("cmp")), 100000000, 0, -1448); (Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1447); ((("v")), 100000000, 0, -1453); ((("cmp")), 100000000, 0, -1448)], (0)), 100000000, 0, -1456), (Tag1 (("lower_bound"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Maybe_bound"), "t"), [((("k")), 100000000, 0, -1447)], (0)), 100000000, 0, -1455), (Tag1 (("upper_bound"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Maybe_bound"), "t"), [((("k")), 100000000, 0, -1447)], (0)), 100000000, 0, -1454), (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1447); ((("v")), 100000000, 0, -1453); ((("cmp")), 100000000, 0, -1448)], (0)), 100000000, 0, -1452), 0), 100000000, 0, -1451), 0), 100000000, 0, -1450), 0), 100000000, 0, -1449)], (0)), 100000000, 0, -1446), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 250)), 0); (("fold_range_inclusive", 3674), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -1433); ((("cmp")), 100000000, 0, -1434); (Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1433); ((("v")), 100000000, 0, -1444); ((("cmp")), 100000000, 0, -1434)], (0)), 100000000, 0, -1445), (Tag1 (("min"), ((("k")), 100000000, 0, -1433), (Tag1 (("max"), ((("k")), 100000000, 0, -1433), (Tag1 (("init"), ((("acc")), 100000000, 0, -1440), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -1433), (Tag1 (("data"), ((("v")), 100000000, 0, -1444), (Tag1 (0, ((("acc")), 100000000, 0, -1440), ((("acc")), 100000000, 0, -1440), 0), 100000000, 0, -1443), 0), 100000000, 0, -1442), 0), 100000000, 0, -1441), ((("acc")), 100000000, 0, -1440), 0), 100000000, 0, -1439), 0), 100000000, 0, -1438), 0), 100000000, 0, -1437), 0), 100000000, 0, -1436), 0), 100000000, 0, -1435)], (0)), 100000000, 0, -1432), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 251)), 0); (("range_to_alist", 3675), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -1423); ((("cmp")), 100000000, 0, -1424); (Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1423); ((("v")), 100000000, 0, -1430); ((("cmp")), 100000000, 0, -1424)], (0)), 100000000, 0, -1431), (Tag1 (("min"), ((("k")), 100000000, 0, -1423), (Tag1 (("max"), ((("k")), 100000000, 0, -1423), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("k")), 100000000, 0, -1423); ((("v")), 100000000, 0, -1430)]), 100000000, 0, -1429)], (0)), 100000000, 0, -1428), 0), 100000000, 0, -1427), 0), 100000000, 0, -1426), 0), 100000000, 0, -1425)], (0)), 100000000, 0, -1422), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 252)), 0); (("closest_key", 3676), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -1411); ((("cmp")), 100000000, 0, -1412); (Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1411); ((("v")), 100000000, 0, -1418); ((("cmp")), 100000000, 0, -1412)], (0)), 100000000, 0, -1421), (Tag1 (0, (Tag8 (([("Greater_or_equal_to", (0)); ("Greater_than", (0)); ("Less_or_equal_to", (0)); ("Less_than", (0))], (0, 100000000, 0, -1420), 1, 0, 0)), 100000000, 0, -1419), (Tag1 (0, ((("k")), 100000000, 0, -1411), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([((("k")), 100000000, 0, -1411); ((("v")), 100000000, 0, -1418)]), 100000000, 0, -1417)], (0)), 100000000, 0, -1416), 0), 100000000, 0, -1415), 0), 100000000, 0, -1414), 0), 100000000, 0, -1413)], (0)), 100000000, 0, -1410), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 253)), 0); (("nth", 3677), ((Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1405); ((("v")), 100000000, 0, -1406); ((("cmp")), 100000000, 0, -1409)], (0)), 100000000, 0, -1408), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1407), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([((("k")), 100000000, 0, -1405); ((("v")), 100000000, 0, -1406)]), 100000000, 0, -1404)], (0)), 100000000, 0, -1403), 0), 100000000, 0, -1402), 0), 100000000, 0, -1401), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 254)), 0); (("nth_exn", 3678), ((Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1396); ((("v")), 100000000, 0, -1397); ((("cmp")), 100000000, 0, -1400)], (0)), 100000000, 0, -1399), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1398), (Tag2 ([((("k")), 100000000, 0, -1396); ((("v")), 100000000, 0, -1397)]), 100000000, 0, -1395), 0), 100000000, 0, -1394), 0), 100000000, 0, -1393), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 255)), 0); (("rank", 3679), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -1385); ((("cmp")), 100000000, 0, -1386); (Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1385); ((0), 100000000, 0, -1392); ((("cmp")), 100000000, 0, -1386)], (0)), 100000000, 0, -1391), (Tag1 (0, ((("k")), 100000000, 0, -1385), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1390)], (0)), 100000000, 0, -1389), 0), 100000000, 0, -1388), 0), 100000000, 0, -1387)], (0)), 100000000, 0, -1384), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 256)), 0); (("to_tree", 3680), ((Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1380); ((("v")), 100000000, 0, -1381); ((("cmp")), 100000000, 0, -1382)], (0)), 100000000, 0, -1383), (Tag3 (Tag1 ((("Tree", 3585)), "t"), [((("k")), 100000000, 0, -1380); ((("v")), 100000000, 0, -1381); ((("cmp")), 100000000, 0, -1382)], (0)), 100000000, 0, -1379), 0), 100000000, 0, -1378), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 257)), 0); (("to_sequence", 3681), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -1363); ((("cmp")), 100000000, 0, -1364); (Tag1 (Tag1 ("order"), (Tag3 ((Tag3 ("option", 10)), [(Tag8 (([("Decreasing_key", (0)); ("Increasing_key", (0))], (0, 100000000, 0, -1377), 1, 0, 0)), 100000000, 0, -1376)], (0)), 100000000, 0, -1375), (Tag1 (Tag1 ("keys_greater_or_equal_to"), (Tag3 ((Tag3 ("option", 10)), [((("k")), 100000000, 0, -1363)], (0)), 100000000, 0, -1374), (Tag1 (Tag1 ("keys_less_or_equal_to"), (Tag3 ((Tag3 ("option", 10)), [((("k")), 100000000, 0, -1363)], (0)), 100000000, 0, -1373), (Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1363); ((("v")), 100000000, 0, -1371); ((("cmp")), 100000000, 0, -1364)], (0)), 100000000, 0, -1372), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag2 ([((("k")), 100000000, 0, -1363); ((("v")), 100000000, 0, -1371)]), 100000000, 0, -1370)], (0)), 100000000, 0, -1369), 0), 100000000, 0, -1368), 0), 100000000, 0, -1367), 0), 100000000, 0, -1366), 0), 100000000, 0, -1365)], (0)), 100000000, 0, -1362), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 258)), 0); (("binary_search", 3682), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -1346); ((("cmp")), 100000000, 0, -1347); (Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1346); ((("v")), 100000000, 0, -1354); ((("cmp")), 100000000, 0, -1347)], (0)), 100000000, 0, -1361), (Tag1 (("compare"), (Tag1 (("key"), ((("k")), 100000000, 0, -1346), (Tag1 (("data"), ((("v")), 100000000, 0, -1354), (Tag1 (0, ((("key")), 100000000, 0, -1355), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1360), 0), 100000000, 0, -1359), 0), 100000000, 0, -1358), 0), 100000000, 0, -1357), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Binary_searchable"), "Which_target_by_key"), "t"), 0, (0)), 100000000, 0, -1356), (Tag1 (0, ((("key")), 100000000, 0, -1355), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([((("k")), 100000000, 0, -1346); ((("v")), 100000000, 0, -1354)]), 100000000, 0, -1353)], (0)), 100000000, 0, -1352), 0), 100000000, 0, -1351), 0), 100000000, 0, -1350), 0), 100000000, 0, -1349), 0), 100000000, 0, -1348)], (0)), 100000000, 0, -1345), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 259)), 0); (("binary_search_segmented", 3683), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -1331); ((("cmp")), 100000000, 0, -1332); (Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1331); ((("v")), 100000000, 0, -1338); ((("cmp")), 100000000, 0, -1332)], (0)), 100000000, 0, -1344), (Tag1 (("segment_of"), (Tag1 (("key"), ((("k")), 100000000, 0, -1331), (Tag1 (("data"), ((("v")), 100000000, 0, -1338), (Tag8 (([("Left", (0)); ("Right", (0))], (0, 100000000, 0, -1343), 1, 0, 0)), 100000000, 0, -1342), 0), 100000000, 0, -1341), 0), 100000000, 0, -1340), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Binary_searchable"), "Which_target_by_segment"), "t"), 0, (0)), 100000000, 0, -1339), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([((("k")), 100000000, 0, -1331); ((("v")), 100000000, 0, -1338)]), 100000000, 0, -1337)], (0)), 100000000, 0, -1336), 0), 100000000, 0, -1335), 0), 100000000, 0, -1334), 0), 100000000, 0, -1333)], (0)), 100000000, 0, -1330), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 260)), 0); (("binary_search_subrange", 3684), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -1314); ((("cmp")), 100000000, 0, -1315); (Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1314); ((("v")), 100000000, 0, -1321); ((("cmp")), 100000000, 0, -1315)], (0)), 100000000, 0, -1329), (Tag1 (("compare"), (Tag1 (("key"), ((("k")), 100000000, 0, -1314), (Tag1 (("data"), ((("v")), 100000000, 0, -1321), (Tag1 (0, ((("bound")), 100000000, 0, -1323), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1328), 0), 100000000, 0, -1327), 0), 100000000, 0, -1326), 0), 100000000, 0, -1325), (Tag1 (("lower_bound"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Maybe_bound"), "t"), [((("bound")), 100000000, 0, -1323)], (0)), 100000000, 0, -1324), (Tag1 (("upper_bound"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Maybe_bound"), "t"), [((("bound")), 100000000, 0, -1323)], (0)), 100000000, 0, -1322), (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1314); ((("v")), 100000000, 0, -1321); ((("cmp")), 100000000, 0, -1315)], (0)), 100000000, 0, -1320), 0), 100000000, 0, -1319), 0), 100000000, 0, -1318), 0), 100000000, 0, -1317), 0), 100000000, 0, -1316)], (0)), 100000000, 0, -1313), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 261)), 0); Tag3 (("Make_applicative_traversals", 3685), 0, (Tag2 (((("A", 3690)), (Tag1 (Tag1 ((Tag2 ("Base__")), "Applicative"), "Lazy_applicative"))), Tag1 ([(("mapi", 3803), ((Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -3487); ((("v1")), 100000000, 0, -3493); ((("cmp")), 100000000, 0, -3489)], (0)), 100000000, 0, -3494), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -3487), (Tag1 (("data"), ((("v1")), 100000000, 0, -3493), (Tag3 (Tag1 ((("A", 3690)), "t"), [((("v2")), 100000000, 0, -3488)], (0)), 100000000, 0, -3492), 0), 100000000, 0, -3491), 0), 100000000, 0, -3490), (Tag3 (Tag1 ((("A", 3690)), "t"), [(Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -3487); ((("v2")), 100000000, 0, -3488); ((("cmp")), 100000000, 0, -3489)], (0)), 100000000, 0, -3486)], (0)), 100000000, 0, -3485), 0), 100000000, 0, -3484), 0), 100000000, 0, -3483), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 263)), 0); (("filter_mapi", 3804), ((Tag1 (0, (Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -3474); ((("v1")), 100000000, 0, -3481); ((("cmp")), 100000000, 0, -3476)], (0)), 100000000, 0, -3482), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -3474), (Tag1 (("data"), ((("v1")), 100000000, 0, -3481), (Tag3 (Tag1 ((("A", 3690)), "t"), [(Tag3 ((Tag3 ("option", 10)), [((("v2")), 100000000, 0, -3475)], (0)), 100000000, 0, -3480)], (0)), 100000000, 0, -3479), 0), 100000000, 0, -3478), 0), 100000000, 0, -3477), (Tag3 (Tag1 ((("A", 3690)), "t"), [(Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -3474); ((("v2")), 100000000, 0, -3475); ((("cmp")), 100000000, 0, -3476)], (0)), 100000000, 0, -3473)], (0)), 100000000, 0, -3472), 0), 100000000, 0, -3471), 0), 100000000, 0, -3470), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), 0, Tag1 ("Base__Map_intf", 264)), 0)])), 0, (("src/map_intf.ml", 1950, 66419, 66425), ("src/map_intf.ml", 1956, 66701, 66778), 0), Tag1 ("Base__Map_intf", 265)), 0, 0); (("comparator", 3686), ((Tag1 (0, (Tag3 ((("t", 3582)), [((("a")), 100000000, 0, -1309); ((0), 100000000, 0, -1312); ((("cmp")), 100000000, 0, -1310)], (0)), 100000000, 0, -1311), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "t"), [((("a")), 100000000, 0, -1309); ((("cmp")), 100000000, 0, -1310)], (0)), 100000000, 0, -1308), 0), 100000000, 0, -1307), 0, (("src/map_intf.ml", 1958, 66780, 66784), ("src/map_intf.ml", 1958, 66780, 66843), 0), 0, Tag1 ("Base__Map_intf", 522)), 0); (("hash_fold_direct", 3687), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Hash"), "folder"), [((("k")), 100000000, 0, -1302)], (0)), 100000000, 0, -1306), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Hash"), "folder"), [((("v")), 100000000, 0, -1303)], (0)), 100000000, 0, -1305), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Hash"), "folder"), [(Tag3 ((("t", 3582)), [((("k")), 100000000, 0, -1302); ((("v")), 100000000, 0, -1303); ((("cmp")), 100000000, 0, -1304)], (0)), 100000000, 0, -1301)], (0)), 100000000, 0, -1300), 0), 100000000, 0, -1299), 0), 100000000, 0, -1298), 0, (("src/map_intf.ml", 1960, 66845, 66849), ("src/map_intf.ml", 1963, 66918, 66955), 0), 0, Tag1 ("Base__Map_intf", 523)), 0); Tag3 (("Empty_without_value_restriction", 3688), 0, (Tag2 (((("K", 3689)), (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "S1"))), Tag1 ([(("empty", 3805), ((Tag3 ((("t", 3582)), [(Tag3 (Tag1 ((("K", 3689)), "t"), [((("a")), 100000000, 0, -3497)], (0)), 100000000, 0, -3496); ((("v")), 100000000, 0, -3498); (Tag3 (Tag1 ((("K", 3689)), "comparator_witness"), 0, (0)), 100000000, 0, -3499)], (0)), 100000000, 0, -3495), 0, (("src/map_intf.ml", 1968, 67178, 67184), ("src/map_intf.ml", 1968, 67178, 67232), 0), 0, Tag1 ("Base__Map_intf", 525)), 0)])), 0, (("src/map_intf.ml", 1967, 67109, 67113), ("src/map_intf.ml", 1969, 67233, 67240), 0), Tag1 ("Base__Map_intf", 526)), 0, 0)]), 0, (("src/map_intf.ml", 1871, 63920, 63922), ("src/map_intf.ml", 1970, 67241, 67246), 0), Tag1 ("Base__Map_intf", 527)), 0, 0); Tag3 (("Poly", 3534), 0, (Tag1 ([Tag1 (("t", 3806), ([((("key")), 100000000, 0, -4488); ((("value")), 100000000, 0, -4489)], 2, 0, 1, ((Tag3 ((("t", 3412)), [((("key")), 100000000, 0, -4488); ((("value")), 100000000, 0, -4489); (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Poly"), "comparator_witness"), 0, (0)), 100000000, 0, -4490)], (0)), 100000000, 0, -4487)), [15; 9], [2; 2], 0, 0, (("src/map_intf.ml", 1975, 67303, 67312), ("src/map_intf.ml", 1975, 67303, 67389), 0), 0, 0, 0, Tag1 ("Base__Map_intf", 528)), 1, 0); Tag1 (("tree", 3807), ([((("key")), 100000000, 0, -4484); ((("value")), 100000000, 0, -4485)], 2, 0, 1, ((Tag3 (Tag1 (Tag1 ((("Using_comparator", 3533)), "Tree"), "t"), [((("key")), 100000000, 0, -4484); ((("value")), 100000000, 0, -4485); (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Poly"), "comparator_witness"), 0, (0)), 100000000, 0, -4486)], (0)), 100000000, 0, -4483)), [1; 1], [2; 2], 0, 0, (("src/map_intf.ml", 1976, 67390, 67399), ("src/map_intf.ml", 1977, 67427, 67512), 0), 0, 0, 0, Tag1 ("Base__Map_intf", 529)), 1, 0); Tag1 (("comparator_witness", 3808), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Poly"), "comparator_witness"), 0, (0)), 100000000, 0, -4482)), 0, 0, 0, 0, (("src/map_intf.ml", 1978, 67513, 67522), ("src/map_intf.ml", 1978, 67513, 67582), 0), 0, 0, 0, Tag1 ("Base__Map_intf", 530)), 1, 0); (("empty", 3809), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -4478); ((("cmp")), 100000000, 0, -4479); (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4478); ((0), 100000000, 0, -4481)], (0)), 100000000, 0, -4480)], (0)), 100000000, 0, -4477), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 273)), 0); (("singleton", 3810), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -4471); ((("cmp")), 100000000, 0, -4472); (Tag1 (0, ((("k")), 100000000, 0, -4471), (Tag1 (0, ((("v")), 100000000, 0, -4476), (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4471); ((("v")), 100000000, 0, -4476)], (0)), 100000000, 0, -4475), 0), 100000000, 0, -4474), 0), 100000000, 0, -4473)], (0)), 100000000, 0, -4470), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 274)), 0); (("map_keys", 3811), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k2")), 100000000, 0, -4459); ((("cmp2")), 100000000, 0, -4460); (Tag1 (0, (Tag3 ((("t", 3806)), [((("k1")), 100000000, 0, -4468); ((("v")), 100000000, 0, -4466)], (0)), 100000000, 0, -4469), (Tag1 (("f"), (Tag1 (0, ((("k1")), 100000000, 0, -4468), ((("k2")), 100000000, 0, -4459), 0), 100000000, 0, -4467), (Tag8 (([("Duplicate_key", ((((("k2")), 100000000, 0, -4459)))); ("Ok", (((Tag3 ((("t", 3806)), [((("k2")), 100000000, 0, -4459); ((("v")), 100000000, 0, -4466)], (0)), 100000000, 0, -4465))))], (0, 100000000, 0, -4464), 1, 0, 0)), 100000000, 0, -4463), 0), 100000000, 0, -4462), 0), 100000000, 0, -4461)], (0)), 100000000, 0, -4458), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 275)), 0); (("map_keys_exn", 3812), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k2")), 100000000, 0, -4449); ((("cmp2")), 100000000, 0, -4450); (Tag1 (0, (Tag3 ((("t", 3806)), [((("k1")), 100000000, 0, -4456); ((("v")), 100000000, 0, -4454)], (0)), 100000000, 0, -4457), (Tag1 (("f"), (Tag1 (0, ((("k1")), 100000000, 0, -4456), ((("k2")), 100000000, 0, -4449), 0), 100000000, 0, -4455), (Tag3 ((("t", 3806)), [((("k2")), 100000000, 0, -4449); ((("v")), 100000000, 0, -4454)], (0)), 100000000, 0, -4453), 0), 100000000, 0, -4452), 0), 100000000, 0, -4451)], (0)), 100000000, 0, -4448), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 276)), 0); (("transpose_keys", 3813), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k1")), 100000000, 0, -4437); ((("cmp1")), 100000000, 0, -4438); (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k2")), 100000000, 0, -4440); ((("cmp2")), 100000000, 0, -4441); (Tag1 (0, (Tag3 ((("t", 3806)), [((("k1")), 100000000, 0, -4437); (Tag3 ((("t", 3806)), [((("k2")), 100000000, 0, -4440); ((("a")), 100000000, 0, -4445)], (0)), 100000000, 0, -4447)], (0)), 100000000, 0, -4446), (Tag3 ((("t", 3806)), [((("k2")), 100000000, 0, -4440); (Tag3 ((("t", 3806)), [((("k1")), 100000000, 0, -4437); ((("a")), 100000000, 0, -4445)], (0)), 100000000, 0, -4444)], (0)), 100000000, 0, -4443), 0), 100000000, 0, -4442)], (0)), 100000000, 0, -4439)], (0)), 100000000, 0, -4436), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 277)), 0); (("of_sorted_array", 3814), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -4428); ((("cmp")), 100000000, 0, -4429); (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag2 ([((("k")), 100000000, 0, -4428); ((("v")), 100000000, 0, -4433)]), 100000000, 0, -4435)], (0)), 100000000, 0, -4434), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4428); ((("v")), 100000000, 0, -4433)], (0)), 100000000, 0, -4432)], (0)), 100000000, 0, -4431), 0), 100000000, 0, -4430)], (0)), 100000000, 0, -4427), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 278)), 0); (("of_sorted_array_unchecked", 3815), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -4420); ((("cmp")), 100000000, 0, -4421); (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag2 ([((("k")), 100000000, 0, -4420); ((("v")), 100000000, 0, -4424)]), 100000000, 0, -4426)], (0)), 100000000, 0, -4425), (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4420); ((("v")), 100000000, 0, -4424)], (0)), 100000000, 0, -4423), 0), 100000000, 0, -4422)], (0)), 100000000, 0, -4419), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 279)), 0); (("of_increasing_iterator_unchecked", 3816), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -4409); ((("cmp")), 100000000, 0, -4410); (Tag1 (("len"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -4418), (Tag1 (("f"), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -4417), (Tag2 ([((("k")), 100000000, 0, -4409); ((("v")), 100000000, 0, -4414)]), 100000000, 0, -4416), 0), 100000000, 0, -4415), (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4409); ((("v")), 100000000, 0, -4414)], (0)), 100000000, 0, -4413), 0), 100000000, 0, -4412), 0), 100000000, 0, -4411)], (0)), 100000000, 0, -4408), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 280)), 0); (("of_alist", 3817), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -4399); ((("cmp")), 100000000, 0, -4400); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("k")), 100000000, 0, -4399); ((("v")), 100000000, 0, -4405)]), 100000000, 0, -4407)], (0)), 100000000, 0, -4406), (Tag8 (([("Duplicate_key", ((((("k")), 100000000, 0, -4399)))); ("Ok", (((Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4399); ((("v")), 100000000, 0, -4405)], (0)), 100000000, 0, -4404))))], (0, 100000000, 0, -4403), 1, 0, 0)), 100000000, 0, -4402), 0), 100000000, 0, -4401)], (0)), 100000000, 0, -4398), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 281)), 0); (("of_alist_or_error", 3818), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -4390); ((("cmp")), 100000000, 0, -4391); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("k")), 100000000, 0, -4390); ((("v")), 100000000, 0, -4395)]), 100000000, 0, -4397)], (0)), 100000000, 0, -4396), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4390); ((("v")), 100000000, 0, -4395)], (0)), 100000000, 0, -4394)], (0)), 100000000, 0, -4393), 0), 100000000, 0, -4392)], (0)), 100000000, 0, -4389), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 282)), 0); (("of_alist_exn", 3819), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -4382); ((("cmp")), 100000000, 0, -4383); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("k")), 100000000, 0, -4382); ((("v")), 100000000, 0, -4386)]), 100000000, 0, -4388)], (0)), 100000000, 0, -4387), (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4382); ((("v")), 100000000, 0, -4386)], (0)), 100000000, 0, -4385), 0), 100000000, 0, -4384)], (0)), 100000000, 0, -4381), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 283)), 0); (("of_alist_multi", 3820), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -4373); ((("cmp")), 100000000, 0, -4374); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("k")), 100000000, 0, -4373); ((("v")), 100000000, 0, -4378)]), 100000000, 0, -4380)], (0)), 100000000, 0, -4379), (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4373); (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -4378)], (0)), 100000000, 0, -4377)], (0)), 100000000, 0, -4376), 0), 100000000, 0, -4375)], (0)), 100000000, 0, -4372), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 284)), 0); (("of_alist_fold", 3821), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -4360); ((("cmp")), 100000000, 0, -4361); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("k")), 100000000, 0, -4360); ((("v1")), 100000000, 0, -4369)]), 100000000, 0, -4371)], (0)), 100000000, 0, -4370), (Tag1 (("init"), ((("v2")), 100000000, 0, -4366), (Tag1 (("f"), (Tag1 (0, ((("v2")), 100000000, 0, -4366), (Tag1 (0, ((("v1")), 100000000, 0, -4369), ((("v2")), 100000000, 0, -4366), 0), 100000000, 0, -4368), 0), 100000000, 0, -4367), (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4360); ((("v2")), 100000000, 0, -4366)], (0)), 100000000, 0, -4365), 0), 100000000, 0, -4364), 0), 100000000, 0, -4363), 0), 100000000, 0, -4362)], (0)), 100000000, 0, -4359), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 285)), 0); (("of_alist_reduce", 3822), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -4349); ((("cmp")), 100000000, 0, -4350); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("k")), 100000000, 0, -4349); ((("v")), 100000000, 0, -4354)]), 100000000, 0, -4358)], (0)), 100000000, 0, -4357), (Tag1 (("f"), (Tag1 (0, ((("v")), 100000000, 0, -4354), (Tag1 (0, ((("v")), 100000000, 0, -4354), ((("v")), 100000000, 0, -4354), 0), 100000000, 0, -4356), 0), 100000000, 0, -4355), (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4349); ((("v")), 100000000, 0, -4354)], (0)), 100000000, 0, -4353), 0), 100000000, 0, -4352), 0), 100000000, 0, -4351)], (0)), 100000000, 0, -4348), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 286)), 0); (("of_increasing_sequence", 3823), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -4340); ((("cmp")), 100000000, 0, -4341); (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag2 ([((("k")), 100000000, 0, -4340); ((("v")), 100000000, 0, -4345)]), 100000000, 0, -4347)], (0)), 100000000, 0, -4346), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4340); ((("v")), 100000000, 0, -4345)], (0)), 100000000, 0, -4344)], (0)), 100000000, 0, -4343), 0), 100000000, 0, -4342)], (0)), 100000000, 0, -4339), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 287)), 0); (("of_sequence", 3824), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -4330); ((("cmp")), 100000000, 0, -4331); (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag2 ([((("k")), 100000000, 0, -4330); ((("v")), 100000000, 0, -4336)]), 100000000, 0, -4338)], (0)), 100000000, 0, -4337), (Tag8 (([("Duplicate_key", ((((("k")), 100000000, 0, -4330)))); ("Ok", (((Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4330); ((("v")), 100000000, 0, -4336)], (0)), 100000000, 0, -4335))))], (0, 100000000, 0, -4334), 1, 0, 0)), 100000000, 0, -4333), 0), 100000000, 0, -4332)], (0)), 100000000, 0, -4329), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 288)), 0); (("of_sequence_or_error", 3825), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -4321); ((("cmp")), 100000000, 0, -4322); (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag2 ([((("k")), 100000000, 0, -4321); ((("v")), 100000000, 0, -4326)]), 100000000, 0, -4328)], (0)), 100000000, 0, -4327), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4321); ((("v")), 100000000, 0, -4326)], (0)), 100000000, 0, -4325)], (0)), 100000000, 0, -4324), 0), 100000000, 0, -4323)], (0)), 100000000, 0, -4320), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 289)), 0); (("of_sequence_exn", 3826), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -4313); ((("cmp")), 100000000, 0, -4314); (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag2 ([((("k")), 100000000, 0, -4313); ((("v")), 100000000, 0, -4317)]), 100000000, 0, -4319)], (0)), 100000000, 0, -4318), (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4313); ((("v")), 100000000, 0, -4317)], (0)), 100000000, 0, -4316), 0), 100000000, 0, -4315)], (0)), 100000000, 0, -4312), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 290)), 0); (("of_sequence_multi", 3827), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -4304); ((("cmp")), 100000000, 0, -4305); (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag2 ([((("k")), 100000000, 0, -4304); ((("v")), 100000000, 0, -4309)]), 100000000, 0, -4311)], (0)), 100000000, 0, -4310), (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4304); (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -4309)], (0)), 100000000, 0, -4308)], (0)), 100000000, 0, -4307), 0), 100000000, 0, -4306)], (0)), 100000000, 0, -4303), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 291)), 0); (("of_sequence_fold", 3828), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -4291); ((("cmp")), 100000000, 0, -4292); (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag2 ([((("k")), 100000000, 0, -4291); ((("v1")), 100000000, 0, -4300)]), 100000000, 0, -4302)], (0)), 100000000, 0, -4301), (Tag1 (("init"), ((("v2")), 100000000, 0, -4297), (Tag1 (("f"), (Tag1 (0, ((("v2")), 100000000, 0, -4297), (Tag1 (0, ((("v1")), 100000000, 0, -4300), ((("v2")), 100000000, 0, -4297), 0), 100000000, 0, -4299), 0), 100000000, 0, -4298), (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4291); ((("v2")), 100000000, 0, -4297)], (0)), 100000000, 0, -4296), 0), 100000000, 0, -4295), 0), 100000000, 0, -4294), 0), 100000000, 0, -4293)], (0)), 100000000, 0, -4290), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 292)), 0); (("of_sequence_reduce", 3829), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -4280); ((("cmp")), 100000000, 0, -4281); (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag2 ([((("k")), 100000000, 0, -4280); ((("v")), 100000000, 0, -4285)]), 100000000, 0, -4289)], (0)), 100000000, 0, -4288), (Tag1 (("f"), (Tag1 (0, ((("v")), 100000000, 0, -4285), (Tag1 (0, ((("v")), 100000000, 0, -4285), ((("v")), 100000000, 0, -4285), 0), 100000000, 0, -4287), 0), 100000000, 0, -4286), (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4280); ((("v")), 100000000, 0, -4285)], (0)), 100000000, 0, -4284), 0), 100000000, 0, -4283), 0), 100000000, 0, -4282)], (0)), 100000000, 0, -4279), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 293)), 0); (("of_list_with_key", 3830), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -4269); ((("cmp")), 100000000, 0, -4270); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -4276)], (0)), 100000000, 0, -4278), (Tag1 (("get_key"), (Tag1 (0, ((("v")), 100000000, 0, -4276), ((("k")), 100000000, 0, -4269), 0), 100000000, 0, -4277), (Tag8 (([("Duplicate_key", ((((("k")), 100000000, 0, -4269)))); ("Ok", (((Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4269); ((("v")), 100000000, 0, -4276)], (0)), 100000000, 0, -4275))))], (0, 100000000, 0, -4274), 1, 0, 0)), 100000000, 0, -4273), 0), 100000000, 0, -4272), 0), 100000000, 0, -4271)], (0)), 100000000, 0, -4268), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 294)), 0); (("of_list_with_key_or_error", 3831), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -4259); ((("cmp")), 100000000, 0, -4260); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -4265)], (0)), 100000000, 0, -4267), (Tag1 (("get_key"), (Tag1 (0, ((("v")), 100000000, 0, -4265), ((("k")), 100000000, 0, -4259), 0), 100000000, 0, -4266), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4259); ((("v")), 100000000, 0, -4265)], (0)), 100000000, 0, -4264)], (0)), 100000000, 0, -4263), 0), 100000000, 0, -4262), 0), 100000000, 0, -4261)], (0)), 100000000, 0, -4258), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 295)), 0); (("of_list_with_key_exn", 3832), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -4250); ((("cmp")), 100000000, 0, -4251); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -4255)], (0)), 100000000, 0, -4257), (Tag1 (("get_key"), (Tag1 (0, ((("v")), 100000000, 0, -4255), ((("k")), 100000000, 0, -4250), 0), 100000000, 0, -4256), (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4250); ((("v")), 100000000, 0, -4255)], (0)), 100000000, 0, -4254), 0), 100000000, 0, -4253), 0), 100000000, 0, -4252)], (0)), 100000000, 0, -4249), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 296)), 0); (("of_list_with_key_multi", 3833), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -4240); ((("cmp")), 100000000, 0, -4241); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -4246)], (0)), 100000000, 0, -4248), (Tag1 (("get_key"), (Tag1 (0, ((("v")), 100000000, 0, -4246), ((("k")), 100000000, 0, -4240), 0), 100000000, 0, -4247), (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4240); (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -4246)], (0)), 100000000, 0, -4245)], (0)), 100000000, 0, -4244), 0), 100000000, 0, -4243), 0), 100000000, 0, -4242)], (0)), 100000000, 0, -4239), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 297)), 0); (("of_iteri", 3834), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -4227); ((("cmp")), 100000000, 0, -4228); (Tag1 (("iteri"), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -4227), (Tag1 (("data"), ((("v")), 100000000, 0, -4233), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4238), 0), 100000000, 0, -4237), 0), 100000000, 0, -4236), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4235), 0), 100000000, 0, -4234), (Tag8 (([("Duplicate_key", ((((("k")), 100000000, 0, -4227)))); ("Ok", (((Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4227); ((("v")), 100000000, 0, -4233)], (0)), 100000000, 0, -4232))))], (0, 100000000, 0, -4231), 1, 0, 0)), 100000000, 0, -4230), 0), 100000000, 0, -4229)], (0)), 100000000, 0, -4226), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 298)), 0); (("of_iteri_exn", 3835), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -4216); ((("cmp")), 100000000, 0, -4217); (Tag1 (("iteri"), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -4216), (Tag1 (("data"), ((("v")), 100000000, 0, -4220), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4225), 0), 100000000, 0, -4224), 0), 100000000, 0, -4223), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4222), 0), 100000000, 0, -4221), (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4216); ((("v")), 100000000, 0, -4220)], (0)), 100000000, 0, -4219), 0), 100000000, 0, -4218)], (0)), 100000000, 0, -4215), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 299)), 0); (("of_tree", 3836), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -4209); ((("cmp")), 100000000, 0, -4210); (Tag1 (0, (Tag3 ((("tree", 3807)), [((("k")), 100000000, 0, -4209); ((("v")), 100000000, 0, -4213)], (0)), 100000000, 0, -4214), (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4209); ((("v")), 100000000, 0, -4213)], (0)), 100000000, 0, -4212), 0), 100000000, 0, -4211)], (0)), 100000000, 0, -4208), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 300)), 0); (("invariants", 3837), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -4202); ((("cmp")), 100000000, 0, -4203); (Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4202); ((("v")), 100000000, 0, -4207)], (0)), 100000000, 0, -4206), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4205), 0), 100000000, 0, -4204)], (0)), 100000000, 0, -4201), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 191)), 0); (("is_empty", 3838), ((Tag1 (0, (Tag3 ((("t", 3806)), [((0), 100000000, 0, -4199); ((0), 100000000, 0, -4200)], (0)), 100000000, 0, -4198), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4197), 0), 100000000, 0, -4196), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 192)), 0); (("length", 3839), ((Tag1 (0, (Tag3 ((("t", 3806)), [((0), 100000000, 0, -4194); ((0), 100000000, 0, -4195)], (0)), 100000000, 0, -4193), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -4192), 0), 100000000, 0, -4191), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 193)), 0); (("add", 3840), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -4182); ((("cmp")), 100000000, 0, -4183); (Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4182); ((("v")), 100000000, 0, -4189)], (0)), 100000000, 0, -4190), (Tag1 (("key"), ((("k")), 100000000, 0, -4182), (Tag1 (("data"), ((("v")), 100000000, 0, -4189), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Or_duplicate"), "t"), [(Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4182); ((("v")), 100000000, 0, -4189)], (0)), 100000000, 0, -4188)], (0)), 100000000, 0, -4187), 0), 100000000, 0, -4186), 0), 100000000, 0, -4185), 0), 100000000, 0, -4184)], (0)), 100000000, 0, -4181), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 194)), 0); (("add_exn", 3841), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -4173); ((("cmp")), 100000000, 0, -4174); (Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4173); ((("v")), 100000000, 0, -4179)], (0)), 100000000, 0, -4180), (Tag1 (("key"), ((("k")), 100000000, 0, -4173), (Tag1 (("data"), ((("v")), 100000000, 0, -4179), (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4173); ((("v")), 100000000, 0, -4179)], (0)), 100000000, 0, -4178), 0), 100000000, 0, -4177), 0), 100000000, 0, -4176), 0), 100000000, 0, -4175)], (0)), 100000000, 0, -4172), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 195)), 0); (("set", 3842), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -4164); ((("cmp")), 100000000, 0, -4165); (Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4164); ((("v")), 100000000, 0, -4170)], (0)), 100000000, 0, -4171), (Tag1 (("key"), ((("k")), 100000000, 0, -4164), (Tag1 (("data"), ((("v")), 100000000, 0, -4170), (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4164); ((("v")), 100000000, 0, -4170)], (0)), 100000000, 0, -4169), 0), 100000000, 0, -4168), 0), 100000000, 0, -4167), 0), 100000000, 0, -4166)], (0)), 100000000, 0, -4163), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 196)), 0); (("add_multi", 3843), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -4153); ((("cmp")), 100000000, 0, -4154); (Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4153); (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -4160)], (0)), 100000000, 0, -4162)], (0)), 100000000, 0, -4161), (Tag1 (("key"), ((("k")), 100000000, 0, -4153), (Tag1 (("data"), ((("v")), 100000000, 0, -4160), (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4153); (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -4160)], (0)), 100000000, 0, -4159)], (0)), 100000000, 0, -4158), 0), 100000000, 0, -4157), 0), 100000000, 0, -4156), 0), 100000000, 0, -4155)], (0)), 100000000, 0, -4152), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 197)), 0); (("remove_multi", 3844), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -4143); ((("cmp")), 100000000, 0, -4144); (Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4143); (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -4149)], (0)), 100000000, 0, -4151)], (0)), 100000000, 0, -4150), (Tag1 (0, ((("k")), 100000000, 0, -4143), (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4143); (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -4149)], (0)), 100000000, 0, -4148)], (0)), 100000000, 0, -4147), 0), 100000000, 0, -4146), 0), 100000000, 0, -4145)], (0)), 100000000, 0, -4142), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 198)), 0); (("find_multi", 3845), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -4134); ((("cmp")), 100000000, 0, -4135); (Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4134); (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -4139)], (0)), 100000000, 0, -4141)], (0)), 100000000, 0, -4140), (Tag1 (0, ((("k")), 100000000, 0, -4134), (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -4139)], (0)), 100000000, 0, -4138), 0), 100000000, 0, -4137), 0), 100000000, 0, -4136)], (0)), 100000000, 0, -4133), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 199)), 0); (("change", 3846), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -4122); ((("cmp")), 100000000, 0, -4123); (Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4122); ((("v")), 100000000, 0, -4128)], (0)), 100000000, 0, -4132), (Tag1 (0, ((("k")), 100000000, 0, -4122), (Tag1 (("f"), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("v")), 100000000, 0, -4128)], (0)), 100000000, 0, -4131), (Tag3 ((Tag3 ("option", 10)), [((("v")), 100000000, 0, -4128)], (0)), 100000000, 0, -4130), 0), 100000000, 0, -4129), (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4122); ((("v")), 100000000, 0, -4128)], (0)), 100000000, 0, -4127), 0), 100000000, 0, -4126), 0), 100000000, 0, -4125), 0), 100000000, 0, -4124)], (0)), 100000000, 0, -4121), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 200)), 0); (("update", 3847), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -4111); ((("cmp")), 100000000, 0, -4112); (Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4111); ((("v")), 100000000, 0, -4117)], (0)), 100000000, 0, -4120), (Tag1 (0, ((("k")), 100000000, 0, -4111), (Tag1 (("f"), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("v")), 100000000, 0, -4117)], (0)), 100000000, 0, -4119), ((("v")), 100000000, 0, -4117), 0), 100000000, 0, -4118), (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4111); ((("v")), 100000000, 0, -4117)], (0)), 100000000, 0, -4116), 0), 100000000, 0, -4115), 0), 100000000, 0, -4114), 0), 100000000, 0, -4113)], (0)), 100000000, 0, -4110), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 201)), 0); (("find", 3848), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -4103); ((("cmp")), 100000000, 0, -4104); (Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4103); ((("v")), 100000000, 0, -4108)], (0)), 100000000, 0, -4109), (Tag1 (0, ((("k")), 100000000, 0, -4103), (Tag3 ((Tag3 ("option", 10)), [((("v")), 100000000, 0, -4108)], (0)), 100000000, 0, -4107), 0), 100000000, 0, -4106), 0), 100000000, 0, -4105)], (0)), 100000000, 0, -4102), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 202)), 0); (("find_exn", 3849), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -4096); ((("cmp")), 100000000, 0, -4097); (Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4096); ((("v")), 100000000, 0, -4100)], (0)), 100000000, 0, -4101), (Tag1 (0, ((("k")), 100000000, 0, -4096), ((("v")), 100000000, 0, -4100), 0), 100000000, 0, -4099), 0), 100000000, 0, -4098)], (0)), 100000000, 0, -4095), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 203)), 0); (("remove", 3850), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -4088); ((("cmp")), 100000000, 0, -4089); (Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4088); ((("v")), 100000000, 0, -4093)], (0)), 100000000, 0, -4094), (Tag1 (0, ((("k")), 100000000, 0, -4088), (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4088); ((("v")), 100000000, 0, -4093)], (0)), 100000000, 0, -4092), 0), 100000000, 0, -4091), 0), 100000000, 0, -4090)], (0)), 100000000, 0, -4087), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 204)), 0); (("mem", 3851), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -4080); ((("cmp")), 100000000, 0, -4081); (Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4080); ((0), 100000000, 0, -4086)], (0)), 100000000, 0, -4085), (Tag1 (0, ((("k")), 100000000, 0, -4080), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4084), 0), 100000000, 0, -4083), 0), 100000000, 0, -4082)], (0)), 100000000, 0, -4079), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 205)), 0); (("iter_keys", 3852), ((Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4076); ((0), 100000000, 0, -4078)], (0)), 100000000, 0, -4077), (Tag1 (("f"), (Tag1 (0, ((("k")), 100000000, 0, -4076), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4075), 0), 100000000, 0, -4074), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4073), 0), 100000000, 0, -4072), 0), 100000000, 0, -4071), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 206)), 0); (("iter", 3853), ((Tag1 (0, (Tag3 ((("t", 3806)), [((0), 100000000, 0, -4070); ((("v")), 100000000, 0, -4068)], (0)), 100000000, 0, -4069), (Tag1 (("f"), (Tag1 (0, ((("v")), 100000000, 0, -4068), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4067), 0), 100000000, 0, -4066), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4065), 0), 100000000, 0, -4064), 0), 100000000, 0, -4063), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 207)), 0); (("iteri", 3854), ((Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4061); ((("v")), 100000000, 0, -4060)], (0)), 100000000, 0, -4062), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -4061), (Tag1 (("data"), ((("v")), 100000000, 0, -4060), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4059), 0), 100000000, 0, -4058), 0), 100000000, 0, -4057), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4056), 0), 100000000, 0, -4055), 0), 100000000, 0, -4054), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 208)), 0); (("iteri_until", 3855), ((Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4052); ((("v")), 100000000, 0, -4051)], (0)), 100000000, 0, -4053), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -4052), (Tag1 (("data"), ((("v")), 100000000, 0, -4051), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Continue_or_stop"), "t"), 0, (0)), 100000000, 0, -4050), 0), 100000000, 0, -4049), 0), 100000000, 0, -4048), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Finished_or_unfinished"), "t"), 0, (0)), 100000000, 0, -4047), 0), 100000000, 0, -4046), 0), 100000000, 0, -4045), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 209)), 0); (("iter2", 3856), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -4031); ((("cmp")), 100000000, 0, -4032); (Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4031); ((("v1")), 100000000, 0, -4041)], (0)), 100000000, 0, -4044), (Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4031); ((("v2")), 100000000, 0, -4042)], (0)), 100000000, 0, -4043), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -4031), (Tag1 (("data"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Merge_element"), "t"), [((("v1")), 100000000, 0, -4041); ((("v2")), 100000000, 0, -4042)], (0)), 100000000, 0, -4040), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4039), 0), 100000000, 0, -4038), 0), 100000000, 0, -4037), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4036), 0), 100000000, 0, -4035), 0), 100000000, 0, -4034), 0), 100000000, 0, -4033)], (0)), 100000000, 0, -4030), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 210)), 0); (("map", 3857), ((Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4025); ((("v1")), 100000000, 0, -4028)], (0)), 100000000, 0, -4029), (Tag1 (("f"), (Tag1 (0, ((("v1")), 100000000, 0, -4028), ((("v2")), 100000000, 0, -4026), 0), 100000000, 0, -4027), (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4025); ((("v2")), 100000000, 0, -4026)], (0)), 100000000, 0, -4024), 0), 100000000, 0, -4023), 0), 100000000, 0, -4022), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 211)), 0); (("mapi", 3858), ((Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4016); ((("v1")), 100000000, 0, -4020)], (0)), 100000000, 0, -4021), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -4016), (Tag1 (("data"), ((("v1")), 100000000, 0, -4020), ((("v2")), 100000000, 0, -4017), 0), 100000000, 0, -4019), 0), 100000000, 0, -4018), (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4016); ((("v2")), 100000000, 0, -4017)], (0)), 100000000, 0, -4015), 0), 100000000, 0, -4014), 0), 100000000, 0, -4013), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 212)), 0); (("fold", 3859), ((Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4011); ((("v")), 100000000, 0, -4010)], (0)), 100000000, 0, -4012), (Tag1 (("init"), ((("acc")), 100000000, 0, -4006), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -4011), (Tag1 (("data"), ((("v")), 100000000, 0, -4010), (Tag1 (0, ((("acc")), 100000000, 0, -4006), ((("acc")), 100000000, 0, -4006), 0), 100000000, 0, -4009), 0), 100000000, 0, -4008), 0), 100000000, 0, -4007), ((("acc")), 100000000, 0, -4006), 0), 100000000, 0, -4005), 0), 100000000, 0, -4004), 0), 100000000, 0, -4003), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 213)), 0); (("fold_until", 3860), ((Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4001); ((("v")), 100000000, 0, -4000)], (0)), 100000000, 0, -4002), (Tag1 (("init"), ((("acc")), 100000000, 0, -3995), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -4001), (Tag1 (("data"), ((("v")), 100000000, 0, -4000), (Tag1 (0, ((("acc")), 100000000, 0, -3995), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Container"), "Continue_or_stop"), "t"), [((("acc")), 100000000, 0, -3995); ((("final")), 100000000, 0, -3993)], (0)), 100000000, 0, -3999), 0), 100000000, 0, -3998), 0), 100000000, 0, -3997), 0), 100000000, 0, -3996), (Tag1 (("finish"), (Tag1 (0, ((("acc")), 100000000, 0, -3995), ((("final")), 100000000, 0, -3993), 0), 100000000, 0, -3994), ((("final")), 100000000, 0, -3993), 0), 100000000, 0, -3992), 0), 100000000, 0, -3991), 0), 100000000, 0, -3990), 0), 100000000, 0, -3989), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 214)), 0); (("fold_right", 3861), ((Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3987); ((("v")), 100000000, 0, -3986)], (0)), 100000000, 0, -3988), (Tag1 (("init"), ((("acc")), 100000000, 0, -3982), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -3987), (Tag1 (("data"), ((("v")), 100000000, 0, -3986), (Tag1 (0, ((("acc")), 100000000, 0, -3982), ((("acc")), 100000000, 0, -3982), 0), 100000000, 0, -3985), 0), 100000000, 0, -3984), 0), 100000000, 0, -3983), ((("acc")), 100000000, 0, -3982), 0), 100000000, 0, -3981), 0), 100000000, 0, -3980), 0), 100000000, 0, -3979), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 215)), 0); (("fold2", 3862), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -3964); ((("cmp")), 100000000, 0, -3965); (Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3964); ((("v1")), 100000000, 0, -3975)], (0)), 100000000, 0, -3978), (Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3964); ((("v2")), 100000000, 0, -3976)], (0)), 100000000, 0, -3977), (Tag1 (("init"), ((("acc")), 100000000, 0, -3970), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -3964), (Tag1 (("data"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Merge_element"), "t"), [((("v1")), 100000000, 0, -3975); ((("v2")), 100000000, 0, -3976)], (0)), 100000000, 0, -3974), (Tag1 (0, ((("acc")), 100000000, 0, -3970), ((("acc")), 100000000, 0, -3970), 0), 100000000, 0, -3973), 0), 100000000, 0, -3972), 0), 100000000, 0, -3971), ((("acc")), 100000000, 0, -3970), 0), 100000000, 0, -3969), 0), 100000000, 0, -3968), 0), 100000000, 0, -3967), 0), 100000000, 0, -3966)], (0)), 100000000, 0, -3963), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 216)), 0); (("filter_keys", 3863), ((Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3958); ((("v")), 100000000, 0, -3959)], (0)), 100000000, 0, -3962), (Tag1 (("f"), (Tag1 (0, ((("k")), 100000000, 0, -3958), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3961), 0), 100000000, 0, -3960), (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3958); ((("v")), 100000000, 0, -3959)], (0)), 100000000, 0, -3957), 0), 100000000, 0, -3956), 0), 100000000, 0, -3955), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 217)), 0); (("filter", 3864), ((Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3950); ((("v")), 100000000, 0, -3951)], (0)), 100000000, 0, -3954), (Tag1 (("f"), (Tag1 (0, ((("v")), 100000000, 0, -3951), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3953), 0), 100000000, 0, -3952), (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3950); ((("v")), 100000000, 0, -3951)], (0)), 100000000, 0, -3949), 0), 100000000, 0, -3948), 0), 100000000, 0, -3947), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 218)), 0); (("filteri", 3865), ((Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3941); ((("v")), 100000000, 0, -3942)], (0)), 100000000, 0, -3946), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -3941), (Tag1 (("data"), ((("v")), 100000000, 0, -3942), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3945), 0), 100000000, 0, -3944), 0), 100000000, 0, -3943), (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3941); ((("v")), 100000000, 0, -3942)], (0)), 100000000, 0, -3940), 0), 100000000, 0, -3939), 0), 100000000, 0, -3938), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 219)), 0); (("filter_map", 3866), ((Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3932); ((("v1")), 100000000, 0, -3936)], (0)), 100000000, 0, -3937), (Tag1 (("f"), (Tag1 (0, ((("v1")), 100000000, 0, -3936), (Tag3 ((Tag3 ("option", 10)), [((("v2")), 100000000, 0, -3933)], (0)), 100000000, 0, -3935), 0), 100000000, 0, -3934), (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3932); ((("v2")), 100000000, 0, -3933)], (0)), 100000000, 0, -3931), 0), 100000000, 0, -3930), 0), 100000000, 0, -3929), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 220)), 0); (("filter_mapi", 3867), ((Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3922); ((("v1")), 100000000, 0, -3927)], (0)), 100000000, 0, -3928), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -3922), (Tag1 (("data"), ((("v1")), 100000000, 0, -3927), (Tag3 ((Tag3 ("option", 10)), [((("v2")), 100000000, 0, -3923)], (0)), 100000000, 0, -3926), 0), 100000000, 0, -3925), 0), 100000000, 0, -3924), (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3922); ((("v2")), 100000000, 0, -3923)], (0)), 100000000, 0, -3921), 0), 100000000, 0, -3920), 0), 100000000, 0, -3919), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 221)), 0); (("partition_mapi", 3868), ((Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3910); ((("v1")), 100000000, 0, -3917)], (0)), 100000000, 0, -3918), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -3910), (Tag1 (("data"), ((("v1")), 100000000, 0, -3917), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Either"), "t"), [((("v2")), 100000000, 0, -3911); ((("v3")), 100000000, 0, -3913)], (0)), 100000000, 0, -3916), 0), 100000000, 0, -3915), 0), 100000000, 0, -3914), (Tag2 ([(Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3910); ((("v2")), 100000000, 0, -3911)], (0)), 100000000, 0, -3909); (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3910); ((("v3")), 100000000, 0, -3913)], (0)), 100000000, 0, -3912)]), 100000000, 0, -3908), 0), 100000000, 0, -3907), 0), 100000000, 0, -3906), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 222)), 0); (("partition_map", 3869), ((Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3898); ((("v1")), 100000000, 0, -3904)], (0)), 100000000, 0, -3905), (Tag1 (("f"), (Tag1 (0, ((("v1")), 100000000, 0, -3904), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Either"), "t"), [((("v2")), 100000000, 0, -3899); ((("v3")), 100000000, 0, -3901)], (0)), 100000000, 0, -3903), 0), 100000000, 0, -3902), (Tag2 ([(Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3898); ((("v2")), 100000000, 0, -3899)], (0)), 100000000, 0, -3897); (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3898); ((("v3")), 100000000, 0, -3901)], (0)), 100000000, 0, -3900)]), 100000000, 0, -3896), 0), 100000000, 0, -3895), 0), 100000000, 0, -3894), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 223)), 0); (("partitioni_tf", 3870), ((Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3887); ((("v")), 100000000, 0, -3888)], (0)), 100000000, 0, -3893), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -3887), (Tag1 (("data"), ((("v")), 100000000, 0, -3888), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3892), 0), 100000000, 0, -3891), 0), 100000000, 0, -3890), (Tag2 ([(Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3887); ((("v")), 100000000, 0, -3888)], (0)), 100000000, 0, -3886); (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3887); ((("v")), 100000000, 0, -3888)], (0)), 100000000, 0, -3889)]), 100000000, 0, -3885), 0), 100000000, 0, -3884), 0), 100000000, 0, -3883), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 224)), 0); (("partition_tf", 3871), ((Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3877); ((("v")), 100000000, 0, -3878)], (0)), 100000000, 0, -3882), (Tag1 (("f"), (Tag1 (0, ((("v")), 100000000, 0, -3878), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3881), 0), 100000000, 0, -3880), (Tag2 ([(Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3877); ((("v")), 100000000, 0, -3878)], (0)), 100000000, 0, -3876); (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3877); ((("v")), 100000000, 0, -3878)], (0)), 100000000, 0, -3879)]), 100000000, 0, -3875), 0), 100000000, 0, -3874), 0), 100000000, 0, -3873), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 225)), 0); (("combine_errors", 3872), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -3865); ((("cmp")), 100000000, 0, -3866); (Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3865); (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [((("v")), 100000000, 0, -3870)], (0)), 100000000, 0, -3872)], (0)), 100000000, 0, -3871), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3865); ((("v")), 100000000, 0, -3870)], (0)), 100000000, 0, -3869)], (0)), 100000000, 0, -3868), 0), 100000000, 0, -3867)], (0)), 100000000, 0, -3864), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 226)), 0); (("compare_direct", 3873), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -3852); ((("cmp")), 100000000, 0, -3853); (Tag1 (0, (Tag1 (0, ((("v")), 100000000, 0, -3859), (Tag1 (0, ((("v")), 100000000, 0, -3859), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3863), 0), 100000000, 0, -3862), 0), 100000000, 0, -3861), (Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3852); ((("v")), 100000000, 0, -3859)], (0)), 100000000, 0, -3860), (Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3852); ((("v")), 100000000, 0, -3859)], (0)), 100000000, 0, -3858), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3857), 0), 100000000, 0, -3856), 0), 100000000, 0, -3855), 0), 100000000, 0, -3854)], (0)), 100000000, 0, -3851), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 227)), 0); (("equal", 3874), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -3839); ((("cmp")), 100000000, 0, -3840); (Tag1 (0, (Tag1 (0, ((("v")), 100000000, 0, -3846), (Tag1 (0, ((("v")), 100000000, 0, -3846), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3850), 0), 100000000, 0, -3849), 0), 100000000, 0, -3848), (Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3839); ((("v")), 100000000, 0, -3846)], (0)), 100000000, 0, -3847), (Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3839); ((("v")), 100000000, 0, -3846)], (0)), 100000000, 0, -3845), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3844), 0), 100000000, 0, -3843), 0), 100000000, 0, -3842), 0), 100000000, 0, -3841)], (0)), 100000000, 0, -3838), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 228)), 0); (("keys", 3875), ((Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3835); ((0), 100000000, 0, -3837)], (0)), 100000000, 0, -3836), (Tag3 ((Tag3 ("list", 9)), [((("k")), 100000000, 0, -3835)], (0)), 100000000, 0, -3834), 0), 100000000, 0, -3833), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 229)), 0); (("data", 3876), ((Tag1 (0, (Tag3 ((("t", 3806)), [((0), 100000000, 0, -3832); ((("v")), 100000000, 0, -3830)], (0)), 100000000, 0, -3831), (Tag3 ((Tag3 ("list", 9)), [((("v")), 100000000, 0, -3830)], (0)), 100000000, 0, -3829), 0), 100000000, 0, -3828), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 230)), 0); (("to_alist", 3877), ((Tag1 (Tag1 ("key_order"), (Tag3 ((Tag3 ("option", 10)), [(Tag8 (([("Decreasing", (0)); ("Increasing", (0))], (0, 100000000, 0, -3827), 1, 0, 0)), 100000000, 0, -3826)], (0)), 100000000, 0, -3825), (Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3822); ((("v")), 100000000, 0, -3823)], (0)), 100000000, 0, -3824), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("k")), 100000000, 0, -3822); ((("v")), 100000000, 0, -3823)]), 100000000, 0, -3821)], (0)), 100000000, 0, -3820), 0), 100000000, 0, -3819), 0), 100000000, 0, -3818), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 231)), 0); (("merge", 3878), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -3803); ((("cmp")), 100000000, 0, -3804); (Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3803); ((("v1")), 100000000, 0, -3814)], (0)), 100000000, 0, -3817), (Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3803); ((("v2")), 100000000, 0, -3815)], (0)), 100000000, 0, -3816), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -3803), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Merge_element"), "t"), [((("v1")), 100000000, 0, -3814); ((("v2")), 100000000, 0, -3815)], (0)), 100000000, 0, -3813), (Tag3 ((Tag3 ("option", 10)), [((("v3")), 100000000, 0, -3809)], (0)), 100000000, 0, -3812), 0), 100000000, 0, -3811), 0), 100000000, 0, -3810), (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3803); ((("v3")), 100000000, 0, -3809)], (0)), 100000000, 0, -3808), 0), 100000000, 0, -3807), 0), 100000000, 0, -3806), 0), 100000000, 0, -3805)], (0)), 100000000, 0, -3802), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 232)), 0); (("merge_skewed", 3879), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -3790); ((("cmp")), 100000000, 0, -3791); (Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3790); ((("v")), 100000000, 0, -3796)], (0)), 100000000, 0, -3801), (Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3790); ((("v")), 100000000, 0, -3796)], (0)), 100000000, 0, -3800), (Tag1 (("combine"), (Tag1 (("key"), ((("k")), 100000000, 0, -3790), (Tag1 (0, ((("v")), 100000000, 0, -3796), (Tag1 (0, ((("v")), 100000000, 0, -3796), ((("v")), 100000000, 0, -3796), 0), 100000000, 0, -3799), 0), 100000000, 0, -3798), 0), 100000000, 0, -3797), (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3790); ((("v")), 100000000, 0, -3796)], (0)), 100000000, 0, -3795), 0), 100000000, 0, -3794), 0), 100000000, 0, -3793), 0), 100000000, 0, -3792)], (0)), 100000000, 0, -3789), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 233)), 0); (("symmetric_diff", 3880), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -3776); ((("cmp")), 100000000, 0, -3777); (Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3776); ((("v")), 100000000, 0, -3783)], (0)), 100000000, 0, -3788), (Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3776); ((("v")), 100000000, 0, -3783)], (0)), 100000000, 0, -3787), (Tag1 (("data_equal"), (Tag1 (0, ((("v")), 100000000, 0, -3783), (Tag1 (0, ((("v")), 100000000, 0, -3783), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3786), 0), 100000000, 0, -3785), 0), 100000000, 0, -3784), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Symmetric_diff_element"), "t"), [((("k")), 100000000, 0, -3776); ((("v")), 100000000, 0, -3783)], (0)), 100000000, 0, -3782)], (0)), 100000000, 0, -3781), 0), 100000000, 0, -3780), 0), 100000000, 0, -3779), 0), 100000000, 0, -3778)], (0)), 100000000, 0, -3775), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 234)), 0); (("fold_symmetric_diff", 3881), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -3758); ((("cmp")), 100000000, 0, -3759); (Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3758); ((("v")), 100000000, 0, -3769)], (0)), 100000000, 0, -3774), (Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3758); ((("v")), 100000000, 0, -3769)], (0)), 100000000, 0, -3773), (Tag1 (("data_equal"), (Tag1 (0, ((("v")), 100000000, 0, -3769), (Tag1 (0, ((("v")), 100000000, 0, -3769), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3772), 0), 100000000, 0, -3771), 0), 100000000, 0, -3770), (Tag1 (("init"), ((("acc")), 100000000, 0, -3765), (Tag1 (("f"), (Tag1 (0, ((("acc")), 100000000, 0, -3765), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Symmetric_diff_element"), "t"), [((("k")), 100000000, 0, -3758); ((("v")), 100000000, 0, -3769)], (0)), 100000000, 0, -3768), ((("acc")), 100000000, 0, -3765), 0), 100000000, 0, -3767), 0), 100000000, 0, -3766), ((("acc")), 100000000, 0, -3765), 0), 100000000, 0, -3764), 0), 100000000, 0, -3763), 0), 100000000, 0, -3762), 0), 100000000, 0, -3761), 0), 100000000, 0, -3760)], (0)), 100000000, 0, -3757), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 235)), 0); (("min_elt", 3882), ((Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3754); ((("v")), 100000000, 0, -3755)], (0)), 100000000, 0, -3756), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([((("k")), 100000000, 0, -3754); ((("v")), 100000000, 0, -3755)]), 100000000, 0, -3753)], (0)), 100000000, 0, -3752), 0), 100000000, 0, -3751), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 236)), 0); (("min_elt_exn", 3883), ((Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3748); ((("v")), 100000000, 0, -3749)], (0)), 100000000, 0, -3750), (Tag2 ([((("k")), 100000000, 0, -3748); ((("v")), 100000000, 0, -3749)]), 100000000, 0, -3747), 0), 100000000, 0, -3746), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 237)), 0); (("max_elt", 3884), ((Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3743); ((("v")), 100000000, 0, -3744)], (0)), 100000000, 0, -3745), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([((("k")), 100000000, 0, -3743); ((("v")), 100000000, 0, -3744)]), 100000000, 0, -3742)], (0)), 100000000, 0, -3741), 0), 100000000, 0, -3740), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 238)), 0); (("max_elt_exn", 3885), ((Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3737); ((("v")), 100000000, 0, -3738)], (0)), 100000000, 0, -3739), (Tag2 ([((("k")), 100000000, 0, -3737); ((("v")), 100000000, 0, -3738)]), 100000000, 0, -3736), 0), 100000000, 0, -3735), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 239)), 0); (("for_all", 3886), ((Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3734); ((("v")), 100000000, 0, -3732)], (0)), 100000000, 0, -3733), (Tag1 (("f"), (Tag1 (0, ((("v")), 100000000, 0, -3732), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3731), 0), 100000000, 0, -3730), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3729), 0), 100000000, 0, -3728), 0), 100000000, 0, -3727), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 240)), 0); (("for_alli", 3887), ((Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3725); ((("v")), 100000000, 0, -3724)], (0)), 100000000, 0, -3726), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -3725), (Tag1 (("data"), ((("v")), 100000000, 0, -3724), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3723), 0), 100000000, 0, -3722), 0), 100000000, 0, -3721), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3720), 0), 100000000, 0, -3719), 0), 100000000, 0, -3718), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 241)), 0); (("exists", 3888), ((Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3717); ((("v")), 100000000, 0, -3715)], (0)), 100000000, 0, -3716), (Tag1 (("f"), (Tag1 (0, ((("v")), 100000000, 0, -3715), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3714), 0), 100000000, 0, -3713), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3712), 0), 100000000, 0, -3711), 0), 100000000, 0, -3710), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 242)), 0); (("existsi", 3889), ((Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3708); ((("v")), 100000000, 0, -3707)], (0)), 100000000, 0, -3709), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -3708), (Tag1 (("data"), ((("v")), 100000000, 0, -3707), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3706), 0), 100000000, 0, -3705), 0), 100000000, 0, -3704), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3703), 0), 100000000, 0, -3702), 0), 100000000, 0, -3701), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 243)), 0); (("count", 3890), ((Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3700); ((("v")), 100000000, 0, -3698)], (0)), 100000000, 0, -3699), (Tag1 (("f"), (Tag1 (0, ((("v")), 100000000, 0, -3698), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3697), 0), 100000000, 0, -3696), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3695), 0), 100000000, 0, -3694), 0), 100000000, 0, -3693), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 244)), 0); (("counti", 3891), ((Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3691); ((("v")), 100000000, 0, -3690)], (0)), 100000000, 0, -3692), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -3691), (Tag1 (("data"), ((("v")), 100000000, 0, -3690), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3689), 0), 100000000, 0, -3688), 0), 100000000, 0, -3687), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3686), 0), 100000000, 0, -3685), 0), 100000000, 0, -3684), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 245)), 0); (("split", 3892), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -3673); ((("cmp")), 100000000, 0, -3674); (Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3673); ((("v")), 100000000, 0, -3679)], (0)), 100000000, 0, -3683), (Tag1 (0, ((("k")), 100000000, 0, -3673), (Tag2 ([(Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3673); ((("v")), 100000000, 0, -3679)], (0)), 100000000, 0, -3678); (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([((("k")), 100000000, 0, -3673); ((("v")), 100000000, 0, -3679)]), 100000000, 0, -3681)], (0)), 100000000, 0, -3680); (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3673); ((("v")), 100000000, 0, -3679)], (0)), 100000000, 0, -3682)]), 100000000, 0, -3677), 0), 100000000, 0, -3676), 0), 100000000, 0, -3675)], (0)), 100000000, 0, -3672), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 246)), 0); (("split_le_gt", 3893), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -3663); ((("cmp")), 100000000, 0, -3664); (Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3663); ((("v")), 100000000, 0, -3669)], (0)), 100000000, 0, -3671), (Tag1 (0, ((("k")), 100000000, 0, -3663), (Tag2 ([(Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3663); ((("v")), 100000000, 0, -3669)], (0)), 100000000, 0, -3668); (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3663); ((("v")), 100000000, 0, -3669)], (0)), 100000000, 0, -3670)]), 100000000, 0, -3667), 0), 100000000, 0, -3666), 0), 100000000, 0, -3665)], (0)), 100000000, 0, -3662), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 247)), 0); (("split_lt_ge", 3894), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -3653); ((("cmp")), 100000000, 0, -3654); (Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3653); ((("v")), 100000000, 0, -3659)], (0)), 100000000, 0, -3661), (Tag1 (0, ((("k")), 100000000, 0, -3653), (Tag2 ([(Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3653); ((("v")), 100000000, 0, -3659)], (0)), 100000000, 0, -3658); (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3653); ((("v")), 100000000, 0, -3659)], (0)), 100000000, 0, -3660)]), 100000000, 0, -3657), 0), 100000000, 0, -3656), 0), 100000000, 0, -3655)], (0)), 100000000, 0, -3652), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 248)), 0); (("append", 3895), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -3642); ((("cmp")), 100000000, 0, -3643); (Tag1 (("lower_part"), (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3642); ((("v")), 100000000, 0, -3649)], (0)), 100000000, 0, -3651), (Tag1 (("upper_part"), (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3642); ((("v")), 100000000, 0, -3649)], (0)), 100000000, 0, -3650), (Tag8 (([("Ok", (((Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3642); ((("v")), 100000000, 0, -3649)], (0)), 100000000, 0, -3648)))); ("Overlapping_key_ranges", (0))], (0, 100000000, 0, -3647), 1, 0, 0)), 100000000, 0, -3646), 0), 100000000, 0, -3645), 0), 100000000, 0, -3644)], (0)), 100000000, 0, -3641), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 249)), 0); (("subrange", 3896), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -3631); ((("cmp")), 100000000, 0, -3632); (Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3631); ((("v")), 100000000, 0, -3637)], (0)), 100000000, 0, -3640), (Tag1 (("lower_bound"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Maybe_bound"), "t"), [((("k")), 100000000, 0, -3631)], (0)), 100000000, 0, -3639), (Tag1 (("upper_bound"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Maybe_bound"), "t"), [((("k")), 100000000, 0, -3631)], (0)), 100000000, 0, -3638), (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3631); ((("v")), 100000000, 0, -3637)], (0)), 100000000, 0, -3636), 0), 100000000, 0, -3635), 0), 100000000, 0, -3634), 0), 100000000, 0, -3633)], (0)), 100000000, 0, -3630), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 250)), 0); (("fold_range_inclusive", 3897), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -3617); ((("cmp")), 100000000, 0, -3618); (Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3617); ((("v")), 100000000, 0, -3628)], (0)), 100000000, 0, -3629), (Tag1 (("min"), ((("k")), 100000000, 0, -3617), (Tag1 (("max"), ((("k")), 100000000, 0, -3617), (Tag1 (("init"), ((("acc")), 100000000, 0, -3624), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -3617), (Tag1 (("data"), ((("v")), 100000000, 0, -3628), (Tag1 (0, ((("acc")), 100000000, 0, -3624), ((("acc")), 100000000, 0, -3624), 0), 100000000, 0, -3627), 0), 100000000, 0, -3626), 0), 100000000, 0, -3625), ((("acc")), 100000000, 0, -3624), 0), 100000000, 0, -3623), 0), 100000000, 0, -3622), 0), 100000000, 0, -3621), 0), 100000000, 0, -3620), 0), 100000000, 0, -3619)], (0)), 100000000, 0, -3616), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 251)), 0); (("range_to_alist", 3898), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -3607); ((("cmp")), 100000000, 0, -3608); (Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3607); ((("v")), 100000000, 0, -3614)], (0)), 100000000, 0, -3615), (Tag1 (("min"), ((("k")), 100000000, 0, -3607), (Tag1 (("max"), ((("k")), 100000000, 0, -3607), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("k")), 100000000, 0, -3607); ((("v")), 100000000, 0, -3614)]), 100000000, 0, -3613)], (0)), 100000000, 0, -3612), 0), 100000000, 0, -3611), 0), 100000000, 0, -3610), 0), 100000000, 0, -3609)], (0)), 100000000, 0, -3606), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 252)), 0); (("closest_key", 3899), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -3595); ((("cmp")), 100000000, 0, -3596); (Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3595); ((("v")), 100000000, 0, -3602)], (0)), 100000000, 0, -3605), (Tag1 (0, (Tag8 (([("Greater_or_equal_to", (0)); ("Greater_than", (0)); ("Less_or_equal_to", (0)); ("Less_than", (0))], (0, 100000000, 0, -3604), 1, 0, 0)), 100000000, 0, -3603), (Tag1 (0, ((("k")), 100000000, 0, -3595), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([((("k")), 100000000, 0, -3595); ((("v")), 100000000, 0, -3602)]), 100000000, 0, -3601)], (0)), 100000000, 0, -3600), 0), 100000000, 0, -3599), 0), 100000000, 0, -3598), 0), 100000000, 0, -3597)], (0)), 100000000, 0, -3594), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 253)), 0); (("nth", 3900), ((Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3590); ((("v")), 100000000, 0, -3591)], (0)), 100000000, 0, -3593), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3592), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([((("k")), 100000000, 0, -3590); ((("v")), 100000000, 0, -3591)]), 100000000, 0, -3589)], (0)), 100000000, 0, -3588), 0), 100000000, 0, -3587), 0), 100000000, 0, -3586), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 254)), 0); (("nth_exn", 3901), ((Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3582); ((("v")), 100000000, 0, -3583)], (0)), 100000000, 0, -3585), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3584), (Tag2 ([((("k")), 100000000, 0, -3582); ((("v")), 100000000, 0, -3583)]), 100000000, 0, -3581), 0), 100000000, 0, -3580), 0), 100000000, 0, -3579), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 255)), 0); (("rank", 3902), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -3571); ((("cmp")), 100000000, 0, -3572); (Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3571); ((0), 100000000, 0, -3578)], (0)), 100000000, 0, -3577), (Tag1 (0, ((("k")), 100000000, 0, -3571), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3576)], (0)), 100000000, 0, -3575), 0), 100000000, 0, -3574), 0), 100000000, 0, -3573)], (0)), 100000000, 0, -3570), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 256)), 0); (("to_tree", 3903), ((Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3567); ((("v")), 100000000, 0, -3568)], (0)), 100000000, 0, -3569), (Tag3 ((("tree", 3807)), [((("k")), 100000000, 0, -3567); ((("v")), 100000000, 0, -3568)], (0)), 100000000, 0, -3566), 0), 100000000, 0, -3565), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 257)), 0); (("to_sequence", 3904), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -3550); ((("cmp")), 100000000, 0, -3551); (Tag1 (Tag1 ("order"), (Tag3 ((Tag3 ("option", 10)), [(Tag8 (([("Decreasing_key", (0)); ("Increasing_key", (0))], (0, 100000000, 0, -3564), 1, 0, 0)), 100000000, 0, -3563)], (0)), 100000000, 0, -3562), (Tag1 (Tag1 ("keys_greater_or_equal_to"), (Tag3 ((Tag3 ("option", 10)), [((("k")), 100000000, 0, -3550)], (0)), 100000000, 0, -3561), (Tag1 (Tag1 ("keys_less_or_equal_to"), (Tag3 ((Tag3 ("option", 10)), [((("k")), 100000000, 0, -3550)], (0)), 100000000, 0, -3560), (Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3550); ((("v")), 100000000, 0, -3558)], (0)), 100000000, 0, -3559), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sequence"), "t"), [(Tag2 ([((("k")), 100000000, 0, -3550); ((("v")), 100000000, 0, -3558)]), 100000000, 0, -3557)], (0)), 100000000, 0, -3556), 0), 100000000, 0, -3555), 0), 100000000, 0, -3554), 0), 100000000, 0, -3553), 0), 100000000, 0, -3552)], (0)), 100000000, 0, -3549), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 258)), 0); (("binary_search", 3905), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -3533); ((("cmp")), 100000000, 0, -3534); (Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3533); ((("v")), 100000000, 0, -3541)], (0)), 100000000, 0, -3548), (Tag1 (("compare"), (Tag1 (("key"), ((("k")), 100000000, 0, -3533), (Tag1 (("data"), ((("v")), 100000000, 0, -3541), (Tag1 (0, ((("key")), 100000000, 0, -3542), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3547), 0), 100000000, 0, -3546), 0), 100000000, 0, -3545), 0), 100000000, 0, -3544), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Binary_searchable"), "Which_target_by_key"), "t"), 0, (0)), 100000000, 0, -3543), (Tag1 (0, ((("key")), 100000000, 0, -3542), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([((("k")), 100000000, 0, -3533); ((("v")), 100000000, 0, -3541)]), 100000000, 0, -3540)], (0)), 100000000, 0, -3539), 0), 100000000, 0, -3538), 0), 100000000, 0, -3537), 0), 100000000, 0, -3536), 0), 100000000, 0, -3535)], (0)), 100000000, 0, -3532), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 259)), 0); (("binary_search_segmented", 3906), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -3518); ((("cmp")), 100000000, 0, -3519); (Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3518); ((("v")), 100000000, 0, -3525)], (0)), 100000000, 0, -3531), (Tag1 (("segment_of"), (Tag1 (("key"), ((("k")), 100000000, 0, -3518), (Tag1 (("data"), ((("v")), 100000000, 0, -3525), (Tag8 (([("Left", (0)); ("Right", (0))], (0, 100000000, 0, -3530), 1, 0, 0)), 100000000, 0, -3529), 0), 100000000, 0, -3528), 0), 100000000, 0, -3527), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Binary_searchable"), "Which_target_by_segment"), "t"), 0, (0)), 100000000, 0, -3526), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([((("k")), 100000000, 0, -3518); ((("v")), 100000000, 0, -3525)]), 100000000, 0, -3524)], (0)), 100000000, 0, -3523), 0), 100000000, 0, -3522), 0), 100000000, 0, -3521), 0), 100000000, 0, -3520)], (0)), 100000000, 0, -3517), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 260)), 0); (("binary_search_subrange", 3907), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator"), "t"), [((("k")), 100000000, 0, -3501); ((("cmp")), 100000000, 0, -3502); (Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3501); ((("v")), 100000000, 0, -3508)], (0)), 100000000, 0, -3516), (Tag1 (("compare"), (Tag1 (("key"), ((("k")), 100000000, 0, -3501), (Tag1 (("data"), ((("v")), 100000000, 0, -3508), (Tag1 (0, ((("bound")), 100000000, 0, -3510), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3515), 0), 100000000, 0, -3514), 0), 100000000, 0, -3513), 0), 100000000, 0, -3512), (Tag1 (("lower_bound"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Maybe_bound"), "t"), [((("bound")), 100000000, 0, -3510)], (0)), 100000000, 0, -3511), (Tag1 (("upper_bound"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Maybe_bound"), "t"), [((("bound")), 100000000, 0, -3510)], (0)), 100000000, 0, -3509), (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -3501); ((("v")), 100000000, 0, -3508)], (0)), 100000000, 0, -3507), 0), 100000000, 0, -3506), 0), 100000000, 0, -3505), 0), 100000000, 0, -3504), 0), 100000000, 0, -3503)], (0)), 100000000, 0, -3500), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 261)), 0); Tag3 (("Make_applicative_traversals", 3908), 0, (Tag2 (((("A", 3909)), (Tag1 (Tag1 ((Tag2 ("Base__")), "Applicative"), "Lazy_applicative"))), Tag1 ([(("mapi", 3910), ((Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4507); ((("v1")), 100000000, 0, -4512)], (0)), 100000000, 0, -4513), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -4507), (Tag1 (("data"), ((("v1")), 100000000, 0, -4512), (Tag3 (Tag1 ((("A", 3909)), "t"), [((("v2")), 100000000, 0, -4508)], (0)), 100000000, 0, -4511), 0), 100000000, 0, -4510), 0), 100000000, 0, -4509), (Tag3 (Tag1 ((("A", 3909)), "t"), [(Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4507); ((("v2")), 100000000, 0, -4508)], (0)), 100000000, 0, -4506)], (0)), 100000000, 0, -4505), 0), 100000000, 0, -4504), 0), 100000000, 0, -4503), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 263)), 0); (("filter_mapi", 3911), ((Tag1 (0, (Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4495); ((("v1")), 100000000, 0, -4501)], (0)), 100000000, 0, -4502), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -4495), (Tag1 (("data"), ((("v1")), 100000000, 0, -4501), (Tag3 (Tag1 ((("A", 3909)), "t"), [(Tag3 ((Tag3 ("option", 10)), [((("v2")), 100000000, 0, -4496)], (0)), 100000000, 0, -4500)], (0)), 100000000, 0, -4499), 0), 100000000, 0, -4498), 0), 100000000, 0, -4497), (Tag3 (Tag1 ((("A", 3909)), "t"), [(Tag3 ((("t", 3806)), [((("k")), 100000000, 0, -4495); ((("v2")), 100000000, 0, -4496)], (0)), 100000000, 0, -4494)], (0)), 100000000, 0, -4493), 0), 100000000, 0, -4492), 0), 100000000, 0, -4491), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), 0, Tag1 ("Base__Map_intf", 264)), 0)])), 0, (("src/map_intf.ml", 923, 28017, 28021), ("src/map_intf.ml", 929, 28293, 28371), 0), Tag1 ("Base__Map_intf", 265)), 0, 0)]), 0, (("src/map_intf.ml", 1973, 67276, 67278), ("src/map_intf.ml", 1978, 67513, 67582), 0), Tag1 ("Base__Map_intf", 531)), 0, 0); (("of_tree", 3535), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Comparator"), "Module"), "t"), [((("k")), 100000000, 0, -11); ((("cmp")), 100000000, 0, -13)], (0)), 100000000, 0, -15), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((("Using_comparator", 3533)), "Tree"), "t"), [((("k")), 100000000, 0, -11); ((("v")), 100000000, 0, -12); ((("cmp")), 100000000, 0, -13)], (0)), 100000000, 0, -14), (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -11); ((("v")), 100000000, 0, -12); ((("cmp")), 100000000, 0, -13)], (0)), 100000000, 0, -10), 0), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("src/map_intf.ml", 1981, 67646, 67648), ("src/map_intf.ml", 1984, 67744, 67767), 0), 0, Tag1 ("Base__Map_intf", 532)), 0); (("to_tree", 3536), ((Tag1 (0, (Tag3 ((("t", 3412)), [((("k")), 100000000, 0, -4); ((("v")), 100000000, 0, -5); ((("cmp")), 100000000, 0, -6)], (0)), 100000000, 0, -7), (Tag3 (Tag1 (Tag1 ((("Using_comparator", 3533)), "Tree"), "t"), [((("k")), 100000000, 0, -4); ((("v")), 100000000, 0, -5); ((("cmp")), 100000000, 0, -6)], (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/map_intf.ml", 1987, 67805, 67807), ("src/map_intf.ml", 1987, 67805, 67879), 0), 0, Tag1 ("Base__Map_intf", 533)), 0); Tag3 (("With_comparator", 3537), 1, (Tag3 (Tag1 ((Tag2 ("Base__Map_intf")), "With_comparator")), 0, (("src/map_intf.ml", 1994, 67992, 67994), ("src/map_intf.ml", 1994, 67992, 68034), 0), Tag1 ("Base__Map_intf", 534)), 0, 0); Tag3 (("With_first_class_module", 3538), 1, (Tag3 (Tag1 ((Tag2 ("Base__Map_intf")), "With_first_class_module")), 0, (("src/map_intf.ml", 1995, 68035, 68037), ("src/map_intf.ml", 1995, 68035, 68093), 0), Tag1 ("Base__Map_intf", 535)), 0, 0); Tag3 (("Without_comparator", 3539), 1, (Tag3 (Tag1 ((Tag2 ("Base__Map_intf")), "Without_comparator")), 0, (("src/map_intf.ml", 1996, 68094, 68096), ("src/map_intf.ml", 1996, 68094, 68142), 0), Tag1 ("Base__Map_intf", 536)), 0, 0); Tag4 (("For_deriving", 3540), (((Tag1 ((Tag2 ("Base__Map_intf")), "For_deriving"))), 0, (("src/map_intf.ml", 1998, 68144, 68146), ("src/map_intf.ml", 1998, 68144, 68185), 0), Tag1 ("Base__Map_intf", 537)), 0); Tag4 (("S_poly", 3541), (((Tag1 ((Tag2 ("Base__Map_intf")), "S_poly"))), 0, (("src/map_intf.ml", 1999, 68186, 68188), ("src/map_intf.ml", 1999, 68186, 68215), 0), Tag1 ("Base__Map_intf", 538)), 0); Tag4 (("Accessors_generic", 3542), (((Tag1 ((Tag2 ("Base__Map_intf")), "Accessors_generic"))), 0, (("src/map_intf.ml", 2000, 68216, 68218), ("src/map_intf.ml", 2000, 68216, 68267), 0), Tag1 ("Base__Map_intf", 539)), 0); Tag4 (("Creators_and_accessors_generic", 3543), (((Tag1 ((Tag2 ("Base__Map_intf")), "Creators_and_accessors_generic"))), 0, (("src/map_intf.ml", 2001, 68268, 68270), ("src/map_intf.ml", 2001, 68268, 68345), 0), Tag1 ("Base__Map_intf", 540)), 0); Tag4 (("Creators_generic", 3544), (((Tag1 ((Tag2 ("Base__Map_intf")), "Creators_generic"))), 0, (("src/map_intf.ml", 2002, 68346, 68348), ("src/map_intf.ml", 2002, 68346, 68395), 0), Tag1 ("Base__Map_intf", 541)), 0)], "Base__Map", [("Base__Map", (")\143\149A\189u\167\2155\178\149\r{\021\193+")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__StringLabels", ("\134F\024\226\216Is#\223\230\234\169Z\206Gc")); ("Stdlib__StdLabels", (".\193\n\229\139\017\212C-ZA\\kz-\128")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Printf", ("\215<\139]\021\142\224E\245m\198qc(W\229")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__MoreLabels", ("\248\232\248\254`<\230\241\161U\193U\1466J\238")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__ListLabels", ("*\194\012\191\020%\170\249m\002\180\178hk\205\220")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shadow_stdlib", ("\219zi\164\203\158e)\232\221\196\168\138x\142\018")); ("Sexplib0__Sexpable", ("\251${\207(\249/z\242\255\250^\141\156\210e")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv_error", ("kzv!\151~\198P\000\165\176d\007\251p\232")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Base_internalhash_types", ("0\148#2\226\223\018\135\173>!\020\237\017\255\149")); ("Base__With_return", ("S\142\136\128>E\001\1583\028\161\217I\183\1279")); ("Base__T", ("+t\159\169\027\152\205\235\003\237\133\177\024\n6'")); ("Base__Sys0", ("\206z\231\154s\\\136\2364\131\005\014\031\152m3")); ("Base__String0", ("\212\221L\220\245\255\162P\228\224\189\216\135H\149O")); ("Base__Source_code_position0", ("_\003P6\254\029\206\005\130\136\180\019\145\230\000M")); ("Base__Sexp", ("\154\187\171&\209=\153[\236\250!U\174`\190T")); ("Base__Sequence", ("{L\140\211\223\183\000\030\151\247FnY\196\210\201")); ("Base__Result", ("\204|\215\173FMa\2511<&\215T\194$\228")); ("Base__Printf", ("\000\196c,\214\127\226\174\220\190\253z!\242\028\250")); ("Base__Ppx_hash_lib", ("\199\141\178\193\006\209L\007^\020(\131\224sn8")); ("Base__Ppx_enumerate_lib", ("G\171\178\012Em\142\235@\152fg\020\140~(")); ("Base__Ppx_compare_lib", ("\243\186~\233\228\199Ah\181.\223\004e\231\129S")); ("Base__Poly0", ("\230;\143\234\255.H\132KOe7\155\\\023f")); ("Base__Or_error", ("\193\133)\bO\210\2517\168*\203\148\143\200\127\177")); ("Base__Monad_intf", ("\208\203\163\152\184O\130?\012:\168\247}\018\253\155")); ("Base__Monad", ("!\244\168\2352=\137Lm\219\129K\216\199\145\\")); ("Base__Maybe_bound", ("\211{0\211\222\218\143\007\232\138\213\212\228f\247C")); ("Base__Map_intf", ("\165\147vd?\227\030\182nf7\200\220)\180\015")); ("Base__Lazy", ("@`\165\196 \235)\136ANe:p\169$\185")); ("Base__Invariant_intf", ("\213\204\238\235\236[\198\145\028\2392\015\243\177S\249")); ("Base__Invariant", ("\135\153\136\\\129SD\228\202l\255\152\139\253\015\201")); ("Base__Int0", ("N\1310\012\227\254\000\255_\222!\018\016\003\1779")); ("Base__Info_intf", ("\184\209'\173\251\219\167X|v\188]\190o5X")); ("Base__Info", ("-\011\149\203\248\030\2301\1907\1630\189\128\209\170")); ("Base__Indexed_container_intf", ("\179\2213\145j\\\136\tl2\240\006\188j$r")); ("Base__Indexed_container", ("\196\246\213\141\196d\130\002\232\162\144y\149\236\145\218")); ("Base__Import0", ("\156\129U\197Y[\\\153\017Ho\203\173\204\220\020")); ("Base__Import", ("\014\187\247\141\187\181\142g\176:s_,\181\219\209")); ("Base__Hasher", ("\221\138\140\019\232Yk%\201\018\025\140\254\141\254\250")); ("Base__Hash_intf", ("h\004P\218\1531G\127\212\208A\024\140\164iq")); ("Base__Hash", ("\206Rc\194\234{s3\248\165\024\162\203{\206\206")); ("Base__Globalize", ("<\243w~.\180\196t\159\193\174[\227\139\215G")); ("Base__Formatter", ("\193\149\030\140\154\1505b\162a`%\243\185'%")); ("Base__Field", ("8In\234X\202\188G\186\208$\192\175\136\214v")); ("Base__Error", ("\199\218\231n\155/\159\156\146\247\148t\237\003\t\153")); ("Base__Either_intf", ("\198\253n\235\170\"\029\207\169\248\161\226`(6\182")); ("Base__Either0", ("!9-\011n\2077eZ\212\031c\227\029\206\t")); ("Base__Either", ("\011+\000L\150v\2387\\C\181\179\242\251sk")); ("Base__Container_intf", ("\170vo*\208\209\141\219\196\168\236l\016\246\012c")); ("Base__Container", ("\191|>_\153W\235M\180uKz\214w`q")); ("Base__Comparator", ("\002\135z7b\025&\207\t\188\239&U3R\167")); ("Base__Bool0", ("\177f\254p\023\143&\239\020\136\206\242~\018F\251")); ("Base__Binary_searchable_intf", ("/\213\237\209\200\192$w\158\234\169\148\012\221W\019")); ("Base__Binary_searchable", ("V\022B_\233\194\145K\248\233\025\175U\155i\197")); ("Base__Applicative_intf", ("J\176\203\159\235N(\235\027\232\198+\224\205*A")); ("Base__Applicative", ("\157\024\176\241a\165\204\133\003s3\214\007\131\244\n")); ("Base__", ("p\252\007\139\128\163W\025+\0225\001\246|P\158"))], [(0)])
module type Creators_generic = Base__Map_intf.Creators_generic

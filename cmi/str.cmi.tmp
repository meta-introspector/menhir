type regexp
val regexp : string -> regexp
val regexp_case_fold : string -> regexp
val quote : string -> string
val regexp_string : string -> regexp
val regexp_string_case_fold : string -> regexp
val string_match : regexp -> string -> int -> bool
val search_forward : regexp -> string -> int -> int
val search_backward : regexp -> string -> int -> int
val string_partial_match : regexp -> string -> int -> bool
val matched_string : string -> string
val match_beginning : unit -> int
val match_end : unit -> int
val matched_group : int -> string -> string
val group_beginning : int -> int
val group_end : int -> int
val global_replace : regexp -> string -> string -> string
val replace_first : regexp -> string -> string -> string
val global_substitute : regexp -> (string -> string) -> string -> string
val substitute_first : regexp -> (string -> string) -> string -> string
val replace_matched : string -> string -> string
val split : regexp -> string -> string list
val bounded_split : regexp -> string -> int -> string list
val split_delim : regexp -> string -> string list
val bounded_split_delim : regexp -> string -> int -> string list
type split_result = Text of string | Delim of string
val full_split : regexp -> string -> split_result list
val bounded_full_split : regexp -> string -> int -> split_result list
val string_before : string -> int -> string
val string_after : string -> int -> string
val first_chars : string -> int -> string
("DEBUG:rule", [Tag1 (("regexp", 303), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("str.mli", 26, 1315, 1315), ("str.mli", 26, 1315, 1326), 0), 0, 0, 0, Tag1 ("Str", 0)), 1, 0); (("regexp", 304), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -165), (Tag3 ((("regexp", 303)), 0, (0)), 100000000, 0, -164), 0), 100000000, 0, -163), 0, (("str.mli", 30, 1378, 1378), ("str.mli", 30, 1378, 1407), 0), 0, Tag1 ("Str", 1)), 0); (("regexp_case_fold", 305), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -162), (Tag3 ((("regexp", 303)), 0, (0)), 100000000, 0, -161), 0), 100000000, 0, -160), 0, (("str.mli", 78, 3674, 3674), ("str.mli", 78, 3674, 3713), 0), 0, Tag1 ("Str", 2)), 0); (("quote", 306), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -159), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -158), 0), 100000000, 0, -157), 0, (("str.mli", 83, 3882, 3882), ("str.mli", 83, 3882, 3910), 0), 0, Tag1 ("Str", 3)), 0); (("regexp_string", 307), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -156), (Tag3 ((("regexp", 303)), 0, (0)), 100000000, 0, -155), 0), 100000000, 0, -154), 0, (("str.mli", 87, 4003, 4003), ("str.mli", 87, 4003, 4039), 0), 0, Tag1 ("Str", 4)), 0); (("regexp_string_case_fold", 308), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -153), (Tag3 ((("regexp", 303)), 0, (0)), 100000000, 0, -152), 0), 100000000, 0, -151), 0, (("str.mli", 91, 4144, 4144), ("str.mli", 91, 4144, 4190), 0), 0, Tag1 ("Str", 5)), 0); (("string_match", 309), ((Tag1 (0, (Tag3 ((("regexp", 303)), 0, (0)), 100000000, 0, -150), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -149), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -148), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -147), 0), 100000000, 0, -146), 0), 100000000, 0, -145), 0), 100000000, 0, -144), 0, (("str.mli", 99, 4362, 4362), ("str.mli", 99, 4362, 4412), 0), 0, Tag1 ("Str", 6)), 0); (("search_forward", 310), ((Tag1 (0, (Tag3 ((("regexp", 303)), 0, (0)), 100000000, 0, -143), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -142), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -141), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -140), 0), 100000000, 0, -139), 0), 100000000, 0, -138), 0), 100000000, 0, -137), 0, (("str.mli", 104, 4613, 4613), ("str.mli", 104, 4613, 4664), 0), 0, Tag1 ("Str", 7)), 0); (("search_backward", 311), ((Tag1 (0, (Tag3 ((("regexp", 303)), 0, (0)), 100000000, 0, -136), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -135), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -134), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -133), 0), 100000000, 0, -132), 0), 100000000, 0, -131), 0), 100000000, 0, -130), 0, (("str.mli", 112, 4985, 4985), ("str.mli", 112, 4985, 5037), 0), 0, Tag1 ("Str", 8)), 0); (("string_partial_match", 312), ((Tag1 (0, (Tag3 ((("regexp", 303)), 0, (0)), 100000000, 0, -129), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -128), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -127), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -126), 0), 100000000, 0, -125), 0), 100000000, 0, -124), 0), 100000000, 0, -123), 0, (("str.mli", 120, 5385, 5385), ("str.mli", 120, 5385, 5443), 0), 0, Tag1 ("Str", 9)), 0); (("matched_string", 313), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -122), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -121), 0), 100000000, 0, -120), 0, (("str.mli", 125, 5622, 5622), ("str.mli", 125, 5622, 5659), 0), 0, Tag1 ("Str", 10)), 0); (("match_beginning", 314), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -119), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -118), 0), 100000000, 0, -117), 0, (("str.mli", 153, 6599, 6599), ("str.mli", 153, 6599, 6632), 0), 0, Tag1 ("Str", 11)), 0); (("match_end", 315), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -116), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -115), 0), 100000000, 0, -114), 0, (("str.mli", 158, 6839, 6839), ("str.mli", 158, 6839, 6866), 0), 0, Tag1 ("Str", 12)), 0); (("matched_group", 316), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -113), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -112), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -111), 0), 100000000, 0, -110), 0), 100000000, 0, -109), 0, (("str.mli", 164, 7093, 7093), ("str.mli", 164, 7093, 7136), 0), 0, Tag1 ("Str", 13)), 0); (("group_beginning", 317), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -108), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -107), 0), 100000000, 0, -106), 0, (("str.mli", 179, 7932, 7932), ("str.mli", 179, 7932, 7964), 0), 0, Tag1 ("Str", 14)), 0); (("group_end", 318), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -105), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -104), 0), 100000000, 0, -103), 0, (("str.mli", 189, 8413, 8413), ("str.mli", 189, 8413, 8439), 0), 0, Tag1 ("Str", 15)), 0); (("global_replace", 319), ((Tag1 (0, (Tag3 ((("regexp", 303)), 0, (0)), 100000000, 0, -102), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -101), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -100), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -99), 0), 100000000, 0, -98), 0), 100000000, 0, -97), 0), 100000000, 0, -96), 0, (("str.mli", 204, 8930, 8930), ("str.mli", 204, 8930, 8987), 0), 0, Tag1 ("Str", 16)), 0); (("replace_first", 320), ((Tag1 (0, (Tag3 ((("regexp", 303)), 0, (0)), 100000000, 0, -95), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -94), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -93), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -92), 0), 100000000, 0, -91), 0), 100000000, 0, -90), 0), 100000000, 0, -89), 0, (("str.mli", 212, 9398, 9398), ("str.mli", 212, 9398, 9454), 0), 0, Tag1 ("Str", 17)), 0); (("global_substitute", 321), ((Tag1 (0, (Tag3 ((("regexp", 303)), 0, (0)), 100000000, 0, -88), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -87), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -86), 0), 100000000, 0, -85), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -84), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -83), 0), 100000000, 0, -82), 0), 100000000, 0, -81), 0), 100000000, 0, -80), 0, (("str.mli", 216, 9579, 9579), ("str.mli", 216, 9579, 9651), 0), 0, Tag1 ("Str", 18)), 0); (("substitute_first", 322), ((Tag1 (0, (Tag3 ((("regexp", 303)), 0, (0)), 100000000, 0, -79), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -78), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -77), 0), 100000000, 0, -76), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -75), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -74), 0), 100000000, 0, -73), 0), 100000000, 0, -72), 0), 100000000, 0, -71), 0, (("str.mli", 223, 9962, 9962), ("str.mli", 223, 9962, 10033), 0), 0, Tag1 ("Str", 19)), 0); (("replace_matched", 323), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -70), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -69), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -68), 0), 100000000, 0, -67), 0), 100000000, 0, -66), 0, (("str.mli", 227, 10161, 10161), ("str.mli", 227, 10161, 10209), 0), 0, Tag1 ("Str", 20)), 0); (("split", 324), ((Tag1 (0, (Tag3 ((("regexp", 303)), 0, (0)), 100000000, 0, -65), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -64), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -63)], (0)), 100000000, 0, -62), 0), 100000000, 0, -61), 0), 100000000, 0, -60), 0, (("str.mli", 240, 10634, 10634), ("str.mli", 240, 10634, 10677), 0), 0, Tag1 ("Str", 21)), 0); (("bounded_split", 325), ((Tag1 (0, (Tag3 ((("regexp", 303)), 0, (0)), 100000000, 0, -59), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -58), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -57), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -56)], (0)), 100000000, 0, -55), 0), 100000000, 0, -54), 0), 100000000, 0, -53), 0), 100000000, 0, -52), 0, (("str.mli", 247, 10996, 10996), ("str.mli", 247, 10996, 11054), 0), 0, Tag1 ("Str", 22)), 0); (("split_delim", 326), ((Tag1 (0, (Tag3 ((("regexp", 303)), 0, (0)), 100000000, 0, -51), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -50), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -49)], (0)), 100000000, 0, -48), 0), 100000000, 0, -47), 0), 100000000, 0, -46), 0, (("str.mli", 251, 11170, 11170), ("str.mli", 251, 11170, 11219), 0), 0, Tag1 ("Str", 23)), 0); (("bounded_split_delim", 327), ((Tag1 (0, (Tag3 ((("regexp", 303)), 0, (0)), 100000000, 0, -45), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -44), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -43), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -42)], (0)), 100000000, 0, -41), 0), 100000000, 0, -40), 0), 100000000, 0, -39), 0), 100000000, 0, -38), 0, (("str.mli", 259, 11536, 11536), ("str.mli", 259, 11536, 11600), 0), 0, Tag1 ("Str", 24)), 0); Tag1 (("split_result", 328), (0, 0, Tag1 ([(("Text", 295), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -36)]), 0, (("str.mli", 265, 11804, 11808), ("str.mli", 265, 11804, 11822), 0), 0, Tag1 ("Str", 26)); (("Delim", 296), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -37)]), 0, (("str.mli", 266, 11823, 11825), ("str.mli", 266, 11823, 11842), 0), 0, Tag1 ("Str", 27))], 0), 1, 0, 0, 0, 0, 0, (("str.mli", 264, 11784, 11784), ("str.mli", 266, 11823, 11842), 0), 0, 0, 0, Tag1 ("Str", 25)), 1, 0); (("full_split", 329), ((Tag1 (0, (Tag3 ((("regexp", 303)), 0, (0)), 100000000, 0, -35), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -34), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("split_result", 328)), 0, (0)), 100000000, 0, -33)], (0)), 100000000, 0, -32), 0), 100000000, 0, -31), 0), 100000000, 0, -30), 0, (("str.mli", 268, 11844, 11844), ("str.mli", 268, 11844, 11898), 0), 0, Tag1 ("Str", 28)), 0); (("bounded_full_split", 330), ((Tag1 (0, (Tag3 ((("regexp", 303)), 0, (0)), 100000000, 0, -29), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -28), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -27), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("split_result", 328)), 0, (0)), 100000000, 0, -26)], (0)), 100000000, 0, -25), 0), 100000000, 0, -24), 0), 100000000, 0, -23), 0), 100000000, 0, -22), 0, (("str.mli", 276, 12210, 12210), ("str.mli", 276, 12210, 12279), 0), 0, Tag1 ("Str", 29)), 0); (("string_before", 331), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -21), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -20), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("str.mli", 286, 12533, 12533), ("str.mli", 286, 12533, 12576), 0), 0, Tag1 ("Str", 30)), 0); (("string_after", 332), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -16), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -15), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -14), 0), 100000000, 0, -13), 0), 100000000, 0, -12), 0, (("str.mli", 291, 12727, 12727), ("str.mli", 291, 12727, 12769), 0), 0, Tag1 ("Str", 31)), 0); (("first_chars", 333), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -11), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -10), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0), 100000000, 0, -7), 0, (("str.mli", 296, 12918, 12918), ("str.mli", 296, 12918, 12959), 0), 0, Tag1 ("Str", 32)), 0); (("last_chars", 334), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -5), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("str.mli", 300, 13081, 13081), ("str.mli", 300, 13081, 13121), 0), 0, Tag1 ("Str", 33)), 0)], "Str", [("Str", ("\189Mp\183\012\132#\180tY\167\137\021\011\014\t")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
val last_chars : string -> int -> string

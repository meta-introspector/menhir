type info = {
  source_file : string;
  module_name : string;
  output_prefix : string;
  env : Env.t;
  ppf_dump : Format.formatter;
  tool_name : string;
  native : bool;
}
val with_info :
  native:bool ->
  tool_name:string ->
  source_file:string ->
  output_prefix:string -> dump_ext:string -> (info -> 'a) -> 'a
val parse_intf : info -> Parsetree.signature
val typecheck_intf : info -> Parsetree.signature -> Typedtree.signature
val emit_signature :
  info -> Parsetree.signature -> Typedtree.signature -> unit
val interface : info -> unit
val parse_impl : info -> Parsetree.structure
val typecheck_impl : info -> Parsetree.structure -> Typedtree.implementation
val implementation :
  info -> backend:(info -> Typedtree.implementation -> unit) -> unit
val cmo : info -> string
val cmx : info -> string
val obj : info -> string("DEBUG:rule", [Tag1 (("info", 941), (0, 0, [[(("source_file", 270), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -63), (("driver/compile_common.mli", 20, 1108, 1110), ("driver/compile_common.mli", 20, 1108, 1131), 0), 0, Tag1 ("Compile_common", 1)); (("module_name", 271), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -64), (("driver/compile_common.mli", 21, 1132, 1134), ("driver/compile_common.mli", 21, 1132, 1155), 0), 0, Tag1 ("Compile_common", 2)); (("output_prefix", 272), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -65), (("driver/compile_common.mli", 22, 1156, 1158), ("driver/compile_common.mli", 22, 1156, 1181), 0), 0, Tag1 ("Compile_common", 3)); (("env", 441), 0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -66), (("driver/compile_common.mli", 23, 1182, 1184), ("driver/compile_common.mli", 23, 1182, 1196), 0), 0, Tag1 ("Compile_common", 4)); (("ppf_dump", 598), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -67), (("driver/compile_common.mli", 24, 1197, 1199), ("driver/compile_common.mli", 24, 1197, 1227), 0), 0, Tag1 ("Compile_common", 5)); (("tool_name", 599), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -68), (("driver/compile_common.mli", 25, 1228, 1230), ("driver/compile_common.mli", 25, 1228, 1249), 0), 0, Tag1 ("Compile_common", 6)); (("native", 600), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -69), (("driver/compile_common.mli", 26, 1250, 1252), ("driver/compile_common.mli", 26, 1250, 1266), 0), 0, Tag1 ("Compile_common", 7))]], 1, 0, 0, 0, 0, 0, (("driver/compile_common.mli", 19, 1094, 1094), ("driver/compile_common.mli", 27, 1267, 1268), 0), 0, 0, 0, Tag1 ("Compile_common", 0)), 1, 0); (("with_info", 942), ((Tag1 (("native"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -62), (Tag1 (("tool_name"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -61), (Tag1 (("source_file"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -60), (Tag1 (("output_prefix"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -59), (Tag1 (("dump_ext"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -58), (Tag1 (0, (Tag1 (0, (Tag3 ((("info", 941)), 0, (0)), 100000000, 0, -57), ((("a")), 100000000, 0, -55), 0), 100000000, 0, -56), ((("a")), 100000000, 0, -55), 0), 100000000, 0, -54), 0), 100000000, 0, -53), 0), 100000000, 0, -52), 0), 100000000, 0, -51), 0), 100000000, 0, -50), 0), 100000000, 0, -49), 0, (("driver/compile_common.mli", 30, 1315, 1315), ("driver/compile_common.mli", 36, 1441, 1461), 0), 0, Tag1 ("Compile_common", 8)), 0); (("parse_intf", 943), ((Tag1 (0, (Tag3 ((("info", 941)), 0, (0)), 100000000, 0, -48), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "signature"), 0, (0)), 100000000, 0, -47), 0), 100000000, 0, -46), 0, (("driver/compile_common.mli", 50, 1977, 1977), ("driver/compile_common.mli", 50, 1977, 2021), 0), 0, Tag1 ("Compile_common", 11)), 0); (("typecheck_intf", 944), ((Tag1 (0, (Tag3 ((("info", 941)), 0, (0)), 100000000, 0, -45), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "signature"), 0, (0)), 100000000, 0, -44), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "signature"), 0, (0)), 100000000, 0, -43), 0), 100000000, 0, -42), 0), 100000000, 0, -41), 0, (("driver/compile_common.mli", 53, 2094, 2094), ("driver/compile_common.mli", 53, 2094, 2165), 0), 0, Tag1 ("Compile_common", 15)), 0); (("emit_signature", 945), ((Tag1 (0, (Tag3 ((("info", 941)), 0, (0)), 100000000, 0, -40), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "signature"), 0, (0)), 100000000, 0, -39), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "signature"), 0, (0)), 100000000, 0, -38), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -37), 0), 100000000, 0, -36), 0), 100000000, 0, -35), 0), 100000000, 0, -34), 0, (("driver/compile_common.mli", 58, 2289, 2289), ("driver/compile_common.mli", 58, 2289, 2368), 0), 0, Tag1 ("Compile_common", 16)), 0); (("interface", 946), ((Tag1 (0, (Tag3 ((("info", 941)), 0, (0)), 100000000, 0, -33), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -32), 0), 100000000, 0, -31), 0, (("driver/compile_common.mli", 63, 2477, 2477), ("driver/compile_common.mli", 63, 2477, 2505), 0), 0, Tag1 ("Compile_common", 17)), 0); (("parse_impl", 947), ((Tag1 (0, (Tag3 ((("info", 941)), 0, (0)), 100000000, 0, -30), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "structure"), 0, (0)), 100000000, 0, -29), 0), 100000000, 0, -28), 0, (("driver/compile_common.mli", 68, 2592, 2592), ("driver/compile_common.mli", 68, 2592, 2636), 0), 0, Tag1 ("Compile_common", 18)), 0); (("typecheck_impl", 948), ((Tag1 (0, (Tag3 ((("info", 941)), 0, (0)), 100000000, 0, -27), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "structure"), 0, (0)), 100000000, 0, -26), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "implementation"), 0, (0)), 100000000, 0, -25), 0), 100000000, 0, -24), 0), 100000000, 0, -23), 0, (("driver/compile_common.mli", 71, 2713, 2713), ("driver/compile_common.mli", 71, 2713, 2789), 0), 0, Tag1 ("Compile_common", 19)), 0); (("implementation", 949), ((Tag1 (0, (Tag3 ((("info", 941)), 0, (0)), 100000000, 0, -22), (Tag1 (("backend"), (Tag1 (0, (Tag3 ((("info", 941)), 0, (0)), 100000000, 0, -21), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "implementation"), 0, (0)), 100000000, 0, -20), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -16), 0), 100000000, 0, -15), 0), 100000000, 0, -14), 0, (("driver/compile_common.mli", 77, 2987, 2987), ("driver/compile_common.mli", 78, 3008, 3076), 0), 0, Tag1 ("Compile_common", 20)), 0); (("cmo", 950), ((Tag1 (0, (Tag3 ((("info", 941)), 0, (0)), 100000000, 0, -13), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("driver/compile_common.mli", 83, 3168, 3168), ("driver/compile_common.mli", 83, 3168, 3192), 0), 0, Tag1 ("Compile_common", 21)), 0); (("cmx", 951), ((Tag1 (0, (Tag3 ((("info", 941)), 0, (0)), 100000000, 0, -10), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("driver/compile_common.mli", 84, 3193, 3193), ("driver/compile_common.mli", 84, 3193, 3217), 0), 0, Tag1 ("Compile_common", 22)), 0); (("obj", 952), ((Tag1 (0, (Tag3 ((("info", 941)), 0, (0)), 100000000, 0, -7), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("driver/compile_common.mli", 85, 3218, 3218), ("driver/compile_common.mli", 85, 3218, 3242), 0), 0, Tag1 ("Compile_common", 23)), 0); (("annot", 953), ((Tag1 (0, (Tag3 ((("info", 941)), 0, (0)), 100000000, 0, -4), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("driver/compile_common.mli", 86, 3243, 3243), ("driver/compile_common.mli", 86, 3243, 3269), 0), 0, Tag1 ("Compile_common", 24)), 0)], "Compile_common", [("Compile_common", ("qXm\173\243\194\248\214\\rR\016\004\016\216\147")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Types", ("\177\238\029.\220\006\163!\230\015\006\182\133\155\194\166")); ("Typedtree", ("c5z\186\175w\146\254\018V\184\031\0038\004\227")); ("Type_immediacy", ("\"\127k\011Q\241\211\138\193;8\142\129\141#\251")); ("Subst", ("\021\031\148\223\127\186\189\135\027}\145r\216\143\177\156")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shape", ("\235\127Y\213\025\137=\244\218\181\248N\189\188\216p")); ("Primitive", ("}Shh\162\015|\220A\203\249\232\245G\213\019")); ("Path", ("\012\183\178\025\1298\228*\021r\185\160Y\252\n\026")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Outcometree", ("9\021%\234\211\206\210\004H\165\208\2014\234Q\142")); ("Misc", ("*\026\026\234c\191\131\161\\\203\183\012O\252\153\198")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Load_path", ("\012@\228l\230\164S\172h\1726X\020\252o}")); ("Identifiable", ("\004F\207\014\158GU\001\184\214\187%/#;\211")); ("Ident", ("\b9;!\187.\220\163(x\b\174\\\223\020\004")); ("Env", ("\021\n\181\142x\b\169j\227\"\017\248*\178\245\223")); ("Cmi_format", ("6\177\bU\139\"\023\152=\249\135\174\b\011Cg")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Build_path_prefix_map", ("y\028\167\207D\220\198\216\011\208\172\149\2416\bc")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216"))], [(0)])

val annot : info -> string

module Mc = Micromega_plugin.Micromega
val max_nb_cstr : int ref
type var = int
module Monomial :
  sig
    type t
    val degree : t -> int
    val subset : t -> t -> bool
    val fold : (var -> int -> 'a -> 'a) -> t -> 'a -> 'a
    val output : out_channel -> t -> unit
  end
module MonMap :
  sig
    type key = Monomial.t
    type +!'a t
    val empty : 'a t
    val add : key -> 'a -> 'a t -> 'a t
    val add_to_list : key -> 'a -> 'a list t -> 'a list t
    val update : key -> ('a option -> 'a option) -> 'a t -> 'a t
    val singleton : key -> 'a -> 'a t
    val remove : key -> 'a t -> 'a t
    val merge :
      (key -> 'a option -> 'b option -> 'c option) -> 'a t -> 'b t -> 'c t
    val cardinal : 'a t -> int
    val bindings : 'a t -> (key * 'a) list
    val min_binding : 'a t -> key * 'a
    val min_binding_opt : 'a t -> (key * 'a) option
    val max_binding : 'a t -> key * 'a
    val max_binding_opt : 'a t -> (key * 'a) option
    val choose : 'a t -> key * 'a
    val choose_opt : 'a t -> (key * 'a) option
    val find : key -> 'a t -> 'a
    val find_opt : key -> 'a t -> 'a option
    val find_first : (key -> bool) -> 'a t -> key * 'a
    val find_first_opt : (key -> bool) -> 'a t -> (key * 'a) option
    val find_last : (key -> bool) -> 'a t -> key * 'a
    val find_last_opt : (key -> bool) -> 'a t -> (key * 'a) option
    val iter : (key -> 'a -> unit) -> 'a t -> unit
    val fold : (key -> 'a -> 'acc -> 'acc) -> 'a t -> 'acc -> 'acc
    val map : ('a -> 'b) -> 'a t -> 'b t
    val mapi : (key -> 'a -> 'b) -> 'a t -> 'b t
    val filter : (key -> 'a -> bool) -> 'a t -> 'a t
    val filter_map : (key -> 'a -> 'b option) -> 'a t -> 'b t
    val partition : (key -> 'a -> bool) -> 'a t -> 'a t * 'a t
    val split : key -> 'a t -> 'a t * 'a option * 'a t
    val is_empty : 'a t -> bool
    val mem : key -> 'a t -> bool
    val equal : ('a -> 'a -> bool) -> 'a t -> 'a t -> bool
    val compare : ('a -> 'a -> int) -> 'a t -> 'a t -> int
    val for_all : (key -> 'a -> bool) -> 'a t -> bool
    val exists : (key -> 'a -> bool) -> 'a t -> bool
    val to_list : 'a t -> (key * 'a) list
    val of_list : (key * 'a) list -> 'a t
    val to_seq : 'a t -> (key * 'a) Seq.t
    val to_rev_seq : 'a t -> (key * 'a) Seq.t
    val to_seq_from : key -> 'a t -> (key * 'a) Seq.t
    val add_seq : (key * 'a) Seq.t -> 'a t -> 'a t
    val of_seq : (key * 'a) Seq.t -> 'a t
    val union : (Monomial.t -> 'a -> 'a -> 'a option) -> 'a t -> 'a t -> 'a t
  end
module Poly :
  sig
    type t
    val constant : Micromega_plugin.NumCompat.Q.t -> t
    val variable : var -> t
    val addition : t -> t -> t
    val product : t -> t -> t
    val uminus : t -> t
    val get : Monomial.t -> t -> Micromega_plugin.NumCompat.Q.t
    val fold :
      (Monomial.t -> Micromega_plugin.NumCompat.Q.t -> 'a -> 'a) ->
      t -> 'a -> 'a
    val add : Monomial.t -> Micromega_plugin.NumCompat.Q.t -> t -> t
  end
type cstr = {
  coeffs : Micromega_plugin.Vect.t;
  op : op;
  cst : Micromega_plugin.NumCompat.Q.t;
}
and op = Eq | Ge | Gt
val eval_op :
  op ->
  Micromega_plugin.NumCompat.Q.t -> Micromega_plugin.NumCompat.Q.t -> bool
val compare_op : op -> op -> int
val opAdd : op -> op -> op
val is_strict : cstr -> bool
exception Strict
module LinPoly :
  sig
    type t = Micromega_plugin.Vect.t
    module MonT :
      sig
        val clear : unit -> unit
        val reserve : int -> unit
        val safe_reserve : int -> unit
        val get_fresh : unit -> int
        val retrieve : int -> Monomial.t
        val register : Monomial.t -> int
      end
    val linpol_of_pol : Poly.t -> t
    val var : var -> t
    val coq_poly_of_linpol :
      (Micromega_plugin.NumCompat.Q.t -> 'a) -> t -> 'a Mc.pExpr
    val of_monomial : Monomial.t -> t
    val of_vect : Micromega_plugin.Vect.t -> t
    val variables : t -> Micromega_plugin.Mutils.ISet.t
    val is_variable : t -> var option
    val is_linear : t -> bool
    val is_linear_for : var -> t -> bool
    val constant : Micromega_plugin.NumCompat.Q.t -> t
    val search_linear :
      (Micromega_plugin.NumCompat.Q.t -> bool) -> t -> var option
    val search_all_linear :
      (Micromega_plugin.NumCompat.Q.t -> bool) -> t -> var list
    val product : t -> t -> t
    val factorise : var -> t -> t * t
    val collect_square : t -> Monomial.t MonMap.t
    val monomials : t -> Micromega_plugin.Mutils.ISet.t
    val degree : t -> int
    val pp_var : out_channel -> var -> unit
    val pp : out_channel -> t -> unit
    val pp_goal : string -> out_channel -> (t * op) list -> unit
  end
module ProofFormat :
  sig
    type prf_rule =
        Annot of string * prf_rule
      | Hyp of int
      | Def of int
      | Ref of int
      | Cst of Micromega_plugin.NumCompat.Q.t
      | Zero
      | Square of Micromega_plugin.Vect.t
      | MulC of Micromega_plugin.Vect.t * prf_rule
      | Gcd of Micromega_plugin.NumCompat.Z.t * prf_rule
      | MulPrf of prf_rule * prf_rule
      | AddPrf of prf_rule * prf_rule
      | CutPrf of prf_rule
      | LetPrf of prf_rule * prf_rule
    type proof =
        Done
      | Step of int * prf_rule * proof
      | Split of int * Micromega_plugin.Vect.t * proof * proof
      | Enum of int * prf_rule * Micromega_plugin.Vect.t * prf_rule *
          proof list
      | ExProof of int * int * int * var * var * var * proof
    val pr_size : prf_rule -> Micromega_plugin.NumCompat.Q.t
    val pr_rule_max_def : prf_rule -> int
    val pr_rule_max_hyp : prf_rule -> int
    val proof_max_def : proof -> int
    val normalise_proof : int -> proof -> int * proof
    val output_prf_rule : out_channel -> prf_rule -> unit
    val output_proof : out_channel -> proof -> unit
    val add_proof : prf_rule -> prf_rule -> prf_rule
    val mul_cst_proof :
      Micromega_plugin.NumCompat.Q.t -> prf_rule -> prf_rule
    val mul_proof : prf_rule -> prf_rule -> prf_rule
    val compile_proof :
      int list -> proof -> Micromega_plugin.Micromega.zArithProof
    module Env :
      sig type t val of_list : int list -> t val of_listi : 'a list -> t end
    val cmpl_prf_rule :
      ('a Micromega_plugin.Micromega.pExpr ->
       'a Micromega_plugin.Micromega.pol) ->
      (Micromega_plugin.NumCompat.Q.t -> 'a) ->
      Env.t -> prf_rule -> 'a Micromega_plugin.Micromega.psatz
    val proof_of_farkas :
      prf_rule Micromega_plugin.Mutils.IMap.t ->
      Micromega_plugin.Vect.t -> prf_rule
    val eval_prf_rule : (int -> LinPoly.t * op) -> prf_rule -> LinPoly.t * op
    val eval_proof :
      (LinPoly.t * op) Micromega_plugin.Mutils.IMap.t -> proof -> bool
    val simplify_proof : proof -> proof * Micromega_plugin.Mutils.ISet.t
    module PrfRuleMap :
      sig
        type key = prf_rule
        type +!'a t
        val empty : 'a t
        val add : key -> 'a -> 'a t -> 'a t
        val add_to_list : key -> 'a -> 'a list t -> 'a list t
        val update : key -> ('a option -> 'a option) -> 'a t -> 'a t
        val singleton : key -> 'a -> 'a t
        val remove : key -> 'a t -> 'a t
        val merge :
          (key -> 'a option -> 'b option -> 'c option) ->
          'a t -> 'b t -> 'c t
        val union : (key -> 'a -> 'a -> 'a option) -> 'a t -> 'a t -> 'a t
        val cardinal : 'a t -> int
        val bindings : 'a t -> (key * 'a) list
        val min_binding : 'a t -> key * 'a
        val min_binding_opt : 'a t -> (key * 'a) option
        val max_binding : 'a t -> key * 'a
        val max_binding_opt : 'a t -> (key * 'a) option
        val choose : 'a t -> key * 'a
        val choose_opt : 'a t -> (key * 'a) option
        val find : key -> 'a t -> 'a
        val find_opt : key -> 'a t -> 'a option
        val find_first : (key -> bool) -> 'a t -> key * 'a
        val find_first_opt : (key -> bool) -> 'a t -> (key * 'a) option
        val find_last : (key -> bool) -> 'a t -> key * 'a
        val find_last_opt : (key -> bool) -> 'a t -> (key * 'a) option
        val iter : (key -> 'a -> unit) -> 'a t -> unit
        val fold : (key -> 'a -> 'acc -> 'acc) -> 'a t -> 'acc -> 'acc
        val map : ('a -> 'b) -> 'a t -> 'b t
        val mapi : (key -> 'a -> 'b) -> 'a t -> 'b t
        val filter : (key -> 'a -> bool) -> 'a t -> 'a t
        val filter_map : (key -> 'a -> 'b option) -> 'a t -> 'b t
        val partition : (key -> 'a -> bool) -> 'a t -> 'a t * 'a t
        val split : key -> 'a t -> 'a t * 'a option * 'a t
        val is_empty : 'a t -> bool
        val mem : key -> 'a t -> bool
        val equal : ('a -> 'a -> bool) -> 'a t -> 'a t -> bool
        val compare : ('a -> 'a -> int) -> 'a t -> 'a t -> int
        val for_all : (key -> 'a -> bool) -> 'a t -> bool
        val exists : (key -> 'a -> bool) -> 'a t -> bool
        val to_list : 'a t -> (key * 'a) list
        val of_list : (key * 'a) list -> 'a t
        val to_seq : 'a t -> (key * 'a) Seq.t
        val to_rev_seq : 'a t -> (key * 'a) Seq.t
        val to_seq_from : key -> 'a t -> (key * 'a) Seq.t
        val add_seq : (key * 'a) Seq.t -> 'a t -> 'a t
        val of_seq : (key * 'a) Seq.t -> 'a t
      end
  end
val output_cstr : out_channel -> cstr -> unit
val opMult : op -> op -> op
module WithProof :
  sig
    type t = (LinPoly.t * op) * ProofFormat.prf_rule
    exception InvalidProof
    val compare : t -> t -> int
    val annot : string -> t -> t
    val of_cstr : cstr * ProofFormat.prf_rule -> t
    val output : out_channel -> t -> unit
    val output_sys : out_channel -> t list -> unit
    val zero : t
    val const : Micromega_plugin.NumCompat.Q.t -> t
    val product : t -> t -> t
    val addition : t -> t -> t
    val neg : t -> t
    val mult : LinPoly.t -> t -> t
    val cutting_plane : t -> t option
    val linear_pivot :
      t list -> t -> Micromega_plugin.Vect.var -> t -> t option
    val simple_pivot :
      Micromega_plugin.NumCompat.Q.t * var -> t -> t -> t option
    val sort :
      t list -> ((int * (Micromega_plugin.NumCompat.Q.t * var)) * t) list
    val subst : t list -> t list
    val subst_constant : bool -> t list -> t list
    val subst1 : t list -> t list
    val saturate_subst : bool -> t list -> t list
    val is_substitution : bool -> t -> var option
  end
module BoundWithProof :
  sig
    type t
    val compare : t -> t -> int
    val make : WithProof.t -> t option
    val mul_bound : t -> t -> t option
    val bound : t -> Micromega_plugin.Vect.Bound.t
    val proof : t -> WithProof.t("DEBUG:rule", [Tag3 (("Mc", 1605), 1, (Tag3 (Tag1 ((Tag2 ("Micromega_plugin")), "Micromega")), 0, (("plugins/micromega/polynomial.mli", 13, 703, 703), ("plugins/micromega/polynomial.mli", 13, 703, 724), 0), Tag1 ("Micromega_plugin__Polynomial", 0)), 0, 0); (("max_nb_cstr", 1606), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -37)], (0)), 100000000, 0, -36), 0, (("plugins/micromega/polynomial.mli", 15, 726, 726), ("plugins/micromega/polynomial.mli", 15, 726, 751), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 1)), 0); Tag1 (("var", 1607), (0, 0, 0, 1, ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -35)), 0, 0, 0, 0, (("plugins/micromega/polynomial.mli", 17, 753, 753), ("plugins/micromega/polynomial.mli", 17, 753, 767), 0), 0, 1, 0, Tag1 ("Micromega_plugin__Polynomial", 2)), 1, 0); Tag3 (("Monomial", 1608), 0, (Tag1 ([Tag1 (("t", 1624), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("plugins/micromega/polynomial.mli", 21, 854, 856), ("plugins/micromega/polynomial.mli", 21, 854, 862), 0), 0, 0, 0, Tag1 ("Micromega_plugin__Polynomial", 3)), 1, 0); (("degree", 1625), ((Tag1 (0, (Tag3 ((("t", 1624)), 0, (0)), 100000000, 0, -60), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -59), 0), 100000000, 0, -58), 0, (("plugins/micromega/polynomial.mli", 24, 927, 929), ("plugins/micromega/polynomial.mli", 24, 927, 950), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 4)), 0); (("subset", 1626), ((Tag1 (0, (Tag3 ((("t", 1624)), 0, (0)), 100000000, 0, -57), (Tag1 (0, (Tag3 ((("t", 1624)), 0, (0)), 100000000, 0, -56), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -55), 0), 100000000, 0, -54), 0), 100000000, 0, -53), 0, (("plugins/micromega/polynomial.mli", 27, 1024, 1026), ("plugins/micromega/polynomial.mli", 27, 1024, 1053), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 5)), 0); (("fold", 1627), ((Tag1 (0, (Tag1 (0, (Tag3 ((("var", 1607)), 0, (0)), 100000000, 0, -52), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -51), (Tag1 (0, ((("a")), 100000000, 0, -46), ((("a")), 100000000, 0, -46), 0), 100000000, 0, -50), 0), 100000000, 0, -49), 0), 100000000, 0, -48), (Tag1 (0, (Tag3 ((("t", 1624)), 0, (0)), 100000000, 0, -47), (Tag1 (0, ((("a")), 100000000, 0, -46), ((("a")), 100000000, 0, -46), 0), 100000000, 0, -45), 0), 100000000, 0, -44), 0), 100000000, 0, -43), 0, (("plugins/micromega/polynomial.mli", 30, 1107, 1109), ("plugins/micromega/polynomial.mli", 30, 1107, 1161), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 6)), 0); (("output", 1628), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -42), (Tag1 (0, (Tag3 ((("t", 1624)), 0, (0)), 100000000, 0, -41), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -40), 0), 100000000, 0, -39), 0), 100000000, 0, -38), 0, (("plugins/micromega/polynomial.mli", 33, 1218, 1220), ("plugins/micromega/polynomial.mli", 33, 1218, 1257), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 7)), 0)]), 0, (("plugins/micromega/polynomial.mli", 19, 769, 769), ("plugins/micromega/polynomial.mli", 35, 1259, 1262), 0), Tag1 ("Micromega_plugin__Polynomial", 8)), 0, 0); Tag3 (("MonMap", 1609), 0, (Tag1 ([Tag1 (("key", 1629), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Monomial", 1608)), "t"), 0, (0)), 100000000, 0, -389)), 0, 0, 0, 0, (("plugins/micromega/polynomial.mli", 38, 1284, 1305), ("plugins/micromega/polynomial.mli", 38, 1284, 1326), 0), 0, 0, 0, Tag1 ("Micromega_plugin__Polynomial", 9)), 1, 0); Tag1 (("t", 1630), ([((("a")), 100000000, 0, -388)], 1, 0, 1, 0, [9], [2], 0, 0, (("map.mli", 73, 2902, 2906), ("map.mli", 73, 2902, 2917), 0), 0, 0, 0, Tag1 ("Stdlib__Map", 4)), 1, 0); (("empty", 1631), ((Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -387)], (0)), 100000000, 0, -386), 0, (("map.mli", 76, 2977, 2981), ("map.mli", 76, 2977, 2996), 0), 0, Tag1 ("Stdlib__Map", 5)), 0); (("add", 1632), ((Tag1 (0, (Tag3 ((("key", 1629)), 0, (0)), 100000000, 0, -385), (Tag1 (0, ((("a")), 100000000, 0, -383), (Tag1 (0, (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -383)], (0)), 100000000, 0, -384), (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -383)], (0)), 100000000, 0, -382), 0), 100000000, 0, -381), 0), 100000000, 0, -380), 0), 100000000, 0, -379), 0, (("map.mli", 79, 3024, 3028), ("map.mli", 79, 3024, 3062), 0), 0, Tag1 ("Stdlib__Map", 6)), 0); (("add_to_list", 1633), ((Tag1 (0, (Tag3 ((("key", 1629)), 0, (0)), 100000000, 0, -378), (Tag1 (0, ((("a")), 100000000, 0, -375), (Tag1 (0, (Tag3 ((("t", 1630)), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -375)], (0)), 100000000, 0, -377)], (0)), 100000000, 0, -376), (Tag3 ((("t", 1630)), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -375)], (0)), 100000000, 0, -374)], (0)), 100000000, 0, -373), 0), 100000000, 0, -372), 0), 100000000, 0, -371), 0), 100000000, 0, -370), 0, (("map.mli", 88, 3503, 3507), ("map.mli", 88, 3503, 3559), 0), 0, Tag1 ("Stdlib__Map", 7)), 0); (("update", 1634), ((Tag1 (0, (Tag3 ((("key", 1629)), 0, (0)), 100000000, 0, -369), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -364)], (0)), 100000000, 0, -368), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -364)], (0)), 100000000, 0, -367), 0), 100000000, 0, -366), (Tag1 (0, (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -364)], (0)), 100000000, 0, -365), (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -364)], (0)), 100000000, 0, -363), 0), 100000000, 0, -362), 0), 100000000, 0, -361), 0), 100000000, 0, -360), 0, (("map.mli", 94, 3753, 3757), ("map.mli", 94, 3753, 3816), 0), 0, Tag1 ("Stdlib__Map", 8)), 0); (("singleton", 1635), ((Tag1 (0, (Tag3 ((("key", 1629)), 0, (0)), 100000000, 0, -359), (Tag1 (0, ((("a")), 100000000, 0, -358), (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -358)], (0)), 100000000, 0, -357), 0), 100000000, 0, -356), 0), 100000000, 0, -355), 0, (("map.mli", 106, 4436, 4440), ("map.mli", 106, 4436, 4472), 0), 0, Tag1 ("Stdlib__Map", 9)), 0); (("remove", 1636), ((Tag1 (0, (Tag3 ((("key", 1629)), 0, (0)), 100000000, 0, -354), (Tag1 (0, (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -352)], (0)), 100000000, 0, -353), (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -352)], (0)), 100000000, 0, -351), 0), 100000000, 0, -350), 0), 100000000, 0, -349), 0, (("map.mli", 111, 4594, 4598), ("map.mli", 111, 4594, 4629), 0), 0, Tag1 ("Stdlib__Map", 10)), 0); (("merge", 1637), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1629)), 0, (0)), 100000000, 0, -348), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -341)], (0)), 100000000, 0, -347), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -339)], (0)), 100000000, 0, -346), (Tag3 ((Tag3 ("option", 10)), [((("c")), 100000000, 0, -337)], (0)), 100000000, 0, -345), 0), 100000000, 0, -344), 0), 100000000, 0, -343), 0), 100000000, 0, -342), (Tag1 (0, (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -341)], (0)), 100000000, 0, -340), (Tag1 (0, (Tag3 ((("t", 1630)), [((("b")), 100000000, 0, -339)], (0)), 100000000, 0, -338), (Tag3 ((("t", 1630)), [((("c")), 100000000, 0, -337)], (0)), 100000000, 0, -336), 0), 100000000, 0, -335), 0), 100000000, 0, -334), 0), 100000000, 0, -333), 0, (("map.mli", 118, 4950, 4954), ("map.mli", 120, 5019, 5045), 0), 0, Tag1 ("Stdlib__Map", 11)), 0); (("cardinal", 1638), ((Tag1 (0, (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -332)], (0)), 100000000, 0, -331), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -330), 0), 100000000, 0, -329), 0, (("map.mli", 142, 6061, 6065), ("map.mli", 142, 6061, 6090), 0), 0, Tag1 ("Stdlib__Map", 13)), 0); (("bindings", 1639), ((Tag1 (0, (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -327)], (0)), 100000000, 0, -328), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("key", 1629)), 0, (0)), 100000000, 0, -326); ((("a")), 100000000, 0, -327)]), 100000000, 0, -325)], (0)), 100000000, 0, -324), 0), 100000000, 0, -323), 0, (("map.mli", 148, 6197, 6201), ("map.mli", 148, 6197, 6238), 0), 0, Tag1 ("Stdlib__Map", 14)), 0); (("min_binding", 1640), ((Tag1 (0, (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -321)], (0)), 100000000, 0, -322), (Tag2 ([(Tag3 ((("key", 1629)), 0, (0)), 100000000, 0, -320); ((("a")), 100000000, 0, -321)]), 100000000, 0, -319), 0), 100000000, 0, -318), 0, (("map.mli", 155, 6495, 6499), ("map.mli", 155, 6495, 6534), 0), 0, Tag1 ("Stdlib__Map", 15)), 0); (("min_binding_opt", 1641), ((Tag1 (0, (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -316)], (0)), 100000000, 0, -317), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("key", 1629)), 0, (0)), 100000000, 0, -315); ((("a")), 100000000, 0, -316)]), 100000000, 0, -314)], (0)), 100000000, 0, -313), 0), 100000000, 0, -312), 0, (("map.mli", 161, 6727, 6731), ("map.mli", 161, 6727, 6777), 0), 0, Tag1 ("Stdlib__Map", 16)), 0); (("max_binding", 1642), ((Tag1 (0, (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -310)], (0)), 100000000, 0, -311), (Tag2 ([(Tag3 ((("key", 1629)), 0, (0)), 100000000, 0, -309); ((("a")), 100000000, 0, -310)]), 100000000, 0, -308), 0), 100000000, 0, -307), 0, (("map.mli", 167, 6961, 6965), ("map.mli", 167, 6961, 7000), 0), 0, Tag1 ("Stdlib__Map", 17)), 0); (("max_binding_opt", 1643), ((Tag1 (0, (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -305)], (0)), 100000000, 0, -306), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("key", 1629)), 0, (0)), 100000000, 0, -304); ((("a")), 100000000, 0, -305)]), 100000000, 0, -303)], (0)), 100000000, 0, -302), 0), 100000000, 0, -301), 0, (("map.mli", 172, 7128, 7132), ("map.mli", 172, 7128, 7178), 0), 0, Tag1 ("Stdlib__Map", 18)), 0); (("choose", 1644), ((Tag1 (0, (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -299)], (0)), 100000000, 0, -300), (Tag2 ([(Tag3 ((("key", 1629)), 0, (0)), 100000000, 0, -298); ((("a")), 100000000, 0, -299)]), 100000000, 0, -297), 0), 100000000, 0, -296), 0, (("map.mli", 177, 7310, 7314), ("map.mli", 177, 7310, 7344), 0), 0, Tag1 ("Stdlib__Map", 19)), 0); (("choose_opt", 1645), ((Tag1 (0, (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -294)], (0)), 100000000, 0, -295), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("key", 1629)), 0, (0)), 100000000, 0, -293); ((("a")), 100000000, 0, -294)]), 100000000, 0, -292)], (0)), 100000000, 0, -291), 0), 100000000, 0, -290), 0, (("map.mli", 183, 7562, 7566), ("map.mli", 183, 7562, 7607), 0), 0, Tag1 ("Stdlib__Map", 20)), 0); (("find", 1646), ((Tag1 (0, (Tag3 ((("key", 1629)), 0, (0)), 100000000, 0, -289), (Tag1 (0, (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -287)], (0)), 100000000, 0, -288), ((("a")), 100000000, 0, -287), 0), 100000000, 0, -286), 0), 100000000, 0, -285), 0, (("map.mli", 191, 7850, 7854), ("map.mli", 191, 7850, 7881), 0), 0, Tag1 ("Stdlib__Map", 21)), 0); (("find_opt", 1647), ((Tag1 (0, (Tag3 ((("key", 1629)), 0, (0)), 100000000, 0, -284), (Tag1 (0, (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -282)], (0)), 100000000, 0, -283), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -282)], (0)), 100000000, 0, -281), 0), 100000000, 0, -280), 0), 100000000, 0, -279), 0, (("map.mli", 195, 8006, 8010), ("map.mli", 195, 8006, 8048), 0), 0, Tag1 ("Stdlib__Map", 22)), 0); (("find_first", 1648), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1629)), 0, (0)), 100000000, 0, -278), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -277), 0), 100000000, 0, -276), (Tag1 (0, (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -274)], (0)), 100000000, 0, -275), (Tag2 ([(Tag3 ((("key", 1629)), 0, (0)), 100000000, 0, -273); ((("a")), 100000000, 0, -274)]), 100000000, 0, -272), 0), 100000000, 0, -271), 0), 100000000, 0, -270), 0, (("map.mli", 200, 8204, 8208), ("map.mli", 200, 8204, 8257), 0), 0, Tag1 ("Stdlib__Map", 23)), 0); (("find_first_opt", 1649), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1629)), 0, (0)), 100000000, 0, -269), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -268), 0), 100000000, 0, -267), (Tag1 (0, (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -265)], (0)), 100000000, 0, -266), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("key", 1629)), 0, (0)), 100000000, 0, -264); ((("a")), 100000000, 0, -265)]), 100000000, 0, -263)], (0)), 100000000, 0, -262), 0), 100000000, 0, -261), 0), 100000000, 0, -260), 0, (("map.mli", 212, 8743, 8747), ("map.mli", 212, 8743, 8809), 0), 0, Tag1 ("Stdlib__Map", 24)), 0); (("find_last", 1650), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1629)), 0, (0)), 100000000, 0, -259), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -258), 0), 100000000, 0, -257), (Tag1 (0, (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -255)], (0)), 100000000, 0, -256), (Tag2 ([(Tag3 ((("key", 1629)), 0, (0)), 100000000, 0, -254); ((("a")), 100000000, 0, -255)]), 100000000, 0, -253), 0), 100000000, 0, -252), 0), 100000000, 0, -251), 0, (("map.mli", 218, 9052, 9056), ("map.mli", 218, 9052, 9104), 0), 0, Tag1 ("Stdlib__Map", 25)), 0); (("find_last_opt", 1651), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1629)), 0, (0)), 100000000, 0, -250), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -249), 0), 100000000, 0, -248), (Tag1 (0, (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -246)], (0)), 100000000, 0, -247), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("key", 1629)), 0, (0)), 100000000, 0, -245); ((("a")), 100000000, 0, -246)]), 100000000, 0, -244)], (0)), 100000000, 0, -243), 0), 100000000, 0, -242), 0), 100000000, 0, -241), 0, (("map.mli", 224, 9334, 9338), ("map.mli", 224, 9334, 9399), 0), 0, Tag1 ("Stdlib__Map", 26)), 0); (("iter", 1652), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1629)), 0, (0)), 100000000, 0, -240), (Tag1 (0, ((("a")), 100000000, 0, -236), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -239), 0), 100000000, 0, -238), 0), 100000000, 0, -237), (Tag1 (0, (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -236)], (0)), 100000000, 0, -235), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -234), 0), 100000000, 0, -233), 0), 100000000, 0, -232), 0, (("map.mli", 233, 9688, 9692), ("map.mli", 233, 9688, 9737), 0), 0, Tag1 ("Stdlib__Map", 27)), 0); (("fold", 1653), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1629)), 0, (0)), 100000000, 0, -231), (Tag1 (0, ((("a")), 100000000, 0, -227), (Tag1 (0, ((("acc")), 100000000, 0, -225), ((("acc")), 100000000, 0, -225), 0), 100000000, 0, -230), 0), 100000000, 0, -229), 0), 100000000, 0, -228), (Tag1 (0, (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -227)], (0)), 100000000, 0, -226), (Tag1 (0, ((("acc")), 100000000, 0, -225), ((("acc")), 100000000, 0, -225), 0), 100000000, 0, -224), 0), 100000000, 0, -223), 0), 100000000, 0, -222), 0, (("map.mli", 239, 10018, 10022), ("map.mli", 240, 10032, 10089), 0), 0, Tag1 ("Stdlib__Map", 28)), 0); (("map", 1654), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -220), ((("b")), 100000000, 0, -218), 0), 100000000, 0, -221), (Tag1 (0, (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -220)], (0)), 100000000, 0, -219), (Tag3 ((("t", 1630)), [((("b")), 100000000, 0, -218)], (0)), 100000000, 0, -217), 0), 100000000, 0, -216), 0), 100000000, 0, -215), 0, (("map.mli", 247, 10338, 10342), ("map.mli", 247, 10338, 10377), 0), 0, Tag1 ("Stdlib__Map", 29)), 0); (("mapi", 1655), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1629)), 0, (0)), 100000000, 0, -214), (Tag1 (0, ((("a")), 100000000, 0, -211), ((("b")), 100000000, 0, -209), 0), 100000000, 0, -213), 0), 100000000, 0, -212), (Tag1 (0, (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -211)], (0)), 100000000, 0, -210), (Tag3 ((("t", 1630)), [((("b")), 100000000, 0, -209)], (0)), 100000000, 0, -208), 0), 100000000, 0, -207), 0), 100000000, 0, -206), 0, (("map.mli", 254, 10698, 10702), ("map.mli", 254, 10698, 10745), 0), 0, Tag1 ("Stdlib__Map", 30)), 0); (("filter", 1656), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1629)), 0, (0)), 100000000, 0, -205), (Tag1 (0, ((("a")), 100000000, 0, -200), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -204), 0), 100000000, 0, -203), 0), 100000000, 0, -202), (Tag1 (0, (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -200)], (0)), 100000000, 0, -201), (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -200)], (0)), 100000000, 0, -199), 0), 100000000, 0, -198), 0), 100000000, 0, -197), 0, (("map.mli", 258, 10888, 10892), ("map.mli", 258, 10888, 10939), 0), 0, Tag1 ("Stdlib__Map", 31)), 0); (("filter_map", 1657), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1629)), 0, (0)), 100000000, 0, -196), (Tag1 (0, ((("a")), 100000000, 0, -192), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -190)], (0)), 100000000, 0, -195), 0), 100000000, 0, -194), 0), 100000000, 0, -193), (Tag1 (0, (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -192)], (0)), 100000000, 0, -191), (Tag3 ((("t", 1630)), [((("b")), 100000000, 0, -190)], (0)), 100000000, 0, -189), 0), 100000000, 0, -188), 0), 100000000, 0, -187), 0, (("map.mli", 266, 11264, 11268), ("map.mli", 266, 11264, 11324), 0), 0, Tag1 ("Stdlib__Map", 32)), 0); (("partition", 1658), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1629)), 0, (0)), 100000000, 0, -186), (Tag1 (0, ((("a")), 100000000, 0, -180), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -185), 0), 100000000, 0, -184), 0), 100000000, 0, -183), (Tag1 (0, (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -180)], (0)), 100000000, 0, -182), (Tag2 ([(Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -180)], (0)), 100000000, 0, -179); (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -180)], (0)), 100000000, 0, -181)]), 100000000, 0, -178), 0), 100000000, 0, -177), 0), 100000000, 0, -176), 0, (("map.mli", 285, 12005, 12009), ("map.mli", 285, 12005, 12066), 0), 0, Tag1 ("Stdlib__Map", 33)), 0); (("split", 1659), ((Tag1 (0, (Tag3 ((("key", 1629)), 0, (0)), 100000000, 0, -175), (Tag1 (0, (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -171)], (0)), 100000000, 0, -174), (Tag2 ([(Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -171)], (0)), 100000000, 0, -170); (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -171)], (0)), 100000000, 0, -172); (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -171)], (0)), 100000000, 0, -173)]), 100000000, 0, -169), 0), 100000000, 0, -168), 0), 100000000, 0, -167), 0, (("map.mli", 292, 12324, 12328), ("map.mli", 292, 12324, 12377), 0), 0, Tag1 ("Stdlib__Map", 34)), 0); (("is_empty", 1660), ((Tag1 (0, (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -166)], (0)), 100000000, 0, -165), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -164), 0), 100000000, 0, -163), 0, (("map.mli", 304, 12826, 12830), ("map.mli", 304, 12826, 12856), 0), 0, Tag1 ("Stdlib__Map", 35)), 0); (("mem", 1661), ((Tag1 (0, (Tag3 ((("key", 1629)), 0, (0)), 100000000, 0, -162), (Tag1 (0, (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -161)], (0)), 100000000, 0, -160), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -159), 0), 100000000, 0, -158), 0), 100000000, 0, -157), 0, (("map.mli", 307, 12905, 12909), ("map.mli", 307, 12905, 12937), 0), 0, Tag1 ("Stdlib__Map", 36)), 0); (("equal", 1662), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -152), (Tag1 (0, ((("a")), 100000000, 0, -152), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -156), 0), 100000000, 0, -155), 0), 100000000, 0, -154), (Tag1 (0, (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -152)], (0)), 100000000, 0, -153), (Tag1 (0, (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -152)], (0)), 100000000, 0, -151), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -150), 0), 100000000, 0, -149), 0), 100000000, 0, -148), 0), 100000000, 0, -147), 0, (("map.mli", 311, 13041, 13045), ("map.mli", 311, 13041, 13098), 0), 0, Tag1 ("Stdlib__Map", 37)), 0); (("compare", 1663), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -142), (Tag1 (0, ((("a")), 100000000, 0, -142), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -146), 0), 100000000, 0, -145), 0), 100000000, 0, -144), (Tag1 (0, (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -142)], (0)), 100000000, 0, -143), (Tag1 (0, (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -142)], (0)), 100000000, 0, -141), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -140), 0), 100000000, 0, -139), 0), 100000000, 0, -138), 0), 100000000, 0, -137), 0, (("map.mli", 317, 13349, 13353), ("map.mli", 317, 13349, 13406), 0), 0, Tag1 ("Stdlib__Map", 38)), 0); (("for_all", 1664), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1629)), 0, (0)), 100000000, 0, -136), (Tag1 (0, ((("a")), 100000000, 0, -132), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -135), 0), 100000000, 0, -134), 0), 100000000, 0, -133), (Tag1 (0, (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -132)], (0)), 100000000, 0, -131), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -130), 0), 100000000, 0, -129), 0), 100000000, 0, -128), 0, (("map.mli", 321, 13561, 13565), ("map.mli", 321, 13561, 13613), 0), 0, Tag1 ("Stdlib__Map", 39)), 0); (("exists", 1665), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1629)), 0, (0)), 100000000, 0, -127), (Tag1 (0, ((("a")), 100000000, 0, -123), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -126), 0), 100000000, 0, -125), 0), 100000000, 0, -124), (Tag1 (0, (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -123)], (0)), 100000000, 0, -122), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -121), 0), 100000000, 0, -120), 0), 100000000, 0, -119), 0, (("map.mli", 326, 13733, 13737), ("map.mli", 326, 13733, 13784), 0), 0, Tag1 ("Stdlib__Map", 40)), 0); (("to_list", 1666), ((Tag1 (0, (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -117)], (0)), 100000000, 0, -118), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("key", 1629)), 0, (0)), 100000000, 0, -116); ((("a")), 100000000, 0, -117)]), 100000000, 0, -115)], (0)), 100000000, 0, -114), 0), 100000000, 0, -113), 0, (("map.mli", 333, 13947, 13951), ("map.mli", 333, 13947, 13988), 0), 0, Tag1 ("Stdlib__Map", 41)), 0); (("of_list", 1667), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("key", 1629)), 0, (0)), 100000000, 0, -112); ((("a")), 100000000, 0, -109)]), 100000000, 0, -111)], (0)), 100000000, 0, -110), (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -109)], (0)), 100000000, 0, -108), 0), 100000000, 0, -107), 0, (("map.mli", 337, 14052, 14056), ("map.mli", 337, 14052, 14093), 0), 0, Tag1 ("Stdlib__Map", 42)), 0); (("to_seq", 1668), ((Tag1 (0, (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -105)], (0)), 100000000, 0, -106), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 1629)), 0, (0)), 100000000, 0, -104); ((("a")), 100000000, 0, -105)]), 100000000, 0, -103)], (0)), 100000000, 0, -102), 0), 100000000, 0, -101), 0, (("map.mli", 343, 14271, 14275), ("map.mli", 343, 14271, 14312), 0), 0, Tag1 ("Stdlib__Map", 43)), 0); (("to_rev_seq", 1669), ((Tag1 (0, (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -99)], (0)), 100000000, 0, -100), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 1629)), 0, (0)), 100000000, 0, -98); ((("a")), 100000000, 0, -99)]), 100000000, 0, -97)], (0)), 100000000, 0, -96), 0), 100000000, 0, -95), 0, (("map.mli", 347, 14398, 14402), ("map.mli", 347, 14398, 14443), 0), 0, Tag1 ("Stdlib__Map", 44)), 0); (("to_seq_from", 1670), ((Tag1 (0, (Tag3 ((("key", 1629)), 0, (0)), 100000000, 0, -94), (Tag1 (0, (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -92)], (0)), 100000000, 0, -93), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 1629)), 0, (0)), 100000000, 0, -91); ((("a")), 100000000, 0, -92)]), 100000000, 0, -90)], (0)), 100000000, 0, -89), 0), 100000000, 0, -88), 0), 100000000, 0, -87), 0, (("map.mli", 351, 14530, 14534), ("map.mli", 351, 14530, 14583), 0), 0, Tag1 ("Stdlib__Map", 45)), 0); (("add_seq", 1671), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 1629)), 0, (0)), 100000000, 0, -86); ((("a")), 100000000, 0, -82)]), 100000000, 0, -85)], (0)), 100000000, 0, -84), (Tag1 (0, (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -82)], (0)), 100000000, 0, -83), (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -82)], (0)), 100000000, 0, -81), 0), 100000000, 0, -80), 0), 100000000, 0, -79), 0, (("map.mli", 356, 14738, 14742), ("map.mli", 356, 14738, 14788), 0), 0, Tag1 ("Stdlib__Map", 46)), 0); (("of_seq", 1672), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 1629)), 0, (0)), 100000000, 0, -78); ((("a")), 100000000, 0, -75)]), 100000000, 0, -77)], (0)), 100000000, 0, -76), (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -75)], (0)), 100000000, 0, -74), 0), 100000000, 0, -73), 0, (("map.mli", 360, 14866, 14870), ("map.mli", 360, 14866, 14907), 0), 0, Tag1 ("Stdlib__Map", 47)), 0); (("union", 1673), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((("Monomial", 1608)), "t"), 0, (0)), 100000000, 0, -72), (Tag1 (0, ((("a")), 100000000, 0, -65), (Tag1 (0, ((("a")), 100000000, 0, -65), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -65)], (0)), 100000000, 0, -71), 0), 100000000, 0, -70), 0), 100000000, 0, -69), 0), 100000000, 0, -68), (Tag1 (0, (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -65)], (0)), 100000000, 0, -67), (Tag1 (0, (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -65)], (0)), 100000000, 0, -66), (Tag3 ((("t", 1630)), [((("a")), 100000000, 0, -65)], (0)), 100000000, 0, -64), 0), 100000000, 0, -63), 0), 100000000, 0, -62), 0), 100000000, 0, -61), 0, (("plugins/micromega/polynomial.mli", 40, 1328, 1330), ("plugins/micromega/polynomial.mli", 40, 1328, 1403), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 10)), 0)]), 0, (("plugins/micromega/polynomial.mli", 37, 1264, 1264), ("plugins/micromega/polynomial.mli", 41, 1404, 1407), 0), Tag1 ("Micromega_plugin__Polynomial", 11)), 0, 0); Tag3 (("Poly", 1610), 0, (Tag1 ([Tag1 (("t", 1674), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("plugins/micromega/polynomial.mli", 52, 1628, 1630), ("plugins/micromega/polynomial.mli", 52, 1628, 1636), 0), 0, 0, 0, Tag1 ("Micromega_plugin__Polynomial", 12)), 1, 0); (("constant", 1675), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -430), (Tag3 ((("t", 1674)), 0, (0)), 100000000, 0, -429), 0), 100000000, 0, -428), 0, (("plugins/micromega/polynomial.mli", 56, 1700, 1702), ("plugins/micromega/polynomial.mli", 56, 1700, 1725), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 13)), 0); (("variable", 1676), ((Tag1 (0, (Tag3 ((("var", 1607)), 0, (0)), 100000000, 0, -427), (Tag3 ((("t", 1674)), 0, (0)), 100000000, 0, -426), 0), 100000000, 0, -425), 0, (("plugins/micromega/polynomial.mli", 60, 1784, 1786), ("plugins/micromega/polynomial.mli", 60, 1784, 1809), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 14)), 0); (("addition", 1677), ((Tag1 (0, (Tag3 ((("t", 1674)), 0, (0)), 100000000, 0, -424), (Tag1 (0, (Tag3 ((("t", 1674)), 0, (0)), 100000000, 0, -423), (Tag3 ((("t", 1674)), 0, (0)), 100000000, 0, -422), 0), 100000000, 0, -421), 0), 100000000, 0, -420), 0, (("plugins/micromega/polynomial.mli", 64, 1872, 1874), ("plugins/micromega/polynomial.mli", 64, 1872, 1900), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 15)), 0); (("product", 1678), ((Tag1 (0, (Tag3 ((("t", 1674)), 0, (0)), 100000000, 0, -419), (Tag1 (0, (Tag3 ((("t", 1674)), 0, (0)), 100000000, 0, -418), (Tag3 ((("t", 1674)), 0, (0)), 100000000, 0, -417), 0), 100000000, 0, -416), 0), 100000000, 0, -415), 0, (("plugins/micromega/polynomial.mli", 68, 1962, 1964), ("plugins/micromega/polynomial.mli", 68, 1962, 1989), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 16)), 0); (("uminus", 1679), ((Tag1 (0, (Tag3 ((("t", 1674)), 0, (0)), 100000000, 0, -414), (Tag3 ((("t", 1674)), 0, (0)), 100000000, 0, -413), 0), 100000000, 0, -412), 0, (("plugins/micromega/polynomial.mli", 72, 2061, 2063), ("plugins/micromega/polynomial.mli", 72, 2061, 2082), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 17)), 0); (("get", 1680), ((Tag1 (0, (Tag3 (Tag1 ((("Monomial", 1608)), "t"), 0, (0)), 100000000, 0, -411), (Tag1 (0, (Tag3 ((("t", 1674)), 0, (0)), 100000000, 0, -410), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -409), 0), 100000000, 0, -408), 0), 100000000, 0, -407), 0, (("plugins/micromega/polynomial.mli", 76, 2158, 2160), ("plugins/micromega/polynomial.mli", 76, 2158, 2192), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 18)), 0); (("fold", 1681), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((("Monomial", 1608)), "t"), 0, (0)), 100000000, 0, -406), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -405), (Tag1 (0, ((("a")), 100000000, 0, -400), ((("a")), 100000000, 0, -400), 0), 100000000, 0, -404), 0), 100000000, 0, -403), 0), 100000000, 0, -402), (Tag1 (0, (Tag3 ((("t", 1674)), 0, (0)), 100000000, 0, -401), (Tag1 (0, ((("a")), 100000000, 0, -400), ((("a")), 100000000, 0, -400), 0), 100000000, 0, -399), 0), 100000000, 0, -398), 0), 100000000, 0, -397), 0, (("plugins/micromega/polynomial.mli", 79, 2274, 2276), ("plugins/micromega/polynomial.mli", 79, 2274, 2335), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 19)), 0); (("add", 1682), ((Tag1 (0, (Tag3 (Tag1 ((("Monomial", 1608)), "t"), 0, (0)), 100000000, 0, -396), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -395), (Tag1 (0, (Tag3 ((("t", 1674)), 0, (0)), 100000000, 0, -394), (Tag3 ((("t", 1674)), 0, (0)), 100000000, 0, -393), 0), 100000000, 0, -392), 0), 100000000, 0, -391), 0), 100000000, 0, -390), 0, (("plugins/micromega/polynomial.mli", 83, 2395, 2397), ("plugins/micromega/polynomial.mli", 83, 2395, 2434), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 20)), 0)]), 0, (("plugins/micromega/polynomial.mli", 43, 1409, 1409), ("plugins/micromega/polynomial.mli", 84, 2435, 2438), 0), Tag1 ("Micromega_plugin__Polynomial", 21)), 0, 0); Tag1 (("cstr", 1611), (0, 0, [[(("coeffs", 561), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "Vect"), "t"), 0, (0)), 100000000, 0, -32), (("plugins/micromega/polynomial.mli", 86, 2440, 2453), ("plugins/micromega/polynomial.mli", 86, 2440, 2469), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 24)); (("op", 562), 0, (Tag3 ((("op", 1612)), 0, (0)), 100000000, 0, -33), (("plugins/micromega/polynomial.mli", 86, 2440, 2470), ("plugins/micromega/polynomial.mli", 86, 2440, 2478), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 25)); (("cst", 563), 0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -34), (("plugins/micromega/polynomial.mli", 86, 2440, 2479), ("plugins/micromega/polynomial.mli", 86, 2440, 2488), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 26))]], 1, 0, 0, 0, 0, 0, (("plugins/micromega/polynomial.mli", 86, 2440, 2440), ("plugins/micromega/polynomial.mli", 86, 2440, 2489), 0), 0, 0, 0, Tag1 ("Micromega_plugin__Polynomial", 22)), 1, 0); Tag1 (("op", 1612), (0, 0, Tag1 ([(("Eq", 610), (0), 0, (("plugins/micromega/polynomial.mli", 89, 2534, 2543), ("plugins/micromega/polynomial.mli", 89, 2534, 2545), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 27)); (("Ge", 611), (0), 0, (("plugins/micromega/polynomial.mli", 89, 2534, 2546), ("plugins/micromega/polynomial.mli", 89, 2534, 2550), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 28)); (("Gt", 612), (0), 0, (("plugins/micromega/polynomial.mli", 89, 2534, 2551), ("plugins/micromega/polynomial.mli", 89, 2534, 2555), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 29))], 0), 1, 0, 0, 0, 0, 0, (("plugins/micromega/polynomial.mli", 89, 2534, 2534), ("plugins/micromega/polynomial.mli", 89, 2534, 2555), 0), 0, 1, 0, Tag1 ("Micromega_plugin__Polynomial", 23)), 2, 0); (("eval_op", 1613), ((Tag1 (0, (Tag3 ((("op", 1612)), 0, (0)), 100000000, 0, -31), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -30), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -29), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -28), 0), 100000000, 0, -27), 0), 100000000, 0, -26), 0), 100000000, 0, -25), 0, (("plugins/micromega/polynomial.mli", 91, 2557, 2557), ("plugins/micromega/polynomial.mli", 91, 2557, 2595), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 30)), 0); (("compare_op", 1614), ((Tag1 (0, (Tag3 ((("op", 1612)), 0, (0)), 100000000, 0, -24), (Tag1 (0, (Tag3 ((("op", 1612)), 0, (0)), 100000000, 0, -23), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0), 100000000, 0, -20), 0, (("plugins/micromega/polynomial.mli", 92, 2596, 2596), ("plugins/micromega/polynomial.mli", 92, 2596, 2628), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 31)), 0); (("opAdd", 1615), ((Tag1 (0, (Tag3 ((("op", 1612)), 0, (0)), 100000000, 0, -19), (Tag1 (0, (Tag3 ((("op", 1612)), 0, (0)), 100000000, 0, -18), (Tag3 ((("op", 1612)), 0, (0)), 100000000, 0, -17), 0), 100000000, 0, -16), 0), 100000000, 0, -15), 0, (("plugins/micromega/polynomial.mli", 96, 2663, 2663), ("plugins/micromega/polynomial.mli", 96, 2663, 2689), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 32)), 0); (("is_strict", 1616), ((Tag1 (0, (Tag3 ((("cstr", 1611)), 0, (0)), 100000000, 0, -14), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -13), 0), 100000000, 0, -12), 0, (("plugins/micromega/polynomial.mli", 100, 2772, 2772), ("plugins/micromega/polynomial.mli", 100, 2772, 2800), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 33)), 0); Tag2 (("Strict", 1617), ((Tag3 ("exn", 7)), 0, (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Micromega_plugin__Polynomial", 34)), 2, 0); Tag3 (("LinPoly", 1618), 0, (Tag1 ([Tag1 (("t", 1683), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "Vect"), "t"), 0, (0)), 100000000, 0, -526)), 0, 0, 0, 0, (("plugins/micromega/polynomial.mli", 114, 3180, 3182), ("plugins/micromega/polynomial.mli", 114, 3180, 3197), 0), 0, 0, 0, Tag1 ("Micromega_plugin__Polynomial", 35)), 1, 0); Tag3 (("MonT", 1684), 0, (Tag1 ([(("clear", 1705), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -544), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -543), 0), 100000000, 0, -542), 0, (("plugins/micromega/polynomial.mli", 121, 3398, 3402), ("plugins/micromega/polynomial.mli", 121, 3398, 3426), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 36)), 0); (("reserve", 1706), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -541), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -540), 0), 100000000, 0, -539), 0, (("plugins/micromega/polynomial.mli", 124, 3474, 3478), ("plugins/micromega/polynomial.mli", 124, 3474, 3503), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 37)), 0); (("safe_reserve", 1707), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -538), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -537), 0), 100000000, 0, -536), 0, (("plugins/micromega/polynomial.mli", 127, 3556, 3560), ("plugins/micromega/polynomial.mli", 127, 3556, 3590), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 38)), 0); (("get_fresh", 1708), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -535), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -534), 0), 100000000, 0, -533), 0, (("plugins/micromega/polynomial.mli", 130, 3650, 3654), ("plugins/micromega/polynomial.mli", 130, 3650, 3681), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 39)), 0); (("retrieve", 1709), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -532), (Tag3 (Tag1 ((("Monomial", 1608)), "t"), 0, (0)), 100000000, 0, -531), 0), 100000000, 0, -530), 0, (("plugins/micromega/polynomial.mli", 134, 3770, 3774), ("plugins/micromega/polynomial.mli", 134, 3770, 3806), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 40)), 0); (("register", 1710), ((Tag1 (0, (Tag3 (Tag1 ((("Monomial", 1608)), "t"), 0, (0)), 100000000, 0, -529), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -528), 0), 100000000, 0, -527), 0, (("plugins/micromega/polynomial.mli", 138, 3886, 3890), ("plugins/micromega/polynomial.mli", 138, 3886, 3922), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 41)), 0)]), 0, (("plugins/micromega/polynomial.mli", 119, 3336, 3338), ("plugins/micromega/polynomial.mli", 139, 3923, 3928), 0), Tag1 ("Micromega_plugin__Polynomial", 42)), 0, 0); (("linpol_of_pol", 1685), ((Tag1 (0, (Tag3 (Tag1 ((("Poly", 1610)), "t"), 0, (0)), 100000000, 0, -525), (Tag3 ((("t", 1683)), 0, (0)), 100000000, 0, -524), 0), 100000000, 0, -523), 0, (("plugins/micromega/polynomial.mli", 142, 3984, 3986), ("plugins/micromega/polynomial.mli", 142, 3984, 4017), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 43)), 0); (("var", 1686), ((Tag1 (0, (Tag3 ((("var", 1607)), 0, (0)), 100000000, 0, -522), (Tag3 ((("t", 1683)), 0, (0)), 100000000, 0, -521), 0), 100000000, 0, -520), 0, (("plugins/micromega/polynomial.mli", 147, 4108, 4110), ("plugins/micromega/polynomial.mli", 147, 4108, 4128), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 44)), 0); (("coq_poly_of_linpol", 1687), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -519), ((("a")), 100000000, 0, -516), 0), 100000000, 0, -518), (Tag1 (0, (Tag3 ((("t", 1683)), 0, (0)), 100000000, 0, -517), (Tag3 (Tag1 ((("Mc", 1605)), "pExpr"), [((("a")), 100000000, 0, -516)], (0)), 100000000, 0, -515), 0), 100000000, 0, -514), 0), 100000000, 0, -513), 0, (("plugins/micromega/polynomial.mli", 153, 4339, 4341), ("plugins/micromega/polynomial.mli", 153, 4339, 4397), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 45)), 0); (("of_monomial", 1688), ((Tag1 (0, (Tag3 (Tag1 ((("Monomial", 1608)), "t"), 0, (0)), 100000000, 0, -512), (Tag3 ((("t", 1683)), 0, (0)), 100000000, 0, -511), 0), 100000000, 0, -510), 0, (("plugins/micromega/polynomial.mli", 157, 4490, 4492), ("plugins/micromega/polynomial.mli", 157, 4490, 4525), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 46)), 0); (("of_vect", 1689), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "Vect"), "t"), 0, (0)), 100000000, 0, -509), (Tag3 ((("t", 1683)), 0, (0)), 100000000, 0, -508), 0), 100000000, 0, -507), 0, (("plugins/micromega/polynomial.mli", 163, 4664, 4666), ("plugins/micromega/polynomial.mli", 163, 4664, 4691), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 47)), 0); (("variables", 1690), ((Tag1 (0, (Tag3 ((("t", 1683)), 0, (0)), 100000000, 0, -506), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "Mutils"), "ISet"), "t"), 0, (0)), 100000000, 0, -505), 0), 100000000, 0, -504), 0, (("plugins/micromega/polynomial.mli", 168, 4819, 4821), ("plugins/micromega/polynomial.mli", 168, 4819, 4848), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 48)), 0); (("is_variable", 1691), ((Tag1 (0, (Tag3 ((("t", 1683)), 0, (0)), 100000000, 0, -503), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("var", 1607)), 0, (0)), 100000000, 0, -502)], (0)), 100000000, 0, -501), 0), 100000000, 0, -500), 0, (("plugins/micromega/polynomial.mli", 172, 4918, 4920), ("plugins/micromega/polynomial.mli", 172, 4918, 4953), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 49)), 0); (("is_linear", 1692), ((Tag1 (0, (Tag3 ((("t", 1683)), 0, (0)), 100000000, 0, -499), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -498), 0), 100000000, 0, -497), 0, (("plugins/micromega/polynomial.mli", 176, 5040, 5042), ("plugins/micromega/polynomial.mli", 176, 5040, 5067), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 50)), 0); (("is_linear_for", 1693), ((Tag1 (0, (Tag3 ((("var", 1607)), 0, (0)), 100000000, 0, -496), (Tag1 (0, (Tag3 ((("t", 1683)), 0, (0)), 100000000, 0, -495), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -494), 0), 100000000, 0, -493), 0), 100000000, 0, -492), 0, (("plugins/micromega/polynomial.mli", 181, 5231, 5233), ("plugins/micromega/polynomial.mli", 181, 5231, 5269), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 51)), 0); (("constant", 1694), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -491), (Tag3 ((("t", 1683)), 0, (0)), 100000000, 0, -490), 0), 100000000, 0, -489), 0, (("plugins/micromega/polynomial.mli", 186, 5336, 5338), ("plugins/micromega/polynomial.mli", 186, 5336, 5361), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 52)), 0); (("search_linear", 1695), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -488), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -487), 0), 100000000, 0, -486), (Tag1 (0, (Tag3 ((("t", 1683)), 0, (0)), 100000000, 0, -485), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("var", 1607)), 0, (0)), 100000000, 0, -484)], (0)), 100000000, 0, -483), 0), 100000000, 0, -482), 0), 100000000, 0, -481), 0, (("plugins/micromega/polynomial.mli", 193, 5544, 5546), ("plugins/micromega/polynomial.mli", 193, 5544, 5598), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 53)), 0); (("search_all_linear", 1696), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -480), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -479), 0), 100000000, 0, -478), (Tag1 (0, (Tag3 ((("t", 1683)), 0, (0)), 100000000, 0, -477), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("var", 1607)), 0, (0)), 100000000, 0, -476)], (0)), 100000000, 0, -475), 0), 100000000, 0, -474), 0), 100000000, 0, -473), 0, (("plugins/micromega/polynomial.mli", 199, 5791, 5793), ("plugins/micromega/polynomial.mli", 199, 5791, 5847), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 54)), 0); (("product", 1697), ((Tag1 (0, (Tag3 ((("t", 1683)), 0, (0)), 100000000, 0, -472), (Tag1 (0, (Tag3 ((("t", 1683)), 0, (0)), 100000000, 0, -471), (Tag3 ((("t", 1683)), 0, (0)), 100000000, 0, -470), 0), 100000000, 0, -469), 0), 100000000, 0, -468), 0, (("plugins/micromega/polynomial.mli", 203, 5921, 5923), ("plugins/micromega/polynomial.mli", 203, 5921, 5948), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 55)), 0); (("factorise", 1698), ((Tag1 (0, (Tag3 ((("var", 1607)), 0, (0)), 100000000, 0, -467), (Tag1 (0, (Tag3 ((("t", 1683)), 0, (0)), 100000000, 0, -466), (Tag2 ([(Tag3 ((("t", 1683)), 0, (0)), 100000000, 0, -464); (Tag3 ((("t", 1683)), 0, (0)), 100000000, 0, -465)]), 100000000, 0, -463), 0), 100000000, 0, -462), 0), 100000000, 0, -461), 0, (("plugins/micromega/polynomial.mli", 208, 6055, 6057), ("plugins/micromega/polynomial.mli", 208, 6055, 6090), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 56)), 0); (("collect_square", 1699), ((Tag1 (0, (Tag3 ((("t", 1683)), 0, (0)), 100000000, 0, -460), (Tag3 (Tag1 ((("MonMap", 1609)), "t"), [(Tag3 (Tag1 ((("Monomial", 1608)), "t"), 0, (0)), 100000000, 0, -459)], (0)), 100000000, 0, -458), 0), 100000000, 0, -457), 0, (("plugins/micromega/polynomial.mli", 213, 6213, 6215), ("plugins/micromega/polynomial.mli", 213, 6213, 6260), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 57)), 0); (("monomials", 1700), ((Tag1 (0, (Tag3 ((("t", 1683)), 0, (0)), 100000000, 0, -456), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "Mutils"), "ISet"), "t"), 0, (0)), 100000000, 0, -455), 0), 100000000, 0, -454), 0, (("plugins/micromega/polynomial.mli", 217, 6321, 6323), ("plugins/micromega/polynomial.mli", 217, 6321, 6350), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 58)), 0); (("degree", 1701), ((Tag1 (0, (Tag3 ((("t", 1683)), 0, (0)), 100000000, 0, -453), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -452), 0), 100000000, 0, -451), 0, (("plugins/micromega/polynomial.mli", 221, 6412, 6414), ("plugins/micromega/polynomial.mli", 221, 6412, 6435), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 59)), 0); (("pp_var", 1702), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -450), (Tag1 (0, (Tag3 ((("var", 1607)), 0, (0)), 100000000, 0, -449), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -448), 0), 100000000, 0, -447), 0), 100000000, 0, -446), 0, (("plugins/micromega/polynomial.mli", 224, 6498, 6500), ("plugins/micromega/polynomial.mli", 224, 6498, 6539), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 60)), 0); (("pp", 1703), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -445), (Tag1 (0, (Tag3 ((("t", 1683)), 0, (0)), 100000000, 0, -444), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -443), 0), 100000000, 0, -442), 0), 100000000, 0, -441), 0, (("plugins/micromega/polynomial.mli", 227, 6587, 6589), ("plugins/micromega/polynomial.mli", 227, 6587, 6622), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 61)), 0); (("pp_goal", 1704), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -440), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -439), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("t", 1683)), 0, (0)), 100000000, 0, -437); (Tag3 ((("op", 1612)), 0, (0)), 100000000, 0, -438)]), 100000000, 0, -436)], (0)), 100000000, 0, -435), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -434), 0), 100000000, 0, -433), 0), 100000000, 0, -432), 0), 100000000, 0, -431), 0, (("plugins/micromega/polynomial.mli", 230, 6704, 6706), ("plugins/micromega/polynomial.mli", 230, 6704, 6766), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 62)), 0)]), 0, (("plugins/micromega/polynomial.mli", 104, 2820, 2820), ("plugins/micromega/polynomial.mli", 231, 6767, 6770), 0), Tag1 ("Micromega_plugin__Polynomial", 63)), 0, 0); Tag3 (("ProofFormat", 1619), 0, (Tag1 ([Tag1 (("prf_rule", 1711), (0, 0, Tag1 ([(("Annot", 964), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -658); (Tag3 ((("prf_rule", 1711)), 0, (0)), 100000000, 0, -659)]), 0, (("plugins/micromega/polynomial.mli", 242, 7064, 7068), ("plugins/micromega/polynomial.mli", 242, 7064, 7096), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 65)); (("Hyp", 965), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -660)]), 0, (("plugins/micromega/polynomial.mli", 243, 7097, 7101), ("plugins/micromega/polynomial.mli", 243, 7097, 7113), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 66)); (("Def", 966), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -661)]), 0, (("plugins/micromega/polynomial.mli", 244, 7114, 7118), ("plugins/micromega/polynomial.mli", 244, 7114, 7130), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 67)); (("Ref", 967), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -662)]), 0, (("plugins/micromega/polynomial.mli", 245, 7131, 7135), ("plugins/micromega/polynomial.mli", 245, 7131, 7147), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 68)); (("Cst", 968), ([(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -663)]), 0, (("plugins/micromega/polynomial.mli", 246, 7148, 7152), ("plugins/micromega/polynomial.mli", 246, 7148, 7164), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 69)); (("Zero", 969), (0), 0, (("plugins/micromega/polynomial.mli", 247, 7165, 7169), ("plugins/micromega/polynomial.mli", 247, 7165, 7175), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 70)); (("Square", 970), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "Vect"), "t"), 0, (0)), 100000000, 0, -664)]), 0, (("plugins/micromega/polynomial.mli", 248, 7176, 7180), ("plugins/micromega/polynomial.mli", 248, 7176, 7198), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 71)); (("MulC", 971), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "Vect"), "t"), 0, (0)), 100000000, 0, -665); (Tag3 ((("prf_rule", 1711)), 0, (0)), 100000000, 0, -666)]), 0, (("plugins/micromega/polynomial.mli", 249, 7199, 7203), ("plugins/micromega/polynomial.mli", 249, 7199, 7230), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 72)); (("Gcd", 972), ([(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Z"), "t"), 0, (0)), 100000000, 0, -667); (Tag3 ((("prf_rule", 1711)), 0, (0)), 100000000, 0, -668)]), 0, (("plugins/micromega/polynomial.mli", 250, 7231, 7235), ("plugins/micromega/polynomial.mli", 250, 7231, 7258), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 73)); (("MulPrf", 991), ([(Tag3 ((("prf_rule", 1711)), 0, (0)), 100000000, 0, -669); (Tag3 ((("prf_rule", 1711)), 0, (0)), 100000000, 0, -670)]), 0, (("plugins/micromega/polynomial.mli", 251, 7259, 7263), ("plugins/micromega/polynomial.mli", 251, 7259, 7294), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 74)); (("AddPrf", 992), ([(Tag3 ((("prf_rule", 1711)), 0, (0)), 100000000, 0, -671); (Tag3 ((("prf_rule", 1711)), 0, (0)), 100000000, 0, -672)]), 0, (("plugins/micromega/polynomial.mli", 252, 7295, 7299), ("plugins/micromega/polynomial.mli", 252, 7295, 7330), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 75)); (("CutPrf", 993), ([(Tag3 ((("prf_rule", 1711)), 0, (0)), 100000000, 0, -673)]), 0, (("plugins/micromega/polynomial.mli", 253, 7331, 7335), ("plugins/micromega/polynomial.mli", 253, 7331, 7355), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 76)); (("LetPrf", 994), ([(Tag3 ((("prf_rule", 1711)), 0, (0)), 100000000, 0, -674); (Tag3 ((("prf_rule", 1711)), 0, (0)), 100000000, 0, -675)]), 0, (("plugins/micromega/polynomial.mli", 254, 7356, 7360), ("plugins/micromega/polynomial.mli", 254, 7356, 7391), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 77))], 0), 1, 0, 0, 0, 0, 0, (("plugins/micromega/polynomial.mli", 241, 7046, 7048), ("plugins/micromega/polynomial.mli", 254, 7356, 7391), 0), 0, 0, 0, Tag1 ("Micromega_plugin__Polynomial", 64)), 1, 0); Tag1 (("proof", 1712), (0, 0, Tag1 ([(("Done", 1014), (0), 0, (("plugins/micromega/polynomial.mli", 257, 7408, 7412), ("plugins/micromega/polynomial.mli", 257, 7408, 7418), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 79)); (("Step", 1015), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -638); (Tag3 ((("prf_rule", 1711)), 0, (0)), 100000000, 0, -639); (Tag3 ((("proof", 1712)), 0, (0)), 100000000, 0, -640)]), 0, (("plugins/micromega/polynomial.mli", 258, 7419, 7423), ("plugins/micromega/polynomial.mli", 258, 7419, 7455), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 80)); (("Split", 1016), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -641); (Tag3 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "Vect"), "t"), 0, (0)), 100000000, 0, -642); (Tag3 ((("proof", 1712)), 0, (0)), 100000000, 0, -643); (Tag3 ((("proof", 1712)), 0, (0)), 100000000, 0, -644)]), 0, (("plugins/micromega/polynomial.mli", 259, 7456, 7460), ("plugins/micromega/polynomial.mli", 259, 7456, 7499), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 81)); (("Enum", 1017), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -645); (Tag3 ((("prf_rule", 1711)), 0, (0)), 100000000, 0, -646); (Tag3 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "Vect"), "t"), 0, (0)), 100000000, 0, -647); (Tag3 ((("prf_rule", 1711)), 0, (0)), 100000000, 0, -648); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("proof", 1712)), 0, (0)), 100000000, 0, -650)], (0)), 100000000, 0, -649)]), 0, (("plugins/micromega/polynomial.mli", 260, 7500, 7504), ("plugins/micromega/polynomial.mli", 260, 7500, 7561), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 82)); (("ExProof", 1018), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -651); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -652); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -653); (Tag3 ((("var", 1607)), 0, (0)), 100000000, 0, -654); (Tag3 ((("var", 1607)), 0, (0)), 100000000, 0, -655); (Tag3 ((("var", 1607)), 0, (0)), 100000000, 0, -656); (Tag3 ((("proof", 1712)), 0, (0)), 100000000, 0, -657)]), 0, (("plugins/micromega/polynomial.mli", 261, 7562, 7566), ("plugins/micromega/polynomial.mli", 261, 7562, 7620), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 83))], 0), 1, 0, 0, 0, 0, 0, (("plugins/micromega/polynomial.mli", 256, 7393, 7395), ("plugins/micromega/polynomial.mli", 261, 7562, 7620), 0), 0, 0, 0, Tag1 ("Micromega_plugin__Polynomial", 78)), 1, 0); (("pr_size", 1713), ((Tag1 (0, (Tag3 ((("prf_rule", 1711)), 0, (0)), 100000000, 0, -637), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -636), 0), 100000000, 0, -635), 0, (("plugins/micromega/polynomial.mli", 265, 7657, 7659), ("plugins/micromega/polynomial.mli", 265, 7657, 7688), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 84)), 0); (("pr_rule_max_def", 1714), ((Tag1 (0, (Tag3 ((("prf_rule", 1711)), 0, (0)), 100000000, 0, -634), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -633), 0), 100000000, 0, -632), 0, (("plugins/micromega/polynomial.mli", 266, 7689, 7691), ("plugins/micromega/polynomial.mli", 266, 7689, 7728), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 85)), 0); (("pr_rule_max_hyp", 1715), ((Tag1 (0, (Tag3 ((("prf_rule", 1711)), 0, (0)), 100000000, 0, -631), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -630), 0), 100000000, 0, -629), 0, (("plugins/micromega/polynomial.mli", 267, 7729, 7731), ("plugins/micromega/polynomial.mli", 267, 7729, 7768), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 86)), 0); (("proof_max_def", 1716), ((Tag1 (0, (Tag3 ((("proof", 1712)), 0, (0)), 100000000, 0, -628), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -627), 0), 100000000, 0, -626), 0, (("plugins/micromega/polynomial.mli", 268, 7769, 7771), ("plugins/micromega/polynomial.mli", 268, 7769, 7803), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 87)), 0); (("normalise_proof", 1717), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -625), (Tag1 (0, (Tag3 ((("proof", 1712)), 0, (0)), 100000000, 0, -624), (Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -622); (Tag3 ((("proof", 1712)), 0, (0)), 100000000, 0, -623)]), 100000000, 0, -621), 0), 100000000, 0, -620), 0), 100000000, 0, -619), 0, (("plugins/micromega/polynomial.mli", 269, 7804, 7806), ("plugins/micromega/polynomial.mli", 269, 7804, 7855), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 88)), 0); (("output_prf_rule", 1718), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -618), (Tag1 (0, (Tag3 ((("prf_rule", 1711)), 0, (0)), 100000000, 0, -617), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -616), 0), 100000000, 0, -615), 0), 100000000, 0, -614), 0, (("plugins/micromega/polynomial.mli", 270, 7856, 7858), ("plugins/micromega/polynomial.mli", 270, 7856, 7911), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 89)), 0); (("output_proof", 1719), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -613), (Tag1 (0, (Tag3 ((("proof", 1712)), 0, (0)), 100000000, 0, -612), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -611), 0), 100000000, 0, -610), 0), 100000000, 0, -609), 0, (("plugins/micromega/polynomial.mli", 271, 7912, 7914), ("plugins/micromega/polynomial.mli", 271, 7912, 7961), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 90)), 0); (("add_proof", 1720), ((Tag1 (0, (Tag3 ((("prf_rule", 1711)), 0, (0)), 100000000, 0, -608), (Tag1 (0, (Tag3 ((("prf_rule", 1711)), 0, (0)), 100000000, 0, -607), (Tag3 ((("prf_rule", 1711)), 0, (0)), 100000000, 0, -606), 0), 100000000, 0, -605), 0), 100000000, 0, -604), 0, (("plugins/micromega/polynomial.mli", 272, 7962, 7964), ("plugins/micromega/polynomial.mli", 272, 7962, 8012), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 91)), 0); (("mul_cst_proof", 1721), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -603), (Tag1 (0, (Tag3 ((("prf_rule", 1711)), 0, (0)), 100000000, 0, -602), (Tag3 ((("prf_rule", 1711)), 0, (0)), 100000000, 0, -601), 0), 100000000, 0, -600), 0), 100000000, 0, -599), 0, (("plugins/micromega/polynomial.mli", 273, 8013, 8015), ("plugins/micromega/polynomial.mli", 273, 8013, 8062), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 92)), 0); (("mul_proof", 1722), ((Tag1 (0, (Tag3 ((("prf_rule", 1711)), 0, (0)), 100000000, 0, -598), (Tag1 (0, (Tag3 ((("prf_rule", 1711)), 0, (0)), 100000000, 0, -597), (Tag3 ((("prf_rule", 1711)), 0, (0)), 100000000, 0, -596), 0), 100000000, 0, -595), 0), 100000000, 0, -594), 0, (("plugins/micromega/polynomial.mli", 274, 8063, 8065), ("plugins/micromega/polynomial.mli", 274, 8063, 8113), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 93)), 0); (("compile_proof", 1723), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -593)], (0)), 100000000, 0, -592), (Tag1 (0, (Tag3 ((("proof", 1712)), 0, (0)), 100000000, 0, -591), (Tag3 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "Micromega"), "zArithProof"), 0, (0)), 100000000, 0, -590), 0), 100000000, 0, -589), 0), 100000000, 0, -588), 0, (("plugins/micromega/polynomial.mli", 275, 8114, 8116), ("plugins/micromega/polynomial.mli", 275, 8114, 8178), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 94)), 0); Tag3 (("Env", 1724), 0, (Tag1 ([Tag1 (("t", 1731), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("plugins/micromega/polynomial.mli", 278, 8198, 8202), ("plugins/micromega/polynomial.mli", 278, 8198, 8208), 0), 0, 0, 0, Tag1 ("Micromega_plugin__Polynomial", 95)), 1, 0); (("of_list", 1732), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -683)], (0)), 100000000, 0, -682), (Tag3 ((("t", 1731)), 0, (0)), 100000000, 0, -681), 0), 100000000, 0, -680), 0, (("plugins/micromega/polynomial.mli", 279, 8209, 8213), ("plugins/micromega/polynomial.mli", 279, 8209, 8240), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 96)), 0); (("of_listi", 1733), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -679)], (0)), 100000000, 0, -678), (Tag3 ((("t", 1731)), 0, (0)), 100000000, 0, -677), 0), 100000000, 0, -676), 0, (("plugins/micromega/polynomial.mli", 280, 8241, 8245), ("plugins/micromega/polynomial.mli", 280, 8241, 8272), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 97)), 0)]), 0, (("plugins/micromega/polynomial.mli", 277, 8180, 8182), ("plugins/micromega/polynomial.mli", 281, 8273, 8278), 0), Tag1 ("Micromega_plugin__Polynomial", 98)), 0, 0); (("cmpl_prf_rule", 1725), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "Micromega"), "pExpr"), [((("a")), 100000000, 0, -580)], (0)), 100000000, 0, -587), (Tag3 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "Micromega"), "pol"), [((("a")), 100000000, 0, -580)], (0)), 100000000, 0, -586), 0), 100000000, 0, -585), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -584), ((("a")), 100000000, 0, -580), 0), 100000000, 0, -583), (Tag1 (0, (Tag3 (Tag1 ((("Env", 1724)), "t"), 0, (0)), 100000000, 0, -582), (Tag1 (0, (Tag3 ((("prf_rule", 1711)), 0, (0)), 100000000, 0, -581), (Tag3 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "Micromega"), "psatz"), [((("a")), 100000000, 0, -580)], (0)), 100000000, 0, -579), 0), 100000000, 0, -578), 0), 100000000, 0, -577), 0), 100000000, 0, -576), 0), 100000000, 0, -575), 0, (("plugins/micromega/polynomial.mli", 283, 8280, 8282), ("plugins/micromega/polynomial.mli", 288, 8398, 8423), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 99)), 0); (("proof_of_farkas", 1726), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "Mutils"), "IMap"), "t"), [(Tag3 ((("prf_rule", 1711)), 0, (0)), 100000000, 0, -574)], (0)), 100000000, 0, -573), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "Vect"), "t"), 0, (0)), 100000000, 0, -572), (Tag3 ((("prf_rule", 1711)), 0, (0)), 100000000, 0, -571), 0), 100000000, 0, -570), 0), 100000000, 0, -569), 0, (("plugins/micromega/polynomial.mli", 290, 8425, 8427), ("plugins/micromega/polynomial.mli", 290, 8425, 8486), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 100)), 0); (("eval_prf_rule", 1727), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -568), (Tag2 ([(Tag3 (Tag1 ((("LinPoly", 1618)), "t"), 0, (0)), 100000000, 0, -566); (Tag3 ((("op", 1612)), 0, (0)), 100000000, 0, -567)]), 100000000, 0, -565), 0), 100000000, 0, -564), (Tag1 (0, (Tag3 ((("prf_rule", 1711)), 0, (0)), 100000000, 0, -563), (Tag2 ([(Tag3 (Tag1 ((("LinPoly", 1618)), "t"), 0, (0)), 100000000, 0, -561); (Tag3 ((("op", 1612)), 0, (0)), 100000000, 0, -562)]), 100000000, 0, -560), 0), 100000000, 0, -559), 0), 100000000, 0, -558), 0, (("plugins/micromega/polynomial.mli", 291, 8487, 8489), ("plugins/micromega/polynomial.mli", 291, 8487, 8562), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 101)), 0); (("eval_proof", 1728), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "Mutils"), "IMap"), "t"), [(Tag2 ([(Tag3 (Tag1 ((("LinPoly", 1618)), "t"), 0, (0)), 100000000, 0, -556); (Tag3 ((("op", 1612)), 0, (0)), 100000000, 0, -557)]), 100000000, 0, -555)], (0)), 100000000, 0, -554), (Tag1 (0, (Tag3 ((("proof", 1712)), 0, (0)), 100000000, 0, -553), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -552), 0), 100000000, 0, -551), 0), 100000000, 0, -550), 0, (("plugins/micromega/polynomial.mli", 292, 8563, 8565), ("plugins/micromega/polynomial.mli", 292, 8563, 8622), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 102)), 0); (("simplify_proof", 1729), ((Tag1 (0, (Tag3 ((("proof", 1712)), 0, (0)), 100000000, 0, -549), (Tag2 ([(Tag3 ((("proof", 1712)), 0, (0)), 100000000, 0, -547); (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "Mutils"), "ISet"), "t"), 0, (0)), 100000000, 0, -548)]), 100000000, 0, -546), 0), 100000000, 0, -545), 0, (("plugins/micromega/polynomial.mli", 293, 8623, 8625), ("plugins/micromega/polynomial.mli", 293, 8623, 8676), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 103)), 0); Tag3 (("PrfRuleMap", 1730), 0, (Tag1 ([Tag1 (("key", 1734), (0, 0, 0, 1, ((Tag3 ((("prf_rule", 1711)), 0, (0)), 100000000, 0, -1012)), 0, 0, 0, 0, (("plugins/micromega/polynomial.mli", 295, 8678, 8711), ("plugins/micromega/polynomial.mli", 295, 8678, 8730), 0), 0, 0, 0, Tag1 ("Micromega_plugin__Polynomial", 104)), 1, 0); Tag1 (("t", 1735), ([((("a")), 100000000, 0, -1011)], 1, 0, 1, 0, [9], [2], 0, 0, (("map.mli", 73, 2902, 2906), ("map.mli", 73, 2902, 2917), 0), 0, 0, 0, Tag1 ("Stdlib__Map", 4)), 1, 0); (("empty", 1736), ((Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -1010)], (0)), 100000000, 0, -1009), 0, (("map.mli", 76, 2977, 2981), ("map.mli", 76, 2977, 2996), 0), 0, Tag1 ("Stdlib__Map", 5)), 0); (("add", 1737), ((Tag1 (0, (Tag3 ((("key", 1734)), 0, (0)), 100000000, 0, -1008), (Tag1 (0, ((("a")), 100000000, 0, -1006), (Tag1 (0, (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -1006)], (0)), 100000000, 0, -1007), (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -1006)], (0)), 100000000, 0, -1005), 0), 100000000, 0, -1004), 0), 100000000, 0, -1003), 0), 100000000, 0, -1002), 0, (("map.mli", 79, 3024, 3028), ("map.mli", 79, 3024, 3062), 0), 0, Tag1 ("Stdlib__Map", 6)), 0); (("add_to_list", 1738), ((Tag1 (0, (Tag3 ((("key", 1734)), 0, (0)), 100000000, 0, -1001), (Tag1 (0, ((("a")), 100000000, 0, -998), (Tag1 (0, (Tag3 ((("t", 1735)), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -998)], (0)), 100000000, 0, -1000)], (0)), 100000000, 0, -999), (Tag3 ((("t", 1735)), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -998)], (0)), 100000000, 0, -997)], (0)), 100000000, 0, -996), 0), 100000000, 0, -995), 0), 100000000, 0, -994), 0), 100000000, 0, -993), 0, (("map.mli", 88, 3503, 3507), ("map.mli", 88, 3503, 3559), 0), 0, Tag1 ("Stdlib__Map", 7)), 0); (("update", 1739), ((Tag1 (0, (Tag3 ((("key", 1734)), 0, (0)), 100000000, 0, -992), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -987)], (0)), 100000000, 0, -991), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -987)], (0)), 100000000, 0, -990), 0), 100000000, 0, -989), (Tag1 (0, (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -987)], (0)), 100000000, 0, -988), (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -987)], (0)), 100000000, 0, -986), 0), 100000000, 0, -985), 0), 100000000, 0, -984), 0), 100000000, 0, -983), 0, (("map.mli", 94, 3753, 3757), ("map.mli", 94, 3753, 3816), 0), 0, Tag1 ("Stdlib__Map", 8)), 0); (("singleton", 1740), ((Tag1 (0, (Tag3 ((("key", 1734)), 0, (0)), 100000000, 0, -982), (Tag1 (0, ((("a")), 100000000, 0, -981), (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -981)], (0)), 100000000, 0, -980), 0), 100000000, 0, -979), 0), 100000000, 0, -978), 0, (("map.mli", 106, 4436, 4440), ("map.mli", 106, 4436, 4472), 0), 0, Tag1 ("Stdlib__Map", 9)), 0); (("remove", 1741), ((Tag1 (0, (Tag3 ((("key", 1734)), 0, (0)), 100000000, 0, -977), (Tag1 (0, (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -975)], (0)), 100000000, 0, -976), (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -975)], (0)), 100000000, 0, -974), 0), 100000000, 0, -973), 0), 100000000, 0, -972), 0, (("map.mli", 111, 4594, 4598), ("map.mli", 111, 4594, 4629), 0), 0, Tag1 ("Stdlib__Map", 10)), 0); (("merge", 1742), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1734)), 0, (0)), 100000000, 0, -971), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -964)], (0)), 100000000, 0, -970), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -962)], (0)), 100000000, 0, -969), (Tag3 ((Tag3 ("option", 10)), [((("c")), 100000000, 0, -960)], (0)), 100000000, 0, -968), 0), 100000000, 0, -967), 0), 100000000, 0, -966), 0), 100000000, 0, -965), (Tag1 (0, (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -964)], (0)), 100000000, 0, -963), (Tag1 (0, (Tag3 ((("t", 1735)), [((("b")), 100000000, 0, -962)], (0)), 100000000, 0, -961), (Tag3 ((("t", 1735)), [((("c")), 100000000, 0, -960)], (0)), 100000000, 0, -959), 0), 100000000, 0, -958), 0), 100000000, 0, -957), 0), 100000000, 0, -956), 0, (("map.mli", 118, 4950, 4954), ("map.mli", 120, 5019, 5045), 0), 0, Tag1 ("Stdlib__Map", 11)), 0); (("union", 1743), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1734)), 0, (0)), 100000000, 0, -955), (Tag1 (0, ((("a")), 100000000, 0, -948), (Tag1 (0, ((("a")), 100000000, 0, -948), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -948)], (0)), 100000000, 0, -954), 0), 100000000, 0, -953), 0), 100000000, 0, -952), 0), 100000000, 0, -951), (Tag1 (0, (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -948)], (0)), 100000000, 0, -950), (Tag1 (0, (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -948)], (0)), 100000000, 0, -949), (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -948)], (0)), 100000000, 0, -947), 0), 100000000, 0, -946), 0), 100000000, 0, -945), 0), 100000000, 0, -944), 0, (("map.mli", 129, 5475, 5479), ("map.mli", 129, 5475, 5544), 0), 0, Tag1 ("Stdlib__Map", 12)), 0); (("cardinal", 1744), ((Tag1 (0, (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -943)], (0)), 100000000, 0, -942), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -941), 0), 100000000, 0, -940), 0, (("map.mli", 142, 6061, 6065), ("map.mli", 142, 6061, 6090), 0), 0, Tag1 ("Stdlib__Map", 13)), 0); (("bindings", 1745), ((Tag1 (0, (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -938)], (0)), 100000000, 0, -939), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("key", 1734)), 0, (0)), 100000000, 0, -937); ((("a")), 100000000, 0, -938)]), 100000000, 0, -936)], (0)), 100000000, 0, -935), 0), 100000000, 0, -934), 0, (("map.mli", 148, 6197, 6201), ("map.mli", 148, 6197, 6238), 0), 0, Tag1 ("Stdlib__Map", 14)), 0); (("min_binding", 1746), ((Tag1 (0, (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -932)], (0)), 100000000, 0, -933), (Tag2 ([(Tag3 ((("key", 1734)), 0, (0)), 100000000, 0, -931); ((("a")), 100000000, 0, -932)]), 100000000, 0, -930), 0), 100000000, 0, -929), 0, (("map.mli", 155, 6495, 6499), ("map.mli", 155, 6495, 6534), 0), 0, Tag1 ("Stdlib__Map", 15)), 0); (("min_binding_opt", 1747), ((Tag1 (0, (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -927)], (0)), 100000000, 0, -928), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("key", 1734)), 0, (0)), 100000000, 0, -926); ((("a")), 100000000, 0, -927)]), 100000000, 0, -925)], (0)), 100000000, 0, -924), 0), 100000000, 0, -923), 0, (("map.mli", 161, 6727, 6731), ("map.mli", 161, 6727, 6777), 0), 0, Tag1 ("Stdlib__Map", 16)), 0); (("max_binding", 1748), ((Tag1 (0, (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -921)], (0)), 100000000, 0, -922), (Tag2 ([(Tag3 ((("key", 1734)), 0, (0)), 100000000, 0, -920); ((("a")), 100000000, 0, -921)]), 100000000, 0, -919), 0), 100000000, 0, -918), 0, (("map.mli", 167, 6961, 6965), ("map.mli", 167, 6961, 7000), 0), 0, Tag1 ("Stdlib__Map", 17)), 0); (("max_binding_opt", 1749), ((Tag1 (0, (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -916)], (0)), 100000000, 0, -917), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("key", 1734)), 0, (0)), 100000000, 0, -915); ((("a")), 100000000, 0, -916)]), 100000000, 0, -914)], (0)), 100000000, 0, -913), 0), 100000000, 0, -912), 0, (("map.mli", 172, 7128, 7132), ("map.mli", 172, 7128, 7178), 0), 0, Tag1 ("Stdlib__Map", 18)), 0); (("choose", 1750), ((Tag1 (0, (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -910)], (0)), 100000000, 0, -911), (Tag2 ([(Tag3 ((("key", 1734)), 0, (0)), 100000000, 0, -909); ((("a")), 100000000, 0, -910)]), 100000000, 0, -908), 0), 100000000, 0, -907), 0, (("map.mli", 177, 7310, 7314), ("map.mli", 177, 7310, 7344), 0), 0, Tag1 ("Stdlib__Map", 19)), 0); (("choose_opt", 1751), ((Tag1 (0, (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -905)], (0)), 100000000, 0, -906), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("key", 1734)), 0, (0)), 100000000, 0, -904); ((("a")), 100000000, 0, -905)]), 100000000, 0, -903)], (0)), 100000000, 0, -902), 0), 100000000, 0, -901), 0, (("map.mli", 183, 7562, 7566), ("map.mli", 183, 7562, 7607), 0), 0, Tag1 ("Stdlib__Map", 20)), 0); (("find", 1752), ((Tag1 (0, (Tag3 ((("key", 1734)), 0, (0)), 100000000, 0, -900), (Tag1 (0, (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -898)], (0)), 100000000, 0, -899), ((("a")), 100000000, 0, -898), 0), 100000000, 0, -897), 0), 100000000, 0, -896), 0, (("map.mli", 191, 7850, 7854), ("map.mli", 191, 7850, 7881), 0), 0, Tag1 ("Stdlib__Map", 21)), 0); (("find_opt", 1753), ((Tag1 (0, (Tag3 ((("key", 1734)), 0, (0)), 100000000, 0, -895), (Tag1 (0, (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -893)], (0)), 100000000, 0, -894), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -893)], (0)), 100000000, 0, -892), 0), 100000000, 0, -891), 0), 100000000, 0, -890), 0, (("map.mli", 195, 8006, 8010), ("map.mli", 195, 8006, 8048), 0), 0, Tag1 ("Stdlib__Map", 22)), 0); (("find_first", 1754), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1734)), 0, (0)), 100000000, 0, -889), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -888), 0), 100000000, 0, -887), (Tag1 (0, (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -885)], (0)), 100000000, 0, -886), (Tag2 ([(Tag3 ((("key", 1734)), 0, (0)), 100000000, 0, -884); ((("a")), 100000000, 0, -885)]), 100000000, 0, -883), 0), 100000000, 0, -882), 0), 100000000, 0, -881), 0, (("map.mli", 200, 8204, 8208), ("map.mli", 200, 8204, 8257), 0), 0, Tag1 ("Stdlib__Map", 23)), 0); (("find_first_opt", 1755), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1734)), 0, (0)), 100000000, 0, -880), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -879), 0), 100000000, 0, -878), (Tag1 (0, (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -876)], (0)), 100000000, 0, -877), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("key", 1734)), 0, (0)), 100000000, 0, -875); ((("a")), 100000000, 0, -876)]), 100000000, 0, -874)], (0)), 100000000, 0, -873), 0), 100000000, 0, -872), 0), 100000000, 0, -871), 0, (("map.mli", 212, 8743, 8747), ("map.mli", 212, 8743, 8809), 0), 0, Tag1 ("Stdlib__Map", 24)), 0); (("find_last", 1756), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1734)), 0, (0)), 100000000, 0, -870), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -869), 0), 100000000, 0, -868), (Tag1 (0, (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -866)], (0)), 100000000, 0, -867), (Tag2 ([(Tag3 ((("key", 1734)), 0, (0)), 100000000, 0, -865); ((("a")), 100000000, 0, -866)]), 100000000, 0, -864), 0), 100000000, 0, -863), 0), 100000000, 0, -862), 0, (("map.mli", 218, 9052, 9056), ("map.mli", 218, 9052, 9104), 0), 0, Tag1 ("Stdlib__Map", 25)), 0); (("find_last_opt", 1757), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1734)), 0, (0)), 100000000, 0, -861), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -860), 0), 100000000, 0, -859), (Tag1 (0, (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -857)], (0)), 100000000, 0, -858), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("key", 1734)), 0, (0)), 100000000, 0, -856); ((("a")), 100000000, 0, -857)]), 100000000, 0, -855)], (0)), 100000000, 0, -854), 0), 100000000, 0, -853), 0), 100000000, 0, -852), 0, (("map.mli", 224, 9334, 9338), ("map.mli", 224, 9334, 9399), 0), 0, Tag1 ("Stdlib__Map", 26)), 0); (("iter", 1758), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1734)), 0, (0)), 100000000, 0, -851), (Tag1 (0, ((("a")), 100000000, 0, -847), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -850), 0), 100000000, 0, -849), 0), 100000000, 0, -848), (Tag1 (0, (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -847)], (0)), 100000000, 0, -846), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -845), 0), 100000000, 0, -844), 0), 100000000, 0, -843), 0, (("map.mli", 233, 9688, 9692), ("map.mli", 233, 9688, 9737), 0), 0, Tag1 ("Stdlib__Map", 27)), 0); (("fold", 1759), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1734)), 0, (0)), 100000000, 0, -842), (Tag1 (0, ((("a")), 100000000, 0, -838), (Tag1 (0, ((("acc")), 100000000, 0, -836), ((("acc")), 100000000, 0, -836), 0), 100000000, 0, -841), 0), 100000000, 0, -840), 0), 100000000, 0, -839), (Tag1 (0, (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -838)], (0)), 100000000, 0, -837), (Tag1 (0, ((("acc")), 100000000, 0, -836), ((("acc")), 100000000, 0, -836), 0), 100000000, 0, -835), 0), 100000000, 0, -834), 0), 100000000, 0, -833), 0, (("map.mli", 239, 10018, 10022), ("map.mli", 240, 10032, 10089), 0), 0, Tag1 ("Stdlib__Map", 28)), 0); (("map", 1760), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -831), ((("b")), 100000000, 0, -829), 0), 100000000, 0, -832), (Tag1 (0, (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -831)], (0)), 100000000, 0, -830), (Tag3 ((("t", 1735)), [((("b")), 100000000, 0, -829)], (0)), 100000000, 0, -828), 0), 100000000, 0, -827), 0), 100000000, 0, -826), 0, (("map.mli", 247, 10338, 10342), ("map.mli", 247, 10338, 10377), 0), 0, Tag1 ("Stdlib__Map", 29)), 0); (("mapi", 1761), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1734)), 0, (0)), 100000000, 0, -825), (Tag1 (0, ((("a")), 100000000, 0, -822), ((("b")), 100000000, 0, -820), 0), 100000000, 0, -824), 0), 100000000, 0, -823), (Tag1 (0, (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -822)], (0)), 100000000, 0, -821), (Tag3 ((("t", 1735)), [((("b")), 100000000, 0, -820)], (0)), 100000000, 0, -819), 0), 100000000, 0, -818), 0), 100000000, 0, -817), 0, (("map.mli", 254, 10698, 10702), ("map.mli", 254, 10698, 10745), 0), 0, Tag1 ("Stdlib__Map", 30)), 0); (("filter", 1762), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1734)), 0, (0)), 100000000, 0, -816), (Tag1 (0, ((("a")), 100000000, 0, -811), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -815), 0), 100000000, 0, -814), 0), 100000000, 0, -813), (Tag1 (0, (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -811)], (0)), 100000000, 0, -812), (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -811)], (0)), 100000000, 0, -810), 0), 100000000, 0, -809), 0), 100000000, 0, -808), 0, (("map.mli", 258, 10888, 10892), ("map.mli", 258, 10888, 10939), 0), 0, Tag1 ("Stdlib__Map", 31)), 0); (("filter_map", 1763), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1734)), 0, (0)), 100000000, 0, -807), (Tag1 (0, ((("a")), 100000000, 0, -803), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -801)], (0)), 100000000, 0, -806), 0), 100000000, 0, -805), 0), 100000000, 0, -804), (Tag1 (0, (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -803)], (0)), 100000000, 0, -802), (Tag3 ((("t", 1735)), [((("b")), 100000000, 0, -801)], (0)), 100000000, 0, -800), 0), 100000000, 0, -799), 0), 100000000, 0, -798), 0, (("map.mli", 266, 11264, 11268), ("map.mli", 266, 11264, 11324), 0), 0, Tag1 ("Stdlib__Map", 32)), 0); (("partition", 1764), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1734)), 0, (0)), 100000000, 0, -797), (Tag1 (0, ((("a")), 100000000, 0, -791), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -796), 0), 100000000, 0, -795), 0), 100000000, 0, -794), (Tag1 (0, (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -791)], (0)), 100000000, 0, -793), (Tag2 ([(Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -791)], (0)), 100000000, 0, -790); (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -791)], (0)), 100000000, 0, -792)]), 100000000, 0, -789), 0), 100000000, 0, -788), 0), 100000000, 0, -787), 0, (("map.mli", 285, 12005, 12009), ("map.mli", 285, 12005, 12066), 0), 0, Tag1 ("Stdlib__Map", 33)), 0); (("split", 1765), ((Tag1 (0, (Tag3 ((("key", 1734)), 0, (0)), 100000000, 0, -786), (Tag1 (0, (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -782)], (0)), 100000000, 0, -785), (Tag2 ([(Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -782)], (0)), 100000000, 0, -781); (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -782)], (0)), 100000000, 0, -783); (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -782)], (0)), 100000000, 0, -784)]), 100000000, 0, -780), 0), 100000000, 0, -779), 0), 100000000, 0, -778), 0, (("map.mli", 292, 12324, 12328), ("map.mli", 292, 12324, 12377), 0), 0, Tag1 ("Stdlib__Map", 34)), 0); (("is_empty", 1766), ((Tag1 (0, (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -777)], (0)), 100000000, 0, -776), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -775), 0), 100000000, 0, -774), 0, (("map.mli", 304, 12826, 12830), ("map.mli", 304, 12826, 12856), 0), 0, Tag1 ("Stdlib__Map", 35)), 0); (("mem", 1767), ((Tag1 (0, (Tag3 ((("key", 1734)), 0, (0)), 100000000, 0, -773), (Tag1 (0, (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -772)], (0)), 100000000, 0, -771), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -770), 0), 100000000, 0, -769), 0), 100000000, 0, -768), 0, (("map.mli", 307, 12905, 12909), ("map.mli", 307, 12905, 12937), 0), 0, Tag1 ("Stdlib__Map", 36)), 0); (("equal", 1768), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -763), (Tag1 (0, ((("a")), 100000000, 0, -763), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -767), 0), 100000000, 0, -766), 0), 100000000, 0, -765), (Tag1 (0, (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -763)], (0)), 100000000, 0, -764), (Tag1 (0, (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -763)], (0)), 100000000, 0, -762), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -761), 0), 100000000, 0, -760), 0), 100000000, 0, -759), 0), 100000000, 0, -758), 0, (("map.mli", 311, 13041, 13045), ("map.mli", 311, 13041, 13098), 0), 0, Tag1 ("Stdlib__Map", 37)), 0); (("compare", 1769), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -753), (Tag1 (0, ((("a")), 100000000, 0, -753), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -757), 0), 100000000, 0, -756), 0), 100000000, 0, -755), (Tag1 (0, (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -753)], (0)), 100000000, 0, -754), (Tag1 (0, (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -753)], (0)), 100000000, 0, -752), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -751), 0), 100000000, 0, -750), 0), 100000000, 0, -749), 0), 100000000, 0, -748), 0, (("map.mli", 317, 13349, 13353), ("map.mli", 317, 13349, 13406), 0), 0, Tag1 ("Stdlib__Map", 38)), 0); (("for_all", 1770), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1734)), 0, (0)), 100000000, 0, -747), (Tag1 (0, ((("a")), 100000000, 0, -743), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -746), 0), 100000000, 0, -745), 0), 100000000, 0, -744), (Tag1 (0, (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -743)], (0)), 100000000, 0, -742), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -741), 0), 100000000, 0, -740), 0), 100000000, 0, -739), 0, (("map.mli", 321, 13561, 13565), ("map.mli", 321, 13561, 13613), 0), 0, Tag1 ("Stdlib__Map", 39)), 0); (("exists", 1771), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1734)), 0, (0)), 100000000, 0, -738), (Tag1 (0, ((("a")), 100000000, 0, -734), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -737), 0), 100000000, 0, -736), 0), 100000000, 0, -735), (Tag1 (0, (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -734)], (0)), 100000000, 0, -733), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -732), 0), 100000000, 0, -731), 0), 100000000, 0, -730), 0, (("map.mli", 326, 13733, 13737), ("map.mli", 326, 13733, 13784), 0), 0, Tag1 ("Stdlib__Map", 40)), 0); (("to_list", 1772), ((Tag1 (0, (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -728)], (0)), 100000000, 0, -729), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("key", 1734)), 0, (0)), 100000000, 0, -727); ((("a")), 100000000, 0, -728)]), 100000000, 0, -726)], (0)), 100000000, 0, -725), 0), 100000000, 0, -724), 0, (("map.mli", 333, 13947, 13951), ("map.mli", 333, 13947, 13988), 0), 0, Tag1 ("Stdlib__Map", 41)), 0); (("of_list", 1773), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("key", 1734)), 0, (0)), 100000000, 0, -723); ((("a")), 100000000, 0, -720)]), 100000000, 0, -722)], (0)), 100000000, 0, -721), (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -720)], (0)), 100000000, 0, -719), 0), 100000000, 0, -718), 0, (("map.mli", 337, 14052, 14056), ("map.mli", 337, 14052, 14093), 0), 0, Tag1 ("Stdlib__Map", 42)), 0); (("to_seq", 1774), ((Tag1 (0, (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -716)], (0)), 100000000, 0, -717), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 1734)), 0, (0)), 100000000, 0, -715); ((("a")), 100000000, 0, -716)]), 100000000, 0, -714)], (0)), 100000000, 0, -713), 0), 100000000, 0, -712), 0, (("map.mli", 343, 14271, 14275), ("map.mli", 343, 14271, 14312), 0), 0, Tag1 ("Stdlib__Map", 43)), 0); (("to_rev_seq", 1775), ((Tag1 (0, (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -710)], (0)), 100000000, 0, -711), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 1734)), 0, (0)), 100000000, 0, -709); ((("a")), 100000000, 0, -710)]), 100000000, 0, -708)], (0)), 100000000, 0, -707), 0), 100000000, 0, -706), 0, (("map.mli", 347, 14398, 14402), ("map.mli", 347, 14398, 14443), 0), 0, Tag1 ("Stdlib__Map", 44)), 0); (("to_seq_from", 1776), ((Tag1 (0, (Tag3 ((("key", 1734)), 0, (0)), 100000000, 0, -705), (Tag1 (0, (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -703)], (0)), 100000000, 0, -704), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 1734)), 0, (0)), 100000000, 0, -702); ((("a")), 100000000, 0, -703)]), 100000000, 0, -701)], (0)), 100000000, 0, -700), 0), 100000000, 0, -699), 0), 100000000, 0, -698), 0, (("map.mli", 351, 14530, 14534), ("map.mli", 351, 14530, 14583), 0), 0, Tag1 ("Stdlib__Map", 45)), 0); (("add_seq", 1777), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 1734)), 0, (0)), 100000000, 0, -697); ((("a")), 100000000, 0, -693)]), 100000000, 0, -696)], (0)), 100000000, 0, -695), (Tag1 (0, (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -693)], (0)), 100000000, 0, -694), (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -693)], (0)), 100000000, 0, -692), 0), 100000000, 0, -691), 0), 100000000, 0, -690), 0, (("map.mli", 356, 14738, 14742), ("map.mli", 356, 14738, 14788), 0), 0, Tag1 ("Stdlib__Map", 46)), 0); (("of_seq", 1778), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 1734)), 0, (0)), 100000000, 0, -689); ((("a")), 100000000, 0, -686)]), 100000000, 0, -688)], (0)), 100000000, 0, -687), (Tag3 ((("t", 1735)), [((("a")), 100000000, 0, -686)], (0)), 100000000, 0, -685), 0), 100000000, 0, -684), 0, (("map.mli", 360, 14866, 14870), ("map.mli", 360, 14866, 14907), 0), 0, Tag1 ("Stdlib__Map", 47)), 0)]), 0, (("plugins/micromega/polynomial.mli", 295, 8678, 8680), ("plugins/micromega/polynomial.mli", 295, 8678, 8730), 0), Tag1 ("Micromega_plugin__Polynomial", 105)), 0, 0)]), 0, (("plugins/micromega/polynomial.mli", 233, 6772, 6772), ("plugins/micromega/polynomial.mli", 296, 8731, 8734), 0), Tag1 ("Micromega_plugin__Polynomial", 106)), 0, 0); (("output_cstr", 1620), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -11), (Tag1 (0, (Tag3 ((("cstr", 1611)), 0, (0)), 100000000, 0, -10), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0), 100000000, 0, -7), 0, (("plugins/micromega/polynomial.mli", 298, 8736, 8736), ("plugins/micromega/polynomial.mli", 298, 8736, 8781), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 107)), 0); (("opMult", 1621), ((Tag1 (0, (Tag3 ((("op", 1612)), 0, (0)), 100000000, 0, -6), (Tag1 (0, (Tag3 ((("op", 1612)), 0, (0)), 100000000, 0, -5), (Tag3 ((("op", 1612)), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("plugins/micromega/polynomial.mli", 299, 8782, 8782), ("plugins/micromega/polynomial.mli", 299, 8782, 8809), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 108)), 0); Tag3 (("WithProof", 1622), 0, (Tag1 ([Tag1 (("t", 1779), (0, 0, 0, 1, ((Tag2 ([(Tag2 ([(Tag3 (Tag1 ((("LinPoly", 1618)), "t"), 0, (0)), 100000000, 0, -1129); (Tag3 ((("op", 1612)), 0, (0)), 100000000, 0, -1130)]), 100000000, 0, -1128); (Tag3 (Tag1 ((("ProofFormat", 1619)), "prf_rule"), 0, (0)), 100000000, 0, -1131)]), 100000000, 0, -1127)), 0, 0, 0, 0, (("plugins/micromega/polynomial.mli", 303, 8933, 8935), ("plugins/micromega/polynomial.mli", 303, 8933, 8983), 0), 0, 0, 0, Tag1 ("Micromega_plugin__Polynomial", 109)), 1, 0); Tag2 (("InvalidProof", 1780), ((Tag3 ("exn", 7)), 0, (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Micromega_plugin__Polynomial", 110)), 2, 0); (("compare", 1781), ((Tag1 (0, (Tag3 ((("t", 1779)), 0, (0)), 100000000, 0, -1126), (Tag1 (0, (Tag3 ((("t", 1779)), 0, (0)), 100000000, 0, -1125), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1124), 0), 100000000, 0, -1123), 0), 100000000, 0, -1122), 0, (("plugins/micromega/polynomial.mli", 308, 9074, 9076), ("plugins/micromega/polynomial.mli", 308, 9074, 9103), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 111)), 0); (("annot", 1782), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1121), (Tag1 (0, (Tag3 ((("t", 1779)), 0, (0)), 100000000, 0, -1120), (Tag3 ((("t", 1779)), 0, (0)), 100000000, 0, -1119), 0), 100000000, 0, -1118), 0), 100000000, 0, -1117), 0, (("plugins/micromega/polynomial.mli", 309, 9104, 9106), ("plugins/micromega/polynomial.mli", 309, 9104, 9134), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 112)), 0); (("of_cstr", 1783), ((Tag1 (0, (Tag2 ([(Tag3 ((("cstr", 1611)), 0, (0)), 100000000, 0, -1115); (Tag3 (Tag1 ((("ProofFormat", 1619)), "prf_rule"), 0, (0)), 100000000, 0, -1116)]), 100000000, 0, -1114), (Tag3 ((("t", 1779)), 0, (0)), 100000000, 0, -1113), 0), 100000000, 0, -1112), 0, (("plugins/micromega/polynomial.mli", 310, 9135, 9137), ("plugins/micromega/polynomial.mli", 310, 9135, 9183), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 113)), 0); (("output", 1784), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -1111), (Tag1 (0, (Tag3 ((("t", 1779)), 0, (0)), 100000000, 0, -1110), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1109), 0), 100000000, 0, -1108), 0), 100000000, 0, -1107), 0, (("plugins/micromega/polynomial.mli", 313, 9272, 9274), ("plugins/micromega/polynomial.mli", 313, 9272, 9311), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 114)), 0); (("output_sys", 1785), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -1106), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 1779)), 0, (0)), 100000000, 0, -1105)], (0)), 100000000, 0, -1104), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1103), 0), 100000000, 0, -1102), 0), 100000000, 0, -1101), 0, (("plugins/micromega/polynomial.mli", 315, 9313, 9315), ("plugins/micromega/polynomial.mli", 315, 9313, 9361), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 115)), 0); (("zero", 1786), ((Tag3 ((("t", 1779)), 0, (0)), 100000000, 0, -1100), 0, (("plugins/micromega/polynomial.mli", 318, 9410, 9412), ("plugins/micromega/polynomial.mli", 318, 9410, 9424), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 116)), 0); (("const", 1787), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -1099), (Tag3 ((("t", 1779)), 0, (0)), 100000000, 0, -1098), 0), 100000000, 0, -1097), 0, (("plugins/micromega/polynomial.mli", 321, 9477, 9479), ("plugins/micromega/polynomial.mli", 321, 9477, 9499), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 117)), 0); (("product", 1788), ((Tag1 (0, (Tag3 ((("t", 1779)), 0, (0)), 100000000, 0, -1096), (Tag1 (0, (Tag3 ((("t", 1779)), 0, (0)), 100000000, 0, -1095), (Tag3 ((("t", 1779)), 0, (0)), 100000000, 0, -1094), 0), 100000000, 0, -1093), 0), 100000000, 0, -1092), 0, (("plugins/micromega/polynomial.mli", 325, 9581, 9583), ("plugins/micromega/polynomial.mli", 325, 9581, 9608), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 118)), 0); (("addition", 1789), ((Tag1 (0, (Tag3 ((("t", 1779)), 0, (0)), 100000000, 0, -1091), (Tag1 (0, (Tag3 ((("t", 1779)), 0, (0)), 100000000, 0, -1090), (Tag3 ((("t", 1779)), 0, (0)), 100000000, 0, -1089), 0), 100000000, 0, -1088), 0), 100000000, 0, -1087), 0, (("plugins/micromega/polynomial.mli", 329, 9691, 9693), ("plugins/micromega/polynomial.mli", 329, 9691, 9719), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 119)), 0); (("neg", 1790), ((Tag1 (0, (Tag3 ((("t", 1779)), 0, (0)), 100000000, 0, -1086), (Tag3 ((("t", 1779)), 0, (0)), 100000000, 0, -1085), 0), 100000000, 0, -1084), 0, (("plugins/micromega/polynomial.mli", 335, 9841, 9843), ("plugins/micromega/polynomial.mli", 335, 9841, 9859), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 120)), 0); (("mult", 1791), ((Tag1 (0, (Tag3 (Tag1 ((("LinPoly", 1618)), "t"), 0, (0)), 100000000, 0, -1083), (Tag1 (0, (Tag3 ((("t", 1779)), 0, (0)), 100000000, 0, -1082), (Tag3 ((("t", 1779)), 0, (0)), 100000000, 0, -1081), 0), 100000000, 0, -1080), 0), 100000000, 0, -1079), 0, (("plugins/micromega/polynomial.mli", 340, 10014, 10016), ("plugins/micromega/polynomial.mli", 340, 10014, 10046), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 121)), 0); (("cutting_plane", 1792), ((Tag1 (0, (Tag3 ((("t", 1779)), 0, (0)), 100000000, 0, -1078), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 1779)), 0, (0)), 100000000, 0, -1077)], (0)), 100000000, 0, -1076), 0), 100000000, 0, -1075), 0, (("plugins/micromega/polynomial.mli", 343, 10137, 10139), ("plugins/micromega/polynomial.mli", 343, 10137, 10172), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 122)), 0); (("linear_pivot", 1793), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 1779)), 0, (0)), 100000000, 0, -1074)], (0)), 100000000, 0, -1073), (Tag1 (0, (Tag3 ((("t", 1779)), 0, (0)), 100000000, 0, -1072), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "Vect"), "var"), 0, (0)), 100000000, 0, -1071), (Tag1 (0, (Tag3 ((("t", 1779)), 0, (0)), 100000000, 0, -1070), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 1779)), 0, (0)), 100000000, 0, -1069)], (0)), 100000000, 0, -1068), 0), 100000000, 0, -1067), 0), 100000000, 0, -1066), 0), 100000000, 0, -1065), 0), 100000000, 0, -1064), 0, (("plugins/micromega/polynomial.mli", 351, 10476, 10478), ("plugins/micromega/polynomial.mli", 351, 10476, 10537), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 123)), 0); (("simple_pivot", 1794), ((Tag1 (0, (Tag2 ([(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -1062); (Tag3 ((("var", 1607)), 0, (0)), 100000000, 0, -1063)]), 100000000, 0, -1061), (Tag1 (0, (Tag3 ((("t", 1779)), 0, (0)), 100000000, 0, -1060), (Tag1 (0, (Tag3 ((("t", 1779)), 0, (0)), 100000000, 0, -1059), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 1779)), 0, (0)), 100000000, 0, -1058)], (0)), 100000000, 0, -1057), 0), 100000000, 0, -1056), 0), 100000000, 0, -1055), 0), 100000000, 0, -1054), 0, (("plugins/micromega/polynomial.mli", 355, 10669, 10671), ("plugins/micromega/polynomial.mli", 355, 10669, 10721), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 124)), 0); (("sort", 1795), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 1779)), 0, (0)), 100000000, 0, -1053)], (0)), 100000000, 0, -1052), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1047); (Tag2 ([(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -1049); (Tag3 ((("var", 1607)), 0, (0)), 100000000, 0, -1050)]), 100000000, 0, -1048)]), 100000000, 0, -1046); (Tag3 ((("t", 1779)), 0, (0)), 100000000, 0, -1051)]), 100000000, 0, -1045)], (0)), 100000000, 0, -1044), 0), 100000000, 0, -1043), 0, (("plugins/micromega/polynomial.mli", 358, 10853, 10855), ("plugins/micromega/polynomial.mli", 358, 10853, 10906), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 125)), 0); (("subst", 1796), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 1779)), 0, (0)), 100000000, 0, -1042)], (0)), 100000000, 0, -1041), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 1779)), 0, (0)), 100000000, 0, -1040)], (0)), 100000000, 0, -1039), 0), 100000000, 0, -1038), 0, (("plugins/micromega/polynomial.mli", 369, 11302, 11304), ("plugins/micromega/polynomial.mli", 369, 11302, 11332), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 126)), 0); (("subst_constant", 1797), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1037), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 1779)), 0, (0)), 100000000, 0, -1036)], (0)), 100000000, 0, -1035), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 1779)), 0, (0)), 100000000, 0, -1034)], (0)), 100000000, 0, -1033), 0), 100000000, 0, -1032), 0), 100000000, 0, -1031), 0, (("plugins/micromega/polynomial.mli", 373, 11507, 11509), ("plugins/micromega/polynomial.mli", 373, 11507, 11554), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 127)), 0); (("subst1", 1798), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 1779)), 0, (0)), 100000000, 0, -1030)], (0)), 100000000, 0, -1029), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 1779)), 0, (0)), 100000000, 0, -1028)], (0)), 100000000, 0, -1027), 0), 100000000, 0, -1026), 0, (("plugins/micromega/polynomial.mli", 376, 11609, 11611), ("plugins/micromega/polynomial.mli", 376, 11609, 11640), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 128)), 0); (("saturate_subst", 1799), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1025), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 1779)), 0, (0)), 100000000, 0, -1024)], (0)), 100000000, 0, -1023), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 1779)), 0, (0)), 100000000, 0, -1022)], (0)), 100000000, 0, -1021), 0), 100000000, 0, -1020), 0), 100000000, 0, -1019), 0, (("plugins/micromega/polynomial.mli", 378, 11642, 11644), ("plugins/micromega/polynomial.mli", 378, 11642, 11689), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 129)), 0); (("is_substitution", 1800), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1018), (Tag1 (0, (Tag3 ((("t", 1779)), 0, (0)), 100000000, 0, -1017), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("var", 1607)), 0, (0)), 100000000, 0, -1016)], (0)), 100000000, 0, -1015), 0), 100000000, 0, -1014), 0), 100000000, 0, -1013), 0, (("plugins/micromega/polynomial.mli", 379, 11690, 11692), ("plugins/micromega/polynomial.mli", 379, 11690, 11737), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 130)), 0)]), 0, (("plugins/micromega/polynomial.mli", 302, 8910, 8910), ("plugins/micromega/polynomial.mli", 380, 11738, 11741), 0), Tag1 ("Micromega_plugin__Polynomial", 131)), 0, 0); Tag3 (("BoundWithProof", 1623), 0, (Tag1 ([Tag1 (("t", 1801), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("plugins/micromega/polynomial.mli", 383, 11771, 11773), ("plugins/micromega/polynomial.mli", 383, 11771, 11779), 0), 0, 0, 0, Tag1 ("Micromega_plugin__Polynomial", 132)), 1, 0); (("compare", 1802), ((Tag1 (0, (Tag3 ((("t", 1801)), 0, (0)), 100000000, 0, -1152), (Tag1 (0, (Tag3 ((("t", 1801)), 0, (0)), 100000000, 0, -1151), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1150), 0), 100000000, 0, -1149), 0), 100000000, 0, -1148), 0, (("plugins/micromega/polynomial.mli", 385, 11781, 11783), ("plugins/micromega/polynomial.mli", 385, 11781, 11810), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 133)), 0); (("make", 1803), ((Tag1 (0, (Tag3 (Tag1 ((("WithProof", 1622)), "t"), 0, (0)), 100000000, 0, -1147), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 1801)), 0, (0)), 100000000, 0, -1146)], (0)), 100000000, 0, -1145), 0), 100000000, 0, -1144), 0, (("plugins/micromega/polynomial.mli", 386, 11811, 11813), ("plugins/micromega/polynomial.mli", 386, 11811, 11847), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 134)), 0); (("mul_bound", 1804), ((Tag1 (0, (Tag3 ((("t", 1801)), 0, (0)), 100000000, 0, -1143), (Tag1 (0, (Tag3 ((("t", 1801)), 0, (0)), 100000000, 0, -1142), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 1801)), 0, (0)), 100000000, 0, -1141)], (0)), 100000000, 0, -1140), 0), 100000000, 0, -1139), 0), 100000000, 0, -1138), 0, (("plugins/micromega/polynomial.mli", 387, 11848, 11850), ("plugins/micromega/polynomial.mli", 387, 11848, 11884), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 135)), 0); (("bound", 1805), ((Tag1 (0, (Tag3 ((("t", 1801)), 0, (0)), 100000000, 0, -1137), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "Vect"), "Bound"), "t"), 0, (0)), 100000000, 0, -1136), 0), 100000000, 0, -1135), 0, (("plugins/micromega/polynomial.mli", 388, 11885, 11887), ("plugins/micromega/polynomial.mli", 388, 11885, 11916), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 136)), 0); (("proof", 1806), ((Tag1 (0, (Tag3 ((("t", 1801)), 0, (0)), 100000000, 0, -1134), (Tag3 (Tag1 ((("WithProof", 1622)), "t"), 0, (0)), 100000000, 0, -1133), 0), 100000000, 0, -1132), 0, (("plugins/micromega/polynomial.mli", 389, 11917, 11919), ("plugins/micromega/polynomial.mli", 389, 11917, 11947), 0), 0, Tag1 ("Micromega_plugin__Polynomial", 137)), 0)]), 0, (("plugins/micromega/polynomial.mli", 382, 11743, 11743), ("plugins/micromega/polynomial.mli", 390, 11948, 11951), 0), Tag1 ("Micromega_plugin__Polynomial", 138)), 0, 0)], "Micromega_plugin__Polynomial", [("Micromega_plugin__Polynomial", ("Z\170\141)o\131\204\227r\227\158<\205\174U\169")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Micromega_plugin__Vect", ("cim\150\030\144w\144\158\152|\201Px\127|")); ("Micromega_plugin__NumCompat", ("\167R)~D\225*6\249\146\173\\\233F6m")); ("Micromega_plugin__Mutils", ("\248\218\232\173\201#\005!\224\006\137\197\223\134\015\237")); ("Micromega_plugin__Micromega", ("\144\132\00120\253\252S\131\160\152\240\207\228\014\024")); ("Micromega_plugin", ("-|C6\194\020\193\204\234h\242\238\191\214'\193")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t"))], [(0)])

  end

type lexbuf
val init_lexer : ?buf:Buffer.t -> Lexing.lexbuf -> lexbuf
val tag_error : typename:string -> lexbuf -> 'a
val read_int : lexbuf -> int
val read_bounded_int : ?min:int -> max:int -> lexbuf -> int
val read_tag_1 : int -> lexbuf -> int
val read_tag_2 : int -> int -> lexbuf -> int
val read_int32 : lexbuf -> int32
val read_int64 : lexbuf -> int64
val read_number : lexbuf -> float
val read_string : lexbuf -> string
val read_case : lexbuf -> [ `Cst of int | `NCst of int ]
val read_vcase : lexbuf -> [ `Cst of int | `NCst of int ]
val read_comma : lexbuf -> unit
val read_lbracket : lexbuf -> unit
val read_rbracket : lexbuf -> unit
("DEBUG:rule", [Tag1 (("lexbuf", 351), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("lib/deriving_json/deriving_Json_lexer.mli", 30, 1435, 1435), ("lib/deriving_json/deriving_Json_lexer.mli", 30, 1435, 1446), 0), 0, 0, 0, Tag1 ("Deriving_Json_lexer", 0)), 1, 0); (("init_lexer", 352), ((Tag1 (Tag1 ("buf"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Buffer"), "t"), 0, (0)), 100000000, 0, -72)], (0)), 100000000, 0, -71), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -70), (Tag3 ((("lexbuf", 351)), 0, (0)), 100000000, 0, -69), 0), 100000000, 0, -68), 0), 100000000, 0, -67), 0, (("lib/deriving_json/deriving_Json_lexer.mli", 32, 1448, 1448), ("lib/deriving_json/deriving_Json_lexer.mli", 32, 1448, 1505), 0), 0, Tag1 ("Deriving_Json_lexer", 1)), 0); (("tag_error", 353), ((Tag1 (("typename"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -66), (Tag1 (0, (Tag3 ((("lexbuf", 351)), 0, (0)), 100000000, 0, -65), ((("a")), 100000000, 0, -64), 0), 100000000, 0, -63), 0), 100000000, 0, -62), 0, (("lib/deriving_json/deriving_Json_lexer.mli", 35, 1544, 1544), ("lib/deriving_json/deriving_Json_lexer.mli", 35, 1544, 1591), 0), 0, Tag1 ("Deriving_Json_lexer", 2)), 0); (("read_int", 354), ((Tag1 (0, (Tag3 ((("lexbuf", 351)), 0, (0)), 100000000, 0, -61), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -60), 0), 100000000, 0, -59), 0, (("lib/deriving_json/deriving_Json_lexer.mli", 37, 1593, 1593), ("lib/deriving_json/deriving_Json_lexer.mli", 37, 1593, 1621), 0), 0, Tag1 ("Deriving_Json_lexer", 3)), 0); (("read_bounded_int", 355), ((Tag1 (Tag1 ("min"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -58)], (0)), 100000000, 0, -57), (Tag1 (("max"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -56), (Tag1 (0, (Tag3 ((("lexbuf", 351)), 0, (0)), 100000000, 0, -55), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -54), 0), 100000000, 0, -53), 0), 100000000, 0, -52), 0), 100000000, 0, -51), 0, (("lib/deriving_json/deriving_Json_lexer.mli", 39, 1623, 1623), ("lib/deriving_json/deriving_Json_lexer.mli", 39, 1623, 1682), 0), 0, Tag1 ("Deriving_Json_lexer", 4)), 0); (("read_tag_1", 356), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -50), (Tag1 (0, (Tag3 ((("lexbuf", 351)), 0, (0)), 100000000, 0, -49), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -48), 0), 100000000, 0, -47), 0), 100000000, 0, -46), 0, (("lib/deriving_json/deriving_Json_lexer.mli", 41, 1684, 1684), ("lib/deriving_json/deriving_Json_lexer.mli", 41, 1684, 1721), 0), 0, Tag1 ("Deriving_Json_lexer", 5)), 0); (("read_tag_2", 357), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -45), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -44), (Tag1 (0, (Tag3 ((("lexbuf", 351)), 0, (0)), 100000000, 0, -43), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -42), 0), 100000000, 0, -41), 0), 100000000, 0, -40), 0), 100000000, 0, -39), 0, (("lib/deriving_json/deriving_Json_lexer.mli", 43, 1723, 1723), ("lib/deriving_json/deriving_Json_lexer.mli", 43, 1723, 1767), 0), 0, Tag1 ("Deriving_Json_lexer", 6)), 0); (("read_int32", 358), ((Tag1 (0, (Tag3 ((("lexbuf", 351)), 0, (0)), 100000000, 0, -38), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -37), 0), 100000000, 0, -36), 0, (("lib/deriving_json/deriving_Json_lexer.mli", 45, 1769, 1769), ("lib/deriving_json/deriving_Json_lexer.mli", 45, 1769, 1801), 0), 0, Tag1 ("Deriving_Json_lexer", 7)), 0); (("read_int64", 359), ((Tag1 (0, (Tag3 ((("lexbuf", 351)), 0, (0)), 100000000, 0, -35), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -34), 0), 100000000, 0, -33), 0, (("lib/deriving_json/deriving_Json_lexer.mli", 47, 1803, 1803), ("lib/deriving_json/deriving_Json_lexer.mli", 47, 1803, 1835), 0), 0, Tag1 ("Deriving_Json_lexer", 8)), 0); (("read_number", 360), ((Tag1 (0, (Tag3 ((("lexbuf", 351)), 0, (0)), 100000000, 0, -32), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -31), 0), 100000000, 0, -30), 0, (("lib/deriving_json/deriving_Json_lexer.mli", 49, 1837, 1837), ("lib/deriving_json/deriving_Json_lexer.mli", 49, 1837, 1870), 0), 0, Tag1 ("Deriving_Json_lexer", 9)), 0); (("read_string", 361), ((Tag1 (0, (Tag3 ((("lexbuf", 351)), 0, (0)), 100000000, 0, -29), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -28), 0), 100000000, 0, -27), 0, (("lib/deriving_json/deriving_Json_lexer.mli", 51, 1872, 1872), ("lib/deriving_json/deriving_Json_lexer.mli", 51, 1872, 1906), 0), 0, Tag1 ("Deriving_Json_lexer", 10)), 0); (("read_case", 362), ((Tag1 (0, (Tag3 ((("lexbuf", 351)), 0, (0)), 100000000, 0, -26), (Tag8 (([("Cst", (((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -25)))); ("NCst", (((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -24))))], (0, 100000000, 0, -23), 1, 0, 0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0, (("lib/deriving_json/deriving_Json_lexer.mli", 53, 1908, 1908), ("lib/deriving_json/deriving_Json_lexer.mli", 53, 1908, 1964), 0), 0, Tag1 ("Deriving_Json_lexer", 11)), 0); (("read_vcase", 363), ((Tag1 (0, (Tag3 ((("lexbuf", 351)), 0, (0)), 100000000, 0, -20), (Tag8 (([("Cst", (((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -19)))); ("NCst", (((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -18))))], (0, 100000000, 0, -17), 1, 0, 0)), 100000000, 0, -16), 0), 100000000, 0, -15), 0, (("lib/deriving_json/deriving_Json_lexer.mli", 55, 1966, 1966), ("lib/deriving_json/deriving_Json_lexer.mli", 55, 1966, 2023), 0), 0, Tag1 ("Deriving_Json_lexer", 12)), 0); (("read_comma", 364), ((Tag1 (0, (Tag3 ((("lexbuf", 351)), 0, (0)), 100000000, 0, -14), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -13), 0), 100000000, 0, -12), 0, (("lib/deriving_json/deriving_Json_lexer.mli", 57, 2025, 2025), ("lib/deriving_json/deriving_Json_lexer.mli", 57, 2025, 2056), 0), 0, Tag1 ("Deriving_Json_lexer", 13)), 0); (("read_lbracket", 365), ((Tag1 (0, (Tag3 ((("lexbuf", 351)), 0, (0)), 100000000, 0, -11), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10), 0), 100000000, 0, -9), 0, (("lib/deriving_json/deriving_Json_lexer.mli", 59, 2058, 2058), ("lib/deriving_json/deriving_Json_lexer.mli", 59, 2058, 2092), 0), 0, Tag1 ("Deriving_Json_lexer", 14)), 0); (("read_rbracket", 366), ((Tag1 (0, (Tag3 ((("lexbuf", 351)), 0, (0)), 100000000, 0, -8), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7), 0), 100000000, 0, -6), 0, (("lib/deriving_json/deriving_Json_lexer.mli", 61, 2094, 2094), ("lib/deriving_json/deriving_Json_lexer.mli", 61, 2094, 2128), 0), 0, Tag1 ("Deriving_Json_lexer", 15)), 0); (("read_comma_or_rbracket", 367), ((Tag1 (0, (Tag3 ((("lexbuf", 351)), 0, (0)), 100000000, 0, -5), (Tag8 (([("Comma", (0)); ("RBracket", (0))], (0, 100000000, 0, -4), 1, 0, 0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("lib/deriving_json/deriving_Json_lexer.mli", 63, 2130, 2130), ("lib/deriving_json/deriving_Json_lexer.mli", 63, 2130, 2191), 0), 0, Tag1 ("Deriving_Json_lexer", 16)), 0)], "Deriving_Json_lexer", [("Deriving_Json_lexer", ("\158i\181v\164\187\000\214@\2064#\003(FN")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
val read_comma_or_rbracket : lexbuf -> [ `Comma | `RBracket ]

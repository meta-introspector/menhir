exception Unify of Errortrace.unification_error
exception Equality of Errortrace.equality_error
exception Moregen of Errortrace.moregen_error
exception Subtype of Errortrace.Subtype.error
exception Escape of Types.type_expr Errortrace.escape
exception Tags of Asttypes.label * Asttypes.label
exception Cannot_expand
exception Cannot_apply
exception Matches_failure of Env.t * Errortrace.unification_error
exception Incompatible
val with_local_level : ?post:('a -> unit) -> (unit -> 'a) -> 'a
val with_local_level_if : bool -> (unit -> 'a) -> post:('a -> unit) -> 'a
val with_local_level_iter : (unit -> 'a * 'b list) -> post:('b -> unit) -> 'a
val with_local_level_iter_if :
  bool -> (unit -> 'a * 'b list) -> post:('b -> unit) -> 'a
val with_level : level:int -> (unit -> 'a) -> 'a
val with_level_if : bool -> level:int -> (unit -> 'a) -> 'a
val with_local_level_if_principal : (unit -> 'a) -> post:('a -> unit) -> 'a
val with_local_level_iter_if_principal :
  (unit -> 'a * 'b list) -> post:('b -> unit) -> 'a
val with_local_level_for_class : ?post:('a -> unit) -> (unit -> 'a) -> 'a
val with_raised_nongen_level : (unit -> 'a) -> 'a
val reset_global_level : unit -> unit
val increase_global_level : unit -> int
val restore_global_level : int -> unit
val create_scope : unit -> int
val newty : Types.type_desc -> Types.type_expr
val new_scoped_ty : int -> Types.type_desc -> Types.type_expr
val newvar : ?name:string -> unit -> Types.type_expr
val newvar2 : ?name:string -> int -> Types.type_expr
val new_global_var : ?name:string -> unit -> Types.type_expr
val newobj : Types.type_expr -> Types.type_expr
val newconstr : Path.t -> Types.type_expr list -> Types.type_expr
val none : Types.type_expr
val object_fields : Types.type_expr -> Types.type_expr
val flatten_fields :
  Types.type_expr ->
  (string * Types.field_kind * Types.type_expr) list * Types.type_expr
val associate_fields :
  (string * Types.field_kind * Types.type_expr) list ->
  (string * Types.field_kind * Types.type_expr) list ->
  (string * Types.field_kind * Types.type_expr * Types.field_kind *
   Types.type_expr)
  list * (string * Types.field_kind * Types.type_expr) list *
  (string * Types.field_kind * Types.type_expr) list
val opened_object : Types.type_expr -> bool
val set_object_name :
  Ident.t -> Types.type_expr list -> Types.type_expr -> unit
val remove_object_name : Types.type_expr -> unit
val find_cltype_for_path :
  Env.t -> Path.t -> Types.type_declaration * Types.type_expr
val sort_row_fields :
  (Asttypes.label * Types.row_field) list ->
  (Asttypes.label * Types.row_field) list
val merge_row_fields :
  (Asttypes.label * Types.row_field) list ->
  (Asttypes.label * Types.row_field) list ->
  (Asttypes.label * Types.row_field) list *
  (Asttypes.label * Types.row_field) list *
  (Asttypes.label * Types.row_field * Types.row_field) list
val filter_row_fields :
  bool ->
  (Asttypes.label * Types.row_field) list ->
  (Asttypes.label * Types.row_field) list
val generalize : Types.type_expr -> unit
val lower_contravariant : Env.t -> Types.type_expr -> unit
val lower_variables_only : Env.t -> int -> Types.type_expr -> unit
val enforce_current_level : Env.t -> Types.type_expr -> unit
val generalize_structure : Types.type_expr -> unit
val generalize_class_type : Types.class_type -> unit
val generalize_class_type_structure : Types.class_type -> unit
val generalize_class_signature_spine : Env.t -> Types.class_signature -> unit
val correct_levels : Types.type_expr -> Types.type_expr
val limited_generalize : Types.type_expr -> Types.type_expr -> unit
val limited_generalize_class_type :
  Types.type_expr -> Types.class_type -> unit
val fully_generic : Types.type_expr -> bool
val check_scope_escape : Env.t -> int -> Types.type_expr -> unit
val instance : ?partial:bool -> Types.type_expr -> Types.type_expr
val generic_instance : Types.type_expr -> Types.type_expr
val instance_list : Types.type_expr list -> Types.type_expr list
val new_local_type :
  ?loc:Location.t ->
  ?manifest_and_scope:Types.type_expr * int -> unit -> Types.type_declaration
val existential_name :
  Types.constructor_description -> Types.type_expr -> string
type existential_treatment =
    Keep_existentials_flexible
  | Make_existentials_abstract of { env : Env.t ref; scope : int; }
val instance_constructor :
  existential_treatment ->
  Types.constructor_description ->
  Types.type_expr list * Types.type_expr * Types.type_expr list
val instance_parameterized_type :
  ?keep_names:bool ->
  Types.type_expr list ->
  Types.type_expr -> Types.type_expr list * Types.type_expr
val instance_declaration : Types.type_declaration -> Types.type_declaration
val generic_instance_declaration :
  Types.type_declaration -> Types.type_declaration
val instance_class :
  Types.type_expr list ->
  Types.class_type -> Types.type_expr list * Types.class_type
val instance_poly :
  ?keep_names:bool ->
  bool ->
  Types.type_expr list ->
  Types.type_expr -> Types.type_expr list * Types.type_expr
val polyfy :
  Env.t -> Types.type_expr -> Types.type_expr list -> Types.type_expr * bool
val instance_label :
  bool ->
  Types.label_description ->
  Types.type_expr list * Types.type_expr * Types.type_expr
val apply :
  ?use_current_level:bool ->
  Env.t ->
  Types.type_expr list ->
  Types.type_expr -> Types.type_expr list -> Types.type_expr
val try_expand_once_opt : Env.t -> Types.type_expr -> Types.type_expr
val try_expand_safe_opt : Env.t -> Types.type_expr -> Types.type_expr
val expand_head_once : Env.t -> Types.type_expr -> Types.type_expr
val expand_head : Env.t -> Types.type_expr -> Types.type_expr
val expand_head_opt : Env.t -> Types.type_expr -> Types.type_expr
val expanded_diff :
  Env.t ->
  got:Types.type_expr ->
  expected:Types.type_expr ->
  (Errortrace.expanded_type, 'variant) Errortrace.elt
val unexpanded_diff :
  got:Types.type_expr ->
  expected:Types.type_expr ->
  (Errortrace.expanded_type, 'variant) Errortrace.elt
val full_expand :
  may_forget_scope:bool -> Env.t -> Types.type_expr -> Types.type_expr
type typedecl_extraction_result =
    Typedecl of Path.t * Path.t * Types.type_declaration
  | Has_no_typedecl
  | May_have_typedecl
val extract_concrete_typedecl :
  Env.t -> Types.type_expr -> typedecl_extraction_result
val unify : Env.t -> Types.type_expr -> Types.type_expr -> unit
val unify_gadt :
  equations_level:int ->
  allow_recursive_equations:bool ->
  Env.t ref -> Types.type_expr -> Types.type_expr -> Btype.TypePairs.t
val unify_var : Env.t -> Types.type_expr -> Types.type_expr -> unit
val filter_arrow :
  Env.t ->
  Types.type_expr -> Asttypes.arg_label -> Types.type_expr * Types.type_expr
val filter_method : Env.t -> string -> Types.type_expr -> Types.type_expr
val occur_in : Env.t -> Types.type_expr -> Types.type_expr -> bool
val deep_occur : Types.type_expr -> Types.type_expr -> bool
val moregeneral : Env.t -> bool -> Types.type_expr -> Types.type_expr -> unit
val is_moregeneral :
  Env.t -> bool -> Types.type_expr -> Types.type_expr -> bool
val rigidify : Types.type_expr -> Types.type_expr list
val all_distinct_vars : Env.t -> Types.type_expr list -> bool
val matches :
  expand_error_trace:bool ->
  Env.t -> Types.type_expr -> Types.type_expr -> unit
val does_match : Env.t -> Types.type_expr -> Types.type_expr -> bool
val reify_univars : Env.t -> Types.type_expr -> Types.type_expr
type filter_arrow_failure =
    Unification_error of Errortrace.unification_error
  | Label_mismatch of { got : Asttypes.arg_label;
      expected : Asttypes.arg_label; expected_type : Types.type_expr;
    }
  | Not_a_function
exception Filter_arrow_failed of filter_arrow_failure
type filter_method_failure =
    Unification_error of Errortrace.unification_error
  | Not_a_method
  | Not_an_object of Types.type_expr
exception Filter_method_failed of filter_method_failure
type class_match_failure =
    CM_Virtual_class
  | CM_Parameter_arity_mismatch of int * int
  | CM_Type_parameter_mismatch of Env.t * Errortrace.equality_error
  | CM_Class_type_mismatch of Env.t * Types.class_type * Types.class_type
  | CM_Parameter_mismatch of Env.t * Errortrace.moregen_error
  | CM_Val_type_mismatch of string * Env.t * Errortrace.comparison_error
  | CM_Meth_type_mismatch of string * Env.t * Errortrace.comparison_error
  | CM_Non_mutable_value of string
  | CM_Non_concrete_value of string
  | CM_Missing_value of string
  | CM_Missing_method of string
  | CM_Hide_public of string
  | CM_Hide_virtual of string * string
  | CM_Public_method of string
  | CM_Private_method of string
  | CM_Virtual_method of string
val match_class_types :
  ?trace:bool ->
  Env.t -> Types.class_type -> Types.class_type -> class_match_failure list
val equal :
  Env.t -> bool -> Types.type_expr list -> Types.type_expr list -> unit
val is_equal :
  Env.t -> bool -> Types.type_expr list -> Types.type_expr list -> bool
val equal_private :
  Env.t ->
  Types.type_expr list ->
  Types.type_expr -> Types.type_expr list -> Types.type_expr -> unit
val match_class_declarations :
  Env.t ->
  Types.type_expr list ->
  Types.class_type ->
  Types.type_expr list -> Types.class_type -> class_match_failure list
val enlarge_type : Env.t -> Types.type_expr -> Types.type_expr * bool
val subtype : Env.t -> Types.type_expr -> Types.type_expr -> unit -> unit
val new_class_signature : unit -> Types.class_signature
val add_dummy_method : Env.t -> scope:int -> Types.class_signature -> unit
type add_method_failure =
    Unexpected_method
  | Type_mismatch of Errortrace.unification_error
exception Add_method_failed of add_method_failure
val add_method :
  Env.t ->
  Asttypes.label ->
  Asttypes.private_flag ->
  Asttypes.virtual_flag -> Types.type_expr -> Types.class_signature -> unit
type add_instance_variable_failure =
    Mutability_mismatch of Asttypes.mutable_flag
  | Type_mismatch of Errortrace.unification_error
exception Add_instance_variable_failed of add_instance_variable_failure
val add_instance_variable :
  strict:bool ->
  Env.t ->
  Asttypes.label ->
  Asttypes.mutable_flag ->
  Asttypes.virtual_flag -> Types.type_expr -> Types.class_signature -> unit
type inherit_class_signature_failure =
    Self_type_mismatch of Errortrace.unification_error
  | Method of Asttypes.label * add_method_failure
  | Instance_variable of Asttypes.label * add_instance_variable_failure
exception Inherit_class_signature_failed of inherit_class_signature_failure
val inherit_class_signature :
  strict:bool ->
  Env.t -> Types.class_signature -> Types.class_signature -> unit
val update_class_signature :
  Env.t -> Types.class_signature -> Asttypes.label list * Asttypes.label list
val hide_private_methods : Env.t -> Types.class_signature -> unit
val close_class_signature : Env.t -> Types.class_signature -> bool
exception Nondep_cannot_erase of Ident.t
val nondep_type : Env.t -> Ident.t list -> Types.type_expr -> Types.type_expr
val nondep_type_decl :
  Env.t ->
  Ident.t list -> bool -> Types.type_declaration -> Types.type_declaration
val nondep_extension_constructor :
  Env.t ->
  Ident.t list -> Types.extension_constructor -> Types.extension_constructor
val nondep_class_declaration :
  Env.t -> Ident.t list -> Types.class_declaration -> Types.class_declaration
val nondep_cltype_declaration :
  Env.t ->
  Ident.t list ->
  Types.class_type_declaration -> Types.class_type_declaration
val is_contractive : Env.t -> Path.t -> bool
val normalize_type : Types.type_expr -> unit
val nongen_vars_in_schema :
  Env.t -> Types.type_expr -> Btype.TypeSet.t option
val nongen_vars_in_class_declaration :
  Types.class_declaration -> Btype.TypeSet.t option
type variable_kind = Row_variable | Type_variable
type closed_class_failure = {
  free_variable : Types.type_expr * variable_kind;
  meth : string;
  meth_ty : Types.type_expr;
}
val free_variables : ?env:Env.t -> Types.type_expr -> Types.type_expr list
val closed_type_decl : Types.type_declaration -> Types.type_expr option
val closed_extension_constructor :
  Types.extension_constructor -> Types.type_expr option
val closed_class :
  Types.type_expr list ->
  Types.class_signature -> closed_class_failure option
val unalias : Types.type_expr -> Types.type_expr
val arity : Types.type_expr -> int
val collapse_conj_params : Env.t -> Types.type_expr list -> unit
val get_current_level : unit -> int
val wrap_trace_gadt_instances : Env.t -> ('a -> 'b) -> 'a -> 'b
val immediacy : Env.t -> Types.type_expr -> Type_immediacy.t
val package_subtype :
  (Env.t ->
   Path.t ->
   (Longident.t * Types.type_expr) list ->
   Path.t -> (Longident.t * Types.type_expr) list -> bool)
  ref("DEBUG:rule", [Tag2 (("Unify", 1046), ((Tag3 ("exn", 7)), 0, ([(Tag3 (Tag1 ((Tag2 ("Errortrace")), "unification_error"), 0, (0)), 100000000, 0, -907)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Ctype", 2)), 2, 0); Tag2 (("Equality", 1047), ((Tag3 ("exn", 7)), 0, ([(Tag3 (Tag1 ((Tag2 ("Errortrace")), "equality_error"), 0, (0)), 100000000, 0, -906)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Ctype", 3)), 2, 0); Tag2 (("Moregen", 1048), ((Tag3 ("exn", 7)), 0, ([(Tag3 (Tag1 ((Tag2 ("Errortrace")), "moregen_error"), 0, (0)), 100000000, 0, -905)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Ctype", 4)), 2, 0); Tag2 (("Subtype", 1049), ((Tag3 ("exn", 7)), 0, ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Errortrace")), "Subtype"), "error"), 0, (0)), 100000000, 0, -904)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Ctype", 5)), 2, 0); Tag2 (("Escape", 1050), ((Tag3 ("exn", 7)), 0, ([(Tag3 (Tag1 ((Tag2 ("Errortrace")), "escape"), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -903)], (0)), 100000000, 0, -902)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Ctype", 6)), 2, 0); Tag2 (("Tags", 1051), ((Tag3 ("exn", 7)), 0, ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "label"), 0, (0)), 100000000, 0, -900); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "label"), 0, (0)), 100000000, 0, -901)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Ctype", 7)), 2, 0); Tag2 (("Cannot_expand", 1052), ((Tag3 ("exn", 7)), 0, (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Ctype", 8)), 2, 0); Tag2 (("Cannot_apply", 1053), ((Tag3 ("exn", 7)), 0, (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Ctype", 9)), 2, 0); Tag2 (("Matches_failure", 1054), ((Tag3 ("exn", 7)), 0, ([(Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -898); (Tag3 (Tag1 ((Tag2 ("Errortrace")), "unification_error"), 0, (0)), 100000000, 0, -899)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Ctype", 10)), 2, 0); Tag2 (("Incompatible", 1055), ((Tag3 ("exn", 7)), 0, (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Ctype", 11)), 2, 0); (("with_local_level", 1056), ((Tag1 (Tag1 ("post"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, ((("a")), 100000000, 0, -892), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -897), 0), 100000000, 0, -896)], (0)), 100000000, 0, -895), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -894), ((("a")), 100000000, 0, -892), 0), 100000000, 0, -893), ((("a")), 100000000, 0, -892), 0), 100000000, 0, -891), 0), 100000000, 0, -890), 0, (("typing/ctype.mli", 38, 1729, 1729), ("typing/ctype.mli", 38, 1729, 1791), 0), 0, Tag1 ("Ctype", 12)), 0); (("with_local_level_if", 1057), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -889), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -888), ((("a")), 100000000, 0, -884), 0), 100000000, 0, -887), (Tag1 (("post"), (Tag1 (0, ((("a")), 100000000, 0, -884), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -886), 0), 100000000, 0, -885), ((("a")), 100000000, 0, -884), 0), 100000000, 0, -883), 0), 100000000, 0, -882), 0), 100000000, 0, -881), 0, (("typing/ctype.mli", 43, 2043, 2043), ("typing/ctype.mli", 43, 2043, 2115), 0), 0, Tag1 ("Ctype", 13)), 0); (("with_local_level_iter", 1058), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -880), (Tag2 ([((("a")), 100000000, 0, -873); (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -876)], (0)), 100000000, 0, -879)]), 100000000, 0, -878), 0), 100000000, 0, -877), (Tag1 (("post"), (Tag1 (0, ((("b")), 100000000, 0, -876), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -875), 0), 100000000, 0, -874), ((("a")), 100000000, 0, -873), 0), 100000000, 0, -872), 0), 100000000, 0, -871), 0, (("typing/ctype.mli", 46, 2260, 2260), ("typing/ctype.mli", 46, 2260, 2336), 0), 0, Tag1 ("Ctype", 14)), 0); (("with_local_level_iter_if", 1059), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -870), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -869), (Tag2 ([((("a")), 100000000, 0, -862); (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -865)], (0)), 100000000, 0, -868)]), 100000000, 0, -867), 0), 100000000, 0, -866), (Tag1 (("post"), (Tag1 (0, ((("b")), 100000000, 0, -865), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -864), 0), 100000000, 0, -863), ((("a")), 100000000, 0, -862), 0), 100000000, 0, -861), 0), 100000000, 0, -860), 0), 100000000, 0, -859), 0, (("typing/ctype.mli", 49, 2440, 2440), ("typing/ctype.mli", 50, 2470, 2531), 0), 0, Tag1 ("Ctype", 15)), 0); (("with_level", 1060), ((Tag1 (("level"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -858), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -857), ((("a")), 100000000, 0, -855), 0), 100000000, 0, -856), ((("a")), 100000000, 0, -855), 0), 100000000, 0, -854), 0), 100000000, 0, -853), 0, (("typing/ctype.mli", 52, 2593, 2593), ("typing/ctype.mli", 52, 2593, 2641), 0), 0, Tag1 ("Ctype", 16)), 0); (("with_level_if", 1061), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -852), (Tag1 (("level"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -851), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -850), ((("a")), 100000000, 0, -848), 0), 100000000, 0, -849), ((("a")), 100000000, 0, -848), 0), 100000000, 0, -847), 0), 100000000, 0, -846), 0), 100000000, 0, -845), 0, (("typing/ctype.mli", 55, 2755, 2755), ("typing/ctype.mli", 55, 2755, 2814), 0), 0, Tag1 ("Ctype", 17)), 0); (("with_local_level_if_principal", 1062), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -844), ((("a")), 100000000, 0, -840), 0), 100000000, 0, -843), (Tag1 (("post"), (Tag1 (0, ((("a")), 100000000, 0, -840), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -842), 0), 100000000, 0, -841), ((("a")), 100000000, 0, -840), 0), 100000000, 0, -839), 0), 100000000, 0, -838), 0, (("typing/ctype.mli", 57, 2865, 2865), ("typing/ctype.mli", 57, 2865, 2939), 0), 0, Tag1 ("Ctype", 18)), 0); (("with_local_level_iter_if_principal", 1063), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -837), (Tag2 ([((("a")), 100000000, 0, -830); (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -833)], (0)), 100000000, 0, -836)]), 100000000, 0, -835), 0), 100000000, 0, -834), (Tag1 (("post"), (Tag1 (0, ((("b")), 100000000, 0, -833), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -832), 0), 100000000, 0, -831), ((("a")), 100000000, 0, -830), 0), 100000000, 0, -829), 0), 100000000, 0, -828), 0, (("typing/ctype.mli", 58, 2940, 2940), ("typing/ctype.mli", 59, 2980, 3033), 0), 0, Tag1 ("Ctype", 19)), 0); (("with_local_level_for_class", 1064), ((Tag1 (Tag1 ("post"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, ((("a")), 100000000, 0, -822), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -827), 0), 100000000, 0, -826)], (0)), 100000000, 0, -825), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -824), ((("a")), 100000000, 0, -822), 0), 100000000, 0, -823), ((("a")), 100000000, 0, -822), 0), 100000000, 0, -821), 0), 100000000, 0, -820), 0, (("typing/ctype.mli", 63, 3153, 3153), ("typing/ctype.mli", 63, 3153, 3225), 0), 0, Tag1 ("Ctype", 20)), 0); (("with_raised_nongen_level", 1065), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -819), ((("a")), 100000000, 0, -817), 0), 100000000, 0, -818), ((("a")), 100000000, 0, -817), 0), 100000000, 0, -816), 0, (("typing/ctype.mli", 66, 3352, 3352), ("typing/ctype.mli", 66, 3352, 3400), 0), 0, Tag1 ("Ctype", 21)), 0); (("reset_global_level", 1066), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -815), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -814), 0), 100000000, 0, -813), 0, (("typing/ctype.mli", 70, 3503, 3503), ("typing/ctype.mli", 70, 3503, 3539), 0), 0, Tag1 ("Ctype", 22)), 0); (("increase_global_level", 1067), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -812), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -811), 0), 100000000, 0, -810), 0, (("typing/ctype.mli", 72, 3605, 3605), ("typing/ctype.mli", 72, 3605, 3643), 0), 0, Tag1 ("Ctype", 23)), 0); (("restore_global_level", 1068), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -809), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -808), 0), 100000000, 0, -807), 0, (("typing/ctype.mli", 73, 3644, 3644), ("typing/ctype.mli", 73, 3644, 3681), 0), 0, Tag1 ("Ctype", 24)), 0); (("create_scope", 1069), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -806), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -805), 0), 100000000, 0, -804), 0, (("typing/ctype.mli", 76, 3745, 3745), ("typing/ctype.mli", 76, 3745, 3775), 0), 0, Tag1 ("Ctype", 25)), 0); (("newty", 1070), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_desc"), 0, (0)), 100000000, 0, -803), (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -802), 0), 100000000, 0, -801), 0, (("typing/ctype.mli", 78, 3777, 3777), ("typing/ctype.mli", 78, 3777, 3810), 0), 0, Tag1 ("Ctype", 26)), 0); (("new_scoped_ty", 1071), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -800), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_desc"), 0, (0)), 100000000, 0, -799), (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -798), 0), 100000000, 0, -797), 0), 100000000, 0, -796), 0, (("typing/ctype.mli", 79, 3811, 3811), ("typing/ctype.mli", 79, 3811, 3859), 0), 0, Tag1 ("Ctype", 27)), 0); (("newvar", 1072), ((Tag1 (Tag1 ("name"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -795)], (0)), 100000000, 0, -794), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -793), (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -792), 0), 100000000, 0, -791), 0), 100000000, 0, -790), 0, (("typing/ctype.mli", 80, 3860, 3860), ("typing/ctype.mli", 80, 3860, 3905), 0), 0, Tag1 ("Ctype", 28)), 0); (("newvar2", 1073), ((Tag1 (Tag1 ("name"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -789)], (0)), 100000000, 0, -788), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -787), (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -786), 0), 100000000, 0, -785), 0), 100000000, 0, -784), 0, (("typing/ctype.mli", 81, 3906, 3906), ("typing/ctype.mli", 81, 3906, 3951), 0), 0, Tag1 ("Ctype", 29)), 0); (("new_global_var", 1074), ((Tag1 (Tag1 ("name"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -783)], (0)), 100000000, 0, -782), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -781), (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -780), 0), 100000000, 0, -779), 0), 100000000, 0, -778), 0, (("typing/ctype.mli", 83, 3990, 3990), ("typing/ctype.mli", 83, 3990, 4043), 0), 0, Tag1 ("Ctype", 30)), 0); (("newobj", 1075), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -777), (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -776), 0), 100000000, 0, -775), 0, (("typing/ctype.mli", 86, 4158, 4158), ("typing/ctype.mli", 86, 4158, 4192), 0), 0, Tag1 ("Ctype", 31)), 0); (("newconstr", 1076), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -774), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -773)], (0)), 100000000, 0, -772), (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -771), 0), 100000000, 0, -770), 0), 100000000, 0, -769), 0, (("typing/ctype.mli", 87, 4193, 4193), ("typing/ctype.mli", 87, 4193, 4245), 0), 0, Tag1 ("Ctype", 32)), 0); (("none", 1077), ((Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -768), 0, (("typing/ctype.mli", 88, 4246, 4246), ("typing/ctype.mli", 88, 4246, 4265), 0), 0, Tag1 ("Ctype", 33)), 0); (("object_fields", 1078), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -767), (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -766), 0), 100000000, 0, -765), 0, (("typing/ctype.mli", 91, 4305, 4305), ("typing/ctype.mli", 91, 4305, 4346), 0), 0, Tag1 ("Ctype", 34)), 0); (("flatten_fields", 1079), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -764), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -760); (Tag3 (Tag1 ((Tag2 ("Types")), "field_kind"), 0, (0)), 100000000, 0, -761); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -762)]), 100000000, 0, -759)], (0)), 100000000, 0, -758); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -763)]), 100000000, 0, -757), 0), 100000000, 0, -756), 0, (("typing/ctype.mli", 92, 4347, 4347), ("typing/ctype.mli", 93, 4367, 4438), 0), 0, Tag1 ("Ctype", 35)), 0); (("associate_fields", 1080), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -753); (Tag3 (Tag1 ((Tag2 ("Types")), "field_kind"), 0, (0)), 100000000, 0, -754); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -755)]), 100000000, 0, -752)], (0)), 100000000, 0, -751), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -748); (Tag3 (Tag1 ((Tag2 ("Types")), "field_kind"), 0, (0)), 100000000, 0, -749); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -750)]), 100000000, 0, -747)], (0)), 100000000, 0, -746), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -731); (Tag3 (Tag1 ((Tag2 ("Types")), "field_kind"), 0, (0)), 100000000, 0, -732); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -733); (Tag3 (Tag1 ((Tag2 ("Types")), "field_kind"), 0, (0)), 100000000, 0, -734); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -735)]), 100000000, 0, -730)], (0)), 100000000, 0, -729); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -738); (Tag3 (Tag1 ((Tag2 ("Types")), "field_kind"), 0, (0)), 100000000, 0, -739); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -740)]), 100000000, 0, -737)], (0)), 100000000, 0, -736); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -743); (Tag3 (Tag1 ((Tag2 ("Types")), "field_kind"), 0, (0)), 100000000, 0, -744); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -745)]), 100000000, 0, -742)], (0)), 100000000, 0, -741)]), 100000000, 0, -728), 0), 100000000, 0, -727), 0), 100000000, 0, -726), 0, (("typing/ctype.mli", 112, 5206, 5206), ("typing/ctype.mli", 117, 5451, 5497), 0), 0, Tag1 ("Ctype", 36)), 0); (("opened_object", 1081), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -725), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -724), 0), 100000000, 0, -723), 0, (("typing/ctype.mli", 118, 5498, 5498), ("typing/ctype.mli", 118, 5498, 5534), 0), 0, Tag1 ("Ctype", 37)), 0); (("set_object_name", 1082), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -722), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -721)], (0)), 100000000, 0, -720), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -719), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -718), 0), 100000000, 0, -717), 0), 100000000, 0, -716), 0), 100000000, 0, -715), 0, (("typing/ctype.mli", 119, 5535, 5535), ("typing/ctype.mli", 120, 5556, 5610), 0), 0, Tag1 ("Ctype", 38)), 0); (("remove_object_name", 1083), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -714), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -713), 0), 100000000, 0, -712), 0, (("typing/ctype.mli", 121, 5611, 5611), ("typing/ctype.mli", 121, 5611, 5652), 0), 0, Tag1 ("Ctype", 39)), 0); (("find_cltype_for_path", 1084), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -711), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -710), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -708); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -709)]), 100000000, 0, -707), 0), 100000000, 0, -706), 0), 100000000, 0, -705), 0, (("typing/ctype.mli", 122, 5653, 5653), ("typing/ctype.mli", 122, 5653, 5726), 0), 0, Tag1 ("Ctype", 40)), 0); (("sort_row_fields", 1085), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "label"), 0, (0)), 100000000, 0, -703); (Tag3 (Tag1 ((Tag2 ("Types")), "row_field"), 0, (0)), 100000000, 0, -704)]), 100000000, 0, -702)], (0)), 100000000, 0, -701), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "label"), 0, (0)), 100000000, 0, -699); (Tag3 (Tag1 ((Tag2 ("Types")), "row_field"), 0, (0)), 100000000, 0, -700)]), 100000000, 0, -698)], (0)), 100000000, 0, -697), 0), 100000000, 0, -696), 0, (("typing/ctype.mli", 124, 5728, 5728), ("typing/ctype.mli", 124, 5728, 5801), 0), 0, Tag1 ("Ctype", 41)), 0); (("merge_row_fields", 1086), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "label"), 0, (0)), 100000000, 0, -694); (Tag3 (Tag1 ((Tag2 ("Types")), "row_field"), 0, (0)), 100000000, 0, -695)]), 100000000, 0, -693)], (0)), 100000000, 0, -692), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "label"), 0, (0)), 100000000, 0, -690); (Tag3 (Tag1 ((Tag2 ("Types")), "row_field"), 0, (0)), 100000000, 0, -691)]), 100000000, 0, -689)], (0)), 100000000, 0, -688), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "label"), 0, (0)), 100000000, 0, -677); (Tag3 (Tag1 ((Tag2 ("Types")), "row_field"), 0, (0)), 100000000, 0, -678)]), 100000000, 0, -676)], (0)), 100000000, 0, -675); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "label"), 0, (0)), 100000000, 0, -681); (Tag3 (Tag1 ((Tag2 ("Types")), "row_field"), 0, (0)), 100000000, 0, -682)]), 100000000, 0, -680)], (0)), 100000000, 0, -679); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "label"), 0, (0)), 100000000, 0, -685); (Tag3 (Tag1 ((Tag2 ("Types")), "row_field"), 0, (0)), 100000000, 0, -686); (Tag3 (Tag1 ((Tag2 ("Types")), "row_field"), 0, (0)), 100000000, 0, -687)]), 100000000, 0, -684)], (0)), 100000000, 0, -683)]), 100000000, 0, -674), 0), 100000000, 0, -673), 0), 100000000, 0, -672), 0, (("typing/ctype.mli", 125, 5802, 5802), ("typing/ctype.mli", 128, 5950, 5994), 0), 0, Tag1 ("Ctype", 42)), 0); (("filter_row_fields", 1087), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -671), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "label"), 0, (0)), 100000000, 0, -669); (Tag3 (Tag1 ((Tag2 ("Types")), "row_field"), 0, (0)), 100000000, 0, -670)]), 100000000, 0, -668)], (0)), 100000000, 0, -667), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "label"), 0, (0)), 100000000, 0, -665); (Tag3 (Tag1 ((Tag2 ("Types")), "row_field"), 0, (0)), 100000000, 0, -666)]), 100000000, 0, -664)], (0)), 100000000, 0, -663), 0), 100000000, 0, -662), 0), 100000000, 0, -661), 0, (("typing/ctype.mli", 129, 5995, 5995), ("typing/ctype.mli", 130, 6018, 6086), 0), 0, Tag1 ("Ctype", 43)), 0); (("generalize", 1088), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -660), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -659), 0), 100000000, 0, -658), 0, (("typing/ctype.mli", 132, 6088, 6088), ("typing/ctype.mli", 132, 6088, 6121), 0), 0, Tag1 ("Ctype", 44)), 0); (("lower_contravariant", 1089), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -657), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -656), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -655), 0), 100000000, 0, -654), 0), 100000000, 0, -653), 0, (("typing/ctype.mli", 134, 6171, 6171), ("typing/ctype.mli", 134, 6171, 6222), 0), 0, Tag1 ("Ctype", 45)), 0); (("lower_variables_only", 1090), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -652), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -651), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -650), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -649), 0), 100000000, 0, -648), 0), 100000000, 0, -647), 0), 100000000, 0, -646), 0, (("typing/ctype.mli", 137, 6364, 6364), ("typing/ctype.mli", 137, 6364, 6423), 0), 0, Tag1 ("Ctype", 46)), 0); (("enforce_current_level", 1091), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -645), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -644), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -643), 0), 100000000, 0, -642), 0), 100000000, 0, -641), 0, (("typing/ctype.mli", 139, 6477, 6477), ("typing/ctype.mli", 139, 6477, 6530), 0), 0, Tag1 ("Ctype", 47)), 0); (("generalize_structure", 1092), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -640), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -639), 0), 100000000, 0, -638), 0, (("typing/ctype.mli", 141, 6580, 6580), ("typing/ctype.mli", 141, 6580, 6623), 0), 0, Tag1 ("Ctype", 48)), 0); (("generalize_class_type", 1093), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_type"), 0, (0)), 100000000, 0, -637), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -636), 0), 100000000, 0, -635), 0, (("typing/ctype.mli", 144, 6722, 6722), ("typing/ctype.mli", 144, 6722, 6768), 0), 0, Tag1 ("Ctype", 49)), 0); (("generalize_class_type_structure", 1094), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_type"), 0, (0)), 100000000, 0, -634), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -633), 0), 100000000, 0, -632), 0, (("typing/ctype.mli", 146, 6825, 6825), ("typing/ctype.mli", 146, 6825, 6881), 0), 0, Tag1 ("Ctype", 50)), 0); (("generalize_class_signature_spine", 1095), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -631), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_signature"), 0, (0)), 100000000, 0, -630), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -629), 0), 100000000, 0, -628), 0), 100000000, 0, -627), 0, (("typing/ctype.mli", 148, 6954, 6954), ("typing/ctype.mli", 148, 6954, 7025), 0), 0, Tag1 ("Ctype", 51)), 0); (("correct_levels", 1096), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -626), (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -625), 0), 100000000, 0, -624), 0, (("typing/ctype.mli", 150, 7095, 7095), ("typing/ctype.mli", 150, 7095, 7137), 0), 0, Tag1 ("Ctype", 52)), 0); (("limited_generalize", 1097), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -623), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -622), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -621), 0), 100000000, 0, -620), 0), 100000000, 0, -619), 0, (("typing/ctype.mli", 152, 7190, 7190), ("typing/ctype.mli", 152, 7190, 7244), 0), 0, Tag1 ("Ctype", 53)), 0); (("limited_generalize_class_type", 1098), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -618), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_type"), 0, (0)), 100000000, 0, -617), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -616), 0), 100000000, 0, -615), 0), 100000000, 0, -614), 0, (("typing/ctype.mli", 155, 7357, 7357), ("typing/ctype.mli", 155, 7357, 7423), 0), 0, Tag1 ("Ctype", 54)), 0); (("fully_generic", 1099), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -613), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -612), 0), 100000000, 0, -611), 0, (("typing/ctype.mli", 158, 7465, 7465), ("typing/ctype.mli", 158, 7465, 7501), 0), 0, Tag1 ("Ctype", 55)), 0); (("check_scope_escape", 1100), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -610), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -609), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -608), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -607), 0), 100000000, 0, -606), 0), 100000000, 0, -605), 0), 100000000, 0, -604), 0, (("typing/ctype.mli", 160, 7503, 7503), ("typing/ctype.mli", 160, 7503, 7561), 0), 0, Tag1 ("Ctype", 56)), 0); (("instance", 1101), ((Tag1 (Tag1 ("partial"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -603)], (0)), 100000000, 0, -602), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -601), (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -600), 0), 100000000, 0, -599), 0), 100000000, 0, -598), 0, (("typing/ctype.mli", 165, 7736, 7736), ("typing/ctype.mli", 165, 7736, 7789), 0), 0, Tag1 ("Ctype", 57)), 0); (("generic_instance", 1102), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -597), (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -596), 0), 100000000, 0, -595), 0, (("typing/ctype.mli", 170, 8012, 8012), ("typing/ctype.mli", 170, 8012, 8056), 0), 0, Tag1 ("Ctype", 58)), 0); (("instance_list", 1103), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -594)], (0)), 100000000, 0, -593), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -592)], (0)), 100000000, 0, -591), 0), 100000000, 0, -590), 0, (("typing/ctype.mli", 172, 8120, 8120), ("typing/ctype.mli", 172, 8120, 8171), 0), 0, Tag1 ("Ctype", 59)), 0); (("new_local_type", 1104), ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -589)], (0)), 100000000, 0, -588), (Tag1 (Tag1 ("manifest_and_scope"), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -586); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -587)]), 100000000, 0, -585)], (0)), 100000000, 0, -584), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -583), (Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -582), 0), 100000000, 0, -581), 0), 100000000, 0, -580), 0), 100000000, 0, -579), 0, (("typing/ctype.mli", 174, 8229, 8229), ("typing/ctype.mli", 176, 8276, 8349), 0), 0, Tag1 ("Ctype", 60)), 0); (("existential_name", 1105), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "constructor_description"), 0, (0)), 100000000, 0, -578), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -577), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -576), 0), 100000000, 0, -575), 0), 100000000, 0, -574), 0, (("typing/ctype.mli", 177, 8350, 8350), ("typing/ctype.mli", 177, 8350, 8418), 0), 0, Tag1 ("Ctype", 61)), 0); Tag1 (("existential_treatment", 1106), (0, 0, Tag1 ([(("Keep_existentials_flexible", 779), (0), 0, (("typing/ctype.mli", 180, 8449, 8451), ("typing/ctype.mli", 180, 8449, 8479), 0), 0, Tag1 ("Ctype", 63)); (("Make_existentials_abstract", 780), Tag1 ([(("env", 781), 0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -572)], (0)), 100000000, 0, -571), (("typing/ctype.mli", 181, 8480, 8516), ("typing/ctype.mli", 181, 8480, 8531), 0), 0, Tag1 ("Ctype", 64)); (("scope", 782), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -573), (("typing/ctype.mli", 181, 8480, 8532), ("typing/ctype.mli", 181, 8480, 8542), 0), 0, Tag1 ("Ctype", 65))]), 0, (("typing/ctype.mli", 181, 8480, 8482), ("typing/ctype.mli", 181, 8480, 8544), 0), 0, Tag1 ("Ctype", 66))], 0), 1, 0, 0, 0, 0, 0, (("typing/ctype.mli", 179, 8420, 8420), ("typing/ctype.mli", 181, 8480, 8544), 0), 0, 0, 0, Tag1 ("Ctype", 62)), 1, 0); (("instance_constructor", 1107), ((Tag1 (0, (Tag3 ((("existential_treatment", 1106)), 0, (0)), 100000000, 0, -570), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "constructor_description"), 0, (0)), 100000000, 0, -569), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -565)], (0)), 100000000, 0, -564); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -566); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -568)], (0)), 100000000, 0, -567)]), 100000000, 0, -563), 0), 100000000, 0, -562), 0), 100000000, 0, -561), 0, (("typing/ctype.mli", 183, 8546, 8546), ("typing/ctype.mli", 184, 8597, 8675), 0), 0, Tag1 ("Ctype", 72)), 0); (("instance_parameterized_type", 1108), ((Tag1 (Tag1 ("keep_names"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -560)], (0)), 100000000, 0, -559), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -558)], (0)), 100000000, 0, -557), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -556), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -554)], (0)), 100000000, 0, -553); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -555)]), 100000000, 0, -552), 0), 100000000, 0, -551), 0), 100000000, 0, -550), 0), 100000000, 0, -549), 0, (("typing/ctype.mli", 186, 8742, 8742), ("typing/ctype.mli", 188, 8803, 8868), 0), 0, Tag1 ("Ctype", 73)), 0); (("instance_declaration", 1109), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -548), (Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -547), 0), 100000000, 0, -546), 0, (("typing/ctype.mli", 189, 8869, 8869), ("typing/ctype.mli", 189, 8869, 8931), 0), 0, Tag1 ("Ctype", 74)), 0); (("generic_instance_declaration", 1110), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -545), (Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -544), 0), 100000000, 0, -543), 0, (("typing/ctype.mli", 190, 8932, 8932), ("typing/ctype.mli", 190, 8932, 9002), 0), 0, Tag1 ("Ctype", 75)), 0); (("instance_class", 1111), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -542)], (0)), 100000000, 0, -541), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_type"), 0, (0)), 100000000, 0, -540), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -538)], (0)), 100000000, 0, -537); (Tag3 (Tag1 ((Tag2 ("Types")), "class_type"), 0, (0)), 100000000, 0, -539)]), 100000000, 0, -536), 0), 100000000, 0, -535), 0), 100000000, 0, -534), 0, (("typing/ctype.mli", 192, 9078, 9078), ("typing/ctype.mli", 193, 9098, 9165), 0), 0, Tag1 ("Ctype", 76)), 0); (("instance_poly", 1112), ((Tag1 (Tag1 ("keep_names"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -533)], (0)), 100000000, 0, -532), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -531), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -530)], (0)), 100000000, 0, -529), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -528), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -526)], (0)), 100000000, 0, -525); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -527)]), 100000000, 0, -524), 0), 100000000, 0, -523), 0), 100000000, 0, -522), 0), 100000000, 0, -521), 0), 100000000, 0, -520), 0, (("typing/ctype.mli", 195, 9167, 9167), ("typing/ctype.mli", 197, 9214, 9287), 0), 0, Tag1 ("Ctype", 77)), 0); (("polyfy", 1113), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -519), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -518), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -517)], (0)), 100000000, 0, -516), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -514); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -515)]), 100000000, 0, -513), 0), 100000000, 0, -512), 0), 100000000, 0, -511), 0), 100000000, 0, -510), 0, (("typing/ctype.mli", 199, 9360, 9360), ("typing/ctype.mli", 199, 9360, 9428), 0), 0, Tag1 ("Ctype", 78)), 0); (("instance_label", 1114), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -509), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "label_description"), 0, (0)), 100000000, 0, -508), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -505)], (0)), 100000000, 0, -504); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -506); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -507)]), 100000000, 0, -503), 0), 100000000, 0, -502), 0), 100000000, 0, -501), 0, (("typing/ctype.mli", 200, 9429, 9429), ("typing/ctype.mli", 201, 9449, 9524), 0), 0, Tag1 ("Ctype", 79)), 0); (("apply", 1115), ((Tag1 (Tag1 ("use_current_level"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -500)], (0)), 100000000, 0, -499), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -498), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -497)], (0)), 100000000, 0, -496), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -495), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -494)], (0)), 100000000, 0, -493), (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -492), 0), 100000000, 0, -491), 0), 100000000, 0, -490), 0), 100000000, 0, -489), 0), 100000000, 0, -488), 0), 100000000, 0, -487), 0, (("typing/ctype.mli", 203, 9557, 9557), ("typing/ctype.mli", 205, 9603, 9678), 0), 0, Tag1 ("Ctype", 80)), 0); (("try_expand_once_opt", 1116), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -486), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -485), (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -484), 0), 100000000, 0, -483), 0), 100000000, 0, -482), 0, (("typing/ctype.mli", 213, 10032, 10032), ("typing/ctype.mli", 213, 10032, 10088), 0), 0, Tag1 ("Ctype", 81)), 0); (("try_expand_safe_opt", 1117), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -481), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -480), (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -479), 0), 100000000, 0, -478), 0), 100000000, 0, -477), 0, (("typing/ctype.mli", 214, 10089, 10089), ("typing/ctype.mli", 214, 10089, 10145), 0), 0, Tag1 ("Ctype", 82)), 0); (("expand_head_once", 1118), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -476), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -475), (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -474), 0), 100000000, 0, -473), 0), 100000000, 0, -472), 0, (("typing/ctype.mli", 216, 10147, 10147), ("typing/ctype.mli", 216, 10147, 10200), 0), 0, Tag1 ("Ctype", 83)), 0); (("expand_head", 1119), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -471), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -470), (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -469), 0), 100000000, 0, -468), 0), 100000000, 0, -467), 0, (("typing/ctype.mli", 217, 10201, 10201), ("typing/ctype.mli", 217, 10201, 10249), 0), 0, Tag1 ("Ctype", 84)), 0); (("expand_head_opt", 1120), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -466), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -465), (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -464), 0), 100000000, 0, -463), 0), 100000000, 0, -462), 0, (("typing/ctype.mli", 218, 10250, 10250), ("typing/ctype.mli", 218, 10250, 10302), 0), 0, Tag1 ("Ctype", 85)), 0); (("expanded_diff", 1121), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -461), (Tag1 (("got"), (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -460), (Tag1 (("expected"), (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -459), (Tag3 (Tag1 ((Tag2 ("Errortrace")), "elt"), [(Tag3 (Tag1 ((Tag2 ("Errortrace")), "expanded_type"), 0, (0)), 100000000, 0, -457); ((("variant")), 100000000, 0, -458)], (0)), 100000000, 0, -456), 0), 100000000, 0, -455), 0), 100000000, 0, -454), 0), 100000000, 0, -453), 0, (("typing/ctype.mli", 226, 10592, 10592), ("typing/ctype.mli", 229, 10664, 10717), 0), 0, Tag1 ("Ctype", 86)), 0); (("unexpanded_diff", 1122), ((Tag1 (("got"), (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -452), (Tag1 (("expected"), (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -451), (Tag3 (Tag1 ((Tag2 ("Errortrace")), "elt"), [(Tag3 (Tag1 ((Tag2 ("Errortrace")), "expanded_type"), 0, (0)), 100000000, 0, -449); ((("variant")), 100000000, 0, -450)], (0)), 100000000, 0, -448), 0), 100000000, 0, -447), 0), 100000000, 0, -446), 0, (("typing/ctype.mli", 234, 10907, 10907), ("typing/ctype.mli", 236, 10970, 11023), 0), 0, Tag1 ("Ctype", 87)), 0); (("full_expand", 1123), ((Tag1 (("may_forget_scope"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -445), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -444), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -443), (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -442), 0), 100000000, 0, -441), 0), 100000000, 0, -440), 0), 100000000, 0, -439), 0, (("typing/ctype.mli", 238, 11025, 11025), ("typing/ctype.mli", 238, 11025, 11098), 0), 0, Tag1 ("Ctype", 88)), 0); Tag1 (("typedecl_extraction_result", 1124), (0, 0, Tag1 ([(("Typedecl", 801), ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -436); (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -437); (Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -438)]), 0, (("typing/ctype.mli", 241, 11134, 11136), ("typing/ctype.mli", 241, 11134, 11184), 0), 0, Tag1 ("Ctype", 90)); (("Has_no_typedecl", 802), (0), 0, (("typing/ctype.mli", 244, 11294, 11296), ("typing/ctype.mli", 244, 11294, 11313), 0), 0, Tag1 ("Ctype", 91)); (("May_have_typedecl", 803), (0), 0, (("typing/ctype.mli", 245, 11314, 11316), ("typing/ctype.mli", 245, 11314, 11335), 0), 0, Tag1 ("Ctype", 92))], 0), 1, 0, 0, 0, 0, 0, (("typing/ctype.mli", 240, 11100, 11100), ("typing/ctype.mli", 245, 11314, 11335), 0), 0, 0, 0, Tag1 ("Ctype", 89)), 1, 0); (("extract_concrete_typedecl", 1125), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -435), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -434), (Tag3 ((("typedecl_extraction_result", 1124)), 0, (0)), 100000000, 0, -433), 0), 100000000, 0, -432), 0), 100000000, 0, -431), 0, (("typing/ctype.mli", 247, 11337, 11337), ("typing/ctype.mli", 248, 11368, 11424), 0), 0, Tag1 ("Ctype", 93)), 0); (("unify", 1126), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -430), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -429), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -428), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -427), 0), 100000000, 0, -426), 0), 100000000, 0, -425), 0), 100000000, 0, -424), 0, (("typing/ctype.mli", 250, 11426, 11426), ("typing/ctype.mli", 250, 11426, 11476), 0), 0, Tag1 ("Ctype", 94)), 0); (("unify_gadt", 1127), ((Tag1 (("equations_level"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -423), (Tag1 (("allow_recursive_equations"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -422), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -421)], (0)), 100000000, 0, -420), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -419), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -418), (Tag3 (Tag1 (Tag1 ((Tag2 ("Btype")), "TypePairs"), "t"), 0, (0)), 100000000, 0, -417), 0), 100000000, 0, -416), 0), 100000000, 0, -415), 0), 100000000, 0, -414), 0), 100000000, 0, -413), 0), 100000000, 0, -412), 0, (("typing/ctype.mli", 252, 11549, 11549), ("typing/ctype.mli", 254, 11630, 11694), 0), 0, Tag1 ("Ctype", 95)), 0); (("unify_var", 1128), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -411), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -410), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -409), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -408), 0), 100000000, 0, -407), 0), 100000000, 0, -406), 0), 100000000, 0, -405), 0, (("typing/ctype.mli", 258, 11895, 11895), ("typing/ctype.mli", 258, 11895, 11949), 0), 0, Tag1 ("Ctype", 96)), 0); (("filter_arrow", 1129), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -404), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -403), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "arg_label"), 0, (0)), 100000000, 0, -402), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -400); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -401)]), 100000000, 0, -399), 0), 100000000, 0, -398), 0), 100000000, 0, -397), 0), 100000000, 0, -396), 0, (("typing/ctype.mli", 261, 12046, 12046), ("typing/ctype.mli", 261, 12046, 12120), 0), 0, Tag1 ("Ctype", 97)), 0); (("filter_method", 1130), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -395), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -394), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -393), (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -392), 0), 100000000, 0, -391), 0), 100000000, 0, -390), 0), 100000000, 0, -389), 0, (("typing/ctype.mli", 264, 12245, 12245), ("typing/ctype.mli", 264, 12245, 12305), 0), 0, Tag1 ("Ctype", 98)), 0); (("occur_in", 1131), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -388), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -387), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -386), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -385), 0), 100000000, 0, -384), 0), 100000000, 0, -383), 0), 100000000, 0, -382), 0, (("typing/ctype.mli", 267, 12433, 12433), ("typing/ctype.mli", 267, 12433, 12486), 0), 0, Tag1 ("Ctype", 99)), 0); (("deep_occur", 1132), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -381), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -380), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -379), 0), 100000000, 0, -378), 0), 100000000, 0, -377), 0, (("typing/ctype.mli", 268, 12487, 12487), ("typing/ctype.mli", 268, 12487, 12533), 0), 0, Tag1 ("Ctype", 100)), 0); (("moregeneral", 1133), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -376), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -375), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -374), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -373), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -372), 0), 100000000, 0, -371), 0), 100000000, 0, -370), 0), 100000000, 0, -369), 0), 100000000, 0, -368), 0, (("typing/ctype.mli", 269, 12534, 12534), ("typing/ctype.mli", 269, 12534, 12598), 0), 0, Tag1 ("Ctype", 101)), 0); (("is_moregeneral", 1134), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -367), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -366), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -365), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -364), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -363), 0), 100000000, 0, -362), 0), 100000000, 0, -361), 0), 100000000, 0, -360), 0), 100000000, 0, -359), 0, (("typing/ctype.mli", 271, 12677, 12677), ("typing/ctype.mli", 271, 12677, 12744), 0), 0, Tag1 ("Ctype", 102)), 0); (("rigidify", 1135), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -358), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -357)], (0)), 100000000, 0, -356), 0), 100000000, 0, -355), 0, (("typing/ctype.mli", 272, 12745, 12745), ("typing/ctype.mli", 272, 12745, 12786), 0), 0, Tag1 ("Ctype", 103)), 0); (("all_distinct_vars", 1136), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -354), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -353)], (0)), 100000000, 0, -352), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -351), 0), 100000000, 0, -350), 0), 100000000, 0, -349), 0, (("typing/ctype.mli", 274, 12848, 12848), ("typing/ctype.mli", 274, 12848, 12902), 0), 0, Tag1 ("Ctype", 104)), 0); (("matches", 1137), ((Tag1 (("expand_error_trace"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -348), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -347), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -346), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -345), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -344), 0), 100000000, 0, -343), 0), 100000000, 0, -342), 0), 100000000, 0, -341), 0), 100000000, 0, -340), 0, (("typing/ctype.mli", 276, 12967, 12967), ("typing/ctype.mli", 276, 12967, 13046), 0), 0, Tag1 ("Ctype", 105)), 0); (("does_match", 1138), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -339), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -338), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -337), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -336), 0), 100000000, 0, -335), 0), 100000000, 0, -334), 0), 100000000, 0, -333), 0, (("typing/ctype.mli", 281, 13319, 13319), ("typing/ctype.mli", 281, 13319, 13374), 0), 0, Tag1 ("Ctype", 106)), 0); (("reify_univars", 1139), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -332), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -331), (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -330), 0), 100000000, 0, -329), 0), 100000000, 0, -328), 0, (("typing/ctype.mli", 284, 13430, 13430), ("typing/ctype.mli", 284, 13430, 13493), 0), 0, Tag1 ("Ctype", 107)), 0); Tag1 (("filter_arrow_failure", 1140), (0, 0, Tag1 ([(("Unification_error", 906), ([(Tag3 (Tag1 ((Tag2 ("Errortrace")), "unification_error"), 0, (0)), 100000000, 0, -324)]), 0, (("typing/ctype.mli", 290, 13632, 13634), ("typing/ctype.mli", 290, 13632, 13685), 0), 0, Tag1 ("Ctype", 109)); (("Label_mismatch", 907), Tag1 ([(("got", 908), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "arg_label"), 0, (0)), 100000000, 0, -325), (("typing/ctype.mli", 292, 13708, 13716), ("typing/ctype.mli", 293, 13742, 13749), 0), 0, Tag1 ("Ctype", 110)); (("expected", 909), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "arg_label"), 0, (0)), 100000000, 0, -326), (("typing/ctype.mli", 293, 13742, 13750), ("typing/ctype.mli", 294, 13776, 13783), 0), 0, Tag1 ("Ctype", 111)); (("expected_type", 910), 0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -327), (("typing/ctype.mli", 294, 13776, 13784), ("typing/ctype.mli", 294, 13776, 13809), 0), 0, Tag1 ("Ctype", 112))]), 0, (("typing/ctype.mli", 291, 13686, 13688), ("typing/ctype.mli", 295, 13810, 13817), 0), 0, Tag1 ("Ctype", 113)); (("Not_a_function", 911), (0), 0, (("typing/ctype.mli", 296, 13818, 13820), ("typing/ctype.mli", 296, 13818, 13836), 0), 0, Tag1 ("Ctype", 114))], 0), 1, 0, 0, 0, 0, 0, (("typing/ctype.mli", 289, 13604, 13604), ("typing/ctype.mli", 296, 13818, 13836), 0), 0, 0, 0, Tag1 ("Ctype", 108)), 1, 0); Tag2 (("Filter_arrow_failed", 1141), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((("filter_arrow_failure", 1140)), 0, (0)), 100000000, 0, -323)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Ctype", 120)), 2, 0); Tag1 (("filter_method_failure", 1142), (0, 0, Tag1 ([(("Unification_error", 914), ([(Tag3 (Tag1 ((Tag2 ("Errortrace")), "unification_error"), 0, (0)), 100000000, 0, -321)]), 0, (("typing/ctype.mli", 301, 13922, 13924), ("typing/ctype.mli", 301, 13922, 13975), 0), 0, Tag1 ("Ctype", 122)); (("Not_a_method", 915), (0), 0, (("typing/ctype.mli", 302, 13976, 13978), ("typing/ctype.mli", 302, 13976, 13992), 0), 0, Tag1 ("Ctype", 123)); (("Not_an_object", 916), ([(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -322)]), 0, (("typing/ctype.mli", 303, 13993, 13995), ("typing/ctype.mli", 303, 13993, 14023), 0), 0, Tag1 ("Ctype", 124))], 0), 1, 0, 0, 0, 0, 0, (("typing/ctype.mli", 300, 13893, 13893), ("typing/ctype.mli", 303, 13993, 14023), 0), 0, 0, 0, Tag1 ("Ctype", 121)), 1, 0); Tag2 (("Filter_method_failed", 1143), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((("filter_method_failure", 1142)), 0, (0)), 100000000, 0, -320)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Ctype", 125)), 2, 0); Tag1 (("class_match_failure", 1144), (0, 0, Tag1 ([(("CM_Virtual_class", 919), (0), 0, (("typing/ctype.mli", 308, 14109, 14113), ("typing/ctype.mli", 308, 14109, 14129), 0), 0, Tag1 ("Ctype", 127)); (("CM_Parameter_arity_mismatch", 920), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -295); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -296)]), 0, (("typing/ctype.mli", 309, 14130, 14132), ("typing/ctype.mli", 309, 14130, 14174), 0), 0, Tag1 ("Ctype", 128)); (("CM_Type_parameter_mismatch", 921), ([(Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -297); (Tag3 (Tag1 ((Tag2 ("Errortrace")), "equality_error"), 0, (0)), 100000000, 0, -298)]), 0, (("typing/ctype.mli", 310, 14175, 14177), ("typing/ctype.mli", 310, 14175, 14242), 0), 0, Tag1 ("Ctype", 129)); (("CM_Class_type_mismatch", 922), ([(Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -299); (Tag3 (Tag1 ((Tag2 ("Types")), "class_type"), 0, (0)), 100000000, 0, -300); (Tag3 (Tag1 ((Tag2 ("Types")), "class_type"), 0, (0)), 100000000, 0, -301)]), 0, (("typing/ctype.mli", 311, 14243, 14245), ("typing/ctype.mli", 311, 14243, 14304), 0), 0, Tag1 ("Ctype", 130)); (("CM_Parameter_mismatch", 923), ([(Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -302); (Tag3 (Tag1 ((Tag2 ("Errortrace")), "moregen_error"), 0, (0)), 100000000, 0, -303)]), 0, (("typing/ctype.mli", 312, 14305, 14307), ("typing/ctype.mli", 312, 14305, 14366), 0), 0, Tag1 ("Ctype", 131)); (("CM_Val_type_mismatch", 924), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -304); (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -305); (Tag3 (Tag1 ((Tag2 ("Errortrace")), "comparison_error"), 0, (0)), 100000000, 0, -306)]), 0, (("typing/ctype.mli", 313, 14367, 14369), ("typing/ctype.mli", 313, 14367, 14439), 0), 0, Tag1 ("Ctype", 132)); (("CM_Meth_type_mismatch", 925), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -307); (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -308); (Tag3 (Tag1 ((Tag2 ("Errortrace")), "comparison_error"), 0, (0)), 100000000, 0, -309)]), 0, (("typing/ctype.mli", 314, 14440, 14442), ("typing/ctype.mli", 314, 14440, 14513), 0), 0, Tag1 ("Ctype", 133)); (("CM_Non_mutable_value", 926), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -310)]), 0, (("typing/ctype.mli", 315, 14514, 14516), ("typing/ctype.mli", 315, 14514, 14548), 0), 0, Tag1 ("Ctype", 134)); (("CM_Non_concrete_value", 927), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -311)]), 0, (("typing/ctype.mli", 316, 14549, 14551), ("typing/ctype.mli", 316, 14549, 14584), 0), 0, Tag1 ("Ctype", 135)); (("CM_Missing_value", 928), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -312)]), 0, (("typing/ctype.mli", 317, 14585, 14587), ("typing/ctype.mli", 317, 14585, 14615), 0), 0, Tag1 ("Ctype", 136)); (("CM_Missing_method", 929), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -313)]), 0, (("typing/ctype.mli", 318, 14616, 14618), ("typing/ctype.mli", 318, 14616, 14647), 0), 0, Tag1 ("Ctype", 137)); (("CM_Hide_public", 930), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -314)]), 0, (("typing/ctype.mli", 319, 14648, 14650), ("typing/ctype.mli", 319, 14648, 14676), 0), 0, Tag1 ("Ctype", 138)); (("CM_Hide_virtual", 931), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -315); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -316)]), 0, (("typing/ctype.mli", 320, 14677, 14679), ("typing/ctype.mli", 320, 14677, 14715), 0), 0, Tag1 ("Ctype", 139)); (("CM_Public_method", 932), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -317)]), 0, (("typing/ctype.mli", 321, 14716, 14718), ("typing/ctype.mli", 321, 14716, 14746), 0), 0, Tag1 ("Ctype", 140)); (("CM_Private_method", 933), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -318)]), 0, (("typing/ctype.mli", 322, 14747, 14749), ("typing/ctype.mli", 322, 14747, 14778), 0), 0, Tag1 ("Ctype", 141)); (("CM_Virtual_method", 934), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -319)]), 0, (("typing/ctype.mli", 323, 14779, 14781), ("typing/ctype.mli", 323, 14779, 14810), 0), 0, Tag1 ("Ctype", 142))], 0), 1, 0, 0, 0, 0, 0, (("typing/ctype.mli", 307, 14082, 14082), ("typing/ctype.mli", 323, 14779, 14810), 0), 0, 0, 0, Tag1 ("Ctype", 126)), 1, 0); (("match_class_types", 1145), ((Tag1 (Tag1 ("trace"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -294)], (0)), 100000000, 0, -293), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -292), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_type"), 0, (0)), 100000000, 0, -291), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_type"), 0, (0)), 100000000, 0, -290), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("class_match_failure", 1144)), 0, (0)), 100000000, 0, -289)], (0)), 100000000, 0, -288), 0), 100000000, 0, -287), 0), 100000000, 0, -286), 0), 100000000, 0, -285), 0), 100000000, 0, -284), 0, (("typing/ctype.mli", 325, 14812, 14812), ("typing/ctype.mli", 326, 14835, 14915), 0), 0, Tag1 ("Ctype", 143)), 0); (("equal", 1146), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -283), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -282), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -281)], (0)), 100000000, 0, -280), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -279)], (0)), 100000000, 0, -278), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -277), 0), 100000000, 0, -276), 0), 100000000, 0, -275), 0), 100000000, 0, -274), 0), 100000000, 0, -273), 0, (("typing/ctype.mli", 328, 14993, 14993), ("typing/ctype.mli", 328, 14993, 15061), 0), 0, Tag1 ("Ctype", 144)), 0); (("is_equal", 1147), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -272), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -271), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -270)], (0)), 100000000, 0, -269), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -268)], (0)), 100000000, 0, -267), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -266), 0), 100000000, 0, -265), 0), 100000000, 0, -264), 0), 100000000, 0, -263), 0), 100000000, 0, -262), 0, (("typing/ctype.mli", 332, 15237, 15237), ("typing/ctype.mli", 332, 15237, 15309), 0), 0, Tag1 ("Ctype", 145)), 0); (("equal_private", 1148), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -261), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -260)], (0)), 100000000, 0, -259), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -258), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -257)], (0)), 100000000, 0, -256), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -255), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -254), 0), 100000000, 0, -253), 0), 100000000, 0, -252), 0), 100000000, 0, -251), 0), 100000000, 0, -250), 0), 100000000, 0, -249), 0, (("typing/ctype.mli", 333, 15310, 15310), ("typing/ctype.mli", 335, 15378, 15421), 0), 0, Tag1 ("Ctype", 146)), 0); (("match_class_declarations", 1149), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -248), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -247)], (0)), 100000000, 0, -246), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_type"), 0, (0)), 100000000, 0, -245), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -244)], (0)), 100000000, 0, -243), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_type"), 0, (0)), 100000000, 0, -242), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("class_match_failure", 1144)), 0, (0)), 100000000, 0, -241)], (0)), 100000000, 0, -240), 0), 100000000, 0, -239), 0), 100000000, 0, -238), 0), 100000000, 0, -237), 0), 100000000, 0, -236), 0), 100000000, 0, -235), 0, (("typing/ctype.mli", 340, 15591, 15591), ("typing/ctype.mli", 342, 15688, 15734), 0), 0, Tag1 ("Ctype", 147)), 0); (("enlarge_type", 1150), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -234), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -233), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -231); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -232)]), 100000000, 0, -230), 0), 100000000, 0, -229), 0), 100000000, 0, -228), 0, (("typing/ctype.mli", 345, 15813, 15813), ("typing/ctype.mli", 345, 15813, 15869), 0), 0, Tag1 ("Ctype", 148)), 0); (("subtype", 1151), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -227), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -226), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -225), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -224), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -223), 0), 100000000, 0, -222), 0), 100000000, 0, -221), 0), 100000000, 0, -220), 0), 100000000, 0, -219), 0, (("typing/ctype.mli", 347, 15948, 15948), ("typing/ctype.mli", 347, 15948, 16008), 0), 0, Tag1 ("Ctype", 149)), 0); (("new_class_signature", 1152), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -218), (Tag3 (Tag1 ((Tag2 ("Types")), "class_signature"), 0, (0)), 100000000, 0, -217), 0), 100000000, 0, -216), 0, (("typing/ctype.mli", 355, 16272, 16272), ("typing/ctype.mli", 355, 16272, 16321), 0), 0, Tag1 ("Ctype", 150)), 0); (("add_dummy_method", 1153), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -215), (Tag1 (("scope"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -214), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_signature"), 0, (0)), 100000000, 0, -213), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -212), 0), 100000000, 0, -211), 0), 100000000, 0, -210), 0), 100000000, 0, -209), 0, (("typing/ctype.mli", 356, 16322, 16322), ("typing/ctype.mli", 356, 16322, 16390), 0), 0, Tag1 ("Ctype", 151)), 0); Tag1 (("add_method_failure", 1154), (0, 0, Tag1 ([(("Unexpected_method", 945), (0), 0, (("typing/ctype.mli", 359, 16418, 16420), ("typing/ctype.mli", 359, 16418, 16439), 0), 0, Tag1 ("Ctype", 153)); (("Type_mismatch", 946), ([(Tag3 (Tag1 ((Tag2 ("Errortrace")), "unification_error"), 0, (0)), 100000000, 0, -208)]), 0, (("typing/ctype.mli", 360, 16440, 16442), ("typing/ctype.mli", 360, 16440, 16489), 0), 0, Tag1 ("Ctype", 154))], 0), 1, 0, 0, 0, 0, 0, (("typing/ctype.mli", 358, 16392, 16392), ("typing/ctype.mli", 360, 16440, 16489), 0), 0, 0, 0, Tag1 ("Ctype", 152)), 1, 0); Tag2 (("Add_method_failed", 1155), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((("add_method_failure", 1154)), 0, (0)), 100000000, 0, -207)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Ctype", 155)), 2, 0); (("add_method", 1156), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -206), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "label"), 0, (0)), 100000000, 0, -205), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "private_flag"), 0, (0)), 100000000, 0, -204), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "virtual_flag"), 0, (0)), 100000000, 0, -203), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -202), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_signature"), 0, (0)), 100000000, 0, -201), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -200), 0), 100000000, 0, -199), 0), 100000000, 0, -198), 0), 100000000, 0, -197), 0), 100000000, 0, -196), 0), 100000000, 0, -195), 0), 100000000, 0, -194), 0, (("typing/ctype.mli", 364, 16542, 16542), ("typing/ctype.mli", 365, 16568, 16647), 0), 0, Tag1 ("Ctype", 156)), 0); Tag1 (("add_instance_variable_failure", 1157), (0, 0, Tag1 ([(("Mutability_mismatch", 950), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "mutable_flag"), 0, (0)), 100000000, 0, -192)]), 0, (("typing/ctype.mli", 368, 16686, 16688), ("typing/ctype.mli", 368, 16686, 16725), 0), 0, Tag1 ("Ctype", 158)); (("Type_mismatch", 951), ([(Tag3 (Tag1 ((Tag2 ("Errortrace")), "unification_error"), 0, (0)), 100000000, 0, -193)]), 0, (("typing/ctype.mli", 369, 16726, 16728), ("typing/ctype.mli", 369, 16726, 16775), 0), 0, Tag1 ("Ctype", 159))], 0), 1, 0, 0, 0, 0, 0, (("typing/ctype.mli", 367, 16649, 16649), ("typing/ctype.mli", 369, 16726, 16775), 0), 0, 0, 0, Tag1 ("Ctype", 157)), 1, 0); Tag2 (("Add_instance_variable_failed", 1158), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((("add_instance_variable_failure", 1157)), 0, (0)), 100000000, 0, -191)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Ctype", 160)), 2, 0); (("add_instance_variable", 1159), ((Tag1 (("strict"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -190), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -189), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "label"), 0, (0)), 100000000, 0, -188), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "mutable_flag"), 0, (0)), 100000000, 0, -187), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "virtual_flag"), 0, (0)), 100000000, 0, -186), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -185), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_signature"), 0, (0)), 100000000, 0, -184), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -183), 0), 100000000, 0, -182), 0), 100000000, 0, -181), 0), 100000000, 0, -180), 0), 100000000, 0, -179), 0), 100000000, 0, -178), 0), 100000000, 0, -177), 0), 100000000, 0, -176), 0, (("typing/ctype.mli", 373, 16850, 16850), ("typing/ctype.mli", 374, 16902, 16981), 0), 0, Tag1 ("Ctype", 161)), 0); Tag1 (("inherit_class_signature_failure", 1160), (0, 0, Tag1 ([(("Self_type_mismatch", 955), ([(Tag3 (Tag1 ((Tag2 ("Errortrace")), "unification_error"), 0, (0)), 100000000, 0, -171)]), 0, (("typing/ctype.mli", 377, 17022, 17024), ("typing/ctype.mli", 377, 17022, 17076), 0), 0, Tag1 ("Ctype", 163)); (("Method", 956), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "label"), 0, (0)), 100000000, 0, -172); (Tag3 ((("add_method_failure", 1154)), 0, (0)), 100000000, 0, -173)]), 0, (("typing/ctype.mli", 378, 17077, 17079), ("typing/ctype.mli", 378, 17077, 17117), 0), 0, Tag1 ("Ctype", 164)); (("Instance_variable", 957), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "label"), 0, (0)), 100000000, 0, -174); (Tag3 ((("add_instance_variable_failure", 1157)), 0, (0)), 100000000, 0, -175)]), 0, (("typing/ctype.mli", 379, 17118, 17120), ("typing/ctype.mli", 379, 17118, 17180), 0), 0, Tag1 ("Ctype", 165))], 0), 1, 0, 0, 0, 0, 0, (("typing/ctype.mli", 376, 16983, 16983), ("typing/ctype.mli", 379, 17118, 17180), 0), 0, 0, 0, Tag1 ("Ctype", 162)), 1, 0); Tag2 (("Inherit_class_signature_failed", 1161), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((("inherit_class_signature_failure", 1160)), 0, (0)), 100000000, 0, -170)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Ctype", 166)), 2, 0); (("inherit_class_signature", 1162), ((Tag1 (("strict"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -169), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -168), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_signature"), 0, (0)), 100000000, 0, -167), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_signature"), 0, (0)), 100000000, 0, -166), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -165), 0), 100000000, 0, -164), 0), 100000000, 0, -163), 0), 100000000, 0, -162), 0), 100000000, 0, -161), 0, (("typing/ctype.mli", 383, 17259, 17259), ("typing/ctype.mli", 384, 17313, 17357), 0), 0, Tag1 ("Ctype", 167)), 0); (("update_class_signature", 1163), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -160), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_signature"), 0, (0)), 100000000, 0, -159), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Asttypes")), "label"), 0, (0)), 100000000, 0, -156)], (0)), 100000000, 0, -155); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Asttypes")), "label"), 0, (0)), 100000000, 0, -158)], (0)), 100000000, 0, -157)]), 100000000, 0, -154), 0), 100000000, 0, -153), 0), 100000000, 0, -152), 0, (("typing/ctype.mli", 386, 17359, 17359), ("typing/ctype.mli", 387, 17388, 17441), 0), 0, Tag1 ("Ctype", 168)), 0); (("hide_private_methods", 1164), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -151), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_signature"), 0, (0)), 100000000, 0, -150), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -149), 0), 100000000, 0, -148), 0), 100000000, 0, -147), 0, (("typing/ctype.mli", 389, 17443, 17443), ("typing/ctype.mli", 389, 17443, 17502), 0), 0, Tag1 ("Ctype", 169)), 0); (("close_class_signature", 1165), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -146), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_signature"), 0, (0)), 100000000, 0, -145), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -144), 0), 100000000, 0, -143), 0), 100000000, 0, -142), 0, (("typing/ctype.mli", 391, 17504, 17504), ("typing/ctype.mli", 391, 17504, 17564), 0), 0, Tag1 ("Ctype", 170)), 0); Tag2 (("Nondep_cannot_erase", 1166), ((Tag3 ("exn", 7)), 0, ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -141)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Ctype", 171)), 2, 0); (("nondep_type", 1167), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -140), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -139)], (0)), 100000000, 0, -138), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -137), (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -136), 0), 100000000, 0, -135), 0), 100000000, 0, -134), 0), 100000000, 0, -133), 0, (("typing/ctype.mli", 395, 17608, 17608), ("typing/ctype.mli", 395, 17608, 17672), 0), 0, Tag1 ("Ctype", 172)), 0); (("nondep_type_decl", 1168), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -132), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -131)], (0)), 100000000, 0, -130), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -129), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -128), (Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -127), 0), 100000000, 0, -126), 0), 100000000, 0, -125), 0), 100000000, 0, -124), 0), 100000000, 0, -123), 0, (("typing/ctype.mli", 400, 17923, 17923), ("typing/ctype.mli", 401, 17945, 18022), 0), 0, Tag1 ("Ctype", 173)), 0); (("nondep_extension_constructor", 1169), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -122), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -121)], (0)), 100000000, 0, -120), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "extension_constructor"), 0, (0)), 100000000, 0, -119), (Tag3 (Tag1 ((Tag2 ("Types")), "extension_constructor"), 0, (0)), 100000000, 0, -118), 0), 100000000, 0, -117), 0), 100000000, 0, -116), 0), 100000000, 0, -115), 0, (("typing/ctype.mli", 403, 18065, 18065), ("typing/ctype.mli", 405, 18157, 18186), 0), 0, Tag1 ("Ctype", 174)), 0); (("nondep_class_declaration", 1170), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -114), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -113)], (0)), 100000000, 0, -112), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_declaration"), 0, (0)), 100000000, 0, -111), (Tag3 (Tag1 ((Tag2 ("Types")), "class_declaration"), 0, (0)), 100000000, 0, -110), 0), 100000000, 0, -109), 0), 100000000, 0, -108), 0), 100000000, 0, -107), 0, (("typing/ctype.mli", 407, 18234, 18234), ("typing/ctype.mli", 408, 18264, 18335), 0), 0, Tag1 ("Ctype", 175)), 0); (("nondep_cltype_declaration", 1171), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -106), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -105)], (0)), 100000000, 0, -104), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_type_declaration"), 0, (0)), 100000000, 0, -103), (Tag3 (Tag1 ((Tag2 ("Types")), "class_type_declaration"), 0, (0)), 100000000, 0, -102), 0), 100000000, 0, -101), 0), 100000000, 0, -100), 0), 100000000, 0, -99), 0, (("typing/ctype.mli", 410, 18379, 18379), ("typing/ctype.mli", 411, 18410, 18485), 0), 0, Tag1 ("Ctype", 176)), 0); (("is_contractive", 1172), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -98), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -97), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -96), 0), 100000000, 0, -95), 0), 100000000, 0, -94), 0, (("typing/ctype.mli", 414, 18613, 18613), ("typing/ctype.mli", 414, 18613, 18656), 0), 0, Tag1 ("Ctype", 177)), 0); (("normalize_type", 1173), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -93), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -92), 0), 100000000, 0, -91), 0, (("typing/ctype.mli", 415, 18657, 18657), ("typing/ctype.mli", 415, 18657, 18694), 0), 0, Tag1 ("Ctype", 178)), 0); (("nongen_vars_in_schema", 1174), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -90), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -89), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Btype")), "TypeSet"), "t"), 0, (0)), 100000000, 0, -88)], (0)), 100000000, 0, -87), 0), 100000000, 0, -86), 0), 100000000, 0, -85), 0, (("typing/ctype.mli", 417, 18696, 18696), ("typing/ctype.mli", 417, 18696, 18767), 0), 0, Tag1 ("Ctype", 179)), 0); (("nongen_vars_in_class_declaration", 1175), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_declaration"), 0, (0)), 100000000, 0, -84), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Btype")), "TypeSet"), "t"), 0, (0)), 100000000, 0, -83)], (0)), 100000000, 0, -82), 0), 100000000, 0, -81), 0, (("typing/ctype.mli", 420, 18835, 18835), ("typing/ctype.mli", 420, 18835, 18915), 0), 0, Tag1 ("Ctype", 180)), 0); Tag1 (("variable_kind", 1176), (0, 0, Tag1 ([(("Row_variable", 1019), (0), 0, (("typing/ctype.mli", 424, 19023, 19044), ("typing/ctype.mli", 424, 19023, 19056), 0), 0, Tag1 ("Ctype", 182)); (("Type_variable", 1020), (0), 0, (("typing/ctype.mli", 424, 19023, 19057), ("typing/ctype.mli", 424, 19023, 19072), 0), 0, Tag1 ("Ctype", 183))], 0), 1, 0, 0, 0, 0, 0, (("typing/ctype.mli", 424, 19023, 19023), ("typing/ctype.mli", 424, 19023, 19072), 0), 0, 1, 0, Tag1 ("Ctype", 181)), 1, 0); Tag1 (("closed_class_failure", 1177), (0, 0, [[(("free_variable", 1022), 0, (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -77); (Tag3 ((("variable_kind", 1176)), 0, (0)), 100000000, 0, -78)]), 100000000, 0, -76), (("typing/ctype.mli", 426, 19103, 19105), ("typing/ctype.mli", 426, 19103, 19146), 0), 0, Tag1 ("Ctype", 185)); (("meth", 1023), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -79), (("typing/ctype.mli", 427, 19147, 19149), ("typing/ctype.mli", 427, 19147, 19162), 0), 0, Tag1 ("Ctype", 186)); (("meth_ty", 1024), 0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -80), (("typing/ctype.mli", 428, 19163, 19165), ("typing/ctype.mli", 428, 19163, 19184), 0), 0, Tag1 ("Ctype", 187))]], 1, 0, 0, 0, 0, 0, (("typing/ctype.mli", 425, 19073, 19073), ("typing/ctype.mli", 429, 19185, 19186), 0), 0, 0, 0, Tag1 ("Ctype", 184)), 1, 0); (("free_variables", 1178), ((Tag1 (Tag1 ("env"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -75)], (0)), 100000000, 0, -74), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -73), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -72)], (0)), 100000000, 0, -71), 0), 100000000, 0, -70), 0), 100000000, 0, -69), 0, (("typing/ctype.mli", 431, 19188, 19188), ("typing/ctype.mli", 431, 19188, 19249), 0), 0, Tag1 ("Ctype", 188)), 0); (("closed_type_decl", 1179), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -68), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -67)], (0)), 100000000, 0, -66), 0), 100000000, 0, -65), 0, (("typing/ctype.mli", 433, 19322, 19322), ("typing/ctype.mli", 433, 19322, 19380), 0), 0, Tag1 ("Ctype", 189)), 0); (("closed_extension_constructor", 1180), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "extension_constructor"), 0, (0)), 100000000, 0, -64), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -63)], (0)), 100000000, 0, -62), 0), 100000000, 0, -61), 0, (("typing/ctype.mli", 434, 19381, 19381), ("typing/ctype.mli", 434, 19381, 19456), 0), 0, Tag1 ("Ctype", 190)), 0); (("closed_class", 1181), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -60)], (0)), 100000000, 0, -59), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_signature"), 0, (0)), 100000000, 0, -58), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("closed_class_failure", 1177)), 0, (0)), 100000000, 0, -57)], (0)), 100000000, 0, -56), 0), 100000000, 0, -55), 0), 100000000, 0, -54), 0, (("typing/ctype.mli", 435, 19457, 19457), ("typing/ctype.mli", 437, 19520, 19555), 0), 0, Tag1 ("Ctype", 191)), 0); (("unalias", 1182), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -53), (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -52), 0), 100000000, 0, -51), 0, (("typing/ctype.mli", 440, 19614, 19614), ("typing/ctype.mli", 440, 19614, 19649), 0), 0, Tag1 ("Ctype", 192)), 0); (("arity", 1183), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -50), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -49), 0), 100000000, 0, -48), 0, (("typing/ctype.mli", 442, 19651, 19651), ("typing/ctype.mli", 442, 19651, 19678), 0), 0, Tag1 ("Ctype", 193)), 0); (("collapse_conj_params", 1184), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -47), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -46)], (0)), 100000000, 0, -45), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -44), 0), 100000000, 0, -43), 0), 100000000, 0, -42), 0, (("typing/ctype.mli", 445, 19757, 19757), ("typing/ctype.mli", 445, 19757, 19814), 0), 0, Tag1 ("Ctype", 194)), 0); (("get_current_level", 1185), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -41), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -40), 0), 100000000, 0, -39), 0, (("typing/ctype.mli", 448, 19877, 19877), ("typing/ctype.mli", 448, 19877, 19911), 0), 0, Tag1 ("Ctype", 195)), 0); (("wrap_trace_gadt_instances", 1186), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -38), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -36), ((("b")), 100000000, 0, -35), 0), 100000000, 0, -37), (Tag1 (0, ((("a")), 100000000, 0, -36), ((("b")), 100000000, 0, -35), 0), 100000000, 0, -34), 0), 100000000, 0, -33), 0), 100000000, 0, -32), 0, (("typing/ctype.mli", 449, 19912, 19912), ("typing/ctype.mli", 449, 19912, 19974), 0), 0, Tag1 ("Ctype", 196)), 0); (("immediacy", 1187), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -31), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -30), (Tag3 (Tag1 ((Tag2 ("Type_immediacy")), "t"), 0, (0)), 100000000, 0, -29), 0), 100000000, 0, -28), 0), 100000000, 0, -27), 0, (("typing/ctype.mli", 451, 19976, 19976), ("typing/ctype.mli", 451, 19976, 20030), 0), 0, Tag1 ("Ctype", 197)), 0); (("package_subtype", 1188), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -26), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -25), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -23); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -24)]), 100000000, 0, -22)], (0)), 100000000, 0, -21), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -20), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -18); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -19)]), 100000000, 0, -17)], (0)), 100000000, 0, -16), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -15), 0), 100000000, 0, -14), 0), 100000000, 0, -13), 0), 100000000, 0, -12), 0), 100000000, 0, -11), 0), 100000000, 0, -10)], (0)), 100000000, 0, -9), 0, (("typing/ctype.mli", 454, 20044, 20044), ("typing/ctype.mli", 456, 20124, 20183), 0), 0, Tag1 ("Ctype", 198)), 0); (("mcomp", 1189), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -8), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -7), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -6), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("typing/ctype.mli", 459, 20213, 20213), ("typing/ctype.mli", 459, 20213, 20264), 0), 0, Tag1 ("Ctype", 199)), 0)], "Ctype", [("Ctype", ("\027\133EB\030\017\186iN]k}\251\199\182\161")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Types", ("\177\238\029.\220\006\163!\230\015\006\182\133\155\194\166")); ("Type_immediacy", ("\"\127k\011Q\241\211\138\193;8\142\129\141#\251")); ("Subst", ("\021\031\148\223\127\186\189\135\027}\145r\216\143\177\156")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shape", ("\235\127Y\213\025\137=\244\218\181\248N\189\188\216p")); ("Primitive", ("}Shh\162\015|\220A\203\249\232\245G\213\019")); ("Path", ("\012\183\178\025\1298\228*\021r\185\160Y\252\n\026")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Outcometree", ("9\021%\234\211\206\210\004H\165\208\2014\234Q\142")); ("Misc", ("*\026\026\234c\191\131\161\\\203\183\012O\252\153\198")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Load_path", ("\012@\228l\230\164S\172h\1726X\020\252o}")); ("Identifiable", ("\004F\207\014\158GU\001\184\214\187%/#;\211")); ("Ident", ("\b9;!\187.\220\163(x\b\174\\\223\020\004")); ("Errortrace", ("\238\196yV6<x\\\13126\144\141\000~\145")); ("Env", ("\021\n\181\142x\b\169j\227\"\017\248*\178\245\223")); ("Cmi_format", ("6\177\bU\139\"\023\152=\249\135\174\b\011Cg")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Build_path_prefix_map", ("y\028\167\207D\220\198\216\011\208\172\149\2416\bc")); ("Btype", ("z\012z\142\133\002\232\237\203U\142l\165\022\2209")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216"))], [(0)])

val mcomp : Env.t -> Types.type_expr -> Types.type_expr -> unit

val lident_of_path : Path.t -> Longident.t
type mapper = {
  attribute : mapper -> Typedtree.attribute -> Parsetree.attribute;
  attributes : mapper -> Typedtree.attribute list -> Parsetree.attribute list;
  binding_op :
    mapper ->
    Typedtree.binding_op -> Typedtree.pattern -> Parsetree.binding_op;
  case : 'k. mapper -> 'k Typedtree.case -> Parsetree.case;
  class_declaration :
    mapper -> Typedtree.class_declaration -> Parsetree.class_declaration;
  class_description :
    mapper -> Typedtree.class_description -> Parsetree.class_description;
  class_expr : mapper -> Typedtree.class_expr -> Parsetree.class_expr;
  class_field : mapper -> Typedtree.class_field -> Parsetree.class_field;
  class_signature :
    mapper -> Typedtree.class_signature -> Parsetree.class_signature;
  class_structure :
    mapper -> Typedtree.class_structure -> Parsetree.class_structure;
  class_type : mapper -> Typedtree.class_type -> Parsetree.class_type;
  class_type_declaration :
    mapper ->
    Typedtree.class_type_declaration -> Parsetree.class_type_declaration;
  class_type_field :
    mapper -> Typedtree.class_type_field -> Parsetree.class_type_field;
  constructor_declaration :
    mapper ->
    Typedtree.constructor_declaration -> Parsetree.constructor_declaration;
  expr : mapper -> Typedtree.expression -> Parsetree.expression;
  extension_constructor :
    mapper ->
    Typedtree.extension_constructor -> Parsetree.extension_constructor;
  include_declaration :
    mapper -> Typedtree.include_declaration -> Parsetree.include_declaration;
  include_description :
    mapper -> Typedtree.include_description -> Parsetree.include_description;
  label_declaration :
    mapper -> Typedtree.label_declaration -> Parsetree.label_declaration;
  location : mapper -> Location.t -> Location.t;
  module_binding :
    mapper -> Typedtree.module_binding -> Parsetree.module_binding;
  module_declaration :
    mapper -> Typedtree.module_declaration -> Parsetree.module_declaration;
  module_substitution :
    mapper -> Typedtree.module_substitution -> Parsetree.module_substitution;
  module_expr : mapper -> Typedtree.module_expr -> Parsetree.module_expr;
  module_type : mapper -> Typedtree.module_type -> Parsetree.module_type;
  module_type_declaration :
    mapper ->
    Typedtree.module_type_declaration -> Parsetree.module_type_declaration;
  package_type : mapper -> Typedtree.package_type -> Parsetree.package_type;
  open_declaration :
    mapper -> Typedtree.open_declaration -> Parsetree.open_declaration;
  open_description :
    mapper -> Typedtree.open_description -> Parsetree.open_description;
  pat : 'k. mapper -> 'k Typedtree.general_pattern -> Parsetree.pattern;
  row_field : mapper -> Typedtree.row_field -> Parsetree.row_field;
  object_field : mapper -> Typedtree.object_field -> Parsetree.object_field;
  signature : mapper -> Typedtree.signature -> Parsetree.signature;
  signature_item :
    mapper -> Typedtree.signature_item -> Parsetree.signature_item;
  structure : mapper -> Typedtree.structure -> Parsetree.structure;
  structure_item :
    mapper -> Typedtree.structure_item -> Parsetree.structure_item;
  typ : mapper -> Typedtree.core_type -> Parsetree.core_type;
  type_declaration :
    mapper -> Typedtree.type_declaration -> Parsetree.type_declaration;
  type_extension :
    mapper -> Typedtree.type_extension -> Parsetree.type_extension;
  type_exception :
    mapper -> Typedtree.type_exception -> Parsetree.type_exception;
  type_kind : mapper -> Typedtree.type_kind -> Parsetree.type_kind;
  value_binding :
    mapper -> Typedtree.value_binding -> Parsetree.value_binding;
  value_description :
    mapper -> Typedtree.value_description -> Parsetree.value_description;
  with_constraint :
    mapper ->
    Path.t * Longident.t Location.loc * Typedtree.with_constraint ->
    Parsetree.with_constraint;
}
val default_mapper : mapper
val untype_structure :
  ?mapper:mapper -> Typedtree.structure -> Parsetree.structure
val untype_signature :
  ?mapper:mapper -> Typedtree.signature -> Parsetree.signature
val untype_expression :
  ?mapper:mapper -> Typedtree.expression -> Parsetree.expression
val untype_pattern :
  ?mapper:mapper -> 'a Typedtree.general_pattern -> Parsetree.pattern
("DEBUG:rule", [(("lident_of_path", 621), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -265), (Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -264), 0), 100000000, 0, -263), 0, (("typing/untypeast.mli", 18, 1095, 1095), ("typing/untypeast.mli", 18, 1095, 1137), 0), 0, Tag1 ("Untypeast", 2)), 0); Tag1 (("mapper", 622), (0, 0, [[(("attribute", 465), 0, (Tag1 (0, (Tag3 ((("mapper", 622)), 0, (0)), 100000000, 0, -35), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "attribute"), 0, (0)), 100000000, 0, -34), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "attribute"), 0, (0)), 100000000, 0, -33), 0), 100000000, 0, -32), 0), 100000000, 0, -31), (("typing/untypeast.mli", 21, 1155, 1157), ("typing/untypeast.mli", 21, 1155, 1211), 0), 0, Tag1 ("Untypeast", 7)); (("attributes", 466), 0, (Tag1 (0, (Tag3 ((("mapper", 622)), 0, (0)), 100000000, 0, -42), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "attribute"), 0, (0)), 100000000, 0, -41)], (0)), 100000000, 0, -40), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Parsetree")), "attribute"), 0, (0)), 100000000, 0, -39)], (0)), 100000000, 0, -38), 0), 100000000, 0, -37), 0), 100000000, 0, -36), (("typing/untypeast.mli", 22, 1212, 1214), ("typing/untypeast.mli", 22, 1212, 1279), 0), 0, Tag1 ("Untypeast", 8)); (("binding_op", 467), 0, (Tag1 (0, (Tag3 ((("mapper", 622)), 0, (0)), 100000000, 0, -49), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "binding_op"), 0, (0)), 100000000, 0, -48), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -47), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "binding_op"), 0, (0)), 100000000, 0, -46), 0), 100000000, 0, -45), 0), 100000000, 0, -44), 0), 100000000, 0, -43), (("typing/untypeast.mli", 23, 1280, 1282), ("typing/untypeast.mli", 25, 1308, 1368), 0), 0, Tag1 ("Untypeast", 9)); (("case", 468), 0, (Tag10 ((Tag1 (0, (Tag3 ((("mapper", 622)), 0, (0)), 100000000, 0, -56), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "case"), [(Tag9 (("k")), 100000000, 0, -51)], (0)), 100000000, 0, -55), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "case"), 0, (0)), 100000000, 0, -54), 0), 100000000, 0, -53), 0), 100000000, 0, -52), [(Tag9 (("k")), 100000000, 0, -51)]), 100000000, 0, -50), (("typing/untypeast.mli", 26, 1369, 1371), ("typing/untypeast.mli", 26, 1369, 1418), 0), 0, Tag1 ("Untypeast", 10)); (("class_declaration", 469), 0, (Tag1 (0, (Tag3 ((("mapper", 622)), 0, (0)), 100000000, 0, -61), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "class_declaration"), 0, (0)), 100000000, 0, -60), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "class_declaration"), 0, (0)), 100000000, 0, -59), 0), 100000000, 0, -58), 0), 100000000, 0, -57), (("typing/untypeast.mli", 27, 1419, 1421), ("typing/untypeast.mli", 27, 1419, 1499), 0), 0, Tag1 ("Untypeast", 11)); (("class_description", 470), 0, (Tag1 (0, (Tag3 ((("mapper", 622)), 0, (0)), 100000000, 0, -66), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "class_description"), 0, (0)), 100000000, 0, -65), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "class_description"), 0, (0)), 100000000, 0, -64), 0), 100000000, 0, -63), 0), 100000000, 0, -62), (("typing/untypeast.mli", 28, 1500, 1502), ("typing/untypeast.mli", 28, 1500, 1580), 0), 0, Tag1 ("Untypeast", 12)); (("class_expr", 471), 0, (Tag1 (0, (Tag3 ((("mapper", 622)), 0, (0)), 100000000, 0, -71), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "class_expr"), 0, (0)), 100000000, 0, -70), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "class_expr"), 0, (0)), 100000000, 0, -69), 0), 100000000, 0, -68), 0), 100000000, 0, -67), (("typing/untypeast.mli", 29, 1581, 1583), ("typing/untypeast.mli", 29, 1581, 1640), 0), 0, Tag1 ("Untypeast", 13)); (("class_field", 472), 0, (Tag1 (0, (Tag3 ((("mapper", 622)), 0, (0)), 100000000, 0, -76), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "class_field"), 0, (0)), 100000000, 0, -75), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "class_field"), 0, (0)), 100000000, 0, -74), 0), 100000000, 0, -73), 0), 100000000, 0, -72), (("typing/untypeast.mli", 30, 1641, 1643), ("typing/untypeast.mli", 30, 1641, 1703), 0), 0, Tag1 ("Untypeast", 14)); (("class_signature", 473), 0, (Tag1 (0, (Tag3 ((("mapper", 622)), 0, (0)), 100000000, 0, -81), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "class_signature"), 0, (0)), 100000000, 0, -80), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "class_signature"), 0, (0)), 100000000, 0, -79), 0), 100000000, 0, -78), 0), 100000000, 0, -77), (("typing/untypeast.mli", 31, 1704, 1706), ("typing/untypeast.mli", 31, 1704, 1778), 0), 0, Tag1 ("Untypeast", 15)); (("class_structure", 474), 0, (Tag1 (0, (Tag3 ((("mapper", 622)), 0, (0)), 100000000, 0, -86), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "class_structure"), 0, (0)), 100000000, 0, -85), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "class_structure"), 0, (0)), 100000000, 0, -84), 0), 100000000, 0, -83), 0), 100000000, 0, -82), (("typing/untypeast.mli", 32, 1779, 1781), ("typing/untypeast.mli", 32, 1779, 1853), 0), 0, Tag1 ("Untypeast", 16)); (("class_type", 475), 0, (Tag1 (0, (Tag3 ((("mapper", 622)), 0, (0)), 100000000, 0, -91), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "class_type"), 0, (0)), 100000000, 0, -90), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "class_type"), 0, (0)), 100000000, 0, -89), 0), 100000000, 0, -88), 0), 100000000, 0, -87), (("typing/untypeast.mli", 33, 1854, 1856), ("typing/untypeast.mli", 33, 1854, 1913), 0), 0, Tag1 ("Untypeast", 17)); (("class_type_declaration", 476), 0, (Tag1 (0, (Tag3 ((("mapper", 622)), 0, (0)), 100000000, 0, -96), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "class_type_declaration"), 0, (0)), 100000000, 0, -95), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "class_type_declaration"), 0, (0)), 100000000, 0, -94), 0), 100000000, 0, -93), 0), 100000000, 0, -92), (("typing/untypeast.mli", 34, 1914, 1916), ("typing/untypeast.mli", 35, 1983, 2035), 0), 0, Tag1 ("Untypeast", 18)); (("class_type_field", 477), 0, (Tag1 (0, (Tag3 ((("mapper", 622)), 0, (0)), 100000000, 0, -101), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "class_type_field"), 0, (0)), 100000000, 0, -100), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "class_type_field"), 0, (0)), 100000000, 0, -99), 0), 100000000, 0, -98), 0), 100000000, 0, -97), (("typing/untypeast.mli", 36, 2036, 2038), ("typing/untypeast.mli", 36, 2036, 2113), 0), 0, Tag1 ("Untypeast", 19)); (("constructor_declaration", 478), 0, (Tag1 (0, (Tag3 ((("mapper", 622)), 0, (0)), 100000000, 0, -106), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "constructor_declaration"), 0, (0)), 100000000, 0, -105), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "constructor_declaration"), 0, (0)), 100000000, 0, -104), 0), 100000000, 0, -103), 0), 100000000, 0, -102), (("typing/untypeast.mli", 37, 2114, 2116), ("typing/untypeast.mli", 38, 2185, 2239), 0), 0, Tag1 ("Untypeast", 20)); (("expr", 479), 0, (Tag1 (0, (Tag3 ((("mapper", 622)), 0, (0)), 100000000, 0, -111), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "expression"), 0, (0)), 100000000, 0, -110), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "expression"), 0, (0)), 100000000, 0, -109), 0), 100000000, 0, -108), 0), 100000000, 0, -107), (("typing/untypeast.mli", 39, 2240, 2242), ("typing/untypeast.mli", 39, 2240, 2293), 0), 0, Tag1 ("Untypeast", 21)); (("extension_constructor", 480), 0, (Tag1 (0, (Tag3 ((("mapper", 622)), 0, (0)), 100000000, 0, -116), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "extension_constructor"), 0, (0)), 100000000, 0, -115), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "extension_constructor"), 0, (0)), 100000000, 0, -114), 0), 100000000, 0, -113), 0), 100000000, 0, -112), (("typing/untypeast.mli", 40, 2294, 2296), ("typing/untypeast.mli", 41, 2361, 2411), 0), 0, Tag1 ("Untypeast", 22)); (("include_declaration", 481), 0, (Tag1 (0, (Tag3 ((("mapper", 622)), 0, (0)), 100000000, 0, -121), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "include_declaration"), 0, (0)), 100000000, 0, -120), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "include_declaration"), 0, (0)), 100000000, 0, -119), 0), 100000000, 0, -118), 0), 100000000, 0, -117), (("typing/untypeast.mli", 42, 2412, 2414), ("typing/untypeast.mli", 43, 2435, 2502), 0), 0, Tag1 ("Untypeast", 23)); (("include_description", 482), 0, (Tag1 (0, (Tag3 ((("mapper", 622)), 0, (0)), 100000000, 0, -126), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "include_description"), 0, (0)), 100000000, 0, -125), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "include_description"), 0, (0)), 100000000, 0, -124), 0), 100000000, 0, -123), 0), 100000000, 0, -122), (("typing/untypeast.mli", 44, 2503, 2505), ("typing/untypeast.mli", 45, 2526, 2593), 0), 0, Tag1 ("Untypeast", 24)); (("label_declaration", 483), 0, (Tag1 (0, (Tag3 ((("mapper", 622)), 0, (0)), 100000000, 0, -131), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "label_declaration"), 0, (0)), 100000000, 0, -130), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "label_declaration"), 0, (0)), 100000000, 0, -129), 0), 100000000, 0, -128), 0), 100000000, 0, -127), (("typing/untypeast.mli", 46, 2594, 2596), ("typing/untypeast.mli", 47, 2615, 2678), 0), 0, Tag1 ("Untypeast", 25)); (("location", 550), 0, (Tag1 (0, (Tag3 ((("mapper", 622)), 0, (0)), 100000000, 0, -136), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -135), (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -134), 0), 100000000, 0, -133), 0), 100000000, 0, -132), (("typing/untypeast.mli", 48, 2679, 2681), ("typing/untypeast.mli", 48, 2679, 2726), 0), 0, Tag1 ("Untypeast", 26)); (("module_binding", 551), 0, (Tag1 (0, (Tag3 ((("mapper", 622)), 0, (0)), 100000000, 0, -141), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_binding"), 0, (0)), 100000000, 0, -140), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "module_binding"), 0, (0)), 100000000, 0, -139), 0), 100000000, 0, -138), 0), 100000000, 0, -137), (("typing/untypeast.mli", 49, 2727, 2729), ("typing/untypeast.mli", 49, 2727, 2798), 0), 0, Tag1 ("Untypeast", 27)); (("module_declaration", 552), 0, (Tag1 (0, (Tag3 ((("mapper", 622)), 0, (0)), 100000000, 0, -146), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_declaration"), 0, (0)), 100000000, 0, -145), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "module_declaration"), 0, (0)), 100000000, 0, -144), 0), 100000000, 0, -143), 0), 100000000, 0, -142), (("typing/untypeast.mli", 50, 2799, 2801), ("typing/untypeast.mli", 51, 2821, 2886), 0), 0, Tag1 ("Untypeast", 28)); (("module_substitution", 553), 0, (Tag1 (0, (Tag3 ((("mapper", 622)), 0, (0)), 100000000, 0, -151), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_substitution"), 0, (0)), 100000000, 0, -150), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "module_substitution"), 0, (0)), 100000000, 0, -149), 0), 100000000, 0, -148), 0), 100000000, 0, -147), (("typing/untypeast.mli", 52, 2887, 2889), ("typing/untypeast.mli", 53, 2910, 2977), 0), 0, Tag1 ("Untypeast", 29)); (("module_expr", 554), 0, (Tag1 (0, (Tag3 ((("mapper", 622)), 0, (0)), 100000000, 0, -156), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_expr"), 0, (0)), 100000000, 0, -155), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "module_expr"), 0, (0)), 100000000, 0, -154), 0), 100000000, 0, -153), 0), 100000000, 0, -152), (("typing/untypeast.mli", 54, 2978, 2980), ("typing/untypeast.mli", 54, 2978, 3040), 0), 0, Tag1 ("Untypeast", 30)); (("module_type", 555), 0, (Tag1 (0, (Tag3 ((("mapper", 622)), 0, (0)), 100000000, 0, -161), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_type"), 0, (0)), 100000000, 0, -160), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "module_type"), 0, (0)), 100000000, 0, -159), 0), 100000000, 0, -158), 0), 100000000, 0, -157), (("typing/untypeast.mli", 55, 3041, 3043), ("typing/untypeast.mli", 55, 3041, 3103), 0), 0, Tag1 ("Untypeast", 31)); (("module_type_declaration", 556), 0, (Tag1 (0, (Tag3 ((("mapper", 622)), 0, (0)), 100000000, 0, -166), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "module_type_declaration"), 0, (0)), 100000000, 0, -165), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "module_type_declaration"), 0, (0)), 100000000, 0, -164), 0), 100000000, 0, -163), 0), 100000000, 0, -162), (("typing/untypeast.mli", 56, 3104, 3106), ("typing/untypeast.mli", 57, 3131, 3206), 0), 0, Tag1 ("Untypeast", 32)); (("package_type", 557), 0, (Tag1 (0, (Tag3 ((("mapper", 622)), 0, (0)), 100000000, 0, -171), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "package_type"), 0, (0)), 100000000, 0, -170), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "package_type"), 0, (0)), 100000000, 0, -169), 0), 100000000, 0, -168), 0), 100000000, 0, -167), (("typing/untypeast.mli", 58, 3207, 3209), ("typing/untypeast.mli", 58, 3207, 3272), 0), 0, Tag1 ("Untypeast", 33)); (("open_declaration", 558), 0, (Tag1 (0, (Tag3 ((("mapper", 622)), 0, (0)), 100000000, 0, -176), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "open_declaration"), 0, (0)), 100000000, 0, -175), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "open_declaration"), 0, (0)), 100000000, 0, -174), 0), 100000000, 0, -173), 0), 100000000, 0, -172), (("typing/untypeast.mli", 59, 3273, 3275), ("typing/untypeast.mli", 59, 3273, 3350), 0), 0, Tag1 ("Untypeast", 34)); (("open_description", 559), 0, (Tag1 (0, (Tag3 ((("mapper", 622)), 0, (0)), 100000000, 0, -181), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "open_description"), 0, (0)), 100000000, 0, -180), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "open_description"), 0, (0)), 100000000, 0, -179), 0), 100000000, 0, -178), 0), 100000000, 0, -177), (("typing/untypeast.mli", 60, 3351, 3353), ("typing/untypeast.mli", 60, 3351, 3428), 0), 0, Tag1 ("Untypeast", 35)); (("pat", 560), 0, (Tag10 ((Tag1 (0, (Tag3 ((("mapper", 622)), 0, (0)), 100000000, 0, -188), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "general_pattern"), [(Tag9 (("k")), 100000000, 0, -183)], (0)), 100000000, 0, -187), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "pattern"), 0, (0)), 100000000, 0, -186), 0), 100000000, 0, -185), 0), 100000000, 0, -184), [(Tag9 (("k")), 100000000, 0, -183)]), 100000000, 0, -182), (("typing/untypeast.mli", 61, 3429, 3431), ("typing/untypeast.mli", 61, 3429, 3491), 0), 0, Tag1 ("Untypeast", 36)); (("row_field", 561), 0, (Tag1 (0, (Tag3 ((("mapper", 622)), 0, (0)), 100000000, 0, -193), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "row_field"), 0, (0)), 100000000, 0, -192), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "row_field"), 0, (0)), 100000000, 0, -191), 0), 100000000, 0, -190), 0), 100000000, 0, -189), (("typing/untypeast.mli", 62, 3492, 3494), ("typing/untypeast.mli", 62, 3492, 3548), 0), 0, Tag1 ("Untypeast", 37)); (("object_field", 562), 0, (Tag1 (0, (Tag3 ((("mapper", 622)), 0, (0)), 100000000, 0, -198), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "object_field"), 0, (0)), 100000000, 0, -197), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "object_field"), 0, (0)), 100000000, 0, -196), 0), 100000000, 0, -195), 0), 100000000, 0, -194), (("typing/untypeast.mli", 63, 3549, 3551), ("typing/untypeast.mli", 63, 3549, 3614), 0), 0, Tag1 ("Untypeast", 38)); (("signature", 563), 0, (Tag1 (0, (Tag3 ((("mapper", 622)), 0, (0)), 100000000, 0, -203), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "signature"), 0, (0)), 100000000, 0, -202), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "signature"), 0, (0)), 100000000, 0, -201), 0), 100000000, 0, -200), 0), 100000000, 0, -199), (("typing/untypeast.mli", 64, 3615, 3617), ("typing/untypeast.mli", 64, 3615, 3671), 0), 0, Tag1 ("Untypeast", 39)); (("signature_item", 564), 0, (Tag1 (0, (Tag3 ((("mapper", 622)), 0, (0)), 100000000, 0, -208), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "signature_item"), 0, (0)), 100000000, 0, -207), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "signature_item"), 0, (0)), 100000000, 0, -206), 0), 100000000, 0, -205), 0), 100000000, 0, -204), (("typing/untypeast.mli", 65, 3672, 3674), ("typing/untypeast.mli", 65, 3672, 3743), 0), 0, Tag1 ("Untypeast", 40)); (("structure", 565), 0, (Tag1 (0, (Tag3 ((("mapper", 622)), 0, (0)), 100000000, 0, -213), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "structure"), 0, (0)), 100000000, 0, -212), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "structure"), 0, (0)), 100000000, 0, -211), 0), 100000000, 0, -210), 0), 100000000, 0, -209), (("typing/untypeast.mli", 66, 3744, 3746), ("typing/untypeast.mli", 66, 3744, 3800), 0), 0, Tag1 ("Untypeast", 41)); (("structure_item", 566), 0, (Tag1 (0, (Tag3 ((("mapper", 622)), 0, (0)), 100000000, 0, -218), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "structure_item"), 0, (0)), 100000000, 0, -217), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "structure_item"), 0, (0)), 100000000, 0, -216), 0), 100000000, 0, -215), 0), 100000000, 0, -214), (("typing/untypeast.mli", 67, 3801, 3803), ("typing/untypeast.mli", 67, 3801, 3872), 0), 0, Tag1 ("Untypeast", 42)); (("typ", 567), 0, (Tag1 (0, (Tag3 ((("mapper", 622)), 0, (0)), 100000000, 0, -223), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "core_type"), 0, (0)), 100000000, 0, -222), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "core_type"), 0, (0)), 100000000, 0, -221), 0), 100000000, 0, -220), 0), 100000000, 0, -219), (("typing/untypeast.mli", 68, 3873, 3875), ("typing/untypeast.mli", 68, 3873, 3923), 0), 0, Tag1 ("Untypeast", 43)); (("type_declaration", 568), 0, (Tag1 (0, (Tag3 ((("mapper", 622)), 0, (0)), 100000000, 0, -228), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "type_declaration"), 0, (0)), 100000000, 0, -227), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "type_declaration"), 0, (0)), 100000000, 0, -226), 0), 100000000, 0, -225), 0), 100000000, 0, -224), (("typing/untypeast.mli", 69, 3924, 3926), ("typing/untypeast.mli", 69, 3924, 4001), 0), 0, Tag1 ("Untypeast", 44)); (("type_extension", 569), 0, (Tag1 (0, (Tag3 ((("mapper", 622)), 0, (0)), 100000000, 0, -233), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "type_extension"), 0, (0)), 100000000, 0, -232), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "type_extension"), 0, (0)), 100000000, 0, -231), 0), 100000000, 0, -230), 0), 100000000, 0, -229), (("typing/untypeast.mli", 70, 4002, 4004), ("typing/untypeast.mli", 70, 4002, 4073), 0), 0, Tag1 ("Untypeast", 45)); (("type_exception", 570), 0, (Tag1 (0, (Tag3 ((("mapper", 622)), 0, (0)), 100000000, 0, -238), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "type_exception"), 0, (0)), 100000000, 0, -237), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "type_exception"), 0, (0)), 100000000, 0, -236), 0), 100000000, 0, -235), 0), 100000000, 0, -234), (("typing/untypeast.mli", 71, 4074, 4076), ("typing/untypeast.mli", 71, 4074, 4145), 0), 0, Tag1 ("Untypeast", 46)); (("type_kind", 571), 0, (Tag1 (0, (Tag3 ((("mapper", 622)), 0, (0)), 100000000, 0, -243), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "type_kind"), 0, (0)), 100000000, 0, -242), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "type_kind"), 0, (0)), 100000000, 0, -241), 0), 100000000, 0, -240), 0), 100000000, 0, -239), (("typing/untypeast.mli", 72, 4146, 4148), ("typing/untypeast.mli", 72, 4146, 4202), 0), 0, Tag1 ("Untypeast", 47)); (("value_binding", 572), 0, (Tag1 (0, (Tag3 ((("mapper", 622)), 0, (0)), 100000000, 0, -248), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "value_binding"), 0, (0)), 100000000, 0, -247), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "value_binding"), 0, (0)), 100000000, 0, -246), 0), 100000000, 0, -245), 0), 100000000, 0, -244), (("typing/untypeast.mli", 73, 4203, 4205), ("typing/untypeast.mli", 73, 4203, 4271), 0), 0, Tag1 ("Untypeast", 48)); (("value_description", 573), 0, (Tag1 (0, (Tag3 ((("mapper", 622)), 0, (0)), 100000000, 0, -253), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "value_description"), 0, (0)), 100000000, 0, -252), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "value_description"), 0, (0)), 100000000, 0, -251), 0), 100000000, 0, -250), 0), 100000000, 0, -249), (("typing/untypeast.mli", 74, 4272, 4274), ("typing/untypeast.mli", 74, 4272, 4352), 0), 0, Tag1 ("Untypeast", 49)); (("with_constraint", 574), 0, (Tag1 (0, (Tag3 ((("mapper", 622)), 0, (0)), 100000000, 0, -262), (Tag1 (0, (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -258); (Tag3 (Tag1 ((Tag2 ("Location")), "loc"), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -260)], (0)), 100000000, 0, -259); (Tag3 (Tag1 ((Tag2 ("Typedtree")), "with_constraint"), 0, (0)), 100000000, 0, -261)]), 100000000, 0, -257), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "with_constraint"), 0, (0)), 100000000, 0, -256), 0), 100000000, 0, -255), 0), 100000000, 0, -254), (("typing/untypeast.mli", 75, 4353, 4355), ("typing/untypeast.mli", 77, 4450, 4473), 0), 0, Tag1 ("Untypeast", 50))]], 1, 0, 0, 0, 0, 0, (("typing/untypeast.mli", 20, 1139, 1139), ("typing/untypeast.mli", 78, 4474, 4475), 0), 0, 0, 0, Tag1 ("Untypeast", 3)), 1, 0); (("default_mapper", 623), ((Tag3 ((("mapper", 622)), 0, (0)), 100000000, 0, -30), 0, (("typing/untypeast.mli", 80, 4477, 4477), ("typing/untypeast.mli", 80, 4477, 4504), 0), 0, Tag1 ("Untypeast", 51)), 0); (("untype_structure", 624), ((Tag1 (Tag1 ("mapper"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("mapper", 622)), 0, (0)), 100000000, 0, -29)], (0)), 100000000, 0, -28), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "structure"), 0, (0)), 100000000, 0, -27), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "structure"), 0, (0)), 100000000, 0, -26), 0), 100000000, 0, -25), 0), 100000000, 0, -24), 0, (("typing/untypeast.mli", 82, 4506, 4506), ("typing/untypeast.mli", 82, 4506, 4579), 0), 0, Tag1 ("Untypeast", 52)), 0); (("untype_signature", 625), ((Tag1 (Tag1 ("mapper"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("mapper", 622)), 0, (0)), 100000000, 0, -23)], (0)), 100000000, 0, -22), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "signature"), 0, (0)), 100000000, 0, -21), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "signature"), 0, (0)), 100000000, 0, -20), 0), 100000000, 0, -19), 0), 100000000, 0, -18), 0, (("typing/untypeast.mli", 83, 4580, 4580), ("typing/untypeast.mli", 83, 4580, 4653), 0), 0, Tag1 ("Untypeast", 53)), 0); (("untype_expression", 626), ((Tag1 (Tag1 ("mapper"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("mapper", 622)), 0, (0)), 100000000, 0, -17)], (0)), 100000000, 0, -16), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "expression"), 0, (0)), 100000000, 0, -15), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "expression"), 0, (0)), 100000000, 0, -14), 0), 100000000, 0, -13), 0), 100000000, 0, -12), 0, (("typing/untypeast.mli", 84, 4654, 4654), ("typing/untypeast.mli", 84, 4654, 4730), 0), 0, Tag1 ("Untypeast", 54)), 0); (("untype_pattern", 627), ((Tag1 (Tag1 ("mapper"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("mapper", 622)), 0, (0)), 100000000, 0, -11)], (0)), 100000000, 0, -10), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "general_pattern"), [((0), 100000000, 0, -9)], (0)), 100000000, 0, -8), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "pattern"), 0, (0)), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("typing/untypeast.mli", 85, 4731, 4731), ("typing/untypeast.mli", 85, 4731, 4808), 0), 0, Tag1 ("Untypeast", 55)), 0); (("constant", 628), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "constant"), 0, (0)), 100000000, 0, -4), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "constant"), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("typing/untypeast.mli", 87, 4810, 4810), ("typing/untypeast.mli", 87, 4810, 4864), 0), 0, Tag1 ("Untypeast", 56)), 0)], "Untypeast", [("Untypeast", ("\140O\022\200tW\029j\206\130*\021 \181\031\027")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Types", ("\177\238\029.\220\006\163!\230\015\006\182\133\155\194\166")); ("Typedtree", ("c5z\186\175w\146\254\018V\184\031\0038\004\227")); ("Type_immediacy", ("\"\127k\011Q\241\211\138\193;8\142\129\141#\251")); ("Subst", ("\021\031\148\223\127\186\189\135\027}\145r\216\143\177\156")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shape", ("\235\127Y\213\025\137=\244\218\181\248N\189\188\216p")); ("Primitive", ("}Shh\162\015|\220A\203\249\232\245G\213\019")); ("Path", ("\012\183\178\025\1298\228*\021r\185\160Y\252\n\026")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Outcometree", ("9\021%\234\211\206\210\004H\165\208\2014\234Q\142")); ("Misc", ("*\026\026\234c\191\131\161\\\203\183\012O\252\153\198")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Load_path", ("\012@\228l\230\164S\172h\1726X\020\252o}")); ("Identifiable", ("\004F\207\014\158GU\001\184\214\187%/#;\211")); ("Ident", ("\b9;!\187.\220\163(x\b\174\\\223\020\004")); ("Env", ("\021\n\181\142x\b\169j\227\"\017\248*\178\245\223")); ("Cmi_format", ("6\177\bU\139\"\023\152=\249\135\174\b\011Cg")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Build_path_prefix_map", ("y\028\167\207D\220\198\216\011\208\172\149\2416\bc")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216"))], [(0)])
val constant : Asttypes.constant -> Parsetree.constant

val transl_type_decl :
  Env.t ->
  Asttypes.rec_flag ->
  Parsetree.type_declaration list -> Typedtree.type_declaration list * Env.t
val transl_exception :
  Env.t ->
  Parsetree.extension_constructor -> Typedtree.extension_constructor * Env.t
val transl_type_exception :
  Env.t -> Parsetree.type_exception -> Typedtree.type_exception * Env.t
val transl_type_extension :
  bool ->
  Env.t ->
  Location.t -> Parsetree.type_extension -> Typedtree.type_extension * Env.t
val transl_value_decl :
  Env.t ->
  Location.t ->
  Parsetree.value_description -> Typedtree.value_description * Env.t
val transl_with_constraint :
  Ident.t ->
  ?fixed_row_path:Path.t ->
  sig_env:Env.t ->
  sig_decl:Types.type_declaration ->
  outer_env:Env.t -> Parsetree.type_declaration -> Typedtree.type_declaration
val abstract_type_decl : injective:bool -> int -> Types.type_declaration
val approx_type_decl :
  Parsetree.type_declaration list -> (Ident.t * Types.type_declaration) list
val check_recmod_typedecl :
  Env.t ->
  Location.t -> Ident.t list -> Path.t -> Types.type_declaration -> unit
val check_coherence :
  Env.t -> Location.t -> Path.t -> Types.type_declaration -> unit
val is_fixed_type : Parsetree.type_declaration -> bool
type native_repr_kind = Unboxed | Untagged
type reaching_type_path = reaching_type_step list
and reaching_type_step =
    Expands_to of Types.type_expr * Types.type_expr
  | Contains of Types.type_expr * Types.type_expr
type error =
    Repeated_parameter
  | Duplicate_constructor of string
  | Too_many_constructors
  | Duplicate_label of string
  | Recursive_abbrev of string * Env.t * reaching_type_path
  | Cycle_in_def of string * Env.t * reaching_type_path
  | Definition_mismatch of Types.type_expr * Env.t *
      Includecore.type_mismatch option
  | Constraint_failed of Env.t * Errortrace.unification_error
  | Inconsistent_constraint of Env.t * Errortrace.unification_error
  | Type_clash of Env.t * Errortrace.unification_error
  | Non_regular of { definition : Path.t; used_as : Types.type_expr;
      defined_as : Types.type_expr; reaching_path : reaching_type_path;
    }
  | Null_arity_external
  | Missing_native_external
  | Unbound_type_var of Types.type_expr * Types.type_declaration
  | Cannot_extend_private_type of Path.t
  | Not_extensible_type of Path.t
  | Extension_mismatch of Path.t * Env.t * Includecore.type_mismatch
  | Rebind_wrong_type of Longident.t * Env.t * Errortrace.unification_error
  | Rebind_mismatch of Longident.t * Path.t * Path.t
  | Rebind_private of Longident.t
  | Variance of Typedecl_variance.error
  | Unavailable_type_constructor of Path.t
  | Unbound_type_var_ext of Types.type_expr * Types.extension_constructor
  | Val_in_structure
  | Multiple_native_repr_attributes
  | Cannot_unbox_or_untag_type of native_repr_kind
  | Deep_unbox_or_untag_attribute of native_repr_kind
  | Immediacy of Typedecl_immediacy.error
  | Separability of Typedecl_separability.error
  | Bad_unboxed_attribute of string
  | Boxed_and_unboxed
  | Nonrec_gadt
  | Invalid_private_row_declaration of Types.type_expr
exception Error of Location.t * error
("DEBUG:rule", [(("transl_type_decl", 1150), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -155), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "rec_flag"), 0, (0)), 100000000, 0, -154), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Parsetree")), "type_declaration"), 0, (0)), 100000000, 0, -153)], (0)), 100000000, 0, -152), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "type_declaration"), 0, (0)), 100000000, 0, -150)], (0)), 100000000, 0, -149); (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -151)]), 100000000, 0, -148), 0), 100000000, 0, -147), 0), 100000000, 0, -146), 0), 100000000, 0, -145), 0, (("typing/typedecl.mli", 21, 1163, 1163), ("typing/typedecl.mli", 23, 1254, 1297), 0), 0, Tag1 ("Typedecl", 6)), 0); (("transl_exception", 1151), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -144), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "extension_constructor"), 0, (0)), 100000000, 0, -143), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Typedtree")), "extension_constructor"), 0, (0)), 100000000, 0, -141); (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -142)]), 100000000, 0, -140), 0), 100000000, 0, -139), 0), 100000000, 0, -138), 0, (("typing/typedecl.mli", 25, 1299, 1299), ("typing/typedecl.mli", 27, 1369, 1412), 0), 0, Tag1 ("Typedecl", 7)), 0); (("transl_type_exception", 1152), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -137), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "type_exception"), 0, (0)), 100000000, 0, -136), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Typedtree")), "type_exception"), 0, (0)), 100000000, 0, -134); (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -135)]), 100000000, 0, -133), 0), 100000000, 0, -132), 0), 100000000, 0, -131), 0, (("typing/typedecl.mli", 29, 1414, 1414), ("typing/typedecl.mli", 31, 1454, 1518), 0), 0, Tag1 ("Typedecl", 8)), 0); (("transl_type_extension", 1153), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -130), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -129), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -128), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "type_extension"), 0, (0)), 100000000, 0, -127), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Typedtree")), "type_extension"), 0, (0)), 100000000, 0, -125); (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -126)]), 100000000, 0, -124), 0), 100000000, 0, -123), 0), 100000000, 0, -122), 0), 100000000, 0, -121), 0), 100000000, 0, -120), 0, (("typing/typedecl.mli", 33, 1520, 1520), ("typing/typedecl.mli", 35, 1610, 1646), 0), 0, Tag1 ("Typedecl", 9)), 0); (("transl_value_decl", 1154), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -119), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -118), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "value_description"), 0, (0)), 100000000, 0, -117), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Typedtree")), "value_description"), 0, (0)), 100000000, 0, -115); (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -116)]), 100000000, 0, -114), 0), 100000000, 0, -113), 0), 100000000, 0, -112), 0), 100000000, 0, -111), 0, (("typing/typedecl.mli", 37, 1648, 1648), ("typing/typedecl.mli", 39, 1698, 1768), 0), 0, Tag1 ("Typedecl", 10)), 0); (("transl_with_constraint", 1155), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -110), (Tag1 (Tag1 ("fixed_row_path"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -109)], (0)), 100000000, 0, -108), (Tag1 (("sig_env"), (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -107), (Tag1 (("sig_decl"), (Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -106), (Tag1 (("outer_env"), (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -105), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "type_declaration"), 0, (0)), 100000000, 0, -104), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "type_declaration"), 0, (0)), 100000000, 0, -103), 0), 100000000, 0, -102), 0), 100000000, 0, -101), 0), 100000000, 0, -100), 0), 100000000, 0, -99), 0), 100000000, 0, -98), 0), 100000000, 0, -97), 0, (("typing/typedecl.mli", 43, 1907, 1907), ("typing/typedecl.mli", 47, 2085, 2115), 0), 0, Tag1 ("Typedecl", 11)), 0); (("abstract_type_decl", 1156), ((Tag1 (("injective"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -96), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -95), (Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -94), 0), 100000000, 0, -93), 0), 100000000, 0, -92), 0, (("typing/typedecl.mli", 49, 2117, 2117), ("typing/typedecl.mli", 49, 2117, 2182), 0), 0, Tag1 ("Typedecl", 12)), 0); (("approx_type_decl", 1157), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Parsetree")), "type_declaration"), 0, (0)), 100000000, 0, -91)], (0)), 100000000, 0, -90), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -88); (Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -89)]), 100000000, 0, -87)], (0)), 100000000, 0, -86), 0), 100000000, 0, -85), 0, (("typing/typedecl.mli", 50, 2183, 2183), ("typing/typedecl.mli", 52, 2244, 2311), 0), 0, Tag1 ("Typedecl", 13)), 0); (("check_recmod_typedecl", 1158), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -84), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -83), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -82)], (0)), 100000000, 0, -81), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -80), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -79), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -78), 0), 100000000, 0, -77), 0), 100000000, 0, -76), 0), 100000000, 0, -75), 0), 100000000, 0, -74), 0), 100000000, 0, -73), 0, (("typing/typedecl.mli", 53, 2312, 2312), ("typing/typedecl.mli", 54, 2339, 2416), 0), 0, Tag1 ("Typedecl", 14)), 0); (("check_coherence", 1159), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -72), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -71), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -70), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -69), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -68), 0), 100000000, 0, -67), 0), 100000000, 0, -66), 0), 100000000, 0, -65), 0), 100000000, 0, -64), 0, (("typing/typedecl.mli", 55, 2417, 2417), ("typing/typedecl.mli", 56, 2438, 2499), 0), 0, Tag1 ("Typedecl", 15)), 0); (("is_fixed_type", 1160), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "type_declaration"), 0, (0)), 100000000, 0, -63), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -62), 0), 100000000, 0, -61), 0, (("typing/typedecl.mli", 59, 2523, 2523), ("typing/typedecl.mli", 59, 2523, 2577), 0), 0, Tag1 ("Typedecl", 16)), 0); Tag1 (("native_repr_kind", 1161), (0, 0, Tag1 ([(("Unboxed", 1018), (0), 0, (("typing/typedecl.mli", 61, 2579, 2603), ("typing/typedecl.mli", 61, 2579, 2610), 0), 0, Tag1 ("Typedecl", 18)); (("Untagged", 1019), (0), 0, (("typing/typedecl.mli", 61, 2579, 2611), ("typing/typedecl.mli", 61, 2579, 2621), 0), 0, Tag1 ("Typedecl", 19))], 0), 1, 0, 0, 0, 0, 0, (("typing/typedecl.mli", 61, 2579, 2579), ("typing/typedecl.mli", 61, 2579, 2621), 0), 0, 1, 0, Tag1 ("Typedecl", 17)), 1, 0); Tag1 (("reaching_type_path", 1162), (0, 0, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("reaching_type_step", 1163)), 0, (0)), 100000000, 0, -60)], (0)), 100000000, 0, -59)), 0, 0, 0, 0, (("typing/typedecl.mli", 63, 2623, 2623), ("typing/typedecl.mli", 63, 2623, 2672), 0), 0, 0, 0, Tag1 ("Typedecl", 20)), 1, 0); Tag1 (("reaching_type_step", 1163), (0, 0, Tag1 ([(("Expands_to", 1022), ([(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -55); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -56)]), 0, (("typing/typedecl.mli", 65, 2698, 2700), ("typing/typedecl.mli", 65, 2698, 2737), 0), 0, Tag1 ("Typedecl", 22)); (("Contains", 1023), ([(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -57); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -58)]), 0, (("typing/typedecl.mli", 66, 2738, 2740), ("typing/typedecl.mli", 66, 2738, 2775), 0), 0, Tag1 ("Typedecl", 23))], 0), 1, 0, 0, 0, 0, 0, (("typing/typedecl.mli", 64, 2673, 2673), ("typing/typedecl.mli", 66, 2738, 2775), 0), 0, 0, 0, Tag1 ("Typedecl", 21)), 2, 0); Tag1 (("error", 1164), (0, 0, Tag1 ([(("Repeated_parameter", 1025), (0), 0, (("typing/typedecl.mli", 69, 2790, 2794), ("typing/typedecl.mli", 69, 2790, 2812), 0), 0, Tag1 ("Typedecl", 25)); (("Duplicate_constructor", 1026), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -9)]), 0, (("typing/typedecl.mli", 70, 2813, 2815), ("typing/typedecl.mli", 70, 2813, 2848), 0), 0, Tag1 ("Typedecl", 26)); (("Too_many_constructors", 1027), (0), 0, (("typing/typedecl.mli", 71, 2849, 2851), ("typing/typedecl.mli", 71, 2849, 2874), 0), 0, Tag1 ("Typedecl", 27)); (("Duplicate_label", 1028), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10)]), 0, (("typing/typedecl.mli", 72, 2875, 2877), ("typing/typedecl.mli", 72, 2875, 2904), 0), 0, Tag1 ("Typedecl", 28)); (("Recursive_abbrev", 1029), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -11); (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -12); (Tag3 ((("reaching_type_path", 1162)), 0, (0)), 100000000, 0, -13)]), 0, (("typing/typedecl.mli", 73, 2905, 2907), ("typing/typedecl.mli", 73, 2905, 2964), 0), 0, Tag1 ("Typedecl", 29)); (("Cycle_in_def", 1030), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -14); (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -15); (Tag3 ((("reaching_type_path", 1162)), 0, (0)), 100000000, 0, -16)]), 0, (("typing/typedecl.mli", 74, 2965, 2967), ("typing/typedecl.mli", 74, 2965, 3020), 0), 0, Tag1 ("Typedecl", 30)); (("Definition_mismatch", 1031), ([(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -17); (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -18); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Includecore")), "type_mismatch"), 0, (0)), 100000000, 0, -20)], (0)), 100000000, 0, -19)]), 0, (("typing/typedecl.mli", 75, 3021, 3023), ("typing/typedecl.mli", 75, 3021, 3100), 0), 0, Tag1 ("Typedecl", 31)); (("Constraint_failed", 1054), ([(Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -21); (Tag3 (Tag1 ((Tag2 ("Errortrace")), "unification_error"), 0, (0)), 100000000, 0, -22)]), 0, (("typing/typedecl.mli", 76, 3101, 3103), ("typing/typedecl.mli", 76, 3101, 3162), 0), 0, Tag1 ("Typedecl", 33)); (("Inconsistent_constraint", 1087), ([(Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -23); (Tag3 (Tag1 ((Tag2 ("Errortrace")), "unification_error"), 0, (0)), 100000000, 0, -24)]), 0, (("typing/typedecl.mli", 77, 3163, 3165), ("typing/typedecl.mli", 77, 3163, 3230), 0), 0, Tag1 ("Typedecl", 34)); (("Type_clash", 1088), ([(Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -25); (Tag3 (Tag1 ((Tag2 ("Errortrace")), "unification_error"), 0, (0)), 100000000, 0, -26)]), 0, (("typing/typedecl.mli", 78, 3231, 3233), ("typing/typedecl.mli", 78, 3231, 3285), 0), 0, Tag1 ("Typedecl", 35)); (("Non_regular", 1089), Tag1 ([(("definition", 1090), 0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -27), (("typing/typedecl.mli", 80, 3307, 3313), ("typing/typedecl.mli", 80, 3307, 3332), 0), 0, Tag1 ("Typedecl", 36)); (("used_as", 1091), 0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -28), (("typing/typedecl.mli", 81, 3333, 3339), ("typing/typedecl.mli", 81, 3333, 3358), 0), 0, Tag1 ("Typedecl", 37)); (("defined_as", 1092), 0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -29), (("typing/typedecl.mli", 82, 3359, 3365), ("typing/typedecl.mli", 82, 3359, 3387), 0), 0, Tag1 ("Typedecl", 38)); (("reaching_path", 1093), 0, (Tag3 ((("reaching_type_path", 1162)), 0, (0)), 100000000, 0, -30), (("typing/typedecl.mli", 83, 3388, 3394), ("typing/typedecl.mli", 83, 3388, 3428), 0), 0, Tag1 ("Typedecl", 39))]), 0, (("typing/typedecl.mli", 79, 3286, 3288), ("typing/typedecl.mli", 84, 3429, 3434), 0), 0, Tag1 ("Typedecl", 40)); (("Null_arity_external", 1094), (0), 0, (("typing/typedecl.mli", 85, 3435, 3437), ("typing/typedecl.mli", 85, 3435, 3458), 0), 0, Tag1 ("Typedecl", 41)); (("Missing_native_external", 1095), (0), 0, (("typing/typedecl.mli", 86, 3459, 3461), ("typing/typedecl.mli", 86, 3459, 3486), 0), 0, Tag1 ("Typedecl", 42)); (("Unbound_type_var", 1096), ([(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -31); (Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -32)]), 0, (("typing/typedecl.mli", 87, 3487, 3489), ("typing/typedecl.mli", 87, 3487, 3539), 0), 0, Tag1 ("Typedecl", 43)); (("Cannot_extend_private_type", 1097), ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -33)]), 0, (("typing/typedecl.mli", 88, 3540, 3542), ("typing/typedecl.mli", 88, 3540, 3580), 0), 0, Tag1 ("Typedecl", 44)); (("Not_extensible_type", 1098), ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -34)]), 0, (("typing/typedecl.mli", 89, 3581, 3583), ("typing/typedecl.mli", 89, 3581, 3614), 0), 0, Tag1 ("Typedecl", 45)); (("Extension_mismatch", 1099), ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -35); (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -36); (Tag3 (Tag1 ((Tag2 ("Includecore")), "type_mismatch"), 0, (0)), 100000000, 0, -37)]), 0, (("typing/typedecl.mli", 90, 3615, 3617), ("typing/typedecl.mli", 90, 3615, 3683), 0), 0, Tag1 ("Typedecl", 46)); (("Rebind_wrong_type", 1100), ([(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -38); (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -39); (Tag3 (Tag1 ((Tag2 ("Errortrace")), "unification_error"), 0, (0)), 100000000, 0, -40)]), 0, (("typing/typedecl.mli", 91, 3684, 3686), ("typing/typedecl.mli", 92, 3709, 3765), 0), 0, Tag1 ("Typedecl", 47)); (("Rebind_mismatch", 1106), ([(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -41); (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -42); (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -43)]), 0, (("typing/typedecl.mli", 93, 3766, 3768), ("typing/typedecl.mli", 93, 3766, 3818), 0), 0, Tag1 ("Typedecl", 48)); (("Rebind_private", 1107), ([(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -44)]), 0, (("typing/typedecl.mli", 94, 3819, 3821), ("typing/typedecl.mli", 94, 3819, 3852), 0), 0, Tag1 ("Typedecl", 49)); (("Variance", 1108), ([(Tag3 (Tag1 ((Tag2 ("Typedecl_variance")), "error"), 0, (0)), 100000000, 0, -45)]), 0, (("typing/typedecl.mli", 95, 3853, 3855), ("typing/typedecl.mli", 95, 3853, 3892), 0), 0, Tag1 ("Typedecl", 51)); (("Unavailable_type_constructor", 1124), ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -46)]), 0, (("typing/typedecl.mli", 96, 3893, 3895), ("typing/typedecl.mli", 96, 3893, 3935), 0), 0, Tag1 ("Typedecl", 52)); (("Unbound_type_var_ext", 1125), ([(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -47); (Tag3 (Tag1 ((Tag2 ("Types")), "extension_constructor"), 0, (0)), 100000000, 0, -48)]), 0, (("typing/typedecl.mli", 97, 3936, 3938), ("typing/typedecl.mli", 97, 3936, 3997), 0), 0, Tag1 ("Typedecl", 53)); (("Val_in_structure", 1126), (0), 0, (("typing/typedecl.mli", 98, 3998, 4000), ("typing/typedecl.mli", 98, 3998, 4018), 0), 0, Tag1 ("Typedecl", 54)); (("Multiple_native_repr_attributes", 1127), (0), 0, (("typing/typedecl.mli", 99, 4019, 4021), ("typing/typedecl.mli", 99, 4019, 4054), 0), 0, Tag1 ("Typedecl", 55)); (("Cannot_unbox_or_untag_type", 1128), ([(Tag3 ((("native_repr_kind", 1161)), 0, (0)), 100000000, 0, -49)]), 0, (("typing/typedecl.mli", 100, 4055, 4057), ("typing/typedecl.mli", 100, 4055, 4105), 0), 0, Tag1 ("Typedecl", 56)); (("Deep_unbox_or_untag_attribute", 1129), ([(Tag3 ((("native_repr_kind", 1161)), 0, (0)), 100000000, 0, -50)]), 0, (("typing/typedecl.mli", 101, 4106, 4108), ("typing/typedecl.mli", 101, 4106, 4159), 0), 0, Tag1 ("Typedecl", 57)); (("Immediacy", 1130), ([(Tag3 (Tag1 ((Tag2 ("Typedecl_immediacy")), "error"), 0, (0)), 100000000, 0, -51)]), 0, (("typing/typedecl.mli", 102, 4160, 4162), ("typing/typedecl.mli", 102, 4160, 4201), 0), 0, Tag1 ("Typedecl", 58)); (("Separability", 1136), ([(Tag3 (Tag1 ((Tag2 ("Typedecl_separability")), "error"), 0, (0)), 100000000, 0, -52)]), 0, (("typing/typedecl.mli", 103, 4202, 4204), ("typing/typedecl.mli", 103, 4202, 4249), 0), 0, Tag1 ("Typedecl", 59)); (("Bad_unboxed_attribute", 1144), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -53)]), 0, (("typing/typedecl.mli", 104, 4250, 4252), ("typing/typedecl.mli", 104, 4250, 4285), 0), 0, Tag1 ("Typedecl", 60)); (("Boxed_and_unboxed", 1145), (0), 0, (("typing/typedecl.mli", 105, 4286, 4288), ("typing/typedecl.mli", 105, 4286, 4307), 0), 0, Tag1 ("Typedecl", 61)); (("Nonrec_gadt", 1146), (0), 0, (("typing/typedecl.mli", 106, 4308, 4310), ("typing/typedecl.mli", 106, 4308, 4323), 0), 0, Tag1 ("Typedecl", 62)); (("Invalid_private_row_declaration", 1147), ([(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -54)]), 0, (("typing/typedecl.mli", 107, 4324, 4326), ("typing/typedecl.mli", 107, 4324, 4372), 0), 0, Tag1 ("Typedecl", 63))], 0), 1, 0, 0, 0, 0, 0, (("typing/typedecl.mli", 68, 2777, 2777), ("typing/typedecl.mli", 107, 4324, 4372), 0), 0, 0, 0, Tag1 ("Typedecl", 24)), 1, 0); Tag2 (("Error", 1165), ((Tag3 ("exn", 7)), 0, ([(Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -7); (Tag3 ((("error", 1164)), 0, (0)), 100000000, 0, -8)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Typedecl", 69)), 2, 0); (("report_error", 1166), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -6), (Tag1 (0, (Tag3 ((("error", 1164)), 0, (0)), 100000000, 0, -5), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("typing/typedecl.mli", 111, 4413, 4413), ("typing/typedecl.mli", 111, 4413, 4457), 0), 0, Tag1 ("Typedecl", 70)), 0)], "Typedecl", [("Typedecl", ("wy\236\r*\151\020M\020L\171\031\197#\028\200")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Types", ("\177\238\029.\220\006\163!\230\015\006\182\133\155\194\166")); ("Typedtree", ("c5z\186\175w\146\254\018V\184\031\0038\004\227")); ("Typedecl_variance", ("c\128\170O\186*z\228\021\240\145S\164uU\012")); ("Typedecl_separability", ("\026\139\022\151\252\191\244\158\238\017\242\022rI\137\223")); ("Typedecl_properties", ("8\017\156\232&y#yd\205g\209\004wc\220")); ("Typedecl_immediacy", (";\152\004S\179Enh\252\003\003\227Lbg\221")); ("Type_immediacy", ("\"\127k\011Q\241\211\138\193;8\142\129\141#\251")); ("Subst", ("\021\031\148\223\127\186\189\135\027}\145r\216\143\177\156")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shape", ("\235\127Y\213\025\137=\244\218\181\248N\189\188\216p")); ("Primitive", ("}Shh\162\015|\220A\203\249\232\245G\213\019")); ("Path", ("\012\183\178\025\1298\228*\021r\185\160Y\252\n\026")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Outcometree", ("9\021%\234\211\206\210\004H\165\208\2014\234Q\142")); ("Misc", ("*\026\026\234c\191\131\161\\\203\183\012O\252\153\198")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Load_path", ("\012@\228l\230\164S\172h\1726X\020\252o}")); ("Includecore", (";Q E\158\170\208\130\1750\136E\012\1798|")); ("Identifiable", ("\004F\207\014\158GU\001\184\214\187%/#;\211")); ("Ident", ("\b9;!\187.\220\163(x\b\174\\\223\020\004")); ("Errortrace", ("\238\196yV6<x\\\13126\144\141\000~\145")); ("Env", ("\021\n\181\142x\b\169j\227\"\017\248*\178\245\223")); ("Diffing_with_keys", ("\198\208\133q\023\211C\197\210Q\023\001#o\193H")); ("Diffing", ("\027\205S\011\160W\184\023\131\250\1571\177\026\005Q")); ("Cmi_format", ("6\177\bU\139\"\023\152=\249\135\174\b\011Cg")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Build_path_prefix_map", ("y\028\167\207D\220\198\216\011\208\172\149\2416\bc")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216"))], [(0)])
val report_error : Format.formatter -> error -> unit

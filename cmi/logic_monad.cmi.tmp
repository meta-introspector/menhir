exception Exception of exn
exception Tac_Timeout
exception TacticFailure of exn
module NonLogical :
  sig
    type +'a t
    val return : 'a -> 'a t
    val ( >>= ) : 'a t -> ('a -> 'b t) -> 'b t
    val ( >> ) : unit t -> 'a t -> 'a t
    val map : ('a -> 'b) -> 'a t -> 'b t
    module List :
      sig
        val map : ('a -> 'b t) -> 'a list -> 'b list t
        val map_right : ('a -> 'b t) -> 'a list -> 'b list t
        val fold_right : ('a -> 'b -> 'b t) -> 'a list -> 'b -> 'b t
        val fold_left : ('a -> 'b -> 'a t) -> 'a -> 'b list -> 'a t
        val iter : ('a -> unit t) -> 'a list -> unit t
        val map_filter : ('a -> 'b option t) -> 'a list -> 'b list t
        val fold_left2 :
          'a t ->
          ('a -> 'b -> 'c -> 'a t) -> 'a -> 'b list -> 'c list -> 'a t
      end
    val ignore : 'a t -> unit t
    type 'a ref
    val ref : 'a -> 'a ref t
    val ( := ) : 'a ref -> 'a -> unit t
    val ( ! ) : 'a ref -> 'a t
    val read_line : string t
    val print_char : char -> unit t
    val print_debug : Pp.t -> unit t
    val print_warning : Pp.t -> unit t
    val print_notice : Pp.t -> unit t
    val print_info : Pp.t -> unit t
    val raise : Exninfo.iexn -> 'a t
    val catch : 'a t -> (Exninfo.iexn -> 'a t) -> 'a t
    val timeout : float -> 'a t -> 'a option t
    val make : (unit -> 'a) -> 'a t
    val run : 'a t -> 'a
  end
type ('a, 'b, 'e) list_view_ = Nil of 'e | Cons of 'a * 'b
type ('a, 'b, 'e) list_view = ('a, 'e -> 'b, 'e) list_view_
module BackState :
  sig
    type (+'a, -'i, +'o, 'e) t
    val return : 'a -> ('a, 's, 's, 'e) t
    val ( >>= ) :
      ('a, 'i, 'm, 'e) t -> ('a -> ('b, 'm, 'o, 'e) t) -> ('b, 'i, 'o, 'e) t
    val ( >> ) :
      (unit, 'i, 'm, 'e) t -> ('b, 'm, 'o, 'e) t -> ('b, 'i, 'o, 'e) t
    val map : ('a -> 'b) -> ('a, 'i, 'o, 'e) t -> ('b, 'i, 'o, 'e) t
    val ignore : ('a, 'i, 'o, 'e) t -> (unit, 'i, 'o, 'e) t
    val set : 'o -> (unit, 'i, 'o, 'e) t
    val get : ('s, 's, 's, 'e) t
    val modify : ('i -> 'o) -> (unit, 'i, 'o, 'e) t
    val interleave :
      ('e1 -> 'e2) ->
      ('e2 -> 'e1) -> ('a, 'i, 'o, 'e1) t -> ('a, 'i, 'o, 'e2) t
    val zero : 'e -> ('a, 'i, 'o, 'e) t
    val plus :
      ('a, 'i, 'o, 'e) t -> ('e -> ('a, 'i, 'o, 'e) t) -> ('a, 'i, 'o, 'e) t
    val split :
      ('a, 's, 's, 'e) t ->
      (('a, ('a, 'i, 's, 'e) t, 'e) list_view, 's, 's, 'e) t
    val once : ('a, 'i, 'o, 'e) t -> ('a, 'i, 'o, 'e) t
    val break : ('e -> 'e option) -> ('a, 'i, 'o, 'e) t -> ('a, 'i, 'o, 'e) t
    val lift : 'a NonLogical.t -> ('a, 's, 's, 'e) t
    type ('a, 'e) reified
    type ('a, 'e) reified_
    val repr :
      ('a, 'e) reified -> ('a, ('a, 'e) reified_, 'e) list_view_ NonLogical.t
    val run : ('a, 'i, 'o, 'e) t -> 'i -> ('a * 'o, 'e) reified
  end
module type Param =
  sig
    type e
    type w
    val wunit : w
    val wprod : w -> w -> w
    type s
    type u
    val uunit : u
  end
module Logical :
  functor (P : Param) ->
    sig
      type +'a t
      val return : 'a -> 'a t
      val ( >>= ) : 'a t -> ('a -> 'b t) -> 'b t
      val ( >> ) : unit t -> 'a t -> 'a t
      val map : ('a -> 'b) -> 'a t -> 'b t
      module List :
        sig
          val map : ('a -> 'b t) -> 'a list -> 'b list t
          val map_right : ('a -> 'b t) -> 'a list -> 'b list t
          val fold_right : ('a -> 'b -> 'b t) -> 'a list -> 'b -> 'b t
          val fold_left : ('a -> 'b -> 'a t) -> 'a -> 'b list -> 'a t
          val iter : ('a -> unit t) -> 'a list -> unit t
          val map_filter : ('a -> 'b option t) -> 'a list -> 'b list t
          val fold_left2 :
            'a t ->
            ('a -> 'b -> 'c -> 'a t) -> 'a -> 'b list -> 'c list -> 'a t
        end
      val ignore : 'a t -> unit t
      val set : P.s -> unit t
      val get : P.s t
      val modify : (P.s -> P.s) -> unit t
      val put : P.w -> unit t
      val current : P.e t
      val local : P.e -> 'a t -> 'a t
      val update : (P.u -> P.u) -> unit t
      val zero : Exninfo.iexn -> 'a t
      val plus : 'a t -> (Exninfo.iexn -> 'a t) -> 'a t
      val split : 'a t -> ('a, 'a t, Exninfo.iexn) list_view t
      val once : 'a t -> 'a t
      val break : (Exninfo.iexn -> Exninfo.iexn option) -> 'a t -> 'a t
      val lift : 'a NonLogical.t -> 'a t
      type 'a reified = ('a, Exninfo.iexn) BackState.reified
      type 'a reified_ = ('a, Exninfo.iexn) BackState.reified_
      val repr :
        'a reified -> ('a, 'a reified_, Exninfo.iexn) list_view_ NonLogical.t
      val run : 'a t -> P.e -> P.s -> ('a * P.s * P.w * P.u) reified
      module Unsafe :
        sig
          type state = {
            rstate : P.e;
            ustate : P.u;
            wstate : P.w;
            sstate : P.s;
          }
          val make : ('a, state, state, Exninfo.iexn) BackState.t -> 'a t
          val repr : 'a t -> ('a, state, state, Exninfo.iexn) BackState.t
        end("DEBUG:rule", [Tag2 (("Exception", 557), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -11)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Logic_monad", 0)), 2, 0); Tag2 (("Tac_Timeout", 558), ((Tag3 ("exn", 7)), 0, (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Logic_monad", 1)), 2, 0); Tag2 (("TacticFailure", 559), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -10)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Logic_monad", 2)), 2, 0); Tag3 (("NonLogical", 560), 0, (Tag1 ([Tag1 (("t", 567), ([((("a")), 100000000, 0, -106)], 1, 0, 1, 0, [1], [2], 0, 0, (("clib/monad.mli", 19, 836, 838), ("clib/monad.mli", 19, 836, 848), 0), 0, 0, 0, Tag1 ("Monad", 0)), 1, 0); (("return", 568), ((Tag1 (0, ((("a")), 100000000, 0, -105), (Tag3 ((("t", 567)), [((("a")), 100000000, 0, -105)], (0)), 100000000, 0, -104), 0), 100000000, 0, -103), 0, (("clib/monad.mli", 20, 849, 851), ("clib/monad.mli", 20, 849, 874), 0), 0, Tag1 ("Monad", 1)), 0); ((">>=", 569), ((Tag1 (0, (Tag3 ((("t", 567)), [((("a")), 100000000, 0, -101)], (0)), 100000000, 0, -102), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -101), (Tag3 ((("t", 567)), [((("b")), 100000000, 0, -98)], (0)), 100000000, 0, -100), 0), 100000000, 0, -99), (Tag3 ((("t", 567)), [((("b")), 100000000, 0, -98)], (0)), 100000000, 0, -97), 0), 100000000, 0, -96), 0), 100000000, 0, -95), 0, (("clib/monad.mli", 21, 875, 877), ("clib/monad.mli", 21, 875, 917), 0), 0, Tag1 ("Monad", 2)), 0); ((">>", 570), ((Tag1 (0, (Tag3 ((("t", 567)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -94)], (0)), 100000000, 0, -93), (Tag1 (0, (Tag3 ((("t", 567)), [((("a")), 100000000, 0, -91)], (0)), 100000000, 0, -92), (Tag3 ((("t", 567)), [((("a")), 100000000, 0, -91)], (0)), 100000000, 0, -90), 0), 100000000, 0, -89), 0), 100000000, 0, -88), 0, (("clib/monad.mli", 22, 918, 920), ("clib/monad.mli", 22, 918, 953), 0), 0, Tag1 ("Monad", 3)), 0); (("map", 571), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -86), ((("b")), 100000000, 0, -84), 0), 100000000, 0, -87), (Tag1 (0, (Tag3 ((("t", 567)), [((("a")), 100000000, 0, -86)], (0)), 100000000, 0, -85), (Tag3 ((("t", 567)), [((("b")), 100000000, 0, -84)], (0)), 100000000, 0, -83), 0), 100000000, 0, -82), 0), 100000000, 0, -81), 0, (("clib/monad.mli", 23, 954, 956), ("clib/monad.mli", 23, 954, 992), 0), 0, Tag1 ("Monad", 4)), 0); Tag3 (("List", 572), 0, (Tag1 ([(("map", 589), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -177), (Tag3 ((("t", 567)), [((("b")), 100000000, 0, -175)], (0)), 100000000, 0, -179), 0), 100000000, 0, -178), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -177)], (0)), 100000000, 0, -176), (Tag3 ((("t", 567)), [(Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -175)], (0)), 100000000, 0, -174)], (0)), 100000000, 0, -173), 0), 100000000, 0, -172), 0), 100000000, 0, -171), 0, (("clib/monad.mli", 91, 3190, 3206), ("clib/monad.mli", 91, 3190, 3234), 0), 0, Tag1 ("Monad", 7)), 0); (("map_right", 590), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -168), (Tag3 ((("t", 567)), [((("b")), 100000000, 0, -166)], (0)), 100000000, 0, -170), 0), 100000000, 0, -169), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -168)], (0)), 100000000, 0, -167), (Tag3 ((("t", 567)), [(Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -166)], (0)), 100000000, 0, -165)], (0)), 100000000, 0, -164), 0), 100000000, 0, -163), 0), 100000000, 0, -162), 0, (("clib/monad.mli", 91, 3190, 3206), ("clib/monad.mli", 91, 3190, 3234), 0), 0, Tag1 ("Monad", 8)), 0); (("fold_right", 591), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -158), (Tag1 (0, ((("b")), 100000000, 0, -156), (Tag3 ((("t", 567)), [((("b")), 100000000, 0, -156)], (0)), 100000000, 0, -161), 0), 100000000, 0, -160), 0), 100000000, 0, -159), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -158)], (0)), 100000000, 0, -157), (Tag1 (0, ((("b")), 100000000, 0, -156), (Tag3 ((("t", 567)), [((("b")), 100000000, 0, -156)], (0)), 100000000, 0, -155), 0), 100000000, 0, -154), 0), 100000000, 0, -153), 0), 100000000, 0, -152), 0, (("clib/monad.mli", 91, 3190, 3206), ("clib/monad.mli", 91, 3190, 3234), 0), 0, Tag1 ("Monad", 9)), 0); (("fold_left", 592), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -146), (Tag1 (0, ((("b")), 100000000, 0, -148), (Tag3 ((("t", 567)), [((("a")), 100000000, 0, -146)], (0)), 100000000, 0, -151), 0), 100000000, 0, -150), 0), 100000000, 0, -149), (Tag1 (0, ((("a")), 100000000, 0, -146), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -148)], (0)), 100000000, 0, -147), (Tag3 ((("t", 567)), [((("a")), 100000000, 0, -146)], (0)), 100000000, 0, -145), 0), 100000000, 0, -144), 0), 100000000, 0, -143), 0), 100000000, 0, -142), 0, (("clib/monad.mli", 91, 3190, 3206), ("clib/monad.mli", 91, 3190, 3234), 0), 0, Tag1 ("Monad", 10)), 0); (("iter", 593), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -138), (Tag3 ((("t", 567)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -141)], (0)), 100000000, 0, -140), 0), 100000000, 0, -139), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -138)], (0)), 100000000, 0, -137), (Tag3 ((("t", 567)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -136)], (0)), 100000000, 0, -135), 0), 100000000, 0, -134), 0), 100000000, 0, -133), 0, (("clib/monad.mli", 91, 3190, 3206), ("clib/monad.mli", 91, 3190, 3234), 0), 0, Tag1 ("Monad", 11)), 0); (("map_filter", 594), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -129), (Tag3 ((("t", 567)), [(Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -127)], (0)), 100000000, 0, -132)], (0)), 100000000, 0, -131), 0), 100000000, 0, -130), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -129)], (0)), 100000000, 0, -128), (Tag3 ((("t", 567)), [(Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -127)], (0)), 100000000, 0, -126)], (0)), 100000000, 0, -125), 0), 100000000, 0, -124), 0), 100000000, 0, -123), 0, (("clib/monad.mli", 91, 3190, 3206), ("clib/monad.mli", 91, 3190, 3234), 0), 0, Tag1 ("Monad", 12)), 0); (("fold_left2", 595), ((Tag1 (0, (Tag3 ((("t", 567)), [((("a")), 100000000, 0, -113)], (0)), 100000000, 0, -122), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -113), (Tag1 (0, ((("b")), 100000000, 0, -117), (Tag1 (0, ((("c")), 100000000, 0, -115), (Tag3 ((("t", 567)), [((("a")), 100000000, 0, -113)], (0)), 100000000, 0, -121), 0), 100000000, 0, -120), 0), 100000000, 0, -119), 0), 100000000, 0, -118), (Tag1 (0, ((("a")), 100000000, 0, -113), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -117)], (0)), 100000000, 0, -116), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("c")), 100000000, 0, -115)], (0)), 100000000, 0, -114), (Tag3 ((("t", 567)), [((("a")), 100000000, 0, -113)], (0)), 100000000, 0, -112), 0), 100000000, 0, -111), 0), 100000000, 0, -110), 0), 100000000, 0, -109), 0), 100000000, 0, -108), 0), 100000000, 0, -107), 0, (("clib/monad.mli", 91, 3190, 3206), ("clib/monad.mli", 91, 3190, 3234), 0), 0, Tag1 ("Monad", 13)), 0)]), 0, (("clib/monad.mli", 91, 3190, 3192), ("clib/monad.mli", 91, 3190, 3234), 0), Tag1 ("Monad", 16)), 0, 0); (("ignore", 573), ((Tag1 (0, (Tag3 ((("t", 567)), [((("a")), 100000000, 0, -80)], (0)), 100000000, 0, -79), (Tag3 ((("t", 567)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -78)], (0)), 100000000, 0, -77), 0), 100000000, 0, -76), 0, (("engine/logic_monad.mli", 50, 2201, 2203), ("engine/logic_monad.mli", 50, 2201, 2230), 0), 0, Tag1 ("Logic_monad", 3)), 0); Tag1 (("ref", 574), ([((("a")), 100000000, 0, -75)], 1, 0, 1, 0, [7], [2], 0, 0, (("engine/logic_monad.mli", 52, 2232, 2234), ("engine/logic_monad.mli", 52, 2232, 2245), 0), 0, 0, 0, Tag1 ("Logic_monad", 4)), 1, 0); (("ref", 575), ((Tag1 (0, ((("a")), 100000000, 0, -74), (Tag3 ((("t", 567)), [(Tag3 ((("ref", 574)), [((("a")), 100000000, 0, -74)], (0)), 100000000, 0, -73)], (0)), 100000000, 0, -72), 0), 100000000, 0, -71), 0, (("engine/logic_monad.mli", 54, 2247, 2249), ("engine/logic_monad.mli", 54, 2247, 2273), 0), 0, Tag1 ("Logic_monad", 5)), 0); ((":=", 576), ((Tag1 (0, (Tag3 ((("ref", 574)), [((("a")), 100000000, 0, -69)], (0)), 100000000, 0, -70), (Tag1 (0, ((("a")), 100000000, 0, -69), (Tag3 ((("t", 567)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -68)], (0)), 100000000, 0, -67), 0), 100000000, 0, -66), 0), 100000000, 0, -65), 0, (("engine/logic_monad.mli", 57, 2302, 2304), ("engine/logic_monad.mli", 57, 2302, 2337), 0), 0, Tag1 ("Logic_monad", 6)), 0); (("!", 577), ((Tag1 (0, (Tag3 ((("ref", 574)), [((("a")), 100000000, 0, -63)], (0)), 100000000, 0, -64), (Tag3 ((("t", 567)), [((("a")), 100000000, 0, -63)], (0)), 100000000, 0, -62), 0), 100000000, 0, -61), 0, (("engine/logic_monad.mli", 60, 2365, 2367), ("engine/logic_monad.mli", 60, 2365, 2391), 0), 0, Tag1 ("Logic_monad", 7)), 0); (("read_line", 578), ((Tag3 ((("t", 567)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -60)], (0)), 100000000, 0, -59), 0, (("engine/logic_monad.mli", 62, 2393, 2395), ("engine/logic_monad.mli", 62, 2393, 2419), 0), 0, Tag1 ("Logic_monad", 8)), 0); (("print_char", 579), ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -58), (Tag3 ((("t", 567)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -57)], (0)), 100000000, 0, -56), 0), 100000000, 0, -55), 0, (("engine/logic_monad.mli", 63, 2420, 2422), ("engine/logic_monad.mli", 63, 2420, 2453), 0), 0, Tag1 ("Logic_monad", 9)), 0); (("print_debug", 580), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -54), (Tag3 ((("t", 567)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -53)], (0)), 100000000, 0, -52), 0), 100000000, 0, -51), 0, (("engine/logic_monad.mli", 66, 2501, 2503), ("engine/logic_monad.mli", 66, 2501, 2535), 0), 0, Tag1 ("Logic_monad", 10)), 0); (("print_warning", 581), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -50), (Tag3 ((("t", 567)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -49)], (0)), 100000000, 0, -48), 0), 100000000, 0, -47), 0, (("engine/logic_monad.mli", 67, 2536, 2538), ("engine/logic_monad.mli", 67, 2536, 2572), 0), 0, Tag1 ("Logic_monad", 11)), 0); (("print_notice", 582), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -46), (Tag3 ((("t", 567)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -45)], (0)), 100000000, 0, -44), 0), 100000000, 0, -43), 0, (("engine/logic_monad.mli", 68, 2573, 2575), ("engine/logic_monad.mli", 68, 2573, 2608), 0), 0, Tag1 ("Logic_monad", 12)), 0); (("print_info", 583), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -42), (Tag3 ((("t", 567)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -41)], (0)), 100000000, 0, -40), 0), 100000000, 0, -39), 0, (("engine/logic_monad.mli", 69, 2609, 2611), ("engine/logic_monad.mli", 69, 2609, 2642), 0), 0, Tag1 ("Logic_monad", 13)), 0); (("raise", 584), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Exninfo")), "iexn"), 0, (0)), 100000000, 0, -38), (Tag3 ((("t", 567)), [((("a")), 100000000, 0, -37)], (0)), 100000000, 0, -36), 0), 100000000, 0, -35), 0, (("engine/logic_monad.mli", 73, 2733, 2735), ("engine/logic_monad.mli", 73, 2733, 2767), 0), 0, Tag1 ("Logic_monad", 14)), 0); (("catch", 585), ((Tag1 (0, (Tag3 ((("t", 567)), [((("a")), 100000000, 0, -30)], (0)), 100000000, 0, -34), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Exninfo")), "iexn"), 0, (0)), 100000000, 0, -33), (Tag3 ((("t", 567)), [((("a")), 100000000, 0, -30)], (0)), 100000000, 0, -32), 0), 100000000, 0, -31), (Tag3 ((("t", 567)), [((("a")), 100000000, 0, -30)], (0)), 100000000, 0, -29), 0), 100000000, 0, -28), 0), 100000000, 0, -27), 0, (("engine/logic_monad.mli", 76, 2829, 2831), ("engine/logic_monad.mli", 76, 2829, 2881), 0), 0, Tag1 ("Logic_monad", 15)), 0); (("timeout", 586), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -26), (Tag1 (0, (Tag3 ((("t", 567)), [((("a")), 100000000, 0, -24)], (0)), 100000000, 0, -25), (Tag3 ((("t", 567)), [(Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -24)], (0)), 100000000, 0, -23)], (0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0), 100000000, 0, -20), 0, (("engine/logic_monad.mli", 77, 2882, 2884), ("engine/logic_monad.mli", 77, 2882, 2926), 0), 0, Tag1 ("Logic_monad", 16)), 0); (("make", 587), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -19), ((("a")), 100000000, 0, -17), 0), 100000000, 0, -18), (Tag3 ((("t", 567)), [((("a")), 100000000, 0, -17)], (0)), 100000000, 0, -16), 0), 100000000, 0, -15), 0, (("engine/logic_monad.mli", 81, 3044, 3046), ("engine/logic_monad.mli", 81, 3044, 3077), 0), 0, Tag1 ("Logic_monad", 17)), 0); (("run", 588), ((Tag1 (0, (Tag3 ((("t", 567)), [((("a")), 100000000, 0, -13)], (0)), 100000000, 0, -14), ((("a")), 100000000, 0, -13), 0), 100000000, 0, -12), 0, (("engine/logic_monad.mli", 84, 3112, 3114), ("engine/logic_monad.mli", 84, 3112, 3134), 0), 0, Tag1 ("Logic_monad", 18)), 0)]), 0, (("engine/logic_monad.mli", 46, 2157, 2157), ("engine/logic_monad.mli", 86, 3136, 3139), 0), Tag1 ("Logic_monad", 19)), 0, 0); Tag1 (("list_view_", 561), ([((("a")), 100000000, 0, -8); ((("b")), 100000000, 0, -9); ((("e")), 100000000, 0, -7)], 3, Tag1 ([(("Nil", 399), ([((("e")), 100000000, 0, -7)]), 0, (("engine/logic_monad.mli", 112, 3880, 3880), ("engine/logic_monad.mli", 112, 3880, 3891), 0), 0, Tag1 ("Logic_monad", 21)); (("Cons", 400), ([((("a")), 100000000, 0, -8); ((("b")), 100000000, 0, -9)]), 0, (("engine/logic_monad.mli", 113, 3892, 3892), ("engine/logic_monad.mli", 113, 3892, 3909), 0), 0, Tag1 ("Logic_monad", 22))], 0), 1, 0, [25; 25; 25], [0; 0; 0], 0, 0, (("engine/logic_monad.mli", 111, 3849, 3849), ("engine/logic_monad.mli", 113, 3892, 3909), 0), 0, 0, 0, Tag1 ("Logic_monad", 20)), 1, 0); Tag1 (("list_view", 562), ([((("a")), 100000000, 0, -3); ((("b")), 100000000, 0, -5); ((("e")), 100000000, 0, -6)], 3, 0, 1, ((Tag3 ((("list_view_", 561)), [((("a")), 100000000, 0, -3); (Tag1 (0, ((("e")), 100000000, 0, -6), ((("b")), 100000000, 0, -5), 0), 100000000, 0, -4); ((("e")), 100000000, 0, -6)], (0)), 100000000, 0, -2)), [25; 25; 63], [0; 0; 0], 0, 0, (("engine/logic_monad.mli", 115, 3911, 3911), ("engine/logic_monad.mli", 115, 3911, 3970), 0), 0, 0, 0, Tag1 ("Logic_monad", 23)), 1, 0); Tag3 (("BackState", 563), 0, (Tag1 ([Tag1 (("t", 596), ([((("a")), 100000000, 0, -322); ((("i")), 100000000, 0, -323); ((("o")), 100000000, 0, -324); ((("e")), 100000000, 0, -325)], 4, 0, 1, 0, [1; 6; 1; 7], [2; 2; 2; 2], 0, 0, (("engine/logic_monad.mli", 119, 3996, 3998), ("engine/logic_monad.mli", 119, 3996, 4024), 0), 0, 0, 0, Tag1 ("Logic_monad", 24)), 1, 0); (("return", 597), ((Tag1 (0, ((("a")), 100000000, 0, -319), (Tag3 ((("t", 596)), [((("a")), 100000000, 0, -319); ((("s")), 100000000, 0, -320); ((("s")), 100000000, 0, -320); ((("e")), 100000000, 0, -321)], (0)), 100000000, 0, -318), 0), 100000000, 0, -317), 0, (("engine/logic_monad.mli", 120, 4025, 4027), ("engine/logic_monad.mli", 120, 4025, 4064), 0), 0, Tag1 ("Logic_monad", 25)), 0); ((">>=", 598), ((Tag1 (0, (Tag3 ((("t", 596)), [((("a")), 100000000, 0, -315); ((("i")), 100000000, 0, -309); ((("m")), 100000000, 0, -314); ((("e")), 100000000, 0, -311)], (0)), 100000000, 0, -316), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -315), (Tag3 ((("t", 596)), [((("b")), 100000000, 0, -308); ((("m")), 100000000, 0, -314); ((("o")), 100000000, 0, -310); ((("e")), 100000000, 0, -311)], (0)), 100000000, 0, -313), 0), 100000000, 0, -312), (Tag3 ((("t", 596)), [((("b")), 100000000, 0, -308); ((("i")), 100000000, 0, -309); ((("o")), 100000000, 0, -310); ((("e")), 100000000, 0, -311)], (0)), 100000000, 0, -307), 0), 100000000, 0, -306), 0), 100000000, 0, -305), 0, (("engine/logic_monad.mli", 121, 4065, 4067), ("engine/logic_monad.mli", 121, 4065, 4149), 0), 0, Tag1 ("Logic_monad", 26)), 0); ((">>", 599), ((Tag1 (0, (Tag3 ((("t", 596)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -304); ((("i")), 100000000, 0, -298); ((("m")), 100000000, 0, -302); ((("e")), 100000000, 0, -300)], (0)), 100000000, 0, -303), (Tag1 (0, (Tag3 ((("t", 596)), [((("b")), 100000000, 0, -297); ((("m")), 100000000, 0, -302); ((("o")), 100000000, 0, -299); ((("e")), 100000000, 0, -300)], (0)), 100000000, 0, -301), (Tag3 ((("t", 596)), [((("b")), 100000000, 0, -297); ((("i")), 100000000, 0, -298); ((("o")), 100000000, 0, -299); ((("e")), 100000000, 0, -300)], (0)), 100000000, 0, -296), 0), 100000000, 0, -295), 0), 100000000, 0, -294), 0, (("engine/logic_monad.mli", 122, 4150, 4152), ("engine/logic_monad.mli", 122, 4150, 4227), 0), 0, Tag1 ("Logic_monad", 27)), 0); (("map", 600), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -292), ((("b")), 100000000, 0, -287), 0), 100000000, 0, -293), (Tag1 (0, (Tag3 ((("t", 596)), [((("a")), 100000000, 0, -292); ((("i")), 100000000, 0, -288); ((("o")), 100000000, 0, -289); ((("e")), 100000000, 0, -290)], (0)), 100000000, 0, -291), (Tag3 ((("t", 596)), [((("b")), 100000000, 0, -287); ((("i")), 100000000, 0, -288); ((("o")), 100000000, 0, -289); ((("e")), 100000000, 0, -290)], (0)), 100000000, 0, -286), 0), 100000000, 0, -285), 0), 100000000, 0, -284), 0, (("engine/logic_monad.mli", 123, 4228, 4230), ("engine/logic_monad.mli", 123, 4228, 4294), 0), 0, Tag1 ("Logic_monad", 28)), 0); (("ignore", 601), ((Tag1 (0, (Tag3 ((("t", 596)), [((("a")), 100000000, 0, -283); ((("i")), 100000000, 0, -279); ((("o")), 100000000, 0, -280); ((("e")), 100000000, 0, -281)], (0)), 100000000, 0, -282), (Tag3 ((("t", 596)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -278); ((("i")), 100000000, 0, -279); ((("o")), 100000000, 0, -280); ((("e")), 100000000, 0, -281)], (0)), 100000000, 0, -277), 0), 100000000, 0, -276), 0, (("engine/logic_monad.mli", 125, 4296, 4298), ("engine/logic_monad.mli", 125, 4296, 4353), 0), 0, Tag1 ("Logic_monad", 29)), 0); (("set", 602), ((Tag1 (0, ((("o")), 100000000, 0, -274), (Tag3 ((("t", 596)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -272); ((("i")), 100000000, 0, -273); ((("o")), 100000000, 0, -274); ((("e")), 100000000, 0, -275)], (0)), 100000000, 0, -271), 0), 100000000, 0, -270), 0, (("engine/logic_monad.mli", 127, 4355, 4357), ("engine/logic_monad.mli", 127, 4355, 4393), 0), 0, Tag1 ("Logic_monad", 30)), 0); (("get", 603), ((Tag3 ((("t", 596)), [((("s")), 100000000, 0, -268); ((("s")), 100000000, 0, -268); ((("s")), 100000000, 0, -268); ((("e")), 100000000, 0, -269)], (0)), 100000000, 0, -267), 0, (("engine/logic_monad.mli", 128, 4394, 4396), ("engine/logic_monad.mli", 128, 4394, 4424), 0), 0, Tag1 ("Logic_monad", 31)), 0); (("modify", 604), ((Tag1 (0, (Tag1 (0, ((("i")), 100000000, 0, -263), ((("o")), 100000000, 0, -264), 0), 100000000, 0, -266), (Tag3 ((("t", 596)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -262); ((("i")), 100000000, 0, -263); ((("o")), 100000000, 0, -264); ((("e")), 100000000, 0, -265)], (0)), 100000000, 0, -261), 0), 100000000, 0, -260), 0, (("engine/logic_monad.mli", 129, 4425, 4427), ("engine/logic_monad.mli", 129, 4425, 4474), 0), 0, Tag1 ("Logic_monad", 32)), 0); (("interleave", 605), ((Tag1 (0, (Tag1 (0, ((("e1")), 100000000, 0, -257), ((("e2")), 100000000, 0, -255), 0), 100000000, 0, -259), (Tag1 (0, (Tag1 (0, ((("e2")), 100000000, 0, -255), ((("e1")), 100000000, 0, -257), 0), 100000000, 0, -258), (Tag1 (0, (Tag3 ((("t", 596)), [((("a")), 100000000, 0, -252); ((("i")), 100000000, 0, -253); ((("o")), 100000000, 0, -254); ((("e1")), 100000000, 0, -257)], (0)), 100000000, 0, -256), (Tag3 ((("t", 596)), [((("a")), 100000000, 0, -252); ((("i")), 100000000, 0, -253); ((("o")), 100000000, 0, -254); ((("e2")), 100000000, 0, -255)], (0)), 100000000, 0, -251), 0), 100000000, 0, -250), 0), 100000000, 0, -249), 0), 100000000, 0, -248), 0, (("engine/logic_monad.mli", 131, 4476, 4478), ("engine/logic_monad.mli", 132, 4550, 4573), 0), 0, Tag1 ("Logic_monad", 33)), 0); (("zero", 606), ((Tag1 (0, ((("e")), 100000000, 0, -247), (Tag3 ((("t", 596)), [((("a")), 100000000, 0, -244); ((("i")), 100000000, 0, -245); ((("o")), 100000000, 0, -246); ((("e")), 100000000, 0, -247)], (0)), 100000000, 0, -243), 0), 100000000, 0, -242), 0, (("engine/logic_monad.mli", 138, 4881, 4883), ("engine/logic_monad.mli", 138, 4881, 4918), 0), 0, Tag1 ("Logic_monad", 34)), 0); (("plus", 607), ((Tag1 (0, (Tag3 ((("t", 596)), [((("a")), 100000000, 0, -235); ((("i")), 100000000, 0, -236); ((("o")), 100000000, 0, -237); ((("e")), 100000000, 0, -238)], (0)), 100000000, 0, -241), (Tag1 (0, (Tag1 (0, ((("e")), 100000000, 0, -238), (Tag3 ((("t", 596)), [((("a")), 100000000, 0, -235); ((("i")), 100000000, 0, -236); ((("o")), 100000000, 0, -237); ((("e")), 100000000, 0, -238)], (0)), 100000000, 0, -240), 0), 100000000, 0, -239), (Tag3 ((("t", 596)), [((("a")), 100000000, 0, -235); ((("i")), 100000000, 0, -236); ((("o")), 100000000, 0, -237); ((("e")), 100000000, 0, -238)], (0)), 100000000, 0, -234), 0), 100000000, 0, -233), 0), 100000000, 0, -232), 0, (("engine/logic_monad.mli", 139, 4919, 4921), ("engine/logic_monad.mli", 139, 4919, 5002), 0), 0, Tag1 ("Logic_monad", 35)), 0); (("split", 608), ((Tag1 (0, (Tag3 ((("t", 596)), [((("a")), 100000000, 0, -226); ((("s")), 100000000, 0, -229); ((("s")), 100000000, 0, -229); ((("e")), 100000000, 0, -230)], (0)), 100000000, 0, -231), (Tag3 ((("t", 596)), [(Tag3 ((("list_view", 562)), [((("a")), 100000000, 0, -226); (Tag3 ((("t", 596)), [((("a")), 100000000, 0, -226); ((("i")), 100000000, 0, -228); ((("s")), 100000000, 0, -229); ((("e")), 100000000, 0, -230)], (0)), 100000000, 0, -227); ((("e")), 100000000, 0, -230)], (0)), 100000000, 0, -225); ((("s")), 100000000, 0, -229); ((("s")), 100000000, 0, -229); ((("e")), 100000000, 0, -230)], (0)), 100000000, 0, -224), 0), 100000000, 0, -223), 0, (("engine/logic_monad.mli", 141, 5004, 5006), ("engine/logic_monad.mli", 142, 5040, 5098), 0), 0, Tag1 ("Logic_monad", 36)), 0); (("once", 609), ((Tag1 (0, (Tag3 ((("t", 596)), [((("a")), 100000000, 0, -218); ((("i")), 100000000, 0, -219); ((("o")), 100000000, 0, -220); ((("e")), 100000000, 0, -221)], (0)), 100000000, 0, -222), (Tag3 ((("t", 596)), [((("a")), 100000000, 0, -218); ((("i")), 100000000, 0, -219); ((("o")), 100000000, 0, -220); ((("e")), 100000000, 0, -221)], (0)), 100000000, 0, -217), 0), 100000000, 0, -216), 0, (("engine/logic_monad.mli", 144, 5100, 5102), ("engine/logic_monad.mli", 144, 5100, 5153), 0), 0, Tag1 ("Logic_monad", 37)), 0); (("break", 610), ((Tag1 (0, (Tag1 (0, ((("e")), 100000000, 0, -212), (Tag3 ((Tag3 ("option", 10)), [((("e")), 100000000, 0, -212)], (0)), 100000000, 0, -215), 0), 100000000, 0, -214), (Tag1 (0, (Tag3 ((("t", 596)), [((("a")), 100000000, 0, -209); ((("i")), 100000000, 0, -210); ((("o")), 100000000, 0, -211); ((("e")), 100000000, 0, -212)], (0)), 100000000, 0, -213), (Tag3 ((("t", 596)), [((("a")), 100000000, 0, -209); ((("i")), 100000000, 0, -210); ((("o")), 100000000, 0, -211); ((("e")), 100000000, 0, -212)], (0)), 100000000, 0, -208), 0), 100000000, 0, -207), 0), 100000000, 0, -206), 0, (("engine/logic_monad.mli", 145, 5154, 5156), ("engine/logic_monad.mli", 145, 5154, 5229), 0), 0, Tag1 ("Logic_monad", 38)), 0); (("lift", 611), ((Tag1 (0, (Tag3 (Tag1 ((("NonLogical", 560)), "t"), [((("a")), 100000000, 0, -202)], (0)), 100000000, 0, -205), (Tag3 ((("t", 596)), [((("a")), 100000000, 0, -202); ((("s")), 100000000, 0, -203); ((("s")), 100000000, 0, -203); ((("e")), 100000000, 0, -204)], (0)), 100000000, 0, -201), 0), 100000000, 0, -200), 0, (("engine/logic_monad.mli", 146, 5230, 5232), ("engine/logic_monad.mli", 146, 5230, 5280), 0), 0, Tag1 ("Logic_monad", 39)), 0); Tag1 (("reified", 612), ([((("a")), 100000000, 0, -198); ((("e")), 100000000, 0, -199)], 2, 0, 1, 0, [7; 7], [2; 2], 0, 0, (("engine/logic_monad.mli", 148, 5282, 5284), ("engine/logic_monad.mli", 148, 5282, 5305), 0), 0, 0, 0, Tag1 ("Logic_monad", 40)), 1, 0); Tag1 (("reified_", 613), ([((("a")), 100000000, 0, -196); ((("e")), 100000000, 0, -197)], 2, 0, 1, 0, [7; 7], [2; 2], 0, 0, (("engine/logic_monad.mli", 149, 5306, 5308), ("engine/logic_monad.mli", 149, 5306, 5330), 0), 0, 0, 0, Tag1 ("Logic_monad", 41)), 1, 0); (("repr", 614), ((Tag1 (0, (Tag3 ((("reified", 612)), [((("a")), 100000000, 0, -192); ((("e")), 100000000, 0, -194)], (0)), 100000000, 0, -195), (Tag3 (Tag1 ((("NonLogical", 560)), "t"), [(Tag3 ((("list_view_", 561)), [((("a")), 100000000, 0, -192); (Tag3 ((("reified_", 613)), [((("a")), 100000000, 0, -192); ((("e")), 100000000, 0, -194)], (0)), 100000000, 0, -193); ((("e")), 100000000, 0, -194)], (0)), 100000000, 0, -191)], (0)), 100000000, 0, -190), 0), 100000000, 0, -189), 0, (("engine/logic_monad.mli", 151, 5332, 5334), ("engine/logic_monad.mli", 151, 5332, 5416), 0), 0, Tag1 ("Logic_monad", 42)), 0); (("run", 615), ((Tag1 (0, (Tag3 ((("t", 596)), [((("a")), 100000000, 0, -184); ((("i")), 100000000, 0, -187); ((("o")), 100000000, 0, -185); ((("e")), 100000000, 0, -186)], (0)), 100000000, 0, -188), (Tag1 (0, ((("i")), 100000000, 0, -187), (Tag3 ((("reified", 612)), [(Tag2 ([((("a")), 100000000, 0, -184); ((("o")), 100000000, 0, -185)]), 100000000, 0, -183); ((("e")), 100000000, 0, -186)], (0)), 100000000, 0, -182), 0), 100000000, 0, -181), 0), 100000000, 0, -180), 0, (("engine/logic_monad.mli", 153, 5418, 5420), ("engine/logic_monad.mli", 153, 5418, 5479), 0), 0, Tag1 ("Logic_monad", 43)), 0)]), 0, (("engine/logic_monad.mli", 117, 3972, 3972), ("engine/logic_monad.mli", 155, 5481, 5484), 0), Tag1 ("Logic_monad", 44)), 0, 0); Tag4 (("Param", 564), ((Tag1 ([Tag1 (("e", 616), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("engine/logic_monad.mli", 162, 5614, 5616), ("engine/logic_monad.mli", 162, 5614, 5622), 0), 0, 0, 0, Tag1 ("Logic_monad", 45)), 1, 0); Tag1 (("w", 617), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("engine/logic_monad.mli", 165, 5644, 5646), ("engine/logic_monad.mli", 165, 5644, 5652), 0), 0, 0, 0, Tag1 ("Logic_monad", 46)), 1, 0); (("wunit", 618), ((Tag3 ((("w", 617)), 0, (0)), 100000000, 0, -332), 0, (("engine/logic_monad.mli", 168, 5684, 5686), ("engine/logic_monad.mli", 168, 5684, 5699), 0), 0, Tag1 ("Logic_monad", 47)), 0); (("wprod", 619), ((Tag1 (0, (Tag3 ((("w", 617)), 0, (0)), 100000000, 0, -331), (Tag1 (0, (Tag3 ((("w", 617)), 0, (0)), 100000000, 0, -330), (Tag3 ((("w", 617)), 0, (0)), 100000000, 0, -329), 0), 100000000, 0, -328), 0), 100000000, 0, -327), 0, (("engine/logic_monad.mli", 169, 5700, 5702), ("engine/logic_monad.mli", 169, 5700, 5725), 0), 0, Tag1 ("Logic_monad", 48)), 0); Tag1 (("s", 620), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("engine/logic_monad.mli", 172, 5747, 5749), ("engine/logic_monad.mli", 172, 5747, 5755), 0), 0, 0, 0, Tag1 ("Logic_monad", 49)), 1, 0); Tag1 (("u", 621), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("engine/logic_monad.mli", 175, 5811, 5813), ("engine/logic_monad.mli", 175, 5811, 5819), 0), 0, 0, 0, Tag1 ("Logic_monad", 50)), 1, 0); (("uunit", 622), ((Tag3 ((("u", 621)), 0, (0)), 100000000, 0, -326), 0, (("engine/logic_monad.mli", 178, 5851, 5853), ("engine/logic_monad.mli", 178, 5851, 5866), 0), 0, Tag1 ("Logic_monad", 51)), 0)])), 0, (("engine/logic_monad.mli", 159, 5570, 5570), ("engine/logic_monad.mli", 180, 5868, 5871), 0), Tag1 ("Logic_monad", 52)), 0); Tag3 (("Logical", 565), 0, (Tag2 (((("P", 566)), ((("Param", 564)))), Tag1 ([Tag1 (("t", 623), ([((("a")), 100000000, 0, -454)], 1, 0, 1, 0, [1], [2], 0, 0, (("clib/monad.mli", 19, 836, 838), ("clib/monad.mli", 19, 836, 848), 0), 0, 0, 0, Tag1 ("Monad", 0)), 1, 0); (("return", 624), ((Tag1 (0, ((("a")), 100000000, 0, -453), (Tag3 ((("t", 623)), [((("a")), 100000000, 0, -453)], (0)), 100000000, 0, -452), 0), 100000000, 0, -451), 0, (("clib/monad.mli", 20, 849, 851), ("clib/monad.mli", 20, 849, 874), 0), 0, Tag1 ("Monad", 1)), 0); ((">>=", 625), ((Tag1 (0, (Tag3 ((("t", 623)), [((("a")), 100000000, 0, -449)], (0)), 100000000, 0, -450), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -449), (Tag3 ((("t", 623)), [((("b")), 100000000, 0, -446)], (0)), 100000000, 0, -448), 0), 100000000, 0, -447), (Tag3 ((("t", 623)), [((("b")), 100000000, 0, -446)], (0)), 100000000, 0, -445), 0), 100000000, 0, -444), 0), 100000000, 0, -443), 0, (("clib/monad.mli", 21, 875, 877), ("clib/monad.mli", 21, 875, 917), 0), 0, Tag1 ("Monad", 2)), 0); ((">>", 626), ((Tag1 (0, (Tag3 ((("t", 623)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -442)], (0)), 100000000, 0, -441), (Tag1 (0, (Tag3 ((("t", 623)), [((("a")), 100000000, 0, -439)], (0)), 100000000, 0, -440), (Tag3 ((("t", 623)), [((("a")), 100000000, 0, -439)], (0)), 100000000, 0, -438), 0), 100000000, 0, -437), 0), 100000000, 0, -436), 0, (("clib/monad.mli", 22, 918, 920), ("clib/monad.mli", 22, 918, 953), 0), 0, Tag1 ("Monad", 3)), 0); (("map", 627), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -434), ((("b")), 100000000, 0, -432), 0), 100000000, 0, -435), (Tag1 (0, (Tag3 ((("t", 623)), [((("a")), 100000000, 0, -434)], (0)), 100000000, 0, -433), (Tag3 ((("t", 623)), [((("b")), 100000000, 0, -432)], (0)), 100000000, 0, -431), 0), 100000000, 0, -430), 0), 100000000, 0, -429), 0, (("clib/monad.mli", 23, 954, 956), ("clib/monad.mli", 23, 954, 992), 0), 0, Tag1 ("Monad", 4)), 0); Tag3 (("List", 628), 0, (Tag1 ([(("map", 648), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -525), (Tag3 ((("t", 623)), [((("b")), 100000000, 0, -523)], (0)), 100000000, 0, -527), 0), 100000000, 0, -526), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -525)], (0)), 100000000, 0, -524), (Tag3 ((("t", 623)), [(Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -523)], (0)), 100000000, 0, -522)], (0)), 100000000, 0, -521), 0), 100000000, 0, -520), 0), 100000000, 0, -519), 0, (("clib/monad.mli", 91, 3190, 3206), ("clib/monad.mli", 91, 3190, 3234), 0), 0, Tag1 ("Monad", 7)), 0); (("map_right", 649), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -516), (Tag3 ((("t", 623)), [((("b")), 100000000, 0, -514)], (0)), 100000000, 0, -518), 0), 100000000, 0, -517), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -516)], (0)), 100000000, 0, -515), (Tag3 ((("t", 623)), [(Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -514)], (0)), 100000000, 0, -513)], (0)), 100000000, 0, -512), 0), 100000000, 0, -511), 0), 100000000, 0, -510), 0, (("clib/monad.mli", 91, 3190, 3206), ("clib/monad.mli", 91, 3190, 3234), 0), 0, Tag1 ("Monad", 8)), 0); (("fold_right", 650), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -506), (Tag1 (0, ((("b")), 100000000, 0, -504), (Tag3 ((("t", 623)), [((("b")), 100000000, 0, -504)], (0)), 100000000, 0, -509), 0), 100000000, 0, -508), 0), 100000000, 0, -507), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -506)], (0)), 100000000, 0, -505), (Tag1 (0, ((("b")), 100000000, 0, -504), (Tag3 ((("t", 623)), [((("b")), 100000000, 0, -504)], (0)), 100000000, 0, -503), 0), 100000000, 0, -502), 0), 100000000, 0, -501), 0), 100000000, 0, -500), 0, (("clib/monad.mli", 91, 3190, 3206), ("clib/monad.mli", 91, 3190, 3234), 0), 0, Tag1 ("Monad", 9)), 0); (("fold_left", 651), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -494), (Tag1 (0, ((("b")), 100000000, 0, -496), (Tag3 ((("t", 623)), [((("a")), 100000000, 0, -494)], (0)), 100000000, 0, -499), 0), 100000000, 0, -498), 0), 100000000, 0, -497), (Tag1 (0, ((("a")), 100000000, 0, -494), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -496)], (0)), 100000000, 0, -495), (Tag3 ((("t", 623)), [((("a")), 100000000, 0, -494)], (0)), 100000000, 0, -493), 0), 100000000, 0, -492), 0), 100000000, 0, -491), 0), 100000000, 0, -490), 0, (("clib/monad.mli", 91, 3190, 3206), ("clib/monad.mli", 91, 3190, 3234), 0), 0, Tag1 ("Monad", 10)), 0); (("iter", 652), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -486), (Tag3 ((("t", 623)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -489)], (0)), 100000000, 0, -488), 0), 100000000, 0, -487), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -486)], (0)), 100000000, 0, -485), (Tag3 ((("t", 623)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -484)], (0)), 100000000, 0, -483), 0), 100000000, 0, -482), 0), 100000000, 0, -481), 0, (("clib/monad.mli", 91, 3190, 3206), ("clib/monad.mli", 91, 3190, 3234), 0), 0, Tag1 ("Monad", 11)), 0); (("map_filter", 653), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -477), (Tag3 ((("t", 623)), [(Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -475)], (0)), 100000000, 0, -480)], (0)), 100000000, 0, -479), 0), 100000000, 0, -478), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -477)], (0)), 100000000, 0, -476), (Tag3 ((("t", 623)), [(Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -475)], (0)), 100000000, 0, -474)], (0)), 100000000, 0, -473), 0), 100000000, 0, -472), 0), 100000000, 0, -471), 0, (("clib/monad.mli", 91, 3190, 3206), ("clib/monad.mli", 91, 3190, 3234), 0), 0, Tag1 ("Monad", 12)), 0); (("fold_left2", 654), ((Tag1 (0, (Tag3 ((("t", 623)), [((("a")), 100000000, 0, -461)], (0)), 100000000, 0, -470), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -461), (Tag1 (0, ((("b")), 100000000, 0, -465), (Tag1 (0, ((("c")), 100000000, 0, -463), (Tag3 ((("t", 623)), [((("a")), 100000000, 0, -461)], (0)), 100000000, 0, -469), 0), 100000000, 0, -468), 0), 100000000, 0, -467), 0), 100000000, 0, -466), (Tag1 (0, ((("a")), 100000000, 0, -461), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -465)], (0)), 100000000, 0, -464), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("c")), 100000000, 0, -463)], (0)), 100000000, 0, -462), (Tag3 ((("t", 623)), [((("a")), 100000000, 0, -461)], (0)), 100000000, 0, -460), 0), 100000000, 0, -459), 0), 100000000, 0, -458), 0), 100000000, 0, -457), 0), 100000000, 0, -456), 0), 100000000, 0, -455), 0, (("clib/monad.mli", 91, 3190, 3206), ("clib/monad.mli", 91, 3190, 3234), 0), 0, Tag1 ("Monad", 13)), 0)]), 0, (("clib/monad.mli", 91, 3190, 3192), ("clib/monad.mli", 91, 3190, 3234), 0), Tag1 ("Monad", 16)), 0, 0); (("ignore", 629), ((Tag1 (0, (Tag3 ((("t", 623)), [((("a")), 100000000, 0, -428)], (0)), 100000000, 0, -427), (Tag3 ((("t", 623)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -426)], (0)), 100000000, 0, -425), 0), 100000000, 0, -424), 0, (("engine/logic_monad.mli", 186, 5924, 5926), ("engine/logic_monad.mli", 186, 5924, 5953), 0), 0, Tag1 ("Logic_monad", 54)), 0); (("set", 630), ((Tag1 (0, (Tag3 (Tag1 ((("P", 566)), "s"), 0, (0)), 100000000, 0, -423), (Tag3 ((("t", 623)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -422)], (0)), 100000000, 0, -421), 0), 100000000, 0, -420), 0, (("engine/logic_monad.mli", 188, 5955, 5957), ("engine/logic_monad.mli", 188, 5955, 5980), 0), 0, Tag1 ("Logic_monad", 55)), 0); (("get", 631), ((Tag3 ((("t", 623)), [(Tag3 (Tag1 ((("P", 566)), "s"), 0, (0)), 100000000, 0, -419)], (0)), 100000000, 0, -418), 0, (("engine/logic_monad.mli", 189, 5981, 5983), ("engine/logic_monad.mli", 189, 5981, 5998), 0), 0, Tag1 ("Logic_monad", 56)), 0); (("modify", 632), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((("P", 566)), "s"), 0, (0)), 100000000, 0, -417), (Tag3 (Tag1 ((("P", 566)), "s"), 0, (0)), 100000000, 0, -416), 0), 100000000, 0, -415), (Tag3 ((("t", 623)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -414)], (0)), 100000000, 0, -413), 0), 100000000, 0, -412), 0, (("engine/logic_monad.mli", 190, 5999, 6001), ("engine/logic_monad.mli", 190, 5999, 6036), 0), 0, Tag1 ("Logic_monad", 57)), 0); (("put", 633), ((Tag1 (0, (Tag3 (Tag1 ((("P", 566)), "w"), 0, (0)), 100000000, 0, -411), (Tag3 ((("t", 623)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -410)], (0)), 100000000, 0, -409), 0), 100000000, 0, -408), 0, (("engine/logic_monad.mli", 191, 6037, 6039), ("engine/logic_monad.mli", 191, 6037, 6062), 0), 0, Tag1 ("Logic_monad", 58)), 0); (("current", 634), ((Tag3 ((("t", 623)), [(Tag3 (Tag1 ((("P", 566)), "e"), 0, (0)), 100000000, 0, -407)], (0)), 100000000, 0, -406), 0, (("engine/logic_monad.mli", 192, 6063, 6065), ("engine/logic_monad.mli", 192, 6063, 6084), 0), 0, Tag1 ("Logic_monad", 59)), 0); (("local", 635), ((Tag1 (0, (Tag3 (Tag1 ((("P", 566)), "e"), 0, (0)), 100000000, 0, -405), (Tag1 (0, (Tag3 ((("t", 623)), [((("a")), 100000000, 0, -403)], (0)), 100000000, 0, -404), (Tag3 ((("t", 623)), [((("a")), 100000000, 0, -403)], (0)), 100000000, 0, -402), 0), 100000000, 0, -401), 0), 100000000, 0, -400), 0, (("engine/logic_monad.mli", 193, 6085, 6087), ("engine/logic_monad.mli", 193, 6085, 6118), 0), 0, Tag1 ("Logic_monad", 60)), 0); (("update", 636), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((("P", 566)), "u"), 0, (0)), 100000000, 0, -399), (Tag3 (Tag1 ((("P", 566)), "u"), 0, (0)), 100000000, 0, -398), 0), 100000000, 0, -397), (Tag3 ((("t", 623)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -396)], (0)), 100000000, 0, -395), 0), 100000000, 0, -394), 0, (("engine/logic_monad.mli", 194, 6119, 6121), ("engine/logic_monad.mli", 194, 6119, 6156), 0), 0, Tag1 ("Logic_monad", 61)), 0); (("zero", 637), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Exninfo")), "iexn"), 0, (0)), 100000000, 0, -393), (Tag3 ((("t", 623)), [((("a")), 100000000, 0, -392)], (0)), 100000000, 0, -391), 0), 100000000, 0, -390), 0, (("engine/logic_monad.mli", 196, 6158, 6160), ("engine/logic_monad.mli", 196, 6158, 6191), 0), 0, Tag1 ("Logic_monad", 62)), 0); (("plus", 638), ((Tag1 (0, (Tag3 ((("t", 623)), [((("a")), 100000000, 0, -385)], (0)), 100000000, 0, -389), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Exninfo")), "iexn"), 0, (0)), 100000000, 0, -388), (Tag3 ((("t", 623)), [((("a")), 100000000, 0, -385)], (0)), 100000000, 0, -387), 0), 100000000, 0, -386), (Tag3 ((("t", 623)), [((("a")), 100000000, 0, -385)], (0)), 100000000, 0, -384), 0), 100000000, 0, -383), 0), 100000000, 0, -382), 0, (("engine/logic_monad.mli", 197, 6192, 6194), ("engine/logic_monad.mli", 197, 6192, 6243), 0), 0, Tag1 ("Logic_monad", 63)), 0); (("split", 639), ((Tag1 (0, (Tag3 ((("t", 623)), [((("a")), 100000000, 0, -378)], (0)), 100000000, 0, -381), (Tag3 ((("t", 623)), [(Tag3 ((("list_view", 562)), [((("a")), 100000000, 0, -378); (Tag3 ((("t", 623)), [((("a")), 100000000, 0, -378)], (0)), 100000000, 0, -379); (Tag3 (Tag1 ((Tag2 ("Exninfo")), "iexn"), 0, (0)), 100000000, 0, -380)], (0)), 100000000, 0, -377)], (0)), 100000000, 0, -376), 0), 100000000, 0, -375), 0, (("engine/logic_monad.mli", 198, 6244, 6246), ("engine/logic_monad.mli", 198, 6244, 6302), 0), 0, Tag1 ("Logic_monad", 64)), 0); (("once", 640), ((Tag1 (0, (Tag3 ((("t", 623)), [((("a")), 100000000, 0, -373)], (0)), 100000000, 0, -374), (Tag3 ((("t", 623)), [((("a")), 100000000, 0, -373)], (0)), 100000000, 0, -372), 0), 100000000, 0, -371), 0, (("engine/logic_monad.mli", 199, 6303, 6305), ("engine/logic_monad.mli", 199, 6303, 6328), 0), 0, Tag1 ("Logic_monad", 65)), 0); (("break", 641), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Exninfo")), "iexn"), 0, (0)), 100000000, 0, -370), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Exninfo")), "iexn"), 0, (0)), 100000000, 0, -369)], (0)), 100000000, 0, -368), 0), 100000000, 0, -367), (Tag1 (0, (Tag3 ((("t", 623)), [((("a")), 100000000, 0, -365)], (0)), 100000000, 0, -366), (Tag3 ((("t", 623)), [((("a")), 100000000, 0, -365)], (0)), 100000000, 0, -364), 0), 100000000, 0, -363), 0), 100000000, 0, -362), 0, (("engine/logic_monad.mli", 200, 6329, 6331), ("engine/logic_monad.mli", 200, 6329, 6396), 0), 0, Tag1 ("Logic_monad", 66)), 0); (("lift", 642), ((Tag1 (0, (Tag3 (Tag1 ((("NonLogical", 560)), "t"), [((("a")), 100000000, 0, -360)], (0)), 100000000, 0, -361), (Tag3 ((("t", 623)), [((("a")), 100000000, 0, -360)], (0)), 100000000, 0, -359), 0), 100000000, 0, -358), 0, (("engine/logic_monad.mli", 202, 6398, 6400), ("engine/logic_monad.mli", 202, 6398, 6434), 0), 0, Tag1 ("Logic_monad", 67)), 0); Tag1 (("reified", 643), ([((("a")), 100000000, 0, -356)], 1, 0, 1, ((Tag3 (Tag1 ((("BackState", 563)), "reified"), [((("a")), 100000000, 0, -356); (Tag3 (Tag1 ((Tag2 ("Exninfo")), "iexn"), 0, (0)), 100000000, 0, -357)], (0)), 100000000, 0, -355)), [7], [2], 0, 0, (("engine/logic_monad.mli", 204, 6436, 6438), ("engine/logic_monad.mli", 204, 6436, 6492), 0), 0, 0, 0, Tag1 ("Logic_monad", 68)), 1, 0); Tag1 (("reified_", 644), ([((("a")), 100000000, 0, -353)], 1, 0, 1, ((Tag3 (Tag1 ((("BackState", 563)), "reified_"), [((("a")), 100000000, 0, -353); (Tag3 (Tag1 ((Tag2 ("Exninfo")), "iexn"), 0, (0)), 100000000, 0, -354)], (0)), 100000000, 0, -352)), [7], [2], 0, 0, (("engine/logic_monad.mli", 205, 6493, 6495), ("engine/logic_monad.mli", 205, 6493, 6551), 0), 0, 0, 0, Tag1 ("Logic_monad", 69)), 1, 0); (("repr", 645), ((Tag1 (0, (Tag3 ((("reified", 643)), [((("a")), 100000000, 0, -348)], (0)), 100000000, 0, -351), (Tag3 (Tag1 ((("NonLogical", 560)), "t"), [(Tag3 ((("list_view_", 561)), [((("a")), 100000000, 0, -348); (Tag3 ((("reified_", 644)), [((("a")), 100000000, 0, -348)], (0)), 100000000, 0, -349); (Tag3 (Tag1 ((Tag2 ("Exninfo")), "iexn"), 0, (0)), 100000000, 0, -350)], (0)), 100000000, 0, -347)], (0)), 100000000, 0, -346), 0), 100000000, 0, -345), 0, (("engine/logic_monad.mli", 207, 6553, 6555), ("engine/logic_monad.mli", 207, 6553, 6635), 0), 0, Tag1 ("Logic_monad", 70)), 0); (("run", 646), ((Tag1 (0, (Tag3 ((("t", 623)), [((("a")), 100000000, 0, -338)], (0)), 100000000, 0, -344), (Tag1 (0, (Tag3 (Tag1 ((("P", 566)), "e"), 0, (0)), 100000000, 0, -343), (Tag1 (0, (Tag3 (Tag1 ((("P", 566)), "s"), 0, (0)), 100000000, 0, -342), (Tag3 ((("reified", 643)), [(Tag2 ([((("a")), 100000000, 0, -338); (Tag3 (Tag1 ((("P", 566)), "s"), 0, (0)), 100000000, 0, -339); (Tag3 (Tag1 ((("P", 566)), "w"), 0, (0)), 100000000, 0, -340); (Tag3 (Tag1 ((("P", 566)), "u"), 0, (0)), 100000000, 0, -341)]), 100000000, 0, -337)], (0)), 100000000, 0, -336), 0), 100000000, 0, -335), 0), 100000000, 0, -334), 0), 100000000, 0, -333), 0, (("engine/logic_monad.mli", 209, 6637, 6639), ("engine/logic_monad.mli", 209, 6637, 6701), 0), 0, Tag1 ("Logic_monad", 71)), 0); Tag3 (("Unsafe", 647), 0, (Tag1 ([Tag1 (("state", 655), (0, 0, [[(("rstate", 464), 0, (Tag3 (Tag1 ((("P", 566)), "e"), 0, (0)), 100000000, 0, -542), (("engine/logic_monad.mli", 214, 6746, 6752), ("engine/logic_monad.mli", 214, 6746, 6765), 0), 0, Tag1 ("Logic_monad", 73)); (("ustate", 465), 0, (Tag3 (Tag1 ((("P", 566)), "u"), 0, (0)), 100000000, 0, -543), (("engine/logic_monad.mli", 215, 6766, 6772), ("engine/logic_monad.mli", 215, 6766, 6785), 0), 0, Tag1 ("Logic_monad", 74)); (("wstate", 466), 0, (Tag3 (Tag1 ((("P", 566)), "w"), 0, (0)), 100000000, 0, -544), (("engine/logic_monad.mli", 216, 6786, 6792), ("engine/logic_monad.mli", 216, 6786, 6805), 0), 0, Tag1 ("Logic_monad", 75)); (("sstate", 467), 0, (Tag3 (Tag1 ((("P", 566)), "s"), 0, (0)), 100000000, 0, -545), (("engine/logic_monad.mli", 217, 6806, 6812), ("engine/logic_monad.mli", 217, 6806, 6825), 0), 0, Tag1 ("Logic_monad", 76))]], 1, 0, 0, 0, 0, 0, (("engine/logic_monad.mli", 213, 6727, 6731), ("engine/logic_monad.mli", 218, 6826, 6831), 0), 0, 0, 0, Tag1 ("Logic_monad", 72)), 1, 0); (("make", 656), ((Tag1 (0, (Tag3 (Tag1 ((("BackState", 563)), "t"), [((("a")), 100000000, 0, -537); (Tag3 ((("state", 655)), 0, (0)), 100000000, 0, -539); (Tag3 ((("state", 655)), 0, (0)), 100000000, 0, -540); (Tag3 (Tag1 ((Tag2 ("Exninfo")), "iexn"), 0, (0)), 100000000, 0, -541)], (0)), 100000000, 0, -538), (Tag3 ((("t", 623)), [((("a")), 100000000, 0, -537)], (0)), 100000000, 0, -536), 0), 100000000, 0, -535), 0, (("engine/logic_monad.mli", 220, 6833, 6837), ("engine/logic_monad.mli", 220, 6833, 6900), 0), 0, Tag1 ("Logic_monad", 77)), 0); (("repr", 657), ((Tag1 (0, (Tag3 ((("t", 623)), [((("a")), 100000000, 0, -530)], (0)), 100000000, 0, -534), (Tag3 (Tag1 ((("BackState", 563)), "t"), [((("a")), 100000000, 0, -530); (Tag3 ((("state", 655)), 0, (0)), 100000000, 0, -531); (Tag3 ((("state", 655)), 0, (0)), 100000000, 0, -532); (Tag3 (Tag1 ((Tag2 ("Exninfo")), "iexn"), 0, (0)), 100000000, 0, -533)], (0)), 100000000, 0, -529), 0), 100000000, 0, -528), 0, (("engine/logic_monad.mli", 221, 6901, 6905), ("engine/logic_monad.mli", 221, 6901, 6968), 0), 0, Tag1 ("Logic_monad", 78)), 0)]), 0, (("engine/logic_monad.mli", 211, 6703, 6705), ("engine/logic_monad.mli", 223, 6970, 6975), 0), Tag1 ("Logic_monad", 79)), 0, 0)])), 0, (("engine/logic_monad.mli", 182, 5873, 5873), ("engine/logic_monad.mli", 225, 6977, 6980), 0), Tag1 ("Logic_monad", 80)), 0, 0)], "Logic_monad", [("Logic_monad", ("\130\157\160Q\163vQ\137\184\2242\209\128\024\220i")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Monad", ("\244\171T\157\194p\187\160\149\195{\132\222\020\253\148")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

    end

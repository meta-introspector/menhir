val ltac_trace_info : Ltac_plugin.Tacexpr.ltac_stack Exninfo.t
module Value :
  sig
    type t = Geninterp.Val.t
    val of_constr : EConstr.constr -> t
    val to_constr : t -> EConstr.constr option
    val of_int : int -> t
    val to_int : t -> int option
    val to_list : t -> t list option
    val of_closure :
      Geninterp.interp_sign -> Ltac_plugin.Tacexpr.glob_tactic_expr -> t
    val cast :
      'a Genarg.typed_abstract_argument_type -> Geninterp.Val.t -> 'a
    val apply : t -> t list -> unit Proofview.tactic
    val apply_val : t -> t list -> t Ftactic.t
  end
type value = Value.t
module TacStore :
  sig
    type t = Geninterp.TacStore.t
    type 'a field = 'a Geninterp.TacStore.field
    val field : unit -> 'a field
    val empty : t
    val set : t -> 'a field -> 'a -> t
    val get : t -> 'a field -> 'a option
    val remove : t -> 'a field -> t
    val merge : t -> t -> t
  end
type interp_sign =
  Geninterp.interp_sign = {
  lfun : value Names.Id.Map.t;
  poly : bool;
  extra : TacStore.t;
}
val f_avoid_ids : Names.Id.Set.t TacStore.field
val f_debug : Ltac_plugin.Tactic_debug.debug_info TacStore.field
val extract_ltac_constr_values :
  interp_sign ->
  Environ.env -> Ltac_pretype.constr_under_binders Names.Id.Map.t
val set_debug : Ltac_plugin.Tactic_debug.debug_info -> unit
val get_debug : unit -> Ltac_plugin.Tactic_debug.debug_info
val type_uconstr :
  ?flags:Pretyping.inference_flags ->
  ?expected_type:Pretyping.typing_constraint ->
  Geninterp.interp_sign ->
  Ltac_pretype.closed_glob_constr -> EConstr.constr Tactypes.delayed_open
val interp_genarg :
  interp_sign -> Genarg.glob_generic_argument -> Value.t Ftactic.t
val val_interp :
  interp_sign ->
  Ltac_plugin.Tacexpr.glob_tactic_expr ->
  (value -> unit Proofview.tactic) -> unit Proofview.tactic
val interp_ltac_constr :
  interp_sign ->
  Ltac_plugin.Tacexpr.glob_tactic_expr ->
  (EConstr.constr -> unit Proofview.tactic) -> unit Proofview.tactic
val interp_red_expr :
  interp_sign ->
  Environ.env ->
  Evd.evar_map ->
  Ltac_plugin.Tacexpr.glob_red_expr -> Evd.evar_map * Redexpr.red_expr
val interp_redexp :
  Environ.env ->
  Evd.evar_map ->
  Ltac_plugin.Tacexpr.raw_red_expr -> Evd.evar_map * Redexpr.red_expr
val interp_hyp :
  interp_sign -> Environ.env -> Evd.evar_map -> Names.lident -> Names.Id.t
val interp_glob_closure :
  interp_sign ->
  Environ.env ->
  Evd.evar_map ->
  ?kind:Pretyping.typing_constraint ->
  ?pattern_mode:bool ->
  Genintern.glob_constr_and_expr -> Ltac_pretype.closed_glob_constr
val interp_uconstr :
  interp_sign ->
  Environ.env ->
  Evd.evar_map ->
  Genintern.glob_constr_and_expr -> Ltac_pretype.closed_glob_constr
val interp_constr_gen :
  Pretyping.typing_constraint ->
  interp_sign ->
  Environ.env ->
  Evd.evar_map ->
  Genintern.glob_constr_and_expr -> Evd.evar_map * EConstr.constr
val interp_bindings :
  interp_sign ->
  Environ.env ->
  Evd.evar_map ->
  Genintern.glob_constr_and_expr Tactypes.bindings ->
  Evd.evar_map * EConstr.constr Tactypes.bindings
val interp_open_constr :
  ?expected_type:Pretyping.typing_constraint ->
  ?flags:Pretyping.inference_flags ->
  interp_sign ->
  Environ.env ->
  Evd.evar_map ->
  Genintern.glob_constr_and_expr -> Evd.evar_map * EConstr.constr
val interp_open_constr_with_classes :
  ?expected_type:Pretyping.typing_constraint ->
  interp_sign ->
  Environ.env ->
  Evd.evar_map ->
  Genintern.glob_constr_and_expr -> Evd.evar_map * EConstr.constr
val interp_open_constr_with_bindings :
  interp_sign ->
  Environ.env ->
  Evd.evar_map ->
  Genintern.glob_constr_and_expr Tactypes.with_bindings ->
  Evd.evar_map * EConstr.constr Tactypes.with_bindings
val eval_tactic :
  Ltac_plugin.Tacexpr.glob_tactic_expr -> unit Proofview.tactic
val eval_tactic_ist :
  interp_sign ->
  Ltac_plugin.Tacexpr.glob_tactic_expr -> unit Proofview.tactic
val tactic_of_value : interp_sign -> Value.t -> unit Proofview.tactic
val interp_tac_gen :
  value Names.Id.Map.t ->
  Names.Id.Set.t ->
  Ltac_plugin.Tactic_debug.debug_info ->
  Ltac_plugin.Tacexpr.raw_tactic_expr -> unit Proofview.tactic
val interp : Ltac_plugin.Tacexpr.raw_tactic_expr -> unit Proofview.tactic
type ltac_expr = {
  global : bool;
  ast : Ltac_plugin.Tacexpr.raw_tactic_expr;
}
val hide_interp : ltac_expr -> ComTactic.interpretable
val interp_ltac_var :
  (value -> 'a) ->
  interp_sign -> (Environ.env * Evd.evar_map) option -> Names.lident -> 'a
val interp_int : interp_sign -> Names.lident -> int
val interp_int_or_var : interp_sign -> int Locus.or_var -> int
val interp_ident :
  interp_sign -> Environ.env -> Evd.evar_map -> Names.Id.t -> Names.Id.t
val interp_intro_pattern :
  interp_sign ->
  Environ.env ->
  Evd.evar_map ->
  Genintern.glob_constr_and_expr Tactypes.intro_pattern_expr CAst.t ->
  Tactypes.intro_pattern("DEBUG:rule", [(("ltac_trace_info", 1517), ((Tag3 (Tag1 ((Tag2 ("Exninfo")), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac_plugin")), "Tacexpr"), "ltac_stack"), 0, (0)), 100000000, 0, -271)], (0)), 100000000, 0, -270), 0, (("plugins/ltac/tacinterp.mli", 19, 771, 771), ("plugins/ltac/tacinterp.mli", 19, 771, 813), 0), 0, Tag1 ("Ltac_plugin__Tacinterp", 0)), 0); Tag3 (("Value", 1518), 0, (Tag1 ([Tag1 (("t", 1554), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Geninterp")), "Val"), "t"), 0, (0)), 100000000, 0, -315)), 0, 0, 0, 0, (("plugins/ltac/tacinterp.mli", 23, 834, 836), ("plugins/ltac/tacinterp.mli", 23, 834, 860), 0), 0, 0, 0, Tag1 ("Ltac_plugin__Tacinterp", 1)), 1, 0); (("of_constr", 1555), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -314), (Tag3 ((("t", 1554)), 0, (0)), 100000000, 0, -313), 0), 100000000, 0, -312), 0, (("plugins/ltac/tacinterp.mli", 24, 861, 863), ("plugins/ltac/tacinterp.mli", 24, 861, 890), 0), 0, Tag1 ("Ltac_plugin__Tacinterp", 2)), 0); (("to_constr", 1556), ((Tag1 (0, (Tag3 ((("t", 1554)), 0, (0)), 100000000, 0, -311), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -310)], (0)), 100000000, 0, -309), 0), 100000000, 0, -308), 0, (("plugins/ltac/tacinterp.mli", 25, 891, 893), ("plugins/ltac/tacinterp.mli", 25, 891, 927), 0), 0, Tag1 ("Ltac_plugin__Tacinterp", 3)), 0); (("of_int", 1557), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -307), (Tag3 ((("t", 1554)), 0, (0)), 100000000, 0, -306), 0), 100000000, 0, -305), 0, (("plugins/ltac/tacinterp.mli", 26, 928, 930), ("plugins/ltac/tacinterp.mli", 26, 928, 951), 0), 0, Tag1 ("Ltac_plugin__Tacinterp", 4)), 0); (("to_int", 1558), ((Tag1 (0, (Tag3 ((("t", 1554)), 0, (0)), 100000000, 0, -304), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -303)], (0)), 100000000, 0, -302), 0), 100000000, 0, -301), 0, (("plugins/ltac/tacinterp.mli", 27, 952, 954), ("plugins/ltac/tacinterp.mli", 27, 952, 982), 0), 0, Tag1 ("Ltac_plugin__Tacinterp", 5)), 0); (("to_list", 1559), ((Tag1 (0, (Tag3 ((("t", 1554)), 0, (0)), 100000000, 0, -300), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 1554)), 0, (0)), 100000000, 0, -299)], (0)), 100000000, 0, -298)], (0)), 100000000, 0, -297), 0), 100000000, 0, -296), 0, (("plugins/ltac/tacinterp.mli", 28, 983, 985), ("plugins/ltac/tacinterp.mli", 28, 983, 1017), 0), 0, Tag1 ("Ltac_plugin__Tacinterp", 6)), 0); (("of_closure", 1560), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Geninterp")), "interp_sign"), 0, (0)), 100000000, 0, -295), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac_plugin")), "Tacexpr"), "glob_tactic_expr"), 0, (0)), 100000000, 0, -294), (Tag3 ((("t", 1554)), 0, (0)), 100000000, 0, -293), 0), 100000000, 0, -292), 0), 100000000, 0, -291), 0, (("plugins/ltac/tacinterp.mli", 29, 1018, 1020), ("plugins/ltac/tacinterp.mli", 29, 1018, 1083), 0), 0, Tag1 ("Ltac_plugin__Tacinterp", 7)), 0); (("cast", 1561), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Genarg")), "typed_abstract_argument_type"), [((("a")), 100000000, 0, -288)], (0)), 100000000, 0, -290), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Geninterp")), "Val"), "t"), 0, (0)), 100000000, 0, -289), ((("a")), 100000000, 0, -288), 0), 100000000, 0, -287), 0), 100000000, 0, -286), 0, (("plugins/ltac/tacinterp.mli", 30, 1084, 1086), ("plugins/ltac/tacinterp.mli", 30, 1084, 1153), 0), 0, Tag1 ("Ltac_plugin__Tacinterp", 8)), 0); (("apply", 1562), ((Tag1 (0, (Tag3 ((("t", 1554)), 0, (0)), 100000000, 0, -285), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 1554)), 0, (0)), 100000000, 0, -284)], (0)), 100000000, 0, -283), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -282)], (0)), 100000000, 0, -281), 0), 100000000, 0, -280), 0), 100000000, 0, -279), 0, (("plugins/ltac/tacinterp.mli", 31, 1154, 1156), ("plugins/ltac/tacinterp.mli", 31, 1154, 1204), 0), 0, Tag1 ("Ltac_plugin__Tacinterp", 9)), 0); (("apply_val", 1563), ((Tag1 (0, (Tag3 ((("t", 1554)), 0, (0)), 100000000, 0, -278), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 1554)), 0, (0)), 100000000, 0, -277)], (0)), 100000000, 0, -276), (Tag3 (Tag1 ((Tag2 ("Ftactic")), "t"), [(Tag3 ((("t", 1554)), 0, (0)), 100000000, 0, -275)], (0)), 100000000, 0, -274), 0), 100000000, 0, -273), 0), 100000000, 0, -272), 0, (("plugins/ltac/tacinterp.mli", 32, 1205, 1207), ("plugins/ltac/tacinterp.mli", 32, 1205, 1249), 0), 0, Tag1 ("Ltac_plugin__Tacinterp", 10)), 0)]), 0, (("plugins/ltac/tacinterp.mli", 21, 815, 815), ("plugins/ltac/tacinterp.mli", 33, 1250, 1253), 0), Tag1 ("Ltac_plugin__Tacinterp", 11)), 0, 0); Tag1 (("value", 1519), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Value", 1518)), "t"), 0, (0)), 100000000, 0, -269)), 0, 0, 0, 0, (("plugins/ltac/tacinterp.mli", 36, 1288, 1288), ("plugins/ltac/tacinterp.mli", 36, 1288, 1308), 0), 0, 0, 0, Tag1 ("Ltac_plugin__Tacinterp", 12)), 1, 0); Tag3 (("TacStore", 1520), 0, (Tag1 ([Tag1 (("t", 1564), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Geninterp")), "TacStore"), "t"), 0, (0)), 100000000, 0, -347)), 0, 0, 0, 0, (("plugins/ltac/tacinterp.mli", 39, 1341, 1343), ("plugins/ltac/tacinterp.mli", 39, 1341, 1372), 0), 0, 0, 0, Tag1 ("Ltac_plugin__Tacinterp", 13)), 1, 0); Tag1 (("field", 1565), ([((("a")), 100000000, 0, -346)], 1, 0, 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Geninterp")), "TacStore"), "field"), [((("a")), 100000000, 0, -346)], (0)), 100000000, 0, -345)), [7], [2], 0, 0, (("plugins/ltac/tacinterp.mli", 40, 1373, 1379), ("plugins/ltac/tacinterp.mli", 40, 1373, 1422), 0), 0, 0, 0, Tag1 ("Ltac_plugin__Tacinterp", 14)), 1, 0); (("field", 1566), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -344), (Tag3 ((("field", 1565)), [((("a")), 100000000, 0, -343)], (0)), 100000000, 0, -342), 0), 100000000, 0, -341), 0, (("clib/store.mli", 22, 940, 942), ("clib/store.mli", 22, 940, 970), 0), 0, Tag1 ("Store", 2)), 0); (("empty", 1567), ((Tag3 ((("t", 1564)), 0, (0)), 100000000, 0, -340), 0, (("clib/store.mli", 25, 1000, 1002), ("clib/store.mli", 25, 1000, 1015), 0), 0, Tag1 ("Store", 3)), 0); (("set", 1568), ((Tag1 (0, (Tag3 ((("t", 1564)), 0, (0)), 100000000, 0, -339), (Tag1 (0, (Tag3 ((("field", 1565)), [((("a")), 100000000, 0, -337)], (0)), 100000000, 0, -338), (Tag1 (0, ((("a")), 100000000, 0, -337), (Tag3 ((("t", 1564)), 0, (0)), 100000000, 0, -336), 0), 100000000, 0, -335), 0), 100000000, 0, -334), 0), 100000000, 0, -333), 0, (("clib/store.mli", 28, 1038, 1040), ("clib/store.mli", 28, 1038, 1074), 0), 0, Tag1 ("Store", 4)), 0); (("get", 1569), ((Tag1 (0, (Tag3 ((("t", 1564)), 0, (0)), 100000000, 0, -332), (Tag1 (0, (Tag3 ((("field", 1565)), [((("a")), 100000000, 0, -330)], (0)), 100000000, 0, -331), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -330)], (0)), 100000000, 0, -329), 0), 100000000, 0, -328), 0), 100000000, 0, -327), 0, (("clib/store.mli", 31, 1097, 1099), ("clib/store.mli", 31, 1097, 1135), 0), 0, Tag1 ("Store", 5)), 0); (("remove", 1570), ((Tag1 (0, (Tag3 ((("t", 1564)), 0, (0)), 100000000, 0, -326), (Tag1 (0, (Tag3 ((("field", 1565)), [((("a")), 100000000, 0, -325)], (0)), 100000000, 0, -324), (Tag3 ((("t", 1564)), 0, (0)), 100000000, 0, -323), 0), 100000000, 0, -322), 0), 100000000, 0, -321), 0, (("clib/store.mli", 34, 1179, 1181), ("clib/store.mli", 34, 1179, 1212), 0), 0, Tag1 ("Store", 6)), 0); (("merge", 1571), ((Tag1 (0, (Tag3 ((("t", 1564)), 0, (0)), 100000000, 0, -320), (Tag1 (0, (Tag3 ((("t", 1564)), 0, (0)), 100000000, 0, -319), (Tag3 ((("t", 1564)), 0, (0)), 100000000, 0, -318), 0), 100000000, 0, -317), 0), 100000000, 0, -316), 0, (("clib/store.mli", 37, 1252, 1254), ("clib/store.mli", 37, 1252, 1277), 0), 0, Tag1 ("Store", 7)), 0)]), 0, (("plugins/ltac/tacinterp.mli", 38, 1310, 1310), ("plugins/ltac/tacinterp.mli", 40, 1373, 1422), 0), Tag1 ("Ltac_plugin__Tacinterp", 15)), 0, 0); Tag1 (("interp_sign", 1521), (0, 0, [[(("lfun", 939), 0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "Map"), "t"), [(Tag3 ((("value", 1519)), 0, (0)), 100000000, 0, -266)], (0)), 100000000, 0, -265), (("plugins/ltac/tacinterp.mli", 44, 1545, 1549), ("plugins/ltac/tacinterp.mli", 45, 1571, 1574), 0), 0, Tag1 ("Ltac_plugin__Tacinterp", 17)); (("poly", 940), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -267), (("plugins/ltac/tacinterp.mli", 45, 1571, 1575), ("plugins/ltac/tacinterp.mli", 46, 1587, 1590), 0), 0, Tag1 ("Ltac_plugin__Tacinterp", 18)); (("extra", 941), 0, (Tag3 (Tag1 ((("TacStore", 1520)), "t"), 0, (0)), 100000000, 0, -268), (("plugins/ltac/tacinterp.mli", 46, 1587, 1591), ("plugins/ltac/tacinterp.mli", 46, 1587, 1609), 0), 0, Tag1 ("Ltac_plugin__Tacinterp", 19))]], 1, ((Tag3 (Tag1 ((Tag2 ("Geninterp")), "interp_sign"), 0, (0)), 100000000, 0, -264)), 0, 0, 0, 0, (("plugins/ltac/tacinterp.mli", 43, 1502, 1502), ("plugins/ltac/tacinterp.mli", 46, 1587, 1611), 0), 0, 0, 0, Tag1 ("Ltac_plugin__Tacinterp", 16)), 1, 0); (("f_avoid_ids", 1522), ((Tag3 (Tag1 ((("TacStore", 1520)), "field"), [(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "Set"), "t"), 0, (0)), 100000000, 0, -263)], (0)), 100000000, 0, -262), 0, (("plugins/ltac/tacinterp.mli", 50, 1629, 1629), ("plugins/ltac/tacinterp.mli", 50, 1629, 1670), 0), 0, Tag1 ("Ltac_plugin__Tacinterp", 20)), 0); (("f_debug", 1523), ((Tag3 (Tag1 ((("TacStore", 1520)), "field"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac_plugin")), "Tactic_debug"), "debug_info"), 0, (0)), 100000000, 0, -261)], (0)), 100000000, 0, -260), 0, (("plugins/ltac/tacinterp.mli", 51, 1671, 1671), ("plugins/ltac/tacinterp.mli", 51, 1671, 1710), 0), 0, Tag1 ("Ltac_plugin__Tacinterp", 21)), 0); (("extract_ltac_constr_values", 1524), ((Tag1 (0, (Tag3 ((("interp_sign", 1521)), 0, (0)), 100000000, 0, -259), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -258), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "Map"), "t"), [(Tag3 (Tag1 ((Tag2 ("Ltac_pretype")), "constr_under_binders"), 0, (0)), 100000000, 0, -257)], (0)), 100000000, 0, -256), 0), 100000000, 0, -255), 0), 100000000, 0, -254), 0, (("plugins/ltac/tacinterp.mli", 53, 1712, 1712), ("plugins/ltac/tacinterp.mli", 54, 1775, 1819), 0), 0, Tag1 ("Ltac_plugin__Tacinterp", 22)), 0); (("set_debug", 1525), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac_plugin")), "Tactic_debug"), "debug_info"), 0, (0)), 100000000, 0, -253), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -252), 0), 100000000, 0, -251), 0, (("plugins/ltac/tacinterp.mli", 59, 1951, 1951), ("plugins/ltac/tacinterp.mli", 59, 1951, 1985), 0), 0, Tag1 ("Ltac_plugin__Tacinterp", 23)), 0); (("get_debug", 1526), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -250), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac_plugin")), "Tactic_debug"), "debug_info"), 0, (0)), 100000000, 0, -249), 0), 100000000, 0, -248), 0, (("plugins/ltac/tacinterp.mli", 62, 2019, 2019), ("plugins/ltac/tacinterp.mli", 62, 2019, 2053), 0), 0, Tag1 ("Ltac_plugin__Tacinterp", 24)), 0); (("type_uconstr", 1527), ((Tag1 (Tag1 ("flags"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Pretyping")), "inference_flags"), 0, (0)), 100000000, 0, -247)], (0)), 100000000, 0, -246), (Tag1 (Tag1 ("expected_type"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Pretyping")), "typing_constraint"), 0, (0)), 100000000, 0, -245)], (0)), 100000000, 0, -244), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Geninterp")), "interp_sign"), 0, (0)), 100000000, 0, -243), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ltac_pretype")), "closed_glob_constr"), 0, (0)), 100000000, 0, -242), (Tag3 (Tag1 ((Tag2 ("Tactypes")), "delayed_open"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -241)], (0)), 100000000, 0, -240), 0), 100000000, 0, -239), 0), 100000000, 0, -238), 0), 100000000, 0, -237), 0), 100000000, 0, -236), 0, (("plugins/ltac/tacinterp.mli", 64, 2055, 2055), ("plugins/ltac/tacinterp.mli", 67, 2160, 2250), 0), 0, Tag1 ("Ltac_plugin__Tacinterp", 25)), 0); (("interp_genarg", 1528), ((Tag1 (0, (Tag3 ((("interp_sign", 1521)), 0, (0)), 100000000, 0, -235), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Genarg")), "glob_generic_argument"), 0, (0)), 100000000, 0, -234), (Tag3 (Tag1 ((Tag2 ("Ftactic")), "t"), [(Tag3 (Tag1 ((("Value", 1518)), "t"), 0, (0)), 100000000, 0, -233)], (0)), 100000000, 0, -232), 0), 100000000, 0, -231), 0), 100000000, 0, -230), 0, (("plugins/ltac/tacinterp.mli", 71, 2320, 2320), ("plugins/ltac/tacinterp.mli", 71, 2320, 2397), 0), 0, Tag1 ("Ltac_plugin__Tacinterp", 26)), 0); (("val_interp", 1529), ((Tag1 (0, (Tag3 ((("interp_sign", 1521)), 0, (0)), 100000000, 0, -229), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac_plugin")), "Tacexpr"), "glob_tactic_expr"), 0, (0)), 100000000, 0, -228), (Tag1 (0, (Tag1 (0, (Tag3 ((("value", 1519)), 0, (0)), 100000000, 0, -227), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -226)], (0)), 100000000, 0, -225), 0), 100000000, 0, -224), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -223)], (0)), 100000000, 0, -222), 0), 100000000, 0, -221), 0), 100000000, 0, -220), 0), 100000000, 0, -219), 0, (("plugins/ltac/tacinterp.mli", 74, 2432, 2432), ("plugins/ltac/tacinterp.mli", 74, 2432, 2541), 0), 0, Tag1 ("Ltac_plugin__Tacinterp", 27)), 0); (("interp_ltac_constr", 1530), ((Tag1 (0, (Tag3 ((("interp_sign", 1521)), 0, (0)), 100000000, 0, -218), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac_plugin")), "Tacexpr"), "glob_tactic_expr"), 0, (0)), 100000000, 0, -217), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -216), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -215)], (0)), 100000000, 0, -214), 0), 100000000, 0, -213), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -212)], (0)), 100000000, 0, -211), 0), 100000000, 0, -210), 0), 100000000, 0, -209), 0), 100000000, 0, -208), 0, (("plugins/ltac/tacinterp.mli", 77, 2602, 2602), ("plugins/ltac/tacinterp.mli", 77, 2602, 2720), 0), 0, Tag1 ("Ltac_plugin__Tacinterp", 28)), 0); (("interp_red_expr", 1531), ((Tag1 (0, (Tag3 ((("interp_sign", 1521)), 0, (0)), 100000000, 0, -207), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -206), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -205), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac_plugin")), "Tacexpr"), "glob_red_expr"), 0, (0)), 100000000, 0, -204), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -202); (Tag3 (Tag1 ((Tag2 ("Redexpr")), "red_expr"), 0, (0)), 100000000, 0, -203)]), 100000000, 0, -201), 0), 100000000, 0, -200), 0), 100000000, 0, -199), 0), 100000000, 0, -198), 0), 100000000, 0, -197), 0, (("plugins/ltac/tacinterp.mli", 80, 2757, 2757), ("plugins/ltac/tacinterp.mli", 80, 2757, 2865), 0), 0, Tag1 ("Ltac_plugin__Tacinterp", 29)), 0); (("interp_redexp", 1532), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -196), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -195), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac_plugin")), "Tacexpr"), "raw_red_expr"), 0, (0)), 100000000, 0, -194), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -192); (Tag3 (Tag1 ((Tag2 ("Redexpr")), "red_expr"), 0, (0)), 100000000, 0, -193)]), 100000000, 0, -191), 0), 100000000, 0, -190), 0), 100000000, 0, -189), 0), 100000000, 0, -188), 0, (("plugins/ltac/tacinterp.mli", 83, 2917, 2917), ("plugins/ltac/tacinterp.mli", 83, 2917, 3007), 0), 0, Tag1 ("Ltac_plugin__Tacinterp", 30)), 0); (("interp_hyp", 1533), ((Tag1 (0, (Tag3 ((("interp_sign", 1521)), 0, (0)), 100000000, 0, -187), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -186), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -185), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -184), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -183), 0), 100000000, 0, -182), 0), 100000000, 0, -181), 0), 100000000, 0, -180), 0), 100000000, 0, -179), 0, (("plugins/ltac/tacinterp.mli", 87, 3047, 3047), ("plugins/ltac/tacinterp.mli", 88, 3110, 3126), 0), 0, Tag1 ("Ltac_plugin__Tacinterp", 31)), 0); (("interp_glob_closure", 1534), ((Tag1 (0, (Tag3 ((("interp_sign", 1521)), 0, (0)), 100000000, 0, -178), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -177), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -176), (Tag1 (Tag1 ("kind"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Pretyping")), "typing_constraint"), 0, (0)), 100000000, 0, -175)], (0)), 100000000, 0, -174), (Tag1 (Tag1 ("pattern_mode"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -173)], (0)), 100000000, 0, -172), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Genintern")), "glob_constr_and_expr"), 0, (0)), 100000000, 0, -171), (Tag3 (Tag1 ((Tag2 ("Ltac_pretype")), "closed_glob_constr"), 0, (0)), 100000000, 0, -170), 0), 100000000, 0, -169), 0), 100000000, 0, -168), 0), 100000000, 0, -167), 0), 100000000, 0, -166), 0), 100000000, 0, -165), 0), 100000000, 0, -164), 0, (("plugins/ltac/tacinterp.mli", 90, 3128, 3128), ("plugins/ltac/tacinterp.mli", 92, 3285, 3318), 0), 0, Tag1 ("Ltac_plugin__Tacinterp", 32)), 0); (("interp_uconstr", 1535), ((Tag1 (0, (Tag3 ((("interp_sign", 1521)), 0, (0)), 100000000, 0, -163), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -162), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -161), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Genintern")), "glob_constr_and_expr"), 0, (0)), 100000000, 0, -160), (Tag3 (Tag1 ((Tag2 ("Ltac_pretype")), "closed_glob_constr"), 0, (0)), 100000000, 0, -159), 0), 100000000, 0, -158), 0), 100000000, 0, -157), 0), 100000000, 0, -156), 0), 100000000, 0, -155), 0, (("plugins/ltac/tacinterp.mli", 94, 3320, 3320), ("plugins/ltac/tacinterp.mli", 95, 3387, 3444), 0), 0, Tag1 ("Ltac_plugin__Tacinterp", 33)), 0); (("interp_constr_gen", 1536), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Pretyping")), "typing_constraint"), 0, (0)), 100000000, 0, -154), (Tag1 (0, (Tag3 ((("interp_sign", 1521)), 0, (0)), 100000000, 0, -153), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -152), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -151), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Genintern")), "glob_constr_and_expr"), 0, (0)), 100000000, 0, -150), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -148); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -149)]), 100000000, 0, -147), 0), 100000000, 0, -146), 0), 100000000, 0, -145), 0), 100000000, 0, -144), 0), 100000000, 0, -143), 0), 100000000, 0, -142), 0, (("plugins/ltac/tacinterp.mli", 97, 3446, 3446), ("plugins/ltac/tacinterp.mli", 98, 3516, 3594), 0), 0, Tag1 ("Ltac_plugin__Tacinterp", 34)), 0); (("interp_bindings", 1537), ((Tag1 (0, (Tag3 ((("interp_sign", 1521)), 0, (0)), 100000000, 0, -141), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -140), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -139), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Tactypes")), "bindings"), [(Tag3 (Tag1 ((Tag2 ("Genintern")), "glob_constr_and_expr"), 0, (0)), 100000000, 0, -138)], (0)), 100000000, 0, -137), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -134); (Tag3 (Tag1 ((Tag2 ("Tactypes")), "bindings"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -136)], (0)), 100000000, 0, -135)]), 100000000, 0, -133), 0), 100000000, 0, -132), 0), 100000000, 0, -131), 0), 100000000, 0, -130), 0), 100000000, 0, -129), 0, (("plugins/ltac/tacinterp.mli", 100, 3596, 3596), ("plugins/ltac/tacinterp.mli", 101, 3664, 3729), 0), 0, Tag1 ("Ltac_plugin__Tacinterp", 35)), 0); (("interp_open_constr", 1538), ((Tag1 (Tag1 ("expected_type"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Pretyping")), "typing_constraint"), 0, (0)), 100000000, 0, -128)], (0)), 100000000, 0, -127), (Tag1 (Tag1 ("flags"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Pretyping")), "inference_flags"), 0, (0)), 100000000, 0, -126)], (0)), 100000000, 0, -125), (Tag1 (0, (Tag3 ((("interp_sign", 1521)), 0, (0)), 100000000, 0, -124), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -123), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -122), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Genintern")), "glob_constr_and_expr"), 0, (0)), 100000000, 0, -121), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -119); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -120)]), 100000000, 0, -118), 0), 100000000, 0, -117), 0), 100000000, 0, -116), 0), 100000000, 0, -115), 0), 100000000, 0, -114), 0), 100000000, 0, -113), 0), 100000000, 0, -112), 0, (("plugins/ltac/tacinterp.mli", 103, 3731, 3731), ("plugins/ltac/tacinterp.mli", 106, 3888, 3943), 0), 0, Tag1 ("Ltac_plugin__Tacinterp", 36)), 0); (("interp_open_constr_with_classes", 1539), ((Tag1 (Tag1 ("expected_type"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Pretyping")), "typing_constraint"), 0, (0)), 100000000, 0, -111)], (0)), 100000000, 0, -110), (Tag1 (0, (Tag3 ((("interp_sign", 1521)), 0, (0)), 100000000, 0, -109), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -108), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -107), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Genintern")), "glob_constr_and_expr"), 0, (0)), 100000000, 0, -106), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -104); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -105)]), 100000000, 0, -103), 0), 100000000, 0, -102), 0), 100000000, 0, -101), 0), 100000000, 0, -100), 0), 100000000, 0, -99), 0), 100000000, 0, -98), 0, (("plugins/ltac/tacinterp.mli", 108, 3945, 3945), ("plugins/ltac/tacinterp.mli", 110, 4077, 4132), 0), 0, Tag1 ("Ltac_plugin__Tacinterp", 37)), 0); (("interp_open_constr_with_bindings", 1540), ((Tag1 (0, (Tag3 ((("interp_sign", 1521)), 0, (0)), 100000000, 0, -97), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -96), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -95), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Tactypes")), "with_bindings"), [(Tag3 (Tag1 ((Tag2 ("Genintern")), "glob_constr_and_expr"), 0, (0)), 100000000, 0, -94)], (0)), 100000000, 0, -93), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -90); (Tag3 (Tag1 ((Tag2 ("Tactypes")), "with_bindings"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -92)], (0)), 100000000, 0, -91)]), 100000000, 0, -89), 0), 100000000, 0, -88), 0), 100000000, 0, -87), 0), 100000000, 0, -86), 0), 100000000, 0, -85), 0, (("plugins/ltac/tacinterp.mli", 112, 4134, 4134), ("plugins/ltac/tacinterp.mli", 113, 4219, 4302), 0), 0, Tag1 ("Ltac_plugin__Tacinterp", 38)), 0); (("eval_tactic", 1541), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac_plugin")), "Tacexpr"), "glob_tactic_expr"), 0, (0)), 100000000, 0, -84), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -83)], (0)), 100000000, 0, -82), 0), 100000000, 0, -81), 0, (("plugins/ltac/tacinterp.mli", 117, 4344, 4344), ("plugins/ltac/tacinterp.mli", 117, 4344, 4403), 0), 0, Tag1 ("Ltac_plugin__Tacinterp", 39)), 0); (("eval_tactic_ist", 1542), ((Tag1 (0, (Tag3 ((("interp_sign", 1521)), 0, (0)), 100000000, 0, -80), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac_plugin")), "Tacexpr"), "glob_tactic_expr"), 0, (0)), 100000000, 0, -79), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -78)], (0)), 100000000, 0, -77), 0), 100000000, 0, -76), 0), 100000000, 0, -75), 0, (("plugins/ltac/tacinterp.mli", 119, 4405, 4405), ("plugins/ltac/tacinterp.mli", 119, 4405, 4483), 0), 0, Tag1 ("Ltac_plugin__Tacinterp", 40)), 0); (("tactic_of_value", 1543), ((Tag1 (0, (Tag3 ((("interp_sign", 1521)), 0, (0)), 100000000, 0, -74), (Tag1 (0, (Tag3 (Tag1 ((("Value", 1518)), "t"), 0, (0)), 100000000, 0, -73), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -72)], (0)), 100000000, 0, -71), 0), 100000000, 0, -70), 0), 100000000, 0, -69), 0, (("plugins/ltac/tacinterp.mli", 122, 4552, 4552), ("plugins/ltac/tacinterp.mli", 122, 4552, 4621), 0), 0, Tag1 ("Ltac_plugin__Tacinterp", 41)), 0); (("interp_tac_gen", 1544), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "Map"), "t"), [(Tag3 ((("value", 1519)), 0, (0)), 100000000, 0, -68)], (0)), 100000000, 0, -67), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "Set"), "t"), 0, (0)), 100000000, 0, -66), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac_plugin")), "Tactic_debug"), "debug_info"), 0, (0)), 100000000, 0, -65), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac_plugin")), "Tacexpr"), "raw_tactic_expr"), 0, (0)), 100000000, 0, -64), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -63)], (0)), 100000000, 0, -62), 0), 100000000, 0, -61), 0), 100000000, 0, -60), 0), 100000000, 0, -59), 0), 100000000, 0, -58), 0, (("plugins/ltac/tacinterp.mli", 126, 4662, 4662), ("plugins/ltac/tacinterp.mli", 127, 4713, 4784), 0), 0, Tag1 ("Ltac_plugin__Tacinterp", 42)), 0); (("interp", 1545), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac_plugin")), "Tacexpr"), "raw_tactic_expr"), 0, (0)), 100000000, 0, -57), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -56)], (0)), 100000000, 0, -55), 0), 100000000, 0, -54), 0, (("plugins/ltac/tacinterp.mli", 129, 4786, 4786), ("plugins/ltac/tacinterp.mli", 129, 4786, 4839), 0), 0, Tag1 ("Ltac_plugin__Tacinterp", 43)), 0); Tag1 (("ltac_expr", 1546), (0, 0, [[(("global", 1417), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -52), (("plugins/ltac/tacinterp.mli", 133, 4905, 4907), ("plugins/ltac/tacinterp.mli", 133, 4905, 4920), 0), 0, Tag1 ("Ltac_plugin__Tacinterp", 45)); (("ast", 1418), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac_plugin")), "Tacexpr"), "raw_tactic_expr"), 0, (0)), 100000000, 0, -53), (("plugins/ltac/tacinterp.mli", 134, 4921, 4923), ("plugins/ltac/tacinterp.mli", 134, 4921, 4953), 0), 0, Tag1 ("Ltac_plugin__Tacinterp", 46))]], 1, 0, 0, 0, 0, 0, (("plugins/ltac/tacinterp.mli", 132, 4886, 4886), ("plugins/ltac/tacinterp.mli", 135, 4954, 4955), 0), 0, 0, 0, Tag1 ("Ltac_plugin__Tacinterp", 44)), 1, 0); (("hide_interp", 1547), ((Tag1 (0, (Tag3 ((("ltac_expr", 1546)), 0, (0)), 100000000, 0, -51), (Tag3 (Tag1 ((Tag2 ("ComTactic")), "interpretable"), 0, (0)), 100000000, 0, -50), 0), 100000000, 0, -49), 0, (("plugins/ltac/tacinterp.mli", 137, 4957, 4957), ("plugins/ltac/tacinterp.mli", 137, 4957, 5011), 0), 0, Tag1 ("Ltac_plugin__Tacinterp", 47)), 0); (("interp_ltac_var", 1548), ((Tag1 (0, (Tag1 (0, (Tag3 ((("value", 1519)), 0, (0)), 100000000, 0, -48), ((("a")), 100000000, 0, -40), 0), 100000000, 0, -47), (Tag1 (0, (Tag3 ((("interp_sign", 1521)), 0, (0)), 100000000, 0, -46), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -44); (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -45)]), 100000000, 0, -43)], (0)), 100000000, 0, -42), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -41), ((("a")), 100000000, 0, -40), 0), 100000000, 0, -39), 0), 100000000, 0, -38), 0), 100000000, 0, -37), 0), 100000000, 0, -36), 0, (("plugins/ltac/tacinterp.mli", 141, 5073, 5073), ("plugins/ltac/tacinterp.mli", 142, 5127, 5180), 0), 0, Tag1 ("Ltac_plugin__Tacinterp", 48)), 0); (("interp_int", 1549), ((Tag1 (0, (Tag3 ((("interp_sign", 1521)), 0, (0)), 100000000, 0, -35), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -34), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -33), 0), 100000000, 0, -32), 0), 100000000, 0, -31), 0, (("plugins/ltac/tacinterp.mli", 144, 5182, 5182), ("plugins/ltac/tacinterp.mli", 144, 5182, 5227), 0), 0, Tag1 ("Ltac_plugin__Tacinterp", 49)), 0); (("interp_int_or_var", 1550), ((Tag1 (0, (Tag3 ((("interp_sign", 1521)), 0, (0)), 100000000, 0, -30), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Locus")), "or_var"), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -29)], (0)), 100000000, 0, -28), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -27), 0), 100000000, 0, -26), 0), 100000000, 0, -25), 0, (("plugins/ltac/tacinterp.mli", 146, 5229, 5229), ("plugins/ltac/tacinterp.mli", 146, 5229, 5291), 0), 0, Tag1 ("Ltac_plugin__Tacinterp", 50)), 0); (("interp_ident", 1551), ((Tag1 (0, (Tag3 ((("interp_sign", 1521)), 0, (0)), 100000000, 0, -24), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -23), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -22), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -21), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -20), 0), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("plugins/ltac/tacinterp.mli", 148, 5293, 5293), ("plugins/ltac/tacinterp.mli", 148, 5293, 5370), 0), 0, Tag1 ("Ltac_plugin__Tacinterp", 51)), 0); (("interp_intro_pattern", 1552), ((Tag1 (0, (Tag3 ((("interp_sign", 1521)), 0, (0)), 100000000, 0, -15), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -14), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -13), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 (Tag1 ((Tag2 ("Tactypes")), "intro_pattern_expr"), [(Tag3 (Tag1 ((Tag2 ("Genintern")), "glob_constr_and_expr"), 0, (0)), 100000000, 0, -12)], (0)), 100000000, 0, -11)], (0)), 100000000, 0, -10), (Tag3 (Tag1 ((Tag2 ("Tactypes")), "intro_pattern"), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("plugins/ltac/tacinterp.mli", 150, 5372, 5372), ("plugins/ltac/tacinterp.mli", 151, 5445, 5510), 0), 0, Tag1 ("Ltac_plugin__Tacinterp", 52)), 0); (("default_ist", 1553), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4), (Tag3 (Tag1 ((Tag2 ("Geninterp")), "interp_sign"), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("plugins/ltac/tacinterp.mli", 153, 5512, 5512), ("plugins/ltac/tacinterp.mli", 153, 5512, 5559), 0), 0, Tag1 ("Ltac_plugin__Tacinterp", 53)), 0)], "Ltac_plugin__Tacinterp", [("Ltac_plugin__Tacinterp", ("\1683!H\190\162R\184\017-\198\198\188\192\223B")); ("Z", ("\253\196\2168\027\199O\134\220\218\031'\1484\233o")); ("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Vmemitcodes", ("wCd\138\165\158DD\241gH\236.\210\197\247")); ("Vmbytecodes", ("\025\021\151\137Dx\149W\236+[\143f\208\160\016")); ("Vernacexpr", ("Lu|g\028\024j\193\000\234\175\209&\211]\137")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Unix", (":B72R\011\005Sj\189)\011\239PH\254")); ("UnivSubst", ("\190qu\031mc\130\181\003G]\132\"\219m)")); ("UnivProblem", ("6'\161\018\181\001.\253\000\141a6\171\1727\155")); ("UnivNames", ("%\151_\209%+JM$n\001\232\194n\178N")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Unification", ("\017\027\157=\255\1914L\020\213h\154.\219\005\170")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UState", ("SD\203\215|\136\n\251\239\208\148\215C\n\167\005")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("Typeclasses", ("KO\1297x\192\210\231\001\1824l\135\192\160|")); ("Type_errors", ("7\157\162-\214M\206\196\228\191\005v\134\177\144\134")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Tactypes", ("\143E\135*\195\151\144H\151M\011($\017\159\203")); ("Tactics", ("7\154?u\169\241\190R\245\187\153\020GE\029\215")); ("Tacred", ("\133d\143\1310z\030\237\232\002\001\025\147\140\215:")); ("Summary", ("\148G\135\226\024L3\246\021\028U\146\164`\253\250")); ("Store", ("/dT\252\145\179pq\216{\181\206\190K+U")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Random", ("\020\005Xq\171\026\218\152X\135\254\023\133zK\200")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Stateid", ("\183\165\247\166~\005\017.\179f.\178n\255(\137")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("Section", ("\245\207\b\021\142v=\155#w\246}\"4b\006")); ("Safe_typing", (")\250?\164\145\132\241\127\186\152h+\145\"\237l")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("RetrieveObl", ("\181(\0225\214z\024#d\246.M\015.i\210")); ("Reductionops", ("\179\023P\218\146Uh\014IS\196C\031q~#")); ("Redexpr", ("\181\250o\134\007\001\242+$\149)\204\226\"\0240")); ("Range", ("\218\130\001r\237\r\144\171\164\021l\155\196\143sg")); ("Proofview_monad", ("\218\196\189S\147\216\129\221\231\224v\228O\024*\239")); ("Proofview", ("\245\140U\027\236\199\199&\242\156\199YG\250tA")); ("Proof_using", ("\015\162\022\031Y\152\208\231;\015\140;\163\177\251\196")); ("Proof_bullet", ("\249\179=\253g\211\149\212\t\217_0\179\197k\179")); ("Proof", ("\249\030\200g\248\164o&\tS\132\rTl\1736")); ("Primred", ("\158G\192\182\224\196\144*\174y_E\165\012\137C")); ("Pretyping", ("\151\160\191\149\149Ff\195\171g\189\156\r\166n\189")); ("Pretype_errors", ("\155\229\201\176\163\234\203C\127\227\141\174j\199\200H")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Pattern", ("\195C\140Wb=\022\222\208\227^K\003\020\215X")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("NumTok", ("vd\023^\251\244B\166\145'\156\196-0\027\169")); ("Notationextern", ("\000\022b5`t\134]\192f4\131\187\192\152\160")); ("Notation_term", ("5\002\017\217b\193nc>\239\239\237\244\031\173?")); ("Notation", ("\243\219),\220\160v\230\t$\246\188\252\172\152\147")); ("Nativevalues", ("8:\007\025e\226c,\001\171\146#l\210\171\152")); ("Nativelib", ("V\239\205Y1\147E:,\176\196Hy\1483|")); ("Nativecode", ("\190\185\255\006m\012\210\163\138Rz\247\15283\183")); ("Nametab", ("1\018\163\254\225\2178\025DI\0271Q\198\134\140")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Namegen", ("\187\222\224T\255\020\1808-\212*\164\131\177\157x")); ("Monad", ("\244\171T\157\194p\187\160\149\195{\132\222\020\253\148")); ("Modintern", ("F\222V\246R\143{\n\240\004;;;\011\026\223")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Metasyntax", ("\177D\147\n?i\139\193\238 \018\030)\\\244\\")); ("Ltac_pretype", ("\224\"\167\018i:U\172>\188\128$\r\252\020T")); ("Ltac_plugin__Tactic_debug", ("R\229\014\188\018`\180+\230\159\224\202\223\152\0175")); ("Ltac_plugin__Tacexpr", ("lM\188\244SSB<\139\160F_\240|\128[")); ("Ltac_plugin", ("\1495\201\148\025F\172$\016P\190\1821b4-")); ("Logic_monad", ("\130\157\160Q\163vQ\137\184\2242\209\128\024\220i")); ("Logic", ("\214\234\234\223\014\197\147\165\158f.$\163\164\245Z")); ("Locus", ("_\002\003W\246\181\225\242Uf\139\226\176\174\192I")); ("Locality", ("\204\134r\227\235'\016\197\215r\210\133\242\226U%")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Libobject", ("\132}t\226hl\213L\210\172\167pc\012~\129")); ("Libnames", ("fp\0255\167\162\209\153\137\161\169#\246\193\003\198")); ("Lib", ("8\018\021\210\020\136$\149\164=\007\002\218\026RX")); ("Inv", ("\249\160_\012\n1\202C\204\171\024\017$\025\226\138")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Ind_tables", ("\1586xu\131C\135\176\222\242\178r\031D,\196")); ("Impargs", ("\021\197\1992>\rm\185\141\"iHY\133\138/")); ("Hook", ("\183\194\223\003\155\169',\187\240a;E\b\1396")); ("Hints", ("\007\130]H\\t(\131\000}\205\137H\148\250\166")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Gramlib__Stream", ("\248\\H\205_76\253\136\146\200\031\165\021=t")); ("Gramlib__Gramext", ("B\171oA\172\212\187>\175\233Q\145\"\176TM")); ("Gramlib", ("\154\143\210e\021i\246\176\224\194\220\217\007\145\139A")); ("Goptions", ("i>Rt=\183g\153\190\144\235u\248\247*e")); ("Goal_select", ("\235$\175\023t\178\194.Ivlz\005\211\173\n")); ("Globnames", ("W\004\172T\214\181H\220\232\160LSW\006\130\226")); ("Glob_term", ("\165=a\227\160\153.\021_$\232\209T\236\153O")); ("GlobEnv", ("(\152\019ok\006R\183\193\145\137\133<\171\005\231")); ("Genredexpr", ("rz\204\143\007`VgI\195P\168sO\198\012")); ("Genlambda", ("\170}\024\241\141\222\136S\169\219\2212i\134KI")); ("Geninterp", ("2S\151\191\189\159\004\188;\224d\199|U\004\028")); ("Genintern", ("\152Ac\019=n\235\197\141\224T\162\192\148eg")); ("Genarg", ("\1434\015\001\152\196\005s\156\136\195\185\247\b3\t")); ("Future", ("\158b\028\190\203\016U\128\195O\140\249\240\129\252s")); ("Ftactic", ("K\172\205\128\241\162\160\201\202\1561o\180L\206:")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Extend", ("\179&!W\163V\006\245\018\168\021\001\224s\168\234")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evd", ("\211\205p\193\216\129r\006\239oN\142ar\196\175")); ("Evarutil", ("\005\175\132e\164O\223svi \252\232\138\022\137")); ("Evarsolve", ("\000&\228\016}j\199\t\229\173\127\024\219\199\184\178")); ("Evardefine", ("\178\167R\199\158\242\001Y\215<\151\020\206\153\227\019")); ("Evar_kinds", ("\023L\186\132\218}\254\221\185\198\220\200h\003{\021")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Equality", ("M\157\199R]=\020;\029s@\210\1789y\163")); ("Environ", ("\171b\1579\229<\003Z\147IL\225X\254\182\204")); ("Entries", ("\172\201\198\221Ap\027_{\174\141C\021\";p")); ("EConstr", ("\201aW\156\157;N\004\201V\208\006L\166\211)")); ("Dyn", ("\131z`\205v\2306\007x\027&K.?;\169")); ("Deprecation", ("\226:\146\245\190;\1929\254@\247a\218\244\134\189")); ("Decls", ("\140C{$\142?\215\153\180\186h;\153\139\187\129")); ("Declaremods", ("\019d|\168<\144\239o\017\222\248K^\157\198\179")); ("Declare", ("\ndh\139\180\185\245\190\133\240\127A\190b\197\023")); ("Declarations", ("\239\137n\019\030w$\182\166z^{\b\206\163\175")); ("DAst", ("\224/\200)\007\184ni\134\b\139\204\241\005w\212")); ("Coqlib", ("'\226\164\143\129\221\158\224\247\247\160\190~\171\191\198")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Conversion", ("\158\150&\195M\tv\127|\029\158RRK\211A")); ("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constrintern", ("\221\031i\248\218\212\161/UQA\147\1348GM")); ("Constrexpr", ("p'r\245\184chL\183\249\"\213]\1741\237")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("ComTactic", ("\152\229\255\156\2543\015\018\211s\158_]Z\189\017")); ("Coercionops", ("\238\240\220\191\201\bMazv\159\227\236?\147>")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CWarnings", ("\132\220\150\227\215\239t\217\132\220'JX\188\246c")); ("CUnix", ("\140Zl\153\167\011J\015\005|th\247OTu")); ("CString", ("\243~4C\023~\169\148x\206\165\207\195\177Q\184")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CEphemeron", ("\204I\179-\206(x4\173\229\250\001PkH\151")); ("CDebug", ("^4\210p7\239!3\138\138\213?\239`\250\157")); ("CClosure", ("\167\b\022\241V-\r\253\b\002\000j]\223%\142")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("Attributes", ("\2145\146P\224\163B1\135\232\204SD\129^\141")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])

val default_ist : unit -> Geninterp.interp_sign

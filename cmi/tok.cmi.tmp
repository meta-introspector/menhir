type 'c p =
    PKEYWORD : string -> string p
  | PPATTERNIDENT : string option -> string p
  | PIDENT : string option -> string p
  | PFIELD : string option -> string p
  | PNUMBER : NumTok.Unsigned.t option -> NumTok.Unsigned.t p
  | PSTRING : string option -> string p
  | PLEFTQMARK : unit p
  | PBULLET : string option -> string p
  | PQUOTATION : string -> string p
  | PEOI : unit p
val pattern_strings : 'c p -> string * string option
type t =
    KEYWORD of string
  | PATTERNIDENT of string
  | IDENT of string
  | FIELD of string
  | NUMBER of NumTok.Unsigned.t
  | STRING of string
  | LEFTQMARK
  | BULLET of string
  | QUOTATION of string * string
  | EOI
val equal_p : 'a p -> 'b p -> ('a, 'b) Util.eq option
val equal : t -> t -> bool
val extract_string : bool -> t -> string
val token_text : 'c p -> string
val trim_quotation : string -> char option * string
("DEBUG:rule", [Tag1 (("p", 366), ([((("c")), 100000000, 0, -85)], 1, Tag1 ([(("PKEYWORD", 270), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -53)]), ((Tag3 ((("p", 366)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -52)], (0)), 100000000, 0, -51)), (("parsing/tok.mli", 14, 743, 745), ("parsing/tok.mli", 14, 743, 776), 0), 0, Tag1 ("Tok", 1)); (("PPATTERNIDENT", 271), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -57)], (0)), 100000000, 0, -56)]), ((Tag3 ((("p", 366)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -55)], (0)), 100000000, 0, -54)), (("parsing/tok.mli", 15, 777, 779), ("parsing/tok.mli", 15, 777, 822), 0), 0, Tag1 ("Tok", 2)); (("PIDENT", 272), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -61)], (0)), 100000000, 0, -60)]), ((Tag3 ((("p", 366)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -59)], (0)), 100000000, 0, -58)), (("parsing/tok.mli", 16, 823, 825), ("parsing/tok.mli", 16, 823, 861), 0), 0, Tag1 ("Tok", 3)); (("PFIELD", 273), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -65)], (0)), 100000000, 0, -64)]), ((Tag3 ((("p", 366)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -63)], (0)), 100000000, 0, -62)), (("parsing/tok.mli", 17, 862, 864), ("parsing/tok.mli", 17, 862, 900), 0), 0, Tag1 ("Tok", 4)); (("PNUMBER", 274), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("NumTok")), "Unsigned"), "t"), 0, (0)), 100000000, 0, -69)], (0)), 100000000, 0, -68)]), ((Tag3 ((("p", 366)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("NumTok")), "Unsigned"), "t"), 0, (0)), 100000000, 0, -67)], (0)), 100000000, 0, -66)), (("parsing/tok.mli", 18, 901, 903), ("parsing/tok.mli", 18, 901, 962), 0), 0, Tag1 ("Tok", 5)); (("PSTRING", 291), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -73)], (0)), 100000000, 0, -72)]), ((Tag3 ((("p", 366)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -71)], (0)), 100000000, 0, -70)), (("parsing/tok.mli", 19, 963, 965), ("parsing/tok.mli", 19, 963, 1002), 0), 0, Tag1 ("Tok", 6)); (("PLEFTQMARK", 292), (0), ((Tag3 ((("p", 366)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -75)], (0)), 100000000, 0, -74)), (("parsing/tok.mli", 20, 1003, 1005), ("parsing/tok.mli", 20, 1003, 1026), 0), 0, Tag1 ("Tok", 7)); (("PBULLET", 293), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -79)], (0)), 100000000, 0, -78)]), ((Tag3 ((("p", 366)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -77)], (0)), 100000000, 0, -76)), (("parsing/tok.mli", 21, 1027, 1029), ("parsing/tok.mli", 21, 1027, 1066), 0), 0, Tag1 ("Tok", 8)); (("PQUOTATION", 294), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -82)]), ((Tag3 ((("p", 366)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -81)], (0)), 100000000, 0, -80)), (("parsing/tok.mli", 22, 1067, 1069), ("parsing/tok.mli", 22, 1067, 1102), 0), 0, Tag1 ("Tok", 9)); (("PEOI", 295), (0), ((Tag3 ((("p", 366)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -84)], (0)), 100000000, 0, -83)), (("parsing/tok.mli", 23, 1103, 1105), ("parsing/tok.mli", 23, 1103, 1120), 0), 0, Tag1 ("Tok", 10))], 0), 1, 0, [63], [0], 0, 0, (("parsing/tok.mli", 13, 731, 731), ("parsing/tok.mli", 23, 1103, 1120), 0), 0, 0, 0, Tag1 ("Tok", 0)), 1, 0); (("pattern_strings", 367), ((Tag1 (0, (Tag3 ((("p", 366)), [((("c")), 100000000, 0, -50)], (0)), 100000000, 0, -49), (Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -46); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -48)], (0)), 100000000, 0, -47)]), 100000000, 0, -45), 0), 100000000, 0, -44), 0, (("parsing/tok.mli", 25, 1122, 1122), ("parsing/tok.mli", 25, 1122, 1174), 0), 0, Tag1 ("Tok", 11)), 0); Tag1 (("t", 368), (0, 0, Tag1 ([(("KEYWORD", 298), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -35)]), 0, (("parsing/tok.mli", 28, 1185, 1187), ("parsing/tok.mli", 28, 1185, 1206), 0), 0, Tag1 ("Tok", 13)); (("PATTERNIDENT", 299), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -36)]), 0, (("parsing/tok.mli", 29, 1207, 1209), ("parsing/tok.mli", 29, 1207, 1233), 0), 0, Tag1 ("Tok", 14)); (("IDENT", 300), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -37)]), 0, (("parsing/tok.mli", 30, 1234, 1236), ("parsing/tok.mli", 30, 1234, 1253), 0), 0, Tag1 ("Tok", 15)); (("FIELD", 301), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -38)]), 0, (("parsing/tok.mli", 31, 1254, 1256), ("parsing/tok.mli", 31, 1254, 1273), 0), 0, Tag1 ("Tok", 16)); (("NUMBER", 302), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("NumTok")), "Unsigned"), "t"), 0, (0)), 100000000, 0, -39)]), 0, (("parsing/tok.mli", 32, 1274, 1276), ("parsing/tok.mli", 32, 1274, 1305), 0), 0, Tag1 ("Tok", 17)); (("STRING", 303), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -40)]), 0, (("parsing/tok.mli", 33, 1306, 1308), ("parsing/tok.mli", 33, 1306, 1326), 0), 0, Tag1 ("Tok", 18)); (("LEFTQMARK", 304), (0), 0, (("parsing/tok.mli", 34, 1327, 1329), ("parsing/tok.mli", 34, 1327, 1340), 0), 0, Tag1 ("Tok", 19)); (("BULLET", 305), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -41)]), 0, (("parsing/tok.mli", 35, 1341, 1343), ("parsing/tok.mli", 35, 1341, 1361), 0), 0, Tag1 ("Tok", 20)); (("QUOTATION", 306), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -42); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -43)]), 0, (("parsing/tok.mli", 36, 1362, 1364), ("parsing/tok.mli", 36, 1362, 1394), 0), 0, Tag1 ("Tok", 21)); (("EOI", 307), (0), 0, (("parsing/tok.mli", 37, 1395, 1397), ("parsing/tok.mli", 37, 1395, 1402), 0), 0, Tag1 ("Tok", 22))], 0), 1, 0, 0, 0, 0, 0, (("parsing/tok.mli", 27, 1176, 1176), ("parsing/tok.mli", 37, 1395, 1402), 0), 0, 0, 0, Tag1 ("Tok", 12)), 1, 0); (("equal_p", 369), ((Tag1 (0, (Tag3 ((("p", 366)), [((("a")), 100000000, 0, -31)], (0)), 100000000, 0, -34), (Tag1 (0, (Tag3 ((("p", 366)), [((("b")), 100000000, 0, -32)], (0)), 100000000, 0, -33), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Util")), "eq"), [((("a")), 100000000, 0, -31); ((("b")), 100000000, 0, -32)], (0)), 100000000, 0, -30)], (0)), 100000000, 0, -29), 0), 100000000, 0, -28), 0), 100000000, 0, -27), 0, (("parsing/tok.mli", 39, 1404, 1404), ("parsing/tok.mli", 39, 1404, 1457), 0), 0, Tag1 ("Tok", 23)), 0); (("equal", 370), ((Tag1 (0, (Tag3 ((("t", 368)), 0, (0)), 100000000, 0, -26), (Tag1 (0, (Tag3 ((("t", 368)), 0, (0)), 100000000, 0, -25), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -24), 0), 100000000, 0, -23), 0), 100000000, 0, -22), 0, (("parsing/tok.mli", 41, 1459, 1459), ("parsing/tok.mli", 41, 1459, 1485), 0), 0, Tag1 ("Tok", 24)), 0); (("extract_string", 371), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -21), (Tag1 (0, (Tag3 ((("t", 368)), 0, (0)), 100000000, 0, -20), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("parsing/tok.mli", 43, 1516, 1516), ("parsing/tok.mli", 43, 1516, 1556), 0), 0, Tag1 ("Tok", 25)), 0); (("token_text", 372), ((Tag1 (0, (Tag3 ((("p", 366)), [((("c")), 100000000, 0, -16)], (0)), 100000000, 0, -15), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -14), 0), 100000000, 0, -13), 0, (("parsing/tok.mli", 47, 1614, 1614), ("parsing/tok.mli", 47, 1614, 1645), 0), 0, Tag1 ("Tok", 26)), 0); (("trim_quotation", 373), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12), (Tag2 ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -10)], (0)), 100000000, 0, -9); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -11)]), 100000000, 0, -8), 0), 100000000, 0, -7), 0, (("parsing/tok.mli", 52, 1842, 1842), ("parsing/tok.mli", 52, 1842, 1893), 0), 0, Tag1 ("Tok", 27)), 0); (("match_pattern", 374), ((Tag1 (0, (Tag3 ((("p", 366)), [((("c")), 100000000, 0, -4)], (0)), 100000000, 0, -6), (Tag1 (0, (Tag3 ((("t", 368)), 0, (0)), 100000000, 0, -5), ((("c")), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("parsing/tok.mli", 58, 2007, 2007), ("parsing/tok.mli", 58, 2007, 2042), 0), 0, Tag1 ("Tok", 28)), 0)], "Tok", [("Tok", ("\162\196\180\135\219\014\184\165;\207\025\215\176g\188\225")); ("Z", ("\253\196\2168\027\199O\134\220\218\031'\1484\233o")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Random", ("\020\005Xq\171\026\218\152X\135\254\023\133zK\200")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("NumTok", ("vd\023^\251\244B\166\145'\156\196-0\027\169")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Gramlib__Stream", ("\248\\H\205_76\253\136\146\200\031\165\021=t")); ("Gramlib", ("\154\143\210e\021i\246\176\224\194\220\217\007\145\139A")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150"))], [(0)])
val match_pattern : 'c p -> t -> 'c

type profile_info = {
  number_of_successes : int;
  number_of_failures : int;
  success_pivots : int;
  failure_pivots : int;
  average_pivots : int;
  maximum_pivots : int;
}
val get_profile_info : unit -> profile_info
val optimise :
  Micromega_plugin.Vect.t ->
  Micromega_plugin.Polynomial.cstr list ->
  (Micromega_plugin.NumCompat.Q.t option *
   Micromega_plugin.NumCompat.Q.t option)
  option
val find_point :
  Micromega_plugin.Polynomial.cstr list -> Micromega_plugin.Vect.t option
val find_unsat_certificate :
  Micromega_plugin.Polynomial.cstr list -> Micromega_plugin.Vect.t option
val integer_solver :
  (Micromega_plugin.Polynomial.cstr *
   Micromega_plugin.Polynomial.ProofFormat.prf_rule)
  list ->("DEBUG:rule", [Tag1 (("profile_info", 438), (0, 0, [[(("number_of_successes", 308), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -33), (("plugins/micromega/simplex.mli", 17, 746, 750), ("plugins/micromega/simplex.mli", 18, 776, 779), 0), 0, Tag1 ("Micromega_plugin__Simplex", 1)); (("number_of_failures", 309), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -34), (("plugins/micromega/simplex.mli", 18, 776, 780), ("plugins/micromega/simplex.mli", 19, 805, 808), 0), 0, Tag1 ("Micromega_plugin__Simplex", 2)); (("success_pivots", 310), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -35), (("plugins/micromega/simplex.mli", 19, 805, 809), ("plugins/micromega/simplex.mli", 20, 830, 833), 0), 0, Tag1 ("Micromega_plugin__Simplex", 3)); (("failure_pivots", 311), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -36), (("plugins/micromega/simplex.mli", 20, 830, 834), ("plugins/micromega/simplex.mli", 21, 855, 858), 0), 0, Tag1 ("Micromega_plugin__Simplex", 4)); (("average_pivots", 312), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -37), (("plugins/micromega/simplex.mli", 21, 855, 859), ("plugins/micromega/simplex.mli", 22, 880, 883), 0), 0, Tag1 ("Micromega_plugin__Simplex", 5)); (("maximum_pivots", 313), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -38), (("plugins/micromega/simplex.mli", 22, 880, 884), ("plugins/micromega/simplex.mli", 22, 880, 904), 0), 0, Tag1 ("Micromega_plugin__Simplex", 6))]], 1, 0, 0, 0, 0, 0, (("plugins/micromega/simplex.mli", 16, 726, 726), ("plugins/micromega/simplex.mli", 22, 880, 906), 0), 0, 0, 0, Tag1 ("Micromega_plugin__Simplex", 0)), 1, 0); (("get_profile_info", 439), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -32), (Tag3 ((("profile_info", 438)), 0, (0)), 100000000, 0, -31), 0), 100000000, 0, -30), 0, (("plugins/micromega/simplex.mli", 24, 908, 908), ("plugins/micromega/simplex.mli", 24, 908, 951), 0), 0, Tag1 ("Micromega_plugin__Simplex", 7)), 0); (("optimise", 440), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "Vect"), "t"), 0, (0)), 100000000, 0, -29), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "Polynomial"), "cstr"), 0, (0)), 100000000, 0, -28)], (0)), 100000000, 0, -27), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -24)], (0)), 100000000, 0, -23); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -26)], (0)), 100000000, 0, -25)]), 100000000, 0, -22)], (0)), 100000000, 0, -21), 0), 100000000, 0, -20), 0), 100000000, 0, -19), 0, (("plugins/micromega/simplex.mli", 28, 979, 979), ("plugins/micromega/simplex.mli", 28, 979, 1049), 0), 0, Tag1 ("Micromega_plugin__Simplex", 8)), 0); (("find_point", 441), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "Polynomial"), "cstr"), 0, (0)), 100000000, 0, -18)], (0)), 100000000, 0, -17), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "Vect"), "t"), 0, (0)), 100000000, 0, -16)], (0)), 100000000, 0, -15), 0), 100000000, 0, -14), 0, (("plugins/micromega/simplex.mli", 29, 1050, 1050), ("plugins/micromega/simplex.mli", 29, 1050, 1093), 0), 0, Tag1 ("Micromega_plugin__Simplex", 9)), 0); (("find_unsat_certificate", 442), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "Polynomial"), "cstr"), 0, (0)), 100000000, 0, -13)], (0)), 100000000, 0, -12), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "Vect"), "t"), 0, (0)), 100000000, 0, -11)], (0)), 100000000, 0, -10), 0), 100000000, 0, -9), 0, (("plugins/micromega/simplex.mli", 30, 1094, 1094), ("plugins/micromega/simplex.mli", 30, 1094, 1149), 0), 0, Tag1 ("Micromega_plugin__Simplex", 10)), 0); (("integer_solver", 443), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "Polynomial"), "cstr"), 0, (0)), 100000000, 0, -7); (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "Polynomial"), "ProofFormat"), "prf_rule"), 0, (0)), 100000000, 0, -8)]), 100000000, 0, -6)], (0)), 100000000, 0, -5), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "Polynomial"), "ProofFormat"), "proof"), 0, (0)), 100000000, 0, -4)], (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("plugins/micromega/simplex.mli", 32, 1151, 1151), ("plugins/micromega/simplex.mli", 33, 1172, 1236), 0), 0, Tag1 ("Micromega_plugin__Simplex", 11)), 0)], "Micromega_plugin__Simplex", [("Micromega_plugin__Simplex", ("+\217\230\154`C3\198\166Tm\214\246M\030\137")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Micromega_plugin__Vect", ("cim\150\030\144w\144\158\152|\201Px\127|")); ("Micromega_plugin__Polynomial", ("Z\170\141)o\131\204\227r\227\158<\205\174U\169")); ("Micromega_plugin__NumCompat", ("\167R)~D\225*6\249\146\173\\\233F6m")); ("Micromega_plugin__Mutils", ("\248\218\232\173\201#\005!\224\006\137\197\223\134\015\237")); ("Micromega_plugin__Micromega", ("\144\132\00120\253\252S\131\160\152\240\207\228\014\024")); ("Micromega_plugin", ("-|C6\194\020\193\204\234h\242\238\191\214'\193")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t"))], [(0)])
 Micromega_plugin.Polynomial.ProofFormat.proof option

type !'a t
val sexp_of_t : ('a -> Sexplib0.Sexp.t) -> 'a t -> Sexplib0.Sexp.t
module Key = Base__Hash_set_intf.Key
module type Creators = Base__Hash_set_intf.Creators
module type Creators_generic = Base__Hash_set_intf.Creators_generic
module type For_deriving = Base__Hash_set_intf.For_deriving
type nonrec ('key, 'z) create_options =
    ('key, 'z) Base__Hash_set_intf.create_options
val create :
  ?growth_allowed:bool -> ?size:int -> 'a Base__Hash_set_intf.Key.t -> 'a t
val of_list :
  ?growth_allowed:bool ->
  ?size:int -> 'a Base__Hash_set_intf.Key.t -> 'a list -> 'a t
module type Accessors = Base__Hash_set_intf.Accessors
type 'a elt = 'a
val length : 'a t -> int
val is_empty : 'a t -> bool
val iter : 'a t -> f:('a elt -> unit) -> unit
val fold : 'a t -> init:'acc -> f:('acc -> 'a elt -> 'acc) -> 'acc
val fold_result :
  'a t ->
  init:'acc ->
  f:('acc -> 'a elt -> ('acc, 'e) Base__.Result.t) ->
  ('acc, 'e) Base__.Result.t
val fold_until :
  'a t ->
  init:'acc ->
  f:('acc -> 'a elt -> ('acc, 'final) Base__Container_intf.Continue_or_stop.t) ->
  finish:('acc -> 'final) -> 'final
val exists : 'a t -> f:('a elt -> bool) -> bool
val for_all : 'a t -> f:('a elt -> bool) -> bool
val count : 'a t -> f:('a elt -> bool) -> int
val sum :
  (module Base__Container_intf.Summable with type t = 'sum) ->
  'a t -> f:('a elt -> 'sum) -> 'sum
val find : 'a t -> f:('a elt -> bool) -> 'a elt option
val find_map : 'a t -> f:('a elt -> 'b option) -> 'b option
val to_list : 'a t -> 'a elt list
val to_array : 'a t -> 'a elt array
val min_elt : 'a t -> compare:('a elt -> 'a elt -> int) -> 'a elt option
val max_elt : 'a t -> compare:('a elt -> 'a elt -> int) -> 'a elt option
val mem : 'a t -> 'a -> bool
val copy : 'a t -> 'a t
val add : 'a t -> 'a -> unit
val strict_add : 'a t -> 'a -> unit Base__.Or_error.t
val strict_add_exn : 'a t -> 'a -> unit
val remove : 'a t -> 'a -> unit
val strict_remove : 'a t -> 'a -> unit Base__.Or_error.t
val strict_remove_exn : 'a t -> 'a -> unit
val clear : 'a t -> unit
val equal : 'a t -> 'a t -> bool
val filter : 'a t -> f:('a -> bool) -> 'a t
val filter_inplace : 'a t -> f:('a -> bool) -> unit
val inter : 'key t -> 'key t -> 'key t
val union : 'a t -> 'a t -> 'a t
val diff : 'a t -> 'a t -> 'a t
val of_hashtbl_keys : ('a, 'b) Base__.Hashtbl.t -> 'a t
val to_hashtbl :
  'key t -> f:('key -> 'data) -> ('key, 'data) Base__.Hashtbl.t
val hashable_s : 'key t -> 'key Key.t
type nonrec ('key, 'z) create_options_without_first_class_module =
    ('key, 'z) Base__Hash_set_intf.create_options_without_first_class_module
module Poly :
  sig
    type nonrec 'a t = 'a t
    val t_of_sexp : (Sexplib0__.Sexp.t -> 'a) -> Sexplib0__.Sexp.t -> 'a t
    val sexp_of_t : ('a -> Sexplib0__.Sexp.t) -> 'a t -> Sexplib0__.Sexp.t
    val t_sexp_grammar :
      'a Sexplib0.Sexp_grammar.t -> 'a t Sexplib0.Sexp_grammar.t
    type 'a elt = 'a
    val create : ('a, unit -> 'a t) create_options_without_first_class_module
    val of_list :
      ('a, 'a elt list -> 'a t) create_options_without_first_class_module
    val length : 'a t -> int
    val is_empty : 'a t -> bool
    val iter : 'a t -> f:('a elt -> unit) -> unit
    val fold : 'a t -> init:'acc -> f:('acc -> 'a elt -> 'acc) -> 'acc
    val fold_result :
      'a t ->
      init:'acc ->
      f:('acc -> 'a elt -> ('acc, 'e) Base__.Result.t) ->
      ('acc, 'e) Base__.Result.t
    val fold_until :
      'a t ->
      init:'acc ->
      f:('acc ->
         'a elt -> ('acc, 'final) Base__Container_intf.Continue_or_stop.t) ->
      finish:('acc -> 'final) -> 'final
    val exists : 'a t -> f:('a elt -> bool) -> bool
    val for_all : 'a t -> f:('a elt -> bool) -> bool
    val count : 'a t -> f:('a elt -> bool) -> int
    val sum :
      (module Base__Container_intf.Summable with type t = 'sum) ->
      'a t -> f:('a elt -> 'sum) -> 'sum
    val find : 'a t -> f:('a elt -> bool) -> 'a elt option
    val find_map : 'a t -> f:('a elt -> 'b option) -> 'b option
    val to_list : 'a t -> 'a elt list
    val to_array : 'a t -> 'a elt array
    val min_elt : 'a t -> compare:('a elt -> 'a elt -> int) -> 'a elt option
    val max_elt : 'a t -> compare:('a elt -> 'a elt -> int) -> 'a elt option
    val mem : 'a t -> 'a -> bool
    val copy : 'a t -> 'a t
    val add : 'a t -> 'a -> unit
    val strict_add : 'a t -> 'a -> unit Base__.Or_error.t
    val strict_add_exn : 'a t -> 'a -> unit
    val remove : 'a t -> 'a -> unit
    val strict_remove : 'a t -> 'a -> unit Base__.Or_error.t
    val strict_remove_exn : 'a t -> 'a -> unit
    val clear : 'a t -> unit
    val equal : 'a t -> 'a t -> bool
    val filter : 'a t -> f:('a -> bool) -> 'a t
    val filter_inplace : 'a t -> f:('a -> bool) -> unit
    val inter : 'key t -> 'key t -> 'key t
    val union : 'a t -> 'a t -> 'a t
    val diff : 'a t -> 'a t -> 'a t
    val of_hashtbl_keys : ('a, 'b) Base__.Hashtbl.t -> 'a t
    val to_hashtbl :
      'key t -> f:('key -> 'data) -> ('key, 'data) Base__.Hashtbl.t
  end
module Creators :
  functor (Elt : sig type 'a t val hashable : 'a t Base__.Hashable.t end) ->
    sig
      val t_of_sexp :
        (Base__.Sexp.t -> 'a Elt.t) -> Base__.Sexp.t -> 'a Elt.t t
      val create :
        ('a, unit -> 'a Elt.t t) create_options_without_first_class_module
      val of_list :
        ('a, 'a Elt.t list -> 'a Elt.t t)
        create_options_without_first_class_module
    end
module type M_of_sexp = Base__Hash_set_intf.M_of_sexp
module type Sexp_of_m = Base__Hash_set_intf.Sexp_of_m
module type Equal_m = Base__Hash_set_intf.Equal_m
module M : functor (Elt : Base__.T.T) -> sig type nonrec t = Elt.t t end
val sexp_of_m__t :
  (module Sexp_of_m with type t = 'elt) -> 'elt t -> Base__.Sexp.t
val m__t_of_sexp :
  (module M_of_sexp with type t = 'elt) -> Base__.Sexp.t -> 'elt t
val m__t_sexp_grammar :
  (module Base__Hash_set_intf.M_sexp_grammar with type t = 'elt) ->
  'elt t Sexplib0.Sexp_grammar.t
val equal_m__t : (module Equal_m) -> 'elt t -> 'elt t -> bool
("DEBUG:rule", [Tag1 (("t", 1993), ([((("a")), 100000000, 0, -295)], 1, 0, 1, 0, [15], [2], 0, 0, (("src/hash_set_intf.ml", 141, 3631, 3633), ("src/hash_set_intf.ml", 141, 3631, 3671), 0), [(("deriving_inline", (("src/hash_set_intf.ml", 141, 3631, 3647), ("src/hash_set_intf.ml", 141, 3631, 3662), 0)), ([([(((("sexp_of"), (("src/hash_set_intf.ml", 141, 3631, 3663), ("src/hash_set_intf.ml", 141, 3631, 3670), 0))), (("src/hash_set_intf.ml", 141, 3631, 3663), ("src/hash_set_intf.ml", 141, 3631, 3670), 0), 0, 0)], (("src/hash_set_intf.ml", 141, 3631, 3663), ("src/hash_set_intf.ml", 141, 3631, 3670), 0))]), (("src/hash_set_intf.ml", 141, 3631, 3644), ("src/hash_set_intf.ml", 141, 3631, 3671), 0))], 0, 0, Tag1 ("Base__Hash_set_intf", 60)), 1, 0); (("sexp_of_t", 1994), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -292), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -294), 0), 100000000, 0, -293), (Tag1 (0, (Tag3 ((("t", 1993)), [((("a")), 100000000, 0, -292)], (0)), 100000000, 0, -291), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -290), 0), 100000000, 0, -289), 0), 100000000, 0, -288), 0, (("src/hash_set_intf.ml", 143, 3673, 3675), ("src/hash_set_intf.ml", 143, 3673, 3741), 0), 0, Tag1 ("Base__Hash_set_intf", 61)), 0); Tag3 (("Key", 1995), 1, (Tag3 (Tag1 ((Tag2 ("Base__Hash_set_intf")), "Key")), 0, (("src/hash_set_intf.ml", 152, 4062, 4064), ("src/hash_set_intf.ml", 152, 4062, 4080), 0), Tag1 ("Base__Hash_set_intf", 62)), 0, 0); Tag4 (("Creators", 1996), (((Tag1 ((Tag2 ("Base__Hash_set_intf")), "Creators"))), 0, (("src/hash_set_intf.ml", 154, 4082, 4084), ("src/hash_set_intf.ml", 154, 4082, 4115), 0), Tag1 ("Base__Hash_set_intf", 63)), 0); Tag4 (("Creators_generic", 1997), (((Tag1 ((Tag2 ("Base__Hash_set_intf")), "Creators_generic"))), 0, (("src/hash_set_intf.ml", 155, 4116, 4118), ("src/hash_set_intf.ml", 155, 4116, 4165), 0), Tag1 ("Base__Hash_set_intf", 64)), 0); Tag4 (("For_deriving", 1998), (((Tag1 ((Tag2 ("Base__Hash_set_intf")), "For_deriving"))), 0, (("src/hash_set_intf.ml", 156, 4166, 4168), ("src/hash_set_intf.ml", 156, 4166, 4207), 0), Tag1 ("Base__Hash_set_intf", 65)), 0); Tag1 (("create_options", 1999), ([((("key")), 100000000, 0, -286); ((("z")), 100000000, 0, -287)], 2, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Base__Hash_set_intf")), "create_options"), [((("key")), 100000000, 0, -286); ((("z")), 100000000, 0, -287)], (0)), 100000000, 0, -285)), [63; 25], [0; 0], 0, 0, (("src/hash_set_intf.ml", 158, 4209, 4211), ("src/hash_set_intf.ml", 158, 4209, 4276), 0), 0, 0, 0, Tag1 ("Base__Hash_set_intf", 66)), 0, 0); (("create", 2000), ((Tag1 (Tag1 ("growth_allowed"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -284)], (0)), 100000000, 0, -283), (Tag1 (Tag1 ("size"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -282)], (0)), 100000000, 0, -281), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Hash_set_intf")), "Key"), "t"), [((("a")), 100000000, 0, -279)], (0)), 100000000, 0, -280), (Tag3 ((("t", 1993)), [((("a")), 100000000, 0, -279)], (0)), 100000000, 0, -278), 0), 100000000, 0, -277), 0), 100000000, 0, -276), 0), 100000000, 0, -275), 0, (("src/hash_set_intf.ml", 160, 4278, 4288), ("src/hash_set_intf.ml", 160, 4278, 4319), 0), 0, Tag1 ("Base__Hash_set_intf", 24)), 0); (("of_list", 2001), ((Tag1 (Tag1 ("growth_allowed"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -274)], (0)), 100000000, 0, -273), (Tag1 (Tag1 ("size"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -272)], (0)), 100000000, 0, -271), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Hash_set_intf")), "Key"), "t"), [((("a")), 100000000, 0, -268)], (0)), 100000000, 0, -270), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -268)], (0)), 100000000, 0, -269), (Tag3 ((("t", 1993)), [((("a")), 100000000, 0, -268)], (0)), 100000000, 0, -267), 0), 100000000, 0, -266), 0), 100000000, 0, -265), 0), 100000000, 0, -264), 0), 100000000, 0, -263), 0, (("src/hash_set_intf.ml", 160, 4278, 4288), ("src/hash_set_intf.ml", 160, 4278, 4319), 0), 0, Tag1 ("Base__Hash_set_intf", 25)), 0); Tag4 (("Accessors", 2002), (((Tag1 ((Tag2 ("Base__Hash_set_intf")), "Accessors"))), 0, (("src/hash_set_intf.ml", 162, 4334, 4336), ("src/hash_set_intf.ml", 162, 4334, 4369), 0), Tag1 ("Base__Hash_set_intf", 68)), 0); Tag1 (("elt", 2003), ([((("a")), 100000000, 0, -262)], 1, 0, 1, (((("a")), 100000000, 0, -262)), [25], [1], 0, 0, (("src/hash_set_intf.ml", 164, 4371, 4419), ("src/hash_set_intf.ml", 164, 4371, 4435), 0), 0, 0, 0, Tag1 ("Base__Hash_set_intf", 70)), 1, 0); (("length", 2004), ((Tag1 (0, (Tag3 ((("t", 1993)), [((0), 100000000, 0, -261)], (0)), 100000000, 0, -260), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -259), 0), 100000000, 0, -258), 0, (("src/hash_set_intf.ml", 164, 4371, 4381), ("src/hash_set_intf.ml", 164, 4371, 4413), 0), 0, Tag1 ("Base__Container_intf", 93)), 0); (("is_empty", 2005), ((Tag1 (0, (Tag3 ((("t", 1993)), [((0), 100000000, 0, -257)], (0)), 100000000, 0, -256), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -255), 0), 100000000, 0, -254), 0, (("src/hash_set_intf.ml", 164, 4371, 4381), ("src/hash_set_intf.ml", 164, 4371, 4413), 0), 0, Tag1 ("Base__Container_intf", 94)), 0); (("iter", 2006), ((Tag1 (0, (Tag3 ((("t", 1993)), [((("a")), 100000000, 0, -252)], (0)), 100000000, 0, -253), (Tag1 (("f"), (Tag1 (0, (Tag3 ((("elt", 2003)), [((("a")), 100000000, 0, -252)], (0)), 100000000, 0, -251), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -250), 0), 100000000, 0, -249), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -248), 0), 100000000, 0, -247), 0), 100000000, 0, -246), 0, (("src/hash_set_intf.ml", 164, 4371, 4381), ("src/hash_set_intf.ml", 164, 4371, 4413), 0), 0, Tag1 ("Base__Container_intf", 96)), 0); (("fold", 2007), ((Tag1 (0, (Tag3 ((("t", 1993)), [((("a")), 100000000, 0, -244)], (0)), 100000000, 0, -245), (Tag1 (("init"), ((("acc")), 100000000, 0, -240), (Tag1 (("f"), (Tag1 (0, ((("acc")), 100000000, 0, -240), (Tag1 (0, (Tag3 ((("elt", 2003)), [((("a")), 100000000, 0, -244)], (0)), 100000000, 0, -243), ((("acc")), 100000000, 0, -240), 0), 100000000, 0, -242), 0), 100000000, 0, -241), ((("acc")), 100000000, 0, -240), 0), 100000000, 0, -239), 0), 100000000, 0, -238), 0), 100000000, 0, -237), 0, (("src/hash_set_intf.ml", 164, 4371, 4381), ("src/hash_set_intf.ml", 164, 4371, 4413), 0), 0, Tag1 ("Base__Container_intf", 97)), 0); (("fold_result", 2008), ((Tag1 (0, (Tag3 ((("t", 1993)), [((("a")), 100000000, 0, -235)], (0)), 100000000, 0, -236), (Tag1 (("init"), ((("acc")), 100000000, 0, -229), (Tag1 (("f"), (Tag1 (0, ((("acc")), 100000000, 0, -229), (Tag1 (0, (Tag3 ((("elt", 2003)), [((("a")), 100000000, 0, -235)], (0)), 100000000, 0, -234), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Result"), "t"), [((("acc")), 100000000, 0, -229); ((("e")), 100000000, 0, -230)], (0)), 100000000, 0, -233), 0), 100000000, 0, -232), 0), 100000000, 0, -231), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Result"), "t"), [((("acc")), 100000000, 0, -229); ((("e")), 100000000, 0, -230)], (0)), 100000000, 0, -228), 0), 100000000, 0, -227), 0), 100000000, 0, -226), 0), 100000000, 0, -225), 0, (("src/hash_set_intf.ml", 164, 4371, 4381), ("src/hash_set_intf.ml", 164, 4371, 4413), 0), 0, Tag1 ("Base__Container_intf", 98)), 0); (("fold_until", 2009), ((Tag1 (0, (Tag3 ((("t", 1993)), [((("a")), 100000000, 0, -223)], (0)), 100000000, 0, -224), (Tag1 (("init"), ((("acc")), 100000000, 0, -218), (Tag1 (("f"), (Tag1 (0, ((("acc")), 100000000, 0, -218), (Tag1 (0, (Tag3 ((("elt", 2003)), [((("a")), 100000000, 0, -223)], (0)), 100000000, 0, -222), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Container_intf")), "Continue_or_stop"), "t"), [((("acc")), 100000000, 0, -218); ((("final")), 100000000, 0, -216)], (0)), 100000000, 0, -221), 0), 100000000, 0, -220), 0), 100000000, 0, -219), (Tag1 (("finish"), (Tag1 (0, ((("acc")), 100000000, 0, -218), ((("final")), 100000000, 0, -216), 0), 100000000, 0, -217), ((("final")), 100000000, 0, -216), 0), 100000000, 0, -215), 0), 100000000, 0, -214), 0), 100000000, 0, -213), 0), 100000000, 0, -212), 0, (("src/hash_set_intf.ml", 164, 4371, 4381), ("src/hash_set_intf.ml", 164, 4371, 4413), 0), 0, Tag1 ("Base__Container_intf", 99)), 0); (("exists", 2010), ((Tag1 (0, (Tag3 ((("t", 1993)), [((("a")), 100000000, 0, -210)], (0)), 100000000, 0, -211), (Tag1 (("f"), (Tag1 (0, (Tag3 ((("elt", 2003)), [((("a")), 100000000, 0, -210)], (0)), 100000000, 0, -209), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -208), 0), 100000000, 0, -207), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -206), 0), 100000000, 0, -205), 0), 100000000, 0, -204), 0, (("src/hash_set_intf.ml", 164, 4371, 4381), ("src/hash_set_intf.ml", 164, 4371, 4413), 0), 0, Tag1 ("Base__Container_intf", 100)), 0); (("for_all", 2011), ((Tag1 (0, (Tag3 ((("t", 1993)), [((("a")), 100000000, 0, -202)], (0)), 100000000, 0, -203), (Tag1 (("f"), (Tag1 (0, (Tag3 ((("elt", 2003)), [((("a")), 100000000, 0, -202)], (0)), 100000000, 0, -201), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -200), 0), 100000000, 0, -199), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -198), 0), 100000000, 0, -197), 0), 100000000, 0, -196), 0, (("src/hash_set_intf.ml", 164, 4371, 4381), ("src/hash_set_intf.ml", 164, 4371, 4413), 0), 0, Tag1 ("Base__Container_intf", 101)), 0); (("count", 2012), ((Tag1 (0, (Tag3 ((("t", 1993)), [((("a")), 100000000, 0, -194)], (0)), 100000000, 0, -195), (Tag1 (("f"), (Tag1 (0, (Tag3 ((("elt", 2003)), [((("a")), 100000000, 0, -194)], (0)), 100000000, 0, -193), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -192), 0), 100000000, 0, -191), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -190), 0), 100000000, 0, -189), 0), 100000000, 0, -188), 0, (("src/hash_set_intf.ml", 164, 4371, 4381), ("src/hash_set_intf.ml", 164, 4371, 4413), 0), 0, Tag1 ("Base__Container_intf", 102)), 0); (("sum", 2013), ((Tag1 (0, (Tag11 (Tag1 ((Tag2 ("Base__Container_intf")), "Summable"), [(("t"), ((("sum")), 100000000, 0, -182))]), 100000000, 0, -187), (Tag1 (0, (Tag3 ((("t", 1993)), [((("a")), 100000000, 0, -185)], (0)), 100000000, 0, -186), (Tag1 (("f"), (Tag1 (0, (Tag3 ((("elt", 2003)), [((("a")), 100000000, 0, -185)], (0)), 100000000, 0, -184), ((("sum")), 100000000, 0, -182), 0), 100000000, 0, -183), ((("sum")), 100000000, 0, -182), 0), 100000000, 0, -181), 0), 100000000, 0, -180), 0), 100000000, 0, -179), 0, (("src/hash_set_intf.ml", 164, 4371, 4381), ("src/hash_set_intf.ml", 164, 4371, 4413), 0), 0, Tag1 ("Base__Container_intf", 104)), 0); (("find", 2014), ((Tag1 (0, (Tag3 ((("t", 1993)), [((("a")), 100000000, 0, -174)], (0)), 100000000, 0, -178), (Tag1 (("f"), (Tag1 (0, (Tag3 ((("elt", 2003)), [((("a")), 100000000, 0, -174)], (0)), 100000000, 0, -177), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -176), 0), 100000000, 0, -175), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2003)), [((("a")), 100000000, 0, -174)], (0)), 100000000, 0, -173)], (0)), 100000000, 0, -172), 0), 100000000, 0, -171), 0), 100000000, 0, -170), 0, (("src/hash_set_intf.ml", 164, 4371, 4381), ("src/hash_set_intf.ml", 164, 4371, 4413), 0), 0, Tag1 ("Base__Container_intf", 105)), 0); (("find_map", 2015), ((Tag1 (0, (Tag3 ((("t", 1993)), [((("a")), 100000000, 0, -168)], (0)), 100000000, 0, -169), (Tag1 (("f"), (Tag1 (0, (Tag3 ((("elt", 2003)), [((("a")), 100000000, 0, -168)], (0)), 100000000, 0, -167), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -164)], (0)), 100000000, 0, -166), 0), 100000000, 0, -165), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -164)], (0)), 100000000, 0, -163), 0), 100000000, 0, -162), 0), 100000000, 0, -161), 0, (("src/hash_set_intf.ml", 164, 4371, 4381), ("src/hash_set_intf.ml", 164, 4371, 4413), 0), 0, Tag1 ("Base__Container_intf", 106)), 0); (("to_list", 2016), ((Tag1 (0, (Tag3 ((("t", 1993)), [((("a")), 100000000, 0, -159)], (0)), 100000000, 0, -160), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 2003)), [((("a")), 100000000, 0, -159)], (0)), 100000000, 0, -158)], (0)), 100000000, 0, -157), 0), 100000000, 0, -156), 0, (("src/hash_set_intf.ml", 164, 4371, 4381), ("src/hash_set_intf.ml", 164, 4371, 4413), 0), 0, Tag1 ("Base__Container_intf", 107)), 0); (("to_array", 2017), ((Tag1 (0, (Tag3 ((("t", 1993)), [((("a")), 100000000, 0, -154)], (0)), 100000000, 0, -155), (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("elt", 2003)), [((("a")), 100000000, 0, -154)], (0)), 100000000, 0, -153)], (0)), 100000000, 0, -152), 0), 100000000, 0, -151), 0, (("src/hash_set_intf.ml", 164, 4371, 4381), ("src/hash_set_intf.ml", 164, 4371, 4413), 0), 0, Tag1 ("Base__Container_intf", 108)), 0); (("min_elt", 2018), ((Tag1 (0, (Tag3 ((("t", 1993)), [((("a")), 100000000, 0, -144)], (0)), 100000000, 0, -150), (Tag1 (("compare"), (Tag1 (0, (Tag3 ((("elt", 2003)), [((("a")), 100000000, 0, -144)], (0)), 100000000, 0, -149), (Tag1 (0, (Tag3 ((("elt", 2003)), [((("a")), 100000000, 0, -144)], (0)), 100000000, 0, -148), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -147), 0), 100000000, 0, -146), 0), 100000000, 0, -145), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2003)), [((("a")), 100000000, 0, -144)], (0)), 100000000, 0, -143)], (0)), 100000000, 0, -142), 0), 100000000, 0, -141), 0), 100000000, 0, -140), 0, (("src/hash_set_intf.ml", 164, 4371, 4381), ("src/hash_set_intf.ml", 164, 4371, 4413), 0), 0, Tag1 ("Base__Container_intf", 109)), 0); (("max_elt", 2019), ((Tag1 (0, (Tag3 ((("t", 1993)), [((("a")), 100000000, 0, -133)], (0)), 100000000, 0, -139), (Tag1 (("compare"), (Tag1 (0, (Tag3 ((("elt", 2003)), [((("a")), 100000000, 0, -133)], (0)), 100000000, 0, -138), (Tag1 (0, (Tag3 ((("elt", 2003)), [((("a")), 100000000, 0, -133)], (0)), 100000000, 0, -137), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -136), 0), 100000000, 0, -135), 0), 100000000, 0, -134), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2003)), [((("a")), 100000000, 0, -133)], (0)), 100000000, 0, -132)], (0)), 100000000, 0, -131), 0), 100000000, 0, -130), 0), 100000000, 0, -129), 0, (("src/hash_set_intf.ml", 164, 4371, 4381), ("src/hash_set_intf.ml", 164, 4371, 4413), 0), 0, Tag1 ("Base__Container_intf", 110)), 0); (("mem", 2020), ((Tag1 (0, (Tag3 ((("t", 1993)), [((("a")), 100000000, 0, -127)], (0)), 100000000, 0, -128), (Tag1 (0, ((("a")), 100000000, 0, -127), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -126), 0), 100000000, 0, -125), 0), 100000000, 0, -124), 0, (("src/hash_set_intf.ml", 164, 4371, 4381), ("src/hash_set_intf.ml", 164, 4371, 4413), 0), 0, Tag1 ("Base__Hash_set_intf", 3)), 0); (("copy", 2021), ((Tag1 (0, (Tag3 ((("t", 1993)), [((("a")), 100000000, 0, -122)], (0)), 100000000, 0, -123), (Tag3 ((("t", 1993)), [((("a")), 100000000, 0, -122)], (0)), 100000000, 0, -121), 0), 100000000, 0, -120), 0, (("src/hash_set_intf.ml", 164, 4371, 4381), ("src/hash_set_intf.ml", 164, 4371, 4413), 0), 0, Tag1 ("Base__Hash_set_intf", 4)), 0); (("add", 2022), ((Tag1 (0, (Tag3 ((("t", 1993)), [((("a")), 100000000, 0, -118)], (0)), 100000000, 0, -119), (Tag1 (0, ((("a")), 100000000, 0, -118), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -117), 0), 100000000, 0, -116), 0), 100000000, 0, -115), 0, (("src/hash_set_intf.ml", 164, 4371, 4381), ("src/hash_set_intf.ml", 164, 4371, 4413), 0), 0, Tag1 ("Base__Hash_set_intf", 5)), 0); (("strict_add", 2023), ((Tag1 (0, (Tag3 ((("t", 1993)), [((("a")), 100000000, 0, -113)], (0)), 100000000, 0, -114), (Tag1 (0, ((("a")), 100000000, 0, -113), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -112)], (0)), 100000000, 0, -111), 0), 100000000, 0, -110), 0), 100000000, 0, -109), 0, (("src/hash_set_intf.ml", 164, 4371, 4381), ("src/hash_set_intf.ml", 164, 4371, 4413), 0), 0, Tag1 ("Base__Hash_set_intf", 6)), 0); (("strict_add_exn", 2024), ((Tag1 (0, (Tag3 ((("t", 1993)), [((("a")), 100000000, 0, -107)], (0)), 100000000, 0, -108), (Tag1 (0, ((("a")), 100000000, 0, -107), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -106), 0), 100000000, 0, -105), 0), 100000000, 0, -104), 0, (("src/hash_set_intf.ml", 164, 4371, 4381), ("src/hash_set_intf.ml", 164, 4371, 4413), 0), 0, Tag1 ("Base__Hash_set_intf", 7)), 0); (("remove", 2025), ((Tag1 (0, (Tag3 ((("t", 1993)), [((("a")), 100000000, 0, -102)], (0)), 100000000, 0, -103), (Tag1 (0, ((("a")), 100000000, 0, -102), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -101), 0), 100000000, 0, -100), 0), 100000000, 0, -99), 0, (("src/hash_set_intf.ml", 164, 4371, 4381), ("src/hash_set_intf.ml", 164, 4371, 4413), 0), 0, Tag1 ("Base__Hash_set_intf", 8)), 0); (("strict_remove", 2026), ((Tag1 (0, (Tag3 ((("t", 1993)), [((("a")), 100000000, 0, -97)], (0)), 100000000, 0, -98), (Tag1 (0, ((("a")), 100000000, 0, -97), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -96)], (0)), 100000000, 0, -95), 0), 100000000, 0, -94), 0), 100000000, 0, -93), 0, (("src/hash_set_intf.ml", 164, 4371, 4381), ("src/hash_set_intf.ml", 164, 4371, 4413), 0), 0, Tag1 ("Base__Hash_set_intf", 9)), 0); (("strict_remove_exn", 2027), ((Tag1 (0, (Tag3 ((("t", 1993)), [((("a")), 100000000, 0, -91)], (0)), 100000000, 0, -92), (Tag1 (0, ((("a")), 100000000, 0, -91), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -90), 0), 100000000, 0, -89), 0), 100000000, 0, -88), 0, (("src/hash_set_intf.ml", 164, 4371, 4381), ("src/hash_set_intf.ml", 164, 4371, 4413), 0), 0, Tag1 ("Base__Hash_set_intf", 10)), 0); (("clear", 2028), ((Tag1 (0, (Tag3 ((("t", 1993)), [((("a")), 100000000, 0, -87)], (0)), 100000000, 0, -86), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -85), 0), 100000000, 0, -84), 0, (("src/hash_set_intf.ml", 164, 4371, 4381), ("src/hash_set_intf.ml", 164, 4371, 4413), 0), 0, Tag1 ("Base__Hash_set_intf", 11)), 0); (("equal", 2029), ((Tag1 (0, (Tag3 ((("t", 1993)), [((("a")), 100000000, 0, -82)], (0)), 100000000, 0, -83), (Tag1 (0, (Tag3 ((("t", 1993)), [((("a")), 100000000, 0, -82)], (0)), 100000000, 0, -81), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -80), 0), 100000000, 0, -79), 0), 100000000, 0, -78), 0, (("src/hash_set_intf.ml", 164, 4371, 4381), ("src/hash_set_intf.ml", 164, 4371, 4413), 0), 0, Tag1 ("Base__Hash_set_intf", 12)), 0); (("filter", 2030), ((Tag1 (0, (Tag3 ((("t", 1993)), [((("a")), 100000000, 0, -74)], (0)), 100000000, 0, -77), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -74), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -76), 0), 100000000, 0, -75), (Tag3 ((("t", 1993)), [((("a")), 100000000, 0, -74)], (0)), 100000000, 0, -73), 0), 100000000, 0, -72), 0), 100000000, 0, -71), 0, (("src/hash_set_intf.ml", 164, 4371, 4381), ("src/hash_set_intf.ml", 164, 4371, 4413), 0), 0, Tag1 ("Base__Hash_set_intf", 13)), 0); (("filter_inplace", 2031), ((Tag1 (0, (Tag3 ((("t", 1993)), [((("a")), 100000000, 0, -69)], (0)), 100000000, 0, -70), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -69), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -68), 0), 100000000, 0, -67), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -66), 0), 100000000, 0, -65), 0), 100000000, 0, -64), 0, (("src/hash_set_intf.ml", 164, 4371, 4381), ("src/hash_set_intf.ml", 164, 4371, 4413), 0), 0, Tag1 ("Base__Hash_set_intf", 14)), 0); (("inter", 2032), ((Tag1 (0, (Tag3 ((("t", 1993)), [((("key")), 100000000, 0, -61)], (0)), 100000000, 0, -63), (Tag1 (0, (Tag3 ((("t", 1993)), [((("key")), 100000000, 0, -61)], (0)), 100000000, 0, -62), (Tag3 ((("t", 1993)), [((("key")), 100000000, 0, -61)], (0)), 100000000, 0, -60), 0), 100000000, 0, -59), 0), 100000000, 0, -58), 0, (("src/hash_set_intf.ml", 164, 4371, 4381), ("src/hash_set_intf.ml", 164, 4371, 4413), 0), 0, Tag1 ("Base__Hash_set_intf", 15)), 0); (("union", 2033), ((Tag1 (0, (Tag3 ((("t", 1993)), [((("a")), 100000000, 0, -55)], (0)), 100000000, 0, -57), (Tag1 (0, (Tag3 ((("t", 1993)), [((("a")), 100000000, 0, -55)], (0)), 100000000, 0, -56), (Tag3 ((("t", 1993)), [((("a")), 100000000, 0, -55)], (0)), 100000000, 0, -54), 0), 100000000, 0, -53), 0), 100000000, 0, -52), 0, (("src/hash_set_intf.ml", 164, 4371, 4381), ("src/hash_set_intf.ml", 164, 4371, 4413), 0), 0, Tag1 ("Base__Hash_set_intf", 16)), 0); (("diff", 2034), ((Tag1 (0, (Tag3 ((("t", 1993)), [((("a")), 100000000, 0, -49)], (0)), 100000000, 0, -51), (Tag1 (0, (Tag3 ((("t", 1993)), [((("a")), 100000000, 0, -49)], (0)), 100000000, 0, -50), (Tag3 ((("t", 1993)), [((("a")), 100000000, 0, -49)], (0)), 100000000, 0, -48), 0), 100000000, 0, -47), 0), 100000000, 0, -46), 0, (("src/hash_set_intf.ml", 164, 4371, 4381), ("src/hash_set_intf.ml", 164, 4371, 4413), 0), 0, Tag1 ("Base__Hash_set_intf", 17)), 0); (("of_hashtbl_keys", 2035), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Hashtbl"), "t"), [((("a")), 100000000, 0, -43); ((0), 100000000, 0, -45)], (0)), 100000000, 0, -44), (Tag3 ((("t", 1993)), [((("a")), 100000000, 0, -43)], (0)), 100000000, 0, -42), 0), 100000000, 0, -41), 0, (("src/hash_set_intf.ml", 164, 4371, 4381), ("src/hash_set_intf.ml", 164, 4371, 4413), 0), 0, Tag1 ("Base__Hash_set_intf", 18)), 0); (("to_hashtbl", 2036), ((Tag1 (0, (Tag3 ((("t", 1993)), [((("key")), 100000000, 0, -37)], (0)), 100000000, 0, -40), (Tag1 (("f"), (Tag1 (0, ((("key")), 100000000, 0, -37), ((("data")), 100000000, 0, -38), 0), 100000000, 0, -39), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Hashtbl"), "t"), [((("key")), 100000000, 0, -37); ((("data")), 100000000, 0, -38)], (0)), 100000000, 0, -36), 0), 100000000, 0, -35), 0), 100000000, 0, -34), 0, (("src/hash_set_intf.ml", 164, 4371, 4381), ("src/hash_set_intf.ml", 164, 4371, 4413), 0), 0, Tag1 ("Base__Hash_set_intf", 19)), 0); (("hashable_s", 2037), ((Tag1 (0, (Tag3 ((("t", 1993)), [((("key")), 100000000, 0, -32)], (0)), 100000000, 0, -33), (Tag3 (Tag1 ((("Key", 1995)), "t"), [((("key")), 100000000, 0, -32)], (0)), 100000000, 0, -31), 0), 100000000, 0, -30), 0, (("src/hash_set_intf.ml", 166, 4450, 4452), ("src/hash_set_intf.ml", 166, 4450, 4489), 0), 0, Tag1 ("Base__Hash_set_intf", 71)), 0); Tag1 (("create_options_without_first_class_module", 2038), ([((("key")), 100000000, 0, -28); ((("z")), 100000000, 0, -29)], 2, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Base__Hash_set_intf")), "create_options_without_first_class_module"), [((("key")), 100000000, 0, -28); ((("z")), 100000000, 0, -29)], (0)), 100000000, 0, -27)), [0; 25], [0; 0], 0, 0, (("src/hash_set_intf.ml", 168, 4491, 4493), ("src/hash_set_intf.ml", 169, 4560, 4616), 0), 0, 0, 0, Tag1 ("Base__Hash_set_intf", 72)), 0, 0); Tag3 (("Poly", 2039), 0, (Tag1 ([Tag1 (("t", 2052), ([((("a")), 100000000, 0, -556)], 1, 0, 1, ((Tag3 ((("t", 1993)), [((("a")), 100000000, 0, -556)], (0)), 100000000, 0, -555)), [15], [2], 0, 0, (("src/hash_set_intf.ml", 173, 4691, 4695), ("src/hash_set_intf.ml", 173, 4691, 4757), 0), [(("deriving_inline", (("src/hash_set_intf.ml", 173, 4691, 4722), ("src/hash_set_intf.ml", 173, 4691, 4737), 0)), ([([(Tag8 ([(((("sexp"), (("src/hash_set_intf.ml", 173, 4691, 4738), ("src/hash_set_intf.ml", 173, 4691, 4742), 0))), (("src/hash_set_intf.ml", 173, 4691, 4738), ("src/hash_set_intf.ml", 173, 4691, 4742), 0), 0, 0); (((("sexp_grammar"), (("src/hash_set_intf.ml", 173, 4691, 4744), ("src/hash_set_intf.ml", 173, 4691, 4756), 0))), (("src/hash_set_intf.ml", 173, 4691, 4744), ("src/hash_set_intf.ml", 173, 4691, 4756), 0), 0, 0)]), (("src/hash_set_intf.ml", 173, 4691, 4738), ("src/hash_set_intf.ml", 173, 4691, 4756), 0), 0, 0)], (("src/hash_set_intf.ml", 173, 4691, 4738), ("src/hash_set_intf.ml", 173, 4691, 4756), 0))]), (("src/hash_set_intf.ml", 173, 4691, 4719), ("src/hash_set_intf.ml", 173, 4691, 4757), 0))], 0, 0, Tag1 ("Base__Hash_set_intf", 73)), 0, 0); (("t_of_sexp", 2053), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -554), ((("a")), 100000000, 0, -551), 0), 100000000, 0, -553), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -552), (Tag3 ((("t", 2052)), [((("a")), 100000000, 0, -551)], (0)), 100000000, 0, -550), 0), 100000000, 0, -549), 0), 100000000, 0, -548), 0, (("src/hash_set_intf.ml", 175, 4759, 4771), ("src/hash_set_intf.ml", 175, 4759, 4814), 0), 0, Tag1 ("Sexplib0__Sexpable", 5)), 0); (("sexp_of_t", 2054), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -545), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -547), 0), 100000000, 0, -546), (Tag1 (0, (Tag3 ((("t", 2052)), [((("a")), 100000000, 0, -545)], (0)), 100000000, 0, -544), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -543), 0), 100000000, 0, -542), 0), 100000000, 0, -541), 0, (("src/hash_set_intf.ml", 175, 4759, 4771), ("src/hash_set_intf.ml", 175, 4759, 4814), 0), 0, Tag1 ("Sexplib0__Sexpable", 6)), 0); (("t_sexp_grammar", 2055), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [((("a")), 100000000, 0, -539)], (0)), 100000000, 0, -540), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("t", 2052)), [((("a")), 100000000, 0, -539)], (0)), 100000000, 0, -538)], (0)), 100000000, 0, -537), 0), 100000000, 0, -536), 0, (("src/hash_set_intf.ml", 177, 4816, 4820), ("src/hash_set_intf.ml", 177, 4816, 4899), 0), 0, Tag1 ("Base__Hash_set_intf", 75)), 0); Tag1 (("elt", 2056), ([((("a")), 100000000, 0, -535)], 1, 0, 1, (((("a")), 100000000, 0, -535)), [25], [1], 0, 0, (("src/hash_set_intf.ml", 182, 4927, 4933), ("src/hash_set_intf.ml", 186, 5052, 5112), 0), 0, 0, 0, Tag1 ("Base__Hash_set_intf", 77)), 1, 0); (("create", 2057), ((Tag3 ((("create_options_without_first_class_module", 2038)), [((("a")), 100000000, 0, -531); (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -534), (Tag3 ((("t", 2052)), [((("a")), 100000000, 0, -531)], (0)), 100000000, 0, -533), 0), 100000000, 0, -532)], (0)), 100000000, 0, -530), 0, (("src/hash_set_intf.ml", 182, 4927, 4933), ("src/hash_set_intf.ml", 186, 5052, 5112), 0), 0, Tag1 ("Base__Hash_set_intf", 30)), 0); (("of_list", 2058), ((Tag3 ((("create_options_without_first_class_module", 2038)), [((("a")), 100000000, 0, -525); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 2056)), [((("a")), 100000000, 0, -525)], (0)), 100000000, 0, -529)], (0)), 100000000, 0, -528), (Tag3 ((("t", 2052)), [((("a")), 100000000, 0, -525)], (0)), 100000000, 0, -527), 0), 100000000, 0, -526)], (0)), 100000000, 0, -524), 0, (("src/hash_set_intf.ml", 182, 4927, 4933), ("src/hash_set_intf.ml", 186, 5052, 5112), 0), 0, Tag1 ("Base__Hash_set_intf", 31)), 0); (("length", 2059), ((Tag1 (0, (Tag3 ((("t", 2052)), [((0), 100000000, 0, -523)], (0)), 100000000, 0, -522), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -521), 0), 100000000, 0, -520), 0, (("src/hash_set_intf.ml", 188, 5114, 5126), ("src/hash_set_intf.ml", 188, 5114, 5185), 0), 0, Tag1 ("Base__Container_intf", 93)), 0); (("is_empty", 2060), ((Tag1 (0, (Tag3 ((("t", 2052)), [((0), 100000000, 0, -519)], (0)), 100000000, 0, -518), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -517), 0), 100000000, 0, -516), 0, (("src/hash_set_intf.ml", 188, 5114, 5126), ("src/hash_set_intf.ml", 188, 5114, 5185), 0), 0, Tag1 ("Base__Container_intf", 94)), 0); (("iter", 2061), ((Tag1 (0, (Tag3 ((("t", 2052)), [((("a")), 100000000, 0, -514)], (0)), 100000000, 0, -515), (Tag1 (("f"), (Tag1 (0, (Tag3 ((("elt", 2056)), [((("a")), 100000000, 0, -514)], (0)), 100000000, 0, -513), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -512), 0), 100000000, 0, -511), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -510), 0), 100000000, 0, -509), 0), 100000000, 0, -508), 0, (("src/hash_set_intf.ml", 188, 5114, 5126), ("src/hash_set_intf.ml", 188, 5114, 5185), 0), 0, Tag1 ("Base__Container_intf", 96)), 0); (("fold", 2062), ((Tag1 (0, (Tag3 ((("t", 2052)), [((("a")), 100000000, 0, -506)], (0)), 100000000, 0, -507), (Tag1 (("init"), ((("acc")), 100000000, 0, -502), (Tag1 (("f"), (Tag1 (0, ((("acc")), 100000000, 0, -502), (Tag1 (0, (Tag3 ((("elt", 2056)), [((("a")), 100000000, 0, -506)], (0)), 100000000, 0, -505), ((("acc")), 100000000, 0, -502), 0), 100000000, 0, -504), 0), 100000000, 0, -503), ((("acc")), 100000000, 0, -502), 0), 100000000, 0, -501), 0), 100000000, 0, -500), 0), 100000000, 0, -499), 0, (("src/hash_set_intf.ml", 188, 5114, 5126), ("src/hash_set_intf.ml", 188, 5114, 5185), 0), 0, Tag1 ("Base__Container_intf", 97)), 0); (("fold_result", 2063), ((Tag1 (0, (Tag3 ((("t", 2052)), [((("a")), 100000000, 0, -497)], (0)), 100000000, 0, -498), (Tag1 (("init"), ((("acc")), 100000000, 0, -491), (Tag1 (("f"), (Tag1 (0, ((("acc")), 100000000, 0, -491), (Tag1 (0, (Tag3 ((("elt", 2056)), [((("a")), 100000000, 0, -497)], (0)), 100000000, 0, -496), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Result"), "t"), [((("acc")), 100000000, 0, -491); ((("e")), 100000000, 0, -492)], (0)), 100000000, 0, -495), 0), 100000000, 0, -494), 0), 100000000, 0, -493), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Result"), "t"), [((("acc")), 100000000, 0, -491); ((("e")), 100000000, 0, -492)], (0)), 100000000, 0, -490), 0), 100000000, 0, -489), 0), 100000000, 0, -488), 0), 100000000, 0, -487), 0, (("src/hash_set_intf.ml", 188, 5114, 5126), ("src/hash_set_intf.ml", 188, 5114, 5185), 0), 0, Tag1 ("Base__Container_intf", 98)), 0); (("fold_until", 2064), ((Tag1 (0, (Tag3 ((("t", 2052)), [((("a")), 100000000, 0, -485)], (0)), 100000000, 0, -486), (Tag1 (("init"), ((("acc")), 100000000, 0, -480), (Tag1 (("f"), (Tag1 (0, ((("acc")), 100000000, 0, -480), (Tag1 (0, (Tag3 ((("elt", 2056)), [((("a")), 100000000, 0, -485)], (0)), 100000000, 0, -484), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Container_intf")), "Continue_or_stop"), "t"), [((("acc")), 100000000, 0, -480); ((("final")), 100000000, 0, -478)], (0)), 100000000, 0, -483), 0), 100000000, 0, -482), 0), 100000000, 0, -481), (Tag1 (("finish"), (Tag1 (0, ((("acc")), 100000000, 0, -480), ((("final")), 100000000, 0, -478), 0), 100000000, 0, -479), ((("final")), 100000000, 0, -478), 0), 100000000, 0, -477), 0), 100000000, 0, -476), 0), 100000000, 0, -475), 0), 100000000, 0, -474), 0, (("src/hash_set_intf.ml", 188, 5114, 5126), ("src/hash_set_intf.ml", 188, 5114, 5185), 0), 0, Tag1 ("Base__Container_intf", 99)), 0); (("exists", 2065), ((Tag1 (0, (Tag3 ((("t", 2052)), [((("a")), 100000000, 0, -472)], (0)), 100000000, 0, -473), (Tag1 (("f"), (Tag1 (0, (Tag3 ((("elt", 2056)), [((("a")), 100000000, 0, -472)], (0)), 100000000, 0, -471), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -470), 0), 100000000, 0, -469), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -468), 0), 100000000, 0, -467), 0), 100000000, 0, -466), 0, (("src/hash_set_intf.ml", 188, 5114, 5126), ("src/hash_set_intf.ml", 188, 5114, 5185), 0), 0, Tag1 ("Base__Container_intf", 100)), 0); (("for_all", 2066), ((Tag1 (0, (Tag3 ((("t", 2052)), [((("a")), 100000000, 0, -464)], (0)), 100000000, 0, -465), (Tag1 (("f"), (Tag1 (0, (Tag3 ((("elt", 2056)), [((("a")), 100000000, 0, -464)], (0)), 100000000, 0, -463), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -462), 0), 100000000, 0, -461), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -460), 0), 100000000, 0, -459), 0), 100000000, 0, -458), 0, (("src/hash_set_intf.ml", 188, 5114, 5126), ("src/hash_set_intf.ml", 188, 5114, 5185), 0), 0, Tag1 ("Base__Container_intf", 101)), 0); (("count", 2067), ((Tag1 (0, (Tag3 ((("t", 2052)), [((("a")), 100000000, 0, -456)], (0)), 100000000, 0, -457), (Tag1 (("f"), (Tag1 (0, (Tag3 ((("elt", 2056)), [((("a")), 100000000, 0, -456)], (0)), 100000000, 0, -455), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -454), 0), 100000000, 0, -453), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -452), 0), 100000000, 0, -451), 0), 100000000, 0, -450), 0, (("src/hash_set_intf.ml", 188, 5114, 5126), ("src/hash_set_intf.ml", 188, 5114, 5185), 0), 0, Tag1 ("Base__Container_intf", 102)), 0); (("sum", 2068), ((Tag1 (0, (Tag11 (Tag1 ((Tag2 ("Base__Container_intf")), "Summable"), [(("t"), ((("sum")), 100000000, 0, -444))]), 100000000, 0, -449), (Tag1 (0, (Tag3 ((("t", 2052)), [((("a")), 100000000, 0, -447)], (0)), 100000000, 0, -448), (Tag1 (("f"), (Tag1 (0, (Tag3 ((("elt", 2056)), [((("a")), 100000000, 0, -447)], (0)), 100000000, 0, -446), ((("sum")), 100000000, 0, -444), 0), 100000000, 0, -445), ((("sum")), 100000000, 0, -444), 0), 100000000, 0, -443), 0), 100000000, 0, -442), 0), 100000000, 0, -441), 0, (("src/hash_set_intf.ml", 188, 5114, 5126), ("src/hash_set_intf.ml", 188, 5114, 5185), 0), 0, Tag1 ("Base__Container_intf", 104)), 0); (("find", 2069), ((Tag1 (0, (Tag3 ((("t", 2052)), [((("a")), 100000000, 0, -436)], (0)), 100000000, 0, -440), (Tag1 (("f"), (Tag1 (0, (Tag3 ((("elt", 2056)), [((("a")), 100000000, 0, -436)], (0)), 100000000, 0, -439), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -438), 0), 100000000, 0, -437), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2056)), [((("a")), 100000000, 0, -436)], (0)), 100000000, 0, -435)], (0)), 100000000, 0, -434), 0), 100000000, 0, -433), 0), 100000000, 0, -432), 0, (("src/hash_set_intf.ml", 188, 5114, 5126), ("src/hash_set_intf.ml", 188, 5114, 5185), 0), 0, Tag1 ("Base__Container_intf", 105)), 0); (("find_map", 2070), ((Tag1 (0, (Tag3 ((("t", 2052)), [((("a")), 100000000, 0, -430)], (0)), 100000000, 0, -431), (Tag1 (("f"), (Tag1 (0, (Tag3 ((("elt", 2056)), [((("a")), 100000000, 0, -430)], (0)), 100000000, 0, -429), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -426)], (0)), 100000000, 0, -428), 0), 100000000, 0, -427), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -426)], (0)), 100000000, 0, -425), 0), 100000000, 0, -424), 0), 100000000, 0, -423), 0, (("src/hash_set_intf.ml", 188, 5114, 5126), ("src/hash_set_intf.ml", 188, 5114, 5185), 0), 0, Tag1 ("Base__Container_intf", 106)), 0); (("to_list", 2071), ((Tag1 (0, (Tag3 ((("t", 2052)), [((("a")), 100000000, 0, -421)], (0)), 100000000, 0, -422), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 2056)), [((("a")), 100000000, 0, -421)], (0)), 100000000, 0, -420)], (0)), 100000000, 0, -419), 0), 100000000, 0, -418), 0, (("src/hash_set_intf.ml", 188, 5114, 5126), ("src/hash_set_intf.ml", 188, 5114, 5185), 0), 0, Tag1 ("Base__Container_intf", 107)), 0); (("to_array", 2072), ((Tag1 (0, (Tag3 ((("t", 2052)), [((("a")), 100000000, 0, -416)], (0)), 100000000, 0, -417), (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("elt", 2056)), [((("a")), 100000000, 0, -416)], (0)), 100000000, 0, -415)], (0)), 100000000, 0, -414), 0), 100000000, 0, -413), 0, (("src/hash_set_intf.ml", 188, 5114, 5126), ("src/hash_set_intf.ml", 188, 5114, 5185), 0), 0, Tag1 ("Base__Container_intf", 108)), 0); (("min_elt", 2073), ((Tag1 (0, (Tag3 ((("t", 2052)), [((("a")), 100000000, 0, -406)], (0)), 100000000, 0, -412), (Tag1 (("compare"), (Tag1 (0, (Tag3 ((("elt", 2056)), [((("a")), 100000000, 0, -406)], (0)), 100000000, 0, -411), (Tag1 (0, (Tag3 ((("elt", 2056)), [((("a")), 100000000, 0, -406)], (0)), 100000000, 0, -410), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -409), 0), 100000000, 0, -408), 0), 100000000, 0, -407), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2056)), [((("a")), 100000000, 0, -406)], (0)), 100000000, 0, -405)], (0)), 100000000, 0, -404), 0), 100000000, 0, -403), 0), 100000000, 0, -402), 0, (("src/hash_set_intf.ml", 188, 5114, 5126), ("src/hash_set_intf.ml", 188, 5114, 5185), 0), 0, Tag1 ("Base__Container_intf", 109)), 0); (("max_elt", 2074), ((Tag1 (0, (Tag3 ((("t", 2052)), [((("a")), 100000000, 0, -395)], (0)), 100000000, 0, -401), (Tag1 (("compare"), (Tag1 (0, (Tag3 ((("elt", 2056)), [((("a")), 100000000, 0, -395)], (0)), 100000000, 0, -400), (Tag1 (0, (Tag3 ((("elt", 2056)), [((("a")), 100000000, 0, -395)], (0)), 100000000, 0, -399), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -398), 0), 100000000, 0, -397), 0), 100000000, 0, -396), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2056)), [((("a")), 100000000, 0, -395)], (0)), 100000000, 0, -394)], (0)), 100000000, 0, -393), 0), 100000000, 0, -392), 0), 100000000, 0, -391), 0, (("src/hash_set_intf.ml", 188, 5114, 5126), ("src/hash_set_intf.ml", 188, 5114, 5185), 0), 0, Tag1 ("Base__Container_intf", 110)), 0); (("mem", 2075), ((Tag1 (0, (Tag3 ((("t", 2052)), [((("a")), 100000000, 0, -389)], (0)), 100000000, 0, -390), (Tag1 (0, ((("a")), 100000000, 0, -389), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -388), 0), 100000000, 0, -387), 0), 100000000, 0, -386), 0, (("src/hash_set_intf.ml", 188, 5114, 5126), ("src/hash_set_intf.ml", 188, 5114, 5185), 0), 0, Tag1 ("Base__Hash_set_intf", 3)), 0); (("copy", 2076), ((Tag1 (0, (Tag3 ((("t", 2052)), [((("a")), 100000000, 0, -384)], (0)), 100000000, 0, -385), (Tag3 ((("t", 2052)), [((("a")), 100000000, 0, -384)], (0)), 100000000, 0, -383), 0), 100000000, 0, -382), 0, (("src/hash_set_intf.ml", 188, 5114, 5126), ("src/hash_set_intf.ml", 188, 5114, 5185), 0), 0, Tag1 ("Base__Hash_set_intf", 4)), 0); (("add", 2077), ((Tag1 (0, (Tag3 ((("t", 2052)), [((("a")), 100000000, 0, -380)], (0)), 100000000, 0, -381), (Tag1 (0, ((("a")), 100000000, 0, -380), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -379), 0), 100000000, 0, -378), 0), 100000000, 0, -377), 0, (("src/hash_set_intf.ml", 188, 5114, 5126), ("src/hash_set_intf.ml", 188, 5114, 5185), 0), 0, Tag1 ("Base__Hash_set_intf", 5)), 0); (("strict_add", 2078), ((Tag1 (0, (Tag3 ((("t", 2052)), [((("a")), 100000000, 0, -375)], (0)), 100000000, 0, -376), (Tag1 (0, ((("a")), 100000000, 0, -375), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -374)], (0)), 100000000, 0, -373), 0), 100000000, 0, -372), 0), 100000000, 0, -371), 0, (("src/hash_set_intf.ml", 188, 5114, 5126), ("src/hash_set_intf.ml", 188, 5114, 5185), 0), 0, Tag1 ("Base__Hash_set_intf", 6)), 0); (("strict_add_exn", 2079), ((Tag1 (0, (Tag3 ((("t", 2052)), [((("a")), 100000000, 0, -369)], (0)), 100000000, 0, -370), (Tag1 (0, ((("a")), 100000000, 0, -369), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -368), 0), 100000000, 0, -367), 0), 100000000, 0, -366), 0, (("src/hash_set_intf.ml", 188, 5114, 5126), ("src/hash_set_intf.ml", 188, 5114, 5185), 0), 0, Tag1 ("Base__Hash_set_intf", 7)), 0); (("remove", 2080), ((Tag1 (0, (Tag3 ((("t", 2052)), [((("a")), 100000000, 0, -364)], (0)), 100000000, 0, -365), (Tag1 (0, ((("a")), 100000000, 0, -364), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -363), 0), 100000000, 0, -362), 0), 100000000, 0, -361), 0, (("src/hash_set_intf.ml", 188, 5114, 5126), ("src/hash_set_intf.ml", 188, 5114, 5185), 0), 0, Tag1 ("Base__Hash_set_intf", 8)), 0); (("strict_remove", 2081), ((Tag1 (0, (Tag3 ((("t", 2052)), [((("a")), 100000000, 0, -359)], (0)), 100000000, 0, -360), (Tag1 (0, ((("a")), 100000000, 0, -359), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -358)], (0)), 100000000, 0, -357), 0), 100000000, 0, -356), 0), 100000000, 0, -355), 0, (("src/hash_set_intf.ml", 188, 5114, 5126), ("src/hash_set_intf.ml", 188, 5114, 5185), 0), 0, Tag1 ("Base__Hash_set_intf", 9)), 0); (("strict_remove_exn", 2082), ((Tag1 (0, (Tag3 ((("t", 2052)), [((("a")), 100000000, 0, -353)], (0)), 100000000, 0, -354), (Tag1 (0, ((("a")), 100000000, 0, -353), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -352), 0), 100000000, 0, -351), 0), 100000000, 0, -350), 0, (("src/hash_set_intf.ml", 188, 5114, 5126), ("src/hash_set_intf.ml", 188, 5114, 5185), 0), 0, Tag1 ("Base__Hash_set_intf", 10)), 0); (("clear", 2083), ((Tag1 (0, (Tag3 ((("t", 2052)), [((("a")), 100000000, 0, -349)], (0)), 100000000, 0, -348), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -347), 0), 100000000, 0, -346), 0, (("src/hash_set_intf.ml", 188, 5114, 5126), ("src/hash_set_intf.ml", 188, 5114, 5185), 0), 0, Tag1 ("Base__Hash_set_intf", 11)), 0); (("equal", 2084), ((Tag1 (0, (Tag3 ((("t", 2052)), [((("a")), 100000000, 0, -344)], (0)), 100000000, 0, -345), (Tag1 (0, (Tag3 ((("t", 2052)), [((("a")), 100000000, 0, -344)], (0)), 100000000, 0, -343), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -342), 0), 100000000, 0, -341), 0), 100000000, 0, -340), 0, (("src/hash_set_intf.ml", 188, 5114, 5126), ("src/hash_set_intf.ml", 188, 5114, 5185), 0), 0, Tag1 ("Base__Hash_set_intf", 12)), 0); (("filter", 2085), ((Tag1 (0, (Tag3 ((("t", 2052)), [((("a")), 100000000, 0, -336)], (0)), 100000000, 0, -339), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -336), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -338), 0), 100000000, 0, -337), (Tag3 ((("t", 2052)), [((("a")), 100000000, 0, -336)], (0)), 100000000, 0, -335), 0), 100000000, 0, -334), 0), 100000000, 0, -333), 0, (("src/hash_set_intf.ml", 188, 5114, 5126), ("src/hash_set_intf.ml", 188, 5114, 5185), 0), 0, Tag1 ("Base__Hash_set_intf", 13)), 0); (("filter_inplace", 2086), ((Tag1 (0, (Tag3 ((("t", 2052)), [((("a")), 100000000, 0, -331)], (0)), 100000000, 0, -332), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -331), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -330), 0), 100000000, 0, -329), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -328), 0), 100000000, 0, -327), 0), 100000000, 0, -326), 0, (("src/hash_set_intf.ml", 188, 5114, 5126), ("src/hash_set_intf.ml", 188, 5114, 5185), 0), 0, Tag1 ("Base__Hash_set_intf", 14)), 0); (("inter", 2087), ((Tag1 (0, (Tag3 ((("t", 2052)), [((("key")), 100000000, 0, -323)], (0)), 100000000, 0, -325), (Tag1 (0, (Tag3 ((("t", 2052)), [((("key")), 100000000, 0, -323)], (0)), 100000000, 0, -324), (Tag3 ((("t", 2052)), [((("key")), 100000000, 0, -323)], (0)), 100000000, 0, -322), 0), 100000000, 0, -321), 0), 100000000, 0, -320), 0, (("src/hash_set_intf.ml", 188, 5114, 5126), ("src/hash_set_intf.ml", 188, 5114, 5185), 0), 0, Tag1 ("Base__Hash_set_intf", 15)), 0); (("union", 2088), ((Tag1 (0, (Tag3 ((("t", 2052)), [((("a")), 100000000, 0, -317)], (0)), 100000000, 0, -319), (Tag1 (0, (Tag3 ((("t", 2052)), [((("a")), 100000000, 0, -317)], (0)), 100000000, 0, -318), (Tag3 ((("t", 2052)), [((("a")), 100000000, 0, -317)], (0)), 100000000, 0, -316), 0), 100000000, 0, -315), 0), 100000000, 0, -314), 0, (("src/hash_set_intf.ml", 188, 5114, 5126), ("src/hash_set_intf.ml", 188, 5114, 5185), 0), 0, Tag1 ("Base__Hash_set_intf", 16)), 0); (("diff", 2089), ((Tag1 (0, (Tag3 ((("t", 2052)), [((("a")), 100000000, 0, -311)], (0)), 100000000, 0, -313), (Tag1 (0, (Tag3 ((("t", 2052)), [((("a")), 100000000, 0, -311)], (0)), 100000000, 0, -312), (Tag3 ((("t", 2052)), [((("a")), 100000000, 0, -311)], (0)), 100000000, 0, -310), 0), 100000000, 0, -309), 0), 100000000, 0, -308), 0, (("src/hash_set_intf.ml", 188, 5114, 5126), ("src/hash_set_intf.ml", 188, 5114, 5185), 0), 0, Tag1 ("Base__Hash_set_intf", 17)), 0); (("of_hashtbl_keys", 2090), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Hashtbl"), "t"), [((("a")), 100000000, 0, -305); ((0), 100000000, 0, -307)], (0)), 100000000, 0, -306), (Tag3 ((("t", 2052)), [((("a")), 100000000, 0, -305)], (0)), 100000000, 0, -304), 0), 100000000, 0, -303), 0, (("src/hash_set_intf.ml", 188, 5114, 5126), ("src/hash_set_intf.ml", 188, 5114, 5185), 0), 0, Tag1 ("Base__Hash_set_intf", 18)), 0); (("to_hashtbl", 2091), ((Tag1 (0, (Tag3 ((("t", 2052)), [((("key")), 100000000, 0, -299)], (0)), 100000000, 0, -302), (Tag1 (("f"), (Tag1 (0, ((("key")), 100000000, 0, -299), ((("data")), 100000000, 0, -300), 0), 100000000, 0, -301), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Hashtbl"), "t"), [((("key")), 100000000, 0, -299); ((("data")), 100000000, 0, -300)], (0)), 100000000, 0, -298), 0), 100000000, 0, -297), 0), 100000000, 0, -296), 0, (("src/hash_set_intf.ml", 188, 5114, 5126), ("src/hash_set_intf.ml", 188, 5114, 5185), 0), 0, Tag1 ("Base__Hash_set_intf", 19)), 0)]), 0, (("src/hash_set_intf.ml", 172, 4671, 4673), ("src/hash_set_intf.ml", 189, 5186, 5191), 0), Tag1 ("Base__Hash_set_intf", 81)), 0, 0); Tag3 (("Creators", 2040), 0, (Tag2 (((("Elt", 2051)), Tag1 ([Tag1 (("t", 2092), ([((("a")), 100000000, 0, -560)], 1, 0, 1, 0, [7], [2], 0, 0, (("src/hash_set_intf.ml", 192, 5222, 5228), ("src/hash_set_intf.ml", 192, 5222, 5237), 0), 0, 0, 0, Tag1 ("Base__Hash_set_intf", 82)), 1, 0); (("hashable", 2093), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Hashable"), "t"), [(Tag3 ((("t", 2092)), [((("a")), 100000000, 0, -559)], (0)), 100000000, 0, -558)], (0)), 100000000, 0, -557), 0, (("src/hash_set_intf.ml", 194, 5239, 5245), ("src/hash_set_intf.ml", 194, 5239, 5275), 0), 0, Tag1 ("Base__Hash_set_intf", 83)), 0)])), Tag1 ([(("t_of_sexp", 2094), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -582), (Tag3 (Tag1 ((("Elt", 2051)), "t"), [((("a")), 100000000, 0, -578)], (0)), 100000000, 0, -581), 0), 100000000, 0, -580), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -579), (Tag3 ((("t", 1993)), [(Tag3 (Tag1 ((("Elt", 2051)), "t"), [((("a")), 100000000, 0, -578)], (0)), 100000000, 0, -577)], (0)), 100000000, 0, -576), 0), 100000000, 0, -575), 0), 100000000, 0, -574), 0, (("src/hash_set_intf.ml", 196, 5291, 5295), ("src/hash_set_intf.ml", 196, 5291, 5355), 0), 0, Tag1 ("Base__Hash_set_intf", 85)), 0); (("create", 2095), ((Tag3 ((("create_options_without_first_class_module", 2038)), [((("a")), 100000000, 0, -569); (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -573), (Tag3 ((("t", 1993)), [(Tag3 (Tag1 ((("Elt", 2051)), "t"), [((("a")), 100000000, 0, -569)], (0)), 100000000, 0, -572)], (0)), 100000000, 0, -571), 0), 100000000, 0, -570)], (0)), 100000000, 0, -568), 0, (("src/hash_set_intf.ml", 199, 5369, 5375), ("src/hash_set_intf.ml", 203, 5507, 5567), 0), 0, Tag1 ("Base__Hash_set_intf", 30)), 0); (("of_list", 2096), ((Tag3 ((("create_options_without_first_class_module", 2038)), [((("a")), 100000000, 0, -562); (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Elt", 2051)), "t"), [((("a")), 100000000, 0, -562)], (0)), 100000000, 0, -567)], (0)), 100000000, 0, -566), (Tag3 ((("t", 1993)), [(Tag3 (Tag1 ((("Elt", 2051)), "t"), [((("a")), 100000000, 0, -562)], (0)), 100000000, 0, -565)], (0)), 100000000, 0, -564), 0), 100000000, 0, -563)], (0)), 100000000, 0, -561), 0, (("src/hash_set_intf.ml", 199, 5369, 5375), ("src/hash_set_intf.ml", 203, 5507, 5567), 0), 0, Tag1 ("Base__Hash_set_intf", 31)), 0)])), 0, (("src/hash_set_intf.ml", 191, 5193, 5195), ("src/hash_set_intf.ml", 204, 5568, 5573), 0), Tag1 ("Base__Hash_set_intf", 89)), 0, 0); Tag4 (("M_of_sexp", 2041), (((Tag1 ((Tag2 ("Base__Hash_set_intf")), "M_of_sexp"))), 0, (("src/hash_set_intf.ml", 206, 5575, 5585), ("src/hash_set_intf.ml", 206, 5575, 5620), 0), Tag1 ("Base__Hash_set_intf", 46)), 0); Tag4 (("Sexp_of_m", 2042), (((Tag1 ((Tag2 ("Base__Hash_set_intf")), "Sexp_of_m"))), 0, (("src/hash_set_intf.ml", 206, 5575, 5585), ("src/hash_set_intf.ml", 206, 5575, 5620), 0), Tag1 ("Base__Hash_set_intf", 47)), 0); Tag4 (("Equal_m", 2043), (((Tag1 ((Tag2 ("Base__Hash_set_intf")), "Equal_m"))), 0, (("src/hash_set_intf.ml", 206, 5575, 5585), ("src/hash_set_intf.ml", 206, 5575, 5620), 0), Tag1 ("Base__Hash_set_intf", 48)), 0); Tag3 (("M", 2044), 0, (Tag2 (((("Elt", 2050)), (Tag1 (Tag1 ((Tag2 ("Base__")), "T"), "T"))), Tag1 ([Tag1 (("t", 2097), (0, 0, 0, 1, ((Tag3 ((("t", 1993)), [(Tag3 (Tag1 ((("Elt", 2050)), "t"), 0, (0)), 100000000, 0, -584)], (0)), 100000000, 0, -583)), 0, 0, 0, 0, (("src/hash_set_intf.ml", 206, 5575, 5585), ("src/hash_set_intf.ml", 206, 5575, 5620), 0), 0, 0, 0, Tag1 ("Base__Hash_set_intf", 50)), 0, 0)])), 0, (("src/hash_set_intf.ml", 206, 5575, 5585), ("src/hash_set_intf.ml", 206, 5575, 5620), 0), Tag1 ("Base__Hash_set_intf", 51)), 0, 0); (("sexp_of_m__t", 2045), ((Tag1 (0, (Tag11 ((("Sexp_of_m", 2042)), [(("t"), ((("elt")), 100000000, 0, -25))]), 100000000, 0, -26), (Tag1 (0, (Tag3 ((("t", 1993)), [((("elt")), 100000000, 0, -25)], (0)), 100000000, 0, -24), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -23), 0), 100000000, 0, -22), 0), 100000000, 0, -21), 0, (("src/hash_set_intf.ml", 206, 5575, 5585), ("src/hash_set_intf.ml", 206, 5575, 5620), 0), 0, Tag1 ("Base__Hash_set_intf", 53)), 0); (("m__t_of_sexp", 2046), ((Tag1 (0, (Tag11 ((("M_of_sexp", 2041)), [(("t"), ((("elt")), 100000000, 0, -18))]), 100000000, 0, -20), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -19), (Tag3 ((("t", 1993)), [((("elt")), 100000000, 0, -18)], (0)), 100000000, 0, -17), 0), 100000000, 0, -16), 0), 100000000, 0, -15), 0, (("src/hash_set_intf.ml", 206, 5575, 5585), ("src/hash_set_intf.ml", 206, 5575, 5620), 0), 0, Tag1 ("Base__Hash_set_intf", 55)), 0); (("m__t_sexp_grammar", 2047), ((Tag1 (0, (Tag11 (Tag1 ((Tag2 ("Base__Hash_set_intf")), "M_sexp_grammar"), [(("t"), ((("elt")), 100000000, 0, -13))]), 100000000, 0, -14), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("t", 1993)), [((("elt")), 100000000, 0, -13)], (0)), 100000000, 0, -12)], (0)), 100000000, 0, -11), 0), 100000000, 0, -10), 0, (("src/hash_set_intf.ml", 206, 5575, 5585), ("src/hash_set_intf.ml", 206, 5575, 5620), 0), 0, Tag1 ("Base__Hash_set_intf", 57)), 0); (("equal_m__t", 2048), ((Tag1 (0, (Tag11 ((("Equal_m", 2043)), 0), 100000000, 0, -9), (Tag1 (0, (Tag3 ((("t", 1993)), [((("elt")), 100000000, 0, -7)], (0)), 100000000, 0, -8), (Tag1 (0, (Tag3 ((("t", 1993)), [((("elt")), 100000000, 0, -7)], (0)), 100000000, 0, -6), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/hash_set_intf.ml", 206, 5575, 5585), ("src/hash_set_intf.ml", 206, 5575, 5620), 0), 0, Tag1 ("Base__Hash_set_intf", 58)), 0); Tag3 (("Private", 2049), 0, (Tag1 ([(("hashable", 2098), ((Tag1 (0, (Tag3 ((("t", 1993)), [((("a")), 100000000, 0, -587)], (0)), 100000000, 0, -588), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Hashable"), "t"), [((("a")), 100000000, 0, -587)], (0)), 100000000, 0, -586), 0), 100000000, 0, -585), 0, (("src/hash_set_intf.ml", 214, 5810, 5814), ("src/hash_set_intf.ml", 214, 5810, 5850), 0), 0, Tag1 ("Base__Hash_set_intf", 91)), 0)]), 0, (("src/hash_set_intf.ml", 213, 5787, 5789), ("src/hash_set_intf.ml", 215, 5851, 5856), 0), Tag1 ("Base__Hash_set_intf", 92)), 0, 0)], "Base__Hash_set", [("Base__Hash_set", ("\176\194\200\135S\170\176\199\223ik\n\160\004\172\160")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__StringLabels", ("\134F\024\226\216Is#\223\230\234\169Z\206Gc")); ("Stdlib__StdLabels", (".\193\n\229\139\017\212C-ZA\\kz-\128")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Printf", ("\215<\139]\021\142\224E\245m\198qc(W\229")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__MoreLabels", ("\248\232\248\254`<\230\241\161U\193U\1466J\238")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__ListLabels", ("*\194\012\191\020%\170\249m\002\180\178hk\205\220")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shadow_stdlib", ("\219zi\164\203\158e)\232\221\196\168\138x\142\018")); ("Sexplib0__Sexpable", ("\251${\207(\249/z\242\255\250^\141\156\210e")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv_error", ("kzv!\151~\198P\000\165\176d\007\251p\232")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Base_internalhash_types", ("0\148#2\226\223\018\135\173>!\020\237\017\255\149")); ("Base__With_return", ("S\142\136\128>E\001\1583\028\161\217I\183\1279")); ("Base__T", ("+t\159\169\027\152\205\235\003\237\133\177\024\n6'")); ("Base__Sys0", ("\206z\231\154s\\\136\2364\131\005\014\031\152m3")); ("Base__String0", ("\212\221L\220\245\255\162P\228\224\189\216\135H\149O")); ("Base__Source_code_position0", ("_\003P6\254\029\206\005\130\136\180\019\145\230\000M")); ("Base__Sexp", ("\154\187\171&\209=\153[\236\250!U\174`\190T")); ("Base__Result", ("\204|\215\173FMa\2511<&\215T\194$\228")); ("Base__Random", (" \216\153fc\243\1430\155\211\169?\022\\\231\011")); ("Base__Printf", ("\000\196c,\214\127\226\174\220\190\253z!\242\028\250")); ("Base__Ppx_hash_lib", ("\199\141\178\193\006\209L\007^\020(\131\224sn8")); ("Base__Ppx_compare_lib", ("\243\186~\233\228\199Ah\181.\223\004e\231\129S")); ("Base__Poly0", ("\230;\143\234\255.H\132KOe7\155\\\023f")); ("Base__Or_error", ("\193\133)\bO\210\2517\168*\203\148\143\200\127\177")); ("Base__Monad_intf", ("\208\203\163\152\184O\130?\012:\168\247}\018\253\155")); ("Base__Monad", ("!\244\168\2352=\137Lm\219\129K\216\199\145\\")); ("Base__Lazy", ("@`\165\196 \235)\136ANe:p\169$\185")); ("Base__Invariant_intf", ("\213\204\238\235\236[\198\145\028\2392\015\243\177S\249")); ("Base__Invariant", ("\135\153\136\\\129SD\228\202l\255\152\139\253\015\201")); ("Base__Int0", ("N\1310\012\227\254\000\255_\222!\018\016\003\1779")); ("Base__Info_intf", ("\184\209'\173\251\219\167X|v\188]\190o5X")); ("Base__Info", ("-\011\149\203\248\030\2301\1907\1630\189\128\209\170")); ("Base__Import0", ("\156\129U\197Y[\\\153\017Ho\203\173\204\220\020")); ("Base__Import", ("\014\187\247\141\187\181\142g\176:s_,\181\219\209")); ("Base__Hashtbl_intf", ("n_\014\250>-h\129\144\243Q\184\227\229\020\021")); ("Base__Hashtbl", ("j\223\128\213Rk\159/\255\218\025L\207\191K\182")); ("Base__Hashable_intf", ("\128\015G\244\135R\026\202\128F?)\193\004\195\181")); ("Base__Hashable", ("\027\187\158\245r}\018\193dbq\196\005\170g\252")); ("Base__Hash_set_intf", ("S\223\179\250\24391>\026\018\153\163\144\254]z")); ("Base__Hash_intf", ("h\004P\218\1531G\127\212\208A\024\140\164iq")); ("Base__Hash", ("\206Rc\194\234{s3\248\165\024\162\203{\206\206")); ("Base__Globalize", ("<\243w~.\180\196t\159\193\174[\227\139\215G")); ("Base__Formatter", ("\193\149\030\140\154\1505b\162a`%\243\185'%")); ("Base__Field", ("8In\234X\202\188G\186\208$\192\175\136\214v")); ("Base__Error", ("\199\218\231n\155/\159\156\146\247\148t\237\003\t\153")); ("Base__Either_intf", ("\198\253n\235\170\"\029\207\169\248\161\226`(6\182")); ("Base__Either0", ("!9-\011n\2077eZ\212\031c\227\029\206\t")); ("Base__Either", ("\011+\000L\150v\2387\\C\181\179\242\251sk")); ("Base__Container_intf", ("\170vo*\208\209\141\219\196\168\236l\016\246\012c")); ("Base__Container", ("\191|>_\153W\235M\180uKz\214w`q")); ("Base__Comparator", ("\002\135z7b\025&\207\t\188\239&U3R\167")); ("Base__Bool0", ("\177f\254p\023\143&\239\020\136\206\242~\018F\251")); ("Base__Applicative_intf", ("J\176\203\159\235N(\235\027\232\198+\224\205*A")); ("Base__Applicative", ("\157\024\176\241a\165\204\133\003s3\214\007\131\244\n")); ("Base__", ("p\252\007\139\128\163W\025+\0225\001\246|P\158"))], [(0)])
module Private : sig val hashable : 'a t -> 'a Base__.Hashable.t end

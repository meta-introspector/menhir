type regexp
val regexp : string -> regexp
val regexp_case_fold : string -> regexp
val quote : string -> string
val regexp_string : string -> regexp
val regexp_string_case_fold : string -> regexp
val string_match : regexp -> string -> int -> bool
val search_forward : regexp -> string -> int -> int
val search_backward : regexp -> string -> int -> int
val string_partial_match : regexp -> string -> int -> bool
val matched_string : string -> string
val match_beginning : unit -> int
val match_end : unit -> int
val matched_group : int -> string -> string
val group_beginning : int -> int
val group_end : int -> int
val global_replace : regexp -> string -> string -> string
val replace_first : regexp -> string -> string -> string
val global_substitute : regexp -> (string -> string) -> string -> string
val substitute_first : regexp -> (string -> string) -> string -> string
val replace_matched : string -> string -> string
val split : regexp -> string -> string list
val bounded_split : regexp -> string -> int -> string list
val split_delim : regexp -> string -> string list
val bounded_split_delim : regexp -> string -> int -> string list
type split_result = Text of string | Delim of string
val full_split : regexp -> string -> split_result list
val bounded_full_split : regexp -> string -> int -> split_result list
val string_before : string -> int -> string
val string_after : string -> int -> string
val first_chars : string -> int -> string
("DEBUG:rule", [Tag1 (("regexp", 317), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("lib/str.mli", 20, 1060, 1060), ("lib/str.mli", 20, 1060, 1071), 0), 0, 0, 0, Tag1 ("Re__Str", 0)), 1, 0); (("regexp", 318), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -165), (Tag3 ((("regexp", 317)), 0, (0)), 100000000, 0, -164), 0), 100000000, 0, -163), 0, (("lib/str.mli", 23, 1122, 1122), ("lib/str.mli", 23, 1122, 1150), 0), 0, Tag1 ("Re__Str", 1)), 0); (("regexp_case_fold", 319), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -162), (Tag3 ((("regexp", 317)), 0, (0)), 100000000, 0, -161), 0), 100000000, 0, -160), 0, (("lib/str.mli", 45, 2367, 2367), ("lib/str.mli", 45, 2367, 2405), 0), 0, Tag1 ("Re__Str", 2)), 0); (("quote", 320), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -159), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -158), 0), 100000000, 0, -157), 0, (("lib/str.mli", 50, 2588, 2588), ("lib/str.mli", 50, 2588, 2615), 0), 0, Tag1 ("Re__Str", 3)), 0); (("regexp_string", 321), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -156), (Tag3 ((("regexp", 317)), 0, (0)), 100000000, 0, -155), 0), 100000000, 0, -154), 0, (("lib/str.mli", 54, 2709, 2709), ("lib/str.mli", 54, 2709, 2744), 0), 0, Tag1 ("Re__Str", 4)), 0); (("regexp_string_case_fold", 322), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -153), (Tag3 ((("regexp", 317)), 0, (0)), 100000000, 0, -152), 0), 100000000, 0, -151), 0, (("lib/str.mli", 58, 2851, 2851), ("lib/str.mli", 58, 2851, 2896), 0), 0, Tag1 ("Re__Str", 5)), 0); (("string_match", 323), ((Tag1 (0, (Tag3 ((("regexp", 317)), 0, (0)), 100000000, 0, -150), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -149), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -148), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -147), 0), 100000000, 0, -146), 0), 100000000, 0, -145), 0), 100000000, 0, -144), 0, (("lib/str.mli", 64, 3066, 3066), ("lib/str.mli", 64, 3066, 3115), 0), 0, Tag1 ("Re__Str", 6)), 0); (("search_forward", 324), ((Tag1 (0, (Tag3 ((("regexp", 317)), 0, (0)), 100000000, 0, -143), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -142), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -141), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -140), 0), 100000000, 0, -139), 0), 100000000, 0, -138), 0), 100000000, 0, -137), 0, (("lib/str.mli", 69, 3330, 3330), ("lib/str.mli", 69, 3330, 3380), 0), 0, Tag1 ("Re__Str", 7)), 0); (("search_backward", 325), ((Tag1 (0, (Tag3 ((("regexp", 317)), 0, (0)), 100000000, 0, -136), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -135), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -134), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -133), 0), 100000000, 0, -132), 0), 100000000, 0, -131), 0), 100000000, 0, -130), 0, (("lib/str.mli", 76, 3734, 3734), ("lib/str.mli", 76, 3734, 3785), 0), 0, Tag1 ("Re__Str", 8)), 0); (("string_partial_match", 326), ((Tag1 (0, (Tag3 ((("regexp", 317)), 0, (0)), 100000000, 0, -129), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -128), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -127), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -126), 0), 100000000, 0, -125), 0), 100000000, 0, -124), 0), 100000000, 0, -123), 0, (("lib/str.mli", 80, 3892, 3892), ("lib/str.mli", 80, 3892, 3949), 0), 0, Tag1 ("Re__Str", 9)), 0); (("matched_string", 327), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -122), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -121), 0), 100000000, 0, -120), 0, (("lib/str.mli", 85, 4137, 4137), ("lib/str.mli", 85, 4137, 4173), 0), 0, Tag1 ("Re__Str", 10)), 0); (("match_beginning", 328), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -119), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -118), 0), 100000000, 0, -117), 0, (("lib/str.mli", 91, 4470, 4470), ("lib/str.mli", 91, 4470, 4502), 0), 0, Tag1 ("Re__Str", 11)), 0); (("match_end", 329), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -116), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -115), 0), 100000000, 0, -114), 0, (("lib/str.mli", 96, 4676, 4676), ("lib/str.mli", 96, 4676, 4702), 0), 0, Tag1 ("Re__Str", 12)), 0); (("matched_group", 330), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -113), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -112), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -111), 0), 100000000, 0, -110), 0), 100000000, 0, -109), 0, (("lib/str.mli", 101, 4893, 4893), ("lib/str.mli", 101, 4893, 4935), 0), 0, Tag1 ("Re__Str", 13)), 0); (("group_beginning", 331), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -108), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -107), 0), 100000000, 0, -106), 0, (("lib/str.mli", 114, 5636, 5636), ("lib/str.mli", 114, 5636, 5667), 0), 0, Tag1 ("Re__Str", 14)), 0); (("group_end", 332), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -105), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -104), 0), 100000000, 0, -103), 0, (("lib/str.mli", 119, 5909, 5909), ("lib/str.mli", 119, 5909, 5934), 0), 0, Tag1 ("Re__Str", 15)), 0); (("global_replace", 333), ((Tag1 (0, (Tag3 ((("regexp", 317)), 0, (0)), 100000000, 0, -102), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -101), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -100), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -99), 0), 100000000, 0, -98), 0), 100000000, 0, -97), 0), 100000000, 0, -96), 0, (("lib/str.mli", 126, 6163, 6163), ("lib/str.mli", 126, 6163, 6219), 0), 0, Tag1 ("Re__Str", 16)), 0); (("replace_first", 334), ((Tag1 (0, (Tag3 ((("regexp", 317)), 0, (0)), 100000000, 0, -95), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -94), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -93), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -92), 0), 100000000, 0, -91), 0), 100000000, 0, -90), 0), 100000000, 0, -89), 0, (("lib/str.mli", 134, 6635, 6635), ("lib/str.mli", 134, 6635, 6690), 0), 0, Tag1 ("Re__Str", 17)), 0); (("global_substitute", 335), ((Tag1 (0, (Tag3 ((("regexp", 317)), 0, (0)), 100000000, 0, -88), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -87), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -86), 0), 100000000, 0, -85), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -84), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -83), 0), 100000000, 0, -82), 0), 100000000, 0, -81), 0), 100000000, 0, -80), 0, (("lib/str.mli", 138, 6810, 6810), ("lib/str.mli", 138, 6810, 6881), 0), 0, Tag1 ("Re__Str", 18)), 0); (("substitute_first", 336), ((Tag1 (0, (Tag3 ((("regexp", 317)), 0, (0)), 100000000, 0, -79), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -78), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -77), 0), 100000000, 0, -76), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -75), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -74), 0), 100000000, 0, -73), 0), 100000000, 0, -72), 0), 100000000, 0, -71), 0, (("lib/str.mli", 145, 7224, 7224), ("lib/str.mli", 145, 7224, 7294), 0), 0, Tag1 ("Re__Str", 19)), 0); (("replace_matched", 337), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -70), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -69), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -68), 0), 100000000, 0, -67), 0), 100000000, 0, -66), 0, (("lib/str.mli", 149, 7425, 7425), ("lib/str.mli", 149, 7425, 7473), 0), 0, Tag1 ("Re__Str", 20)), 0); (("split", 338), ((Tag1 (0, (Tag3 ((("regexp", 317)), 0, (0)), 100000000, 0, -65), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -64), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -63)], (0)), 100000000, 0, -62), 0), 100000000, 0, -61), 0), 100000000, 0, -60), 0, (("lib/str.mli", 158, 7791, 7791), ("lib/str.mli", 158, 7791, 7833), 0), 0, Tag1 ("Re__Str", 21)), 0); (("bounded_split", 339), ((Tag1 (0, (Tag3 ((("regexp", 317)), 0, (0)), 100000000, 0, -59), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -58), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -57), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -56)], (0)), 100000000, 0, -55), 0), 100000000, 0, -54), 0), 100000000, 0, -53), 0), 100000000, 0, -52), 0, (("lib/str.mli", 165, 8157, 8157), ("lib/str.mli", 165, 8157, 8214), 0), 0, Tag1 ("Re__Str", 22)), 0); (("split_delim", 340), ((Tag1 (0, (Tag3 ((("regexp", 317)), 0, (0)), 100000000, 0, -51), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -50), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -49)], (0)), 100000000, 0, -48), 0), 100000000, 0, -47), 0), 100000000, 0, -46), 0, (("lib/str.mli", 169, 8326, 8326), ("lib/str.mli", 169, 8326, 8374), 0), 0, Tag1 ("Re__Str", 23)), 0); (("bounded_split_delim", 341), ((Tag1 (0, (Tag3 ((("regexp", 317)), 0, (0)), 100000000, 0, -45), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -44), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -43), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -42)], (0)), 100000000, 0, -41), 0), 100000000, 0, -40), 0), 100000000, 0, -39), 0), 100000000, 0, -38), 0, (("lib/str.mli", 176, 8688, 8688), ("lib/str.mli", 176, 8688, 8751), 0), 0, Tag1 ("Re__Str", 24)), 0); Tag1 (("split_result", 342), (0, 0, Tag1 ([(("Text", 309), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -36)]), 0, (("lib/str.mli", 183, 9091, 9111), ("lib/str.mli", 183, 9091, 9125), 0), 0, Tag1 ("Re__Str", 26)); (("Delim", 310), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -37)]), 0, (("lib/str.mli", 183, 9091, 9126), ("lib/str.mli", 183, 9091, 9143), 0), 0, Tag1 ("Re__Str", 27))], 0), 1, 0, 0, 0, 0, 0, (("lib/str.mli", 183, 9091, 9091), ("lib/str.mli", 183, 9091, 9143), 0), 0, 0, 0, Tag1 ("Re__Str", 25)), 1, 0); (("full_split", 343), ((Tag1 (0, (Tag3 ((("regexp", 317)), 0, (0)), 100000000, 0, -35), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -34), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("split_result", 342)), 0, (0)), 100000000, 0, -33)], (0)), 100000000, 0, -32), 0), 100000000, 0, -31), 0), 100000000, 0, -30), 0, (("lib/str.mli", 185, 9145, 9145), ("lib/str.mli", 185, 9145, 9198), 0), 0, Tag1 ("Re__Str", 28)), 0); (("bounded_full_split", 344), ((Tag1 (0, (Tag3 ((("regexp", 317)), 0, (0)), 100000000, 0, -29), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -28), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -27), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("split_result", 342)), 0, (0)), 100000000, 0, -26)], (0)), 100000000, 0, -25), 0), 100000000, 0, -24), 0), 100000000, 0, -23), 0), 100000000, 0, -22), 0, (("lib/str.mli", 193, 9508, 9508), ("lib/str.mli", 193, 9508, 9576), 0), 0, Tag1 ("Re__Str", 29)), 0); (("string_before", 345), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -21), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -20), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("lib/str.mli", 203, 9946, 9946), ("lib/str.mli", 203, 9946, 9988), 0), 0, Tag1 ("Re__Str", 30)), 0); (("string_after", 346), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -16), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -15), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -14), 0), 100000000, 0, -13), 0), 100000000, 0, -12), 0, (("lib/str.mli", 208, 10139, 10139), ("lib/str.mli", 208, 10139, 10180), 0), 0, Tag1 ("Re__Str", 31)), 0); (("first_chars", 347), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -11), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -10), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0), 100000000, 0, -7), 0, (("lib/str.mli", 213, 10331, 10331), ("lib/str.mli", 213, 10331, 10371), 0), 0, Tag1 ("Re__Str", 32)), 0); (("last_chars", 348), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -5), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("lib/str.mli", 217, 10489, 10489), ("lib/str.mli", 217, 10489, 10528), 0), 0, Tag1 ("Re__Str", 33)), 0)], "Re__Str", [("Re__Str", ("\2170\131\146G\129\202y\198\179\170.\"\214b\230")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Re__", ("\0062t\168b\007\236c5\231\253,\210\160Z\n")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
val last_chars : string -> int -> string

type t = Less | Equal | Greater
val compare : t Base__Ppx_compare_lib.compare
val hash_fold_t : t Base__Ppx_hash_lib.hash_fold
val hash : t -> Base__Ppx_hash_lib.Std.Hash.hash_value
val t_of_sexp : Sexplib0__.Sexp.t -> t
val sexp_of_t : t -> Sexplib0__.Sexp.t
val t_sexp_grammar : t Sexplib0.Sexp_grammar.t
val all : t list
val equal : t Base__Equal.equal
val of_int : int -> t
val to_int : t -> int
("DEBUG:rule", [Tag1 (("t", 936), (0, 0, Tag1 ([(("Less", 783), (0), 0, (("src/ordering.mli", 30, 477, 479), ("src/ordering.mli", 30, 477, 485), 0), 0, Tag1 ("Base__Ordering", 1)); (("Equal", 784), (0), 0, (("src/ordering.mli", 31, 486, 488), ("src/ordering.mli", 31, 486, 495), 0), 0, Tag1 ("Base__Ordering", 2)); (("Greater", 785), (0), 0, (("src/ordering.mli", 32, 496, 498), ("src/ordering.mli", 32, 496, 507), 0), 0, Tag1 ("Base__Ordering", 3))], 0), 1, 0, 0, 0, 0, 0, (("src/ordering.mli", 29, 468, 468), ("src/ordering.mli", 33, 508, 561), 0), [(("deriving_inline", (("src/ordering.mli", 33, 508, 511), ("src/ordering.mli", 33, 508, 526), 0)), ([([(Tag8 ([(((("compare"), (("src/ordering.mli", 33, 508, 527), ("src/ordering.mli", 33, 508, 534), 0))), (("src/ordering.mli", 33, 508, 527), ("src/ordering.mli", 33, 508, 534), 0), 0, 0); (((("hash"), (("src/ordering.mli", 33, 508, 536), ("src/ordering.mli", 33, 508, 540), 0))), (("src/ordering.mli", 33, 508, 536), ("src/ordering.mli", 33, 508, 540), 0), 0, 0); (((("sexp"), (("src/ordering.mli", 33, 508, 542), ("src/ordering.mli", 33, 508, 546), 0))), (("src/ordering.mli", 33, 508, 542), ("src/ordering.mli", 33, 508, 546), 0), 0, 0); (((("sexp_grammar"), (("src/ordering.mli", 33, 508, 548), ("src/ordering.mli", 33, 508, 560), 0))), (("src/ordering.mli", 33, 508, 548), ("src/ordering.mli", 33, 508, 560), 0), 0, 0)]), (("src/ordering.mli", 33, 508, 527), ("src/ordering.mli", 33, 508, 560), 0), 0, 0)], (("src/ordering.mli", 33, 508, 527), ("src/ordering.mli", 33, 508, 560), 0))]), (("src/ordering.mli", 33, 508, 508), ("src/ordering.mli", 33, 508, 561), 0))], 1, 0, Tag1 ("Base__Ordering", 0)), 1, 0); (("compare", 937), ((Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "compare"), [(Tag3 ((("t", 936)), 0, (0)), 100000000, 0, -26)], (0)), 100000000, 0, -25), 0, (("src/ordering.mli", 35, 563, 571), ("src/ordering.mli", 35, 563, 616), 0), 0, Tag1 ("Base__Ppx_compare_lib", 5)), 0); (("hash_fold_t", 938), ((Tag3 (Tag1 ((Tag2 ("Base__Ppx_hash_lib")), "hash_fold"), [(Tag3 ((("t", 936)), 0, (0)), 100000000, 0, -24)], (0)), 100000000, 0, -23), 0, (("src/ordering.mli", 36, 617, 625), ("src/ordering.mli", 36, 617, 665), 0), 0, Tag1 ("Base__Ppx_hash_lib", 4)), 0); (("hash", 939), ((Tag1 (0, (Tag3 ((("t", 936)), 0, (0)), 100000000, 0, -22), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__Ppx_hash_lib")), "Std"), "Hash"), "hash_value"), 0, (0)), 100000000, 0, -21), 0), 100000000, 0, -20), 0, (("src/ordering.mli", 36, 617, 625), ("src/ordering.mli", 36, 617, 665), 0), 0, Tag1 ("Base__Ppx_hash_lib", 5)), 0); (("t_of_sexp", 940), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -19), (Tag3 ((("t", 936)), 0, (0)), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("src/ordering.mli", 37, 666, 674), ("src/ordering.mli", 37, 666, 710), 0), 0, Tag1 ("Sexplib0__Sexpable", 1)), 0); (("sexp_of_t", 941), ((Tag1 (0, (Tag3 ((("t", 936)), 0, (0)), 100000000, 0, -16), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -15), 0), 100000000, 0, -14), 0, (("src/ordering.mli", 37, 666, 674), ("src/ordering.mli", 37, 666, 710), 0), 0, Tag1 ("Sexplib0__Sexpable", 2)), 0); (("t_sexp_grammar", 942), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("t", 936)), 0, (0)), 100000000, 0, -13)], (0)), 100000000, 0, -12), 0, (("src/ordering.mli", 39, 712, 712), ("src/ordering.mli", 39, 712, 758), 0), 0, Tag1 ("Base__Ordering", 8)), 0); (("all", 943), ((Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 936)), 0, (0)), 100000000, 0, -11)], (0)), 100000000, 0, -10), 0, (("src/ordering.mli", 44, 840, 840), ("src/ordering.mli", 44, 840, 856), 0), 0, Tag1 ("Base__Ordering", 9)), 0); (("equal", 944), ((Tag3 (Tag1 ((Tag2 ("Base__Equal")), "equal"), [(Tag3 ((("t", 936)), 0, (0)), 100000000, 0, -9)], (0)), 100000000, 0, -8), 0, (("src/ordering.mli", 46, 858, 866), ("src/ordering.mli", 46, 858, 890), 0), 0, Tag1 ("Base__Equal", 3)), 0); (("of_int", 945), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -7), (Tag3 ((("t", 936)), 0, (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("src/ordering.mli", 55, 1001, 1001), ("src/ordering.mli", 55, 1001, 1022), 0), 0, Tag1 ("Base__Ordering", 11)), 0); (("to_int", 946), ((Tag1 (0, (Tag3 ((("t", 936)), 0, (0)), 100000000, 0, -4), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/ordering.mli", 67, 1262, 1262), ("src/ordering.mli", 67, 1262, 1283), 0), 0, Tag1 ("Base__Ordering", 12)), 0); Tag3 (("Export", 947), 0, (Tag1 ([Tag1 (("_ordering", 948), (0, 0, Tag1 ([(("Less", 912), (0), 0, (("src/ordering.mli", 71, 1328, 1332), ("src/ordering.mli", 71, 1328, 1338), 0), 0, Tag1 ("Base__Ordering", 14)); (("Equal", 913), (0), 0, (("src/ordering.mli", 72, 1339, 1343), ("src/ordering.mli", 72, 1339, 1350), 0), 0, Tag1 ("Base__Ordering", 15)); (("Greater", 914), (0), 0, (("src/ordering.mli", 73, 1351, 1355), ("src/ordering.mli", 73, 1351, 1364), 0), 0, Tag1 ("Base__Ordering", 16))], 0), 1, ((Tag3 ((("t", 936)), 0, (0)), 100000000, 0, -27)), 0, 0, 0, 0, (("src/ordering.mli", 70, 1305, 1307), ("src/ordering.mli", 73, 1351, 1364), 0), 0, 1, 0, Tag1 ("Base__Ordering", 13)), 1, 0)]), 0, (("src/ordering.mli", 69, 1285, 1285), ("src/ordering.mli", 74, 1365, 1368), 0), Tag1 ("Base__Ordering", 17)), 0, 0)], "Base__Ordering", [("Base__Ordering", ("\020u\143\b\224z\168\2351\204\183\1333\214\141\192")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__StdLabels", (".\193\n\229\139\017\212C-ZA\\kz-\128")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__MoreLabels", ("\248\232\248\254`<\230\241\161U\193U\1466J\238")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shadow_stdlib", ("\219zi\164\203\158e)\232\221\196\168\138x\142\018")); ("Sexplib0__Sexpable", ("\251${\207(\249/z\242\255\250^\141\156\210e")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Base_internalhash_types", ("0\148#2\226\223\018\135\173>!\020\237\017\255\149")); ("Base__Sexp", ("\154\187\171&\209=\153[\236\250!U\174`\190T")); ("Base__Ppx_hash_lib", ("\199\141\178\193\006\209L\007^\020(\131\224sn8")); ("Base__Ppx_compare_lib", ("\243\186~\233\228\199Ah\181.\223\004e\231\129S")); ("Base__Poly0", ("\230;\143\234\255.H\132KOe7\155\\\023f")); ("Base__Import0", ("\156\129U\197Y[\\\153\017Ho\203\173\204\220\020")); ("Base__Import", ("\014\187\247\141\187\181\142g\176:s_,\181\219\209")); ("Base__Hash_intf", ("h\004P\218\1531G\127\212\208A\024\140\164iq")); ("Base__Hash", ("\206Rc\194\234{s3\248\165\024\162\203{\206\206")); ("Base__Globalize", ("<\243w~.\180\196t\159\193\174[\227\139\215G")); ("Base__Equal", ("\193\217Z\127he\141N\000\1447\030\236%\131\b")); ("Base__Bool0", ("\177f\254p\023\143&\239\020\136\206\242~\018F\251")); ("Base__", ("p\252\007\139\128\163W\025+\0225\001\246|P\158"))], [(0)])
module Export : sig type _ordering = t = Less | Equal | Greater end

val ceil : float -> float
val floor : float -> float
val mod_float : float -> float -> float
val modf : float -> float * float
val float_of_string : string -> float
val float_of_string_opt : string -> float option
val nan : float
val infinity : float
val neg_infinity : float
val max_finite_value : float
val epsilon_float : float
val classify_float : float -> Base__.Import.Stdlib.fpclass
val abs_float : float -> float
val is_integer : float -> bool
val ( ** ) : float -> float -> float
val ( %. ) : float -> float -> float
external log10 : float -> float = "caml_log10_float" "log10" [@@unboxed]
  [@@noalloc]
external expm1 : float -> float = "caml_expm1_float" "caml_expm1" [@@unboxed]
  [@@noalloc]
external log1p : float -> float = "caml_log1p_float" "caml_log1p" [@@unboxed]
  [@@noalloc]
external copysign : float -> float -> float = "caml_copysign_float"
  "caml_copysign" [@@unboxed] [@@noalloc]
external cos : float -> float = "caml_cos_float" "cos" [@@unboxed]
  [@@noalloc]
external sin : float -> float = "caml_sin_float" "sin" [@@unboxed]
  [@@noalloc]
external tan : float -> float = "caml_tan_float" "tan" [@@unboxed]
  [@@noalloc]
external acos : float -> float = "caml_acos_float" "acos" [@@unboxed]
  [@@noalloc]
external asin : float -> float = "caml_asin_float" "asin" [@@unboxed]
  [@@noalloc]
external atan : float -> float = "caml_atan_float" "atan" [@@unboxed]
  [@@noalloc]
external acosh : float -> float = "caml_acosh_float" "caml_acosh" [@@unboxed]
  [@@noalloc]
external asinh : float -> float = "caml_asinh_float" "caml_asinh" [@@unboxed]
  [@@noalloc]
external atanh : float -> float = "caml_atanh_float" "caml_atanh" [@@unboxed]
  [@@noalloc]
external atan2 : float -> float -> float = "caml_atan2_float" "atan2"
  [@@unboxed] [@@noalloc]
external hypot : float -> float -> float = "caml_hypot_float" "caml_hypot"
  [@@unboxed] [@@noalloc]
external cosh : float -> float = "caml_cosh_float" "cosh" [@@unboxed]
  [@@noalloc]
external sinh : float -> float = "caml_sinh_float" "sinh" [@@unboxed]
  [@@noalloc]
external tanh : float -> float = "caml_tanh_float" "tanh" [@@unboxed]
  [@@noalloc]
external sqrt : float -> float = "caml_sqrt_float" "sqrt" [@@unboxed]
  [@@noalloc]
external exp : float -> float = "caml_exp_float" "exp" [@@unboxed]
  [@@noalloc]
external log : float -> float = "caml_log_float" "log" [@@unboxed]
  [@@noalloc]
val frexp : float -> float * int
val ldexp : float -> int -> float
val is_nan : float -> bool
val to_int64_preserve_order : float -> int64 option
val to_int64_preserve_order_exn : float -> int64
val of_int64_preserve_order : Base__Import0.Stdlib.Int64.t -> float
val one_ulp : [< `Down | `Up ] -> float -> float
val upper_bound_for_int : int -> float
val is_x_minus_one_exact : float -> bool
val lower_bound_for_int : int -> float
val clamp_unchecked : float -> min:float -> max:float -> float
val box : float -> float
val ( < ) : float -> float -> bool
val ( <= ) : float -> float -> bool
val ( <> ) : float -> float -> bool
val ( = ) : float -> float -> bool
val ( > ) : float -> float -> bool
val ( >= ) : float -> float -> bool
val ascending : float -> float -> int
val descending : float -> float -> int
val compare : float -> float -> int
val equal : float -> float -> bool
val max : float -> float -> float("DEBUG:rule", [(("ceil", 1946), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -221), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -220), 0), 100000000, 0, -219), 0, (("src/float0.ml", 8, 280, 284), ("src/float0.ml", 8, 280, 288), 0), 0, Tag1 ("Base__Float0", 0)), 0); (("floor", 1947), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -218), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -217), 0), 100000000, 0, -216), 0, (("src/float0.ml", 9, 303, 307), ("src/float0.ml", 9, 303, 312), 0), 0, Tag1 ("Base__Float0", 1)), 0); (("mod_float", 1948), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -215), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -214), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -213), 0), 100000000, 0, -212), 0), 100000000, 0, -211), 0, (("src/float0.ml", 10, 328, 332), ("src/float0.ml", 10, 328, 341), 0), 0, Tag1 ("Base__Float0", 2)), 0); (("modf", 1949), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -210), (Tag2 ([(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -208); (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -209)]), 100000000, 0, -207), 0), 100000000, 0, -206), 0, (("src/float0.ml", 11, 361, 365), ("src/float0.ml", 11, 361, 369), 0), 0, Tag1 ("Base__Float0", 3)), 0); (("float_of_string", 1950), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -205), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -204), 0), 100000000, 0, -203), 0, (("src/float0.ml", 12, 384, 388), ("src/float0.ml", 12, 384, 403), 0), 0, Tag1 ("Base__Float0", 4)), 0); (("float_of_string_opt", 1951), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -202), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -201)], (0)), 100000000, 0, -200), 0), 100000000, 0, -199), 0, (("src/float0.ml", 13, 429, 433), ("src/float0.ml", 13, 429, 452), 0), 0, Tag1 ("Base__Float0", 5)), 0); (("nan", 1952), ((Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -198), 0, (("src/float0.ml", 14, 482, 486), ("src/float0.ml", 14, 482, 489), 0), 0, Tag1 ("Base__Float0", 6)), 0); (("infinity", 1953), ((Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -197), 0, (("src/float0.ml", 15, 503, 507), ("src/float0.ml", 15, 503, 515), 0), 0, Tag1 ("Base__Float0", 7)), 0); (("neg_infinity", 1954), ((Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -196), 0, (("src/float0.ml", 16, 534, 538), ("src/float0.ml", 16, 534, 550), 0), 0, Tag1 ("Base__Float0", 8)), 0); (("max_finite_value", 1955), ((Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -195), 0, (("src/float0.ml", 17, 573, 577), ("src/float0.ml", 17, 573, 593), 0), 0, Tag1 ("Base__Float0", 9)), 0); (("epsilon_float", 1956), ((Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -194), 0, (("src/float0.ml", 18, 613, 617), ("src/float0.ml", 18, 613, 630), 0), 0, Tag1 ("Base__Float0", 10)), 0); (("classify_float", 1957), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -193), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Import"), "Stdlib"), "fpclass"), 0, (0)), 100000000, 0, -192), 0), 100000000, 0, -191), 0, (("src/float0.ml", 19, 654, 658), ("src/float0.ml", 19, 654, 672), 0), 0, Tag1 ("Base__Float0", 11)), 0); (("abs_float", 1958), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -190), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -189), 0), 100000000, 0, -188), 0, (("src/float0.ml", 20, 697, 701), ("src/float0.ml", 20, 697, 710), 0), 0, Tag1 ("Base__Float0", 12)), 0); (("is_integer", 1959), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -187), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -186), 0), 100000000, 0, -185), 0, (("src/float0.ml", 21, 730, 734), ("src/float0.ml", 21, 730, 744), 0), 0, Tag1 ("Base__Float0", 13)), 0); (("**", 1960), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -184), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -183), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -182), 0), 100000000, 0, -181), 0), 100000000, 0, -180), 0, (("src/float0.ml", 22, 771, 775), ("src/float0.ml", 22, 771, 781), 0), 0, Tag1 ("Base__Float0", 14)), 0); (("%.", 1961), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -179), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -178), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -177), 0), 100000000, 0, -176), 0), 100000000, 0, -175), 0, (("src/float0.ml", 24, 799, 803), ("src/float0.ml", 24, 799, 809), 0), 0, Tag1 ("Base__Float0", 15)), 0); (("log10", 1962), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -174), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -173), 0), 100000000, 0, -172), (("caml_log10_float", 1, 0, "log10", [1], 1)), (("src/float0.ml", 47, 1539, 1543), ("src/float0.ml", 47, 1539, 1627), 0), [(("unboxed", (("src/float0.ml", 47, 1539, 1607), ("src/float0.ml", 47, 1539, 1614), 0)), (0), (("src/float0.ml", 47, 1539, 1604), ("src/float0.ml", 47, 1539, 1615), 0)); (("noalloc", (("src/float0.ml", 47, 1539, 1619), ("src/float0.ml", 47, 1539, 1626), 0)), (0), (("src/float0.ml", 47, 1539, 1616), ("src/float0.ml", 47, 1539, 1627), 0))], Tag1 ("Base__Float0", 21)), 0); (("expm1", 1963), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -171), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -170), 0), 100000000, 0, -169), (("caml_expm1_float", 1, 0, "caml_expm1", [1], 1)), (("src/float0.ml", 49, 1629, 1633), ("src/float0.ml", 50, 1699, 1726), 0), [(("unboxed", (("src/float0.ml", 50, 1699, 1706), ("src/float0.ml", 50, 1699, 1713), 0)), (0), (("src/float0.ml", 50, 1699, 1703), ("src/float0.ml", 50, 1699, 1714), 0)); (("noalloc", (("src/float0.ml", 50, 1699, 1718), ("src/float0.ml", 50, 1699, 1725), 0)), (0), (("src/float0.ml", 50, 1699, 1715), ("src/float0.ml", 50, 1699, 1726), 0))], Tag1 ("Base__Float0", 22)), 0); (("log1p", 1964), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -168), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -167), 0), 100000000, 0, -166), (("caml_log1p_float", 1, 0, "caml_log1p", [1], 1)), (("src/float0.ml", 52, 1728, 1732), ("src/float0.ml", 53, 1798, 1825), 0), [(("unboxed", (("src/float0.ml", 53, 1798, 1805), ("src/float0.ml", 53, 1798, 1812), 0)), (0), (("src/float0.ml", 53, 1798, 1802), ("src/float0.ml", 53, 1798, 1813), 0)); (("noalloc", (("src/float0.ml", 53, 1798, 1817), ("src/float0.ml", 53, 1798, 1824), 0)), (0), (("src/float0.ml", 53, 1798, 1814), ("src/float0.ml", 53, 1798, 1825), 0))], Tag1 ("Base__Float0", 23)), 0); (("copysign", 1965), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -165), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -164), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -163), 0), 100000000, 0, -162), 0), 100000000, 0, -161), (("caml_copysign_float", 2, 0, "caml_copysign", [1; 1], 1)), (("src/float0.ml", 55, 1827, 1831), ("src/float0.ml", 56, 1915, 1942), 0), [(("unboxed", (("src/float0.ml", 56, 1915, 1922), ("src/float0.ml", 56, 1915, 1929), 0)), (0), (("src/float0.ml", 56, 1915, 1919), ("src/float0.ml", 56, 1915, 1930), 0)); (("noalloc", (("src/float0.ml", 56, 1915, 1934), ("src/float0.ml", 56, 1915, 1941), 0)), (0), (("src/float0.ml", 56, 1915, 1931), ("src/float0.ml", 56, 1915, 1942), 0))], Tag1 ("Base__Float0", 24)), 0); (("cos", 1966), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -160), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -159), 0), 100000000, 0, -158), (("caml_cos_float", 1, 0, "cos", [1], 1)), (("src/float0.ml", 58, 1944, 1948), ("src/float0.ml", 58, 1944, 2026), 0), [(("unboxed", (("src/float0.ml", 58, 1944, 2006), ("src/float0.ml", 58, 1944, 2013), 0)), (0), (("src/float0.ml", 58, 1944, 2003), ("src/float0.ml", 58, 1944, 2014), 0)); (("noalloc", (("src/float0.ml", 58, 1944, 2018), ("src/float0.ml", 58, 1944, 2025), 0)), (0), (("src/float0.ml", 58, 1944, 2015), ("src/float0.ml", 58, 1944, 2026), 0))], Tag1 ("Base__Float0", 25)), 0); (("sin", 1967), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -157), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -156), 0), 100000000, 0, -155), (("caml_sin_float", 1, 0, "sin", [1], 1)), (("src/float0.ml", 59, 2027, 2031), ("src/float0.ml", 59, 2027, 2109), 0), [(("unboxed", (("src/float0.ml", 59, 2027, 2089), ("src/float0.ml", 59, 2027, 2096), 0)), (0), (("src/float0.ml", 59, 2027, 2086), ("src/float0.ml", 59, 2027, 2097), 0)); (("noalloc", (("src/float0.ml", 59, 2027, 2101), ("src/float0.ml", 59, 2027, 2108), 0)), (0), (("src/float0.ml", 59, 2027, 2098), ("src/float0.ml", 59, 2027, 2109), 0))], Tag1 ("Base__Float0", 26)), 0); (("tan", 1968), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -154), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -153), 0), 100000000, 0, -152), (("caml_tan_float", 1, 0, "tan", [1], 1)), (("src/float0.ml", 60, 2110, 2114), ("src/float0.ml", 60, 2110, 2192), 0), [(("unboxed", (("src/float0.ml", 60, 2110, 2172), ("src/float0.ml", 60, 2110, 2179), 0)), (0), (("src/float0.ml", 60, 2110, 2169), ("src/float0.ml", 60, 2110, 2180), 0)); (("noalloc", (("src/float0.ml", 60, 2110, 2184), ("src/float0.ml", 60, 2110, 2191), 0)), (0), (("src/float0.ml", 60, 2110, 2181), ("src/float0.ml", 60, 2110, 2192), 0))], Tag1 ("Base__Float0", 27)), 0); (("acos", 1969), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -151), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -150), 0), 100000000, 0, -149), (("caml_acos_float", 1, 0, "acos", [1], 1)), (("src/float0.ml", 61, 2193, 2197), ("src/float0.ml", 61, 2193, 2278), 0), [(("unboxed", (("src/float0.ml", 61, 2193, 2258), ("src/float0.ml", 61, 2193, 2265), 0)), (0), (("src/float0.ml", 61, 2193, 2255), ("src/float0.ml", 61, 2193, 2266), 0)); (("noalloc", (("src/float0.ml", 61, 2193, 2270), ("src/float0.ml", 61, 2193, 2277), 0)), (0), (("src/float0.ml", 61, 2193, 2267), ("src/float0.ml", 61, 2193, 2278), 0))], Tag1 ("Base__Float0", 28)), 0); (("asin", 1970), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -148), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -147), 0), 100000000, 0, -146), (("caml_asin_float", 1, 0, "asin", [1], 1)), (("src/float0.ml", 62, 2279, 2283), ("src/float0.ml", 62, 2279, 2364), 0), [(("unboxed", (("src/float0.ml", 62, 2279, 2344), ("src/float0.ml", 62, 2279, 2351), 0)), (0), (("src/float0.ml", 62, 2279, 2341), ("src/float0.ml", 62, 2279, 2352), 0)); (("noalloc", (("src/float0.ml", 62, 2279, 2356), ("src/float0.ml", 62, 2279, 2363), 0)), (0), (("src/float0.ml", 62, 2279, 2353), ("src/float0.ml", 62, 2279, 2364), 0))], Tag1 ("Base__Float0", 29)), 0); (("atan", 1971), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -145), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -144), 0), 100000000, 0, -143), (("caml_atan_float", 1, 0, "atan", [1], 1)), (("src/float0.ml", 63, 2365, 2369), ("src/float0.ml", 63, 2365, 2450), 0), [(("unboxed", (("src/float0.ml", 63, 2365, 2430), ("src/float0.ml", 63, 2365, 2437), 0)), (0), (("src/float0.ml", 63, 2365, 2427), ("src/float0.ml", 63, 2365, 2438), 0)); (("noalloc", (("src/float0.ml", 63, 2365, 2442), ("src/float0.ml", 63, 2365, 2449), 0)), (0), (("src/float0.ml", 63, 2365, 2439), ("src/float0.ml", 63, 2365, 2450), 0))], Tag1 ("Base__Float0", 30)), 0); (("acosh", 1972), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -142), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -141), 0), 100000000, 0, -140), (("caml_acosh_float", 1, 0, "caml_acosh", [1], 1)), (("src/float0.ml", 65, 2452, 2456), ("src/float0.ml", 66, 2522, 2549), 0), [(("unboxed", (("src/float0.ml", 66, 2522, 2529), ("src/float0.ml", 66, 2522, 2536), 0)), (0), (("src/float0.ml", 66, 2522, 2526), ("src/float0.ml", 66, 2522, 2537), 0)); (("noalloc", (("src/float0.ml", 66, 2522, 2541), ("src/float0.ml", 66, 2522, 2548), 0)), (0), (("src/float0.ml", 66, 2522, 2538), ("src/float0.ml", 66, 2522, 2549), 0))], Tag1 ("Base__Float0", 31)), 0); (("asinh", 1973), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -139), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -138), 0), 100000000, 0, -137), (("caml_asinh_float", 1, 0, "caml_asinh", [1], 1)), (("src/float0.ml", 68, 2551, 2555), ("src/float0.ml", 69, 2621, 2648), 0), [(("unboxed", (("src/float0.ml", 69, 2621, 2628), ("src/float0.ml", 69, 2621, 2635), 0)), (0), (("src/float0.ml", 69, 2621, 2625), ("src/float0.ml", 69, 2621, 2636), 0)); (("noalloc", (("src/float0.ml", 69, 2621, 2640), ("src/float0.ml", 69, 2621, 2647), 0)), (0), (("src/float0.ml", 69, 2621, 2637), ("src/float0.ml", 69, 2621, 2648), 0))], Tag1 ("Base__Float0", 32)), 0); (("atanh", 1974), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -136), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -135), 0), 100000000, 0, -134), (("caml_atanh_float", 1, 0, "caml_atanh", [1], 1)), (("src/float0.ml", 71, 2650, 2654), ("src/float0.ml", 72, 2720, 2747), 0), [(("unboxed", (("src/float0.ml", 72, 2720, 2727), ("src/float0.ml", 72, 2720, 2734), 0)), (0), (("src/float0.ml", 72, 2720, 2724), ("src/float0.ml", 72, 2720, 2735), 0)); (("noalloc", (("src/float0.ml", 72, 2720, 2739), ("src/float0.ml", 72, 2720, 2746), 0)), (0), (("src/float0.ml", 72, 2720, 2736), ("src/float0.ml", 72, 2720, 2747), 0))], Tag1 ("Base__Float0", 33)), 0); (("atan2", 1975), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -133), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -132), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -131), 0), 100000000, 0, -130), 0), 100000000, 0, -129), (("caml_atan2_float", 2, 0, "atan2", [1; 1], 1)), (("src/float0.ml", 74, 2749, 2753), ("src/float0.ml", 75, 2823, 2850), 0), [(("unboxed", (("src/float0.ml", 75, 2823, 2830), ("src/float0.ml", 75, 2823, 2837), 0)), (0), (("src/float0.ml", 75, 2823, 2827), ("src/float0.ml", 75, 2823, 2838), 0)); (("noalloc", (("src/float0.ml", 75, 2823, 2842), ("src/float0.ml", 75, 2823, 2849), 0)), (0), (("src/float0.ml", 75, 2823, 2839), ("src/float0.ml", 75, 2823, 2850), 0))], Tag1 ("Base__Float0", 34)), 0); (("hypot", 1976), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -128), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -127), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -126), 0), 100000000, 0, -125), 0), 100000000, 0, -124), (("caml_hypot_float", 2, 0, "caml_hypot", [1; 1], 1)), (("src/float0.ml", 77, 2852, 2856), ("src/float0.ml", 78, 2931, 2958), 0), [(("unboxed", (("src/float0.ml", 78, 2931, 2938), ("src/float0.ml", 78, 2931, 2945), 0)), (0), (("src/float0.ml", 78, 2931, 2935), ("src/float0.ml", 78, 2931, 2946), 0)); (("noalloc", (("src/float0.ml", 78, 2931, 2950), ("src/float0.ml", 78, 2931, 2957), 0)), (0), (("src/float0.ml", 78, 2931, 2947), ("src/float0.ml", 78, 2931, 2958), 0))], Tag1 ("Base__Float0", 35)), 0); (("cosh", 1977), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -123), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -122), 0), 100000000, 0, -121), (("caml_cosh_float", 1, 0, "cosh", [1], 1)), (("src/float0.ml", 80, 2960, 2964), ("src/float0.ml", 80, 2960, 3045), 0), [(("unboxed", (("src/float0.ml", 80, 2960, 3025), ("src/float0.ml", 80, 2960, 3032), 0)), (0), (("src/float0.ml", 80, 2960, 3022), ("src/float0.ml", 80, 2960, 3033), 0)); (("noalloc", (("src/float0.ml", 80, 2960, 3037), ("src/float0.ml", 80, 2960, 3044), 0)), (0), (("src/float0.ml", 80, 2960, 3034), ("src/float0.ml", 80, 2960, 3045), 0))], Tag1 ("Base__Float0", 36)), 0); (("sinh", 1978), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -120), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -119), 0), 100000000, 0, -118), (("caml_sinh_float", 1, 0, "sinh", [1], 1)), (("src/float0.ml", 81, 3046, 3050), ("src/float0.ml", 81, 3046, 3131), 0), [(("unboxed", (("src/float0.ml", 81, 3046, 3111), ("src/float0.ml", 81, 3046, 3118), 0)), (0), (("src/float0.ml", 81, 3046, 3108), ("src/float0.ml", 81, 3046, 3119), 0)); (("noalloc", (("src/float0.ml", 81, 3046, 3123), ("src/float0.ml", 81, 3046, 3130), 0)), (0), (("src/float0.ml", 81, 3046, 3120), ("src/float0.ml", 81, 3046, 3131), 0))], Tag1 ("Base__Float0", 37)), 0); (("tanh", 1979), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -117), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -116), 0), 100000000, 0, -115), (("caml_tanh_float", 1, 0, "tanh", [1], 1)), (("src/float0.ml", 82, 3132, 3136), ("src/float0.ml", 82, 3132, 3217), 0), [(("unboxed", (("src/float0.ml", 82, 3132, 3197), ("src/float0.ml", 82, 3132, 3204), 0)), (0), (("src/float0.ml", 82, 3132, 3194), ("src/float0.ml", 82, 3132, 3205), 0)); (("noalloc", (("src/float0.ml", 82, 3132, 3209), ("src/float0.ml", 82, 3132, 3216), 0)), (0), (("src/float0.ml", 82, 3132, 3206), ("src/float0.ml", 82, 3132, 3217), 0))], Tag1 ("Base__Float0", 38)), 0); (("sqrt", 1980), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -114), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -113), 0), 100000000, 0, -112), (("caml_sqrt_float", 1, 0, "sqrt", [1], 1)), (("src/float0.ml", 83, 3218, 3222), ("src/float0.ml", 83, 3218, 3303), 0), [(("unboxed", (("src/float0.ml", 83, 3218, 3283), ("src/float0.ml", 83, 3218, 3290), 0)), (0), (("src/float0.ml", 83, 3218, 3280), ("src/float0.ml", 83, 3218, 3291), 0)); (("noalloc", (("src/float0.ml", 83, 3218, 3295), ("src/float0.ml", 83, 3218, 3302), 0)), (0), (("src/float0.ml", 83, 3218, 3292), ("src/float0.ml", 83, 3218, 3303), 0))], Tag1 ("Base__Float0", 39)), 0); (("exp", 1981), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -111), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -110), 0), 100000000, 0, -109), (("caml_exp_float", 1, 0, "exp", [1], 1)), (("src/float0.ml", 84, 3304, 3308), ("src/float0.ml", 84, 3304, 3386), 0), [(("unboxed", (("src/float0.ml", 84, 3304, 3366), ("src/float0.ml", 84, 3304, 3373), 0)), (0), (("src/float0.ml", 84, 3304, 3363), ("src/float0.ml", 84, 3304, 3374), 0)); (("noalloc", (("src/float0.ml", 84, 3304, 3378), ("src/float0.ml", 84, 3304, 3385), 0)), (0), (("src/float0.ml", 84, 3304, 3375), ("src/float0.ml", 84, 3304, 3386), 0))], Tag1 ("Base__Float0", 40)), 0); (("log", 1982), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -108), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -107), 0), 100000000, 0, -106), (("caml_log_float", 1, 0, "log", [1], 1)), (("src/float0.ml", 85, 3387, 3391), ("src/float0.ml", 85, 3387, 3469), 0), [(("unboxed", (("src/float0.ml", 85, 3387, 3449), ("src/float0.ml", 85, 3387, 3456), 0)), (0), (("src/float0.ml", 85, 3387, 3446), ("src/float0.ml", 85, 3387, 3457), 0)); (("noalloc", (("src/float0.ml", 85, 3387, 3461), ("src/float0.ml", 85, 3387, 3468), 0)), (0), (("src/float0.ml", 85, 3387, 3458), ("src/float0.ml", 85, 3387, 3469), 0))], Tag1 ("Base__Float0", 41)), 0); (("frexp", 1983), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -105), (Tag2 ([(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -103); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -104)]), 100000000, 0, -102), 0), 100000000, 0, -101), 0, (("src/float0.ml", 89, 3566, 3570), ("src/float0.ml", 89, 3566, 3575), 0), 0, Tag1 ("Base__Float0", 42)), 0); (("ldexp", 1984), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -100), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -99), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -98), 0), 100000000, 0, -97), 0), 100000000, 0, -96), 0, (("src/float0.ml", 90, 3584, 3588), ("src/float0.ml", 90, 3584, 3593), 0), 0, Tag1 ("Base__Float0", 43)), 0); (("is_nan", 1985), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -95), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -94), 0), 100000000, 0, -93), 0, (("src/float0.ml", 91, 3602, 3606), ("src/float0.ml", 91, 3602, 3612), 0), 0, Tag1 ("Base__Float0", 44)), 0); (("to_int64_preserve_order", 1986), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -92), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -91)], (0)), 100000000, 0, -90), 0), 100000000, 0, -89), 0, (("src/float0.ml", 104, 4179, 4183), ("src/float0.ml", 104, 4179, 4206), 0), 0, Tag1 ("Base__Float0", 46)), 0); (("to_int64_preserve_order_exn", 1987), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -88), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -87), 0), 100000000, 0, -86), 0, (("src/float0.ml", 115, 4427, 4431), ("src/float0.ml", 115, 4427, 4458), 0), 0, Tag1 ("Base__Float0", 48)), 0); (("of_int64_preserve_order", 1988), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__Import0")), "Stdlib"), "Int64"), "t"), 0, (0)), 100000000, 0, -85), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -84), 0), 100000000, 0, -83), 0, (("src/float0.ml", 117, 4509, 4513), ("src/float0.ml", 117, 4509, 4536), 0), 0, Tag1 ("Base__Float0", 50)), 0); (("one_ulp", 1989), ((Tag1 (0, (Tag8 (([("Down", Tag1 (1, 0, 0, (1))); ("Up", Tag1 (1, 0, 0, (1)))], ((0), 100000000, 0, -82), 1, 0, 0)), 100000000, 0, -81), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -80), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -79), 0), 100000000, 0, -78), 0), 100000000, 0, -77), 0, (("src/float0.ml", 123, 4692, 4696), ("src/float0.ml", 123, 4692, 4703), 0), 0, Tag1 ("Base__Float0", 52)), 0); (("upper_bound_for_int", 1990), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -76), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -75), 0), 100000000, 0, -74), 0, (("src/float0.ml", 156, 5847, 5851), ("src/float0.ml", 156, 5847, 5870), 0), 0, Tag1 ("Base__Float0", 56)), 0); (("is_x_minus_one_exact", 1991), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -73), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -72), 0), 100000000, 0, -71), 0, (("src/float0.ml", 161, 5964, 5968), ("src/float0.ml", 161, 5964, 5988), 0), 0, Tag1 ("Base__Float0", 59)), 0); (("lower_bound_for_int", 1992), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -70), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -69), 0), 100000000, 0, -68), 0, (("src/float0.ml", 172, 6465, 6469), ("src/float0.ml", 172, 6465, 6488), 0), 0, Tag1 ("Base__Float0", 61)), 0); (("clamp_unchecked", 1993), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -67), (Tag1 (("min"), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -66), (Tag1 (("max"), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -66), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -66), 0), 100000000, 0, -65), 0), 100000000, 0, -64), 0), 100000000, 0, -63), 0, (("src/float0.ml", 192, 7310, 7314), ("src/float0.ml", 192, 7310, 7329), 0), 0, Tag1 ("Base__Float0", 65)), 0); (("box", 1994), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -62), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -61), 0), 100000000, 0, -60), 0, (("src/float0.ml", 196, 7412, 7416), ("src/float0.ml", 196, 7412, 7419), 0), 0, Tag1 ("Base__Float0", 69)), 0); (("<", 1995), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -59), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -58), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -57), 0), 100000000, 0, -56), 0), 100000000, 0, -55), 0, (("src/import0.ml", 241, 9314, 9320), ("src/import0.ml", 241, 9314, 9325), 0), 0, Tag1 ("Base__Import0", 254)), 0); (("<=", 1996), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -54), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -53), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -52), 0), 100000000, 0, -51), 0), 100000000, 0, -50), 0, (("src/import0.ml", 242, 9357, 9363), ("src/import0.ml", 242, 9357, 9369), 0), 0, Tag1 ("Base__Import0", 257)), 0); (("<>", 1997), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -49), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -48), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -47), 0), 100000000, 0, -46), 0), 100000000, 0, -45), 0, (("src/import0.ml", 243, 9402, 9408), ("src/import0.ml", 243, 9402, 9414), 0), 0, Tag1 ("Base__Import0", 260)), 0); (("=", 1998), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -44), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -43), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -42), 0), 100000000, 0, -41), 0), 100000000, 0, -40), 0, (("src/import0.ml", 244, 9447, 9453), ("src/import0.ml", 244, 9447, 9458), 0), 0, Tag1 ("Base__Import0", 263)), 0); ((">", 1999), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -39), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -38), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -37), 0), 100000000, 0, -36), 0), 100000000, 0, -35), 0, (("src/import0.ml", 245, 9490, 9496), ("src/import0.ml", 245, 9490, 9501), 0), 0, Tag1 ("Base__Import0", 266)), 0); ((">=", 2000), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -34), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -33), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -32), 0), 100000000, 0, -31), 0), 100000000, 0, -30), 0, (("src/import0.ml", 246, 9533, 9539), ("src/import0.ml", 246, 9533, 9545), 0), 0, Tag1 ("Base__Import0", 269)), 0); (("ascending", 2001), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -29), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -28), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -27), 0), 100000000, 0, -26), 0), 100000000, 0, -25), 0, (("src/import0.ml", 247, 9578, 9584), ("src/import0.ml", 247, 9578, 9593), 0), 0, Tag1 ("Base__Import0", 272)), 0); (("descending", 2002), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -24), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -23), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0), 100000000, 0, -20), 0, (("src/import0.ml", 248, 9629, 9635), ("src/import0.ml", 248, 9629, 9645), 0), 0, Tag1 ("Base__Import0", 275)), 0); (("compare", 2003), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -19), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -18), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -17), 0), 100000000, 0, -16), 0), 100000000, 0, -15), 0, (("src/import0.ml", 249, 9682, 9688), ("src/import0.ml", 249, 9682, 9695), 0), 0, Tag1 ("Base__Import0", 278)), 0); (("equal", 2004), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -14), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -13), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0), 100000000, 0, -10), 0, (("src/import0.ml", 250, 9729, 9735), ("src/import0.ml", 250, 9729, 9740), 0), 0, Tag1 ("Base__Import0", 281)), 0); (("max", 2005), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -9), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -8), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -8), 0), 100000000, 0, -7), 0), 100000000, 0, -6), 0, (("src/import0.ml", 251, 9772, 9778), ("src/import0.ml", 251, 9772, 9781), 0), 0, Tag1 ("Base__Import0", 284)), 0); (("min", 2006), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -5), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -4), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/import0.ml", 252, 9824, 9830), ("src/import0.ml", 252, 9824, 9833), 0), 0, Tag1 ("Base__Import0", 287)), 0)], "Base__Float0", [("Base__Float0", ("\200\237\219\145\153\024\246\232\226\140i|\201\251K\240")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__StringLabels", ("\134F\024\226\216Is#\223\230\234\169Z\206Gc")); ("Stdlib__StdLabels", (".\193\n\229\139\017\212C-ZA\\kz-\128")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Printf", ("\215<\139]\021\142\224E\245m\198qc(W\229")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__MoreLabels", ("\248\232\248\254`<\230\241\161U\193U\1466J\238")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__ListLabels", ("*\194\012\191\020%\170\249m\002\180\178hk\205\220")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Float", ("\233'\145d\227\138\212\186=\190\184\244\206L5'")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shadow_stdlib", ("\219zi\164\203\158e)\232\221\196\168\138x\142\018")); ("Sexplib0__Sexpable", ("\251${\207(\249/z\242\255\250^\141\156\210e")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv_error", ("kzv!\151~\198P\000\165\176d\007\251p\232")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Base_internalhash_types", ("0\148#2\226\223\018\135\173>!\020\237\017\255\149")); ("Base__T", ("+t\159\169\027\152\205\235\003\237\133\177\024\n6'")); ("Base__Sys0", ("\206z\231\154s\\\136\2364\131\005\014\031\152m3")); ("Base__Stringable", ("\170\025\162\136\234\162\n\161\1491>\145\210@\237t")); ("Base__String0", ("\212\221L\220\245\255\162P\228\224\189\216\135H\149O")); ("Base__Source_code_position0", ("_\003P6\254\029\206\005\130\136\180\019\145\230\000M")); ("Base__Sexpable", ("\155?\169\178\246\242*\232\206\018Y\174\203h\217i")); ("Base__Sexp", ("\154\187\171&\209=\153[\236\250!U\174`\190T")); ("Base__Result", ("\204|\215\173FMa\2511<&\215T\194$\228")); ("Base__Printf", ("\000\196c,\214\127\226\174\220\190\253z!\242\028\250")); ("Base__Ppx_hash_lib", ("\199\141\178\193\006\209L\007^\020(\131\224sn8")); ("Base__Ppx_compare_lib", ("\243\186~\233\228\199Ah\181.\223\004e\231\129S")); ("Base__Poly0", ("\230;\143\234\255.H\132KOe7\155\\\023f")); ("Base__Option", ("\242!\176\142\168\247\163Jg\0254\180\224\\A\210")); ("Base__Monad_intf", ("\208\203\163\152\184O\130?\012:\168\247}\018\253\155")); ("Base__Monad", ("!\244\168\2352=\137Lm\219\129K\216\199\145\\")); ("Base__Lazy", ("@`\165\196 \235)\136ANe:p\169$\185")); ("Base__Invariant_intf", ("\213\204\238\235\236[\198\145\028\2392\015\243\177S\249")); ("Base__Invariant", ("\135\153\136\\\129SD\228\202l\255\152\139\253\015\201")); ("Base__Int0", ("N\1310\012\227\254\000\255_\222!\018\016\003\1779")); ("Base__Info_intf", ("\184\209'\173\251\219\167X|v\188]\190o5X")); ("Base__Info", ("-\011\149\203\248\030\2301\1907\1630\189\128\209\170")); ("Base__Import0", ("\156\129U\197Y[\\\153\017Ho\203\173\204\220\020")); ("Base__Import", ("\014\187\247\141\187\181\142g\176:s_,\181\219\209")); ("Base__Hash_intf", ("h\004P\218\1531G\127\212\208A\024\140\164iq")); ("Base__Hash", ("\206Rc\194\234{s3\248\165\024\162\203{\206\206")); ("Base__Globalize", ("<\243w~.\180\196t\159\193\174[\227\139\215G")); ("Base__Formatter", ("\193\149\030\140\154\1505b\162a`%\243\185'%")); ("Base__Field", ("8In\234X\202\188G\186\208$\192\175\136\214v")); ("Base__Error", ("\199\218\231n\155/\159\156\146\247\148t\237\003\t\153")); ("Base__Equal", ("\193\217Z\127he\141N\000\1447\030\236%\131\b")); ("Base__Either0", ("!9-\011n\2077eZ\212\031c\227\029\206\t")); ("Base__Container_intf", ("\170vo*\208\209\141\219\196\168\236l\016\246\012c")); ("Base__Container", ("\191|>_\153W\235M\180uKz\214w`q")); ("Base__Comparator", ("\002\135z7b\025&\207\t\188\239&U3R\167")); ("Base__Bool0", ("\177f\254p\023\143&\239\020\136\206\242~\018F\251")); ("Base__Applicative_intf", ("J\176\203\159\235N(\235\027\232\198+\224\205*A")); ("Base__Applicative", ("\157\024\176\241a\165\204\133\003s3\214\007\131\244\n")); ("Base__", ("p\252\007\139\128\163W\025+\0225\001\246|P\158"))], [(0)])

val min : float -> float -> float

type function_label = string
type ustructured_constant =
    Uconst_float of float
  | Uconst_int32 of int32
  | Uconst_int64 of int64
  | Uconst_nativeint of nativeint
  | Uconst_block of int * uconstant list
  | Uconst_float_array of float list
  | Uconst_string of string
  | Uconst_closure of ufunction list * string * uconstant list
and uconstant =
    Uconst_ref of string * ustructured_constant option
  | Uconst_int of int
and uphantom_defining_expr =
    Uphantom_const of uconstant
  | Uphantom_var of Backend_var.t
  | Uphantom_offset_var of { var : Backend_var.t; offset_in_words : int; }
  | Uphantom_read_field of { var : Backend_var.t; field : int; }
  | Uphantom_read_symbol_field of { sym : string; field : int; }
  | Uphantom_block of { tag : int; fields : Backend_var.t list; }
and ulambda =
    Uvar of Backend_var.t
  | Uconst of uconstant
  | Udirect_apply of function_label * ulambda list * Debuginfo.t
  | Ugeneric_apply of ulambda * ulambda list * Debuginfo.t
  | Uclosure of ufunction list * ulambda list
  | Uoffset of ulambda * int
  | Ulet of Asttypes.mutable_flag * Lambda.value_kind *
      Backend_var.With_provenance.t * ulambda * ulambda
  | Uphantom_let of Backend_var.With_provenance.t *
      uphantom_defining_expr option * ulambda
  | Uletrec of (Backend_var.With_provenance.t * ulambda) list * ulambda
  | Uprim of Clambda_primitives.primitive * ulambda list * Debuginfo.t
  | Uswitch of ulambda * ulambda_switch * Debuginfo.t
  | Ustringswitch of ulambda * (string * ulambda) list * ulambda option
  | Ustaticfail of int * ulambda list
  | Ucatch of int *
      (Backend_var.With_provenance.t * Lambda.value_kind) list * ulambda *
      ulambda
  | Utrywith of ulambda * Backend_var.With_provenance.t * ulambda
  | Uifthenelse of ulambda * ulambda * ulambda
  | Usequence of ulambda * ulambda
  | Uwhile of ulambda * ulambda
  | Ufor of Backend_var.With_provenance.t * ulambda * ulambda *
      Asttypes.direction_flag * ulambda
  | Uassign of Backend_var.t * ulambda
  | Usend of Lambda.meth_kind * ulambda * ulambda * ulambda list *
      Debuginfo.t
  | Uunreachable
and ufunction = {
  label : function_label;
  arity : int;
  params : (Backend_var.With_provenance.t * Lambda.value_kind) list;
  return : Lambda.value_kind;
  body : ulambda;
  dbg : Debuginfo.t;
  env : Backend_var.t option;
  poll : Lambda.poll_attribute;
}
and ulambda_switch = {
  us_index_consts : int array;
  us_actions_consts : ulambda array;
  us_index_blocks : int array;
  us_actions_blocks : ulambda array;
}
type function_description = {
  fun_label : function_label;
  fun_arity : int;
  mutable fun_closed : bool;
  mutable fun_inline : (Backend_var.With_provenance.t list * ulambda) option;
  mutable fun_float_const_prop : bool;
  fun_poll : Lambda.poll_attribute;
}
type value_approximation =
    Value_closure of function_description * value_approximation
  | Value_tuple of value_approximation array
  | Value_unknown
  | Value_const of uconstant
  | Value_global_field of string * int
val compare_structured_constants :
  ustructured_constant -> ustructured_constant -> int
val compare_constants : uconstant -> uconstant -> int
type usymbol_provenance = {
  original_idents : Ident.t list;
  module_path : Path.t;
}
type uconstant_block_field =
    Uconst_field_ref of string
  | Uconst_field_int of int
type preallocated_block = {
  symbol : string;
  exported : bool;
  tag : int;
  fields : uconstant_block_field option list;
  provenance : usymbol_provenance option;
}
type preallocated_constant = {
  symbol : string;
  exported : bool;
  definition : ustructured_constant;
  provenance : usymbol_provenance option;
}
type with_constants =
    ("DEBUG:rule", [Tag1 (("function_label", 594), (0, 0, 0, 1, ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -180)), 0, 0, 0, 0, (("middle_end/clambda.mli", 22, 1211, 1211), ("middle_end/clambda.mli", 22, 1211, 1239), 0), 0, 0, 0, Tag1 ("Clambda", 3)), 1, 0); Tag1 (("ustructured_constant", 595), (0, 0, Tag1 ([(("Uconst_float", 367), ([(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -165)]), 0, (("middle_end/clambda.mli", 25, 1269, 1271), ("middle_end/clambda.mli", 25, 1269, 1294), 0), 0, Tag1 ("Clambda", 10)); (("Uconst_int32", 368), ([(Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -166)]), 0, (("middle_end/clambda.mli", 26, 1295, 1297), ("middle_end/clambda.mli", 26, 1295, 1320), 0), 0, Tag1 ("Clambda", 11)); (("Uconst_int64", 369), ([(Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -167)]), 0, (("middle_end/clambda.mli", 27, 1321, 1323), ("middle_end/clambda.mli", 27, 1321, 1346), 0), 0, Tag1 ("Clambda", 12)); (("Uconst_nativeint", 370), ([(Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -168)]), 0, (("middle_end/clambda.mli", 28, 1347, 1349), ("middle_end/clambda.mli", 28, 1347, 1380), 0), 0, Tag1 ("Clambda", 13)); (("Uconst_block", 371), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -169); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("uconstant", 596)), 0, (0)), 100000000, 0, -171)], (0)), 100000000, 0, -170)]), 0, (("middle_end/clambda.mli", 29, 1381, 1383), ("middle_end/clambda.mli", 29, 1381, 1421), 0), 0, Tag1 ("Clambda", 14)); (("Uconst_float_array", 372), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -173)], (0)), 100000000, 0, -172)]), 0, (("middle_end/clambda.mli", 30, 1422, 1424), ("middle_end/clambda.mli", 30, 1422, 1458), 0), 0, Tag1 ("Clambda", 15)); (("Uconst_string", 373), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -174)]), 0, (("middle_end/clambda.mli", 31, 1459, 1461), ("middle_end/clambda.mli", 31, 1459, 1486), 0), 0, Tag1 ("Clambda", 16)); (("Uconst_closure", 374), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("ufunction", 599)), 0, (0)), 100000000, 0, -176)], (0)), 100000000, 0, -175); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -177); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("uconstant", 596)), 0, (0)), 100000000, 0, -179)], (0)), 100000000, 0, -178)]), 0, (("middle_end/clambda.mli", 32, 1487, 1489), ("middle_end/clambda.mli", 32, 1487, 1549), 0), 0, Tag1 ("Clambda", 17))], 0), 1, 0, 0, 0, 0, 0, (("middle_end/clambda.mli", 24, 1241, 1241), ("middle_end/clambda.mli", 32, 1487, 1549), 0), 0, 0, 0, Tag1 ("Clambda", 4)), 1, 0); Tag1 (("uconstant", 596), (0, 0, Tag1 ([(("Uconst_ref", 375), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -161); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("ustructured_constant", 595)), 0, (0)), 100000000, 0, -163)], (0)), 100000000, 0, -162)]), 0, (("middle_end/clambda.mli", 35, 1567, 1569), ("middle_end/clambda.mli", 35, 1567, 1621), 0), 0, Tag1 ("Clambda", 18)); (("Uconst_int", 376), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -164)]), 0, (("middle_end/clambda.mli", 36, 1622, 1624), ("middle_end/clambda.mli", 36, 1622, 1643), 0), 0, Tag1 ("Clambda", 19))], 0), 1, 0, 0, 0, 0, 0, (("middle_end/clambda.mli", 34, 1551, 1551), ("middle_end/clambda.mli", 36, 1622, 1643), 0), 0, 0, 0, Tag1 ("Clambda", 5)), 2, 0); Tag1 (("uphantom_defining_expr", 597), (0, 0, Tag1 ([(("Uphantom_const", 377), ([(Tag3 ((("uconstant", 596)), 0, (0)), 100000000, 0, -150)]), 0, (("middle_end/clambda.mli", 39, 1674, 1676), ("middle_end/clambda.mli", 39, 1674, 1705), 0), 0, Tag1 ("Clambda", 20)); (("Uphantom_var", 378), ([(Tag3 (Tag1 ((Tag2 ("Backend_var")), "t"), 0, (0)), 100000000, 0, -151)]), 0, (("middle_end/clambda.mli", 41, 1761, 1763), ("middle_end/clambda.mli", 41, 1761, 1794), 0), 0, Tag1 ("Clambda", 21)); (("Uphantom_offset_var", 421), Tag1 ([(("var", 422), 0, (Tag3 (Tag1 ((Tag2 ("Backend_var")), "t"), 0, (0)), 100000000, 0, -152), (("middle_end/clambda.mli", 43, 1869, 1898), ("middle_end/clambda.mli", 43, 1869, 1918), 0), 0, Tag1 ("Clambda", 22)); (("offset_in_words", 423), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -153), (("middle_end/clambda.mli", 43, 1869, 1919), ("middle_end/clambda.mli", 43, 1869, 1941), 0), 0, Tag1 ("Clambda", 23))]), 0, (("middle_end/clambda.mli", 43, 1869, 1871), ("middle_end/clambda.mli", 43, 1869, 1943), 0), 0, Tag1 ("Clambda", 24)); (("Uphantom_read_field", 424), Tag1 ([(("var", 425), 0, (Tag3 (Tag1 ((Tag2 ("Backend_var")), "t"), 0, (0)), 100000000, 0, -154), (("middle_end/clambda.mli", 46, 2095, 2124), ("middle_end/clambda.mli", 46, 2095, 2144), 0), 0, Tag1 ("Clambda", 25)); (("field", 426), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -155), (("middle_end/clambda.mli", 46, 2095, 2145), ("middle_end/clambda.mli", 46, 2095, 2157), 0), 0, Tag1 ("Clambda", 26))]), 0, (("middle_end/clambda.mli", 46, 2095, 2097), ("middle_end/clambda.mli", 46, 2095, 2159), 0), 0, Tag1 ("Clambda", 27)); (("Uphantom_read_symbol_field", 427), Tag1 ([(("sym", 428), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -156), (("middle_end/clambda.mli", 50, 2335, 2371), ("middle_end/clambda.mli", 50, 2335, 2384), 0), 0, Tag1 ("Clambda", 28)); (("field", 429), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -157), (("middle_end/clambda.mli", 50, 2335, 2385), ("middle_end/clambda.mli", 50, 2335, 2397), 0), 0, Tag1 ("Clambda", 29))]), 0, (("middle_end/clambda.mli", 50, 2335, 2337), ("middle_end/clambda.mli", 50, 2335, 2399), 0), 0, Tag1 ("Clambda", 30)); (("Uphantom_block", 430), Tag1 ([(("tag", 431), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -158), (("middle_end/clambda.mli", 53, 2493, 2517), ("middle_end/clambda.mli", 53, 2493, 2527), 0), 0, Tag1 ("Clambda", 31)); (("fields", 432), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Backend_var")), "t"), 0, (0)), 100000000, 0, -160)], (0)), 100000000, 0, -159), (("middle_end/clambda.mli", 53, 2493, 2528), ("middle_end/clambda.mli", 53, 2493, 2556), 0), 0, Tag1 ("Clambda", 32))]), 0, (("middle_end/clambda.mli", 53, 2493, 2495), ("middle_end/clambda.mli", 53, 2493, 2558), 0), 0, Tag1 ("Clambda", 33))], 0), 1, 0, 0, 0, 0, 0, (("middle_end/clambda.mli", 38, 1645, 1645), ("middle_end/clambda.mli", 53, 2493, 2558), 0), 0, 0, 0, Tag1 ("Clambda", 6)), 2, 0); Tag1 (("ulambda", 598), (0, 0, Tag1 ([(("Uvar", 433), ([(Tag3 (Tag1 ((Tag2 ("Backend_var")), "t"), 0, (0)), 100000000, 0, -73)]), 0, (("middle_end/clambda.mli", 58, 2664, 2668), ("middle_end/clambda.mli", 58, 2664, 2689), 0), 0, Tag1 ("Clambda", 34)); (("Uconst", 434), ([(Tag3 ((("uconstant", 596)), 0, (0)), 100000000, 0, -74)]), 0, (("middle_end/clambda.mli", 59, 2690, 2692), ("middle_end/clambda.mli", 59, 2690, 2713), 0), 0, Tag1 ("Clambda", 35)); (("Udirect_apply", 435), ([(Tag3 ((("function_label", 594)), 0, (0)), 100000000, 0, -75); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("ulambda", 598)), 0, (0)), 100000000, 0, -77)], (0)), 100000000, 0, -76); (Tag3 (Tag1 ((Tag2 ("Debuginfo")), "t"), 0, (0)), 100000000, 0, -78)]), 0, (("middle_end/clambda.mli", 60, 2714, 2716), ("middle_end/clambda.mli", 60, 2714, 2778), 0), 0, Tag1 ("Clambda", 36)); (("Ugeneric_apply", 450), ([(Tag3 ((("ulambda", 598)), 0, (0)), 100000000, 0, -79); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("ulambda", 598)), 0, (0)), 100000000, 0, -81)], (0)), 100000000, 0, -80); (Tag3 (Tag1 ((Tag2 ("Debuginfo")), "t"), 0, (0)), 100000000, 0, -82)]), 0, (("middle_end/clambda.mli", 61, 2779, 2781), ("middle_end/clambda.mli", 61, 2779, 2837), 0), 0, Tag1 ("Clambda", 37)); (("Uclosure", 451), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("ufunction", 599)), 0, (0)), 100000000, 0, -84)], (0)), 100000000, 0, -83); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("ulambda", 598)), 0, (0)), 100000000, 0, -86)], (0)), 100000000, 0, -85)]), 0, (("middle_end/clambda.mli", 62, 2838, 2840), ("middle_end/clambda.mli", 62, 2838, 2883), 0), 0, Tag1 ("Clambda", 38)); (("Uoffset", 452), ([(Tag3 ((("ulambda", 598)), 0, (0)), 100000000, 0, -87); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -88)]), 0, (("middle_end/clambda.mli", 63, 2884, 2886), ("middle_end/clambda.mli", 63, 2884, 2912), 0), 0, Tag1 ("Clambda", 39)); (("Ulet", 453), ([(Tag3 (Tag1 ((Tag2 ("Asttypes")), "mutable_flag"), 0, (0)), 100000000, 0, -89); (Tag3 (Tag1 ((Tag2 ("Lambda")), "value_kind"), 0, (0)), 100000000, 0, -90); (Tag3 (Tag1 (Tag1 ((Tag2 ("Backend_var")), "With_provenance"), "t"), 0, (0)), 100000000, 0, -91); (Tag3 ((("ulambda", 598)), 0, (0)), 100000000, 0, -92); (Tag3 ((("ulambda", 598)), 0, (0)), 100000000, 0, -93)]), 0, (("middle_end/clambda.mli", 64, 2913, 2915), ("middle_end/clambda.mli", 65, 2983, 3008), 0), 0, Tag1 ("Clambda", 40)); (("Uphantom_let", 461), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Backend_var")), "With_provenance"), "t"), 0, (0)), 100000000, 0, -94); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("uphantom_defining_expr", 597)), 0, (0)), 100000000, 0, -96)], (0)), 100000000, 0, -95); (Tag3 ((("ulambda", 598)), 0, (0)), 100000000, 0, -97)]), 0, (("middle_end/clambda.mli", 66, 3009, 3011), ("middle_end/clambda.mli", 67, 3059, 3106), 0), 0, Tag1 ("Clambda", 41)); (("Uletrec", 462), ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Backend_var")), "With_provenance"), "t"), 0, (0)), 100000000, 0, -100); (Tag3 ((("ulambda", 598)), 0, (0)), 100000000, 0, -101)]), 100000000, 0, -99)], (0)), 100000000, 0, -98); (Tag3 ((("ulambda", 598)), 0, (0)), 100000000, 0, -102)]), 0, (("middle_end/clambda.mli", 68, 3107, 3109), ("middle_end/clambda.mli", 68, 3107, 3178), 0), 0, Tag1 ("Clambda", 42)); (("Uprim", 463), ([(Tag3 (Tag1 ((Tag2 ("Clambda_primitives")), "primitive"), 0, (0)), 100000000, 0, -103); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("ulambda", 598)), 0, (0)), 100000000, 0, -105)], (0)), 100000000, 0, -104); (Tag3 (Tag1 ((Tag2 ("Debuginfo")), "t"), 0, (0)), 100000000, 0, -106)]), 0, (("middle_end/clambda.mli", 69, 3179, 3181), ("middle_end/clambda.mli", 69, 3179, 3249), 0), 0, Tag1 ("Clambda", 46)); (("Uswitch", 481), ([(Tag3 ((("ulambda", 598)), 0, (0)), 100000000, 0, -107); (Tag3 ((("ulambda_switch", 600)), 0, (0)), 100000000, 0, -108); (Tag3 (Tag1 ((Tag2 ("Debuginfo")), "t"), 0, (0)), 100000000, 0, -109)]), 0, (("middle_end/clambda.mli", 70, 3250, 3252), ("middle_end/clambda.mli", 70, 3250, 3303), 0), 0, Tag1 ("Clambda", 47)); (("Ustringswitch", 482), ([(Tag3 ((("ulambda", 598)), 0, (0)), 100000000, 0, -110); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -113); (Tag3 ((("ulambda", 598)), 0, (0)), 100000000, 0, -114)]), 100000000, 0, -112)], (0)), 100000000, 0, -111); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("ulambda", 598)), 0, (0)), 100000000, 0, -116)], (0)), 100000000, 0, -115)]), 0, (("middle_end/clambda.mli", 71, 3304, 3306), ("middle_end/clambda.mli", 71, 3304, 3375), 0), 0, Tag1 ("Clambda", 48)); (("Ustaticfail", 483), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -117); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("ulambda", 598)), 0, (0)), 100000000, 0, -119)], (0)), 100000000, 0, -118)]), 0, (("middle_end/clambda.mli", 72, 3376, 3378), ("middle_end/clambda.mli", 72, 3376, 3413), 0), 0, Tag1 ("Clambda", 49)); (("Ucatch", 484), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -120); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Backend_var")), "With_provenance"), "t"), 0, (0)), 100000000, 0, -123); (Tag3 (Tag1 ((Tag2 ("Lambda")), "value_kind"), 0, (0)), 100000000, 0, -124)]), 100000000, 0, -122)], (0)), 100000000, 0, -121); (Tag3 ((("ulambda", 598)), 0, (0)), 100000000, 0, -125); (Tag3 ((("ulambda", 598)), 0, (0)), 100000000, 0, -126)]), 0, (("middle_end/clambda.mli", 73, 3414, 3416), ("middle_end/clambda.mli", 77, 3514, 3527), 0), 0, Tag1 ("Clambda", 50)); (("Utrywith", 485), ([(Tag3 ((("ulambda", 598)), 0, (0)), 100000000, 0, -127); (Tag3 (Tag1 (Tag1 ((Tag2 ("Backend_var")), "With_provenance"), "t"), 0, (0)), 100000000, 0, -128); (Tag3 ((("ulambda", 598)), 0, (0)), 100000000, 0, -129)]), 0, (("middle_end/clambda.mli", 78, 3528, 3530), ("middle_end/clambda.mli", 78, 3528, 3593), 0), 0, Tag1 ("Clambda", 51)); (("Uifthenelse", 486), ([(Tag3 ((("ulambda", 598)), 0, (0)), 100000000, 0, -130); (Tag3 ((("ulambda", 598)), 0, (0)), 100000000, 0, -131); (Tag3 ((("ulambda", 598)), 0, (0)), 100000000, 0, -132)]), 0, (("middle_end/clambda.mli", 79, 3594, 3596), ("middle_end/clambda.mli", 79, 3594, 3640), 0), 0, Tag1 ("Clambda", 52)); (("Usequence", 487), ([(Tag3 ((("ulambda", 598)), 0, (0)), 100000000, 0, -133); (Tag3 ((("ulambda", 598)), 0, (0)), 100000000, 0, -134)]), 0, (("middle_end/clambda.mli", 80, 3641, 3643), ("middle_end/clambda.mli", 80, 3641, 3675), 0), 0, Tag1 ("Clambda", 53)); (("Uwhile", 488), ([(Tag3 ((("ulambda", 598)), 0, (0)), 100000000, 0, -135); (Tag3 ((("ulambda", 598)), 0, (0)), 100000000, 0, -136)]), 0, (("middle_end/clambda.mli", 81, 3676, 3678), ("middle_end/clambda.mli", 81, 3676, 3707), 0), 0, Tag1 ("Clambda", 54)); (("Ufor", 489), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Backend_var")), "With_provenance"), "t"), 0, (0)), 100000000, 0, -137); (Tag3 ((("ulambda", 598)), 0, (0)), 100000000, 0, -138); (Tag3 ((("ulambda", 598)), 0, (0)), 100000000, 0, -139); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "direction_flag"), 0, (0)), 100000000, 0, -140); (Tag3 ((("ulambda", 598)), 0, (0)), 100000000, 0, -141)]), 0, (("middle_end/clambda.mli", 82, 3708, 3710), ("middle_end/clambda.mli", 83, 3770, 3802), 0), 0, Tag1 ("Clambda", 55)); (("Uassign", 490), ([(Tag3 (Tag1 ((Tag2 ("Backend_var")), "t"), 0, (0)), 100000000, 0, -142); (Tag3 ((("ulambda", 598)), 0, (0)), 100000000, 0, -143)]), 0, (("middle_end/clambda.mli", 84, 3803, 3805), ("middle_end/clambda.mli", 84, 3803, 3841), 0), 0, Tag1 ("Clambda", 56)); (("Usend", 491), ([(Tag3 (Tag1 ((Tag2 ("Lambda")), "meth_kind"), 0, (0)), 100000000, 0, -144); (Tag3 ((("ulambda", 598)), 0, (0)), 100000000, 0, -145); (Tag3 ((("ulambda", 598)), 0, (0)), 100000000, 0, -146); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("ulambda", 598)), 0, (0)), 100000000, 0, -148)], (0)), 100000000, 0, -147); (Tag3 (Tag1 ((Tag2 ("Debuginfo")), "t"), 0, (0)), 100000000, 0, -149)]), 0, (("middle_end/clambda.mli", 85, 3842, 3844), ("middle_end/clambda.mli", 85, 3842, 3913), 0), 0, Tag1 ("Clambda", 57)); (("Uunreachable", 492), (0), 0, (("middle_end/clambda.mli", 86, 3914, 3916), ("middle_end/clambda.mli", 86, 3914, 3930), 0), 0, Tag1 ("Clambda", 58))], 0), 1, 0, 0, 0, 0, 0, (("middle_end/clambda.mli", 57, 2650, 2650), ("middle_end/clambda.mli", 86, 3914, 3930), 0), 0, 0, 0, Tag1 ("Clambda", 7)), 2, 0); Tag1 (("ufunction", 599), (0, 0, [[(("label", 493), 0, (Tag3 ((("function_label", 594)), 0, (0)), 100000000, 0, -61), (("middle_end/clambda.mli", 89, 3950, 3952), ("middle_end/clambda.mli", 89, 3950, 3976), 0), 0, Tag1 ("Clambda", 59)); (("arity", 494), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -62), (("middle_end/clambda.mli", 90, 3977, 3979), ("middle_end/clambda.mli", 90, 3977, 3992), 0), 0, Tag1 ("Clambda", 60)); (("params", 495), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Backend_var")), "With_provenance"), "t"), 0, (0)), 100000000, 0, -65); (Tag3 (Tag1 ((Tag2 ("Lambda")), "value_kind"), 0, (0)), 100000000, 0, -66)]), 100000000, 0, -64)], (0)), 100000000, 0, -63), (("middle_end/clambda.mli", 91, 3993, 3995), ("middle_end/clambda.mli", 91, 3993, 4054), 0), 0, Tag1 ("Clambda", 61)); (("return", 496), 0, (Tag3 (Tag1 ((Tag2 ("Lambda")), "value_kind"), 0, (0)), 100000000, 0, -67), (("middle_end/clambda.mli", 92, 4055, 4057), ("middle_end/clambda.mli", 92, 4055, 4077), 0), 0, Tag1 ("Clambda", 62)); (("body", 497), 0, (Tag3 ((("ulambda", 598)), 0, (0)), 100000000, 0, -68), (("middle_end/clambda.mli", 93, 4078, 4080), ("middle_end/clambda.mli", 93, 4078, 4097), 0), 0, Tag1 ("Clambda", 63)); (("dbg", 498), 0, (Tag3 (Tag1 ((Tag2 ("Debuginfo")), "t"), 0, (0)), 100000000, 0, -69), (("middle_end/clambda.mli", 94, 4098, 4100), ("middle_end/clambda.mli", 94, 4098, 4121), 0), 0, Tag1 ("Clambda", 64)); (("env", 499), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Backend_var")), "t"), 0, (0)), 100000000, 0, -71)], (0)), 100000000, 0, -70), (("middle_end/clambda.mli", 95, 4122, 4124), ("middle_end/clambda.mli", 95, 4122, 4154), 0), 0, Tag1 ("Clambda", 65)); (("poll", 500), 0, (Tag3 (Tag1 ((Tag2 ("Lambda")), "poll_attribute"), 0, (0)), 100000000, 0, -72), (("middle_end/clambda.mli", 96, 4155, 4157), ("middle_end/clambda.mli", 96, 4155, 4181), 0), 0, Tag1 ("Clambda", 66))]], 1, 0, 0, 0, 0, 0, (("middle_end/clambda.mli", 88, 3932, 3932), ("middle_end/clambda.mli", 97, 4182, 4183), 0), 0, 0, 0, Tag1 ("Clambda", 8)), 2, 0); Tag1 (("ulambda_switch", 600), (0, 0, [[(("us_index_consts", 501), 0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -54)], (0)), 100000000, 0, -53), (("middle_end/clambda.mli", 100, 4206, 4210), ("middle_end/clambda.mli", 100, 4206, 4237), 0), 0, Tag1 ("Clambda", 67)); (("us_actions_consts", 502), 0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("ulambda", 598)), 0, (0)), 100000000, 0, -56)], (0)), 100000000, 0, -55), (("middle_end/clambda.mli", 101, 4238, 4242), ("middle_end/clambda.mli", 101, 4238, 4275), 0), 0, Tag1 ("Clambda", 68)); (("us_index_blocks", 503), 0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -58)], (0)), 100000000, 0, -57), (("middle_end/clambda.mli", 102, 4276, 4280), ("middle_end/clambda.mli", 102, 4276, 4307), 0), 0, Tag1 ("Clambda", 69)); (("us_actions_blocks", 504), 0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("ulambda", 598)), 0, (0)), 100000000, 0, -60)], (0)), 100000000, 0, -59), (("middle_end/clambda.mli", 103, 4308, 4312), ("middle_end/clambda.mli", 103, 4308, 4344), 0), 0, Tag1 ("Clambda", 70))]], 1, 0, 0, 0, 0, 0, (("middle_end/clambda.mli", 99, 4185, 4185), ("middle_end/clambda.mli", 103, 4308, 4345), 0), 0, 0, 0, Tag1 ("Clambda", 9)), 2, 0); Tag1 (("function_description", 601), (0, 0, [[(("fun_label", 545), 0, (Tag3 ((("function_label", 594)), 0, (0)), 100000000, 0, -43), (("middle_end/clambda.mli", 108, 4413, 4417), ("middle_end/clambda.mli", 108, 4413, 4443), 0), 0, Tag1 ("Clambda", 92)); (("fun_arity", 546), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -44), (("middle_end/clambda.mli", 109, 4487, 4491), ("middle_end/clambda.mli", 109, 4487, 4506), 0), 0, Tag1 ("Clambda", 93)); (("fun_closed", 547), 1, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -45), (("middle_end/clambda.mli", 110, 4553, 4557), ("middle_end/clambda.mli", 110, 4553, 4582), 0), 0, Tag1 ("Clambda", 94)); (("fun_inline", 548), 1, (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Backend_var")), "With_provenance"), "t"), 0, (0)), 100000000, 0, -49)], (0)), 100000000, 0, -48); (Tag3 ((("ulambda", 598)), 0, (0)), 100000000, 0, -50)]), 100000000, 0, -47)], (0)), 100000000, 0, -46), (("middle_end/clambda.mli", 111, 4628, 4632), ("middle_end/clambda.mli", 111, 4628, 4706), 0), 0, Tag1 ("Clambda", 95)); (("fun_float_const_prop", 549), 1, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -51), (("middle_end/clambda.mli", 112, 4707, 4711), ("middle_end/clambda.mli", 112, 4707, 4746), 0), 0, Tag1 ("Clambda", 96)); (("fun_poll", 550), 0, (Tag3 (Tag1 ((Tag2 ("Lambda")), "poll_attribute"), 0, (0)), 100000000, 0, -52), (("middle_end/clambda.mli", 113, 4777, 4781), ("middle_end/clambda.mli", 113, 4777, 4806), 0), 0, Tag1 ("Clambda", 97))]], 1, 0, 0, 0, 0, 0, (("middle_end/clambda.mli", 107, 4385, 4385), ("middle_end/clambda.mli", 114, 4843, 4846), 0), 0, 0, 0, Tag1 ("Clambda", 91)), 1, 0); Tag1 (("value_approximation", 602), (0, 0, Tag1 ([(("Value_closure", 552), ([(Tag3 ((("function_description", 601)), 0, (0)), 100000000, 0, -36); (Tag3 ((("value_approximation", 602)), 0, (0)), 100000000, 0, -37)]), 0, (("middle_end/clambda.mli", 119, 4906, 4910), ("middle_end/clambda.mli", 119, 4906, 4969), 0), 0, Tag1 ("Clambda", 99)); (("Value_tuple", 553), ([(Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("value_approximation", 602)), 0, (0)), 100000000, 0, -39)], (0)), 100000000, 0, -38)]), 0, (("middle_end/clambda.mli", 120, 4970, 4972), ("middle_end/clambda.mli", 120, 4970, 5014), 0), 0, Tag1 ("Clambda", 100)); (("Value_unknown", 554), (0), 0, (("middle_end/clambda.mli", 121, 5015, 5017), ("middle_end/clambda.mli", 121, 5015, 5032), 0), 0, Tag1 ("Clambda", 101)); (("Value_const", 555), ([(Tag3 ((("uconstant", 596)), 0, (0)), 100000000, 0, -40)]), 0, (("middle_end/clambda.mli", 122, 5033, 5035), ("middle_end/clambda.mli", 122, 5033, 5061), 0), 0, Tag1 ("Clambda", 102)); (("Value_global_field", 556), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -41); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -42)]), 0, (("middle_end/clambda.mli", 123, 5062, 5064), ("middle_end/clambda.mli", 123, 5062, 5100), 0), 0, Tag1 ("Clambda", 103))], 0), 1, 0, 0, 0, 0, 0, (("middle_end/clambda.mli", 118, 4879, 4879), ("middle_end/clambda.mli", 123, 5062, 5100), 0), 0, 0, 0, Tag1 ("Clambda", 98)), 1, 0); (("compare_structured_constants", 603), ((Tag1 (0, (Tag3 ((("ustructured_constant", 595)), 0, (0)), 100000000, 0, -35), (Tag1 (0, (Tag3 ((("ustructured_constant", 595)), 0, (0)), 100000000, 0, -34), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -33), 0), 100000000, 0, -32), 0), 100000000, 0, -31), 0, (("middle_end/clambda.mli", 127, 5144, 5144), ("middle_end/clambda.mli", 128, 5178, 5237), 0), 0, Tag1 ("Clambda", 104)), 0); (("compare_constants", 604), ((Tag1 (0, (Tag3 ((("uconstant", 596)), 0, (0)), 100000000, 0, -30), (Tag1 (0, (Tag3 ((("uconstant", 596)), 0, (0)), 100000000, 0, -29), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -28), 0), 100000000, 0, -27), 0), 100000000, 0, -26), 0, (("middle_end/clambda.mli", 129, 5238, 5238), ("middle_end/clambda.mli", 130, 5261, 5298), 0), 0, Tag1 ("Clambda", 105)), 0); Tag1 (("usymbol_provenance", 605), (0, 0, [[(("original_idents", 560), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -24)], (0)), 100000000, 0, -23), (("middle_end/clambda.mli", 133, 5328, 5330), ("middle_end/clambda.mli", 133, 5328, 5361), 0), 0, Tag1 ("Clambda", 107)); (("module_path", 578), 0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -25), (("middle_end/clambda.mli", 134, 5362, 5364), ("middle_end/clambda.mli", 134, 5362, 5385), 0), 0, Tag1 ("Clambda", 108))]], 1, 0, 0, 0, 0, 0, (("middle_end/clambda.mli", 132, 5300, 5300), ("middle_end/clambda.mli", 135, 5386, 5387), 0), 0, 0, 0, Tag1 ("Clambda", 106)), 1, 0); Tag1 (("uconstant_block_field", 606), (0, 0, Tag1 ([(("Uconst_field_ref", 580), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -21)]), 0, (("middle_end/clambda.mli", 138, 5418, 5420), ("middle_end/clambda.mli", 138, 5418, 5448), 0), 0, Tag1 ("Clambda", 110)); (("Uconst_field_int", 581), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -22)]), 0, (("middle_end/clambda.mli", 139, 5449, 5451), ("middle_end/clambda.mli", 139, 5449, 5476), 0), 0, Tag1 ("Clambda", 111))], 0), 1, 0, 0, 0, 0, 0, (("middle_end/clambda.mli", 137, 5389, 5389), ("middle_end/clambda.mli", 139, 5449, 5476), 0), 0, 0, 0, Tag1 ("Clambda", 109)), 1, 0); Tag1 (("preallocated_block", 607), (0, 0, [[(("symbol", 583), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -13), (("middle_end/clambda.mli", 142, 5506, 5508), ("middle_end/clambda.mli", 142, 5506, 5524), 0), 0, Tag1 ("Clambda", 113)); (("exported", 584), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -14), (("middle_end/clambda.mli", 143, 5525, 5527), ("middle_end/clambda.mli", 143, 5525, 5543), 0), 0, Tag1 ("Clambda", 114)); (("tag", 585), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -15), (("middle_end/clambda.mli", 144, 5544, 5546), ("middle_end/clambda.mli", 144, 5544, 5556), 0), 0, Tag1 ("Clambda", 115)); (("fields", 586), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("uconstant_block_field", 606)), 0, (0)), 100000000, 0, -18)], (0)), 100000000, 0, -17)], (0)), 100000000, 0, -16), (("middle_end/clambda.mli", 145, 5557, 5559), ("middle_end/clambda.mli", 145, 5557, 5602), 0), 0, Tag1 ("Clambda", 116)); (("provenance", 587), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("usymbol_provenance", 605)), 0, (0)), 100000000, 0, -20)], (0)), 100000000, 0, -19), (("middle_end/clambda.mli", 146, 5603, 5605), ("middle_end/clambda.mli", 146, 5603, 5644), 0), 0, Tag1 ("Clambda", 117))]], 1, 0, 0, 0, 0, 0, (("middle_end/clambda.mli", 141, 5478, 5478), ("middle_end/clambda.mli", 147, 5645, 5646), 0), 0, 0, 0, Tag1 ("Clambda", 112)), 1, 0); Tag1 (("preallocated_constant", 608), (0, 0, [[(("symbol", 589), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -8), (("middle_end/clambda.mli", 150, 5679, 5681), ("middle_end/clambda.mli", 150, 5679, 5697), 0), 0, Tag1 ("Clambda", 119)); (("exported", 590), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -9), (("middle_end/clambda.mli", 151, 5698, 5700), ("middle_end/clambda.mli", 151, 5698, 5716), 0), 0, Tag1 ("Clambda", 120)); (("definition", 591), 0, (Tag3 ((("ustructured_constant", 595)), 0, (0)), 100000000, 0, -10), (("middle_end/clambda.mli", 152, 5717, 5719), ("middle_end/clambda.mli", 152, 5717, 5753), 0), 0, Tag1 ("Clambda", 121)); (("provenance", 592), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("usymbol_provenance", 605)), 0, (0)), 100000000, 0, -12)], (0)), 100000000, 0, -11), (("middle_end/clambda.mli", 153, 5754, 5756), ("middle_end/clambda.mli", 153, 5754, 5795), 0), 0, Tag1 ("Clambda", 122))]], 1, 0, 0, 0, 0, 0, (("middle_end/clambda.mli", 149, 5648, 5648), ("middle_end/clambda.mli", 154, 5796, 5797), 0), 0, 0, 0, Tag1 ("Clambda", 118)), 1, 0); Tag1 (("with_constants", 609), (0, 0, 0, 1, ((Tag2 ([(Tag3 ((("ulambda", 598)), 0, (0)), 100000000, 0, -3); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("preallocated_block", 607)), 0, (0)), 100000000, 0, -5)], (0)), 100000000, 0, -4); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("preallocated_constant", 608)), 0, (0)), 100000000, 0, -7)], (0)), 100000000, 0, -6)]), 100000000, 0, -2)), 0, 0, 0, 0, (("middle_end/clambda.mli", 156, 5799, 5799), ("middle_end/clambda.mli", 157, 5821, 5885), 0), 0, 0, 0, Tag1 ("Clambda", 123)), 1, 0)], "Clambda", [("Clambda", ("L\229\134\243-\191\006\t%\029\245\180\199\252#\214")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Types", ("\177\238\029.\220\006\163!\230\015\006\182\133\155\194\166")); ("Type_immediacy", ("\"\127k\011Q\241\211\138\193;8\142\129\141#\251")); ("Subst", ("\021\031\148\223\127\186\189\135\027}\145r\216\143\177\156")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shape", ("\235\127Y\213\025\137=\244\218\181\248N\189\188\216p")); ("Primitive", ("}Shh\162\015|\220A\203\249\232\245G\213\019")); ("Path", ("\012\183\178\025\1298\228*\021r\185\160Y\252\n\026")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Outcometree", ("9\021%\234\211\206\210\004H\165\208\2014\234Q\142")); ("Misc", ("*\026\026\234c\191\131\161\\\203\183\012O\252\153\198")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Load_path", ("\012@\228l\230\164S\172h\1726X\020\252o}")); ("Lambda", ("\180\1419\236'\146K$\128\006\135q\135V\029\180")); ("Identifiable", ("\004F\207\014\158GU\001\184\214\187%/#;\211")); ("Ident", ("\b9;!\187.\220\163(x\b\174\\\223\020\004")); ("Env", ("\021\n\181\142x\b\169j\227\"\017\248*\178\245\223")); ("Debuginfo", ("\131\251\175\217P\194M\163\022\151\002\005\006\185:\185")); ("Cmi_format", ("6\177\bU\139\"\023\152=\249\135\174\b\011Cg")); ("Clambda_primitives", ("\199\176\237Hv\205\152\14717\179\017\246\221x`")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Build_path_prefix_map", ("y\028\167\207D\220\198\216\011\208\172\149\2416\bc")); ("Backend_var", ("\182\144C\215j:\241\151\214\131?\204\253\002\029\151")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216"))], [(0)])
ulambda * preallocated_block list * preallocated_constant list

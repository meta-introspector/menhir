type padty = CamlinternalFormatBasics.padty = Left | Right | Zeros
and int_conv =
  CamlinternalFormatBasics.int_conv =
    Int_d
  | Int_pd
  | Int_sd
  | Int_i
  | Int_pi
  | Int_si
  | Int_x
  | Int_Cx
  | Int_X
  | Int_CX
  | Int_o
  | Int_Co
  | Int_u
  | Int_Cd
  | Int_Ci
  | Int_Cu
and float_flag_conv =
  CamlinternalFormatBasics.float_flag_conv =
    Float_flag_
  | Float_flag_p
  | Float_flag_s
and float_kind_conv =
  CamlinternalFormatBasics.float_kind_conv =
    Float_f
  | Float_e
  | Float_E
  | Float_g
  | Float_G
  | Float_F
  | Float_h
  | Float_H
  | Float_CF
and float_conv = float_flag_conv * float_kind_conv
and char_set = string
and counter =
  CamlinternalFormatBasics.counter =
    Line_counter
  | Char_counter
  | Token_counter
and ('a, 'b) padding =
  ('a, 'b) CamlinternalFormatBasics.padding =
    No_padding : ('a, 'a) padding
  | Lit_padding : padty * int -> ('a, 'a) padding
  | Arg_padding : padty -> (int -> 'a, 'a) padding
and pad_option = int option
and ('a, 'b) precision =
  ('a, 'b) CamlinternalFormatBasics.precision =
    No_precision : ('a, 'a) precision
  | Lit_precision : int -> ('a, 'a) precision
  | Arg_precision : (int -> 'a, 'a) precision
and prec_option = int option
and ('a, 'b, 'c) custom_arity =
  ('a, 'b, 'c) CamlinternalFormatBasics.custom_arity =
    Custom_zero : ('a, string, 'a) custom_arity
  | Custom_succ :
      ('a, 'b, 'c) custom_arity -> ('a, 'x -> 'b, 'x -> 'c) custom_arity
and block_type =
  CamlinternalFormatBasics.block_type =
    Pp_hbox
  | Pp_vbox
  | Pp_hvbox
  | Pp_hovbox
  | Pp_box
  | Pp_fits
and formatting_lit =
  CamlinternalFormatBasics.formatting_lit =
    Close_box
  | Close_tag
  | Break of string * int * int
  | FFlush
  | Force_newline
  | Flush_newline
  | Magic_size of string * int
  | Escaped_at
  | Escaped_percent
  | Scan_indic of char
and ('a, 'b, 'c, 'd, 'e, 'f) formatting_gen =
  ('a, 'b, 'c, 'd, 'e, 'f) CamlinternalFormatBasics.formatting_gen =
    Open_tag :
      ('a, 'b, 'c, 'd, 'e, 'f) format6 -> ('a, 'b, 'c, 'd, 'e, 'f)
                                          formatting_gen
  | Open_box :
      ('a, 'b, 'c, 'd, 'e, 'f) format6 -> ('a, 'b, 'c, 'd, 'e, 'f)
                                          formatting_gen
and ('a, 'b, 'c, 'd, 'e, 'f) fmtty =
    ('a, 'b, 'c, 'd, 'e, 'f, 'a, 'b, 'c, 'd, 'e, 'f) fmtty_rel
and ('a1, 'b1, 'c1, 'd1, 'e1, 'f1, 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel =
  ('a1, 'b1, 'c1, 'd1, 'e1, 'f1, 'a2, 'b2, 'c2, 'd2, 'e2, 'f2)
  CamlinternalFormatBasics.fmtty_rel =
    Char_ty :
      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1, 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel -> 
      (char -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1, char -> 'a2, 'b2, 'c2, 'd2, 'e2,
       'f2)
      fmtty_rel
  | String_ty :
      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1, 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel -> 
      (string -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1, string -> 'a2, 'b2, 'c2, 'd2,
       'e2, 'f2)
      fmtty_rel
  | Int_ty :
      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1, 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel -> 
      (int -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1, int -> 'a2, 'b2, 'c2, 'd2, 'e2,
       'f2)
      fmtty_rel
  | Int32_ty :
      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1, 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel -> 
      (int32 -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1, int32 -> 'a2, 'b2, 'c2, 'd2,
       'e2, 'f2)
      fmtty_rel
  | Nativeint_ty :
      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1, 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel -> 
      (nativeint -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1, nativeint -> 'a2, 'b2, 'c2,
       'd2, 'e2, 'f2)
      fmtty_rel
  | Int64_ty :
      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1, 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel -> 
      (int64 -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1, int64 -> 'a2, 'b2, 'c2, 'd2,
       'e2, 'f2)
      fmtty_rel
  | Float_ty :
      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1, 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel -> 
      (float -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1, float -> 'a2, 'b2, 'c2, 'd2,
       'e2, 'f2)
      fmtty_rel
  | Bool_ty :
      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1, 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel -> 
      (bool -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1, bool -> 'a2, 'b2, 'c2, 'd2, 'e2,
       'f2)
      fmtty_rel
  | Format_arg_ty : ('g, 'h, 'i, 'j, 'k, 'l) fmtty *
      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1, 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel -> 
      (('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,
       ('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2)
      fmtty_rel
  | Format_subst_ty :
      ('g, 'h, 'i, 'j, 'k, 'l, 'g1, 'b1, 'c1, 'j1, 'd1, 'a1) fmtty_rel *
      ('g, 'h, 'i, 'j, 'k, 'l, 'g2, 'b2, 'c2, 'j2, 'd2, 'a2) fmtty_rel *
      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1, 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel -> 
      (('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'g1, 'b1, 'c1, 'j1, 'e1, 'f1,
       ('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'g2, 'b2, 'c2, 'j2, 'e2, 'f2)
      fmtty_rel
  | Alpha_ty :
      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1, 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel -> 
      (('b1 -> 'x -> 'c1) -> 'x -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,
       ('b2 -> 'x -> 'c2) -> 'x -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2)
      fmtty_rel
  | Theta_ty :
      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1, 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel -> 
      (('b1 -> 'c1) -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1, ('b2 -> 'c2) -> 'a2,
       'b2, 'c2, 'd2, 'e2, 'f2)
      fmtty_rel
  | Any_ty :
      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1, 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel -> 
      ('x -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1, 'x -> 'a2, 'b2, 'c2, 'd2, 'e2,
       'f2)
      fmtty_rel
  | Reader_ty :
      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1, 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel -> 
      ('x -> 'a1, 'b1, 'c1, ('b1 -> 'x) -> 'd1, 'e1, 'f1, 'x -> 'a2, 'b2,
       'c2, ('b2 -> 'x) -> 'd2, 'e2, 'f2)
      fmtty_rel
  | Ignored_reader_ty :
      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1, 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel -> 
      ('a1, 'b1, 'c1, ('b1 -> 'x) -> 'd1, 'e1, 'f1, 'a2, 'b2, 'c2,
       ('b2 -> 'x) -> 'd2, 'e2, 'f2)
      fmtty_rel
  | End_of_fmtty :
      ('f1, 'b1, 'c1, 'd1, 'd1, 'f1, 'f2, 'b2, 'c2, 'd2, 'd2, 'f2) fmtty_rel
and ('a, 'b, 'c, 'd, 'e, 'f) fmt =
  ('a, 'b, 'c, 'd, 'e, 'f) CamlinternalFormatBasics.fmt =
    Char :
      ('a, 'b, 'c, 'd, 'e, 'f) fmt -> (char -> 'a, 'b, 'c, 'd, 'e, 'f) fmt
  | Caml_char :
      ('a, 'b, 'c, 'd, 'e, 'f) fmt -> (char -> 'a, 'b, 'c, 'd, 'e, 'f) fmt
  | String : ('x, string -> 'a) padding *
      ('a, 'b, 'c, 'd, 'e, 'f) fmt -> ('x, 'b, 'c, 'd, 'e, 'f) fmt
  | Caml_string : ('x, string -> 'a) padding *
      ('a, 'b, 'c, 'd, 'e, 'f) fmt -> ('x, 'b, 'c, 'd, 'e, 'f) fmt
  | Int : int_conv * ('x, 'y) padding * ('y, int -> 'a) precision *
      ('a, 'b, 'c, 'd, 'e, 'f) fmt -> ('x, 'b, 'c, 'd, 'e, 'f) fmt
  | Int32 : int_conv * ('x, 'y) padding * ('y, int32 -> 'a) precision *
      ('a, 'b, 'c, 'd, 'e, 'f) fmt -> ('x, 'b, 'c, 'd, 'e, 'f) fmt
  | Nativeint : int_conv * ('x, 'y) padding *
      ('y, nativeint -> 'a) precision *
      ('a, 'b, 'c, 'd, 'e, 'f) fmt -> ('x, 'b, 'c, 'd, 'e, 'f) fmt
  | Int64 : int_conv * ('x, 'y) padding * ('y, int64 -> 'a) precision *
      ('a, 'b, 'c, 'd, 'e, 'f) fmt -> ('x, 'b, 'c, 'd, 'e, 'f) fmt
  | Float : float_conv * ('x, 'y) padding * ('y, float -> 'a) precision *
      ('a, 'b, 'c, 'd, 'e, 'f) fmt -> ('x, 'b, 'c, 'd, 'e, 'f) fmt
  | Bool : ('x, bool -> 'a) padding *
      ('a, 'b, 'c, 'd, 'e, 'f) fmt -> ('x, 'b, 'c, 'd, 'e, 'f) fmt
  | Flush : ('a, 'b, 'c, 'd, 'e, 'f) fmt -> ('a, 'b, 'c, 'd, 'e, 'f) fmt
  | String_literal : string *
      ('a, 'b, 'c, 'd, 'e, 'f) fmt -> ('a, 'b, 'c, 'd, 'e, 'f) fmt
  | Char_literal : char *
      ('a, 'b, 'c, 'd, 'e, 'f) fmt -> ('a, 'b, 'c, 'd, 'e, 'f) fmt
  | Format_arg : pad_option * ('g, 'h, 'i, 'j, 'k, 'l) fmtty *
      ('a, 'b, 'c, 'd, 'e, 'f) fmt -> (('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'a,
                                       'b, 'c, 'd, 'e, 'f)
                                      fmt
  | Format_subst : pad_option *
      ('g, 'h, 'i, 'j, 'k, 'l, 'g2, 'b, 'c, 'j2, 'd, 'a) fmtty_rel *
      ('a, 'b, 'c, 'd, 'e, 'f) fmt -> (('g, 'h, 'i, 'j, 'k, 'l) format6 ->
                                       'g2, 'b, 'c, 'j2, 'e, 'f)
                                      fmt
  | Alpha :
      ('a, 'b, 'c, 'd, 'e, 'f) fmt -> (('b -> 'x -> 'c) -> 'x -> 'a, 'b, 'c,
                                       'd, 'e, 'f)
                                      fmt
  | Theta :
      ('a, 'b, 'c, 'd, 'e, 'f) fmt -> (('b -> 'c) -> 'a, 'b, 'c, 'd, 'e, 'f)
                                      fmt
  | Formatting_lit : formatting_lit *
      ('a, 'b, 'c, 'd, 'e, 'f) fmt -> ('a, 'b, 'c, 'd, 'e, 'f) fmt
  | Formatting_gen : ('a1, 'b, 'c, 'd1, 'e1, 'f1) formatting_gen *
      ('f1, 'b, 'c, 'e1, 'e2, 'f2) fmt -> ('a1, 'b, 'c, 'd1, 'e2, 'f2) fmt
  | Reader :
      ('a, 'b, 'c, 'd, 'e, 'f) fmt -> ('x -> 'a, 'b, 'c, ('b -> 'x) -> 'd,
                                       'e, 'f)
                                      fmt
  | Scan_char_set : pad_option * char_set *
      ('a, 'b, 'c, 'd, 'e, 'f) fmt -> (string -> 'a, 'b, 'c, 'd, 'e, 'f) fmt
  | Scan_get_counter : counter *
      ('a, 'b, 'c, 'd, 'e, 'f) fmt -> (int -> 'a, 'b, 'c, 'd, 'e, 'f) fmt
  | Scan_next_char :
      ('a, 'b, 'c, 'd, 'e, 'f) fmt -> (char -> 'a, 'b, 'c, 'd, 'e, 'f) fmt
  | Ignored_param : ('a, 'b, 'c, 'd, 'y, 'x) ignored *
      ('x, 'b, 'c, 'y, 'e, 'f) fmt -> ('a, 'b, 'c, 'd, 'e, 'f) fmt
  | Custom : ('a, 'x, 'y) custom_arity * (unit -> 'x) *
      ('a, 'b, 'c, 'd, 'e, 'f) fmt -> ('y, 'b, 'c, 'd, 'e, 'f) fmt
  | End_of_format : ('f, 'b, 'c, 'e, 'e, 'f) fmt
and ('a, 'b, 'c, 'd, 'e, 'f) ignored =
  ('a, 'b, 'c, 'd, 'e, 'f) CamlinternalFormatBasics.ignored =
    Ignored_char : ('a, 'b, 'c, 'd, 'd, 'a) ignored
  | Ignored_caml_char : ('a, 'b, 'c, 'd, 'd, 'a) ignored
  | Ignored_string : pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored
  | Ignored_caml_string : pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored
  | Ignored_int : int_conv * pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored
  | Ignored_int32 : int_conv * pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored
  | Ignored_nativeint : int_conv *
      pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored
  | Ignored_int64 : int_conv * pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored
  | Ignored_float : pad_option *
      prec_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored
  | Ignored_bool : pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored
  | Ignored_format_arg : pad_option *
      ('g, 'h, 'i, 'j, 'k, 'l) fmtty -> ('a, 'b, 'c, 'd, 'd, 'a) ignored
  | Ignored_format_subst : pad_option *
      ('a, 'b, 'c, 'd, 'e, 'f) fmtty -> ('a, 'b, 'c, 'd, 'e, 'f) ignored
  | Ignored_reader : ('a, 'b, 'c, ('b -> 'x) -> 'd, 'd, 'a) ignored
  | Ignored_scan_char_set : pad_option *
      char_set -> ('a, 'b, 'c, 'd, 'd, 'a) ignored
  | Ignored_scan_get_counter : counter -> ('a, 'b, 'c, 'd, 'd, 'a) ignored
  | Ignored_scan_next_char : ('a, 'b, 'c, 'd, 'd, 'a) ignored
and ('a, 'b, 'c, 'd, 'e, 'f) format6 =
  ('a, 'b, 'c, 'd, 'e, 'f) CamlinternalFormatBasics.format6 =
    Format of ('a, 'b, 'c, 'd, 'e, 'f) fmt * string
class virtual ['res] lift :
  object
    method block_type : block_type -> 'res
    method virtual bool : bool -> 'res
    method virtual char : char -> 'res
    method char_set : char_set -> 'res
    method virtual constr : string -> 'res list -> 'res
    method counter : counter -> 'res
    method custom_arity :
      ('a -> 'res) ->
      ('b -> 'res) -> ('c -> 'res) -> ('a, 'b, 'c) custom_arity -> 'res
    method virtual float : float -> 'res
    method float_conv : float_conv -> 'res
    method float_flag_conv : float_flag_conv -> 'res
    method float_kind_conv : float_kind_conv -> 'res
    method fmt :
      ('a -> 'res) ->
      ('b -> 'res) ->
      ('c -> 'res) ->
      ('d -> 'res) ->
      ('e -> 'res) -> ('f -> 'res) -> ('a, 'b, 'c, 'd, 'e, 'f) fmt -> 'res
    method fmtty :
      ('a -> 'res) ->
      ('b -> 'res) ->
      ('c -> 'res) ->
      ('d -> 'res) ->
      ('e -> 'res) -> ('f -> 'res) -> ('a, 'b, 'c, 'd, 'e, 'f) fmtty -> 'res
    method fmtty_rel :
      ('a -> 'res) ->
      ('b -> 'res) ->
      ('c -> 'res) ->
      ('d -> 'res) ->
      ('e -> 'res) ->
      ('f -> 'res) ->
      ('g -> 'res) ->
      ('h -> 'res) ->
      ('i -> 'res) ->
      ('j -> 'res) ->
      ('k -> 'res) ->
      ('l -> 'res) ->
      ('a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l) fmtty_rel -> 'res
    method format6 :
      ('a -> 'res) ->
      ('b -> 'res) ->
      ('c -> 'res) ->
      ('d -> 'res) ->
      ('e -> 'res) ->
      ('f -> 'res) -> ('a, 'b, 'c, 'd, 'e, 'f) format6 -> 'res
    method formatting_gen :
      ('a -> 'res) ->
      ('b -> 'res) ->
      ('c -> 'res) ->
      ('d -> 'res) ->
      ('e -> 'res) ->
      ('f -> 'res) -> ('a, 'b, 'c, 'd, 'e, 'f) formatting_gen -> 'res
    method formatting_lit : formatting_lit -> 'res
    method ignored :
      ('a -> 'res) ->
      ('b -> 'res) ->
      ('c -> 'res) ->
      ('d -> 'res) ->
      ('e -> 'res) ->
      ('f -> 'res) -> ('a, 'b, 'c, 'd, 'e, 'f) ignored -> 'res
    method virtual int : int -> 'res
    method virtual int32 : int32 -> 'res
    method virtual int64 : int64 -> 'res
    method int_conv : int_conv -> 'res
    method virtual nativeint : nativeint -> 'res
    method virtual option : ('a -> 'res) -> 'a option -> 'res
    method virtual other : 'a -> 'res
    method pad_option : pad_option -> 'res
    method padding : ('a -> 'res) -> ('b -> 'res) -> ('a, 'b) padding -> 'res
    method padty : padty -> 'res
    method prec_option : prec_option -> 'res
    method precision :
      ('a -> 'res) -> ('b -> 'res) -> ('a, 'b) precision -> 'res
    method virtual string : string -> 'res
    method virtual tuple : 'res list -> 'res
    method virtual unit : unit -> 'res("DEBUG:rule", [Tag1 (("padty", 1168), (0, 0, Tag1 ([(("Left", 290), (0), 0, (("src/format_lifter.ml", 2, 46, 48), ("src/format_lifter.ml", 2, 46, 54), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 20)); (("Right", 291), (0), 0, (("src/format_lifter.ml", 3, 56, 58), ("src/format_lifter.ml", 3, 56, 65), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 21)); (("Zeros", 292), (0), 0, (("src/format_lifter.ml", 4, 67, 69), ("src/format_lifter.ml", 4, 67, 76), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 22))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("CamlinternalFormatBasics")), "padty"), 0, (0)), 100000000, 0, -1415)), 0, 0, 0, 0, (("src/format_lifter.ml", 1, 0, 0), ("src/format_lifter.ml", 4, 67, 76), 0), 0, 1, 0, Tag1 ("Ppx_custom_printf__Format_lifter", 0)), 1, 0); Tag1 (("int_conv", 1169), (0, 0, Tag1 ([(("Int_d", 316), (0), 0, (("src/format_lifter.ml", 6, 129, 131), ("src/format_lifter.ml", 6, 129, 138), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 23)); (("Int_pd", 317), (0), 0, (("src/format_lifter.ml", 7, 140, 142), ("src/format_lifter.ml", 7, 140, 150), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 24)); (("Int_sd", 318), (0), 0, (("src/format_lifter.ml", 8, 152, 154), ("src/format_lifter.ml", 8, 152, 162), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 25)); (("Int_i", 319), (0), 0, (("src/format_lifter.ml", 9, 164, 166), ("src/format_lifter.ml", 9, 164, 173), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 26)); (("Int_pi", 320), (0), 0, (("src/format_lifter.ml", 10, 175, 177), ("src/format_lifter.ml", 10, 175, 185), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 27)); (("Int_si", 321), (0), 0, (("src/format_lifter.ml", 11, 187, 189), ("src/format_lifter.ml", 11, 187, 197), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 28)); (("Int_x", 322), (0), 0, (("src/format_lifter.ml", 12, 199, 201), ("src/format_lifter.ml", 12, 199, 208), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 29)); (("Int_Cx", 323), (0), 0, (("src/format_lifter.ml", 13, 210, 212), ("src/format_lifter.ml", 13, 210, 220), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 30)); (("Int_X", 324), (0), 0, (("src/format_lifter.ml", 14, 222, 224), ("src/format_lifter.ml", 14, 222, 231), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 31)); (("Int_CX", 325), (0), 0, (("src/format_lifter.ml", 15, 233, 235), ("src/format_lifter.ml", 15, 233, 243), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 32)); (("Int_o", 326), (0), 0, (("src/format_lifter.ml", 16, 245, 247), ("src/format_lifter.ml", 16, 245, 254), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 33)); (("Int_Co", 327), (0), 0, (("src/format_lifter.ml", 17, 256, 258), ("src/format_lifter.ml", 17, 256, 266), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 34)); (("Int_u", 328), (0), 0, (("src/format_lifter.ml", 18, 268, 270), ("src/format_lifter.ml", 18, 268, 277), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 35)); (("Int_Cd", 329), (0), 0, (("src/format_lifter.ml", 19, 279, 281), ("src/format_lifter.ml", 19, 279, 289), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 36)); (("Int_Ci", 330), (0), 0, (("src/format_lifter.ml", 20, 291, 293), ("src/format_lifter.ml", 20, 291, 301), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 37)); (("Int_Cu", 331), (0), 0, (("src/format_lifter.ml", 21, 303, 305), ("src/format_lifter.ml", 21, 303, 313), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 38))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("CamlinternalFormatBasics")), "int_conv"), 0, (0)), 100000000, 0, -1414)), 0, 0, 0, 0, (("src/format_lifter.ml", 5, 78, 78), ("src/format_lifter.ml", 21, 303, 313), 0), 0, 1, 0, Tag1 ("Ppx_custom_printf__Format_lifter", 1)), 2, 0); Tag1 (("float_flag_conv", 1170), (0, 0, Tag1 ([(("Float_flag_", 332), (0), 0, (("src/format_lifter.ml", 23, 380, 382), ("src/format_lifter.ml", 23, 380, 395), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 39)); (("Float_flag_p", 333), (0), 0, (("src/format_lifter.ml", 24, 397, 399), ("src/format_lifter.ml", 24, 397, 413), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 40)); (("Float_flag_s", 334), (0), 0, (("src/format_lifter.ml", 25, 415, 417), ("src/format_lifter.ml", 25, 415, 431), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 41))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("CamlinternalFormatBasics")), "float_flag_conv"), 0, (0)), 100000000, 0, -1413)), 0, 0, 0, 0, (("src/format_lifter.ml", 22, 315, 315), ("src/format_lifter.ml", 25, 415, 431), 0), 0, 1, 0, Tag1 ("Ppx_custom_printf__Format_lifter", 2)), 2, 0); Tag1 (("float_kind_conv", 1171), (0, 0, Tag1 ([(("Float_f", 335), (0), 0, (("src/format_lifter.ml", 27, 498, 500), ("src/format_lifter.ml", 27, 498, 509), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 42)); (("Float_e", 336), (0), 0, (("src/format_lifter.ml", 28, 511, 513), ("src/format_lifter.ml", 28, 511, 522), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 43)); (("Float_E", 337), (0), 0, (("src/format_lifter.ml", 29, 524, 526), ("src/format_lifter.ml", 29, 524, 535), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 44)); (("Float_g", 338), (0), 0, (("src/format_lifter.ml", 30, 537, 539), ("src/format_lifter.ml", 30, 537, 548), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 45)); (("Float_G", 339), (0), 0, (("src/format_lifter.ml", 31, 550, 552), ("src/format_lifter.ml", 31, 550, 561), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 46)); (("Float_F", 340), (0), 0, (("src/format_lifter.ml", 32, 563, 565), ("src/format_lifter.ml", 32, 563, 574), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 47)); (("Float_h", 341), (0), 0, (("src/format_lifter.ml", 33, 576, 578), ("src/format_lifter.ml", 33, 576, 587), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 48)); (("Float_H", 342), (0), 0, (("src/format_lifter.ml", 34, 589, 591), ("src/format_lifter.ml", 34, 589, 600), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 49)); (("Float_CF", 343), (0), 0, (("src/format_lifter.ml", 35, 602, 604), ("src/format_lifter.ml", 35, 602, 614), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 50))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("CamlinternalFormatBasics")), "float_kind_conv"), 0, (0)), 100000000, 0, -1412)), 0, 0, 0, 0, (("src/format_lifter.ml", 26, 433, 433), ("src/format_lifter.ml", 35, 602, 614), 0), 0, 1, 0, Tag1 ("Ppx_custom_printf__Format_lifter", 3)), 2, 0); Tag1 (("float_conv", 1172), (0, 0, 0, 1, ((Tag2 ([(Tag3 ((("float_flag_conv", 1170)), 0, (0)), 100000000, 0, -1410); (Tag3 ((("float_kind_conv", 1171)), 0, (0)), 100000000, 0, -1411)]), 100000000, 0, -1409)), 0, 0, 0, 0, (("src/format_lifter.ml", 36, 616, 616), ("src/format_lifter.ml", 36, 616, 668), 0), 0, 0, 0, Tag1 ("Ppx_custom_printf__Format_lifter", 4)), 2, 0); Tag1 (("char_set", 1173), (0, 0, 0, 1, ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1408)), 0, 0, 0, 0, (("src/format_lifter.ml", 37, 669, 669), ("src/format_lifter.ml", 37, 669, 690), 0), 0, 0, 0, Tag1 ("Ppx_custom_printf__Format_lifter", 5)), 2, 0); Tag1 (("counter", 1174), (0, 0, Tag1 ([(("Line_counter", 344), (0), 0, (("src/format_lifter.ml", 39, 740, 742), ("src/format_lifter.ml", 39, 740, 756), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 51)); (("Char_counter", 345), (0), 0, (("src/format_lifter.ml", 40, 758, 760), ("src/format_lifter.ml", 40, 758, 774), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 52)); (("Token_counter", 346), (0), 0, (("src/format_lifter.ml", 41, 776, 778), ("src/format_lifter.ml", 41, 776, 793), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 53))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("CamlinternalFormatBasics")), "counter"), 0, (0)), 100000000, 0, -1407)), 0, 0, 0, 0, (("src/format_lifter.ml", 38, 691, 691), ("src/format_lifter.ml", 41, 776, 793), 0), 0, 1, 0, Tag1 ("Ppx_custom_printf__Format_lifter", 6)), 2, 0); Tag1 (("padding", 1175), ([((("a")), 100000000, 0, -1394); ((("b")), 100000000, 0, -1395)], 2, Tag1 ([(("No_padding", 347), (0), ((Tag3 ((("padding", 1175)), [((("a")), 100000000, 0, -1397); ((("a")), 100000000, 0, -1397)], (0)), 100000000, 0, -1396)), (("src/format_lifter.ml", 43, 862, 864), ("src/format_lifter.ml", 43, 862, 894), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 54)); (("Lit_padding", 348), ([(Tag3 ((("padty", 1168)), 0, (0)), 100000000, 0, -1400); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1401)]), ((Tag3 ((("padding", 1175)), [((("a")), 100000000, 0, -1399); ((("a")), 100000000, 0, -1399)], (0)), 100000000, 0, -1398)), (("src/format_lifter.ml", 44, 896, 898), ("src/format_lifter.ml", 44, 896, 944), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 55)); (("Arg_padding", 349), ([(Tag3 ((("padty", 1168)), 0, (0)), 100000000, 0, -1406)]), ((Tag3 ((("padding", 1175)), [(Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1405), ((("a")), 100000000, 0, -1404), 0), 100000000, 0, -1403); ((("a")), 100000000, 0, -1404)], (0)), 100000000, 0, -1402)), (("src/format_lifter.ml", 45, 946, 948), ("src/format_lifter.ml", 45, 946, 995), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 56))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("CamlinternalFormatBasics")), "padding"), [((("a")), 100000000, 0, -1394); ((("b")), 100000000, 0, -1395)], (0)), 100000000, 0, -1393)), [63; 15], [0; 0], 0, 0, (("src/format_lifter.ml", 42, 795, 795), ("src/format_lifter.ml", 45, 946, 995), 0), 0, 0, 0, Tag1 ("Ppx_custom_printf__Format_lifter", 7)), 2, 0); Tag1 (("pad_option", 1176), (0, 0, 0, 1, ((Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1392)], (0)), 100000000, 0, -1391)), 0, 0, 0, 0, (("src/format_lifter.ml", 46, 997, 997), ("src/format_lifter.ml", 46, 997, 1024), 0), 0, 0, 0, Tag1 ("Ppx_custom_printf__Format_lifter", 8)), 2, 0); Tag1 (("precision", 1177), ([((("a")), 100000000, 0, -1380); ((("b")), 100000000, 0, -1381)], 2, Tag1 ([(("No_precision", 350), (0), ((Tag3 ((("precision", 1177)), [((("a")), 100000000, 0, -1383); ((("a")), 100000000, 0, -1383)], (0)), 100000000, 0, -1382)), (("src/format_lifter.ml", 48, 1096, 1098), ("src/format_lifter.ml", 48, 1096, 1132), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 57)); (("Lit_precision", 351), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1386)]), ((Tag3 ((("precision", 1177)), [((("a")), 100000000, 0, -1385); ((("a")), 100000000, 0, -1385)], (0)), 100000000, 0, -1384)), (("src/format_lifter.ml", 49, 1134, 1136), ("src/format_lifter.ml", 49, 1134, 1178), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 58)); (("Arg_precision", 352), (0), ((Tag3 ((("precision", 1177)), [(Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1390), ((("a")), 100000000, 0, -1389), 0), 100000000, 0, -1388); ((("a")), 100000000, 0, -1389)], (0)), 100000000, 0, -1387)), (("src/format_lifter.ml", 50, 1180, 1182), ("src/format_lifter.ml", 50, 1180, 1224), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 59))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("CamlinternalFormatBasics")), "precision"), [((("a")), 100000000, 0, -1380); ((("b")), 100000000, 0, -1381)], (0)), 100000000, 0, -1379)), [63; 15], [0; 0], 0, 0, (("src/format_lifter.ml", 47, 1025, 1025), ("src/format_lifter.ml", 50, 1180, 1224), 0), 0, 0, 0, Tag1 ("Ppx_custom_printf__Format_lifter", 9)), 2, 0); Tag1 (("prec_option", 1178), (0, 0, 0, 1, ((Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1378)], (0)), 100000000, 0, -1377)), 0, 0, 0, 0, (("src/format_lifter.ml", 51, 1226, 1226), ("src/format_lifter.ml", 51, 1226, 1254), 0), 0, 0, 0, Tag1 ("Ppx_custom_printf__Format_lifter", 10)), 2, 0); Tag1 (("custom_arity", 1179), ([((("a")), 100000000, 0, -1363); ((("b")), 100000000, 0, -1364); ((("c")), 100000000, 0, -1365)], 3, Tag1 ([(("Custom_zero", 353), (0), ((Tag3 ((("custom_arity", 1179)), [((("a")), 100000000, 0, -1367); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1368); ((("a")), 100000000, 0, -1367)], (0)), 100000000, 0, -1366)), (("src/format_lifter.ml", 54, 1342, 1344), ("src/format_lifter.ml", 54, 1342, 1388), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 60)); (("Custom_succ", 354), ([(Tag3 ((("custom_arity", 1179)), [((("a")), 100000000, 0, -1370); ((("b")), 100000000, 0, -1372); ((("c")), 100000000, 0, -1375)], (0)), 100000000, 0, -1376)]), ((Tag3 ((("custom_arity", 1179)), [((("a")), 100000000, 0, -1370); (Tag1 (0, ((("x")), 100000000, 0, -1373), ((("b")), 100000000, 0, -1372), 0), 100000000, 0, -1371); (Tag1 (0, ((("x")), 100000000, 0, -1373), ((("c")), 100000000, 0, -1375), 0), 100000000, 0, -1374)], (0)), 100000000, 0, -1369)), (("src/format_lifter.ml", 55, 1390, 1392), ("src/format_lifter.ml", 56, 1461, 1475), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 61))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("CamlinternalFormatBasics")), "custom_arity"), [((("a")), 100000000, 0, -1363); ((("b")), 100000000, 0, -1364); ((("c")), 100000000, 0, -1365)], (0)), 100000000, 0, -1362)), [15; 63; 63], [0; 0; 0], 0, 0, (("src/format_lifter.ml", 52, 1255, 1255), ("src/format_lifter.ml", 56, 1461, 1475), 0), 0, 0, 0, Tag1 ("Ppx_custom_printf__Format_lifter", 11)), 2, 0); Tag1 (("block_type", 1180), (0, 0, Tag1 ([(("Pp_hbox", 355), (0), 0, (("src/format_lifter.ml", 58, 1532, 1534), ("src/format_lifter.ml", 58, 1532, 1543), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 62)); (("Pp_vbox", 356), (0), 0, (("src/format_lifter.ml", 59, 1545, 1547), ("src/format_lifter.ml", 59, 1545, 1556), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 63)); (("Pp_hvbox", 357), (0), 0, (("src/format_lifter.ml", 60, 1558, 1560), ("src/format_lifter.ml", 60, 1558, 1570), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 64)); (("Pp_hovbox", 358), (0), 0, (("src/format_lifter.ml", 61, 1572, 1574), ("src/format_lifter.ml", 61, 1572, 1585), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 65)); (("Pp_box", 359), (0), 0, (("src/format_lifter.ml", 62, 1587, 1589), ("src/format_lifter.ml", 62, 1587, 1597), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 66)); (("Pp_fits", 360), (0), 0, (("src/format_lifter.ml", 63, 1599, 1601), ("src/format_lifter.ml", 63, 1599, 1610), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 67))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("CamlinternalFormatBasics")), "block_type"), 0, (0)), 100000000, 0, -1361)), 0, 0, 0, 0, (("src/format_lifter.ml", 57, 1477, 1477), ("src/format_lifter.ml", 63, 1599, 1610), 0), 0, 1, 0, Tag1 ("Ppx_custom_printf__Format_lifter", 12)), 2, 0); Tag1 (("formatting_lit", 1181), (0, 0, Tag1 ([(("Close_box", 361), (0), 0, (("src/format_lifter.ml", 65, 1675, 1677), ("src/format_lifter.ml", 65, 1675, 1688), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 68)); (("Close_tag", 362), (0), 0, (("src/format_lifter.ml", 66, 1690, 1692), ("src/format_lifter.ml", 66, 1690, 1703), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 69)); (("Break", 363), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1355); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1356); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1357)]), 0, (("src/format_lifter.ml", 67, 1705, 1707), ("src/format_lifter.ml", 67, 1705, 1736), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 70)); (("FFlush", 364), (0), 0, (("src/format_lifter.ml", 68, 1738, 1740), ("src/format_lifter.ml", 68, 1738, 1748), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 71)); (("Force_newline", 365), (0), 0, (("src/format_lifter.ml", 69, 1750, 1752), ("src/format_lifter.ml", 69, 1750, 1767), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 72)); (("Flush_newline", 366), (0), 0, (("src/format_lifter.ml", 70, 1769, 1771), ("src/format_lifter.ml", 70, 1769, 1786), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 73)); (("Magic_size", 367), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1358); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1359)]), 0, (("src/format_lifter.ml", 71, 1788, 1790), ("src/format_lifter.ml", 71, 1788, 1818), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 74)); (("Escaped_at", 368), (0), 0, (("src/format_lifter.ml", 72, 1820, 1822), ("src/format_lifter.ml", 72, 1820, 1834), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 75)); (("Escaped_percent", 369), (0), 0, (("src/format_lifter.ml", 73, 1836, 1838), ("src/format_lifter.ml", 73, 1836, 1855), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 76)); (("Scan_indic", 370), ([(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -1360)]), 0, (("src/format_lifter.ml", 74, 1857, 1859), ("src/format_lifter.ml", 74, 1857, 1879), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 77))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("CamlinternalFormatBasics")), "formatting_lit"), 0, (0)), 100000000, 0, -1354)), 0, 0, 0, 0, (("src/format_lifter.ml", 64, 1612, 1612), ("src/format_lifter.ml", 74, 1857, 1879), 0), 0, 0, 0, Tag1 ("Ppx_custom_printf__Format_lifter", 13)), 2, 0); Tag1 (("formatting_gen", 1182), ([((("a")), 100000000, 0, -1332); ((("b")), 100000000, 0, -1333); ((("c")), 100000000, 0, -1334); ((("d")), 100000000, 0, -1335); ((("e")), 100000000, 0, -1336); ((("f")), 100000000, 0, -1337)], 6, Tag1 ([(("Open_tag", 371), ([(Tag3 ((("format6", 1187)), [((("a")), 100000000, 0, -1339); ((("b")), 100000000, 0, -1340); ((("c")), 100000000, 0, -1341); ((("d")), 100000000, 0, -1342); ((("e")), 100000000, 0, -1343); ((("f")), 100000000, 0, -1344)], (0)), 100000000, 0, -1345)]), ((Tag3 ((("formatting_gen", 1182)), [((("a")), 100000000, 0, -1339); ((("b")), 100000000, 0, -1340); ((("c")), 100000000, 0, -1341); ((("d")), 100000000, 0, -1342); ((("e")), 100000000, 0, -1343); ((("f")), 100000000, 0, -1344)], (0)), 100000000, 0, -1338)), (("src/format_lifter.ml", 77, 1996, 1998), ("src/format_lifter.ml", 78, 2068, 2088), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 78)); (("Open_box", 372), ([(Tag3 ((("format6", 1187)), [((("a")), 100000000, 0, -1347); ((("b")), 100000000, 0, -1348); ((("c")), 100000000, 0, -1349); ((("d")), 100000000, 0, -1350); ((("e")), 100000000, 0, -1351); ((("f")), 100000000, 0, -1352)], (0)), 100000000, 0, -1353)]), ((Tag3 ((("formatting_gen", 1182)), [((("a")), 100000000, 0, -1347); ((("b")), 100000000, 0, -1348); ((("c")), 100000000, 0, -1349); ((("d")), 100000000, 0, -1350); ((("e")), 100000000, 0, -1351); ((("f")), 100000000, 0, -1352)], (0)), 100000000, 0, -1346)), (("src/format_lifter.ml", 79, 2090, 2092), ("src/format_lifter.ml", 80, 2162, 2182), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 79))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("CamlinternalFormatBasics")), "formatting_gen"), [((("a")), 100000000, 0, -1332); ((("b")), 100000000, 0, -1333); ((("c")), 100000000, 0, -1334); ((("d")), 100000000, 0, -1335); ((("e")), 100000000, 0, -1336); ((("f")), 100000000, 0, -1337)], (0)), 100000000, 0, -1331)), [63; 15; 15; 63; 15; 15], [0; 0; 0; 0; 0; 0], 0, 0, (("src/format_lifter.ml", 75, 1881, 1881), ("src/format_lifter.ml", 80, 2162, 2182), 0), 0, 0, 0, Tag1 ("Ppx_custom_printf__Format_lifter", 14)), 2, 0); Tag1 (("fmtty", 1183), ([((("a")), 100000000, 0, -1325); ((("b")), 100000000, 0, -1326); ((("c")), 100000000, 0, -1327); ((("d")), 100000000, 0, -1328); ((("e")), 100000000, 0, -1329); ((("f")), 100000000, 0, -1330)], 6, 0, 1, ((Tag3 ((("fmtty_rel", 1184)), [((("a")), 100000000, 0, -1325); ((("b")), 100000000, 0, -1326); ((("c")), 100000000, 0, -1327); ((("d")), 100000000, 0, -1328); ((("e")), 100000000, 0, -1329); ((("f")), 100000000, 0, -1330); ((("a")), 100000000, 0, -1325); ((("b")), 100000000, 0, -1326); ((("c")), 100000000, 0, -1327); ((("d")), 100000000, 0, -1328); ((("e")), 100000000, 0, -1329); ((("f")), 100000000, 0, -1330)], (0)), 100000000, 0, -1324)), [63; 15; 15; 63; 15; 15], [0; 0; 0; 0; 0; 0], 0, 0, (("src/format_lifter.ml", 81, 2184, 2184), ("src/format_lifter.ml", 82, 2221, 2281), 0), 0, 0, 0, Tag1 ("Ppx_custom_printf__Format_lifter", 15)), 2, 0); Tag1 (("fmtty_rel", 1184), ([((("a1")), 100000000, 0, -1006); ((("b1")), 100000000, 0, -1007); ((("c1")), 100000000, 0, -1008); ((("d1")), 100000000, 0, -1009); ((("e1")), 100000000, 0, -1010); ((("f1")), 100000000, 0, -1011); ((("a2")), 100000000, 0, -1012); ((("b2")), 100000000, 0, -1013); ((("c2")), 100000000, 0, -1014); ((("d2")), 100000000, 0, -1015); ((("e2")), 100000000, 0, -1016); ((("f2")), 100000000, 0, -1017)], 12, Tag1 ([(("Char_ty", 373), ([(Tag3 ((("fmtty_rel", 1184)), [((("a1")), 100000000, 0, -1020); ((("b1")), 100000000, 0, -1022); ((("c1")), 100000000, 0, -1023); ((("d1")), 100000000, 0, -1024); ((("e1")), 100000000, 0, -1025); ((("f1")), 100000000, 0, -1026); ((("a2")), 100000000, 0, -1028); ((("b2")), 100000000, 0, -1030); ((("c2")), 100000000, 0, -1031); ((("d2")), 100000000, 0, -1032); ((("e2")), 100000000, 0, -1033); ((("f2")), 100000000, 0, -1034)], (0)), 100000000, 0, -1035)]), ((Tag3 ((("fmtty_rel", 1184)), [(Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -1021), ((("a1")), 100000000, 0, -1020), 0), 100000000, 0, -1019); ((("b1")), 100000000, 0, -1022); ((("c1")), 100000000, 0, -1023); ((("d1")), 100000000, 0, -1024); ((("e1")), 100000000, 0, -1025); ((("f1")), 100000000, 0, -1026); (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -1029), ((("a2")), 100000000, 0, -1028), 0), 100000000, 0, -1027); ((("b2")), 100000000, 0, -1030); ((("c2")), 100000000, 0, -1031); ((("d2")), 100000000, 0, -1032); ((("e2")), 100000000, 0, -1033); ((("f2")), 100000000, 0, -1034)], (0)), 100000000, 0, -1018)), (("src/format_lifter.ml", 87, 2465, 2467), ("src/format_lifter.ml", 89, 2608, 2644), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 80)); (("String_ty", 374), ([(Tag3 ((("fmtty_rel", 1184)), [((("a1")), 100000000, 0, -1038); ((("b1")), 100000000, 0, -1040); ((("c1")), 100000000, 0, -1041); ((("d1")), 100000000, 0, -1042); ((("e1")), 100000000, 0, -1043); ((("f1")), 100000000, 0, -1044); ((("a2")), 100000000, 0, -1046); ((("b2")), 100000000, 0, -1048); ((("c2")), 100000000, 0, -1049); ((("d2")), 100000000, 0, -1050); ((("e2")), 100000000, 0, -1051); ((("f2")), 100000000, 0, -1052)], (0)), 100000000, 0, -1053)]), ((Tag3 ((("fmtty_rel", 1184)), [(Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1039), ((("a1")), 100000000, 0, -1038), 0), 100000000, 0, -1037); ((("b1")), 100000000, 0, -1040); ((("c1")), 100000000, 0, -1041); ((("d1")), 100000000, 0, -1042); ((("e1")), 100000000, 0, -1043); ((("f1")), 100000000, 0, -1044); (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1047), ((("a2")), 100000000, 0, -1046), 0), 100000000, 0, -1045); ((("b2")), 100000000, 0, -1048); ((("c2")), 100000000, 0, -1049); ((("d2")), 100000000, 0, -1050); ((("e2")), 100000000, 0, -1051); ((("f2")), 100000000, 0, -1052)], (0)), 100000000, 0, -1036)), (("src/format_lifter.ml", 90, 2646, 2648), ("src/format_lifter.ml", 92, 2794, 2830), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 81)); (("Int_ty", 375), ([(Tag3 ((("fmtty_rel", 1184)), [((("a1")), 100000000, 0, -1056); ((("b1")), 100000000, 0, -1058); ((("c1")), 100000000, 0, -1059); ((("d1")), 100000000, 0, -1060); ((("e1")), 100000000, 0, -1061); ((("f1")), 100000000, 0, -1062); ((("a2")), 100000000, 0, -1064); ((("b2")), 100000000, 0, -1066); ((("c2")), 100000000, 0, -1067); ((("d2")), 100000000, 0, -1068); ((("e2")), 100000000, 0, -1069); ((("f2")), 100000000, 0, -1070)], (0)), 100000000, 0, -1071)]), ((Tag3 ((("fmtty_rel", 1184)), [(Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1057), ((("a1")), 100000000, 0, -1056), 0), 100000000, 0, -1055); ((("b1")), 100000000, 0, -1058); ((("c1")), 100000000, 0, -1059); ((("d1")), 100000000, 0, -1060); ((("e1")), 100000000, 0, -1061); ((("f1")), 100000000, 0, -1062); (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1065), ((("a2")), 100000000, 0, -1064), 0), 100000000, 0, -1063); ((("b2")), 100000000, 0, -1066); ((("c2")), 100000000, 0, -1067); ((("d2")), 100000000, 0, -1068); ((("e2")), 100000000, 0, -1069); ((("f2")), 100000000, 0, -1070)], (0)), 100000000, 0, -1054)), (("src/format_lifter.ml", 93, 2832, 2834), ("src/format_lifter.ml", 95, 2976, 3007), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 82)); (("Int32_ty", 376), ([(Tag3 ((("fmtty_rel", 1184)), [((("a1")), 100000000, 0, -1074); ((("b1")), 100000000, 0, -1076); ((("c1")), 100000000, 0, -1077); ((("d1")), 100000000, 0, -1078); ((("e1")), 100000000, 0, -1079); ((("f1")), 100000000, 0, -1080); ((("a2")), 100000000, 0, -1082); ((("b2")), 100000000, 0, -1084); ((("c2")), 100000000, 0, -1085); ((("d2")), 100000000, 0, -1086); ((("e2")), 100000000, 0, -1087); ((("f2")), 100000000, 0, -1088)], (0)), 100000000, 0, -1089)]), ((Tag3 ((("fmtty_rel", 1184)), [(Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -1075), ((("a1")), 100000000, 0, -1074), 0), 100000000, 0, -1073); ((("b1")), 100000000, 0, -1076); ((("c1")), 100000000, 0, -1077); ((("d1")), 100000000, 0, -1078); ((("e1")), 100000000, 0, -1079); ((("f1")), 100000000, 0, -1080); (Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -1083), ((("a2")), 100000000, 0, -1082), 0), 100000000, 0, -1081); ((("b2")), 100000000, 0, -1084); ((("c2")), 100000000, 0, -1085); ((("d2")), 100000000, 0, -1086); ((("e2")), 100000000, 0, -1087); ((("f2")), 100000000, 0, -1088)], (0)), 100000000, 0, -1072)), (("src/format_lifter.ml", 96, 3009, 3011), ("src/format_lifter.ml", 98, 3154, 3190), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 83)); (("Nativeint_ty", 377), ([(Tag3 ((("fmtty_rel", 1184)), [((("a1")), 100000000, 0, -1092); ((("b1")), 100000000, 0, -1094); ((("c1")), 100000000, 0, -1095); ((("d1")), 100000000, 0, -1096); ((("e1")), 100000000, 0, -1097); ((("f1")), 100000000, 0, -1098); ((("a2")), 100000000, 0, -1100); ((("b2")), 100000000, 0, -1102); ((("c2")), 100000000, 0, -1103); ((("d2")), 100000000, 0, -1104); ((("e2")), 100000000, 0, -1105); ((("f2")), 100000000, 0, -1106)], (0)), 100000000, 0, -1107)]), ((Tag3 ((("fmtty_rel", 1184)), [(Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -1093), ((("a1")), 100000000, 0, -1092), 0), 100000000, 0, -1091); ((("b1")), 100000000, 0, -1094); ((("c1")), 100000000, 0, -1095); ((("d1")), 100000000, 0, -1096); ((("e1")), 100000000, 0, -1097); ((("f1")), 100000000, 0, -1098); (Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -1101), ((("a2")), 100000000, 0, -1100), 0), 100000000, 0, -1099); ((("b2")), 100000000, 0, -1102); ((("c2")), 100000000, 0, -1103); ((("d2")), 100000000, 0, -1104); ((("e2")), 100000000, 0, -1105); ((("f2")), 100000000, 0, -1106)], (0)), 100000000, 0, -1090)), (("src/format_lifter.ml", 99, 3192, 3194), ("src/format_lifter.ml", 101, 3331, 3385), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 84)); (("Int64_ty", 378), ([(Tag3 ((("fmtty_rel", 1184)), [((("a1")), 100000000, 0, -1110); ((("b1")), 100000000, 0, -1112); ((("c1")), 100000000, 0, -1113); ((("d1")), 100000000, 0, -1114); ((("e1")), 100000000, 0, -1115); ((("f1")), 100000000, 0, -1116); ((("a2")), 100000000, 0, -1118); ((("b2")), 100000000, 0, -1120); ((("c2")), 100000000, 0, -1121); ((("d2")), 100000000, 0, -1122); ((("e2")), 100000000, 0, -1123); ((("f2")), 100000000, 0, -1124)], (0)), 100000000, 0, -1125)]), ((Tag3 ((("fmtty_rel", 1184)), [(Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -1111), ((("a1")), 100000000, 0, -1110), 0), 100000000, 0, -1109); ((("b1")), 100000000, 0, -1112); ((("c1")), 100000000, 0, -1113); ((("d1")), 100000000, 0, -1114); ((("e1")), 100000000, 0, -1115); ((("f1")), 100000000, 0, -1116); (Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -1119), ((("a2")), 100000000, 0, -1118), 0), 100000000, 0, -1117); ((("b2")), 100000000, 0, -1120); ((("c2")), 100000000, 0, -1121); ((("d2")), 100000000, 0, -1122); ((("e2")), 100000000, 0, -1123); ((("f2")), 100000000, 0, -1124)], (0)), 100000000, 0, -1108)), (("src/format_lifter.ml", 102, 3387, 3389), ("src/format_lifter.ml", 104, 3532, 3568), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 85)); (("Float_ty", 379), ([(Tag3 ((("fmtty_rel", 1184)), [((("a1")), 100000000, 0, -1128); ((("b1")), 100000000, 0, -1130); ((("c1")), 100000000, 0, -1131); ((("d1")), 100000000, 0, -1132); ((("e1")), 100000000, 0, -1133); ((("f1")), 100000000, 0, -1134); ((("a2")), 100000000, 0, -1136); ((("b2")), 100000000, 0, -1138); ((("c2")), 100000000, 0, -1139); ((("d2")), 100000000, 0, -1140); ((("e2")), 100000000, 0, -1141); ((("f2")), 100000000, 0, -1142)], (0)), 100000000, 0, -1143)]), ((Tag3 ((("fmtty_rel", 1184)), [(Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1129), ((("a1")), 100000000, 0, -1128), 0), 100000000, 0, -1127); ((("b1")), 100000000, 0, -1130); ((("c1")), 100000000, 0, -1131); ((("d1")), 100000000, 0, -1132); ((("e1")), 100000000, 0, -1133); ((("f1")), 100000000, 0, -1134); (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1137), ((("a2")), 100000000, 0, -1136), 0), 100000000, 0, -1135); ((("b2")), 100000000, 0, -1138); ((("c2")), 100000000, 0, -1139); ((("d2")), 100000000, 0, -1140); ((("e2")), 100000000, 0, -1141); ((("f2")), 100000000, 0, -1142)], (0)), 100000000, 0, -1126)), (("src/format_lifter.ml", 105, 3570, 3572), ("src/format_lifter.ml", 107, 3715, 3751), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 86)); (("Bool_ty", 380), ([(Tag3 ((("fmtty_rel", 1184)), [((("a1")), 100000000, 0, -1146); ((("b1")), 100000000, 0, -1148); ((("c1")), 100000000, 0, -1149); ((("d1")), 100000000, 0, -1150); ((("e1")), 100000000, 0, -1151); ((("f1")), 100000000, 0, -1152); ((("a2")), 100000000, 0, -1154); ((("b2")), 100000000, 0, -1156); ((("c2")), 100000000, 0, -1157); ((("d2")), 100000000, 0, -1158); ((("e2")), 100000000, 0, -1159); ((("f2")), 100000000, 0, -1160)], (0)), 100000000, 0, -1161)]), ((Tag3 ((("fmtty_rel", 1184)), [(Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1147), ((("a1")), 100000000, 0, -1146), 0), 100000000, 0, -1145); ((("b1")), 100000000, 0, -1148); ((("c1")), 100000000, 0, -1149); ((("d1")), 100000000, 0, -1150); ((("e1")), 100000000, 0, -1151); ((("f1")), 100000000, 0, -1152); (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1155), ((("a2")), 100000000, 0, -1154), 0), 100000000, 0, -1153); ((("b2")), 100000000, 0, -1156); ((("c2")), 100000000, 0, -1157); ((("d2")), 100000000, 0, -1158); ((("e2")), 100000000, 0, -1159); ((("f2")), 100000000, 0, -1160)], (0)), 100000000, 0, -1144)), (("src/format_lifter.ml", 108, 3753, 3755), ("src/format_lifter.ml", 110, 3896, 3932), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 87)); (("Format_arg_ty", 381), ([(Tag3 ((("fmtty", 1183)), [((("g")), 100000000, 0, -1166); ((("h")), 100000000, 0, -1167); ((("i")), 100000000, 0, -1168); ((("j")), 100000000, 0, -1169); ((("k")), 100000000, 0, -1170); ((("l")), 100000000, 0, -1171)], (0)), 100000000, 0, -1185); (Tag3 ((("fmtty_rel", 1184)), [((("a1")), 100000000, 0, -1164); ((("b1")), 100000000, 0, -1172); ((("c1")), 100000000, 0, -1173); ((("d1")), 100000000, 0, -1174); ((("e1")), 100000000, 0, -1175); ((("f1")), 100000000, 0, -1176); ((("a2")), 100000000, 0, -1178); ((("b2")), 100000000, 0, -1180); ((("c2")), 100000000, 0, -1181); ((("d2")), 100000000, 0, -1182); ((("e2")), 100000000, 0, -1183); ((("f2")), 100000000, 0, -1184)], (0)), 100000000, 0, -1186)]), ((Tag3 ((("fmtty_rel", 1184)), [(Tag1 (0, (Tag3 ((("format6", 1187)), [((("g")), 100000000, 0, -1166); ((("h")), 100000000, 0, -1167); ((("i")), 100000000, 0, -1168); ((("j")), 100000000, 0, -1169); ((("k")), 100000000, 0, -1170); ((("l")), 100000000, 0, -1171)], (0)), 100000000, 0, -1165), ((("a1")), 100000000, 0, -1164), 0), 100000000, 0, -1163); ((("b1")), 100000000, 0, -1172); ((("c1")), 100000000, 0, -1173); ((("d1")), 100000000, 0, -1174); ((("e1")), 100000000, 0, -1175); ((("f1")), 100000000, 0, -1176); (Tag1 (0, (Tag3 ((("format6", 1187)), [((("g")), 100000000, 0, -1166); ((("h")), 100000000, 0, -1167); ((("i")), 100000000, 0, -1168); ((("j")), 100000000, 0, -1169); ((("k")), 100000000, 0, -1170); ((("l")), 100000000, 0, -1171)], (0)), 100000000, 0, -1179), ((("a2")), 100000000, 0, -1178), 0), 100000000, 0, -1177); ((("b2")), 100000000, 0, -1180); ((("c2")), 100000000, 0, -1181); ((("d2")), 100000000, 0, -1182); ((("e2")), 100000000, 0, -1183); ((("f2")), 100000000, 0, -1184)], (0)), 100000000, 0, -1162)), (("src/format_lifter.ml", 111, 3934, 3936), ("src/format_lifter.ml", 114, 4132, 4209), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 88)); (("Format_subst_ty", 382), ([(Tag3 ((("fmtty_rel", 1184)), [((("g")), 100000000, 0, -1191); ((("h")), 100000000, 0, -1192); ((("i")), 100000000, 0, -1193); ((("j")), 100000000, 0, -1194); ((("k")), 100000000, 0, -1195); ((("l")), 100000000, 0, -1196); ((("g1")), 100000000, 0, -1189); ((("b1")), 100000000, 0, -1197); ((("c1")), 100000000, 0, -1198); ((("j1")), 100000000, 0, -1199); ((("d1")), 100000000, 0, -1211); ((("a1")), 100000000, 0, -1212)], (0)), 100000000, 0, -1210); (Tag3 ((("fmtty_rel", 1184)), [((("g")), 100000000, 0, -1191); ((("h")), 100000000, 0, -1192); ((("i")), 100000000, 0, -1193); ((("j")), 100000000, 0, -1194); ((("k")), 100000000, 0, -1195); ((("l")), 100000000, 0, -1196); ((("g2")), 100000000, 0, -1203); ((("b2")), 100000000, 0, -1205); ((("c2")), 100000000, 0, -1206); ((("j2")), 100000000, 0, -1207); ((("d2")), 100000000, 0, -1214); ((("a2")), 100000000, 0, -1215)], (0)), 100000000, 0, -1213); (Tag3 ((("fmtty_rel", 1184)), [((("a1")), 100000000, 0, -1212); ((("b1")), 100000000, 0, -1197); ((("c1")), 100000000, 0, -1198); ((("d1")), 100000000, 0, -1211); ((("e1")), 100000000, 0, -1200); ((("f1")), 100000000, 0, -1201); ((("a2")), 100000000, 0, -1215); ((("b2")), 100000000, 0, -1205); ((("c2")), 100000000, 0, -1206); ((("d2")), 100000000, 0, -1214); ((("e2")), 100000000, 0, -1208); ((("f2")), 100000000, 0, -1209)], (0)), 100000000, 0, -1216)]), ((Tag3 ((("fmtty_rel", 1184)), [(Tag1 (0, (Tag3 ((("format6", 1187)), [((("g")), 100000000, 0, -1191); ((("h")), 100000000, 0, -1192); ((("i")), 100000000, 0, -1193); ((("j")), 100000000, 0, -1194); ((("k")), 100000000, 0, -1195); ((("l")), 100000000, 0, -1196)], (0)), 100000000, 0, -1190), ((("g1")), 100000000, 0, -1189), 0), 100000000, 0, -1188); ((("b1")), 100000000, 0, -1197); ((("c1")), 100000000, 0, -1198); ((("j1")), 100000000, 0, -1199); ((("e1")), 100000000, 0, -1200); ((("f1")), 100000000, 0, -1201); (Tag1 (0, (Tag3 ((("format6", 1187)), [((("g")), 100000000, 0, -1191); ((("h")), 100000000, 0, -1192); ((("i")), 100000000, 0, -1193); ((("j")), 100000000, 0, -1194); ((("k")), 100000000, 0, -1195); ((("l")), 100000000, 0, -1196)], (0)), 100000000, 0, -1204), ((("g2")), 100000000, 0, -1203), 0), 100000000, 0, -1202); ((("b2")), 100000000, 0, -1205); ((("c2")), 100000000, 0, -1206); ((("j2")), 100000000, 0, -1207); ((("e2")), 100000000, 0, -1208); ((("f2")), 100000000, 0, -1209)], (0)), 100000000, 0, -1187)), (("src/format_lifter.ml", 116, 4213, 4215), ("src/format_lifter.ml", 121, 4573, 4599), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 89)); (("Alpha_ty", 383), ([(Tag3 ((("fmtty_rel", 1184)), [((("a1")), 100000000, 0, -1220); ((("b1")), 100000000, 0, -1225); ((("c1")), 100000000, 0, -1224); ((("d1")), 100000000, 0, -1226); ((("e1")), 100000000, 0, -1227); ((("f1")), 100000000, 0, -1228); ((("a2")), 100000000, 0, -1231); ((("b2")), 100000000, 0, -1235); ((("c2")), 100000000, 0, -1234); ((("d2")), 100000000, 0, -1236); ((("e2")), 100000000, 0, -1237); ((("f2")), 100000000, 0, -1238)], (0)), 100000000, 0, -1239)]), ((Tag3 ((("fmtty_rel", 1184)), [(Tag1 (0, (Tag1 (0, ((("b1")), 100000000, 0, -1225), (Tag1 (0, ((("x")), 100000000, 0, -1221), ((("c1")), 100000000, 0, -1224), 0), 100000000, 0, -1223), 0), 100000000, 0, -1222), (Tag1 (0, ((("x")), 100000000, 0, -1221), ((("a1")), 100000000, 0, -1220), 0), 100000000, 0, -1219), 0), 100000000, 0, -1218); ((("b1")), 100000000, 0, -1225); ((("c1")), 100000000, 0, -1224); ((("d1")), 100000000, 0, -1226); ((("e1")), 100000000, 0, -1227); ((("f1")), 100000000, 0, -1228); (Tag1 (0, (Tag1 (0, ((("b2")), 100000000, 0, -1235), (Tag1 (0, ((("x")), 100000000, 0, -1221), ((("c2")), 100000000, 0, -1234), 0), 100000000, 0, -1233), 0), 100000000, 0, -1232), (Tag1 (0, ((("x")), 100000000, 0, -1221), ((("a2")), 100000000, 0, -1231), 0), 100000000, 0, -1230), 0), 100000000, 0, -1229); ((("b2")), 100000000, 0, -1235); ((("c2")), 100000000, 0, -1234); ((("d2")), 100000000, 0, -1236); ((("e2")), 100000000, 0, -1237); ((("f2")), 100000000, 0, -1238)], (0)), 100000000, 0, -1217)), (("src/format_lifter.ml", 122, 4601, 4603), ("src/format_lifter.ml", 125, 4812, 4823), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 90)); (("Theta_ty", 384), ([(Tag3 ((("fmtty_rel", 1184)), [((("a1")), 100000000, 0, -1242); ((("b1")), 100000000, 0, -1245); ((("c1")), 100000000, 0, -1244); ((("d1")), 100000000, 0, -1246); ((("e1")), 100000000, 0, -1247); ((("f1")), 100000000, 0, -1248); ((("a2")), 100000000, 0, -1250); ((("b2")), 100000000, 0, -1253); ((("c2")), 100000000, 0, -1252); ((("d2")), 100000000, 0, -1254); ((("e2")), 100000000, 0, -1255); ((("f2")), 100000000, 0, -1256)], (0)), 100000000, 0, -1257)]), ((Tag3 ((("fmtty_rel", 1184)), [(Tag1 (0, (Tag1 (0, ((("b1")), 100000000, 0, -1245), ((("c1")), 100000000, 0, -1244), 0), 100000000, 0, -1243), ((("a1")), 100000000, 0, -1242), 0), 100000000, 0, -1241); ((("b1")), 100000000, 0, -1245); ((("c1")), 100000000, 0, -1244); ((("d1")), 100000000, 0, -1246); ((("e1")), 100000000, 0, -1247); ((("f1")), 100000000, 0, -1248); (Tag1 (0, (Tag1 (0, ((("b2")), 100000000, 0, -1253), ((("c2")), 100000000, 0, -1252), 0), 100000000, 0, -1251), ((("a2")), 100000000, 0, -1250), 0), 100000000, 0, -1249); ((("b2")), 100000000, 0, -1253); ((("c2")), 100000000, 0, -1252); ((("d2")), 100000000, 0, -1254); ((("e2")), 100000000, 0, -1255); ((("f2")), 100000000, 0, -1256)], (0)), 100000000, 0, -1240)), (("src/format_lifter.ml", 126, 4825, 4827), ("src/format_lifter.ml", 128, 4963, 5020), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 91)); (("Any_ty", 385), ([(Tag3 ((("fmtty_rel", 1184)), [((("a1")), 100000000, 0, -1260); ((("b1")), 100000000, 0, -1262); ((("c1")), 100000000, 0, -1263); ((("d1")), 100000000, 0, -1264); ((("e1")), 100000000, 0, -1265); ((("f1")), 100000000, 0, -1266); ((("a2")), 100000000, 0, -1268); ((("b2")), 100000000, 0, -1269); ((("c2")), 100000000, 0, -1270); ((("d2")), 100000000, 0, -1271); ((("e2")), 100000000, 0, -1272); ((("f2")), 100000000, 0, -1273)], (0)), 100000000, 0, -1274)]), ((Tag3 ((("fmtty_rel", 1184)), [(Tag1 (0, ((("x")), 100000000, 0, -1261), ((("a1")), 100000000, 0, -1260), 0), 100000000, 0, -1259); ((("b1")), 100000000, 0, -1262); ((("c1")), 100000000, 0, -1263); ((("d1")), 100000000, 0, -1264); ((("e1")), 100000000, 0, -1265); ((("f1")), 100000000, 0, -1266); (Tag1 (0, ((("x")), 100000000, 0, -1261), ((("a2")), 100000000, 0, -1268), 0), 100000000, 0, -1267); ((("b2")), 100000000, 0, -1269); ((("c2")), 100000000, 0, -1270); ((("d2")), 100000000, 0, -1271); ((("e2")), 100000000, 0, -1272); ((("f2")), 100000000, 0, -1273)], (0)), 100000000, 0, -1258)), (("src/format_lifter.ml", 129, 5022, 5024), ("src/format_lifter.ml", 131, 5169, 5195), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 92)); (("Reader_ty", 386), ([(Tag3 ((("fmtty_rel", 1184)), [((("a1")), 100000000, 0, -1277); ((("b1")), 100000000, 0, -1279); ((("c1")), 100000000, 0, -1280); ((("d1")), 100000000, 0, -1282); ((("e1")), 100000000, 0, -1284); ((("f1")), 100000000, 0, -1285); ((("a2")), 100000000, 0, -1287); ((("b2")), 100000000, 0, -1288); ((("c2")), 100000000, 0, -1289); ((("d2")), 100000000, 0, -1291); ((("e2")), 100000000, 0, -1293); ((("f2")), 100000000, 0, -1294)], (0)), 100000000, 0, -1295)]), ((Tag3 ((("fmtty_rel", 1184)), [(Tag1 (0, ((("x")), 100000000, 0, -1278), ((("a1")), 100000000, 0, -1277), 0), 100000000, 0, -1276); ((("b1")), 100000000, 0, -1279); ((("c1")), 100000000, 0, -1280); (Tag1 (0, (Tag1 (0, ((("b1")), 100000000, 0, -1279), ((("x")), 100000000, 0, -1278), 0), 100000000, 0, -1283), ((("d1")), 100000000, 0, -1282), 0), 100000000, 0, -1281); ((("e1")), 100000000, 0, -1284); ((("f1")), 100000000, 0, -1285); (Tag1 (0, ((("x")), 100000000, 0, -1278), ((("a2")), 100000000, 0, -1287), 0), 100000000, 0, -1286); ((("b2")), 100000000, 0, -1288); ((("c2")), 100000000, 0, -1289); (Tag1 (0, (Tag1 (0, ((("b2")), 100000000, 0, -1288), ((("x")), 100000000, 0, -1278), 0), 100000000, 0, -1292), ((("d2")), 100000000, 0, -1291), 0), 100000000, 0, -1290); ((("e2")), 100000000, 0, -1293); ((("f2")), 100000000, 0, -1294)], (0)), 100000000, 0, -1275)), (("src/format_lifter.ml", 132, 5197, 5199), ("src/format_lifter.ml", 134, 5341, 5403), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 93)); (("Ignored_reader_ty", 387), ([(Tag3 ((("fmtty_rel", 1184)), [((("a1")), 100000000, 0, -1297); ((("b1")), 100000000, 0, -1298); ((("c1")), 100000000, 0, -1299); ((("d1")), 100000000, 0, -1301); ((("e1")), 100000000, 0, -1304); ((("f1")), 100000000, 0, -1305); ((("a2")), 100000000, 0, -1306); ((("b2")), 100000000, 0, -1307); ((("c2")), 100000000, 0, -1308); ((("d2")), 100000000, 0, -1310); ((("e2")), 100000000, 0, -1312); ((("f2")), 100000000, 0, -1313)], (0)), 100000000, 0, -1314)]), ((Tag3 ((("fmtty_rel", 1184)), [((("a1")), 100000000, 0, -1297); ((("b1")), 100000000, 0, -1298); ((("c1")), 100000000, 0, -1299); (Tag1 (0, (Tag1 (0, ((("b1")), 100000000, 0, -1298), ((("x")), 100000000, 0, -1303), 0), 100000000, 0, -1302), ((("d1")), 100000000, 0, -1301), 0), 100000000, 0, -1300); ((("e1")), 100000000, 0, -1304); ((("f1")), 100000000, 0, -1305); ((("a2")), 100000000, 0, -1306); ((("b2")), 100000000, 0, -1307); ((("c2")), 100000000, 0, -1308); (Tag1 (0, (Tag1 (0, ((("b2")), 100000000, 0, -1307), ((("x")), 100000000, 0, -1303), 0), 100000000, 0, -1311), ((("d2")), 100000000, 0, -1310), 0), 100000000, 0, -1309); ((("e2")), 100000000, 0, -1312); ((("f2")), 100000000, 0, -1313)], (0)), 100000000, 0, -1296)), (("src/format_lifter.ml", 135, 5405, 5407), ("src/format_lifter.ml", 137, 5547, 5608), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 94)); (("End_of_fmtty", 388), (0), ((Tag3 ((("fmtty_rel", 1184)), [((("f1")), 100000000, 0, -1316); ((("b1")), 100000000, 0, -1317); ((("c1")), 100000000, 0, -1318); ((("d1")), 100000000, 0, -1319); ((("d1")), 100000000, 0, -1319); ((("f1")), 100000000, 0, -1316); ((("f2")), 100000000, 0, -1320); ((("b2")), 100000000, 0, -1321); ((("c2")), 100000000, 0, -1322); ((("d2")), 100000000, 0, -1323); ((("d2")), 100000000, 0, -1323); ((("f2")), 100000000, 0, -1320)], (0)), 100000000, 0, -1315)), (("src/format_lifter.ml", 138, 5610, 5612), ("src/format_lifter.ml", 139, 5680, 5701), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 95))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("CamlinternalFormatBasics")), "fmtty_rel"), [((("a1")), 100000000, 0, -1006); ((("b1")), 100000000, 0, -1007); ((("c1")), 100000000, 0, -1008); ((("d1")), 100000000, 0, -1009); ((("e1")), 100000000, 0, -1010); ((("f1")), 100000000, 0, -1011); ((("a2")), 100000000, 0, -1012); ((("b2")), 100000000, 0, -1013); ((("c2")), 100000000, 0, -1014); ((("d2")), 100000000, 0, -1015); ((("e2")), 100000000, 0, -1016); ((("f2")), 100000000, 0, -1017)], (0)), 100000000, 0, -1005)), [63; 15; 15; 63; 15; 15; 63; 15; 15; 63; 15; 15], [0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0], 0, 0, (("src/format_lifter.ml", 83, 2282, 2282), ("src/format_lifter.ml", 139, 5680, 5701), 0), 0, 0, 0, Tag1 ("Ppx_custom_printf__Format_lifter", 16)), 2, 0); Tag1 (("fmt", 1185), ([((("a")), 100000000, 0, -687); ((("b")), 100000000, 0, -688); ((("c")), 100000000, 0, -689); ((("d")), 100000000, 0, -690); ((("e")), 100000000, 0, -691); ((("f")), 100000000, 0, -692)], 6, Tag1 ([(("Char", 389), ([(Tag3 ((("fmt", 1185)), [((("a")), 100000000, 0, -695); ((("b")), 100000000, 0, -697); ((("c")), 100000000, 0, -698); ((("d")), 100000000, 0, -699); ((("e")), 100000000, 0, -700); ((("f")), 100000000, 0, -701)], (0)), 100000000, 0, -702)]), ((Tag3 ((("fmt", 1185)), [(Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -696), ((("a")), 100000000, 0, -695), 0), 100000000, 0, -694); ((("b")), 100000000, 0, -697); ((("c")), 100000000, 0, -698); ((("d")), 100000000, 0, -699); ((("e")), 100000000, 0, -700); ((("f")), 100000000, 0, -701)], (0)), 100000000, 0, -693)), (("src/format_lifter.ml", 142, 5796, 5798), ("src/format_lifter.ml", 143, 5868, 5877), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 96)); (("Caml_char", 390), ([(Tag3 ((("fmt", 1185)), [((("a")), 100000000, 0, -705); ((("b")), 100000000, 0, -707); ((("c")), 100000000, 0, -708); ((("d")), 100000000, 0, -709); ((("e")), 100000000, 0, -710); ((("f")), 100000000, 0, -711)], (0)), 100000000, 0, -712)]), ((Tag3 ((("fmt", 1185)), [(Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -706), ((("a")), 100000000, 0, -705), 0), 100000000, 0, -704); ((("b")), 100000000, 0, -707); ((("c")), 100000000, 0, -708); ((("d")), 100000000, 0, -709); ((("e")), 100000000, 0, -710); ((("f")), 100000000, 0, -711)], (0)), 100000000, 0, -703)), (("src/format_lifter.ml", 144, 5879, 5881), ("src/format_lifter.ml", 145, 5952, 5965), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 97)); (("String", 391), ([(Tag3 ((("padding", 1175)), [((("x")), 100000000, 0, -714); (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -723), ((("a")), 100000000, 0, -722), 0), 100000000, 0, -721)], (0)), 100000000, 0, -720); (Tag3 ((("fmt", 1185)), [((("a")), 100000000, 0, -722); ((("b")), 100000000, 0, -715); ((("c")), 100000000, 0, -716); ((("d")), 100000000, 0, -717); ((("e")), 100000000, 0, -718); ((("f")), 100000000, 0, -719)], (0)), 100000000, 0, -724)]), ((Tag3 ((("fmt", 1185)), [((("x")), 100000000, 0, -714); ((("b")), 100000000, 0, -715); ((("c")), 100000000, 0, -716); ((("d")), 100000000, 0, -717); ((("e")), 100000000, 0, -718); ((("f")), 100000000, 0, -719)], (0)), 100000000, 0, -713)), (("src/format_lifter.ml", 146, 5967, 5969), ("src/format_lifter.ml", 147, 6042, 6071), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 98)); (("Caml_string", 392), ([(Tag3 ((("padding", 1175)), [((("x")), 100000000, 0, -726); (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -735), ((("a")), 100000000, 0, -734), 0), 100000000, 0, -733)], (0)), 100000000, 0, -732); (Tag3 ((("fmt", 1185)), [((("a")), 100000000, 0, -734); ((("b")), 100000000, 0, -727); ((("c")), 100000000, 0, -728); ((("d")), 100000000, 0, -729); ((("e")), 100000000, 0, -730); ((("f")), 100000000, 0, -731)], (0)), 100000000, 0, -736)]), ((Tag3 ((("fmt", 1185)), [((("x")), 100000000, 0, -726); ((("b")), 100000000, 0, -727); ((("c")), 100000000, 0, -728); ((("d")), 100000000, 0, -729); ((("e")), 100000000, 0, -730); ((("f")), 100000000, 0, -731)], (0)), 100000000, 0, -725)), (("src/format_lifter.ml", 148, 6073, 6075), ("src/format_lifter.ml", 149, 6151, 6181), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 99)); (("Int", 393), ([(Tag3 ((("int_conv", 1169)), 0, (0)), 100000000, 0, -744); (Tag3 ((("padding", 1175)), [((("x")), 100000000, 0, -738); ((("y")), 100000000, 0, -746)], (0)), 100000000, 0, -745); (Tag3 ((("precision", 1177)), [((("y")), 100000000, 0, -746); (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -750), ((("a")), 100000000, 0, -749), 0), 100000000, 0, -748)], (0)), 100000000, 0, -747); (Tag3 ((("fmt", 1185)), [((("a")), 100000000, 0, -749); ((("b")), 100000000, 0, -739); ((("c")), 100000000, 0, -740); ((("d")), 100000000, 0, -741); ((("e")), 100000000, 0, -742); ((("f")), 100000000, 0, -743)], (0)), 100000000, 0, -751)]), ((Tag3 ((("fmt", 1185)), [((("x")), 100000000, 0, -738); ((("b")), 100000000, 0, -739); ((("c")), 100000000, 0, -740); ((("d")), 100000000, 0, -741); ((("e")), 100000000, 0, -742); ((("f")), 100000000, 0, -743)], (0)), 100000000, 0, -737)), (("src/format_lifter.ml", 150, 6183, 6185), ("src/format_lifter.ml", 151, 6256, 6313), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 100)); (("Int32", 394), ([(Tag3 ((("int_conv", 1169)), 0, (0)), 100000000, 0, -759); (Tag3 ((("padding", 1175)), [((("x")), 100000000, 0, -753); ((("y")), 100000000, 0, -761)], (0)), 100000000, 0, -760); (Tag3 ((("precision", 1177)), [((("y")), 100000000, 0, -761); (Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -765), ((("a")), 100000000, 0, -764), 0), 100000000, 0, -763)], (0)), 100000000, 0, -762); (Tag3 ((("fmt", 1185)), [((("a")), 100000000, 0, -764); ((("b")), 100000000, 0, -754); ((("c")), 100000000, 0, -755); ((("d")), 100000000, 0, -756); ((("e")), 100000000, 0, -757); ((("f")), 100000000, 0, -758)], (0)), 100000000, 0, -766)]), ((Tag3 ((("fmt", 1185)), [((("x")), 100000000, 0, -753); ((("b")), 100000000, 0, -754); ((("c")), 100000000, 0, -755); ((("d")), 100000000, 0, -756); ((("e")), 100000000, 0, -757); ((("f")), 100000000, 0, -758)], (0)), 100000000, 0, -752)), (("src/format_lifter.ml", 152, 6315, 6317), ("src/format_lifter.ml", 153, 6388, 6449), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 101)); (("Nativeint", 395), ([(Tag3 ((("int_conv", 1169)), 0, (0)), 100000000, 0, -774); (Tag3 ((("padding", 1175)), [((("x")), 100000000, 0, -768); ((("y")), 100000000, 0, -776)], (0)), 100000000, 0, -775); (Tag3 ((("precision", 1177)), [((("y")), 100000000, 0, -776); (Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -780), ((("a")), 100000000, 0, -779), 0), 100000000, 0, -778)], (0)), 100000000, 0, -777); (Tag3 ((("fmt", 1185)), [((("a")), 100000000, 0, -779); ((("b")), 100000000, 0, -769); ((("c")), 100000000, 0, -770); ((("d")), 100000000, 0, -771); ((("e")), 100000000, 0, -772); ((("f")), 100000000, 0, -773)], (0)), 100000000, 0, -781)]), ((Tag3 ((("fmt", 1185)), [((("x")), 100000000, 0, -768); ((("b")), 100000000, 0, -769); ((("c")), 100000000, 0, -770); ((("d")), 100000000, 0, -771); ((("e")), 100000000, 0, -772); ((("f")), 100000000, 0, -773)], (0)), 100000000, 0, -767)), (("src/format_lifter.ml", 154, 6451, 6453), ("src/format_lifter.ml", 155, 6528, 6592), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 102)); (("Int64", 396), ([(Tag3 ((("int_conv", 1169)), 0, (0)), 100000000, 0, -789); (Tag3 ((("padding", 1175)), [((("x")), 100000000, 0, -783); ((("y")), 100000000, 0, -791)], (0)), 100000000, 0, -790); (Tag3 ((("precision", 1177)), [((("y")), 100000000, 0, -791); (Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -795), ((("a")), 100000000, 0, -794), 0), 100000000, 0, -793)], (0)), 100000000, 0, -792); (Tag3 ((("fmt", 1185)), [((("a")), 100000000, 0, -794); ((("b")), 100000000, 0, -784); ((("c")), 100000000, 0, -785); ((("d")), 100000000, 0, -786); ((("e")), 100000000, 0, -787); ((("f")), 100000000, 0, -788)], (0)), 100000000, 0, -796)]), ((Tag3 ((("fmt", 1185)), [((("x")), 100000000, 0, -783); ((("b")), 100000000, 0, -784); ((("c")), 100000000, 0, -785); ((("d")), 100000000, 0, -786); ((("e")), 100000000, 0, -787); ((("f")), 100000000, 0, -788)], (0)), 100000000, 0, -782)), (("src/format_lifter.ml", 156, 6594, 6596), ("src/format_lifter.ml", 157, 6667, 6728), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 103)); (("Float", 397), ([(Tag3 ((("float_conv", 1172)), 0, (0)), 100000000, 0, -804); (Tag3 ((("padding", 1175)), [((("x")), 100000000, 0, -798); ((("y")), 100000000, 0, -806)], (0)), 100000000, 0, -805); (Tag3 ((("precision", 1177)), [((("y")), 100000000, 0, -806); (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -810), ((("a")), 100000000, 0, -809), 0), 100000000, 0, -808)], (0)), 100000000, 0, -807); (Tag3 ((("fmt", 1185)), [((("a")), 100000000, 0, -809); ((("b")), 100000000, 0, -799); ((("c")), 100000000, 0, -800); ((("d")), 100000000, 0, -801); ((("e")), 100000000, 0, -802); ((("f")), 100000000, 0, -803)], (0)), 100000000, 0, -811)]), ((Tag3 ((("fmt", 1185)), [((("x")), 100000000, 0, -798); ((("b")), 100000000, 0, -799); ((("c")), 100000000, 0, -800); ((("d")), 100000000, 0, -801); ((("e")), 100000000, 0, -802); ((("f")), 100000000, 0, -803)], (0)), 100000000, 0, -797)), (("src/format_lifter.ml", 158, 6730, 6732), ("src/format_lifter.ml", 159, 6805, 6866), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 104)); (("Bool", 398), ([(Tag3 ((("padding", 1175)), [((("x")), 100000000, 0, -813); (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -822), ((("a")), 100000000, 0, -821), 0), 100000000, 0, -820)], (0)), 100000000, 0, -819); (Tag3 ((("fmt", 1185)), [((("a")), 100000000, 0, -821); ((("b")), 100000000, 0, -814); ((("c")), 100000000, 0, -815); ((("d")), 100000000, 0, -816); ((("e")), 100000000, 0, -817); ((("f")), 100000000, 0, -818)], (0)), 100000000, 0, -823)]), ((Tag3 ((("fmt", 1185)), [((("x")), 100000000, 0, -813); ((("b")), 100000000, 0, -814); ((("c")), 100000000, 0, -815); ((("d")), 100000000, 0, -816); ((("e")), 100000000, 0, -817); ((("f")), 100000000, 0, -818)], (0)), 100000000, 0, -812)), (("src/format_lifter.ml", 160, 6868, 6870), ("src/format_lifter.ml", 161, 6939, 6968), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 105)); (("Flush", 399), ([(Tag3 ((("fmt", 1185)), [((("a")), 100000000, 0, -825); ((("b")), 100000000, 0, -826); ((("c")), 100000000, 0, -827); ((("d")), 100000000, 0, -828); ((("e")), 100000000, 0, -829); ((("f")), 100000000, 0, -830)], (0)), 100000000, 0, -831)]), ((Tag3 ((("fmt", 1185)), [((("a")), 100000000, 0, -825); ((("b")), 100000000, 0, -826); ((("c")), 100000000, 0, -827); ((("d")), 100000000, 0, -828); ((("e")), 100000000, 0, -829); ((("f")), 100000000, 0, -830)], (0)), 100000000, 0, -824)), (("src/format_lifter.ml", 162, 6970, 6972), ("src/format_lifter.ml", 162, 6970, 7041), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 106)); (("String_literal", 400), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -839); (Tag3 ((("fmt", 1185)), [((("a")), 100000000, 0, -833); ((("b")), 100000000, 0, -834); ((("c")), 100000000, 0, -835); ((("d")), 100000000, 0, -836); ((("e")), 100000000, 0, -837); ((("f")), 100000000, 0, -838)], (0)), 100000000, 0, -840)]), ((Tag3 ((("fmt", 1185)), [((("a")), 100000000, 0, -833); ((("b")), 100000000, 0, -834); ((("c")), 100000000, 0, -835); ((("d")), 100000000, 0, -836); ((("e")), 100000000, 0, -837); ((("f")), 100000000, 0, -838)], (0)), 100000000, 0, -832)), (("src/format_lifter.ml", 163, 7043, 7045), ("src/format_lifter.ml", 164, 7114, 7135), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 107)); (("Char_literal", 401), ([(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -848); (Tag3 ((("fmt", 1185)), [((("a")), 100000000, 0, -842); ((("b")), 100000000, 0, -843); ((("c")), 100000000, 0, -844); ((("d")), 100000000, 0, -845); ((("e")), 100000000, 0, -846); ((("f")), 100000000, 0, -847)], (0)), 100000000, 0, -849)]), ((Tag3 ((("fmt", 1185)), [((("a")), 100000000, 0, -842); ((("b")), 100000000, 0, -843); ((("c")), 100000000, 0, -844); ((("d")), 100000000, 0, -845); ((("e")), 100000000, 0, -846); ((("f")), 100000000, 0, -847)], (0)), 100000000, 0, -841)), (("src/format_lifter.ml", 165, 7137, 7139), ("src/format_lifter.ml", 166, 7208, 7225), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 108)); (("Format_arg", 402), ([(Tag3 ((("pad_option", 1176)), 0, (0)), 100000000, 0, -865); (Tag3 ((("fmtty", 1183)), [((("g")), 100000000, 0, -854); ((("h")), 100000000, 0, -855); ((("i")), 100000000, 0, -856); ((("j")), 100000000, 0, -857); ((("k")), 100000000, 0, -858); ((("l")), 100000000, 0, -859)], (0)), 100000000, 0, -866); (Tag3 ((("fmt", 1185)), [((("a")), 100000000, 0, -852); ((("b")), 100000000, 0, -860); ((("c")), 100000000, 0, -861); ((("d")), 100000000, 0, -862); ((("e")), 100000000, 0, -863); ((("f")), 100000000, 0, -864)], (0)), 100000000, 0, -867)]), ((Tag3 ((("fmt", 1185)), [(Tag1 (0, (Tag3 ((("format6", 1187)), [((("g")), 100000000, 0, -854); ((("h")), 100000000, 0, -855); ((("i")), 100000000, 0, -856); ((("j")), 100000000, 0, -857); ((("k")), 100000000, 0, -858); ((("l")), 100000000, 0, -859)], (0)), 100000000, 0, -853), ((("a")), 100000000, 0, -852), 0), 100000000, 0, -851); ((("b")), 100000000, 0, -860); ((("c")), 100000000, 0, -861); ((("d")), 100000000, 0, -862); ((("e")), 100000000, 0, -863); ((("f")), 100000000, 0, -864)], (0)), 100000000, 0, -850)), (("src/format_lifter.ml", 167, 7227, 7229), ("src/format_lifter.ml", 169, 7370, 7391), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 109)); (("Format_subst", 403), ([(Tag3 ((("pad_option", 1176)), 0, (0)), 100000000, 0, -883); (Tag3 ((("fmtty_rel", 1184)), [((("g")), 100000000, 0, -872); ((("h")), 100000000, 0, -873); ((("i")), 100000000, 0, -874); ((("j")), 100000000, 0, -875); ((("k")), 100000000, 0, -876); ((("l")), 100000000, 0, -877); ((("g2")), 100000000, 0, -870); ((("b")), 100000000, 0, -878); ((("c")), 100000000, 0, -879); ((("j2")), 100000000, 0, -880); ((("d")), 100000000, 0, -885); ((("a")), 100000000, 0, -886)], (0)), 100000000, 0, -884); (Tag3 ((("fmt", 1185)), [((("a")), 100000000, 0, -886); ((("b")), 100000000, 0, -878); ((("c")), 100000000, 0, -879); ((("d")), 100000000, 0, -885); ((("e")), 100000000, 0, -881); ((("f")), 100000000, 0, -882)], (0)), 100000000, 0, -887)]), ((Tag3 ((("fmt", 1185)), [(Tag1 (0, (Tag3 ((("format6", 1187)), [((("g")), 100000000, 0, -872); ((("h")), 100000000, 0, -873); ((("i")), 100000000, 0, -874); ((("j")), 100000000, 0, -875); ((("k")), 100000000, 0, -876); ((("l")), 100000000, 0, -877)], (0)), 100000000, 0, -871), ((("g2")), 100000000, 0, -870), 0), 100000000, 0, -869); ((("b")), 100000000, 0, -878); ((("c")), 100000000, 0, -879); ((("j2")), 100000000, 0, -880); ((("e")), 100000000, 0, -881); ((("f")), 100000000, 0, -882)], (0)), 100000000, 0, -868)), (("src/format_lifter.ml", 170, 7393, 7395), ("src/format_lifter.ml", 172, 7522, 7590), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 110)); (("Alpha", 404), ([(Tag3 ((("fmt", 1185)), [((("a")), 100000000, 0, -891); ((("b")), 100000000, 0, -896); ((("c")), 100000000, 0, -895); ((("d")), 100000000, 0, -897); ((("e")), 100000000, 0, -898); ((("f")), 100000000, 0, -899)], (0)), 100000000, 0, -900)]), ((Tag3 ((("fmt", 1185)), [(Tag1 (0, (Tag1 (0, ((("b")), 100000000, 0, -896), (Tag1 (0, ((("x")), 100000000, 0, -892), ((("c")), 100000000, 0, -895), 0), 100000000, 0, -894), 0), 100000000, 0, -893), (Tag1 (0, ((("x")), 100000000, 0, -892), ((("a")), 100000000, 0, -891), 0), 100000000, 0, -890), 0), 100000000, 0, -889); ((("b")), 100000000, 0, -896); ((("c")), 100000000, 0, -895); ((("d")), 100000000, 0, -897); ((("e")), 100000000, 0, -898); ((("f")), 100000000, 0, -899)], (0)), 100000000, 0, -888)), (("src/format_lifter.ml", 173, 7592, 7594), ("src/format_lifter.ml", 174, 7667, 7692), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 111)); (("Theta", 405), ([(Tag3 ((("fmt", 1185)), [((("a")), 100000000, 0, -903); ((("b")), 100000000, 0, -906); ((("c")), 100000000, 0, -905); ((("d")), 100000000, 0, -907); ((("e")), 100000000, 0, -908); ((("f")), 100000000, 0, -909)], (0)), 100000000, 0, -910)]), ((Tag3 ((("fmt", 1185)), [(Tag1 (0, (Tag1 (0, ((("b")), 100000000, 0, -906), ((("c")), 100000000, 0, -905), 0), 100000000, 0, -904), ((("a")), 100000000, 0, -903), 0), 100000000, 0, -902); ((("b")), 100000000, 0, -906); ((("c")), 100000000, 0, -905); ((("d")), 100000000, 0, -907); ((("e")), 100000000, 0, -908); ((("f")), 100000000, 0, -909)], (0)), 100000000, 0, -901)), (("src/format_lifter.ml", 175, 7694, 7696), ("src/format_lifter.ml", 176, 7765, 7782), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 112)); (("Formatting_lit", 406), ([(Tag3 ((("formatting_lit", 1181)), 0, (0)), 100000000, 0, -918); (Tag3 ((("fmt", 1185)), [((("a")), 100000000, 0, -912); ((("b")), 100000000, 0, -913); ((("c")), 100000000, 0, -914); ((("d")), 100000000, 0, -915); ((("e")), 100000000, 0, -916); ((("f")), 100000000, 0, -917)], (0)), 100000000, 0, -919)]), ((Tag3 ((("fmt", 1185)), [((("a")), 100000000, 0, -912); ((("b")), 100000000, 0, -913); ((("c")), 100000000, 0, -914); ((("d")), 100000000, 0, -915); ((("e")), 100000000, 0, -916); ((("f")), 100000000, 0, -917)], (0)), 100000000, 0, -911)), (("src/format_lifter.ml", 177, 7784, 7786), ("src/format_lifter.ml", 178, 7855, 7884), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 113)); (("Formatting_gen", 407), ([(Tag3 ((("formatting_gen", 1182)), [((("a1")), 100000000, 0, -921); ((("b")), 100000000, 0, -922); ((("c")), 100000000, 0, -923); ((("d1")), 100000000, 0, -924); ((("e1")), 100000000, 0, -928); ((("f1")), 100000000, 0, -929)], (0)), 100000000, 0, -927); (Tag3 ((("fmt", 1185)), [((("f1")), 100000000, 0, -929); ((("b")), 100000000, 0, -922); ((("c")), 100000000, 0, -923); ((("e1")), 100000000, 0, -928); ((("e2")), 100000000, 0, -925); ((("f2")), 100000000, 0, -926)], (0)), 100000000, 0, -930)]), ((Tag3 ((("fmt", 1185)), [((("a1")), 100000000, 0, -921); ((("b")), 100000000, 0, -922); ((("c")), 100000000, 0, -923); ((("d1")), 100000000, 0, -924); ((("e2")), 100000000, 0, -925); ((("f2")), 100000000, 0, -926)], (0)), 100000000, 0, -920)), (("src/format_lifter.ml", 179, 7886, 7888), ("src/format_lifter.ml", 180, 7959, 8023), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 114)); (("Reader", 408), ([(Tag3 ((("fmt", 1185)), [((("a")), 100000000, 0, -933); ((("b")), 100000000, 0, -935); ((("c")), 100000000, 0, -936); ((("d")), 100000000, 0, -938); ((("e")), 100000000, 0, -940); ((("f")), 100000000, 0, -941)], (0)), 100000000, 0, -942)]), ((Tag3 ((("fmt", 1185)), [(Tag1 (0, ((("x")), 100000000, 0, -934), ((("a")), 100000000, 0, -933), 0), 100000000, 0, -932); ((("b")), 100000000, 0, -935); ((("c")), 100000000, 0, -936); (Tag1 (0, (Tag1 (0, ((("b")), 100000000, 0, -935), ((("x")), 100000000, 0, -934), 0), 100000000, 0, -939), ((("d")), 100000000, 0, -938), 0), 100000000, 0, -937); ((("e")), 100000000, 0, -940); ((("f")), 100000000, 0, -941)], (0)), 100000000, 0, -931)), (("src/format_lifter.ml", 181, 8025, 8027), ("src/format_lifter.ml", 182, 8088, 8119), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 115)); (("Scan_char_set", 409), ([(Tag3 ((("pad_option", 1176)), 0, (0)), 100000000, 0, -952); (Tag3 ((("char_set", 1173)), 0, (0)), 100000000, 0, -953); (Tag3 ((("fmt", 1185)), [((("a")), 100000000, 0, -945); ((("b")), 100000000, 0, -947); ((("c")), 100000000, 0, -948); ((("d")), 100000000, 0, -949); ((("e")), 100000000, 0, -950); ((("f")), 100000000, 0, -951)], (0)), 100000000, 0, -954)]), ((Tag3 ((("fmt", 1185)), [(Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -946), ((("a")), 100000000, 0, -945), 0), 100000000, 0, -944); ((("b")), 100000000, 0, -947); ((("c")), 100000000, 0, -948); ((("d")), 100000000, 0, -949); ((("e")), 100000000, 0, -950); ((("f")), 100000000, 0, -951)], (0)), 100000000, 0, -943)), (("src/format_lifter.ml", 183, 8121, 8123), ("src/format_lifter.ml", 184, 8196, 8236), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 116)); (("Scan_get_counter", 410), ([(Tag3 ((("counter", 1174)), 0, (0)), 100000000, 0, -964); (Tag3 ((("fmt", 1185)), [((("a")), 100000000, 0, -957); ((("b")), 100000000, 0, -959); ((("c")), 100000000, 0, -960); ((("d")), 100000000, 0, -961); ((("e")), 100000000, 0, -962); ((("f")), 100000000, 0, -963)], (0)), 100000000, 0, -965)]), ((Tag3 ((("fmt", 1185)), [(Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -958), ((("a")), 100000000, 0, -957), 0), 100000000, 0, -956); ((("b")), 100000000, 0, -959); ((("c")), 100000000, 0, -960); ((("d")), 100000000, 0, -961); ((("e")), 100000000, 0, -962); ((("f")), 100000000, 0, -963)], (0)), 100000000, 0, -955)), (("src/format_lifter.ml", 185, 8238, 8240), ("src/format_lifter.ml", 186, 8314, 8339), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 117)); (("Scan_next_char", 411), ([(Tag3 ((("fmt", 1185)), [((("a")), 100000000, 0, -968); ((("b")), 100000000, 0, -970); ((("c")), 100000000, 0, -971); ((("d")), 100000000, 0, -972); ((("e")), 100000000, 0, -973); ((("f")), 100000000, 0, -974)], (0)), 100000000, 0, -975)]), ((Tag3 ((("fmt", 1185)), [(Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -969), ((("a")), 100000000, 0, -968), 0), 100000000, 0, -967); ((("b")), 100000000, 0, -970); ((("c")), 100000000, 0, -971); ((("d")), 100000000, 0, -972); ((("e")), 100000000, 0, -973); ((("f")), 100000000, 0, -974)], (0)), 100000000, 0, -966)), (("src/format_lifter.ml", 187, 8341, 8343), ("src/format_lifter.ml", 188, 8411, 8432), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 118)); (("Ignored_param", 412), ([(Tag3 ((("ignored", 1186)), [((("a")), 100000000, 0, -977); ((("b")), 100000000, 0, -978); ((("c")), 100000000, 0, -979); ((("d")), 100000000, 0, -980); ((("y")), 100000000, 0, -984); ((("x")), 100000000, 0, -985)], (0)), 100000000, 0, -983); (Tag3 ((("fmt", 1185)), [((("x")), 100000000, 0, -985); ((("b")), 100000000, 0, -978); ((("c")), 100000000, 0, -979); ((("y")), 100000000, 0, -984); ((("e")), 100000000, 0, -981); ((("f")), 100000000, 0, -982)], (0)), 100000000, 0, -986)]), ((Tag3 ((("fmt", 1185)), [((("a")), 100000000, 0, -977); ((("b")), 100000000, 0, -978); ((("c")), 100000000, 0, -979); ((("d")), 100000000, 0, -980); ((("e")), 100000000, 0, -981); ((("f")), 100000000, 0, -982)], (0)), 100000000, 0, -976)), (("src/format_lifter.ml", 189, 8434, 8436), ("src/format_lifter.ml", 190, 8506, 8551), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 119)); (("Custom", 413), ([(Tag3 ((("custom_arity", 1179)), [((("a")), 100000000, 0, -995); ((("x")), 100000000, 0, -996); ((("y")), 100000000, 0, -988)], (0)), 100000000, 0, -994); (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -998), ((("x")), 100000000, 0, -996), 0), 100000000, 0, -997); (Tag3 ((("fmt", 1185)), [((("a")), 100000000, 0, -995); ((("b")), 100000000, 0, -989); ((("c")), 100000000, 0, -990); ((("d")), 100000000, 0, -991); ((("e")), 100000000, 0, -992); ((("f")), 100000000, 0, -993)], (0)), 100000000, 0, -999)]), ((Tag3 ((("fmt", 1185)), [((("y")), 100000000, 0, -988); ((("b")), 100000000, 0, -989); ((("c")), 100000000, 0, -990); ((("d")), 100000000, 0, -991); ((("e")), 100000000, 0, -992); ((("f")), 100000000, 0, -993)], (0)), 100000000, 0, -987)), (("src/format_lifter.ml", 191, 8553, 8555), ("src/format_lifter.ml", 192, 8626, 8671), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 120)); (("End_of_format", 414), (0), ((Tag3 ((("fmt", 1185)), [((("f")), 100000000, 0, -1001); ((("b")), 100000000, 0, -1002); ((("c")), 100000000, 0, -1003); ((("e")), 100000000, 0, -1004); ((("e")), 100000000, 0, -1004); ((("f")), 100000000, 0, -1001)], (0)), 100000000, 0, -1000)), (("src/format_lifter.ml", 193, 8673, 8675), ("src/format_lifter.ml", 193, 8673, 8720), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 121))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("CamlinternalFormatBasics")), "fmt"), [((("a")), 100000000, 0, -687); ((("b")), 100000000, 0, -688); ((("c")), 100000000, 0, -689); ((("d")), 100000000, 0, -690); ((("e")), 100000000, 0, -691); ((("f")), 100000000, 0, -692)], (0)), 100000000, 0, -686)), [63; 15; 15; 63; 15; 15], [0; 0; 0; 0; 0; 0], 0, 0, (("src/format_lifter.ml", 140, 5703, 5703), ("src/format_lifter.ml", 193, 8673, 8720), 0), 0, 0, 0, Tag1 ("Ppx_custom_printf__Format_lifter", 17)), 2, 0); Tag1 (("ignored", 1186), ([((("a")), 100000000, 0, -569); ((("b")), 100000000, 0, -570); ((("c")), 100000000, 0, -571); ((("d")), 100000000, 0, -572); ((("e")), 100000000, 0, -573); ((("f")), 100000000, 0, -574)], 6, Tag1 ([(("Ignored_char", 415), (0), ((Tag3 ((("ignored", 1186)), [((("a")), 100000000, 0, -576); ((("b")), 100000000, 0, -577); ((("c")), 100000000, 0, -578); ((("d")), 100000000, 0, -579); ((("d")), 100000000, 0, -579); ((("a")), 100000000, 0, -576)], (0)), 100000000, 0, -575)), (("src/format_lifter.ml", 196, 8823, 8825), ("src/format_lifter.ml", 196, 8823, 8873), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 122)); (("Ignored_caml_char", 416), (0), ((Tag3 ((("ignored", 1186)), [((("a")), 100000000, 0, -581); ((("b")), 100000000, 0, -582); ((("c")), 100000000, 0, -583); ((("d")), 100000000, 0, -584); ((("d")), 100000000, 0, -584); ((("a")), 100000000, 0, -581)], (0)), 100000000, 0, -580)), (("src/format_lifter.ml", 197, 8875, 8877), ("src/format_lifter.ml", 197, 8875, 8930), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 123)); (("Ignored_string", 417), ([(Tag3 ((("pad_option", 1176)), 0, (0)), 100000000, 0, -590)]), ((Tag3 ((("ignored", 1186)), [((("a")), 100000000, 0, -586); ((("b")), 100000000, 0, -587); ((("c")), 100000000, 0, -588); ((("d")), 100000000, 0, -589); ((("d")), 100000000, 0, -589); ((("a")), 100000000, 0, -586)], (0)), 100000000, 0, -585)), (("src/format_lifter.ml", 198, 8932, 8934), ("src/format_lifter.ml", 198, 8932, 8998), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 124)); (("Ignored_caml_string", 418), ([(Tag3 ((("pad_option", 1176)), 0, (0)), 100000000, 0, -596)]), ((Tag3 ((("ignored", 1186)), [((("a")), 100000000, 0, -592); ((("b")), 100000000, 0, -593); ((("c")), 100000000, 0, -594); ((("d")), 100000000, 0, -595); ((("d")), 100000000, 0, -595); ((("a")), 100000000, 0, -592)], (0)), 100000000, 0, -591)), (("src/format_lifter.ml", 199, 9000, 9002), ("src/format_lifter.ml", 199, 9000, 9071), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 125)); (("Ignored_int", 419), ([(Tag3 ((("int_conv", 1169)), 0, (0)), 100000000, 0, -602); (Tag3 ((("pad_option", 1176)), 0, (0)), 100000000, 0, -603)]), ((Tag3 ((("ignored", 1186)), [((("a")), 100000000, 0, -598); ((("b")), 100000000, 0, -599); ((("c")), 100000000, 0, -600); ((("d")), 100000000, 0, -601); ((("d")), 100000000, 0, -601); ((("a")), 100000000, 0, -598)], (0)), 100000000, 0, -597)), (("src/format_lifter.ml", 200, 9073, 9075), ("src/format_lifter.ml", 200, 9073, 9147), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 126)); (("Ignored_int32", 420), ([(Tag3 ((("int_conv", 1169)), 0, (0)), 100000000, 0, -609); (Tag3 ((("pad_option", 1176)), 0, (0)), 100000000, 0, -610)]), ((Tag3 ((("ignored", 1186)), [((("a")), 100000000, 0, -605); ((("b")), 100000000, 0, -606); ((("c")), 100000000, 0, -607); ((("d")), 100000000, 0, -608); ((("d")), 100000000, 0, -608); ((("a")), 100000000, 0, -605)], (0)), 100000000, 0, -604)), (("src/format_lifter.ml", 201, 9149, 9151), ("src/format_lifter.ml", 201, 9149, 9225), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 127)); (("Ignored_nativeint", 421), ([(Tag3 ((("int_conv", 1169)), 0, (0)), 100000000, 0, -616); (Tag3 ((("pad_option", 1176)), 0, (0)), 100000000, 0, -617)]), ((Tag3 ((("ignored", 1186)), [((("a")), 100000000, 0, -612); ((("b")), 100000000, 0, -613); ((("c")), 100000000, 0, -614); ((("d")), 100000000, 0, -615); ((("d")), 100000000, 0, -615); ((("a")), 100000000, 0, -612)], (0)), 100000000, 0, -611)), (("src/format_lifter.ml", 203, 9229, 9231), ("src/format_lifter.ml", 204, 9299, 9312), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 128)); (("Ignored_int64", 422), ([(Tag3 ((("int_conv", 1169)), 0, (0)), 100000000, 0, -623); (Tag3 ((("pad_option", 1176)), 0, (0)), 100000000, 0, -624)]), ((Tag3 ((("ignored", 1186)), [((("a")), 100000000, 0, -619); ((("b")), 100000000, 0, -620); ((("c")), 100000000, 0, -621); ((("d")), 100000000, 0, -622); ((("d")), 100000000, 0, -622); ((("a")), 100000000, 0, -619)], (0)), 100000000, 0, -618)), (("src/format_lifter.ml", 205, 9314, 9316), ("src/format_lifter.ml", 205, 9314, 9390), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 129)); (("Ignored_float", 423), ([(Tag3 ((("pad_option", 1176)), 0, (0)), 100000000, 0, -630); (Tag3 ((("prec_option", 1178)), 0, (0)), 100000000, 0, -631)]), ((Tag3 ((("ignored", 1186)), [((("a")), 100000000, 0, -626); ((("b")), 100000000, 0, -627); ((("c")), 100000000, 0, -628); ((("d")), 100000000, 0, -629); ((("d")), 100000000, 0, -629); ((("a")), 100000000, 0, -626)], (0)), 100000000, 0, -625)), (("src/format_lifter.ml", 207, 9394, 9396), ("src/format_lifter.ml", 208, 9466, 9475), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 130)); (("Ignored_bool", 424), ([(Tag3 ((("pad_option", 1176)), 0, (0)), 100000000, 0, -637)]), ((Tag3 ((("ignored", 1186)), [((("a")), 100000000, 0, -633); ((("b")), 100000000, 0, -634); ((("c")), 100000000, 0, -635); ((("d")), 100000000, 0, -636); ((("d")), 100000000, 0, -636); ((("a")), 100000000, 0, -633)], (0)), 100000000, 0, -632)), (("src/format_lifter.ml", 209, 9477, 9479), ("src/format_lifter.ml", 209, 9477, 9541), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 131)); (("Ignored_format_arg", 425), ([(Tag3 ((("pad_option", 1176)), 0, (0)), 100000000, 0, -643); (Tag3 ((("fmtty", 1183)), [((("g")), 100000000, 0, -645); ((("h")), 100000000, 0, -646); ((("i")), 100000000, 0, -647); ((("j")), 100000000, 0, -648); ((("k")), 100000000, 0, -649); ((("l")), 100000000, 0, -650)], (0)), 100000000, 0, -644)]), ((Tag3 ((("ignored", 1186)), [((("a")), 100000000, 0, -639); ((("b")), 100000000, 0, -640); ((("c")), 100000000, 0, -641); ((("d")), 100000000, 0, -642); ((("d")), 100000000, 0, -642); ((("a")), 100000000, 0, -639)], (0)), 100000000, 0, -638)), (("src/format_lifter.ml", 210, 9543, 9545), ("src/format_lifter.ml", 211, 9616, 9649), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 132)); (("Ignored_format_subst", 426), ([(Tag3 ((("pad_option", 1176)), 0, (0)), 100000000, 0, -658); (Tag3 ((("fmtty", 1183)), [((("a")), 100000000, 0, -652); ((("b")), 100000000, 0, -653); ((("c")), 100000000, 0, -654); ((("d")), 100000000, 0, -655); ((("e")), 100000000, 0, -656); ((("f")), 100000000, 0, -657)], (0)), 100000000, 0, -659)]), ((Tag3 ((("ignored", 1186)), [((("a")), 100000000, 0, -652); ((("b")), 100000000, 0, -653); ((("c")), 100000000, 0, -654); ((("d")), 100000000, 0, -655); ((("e")), 100000000, 0, -656); ((("f")), 100000000, 0, -657)], (0)), 100000000, 0, -651)), (("src/format_lifter.ml", 212, 9651, 9653), ("src/format_lifter.ml", 213, 9726, 9759), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 133)); (("Ignored_reader", 427), (0), ((Tag3 ((("ignored", 1186)), [((("a")), 100000000, 0, -661); ((("b")), 100000000, 0, -662); ((("c")), 100000000, 0, -663); (Tag1 (0, (Tag1 (0, ((("b")), 100000000, 0, -662), ((("x")), 100000000, 0, -667), 0), 100000000, 0, -666), ((("d")), 100000000, 0, -665), 0), 100000000, 0, -664); ((("d")), 100000000, 0, -665); ((("a")), 100000000, 0, -661)], (0)), 100000000, 0, -660)), (("src/format_lifter.ml", 214, 9761, 9763), ("src/format_lifter.ml", 214, 9761, 9827), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 134)); (("Ignored_scan_char_set", 428), ([(Tag3 ((("pad_option", 1176)), 0, (0)), 100000000, 0, -673); (Tag3 ((("char_set", 1173)), 0, (0)), 100000000, 0, -674)]), ((Tag3 ((("ignored", 1186)), [((("a")), 100000000, 0, -669); ((("b")), 100000000, 0, -670); ((("c")), 100000000, 0, -671); ((("d")), 100000000, 0, -672); ((("d")), 100000000, 0, -672); ((("a")), 100000000, 0, -669)], (0)), 100000000, 0, -668)), (("src/format_lifter.ml", 215, 9829, 9831), ("src/format_lifter.ml", 216, 9899, 9916), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 135)); (("Ignored_scan_get_counter", 429), ([(Tag3 ((("counter", 1174)), 0, (0)), 100000000, 0, -680)]), ((Tag3 ((("ignored", 1186)), [((("a")), 100000000, 0, -676); ((("b")), 100000000, 0, -677); ((("c")), 100000000, 0, -678); ((("d")), 100000000, 0, -679); ((("d")), 100000000, 0, -679); ((("a")), 100000000, 0, -676)], (0)), 100000000, 0, -675)), (("src/format_lifter.ml", 217, 9918, 9920), ("src/format_lifter.ml", 217, 9918, 9991), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 136)); (("Ignored_scan_next_char", 430), (0), ((Tag3 ((("ignored", 1186)), [((("a")), 100000000, 0, -682); ((("b")), 100000000, 0, -683); ((("c")), 100000000, 0, -684); ((("d")), 100000000, 0, -685); ((("d")), 100000000, 0, -685); ((("a")), 100000000, 0, -682)], (0)), 100000000, 0, -681)), (("src/format_lifter.ml", 218, 9993, 9995), ("src/format_lifter.ml", 218, 9993, 10053), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 137))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("CamlinternalFormatBasics")), "ignored"), [((("a")), 100000000, 0, -569); ((("b")), 100000000, 0, -570); ((("c")), 100000000, 0, -571); ((("d")), 100000000, 0, -572); ((("e")), 100000000, 0, -573); ((("f")), 100000000, 0, -574)], (0)), 100000000, 0, -568)), [63; 15; 15; 63; 15; 15], [0; 0; 0; 0; 0; 0], 0, 0, (("src/format_lifter.ml", 194, 8722, 8722), ("src/format_lifter.ml", 218, 9993, 10053), 0), 0, 0, 0, Tag1 ("Ppx_custom_printf__Format_lifter", 18)), 2, 0); Tag1 (("format6", 1187), ([((("a")), 100000000, 0, -560); ((("b")), 100000000, 0, -561); ((("c")), 100000000, 0, -562); ((("d")), 100000000, 0, -563); ((("e")), 100000000, 0, -564); ((("f")), 100000000, 0, -565)], 6, Tag1 ([(("Format", 431), ([(Tag3 ((("fmt", 1185)), [((("a")), 100000000, 0, -560); ((("b")), 100000000, 0, -561); ((("c")), 100000000, 0, -562); ((("d")), 100000000, 0, -563); ((("e")), 100000000, 0, -564); ((("f")), 100000000, 0, -565)], (0)), 100000000, 0, -566); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -567)]), 0, (("src/format_lifter.ml", 221, 10156, 10158), ("src/format_lifter.ml", 221, 10156, 10207), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 138))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("CamlinternalFormatBasics")), "format6"), [((("a")), 100000000, 0, -560); ((("b")), 100000000, 0, -561); ((("c")), 100000000, 0, -562); ((("d")), 100000000, 0, -563); ((("e")), 100000000, 0, -564); ((("f")), 100000000, 0, -565)], (0)), 100000000, 0, -559)), [63; 15; 15; 63; 15; 15], [0; 0; 0; 0; 0; 0], 0, 0, (("src/format_lifter.ml", 219, 10055, 10055), ("src/format_lifter.ml", 222, 10220, 10288), 0), [(("deriving", (("src/format_lifter.ml", 221, 10156, 10211), ("src/format_lifter.ml", 221, 10156, 10219), 0)), ([([(((("traverse_lift"), (("src/format_lifter.ml", 222, 10220, 10274), ("src/format_lifter.ml", 222, 10220, 10287), 0))), (("src/format_lifter.ml", 222, 10220, 10274), ("src/format_lifter.ml", 222, 10220, 10287), 0), 0, 0)], (("src/format_lifter.ml", 222, 10220, 10274), ("src/format_lifter.ml", 222, 10220, 10287), 0))]), (("src/format_lifter.ml", 221, 10156, 10208), ("src/format_lifter.ml", 222, 10220, 10288), 0))], 0, 0, Tag1 ("Ppx_custom_printf__Format_lifter", 19)), 2, 0); Tag5 (("lift", 1188), ([((("res")), 100000000, 0, -39)], Tag1 (((Tag4 ((Tag5 ("constr", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -276), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("res")), 100000000, 0, -39)], (0)), 100000000, 0, -275), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -274), 0), 100000000, 0, -273), 0), 100000000, 0, -272), (Tag5 ("tuple", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("res")), 100000000, 0, -39)], (0)), 100000000, 0, -43), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -42), 0), 100000000, 0, -41), (Tag5 ("other", 1, (Tag10 ((Tag1 (0, (Tag9 (("a")), 100000000, 0, -75), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -76), [(Tag9 (("a")), 100000000, 0, -75)]), 100000000, 0, -74), (Tag5 ("bool", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -285), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -284), 0), 100000000, 0, -283), (Tag5 ("char", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -282), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -281), 0), 100000000, 0, -280), (Tag5 ("float", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -256), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -255), 0), 100000000, 0, -254), (Tag5 ("int", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -97), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -96), 0), 100000000, 0, -95), (Tag5 ("int32", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -94), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -93), 0), 100000000, 0, -92), (Tag5 ("int64", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -91), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -90), 0), 100000000, 0, -89), (Tag5 ("nativeint", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -85), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -84), 0), 100000000, 0, -83), (Tag5 ("option", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -78), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -82), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -78)], (0)), 100000000, 0, -81), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -80), 0), 100000000, 0, -79), [(Tag9 (("a")), 100000000, 0, -78)]), 100000000, 0, -77), (Tag5 ("string", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -46), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -45), 0), 100000000, 0, -44), (Tag5 ("unit", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -40), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -38), 0), 100000000, 0, -37), (Tag5 ("padty", 1, (Tag10 ((Tag1 (0, (Tag3 ((("padty", 1168)), 0, (0)), 100000000, 0, -61), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -60), 0), 100000000, 0, -59), (Tag5 ("int_conv", 1, (Tag10 ((Tag1 (0, (Tag3 ((("int_conv", 1169)), 0, (0)), 100000000, 0, -88), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -87), 0), 100000000, 0, -86), (Tag5 ("float_flag_conv", 1, (Tag10 ((Tag1 (0, (Tag3 ((("float_flag_conv", 1170)), 0, (0)), 100000000, 0, -250), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -249), 0), 100000000, 0, -248), (Tag5 ("float_kind_conv", 1, (Tag10 ((Tag1 (0, (Tag3 ((("float_kind_conv", 1171)), 0, (0)), 100000000, 0, -247), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -246), 0), 100000000, 0, -245), (Tag5 ("float_conv", 1, (Tag10 ((Tag1 (0, (Tag3 ((("float_conv", 1172)), 0, (0)), 100000000, 0, -253), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -252), 0), 100000000, 0, -251), (Tag5 ("char_set", 1, (Tag10 ((Tag1 (0, (Tag3 ((("char_set", 1173)), 0, (0)), 100000000, 0, -279), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -278), 0), 100000000, 0, -277), (Tag5 ("counter", 1, (Tag10 ((Tag1 (0, (Tag3 ((("counter", 1174)), 0, (0)), 100000000, 0, -271), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -270), 0), 100000000, 0, -269), (Tag5 ("padding", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -63), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -70), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -64), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -69), (Tag1 (0, (Tag3 ((("padding", 1175)), [(Tag9 (("a")), 100000000, 0, -63); (Tag9 (("b")), 100000000, 0, -64)], (0)), 100000000, 0, -68), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -67), 0), 100000000, 0, -66), 0), 100000000, 0, -65), [(Tag9 (("a")), 100000000, 0, -63); (Tag9 (("b")), 100000000, 0, -64)]), 100000000, 0, -62), (Tag5 ("pad_option", 1, (Tag10 ((Tag1 (0, (Tag3 ((("pad_option", 1176)), 0, (0)), 100000000, 0, -73), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -72), 0), 100000000, 0, -71), (Tag5 ("precision", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -48), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -55), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -49), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -54), (Tag1 (0, (Tag3 ((("precision", 1177)), [(Tag9 (("a")), 100000000, 0, -48); (Tag9 (("b")), 100000000, 0, -49)], (0)), 100000000, 0, -53), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -52), 0), 100000000, 0, -51), 0), 100000000, 0, -50), [(Tag9 (("a")), 100000000, 0, -48); (Tag9 (("b")), 100000000, 0, -49)]), 100000000, 0, -47), (Tag5 ("prec_option", 1, (Tag10 ((Tag1 (0, (Tag3 ((("prec_option", 1178)), 0, (0)), 100000000, 0, -58), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -57), 0), 100000000, 0, -56), (Tag5 ("custom_arity", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -258), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -268), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -259), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -267), (Tag1 (0, (Tag1 (0, (Tag9 (("c")), 100000000, 0, -260), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -266), (Tag1 (0, (Tag3 ((("custom_arity", 1179)), [(Tag9 (("a")), 100000000, 0, -258); (Tag9 (("b")), 100000000, 0, -259); (Tag9 (("c")), 100000000, 0, -260)], (0)), 100000000, 0, -265), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -264), 0), 100000000, 0, -263), 0), 100000000, 0, -262), 0), 100000000, 0, -261), [(Tag9 (("a")), 100000000, 0, -258); (Tag9 (("b")), 100000000, 0, -259); (Tag9 (("c")), 100000000, 0, -260)]), 100000000, 0, -257), (Tag5 ("block_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("block_type", 1180)), 0, (0)), 100000000, 0, -288), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -287), 0), 100000000, 0, -286), (Tag5 ("formatting_lit", 1, (Tag10 ((Tag1 (0, (Tag3 ((("formatting_lit", 1181)), 0, (0)), 100000000, 0, -121), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -120), 0), 100000000, 0, -119), (Tag5 ("formatting_gen", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -123), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -142), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -124), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -141), (Tag1 (0, (Tag1 (0, (Tag9 (("c")), 100000000, 0, -125), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -140), (Tag1 (0, (Tag1 (0, (Tag9 (("d")), 100000000, 0, -126), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -139), (Tag1 (0, (Tag1 (0, (Tag9 (("e")), 100000000, 0, -127), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -138), (Tag1 (0, (Tag1 (0, (Tag9 (("f")), 100000000, 0, -128), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -137), (Tag1 (0, (Tag3 ((("formatting_gen", 1182)), [(Tag9 (("a")), 100000000, 0, -123); (Tag9 (("b")), 100000000, 0, -124); (Tag9 (("c")), 100000000, 0, -125); (Tag9 (("d")), 100000000, 0, -126); (Tag9 (("e")), 100000000, 0, -127); (Tag9 (("f")), 100000000, 0, -128)], (0)), 100000000, 0, -136), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -135), 0), 100000000, 0, -134), 0), 100000000, 0, -133), 0), 100000000, 0, -132), 0), 100000000, 0, -131), 0), 100000000, 0, -130), 0), 100000000, 0, -129), [(Tag9 (("a")), 100000000, 0, -123); (Tag9 (("b")), 100000000, 0, -124); (Tag9 (("c")), 100000000, 0, -125); (Tag9 (("d")), 100000000, 0, -126); (Tag9 (("e")), 100000000, 0, -127); (Tag9 (("f")), 100000000, 0, -128)]), 100000000, 0, -122), (Tag5 ("fmtty", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -204), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -223), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -205), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -222), (Tag1 (0, (Tag1 (0, (Tag9 (("c")), 100000000, 0, -206), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -221), (Tag1 (0, (Tag1 (0, (Tag9 (("d")), 100000000, 0, -207), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -220), (Tag1 (0, (Tag1 (0, (Tag9 (("e")), 100000000, 0, -208), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -219), (Tag1 (0, (Tag1 (0, (Tag9 (("f")), 100000000, 0, -209), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -218), (Tag1 (0, (Tag3 ((("fmtty", 1183)), [(Tag9 (("a")), 100000000, 0, -204); (Tag9 (("b")), 100000000, 0, -205); (Tag9 (("c")), 100000000, 0, -206); (Tag9 (("d")), 100000000, 0, -207); (Tag9 (("e")), 100000000, 0, -208); (Tag9 (("f")), 100000000, 0, -209)], (0)), 100000000, 0, -217), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -216), 0), 100000000, 0, -215), 0), 100000000, 0, -214), 0), 100000000, 0, -213), 0), 100000000, 0, -212), 0), 100000000, 0, -211), 0), 100000000, 0, -210), [(Tag9 (("a")), 100000000, 0, -204); (Tag9 (("b")), 100000000, 0, -205); (Tag9 (("c")), 100000000, 0, -206); (Tag9 (("d")), 100000000, 0, -207); (Tag9 (("e")), 100000000, 0, -208); (Tag9 (("f")), 100000000, 0, -209)]), 100000000, 0, -203), (Tag5 ("fmtty_rel", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -165), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -202), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -166), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -201), (Tag1 (0, (Tag1 (0, (Tag9 (("c")), 100000000, 0, -167), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -200), (Tag1 (0, (Tag1 (0, (Tag9 (("d")), 100000000, 0, -168), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -199), (Tag1 (0, (Tag1 (0, (Tag9 (("e")), 100000000, 0, -169), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -198), (Tag1 (0, (Tag1 (0, (Tag9 (("f")), 100000000, 0, -170), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -197), (Tag1 (0, (Tag1 (0, (Tag9 (("g")), 100000000, 0, -171), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -196), (Tag1 (0, (Tag1 (0, (Tag9 (("h")), 100000000, 0, -172), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -195), (Tag1 (0, (Tag1 (0, (Tag9 (("i")), 100000000, 0, -173), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -194), (Tag1 (0, (Tag1 (0, (Tag9 (("j")), 100000000, 0, -174), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -193), (Tag1 (0, (Tag1 (0, (Tag9 (("k")), 100000000, 0, -175), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -192), (Tag1 (0, (Tag1 (0, (Tag9 (("l")), 100000000, 0, -176), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -191), (Tag1 (0, (Tag3 ((("fmtty_rel", 1184)), [(Tag9 (("a")), 100000000, 0, -165); (Tag9 (("b")), 100000000, 0, -166); (Tag9 (("c")), 100000000, 0, -167); (Tag9 (("d")), 100000000, 0, -168); (Tag9 (("e")), 100000000, 0, -169); (Tag9 (("f")), 100000000, 0, -170); (Tag9 (("g")), 100000000, 0, -171); (Tag9 (("h")), 100000000, 0, -172); (Tag9 (("i")), 100000000, 0, -173); (Tag9 (("j")), 100000000, 0, -174); (Tag9 (("k")), 100000000, 0, -175); (Tag9 (("l")), 100000000, 0, -176)], (0)), 100000000, 0, -190), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -189), 0), 100000000, 0, -188), 0), 100000000, 0, -187), 0), 100000000, 0, -186), 0), 100000000, 0, -185), 0), 100000000, 0, -184), 0), 100000000, 0, -183), 0), 100000000, 0, -182), 0), 100000000, 0, -181), 0), 100000000, 0, -180), 0), 100000000, 0, -179), 0), 100000000, 0, -178), 0), 100000000, 0, -177), [(Tag9 (("a")), 100000000, 0, -165); (Tag9 (("b")), 100000000, 0, -166); (Tag9 (("c")), 100000000, 0, -167); (Tag9 (("d")), 100000000, 0, -168); (Tag9 (("e")), 100000000, 0, -169); (Tag9 (("f")), 100000000, 0, -170); (Tag9 (("g")), 100000000, 0, -171); (Tag9 (("h")), 100000000, 0, -172); (Tag9 (("i")), 100000000, 0, -173); (Tag9 (("j")), 100000000, 0, -174); (Tag9 (("k")), 100000000, 0, -175); (Tag9 (("l")), 100000000, 0, -176)]), 100000000, 0, -164), (Tag5 ("fmt", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -225), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -244), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -226), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -243), (Tag1 (0, (Tag1 (0, (Tag9 (("c")), 100000000, 0, -227), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -242), (Tag1 (0, (Tag1 (0, (Tag9 (("d")), 100000000, 0, -228), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -241), (Tag1 (0, (Tag1 (0, (Tag9 (("e")), 100000000, 0, -229), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -240), (Tag1 (0, (Tag1 (0, (Tag9 (("f")), 100000000, 0, -230), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -239), (Tag1 (0, (Tag3 ((("fmt", 1185)), [(Tag9 (("a")), 100000000, 0, -225); (Tag9 (("b")), 100000000, 0, -226); (Tag9 (("c")), 100000000, 0, -227); (Tag9 (("d")), 100000000, 0, -228); (Tag9 (("e")), 100000000, 0, -229); (Tag9 (("f")), 100000000, 0, -230)], (0)), 100000000, 0, -238), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -237), 0), 100000000, 0, -236), 0), 100000000, 0, -235), 0), 100000000, 0, -234), 0), 100000000, 0, -233), 0), 100000000, 0, -232), 0), 100000000, 0, -231), [(Tag9 (("a")), 100000000, 0, -225); (Tag9 (("b")), 100000000, 0, -226); (Tag9 (("c")), 100000000, 0, -227); (Tag9 (("d")), 100000000, 0, -228); (Tag9 (("e")), 100000000, 0, -229); (Tag9 (("f")), 100000000, 0, -230)]), 100000000, 0, -224), (Tag5 ("ignored", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -99), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -118), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -100), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -117), (Tag1 (0, (Tag1 (0, (Tag9 (("c")), 100000000, 0, -101), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -116), (Tag1 (0, (Tag1 (0, (Tag9 (("d")), 100000000, 0, -102), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -115), (Tag1 (0, (Tag1 (0, (Tag9 (("e")), 100000000, 0, -103), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -114), (Tag1 (0, (Tag1 (0, (Tag9 (("f")), 100000000, 0, -104), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -113), (Tag1 (0, (Tag3 ((("ignored", 1186)), [(Tag9 (("a")), 100000000, 0, -99); (Tag9 (("b")), 100000000, 0, -100); (Tag9 (("c")), 100000000, 0, -101); (Tag9 (("d")), 100000000, 0, -102); (Tag9 (("e")), 100000000, 0, -103); (Tag9 (("f")), 100000000, 0, -104)], (0)), 100000000, 0, -112), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -111), 0), 100000000, 0, -110), 0), 100000000, 0, -109), 0), 100000000, 0, -108), 0), 100000000, 0, -107), 0), 100000000, 0, -106), 0), 100000000, 0, -105), [(Tag9 (("a")), 100000000, 0, -99); (Tag9 (("b")), 100000000, 0, -100); (Tag9 (("c")), 100000000, 0, -101); (Tag9 (("d")), 100000000, 0, -102); (Tag9 (("e")), 100000000, 0, -103); (Tag9 (("f")), 100000000, 0, -104)]), 100000000, 0, -98), (Tag5 ("format6", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -144), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -163), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -145), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -162), (Tag1 (0, (Tag1 (0, (Tag9 (("c")), 100000000, 0, -146), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -161), (Tag1 (0, (Tag1 (0, (Tag9 (("d")), 100000000, 0, -147), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -160), (Tag1 (0, (Tag1 (0, (Tag9 (("e")), 100000000, 0, -148), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -159), (Tag1 (0, (Tag1 (0, (Tag9 (("f")), 100000000, 0, -149), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -158), (Tag1 (0, (Tag3 ((("format6", 1187)), [(Tag9 (("a")), 100000000, 0, -144); (Tag9 (("b")), 100000000, 0, -145); (Tag9 (("c")), 100000000, 0, -146); (Tag9 (("d")), 100000000, 0, -147); (Tag9 (("e")), 100000000, 0, -148); (Tag9 (("f")), 100000000, 0, -149)], (0)), 100000000, 0, -157), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -156), 0), 100000000, 0, -155), 0), 100000000, 0, -154), 0), 100000000, 0, -153), 0), 100000000, 0, -152), 0), 100000000, 0, -151), 0), 100000000, 0, -150), [(Tag9 (("a")), 100000000, 0, -144); (Tag9 (("b")), 100000000, 0, -145); (Tag9 (("c")), 100000000, 0, -146); (Tag9 (("d")), 100000000, 0, -147); (Tag9 (("e")), 100000000, 0, -148); (Tag9 (("f")), 100000000, 0, -149)]), 100000000, 0, -143), ((0), 100000000, 0, -524)), 100000000, 0, -558)), 100000000, 0, -557)), 100000000, 0, -556)), 100000000, 0, -555)), 100000000, 0, -554)), 100000000, 0, -553)), 100000000, 0, -552)), 100000000, 0, -551)), 100000000, 0, -550)), 100000000, 0, -549)), 100000000, 0, -548)), 100000000, 0, -547)), 100000000, 0, -546)), 100000000, 0, -545)), 100000000, 0, -544)), 100000000, 0, -543)), 100000000, 0, -542)), 100000000, 0, -541)), 100000000, 0, -540)), 100000000, 0, -539)), 100000000, 0, -538)), 100000000, 0, -537)), 100000000, 0, -536)), 100000000, 0, -535)), 100000000, 0, -534)), 100000000, 0, -533)), 100000000, 0, -532)), 100000000, 0, -531)), 100000000, 0, -530)), 100000000, 0, -529)), 100000000, 0, -528)), 100000000, 0, -527)), 100000000, 0, -526), (([(("lift", 1190)); ((0), 100000000, 0, -524); ((("res")), 100000000, 0, -39)]))), 100000000, 0, -525), ((0), 100000000, 0, -524), 0, (((((0, "block_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("block_type", 1180)), 0, (0)), 100000000, 0, -326), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -325), 0), 100000000, 0, -324)), 0, 1), "bool", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -329), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -328), 0), 100000000, 0, -327)), (0, "char", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -332), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -331), 0), 100000000, 0, -330)), (0, "char_set", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("char_set", 1173)), 0, (0)), 100000000, 0, -335), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -334), 0), 100000000, 0, -333)), 0, 1), 2), 3), "constr", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -340), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("res")), 100000000, 0, -39)], (0)), 100000000, 0, -339), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -338), 0), 100000000, 0, -337), 0), 100000000, 0, -336)), ((0, "counter", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("counter", 1174)), 0, (0)), 100000000, 0, -343), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -342), 0), 100000000, 0, -341)), (0, "custom_arity", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -258), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -352), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -259), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -351), (Tag1 (0, (Tag1 (0, (Tag9 (("c")), 100000000, 0, -260), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -350), (Tag1 (0, (Tag3 ((("custom_arity", 1179)), [(Tag9 (("a")), 100000000, 0, -258); (Tag9 (("b")), 100000000, 0, -259); (Tag9 (("c")), 100000000, 0, -260)], (0)), 100000000, 0, -349), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -348), 0), 100000000, 0, -347), 0), 100000000, 0, -346), 0), 100000000, 0, -345), [(Tag9 (("a")), 100000000, 0, -258); (Tag9 (("b")), 100000000, 0, -259); (Tag9 (("c")), 100000000, 0, -260)]), 100000000, 0, -344)), 0, 1), 2), "float", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -355), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -354), 0), 100000000, 0, -353)), (0, "float_conv", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("float_conv", 1172)), 0, (0)), 100000000, 0, -358), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -357), 0), 100000000, 0, -356)), 0, 1), 3), 4), "float_flag_conv", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("float_flag_conv", 1170)), 0, (0)), 100000000, 0, -361), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -360), 0), 100000000, 0, -359)), (((0, "float_kind_conv", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("float_kind_conv", 1171)), 0, (0)), 100000000, 0, -364), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -363), 0), 100000000, 0, -362)), (0, "fmt", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -225), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -379), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -226), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -378), (Tag1 (0, (Tag1 (0, (Tag9 (("c")), 100000000, 0, -227), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -377), (Tag1 (0, (Tag1 (0, (Tag9 (("d")), 100000000, 0, -228), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -376), (Tag1 (0, (Tag1 (0, (Tag9 (("e")), 100000000, 0, -229), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -375), (Tag1 (0, (Tag1 (0, (Tag9 (("f")), 100000000, 0, -230), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -374), (Tag1 (0, (Tag3 ((("fmt", 1185)), [(Tag9 (("a")), 100000000, 0, -225); (Tag9 (("b")), 100000000, 0, -226); (Tag9 (("c")), 100000000, 0, -227); (Tag9 (("d")), 100000000, 0, -228); (Tag9 (("e")), 100000000, 0, -229); (Tag9 (("f")), 100000000, 0, -230)], (0)), 100000000, 0, -373), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -372), 0), 100000000, 0, -371), 0), 100000000, 0, -370), 0), 100000000, 0, -369), 0), 100000000, 0, -368), 0), 100000000, 0, -367), 0), 100000000, 0, -366), [(Tag9 (("a")), 100000000, 0, -225); (Tag9 (("b")), 100000000, 0, -226); (Tag9 (("c")), 100000000, 0, -227); (Tag9 (("d")), 100000000, 0, -228); (Tag9 (("e")), 100000000, 0, -229); (Tag9 (("f")), 100000000, 0, -230)]), 100000000, 0, -365)), 0, 1), 2), "fmtty", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -204), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -394), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -205), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -393), (Tag1 (0, (Tag1 (0, (Tag9 (("c")), 100000000, 0, -206), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -392), (Tag1 (0, (Tag1 (0, (Tag9 (("d")), 100000000, 0, -207), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -391), (Tag1 (0, (Tag1 (0, (Tag9 (("e")), 100000000, 0, -208), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -390), (Tag1 (0, (Tag1 (0, (Tag9 (("f")), 100000000, 0, -209), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -389), (Tag1 (0, (Tag3 ((("fmtty", 1183)), [(Tag9 (("a")), 100000000, 0, -204); (Tag9 (("b")), 100000000, 0, -205); (Tag9 (("c")), 100000000, 0, -206); (Tag9 (("d")), 100000000, 0, -207); (Tag9 (("e")), 100000000, 0, -208); (Tag9 (("f")), 100000000, 0, -209)], (0)), 100000000, 0, -388), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -387), 0), 100000000, 0, -386), 0), 100000000, 0, -385), 0), 100000000, 0, -384), 0), 100000000, 0, -383), 0), 100000000, 0, -382), 0), 100000000, 0, -381), [(Tag9 (("a")), 100000000, 0, -204); (Tag9 (("b")), 100000000, 0, -205); (Tag9 (("c")), 100000000, 0, -206); (Tag9 (("d")), 100000000, 0, -207); (Tag9 (("e")), 100000000, 0, -208); (Tag9 (("f")), 100000000, 0, -209)]), 100000000, 0, -380)), ((0, "fmtty_rel", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -165), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -421), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -166), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -420), (Tag1 (0, (Tag1 (0, (Tag9 (("c")), 100000000, 0, -167), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -419), (Tag1 (0, (Tag1 (0, (Tag9 (("d")), 100000000, 0, -168), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -418), (Tag1 (0, (Tag1 (0, (Tag9 (("e")), 100000000, 0, -169), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -417), (Tag1 (0, (Tag1 (0, (Tag9 (("f")), 100000000, 0, -170), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -416), (Tag1 (0, (Tag1 (0, (Tag9 (("g")), 100000000, 0, -171), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -415), (Tag1 (0, (Tag1 (0, (Tag9 (("h")), 100000000, 0, -172), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -414), (Tag1 (0, (Tag1 (0, (Tag9 (("i")), 100000000, 0, -173), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -413), (Tag1 (0, (Tag1 (0, (Tag9 (("j")), 100000000, 0, -174), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -412), (Tag1 (0, (Tag1 (0, (Tag9 (("k")), 100000000, 0, -175), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -411), (Tag1 (0, (Tag1 (0, (Tag9 (("l")), 100000000, 0, -176), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -410), (Tag1 (0, (Tag3 ((("fmtty_rel", 1184)), [(Tag9 (("a")), 100000000, 0, -165); (Tag9 (("b")), 100000000, 0, -166); (Tag9 (("c")), 100000000, 0, -167); (Tag9 (("d")), 100000000, 0, -168); (Tag9 (("e")), 100000000, 0, -169); (Tag9 (("f")), 100000000, 0, -170); (Tag9 (("g")), 100000000, 0, -171); (Tag9 (("h")), 100000000, 0, -172); (Tag9 (("i")), 100000000, 0, -173); (Tag9 (("j")), 100000000, 0, -174); (Tag9 (("k")), 100000000, 0, -175); (Tag9 (("l")), 100000000, 0, -176)], (0)), 100000000, 0, -409), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -408), 0), 100000000, 0, -407), 0), 100000000, 0, -406), 0), 100000000, 0, -405), 0), 100000000, 0, -404), 0), 100000000, 0, -403), 0), 100000000, 0, -402), 0), 100000000, 0, -401), 0), 100000000, 0, -400), 0), 100000000, 0, -399), 0), 100000000, 0, -398), 0), 100000000, 0, -397), 0), 100000000, 0, -396), [(Tag9 (("a")), 100000000, 0, -165); (Tag9 (("b")), 100000000, 0, -166); (Tag9 (("c")), 100000000, 0, -167); (Tag9 (("d")), 100000000, 0, -168); (Tag9 (("e")), 100000000, 0, -169); (Tag9 (("f")), 100000000, 0, -170); (Tag9 (("g")), 100000000, 0, -171); (Tag9 (("h")), 100000000, 0, -172); (Tag9 (("i")), 100000000, 0, -173); (Tag9 (("j")), 100000000, 0, -174); (Tag9 (("k")), 100000000, 0, -175); (Tag9 (("l")), 100000000, 0, -176)]), 100000000, 0, -395)), (0, "format6", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -144), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -436), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -145), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -435), (Tag1 (0, (Tag1 (0, (Tag9 (("c")), 100000000, 0, -146), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -434), (Tag1 (0, (Tag1 (0, (Tag9 (("d")), 100000000, 0, -147), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -433), (Tag1 (0, (Tag1 (0, (Tag9 (("e")), 100000000, 0, -148), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -432), (Tag1 (0, (Tag1 (0, (Tag9 (("f")), 100000000, 0, -149), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -431), (Tag1 (0, (Tag3 ((("format6", 1187)), [(Tag9 (("a")), 100000000, 0, -144); (Tag9 (("b")), 100000000, 0, -145); (Tag9 (("c")), 100000000, 0, -146); (Tag9 (("d")), 100000000, 0, -147); (Tag9 (("e")), 100000000, 0, -148); (Tag9 (("f")), 100000000, 0, -149)], (0)), 100000000, 0, -430), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -429), 0), 100000000, 0, -428), 0), 100000000, 0, -427), 0), 100000000, 0, -426), 0), 100000000, 0, -425), 0), 100000000, 0, -424), 0), 100000000, 0, -423), [(Tag9 (("a")), 100000000, 0, -144); (Tag9 (("b")), 100000000, 0, -145); (Tag9 (("c")), 100000000, 0, -146); (Tag9 (("d")), 100000000, 0, -147); (Tag9 (("e")), 100000000, 0, -148); (Tag9 (("f")), 100000000, 0, -149)]), 100000000, 0, -422)), 0, 1), 2), "formatting_gen", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -123), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -451), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -124), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -450), (Tag1 (0, (Tag1 (0, (Tag9 (("c")), 100000000, 0, -125), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -449), (Tag1 (0, (Tag1 (0, (Tag9 (("d")), 100000000, 0, -126), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -448), (Tag1 (0, (Tag1 (0, (Tag9 (("e")), 100000000, 0, -127), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -447), (Tag1 (0, (Tag1 (0, (Tag9 (("f")), 100000000, 0, -128), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -446), (Tag1 (0, (Tag3 ((("formatting_gen", 1182)), [(Tag9 (("a")), 100000000, 0, -123); (Tag9 (("b")), 100000000, 0, -124); (Tag9 (("c")), 100000000, 0, -125); (Tag9 (("d")), 100000000, 0, -126); (Tag9 (("e")), 100000000, 0, -127); (Tag9 (("f")), 100000000, 0, -128)], (0)), 100000000, 0, -445), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -444), 0), 100000000, 0, -443), 0), 100000000, 0, -442), 0), 100000000, 0, -441), 0), 100000000, 0, -440), 0), 100000000, 0, -439), 0), 100000000, 0, -438), [(Tag9 (("a")), 100000000, 0, -123); (Tag9 (("b")), 100000000, 0, -124); (Tag9 (("c")), 100000000, 0, -125); (Tag9 (("d")), 100000000, 0, -126); (Tag9 (("e")), 100000000, 0, -127); (Tag9 (("f")), 100000000, 0, -128)]), 100000000, 0, -437)), 0, 3), 4), "formatting_lit", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("formatting_lit", 1181)), 0, (0)), 100000000, 0, -454), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -453), 0), 100000000, 0, -452)), ((0, "ignored", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -99), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -469), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -100), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -468), (Tag1 (0, (Tag1 (0, (Tag9 (("c")), 100000000, 0, -101), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -467), (Tag1 (0, (Tag1 (0, (Tag9 (("d")), 100000000, 0, -102), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -466), (Tag1 (0, (Tag1 (0, (Tag9 (("e")), 100000000, 0, -103), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -465), (Tag1 (0, (Tag1 (0, (Tag9 (("f")), 100000000, 0, -104), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -464), (Tag1 (0, (Tag3 ((("ignored", 1186)), [(Tag9 (("a")), 100000000, 0, -99); (Tag9 (("b")), 100000000, 0, -100); (Tag9 (("c")), 100000000, 0, -101); (Tag9 (("d")), 100000000, 0, -102); (Tag9 (("e")), 100000000, 0, -103); (Tag9 (("f")), 100000000, 0, -104)], (0)), 100000000, 0, -463), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -462), 0), 100000000, 0, -461), 0), 100000000, 0, -460), 0), 100000000, 0, -459), 0), 100000000, 0, -458), 0), 100000000, 0, -457), 0), 100000000, 0, -456), [(Tag9 (("a")), 100000000, 0, -99); (Tag9 (("b")), 100000000, 0, -100); (Tag9 (("c")), 100000000, 0, -101); (Tag9 (("d")), 100000000, 0, -102); (Tag9 (("e")), 100000000, 0, -103); (Tag9 (("f")), 100000000, 0, -104)]), 100000000, 0, -455)), 0, 1), "int", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -472), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -471), 0), 100000000, 0, -470)), 0, 2), 5), 6), "int32", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -475), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -474), 0), 100000000, 0, -473)), ((0, "int64", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -478), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -477), 0), 100000000, 0, -476)), ((0, "int_conv", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("int_conv", 1169)), 0, (0)), 100000000, 0, -481), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -480), 0), 100000000, 0, -479)), 0, 1), "nativeint", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -484), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -483), 0), 100000000, 0, -482)), (0, "option", (0, 0, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -78), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -489), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -78)], (0)), 100000000, 0, -488), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -487), 0), 100000000, 0, -486), [(Tag9 (("a")), 100000000, 0, -78)]), 100000000, 0, -485)), 0, 1), 2), 3), "other", (0, 0, (Tag10 ((Tag1 (0, (Tag9 (("a")), 100000000, 0, -75), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -491), [(Tag9 (("a")), 100000000, 0, -75)]), 100000000, 0, -490)), ((((0, "pad_option", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("pad_option", 1176)), 0, (0)), 100000000, 0, -494), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -493), 0), 100000000, 0, -492)), 0, 1), "padding", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -63), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -501), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -64), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -500), (Tag1 (0, (Tag3 ((("padding", 1175)), [(Tag9 (("a")), 100000000, 0, -63); (Tag9 (("b")), 100000000, 0, -64)], (0)), 100000000, 0, -499), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -498), 0), 100000000, 0, -497), 0), 100000000, 0, -496), [(Tag9 (("a")), 100000000, 0, -63); (Tag9 (("b")), 100000000, 0, -64)]), 100000000, 0, -495)), 0, 2), "padty", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("padty", 1168)), 0, (0)), 100000000, 0, -504), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -503), 0), 100000000, 0, -502)), ((0, "prec_option", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("prec_option", 1178)), 0, (0)), 100000000, 0, -507), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -506), 0), 100000000, 0, -505)), 0, 1), "precision", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -48), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -514), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -49), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -513), (Tag1 (0, (Tag3 ((("precision", 1177)), [(Tag9 (("a")), 100000000, 0, -48); (Tag9 (("b")), 100000000, 0, -49)], (0)), 100000000, 0, -512), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -511), 0), 100000000, 0, -510), 0), 100000000, 0, -509), [(Tag9 (("a")), 100000000, 0, -48); (Tag9 (("b")), 100000000, 0, -49)]), 100000000, 0, -508)), 0, 2), 3), "string", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -517), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -516), 0), 100000000, 0, -515)), (0, "tuple", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("res")), 100000000, 0, -39)], (0)), 100000000, 0, -520), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -519), 0), 100000000, 0, -518)), (0, "unit", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -523), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -522), 0), 100000000, 0, -521)), 0, 1), 2), 4), 5), 7))), (("lift", 1190)), 0, [63], (("src/format_lifter.ml", 1, 0, 0), ("src/format_lifter.ml", 222, 10220, 10288), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 139)), 1, 0); Tag6 (("lift", 1189), ([((("res")), 100000000, 0, -39)], Tag1 (((Tag4 ((Tag5 ("constr", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -276), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("res")), 100000000, 0, -39)], (0)), 100000000, 0, -275), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -274), 0), 100000000, 0, -273), 0), 100000000, 0, -272), (Tag5 ("tuple", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("res")), 100000000, 0, -39)], (0)), 100000000, 0, -43), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -42), 0), 100000000, 0, -41), (Tag5 ("other", 1, (Tag10 ((Tag1 (0, (Tag9 (("a")), 100000000, 0, -75), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -76), [(Tag9 (("a")), 100000000, 0, -75)]), 100000000, 0, -74), (Tag5 ("bool", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -285), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -284), 0), 100000000, 0, -283), (Tag5 ("char", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -282), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -281), 0), 100000000, 0, -280), (Tag5 ("float", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -256), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -255), 0), 100000000, 0, -254), (Tag5 ("int", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -97), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -96), 0), 100000000, 0, -95), (Tag5 ("int32", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -94), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -93), 0), 100000000, 0, -92), (Tag5 ("int64", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -91), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -90), 0), 100000000, 0, -89), (Tag5 ("nativeint", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -85), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -84), 0), 100000000, 0, -83), (Tag5 ("option", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -78), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -82), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -78)], (0)), 100000000, 0, -81), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -80), 0), 100000000, 0, -79), [(Tag9 (("a")), 100000000, 0, -78)]), 100000000, 0, -77), (Tag5 ("string", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -46), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -45), 0), 100000000, 0, -44), (Tag5 ("unit", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -40), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -38), 0), 100000000, 0, -37), (Tag5 ("padty", 1, (Tag10 ((Tag1 (0, (Tag3 ((("padty", 1168)), 0, (0)), 100000000, 0, -61), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -60), 0), 100000000, 0, -59), (Tag5 ("int_conv", 1, (Tag10 ((Tag1 (0, (Tag3 ((("int_conv", 1169)), 0, (0)), 100000000, 0, -88), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -87), 0), 100000000, 0, -86), (Tag5 ("float_flag_conv", 1, (Tag10 ((Tag1 (0, (Tag3 ((("float_flag_conv", 1170)), 0, (0)), 100000000, 0, -250), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -249), 0), 100000000, 0, -248), (Tag5 ("float_kind_conv", 1, (Tag10 ((Tag1 (0, (Tag3 ((("float_kind_conv", 1171)), 0, (0)), 100000000, 0, -247), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -246), 0), 100000000, 0, -245), (Tag5 ("float_conv", 1, (Tag10 ((Tag1 (0, (Tag3 ((("float_conv", 1172)), 0, (0)), 100000000, 0, -253), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -252), 0), 100000000, 0, -251), (Tag5 ("char_set", 1, (Tag10 ((Tag1 (0, (Tag3 ((("char_set", 1173)), 0, (0)), 100000000, 0, -279), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -278), 0), 100000000, 0, -277), (Tag5 ("counter", 1, (Tag10 ((Tag1 (0, (Tag3 ((("counter", 1174)), 0, (0)), 100000000, 0, -271), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -270), 0), 100000000, 0, -269), (Tag5 ("padding", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -63), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -70), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -64), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -69), (Tag1 (0, (Tag3 ((("padding", 1175)), [(Tag9 (("a")), 100000000, 0, -63); (Tag9 (("b")), 100000000, 0, -64)], (0)), 100000000, 0, -68), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -67), 0), 100000000, 0, -66), 0), 100000000, 0, -65), [(Tag9 (("a")), 100000000, 0, -63); (Tag9 (("b")), 100000000, 0, -64)]), 100000000, 0, -62), (Tag5 ("pad_option", 1, (Tag10 ((Tag1 (0, (Tag3 ((("pad_option", 1176)), 0, (0)), 100000000, 0, -73), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -72), 0), 100000000, 0, -71), (Tag5 ("precision", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -48), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -55), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -49), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -54), (Tag1 (0, (Tag3 ((("precision", 1177)), [(Tag9 (("a")), 100000000, 0, -48); (Tag9 (("b")), 100000000, 0, -49)], (0)), 100000000, 0, -53), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -52), 0), 100000000, 0, -51), 0), 100000000, 0, -50), [(Tag9 (("a")), 100000000, 0, -48); (Tag9 (("b")), 100000000, 0, -49)]), 100000000, 0, -47), (Tag5 ("prec_option", 1, (Tag10 ((Tag1 (0, (Tag3 ((("prec_option", 1178)), 0, (0)), 100000000, 0, -58), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -57), 0), 100000000, 0, -56), (Tag5 ("custom_arity", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -258), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -268), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -259), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -267), (Tag1 (0, (Tag1 (0, (Tag9 (("c")), 100000000, 0, -260), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -266), (Tag1 (0, (Tag3 ((("custom_arity", 1179)), [(Tag9 (("a")), 100000000, 0, -258); (Tag9 (("b")), 100000000, 0, -259); (Tag9 (("c")), 100000000, 0, -260)], (0)), 100000000, 0, -265), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -264), 0), 100000000, 0, -263), 0), 100000000, 0, -262), 0), 100000000, 0, -261), [(Tag9 (("a")), 100000000, 0, -258); (Tag9 (("b")), 100000000, 0, -259); (Tag9 (("c")), 100000000, 0, -260)]), 100000000, 0, -257), (Tag5 ("block_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("block_type", 1180)), 0, (0)), 100000000, 0, -288), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -287), 0), 100000000, 0, -286), (Tag5 ("formatting_lit", 1, (Tag10 ((Tag1 (0, (Tag3 ((("formatting_lit", 1181)), 0, (0)), 100000000, 0, -121), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -120), 0), 100000000, 0, -119), (Tag5 ("formatting_gen", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -123), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -142), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -124), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -141), (Tag1 (0, (Tag1 (0, (Tag9 (("c")), 100000000, 0, -125), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -140), (Tag1 (0, (Tag1 (0, (Tag9 (("d")), 100000000, 0, -126), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -139), (Tag1 (0, (Tag1 (0, (Tag9 (("e")), 100000000, 0, -127), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -138), (Tag1 (0, (Tag1 (0, (Tag9 (("f")), 100000000, 0, -128), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -137), (Tag1 (0, (Tag3 ((("formatting_gen", 1182)), [(Tag9 (("a")), 100000000, 0, -123); (Tag9 (("b")), 100000000, 0, -124); (Tag9 (("c")), 100000000, 0, -125); (Tag9 (("d")), 100000000, 0, -126); (Tag9 (("e")), 100000000, 0, -127); (Tag9 (("f")), 100000000, 0, -128)], (0)), 100000000, 0, -136), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -135), 0), 100000000, 0, -134), 0), 100000000, 0, -133), 0), 100000000, 0, -132), 0), 100000000, 0, -131), 0), 100000000, 0, -130), 0), 100000000, 0, -129), [(Tag9 (("a")), 100000000, 0, -123); (Tag9 (("b")), 100000000, 0, -124); (Tag9 (("c")), 100000000, 0, -125); (Tag9 (("d")), 100000000, 0, -126); (Tag9 (("e")), 100000000, 0, -127); (Tag9 (("f")), 100000000, 0, -128)]), 100000000, 0, -122), (Tag5 ("fmtty", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -204), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -223), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -205), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -222), (Tag1 (0, (Tag1 (0, (Tag9 (("c")), 100000000, 0, -206), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -221), (Tag1 (0, (Tag1 (0, (Tag9 (("d")), 100000000, 0, -207), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -220), (Tag1 (0, (Tag1 (0, (Tag9 (("e")), 100000000, 0, -208), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -219), (Tag1 (0, (Tag1 (0, (Tag9 (("f")), 100000000, 0, -209), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -218), (Tag1 (0, (Tag3 ((("fmtty", 1183)), [(Tag9 (("a")), 100000000, 0, -204); (Tag9 (("b")), 100000000, 0, -205); (Tag9 (("c")), 100000000, 0, -206); (Tag9 (("d")), 100000000, 0, -207); (Tag9 (("e")), 100000000, 0, -208); (Tag9 (("f")), 100000000, 0, -209)], (0)), 100000000, 0, -217), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -216), 0), 100000000, 0, -215), 0), 100000000, 0, -214), 0), 100000000, 0, -213), 0), 100000000, 0, -212), 0), 100000000, 0, -211), 0), 100000000, 0, -210), [(Tag9 (("a")), 100000000, 0, -204); (Tag9 (("b")), 100000000, 0, -205); (Tag9 (("c")), 100000000, 0, -206); (Tag9 (("d")), 100000000, 0, -207); (Tag9 (("e")), 100000000, 0, -208); (Tag9 (("f")), 100000000, 0, -209)]), 100000000, 0, -203), (Tag5 ("fmtty_rel", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -165), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -202), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -166), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -201), (Tag1 (0, (Tag1 (0, (Tag9 (("c")), 100000000, 0, -167), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -200), (Tag1 (0, (Tag1 (0, (Tag9 (("d")), 100000000, 0, -168), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -199), (Tag1 (0, (Tag1 (0, (Tag9 (("e")), 100000000, 0, -169), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -198), (Tag1 (0, (Tag1 (0, (Tag9 (("f")), 100000000, 0, -170), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -197), (Tag1 (0, (Tag1 (0, (Tag9 (("g")), 100000000, 0, -171), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -196), (Tag1 (0, (Tag1 (0, (Tag9 (("h")), 100000000, 0, -172), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -195), (Tag1 (0, (Tag1 (0, (Tag9 (("i")), 100000000, 0, -173), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -194), (Tag1 (0, (Tag1 (0, (Tag9 (("j")), 100000000, 0, -174), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -193), (Tag1 (0, (Tag1 (0, (Tag9 (("k")), 100000000, 0, -175), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -192), (Tag1 (0, (Tag1 (0, (Tag9 (("l")), 100000000, 0, -176), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -191), (Tag1 (0, (Tag3 ((("fmtty_rel", 1184)), [(Tag9 (("a")), 100000000, 0, -165); (Tag9 (("b")), 100000000, 0, -166); (Tag9 (("c")), 100000000, 0, -167); (Tag9 (("d")), 100000000, 0, -168); (Tag9 (("e")), 100000000, 0, -169); (Tag9 (("f")), 100000000, 0, -170); (Tag9 (("g")), 100000000, 0, -171); (Tag9 (("h")), 100000000, 0, -172); (Tag9 (("i")), 100000000, 0, -173); (Tag9 (("j")), 100000000, 0, -174); (Tag9 (("k")), 100000000, 0, -175); (Tag9 (("l")), 100000000, 0, -176)], (0)), 100000000, 0, -190), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -189), 0), 100000000, 0, -188), 0), 100000000, 0, -187), 0), 100000000, 0, -186), 0), 100000000, 0, -185), 0), 100000000, 0, -184), 0), 100000000, 0, -183), 0), 100000000, 0, -182), 0), 100000000, 0, -181), 0), 100000000, 0, -180), 0), 100000000, 0, -179), 0), 100000000, 0, -178), 0), 100000000, 0, -177), [(Tag9 (("a")), 100000000, 0, -165); (Tag9 (("b")), 100000000, 0, -166); (Tag9 (("c")), 100000000, 0, -167); (Tag9 (("d")), 100000000, 0, -168); (Tag9 (("e")), 100000000, 0, -169); (Tag9 (("f")), 100000000, 0, -170); (Tag9 (("g")), 100000000, 0, -171); (Tag9 (("h")), 100000000, 0, -172); (Tag9 (("i")), 100000000, 0, -173); (Tag9 (("j")), 100000000, 0, -174); (Tag9 (("k")), 100000000, 0, -175); (Tag9 (("l")), 100000000, 0, -176)]), 100000000, 0, -164), (Tag5 ("fmt", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -225), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -244), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -226), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -243), (Tag1 (0, (Tag1 (0, (Tag9 (("c")), 100000000, 0, -227), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -242), (Tag1 (0, (Tag1 (0, (Tag9 (("d")), 100000000, 0, -228), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -241), (Tag1 (0, (Tag1 (0, (Tag9 (("e")), 100000000, 0, -229), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -240), (Tag1 (0, (Tag1 (0, (Tag9 (("f")), 100000000, 0, -230), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -239), (Tag1 (0, (Tag3 ((("fmt", 1185)), [(Tag9 (("a")), 100000000, 0, -225); (Tag9 (("b")), 100000000, 0, -226); (Tag9 (("c")), 100000000, 0, -227); (Tag9 (("d")), 100000000, 0, -228); (Tag9 (("e")), 100000000, 0, -229); (Tag9 (("f")), 100000000, 0, -230)], (0)), 100000000, 0, -238), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -237), 0), 100000000, 0, -236), 0), 100000000, 0, -235), 0), 100000000, 0, -234), 0), 100000000, 0, -233), 0), 100000000, 0, -232), 0), 100000000, 0, -231), [(Tag9 (("a")), 100000000, 0, -225); (Tag9 (("b")), 100000000, 0, -226); (Tag9 (("c")), 100000000, 0, -227); (Tag9 (("d")), 100000000, 0, -228); (Tag9 (("e")), 100000000, 0, -229); (Tag9 (("f")), 100000000, 0, -230)]), 100000000, 0, -224), (Tag5 ("ignored", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -99), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -118), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -100), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -117), (Tag1 (0, (Tag1 (0, (Tag9 (("c")), 100000000, 0, -101), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -116), (Tag1 (0, (Tag1 (0, (Tag9 (("d")), 100000000, 0, -102), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -115), (Tag1 (0, (Tag1 (0, (Tag9 (("e")), 100000000, 0, -103), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -114), (Tag1 (0, (Tag1 (0, (Tag9 (("f")), 100000000, 0, -104), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -113), (Tag1 (0, (Tag3 ((("ignored", 1186)), [(Tag9 (("a")), 100000000, 0, -99); (Tag9 (("b")), 100000000, 0, -100); (Tag9 (("c")), 100000000, 0, -101); (Tag9 (("d")), 100000000, 0, -102); (Tag9 (("e")), 100000000, 0, -103); (Tag9 (("f")), 100000000, 0, -104)], (0)), 100000000, 0, -112), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -111), 0), 100000000, 0, -110), 0), 100000000, 0, -109), 0), 100000000, 0, -108), 0), 100000000, 0, -107), 0), 100000000, 0, -106), 0), 100000000, 0, -105), [(Tag9 (("a")), 100000000, 0, -99); (Tag9 (("b")), 100000000, 0, -100); (Tag9 (("c")), 100000000, 0, -101); (Tag9 (("d")), 100000000, 0, -102); (Tag9 (("e")), 100000000, 0, -103); (Tag9 (("f")), 100000000, 0, -104)]), 100000000, 0, -98), (Tag5 ("format6", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -144), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -163), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -145), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -162), (Tag1 (0, (Tag1 (0, (Tag9 (("c")), 100000000, 0, -146), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -161), (Tag1 (0, (Tag1 (0, (Tag9 (("d")), 100000000, 0, -147), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -160), (Tag1 (0, (Tag1 (0, (Tag9 (("e")), 100000000, 0, -148), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -159), (Tag1 (0, (Tag1 (0, (Tag9 (("f")), 100000000, 0, -149), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -158), (Tag1 (0, (Tag3 ((("format6", 1187)), [(Tag9 (("a")), 100000000, 0, -144); (Tag9 (("b")), 100000000, 0, -145); (Tag9 (("c")), 100000000, 0, -146); (Tag9 (("d")), 100000000, 0, -147); (Tag9 (("e")), 100000000, 0, -148); (Tag9 (("f")), 100000000, 0, -149)], (0)), 100000000, 0, -157), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -156), 0), 100000000, 0, -155), 0), 100000000, 0, -154), 0), 100000000, 0, -153), 0), 100000000, 0, -152), 0), 100000000, 0, -151), 0), 100000000, 0, -150), [(Tag9 (("a")), 100000000, 0, -144); (Tag9 (("b")), 100000000, 0, -145); (Tag9 (("c")), 100000000, 0, -146); (Tag9 (("d")), 100000000, 0, -147); (Tag9 (("e")), 100000000, 0, -148); (Tag9 (("f")), 100000000, 0, -149)]), 100000000, 0, -143), ((0), 100000000, 0, -524)), 100000000, 0, -558)), 100000000, 0, -557)), 100000000, 0, -556)), 100000000, 0, -555)), 100000000, 0, -554)), 100000000, 0, -553)), 100000000, 0, -552)), 100000000, 0, -551)), 100000000, 0, -550)), 100000000, 0, -549)), 100000000, 0, -548)), 100000000, 0, -547)), 100000000, 0, -546)), 100000000, 0, -545)), 100000000, 0, -544)), 100000000, 0, -543)), 100000000, 0, -542)), 100000000, 0, -541)), 100000000, 0, -540)), 100000000, 0, -539)), 100000000, 0, -538)), 100000000, 0, -537)), 100000000, 0, -536)), 100000000, 0, -535)), 100000000, 0, -534)), 100000000, 0, -533)), 100000000, 0, -532)), 100000000, 0, -531)), 100000000, 0, -530)), 100000000, 0, -529)), 100000000, 0, -528)), 100000000, 0, -527)), 100000000, 0, -526), (([(("lift", 1190)); ((0), 100000000, 0, -524); ((("res")), 100000000, 0, -39)]))), 100000000, 0, -525), ((0), 100000000, 0, -524), 0, (((((0, "block_type", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("block_type", 1180)), 0, (0)), 100000000, 0, -326), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -325), 0), 100000000, 0, -324)), 0, 1), "bool", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -329), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -328), 0), 100000000, 0, -327)), (0, "char", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -332), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -331), 0), 100000000, 0, -330)), (0, "char_set", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("char_set", 1173)), 0, (0)), 100000000, 0, -335), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -334), 0), 100000000, 0, -333)), 0, 1), 2), 3), "constr", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -340), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("res")), 100000000, 0, -39)], (0)), 100000000, 0, -339), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -338), 0), 100000000, 0, -337), 0), 100000000, 0, -336)), ((0, "counter", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("counter", 1174)), 0, (0)), 100000000, 0, -343), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -342), 0), 100000000, 0, -341)), (0, "custom_arity", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -258), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -352), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -259), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -351), (Tag1 (0, (Tag1 (0, (Tag9 (("c")), 100000000, 0, -260), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -350), (Tag1 (0, (Tag3 ((("custom_arity", 1179)), [(Tag9 (("a")), 100000000, 0, -258); (Tag9 (("b")), 100000000, 0, -259); (Tag9 (("c")), 100000000, 0, -260)], (0)), 100000000, 0, -349), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -348), 0), 100000000, 0, -347), 0), 100000000, 0, -346), 0), 100000000, 0, -345), [(Tag9 (("a")), 100000000, 0, -258); (Tag9 (("b")), 100000000, 0, -259); (Tag9 (("c")), 100000000, 0, -260)]), 100000000, 0, -344)), 0, 1), 2), "float", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -355), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -354), 0), 100000000, 0, -353)), (0, "float_conv", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("float_conv", 1172)), 0, (0)), 100000000, 0, -358), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -357), 0), 100000000, 0, -356)), 0, 1), 3), 4), "float_flag_conv", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("float_flag_conv", 1170)), 0, (0)), 100000000, 0, -361), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -360), 0), 100000000, 0, -359)), (((0, "float_kind_conv", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("float_kind_conv", 1171)), 0, (0)), 100000000, 0, -364), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -363), 0), 100000000, 0, -362)), (0, "fmt", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -225), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -379), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -226), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -378), (Tag1 (0, (Tag1 (0, (Tag9 (("c")), 100000000, 0, -227), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -377), (Tag1 (0, (Tag1 (0, (Tag9 (("d")), 100000000, 0, -228), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -376), (Tag1 (0, (Tag1 (0, (Tag9 (("e")), 100000000, 0, -229), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -375), (Tag1 (0, (Tag1 (0, (Tag9 (("f")), 100000000, 0, -230), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -374), (Tag1 (0, (Tag3 ((("fmt", 1185)), [(Tag9 (("a")), 100000000, 0, -225); (Tag9 (("b")), 100000000, 0, -226); (Tag9 (("c")), 100000000, 0, -227); (Tag9 (("d")), 100000000, 0, -228); (Tag9 (("e")), 100000000, 0, -229); (Tag9 (("f")), 100000000, 0, -230)], (0)), 100000000, 0, -373), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -372), 0), 100000000, 0, -371), 0), 100000000, 0, -370), 0), 100000000, 0, -369), 0), 100000000, 0, -368), 0), 100000000, 0, -367), 0), 100000000, 0, -366), [(Tag9 (("a")), 100000000, 0, -225); (Tag9 (("b")), 100000000, 0, -226); (Tag9 (("c")), 100000000, 0, -227); (Tag9 (("d")), 100000000, 0, -228); (Tag9 (("e")), 100000000, 0, -229); (Tag9 (("f")), 100000000, 0, -230)]), 100000000, 0, -365)), 0, 1), 2), "fmtty", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -204), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -394), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -205), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -393), (Tag1 (0, (Tag1 (0, (Tag9 (("c")), 100000000, 0, -206), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -392), (Tag1 (0, (Tag1 (0, (Tag9 (("d")), 100000000, 0, -207), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -391), (Tag1 (0, (Tag1 (0, (Tag9 (("e")), 100000000, 0, -208), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -390), (Tag1 (0, (Tag1 (0, (Tag9 (("f")), 100000000, 0, -209), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -389), (Tag1 (0, (Tag3 ((("fmtty", 1183)), [(Tag9 (("a")), 100000000, 0, -204); (Tag9 (("b")), 100000000, 0, -205); (Tag9 (("c")), 100000000, 0, -206); (Tag9 (("d")), 100000000, 0, -207); (Tag9 (("e")), 100000000, 0, -208); (Tag9 (("f")), 100000000, 0, -209)], (0)), 100000000, 0, -388), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -387), 0), 100000000, 0, -386), 0), 100000000, 0, -385), 0), 100000000, 0, -384), 0), 100000000, 0, -383), 0), 100000000, 0, -382), 0), 100000000, 0, -381), [(Tag9 (("a")), 100000000, 0, -204); (Tag9 (("b")), 100000000, 0, -205); (Tag9 (("c")), 100000000, 0, -206); (Tag9 (("d")), 100000000, 0, -207); (Tag9 (("e")), 100000000, 0, -208); (Tag9 (("f")), 100000000, 0, -209)]), 100000000, 0, -380)), ((0, "fmtty_rel", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -165), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -421), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -166), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -420), (Tag1 (0, (Tag1 (0, (Tag9 (("c")), 100000000, 0, -167), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -419), (Tag1 (0, (Tag1 (0, (Tag9 (("d")), 100000000, 0, -168), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -418), (Tag1 (0, (Tag1 (0, (Tag9 (("e")), 100000000, 0, -169), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -417), (Tag1 (0, (Tag1 (0, (Tag9 (("f")), 100000000, 0, -170), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -416), (Tag1 (0, (Tag1 (0, (Tag9 (("g")), 100000000, 0, -171), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -415), (Tag1 (0, (Tag1 (0, (Tag9 (("h")), 100000000, 0, -172), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -414), (Tag1 (0, (Tag1 (0, (Tag9 (("i")), 100000000, 0, -173), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -413), (Tag1 (0, (Tag1 (0, (Tag9 (("j")), 100000000, 0, -174), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -412), (Tag1 (0, (Tag1 (0, (Tag9 (("k")), 100000000, 0, -175), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -411), (Tag1 (0, (Tag1 (0, (Tag9 (("l")), 100000000, 0, -176), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -410), (Tag1 (0, (Tag3 ((("fmtty_rel", 1184)), [(Tag9 (("a")), 100000000, 0, -165); (Tag9 (("b")), 100000000, 0, -166); (Tag9 (("c")), 100000000, 0, -167); (Tag9 (("d")), 100000000, 0, -168); (Tag9 (("e")), 100000000, 0, -169); (Tag9 (("f")), 100000000, 0, -170); (Tag9 (("g")), 100000000, 0, -171); (Tag9 (("h")), 100000000, 0, -172); (Tag9 (("i")), 100000000, 0, -173); (Tag9 (("j")), 100000000, 0, -174); (Tag9 (("k")), 100000000, 0, -175); (Tag9 (("l")), 100000000, 0, -176)], (0)), 100000000, 0, -409), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -408), 0), 100000000, 0, -407), 0), 100000000, 0, -406), 0), 100000000, 0, -405), 0), 100000000, 0, -404), 0), 100000000, 0, -403), 0), 100000000, 0, -402), 0), 100000000, 0, -401), 0), 100000000, 0, -400), 0), 100000000, 0, -399), 0), 100000000, 0, -398), 0), 100000000, 0, -397), 0), 100000000, 0, -396), [(Tag9 (("a")), 100000000, 0, -165); (Tag9 (("b")), 100000000, 0, -166); (Tag9 (("c")), 100000000, 0, -167); (Tag9 (("d")), 100000000, 0, -168); (Tag9 (("e")), 100000000, 0, -169); (Tag9 (("f")), 100000000, 0, -170); (Tag9 (("g")), 100000000, 0, -171); (Tag9 (("h")), 100000000, 0, -172); (Tag9 (("i")), 100000000, 0, -173); (Tag9 (("j")), 100000000, 0, -174); (Tag9 (("k")), 100000000, 0, -175); (Tag9 (("l")), 100000000, 0, -176)]), 100000000, 0, -395)), (0, "format6", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -144), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -436), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -145), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -435), (Tag1 (0, (Tag1 (0, (Tag9 (("c")), 100000000, 0, -146), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -434), (Tag1 (0, (Tag1 (0, (Tag9 (("d")), 100000000, 0, -147), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -433), (Tag1 (0, (Tag1 (0, (Tag9 (("e")), 100000000, 0, -148), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -432), (Tag1 (0, (Tag1 (0, (Tag9 (("f")), 100000000, 0, -149), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -431), (Tag1 (0, (Tag3 ((("format6", 1187)), [(Tag9 (("a")), 100000000, 0, -144); (Tag9 (("b")), 100000000, 0, -145); (Tag9 (("c")), 100000000, 0, -146); (Tag9 (("d")), 100000000, 0, -147); (Tag9 (("e")), 100000000, 0, -148); (Tag9 (("f")), 100000000, 0, -149)], (0)), 100000000, 0, -430), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -429), 0), 100000000, 0, -428), 0), 100000000, 0, -427), 0), 100000000, 0, -426), 0), 100000000, 0, -425), 0), 100000000, 0, -424), 0), 100000000, 0, -423), [(Tag9 (("a")), 100000000, 0, -144); (Tag9 (("b")), 100000000, 0, -145); (Tag9 (("c")), 100000000, 0, -146); (Tag9 (("d")), 100000000, 0, -147); (Tag9 (("e")), 100000000, 0, -148); (Tag9 (("f")), 100000000, 0, -149)]), 100000000, 0, -422)), 0, 1), 2), "formatting_gen", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -123), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -451), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -124), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -450), (Tag1 (0, (Tag1 (0, (Tag9 (("c")), 100000000, 0, -125), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -449), (Tag1 (0, (Tag1 (0, (Tag9 (("d")), 100000000, 0, -126), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -448), (Tag1 (0, (Tag1 (0, (Tag9 (("e")), 100000000, 0, -127), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -447), (Tag1 (0, (Tag1 (0, (Tag9 (("f")), 100000000, 0, -128), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -446), (Tag1 (0, (Tag3 ((("formatting_gen", 1182)), [(Tag9 (("a")), 100000000, 0, -123); (Tag9 (("b")), 100000000, 0, -124); (Tag9 (("c")), 100000000, 0, -125); (Tag9 (("d")), 100000000, 0, -126); (Tag9 (("e")), 100000000, 0, -127); (Tag9 (("f")), 100000000, 0, -128)], (0)), 100000000, 0, -445), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -444), 0), 100000000, 0, -443), 0), 100000000, 0, -442), 0), 100000000, 0, -441), 0), 100000000, 0, -440), 0), 100000000, 0, -439), 0), 100000000, 0, -438), [(Tag9 (("a")), 100000000, 0, -123); (Tag9 (("b")), 100000000, 0, -124); (Tag9 (("c")), 100000000, 0, -125); (Tag9 (("d")), 100000000, 0, -126); (Tag9 (("e")), 100000000, 0, -127); (Tag9 (("f")), 100000000, 0, -128)]), 100000000, 0, -437)), 0, 3), 4), "formatting_lit", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("formatting_lit", 1181)), 0, (0)), 100000000, 0, -454), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -453), 0), 100000000, 0, -452)), ((0, "ignored", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -99), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -469), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -100), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -468), (Tag1 (0, (Tag1 (0, (Tag9 (("c")), 100000000, 0, -101), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -467), (Tag1 (0, (Tag1 (0, (Tag9 (("d")), 100000000, 0, -102), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -466), (Tag1 (0, (Tag1 (0, (Tag9 (("e")), 100000000, 0, -103), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -465), (Tag1 (0, (Tag1 (0, (Tag9 (("f")), 100000000, 0, -104), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -464), (Tag1 (0, (Tag3 ((("ignored", 1186)), [(Tag9 (("a")), 100000000, 0, -99); (Tag9 (("b")), 100000000, 0, -100); (Tag9 (("c")), 100000000, 0, -101); (Tag9 (("d")), 100000000, 0, -102); (Tag9 (("e")), 100000000, 0, -103); (Tag9 (("f")), 100000000, 0, -104)], (0)), 100000000, 0, -463), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -462), 0), 100000000, 0, -461), 0), 100000000, 0, -460), 0), 100000000, 0, -459), 0), 100000000, 0, -458), 0), 100000000, 0, -457), 0), 100000000, 0, -456), [(Tag9 (("a")), 100000000, 0, -99); (Tag9 (("b")), 100000000, 0, -100); (Tag9 (("c")), 100000000, 0, -101); (Tag9 (("d")), 100000000, 0, -102); (Tag9 (("e")), 100000000, 0, -103); (Tag9 (("f")), 100000000, 0, -104)]), 100000000, 0, -455)), 0, 1), "int", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -472), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -471), 0), 100000000, 0, -470)), 0, 2), 5), 6), "int32", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -475), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -474), 0), 100000000, 0, -473)), ((0, "int64", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -478), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -477), 0), 100000000, 0, -476)), ((0, "int_conv", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("int_conv", 1169)), 0, (0)), 100000000, 0, -481), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -480), 0), 100000000, 0, -479)), 0, 1), "nativeint", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -484), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -483), 0), 100000000, 0, -482)), (0, "option", (0, 0, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -78), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -489), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -78)], (0)), 100000000, 0, -488), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -487), 0), 100000000, 0, -486), [(Tag9 (("a")), 100000000, 0, -78)]), 100000000, 0, -485)), 0, 1), 2), 3), "other", (0, 0, (Tag10 ((Tag1 (0, (Tag9 (("a")), 100000000, 0, -75), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -491), [(Tag9 (("a")), 100000000, 0, -75)]), 100000000, 0, -490)), ((((0, "pad_option", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("pad_option", 1176)), 0, (0)), 100000000, 0, -494), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -493), 0), 100000000, 0, -492)), 0, 1), "padding", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -63), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -501), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -64), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -500), (Tag1 (0, (Tag3 ((("padding", 1175)), [(Tag9 (("a")), 100000000, 0, -63); (Tag9 (("b")), 100000000, 0, -64)], (0)), 100000000, 0, -499), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -498), 0), 100000000, 0, -497), 0), 100000000, 0, -496), [(Tag9 (("a")), 100000000, 0, -63); (Tag9 (("b")), 100000000, 0, -64)]), 100000000, 0, -495)), 0, 2), "padty", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("padty", 1168)), 0, (0)), 100000000, 0, -504), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -503), 0), 100000000, 0, -502)), ((0, "prec_option", (0, 1, (Tag10 ((Tag1 (0, (Tag3 ((("prec_option", 1178)), 0, (0)), 100000000, 0, -507), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -506), 0), 100000000, 0, -505)), 0, 1), "precision", (0, 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -48), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -514), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -49), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -513), (Tag1 (0, (Tag3 ((("precision", 1177)), [(Tag9 (("a")), 100000000, 0, -48); (Tag9 (("b")), 100000000, 0, -49)], (0)), 100000000, 0, -512), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -511), 0), 100000000, 0, -510), 0), 100000000, 0, -509), [(Tag9 (("a")), 100000000, 0, -48); (Tag9 (("b")), 100000000, 0, -49)]), 100000000, 0, -508)), 0, 2), 3), "string", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -517), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -516), 0), 100000000, 0, -515)), (0, "tuple", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("res")), 100000000, 0, -39)], (0)), 100000000, 0, -520), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -519), 0), 100000000, 0, -518)), (0, "unit", (0, 0, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -523), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -522), 0), 100000000, 0, -521)), 0, 1), 2), 4), 5), 7))), (("lift", 1190)), ([((("res")), 100000000, 0, -39)], 1, 0, 1, ((Tag4 ((Tag5 ("constr", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -276), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("res")), 100000000, 0, -39)], (0)), 100000000, 0, -275), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -274), 0), 100000000, 0, -273), 0), 100000000, 0, -272), (Tag5 ("tuple", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("res")), 100000000, 0, -39)], (0)), 100000000, 0, -43), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -42), 0), 100000000, 0, -41), (Tag5 ("other", 1, (Tag10 ((Tag1 (0, (Tag9 (("a")), 100000000, 0, -75), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -76), [(Tag9 (("a")), 100000000, 0, -75)]), 100000000, 0, -74), (Tag5 ("bool", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -285), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -284), 0), 100000000, 0, -283), (Tag5 ("char", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -282), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -281), 0), 100000000, 0, -280), (Tag5 ("float", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -256), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -255), 0), 100000000, 0, -254), (Tag5 ("int", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -97), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -96), 0), 100000000, 0, -95), (Tag5 ("int32", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -94), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -93), 0), 100000000, 0, -92), (Tag5 ("int64", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -91), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -90), 0), 100000000, 0, -89), (Tag5 ("nativeint", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -85), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -84), 0), 100000000, 0, -83), (Tag5 ("option", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -78), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -82), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -78)], (0)), 100000000, 0, -81), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -80), 0), 100000000, 0, -79), [(Tag9 (("a")), 100000000, 0, -78)]), 100000000, 0, -77), (Tag5 ("string", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -46), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -45), 0), 100000000, 0, -44), (Tag5 ("unit", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -40), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -38), 0), 100000000, 0, -37), (Tag5 ("padty", 1, (Tag10 ((Tag1 (0, (Tag3 ((("padty", 1168)), 0, (0)), 100000000, 0, -61), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -60), 0), 100000000, 0, -59), (Tag5 ("int_conv", 1, (Tag10 ((Tag1 (0, (Tag3 ((("int_conv", 1169)), 0, (0)), 100000000, 0, -88), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -87), 0), 100000000, 0, -86), (Tag5 ("float_flag_conv", 1, (Tag10 ((Tag1 (0, (Tag3 ((("float_flag_conv", 1170)), 0, (0)), 100000000, 0, -250), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -249), 0), 100000000, 0, -248), (Tag5 ("float_kind_conv", 1, (Tag10 ((Tag1 (0, (Tag3 ((("float_kind_conv", 1171)), 0, (0)), 100000000, 0, -247), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -246), 0), 100000000, 0, -245), (Tag5 ("float_conv", 1, (Tag10 ((Tag1 (0, (Tag3 ((("float_conv", 1172)), 0, (0)), 100000000, 0, -253), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -252), 0), 100000000, 0, -251), (Tag5 ("char_set", 1, (Tag10 ((Tag1 (0, (Tag3 ((("char_set", 1173)), 0, (0)), 100000000, 0, -279), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -278), 0), 100000000, 0, -277), (Tag5 ("counter", 1, (Tag10 ((Tag1 (0, (Tag3 ((("counter", 1174)), 0, (0)), 100000000, 0, -271), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -270), 0), 100000000, 0, -269), (Tag5 ("padding", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -63), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -70), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -64), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -69), (Tag1 (0, (Tag3 ((("padding", 1175)), [(Tag9 (("a")), 100000000, 0, -63); (Tag9 (("b")), 100000000, 0, -64)], (0)), 100000000, 0, -68), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -67), 0), 100000000, 0, -66), 0), 100000000, 0, -65), [(Tag9 (("a")), 100000000, 0, -63); (Tag9 (("b")), 100000000, 0, -64)]), 100000000, 0, -62), (Tag5 ("pad_option", 1, (Tag10 ((Tag1 (0, (Tag3 ((("pad_option", 1176)), 0, (0)), 100000000, 0, -73), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -72), 0), 100000000, 0, -71), (Tag5 ("precision", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -48), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -55), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -49), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -54), (Tag1 (0, (Tag3 ((("precision", 1177)), [(Tag9 (("a")), 100000000, 0, -48); (Tag9 (("b")), 100000000, 0, -49)], (0)), 100000000, 0, -53), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -52), 0), 100000000, 0, -51), 0), 100000000, 0, -50), [(Tag9 (("a")), 100000000, 0, -48); (Tag9 (("b")), 100000000, 0, -49)]), 100000000, 0, -47), (Tag5 ("prec_option", 1, (Tag10 ((Tag1 (0, (Tag3 ((("prec_option", 1178)), 0, (0)), 100000000, 0, -58), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -57), 0), 100000000, 0, -56), (Tag5 ("custom_arity", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -258), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -268), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -259), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -267), (Tag1 (0, (Tag1 (0, (Tag9 (("c")), 100000000, 0, -260), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -266), (Tag1 (0, (Tag3 ((("custom_arity", 1179)), [(Tag9 (("a")), 100000000, 0, -258); (Tag9 (("b")), 100000000, 0, -259); (Tag9 (("c")), 100000000, 0, -260)], (0)), 100000000, 0, -265), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -264), 0), 100000000, 0, -263), 0), 100000000, 0, -262), 0), 100000000, 0, -261), [(Tag9 (("a")), 100000000, 0, -258); (Tag9 (("b")), 100000000, 0, -259); (Tag9 (("c")), 100000000, 0, -260)]), 100000000, 0, -257), (Tag5 ("block_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("block_type", 1180)), 0, (0)), 100000000, 0, -288), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -287), 0), 100000000, 0, -286), (Tag5 ("formatting_lit", 1, (Tag10 ((Tag1 (0, (Tag3 ((("formatting_lit", 1181)), 0, (0)), 100000000, 0, -121), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -120), 0), 100000000, 0, -119), (Tag5 ("formatting_gen", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -123), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -142), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -124), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -141), (Tag1 (0, (Tag1 (0, (Tag9 (("c")), 100000000, 0, -125), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -140), (Tag1 (0, (Tag1 (0, (Tag9 (("d")), 100000000, 0, -126), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -139), (Tag1 (0, (Tag1 (0, (Tag9 (("e")), 100000000, 0, -127), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -138), (Tag1 (0, (Tag1 (0, (Tag9 (("f")), 100000000, 0, -128), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -137), (Tag1 (0, (Tag3 ((("formatting_gen", 1182)), [(Tag9 (("a")), 100000000, 0, -123); (Tag9 (("b")), 100000000, 0, -124); (Tag9 (("c")), 100000000, 0, -125); (Tag9 (("d")), 100000000, 0, -126); (Tag9 (("e")), 100000000, 0, -127); (Tag9 (("f")), 100000000, 0, -128)], (0)), 100000000, 0, -136), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -135), 0), 100000000, 0, -134), 0), 100000000, 0, -133), 0), 100000000, 0, -132), 0), 100000000, 0, -131), 0), 100000000, 0, -130), 0), 100000000, 0, -129), [(Tag9 (("a")), 100000000, 0, -123); (Tag9 (("b")), 100000000, 0, -124); (Tag9 (("c")), 100000000, 0, -125); (Tag9 (("d")), 100000000, 0, -126); (Tag9 (("e")), 100000000, 0, -127); (Tag9 (("f")), 100000000, 0, -128)]), 100000000, 0, -122), (Tag5 ("fmtty", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -204), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -223), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -205), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -222), (Tag1 (0, (Tag1 (0, (Tag9 (("c")), 100000000, 0, -206), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -221), (Tag1 (0, (Tag1 (0, (Tag9 (("d")), 100000000, 0, -207), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -220), (Tag1 (0, (Tag1 (0, (Tag9 (("e")), 100000000, 0, -208), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -219), (Tag1 (0, (Tag1 (0, (Tag9 (("f")), 100000000, 0, -209), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -218), (Tag1 (0, (Tag3 ((("fmtty", 1183)), [(Tag9 (("a")), 100000000, 0, -204); (Tag9 (("b")), 100000000, 0, -205); (Tag9 (("c")), 100000000, 0, -206); (Tag9 (("d")), 100000000, 0, -207); (Tag9 (("e")), 100000000, 0, -208); (Tag9 (("f")), 100000000, 0, -209)], (0)), 100000000, 0, -217), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -216), 0), 100000000, 0, -215), 0), 100000000, 0, -214), 0), 100000000, 0, -213), 0), 100000000, 0, -212), 0), 100000000, 0, -211), 0), 100000000, 0, -210), [(Tag9 (("a")), 100000000, 0, -204); (Tag9 (("b")), 100000000, 0, -205); (Tag9 (("c")), 100000000, 0, -206); (Tag9 (("d")), 100000000, 0, -207); (Tag9 (("e")), 100000000, 0, -208); (Tag9 (("f")), 100000000, 0, -209)]), 100000000, 0, -203), (Tag5 ("fmtty_rel", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -165), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -202), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -166), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -201), (Tag1 (0, (Tag1 (0, (Tag9 (("c")), 100000000, 0, -167), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -200), (Tag1 (0, (Tag1 (0, (Tag9 (("d")), 100000000, 0, -168), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -199), (Tag1 (0, (Tag1 (0, (Tag9 (("e")), 100000000, 0, -169), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -198), (Tag1 (0, (Tag1 (0, (Tag9 (("f")), 100000000, 0, -170), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -197), (Tag1 (0, (Tag1 (0, (Tag9 (("g")), 100000000, 0, -171), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -196), (Tag1 (0, (Tag1 (0, (Tag9 (("h")), 100000000, 0, -172), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -195), (Tag1 (0, (Tag1 (0, (Tag9 (("i")), 100000000, 0, -173), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -194), (Tag1 (0, (Tag1 (0, (Tag9 (("j")), 100000000, 0, -174), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -193), (Tag1 (0, (Tag1 (0, (Tag9 (("k")), 100000000, 0, -175), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -192), (Tag1 (0, (Tag1 (0, (Tag9 (("l")), 100000000, 0, -176), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -191), (Tag1 (0, (Tag3 ((("fmtty_rel", 1184)), [(Tag9 (("a")), 100000000, 0, -165); (Tag9 (("b")), 100000000, 0, -166); (Tag9 (("c")), 100000000, 0, -167); (Tag9 (("d")), 100000000, 0, -168); (Tag9 (("e")), 100000000, 0, -169); (Tag9 (("f")), 100000000, 0, -170); (Tag9 (("g")), 100000000, 0, -171); (Tag9 (("h")), 100000000, 0, -172); (Tag9 (("i")), 100000000, 0, -173); (Tag9 (("j")), 100000000, 0, -174); (Tag9 (("k")), 100000000, 0, -175); (Tag9 (("l")), 100000000, 0, -176)], (0)), 100000000, 0, -190), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -189), 0), 100000000, 0, -188), 0), 100000000, 0, -187), 0), 100000000, 0, -186), 0), 100000000, 0, -185), 0), 100000000, 0, -184), 0), 100000000, 0, -183), 0), 100000000, 0, -182), 0), 100000000, 0, -181), 0), 100000000, 0, -180), 0), 100000000, 0, -179), 0), 100000000, 0, -178), 0), 100000000, 0, -177), [(Tag9 (("a")), 100000000, 0, -165); (Tag9 (("b")), 100000000, 0, -166); (Tag9 (("c")), 100000000, 0, -167); (Tag9 (("d")), 100000000, 0, -168); (Tag9 (("e")), 100000000, 0, -169); (Tag9 (("f")), 100000000, 0, -170); (Tag9 (("g")), 100000000, 0, -171); (Tag9 (("h")), 100000000, 0, -172); (Tag9 (("i")), 100000000, 0, -173); (Tag9 (("j")), 100000000, 0, -174); (Tag9 (("k")), 100000000, 0, -175); (Tag9 (("l")), 100000000, 0, -176)]), 100000000, 0, -164), (Tag5 ("fmt", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -225), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -244), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -226), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -243), (Tag1 (0, (Tag1 (0, (Tag9 (("c")), 100000000, 0, -227), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -242), (Tag1 (0, (Tag1 (0, (Tag9 (("d")), 100000000, 0, -228), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -241), (Tag1 (0, (Tag1 (0, (Tag9 (("e")), 100000000, 0, -229), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -240), (Tag1 (0, (Tag1 (0, (Tag9 (("f")), 100000000, 0, -230), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -239), (Tag1 (0, (Tag3 ((("fmt", 1185)), [(Tag9 (("a")), 100000000, 0, -225); (Tag9 (("b")), 100000000, 0, -226); (Tag9 (("c")), 100000000, 0, -227); (Tag9 (("d")), 100000000, 0, -228); (Tag9 (("e")), 100000000, 0, -229); (Tag9 (("f")), 100000000, 0, -230)], (0)), 100000000, 0, -238), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -237), 0), 100000000, 0, -236), 0), 100000000, 0, -235), 0), 100000000, 0, -234), 0), 100000000, 0, -233), 0), 100000000, 0, -232), 0), 100000000, 0, -231), [(Tag9 (("a")), 100000000, 0, -225); (Tag9 (("b")), 100000000, 0, -226); (Tag9 (("c")), 100000000, 0, -227); (Tag9 (("d")), 100000000, 0, -228); (Tag9 (("e")), 100000000, 0, -229); (Tag9 (("f")), 100000000, 0, -230)]), 100000000, 0, -224), (Tag5 ("ignored", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -99), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -118), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -100), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -117), (Tag1 (0, (Tag1 (0, (Tag9 (("c")), 100000000, 0, -101), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -116), (Tag1 (0, (Tag1 (0, (Tag9 (("d")), 100000000, 0, -102), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -115), (Tag1 (0, (Tag1 (0, (Tag9 (("e")), 100000000, 0, -103), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -114), (Tag1 (0, (Tag1 (0, (Tag9 (("f")), 100000000, 0, -104), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -113), (Tag1 (0, (Tag3 ((("ignored", 1186)), [(Tag9 (("a")), 100000000, 0, -99); (Tag9 (("b")), 100000000, 0, -100); (Tag9 (("c")), 100000000, 0, -101); (Tag9 (("d")), 100000000, 0, -102); (Tag9 (("e")), 100000000, 0, -103); (Tag9 (("f")), 100000000, 0, -104)], (0)), 100000000, 0, -112), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -111), 0), 100000000, 0, -110), 0), 100000000, 0, -109), 0), 100000000, 0, -108), 0), 100000000, 0, -107), 0), 100000000, 0, -106), 0), 100000000, 0, -105), [(Tag9 (("a")), 100000000, 0, -99); (Tag9 (("b")), 100000000, 0, -100); (Tag9 (("c")), 100000000, 0, -101); (Tag9 (("d")), 100000000, 0, -102); (Tag9 (("e")), 100000000, 0, -103); (Tag9 (("f")), 100000000, 0, -104)]), 100000000, 0, -98), (Tag5 ("format6", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -144), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -163), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -145), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -162), (Tag1 (0, (Tag1 (0, (Tag9 (("c")), 100000000, 0, -146), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -161), (Tag1 (0, (Tag1 (0, (Tag9 (("d")), 100000000, 0, -147), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -160), (Tag1 (0, (Tag1 (0, (Tag9 (("e")), 100000000, 0, -148), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -159), (Tag1 (0, (Tag1 (0, (Tag9 (("f")), 100000000, 0, -149), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -158), (Tag1 (0, (Tag3 ((("format6", 1187)), [(Tag9 (("a")), 100000000, 0, -144); (Tag9 (("b")), 100000000, 0, -145); (Tag9 (("c")), 100000000, 0, -146); (Tag9 (("d")), 100000000, 0, -147); (Tag9 (("e")), 100000000, 0, -148); (Tag9 (("f")), 100000000, 0, -149)], (0)), 100000000, 0, -157), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -156), 0), 100000000, 0, -155), 0), 100000000, 0, -154), 0), 100000000, 0, -153), 0), 100000000, 0, -152), 0), 100000000, 0, -151), 0), 100000000, 0, -150), [(Tag9 (("a")), 100000000, 0, -144); (Tag9 (("b")), 100000000, 0, -145); (Tag9 (("c")), 100000000, 0, -146); (Tag9 (("d")), 100000000, 0, -147); (Tag9 (("e")), 100000000, 0, -148); (Tag9 (("f")), 100000000, 0, -149)]), 100000000, 0, -143), ((0), 100000000, 0, -323)), 100000000, 0, -322)), 100000000, 0, -321)), 100000000, 0, -320)), 100000000, 0, -319)), 100000000, 0, -318)), 100000000, 0, -317)), 100000000, 0, -316)), 100000000, 0, -315)), 100000000, 0, -314)), 100000000, 0, -313)), 100000000, 0, -312)), 100000000, 0, -311)), 100000000, 0, -310)), 100000000, 0, -309)), 100000000, 0, -308)), 100000000, 0, -307)), 100000000, 0, -306)), 100000000, 0, -305)), 100000000, 0, -304)), 100000000, 0, -303)), 100000000, 0, -302)), 100000000, 0, -301)), 100000000, 0, -300)), 100000000, 0, -299)), 100000000, 0, -298)), 100000000, 0, -297)), 100000000, 0, -296)), 100000000, 0, -295)), 100000000, 0, -294)), 100000000, 0, -293)), 100000000, 0, -292)), 100000000, 0, -291)), 100000000, 0, -290), (([(("lift", 1190)); ((0), 100000000, 0, -323); ((("res")), 100000000, 0, -39)]))), 100000000, 0, -289)), [63], [2], 0, 0, (("src/format_lifter.ml", 1, 0, 0), ("src/format_lifter.ml", 222, 10220, 10288), 0), 0, 0, 0, Tag1 ("Ppx_custom_printf__Format_lifter", 139)), [63], (("src/format_lifter.ml", 1, 0, 0), ("src/format_lifter.ml", 222, 10220, 10288), 0), 0, Tag1 ("Ppx_custom_printf__Format_lifter", 139)), 1, 0); Tag1 (("lift", 1190), ([((("res")), 100000000, 0, -39)], 1, 0, 1, ((Tag4 ((Tag5 ("block_type", 1, (Tag10 ((Tag1 (0, (Tag3 ((("block_type", 1180)), 0, (0)), 100000000, 0, -288), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -287), 0), 100000000, 0, -286), (Tag5 ("bool", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -285), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -284), 0), 100000000, 0, -283), (Tag5 ("char", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -282), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -281), 0), 100000000, 0, -280), (Tag5 ("char_set", 1, (Tag10 ((Tag1 (0, (Tag3 ((("char_set", 1173)), 0, (0)), 100000000, 0, -279), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -278), 0), 100000000, 0, -277), (Tag5 ("constr", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -276), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("res")), 100000000, 0, -39)], (0)), 100000000, 0, -275), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -274), 0), 100000000, 0, -273), 0), 100000000, 0, -272), (Tag5 ("counter", 1, (Tag10 ((Tag1 (0, (Tag3 ((("counter", 1174)), 0, (0)), 100000000, 0, -271), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -270), 0), 100000000, 0, -269), (Tag5 ("custom_arity", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -258), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -268), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -259), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -267), (Tag1 (0, (Tag1 (0, (Tag9 (("c")), 100000000, 0, -260), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -266), (Tag1 (0, (Tag3 ((("custom_arity", 1179)), [(Tag9 (("a")), 100000000, 0, -258); (Tag9 (("b")), 100000000, 0, -259); (Tag9 (("c")), 100000000, 0, -260)], (0)), 100000000, 0, -265), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -264), 0), 100000000, 0, -263), 0), 100000000, 0, -262), 0), 100000000, 0, -261), [(Tag9 (("a")), 100000000, 0, -258); (Tag9 (("b")), 100000000, 0, -259); (Tag9 (("c")), 100000000, 0, -260)]), 100000000, 0, -257), (Tag5 ("float", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -256), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -255), 0), 100000000, 0, -254), (Tag5 ("float_conv", 1, (Tag10 ((Tag1 (0, (Tag3 ((("float_conv", 1172)), 0, (0)), 100000000, 0, -253), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -252), 0), 100000000, 0, -251), (Tag5 ("float_flag_conv", 1, (Tag10 ((Tag1 (0, (Tag3 ((("float_flag_conv", 1170)), 0, (0)), 100000000, 0, -250), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -249), 0), 100000000, 0, -248), (Tag5 ("float_kind_conv", 1, (Tag10 ((Tag1 (0, (Tag3 ((("float_kind_conv", 1171)), 0, (0)), 100000000, 0, -247), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -246), 0), 100000000, 0, -245), (Tag5 ("fmt", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -225), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -244), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -226), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -243), (Tag1 (0, (Tag1 (0, (Tag9 (("c")), 100000000, 0, -227), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -242), (Tag1 (0, (Tag1 (0, (Tag9 (("d")), 100000000, 0, -228), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -241), (Tag1 (0, (Tag1 (0, (Tag9 (("e")), 100000000, 0, -229), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -240), (Tag1 (0, (Tag1 (0, (Tag9 (("f")), 100000000, 0, -230), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -239), (Tag1 (0, (Tag3 ((("fmt", 1185)), [(Tag9 (("a")), 100000000, 0, -225); (Tag9 (("b")), 100000000, 0, -226); (Tag9 (("c")), 100000000, 0, -227); (Tag9 (("d")), 100000000, 0, -228); (Tag9 (("e")), 100000000, 0, -229); (Tag9 (("f")), 100000000, 0, -230)], (0)), 100000000, 0, -238), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -237), 0), 100000000, 0, -236), 0), 100000000, 0, -235), 0), 100000000, 0, -234), 0), 100000000, 0, -233), 0), 100000000, 0, -232), 0), 100000000, 0, -231), [(Tag9 (("a")), 100000000, 0, -225); (Tag9 (("b")), 100000000, 0, -226); (Tag9 (("c")), 100000000, 0, -227); (Tag9 (("d")), 100000000, 0, -228); (Tag9 (("e")), 100000000, 0, -229); (Tag9 (("f")), 100000000, 0, -230)]), 100000000, 0, -224), (Tag5 ("fmtty", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -204), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -223), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -205), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -222), (Tag1 (0, (Tag1 (0, (Tag9 (("c")), 100000000, 0, -206), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -221), (Tag1 (0, (Tag1 (0, (Tag9 (("d")), 100000000, 0, -207), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -220), (Tag1 (0, (Tag1 (0, (Tag9 (("e")), 100000000, 0, -208), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -219), (Tag1 (0, (Tag1 (0, (Tag9 (("f")), 100000000, 0, -209), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -218), (Tag1 (0, (Tag3 ((("fmtty", 1183)), [(Tag9 (("a")), 100000000, 0, -204); (Tag9 (("b")), 100000000, 0, -205); (Tag9 (("c")), 100000000, 0, -206); (Tag9 (("d")), 100000000, 0, -207); (Tag9 (("e")), 100000000, 0, -208); (Tag9 (("f")), 100000000, 0, -209)], (0)), 100000000, 0, -217), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -216), 0), 100000000, 0, -215), 0), 100000000, 0, -214), 0), 100000000, 0, -213), 0), 100000000, 0, -212), 0), 100000000, 0, -211), 0), 100000000, 0, -210), [(Tag9 (("a")), 100000000, 0, -204); (Tag9 (("b")), 100000000, 0, -205); (Tag9 (("c")), 100000000, 0, -206); (Tag9 (("d")), 100000000, 0, -207); (Tag9 (("e")), 100000000, 0, -208); (Tag9 (("f")), 100000000, 0, -209)]), 100000000, 0, -203), (Tag5 ("fmtty_rel", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -165), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -202), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -166), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -201), (Tag1 (0, (Tag1 (0, (Tag9 (("c")), 100000000, 0, -167), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -200), (Tag1 (0, (Tag1 (0, (Tag9 (("d")), 100000000, 0, -168), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -199), (Tag1 (0, (Tag1 (0, (Tag9 (("e")), 100000000, 0, -169), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -198), (Tag1 (0, (Tag1 (0, (Tag9 (("f")), 100000000, 0, -170), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -197), (Tag1 (0, (Tag1 (0, (Tag9 (("g")), 100000000, 0, -171), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -196), (Tag1 (0, (Tag1 (0, (Tag9 (("h")), 100000000, 0, -172), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -195), (Tag1 (0, (Tag1 (0, (Tag9 (("i")), 100000000, 0, -173), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -194), (Tag1 (0, (Tag1 (0, (Tag9 (("j")), 100000000, 0, -174), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -193), (Tag1 (0, (Tag1 (0, (Tag9 (("k")), 100000000, 0, -175), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -192), (Tag1 (0, (Tag1 (0, (Tag9 (("l")), 100000000, 0, -176), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -191), (Tag1 (0, (Tag3 ((("fmtty_rel", 1184)), [(Tag9 (("a")), 100000000, 0, -165); (Tag9 (("b")), 100000000, 0, -166); (Tag9 (("c")), 100000000, 0, -167); (Tag9 (("d")), 100000000, 0, -168); (Tag9 (("e")), 100000000, 0, -169); (Tag9 (("f")), 100000000, 0, -170); (Tag9 (("g")), 100000000, 0, -171); (Tag9 (("h")), 100000000, 0, -172); (Tag9 (("i")), 100000000, 0, -173); (Tag9 (("j")), 100000000, 0, -174); (Tag9 (("k")), 100000000, 0, -175); (Tag9 (("l")), 100000000, 0, -176)], (0)), 100000000, 0, -190), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -189), 0), 100000000, 0, -188), 0), 100000000, 0, -187), 0), 100000000, 0, -186), 0), 100000000, 0, -185), 0), 100000000, 0, -184), 0), 100000000, 0, -183), 0), 100000000, 0, -182), 0), 100000000, 0, -181), 0), 100000000, 0, -180), 0), 100000000, 0, -179), 0), 100000000, 0, -178), 0), 100000000, 0, -177), [(Tag9 (("a")), 100000000, 0, -165); (Tag9 (("b")), 100000000, 0, -166); (Tag9 (("c")), 100000000, 0, -167); (Tag9 (("d")), 100000000, 0, -168); (Tag9 (("e")), 100000000, 0, -169); (Tag9 (("f")), 100000000, 0, -170); (Tag9 (("g")), 100000000, 0, -171); (Tag9 (("h")), 100000000, 0, -172); (Tag9 (("i")), 100000000, 0, -173); (Tag9 (("j")), 100000000, 0, -174); (Tag9 (("k")), 100000000, 0, -175); (Tag9 (("l")), 100000000, 0, -176)]), 100000000, 0, -164), (Tag5 ("format6", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -144), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -163), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -145), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -162), (Tag1 (0, (Tag1 (0, (Tag9 (("c")), 100000000, 0, -146), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -161), (Tag1 (0, (Tag1 (0, (Tag9 (("d")), 100000000, 0, -147), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -160), (Tag1 (0, (Tag1 (0, (Tag9 (("e")), 100000000, 0, -148), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -159), (Tag1 (0, (Tag1 (0, (Tag9 (("f")), 100000000, 0, -149), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -158), (Tag1 (0, (Tag3 ((("format6", 1187)), [(Tag9 (("a")), 100000000, 0, -144); (Tag9 (("b")), 100000000, 0, -145); (Tag9 (("c")), 100000000, 0, -146); (Tag9 (("d")), 100000000, 0, -147); (Tag9 (("e")), 100000000, 0, -148); (Tag9 (("f")), 100000000, 0, -149)], (0)), 100000000, 0, -157), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -156), 0), 100000000, 0, -155), 0), 100000000, 0, -154), 0), 100000000, 0, -153), 0), 100000000, 0, -152), 0), 100000000, 0, -151), 0), 100000000, 0, -150), [(Tag9 (("a")), 100000000, 0, -144); (Tag9 (("b")), 100000000, 0, -145); (Tag9 (("c")), 100000000, 0, -146); (Tag9 (("d")), 100000000, 0, -147); (Tag9 (("e")), 100000000, 0, -148); (Tag9 (("f")), 100000000, 0, -149)]), 100000000, 0, -143), (Tag5 ("formatting_gen", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -123), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -142), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -124), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -141), (Tag1 (0, (Tag1 (0, (Tag9 (("c")), 100000000, 0, -125), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -140), (Tag1 (0, (Tag1 (0, (Tag9 (("d")), 100000000, 0, -126), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -139), (Tag1 (0, (Tag1 (0, (Tag9 (("e")), 100000000, 0, -127), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -138), (Tag1 (0, (Tag1 (0, (Tag9 (("f")), 100000000, 0, -128), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -137), (Tag1 (0, (Tag3 ((("formatting_gen", 1182)), [(Tag9 (("a")), 100000000, 0, -123); (Tag9 (("b")), 100000000, 0, -124); (Tag9 (("c")), 100000000, 0, -125); (Tag9 (("d")), 100000000, 0, -126); (Tag9 (("e")), 100000000, 0, -127); (Tag9 (("f")), 100000000, 0, -128)], (0)), 100000000, 0, -136), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -135), 0), 100000000, 0, -134), 0), 100000000, 0, -133), 0), 100000000, 0, -132), 0), 100000000, 0, -131), 0), 100000000, 0, -130), 0), 100000000, 0, -129), [(Tag9 (("a")), 100000000, 0, -123); (Tag9 (("b")), 100000000, 0, -124); (Tag9 (("c")), 100000000, 0, -125); (Tag9 (("d")), 100000000, 0, -126); (Tag9 (("e")), 100000000, 0, -127); (Tag9 (("f")), 100000000, 0, -128)]), 100000000, 0, -122), (Tag5 ("formatting_lit", 1, (Tag10 ((Tag1 (0, (Tag3 ((("formatting_lit", 1181)), 0, (0)), 100000000, 0, -121), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -120), 0), 100000000, 0, -119), (Tag5 ("ignored", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -99), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -118), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -100), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -117), (Tag1 (0, (Tag1 (0, (Tag9 (("c")), 100000000, 0, -101), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -116), (Tag1 (0, (Tag1 (0, (Tag9 (("d")), 100000000, 0, -102), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -115), (Tag1 (0, (Tag1 (0, (Tag9 (("e")), 100000000, 0, -103), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -114), (Tag1 (0, (Tag1 (0, (Tag9 (("f")), 100000000, 0, -104), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -113), (Tag1 (0, (Tag3 ((("ignored", 1186)), [(Tag9 (("a")), 100000000, 0, -99); (Tag9 (("b")), 100000000, 0, -100); (Tag9 (("c")), 100000000, 0, -101); (Tag9 (("d")), 100000000, 0, -102); (Tag9 (("e")), 100000000, 0, -103); (Tag9 (("f")), 100000000, 0, -104)], (0)), 100000000, 0, -112), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -111), 0), 100000000, 0, -110), 0), 100000000, 0, -109), 0), 100000000, 0, -108), 0), 100000000, 0, -107), 0), 100000000, 0, -106), 0), 100000000, 0, -105), [(Tag9 (("a")), 100000000, 0, -99); (Tag9 (("b")), 100000000, 0, -100); (Tag9 (("c")), 100000000, 0, -101); (Tag9 (("d")), 100000000, 0, -102); (Tag9 (("e")), 100000000, 0, -103); (Tag9 (("f")), 100000000, 0, -104)]), 100000000, 0, -98), (Tag5 ("int", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -97), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -96), 0), 100000000, 0, -95), (Tag5 ("int32", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -94), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -93), 0), 100000000, 0, -92), (Tag5 ("int64", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -91), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -90), 0), 100000000, 0, -89), (Tag5 ("int_conv", 1, (Tag10 ((Tag1 (0, (Tag3 ((("int_conv", 1169)), 0, (0)), 100000000, 0, -88), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -87), 0), 100000000, 0, -86), (Tag5 ("nativeint", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -85), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -84), 0), 100000000, 0, -83), (Tag5 ("option", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -78), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -82), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("a")), 100000000, 0, -78)], (0)), 100000000, 0, -81), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -80), 0), 100000000, 0, -79), [(Tag9 (("a")), 100000000, 0, -78)]), 100000000, 0, -77), (Tag5 ("other", 1, (Tag10 ((Tag1 (0, (Tag9 (("a")), 100000000, 0, -75), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -76), [(Tag9 (("a")), 100000000, 0, -75)]), 100000000, 0, -74), (Tag5 ("pad_option", 1, (Tag10 ((Tag1 (0, (Tag3 ((("pad_option", 1176)), 0, (0)), 100000000, 0, -73), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -72), 0), 100000000, 0, -71), (Tag5 ("padding", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -63), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -70), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -64), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -69), (Tag1 (0, (Tag3 ((("padding", 1175)), [(Tag9 (("a")), 100000000, 0, -63); (Tag9 (("b")), 100000000, 0, -64)], (0)), 100000000, 0, -68), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -67), 0), 100000000, 0, -66), 0), 100000000, 0, -65), [(Tag9 (("a")), 100000000, 0, -63); (Tag9 (("b")), 100000000, 0, -64)]), 100000000, 0, -62), (Tag5 ("padty", 1, (Tag10 ((Tag1 (0, (Tag3 ((("padty", 1168)), 0, (0)), 100000000, 0, -61), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -60), 0), 100000000, 0, -59), (Tag5 ("prec_option", 1, (Tag10 ((Tag1 (0, (Tag3 ((("prec_option", 1178)), 0, (0)), 100000000, 0, -58), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -57), 0), 100000000, 0, -56), (Tag5 ("precision", 1, (Tag10 ((Tag1 (0, (Tag1 (0, (Tag9 (("a")), 100000000, 0, -48), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -55), (Tag1 (0, (Tag1 (0, (Tag9 (("b")), 100000000, 0, -49), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -54), (Tag1 (0, (Tag3 ((("precision", 1177)), [(Tag9 (("a")), 100000000, 0, -48); (Tag9 (("b")), 100000000, 0, -49)], (0)), 100000000, 0, -53), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -52), 0), 100000000, 0, -51), 0), 100000000, 0, -50), [(Tag9 (("a")), 100000000, 0, -48); (Tag9 (("b")), 100000000, 0, -49)]), 100000000, 0, -47), (Tag5 ("string", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -46), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -45), 0), 100000000, 0, -44), (Tag5 ("tuple", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("res")), 100000000, 0, -39)], (0)), 100000000, 0, -43), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -42), 0), 100000000, 0, -41), (Tag5 ("unit", 1, (Tag10 ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -40), ((("res")), 100000000, 0, -39), 0), 100000000, 0, -38), 0), 100000000, 0, -37), (0, 100000000, 0, -36)), 100000000, 0, -35)), 100000000, 0, -34)), 100000000, 0, -33)), 100000000, 0, -32)), 100000000, 0, -31)), 100000000, 0, -30)), 100000000, 0, -29)), 100000000, 0, -28)), 100000000, 0, -27)), 100000000, 0, -26)), 100000000, 0, -25)), 100000000, 0, -24)), 100000000, 0, -23)), 100000000, 0, -22)), 100000000, 0, -21)), 100000000, 0, -20)), 100000000, 0, -19)), 100000000, 0, -18)), 100000000, 0, -17)), 100000000, 0, -16)), 100000000, 0, -15)), 100000000, 0, -14)), 100000000, 0, -13)), 100000000, 0, -12)), 100000000, 0, -11)), 100000000, 0, -10)), 100000000, 0, -9)), 100000000, 0, -8)), 100000000, 0, -7)), 100000000, 0, -6)), 100000000, 0, -5)), 100000000, 0, -4)), 100000000, 0, -3), (0)), 100000000, 0, -2)), [63], [2], 0, 0, (("src/format_lifter.ml", 1, 0, 0), ("src/format_lifter.ml", 222, 10220, 10288), 0), 0, 0, 0, Tag1 ("Ppx_custom_printf__Format_lifter", 139)), 1, 0)], "Ppx_custom_printf__Format_lifter", [("Ppx_custom_printf__Format_lifter", ("\017\225\2119\245.\175\148'\169y*\224\224\215^")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Ppx_custom_printf__", ("K\2132\222\211\240\158\178\007\135U\220\153\205\233x")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

  end

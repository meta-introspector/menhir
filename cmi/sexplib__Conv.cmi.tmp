val default_string_of_float : (float -> string) ref
val write_old_option_format : bool ref
val read_old_option_format : bool ref
val list_map : ('a -> 'b) -> 'a list -> 'b list
val sexp_of_unit : unit -> Sexplib0__.Sexp.t
val sexp_of_bool : bool -> Sexplib0__.Sexp.t
val sexp_of_string : string -> Sexplib0__.Sexp.t
val sexp_of_bytes : bytes -> Sexplib0__.Sexp.t
val sexp_of_char : char -> Sexplib0__.Sexp.t
val sexp_of_int : int -> Sexplib0__.Sexp.t
val sexp_of_float : float -> Sexplib0__.Sexp.t
val sexp_of_int32 : int32 -> Sexplib0__.Sexp.t
val sexp_of_int64 : int64 -> Sexplib0__.Sexp.t
val sexp_of_nativeint : nativeint -> Sexplib0__.Sexp.t
val sexp_of_ref : ('a -> Sexplib0__.Sexp.t) -> 'a ref -> Sexplib0__.Sexp.t
val sexp_of_lazy_t :
  ('a -> Sexplib0__.Sexp.t) -> 'a lazy_t -> Sexplib0__.Sexp.t
val sexp_of_option :
  ('a -> Sexplib0__.Sexp.t) -> 'a option -> Sexplib0__.Sexp.t
val sexp_of_pair :
  ('a -> Sexplib0__.Sexp.t) ->
  ('b -> Sexplib0__.Sexp.t) -> 'a * 'b -> Sexplib0__.Sexp.t
val sexp_of_triple :
  ('a -> Sexplib0__.Sexp.t) ->
  ('b -> Sexplib0__.Sexp.t) ->
  ('c -> Sexplib0__.Sexp.t) -> 'a * 'b * 'c -> Sexplib0__.Sexp.t
val sexp_of_list : ('a -> Sexplib0__.Sexp.t) -> 'a list -> Sexplib0__.Sexp.t
val sexp_of_array :
  ('a -> Sexplib0__.Sexp.t) -> 'a array -> Sexplib0__.Sexp.t
val sexp_of_hashtbl :
  ('a -> Sexplib0__.Sexp.t) ->
  ('b -> Sexplib0__.Sexp.t) -> ('a, 'b) Hashtbl.t -> Sexplib0__.Sexp.t
val sexp_of_opaque : 'a -> Sexplib0__.Sexp.t
val sexp_of_fun : ('a -> 'b) -> Sexplib0__.Sexp.t
exception Of_sexp_error of exn * Sexplib0__.Sexp.t
val record_check_extra_fields : bool ref
val of_sexp_error : string -> Sexplib0__.Sexp.t -> 'a
val of_sexp_error_exn : exn -> Sexplib0__.Sexp.t -> 'a
val unit_of_sexp : Sexplib0__.Sexp.t -> unit
val bool_of_sexp : Sexplib0__.Sexp.t -> bool
val string_of_sexp : Sexplib0__.Sexp.t -> string
val bytes_of_sexp : Sexplib0__.Sexp.t -> bytes
val char_of_sexp : Sexplib0__.Sexp.t -> char
val int_of_sexp : Sexplib0__.Sexp.t -> int
val float_of_sexp : Sexplib0__.Sexp.t -> float
val int32_of_sexp : Sexplib0__.Sexp.t -> int32
val int64_of_sexp : Sexplib0__.Sexp.t -> int64
val nativeint_of_sexp : Sexplib0__.Sexp.t -> nativeint
val ref_of_sexp : (Sexplib0__.Sexp.t -> 'a) -> Sexplib0__.Sexp.t -> 'a ref
val lazy_t_of_sexp :
  (Sexplib0__.Sexp.t -> 'a) -> Sexplib0__.Sexp.t -> 'a lazy_t
val option_of_sexp :
  (Sexplib0__.Sexp.t -> 'a) -> Sexplib0__.Sexp.t -> 'a option
val pair_of_sexp :
  (Sexplib0__.Sexp.t -> 'a) ->
  (Sexplib0__.Sexp.t -> 'b) -> Sexplib0__.Sexp.t -> 'a * 'b
val triple_of_sexp :
  (Sexplib0__.Sexp.t -> 'a) ->
  (Sexplib0__.Sexp.t -> 'b) ->
  (Sexplib0__.Sexp.t -> 'c) -> Sexplib0__.Sexp.t -> 'a * 'b * 'c
val list_of_sexp : (Sexplib0__.Sexp.t -> 'a) -> Sexplib0__.Sexp.t -> 'a list
val array_of_sexp :
  (Sexplib0__.Sexp.t -> 'a) -> Sexplib0__.Sexp.t -> 'a array
val hashtbl_of_sexp :
  (Sexplib0__.Sexp.t -> 'a) ->
  (Sexplib0__.Sexp.t -> 'b) -> Sexplib0__.Sexp.t -> ('a, 'b) Hashtbl.t
val opaque_of_sexp : Sexplib0__.Sexp.t -> 'a
val fun_of_sexp : Sexplib0__.Sexp.t -> 'a
val sexp_grammar_with_tags :
  Sexplib0__.Sexp_grammar.grammar ->
  tags:(string * Sexplib0__.Sexp.t) list -> Sexplib0__.Sexp_grammar.grammar
val sexp_grammar_with_tag_list :
  'a Sexplib0__.Sexp_grammar.with_tag_list ->
  tags:(string * Sexplib0__.Sexp.t) list ->
  'a Sexplib0__.Sexp_grammar.with_tag_list
val unit_sexp_grammar : unit Sexplib0__.Sexp_grammar.t
val bool_sexp_grammar : bool Sexplib0__.Sexp_grammar.t
val string_sexp_grammar : string Sexplib0__.Sexp_grammar.t
val bytes_sexp_grammar : bytes Sexplib0__.Sexp_grammar.t
val char_sexp_grammar : char Sexplib0__.Sexp_grammar.t
val int_sexp_grammar : int Sexplib0__.Sexp_grammar.t
val float_sexp_grammar : float Sexplib0__.Sexp_grammar.t
val int32_sexp_grammar : int32 Sexplib0__.Sexp_grammar.t
val int64_sexp_grammar : int64 Sexplib0__.Sexp_grammar.t
val nativeint_sexp_grammar : nativeint Sexplib0__.Sexp_grammar.t
val sexp_t_sexp_grammar : Sexplib0__.Sexp.t Sexplib0__.Sexp_grammar.t
val ref_sexp_grammar :
  'a Sexplib0__.Sexp_grammar.t -> 'a ref Sexplib0__.Sexp_grammar.t
val lazy_t_sexp_grammar :
  'a Sexplib0__.Sexp_grammar.t -> 'a lazy_t Sexplib0__.Sexp_grammar.t
val option_sexp_grammar :
  'a Sexplib0__.Sexp_grammar.t -> 'a option Sexplib0__.Sexp_grammar.t
val list_sexp_grammar :
  'a Sexplib0__.Sexp_grammar.t -> 'a list Sexplib0__.Sexp_grammar.t
val array_sexp_grammar :
  'a Sexplib0__.Sexp_grammar.t -> 'a array Sexplib0__.Sexp_grammar.t
val opaque_sexp_grammar : 'a Sexplib0__.Sexp_grammar.t
val fun_sexp_grammar : 'a Sexplib0__.Sexp_grammar.t
val sexp_of_exn : exn -> Sexplib0__.Sexp.t
val printexc_prefer_sexp : exn -> string
val sexp_of_exn_opt : exn -> Sexplib0__.Sexp.t option
module Exn_converter :
  sig
    val add :
      ?printexc:bool ->
      ?finalise:bool ->
      extension_constructor -> (exn -> Sexplib0__.Sexp.t) -> unit
    module For_unit_tests_only : sig val size : unit -> int end
  end
external ignore : 'a -> unit = "%ignore"
external ( = ) : 'a -> 'a -> bool = "%equal"
type bigstring =
    (char, Bigarray.int8_unsigned_elt, Bigarray.c_layout) Bigarray.Array1.t
type float32_vec =
    (float, Bigarray.float32_elt, Bigarray.fortran_layout) Bigarray.Array1.t
type float64_vec =
    (float, Bigarray.float64_elt, Bigarray.fortran_layout) Bigarray.Array1.t
type vec = float64_vec
type float32_mat =
    (float, Bigarray.float32_elt, Bigarray.fortran_layout) Bigarray.Array2.t
type float64_mat =
    (float, Bigarray.float64_elt, Bigarray.fortran_layout) Bigarray.Array2.t
type mat = float64_mat
val sexp_of_bigstring : bigstring -> Sexplib.Sexp.t
val sexp_of_float32_vec : float32_vec -> Sexplib.Sexp.t
val sexp_of_float64_vec : float64_vec -> Sexplib.Sexp.t
val sexp_of_vec : vec -> Sexplib.Sexp.t
val sexp_of_float32_mat : float32_mat -> Sexplib.Sexp.t
val sexp_of_float64_mat : float64_mat -> Sexplib.Sexp.t
val sexp_of_mat : mat -> Sexplib.Sexp.t
val string_of__of__sexp_of : ('a -> Sexplib.Sexp.t) -> 'a -> string
val bigstring_sexp_grammar : bigstring Sexplib0.Sexp_grammar.t
val bigstring_of_sexp : Sexplib.Sexp.t -> bigstring
val float32_vec_sexp_grammar : float32_vec Sexplib0.Sexp_grammar.t
val float32_vec_of_sexp : Sexplib.Sexp.t -> float32_vec
val float64_vec_sexp_grammar : float64_vec Sexplib0.Sexp_grammar.t
val float64_vec_of_sexp : Sexplib.Sexp.t -> float64_vec
val vec_sexp_grammar : vec Sexplib0.Sexp_grammar.t
val vec_of_sexp : Sexplib.Sexp.t -> vec
val float32_mat_sexp_grammar : float32_mat Sexplib0.Sexp_grammar.t
val float32_mat_of_sexp : Sexplib.Sexp.t -> float32_mat
val float64_mat_sexp_grammar : float64_mat Sexplib0.Sexp_grammar.t
val float64_mat_of_sexp : Sexplib.Sexp.t -> float64_mat
val mat_sexp_grammar : mat Sexplib0.Sexp_grammar.t
val mat_of_sexp : Sexplib.Sexp.t -> mat
("DEBUG:rule", [(("default_string_of_float", 851), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -423), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -422), 0), 100000000, 0, -421)], (0)), 100000000, 0, -420), 0, (("src/sexp_conv.mli", 9, 266, 266), ("src/sexp_conv.mli", 9, 266, 317), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 0)), 0); (("write_old_option_format", 852), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -419)], (0)), 100000000, 0, -418), 0, (("src/sexp_conv.mli", 16, 549, 549), ("src/sexp_conv.mli", 16, 549, 587), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 1)), 0); (("read_old_option_format", 853), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -417)], (0)), 100000000, 0, -416), 0, (("src/sexp_conv.mli", 26, 1039, 1039), ("src/sexp_conv.mli", 26, 1039, 1076), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 2)), 0); (("list_map", 854), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -414), ((("b")), 100000000, 0, -412), 0), 100000000, 0, -415), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -414)], (0)), 100000000, 0, -413), (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -412)], (0)), 100000000, 0, -411), 0), 100000000, 0, -410), 0), 100000000, 0, -409), 0, (("src/sexp_conv.mli", 31, 1263, 1263), ("src/sexp_conv.mli", 31, 1263, 1310), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 3)), 0); (("sexp_of_unit", 855), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -408), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -407), 0), 100000000, 0, -406), 0, (("src/sexp_conv.mli", 34, 1389, 1389), ("src/sexp_conv.mli", 34, 1389, 1422), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 4)), 0); (("sexp_of_bool", 856), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -405), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -404), 0), 100000000, 0, -403), 0, (("src/sexp_conv.mli", 38, 1510, 1510), ("src/sexp_conv.mli", 38, 1510, 1543), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 5)), 0); (("sexp_of_string", 857), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -402), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -401), 0), 100000000, 0, -400), 0, (("src/sexp_conv.mli", 42, 1637, 1637), ("src/sexp_conv.mli", 42, 1637, 1674), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 6)), 0); (("sexp_of_bytes", 858), ((Tag1 (0, (Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -399), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -398), 0), 100000000, 0, -397), 0, (("src/sexp_conv.mli", 46, 1767, 1767), ("src/sexp_conv.mli", 46, 1767, 1802), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 7)), 0); (("sexp_of_char", 859), ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -396), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -395), 0), 100000000, 0, -394), 0, (("src/sexp_conv.mli", 50, 1890, 1890), ("src/sexp_conv.mli", 50, 1890, 1923), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 8)), 0); (("sexp_of_int", 860), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -393), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -392), 0), 100000000, 0, -391), 0, (("src/sexp_conv.mli", 54, 2009, 2009), ("src/sexp_conv.mli", 54, 2009, 2040), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 9)), 0); (("sexp_of_float", 861), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -390), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -389), 0), 100000000, 0, -388), 0, (("src/sexp_conv.mli", 58, 2130, 2130), ("src/sexp_conv.mli", 58, 2130, 2165), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 10)), 0); (("sexp_of_int32", 862), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -387), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -386), 0), 100000000, 0, -385), 0, (("src/sexp_conv.mli", 62, 2255, 2255), ("src/sexp_conv.mli", 62, 2255, 2290), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 11)), 0); (("sexp_of_int64", 863), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -384), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -383), 0), 100000000, 0, -382), 0, (("src/sexp_conv.mli", 66, 2380, 2380), ("src/sexp_conv.mli", 66, 2380, 2415), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 12)), 0); (("sexp_of_nativeint", 864), ((Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -381), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -380), 0), 100000000, 0, -379), 0, (("src/sexp_conv.mli", 70, 2513, 2513), ("src/sexp_conv.mli", 70, 2513, 2556), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 13)), 0); (("sexp_of_ref", 865), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -376), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -378), 0), 100000000, 0, -377), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [((("a")), 100000000, 0, -376)], (0)), 100000000, 0, -375), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -374), 0), 100000000, 0, -373), 0), 100000000, 0, -372), 0, (("src/sexp_conv.mli", 75, 2718, 2718), ("src/sexp_conv.mli", 75, 2718, 2770), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 14)), 0); (("sexp_of_lazy_t", 866), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -369), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -371), 0), 100000000, 0, -370), (Tag1 (0, (Tag3 ((Tag3 ("lazy_t", 14)), [((("a")), 100000000, 0, -369)], (0)), 100000000, 0, -368), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -367), 0), 100000000, 0, -366), 0), 100000000, 0, -365), 0, (("src/sexp_conv.mli", 80, 2938, 2938), ("src/sexp_conv.mli", 80, 2938, 2996), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 15)), 0); (("sexp_of_option", 867), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -362), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -364), 0), 100000000, 0, -363), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -362)], (0)), 100000000, 0, -361), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -360), 0), 100000000, 0, -359), 0), 100000000, 0, -358), 0, (("src/sexp_conv.mli", 85, 3168, 3168), ("src/sexp_conv.mli", 85, 3168, 3226), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 16)), 0); (("sexp_of_pair", 868), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -352), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -357), 0), 100000000, 0, -356), (Tag1 (0, (Tag1 (0, ((("b")), 100000000, 0, -353), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -355), 0), 100000000, 0, -354), (Tag1 (0, (Tag2 ([((("a")), 100000000, 0, -352); ((("b")), 100000000, 0, -353)]), 100000000, 0, -351), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -350), 0), 100000000, 0, -349), 0), 100000000, 0, -348), 0), 100000000, 0, -347), 0, (("src/sexp_conv.mli", 90, 3447, 3447), ("src/sexp_conv.mli", 90, 3447, 3519), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 17)), 0); (("sexp_of_triple", 869), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -338), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -346), 0), 100000000, 0, -345), (Tag1 (0, (Tag1 (0, ((("b")), 100000000, 0, -339), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -344), 0), 100000000, 0, -343), (Tag1 (0, (Tag1 (0, ((("c")), 100000000, 0, -340), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -342), 0), 100000000, 0, -341), (Tag1 (0, (Tag2 ([((("a")), 100000000, 0, -338); ((("b")), 100000000, 0, -339); ((("c")), 100000000, 0, -340)]), 100000000, 0, -337), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -336), 0), 100000000, 0, -335), 0), 100000000, 0, -334), 0), 100000000, 0, -333), 0), 100000000, 0, -332), 0, (("src/sexp_conv.mli", 95, 3676, 3676), ("src/sexp_conv.mli", 100, 3773, 3784), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 18)), 0); (("sexp_of_list", 870), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -329), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -331), 0), 100000000, 0, -330), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -329)], (0)), 100000000, 0, -328), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -327), 0), 100000000, 0, -326), 0), 100000000, 0, -325), 0, (("src/sexp_conv.mli", 105, 3952, 3952), ("src/sexp_conv.mli", 105, 3952, 4006), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 19)), 0); (("sexp_of_array", 871), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -322), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -324), 0), 100000000, 0, -323), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -322)], (0)), 100000000, 0, -321), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -320), 0), 100000000, 0, -319), 0), 100000000, 0, -318), 0, (("src/sexp_conv.mli", 110, 4174, 4174), ("src/sexp_conv.mli", 110, 4174, 4230), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 20)), 0); (("sexp_of_hashtbl", 872), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -312), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -317), 0), 100000000, 0, -316), (Tag1 (0, (Tag1 (0, ((("b")), 100000000, 0, -313), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -315), 0), 100000000, 0, -314), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Hashtbl"), "t"), [((("a")), 100000000, 0, -312); ((("b")), 100000000, 0, -313)], (0)), 100000000, 0, -311), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -310), 0), 100000000, 0, -309), 0), 100000000, 0, -308), 0), 100000000, 0, -307), 0, (("src/sexp_conv.mli", 116, 4506, 4506), ("src/sexp_conv.mli", 116, 4506, 4592), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 21)), 0); (("sexp_of_opaque", 873), ((Tag1 (0, ((("a")), 100000000, 0, -306), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -305), 0), 100000000, 0, -304), 0, (("src/sexp_conv.mli", 121, 4774, 4774), ("src/sexp_conv.mli", 121, 4774, 4807), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 22)), 0); (("sexp_of_fun", 874), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -303), ((("b")), 100000000, 0, -302), 0), 100000000, 0, -301), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -300), 0), 100000000, 0, -299), 0, (("src/sexp_conv.mli", 126, 5020, 5020), ("src/sexp_conv.mli", 126, 5020, 5058), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 23)), 0); Tag2 (("Of_sexp_error", 875), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -297); (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -298)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Sexplib0__Sexp_conv", 24)), 2, 0); (("record_check_extra_fields", 876), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -296)], (0)), 100000000, 0, -295), 0, (("src/sexp_conv.mli", 136, 5393, 5393), ("src/sexp_conv.mli", 136, 5393, 5433), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 25)), 0); (("of_sexp_error", 877), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -294), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -293), ((("a")), 100000000, 0, -292), 0), 100000000, 0, -291), 0), 100000000, 0, -290), 0, (("src/sexp_conv.mli", 139, 5515, 5515), ("src/sexp_conv.mli", 139, 5515, 5557), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 26)), 0); (("of_sexp_error_exn", 878), ((Tag1 (0, (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -289), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -288), ((("a")), 100000000, 0, -287), 0), 100000000, 0, -286), 0), 100000000, 0, -285), 0, (("src/sexp_conv.mli", 142, 5625, 5625), ("src/sexp_conv.mli", 142, 5625, 5668), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 27)), 0); (("unit_of_sexp", 879), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -284), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -283), 0), 100000000, 0, -282), 0, (("src/sexp_conv.mli", 146, 5757, 5757), ("src/sexp_conv.mli", 146, 5757, 5790), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 28)), 0); (("bool_of_sexp", 880), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -281), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -280), 0), 100000000, 0, -279), 0, (("src/sexp_conv.mli", 150, 5879, 5879), ("src/sexp_conv.mli", 150, 5879, 5912), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 29)), 0); (("string_of_sexp", 881), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -278), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -277), 0), 100000000, 0, -276), 0, (("src/sexp_conv.mli", 154, 6005, 6005), ("src/sexp_conv.mli", 154, 6005, 6042), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 30)), 0); (("bytes_of_sexp", 882), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -275), (Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -274), 0), 100000000, 0, -273), 0, (("src/sexp_conv.mli", 158, 6133, 6133), ("src/sexp_conv.mli", 158, 6133, 6168), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 31)), 0); (("char_of_sexp", 883), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -272), (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -271), 0), 100000000, 0, -270), 0, (("src/sexp_conv.mli", 162, 6257, 6257), ("src/sexp_conv.mli", 162, 6257, 6290), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 32)), 0); (("int_of_sexp", 884), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -269), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -268), 0), 100000000, 0, -267), 0, (("src/sexp_conv.mli", 166, 6377, 6377), ("src/sexp_conv.mli", 166, 6377, 6408), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 33)), 0); (("float_of_sexp", 885), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -266), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -265), 0), 100000000, 0, -264), 0, (("src/sexp_conv.mli", 170, 6499, 6499), ("src/sexp_conv.mli", 170, 6499, 6534), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 34)), 0); (("int32_of_sexp", 886), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -263), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -262), 0), 100000000, 0, -261), 0, (("src/sexp_conv.mli", 174, 6625, 6625), ("src/sexp_conv.mli", 174, 6625, 6660), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 35)), 0); (("int64_of_sexp", 887), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -260), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -259), 0), 100000000, 0, -258), 0, (("src/sexp_conv.mli", 178, 6751, 6751), ("src/sexp_conv.mli", 178, 6751, 6786), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 36)), 0); (("nativeint_of_sexp", 888), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -257), (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -256), 0), 100000000, 0, -255), 0, (("src/sexp_conv.mli", 182, 6885, 6885), ("src/sexp_conv.mli", 182, 6885, 6928), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 37)), 0); (("ref_of_sexp", 889), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -254), ((("a")), 100000000, 0, -251), 0), 100000000, 0, -253), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -252), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [((("a")), 100000000, 0, -251)], (0)), 100000000, 0, -250), 0), 100000000, 0, -249), 0), 100000000, 0, -248), 0, (("src/sexp_conv.mli", 187, 7116, 7116), ("src/sexp_conv.mli", 187, 7116, 7168), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 38)), 0); (("lazy_t_of_sexp", 890), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -247), ((("a")), 100000000, 0, -244), 0), 100000000, 0, -246), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -245), (Tag3 ((Tag3 ("lazy_t", 14)), [((("a")), 100000000, 0, -244)], (0)), 100000000, 0, -243), 0), 100000000, 0, -242), 0), 100000000, 0, -241), 0, (("src/sexp_conv.mli", 192, 7362, 7362), ("src/sexp_conv.mli", 192, 7362, 7420), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 39)), 0); (("option_of_sexp", 891), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -240), ((("a")), 100000000, 0, -237), 0), 100000000, 0, -239), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -238), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -237)], (0)), 100000000, 0, -236), 0), 100000000, 0, -235), 0), 100000000, 0, -234), 0, (("src/sexp_conv.mli", 197, 7614, 7614), ("src/sexp_conv.mli", 197, 7614, 7672), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 40)), 0); (("pair_of_sexp", 892), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -233), ((("a")), 100000000, 0, -227), 0), 100000000, 0, -232), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -231), ((("b")), 100000000, 0, -228), 0), 100000000, 0, -230), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -229), (Tag2 ([((("a")), 100000000, 0, -227); ((("b")), 100000000, 0, -228)]), 100000000, 0, -226), 0), 100000000, 0, -225), 0), 100000000, 0, -224), 0), 100000000, 0, -223), 0, (("src/sexp_conv.mli", 203, 7904, 7904), ("src/sexp_conv.mli", 203, 7904, 7976), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 41)), 0); (("triple_of_sexp", 893), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -222), ((("a")), 100000000, 0, -213), 0), 100000000, 0, -221), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -220), ((("b")), 100000000, 0, -214), 0), 100000000, 0, -219), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -218), ((("c")), 100000000, 0, -215), 0), 100000000, 0, -217), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -216), (Tag2 ([((("a")), 100000000, 0, -213); ((("b")), 100000000, 0, -214); ((("c")), 100000000, 0, -215)]), 100000000, 0, -212), 0), 100000000, 0, -211), 0), 100000000, 0, -210), 0), 100000000, 0, -209), 0), 100000000, 0, -208), 0, (("src/sexp_conv.mli", 209, 8240, 8240), ("src/sexp_conv.mli", 214, 8331, 8348), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 42)), 0); (("list_of_sexp", 894), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -207), ((("a")), 100000000, 0, -204), 0), 100000000, 0, -206), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -205), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -204)], (0)), 100000000, 0, -203), 0), 100000000, 0, -202), 0), 100000000, 0, -201), 0, (("src/sexp_conv.mli", 219, 8538, 8538), ("src/sexp_conv.mli", 219, 8538, 8592), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 43)), 0); (("array_of_sexp", 895), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -200), ((("a")), 100000000, 0, -197), 0), 100000000, 0, -199), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -198), (Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -197)], (0)), 100000000, 0, -196), 0), 100000000, 0, -195), 0), 100000000, 0, -194), 0, (("src/sexp_conv.mli", 224, 8784, 8784), ("src/sexp_conv.mli", 224, 8784, 8840), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 44)), 0); (("hashtbl_of_sexp", 896), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -193), ((("a")), 100000000, 0, -187), 0), 100000000, 0, -192), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -191), ((("b")), 100000000, 0, -188), 0), 100000000, 0, -190), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -189), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Hashtbl"), "t"), [((("a")), 100000000, 0, -187); ((("b")), 100000000, 0, -188)], (0)), 100000000, 0, -186), 0), 100000000, 0, -185), 0), 100000000, 0, -184), 0), 100000000, 0, -183), 0, (("src/sexp_conv.mli", 231, 9168, 9168), ("src/sexp_conv.mli", 231, 9168, 9254), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 45)), 0); (("opaque_of_sexp", 897), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -182), ((("a")), 100000000, 0, -181), 0), 100000000, 0, -180), 0, (("src/sexp_conv.mli", 235, 9373, 9373), ("src/sexp_conv.mli", 235, 9373, 9406), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 46)), 0); (("fun_of_sexp", 898), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -179), ((("a")), 100000000, 0, -178), 0), 100000000, 0, -177), 0, (("src/sexp_conv.mli", 239, 9517, 9517), ("src/sexp_conv.mli", 239, 9517, 9547), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 47)), 0); (("sexp_grammar_with_tags", 899), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "grammar"), 0, (0)), 100000000, 0, -176), (Tag1 (("tags"), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -174); (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -175)]), 100000000, 0, -173)], (0)), 100000000, 0, -172), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "grammar"), 0, (0)), 100000000, 0, -171), 0), 100000000, 0, -170), 0), 100000000, 0, -169), 0, (("src/sexp_conv_grammar.mli", 3, 30, 30), ("src/sexp_conv_grammar.mli", 6, 116, 141), 0), 0, Tag1 ("Sexplib0__Sexp_conv_grammar", 1)), 0); (("sexp_grammar_with_tag_list", 900), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "with_tag_list"), [((("a")), 100000000, 0, -163)], (0)), 100000000, 0, -168), (Tag1 (("tags"), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -166); (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -167)]), 100000000, 0, -165)], (0)), 100000000, 0, -164), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "with_tag_list"), [((("a")), 100000000, 0, -163)], (0)), 100000000, 0, -162), 0), 100000000, 0, -161), 0), 100000000, 0, -160), 0, (("src/sexp_conv_grammar.mli", 8, 143, 143), ("src/sexp_conv_grammar.mli", 11, 242, 276), 0), 0, Tag1 ("Sexplib0__Sexp_conv_grammar", 2)), 0); (("unit_sexp_grammar", 901), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "t"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -159)], (0)), 100000000, 0, -158), 0, (("src/sexp_conv_grammar.mli", 15, 312, 312), ("src/sexp_conv_grammar.mli", 15, 312, 355), 0), 0, Tag1 ("Sexplib0__Sexp_conv_grammar", 3)), 0); (("bool_sexp_grammar", 902), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "t"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -157)], (0)), 100000000, 0, -156), 0, (("src/sexp_conv_grammar.mli", 16, 356, 356), ("src/sexp_conv_grammar.mli", 16, 356, 399), 0), 0, Tag1 ("Sexplib0__Sexp_conv_grammar", 4)), 0); (("string_sexp_grammar", 903), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "t"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -155)], (0)), 100000000, 0, -154), 0, (("src/sexp_conv_grammar.mli", 17, 400, 400), ("src/sexp_conv_grammar.mli", 17, 400, 447), 0), 0, Tag1 ("Sexplib0__Sexp_conv_grammar", 5)), 0); (("bytes_sexp_grammar", 904), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "t"), [(Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -153)], (0)), 100000000, 0, -152), 0, (("src/sexp_conv_grammar.mli", 18, 448, 448), ("src/sexp_conv_grammar.mli", 18, 448, 493), 0), 0, Tag1 ("Sexplib0__Sexp_conv_grammar", 6)), 0); (("char_sexp_grammar", 905), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "t"), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -151)], (0)), 100000000, 0, -150), 0, (("src/sexp_conv_grammar.mli", 19, 494, 494), ("src/sexp_conv_grammar.mli", 19, 494, 537), 0), 0, Tag1 ("Sexplib0__Sexp_conv_grammar", 7)), 0); (("int_sexp_grammar", 906), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "t"), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -149)], (0)), 100000000, 0, -148), 0, (("src/sexp_conv_grammar.mli", 20, 538, 538), ("src/sexp_conv_grammar.mli", 20, 538, 579), 0), 0, Tag1 ("Sexplib0__Sexp_conv_grammar", 8)), 0); (("float_sexp_grammar", 907), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "t"), [(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -147)], (0)), 100000000, 0, -146), 0, (("src/sexp_conv_grammar.mli", 21, 580, 580), ("src/sexp_conv_grammar.mli", 21, 580, 625), 0), 0, Tag1 ("Sexplib0__Sexp_conv_grammar", 9)), 0); (("int32_sexp_grammar", 908), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "t"), [(Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -145)], (0)), 100000000, 0, -144), 0, (("src/sexp_conv_grammar.mli", 22, 626, 626), ("src/sexp_conv_grammar.mli", 22, 626, 671), 0), 0, Tag1 ("Sexplib0__Sexp_conv_grammar", 10)), 0); (("int64_sexp_grammar", 909), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "t"), [(Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -143)], (0)), 100000000, 0, -142), 0, (("src/sexp_conv_grammar.mli", 23, 672, 672), ("src/sexp_conv_grammar.mli", 23, 672, 717), 0), 0, Tag1 ("Sexplib0__Sexp_conv_grammar", 11)), 0); (("nativeint_sexp_grammar", 910), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "t"), [(Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -141)], (0)), 100000000, 0, -140), 0, (("src/sexp_conv_grammar.mli", 24, 718, 718), ("src/sexp_conv_grammar.mli", 24, 718, 771), 0), 0, Tag1 ("Sexplib0__Sexp_conv_grammar", 12)), 0); (("sexp_t_sexp_grammar", 911), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -139)], (0)), 100000000, 0, -138), 0, (("src/sexp_conv_grammar.mli", 25, 772, 772), ("src/sexp_conv_grammar.mli", 25, 772, 819), 0), 0, Tag1 ("Sexplib0__Sexp_conv_grammar", 13)), 0); (("ref_sexp_grammar", 912), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "t"), [((("a")), 100000000, 0, -136)], (0)), 100000000, 0, -137), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "t"), [(Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [((("a")), 100000000, 0, -136)], (0)), 100000000, 0, -135)], (0)), 100000000, 0, -134), 0), 100000000, 0, -133), 0, (("src/sexp_conv_grammar.mli", 26, 820, 820), ("src/sexp_conv_grammar.mli", 26, 820, 885), 0), 0, Tag1 ("Sexplib0__Sexp_conv_grammar", 14)), 0); (("lazy_t_sexp_grammar", 913), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "t"), [((("a")), 100000000, 0, -131)], (0)), 100000000, 0, -132), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "t"), [(Tag3 ((Tag3 ("lazy_t", 14)), [((("a")), 100000000, 0, -131)], (0)), 100000000, 0, -130)], (0)), 100000000, 0, -129), 0), 100000000, 0, -128), 0, (("src/sexp_conv_grammar.mli", 27, 886, 886), ("src/sexp_conv_grammar.mli", 27, 886, 957), 0), 0, Tag1 ("Sexplib0__Sexp_conv_grammar", 15)), 0); (("option_sexp_grammar", 914), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "t"), [((("a")), 100000000, 0, -126)], (0)), 100000000, 0, -127), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "t"), [(Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -126)], (0)), 100000000, 0, -125)], (0)), 100000000, 0, -124), 0), 100000000, 0, -123), 0, (("src/sexp_conv_grammar.mli", 28, 958, 958), ("src/sexp_conv_grammar.mli", 28, 958, 1029), 0), 0, Tag1 ("Sexplib0__Sexp_conv_grammar", 16)), 0); (("list_sexp_grammar", 915), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "t"), [((("a")), 100000000, 0, -121)], (0)), 100000000, 0, -122), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "t"), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -121)], (0)), 100000000, 0, -120)], (0)), 100000000, 0, -119), 0), 100000000, 0, -118), 0, (("src/sexp_conv_grammar.mli", 29, 1030, 1030), ("src/sexp_conv_grammar.mli", 29, 1030, 1097), 0), 0, Tag1 ("Sexplib0__Sexp_conv_grammar", 17)), 0); (("array_sexp_grammar", 916), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "t"), [((("a")), 100000000, 0, -116)], (0)), 100000000, 0, -117), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "t"), [(Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -116)], (0)), 100000000, 0, -115)], (0)), 100000000, 0, -114), 0), 100000000, 0, -113), 0, (("src/sexp_conv_grammar.mli", 30, 1098, 1098), ("src/sexp_conv_grammar.mli", 30, 1098, 1167), 0), 0, Tag1 ("Sexplib0__Sexp_conv_grammar", 18)), 0); (("opaque_sexp_grammar", 917), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "t"), [((("a")), 100000000, 0, -112)], (0)), 100000000, 0, -111), 0, (("src/sexp_conv_grammar.mli", 31, 1168, 1168), ("src/sexp_conv_grammar.mli", 31, 1168, 1211), 0), 0, Tag1 ("Sexplib0__Sexp_conv_grammar", 19)), 0); (("fun_sexp_grammar", 918), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp_grammar"), "t"), [((("a")), 100000000, 0, -110)], (0)), 100000000, 0, -109), 0, (("src/sexp_conv_grammar.mli", 32, 1212, 1212), ("src/sexp_conv_grammar.mli", 32, 1212, 1252), 0), 0, Tag1 ("Sexplib0__Sexp_conv_grammar", 20)), 0); (("sexp_of_exn", 919), ((Tag1 (0, (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -108), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -107), 0), 100000000, 0, -106), 0, (("src/sexp_conv.mli", 252, 9862, 9862), ("src/sexp_conv.mli", 252, 9862, 9893), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 48)), 0); (("printexc_prefer_sexp", 920), ((Tag1 (0, (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -105), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -104), 0), 100000000, 0, -103), 0, (("src/sexp_conv.mli", 262, 10332, 10332), ("src/sexp_conv.mli", 262, 10332, 10372), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 49)), 0); (("sexp_of_exn_opt", 921), ((Tag1 (0, (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -102), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -101)], (0)), 100000000, 0, -100), 0), 100000000, 0, -99), 0, (("src/sexp_conv.mli", 266, 10511, 10511), ("src/sexp_conv.mli", 266, 10511, 10553), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 50)), 0); Tag3 (("Exn_converter", 922), 0, (Tag1 ([(("add", 955), ((Tag1 (Tag1 ("printexc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -436)], (0)), 100000000, 0, -435), (Tag1 (Tag1 ("finalise"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -434)], (0)), 100000000, 0, -433), (Tag1 (0, (Tag3 ((Tag3 ("extension_constructor", 16)), 0, (0)), 100000000, 0, -432), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -431), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -430), 0), 100000000, 0, -429), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -428), 0), 100000000, 0, -427), 0), 100000000, 0, -426), 0), 100000000, 0, -425), 0), 100000000, 0, -424), 0, (("src/sexp_conv.mli", 273, 10811, 10813), ("src/sexp_conv.mli", 278, 10917, 10928), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 51)), 0); Tag3 (("For_unit_tests_only", 956), 0, (Tag1 ([(("size", 957), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -439), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -438), 0), 100000000, 0, -437), 0, (("src/sexp_conv.mli", 282, 10966, 10970), ("src/sexp_conv.mli", 282, 10966, 10992), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 52)), 0)]), 0, (("src/sexp_conv.mli", 281, 10931, 10933), ("src/sexp_conv.mli", 283, 10993, 10998), 0), Tag1 ("Sexplib0__Sexp_conv", 53)), 0, 0)]), 0, (("src/sexp_conv.mli", 268, 10555, 10555), ("src/sexp_conv.mli", 284, 10999, 11002), 0), Tag1 ("Sexplib0__Sexp_conv", 54)), 0, 0); (("ignore", 923), ((Tag1 (0, ((0), 100000000, 0, -98), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -97), 0), 100000000, 0, -96), (("%ignore", 1, 1, "", [0], 0)), (("src/sexp_conv.mli", 289, 11045, 11045), ("src/sexp_conv.mli", 289, 11045, 11084), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 55)), 0); (("=", 924), ((Tag1 (0, ((("a")), 100000000, 0, -95), (Tag1 (0, ((("a")), 100000000, 0, -95), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -94), 0), 100000000, 0, -93), 0), 100000000, 0, -92), (("%equal", 2, 1, "", [0; 0], 0)), (("src/sexp_conv.mli", 290, 11085, 11085), ("src/sexp_conv.mli", 290, 11085, 11129), 0), 0, Tag1 ("Sexplib0__Sexp_conv", 56)), 0); Tag1 (("bigstring", 925), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Bigarray"), "Array1"), "t"), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -89); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Bigarray"), "int8_unsigned_elt"), 0, (0)), 100000000, 0, -90); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Bigarray"), "c_layout"), 0, (0)), 100000000, 0, -91)], (0)), 100000000, 0, -88)), 0, 0, 0, 0, (("src/conv.mli", 8, 134, 134), ("src/conv.mli", 8, 134, 195), 0), 0, 0, 0, Tag1 ("Sexplib__Conv", 0)), 1, 0); Tag1 (("float32_vec", 926), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Bigarray"), "Array1"), "t"), [(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -85); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Bigarray"), "float32_elt"), 0, (0)), 100000000, 0, -86); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Bigarray"), "fortran_layout"), 0, (0)), 100000000, 0, -87)], (0)), 100000000, 0, -84)), 0, 0, 0, 0, (("src/conv.mli", 9, 196, 196), ("src/conv.mli", 9, 196, 260), 0), 0, 0, 0, Tag1 ("Sexplib__Conv", 1)), 1, 0); Tag1 (("float64_vec", 927), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Bigarray"), "Array1"), "t"), [(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -81); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Bigarray"), "float64_elt"), 0, (0)), 100000000, 0, -82); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Bigarray"), "fortran_layout"), 0, (0)), 100000000, 0, -83)], (0)), 100000000, 0, -80)), 0, 0, 0, 0, (("src/conv.mli", 10, 261, 261), ("src/conv.mli", 10, 261, 325), 0), 0, 0, 0, Tag1 ("Sexplib__Conv", 2)), 1, 0); Tag1 (("vec", 928), (0, 0, 0, 1, ((Tag3 ((("float64_vec", 927)), 0, (0)), 100000000, 0, -79)), 0, 0, 0, 0, (("src/conv.mli", 11, 326, 326), ("src/conv.mli", 11, 326, 348), 0), 0, 0, 0, Tag1 ("Sexplib__Conv", 3)), 1, 0); Tag1 (("float32_mat", 929), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Bigarray"), "Array2"), "t"), [(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -76); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Bigarray"), "float32_elt"), 0, (0)), 100000000, 0, -77); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Bigarray"), "fortran_layout"), 0, (0)), 100000000, 0, -78)], (0)), 100000000, 0, -75)), 0, 0, 0, 0, (("src/conv.mli", 12, 349, 349), ("src/conv.mli", 12, 349, 413), 0), 0, 0, 0, Tag1 ("Sexplib__Conv", 4)), 1, 0); Tag1 (("float64_mat", 930), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Bigarray"), "Array2"), "t"), [(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -72); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Bigarray"), "float64_elt"), 0, (0)), 100000000, 0, -73); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Bigarray"), "fortran_layout"), 0, (0)), 100000000, 0, -74)], (0)), 100000000, 0, -71)), 0, 0, 0, 0, (("src/conv.mli", 13, 414, 414), ("src/conv.mli", 13, 414, 478), 0), 0, 0, 0, Tag1 ("Sexplib__Conv", 5)), 1, 0); Tag1 (("mat", 931), (0, 0, 0, 1, ((Tag3 ((("float64_mat", 930)), 0, (0)), 100000000, 0, -70)), 0, 0, 0, 0, (("src/conv.mli", 14, 479, 479), ("src/conv.mli", 14, 479, 501), 0), 0, 0, 0, Tag1 ("Sexplib__Conv", 6)), 1, 0); (("sexp_of_bigstring", 932), ((Tag1 (0, (Tag3 ((("bigstring", 925)), 0, (0)), 100000000, 0, -69), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -68), 0), 100000000, 0, -67), 0, (("src/conv.mli", 20, 669, 669), ("src/conv.mli", 20, 669, 712), 0), 0, Tag1 ("Sexplib__Conv", 7)), 0); (("sexp_of_float32_vec", 933), ((Tag1 (0, (Tag3 ((("float32_vec", 926)), 0, (0)), 100000000, 0, -66), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -65), 0), 100000000, 0, -64), 0, (("src/conv.mli", 24, 850, 850), ("src/conv.mli", 24, 850, 897), 0), 0, Tag1 ("Sexplib__Conv", 8)), 0); (("sexp_of_float64_vec", 934), ((Tag1 (0, (Tag3 ((("float64_vec", 927)), 0, (0)), 100000000, 0, -63), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -62), 0), 100000000, 0, -61), 0, (("src/conv.mli", 28, 1035, 1035), ("src/conv.mli", 28, 1035, 1082), 0), 0, Tag1 ("Sexplib__Conv", 9)), 0); (("sexp_of_vec", 935), ((Tag1 (0, (Tag3 ((("vec", 928)), 0, (0)), 100000000, 0, -60), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -59), 0), 100000000, 0, -58), 0, (("src/conv.mli", 31, 1146, 1146), ("src/conv.mli", 31, 1146, 1177), 0), 0, Tag1 ("Sexplib__Conv", 10)), 0); (("sexp_of_float32_mat", 936), ((Tag1 (0, (Tag3 ((("float32_mat", 929)), 0, (0)), 100000000, 0, -57), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -56), 0), 100000000, 0, -55), 0, (("src/conv.mli", 35, 1315, 1315), ("src/conv.mli", 35, 1315, 1362), 0), 0, Tag1 ("Sexplib__Conv", 11)), 0); (("sexp_of_float64_mat", 937), ((Tag1 (0, (Tag3 ((("float64_mat", 930)), 0, (0)), 100000000, 0, -54), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -53), 0), 100000000, 0, -52), 0, (("src/conv.mli", 39, 1500, 1500), ("src/conv.mli", 39, 1500, 1547), 0), 0, Tag1 ("Sexplib__Conv", 12)), 0); (("sexp_of_mat", 938), ((Tag1 (0, (Tag3 ((("mat", 931)), 0, (0)), 100000000, 0, -51), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -50), 0), 100000000, 0, -49), 0, (("src/conv.mli", 42, 1611, 1611), ("src/conv.mli", 42, 1611, 1642), 0), 0, Tag1 ("Sexplib__Conv", 13)), 0); (("string_of__of__sexp_of", 939), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -46), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -48), 0), 100000000, 0, -47), (Tag1 (0, ((("a")), 100000000, 0, -46), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -45), 0), 100000000, 0, -44), 0), 100000000, 0, -43), 0, (("src/conv.mli", 47, 1800, 1800), ("src/conv.mli", 47, 1800, 1859), 0), 0, Tag1 ("Sexplib__Conv", 14)), 0); (("bigstring_sexp_grammar", 940), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("bigstring", 925)), 0, (0)), 100000000, 0, -42)], (0)), 100000000, 0, -41), 0, (("src/conv.mli", 51, 1917, 1917), ("src/conv.mli", 51, 1917, 1979), 0), 0, Tag1 ("Sexplib__Conv", 16)), 0); (("bigstring_of_sexp", 941), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -40), (Tag3 ((("bigstring", 925)), 0, (0)), 100000000, 0, -39), 0), 100000000, 0, -38), 0, (("src/conv.mli", 55, 2095, 2095), ("src/conv.mli", 55, 2095, 2138), 0), 0, Tag1 ("Sexplib__Conv", 17)), 0); (("float32_vec_sexp_grammar", 942), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("float32_vec", 926)), 0, (0)), 100000000, 0, -37)], (0)), 100000000, 0, -36), 0, (("src/conv.mli", 57, 2140, 2140), ("src/conv.mli", 57, 2140, 2206), 0), 0, Tag1 ("Sexplib__Conv", 18)), 0); (("float32_vec_of_sexp", 943), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -35), (Tag3 ((("float32_vec", 926)), 0, (0)), 100000000, 0, -34), 0), 100000000, 0, -33), 0, (("src/conv.mli", 61, 2341, 2341), ("src/conv.mli", 61, 2341, 2388), 0), 0, Tag1 ("Sexplib__Conv", 19)), 0); (("float64_vec_sexp_grammar", 944), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("float64_vec", 927)), 0, (0)), 100000000, 0, -32)], (0)), 100000000, 0, -31), 0, (("src/conv.mli", 63, 2390, 2390), ("src/conv.mli", 63, 2390, 2456), 0), 0, Tag1 ("Sexplib__Conv", 20)), 0); (("float64_vec_of_sexp", 945), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -30), (Tag3 ((("float64_vec", 927)), 0, (0)), 100000000, 0, -29), 0), 100000000, 0, -28), 0, (("src/conv.mli", 67, 2591, 2591), ("src/conv.mli", 67, 2591, 2638), 0), 0, Tag1 ("Sexplib__Conv", 21)), 0); (("vec_sexp_grammar", 946), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("vec", 928)), 0, (0)), 100000000, 0, -27)], (0)), 100000000, 0, -26), 0, (("src/conv.mli", 69, 2640, 2640), ("src/conv.mli", 69, 2640, 2690), 0), 0, Tag1 ("Sexplib__Conv", 22)), 0); (("vec_of_sexp", 947), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -25), (Tag3 ((("vec", 928)), 0, (0)), 100000000, 0, -24), 0), 100000000, 0, -23), 0, (("src/conv.mli", 72, 2750, 2750), ("src/conv.mli", 72, 2750, 2781), 0), 0, Tag1 ("Sexplib__Conv", 23)), 0); (("float32_mat_sexp_grammar", 948), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("float32_mat", 929)), 0, (0)), 100000000, 0, -22)], (0)), 100000000, 0, -21), 0, (("src/conv.mli", 74, 2783, 2783), ("src/conv.mli", 74, 2783, 2849), 0), 0, Tag1 ("Sexplib__Conv", 24)), 0); (("float32_mat_of_sexp", 949), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -20), (Tag3 ((("float32_mat", 929)), 0, (0)), 100000000, 0, -19), 0), 100000000, 0, -18), 0, (("src/conv.mli", 78, 2984, 2984), ("src/conv.mli", 78, 2984, 3031), 0), 0, Tag1 ("Sexplib__Conv", 25)), 0); (("float64_mat_sexp_grammar", 950), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("float64_mat", 930)), 0, (0)), 100000000, 0, -17)], (0)), 100000000, 0, -16), 0, (("src/conv.mli", 80, 3033, 3033), ("src/conv.mli", 80, 3033, 3099), 0), 0, Tag1 ("Sexplib__Conv", 26)), 0); (("float64_mat_of_sexp", 951), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -15), (Tag3 ((("float64_mat", 930)), 0, (0)), 100000000, 0, -14), 0), 100000000, 0, -13), 0, (("src/conv.mli", 84, 3234, 3234), ("src/conv.mli", 84, 3234, 3281), 0), 0, Tag1 ("Sexplib__Conv", 27)), 0); (("mat_sexp_grammar", 952), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("mat", 931)), 0, (0)), 100000000, 0, -12)], (0)), 100000000, 0, -11), 0, (("src/conv.mli", 86, 3283, 3283), ("src/conv.mli", 86, 3283, 3333), 0), 0, Tag1 ("Sexplib__Conv", 28)), 0); (("mat_of_sexp", 953), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -10), (Tag3 ((("mat", 931)), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("src/conv.mli", 89, 3398, 3398), ("src/conv.mli", 89, 3398, 3429), 0), 0, Tag1 ("Sexplib__Conv", 29)), 0); (("of_string__of__of_sexp", 954), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -7), ((("a")), 100000000, 0, -4), 0), 100000000, 0, -6), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5), ((("a")), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/conv.mli", 94, 3591, 3591), ("src/conv.mli", 94, 3591, 3650), 0), 0, Tag1 ("Sexplib__Conv", 30)), 0)], "Sexplib__Conv", [("Sexplib__Conv", ("k\002_\019x\238a\n\164\140\156\204\001R\005\253")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Random", ("\020\005Xq\171\026\218\152X\135\254\023\133zK\200")); ("Stdlib__Printf", ("\215<\139]\021\142\224E\245m\198qc(W\229")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Bytes", ("C\134\194)\175\222\137p\205\246\244\r\241\164P\209")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sexplib__Type_with_layout", ("Q\170\019\238\156\246\192\156\b`\250o[6g\024")); ("Sexplib__Type", ("\147\252\252\167_\149\137\235\001d\241\255`\173Cs")); ("Sexplib__Src_pos", ("\157\022\246\144K\127\174bk\214\128&E\nh\213")); ("Sexplib__Sexp_intf", ("\\\031Fc\157\000\226\253\208\151\241\218a\195\187w")); ("Sexplib__Sexp", ("b\191\237;\251D\001\027M=x\201\143\185:d")); ("Sexplib__Pre_sexp", ("))\b\146\225\144^\227\218\181;f\220\tA\006")); ("Sexplib__Parser_with_layout", ("W\155\134\171aBJ\251|G6\192'S\210<")); ("Sexplib__Parser", ("\203&3\188\178\148:\254\176\140\127\227\029jQL")); ("Sexplib__Lexer", ("M\181eW\204\2193X\225\170yM\228!\146s")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("Sexplib", ("\249\031\145\178\014\020\n\209\129\143\012\015<K\177\189")); ("Parsexp__Positions", ("BE\135\222xW\224\233\184\004o\169\248\bH\230")); ("Parsexp__Parsexp_intf", ("\006\239e\204\167\243e2&\192H\160\029XNm")); ("Parsexp__Parser_intf", ("\154\197J\002\004\252i\162\190\241\151\210\157\024\167e")); ("Parsexp__Parser", ("n\164F;=\199\178\019\150]\2502\176\014a\165")); ("Parsexp__Parse_error_intf", ("\011\229\182\179W\161\176\160P\249\165\214ef\011\229")); ("Parsexp__Parse_error", ("*\031\166\142M\171\026\030\\K7\157Y\232\208\234")); ("Parsexp__Old_parser_cont_state", ("\2535&90\136_\154\027}Oc0\138%X")); ("Parsexp__Of_sexp_error", ("\253\171Y\150\210\218\191\255\160\211\134d/l\132\228")); ("Parsexp__Import", ("\017\029\157\225\239\135p*0\207\146\197\020\128\195!")); ("Parsexp__Cst", (")\228;6o~\227\000pRf\153\216\244sD")); ("Parsexp__Conv_intf", ("\004r\193,k\2254\168\149\229+hmw\134\228")); ("Parsexp__Conv_error", ("\195Bo\140A|\220\136\210\137\165&!\164\134\021")); ("Parsexp__Conv", ("\238|^\141\226\177\185\022$*\023\188\020\002P\229")); ("Parsexp__Automaton_state_intf", ("\196\146]2\143u|+%\027\185v2\225\r\229")); ("Parsexp__Automaton_state", ("L#\030=\218R\022 \228<\188-\r\211\157_")); ("Parsexp__Automaton_stack_intf", ("\235\204\0296]\2449F\029\b:\006\217\162f\024")); ("Parsexp__Automaton_stack", ("\246/\135\251\031)\015r\003\237\254S$\181\243\201")); ("Parsexp__", ("\182\180\203\030\218\020\246\196\221\171_\030GE\171\192")); ("Parsexp", ("\023d\176\173 \b\181o\028\163R\205\005\226BE")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
val of_string__of__of_sexp : (Sexplib.Sexp.t -> 'a) -> string -> 'a

type producer = {
  producer_identifier : Dune__exe.Syntax.identifier Dune__exe.Syntax.located;
  producer_symbol : Dune__exe.Syntax.symbol;
  producer_attributes : Dune__exe.Syntax.attributes;
}
type producers = producer list
type branch = {
  branch_position : Dune__exe.Positions.t;
  producers : producers;
  action : Dune__exe.Syntax.action;
  branch_prec_annotation : Dune__exe.Syntax.branch_prec_annotation;
  branch_production_level : Dune__exe.Syntax.branch_production_level;
}
type branches = branch list
type rule = {
  branches : branches;
  positions : Dune__exe.Positions.t list;
  inline_flag : bool;
  attributes : Dune__exe.Syntax.attributes;
}
type grammar = {
  preludes : Dune__exe.Stretch.t list;
  postludes : Dune__exe.Syntax.postlude list;
  parameters : Dune__exe.Stretch.t list;
  start_symbols : Dune__exe.StringSet.t;
  types : Dune__exe.Stretch.ocamltype Dune__exe.StringMap.t;
  tokens : Dune__exe.Syntax.token_properties Dune__exe.StringMap.t;
  on_error_reduce :
    Dune__exe.Syntax.on_error_reduce_level Dune__exe.StringMap.t;
  gr_attributes : Dune__exe.Syntax.attributes;
  rules : rule Dune__exe.StringMap.t;
}
val producer_identifier : producer -> Dune__exe.Syntax.identifier
val producer_identifier_located :
  producer -> Dune__exe.Syntax.identifier Dune__exe.Syntax.located
val producer_symbol : producer -> Dune__exe.Syntax.symbol
val producer_attributes : producer -> Dune__exe.Syntax.attributes
val get_branches : rule -> branches
val transform_branches : (branches -> branches) -> rule -> rule
val tokens : grammar -> Dune__exe.StringMap.key list
val typed_tokens :
  grammar ->
  (Dune__exe.StringMap.key * Dune__exe.Stretch.ocamltype option) list
val nonterminals : grammar -> Dune__exe.Syntax.nonterminal list
val ocamltype_of_symbol :
  grammar -> Dune__exe.StringMap.key -> Dune__exe.Stretch.ocamltype option
val ocamltype_of_start_symbol :
  grammar -> Dune__exe.StringMap.key -> Dune__exe.Stretch.ocamltype
val is_inline_symbol : grammar -> Dune__exe.StringMap.key -> bool
val is_inline_producer : grammar -> producer -> bool
("DEBUG:rule", [Tag1 (("producer", 921), (0, 0, [[(("producer_identifier", 432), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Syntax"), "located"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Syntax"), "identifier"), 0, (0)), 100000000, 0, -94)], (0)), 100000000, 0, -93), (("src/basicSyntax.ml", 39, 2071, 2075), ("src/basicSyntax.ml", 39, 2071, 2116), 0), 0, Tag1 ("Dune__exe__BasicSyntax", 1)); (("producer_symbol", 433), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Syntax"), "symbol"), 0, (0)), 100000000, 0, -95), (("src/basicSyntax.ml", 40, 2117, 2121), ("src/basicSyntax.ml", 40, 2117, 2150), 0), 0, Tag1 ("Dune__exe__BasicSyntax", 2)); (("producer_attributes", 434), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Syntax"), "attributes"), 0, (0)), 100000000, 0, -96), (("src/basicSyntax.ml", 41, 2151, 2155), ("src/basicSyntax.ml", 41, 2151, 2188), 0), 0, Tag1 ("Dune__exe__BasicSyntax", 3))]], 1, 0, 0, 0, 0, 0, (("src/basicSyntax.ml", 38, 2053, 2053), ("src/basicSyntax.ml", 42, 2189, 2192), 0), 0, 0, 0, Tag1 ("Dune__exe__BasicSyntax", 0)), 1, 0); Tag1 (("producers", 922), (0, 0, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("producer", 921)), 0, (0)), 100000000, 0, -92)], (0)), 100000000, 0, -91)), 0, 0, 0, 0, (("src/basicSyntax.ml", 44, 2194, 2194), ("src/basicSyntax.ml", 45, 2211, 2226), 0), 0, 0, 0, Tag1 ("Dune__exe__BasicSyntax", 4)), 1, 0); Tag1 (("branch", 923), (0, 0, [[(("branch_position", 511), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Positions"), "t"), 0, (0)), 100000000, 0, -86), (("src/basicSyntax.ml", 53, 2452, 2456), ("src/basicSyntax.ml", 53, 2452, 2494), 0), 0, Tag1 ("Dune__exe__BasicSyntax", 6)); (("producers", 512), 0, (Tag3 ((("producers", 922)), 0, (0)), 100000000, 0, -87), (("src/basicSyntax.ml", 54, 2495, 2499), ("src/basicSyntax.ml", 54, 2495, 2535), 0), 0, Tag1 ("Dune__exe__BasicSyntax", 7)); (("action", 513), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Syntax"), "action"), 0, (0)), 100000000, 0, -88), (("src/basicSyntax.ml", 55, 2536, 2540), ("src/basicSyntax.ml", 55, 2536, 2573), 0), 0, Tag1 ("Dune__exe__BasicSyntax", 8)); (("branch_prec_annotation", 514), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Syntax"), "branch_prec_annotation"), 0, (0)), 100000000, 0, -89), (("src/basicSyntax.ml", 56, 2574, 2578), ("src/basicSyntax.ml", 56, 2574, 2627), 0), 0, Tag1 ("Dune__exe__BasicSyntax", 9)); (("branch_production_level", 515), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Syntax"), "branch_production_level"), 0, (0)), 100000000, 0, -90), (("src/basicSyntax.ml", 57, 2628, 2632), ("src/basicSyntax.ml", 57, 2628, 2681), 0), 0, Tag1 ("Dune__exe__BasicSyntax", 10))]], 1, 0, 0, 0, 0, 0, (("src/basicSyntax.ml", 52, 2436, 2436), ("src/basicSyntax.ml", 58, 2682, 2685), 0), 0, 0, 0, Tag1 ("Dune__exe__BasicSyntax", 5)), 1, 0); Tag1 (("branches", 924), (0, 0, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("branch", 923)), 0, (0)), 100000000, 0, -85)], (0)), 100000000, 0, -84)), 0, 0, 0, 0, (("src/basicSyntax.ml", 60, 2687, 2687), ("src/basicSyntax.ml", 61, 2703, 2716), 0), 0, 0, 0, Tag1 ("Dune__exe__BasicSyntax", 11)), 1, 0); Tag1 (("rule", 925), (0, 0, [[(("branches", 589), 0, (Tag3 ((("branches", 924)), 0, (0)), 100000000, 0, -79), (("src/basicSyntax.ml", 71, 3002, 3006), ("src/basicSyntax.ml", 71, 3002, 3029), 0), 0, Tag1 ("Dune__exe__BasicSyntax", 13)); (("positions", 590), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Positions"), "t"), 0, (0)), 100000000, 0, -81)], (0)), 100000000, 0, -80), (("src/basicSyntax.ml", 72, 3030, 3034), ("src/basicSyntax.ml", 72, 3030, 3065), 0), 0, Tag1 ("Dune__exe__BasicSyntax", 14)); (("inline_flag", 591), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -82), (("src/basicSyntax.ml", 73, 3066, 3070), ("src/basicSyntax.ml", 73, 3066, 3089), 0), 0, Tag1 ("Dune__exe__BasicSyntax", 15)); (("attributes", 592), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Syntax"), "attributes"), 0, (0)), 100000000, 0, -83), (("src/basicSyntax.ml", 74, 3090, 3094), ("src/basicSyntax.ml", 74, 3090, 3119), 0), 0, Tag1 ("Dune__exe__BasicSyntax", 16))]], 1, 0, 0, 0, 0, 0, (("src/basicSyntax.ml", 70, 2988, 2988), ("src/basicSyntax.ml", 75, 3120, 3123), 0), 0, 0, 0, Tag1 ("Dune__exe__BasicSyntax", 12)), 1, 0); Tag1 (("grammar", 926), (0, 0, [[(("preludes", 594), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Stretch"), "t"), 0, (0)), 100000000, 0, -64)], (0)), 100000000, 0, -63), (("src/basicSyntax.ml", 84, 3453, 3457), ("src/basicSyntax.ml", 84, 3453, 3490), 0), 0, Tag1 ("Dune__exe__BasicSyntax", 18)); (("postludes", 595), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Syntax"), "postlude"), 0, (0)), 100000000, 0, -66)], (0)), 100000000, 0, -65), (("src/basicSyntax.ml", 85, 3491, 3495), ("src/basicSyntax.ml", 85, 3491, 3534), 0), 0, Tag1 ("Dune__exe__BasicSyntax", 19)); (("parameters", 596), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Stretch"), "t"), 0, (0)), 100000000, 0, -68)], (0)), 100000000, 0, -67), (("src/basicSyntax.ml", 86, 3535, 3539), ("src/basicSyntax.ml", 86, 3535, 3572), 0), 0, Tag1 ("Dune__exe__BasicSyntax", 20)); (("start_symbols", 643), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "StringSet"), "t"), 0, (0)), 100000000, 0, -69), (("src/basicSyntax.ml", 87, 3573, 3577), ("src/basicSyntax.ml", 87, 3573, 3607), 0), 0, Tag1 ("Dune__exe__BasicSyntax", 21)); (("types", 692), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "StringMap"), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Stretch"), "ocamltype"), 0, (0)), 100000000, 0, -71)], (0)), 100000000, 0, -70), (("src/basicSyntax.ml", 88, 3608, 3612), ("src/basicSyntax.ml", 88, 3608, 3660), 0), 0, Tag1 ("Dune__exe__BasicSyntax", 22)); (("tokens", 693), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "StringMap"), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Syntax"), "token_properties"), 0, (0)), 100000000, 0, -73)], (0)), 100000000, 0, -72), (("src/basicSyntax.ml", 89, 3661, 3665), ("src/basicSyntax.ml", 89, 3661, 3719), 0), 0, Tag1 ("Dune__exe__BasicSyntax", 23)); (("on_error_reduce", 694), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "StringMap"), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Syntax"), "on_error_reduce_level"), 0, (0)), 100000000, 0, -75)], (0)), 100000000, 0, -74), (("src/basicSyntax.ml", 90, 3720, 3724), ("src/basicSyntax.ml", 90, 3720, 3776), 0), 0, Tag1 ("Dune__exe__BasicSyntax", 24)); (("gr_attributes", 695), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Syntax"), "attributes"), 0, (0)), 100000000, 0, -76), (("src/basicSyntax.ml", 91, 3777, 3781), ("src/basicSyntax.ml", 91, 3777, 3810), 0), 0, Tag1 ("Dune__exe__BasicSyntax", 25)); (("rules", 696), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "StringMap"), "t"), [(Tag3 ((("rule", 925)), 0, (0)), 100000000, 0, -78)], (0)), 100000000, 0, -77), (("src/basicSyntax.ml", 92, 3811, 3815), ("src/basicSyntax.ml", 92, 3811, 3850), 0), 0, Tag1 ("Dune__exe__BasicSyntax", 26))]], 1, 0, 0, 0, 0, 0, (("src/basicSyntax.ml", 83, 3435, 3435), ("src/basicSyntax.ml", 93, 3851, 3854), 0), 0, 0, 0, Tag1 ("Dune__exe__BasicSyntax", 17)), 1, 0); (("producer_identifier", 927), ((Tag1 (0, (Tag3 ((("producer", 921)), 0, (0)), 100000000, 0, -62), (Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Syntax"), "identifier"), 0, (0)), 100000000, 0, -61), 0), 100000000, 0, -60), 0, (("src/basicSyntax.ml", 99, 3980, 3984), ("src/basicSyntax.ml", 99, 3980, 4003), 0), 0, Tag1 ("Dune__exe__BasicSyntax", 27)), 0); (("producer_identifier_located", 928), ((Tag1 (0, (Tag3 ((("producer", 921)), 0, (0)), 100000000, 0, -59), (Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Syntax"), "located"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Syntax"), "identifier"), 0, (0)), 100000000, 0, -58)], (0)), 100000000, 0, -57), 0), 100000000, 0, -56), 0, (("src/basicSyntax.ml", 102, 4082, 4086), ("src/basicSyntax.ml", 102, 4082, 4113), 0), 0, Tag1 ("Dune__exe__BasicSyntax", 29)), 0); (("producer_symbol", 929), ((Tag1 (0, (Tag3 ((("producer", 921)), 0, (0)), 100000000, 0, -55), (Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Syntax"), "symbol"), 0, (0)), 100000000, 0, -54), 0), 100000000, 0, -53), 0, (("src/basicSyntax.ml", 105, 4184, 4188), ("src/basicSyntax.ml", 105, 4184, 4203), 0), 0, Tag1 ("Dune__exe__BasicSyntax", 31)), 0); (("producer_attributes", 930), ((Tag1 (0, (Tag3 ((("producer", 921)), 0, (0)), 100000000, 0, -52), (Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Syntax"), "attributes"), 0, (0)), 100000000, 0, -51), 0), 100000000, 0, -50), 0, (("src/basicSyntax.ml", 108, 4245, 4249), ("src/basicSyntax.ml", 108, 4245, 4268), 0), 0, Tag1 ("Dune__exe__BasicSyntax", 33)), 0); (("get_branches", 931), ((Tag1 (0, (Tag3 ((("rule", 925)), 0, (0)), 100000000, 0, -49), (Tag3 ((("branches", 924)), 0, (0)), 100000000, 0, -48), 0), 100000000, 0, -47), 0, (("src/basicSyntax.ml", 115, 4479, 4483), ("src/basicSyntax.ml", 115, 4479, 4495), 0), 0, Tag1 ("Dune__exe__BasicSyntax", 35)), 0); (("transform_branches", 932), ((Tag1 (0, (Tag1 (0, (Tag3 ((("branches", 924)), 0, (0)), 100000000, 0, -46), (Tag3 ((("branches", 924)), 0, (0)), 100000000, 0, -46), (1)), 100000000, 0, -45), (Tag1 (0, (Tag3 ((("rule", 925)), 0, (0)), 100000000, 0, -44), (Tag3 ((("rule", 925)), 0, (0)), 100000000, 0, -43), 0), 100000000, 0, -42), 0), 100000000, 0, -41), 0, (("src/basicSyntax.ml", 118, 4520, 4524), ("src/basicSyntax.ml", 118, 4520, 4542), 0), 0, Tag1 ("Dune__exe__BasicSyntax", 37)), 0); (("tokens", 933), ((Tag1 (0, (Tag3 ((("grammar", 926)), 0, (0)), 100000000, 0, -40), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "StringMap"), "key"), 0, (0)), 100000000, 0, -39)], (0)), 100000000, 0, -38), 0), 100000000, 0, -37), 0, (("src/basicSyntax.ml", 128, 4915, 4919), ("src/basicSyntax.ml", 128, 4915, 4925), 0), 0, Tag1 ("Dune__exe__BasicSyntax", 40)), 0); (("typed_tokens", 934), ((Tag1 (0, (Tag3 ((("grammar", 926)), 0, (0)), 100000000, 0, -36), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "StringMap"), "key"), 0, (0)), 100000000, 0, -33); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Stretch"), "ocamltype"), 0, (0)), 100000000, 0, -35)], (0)), 100000000, 0, -34)]), 100000000, 0, -32)], (0)), 100000000, 0, -31), 0), 100000000, 0, -30), 0, (("src/basicSyntax.ml", 136, 5164, 5168), ("src/basicSyntax.ml", 136, 5164, 5180), 0), 0, Tag1 ("Dune__exe__BasicSyntax", 45)), 0); (("nonterminals", 935), ((Tag1 (0, (Tag3 ((("grammar", 926)), 0, (0)), 100000000, 0, -29), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Syntax"), "nonterminal"), 0, (0)), 100000000, 0, -28)], (0)), 100000000, 0, -27), 0), 100000000, 0, -26), 0, (("src/basicSyntax.ml", 144, 5452, 5456), ("src/basicSyntax.ml", 144, 5452, 5468), 0), 0, Tag1 ("Dune__exe__BasicSyntax", 50)), 0); (("ocamltype_of_symbol", 936), ((Tag1 (0, (Tag3 ((("grammar", 926)), 0, (0)), 100000000, 0, -25), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "StringMap"), "key"), 0, (0)), 100000000, 0, -24), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Stretch"), "ocamltype"), 0, (0)), 100000000, 0, -23)], (0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0), 100000000, 0, -20), 0, (("src/basicSyntax.ml", 150, 5701, 5705), ("src/basicSyntax.ml", 150, 5701, 5724), 0), 0, Tag1 ("Dune__exe__BasicSyntax", 54)), 0); (("ocamltype_of_start_symbol", 937), ((Tag1 (0, (Tag3 ((("grammar", 926)), 0, (0)), 100000000, 0, -19), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "StringMap"), "key"), 0, (0)), 100000000, 0, -18), (Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "Stretch"), "ocamltype"), 0, (0)), 100000000, 0, -17), 0), 100000000, 0, -16), 0), 100000000, 0, -15), 0, (("src/basicSyntax.ml", 159, 5984, 5988), ("src/basicSyntax.ml", 159, 5984, 6013), 0), 0, Tag1 ("Dune__exe__BasicSyntax", 57)), 0); (("is_inline_symbol", 938), ((Tag1 (0, (Tag3 ((("grammar", 926)), 0, (0)), 100000000, 0, -14), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "StringMap"), "key"), 0, (0)), 100000000, 0, -13), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0), 100000000, 0, -10), 0, (("src/basicSyntax.ml", 169, 6332, 6336), ("src/basicSyntax.ml", 169, 6332, 6352), 0), 0, Tag1 ("Dune__exe__BasicSyntax", 60)), 0); (("is_inline_producer", 939), ((Tag1 (0, (Tag3 ((("grammar", 926)), 0, (0)), 100000000, 0, -9), (Tag1 (0, (Tag3 ((("producer", 921)), 0, (0)), 100000000, 0, -8), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("src/basicSyntax.ml", 181, 6758, 6762), ("src/basicSyntax.ml", 181, 6758, 6780), 0), 0, Tag1 ("Dune__exe__BasicSyntax", 64)), 0); (("names", 940), ((Tag1 (0, (Tag3 ((("producers", 922)), 0, (0)), 100000000, 0, -4), (Tag3 (Tag1 (Tag1 ((Tag2 ("Dune__exe")), "StringSet"), "t"), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/basicSyntax.ml", 194, 7288, 7292), ("src/basicSyntax.ml", 194, 7288, 7297), 0), 0, Tag1 ("Dune__exe__BasicSyntax", 67)), 0)], "Dune__exe__BasicSyntax", [("Dune__exe__BasicSyntax", ("\219\025F6\236\222\186\020\209\135\130+\131\228\012\003")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("MenhirSdk__Keyword", ("\171\145\177^\199\189\197f\150\136y\144\252\234>\178")); ("MenhirSdk", ("F\232\012\196l\143\145[\255\2193U\197\027\176\139")); ("Dune__exe__Syntax", ("\002\205\007\164\2347\133\182\245*x\171\004\190\178\171")); ("Dune__exe__StringSet", ("uB\206\020%\219\199\135&\196,\015\190\015^\230")); ("Dune__exe__StringMap", ("\157\157\161k*M\030\254|\006>\144X\147j\222")); ("Dune__exe__Stretch", ("\003\145~\207\198HL&\187\195e'0\204\200\156")); ("Dune__exe__Settings", ("I\214\245\150\238/\2211\219\145S\218\004a:1")); ("Dune__exe__Positions", ("\137nS\236\011\187\r[\024:\162/\201\139\237}")); ("Dune__exe__InputFile", (",\0246\029z@\127T\235\227k~\t\138\213%")); ("Dune__exe__IL", ("\194\228\178\190\251\254\231\226\207\197c\133\253i\220\170")); ("Dune__exe__Action", ("c\225H \249\179\190\007`[X\019\132@\208\193")); ("Dune__exe", ("\137\000\197\175$\007]\218\141\248\172\212\146c\153\212")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
val names : producers -> Dune__exe.StringSet.t

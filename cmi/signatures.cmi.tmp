module type OrderedTypePrintable =
  sig
    type t
    val compare : t -> t -> int
    val print : Format.formatter -> t -> unit
  end
module type SET =
  sig
    type elt
    type t
    val empty : t
    val add : elt -> t -> t
    val singleton : elt -> t
    val remove : elt -> t -> t
    val union : t -> t -> t
    val inter : t -> t -> t
    val disjoint : t -> t -> bool
    val diff : t -> t -> t
    val cardinal : t -> int
    val elements : t -> elt list
    val min_elt : t -> elt
    val min_elt_opt : t -> elt option
    val max_elt : t -> elt
    val max_elt_opt : t -> elt option
    val choose : t -> elt
    val choose_opt : t -> elt option
    val find : elt -> t -> elt
    val find_opt : elt -> t -> elt option
    val find_first : (elt -> bool) -> t -> elt
    val find_first_opt : (elt -> bool) -> t -> elt option
    val find_last : (elt -> bool) -> t -> elt
    val find_last_opt : (elt -> bool) -> t -> elt option
    val iter : (elt -> unit) -> t -> unit
    val fold : (elt -> 'acc -> 'acc) -> t -> 'acc -> 'acc
    val filter : (elt -> bool) -> t -> t
    val filter_map : (elt -> elt option) -> t -> t
    val partition : (elt -> bool) -> t -> t * t
    val split : elt -> t -> t * bool * t
    val is_empty : t -> bool
    val mem : elt -> t -> bool
    val equal : t -> t -> bool
    val compare : t -> t -> int
    val subset : t -> t -> bool
    val for_all : (elt -> bool) -> t -> bool
    val exists : (elt -> bool) -> t -> bool
    val to_list : t -> elt list
    val to_seq_from : elt -> t -> elt Seq.t
    val to_seq : t -> elt Seq.t
    val to_rev_seq : t -> elt Seq.t
    val add_seq : elt Seq.t -> t -> t
    val of_seq : elt Seq.t -> t
    val find_elt : (elt -> bool) -> t -> elt
    val map : (elt -> elt) -> t -> t
    val of_list : elt list -> t
    val print : Format.formatter -> t -> unit
  end
module type LIST =
  sig
    val print :
      (Format.formatter -> 'a -> unit) -> Format.formatter -> 'a list -> unit
    val filter_opt : ('a -> 'b option) -> 'a list -> 'b list
    val union : 'a list -> 'a list -> 'a list
    val ordered_unique : 'a list -> 'a list
    val index_of : 'a -> 'a list -> int option
    val split_at : int -> 'a list -> 'a list * 'a list
    type 'a t = 'a list = [] | (::) of 'a * 'a list
    val length : 'a list -> int
    val compare_lengths : 'a list -> 'b list -> int
    val compare_length_with : 'a list -> int -> int
    val is_empty : 'a list -> bool
    val cons : 'a -> 'a list -> 'a list
    val hd : 'a list -> 'a
    val tl : 'a list -> 'a list
    val nth : 'a list -> int -> 'a
    val nth_opt : 'a list -> int -> 'a option
    val rev : 'a list -> 'a list
    val init : int -> (int -> 'a) -> 'a list
    val append : 'a list -> 'a list -> 'a list
    val rev_append : 'a list -> 'a list -> 'a list
    val concat : 'a list list -> 'a list
    val flatten : 'a list list -> 'a list
    val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool
    val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int
    val iter : ('a -> unit) -> 'a list -> unit
    val iteri : (int -> 'a -> unit) -> 'a list -> unit
    val map : ('a -> 'b) -> 'a list -> 'b list
    val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list
    val rev_map : ('a -> 'b) -> 'a list -> 'b list
    val filter_map : ('a -> 'b option) -> 'a list -> 'b list
    val concat_map : ('a -> 'b list) -> 'a list -> 'b list
    val fold_left_map :
      ('acc -> 'a -> 'acc * 'b) -> 'acc -> 'a list -> 'acc * 'b list
    val fold_left : ('acc -> 'a -> 'acc) -> 'acc -> 'a list -> 'acc
    val fold_right : ('a -> 'acc -> 'acc) -> 'a list -> 'acc -> 'acc
    val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit
    val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list
    val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list
    val fold_left2 :
      ('acc -> 'a -> 'b -> 'acc) -> 'acc -> 'a list -> 'b list -> 'acc
    val fold_right2 :
      ('a -> 'b -> 'acc -> 'acc) -> 'a list -> 'b list -> 'acc -> 'acc
    val for_all : ('a -> bool) -> 'a list -> bool
    val exists : ('a -> bool) -> 'a list -> bool
    val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool
    val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool
    val mem : 'a -> 'a list -> bool
    val memq : 'a -> 'a list -> bool
    val find : ('a -> bool) -> 'a list -> 'a
    val find_opt : ('a -> bool) -> 'a list -> 'a option
    val find_index : ('a -> bool) -> 'a list -> int option
    val find_map : ('a -> 'b option) -> 'a list -> 'b option
    val find_mapi : (int -> 'a -> 'b option) -> 'a list -> 'b option
    val filter : ('a -> bool) -> 'a list -> 'a list
    val find_all : ('a -> bool) -> 'a list -> 'a list
    val filteri : (int -> 'a -> bool) -> 'a list -> 'a list
    val partition : ('a -> bool) -> 'a list -> 'a list * 'a list
    val partition_map :
      ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list
    val assoc : 'a -> ('a * 'b) list -> 'b
    val assoc_opt : 'a -> ('a * 'b) list -> 'b option
    val assq : 'a -> ('a * 'b) list -> 'b
    val assq_opt : 'a -> ('a * 'b) list -> 'b option
    val mem_assoc : 'a -> ('a * 'b) list -> bool
    val mem_assq : 'a -> ('a * 'b) list -> bool
    val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list
    val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list
    val split : ('a * 'b) list -> 'a list * 'b list
    val combine : 'a list -> 'b list -> ('a * 'b) list
    val sort : ('a -> 'a -> int) -> 'a list -> 'a list
    val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list
    val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list
    val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list
    val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list
    val to_seq : 'a list -> 'a Seq.t
    val of_seq : 'a Seq.t -> 'a list
  end
module type STRING =
  sig
    val print : Format.formatter -> string -> unit
    val chomp : string -> string
    val before : string -> int -> string
    val after : string -> int -> string
    val first_chars : string -> int -> string
    val last_chars : string -> int -> string
    val eq_sub_strings : string -> int -> string -> int -> int -> bool
    val is_prefix : string -> string -> bool
    val is_suffix : string -> string -> bool
    val contains_string : string -> int -> string -> int option
    val subst : string -> string -> string -> string
    val tr : char -> char -> string -> string
    val rev : string -> string
    val implode : char list -> string
    val explode : string -> char list
    type t = string
    val make : int -> char -> string
    val init : int -> (int -> char) -> string
    val empty : string
    external length : string -> int = "%string_length"
    external get : string -> int -> char = "%string_safe_get"
    val of_bytes : bytes -> string
    val to_bytes : string -> bytes
    val blit : string -> int -> bytes -> int -> int -> unit
    val concat : string -> string list -> string
    val cat : string -> string -> string
    val equal : t -> t -> bool
    val compare : t -> t -> int
    val starts_with : prefix:string -> string -> bool
    val ends_with : suffix:string -> string -> bool
    val contains_from : string -> int -> char -> bool
    val rcontains_from : string -> int -> char -> bool
    val contains : string -> char -> bool
    val sub : string -> int -> int -> string
    val split_on_char : char -> string -> string list
    val map : (char -> char) -> string -> string
    val mapi : (int -> char -> char) -> string -> string
    val fold_left : ('acc -> char -> 'acc) -> 'acc -> string -> 'acc
    val fold_right : (char -> 'acc -> 'acc) -> string -> 'acc -> 'acc
    val for_all : (char -> bool) -> string -> bool
    val exists : (char -> bool) -> string -> bool
    val trim : string -> string
    val escaped : string -> string
    val uppercase_ascii : string -> string
    val lowercase_ascii : string -> string
    val capitalize_ascii : string -> string
    val uncapitalize_ascii : string -> string
    val iter : (char -> unit) -> string -> unit
    val iteri : (int -> char -> unit) -> string -> unit
    val index_from : string -> int -> char -> int
    val index_from_opt : string -> int -> char -> int option
    val rindex_from : string -> int -> char -> int
    val rindex_from_opt : string -> int -> char -> int option
    val index : string -> char -> int
    val index_opt : string -> char -> int option
    val rindex : string -> char -> int
    val rindex_opt : string -> char -> int option
    val to_seq : t -> char Seq.t
    val to_seqi : t -> (int * char) Seq.t
    val of_seq : char Seq.t -> t
    val get_utf_8_uchar : t -> int -> Uchar.utf_decode
    val is_valid_utf_8 : t -> bool
    val get_utf_16be_uchar : t -> int -> Uchar.utf_decode
    val is_valid_utf_16be : t -> bool
    val get_utf_16le_uchar : t -> int -> Uchar.utf_decode
    val is_valid_utf_16le : t -> bool
    val get_uint8 : string -> int -> int
    val get_int8 : string -> int -> int
    val get_uint16_ne : string -> int -> int
    val get_uint16_be : string -> int -> int
    val get_uint16_le : string -> int -> int
    val get_int16_ne : string -> int -> int
    val get_int16_be : string -> int -> int
    val get_int16_le : string -> int -> int
    val get_int32_ne : string -> int -> int32
    val hash : t -> int
    val seeded_hash : int -> t -> int
    val get_int32_be : string -> int -> int32
    val get_int32_le : string -> int -> int32
    val get_int64_ne : string -> int -> int64
    val get_int64_be : string -> int -> int64
    val get_int64_le : string -> int -> int64
    external unsafe_get : string -> int -> char = "%string_unsafe_get"
    external unsafe_blit : string -> int -> bytes -> int -> int -> unit
      = "caml_blit_string" [@@noalloc]
  end
module type TAGS =
  sig
    type elt = string
    type t
    val empty : t
    val add : elt -> t -> t
    val singleton : elt -> t
    val remove : elt -> t -> t
    val union : t -> t -> t
    val inter : t -> t -> t
    val disjoint : t -> t -> bool
    val diff : t -> t -> t
    val cardinal : t -> int
    val elements : t -> elt list
    val min_elt : t -> elt
    val min_elt_opt : t -> elt option
    val max_elt : t -> elt
    val max_elt_opt : t -> elt option
    val choose : t -> elt
    val choose_opt : t -> elt option
    val find : elt -> t -> elt
    val find_opt : elt -> t -> elt option
    val find_first : (elt -> bool) -> t -> elt
    val find_first_opt : (elt -> bool) -> t -> elt option
    val find_last : (elt -> bool) -> t -> elt
    val find_last_opt : (elt -> bool) -> t -> elt option
    val iter : (elt -> unit) -> t -> unit
    val fold : (elt -> 'acc -> 'acc) -> t -> 'acc -> 'acc
    val map : (elt -> elt) -> t -> t
    val filter : (elt -> bool) -> t -> t
    val filter_map : (elt -> elt option) -> t -> t
    val partition : (elt -> bool) -> t -> t * t
    val split : elt -> t -> t * bool * t
    val is_empty : t -> bool
    val mem : elt -> t -> bool
    val equal : t -> t -> bool
    val compare : t -> t -> int
    val subset : t -> t -> bool
    val for_all : (elt -> bool) -> t -> bool
    val exists : (elt -> bool) -> t -> bool
    val to_list : t -> elt list
    val to_seq_from : elt -> t -> elt Seq.t
    val to_seq : t -> elt Seq.t
    val to_rev_seq : t -> elt Seq.t
    val add_seq : elt Seq.t -> t -> t
    val of_seq : elt Seq.t -> t
    val of_list : string list -> t
    val print : Format.formatter -> t -> unit
    val does_match : t -> t -> bool
    module Operators :
      sig
        val ( ++ ) : t -> elt -> t
        val ( -- ) : t -> elt -> t
        val ( +++ ) : t -> elt option -> t
        val ( --- ) : t -> elt option -> t
      end
  end
module type PATHNAME =
  sig
    type t = string
    val concat : t -> t -> t
    val compare : t -> t -> int
    val equal : t -> t -> bool
    val exists : t -> bool
    val mk : string -> t
    val define_context : string -> string list -> unit
    val include_dirs_of : string -> string list
    val copy : t -> t -> unit
    val to_string : t -> string
    val print : Format.formatter -> t -> unit
    val current_dir_name : t
    val parent_dir_name : t
    val read : t -> string
    val same_contents : t -> t -> bool
    val basename : t -> t
    val dirname : t -> t
    val is_relative : t -> bool
    val readlink : t -> t
    val readdir : t -> t array
    val is_link : t -> bool
    val is_directory : t -> bool
    val add_extension : string -> t -> t
    val check_extension : t -> string -> bool
    val get_extension : t -> string
    val remove_extension : t -> t
    val update_extension : string -> t -> t
    val get_extensions : t -> string
    val remove_extensions : t -> t
    val update_extensions : string -> t -> t
    val print_path_list : Format.formatter -> t list -> unit
    val pwd : t
    val parent : t -> t
    val is_prefix : t -> t -> bool
    val is_implicit : t -> bool
    module Operators :
      sig val ( / ) : t -> t -> t val ( -.- ) : t -> string -> t end
  end
module type COMMAND =
  sig
    type tags
    type pathname
    type t =
        Seq of t list
      | Cmd of spec
      | Echo of string list * pathname
      | Nop
    and spec =
        N
      | S of spec list
      | A of string
      | P of pathname
      | Px of pathname
      | Sh of string
      | T of tags
      | V of string
      | Quote of spec
    val atomize : string list -> spec
    val atomize_paths : string list -> spec
    val execute : ?quiet:bool -> ?pretend:bool -> t -> unit
    val execute_many :
      ?quiet:bool -> ?pretend:bool -> t list -> (bool list * exn) option
    val setup_virtual_command_solver : string -> (unit -> spec) -> unit
    val search_in_path : string -> string
    val reduce : spec -> spec
    val print : Format.formatter -> t -> unit
    val to_string : t -> string
    val string_of_command_spec : spec -> string
  end
module type GLOB =
  sig
    type globber
    val parse : ?dir:string -> string -> globber
    exception Parse_error of string
    val eval : globber -> string -> bool
  end
module type LOG =
  sig
    val level : int ref
    val dprintf : int -> ('a, Format.formatter, unit) format -> 'a
    val is_logging : int -> bool
    val eprintf : ('a, Format.formatter, unit) format -> 'a
    val raw_dprintf : int -> ('a, Format.formatter, unit) format -> 'a
  end
module type OUTCOME =
  sig
    type ('a, 'b) t = Good of 'a | Bad of 'b
    val wrap : ('a -> 'b) -> 'a -> ('b, exn) t
    val ignore_good : ('a, exn) t -> unit
    val good : ('a, exn) t -> 'a
  end
module type MISC =
  sig
    val opt_print :
      (Format.formatter -> 'a -> unit) ->
      Format.formatter -> 'a option -> unit
    val the : 'a option -> 'a
    val getenv : ?default:string -> string -> string
    val with_input_file : ?bin:bool -> string -> (in_channel -> 'a) -> 'a
    val with_output_file : ?bin:bool -> string -> (out_channel -> 'a) -> 'a
    val with_temp_file : string -> string -> (string -> 'a) -> 'a
    val read_file : string -> string
    val copy_chan : in_channel -> out_channel -> unit
    val copy_file : string -> string -> unit
    val print_string_list : Format.formatter -> string list -> unit
    val ( !* ) : 'a Lazy.t -> 'a
    val ( & ) : ('a -> 'b) -> 'a -> 'b
    val ( |> ) : 'a -> ('a -> 'b) -> 'b
    val ( @:= ) : 'a list ref -> 'a list -> unit
    val memo : ('a -> 'b) -> 'a -> 'b
    val memo2 : ('a -> 'b -> 'c) -> 'a -> 'b -> 'c
    val memo3 : ('a -> 'b -> 'c -> 'd) -> 'a -> 'b -> 'c -> 'd
  end
module type OPTIONS =
  sig
    type command_spec
    val build_dir : string ref
    val include_dirs : string list ref
    val exclude_dirs : string list ref
    val nothing_should_be_rebuilt : bool ref
    val ocamlc : command_spec ref
    val plugin_ocamlc : command_spec ref
    val ocamlopt : command_spec ref
    val plugin_ocamlopt : command_spec ref
    val ocamldep : command_spec ref
    val ocamldoc : command_spec ref
    val ocamlyacc : command_spec ref
    val ocamllex : command_spec ref
    val ocamlrun : command_spec ref
    val ocamlmklib : command_spec ref
    val ocamlmktop : command_spec ref
    val hygiene : bool ref
    val sanitize : bool ref
    val sanitization_script : string ref
    val ignore_auto : bool ref
    val plugin : bool ref
    val just_plugin : bool ref
    val native_plugin : bool ref
    val make_links : bool ref
    val nostdlib : bool ref
    val program_to_execute : bool ref
    val must_clean : bool ref
    val catch_errors : bool ref
    val use_menhir : bool ref
    val show_documentation : bool ref
    val recursive : bool ref
    val use_ocamlfind : bool ref
    val plugin_use_ocamlfind : bool ref
    val targets : string list ref
    val ocaml_libs : string list ref
    val ocaml_mods : string list ref
    val ocaml_pkgs : string list ref
    val ocaml_syntax : string option ref
    val ocaml_cflags : string list ref
    val ocaml_lflags : string list ref
    val ocaml_ppflags : string list ref
    val ocaml_docflags : string list ref
    val ocaml_yaccflags : string list ref
    val ocaml_lexflags : string list ref
    val program_args : string list ref
    val ignore_list : string list ref
    val tags : string list ref
    val tag_lines : string list ref
    val show_tags : string list ref
    val ext_obj : string ref
    val ext_lib : string ref
    val ext_dll : string ref
    val exe : string ref
    val add : Arg.key * Arg.spec * Arg.doc -> unit
  end
module type ARCH =
  sig
    type 'a arch = private
        Arch_dir of string * 'a * 'a arch list
      | Arch_dir_pack of string * 'a * 'a arch list
      | Arch_file of string * 'a
    val dir : string -> unit arch list -> unit arch
    val dir_pack : string -> unit arch list -> unit arch
    val file : string -> unit arch
    type info = private {
      current_path : string;
      include_dirs : string list;
      for_pack : string;
    }
    val annotate : 'a arch -> info arch
    val print :
      (Format.formatter -> 'a -> unit) -> Format.formatter -> 'a arch -> unit
    val print_include_dirs : Format.formatter -> string list -> unit
    val print_info : Format.formatter -> info -> unit
    val iter_info : ('a -> unit) -> 'a arch -> unit
    val fold_info : ('a -> 'b -> 'b) -> 'a arch -> 'b -> 'b
    val iter_include_dirs : info arch -> (string -> unit) -> unit
    val mk_tables :
      info arch ->
      (string, string list) Hashtbl.t * (string, string) Hashtbl.t
    val print_table :
      (Format.formatter -> 'a -> unit) ->
      Format.formatter -> (string, 'a) Hashtbl.t -> unit
  end
module type FINDLIB =
  sig
    type command_spec
    type error =
        Cannot_run_ocamlfind
      | Dependency_not_found of string * string
      | Package_not_found of string
      | Cannot_parse_query of string * string
    exception Findlib_error of error
    val string_of_error : error -> string
    val report_error : error -> 'a
    type package = {
      name : string;
      description : string;
      version : string;
      archives_byte : string;
      archives_native : string;
      link_options : string;
      location : string;
      dependencies : package list;
    }
    val query : string -> package
    val list : unit -> string list
    val topological_closure : package list -> package list
    val include_flags : package list -> command_spec
    val compile_flags_byte : package list -> command_spec
    val compile_flags_native : package list -> command_spec
    val link_flags_byte : package list -> command_spec
    val link_flags_native : package list -> command_spec
  end
module type PLUGIN =
  sig
    module Pathname : PATHNAME
    module Tags : TAGS
    module Command :
      sig
        type tags = Tags.t
        type pathname = Pathname.t
        type t =
            Seq of t list
          | Cmd of spec
          | Echo of string list * pathname
          | Nop
        and spec =
            N
          | S of spec list
          | A of string
          | P of pathname
          | Px of pathname
          | Sh of string
          | T of tags
          | V of string
          | Quote of spec
        val atomize : string list -> spec
        val atomize_paths : string list -> spec
        val execute : ?quiet:bool -> ?pretend:bool -> t -> unit
        val execute_many :
          ?quiet:bool -> ?pretend:bool -> t list -> (bool list * exn) option
        val setup_virtual_command_solver : string -> (unit -> spec) -> unit
        val search_in_path : string -> string
        val reduce : spec -> spec
        val print : Format.formatter -> t -> unit
        val to_string : t -> string
        val string_of_command_spec : spec -> string
      end
    module Outcome : OUTCOME
    module String : STRING
    module List : LIST
    module StringSet :
      sig
        type elt = String.t
        type t
        val empty : t
        val add : elt -> t -> t
        val singleton : elt -> t
        val remove : elt -> t -> t
        val union : t -> t -> t
        val inter : t -> t -> t
        val disjoint : t -> t -> bool
        val diff : t -> t -> t
        val cardinal : t -> int
        val elements : t -> elt list
        val min_elt : t -> elt
        val min_elt_opt : t -> elt option
        val max_elt : t -> elt
        val max_elt_opt : t -> elt option
        val choose : t -> elt
        val choose_opt : t -> elt option
        val find : elt -> t -> elt
        val find_opt : elt -> t -> elt option
        val find_first : (elt -> bool) -> t -> elt
        val find_first_opt : (elt -> bool) -> t -> elt option
        val find_last : (elt -> bool) -> t -> elt
        val find_last_opt : (elt -> bool) -> t -> elt option
        val iter : (elt -> unit) -> t -> unit
        val fold : (elt -> 'acc -> 'acc) -> t -> 'acc -> 'acc
        val map : (elt -> elt) -> t -> t
        val filter : (elt -> bool) -> t -> t
        val filter_map : (elt -> elt option) -> t -> t
        val partition : (elt -> bool) -> t -> t * t
        val split : elt -> t -> t * bool * t
        val is_empty : t -> bool
        val mem : elt -> t -> bool
        val equal : t -> t -> bool
        val compare : t -> t -> int
        val subset : t -> t -> bool
        val for_all : (elt -> bool) -> t -> bool
        val exists : (elt -> bool) -> t -> bool
        val to_list : t -> elt list
        val of_list : elt list -> t
        val to_seq_from : elt -> t -> elt Seq.t
        val to_seq : t -> elt Seq.t
        val to_rev_seq : t -> elt Seq.t
        val add_seq : elt Seq.t -> t -> t
        val of_seq : elt Seq.t -> t
      end
    module Options :
      sig
        type command_spec = Command.spec
        val build_dir : string ref
        val include_dirs : string list ref
        val exclude_dirs : string list ref
        val nothing_should_be_rebuilt : bool ref
        val ocamlc : command_spec ref
        val plugin_ocamlc : command_spec ref
        val ocamlopt : command_spec ref
        val plugin_ocamlopt : command_spec ref
        val ocamldep : command_spec ref
        val ocamldoc : command_spec ref
        val ocamlyacc : command_spec ref
        val ocamllex : command_spec ref
        val ocamlrun : command_spec ref
        val ocamlmklib : command_spec ref
        val ocamlmktop : command_spec ref
        val hygiene : bool ref
        val sanitize : bool ref
        val sanitization_script : string ref
        val ignore_auto : bool ref
        val plugin : bool ref
        val just_plugin : bool ref
        val native_plugin : bool ref
        val make_links : bool ref
        val nostdlib : bool ref
        val program_to_execute : bool ref
        val must_clean : bool ref
        val catch_errors : bool ref
        val use_menhir : bool ref
        val show_documentation : bool ref
        val recursive : bool ref
        val use_ocamlfind : bool ref
        val plugin_use_ocamlfind : bool ref
        val targets : string list ref
        val ocaml_libs : string list ref
        val ocaml_mods : string list ref
        val ocaml_pkgs : string list ref
        val ocaml_syntax : string option ref
        val ocaml_cflags : string list ref
        val ocaml_lflags : string list ref
        val ocaml_ppflags : string list ref
        val ocaml_docflags : string list ref
        val ocaml_yaccflags : string list ref
        val ocaml_lexflags : string list ref
        val program_args : string list ref
        val ignore_list : string list ref
        val tags : string list ref
        val tag_lines : string list ref
        val show_tags : string list ref
        val ext_obj : string ref
        val ext_lib : string ref
        val ext_dll : string ref
        val exe : string ref
        val add : Arg.key * Arg.spec * Arg.doc -> unit
      end
    module Arch : ARCH
    module Findlib :
      sig
        type command_spec = Command.spec
        type error =
            Cannot_run_ocamlfind
          | Dependency_not_found of string * string
          | Package_not_found of string
          | Cannot_parse_query of string * string
        exception Findlib_error of error
        val string_of_error : error -> string
        val report_error : error -> 'a
        type package = {
          name : string;
          description : string;
          version : string;
          archives_byte : string;
          archives_native : string;
          link_options : string;
          location : string;
          dependencies : package list;
        }
        val query : string -> package
        val list : unit -> string list
        val topological_closure : package list -> package list
        val include_flags : package list -> command_spec
        val compile_flags_byte : package list -> command_spec
        val compile_flags_native : package list -> command_spec
        val link_flags_byte : package list -> command_spec
        val link_flags_native : package list -> command_spec
      end
    val opt_print :
      (Format.formatter -> 'a -> unit) ->
      Format.formatter -> 'a option -> unit
    val the : 'a option -> 'a
    val getenv : ?default:string -> string -> string
    val with_input_file : ?bin:bool -> string -> (in_channel -> 'a) -> 'a
    val with_output_file : ?bin:bool -> string -> (out_channel -> 'a) -> 'a
    val with_temp_file : string -> string -> (string -> 'a) -> 'a
    val read_file : string -> string
    val copy_chan : in_channel -> out_channel -> unit
    val copy_file : string -> string -> unit
    val print_string_list : Format.formatter -> string list -> unit
    val ( !* ) : 'a Lazy.t -> 'a
    val ( & ) : ('a -> 'b) -> 'a -> 'b
    val ( |> ) : 'a -> ('a -> 'b) -> 'b
    val ( @:= ) : 'a list ref -> 'a list -> unit
    val memo : ('a -> 'b) -> 'a -> 'b
    val memo2 : ('a -> 'b -> 'c) -> 'a -> 'b -> 'c
    val memo3 : ('a -> 'b -> 'c -> 'd) -> 'a -> 'b -> 'c -> 'd
    type command =
      Command.t =
        Seq of command list
      | Cmd of spec
      | Echo of string list * Pathname.t
      | Nop
    and spec =
      Command.spec =
        N
      | S of spec list
      | A of string
      | P of string
      | Px of string
      | Sh of string
      | T of Tags.t
      | V of string
      | Quote of spec
    val ( / ) : Pathname.t -> Pathname.t -> Pathname.t
    val ( -.- ) : Pathname.t -> string -> Pathname.t
    val ( ++ ) : Tags.t -> Tags.elt -> Tags.t
    val ( -- ) : Tags.t -> Tags.elt -> Tags.t
    val ( +++ ) : Tags.t -> Tags.elt option -> Tags.t
    val ( --- ) : Tags.t -> Tags.elt option -> Tags.t
    type env = Pathname.t -> Pathname.t
    type builder = Pathname.t list list -> (Pathname.t, exn) Outcome.t list
    type action = env -> builder -> Command.t
    val rule :
      string ->
      ?tags:string list ->
      ?prods:string list ->
      ?deps:string list ->
      ?prod:string ->
      ?dep:string ->
      ?stamp:string ->
      ?insert:[ `after of string | `before of string | `bottom | `top ] ->
      ?doc:string -> action -> unit
    val copy_rule :
      string ->
      ?insert:[ `after of string | `before of string | `bottom | `top ] ->
      string -> string -> unit
    val clear_rules : unit -> unit
    val dep : Tags.elt list -> Pathname.t list -> unit
    val pdep :
      Tags.elt list -> Tags.elt -> (string -> Pathname.t list) -> unit
    val flag : Tags.elt list -> Command.spec -> unit
    val pflag : Tags.elt list -> Tags.elt -> (string -> Command.spec) -> unit
    val flag_and_dep : Tags.elt list -> Command.spec -> unit
    val pflag_and_dep :
      Tags.elt list -> Tags.elt -> (string -> Command.spec) -> unit
    val mark_tag_used : Tags.elt -> unit
    val non_dependency : Pathname.t -> string -> unit
    val use_lib : Pathname.t -> Pathname.t -> unit
    val ocaml_lib :
      ?extern:bool ->
      ?byte:bool ->
      ?native:bool ->
      ?dir:Pathname.t -> ?tag_name:string -> Pathname.t -> unit
    val expand_module :
      Pathname.t list -> Pathname.t -> string list -> Pathname.t list
    val string_list_of_file : Pathname.t -> string list
    val module_name_of_pathname : Pathname.t -> string
    val mv : Pathname.t -> Pathname.t -> Command.t
    val cp : Pathname.t -> Pathname.t -> Command.t
    val ln_f : Pathname.t -> Pathname.t -> Command.t
    val ln_s : Pathname.t -> Pathname.t -> Command.t
    val rm_f : Pathname.t -> Command.t
    val chmod : Command.spec -> Pathname.t -> Command.t
    val cmp : Pathname.t -> Pathname.t -> Command.t
    val hide_package_contents : string -> unit
    val tag_file : Pathname.t -> Tags.elt list -> unit
    val tag_any : Tags.elt list -> unit
    val tags_of_pathname : Pathname.t -> Tags.t
    val run_and_read : string -> string
    type hook =
        Before_hygiene
      | After_hygiene
      | Before_options
      | After_options
      | Before_rules
      | After_rules
    val dispatch : (hook -> unit) -> unit("DEBUG:rule", [Tag4 (("OrderedTypePrintable", 2258), ((Tag1 ([Tag1 (("t", 2273), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/signatures.mli", 20, 1080, 1082), ("src/signatures.mli", 20, 1080, 1088), 0), 0, 0, 0, Tag1 ("Signatures", 0)), 1, 0); (("compare", 2274), ((Tag1 (0, (Tag3 ((("t", 2273)), 0, (0)), 100000000, 0, -11), (Tag1 (0, (Tag3 ((("t", 2273)), 0, (0)), 100000000, 0, -10), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0), 100000000, 0, -7), 0, (("src/signatures.mli", 21, 1089, 1091), ("src/signatures.mli", 21, 1089, 1118), 0), 0, Tag1 ("Signatures", 1)), 0); (("print", 2275), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -6), (Tag1 (0, (Tag3 ((("t", 2273)), 0, (0)), 100000000, 0, -5), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/signatures.mli", 22, 1119, 1121), ("src/signatures.mli", 22, 1119, 1162), 0), 0, Tag1 ("Signatures", 2)), 0)])), 0, (("src/signatures.mli", 19, 1041, 1041), ("src/signatures.mli", 23, 1163, 1166), 0), Tag1 ("Signatures", 3)), 0); Tag4 (("SET", 2259), ((Tag1 ([Tag1 (("elt", 2276), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("set.mli", 71, 2846, 2850), ("set.mli", 71, 2846, 2858), 0), 0, 0, 0, Tag1 ("Stdlib__Set", 3)), 1, 0); Tag1 (("t", 2277), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("set.mli", 74, 2901, 2905), ("set.mli", 74, 2901, 2911), 0), 0, 0, 0, Tag1 ("Stdlib__Set", 4)), 1, 0); (("empty", 2278), ((Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -249), 0, (("set.mli", 77, 2942, 2946), ("set.mli", 77, 2942, 2958), 0), 0, Tag1 ("Stdlib__Set", 5)), 0); (("add", 2279), ((Tag1 (0, (Tag3 ((("elt", 2276)), 0, (0)), 100000000, 0, -248), (Tag1 (0, (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -247), (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -246), 0), 100000000, 0, -245), 0), 100000000, 0, -244), 0, (("set.mli", 80, 2986, 2990), ("set.mli", 80, 2986, 3012), 0), 0, Tag1 ("Stdlib__Set", 6)), 0); (("singleton", 2280), ((Tag1 (0, (Tag3 ((("elt", 2276)), 0, (0)), 100000000, 0, -243), (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -242), 0), 100000000, 0, -241), 0, (("set.mli", 86, 3278, 3282), ("set.mli", 86, 3278, 3305), 0), 0, Tag1 ("Stdlib__Set", 7)), 0); (("remove", 2281), ((Tag1 (0, (Tag3 ((("elt", 2276)), 0, (0)), 100000000, 0, -240), (Tag1 (0, (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -239), (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -238), 0), 100000000, 0, -237), 0), 100000000, 0, -236), 0, (("set.mli", 89, 3381, 3385), ("set.mli", 89, 3381, 3410), 0), 0, Tag1 ("Stdlib__Set", 8)), 0); (("union", 2282), ((Tag1 (0, (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -235), (Tag1 (0, (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -234), (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -233), 0), 100000000, 0, -232), 0), 100000000, 0, -231), 0, (("set.mli", 95, 3677, 3681), ("set.mli", 95, 3677, 3703), 0), 0, Tag1 ("Stdlib__Set", 9)), 0); (("inter", 2283), ((Tag1 (0, (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -230), (Tag1 (0, (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -229), (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -228), 0), 100000000, 0, -227), 0), 100000000, 0, -226), 0, (("set.mli", 98, 3727, 3731), ("set.mli", 98, 3727, 3753), 0), 0, Tag1 ("Stdlib__Set", 10)), 0); (("disjoint", 2284), ((Tag1 (0, (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -225), (Tag1 (0, (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -224), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -223), 0), 100000000, 0, -222), 0), 100000000, 0, -221), 0, (("set.mli", 101, 3784, 3788), ("set.mli", 101, 3784, 3816), 0), 0, Tag1 ("Stdlib__Set", 11)), 0); (("diff", 2285), ((Tag1 (0, (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -220), (Tag1 (0, (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -219), (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -218), 0), 100000000, 0, -217), 0), 100000000, 0, -216), 0, (("set.mli", 105, 3880, 3884), ("set.mli", 105, 3880, 3905), 0), 0, Tag1 ("Stdlib__Set", 12)), 0); (("cardinal", 2286), ((Tag1 (0, (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -215), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -214), 0), 100000000, 0, -213), 0, (("set.mli", 109, 4007, 4011), ("set.mli", 109, 4007, 4033), 0), 0, Tag1 ("Stdlib__Set", 13)), 0); (("elements", 2287), ((Tag1 (0, (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -212), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 2276)), 0, (0)), 100000000, 0, -211)], (0)), 100000000, 0, -210), 0), 100000000, 0, -209), 0, (("set.mli", 114, 4120, 4124), ("set.mli", 114, 4120, 4151), 0), 0, Tag1 ("Stdlib__Set", 14)), 0); (("min_elt", 2288), ((Tag1 (0, (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -208), (Tag3 ((("elt", 2276)), 0, (0)), 100000000, 0, -207), 0), 100000000, 0, -206), 0, (("set.mli", 120, 4380, 4384), ("set.mli", 120, 4380, 4405), 0), 0, Tag1 ("Stdlib__Set", 15)), 0); (("min_elt_opt", 2289), ((Tag1 (0, (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -205), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2276)), 0, (0)), 100000000, 0, -204)], (0)), 100000000, 0, -203), 0), 100000000, 0, -202), 0, (("set.mli", 125, 4567, 4571), ("set.mli", 125, 4567, 4603), 0), 0, Tag1 ("Stdlib__Set", 16)), 0); (("max_elt", 2290), ((Tag1 (0, (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -201), (Tag3 ((("elt", 2276)), 0, (0)), 100000000, 0, -200), 0), 100000000, 0, -199), 0, (("set.mli", 131, 4774, 4778), ("set.mli", 131, 4774, 4799), 0), 0, Tag1 ("Stdlib__Set", 17)), 0); (("max_elt_opt", 2291), ((Tag1 (0, (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -198), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2276)), 0, (0)), 100000000, 0, -197)], (0)), 100000000, 0, -196), 0), 100000000, 0, -195), 0, (("set.mli", 135, 4890, 4894), ("set.mli", 135, 4890, 4926), 0), 0, Tag1 ("Stdlib__Set", 18)), 0); (("choose", 2292), ((Tag1 (0, (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -194), (Tag3 ((("elt", 2276)), 0, (0)), 100000000, 0, -193), 0), 100000000, 0, -192), 0, (("set.mli", 140, 5041, 5045), ("set.mli", 140, 5041, 5065), 0), 0, Tag1 ("Stdlib__Set", 19)), 0); (("choose_opt", 2293), ((Tag1 (0, (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -191), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2276)), 0, (0)), 100000000, 0, -190)], (0)), 100000000, 0, -189), 0), 100000000, 0, -188), 0, (("set.mli", 145, 5263, 5267), ("set.mli", 145, 5263, 5298), 0), 0, Tag1 ("Stdlib__Set", 20)), 0); (("find", 2294), ((Tag1 (0, (Tag3 ((("elt", 2276)), 0, (0)), 100000000, 0, -187), (Tag1 (0, (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -186), (Tag3 ((("elt", 2276)), 0, (0)), 100000000, 0, -185), 0), 100000000, 0, -184), 0), 100000000, 0, -183), 0, (("set.mli", 153, 5541, 5549), ("set.mli", 153, 5541, 5574), 0), 0, Tag1 ("Stdlib__Set", 21)), 0); (("find_opt", 2295), ((Tag1 (0, (Tag3 ((("elt", 2276)), 0, (0)), 100000000, 0, -182), (Tag1 (0, (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -181), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2276)), 0, (0)), 100000000, 0, -180)], (0)), 100000000, 0, -179), 0), 100000000, 0, -178), 0), 100000000, 0, -177), 0, (("set.mli", 159, 5752, 5756), ("set.mli", 159, 5752, 5792), 0), 0, Tag1 ("Stdlib__Set", 22)), 0); (("find_first", 2296), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2276)), 0, (0)), 100000000, 0, -176), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -175), 0), 100000000, 0, -174), (Tag1 (0, (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -173), (Tag3 ((("elt", 2276)), 0, (0)), 100000000, 0, -172), 0), 100000000, 0, -171), 0), 100000000, 0, -170), 0, (("set.mli", 165, 5963, 5967), ("set.mli", 165, 5963, 6008), 0), 0, Tag1 ("Stdlib__Set", 23)), 0); (("find_first_opt", 2297), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2276)), 0, (0)), 100000000, 0, -169), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -168), 0), 100000000, 0, -167), (Tag1 (0, (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -166), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2276)), 0, (0)), 100000000, 0, -165)], (0)), 100000000, 0, -164), 0), 100000000, 0, -163), 0), 100000000, 0, -162), 0, (("set.mli", 177, 6482, 6486), ("set.mli", 177, 6482, 6538), 0), 0, Tag1 ("Stdlib__Set", 24)), 0); (("find_last", 2298), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2276)), 0, (0)), 100000000, 0, -161), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -160), 0), 100000000, 0, -159), (Tag1 (0, (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -158), (Tag3 ((("elt", 2276)), 0, (0)), 100000000, 0, -157), 0), 100000000, 0, -156), 0), 100000000, 0, -155), 0, (("set.mli", 184, 6779, 6783), ("set.mli", 184, 6779, 6823), 0), 0, Tag1 ("Stdlib__Set", 25)), 0); (("find_last_opt", 2299), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2276)), 0, (0)), 100000000, 0, -154), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -153), 0), 100000000, 0, -152), (Tag1 (0, (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -151), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2276)), 0, (0)), 100000000, 0, -150)], (0)), 100000000, 0, -149), 0), 100000000, 0, -148), 0), 100000000, 0, -147), 0, (("set.mli", 190, 7044, 7048), ("set.mli", 190, 7044, 7099), 0), 0, Tag1 ("Stdlib__Set", 26)), 0); (("iter", 2300), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2276)), 0, (0)), 100000000, 0, -146), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -145), 0), 100000000, 0, -144), (Tag1 (0, (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -143), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -142), 0), 100000000, 0, -141), 0), 100000000, 0, -140), 0, (("set.mli", 198, 7371, 7375), ("set.mli", 198, 7371, 7411), 0), 0, Tag1 ("Stdlib__Set", 27)), 0); (("fold", 2301), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2276)), 0, (0)), 100000000, 0, -139), (Tag1 (0, ((("acc")), 100000000, 0, -135), ((("acc")), 100000000, 0, -135), 0), 100000000, 0, -138), 0), 100000000, 0, -137), (Tag1 (0, (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -136), (Tag1 (0, ((("acc")), 100000000, 0, -135), ((("acc")), 100000000, 0, -135), 0), 100000000, 0, -134), 0), 100000000, 0, -133), 0), 100000000, 0, -132), 0, (("set.mli", 203, 7616, 7620), ("set.mli", 203, 7616, 7672), 0), 0, Tag1 ("Stdlib__Set", 28)), 0); (("filter", 2302), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2276)), 0, (0)), 100000000, 0, -131), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -130), 0), 100000000, 0, -129), (Tag1 (0, (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -128), (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -127), 0), 100000000, 0, -126), 0), 100000000, 0, -125), 0, (("set.mli", 221, 8372, 8376), ("set.mli", 221, 8372, 8411), 0), 0, Tag1 ("Stdlib__Set", 30)), 0); (("filter_map", 2303), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2276)), 0, (0)), 100000000, 0, -124), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2276)), 0, (0)), 100000000, 0, -123)], (0)), 100000000, 0, -122), 0), 100000000, 0, -121), (Tag1 (0, (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -120), (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -119), 0), 100000000, 0, -118), 0), 100000000, 0, -117), 0, (("set.mli", 228, 8710, 8714), ("set.mli", 228, 8710, 8759), 0), 0, Tag1 ("Stdlib__Set", 31)), 0); (("partition", 2304), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2276)), 0, (0)), 100000000, 0, -116), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -115), 0), 100000000, 0, -114), (Tag1 (0, (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -113), (Tag2 ([(Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -111); (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -112)]), 100000000, 0, -110), 0), 100000000, 0, -109), 0), 100000000, 0, -108), 0, (("set.mli", 243, 9275, 9279), ("set.mli", 243, 9275, 9321), 0), 0, Tag1 ("Stdlib__Set", 32)), 0); (("split", 2305), ((Tag1 (0, (Tag3 ((("elt", 2276)), 0, (0)), 100000000, 0, -107), (Tag1 (0, (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -106), (Tag2 ([(Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -103); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -104); (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -105)]), 100000000, 0, -102), 0), 100000000, 0, -101), 0), 100000000, 0, -100), 0, (("set.mli", 249, 9562, 9566), ("set.mli", 249, 9562, 9601), 0), 0, Tag1 ("Stdlib__Set", 33)), 0); (("is_empty", 2306), ((Tag1 (0, (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -99), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -98), 0), 100000000, 0, -97), 0, (("set.mli", 260, 10020, 10024), ("set.mli", 260, 10020, 10047), 0), 0, Tag1 ("Stdlib__Set", 34)), 0); (("mem", 2307), ((Tag1 (0, (Tag3 ((("elt", 2276)), 0, (0)), 100000000, 0, -96), (Tag1 (0, (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -95), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -94), 0), 100000000, 0, -93), 0), 100000000, 0, -92), 0, (("set.mli", 263, 10096, 10100), ("set.mli", 263, 10096, 10125), 0), 0, Tag1 ("Stdlib__Set", 35)), 0); (("equal", 2308), ((Tag1 (0, (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -91), (Tag1 (0, (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -90), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -89), 0), 100000000, 0, -88), 0), 100000000, 0, -87), 0, (("set.mli", 266, 10190, 10194), ("set.mli", 266, 10190, 10219), 0), 0, Tag1 ("Stdlib__Set", 36)), 0); (("compare", 2309), ((Tag1 (0, (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -86), (Tag1 (0, (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -85), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -84), 0), 100000000, 0, -83), 0), 100000000, 0, -82), 0, (("set.mli", 270, 10335, 10339), ("set.mli", 270, 10335, 10365), 0), 0, Tag1 ("Stdlib__Set", 37)), 0); (("subset", 2310), ((Tag1 (0, (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -81), (Tag1 (0, (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -80), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -79), 0), 100000000, 0, -78), 0), 100000000, 0, -77), 0, (("set.mli", 274, 10476, 10480), ("set.mli", 274, 10476, 10506), 0), 0, Tag1 ("Stdlib__Set", 38)), 0); (("for_all", 2311), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2276)), 0, (0)), 100000000, 0, -76), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -75), 0), 100000000, 0, -74), (Tag1 (0, (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -73), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -72), 0), 100000000, 0, -71), 0), 100000000, 0, -70), 0, (("set.mli", 278, 10598, 10602), ("set.mli", 278, 10598, 10641), 0), 0, Tag1 ("Stdlib__Set", 39)), 0); (("exists", 2312), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2276)), 0, (0)), 100000000, 0, -69), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -68), 0), 100000000, 0, -67), (Tag1 (0, (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -66), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -65), 0), 100000000, 0, -64), 0), 100000000, 0, -63), 0, (("set.mli", 282, 10737, 10741), ("set.mli", 282, 10737, 10779), 0), 0, Tag1 ("Stdlib__Set", 40)), 0); (("to_list", 2313), ((Tag1 (0, (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -62), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 2276)), 0, (0)), 100000000, 0, -61)], (0)), 100000000, 0, -60), 0), 100000000, 0, -59), 0, (("set.mli", 288, 10922, 10926), ("set.mli", 288, 10922, 10953), 0), 0, Tag1 ("Stdlib__Set", 41)), 0); (("to_seq_from", 2314), ((Tag1 (0, (Tag3 ((("elt", 2276)), 0, (0)), 100000000, 0, -58), (Tag1 (0, (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -57), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2276)), 0, (0)), 100000000, 0, -56)], (0)), 100000000, 0, -55), 0), 100000000, 0, -54), 0), 100000000, 0, -53), 0, (("set.mli", 298, 11268, 11272), ("set.mli", 298, 11268, 11311), 0), 0, Tag1 ("Stdlib__Set", 43)), 0); (("to_seq", 2315), ((Tag1 (0, (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -52), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2276)), 0, (0)), 100000000, 0, -51)], (0)), 100000000, 0, -50), 0), 100000000, 0, -49), 0, (("set.mli", 303, 11453, 11457), ("set.mli", 303, 11453, 11484), 0), 0, Tag1 ("Stdlib__Set", 44)), 0); (("to_rev_seq", 2316), ((Tag1 (0, (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -48), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2276)), 0, (0)), 100000000, 0, -47)], (0)), 100000000, 0, -46), 0), 100000000, 0, -45), 0, (("set.mli", 307, 11562, 11566), ("set.mli", 307, 11562, 11597), 0), 0, Tag1 ("Stdlib__Set", 45)), 0); (("add_seq", 2317), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2276)), 0, (0)), 100000000, 0, -44)], (0)), 100000000, 0, -43), (Tag1 (0, (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -42), (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -41), 0), 100000000, 0, -40), 0), 100000000, 0, -39), 0, (("set.mli", 311, 11676, 11680), ("set.mli", 311, 11676, 11713), 0), 0, Tag1 ("Stdlib__Set", 46)), 0); (("of_seq", 2318), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2276)), 0, (0)), 100000000, 0, -38)], (0)), 100000000, 0, -37), (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -36), 0), 100000000, 0, -35), 0, (("set.mli", 315, 11791, 11795), ("set.mli", 315, 11791, 11822), 0), 0, Tag1 ("Stdlib__Set", 47)), 0); (("find_elt", 2319), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2276)), 0, (0)), 100000000, 0, -34), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -33), 0), 100000000, 0, -32), (Tag1 (0, (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -31), (Tag3 ((("elt", 2276)), 0, (0)), 100000000, 0, -30), 0), 100000000, 0, -29), 0), 100000000, 0, -28), 0, (("src/signatures.mli", 27, 1206, 1208), ("src/signatures.mli", 27, 1206, 1248), 0), 0, Tag1 ("Signatures", 4)), 0); (("map", 2320), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2276)), 0, (0)), 100000000, 0, -27), (Tag3 ((("elt", 2276)), 0, (0)), 100000000, 0, -26), 0), 100000000, 0, -25), (Tag1 (0, (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -24), (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -23), 0), 100000000, 0, -22), 0), 100000000, 0, -21), 0, (("src/signatures.mli", 28, 1249, 1251), ("src/signatures.mli", 28, 1249, 1283), 0), 0, Tag1 ("Signatures", 5)), 0); (("of_list", 2321), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 2276)), 0, (0)), 100000000, 0, -20)], (0)), 100000000, 0, -19), (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("src/signatures.mli", 29, 1284, 1286), ("src/signatures.mli", 29, 1284, 1313), 0), 0, Tag1 ("Signatures", 6)), 0); (("print", 2322), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -16), (Tag1 (0, (Tag3 ((("t", 2277)), 0, (0)), 100000000, 0, -15), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -14), 0), 100000000, 0, -13), 0), 100000000, 0, -12), 0, (("src/signatures.mli", 30, 1314, 1316), ("src/signatures.mli", 30, 1314, 1357), 0), 0, Tag1 ("Signatures", 7)), 0)])), 0, (("src/signatures.mli", 25, 1168, 1168), ("src/signatures.mli", 31, 1358, 1361), 0), Tag1 ("Signatures", 8)), 0); Tag4 (("LIST", 2260), ((Tag1 ([(("print", 2323), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -782), (Tag1 (0, ((("a")), 100000000, 0, -777), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -781), 0), 100000000, 0, -780), 0), 100000000, 0, -779), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -778), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -777)], (0)), 100000000, 0, -776), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -775), 0), 100000000, 0, -774), 0), 100000000, 0, -773), 0), 100000000, 0, -772), 0, (("src/signatures.mli", 35, 1410, 1412), ("src/signatures.mli", 35, 1410, 1495), 0), 0, Tag1 ("Signatures", 9)), 0); (("filter_opt", 2324), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -769), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -767)], (0)), 100000000, 0, -771), 0), 100000000, 0, -770), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -769)], (0)), 100000000, 0, -768), (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -767)], (0)), 100000000, 0, -766), 0), 100000000, 0, -765), 0), 100000000, 0, -764), 0, (("src/signatures.mli", 36, 1496, 1498), ("src/signatures.mli", 36, 1496, 1554), 0), 0, Tag1 ("Signatures", 10)), 0); (("union", 2325), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -761)], (0)), 100000000, 0, -763), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -761)], (0)), 100000000, 0, -762), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -761)], (0)), 100000000, 0, -760), 0), 100000000, 0, -759), 0), 100000000, 0, -758), 0, (("src/signatures.mli", 37, 1555, 1557), ("src/signatures.mli", 37, 1555, 1598), 0), 0, Tag1 ("Signatures", 11)), 0); (("ordered_unique", 2326), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -756)], (0)), 100000000, 0, -757), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -756)], (0)), 100000000, 0, -755), 0), 100000000, 0, -754), 0, (("src/signatures.mli", 38, 1599, 1601), ("src/signatures.mli", 38, 1599, 1640), 0), 0, Tag1 ("Signatures", 12)), 0); (("index_of", 2327), ((Tag1 (0, ((("a")), 100000000, 0, -753), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -753)], (0)), 100000000, 0, -752), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -751)], (0)), 100000000, 0, -750), 0), 100000000, 0, -749), 0), 100000000, 0, -748), 0, (("src/signatures.mli", 39, 1641, 1643), ("src/signatures.mli", 39, 1641, 1684), 0), 0, Tag1 ("Signatures", 13)), 0); (("split_at", 2328), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -747), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -744)], (0)), 100000000, 0, -746), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -744)], (0)), 100000000, 0, -743); (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -744)], (0)), 100000000, 0, -745)]), 100000000, 0, -742), 0), 100000000, 0, -741), 0), 100000000, 0, -740), 0, (("src/signatures.mli", 41, 1750, 1752), ("src/signatures.mli", 41, 1750, 1801), 0), 0, Tag1 ("Signatures", 14)), 0); Tag1 (("t", 2329), ([((("a")), 100000000, 0, -738)], 1, Tag1 ([(("[]", 270), (0), 0, (("list.mli", 40, 1940, 1962), ("list.mli", 40, 1940, 1964), 0), 0, Tag1 ("Stdlib__List", 1)); (("::", 271), ([((("a")), 100000000, 0, -738); (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -738)], (0)), 100000000, 0, -739)]), 0, (("list.mli", 40, 1940, 1965), ("list.mli", 40, 1940, 1987), 0), 0, Tag1 ("Stdlib__List", 2))], 0), 1, ((Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -738)], (0)), 100000000, 0, -737)), [25], [0], 0, 0, (("list.mli", 40, 1940, 1940), ("list.mli", 40, 1940, 1987), 0), 0, 0, 0, Tag1 ("Stdlib__List", 0)), 1, 0); (("length", 2330), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -736)], (0)), 100000000, 0, -735), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -734), 0), 100000000, 0, -733), 0, (("list.mli", 43, 2033, 2033), ("list.mli", 43, 2033, 2060), 0), 0, Tag1 ("Stdlib__List", 3)), 0); (("compare_lengths", 2331), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -732)], (0)), 100000000, 0, -731), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -730)], (0)), 100000000, 0, -729), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -728), 0), 100000000, 0, -727), 0), 100000000, 0, -726), 0, (("list.mli", 46, 2127, 2127), ("list.mli", 46, 2127, 2174), 0), 0, Tag1 ("Stdlib__List", 4)), 0); (("compare_length_with", 2332), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -725)], (0)), 100000000, 0, -724), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -723), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -722), 0), 100000000, 0, -721), 0), 100000000, 0, -720), 0, (("list.mli", 53, 2394, 2394), ("list.mli", 53, 2394, 2441), 0), 0, Tag1 ("Stdlib__List", 5)), 0); (("is_empty", 2333), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -719)], (0)), 100000000, 0, -718), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -717), 0), 100000000, 0, -716), 0, (("list.mli", 60, 2665, 2665), ("list.mli", 60, 2665, 2695), 0), 0, Tag1 ("Stdlib__List", 6)), 0); (("cons", 2334), ((Tag1 (0, ((("a")), 100000000, 0, -714), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -714)], (0)), 100000000, 0, -715), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -714)], (0)), 100000000, 0, -713), 0), 100000000, 0, -712), 0), 100000000, 0, -711), 0, (("list.mli", 66, 2832, 2832), ("list.mli", 66, 2832, 2867), 0), 0, Tag1 ("Stdlib__List", 7)), 0); (("hd", 2335), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -709)], (0)), 100000000, 0, -710), ((("a")), 100000000, 0, -709), 0), 100000000, 0, -708), 0, (("list.mli", 71, 2939, 2939), ("list.mli", 71, 2939, 2961), 0), 0, Tag1 ("Stdlib__List", 8)), 0); (("tl", 2336), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -706)], (0)), 100000000, 0, -707), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -706)], (0)), 100000000, 0, -705), 0), 100000000, 0, -704), 0, (("list.mli", 76, 3055, 3055), ("list.mli", 76, 3055, 3082), 0), 0, Tag1 ("Stdlib__List", 9)), 0); (("nth", 2337), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -701)], (0)), 100000000, 0, -703), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -702), ((("a")), 100000000, 0, -701), 0), 100000000, 0, -700), 0), 100000000, 0, -699), 0, (("list.mli", 81, 3181, 3181), ("list.mli", 81, 3181, 3211), 0), 0, Tag1 ("Stdlib__List", 10)), 0); (("nth_opt", 2338), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -696)], (0)), 100000000, 0, -698), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -697), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -696)], (0)), 100000000, 0, -695), 0), 100000000, 0, -694), 0), 100000000, 0, -693), 0, (("list.mli", 88, 3415, 3415), ("list.mli", 88, 3415, 3456), 0), 0, Tag1 ("Stdlib__List", 11)), 0); (("rev", 2339), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -691)], (0)), 100000000, 0, -692), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -691)], (0)), 100000000, 0, -690), 0), 100000000, 0, -689), 0, (("list.mli", 96, 3678, 3678), ("list.mli", 96, 3678, 3706), 0), 0, Tag1 ("Stdlib__List", 12)), 0); (("init", 2340), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -688), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -687), ((("a")), 100000000, 0, -685), 0), 100000000, 0, -686), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -685)], (0)), 100000000, 0, -684), 0), 100000000, 0, -683), 0), 100000000, 0, -682), 0, (("list.mli", 99, 3730, 3730), ("list.mli", 99, 3730, 3770), 0), 0, Tag1 ("Stdlib__List", 13)), 0); (("append", 2341), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -679)], (0)), 100000000, 0, -681), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -679)], (0)), 100000000, 0, -680), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -679)], (0)), 100000000, 0, -678), 0), 100000000, 0, -677), 0), 100000000, 0, -676), 0, (("list.mli", 105, 3909, 3909), ("list.mli", 105, 3909, 3951), 0), 0, Tag1 ("Stdlib__List", 14)), 0); (("rev_append", 2342), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -673)], (0)), 100000000, 0, -675), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -673)], (0)), 100000000, 0, -674), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -673)], (0)), 100000000, 0, -672), 0), 100000000, 0, -671), 0), 100000000, 0, -670), 0, (("list.mli", 111, 4093, 4093), ("list.mli", 111, 4093, 4139), 0), 0, Tag1 ("Stdlib__List", 15)), 0); (("concat", 2343), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -667)], (0)), 100000000, 0, -669)], (0)), 100000000, 0, -668), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -667)], (0)), 100000000, 0, -666), 0), 100000000, 0, -665), 0, (("list.mli", 116, 4260, 4260), ("list.mli", 116, 4260, 4296), 0), 0, Tag1 ("Stdlib__List", 16)), 0); (("flatten", 2344), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -662)], (0)), 100000000, 0, -664)], (0)), 100000000, 0, -663), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -662)], (0)), 100000000, 0, -661), 0), 100000000, 0, -660), 0, (("list.mli", 123, 4521, 4521), ("list.mli", 123, 4521, 4558), 0), 0, Tag1 ("Stdlib__List", 17)), 0); (("equal", 2345), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -655), (Tag1 (0, ((("a")), 100000000, 0, -655), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -659), 0), 100000000, 0, -658), 0), 100000000, 0, -657), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -655)], (0)), 100000000, 0, -656), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -655)], (0)), 100000000, 0, -654), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -653), 0), 100000000, 0, -652), 0), 100000000, 0, -651), 0), 100000000, 0, -650), 0, (("list.mli", 131, 4692, 4692), ("list.mli", 131, 4692, 4752), 0), 0, Tag1 ("Stdlib__List", 18)), 0); (("compare", 2346), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -645), (Tag1 (0, ((("a")), 100000000, 0, -645), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -649), 0), 100000000, 0, -648), 0), 100000000, 0, -647), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -645)], (0)), 100000000, 0, -646), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -645)], (0)), 100000000, 0, -644), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -643), 0), 100000000, 0, -642), 0), 100000000, 0, -641), 0), 100000000, 0, -640), 0, (("list.mli", 145, 5153, 5153), ("list.mli", 145, 5153, 5213), 0), 0, Tag1 ("Stdlib__List", 19)), 0); (("iter", 2347), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -637), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -639), 0), 100000000, 0, -638), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -637)], (0)), 100000000, 0, -636), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -635), 0), 100000000, 0, -634), 0), 100000000, 0, -633), 0, (("list.mli", 164, 5762, 5762), ("list.mli", 164, 5762, 5804), 0), 0, Tag1 ("Stdlib__List", 20)), 0); (("iteri", 2348), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -632), (Tag1 (0, ((("a")), 100000000, 0, -628), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -631), 0), 100000000, 0, -630), 0), 100000000, 0, -629), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -628)], (0)), 100000000, 0, -627), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -626), 0), 100000000, 0, -625), 0), 100000000, 0, -624), 0, (("list.mli", 170, 5937, 5937), ("list.mli", 170, 5937, 5987), 0), 0, Tag1 ("Stdlib__List", 21)), 0); (("map", 2349), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -622), ((("b")), 100000000, 0, -620), 0), 100000000, 0, -623), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -622)], (0)), 100000000, 0, -621), (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -620)], (0)), 100000000, 0, -619), 0), 100000000, 0, -618), 0), 100000000, 0, -617), 0, (("list.mli", 177, 6171, 6171), ("list.mli", 177, 6171, 6213), 0), 0, Tag1 ("Stdlib__List", 22)), 0); (("mapi", 2350), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -616), (Tag1 (0, ((("a")), 100000000, 0, -613), ((("b")), 100000000, 0, -611), 0), 100000000, 0, -615), 0), 100000000, 0, -614), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -613)], (0)), 100000000, 0, -612), (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -611)], (0)), 100000000, 0, -610), 0), 100000000, 0, -609), 0), 100000000, 0, -608), 0, (("list.mli", 183, 6364, 6364), ("list.mli", 183, 6364, 6414), 0), 0, Tag1 ("Stdlib__List", 23)), 0); (("rev_map", 2351), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -606), ((("b")), 100000000, 0, -604), 0), 100000000, 0, -607), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -606)], (0)), 100000000, 0, -605), (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -604)], (0)), 100000000, 0, -603), 0), 100000000, 0, -602), 0), 100000000, 0, -601), 0, (("list.mli", 190, 6597, 6597), ("list.mli", 190, 6597, 6643), 0), 0, Tag1 ("Stdlib__List", 24)), 0); (("filter_map", 2352), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -598), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -596)], (0)), 100000000, 0, -600), 0), 100000000, 0, -599), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -598)], (0)), 100000000, 0, -597), (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -596)], (0)), 100000000, 0, -595), 0), 100000000, 0, -594), 0), 100000000, 0, -593), 0, (("list.mli", 195, 6743, 6743), ("list.mli", 195, 6743, 6799), 0), 0, Tag1 ("Stdlib__List", 25)), 0); (("concat_map", 2353), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -590), (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -588)], (0)), 100000000, 0, -592), 0), 100000000, 0, -591), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -590)], (0)), 100000000, 0, -589), (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -588)], (0)), 100000000, 0, -587), 0), 100000000, 0, -586), 0), 100000000, 0, -585), 0, (("list.mli", 202, 6981, 6981), ("list.mli", 202, 6981, 7035), 0), 0, Tag1 ("Stdlib__List", 26)), 0); (("fold_left_map", 2354), ((Tag1 (0, (Tag1 (0, ((("acc")), 100000000, 0, -577), (Tag1 (0, ((("a")), 100000000, 0, -581), (Tag2 ([((("acc")), 100000000, 0, -577); ((("b")), 100000000, 0, -579)]), 100000000, 0, -584), 0), 100000000, 0, -583), 0), 100000000, 0, -582), (Tag1 (0, ((("acc")), 100000000, 0, -577), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -581)], (0)), 100000000, 0, -580), (Tag2 ([((("acc")), 100000000, 0, -577); (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -579)], (0)), 100000000, 0, -578)]), 100000000, 0, -576), 0), 100000000, 0, -575), 0), 100000000, 0, -574), 0), 100000000, 0, -573), 0, (("list.mli", 208, 7150, 7150), ("list.mli", 209, 7170, 7234), 0), 0, Tag1 ("Stdlib__List", 27)), 0); (("fold_left", 2355), ((Tag1 (0, (Tag1 (0, ((("acc")), 100000000, 0, -568), (Tag1 (0, ((("a")), 100000000, 0, -570), ((("acc")), 100000000, 0, -568), 0), 100000000, 0, -572), 0), 100000000, 0, -571), (Tag1 (0, ((("acc")), 100000000, 0, -568), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -570)], (0)), 100000000, 0, -569), ((("acc")), 100000000, 0, -568), 0), 100000000, 0, -567), 0), 100000000, 0, -566), 0), 100000000, 0, -565), 0, (("list.mli", 215, 7372, 7372), ("list.mli", 215, 7372, 7435), 0), 0, Tag1 ("Stdlib__List", 28)), 0); (("fold_right", 2356), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -562), (Tag1 (0, ((("acc")), 100000000, 0, -560), ((("acc")), 100000000, 0, -560), 0), 100000000, 0, -564), 0), 100000000, 0, -563), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -562)], (0)), 100000000, 0, -561), (Tag1 (0, ((("acc")), 100000000, 0, -560), ((("acc")), 100000000, 0, -560), 0), 100000000, 0, -559), 0), 100000000, 0, -558), 0), 100000000, 0, -557), 0, (("list.mli", 220, 7521, 7521), ("list.mli", 220, 7521, 7585), 0), 0, Tag1 ("Stdlib__List", 29)), 0); (("iter2", 2357), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -553), (Tag1 (0, ((("b")), 100000000, 0, -551), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -556), 0), 100000000, 0, -555), 0), 100000000, 0, -554), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -553)], (0)), 100000000, 0, -552), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -551)], (0)), 100000000, 0, -550), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -549), 0), 100000000, 0, -548), 0), 100000000, 0, -547), 0), 100000000, 0, -546), 0, (("list.mli", 229, 7729, 7729), ("list.mli", 229, 7729, 7789), 0), 0, Tag1 ("Stdlib__List", 30)), 0); (("map2", 2358), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -543), (Tag1 (0, ((("b")), 100000000, 0, -541), ((("c")), 100000000, 0, -539), 0), 100000000, 0, -545), 0), 100000000, 0, -544), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -543)], (0)), 100000000, 0, -542), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -541)], (0)), 100000000, 0, -540), (Tag3 ((Tag3 ("list", 9)), [((("c")), 100000000, 0, -539)], (0)), 100000000, 0, -538), 0), 100000000, 0, -537), 0), 100000000, 0, -536), 0), 100000000, 0, -535), 0, (("list.mli", 236, 7968, 7968), ("list.mli", 236, 7968, 8028), 0), 0, Tag1 ("Stdlib__List", 31)), 0); (("rev_map2", 2359), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -532), (Tag1 (0, ((("b")), 100000000, 0, -530), ((("c")), 100000000, 0, -528), 0), 100000000, 0, -534), 0), 100000000, 0, -533), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -532)], (0)), 100000000, 0, -531), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -530)], (0)), 100000000, 0, -529), (Tag3 ((Tag3 ("list", 9)), [((("c")), 100000000, 0, -528)], (0)), 100000000, 0, -527), 0), 100000000, 0, -526), 0), 100000000, 0, -525), 0), 100000000, 0, -524), 0, (("list.mli", 243, 8197, 8197), ("list.mli", 243, 8197, 8261), 0), 0, Tag1 ("Stdlib__List", 32)), 0); (("fold_left2", 2360), ((Tag1 (0, (Tag1 (0, ((("acc")), 100000000, 0, -516), (Tag1 (0, ((("a")), 100000000, 0, -520), (Tag1 (0, ((("b")), 100000000, 0, -518), ((("acc")), 100000000, 0, -516), 0), 100000000, 0, -523), 0), 100000000, 0, -522), 0), 100000000, 0, -521), (Tag1 (0, ((("acc")), 100000000, 0, -516), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -520)], (0)), 100000000, 0, -519), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -518)], (0)), 100000000, 0, -517), ((("acc")), 100000000, 0, -516), 0), 100000000, 0, -515), 0), 100000000, 0, -514), 0), 100000000, 0, -513), 0), 100000000, 0, -512), 0, (("list.mli", 248, 8371, 8371), ("list.mli", 249, 8388, 8454), 0), 0, Tag1 ("Stdlib__List", 33)), 0); (("fold_right2", 2361), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -508), (Tag1 (0, ((("b")), 100000000, 0, -506), (Tag1 (0, ((("acc")), 100000000, 0, -504), ((("acc")), 100000000, 0, -504), 0), 100000000, 0, -511), 0), 100000000, 0, -510), 0), 100000000, 0, -509), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -508)], (0)), 100000000, 0, -507), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -506)], (0)), 100000000, 0, -505), (Tag1 (0, ((("acc")), 100000000, 0, -504), ((("acc")), 100000000, 0, -504), 0), 100000000, 0, -503), 0), 100000000, 0, -502), 0), 100000000, 0, -501), 0), 100000000, 0, -500), 0, (("list.mli", 256, 8653, 8653), ("list.mli", 257, 8671, 8737), 0), 0, Tag1 ("Stdlib__List", 34)), 0); (("for_all", 2362), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -497), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -499), 0), 100000000, 0, -498), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -497)], (0)), 100000000, 0, -496), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -495), 0), 100000000, 0, -494), 0), 100000000, 0, -493), 0, (("list.mli", 268, 8985, 8985), ("list.mli", 268, 8985, 9030), 0), 0, Tag1 ("Stdlib__List", 35)), 0); (("exists", 2363), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -490), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -492), 0), 100000000, 0, -491), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -490)], (0)), 100000000, 0, -489), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -488), 0), 100000000, 0, -487), 0), 100000000, 0, -486), 0, (("list.mli", 275, 9247, 9247), ("list.mli", 275, 9247, 9291), 0), 0, Tag1 ("Stdlib__List", 36)), 0); (("for_all2", 2364), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -482), (Tag1 (0, ((("b")), 100000000, 0, -480), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -485), 0), 100000000, 0, -484), 0), 100000000, 0, -483), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -482)], (0)), 100000000, 0, -481), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -480)], (0)), 100000000, 0, -479), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -478), 0), 100000000, 0, -477), 0), 100000000, 0, -476), 0), 100000000, 0, -475), 0, (("list.mli", 282, 9518, 9518), ("list.mli", 282, 9518, 9581), 0), 0, Tag1 ("Stdlib__List", 37)), 0); (("exists2", 2365), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -471), (Tag1 (0, ((("b")), 100000000, 0, -469), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -474), 0), 100000000, 0, -473), 0), 100000000, 0, -472), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -471)], (0)), 100000000, 0, -470), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -469)], (0)), 100000000, 0, -468), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -467), 0), 100000000, 0, -466), 0), 100000000, 0, -465), 0), 100000000, 0, -464), 0, (("list.mli", 288, 9734, 9734), ("list.mli", 288, 9734, 9796), 0), 0, Tag1 ("Stdlib__List", 38)), 0); (("mem", 2366), ((Tag1 (0, ((("a")), 100000000, 0, -463), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -463)], (0)), 100000000, 0, -462), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -461), 0), 100000000, 0, -460), 0), 100000000, 0, -459), 0, (("list.mli", 294, 9948, 9948), ("list.mli", 294, 9948, 9979), 0), 0, Tag1 ("Stdlib__List", 39)), 0); (("memq", 2367), ((Tag1 (0, ((("a")), 100000000, 0, -458), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -458)], (0)), 100000000, 0, -457), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -456), 0), 100000000, 0, -455), 0), 100000000, 0, -454), 0, (("list.mli", 299, 10064, 10064), ("list.mli", 299, 10064, 10096), 0), 0, Tag1 ("Stdlib__List", 40)), 0); (("find", 2368), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -450), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -453), 0), 100000000, 0, -452), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -450)], (0)), 100000000, 0, -451), ((("a")), 100000000, 0, -450), 0), 100000000, 0, -449), 0), 100000000, 0, -448), 0, (("list.mli", 308, 10238, 10238), ("list.mli", 308, 10238, 10278), 0), 0, Tag1 ("Stdlib__List", 41)), 0); (("find_opt", 2369), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -444), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -447), 0), 100000000, 0, -446), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -444)], (0)), 100000000, 0, -445), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -444)], (0)), 100000000, 0, -443), 0), 100000000, 0, -442), 0), 100000000, 0, -441), 0, (("list.mli", 315, 10458, 10458), ("list.mli", 315, 10458, 10509), 0), 0, Tag1 ("Stdlib__List", 42)), 0); (("find_index", 2370), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -438), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -440), 0), 100000000, 0, -439), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -438)], (0)), 100000000, 0, -437), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -436)], (0)), 100000000, 0, -435), 0), 100000000, 0, -434), 0), 100000000, 0, -433), 0, (("list.mli", 323, 10702, 10702), ("list.mli", 323, 10702, 10756), 0), 0, Tag1 ("Stdlib__List", 43)), 0); (("find_map", 2371), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -430), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -428)], (0)), 100000000, 0, -432), 0), 100000000, 0, -431), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -430)], (0)), 100000000, 0, -429), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -428)], (0)), 100000000, 0, -427), 0), 100000000, 0, -426), 0), 100000000, 0, -425), 0, (("list.mli", 331, 10982, 10982), ("list.mli", 331, 10982, 11038), 0), 0, Tag1 ("Stdlib__List", 44)), 0); (("find_mapi", 2372), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -424), (Tag1 (0, ((("a")), 100000000, 0, -420), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -418)], (0)), 100000000, 0, -423), 0), 100000000, 0, -422), 0), 100000000, 0, -421), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -420)], (0)), 100000000, 0, -419), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -418)], (0)), 100000000, 0, -417), 0), 100000000, 0, -416), 0), 100000000, 0, -415), 0, (("list.mli", 338, 11207, 11207), ("list.mli", 338, 11207, 11271), 0), 0, Tag1 ("Stdlib__List", 45)), 0); (("filter", 2373), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -411), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -414), 0), 100000000, 0, -413), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -411)], (0)), 100000000, 0, -412), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -411)], (0)), 100000000, 0, -410), 0), 100000000, 0, -409), 0), 100000000, 0, -408), 0, (("list.mli", 345, 11458, 11458), ("list.mli", 345, 11458, 11505), 0), 0, Tag1 ("Stdlib__List", 46)), 0); (("find_all", 2374), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -404), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -407), 0), 100000000, 0, -406), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -404)], (0)), 100000000, 0, -405), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -404)], (0)), 100000000, 0, -403), 0), 100000000, 0, -402), 0), 100000000, 0, -401), 0, (("list.mli", 351, 11665, 11665), ("list.mli", 351, 11665, 11714), 0), 0, Tag1 ("Stdlib__List", 47)), 0); (("filteri", 2375), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -400), (Tag1 (0, ((("a")), 100000000, 0, -395), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -399), 0), 100000000, 0, -398), 0), 100000000, 0, -397), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -395)], (0)), 100000000, 0, -396), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -395)], (0)), 100000000, 0, -394), 0), 100000000, 0, -393), 0), 100000000, 0, -392), 0, (("list.mli", 355, 11766, 11766), ("list.mli", 355, 11766, 11821), 0), 0, Tag1 ("Stdlib__List", 48)), 0); (("partition", 2376), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -387), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -391), 0), 100000000, 0, -390), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -387)], (0)), 100000000, 0, -389), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -387)], (0)), 100000000, 0, -386); (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -387)], (0)), 100000000, 0, -388)]), 100000000, 0, -385), 0), 100000000, 0, -384), 0), 100000000, 0, -383), 0, (("list.mli", 362, 12007, 12007), ("list.mli", 362, 12007, 12067), 0), 0, Tag1 ("Stdlib__List", 49)), 0); (("partition_map", 2377), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -380), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Either"), "t"), [((("b")), 100000000, 0, -376); ((("c")), 100000000, 0, -378)], (0)), 100000000, 0, -382), 0), 100000000, 0, -381), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -380)], (0)), 100000000, 0, -379), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -376)], (0)), 100000000, 0, -375); (Tag3 ((Tag3 ("list", 9)), [((("c")), 100000000, 0, -378)], (0)), 100000000, 0, -377)]), 100000000, 0, -374), 0), 100000000, 0, -373), 0), 100000000, 0, -372), 0, (("list.mli", 370, 12354, 12354), ("list.mli", 370, 12354, 12431), 0), 0, Tag1 ("Stdlib__List", 50)), 0); (("assoc", 2378), ((Tag1 (0, ((("a")), 100000000, 0, -371), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("a")), 100000000, 0, -371); ((("b")), 100000000, 0, -368)]), 100000000, 0, -370)], (0)), 100000000, 0, -369), ((("b")), 100000000, 0, -368), 0), 100000000, 0, -367), 0), 100000000, 0, -366), 0, (("list.mli", 389, 12959, 12959), ("list.mli", 389, 12959, 12997), 0), 0, Tag1 ("Stdlib__List", 51)), 0); (("assoc_opt", 2379), ((Tag1 (0, ((("a")), 100000000, 0, -365), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("a")), 100000000, 0, -365); ((("b")), 100000000, 0, -362)]), 100000000, 0, -364)], (0)), 100000000, 0, -363), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -362)], (0)), 100000000, 0, -361), 0), 100000000, 0, -360), 0), 100000000, 0, -359), 0, (("list.mli", 398, 13274, 13274), ("list.mli", 398, 13274, 13323), 0), 0, Tag1 ("Stdlib__List", 52)), 0); (("assq", 2380), ((Tag1 (0, ((("a")), 100000000, 0, -358), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("a")), 100000000, 0, -358); ((("b")), 100000000, 0, -355)]), 100000000, 0, -357)], (0)), 100000000, 0, -356), ((("b")), 100000000, 0, -355), 0), 100000000, 0, -354), 0), 100000000, 0, -353), 0, (("list.mli", 408, 13632, 13632), ("list.mli", 408, 13632, 13669), 0), 0, Tag1 ("Stdlib__List", 53)), 0); (("assq_opt", 2381), ((Tag1 (0, ((("a")), 100000000, 0, -352), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("a")), 100000000, 0, -352); ((("b")), 100000000, 0, -349)]), 100000000, 0, -351)], (0)), 100000000, 0, -350), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -349)], (0)), 100000000, 0, -348), 0), 100000000, 0, -347), 0), 100000000, 0, -346), 0, (("list.mli", 413, 13775, 13775), ("list.mli", 413, 13775, 13823), 0), 0, Tag1 ("Stdlib__List", 54)), 0); (("mem_assoc", 2382), ((Tag1 (0, ((("a")), 100000000, 0, -344), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("a")), 100000000, 0, -344); ((("b")), 100000000, 0, -345)]), 100000000, 0, -343)], (0)), 100000000, 0, -342), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -341), 0), 100000000, 0, -340), 0), 100000000, 0, -339), 0, (("list.mli", 419, 13948, 13948), ("list.mli", 419, 13948, 13992), 0), 0, Tag1 ("Stdlib__List", 55)), 0); (("mem_assq", 2383), ((Tag1 (0, ((("a")), 100000000, 0, -337), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("a")), 100000000, 0, -337); ((("b")), 100000000, 0, -338)]), 100000000, 0, -336)], (0)), 100000000, 0, -335), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -334), 0), 100000000, 0, -333), 0), 100000000, 0, -332), 0, (("list.mli", 424, 14121, 14121), ("list.mli", 424, 14121, 14164), 0), 0, Tag1 ("Stdlib__List", 56)), 0); (("remove_assoc", 2384), ((Tag1 (0, ((("a")), 100000000, 0, -328), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("a")), 100000000, 0, -328); ((("b")), 100000000, 0, -329)]), 100000000, 0, -331)], (0)), 100000000, 0, -330), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("a")), 100000000, 0, -328); ((("b")), 100000000, 0, -329)]), 100000000, 0, -327)], (0)), 100000000, 0, -326), 0), 100000000, 0, -325), 0), 100000000, 0, -324), 0, (("list.mli", 429, 14274, 14274), ("list.mli", 429, 14274, 14331), 0), 0, Tag1 ("Stdlib__List", 57)), 0); (("remove_assq", 2385), ((Tag1 (0, ((("a")), 100000000, 0, -320), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("a")), 100000000, 0, -320); ((("b")), 100000000, 0, -321)]), 100000000, 0, -323)], (0)), 100000000, 0, -322), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("a")), 100000000, 0, -320); ((("b")), 100000000, 0, -321)]), 100000000, 0, -319)], (0)), 100000000, 0, -318), 0), 100000000, 0, -317), 0), 100000000, 0, -316), 0, (("list.mli", 435, 14461, 14461), ("list.mli", 435, 14461, 14517), 0), 0, Tag1 ("Stdlib__List", 58)), 0); (("split", 2386), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("a")), 100000000, 0, -311); ((("b")), 100000000, 0, -313)]), 100000000, 0, -315)], (0)), 100000000, 0, -314), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -311)], (0)), 100000000, 0, -310); (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -313)], (0)), 100000000, 0, -312)]), 100000000, 0, -309), 0), 100000000, 0, -308), 0, (("list.mli", 444, 14679, 14679), ("list.mli", 444, 14679, 14726), 0), 0, Tag1 ("Stdlib__List", 59)), 0); (("combine", 2387), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -304)], (0)), 100000000, 0, -307), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -305)], (0)), 100000000, 0, -306), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("a")), 100000000, 0, -304); ((("b")), 100000000, 0, -305)]), 100000000, 0, -303)], (0)), 100000000, 0, -302), 0), 100000000, 0, -301), 0), 100000000, 0, -300), 0, (("list.mli", 450, 14879, 14879), ("list.mli", 450, 14879, 14929), 0), 0, Tag1 ("Stdlib__List", 60)), 0); (("sort", 2388), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -295), (Tag1 (0, ((("a")), 100000000, 0, -295), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -299), 0), 100000000, 0, -298), 0), 100000000, 0, -297), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -295)], (0)), 100000000, 0, -296), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -295)], (0)), 100000000, 0, -294), 0), 100000000, 0, -293), 0), 100000000, 0, -292), 0, (("list.mli", 462, 15174, 15174), ("list.mli", 462, 15174, 15224), 0), 0, Tag1 ("Stdlib__List", 61)), 0); (("stable_sort", 2389), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -287), (Tag1 (0, ((("a")), 100000000, 0, -287), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -291), 0), 100000000, 0, -290), 0), 100000000, 0, -289), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -287)], (0)), 100000000, 0, -288), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -287)], (0)), 100000000, 0, -286), 0), 100000000, 0, -285), 0), 100000000, 0, -284), 0, (("list.mli", 478, 15893, 15893), ("list.mli", 478, 15893, 15950), 0), 0, Tag1 ("Stdlib__List", 62)), 0); (("fast_sort", 2390), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -279), (Tag1 (0, ((("a")), 100000000, 0, -279), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -283), 0), 100000000, 0, -282), 0), 100000000, 0, -281), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -279)], (0)), 100000000, 0, -280), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -279)], (0)), 100000000, 0, -278), 0), 100000000, 0, -277), 0), 100000000, 0, -276), 0, (("list.mli", 487, 16216, 16216), ("list.mli", 487, 16216, 16271), 0), 0, Tag1 ("Stdlib__List", 63)), 0); (("sort_uniq", 2391), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -271), (Tag1 (0, ((("a")), 100000000, 0, -271), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -275), 0), 100000000, 0, -274), 0), 100000000, 0, -273), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -271)], (0)), 100000000, 0, -272), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -271)], (0)), 100000000, 0, -270), 0), 100000000, 0, -269), 0), 100000000, 0, -268), 0, (("list.mli", 492, 16358, 16358), ("list.mli", 492, 16358, 16413), 0), 0, Tag1 ("Stdlib__List", 64)), 0); (("merge", 2392), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -262), (Tag1 (0, ((("a")), 100000000, 0, -262), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -267), 0), 100000000, 0, -266), 0), 100000000, 0, -265), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -262)], (0)), 100000000, 0, -264), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -262)], (0)), 100000000, 0, -263), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -262)], (0)), 100000000, 0, -261), 0), 100000000, 0, -260), 0), 100000000, 0, -259), 0), 100000000, 0, -258), 0, (("list.mli", 497, 16505, 16505), ("list.mli", 497, 16505, 16567), 0), 0, Tag1 ("Stdlib__List", 65)), 0); (("to_seq", 2393), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -256)], (0)), 100000000, 0, -257), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [((("a")), 100000000, 0, -256)], (0)), 100000000, 0, -255), 0), 100000000, 0, -254), 0, (("list.mli", 509, 16974, 16974), ("list.mli", 509, 16974, 17006), 0), 0, Tag1 ("Stdlib__List", 66)), 0); (("of_seq", 2394), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [((("a")), 100000000, 0, -252)], (0)), 100000000, 0, -253), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -252)], (0)), 100000000, 0, -251), 0), 100000000, 0, -250), 0, (("list.mli", 514, 17053, 17053), ("list.mli", 514, 17053, 17085), 0), 0, Tag1 ("Stdlib__List", 67)), 0)])), 0, (("src/signatures.mli", 33, 1363, 1363), ("src/signatures.mli", 45, 1922, 1925), 0), Tag1 ("Signatures", 15)), 0); Tag4 (("STRING", 2261), ((Tag1 ([(("print", 2395), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -1230), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1229), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1228), 0), 100000000, 0, -1227), 0), 100000000, 0, -1226), 0, (("src/signatures.mli", 48, 1952, 1954), ("src/signatures.mli", 48, 1952, 2000), 0), 0, Tag1 ("Signatures", 16)), 0); (("chomp", 2396), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1225), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1224), 0), 100000000, 0, -1223), 0, (("src/signatures.mli", 49, 2001, 2003), ("src/signatures.mli", 49, 2001, 2031), 0), 0, Tag1 ("Signatures", 17)), 0); (("before", 2397), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1222), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1221), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1220), 0), 100000000, 0, -1219), 0), 100000000, 0, -1218), 0, (("src/signatures.mli", 55, 2237, 2239), ("src/signatures.mli", 55, 2237, 2275), 0), 0, Tag1 ("Signatures", 18)), 0); (("after", 2398), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1217), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1216), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1215), 0), 100000000, 0, -1214), 0), 100000000, 0, -1213), 0, (("src/signatures.mli", 61, 2478, 2480), ("src/signatures.mli", 61, 2478, 2515), 0), 0, Tag1 ("Signatures", 19)), 0); (("first_chars", 2399), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1212), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1211), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1210), 0), 100000000, 0, -1209), 0), 100000000, 0, -1208), 0, (("src/signatures.mli", 63, 2517, 2519), ("src/signatures.mli", 63, 2517, 2560), 0), 0, Tag1 ("Signatures", 20)), 0); (("last_chars", 2400), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1207), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1206), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1205), 0), 100000000, 0, -1204), 0), 100000000, 0, -1203), 0, (("src/signatures.mli", 67, 2698, 2700), ("src/signatures.mli", 67, 2698, 2740), 0), 0, Tag1 ("Signatures", 21)), 0); (("eq_sub_strings", 2401), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1202), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1201), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1200), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1199), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1198), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1197), 0), 100000000, 0, -1196), 0), 100000000, 0, -1195), 0), 100000000, 0, -1194), 0), 100000000, 0, -1193), 0), 100000000, 0, -1192), 0, (("src/signatures.mli", 71, 2862, 2864), ("src/signatures.mli", 71, 2862, 2930), 0), 0, Tag1 ("Signatures", 22)), 0); (("is_prefix", 2402), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1191), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1190), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1189), 0), 100000000, 0, -1188), 0), 100000000, 0, -1187), 0, (("src/signatures.mli", 74, 2978, 2980), ("src/signatures.mli", 74, 2978, 3020), 0), 0, Tag1 ("Signatures", 23)), 0); (("is_suffix", 2403), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1186), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1185), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1184), 0), 100000000, 0, -1183), 0), 100000000, 0, -1182), 0, (("src/signatures.mli", 76, 3069, 3071), ("src/signatures.mli", 76, 3069, 3111), 0), 0, Tag1 ("Signatures", 24)), 0); (("contains_string", 2404), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1181), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1180), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1179), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1178)], (0)), 100000000, 0, -1177), 0), 100000000, 0, -1176), 0), 100000000, 0, -1175), 0), 100000000, 0, -1174), 0, (("src/signatures.mli", 81, 3331, 3333), ("src/signatures.mli", 81, 3331, 3392), 0), 0, Tag1 ("Signatures", 25)), 0); (("subst", 2405), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1173), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1172), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1171), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1170), 0), 100000000, 0, -1169), 0), 100000000, 0, -1168), 0), 100000000, 0, -1167), 0, (("src/signatures.mli", 84, 3426, 3428), ("src/signatures.mli", 84, 3426, 3476), 0), 0, Tag1 ("Signatures", 26)), 0); (("tr", 2406), ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -1166), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -1165), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1164), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1163), 0), 100000000, 0, -1162), 0), 100000000, 0, -1161), 0), 100000000, 0, -1160), 0, (("src/signatures.mli", 87, 3507, 3509), ("src/signatures.mli", 87, 3507, 3550), 0), 0, Tag1 ("Signatures", 27)), 0); (("rev", 2407), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1159), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1158), 0), 100000000, 0, -1157), 0, (("src/signatures.mli", 89, 3552, 3554), ("src/signatures.mli", 89, 3552, 3580), 0), 0, Tag1 ("Signatures", 28)), 0); (("implode", 2408), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -1156)], (0)), 100000000, 0, -1155), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1154), 0), 100000000, 0, -1153), 0, (("src/signatures.mli", 92, 3639, 3641), ("src/signatures.mli", 92, 3639, 3674), 0), 0, Tag1 ("Signatures", 29)), 0); (("explode", 2409), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1152), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -1151)], (0)), 100000000, 0, -1150), 0), 100000000, 0, -1149), 0, (("src/signatures.mli", 95, 3733, 3735), ("src/signatures.mli", 95, 3733, 3768), 0), 0, Tag1 ("Signatures", 30)), 0); Tag1 (("t", 2410), (0, 0, 0, 1, ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1148)), 0, 0, 0, 0, (("string.mli", 75, 3311, 3311), ("string.mli", 75, 3311, 3326), 0), 0, 0, 0, Tag1 ("Stdlib__String", 0)), 1, 0); (("make", 2411), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1147), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -1146), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1145), 0), 100000000, 0, -1144), 0), 100000000, 0, -1143), 0, (("string.mli", 78, 3357, 3357), ("string.mli", 78, 3357, 3389), 0), 0, Tag1 ("Stdlib__String", 1)), 0); (("init", 2412), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1142), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1141), (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -1140), 0), 100000000, 0, -1139), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1138), 0), 100000000, 0, -1137), 0), 100000000, 0, -1136), 0, (("string.mli", 84, 3557, 3557), ("string.mli", 84, 3557, 3598), 0), 0, Tag1 ("Stdlib__String", 2)), 0); (("empty", 2413), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1135), 0, (("string.mli", 91, 3818, 3818), ("string.mli", 91, 3818, 3836), 0), 0, Tag1 ("Stdlib__String", 3)), 0); (("length", 2414), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1134), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1133), 0), 100000000, 0, -1132), (("%string_length", 1, 1, "", [0], 0)), (("string.mli", 97, 3880, 3880), ("string.mli", 97, 3880, 3930), 0), 0, Tag1 ("Stdlib__String", 4)), 0); (("get", 2415), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1131), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1130), (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -1129), 0), 100000000, 0, -1128), 0), 100000000, 0, -1127), (("%string_safe_get", 2, 1, "", [0; 0], 0)), (("string.mli", 100, 4001, 4001), ("string.mli", 100, 4001, 4058), 0), 0, Tag1 ("Stdlib__String", 5)), 0); (("of_bytes", 2416), ((Tag1 (0, (Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -1126), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1125), 0), 100000000, 0, -1124), 0, (("string.mli", 106, 4213, 4213), ("string.mli", 106, 4213, 4243), 0), 0, Tag1 ("Stdlib__String", 6)), 0); (("to_bytes", 2417), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1123), (Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -1122), 0), 100000000, 0, -1121), 0, (("string.mli", 113, 4350, 4350), ("string.mli", 113, 4350, 4380), 0), 0, Tag1 ("Stdlib__String", 7)), 0); (("blit", 2418), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1120), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1119), (Tag1 (0, (Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -1118), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1117), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1116), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1115), 0), 100000000, 0, -1114), 0), 100000000, 0, -1113), 0), 100000000, 0, -1112), 0), 100000000, 0, -1111), 0), 100000000, 0, -1110), 0, (("string.mli", 120, 4487, 4487), ("string.mli", 121, 4498, 4544), 0), 0, Tag1 ("Stdlib__String", 8)), 0); (("concat", 2419), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1109), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1108)], (0)), 100000000, 0, -1107), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1106), 0), 100000000, 0, -1105), 0), 100000000, 0, -1104), 0, (("string.mli", 129, 4723, 4723), ("string.mli", 129, 4723, 4767), 0), 0, Tag1 ("Stdlib__String", 9)), 0); (("cat", 2420), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1103), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1102), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1101), 0), 100000000, 0, -1100), 0), 100000000, 0, -1099), 0, (("string.mli", 136, 4980, 4980), ("string.mli", 136, 4980, 5016), 0), 0, Tag1 ("Stdlib__String", 10)), 0); (("equal", 2421), ((Tag1 (0, (Tag3 ((("t", 2410)), 0, (0)), 100000000, 0, -1098), (Tag1 (0, (Tag3 ((("t", 2410)), 0, (0)), 100000000, 0, -1097), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1096), 0), 100000000, 0, -1095), 0), 100000000, 0, -1094), 0, (("string.mli", 147, 5234, 5234), ("string.mli", 147, 5234, 5260), 0), 0, Tag1 ("Stdlib__String", 11)), 0); (("compare", 2422), ((Tag1 (0, (Tag3 ((("t", 2410)), 0, (0)), 100000000, 0, -1093), (Tag1 (0, (Tag3 ((("t", 2410)), 0, (0)), 100000000, 0, -1092), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1091), 0), 100000000, 0, -1090), 0), 100000000, 0, -1089), 0, (("string.mli", 152, 5391, 5391), ("string.mli", 152, 5391, 5418), 0), 0, Tag1 ("Stdlib__String", 12)), 0); (("starts_with", 2423), ((Tag1 (("prefix"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1088), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1087), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1086), 0), 100000000, 0, -1085), 0), 100000000, 0, -1084), 0, (("string.mli", 156, 5572, 5572), ("string.mli", 157, 5590, 5669), 0), 0, Tag1 ("Stdlib__String", 13)), 0); (("ends_with", 2424), ((Tag1 (("suffix"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1083), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1082), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1081), 0), 100000000, 0, -1080), 0), 100000000, 0, -1079), 0, (("string.mli", 163, 5776, 5776), ("string.mli", 164, 5792, 5871), 0), 0, Tag1 ("Stdlib__String", 14)), 0); (("contains_from", 2425), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1078), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1077), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -1076), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1075), 0), 100000000, 0, -1074), 0), 100000000, 0, -1073), 0), 100000000, 0, -1072), 0, (("string.mli", 169, 5970, 5970), ("string.mli", 169, 5970, 6019), 0), 0, Tag1 ("Stdlib__String", 15)), 0); (("rcontains_from", 2426), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1071), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1070), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -1069), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1068), 0), 100000000, 0, -1067), 0), 100000000, 0, -1066), 0), 100000000, 0, -1065), 0, (("string.mli", 175, 6198, 6198), ("string.mli", 175, 6198, 6248), 0), 0, Tag1 ("Stdlib__String", 16)), 0); (("contains", 2427), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1064), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -1063), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1062), 0), 100000000, 0, -1061), 0), 100000000, 0, -1060), 0, (("string.mli", 182, 6448, 6448), ("string.mli", 182, 6448, 6485), 0), 0, Tag1 ("Stdlib__String", 17)), 0); (("sub", 2428), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1059), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1058), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1057), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1056), 0), 100000000, 0, -1055), 0), 100000000, 0, -1054), 0), 100000000, 0, -1053), 0, (("string.mli", 187, 6587, 6587), ("string.mli", 187, 6587, 6627), 0), 0, Tag1 ("Stdlib__String", 18)), 0); (("split_on_char", 2429), ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -1052), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1051), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1050)], (0)), 100000000, 0, -1049), 0), 100000000, 0, -1048), 0), 100000000, 0, -1047), 0, (("string.mli", 195, 6868, 6868), ("string.mli", 195, 6868, 6917), 0), 0, Tag1 ("Stdlib__String", 19)), 0); (("map", 2430), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -1046), (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -1045), 0), 100000000, 0, -1044), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1043), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1042), 0), 100000000, 0, -1041), 0), 100000000, 0, -1040), 0, (("string.mli", 211, 7459, 7459), ("string.mli", 211, 7459, 7503), 0), 0, Tag1 ("Stdlib__String", 20)), 0); (("mapi", 2431), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1039), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -1038), (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -1037), 0), 100000000, 0, -1036), 0), 100000000, 0, -1035), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1034), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1033), 0), 100000000, 0, -1032), 0), 100000000, 0, -1031), 0, (("string.mli", 217, 7635, 7635), ("string.mli", 217, 7635, 7687), 0), 0, Tag1 ("Stdlib__String", 21)), 0); (("fold_left", 2432), ((Tag1 (0, (Tag1 (0, ((("acc")), 100000000, 0, -1026), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -1030), ((("acc")), 100000000, 0, -1026), 0), 100000000, 0, -1029), 0), 100000000, 0, -1028), (Tag1 (0, ((("acc")), 100000000, 0, -1026), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1027), ((("acc")), 100000000, 0, -1026), 0), 100000000, 0, -1025), 0), 100000000, 0, -1024), 0), 100000000, 0, -1023), 0, (("string.mli", 223, 7797, 7797), ("string.mli", 223, 7797, 7861), 0), 0, Tag1 ("Stdlib__String", 22)), 0); (("fold_right", 2433), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -1022), (Tag1 (0, ((("acc")), 100000000, 0, -1018), ((("acc")), 100000000, 0, -1018), 0), 100000000, 0, -1021), 0), 100000000, 0, -1020), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1019), (Tag1 (0, ((("acc")), 100000000, 0, -1018), ((("acc")), 100000000, 0, -1018), 0), 100000000, 0, -1017), 0), 100000000, 0, -1016), 0), 100000000, 0, -1015), 0, (("string.mli", 228, 8005, 8005), ("string.mli", 228, 8005, 8070), 0), 0, Tag1 ("Stdlib__String", 23)), 0); (("for_all", 2434), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -1014), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1013), 0), 100000000, 0, -1012), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1011), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1010), 0), 100000000, 0, -1009), 0), 100000000, 0, -1008), 0, (("string.mli", 233, 8216, 8216), ("string.mli", 233, 8216, 8262), 0), 0, Tag1 ("Stdlib__String", 24)), 0); (("exists", 2435), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -1007), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1006), 0), 100000000, 0, -1005), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1004), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1003), 0), 100000000, 0, -1002), 0), 100000000, 0, -1001), 0, (("string.mli", 237, 8360, 8360), ("string.mli", 237, 8360, 8405), 0), 0, Tag1 ("Stdlib__String", 25)), 0); (("trim", 2436), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1000), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -999), 0), 100000000, 0, -998), 0, (("string.mli", 242, 8516, 8516), ("string.mli", 242, 8516, 8543), 0), 0, Tag1 ("Stdlib__String", 26)), 0); (("escaped", 2437), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -997), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -996), 0), 100000000, 0, -995), 0, (("string.mli", 248, 8714, 8714), ("string.mli", 248, 8714, 8744), 0), 0, Tag1 ("Stdlib__String", 27)), 0); (("uppercase_ascii", 2438), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -994), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -993), 0), 100000000, 0, -992), 0, (("string.mli", 262, 9275, 9275), ("string.mli", 262, 9275, 9313), 0), 0, Tag1 ("Stdlib__String", 28)), 0); (("lowercase_ascii", 2439), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -991), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -990), 0), 100000000, 0, -989), 0, (("string.mli", 268, 9479, 9479), ("string.mli", 268, 9479, 9517), 0), 0, Tag1 ("Stdlib__String", 29)), 0); (("capitalize_ascii", 2440), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -988), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -987), 0), 100000000, 0, -986), 0, (("string.mli", 274, 9683, 9683), ("string.mli", 274, 9683, 9722), 0), 0, Tag1 ("Stdlib__String", 30)), 0); (("uncapitalize_ascii", 2441), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -985), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -984), 0), 100000000, 0, -983), 0, (("string.mli", 280, 9880, 9880), ("string.mli", 280, 9880, 9921), 0), 0, Tag1 ("Stdlib__String", 31)), 0); (("iter", 2442), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -982), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -981), 0), 100000000, 0, -980), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -979), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -978), 0), 100000000, 0, -977), 0), 100000000, 0, -976), 0, (("string.mli", 288, 10115, 10115), ("string.mli", 288, 10115, 10158), 0), 0, Tag1 ("Stdlib__String", 32)), 0); (("iteri", 2443), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -975), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -974), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -973), 0), 100000000, 0, -972), 0), 100000000, 0, -971), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -970), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -969), 0), 100000000, 0, -968), 0), 100000000, 0, -967), 0, (("string.mli", 292, 10310, 10310), ("string.mli", 292, 10310, 10361), 0), 0, Tag1 ("Stdlib__String", 33)), 0); (("index_from", 2444), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -966), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -965), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -964), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -963), 0), 100000000, 0, -962), 0), 100000000, 0, -961), 0), 100000000, 0, -960), 0, (("string.mli", 300, 10514, 10514), ("string.mli", 300, 10514, 10559), 0), 0, Tag1 ("Stdlib__String", 34)), 0); (("index_from_opt", 2445), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -959), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -958), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -957), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -956)], (0)), 100000000, 0, -955), 0), 100000000, 0, -954), 0), 100000000, 0, -953), 0), 100000000, 0, -952), 0, (("string.mli", 308, 10801, 10801), ("string.mli", 308, 10801, 10857), 0), 0, Tag1 ("Stdlib__String", 35)), 0); (("rindex_from", 2446), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -951), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -950), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -949), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -948), 0), 100000000, 0, -947), 0), 100000000, 0, -946), 0), 100000000, 0, -945), 0, (("string.mli", 315, 11057, 11057), ("string.mli", 315, 11057, 11103), 0), 0, Tag1 ("Stdlib__String", 36)), 0); (("rindex_from_opt", 2447), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -944), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -943), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -942), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -941)], (0)), 100000000, 0, -940), 0), 100000000, 0, -939), 0), 100000000, 0, -938), 0), 100000000, 0, -937), 0, (("string.mli", 322, 11352, 11352), ("string.mli", 322, 11352, 11409), 0), 0, Tag1 ("Stdlib__String", 37)), 0); (("index", 2448), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -936), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -935), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -934), 0), 100000000, 0, -933), 0), 100000000, 0, -932), 0, (("string.mli", 329, 11614, 11614), ("string.mli", 329, 11614, 11647), 0), 0, Tag1 ("Stdlib__String", 38)), 0); (("index_opt", 2449), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -931), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -930), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -929)], (0)), 100000000, 0, -928), 0), 100000000, 0, -927), 0), 100000000, 0, -926), 0, (("string.mli", 332, 11701, 11701), ("string.mli", 332, 11701, 11745), 0), 0, Tag1 ("Stdlib__String", 39)), 0); (("rindex", 2450), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -925), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -924), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -923), 0), 100000000, 0, -922), 0), 100000000, 0, -921), 0, (("string.mli", 337, 11824, 11824), ("string.mli", 337, 11824, 11858), 0), 0, Tag1 ("Stdlib__String", 40)), 0); (("rindex_opt", 2451), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -920), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -919), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -918)], (0)), 100000000, 0, -917), 0), 100000000, 0, -916), 0), 100000000, 0, -915), 0, (("string.mli", 340, 11927, 11927), ("string.mli", 340, 11927, 11972), 0), 0, Tag1 ("Stdlib__String", 41)), 0); (("to_seq", 2452), ((Tag1 (0, (Tag3 ((("t", 2410)), 0, (0)), 100000000, 0, -914), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -913)], (0)), 100000000, 0, -912), 0), 100000000, 0, -911), 0, (("string.mli", 347, 12100, 12100), ("string.mli", 347, 12100, 12128), 0), 0, Tag1 ("Stdlib__String", 42)), 0); (("to_seqi", 2453), ((Tag1 (0, (Tag3 ((("t", 2410)), 0, (0)), 100000000, 0, -910), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -908); (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -909)]), 100000000, 0, -907)], (0)), 100000000, 0, -906), 0), 100000000, 0, -905), 0, (("string.mli", 354, 12347, 12347), ("string.mli", 354, 12347, 12384), 0), 0, Tag1 ("Stdlib__String", 43)), 0); (("of_seq", 2454), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -904)], (0)), 100000000, 0, -903), (Tag3 ((("t", 2410)), 0, (0)), 100000000, 0, -902), 0), 100000000, 0, -901), 0, (("string.mli", 359, 12481, 12481), ("string.mli", 359, 12481, 12509), 0), 0, Tag1 ("Stdlib__String", 44)), 0); (("get_utf_8_uchar", 2455), ((Tag1 (0, (Tag3 ((("t", 2410)), 0, (0)), 100000000, 0, -900), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -899), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Uchar"), "utf_decode"), 0, (0)), 100000000, 0, -898), 0), 100000000, 0, -897), 0), 100000000, 0, -896), 0, (("string.mli", 370, 12679, 12679), ("string.mli", 370, 12679, 12729), 0), 0, Tag1 ("Stdlib__String", 45)), 0); (("is_valid_utf_8", 2456), ((Tag1 (0, (Tag3 ((("t", 2410)), 0, (0)), 100000000, 0, -895), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -894), 0), 100000000, 0, -893), 0, (("string.mli", 374, 12812, 12812), ("string.mli", 374, 12812, 12842), 0), 0, Tag1 ("Stdlib__String", 46)), 0); (("get_utf_16be_uchar", 2457), ((Tag1 (0, (Tag3 ((("t", 2410)), 0, (0)), 100000000, 0, -892), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -891), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Uchar"), "utf_decode"), 0, (0)), 100000000, 0, -890), 0), 100000000, 0, -889), 0), 100000000, 0, -888), 0, (("string.mli", 380, 12960, 12960), ("string.mli", 380, 12960, 13013), 0), 0, Tag1 ("Stdlib__String", 47)), 0); (("is_valid_utf_16be", 2458), ((Tag1 (0, (Tag3 ((("t", 2410)), 0, (0)), 100000000, 0, -887), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -886), 0), 100000000, 0, -885), 0, (("string.mli", 384, 13102, 13102), ("string.mli", 384, 13102, 13135), 0), 0, Tag1 ("Stdlib__String", 48)), 0); (("get_utf_16le_uchar", 2459), ((Tag1 (0, (Tag3 ((("t", 2410)), 0, (0)), 100000000, 0, -884), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -883), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Uchar"), "utf_decode"), 0, (0)), 100000000, 0, -882), 0), 100000000, 0, -881), 0), 100000000, 0, -880), 0, (("string.mli", 390, 13259, 13259), ("string.mli", 390, 13259, 13312), 0), 0, Tag1 ("Stdlib__String", 49)), 0); (("is_valid_utf_16le", 2460), ((Tag1 (0, (Tag3 ((("t", 2410)), 0, (0)), 100000000, 0, -879), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -878), 0), 100000000, 0, -877), 0, (("string.mli", 394, 13401, 13401), ("string.mli", 394, 13401, 13434), 0), 0, Tag1 ("Stdlib__String", 50)), 0); (("get_uint8", 2461), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -876), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -875), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -874), 0), 100000000, 0, -873), 0), 100000000, 0, -872), 0, (("string.mli", 420, 14472, 14472), ("string.mli", 420, 14472, 14508), 0), 0, Tag1 ("Stdlib__String", 51)), 0); (("get_int8", 2462), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -871), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -870), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -869), 0), 100000000, 0, -868), 0), 100000000, 0, -867), 0, (("string.mli", 427, 14619, 14619), ("string.mli", 427, 14619, 14654), 0), 0, Tag1 ("Stdlib__String", 52)), 0); (("get_uint16_ne", 2463), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -866), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -865), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -864), 0), 100000000, 0, -863), 0), 100000000, 0, -862), 0, (("string.mli", 434, 14762, 14762), ("string.mli", 434, 14762, 14802), 0), 0, Tag1 ("Stdlib__String", 53)), 0); (("get_uint16_be", 2464), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -861), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -860), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -859), 0), 100000000, 0, -858), 0), 100000000, 0, -857), 0, (("string.mli", 441, 14932, 14932), ("string.mli", 441, 14932, 14972), 0), 0, Tag1 ("Stdlib__String", 54)), 0); (("get_uint16_le", 2465), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -856), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -855), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -854), 0), 100000000, 0, -853), 0), 100000000, 0, -852), 0, (("string.mli", 448, 15099, 15099), ("string.mli", 448, 15099, 15139), 0), 0, Tag1 ("Stdlib__String", 55)), 0); (("get_int16_ne", 2466), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -851), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -850), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -849), 0), 100000000, 0, -848), 0), 100000000, 0, -847), 0, (("string.mli", 455, 15269, 15269), ("string.mli", 455, 15269, 15308), 0), 0, Tag1 ("Stdlib__String", 56)), 0); (("get_int16_be", 2467), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -846), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -845), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -844), 0), 100000000, 0, -843), 0), 100000000, 0, -842), 0, (("string.mli", 462, 15435, 15435), ("string.mli", 462, 15435, 15474), 0), 0, Tag1 ("Stdlib__String", 57)), 0); (("get_int16_le", 2468), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -841), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -840), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -839), 0), 100000000, 0, -838), 0), 100000000, 0, -837), 0, (("string.mli", 469, 15598, 15598), ("string.mli", 469, 15598, 15637), 0), 0, Tag1 ("Stdlib__String", 58)), 0); (("get_int32_ne", 2469), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -836), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -835), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -834), 0), 100000000, 0, -833), 0), 100000000, 0, -832), 0, (("string.mli", 476, 15764, 15764), ("string.mli", 476, 15764, 15805), 0), 0, Tag1 ("Stdlib__String", 59)), 0); (("hash", 2470), ((Tag1 (0, (Tag3 ((("t", 2410)), 0, (0)), 100000000, 0, -831), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -830), 0), 100000000, 0, -829), 0, (("string.mli", 483, 15925, 15925), ("string.mli", 483, 15925, 15944), 0), 0, Tag1 ("Stdlib__String", 60)), 0); (("seeded_hash", 2471), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -828), (Tag1 (0, (Tag3 ((("t", 2410)), 0, (0)), 100000000, 0, -827), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -826), 0), 100000000, 0, -825), 0), 100000000, 0, -824), 0, (("string.mli", 490, 16153, 16153), ("string.mli", 490, 16153, 16186), 0), 0, Tag1 ("Stdlib__String", 61)), 0); (("get_int32_be", 2472), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -823), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -822), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -821), 0), 100000000, 0, -820), 0), 100000000, 0, -819), 0, (("string.mli", 497, 16405, 16405), ("string.mli", 497, 16405, 16446), 0), 0, Tag1 ("Stdlib__String", 62)), 0); (("get_int32_le", 2473), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -818), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -817), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -816), 0), 100000000, 0, -815), 0), 100000000, 0, -814), 0, (("string.mli", 504, 16563, 16563), ("string.mli", 504, 16563, 16604), 0), 0, Tag1 ("Stdlib__String", 63)), 0); (("get_int64_ne", 2474), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -813), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -812), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -811), 0), 100000000, 0, -810), 0), 100000000, 0, -809), 0, (("string.mli", 511, 16724, 16724), ("string.mli", 511, 16724, 16765), 0), 0, Tag1 ("Stdlib__String", 64)), 0); (("get_int64_be", 2475), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -808), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -807), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -806), 0), 100000000, 0, -805), 0), 100000000, 0, -804), 0, (("string.mli", 518, 16885, 16885), ("string.mli", 518, 16885, 16926), 0), 0, Tag1 ("Stdlib__String", 65)), 0); (("get_int64_le", 2476), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -803), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -802), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -801), 0), 100000000, 0, -800), 0), 100000000, 0, -799), 0, (("string.mli", 525, 17043, 17043), ("string.mli", 525, 17043, 17084), 0), 0, Tag1 ("Stdlib__String", 66)), 0); (("unsafe_get", 2477), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -798), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -797), (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -796), 0), 100000000, 0, -795), 0), 100000000, 0, -794), (("%string_unsafe_get", 2, 1, "", [0; 0], 0)), (("string.mli", 536, 17280, 17280), ("string.mli", 536, 17280, 17346), 0), 0, Tag1 ("Stdlib__String", 67)), 0); (("unsafe_blit", 2478), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -793), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -792), (Tag1 (0, (Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -791), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -790), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -789), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -788), 0), 100000000, 0, -787), 0), 100000000, 0, -786), 0), 100000000, 0, -785), 0), 100000000, 0, -784), 0), 100000000, 0, -783), (("caml_blit_string", 5, 0, "", [0; 0; 0; 0; 0], 0)), (("string.mli", 537, 17347, 17347), ("string.mli", 539, 17412, 17453), 0), [(("noalloc", (("string.mli", 539, 17412, 17445), ("string.mli", 539, 17412, 17452), 0)), (0), (("string.mli", 539, 17412, 17442), ("string.mli", 539, 17412, 17453), 0))], Tag1 ("Stdlib__String", 68)), 0)])), 0, (("src/signatures.mli", 47, 1927, 1927), ("src/signatures.mli", 99, 3874, 3877), 0), Tag1 ("Signatures", 31)), 0); Tag4 (("TAGS", 2262), ((Tag1 ([Tag1 (("elt", 2479), (0, 0, 0, 1, ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1467)), 0, 0, 0, 0, (("src/signatures.mli", 102, 3902, 3923), ("src/signatures.mli", 102, 3902, 3940), 0), 0, 0, 0, Tag1 ("Signatures", 32)), 1, 0); Tag1 (("t", 2480), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("set.mli", 74, 2901, 2905), ("set.mli", 74, 2901, 2911), 0), 0, 0, 0, Tag1 ("Stdlib__Set", 4)), 1, 0); (("empty", 2481), ((Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1466), 0, (("set.mli", 77, 2942, 2946), ("set.mli", 77, 2942, 2958), 0), 0, Tag1 ("Stdlib__Set", 5)), 0); (("add", 2482), ((Tag1 (0, (Tag3 ((("elt", 2479)), 0, (0)), 100000000, 0, -1465), (Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1464), (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1463), 0), 100000000, 0, -1462), 0), 100000000, 0, -1461), 0, (("set.mli", 80, 2986, 2990), ("set.mli", 80, 2986, 3012), 0), 0, Tag1 ("Stdlib__Set", 6)), 0); (("singleton", 2483), ((Tag1 (0, (Tag3 ((("elt", 2479)), 0, (0)), 100000000, 0, -1460), (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1459), 0), 100000000, 0, -1458), 0, (("set.mli", 86, 3278, 3282), ("set.mli", 86, 3278, 3305), 0), 0, Tag1 ("Stdlib__Set", 7)), 0); (("remove", 2484), ((Tag1 (0, (Tag3 ((("elt", 2479)), 0, (0)), 100000000, 0, -1457), (Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1456), (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1455), 0), 100000000, 0, -1454), 0), 100000000, 0, -1453), 0, (("set.mli", 89, 3381, 3385), ("set.mli", 89, 3381, 3410), 0), 0, Tag1 ("Stdlib__Set", 8)), 0); (("union", 2485), ((Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1452), (Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1451), (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1450), 0), 100000000, 0, -1449), 0), 100000000, 0, -1448), 0, (("set.mli", 95, 3677, 3681), ("set.mli", 95, 3677, 3703), 0), 0, Tag1 ("Stdlib__Set", 9)), 0); (("inter", 2486), ((Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1447), (Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1446), (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1445), 0), 100000000, 0, -1444), 0), 100000000, 0, -1443), 0, (("set.mli", 98, 3727, 3731), ("set.mli", 98, 3727, 3753), 0), 0, Tag1 ("Stdlib__Set", 10)), 0); (("disjoint", 2487), ((Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1442), (Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1441), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1440), 0), 100000000, 0, -1439), 0), 100000000, 0, -1438), 0, (("set.mli", 101, 3784, 3788), ("set.mli", 101, 3784, 3816), 0), 0, Tag1 ("Stdlib__Set", 11)), 0); (("diff", 2488), ((Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1437), (Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1436), (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1435), 0), 100000000, 0, -1434), 0), 100000000, 0, -1433), 0, (("set.mli", 105, 3880, 3884), ("set.mli", 105, 3880, 3905), 0), 0, Tag1 ("Stdlib__Set", 12)), 0); (("cardinal", 2489), ((Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1432), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1431), 0), 100000000, 0, -1430), 0, (("set.mli", 109, 4007, 4011), ("set.mli", 109, 4007, 4033), 0), 0, Tag1 ("Stdlib__Set", 13)), 0); (("elements", 2490), ((Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1429), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 2479)), 0, (0)), 100000000, 0, -1428)], (0)), 100000000, 0, -1427), 0), 100000000, 0, -1426), 0, (("set.mli", 114, 4120, 4124), ("set.mli", 114, 4120, 4151), 0), 0, Tag1 ("Stdlib__Set", 14)), 0); (("min_elt", 2491), ((Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1425), (Tag3 ((("elt", 2479)), 0, (0)), 100000000, 0, -1424), 0), 100000000, 0, -1423), 0, (("set.mli", 120, 4380, 4384), ("set.mli", 120, 4380, 4405), 0), 0, Tag1 ("Stdlib__Set", 15)), 0); (("min_elt_opt", 2492), ((Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1422), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2479)), 0, (0)), 100000000, 0, -1421)], (0)), 100000000, 0, -1420), 0), 100000000, 0, -1419), 0, (("set.mli", 125, 4567, 4571), ("set.mli", 125, 4567, 4603), 0), 0, Tag1 ("Stdlib__Set", 16)), 0); (("max_elt", 2493), ((Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1418), (Tag3 ((("elt", 2479)), 0, (0)), 100000000, 0, -1417), 0), 100000000, 0, -1416), 0, (("set.mli", 131, 4774, 4778), ("set.mli", 131, 4774, 4799), 0), 0, Tag1 ("Stdlib__Set", 17)), 0); (("max_elt_opt", 2494), ((Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1415), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2479)), 0, (0)), 100000000, 0, -1414)], (0)), 100000000, 0, -1413), 0), 100000000, 0, -1412), 0, (("set.mli", 135, 4890, 4894), ("set.mli", 135, 4890, 4926), 0), 0, Tag1 ("Stdlib__Set", 18)), 0); (("choose", 2495), ((Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1411), (Tag3 ((("elt", 2479)), 0, (0)), 100000000, 0, -1410), 0), 100000000, 0, -1409), 0, (("set.mli", 140, 5041, 5045), ("set.mli", 140, 5041, 5065), 0), 0, Tag1 ("Stdlib__Set", 19)), 0); (("choose_opt", 2496), ((Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1408), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2479)), 0, (0)), 100000000, 0, -1407)], (0)), 100000000, 0, -1406), 0), 100000000, 0, -1405), 0, (("set.mli", 145, 5263, 5267), ("set.mli", 145, 5263, 5298), 0), 0, Tag1 ("Stdlib__Set", 20)), 0); (("find", 2497), ((Tag1 (0, (Tag3 ((("elt", 2479)), 0, (0)), 100000000, 0, -1404), (Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1403), (Tag3 ((("elt", 2479)), 0, (0)), 100000000, 0, -1402), 0), 100000000, 0, -1401), 0), 100000000, 0, -1400), 0, (("set.mli", 153, 5541, 5549), ("set.mli", 153, 5541, 5574), 0), 0, Tag1 ("Stdlib__Set", 21)), 0); (("find_opt", 2498), ((Tag1 (0, (Tag3 ((("elt", 2479)), 0, (0)), 100000000, 0, -1399), (Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1398), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2479)), 0, (0)), 100000000, 0, -1397)], (0)), 100000000, 0, -1396), 0), 100000000, 0, -1395), 0), 100000000, 0, -1394), 0, (("set.mli", 159, 5752, 5756), ("set.mli", 159, 5752, 5792), 0), 0, Tag1 ("Stdlib__Set", 22)), 0); (("find_first", 2499), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2479)), 0, (0)), 100000000, 0, -1393), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1392), 0), 100000000, 0, -1391), (Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1390), (Tag3 ((("elt", 2479)), 0, (0)), 100000000, 0, -1389), 0), 100000000, 0, -1388), 0), 100000000, 0, -1387), 0, (("set.mli", 165, 5963, 5967), ("set.mli", 165, 5963, 6008), 0), 0, Tag1 ("Stdlib__Set", 23)), 0); (("find_first_opt", 2500), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2479)), 0, (0)), 100000000, 0, -1386), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1385), 0), 100000000, 0, -1384), (Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1383), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2479)), 0, (0)), 100000000, 0, -1382)], (0)), 100000000, 0, -1381), 0), 100000000, 0, -1380), 0), 100000000, 0, -1379), 0, (("set.mli", 177, 6482, 6486), ("set.mli", 177, 6482, 6538), 0), 0, Tag1 ("Stdlib__Set", 24)), 0); (("find_last", 2501), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2479)), 0, (0)), 100000000, 0, -1378), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1377), 0), 100000000, 0, -1376), (Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1375), (Tag3 ((("elt", 2479)), 0, (0)), 100000000, 0, -1374), 0), 100000000, 0, -1373), 0), 100000000, 0, -1372), 0, (("set.mli", 184, 6779, 6783), ("set.mli", 184, 6779, 6823), 0), 0, Tag1 ("Stdlib__Set", 25)), 0); (("find_last_opt", 2502), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2479)), 0, (0)), 100000000, 0, -1371), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1370), 0), 100000000, 0, -1369), (Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1368), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2479)), 0, (0)), 100000000, 0, -1367)], (0)), 100000000, 0, -1366), 0), 100000000, 0, -1365), 0), 100000000, 0, -1364), 0, (("set.mli", 190, 7044, 7048), ("set.mli", 190, 7044, 7099), 0), 0, Tag1 ("Stdlib__Set", 26)), 0); (("iter", 2503), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2479)), 0, (0)), 100000000, 0, -1363), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1362), 0), 100000000, 0, -1361), (Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1360), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1359), 0), 100000000, 0, -1358), 0), 100000000, 0, -1357), 0, (("set.mli", 198, 7371, 7375), ("set.mli", 198, 7371, 7411), 0), 0, Tag1 ("Stdlib__Set", 27)), 0); (("fold", 2504), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2479)), 0, (0)), 100000000, 0, -1356), (Tag1 (0, ((("acc")), 100000000, 0, -1352), ((("acc")), 100000000, 0, -1352), 0), 100000000, 0, -1355), 0), 100000000, 0, -1354), (Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1353), (Tag1 (0, ((("acc")), 100000000, 0, -1352), ((("acc")), 100000000, 0, -1352), 0), 100000000, 0, -1351), 0), 100000000, 0, -1350), 0), 100000000, 0, -1349), 0, (("set.mli", 203, 7616, 7620), ("set.mli", 203, 7616, 7672), 0), 0, Tag1 ("Stdlib__Set", 28)), 0); (("map", 2505), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2479)), 0, (0)), 100000000, 0, -1348), (Tag3 ((("elt", 2479)), 0, (0)), 100000000, 0, -1347), 0), 100000000, 0, -1346), (Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1345), (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1344), 0), 100000000, 0, -1343), 0), 100000000, 0, -1342), 0, (("set.mli", 209, 7860, 7864), ("set.mli", 209, 7860, 7895), 0), 0, Tag1 ("Stdlib__Set", 29)), 0); (("filter", 2506), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2479)), 0, (0)), 100000000, 0, -1341), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1340), 0), 100000000, 0, -1339), (Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1338), (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1337), 0), 100000000, 0, -1336), 0), 100000000, 0, -1335), 0, (("set.mli", 221, 8372, 8376), ("set.mli", 221, 8372, 8411), 0), 0, Tag1 ("Stdlib__Set", 30)), 0); (("filter_map", 2507), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2479)), 0, (0)), 100000000, 0, -1334), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2479)), 0, (0)), 100000000, 0, -1333)], (0)), 100000000, 0, -1332), 0), 100000000, 0, -1331), (Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1330), (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1329), 0), 100000000, 0, -1328), 0), 100000000, 0, -1327), 0, (("set.mli", 228, 8710, 8714), ("set.mli", 228, 8710, 8759), 0), 0, Tag1 ("Stdlib__Set", 31)), 0); (("partition", 2508), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2479)), 0, (0)), 100000000, 0, -1326), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1325), 0), 100000000, 0, -1324), (Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1323), (Tag2 ([(Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1321); (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1322)]), 100000000, 0, -1320), 0), 100000000, 0, -1319), 0), 100000000, 0, -1318), 0, (("set.mli", 243, 9275, 9279), ("set.mli", 243, 9275, 9321), 0), 0, Tag1 ("Stdlib__Set", 32)), 0); (("split", 2509), ((Tag1 (0, (Tag3 ((("elt", 2479)), 0, (0)), 100000000, 0, -1317), (Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1316), (Tag2 ([(Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1313); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1314); (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1315)]), 100000000, 0, -1312), 0), 100000000, 0, -1311), 0), 100000000, 0, -1310), 0, (("set.mli", 249, 9562, 9566), ("set.mli", 249, 9562, 9601), 0), 0, Tag1 ("Stdlib__Set", 33)), 0); (("is_empty", 2510), ((Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1309), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1308), 0), 100000000, 0, -1307), 0, (("set.mli", 260, 10020, 10024), ("set.mli", 260, 10020, 10047), 0), 0, Tag1 ("Stdlib__Set", 34)), 0); (("mem", 2511), ((Tag1 (0, (Tag3 ((("elt", 2479)), 0, (0)), 100000000, 0, -1306), (Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1305), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1304), 0), 100000000, 0, -1303), 0), 100000000, 0, -1302), 0, (("set.mli", 263, 10096, 10100), ("set.mli", 263, 10096, 10125), 0), 0, Tag1 ("Stdlib__Set", 35)), 0); (("equal", 2512), ((Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1301), (Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1300), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1299), 0), 100000000, 0, -1298), 0), 100000000, 0, -1297), 0, (("set.mli", 266, 10190, 10194), ("set.mli", 266, 10190, 10219), 0), 0, Tag1 ("Stdlib__Set", 36)), 0); (("compare", 2513), ((Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1296), (Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1295), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1294), 0), 100000000, 0, -1293), 0), 100000000, 0, -1292), 0, (("set.mli", 270, 10335, 10339), ("set.mli", 270, 10335, 10365), 0), 0, Tag1 ("Stdlib__Set", 37)), 0); (("subset", 2514), ((Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1291), (Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1290), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1289), 0), 100000000, 0, -1288), 0), 100000000, 0, -1287), 0, (("set.mli", 274, 10476, 10480), ("set.mli", 274, 10476, 10506), 0), 0, Tag1 ("Stdlib__Set", 38)), 0); (("for_all", 2515), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2479)), 0, (0)), 100000000, 0, -1286), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1285), 0), 100000000, 0, -1284), (Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1283), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1282), 0), 100000000, 0, -1281), 0), 100000000, 0, -1280), 0, (("set.mli", 278, 10598, 10602), ("set.mli", 278, 10598, 10641), 0), 0, Tag1 ("Stdlib__Set", 39)), 0); (("exists", 2516), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2479)), 0, (0)), 100000000, 0, -1279), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1278), 0), 100000000, 0, -1277), (Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1276), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1275), 0), 100000000, 0, -1274), 0), 100000000, 0, -1273), 0, (("set.mli", 282, 10737, 10741), ("set.mli", 282, 10737, 10779), 0), 0, Tag1 ("Stdlib__Set", 40)), 0); (("to_list", 2517), ((Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1272), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 2479)), 0, (0)), 100000000, 0, -1271)], (0)), 100000000, 0, -1270), 0), 100000000, 0, -1269), 0, (("set.mli", 288, 10922, 10926), ("set.mli", 288, 10922, 10953), 0), 0, Tag1 ("Stdlib__Set", 41)), 0); (("to_seq_from", 2518), ((Tag1 (0, (Tag3 ((("elt", 2479)), 0, (0)), 100000000, 0, -1268), (Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1267), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2479)), 0, (0)), 100000000, 0, -1266)], (0)), 100000000, 0, -1265), 0), 100000000, 0, -1264), 0), 100000000, 0, -1263), 0, (("set.mli", 298, 11268, 11272), ("set.mli", 298, 11268, 11311), 0), 0, Tag1 ("Stdlib__Set", 43)), 0); (("to_seq", 2519), ((Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1262), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2479)), 0, (0)), 100000000, 0, -1261)], (0)), 100000000, 0, -1260), 0), 100000000, 0, -1259), 0, (("set.mli", 303, 11453, 11457), ("set.mli", 303, 11453, 11484), 0), 0, Tag1 ("Stdlib__Set", 44)), 0); (("to_rev_seq", 2520), ((Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1258), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2479)), 0, (0)), 100000000, 0, -1257)], (0)), 100000000, 0, -1256), 0), 100000000, 0, -1255), 0, (("set.mli", 307, 11562, 11566), ("set.mli", 307, 11562, 11597), 0), 0, Tag1 ("Stdlib__Set", 45)), 0); (("add_seq", 2521), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2479)), 0, (0)), 100000000, 0, -1254)], (0)), 100000000, 0, -1253), (Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1252), (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1251), 0), 100000000, 0, -1250), 0), 100000000, 0, -1249), 0, (("set.mli", 311, 11676, 11680), ("set.mli", 311, 11676, 11713), 0), 0, Tag1 ("Stdlib__Set", 46)), 0); (("of_seq", 2522), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2479)), 0, (0)), 100000000, 0, -1248)], (0)), 100000000, 0, -1247), (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1246), 0), 100000000, 0, -1245), 0, (("set.mli", 315, 11791, 11795), ("set.mli", 315, 11791, 11822), 0), 0, Tag1 ("Stdlib__Set", 47)), 0); (("of_list", 2523), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1244)], (0)), 100000000, 0, -1243), (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1242), 0), 100000000, 0, -1241), 0, (("src/signatures.mli", 109, 4288, 4290), ("src/signatures.mli", 109, 4288, 4320), 0), 0, Tag1 ("Signatures", 33)), 0); (("print", 2524), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -1240), (Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1239), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1238), 0), 100000000, 0, -1237), 0), 100000000, 0, -1236), 0, (("src/signatures.mli", 110, 4321, 4323), ("src/signatures.mli", 110, 4321, 4364), 0), 0, Tag1 ("Signatures", 34)), 0); (("does_match", 2525), ((Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1235), (Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1234), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1233), 0), 100000000, 0, -1232), 0), 100000000, 0, -1231), 0, (("src/signatures.mli", 111, 4365, 4367), ("src/signatures.mli", 111, 4365, 4398), 0), 0, Tag1 ("Signatures", 35)), 0); Tag3 (("Operators", 2526), 0, (Tag1 ([(("++", 2527), ((Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1489), (Tag1 (0, (Tag3 ((("elt", 2479)), 0, (0)), 100000000, 0, -1488), (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1487), 0), 100000000, 0, -1486), 0), 100000000, 0, -1485), 0, (("src/signatures.mli", 113, 4424, 4428), ("src/signatures.mli", 113, 4424, 4454), 0), 0, Tag1 ("Signatures", 36)), 0); (("--", 2528), ((Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1484), (Tag1 (0, (Tag3 ((("elt", 2479)), 0, (0)), 100000000, 0, -1483), (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1482), 0), 100000000, 0, -1481), 0), 100000000, 0, -1480), 0, (("src/signatures.mli", 114, 4455, 4459), ("src/signatures.mli", 114, 4455, 4485), 0), 0, Tag1 ("Signatures", 37)), 0); (("+++", 2529), ((Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1479), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2479)), 0, (0)), 100000000, 0, -1478)], (0)), 100000000, 0, -1477), (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1476), 0), 100000000, 0, -1475), 0), 100000000, 0, -1474), 0, (("src/signatures.mli", 115, 4486, 4490), ("src/signatures.mli", 115, 4486, 4524), 0), 0, Tag1 ("Signatures", 38)), 0); (("---", 2530), ((Tag1 (0, (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1473), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2479)), 0, (0)), 100000000, 0, -1472)], (0)), 100000000, 0, -1471), (Tag3 ((("t", 2480)), 0, (0)), 100000000, 0, -1470), 0), 100000000, 0, -1469), 0), 100000000, 0, -1468), 0, (("src/signatures.mli", 116, 4525, 4529), ("src/signatures.mli", 116, 4525, 4563), 0), 0, Tag1 ("Signatures", 39)), 0)]), 0, (("src/signatures.mli", 112, 4399, 4401), ("src/signatures.mli", 117, 4564, 4569), 0), Tag1 ("Signatures", 40)), 0, 0)])), 0, (("src/signatures.mli", 101, 3879, 3879), ("src/signatures.mli", 118, 4570, 4573), 0), Tag1 ("Signatures", 41)), 0); Tag4 (("PATHNAME", 2263), ((Tag1 ([Tag1 (("t", 2531), (0, 0, 0, 1, ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1616)), 0, 0, 0, 0, (("src/signatures.mli", 121, 4602, 4604), ("src/signatures.mli", 121, 4602, 4619), 0), 0, 0, 0, Tag1 ("Signatures", 42)), 1, 0); (("concat", 2532), ((Tag1 (0, (Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1615), (Tag1 (0, (Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1614), (Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1613), 0), 100000000, 0, -1612), 0), 100000000, 0, -1611), 0, (("src/signatures.mli", 122, 4620, 4622), ("src/signatures.mli", 122, 4620, 4646), 0), 0, Tag1 ("Signatures", 43)), 0); (("compare", 2533), ((Tag1 (0, (Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1610), (Tag1 (0, (Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1609), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1608), 0), 100000000, 0, -1607), 0), 100000000, 0, -1606), 0, (("src/signatures.mli", 123, 4647, 4649), ("src/signatures.mli", 123, 4647, 4676), 0), 0, Tag1 ("Signatures", 44)), 0); (("equal", 2534), ((Tag1 (0, (Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1605), (Tag1 (0, (Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1604), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1603), 0), 100000000, 0, -1602), 0), 100000000, 0, -1601), 0, (("src/signatures.mli", 124, 4677, 4679), ("src/signatures.mli", 124, 4677, 4705), 0), 0, Tag1 ("Signatures", 45)), 0); (("exists", 2535), ((Tag1 (0, (Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1600), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1599), 0), 100000000, 0, -1598), 0, (("src/signatures.mli", 125, 4706, 4708), ("src/signatures.mli", 125, 4706, 4730), 0), 0, Tag1 ("Signatures", 46)), 0); (("mk", 2536), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1597), (Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1596), 0), 100000000, 0, -1595), 0, (("src/signatures.mli", 126, 4731, 4733), ("src/signatures.mli", 126, 4731, 4753), 0), 0, Tag1 ("Signatures", 47)), 0); (("define_context", 2537), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1594), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1593)], (0)), 100000000, 0, -1592), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1591), 0), 100000000, 0, -1590), 0), 100000000, 0, -1589), 0, (("src/signatures.mli", 127, 4754, 4756), ("src/signatures.mli", 127, 4754, 4806), 0), 0, Tag1 ("Signatures", 48)), 0); (("include_dirs_of", 2538), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1588), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1587)], (0)), 100000000, 0, -1586), 0), 100000000, 0, -1585), 0, (("src/signatures.mli", 128, 4807, 4809), ("src/signatures.mli", 128, 4807, 4852), 0), 0, Tag1 ("Signatures", 49)), 0); (("copy", 2539), ((Tag1 (0, (Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1584), (Tag1 (0, (Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1583), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1582), 0), 100000000, 0, -1581), 0), 100000000, 0, -1580), 0, (("src/signatures.mli", 129, 4853, 4855), ("src/signatures.mli", 129, 4853, 4880), 0), 0, Tag1 ("Signatures", 50)), 0); (("to_string", 2540), ((Tag1 (0, (Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1579), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1578), 0), 100000000, 0, -1577), 0, (("src/signatures.mli", 130, 4881, 4883), ("src/signatures.mli", 130, 4881, 4910), 0), 0, Tag1 ("Signatures", 51)), 0); (("print", 2541), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -1576), (Tag1 (0, (Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1575), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1574), 0), 100000000, 0, -1573), 0), 100000000, 0, -1572), 0, (("src/signatures.mli", 131, 4911, 4913), ("src/signatures.mli", 131, 4911, 4954), 0), 0, Tag1 ("Signatures", 52)), 0); (("current_dir_name", 2542), ((Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1571), 0, (("src/signatures.mli", 132, 4955, 4957), ("src/signatures.mli", 132, 4955, 4981), 0), 0, Tag1 ("Signatures", 53)), 0); (("parent_dir_name", 2543), ((Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1570), 0, (("src/signatures.mli", 133, 4982, 4984), ("src/signatures.mli", 133, 4982, 5007), 0), 0, Tag1 ("Signatures", 54)), 0); (("read", 2544), ((Tag1 (0, (Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1569), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1568), 0), 100000000, 0, -1567), 0, (("src/signatures.mli", 134, 5008, 5010), ("src/signatures.mli", 134, 5008, 5032), 0), 0, Tag1 ("Signatures", 55)), 0); (("same_contents", 2545), ((Tag1 (0, (Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1566), (Tag1 (0, (Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1565), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1564), 0), 100000000, 0, -1563), 0), 100000000, 0, -1562), 0, (("src/signatures.mli", 135, 5033, 5035), ("src/signatures.mli", 135, 5033, 5069), 0), 0, Tag1 ("Signatures", 56)), 0); (("basename", 2546), ((Tag1 (0, (Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1561), (Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1560), 0), 100000000, 0, -1559), 0, (("src/signatures.mli", 136, 5070, 5072), ("src/signatures.mli", 136, 5070, 5093), 0), 0, Tag1 ("Signatures", 57)), 0); (("dirname", 2547), ((Tag1 (0, (Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1558), (Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1557), 0), 100000000, 0, -1556), 0, (("src/signatures.mli", 137, 5094, 5096), ("src/signatures.mli", 137, 5094, 5116), 0), 0, Tag1 ("Signatures", 58)), 0); (("is_relative", 2548), ((Tag1 (0, (Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1555), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1554), 0), 100000000, 0, -1553), 0, (("src/signatures.mli", 138, 5117, 5119), ("src/signatures.mli", 138, 5117, 5146), 0), 0, Tag1 ("Signatures", 59)), 0); (("readlink", 2549), ((Tag1 (0, (Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1552), (Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1551), 0), 100000000, 0, -1550), 0, (("src/signatures.mli", 139, 5147, 5149), ("src/signatures.mli", 139, 5147, 5170), 0), 0, Tag1 ("Signatures", 60)), 0); (("readdir", 2550), ((Tag1 (0, (Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1549), (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1548)], (0)), 100000000, 0, -1547), 0), 100000000, 0, -1546), 0, (("src/signatures.mli", 140, 5171, 5173), ("src/signatures.mli", 140, 5171, 5199), 0), 0, Tag1 ("Signatures", 61)), 0); (("is_link", 2551), ((Tag1 (0, (Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1545), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1544), 0), 100000000, 0, -1543), 0, (("src/signatures.mli", 141, 5200, 5202), ("src/signatures.mli", 141, 5200, 5225), 0), 0, Tag1 ("Signatures", 62)), 0); (("is_directory", 2552), ((Tag1 (0, (Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1542), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1541), 0), 100000000, 0, -1540), 0, (("src/signatures.mli", 142, 5226, 5228), ("src/signatures.mli", 142, 5226, 5256), 0), 0, Tag1 ("Signatures", 63)), 0); (("add_extension", 2553), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1539), (Tag1 (0, (Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1538), (Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1537), 0), 100000000, 0, -1536), 0), 100000000, 0, -1535), 0, (("src/signatures.mli", 144, 5258, 5260), ("src/signatures.mli", 144, 5258, 5296), 0), 0, Tag1 ("Signatures", 64)), 0); (("check_extension", 2554), ((Tag1 (0, (Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1534), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1533), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1532), 0), 100000000, 0, -1531), 0), 100000000, 0, -1530), 0, (("src/signatures.mli", 145, 5297, 5299), ("src/signatures.mli", 145, 5297, 5340), 0), 0, Tag1 ("Signatures", 65)), 0); (("get_extension", 2555), ((Tag1 (0, (Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1529), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1528), 0), 100000000, 0, -1527), 0, (("src/signatures.mli", 147, 5342, 5344), ("src/signatures.mli", 147, 5342, 5375), 0), 0, Tag1 ("Signatures", 66)), 0); (("remove_extension", 2556), ((Tag1 (0, (Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1526), (Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1525), 0), 100000000, 0, -1524), 0, (("src/signatures.mli", 148, 5376, 5378), ("src/signatures.mli", 148, 5376, 5407), 0), 0, Tag1 ("Signatures", 67)), 0); (("update_extension", 2557), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1523), (Tag1 (0, (Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1522), (Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1521), 0), 100000000, 0, -1520), 0), 100000000, 0, -1519), 0, (("src/signatures.mli", 149, 5408, 5410), ("src/signatures.mli", 149, 5408, 5449), 0), 0, Tag1 ("Signatures", 68)), 0); (("get_extensions", 2558), ((Tag1 (0, (Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1518), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1517), 0), 100000000, 0, -1516), 0, (("src/signatures.mli", 151, 5451, 5453), ("src/signatures.mli", 151, 5451, 5485), 0), 0, Tag1 ("Signatures", 69)), 0); (("remove_extensions", 2559), ((Tag1 (0, (Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1515), (Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1514), 0), 100000000, 0, -1513), 0, (("src/signatures.mli", 152, 5486, 5488), ("src/signatures.mli", 152, 5486, 5518), 0), 0, Tag1 ("Signatures", 70)), 0); (("update_extensions", 2560), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1512), (Tag1 (0, (Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1511), (Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1510), 0), 100000000, 0, -1509), 0), 100000000, 0, -1508), 0, (("src/signatures.mli", 153, 5519, 5521), ("src/signatures.mli", 153, 5519, 5561), 0), 0, Tag1 ("Signatures", 71)), 0); (("print_path_list", 2561), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -1507), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1506)], (0)), 100000000, 0, -1505), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1504), 0), 100000000, 0, -1503), 0), 100000000, 0, -1502), 0, (("src/signatures.mli", 155, 5563, 5565), ("src/signatures.mli", 155, 5563, 5621), 0), 0, Tag1 ("Signatures", 72)), 0); (("pwd", 2562), ((Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1501), 0, (("src/signatures.mli", 156, 5622, 5624), ("src/signatures.mli", 156, 5622, 5635), 0), 0, Tag1 ("Signatures", 73)), 0); (("parent", 2563), ((Tag1 (0, (Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1500), (Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1499), 0), 100000000, 0, -1498), 0, (("src/signatures.mli", 157, 5636, 5638), ("src/signatures.mli", 157, 5636, 5657), 0), 0, Tag1 ("Signatures", 74)), 0); (("is_prefix", 2564), ((Tag1 (0, (Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1497), (Tag1 (0, (Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1496), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1495), 0), 100000000, 0, -1494), 0), 100000000, 0, -1493), 0, (("src/signatures.mli", 159, 5715, 5717), ("src/signatures.mli", 159, 5715, 5747), 0), 0, Tag1 ("Signatures", 75)), 0); (("is_implicit", 2565), ((Tag1 (0, (Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1492), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1491), 0), 100000000, 0, -1490), 0, (("src/signatures.mli", 160, 5748, 5750), ("src/signatures.mli", 160, 5748, 5777), 0), 0, Tag1 ("Signatures", 76)), 0); Tag3 (("Operators", 2566), 0, (Tag1 ([(("/", 2567), ((Tag1 (0, (Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1626), (Tag1 (0, (Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1625), (Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1624), 0), 100000000, 0, -1623), 0), 100000000, 0, -1622), 0, (("src/signatures.mli", 162, 5803, 5807), ("src/signatures.mli", 162, 5803, 5830), 0), 0, Tag1 ("Signatures", 77)), 0); (("-.-", 2568), ((Tag1 (0, (Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1621), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1620), (Tag3 ((("t", 2531)), 0, (0)), 100000000, 0, -1619), 0), 100000000, 0, -1618), 0), 100000000, 0, -1617), 0, (("src/signatures.mli", 163, 5831, 5835), ("src/signatures.mli", 163, 5831, 5865), 0), 0, Tag1 ("Signatures", 78)), 0)]), 0, (("src/signatures.mli", 161, 5778, 5780), ("src/signatures.mli", 164, 5866, 5871), 0), Tag1 ("Signatures", 79)), 0, 0)])), 0, (("src/signatures.mli", 120, 4575, 4575), ("src/signatures.mli", 165, 5872, 5875), 0), Tag1 ("Signatures", 80)), 0); Tag4 (("COMMAND", 2264), ((Tag1 ([Tag1 (("tags", 2569), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/signatures.mli", 170, 6019, 6021), ("src/signatures.mli", 170, 6019, 6030), 0), 0, 0, 0, Tag1 ("Signatures", 81)), 1, 0); Tag1 (("pathname", 2570), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/signatures.mli", 171, 6031, 6033), ("src/signatures.mli", 171, 6031, 6046), 0), 0, 0, 0, Tag1 ("Signatures", 82)), 1, 0); Tag1 (("t", 2571), (0, 0, Tag1 ([(("Seq", 969), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 2571)), 0, (0)), 100000000, 0, -1692)], (0)), 100000000, 0, -1691)]), 0, (("src/signatures.mli", 176, 6206, 6210), ("src/signatures.mli", 176, 6206, 6225), 0), 0, Tag1 ("Signatures", 85)); (("Cmd", 970), ([(Tag3 ((("spec", 2572)), 0, (0)), 100000000, 0, -1693)]), 0, (("src/signatures.mli", 177, 6280, 6284), ("src/signatures.mli", 177, 6280, 6297), 0), 0, Tag1 ("Signatures", 86)); (("Echo", 971), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1695)], (0)), 100000000, 0, -1694); (Tag3 ((("pathname", 2570)), 0, (0)), 100000000, 0, -1696)]), 0, (("src/signatures.mli", 178, 6360, 6364), ("src/signatures.mli", 178, 6360, 6396), 0), 0, Tag1 ("Signatures", 87)); (("Nop", 972), (0), 0, (("src/signatures.mli", 180, 6481, 6485), ("src/signatures.mli", 180, 6481, 6490), 0), 0, Tag1 ("Signatures", 88))], 0), 1, 0, 0, 0, 0, 0, (("src/signatures.mli", 175, 6195, 6197), ("src/signatures.mli", 180, 6481, 6490), 0), 0, 0, 0, Tag1 ("Signatures", 83)), 1, 0); Tag1 (("spec", 2572), (0, 0, Tag1 ([(("N", 973), (0), 0, (("src/signatures.mli", 184, 6625, 6629), ("src/signatures.mli", 184, 6625, 6632), 0), 0, Tag1 ("Signatures", 89)); (("S", 974), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("spec", 2572)), 0, (0)), 100000000, 0, -1683)], (0)), 100000000, 0, -1682)]), 0, (("src/signatures.mli", 185, 6667, 6671), ("src/signatures.mli", 185, 6667, 6687), 0), 0, Tag1 ("Signatures", 90)); (("A", 975), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1684)]), 0, (("src/signatures.mli", 186, 6747, 6751), ("src/signatures.mli", 186, 6747, 6764), 0), 0, Tag1 ("Signatures", 91)); (("P", 976), ([(Tag3 ((("pathname", 2570)), 0, (0)), 100000000, 0, -1685)]), 0, (("src/signatures.mli", 187, 6784, 6788), ("src/signatures.mli", 187, 6784, 6803), 0), 0, Tag1 ("Signatures", 92)); (("Px", 977), ([(Tag3 ((("pathname", 2570)), 0, (0)), 100000000, 0, -1686)]), 0, (("src/signatures.mli", 188, 6824, 6828), ("src/signatures.mli", 188, 6824, 6844), 0), 0, Tag1 ("Signatures", 93)); (("Sh", 978), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1687)]), 0, (("src/signatures.mli", 190, 6943, 6947), ("src/signatures.mli", 190, 6943, 6961), 0), 0, Tag1 ("Signatures", 94)); (("T", 979), ([(Tag3 ((("tags", 2569)), 0, (0)), 100000000, 0, -1688)]), 0, (("src/signatures.mli", 191, 7022, 7026), ("src/signatures.mli", 191, 7022, 7037), 0), 0, Tag1 ("Signatures", 95)); (("V", 980), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1689)]), 0, (("src/signatures.mli", 196, 7319, 7323), ("src/signatures.mli", 196, 7319, 7336), 0), 0, Tag1 ("Signatures", 96)); (("Quote", 981), ([(Tag3 ((("spec", 2572)), 0, (0)), 100000000, 0, -1690)]), 0, (("src/signatures.mli", 198, 7451, 7455), ("src/signatures.mli", 198, 7451, 7470), 0), 0, Tag1 ("Signatures", 97))], 0), 1, 0, 0, 0, 0, 0, (("src/signatures.mli", 183, 6612, 6614), ("src/signatures.mli", 198, 7451, 7470), 0), 0, 0, 0, Tag1 ("Signatures", 84)), 2, 0); (("atomize", 2573), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1681)], (0)), 100000000, 0, -1680), (Tag3 ((("spec", 2572)), 0, (0)), 100000000, 0, -1679), 0), 100000000, 0, -1678), 0, (("src/signatures.mli", 217, 7996, 7998), ("src/signatures.mli", 217, 7996, 8031), 0), 0, Tag1 ("Signatures", 98)), 0); (("atomize_paths", 2574), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1677)], (0)), 100000000, 0, -1676), (Tag3 ((("spec", 2572)), 0, (0)), 100000000, 0, -1675), 0), 100000000, 0, -1674), 0, (("src/signatures.mli", 220, 8116, 8118), ("src/signatures.mli", 220, 8116, 8157), 0), 0, Tag1 ("Signatures", 99)), 0); (("execute", 2575), ((Tag1 (Tag1 ("quiet"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1673)], (0)), 100000000, 0, -1672), (Tag1 (Tag1 ("pretend"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1671)], (0)), 100000000, 0, -1670), (Tag1 (0, (Tag3 ((("t", 2571)), 0, (0)), 100000000, 0, -1669), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1668), 0), 100000000, 0, -1667), 0), 100000000, 0, -1666), 0), 100000000, 0, -1665), 0, (("src/signatures.mli", 223, 8185, 8187), ("src/signatures.mli", 223, 8185, 8242), 0), 0, Tag1 ("Signatures", 100)), 0); (("execute_many", 2576), ((Tag1 (Tag1 ("quiet"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1664)], (0)), 100000000, 0, -1663), (Tag1 (Tag1 ("pretend"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1662)], (0)), 100000000, 0, -1661), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 2571)), 0, (0)), 100000000, 0, -1660)], (0)), 100000000, 0, -1659), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1657)], (0)), 100000000, 0, -1656); (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -1658)]), 100000000, 0, -1655)], (0)), 100000000, 0, -1654), 0), 100000000, 0, -1653), 0), 100000000, 0, -1652), 0), 100000000, 0, -1651), 0, (("src/signatures.mli", 227, 8358, 8360), ("src/signatures.mli", 227, 8358, 8445), 0), 0, Tag1 ("Signatures", 101)), 0); (("setup_virtual_command_solver", 2577), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1650), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1649), (Tag3 ((("spec", 2572)), 0, (0)), 100000000, 0, -1648), 0), 100000000, 0, -1647), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1646), 0), 100000000, 0, -1645), 0), 100000000, 0, -1644), 0, (("src/signatures.mli", 232, 8625, 8627), ("src/signatures.mli", 232, 8625, 8694), 0), 0, Tag1 ("Signatures", 102)), 0); (("search_in_path", 2578), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1643), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1642), 0), 100000000, 0, -1641), 0, (("src/signatures.mli", 236, 8790, 8792), ("src/signatures.mli", 236, 8790, 8829), 0), 0, Tag1 ("Signatures", 103)), 0); (("reduce", 2579), ((Tag1 (0, (Tag3 ((("spec", 2572)), 0, (0)), 100000000, 0, -1640), (Tag3 ((("spec", 2572)), 0, (0)), 100000000, 0, -1639), 0), 100000000, 0, -1638), 0, (("src/signatures.mli", 240, 8943, 8945), ("src/signatures.mli", 240, 8943, 8970), 0), 0, Tag1 ("Signatures", 104)), 0); (("print", 2580), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -1637), (Tag1 (0, (Tag3 ((("t", 2571)), 0, (0)), 100000000, 0, -1636), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1635), 0), 100000000, 0, -1634), 0), 100000000, 0, -1633), 0, (("src/signatures.mli", 243, 9050, 9052), ("src/signatures.mli", 243, 9050, 9093), 0), 0, Tag1 ("Signatures", 105)), 0); (("to_string", 2581), ((Tag1 (0, (Tag3 ((("t", 2571)), 0, (0)), 100000000, 0, -1632), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1631), 0), 100000000, 0, -1630), 0, (("src/signatures.mli", 246, 9158, 9160), ("src/signatures.mli", 246, 9158, 9187), 0), 0, Tag1 ("Signatures", 106)), 0); (("string_of_command_spec", 2582), ((Tag1 (0, (Tag3 ((("spec", 2572)), 0, (0)), 100000000, 0, -1629), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1628), 0), 100000000, 0, -1627), 0, (("src/signatures.mli", 250, 9287, 9289), ("src/signatures.mli", 250, 9287, 9332), 0), 0, Tag1 ("Signatures", 107)), 0)])), 0, (("src/signatures.mli", 169, 5993, 5993), ("src/signatures.mli", 251, 9333, 9336), 0), Tag1 ("Signatures", 108)), 0); Tag4 (("GLOB", 2265), ((Tag1 ([Tag1 (("globber", 2583), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/signatures.mli", 292, 11895, 11897), ("src/signatures.mli", 292, 11895, 11909), 0), 0, 0, 0, Tag1 ("Signatures", 109)), 1, 0); (("parse", 2584), ((Tag1 (Tag1 ("dir"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1708)], (0)), 100000000, 0, -1707), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1706), (Tag3 ((("globber", 2583)), 0, (0)), 100000000, 0, -1705), 0), 100000000, 0, -1704), 0), 100000000, 0, -1703), 0, (("src/signatures.mli", 295, 12029, 12031), ("src/signatures.mli", 295, 12029, 12075), 0), 0, Tag1 ("Signatures", 110)), 0); Tag2 (("Parse_error", 2585), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1702)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Signatures", 111)), 2, 0); (("eval", 2586), ((Tag1 (0, (Tag3 ((("globber", 2583)), 0, (0)), 100000000, 0, -1701), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1700), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1699), 0), 100000000, 0, -1698), 0), 100000000, 0, -1697), 0, (("src/signatures.mli", 304, 12607, 12609), ("src/signatures.mli", 304, 12607, 12645), 0), 0, Tag1 ("Signatures", 112)), 0)])), 0, (("src/signatures.mli", 255, 9499, 9499), ("src/signatures.mli", 305, 12646, 12649), 0), Tag1 ("Signatures", 113)), 0); Tag4 (("LOG", 2266), ((Tag1 ([(("level", 2587), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1732)], (0)), 100000000, 0, -1731), 0, (("src/signatures.mli", 310, 12789, 12791), ("src/signatures.mli", 310, 12789, 12810), 0), 0, Tag1 ("Signatures", 114)), 0); (("dprintf", 2588), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1730), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format"), [((("a")), 100000000, 0, -1726); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -1728); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1729)], (0)), 100000000, 0, -1727), ((("a")), 100000000, 0, -1726), 0), 100000000, 0, -1725), 0), 100000000, 0, -1724), 0, (("src/signatures.mli", 318, 13197, 13199), ("src/signatures.mli", 318, 13197, 13261), 0), 0, Tag1 ("Signatures", 115)), 0); (("is_logging", 2589), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1723), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1722), 0), 100000000, 0, -1721), 0, (("src/signatures.mli", 321, 13330, 13332), ("src/signatures.mli", 321, 13330, 13360), 0), 0, Tag1 ("Signatures", 116)), 0); (("eprintf", 2590), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format"), [((("a")), 100000000, 0, -1717); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -1719); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1720)], (0)), 100000000, 0, -1718), ((("a")), 100000000, 0, -1717), 0), 100000000, 0, -1716), 0, (("src/signatures.mli", 324, 13423, 13425), ("src/signatures.mli", 324, 13423, 13480), 0), 0, Tag1 ("Signatures", 117)), 0); (("raw_dprintf", 2591), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1715), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format"), [((("a")), 100000000, 0, -1711); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -1713); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1714)], (0)), 100000000, 0, -1712), ((("a")), 100000000, 0, -1711), 0), 100000000, 0, -1710), 0), 100000000, 0, -1709), 0, (("src/signatures.mli", 327, 13540, 13542), ("src/signatures.mli", 327, 13540, 13608), 0), 0, Tag1 ("Signatures", 118)), 0)])), 0, (("src/signatures.mli", 308, 12723, 12723), ("src/signatures.mli", 328, 13609, 13612), 0), Tag1 ("Signatures", 119)), 0); Tag4 (("OUTCOME", 2267), ((Tag1 ([Tag1 (("t", 2592), ([((("a")), 100000000, 0, -1749); ((("b")), 100000000, 0, -1750)], 2, Tag1 ([(("Good", 1005), ([((("a")), 100000000, 0, -1749)]), 0, (("src/signatures.mli", 332, 13659, 13663), ("src/signatures.mli", 332, 13659, 13675), 0), 0, Tag1 ("Signatures", 121)); (("Bad", 1006), ([((("b")), 100000000, 0, -1750)]), 0, (("src/signatures.mli", 333, 13676, 13680), ("src/signatures.mli", 333, 13676, 13691), 0), 0, Tag1 ("Signatures", 122))], 0), 1, 0, [25; 25], [0; 0], 0, 0, (("src/signatures.mli", 331, 13640, 13642), ("src/signatures.mli", 333, 13676, 13691), 0), 0, 0, 0, Tag1 ("Signatures", 120)), 1, 0); (("wrap", 2593), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -1747), ((("b")), 100000000, 0, -1745), 0), 100000000, 0, -1748), (Tag1 (0, ((("a")), 100000000, 0, -1747), (Tag3 ((("t", 2592)), [((("b")), 100000000, 0, -1745); (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -1746)], (0)), 100000000, 0, -1744), 0), 100000000, 0, -1743), 0), 100000000, 0, -1742), 0, (("src/signatures.mli", 335, 13693, 13695), ("src/signatures.mli", 335, 13693, 13737), 0), 0, Tag1 ("Signatures", 123)), 0); (("ignore_good", 2594), ((Tag1 (0, (Tag3 ((("t", 2592)), [((("a")), 100000000, 0, -1740); (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -1741)], (0)), 100000000, 0, -1739), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1738), 0), 100000000, 0, -1737), 0, (("src/signatures.mli", 336, 13738, 13740), ("src/signatures.mli", 336, 13738, 13777), 0), 0, Tag1 ("Signatures", 124)), 0); (("good", 2595), ((Tag1 (0, (Tag3 ((("t", 2592)), [((("a")), 100000000, 0, -1734); (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -1736)], (0)), 100000000, 0, -1735), ((("a")), 100000000, 0, -1734), 0), 100000000, 0, -1733), 0, (("src/signatures.mli", 337, 13778, 13780), ("src/signatures.mli", 337, 13778, 13808), 0), 0, Tag1 ("Signatures", 125)), 0)])), 0, (("src/signatures.mli", 330, 13614, 13614), ("src/signatures.mli", 338, 13809, 13812), 0), Tag1 ("Signatures", 126)), 0); Tag4 (("MISC", 2268), ((Tag1 ([(("opt_print", 2596), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -1859), (Tag1 (0, ((("a")), 100000000, 0, -1854), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1858), 0), 100000000, 0, -1857), 0), 100000000, 0, -1856), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -1855), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1854)], (0)), 100000000, 0, -1853), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1852), 0), 100000000, 0, -1851), 0), 100000000, 0, -1850), 0), 100000000, 0, -1849), 0, (("src/signatures.mli", 341, 13837, 13839), ("src/signatures.mli", 342, 13855, 13932), 0), 0, Tag1 ("Signatures", 127)), 0); (("the", 2597), ((Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -1847)], (0)), 100000000, 0, -1848), ((("a")), 100000000, 0, -1847), 0), 100000000, 0, -1846), 0, (("src/signatures.mli", 343, 13933, 13935), ("src/signatures.mli", 343, 13933, 13960), 0), 0, Tag1 ("Signatures", 128)), 0); (("getenv", 2598), ((Tag1 (Tag1 ("default"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1845)], (0)), 100000000, 0, -1844), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1843), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1842), 0), 100000000, 0, -1841), 0), 100000000, 0, -1840), 0, (("src/signatures.mli", 344, 13961, 13963), ("src/signatures.mli", 344, 13961, 14011), 0), 0, Tag1 ("Signatures", 129)), 0); (("with_input_file", 2599), ((Tag1 (Tag1 ("bin"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1839)], (0)), 100000000, 0, -1838), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1837), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "in_channel"), 0, (0)), 100000000, 0, -1836), ((("a")), 100000000, 0, -1834), 0), 100000000, 0, -1835), ((("a")), 100000000, 0, -1834), 0), 100000000, 0, -1833), 0), 100000000, 0, -1832), 0), 100000000, 0, -1831), 0, (("src/signatures.mli", 345, 14012, 14014), ("src/signatures.mli", 345, 14012, 14083), 0), 0, Tag1 ("Signatures", 130)), 0); (("with_output_file", 2600), ((Tag1 (Tag1 ("bin"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1830)], (0)), 100000000, 0, -1829), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1828), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -1827), ((("a")), 100000000, 0, -1825), 0), 100000000, 0, -1826), ((("a")), 100000000, 0, -1825), 0), 100000000, 0, -1824), 0), 100000000, 0, -1823), 0), 100000000, 0, -1822), 0, (("src/signatures.mli", 346, 14084, 14086), ("src/signatures.mli", 346, 14084, 14157), 0), 0, Tag1 ("Signatures", 131)), 0); (("with_temp_file", 2601), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1821), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1820), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1819), ((("a")), 100000000, 0, -1817), 0), 100000000, 0, -1818), ((("a")), 100000000, 0, -1817), 0), 100000000, 0, -1816), 0), 100000000, 0, -1815), 0), 100000000, 0, -1814), 0, (("src/signatures.mli", 347, 14158, 14160), ("src/signatures.mli", 347, 14158, 14221), 0), 0, Tag1 ("Signatures", 132)), 0); (("read_file", 2602), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1813), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1812), 0), 100000000, 0, -1811), 0, (("src/signatures.mli", 348, 14222, 14224), ("src/signatures.mli", 348, 14222, 14256), 0), 0, Tag1 ("Signatures", 133)), 0); (("copy_chan", 2603), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "in_channel"), 0, (0)), 100000000, 0, -1810), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -1809), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1808), 0), 100000000, 0, -1807), 0), 100000000, 0, -1806), 0, (("src/signatures.mli", 349, 14257, 14259), ("src/signatures.mli", 349, 14257, 14308), 0), 0, Tag1 ("Signatures", 134)), 0); (("copy_file", 2604), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1805), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1804), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1803), 0), 100000000, 0, -1802), 0), 100000000, 0, -1801), 0, (("src/signatures.mli", 350, 14309, 14311), ("src/signatures.mli", 350, 14309, 14351), 0), 0, Tag1 ("Signatures", 135)), 0); (("print_string_list", 2605), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -1800), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1799)], (0)), 100000000, 0, -1798), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1797), 0), 100000000, 0, -1796), 0), 100000000, 0, -1795), 0, (("src/signatures.mli", 351, 14352, 14354), ("src/signatures.mli", 351, 14352, 14417), 0), 0, Tag1 ("Signatures", 136)), 0); (("!*", 2606), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lazy"), "t"), [((("a")), 100000000, 0, -1793)], (0)), 100000000, 0, -1794), ((("a")), 100000000, 0, -1793), 0), 100000000, 0, -1792), 0, (("src/signatures.mli", 354, 14479, 14481), ("src/signatures.mli", 354, 14479, 14509), 0), 0, Tag1 ("Signatures", 137)), 0); (("&", 2607), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -1790), ((("b")), 100000000, 0, -1789), 0), 100000000, 0, -1791), (Tag1 (0, ((("a")), 100000000, 0, -1790), ((("b")), 100000000, 0, -1789), 0), 100000000, 0, -1788), 0), 100000000, 0, -1787), 0, (("src/signatures.mli", 360, 14705, 14707), ("src/signatures.mli", 360, 14705, 14741), 0), 0, Tag1 ("Signatures", 138)), 0); (("|>", 2608), ((Tag1 (0, ((("a")), 100000000, 0, -1786), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -1786), ((("b")), 100000000, 0, -1784), 0), 100000000, 0, -1785), ((("b")), 100000000, 0, -1784), 0), 100000000, 0, -1783), 0), 100000000, 0, -1782), 0, (("src/signatures.mli", 365, 14903, 14905), ("src/signatures.mli", 365, 14903, 14940), 0), 0, Tag1 ("Signatures", 139)), 0); (("@:=", 2609), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -1779)], (0)), 100000000, 0, -1781)], (0)), 100000000, 0, -1780), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -1779)], (0)), 100000000, 0, -1778), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1777), 0), 100000000, 0, -1776), 0), 100000000, 0, -1775), 0, (("src/signatures.mli", 368, 14992, 14994), ("src/signatures.mli", 368, 14992, 15038), 0), 0, Tag1 ("Signatures", 140)), 0); (("memo", 2610), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -1773), ((("b")), 100000000, 0, -1772), 0), 100000000, 0, -1774), (Tag1 (0, ((("a")), 100000000, 0, -1773), ((("b")), 100000000, 0, -1772), 0), 100000000, 0, -1771), 0), 100000000, 0, -1770), 0, (("src/signatures.mli", 370, 15040, 15042), ("src/signatures.mli", 370, 15040, 15077), 0), 0, Tag1 ("Signatures", 141)), 0); (("memo2", 2611), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -1767), (Tag1 (0, ((("b")), 100000000, 0, -1766), ((("c")), 100000000, 0, -1765), 0), 100000000, 0, -1769), 0), 100000000, 0, -1768), (Tag1 (0, ((("a")), 100000000, 0, -1767), (Tag1 (0, ((("b")), 100000000, 0, -1766), ((("c")), 100000000, 0, -1765), 0), 100000000, 0, -1764), 0), 100000000, 0, -1763), 0), 100000000, 0, -1762), 0, (("src/signatures.mli", 372, 15079, 15081), ("src/signatures.mli", 372, 15079, 15129), 0), 0, Tag1 ("Signatures", 142)), 0); (("memo3", 2612), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -1758), (Tag1 (0, ((("b")), 100000000, 0, -1757), (Tag1 (0, ((("c")), 100000000, 0, -1756), ((("d")), 100000000, 0, -1755), 0), 100000000, 0, -1761), 0), 100000000, 0, -1760), 0), 100000000, 0, -1759), (Tag1 (0, ((("a")), 100000000, 0, -1758), (Tag1 (0, ((("b")), 100000000, 0, -1757), (Tag1 (0, ((("c")), 100000000, 0, -1756), ((("d")), 100000000, 0, -1755), 0), 100000000, 0, -1754), 0), 100000000, 0, -1753), 0), 100000000, 0, -1752), 0), 100000000, 0, -1751), 0, (("src/signatures.mli", 374, 15131, 15133), ("src/signatures.mli", 374, 15131, 15193), 0), 0, Tag1 ("Signatures", 143)), 0)])), 0, (("src/signatures.mli", 340, 13814, 13814), ("src/signatures.mli", 375, 15194, 15197), 0), Tag1 ("Signatures", 144)), 0); Tag4 (("OPTIONS", 2269), ((Tag1 ([Tag1 (("command_spec", 2613), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/signatures.mli", 378, 15225, 15227), ("src/signatures.mli", 378, 15225, 15244), 0), 0, 0, 0, Tag1 ("Signatures", 145)), 1, 0); (("build_dir", 2614), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1987)], (0)), 100000000, 0, -1986), 0, (("src/signatures.mli", 380, 15246, 15248), ("src/signatures.mli", 380, 15246, 15274), 0), 0, Tag1 ("Signatures", 146)), 0); (("include_dirs", 2615), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1985)], (0)), 100000000, 0, -1984)], (0)), 100000000, 0, -1983), 0, (("src/signatures.mli", 381, 15275, 15277), ("src/signatures.mli", 381, 15275, 15311), 0), 0, Tag1 ("Signatures", 147)), 0); (("exclude_dirs", 2616), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1982)], (0)), 100000000, 0, -1981)], (0)), 100000000, 0, -1980), 0, (("src/signatures.mli", 382, 15312, 15314), ("src/signatures.mli", 382, 15312, 15348), 0), 0, Tag1 ("Signatures", 148)), 0); (("nothing_should_be_rebuilt", 2617), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1979)], (0)), 100000000, 0, -1978), 0, (("src/signatures.mli", 383, 15349, 15351), ("src/signatures.mli", 383, 15349, 15391), 0), 0, Tag1 ("Signatures", 149)), 0); (("ocamlc", 2618), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 2613)), 0, (0)), 100000000, 0, -1977)], (0)), 100000000, 0, -1976), 0, (("src/signatures.mli", 384, 15392, 15394), ("src/signatures.mli", 384, 15392, 15423), 0), 0, Tag1 ("Signatures", 150)), 0); (("plugin_ocamlc", 2619), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 2613)), 0, (0)), 100000000, 0, -1975)], (0)), 100000000, 0, -1974), 0, (("src/signatures.mli", 385, 15424, 15426), ("src/signatures.mli", 385, 15424, 15462), 0), 0, Tag1 ("Signatures", 151)), 0); (("ocamlopt", 2620), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 2613)), 0, (0)), 100000000, 0, -1973)], (0)), 100000000, 0, -1972), 0, (("src/signatures.mli", 386, 15463, 15465), ("src/signatures.mli", 386, 15463, 15496), 0), 0, Tag1 ("Signatures", 152)), 0); (("plugin_ocamlopt", 2621), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 2613)), 0, (0)), 100000000, 0, -1971)], (0)), 100000000, 0, -1970), 0, (("src/signatures.mli", 387, 15497, 15499), ("src/signatures.mli", 387, 15497, 15537), 0), 0, Tag1 ("Signatures", 153)), 0); (("ocamldep", 2622), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 2613)), 0, (0)), 100000000, 0, -1969)], (0)), 100000000, 0, -1968), 0, (("src/signatures.mli", 388, 15538, 15540), ("src/signatures.mli", 388, 15538, 15571), 0), 0, Tag1 ("Signatures", 154)), 0); (("ocamldoc", 2623), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 2613)), 0, (0)), 100000000, 0, -1967)], (0)), 100000000, 0, -1966), 0, (("src/signatures.mli", 389, 15572, 15574), ("src/signatures.mli", 389, 15572, 15605), 0), 0, Tag1 ("Signatures", 155)), 0); (("ocamlyacc", 2624), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 2613)), 0, (0)), 100000000, 0, -1965)], (0)), 100000000, 0, -1964), 0, (("src/signatures.mli", 390, 15606, 15608), ("src/signatures.mli", 390, 15606, 15640), 0), 0, Tag1 ("Signatures", 156)), 0); (("ocamllex", 2625), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 2613)), 0, (0)), 100000000, 0, -1963)], (0)), 100000000, 0, -1962), 0, (("src/signatures.mli", 391, 15641, 15643), ("src/signatures.mli", 391, 15641, 15674), 0), 0, Tag1 ("Signatures", 157)), 0); (("ocamlrun", 2626), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 2613)), 0, (0)), 100000000, 0, -1961)], (0)), 100000000, 0, -1960), 0, (("src/signatures.mli", 392, 15675, 15677), ("src/signatures.mli", 392, 15675, 15708), 0), 0, Tag1 ("Signatures", 158)), 0); (("ocamlmklib", 2627), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 2613)), 0, (0)), 100000000, 0, -1959)], (0)), 100000000, 0, -1958), 0, (("src/signatures.mli", 393, 15709, 15711), ("src/signatures.mli", 393, 15709, 15744), 0), 0, Tag1 ("Signatures", 159)), 0); (("ocamlmktop", 2628), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 2613)), 0, (0)), 100000000, 0, -1957)], (0)), 100000000, 0, -1956), 0, (("src/signatures.mli", 394, 15745, 15747), ("src/signatures.mli", 394, 15745, 15780), 0), 0, Tag1 ("Signatures", 160)), 0); (("hygiene", 2629), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1955)], (0)), 100000000, 0, -1954), 0, (("src/signatures.mli", 395, 15781, 15783), ("src/signatures.mli", 395, 15781, 15805), 0), 0, Tag1 ("Signatures", 161)), 0); (("sanitize", 2630), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1953)], (0)), 100000000, 0, -1952), 0, (("src/signatures.mli", 396, 15806, 15808), ("src/signatures.mli", 396, 15806, 15831), 0), 0, Tag1 ("Signatures", 162)), 0); (("sanitization_script", 2631), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1951)], (0)), 100000000, 0, -1950), 0, (("src/signatures.mli", 397, 15832, 15834), ("src/signatures.mli", 397, 15832, 15870), 0), 0, Tag1 ("Signatures", 163)), 0); (("ignore_auto", 2632), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1949)], (0)), 100000000, 0, -1948), 0, (("src/signatures.mli", 398, 15871, 15873), ("src/signatures.mli", 398, 15871, 15899), 0), 0, Tag1 ("Signatures", 164)), 0); (("plugin", 2633), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1947)], (0)), 100000000, 0, -1946), 0, (("src/signatures.mli", 399, 15900, 15902), ("src/signatures.mli", 399, 15900, 15923), 0), 0, Tag1 ("Signatures", 165)), 0); (("just_plugin", 2634), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1945)], (0)), 100000000, 0, -1944), 0, (("src/signatures.mli", 400, 15924, 15926), ("src/signatures.mli", 400, 15924, 15952), 0), 0, Tag1 ("Signatures", 166)), 0); (("native_plugin", 2635), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1943)], (0)), 100000000, 0, -1942), 0, (("src/signatures.mli", 401, 15953, 15955), ("src/signatures.mli", 401, 15953, 15983), 0), 0, Tag1 ("Signatures", 167)), 0); (("make_links", 2636), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1941)], (0)), 100000000, 0, -1940), 0, (("src/signatures.mli", 402, 15984, 15986), ("src/signatures.mli", 402, 15984, 16011), 0), 0, Tag1 ("Signatures", 168)), 0); (("nostdlib", 2637), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1939)], (0)), 100000000, 0, -1938), 0, (("src/signatures.mli", 403, 16012, 16014), ("src/signatures.mli", 403, 16012, 16037), 0), 0, Tag1 ("Signatures", 169)), 0); (("program_to_execute", 2638), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1937)], (0)), 100000000, 0, -1936), 0, (("src/signatures.mli", 404, 16038, 16040), ("src/signatures.mli", 404, 16038, 16073), 0), 0, Tag1 ("Signatures", 170)), 0); (("must_clean", 2639), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1935)], (0)), 100000000, 0, -1934), 0, (("src/signatures.mli", 405, 16074, 16076), ("src/signatures.mli", 405, 16074, 16101), 0), 0, Tag1 ("Signatures", 171)), 0); (("catch_errors", 2640), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1933)], (0)), 100000000, 0, -1932), 0, (("src/signatures.mli", 406, 16102, 16104), ("src/signatures.mli", 406, 16102, 16131), 0), 0, Tag1 ("Signatures", 172)), 0); (("use_menhir", 2641), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1931)], (0)), 100000000, 0, -1930), 0, (("src/signatures.mli", 407, 16132, 16134), ("src/signatures.mli", 407, 16132, 16159), 0), 0, Tag1 ("Signatures", 173)), 0); (("show_documentation", 2642), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1929)], (0)), 100000000, 0, -1928), 0, (("src/signatures.mli", 408, 16160, 16162), ("src/signatures.mli", 408, 16160, 16195), 0), 0, Tag1 ("Signatures", 174)), 0); (("recursive", 2643), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1927)], (0)), 100000000, 0, -1926), 0, (("src/signatures.mli", 409, 16196, 16198), ("src/signatures.mli", 409, 16196, 16222), 0), 0, Tag1 ("Signatures", 175)), 0); (("use_ocamlfind", 2644), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1925)], (0)), 100000000, 0, -1924), 0, (("src/signatures.mli", 410, 16223, 16225), ("src/signatures.mli", 410, 16223, 16253), 0), 0, Tag1 ("Signatures", 176)), 0); (("plugin_use_ocamlfind", 2645), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1923)], (0)), 100000000, 0, -1922), 0, (("src/signatures.mli", 411, 16254, 16256), ("src/signatures.mli", 411, 16254, 16291), 0), 0, Tag1 ("Signatures", 177)), 0); (("targets", 2646), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1921)], (0)), 100000000, 0, -1920)], (0)), 100000000, 0, -1919), 0, (("src/signatures.mli", 413, 16293, 16295), ("src/signatures.mli", 413, 16293, 16324), 0), 0, Tag1 ("Signatures", 178)), 0); (("ocaml_libs", 2647), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1918)], (0)), 100000000, 0, -1917)], (0)), 100000000, 0, -1916), 0, (("src/signatures.mli", 414, 16325, 16327), ("src/signatures.mli", 414, 16325, 16359), 0), 0, Tag1 ("Signatures", 179)), 0); (("ocaml_mods", 2648), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1915)], (0)), 100000000, 0, -1914)], (0)), 100000000, 0, -1913), 0, (("src/signatures.mli", 415, 16360, 16362), ("src/signatures.mli", 415, 16360, 16394), 0), 0, Tag1 ("Signatures", 180)), 0); (("ocaml_pkgs", 2649), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1912)], (0)), 100000000, 0, -1911)], (0)), 100000000, 0, -1910), 0, (("src/signatures.mli", 416, 16395, 16397), ("src/signatures.mli", 416, 16395, 16429), 0), 0, Tag1 ("Signatures", 181)), 0); (("ocaml_syntax", 2650), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1909)], (0)), 100000000, 0, -1908)], (0)), 100000000, 0, -1907), 0, (("src/signatures.mli", 417, 16430, 16432), ("src/signatures.mli", 417, 16430, 16468), 0), 0, Tag1 ("Signatures", 182)), 0); (("ocaml_cflags", 2651), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1906)], (0)), 100000000, 0, -1905)], (0)), 100000000, 0, -1904), 0, (("src/signatures.mli", 418, 16469, 16471), ("src/signatures.mli", 418, 16469, 16505), 0), 0, Tag1 ("Signatures", 183)), 0); (("ocaml_lflags", 2652), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1903)], (0)), 100000000, 0, -1902)], (0)), 100000000, 0, -1901), 0, (("src/signatures.mli", 419, 16506, 16508), ("src/signatures.mli", 419, 16506, 16542), 0), 0, Tag1 ("Signatures", 184)), 0); (("ocaml_ppflags", 2653), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1900)], (0)), 100000000, 0, -1899)], (0)), 100000000, 0, -1898), 0, (("src/signatures.mli", 420, 16543, 16545), ("src/signatures.mli", 420, 16543, 16580), 0), 0, Tag1 ("Signatures", 185)), 0); (("ocaml_docflags", 2654), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1897)], (0)), 100000000, 0, -1896)], (0)), 100000000, 0, -1895), 0, (("src/signatures.mli", 421, 16581, 16583), ("src/signatures.mli", 421, 16581, 16619), 0), 0, Tag1 ("Signatures", 186)), 0); (("ocaml_yaccflags", 2655), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1894)], (0)), 100000000, 0, -1893)], (0)), 100000000, 0, -1892), 0, (("src/signatures.mli", 422, 16620, 16622), ("src/signatures.mli", 422, 16620, 16659), 0), 0, Tag1 ("Signatures", 187)), 0); (("ocaml_lexflags", 2656), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1891)], (0)), 100000000, 0, -1890)], (0)), 100000000, 0, -1889), 0, (("src/signatures.mli", 423, 16660, 16662), ("src/signatures.mli", 423, 16660, 16698), 0), 0, Tag1 ("Signatures", 188)), 0); (("program_args", 2657), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1888)], (0)), 100000000, 0, -1887)], (0)), 100000000, 0, -1886), 0, (("src/signatures.mli", 424, 16699, 16701), ("src/signatures.mli", 424, 16699, 16735), 0), 0, Tag1 ("Signatures", 189)), 0); (("ignore_list", 2658), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1885)], (0)), 100000000, 0, -1884)], (0)), 100000000, 0, -1883), 0, (("src/signatures.mli", 425, 16736, 16738), ("src/signatures.mli", 425, 16736, 16771), 0), 0, Tag1 ("Signatures", 190)), 0); (("tags", 2659), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1882)], (0)), 100000000, 0, -1881)], (0)), 100000000, 0, -1880), 0, (("src/signatures.mli", 426, 16772, 16774), ("src/signatures.mli", 426, 16772, 16800), 0), 0, Tag1 ("Signatures", 191)), 0); (("tag_lines", 2660), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1879)], (0)), 100000000, 0, -1878)], (0)), 100000000, 0, -1877), 0, (("src/signatures.mli", 427, 16801, 16803), ("src/signatures.mli", 427, 16801, 16834), 0), 0, Tag1 ("Signatures", 192)), 0); (("show_tags", 2661), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1876)], (0)), 100000000, 0, -1875)], (0)), 100000000, 0, -1874), 0, (("src/signatures.mli", 428, 16835, 16837), ("src/signatures.mli", 428, 16835, 16868), 0), 0, Tag1 ("Signatures", 193)), 0); (("ext_obj", 2662), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1873)], (0)), 100000000, 0, -1872), 0, (("src/signatures.mli", 430, 16870, 16872), ("src/signatures.mli", 430, 16870, 16896), 0), 0, Tag1 ("Signatures", 194)), 0); (("ext_lib", 2663), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1871)], (0)), 100000000, 0, -1870), 0, (("src/signatures.mli", 431, 16897, 16899), ("src/signatures.mli", 431, 16897, 16923), 0), 0, Tag1 ("Signatures", 195)), 0); (("ext_dll", 2664), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1869)], (0)), 100000000, 0, -1868), 0, (("src/signatures.mli", 432, 16924, 16926), ("src/signatures.mli", 432, 16924, 16950), 0), 0, Tag1 ("Signatures", 196)), 0); (("exe", 2665), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1867)], (0)), 100000000, 0, -1866), 0, (("src/signatures.mli", 433, 16951, 16953), ("src/signatures.mli", 433, 16951, 16973), 0), 0, Tag1 ("Signatures", 197)), 0); (("add", 2666), ((Tag1 (0, (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Arg"), "key"), 0, (0)), 100000000, 0, -1863); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Arg"), "spec"), 0, (0)), 100000000, 0, -1864); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Arg"), "doc"), 0, (0)), 100000000, 0, -1865)]), 100000000, 0, -1862), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1861), 0), 100000000, 0, -1860), 0, (("src/signatures.mli", 435, 16975, 16977), ("src/signatures.mli", 435, 16975, 17023), 0), 0, Tag1 ("Signatures", 198)), 0)])), 0, (("src/signatures.mli", 377, 15199, 15199), ("src/signatures.mli", 436, 17024, 17027), 0), Tag1 ("Signatures", 199)), 0); Tag4 (("ARCH", 2270), ((Tag1 ([Tag1 (("arch", 2667), ([((("a")), 100000000, 0, -2086)], 1, Tag1 ([(("Arch_dir", 1115), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2085); ((("a")), 100000000, 0, -2086); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("arch", 2667)), [((("a")), 100000000, 0, -2086)], (0)), 100000000, 0, -2088)], (0)), 100000000, 0, -2087)]), 0, (("src/signatures.mli", 440, 17077, 17081), ("src/signatures.mli", 440, 17077, 17121), 0), 0, Tag1 ("Signatures", 201)); (("Arch_dir_pack", 1116), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2089); ((("a")), 100000000, 0, -2086); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("arch", 2667)), [((("a")), 100000000, 0, -2086)], (0)), 100000000, 0, -2091)], (0)), 100000000, 0, -2090)]), 0, (("src/signatures.mli", 441, 17122, 17126), ("src/signatures.mli", 441, 17122, 17171), 0), 0, Tag1 ("Signatures", 202)); (("Arch_file", 1117), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2092); ((("a")), 100000000, 0, -2086)]), 0, (("src/signatures.mli", 442, 17172, 17176), ("src/signatures.mli", 442, 17172, 17202), 0), 0, Tag1 ("Signatures", 203))], 0), 0, 0, [31], [0], 0, 0, (("src/signatures.mli", 439, 17052, 17054), ("src/signatures.mli", 442, 17172, 17202), 0), 0, 0, 0, Tag1 ("Signatures", 200)), 1, 0); (("dir", 2668), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2084), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("arch", 2667)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2083)], (0)), 100000000, 0, -2082)], (0)), 100000000, 0, -2081), (Tag3 ((("arch", 2667)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2080)], (0)), 100000000, 0, -2079), 0), 100000000, 0, -2078), 0), 100000000, 0, -2077), 0, (("src/signatures.mli", 444, 17204, 17206), ("src/signatures.mli", 444, 17204, 17253), 0), 0, Tag1 ("Signatures", 204)), 0); (("dir_pack", 2669), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2076), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("arch", 2667)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2075)], (0)), 100000000, 0, -2074)], (0)), 100000000, 0, -2073), (Tag3 ((("arch", 2667)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2072)], (0)), 100000000, 0, -2071), 0), 100000000, 0, -2070), 0), 100000000, 0, -2069), 0, (("src/signatures.mli", 445, 17254, 17256), ("src/signatures.mli", 445, 17254, 17308), 0), 0, Tag1 ("Signatures", 205)), 0); (("file", 2670), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2068), (Tag3 ((("arch", 2667)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2067)], (0)), 100000000, 0, -2066), 0), 100000000, 0, -2065), 0, (("src/signatures.mli", 446, 17309, 17311), ("src/signatures.mli", 446, 17309, 17341), 0), 0, Tag1 ("Signatures", 206)), 0); Tag1 (("info", 2671), (0, 0, [[(("current_path", 1122), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2061), (("src/signatures.mli", 449, 17367, 17371), ("src/signatures.mli", 449, 17367, 17393), 0), 0, Tag1 ("Signatures", 208)); (("include_dirs", 1123), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2063)], (0)), 100000000, 0, -2062), (("src/signatures.mli", 450, 17394, 17398), ("src/signatures.mli", 450, 17394, 17425), 0), 0, Tag1 ("Signatures", 209)); (("for_pack", 1124), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2064), (("src/signatures.mli", 451, 17426, 17430), ("src/signatures.mli", 451, 17426, 17448), 0), 0, Tag1 ("Signatures", 210))]], 0, 0, 0, 0, 0, 0, (("src/signatures.mli", 448, 17343, 17345), ("src/signatures.mli", 452, 17449, 17452), 0), 0, 0, 0, Tag1 ("Signatures", 207)), 1, 0); (("annotate", 2672), ((Tag1 (0, (Tag3 ((("arch", 2667)), [((("a")), 100000000, 0, -2060)], (0)), 100000000, 0, -2059), (Tag3 ((("arch", 2667)), [(Tag3 ((("info", 2671)), 0, (0)), 100000000, 0, -2058)], (0)), 100000000, 0, -2057), 0), 100000000, 0, -2056), 0, (("src/signatures.mli", 454, 17454, 17456), ("src/signatures.mli", 454, 17454, 17491), 0), 0, Tag1 ("Signatures", 211)), 0); (("print", 2673), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -2055), (Tag1 (0, ((("a")), 100000000, 0, -2050), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2054), 0), 100000000, 0, -2053), 0), 100000000, 0, -2052), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -2051), (Tag1 (0, (Tag3 ((("arch", 2667)), [((("a")), 100000000, 0, -2050)], (0)), 100000000, 0, -2049), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2048), 0), 100000000, 0, -2047), 0), 100000000, 0, -2046), 0), 100000000, 0, -2045), 0, (("src/signatures.mli", 456, 17493, 17495), ("src/signatures.mli", 456, 17493, 17578), 0), 0, Tag1 ("Signatures", 212)), 0); (("print_include_dirs", 2674), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -2044), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2043)], (0)), 100000000, 0, -2042), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2041), 0), 100000000, 0, -2040), 0), 100000000, 0, -2039), 0, (("src/signatures.mli", 457, 17579, 17581), ("src/signatures.mli", 457, 17579, 17645), 0), 0, Tag1 ("Signatures", 213)), 0); (("print_info", 2675), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -2038), (Tag1 (0, (Tag3 ((("info", 2671)), 0, (0)), 100000000, 0, -2037), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2036), 0), 100000000, 0, -2035), 0), 100000000, 0, -2034), 0, (("src/signatures.mli", 458, 17646, 17648), ("src/signatures.mli", 458, 17646, 17697), 0), 0, Tag1 ("Signatures", 214)), 0); (("iter_info", 2676), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -2031), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2033), 0), 100000000, 0, -2032), (Tag1 (0, (Tag3 ((("arch", 2667)), [((("a")), 100000000, 0, -2031)], (0)), 100000000, 0, -2030), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2029), 0), 100000000, 0, -2028), 0), 100000000, 0, -2027), 0, (("src/signatures.mli", 460, 17699, 17701), ("src/signatures.mli", 460, 17699, 17748), 0), 0, Tag1 ("Signatures", 215)), 0); (("fold_info", 2677), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -2024), (Tag1 (0, ((("b")), 100000000, 0, -2022), ((("b")), 100000000, 0, -2022), 0), 100000000, 0, -2026), 0), 100000000, 0, -2025), (Tag1 (0, (Tag3 ((("arch", 2667)), [((("a")), 100000000, 0, -2024)], (0)), 100000000, 0, -2023), (Tag1 (0, ((("b")), 100000000, 0, -2022), ((("b")), 100000000, 0, -2022), 0), 100000000, 0, -2021), 0), 100000000, 0, -2020), 0), 100000000, 0, -2019), 0, (("src/signatures.mli", 461, 17749, 17751), ("src/signatures.mli", 461, 17749, 17806), 0), 0, Tag1 ("Signatures", 216)), 0); (("iter_include_dirs", 2678), ((Tag1 (0, (Tag3 ((("arch", 2667)), [(Tag3 ((("info", 2671)), 0, (0)), 100000000, 0, -2018)], (0)), 100000000, 0, -2017), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2016), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2015), 0), 100000000, 0, -2014), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2013), 0), 100000000, 0, -2012), 0), 100000000, 0, -2011), 0, (("src/signatures.mli", 463, 17808, 17810), ("src/signatures.mli", 463, 17808, 17871), 0), 0, Tag1 ("Signatures", 217)), 0); (("mk_tables", 2679), ((Tag1 (0, (Tag3 ((("arch", 2667)), [(Tag3 ((("info", 2671)), 0, (0)), 100000000, 0, -2010)], (0)), 100000000, 0, -2009), (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Hashtbl"), "t"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2003); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2005)], (0)), 100000000, 0, -2004)], (0)), 100000000, 0, -2002); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Hashtbl"), "t"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2007); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2008)], (0)), 100000000, 0, -2006)]), 100000000, 0, -2001), 0), 100000000, 0, -2000), 0, (("src/signatures.mli", 465, 17873, 17875), ("src/signatures.mli", 466, 17891, 17968), 0), 0, Tag1 ("Signatures", 218)), 0); (("print_table", 2680), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -1999), (Tag1 (0, ((("a")), 100000000, 0, -1994), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1998), 0), 100000000, 0, -1997), 0), 100000000, 0, -1996), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -1995), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Hashtbl"), "t"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1993); ((("a")), 100000000, 0, -1994)], (0)), 100000000, 0, -1992), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1991), 0), 100000000, 0, -1990), 0), 100000000, 0, -1989), 0), 100000000, 0, -1988), 0, (("src/signatures.mli", 467, 17969, 17971), ("src/signatures.mli", 468, 17989, 18079), 0), 0, Tag1 ("Signatures", 219)), 0)])), 0, (("src/signatures.mli", 438, 17029, 17029), ("src/signatures.mli", 469, 18080, 18083), 0), Tag1 ("Signatures", 220)), 0); Tag4 (("FINDLIB", 2271), ((Tag1 ([Tag1 (("command_spec", 2681), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/signatures.mli", 474, 18148, 18150), ("src/signatures.mli", 474, 18148, 18167), 0), 0, 0, 0, Tag1 ("Signatures", 221)), 1, 0); Tag1 (("error", 2682), (0, 0, Tag1 ([(("Cannot_run_ocamlfind", 1176), (0), 0, (("src/signatures.mli", 477, 18184, 18188), ("src/signatures.mli", 477, 18184, 18210), 0), 0, Tag1 ("Signatures", 223)); (("Dependency_not_found", 1177), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2141); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2142)]), 0, (("src/signatures.mli", 478, 18211, 18215), ("src/signatures.mli", 478, 18211, 18256), 0), 0, Tag1 ("Signatures", 224)); (("Package_not_found", 1178), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2143)]), 0, (("src/signatures.mli", 479, 18283, 18287), ("src/signatures.mli", 479, 18283, 18316), 0), 0, Tag1 ("Signatures", 225)); (("Cannot_parse_query", 1179), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2144); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2145)]), 0, (("src/signatures.mli", 480, 18317, 18321), ("src/signatures.mli", 480, 18317, 18360), 0), 0, Tag1 ("Signatures", 226))], 0), 1, 0, 0, 0, 0, 0, (("src/signatures.mli", 476, 18169, 18171), ("src/signatures.mli", 480, 18317, 18360), 0), 0, 0, 0, Tag1 ("Signatures", 222)), 1, 0); Tag2 (("Findlib_error", 2683), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((("error", 2682)), 0, (0)), 100000000, 0, -2140)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Signatures", 227)), 2, 0); (("string_of_error", 2684), ((Tag1 (0, (Tag3 ((("error", 2682)), 0, (0)), 100000000, 0, -2139), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2138), 0), 100000000, 0, -2137), 0, (("src/signatures.mli", 484, 18425, 18427), ("src/signatures.mli", 484, 18425, 18463), 0), 0, Tag1 ("Signatures", 228)), 0); (("report_error", 2685), ((Tag1 (0, (Tag3 ((("error", 2682)), 0, (0)), 100000000, 0, -2136), ((("a")), 100000000, 0, -2135), 0), 100000000, 0, -2134), 0, (("src/signatures.mli", 487, 18521, 18523), ("src/signatures.mli", 487, 18521, 18552), 0), 0, Tag1 ("Signatures", 229)), 0); Tag1 (("package", 2686), (0, 0, [[(("name", 1184), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2125), (("src/signatures.mli", 491, 18644, 18648), ("src/signatures.mli", 491, 18644, 18661), 0), 0, Tag1 ("Signatures", 231)); (("description", 1185), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2126), (("src/signatures.mli", 492, 18662, 18666), ("src/signatures.mli", 492, 18662, 18686), 0), 0, Tag1 ("Signatures", 232)); (("version", 1186), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2127), (("src/signatures.mli", 493, 18687, 18691), ("src/signatures.mli", 493, 18687, 18707), 0), 0, Tag1 ("Signatures", 233)); (("archives_byte", 1187), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2128), (("src/signatures.mli", 494, 18708, 18712), ("src/signatures.mli", 494, 18708, 18734), 0), 0, Tag1 ("Signatures", 234)); (("archives_native", 1188), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2129), (("src/signatures.mli", 496, 18815, 18819), ("src/signatures.mli", 496, 18815, 18843), 0), 0, Tag1 ("Signatures", 235)); (("link_options", 1189), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2130), (("src/signatures.mli", 498, 18925, 18929), ("src/signatures.mli", 498, 18925, 18950), 0), 0, Tag1 ("Signatures", 236)); (("location", 1190), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2131), (("src/signatures.mli", 499, 18951, 18955), ("src/signatures.mli", 499, 18951, 18972), 0), 0, Tag1 ("Signatures", 237)); (("dependencies", 1191), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("package", 2686)), 0, (0)), 100000000, 0, -2133)], (0)), 100000000, 0, -2132), (("src/signatures.mli", 500, 18973, 18977), ("src/signatures.mli", 500, 18973, 19004), 0), 0, Tag1 ("Signatures", 238))]], 1, 0, 0, 0, 0, 0, (("src/signatures.mli", 490, 18625, 18627), ("src/signatures.mli", 502, 19075, 19078), 0), 0, 0, 0, Tag1 ("Signatures", 230)), 1, 0); (("query", 2687), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2124), (Tag3 ((("package", 2686)), 0, (0)), 100000000, 0, -2123), 0), 100000000, 0, -2122), 0, (("src/signatures.mli", 505, 19112, 19114), ("src/signatures.mli", 505, 19112, 19142), 0), 0, Tag1 ("Signatures", 239)), 0); (("list", 2688), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2121), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2120)], (0)), 100000000, 0, -2119), 0), 100000000, 0, -2118), 0, (("src/signatures.mli", 509, 19229, 19231), ("src/signatures.mli", 509, 19229, 19260), 0), 0, Tag1 ("Signatures", 240)), 0); (("topological_closure", 2689), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("package", 2686)), 0, (0)), 100000000, 0, -2117)], (0)), 100000000, 0, -2116), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("package", 2686)), 0, (0)), 100000000, 0, -2115)], (0)), 100000000, 0, -2114), 0), 100000000, 0, -2113), 0, (("src/signatures.mli", 512, 19313, 19315), ("src/signatures.mli", 512, 19313, 19368), 0), 0, Tag1 ("Signatures", 241)), 0); (("include_flags", 2690), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("package", 2686)), 0, (0)), 100000000, 0, -2112)], (0)), 100000000, 0, -2111), (Tag3 ((("command_spec", 2681)), 0, (0)), 100000000, 0, -2110), 0), 100000000, 0, -2109), 0, (("src/signatures.mli", 519, 19659, 19661), ("src/signatures.mli", 519, 19659, 19708), 0), 0, Tag1 ("Signatures", 242)), 0); (("compile_flags_byte", 2691), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("package", 2686)), 0, (0)), 100000000, 0, -2108)], (0)), 100000000, 0, -2107), (Tag3 ((("command_spec", 2681)), 0, (0)), 100000000, 0, -2106), 0), 100000000, 0, -2105), 0, (("src/signatures.mli", 522, 19761, 19763), ("src/signatures.mli", 522, 19761, 19815), 0), 0, Tag1 ("Signatures", 243)), 0); (("compile_flags_native", 2692), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("package", 2686)), 0, (0)), 100000000, 0, -2104)], (0)), 100000000, 0, -2103), (Tag3 ((("command_spec", 2681)), 0, (0)), 100000000, 0, -2102), 0), 100000000, 0, -2101), 0, (("src/signatures.mli", 526, 19903, 19905), ("src/signatures.mli", 526, 19903, 19959), 0), 0, Tag1 ("Signatures", 244)), 0); (("link_flags_byte", 2693), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("package", 2686)), 0, (0)), 100000000, 0, -2100)], (0)), 100000000, 0, -2099), (Tag3 ((("command_spec", 2681)), 0, (0)), 100000000, 0, -2098), 0), 100000000, 0, -2097), 0, (("src/signatures.mli", 529, 20022, 20024), ("src/signatures.mli", 529, 20022, 20073), 0), 0, Tag1 ("Signatures", 245)), 0); (("link_flags_native", 2694), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("package", 2686)), 0, (0)), 100000000, 0, -2096)], (0)), 100000000, 0, -2095), (Tag3 ((("command_spec", 2681)), 0, (0)), 100000000, 0, -2094), 0), 100000000, 0, -2093), 0, (("src/signatures.mli", 533, 20207, 20209), ("src/signatures.mli", 533, 20207, 20260), 0), 0, Tag1 ("Signatures", 246)), 0)])), 0, (("src/signatures.mli", 471, 18085, 18085), ("src/signatures.mli", 535, 20319, 20322), 0), Tag1 ("Signatures", 247)), 0); Tag4 (("PLUGIN", 2272), ((Tag1 ([Tag3 (("Pathname", 2695), 0, (((("PATHNAME", 2263))), 0, (("src/signatures.mli", 540, 20435, 20437), ("src/signatures.mli", 540, 20435, 20464), 0), Tag1 ("Signatures", 248)), 0, 0); Tag3 (("Tags", 2696), 0, (((("TAGS", 2262))), 0, (("src/signatures.mli", 541, 20465, 20467), ("src/signatures.mli", 541, 20465, 20490), 0), Tag1 ("Signatures", 249)), 0, 0); Tag3 (("Command", 2697), 0, (Tag1 ([Tag1 (("tags", 2763), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Tags", 2696)), "t"), 0, (0)), 100000000, 0, -2597)), 0, 0, 0, 0, (("src/signatures.mli", 542, 20491, 20525), ("src/signatures.mli", 542, 20491, 20543), 0), 0, 0, 0, Tag1 ("Signatures", 250)), 1, 0); Tag1 (("pathname", 2764), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Pathname", 2695)), "t"), 0, (0)), 100000000, 0, -2596)), 0, 0, 0, 0, (("src/signatures.mli", 542, 20491, 20548), ("src/signatures.mli", 542, 20491, 20574), 0), 0, 0, 0, Tag1 ("Signatures", 251)), 1, 0); Tag1 (("t", 2765), (0, 0, Tag1 ([(("Seq", 969), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 2765)), 0, (0)), 100000000, 0, -2591)], (0)), 100000000, 0, -2590)]), 0, (("src/signatures.mli", 176, 6206, 6210), ("src/signatures.mli", 176, 6206, 6225), 0), 0, Tag1 ("Signatures", 85)); (("Cmd", 970), ([(Tag3 ((("spec", 2766)), 0, (0)), 100000000, 0, -2592)]), 0, (("src/signatures.mli", 177, 6280, 6284), ("src/signatures.mli", 177, 6280, 6297), 0), 0, Tag1 ("Signatures", 86)); (("Echo", 971), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2594)], (0)), 100000000, 0, -2593); (Tag3 ((("pathname", 2764)), 0, (0)), 100000000, 0, -2595)]), 0, (("src/signatures.mli", 178, 6360, 6364), ("src/signatures.mli", 178, 6360, 6396), 0), 0, Tag1 ("Signatures", 87)); (("Nop", 972), (0), 0, (("src/signatures.mli", 180, 6481, 6485), ("src/signatures.mli", 180, 6481, 6490), 0), 0, Tag1 ("Signatures", 88))], 0), 1, 0, 0, 0, 0, 0, (("src/signatures.mli", 175, 6195, 6197), ("src/signatures.mli", 180, 6481, 6490), 0), 0, 0, 0, Tag1 ("Signatures", 83)), 1, 0); Tag1 (("spec", 2766), (0, 0, Tag1 ([(("N", 973), (0), 0, (("src/signatures.mli", 184, 6625, 6629), ("src/signatures.mli", 184, 6625, 6632), 0), 0, Tag1 ("Signatures", 89)); (("S", 974), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("spec", 2766)), 0, (0)), 100000000, 0, -2582)], (0)), 100000000, 0, -2581)]), 0, (("src/signatures.mli", 185, 6667, 6671), ("src/signatures.mli", 185, 6667, 6687), 0), 0, Tag1 ("Signatures", 90)); (("A", 975), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2583)]), 0, (("src/signatures.mli", 186, 6747, 6751), ("src/signatures.mli", 186, 6747, 6764), 0), 0, Tag1 ("Signatures", 91)); (("P", 976), ([(Tag3 ((("pathname", 2764)), 0, (0)), 100000000, 0, -2584)]), 0, (("src/signatures.mli", 187, 6784, 6788), ("src/signatures.mli", 187, 6784, 6803), 0), 0, Tag1 ("Signatures", 92)); (("Px", 977), ([(Tag3 ((("pathname", 2764)), 0, (0)), 100000000, 0, -2585)]), 0, (("src/signatures.mli", 188, 6824, 6828), ("src/signatures.mli", 188, 6824, 6844), 0), 0, Tag1 ("Signatures", 93)); (("Sh", 978), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2586)]), 0, (("src/signatures.mli", 190, 6943, 6947), ("src/signatures.mli", 190, 6943, 6961), 0), 0, Tag1 ("Signatures", 94)); (("T", 979), ([(Tag3 ((("tags", 2763)), 0, (0)), 100000000, 0, -2587)]), 0, (("src/signatures.mli", 191, 7022, 7026), ("src/signatures.mli", 191, 7022, 7037), 0), 0, Tag1 ("Signatures", 95)); (("V", 980), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2588)]), 0, (("src/signatures.mli", 196, 7319, 7323), ("src/signatures.mli", 196, 7319, 7336), 0), 0, Tag1 ("Signatures", 96)); (("Quote", 981), ([(Tag3 ((("spec", 2766)), 0, (0)), 100000000, 0, -2589)]), 0, (("src/signatures.mli", 198, 7451, 7455), ("src/signatures.mli", 198, 7451, 7470), 0), 0, Tag1 ("Signatures", 97))], 0), 1, 0, 0, 0, 0, 0, (("src/signatures.mli", 183, 6612, 6614), ("src/signatures.mli", 198, 7451, 7470), 0), 0, 0, 0, Tag1 ("Signatures", 84)), 2, 0); (("atomize", 2767), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2580)], (0)), 100000000, 0, -2579), (Tag3 ((("spec", 2766)), 0, (0)), 100000000, 0, -2578), 0), 100000000, 0, -2577), 0, (("src/signatures.mli", 217, 7996, 7998), ("src/signatures.mli", 217, 7996, 8031), 0), 0, Tag1 ("Signatures", 98)), 0); (("atomize_paths", 2768), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2576)], (0)), 100000000, 0, -2575), (Tag3 ((("spec", 2766)), 0, (0)), 100000000, 0, -2574), 0), 100000000, 0, -2573), 0, (("src/signatures.mli", 220, 8116, 8118), ("src/signatures.mli", 220, 8116, 8157), 0), 0, Tag1 ("Signatures", 99)), 0); (("execute", 2769), ((Tag1 (Tag1 ("quiet"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2572)], (0)), 100000000, 0, -2571), (Tag1 (Tag1 ("pretend"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2570)], (0)), 100000000, 0, -2569), (Tag1 (0, (Tag3 ((("t", 2765)), 0, (0)), 100000000, 0, -2568), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2567), 0), 100000000, 0, -2566), 0), 100000000, 0, -2565), 0), 100000000, 0, -2564), 0, (("src/signatures.mli", 223, 8185, 8187), ("src/signatures.mli", 223, 8185, 8242), 0), 0, Tag1 ("Signatures", 100)), 0); (("execute_many", 2770), ((Tag1 (Tag1 ("quiet"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2563)], (0)), 100000000, 0, -2562), (Tag1 (Tag1 ("pretend"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2561)], (0)), 100000000, 0, -2560), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 2765)), 0, (0)), 100000000, 0, -2559)], (0)), 100000000, 0, -2558), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2556)], (0)), 100000000, 0, -2555); (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -2557)]), 100000000, 0, -2554)], (0)), 100000000, 0, -2553), 0), 100000000, 0, -2552), 0), 100000000, 0, -2551), 0), 100000000, 0, -2550), 0, (("src/signatures.mli", 227, 8358, 8360), ("src/signatures.mli", 227, 8358, 8445), 0), 0, Tag1 ("Signatures", 101)), 0); (("setup_virtual_command_solver", 2771), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2549), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2548), (Tag3 ((("spec", 2766)), 0, (0)), 100000000, 0, -2547), 0), 100000000, 0, -2546), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2545), 0), 100000000, 0, -2544), 0), 100000000, 0, -2543), 0, (("src/signatures.mli", 232, 8625, 8627), ("src/signatures.mli", 232, 8625, 8694), 0), 0, Tag1 ("Signatures", 102)), 0); (("search_in_path", 2772), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2542), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2541), 0), 100000000, 0, -2540), 0, (("src/signatures.mli", 236, 8790, 8792), ("src/signatures.mli", 236, 8790, 8829), 0), 0, Tag1 ("Signatures", 103)), 0); (("reduce", 2773), ((Tag1 (0, (Tag3 ((("spec", 2766)), 0, (0)), 100000000, 0, -2539), (Tag3 ((("spec", 2766)), 0, (0)), 100000000, 0, -2538), 0), 100000000, 0, -2537), 0, (("src/signatures.mli", 240, 8943, 8945), ("src/signatures.mli", 240, 8943, 8970), 0), 0, Tag1 ("Signatures", 104)), 0); (("print", 2774), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -2536), (Tag1 (0, (Tag3 ((("t", 2765)), 0, (0)), 100000000, 0, -2535), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2534), 0), 100000000, 0, -2533), 0), 100000000, 0, -2532), 0, (("src/signatures.mli", 243, 9050, 9052), ("src/signatures.mli", 243, 9050, 9093), 0), 0, Tag1 ("Signatures", 105)), 0); (("to_string", 2775), ((Tag1 (0, (Tag3 ((("t", 2765)), 0, (0)), 100000000, 0, -2531), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2530), 0), 100000000, 0, -2529), 0, (("src/signatures.mli", 246, 9158, 9160), ("src/signatures.mli", 246, 9158, 9187), 0), 0, Tag1 ("Signatures", 106)), 0); (("string_of_command_spec", 2776), ((Tag1 (0, (Tag3 ((("spec", 2766)), 0, (0)), 100000000, 0, -2528), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2527), 0), 100000000, 0, -2526), 0, (("src/signatures.mli", 250, 9287, 9289), ("src/signatures.mli", 250, 9287, 9332), 0), 0, Tag1 ("Signatures", 107)), 0)]), 0, (("src/signatures.mli", 542, 20491, 20493), ("src/signatures.mli", 542, 20491, 20574), 0), Tag1 ("Signatures", 252)), 0, 0); Tag3 (("Outcome", 2698), 0, (((("OUTCOME", 2267))), 0, (("src/signatures.mli", 543, 20575, 20577), ("src/signatures.mli", 543, 20575, 20603), 0), Tag1 ("Signatures", 253)), 0, 0); Tag3 (("String", 2699), 0, (((("STRING", 2261))), 0, (("src/signatures.mli", 544, 20604, 20606), ("src/signatures.mli", 544, 20604, 20631), 0), Tag1 ("Signatures", 254)), 0, 0); Tag3 (("List", 2700), 0, (((("LIST", 2260))), 0, (("src/signatures.mli", 545, 20632, 20634), ("src/signatures.mli", 545, 20632, 20657), 0), Tag1 ("Signatures", 255)), 0, 0); Tag3 (("StringSet", 2701), 0, (Tag1 ([Tag1 (("elt", 2777), (0, 0, 0, 1, ((Tag3 (Tag1 ((("String", 2699)), "t"), 0, (0)), 100000000, 0, -2824)), 0, 0, 0, 0, (("src/signatures.mli", 546, 20658, 20690), ("src/signatures.mli", 546, 20658, 20709), 0), 0, 0, 0, Tag1 ("Signatures", 256)), 1, 0); Tag1 (("t", 2778), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("set.mli", 74, 2901, 2905), ("set.mli", 74, 2901, 2911), 0), 0, 0, 0, Tag1 ("Stdlib__Set", 4)), 1, 0); (("empty", 2779), ((Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2823), 0, (("set.mli", 77, 2942, 2946), ("set.mli", 77, 2942, 2958), 0), 0, Tag1 ("Stdlib__Set", 5)), 0); (("add", 2780), ((Tag1 (0, (Tag3 ((("elt", 2777)), 0, (0)), 100000000, 0, -2822), (Tag1 (0, (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2821), (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2820), 0), 100000000, 0, -2819), 0), 100000000, 0, -2818), 0, (("set.mli", 80, 2986, 2990), ("set.mli", 80, 2986, 3012), 0), 0, Tag1 ("Stdlib__Set", 6)), 0); (("singleton", 2781), ((Tag1 (0, (Tag3 ((("elt", 2777)), 0, (0)), 100000000, 0, -2817), (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2816), 0), 100000000, 0, -2815), 0, (("set.mli", 86, 3278, 3282), ("set.mli", 86, 3278, 3305), 0), 0, Tag1 ("Stdlib__Set", 7)), 0); (("remove", 2782), ((Tag1 (0, (Tag3 ((("elt", 2777)), 0, (0)), 100000000, 0, -2814), (Tag1 (0, (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2813), (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2812), 0), 100000000, 0, -2811), 0), 100000000, 0, -2810), 0, (("set.mli", 89, 3381, 3385), ("set.mli", 89, 3381, 3410), 0), 0, Tag1 ("Stdlib__Set", 8)), 0); (("union", 2783), ((Tag1 (0, (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2809), (Tag1 (0, (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2808), (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2807), 0), 100000000, 0, -2806), 0), 100000000, 0, -2805), 0, (("set.mli", 95, 3677, 3681), ("set.mli", 95, 3677, 3703), 0), 0, Tag1 ("Stdlib__Set", 9)), 0); (("inter", 2784), ((Tag1 (0, (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2804), (Tag1 (0, (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2803), (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2802), 0), 100000000, 0, -2801), 0), 100000000, 0, -2800), 0, (("set.mli", 98, 3727, 3731), ("set.mli", 98, 3727, 3753), 0), 0, Tag1 ("Stdlib__Set", 10)), 0); (("disjoint", 2785), ((Tag1 (0, (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2799), (Tag1 (0, (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2798), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2797), 0), 100000000, 0, -2796), 0), 100000000, 0, -2795), 0, (("set.mli", 101, 3784, 3788), ("set.mli", 101, 3784, 3816), 0), 0, Tag1 ("Stdlib__Set", 11)), 0); (("diff", 2786), ((Tag1 (0, (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2794), (Tag1 (0, (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2793), (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2792), 0), 100000000, 0, -2791), 0), 100000000, 0, -2790), 0, (("set.mli", 105, 3880, 3884), ("set.mli", 105, 3880, 3905), 0), 0, Tag1 ("Stdlib__Set", 12)), 0); (("cardinal", 2787), ((Tag1 (0, (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2789), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -2788), 0), 100000000, 0, -2787), 0, (("set.mli", 109, 4007, 4011), ("set.mli", 109, 4007, 4033), 0), 0, Tag1 ("Stdlib__Set", 13)), 0); (("elements", 2788), ((Tag1 (0, (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2786), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 2777)), 0, (0)), 100000000, 0, -2785)], (0)), 100000000, 0, -2784), 0), 100000000, 0, -2783), 0, (("set.mli", 114, 4120, 4124), ("set.mli", 114, 4120, 4151), 0), 0, Tag1 ("Stdlib__Set", 14)), 0); (("min_elt", 2789), ((Tag1 (0, (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2782), (Tag3 ((("elt", 2777)), 0, (0)), 100000000, 0, -2781), 0), 100000000, 0, -2780), 0, (("set.mli", 120, 4380, 4384), ("set.mli", 120, 4380, 4405), 0), 0, Tag1 ("Stdlib__Set", 15)), 0); (("min_elt_opt", 2790), ((Tag1 (0, (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2779), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2777)), 0, (0)), 100000000, 0, -2778)], (0)), 100000000, 0, -2777), 0), 100000000, 0, -2776), 0, (("set.mli", 125, 4567, 4571), ("set.mli", 125, 4567, 4603), 0), 0, Tag1 ("Stdlib__Set", 16)), 0); (("max_elt", 2791), ((Tag1 (0, (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2775), (Tag3 ((("elt", 2777)), 0, (0)), 100000000, 0, -2774), 0), 100000000, 0, -2773), 0, (("set.mli", 131, 4774, 4778), ("set.mli", 131, 4774, 4799), 0), 0, Tag1 ("Stdlib__Set", 17)), 0); (("max_elt_opt", 2792), ((Tag1 (0, (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2772), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2777)), 0, (0)), 100000000, 0, -2771)], (0)), 100000000, 0, -2770), 0), 100000000, 0, -2769), 0, (("set.mli", 135, 4890, 4894), ("set.mli", 135, 4890, 4926), 0), 0, Tag1 ("Stdlib__Set", 18)), 0); (("choose", 2793), ((Tag1 (0, (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2768), (Tag3 ((("elt", 2777)), 0, (0)), 100000000, 0, -2767), 0), 100000000, 0, -2766), 0, (("set.mli", 140, 5041, 5045), ("set.mli", 140, 5041, 5065), 0), 0, Tag1 ("Stdlib__Set", 19)), 0); (("choose_opt", 2794), ((Tag1 (0, (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2765), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2777)), 0, (0)), 100000000, 0, -2764)], (0)), 100000000, 0, -2763), 0), 100000000, 0, -2762), 0, (("set.mli", 145, 5263, 5267), ("set.mli", 145, 5263, 5298), 0), 0, Tag1 ("Stdlib__Set", 20)), 0); (("find", 2795), ((Tag1 (0, (Tag3 ((("elt", 2777)), 0, (0)), 100000000, 0, -2761), (Tag1 (0, (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2760), (Tag3 ((("elt", 2777)), 0, (0)), 100000000, 0, -2759), 0), 100000000, 0, -2758), 0), 100000000, 0, -2757), 0, (("set.mli", 153, 5541, 5549), ("set.mli", 153, 5541, 5574), 0), 0, Tag1 ("Stdlib__Set", 21)), 0); (("find_opt", 2796), ((Tag1 (0, (Tag3 ((("elt", 2777)), 0, (0)), 100000000, 0, -2756), (Tag1 (0, (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2755), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2777)), 0, (0)), 100000000, 0, -2754)], (0)), 100000000, 0, -2753), 0), 100000000, 0, -2752), 0), 100000000, 0, -2751), 0, (("set.mli", 159, 5752, 5756), ("set.mli", 159, 5752, 5792), 0), 0, Tag1 ("Stdlib__Set", 22)), 0); (("find_first", 2797), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2777)), 0, (0)), 100000000, 0, -2750), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2749), 0), 100000000, 0, -2748), (Tag1 (0, (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2747), (Tag3 ((("elt", 2777)), 0, (0)), 100000000, 0, -2746), 0), 100000000, 0, -2745), 0), 100000000, 0, -2744), 0, (("set.mli", 165, 5963, 5967), ("set.mli", 165, 5963, 6008), 0), 0, Tag1 ("Stdlib__Set", 23)), 0); (("find_first_opt", 2798), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2777)), 0, (0)), 100000000, 0, -2743), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2742), 0), 100000000, 0, -2741), (Tag1 (0, (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2740), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2777)), 0, (0)), 100000000, 0, -2739)], (0)), 100000000, 0, -2738), 0), 100000000, 0, -2737), 0), 100000000, 0, -2736), 0, (("set.mli", 177, 6482, 6486), ("set.mli", 177, 6482, 6538), 0), 0, Tag1 ("Stdlib__Set", 24)), 0); (("find_last", 2799), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2777)), 0, (0)), 100000000, 0, -2735), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2734), 0), 100000000, 0, -2733), (Tag1 (0, (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2732), (Tag3 ((("elt", 2777)), 0, (0)), 100000000, 0, -2731), 0), 100000000, 0, -2730), 0), 100000000, 0, -2729), 0, (("set.mli", 184, 6779, 6783), ("set.mli", 184, 6779, 6823), 0), 0, Tag1 ("Stdlib__Set", 25)), 0); (("find_last_opt", 2800), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2777)), 0, (0)), 100000000, 0, -2728), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2727), 0), 100000000, 0, -2726), (Tag1 (0, (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2725), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2777)), 0, (0)), 100000000, 0, -2724)], (0)), 100000000, 0, -2723), 0), 100000000, 0, -2722), 0), 100000000, 0, -2721), 0, (("set.mli", 190, 7044, 7048), ("set.mli", 190, 7044, 7099), 0), 0, Tag1 ("Stdlib__Set", 26)), 0); (("iter", 2801), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2777)), 0, (0)), 100000000, 0, -2720), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2719), 0), 100000000, 0, -2718), (Tag1 (0, (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2717), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2716), 0), 100000000, 0, -2715), 0), 100000000, 0, -2714), 0, (("set.mli", 198, 7371, 7375), ("set.mli", 198, 7371, 7411), 0), 0, Tag1 ("Stdlib__Set", 27)), 0); (("fold", 2802), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2777)), 0, (0)), 100000000, 0, -2713), (Tag1 (0, ((("acc")), 100000000, 0, -2709), ((("acc")), 100000000, 0, -2709), 0), 100000000, 0, -2712), 0), 100000000, 0, -2711), (Tag1 (0, (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2710), (Tag1 (0, ((("acc")), 100000000, 0, -2709), ((("acc")), 100000000, 0, -2709), 0), 100000000, 0, -2708), 0), 100000000, 0, -2707), 0), 100000000, 0, -2706), 0, (("set.mli", 203, 7616, 7620), ("set.mli", 203, 7616, 7672), 0), 0, Tag1 ("Stdlib__Set", 28)), 0); (("map", 2803), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2777)), 0, (0)), 100000000, 0, -2705), (Tag3 ((("elt", 2777)), 0, (0)), 100000000, 0, -2704), 0), 100000000, 0, -2703), (Tag1 (0, (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2702), (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2701), 0), 100000000, 0, -2700), 0), 100000000, 0, -2699), 0, (("set.mli", 209, 7860, 7864), ("set.mli", 209, 7860, 7895), 0), 0, Tag1 ("Stdlib__Set", 29)), 0); (("filter", 2804), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2777)), 0, (0)), 100000000, 0, -2698), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2697), 0), 100000000, 0, -2696), (Tag1 (0, (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2695), (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2694), 0), 100000000, 0, -2693), 0), 100000000, 0, -2692), 0, (("set.mli", 221, 8372, 8376), ("set.mli", 221, 8372, 8411), 0), 0, Tag1 ("Stdlib__Set", 30)), 0); (("filter_map", 2805), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2777)), 0, (0)), 100000000, 0, -2691), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 2777)), 0, (0)), 100000000, 0, -2690)], (0)), 100000000, 0, -2689), 0), 100000000, 0, -2688), (Tag1 (0, (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2687), (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2686), 0), 100000000, 0, -2685), 0), 100000000, 0, -2684), 0, (("set.mli", 228, 8710, 8714), ("set.mli", 228, 8710, 8759), 0), 0, Tag1 ("Stdlib__Set", 31)), 0); (("partition", 2806), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2777)), 0, (0)), 100000000, 0, -2683), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2682), 0), 100000000, 0, -2681), (Tag1 (0, (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2680), (Tag2 ([(Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2678); (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2679)]), 100000000, 0, -2677), 0), 100000000, 0, -2676), 0), 100000000, 0, -2675), 0, (("set.mli", 243, 9275, 9279), ("set.mli", 243, 9275, 9321), 0), 0, Tag1 ("Stdlib__Set", 32)), 0); (("split", 2807), ((Tag1 (0, (Tag3 ((("elt", 2777)), 0, (0)), 100000000, 0, -2674), (Tag1 (0, (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2673), (Tag2 ([(Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2670); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2671); (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2672)]), 100000000, 0, -2669), 0), 100000000, 0, -2668), 0), 100000000, 0, -2667), 0, (("set.mli", 249, 9562, 9566), ("set.mli", 249, 9562, 9601), 0), 0, Tag1 ("Stdlib__Set", 33)), 0); (("is_empty", 2808), ((Tag1 (0, (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2666), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2665), 0), 100000000, 0, -2664), 0, (("set.mli", 260, 10020, 10024), ("set.mli", 260, 10020, 10047), 0), 0, Tag1 ("Stdlib__Set", 34)), 0); (("mem", 2809), ((Tag1 (0, (Tag3 ((("elt", 2777)), 0, (0)), 100000000, 0, -2663), (Tag1 (0, (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2662), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2661), 0), 100000000, 0, -2660), 0), 100000000, 0, -2659), 0, (("set.mli", 263, 10096, 10100), ("set.mli", 263, 10096, 10125), 0), 0, Tag1 ("Stdlib__Set", 35)), 0); (("equal", 2810), ((Tag1 (0, (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2658), (Tag1 (0, (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2657), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2656), 0), 100000000, 0, -2655), 0), 100000000, 0, -2654), 0, (("set.mli", 266, 10190, 10194), ("set.mli", 266, 10190, 10219), 0), 0, Tag1 ("Stdlib__Set", 36)), 0); (("compare", 2811), ((Tag1 (0, (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2653), (Tag1 (0, (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2652), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -2651), 0), 100000000, 0, -2650), 0), 100000000, 0, -2649), 0, (("set.mli", 270, 10335, 10339), ("set.mli", 270, 10335, 10365), 0), 0, Tag1 ("Stdlib__Set", 37)), 0); (("subset", 2812), ((Tag1 (0, (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2648), (Tag1 (0, (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2647), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2646), 0), 100000000, 0, -2645), 0), 100000000, 0, -2644), 0, (("set.mli", 274, 10476, 10480), ("set.mli", 274, 10476, 10506), 0), 0, Tag1 ("Stdlib__Set", 38)), 0); (("for_all", 2813), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2777)), 0, (0)), 100000000, 0, -2643), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2642), 0), 100000000, 0, -2641), (Tag1 (0, (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2640), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2639), 0), 100000000, 0, -2638), 0), 100000000, 0, -2637), 0, (("set.mli", 278, 10598, 10602), ("set.mli", 278, 10598, 10641), 0), 0, Tag1 ("Stdlib__Set", 39)), 0); (("exists", 2814), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 2777)), 0, (0)), 100000000, 0, -2636), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2635), 0), 100000000, 0, -2634), (Tag1 (0, (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2633), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2632), 0), 100000000, 0, -2631), 0), 100000000, 0, -2630), 0, (("set.mli", 282, 10737, 10741), ("set.mli", 282, 10737, 10779), 0), 0, Tag1 ("Stdlib__Set", 40)), 0); (("to_list", 2815), ((Tag1 (0, (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2629), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 2777)), 0, (0)), 100000000, 0, -2628)], (0)), 100000000, 0, -2627), 0), 100000000, 0, -2626), 0, (("set.mli", 288, 10922, 10926), ("set.mli", 288, 10922, 10953), 0), 0, Tag1 ("Stdlib__Set", 41)), 0); (("of_list", 2816), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 2777)), 0, (0)), 100000000, 0, -2625)], (0)), 100000000, 0, -2624), (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2623), 0), 100000000, 0, -2622), 0, (("set.mli", 292, 11017, 11021), ("set.mli", 292, 11017, 11047), 0), 0, Tag1 ("Stdlib__Set", 42)), 0); (("to_seq_from", 2817), ((Tag1 (0, (Tag3 ((("elt", 2777)), 0, (0)), 100000000, 0, -2621), (Tag1 (0, (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2620), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2777)), 0, (0)), 100000000, 0, -2619)], (0)), 100000000, 0, -2618), 0), 100000000, 0, -2617), 0), 100000000, 0, -2616), 0, (("set.mli", 298, 11268, 11272), ("set.mli", 298, 11268, 11311), 0), 0, Tag1 ("Stdlib__Set", 43)), 0); (("to_seq", 2818), ((Tag1 (0, (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2615), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2777)), 0, (0)), 100000000, 0, -2614)], (0)), 100000000, 0, -2613), 0), 100000000, 0, -2612), 0, (("set.mli", 303, 11453, 11457), ("set.mli", 303, 11453, 11484), 0), 0, Tag1 ("Stdlib__Set", 44)), 0); (("to_rev_seq", 2819), ((Tag1 (0, (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2611), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2777)), 0, (0)), 100000000, 0, -2610)], (0)), 100000000, 0, -2609), 0), 100000000, 0, -2608), 0, (("set.mli", 307, 11562, 11566), ("set.mli", 307, 11562, 11597), 0), 0, Tag1 ("Stdlib__Set", 45)), 0); (("add_seq", 2820), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2777)), 0, (0)), 100000000, 0, -2607)], (0)), 100000000, 0, -2606), (Tag1 (0, (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2605), (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2604), 0), 100000000, 0, -2603), 0), 100000000, 0, -2602), 0, (("set.mli", 311, 11676, 11680), ("set.mli", 311, 11676, 11713), 0), 0, Tag1 ("Stdlib__Set", 46)), 0); (("of_seq", 2821), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 2777)), 0, (0)), 100000000, 0, -2601)], (0)), 100000000, 0, -2600), (Tag3 ((("t", 2778)), 0, (0)), 100000000, 0, -2599), 0), 100000000, 0, -2598), 0, (("set.mli", 315, 11791, 11795), ("set.mli", 315, 11791, 11822), 0), 0, Tag1 ("Stdlib__Set", 47)), 0)]), 0, (("src/signatures.mli", 546, 20658, 20660), ("src/signatures.mli", 546, 20658, 20709), 0), Tag1 ("Signatures", 257)), 0, 0); Tag3 (("Options", 2702), 0, (Tag1 ([Tag1 (("command_spec", 2822), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Command", 2697)), "spec"), 0, (0)), 100000000, 0, -2953)), 0, 0, 0, 0, (("src/signatures.mli", 547, 20710, 20744), ("src/signatures.mli", 547, 20710, 20776), 0), 0, 0, 0, Tag1 ("Signatures", 258)), 1, 0); (("build_dir", 2823), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2952)], (0)), 100000000, 0, -2951), 0, (("src/signatures.mli", 380, 15246, 15248), ("src/signatures.mli", 380, 15246, 15274), 0), 0, Tag1 ("Signatures", 146)), 0); (("include_dirs", 2824), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2950)], (0)), 100000000, 0, -2949)], (0)), 100000000, 0, -2948), 0, (("src/signatures.mli", 381, 15275, 15277), ("src/signatures.mli", 381, 15275, 15311), 0), 0, Tag1 ("Signatures", 147)), 0); (("exclude_dirs", 2825), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2947)], (0)), 100000000, 0, -2946)], (0)), 100000000, 0, -2945), 0, (("src/signatures.mli", 382, 15312, 15314), ("src/signatures.mli", 382, 15312, 15348), 0), 0, Tag1 ("Signatures", 148)), 0); (("nothing_should_be_rebuilt", 2826), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2944)], (0)), 100000000, 0, -2943), 0, (("src/signatures.mli", 383, 15349, 15351), ("src/signatures.mli", 383, 15349, 15391), 0), 0, Tag1 ("Signatures", 149)), 0); (("ocamlc", 2827), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 2822)), 0, (0)), 100000000, 0, -2942)], (0)), 100000000, 0, -2941), 0, (("src/signatures.mli", 384, 15392, 15394), ("src/signatures.mli", 384, 15392, 15423), 0), 0, Tag1 ("Signatures", 150)), 0); (("plugin_ocamlc", 2828), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 2822)), 0, (0)), 100000000, 0, -2940)], (0)), 100000000, 0, -2939), 0, (("src/signatures.mli", 385, 15424, 15426), ("src/signatures.mli", 385, 15424, 15462), 0), 0, Tag1 ("Signatures", 151)), 0); (("ocamlopt", 2829), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 2822)), 0, (0)), 100000000, 0, -2938)], (0)), 100000000, 0, -2937), 0, (("src/signatures.mli", 386, 15463, 15465), ("src/signatures.mli", 386, 15463, 15496), 0), 0, Tag1 ("Signatures", 152)), 0); (("plugin_ocamlopt", 2830), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 2822)), 0, (0)), 100000000, 0, -2936)], (0)), 100000000, 0, -2935), 0, (("src/signatures.mli", 387, 15497, 15499), ("src/signatures.mli", 387, 15497, 15537), 0), 0, Tag1 ("Signatures", 153)), 0); (("ocamldep", 2831), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 2822)), 0, (0)), 100000000, 0, -2934)], (0)), 100000000, 0, -2933), 0, (("src/signatures.mli", 388, 15538, 15540), ("src/signatures.mli", 388, 15538, 15571), 0), 0, Tag1 ("Signatures", 154)), 0); (("ocamldoc", 2832), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 2822)), 0, (0)), 100000000, 0, -2932)], (0)), 100000000, 0, -2931), 0, (("src/signatures.mli", 389, 15572, 15574), ("src/signatures.mli", 389, 15572, 15605), 0), 0, Tag1 ("Signatures", 155)), 0); (("ocamlyacc", 2833), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 2822)), 0, (0)), 100000000, 0, -2930)], (0)), 100000000, 0, -2929), 0, (("src/signatures.mli", 390, 15606, 15608), ("src/signatures.mli", 390, 15606, 15640), 0), 0, Tag1 ("Signatures", 156)), 0); (("ocamllex", 2834), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 2822)), 0, (0)), 100000000, 0, -2928)], (0)), 100000000, 0, -2927), 0, (("src/signatures.mli", 391, 15641, 15643), ("src/signatures.mli", 391, 15641, 15674), 0), 0, Tag1 ("Signatures", 157)), 0); (("ocamlrun", 2835), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 2822)), 0, (0)), 100000000, 0, -2926)], (0)), 100000000, 0, -2925), 0, (("src/signatures.mli", 392, 15675, 15677), ("src/signatures.mli", 392, 15675, 15708), 0), 0, Tag1 ("Signatures", 158)), 0); (("ocamlmklib", 2836), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 2822)), 0, (0)), 100000000, 0, -2924)], (0)), 100000000, 0, -2923), 0, (("src/signatures.mli", 393, 15709, 15711), ("src/signatures.mli", 393, 15709, 15744), 0), 0, Tag1 ("Signatures", 159)), 0); (("ocamlmktop", 2837), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 2822)), 0, (0)), 100000000, 0, -2922)], (0)), 100000000, 0, -2921), 0, (("src/signatures.mli", 394, 15745, 15747), ("src/signatures.mli", 394, 15745, 15780), 0), 0, Tag1 ("Signatures", 160)), 0); (("hygiene", 2838), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2920)], (0)), 100000000, 0, -2919), 0, (("src/signatures.mli", 395, 15781, 15783), ("src/signatures.mli", 395, 15781, 15805), 0), 0, Tag1 ("Signatures", 161)), 0); (("sanitize", 2839), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2918)], (0)), 100000000, 0, -2917), 0, (("src/signatures.mli", 396, 15806, 15808), ("src/signatures.mli", 396, 15806, 15831), 0), 0, Tag1 ("Signatures", 162)), 0); (("sanitization_script", 2840), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2916)], (0)), 100000000, 0, -2915), 0, (("src/signatures.mli", 397, 15832, 15834), ("src/signatures.mli", 397, 15832, 15870), 0), 0, Tag1 ("Signatures", 163)), 0); (("ignore_auto", 2841), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2914)], (0)), 100000000, 0, -2913), 0, (("src/signatures.mli", 398, 15871, 15873), ("src/signatures.mli", 398, 15871, 15899), 0), 0, Tag1 ("Signatures", 164)), 0); (("plugin", 2842), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2912)], (0)), 100000000, 0, -2911), 0, (("src/signatures.mli", 399, 15900, 15902), ("src/signatures.mli", 399, 15900, 15923), 0), 0, Tag1 ("Signatures", 165)), 0); (("just_plugin", 2843), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2910)], (0)), 100000000, 0, -2909), 0, (("src/signatures.mli", 400, 15924, 15926), ("src/signatures.mli", 400, 15924, 15952), 0), 0, Tag1 ("Signatures", 166)), 0); (("native_plugin", 2844), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2908)], (0)), 100000000, 0, -2907), 0, (("src/signatures.mli", 401, 15953, 15955), ("src/signatures.mli", 401, 15953, 15983), 0), 0, Tag1 ("Signatures", 167)), 0); (("make_links", 2845), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2906)], (0)), 100000000, 0, -2905), 0, (("src/signatures.mli", 402, 15984, 15986), ("src/signatures.mli", 402, 15984, 16011), 0), 0, Tag1 ("Signatures", 168)), 0); (("nostdlib", 2846), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2904)], (0)), 100000000, 0, -2903), 0, (("src/signatures.mli", 403, 16012, 16014), ("src/signatures.mli", 403, 16012, 16037), 0), 0, Tag1 ("Signatures", 169)), 0); (("program_to_execute", 2847), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2902)], (0)), 100000000, 0, -2901), 0, (("src/signatures.mli", 404, 16038, 16040), ("src/signatures.mli", 404, 16038, 16073), 0), 0, Tag1 ("Signatures", 170)), 0); (("must_clean", 2848), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2900)], (0)), 100000000, 0, -2899), 0, (("src/signatures.mli", 405, 16074, 16076), ("src/signatures.mli", 405, 16074, 16101), 0), 0, Tag1 ("Signatures", 171)), 0); (("catch_errors", 2849), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2898)], (0)), 100000000, 0, -2897), 0, (("src/signatures.mli", 406, 16102, 16104), ("src/signatures.mli", 406, 16102, 16131), 0), 0, Tag1 ("Signatures", 172)), 0); (("use_menhir", 2850), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2896)], (0)), 100000000, 0, -2895), 0, (("src/signatures.mli", 407, 16132, 16134), ("src/signatures.mli", 407, 16132, 16159), 0), 0, Tag1 ("Signatures", 173)), 0); (("show_documentation", 2851), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2894)], (0)), 100000000, 0, -2893), 0, (("src/signatures.mli", 408, 16160, 16162), ("src/signatures.mli", 408, 16160, 16195), 0), 0, Tag1 ("Signatures", 174)), 0); (("recursive", 2852), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2892)], (0)), 100000000, 0, -2891), 0, (("src/signatures.mli", 409, 16196, 16198), ("src/signatures.mli", 409, 16196, 16222), 0), 0, Tag1 ("Signatures", 175)), 0); (("use_ocamlfind", 2853), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2890)], (0)), 100000000, 0, -2889), 0, (("src/signatures.mli", 410, 16223, 16225), ("src/signatures.mli", 410, 16223, 16253), 0), 0, Tag1 ("Signatures", 176)), 0); (("plugin_use_ocamlfind", 2854), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2888)], (0)), 100000000, 0, -2887), 0, (("src/signatures.mli", 411, 16254, 16256), ("src/signatures.mli", 411, 16254, 16291), 0), 0, Tag1 ("Signatures", 177)), 0); (("targets", 2855), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2886)], (0)), 100000000, 0, -2885)], (0)), 100000000, 0, -2884), 0, (("src/signatures.mli", 413, 16293, 16295), ("src/signatures.mli", 413, 16293, 16324), 0), 0, Tag1 ("Signatures", 178)), 0); (("ocaml_libs", 2856), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2883)], (0)), 100000000, 0, -2882)], (0)), 100000000, 0, -2881), 0, (("src/signatures.mli", 414, 16325, 16327), ("src/signatures.mli", 414, 16325, 16359), 0), 0, Tag1 ("Signatures", 179)), 0); (("ocaml_mods", 2857), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2880)], (0)), 100000000, 0, -2879)], (0)), 100000000, 0, -2878), 0, (("src/signatures.mli", 415, 16360, 16362), ("src/signatures.mli", 415, 16360, 16394), 0), 0, Tag1 ("Signatures", 180)), 0); (("ocaml_pkgs", 2858), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2877)], (0)), 100000000, 0, -2876)], (0)), 100000000, 0, -2875), 0, (("src/signatures.mli", 416, 16395, 16397), ("src/signatures.mli", 416, 16395, 16429), 0), 0, Tag1 ("Signatures", 181)), 0); (("ocaml_syntax", 2859), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2874)], (0)), 100000000, 0, -2873)], (0)), 100000000, 0, -2872), 0, (("src/signatures.mli", 417, 16430, 16432), ("src/signatures.mli", 417, 16430, 16468), 0), 0, Tag1 ("Signatures", 182)), 0); (("ocaml_cflags", 2860), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2871)], (0)), 100000000, 0, -2870)], (0)), 100000000, 0, -2869), 0, (("src/signatures.mli", 418, 16469, 16471), ("src/signatures.mli", 418, 16469, 16505), 0), 0, Tag1 ("Signatures", 183)), 0); (("ocaml_lflags", 2861), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2868)], (0)), 100000000, 0, -2867)], (0)), 100000000, 0, -2866), 0, (("src/signatures.mli", 419, 16506, 16508), ("src/signatures.mli", 419, 16506, 16542), 0), 0, Tag1 ("Signatures", 184)), 0); (("ocaml_ppflags", 2862), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2865)], (0)), 100000000, 0, -2864)], (0)), 100000000, 0, -2863), 0, (("src/signatures.mli", 420, 16543, 16545), ("src/signatures.mli", 420, 16543, 16580), 0), 0, Tag1 ("Signatures", 185)), 0); (("ocaml_docflags", 2863), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2862)], (0)), 100000000, 0, -2861)], (0)), 100000000, 0, -2860), 0, (("src/signatures.mli", 421, 16581, 16583), ("src/signatures.mli", 421, 16581, 16619), 0), 0, Tag1 ("Signatures", 186)), 0); (("ocaml_yaccflags", 2864), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2859)], (0)), 100000000, 0, -2858)], (0)), 100000000, 0, -2857), 0, (("src/signatures.mli", 422, 16620, 16622), ("src/signatures.mli", 422, 16620, 16659), 0), 0, Tag1 ("Signatures", 187)), 0); (("ocaml_lexflags", 2865), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2856)], (0)), 100000000, 0, -2855)], (0)), 100000000, 0, -2854), 0, (("src/signatures.mli", 423, 16660, 16662), ("src/signatures.mli", 423, 16660, 16698), 0), 0, Tag1 ("Signatures", 188)), 0); (("program_args", 2866), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2853)], (0)), 100000000, 0, -2852)], (0)), 100000000, 0, -2851), 0, (("src/signatures.mli", 424, 16699, 16701), ("src/signatures.mli", 424, 16699, 16735), 0), 0, Tag1 ("Signatures", 189)), 0); (("ignore_list", 2867), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2850)], (0)), 100000000, 0, -2849)], (0)), 100000000, 0, -2848), 0, (("src/signatures.mli", 425, 16736, 16738), ("src/signatures.mli", 425, 16736, 16771), 0), 0, Tag1 ("Signatures", 190)), 0); (("tags", 2868), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2847)], (0)), 100000000, 0, -2846)], (0)), 100000000, 0, -2845), 0, (("src/signatures.mli", 426, 16772, 16774), ("src/signatures.mli", 426, 16772, 16800), 0), 0, Tag1 ("Signatures", 191)), 0); (("tag_lines", 2869), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2844)], (0)), 100000000, 0, -2843)], (0)), 100000000, 0, -2842), 0, (("src/signatures.mli", 427, 16801, 16803), ("src/signatures.mli", 427, 16801, 16834), 0), 0, Tag1 ("Signatures", 192)), 0); (("show_tags", 2870), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2841)], (0)), 100000000, 0, -2840)], (0)), 100000000, 0, -2839), 0, (("src/signatures.mli", 428, 16835, 16837), ("src/signatures.mli", 428, 16835, 16868), 0), 0, Tag1 ("Signatures", 193)), 0); (("ext_obj", 2871), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2838)], (0)), 100000000, 0, -2837), 0, (("src/signatures.mli", 430, 16870, 16872), ("src/signatures.mli", 430, 16870, 16896), 0), 0, Tag1 ("Signatures", 194)), 0); (("ext_lib", 2872), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2836)], (0)), 100000000, 0, -2835), 0, (("src/signatures.mli", 431, 16897, 16899), ("src/signatures.mli", 431, 16897, 16923), 0), 0, Tag1 ("Signatures", 195)), 0); (("ext_dll", 2873), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2834)], (0)), 100000000, 0, -2833), 0, (("src/signatures.mli", 432, 16924, 16926), ("src/signatures.mli", 432, 16924, 16950), 0), 0, Tag1 ("Signatures", 196)), 0); (("exe", 2874), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2832)], (0)), 100000000, 0, -2831), 0, (("src/signatures.mli", 433, 16951, 16953), ("src/signatures.mli", 433, 16951, 16973), 0), 0, Tag1 ("Signatures", 197)), 0); (("add", 2875), ((Tag1 (0, (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Arg"), "key"), 0, (0)), 100000000, 0, -2828); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Arg"), "spec"), 0, (0)), 100000000, 0, -2829); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Arg"), "doc"), 0, (0)), 100000000, 0, -2830)]), 100000000, 0, -2827), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2826), 0), 100000000, 0, -2825), 0, (("src/signatures.mli", 435, 16975, 16977), ("src/signatures.mli", 435, 16975, 17023), 0), 0, Tag1 ("Signatures", 198)), 0)]), 0, (("src/signatures.mli", 547, 20710, 20712), ("src/signatures.mli", 547, 20710, 20776), 0), Tag1 ("Signatures", 259)), 0, 0); Tag3 (("Arch", 2703), 0, (((("ARCH", 2270))), 0, (("src/signatures.mli", 548, 20777, 20779), ("src/signatures.mli", 548, 20777, 20802), 0), Tag1 ("Signatures", 260)), 0, 0); Tag3 (("Findlib", 2704), 0, (Tag1 ([Tag1 (("command_spec", 2876), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Command", 2697)), "spec"), 0, (0)), 100000000, 0, -3007)), 0, 0, 0, 0, (("src/signatures.mli", 549, 20803, 20837), ("src/signatures.mli", 549, 20803, 20869), 0), 0, 0, 0, Tag1 ("Signatures", 261)), 1, 0); Tag1 (("error", 2877), (0, 0, Tag1 ([(("Cannot_run_ocamlfind", 1176), (0), 0, (("src/signatures.mli", 477, 18184, 18188), ("src/signatures.mli", 477, 18184, 18210), 0), 0, Tag1 ("Signatures", 223)); (("Dependency_not_found", 1177), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3002); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3003)]), 0, (("src/signatures.mli", 478, 18211, 18215), ("src/signatures.mli", 478, 18211, 18256), 0), 0, Tag1 ("Signatures", 224)); (("Package_not_found", 1178), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3004)]), 0, (("src/signatures.mli", 479, 18283, 18287), ("src/signatures.mli", 479, 18283, 18316), 0), 0, Tag1 ("Signatures", 225)); (("Cannot_parse_query", 1179), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3005); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3006)]), 0, (("src/signatures.mli", 480, 18317, 18321), ("src/signatures.mli", 480, 18317, 18360), 0), 0, Tag1 ("Signatures", 226))], 0), 1, 0, 0, 0, 0, 0, (("src/signatures.mli", 476, 18169, 18171), ("src/signatures.mli", 480, 18317, 18360), 0), 0, 0, 0, Tag1 ("Signatures", 222)), 1, 0); Tag2 (("Findlib_error", 2878), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((("error", 2877)), 0, (0)), 100000000, 0, -3001)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Signatures", 227)), 2, 0); (("string_of_error", 2879), ((Tag1 (0, (Tag3 ((("error", 2877)), 0, (0)), 100000000, 0, -3000), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2999), 0), 100000000, 0, -2998), 0, (("src/signatures.mli", 484, 18425, 18427), ("src/signatures.mli", 484, 18425, 18463), 0), 0, Tag1 ("Signatures", 228)), 0); (("report_error", 2880), ((Tag1 (0, (Tag3 ((("error", 2877)), 0, (0)), 100000000, 0, -2997), ((("a")), 100000000, 0, -2996), 0), 100000000, 0, -2995), 0, (("src/signatures.mli", 487, 18521, 18523), ("src/signatures.mli", 487, 18521, 18552), 0), 0, Tag1 ("Signatures", 229)), 0); Tag1 (("package", 2881), (0, 0, [[(("name", 1184), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2986), (("src/signatures.mli", 491, 18644, 18648), ("src/signatures.mli", 491, 18644, 18661), 0), 0, Tag1 ("Signatures", 231)); (("description", 1185), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2987), (("src/signatures.mli", 492, 18662, 18666), ("src/signatures.mli", 492, 18662, 18686), 0), 0, Tag1 ("Signatures", 232)); (("version", 1186), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2988), (("src/signatures.mli", 493, 18687, 18691), ("src/signatures.mli", 493, 18687, 18707), 0), 0, Tag1 ("Signatures", 233)); (("archives_byte", 1187), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2989), (("src/signatures.mli", 494, 18708, 18712), ("src/signatures.mli", 494, 18708, 18734), 0), 0, Tag1 ("Signatures", 234)); (("archives_native", 1188), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2990), (("src/signatures.mli", 496, 18815, 18819), ("src/signatures.mli", 496, 18815, 18843), 0), 0, Tag1 ("Signatures", 235)); (("link_options", 1189), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2991), (("src/signatures.mli", 498, 18925, 18929), ("src/signatures.mli", 498, 18925, 18950), 0), 0, Tag1 ("Signatures", 236)); (("location", 1190), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2992), (("src/signatures.mli", 499, 18951, 18955), ("src/signatures.mli", 499, 18951, 18972), 0), 0, Tag1 ("Signatures", 237)); (("dependencies", 1191), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("package", 2881)), 0, (0)), 100000000, 0, -2994)], (0)), 100000000, 0, -2993), (("src/signatures.mli", 500, 18973, 18977), ("src/signatures.mli", 500, 18973, 19004), 0), 0, Tag1 ("Signatures", 238))]], 1, 0, 0, 0, 0, 0, (("src/signatures.mli", 490, 18625, 18627), ("src/signatures.mli", 502, 19075, 19078), 0), 0, 0, 0, Tag1 ("Signatures", 230)), 1, 0); (("query", 2882), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2985), (Tag3 ((("package", 2881)), 0, (0)), 100000000, 0, -2984), 0), 100000000, 0, -2983), 0, (("src/signatures.mli", 505, 19112, 19114), ("src/signatures.mli", 505, 19112, 19142), 0), 0, Tag1 ("Signatures", 239)), 0); (("list", 2883), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2982), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2981)], (0)), 100000000, 0, -2980), 0), 100000000, 0, -2979), 0, (("src/signatures.mli", 509, 19229, 19231), ("src/signatures.mli", 509, 19229, 19260), 0), 0, Tag1 ("Signatures", 240)), 0); (("topological_closure", 2884), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("package", 2881)), 0, (0)), 100000000, 0, -2978)], (0)), 100000000, 0, -2977), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("package", 2881)), 0, (0)), 100000000, 0, -2976)], (0)), 100000000, 0, -2975), 0), 100000000, 0, -2974), 0, (("src/signatures.mli", 512, 19313, 19315), ("src/signatures.mli", 512, 19313, 19368), 0), 0, Tag1 ("Signatures", 241)), 0); (("include_flags", 2885), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("package", 2881)), 0, (0)), 100000000, 0, -2973)], (0)), 100000000, 0, -2972), (Tag3 ((("command_spec", 2876)), 0, (0)), 100000000, 0, -2971), 0), 100000000, 0, -2970), 0, (("src/signatures.mli", 519, 19659, 19661), ("src/signatures.mli", 519, 19659, 19708), 0), 0, Tag1 ("Signatures", 242)), 0); (("compile_flags_byte", 2886), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("package", 2881)), 0, (0)), 100000000, 0, -2969)], (0)), 100000000, 0, -2968), (Tag3 ((("command_spec", 2876)), 0, (0)), 100000000, 0, -2967), 0), 100000000, 0, -2966), 0, (("src/signatures.mli", 522, 19761, 19763), ("src/signatures.mli", 522, 19761, 19815), 0), 0, Tag1 ("Signatures", 243)), 0); (("compile_flags_native", 2887), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("package", 2881)), 0, (0)), 100000000, 0, -2965)], (0)), 100000000, 0, -2964), (Tag3 ((("command_spec", 2876)), 0, (0)), 100000000, 0, -2963), 0), 100000000, 0, -2962), 0, (("src/signatures.mli", 526, 19903, 19905), ("src/signatures.mli", 526, 19903, 19959), 0), 0, Tag1 ("Signatures", 244)), 0); (("link_flags_byte", 2888), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("package", 2881)), 0, (0)), 100000000, 0, -2961)], (0)), 100000000, 0, -2960), (Tag3 ((("command_spec", 2876)), 0, (0)), 100000000, 0, -2959), 0), 100000000, 0, -2958), 0, (("src/signatures.mli", 529, 20022, 20024), ("src/signatures.mli", 529, 20022, 20073), 0), 0, Tag1 ("Signatures", 245)), 0); (("link_flags_native", 2889), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("package", 2881)), 0, (0)), 100000000, 0, -2957)], (0)), 100000000, 0, -2956), (Tag3 ((("command_spec", 2876)), 0, (0)), 100000000, 0, -2955), 0), 100000000, 0, -2954), 0, (("src/signatures.mli", 533, 20207, 20209), ("src/signatures.mli", 533, 20207, 20260), 0), 0, Tag1 ("Signatures", 246)), 0)]), 0, (("src/signatures.mli", 549, 20803, 20805), ("src/signatures.mli", 549, 20803, 20869), 0), Tag1 ("Signatures", 262)), 0, 0); (("opt_print", 2705), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -2525), (Tag1 (0, ((("a")), 100000000, 0, -2520), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2524), 0), 100000000, 0, -2523), 0), 100000000, 0, -2522), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -2521), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -2520)], (0)), 100000000, 0, -2519), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2518), 0), 100000000, 0, -2517), 0), 100000000, 0, -2516), 0), 100000000, 0, -2515), 0, (("src/signatures.mli", 341, 13837, 13839), ("src/signatures.mli", 342, 13855, 13932), 0), 0, Tag1 ("Signatures", 127)), 0); (("the", 2706), ((Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -2513)], (0)), 100000000, 0, -2514), ((("a")), 100000000, 0, -2513), 0), 100000000, 0, -2512), 0, (("src/signatures.mli", 343, 13933, 13935), ("src/signatures.mli", 343, 13933, 13960), 0), 0, Tag1 ("Signatures", 128)), 0); (("getenv", 2707), ((Tag1 (Tag1 ("default"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2511)], (0)), 100000000, 0, -2510), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2509), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2508), 0), 100000000, 0, -2507), 0), 100000000, 0, -2506), 0, (("src/signatures.mli", 344, 13961, 13963), ("src/signatures.mli", 344, 13961, 14011), 0), 0, Tag1 ("Signatures", 129)), 0); (("with_input_file", 2708), ((Tag1 (Tag1 ("bin"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2505)], (0)), 100000000, 0, -2504), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2503), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "in_channel"), 0, (0)), 100000000, 0, -2502), ((("a")), 100000000, 0, -2500), 0), 100000000, 0, -2501), ((("a")), 100000000, 0, -2500), 0), 100000000, 0, -2499), 0), 100000000, 0, -2498), 0), 100000000, 0, -2497), 0, (("src/signatures.mli", 345, 14012, 14014), ("src/signatures.mli", 345, 14012, 14083), 0), 0, Tag1 ("Signatures", 130)), 0); (("with_output_file", 2709), ((Tag1 (Tag1 ("bin"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2496)], (0)), 100000000, 0, -2495), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2494), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -2493), ((("a")), 100000000, 0, -2491), 0), 100000000, 0, -2492), ((("a")), 100000000, 0, -2491), 0), 100000000, 0, -2490), 0), 100000000, 0, -2489), 0), 100000000, 0, -2488), 0, (("src/signatures.mli", 346, 14084, 14086), ("src/signatures.mli", 346, 14084, 14157), 0), 0, Tag1 ("Signatures", 131)), 0); (("with_temp_file", 2710), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2487), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2486), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2485), ((("a")), 100000000, 0, -2483), 0), 100000000, 0, -2484), ((("a")), 100000000, 0, -2483), 0), 100000000, 0, -2482), 0), 100000000, 0, -2481), 0), 100000000, 0, -2480), 0, (("src/signatures.mli", 347, 14158, 14160), ("src/signatures.mli", 347, 14158, 14221), 0), 0, Tag1 ("Signatures", 132)), 0); (("read_file", 2711), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2479), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2478), 0), 100000000, 0, -2477), 0, (("src/signatures.mli", 348, 14222, 14224), ("src/signatures.mli", 348, 14222, 14256), 0), 0, Tag1 ("Signatures", 133)), 0); (("copy_chan", 2712), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "in_channel"), 0, (0)), 100000000, 0, -2476), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -2475), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2474), 0), 100000000, 0, -2473), 0), 100000000, 0, -2472), 0, (("src/signatures.mli", 349, 14257, 14259), ("src/signatures.mli", 349, 14257, 14308), 0), 0, Tag1 ("Signatures", 134)), 0); (("copy_file", 2713), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2471), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2470), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2469), 0), 100000000, 0, -2468), 0), 100000000, 0, -2467), 0, (("src/signatures.mli", 350, 14309, 14311), ("src/signatures.mli", 350, 14309, 14351), 0), 0, Tag1 ("Signatures", 135)), 0); (("print_string_list", 2714), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -2466), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2465)], (0)), 100000000, 0, -2464), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2463), 0), 100000000, 0, -2462), 0), 100000000, 0, -2461), 0, (("src/signatures.mli", 351, 14352, 14354), ("src/signatures.mli", 351, 14352, 14417), 0), 0, Tag1 ("Signatures", 136)), 0); (("!*", 2715), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lazy"), "t"), [((("a")), 100000000, 0, -2459)], (0)), 100000000, 0, -2460), ((("a")), 100000000, 0, -2459), 0), 100000000, 0, -2458), 0, (("src/signatures.mli", 354, 14479, 14481), ("src/signatures.mli", 354, 14479, 14509), 0), 0, Tag1 ("Signatures", 137)), 0); (("&", 2716), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -2456), ((("b")), 100000000, 0, -2455), 0), 100000000, 0, -2457), (Tag1 (0, ((("a")), 100000000, 0, -2456), ((("b")), 100000000, 0, -2455), 0), 100000000, 0, -2454), 0), 100000000, 0, -2453), 0, (("src/signatures.mli", 360, 14705, 14707), ("src/signatures.mli", 360, 14705, 14741), 0), 0, Tag1 ("Signatures", 138)), 0); (("|>", 2717), ((Tag1 (0, ((("a")), 100000000, 0, -2452), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -2452), ((("b")), 100000000, 0, -2450), 0), 100000000, 0, -2451), ((("b")), 100000000, 0, -2450), 0), 100000000, 0, -2449), 0), 100000000, 0, -2448), 0, (("src/signatures.mli", 365, 14903, 14905), ("src/signatures.mli", 365, 14903, 14940), 0), 0, Tag1 ("Signatures", 139)), 0); (("@:=", 2718), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -2445)], (0)), 100000000, 0, -2447)], (0)), 100000000, 0, -2446), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -2445)], (0)), 100000000, 0, -2444), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2443), 0), 100000000, 0, -2442), 0), 100000000, 0, -2441), 0, (("src/signatures.mli", 368, 14992, 14994), ("src/signatures.mli", 368, 14992, 15038), 0), 0, Tag1 ("Signatures", 140)), 0); (("memo", 2719), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -2439), ((("b")), 100000000, 0, -2438), 0), 100000000, 0, -2440), (Tag1 (0, ((("a")), 100000000, 0, -2439), ((("b")), 100000000, 0, -2438), 0), 100000000, 0, -2437), 0), 100000000, 0, -2436), 0, (("src/signatures.mli", 370, 15040, 15042), ("src/signatures.mli", 370, 15040, 15077), 0), 0, Tag1 ("Signatures", 141)), 0); (("memo2", 2720), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -2433), (Tag1 (0, ((("b")), 100000000, 0, -2432), ((("c")), 100000000, 0, -2431), 0), 100000000, 0, -2435), 0), 100000000, 0, -2434), (Tag1 (0, ((("a")), 100000000, 0, -2433), (Tag1 (0, ((("b")), 100000000, 0, -2432), ((("c")), 100000000, 0, -2431), 0), 100000000, 0, -2430), 0), 100000000, 0, -2429), 0), 100000000, 0, -2428), 0, (("src/signatures.mli", 372, 15079, 15081), ("src/signatures.mli", 372, 15079, 15129), 0), 0, Tag1 ("Signatures", 142)), 0); (("memo3", 2721), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -2424), (Tag1 (0, ((("b")), 100000000, 0, -2423), (Tag1 (0, ((("c")), 100000000, 0, -2422), ((("d")), 100000000, 0, -2421), 0), 100000000, 0, -2427), 0), 100000000, 0, -2426), 0), 100000000, 0, -2425), (Tag1 (0, ((("a")), 100000000, 0, -2424), (Tag1 (0, ((("b")), 100000000, 0, -2423), (Tag1 (0, ((("c")), 100000000, 0, -2422), ((("d")), 100000000, 0, -2421), 0), 100000000, 0, -2420), 0), 100000000, 0, -2419), 0), 100000000, 0, -2418), 0), 100000000, 0, -2417), 0, (("src/signatures.mli", 374, 15131, 15133), ("src/signatures.mli", 374, 15131, 15193), 0), 0, Tag1 ("Signatures", 143)), 0); Tag1 (("command", 2722), (0, 0, Tag1 ([(("Seq", 1362), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("command", 2722)), 0, (0)), 100000000, 0, -2412)], (0)), 100000000, 0, -2411)]), 0, (("src/signatures.mli", 554, 20975, 20979), ("src/signatures.mli", 554, 20975, 21000), 0), 0, Tag1 ("Signatures", 265)); (("Cmd", 1363), ([(Tag3 ((("spec", 2723)), 0, (0)), 100000000, 0, -2413)]), 0, (("src/signatures.mli", 555, 21001, 21005), ("src/signatures.mli", 555, 21001, 21018), 0), 0, Tag1 ("Signatures", 266)); (("Echo", 1364), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2415)], (0)), 100000000, 0, -2414); (Tag3 (Tag1 ((("Pathname", 2695)), "t"), 0, (0)), 100000000, 0, -2416)]), 0, (("src/signatures.mli", 556, 21019, 21023), ("src/signatures.mli", 556, 21019, 21057), 0), 0, Tag1 ("Signatures", 267)); (("Nop", 1365), (0), 0, (("src/signatures.mli", 557, 21058, 21062), ("src/signatures.mli", 557, 21058, 21067), 0), 0, Tag1 ("Signatures", 268))], 0), 1, ((Tag3 (Tag1 ((("Command", 2697)), "t"), 0, (0)), 100000000, 0, -2410)), 0, 0, 0, 0, (("src/signatures.mli", 553, 20946, 20948), ("src/signatures.mli", 557, 21058, 21067), 0), 0, 0, 0, Tag1 ("Signatures", 263)), 1, 0); Tag1 (("spec", 2723), (0, 0, Tag1 ([(("N", 1366), (0), 0, (("src/signatures.mli", 561, 21160, 21164), ("src/signatures.mli", 561, 21160, 21167), 0), 0, Tag1 ("Signatures", 269)); (("S", 1367), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("spec", 2723)), 0, (0)), 100000000, 0, -2402)], (0)), 100000000, 0, -2401)]), 0, (("src/signatures.mli", 561, 21160, 21168), ("src/signatures.mli", 561, 21160, 21184), 0), 0, Tag1 ("Signatures", 270)); (("A", 1368), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2403)]), 0, (("src/signatures.mli", 561, 21160, 21185), ("src/signatures.mli", 561, 21160, 21198), 0), 0, Tag1 ("Signatures", 271)); (("P", 1369), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2404)]), 0, (("src/signatures.mli", 561, 21160, 21199), ("src/signatures.mli", 561, 21160, 21212), 0), 0, Tag1 ("Signatures", 272)); (("Px", 1370), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2405)]), 0, (("src/signatures.mli", 561, 21160, 21213), ("src/signatures.mli", 561, 21160, 21227), 0), 0, Tag1 ("Signatures", 273)); (("Sh", 1371), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2406)]), 0, (("src/signatures.mli", 562, 21228, 21232), ("src/signatures.mli", 562, 21228, 21246), 0), 0, Tag1 ("Signatures", 274)); (("T", 1372), ([(Tag3 (Tag1 ((("Tags", 2696)), "t"), 0, (0)), 100000000, 0, -2407)]), 0, (("src/signatures.mli", 562, 21228, 21247), ("src/signatures.mli", 562, 21228, 21260), 0), 0, Tag1 ("Signatures", 275)); (("V", 1373), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2408)]), 0, (("src/signatures.mli", 562, 21228, 21261), ("src/signatures.mli", 562, 21228, 21274), 0), 0, Tag1 ("Signatures", 276)); (("Quote", 1374), ([(Tag3 ((("spec", 2723)), 0, (0)), 100000000, 0, -2409)]), 0, (("src/signatures.mli", 562, 21228, 21275), ("src/signatures.mli", 562, 21228, 21290), 0), 0, Tag1 ("Signatures", 277))], 0), 1, ((Tag3 (Tag1 ((("Command", 2697)), "spec"), 0, (0)), 100000000, 0, -2400)), 0, 0, 0, 0, (("src/signatures.mli", 560, 21132, 21134), ("src/signatures.mli", 562, 21228, 21290), 0), 0, 0, 0, Tag1 ("Signatures", 264)), 2, 0); (("/", 2724), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 2695)), "t"), 0, (0)), 100000000, 0, -2399), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 2695)), "t"), 0, (0)), 100000000, 0, -2398), (Tag3 (Tag1 ((("Pathname", 2695)), "t"), 0, (0)), 100000000, 0, -2397), 0), 100000000, 0, -2396), 0), 100000000, 0, -2395), 0, (("src/signatures.mli", 565, 21342, 21344), ("src/signatures.mli", 565, 21342, 21394), 0), 0, Tag1 ("Signatures", 278)), 0); (("-.-", 2725), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 2695)), "t"), 0, (0)), 100000000, 0, -2394), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2393), (Tag3 (Tag1 ((("Pathname", 2695)), "t"), 0, (0)), 100000000, 0, -2392), 0), 100000000, 0, -2391), 0), 100000000, 0, -2390), 0, (("src/signatures.mli", 568, 21471, 21473), ("src/signatures.mli", 568, 21471, 21521), 0), 0, Tag1 ("Signatures", 279)), 0); (("++", 2726), ((Tag1 (0, (Tag3 (Tag1 ((("Tags", 2696)), "t"), 0, (0)), 100000000, 0, -2389), (Tag1 (0, (Tag3 (Tag1 ((("Tags", 2696)), "elt"), 0, (0)), 100000000, 0, -2388), (Tag3 (Tag1 ((("Tags", 2696)), "t"), 0, (0)), 100000000, 0, -2387), 0), 100000000, 0, -2386), 0), 100000000, 0, -2385), 0, (("src/signatures.mli", 571, 21588, 21590), ("src/signatures.mli", 571, 21588, 21631), 0), 0, Tag1 ("Signatures", 280)), 0); (("--", 2727), ((Tag1 (0, (Tag3 (Tag1 ((("Tags", 2696)), "t"), 0, (0)), 100000000, 0, -2384), (Tag1 (0, (Tag3 (Tag1 ((("Tags", 2696)), "elt"), 0, (0)), 100000000, 0, -2383), (Tag3 (Tag1 ((("Tags", 2696)), "t"), 0, (0)), 100000000, 0, -2382), 0), 100000000, 0, -2381), 0), 100000000, 0, -2380), 0, (("src/signatures.mli", 574, 21701, 21703), ("src/signatures.mli", 574, 21701, 21744), 0), 0, Tag1 ("Signatures", 281)), 0); (("+++", 2728), ((Tag1 (0, (Tag3 (Tag1 ((("Tags", 2696)), "t"), 0, (0)), 100000000, 0, -2379), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("Tags", 2696)), "elt"), 0, (0)), 100000000, 0, -2378)], (0)), 100000000, 0, -2377), (Tag3 (Tag1 ((("Tags", 2696)), "t"), 0, (0)), 100000000, 0, -2376), 0), 100000000, 0, -2375), 0), 100000000, 0, -2374), 0, (("src/signatures.mli", 578, 21864, 21866), ("src/signatures.mli", 578, 21864, 21915), 0), 0, Tag1 ("Signatures", 282)), 0); (("---", 2729), ((Tag1 (0, (Tag3 (Tag1 ((("Tags", 2696)), "t"), 0, (0)), 100000000, 0, -2373), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("Tags", 2696)), "elt"), 0, (0)), 100000000, 0, -2372)], (0)), 100000000, 0, -2371), (Tag3 (Tag1 ((("Tags", 2696)), "t"), 0, (0)), 100000000, 0, -2370), 0), 100000000, 0, -2369), 0), 100000000, 0, -2368), 0, (("src/signatures.mli", 582, 22038, 22040), ("src/signatures.mli", 582, 22038, 22089), 0), 0, Tag1 ("Signatures", 283)), 0); Tag1 (("env", 2730), (0, 0, 0, 1, ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 2695)), "t"), 0, (0)), 100000000, 0, -2367), (Tag3 (Tag1 ((("Pathname", 2695)), "t"), 0, (0)), 100000000, 0, -2366), 0), 100000000, 0, -2365)), 0, 0, 0, 0, (("src/signatures.mli", 598, 22801, 22803), ("src/signatures.mli", 598, 22801, 22838), 0), 0, 0, 0, Tag1 ("Signatures", 284)), 1, 0); Tag1 (("builder", 2731), (0, 0, 0, 1, ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Pathname", 2695)), "t"), 0, (0)), 100000000, 0, -2364)], (0)), 100000000, 0, -2363)], (0)), 100000000, 0, -2362), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Outcome", 2698)), "t"), [(Tag3 (Tag1 ((("Pathname", 2695)), "t"), 0, (0)), 100000000, 0, -2360); (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -2361)], (0)), 100000000, 0, -2359)], (0)), 100000000, 0, -2358), 0), 100000000, 0, -2357)), 0, 0, 0, 0, (("src/signatures.mli", 614, 23547, 23549), ("src/signatures.mli", 614, 23547, 23620), 0), 0, 0, 0, Tag1 ("Signatures", 285)), 1, 0); Tag1 (("action", 2732), (0, 0, 0, 1, ((Tag1 (0, (Tag3 ((("env", 2730)), 0, (0)), 100000000, 0, -2356), (Tag1 (0, (Tag3 ((("builder", 2731)), 0, (0)), 100000000, 0, -2355), (Tag3 (Tag1 ((("Command", 2697)), "t"), 0, (0)), 100000000, 0, -2354), 0), 100000000, 0, -2353), 0), 100000000, 0, -2352)), 0, 0, 0, 0, (("src/signatures.mli", 654, 25151, 25153), ("src/signatures.mli", 654, 25151, 25194), 0), 0, 0, 0, Tag1 ("Signatures", 286)), 1, 0); (("rule", 2733), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2351), (Tag1 (Tag1 ("tags"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2350)], (0)), 100000000, 0, -2349)], (0)), 100000000, 0, -2348), (Tag1 (Tag1 ("prods"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2347)], (0)), 100000000, 0, -2346)], (0)), 100000000, 0, -2345), (Tag1 (Tag1 ("deps"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2344)], (0)), 100000000, 0, -2343)], (0)), 100000000, 0, -2342), (Tag1 (Tag1 ("prod"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2341)], (0)), 100000000, 0, -2340), (Tag1 (Tag1 ("dep"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2339)], (0)), 100000000, 0, -2338), (Tag1 (Tag1 ("stamp"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2337)], (0)), 100000000, 0, -2336), (Tag1 (Tag1 ("insert"), (Tag3 ((Tag3 ("option", 10)), [(Tag8 (([("after", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2334)))); ("before", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2335)))); ("bottom", (0)); ("top", (0))], (0, 100000000, 0, -2333), 1, 0, 0)), 100000000, 0, -2332)], (0)), 100000000, 0, -2331), (Tag1 (Tag1 ("doc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2330)], (0)), 100000000, 0, -2329), (Tag1 (0, (Tag3 ((("action", 2732)), 0, (0)), 100000000, 0, -2328), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2327), 0), 100000000, 0, -2326), 0), 100000000, 0, -2325), 0), 100000000, 0, -2324), 0), 100000000, 0, -2323), 0), 100000000, 0, -2322), 0), 100000000, 0, -2321), 0), 100000000, 0, -2320), 0), 100000000, 0, -2319), 0), 100000000, 0, -2318), 0), 100000000, 0, -2317), 0, (("src/signatures.mli", 715, 27895, 27897), ("src/signatures.mli", 724, 28144, 28162), 0), 0, Tag1 ("Signatures", 287)), 0); (("copy_rule", 2734), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2316), (Tag1 (Tag1 ("insert"), (Tag3 ((Tag3 ("option", 10)), [(Tag8 (([("after", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2314)))); ("before", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2315)))); ("bottom", (0)); ("top", (0))], (0, 100000000, 0, -2313), 1, 0, 0)), 100000000, 0, -2312)], (0)), 100000000, 0, -2311), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2310), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2309), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2308), 0), 100000000, 0, -2307), 0), 100000000, 0, -2306), 0), 100000000, 0, -2305), 0), 100000000, 0, -2304), 0, (("src/signatures.mli", 727, 28217, 28219), ("src/signatures.mli", 729, 28316, 28344), 0), 0, Tag1 ("Signatures", 288)), 0); (("clear_rules", 2735), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2303), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2302), 0), 100000000, 0, -2301), 0, (("src/signatures.mli", 732, 28407, 28409), ("src/signatures.mli", 732, 28407, 28439), 0), 0, Tag1 ("Signatures", 289)), 0); (("dep", 2736), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Tags", 2696)), "elt"), 0, (0)), 100000000, 0, -2300)], (0)), 100000000, 0, -2299), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Pathname", 2695)), "t"), 0, (0)), 100000000, 0, -2298)], (0)), 100000000, 0, -2297), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2296), 0), 100000000, 0, -2295), 0), 100000000, 0, -2294), 0, (("src/signatures.mli", 737, 28640, 28642), ("src/signatures.mli", 737, 28640, 28692), 0), 0, Tag1 ("Signatures", 290)), 0); (("pdep", 2737), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Tags", 2696)), "elt"), 0, (0)), 100000000, 0, -2293)], (0)), 100000000, 0, -2292), (Tag1 (0, (Tag3 (Tag1 ((("Tags", 2696)), "elt"), 0, (0)), 100000000, 0, -2291), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2290), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Pathname", 2695)), "t"), 0, (0)), 100000000, 0, -2289)], (0)), 100000000, 0, -2288), 0), 100000000, 0, -2287), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2286), 0), 100000000, 0, -2285), 0), 100000000, 0, -2284), 0), 100000000, 0, -2283), 0, (("src/signatures.mli", 747, 29122, 29124), ("src/signatures.mli", 747, 29122, 29199), 0), 0, Tag1 ("Signatures", 291)), 0); (("flag", 2738), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Tags", 2696)), "elt"), 0, (0)), 100000000, 0, -2282)], (0)), 100000000, 0, -2281), (Tag1 (0, (Tag3 (Tag1 ((("Command", 2697)), "spec"), 0, (0)), 100000000, 0, -2280), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2279), 0), 100000000, 0, -2278), 0), 100000000, 0, -2277), 0, (("src/signatures.mli", 753, 29453, 29455), ("src/signatures.mli", 753, 29453, 29503), 0), 0, Tag1 ("Signatures", 292)), 0); (("pflag", 2739), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Tags", 2696)), "elt"), 0, (0)), 100000000, 0, -2276)], (0)), 100000000, 0, -2275), (Tag1 (0, (Tag3 (Tag1 ((("Tags", 2696)), "elt"), 0, (0)), 100000000, 0, -2274), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2273), (Tag3 (Tag1 ((("Command", 2697)), "spec"), 0, (0)), 100000000, 0, -2272), 0), 100000000, 0, -2271), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2270), 0), 100000000, 0, -2269), 0), 100000000, 0, -2268), 0), 100000000, 0, -2267), 0, (("src/signatures.mli", 762, 29825, 29827), ("src/signatures.mli", 762, 29825, 29900), 0), 0, Tag1 ("Signatures", 293)), 0); (("flag_and_dep", 2740), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Tags", 2696)), "elt"), 0, (0)), 100000000, 0, -2266)], (0)), 100000000, 0, -2265), (Tag1 (0, (Tag3 (Tag1 ((("Command", 2697)), "spec"), 0, (0)), 100000000, 0, -2264), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2263), 0), 100000000, 0, -2262), 0), 100000000, 0, -2261), 0, (("src/signatures.mli", 770, 30255, 30257), ("src/signatures.mli", 770, 30255, 30313), 0), 0, Tag1 ("Signatures", 294)), 0); (("pflag_and_dep", 2741), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Tags", 2696)), "elt"), 0, (0)), 100000000, 0, -2260)], (0)), 100000000, 0, -2259), (Tag1 (0, (Tag3 (Tag1 ((("Tags", 2696)), "elt"), 0, (0)), 100000000, 0, -2258), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2257), (Tag3 (Tag1 ((("Command", 2697)), "spec"), 0, (0)), 100000000, 0, -2256), 0), 100000000, 0, -2255), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2254), 0), 100000000, 0, -2253), 0), 100000000, 0, -2252), 0), 100000000, 0, -2251), 0, (("src/signatures.mli", 774, 30406, 30408), ("src/signatures.mli", 775, 30457, 30493), 0), 0, Tag1 ("Signatures", 295)), 0); (("mark_tag_used", 2742), ((Tag1 (0, (Tag3 (Tag1 ((("Tags", 2696)), "elt"), 0, (0)), 100000000, 0, -2250), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2249), 0), 100000000, 0, -2248), 0, (("src/signatures.mli", 788, 30948, 30950), ("src/signatures.mli", 788, 30948, 30986), 0), 0, Tag1 ("Signatures", 296)), 0); (("non_dependency", 2743), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 2695)), "t"), 0, (0)), 100000000, 0, -2247), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2246), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2245), 0), 100000000, 0, -2244), 0), 100000000, 0, -2243), 0, (("src/signatures.mli", 795, 31192, 31194), ("src/signatures.mli", 795, 31192, 31243), 0), 0, Tag1 ("Signatures", 297)), 0); (("use_lib", 2744), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 2695)), "t"), 0, (0)), 100000000, 0, -2242), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 2695)), "t"), 0, (0)), 100000000, 0, -2241), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2240), 0), 100000000, 0, -2239), 0), 100000000, 0, -2238), 0, (("src/signatures.mli", 798, 31284, 31286), ("src/signatures.mli", 798, 31284, 31332), 0), 0, Tag1 ("Signatures", 298)), 0); (("ocaml_lib", 2745), ((Tag1 (Tag1 ("extern"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2237)], (0)), 100000000, 0, -2236), (Tag1 (Tag1 ("byte"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2235)], (0)), 100000000, 0, -2234), (Tag1 (Tag1 ("native"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2233)], (0)), 100000000, 0, -2232), (Tag1 (Tag1 ("dir"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("Pathname", 2695)), "t"), 0, (0)), 100000000, 0, -2231)], (0)), 100000000, 0, -2230), (Tag1 (Tag1 ("tag_name"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2229)], (0)), 100000000, 0, -2228), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 2695)), "t"), 0, (0)), 100000000, 0, -2227), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2226), 0), 100000000, 0, -2225), 0), 100000000, 0, -2224), 0), 100000000, 0, -2223), 0), 100000000, 0, -2222), 0), 100000000, 0, -2221), 0), 100000000, 0, -2220), 0, (("src/signatures.mli", 815, 32136, 32138), ("src/signatures.mli", 821, 32259, 32281), 0), 0, Tag1 ("Signatures", 299)), 0); (("expand_module", 2746), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Pathname", 2695)), "t"), 0, (0)), 100000000, 0, -2219)], (0)), 100000000, 0, -2218), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 2695)), "t"), 0, (0)), 100000000, 0, -2217), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2216)], (0)), 100000000, 0, -2215), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Pathname", 2695)), "t"), 0, (0)), 100000000, 0, -2214)], (0)), 100000000, 0, -2213), 0), 100000000, 0, -2212), 0), 100000000, 0, -2211), 0), 100000000, 0, -2210), 0, (("src/signatures.mli", 829, 32592, 32594), ("src/signatures.mli", 830, 32614, 32681), 0), 0, Tag1 ("Signatures", 300)), 0); (("string_list_of_file", 2747), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 2695)), "t"), 0, (0)), 100000000, 0, -2209), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2208)], (0)), 100000000, 0, -2207), 0), 100000000, 0, -2206), 0, (("src/signatures.mli", 834, 32818, 32820), ("src/signatures.mli", 834, 32818, 32871), 0), 0, Tag1 ("Signatures", 301)), 0); (("module_name_of_pathname", 2748), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 2695)), "t"), 0, (0)), 100000000, 0, -2205), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2204), 0), 100000000, 0, -2203), 0, (("src/signatures.mli", 838, 33024, 33026), ("src/signatures.mli", 838, 33024, 33076), 0), 0, Tag1 ("Signatures", 302)), 0); (("mv", 2749), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 2695)), "t"), 0, (0)), 100000000, 0, -2202), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 2695)), "t"), 0, (0)), 100000000, 0, -2201), (Tag3 (Tag1 ((("Command", 2697)), "t"), 0, (0)), 100000000, 0, -2200), 0), 100000000, 0, -2199), 0), 100000000, 0, -2198), 0, (("src/signatures.mli", 841, 33108, 33110), ("src/signatures.mli", 841, 33108, 33156), 0), 0, Tag1 ("Signatures", 303)), 0); (("cp", 2750), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 2695)), "t"), 0, (0)), 100000000, 0, -2197), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 2695)), "t"), 0, (0)), 100000000, 0, -2196), (Tag3 (Tag1 ((("Command", 2697)), "t"), 0, (0)), 100000000, 0, -2195), 0), 100000000, 0, -2194), 0), 100000000, 0, -2193), 0, (("src/signatures.mli", 844, 33188, 33190), ("src/signatures.mli", 844, 33188, 33236), 0), 0, Tag1 ("Signatures", 304)), 0); (("ln_f", 2751), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 2695)), "t"), 0, (0)), 100000000, 0, -2192), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 2695)), "t"), 0, (0)), 100000000, 0, -2191), (Tag3 (Tag1 ((("Command", 2697)), "t"), 0, (0)), 100000000, 0, -2190), 0), 100000000, 0, -2189), 0), 100000000, 0, -2188), 0, (("src/signatures.mli", 847, 33271, 33273), ("src/signatures.mli", 847, 33271, 33321), 0), 0, Tag1 ("Signatures", 305)), 0); (("ln_s", 2752), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 2695)), "t"), 0, (0)), 100000000, 0, -2187), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 2695)), "t"), 0, (0)), 100000000, 0, -2186), (Tag3 (Tag1 ((("Command", 2697)), "t"), 0, (0)), 100000000, 0, -2185), 0), 100000000, 0, -2184), 0), 100000000, 0, -2183), 0, (("src/signatures.mli", 850, 33356, 33358), ("src/signatures.mli", 850, 33356, 33406), 0), 0, Tag1 ("Signatures", 306)), 0); (("rm_f", 2753), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 2695)), "t"), 0, (0)), 100000000, 0, -2182), (Tag3 (Tag1 ((("Command", 2697)), "t"), 0, (0)), 100000000, 0, -2181), 0), 100000000, 0, -2180), 0, (("src/signatures.mli", 853, 33441, 33443), ("src/signatures.mli", 853, 33441, 33477), 0), 0, Tag1 ("Signatures", 307)), 0); (("chmod", 2754), ((Tag1 (0, (Tag3 (Tag1 ((("Command", 2697)), "spec"), 0, (0)), 100000000, 0, -2179), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 2695)), "t"), 0, (0)), 100000000, 0, -2178), (Tag3 (Tag1 ((("Command", 2697)), "t"), 0, (0)), 100000000, 0, -2177), 0), 100000000, 0, -2176), 0), 100000000, 0, -2175), 0, (("src/signatures.mli", 856, 33532, 33534), ("src/signatures.mli", 856, 33532, 33585), 0), 0, Tag1 ("Signatures", 308)), 0); (("cmp", 2755), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 2695)), "t"), 0, (0)), 100000000, 0, -2174), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 2695)), "t"), 0, (0)), 100000000, 0, -2173), (Tag3 (Tag1 ((("Command", 2697)), "t"), 0, (0)), 100000000, 0, -2172), 0), 100000000, 0, -2171), 0), 100000000, 0, -2170), 0, (("src/signatures.mli", 859, 33638, 33640), ("src/signatures.mli", 859, 33638, 33687), 0), 0, Tag1 ("Signatures", 309)), 0); (("hide_package_contents", 2756), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2169), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2168), 0), 100000000, 0, -2167), 0, (("src/signatures.mli", 865, 33897, 33899), ("src/signatures.mli", 865, 33897, 33941), 0), 0, Tag1 ("Signatures", 310)), 0); (("tag_file", 2757), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 2695)), "t"), 0, (0)), 100000000, 0, -2166), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Tags", 2696)), "elt"), 0, (0)), 100000000, 0, -2165)], (0)), 100000000, 0, -2164), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2163), 0), 100000000, 0, -2162), 0), 100000000, 0, -2161), 0, (("src/signatures.mli", 873, 34323, 34325), ("src/signatures.mli", 873, 34323, 34375), 0), 0, Tag1 ("Signatures", 311)), 0); (("tag_any", 2758), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Tags", 2696)), "elt"), 0, (0)), 100000000, 0, -2160)], (0)), 100000000, 0, -2159), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2158), 0), 100000000, 0, -2157), 0, (("src/signatures.mli", 876, 34439, 34441), ("src/signatures.mli", 876, 34439, 34476), 0), 0, Tag1 ("Signatures", 312)), 0); (("tags_of_pathname", 2759), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 2695)), "t"), 0, (0)), 100000000, 0, -2156), (Tag3 (Tag1 ((("Tags", 2696)), "t"), 0, (0)), 100000000, 0, -2155), 0), 100000000, 0, -2154), 0, (("src/signatures.mli", 879, 34547, 34549), ("src/signatures.mli", 879, 34547, 34592), 0), 0, Tag1 ("Signatures", 313)), 0); (("run_and_read", 2760), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2153), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2152), 0), 100000000, 0, -2151), 0, (("src/signatures.mli", 882, 34662, 34664), ("src/signatures.mli", 882, 34662, 34699), 0), 0, Tag1 ("Signatures", 314)), 0); Tag1 (("hook", 2761), (0, 0, Tag1 ([(("Before_hygiene", 1413), (0), 0, (("src/signatures.mli", 888, 34903, 34907), ("src/signatures.mli", 888, 34903, 34923), 0), 0, Tag1 ("Signatures", 316)); (("After_hygiene", 1414), (0), 0, (("src/signatures.mli", 889, 34924, 34928), ("src/signatures.mli", 889, 34924, 34943), 0), 0, Tag1 ("Signatures", 317)); (("Before_options", 1415), (0), 0, (("src/signatures.mli", 890, 34944, 34948), ("src/signatures.mli", 890, 34944, 34964), 0), 0, Tag1 ("Signatures", 318)); (("After_options", 1416), (0), 0, (("src/signatures.mli", 891, 34965, 34969), ("src/signatures.mli", 891, 34965, 34984), 0), 0, Tag1 ("Signatures", 319)); (("Before_rules", 1417), (0), 0, (("src/signatures.mli", 892, 34985, 34989), ("src/signatures.mli", 892, 34985, 35003), 0), 0, Tag1 ("Signatures", 320)); (("After_rules", 1418), (0), 0, (("src/signatures.mli", 893, 35004, 35008), ("src/signatures.mli", 893, 35004, 35021), 0), 0, Tag1 ("Signatures", 321))], 0), 1, 0, 0, 0, 0, 0, (("src/signatures.mli", 887, 34889, 34891), ("src/signatures.mli", 893, 35004, 35021), 0), 0, 1, 0, Tag1 ("Signatures", 315)), 1, 0); (("dispatch", 2762), ((Tag1 (0, (Tag1 (0, (Tag3 ((("hook", 2761)), 0, (0)), 100000000, 0, -2150), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2149), 0), 100000000, 0, -2148), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -2147), 0), 100000000, 0, -2146), 0, (("src/signatures.mli", 898, 35202, 35204), ("src/signatures.mli", 898, 35202, 35241), 0), 0, Tag1 ("Signatures", 322)), 0)])), 0, (("src/signatures.mli", 539, 20410, 20410), ("src/signatures.mli", 899, 35242, 35245), 0), Tag1 ("Signatures", 323)), 0)], "Signatures", [("Signatures", ("]N\166#\004\219k\209\"\025\196b\129\194\001\133")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Arg", ("\024%=\206\198p\149Y\007\004\216,&\254#\207")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

  end

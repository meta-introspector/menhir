type t
val sexp_of_t : t -> Sexplib0.Sexp.t
module Tid : sig type t val of_string : string -> t end
module Vid : sig type t val of_string : string -> t end
module Location : sig type t val of_string : string -> t end
module Uuid :
  sig type t val of_string : string -> t val to_string : t -> string end
type group
val group : Location.t -> (Tid.t * Vid.t list * t) list -> group
val tuple : t list -> t
val record : (string * t) list -> t
val variant : (string * t list) list -> t
type poly_variant_row
val constr : string -> t option -> poly_variant_row
val inherit_ : Location.t -> t -> poly_variant_row
val poly_variant : Location.t -> poly_variant_row list -> t
val rec_app : Tid.t -> t list -> t
val top_app : group -> Tid.t -> t list -> t
val var : Location.t -> Vid.t -> t
val basetype : Uuid.t -> t list -> t
val annotate : Uuid.t -> t -> t
module Stable :
  sig
    module V1 :
      sig
        type nonrec t = t
        val equal : t Base__Ppx_compare_lib.equal
        val t_of_sexp : Sexplib0__.Sexp.t -> t
        val sexp_of_t : t -> Sexplib0__.Sexp.t
      end
  end
module Digest :
  sig
    type t
    val compare : t Base__Ppx_compare_lib.compare
    val t_of_sexp : Sexplib0__.Sexp.t -> t
    val sexp_of_t : t -> Sexplib0__.Sexp.t
    val to_hex : t -> string
    val to_md5 : t -> Md5_lib.t
    val of_md5 : Md5_lib.t -> t
  end
module Expert :
  sig
    module Sorted_table :
      sig
        type 'a t
        val compare :
          'a Base__Ppx_compare_lib.compare ->
          'a t Base__Ppx_compare_lib.compare
        val sexp_of_t : ('a -> Sexplib0.Sexp.t) -> 'a t -> Sexplib0.Sexp.t
        val expose : 'a t -> (string * 'a) list
      end
    module Canonical_exp_constructor :
      sig
        type 'a t =
            Annotate of Uuid.t * 'a
          | Base of Uuid.t * 'a list
          | Tuple of 'a list
          | Record of (string * 'a) list
          | Variant of (string * 'a list) list
          | Poly_variant of 'a option Sorted_table.t
          | Application of 'a * 'a list
          | Rec_app of int * 'a list
          | Var of int
        val compare :
          'a Base__Ppx_compare_lib.compare ->
          'a t Base__Ppx_compare_lib.compare
        val sexp_of_t : ('a -> Sexplib0.Sexp.t) -> 'a t -> Sexplib0.Sexp.t
      end
    module Canonical :
      sig
        module Exp1 :
          sig
            type t0 = Exp of t0 Canonical_exp_constructor.t
            val compare_t0 : t0 -> t0 -> int
            val sexp_of_t0 : t0 -> Sexplib0.Sexp.t
          end
        type t = Exp1.t0
        val compare : t Base__Ppx_compare_lib.compare
        val sexp_of_t : t -> Sexplib0.Sexp.t
      end
  end
module Canonical :
  sig
    type t = Expert.Canonical.t
    val compare : t Base__Ppx_compare_lib.compare
    val sexp_of_t : t -> Sexplib0.Sexp.t
    val to_string_hum : t -> string
    val to_digest : t -> Digest.t
    module Exp : sig type t end
    module Def : sig type t end
    module Create :
      sig
        val annotate : Uuid.t -> Exp.t -> Exp.t
        val basetype : Uuid.t -> Exp.t list -> Exp.t
        val tuple : Exp.t list -> Exp.t
        val poly_variant :
          Location.t -> (string * Exp.t option) list -> Exp.t
        val var : int -> Exp.t
        val apply : Def.t -> Exp.t list -> Exp.t
        val recurse : int -> Exp.t list -> Exp.t
        val define : Exp.t -> Def.t
        val record : (string * Exp.t) list -> Exp.t
        val variant : (string * Exp.t list) list -> Exp.t
        val create : Exp.t -> t
      end
  end
val eval : t -> Canonical.t
val eval_to_digest : t -> Digest.t
val eval_to_digest_string : t -> string
("DEBUG:rule", [Tag1 (("t", 536), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("shape/src/bin_shape.mli", 7, 290, 290), ("shape/src/bin_shape.mli", 7, 290, 317), 0), [(("deriving", (("shape/src/bin_shape.mli", 7, 290, 300), ("shape/src/bin_shape.mli", 7, 290, 308), 0)), ([([(((("sexp_of"), (("shape/src/bin_shape.mli", 7, 290, 309), ("shape/src/bin_shape.mli", 7, 290, 316), 0))), (("shape/src/bin_shape.mli", 7, 290, 309), ("shape/src/bin_shape.mli", 7, 290, 316), 0), 0, 0)], (("shape/src/bin_shape.mli", 7, 290, 309), ("shape/src/bin_shape.mli", 7, 290, 316), 0))]), (("shape/src/bin_shape.mli", 7, 290, 297), ("shape/src/bin_shape.mli", 7, 290, 317), 0))], 0, 0, Tag1 ("Bin_shape", 0)), 1, 0); (("sexp_of_t", 537), ((Tag1 (0, (Tag3 ((("t", 536)), 0, (0)), 100000000, 0, -87), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -86), 0), 100000000, 0, -85), 0, (("shape/src/bin_shape.mli", 7, 290, 290), ("shape/src/bin_shape.mli", 7, 290, 317), 0), 0, Tag1 ("Bin_shape", 1)), 0); Tag3 (("Tid", 538), 0, (Tag1 ([Tag1 (("t", 564), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("shape/src/bin_shape.mli", 14, 459, 461), ("shape/src/bin_shape.mli", 14, 459, 467), 0), 0, 0, 0, Tag1 ("Bin_shape", 2)), 1, 0); (("of_string", 565), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -90), (Tag3 ((("t", 564)), 0, (0)), 100000000, 0, -89), 0), 100000000, 0, -88), 0, (("shape/src/bin_shape.mli", 16, 469, 471), ("shape/src/bin_shape.mli", 16, 469, 498), 0), 0, Tag1 ("Bin_shape", 3)), 0)]), 0, (("shape/src/bin_shape.mli", 12, 430, 430), ("shape/src/bin_shape.mli", 17, 499, 502), 0), Tag1 ("Bin_shape", 4)), 0, 0); Tag3 (("Vid", 539), 0, (Tag1 ([Tag1 (("t", 566), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("shape/src/bin_shape.mli", 21, 534, 536), ("shape/src/bin_shape.mli", 21, 534, 542), 0), 0, 0, 0, Tag1 ("Bin_shape", 5)), 1, 0); (("of_string", 567), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -93), (Tag3 ((("t", 566)), 0, (0)), 100000000, 0, -92), 0), 100000000, 0, -91), 0, (("shape/src/bin_shape.mli", 23, 544, 546), ("shape/src/bin_shape.mli", 23, 544, 573), 0), 0, Tag1 ("Bin_shape", 6)), 0)]), 0, (("shape/src/bin_shape.mli", 19, 504, 504), ("shape/src/bin_shape.mli", 24, 574, 577), 0), Tag1 ("Bin_shape", 7)), 0, 0); Tag3 (("Location", 540), 0, (Tag1 ([Tag1 (("t", 568), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("shape/src/bin_shape.mli", 28, 691, 693), ("shape/src/bin_shape.mli", 28, 691, 699), 0), 0, 0, 0, Tag1 ("Bin_shape", 8)), 1, 0); (("of_string", 569), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -96), (Tag3 ((("t", 568)), 0, (0)), 100000000, 0, -95), 0), 100000000, 0, -94), 0, (("shape/src/bin_shape.mli", 30, 701, 703), ("shape/src/bin_shape.mli", 30, 701, 730), 0), 0, Tag1 ("Bin_shape", 9)), 0)]), 0, (("shape/src/bin_shape.mli", 27, 669, 669), ("shape/src/bin_shape.mli", 31, 731, 734), 0), Tag1 ("Bin_shape", 10)), 0, 0); Tag3 (("Uuid", 541), 0, (Tag1 ([Tag1 (("t", 570), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("shape/src/bin_shape.mli", 35, 808, 810), ("shape/src/bin_shape.mli", 35, 808, 816), 0), 0, 0, 0, Tag1 ("Bin_shape", 11)), 1, 0); (("of_string", 571), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -102), (Tag3 ((("t", 570)), 0, (0)), 100000000, 0, -101), 0), 100000000, 0, -100), 0, (("shape/src/bin_shape.mli", 41, 1095, 1097), ("shape/src/bin_shape.mli", 41, 1095, 1124), 0), 0, Tag1 ("Bin_shape", 12)), 0); (("to_string", 572), ((Tag1 (0, (Tag3 ((("t", 570)), 0, (0)), 100000000, 0, -99), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -98), 0), 100000000, 0, -97), 0, (("shape/src/bin_shape.mli", 43, 1126, 1128), ("shape/src/bin_shape.mli", 43, 1126, 1155), 0), 0, Tag1 ("Bin_shape", 13)), 0)]), 0, (("shape/src/bin_shape.mli", 34, 790, 790), ("shape/src/bin_shape.mli", 44, 1156, 1159), 0), Tag1 ("Bin_shape", 14)), 0, 0); Tag1 (("group", 542), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("shape/src/bin_shape.mli", 47, 1213, 1213), ("shape/src/bin_shape.mli", 47, 1213, 1223), 0), 0, 0, 0, Tag1 ("Bin_shape", 15)), 1, 0); (("group", 543), ((Tag1 (0, (Tag3 (Tag1 ((("Location", 540)), "t"), 0, (0)), 100000000, 0, -84), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((("Tid", 538)), "t"), 0, (0)), 100000000, 0, -80); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Vid", 539)), "t"), 0, (0)), 100000000, 0, -82)], (0)), 100000000, 0, -81); (Tag3 ((("t", 536)), 0, (0)), 100000000, 0, -83)]), 100000000, 0, -79)], (0)), 100000000, 0, -78), (Tag3 ((("group", 542)), 0, (0)), 100000000, 0, -77), 0), 100000000, 0, -76), 0), 100000000, 0, -75), 0, (("shape/src/bin_shape.mli", 50, 1299, 1299), ("shape/src/bin_shape.mli", 50, 1299, 1363), 0), 0, Tag1 ("Bin_shape", 16)), 0); (("tuple", 544), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 536)), 0, (0)), 100000000, 0, -74)], (0)), 100000000, 0, -73), (Tag3 ((("t", 536)), 0, (0)), 100000000, 0, -72), 0), 100000000, 0, -71), 0, (("shape/src/bin_shape.mli", 52, 1365, 1365), ("shape/src/bin_shape.mli", 52, 1365, 1388), 0), 0, Tag1 ("Bin_shape", 17)), 0); (("record", 545), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -69); (Tag3 ((("t", 536)), 0, (0)), 100000000, 0, -70)]), 100000000, 0, -68)], (0)), 100000000, 0, -67), (Tag3 ((("t", 536)), 0, (0)), 100000000, 0, -66), 0), 100000000, 0, -65), 0, (("shape/src/bin_shape.mli", 53, 1389, 1389), ("shape/src/bin_shape.mli", 53, 1389, 1424), 0), 0, Tag1 ("Bin_shape", 18)), 0); (("variant", 546), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -62); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 536)), 0, (0)), 100000000, 0, -64)], (0)), 100000000, 0, -63)]), 100000000, 0, -61)], (0)), 100000000, 0, -60), (Tag3 ((("t", 536)), 0, (0)), 100000000, 0, -59), 0), 100000000, 0, -58), 0, (("shape/src/bin_shape.mli", 54, 1425, 1425), ("shape/src/bin_shape.mli", 54, 1425, 1466), 0), 0, Tag1 ("Bin_shape", 19)), 0); Tag1 (("poly_variant_row", 547), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("shape/src/bin_shape.mli", 56, 1468, 1468), ("shape/src/bin_shape.mli", 56, 1468, 1489), 0), 0, 0, 0, Tag1 ("Bin_shape", 20)), 1, 0); (("constr", 548), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -57), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 536)), 0, (0)), 100000000, 0, -56)], (0)), 100000000, 0, -55), (Tag3 ((("poly_variant_row", 547)), 0, (0)), 100000000, 0, -54), 0), 100000000, 0, -53), 0), 100000000, 0, -52), 0, (("shape/src/bin_shape.mli", 58, 1491, 1491), ("shape/src/bin_shape.mli", 58, 1491, 1542), 0), 0, Tag1 ("Bin_shape", 21)), 0); (("inherit_", 549), ((Tag1 (0, (Tag3 (Tag1 ((("Location", 540)), "t"), 0, (0)), 100000000, 0, -51), (Tag1 (0, (Tag3 ((("t", 536)), 0, (0)), 100000000, 0, -50), (Tag3 ((("poly_variant_row", 547)), 0, (0)), 100000000, 0, -49), 0), 100000000, 0, -48), 0), 100000000, 0, -47), 0, (("shape/src/bin_shape.mli", 59, 1543, 1543), ("shape/src/bin_shape.mli", 59, 1543, 1593), 0), 0, Tag1 ("Bin_shape", 22)), 0); (("poly_variant", 550), ((Tag1 (0, (Tag3 (Tag1 ((("Location", 540)), "t"), 0, (0)), 100000000, 0, -46), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("poly_variant_row", 547)), 0, (0)), 100000000, 0, -45)], (0)), 100000000, 0, -44), (Tag3 ((("t", 536)), 0, (0)), 100000000, 0, -43), 0), 100000000, 0, -42), 0), 100000000, 0, -41), 0, (("shape/src/bin_shape.mli", 60, 1594, 1594), ("shape/src/bin_shape.mli", 60, 1594, 1653), 0), 0, Tag1 ("Bin_shape", 23)), 0); (("rec_app", 551), ((Tag1 (0, (Tag3 (Tag1 ((("Tid", 538)), "t"), 0, (0)), 100000000, 0, -40), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 536)), 0, (0)), 100000000, 0, -39)], (0)), 100000000, 0, -38), (Tag3 ((("t", 536)), 0, (0)), 100000000, 0, -37), 0), 100000000, 0, -36), 0), 100000000, 0, -35), 0, (("shape/src/bin_shape.mli", 63, 1702, 1702), ("shape/src/bin_shape.mli", 63, 1702, 1736), 0), 0, Tag1 ("Bin_shape", 24)), 0); (("top_app", 552), ((Tag1 (0, (Tag3 ((("group", 542)), 0, (0)), 100000000, 0, -34), (Tag1 (0, (Tag3 (Tag1 ((("Tid", 538)), "t"), 0, (0)), 100000000, 0, -33), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 536)), 0, (0)), 100000000, 0, -32)], (0)), 100000000, 0, -31), (Tag3 ((("t", 536)), 0, (0)), 100000000, 0, -30), 0), 100000000, 0, -29), 0), 100000000, 0, -28), 0), 100000000, 0, -27), 0, (("shape/src/bin_shape.mli", 66, 1773, 1773), ("shape/src/bin_shape.mli", 66, 1773, 1816), 0), 0, Tag1 ("Bin_shape", 25)), 0); (("var", 553), ((Tag1 (0, (Tag3 (Tag1 ((("Location", 540)), "t"), 0, (0)), 100000000, 0, -26), (Tag1 (0, (Tag3 (Tag1 ((("Vid", 539)), "t"), 0, (0)), 100000000, 0, -25), (Tag3 ((("t", 536)), 0, (0)), 100000000, 0, -24), 0), 100000000, 0, -23), 0), 100000000, 0, -22), 0, (("shape/src/bin_shape.mli", 68, 1818, 1818), ("shape/src/bin_shape.mli", 68, 1818, 1852), 0), 0, Tag1 ("Bin_shape", 26)), 0); (("basetype", 554), ((Tag1 (0, (Tag3 (Tag1 ((("Uuid", 541)), "t"), 0, (0)), 100000000, 0, -21), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 536)), 0, (0)), 100000000, 0, -20)], (0)), 100000000, 0, -19), (Tag3 ((("t", 536)), 0, (0)), 100000000, 0, -18), 0), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("shape/src/bin_shape.mli", 72, 2017, 2017), ("shape/src/bin_shape.mli", 72, 2017, 2053), 0), 0, Tag1 ("Bin_shape", 27)), 0); (("annotate", 555), ((Tag1 (0, (Tag3 (Tag1 ((("Uuid", 541)), "t"), 0, (0)), 100000000, 0, -15), (Tag1 (0, (Tag3 ((("t", 536)), 0, (0)), 100000000, 0, -14), (Tag3 ((("t", 536)), 0, (0)), 100000000, 0, -13), 0), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("shape/src/bin_shape.mli", 77, 2246, 2246), ("shape/src/bin_shape.mli", 77, 2246, 2277), 0), 0, Tag1 ("Bin_shape", 28)), 0); Tag3 (("Stable", 556), 0, (Tag1 ([Tag3 (("V1", 573), 0, (Tag1 ([Tag1 (("t", 574), (0, 0, 0, 1, ((Tag3 ((("t", 536)), 0, (0)), 100000000, 0, -111)), 0, 0, 0, 0, (("shape/src/bin_shape.mli", 81, 2317, 2321), ("shape/src/bin_shape.mli", 81, 2317, 2363), 0), [(("deriving", (("shape/src/bin_shape.mli", 81, 2317, 2342), ("shape/src/bin_shape.mli", 81, 2317, 2350), 0)), ([([(Tag8 ([(((("equal"), (("shape/src/bin_shape.mli", 81, 2317, 2351), ("shape/src/bin_shape.mli", 81, 2317, 2356), 0))), (("shape/src/bin_shape.mli", 81, 2317, 2351), ("shape/src/bin_shape.mli", 81, 2317, 2356), 0), 0, 0); (((("sexp"), (("shape/src/bin_shape.mli", 81, 2317, 2358), ("shape/src/bin_shape.mli", 81, 2317, 2362), 0))), (("shape/src/bin_shape.mli", 81, 2317, 2358), ("shape/src/bin_shape.mli", 81, 2317, 2362), 0), 0, 0)]), (("shape/src/bin_shape.mli", 81, 2317, 2351), ("shape/src/bin_shape.mli", 81, 2317, 2362), 0), 0, 0)], (("shape/src/bin_shape.mli", 81, 2317, 2351), ("shape/src/bin_shape.mli", 81, 2317, 2362), 0))]), (("shape/src/bin_shape.mli", 81, 2317, 2339), ("shape/src/bin_shape.mli", 81, 2317, 2363), 0))], 0, 0, Tag1 ("Bin_shape", 29)), 0, 0); (("equal", 575), ((Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "equal"), [(Tag3 ((("t", 574)), 0, (0)), 100000000, 0, -110)], (0)), 100000000, 0, -109), 0, (("shape/src/bin_shape.mli", 81, 2317, 2321), ("shape/src/bin_shape.mli", 81, 2317, 2363), 0), 0, Tag1 ("Base__Ppx_compare_lib", 18)), 0); (("t_of_sexp", 576), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -108), (Tag3 ((("t", 574)), 0, (0)), 100000000, 0, -107), 0), 100000000, 0, -106), 0, (("shape/src/bin_shape.mli", 81, 2317, 2321), ("shape/src/bin_shape.mli", 81, 2317, 2363), 0), 0, Tag1 ("Sexplib0__Sexpable", 1)), 0); (("sexp_of_t", 577), ((Tag1 (0, (Tag3 ((("t", 574)), 0, (0)), 100000000, 0, -105), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -104), 0), 100000000, 0, -103), 0, (("shape/src/bin_shape.mli", 81, 2317, 2321), ("shape/src/bin_shape.mli", 81, 2317, 2363), 0), 0, Tag1 ("Sexplib0__Sexpable", 2)), 0)]), 0, (("shape/src/bin_shape.mli", 80, 2299, 2301), ("shape/src/bin_shape.mli", 82, 2364, 2369), 0), Tag1 ("Bin_shape", 32)), 0, 0)]), 0, (("shape/src/bin_shape.mli", 79, 2279, 2279), ("shape/src/bin_shape.mli", 83, 2370, 2373), 0), Tag1 ("Bin_shape", 33)), 0, 0); Tag3 (("Digest", 557), 0, (Tag1 ([Tag1 (("t", 578), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("shape/src/bin_shape.mli", 104, 3324, 3326), ("shape/src/bin_shape.mli", 104, 3324, 3359), 0), [(("deriving", (("shape/src/bin_shape.mli", 104, 3324, 3336), ("shape/src/bin_shape.mli", 104, 3324, 3344), 0)), ([([(Tag8 ([(((("compare"), (("shape/src/bin_shape.mli", 104, 3324, 3345), ("shape/src/bin_shape.mli", 104, 3324, 3352), 0))), (("shape/src/bin_shape.mli", 104, 3324, 3345), ("shape/src/bin_shape.mli", 104, 3324, 3352), 0), 0, 0); (((("sexp"), (("shape/src/bin_shape.mli", 104, 3324, 3354), ("shape/src/bin_shape.mli", 104, 3324, 3358), 0))), (("shape/src/bin_shape.mli", 104, 3324, 3354), ("shape/src/bin_shape.mli", 104, 3324, 3358), 0), 0, 0)]), (("shape/src/bin_shape.mli", 104, 3324, 3345), ("shape/src/bin_shape.mli", 104, 3324, 3358), 0), 0, 0)], (("shape/src/bin_shape.mli", 104, 3324, 3345), ("shape/src/bin_shape.mli", 104, 3324, 3358), 0))]), (("shape/src/bin_shape.mli", 104, 3324, 3333), ("shape/src/bin_shape.mli", 104, 3324, 3359), 0))], 0, 0, Tag1 ("Bin_shape", 34)), 1, 0); (("compare", 579), ((Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "compare"), [(Tag3 ((("t", 578)), 0, (0)), 100000000, 0, -128)], (0)), 100000000, 0, -127), 0, (("shape/src/bin_shape.mli", 104, 3324, 3326), ("shape/src/bin_shape.mli", 104, 3324, 3359), 0), 0, Tag1 ("Base__Ppx_compare_lib", 5)), 0); (("t_of_sexp", 580), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -126), (Tag3 ((("t", 578)), 0, (0)), 100000000, 0, -125), 0), 100000000, 0, -124), 0, (("shape/src/bin_shape.mli", 104, 3324, 3326), ("shape/src/bin_shape.mli", 104, 3324, 3359), 0), 0, Tag1 ("Sexplib0__Sexpable", 1)), 0); (("sexp_of_t", 581), ((Tag1 (0, (Tag3 ((("t", 578)), 0, (0)), 100000000, 0, -123), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -122), 0), 100000000, 0, -121), 0, (("shape/src/bin_shape.mli", 104, 3324, 3326), ("shape/src/bin_shape.mli", 104, 3324, 3359), 0), 0, Tag1 ("Sexplib0__Sexpable", 2)), 0); (("to_hex", 582), ((Tag1 (0, (Tag3 ((("t", 578)), 0, (0)), 100000000, 0, -120), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -119), 0), 100000000, 0, -118), 0, (("shape/src/bin_shape.mli", 106, 3361, 3363), ("shape/src/bin_shape.mli", 106, 3361, 3387), 0), 0, Tag1 ("Bin_shape", 37)), 0); (("to_md5", 583), ((Tag1 (0, (Tag3 ((("t", 578)), 0, (0)), 100000000, 0, -117), (Tag3 (Tag1 ((Tag2 ("Md5_lib")), "t"), 0, (0)), 100000000, 0, -116), 0), 100000000, 0, -115), 0, (("shape/src/bin_shape.mli", 107, 3388, 3390), ("shape/src/bin_shape.mli", 107, 3388, 3417), 0), 0, Tag1 ("Bin_shape", 38)), 0); (("of_md5", 584), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Md5_lib")), "t"), 0, (0)), 100000000, 0, -114), (Tag3 ((("t", 578)), 0, (0)), 100000000, 0, -113), 0), 100000000, 0, -112), 0, (("shape/src/bin_shape.mli", 108, 3418, 3420), ("shape/src/bin_shape.mli", 108, 3418, 3447), 0), 0, Tag1 ("Bin_shape", 39)), 0)]), 0, (("shape/src/bin_shape.mli", 103, 3304, 3304), ("shape/src/bin_shape.mli", 109, 3448, 3451), 0), Tag1 ("Bin_shape", 40)), 0, 0); Tag3 (("Expert", 558), 0, (Tag1 ([Tag3 (("Sorted_table", 585), 0, (Tag1 ([Tag1 (("t", 588), ([((("a")), 100000000, 0, -147)], 1, 0, 1, 0, [7], [2], 0, 0, (("shape/src/bin_shape.mli", 113, 3501, 3505), ("shape/src/bin_shape.mli", 113, 3501, 3544), 0), [(("deriving", (("shape/src/bin_shape.mli", 113, 3501, 3518), ("shape/src/bin_shape.mli", 113, 3501, 3526), 0)), ([([(Tag8 ([(((("compare"), (("shape/src/bin_shape.mli", 113, 3501, 3527), ("shape/src/bin_shape.mli", 113, 3501, 3534), 0))), (("shape/src/bin_shape.mli", 113, 3501, 3527), ("shape/src/bin_shape.mli", 113, 3501, 3534), 0), 0, 0); (((("sexp_of"), (("shape/src/bin_shape.mli", 113, 3501, 3536), ("shape/src/bin_shape.mli", 113, 3501, 3543), 0))), (("shape/src/bin_shape.mli", 113, 3501, 3536), ("shape/src/bin_shape.mli", 113, 3501, 3543), 0), 0, 0)]), (("shape/src/bin_shape.mli", 113, 3501, 3527), ("shape/src/bin_shape.mli", 113, 3501, 3543), 0), 0, 0)], (("shape/src/bin_shape.mli", 113, 3501, 3527), ("shape/src/bin_shape.mli", 113, 3501, 3543), 0))]), (("shape/src/bin_shape.mli", 113, 3501, 3515), ("shape/src/bin_shape.mli", 113, 3501, 3544), 0))], 0, 0, Tag1 ("Bin_shape", 41)), 1, 0); (("compare", 589), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "compare"), [((("a")), 100000000, 0, -145)], (0)), 100000000, 0, -146), (Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "compare"), [(Tag3 ((("t", 588)), [((("a")), 100000000, 0, -145)], (0)), 100000000, 0, -144)], (0)), 100000000, 0, -143), 0), 100000000, 0, -142), 0, (("shape/src/bin_shape.mli", 113, 3501, 3505), ("shape/src/bin_shape.mli", 113, 3501, 3544), 0), 0, Tag1 ("Base__Ppx_compare_lib", 8)), 0); (("sexp_of_t", 590), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -139), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -141), 0), 100000000, 0, -140), (Tag1 (0, (Tag3 ((("t", 588)), [((("a")), 100000000, 0, -139)], (0)), 100000000, 0, -138), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -137), 0), 100000000, 0, -136), 0), 100000000, 0, -135), 0, (("shape/src/bin_shape.mli", 113, 3501, 3505), ("shape/src/bin_shape.mli", 113, 3501, 3544), 0), 0, Tag1 ("Bin_shape", 43)), 0); (("expose", 591), ((Tag1 (0, (Tag3 ((("t", 588)), [((("a")), 100000000, 0, -133)], (0)), 100000000, 0, -134), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -132); ((("a")), 100000000, 0, -133)]), 100000000, 0, -131)], (0)), 100000000, 0, -130), 0), 100000000, 0, -129), 0, (("shape/src/bin_shape.mli", 115, 3546, 3550), ("shape/src/bin_shape.mli", 115, 3546, 3589), 0), 0, Tag1 ("Bin_shape", 44)), 0)]), 0, (("shape/src/bin_shape.mli", 112, 3473, 3475), ("shape/src/bin_shape.mli", 116, 3590, 3595), 0), Tag1 ("Bin_shape", 45)), 0, 0); Tag3 (("Canonical_exp_constructor", 586), 0, (Tag1 ([Tag1 (("t", 592), ([((("a")), 100000000, 0, -161)], 1, Tag1 ([(("Annotate", 436), ([(Tag3 (Tag1 ((("Uuid", 541)), "t"), 0, (0)), 100000000, 0, -160); ((("a")), 100000000, 0, -161)]), 0, (("shape/src/bin_shape.mli", 120, 3654, 3660), ("shape/src/bin_shape.mli", 120, 3654, 3685), 0), 0, Tag1 ("Bin_shape", 47)); (("Base", 437), ([(Tag3 (Tag1 ((("Uuid", 541)), "t"), 0, (0)), 100000000, 0, -162); (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -161)], (0)), 100000000, 0, -163)]), 0, (("shape/src/bin_shape.mli", 121, 3686, 3692), ("shape/src/bin_shape.mli", 121, 3686, 3718), 0), 0, Tag1 ("Bin_shape", 48)); (("Tuple", 438), ([(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -161)], (0)), 100000000, 0, -164)]), 0, (("shape/src/bin_shape.mli", 122, 3719, 3725), ("shape/src/bin_shape.mli", 122, 3719, 3743), 0), 0, Tag1 ("Bin_shape", 49)); (("Record", 439), ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -167); ((("a")), 100000000, 0, -161)]), 100000000, 0, -166)], (0)), 100000000, 0, -165)]), 0, (("shape/src/bin_shape.mli", 123, 3744, 3750), ("shape/src/bin_shape.mli", 123, 3744, 3780), 0), 0, Tag1 ("Bin_shape", 50)); (("Variant", 440), ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -170); (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -161)], (0)), 100000000, 0, -171)]), 100000000, 0, -169)], (0)), 100000000, 0, -168)]), 0, (("shape/src/bin_shape.mli", 124, 3781, 3787), ("shape/src/bin_shape.mli", 124, 3781, 3823), 0), 0, Tag1 ("Bin_shape", 51)); (("Poly_variant", 441), ([(Tag3 (Tag1 ((("Sorted_table", 585)), "t"), [(Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -161)], (0)), 100000000, 0, -173)], (0)), 100000000, 0, -172)]), 0, (("shape/src/bin_shape.mli", 125, 3824, 3830), ("shape/src/bin_shape.mli", 125, 3824, 3872), 0), 0, Tag1 ("Bin_shape", 52)); (("Application", 442), ([((("a")), 100000000, 0, -161); (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -161)], (0)), 100000000, 0, -174)]), 0, (("shape/src/bin_shape.mli", 126, 3873, 3879), ("shape/src/bin_shape.mli", 126, 3873, 3908), 0), 0, Tag1 ("Bin_shape", 53)); (("Rec_app", 443), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -175); (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -161)], (0)), 100000000, 0, -176)]), 0, (("shape/src/bin_shape.mli", 127, 3909, 3915), ("shape/src/bin_shape.mli", 127, 3909, 3941), 0), 0, Tag1 ("Bin_shape", 54)); (("Var", 444), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -177)]), 0, (("shape/src/bin_shape.mli", 128, 3942, 3948), ("shape/src/bin_shape.mli", 128, 3942, 3960), 0), 0, Tag1 ("Bin_shape", 55))], 0), 1, 0, [31], [0], 0, 0, (("shape/src/bin_shape.mli", 119, 3638, 3642), ("shape/src/bin_shape.mli", 129, 3961, 3994), 0), [(("deriving", (("shape/src/bin_shape.mli", 129, 3961, 3968), ("shape/src/bin_shape.mli", 129, 3961, 3976), 0)), ([([(Tag8 ([(((("compare"), (("shape/src/bin_shape.mli", 129, 3961, 3977), ("shape/src/bin_shape.mli", 129, 3961, 3984), 0))), (("shape/src/bin_shape.mli", 129, 3961, 3977), ("shape/src/bin_shape.mli", 129, 3961, 3984), 0), 0, 0); (((("sexp_of"), (("shape/src/bin_shape.mli", 129, 3961, 3986), ("shape/src/bin_shape.mli", 129, 3961, 3993), 0))), (("shape/src/bin_shape.mli", 129, 3961, 3986), ("shape/src/bin_shape.mli", 129, 3961, 3993), 0), 0, 0)]), (("shape/src/bin_shape.mli", 129, 3961, 3977), ("shape/src/bin_shape.mli", 129, 3961, 3993), 0), 0, 0)], (("shape/src/bin_shape.mli", 129, 3961, 3977), ("shape/src/bin_shape.mli", 129, 3961, 3993), 0))]), (("shape/src/bin_shape.mli", 129, 3961, 3965), ("shape/src/bin_shape.mli", 129, 3961, 3994), 0))], 0, 0, Tag1 ("Bin_shape", 46)), 1, 0); (("compare", 593), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "compare"), [((("a")), 100000000, 0, -158)], (0)), 100000000, 0, -159), (Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "compare"), [(Tag3 ((("t", 592)), [((("a")), 100000000, 0, -158)], (0)), 100000000, 0, -157)], (0)), 100000000, 0, -156), 0), 100000000, 0, -155), 0, (("shape/src/bin_shape.mli", 119, 3638, 3642), ("shape/src/bin_shape.mli", 129, 3961, 3994), 0), 0, Tag1 ("Base__Ppx_compare_lib", 8)), 0); (("sexp_of_t", 594), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -152), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -154), 0), 100000000, 0, -153), (Tag1 (0, (Tag3 ((("t", 592)), [((("a")), 100000000, 0, -152)], (0)), 100000000, 0, -151), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -150), 0), 100000000, 0, -149), 0), 100000000, 0, -148), 0, (("shape/src/bin_shape.mli", 119, 3638, 3642), ("shape/src/bin_shape.mli", 129, 3961, 3994), 0), 0, Tag1 ("Bin_shape", 57)), 0)]), 0, (("shape/src/bin_shape.mli", 118, 3597, 3599), ("shape/src/bin_shape.mli", 130, 3995, 4000), 0), Tag1 ("Bin_shape", 58)), 0, 0); Tag3 (("Canonical", 587), 0, (Tag1 ([Tag3 (("Exp1", 595), 0, (Tag1 ([Tag1 (("t0", 599), (0, 0, Tag1 ([(("Exp", 454), ([(Tag3 (Tag1 ((("Canonical_exp_constructor", 586)), "t"), [(Tag3 ((("t0", 599)), 0, (0)), 100000000, 0, -193)], (0)), 100000000, 0, -192)]), 0, (("shape/src/bin_shape.mli", 134, 4049, 4065), ("shape/src/bin_shape.mli", 134, 4049, 4102), 0), 0, Tag1 ("Bin_shape", 60))], 0), 1, 0, 0, 0, 0, 0, (("shape/src/bin_shape.mli", 134, 4049, 4055), ("shape/src/bin_shape.mli", 134, 4049, 4132), 0), [(("deriving", (("shape/src/bin_shape.mli", 134, 4049, 4106), ("shape/src/bin_shape.mli", 134, 4049, 4114), 0)), ([([(Tag8 ([(((("compare"), (("shape/src/bin_shape.mli", 134, 4049, 4115), ("shape/src/bin_shape.mli", 134, 4049, 4122), 0))), (("shape/src/bin_shape.mli", 134, 4049, 4115), ("shape/src/bin_shape.mli", 134, 4049, 4122), 0), 0, 0); (((("sexp_of"), (("shape/src/bin_shape.mli", 134, 4049, 4124), ("shape/src/bin_shape.mli", 134, 4049, 4131), 0))), (("shape/src/bin_shape.mli", 134, 4049, 4124), ("shape/src/bin_shape.mli", 134, 4049, 4131), 0), 0, 0)]), (("shape/src/bin_shape.mli", 134, 4049, 4115), ("shape/src/bin_shape.mli", 134, 4049, 4131), 0), 0, 0)], (("shape/src/bin_shape.mli", 134, 4049, 4115), ("shape/src/bin_shape.mli", 134, 4049, 4131), 0))]), (("shape/src/bin_shape.mli", 134, 4049, 4103), ("shape/src/bin_shape.mli", 134, 4049, 4132), 0))], 0, 1, Tag1 ("Bin_shape", 59)), 1, 0); (("compare_t0", 600), ((Tag1 (0, (Tag3 ((("t0", 599)), 0, (0)), 100000000, 0, -191), (Tag1 (0, (Tag3 ((("t0", 599)), 0, (0)), 100000000, 0, -190), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -189), 0), 100000000, 0, -188), 0), 100000000, 0, -187), 0, (("shape/src/bin_shape.mli", 134, 4049, 4055), ("shape/src/bin_shape.mli", 134, 4049, 4132), 0), 0, Tag1 ("Bin_shape", 61)), 0); (("sexp_of_t0", 601), ((Tag1 (0, (Tag3 ((("t0", 599)), 0, (0)), 100000000, 0, -186), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -185), 0), 100000000, 0, -184), 0, (("shape/src/bin_shape.mli", 134, 4049, 4055), ("shape/src/bin_shape.mli", 134, 4049, 4132), 0), 0, Tag1 ("Bin_shape", 62)), 0)]), 0, (("shape/src/bin_shape.mli", 133, 4027, 4031), ("shape/src/bin_shape.mli", 135, 4133, 4140), 0), Tag1 ("Bin_shape", 63)), 0, 0); Tag1 (("t", 596), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Exp1", 595)), "t0"), 0, (0)), 100000000, 0, -183)), 0, 0, 0, 0, (("shape/src/bin_shape.mli", 137, 4142, 4146), ("shape/src/bin_shape.mli", 137, 4142, 4192), 0), [(("deriving", (("shape/src/bin_shape.mli", 137, 4142, 4166), ("shape/src/bin_shape.mli", 137, 4142, 4174), 0)), ([([(Tag8 ([(((("compare"), (("shape/src/bin_shape.mli", 137, 4142, 4175), ("shape/src/bin_shape.mli", 137, 4142, 4182), 0))), (("shape/src/bin_shape.mli", 137, 4142, 4175), ("shape/src/bin_shape.mli", 137, 4142, 4182), 0), 0, 0); (((("sexp_of"), (("shape/src/bin_shape.mli", 137, 4142, 4184), ("shape/src/bin_shape.mli", 137, 4142, 4191), 0))), (("shape/src/bin_shape.mli", 137, 4142, 4184), ("shape/src/bin_shape.mli", 137, 4142, 4191), 0), 0, 0)]), (("shape/src/bin_shape.mli", 137, 4142, 4175), ("shape/src/bin_shape.mli", 137, 4142, 4191), 0), 0, 0)], (("shape/src/bin_shape.mli", 137, 4142, 4175), ("shape/src/bin_shape.mli", 137, 4142, 4191), 0))]), (("shape/src/bin_shape.mli", 137, 4142, 4163), ("shape/src/bin_shape.mli", 137, 4142, 4192), 0))], 0, 0, Tag1 ("Bin_shape", 64)), 1, 0); (("compare", 597), ((Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "compare"), [(Tag3 ((("t", 596)), 0, (0)), 100000000, 0, -182)], (0)), 100000000, 0, -181), 0, (("shape/src/bin_shape.mli", 137, 4142, 4146), ("shape/src/bin_shape.mli", 137, 4142, 4192), 0), 0, Tag1 ("Base__Ppx_compare_lib", 5)), 0); (("sexp_of_t", 598), ((Tag1 (0, (Tag3 ((("t", 596)), 0, (0)), 100000000, 0, -180), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -179), 0), 100000000, 0, -178), 0, (("shape/src/bin_shape.mli", 137, 4142, 4146), ("shape/src/bin_shape.mli", 137, 4142, 4192), 0), 0, Tag1 ("Bin_shape", 66)), 0)]), 0, (("shape/src/bin_shape.mli", 132, 4002, 4004), ("shape/src/bin_shape.mli", 138, 4193, 4198), 0), Tag1 ("Bin_shape", 67)), 0, 0)]), 0, (("shape/src/bin_shape.mli", 111, 3453, 3453), ("shape/src/bin_shape.mli", 139, 4199, 4202), 0), Tag1 ("Bin_shape", 68)), 0, 0); Tag3 (("Canonical", 559), 0, (Tag1 ([Tag1 (("t", 602), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag1 ((("Expert", 558)), "Canonical"), "t"), 0, (0)), 100000000, 0, -205)), 0, 0, 0, 0, (("shape/src/bin_shape.mli", 142, 4227, 4229), ("shape/src/bin_shape.mli", 142, 4227, 4286), 0), [(("deriving", (("shape/src/bin_shape.mli", 142, 4227, 4260), ("shape/src/bin_shape.mli", 142, 4227, 4268), 0)), ([([(Tag8 ([(((("compare"), (("shape/src/bin_shape.mli", 142, 4227, 4269), ("shape/src/bin_shape.mli", 142, 4227, 4276), 0))), (("shape/src/bin_shape.mli", 142, 4227, 4269), ("shape/src/bin_shape.mli", 142, 4227, 4276), 0), 0, 0); (((("sexp_of"), (("shape/src/bin_shape.mli", 142, 4227, 4278), ("shape/src/bin_shape.mli", 142, 4227, 4285), 0))), (("shape/src/bin_shape.mli", 142, 4227, 4278), ("shape/src/bin_shape.mli", 142, 4227, 4285), 0), 0, 0)]), (("shape/src/bin_shape.mli", 142, 4227, 4269), ("shape/src/bin_shape.mli", 142, 4227, 4285), 0), 0, 0)], (("shape/src/bin_shape.mli", 142, 4227, 4269), ("shape/src/bin_shape.mli", 142, 4227, 4285), 0))]), (("shape/src/bin_shape.mli", 142, 4227, 4257), ("shape/src/bin_shape.mli", 142, 4227, 4286), 0))], 0, 0, Tag1 ("Bin_shape", 69)), 1, 0); (("compare", 603), ((Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "compare"), [(Tag3 ((("t", 602)), 0, (0)), 100000000, 0, -204)], (0)), 100000000, 0, -203), 0, (("shape/src/bin_shape.mli", 142, 4227, 4229), ("shape/src/bin_shape.mli", 142, 4227, 4286), 0), 0, Tag1 ("Base__Ppx_compare_lib", 5)), 0); (("sexp_of_t", 604), ((Tag1 (0, (Tag3 ((("t", 602)), 0, (0)), 100000000, 0, -202), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -201), 0), 100000000, 0, -200), 0, (("shape/src/bin_shape.mli", 142, 4227, 4229), ("shape/src/bin_shape.mli", 142, 4227, 4286), 0), 0, Tag1 ("Bin_shape", 71)), 0); (("to_string_hum", 605), ((Tag1 (0, (Tag3 ((("t", 602)), 0, (0)), 100000000, 0, -199), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -198), 0), 100000000, 0, -197), 0, (("shape/src/bin_shape.mli", 144, 4288, 4290), ("shape/src/bin_shape.mli", 144, 4288, 4321), 0), 0, Tag1 ("Bin_shape", 72)), 0); (("to_digest", 606), ((Tag1 (0, (Tag3 ((("t", 602)), 0, (0)), 100000000, 0, -196), (Tag3 (Tag1 ((("Digest", 557)), "t"), 0, (0)), 100000000, 0, -195), 0), 100000000, 0, -194), 0, (("shape/src/bin_shape.mli", 145, 4322, 4324), ("shape/src/bin_shape.mli", 145, 4322, 4353), 0), 0, Tag1 ("Bin_shape", 73)), 0); Tag3 (("Exp", 607), 0, (Tag1 ([Tag1 (("t", 610), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("shape/src/bin_shape.mli", 148, 4374, 4378), ("shape/src/bin_shape.mli", 148, 4374, 4384), 0), 0, 0, 0, Tag1 ("Bin_shape", 74)), 1, 0)]), 0, (("shape/src/bin_shape.mli", 147, 4355, 4357), ("shape/src/bin_shape.mli", 149, 4385, 4390), 0), Tag1 ("Bin_shape", 75)), 0, 0); Tag3 (("Def", 608), 0, (Tag1 ([Tag1 (("t", 611), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("shape/src/bin_shape.mli", 152, 4411, 4415), ("shape/src/bin_shape.mli", 152, 4411, 4421), 0), 0, 0, 0, Tag1 ("Bin_shape", 76)), 1, 0)]), 0, (("shape/src/bin_shape.mli", 151, 4392, 4394), ("shape/src/bin_shape.mli", 153, 4422, 4427), 0), Tag1 ("Bin_shape", 77)), 0, 0); Tag3 (("Create", 609), 0, (Tag1 ([(("annotate", 612), ((Tag1 (0, (Tag3 (Tag1 ((("Uuid", 541)), "t"), 0, (0)), 100000000, 0, -263), (Tag1 (0, (Tag3 (Tag1 ((("Exp", 607)), "t"), 0, (0)), 100000000, 0, -262), (Tag3 (Tag1 ((("Exp", 607)), "t"), 0, (0)), 100000000, 0, -261), 0), 100000000, 0, -260), 0), 100000000, 0, -259), 0, (("shape/src/bin_shape.mli", 165, 4978, 4982), ("shape/src/bin_shape.mli", 165, 4978, 5021), 0), 0, Tag1 ("Bin_shape", 78)), 0); (("basetype", 613), ((Tag1 (0, (Tag3 (Tag1 ((("Uuid", 541)), "t"), 0, (0)), 100000000, 0, -258), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Exp", 607)), "t"), 0, (0)), 100000000, 0, -257)], (0)), 100000000, 0, -256), (Tag3 (Tag1 ((("Exp", 607)), "t"), 0, (0)), 100000000, 0, -255), 0), 100000000, 0, -254), 0), 100000000, 0, -253), 0, (("shape/src/bin_shape.mli", 167, 5023, 5027), ("shape/src/bin_shape.mli", 167, 5023, 5071), 0), 0, Tag1 ("Bin_shape", 79)), 0); (("tuple", 614), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Exp", 607)), "t"), 0, (0)), 100000000, 0, -252)], (0)), 100000000, 0, -251), (Tag3 (Tag1 ((("Exp", 607)), "t"), 0, (0)), 100000000, 0, -250), 0), 100000000, 0, -249), 0, (("shape/src/bin_shape.mli", 168, 5072, 5076), ("shape/src/bin_shape.mli", 168, 5072, 5107), 0), 0, Tag1 ("Bin_shape", 80)), 0); (("poly_variant", 615), ((Tag1 (0, (Tag3 (Tag1 ((("Location", 540)), "t"), 0, (0)), 100000000, 0, -248), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -245); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("Exp", 607)), "t"), 0, (0)), 100000000, 0, -247)], (0)), 100000000, 0, -246)]), 100000000, 0, -244)], (0)), 100000000, 0, -243), (Tag3 (Tag1 ((("Exp", 607)), "t"), 0, (0)), 100000000, 0, -242), 0), 100000000, 0, -241), 0), 100000000, 0, -240), 0, (("shape/src/bin_shape.mli", 169, 5108, 5112), ("shape/src/bin_shape.mli", 169, 5108, 5182), 0), 0, Tag1 ("Bin_shape", 81)), 0); (("var", 616), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -239), (Tag3 (Tag1 ((("Exp", 607)), "t"), 0, (0)), 100000000, 0, -238), 0), 100000000, 0, -237), 0, (("shape/src/bin_shape.mli", 170, 5183, 5187), ("shape/src/bin_shape.mli", 170, 5183, 5209), 0), 0, Tag1 ("Bin_shape", 82)), 0); (("apply", 617), ((Tag1 (0, (Tag3 (Tag1 ((("Def", 608)), "t"), 0, (0)), 100000000, 0, -236), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Exp", 607)), "t"), 0, (0)), 100000000, 0, -235)], (0)), 100000000, 0, -234), (Tag3 (Tag1 ((("Exp", 607)), "t"), 0, (0)), 100000000, 0, -233), 0), 100000000, 0, -232), 0), 100000000, 0, -231), 0, (("shape/src/bin_shape.mli", 171, 5210, 5214), ("shape/src/bin_shape.mli", 171, 5210, 5254), 0), 0, Tag1 ("Bin_shape", 83)), 0); (("recurse", 618), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -230), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Exp", 607)), "t"), 0, (0)), 100000000, 0, -229)], (0)), 100000000, 0, -228), (Tag3 (Tag1 ((("Exp", 607)), "t"), 0, (0)), 100000000, 0, -227), 0), 100000000, 0, -226), 0), 100000000, 0, -225), 0, (("shape/src/bin_shape.mli", 172, 5255, 5259), ("shape/src/bin_shape.mli", 172, 5255, 5299), 0), 0, Tag1 ("Bin_shape", 84)), 0); (("define", 619), ((Tag1 (0, (Tag3 (Tag1 ((("Exp", 607)), "t"), 0, (0)), 100000000, 0, -224), (Tag3 (Tag1 ((("Def", 608)), "t"), 0, (0)), 100000000, 0, -223), 0), 100000000, 0, -222), 0, (("shape/src/bin_shape.mli", 173, 5300, 5304), ("shape/src/bin_shape.mli", 173, 5300, 5331), 0), 0, Tag1 ("Bin_shape", 85)), 0); (("record", 620), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -220); (Tag3 (Tag1 ((("Exp", 607)), "t"), 0, (0)), 100000000, 0, -221)]), 100000000, 0, -219)], (0)), 100000000, 0, -218), (Tag3 (Tag1 ((("Exp", 607)), "t"), 0, (0)), 100000000, 0, -217), 0), 100000000, 0, -216), 0, (("shape/src/bin_shape.mli", 174, 5332, 5336), ("shape/src/bin_shape.mli", 174, 5332, 5379), 0), 0, Tag1 ("Bin_shape", 86)), 0); (("variant", 621), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -213); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Exp", 607)), "t"), 0, (0)), 100000000, 0, -215)], (0)), 100000000, 0, -214)]), 100000000, 0, -212)], (0)), 100000000, 0, -211), (Tag3 (Tag1 ((("Exp", 607)), "t"), 0, (0)), 100000000, 0, -210), 0), 100000000, 0, -209), 0, (("shape/src/bin_shape.mli", 175, 5380, 5384), ("shape/src/bin_shape.mli", 175, 5380, 5433), 0), 0, Tag1 ("Bin_shape", 87)), 0); (("create", 622), ((Tag1 (0, (Tag3 (Tag1 ((("Exp", 607)), "t"), 0, (0)), 100000000, 0, -208), (Tag3 ((("t", 602)), 0, (0)), 100000000, 0, -207), 0), 100000000, 0, -206), 0, (("shape/src/bin_shape.mli", 176, 5434, 5438), ("shape/src/bin_shape.mli", 176, 5434, 5461), 0), 0, Tag1 ("Bin_shape", 88)), 0)]), 0, (("shape/src/bin_shape.mli", 155, 4429, 4431), ("shape/src/bin_shape.mli", 177, 5462, 5467), 0), Tag1 ("Bin_shape", 89)), 0, 0)]), 0, (("shape/src/bin_shape.mli", 141, 4204, 4204), ("shape/src/bin_shape.mli", 178, 5468, 5471), 0), Tag1 ("Bin_shape", 90)), 0, 0); (("eval", 560), ((Tag1 (0, (Tag3 ((("t", 536)), 0, (0)), 100000000, 0, -10), (Tag3 (Tag1 ((("Canonical", 559)), "t"), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("shape/src/bin_shape.mli", 184, 5793, 5793), ("shape/src/bin_shape.mli", 184, 5793, 5820), 0), 0, Tag1 ("Bin_shape", 91)), 0); (("eval_to_digest", 561), ((Tag1 (0, (Tag3 ((("t", 536)), 0, (0)), 100000000, 0, -7), (Tag3 (Tag1 ((("Digest", 557)), "t"), 0, (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("shape/src/bin_shape.mli", 191, 6193, 6193), ("shape/src/bin_shape.mli", 191, 6193, 6227), 0), 0, Tag1 ("Bin_shape", 92)), 0); (("eval_to_digest_string", 562), ((Tag1 (0, (Tag3 ((("t", 536)), 0, (0)), 100000000, 0, -4), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("shape/src/bin_shape.mli", 195, 6357, 6357), ("shape/src/bin_shape.mli", 195, 6357, 6396), 0), 0, Tag1 ("Bin_shape", 93)), 0); Tag3 (("For_typerep", 563), 0, (Tag1 ([(("deconstruct_tuple_exn", 623), ((Tag1 (0, (Tag3 ((("t", 536)), 0, (0)), 100000000, 0, -267), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 536)), 0, (0)), 100000000, 0, -266)], (0)), 100000000, 0, -265), 0), 100000000, 0, -264), 0, (("shape/src/bin_shape.mli", 198, 6423, 6425), ("shape/src/bin_shape.mli", 198, 6423, 6464), 0), 0, Tag1 ("Bin_shape", 94)), 0)]), 0, (("shape/src/bin_shape.mli", 197, 6398, 6398), ("shape/src/bin_shape.mli", 199, 6465, 6468), 0), Tag1 ("Bin_shape", 95)), 0, 0)], "Bin_shape", [("Bin_shape", ("\186\129\213n:\153\165\244L\187\167M\205\189Ez")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__StringLabels", ("\134F\024\226\216Is#\223\230\234\169Z\206Gc")); ("Stdlib__StdLabels", (".\193\n\229\139\017\212C-ZA\\kz-\128")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Printf", ("\215<\139]\021\142\224E\245m\198qc(W\229")); ("Stdlib__Printexc", ("\217u\168\235\179oi\167\235\255\025\017%d\192s")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__MoreLabels", ("\248\232\248\254`<\230\241\161U\193U\1466J\238")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__ListLabels", ("*\194\012\191\020%\170\249m\002\180\178hk\205\220")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shadow_stdlib", ("\219zi\164\203\158e)\232\221\196\168\138x\142\018")); ("Sexplib0__Sexpable", ("\251${\207(\249/z\242\255\250^\141\156\210e")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv_error", ("kzv!\151~\198P\000\165\176d\007\251p\232")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("Ppx_compare_lib", ("\160z\210W\001\239\141\222\242\213'\241\211\218\215y")); ("Md5_lib", ("\027\247~\199'\195O\175\232\149\147\228\248S\0073")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Base_internalhash_types", ("0\148#2\226\223\018\135\173>!\020\237\017\255\149")); ("Base__Unit", ("\247\n\178\171]m\169\231\139\171\148\189\254\236l'")); ("Base__T", ("+t\159\169\027\152\205\235\003\237\133\177\024\n6'")); ("Base__Sys0", ("\206z\231\154s\\\136\2364\131\005\014\031\152m3")); ("Base__Stringable", ("\170\025\162\136\234\162\n\161\1491>\145\210@\237t")); ("Base__String0", ("\212\221L\220\245\255\162P\228\224\189\216\135H\149O")); ("Base__String", ("|q\181\r\14787\130\127\191\025\137\203\217\250\196")); ("Base__Staged", ("\203J\011+\249\0115\1338\023\209\142\159\240V.")); ("Base__Source_code_position0", ("_\003P6\254\029\206\005\130\136\180\019\145\230\000M")); ("Base__Sign_or_nan", ("\2287\251,\197\017qf\179Y\025h\190\131W%")); ("Base__Sign0", ("\152\138\204\175\244\128J\165\221\165\160\150y\1305i")); ("Base__Sign", ("^\255.Q;\215fi\134\192\182\241Z\2425l")); ("Base__Sexpable", ("\155?\169\178\246\242*\232\206\018Y\174\203h\217i")); ("Base__Sexp_with_comparable", ("\171\173\137y\1855\006y\146\248\141@@\191[W")); ("Base__Sexp", ("\154\187\171&\209=\153[\236\250!U\174`\190T")); ("Base__Sequence", ("{L\140\211\223\183\000\030\151\247FnY\196\210\201")); ("Base__Result", ("\204|\215\173FMa\2511<&\215T\194$\228")); ("Base__Ref", ("\250\254R\158s\203c\0025\029I6\149\179s\158")); ("Base__Random", (" \216\153fc\243\1430\155\211\169?\022\\\231\011")); ("Base__Printf", ("\000\196c,\214\127\226\174\220\190\253z!\242\028\250")); ("Base__Pretty_printer", ("\175\005\031\018\015a\159\220\154c'(a\239j\233")); ("Base__Ppx_hash_lib", ("\199\141\178\193\006\209L\007^\020(\131\224sn8")); ("Base__Ppx_enumerate_lib", ("G\171\178\012Em\142\235@\152fg\020\140~(")); ("Base__Ppx_compare_lib", ("\243\186~\233\228\199Ah\181.\223\004e\231\129S")); ("Base__Poly0", ("\230;\143\234\255.H\132KOe7\155\\\023f")); ("Base__Or_error", ("\193\133)\bO\210\2517\168*\203\148\143\200\127\177")); ("Base__Option", ("\242!\176\142\168\247\163Jg\0254\180\224\\A\210")); ("Base__Nativeint", ("\252/\181U\214\229\029?.\130\145\237\"qFj")); ("Base__Monad_intf", ("\208\203\163\152\184O\130?\012:\168\247}\018\253\155")); ("Base__Monad", ("!\244\168\2352=\137Lm\219\129K\216\199\145\\")); ("Base__List", ("}\029h\158/\153\229\161]0\224Y\003Z\250\210")); ("Base__Lazy", ("@`\165\196 \235)\136ANe:p\169$\185")); ("Base__Invariant_intf", ("\213\204\238\235\236[\198\145\028\2392\015\243\177S\249")); ("Base__Invariant", ("\135\153\136\\\129SD\228\202l\255\152\139\253\015\201")); ("Base__Intable", ("\028\249=Y\003]\231qd\238\172\004b\170\142\255")); ("Base__Int_intf", ("\238Q\2457\239\156\018\183J\015\240\178\193b\166@")); ("Base__Int64", ("\252B\186\239\245\155\209\227\136CIX@\189\003\029")); ("Base__Int63_emul", ("'\210s\232\177\204\254\024C\215\014\231\210\227n\235")); ("Base__Int63", ("\165\016\236\214m\014a\226A{\191\235@O\1695")); ("Base__Int32", ("\244*\172\133\227\025$@\180\027\024\132\195yO\027")); ("Base__Int0", ("N\1310\012\227\254\000\255_\222!\018\016\003\1779")); ("Base__Int", ("\165Z\179\140\230$\131\175\209\172\214\"\170\214{\250")); ("Base__Info_intf", ("\184\209'\173\251\219\167X|v\188]\190o5X")); ("Base__Info", ("-\011\149\203\248\030\2301\1907\1630\189\128\209\170")); ("Base__Indexed_container_intf", ("\179\2213\145j\\\136\tl2\240\006\188j$r")); ("Base__Indexed_container", ("\196\246\213\141\196d\130\002\232\162\144y\149\236\145\218")); ("Base__Import0", ("\156\129U\197Y[\\\153\017Ho\203\173\204\220\020")); ("Base__Import", ("\014\187\247\141\187\181\142g\176:s_,\181\219\209")); ("Base__Identifiable_intf", ("hK7}\187\129\022-r\233\241\192Q\161=j")); ("Base__Identifiable", ("L\020\162\189\228\217^\171\158H_\157\164c\130\242")); ("Base__Hashable_intf", ("\128\015G\244\135R\026\202\128F?)\193\004\195\181")); ("Base__Hashable", ("\027\187\158\245r}\018\193dbq\196\005\170g\252")); ("Base__Hash_intf", ("h\004P\218\1531G\127\212\208A\024\140\164iq")); ("Base__Hash", ("\206Rc\194\234{s3\248\165\024\162\203{\206\206")); ("Base__Globalize", ("<\243w~.\180\196t\159\193\174[\227\139\215G")); ("Base__Formatter", ("\193\149\030\140\154\1505b\162a`%\243\185'%")); ("Base__Floatable", ("\239\176\151\139\173ft(q\190\205\030C\170\197\177")); ("Base__Float", ("tR$\252\165\134g\024>\127\254\245\212-\018\141")); ("Base__Field", ("8In\234X\202\188G\186\208$\192\175\136\214v")); ("Base__Exn", ("?\191\202\221\228\185\154\127\240\191o\134\020\186b\173")); ("Base__Error", ("\199\218\231n\155/\159\156\146\247\148t\237\003\t\153")); ("Base__Equal", ("\193\217Z\127he\141N\000\1447\030\236%\131\b")); ("Base__Either0", ("!9-\011n\2077eZ\212\031c\227\029\206\t")); ("Base__Container_intf", ("\170vo*\208\209\141\219\196\168\236l\016\246\012c")); ("Base__Container", ("\191|>_\153W\235M\180uKz\214w`q")); ("Base__Comparisons", ("\196\196Y\"{\163~)\\G/\155:\004\141;")); ("Base__Comparator", ("\002\135z7b\025&\207\t\188\239&U3R\167")); ("Base__Comparable_intf", ("\252n\002\221\246\143r\235oJ\240\151\202\211\161\254")); ("Base__Comparable", (":\134'\156u#\215\225\129\191\162\229\200\185l\012")); ("Base__Char", ("\206\224\186\000'\157$\023\023\190\198{\250\141a\216")); ("Base__Bytes", ("\028\001\232X(\240\139\227s\152\156\138\023\030\r\188")); ("Base__Bool0", ("\177f\254p\023\143&\239\020\136\206\242~\018F\251")); ("Base__Bool", ("\162+\012Rx\183c\226\131\190@Z\016q\138@")); ("Base__Blit_intf", ("\171\129\t\214\130\131O\210\251F\228.\168\004Vo")); ("Base__Blit", ("}g\242\161\000\216\132\220\195\230C\002jg\234j")); ("Base__Binary_searchable_intf", ("/\213\237\209\200\192$w\158\234\169\148\012\221W\019")); ("Base__Binary_searchable", ("V\022B_\233\194\145K\248\233\025\175U\155i\197")); ("Base__Backtrace", ("\212~\253E\024|\228\141\015\169\012\006\022\0065\181")); ("Base__Array", ("P\252F\172\242{\241\226#uu\207\2068\218\015")); ("Base__Applicative_intf", ("J\176\203\159\235N(\235\027\232\198+\224\205*A")); ("Base__Applicative", ("\157\024\176\241a\165\204\133\003s3\214\007\131\244\n")); ("Base__", ("p\252\007\139\128\163W\025+\0225\001\246|P\158")); ("Base", ("\167SY\027Q9E\005r,\198\164\161\023\170\151"))], [(0)])
module For_typerep : sig val deconstruct_tuple_exn : t -> t list end

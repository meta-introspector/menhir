type metadata = { name_var : string list; }
module Monomial :
  sig type t val repr : t -> int array val make : int array -> t end
module Make :
  functor (P : Nsatz_plugin.Polynom.S) ->
    sig
      type deg = int
      type coef = P.t
      type poly
      val repr : poly -> (coef * Monomial.t) list
      val polconst : int -> coef -> poly
      val zeroP : poly
      val gen : int -> int -> poly
      val equal : poly -> poly -> bool
      val plusP : poly -> poly -> poly
      val oppP : poly -> poly
      val multP : poly -> poly -> poly
      val puisP : poly -> int -> poly
      type certificate = {
        coef : coef;
        power : int;
        gb_comb : poly list list;
        last_comb : poly list;
      }
      val in_ideal : metadata -> deg -> poly list -> poly -> certificate
      module Hashpol :
        sig
          type key = poly
          type !'a t
          val create : int -> 'a t
          val clear : 'a t -> unit
          val reset : 'a t -> unit
          val copy : 'a t -> 'a t
          val add : 'a t -> key -> 'a -> unit
          val remove : 'a t -> key -> unit
          val find : 'a t -> key -> 'a
          val find_opt : 'a t -> key -> 'a option
          val find_all : 'a t -> key -> 'a list
          val replace : 'a t -> key -> 'a -> unit
          val mem : 'a t -> key -> bool
          val iter : (key -> 'a -> unit) -> 'a t -> unit
          val filter_map_inplace : (key -> 'a -> 'a option) -> 'a t -> unit
          val fold : (key -> 'a -> 'acc -> 'acc) -> 'a t -> 'acc -> 'acc
          val length : 'a t -> int
          val stats : 'a t -> Stdlib__Hashtbl.statistics
          val to_seq : 'a t -> (key * 'a) Seq.t
          val to_seq_keys : 'a t -> key Seq.t
          val to_seq_values : 'a t -> 'a Seq.t
          val add_seq : 'a t -> (key * 'a) Seq.t -> unit
          val replace_seq : 'a t -> (key * 'a) Seq.t -> unit
          val of_seq : (key * 'a) Seq.t -> 'a t
        end
    end
exception NotInIdeal("DEBUG:rule", [Tag1 (("metadata", 726), (0, 0, [[(("name_var", 275), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5)], (0)), 100000000, 0, -4), (("plugins/nsatz/ideal.mli", 12, 694, 696), ("plugins/nsatz/ideal.mli", 12, 694, 719), 0), 0, Tag1 ("Nsatz_plugin__Ideal", 1))]], 1, 0, 0, 0, 0, 0, (("plugins/nsatz/ideal.mli", 11, 676, 676), ("plugins/nsatz/ideal.mli", 13, 720, 721), 0), 0, 0, 1, Tag1 ("Nsatz_plugin__Ideal", 0)), 1, 0); Tag3 (("Monomial", 727), 0, (Tag1 ([Tag1 (("t", 732), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("plugins/nsatz/ideal.mli", 17, 745, 745), ("plugins/nsatz/ideal.mli", 17, 745, 751), 0), 0, 0, 0, Tag1 ("Nsatz_plugin__Ideal", 2)), 1, 0); (("repr", 733), ((Tag1 (0, (Tag3 ((("t", 732)), 0, (0)), 100000000, 0, -13), (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12)], (0)), 100000000, 0, -11), 0), 100000000, 0, -10), 0, (("plugins/nsatz/ideal.mli", 18, 752, 752), ("plugins/nsatz/ideal.mli", 18, 752, 777), 0), 0, Tag1 ("Nsatz_plugin__Ideal", 3)), 0); (("make", 734), ((Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -9)], (0)), 100000000, 0, -8), (Tag3 ((("t", 732)), 0, (0)), 100000000, 0, -7), 0), 100000000, 0, -6), 0, (("plugins/nsatz/ideal.mli", 19, 778, 778), ("plugins/nsatz/ideal.mli", 19, 778, 803), 0), 0, Tag1 ("Nsatz_plugin__Ideal", 4)), 0)]), 0, (("plugins/nsatz/ideal.mli", 15, 723, 723), ("plugins/nsatz/ideal.mli", 20, 804, 807), 0), Tag1 ("Nsatz_plugin__Ideal", 5)), 0, 0); Tag3 (("Make", 728), 0, (Tag2 (((("P", 731)), (Tag1 (Tag1 ((Tag2 ("Nsatz_plugin")), "Polynom"), "S"))), Tag1 ([Tag1 (("deg", 735), (0, 0, 0, 1, ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -72)), 0, 0, 0, 0, (("plugins/nsatz/ideal.mli", 26, 862, 862), ("plugins/nsatz/ideal.mli", 26, 862, 876), 0), 0, 1, 0, Tag1 ("Nsatz_plugin__Ideal", 7)), 1, 0); Tag1 (("coef", 736), (0, 0, 0, 1, ((Tag3 (Tag1 ((("P", 731)), "t"), 0, (0)), 100000000, 0, -71)), 0, 0, 0, 0, (("plugins/nsatz/ideal.mli", 27, 877, 877), ("plugins/nsatz/ideal.mli", 27, 877, 892), 0), 0, 0, 0, Tag1 ("Nsatz_plugin__Ideal", 8)), 1, 0); Tag1 (("poly", 737), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("plugins/nsatz/ideal.mli", 28, 893, 893), ("plugins/nsatz/ideal.mli", 28, 893, 902), 0), 0, 0, 0, Tag1 ("Nsatz_plugin__Ideal", 9)), 1, 0); (("repr", 738), ((Tag1 (0, (Tag3 ((("poly", 737)), 0, (0)), 100000000, 0, -70), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("coef", 736)), 0, (0)), 100000000, 0, -68); (Tag3 (Tag1 ((("Monomial", 727)), "t"), 0, (0)), 100000000, 0, -69)]), 100000000, 0, -67)], (0)), 100000000, 0, -66), 0), 100000000, 0, -65), 0, (("plugins/nsatz/ideal.mli", 30, 904, 904), ("plugins/nsatz/ideal.mli", 30, 904, 947), 0), 0, Tag1 ("Nsatz_plugin__Ideal", 10)), 0); (("polconst", 739), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -64), (Tag1 (0, (Tag3 ((("coef", 736)), 0, (0)), 100000000, 0, -63), (Tag3 ((("poly", 737)), 0, (0)), 100000000, 0, -62), 0), 100000000, 0, -61), 0), 100000000, 0, -60), 0, (("plugins/nsatz/ideal.mli", 31, 948, 948), ("plugins/nsatz/ideal.mli", 31, 948, 982), 0), 0, Tag1 ("Nsatz_plugin__Ideal", 11)), 0); (("zeroP", 740), ((Tag3 ((("poly", 737)), 0, (0)), 100000000, 0, -59), 0, (("plugins/nsatz/ideal.mli", 32, 983, 983), ("plugins/nsatz/ideal.mli", 32, 983, 999), 0), 0, Tag1 ("Nsatz_plugin__Ideal", 12)), 0); (("gen", 741), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -58), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -57), (Tag3 ((("poly", 737)), 0, (0)), 100000000, 0, -56), 0), 100000000, 0, -55), 0), 100000000, 0, -54), 0, (("plugins/nsatz/ideal.mli", 33, 1000, 1000), ("plugins/nsatz/ideal.mli", 33, 1000, 1028), 0), 0, Tag1 ("Nsatz_plugin__Ideal", 13)), 0); (("equal", 742), ((Tag1 (0, (Tag3 ((("poly", 737)), 0, (0)), 100000000, 0, -53), (Tag1 (0, (Tag3 ((("poly", 737)), 0, (0)), 100000000, 0, -52), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -51), 0), 100000000, 0, -50), 0), 100000000, 0, -49), 0, (("plugins/nsatz/ideal.mli", 35, 1030, 1030), ("plugins/nsatz/ideal.mli", 35, 1030, 1062), 0), 0, Tag1 ("Nsatz_plugin__Ideal", 14)), 0); (("plusP", 743), ((Tag1 (0, (Tag3 ((("poly", 737)), 0, (0)), 100000000, 0, -48), (Tag1 (0, (Tag3 ((("poly", 737)), 0, (0)), 100000000, 0, -47), (Tag3 ((("poly", 737)), 0, (0)), 100000000, 0, -46), 0), 100000000, 0, -45), 0), 100000000, 0, -44), 0, (("plugins/nsatz/ideal.mli", 37, 1064, 1064), ("plugins/nsatz/ideal.mli", 37, 1064, 1096), 0), 0, Tag1 ("Nsatz_plugin__Ideal", 15)), 0); (("oppP", 744), ((Tag1 (0, (Tag3 ((("poly", 737)), 0, (0)), 100000000, 0, -43), (Tag3 ((("poly", 737)), 0, (0)), 100000000, 0, -42), 0), 100000000, 0, -41), 0, (("plugins/nsatz/ideal.mli", 38, 1097, 1097), ("plugins/nsatz/ideal.mli", 38, 1097, 1120), 0), 0, Tag1 ("Nsatz_plugin__Ideal", 16)), 0); (("multP", 745), ((Tag1 (0, (Tag3 ((("poly", 737)), 0, (0)), 100000000, 0, -40), (Tag1 (0, (Tag3 ((("poly", 737)), 0, (0)), 100000000, 0, -39), (Tag3 ((("poly", 737)), 0, (0)), 100000000, 0, -38), 0), 100000000, 0, -37), 0), 100000000, 0, -36), 0, (("plugins/nsatz/ideal.mli", 39, 1121, 1121), ("plugins/nsatz/ideal.mli", 39, 1121, 1153), 0), 0, Tag1 ("Nsatz_plugin__Ideal", 17)), 0); (("puisP", 746), ((Tag1 (0, (Tag3 ((("poly", 737)), 0, (0)), 100000000, 0, -35), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -34), (Tag3 ((("poly", 737)), 0, (0)), 100000000, 0, -33), 0), 100000000, 0, -32), 0), 100000000, 0, -31), 0, (("plugins/nsatz/ideal.mli", 40, 1154, 1154), ("plugins/nsatz/ideal.mli", 40, 1154, 1185), 0), 0, Tag1 ("Nsatz_plugin__Ideal", 18)), 0); Tag1 (("certificate", 747), (0, 0, [[(("coef", 387), 0, (Tag3 ((("coef", 736)), 0, (0)), 100000000, 0, -24), (("plugins/nsatz/ideal.mli", 43, 1206, 1212), ("plugins/nsatz/ideal.mli", 43, 1206, 1224), 0), 0, Tag1 ("Nsatz_plugin__Ideal", 20)); (("power", 388), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -25), (("plugins/nsatz/ideal.mli", 43, 1206, 1225), ("plugins/nsatz/ideal.mli", 43, 1206, 1237), 0), 0, Tag1 ("Nsatz_plugin__Ideal", 21)); (("gb_comb", 389), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("poly", 737)), 0, (0)), 100000000, 0, -28)], (0)), 100000000, 0, -27)], (0)), 100000000, 0, -26), (("plugins/nsatz/ideal.mli", 44, 1238, 1244), ("plugins/nsatz/ideal.mli", 44, 1238, 1269), 0), 0, Tag1 ("Nsatz_plugin__Ideal", 22)); (("last_comb", 390), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("poly", 737)), 0, (0)), 100000000, 0, -30)], (0)), 100000000, 0, -29), (("plugins/nsatz/ideal.mli", 44, 1238, 1270), ("plugins/nsatz/ideal.mli", 44, 1238, 1291), 0), 0, Tag1 ("Nsatz_plugin__Ideal", 23))]], 1, 0, 0, 0, 0, 0, (("plugins/nsatz/ideal.mli", 42, 1187, 1187), ("plugins/nsatz/ideal.mli", 44, 1238, 1293), 0), 0, 0, 0, Tag1 ("Nsatz_plugin__Ideal", 19)), 1, 0); (("in_ideal", 748), ((Tag1 (0, (Tag3 ((("metadata", 726)), 0, (0)), 100000000, 0, -23), (Tag1 (0, (Tag3 ((("deg", 735)), 0, (0)), 100000000, 0, -22), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("poly", 737)), 0, (0)), 100000000, 0, -21)], (0)), 100000000, 0, -20), (Tag1 (0, (Tag3 ((("poly", 737)), 0, (0)), 100000000, 0, -19), (Tag3 ((("certificate", 747)), 0, (0)), 100000000, 0, -18), 0), 100000000, 0, -17), 0), 100000000, 0, -16), 0), 100000000, 0, -15), 0), 100000000, 0, -14), 0, (("plugins/nsatz/ideal.mli", 46, 1295, 1295), ("plugins/nsatz/ideal.mli", 46, 1295, 1361), 0), 0, Tag1 ("Nsatz_plugin__Ideal", 24)), 0); Tag3 (("Hashpol", 749), 0, (Tag1 ([Tag1 (("key", 750), (0, 0, 0, 1, ((Tag3 ((("poly", 737)), 0, (0)), 100000000, 0, -206)), 0, 0, 0, 0, (("plugins/nsatz/ideal.mli", 48, 1363, 1395), ("plugins/nsatz/ideal.mli", 48, 1363, 1410), 0), 0, 0, 0, Tag1 ("Nsatz_plugin__Ideal", 25)), 1, 0); Tag1 (("t", 751), ([((("a")), 100000000, 0, -205)], 1, 0, 1, 0, [15], [2], 0, 0, (("hashtbl.mli", 372, 15205, 15209), ("hashtbl.mli", 372, 15205, 15219), 0), 0, 0, 0, Tag1 ("Stdlib__Hashtbl", 36)), 1, 0); (("create", 752), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -204), (Tag3 ((("t", 751)), [((("a")), 100000000, 0, -203)], (0)), 100000000, 0, -202), 0), 100000000, 0, -201), 0, (("hashtbl.mli", 373, 15220, 15224), ("hashtbl.mli", 373, 15220, 15248), 0), 0, Tag1 ("Stdlib__Hashtbl", 37)), 0); (("clear", 753), ((Tag1 (0, (Tag3 ((("t", 751)), [((("a")), 100000000, 0, -200)], (0)), 100000000, 0, -199), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -198), 0), 100000000, 0, -197), 0, (("hashtbl.mli", 374, 15249, 15253), ("hashtbl.mli", 374, 15249, 15277), 0), 0, Tag1 ("Stdlib__Hashtbl", 38)), 0); (("reset", 754), ((Tag1 (0, (Tag3 ((("t", 751)), [((("a")), 100000000, 0, -196)], (0)), 100000000, 0, -195), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -194), 0), 100000000, 0, -193), 0, (("hashtbl.mli", 375, 15278, 15282), ("hashtbl.mli", 375, 15278, 15306), 0), 0, Tag1 ("Stdlib__Hashtbl", 39)), 0); (("copy", 755), ((Tag1 (0, (Tag3 ((("t", 751)), [((("a")), 100000000, 0, -191)], (0)), 100000000, 0, -192), (Tag3 ((("t", 751)), [((("a")), 100000000, 0, -191)], (0)), 100000000, 0, -190), 0), 100000000, 0, -189), 0, (("hashtbl.mli", 377, 15327, 15331), ("hashtbl.mli", 377, 15327, 15354), 0), 0, Tag1 ("Stdlib__Hashtbl", 40)), 0); (("add", 756), ((Tag1 (0, (Tag3 ((("t", 751)), [((("a")), 100000000, 0, -186)], (0)), 100000000, 0, -188), (Tag1 (0, (Tag3 ((("key", 750)), 0, (0)), 100000000, 0, -187), (Tag1 (0, ((("a")), 100000000, 0, -186), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -185), 0), 100000000, 0, -184), 0), 100000000, 0, -183), 0), 100000000, 0, -182), 0, (("hashtbl.mli", 378, 15355, 15359), ("hashtbl.mli", 378, 15355, 15394), 0), 0, Tag1 ("Stdlib__Hashtbl", 41)), 0); (("remove", 757), ((Tag1 (0, (Tag3 ((("t", 751)), [((("a")), 100000000, 0, -181)], (0)), 100000000, 0, -180), (Tag1 (0, (Tag3 ((("key", 750)), 0, (0)), 100000000, 0, -179), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -178), 0), 100000000, 0, -177), 0), 100000000, 0, -176), 0, (("hashtbl.mli", 379, 15395, 15399), ("hashtbl.mli", 379, 15395, 15431), 0), 0, Tag1 ("Stdlib__Hashtbl", 42)), 0); (("find", 758), ((Tag1 (0, (Tag3 ((("t", 751)), [((("a")), 100000000, 0, -173)], (0)), 100000000, 0, -175), (Tag1 (0, (Tag3 ((("key", 750)), 0, (0)), 100000000, 0, -174), ((("a")), 100000000, 0, -173), 0), 100000000, 0, -172), 0), 100000000, 0, -171), 0, (("hashtbl.mli", 380, 15432, 15436), ("hashtbl.mli", 380, 15432, 15464), 0), 0, Tag1 ("Stdlib__Hashtbl", 43)), 0); (("find_opt", 759), ((Tag1 (0, (Tag3 ((("t", 751)), [((("a")), 100000000, 0, -168)], (0)), 100000000, 0, -170), (Tag1 (0, (Tag3 ((("key", 750)), 0, (0)), 100000000, 0, -169), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -168)], (0)), 100000000, 0, -167), 0), 100000000, 0, -166), 0), 100000000, 0, -165), 0, (("hashtbl.mli", 381, 15465, 15469), ("hashtbl.mli", 381, 15465, 15508), 0), 0, Tag1 ("Stdlib__Hashtbl", 44)), 0); (("find_all", 760), ((Tag1 (0, (Tag3 ((("t", 751)), [((("a")), 100000000, 0, -162)], (0)), 100000000, 0, -164), (Tag1 (0, (Tag3 ((("key", 750)), 0, (0)), 100000000, 0, -163), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -162)], (0)), 100000000, 0, -161), 0), 100000000, 0, -160), 0), 100000000, 0, -159), 0, (("hashtbl.mli", 384, 15533, 15537), ("hashtbl.mli", 384, 15533, 15574), 0), 0, Tag1 ("Stdlib__Hashtbl", 45)), 0); (("replace", 761), ((Tag1 (0, (Tag3 ((("t", 751)), [((("a")), 100000000, 0, -156)], (0)), 100000000, 0, -158), (Tag1 (0, (Tag3 ((("key", 750)), 0, (0)), 100000000, 0, -157), (Tag1 (0, ((("a")), 100000000, 0, -156), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -155), 0), 100000000, 0, -154), 0), 100000000, 0, -153), 0), 100000000, 0, -152), 0, (("hashtbl.mli", 385, 15575, 15579), ("hashtbl.mli", 385, 15575, 15618), 0), 0, Tag1 ("Stdlib__Hashtbl", 46)), 0); (("mem", 762), ((Tag1 (0, (Tag3 ((("t", 751)), [((("a")), 100000000, 0, -151)], (0)), 100000000, 0, -150), (Tag1 (0, (Tag3 ((("key", 750)), 0, (0)), 100000000, 0, -149), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -148), 0), 100000000, 0, -147), 0), 100000000, 0, -146), 0, (("hashtbl.mli", 386, 15619, 15623), ("hashtbl.mli", 386, 15619, 15652), 0), 0, Tag1 ("Stdlib__Hashtbl", 47)), 0); (("iter", 763), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 750)), 0, (0)), 100000000, 0, -145), (Tag1 (0, ((("a")), 100000000, 0, -141), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -144), 0), 100000000, 0, -143), 0), 100000000, 0, -142), (Tag1 (0, (Tag3 ((("t", 751)), [((("a")), 100000000, 0, -141)], (0)), 100000000, 0, -140), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -139), 0), 100000000, 0, -138), 0), 100000000, 0, -137), 0, (("hashtbl.mli", 387, 15653, 15657), ("hashtbl.mli", 387, 15653, 15703), 0), 0, Tag1 ("Stdlib__Hashtbl", 48)), 0); (("filter_map_inplace", 764), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 750)), 0, (0)), 100000000, 0, -136), (Tag1 (0, ((("a")), 100000000, 0, -132), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -132)], (0)), 100000000, 0, -135), 0), 100000000, 0, -134), 0), 100000000, 0, -133), (Tag1 (0, (Tag3 ((("t", 751)), [((("a")), 100000000, 0, -132)], (0)), 100000000, 0, -131), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -130), 0), 100000000, 0, -129), 0), 100000000, 0, -128), 0, (("hashtbl.mli", 388, 15704, 15708), ("hashtbl.mli", 389, 15768, 15778), 0), 0, Tag1 ("Stdlib__Hashtbl", 49)), 0); (("fold", 765), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 750)), 0, (0)), 100000000, 0, -127), (Tag1 (0, ((("a")), 100000000, 0, -123), (Tag1 (0, ((("acc")), 100000000, 0, -121), ((("acc")), 100000000, 0, -121), 0), 100000000, 0, -126), 0), 100000000, 0, -125), 0), 100000000, 0, -124), (Tag1 (0, (Tag3 ((("t", 751)), [((("a")), 100000000, 0, -123)], (0)), 100000000, 0, -122), (Tag1 (0, ((("acc")), 100000000, 0, -121), ((("acc")), 100000000, 0, -121), 0), 100000000, 0, -120), 0), 100000000, 0, -119), 0), 100000000, 0, -118), 0, (("hashtbl.mli", 392, 15803, 15807), ("hashtbl.mli", 393, 15818, 15875), 0), 0, Tag1 ("Stdlib__Hashtbl", 50)), 0); (("length", 766), ((Tag1 (0, (Tag3 ((("t", 751)), [((("a")), 100000000, 0, -117)], (0)), 100000000, 0, -116), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -115), 0), 100000000, 0, -114), 0, (("hashtbl.mli", 394, 15876, 15880), ("hashtbl.mli", 394, 15876, 15904), 0), 0, Tag1 ("Stdlib__Hashtbl", 51)), 0); (("stats", 767), ((Tag1 (0, (Tag3 ((("t", 751)), [((("a")), 100000000, 0, -113)], (0)), 100000000, 0, -112), (Tag3 (Tag1 ((Tag2 ("Stdlib__Hashtbl")), "statistics"), 0, (0)), 100000000, 0, -111), 0), 100000000, 0, -110), 0, (("hashtbl.mli", 395, 15905, 15909), ("hashtbl.mli", 395, 15905, 15938), 0), 0, Tag1 ("Stdlib__Hashtbl", 52)), 0); (("to_seq", 768), ((Tag1 (0, (Tag3 ((("t", 751)), [((("a")), 100000000, 0, -108)], (0)), 100000000, 0, -109), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 750)), 0, (0)), 100000000, 0, -107); ((("a")), 100000000, 0, -108)]), 100000000, 0, -106)], (0)), 100000000, 0, -105), 0), 100000000, 0, -104), 0, (("hashtbl.mli", 397, 15959, 15963), ("hashtbl.mli", 397, 15959, 16000), 0), 0, Tag1 ("Stdlib__Hashtbl", 53)), 0); (("to_seq_keys", 769), ((Tag1 (0, (Tag3 ((("t", 751)), [((0), 100000000, 0, -103)], (0)), 100000000, 0, -102), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("key", 750)), 0, (0)), 100000000, 0, -101)], (0)), 100000000, 0, -100), 0), 100000000, 0, -99), 0, (("hashtbl.mli", 400, 16025, 16029), ("hashtbl.mli", 400, 16025, 16063), 0), 0, Tag1 ("Stdlib__Hashtbl", 54)), 0); (("to_seq_values", 770), ((Tag1 (0, (Tag3 ((("t", 751)), [((("a")), 100000000, 0, -97)], (0)), 100000000, 0, -98), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [((("a")), 100000000, 0, -97)], (0)), 100000000, 0, -96), 0), 100000000, 0, -95), 0, (("hashtbl.mli", 403, 16088, 16092), ("hashtbl.mli", 403, 16088, 16128), 0), 0, Tag1 ("Stdlib__Hashtbl", 55)), 0); (("add_seq", 771), ((Tag1 (0, (Tag3 ((("t", 751)), [((("a")), 100000000, 0, -93)], (0)), 100000000, 0, -94), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 750)), 0, (0)), 100000000, 0, -92); ((("a")), 100000000, 0, -93)]), 100000000, 0, -91)], (0)), 100000000, 0, -90), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -89), 0), 100000000, 0, -88), 0), 100000000, 0, -87), 0, (("hashtbl.mli", 406, 16153, 16157), ("hashtbl.mli", 406, 16153, 16203), 0), 0, Tag1 ("Stdlib__Hashtbl", 56)), 0); (("replace_seq", 772), ((Tag1 (0, (Tag3 ((("t", 751)), [((("a")), 100000000, 0, -85)], (0)), 100000000, 0, -86), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 750)), 0, (0)), 100000000, 0, -84); ((("a")), 100000000, 0, -85)]), 100000000, 0, -83)], (0)), 100000000, 0, -82), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -81), 0), 100000000, 0, -80), 0), 100000000, 0, -79), 0, (("hashtbl.mli", 409, 16228, 16232), ("hashtbl.mli", 409, 16228, 16282), 0), 0, Tag1 ("Stdlib__Hashtbl", 57)), 0); (("of_seq", 773), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 750)), 0, (0)), 100000000, 0, -78); ((("a")), 100000000, 0, -75)]), 100000000, 0, -77)], (0)), 100000000, 0, -76), (Tag3 ((("t", 751)), [((("a")), 100000000, 0, -75)], (0)), 100000000, 0, -74), 0), 100000000, 0, -73), 0, (("hashtbl.mli", 412, 16307, 16311), ("hashtbl.mli", 412, 16307, 16348), 0), 0, Tag1 ("Stdlib__Hashtbl", 58)), 0)]), 0, (("plugins/nsatz/ideal.mli", 48, 1363, 1363), ("plugins/nsatz/ideal.mli", 48, 1363, 1410), 0), Tag1 ("Nsatz_plugin__Ideal", 26)), 0, 0)])), 0, (("plugins/nsatz/ideal.mli", 22, 809, 809), ("plugins/nsatz/ideal.mli", 50, 1412, 1415), 0), Tag1 ("Nsatz_plugin__Ideal", 27)), 0, 0); Tag2 (("NotInIdeal", 729), ((Tag3 ("exn", 7)), 0, (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Nsatz_plugin__Ideal", 28)), 2, 0); (("lexico", 730), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3)], (0)), 100000000, 0, -2), 0, (("plugins/nsatz/ideal.mli", 54, 1439, 1439), ("plugins/nsatz/ideal.mli", 54, 1439, 1460), 0), 0, Tag1 ("Nsatz_plugin__Ideal", 29)), 0)], "Nsatz_plugin__Ideal", [("Nsatz_plugin__Ideal", ("\178\127WV2[\156\237k\189\221\243\018:1\142")); ("Z", ("\253\196\2168\027\199O\134\220\218\031'\1484\233o")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Random", ("\020\005Xq\171\026\218\152X\135\254\023\133zK\200")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Q", ("\218\007\225\192\225Mh\230\031\238?\184\253\164\020\127")); ("Nsatz_plugin__Polynom", ("\190d\019Gp.\\\172\236\251\225\225O\227\169\205")); ("Nsatz_plugin", ("N\bi\156\012\1272\251\224-\025\236:*\140X")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

val lexico : bool ref

val fresh_var : ?prefix:string -> unit -> string
type ty = Ty : 'a Ctypes_static.typ -> ty
type tfn = Fn : 'a Ctypes_static.fn -> tfn
type fieldname = string
type cfunction = {
  fname : string;
  allocates : bool;
  reads_ocaml_heap : bool;
  fn : tfn;
}
type cglobal = { name : string; typ : ty; references_ocaml_heap : bool; }
type clocal = [ `Local of string * ty ]
type cvar = [ `Global of cglobal | `Local of string * ty ]
type storage_class = [ `Extern | `Static ]
type cconst = [ `Int of Signed.sint ]
type cexp =
    [ `Addr of cvar
    | `Cast of ty * cexp
    | `Int of Signed.sint
    | `Local of string * ty ]
type clvalue =
    [ `Field of clvalue * fieldname
    | `Global of cglobal
    | `Index of clvalue * cexp
    | `Local of string * ty
    | `PointerField of clvalue * fieldname ]
type camlop = [ `CAMLdrop | `CAMLlocalN of cexp * cexp | `CAMLparam0 ]
type ceff =
    [ `Addr of cvar
    | `App of cfunction * cexp list
    | `CAMLdrop
    | `CAMLlocalN of cexp * cexp
    | `CAMLparam0
    | `Cast of ty * cexp
    | `Deref of cexp
    | `DerefField of cexp * fieldname
    | `Global of cglobal
    | `Index of ceff * cexp
    | `Int of Signed.sint
    | `Local of string * ty ]
type cbind = clocal * ceff
type ccomp =
    [ `Addr of cvar
    | `App of cfunction * cexp list
    | `CAMLdrop
    | `CAMLlocalN of cexp * cexp
    | `CAMLparam of string list * ccomp
    | `CAMLparam0
    | `CAMLreturnT of ty * cexp
    | `Cast of ty * cexp
    | `Deref of cexp
    | `DerefField of cexp * fieldname
    | `Global of cglobal
    | `Index of ceff * cexp
    | `Int of Signed.sint
    | `Let of cbind * ccomp
    | `LetAssign of clvalue * ceff * ccomp
    | `LetConst of clocal * cconst * ccomp
    | `Local of string * ty
    | `Return of ty * cexp ]
type cfundec = [ `Fundec of string * (string * ty) list * ty ]
type cfundef = [ `Function of cfundec * ccomp * storage_class ]
val return_type : 'a Ctypes_static.fn -> ty
val args : 'a Ctypes_static.fn -> (string * ty) list
module Type_C :
  sig
    val cexp : cexp -> ty
    val camlop : camlop -> ty
    val ceff : ceff -> ty
    val reference_ceff : ceff -> ty
    val field_ceff : ceff -> fieldname -> ty
    val lookup_field :
      string ->
      'a Ctypes_static.typ -> 's Ctypes_static.boxed_field list -> ty
    val ccomp : ccomp -> ty
  end
val value : [ `value ] Ctypes_static.abstract Ctypes_static.typ
val reader : string -> 'a Ctypes_static.fn -> cfunction
val conser : string -> 'a Ctypes_static.fn -> cfunction
val immediater : string -> 'a Ctypes_static.fn -> cfunction
module Unchecked_function_types :
  sig
    val ( @-> ) :
      'a Ctypes_static.typ ->
      'b Ctypes_static.fn -> ('a -> 'b) Ctypes_static.fn
    val returning : 'a Ctypes_static.typ -> 'a Ctypes_static.fn
  end
val prim_prj : 'a Ctypes_primitive_types.prim -> cfunction
("DEBUG:rule", [(("fresh_var", 1055), ((Tag1 (Tag1 ("prefix"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -193)], (0)), 100000000, 0, -192), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -191), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -190), 0), 100000000, 0, -189), 0), 100000000, 0, -188), 0, (("src/cstubs/cstubs_c_language.ml", 14, 218, 222), ("src/cstubs/cstubs_c_language.ml", 14, 218, 231), 0), 0, Tag1 ("Cstubs_c_language", 0)), 0); Tag1 (("ty", 1056), (0, 0, Tag1 ([(("Ty", 394), ([(Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "typ"), [((0), 100000000, 0, -187)], (0)), 100000000, 0, -186)]), ((Tag3 ((("ty", 1056)), 0, (0)), 100000000, 0, -185)), (("src/cstubs/cstubs_c_language.ml", 20, 358, 368), ("src/cstubs/cstubs_c_language.ml", 20, 358, 384), 0), 0, Tag1 ("Cstubs_c_language", 6))], 0), 1, 0, 0, 0, 0, 0, (("src/cstubs/cstubs_c_language.ml", 20, 358, 358), ("src/cstubs/cstubs_c_language.ml", 20, 358, 384), 0), 0, 0, 1, Tag1 ("Cstubs_c_language", 5)), 1, 0); Tag1 (("tfn", 1057), (0, 0, Tag1 ([(("Fn", 396), ([(Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "fn"), [((0), 100000000, 0, -184)], (0)), 100000000, 0, -183)]), ((Tag3 ((("tfn", 1057)), 0, (0)), 100000000, 0, -182)), (("src/cstubs/cstubs_c_language.ml", 21, 385, 396), ("src/cstubs/cstubs_c_language.ml", 21, 385, 412), 0), 0, Tag1 ("Cstubs_c_language", 8))], 0), 1, 0, 0, 0, 0, 0, (("src/cstubs/cstubs_c_language.ml", 21, 385, 385), ("src/cstubs/cstubs_c_language.ml", 21, 385, 412), 0), 0, 0, 1, Tag1 ("Cstubs_c_language", 7)), 1, 0); Tag1 (("fieldname", 1058), (0, 0, 0, 1, ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -181)), 0, 0, 0, 0, (("src/cstubs/cstubs_c_language.ml", 23, 414, 414), ("src/cstubs/cstubs_c_language.ml", 23, 414, 437), 0), 0, 0, 0, Tag1 ("Cstubs_c_language", 9)), 1, 0); Tag1 (("cfunction", 1059), (0, 0, [[(("fname", 399), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -177), (("src/cstubs/cstubs_c_language.ml", 26, 458, 460), ("src/cstubs/cstubs_c_language.ml", 26, 458, 474), 0), 0, Tag1 ("Cstubs_c_language", 11)); (("allocates", 400), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -178), (("src/cstubs/cstubs_c_language.ml", 27, 475, 477), ("src/cstubs/cstubs_c_language.ml", 27, 475, 493), 0), 0, Tag1 ("Cstubs_c_language", 12)); (("reads_ocaml_heap", 401), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -179), (("src/cstubs/cstubs_c_language.ml", 28, 494, 496), ("src/cstubs/cstubs_c_language.ml", 28, 494, 519), 0), 0, Tag1 ("Cstubs_c_language", 13)); (("fn", 402), 0, (Tag3 ((("tfn", 1057)), 0, (0)), 100000000, 0, -180), (("src/cstubs/cstubs_c_language.ml", 29, 520, 522), ("src/cstubs/cstubs_c_language.ml", 29, 520, 530), 0), 0, Tag1 ("Cstubs_c_language", 14))]], 1, 0, 0, 0, 0, 0, (("src/cstubs/cstubs_c_language.ml", 25, 439, 439), ("src/cstubs/cstubs_c_language.ml", 30, 531, 532), 0), 0, 0, 0, Tag1 ("Cstubs_c_language", 10)), 1, 0); Tag1 (("cglobal", 1060), (0, 0, [[(("name", 404), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -174), (("src/cstubs/cstubs_c_language.ml", 33, 551, 553), ("src/cstubs/cstubs_c_language.ml", 33, 551, 566), 0), 0, Tag1 ("Cstubs_c_language", 16)); (("typ", 405), 0, (Tag3 ((("ty", 1056)), 0, (0)), 100000000, 0, -175), (("src/cstubs/cstubs_c_language.ml", 34, 567, 569), ("src/cstubs/cstubs_c_language.ml", 34, 567, 577), 0), 0, Tag1 ("Cstubs_c_language", 17)); (("references_ocaml_heap", 406), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -176), (("src/cstubs/cstubs_c_language.ml", 35, 578, 580), ("src/cstubs/cstubs_c_language.ml", 35, 578, 608), 0), 0, Tag1 ("Cstubs_c_language", 18))]], 1, 0, 0, 0, 0, 0, (("src/cstubs/cstubs_c_language.ml", 32, 534, 534), ("src/cstubs/cstubs_c_language.ml", 36, 609, 610), 0), 0, 0, 0, Tag1 ("Cstubs_c_language", 15)), 1, 0); Tag1 (("clocal", 1061), (0, 0, 0, 1, ((Tag8 (([("Local", (((Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -172); (Tag3 ((("ty", 1056)), 0, (0)), 100000000, 0, -173)]), 100000000, 0, -171))))], (0, 100000000, 0, -170), 1, 0, 0)), 100000000, 0, -169)), 0, 0, 0, 0, (("src/cstubs/cstubs_c_language.ml", 38, 612, 612), ("src/cstubs/cstubs_c_language.ml", 38, 612, 651), 0), 0, 0, 0, Tag1 ("Cstubs_c_language", 19)), 1, 0); Tag1 (("cvar", 1062), (0, 0, 0, 1, ((Tag8 (([("Global", (((Tag3 ((("cglobal", 1060)), 0, (0)), 100000000, 0, -168)))); ("Local", (((Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -166); (Tag3 ((("ty", 1056)), 0, (0)), 100000000, 0, -167)]), 100000000, 0, -165))))], (0, 100000000, 0, -164), 1, 0, 0)), 100000000, 0, -163)), 0, 0, 0, 0, (("src/cstubs/cstubs_c_language.ml", 39, 652, 652), ("src/cstubs/cstubs_c_language.ml", 39, 652, 695), 0), 0, 0, 0, Tag1 ("Cstubs_c_language", 20)), 1, 0); Tag1 (("storage_class", 1063), (0, 0, 0, 1, ((Tag8 (([("Extern", (0)); ("Static", (0))], (0, 100000000, 0, -162), 1, 0, 0)), 100000000, 0, -161)), 0, 0, 0, 0, (("src/cstubs/cstubs_c_language.ml", 40, 696, 696), ("src/cstubs/cstubs_c_language.ml", 40, 696, 736), 0), 0, 1, 0, Tag1 ("Cstubs_c_language", 21)), 1, 0); Tag1 (("cconst", 1064), (0, 0, 0, 1, ((Tag8 (([("Int", (((Tag3 (Tag1 ((Tag2 ("Signed")), "sint"), 0, (0)), 100000000, 0, -160))))], (0, 100000000, 0, -159), 1, 0, 0)), 100000000, 0, -158)), 0, 0, 0, 0, (("src/cstubs/cstubs_c_language.ml", 41, 737, 737), ("src/cstubs/cstubs_c_language.ml", 41, 737, 774), 0), 0, 0, 0, Tag1 ("Cstubs_c_language", 22)), 1, 0); Tag1 (("cexp", 1065), (0, 0, 0, 1, ((Tag8 (([("Addr", (((Tag3 ((("cvar", 1062)), 0, (0)), 100000000, 0, -156)))); ("Cast", (((Tag2 ([(Tag3 ((("ty", 1056)), 0, (0)), 100000000, 0, -151); (Tag3 ((("cexp", 1065)), 0, (0)), 100000000, 0, -152)]), 100000000, 0, -150)))); ("Int", (((Tag3 (Tag1 ((Tag2 ("Signed")), "sint"), 0, (0)), 100000000, 0, -157)))); ("Local", (((Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -154); (Tag3 ((("ty", 1056)), 0, (0)), 100000000, 0, -155)]), 100000000, 0, -153))))], (0, 100000000, 0, -149), 1, 0, 0)), 100000000, 0, -148)), 0, 0, 0, 0, (("src/cstubs/cstubs_c_language.ml", 42, 775, 775), ("src/cstubs/cstubs_c_language.ml", 45, 850, 879), 0), 0, 0, 0, Tag1 ("Cstubs_c_language", 23)), 1, 0); Tag1 (("clvalue", 1066), (0, 0, 0, 1, ((Tag8 (([("Field", (((Tag2 ([(Tag3 ((("clvalue", 1066)), 0, (0)), 100000000, 0, -145); (Tag3 ((("fieldname", 1058)), 0, (0)), 100000000, 0, -146)]), 100000000, 0, -144)))); ("Global", (((Tag3 ((("cglobal", 1060)), 0, (0)), 100000000, 0, -147)))); ("Index", (((Tag2 ([(Tag3 ((("clvalue", 1066)), 0, (0)), 100000000, 0, -136); (Tag3 ((("cexp", 1065)), 0, (0)), 100000000, 0, -137)]), 100000000, 0, -135)))); ("Local", (((Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -139); (Tag3 ((("ty", 1056)), 0, (0)), 100000000, 0, -140)]), 100000000, 0, -138)))); ("PointerField", (((Tag2 ([(Tag3 ((("clvalue", 1066)), 0, (0)), 100000000, 0, -142); (Tag3 ((("fieldname", 1058)), 0, (0)), 100000000, 0, -143)]), 100000000, 0, -141))))], (0, 100000000, 0, -134), 1, 0, 0)), 100000000, 0, -133)), 0, 0, 0, 0, (("src/cstubs/cstubs_c_language.ml", 46, 880, 880), ("src/cstubs/cstubs_c_language.ml", 49, 992, 1047), 0), 0, 0, 0, Tag1 ("Cstubs_c_language", 24)), 1, 0); Tag1 (("camlop", 1067), (0, 0, 0, 1, ((Tag8 (([("CAMLdrop", (0)); ("CAMLlocalN", (((Tag2 ([(Tag3 ((("cexp", 1065)), 0, (0)), 100000000, 0, -131); (Tag3 ((("cexp", 1065)), 0, (0)), 100000000, 0, -132)]), 100000000, 0, -130)))); ("CAMLparam0", (0))], (0, 100000000, 0, -129), 1, 0, 0)), 100000000, 0, -128)), 0, 0, 0, 0, (("src/cstubs/cstubs_c_language.ml", 50, 1048, 1048), ("src/cstubs/cstubs_c_language.ml", 52, 1119, 1146), 0), 0, 0, 0, Tag1 ("Cstubs_c_language", 25)), 1, 0); Tag1 (("ceff", 1068), (0, 0, 0, 1, ((Tag8 (([("Addr", (((Tag3 ((("cvar", 1062)), 0, (0)), 100000000, 0, -117)))); ("App", (((Tag2 ([(Tag3 ((("cfunction", 1059)), 0, (0)), 100000000, 0, -119); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("cexp", 1065)), 0, (0)), 100000000, 0, -121)], (0)), 100000000, 0, -120)]), 100000000, 0, -118)))); ("CAMLdrop", (0)); ("CAMLlocalN", (((Tag2 ([(Tag3 ((("cexp", 1065)), 0, (0)), 100000000, 0, -111); (Tag3 ((("cexp", 1065)), 0, (0)), 100000000, 0, -111)]), 100000000, 0, -110)))); ("CAMLparam0", (0)); ("Cast", (((Tag2 ([(Tag3 ((("ty", 1056)), 0, (0)), 100000000, 0, -113); (Tag3 ((("cexp", 1065)), 0, (0)), 100000000, 0, -111)]), 100000000, 0, -112)))); ("Deref", (((Tag3 ((("cexp", 1065)), 0, (0)), 100000000, 0, -123)))); ("DerefField", (((Tag2 ([(Tag3 ((("cexp", 1065)), 0, (0)), 100000000, 0, -126); (Tag3 ((("fieldname", 1058)), 0, (0)), 100000000, 0, -127)]), 100000000, 0, -125)))); ("Global", (((Tag3 ((("cglobal", 1060)), 0, (0)), 100000000, 0, -122)))); ("Index", (((Tag2 ([(Tag3 ((("ceff", 1068)), 0, (0)), 100000000, 0, -108); (Tag3 ((("cexp", 1065)), 0, (0)), 100000000, 0, -109)]), 100000000, 0, -107)))); ("Int", (((Tag3 (Tag1 ((Tag2 ("Signed")), "sint"), 0, (0)), 100000000, 0, -124)))); ("Local", (((Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -115); (Tag3 ((("ty", 1056)), 0, (0)), 100000000, 0, -116)]), 100000000, 0, -114))))], (0, 100000000, 0, -106), 1, 0, 0)), 100000000, 0, -105)), 0, 0, 0, 0, (("src/cstubs/cstubs_c_language.ml", 53, 1147, 1147), ("src/cstubs/cstubs_c_language.ml", 59, 1329, 1376), 0), 0, 0, 0, Tag1 ("Cstubs_c_language", 26)), 1, 0); Tag1 (("cbind", 1069), (0, 0, 0, 1, ((Tag2 ([(Tag3 ((("clocal", 1061)), 0, (0)), 100000000, 0, -103); (Tag3 ((("ceff", 1068)), 0, (0)), 100000000, 0, -104)]), 100000000, 0, -102)), 0, 0, 0, 0, (("src/cstubs/cstubs_c_language.ml", 60, 1377, 1377), ("src/cstubs/cstubs_c_language.ml", 60, 1377, 1403), 0), 0, 0, 0, Tag1 ("Cstubs_c_language", 27)), 1, 0); Tag1 (("ccomp", 1070), (0, 0, 0, 1, ((Tag8 (([("Addr", (((Tag3 ((("cvar", 1062)), 0, (0)), 100000000, 0, -73)))); ("App", (((Tag2 ([(Tag3 ((("cfunction", 1059)), 0, (0)), 100000000, 0, -79); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("cexp", 1065)), 0, (0)), 100000000, 0, -81)], (0)), 100000000, 0, -80)]), 100000000, 0, -78)))); ("CAMLdrop", (0)); ("CAMLlocalN", (((Tag2 ([(Tag3 ((("cexp", 1065)), 0, (0)), 100000000, 0, -64); (Tag3 ((("cexp", 1065)), 0, (0)), 100000000, 0, -64)]), 100000000, 0, -63)))); ("CAMLparam", (((Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -84)], (0)), 100000000, 0, -83); (Tag3 ((("ccomp", 1070)), 0, (0)), 100000000, 0, -85)]), 100000000, 0, -82)))); ("CAMLparam0", (0)); ("CAMLreturnT", (((Tag2 ([(Tag3 ((("ty", 1056)), 0, (0)), 100000000, 0, -90); (Tag3 ((("cexp", 1065)), 0, (0)), 100000000, 0, -91)]), 100000000, 0, -89)))); ("Cast", (((Tag2 ([(Tag3 ((("ty", 1056)), 0, (0)), 100000000, 0, -66); (Tag3 ((("cexp", 1065)), 0, (0)), 100000000, 0, -64)]), 100000000, 0, -65)))); ("Deref", (((Tag3 ((("cexp", 1065)), 0, (0)), 100000000, 0, -87)))); ("DerefField", (((Tag2 ([(Tag3 ((("cexp", 1065)), 0, (0)), 100000000, 0, -97); (Tag3 ((("fieldname", 1058)), 0, (0)), 100000000, 0, -98)]), 100000000, 0, -96)))); ("Global", (((Tag3 ((("cglobal", 1060)), 0, (0)), 100000000, 0, -86)))); ("Index", (((Tag2 ([(Tag3 ((("ceff", 1068)), 0, (0)), 100000000, 0, -61); (Tag3 ((("cexp", 1065)), 0, (0)), 100000000, 0, -62)]), 100000000, 0, -60)))); ("Int", (((Tag3 (Tag1 ((Tag2 ("Signed")), "sint"), 0, (0)), 100000000, 0, -88)))); ("Let", (((Tag2 ([(Tag3 ((("cbind", 1069)), 0, (0)), 100000000, 0, -100); (Tag3 ((("ccomp", 1070)), 0, (0)), 100000000, 0, -101)]), 100000000, 0, -99)))); ("LetAssign", (((Tag2 ([(Tag3 ((("clvalue", 1066)), 0, (0)), 100000000, 0, -93); (Tag3 ((("ceff", 1068)), 0, (0)), 100000000, 0, -94); (Tag3 ((("ccomp", 1070)), 0, (0)), 100000000, 0, -95)]), 100000000, 0, -92)))); ("LetConst", (((Tag2 ([(Tag3 ((("clocal", 1061)), 0, (0)), 100000000, 0, -75); (Tag3 ((("cconst", 1064)), 0, (0)), 100000000, 0, -76); (Tag3 ((("ccomp", 1070)), 0, (0)), 100000000, 0, -77)]), 100000000, 0, -74)))); ("Local", (((Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -71); (Tag3 ((("ty", 1056)), 0, (0)), 100000000, 0, -72)]), 100000000, 0, -70)))); ("Return", (((Tag2 ([(Tag3 ((("ty", 1056)), 0, (0)), 100000000, 0, -68); (Tag3 ((("cexp", 1065)), 0, (0)), 100000000, 0, -69)]), 100000000, 0, -67))))], (0, 100000000, 0, -59), 1, 0, 0)), 100000000, 0, -58)), 0, 0, 0, 0, (("src/cstubs/cstubs_c_language.ml", 61, 1404, 1404), ("src/cstubs/cstubs_c_language.ml", 67, 1654, 1692), 0), 0, 0, 0, Tag1 ("Cstubs_c_language", 28)), 1, 0); Tag1 (("cfundec", 1071), (0, 0, 0, 1, ((Tag8 (([("Fundec", (((Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -52); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -55); (Tag3 ((("ty", 1056)), 0, (0)), 100000000, 0, -56)]), 100000000, 0, -54)], (0)), 100000000, 0, -53); (Tag3 ((("ty", 1056)), 0, (0)), 100000000, 0, -57)]), 100000000, 0, -51))))], (0, 100000000, 0, -50), 1, 0, 0)), 100000000, 0, -49)), 0, 0, 0, 0, (("src/cstubs/cstubs_c_language.ml", 68, 1693, 1693), ("src/cstubs/cstubs_c_language.ml", 68, 1693, 1755), 0), 0, 0, 0, Tag1 ("Cstubs_c_language", 29)), 1, 0); Tag1 (("cfundef", 1072), (0, 0, 0, 1, ((Tag8 (([("Function", (((Tag2 ([(Tag3 ((("cfundec", 1071)), 0, (0)), 100000000, 0, -46); (Tag3 ((("ccomp", 1070)), 0, (0)), 100000000, 0, -47); (Tag3 ((("storage_class", 1063)), 0, (0)), 100000000, 0, -48)]), 100000000, 0, -45))))], (0, 100000000, 0, -44), 1, 0, 0)), 100000000, 0, -43)), 0, 0, 0, 0, (("src/cstubs/cstubs_c_language.ml", 69, 1756, 1756), ("src/cstubs/cstubs_c_language.ml", 69, 1756, 1819), 0), 0, 0, 0, Tag1 ("Cstubs_c_language", 30)), 1, 0); (("return_type", 1073), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "fn"), [((("a")), 100000000, 0, -42)], (0)), 100000000, 0, -41), (Tag3 ((("ty", 1056)), 0, (0)), 100000000, 0, -40), 0), 100000000, 0, -39), 0, (("src/cstubs/cstubs_c_language.ml", 71, 1821, 1829), ("src/cstubs/cstubs_c_language.ml", 71, 1821, 1840), 0), 0, Tag1 ("Cstubs_c_language", 31)), 0); (("args", 1074), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "fn"), [((("a")), 100000000, 0, -38)], (0)), 100000000, 0, -37), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -35); (Tag3 ((("ty", 1056)), 0, (0)), 100000000, 0, -36)]), 100000000, 0, -34)], (0)), 100000000, 0, -33), 0), 100000000, 0, -32), 0, (("src/cstubs/cstubs_c_language.ml", 75, 1933, 1937), ("src/cstubs/cstubs_c_language.ml", 75, 1933, 1941), 0), 0, Tag1 ("Cstubs_c_language", 39)), 0); Tag3 (("Type_C", 1075), 0, (Tag1 ([(("cexp", 1083), ((Tag1 (0, (Tag3 ((("cexp", 1065)), 0, (0)), 100000000, 0, -223), (Tag3 ((("ty", 1056)), 0, (0)), 100000000, 0, -222), 0), 100000000, 0, -221), 0, (("src/cstubs/cstubs_c_language.ml", 83, 2208, 2214), ("src/cstubs/cstubs_c_language.ml", 83, 2208, 2218), 0), 0, Tag1 ("Cstubs_c_language", 50)), 0); (("camlop", 1084), ((Tag1 (0, (Tag3 ((("camlop", 1067)), 0, (0)), 100000000, 0, -220), (Tag3 ((("ty", 1056)), 0, (0)), 100000000, 0, -219), 0), 100000000, 0, -218), 0, (("src/cstubs/cstubs_c_language.ml", 90, 2436, 2442), ("src/cstubs/cstubs_c_language.ml", 90, 2436, 2448), 0), 0, Tag1 ("Cstubs_c_language", 58)), 0); (("ceff", 1085), ((Tag1 (0, (Tag3 ((("ceff", 1068)), 0, (0)), 100000000, 0, -217), (Tag3 ((("ty", 1056)), 0, (0)), 100000000, 0, -216), 0), 100000000, 0, -215), 0, (("src/cstubs/cstubs_c_language.ml", 95, 2541, 2551), ("src/cstubs/cstubs_c_language.ml", 95, 2541, 2555), 0), 0, Tag1 ("Cstubs_c_language", 59)), 0); (("reference_ceff", 1086), ((Tag1 (0, (Tag3 ((("ceff", 1068)), 0, (0)), 100000000, 0, -214), (Tag3 ((("ty", 1056)), 0, (0)), 100000000, 0, -213), 0), 100000000, 0, -212), 0, (("src/cstubs/cstubs_c_language.ml", 103, 2852, 2858), ("src/cstubs/cstubs_c_language.ml", 103, 2852, 2872), 0), 0, Tag1 ("Cstubs_c_language", 60)), 0); (("field_ceff", 1087), ((Tag1 (0, (Tag3 ((("ceff", 1068)), 0, (0)), 100000000, 0, -211), (Tag1 (0, (Tag3 ((("fieldname", 1058)), 0, (0)), 100000000, 0, -210), (Tag3 ((("ty", 1056)), 0, (0)), 100000000, 0, -209), 0), 100000000, 0, -208), 0), 100000000, 0, -207), 0, (("src/cstubs/cstubs_c_language.ml", 112, 3146, 3152), ("src/cstubs/cstubs_c_language.ml", 112, 3146, 3162), 0), 0, Tag1 ("Cstubs_c_language", 61)), 0); (("lookup_field", 1088), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -206), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "typ"), [((("a")), 100000000, 0, -205)], (0)), 100000000, 0, -204), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "boxed_field"), [((("s")), 100000000, 0, -203)], (0)), 100000000, 0, -202)], (0)), 100000000, 0, -201), (Tag3 ((("ty", 1056)), 0, (0)), 100000000, 0, -200), 0), 100000000, 0, -199), 0), 100000000, 0, -198), 0), 100000000, 0, -197), 0, (("src/cstubs/cstubs_c_language.ml", 120, 3505, 3511), ("src/cstubs/cstubs_c_language.ml", 120, 3505, 3523), 0), 0, Tag1 ("Cstubs_c_language", 62)), 0); (("ccomp", 1089), ((Tag1 (0, (Tag3 ((("ccomp", 1070)), 0, (0)), 100000000, 0, -196), (Tag3 ((("ty", 1056)), 0, (0)), 100000000, 0, -195), 0), 100000000, 0, -194), 0, (("src/cstubs/cstubs_c_language.ml", 128, 3877, 3887), ("src/cstubs/cstubs_c_language.ml", 128, 3877, 3892), 0), 0, Tag1 ("Cstubs_c_language", 115)), 0)]), 0, (("src/cstubs/cstubs_c_language.ml", 81, 2185, 2185), ("src/cstubs/cstubs_c_language.ml", 137, 4161, 4164), 0), Tag1 ("Cstubs_c_language", 123)), 0, 0); (("value", 1076), ((Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "typ"), [(Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "abstract"), [(Tag8 (([("value", (0))], (0, 100000000, 0, -31), 1, 0, 0)), 100000000, 0, -30)], (0)), 100000000, 0, -29)], (0)), 100000000, 0, -28), 0, (("src/cstubs/cstubs_c_language.ml", 139, 4166, 4170), ("src/cstubs/cstubs_c_language.ml", 139, 4166, 4175), 0), 0, Tag1 ("Cstubs_c_language", 124)), 0); (("reader", 1077), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -27), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "fn"), [((0), 100000000, 0, -26)], (0)), 100000000, 0, -25), (Tag3 ((("cfunction", 1059)), 0, (0)), 100000000, 0, -24), 0), 100000000, 0, -23), 0), 100000000, 0, -22), 0, (("src/cstubs/cstubs_c_language.ml", 141, 4247, 4251), ("src/cstubs/cstubs_c_language.ml", 141, 4247, 4257), 0), 0, Tag1 ("Cstubs_c_language", 125)), 0); (("conser", 1078), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -21), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "fn"), [((0), 100000000, 0, -20)], (0)), 100000000, 0, -19), (Tag3 ((("cfunction", 1059)), 0, (0)), 100000000, 0, -18), 0), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("src/cstubs/cstubs_c_language.ml", 143, 4337, 4341), ("src/cstubs/cstubs_c_language.ml", 143, 4337, 4347), 0), 0, Tag1 ("Cstubs_c_language", 128)), 0); (("immediater", 1079), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -15), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "fn"), [((0), 100000000, 0, -14)], (0)), 100000000, 0, -13), (Tag3 ((("cfunction", 1059)), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0), 100000000, 0, -10), 0, (("src/cstubs/cstubs_c_language.ml", 145, 4427, 4431), ("src/cstubs/cstubs_c_language.ml", 145, 4427, 4441), 0), 0, Tag1 ("Cstubs_c_language", 131)), 0); Tag3 (("Unchecked_function_types", 1080), 0, (Tag1 ([(("@->", 1090), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "typ"), [((0), 100000000, 0, -233)], (0)), 100000000, 0, -235), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "fn"), [((0), 100000000, 0, -232)], (0)), 100000000, 0, -234), (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "fn"), [(Tag1 (0, ((0), 100000000, 0, -233), ((0), 100000000, 0, -232), 0), 100000000, 0, -231)], (0)), 100000000, 0, -230), 0), 100000000, 0, -229), 0), 100000000, 0, -228), 0, (("src/cstubs/cstubs_c_language.ml", 153, 4795, 4801), ("src/cstubs/cstubs_c_language.ml", 153, 4795, 4806), 0), 0, Tag1 ("Cstubs_c_language", 134)), 0); (("returning", 1091), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "typ"), [((0), 100000000, 0, -226)], (0)), 100000000, 0, -227), (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "fn"), [((0), 100000000, 0, -226)], (0)), 100000000, 0, -225), 0), 100000000, 0, -224), 0, (("src/cstubs/cstubs_c_language.ml", 154, 4829, 4835), ("src/cstubs/cstubs_c_language.ml", 154, 4829, 4844), 0), 0, Tag1 ("Cstubs_c_language", 137)), 0)]), 0, (("src/cstubs/cstubs_c_language.ml", 148, 4523, 4523), ("src/cstubs/cstubs_c_language.ml", 155, 4859, 4862), 0), Tag1 ("Cstubs_c_language", 139)), 0, 0); (("prim_prj", 1081), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes_primitive_types")), "prim"), [((("a")), 100000000, 0, -9)], (0)), 100000000, 0, -8), (Tag3 ((("cfunction", 1059)), 0, (0)), 100000000, 0, -7), 0), 100000000, 0, -6), 0, (("src/cstubs/cstubs_c_language.ml", 157, 4864, 4868), ("src/cstubs/cstubs_c_language.ml", 157, 4864, 4876), 0), 0, Tag1 ("Cstubs_c_language", 140)), 0); (("prim_inj", 1082), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes_primitive_types")), "prim"), [((("a")), 100000000, 0, -5)], (0)), 100000000, 0, -4), (Tag3 ((("cfunction", 1059)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/cstubs/cstubs_c_language.ml", 191, 6976, 6980), ("src/cstubs/cstubs_c_language.ml", 191, 6976, 6988), 0), 0, Tag1 ("Cstubs_c_language", 201)), 0)], "Cstubs_c_language", [("Cstubs_c_language", ("%\247\014\194\016\021\167n\219\020\004*\254f4f")); ("Unsigned", ("cd\205\030\181\167\151\005!\134;\177\228\249\168+")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Printf", ("\215<\139]\021\142\224E\245m\198qc(W\229")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Signed", ("R\017i\"\030\024\134f\143\198\192\180>t\175\225")); ("LDouble", ("j\251\140\230^u\251\210\143\236T\207\022\147\011\211")); ("Ctypes_types", ("\140\014\176\188\187lo3aC\196\012\228vn+")); ("Ctypes_static", ("U\030\169\129GB\138P\158'd\012\131\157\202\018")); ("Ctypes_ptr", ("V\021o\161\007\161\245R\242\222:e\151\189\175\207")); ("Ctypes_primitive_types", ("\147\237\001\150\136\017Z\2308\137C\245\023\133\161\158")); ("Ctypes_bigarray", ("\146\0055mmn\243\187gd\185P\208J\254l")); ("Ctypes", ("\201\151\139N\189F\151(\218n\234\177\197RtW")); ("Cstubs_errors", ("V\210+\199\163h\220*\203,\019\243d\210*\021")); ("ComplexL", ("\n\230\139\192\213\0226\203\176\242\200\205c\155ag")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Bigarray_compat", ("\150\219\208\188w\237\216\005\r[\152q'\006x\217"))], [(0)])
val prim_inj : 'a Ctypes_primitive_types.prim -> cfunction

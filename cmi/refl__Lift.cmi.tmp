module Make :
  functor (Target : Metapp.ValueS) ->
    sig
      module Lifter : sig type 'a t = 'a -> Target.t end
      module Lifters :
        sig
          module T : sig type 'a t = 'a Lifter.t end
          type ('a, 'occurrence) item =
            ('a, 'occurrence) Refl__Tools.Vector(Lifter).item =
              None : ('b, [ `Absent ]) item
            | Some : 'a T.t -> ('a, 'c) item
          type ('sequence, 'occurrences) t =
            ('sequence, 'occurrences) Refl__Tools.Vector(Lifter).t =
              [] : (unit, unit) t
            | (::) : ('head, 'occurrence) item *
                ('tail, 'occurrences) t -> ('head * 'tail,
                                            'occurrence * 'occurrences)
                                           t
          val get :
            ('index, 'sequence, 'value, 'positive, 'occurrences)
            Refl__.Desc.variable -> ('sequence, 'occurrences) t -> 'value T.t
          val make_transfer :
            ('source, 'sub, 'arg) Refl__.Desc.transfer_arguments ->
            ('sequence, 'source) t ->
            (('sequence, 'arg) t, ('sub, [ `Absent ]) Refl__.Desc.eq) result
          type ('arity, 'rec_group, 'kinds) make =
            ('arity, 'rec_group, 'kinds) Refl__Tools.Vector(Lifter).make = {
            f :
              'a 'structure 'ap 'an 'ad 'gadt.
                ('a, 'structure, 'arity, 'rec_group, 'kinds, 'ap, 'an, 'ad,
                 'gadt)
                Refl__.Desc.desc -> ('arity, 'ad) t -> 'a T.t;
          }
          val make :
            ('arity, 'rec_group, 'kinds) make ->
            ('types, 'structures, 'arity, 'rec_group, 'kinds, 'arguments,
             'gadt)
            Refl__.Desc.vector ->
            ('positive, 'negative, 'direct, 'subpositive, 'subnegative,
             'subdirect, 'arguments)
            Refl__.Desc.transfer_skip ->
            ('arity, 'direct) t -> ('types, 'subdirect) t
          type 'presence any =
            'presence Refl__Tools.Vector(Lifter).any =
              None : [ `Absent ] any
            | Some : { item : 'a. 'a T.t; } -> 'b any
          val append :
            'presence any ->
            ('presence, 'directs) Refl__.Desc.presences ->
            ('count, 'directs) Refl__.Desc.length ->
            ('directs, 'direct, 'subdirect) Refl__.Desc.append ->
            ('count, 'types) Refl__.Desc.length ->
            ('types, 'arity, 'subarity) Refl__.Desc.append ->
            ('arity, 'direct) t -> ('subarity, 'subdirect) t
          val to_sequence :
            [ `Present ] any ->
            ('sequence, 'occurrences) t ->
            'sequence Refl__.Desc.Sequence(T).t
        end
      type 'a hook_fun =
          'a Refl__.Desc.refl -> (?hook:hook -> 'a Lifter.t) -> 'a Lifter.t
      and hook = { hook : 'a. 'a hook_fun; }
      val lift :
        ?hook:hook ->
        ('a, 'structure, 'arity, 'rec_group,
         [< Refl__.Desc.Kinds.liftable
          > `Array `Arrow `Attributes `Bool `Bytes `Char `Constr `Exists
            `Float `Int `Int32 `Int64 `Lazy `MapOpaque `Nativeint `Object
            `Opaque `Record `String `Tuple `Variable `Variant ],
         'positive, 'negative, 'direct, 'gadt)
        Refl__.Desc.desc -> ('arity, 'direct) Lifters.t -> 'a Lifter.t
    end
module Exp :
  sig
    module Lifter : sig type 'a t = 'a -> Metapp.Exp.t end
    module Lifters :
      sig
        module T : sig type 'a t = 'a Lifter.t end
        type ('a, 'occurrence) item =
          ('a, 'occurrence) Refl__Tools.Vector(Lifter).item =
            None : ('b, [ `Absent ]) item
          | Some : 'a T.t -> ('a, 'c) item
        type ('sequence, 'occurrences) t =
          ('sequence, 'occurrences) Refl__Tools.Vector(Lifter).t =
            [] : (unit, unit) t
          | (::) : ('head, 'occurrence) item *
              ('tail, 'occurrences) t -> ('head * 'tail,
                                          'occurrence * 'occurrences)
                                         t
        val get :
          ('index, 'sequence, 'value, 'positive, 'occurrences)
          Refl__.Desc.variable -> ('sequence, 'occurrences) t -> 'value T.t
        val make_transfer :
          ('source, 'sub, 'arg) Refl__.Desc.transfer_arguments ->
          ('sequence, 'source) t ->
          (('sequence, 'arg) t, ('sub, [ `Absent ]) Refl__.Desc.eq) result
        type ('arity, 'rec_group, 'kinds) make =
          ('arity, 'rec_group, 'kinds) Refl__Tools.Vector(Lifter).make = {
          f :
            'a 'structure 'ap 'an 'ad 'gadt.
              ('a, 'structure, 'arity, 'rec_group, 'kinds, 'ap, 'an, 'ad,
               'gadt)
              Refl__.Desc.desc -> ('arity, 'ad) t -> 'a T.t;
        }
        val make :
          ('arity, 'rec_group, 'kinds) make ->
          ('types, 'structures, 'arity, 'rec_group, 'kinds, 'arguments,
           'gadt)
          Refl__.Desc.vector ->
          ('positive, 'negative, 'direct, 'subpositive, 'subnegative,
           'subdirect, 'arguments)
          Refl__.Desc.transfer_skip ->
          ('arity, 'direct) t -> ('types, 'subdirect) t
        type 'presence any =
          'presence Refl__Tools.Vector(Lifter).any =
            None : [ `Absent ] any
          | Some : { item : 'a. 'a T.t; } -> 'b any
        val append :
          'presence any ->
          ('presence, 'directs) Refl__.Desc.presences ->
          ('count, 'directs) Refl__.Desc.length ->
          ('directs, 'direct, 'subdirect) Refl__.Desc.append ->
          ('count, 'types) Refl__.Desc.length ->
          ('types, 'arity, 'subarity) Refl__.Desc.append ->
          ('arity, 'direct) t -> ('subarity, 'subdirect) t
        val to_sequence :
          [ `Present ] any ->
          ('sequence, 'occurrences) t -> 'sequence Refl__.Desc.Sequence(T).t
      end
    type 'a hook_fun =
        'a Refl__.Desc.refl -> (?hook:hook -> 'a Lifter.t) -> 'a Lifter.t
    and hook = Make(Metapp.Exp).hook = { hook : 'a. 'a hook_fun; }
    val lift :
      ?hook:hook ->
      ('a, 'structure, 'arity, 'rec_group,
       [< Refl__.Desc.Kinds.liftable
        > `Array `Arrow `Attributes `Bool `Bytes `Char `Constr `Exists `Float
          `Int `Int32 `Int64 `Lazy `MapOpaque `Nativeint `Object `Opaque
          `Record `String `Tuple `Variable `Variant ],
       'positive, 'negative, 'direct, 'gadt)
      Refl__.Desc.desc -> ('arity, 'direct) Lifters.t -> 'a Lifter.t
  end
module Pat :
  sig
    module Lifter : sig type 'a t = 'a -> Metapp.Pat.t end
    module Lifters :
      sig
        module T : sig type 'a t = 'a Lifter.t end
        type ('a, 'occurrence) item =
          ('a, 'occurrence) Refl__Tools.Vector(Lifter).item =
            None : ('b, [ `Absent ]) item
          | Some : 'a T.t -> ('a, 'c) item
        type ('sequence, 'occurrences) t =
          ('sequence, 'occurrences) Refl__Tools.Vector(Lifter).t =
            [] : (unit, unit) t
          | (::) : ('head, 'occurrence) item *
              ('tail, 'occurrences) t -> ('head * 'tail,
                                          'occurrence * 'occurrences)
                                         t
        val get :
          ('index, 'sequence, 'value, 'positive, 'occurrences)
          Refl__.Desc.variable -> ('sequence, 'occurrences) t -> 'value T.t
        val make_transfer :
          ('source, 'sub, 'arg) Refl__.Desc.transfer_arguments ->
          ('sequence, 'source) t ->
          (('sequence, 'arg) t, ('sub, [ `Absent ]) Refl__.Desc.eq) result
        type ('arity, 'rec_group, 'kinds) make =
          ('arity, 'rec_group, 'kinds) Refl__Tools.Vector(Lifter).make = {
          f :
            'a 'structure 'ap 'an 'ad 'gadt.
              ('a, 'structure, 'arity, 'rec_group, 'kinds, 'ap, 'an, 'ad,
               'gadt)
              Refl__.Desc.desc -> ('arity, 'ad) t -> 'a T.t;
        }
        val make :
          ('arity, 'rec_group, 'kinds) make ->
          ('types, 'structures, 'arity, 'rec_group, 'kinds, 'arguments,
           'gadt)
          Refl__.Desc.vector ->
          ('positive, 'negative, 'direct, 'subpositive, 'subnegative,
           'subdirect, 'arguments)
          Refl__.Desc.transfer_skip ->
          ('arity, 'direct) t -> ('types, 'subdirect) t
        type 'presence any =
          'presence Refl__Tools.Vector(Lifter).any =
            None : [ `Absent ] any
          | Some : { item : 'a. 'a T.t; } -> 'b any
        val append :
          'presence any ->
          ('presence, 'directs) Refl__.Desc.presences ->
          ('count, 'directs) Refl__.Desc.length ->
          ('directs, 'direct, 'subdirect) Refl__.Desc.append ->
          ('count, 'types) Refl__.Desc.length ->
          ('types, 'arity, 'subarity) Refl__.Desc.append ->
          ('arity, 'direct) t -> ('subarity, 'subdirect) t
        val to_sequence :
          [ `Present ] any ->
          ('sequence, 'occurrences) t -> 'sequence Refl__.Desc.Sequence(T).t
      end
    type 'a hook_fun =
        'a Refl__.Desc.refl -> (?hook:hook -> 'a Lifter.t) -> 'a Lifter.t
    and hook = Make(Metapp.Pat).hook = { hook : 'a. 'a hook_fun; }
    val lift :
      ?hook:hook ->
      ('a, 'structure, 'arity, 'rec_group,
       [< Refl__.Desc.Kinds.liftable
        > `Array `Arrow `Attributes `Bool `Bytes `Char `Constr `Exists `Float
          `Int `Int32 `Int64 `Lazy `MapOpaque `Nativeint `Object `Opaque
          `Record `String `Tuple `Variable `Variant ],
       'positive, 'negative, 'direct, 'gadt)
      Refl__.Desc.desc -> ('arity, 'direct) Lifters.t -> 'a Lifter.t("DEBUG:rule", [Tag3 (("Make", 3101), 0, (Tag2 (((("Target", 3104)), (Tag1 ((Tag2 ("Metapp")), "ValueS"))), Tag1 ([Tag3 (("Lifter", 3105), 0, (Tag1 ([Tag1 (("t", 3110), ([((("a")), 100000000, 0, -34)], 1, 0, 1, ((Tag1 (0, ((("a")), 100000000, 0, -34), (Tag3 (Tag1 ((("Target", 3104)), "t"), 0, (0)), 100000000, 0, -33), 0), 100000000, 0, -32)), [46], [0], 0, 0, (("runtime/lift.ml", 7, 94, 98), ("runtime/lift.ml", 7, 94, 124), 0), 0, 0, 0, Tag1 ("Refl__Lift", 38)), 1, 0)]), 0, (("runtime/lift.ml", 6, 69, 71), ("runtime/lift.ml", 8, 125, 130), 0), Tag1 ("Refl__Lift", 39)), 0, 0); Tag3 (("Lifters", 3106), 0, (Tag1 ([Tag3 (("T", 3111), 0, (Tag1 ([Tag1 (("t", 3121), ([((("a")), 100000000, 0, -165)], 1, 0, 1, ((Tag3 (Tag1 ((("Lifter", 3105)), "t"), [((("a")), 100000000, 0, -165)], (0)), 100000000, 0, -164)), [7], [2], 0, 0, (("runtime/desc.ml", 45, 1724, 1726), ("runtime/desc.ml", 45, 1724, 1735), 0), 0, 0, 0, Tag1 ("Refl__Desc", 27)), 1, 0)]), 0, (("runtime/tools.ml", 277, 8782, 8797), ("runtime/tools.ml", 277, 8782, 8798), 0), Tag1 ("Refl__Tools", 652)), 0, 0); Tag1 (("item", 3112), ([((("a")), 100000000, 0, -154); ((("occurrence")), 100000000, 0, -155)], 2, Tag1 ([(("None", 804), (0), ((Tag3 ((("item", 3112)), [((0), 100000000, 0, -157); (Tag8 (([("Absent", (0))], (0, 100000000, 0, -159), 1, 0, 0)), 100000000, 0, -158)], (0)), 100000000, 0, -156)), (("runtime/tools.ml", 226, 7216, 7220), ("runtime/tools.ml", 226, 7216, 7248), 0), 0, Tag1 ("Refl__Tools", 629)); (("Some", 805), ([(Tag3 (Tag1 ((("T", 3111)), "t"), [((("a")), 100000000, 0, -161)], (0)), 100000000, 0, -163)]), ((Tag3 ((("item", 3112)), [((("a")), 100000000, 0, -161); ((0), 100000000, 0, -162)], (0)), 100000000, 0, -160)), (("runtime/tools.ml", 227, 7249, 7253), ("runtime/tools.ml", 227, 7249, 7284), 0), 0, Tag1 ("Refl__Tools", 630))], 0), 1, ((Tag3 (Tag1 (Tag2 (Tag1 ((Tag2 ("Refl__Tools")), "Vector"), (("Lifter", 3105))), "item"), [((("a")), 100000000, 0, -154); ((("occurrence")), 100000000, 0, -155)], (0)), 100000000, 0, -153)), [15; 63], [0; 0], 0, 0, (("runtime/tools.ml", 225, 7184, 7186), ("runtime/tools.ml", 227, 7249, 7284), 0), 0, 0, 0, Tag1 ("Refl__Tools", 628)), 1, 0); Tag1 (("t", 3113), ([((("sequence")), 100000000, 0, -139); ((("occurrences")), 100000000, 0, -140)], 2, Tag1 ([(("[]", 808), (0), ((Tag3 ((("t", 3113)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -142); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -143)], (0)), 100000000, 0, -141)), (("runtime/tools.ml", 230, 7323, 7327), ("runtime/tools.ml", 230, 7323, 7348), 0), 0, Tag1 ("Refl__Tools", 632)); (("::", 809), ([(Tag3 ((("item", 3112)), [((("head")), 100000000, 0, -146); ((("occurrence")), 100000000, 0, -149)], (0)), 100000000, 0, -151); (Tag3 ((("t", 3113)), [((("tail")), 100000000, 0, -147); ((("occurrences")), 100000000, 0, -150)], (0)), 100000000, 0, -152)]), ((Tag3 ((("t", 3113)), [(Tag2 ([((("head")), 100000000, 0, -146); ((("tail")), 100000000, 0, -147)]), 100000000, 0, -145); (Tag2 ([((("occurrence")), 100000000, 0, -149); ((("occurrences")), 100000000, 0, -150)]), 100000000, 0, -148)], (0)), 100000000, 0, -144)), (("runtime/tools.ml", 231, 7349, 7353), ("runtime/tools.ml", 232, 7417, 7470), 0), 0, Tag1 ("Refl__Tools", 633))], 0), 1, ((Tag3 (Tag1 (Tag2 (Tag1 ((Tag2 ("Refl__Tools")), "Vector"), (("Lifter", 3105))), "t"), [((("sequence")), 100000000, 0, -139); ((("occurrences")), 100000000, 0, -140)], (0)), 100000000, 0, -138)), [63; 63], [0; 0], 0, 0, (("runtime/tools.ml", 229, 7286, 7288), ("runtime/tools.ml", 232, 7417, 7470), 0), 0, 0, 0, Tag1 ("Refl__Tools", 631)), 1, 0); (("get", 3114), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "variable"), [((("index")), 100000000, 0, -136); ((("sequence")), 100000000, 0, -133); ((("value")), 100000000, 0, -131); ((("positive")), 100000000, 0, -137); ((("occurrences")), 100000000, 0, -134)], (0)), 100000000, 0, -135), (Tag1 (0, (Tag3 ((("t", 3113)), [((("sequence")), 100000000, 0, -133); ((("occurrences")), 100000000, 0, -134)], (0)), 100000000, 0, -132), (Tag3 (Tag1 ((("T", 3111)), "t"), [((("value")), 100000000, 0, -131)], (0)), 100000000, 0, -130), 0), 100000000, 0, -129), 0), 100000000, 0, -128), 0, (("runtime/tools.ml", 234, 7472, 7474), ("runtime/tools.ml", 236, 7553, 7600), 0), 0, Tag1 ("Refl__Tools", 634)), 0); (("make_transfer", 3115), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "transfer_arguments"), [((("source")), 100000000, 0, -126); ((("sub")), 100000000, 0, -122); ((("arg")), 100000000, 0, -120)], (0)), 100000000, 0, -127), (Tag1 (0, (Tag3 ((("t", 3113)), [((("sequence")), 100000000, 0, -119); ((("source")), 100000000, 0, -126)], (0)), 100000000, 0, -125), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((("t", 3113)), [((("sequence")), 100000000, 0, -119); ((("arg")), 100000000, 0, -120)], (0)), 100000000, 0, -118); (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "eq"), [((("sub")), 100000000, 0, -122); (Tag8 (([("Absent", (0))], (0, 100000000, 0, -124), 1, 0, 0)), 100000000, 0, -123)], (0)), 100000000, 0, -121)], (0)), 100000000, 0, -117), 0), 100000000, 0, -116), 0), 100000000, 0, -115), 0, (("runtime/tools.ml", 238, 7602, 7604), ("runtime/tools.ml", 240, 7698, 7752), 0), 0, Tag1 ("Refl__Tools", 635)), 0); Tag1 (("make", 3116), ([((("arity")), 100000000, 0, -100); ((("rec_group")), 100000000, 0, -101); ((("kinds")), 100000000, 0, -102)], 3, [[(("f", 813), 0, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [(Tag9 (("a")), 100000000, 0, -104); (Tag9 (("structure")), 100000000, 0, -105); ((("arity")), 100000000, 0, -100); ((("rec_group")), 100000000, 0, -101); ((("kinds")), 100000000, 0, -102); (Tag9 (("ap")), 100000000, 0, -106); (Tag9 (("an")), 100000000, 0, -107); (Tag9 (("ad")), 100000000, 0, -108); (Tag9 (("gadt")), 100000000, 0, -109)], (0)), 100000000, 0, -114), (Tag1 (0, (Tag3 ((("t", 3113)), [((("arity")), 100000000, 0, -100); (Tag9 (("ad")), 100000000, 0, -108)], (0)), 100000000, 0, -113), (Tag3 (Tag1 ((("T", 3111)), "t"), [(Tag9 (("a")), 100000000, 0, -104)], (0)), 100000000, 0, -112), 0), 100000000, 0, -111), 0), 100000000, 0, -110), [(Tag9 (("a")), 100000000, 0, -104); (Tag9 (("structure")), 100000000, 0, -105); (Tag9 (("ap")), 100000000, 0, -106); (Tag9 (("an")), 100000000, 0, -107); (Tag9 (("ad")), 100000000, 0, -108); (Tag9 (("gadt")), 100000000, 0, -109)]), 100000000, 0, -103), (("runtime/tools.ml", 243, 7799, 7805), ("runtime/tools.ml", 245, 7918, 7962), 0), 0, Tag1 ("Refl__Tools", 637))]], 1, ((Tag3 (Tag1 (Tag2 (Tag1 ((Tag2 ("Refl__Tools")), "Vector"), (("Lifter", 3105))), "make"), [((("arity")), 100000000, 0, -100); ((("rec_group")), 100000000, 0, -101); ((("kinds")), 100000000, 0, -102)], (0)), 100000000, 0, -99)), [63; 15; 63], [0; 0; 0], 0, 0, (("runtime/tools.ml", 242, 7754, 7756), ("runtime/tools.ml", 246, 7963, 7968), 0), 0, 0, 1, Tag1 ("Refl__Tools", 636)), 1, 0); (("make", 3117), ((Tag1 (0, (Tag3 ((("make", 3116)), [((("arity")), 100000000, 0, -85); ((("rec_group")), 100000000, 0, -95); ((("kinds")), 100000000, 0, -96)], (0)), 100000000, 0, -98), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "vector"), [((("types")), 100000000, 0, -82); ((("structures")), 100000000, 0, -94); ((("arity")), 100000000, 0, -85); ((("rec_group")), 100000000, 0, -95); ((("kinds")), 100000000, 0, -96); ((("arguments")), 100000000, 0, -92); ((("gadt")), 100000000, 0, -97)], (0)), 100000000, 0, -93), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "transfer_skip"), [((("positive")), 100000000, 0, -88); ((("negative")), 100000000, 0, -89); ((("direct")), 100000000, 0, -86); ((("subpositive")), 100000000, 0, -90); ((("subnegative")), 100000000, 0, -91); ((("subdirect")), 100000000, 0, -83); ((("arguments")), 100000000, 0, -92)], (0)), 100000000, 0, -87), (Tag1 (0, (Tag3 ((("t", 3113)), [((("arity")), 100000000, 0, -85); ((("direct")), 100000000, 0, -86)], (0)), 100000000, 0, -84), (Tag3 ((("t", 3113)), [((("types")), 100000000, 0, -82); ((("subdirect")), 100000000, 0, -83)], (0)), 100000000, 0, -81), 0), 100000000, 0, -80), 0), 100000000, 0, -79), 0), 100000000, 0, -78), 0), 100000000, 0, -77), 0, (("runtime/tools.ml", 248, 7970, 7972), ("runtime/tools.ml", 255, 8251, 8277), 0), 0, Tag1 ("Refl__Tools", 638)), 0); Tag1 (("any", 3118), ([((("presence")), 100000000, 0, -68)], 1, Tag1 ([(("None", 816), (0), ((Tag3 ((("any", 3118)), [(Tag8 (([("Absent", (0))], (0, 100000000, 0, -71), 1, 0, 0)), 100000000, 0, -70)], (0)), 100000000, 0, -69)), (("runtime/tools.ml", 258, 8302, 8306), ("runtime/tools.ml", 258, 8302, 8328), 0), 0, Tag1 ("Refl__Tools", 640)); (("Some", 817), Tag1 ([(("item", 818), 0, (Tag10 ((Tag3 (Tag1 ((("T", 3111)), "t"), [(Tag9 (("a")), 100000000, 0, -75)], (0)), 100000000, 0, -76), [(Tag9 (("a")), 100000000, 0, -75)]), 100000000, 0, -74), (("runtime/tools.ml", 260, 8344, 8354), ("runtime/tools.ml", 260, 8344, 8373), 0), 0, Tag1 ("Refl__Tools", 641))]), ((Tag3 ((("any", 3118)), [((0), 100000000, 0, -73)], (0)), 100000000, 0, -72)), (("runtime/tools.ml", 259, 8329, 8333), ("runtime/tools.ml", 261, 8374, 8392), 0), 0, Tag1 ("Refl__Tools", 642))], 0), 1, ((Tag3 (Tag1 (Tag2 (Tag1 ((Tag2 ("Refl__Tools")), "Vector"), (("Lifter", 3105))), "any"), [((("presence")), 100000000, 0, -68)], (0)), 100000000, 0, -67)), [63], [0], 0, 0, (("runtime/tools.ml", 257, 8279, 8281), ("runtime/tools.ml", 261, 8374, 8392), 0), 0, 0, 0, Tag1 ("Refl__Tools", 639)), 1, 0); (("append", 3119), ((Tag1 (0, (Tag3 ((("any", 3118)), [((("presence")), 100000000, 0, -65)], (0)), 100000000, 0, -66), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "presences"), [((("presence")), 100000000, 0, -65); ((("directs")), 100000000, 0, -62)], (0)), 100000000, 0, -64), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "length"), [((("count")), 100000000, 0, -60); ((("directs")), 100000000, 0, -62)], (0)), 100000000, 0, -63), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "append"), [((("directs")), 100000000, 0, -62); ((("direct")), 100000000, 0, -56); ((("subdirect")), 100000000, 0, -53)], (0)), 100000000, 0, -61), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "length"), [((("count")), 100000000, 0, -60); ((("types")), 100000000, 0, -58)], (0)), 100000000, 0, -59), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "append"), [((("types")), 100000000, 0, -58); ((("arity")), 100000000, 0, -55); ((("subarity")), 100000000, 0, -52)], (0)), 100000000, 0, -57), (Tag1 (0, (Tag3 ((("t", 3113)), [((("arity")), 100000000, 0, -55); ((("direct")), 100000000, 0, -56)], (0)), 100000000, 0, -54), (Tag3 ((("t", 3113)), [((("subarity")), 100000000, 0, -52); ((("subdirect")), 100000000, 0, -53)], (0)), 100000000, 0, -51), 0), 100000000, 0, -50), 0), 100000000, 0, -49), 0), 100000000, 0, -48), 0), 100000000, 0, -47), 0), 100000000, 0, -46), 0), 100000000, 0, -45), 0), 100000000, 0, -44), 0, (("runtime/tools.ml", 263, 8394, 8396), ("runtime/tools.ml", 271, 8649, 8678), 0), 0, Tag1 ("Refl__Tools", 649)), 0); (("to_sequence", 3120), ((Tag1 (0, (Tag3 ((("any", 3118)), [(Tag8 (([("Present", (0))], (0, 100000000, 0, -43), 1, 0, 0)), 100000000, 0, -42)], (0)), 100000000, 0, -41), (Tag1 (0, (Tag3 ((("t", 3113)), [((("sequence")), 100000000, 0, -38); ((("occurrences")), 100000000, 0, -40)], (0)), 100000000, 0, -39), (Tag3 (Tag1 (Tag2 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "Sequence"), (("T", 3111))), "t"), [((("sequence")), 100000000, 0, -38)], (0)), 100000000, 0, -37), 0), 100000000, 0, -36), 0), 100000000, 0, -35), 0, (("runtime/tools.ml", 273, 8680, 8682), ("runtime/tools.ml", 274, 8700, 8776), 0), 0, Tag1 ("Refl__Tools", 650)), 0)]), 0, (("runtime/lift.ml", 10, 132, 134), ("runtime/lift.ml", 10, 132, 166), 0), Tag1 ("Refl__Lift", 77)), 0, 0); Tag1 (("hook_fun", 3107), ([((("a")), 100000000, 0, -26)], 1, 0, 1, ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "refl"), [((("a")), 100000000, 0, -26)], (0)), 100000000, 0, -31), (Tag1 (0, (Tag1 (Tag1 ("hook"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("hook", 3108)), 0, (0)), 100000000, 0, -30)], (0)), 100000000, 0, -29), (Tag3 (Tag1 ((("Lifter", 3105)), "t"), [((("a")), 100000000, 0, -26)], (0)), 100000000, 0, -28), 0), 100000000, 0, -27), (Tag3 (Tag1 ((("Lifter", 3105)), "t"), [((("a")), 100000000, 0, -26)], (0)), 100000000, 0, -25), 0), 100000000, 0, -24), 0), 100000000, 0, -23)), [63], [0], 0, 0, (("runtime/lift.ml", 12, 168, 170), ("runtime/lift.ml", 12, 168, 244), 0), 0, 0, 0, Tag1 ("Refl__Lift", 78)), 1, 0); Tag1 (("hook", 3108), (0, 0, [[(("hook", 627), 0, (Tag10 ((Tag3 ((("hook_fun", 3107)), [(Tag9 (("a")), 100000000, 0, -21)], (0)), 100000000, 0, -22), [(Tag9 (("a")), 100000000, 0, -21)]), 100000000, 0, -20), (("runtime/lift.ml", 13, 245, 260), ("runtime/lift.ml", 13, 245, 283), 0), 0, Tag1 ("Refl__Lift", 80))]], 1, 0, 0, 0, 0, 0, (("runtime/lift.ml", 13, 245, 247), ("runtime/lift.ml", 13, 245, 285), 0), 0, 0, 1, Tag1 ("Refl__Lift", 79)), 2, 0); (("lift", 3109), ((Tag1 (Tag1 ("hook"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("hook", 3108)), 0, (0)), 100000000, 0, -19)], (0)), 100000000, 0, -18), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [((("a")), 100000000, 0, -6); ((("structure")), 100000000, 0, -11); ((("arity")), 100000000, 0, -8); ((("rec_group")), 100000000, 0, -12); (Tag8 (([("Absent", Tag1 (1, 0, 0, (1))); ("Array", (0)); ("Arrow", (0)); ("Attributes", (0)); ("Bool", (0)); ("Bytes", (0)); ("Char", (0)); ("Constr", (0)); ("Exists", (0)); ("Float", (0)); ("GADT", Tag1 (1, 0, 0, (1))); ("Int", (0)); ("Int32", (0)); ("Int64", (0)); ("Labelled_arrow", Tag1 (1, 0, 0, (1))); ("Lazy", (0)); ("MapOpaque", (0)); ("Name", Tag1 (1, 0, 0, (1))); ("Nativeint", (0)); ("Object", (0)); ("Opaque", (0)); ("Record", (0)); ("String", (0)); ("Tuple", (0)); ("Unit", Tag1 (1, 0, 0, (1))); ("Variable", (0)); ("Variant", (0))], ((0), 100000000, 0, -14), 1, 0, ([Tag1 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "Kinds"), "liftable")]))), 100000000, 0, -13); ((("positive")), 100000000, 0, -15); ((("negative")), 100000000, 0, -16); ((("direct")), 100000000, 0, -9); ((("gadt")), 100000000, 0, -17)], (0)), 100000000, 0, -10), (Tag1 (0, (Tag3 (Tag1 ((("Lifters", 3106)), "t"), [((("arity")), 100000000, 0, -8); ((("direct")), 100000000, 0, -9)], (0)), 100000000, 0, -7), (Tag3 (Tag1 ((("Lifter", 3105)), "t"), [((("a")), 100000000, 0, -6)], (0)), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("runtime/lift.ml", 15, 287, 297), ("runtime/lift.ml", 15, 287, 301), 0), 0, Tag1 ("Refl__Lift", 82)), 0)])), 0, (("runtime/lift.ml", 5, 23, 23), ("runtime/lift.ml", 123, 4689, 4692), 0), Tag1 ("Refl__Lift", 390)), 0, 0); Tag3 (("Exp", 3102), 0, (Tag1 ([Tag3 (("Lifter", 3122), 0, (Tag1 ([Tag1 (("t", 3127), ([((("a")), 100000000, 0, -199)], 1, 0, 1, ((Tag1 (0, ((("a")), 100000000, 0, -199), (Tag3 (Tag1 (Tag1 ((Tag2 ("Metapp")), "Exp"), "t"), 0, (0)), 100000000, 0, -198), 0), 100000000, 0, -197)), [46], [0], 0, 0, (("runtime/lift.ml", 7, 94, 98), ("runtime/lift.ml", 7, 94, 124), 0), 0, 0, 0, Tag1 ("Refl__Lift", 38)), 1, 0)]), 0, (("runtime/lift.ml", 6, 69, 71), ("runtime/lift.ml", 8, 125, 130), 0), Tag1 ("Refl__Lift", 39)), 0, 0); Tag3 (("Lifters", 3123), 0, (Tag1 ([Tag3 (("T", 3128), 0, (Tag1 ([Tag1 (("t", 3138), ([((("a")), 100000000, 0, -330)], 1, 0, 1, ((Tag3 (Tag1 ((("Lifter", 3122)), "t"), [((("a")), 100000000, 0, -330)], (0)), 100000000, 0, -329)), [7], [2], 0, 0, (("runtime/desc.ml", 45, 1724, 1726), ("runtime/desc.ml", 45, 1724, 1735), 0), 0, 0, 0, Tag1 ("Refl__Desc", 27)), 1, 0)]), 0, (("runtime/tools.ml", 277, 8782, 8797), ("runtime/tools.ml", 277, 8782, 8798), 0), Tag1 ("Refl__Tools", 652)), 0, 0); Tag1 (("item", 3129), ([((("a")), 100000000, 0, -319); ((("occurrence")), 100000000, 0, -320)], 2, Tag1 ([(("None", 804), (0), ((Tag3 ((("item", 3129)), [((0), 100000000, 0, -322); (Tag8 (([("Absent", (0))], (0, 100000000, 0, -324), 1, 0, 0)), 100000000, 0, -323)], (0)), 100000000, 0, -321)), (("runtime/tools.ml", 226, 7216, 7220), ("runtime/tools.ml", 226, 7216, 7248), 0), 0, Tag1 ("Refl__Tools", 629)); (("Some", 805), ([(Tag3 (Tag1 ((("T", 3128)), "t"), [((("a")), 100000000, 0, -326)], (0)), 100000000, 0, -328)]), ((Tag3 ((("item", 3129)), [((("a")), 100000000, 0, -326); ((0), 100000000, 0, -327)], (0)), 100000000, 0, -325)), (("runtime/tools.ml", 227, 7249, 7253), ("runtime/tools.ml", 227, 7249, 7284), 0), 0, Tag1 ("Refl__Tools", 630))], 0), 1, ((Tag3 (Tag1 (Tag2 (Tag1 ((Tag2 ("Refl__Tools")), "Vector"), (("Lifter", 3122))), "item"), [((("a")), 100000000, 0, -319); ((("occurrence")), 100000000, 0, -320)], (0)), 100000000, 0, -318)), [15; 63], [0; 0], 0, 0, (("runtime/tools.ml", 225, 7184, 7186), ("runtime/tools.ml", 227, 7249, 7284), 0), 0, 0, 0, Tag1 ("Refl__Tools", 628)), 1, 0); Tag1 (("t", 3130), ([((("sequence")), 100000000, 0, -304); ((("occurrences")), 100000000, 0, -305)], 2, Tag1 ([(("[]", 808), (0), ((Tag3 ((("t", 3130)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -307); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -308)], (0)), 100000000, 0, -306)), (("runtime/tools.ml", 230, 7323, 7327), ("runtime/tools.ml", 230, 7323, 7348), 0), 0, Tag1 ("Refl__Tools", 632)); (("::", 809), ([(Tag3 ((("item", 3129)), [((("head")), 100000000, 0, -311); ((("occurrence")), 100000000, 0, -314)], (0)), 100000000, 0, -316); (Tag3 ((("t", 3130)), [((("tail")), 100000000, 0, -312); ((("occurrences")), 100000000, 0, -315)], (0)), 100000000, 0, -317)]), ((Tag3 ((("t", 3130)), [(Tag2 ([((("head")), 100000000, 0, -311); ((("tail")), 100000000, 0, -312)]), 100000000, 0, -310); (Tag2 ([((("occurrence")), 100000000, 0, -314); ((("occurrences")), 100000000, 0, -315)]), 100000000, 0, -313)], (0)), 100000000, 0, -309)), (("runtime/tools.ml", 231, 7349, 7353), ("runtime/tools.ml", 232, 7417, 7470), 0), 0, Tag1 ("Refl__Tools", 633))], 0), 1, ((Tag3 (Tag1 (Tag2 (Tag1 ((Tag2 ("Refl__Tools")), "Vector"), (("Lifter", 3122))), "t"), [((("sequence")), 100000000, 0, -304); ((("occurrences")), 100000000, 0, -305)], (0)), 100000000, 0, -303)), [63; 63], [0; 0], 0, 0, (("runtime/tools.ml", 229, 7286, 7288), ("runtime/tools.ml", 232, 7417, 7470), 0), 0, 0, 0, Tag1 ("Refl__Tools", 631)), 1, 0); (("get", 3131), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "variable"), [((("index")), 100000000, 0, -301); ((("sequence")), 100000000, 0, -298); ((("value")), 100000000, 0, -296); ((("positive")), 100000000, 0, -302); ((("occurrences")), 100000000, 0, -299)], (0)), 100000000, 0, -300), (Tag1 (0, (Tag3 ((("t", 3130)), [((("sequence")), 100000000, 0, -298); ((("occurrences")), 100000000, 0, -299)], (0)), 100000000, 0, -297), (Tag3 (Tag1 ((("T", 3128)), "t"), [((("value")), 100000000, 0, -296)], (0)), 100000000, 0, -295), 0), 100000000, 0, -294), 0), 100000000, 0, -293), 0, (("runtime/tools.ml", 234, 7472, 7474), ("runtime/tools.ml", 236, 7553, 7600), 0), 0, Tag1 ("Refl__Tools", 634)), 0); (("make_transfer", 3132), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "transfer_arguments"), [((("source")), 100000000, 0, -291); ((("sub")), 100000000, 0, -287); ((("arg")), 100000000, 0, -285)], (0)), 100000000, 0, -292), (Tag1 (0, (Tag3 ((("t", 3130)), [((("sequence")), 100000000, 0, -284); ((("source")), 100000000, 0, -291)], (0)), 100000000, 0, -290), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((("t", 3130)), [((("sequence")), 100000000, 0, -284); ((("arg")), 100000000, 0, -285)], (0)), 100000000, 0, -283); (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "eq"), [((("sub")), 100000000, 0, -287); (Tag8 (([("Absent", (0))], (0, 100000000, 0, -289), 1, 0, 0)), 100000000, 0, -288)], (0)), 100000000, 0, -286)], (0)), 100000000, 0, -282), 0), 100000000, 0, -281), 0), 100000000, 0, -280), 0, (("runtime/tools.ml", 238, 7602, 7604), ("runtime/tools.ml", 240, 7698, 7752), 0), 0, Tag1 ("Refl__Tools", 635)), 0); Tag1 (("make", 3133), ([((("arity")), 100000000, 0, -265); ((("rec_group")), 100000000, 0, -266); ((("kinds")), 100000000, 0, -267)], 3, [[(("f", 813), 0, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [(Tag9 (("a")), 100000000, 0, -269); (Tag9 (("structure")), 100000000, 0, -270); ((("arity")), 100000000, 0, -265); ((("rec_group")), 100000000, 0, -266); ((("kinds")), 100000000, 0, -267); (Tag9 (("ap")), 100000000, 0, -271); (Tag9 (("an")), 100000000, 0, -272); (Tag9 (("ad")), 100000000, 0, -273); (Tag9 (("gadt")), 100000000, 0, -274)], (0)), 100000000, 0, -279), (Tag1 (0, (Tag3 ((("t", 3130)), [((("arity")), 100000000, 0, -265); (Tag9 (("ad")), 100000000, 0, -273)], (0)), 100000000, 0, -278), (Tag3 (Tag1 ((("T", 3128)), "t"), [(Tag9 (("a")), 100000000, 0, -269)], (0)), 100000000, 0, -277), 0), 100000000, 0, -276), 0), 100000000, 0, -275), [(Tag9 (("a")), 100000000, 0, -269); (Tag9 (("structure")), 100000000, 0, -270); (Tag9 (("ap")), 100000000, 0, -271); (Tag9 (("an")), 100000000, 0, -272); (Tag9 (("ad")), 100000000, 0, -273); (Tag9 (("gadt")), 100000000, 0, -274)]), 100000000, 0, -268), (("runtime/tools.ml", 243, 7799, 7805), ("runtime/tools.ml", 245, 7918, 7962), 0), 0, Tag1 ("Refl__Tools", 637))]], 1, ((Tag3 (Tag1 (Tag2 (Tag1 ((Tag2 ("Refl__Tools")), "Vector"), (("Lifter", 3122))), "make"), [((("arity")), 100000000, 0, -265); ((("rec_group")), 100000000, 0, -266); ((("kinds")), 100000000, 0, -267)], (0)), 100000000, 0, -264)), [63; 15; 63], [0; 0; 0], 0, 0, (("runtime/tools.ml", 242, 7754, 7756), ("runtime/tools.ml", 246, 7963, 7968), 0), 0, 0, 1, Tag1 ("Refl__Tools", 636)), 1, 0); (("make", 3134), ((Tag1 (0, (Tag3 ((("make", 3133)), [((("arity")), 100000000, 0, -250); ((("rec_group")), 100000000, 0, -260); ((("kinds")), 100000000, 0, -261)], (0)), 100000000, 0, -263), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "vector"), [((("types")), 100000000, 0, -247); ((("structures")), 100000000, 0, -259); ((("arity")), 100000000, 0, -250); ((("rec_group")), 100000000, 0, -260); ((("kinds")), 100000000, 0, -261); ((("arguments")), 100000000, 0, -257); ((("gadt")), 100000000, 0, -262)], (0)), 100000000, 0, -258), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "transfer_skip"), [((("positive")), 100000000, 0, -253); ((("negative")), 100000000, 0, -254); ((("direct")), 100000000, 0, -251); ((("subpositive")), 100000000, 0, -255); ((("subnegative")), 100000000, 0, -256); ((("subdirect")), 100000000, 0, -248); ((("arguments")), 100000000, 0, -257)], (0)), 100000000, 0, -252), (Tag1 (0, (Tag3 ((("t", 3130)), [((("arity")), 100000000, 0, -250); ((("direct")), 100000000, 0, -251)], (0)), 100000000, 0, -249), (Tag3 ((("t", 3130)), [((("types")), 100000000, 0, -247); ((("subdirect")), 100000000, 0, -248)], (0)), 100000000, 0, -246), 0), 100000000, 0, -245), 0), 100000000, 0, -244), 0), 100000000, 0, -243), 0), 100000000, 0, -242), 0, (("runtime/tools.ml", 248, 7970, 7972), ("runtime/tools.ml", 255, 8251, 8277), 0), 0, Tag1 ("Refl__Tools", 638)), 0); Tag1 (("any", 3135), ([((("presence")), 100000000, 0, -233)], 1, Tag1 ([(("None", 816), (0), ((Tag3 ((("any", 3135)), [(Tag8 (([("Absent", (0))], (0, 100000000, 0, -236), 1, 0, 0)), 100000000, 0, -235)], (0)), 100000000, 0, -234)), (("runtime/tools.ml", 258, 8302, 8306), ("runtime/tools.ml", 258, 8302, 8328), 0), 0, Tag1 ("Refl__Tools", 640)); (("Some", 817), Tag1 ([(("item", 818), 0, (Tag10 ((Tag3 (Tag1 ((("T", 3128)), "t"), [(Tag9 (("a")), 100000000, 0, -240)], (0)), 100000000, 0, -241), [(Tag9 (("a")), 100000000, 0, -240)]), 100000000, 0, -239), (("runtime/tools.ml", 260, 8344, 8354), ("runtime/tools.ml", 260, 8344, 8373), 0), 0, Tag1 ("Refl__Tools", 641))]), ((Tag3 ((("any", 3135)), [((0), 100000000, 0, -238)], (0)), 100000000, 0, -237)), (("runtime/tools.ml", 259, 8329, 8333), ("runtime/tools.ml", 261, 8374, 8392), 0), 0, Tag1 ("Refl__Tools", 642))], 0), 1, ((Tag3 (Tag1 (Tag2 (Tag1 ((Tag2 ("Refl__Tools")), "Vector"), (("Lifter", 3122))), "any"), [((("presence")), 100000000, 0, -233)], (0)), 100000000, 0, -232)), [63], [0], 0, 0, (("runtime/tools.ml", 257, 8279, 8281), ("runtime/tools.ml", 261, 8374, 8392), 0), 0, 0, 0, Tag1 ("Refl__Tools", 639)), 1, 0); (("append", 3136), ((Tag1 (0, (Tag3 ((("any", 3135)), [((("presence")), 100000000, 0, -230)], (0)), 100000000, 0, -231), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "presences"), [((("presence")), 100000000, 0, -230); ((("directs")), 100000000, 0, -227)], (0)), 100000000, 0, -229), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "length"), [((("count")), 100000000, 0, -225); ((("directs")), 100000000, 0, -227)], (0)), 100000000, 0, -228), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "append"), [((("directs")), 100000000, 0, -227); ((("direct")), 100000000, 0, -221); ((("subdirect")), 100000000, 0, -218)], (0)), 100000000, 0, -226), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "length"), [((("count")), 100000000, 0, -225); ((("types")), 100000000, 0, -223)], (0)), 100000000, 0, -224), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "append"), [((("types")), 100000000, 0, -223); ((("arity")), 100000000, 0, -220); ((("subarity")), 100000000, 0, -217)], (0)), 100000000, 0, -222), (Tag1 (0, (Tag3 ((("t", 3130)), [((("arity")), 100000000, 0, -220); ((("direct")), 100000000, 0, -221)], (0)), 100000000, 0, -219), (Tag3 ((("t", 3130)), [((("subarity")), 100000000, 0, -217); ((("subdirect")), 100000000, 0, -218)], (0)), 100000000, 0, -216), 0), 100000000, 0, -215), 0), 100000000, 0, -214), 0), 100000000, 0, -213), 0), 100000000, 0, -212), 0), 100000000, 0, -211), 0), 100000000, 0, -210), 0), 100000000, 0, -209), 0, (("runtime/tools.ml", 263, 8394, 8396), ("runtime/tools.ml", 271, 8649, 8678), 0), 0, Tag1 ("Refl__Tools", 649)), 0); (("to_sequence", 3137), ((Tag1 (0, (Tag3 ((("any", 3135)), [(Tag8 (([("Present", (0))], (0, 100000000, 0, -208), 1, 0, 0)), 100000000, 0, -207)], (0)), 100000000, 0, -206), (Tag1 (0, (Tag3 ((("t", 3130)), [((("sequence")), 100000000, 0, -203); ((("occurrences")), 100000000, 0, -205)], (0)), 100000000, 0, -204), (Tag3 (Tag1 (Tag2 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "Sequence"), (("T", 3128))), "t"), [((("sequence")), 100000000, 0, -203)], (0)), 100000000, 0, -202), 0), 100000000, 0, -201), 0), 100000000, 0, -200), 0, (("runtime/tools.ml", 273, 8680, 8682), ("runtime/tools.ml", 274, 8700, 8776), 0), 0, Tag1 ("Refl__Tools", 650)), 0)]), 0, (("runtime/lift.ml", 10, 132, 134), ("runtime/lift.ml", 10, 132, 166), 0), Tag1 ("Refl__Lift", 77)), 0, 0); Tag1 (("hook_fun", 3124), ([((("a")), 100000000, 0, -191)], 1, 0, 1, ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "refl"), [((("a")), 100000000, 0, -191)], (0)), 100000000, 0, -196), (Tag1 (0, (Tag1 (Tag1 ("hook"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("hook", 3125)), 0, (0)), 100000000, 0, -195)], (0)), 100000000, 0, -194), (Tag3 (Tag1 ((("Lifter", 3122)), "t"), [((("a")), 100000000, 0, -191)], (0)), 100000000, 0, -193), 0), 100000000, 0, -192), (Tag3 (Tag1 ((("Lifter", 3122)), "t"), [((("a")), 100000000, 0, -191)], (0)), 100000000, 0, -190), 0), 100000000, 0, -189), 0), 100000000, 0, -188)), [63], [0], 0, 0, (("runtime/lift.ml", 12, 168, 170), ("runtime/lift.ml", 12, 168, 244), 0), 0, 0, 0, Tag1 ("Refl__Lift", 78)), 1, 0); Tag1 (("hook", 3125), (0, 0, [[(("hook", 627), 0, (Tag10 ((Tag3 ((("hook_fun", 3124)), [(Tag9 (("a")), 100000000, 0, -186)], (0)), 100000000, 0, -187), [(Tag9 (("a")), 100000000, 0, -186)]), 100000000, 0, -185), (("runtime/lift.ml", 13, 245, 260), ("runtime/lift.ml", 13, 245, 283), 0), 0, Tag1 ("Refl__Lift", 80))]], 1, ((Tag3 (Tag1 (Tag2 ((("Make", 3101)), Tag1 ((Tag2 ("Metapp")), "Exp")), "hook"), 0, (0)), 100000000, 0, -184)), 0, 0, 0, 0, (("runtime/lift.ml", 13, 245, 247), ("runtime/lift.ml", 13, 245, 285), 0), 0, 0, 1, Tag1 ("Refl__Lift", 79)), 2, 0); (("lift", 3126), ((Tag1 (Tag1 ("hook"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("hook", 3125)), 0, (0)), 100000000, 0, -183)], (0)), 100000000, 0, -182), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [((("a")), 100000000, 0, -170); ((("structure")), 100000000, 0, -175); ((("arity")), 100000000, 0, -172); ((("rec_group")), 100000000, 0, -176); (Tag8 (([("Absent", Tag1 (1, 0, 0, (1))); ("Array", (0)); ("Arrow", (0)); ("Attributes", (0)); ("Bool", (0)); ("Bytes", (0)); ("Char", (0)); ("Constr", (0)); ("Exists", (0)); ("Float", (0)); ("GADT", Tag1 (1, 0, 0, (1))); ("Int", (0)); ("Int32", (0)); ("Int64", (0)); ("Labelled_arrow", Tag1 (1, 0, 0, (1))); ("Lazy", (0)); ("MapOpaque", (0)); ("Name", Tag1 (1, 0, 0, (1))); ("Nativeint", (0)); ("Object", (0)); ("Opaque", (0)); ("Record", (0)); ("String", (0)); ("Tuple", (0)); ("Unit", Tag1 (1, 0, 0, (1))); ("Variable", (0)); ("Variant", (0))], ((0), 100000000, 0, -178), 1, 0, ([Tag1 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "Kinds"), "liftable")]))), 100000000, 0, -177); ((("positive")), 100000000, 0, -179); ((("negative")), 100000000, 0, -180); ((("direct")), 100000000, 0, -173); ((("gadt")), 100000000, 0, -181)], (0)), 100000000, 0, -174), (Tag1 (0, (Tag3 (Tag1 ((("Lifters", 3123)), "t"), [((("arity")), 100000000, 0, -172); ((("direct")), 100000000, 0, -173)], (0)), 100000000, 0, -171), (Tag3 (Tag1 ((("Lifter", 3122)), "t"), [((("a")), 100000000, 0, -170)], (0)), 100000000, 0, -169), 0), 100000000, 0, -168), 0), 100000000, 0, -167), 0), 100000000, 0, -166), 0, (("runtime/lift.ml", 15, 287, 297), ("runtime/lift.ml", 15, 287, 301), 0), 0, Tag1 ("Refl__Lift", 82)), 0)]), 0, (("runtime/lift.ml", 125, 4694, 4694), ("runtime/lift.ml", 125, 4694, 4724), 0), Tag1 ("Refl__Lift", 391)), 0, 0); Tag3 (("Pat", 3103), 0, (Tag1 ([Tag3 (("Lifter", 3139), 0, (Tag1 ([Tag1 (("t", 3144), ([((("a")), 100000000, 0, -364)], 1, 0, 1, ((Tag1 (0, ((("a")), 100000000, 0, -364), (Tag3 (Tag1 (Tag1 ((Tag2 ("Metapp")), "Pat"), "t"), 0, (0)), 100000000, 0, -363), 0), 100000000, 0, -362)), [46], [0], 0, 0, (("runtime/lift.ml", 7, 94, 98), ("runtime/lift.ml", 7, 94, 124), 0), 0, 0, 0, Tag1 ("Refl__Lift", 38)), 1, 0)]), 0, (("runtime/lift.ml", 6, 69, 71), ("runtime/lift.ml", 8, 125, 130), 0), Tag1 ("Refl__Lift", 39)), 0, 0); Tag3 (("Lifters", 3140), 0, (Tag1 ([Tag3 (("T", 3145), 0, (Tag1 ([Tag1 (("t", 3155), ([((("a")), 100000000, 0, -495)], 1, 0, 1, ((Tag3 (Tag1 ((("Lifter", 3139)), "t"), [((("a")), 100000000, 0, -495)], (0)), 100000000, 0, -494)), [7], [2], 0, 0, (("runtime/desc.ml", 45, 1724, 1726), ("runtime/desc.ml", 45, 1724, 1735), 0), 0, 0, 0, Tag1 ("Refl__Desc", 27)), 1, 0)]), 0, (("runtime/tools.ml", 277, 8782, 8797), ("runtime/tools.ml", 277, 8782, 8798), 0), Tag1 ("Refl__Tools", 652)), 0, 0); Tag1 (("item", 3146), ([((("a")), 100000000, 0, -484); ((("occurrence")), 100000000, 0, -485)], 2, Tag1 ([(("None", 804), (0), ((Tag3 ((("item", 3146)), [((0), 100000000, 0, -487); (Tag8 (([("Absent", (0))], (0, 100000000, 0, -489), 1, 0, 0)), 100000000, 0, -488)], (0)), 100000000, 0, -486)), (("runtime/tools.ml", 226, 7216, 7220), ("runtime/tools.ml", 226, 7216, 7248), 0), 0, Tag1 ("Refl__Tools", 629)); (("Some", 805), ([(Tag3 (Tag1 ((("T", 3145)), "t"), [((("a")), 100000000, 0, -491)], (0)), 100000000, 0, -493)]), ((Tag3 ((("item", 3146)), [((("a")), 100000000, 0, -491); ((0), 100000000, 0, -492)], (0)), 100000000, 0, -490)), (("runtime/tools.ml", 227, 7249, 7253), ("runtime/tools.ml", 227, 7249, 7284), 0), 0, Tag1 ("Refl__Tools", 630))], 0), 1, ((Tag3 (Tag1 (Tag2 (Tag1 ((Tag2 ("Refl__Tools")), "Vector"), (("Lifter", 3139))), "item"), [((("a")), 100000000, 0, -484); ((("occurrence")), 100000000, 0, -485)], (0)), 100000000, 0, -483)), [15; 63], [0; 0], 0, 0, (("runtime/tools.ml", 225, 7184, 7186), ("runtime/tools.ml", 227, 7249, 7284), 0), 0, 0, 0, Tag1 ("Refl__Tools", 628)), 1, 0); Tag1 (("t", 3147), ([((("sequence")), 100000000, 0, -469); ((("occurrences")), 100000000, 0, -470)], 2, Tag1 ([(("[]", 808), (0), ((Tag3 ((("t", 3147)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -472); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -473)], (0)), 100000000, 0, -471)), (("runtime/tools.ml", 230, 7323, 7327), ("runtime/tools.ml", 230, 7323, 7348), 0), 0, Tag1 ("Refl__Tools", 632)); (("::", 809), ([(Tag3 ((("item", 3146)), [((("head")), 100000000, 0, -476); ((("occurrence")), 100000000, 0, -479)], (0)), 100000000, 0, -481); (Tag3 ((("t", 3147)), [((("tail")), 100000000, 0, -477); ((("occurrences")), 100000000, 0, -480)], (0)), 100000000, 0, -482)]), ((Tag3 ((("t", 3147)), [(Tag2 ([((("head")), 100000000, 0, -476); ((("tail")), 100000000, 0, -477)]), 100000000, 0, -475); (Tag2 ([((("occurrence")), 100000000, 0, -479); ((("occurrences")), 100000000, 0, -480)]), 100000000, 0, -478)], (0)), 100000000, 0, -474)), (("runtime/tools.ml", 231, 7349, 7353), ("runtime/tools.ml", 232, 7417, 7470), 0), 0, Tag1 ("Refl__Tools", 633))], 0), 1, ((Tag3 (Tag1 (Tag2 (Tag1 ((Tag2 ("Refl__Tools")), "Vector"), (("Lifter", 3139))), "t"), [((("sequence")), 100000000, 0, -469); ((("occurrences")), 100000000, 0, -470)], (0)), 100000000, 0, -468)), [63; 63], [0; 0], 0, 0, (("runtime/tools.ml", 229, 7286, 7288), ("runtime/tools.ml", 232, 7417, 7470), 0), 0, 0, 0, Tag1 ("Refl__Tools", 631)), 1, 0); (("get", 3148), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "variable"), [((("index")), 100000000, 0, -466); ((("sequence")), 100000000, 0, -463); ((("value")), 100000000, 0, -461); ((("positive")), 100000000, 0, -467); ((("occurrences")), 100000000, 0, -464)], (0)), 100000000, 0, -465), (Tag1 (0, (Tag3 ((("t", 3147)), [((("sequence")), 100000000, 0, -463); ((("occurrences")), 100000000, 0, -464)], (0)), 100000000, 0, -462), (Tag3 (Tag1 ((("T", 3145)), "t"), [((("value")), 100000000, 0, -461)], (0)), 100000000, 0, -460), 0), 100000000, 0, -459), 0), 100000000, 0, -458), 0, (("runtime/tools.ml", 234, 7472, 7474), ("runtime/tools.ml", 236, 7553, 7600), 0), 0, Tag1 ("Refl__Tools", 634)), 0); (("make_transfer", 3149), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "transfer_arguments"), [((("source")), 100000000, 0, -456); ((("sub")), 100000000, 0, -452); ((("arg")), 100000000, 0, -450)], (0)), 100000000, 0, -457), (Tag1 (0, (Tag3 ((("t", 3147)), [((("sequence")), 100000000, 0, -449); ((("source")), 100000000, 0, -456)], (0)), 100000000, 0, -455), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((("t", 3147)), [((("sequence")), 100000000, 0, -449); ((("arg")), 100000000, 0, -450)], (0)), 100000000, 0, -448); (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "eq"), [((("sub")), 100000000, 0, -452); (Tag8 (([("Absent", (0))], (0, 100000000, 0, -454), 1, 0, 0)), 100000000, 0, -453)], (0)), 100000000, 0, -451)], (0)), 100000000, 0, -447), 0), 100000000, 0, -446), 0), 100000000, 0, -445), 0, (("runtime/tools.ml", 238, 7602, 7604), ("runtime/tools.ml", 240, 7698, 7752), 0), 0, Tag1 ("Refl__Tools", 635)), 0); Tag1 (("make", 3150), ([((("arity")), 100000000, 0, -430); ((("rec_group")), 100000000, 0, -431); ((("kinds")), 100000000, 0, -432)], 3, [[(("f", 813), 0, (Tag10 ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [(Tag9 (("a")), 100000000, 0, -434); (Tag9 (("structure")), 100000000, 0, -435); ((("arity")), 100000000, 0, -430); ((("rec_group")), 100000000, 0, -431); ((("kinds")), 100000000, 0, -432); (Tag9 (("ap")), 100000000, 0, -436); (Tag9 (("an")), 100000000, 0, -437); (Tag9 (("ad")), 100000000, 0, -438); (Tag9 (("gadt")), 100000000, 0, -439)], (0)), 100000000, 0, -444), (Tag1 (0, (Tag3 ((("t", 3147)), [((("arity")), 100000000, 0, -430); (Tag9 (("ad")), 100000000, 0, -438)], (0)), 100000000, 0, -443), (Tag3 (Tag1 ((("T", 3145)), "t"), [(Tag9 (("a")), 100000000, 0, -434)], (0)), 100000000, 0, -442), 0), 100000000, 0, -441), 0), 100000000, 0, -440), [(Tag9 (("a")), 100000000, 0, -434); (Tag9 (("structure")), 100000000, 0, -435); (Tag9 (("ap")), 100000000, 0, -436); (Tag9 (("an")), 100000000, 0, -437); (Tag9 (("ad")), 100000000, 0, -438); (Tag9 (("gadt")), 100000000, 0, -439)]), 100000000, 0, -433), (("runtime/tools.ml", 243, 7799, 7805), ("runtime/tools.ml", 245, 7918, 7962), 0), 0, Tag1 ("Refl__Tools", 637))]], 1, ((Tag3 (Tag1 (Tag2 (Tag1 ((Tag2 ("Refl__Tools")), "Vector"), (("Lifter", 3139))), "make"), [((("arity")), 100000000, 0, -430); ((("rec_group")), 100000000, 0, -431); ((("kinds")), 100000000, 0, -432)], (0)), 100000000, 0, -429)), [63; 15; 63], [0; 0; 0], 0, 0, (("runtime/tools.ml", 242, 7754, 7756), ("runtime/tools.ml", 246, 7963, 7968), 0), 0, 0, 1, Tag1 ("Refl__Tools", 636)), 1, 0); (("make", 3151), ((Tag1 (0, (Tag3 ((("make", 3150)), [((("arity")), 100000000, 0, -415); ((("rec_group")), 100000000, 0, -425); ((("kinds")), 100000000, 0, -426)], (0)), 100000000, 0, -428), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "vector"), [((("types")), 100000000, 0, -412); ((("structures")), 100000000, 0, -424); ((("arity")), 100000000, 0, -415); ((("rec_group")), 100000000, 0, -425); ((("kinds")), 100000000, 0, -426); ((("arguments")), 100000000, 0, -422); ((("gadt")), 100000000, 0, -427)], (0)), 100000000, 0, -423), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "transfer_skip"), [((("positive")), 100000000, 0, -418); ((("negative")), 100000000, 0, -419); ((("direct")), 100000000, 0, -416); ((("subpositive")), 100000000, 0, -420); ((("subnegative")), 100000000, 0, -421); ((("subdirect")), 100000000, 0, -413); ((("arguments")), 100000000, 0, -422)], (0)), 100000000, 0, -417), (Tag1 (0, (Tag3 ((("t", 3147)), [((("arity")), 100000000, 0, -415); ((("direct")), 100000000, 0, -416)], (0)), 100000000, 0, -414), (Tag3 ((("t", 3147)), [((("types")), 100000000, 0, -412); ((("subdirect")), 100000000, 0, -413)], (0)), 100000000, 0, -411), 0), 100000000, 0, -410), 0), 100000000, 0, -409), 0), 100000000, 0, -408), 0), 100000000, 0, -407), 0, (("runtime/tools.ml", 248, 7970, 7972), ("runtime/tools.ml", 255, 8251, 8277), 0), 0, Tag1 ("Refl__Tools", 638)), 0); Tag1 (("any", 3152), ([((("presence")), 100000000, 0, -398)], 1, Tag1 ([(("None", 816), (0), ((Tag3 ((("any", 3152)), [(Tag8 (([("Absent", (0))], (0, 100000000, 0, -401), 1, 0, 0)), 100000000, 0, -400)], (0)), 100000000, 0, -399)), (("runtime/tools.ml", 258, 8302, 8306), ("runtime/tools.ml", 258, 8302, 8328), 0), 0, Tag1 ("Refl__Tools", 640)); (("Some", 817), Tag1 ([(("item", 818), 0, (Tag10 ((Tag3 (Tag1 ((("T", 3145)), "t"), [(Tag9 (("a")), 100000000, 0, -405)], (0)), 100000000, 0, -406), [(Tag9 (("a")), 100000000, 0, -405)]), 100000000, 0, -404), (("runtime/tools.ml", 260, 8344, 8354), ("runtime/tools.ml", 260, 8344, 8373), 0), 0, Tag1 ("Refl__Tools", 641))]), ((Tag3 ((("any", 3152)), [((0), 100000000, 0, -403)], (0)), 100000000, 0, -402)), (("runtime/tools.ml", 259, 8329, 8333), ("runtime/tools.ml", 261, 8374, 8392), 0), 0, Tag1 ("Refl__Tools", 642))], 0), 1, ((Tag3 (Tag1 (Tag2 (Tag1 ((Tag2 ("Refl__Tools")), "Vector"), (("Lifter", 3139))), "any"), [((("presence")), 100000000, 0, -398)], (0)), 100000000, 0, -397)), [63], [0], 0, 0, (("runtime/tools.ml", 257, 8279, 8281), ("runtime/tools.ml", 261, 8374, 8392), 0), 0, 0, 0, Tag1 ("Refl__Tools", 639)), 1, 0); (("append", 3153), ((Tag1 (0, (Tag3 ((("any", 3152)), [((("presence")), 100000000, 0, -395)], (0)), 100000000, 0, -396), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "presences"), [((("presence")), 100000000, 0, -395); ((("directs")), 100000000, 0, -392)], (0)), 100000000, 0, -394), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "length"), [((("count")), 100000000, 0, -390); ((("directs")), 100000000, 0, -392)], (0)), 100000000, 0, -393), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "append"), [((("directs")), 100000000, 0, -392); ((("direct")), 100000000, 0, -386); ((("subdirect")), 100000000, 0, -383)], (0)), 100000000, 0, -391), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "length"), [((("count")), 100000000, 0, -390); ((("types")), 100000000, 0, -388)], (0)), 100000000, 0, -389), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "append"), [((("types")), 100000000, 0, -388); ((("arity")), 100000000, 0, -385); ((("subarity")), 100000000, 0, -382)], (0)), 100000000, 0, -387), (Tag1 (0, (Tag3 ((("t", 3147)), [((("arity")), 100000000, 0, -385); ((("direct")), 100000000, 0, -386)], (0)), 100000000, 0, -384), (Tag3 ((("t", 3147)), [((("subarity")), 100000000, 0, -382); ((("subdirect")), 100000000, 0, -383)], (0)), 100000000, 0, -381), 0), 100000000, 0, -380), 0), 100000000, 0, -379), 0), 100000000, 0, -378), 0), 100000000, 0, -377), 0), 100000000, 0, -376), 0), 100000000, 0, -375), 0), 100000000, 0, -374), 0, (("runtime/tools.ml", 263, 8394, 8396), ("runtime/tools.ml", 271, 8649, 8678), 0), 0, Tag1 ("Refl__Tools", 649)), 0); (("to_sequence", 3154), ((Tag1 (0, (Tag3 ((("any", 3152)), [(Tag8 (([("Present", (0))], (0, 100000000, 0, -373), 1, 0, 0)), 100000000, 0, -372)], (0)), 100000000, 0, -371), (Tag1 (0, (Tag3 ((("t", 3147)), [((("sequence")), 100000000, 0, -368); ((("occurrences")), 100000000, 0, -370)], (0)), 100000000, 0, -369), (Tag3 (Tag1 (Tag2 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "Sequence"), (("T", 3145))), "t"), [((("sequence")), 100000000, 0, -368)], (0)), 100000000, 0, -367), 0), 100000000, 0, -366), 0), 100000000, 0, -365), 0, (("runtime/tools.ml", 273, 8680, 8682), ("runtime/tools.ml", 274, 8700, 8776), 0), 0, Tag1 ("Refl__Tools", 650)), 0)]), 0, (("runtime/lift.ml", 10, 132, 134), ("runtime/lift.ml", 10, 132, 166), 0), Tag1 ("Refl__Lift", 77)), 0, 0); Tag1 (("hook_fun", 3141), ([((("a")), 100000000, 0, -356)], 1, 0, 1, ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "refl"), [((("a")), 100000000, 0, -356)], (0)), 100000000, 0, -361), (Tag1 (0, (Tag1 (Tag1 ("hook"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("hook", 3142)), 0, (0)), 100000000, 0, -360)], (0)), 100000000, 0, -359), (Tag3 (Tag1 ((("Lifter", 3139)), "t"), [((("a")), 100000000, 0, -356)], (0)), 100000000, 0, -358), 0), 100000000, 0, -357), (Tag3 (Tag1 ((("Lifter", 3139)), "t"), [((("a")), 100000000, 0, -356)], (0)), 100000000, 0, -355), 0), 100000000, 0, -354), 0), 100000000, 0, -353)), [63], [0], 0, 0, (("runtime/lift.ml", 12, 168, 170), ("runtime/lift.ml", 12, 168, 244), 0), 0, 0, 0, Tag1 ("Refl__Lift", 78)), 1, 0); Tag1 (("hook", 3142), (0, 0, [[(("hook", 627), 0, (Tag10 ((Tag3 ((("hook_fun", 3141)), [(Tag9 (("a")), 100000000, 0, -351)], (0)), 100000000, 0, -352), [(Tag9 (("a")), 100000000, 0, -351)]), 100000000, 0, -350), (("runtime/lift.ml", 13, 245, 260), ("runtime/lift.ml", 13, 245, 283), 0), 0, Tag1 ("Refl__Lift", 80))]], 1, ((Tag3 (Tag1 (Tag2 ((("Make", 3101)), Tag1 ((Tag2 ("Metapp")), "Pat")), "hook"), 0, (0)), 100000000, 0, -349)), 0, 0, 0, 0, (("runtime/lift.ml", 13, 245, 247), ("runtime/lift.ml", 13, 245, 285), 0), 0, 0, 1, Tag1 ("Refl__Lift", 79)), 2, 0); (("lift", 3143), ((Tag1 (Tag1 ("hook"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("hook", 3142)), 0, (0)), 100000000, 0, -348)], (0)), 100000000, 0, -347), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [((("a")), 100000000, 0, -335); ((("structure")), 100000000, 0, -340); ((("arity")), 100000000, 0, -337); ((("rec_group")), 100000000, 0, -341); (Tag8 (([("Absent", Tag1 (1, 0, 0, (1))); ("Array", (0)); ("Arrow", (0)); ("Attributes", (0)); ("Bool", (0)); ("Bytes", (0)); ("Char", (0)); ("Constr", (0)); ("Exists", (0)); ("Float", (0)); ("GADT", Tag1 (1, 0, 0, (1))); ("Int", (0)); ("Int32", (0)); ("Int64", (0)); ("Labelled_arrow", Tag1 (1, 0, 0, (1))); ("Lazy", (0)); ("MapOpaque", (0)); ("Name", Tag1 (1, 0, 0, (1))); ("Nativeint", (0)); ("Object", (0)); ("Opaque", (0)); ("Record", (0)); ("String", (0)); ("Tuple", (0)); ("Unit", Tag1 (1, 0, 0, (1))); ("Variable", (0)); ("Variant", (0))], ((0), 100000000, 0, -343), 1, 0, ([Tag1 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "Kinds"), "liftable")]))), 100000000, 0, -342); ((("positive")), 100000000, 0, -344); ((("negative")), 100000000, 0, -345); ((("direct")), 100000000, 0, -338); ((("gadt")), 100000000, 0, -346)], (0)), 100000000, 0, -339), (Tag1 (0, (Tag3 (Tag1 ((("Lifters", 3140)), "t"), [((("arity")), 100000000, 0, -337); ((("direct")), 100000000, 0, -338)], (0)), 100000000, 0, -336), (Tag3 (Tag1 ((("Lifter", 3139)), "t"), [((("a")), 100000000, 0, -335)], (0)), 100000000, 0, -334), 0), 100000000, 0, -333), 0), 100000000, 0, -332), 0), 100000000, 0, -331), 0, (("runtime/lift.ml", 15, 287, 297), ("runtime/lift.ml", 15, 287, 301), 0), 0, Tag1 ("Refl__Lift", 82)), 0)]), 0, (("runtime/lift.ml", 127, 4726, 4726), ("runtime/lift.ml", 127, 4726, 4756), 0), Tag1 ("Refl__Lift", 392)), 0, 0)], "Refl__Lift", [("Refl__Lift", ("i\148\127\168\128\192Oqe\147\021`\2238\247^")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Types", ("\177\238\029.\220\006\163!\230\015\006\182\133\155\194\166")); ("Type_immediacy", ("\"\127k\011Q\241\211\138\193;8\142\129\141#\251")); ("Traverse__Values", ("}\239\001\023\024&\227\167Sl\002\148\026\190\180\025")); ("Traverse__Modules", ("=\175q\026#\242\139\b\202\252\139\207\195\170\254\202")); ("Traverse__Interface", ("\252\146\219\195\199\167\234\143+\145l\200\254\244s}")); ("Traverse__", ("y\220\011\221C%Ob7%t,\252N21")); ("Traverse", ("\019\209\190\177II\1552 \b\174\006\b\1643\152")); ("Subst", ("\021\031\148\223\127\186\189\135\027}\145r\216\143\177\156")); ("Stdppx", ("=:\209>\156\207\149\181\248\131\161P-\254\025q")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__StringLabels", ("\134F\024\226\216Is#\223\230\234\169Z\206Gc")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__StdLabels", (".\193\n\229\139\017\212C-ZA\\kz-\128")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__ListLabels", ("*\194\012\191\020%\170\249m\002\180\178hk\205\220")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Char", ("\1794\1468\190\138\150g\231\240\140d\191.\212e")); ("Stdlib__BytesLabels", ("\145\128\000\239\186Z.\0310^\247\201\174\\\137R")); ("Stdlib__Bytes", ("C\134\194)\175\222\137p\205\246\244\r\241\164P\209")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib__Arg", ("\024%=\206\198p\149Y\007\004\216,&\254#\207")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Stdcompat__stdlib_s", ("?\143\027\238\145\138\139e`\216P\248\156\178=\206")); ("Stdcompat__init", ("r\254q\255\217]\232\239'\192d\165\222\016\157\133")); ("Stdcompat", ("\139\1989\181:\137\230\132\240\223\206\210Y\135S\\")); ("Shape", ("\235\127Y\213\025\137=\244\218\181\248N\189\188\216p")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("Refl__Tools", ("i\215\207\166d\225\190DU\241\194\224\137P\158e")); ("Refl__Desc", ("\221\150mt\149.2\132\189\244\007\164&\203\225\172")); ("Refl__", ("i\003\196\150\161\159\229g\157\181\149\015g%\221\240")); ("Profile", ("\201i\132?<qM\169\011\239@\142\202\182\023,")); ("Primitive", ("}Shh\162\015|\220A\203\249\232\245G\213\019")); ("Ppxlib_traverse_builtins", ("\237\218tx\250&^T{\197#\019<\250_\r")); ("Ppxlib_ast__Versions", ("\005+\189\023\165C\208\138FX6X\224\005\223\t")); ("Ppxlib_ast__Import", ("\027\222\n&\137\144M\230R\150g=Y\198\007\233")); ("Ppxlib_ast__Ast", ("?\026\134=\154d\183u\023\212\177\192\b]\250E")); ("Ppxlib_ast__", ("\182{\159J6;\249\149\208}`\139\002r\020x")); ("Ppxlib_ast", ("\002y:\229,^V\247~U\236~\232\131I\154")); ("Ppxlib__Utils", ("l\219q\2089\252\011\193\194^N&B\192T\223")); ("Ppxlib__Name", ("\202C\151nm\153EG\200\214[;s!)\140")); ("Ppxlib__Longident", ("\236#\230\012\180\203D\156\209\2282-p1H\132")); ("Ppxlib__Location", ("\r\139A\176n\135\029#\213\194&\153}\132\b\193")); ("Ppxlib__Loc", ("\183\208\004g\131\162\223\177\235#:\182\128\020\166\155")); ("Ppxlib__Import", ("\146|\185\205\005c\141\174\165\006\1517\177}\\\241")); ("Ppxlib__Expansion_context", ("\210<\144_\134\203\172\219N:6H\156{\220U")); ("Ppxlib__Common", (">S\244L\148\145\200\134\1298\249\200b\014\193\147")); ("Ppxlib__Code_path", ("\029\211r\143\213`\240\244{Na\007Ii^J")); ("Ppxlib__Attribute", ("\162~~\178\183\027\245`\231\215\181\235qHm\b")); ("Ppxlib__Ast_traverse0", ("r\177\171e\003\155\241]D\149FKy\174\023\225")); ("Ppxlib__Ast_traverse", ("B\b\r\176z\\s\1809\129\156\127?\011Qo")); ("Ppxlib__Ast_pattern_generated", (":\216\170\153\005\218jM\167\138\2111!\b\020K")); ("Ppxlib__Ast_pattern0", ("\255\203\196\229\159\201Q*\230\238\"\198(Q\154\029")); ("Ppxlib__Ast_pattern", ("\023,&Ow\159\019\144Rw\158\143\213Mo\203")); ("Ppxlib__", ("JQ\224\000Y\175_]O\b\254O\194|\017\237")); ("Ppxlib", ("\216\128\187K\006\011\165\149s\168&\180\1515\181\007")); ("Path", ("\012\183\178\025\1298\228*\021r\185\160Y\252\n\026")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Outcometree", ("9\021%\234\211\206\210\004H\165\208\2014\234Q\142")); ("Ocaml_shadow", ("\148\171\169\197\t\188z\207\155\180N\151 \195\173\206")); ("Ocaml_common", ("1\212\195\020\163\232\187\142G\192\221\180@\1278u")); ("Misc", ("*\026\026\234c\191\131\161\\\203\183\012O\252\153\198")); ("Metapp", ("\254\224\156\r\215\168\191$\169\223\161\187\153\000j<")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Load_path", ("\012@\228l\230\164S\172h\1726X\020\252o}")); ("Identifiable", ("\004F\207\014\158GU\001\184\214\187%/#;\211")); ("Ident", ("\b9;!\187.\220\163(x\b\174\\\223\020\004")); ("Env", ("\021\n\181\142x\b\169j\227\"\017\248*\178\245\223")); ("Docstrings", ("\216\171\176\031*\203\162\186%\175\201qq\189\139U")); ("Compmisc", ("B\127\\\174\004T\179\002\242}-C\214\152H*")); ("Cmi_format", ("6\177\bU\139\"\023\152=\249\135\174\b\011Cg")); ("Clflags", ("\162v\193G\199E|\029\023{\b\243]B\144;")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Build_path_prefix_map", ("y\028\167\207D\220\198\216\011\208\172\149\2416\bc")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216")); ("Astlib__Parse", ("\203iQ\135d.\147$\t\207\203C\131\175\193\171")); ("Astlib__Longident", ("\n\192\233\142\177n\225\191\238\161#\150\204n\"Y")); ("Astlib__Location", ("nn\153\250\162\2239\215\129\229e\026xg\000U")); ("Astlib__Ast_501", ("\207\"A\188\024\242Q\223\153\146\239\128\168h\148&")); ("Astlib__Ast_500", ("\202\202\240\178Ep\168 [f\246\t\162T\141\254")); ("Astlib__Ast_414", ("i\179p\208\134r\2177\243\167\157nF\235\143\179")); ("Astlib__Ast_413", ("\240P\019\205\016\157\177\177O)\172\193\028\192\011\190")); ("Astlib__Ast_412", (">\181S\020\t\004\1998\163p\025\210s\216\251\169")); ("Astlib__Ast_411", ("\030\186y\191\005D\180nv\183\b@1\225\168+")); ("Astlib__Ast_410", ("\023\030O]m0\005\214X\n/\226c\201\214\232")); ("Astlib__Ast_409", ("P\147I\234\185H\181\153\207\221\003\165\139\161\150\027")); ("Astlib__Ast_408", ("\225\220%%\162\188\006W\007\252\001X\158\165,\004")); ("Astlib__Ast_407", ("\163\202\2018`\230bGY\138/\021'\148:\018")); ("Astlib__Ast_406", ("v\152\031Q\232\244\141\011p\012\161\164hy\203\151")); ("Astlib__Ast_405", ("\145;\017\238\241\127\173z\138\142Q4>\198\186\207")); ("Astlib__Ast_404", ("I\027\143Zr\250\2468\193\167uOo\029\236\148")); ("Astlib__Ast_403", ("\206M\242\247\155X\251\127\002Ly\024\154\245\153\180")); ("Astlib__Ast_402", ("\178]\161\230\193\144:\005/\\~\127'|\207\189")); ("Astlib__", ("\246\155.n\143$\1435\bi\005\019C\219\191A")); ("Astlib", ("\002*Xp\193\003\201C\234Q\143\029\232\1569\007")); ("Ast_helper", ("\242\224\238/\155\176+\170\014\015\024\006\147\133f1"))], [(0)])

  end

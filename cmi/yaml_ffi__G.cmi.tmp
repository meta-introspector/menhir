module CI = Cstubs_internals
external yaml_stub_1_yaml_get_version_string : unit -> CI.voidp
  = "yaml_stub_1_yaml_get_version_string"
external yaml_stub_2_yaml_get_version :
  ('a, 'b) CI.fatptr -> ('c, 'd) CI.fatptr -> ('e, 'f) CI.fatptr -> unit
  = "yaml_stub_2_yaml_get_version"
external yaml_stub_3_yaml_token_delete : ('a, 'b) CI.fatptr -> unit
  = "yaml_stub_3_yaml_token_delete"
external yaml_stub_4_yaml_parser_initialize : ('a, 'b) CI.fatptr -> int
  = "yaml_stub_4_yaml_parser_initialize"
external yaml_stub_5_yaml_parser_delete : ('a, 'b) CI.fatptr -> unit
  = "yaml_stub_5_yaml_parser_delete"
external yaml_stub_6_yaml_parser_set_input_string :
  ('a, 'b) CI.fatptr -> ('c, 'd) CI.fatptr -> Unsigned.size_t -> unit
  = "yaml_stub_6_yaml_parser_set_input_string"
external yaml_stub_7_yaml_parser_parse :
  ('a, 'b) CI.fatptr -> ('c, 'd) CI.fatptr -> int
  = "yaml_stub_7_yaml_parser_parse"
external yaml_stub_8_yaml_emitter_initialize : ('a, 'b) CI.fatptr -> int
  = "yaml_stub_8_yaml_emitter_initialize"
external yaml_stub_9_yaml_emitter_delete : ('a, 'b) CI.fatptr -> unit
  = "yaml_stub_9_yaml_emitter_delete"
external yaml_stub_10_yaml_emitter_set_output_string :
  ('a, 'b) CI.fatptr ->
  ('c, 'd) CI.fatptr -> Unsigned.size_t -> ('e, 'f) CI.fatptr -> unit
  = "yaml_stub_10_yaml_emitter_set_output_string"
external yaml_stub_11_yaml_emitter_set_encoding :
  ('a, 'b) CI.fatptr -> Unsigned.uint32 -> unit
  = "yaml_stub_11_yaml_emitter_set_encoding"
external yaml_stub_12_yaml_emitter_set_canonical :
  ('a, 'b) CI.fatptr -> bool -> unit
  = "yaml_stub_12_yaml_emitter_set_canonical"
external yaml_stub_13_yaml_emitter_set_indent :
  ('a, 'b) CI.fatptr -> int -> unit = "yaml_stub_13_yaml_emitter_set_indent"
external yaml_stub_14_yaml_emitter_set_width :
  ('a, 'b) CI.fatptr -> int -> unit = "yaml_stub_14_yaml_emitter_set_width"
external yaml_stub_15_yaml_emitter_set_unicode :
  ('a, 'b) CI.fatptr -> bool -> unit
  = "yaml_stub_15_yaml_emitter_set_unicode"
external yaml_stub_16_yaml_emitter_flush : ('a, 'b) CI.fatptr -> int
  = "yaml_stub_16_yaml_emitter_flush"
external yaml_stub_17_yaml_emitter_emit :
  ('a, 'b) CI.fatptr -> ('c, 'd) CI.fatptr -> int
  = "yaml_stub_17_yaml_emitter_emit"
external yaml_stub_18_yaml_stream_start_event_initialize :
  ('a, 'b) CI.fatptr -> Unsigned.uint32 -> int
  = "yaml_stub_18_yaml_stream_start_event_initialize"
external yaml_stub_19_yaml_stream_end_event_initialize :
  ('a, 'b) CI.fatptr -> int = "yaml_stub_19_yaml_stream_end_event_initialize"
external yaml_stub_20_yaml_document_start_event_initialize :
  ('a, 'b) CI.fatptr ->
  ('c, 'd) CI.fatptr ->
  ('e, 'f) CI.fatptr -> ('g, 'h) CI.fatptr -> bool -> int
  = "yaml_stub_20_yaml_document_start_event_initialize"
external yaml_stub_21_yaml_document_end_event_initialize :
  ('a, 'b) CI.fatptr -> bool -> int
  = "yaml_stub_21_yaml_document_end_event_initialize"
external yaml_stub_22_yaml_alias_event_initialize :
  ('a, 'b) CI.fatptr -> ('c, 'd) CI.fatptr -> int
  = "yaml_stub_22_yaml_alias_event_initialize"
external yaml_stub_23_yaml_scalar_event_initialize :
  ('a, 'b) CI.fatptr ->
  ('c, 'd) CI.fatptr ->
  ('e, 'f) CI.fatptr ->
  ('g, 'h) CI.fatptr -> int -> bool -> bool -> Unsigned.uint32 -> int
  = "yaml_stub_23_yaml_scalar_event_initialize_byte8"
  "yaml_stub_23_yaml_scalar_event_initialize"
external yaml_stub_24_yaml_sequence_start_event_initialize :
  ('a, 'b) CI.fatptr ->
  ('c, 'd) CI.fatptr -> ('e, 'f) CI.fatptr -> bool -> Unsigned.uint32 -> int
  = "yaml_stub_24_yaml_sequence_start_event_initialize"
external yaml_stub_25_yaml_sequence_end_event_initialize :
  ('a, 'b) CI.fatptr -> int
  = "yaml_stub_25_yaml_sequence_end_event_initialize"
external yaml_stub_26_yaml_mapping_start_event_initialize :
  ('a, 'b) CI.fatptr ->
  ('c, 'd) CI.fatptr -> ('e, 'f) CI.fatptr -> bool -> Unsigned.uint32 -> int
  = "yaml_stub_26_yaml_mapping_start_event_initialize"
external yaml_stub_27_yaml_mapping_end_event_initialize :
  ('a, 'b) CI.fatptr -> int
  = "yaml_stub_27_yaml_mapping_end_event_initialize"
type 'a result = 'a
type 'a return = 'a
type 'a fn =
    Returns : 'a CI.typ -> 'a return fn
  | Function : 'a CI.typ * 'b fn -> ('a -> 'b) fn
val map_result : ('a -> 'b) -> 'a -> 'b
val returning : 'a CI.typ -> 'a return fn
val ( @-> ) : 'a CI.typ -> 'b fn -> ('a -> 'b) fn
val foreign : string -> ('a -> 'b) fn -> 'a -> 'b
("DEBUG:rule", [Tag3 (("CI", 1138), 1, (Tag3 ((Tag2 ("Cstubs_internals"))), 0, (("ffi/lib/g.ml", 1, 0, 0), ("ffi/lib/g.ml", 1, 0, 28), 0), Tag1 ("Yaml_ffi__G", 0)), 0, 0); (("yaml_stub_1_yaml_get_version_string", 1139), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -287), (Tag3 (Tag1 ((("CI", 1138)), "voidp"), 0, (0)), 100000000, 0, -286), 0), 100000000, 0, -285), (("yaml_stub_1_yaml_get_version_string", 1, 1, "", [0], 0)), (("ffi/lib/g.ml", 3, 30, 30), ("ffi/lib/g.ml", 4, 94, 135), 0), 0, Tag1 ("Yaml_ffi__G", 1)), 0); (("yaml_stub_2_yaml_get_version", 1140), ((Tag1 (0, (Tag3 (Tag1 ((("CI", 1138)), "fatptr"), [((0), 100000000, 0, -283); ((0), 100000000, 0, -284)], (0)), 100000000, 0, -282), (Tag1 (0, (Tag3 (Tag1 ((("CI", 1138)), "fatptr"), [((0), 100000000, 0, -280); ((0), 100000000, 0, -281)], (0)), 100000000, 0, -279), (Tag1 (0, (Tag3 (Tag1 ((("CI", 1138)), "fatptr"), [((0), 100000000, 0, -277); ((0), 100000000, 0, -278)], (0)), 100000000, 0, -276), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -275), 0), 100000000, 0, -274), 0), 100000000, 0, -273), 0), 100000000, 0, -272), (("yaml_stub_2_yaml_get_version", 3, 1, "", [0; 0; 0], 0)), (("ffi/lib/g.ml", 6, 138, 138), ("ffi/lib/g.ml", 8, 230, 264), 0), 0, Tag1 ("Yaml_ffi__G", 2)), 0); (("yaml_stub_3_yaml_token_delete", 1141), ((Tag1 (0, (Tag3 (Tag1 ((("CI", 1138)), "fatptr"), [((0), 100000000, 0, -270); ((0), 100000000, 0, -271)], (0)), 100000000, 0, -269), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -268), 0), 100000000, 0, -267), (("yaml_stub_3_yaml_token_delete", 1, 1, "", [0], 0)), (("ffi/lib/g.ml", 10, 267, 267), ("ffi/lib/g.ml", 11, 328, 363), 0), 0, Tag1 ("Yaml_ffi__G", 3)), 0); (("yaml_stub_4_yaml_parser_initialize", 1142), ((Tag1 (0, (Tag3 (Tag1 ((("CI", 1138)), "fatptr"), [((0), 100000000, 0, -265); ((0), 100000000, 0, -266)], (0)), 100000000, 0, -264), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -263), 0), 100000000, 0, -262), (("yaml_stub_4_yaml_parser_initialize", 1, 1, "", [0], 0)), (("ffi/lib/g.ml", 13, 366, 366), ("ffi/lib/g.ml", 14, 431, 471), 0), 0, Tag1 ("Yaml_ffi__G", 4)), 0); (("yaml_stub_5_yaml_parser_delete", 1143), ((Tag1 (0, (Tag3 (Tag1 ((("CI", 1138)), "fatptr"), [((0), 100000000, 0, -260); ((0), 100000000, 0, -261)], (0)), 100000000, 0, -259), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -258), 0), 100000000, 0, -257), (("yaml_stub_5_yaml_parser_delete", 1, 1, "", [0], 0)), (("ffi/lib/g.ml", 16, 474, 474), ("ffi/lib/g.ml", 17, 536, 572), 0), 0, Tag1 ("Yaml_ffi__G", 5)), 0); (("yaml_stub_6_yaml_parser_set_input_string", 1144), ((Tag1 (0, (Tag3 (Tag1 ((("CI", 1138)), "fatptr"), [((0), 100000000, 0, -255); ((0), 100000000, 0, -256)], (0)), 100000000, 0, -254), (Tag1 (0, (Tag3 (Tag1 ((("CI", 1138)), "fatptr"), [((0), 100000000, 0, -252); ((0), 100000000, 0, -253)], (0)), 100000000, 0, -251), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Unsigned")), "size_t"), 0, (0)), 100000000, 0, -250), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -249), 0), 100000000, 0, -248), 0), 100000000, 0, -247), 0), 100000000, 0, -246), (("yaml_stub_6_yaml_parser_set_input_string", 3, 1, "", [0; 0; 0], 0)), (("ffi/lib/g.ml", 19, 575, 575), ("ffi/lib/g.ml", 21, 683, 729), 0), 0, Tag1 ("Yaml_ffi__G", 6)), 0); (("yaml_stub_7_yaml_parser_parse", 1145), ((Tag1 (0, (Tag3 (Tag1 ((("CI", 1138)), "fatptr"), [((0), 100000000, 0, -244); ((0), 100000000, 0, -245)], (0)), 100000000, 0, -243), (Tag1 (0, (Tag3 (Tag1 ((("CI", 1138)), "fatptr"), [((0), 100000000, 0, -241); ((0), 100000000, 0, -242)], (0)), 100000000, 0, -240), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -239), 0), 100000000, 0, -238), 0), 100000000, 0, -237), (("yaml_stub_7_yaml_parser_parse", 2, 1, "", [0; 0], 0)), (("ffi/lib/g.ml", 23, 732, 732), ("ffi/lib/g.ml", 24, 807, 842), 0), 0, Tag1 ("Yaml_ffi__G", 7)), 0); (("yaml_stub_8_yaml_emitter_initialize", 1146), ((Tag1 (0, (Tag3 (Tag1 ((("CI", 1138)), "fatptr"), [((0), 100000000, 0, -235); ((0), 100000000, 0, -236)], (0)), 100000000, 0, -234), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -233), 0), 100000000, 0, -232), (("yaml_stub_8_yaml_emitter_initialize", 1, 1, "", [0], 0)), (("ffi/lib/g.ml", 26, 845, 845), ("ffi/lib/g.ml", 27, 911, 952), 0), 0, Tag1 ("Yaml_ffi__G", 8)), 0); (("yaml_stub_9_yaml_emitter_delete", 1147), ((Tag1 (0, (Tag3 (Tag1 ((("CI", 1138)), "fatptr"), [((0), 100000000, 0, -230); ((0), 100000000, 0, -231)], (0)), 100000000, 0, -229), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -228), 0), 100000000, 0, -227), (("yaml_stub_9_yaml_emitter_delete", 1, 1, "", [0], 0)), (("ffi/lib/g.ml", 29, 955, 955), ("ffi/lib/g.ml", 30, 1018, 1055), 0), 0, Tag1 ("Yaml_ffi__G", 9)), 0); (("yaml_stub_10_yaml_emitter_set_output_string", 1148), ((Tag1 (0, (Tag3 (Tag1 ((("CI", 1138)), "fatptr"), [((0), 100000000, 0, -225); ((0), 100000000, 0, -226)], (0)), 100000000, 0, -224), (Tag1 (0, (Tag3 (Tag1 ((("CI", 1138)), "fatptr"), [((0), 100000000, 0, -222); ((0), 100000000, 0, -223)], (0)), 100000000, 0, -221), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Unsigned")), "size_t"), 0, (0)), 100000000, 0, -220), (Tag1 (0, (Tag3 (Tag1 ((("CI", 1138)), "fatptr"), [((0), 100000000, 0, -218); ((0), 100000000, 0, -219)], (0)), 100000000, 0, -217), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -216), 0), 100000000, 0, -215), 0), 100000000, 0, -214), 0), 100000000, 0, -213), 0), 100000000, 0, -212), (("yaml_stub_10_yaml_emitter_set_output_string", 4, 1, "", [0; 0; 0; 0], 0)), (("ffi/lib/g.ml", 32, 1058, 1058), ("ffi/lib/g.ml", 34, 1184, 1233), 0), 0, Tag1 ("Yaml_ffi__G", 10)), 0); (("yaml_stub_11_yaml_emitter_set_encoding", 1149), ((Tag1 (0, (Tag3 (Tag1 ((("CI", 1138)), "fatptr"), [((0), 100000000, 0, -210); ((0), 100000000, 0, -211)], (0)), 100000000, 0, -209), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Unsigned")), "uint32"), 0, (0)), 100000000, 0, -208), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -207), 0), 100000000, 0, -206), 0), 100000000, 0, -205), (("yaml_stub_11_yaml_emitter_set_encoding", 2, 1, "", [0; 0], 0)), (("ffi/lib/g.ml", 36, 1236, 1236), ("ffi/lib/g.ml", 38, 1327, 1371), 0), 0, Tag1 ("Yaml_ffi__G", 11)), 0); (("yaml_stub_12_yaml_emitter_set_canonical", 1150), ((Tag1 (0, (Tag3 (Tag1 ((("CI", 1138)), "fatptr"), [((0), 100000000, 0, -203); ((0), 100000000, 0, -204)], (0)), 100000000, 0, -202), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -201), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -200), 0), 100000000, 0, -199), 0), 100000000, 0, -198), (("yaml_stub_12_yaml_emitter_set_canonical", 2, 1, "", [0; 0], 0)), (("ffi/lib/g.ml", 40, 1374, 1374), ("ffi/lib/g.ml", 41, 1423, 1498), 0), 0, Tag1 ("Yaml_ffi__G", 12)), 0); (("yaml_stub_13_yaml_emitter_set_indent", 1151), ((Tag1 (0, (Tag3 (Tag1 ((("CI", 1138)), "fatptr"), [((0), 100000000, 0, -196); ((0), 100000000, 0, -197)], (0)), 100000000, 0, -195), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -194), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -193), 0), 100000000, 0, -192), 0), 100000000, 0, -191), (("yaml_stub_13_yaml_emitter_set_indent", 2, 1, "", [0; 0], 0)), (("ffi/lib/g.ml", 43, 1501, 1501), ("ffi/lib/g.ml", 44, 1576, 1618), 0), 0, Tag1 ("Yaml_ffi__G", 13)), 0); (("yaml_stub_14_yaml_emitter_set_width", 1152), ((Tag1 (0, (Tag3 (Tag1 ((("CI", 1138)), "fatptr"), [((0), 100000000, 0, -189); ((0), 100000000, 0, -190)], (0)), 100000000, 0, -188), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -187), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -186), 0), 100000000, 0, -185), 0), 100000000, 0, -184), (("yaml_stub_14_yaml_emitter_set_width", 2, 1, "", [0; 0], 0)), (("ffi/lib/g.ml", 46, 1621, 1621), ("ffi/lib/g.ml", 47, 1695, 1736), 0), 0, Tag1 ("Yaml_ffi__G", 14)), 0); (("yaml_stub_15_yaml_emitter_set_unicode", 1153), ((Tag1 (0, (Tag3 (Tag1 ((("CI", 1138)), "fatptr"), [((0), 100000000, 0, -182); ((0), 100000000, 0, -183)], (0)), 100000000, 0, -181), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -180), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -179), 0), 100000000, 0, -178), 0), 100000000, 0, -177), (("yaml_stub_15_yaml_emitter_set_unicode", 2, 1, "", [0; 0], 0)), (("ffi/lib/g.ml", 49, 1739, 1739), ("ffi/lib/g.ml", 50, 1816, 1859), 0), 0, Tag1 ("Yaml_ffi__G", 15)), 0); (("yaml_stub_16_yaml_emitter_flush", 1154), ((Tag1 (0, (Tag3 (Tag1 ((("CI", 1138)), "fatptr"), [((0), 100000000, 0, -175); ((0), 100000000, 0, -176)], (0)), 100000000, 0, -174), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -173), 0), 100000000, 0, -172), (("yaml_stub_16_yaml_emitter_flush", 1, 1, "", [0], 0)), (("ffi/lib/g.ml", 52, 1862, 1862), ("ffi/lib/g.ml", 53, 1924, 1961), 0), 0, Tag1 ("Yaml_ffi__G", 16)), 0); (("yaml_stub_17_yaml_emitter_emit", 1155), ((Tag1 (0, (Tag3 (Tag1 ((("CI", 1138)), "fatptr"), [((0), 100000000, 0, -170); ((0), 100000000, 0, -171)], (0)), 100000000, 0, -169), (Tag1 (0, (Tag3 (Tag1 ((("CI", 1138)), "fatptr"), [((0), 100000000, 0, -167); ((0), 100000000, 0, -168)], (0)), 100000000, 0, -166), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -165), 0), 100000000, 0, -164), 0), 100000000, 0, -163), (("yaml_stub_17_yaml_emitter_emit", 2, 1, "", [0; 0], 0)), (("ffi/lib/g.ml", 55, 1964, 1964), ("ffi/lib/g.ml", 56, 2040, 2076), 0), 0, Tag1 ("Yaml_ffi__G", 17)), 0); (("yaml_stub_18_yaml_stream_start_event_initialize", 1156), ((Tag1 (0, (Tag3 (Tag1 ((("CI", 1138)), "fatptr"), [((0), 100000000, 0, -161); ((0), 100000000, 0, -162)], (0)), 100000000, 0, -160), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Unsigned")), "uint32"), 0, (0)), 100000000, 0, -159), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -158), 0), 100000000, 0, -157), 0), 100000000, 0, -156), (("yaml_stub_18_yaml_stream_start_event_initialize", 2, 1, "", [0; 0], 0)), (("ffi/lib/g.ml", 58, 2079, 2079), ("ffi/lib/g.ml", 60, 2178, 2231), 0), 0, Tag1 ("Yaml_ffi__G", 18)), 0); (("yaml_stub_19_yaml_stream_end_event_initialize", 1157), ((Tag1 (0, (Tag3 (Tag1 ((("CI", 1138)), "fatptr"), [((0), 100000000, 0, -154); ((0), 100000000, 0, -155)], (0)), 100000000, 0, -153), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -152), 0), 100000000, 0, -151), (("yaml_stub_19_yaml_stream_end_event_initialize", 1, 1, "", [0], 0)), (("ffi/lib/g.ml", 62, 2234, 2234), ("ffi/lib/g.ml", 63, 2310, 2361), 0), 0, Tag1 ("Yaml_ffi__G", 19)), 0); (("yaml_stub_20_yaml_document_start_event_initialize", 1158), ((Tag1 (0, (Tag3 (Tag1 ((("CI", 1138)), "fatptr"), [((0), 100000000, 0, -149); ((0), 100000000, 0, -150)], (0)), 100000000, 0, -148), (Tag1 (0, (Tag3 (Tag1 ((("CI", 1138)), "fatptr"), [((0), 100000000, 0, -146); ((0), 100000000, 0, -147)], (0)), 100000000, 0, -145), (Tag1 (0, (Tag3 (Tag1 ((("CI", 1138)), "fatptr"), [((0), 100000000, 0, -143); ((0), 100000000, 0, -144)], (0)), 100000000, 0, -142), (Tag1 (0, (Tag3 (Tag1 ((("CI", 1138)), "fatptr"), [((0), 100000000, 0, -140); ((0), 100000000, 0, -141)], (0)), 100000000, 0, -139), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -138), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -137), 0), 100000000, 0, -136), 0), 100000000, 0, -135), 0), 100000000, 0, -134), 0), 100000000, 0, -133), 0), 100000000, 0, -132), (("yaml_stub_20_yaml_document_start_event_initialize", 5, 1, "", [0; 0; 0; 0; 0], 0)), (("ffi/lib/g.ml", 65, 2364, 2364), ("ffi/lib/g.ml", 67, 2499, 2554), 0), 0, Tag1 ("Yaml_ffi__G", 20)), 0); (("yaml_stub_21_yaml_document_end_event_initialize", 1159), ((Tag1 (0, (Tag3 (Tag1 ((("CI", 1138)), "fatptr"), [((0), 100000000, 0, -130); ((0), 100000000, 0, -131)], (0)), 100000000, 0, -129), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -128), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -127), 0), 100000000, 0, -126), 0), 100000000, 0, -125), (("yaml_stub_21_yaml_document_end_event_initialize", 2, 1, "", [0; 0], 0)), (("ffi/lib/g.ml", 69, 2557, 2557), ("ffi/lib/g.ml", 71, 2645, 2698), 0), 0, Tag1 ("Yaml_ffi__G", 21)), 0); (("yaml_stub_22_yaml_alias_event_initialize", 1160), ((Tag1 (0, (Tag3 (Tag1 ((("CI", 1138)), "fatptr"), [((0), 100000000, 0, -123); ((0), 100000000, 0, -124)], (0)), 100000000, 0, -122), (Tag1 (0, (Tag3 (Tag1 ((("CI", 1138)), "fatptr"), [((0), 100000000, 0, -120); ((0), 100000000, 0, -121)], (0)), 100000000, 0, -119), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -118), 0), 100000000, 0, -117), 0), 100000000, 0, -116), (("yaml_stub_22_yaml_alias_event_initialize", 2, 1, "", [0; 0], 0)), (("ffi/lib/g.ml", 73, 2701, 2701), ("ffi/lib/g.ml", 75, 2789, 2835), 0), 0, Tag1 ("Yaml_ffi__G", 22)), 0); (("yaml_stub_23_yaml_scalar_event_initialize", 1161), ((Tag1 (0, (Tag3 (Tag1 ((("CI", 1138)), "fatptr"), [((0), 100000000, 0, -114); ((0), 100000000, 0, -115)], (0)), 100000000, 0, -113), (Tag1 (0, (Tag3 (Tag1 ((("CI", 1138)), "fatptr"), [((0), 100000000, 0, -111); ((0), 100000000, 0, -112)], (0)), 100000000, 0, -110), (Tag1 (0, (Tag3 (Tag1 ((("CI", 1138)), "fatptr"), [((0), 100000000, 0, -108); ((0), 100000000, 0, -109)], (0)), 100000000, 0, -107), (Tag1 (0, (Tag3 (Tag1 ((("CI", 1138)), "fatptr"), [((0), 100000000, 0, -105); ((0), 100000000, 0, -106)], (0)), 100000000, 0, -104), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -103), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -102), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -101), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Unsigned")), "uint32"), 0, (0)), 100000000, 0, -100), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -99), 0), 100000000, 0, -98), 0), 100000000, 0, -97), 0), 100000000, 0, -96), 0), 100000000, 0, -95), 0), 100000000, 0, -94), 0), 100000000, 0, -93), 0), 100000000, 0, -92), 0), 100000000, 0, -91), (("yaml_stub_23_yaml_scalar_event_initialize_byte8", 8, 1, "yaml_stub_23_yaml_scalar_event_initialize", [0; 0; 0; 0; 0; 0; 0; 0], 0)), (("ffi/lib/g.ml", 77, 2838, 2838), ("ffi/lib/g.ml", 81, 3007, 3102), 0), 0, Tag1 ("Yaml_ffi__G", 23)), 0); (("yaml_stub_24_yaml_sequence_start_event_initialize", 1162), ((Tag1 (0, (Tag3 (Tag1 ((("CI", 1138)), "fatptr"), [((0), 100000000, 0, -89); ((0), 100000000, 0, -90)], (0)), 100000000, 0, -88), (Tag1 (0, (Tag3 (Tag1 ((("CI", 1138)), "fatptr"), [((0), 100000000, 0, -86); ((0), 100000000, 0, -87)], (0)), 100000000, 0, -85), (Tag1 (0, (Tag3 (Tag1 ((("CI", 1138)), "fatptr"), [((0), 100000000, 0, -83); ((0), 100000000, 0, -84)], (0)), 100000000, 0, -82), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -81), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Unsigned")), "uint32"), 0, (0)), 100000000, 0, -80), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -79), 0), 100000000, 0, -78), 0), 100000000, 0, -77), 0), 100000000, 0, -76), 0), 100000000, 0, -75), 0), 100000000, 0, -74), (("yaml_stub_24_yaml_sequence_start_event_initialize", 5, 1, "", [0; 0; 0; 0; 0], 0)), (("ffi/lib/g.ml", 84, 3107, 3107), ("ffi/lib/g.ml", 86, 3242, 3303), 0), 0, Tag1 ("Yaml_ffi__G", 24)), 0); (("yaml_stub_25_yaml_sequence_end_event_initialize", 1163), ((Tag1 (0, (Tag3 (Tag1 ((("CI", 1138)), "fatptr"), [((0), 100000000, 0, -72); ((0), 100000000, 0, -73)], (0)), 100000000, 0, -71), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -70), 0), 100000000, 0, -69), (("yaml_stub_25_yaml_sequence_end_event_initialize", 1, 1, "", [0], 0)), (("ffi/lib/g.ml", 88, 3306, 3306), ("ffi/lib/g.ml", 89, 3384, 3437), 0), 0, Tag1 ("Yaml_ffi__G", 25)), 0); (("yaml_stub_26_yaml_mapping_start_event_initialize", 1164), ((Tag1 (0, (Tag3 (Tag1 ((("CI", 1138)), "fatptr"), [((0), 100000000, 0, -67); ((0), 100000000, 0, -68)], (0)), 100000000, 0, -66), (Tag1 (0, (Tag3 (Tag1 ((("CI", 1138)), "fatptr"), [((0), 100000000, 0, -64); ((0), 100000000, 0, -65)], (0)), 100000000, 0, -63), (Tag1 (0, (Tag3 (Tag1 ((("CI", 1138)), "fatptr"), [((0), 100000000, 0, -61); ((0), 100000000, 0, -62)], (0)), 100000000, 0, -60), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -59), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Unsigned")), "uint32"), 0, (0)), 100000000, 0, -58), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -57), 0), 100000000, 0, -56), 0), 100000000, 0, -55), 0), 100000000, 0, -54), 0), 100000000, 0, -53), 0), 100000000, 0, -52), (("yaml_stub_26_yaml_mapping_start_event_initialize", 5, 1, "", [0; 0; 0; 0; 0], 0)), (("ffi/lib/g.ml", 91, 3440, 3440), ("ffi/lib/g.ml", 93, 3574, 3634), 0), 0, Tag1 ("Yaml_ffi__G", 26)), 0); (("yaml_stub_27_yaml_mapping_end_event_initialize", 1165), ((Tag1 (0, (Tag3 (Tag1 ((("CI", 1138)), "fatptr"), [((0), 100000000, 0, -50); ((0), 100000000, 0, -51)], (0)), 100000000, 0, -49), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -48), 0), 100000000, 0, -47), (("yaml_stub_27_yaml_mapping_end_event_initialize", 1, 1, "", [0], 0)), (("ffi/lib/g.ml", 95, 3637, 3637), ("ffi/lib/g.ml", 96, 3714, 3766), 0), 0, Tag1 ("Yaml_ffi__G", 27)), 0); Tag1 (("result", 1166), ([((("a")), 100000000, 0, -46)], 1, 0, 1, (((("a")), 100000000, 0, -46)), [25], [1], 0, 0, (("ffi/lib/g.ml", 98, 3769, 3769), ("ffi/lib/g.ml", 98, 3769, 3788), 0), 0, 0, 0, Tag1 ("Yaml_ffi__G", 28)), 1, 0); Tag1 (("return", 1167), ([((("a")), 100000000, 0, -45)], 1, 0, 1, (((("a")), 100000000, 0, -45)), [25], [1], 0, 0, (("ffi/lib/g.ml", 99, 3789, 3789), ("ffi/lib/g.ml", 99, 3789, 3808), 0), 0, 0, 0, Tag1 ("Yaml_ffi__G", 29)), 1, 0); Tag1 (("fn", 1168), ([((("a")), 100000000, 0, -44)], 1, Tag1 ([(("Returns", 402), ([(Tag3 (Tag1 ((("CI", 1138)), "typ"), [((("a")), 100000000, 0, -36)], (0)), 100000000, 0, -37)]), ((Tag3 ((("fn", 1168)), [(Tag3 ((("return", 1167)), [((("a")), 100000000, 0, -36)], (0)), 100000000, 0, -35)], (0)), 100000000, 0, -34)), (("ffi/lib/g.ml", 101, 3822, 3823), ("ffi/lib/g.ml", 101, 3822, 3863), 0), 0, Tag1 ("Yaml_ffi__G", 31)); (("Function", 403), ([(Tag3 (Tag1 ((("CI", 1138)), "typ"), [((("a")), 100000000, 0, -41)], (0)), 100000000, 0, -42); (Tag3 ((("fn", 1168)), [((("b")), 100000000, 0, -40)], (0)), 100000000, 0, -43)]), ((Tag3 ((("fn", 1168)), [(Tag1 (0, ((("a")), 100000000, 0, -41), ((("b")), 100000000, 0, -40), 0), 100000000, 0, -39)], (0)), 100000000, 0, -38)), (("ffi/lib/g.ml", 102, 3864, 3865), ("ffi/lib/g.ml", 102, 3864, 3913), 0), 0, Tag1 ("Yaml_ffi__G", 32))], 0), 1, 0, [63], [0], 0, 0, (("ffi/lib/g.ml", 100, 3809, 3809), ("ffi/lib/g.ml", 102, 3864, 3913), 0), 0, 0, 0, Tag1 ("Yaml_ffi__G", 30)), 1, 0); (("map_result", 1169), ((Tag1 (0, (Tag1 (0, ((0), 100000000, 0, -32), ((0), 100000000, 0, -31), (1)), 100000000, 0, -33), (Tag1 (0, ((0), 100000000, 0, -32), ((0), 100000000, 0, -31), 0), 100000000, 0, -30), 0), 100000000, 0, -29), 0, (("ffi/lib/g.ml", 103, 3914, 3918), ("ffi/lib/g.ml", 103, 3914, 3928), 0), 0, Tag1 ("Yaml_ffi__G", 33)), 0); (("returning", 1170), ((Tag1 (0, (Tag3 (Tag1 ((("CI", 1138)), "typ"), [((0), 100000000, 0, -27)], (0)), 100000000, 0, -28), (Tag3 ((("fn", 1168)), [(Tag3 ((("return", 1167)), [((0), 100000000, 0, -27)], (0)), 100000000, 0, -26)], (0)), 100000000, 0, -25), 0), 100000000, 0, -24), 0, (("ffi/lib/g.ml", 104, 3939, 3943), ("ffi/lib/g.ml", 104, 3939, 3952), 0), 0, Tag1 ("Yaml_ffi__G", 36)), 0); (("@->", 1171), ((Tag1 (0, (Tag3 (Tag1 ((("CI", 1138)), "typ"), [((0), 100000000, 0, -21)], (0)), 100000000, 0, -23), (Tag1 (0, (Tag3 ((("fn", 1168)), [((0), 100000000, 0, -20)], (0)), 100000000, 0, -22), (Tag3 ((("fn", 1168)), [(Tag1 (0, ((0), 100000000, 0, -21), ((0), 100000000, 0, -20), 0), 100000000, 0, -19)], (0)), 100000000, 0, -18), 0), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("ffi/lib/g.ml", 105, 3967, 3971), ("ffi/lib/g.ml", 105, 3967, 3976), 0), 0, Tag1 ("Yaml_ffi__G", 38)), 0); (("foreign", 1172), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -15), (Tag1 (0, (Tag3 ((("fn", 1168)), [(Tag1 (0, ((("a")), 100000000, 0, -12), ((("b")), 100000000, 0, -11), 0), 100000000, 0, -14)], (0)), 100000000, 0, -13), (Tag1 (0, ((("a")), 100000000, 0, -12), ((("b")), 100000000, 0, -11), 0), 100000000, 0, -10), 0), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("ffi/lib/g.ml", 106, 3999, 4003), ("ffi/lib/g.ml", 106, 3999, 4010), 0), 0, Tag1 ("Yaml_ffi__G", 41)), 0); (("foreign_value", 1173), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -7), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes")), "typ"), [((("a")), 100000000, 0, -5)], (0)), 100000000, 0, -6), (Tag3 (Tag1 ((Tag2 ("Ctypes")), "ptr"), [((("a")), 100000000, 0, -5)], (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("ffi/lib/g.ml", 334, 12514, 12518), ("ffi/lib/g.ml", 334, 12514, 12531), 0), 0, Tag1 ("Yaml_ffi__G", 737)), 0)], "Yaml_ffi__G", [("Yaml_ffi__G", ("2\157r,\218\173{\205\220\022\221m\230\131\023#")); ("Yaml_ffi", ("g1\201\011\253S\172\153\151p\141\1691\238|\004")); ("Unsigned", ("cd\205\030\181\167\151\005!\134;\177\228\249\168+")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Printf", ("\215<\139]\021\142\224E\245m\198qc(W\229")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Signed", ("R\017i\"\030\024\134f\143\198\192\180>t\175\225")); ("LDouble", ("j\251\140\230^u\251\210\143\236T\207\022\147\011\211")); ("Ctypes_types", ("\140\014\176\188\187lo3aC\196\012\228vn+")); ("Ctypes_static", ("U\030\169\129GB\138P\158'd\012\131\157\202\018")); ("Ctypes_ptr", ("V\021o\161\007\161\245R\242\222:e\151\189\175\207")); ("Ctypes_primitive_types", ("\147\237\001\150\136\017Z\2308\137C\245\023\133\161\158")); ("Ctypes_memory_stubs", ("\016\229\020F\227\153LZ\166P\204(\249\139u\191")); ("Ctypes_bigarray", ("\146\0055mmn\243\187gd\185P\208J\254l")); ("Ctypes", ("\201\151\139N\189F\151(\218n\234\177\197RtW")); ("Cstubs_internals", ("/(\163Z9\154B\252\172\182\224\144\152'\227H")); ("ComplexL", ("\n\230\139\192\213\0226\203\176\242\200\205c\155ag")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Bigarray_compat", ("\150\219\208\188w\237\216\005\r[\152q'\006x\217"))], [(0)])
val foreign_value : string -> 'a Ctypes.typ -> 'a Ctypes.ptr

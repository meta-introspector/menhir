type 'a call
type unknown_call = Unknown : 'a call -> unknown_call
val add : Interface.add_sty -> Interface.add_rty call
val edit_at : Interface.edit_at_sty -> Interface.edit_at_rty call
val query : Interface.query_sty -> Interface.query_rty call
val goals : Interface.goals_sty -> Interface.goals_rty call
val hints : Interface.hints_sty -> Interface.hints_rty call
val status : Interface.status_sty -> Interface.status_rty call
val mkcases : Interface.mkcases_sty -> Interface.mkcases_rty call
val evars : Interface.evars_sty -> Interface.evars_rty call
val search : Interface.search_sty -> Interface.search_rty call
val get_options : Interface.get_options_sty -> Interface.get_options_rty call
val set_options : Interface.set_options_sty -> Interface.set_options_rty call
val quit : Interface.quit_sty -> Interface.quit_rty call
val init : Interface.init_sty -> Interface.init_rty call
val stop_worker : Interface.stop_worker_sty -> Interface.stop_worker_rty call
val wait : Interface.wait_sty -> Interface.wait_rty call
val interp : Interface.interp_sty -> Interface.interp_rty call
val print_ast : Interface.print_ast_sty -> Interface.print_ast_rty call
val annotate : Interface.annotate_sty -> Interface.annotate_rty call
val proof_diff : Interface.proof_diff_sty -> Interface.proof_diff_rty call
val db_cmd : Interface.db_cmd_sty -> Interface.db_cmd_rty call
val db_upd_bpts : Interface.db_upd_bpts_sty -> Interface.db_upd_bpts_rty call
val db_continue : Interface.db_continue_sty -> Interface.db_continue_rty call
val db_stack : Interface.db_stack_sty -> Interface.db_stack_rty call
val db_vars : Interface.db_vars_sty -> Interface.db_vars_rty call
val db_configd : Interface.db_configd_sty -> Interface.db_configd_rty call
val subgoals : Interface.subgoals_sty -> Interface.subgoals_rty call
val abstract_eval_call :
  Interface.handler -> 'a call -> bool * 'a Interface.value
val protocol_version : string
type msg_format = Richpp of { width : int; depth : int; } | Ppcmds
val of_call : 'a call -> Xml_datatype.xml
val to_call : Xml_datatype.xml -> unknown_call
val of_answer :
  msg_format -> 'a call -> 'a Interface.value -> Xml_datatype.xml
val to_answer : 'a call -> Xml_datatype.xml -> 'a Interface.value
val document : (Xml_datatype.xml -> string) -> unit
val pr_call : 'a call -> string
val pr_value : 'a Interface.value -> string
val pr_full_value : 'a call -> 'a Interface.value -> string
type msg_type = Feedback | LtacDebugInfo | Other
val msg_kind : Xml_datatype.xml -> msg_type
val of_feedback : msg_format -> Feedback.feedback -> Xml_datatype.xml
val to_feedback : Xml_datatype.xml -> Feedback.feedback
val of_ltac_debug_answer : tag:string -> Pp.t -> Xml_datatype.xml
val to_ltac_debug_answer : Xml_datatype.xml -> string * Pp.t
val of_vars : (string * Pp.t) list -> Xml_datatype.xml
("DEBUG:rule", [Tag1 (("call", 484), ([((("a")), 100000000, 0, -197)], 1, 0, 1, 0, [7], [2], 0, 0, (("ide/coqide/protocol/xmlprotocol.mli", 16, 777, 777), ("ide/coqide/protocol/xmlprotocol.mli", 16, 777, 789), 0), 0, 0, 0, Tag1 ("Xmlprotocol", 0)), 1, 0); Tag1 (("unknown_call", 485), (0, 0, Tag1 ([(("Unknown", 353), ([(Tag3 ((("call", 484)), [((("a")), 100000000, 0, -196)], (0)), 100000000, 0, -195)]), ((Tag3 ((("unknown_call", 485)), 0, (0)), 100000000, 0, -194)), (("ide/coqide/protocol/xmlprotocol.mli", 18, 791, 811), ("ide/coqide/protocol/xmlprotocol.mli", 18, 791, 844), 0), 0, Tag1 ("Xmlprotocol", 2))], 0), 1, 0, 0, 0, 0, 0, (("ide/coqide/protocol/xmlprotocol.mli", 18, 791, 791), ("ide/coqide/protocol/xmlprotocol.mli", 18, 791, 844), 0), 0, 0, 1, Tag1 ("Xmlprotocol", 1)), 1, 0); (("add", 486), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Interface")), "add_sty"), 0, (0)), 100000000, 0, -193), (Tag3 ((("call", 484)), [(Tag3 (Tag1 ((Tag2 ("Interface")), "add_rty"), 0, (0)), 100000000, 0, -192)], (0)), 100000000, 0, -191), 0), 100000000, 0, -190), 0, (("ide/coqide/protocol/xmlprotocol.mli", 20, 846, 846), ("ide/coqide/protocol/xmlprotocol.mli", 20, 846, 895), 0), 0, Tag1 ("Xmlprotocol", 3)), 0); (("edit_at", 487), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Interface")), "edit_at_sty"), 0, (0)), 100000000, 0, -189), (Tag3 ((("call", 484)), [(Tag3 (Tag1 ((Tag2 ("Interface")), "edit_at_rty"), 0, (0)), 100000000, 0, -188)], (0)), 100000000, 0, -187), 0), 100000000, 0, -186), 0, (("ide/coqide/protocol/xmlprotocol.mli", 21, 896, 896), ("ide/coqide/protocol/xmlprotocol.mli", 21, 896, 949), 0), 0, Tag1 ("Xmlprotocol", 4)), 0); (("query", 488), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Interface")), "query_sty"), 0, (0)), 100000000, 0, -185), (Tag3 ((("call", 484)), [(Tag3 (Tag1 ((Tag2 ("Interface")), "query_rty"), 0, (0)), 100000000, 0, -184)], (0)), 100000000, 0, -183), 0), 100000000, 0, -182), 0, (("ide/coqide/protocol/xmlprotocol.mli", 22, 950, 950), ("ide/coqide/protocol/xmlprotocol.mli", 22, 950, 1001), 0), 0, Tag1 ("Xmlprotocol", 5)), 0); (("goals", 489), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Interface")), "goals_sty"), 0, (0)), 100000000, 0, -181), (Tag3 ((("call", 484)), [(Tag3 (Tag1 ((Tag2 ("Interface")), "goals_rty"), 0, (0)), 100000000, 0, -180)], (0)), 100000000, 0, -179), 0), 100000000, 0, -178), 0, (("ide/coqide/protocol/xmlprotocol.mli", 23, 1002, 1002), ("ide/coqide/protocol/xmlprotocol.mli", 23, 1002, 1053), 0), 0, Tag1 ("Xmlprotocol", 6)), 0); (("hints", 490), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Interface")), "hints_sty"), 0, (0)), 100000000, 0, -177), (Tag3 ((("call", 484)), [(Tag3 (Tag1 ((Tag2 ("Interface")), "hints_rty"), 0, (0)), 100000000, 0, -176)], (0)), 100000000, 0, -175), 0), 100000000, 0, -174), 0, (("ide/coqide/protocol/xmlprotocol.mli", 24, 1054, 1054), ("ide/coqide/protocol/xmlprotocol.mli", 24, 1054, 1105), 0), 0, Tag1 ("Xmlprotocol", 7)), 0); (("status", 491), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Interface")), "status_sty"), 0, (0)), 100000000, 0, -173), (Tag3 ((("call", 484)), [(Tag3 (Tag1 ((Tag2 ("Interface")), "status_rty"), 0, (0)), 100000000, 0, -172)], (0)), 100000000, 0, -171), 0), 100000000, 0, -170), 0, (("ide/coqide/protocol/xmlprotocol.mli", 25, 1106, 1106), ("ide/coqide/protocol/xmlprotocol.mli", 25, 1106, 1158), 0), 0, Tag1 ("Xmlprotocol", 8)), 0); (("mkcases", 492), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Interface")), "mkcases_sty"), 0, (0)), 100000000, 0, -169), (Tag3 ((("call", 484)), [(Tag3 (Tag1 ((Tag2 ("Interface")), "mkcases_rty"), 0, (0)), 100000000, 0, -168)], (0)), 100000000, 0, -167), 0), 100000000, 0, -166), 0, (("ide/coqide/protocol/xmlprotocol.mli", 26, 1159, 1159), ("ide/coqide/protocol/xmlprotocol.mli", 26, 1159, 1212), 0), 0, Tag1 ("Xmlprotocol", 9)), 0); (("evars", 493), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Interface")), "evars_sty"), 0, (0)), 100000000, 0, -165), (Tag3 ((("call", 484)), [(Tag3 (Tag1 ((Tag2 ("Interface")), "evars_rty"), 0, (0)), 100000000, 0, -164)], (0)), 100000000, 0, -163), 0), 100000000, 0, -162), 0, (("ide/coqide/protocol/xmlprotocol.mli", 27, 1213, 1213), ("ide/coqide/protocol/xmlprotocol.mli", 27, 1213, 1264), 0), 0, Tag1 ("Xmlprotocol", 10)), 0); (("search", 494), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Interface")), "search_sty"), 0, (0)), 100000000, 0, -161), (Tag3 ((("call", 484)), [(Tag3 (Tag1 ((Tag2 ("Interface")), "search_rty"), 0, (0)), 100000000, 0, -160)], (0)), 100000000, 0, -159), 0), 100000000, 0, -158), 0, (("ide/coqide/protocol/xmlprotocol.mli", 28, 1265, 1265), ("ide/coqide/protocol/xmlprotocol.mli", 28, 1265, 1317), 0), 0, Tag1 ("Xmlprotocol", 11)), 0); (("get_options", 495), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Interface")), "get_options_sty"), 0, (0)), 100000000, 0, -157), (Tag3 ((("call", 484)), [(Tag3 (Tag1 ((Tag2 ("Interface")), "get_options_rty"), 0, (0)), 100000000, 0, -156)], (0)), 100000000, 0, -155), 0), 100000000, 0, -154), 0, (("ide/coqide/protocol/xmlprotocol.mli", 29, 1318, 1318), ("ide/coqide/protocol/xmlprotocol.mli", 29, 1318, 1375), 0), 0, Tag1 ("Xmlprotocol", 12)), 0); (("set_options", 496), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Interface")), "set_options_sty"), 0, (0)), 100000000, 0, -153), (Tag3 ((("call", 484)), [(Tag3 (Tag1 ((Tag2 ("Interface")), "set_options_rty"), 0, (0)), 100000000, 0, -152)], (0)), 100000000, 0, -151), 0), 100000000, 0, -150), 0, (("ide/coqide/protocol/xmlprotocol.mli", 30, 1376, 1376), ("ide/coqide/protocol/xmlprotocol.mli", 30, 1376, 1433), 0), 0, Tag1 ("Xmlprotocol", 13)), 0); (("quit", 497), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Interface")), "quit_sty"), 0, (0)), 100000000, 0, -149), (Tag3 ((("call", 484)), [(Tag3 (Tag1 ((Tag2 ("Interface")), "quit_rty"), 0, (0)), 100000000, 0, -148)], (0)), 100000000, 0, -147), 0), 100000000, 0, -146), 0, (("ide/coqide/protocol/xmlprotocol.mli", 31, 1434, 1434), ("ide/coqide/protocol/xmlprotocol.mli", 31, 1434, 1484), 0), 0, Tag1 ("Xmlprotocol", 14)), 0); (("init", 498), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Interface")), "init_sty"), 0, (0)), 100000000, 0, -145), (Tag3 ((("call", 484)), [(Tag3 (Tag1 ((Tag2 ("Interface")), "init_rty"), 0, (0)), 100000000, 0, -144)], (0)), 100000000, 0, -143), 0), 100000000, 0, -142), 0, (("ide/coqide/protocol/xmlprotocol.mli", 32, 1485, 1485), ("ide/coqide/protocol/xmlprotocol.mli", 32, 1485, 1535), 0), 0, Tag1 ("Xmlprotocol", 15)), 0); (("stop_worker", 499), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Interface")), "stop_worker_sty"), 0, (0)), 100000000, 0, -141), (Tag3 ((("call", 484)), [(Tag3 (Tag1 ((Tag2 ("Interface")), "stop_worker_rty"), 0, (0)), 100000000, 0, -140)], (0)), 100000000, 0, -139), 0), 100000000, 0, -138), 0, (("ide/coqide/protocol/xmlprotocol.mli", 33, 1536, 1536), ("ide/coqide/protocol/xmlprotocol.mli", 33, 1536, 1593), 0), 0, Tag1 ("Xmlprotocol", 16)), 0); (("wait", 500), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Interface")), "wait_sty"), 0, (0)), 100000000, 0, -137), (Tag3 ((("call", 484)), [(Tag3 (Tag1 ((Tag2 ("Interface")), "wait_rty"), 0, (0)), 100000000, 0, -136)], (0)), 100000000, 0, -135), 0), 100000000, 0, -134), 0, (("ide/coqide/protocol/xmlprotocol.mli", 35, 1641, 1641), ("ide/coqide/protocol/xmlprotocol.mli", 35, 1641, 1691), 0), 0, Tag1 ("Xmlprotocol", 17)), 0); (("interp", 501), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Interface")), "interp_sty"), 0, (0)), 100000000, 0, -133), (Tag3 ((("call", 484)), [(Tag3 (Tag1 ((Tag2 ("Interface")), "interp_rty"), 0, (0)), 100000000, 0, -132)], (0)), 100000000, 0, -131), 0), 100000000, 0, -130), 0, (("ide/coqide/protocol/xmlprotocol.mli", 37, 1717, 1717), ("ide/coqide/protocol/xmlprotocol.mli", 37, 1717, 1769), 0), 0, Tag1 ("Xmlprotocol", 18)), 0); (("print_ast", 502), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Interface")), "print_ast_sty"), 0, (0)), 100000000, 0, -129), (Tag3 ((("call", 484)), [(Tag3 (Tag1 ((Tag2 ("Interface")), "print_ast_rty"), 0, (0)), 100000000, 0, -128)], (0)), 100000000, 0, -127), 0), 100000000, 0, -126), 0, (("ide/coqide/protocol/xmlprotocol.mli", 38, 1770, 1770), ("ide/coqide/protocol/xmlprotocol.mli", 38, 1770, 1825), 0), 0, Tag1 ("Xmlprotocol", 19)), 0); (("annotate", 503), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Interface")), "annotate_sty"), 0, (0)), 100000000, 0, -125), (Tag3 ((("call", 484)), [(Tag3 (Tag1 ((Tag2 ("Interface")), "annotate_rty"), 0, (0)), 100000000, 0, -124)], (0)), 100000000, 0, -123), 0), 100000000, 0, -122), 0, (("ide/coqide/protocol/xmlprotocol.mli", 39, 1826, 1826), ("ide/coqide/protocol/xmlprotocol.mli", 39, 1826, 1880), 0), 0, Tag1 ("Xmlprotocol", 20)), 0); (("proof_diff", 504), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Interface")), "proof_diff_sty"), 0, (0)), 100000000, 0, -121), (Tag3 ((("call", 484)), [(Tag3 (Tag1 ((Tag2 ("Interface")), "proof_diff_rty"), 0, (0)), 100000000, 0, -120)], (0)), 100000000, 0, -119), 0), 100000000, 0, -118), 0, (("ide/coqide/protocol/xmlprotocol.mli", 40, 1881, 1881), ("ide/coqide/protocol/xmlprotocol.mli", 40, 1881, 1937), 0), 0, Tag1 ("Xmlprotocol", 21)), 0); (("db_cmd", 505), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Interface")), "db_cmd_sty"), 0, (0)), 100000000, 0, -117), (Tag3 ((("call", 484)), [(Tag3 (Tag1 ((Tag2 ("Interface")), "db_cmd_rty"), 0, (0)), 100000000, 0, -116)], (0)), 100000000, 0, -115), 0), 100000000, 0, -114), 0, (("ide/coqide/protocol/xmlprotocol.mli", 41, 1938, 1938), ("ide/coqide/protocol/xmlprotocol.mli", 41, 1938, 1990), 0), 0, Tag1 ("Xmlprotocol", 22)), 0); (("db_upd_bpts", 506), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Interface")), "db_upd_bpts_sty"), 0, (0)), 100000000, 0, -113), (Tag3 ((("call", 484)), [(Tag3 (Tag1 ((Tag2 ("Interface")), "db_upd_bpts_rty"), 0, (0)), 100000000, 0, -112)], (0)), 100000000, 0, -111), 0), 100000000, 0, -110), 0, (("ide/coqide/protocol/xmlprotocol.mli", 42, 1991, 1991), ("ide/coqide/protocol/xmlprotocol.mli", 42, 1991, 2048), 0), 0, Tag1 ("Xmlprotocol", 23)), 0); (("db_continue", 507), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Interface")), "db_continue_sty"), 0, (0)), 100000000, 0, -109), (Tag3 ((("call", 484)), [(Tag3 (Tag1 ((Tag2 ("Interface")), "db_continue_rty"), 0, (0)), 100000000, 0, -108)], (0)), 100000000, 0, -107), 0), 100000000, 0, -106), 0, (("ide/coqide/protocol/xmlprotocol.mli", 43, 2049, 2049), ("ide/coqide/protocol/xmlprotocol.mli", 43, 2049, 2106), 0), 0, Tag1 ("Xmlprotocol", 24)), 0); (("db_stack", 508), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Interface")), "db_stack_sty"), 0, (0)), 100000000, 0, -105), (Tag3 ((("call", 484)), [(Tag3 (Tag1 ((Tag2 ("Interface")), "db_stack_rty"), 0, (0)), 100000000, 0, -104)], (0)), 100000000, 0, -103), 0), 100000000, 0, -102), 0, (("ide/coqide/protocol/xmlprotocol.mli", 44, 2107, 2107), ("ide/coqide/protocol/xmlprotocol.mli", 44, 2107, 2161), 0), 0, Tag1 ("Xmlprotocol", 25)), 0); (("db_vars", 509), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Interface")), "db_vars_sty"), 0, (0)), 100000000, 0, -101), (Tag3 ((("call", 484)), [(Tag3 (Tag1 ((Tag2 ("Interface")), "db_vars_rty"), 0, (0)), 100000000, 0, -100)], (0)), 100000000, 0, -99), 0), 100000000, 0, -98), 0, (("ide/coqide/protocol/xmlprotocol.mli", 45, 2162, 2162), ("ide/coqide/protocol/xmlprotocol.mli", 45, 2162, 2215), 0), 0, Tag1 ("Xmlprotocol", 26)), 0); (("db_configd", 510), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Interface")), "db_configd_sty"), 0, (0)), 100000000, 0, -97), (Tag3 ((("call", 484)), [(Tag3 (Tag1 ((Tag2 ("Interface")), "db_configd_rty"), 0, (0)), 100000000, 0, -96)], (0)), 100000000, 0, -95), 0), 100000000, 0, -94), 0, (("ide/coqide/protocol/xmlprotocol.mli", 46, 2216, 2216), ("ide/coqide/protocol/xmlprotocol.mli", 46, 2216, 2272), 0), 0, Tag1 ("Xmlprotocol", 27)), 0); (("subgoals", 511), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Interface")), "subgoals_sty"), 0, (0)), 100000000, 0, -93), (Tag3 ((("call", 484)), [(Tag3 (Tag1 ((Tag2 ("Interface")), "subgoals_rty"), 0, (0)), 100000000, 0, -92)], (0)), 100000000, 0, -91), 0), 100000000, 0, -90), 0, (("ide/coqide/protocol/xmlprotocol.mli", 47, 2273, 2273), ("ide/coqide/protocol/xmlprotocol.mli", 47, 2273, 2324), 0), 0, Tag1 ("Xmlprotocol", 28)), 0); (("abstract_eval_call", 512), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Interface")), "handler"), 0, (0)), 100000000, 0, -89), (Tag1 (0, (Tag3 ((("call", 484)), [((("a")), 100000000, 0, -87)], (0)), 100000000, 0, -88), (Tag2 ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -85); (Tag3 (Tag1 ((Tag2 ("Interface")), "value"), [((("a")), 100000000, 0, -87)], (0)), 100000000, 0, -86)]), 100000000, 0, -84), 0), 100000000, 0, -83), 0), 100000000, 0, -82), 0, (("ide/coqide/protocol/xmlprotocol.mli", 49, 2326, 2326), ("ide/coqide/protocol/xmlprotocol.mli", 49, 2326, 2388), 0), 0, Tag1 ("Xmlprotocol", 29)), 0); (("protocol_version", 513), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -81), 0, (("ide/coqide/protocol/xmlprotocol.mli", 53, 2417, 2417), ("ide/coqide/protocol/xmlprotocol.mli", 53, 2417, 2446), 0), 0, Tag1 ("Xmlprotocol", 30)), 0); Tag1 (("msg_format", 514), (0, 0, Tag1 ([(("Richpp", 383), Tag1 ([(("width", 384), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -79), (("ide/coqide/protocol/xmlprotocol.mli", 58, 2600, 2630), ("ide/coqide/protocol/xmlprotocol.mli", 58, 2600, 2642), 0), 0, Tag1 ("Xmlprotocol", 32)); (("depth", 385), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -80), (("ide/coqide/protocol/xmlprotocol.mli", 58, 2600, 2643), ("ide/coqide/protocol/xmlprotocol.mli", 58, 2600, 2654), 0), 0, Tag1 ("Xmlprotocol", 33))]), 0, (("ide/coqide/protocol/xmlprotocol.mli", 58, 2600, 2618), ("ide/coqide/protocol/xmlprotocol.mli", 58, 2600, 2656), 0), 0, Tag1 ("Xmlprotocol", 34)); (("Ppcmds", 386), (0), 0, (("ide/coqide/protocol/xmlprotocol.mli", 58, 2600, 2657), ("ide/coqide/protocol/xmlprotocol.mli", 58, 2600, 2665), 0), 0, Tag1 ("Xmlprotocol", 35))], 0), 1, 0, 0, 0, 0, 0, (("ide/coqide/protocol/xmlprotocol.mli", 58, 2600, 2600), ("ide/coqide/protocol/xmlprotocol.mli", 58, 2600, 2665), 0), 0, 0, 0, Tag1 ("Xmlprotocol", 31)), 1, 0); (("of_call", 515), ((Tag1 (0, (Tag3 ((("call", 484)), [((("a")), 100000000, 0, -78)], (0)), 100000000, 0, -77), (Tag3 (Tag1 ((Tag2 ("Xml_datatype")), "xml"), 0, (0)), 100000000, 0, -76), 0), 100000000, 0, -75), 0, (("ide/coqide/protocol/xmlprotocol.mli", 62, 2698, 2698), ("ide/coqide/protocol/xmlprotocol.mli", 62, 2698, 2726), 0), 0, Tag1 ("Xmlprotocol", 41)), 0); (("to_call", 516), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Xml_datatype")), "xml"), 0, (0)), 100000000, 0, -74), (Tag3 ((("unknown_call", 485)), 0, (0)), 100000000, 0, -73), 0), 100000000, 0, -72), 0, (("ide/coqide/protocol/xmlprotocol.mli", 63, 2727, 2727), ("ide/coqide/protocol/xmlprotocol.mli", 63, 2727, 2760), 0), 0, Tag1 ("Xmlprotocol", 42)), 0); (("of_answer", 517), ((Tag1 (0, (Tag3 ((("msg_format", 514)), 0, (0)), 100000000, 0, -71), (Tag1 (0, (Tag3 ((("call", 484)), [((("a")), 100000000, 0, -69)], (0)), 100000000, 0, -70), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Interface")), "value"), [((("a")), 100000000, 0, -69)], (0)), 100000000, 0, -68), (Tag3 (Tag1 ((Tag2 ("Xml_datatype")), "xml"), 0, (0)), 100000000, 0, -67), 0), 100000000, 0, -66), 0), 100000000, 0, -65), 0), 100000000, 0, -64), 0, (("ide/coqide/protocol/xmlprotocol.mli", 65, 2762, 2762), ("ide/coqide/protocol/xmlprotocol.mli", 65, 2762, 2818), 0), 0, Tag1 ("Xmlprotocol", 43)), 0); (("to_answer", 518), ((Tag1 (0, (Tag3 ((("call", 484)), [((("a")), 100000000, 0, -61)], (0)), 100000000, 0, -63), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Xml_datatype")), "xml"), 0, (0)), 100000000, 0, -62), (Tag3 (Tag1 ((Tag2 ("Interface")), "value"), [((("a")), 100000000, 0, -61)], (0)), 100000000, 0, -60), 0), 100000000, 0, -59), 0), 100000000, 0, -58), 0, (("ide/coqide/protocol/xmlprotocol.mli", 66, 2819, 2819), ("ide/coqide/protocol/xmlprotocol.mli", 66, 2819, 2861), 0), 0, Tag1 ("Xmlprotocol", 44)), 0); (("document", 519), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Xml_datatype")), "xml"), 0, (0)), 100000000, 0, -57), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -56), 0), 100000000, 0, -55), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -54), 0), 100000000, 0, -53), 0, (("ide/coqide/protocol/xmlprotocol.mli", 69, 2909, 2909), ("ide/coqide/protocol/xmlprotocol.mli", 69, 2909, 2947), 0), 0, Tag1 ("Xmlprotocol", 45)), 0); (("pr_call", 520), ((Tag1 (0, (Tag3 ((("call", 484)), [((("a")), 100000000, 0, -52)], (0)), 100000000, 0, -51), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -50), 0), 100000000, 0, -49), 0, (("ide/coqide/protocol/xmlprotocol.mli", 73, 2974, 2974), ("ide/coqide/protocol/xmlprotocol.mli", 73, 2974, 3005), 0), 0, Tag1 ("Xmlprotocol", 46)), 0); (("pr_value", 521), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Interface")), "value"), [((("a")), 100000000, 0, -48)], (0)), 100000000, 0, -47), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -46), 0), 100000000, 0, -45), 0, (("ide/coqide/protocol/xmlprotocol.mli", 74, 3006, 3006), ("ide/coqide/protocol/xmlprotocol.mli", 74, 3006, 3039), 0), 0, Tag1 ("Xmlprotocol", 47)), 0); (("pr_full_value", 522), ((Tag1 (0, (Tag3 ((("call", 484)), [((("a")), 100000000, 0, -43)], (0)), 100000000, 0, -44), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Interface")), "value"), [((("a")), 100000000, 0, -43)], (0)), 100000000, 0, -42), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -41), 0), 100000000, 0, -40), 0), 100000000, 0, -39), 0, (("ide/coqide/protocol/xmlprotocol.mli", 75, 3040, 3040), ("ide/coqide/protocol/xmlprotocol.mli", 75, 3040, 3089), 0), 0, Tag1 ("Xmlprotocol", 48)), 0); Tag1 (("msg_type", 523), (0, 0, Tag1 ([(("Feedback", 396), (0), 0, (("ide/coqide/protocol/xmlprotocol.mli", 78, 3157, 3173), ("ide/coqide/protocol/xmlprotocol.mli", 78, 3157, 3181), 0), 0, Tag1 ("Xmlprotocol", 50)); (("LtacDebugInfo", 397), (0), 0, (("ide/coqide/protocol/xmlprotocol.mli", 78, 3157, 3182), ("ide/coqide/protocol/xmlprotocol.mli", 78, 3157, 3197), 0), 0, Tag1 ("Xmlprotocol", 51)); (("Other", 398), (0), 0, (("ide/coqide/protocol/xmlprotocol.mli", 78, 3157, 3198), ("ide/coqide/protocol/xmlprotocol.mli", 78, 3157, 3205), 0), 0, Tag1 ("Xmlprotocol", 52))], 0), 1, 0, 0, 0, 0, 0, (("ide/coqide/protocol/xmlprotocol.mli", 78, 3157, 3157), ("ide/coqide/protocol/xmlprotocol.mli", 78, 3157, 3205), 0), 0, 1, 0, Tag1 ("Xmlprotocol", 49)), 1, 0); (("msg_kind", 524), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Xml_datatype")), "xml"), 0, (0)), 100000000, 0, -38), (Tag3 ((("msg_type", 523)), 0, (0)), 100000000, 0, -37), 0), 100000000, 0, -36), 0, (("ide/coqide/protocol/xmlprotocol.mli", 81, 3264, 3264), ("ide/coqide/protocol/xmlprotocol.mli", 81, 3264, 3294), 0), 0, Tag1 ("Xmlprotocol", 53)), 0); (("of_feedback", 525), ((Tag1 (0, (Tag3 ((("msg_format", 514)), 0, (0)), 100000000, 0, -35), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Feedback")), "feedback"), 0, (0)), 100000000, 0, -34), (Tag3 (Tag1 ((Tag2 ("Xml_datatype")), "xml"), 0, (0)), 100000000, 0, -33), 0), 100000000, 0, -32), 0), 100000000, 0, -31), 0, (("ide/coqide/protocol/xmlprotocol.mli", 84, 3332, 3332), ("ide/coqide/protocol/xmlprotocol.mli", 84, 3332, 3388), 0), 0, Tag1 ("Xmlprotocol", 54)), 0); (("to_feedback", 526), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Xml_datatype")), "xml"), 0, (0)), 100000000, 0, -30), (Tag3 (Tag1 ((Tag2 ("Feedback")), "feedback"), 0, (0)), 100000000, 0, -29), 0), 100000000, 0, -28), 0, (("ide/coqide/protocol/xmlprotocol.mli", 85, 3389, 3389), ("ide/coqide/protocol/xmlprotocol.mli", 85, 3389, 3431), 0), 0, Tag1 ("Xmlprotocol", 55)), 0); (("of_ltac_debug_answer", 527), ((Tag1 (("tag"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -27), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -26), (Tag3 (Tag1 ((Tag2 ("Xml_datatype")), "xml"), 0, (0)), 100000000, 0, -25), 0), 100000000, 0, -24), 0), 100000000, 0, -23), 0, (("ide/coqide/protocol/xmlprotocol.mli", 88, 3475, 3475), ("ide/coqide/protocol/xmlprotocol.mli", 88, 3475, 3527), 0), 0, Tag1 ("Xmlprotocol", 56)), 0); (("to_ltac_debug_answer", 528), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Xml_datatype")), "xml"), 0, (0)), 100000000, 0, -22), (Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -20); (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -21)]), 100000000, 0, -19), 0), 100000000, 0, -18), 0, (("ide/coqide/protocol/xmlprotocol.mli", 89, 3528, 3528), ("ide/coqide/protocol/xmlprotocol.mli", 89, 3528, 3575), 0), 0, Tag1 ("Xmlprotocol", 57)), 0); (("of_vars", 529), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -16); (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -17)]), 100000000, 0, -15)], (0)), 100000000, 0, -14), (Tag3 (Tag1 ((Tag2 ("Xml_datatype")), "xml"), 0, (0)), 100000000, 0, -13), 0), 100000000, 0, -12), 0, (("ide/coqide/protocol/xmlprotocol.mli", 92, 3612, 3612), ("ide/coqide/protocol/xmlprotocol.mli", 92, 3612, 3653), 0), 0, Tag1 ("Xmlprotocol", 58)), 0); (("of_stack", 530), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6); (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -9); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -11)], (0)), 100000000, 0, -10)]), 100000000, 0, -8)], (0)), 100000000, 0, -7)]), 100000000, 0, -5)], (0)), 100000000, 0, -4), (Tag3 (Tag1 ((Tag2 ("Xml_datatype")), "xml"), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("ide/coqide/protocol/xmlprotocol.mli", 95, 3691, 3691), ("ide/coqide/protocol/xmlprotocol.mli", 95, 3691, 3755), 0), 0, Tag1 ("Xmlprotocol", 59)), 0)], "Xmlprotocol", [("Xmlprotocol", ("\184\004\192\014\001\232\216\188\tX\149&s\227\204\235")); ("Xml_datatype", ("\200_,.\243\247\166\156\210\247\226\250Oey\171")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Stateid", ("\183\165\247\166~\005\017.\179f.\178n\255(\137")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Interface", ("\215\156\153U\233\006=\152\196\187\242\1452E\144\002")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Feedback", ("a\178\127\150\142\2521\161\147\142V7\248\191\028\219")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150"))], [(0)])
val of_stack : (string * (string * int list) option) list -> Xml_datatype.xml

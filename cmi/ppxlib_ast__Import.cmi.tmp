module Js = Ppxlib_ast__.Versions.OCaml_500
module Ocaml = Ppxlib_ast__.Versions.OCaml_current
module Select_ast :
  functor (Ocaml : Ppxlib_ast__.Versions.OCaml_version) ->
    sig
      module Ast = Ppxlib_ast__Versions.OCaml_500.Ast
      val version : int
      val string_version : string
      type types =
          < case : Ast.Parsetree.case; class_expr : Ast.Parsetree.class_expr;
            class_field : Ast.Parsetree.class_field;
            class_signature : Ast.Parsetree.class_signature;
            class_type : Ast.Parsetree.class_type;
            class_type_field : Ast.Parsetree.class_type_field;
            core_type : Ast.Parsetree.core_type;
            expression : Ast.Parsetree.expression;
            extension_constructor : Ast.Parsetree.extension_constructor;
            module_expr : Ast.Parsetree.module_expr;
            module_type : Ast.Parsetree.module_type;
            pattern : Ast.Parsetree.pattern;
            signature : Ast.Parsetree.signature;
            signature_item : Ast.Parsetree.signature_item;
            structure : Ast.Parsetree.structure;
            structure_item : Ast.Parsetree.structure_item;
            toplevel_phrase : Ast.Parsetree.toplevel_phrase;
            type_declaration : Ast.Parsetree.type_declaration;
            type_extension : Ast.Parsetree.type_extension >
          Ppxlib_ast__Versions._types
      type _ Ppxlib_ast__Versions.witnesses +=
          Version : types Ppxlib_ast__Versions.witnesses
      val migration_info : types Ppxlib_ast__Versions.migration_info
      module Type :
        sig
          type ('js, 'ocaml) t =
              Structure :
                (Js.Ast.Parsetree.structure, Ocaml.Ast.Parsetree.structure) t
            | Signature :
                (Js.Ast.Parsetree.signature, Ocaml.Ast.Parsetree.signature) t
            | Toplevel_phrase :
                (Js.Ast.Parsetree.toplevel_phrase,
                 Ocaml.Ast.Parsetree.toplevel_phrase)
                t
            | Core_type :
                (Js.Ast.Parsetree.core_type, Ocaml.Ast.Parsetree.core_type) t
            | Expression :
                (Js.Ast.Parsetree.expression, Ocaml.Ast.Parsetree.expression)
                t
            | Pattern :
                (Js.Ast.Parsetree.pattern, Ocaml.Ast.Parsetree.pattern) t
            | Case : (Js.Ast.Parsetree.case, Ocaml.Ast.Parsetree.case) t
            | Type_declaration :
                (Js.Ast.Parsetree.type_declaration,
                 Ocaml.Ast.Parsetree.type_declaration)
                t
            | Type_extension :
                (Js.Ast.Parsetree.type_extension,
                 Ocaml.Ast.Parsetree.type_extension)
                t
            | Extension_constructor :
                (Js.Ast.Parsetree.extension_constructor,
                 Ocaml.Ast.Parsetree.extension_constructor)
                t
            | Class_expr :
                (Js.Ast.Parsetree.class_expr, Ocaml.Ast.Parsetree.class_expr)
                t
            | Class_field :
                (Js.Ast.Parsetree.class_field,
                 Ocaml.Ast.Parsetree.class_field)
                t
            | Class_type :
                (Js.Ast.Parsetree.class_type, Ocaml.Ast.Parsetree.class_type)
                t
            | Class_signature :
                (Js.Ast.Parsetree.class_signature,
                 Ocaml.Ast.Parsetree.class_signature)
                t
            | Class_type_field :
                (Js.Ast.Parsetree.class_type_field,
                 Ocaml.Ast.Parsetree.class_type_field)
                t
            | Module_expr :
                (Js.Ast.Parsetree.module_expr,
                 Ocaml.Ast.Parsetree.module_expr)
                t
            | Module_type :
                (Js.Ast.Parsetree.module_type,
                 Ocaml.Ast.Parsetree.module_type)
                t
            | Signature_item :
                (Js.Ast.Parsetree.signature_item,
                 Ocaml.Ast.Parsetree.signature_item)
                t
            | Structure_item :
                (Js.Ast.Parsetree.structure_item,
                 Ocaml.Ast.Parsetree.structure_item)
                t
            | List : ('a, 'b) t -> ('a list, 'b list) t
            | Pair : ('a, 'b) t * ('c, 'd) t -> ('a * 'c, 'b * 'd) t
        end
      module Of_ocaml :
        sig
          val copy_structure :
            Ocaml.Ast.Parsetree.structure -> Js.Ast.Parsetree.structure
          val copy_signature :
            Ocaml.Ast.Parsetree.signature -> Js.Ast.Parsetree.signature
          val copy_toplevel_phrase :
            Ocaml.Ast.Parsetree.toplevel_phrase ->
            Js.Ast.Parsetree.toplevel_phrase
          val copy_core_type :
            Ocaml.Ast.Parsetree.core_type -> Js.Ast.Parsetree.core_type
          val copy_expression :
            Ocaml.Ast.Parsetree.expression -> Js.Ast.Parsetree.expression
          val copy_pattern :
            Ocaml.Ast.Parsetree.pattern -> Js.Ast.Parsetree.pattern
          val copy_case : Ocaml.Ast.Parsetree.case -> Js.Ast.Parsetree.case
          val copy_type_declaration :
            Ocaml.Ast.Parsetree.type_declaration ->
            Js.Ast.Parsetree.type_declaration
          val copy_type_extension :
            Ocaml.Ast.Parsetree.type_extension ->
            Js.Ast.Parsetree.type_extension
          val copy_extension_constructor :
            Ocaml.Ast.Parsetree.extension_constructor ->
            Js.Ast.Parsetree.extension_constructor
          val copy_class_expr :
            Ocaml.Ast.Parsetree.class_expr -> Js.Ast.Parsetree.class_expr
          val copy_class_field :
            Ocaml.Ast.Parsetree.class_field -> Js.Ast.Parsetree.class_field
          val copy_class_type :
            Ocaml.Ast.Parsetree.class_type -> Js.Ast.Parsetree.class_type
          val copy_class_signature :
            Ocaml.Ast.Parsetree.class_signature ->
            Js.Ast.Parsetree.class_signature
          val copy_class_type_field :
            Ocaml.Ast.Parsetree.class_type_field ->
            Js.Ast.Parsetree.class_type_field
          val copy_module_expr :
            Ocaml.Ast.Parsetree.module_expr -> Js.Ast.Parsetree.module_expr
          val copy_module_type :
            Ocaml.Ast.Parsetree.module_type -> Js.Ast.Parsetree.module_type
          val copy_signature_item :
            Ocaml.Ast.Parsetree.signature_item ->
            Js.Ast.Parsetree.signature_item
          val copy_structure_item :
            Ocaml.Ast.Parsetree.structure_item ->
            Js.Ast.Parsetree.structure_item
        end
      module To_ocaml :
        sig
          val copy_structure :
            Js.Ast.Parsetree.structure -> Ocaml.Ast.Parsetree.structure
          val copy_signature :
            Js.Ast.Parsetree.signature -> Ocaml.Ast.Parsetree.signature
          val copy_toplevel_phrase :
            Js.Ast.Parsetree.toplevel_phrase ->
            Ocaml.Ast.Parsetree.toplevel_phrase
          val copy_core_type :
            Js.Ast.Parsetree.core_type -> Ocaml.Ast.Parsetree.core_type
          val copy_expression :
            Js.Ast.Parsetree.expression -> Ocaml.Ast.Parsetree.expression
          val copy_pattern :
            Js.Ast.Parsetree.pattern -> Ocaml.Ast.Parsetree.pattern
          val copy_case : Js.Ast.Parsetree.case -> Ocaml.Ast.Parsetree.case
          val copy_type_declaration :
            Js.Ast.Parsetree.type_declaration ->
            Ocaml.Ast.Parsetree.type_declaration
          val copy_type_extension :
            Js.Ast.Parsetree.type_extension ->
            Ocaml.Ast.Parsetree.type_extension
          val copy_extension_constructor :
            Js.Ast.Parsetree.extension_constructor ->
            Ocaml.Ast.Parsetree.extension_constructor
          val copy_class_expr :
            Js.Ast.Parsetree.class_expr -> Ocaml.Ast.Parsetree.class_expr
          val copy_class_field :
            Js.Ast.Parsetree.class_field -> Ocaml.Ast.Parsetree.class_field
          val copy_class_type :
            Js.Ast.Parsetree.class_type -> Ocaml.Ast.Parsetree.class_type
          val copy_class_signature :
            Js.Ast.Parsetree.class_signature ->
            Ocaml.Ast.Parsetree.class_signature
          val copy_class_type_field :
            Js.Ast.Parsetree.class_type_field ->
            Ocaml.Ast.Parsetree.class_type_field
          val copy_module_expr :
            Js.Ast.Parsetree.module_expr -> Ocaml.Ast.Parsetree.module_expr
          val copy_module_type :
            Js.Ast.Parsetree.module_type -> Ocaml.Ast.Parsetree.module_type
          val copy_signature_item :
            Js.Ast.Parsetree.signature_item ->
            Ocaml.Ast.Parsetree.signature_item
          val copy_structure_item :
            Js.Ast.Parsetree.structure_item ->
            Ocaml.Ast.Parsetree.structure_item
        end
      val of_ocaml : ('js, 'ocaml) Type.t -> 'ocaml -> 'js
      val to_ocaml : ('js, 'ocaml) Type.t -> 'js -> 'ocaml
      val of_ocaml_mapper :
        ('a, 'b) Type.t -> ('c -> 'b -> 'b) -> 'c -> 'a -> 'a
      val to_ocaml_mapper :
        ('a, 'b) Type.t -> ('c -> 'a -> 'a) -> 'c -> 'b -> 'b
    end
module Selected_ast :
  sig
    module Ast = Ppxlib_ast__Versions.OCaml_500.Ast
    val version : int
    val string_version : string
    type types =
        < case : Ast.Parsetree.case; class_expr : Ast.Parsetree.class_expr;
          class_field : Ast.Parsetree.class_field;
          class_signature : Ast.Parsetree.class_signature;
          class_type : Ast.Parsetree.class_type;
          class_type_field : Ast.Parsetree.class_type_field;
          core_type : Ast.Parsetree.core_type;
          expression : Ast.Parsetree.expression;
          extension_constructor : Ast.Parsetree.extension_constructor;
          module_expr : Ast.Parsetree.module_expr;
          module_type : Ast.Parsetree.module_type;
          pattern : Ast.Parsetree.pattern;
          signature : Ast.Parsetree.signature;
          signature_item : Ast.Parsetree.signature_item;
          structure : Ast.Parsetree.structure;
          structure_item : Ast.Parsetree.structure_item;
          toplevel_phrase : Ast.Parsetree.toplevel_phrase;
          type_declaration : Ast.Parsetree.type_declaration;
          type_extension : Ast.Parsetree.type_extension >
        Ppxlib_ast__Versions._types
    type _ Ppxlib_ast__Versions.witnesses +=
        Version : types Ppxlib_ast__Versions.witnesses
    val migration_info : types Ppxlib_ast__Versions.migration_info
    module Type :
      sig
        type ('js, 'ocaml) t =
          ('js, 'ocaml) Select_ast(Ocaml).Type.t =
            Structure :
              (Js.Ast.Parsetree.structure, Ocaml.Ast.Parsetree.structure) t
          | Signature :
              (Js.Ast.Parsetree.signature, Ocaml.Ast.Parsetree.signature) t
          | Toplevel_phrase :
              (Js.Ast.Parsetree.toplevel_phrase,
               Ocaml.Ast.Parsetree.toplevel_phrase)
              t
          | Core_type :
              (Js.Ast.Parsetree.core_type, Ocaml.Ast.Parsetree.core_type) t
          | Expression :
              (Js.Ast.Parsetree.expression, Ocaml.Ast.Parsetree.expression) t
          | Pattern :
              (Js.Ast.Parsetree.pattern, Ocaml.Ast.Parsetree.pattern) t
          | Case : (Js.Ast.Parsetree.case, Ocaml.Ast.Parsetree.case) t
          | Type_declaration :
              (Js.Ast.Parsetree.type_declaration,
               Ocaml.Ast.Parsetree.type_declaration)
              t
          | Type_extension :
              (Js.Ast.Parsetree.type_extension,
               Ocaml.Ast.Parsetree.type_extension)
              t
          | Extension_constructor :
              (Js.Ast.Parsetree.extension_constructor,
               Ocaml.Ast.Parsetree.extension_constructor)
              t
          | Class_expr :
              (Js.Ast.Parsetree.class_expr, Ocaml.Ast.Parsetree.class_expr) t
          | Class_field :
              (Js.Ast.Parsetree.class_field, Ocaml.Ast.Parsetree.class_field)
              t
          | Class_type :
              (Js.Ast.Parsetree.class_type, Ocaml.Ast.Parsetree.class_type) t
          | Class_signature :
              (Js.Ast.Parsetree.class_signature,
               Ocaml.Ast.Parsetree.class_signature)
              t
          | Class_type_field :
              (Js.Ast.Parsetree.class_type_field,
               Ocaml.Ast.Parsetree.class_type_field)
              t
          | Module_expr :
              (Js.Ast.Parsetree.module_expr, Ocaml.Ast.Parsetree.module_expr)
              t
          | Module_type :
              (Js.Ast.Parsetree.module_type, Ocaml.Ast.Parsetree.module_type)
              t
          | Signature_item :
              (Js.Ast.Parsetree.signature_item,
               Ocaml.Ast.Parsetree.signature_item)
              t
          | Structure_item :
              (Js.Ast.Parsetree.structure_item,
               Ocaml.Ast.Parsetree.structure_item)
              t
          | List : ('a, 'b) t -> ('a list, 'b list) t
          | Pair : ('a, 'b) t * ('c, 'd) t -> ('a * 'c, 'b * 'd) t
      end
    module Of_ocaml :
      sig
        val copy_structure :
          Ocaml.Ast.Parsetree.structure -> Js.Ast.Parsetree.structure
        val copy_signature :
          Ocaml.Ast.Parsetree.signature -> Js.Ast.Parsetree.signature
        val copy_toplevel_phrase :
          Ocaml.Ast.Parsetree.toplevel_phrase ->
          Js.Ast.Parsetree.toplevel_phrase
        val copy_core_type :
          Ocaml.Ast.Parsetree.core_type -> Js.Ast.Parsetree.core_type
        val copy_expression :
          Ocaml.Ast.Parsetree.expression -> Js.Ast.Parsetree.expression
        val copy_pattern :
          Ocaml.Ast.Parsetree.pattern -> Js.Ast.Parsetree.pattern
        val copy_case : Ocaml.Ast.Parsetree.case -> Js.Ast.Parsetree.case
        val copy_type_declaration :
          Ocaml.Ast.Parsetree.type_declaration ->
          Js.Ast.Parsetree.type_declaration
        val copy_type_extension :
          Ocaml.Ast.Parsetree.type_extension ->
          Js.Ast.Parsetree.type_extension
        val copy_extension_constructor :
          Ocaml.Ast.Parsetree.extension_constructor ->
          Js.Ast.Parsetree.extension_constructor
        val copy_class_expr :
          Ocaml.Ast.Parsetree.class_expr -> Js.Ast.Parsetree.class_expr
        val copy_class_field :
          Ocaml.Ast.Parsetree.class_field -> Js.Ast.Parsetree.class_field
        val copy_class_type :
          Ocaml.Ast.Parsetree.class_type -> Js.Ast.Parsetree.class_type
        val copy_class_signature :
          Ocaml.Ast.Parsetree.class_signature ->
          Js.Ast.Parsetree.class_signature
        val copy_class_type_field :
          Ocaml.Ast.Parsetree.class_type_field ->
          Js.Ast.Parsetree.class_type_field
        val copy_module_expr :
          Ocaml.Ast.Parsetree.module_expr -> Js.Ast.Parsetree.module_expr
        val copy_module_type :
          Ocaml.Ast.Parsetree.module_type -> Js.Ast.Parsetree.module_type
        val copy_signature_item :
          Ocaml.Ast.Parsetree.signature_item ->
          Js.Ast.Parsetree.signature_item
        val copy_structure_item :
          Ocaml.Ast.Parsetree.structure_item ->
          Js.Ast.Parsetree.structure_item
      end
    module To_ocaml :
      sig
        val copy_structure :
          Js.Ast.Parsetree.structure -> Ocaml.Ast.Parsetree.structure
        val copy_signature :
          Js.Ast.Parsetree.signature -> Ocaml.Ast.Parsetree.signature
        val copy_toplevel_phrase :
          Js.Ast.Parsetree.toplevel_phrase ->
          Ocaml.Ast.Parsetree.toplevel_phrase
        val copy_core_type :
          Js.Ast.Parsetree.core_type -> Ocaml.Ast.Parsetree.core_type
        val copy_expression :
          Js.Ast.Parsetree.expression -> Ocaml.Ast.Parsetree.expression
        val copy_pattern :
          Js.Ast.Parsetree.pattern -> Ocaml.Ast.Parsetree.pattern
        val copy_case : Js.Ast.Parsetree.case -> Ocaml.Ast.Parsetree.case
        val copy_type_declaration :
          Js.Ast.Parsetree.type_declaration ->
          Ocaml.Ast.Parsetree.type_declaration
        val copy_type_extension :
          Js.Ast.Parsetree.type_extension ->
          Ocaml.Ast.Parsetree.type_extension
        val copy_extension_constructor :
          Js.Ast.Parsetree.extension_constructor ->
          Ocaml.Ast.Parsetree.extension_constructor
        val copy_class_expr :
          Js.Ast.Parsetree.class_expr -> Ocaml.Ast.Parsetree.class_expr
        val copy_class_field :
          Js.Ast.Parsetree.class_field -> Ocaml.Ast.Parsetree.class_field
        val copy_class_type :
          Js.Ast.Parsetree.class_type -> Ocaml.Ast.Parsetree.class_type
        val copy_class_signature :
          Js.Ast.Parsetree.class_signature ->
          Ocaml.Ast.Parsetree.class_signature
        val copy_class_type_field :
          Js.Ast.Parsetree.class_type_field ->
          Ocaml.Ast.Parsetree.class_type_field
        val copy_module_expr :
          Js.Ast.Parsetree.module_expr -> Ocaml.Ast.Parsetree.module_expr
        val copy_module_type :
          Js.Ast.Parsetree.module_type -> Ocaml.Ast.Parsetree.module_type
        val copy_signature_item :
          Js.Ast.Parsetree.signature_item ->
          Ocaml.Ast.Parsetree.signature_item
        val copy_structure_item :
          Js.Ast.Parsetree.structure_item ->
          Ocaml.Ast.Parsetree.structure_item
      end
    val of_ocaml : ('js, 'ocaml) Type.t -> 'ocaml -> 'js
    val to_ocaml : ('js, 'ocaml) Type.t -> 'js -> 'ocaml
    val of_ocaml_mapper :
      ('a, 'b) Type.t -> ('c -> 'b -> 'b) -> 'c -> 'a -> 'a
    val to_ocaml_mapper :
      ('a, 'b) Type.t -> ('c -> 'a -> 'a) -> 'c -> 'b -> 'b
  end
module Ast_helper = Ppxlib_ast__.Ast_helper_lite
module Parsetree = Selected_ast.Ast.Parsetree
module Asttypes = Selected_ast.Ast.Asttypes
module Location = Astlib.Location
module Longident = Astlib.Longident
module Parse :
  sig
    module Of_ocaml :
      sig
        val copy_structure :
          Ocaml.Ast.Parsetree.structure -> Js.Ast.Parsetree.structure
        val copy_signature :
          Ocaml.Ast.Parsetree.signature -> Js.Ast.Parsetree.signature
        val copy_toplevel_phrase :
          Ocaml.Ast.Parsetree.toplevel_phrase ->
          Js.Ast.Parsetree.toplevel_phrase
        val copy_core_type :
          Ocaml.Ast.Parsetree.core_type -> Js.Ast.Parsetree.core_type
        val copy_expression :
          Ocaml.Ast.Parsetree.expression -> Js.Ast.Parsetree.expression
        val copy_pattern :
          Ocaml.Ast.Parsetree.pattern -> Js.Ast.Parsetree.pattern
        val copy_case : Ocaml.Ast.Parsetree.case -> Js.Ast.Parsetree.case
        val copy_type_declaration :
          Ocaml.Ast.Parsetree.type_declaration ->
          Js.Ast.Parsetree.type_declaration
        val copy_type_extension :
          Ocaml.Ast.Parsetree.type_extension ->
          Js.Ast.Parsetree.type_extension
        val copy_extension_constructor :
          Ocaml.Ast.Parsetree.extension_constructor ->
          Js.Ast.Parsetree.extension_constructor
        val copy_class_expr :
          Ocaml.Ast.Parsetree.class_expr -> Js.Ast.Parsetree.class_expr
        val copy_class_field :
          Ocaml.Ast.Parsetree.class_field -> Js.Ast.Parsetree.class_field
        val copy_class_type :
          Ocaml.Ast.Parsetree.class_type -> Js.Ast.Parsetree.class_type
        val copy_class_signature :
          Ocaml.Ast.Parsetree.class_signature ->
          Js.Ast.Parsetree.class_signature
        val copy_class_type_field :
          Ocaml.Ast.Parsetree.class_type_field ->
          Js.Ast.Parsetree.class_type_field
        val copy_module_expr :
          Ocaml.Ast.Parsetree.module_expr -> Js.Ast.Parsetree.module_expr
        val copy_module_type :
          Ocaml.Ast.Parsetree.module_type -> Js.Ast.Parsetree.module_type
        val copy_signature_item :
          Ocaml.Ast.Parsetree.signature_item ->
          Js.Ast.Parsetree.signature_item
        val copy_structure_item :
          Ocaml.Ast.Parsetree.structure_item ->
          Js.Ast.Parsetree.structure_item
      end
    val implementation : Lexing.lexbuf -> Js.Ast.Parsetree.structure
    val interface : Lexing.lexbuf -> Js.Ast.Parsetree.signature
    val toplevel_phrase : Lexing.lexbuf -> Js.Ast.Parsetree.toplevel_phrase
    val use_file : Lexing.lexbuf -> Js.Ast.Parsetree.toplevel_phrase list
    val core_type : Lexing.lexbuf -> Js.Ast.Parsetree.core_type
    val expression : Lexing.lexbuf -> Js.Ast.Parsetree.expression
    val pattern : Lexing.lexbuf -> Js.Ast.Parsetree.pattern("DEBUG:rule", [Tag3 (("Js", 1637), 1, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Versions"), "OCaml_500")), 0, (("ast/import.ml", 9, 229, 229), ("ast/import.ml", 9, 229, 259), 0), Tag1 ("Ppxlib_ast__Import", 0)), 0, 0); Tag3 (("Ocaml", 1638), 1, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Versions"), "OCaml_current")), 0, (("ast/import.ml", 10, 260, 260), ("ast/import.ml", 10, 260, 297), 0), Tag1 ("Ppxlib_ast__Import", 1)), 0, 0); Tag3 (("Select_ast", 1639), 0, (Tag2 (((("Ocaml", 1647)), (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Versions"), "OCaml_version"))), Tag1 ([Tag3 (("Ast", 1648), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__Versions")), "OCaml_500"), "Ast")), 0, (("astlib/astlib.ml", 38, 1688, 1688), ("astlib/astlib.ml", 38, 1688, 1712), 0), Tag1 ("Astlib", 13)), 0, 0); (("version", 1649), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -98), 0, (("ast/versions.mli", 101, 3377, 3379), ("ast/versions.mli", 101, 3377, 3396), 0), 0, Tag1 ("Ppxlib_ast__Versions", 28)), 0); (("string_version", 1650), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -97), 0, (("ast/versions.mli", 104, 3447, 3449), ("ast/versions.mli", 104, 3447, 3476), 0), 0, Tag1 ("Ppxlib_ast__Versions", 29)), 0); Tag1 (("types", 1651), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Ppxlib_ast__Versions")), "_types"), [(Tag4 ((Tag5 ("case", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((("Ast", 1648)), "Parsetree"), "case"), 0, (0)), 100000000, 0, -78), 0), 100000000, 0, -77), (Tag5 ("class_expr", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((("Ast", 1648)), "Parsetree"), "class_expr"), 0, (0)), 100000000, 0, -94), 0), 100000000, 0, -93), (Tag5 ("class_field", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((("Ast", 1648)), "Parsetree"), "class_field"), 0, (0)), 100000000, 0, -96), 0), 100000000, 0, -95), (Tag5 ("class_signature", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((("Ast", 1648)), "Parsetree"), "class_signature"), 0, (0)), 100000000, 0, -88), 0), 100000000, 0, -87), (Tag5 ("class_type", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((("Ast", 1648)), "Parsetree"), "class_type"), 0, (0)), 100000000, 0, -60), 0), 100000000, 0, -59), (Tag5 ("class_type_field", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((("Ast", 1648)), "Parsetree"), "class_type_field"), 0, (0)), 100000000, 0, -74), 0), 100000000, 0, -73), (Tag5 ("core_type", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((("Ast", 1648)), "Parsetree"), "core_type"), 0, (0)), 100000000, 0, -64), 0), 100000000, 0, -63), (Tag5 ("expression", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((("Ast", 1648)), "Parsetree"), "expression"), 0, (0)), 100000000, 0, -86), 0), 100000000, 0, -85), (Tag5 ("extension_constructor", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((("Ast", 1648)), "Parsetree"), "extension_constructor"), 0, (0)), 100000000, 0, -72), 0), 100000000, 0, -71), (Tag5 ("module_expr", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((("Ast", 1648)), "Parsetree"), "module_expr"), 0, (0)), 100000000, 0, -70), 0), 100000000, 0, -69), (Tag5 ("module_type", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((("Ast", 1648)), "Parsetree"), "module_type"), 0, (0)), 100000000, 0, -68), 0), 100000000, 0, -67), (Tag5 ("pattern", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((("Ast", 1648)), "Parsetree"), "pattern"), 0, (0)), 100000000, 0, -66), 0), 100000000, 0, -65), (Tag5 ("signature", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((("Ast", 1648)), "Parsetree"), "signature"), 0, (0)), 100000000, 0, -82), 0), 100000000, 0, -81), (Tag5 ("signature_item", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((("Ast", 1648)), "Parsetree"), "signature_item"), 0, (0)), 100000000, 0, -90), 0), 100000000, 0, -89), (Tag5 ("structure", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((("Ast", 1648)), "Parsetree"), "structure"), 0, (0)), 100000000, 0, -84), 0), 100000000, 0, -83), (Tag5 ("structure_item", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((("Ast", 1648)), "Parsetree"), "structure_item"), 0, (0)), 100000000, 0, -62), 0), 100000000, 0, -61), (Tag5 ("toplevel_phrase", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((("Ast", 1648)), "Parsetree"), "toplevel_phrase"), 0, (0)), 100000000, 0, -76), 0), 100000000, 0, -75), (Tag5 ("type_declaration", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((("Ast", 1648)), "Parsetree"), "type_declaration"), 0, (0)), 100000000, 0, -92), 0), 100000000, 0, -91), (Tag5 ("type_extension", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((("Ast", 1648)), "Parsetree"), "type_extension"), 0, (0)), 100000000, 0, -80), 0), 100000000, 0, -79), (0, 100000000, 0, -58)), 100000000, 0, 40)), 100000000, 0, 41)), 100000000, 0, 42)), 100000000, 0, 43)), 100000000, 0, 44)), 100000000, 0, 45)), 100000000, 0, 46)), 100000000, 0, 47)), 100000000, 0, 48)), 100000000, 0, 49)), 100000000, 0, 50)), 100000000, 0, 51)), 100000000, 0, 52)), 100000000, 0, 53)), 100000000, 0, 54)), 100000000, 0, 55)), 100000000, 0, 56)), 100000000, 0, 57)), 100000000, 0, -39), (0)), 100000000, 0, -38)], (0)), 100000000, 0, -37)), 0, 0, 0, 0, (("ast/versions.mli", 107, 3552, 3554), ("ast/versions.mli", 129, 4714, 4724), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Versions", 30)), 1, 0); Tag2 (("Version", 1652), (Tag1 ((Tag2 ("Ppxlib_ast__Versions")), "witnesses"), [((("_")), 100000000, 0, -36)], (0), ((Tag3 (Tag1 ((Tag2 ("Ppxlib_ast__Versions")), "witnesses"), [(Tag3 ((("types", 1651)), 0, (0)), 100000000, 0, -35)], (0)), 100000000, 0, -34)), 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Ppxlib_ast__Versions", 31)), 0, 0); (("migration_info", 1653), ((Tag3 (Tag1 ((Tag2 ("Ppxlib_ast__Versions")), "migration_info"), [(Tag3 ((("types", 1651)), 0, (0)), 100000000, 0, -33)], (0)), 100000000, 0, -32), 0, (("ast/versions.mli", 136, 4933, 4935), ("ast/versions.mli", 136, 4933, 4976), 0), 0, Tag1 ("Ppxlib_ast__Versions", 32)), 0); Tag3 (("Type", 1654), 0, (Tag1 ([Tag1 (("t", 1661), ([((("js")), 100000000, 0, -171); ((("ocaml")), 100000000, 0, -172)], 2, Tag1 ([(("Structure", 375), (0), ((Tag3 ((("t", 1661)), [(Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "structure"), 0, (0)), 100000000, 0, -100); (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "structure"), 0, (0)), 100000000, 0, -101)], (0)), 100000000, 0, -99)), (("ast/import.ml", 26, 708, 714), ("ast/import.ml", 29, 814, 827), 0), 0, Tag1 ("Ppxlib_ast__Import", 4)); (("Signature", 460), (0), ((Tag3 ((("t", 1661)), [(Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "signature"), 0, (0)), 100000000, 0, -103); (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "signature"), 0, (0)), 100000000, 0, -104)], (0)), 100000000, 0, -102)), (("ast/import.ml", 30, 828, 834), ("ast/import.ml", 33, 934, 947), 0), 0, Tag1 ("Ppxlib_ast__Import", 5)); (("Toplevel_phrase", 461), (0), ((Tag3 ((("t", 1661)), [(Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "toplevel_phrase"), 0, (0)), 100000000, 0, -106); (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "toplevel_phrase"), 0, (0)), 100000000, 0, -107)], (0)), 100000000, 0, -105)), (("ast/import.ml", 34, 948, 954), ("ast/import.ml", 37, 1072, 1085), 0), 0, Tag1 ("Ppxlib_ast__Import", 6)); (("Core_type", 462), (0), ((Tag3 ((("t", 1661)), [(Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "core_type"), 0, (0)), 100000000, 0, -109); (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "core_type"), 0, (0)), 100000000, 0, -110)], (0)), 100000000, 0, -108)), (("ast/import.ml", 38, 1086, 1092), ("ast/import.ml", 41, 1192, 1205), 0), 0, Tag1 ("Ppxlib_ast__Import", 7)); (("Expression", 463), (0), ((Tag3 ((("t", 1661)), [(Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "expression"), 0, (0)), 100000000, 0, -112); (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "expression"), 0, (0)), 100000000, 0, -113)], (0)), 100000000, 0, -111)), (("ast/import.ml", 42, 1206, 1212), ("ast/import.ml", 45, 1315, 1328), 0), 0, Tag1 ("Ppxlib_ast__Import", 8)); (("Pattern", 464), (0), ((Tag3 ((("t", 1661)), [(Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "pattern"), 0, (0)), 100000000, 0, -115); (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "pattern"), 0, (0)), 100000000, 0, -116)], (0)), 100000000, 0, -114)), (("ast/import.ml", 46, 1329, 1335), ("ast/import.ml", 49, 1429, 1442), 0), 0, Tag1 ("Ppxlib_ast__Import", 9)); (("Case", 465), (0), ((Tag3 ((("t", 1661)), [(Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "case"), 0, (0)), 100000000, 0, -118); (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "case"), 0, (0)), 100000000, 0, -119)], (0)), 100000000, 0, -117)), (("ast/import.ml", 50, 1443, 1449), ("ast/import.ml", 53, 1534, 1547), 0), 0, Tag1 ("Ppxlib_ast__Import", 10)); (("Type_declaration", 466), (0), ((Tag3 ((("t", 1661)), [(Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "type_declaration"), 0, (0)), 100000000, 0, -121); (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "type_declaration"), 0, (0)), 100000000, 0, -122)], (0)), 100000000, 0, -120)), (("ast/import.ml", 54, 1548, 1554), ("ast/import.ml", 57, 1675, 1688), 0), 0, Tag1 ("Ppxlib_ast__Import", 11)); (("Type_extension", 467), (0), ((Tag3 ((("t", 1661)), [(Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "type_extension"), 0, (0)), 100000000, 0, -124); (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "type_extension"), 0, (0)), 100000000, 0, -125)], (0)), 100000000, 0, -123)), (("ast/import.ml", 58, 1689, 1695), ("ast/import.ml", 61, 1810, 1823), 0), 0, Tag1 ("Ppxlib_ast__Import", 12)); (("Extension_constructor", 468), (0), ((Tag3 ((("t", 1661)), [(Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "extension_constructor"), 0, (0)), 100000000, 0, -127); (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "extension_constructor"), 0, (0)), 100000000, 0, -128)], (0)), 100000000, 0, -126)), (("ast/import.ml", 62, 1824, 1830), ("ast/import.ml", 65, 1966, 1979), 0), 0, Tag1 ("Ppxlib_ast__Import", 13)); (("Class_expr", 469), (0), ((Tag3 ((("t", 1661)), [(Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "class_expr"), 0, (0)), 100000000, 0, -130); (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "class_expr"), 0, (0)), 100000000, 0, -131)], (0)), 100000000, 0, -129)), (("ast/import.ml", 66, 1980, 1986), ("ast/import.ml", 69, 2089, 2102), 0), 0, Tag1 ("Ppxlib_ast__Import", 14)); (("Class_field", 470), (0), ((Tag3 ((("t", 1661)), [(Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "class_field"), 0, (0)), 100000000, 0, -133); (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "class_field"), 0, (0)), 100000000, 0, -134)], (0)), 100000000, 0, -132)), (("ast/import.ml", 70, 2103, 2109), ("ast/import.ml", 73, 2215, 2228), 0), 0, Tag1 ("Ppxlib_ast__Import", 15)); (("Class_type", 471), (0), ((Tag3 ((("t", 1661)), [(Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "class_type"), 0, (0)), 100000000, 0, -136); (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "class_type"), 0, (0)), 100000000, 0, -137)], (0)), 100000000, 0, -135)), (("ast/import.ml", 74, 2229, 2235), ("ast/import.ml", 77, 2338, 2351), 0), 0, Tag1 ("Ppxlib_ast__Import", 16)); (("Class_signature", 472), (0), ((Tag3 ((("t", 1661)), [(Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "class_signature"), 0, (0)), 100000000, 0, -139); (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "class_signature"), 0, (0)), 100000000, 0, -140)], (0)), 100000000, 0, -138)), (("ast/import.ml", 78, 2352, 2358), ("ast/import.ml", 81, 2476, 2489), 0), 0, Tag1 ("Ppxlib_ast__Import", 17)); (("Class_type_field", 473), (0), ((Tag3 ((("t", 1661)), [(Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "class_type_field"), 0, (0)), 100000000, 0, -142); (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "class_type_field"), 0, (0)), 100000000, 0, -143)], (0)), 100000000, 0, -141)), (("ast/import.ml", 82, 2490, 2496), ("ast/import.ml", 85, 2617, 2630), 0), 0, Tag1 ("Ppxlib_ast__Import", 18)); (("Module_expr", 474), (0), ((Tag3 ((("t", 1661)), [(Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "module_expr"), 0, (0)), 100000000, 0, -145); (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "module_expr"), 0, (0)), 100000000, 0, -146)], (0)), 100000000, 0, -144)), (("ast/import.ml", 86, 2631, 2637), ("ast/import.ml", 89, 2743, 2756), 0), 0, Tag1 ("Ppxlib_ast__Import", 19)); (("Module_type", 475), (0), ((Tag3 ((("t", 1661)), [(Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "module_type"), 0, (0)), 100000000, 0, -148); (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "module_type"), 0, (0)), 100000000, 0, -149)], (0)), 100000000, 0, -147)), (("ast/import.ml", 90, 2757, 2763), ("ast/import.ml", 93, 2869, 2882), 0), 0, Tag1 ("Ppxlib_ast__Import", 20)); (("Signature_item", 476), (0), ((Tag3 ((("t", 1661)), [(Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "signature_item"), 0, (0)), 100000000, 0, -151); (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "signature_item"), 0, (0)), 100000000, 0, -152)], (0)), 100000000, 0, -150)), (("ast/import.ml", 94, 2883, 2889), ("ast/import.ml", 97, 3004, 3017), 0), 0, Tag1 ("Ppxlib_ast__Import", 21)); (("Structure_item", 477), (0), ((Tag3 ((("t", 1661)), [(Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "structure_item"), 0, (0)), 100000000, 0, -154); (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "structure_item"), 0, (0)), 100000000, 0, -155)], (0)), 100000000, 0, -153)), (("ast/import.ml", 98, 3018, 3024), ("ast/import.ml", 101, 3139, 3152), 0), 0, Tag1 ("Ppxlib_ast__Import", 22)); (("List", 478), ([(Tag3 ((("t", 1661)), [((("a")), 100000000, 0, -158); ((("b")), 100000000, 0, -160)], (0)), 100000000, 0, -161)]), ((Tag3 ((("t", 1661)), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -158)], (0)), 100000000, 0, -157); (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -160)], (0)), 100000000, 0, -159)], (0)), 100000000, 0, -156)), (("ast/import.ml", 103, 3159, 3165), ("ast/import.ml", 103, 3159, 3208), 0), 0, Tag1 ("Ppxlib_ast__Import", 23)); (("Pair", 479), ([(Tag3 ((("t", 1661)), [((("a")), 100000000, 0, -164); ((("b")), 100000000, 0, -167)], (0)), 100000000, 0, -169); (Tag3 ((("t", 1661)), [((("c")), 100000000, 0, -165); ((("d")), 100000000, 0, -168)], (0)), 100000000, 0, -170)]), ((Tag3 ((("t", 1661)), [(Tag2 ([((("a")), 100000000, 0, -164); ((("c")), 100000000, 0, -165)]), 100000000, 0, -163); (Tag2 ([((("b")), 100000000, 0, -167); ((("d")), 100000000, 0, -168)]), 100000000, 0, -166)], (0)), 100000000, 0, -162)), (("ast/import.ml", 104, 3209, 3215), ("ast/import.ml", 104, 3209, 3271), 0), 0, Tag1 ("Ppxlib_ast__Import", 24))], 0), 1, 0, [63; 63], [0; 0], 0, 0, (("ast/import.ml", 16, 396, 400), ("ast/import.ml", 104, 3209, 3271), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Import", 3)), 1, 0)]), 0, (("ast/import.ml", 15, 373, 375), ("ast/import.ml", 105, 3272, 3277), 0), Tag1 ("Ppxlib_ast__Import", 25)), 0, 0); Tag3 (("Of_ocaml", 1655), 0, (Tag1 ([(("copy_structure", 1662), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "structure"), 0, (0)), 100000000, 0, -229), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "structure"), 0, (0)), 100000000, 0, -228), 0), 100000000, 0, -227), 0, (("ast/versions.mli", 175, 6593, 6595), ("ast/versions.mli", 175, 6593, 6694), 0), 0, Tag1 ("Ppxlib_ast__Versions", 55)), 0); (("copy_signature", 1663), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "signature"), 0, (0)), 100000000, 0, -226), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "signature"), 0, (0)), 100000000, 0, -225), 0), 100000000, 0, -224), 0, (("ast/versions.mli", 176, 6695, 6697), ("ast/versions.mli", 176, 6695, 6796), 0), 0, Tag1 ("Ppxlib_ast__Versions", 56)), 0); (("copy_toplevel_phrase", 1664), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "toplevel_phrase"), 0, (0)), 100000000, 0, -223), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "toplevel_phrase"), 0, (0)), 100000000, 0, -222), 0), 100000000, 0, -221), 0, (("ast/versions.mli", 177, 6797, 6799), ("ast/versions.mli", 177, 6797, 6904), 0), 0, Tag1 ("Ppxlib_ast__Versions", 57)), 0); (("copy_core_type", 1665), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "core_type"), 0, (0)), 100000000, 0, -220), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "core_type"), 0, (0)), 100000000, 0, -219), 0), 100000000, 0, -218), 0, (("ast/versions.mli", 178, 6905, 6907), ("ast/versions.mli", 178, 6905, 7006), 0), 0, Tag1 ("Ppxlib_ast__Versions", 58)), 0); (("copy_expression", 1666), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "expression"), 0, (0)), 100000000, 0, -217), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "expression"), 0, (0)), 100000000, 0, -216), 0), 100000000, 0, -215), 0, (("ast/versions.mli", 179, 7007, 7009), ("ast/versions.mli", 179, 7007, 7109), 0), 0, Tag1 ("Ppxlib_ast__Versions", 59)), 0); (("copy_pattern", 1667), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "pattern"), 0, (0)), 100000000, 0, -214), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "pattern"), 0, (0)), 100000000, 0, -213), 0), 100000000, 0, -212), 0, (("ast/versions.mli", 180, 7110, 7112), ("ast/versions.mli", 180, 7110, 7209), 0), 0, Tag1 ("Ppxlib_ast__Versions", 60)), 0); (("copy_case", 1668), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "case"), 0, (0)), 100000000, 0, -211), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "case"), 0, (0)), 100000000, 0, -210), 0), 100000000, 0, -209), 0, (("ast/versions.mli", 181, 7210, 7212), ("ast/versions.mli", 181, 7210, 7306), 0), 0, Tag1 ("Ppxlib_ast__Versions", 61)), 0); (("copy_type_declaration", 1669), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "type_declaration"), 0, (0)), 100000000, 0, -208), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "type_declaration"), 0, (0)), 100000000, 0, -207), 0), 100000000, 0, -206), 0, (("ast/versions.mli", 182, 7307, 7309), ("ast/versions.mli", 182, 7307, 7415), 0), 0, Tag1 ("Ppxlib_ast__Versions", 62)), 0); (("copy_type_extension", 1670), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "type_extension"), 0, (0)), 100000000, 0, -205), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "type_extension"), 0, (0)), 100000000, 0, -204), 0), 100000000, 0, -203), 0, (("ast/versions.mli", 183, 7416, 7418), ("ast/versions.mli", 183, 7416, 7522), 0), 0, Tag1 ("Ppxlib_ast__Versions", 63)), 0); (("copy_extension_constructor", 1671), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "extension_constructor"), 0, (0)), 100000000, 0, -202), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "extension_constructor"), 0, (0)), 100000000, 0, -201), 0), 100000000, 0, -200), 0, (("ast/versions.mli", 184, 7523, 7525), ("ast/versions.mli", 184, 7523, 7636), 0), 0, Tag1 ("Ppxlib_ast__Versions", 64)), 0); (("copy_class_expr", 1672), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "class_expr"), 0, (0)), 100000000, 0, -199), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "class_expr"), 0, (0)), 100000000, 0, -198), 0), 100000000, 0, -197), 0, (("ast/versions.mli", 185, 7637, 7639), ("ast/versions.mli", 185, 7637, 7739), 0), 0, Tag1 ("Ppxlib_ast__Versions", 65)), 0); (("copy_class_field", 1673), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "class_field"), 0, (0)), 100000000, 0, -196), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "class_field"), 0, (0)), 100000000, 0, -195), 0), 100000000, 0, -194), 0, (("ast/versions.mli", 186, 7740, 7742), ("ast/versions.mli", 186, 7740, 7843), 0), 0, Tag1 ("Ppxlib_ast__Versions", 66)), 0); (("copy_class_type", 1674), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "class_type"), 0, (0)), 100000000, 0, -193), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "class_type"), 0, (0)), 100000000, 0, -192), 0), 100000000, 0, -191), 0, (("ast/versions.mli", 187, 7844, 7846), ("ast/versions.mli", 187, 7844, 7946), 0), 0, Tag1 ("Ppxlib_ast__Versions", 67)), 0); (("copy_class_signature", 1675), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "class_signature"), 0, (0)), 100000000, 0, -190), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "class_signature"), 0, (0)), 100000000, 0, -189), 0), 100000000, 0, -188), 0, (("ast/versions.mli", 188, 7947, 7949), ("ast/versions.mli", 188, 7947, 8054), 0), 0, Tag1 ("Ppxlib_ast__Versions", 68)), 0); (("copy_class_type_field", 1676), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "class_type_field"), 0, (0)), 100000000, 0, -187), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "class_type_field"), 0, (0)), 100000000, 0, -186), 0), 100000000, 0, -185), 0, (("ast/versions.mli", 189, 8055, 8057), ("ast/versions.mli", 189, 8055, 8163), 0), 0, Tag1 ("Ppxlib_ast__Versions", 69)), 0); (("copy_module_expr", 1677), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "module_expr"), 0, (0)), 100000000, 0, -184), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "module_expr"), 0, (0)), 100000000, 0, -183), 0), 100000000, 0, -182), 0, (("ast/versions.mli", 190, 8164, 8166), ("ast/versions.mli", 190, 8164, 8267), 0), 0, Tag1 ("Ppxlib_ast__Versions", 70)), 0); (("copy_module_type", 1678), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "module_type"), 0, (0)), 100000000, 0, -181), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "module_type"), 0, (0)), 100000000, 0, -180), 0), 100000000, 0, -179), 0, (("ast/versions.mli", 191, 8268, 8270), ("ast/versions.mli", 191, 8268, 8371), 0), 0, Tag1 ("Ppxlib_ast__Versions", 71)), 0); (("copy_signature_item", 1679), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "signature_item"), 0, (0)), 100000000, 0, -178), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "signature_item"), 0, (0)), 100000000, 0, -177), 0), 100000000, 0, -176), 0, (("ast/versions.mli", 192, 8372, 8374), ("ast/versions.mli", 192, 8372, 8478), 0), 0, Tag1 ("Ppxlib_ast__Versions", 72)), 0); (("copy_structure_item", 1680), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "structure_item"), 0, (0)), 100000000, 0, -175), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "structure_item"), 0, (0)), 100000000, 0, -174), 0), 100000000, 0, -173), 0, (("ast/versions.mli", 193, 8479, 8481), ("ast/versions.mli", 193, 8479, 8585), 0), 0, Tag1 ("Ppxlib_ast__Versions", 73)), 0)]), 0, (("ast/import.ml", 108, 3291, 3293), ("ast/import.ml", 108, 3291, 3340), 0), Tag1 ("Ppxlib_ast__Import", 26)), 0, 0); Tag3 (("To_ocaml", 1656), 0, (Tag1 ([(("copy_structure", 1681), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "structure"), 0, (0)), 100000000, 0, -286), (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "structure"), 0, (0)), 100000000, 0, -285), 0), 100000000, 0, -284), 0, (("ast/versions.mli", 175, 6593, 6595), ("ast/versions.mli", 175, 6593, 6694), 0), 0, Tag1 ("Ppxlib_ast__Versions", 55)), 0); (("copy_signature", 1682), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "signature"), 0, (0)), 100000000, 0, -283), (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "signature"), 0, (0)), 100000000, 0, -282), 0), 100000000, 0, -281), 0, (("ast/versions.mli", 176, 6695, 6697), ("ast/versions.mli", 176, 6695, 6796), 0), 0, Tag1 ("Ppxlib_ast__Versions", 56)), 0); (("copy_toplevel_phrase", 1683), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "toplevel_phrase"), 0, (0)), 100000000, 0, -280), (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "toplevel_phrase"), 0, (0)), 100000000, 0, -279), 0), 100000000, 0, -278), 0, (("ast/versions.mli", 177, 6797, 6799), ("ast/versions.mli", 177, 6797, 6904), 0), 0, Tag1 ("Ppxlib_ast__Versions", 57)), 0); (("copy_core_type", 1684), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "core_type"), 0, (0)), 100000000, 0, -277), (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "core_type"), 0, (0)), 100000000, 0, -276), 0), 100000000, 0, -275), 0, (("ast/versions.mli", 178, 6905, 6907), ("ast/versions.mli", 178, 6905, 7006), 0), 0, Tag1 ("Ppxlib_ast__Versions", 58)), 0); (("copy_expression", 1685), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "expression"), 0, (0)), 100000000, 0, -274), (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "expression"), 0, (0)), 100000000, 0, -273), 0), 100000000, 0, -272), 0, (("ast/versions.mli", 179, 7007, 7009), ("ast/versions.mli", 179, 7007, 7109), 0), 0, Tag1 ("Ppxlib_ast__Versions", 59)), 0); (("copy_pattern", 1686), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "pattern"), 0, (0)), 100000000, 0, -271), (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "pattern"), 0, (0)), 100000000, 0, -270), 0), 100000000, 0, -269), 0, (("ast/versions.mli", 180, 7110, 7112), ("ast/versions.mli", 180, 7110, 7209), 0), 0, Tag1 ("Ppxlib_ast__Versions", 60)), 0); (("copy_case", 1687), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "case"), 0, (0)), 100000000, 0, -268), (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "case"), 0, (0)), 100000000, 0, -267), 0), 100000000, 0, -266), 0, (("ast/versions.mli", 181, 7210, 7212), ("ast/versions.mli", 181, 7210, 7306), 0), 0, Tag1 ("Ppxlib_ast__Versions", 61)), 0); (("copy_type_declaration", 1688), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "type_declaration"), 0, (0)), 100000000, 0, -265), (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "type_declaration"), 0, (0)), 100000000, 0, -264), 0), 100000000, 0, -263), 0, (("ast/versions.mli", 182, 7307, 7309), ("ast/versions.mli", 182, 7307, 7415), 0), 0, Tag1 ("Ppxlib_ast__Versions", 62)), 0); (("copy_type_extension", 1689), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "type_extension"), 0, (0)), 100000000, 0, -262), (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "type_extension"), 0, (0)), 100000000, 0, -261), 0), 100000000, 0, -260), 0, (("ast/versions.mli", 183, 7416, 7418), ("ast/versions.mli", 183, 7416, 7522), 0), 0, Tag1 ("Ppxlib_ast__Versions", 63)), 0); (("copy_extension_constructor", 1690), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "extension_constructor"), 0, (0)), 100000000, 0, -259), (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "extension_constructor"), 0, (0)), 100000000, 0, -258), 0), 100000000, 0, -257), 0, (("ast/versions.mli", 184, 7523, 7525), ("ast/versions.mli", 184, 7523, 7636), 0), 0, Tag1 ("Ppxlib_ast__Versions", 64)), 0); (("copy_class_expr", 1691), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "class_expr"), 0, (0)), 100000000, 0, -256), (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "class_expr"), 0, (0)), 100000000, 0, -255), 0), 100000000, 0, -254), 0, (("ast/versions.mli", 185, 7637, 7639), ("ast/versions.mli", 185, 7637, 7739), 0), 0, Tag1 ("Ppxlib_ast__Versions", 65)), 0); (("copy_class_field", 1692), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "class_field"), 0, (0)), 100000000, 0, -253), (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "class_field"), 0, (0)), 100000000, 0, -252), 0), 100000000, 0, -251), 0, (("ast/versions.mli", 186, 7740, 7742), ("ast/versions.mli", 186, 7740, 7843), 0), 0, Tag1 ("Ppxlib_ast__Versions", 66)), 0); (("copy_class_type", 1693), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "class_type"), 0, (0)), 100000000, 0, -250), (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "class_type"), 0, (0)), 100000000, 0, -249), 0), 100000000, 0, -248), 0, (("ast/versions.mli", 187, 7844, 7846), ("ast/versions.mli", 187, 7844, 7946), 0), 0, Tag1 ("Ppxlib_ast__Versions", 67)), 0); (("copy_class_signature", 1694), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "class_signature"), 0, (0)), 100000000, 0, -247), (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "class_signature"), 0, (0)), 100000000, 0, -246), 0), 100000000, 0, -245), 0, (("ast/versions.mli", 188, 7947, 7949), ("ast/versions.mli", 188, 7947, 8054), 0), 0, Tag1 ("Ppxlib_ast__Versions", 68)), 0); (("copy_class_type_field", 1695), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "class_type_field"), 0, (0)), 100000000, 0, -244), (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "class_type_field"), 0, (0)), 100000000, 0, -243), 0), 100000000, 0, -242), 0, (("ast/versions.mli", 189, 8055, 8057), ("ast/versions.mli", 189, 8055, 8163), 0), 0, Tag1 ("Ppxlib_ast__Versions", 69)), 0); (("copy_module_expr", 1696), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "module_expr"), 0, (0)), 100000000, 0, -241), (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "module_expr"), 0, (0)), 100000000, 0, -240), 0), 100000000, 0, -239), 0, (("ast/versions.mli", 190, 8164, 8166), ("ast/versions.mli", 190, 8164, 8267), 0), 0, Tag1 ("Ppxlib_ast__Versions", 70)), 0); (("copy_module_type", 1697), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "module_type"), 0, (0)), 100000000, 0, -238), (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "module_type"), 0, (0)), 100000000, 0, -237), 0), 100000000, 0, -236), 0, (("ast/versions.mli", 191, 8268, 8270), ("ast/versions.mli", 191, 8268, 8371), 0), 0, Tag1 ("Ppxlib_ast__Versions", 71)), 0); (("copy_signature_item", 1698), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "signature_item"), 0, (0)), 100000000, 0, -235), (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "signature_item"), 0, (0)), 100000000, 0, -234), 0), 100000000, 0, -233), 0, (("ast/versions.mli", 192, 8372, 8374), ("ast/versions.mli", 192, 8372, 8478), 0), 0, Tag1 ("Ppxlib_ast__Versions", 72)), 0); (("copy_structure_item", 1699), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "structure_item"), 0, (0)), 100000000, 0, -232), (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1647)), "Ast"), "Parsetree"), "structure_item"), 0, (0)), 100000000, 0, -231), 0), 100000000, 0, -230), 0, (("ast/versions.mli", 193, 8479, 8481), ("ast/versions.mli", 193, 8479, 8585), 0), 0, Tag1 ("Ppxlib_ast__Versions", 73)), 0)]), 0, (("ast/import.ml", 109, 3341, 3343), ("ast/import.ml", 109, 3341, 3390), 0), Tag1 ("Ppxlib_ast__Import", 27)), 0, 0); (("of_ocaml", 1657), ((Tag1 (0, (Tag3 (Tag1 ((("Type", 1654)), "t"), [((("js")), 100000000, 0, -29); ((("ocaml")), 100000000, 0, -30)], (0)), 100000000, 0, -31), (Tag1 (0, ((("ocaml")), 100000000, 0, -30), ((("js")), 100000000, 0, -29), 0), 100000000, 0, -28), 0), 100000000, 0, -27), 0, (("ast/import.ml", 111, 3392, 3402), ("ast/import.ml", 111, 3392, 3410), 0), 0, Tag1 ("Ppxlib_ast__Import", 28)), 0); (("to_ocaml", 1658), ((Tag1 (0, (Tag3 (Tag1 ((("Type", 1654)), "t"), [((("js")), 100000000, 0, -25); ((("ocaml")), 100000000, 0, -24)], (0)), 100000000, 0, -26), (Tag1 (0, ((("js")), 100000000, 0, -25), ((("ocaml")), 100000000, 0, -24), 0), 100000000, 0, -23), 0), 100000000, 0, -22), 0, (("ast/import.ml", 147, 4642, 4652), ("ast/import.ml", 147, 4642, 4660), 0), 0, Tag1 ("Ppxlib_ast__Import", 139)), 0); (("of_ocaml_mapper", 1659), ((Tag1 (0, (Tag3 (Tag1 ((("Type", 1654)), "t"), [((0), 100000000, 0, -16); ((0), 100000000, 0, -20)], (0)), 100000000, 0, -21), (Tag1 (0, (Tag1 (0, ((0), 100000000, 0, -17), (Tag1 (0, ((0), 100000000, 0, -20), ((0), 100000000, 0, -20), (1)), 100000000, 0, -19), (1)), 100000000, 0, -18), (Tag1 (0, ((0), 100000000, 0, -17), (Tag1 (0, ((0), 100000000, 0, -16), ((0), 100000000, 0, -16), 0), 100000000, 0, -15), 0), 100000000, 0, -14), 0), 100000000, 0, -13), 0), 100000000, 0, -12), 0, (("ast/import.ml", 183, 5892, 5898), ("ast/import.ml", 183, 5892, 5913), 0), 0, Tag1 ("Ppxlib_ast__Import", 250)), 0); (("to_ocaml_mapper", 1660), ((Tag1 (0, (Tag3 (Tag1 ((("Type", 1654)), "t"), [((0), 100000000, 0, -10); ((0), 100000000, 0, -6)], (0)), 100000000, 0, -11), (Tag1 (0, (Tag1 (0, ((0), 100000000, 0, -7), (Tag1 (0, ((0), 100000000, 0, -10), ((0), 100000000, 0, -10), (1)), 100000000, 0, -9), (1)), 100000000, 0, -8), (Tag1 (0, ((0), 100000000, 0, -7), (Tag1 (0, ((0), 100000000, 0, -6), ((0), 100000000, 0, -6), 0), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("ast/import.ml", 184, 5973, 5979), ("ast/import.ml", 184, 5973, 5994), 0), 0, Tag1 ("Ppxlib_ast__Import", 255)), 0)])), 0, (("ast/import.ml", 12, 299, 299), ("ast/import.ml", 185, 6054, 6057), 0), Tag1 ("Ppxlib_ast__Import", 260)), 0, 0); Tag3 (("Selected_ast", 1640), 0, (Tag1 ([Tag3 (("Ast", 1700), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ppxlib_ast__Versions")), "OCaml_500"), "Ast")), 0, (("astlib/astlib.ml", 38, 1688, 1688), ("astlib/astlib.ml", 38, 1688, 1712), 0), Tag1 ("Astlib", 13)), 0, 0); (("version", 1701), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -383), 0, (("ast/versions.mli", 101, 3377, 3379), ("ast/versions.mli", 101, 3377, 3396), 0), 0, Tag1 ("Ppxlib_ast__Versions", 28)), 0); (("string_version", 1702), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -382), 0, (("ast/versions.mli", 104, 3447, 3449), ("ast/versions.mli", 104, 3447, 3476), 0), 0, Tag1 ("Ppxlib_ast__Versions", 29)), 0); Tag1 (("types", 1703), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Ppxlib_ast__Versions")), "_types"), [(Tag4 ((Tag5 ("case", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((("Ast", 1700)), "Parsetree"), "case"), 0, (0)), 100000000, 0, -363), 0), 100000000, 0, -362), (Tag5 ("class_expr", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((("Ast", 1700)), "Parsetree"), "class_expr"), 0, (0)), 100000000, 0, -379), 0), 100000000, 0, -378), (Tag5 ("class_field", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((("Ast", 1700)), "Parsetree"), "class_field"), 0, (0)), 100000000, 0, -381), 0), 100000000, 0, -380), (Tag5 ("class_signature", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((("Ast", 1700)), "Parsetree"), "class_signature"), 0, (0)), 100000000, 0, -373), 0), 100000000, 0, -372), (Tag5 ("class_type", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((("Ast", 1700)), "Parsetree"), "class_type"), 0, (0)), 100000000, 0, -345), 0), 100000000, 0, -344), (Tag5 ("class_type_field", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((("Ast", 1700)), "Parsetree"), "class_type_field"), 0, (0)), 100000000, 0, -359), 0), 100000000, 0, -358), (Tag5 ("core_type", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((("Ast", 1700)), "Parsetree"), "core_type"), 0, (0)), 100000000, 0, -349), 0), 100000000, 0, -348), (Tag5 ("expression", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((("Ast", 1700)), "Parsetree"), "expression"), 0, (0)), 100000000, 0, -371), 0), 100000000, 0, -370), (Tag5 ("extension_constructor", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((("Ast", 1700)), "Parsetree"), "extension_constructor"), 0, (0)), 100000000, 0, -357), 0), 100000000, 0, -356), (Tag5 ("module_expr", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((("Ast", 1700)), "Parsetree"), "module_expr"), 0, (0)), 100000000, 0, -355), 0), 100000000, 0, -354), (Tag5 ("module_type", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((("Ast", 1700)), "Parsetree"), "module_type"), 0, (0)), 100000000, 0, -353), 0), 100000000, 0, -352), (Tag5 ("pattern", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((("Ast", 1700)), "Parsetree"), "pattern"), 0, (0)), 100000000, 0, -351), 0), 100000000, 0, -350), (Tag5 ("signature", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((("Ast", 1700)), "Parsetree"), "signature"), 0, (0)), 100000000, 0, -367), 0), 100000000, 0, -366), (Tag5 ("signature_item", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((("Ast", 1700)), "Parsetree"), "signature_item"), 0, (0)), 100000000, 0, -375), 0), 100000000, 0, -374), (Tag5 ("structure", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((("Ast", 1700)), "Parsetree"), "structure"), 0, (0)), 100000000, 0, -369), 0), 100000000, 0, -368), (Tag5 ("structure_item", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((("Ast", 1700)), "Parsetree"), "structure_item"), 0, (0)), 100000000, 0, -347), 0), 100000000, 0, -346), (Tag5 ("toplevel_phrase", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((("Ast", 1700)), "Parsetree"), "toplevel_phrase"), 0, (0)), 100000000, 0, -361), 0), 100000000, 0, -360), (Tag5 ("type_declaration", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((("Ast", 1700)), "Parsetree"), "type_declaration"), 0, (0)), 100000000, 0, -377), 0), 100000000, 0, -376), (Tag5 ("type_extension", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((("Ast", 1700)), "Parsetree"), "type_extension"), 0, (0)), 100000000, 0, -365), 0), 100000000, 0, -364), (0, 100000000, 0, -343)), 100000000, 0, 82)), 100000000, 0, 83)), 100000000, 0, 84)), 100000000, 0, 85)), 100000000, 0, 86)), 100000000, 0, 87)), 100000000, 0, 88)), 100000000, 0, 89)), 100000000, 0, 90)), 100000000, 0, 91)), 100000000, 0, 92)), 100000000, 0, 93)), 100000000, 0, 94)), 100000000, 0, 95)), 100000000, 0, 96)), 100000000, 0, 97)), 100000000, 0, 98)), 100000000, 0, 99)), 100000000, 0, -324), (0)), 100000000, 0, -323)], (0)), 100000000, 0, -322)), 0, 0, 0, 0, (("ast/versions.mli", 107, 3552, 3554), ("ast/versions.mli", 129, 4714, 4724), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Versions", 30)), 1, 0); Tag2 (("Version", 1704), (Tag1 ((Tag2 ("Ppxlib_ast__Versions")), "witnesses"), [((("_")), 100000000, 0, -321)], (0), ((Tag3 (Tag1 ((Tag2 ("Ppxlib_ast__Versions")), "witnesses"), [(Tag3 ((("types", 1703)), 0, (0)), 100000000, 0, -320)], (0)), 100000000, 0, -319)), 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Ppxlib_ast__Versions", 31)), 0, 0); (("migration_info", 1705), ((Tag3 (Tag1 ((Tag2 ("Ppxlib_ast__Versions")), "migration_info"), [(Tag3 ((("types", 1703)), 0, (0)), 100000000, 0, -318)], (0)), 100000000, 0, -317), 0, (("ast/versions.mli", 136, 4933, 4935), ("ast/versions.mli", 136, 4933, 4976), 0), 0, Tag1 ("Ppxlib_ast__Versions", 32)), 0); Tag3 (("Type", 1706), 0, (Tag1 ([Tag1 (("t", 1713), ([((("js")), 100000000, 0, -385); ((("ocaml")), 100000000, 0, -386)], 2, Tag1 ([(("Structure", 375), (0), ((Tag3 ((("t", 1713)), [(Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "structure"), 0, (0)), 100000000, 0, -388); (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "structure"), 0, (0)), 100000000, 0, -389)], (0)), 100000000, 0, -387)), (("ast/import.ml", 26, 708, 714), ("ast/import.ml", 29, 814, 827), 0), 0, Tag1 ("Ppxlib_ast__Import", 4)); (("Signature", 460), (0), ((Tag3 ((("t", 1713)), [(Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "signature"), 0, (0)), 100000000, 0, -391); (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "signature"), 0, (0)), 100000000, 0, -392)], (0)), 100000000, 0, -390)), (("ast/import.ml", 30, 828, 834), ("ast/import.ml", 33, 934, 947), 0), 0, Tag1 ("Ppxlib_ast__Import", 5)); (("Toplevel_phrase", 461), (0), ((Tag3 ((("t", 1713)), [(Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "toplevel_phrase"), 0, (0)), 100000000, 0, -394); (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "toplevel_phrase"), 0, (0)), 100000000, 0, -395)], (0)), 100000000, 0, -393)), (("ast/import.ml", 34, 948, 954), ("ast/import.ml", 37, 1072, 1085), 0), 0, Tag1 ("Ppxlib_ast__Import", 6)); (("Core_type", 462), (0), ((Tag3 ((("t", 1713)), [(Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "core_type"), 0, (0)), 100000000, 0, -397); (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "core_type"), 0, (0)), 100000000, 0, -398)], (0)), 100000000, 0, -396)), (("ast/import.ml", 38, 1086, 1092), ("ast/import.ml", 41, 1192, 1205), 0), 0, Tag1 ("Ppxlib_ast__Import", 7)); (("Expression", 463), (0), ((Tag3 ((("t", 1713)), [(Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "expression"), 0, (0)), 100000000, 0, -400); (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "expression"), 0, (0)), 100000000, 0, -401)], (0)), 100000000, 0, -399)), (("ast/import.ml", 42, 1206, 1212), ("ast/import.ml", 45, 1315, 1328), 0), 0, Tag1 ("Ppxlib_ast__Import", 8)); (("Pattern", 464), (0), ((Tag3 ((("t", 1713)), [(Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "pattern"), 0, (0)), 100000000, 0, -403); (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "pattern"), 0, (0)), 100000000, 0, -404)], (0)), 100000000, 0, -402)), (("ast/import.ml", 46, 1329, 1335), ("ast/import.ml", 49, 1429, 1442), 0), 0, Tag1 ("Ppxlib_ast__Import", 9)); (("Case", 465), (0), ((Tag3 ((("t", 1713)), [(Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "case"), 0, (0)), 100000000, 0, -406); (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "case"), 0, (0)), 100000000, 0, -407)], (0)), 100000000, 0, -405)), (("ast/import.ml", 50, 1443, 1449), ("ast/import.ml", 53, 1534, 1547), 0), 0, Tag1 ("Ppxlib_ast__Import", 10)); (("Type_declaration", 466), (0), ((Tag3 ((("t", 1713)), [(Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "type_declaration"), 0, (0)), 100000000, 0, -409); (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "type_declaration"), 0, (0)), 100000000, 0, -410)], (0)), 100000000, 0, -408)), (("ast/import.ml", 54, 1548, 1554), ("ast/import.ml", 57, 1675, 1688), 0), 0, Tag1 ("Ppxlib_ast__Import", 11)); (("Type_extension", 467), (0), ((Tag3 ((("t", 1713)), [(Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "type_extension"), 0, (0)), 100000000, 0, -412); (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "type_extension"), 0, (0)), 100000000, 0, -413)], (0)), 100000000, 0, -411)), (("ast/import.ml", 58, 1689, 1695), ("ast/import.ml", 61, 1810, 1823), 0), 0, Tag1 ("Ppxlib_ast__Import", 12)); (("Extension_constructor", 468), (0), ((Tag3 ((("t", 1713)), [(Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "extension_constructor"), 0, (0)), 100000000, 0, -415); (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "extension_constructor"), 0, (0)), 100000000, 0, -416)], (0)), 100000000, 0, -414)), (("ast/import.ml", 62, 1824, 1830), ("ast/import.ml", 65, 1966, 1979), 0), 0, Tag1 ("Ppxlib_ast__Import", 13)); (("Class_expr", 469), (0), ((Tag3 ((("t", 1713)), [(Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "class_expr"), 0, (0)), 100000000, 0, -418); (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "class_expr"), 0, (0)), 100000000, 0, -419)], (0)), 100000000, 0, -417)), (("ast/import.ml", 66, 1980, 1986), ("ast/import.ml", 69, 2089, 2102), 0), 0, Tag1 ("Ppxlib_ast__Import", 14)); (("Class_field", 470), (0), ((Tag3 ((("t", 1713)), [(Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "class_field"), 0, (0)), 100000000, 0, -421); (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "class_field"), 0, (0)), 100000000, 0, -422)], (0)), 100000000, 0, -420)), (("ast/import.ml", 70, 2103, 2109), ("ast/import.ml", 73, 2215, 2228), 0), 0, Tag1 ("Ppxlib_ast__Import", 15)); (("Class_type", 471), (0), ((Tag3 ((("t", 1713)), [(Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "class_type"), 0, (0)), 100000000, 0, -424); (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "class_type"), 0, (0)), 100000000, 0, -425)], (0)), 100000000, 0, -423)), (("ast/import.ml", 74, 2229, 2235), ("ast/import.ml", 77, 2338, 2351), 0), 0, Tag1 ("Ppxlib_ast__Import", 16)); (("Class_signature", 472), (0), ((Tag3 ((("t", 1713)), [(Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "class_signature"), 0, (0)), 100000000, 0, -427); (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "class_signature"), 0, (0)), 100000000, 0, -428)], (0)), 100000000, 0, -426)), (("ast/import.ml", 78, 2352, 2358), ("ast/import.ml", 81, 2476, 2489), 0), 0, Tag1 ("Ppxlib_ast__Import", 17)); (("Class_type_field", 473), (0), ((Tag3 ((("t", 1713)), [(Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "class_type_field"), 0, (0)), 100000000, 0, -430); (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "class_type_field"), 0, (0)), 100000000, 0, -431)], (0)), 100000000, 0, -429)), (("ast/import.ml", 82, 2490, 2496), ("ast/import.ml", 85, 2617, 2630), 0), 0, Tag1 ("Ppxlib_ast__Import", 18)); (("Module_expr", 474), (0), ((Tag3 ((("t", 1713)), [(Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "module_expr"), 0, (0)), 100000000, 0, -433); (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "module_expr"), 0, (0)), 100000000, 0, -434)], (0)), 100000000, 0, -432)), (("ast/import.ml", 86, 2631, 2637), ("ast/import.ml", 89, 2743, 2756), 0), 0, Tag1 ("Ppxlib_ast__Import", 19)); (("Module_type", 475), (0), ((Tag3 ((("t", 1713)), [(Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "module_type"), 0, (0)), 100000000, 0, -436); (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "module_type"), 0, (0)), 100000000, 0, -437)], (0)), 100000000, 0, -435)), (("ast/import.ml", 90, 2757, 2763), ("ast/import.ml", 93, 2869, 2882), 0), 0, Tag1 ("Ppxlib_ast__Import", 20)); (("Signature_item", 476), (0), ((Tag3 ((("t", 1713)), [(Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "signature_item"), 0, (0)), 100000000, 0, -439); (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "signature_item"), 0, (0)), 100000000, 0, -440)], (0)), 100000000, 0, -438)), (("ast/import.ml", 94, 2883, 2889), ("ast/import.ml", 97, 3004, 3017), 0), 0, Tag1 ("Ppxlib_ast__Import", 21)); (("Structure_item", 477), (0), ((Tag3 ((("t", 1713)), [(Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "structure_item"), 0, (0)), 100000000, 0, -442); (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "structure_item"), 0, (0)), 100000000, 0, -443)], (0)), 100000000, 0, -441)), (("ast/import.ml", 98, 3018, 3024), ("ast/import.ml", 101, 3139, 3152), 0), 0, Tag1 ("Ppxlib_ast__Import", 22)); (("List", 478), ([(Tag3 ((("t", 1713)), [((("a")), 100000000, 0, -446); ((("b")), 100000000, 0, -448)], (0)), 100000000, 0, -449)]), ((Tag3 ((("t", 1713)), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -446)], (0)), 100000000, 0, -445); (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -448)], (0)), 100000000, 0, -447)], (0)), 100000000, 0, -444)), (("ast/import.ml", 103, 3159, 3165), ("ast/import.ml", 103, 3159, 3208), 0), 0, Tag1 ("Ppxlib_ast__Import", 23)); (("Pair", 479), ([(Tag3 ((("t", 1713)), [((("a")), 100000000, 0, -452); ((("b")), 100000000, 0, -455)], (0)), 100000000, 0, -457); (Tag3 ((("t", 1713)), [((("c")), 100000000, 0, -453); ((("d")), 100000000, 0, -456)], (0)), 100000000, 0, -458)]), ((Tag3 ((("t", 1713)), [(Tag2 ([((("a")), 100000000, 0, -452); ((("c")), 100000000, 0, -453)]), 100000000, 0, -451); (Tag2 ([((("b")), 100000000, 0, -455); ((("d")), 100000000, 0, -456)]), 100000000, 0, -454)], (0)), 100000000, 0, -450)), (("ast/import.ml", 104, 3209, 3215), ("ast/import.ml", 104, 3209, 3271), 0), 0, Tag1 ("Ppxlib_ast__Import", 24))], 0), 1, ((Tag3 (Tag1 (Tag1 (Tag2 ((("Select_ast", 1639)), (("Ocaml", 1638))), "Type"), "t"), [((("js")), 100000000, 0, -385); ((("ocaml")), 100000000, 0, -386)], (0)), 100000000, 0, -384)), [63; 63], [0; 0], 0, 0, (("ast/import.ml", 16, 396, 400), ("ast/import.ml", 104, 3209, 3271), 0), 0, 0, 0, Tag1 ("Ppxlib_ast__Import", 3)), 1, 0)]), 0, (("ast/import.ml", 15, 373, 375), ("ast/import.ml", 105, 3272, 3277), 0), Tag1 ("Ppxlib_ast__Import", 25)), 0, 0); Tag3 (("Of_ocaml", 1707), 0, (Tag1 ([(("copy_structure", 1714), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "structure"), 0, (0)), 100000000, 0, -515), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "structure"), 0, (0)), 100000000, 0, -514), 0), 100000000, 0, -513), 0, (("ast/versions.mli", 175, 6593, 6595), ("ast/versions.mli", 175, 6593, 6694), 0), 0, Tag1 ("Ppxlib_ast__Versions", 55)), 0); (("copy_signature", 1715), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "signature"), 0, (0)), 100000000, 0, -512), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "signature"), 0, (0)), 100000000, 0, -511), 0), 100000000, 0, -510), 0, (("ast/versions.mli", 176, 6695, 6697), ("ast/versions.mli", 176, 6695, 6796), 0), 0, Tag1 ("Ppxlib_ast__Versions", 56)), 0); (("copy_toplevel_phrase", 1716), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "toplevel_phrase"), 0, (0)), 100000000, 0, -509), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "toplevel_phrase"), 0, (0)), 100000000, 0, -508), 0), 100000000, 0, -507), 0, (("ast/versions.mli", 177, 6797, 6799), ("ast/versions.mli", 177, 6797, 6904), 0), 0, Tag1 ("Ppxlib_ast__Versions", 57)), 0); (("copy_core_type", 1717), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "core_type"), 0, (0)), 100000000, 0, -506), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "core_type"), 0, (0)), 100000000, 0, -505), 0), 100000000, 0, -504), 0, (("ast/versions.mli", 178, 6905, 6907), ("ast/versions.mli", 178, 6905, 7006), 0), 0, Tag1 ("Ppxlib_ast__Versions", 58)), 0); (("copy_expression", 1718), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "expression"), 0, (0)), 100000000, 0, -503), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "expression"), 0, (0)), 100000000, 0, -502), 0), 100000000, 0, -501), 0, (("ast/versions.mli", 179, 7007, 7009), ("ast/versions.mli", 179, 7007, 7109), 0), 0, Tag1 ("Ppxlib_ast__Versions", 59)), 0); (("copy_pattern", 1719), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "pattern"), 0, (0)), 100000000, 0, -500), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "pattern"), 0, (0)), 100000000, 0, -499), 0), 100000000, 0, -498), 0, (("ast/versions.mli", 180, 7110, 7112), ("ast/versions.mli", 180, 7110, 7209), 0), 0, Tag1 ("Ppxlib_ast__Versions", 60)), 0); (("copy_case", 1720), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "case"), 0, (0)), 100000000, 0, -497), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "case"), 0, (0)), 100000000, 0, -496), 0), 100000000, 0, -495), 0, (("ast/versions.mli", 181, 7210, 7212), ("ast/versions.mli", 181, 7210, 7306), 0), 0, Tag1 ("Ppxlib_ast__Versions", 61)), 0); (("copy_type_declaration", 1721), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "type_declaration"), 0, (0)), 100000000, 0, -494), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "type_declaration"), 0, (0)), 100000000, 0, -493), 0), 100000000, 0, -492), 0, (("ast/versions.mli", 182, 7307, 7309), ("ast/versions.mli", 182, 7307, 7415), 0), 0, Tag1 ("Ppxlib_ast__Versions", 62)), 0); (("copy_type_extension", 1722), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "type_extension"), 0, (0)), 100000000, 0, -491), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "type_extension"), 0, (0)), 100000000, 0, -490), 0), 100000000, 0, -489), 0, (("ast/versions.mli", 183, 7416, 7418), ("ast/versions.mli", 183, 7416, 7522), 0), 0, Tag1 ("Ppxlib_ast__Versions", 63)), 0); (("copy_extension_constructor", 1723), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "extension_constructor"), 0, (0)), 100000000, 0, -488), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "extension_constructor"), 0, (0)), 100000000, 0, -487), 0), 100000000, 0, -486), 0, (("ast/versions.mli", 184, 7523, 7525), ("ast/versions.mli", 184, 7523, 7636), 0), 0, Tag1 ("Ppxlib_ast__Versions", 64)), 0); (("copy_class_expr", 1724), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "class_expr"), 0, (0)), 100000000, 0, -485), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "class_expr"), 0, (0)), 100000000, 0, -484), 0), 100000000, 0, -483), 0, (("ast/versions.mli", 185, 7637, 7639), ("ast/versions.mli", 185, 7637, 7739), 0), 0, Tag1 ("Ppxlib_ast__Versions", 65)), 0); (("copy_class_field", 1725), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "class_field"), 0, (0)), 100000000, 0, -482), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "class_field"), 0, (0)), 100000000, 0, -481), 0), 100000000, 0, -480), 0, (("ast/versions.mli", 186, 7740, 7742), ("ast/versions.mli", 186, 7740, 7843), 0), 0, Tag1 ("Ppxlib_ast__Versions", 66)), 0); (("copy_class_type", 1726), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "class_type"), 0, (0)), 100000000, 0, -479), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "class_type"), 0, (0)), 100000000, 0, -478), 0), 100000000, 0, -477), 0, (("ast/versions.mli", 187, 7844, 7846), ("ast/versions.mli", 187, 7844, 7946), 0), 0, Tag1 ("Ppxlib_ast__Versions", 67)), 0); (("copy_class_signature", 1727), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "class_signature"), 0, (0)), 100000000, 0, -476), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "class_signature"), 0, (0)), 100000000, 0, -475), 0), 100000000, 0, -474), 0, (("ast/versions.mli", 188, 7947, 7949), ("ast/versions.mli", 188, 7947, 8054), 0), 0, Tag1 ("Ppxlib_ast__Versions", 68)), 0); (("copy_class_type_field", 1728), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "class_type_field"), 0, (0)), 100000000, 0, -473), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "class_type_field"), 0, (0)), 100000000, 0, -472), 0), 100000000, 0, -471), 0, (("ast/versions.mli", 189, 8055, 8057), ("ast/versions.mli", 189, 8055, 8163), 0), 0, Tag1 ("Ppxlib_ast__Versions", 69)), 0); (("copy_module_expr", 1729), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "module_expr"), 0, (0)), 100000000, 0, -470), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "module_expr"), 0, (0)), 100000000, 0, -469), 0), 100000000, 0, -468), 0, (("ast/versions.mli", 190, 8164, 8166), ("ast/versions.mli", 190, 8164, 8267), 0), 0, Tag1 ("Ppxlib_ast__Versions", 70)), 0); (("copy_module_type", 1730), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "module_type"), 0, (0)), 100000000, 0, -467), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "module_type"), 0, (0)), 100000000, 0, -466), 0), 100000000, 0, -465), 0, (("ast/versions.mli", 191, 8268, 8270), ("ast/versions.mli", 191, 8268, 8371), 0), 0, Tag1 ("Ppxlib_ast__Versions", 71)), 0); (("copy_signature_item", 1731), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "signature_item"), 0, (0)), 100000000, 0, -464), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "signature_item"), 0, (0)), 100000000, 0, -463), 0), 100000000, 0, -462), 0, (("ast/versions.mli", 192, 8372, 8374), ("ast/versions.mli", 192, 8372, 8478), 0), 0, Tag1 ("Ppxlib_ast__Versions", 72)), 0); (("copy_structure_item", 1732), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "structure_item"), 0, (0)), 100000000, 0, -461), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "structure_item"), 0, (0)), 100000000, 0, -460), 0), 100000000, 0, -459), 0, (("ast/versions.mli", 193, 8479, 8481), ("ast/versions.mli", 193, 8479, 8585), 0), 0, Tag1 ("Ppxlib_ast__Versions", 73)), 0)]), 0, (("ast/import.ml", 108, 3291, 3293), ("ast/import.ml", 108, 3291, 3340), 0), Tag1 ("Ppxlib_ast__Import", 26)), 0, 0); Tag3 (("To_ocaml", 1708), 0, (Tag1 ([(("copy_structure", 1733), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "structure"), 0, (0)), 100000000, 0, -572), (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "structure"), 0, (0)), 100000000, 0, -571), 0), 100000000, 0, -570), 0, (("ast/versions.mli", 175, 6593, 6595), ("ast/versions.mli", 175, 6593, 6694), 0), 0, Tag1 ("Ppxlib_ast__Versions", 55)), 0); (("copy_signature", 1734), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "signature"), 0, (0)), 100000000, 0, -569), (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "signature"), 0, (0)), 100000000, 0, -568), 0), 100000000, 0, -567), 0, (("ast/versions.mli", 176, 6695, 6697), ("ast/versions.mli", 176, 6695, 6796), 0), 0, Tag1 ("Ppxlib_ast__Versions", 56)), 0); (("copy_toplevel_phrase", 1735), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "toplevel_phrase"), 0, (0)), 100000000, 0, -566), (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "toplevel_phrase"), 0, (0)), 100000000, 0, -565), 0), 100000000, 0, -564), 0, (("ast/versions.mli", 177, 6797, 6799), ("ast/versions.mli", 177, 6797, 6904), 0), 0, Tag1 ("Ppxlib_ast__Versions", 57)), 0); (("copy_core_type", 1736), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "core_type"), 0, (0)), 100000000, 0, -563), (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "core_type"), 0, (0)), 100000000, 0, -562), 0), 100000000, 0, -561), 0, (("ast/versions.mli", 178, 6905, 6907), ("ast/versions.mli", 178, 6905, 7006), 0), 0, Tag1 ("Ppxlib_ast__Versions", 58)), 0); (("copy_expression", 1737), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "expression"), 0, (0)), 100000000, 0, -560), (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "expression"), 0, (0)), 100000000, 0, -559), 0), 100000000, 0, -558), 0, (("ast/versions.mli", 179, 7007, 7009), ("ast/versions.mli", 179, 7007, 7109), 0), 0, Tag1 ("Ppxlib_ast__Versions", 59)), 0); (("copy_pattern", 1738), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "pattern"), 0, (0)), 100000000, 0, -557), (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "pattern"), 0, (0)), 100000000, 0, -556), 0), 100000000, 0, -555), 0, (("ast/versions.mli", 180, 7110, 7112), ("ast/versions.mli", 180, 7110, 7209), 0), 0, Tag1 ("Ppxlib_ast__Versions", 60)), 0); (("copy_case", 1739), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "case"), 0, (0)), 100000000, 0, -554), (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "case"), 0, (0)), 100000000, 0, -553), 0), 100000000, 0, -552), 0, (("ast/versions.mli", 181, 7210, 7212), ("ast/versions.mli", 181, 7210, 7306), 0), 0, Tag1 ("Ppxlib_ast__Versions", 61)), 0); (("copy_type_declaration", 1740), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "type_declaration"), 0, (0)), 100000000, 0, -551), (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "type_declaration"), 0, (0)), 100000000, 0, -550), 0), 100000000, 0, -549), 0, (("ast/versions.mli", 182, 7307, 7309), ("ast/versions.mli", 182, 7307, 7415), 0), 0, Tag1 ("Ppxlib_ast__Versions", 62)), 0); (("copy_type_extension", 1741), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "type_extension"), 0, (0)), 100000000, 0, -548), (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "type_extension"), 0, (0)), 100000000, 0, -547), 0), 100000000, 0, -546), 0, (("ast/versions.mli", 183, 7416, 7418), ("ast/versions.mli", 183, 7416, 7522), 0), 0, Tag1 ("Ppxlib_ast__Versions", 63)), 0); (("copy_extension_constructor", 1742), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "extension_constructor"), 0, (0)), 100000000, 0, -545), (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "extension_constructor"), 0, (0)), 100000000, 0, -544), 0), 100000000, 0, -543), 0, (("ast/versions.mli", 184, 7523, 7525), ("ast/versions.mli", 184, 7523, 7636), 0), 0, Tag1 ("Ppxlib_ast__Versions", 64)), 0); (("copy_class_expr", 1743), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "class_expr"), 0, (0)), 100000000, 0, -542), (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "class_expr"), 0, (0)), 100000000, 0, -541), 0), 100000000, 0, -540), 0, (("ast/versions.mli", 185, 7637, 7639), ("ast/versions.mli", 185, 7637, 7739), 0), 0, Tag1 ("Ppxlib_ast__Versions", 65)), 0); (("copy_class_field", 1744), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "class_field"), 0, (0)), 100000000, 0, -539), (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "class_field"), 0, (0)), 100000000, 0, -538), 0), 100000000, 0, -537), 0, (("ast/versions.mli", 186, 7740, 7742), ("ast/versions.mli", 186, 7740, 7843), 0), 0, Tag1 ("Ppxlib_ast__Versions", 66)), 0); (("copy_class_type", 1745), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "class_type"), 0, (0)), 100000000, 0, -536), (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "class_type"), 0, (0)), 100000000, 0, -535), 0), 100000000, 0, -534), 0, (("ast/versions.mli", 187, 7844, 7846), ("ast/versions.mli", 187, 7844, 7946), 0), 0, Tag1 ("Ppxlib_ast__Versions", 67)), 0); (("copy_class_signature", 1746), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "class_signature"), 0, (0)), 100000000, 0, -533), (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "class_signature"), 0, (0)), 100000000, 0, -532), 0), 100000000, 0, -531), 0, (("ast/versions.mli", 188, 7947, 7949), ("ast/versions.mli", 188, 7947, 8054), 0), 0, Tag1 ("Ppxlib_ast__Versions", 68)), 0); (("copy_class_type_field", 1747), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "class_type_field"), 0, (0)), 100000000, 0, -530), (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "class_type_field"), 0, (0)), 100000000, 0, -529), 0), 100000000, 0, -528), 0, (("ast/versions.mli", 189, 8055, 8057), ("ast/versions.mli", 189, 8055, 8163), 0), 0, Tag1 ("Ppxlib_ast__Versions", 69)), 0); (("copy_module_expr", 1748), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "module_expr"), 0, (0)), 100000000, 0, -527), (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "module_expr"), 0, (0)), 100000000, 0, -526), 0), 100000000, 0, -525), 0, (("ast/versions.mli", 190, 8164, 8166), ("ast/versions.mli", 190, 8164, 8267), 0), 0, Tag1 ("Ppxlib_ast__Versions", 70)), 0); (("copy_module_type", 1749), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "module_type"), 0, (0)), 100000000, 0, -524), (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "module_type"), 0, (0)), 100000000, 0, -523), 0), 100000000, 0, -522), 0, (("ast/versions.mli", 191, 8268, 8270), ("ast/versions.mli", 191, 8268, 8371), 0), 0, Tag1 ("Ppxlib_ast__Versions", 71)), 0); (("copy_signature_item", 1750), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "signature_item"), 0, (0)), 100000000, 0, -521), (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "signature_item"), 0, (0)), 100000000, 0, -520), 0), 100000000, 0, -519), 0, (("ast/versions.mli", 192, 8372, 8374), ("ast/versions.mli", 192, 8372, 8478), 0), 0, Tag1 ("Ppxlib_ast__Versions", 72)), 0); (("copy_structure_item", 1751), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "structure_item"), 0, (0)), 100000000, 0, -518), (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "structure_item"), 0, (0)), 100000000, 0, -517), 0), 100000000, 0, -516), 0, (("ast/versions.mli", 193, 8479, 8481), ("ast/versions.mli", 193, 8479, 8585), 0), 0, Tag1 ("Ppxlib_ast__Versions", 73)), 0)]), 0, (("ast/import.ml", 109, 3341, 3343), ("ast/import.ml", 109, 3341, 3390), 0), Tag1 ("Ppxlib_ast__Import", 27)), 0, 0); (("of_ocaml", 1709), ((Tag1 (0, (Tag3 (Tag1 ((("Type", 1706)), "t"), [((("js")), 100000000, 0, -314); ((("ocaml")), 100000000, 0, -315)], (0)), 100000000, 0, -316), (Tag1 (0, ((("ocaml")), 100000000, 0, -315), ((("js")), 100000000, 0, -314), 0), 100000000, 0, -313), 0), 100000000, 0, -312), 0, (("ast/import.ml", 111, 3392, 3402), ("ast/import.ml", 111, 3392, 3410), 0), 0, Tag1 ("Ppxlib_ast__Import", 28)), 0); (("to_ocaml", 1710), ((Tag1 (0, (Tag3 (Tag1 ((("Type", 1706)), "t"), [((("js")), 100000000, 0, -310); ((("ocaml")), 100000000, 0, -309)], (0)), 100000000, 0, -311), (Tag1 (0, ((("js")), 100000000, 0, -310), ((("ocaml")), 100000000, 0, -309), 0), 100000000, 0, -308), 0), 100000000, 0, -307), 0, (("ast/import.ml", 147, 4642, 4652), ("ast/import.ml", 147, 4642, 4660), 0), 0, Tag1 ("Ppxlib_ast__Import", 139)), 0); (("of_ocaml_mapper", 1711), ((Tag1 (0, (Tag3 (Tag1 ((("Type", 1706)), "t"), [((0), 100000000, 0, -301); ((0), 100000000, 0, -305)], (0)), 100000000, 0, -306), (Tag1 (0, (Tag1 (0, ((0), 100000000, 0, -302), (Tag1 (0, ((0), 100000000, 0, -305), ((0), 100000000, 0, -305), (1)), 100000000, 0, -304), (1)), 100000000, 0, -303), (Tag1 (0, ((0), 100000000, 0, -302), (Tag1 (0, ((0), 100000000, 0, -301), ((0), 100000000, 0, -301), 0), 100000000, 0, -300), 0), 100000000, 0, -299), 0), 100000000, 0, -298), 0), 100000000, 0, -297), 0, (("ast/import.ml", 183, 5892, 5898), ("ast/import.ml", 183, 5892, 5913), 0), 0, Tag1 ("Ppxlib_ast__Import", 250)), 0); (("to_ocaml_mapper", 1712), ((Tag1 (0, (Tag3 (Tag1 ((("Type", 1706)), "t"), [((0), 100000000, 0, -295); ((0), 100000000, 0, -291)], (0)), 100000000, 0, -296), (Tag1 (0, (Tag1 (0, ((0), 100000000, 0, -292), (Tag1 (0, ((0), 100000000, 0, -295), ((0), 100000000, 0, -295), (1)), 100000000, 0, -294), (1)), 100000000, 0, -293), (Tag1 (0, ((0), 100000000, 0, -292), (Tag1 (0, ((0), 100000000, 0, -291), ((0), 100000000, 0, -291), 0), 100000000, 0, -290), 0), 100000000, 0, -289), 0), 100000000, 0, -288), 0), 100000000, 0, -287), 0, (("ast/import.ml", 184, 5973, 5979), ("ast/import.ml", 184, 5973, 5994), 0), 0, Tag1 ("Ppxlib_ast__Import", 255)), 0)]), 0, (("ast/import.ml", 187, 6059, 6059), ("ast/import.ml", 187, 6059, 6099), 0), Tag1 ("Ppxlib_ast__Import", 263)), 0, 0); Tag3 (("Ast_helper", 1641), 1, (Tag3 (Tag1 ((Tag2 ("Ppxlib_ast__")), "Ast_helper_lite")), 0, (("ast/import.ml", 188, 6100, 6100), ("ast/import.ml", 188, 6100, 6135), 0), Tag1 ("Ppxlib_ast__Import", 264)), 0, 0); Tag3 (("Parsetree", 1642), 1, (Tag3 (Tag1 (Tag1 ((("Selected_ast", 1640)), "Ast"), "Parsetree")), 0, (("ast/import.ml", 191, 6244, 6244), ("ast/import.ml", 191, 6244, 6289), 0), Tag1 ("Ppxlib_ast__Import", 265)), 0, 0); Tag3 (("Asttypes", 1643), 1, (Tag3 (Tag1 (Tag1 ((("Selected_ast", 1640)), "Ast"), "Asttypes")), 0, (("ast/import.ml", 192, 6290, 6290), ("ast/import.ml", 192, 6290, 6333), 0), Tag1 ("Ppxlib_ast__Import", 266)), 0, 0); Tag3 (("Location", 1644), 1, (Tag3 (Tag1 ((Tag2 ("Astlib")), "Location")), 0, (("ast/import.ml", 195, 6362, 6362), ("ast/import.ml", 195, 6362, 6395), 0), Tag1 ("Ppxlib_ast__Import", 267)), 0, 0); Tag3 (("Longident", 1645), 1, (Tag3 (Tag1 ((Tag2 ("Astlib")), "Longident")), 0, (("ast/import.ml", 196, 6396, 6396), ("ast/import.ml", 196, 6396, 6431), 0), Tag1 ("Ppxlib_ast__Import", 268)), 0, 0); Tag3 (("Parse", 1646), 0, (Tag1 ([Tag3 (("Of_ocaml", 1752), 0, (Tag1 ([(("copy_structure", 1760), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "structure"), 0, (0)), 100000000, 0, -651), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "structure"), 0, (0)), 100000000, 0, -650), 0), 100000000, 0, -649), 0, (("ast/versions.mli", 175, 6593, 6595), ("ast/versions.mli", 175, 6593, 6694), 0), 0, Tag1 ("Ppxlib_ast__Versions", 55)), 0); (("copy_signature", 1761), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "signature"), 0, (0)), 100000000, 0, -648), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "signature"), 0, (0)), 100000000, 0, -647), 0), 100000000, 0, -646), 0, (("ast/versions.mli", 176, 6695, 6697), ("ast/versions.mli", 176, 6695, 6796), 0), 0, Tag1 ("Ppxlib_ast__Versions", 56)), 0); (("copy_toplevel_phrase", 1762), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "toplevel_phrase"), 0, (0)), 100000000, 0, -645), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "toplevel_phrase"), 0, (0)), 100000000, 0, -644), 0), 100000000, 0, -643), 0, (("ast/versions.mli", 177, 6797, 6799), ("ast/versions.mli", 177, 6797, 6904), 0), 0, Tag1 ("Ppxlib_ast__Versions", 57)), 0); (("copy_core_type", 1763), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "core_type"), 0, (0)), 100000000, 0, -642), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "core_type"), 0, (0)), 100000000, 0, -641), 0), 100000000, 0, -640), 0, (("ast/versions.mli", 178, 6905, 6907), ("ast/versions.mli", 178, 6905, 7006), 0), 0, Tag1 ("Ppxlib_ast__Versions", 58)), 0); (("copy_expression", 1764), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "expression"), 0, (0)), 100000000, 0, -639), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "expression"), 0, (0)), 100000000, 0, -638), 0), 100000000, 0, -637), 0, (("ast/versions.mli", 179, 7007, 7009), ("ast/versions.mli", 179, 7007, 7109), 0), 0, Tag1 ("Ppxlib_ast__Versions", 59)), 0); (("copy_pattern", 1765), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "pattern"), 0, (0)), 100000000, 0, -636), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "pattern"), 0, (0)), 100000000, 0, -635), 0), 100000000, 0, -634), 0, (("ast/versions.mli", 180, 7110, 7112), ("ast/versions.mli", 180, 7110, 7209), 0), 0, Tag1 ("Ppxlib_ast__Versions", 60)), 0); (("copy_case", 1766), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "case"), 0, (0)), 100000000, 0, -633), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "case"), 0, (0)), 100000000, 0, -632), 0), 100000000, 0, -631), 0, (("ast/versions.mli", 181, 7210, 7212), ("ast/versions.mli", 181, 7210, 7306), 0), 0, Tag1 ("Ppxlib_ast__Versions", 61)), 0); (("copy_type_declaration", 1767), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "type_declaration"), 0, (0)), 100000000, 0, -630), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "type_declaration"), 0, (0)), 100000000, 0, -629), 0), 100000000, 0, -628), 0, (("ast/versions.mli", 182, 7307, 7309), ("ast/versions.mli", 182, 7307, 7415), 0), 0, Tag1 ("Ppxlib_ast__Versions", 62)), 0); (("copy_type_extension", 1768), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "type_extension"), 0, (0)), 100000000, 0, -627), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "type_extension"), 0, (0)), 100000000, 0, -626), 0), 100000000, 0, -625), 0, (("ast/versions.mli", 183, 7416, 7418), ("ast/versions.mli", 183, 7416, 7522), 0), 0, Tag1 ("Ppxlib_ast__Versions", 63)), 0); (("copy_extension_constructor", 1769), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "extension_constructor"), 0, (0)), 100000000, 0, -624), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "extension_constructor"), 0, (0)), 100000000, 0, -623), 0), 100000000, 0, -622), 0, (("ast/versions.mli", 184, 7523, 7525), ("ast/versions.mli", 184, 7523, 7636), 0), 0, Tag1 ("Ppxlib_ast__Versions", 64)), 0); (("copy_class_expr", 1770), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "class_expr"), 0, (0)), 100000000, 0, -621), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "class_expr"), 0, (0)), 100000000, 0, -620), 0), 100000000, 0, -619), 0, (("ast/versions.mli", 185, 7637, 7639), ("ast/versions.mli", 185, 7637, 7739), 0), 0, Tag1 ("Ppxlib_ast__Versions", 65)), 0); (("copy_class_field", 1771), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "class_field"), 0, (0)), 100000000, 0, -618), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "class_field"), 0, (0)), 100000000, 0, -617), 0), 100000000, 0, -616), 0, (("ast/versions.mli", 186, 7740, 7742), ("ast/versions.mli", 186, 7740, 7843), 0), 0, Tag1 ("Ppxlib_ast__Versions", 66)), 0); (("copy_class_type", 1772), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "class_type"), 0, (0)), 100000000, 0, -615), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "class_type"), 0, (0)), 100000000, 0, -614), 0), 100000000, 0, -613), 0, (("ast/versions.mli", 187, 7844, 7846), ("ast/versions.mli", 187, 7844, 7946), 0), 0, Tag1 ("Ppxlib_ast__Versions", 67)), 0); (("copy_class_signature", 1773), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "class_signature"), 0, (0)), 100000000, 0, -612), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "class_signature"), 0, (0)), 100000000, 0, -611), 0), 100000000, 0, -610), 0, (("ast/versions.mli", 188, 7947, 7949), ("ast/versions.mli", 188, 7947, 8054), 0), 0, Tag1 ("Ppxlib_ast__Versions", 68)), 0); (("copy_class_type_field", 1774), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "class_type_field"), 0, (0)), 100000000, 0, -609), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "class_type_field"), 0, (0)), 100000000, 0, -608), 0), 100000000, 0, -607), 0, (("ast/versions.mli", 189, 8055, 8057), ("ast/versions.mli", 189, 8055, 8163), 0), 0, Tag1 ("Ppxlib_ast__Versions", 69)), 0); (("copy_module_expr", 1775), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "module_expr"), 0, (0)), 100000000, 0, -606), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "module_expr"), 0, (0)), 100000000, 0, -605), 0), 100000000, 0, -604), 0, (("ast/versions.mli", 190, 8164, 8166), ("ast/versions.mli", 190, 8164, 8267), 0), 0, Tag1 ("Ppxlib_ast__Versions", 70)), 0); (("copy_module_type", 1776), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "module_type"), 0, (0)), 100000000, 0, -603), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "module_type"), 0, (0)), 100000000, 0, -602), 0), 100000000, 0, -601), 0, (("ast/versions.mli", 191, 8268, 8270), ("ast/versions.mli", 191, 8268, 8371), 0), 0, Tag1 ("Ppxlib_ast__Versions", 71)), 0); (("copy_signature_item", 1777), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "signature_item"), 0, (0)), 100000000, 0, -600), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "signature_item"), 0, (0)), 100000000, 0, -599), 0), 100000000, 0, -598), 0, (("ast/versions.mli", 192, 8372, 8374), ("ast/versions.mli", 192, 8372, 8478), 0), 0, Tag1 ("Ppxlib_ast__Versions", 72)), 0); (("copy_structure_item", 1778), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((("Ocaml", 1638)), "Ast"), "Parsetree"), "structure_item"), 0, (0)), 100000000, 0, -597), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "structure_item"), 0, (0)), 100000000, 0, -596), 0), 100000000, 0, -595), 0, (("ast/versions.mli", 193, 8479, 8481), ("ast/versions.mli", 193, 8479, 8585), 0), 0, Tag1 ("Ppxlib_ast__Versions", 73)), 0)]), 0, (("ast/import.ml", 200, 6478, 6480), ("ast/import.ml", 200, 6478, 6527), 0), Tag1 ("Ppxlib_ast__Import", 271)), 0, 0); (("implementation", 1753), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -594), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "structure"), 0, (0)), 100000000, 0, -593), 0), 100000000, 0, -592), 0, (("ast/import.ml", 202, 6529, 6535), ("ast/import.ml", 202, 6529, 6549), 0), 0, Tag1 ("Ppxlib_ast__Import", 272)), 0); (("interface", 1754), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -591), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "signature"), 0, (0)), 100000000, 0, -590), 0), 100000000, 0, -589), 0, (("ast/import.ml", 203, 6608, 6614), ("ast/import.ml", 203, 6608, 6623), 0), 0, Tag1 ("Ppxlib_ast__Import", 276)), 0); (("toplevel_phrase", 1755), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -588), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "toplevel_phrase"), 0, (0)), 100000000, 0, -587), 0), 100000000, 0, -586), 0, (("ast/import.ml", 205, 6678, 6684), ("ast/import.ml", 205, 6678, 6699), 0), 0, Tag1 ("Ppxlib_ast__Import", 278)), 0); (("use_file", 1756), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -585), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "toplevel_phrase"), 0, (0)), 100000000, 0, -584)], (0)), 100000000, 0, -583), 0), 100000000, 0, -582), 0, (("ast/import.ml", 208, 6770, 6776), ("ast/import.ml", 208, 6770, 6784), 0), 0, Tag1 ("Ppxlib_ast__Import", 280)), 0); (("core_type", 1757), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -581), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "core_type"), 0, (0)), 100000000, 0, -580), 0), 100000000, 0, -579), 0, (("ast/import.ml", 211, 6857, 6863), ("ast/import.ml", 211, 6857, 6872), 0), 0, Tag1 ("Ppxlib_ast__Import", 282)), 0); (("expression", 1758), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -578), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "expression"), 0, (0)), 100000000, 0, -577), 0), 100000000, 0, -576), 0, (("ast/import.ml", 212, 6926, 6932), ("ast/import.ml", 212, 6926, 6942), 0), 0, Tag1 ("Ppxlib_ast__Import", 284)), 0); (("pattern", 1759), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -575), (Tag3 (Tag1 (Tag1 (Tag1 ((("Js", 1637)), "Ast"), "Parsetree"), "pattern"), 0, (0)), 100000000, 0, -574), 0), 100000000, 0, -573), 0, (("ast/import.ml", 213, 6998, 7004), ("ast/import.ml", 213, 6998, 7011), 0), 0, Tag1 ("Ppxlib_ast__Import", 286)), 0)]), 0, (("ast/import.ml", 198, 6433, 6433), ("ast/import.ml", 214, 7061, 7064), 0), Tag1 ("Ppxlib_ast__Import", 288)), 0, 0)], "Ppxlib_ast__Import", [("Ppxlib_ast__Import", ("\027\222\n&\137\144M\230R\150g=Y\198\007\233")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Types", ("\177\238\029.\220\006\163!\230\015\006\182\133\155\194\166")); ("Type_immediacy", ("\"\127k\011Q\241\211\138\193;8\142\129\141#\251")); ("Subst", ("\021\031\148\223\127\186\189\135\027}\145r\216\143\177\156")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Arg", ("\024%=\206\198p\149Y\007\004\216,&\254#\207")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shape", ("\235\127Y\213\025\137=\244\218\181\248N\189\188\216p")); ("Profile", ("\201i\132?<qM\169\011\239@\142\202\182\023,")); ("Primitive", ("}Shh\162\015|\220A\203\249\232\245G\213\019")); ("Ppxlib_ast__Versions", ("\005+\189\023\165C\208\138FX6X\224\005\223\t")); ("Ppxlib_ast__", ("\182{\159J6;\249\149\208}`\139\002r\020x")); ("Path", ("\012\183\178\025\1298\228*\021r\185\160Y\252\n\026")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Outcometree", ("9\021%\234\211\206\210\004H\165\208\2014\234Q\142")); ("Ocaml_common", ("1\212\195\020\163\232\187\142G\192\221\180@\1278u")); ("Misc", ("*\026\026\234c\191\131\161\\\203\183\012O\252\153\198")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Load_path", ("\012@\228l\230\164S\172h\1726X\020\252o}")); ("Identifiable", ("\004F\207\014\158GU\001\184\214\187%/#;\211")); ("Ident", ("\b9;!\187.\220\163(x\b\174\\\223\020\004")); ("Env", ("\021\n\181\142x\b\169j\227\"\017\248*\178\245\223")); ("Compmisc", ("B\127\\\174\004T\179\002\242}-C\214\152H*")); ("Cmi_format", ("6\177\bU\139\"\023\152=\249\135\174\b\011Cg")); ("Clflags", ("\162v\193G\199E|\029\023{\b\243]B\144;")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Build_path_prefix_map", ("y\028\167\207D\220\198\216\011\208\172\149\2416\bc")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216")); ("Astlib__Parse", ("\203iQ\135d.\147$\t\207\203C\131\175\193\171")); ("Astlib__Longident", ("\n\192\233\142\177n\225\191\238\161#\150\204n\"Y")); ("Astlib__Location", ("nn\153\250\162\2239\215\129\229e\026xg\000U")); ("Astlib__Ast_501", ("\207\"A\188\024\242Q\223\153\146\239\128\168h\148&")); ("Astlib__Ast_500", ("\202\202\240\178Ep\168 [f\246\t\162T\141\254")); ("Astlib__Ast_414", ("i\179p\208\134r\2177\243\167\157nF\235\143\179")); ("Astlib__Ast_413", ("\240P\019\205\016\157\177\177O)\172\193\028\192\011\190")); ("Astlib__Ast_412", (">\181S\020\t\004\1998\163p\025\210s\216\251\169")); ("Astlib__Ast_411", ("\030\186y\191\005D\180nv\183\b@1\225\168+")); ("Astlib__Ast_410", ("\023\030O]m0\005\214X\n/\226c\201\214\232")); ("Astlib__Ast_409", ("P\147I\234\185H\181\153\207\221\003\165\139\161\150\027")); ("Astlib__Ast_408", ("\225\220%%\162\188\006W\007\252\001X\158\165,\004")); ("Astlib__Ast_407", ("\163\202\2018`\230bGY\138/\021'\148:\018")); ("Astlib__Ast_406", ("v\152\031Q\232\244\141\011p\012\161\164hy\203\151")); ("Astlib__Ast_405", ("\145;\017\238\241\127\173z\138\142Q4>\198\186\207")); ("Astlib__Ast_404", ("I\027\143Zr\250\2468\193\167uOo\029\236\148")); ("Astlib__Ast_403", ("\206M\242\247\155X\251\127\002Ly\024\154\245\153\180")); ("Astlib__Ast_402", ("\178]\161\230\193\144:\005/\\~\127'|\207\189")); ("Astlib__", ("\246\155.n\143$\1435\bi\005\019C\219\191A")); ("Astlib", ("\002*Xp\193\003\201C\234Q\143\029\232\1569\007"))], [(0)])

  end

module type S =
  sig
    type keyword_state
    type te
    type 'c pattern
    val tok_pattern_eq : 'a pattern -> 'b pattern -> ('a, 'b) Util.eq option
    val tok_pattern_strings : 'c pattern -> string * string option
    val tok_func :
      ?loc:Loc.t ->
      (unit, char) Gramlib.Stream.t -> (keyword_state, te) Gramlib.LStream.t
    val tok_match : 'c pattern -> te -> 'c
    val tok_text : 'c pattern -> string
    module State :
      sig
        type t
        val init : unit -> t
        val set : t -> unit
        val get : unit -> t
        val drop : unit -> unit
        val get_comments : t -> ((int * int) * string) list
      end("DEBUG:rule", [Tag4 (("S", 432), ((Tag1 ([Tag1 (("keyword_state", 433), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("gramlib/plexing.mli", 14, 313, 315), ("gramlib/plexing.mli", 14, 313, 333), 0), 0, 0, 0, Tag1 ("Gramlib__Plexing", 0)), 1, 0); Tag1 (("te", 434), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("gramlib/plexing.mli", 15, 334, 336), ("gramlib/plexing.mli", 15, 334, 343), 0), 0, 0, 0, Tag1 ("Gramlib__Plexing", 1)), 1, 0); Tag1 (("pattern", 435), ([((("c")), 100000000, 0, -36)], 1, 0, 1, 0, [7], [2], 0, 0, (("gramlib/plexing.mli", 16, 344, 346), ("gramlib/plexing.mli", 16, 344, 361), 0), 0, 0, 0, Tag1 ("Gramlib__Plexing", 2)), 1, 0); (("tok_pattern_eq", 436), ((Tag1 (0, (Tag3 ((("pattern", 435)), [((("a")), 100000000, 0, -32)], (0)), 100000000, 0, -35), (Tag1 (0, (Tag3 ((("pattern", 435)), [((("b")), 100000000, 0, -33)], (0)), 100000000, 0, -34), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Util")), "eq"), [((("a")), 100000000, 0, -32); ((("b")), 100000000, 0, -33)], (0)), 100000000, 0, -31)], (0)), 100000000, 0, -30), 0), 100000000, 0, -29), 0), 100000000, 0, -28), 0, (("gramlib/plexing.mli", 17, 362, 364), ("gramlib/plexing.mli", 17, 362, 436), 0), 0, Tag1 ("Gramlib__Plexing", 3)), 0); (("tok_pattern_strings", 437), ((Tag1 (0, (Tag3 ((("pattern", 435)), [((("c")), 100000000, 0, -27)], (0)), 100000000, 0, -26), (Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -23); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -25)], (0)), 100000000, 0, -24)]), 100000000, 0, -22), 0), 100000000, 0, -21), 0, (("gramlib/plexing.mli", 18, 437, 439), ("gramlib/plexing.mli", 18, 437, 501), 0), 0, Tag1 ("Gramlib__Plexing", 4)), 0); (("tok_func", 438), ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -20)], (0)), 100000000, 0, -19), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Gramlib")), "Stream"), "t"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -17); (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -18)], (0)), 100000000, 0, -16), (Tag3 (Tag1 (Tag1 ((Tag2 ("Gramlib")), "LStream"), "t"), [(Tag3 ((("keyword_state", 433)), 0, (0)), 100000000, 0, -14); (Tag3 ((("te", 434)), 0, (0)), 100000000, 0, -15)], (0)), 100000000, 0, -13), 0), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("gramlib/plexing.mli", 21, 565, 567), ("gramlib/plexing.mli", 21, 565, 648), 0), 0, Tag1 ("Gramlib__Plexing", 6)), 0); (("tok_match", 439), ((Tag1 (0, (Tag3 ((("pattern", 435)), [((("c")), 100000000, 0, -8)], (0)), 100000000, 0, -10), (Tag1 (0, (Tag3 ((("te", 434)), 0, (0)), 100000000, 0, -9), ((("c")), 100000000, 0, -8), 0), 100000000, 0, -7), 0), 100000000, 0, -6), 0, (("gramlib/plexing.mli", 23, 650, 652), ("gramlib/plexing.mli", 23, 650, 690), 0), 0, Tag1 ("Gramlib__Plexing", 7)), 0); (("tok_text", 440), ((Tag1 (0, (Tag3 ((("pattern", 435)), [((("c")), 100000000, 0, -5)], (0)), 100000000, 0, -4), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("gramlib/plexing.mli", 24, 691, 693), ("gramlib/plexing.mli", 24, 691, 728), 0), 0, Tag1 ("Gramlib__Plexing", 8)), 0); Tag3 (("State", 441), 0, (Tag1 ([Tag1 (("t", 442), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("gramlib/plexing.mli", 28, 826, 830), ("gramlib/plexing.mli", 28, 826, 836), 0), 0, 0, 0, Tag1 ("Gramlib__Plexing", 9)), 1, 0); (("init", 443), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -56), (Tag3 ((("t", 442)), 0, (0)), 100000000, 0, -55), 0), 100000000, 0, -54), 0, (("gramlib/plexing.mli", 29, 837, 841), ("gramlib/plexing.mli", 29, 837, 861), 0), 0, Tag1 ("Gramlib__Plexing", 10)), 0); (("set", 444), ((Tag1 (0, (Tag3 ((("t", 442)), 0, (0)), 100000000, 0, -53), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -52), 0), 100000000, 0, -51), 0, (("gramlib/plexing.mli", 30, 862, 866), ("gramlib/plexing.mli", 30, 862, 885), 0), 0, Tag1 ("Gramlib__Plexing", 11)), 0); (("get", 445), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -50), (Tag3 ((("t", 442)), 0, (0)), 100000000, 0, -49), 0), 100000000, 0, -48), 0, (("gramlib/plexing.mli", 31, 886, 890), ("gramlib/plexing.mli", 31, 886, 909), 0), 0, Tag1 ("Gramlib__Plexing", 12)), 0); (("drop", 446), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -47), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -46), 0), 100000000, 0, -45), 0, (("gramlib/plexing.mli", 32, 910, 914), ("gramlib/plexing.mli", 32, 910, 937), 0), 0, Tag1 ("Gramlib__Plexing", 13)), 0); (("get_comments", 447), ((Tag1 (0, (Tag3 ((("t", 442)), 0, (0)), 100000000, 0, -44), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -41); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -42)]), 100000000, 0, -40); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -43)]), 100000000, 0, -39)], (0)), 100000000, 0, -38), 0), 100000000, 0, -37), 0, (("gramlib/plexing.mli", 33, 938, 942), ("gramlib/plexing.mli", 33, 938, 993), 0), 0, Tag1 ("Gramlib__Plexing", 14)), 0)]), 0, (("gramlib/plexing.mli", 27, 805, 807), ("gramlib/plexing.mli", 34, 994, 999), 0), Tag1 ("Gramlib__Plexing", 15)), 0, 0)])), 0, (("gramlib/plexing.mli", 13, 293, 293), ("gramlib/plexing.mli", 36, 1001, 1004), 0), Tag1 ("Gramlib__Plexing", 16)), 0)], "Gramlib__Plexing", [("Gramlib__Plexing", ("\028\200j\003G\198\183\184f\243\148a\020\011\160\171")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Gramlib__Stream", ("\248\\H\205_76\253\136\146\200\031\165\021=t")); ("Gramlib__LStream", ("B\143\148\148@\016M\192w\155\223\189\218\224\002\004")); ("Gramlib", ("\154\143\210e\021i\246\176\224\194\220\217\007\145\139A")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150"))], [1; (0)])

  end

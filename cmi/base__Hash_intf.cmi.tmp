module type S =
  sig
    val description : string
    type state
    val fold_int : state -> int -> state
    val fold_int64 : state -> int64 -> state
    val fold_float : state -> float -> state
    val fold_string : state -> string -> state
    type seed
    val alloc : unit -> state
    val reset : ?seed:seed -> state -> state
    type hash_value
    val get_hash_value : state -> hash_value
    module For_tests :
      sig
        val compare_state : state -> state -> int
        val state_to_string : state -> string
      end
  end
module type Builtin_hash_fold_intf =
  sig
    type state
    type 'a folder = state -> 'a -> state
    val hash_fold_nativeint : nativeint folder
    val hash_fold_int64 : int64 folder
    val hash_fold_int32 : int32 folder
    val hash_fold_char : char folder
    val hash_fold_int : int folder
    val hash_fold_bool : bool folder
    val hash_fold_string : string folder
    val hash_fold_float : float folder
    val hash_fold_unit : unit folder
    val hash_fold_option : 'a folder -> 'a option folder
    val hash_fold_list : 'a folder -> 'a list folder
    val hash_fold_lazy_t : 'a folder -> 'a lazy_t folder
    val hash_fold_ref_frozen : 'a folder -> 'a Base__.Import0.ref folder
    val hash_fold_array_frozen : 'a folder -> 'a array folder
  end
module type Builtin_hash_intf =
  sig
    type hash_value
    val hash_nativeint : nativeint -> hash_value
    val hash_int64 : int64 -> hash_value
    val hash_int32 : int32 -> hash_value
    val hash_char : char -> hash_value
    val hash_int : int -> hash_value
    val hash_bool : bool -> hash_value
    val hash_string : string -> hash_value
    val hash_float : float -> hash_value
    val hash_unit : unit -> hash_value
  end
module type Builtin_intf =
  sig
    type state
    type 'a folder = state -> 'a -> state
    val hash_fold_nativeint : nativeint folder
    val hash_fold_int64 : int64 folder
    val hash_fold_int32 : int32 folder
    val hash_fold_char : char folder
    val hash_fold_int : int folder
    val hash_fold_bool : bool folder
    val hash_fold_string : string folder
    val hash_fold_float : float folder
    val hash_fold_unit : unit folder
    val hash_fold_option : 'a folder -> 'a option folder
    val hash_fold_list : 'a folder -> 'a list folder
    val hash_fold_lazy_t : 'a folder -> 'a lazy_t folder
    val hash_fold_ref_frozen : 'a folder -> 'a Base__.Import0.ref folder
    val hash_fold_array_frozen : 'a folder -> 'a array folder
    type hash_value
    val hash_nativeint : nativeint -> hash_value
    val hash_int64 : int64 -> hash_value
    val hash_int32 : int32 -> hash_value
    val hash_char : char -> hash_value
    val hash_int : int -> hash_value
    val hash_bool : bool -> hash_value
    val hash_string : string -> hash_value
    val hash_float : float -> hash_value
    val hash_unit : unit -> hash_value
  end
module type Full =
  sig
    val description : string
    type state
    val fold_int : state -> int -> state
    val fold_int64 : state -> int64 -> state
    val fold_float : state -> float -> state
    val fold_string : state -> string -> state
    type seed
    val alloc : unit -> state
    val reset : ?seed:seed -> state -> state
    type hash_value
    val get_hash_value : state -> hash_value
    module For_tests :
      sig
        val compare_state : state -> state -> int
        val state_to_string : state -> string
      end
    type 'a folder = state -> 'a -> state
    val create : ?seed:seed -> unit -> state
    val of_fold : (state -> 'a -> state) -> 'a -> hash_value
    module Builtin :
      sig
        val hash_fold_nativeint : nativeint folder
        val hash_fold_int64 : int64 folder
        val hash_fold_int32 : int32 folder
        val hash_fold_char : char folder
        val hash_fold_int : int folder
        val hash_fold_bool : bool folder
        val hash_fold_string : string folder
        val hash_fold_float : float folder
        val hash_fold_unit : unit folder
        val hash_fold_option : 'a folder -> 'a option folder
        val hash_fold_list : 'a folder -> 'a list folder
        val hash_fold_lazy_t : 'a folder -> 'a lazy_t folder
        val hash_fold_ref_frozen : 'a folder -> 'a Base__.Import0.ref folder
        val hash_fold_array_frozen : 'a folder -> 'a array folder
        val hash_nativeint : nativeint -> hash_value
        val hash_int64 : int64 -> hash_value
        val hash_int32 : int32 -> hash_value
        val hash_char : char -> hash_value
        val hash_int : int -> hash_value
        val hash_bool : bool -> hash_value
        val hash_string : string -> hash_value
        val hash_float : float -> hash_value
        val hash_unit : unit -> hash_value
      end
    val run : ?seed:seed -> 'a folder -> 'a -> hash_value
  end
module type Hash =
  sig
    module type Full = Full
    module type S = S
    module F :
      functor (Hash : S) ->
        sig
          val description : string
          type state = Hash.state
          val fold_int : state -> int -> state
          val fold_int64 : state -> int64 -> state
          val fold_float : state -> float -> state
          val fold_string : state -> string -> state
          type seed = Hash.seed
          val alloc : unit -> state
          val reset : ?seed:seed -> state -> state
          type hash_value = Hash.hash_value
          val get_hash_value : state -> hash_value
          module For_tests :
            sig
              val compare_state : state -> state -> int
              val state_to_string : state -> string
            end
          type 'a folder = state -> 'a -> state
          val create : ?seed:seed -> unit -> state
          val of_fold : (state -> 'a -> state) -> 'a -> hash_value
          module Builtin :
            sig
              val hash_fold_nativeint : nativeint folder
              val hash_fold_int64 : int64 folder
              val hash_fold_int32 : int32 folder
              val hash_fold_char : char folder
              val hash_fold_int : int folder
              val hash_fold_bool : bool folder
              val hash_fold_string : string folder
              val hash_fold_float : float folder
              val hash_fold_unit : unit folder
              val hash_fold_option : 'a folder -> 'a option folder
              val hash_fold_list : 'a folder -> 'a list folder
              val hash_fold_lazy_t : 'a folder -> 'a lazy_t folder
              val hash_fold_ref_frozen :
                'a folder -> 'a Base__.Import0.ref folder
              val hash_fold_array_frozen : 'a folder -> 'a array folder
              val hash_nativeint : nativeint -> hash_value
              val hash_int64 : int64 -> hash_value
              val hash_int32 : int32 -> hash_value
              val hash_char : char -> hash_value
              val hash_int : int -> hash_value
              val hash_bool : bool -> hash_value
              val hash_string : string -> hash_value
              val hash_float : float -> hash_value
              val hash_unit : unit -> hash_value
            end
          val run : ?seed:seed -> 'a folder -> 'a -> hash_value
        end
    val description : string
    type state = Base_internalhash_types.state
    val fold_int : state -> int -> state
    val fold_int64 : state -> int64 -> state
    val fold_float : state -> float -> state
    val fold_string : state -> string -> state
    type seed = Base_internalhash_types.seed
    val alloc : unit -> state
    val reset : ?seed:seed -> state -> state
    type hash_value = Base_internalhash_types.hash_value
    val get_hash_value : state -> hash_value
    module For_tests :
      sig
        val compare_state : state -> state -> int
        val state_to_string : state -> string
      end
    type 'a folder = state -> 'a -> state
    val create : ?seed:seed -> unit -> state
    val of_fold : (state -> 'a -> state) -> 'a -> hash_value
    module Builtin :
      sig
        val hash_fold_nativeint : nativeint folder
        val hash_fold_int64 : int64 folder
        val hash_fold_int32 : int32 folder
        val hash_fold_char : char folder
        val hash_fold_int : int folder
        val hash_fold_bool : bool folder
        val hash_fold_string : string folder
        val hash_fold_float : float folder
        val hash_fold_unit : unit folder
        val hash_fold_option : 'a folder -> 'a option folder
        val hash_fold_list : 'a folder -> 'a list folder
        val hash_fold_lazy_t : 'a folder -> 'a lazy_t folder
        val hash_fold_ref_frozen : 'a folder -> 'a Base__.Import0.ref folder
        val hash_fold_array_frozen : 'a folder -> 'a array folder
        val hash_nativeint : nativeint -> hash_value
        val hash_int64 : int64 -> hash_value
        val hash_int32 : int32 -> hash_value
        val hash_char : char -> hash_value
        val hash_int : int -> hash_value
        val hash_bool : bool -> hash_value
        val hash_string : string -> hash_value
        val hash_float : float -> hash_value
        val hash_unit : unit -> hash_value
      end
    val run : ?seed:seed -> 'a folder -> 'a -> hash_value("DEBUG:rule", [Tag4 (("S", 1327), ((Tag1 ([(("description", 1333), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -34), 0, (("src/hash_intf.ml", 31, 1329, 1331), ("src/hash_intf.ml", 31, 1329, 1355), 0), 0, Tag1 ("Base__Hash_intf", 0)), 0); Tag1 (("state", 1334), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/hash_intf.ml", 34, 1428, 1430), ("src/hash_intf.ml", 34, 1428, 1440), 0), 0, 0, 0, Tag1 ("Base__Hash_intf", 1)), 1, 0); (("fold_int", 1335), ((Tag1 (0, (Tag3 ((("state", 1334)), 0, (0)), 100000000, 0, -33), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -32), (Tag3 ((("state", 1334)), 0, (0)), 100000000, 0, -31), 0), 100000000, 0, -30), 0), 100000000, 0, -29), 0, (("src/hash_intf.ml", 40, 1760, 1762), ("src/hash_intf.ml", 40, 1760, 1798), 0), 0, Tag1 ("Base__Hash_intf", 2)), 0); (("fold_int64", 1336), ((Tag1 (0, (Tag3 ((("state", 1334)), 0, (0)), 100000000, 0, -28), (Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -27), (Tag3 ((("state", 1334)), 0, (0)), 100000000, 0, -26), 0), 100000000, 0, -25), 0), 100000000, 0, -24), 0, (("src/hash_intf.ml", 42, 1800, 1802), ("src/hash_intf.ml", 42, 1800, 1842), 0), 0, Tag1 ("Base__Hash_intf", 3)), 0); (("fold_float", 1337), ((Tag1 (0, (Tag3 ((("state", 1334)), 0, (0)), 100000000, 0, -23), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -22), (Tag3 ((("state", 1334)), 0, (0)), 100000000, 0, -21), 0), 100000000, 0, -20), 0), 100000000, 0, -19), 0, (("src/hash_intf.ml", 43, 1843, 1845), ("src/hash_intf.ml", 43, 1843, 1885), 0), 0, Tag1 ("Base__Hash_intf", 4)), 0); (("fold_string", 1338), ((Tag1 (0, (Tag3 ((("state", 1334)), 0, (0)), 100000000, 0, -18), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -17), (Tag3 ((("state", 1334)), 0, (0)), 100000000, 0, -16), 0), 100000000, 0, -15), 0), 100000000, 0, -14), 0, (("src/hash_intf.ml", 44, 1886, 1888), ("src/hash_intf.ml", 44, 1886, 1930), 0), 0, Tag1 ("Base__Hash_intf", 5)), 0); Tag1 (("seed", 1339), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/hash_intf.ml", 47, 1997, 1999), ("src/hash_intf.ml", 47, 1997, 2008), 0), 0, 0, 0, Tag1 ("Base__Hash_intf", 6)), 1, 0); (("alloc", 1340), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -13), (Tag3 ((("state", 1334)), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("src/hash_intf.ml", 50, 2087, 2089), ("src/hash_intf.ml", 50, 2087, 2114), 0), 0, Tag1 ("Base__Hash_intf", 7)), 0); (("reset", 1341), ((Tag1 (Tag1 ("seed"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("seed", 1339)), 0, (0)), 100000000, 0, -10)], (0)), 100000000, 0, -9), (Tag1 (0, (Tag3 ((("state", 1334)), 0, (0)), 100000000, 0, -8), (Tag3 ((("state", 1334)), 0, (0)), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("src/hash_intf.ml", 54, 2284, 2286), ("src/hash_intf.ml", 54, 2284, 2326), 0), 0, Tag1 ("Base__Hash_intf", 8)), 0); Tag1 (("hash_value", 1342), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/hash_intf.ml", 57, 2405, 2407), ("src/hash_intf.ml", 57, 2405, 2422), 0), 0, 0, 0, Tag1 ("Base__Hash_intf", 9)), 1, 0); (("get_hash_value", 1343), ((Tag1 (0, (Tag3 ((("state", 1334)), 0, (0)), 100000000, 0, -4), (Tag3 ((("hash_value", 1342)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/hash_intf.ml", 60, 2493, 2495), ("src/hash_intf.ml", 60, 2493, 2535), 0), 0, Tag1 ("Base__Hash_intf", 10)), 0); Tag3 (("For_tests", 1344), 0, (Tag1 ([(("compare_state", 1345), ((Tag1 (0, (Tag3 ((("state", 1334)), 0, (0)), 100000000, 0, -42), (Tag1 (0, (Tag3 ((("state", 1334)), 0, (0)), 100000000, 0, -41), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -40), 0), 100000000, 0, -39), 0), 100000000, 0, -38), 0, (("src/hash_intf.ml", 63, 2562, 2566), ("src/hash_intf.ml", 63, 2562, 2607), 0), 0, Tag1 ("Base__Hash_intf", 11)), 0); (("state_to_string", 1346), ((Tag1 (0, (Tag3 ((("state", 1334)), 0, (0)), 100000000, 0, -37), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -36), 0), 100000000, 0, -35), 0, (("src/hash_intf.ml", 64, 2608, 2612), ("src/hash_intf.ml", 64, 2608, 2649), 0), 0, Tag1 ("Base__Hash_intf", 12)), 0)]), 0, (("src/hash_intf.ml", 62, 2537, 2539), ("src/hash_intf.ml", 65, 2650, 2655), 0), Tag1 ("Base__Hash_intf", 13)), 0, 0)])), 0, (("src/hash_intf.ml", 29, 1241, 1241), ("src/hash_intf.ml", 66, 2656, 2659), 0), Tag1 ("Base__Hash_intf", 14)), 0); Tag4 (("Builtin_hash_fold_intf", 1328), ((Tag1 ([Tag1 (("state", 1347), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/hash_intf.ml", 69, 2702, 2704), ("src/hash_intf.ml", 69, 2702, 2714), 0), 0, 0, 0, Tag1 ("Base__Hash_intf", 15)), 1, 0); Tag1 (("folder", 1348), ([((("a")), 100000000, 0, -89)], 1, 0, 1, ((Tag1 (0, (Tag3 ((("state", 1347)), 0, (0)), 100000000, 0, -90), (Tag1 (0, ((("a")), 100000000, 0, -89), (Tag3 ((("state", 1347)), 0, (0)), 100000000, 0, -88), 0), 100000000, 0, -87), 0), 100000000, 0, -86)), [46], [0], 0, 0, (("src/hash_intf.ml", 70, 2715, 2717), ("src/hash_intf.ml", 70, 2715, 2754), 0), 0, 0, 0, Tag1 ("Base__Hash_intf", 16)), 1, 0); (("hash_fold_nativeint", 1349), ((Tag3 ((("folder", 1348)), [(Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -85)], (0)), 100000000, 0, -84), 0, (("src/hash_intf.ml", 72, 2756, 2758), ("src/hash_intf.ml", 72, 2756, 2800), 0), 0, Tag1 ("Base__Hash_intf", 17)), 0); (("hash_fold_int64", 1350), ((Tag3 ((("folder", 1348)), [(Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -83)], (0)), 100000000, 0, -82), 0, (("src/hash_intf.ml", 73, 2801, 2803), ("src/hash_intf.ml", 73, 2801, 2837), 0), 0, Tag1 ("Base__Hash_intf", 18)), 0); (("hash_fold_int32", 1351), ((Tag3 ((("folder", 1348)), [(Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -81)], (0)), 100000000, 0, -80), 0, (("src/hash_intf.ml", 74, 2838, 2840), ("src/hash_intf.ml", 74, 2838, 2874), 0), 0, Tag1 ("Base__Hash_intf", 19)), 0); (("hash_fold_char", 1352), ((Tag3 ((("folder", 1348)), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -79)], (0)), 100000000, 0, -78), 0, (("src/hash_intf.ml", 75, 2875, 2877), ("src/hash_intf.ml", 75, 2875, 2909), 0), 0, Tag1 ("Base__Hash_intf", 20)), 0); (("hash_fold_int", 1353), ((Tag3 ((("folder", 1348)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -77)], (0)), 100000000, 0, -76), 0, (("src/hash_intf.ml", 76, 2910, 2912), ("src/hash_intf.ml", 76, 2910, 2942), 0), 0, Tag1 ("Base__Hash_intf", 21)), 0); (("hash_fold_bool", 1354), ((Tag3 ((("folder", 1348)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -75)], (0)), 100000000, 0, -74), 0, (("src/hash_intf.ml", 77, 2943, 2945), ("src/hash_intf.ml", 77, 2943, 2977), 0), 0, Tag1 ("Base__Hash_intf", 22)), 0); (("hash_fold_string", 1355), ((Tag3 ((("folder", 1348)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -73)], (0)), 100000000, 0, -72), 0, (("src/hash_intf.ml", 78, 2978, 2980), ("src/hash_intf.ml", 78, 2978, 3016), 0), 0, Tag1 ("Base__Hash_intf", 23)), 0); (("hash_fold_float", 1356), ((Tag3 ((("folder", 1348)), [(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -71)], (0)), 100000000, 0, -70), 0, (("src/hash_intf.ml", 79, 3017, 3019), ("src/hash_intf.ml", 79, 3017, 3053), 0), 0, Tag1 ("Base__Hash_intf", 24)), 0); (("hash_fold_unit", 1357), ((Tag3 ((("folder", 1348)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -69)], (0)), 100000000, 0, -68), 0, (("src/hash_intf.ml", 80, 3054, 3056), ("src/hash_intf.ml", 80, 3054, 3088), 0), 0, Tag1 ("Base__Hash_intf", 25)), 0); (("hash_fold_option", 1358), ((Tag1 (0, (Tag3 ((("folder", 1348)), [((("a")), 100000000, 0, -66)], (0)), 100000000, 0, -67), (Tag3 ((("folder", 1348)), [(Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -66)], (0)), 100000000, 0, -65)], (0)), 100000000, 0, -64), 0), 100000000, 0, -63), 0, (("src/hash_intf.ml", 81, 3089, 3091), ("src/hash_intf.ml", 81, 3089, 3143), 0), 0, Tag1 ("Base__Hash_intf", 26)), 0); (("hash_fold_list", 1359), ((Tag1 (0, (Tag3 ((("folder", 1348)), [((("a")), 100000000, 0, -61)], (0)), 100000000, 0, -62), (Tag3 ((("folder", 1348)), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -61)], (0)), 100000000, 0, -60)], (0)), 100000000, 0, -59), 0), 100000000, 0, -58), 0, (("src/hash_intf.ml", 82, 3144, 3146), ("src/hash_intf.ml", 82, 3144, 3194), 0), 0, Tag1 ("Base__Hash_intf", 27)), 0); (("hash_fold_lazy_t", 1360), ((Tag1 (0, (Tag3 ((("folder", 1348)), [((("a")), 100000000, 0, -56)], (0)), 100000000, 0, -57), (Tag3 ((("folder", 1348)), [(Tag3 ((Tag3 ("lazy_t", 14)), [((("a")), 100000000, 0, -56)], (0)), 100000000, 0, -55)], (0)), 100000000, 0, -54), 0), 100000000, 0, -53), 0, (("src/hash_intf.ml", 83, 3195, 3197), ("src/hash_intf.ml", 83, 3195, 3249), 0), 0, Tag1 ("Base__Hash_intf", 28)), 0); (("hash_fold_ref_frozen", 1361), ((Tag1 (0, (Tag3 ((("folder", 1348)), [((("a")), 100000000, 0, -51)], (0)), 100000000, 0, -52), (Tag3 ((("folder", 1348)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Import0"), "ref"), [((("a")), 100000000, 0, -51)], (0)), 100000000, 0, -50)], (0)), 100000000, 0, -49), 0), 100000000, 0, -48), 0, (("src/hash_intf.ml", 93, 3686, 3688), ("src/hash_intf.ml", 93, 3686, 3741), 0), 0, Tag1 ("Base__Hash_intf", 29)), 0); (("hash_fold_array_frozen", 1362), ((Tag1 (0, (Tag3 ((("folder", 1348)), [((("a")), 100000000, 0, -46)], (0)), 100000000, 0, -47), (Tag3 ((("folder", 1348)), [(Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -46)], (0)), 100000000, 0, -45)], (0)), 100000000, 0, -44), 0), 100000000, 0, -43), 0, (("src/hash_intf.ml", 95, 3743, 3745), ("src/hash_intf.ml", 95, 3743, 3802), 0), 0, Tag1 ("Base__Hash_intf", 30)), 0)])), 0, (("src/hash_intf.ml", 68, 2661, 2661), ("src/hash_intf.ml", 96, 3803, 3806), 0), Tag1 ("Base__Hash_intf", 31)), 0); Tag4 (("Builtin_hash_intf", 1329), ((Tag1 ([Tag1 (("hash_value", 1363), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/hash_intf.ml", 99, 3844, 3846), ("src/hash_intf.ml", 99, 3844, 3861), 0), 0, 0, 0, Tag1 ("Base__Hash_intf", 32)), 1, 0); (("hash_nativeint", 1364), ((Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -117), (Tag3 ((("hash_value", 1363)), 0, (0)), 100000000, 0, -116), 0), 100000000, 0, -115), 0, (("src/hash_intf.ml", 101, 3863, 3865), ("src/hash_intf.ml", 101, 3863, 3909), 0), 0, Tag1 ("Base__Hash_intf", 33)), 0); (("hash_int64", 1365), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -114), (Tag3 ((("hash_value", 1363)), 0, (0)), 100000000, 0, -113), 0), 100000000, 0, -112), 0, (("src/hash_intf.ml", 102, 3910, 3912), ("src/hash_intf.ml", 102, 3910, 3948), 0), 0, Tag1 ("Base__Hash_intf", 34)), 0); (("hash_int32", 1366), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -111), (Tag3 ((("hash_value", 1363)), 0, (0)), 100000000, 0, -110), 0), 100000000, 0, -109), 0, (("src/hash_intf.ml", 103, 3949, 3951), ("src/hash_intf.ml", 103, 3949, 3987), 0), 0, Tag1 ("Base__Hash_intf", 35)), 0); (("hash_char", 1367), ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -108), (Tag3 ((("hash_value", 1363)), 0, (0)), 100000000, 0, -107), 0), 100000000, 0, -106), 0, (("src/hash_intf.ml", 104, 3988, 3990), ("src/hash_intf.ml", 104, 3988, 4024), 0), 0, Tag1 ("Base__Hash_intf", 36)), 0); (("hash_int", 1368), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -105), (Tag3 ((("hash_value", 1363)), 0, (0)), 100000000, 0, -104), 0), 100000000, 0, -103), 0, (("src/hash_intf.ml", 105, 4025, 4027), ("src/hash_intf.ml", 105, 4025, 4059), 0), 0, Tag1 ("Base__Hash_intf", 37)), 0); (("hash_bool", 1369), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -102), (Tag3 ((("hash_value", 1363)), 0, (0)), 100000000, 0, -101), 0), 100000000, 0, -100), 0, (("src/hash_intf.ml", 106, 4060, 4062), ("src/hash_intf.ml", 106, 4060, 4096), 0), 0, Tag1 ("Base__Hash_intf", 38)), 0); (("hash_string", 1370), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -99), (Tag3 ((("hash_value", 1363)), 0, (0)), 100000000, 0, -98), 0), 100000000, 0, -97), 0, (("src/hash_intf.ml", 107, 4097, 4099), ("src/hash_intf.ml", 107, 4097, 4137), 0), 0, Tag1 ("Base__Hash_intf", 39)), 0); (("hash_float", 1371), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -96), (Tag3 ((("hash_value", 1363)), 0, (0)), 100000000, 0, -95), 0), 100000000, 0, -94), 0, (("src/hash_intf.ml", 108, 4138, 4140), ("src/hash_intf.ml", 108, 4138, 4176), 0), 0, Tag1 ("Base__Hash_intf", 40)), 0); (("hash_unit", 1372), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -93), (Tag3 ((("hash_value", 1363)), 0, (0)), 100000000, 0, -92), 0), 100000000, 0, -91), 0, (("src/hash_intf.ml", 109, 4177, 4179), ("src/hash_intf.ml", 109, 4177, 4213), 0), 0, Tag1 ("Base__Hash_intf", 41)), 0)])), 0, (("src/hash_intf.ml", 98, 3808, 3808), ("src/hash_intf.ml", 110, 4214, 4217), 0), Tag1 ("Base__Hash_intf", 42)), 0); Tag4 (("Builtin_intf", 1330), ((Tag1 ([Tag1 (("state", 1373), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/hash_intf.ml", 69, 2702, 2704), ("src/hash_intf.ml", 69, 2702, 2714), 0), 0, 0, 0, Tag1 ("Base__Hash_intf", 15)), 1, 0); Tag1 (("folder", 1374), ([((("a")), 100000000, 0, -191)], 1, 0, 1, ((Tag1 (0, (Tag3 ((("state", 1373)), 0, (0)), 100000000, 0, -192), (Tag1 (0, ((("a")), 100000000, 0, -191), (Tag3 ((("state", 1373)), 0, (0)), 100000000, 0, -190), 0), 100000000, 0, -189), 0), 100000000, 0, -188)), [46], [0], 0, 0, (("src/hash_intf.ml", 70, 2715, 2717), ("src/hash_intf.ml", 70, 2715, 2754), 0), 0, 0, 0, Tag1 ("Base__Hash_intf", 16)), 1, 0); (("hash_fold_nativeint", 1375), ((Tag3 ((("folder", 1374)), [(Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -187)], (0)), 100000000, 0, -186), 0, (("src/hash_intf.ml", 72, 2756, 2758), ("src/hash_intf.ml", 72, 2756, 2800), 0), 0, Tag1 ("Base__Hash_intf", 17)), 0); (("hash_fold_int64", 1376), ((Tag3 ((("folder", 1374)), [(Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -185)], (0)), 100000000, 0, -184), 0, (("src/hash_intf.ml", 73, 2801, 2803), ("src/hash_intf.ml", 73, 2801, 2837), 0), 0, Tag1 ("Base__Hash_intf", 18)), 0); (("hash_fold_int32", 1377), ((Tag3 ((("folder", 1374)), [(Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -183)], (0)), 100000000, 0, -182), 0, (("src/hash_intf.ml", 74, 2838, 2840), ("src/hash_intf.ml", 74, 2838, 2874), 0), 0, Tag1 ("Base__Hash_intf", 19)), 0); (("hash_fold_char", 1378), ((Tag3 ((("folder", 1374)), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -181)], (0)), 100000000, 0, -180), 0, (("src/hash_intf.ml", 75, 2875, 2877), ("src/hash_intf.ml", 75, 2875, 2909), 0), 0, Tag1 ("Base__Hash_intf", 20)), 0); (("hash_fold_int", 1379), ((Tag3 ((("folder", 1374)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -179)], (0)), 100000000, 0, -178), 0, (("src/hash_intf.ml", 76, 2910, 2912), ("src/hash_intf.ml", 76, 2910, 2942), 0), 0, Tag1 ("Base__Hash_intf", 21)), 0); (("hash_fold_bool", 1380), ((Tag3 ((("folder", 1374)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -177)], (0)), 100000000, 0, -176), 0, (("src/hash_intf.ml", 77, 2943, 2945), ("src/hash_intf.ml", 77, 2943, 2977), 0), 0, Tag1 ("Base__Hash_intf", 22)), 0); (("hash_fold_string", 1381), ((Tag3 ((("folder", 1374)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -175)], (0)), 100000000, 0, -174), 0, (("src/hash_intf.ml", 78, 2978, 2980), ("src/hash_intf.ml", 78, 2978, 3016), 0), 0, Tag1 ("Base__Hash_intf", 23)), 0); (("hash_fold_float", 1382), ((Tag3 ((("folder", 1374)), [(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -173)], (0)), 100000000, 0, -172), 0, (("src/hash_intf.ml", 79, 3017, 3019), ("src/hash_intf.ml", 79, 3017, 3053), 0), 0, Tag1 ("Base__Hash_intf", 24)), 0); (("hash_fold_unit", 1383), ((Tag3 ((("folder", 1374)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -171)], (0)), 100000000, 0, -170), 0, (("src/hash_intf.ml", 80, 3054, 3056), ("src/hash_intf.ml", 80, 3054, 3088), 0), 0, Tag1 ("Base__Hash_intf", 25)), 0); (("hash_fold_option", 1384), ((Tag1 (0, (Tag3 ((("folder", 1374)), [((("a")), 100000000, 0, -168)], (0)), 100000000, 0, -169), (Tag3 ((("folder", 1374)), [(Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -168)], (0)), 100000000, 0, -167)], (0)), 100000000, 0, -166), 0), 100000000, 0, -165), 0, (("src/hash_intf.ml", 81, 3089, 3091), ("src/hash_intf.ml", 81, 3089, 3143), 0), 0, Tag1 ("Base__Hash_intf", 26)), 0); (("hash_fold_list", 1385), ((Tag1 (0, (Tag3 ((("folder", 1374)), [((("a")), 100000000, 0, -163)], (0)), 100000000, 0, -164), (Tag3 ((("folder", 1374)), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -163)], (0)), 100000000, 0, -162)], (0)), 100000000, 0, -161), 0), 100000000, 0, -160), 0, (("src/hash_intf.ml", 82, 3144, 3146), ("src/hash_intf.ml", 82, 3144, 3194), 0), 0, Tag1 ("Base__Hash_intf", 27)), 0); (("hash_fold_lazy_t", 1386), ((Tag1 (0, (Tag3 ((("folder", 1374)), [((("a")), 100000000, 0, -158)], (0)), 100000000, 0, -159), (Tag3 ((("folder", 1374)), [(Tag3 ((Tag3 ("lazy_t", 14)), [((("a")), 100000000, 0, -158)], (0)), 100000000, 0, -157)], (0)), 100000000, 0, -156), 0), 100000000, 0, -155), 0, (("src/hash_intf.ml", 83, 3195, 3197), ("src/hash_intf.ml", 83, 3195, 3249), 0), 0, Tag1 ("Base__Hash_intf", 28)), 0); (("hash_fold_ref_frozen", 1387), ((Tag1 (0, (Tag3 ((("folder", 1374)), [((("a")), 100000000, 0, -153)], (0)), 100000000, 0, -154), (Tag3 ((("folder", 1374)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Import0"), "ref"), [((("a")), 100000000, 0, -153)], (0)), 100000000, 0, -152)], (0)), 100000000, 0, -151), 0), 100000000, 0, -150), 0, (("src/hash_intf.ml", 93, 3686, 3688), ("src/hash_intf.ml", 93, 3686, 3741), 0), 0, Tag1 ("Base__Hash_intf", 29)), 0); (("hash_fold_array_frozen", 1388), ((Tag1 (0, (Tag3 ((("folder", 1374)), [((("a")), 100000000, 0, -148)], (0)), 100000000, 0, -149), (Tag3 ((("folder", 1374)), [(Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -148)], (0)), 100000000, 0, -147)], (0)), 100000000, 0, -146), 0), 100000000, 0, -145), 0, (("src/hash_intf.ml", 95, 3743, 3745), ("src/hash_intf.ml", 95, 3743, 3802), 0), 0, Tag1 ("Base__Hash_intf", 30)), 0); Tag1 (("hash_value", 1389), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/hash_intf.ml", 99, 3844, 3846), ("src/hash_intf.ml", 99, 3844, 3861), 0), 0, 0, 0, Tag1 ("Base__Hash_intf", 32)), 1, 0); (("hash_nativeint", 1390), ((Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -144), (Tag3 ((("hash_value", 1389)), 0, (0)), 100000000, 0, -143), 0), 100000000, 0, -142), 0, (("src/hash_intf.ml", 101, 3863, 3865), ("src/hash_intf.ml", 101, 3863, 3909), 0), 0, Tag1 ("Base__Hash_intf", 33)), 0); (("hash_int64", 1391), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -141), (Tag3 ((("hash_value", 1389)), 0, (0)), 100000000, 0, -140), 0), 100000000, 0, -139), 0, (("src/hash_intf.ml", 102, 3910, 3912), ("src/hash_intf.ml", 102, 3910, 3948), 0), 0, Tag1 ("Base__Hash_intf", 34)), 0); (("hash_int32", 1392), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -138), (Tag3 ((("hash_value", 1389)), 0, (0)), 100000000, 0, -137), 0), 100000000, 0, -136), 0, (("src/hash_intf.ml", 103, 3949, 3951), ("src/hash_intf.ml", 103, 3949, 3987), 0), 0, Tag1 ("Base__Hash_intf", 35)), 0); (("hash_char", 1393), ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -135), (Tag3 ((("hash_value", 1389)), 0, (0)), 100000000, 0, -134), 0), 100000000, 0, -133), 0, (("src/hash_intf.ml", 104, 3988, 3990), ("src/hash_intf.ml", 104, 3988, 4024), 0), 0, Tag1 ("Base__Hash_intf", 36)), 0); (("hash_int", 1394), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -132), (Tag3 ((("hash_value", 1389)), 0, (0)), 100000000, 0, -131), 0), 100000000, 0, -130), 0, (("src/hash_intf.ml", 105, 4025, 4027), ("src/hash_intf.ml", 105, 4025, 4059), 0), 0, Tag1 ("Base__Hash_intf", 37)), 0); (("hash_bool", 1395), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -129), (Tag3 ((("hash_value", 1389)), 0, (0)), 100000000, 0, -128), 0), 100000000, 0, -127), 0, (("src/hash_intf.ml", 106, 4060, 4062), ("src/hash_intf.ml", 106, 4060, 4096), 0), 0, Tag1 ("Base__Hash_intf", 38)), 0); (("hash_string", 1396), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -126), (Tag3 ((("hash_value", 1389)), 0, (0)), 100000000, 0, -125), 0), 100000000, 0, -124), 0, (("src/hash_intf.ml", 107, 4097, 4099), ("src/hash_intf.ml", 107, 4097, 4137), 0), 0, Tag1 ("Base__Hash_intf", 39)), 0); (("hash_float", 1397), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -123), (Tag3 ((("hash_value", 1389)), 0, (0)), 100000000, 0, -122), 0), 100000000, 0, -121), 0, (("src/hash_intf.ml", 108, 4138, 4140), ("src/hash_intf.ml", 108, 4138, 4176), 0), 0, Tag1 ("Base__Hash_intf", 40)), 0); (("hash_unit", 1398), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -120), (Tag3 ((("hash_value", 1389)), 0, (0)), 100000000, 0, -119), 0), 100000000, 0, -118), 0, (("src/hash_intf.ml", 109, 4177, 4179), ("src/hash_intf.ml", 109, 4177, 4213), 0), 0, Tag1 ("Base__Hash_intf", 41)), 0)])), 0, (("src/hash_intf.ml", 112, 4219, 4219), ("src/hash_intf.ml", 115, 4311, 4314), 0), Tag1 ("Base__Hash_intf", 43)), 0); Tag4 (("Full", 1331), ((Tag1 ([(("description", 1399), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -252), 0, (("src/hash_intf.ml", 31, 1329, 1331), ("src/hash_intf.ml", 31, 1329, 1355), 0), 0, Tag1 ("Base__Hash_intf", 0)), 0); Tag1 (("state", 1400), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/hash_intf.ml", 34, 1428, 1430), ("src/hash_intf.ml", 34, 1428, 1440), 0), 0, 0, 0, Tag1 ("Base__Hash_intf", 1)), 1, 0); (("fold_int", 1401), ((Tag1 (0, (Tag3 ((("state", 1400)), 0, (0)), 100000000, 0, -251), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -250), (Tag3 ((("state", 1400)), 0, (0)), 100000000, 0, -249), 0), 100000000, 0, -248), 0), 100000000, 0, -247), 0, (("src/hash_intf.ml", 40, 1760, 1762), ("src/hash_intf.ml", 40, 1760, 1798), 0), 0, Tag1 ("Base__Hash_intf", 2)), 0); (("fold_int64", 1402), ((Tag1 (0, (Tag3 ((("state", 1400)), 0, (0)), 100000000, 0, -246), (Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -245), (Tag3 ((("state", 1400)), 0, (0)), 100000000, 0, -244), 0), 100000000, 0, -243), 0), 100000000, 0, -242), 0, (("src/hash_intf.ml", 42, 1800, 1802), ("src/hash_intf.ml", 42, 1800, 1842), 0), 0, Tag1 ("Base__Hash_intf", 3)), 0); (("fold_float", 1403), ((Tag1 (0, (Tag3 ((("state", 1400)), 0, (0)), 100000000, 0, -241), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -240), (Tag3 ((("state", 1400)), 0, (0)), 100000000, 0, -239), 0), 100000000, 0, -238), 0), 100000000, 0, -237), 0, (("src/hash_intf.ml", 43, 1843, 1845), ("src/hash_intf.ml", 43, 1843, 1885), 0), 0, Tag1 ("Base__Hash_intf", 4)), 0); (("fold_string", 1404), ((Tag1 (0, (Tag3 ((("state", 1400)), 0, (0)), 100000000, 0, -236), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -235), (Tag3 ((("state", 1400)), 0, (0)), 100000000, 0, -234), 0), 100000000, 0, -233), 0), 100000000, 0, -232), 0, (("src/hash_intf.ml", 44, 1886, 1888), ("src/hash_intf.ml", 44, 1886, 1930), 0), 0, Tag1 ("Base__Hash_intf", 5)), 0); Tag1 (("seed", 1405), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/hash_intf.ml", 47, 1997, 1999), ("src/hash_intf.ml", 47, 1997, 2008), 0), 0, 0, 0, Tag1 ("Base__Hash_intf", 6)), 1, 0); (("alloc", 1406), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -231), (Tag3 ((("state", 1400)), 0, (0)), 100000000, 0, -230), 0), 100000000, 0, -229), 0, (("src/hash_intf.ml", 50, 2087, 2089), ("src/hash_intf.ml", 50, 2087, 2114), 0), 0, Tag1 ("Base__Hash_intf", 7)), 0); (("reset", 1407), ((Tag1 (Tag1 ("seed"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("seed", 1405)), 0, (0)), 100000000, 0, -228)], (0)), 100000000, 0, -227), (Tag1 (0, (Tag3 ((("state", 1400)), 0, (0)), 100000000, 0, -226), (Tag3 ((("state", 1400)), 0, (0)), 100000000, 0, -225), 0), 100000000, 0, -224), 0), 100000000, 0, -223), 0, (("src/hash_intf.ml", 54, 2284, 2286), ("src/hash_intf.ml", 54, 2284, 2326), 0), 0, Tag1 ("Base__Hash_intf", 8)), 0); Tag1 (("hash_value", 1408), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/hash_intf.ml", 57, 2405, 2407), ("src/hash_intf.ml", 57, 2405, 2422), 0), 0, 0, 0, Tag1 ("Base__Hash_intf", 9)), 1, 0); (("get_hash_value", 1409), ((Tag1 (0, (Tag3 ((("state", 1400)), 0, (0)), 100000000, 0, -222), (Tag3 ((("hash_value", 1408)), 0, (0)), 100000000, 0, -221), 0), 100000000, 0, -220), 0, (("src/hash_intf.ml", 60, 2493, 2495), ("src/hash_intf.ml", 60, 2493, 2535), 0), 0, Tag1 ("Base__Hash_intf", 10)), 0); Tag3 (("For_tests", 1410), 0, (Tag1 ([(("compare_state", 1416), ((Tag1 (0, (Tag3 ((("state", 1400)), 0, (0)), 100000000, 0, -260), (Tag1 (0, (Tag3 ((("state", 1400)), 0, (0)), 100000000, 0, -259), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -258), 0), 100000000, 0, -257), 0), 100000000, 0, -256), 0, (("src/hash_intf.ml", 63, 2562, 2566), ("src/hash_intf.ml", 63, 2562, 2607), 0), 0, Tag1 ("Base__Hash_intf", 11)), 0); (("state_to_string", 1417), ((Tag1 (0, (Tag3 ((("state", 1400)), 0, (0)), 100000000, 0, -255), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -254), 0), 100000000, 0, -253), 0, (("src/hash_intf.ml", 64, 2608, 2612), ("src/hash_intf.ml", 64, 2608, 2649), 0), 0, Tag1 ("Base__Hash_intf", 12)), 0)]), 0, (("src/hash_intf.ml", 62, 2537, 2539), ("src/hash_intf.ml", 65, 2650, 2655), 0), Tag1 ("Base__Hash_intf", 13)), 0, 0); Tag1 (("folder", 1411), ([((("a")), 100000000, 0, -218)], 1, 0, 1, ((Tag1 (0, (Tag3 ((("state", 1400)), 0, (0)), 100000000, 0, -219), (Tag1 (0, ((("a")), 100000000, 0, -218), (Tag3 ((("state", 1400)), 0, (0)), 100000000, 0, -217), 0), 100000000, 0, -216), 0), 100000000, 0, -215)), [46], [0], 0, 0, (("src/hash_intf.ml", 120, 4367, 4369), ("src/hash_intf.ml", 120, 4367, 4406), 0), 0, 0, 0, Tag1 ("Base__Hash_intf", 44)), 1, 0); (("create", 1412), ((Tag1 (Tag1 ("seed"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("seed", 1405)), 0, (0)), 100000000, 0, -214)], (0)), 100000000, 0, -213), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -212), (Tag3 ((("state", 1400)), 0, (0)), 100000000, 0, -211), 0), 100000000, 0, -210), 0), 100000000, 0, -209), 0, (("src/hash_intf.ml", 123, 4494, 4496), ("src/hash_intf.ml", 123, 4494, 4536), 0), 0, Tag1 ("Base__Hash_intf", 45)), 0); (("of_fold", 1413), ((Tag1 (0, (Tag1 (0, (Tag3 ((("state", 1400)), 0, (0)), 100000000, 0, -208), (Tag1 (0, ((("a")), 100000000, 0, -204), (Tag3 ((("state", 1400)), 0, (0)), 100000000, 0, -207), 0), 100000000, 0, -206), 0), 100000000, 0, -205), (Tag1 (0, ((("a")), 100000000, 0, -204), (Tag3 ((("hash_value", 1408)), 0, (0)), 100000000, 0, -203), 0), 100000000, 0, -202), 0), 100000000, 0, -201), 0, (("src/hash_intf.ml", 127, 4636, 4638), ("src/hash_intf.ml", 127, 4636, 4694), 0), 0, Tag1 ("Base__Hash_intf", 46)), 0); Tag3 (("Builtin", 1414), 0, (Tag1 ([(("hash_fold_nativeint", 1418), ((Tag3 ((("folder", 1411)), [(Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -330)], (0)), 100000000, 0, -329), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 17)), 0); (("hash_fold_int64", 1419), ((Tag3 ((("folder", 1411)), [(Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -328)], (0)), 100000000, 0, -327), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 18)), 0); (("hash_fold_int32", 1420), ((Tag3 ((("folder", 1411)), [(Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -326)], (0)), 100000000, 0, -325), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 19)), 0); (("hash_fold_char", 1421), ((Tag3 ((("folder", 1411)), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -324)], (0)), 100000000, 0, -323), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 20)), 0); (("hash_fold_int", 1422), ((Tag3 ((("folder", 1411)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -322)], (0)), 100000000, 0, -321), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 21)), 0); (("hash_fold_bool", 1423), ((Tag3 ((("folder", 1411)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -320)], (0)), 100000000, 0, -319), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 22)), 0); (("hash_fold_string", 1424), ((Tag3 ((("folder", 1411)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -318)], (0)), 100000000, 0, -317), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 23)), 0); (("hash_fold_float", 1425), ((Tag3 ((("folder", 1411)), [(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -316)], (0)), 100000000, 0, -315), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 24)), 0); (("hash_fold_unit", 1426), ((Tag3 ((("folder", 1411)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -314)], (0)), 100000000, 0, -313), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 25)), 0); (("hash_fold_option", 1427), ((Tag1 (0, (Tag3 ((("folder", 1411)), [((("a")), 100000000, 0, -311)], (0)), 100000000, 0, -312), (Tag3 ((("folder", 1411)), [(Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -311)], (0)), 100000000, 0, -310)], (0)), 100000000, 0, -309), 0), 100000000, 0, -308), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 26)), 0); (("hash_fold_list", 1428), ((Tag1 (0, (Tag3 ((("folder", 1411)), [((("a")), 100000000, 0, -306)], (0)), 100000000, 0, -307), (Tag3 ((("folder", 1411)), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -306)], (0)), 100000000, 0, -305)], (0)), 100000000, 0, -304), 0), 100000000, 0, -303), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 27)), 0); (("hash_fold_lazy_t", 1429), ((Tag1 (0, (Tag3 ((("folder", 1411)), [((("a")), 100000000, 0, -301)], (0)), 100000000, 0, -302), (Tag3 ((("folder", 1411)), [(Tag3 ((Tag3 ("lazy_t", 14)), [((("a")), 100000000, 0, -301)], (0)), 100000000, 0, -300)], (0)), 100000000, 0, -299), 0), 100000000, 0, -298), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 28)), 0); (("hash_fold_ref_frozen", 1430), ((Tag1 (0, (Tag3 ((("folder", 1411)), [((("a")), 100000000, 0, -296)], (0)), 100000000, 0, -297), (Tag3 ((("folder", 1411)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Import0"), "ref"), [((("a")), 100000000, 0, -296)], (0)), 100000000, 0, -295)], (0)), 100000000, 0, -294), 0), 100000000, 0, -293), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 29)), 0); (("hash_fold_array_frozen", 1431), ((Tag1 (0, (Tag3 ((("folder", 1411)), [((("a")), 100000000, 0, -291)], (0)), 100000000, 0, -292), (Tag3 ((("folder", 1411)), [(Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -291)], (0)), 100000000, 0, -290)], (0)), 100000000, 0, -289), 0), 100000000, 0, -288), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 30)), 0); (("hash_nativeint", 1432), ((Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -287), (Tag3 ((("hash_value", 1408)), 0, (0)), 100000000, 0, -286), 0), 100000000, 0, -285), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 33)), 0); (("hash_int64", 1433), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -284), (Tag3 ((("hash_value", 1408)), 0, (0)), 100000000, 0, -283), 0), 100000000, 0, -282), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 34)), 0); (("hash_int32", 1434), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -281), (Tag3 ((("hash_value", 1408)), 0, (0)), 100000000, 0, -280), 0), 100000000, 0, -279), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 35)), 0); (("hash_char", 1435), ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -278), (Tag3 ((("hash_value", 1408)), 0, (0)), 100000000, 0, -277), 0), 100000000, 0, -276), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 36)), 0); (("hash_int", 1436), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -275), (Tag3 ((("hash_value", 1408)), 0, (0)), 100000000, 0, -274), 0), 100000000, 0, -273), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 37)), 0); (("hash_bool", 1437), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -272), (Tag3 ((("hash_value", 1408)), 0, (0)), 100000000, 0, -271), 0), 100000000, 0, -270), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 38)), 0); (("hash_string", 1438), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -269), (Tag3 ((("hash_value", 1408)), 0, (0)), 100000000, 0, -268), 0), 100000000, 0, -267), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 39)), 0); (("hash_float", 1439), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -266), (Tag3 ((("hash_value", 1408)), 0, (0)), 100000000, 0, -265), 0), 100000000, 0, -264), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 40)), 0); (("hash_unit", 1440), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -263), (Tag3 ((("hash_value", 1408)), 0, (0)), 100000000, 0, -262), 0), 100000000, 0, -261), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 41)), 0)]), 0, (("src/hash_intf.ml", 129, 4696, 4698), ("src/hash_intf.ml", 133, 4798, 4836), 0), Tag1 ("Base__Hash_intf", 50)), 0, 0); (("run", 1415), ((Tag1 (Tag1 ("seed"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("seed", 1405)), 0, (0)), 100000000, 0, -200)], (0)), 100000000, 0, -199), (Tag1 (0, (Tag3 ((("folder", 1411)), [((("a")), 100000000, 0, -197)], (0)), 100000000, 0, -198), (Tag1 (0, ((("a")), 100000000, 0, -197), (Tag3 ((("hash_value", 1408)), 0, (0)), 100000000, 0, -196), 0), 100000000, 0, -195), 0), 100000000, 0, -194), 0), 100000000, 0, -193), 0, (("src/hash_intf.ml", 141, 5139, 5141), ("src/hash_intf.ml", 141, 5139, 5194), 0), 0, Tag1 ("Base__Hash_intf", 51)), 0)])), 0, (("src/hash_intf.ml", 117, 4316, 4316), ("src/hash_intf.ml", 142, 5195, 5198), 0), Tag1 ("Base__Hash_intf", 52)), 0); Tag4 (("Hash", 1332), ((Tag1 ([Tag4 (("Full", 1441), ((((("Full", 1331)))), 0, (("src/hash_intf.ml", 145, 5223, 5225), ("src/hash_intf.ml", 145, 5223, 5248), 0), Tag1 ("Base__Hash_intf", 53)), 0); Tag4 (("S", 1442), ((((("S", 1327)))), 0, (("src/hash_intf.ml", 146, 5249, 5251), ("src/hash_intf.ml", 146, 5249, 5268), 0), Tag1 ("Base__Hash_intf", 54)), 0); Tag3 (("F", 1443), 0, (Tag2 (((("Hash", 1461)), ((("S", 1442)))), Tag1 ([(("description", 1462), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -456), 0, (("src/hash_intf.ml", 31, 1329, 1331), ("src/hash_intf.ml", 31, 1329, 1355), 0), 0, Tag1 ("Base__Hash_intf", 0)), 0); Tag1 (("state", 1463), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Hash", 1461)), "state"), 0, (0)), 100000000, 0, -455)), 0, 0, 0, 0, (("src/hash_intf.ml", 151, 5346, 5355), ("src/hash_intf.ml", 151, 5346, 5378), 0), 0, 0, 0, Tag1 ("Base__Hash_intf", 57)), 1, 0); (("fold_int", 1464), ((Tag1 (0, (Tag3 ((("state", 1463)), 0, (0)), 100000000, 0, -454), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -453), (Tag3 ((("state", 1463)), 0, (0)), 100000000, 0, -452), 0), 100000000, 0, -451), 0), 100000000, 0, -450), 0, (("src/hash_intf.ml", 40, 1760, 1762), ("src/hash_intf.ml", 40, 1760, 1798), 0), 0, Tag1 ("Base__Hash_intf", 2)), 0); (("fold_int64", 1465), ((Tag1 (0, (Tag3 ((("state", 1463)), 0, (0)), 100000000, 0, -449), (Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -448), (Tag3 ((("state", 1463)), 0, (0)), 100000000, 0, -447), 0), 100000000, 0, -446), 0), 100000000, 0, -445), 0, (("src/hash_intf.ml", 42, 1800, 1802), ("src/hash_intf.ml", 42, 1800, 1842), 0), 0, Tag1 ("Base__Hash_intf", 3)), 0); (("fold_float", 1466), ((Tag1 (0, (Tag3 ((("state", 1463)), 0, (0)), 100000000, 0, -444), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -443), (Tag3 ((("state", 1463)), 0, (0)), 100000000, 0, -442), 0), 100000000, 0, -441), 0), 100000000, 0, -440), 0, (("src/hash_intf.ml", 43, 1843, 1845), ("src/hash_intf.ml", 43, 1843, 1885), 0), 0, Tag1 ("Base__Hash_intf", 4)), 0); (("fold_string", 1467), ((Tag1 (0, (Tag3 ((("state", 1463)), 0, (0)), 100000000, 0, -439), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -438), (Tag3 ((("state", 1463)), 0, (0)), 100000000, 0, -437), 0), 100000000, 0, -436), 0), 100000000, 0, -435), 0, (("src/hash_intf.ml", 44, 1886, 1888), ("src/hash_intf.ml", 44, 1886, 1930), 0), 0, Tag1 ("Base__Hash_intf", 5)), 0); Tag1 (("seed", 1468), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Hash", 1461)), "seed"), 0, (0)), 100000000, 0, -434)), 0, 0, 0, 0, (("src/hash_intf.ml", 152, 5379, 5388), ("src/hash_intf.ml", 152, 5379, 5409), 0), 0, 0, 0, Tag1 ("Base__Hash_intf", 58)), 1, 0); (("alloc", 1469), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -433), (Tag3 ((("state", 1463)), 0, (0)), 100000000, 0, -432), 0), 100000000, 0, -431), 0, (("src/hash_intf.ml", 50, 2087, 2089), ("src/hash_intf.ml", 50, 2087, 2114), 0), 0, Tag1 ("Base__Hash_intf", 7)), 0); (("reset", 1470), ((Tag1 (Tag1 ("seed"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("seed", 1468)), 0, (0)), 100000000, 0, -430)], (0)), 100000000, 0, -429), (Tag1 (0, (Tag3 ((("state", 1463)), 0, (0)), 100000000, 0, -428), (Tag3 ((("state", 1463)), 0, (0)), 100000000, 0, -427), 0), 100000000, 0, -426), 0), 100000000, 0, -425), 0, (("src/hash_intf.ml", 54, 2284, 2286), ("src/hash_intf.ml", 54, 2284, 2326), 0), 0, Tag1 ("Base__Hash_intf", 8)), 0); Tag1 (("hash_value", 1471), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Hash", 1461)), "hash_value"), 0, (0)), 100000000, 0, -424)), 0, 0, 0, 0, (("src/hash_intf.ml", 150, 5303, 5312), ("src/hash_intf.ml", 150, 5303, 5345), 0), 0, 0, 0, Tag1 ("Base__Hash_intf", 56)), 1, 0); (("get_hash_value", 1472), ((Tag1 (0, (Tag3 ((("state", 1463)), 0, (0)), 100000000, 0, -423), (Tag3 ((("hash_value", 1471)), 0, (0)), 100000000, 0, -422), 0), 100000000, 0, -421), 0, (("src/hash_intf.ml", 60, 2493, 2495), ("src/hash_intf.ml", 60, 2493, 2535), 0), 0, Tag1 ("Base__Hash_intf", 10)), 0); Tag3 (("For_tests", 1473), 0, (Tag1 ([(("compare_state", 1479), ((Tag1 (0, (Tag3 ((("state", 1463)), 0, (0)), 100000000, 0, -464), (Tag1 (0, (Tag3 ((("state", 1463)), 0, (0)), 100000000, 0, -463), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -462), 0), 100000000, 0, -461), 0), 100000000, 0, -460), 0, (("src/hash_intf.ml", 63, 2562, 2566), ("src/hash_intf.ml", 63, 2562, 2607), 0), 0, Tag1 ("Base__Hash_intf", 11)), 0); (("state_to_string", 1480), ((Tag1 (0, (Tag3 ((("state", 1463)), 0, (0)), 100000000, 0, -459), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -458), 0), 100000000, 0, -457), 0, (("src/hash_intf.ml", 64, 2608, 2612), ("src/hash_intf.ml", 64, 2608, 2649), 0), 0, Tag1 ("Base__Hash_intf", 12)), 0)]), 0, (("src/hash_intf.ml", 62, 2537, 2539), ("src/hash_intf.ml", 65, 2650, 2655), 0), Tag1 ("Base__Hash_intf", 13)), 0, 0); Tag1 (("folder", 1474), ([((("a")), 100000000, 0, -419)], 1, 0, 1, ((Tag1 (0, (Tag3 ((("state", 1463)), 0, (0)), 100000000, 0, -420), (Tag1 (0, ((("a")), 100000000, 0, -419), (Tag3 ((("state", 1463)), 0, (0)), 100000000, 0, -418), 0), 100000000, 0, -417), 0), 100000000, 0, -416)), [46], [0], 0, 0, (("src/hash_intf.ml", 120, 4367, 4369), ("src/hash_intf.ml", 120, 4367, 4406), 0), 0, 0, 0, Tag1 ("Base__Hash_intf", 44)), 1, 0); (("create", 1475), ((Tag1 (Tag1 ("seed"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("seed", 1468)), 0, (0)), 100000000, 0, -415)], (0)), 100000000, 0, -414), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -413), (Tag3 ((("state", 1463)), 0, (0)), 100000000, 0, -412), 0), 100000000, 0, -411), 0), 100000000, 0, -410), 0, (("src/hash_intf.ml", 123, 4494, 4496), ("src/hash_intf.ml", 123, 4494, 4536), 0), 0, Tag1 ("Base__Hash_intf", 45)), 0); (("of_fold", 1476), ((Tag1 (0, (Tag1 (0, (Tag3 ((("state", 1463)), 0, (0)), 100000000, 0, -409), (Tag1 (0, ((("a")), 100000000, 0, -405), (Tag3 ((("state", 1463)), 0, (0)), 100000000, 0, -408), 0), 100000000, 0, -407), 0), 100000000, 0, -406), (Tag1 (0, ((("a")), 100000000, 0, -405), (Tag3 ((("hash_value", 1471)), 0, (0)), 100000000, 0, -404), 0), 100000000, 0, -403), 0), 100000000, 0, -402), 0, (("src/hash_intf.ml", 127, 4636, 4638), ("src/hash_intf.ml", 127, 4636, 4694), 0), 0, Tag1 ("Base__Hash_intf", 46)), 0); Tag3 (("Builtin", 1477), 0, (Tag1 ([(("hash_fold_nativeint", 1481), ((Tag3 ((("folder", 1474)), [(Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -534)], (0)), 100000000, 0, -533), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 17)), 0); (("hash_fold_int64", 1482), ((Tag3 ((("folder", 1474)), [(Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -532)], (0)), 100000000, 0, -531), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 18)), 0); (("hash_fold_int32", 1483), ((Tag3 ((("folder", 1474)), [(Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -530)], (0)), 100000000, 0, -529), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 19)), 0); (("hash_fold_char", 1484), ((Tag3 ((("folder", 1474)), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -528)], (0)), 100000000, 0, -527), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 20)), 0); (("hash_fold_int", 1485), ((Tag3 ((("folder", 1474)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -526)], (0)), 100000000, 0, -525), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 21)), 0); (("hash_fold_bool", 1486), ((Tag3 ((("folder", 1474)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -524)], (0)), 100000000, 0, -523), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 22)), 0); (("hash_fold_string", 1487), ((Tag3 ((("folder", 1474)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -522)], (0)), 100000000, 0, -521), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 23)), 0); (("hash_fold_float", 1488), ((Tag3 ((("folder", 1474)), [(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -520)], (0)), 100000000, 0, -519), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 24)), 0); (("hash_fold_unit", 1489), ((Tag3 ((("folder", 1474)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -518)], (0)), 100000000, 0, -517), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 25)), 0); (("hash_fold_option", 1490), ((Tag1 (0, (Tag3 ((("folder", 1474)), [((("a")), 100000000, 0, -515)], (0)), 100000000, 0, -516), (Tag3 ((("folder", 1474)), [(Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -515)], (0)), 100000000, 0, -514)], (0)), 100000000, 0, -513), 0), 100000000, 0, -512), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 26)), 0); (("hash_fold_list", 1491), ((Tag1 (0, (Tag3 ((("folder", 1474)), [((("a")), 100000000, 0, -510)], (0)), 100000000, 0, -511), (Tag3 ((("folder", 1474)), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -510)], (0)), 100000000, 0, -509)], (0)), 100000000, 0, -508), 0), 100000000, 0, -507), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 27)), 0); (("hash_fold_lazy_t", 1492), ((Tag1 (0, (Tag3 ((("folder", 1474)), [((("a")), 100000000, 0, -505)], (0)), 100000000, 0, -506), (Tag3 ((("folder", 1474)), [(Tag3 ((Tag3 ("lazy_t", 14)), [((("a")), 100000000, 0, -505)], (0)), 100000000, 0, -504)], (0)), 100000000, 0, -503), 0), 100000000, 0, -502), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 28)), 0); (("hash_fold_ref_frozen", 1493), ((Tag1 (0, (Tag3 ((("folder", 1474)), [((("a")), 100000000, 0, -500)], (0)), 100000000, 0, -501), (Tag3 ((("folder", 1474)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Import0"), "ref"), [((("a")), 100000000, 0, -500)], (0)), 100000000, 0, -499)], (0)), 100000000, 0, -498), 0), 100000000, 0, -497), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 29)), 0); (("hash_fold_array_frozen", 1494), ((Tag1 (0, (Tag3 ((("folder", 1474)), [((("a")), 100000000, 0, -495)], (0)), 100000000, 0, -496), (Tag3 ((("folder", 1474)), [(Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -495)], (0)), 100000000, 0, -494)], (0)), 100000000, 0, -493), 0), 100000000, 0, -492), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 30)), 0); (("hash_nativeint", 1495), ((Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -491), (Tag3 ((("hash_value", 1471)), 0, (0)), 100000000, 0, -490), 0), 100000000, 0, -489), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 33)), 0); (("hash_int64", 1496), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -488), (Tag3 ((("hash_value", 1471)), 0, (0)), 100000000, 0, -487), 0), 100000000, 0, -486), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 34)), 0); (("hash_int32", 1497), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -485), (Tag3 ((("hash_value", 1471)), 0, (0)), 100000000, 0, -484), 0), 100000000, 0, -483), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 35)), 0); (("hash_char", 1498), ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -482), (Tag3 ((("hash_value", 1471)), 0, (0)), 100000000, 0, -481), 0), 100000000, 0, -480), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 36)), 0); (("hash_int", 1499), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -479), (Tag3 ((("hash_value", 1471)), 0, (0)), 100000000, 0, -478), 0), 100000000, 0, -477), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 37)), 0); (("hash_bool", 1500), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -476), (Tag3 ((("hash_value", 1471)), 0, (0)), 100000000, 0, -475), 0), 100000000, 0, -474), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 38)), 0); (("hash_string", 1501), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -473), (Tag3 ((("hash_value", 1471)), 0, (0)), 100000000, 0, -472), 0), 100000000, 0, -471), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 39)), 0); (("hash_float", 1502), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -470), (Tag3 ((("hash_value", 1471)), 0, (0)), 100000000, 0, -469), 0), 100000000, 0, -468), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 40)), 0); (("hash_unit", 1503), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -467), (Tag3 ((("hash_value", 1471)), 0, (0)), 100000000, 0, -466), 0), 100000000, 0, -465), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 41)), 0)]), 0, (("src/hash_intf.ml", 129, 4696, 4698), ("src/hash_intf.ml", 133, 4798, 4836), 0), Tag1 ("Base__Hash_intf", 50)), 0, 0); (("run", 1478), ((Tag1 (Tag1 ("seed"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("seed", 1468)), 0, (0)), 100000000, 0, -401)], (0)), 100000000, 0, -400), (Tag1 (0, (Tag3 ((("folder", 1474)), [((("a")), 100000000, 0, -398)], (0)), 100000000, 0, -399), (Tag1 (0, ((("a")), 100000000, 0, -398), (Tag3 ((("hash_value", 1471)), 0, (0)), 100000000, 0, -397), 0), 100000000, 0, -396), 0), 100000000, 0, -395), 0), 100000000, 0, -394), 0, (("src/hash_intf.ml", 141, 5139, 5141), ("src/hash_intf.ml", 141, 5139, 5194), 0), 0, Tag1 ("Base__Hash_intf", 51)), 0)])), 0, (("src/hash_intf.ml", 148, 5270, 5272), ("src/hash_intf.ml", 152, 5379, 5409), 0), Tag1 ("Base__Hash_intf", 59)), 0, 0); (("description", 1444), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -393), 0, (("src/hash_intf.ml", 31, 1329, 1331), ("src/hash_intf.ml", 31, 1329, 1355), 0), 0, Tag1 ("Base__Hash_intf", 0)), 0); Tag1 (("state", 1445), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Base_internalhash_types")), "state"), 0, (0)), 100000000, 0, -392)), 0, 0, 0, 0, (("src/hash_intf.ml", 192, 7449, 7458), ("src/hash_intf.ml", 192, 7449, 7500), 0), 0, 1, 0, Tag1 ("Base__Hash_intf", 60)), 1, 0); (("fold_int", 1446), ((Tag1 (0, (Tag3 ((("state", 1445)), 0, (0)), 100000000, 0, -391), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -390), (Tag3 ((("state", 1445)), 0, (0)), 100000000, 0, -389), 0), 100000000, 0, -388), 0), 100000000, 0, -387), 0, (("src/hash_intf.ml", 40, 1760, 1762), ("src/hash_intf.ml", 40, 1760, 1798), 0), 0, Tag1 ("Base__Hash_intf", 2)), 0); (("fold_int64", 1447), ((Tag1 (0, (Tag3 ((("state", 1445)), 0, (0)), 100000000, 0, -386), (Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -385), (Tag3 ((("state", 1445)), 0, (0)), 100000000, 0, -384), 0), 100000000, 0, -383), 0), 100000000, 0, -382), 0, (("src/hash_intf.ml", 42, 1800, 1802), ("src/hash_intf.ml", 42, 1800, 1842), 0), 0, Tag1 ("Base__Hash_intf", 3)), 0); (("fold_float", 1448), ((Tag1 (0, (Tag3 ((("state", 1445)), 0, (0)), 100000000, 0, -381), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -380), (Tag3 ((("state", 1445)), 0, (0)), 100000000, 0, -379), 0), 100000000, 0, -378), 0), 100000000, 0, -377), 0, (("src/hash_intf.ml", 43, 1843, 1845), ("src/hash_intf.ml", 43, 1843, 1885), 0), 0, Tag1 ("Base__Hash_intf", 4)), 0); (("fold_string", 1449), ((Tag1 (0, (Tag3 ((("state", 1445)), 0, (0)), 100000000, 0, -376), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -375), (Tag3 ((("state", 1445)), 0, (0)), 100000000, 0, -374), 0), 100000000, 0, -373), 0), 100000000, 0, -372), 0, (("src/hash_intf.ml", 44, 1886, 1888), ("src/hash_intf.ml", 44, 1886, 1930), 0), 0, Tag1 ("Base__Hash_intf", 5)), 0); Tag1 (("seed", 1450), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Base_internalhash_types")), "seed"), 0, (0)), 100000000, 0, -371)), 0, 0, 0, 0, (("src/hash_intf.ml", 193, 7501, 7510), ("src/hash_intf.ml", 193, 7501, 7550), 0), 0, 1, 0, Tag1 ("Base__Hash_intf", 61)), 1, 0); (("alloc", 1451), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -370), (Tag3 ((("state", 1445)), 0, (0)), 100000000, 0, -369), 0), 100000000, 0, -368), 0, (("src/hash_intf.ml", 50, 2087, 2089), ("src/hash_intf.ml", 50, 2087, 2114), 0), 0, Tag1 ("Base__Hash_intf", 7)), 0); (("reset", 1452), ((Tag1 (Tag1 ("seed"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("seed", 1450)), 0, (0)), 100000000, 0, -367)], (0)), 100000000, 0, -366), (Tag1 (0, (Tag3 ((("state", 1445)), 0, (0)), 100000000, 0, -365), (Tag3 ((("state", 1445)), 0, (0)), 100000000, 0, -364), 0), 100000000, 0, -363), 0), 100000000, 0, -362), 0, (("src/hash_intf.ml", 54, 2284, 2286), ("src/hash_intf.ml", 54, 2284, 2326), 0), 0, Tag1 ("Base__Hash_intf", 8)), 0); Tag1 (("hash_value", 1453), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Base_internalhash_types")), "hash_value"), 0, (0)), 100000000, 0, -361)), 0, 0, 0, 0, (("src/hash_intf.ml", 194, 7551, 7560), ("src/hash_intf.ml", 194, 7551, 7612), 0), 0, 1, 0, Tag1 ("Base__Hash_intf", 62)), 1, 0); (("get_hash_value", 1454), ((Tag1 (0, (Tag3 ((("state", 1445)), 0, (0)), 100000000, 0, -360), (Tag3 ((("hash_value", 1453)), 0, (0)), 100000000, 0, -359), 0), 100000000, 0, -358), 0, (("src/hash_intf.ml", 60, 2493, 2495), ("src/hash_intf.ml", 60, 2493, 2535), 0), 0, Tag1 ("Base__Hash_intf", 10)), 0); Tag3 (("For_tests", 1455), 0, (Tag1 ([(("compare_state", 1504), ((Tag1 (0, (Tag3 ((("state", 1445)), 0, (0)), 100000000, 0, -542), (Tag1 (0, (Tag3 ((("state", 1445)), 0, (0)), 100000000, 0, -541), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -540), 0), 100000000, 0, -539), 0), 100000000, 0, -538), 0, (("src/hash_intf.ml", 63, 2562, 2566), ("src/hash_intf.ml", 63, 2562, 2607), 0), 0, Tag1 ("Base__Hash_intf", 11)), 0); (("state_to_string", 1505), ((Tag1 (0, (Tag3 ((("state", 1445)), 0, (0)), 100000000, 0, -537), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -536), 0), 100000000, 0, -535), 0, (("src/hash_intf.ml", 64, 2608, 2612), ("src/hash_intf.ml", 64, 2608, 2649), 0), 0, Tag1 ("Base__Hash_intf", 12)), 0)]), 0, (("src/hash_intf.ml", 62, 2537, 2539), ("src/hash_intf.ml", 65, 2650, 2655), 0), Tag1 ("Base__Hash_intf", 13)), 0, 0); Tag1 (("folder", 1456), ([((("a")), 100000000, 0, -356)], 1, 0, 1, ((Tag1 (0, (Tag3 ((("state", 1445)), 0, (0)), 100000000, 0, -357), (Tag1 (0, ((("a")), 100000000, 0, -356), (Tag3 ((("state", 1445)), 0, (0)), 100000000, 0, -355), 0), 100000000, 0, -354), 0), 100000000, 0, -353)), [46], [0], 0, 0, (("src/hash_intf.ml", 120, 4367, 4369), ("src/hash_intf.ml", 120, 4367, 4406), 0), 0, 0, 0, Tag1 ("Base__Hash_intf", 44)), 1, 0); (("create", 1457), ((Tag1 (Tag1 ("seed"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("seed", 1450)), 0, (0)), 100000000, 0, -352)], (0)), 100000000, 0, -351), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -350), (Tag3 ((("state", 1445)), 0, (0)), 100000000, 0, -349), 0), 100000000, 0, -348), 0), 100000000, 0, -347), 0, (("src/hash_intf.ml", 123, 4494, 4496), ("src/hash_intf.ml", 123, 4494, 4536), 0), 0, Tag1 ("Base__Hash_intf", 45)), 0); (("of_fold", 1458), ((Tag1 (0, (Tag1 (0, (Tag3 ((("state", 1445)), 0, (0)), 100000000, 0, -346), (Tag1 (0, ((("a")), 100000000, 0, -342), (Tag3 ((("state", 1445)), 0, (0)), 100000000, 0, -345), 0), 100000000, 0, -344), 0), 100000000, 0, -343), (Tag1 (0, ((("a")), 100000000, 0, -342), (Tag3 ((("hash_value", 1453)), 0, (0)), 100000000, 0, -341), 0), 100000000, 0, -340), 0), 100000000, 0, -339), 0, (("src/hash_intf.ml", 127, 4636, 4638), ("src/hash_intf.ml", 127, 4636, 4694), 0), 0, Tag1 ("Base__Hash_intf", 46)), 0); Tag3 (("Builtin", 1459), 0, (Tag1 ([(("hash_fold_nativeint", 1506), ((Tag3 ((("folder", 1456)), [(Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -612)], (0)), 100000000, 0, -611), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 17)), 0); (("hash_fold_int64", 1507), ((Tag3 ((("folder", 1456)), [(Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -610)], (0)), 100000000, 0, -609), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 18)), 0); (("hash_fold_int32", 1508), ((Tag3 ((("folder", 1456)), [(Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -608)], (0)), 100000000, 0, -607), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 19)), 0); (("hash_fold_char", 1509), ((Tag3 ((("folder", 1456)), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -606)], (0)), 100000000, 0, -605), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 20)), 0); (("hash_fold_int", 1510), ((Tag3 ((("folder", 1456)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -604)], (0)), 100000000, 0, -603), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 21)), 0); (("hash_fold_bool", 1511), ((Tag3 ((("folder", 1456)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -602)], (0)), 100000000, 0, -601), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 22)), 0); (("hash_fold_string", 1512), ((Tag3 ((("folder", 1456)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -600)], (0)), 100000000, 0, -599), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 23)), 0); (("hash_fold_float", 1513), ((Tag3 ((("folder", 1456)), [(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -598)], (0)), 100000000, 0, -597), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 24)), 0); (("hash_fold_unit", 1514), ((Tag3 ((("folder", 1456)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -596)], (0)), 100000000, 0, -595), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 25)), 0); (("hash_fold_option", 1515), ((Tag1 (0, (Tag3 ((("folder", 1456)), [((("a")), 100000000, 0, -593)], (0)), 100000000, 0, -594), (Tag3 ((("folder", 1456)), [(Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -593)], (0)), 100000000, 0, -592)], (0)), 100000000, 0, -591), 0), 100000000, 0, -590), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 26)), 0); (("hash_fold_list", 1516), ((Tag1 (0, (Tag3 ((("folder", 1456)), [((("a")), 100000000, 0, -588)], (0)), 100000000, 0, -589), (Tag3 ((("folder", 1456)), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -588)], (0)), 100000000, 0, -587)], (0)), 100000000, 0, -586), 0), 100000000, 0, -585), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 27)), 0); (("hash_fold_lazy_t", 1517), ((Tag1 (0, (Tag3 ((("folder", 1456)), [((("a")), 100000000, 0, -583)], (0)), 100000000, 0, -584), (Tag3 ((("folder", 1456)), [(Tag3 ((Tag3 ("lazy_t", 14)), [((("a")), 100000000, 0, -583)], (0)), 100000000, 0, -582)], (0)), 100000000, 0, -581), 0), 100000000, 0, -580), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 28)), 0); (("hash_fold_ref_frozen", 1518), ((Tag1 (0, (Tag3 ((("folder", 1456)), [((("a")), 100000000, 0, -578)], (0)), 100000000, 0, -579), (Tag3 ((("folder", 1456)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Import0"), "ref"), [((("a")), 100000000, 0, -578)], (0)), 100000000, 0, -577)], (0)), 100000000, 0, -576), 0), 100000000, 0, -575), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 29)), 0); (("hash_fold_array_frozen", 1519), ((Tag1 (0, (Tag3 ((("folder", 1456)), [((("a")), 100000000, 0, -573)], (0)), 100000000, 0, -574), (Tag3 ((("folder", 1456)), [(Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -573)], (0)), 100000000, 0, -572)], (0)), 100000000, 0, -571), 0), 100000000, 0, -570), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 30)), 0); (("hash_nativeint", 1520), ((Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -569), (Tag3 ((("hash_value", 1453)), 0, (0)), 100000000, 0, -568), 0), 100000000, 0, -567), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 33)), 0); (("hash_int64", 1521), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -566), (Tag3 ((("hash_value", 1453)), 0, (0)), 100000000, 0, -565), 0), 100000000, 0, -564), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 34)), 0); (("hash_int32", 1522), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -563), (Tag3 ((("hash_value", 1453)), 0, (0)), 100000000, 0, -562), 0), 100000000, 0, -561), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 35)), 0); (("hash_char", 1523), ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -560), (Tag3 ((("hash_value", 1453)), 0, (0)), 100000000, 0, -559), 0), 100000000, 0, -558), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 36)), 0); (("hash_int", 1524), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -557), (Tag3 ((("hash_value", 1453)), 0, (0)), 100000000, 0, -556), 0), 100000000, 0, -555), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 37)), 0); (("hash_bool", 1525), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -554), (Tag3 ((("hash_value", 1453)), 0, (0)), 100000000, 0, -553), 0), 100000000, 0, -552), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 38)), 0); (("hash_string", 1526), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -551), (Tag3 ((("hash_value", 1453)), 0, (0)), 100000000, 0, -550), 0), 100000000, 0, -549), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 39)), 0); (("hash_float", 1527), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -548), (Tag3 ((("hash_value", 1453)), 0, (0)), 100000000, 0, -547), 0), 100000000, 0, -546), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 40)), 0); (("hash_unit", 1528), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -545), (Tag3 ((("hash_value", 1453)), 0, (0)), 100000000, 0, -544), 0), 100000000, 0, -543), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 41)), 0)]), 0, (("src/hash_intf.ml", 129, 4696, 4698), ("src/hash_intf.ml", 133, 4798, 4836), 0), Tag1 ("Base__Hash_intf", 50)), 0, 0); (("run", 1460), ((Tag1 (Tag1 ("seed"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("seed", 1450)), 0, (0)), 100000000, 0, -338)], (0)), 100000000, 0, -337), (Tag1 (0, (Tag3 ((("folder", 1456)), [((("a")), 100000000, 0, -335)], (0)), 100000000, 0, -336), (Tag1 (0, ((("a")), 100000000, 0, -335), (Tag3 ((("hash_value", 1453)), 0, (0)), 100000000, 0, -334), 0), 100000000, 0, -333), 0), 100000000, 0, -332), 0), 100000000, 0, -331), 0, (("src/hash_intf.ml", 141, 5139, 5141), ("src/hash_intf.ml", 141, 5139, 5194), 0), 0, Tag1 ("Base__Hash_intf", 51)), 0)])), 0, (("src/hash_intf.ml", 144, 5200, 5200), ("src/hash_intf.ml", 195, 7613, 7616), 0), Tag1 ("Base__Hash_intf", 63)), 0)], "Base__Hash_intf", [("Base__Hash_intf", ("h\004P\218\1531G\127\212\208A\024\140\164iq")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__StdLabels", (".\193\n\229\139\017\212C-ZA\\kz-\128")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__MoreLabels", ("\248\232\248\254`<\230\241\161U\193U\1466J\238")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shadow_stdlib", ("\219zi\164\203\158e)\232\221\196\168\138x\142\018")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Base_internalhash_types", ("0\148#2\226\223\018\135\173>!\020\237\017\255\149")); ("Base__Poly0", ("\230;\143\234\255.H\132KOe7\155\\\023f")); ("Base__Import0", ("\156\129U\197Y[\\\153\017Ho\203\173\204\220\020")); ("Base__Bool0", ("\177f\254p\023\143&\239\020\136\206\242~\018F\251")); ("Base__", ("p\252\007\139\128\163W\025+\0225\001\246|P\158"))], [(0)])

  end

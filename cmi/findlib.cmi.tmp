type query = {
  pkgs : Name.t list;
  predicates : string list;
  syntaxes : Name.t list;
  ppxopts : string list Name.map;
  ppopt : string list;
}
type result = { libs : string list; ppxs : string list; pp : string option; }
val pp : Format.formatter -> result -> unit
val empty : query
val predicates : query -> string -> query
val pkg : query -> string -> query
val ppxopt : query -> string -> query
val ppopt : query -> string -> query
val syntax : query -> string -> query("DEBUG:rule", [Tag1 (("query", 497), (0, 0, [[(("pkgs", 278), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Name")), "t"), 0, (0)), 100000000, 0, -43)], (0)), 100000000, 0, -42), (("core/findlib.mli", 4, 37, 41), ("core/findlib.mli", 4, 37, 59), 0), 0, Tag1 ("Findlib", 1)); (("predicates", 279), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -45)], (0)), 100000000, 0, -44), (("core/findlib.mli", 5, 60, 64), ("core/findlib.mli", 5, 60, 88), 0), 0, Tag1 ("Findlib", 2)); (("syntaxes", 280), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Name")), "t"), 0, (0)), 100000000, 0, -47)], (0)), 100000000, 0, -46), (("core/findlib.mli", 6, 89, 93), ("core/findlib.mli", 6, 89, 115), 0), 0, Tag1 ("Findlib", 3)); (("ppxopts", 281), 0, (Tag3 (Tag1 ((Tag2 ("Name")), "map"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -50)], (0)), 100000000, 0, -49)], (0)), 100000000, 0, -48), (("core/findlib.mli", 7, 116, 120), ("core/findlib.mli", 7, 116, 150), 0), 0, Tag1 ("Findlib", 4)); (("ppopt", 282), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -52)], (0)), 100000000, 0, -51), (("core/findlib.mli", 8, 151, 155), ("core/findlib.mli", 8, 151, 173), 0), 0, Tag1 ("Findlib", 5))]], 1, 0, 0, 0, 0, 0, (("core/findlib.mli", 3, 24, 24), ("core/findlib.mli", 9, 174, 177), 0), 0, 0, 0, Tag1 ("Findlib", 0)), 1, 0); Tag1 (("result", 498), (0, 0, [[(("libs", 330), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -37)], (0)), 100000000, 0, -36), (("core/findlib.mli", 11, 179, 195), ("core/findlib.mli", 11, 179, 213), 0), 0, Tag1 ("Findlib", 7)); (("ppxs", 331), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -39)], (0)), 100000000, 0, -38), (("core/findlib.mli", 11, 179, 214), ("core/findlib.mli", 11, 179, 232), 0), 0, Tag1 ("Findlib", 8)); (("pp", 332), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -41)], (0)), 100000000, 0, -40), (("core/findlib.mli", 11, 179, 233), ("core/findlib.mli", 11, 179, 250), 0), 0, Tag1 ("Findlib", 9))]], 1, 0, 0, 0, 0, 0, (("core/findlib.mli", 11, 179, 179), ("core/findlib.mli", 11, 179, 252), 0), 0, 0, 0, Tag1 ("Findlib", 6)), 1, 0); (("pp", 499), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -35), (Tag1 (0, (Tag3 ((("result", 498)), 0, (0)), 100000000, 0, -34), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -33), 0), 100000000, 0, -32), 0), 100000000, 0, -31), 0, (("core/findlib.mli", 12, 253, 253), ("core/findlib.mli", 12, 253, 295), 0), 0, Tag1 ("Findlib", 10)), 0); (("empty", 500), ((Tag3 ((("query", 497)), 0, (0)), 100000000, 0, -30), 0, (("core/findlib.mli", 14, 297, 297), ("core/findlib.mli", 14, 297, 313), 0), 0, Tag1 ("Findlib", 11)), 0); (("predicates", 501), ((Tag1 (0, (Tag3 ((("query", 497)), 0, (0)), 100000000, 0, -29), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -28), (Tag3 ((("query", 497)), 0, (0)), 100000000, 0, -27), 0), 100000000, 0, -26), 0), 100000000, 0, -25), 0, (("core/findlib.mli", 16, 315, 315), ("core/findlib.mli", 16, 315, 355), 0), 0, Tag1 ("Findlib", 12)), 0); (("pkg", 502), ((Tag1 (0, (Tag3 ((("query", 497)), 0, (0)), 100000000, 0, -24), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -23), (Tag3 ((("query", 497)), 0, (0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0), 100000000, 0, -20), 0, (("core/findlib.mli", 17, 356, 356), ("core/findlib.mli", 17, 356, 389), 0), 0, Tag1 ("Findlib", 13)), 0); (("ppxopt", 503), ((Tag1 (0, (Tag3 ((("query", 497)), 0, (0)), 100000000, 0, -19), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -18), (Tag3 ((("query", 497)), 0, (0)), 100000000, 0, -17), 0), 100000000, 0, -16), 0), 100000000, 0, -15), 0, (("core/findlib.mli", 18, 390, 390), ("core/findlib.mli", 18, 390, 426), 0), 0, Tag1 ("Findlib", 14)), 0); (("ppopt", 504), ((Tag1 (0, (Tag3 ((("query", 497)), 0, (0)), 100000000, 0, -14), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -13), (Tag3 ((("query", 497)), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0), 100000000, 0, -10), 0, (("core/findlib.mli", 19, 427, 427), ("core/findlib.mli", 19, 427, 462), 0), 0, Tag1 ("Findlib", 15)), 0); (("syntax", 505), ((Tag1 (0, (Tag3 ((("query", 497)), 0, (0)), 100000000, 0, -9), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -8), (Tag3 ((("query", 497)), 0, (0)), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("core/findlib.mli", 20, 463, 463), ("core/findlib.mli", 20, 463, 499), 0), 0, Tag1 ("Findlib", 16)), 0); (("process", 506), ((Tag1 (0, (Tag3 ((("query", 497)), 0, (0)), 100000000, 0, -4), (Tag3 ((("result", 498)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("core/findlib.mli", 23, 502, 502), ("core/findlib.mli", 23, 502, 530), 0), 0, Tag1 ("Findlib", 17)), 0)], "Findlib", [("Findlib", ("\011\234\164\220\235\189\218\r\022\216\002\196\250,\138/")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Name", ("4? \167\131n\184\000\214\031\017\027\153\002]^")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

val process : query -> result

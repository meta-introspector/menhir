val register_uid : Types.Uid.t -> Location.t -> unit
val get_uid_to_loc_tbl : unit -> Location.t Types.Uid.Tbl.t
type value_unbound_reason =
    Val_unbound_instance_variable
  | Val_unbound_self
  | Val_unbound_ancestor
  | Val_unbound_ghost_recursive of Location.t
type module_unbound_reason = Mod_unbound_illegal_recursion
type summary =
    Env_empty
  | Env_value of summary * Ident.t * Types.value_description
  | Env_type of summary * Ident.t * Types.type_declaration
  | Env_extension of summary * Ident.t * Types.extension_constructor
  | Env_module of summary * Ident.t * Types.module_presence *
      Types.module_declaration
  | Env_modtype of summary * Ident.t * Types.modtype_declaration
  | Env_class of summary * Ident.t * Types.class_declaration
  | Env_cltype of summary * Ident.t * Types.class_type_declaration
  | Env_open of summary * Path.t
  | Env_functor_arg of summary * Ident.t
  | Env_constraints of summary * Types.type_declaration Path.Map.t
  | Env_copy_types of summary
  | Env_persistent of summary * Ident.t
  | Env_value_unbound of summary * string * value_unbound_reason
  | Env_module_unbound of summary * string * module_unbound_reason
type address = Aident of Ident.t | Adot of address * int
type t
val empty : t
val initial : t
val diff : t -> t -> Ident.t list
type type_descr_kind =
    (Types.label_description, Types.constructor_description) Types.type_kind
type type_descriptions = type_descr_kind
type iter_cont
val iter_types :
  (Path.t -> Path.t * Types.type_declaration -> unit) -> t -> iter_cont
val run_iter_cont : iter_cont list -> (Path.t * iter_cont) list
val same_types : t -> t -> bool
val used_persistent : unit -> Misc.Stdlib.String.Set.t
val find_shadowed_types : Path.t -> t -> Path.t list
val without_cmis : ('a -> 'b) -> 'a -> 'b
val find_value : Path.t -> t -> Types.value_description
val find_type : Path.t -> t -> Types.type_declaration
val find_type_descrs : Path.t -> t -> type_descriptions
val find_module : Path.t -> t -> Types.module_declaration
val find_modtype : Path.t -> t -> Types.modtype_declaration
val find_class : Path.t -> t -> Types.class_declaration
val find_cltype : Path.t -> t -> Types.class_type_declaration
val find_strengthened_module :
  aliasable:bool -> Path.t -> t -> Types.module_type
val find_ident_constructor : Ident.t -> t -> Types.constructor_description
val find_ident_label : Ident.t -> t -> Types.label_description
val find_type_expansion :
  Path.t -> t -> Types.type_expr list * Types.type_expr * int
val find_type_expansion_opt :
  Path.t -> t -> Types.type_expr list * Types.type_expr * int
val find_modtype_expansion : Path.t -> t -> Types.module_type
val find_modtype_expansion_lazy : Path.t -> t -> Subst.Lazy.modtype
val find_hash_type : Path.t -> t -> Types.type_declaration
val find_value_address : Path.t -> t -> address
val find_module_address : Path.t -> t -> address
val find_class_address : Path.t -> t -> address
val find_constructor_address : Path.t -> t -> address
val shape_of_path :
  namespace:Shape.Sig_component_kind.t -> t -> Path.t -> Shape.t
val add_functor_arg : Ident.t -> t -> t
val is_functor_arg : Path.t -> t -> bool
val normalize_module_path : Location.t option -> t -> Path.t -> Path.t
val normalize_type_path : Location.t option -> t -> Path.t -> Path.t
val normalize_value_path : Location.t option -> t -> Path.t -> Path.t
val normalize_modtype_path : t -> Path.t -> Path.t
val reset_required_globals : unit -> unit
val get_required_globals : unit -> Ident.t list
val add_required_global : Ident.t -> unit
val has_local_constraints : t -> bool
val mark_value_used : Types.Uid.t -> unit
val mark_module_used : Types.Uid.t -> unit
val mark_type_used : Types.Uid.t -> unit
type constructor_usage = Positive | Pattern | Exported_private | Exported
val mark_constructor_used :
  constructor_usage -> Types.constructor_declaration -> unit
val mark_extension_used :
  constructor_usage -> Types.extension_constructor -> unit
type label_usage =
    Projection
  | Mutation
  | Construct
  | Exported_private
  | Exported
val mark_label_used : label_usage -> Types.label_declaration -> unit
type unbound_value_hint = No_hint | Missing_rec of Location.t
type lookup_error =
    Unbound_value of Longident.t * unbound_value_hint
  | Unbound_type of Longident.t
  | Unbound_constructor of Longident.t
  | Unbound_label of Longident.t
  | Unbound_module of Longident.t
  | Unbound_class of Longident.t
  | Unbound_modtype of Longident.t
  | Unbound_cltype of Longident.t
  | Unbound_instance_variable of string
  | Not_an_instance_variable of string
  | Masked_instance_variable of Longident.t
  | Masked_self_variable of Longident.t
  | Masked_ancestor_variable of Longident.t
  | Structure_used_as_functor of Longident.t
  | Abstract_used_as_functor of Longident.t
  | Functor_used_as_structure of Longident.t
  | Abstract_used_as_structure of Longident.t
  | Generative_used_as_applicative of Longident.t
  | Illegal_reference_to_recursive_module
  | Cannot_scrape_alias of Longident.t * Path.t
val lookup_error : Location.t -> t -> lookup_error -> 'a
val lookup_value :
  ?use:bool ->
  loc:Location.t -> Longident.t -> t -> Path.t * Types.value_description
val lookup_type :
  ?use:bool ->
  loc:Location.t -> Longident.t -> t -> Path.t * Types.type_declaration
val lookup_module :
  ?use:bool ->
  loc:Location.t -> Longident.t -> t -> Path.t * Types.module_declaration
val lookup_modtype :
  ?use:bool ->
  loc:Location.t -> Longident.t -> t -> Path.t * Types.modtype_declaration
val lookup_class :
  ?use:bool ->
  loc:Location.t -> Longident.t -> t -> Path.t * Types.class_declaration
val lookup_cltype :
  ?use:bool ->
  loc:Location.t -> Longident.t -> t -> Path.t * Types.class_type_declaration
val lookup_module_path :
  ?use:bool -> loc:Location.t -> load:bool -> Longident.t -> t -> Path.t
val lookup_modtype_path :
  ?use:bool -> loc:Location.t -> Longident.t -> t -> Path.t
val lookup_constructor :
  ?use:bool ->
  loc:Location.t ->
  constructor_usage -> Longident.t -> t -> Types.constructor_description
val lookup_all_constructors :
  ?use:bool ->
  loc:Location.t ->
  constructor_usage ->
  Longident.t ->
  t ->
  ((Types.constructor_description * (unit -> unit)) list,
   Location.t * t * lookup_error)
  result
val lookup_all_constructors_from_type :
  ?use:bool ->
  loc:Location.t ->
  constructor_usage ->
  Path.t -> t -> (Types.constructor_description * (unit -> unit)) list
val lookup_label :
  ?use:bool ->
  loc:Location.t ->
  label_usage -> Longident.t -> t -> Types.label_description
val lookup_all_labels :
  ?use:bool ->
  loc:Location.t ->
  label_usage ->
  Longident.t ->
  t ->
  ((Types.label_description * (unit -> unit)) list,
   Location.t * t * lookup_error)
  result
val lookup_all_labels_from_type :
  ?use:bool ->
  loc:Location.t ->
  label_usage ->
  Path.t -> t -> (Types.label_description * (unit -> unit)) list
val lookup_instance_variable :
  ?use:bool ->
  loc:Location.t ->
  string -> t -> Path.t * Asttypes.mutable_flag * string * Types.type_expr
val find_value_by_name : Longident.t -> t -> Path.t * Types.value_description
val find_type_by_name : Longident.t -> t -> Path.t * Types.type_declaration
val find_module_by_name :
  Longident.t -> t -> Path.t * Types.module_declaration
val find_modtype_by_name :
  Longident.t -> t -> Path.t * Types.modtype_declaration
val find_class_by_name : Longident.t -> t -> Path.t * Types.class_declaration
val find_cltype_by_name :
  Longident.t -> t -> Path.t * Types.class_type_declaration
val find_constructor_by_name :
  Longident.t -> t -> Types.constructor_description
val find_label_by_name : Longident.t -> t -> Types.label_description
val find_value_index : Ident.t -> t -> int option
val find_type_index : Ident.t -> t -> int option
val find_module_index : Ident.t -> t -> int option
val find_modtype_index : Ident.t -> t -> int option
val find_class_index : Ident.t -> t -> int option
val find_cltype_index : Ident.t -> t -> int option
val bound_value : string -> t -> bool
val bound_module : string -> t -> bool
val bound_type : string -> t -> bool
val bound_modtype : string -> t -> bool
val bound_class : string -> t -> bool
val bound_cltype : string -> t -> bool
val make_copy_of_types : t -> t -> t
val add_value :
  ?check:(string -> Warnings.t) ->
  Ident.t -> Types.value_description -> t -> t
val add_type : check:bool -> Ident.t -> Types.type_declaration -> t -> t
val add_extension :
  check:bool ->
  rebind:bool -> Ident.t -> Types.extension_constructor -> t -> t
val add_module :
  ?arg:bool ->
  ?shape:Shape.t ->
  Ident.t -> Types.module_presence -> Types.module_type -> t -> t
val add_module_lazy :
  update_summary:bool ->
  Ident.t -> Types.module_presence -> Subst.Lazy.modtype -> t -> t
val add_module_declaration :
  ?arg:bool ->
  ?shape:Shape.t ->
  check:bool ->
  Ident.t -> Types.module_presence -> Types.module_declaration -> t -> t
val add_module_declaration_lazy :
  update_summary:bool ->
  Ident.t -> Types.module_presence -> Subst.Lazy.module_decl -> t -> t
val add_modtype : Ident.t -> Types.modtype_declaration -> t -> t
val add_modtype_lazy :
  update_summary:bool -> Ident.t -> Subst.Lazy.modtype_declaration -> t -> t
val add_class : Ident.t -> Types.class_declaration -> t -> t
val add_cltype : Ident.t -> Types.class_type_declaration -> t -> t
val add_local_type : Path.t -> Types.type_declaration -> t -> t
val add_persistent_structure : Ident.t -> t -> t
val persistent_structures_of_dir :
  Load_path.Dir.t -> Misc.Stdlib.String.Set.t
val filter_non_loaded_persistent : (Ident.t -> bool) -> t -> t
val add_signature : Types.signature -> t -> t
val open_signature :
  ?used_slot:bool ref ->
  ?loc:Location.t ->
  ?toplevel:bool ->
  Asttypes.override_flag ->
  Path.t -> t -> (t, [ `Functor | `Not_found ]) result
val open_pers_signature : string -> t -> (t, [ `Not_found ]) result
val remove_last_open : Path.t -> t -> t option
val enter_value :
  ?check:(string -> Warnings.t) ->
  string -> Types.value_description -> t -> Ident.t * t
val enter_type :
  scope:int -> string -> Types.type_declaration -> t -> Ident.t * t
val enter_extension :
  scope:int ->
  rebind:bool -> string -> Types.extension_constructor -> t -> Ident.t * t
val enter_module :
  scope:int ->
  ?arg:bool ->
  string -> Types.module_presence -> Types.module_type -> t -> Ident.t * t
val enter_module_declaration :
  scope:int ->
  ?arg:bool ->
  ?shape:Shape.t ->
  string ->
  Types.module_presence -> Types.module_declaration -> t -> Ident.t * t
val enter_modtype :
  scope:int -> string -> Types.modtype_declaration -> t -> Ident.t * t
val enter_class :
  scope:int -> string -> Types.class_declaration -> t -> Ident.t * t
val enter_cltype :
  scope:int -> string -> Types.class_type_declaration -> t -> Ident.t * t
val enter_signature :
  ?mod_shape:Shape.t ->
  scope:int -> Types.signature -> t -> Types.signature * t
val enter_signature_and_shape :
  scope:int ->
  parent_shape:Shape.Map.t ->
  Shape.t -> Types.signature -> t -> Types.signature * Shape.Map.t * t
val enter_unbound_value : string -> value_unbound_reason -> t -> t
val enter_unbound_module : string -> module_unbound_reason -> t -> t
val reset_cache : unit -> unit
val reset_cache_toplevel : unit -> unit
val set_unit_name : string -> unit
val get_unit_name : unit -> string
val read_signature : Misc.modname -> Misc.filepath -> Types.signature
val save_signature :
  alerts:Misc.alerts ->
  Types.signature -> Misc.modname -> Misc.filepath -> Cmi_format.cmi_infos
val save_signature_with_imports :
  alerts:Misc.alerts ->
  Types.signature ->
  Misc.modname -> Misc.filepath -> Misc.crcs -> Cmi_format.cmi_infos
val crc_of_unit : Misc.modname -> Digest.t
val imports : unit -> Misc.crcs
val import_crcs : source:string -> Misc.crcs -> unit
val is_imported_opaque : Misc.modname -> bool
val register_import_as_opaque : Misc.modname -> unit
val summary : t -> summary
val keep_only_summary : t -> t
val env_of_only_summary : (summary -> Subst.t -> t) -> t -> t
type error =
    Missing_module of Location.t * Path.t * Path.t
  | Illegal_value_name of Location.t * string
  | Lookup_error of Location.t * t * lookup_error
exception Error of error
val report_error : Format.formatter -> error -> unit
val report_lookup_error :
  Location.t -> t -> Format.formatter -> lookup_error -> unit
val in_signature : bool -> t -> t
val is_in_signature : t -> bool
val set_value_used_callback :
  Types.value_description -> (unit -> unit) -> unit
val set_type_used_callback :
  Types.type_declaration -> ((unit -> unit) -> unit) -> unit
val check_functor_application :
  (errors:bool ->
   loc:Location.t ->
   lid_whole_app:Longident.t ->
   f0_path:Path.t ->
   args:(Path.t * Types.module_type) list ->
   arg_path:Path.t ->
   arg_mty:Types.module_type -> param_mty:Types.module_type -> t -> unit)
  ref
val check_well_formed_module :
  (t -> Location.t -> string -> Types.module_type -> unit) ref
val add_delayed_check_forward : ((unit -> unit) -> unit) ref
val strengthen :
  (aliasable:bool -> t -> Subst.Lazy.modtype -> Path.t -> Subst.Lazy.modtype)
  ref
val same_constr : (t -> Types.type_expr -> Types.type_expr -> bool) ref
val print_longident : (Format.formatter -> Longident.t -> unit) ref
val print_path : (Format.formatter -> Path.t -> unit) ref
val fold_values :
  (string -> Path.t -> Types.value_description -> 'a -> 'a) ->
  Longident.t option -> t -> 'a -> 'a
val fold_types :
  (string -> Path.t -> Types.type_declaration -> 'a -> 'a) ->
  Longident.t option -> t -> 'a -> 'a
val fold_constructors :
  (Types.constructor_description -> 'a -> 'a) ->
  Longident.t option -> t -> 'a -> 'a
val fold_labels :
  (Types.label_description -> 'a -> 'a) ->
  Longident.t option -> t -> 'a -> 'a
val fold_modules :
  (string -> Path.t -> Types.module_declaration -> 'a -> 'a) ->
  Longident.t option -> t -> 'a -> 'a
val fold_modtypes :
  (string -> Path.t -> Types.modtype_declaration -> 'a -> 'a) ->
  Longident.t option -> t -> 'a -> 'a
val fold_classes :
  (string -> Path.t -> Types.class_declaration -> 'a -> 'a) ->
  Longident.t option -> t -> 'a -> 'a
val fold_cltypes :
  (string -> Path.t -> Types.class_type_declaration -> 'a -> 'a) ->
  Longident.t option -> t -> 'a -> 'a
val scrape_alias : t -> Types.module_type -> Types.module_type
val check_value_name : string -> Location.t -> unit
("DEBUG:rule", [(("register_uid", 1566), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Types")), "Uid"), "t"), 0, (0)), 100000000, 0, -1286), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -1285), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1284), 0), 100000000, 0, -1283), 0), 100000000, 0, -1282), 0, (("typing/env.mli", 21, 1129, 1129), ("typing/env.mli", 21, 1129, 1175), 0), 0, Tag1 ("Env", 2)), 0); (("get_uid_to_loc_tbl", 1567), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1281), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Types")), "Uid"), "Tbl"), "t"), [(Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -1280)], (0)), 100000000, 0, -1279), 0), 100000000, 0, -1278), 0, (("typing/env.mli", 23, 1177, 1177), ("typing/env.mli", 23, 1177, 1236), 0), 0, Tag1 ("Env", 4)), 0); Tag1 (("value_unbound_reason", 1568), (0, 0, Tag1 ([(("Val_unbound_instance_variable", 603), (0), 0, (("typing/env.mli", 26, 1266, 1268), ("typing/env.mli", 26, 1266, 1299), 0), 0, Tag1 ("Env", 6)); (("Val_unbound_self", 604), (0), 0, (("typing/env.mli", 27, 1300, 1302), ("typing/env.mli", 27, 1300, 1320), 0), 0, Tag1 ("Env", 7)); (("Val_unbound_ancestor", 605), (0), 0, (("typing/env.mli", 28, 1321, 1323), ("typing/env.mli", 28, 1321, 1345), 0), 0, Tag1 ("Env", 8)); (("Val_unbound_ghost_recursive", 606), ([(Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -1277)]), 0, (("typing/env.mli", 29, 1346, 1348), ("typing/env.mli", 29, 1346, 1391), 0), 0, Tag1 ("Env", 9))], 0), 1, 0, 0, 0, 0, 0, (("typing/env.mli", 25, 1238, 1238), ("typing/env.mli", 29, 1346, 1391), 0), 0, 0, 0, Tag1 ("Env", 5)), 1, 0); Tag1 (("module_unbound_reason", 1569), (0, 0, Tag1 ([(("Mod_unbound_illegal_recursion", 635), (0), 0, (("typing/env.mli", 32, 1422, 1424), ("typing/env.mli", 32, 1422, 1455), 0), 0, Tag1 ("Env", 11))], 0), 1, 0, 0, 0, 0, 0, (("typing/env.mli", 31, 1393, 1393), ("typing/env.mli", 32, 1422, 1455), 0), 0, 1, 0, Tag1 ("Env", 10)), 1, 0); Tag1 (("summary", 1570), (0, 0, Tag1 ([(("Env_empty", 637), (0), 0, (("typing/env.mli", 35, 1472, 1476), ("typing/env.mli", 35, 1472, 1485), 0), 0, Tag1 ("Env", 13)); (("Env_value", 638), ([(Tag3 ((("summary", 1570)), 0, (0)), 100000000, 0, -1239); (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -1240); (Tag3 (Tag1 ((Tag2 ("Types")), "value_description"), 0, (0)), 100000000, 0, -1241)]), 0, (("typing/env.mli", 36, 1486, 1488), ("typing/env.mli", 36, 1486, 1540), 0), 0, Tag1 ("Env", 14)); (("Env_type", 678), ([(Tag3 ((("summary", 1570)), 0, (0)), 100000000, 0, -1242); (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -1243); (Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -1244)]), 0, (("typing/env.mli", 37, 1541, 1543), ("typing/env.mli", 37, 1541, 1593), 0), 0, Tag1 ("Env", 15)); (("Env_extension", 679), ([(Tag3 ((("summary", 1570)), 0, (0)), 100000000, 0, -1245); (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -1246); (Tag3 (Tag1 ((Tag2 ("Types")), "extension_constructor"), 0, (0)), 100000000, 0, -1247)]), 0, (("typing/env.mli", 38, 1594, 1596), ("typing/env.mli", 38, 1594, 1656), 0), 0, Tag1 ("Env", 16)); (("Env_module", 680), ([(Tag3 ((("summary", 1570)), 0, (0)), 100000000, 0, -1248); (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -1249); (Tag3 (Tag1 ((Tag2 ("Types")), "module_presence"), 0, (0)), 100000000, 0, -1250); (Tag3 (Tag1 ((Tag2 ("Types")), "module_declaration"), 0, (0)), 100000000, 0, -1251)]), 0, (("typing/env.mli", 39, 1657, 1659), ("typing/env.mli", 39, 1657, 1731), 0), 0, Tag1 ("Env", 17)); (("Env_modtype", 681), ([(Tag3 ((("summary", 1570)), 0, (0)), 100000000, 0, -1252); (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -1253); (Tag3 (Tag1 ((Tag2 ("Types")), "modtype_declaration"), 0, (0)), 100000000, 0, -1254)]), 0, (("typing/env.mli", 40, 1732, 1734), ("typing/env.mli", 40, 1732, 1790), 0), 0, Tag1 ("Env", 18)); (("Env_class", 682), ([(Tag3 ((("summary", 1570)), 0, (0)), 100000000, 0, -1255); (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -1256); (Tag3 (Tag1 ((Tag2 ("Types")), "class_declaration"), 0, (0)), 100000000, 0, -1257)]), 0, (("typing/env.mli", 41, 1791, 1793), ("typing/env.mli", 41, 1791, 1845), 0), 0, Tag1 ("Env", 19)); (("Env_cltype", 683), ([(Tag3 ((("summary", 1570)), 0, (0)), 100000000, 0, -1258); (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -1259); (Tag3 (Tag1 ((Tag2 ("Types")), "class_type_declaration"), 0, (0)), 100000000, 0, -1260)]), 0, (("typing/env.mli", 42, 1846, 1848), ("typing/env.mli", 42, 1846, 1906), 0), 0, Tag1 ("Env", 20)); (("Env_open", 684), ([(Tag3 ((("summary", 1570)), 0, (0)), 100000000, 0, -1261); (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -1262)]), 0, (("typing/env.mli", 43, 1907, 1909), ("typing/env.mli", 43, 1907, 1939), 0), 0, Tag1 ("Env", 21)); (("Env_functor_arg", 702), ([(Tag3 ((("summary", 1570)), 0, (0)), 100000000, 0, -1263); (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -1264)]), 0, (("typing/env.mli", 46, 2091, 2093), ("typing/env.mli", 46, 2091, 2131), 0), 0, Tag1 ("Env", 22)); (("Env_constraints", 703), ([(Tag3 ((("summary", 1570)), 0, (0)), 100000000, 0, -1265); (Tag3 (Tag1 (Tag1 ((Tag2 ("Path")), "Map"), "t"), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -1267)], (0)), 100000000, 0, -1266)]), 0, (("typing/env.mli", 47, 2132, 2134), ("typing/env.mli", 47, 2132, 2192), 0), 0, Tag1 ("Env", 23)); (("Env_copy_types", 749), ([(Tag3 ((("summary", 1570)), 0, (0)), 100000000, 0, -1268)]), 0, (("typing/env.mli", 48, 2193, 2195), ("typing/env.mli", 48, 2193, 2222), 0), 0, Tag1 ("Env", 24)); (("Env_persistent", 750), ([(Tag3 ((("summary", 1570)), 0, (0)), 100000000, 0, -1269); (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -1270)]), 0, (("typing/env.mli", 49, 2223, 2225), ("typing/env.mli", 49, 2223, 2262), 0), 0, Tag1 ("Env", 25)); (("Env_value_unbound", 751), ([(Tag3 ((("summary", 1570)), 0, (0)), 100000000, 0, -1271); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1272); (Tag3 ((("value_unbound_reason", 1568)), 0, (0)), 100000000, 0, -1273)]), 0, (("typing/env.mli", 50, 2263, 2265), ("typing/env.mli", 50, 2263, 2327), 0), 0, Tag1 ("Env", 26)); (("Env_module_unbound", 752), ([(Tag3 ((("summary", 1570)), 0, (0)), 100000000, 0, -1274); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1275); (Tag3 ((("module_unbound_reason", 1569)), 0, (0)), 100000000, 0, -1276)]), 0, (("typing/env.mli", 51, 2328, 2330), ("typing/env.mli", 51, 2328, 2394), 0), 0, Tag1 ("Env", 27))], 0), 1, 0, 0, 0, 0, 0, (("typing/env.mli", 34, 1457, 1457), ("typing/env.mli", 51, 2328, 2394), 0), 0, 0, 0, Tag1 ("Env", 12)), 1, 0); Tag1 (("address", 1571), (0, 0, Tag1 ([(("Aident", 754), ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -1236)]), 0, (("typing/env.mli", 54, 2411, 2413), ("typing/env.mli", 54, 2411, 2432), 0), 0, Tag1 ("Env", 29)); (("Adot", 755), ([(Tag3 ((("address", 1571)), 0, (0)), 100000000, 0, -1237); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1238)]), 0, (("typing/env.mli", 55, 2433, 2435), ("typing/env.mli", 55, 2433, 2458), 0), 0, Tag1 ("Env", 30))], 0), 1, 0, 0, 0, 0, 0, (("typing/env.mli", 53, 2396, 2396), ("typing/env.mli", 55, 2433, 2458), 0), 0, 0, 0, Tag1 ("Env", 28)), 1, 0); Tag1 (("t", 1572), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("typing/env.mli", 57, 2460, 2460), ("typing/env.mli", 57, 2460, 2466), 0), 0, 0, 0, Tag1 ("Env", 31)), 1, 0); (("empty", 1573), ((Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -1235), 0, (("typing/env.mli", 59, 2468, 2468), ("typing/env.mli", 59, 2468, 2480), 0), 0, Tag1 ("Env", 32)), 0); (("initial", 1574), ((Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -1234), 0, (("typing/env.mli", 60, 2481, 2481), ("typing/env.mli", 60, 2481, 2495), 0), 0, Tag1 ("Env", 33)), 0); (("diff", 1575), ((Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -1233), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -1232), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -1231)], (0)), 100000000, 0, -1230), 0), 100000000, 0, -1229), 0), 100000000, 0, -1228), 0, (("typing/env.mli", 61, 2496, 2496), ("typing/env.mli", 61, 2496, 2528), 0), 0, Tag1 ("Env", 34)), 0); Tag1 (("type_descr_kind", 1576), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Types")), "type_kind"), [(Tag3 (Tag1 ((Tag2 ("Types")), "label_description"), 0, (0)), 100000000, 0, -1226); (Tag3 (Tag1 ((Tag2 ("Types")), "constructor_description"), 0, (0)), 100000000, 0, -1227)], (0)), 100000000, 0, -1225)), 0, 0, 0, 0, (("typing/env.mli", 63, 2530, 2530), ("typing/env.mli", 64, 2553, 2609), 0), 0, 0, 0, Tag1 ("Env", 35)), 1, 0); Tag1 (("type_descriptions", 1577), (0, 0, 0, 1, ((Tag3 ((("type_descr_kind", 1576)), 0, (0)), 100000000, 0, -1224)), 0, 0, 0, 0, (("typing/env.mli", 67, 2643, 2643), ("typing/env.mli", 67, 2643, 2683), 0), 0, 0, 0, Tag1 ("Env", 36)), 1, 0); Tag1 (("iter_cont", 1578), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("typing/env.mli", 70, 2707, 2707), ("typing/env.mli", 70, 2707, 2721), 0), 0, 0, 0, Tag1 ("Env", 37)), 1, 0); (("iter_types", 1579), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -1223), (Tag1 (0, (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -1221); (Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -1222)]), 100000000, 0, -1220), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1219), 0), 100000000, 0, -1218), 0), 100000000, 0, -1217), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -1216), (Tag3 ((("iter_cont", 1578)), 0, (0)), 100000000, 0, -1215), 0), 100000000, 0, -1214), 0), 100000000, 0, -1213), 0, (("typing/env.mli", 71, 2722, 2722), ("typing/env.mli", 73, 2791, 2809), 0), 0, Tag1 ("Env", 38)), 0); (("run_iter_cont", 1580), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("iter_cont", 1578)), 0, (0)), 100000000, 0, -1212)], (0)), 100000000, 0, -1211), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -1209); (Tag3 ((("iter_cont", 1578)), 0, (0)), 100000000, 0, -1210)]), 100000000, 0, -1208)], (0)), 100000000, 0, -1207), 0), 100000000, 0, -1206), 0, (("typing/env.mli", 74, 2810, 2810), ("typing/env.mli", 74, 2810, 2872), 0), 0, Tag1 ("Env", 39)), 0); (("same_types", 1581), ((Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -1205), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -1204), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1203), 0), 100000000, 0, -1202), 0), 100000000, 0, -1201), 0, (("typing/env.mli", 75, 2873, 2873), ("typing/env.mli", 75, 2873, 2903), 0), 0, Tag1 ("Env", 40)), 0); (("used_persistent", 1582), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1200), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Misc")), "Stdlib"), "String"), "Set"), "t"), 0, (0)), 100000000, 0, -1199), 0), 100000000, 0, -1198), 0, (("typing/env.mli", 76, 2904, 2904), ("typing/env.mli", 76, 2904, 2952), 0), 0, Tag1 ("Env", 41)), 0); (("find_shadowed_types", 1583), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -1197), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -1196), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -1195)], (0)), 100000000, 0, -1194), 0), 100000000, 0, -1193), 0), 100000000, 0, -1192), 0, (("typing/env.mli", 77, 2953, 2953), ("typing/env.mli", 77, 2953, 3004), 0), 0, Tag1 ("Env", 42)), 0); (("without_cmis", 1584), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -1190), ((("b")), 100000000, 0, -1189), 0), 100000000, 0, -1191), (Tag1 (0, ((("a")), 100000000, 0, -1190), ((("b")), 100000000, 0, -1189), 0), 100000000, 0, -1188), 0), 100000000, 0, -1187), 0, (("typing/env.mli", 78, 3005, 3005), ("typing/env.mli", 78, 3005, 3045), 0), 0, Tag1 ("Env", 43)), 0); (("find_value", 1585), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -1186), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -1185), (Tag3 (Tag1 ((Tag2 ("Types")), "value_description"), 0, (0)), 100000000, 0, -1184), 0), 100000000, 0, -1183), 0), 100000000, 0, -1182), 0, (("typing/env.mli", 84, 3175, 3175), ("typing/env.mli", 84, 3175, 3223), 0), 0, Tag1 ("Env", 44)), 0); (("find_type", 1586), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -1181), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -1180), (Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -1179), 0), 100000000, 0, -1178), 0), 100000000, 0, -1177), 0, (("typing/env.mli", 85, 3224, 3224), ("typing/env.mli", 85, 3224, 3270), 0), 0, Tag1 ("Env", 45)), 0); (("find_type_descrs", 1587), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -1176), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -1175), (Tag3 ((("type_descriptions", 1577)), 0, (0)), 100000000, 0, -1174), 0), 100000000, 0, -1173), 0), 100000000, 0, -1172), 0, (("typing/env.mli", 86, 3271, 3271), ("typing/env.mli", 86, 3271, 3325), 0), 0, Tag1 ("Env", 46)), 0); (("find_module", 1588), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -1171), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -1170), (Tag3 (Tag1 ((Tag2 ("Types")), "module_declaration"), 0, (0)), 100000000, 0, -1169), 0), 100000000, 0, -1168), 0), 100000000, 0, -1167), 0, (("typing/env.mli", 87, 3326, 3326), ("typing/env.mli", 87, 3326, 3376), 0), 0, Tag1 ("Env", 47)), 0); (("find_modtype", 1589), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -1166), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -1165), (Tag3 (Tag1 ((Tag2 ("Types")), "modtype_declaration"), 0, (0)), 100000000, 0, -1164), 0), 100000000, 0, -1163), 0), 100000000, 0, -1162), 0, (("typing/env.mli", 88, 3377, 3377), ("typing/env.mli", 88, 3377, 3429), 0), 0, Tag1 ("Env", 48)), 0); (("find_class", 1590), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -1161), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -1160), (Tag3 (Tag1 ((Tag2 ("Types")), "class_declaration"), 0, (0)), 100000000, 0, -1159), 0), 100000000, 0, -1158), 0), 100000000, 0, -1157), 0, (("typing/env.mli", 89, 3430, 3430), ("typing/env.mli", 89, 3430, 3478), 0), 0, Tag1 ("Env", 49)), 0); (("find_cltype", 1591), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -1156), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -1155), (Tag3 (Tag1 ((Tag2 ("Types")), "class_type_declaration"), 0, (0)), 100000000, 0, -1154), 0), 100000000, 0, -1153), 0), 100000000, 0, -1152), 0, (("typing/env.mli", 90, 3479, 3479), ("typing/env.mli", 90, 3479, 3533), 0), 0, Tag1 ("Env", 50)), 0); (("find_strengthened_module", 1592), ((Tag1 (("aliasable"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1151), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -1150), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -1149), (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -1148), 0), 100000000, 0, -1147), 0), 100000000, 0, -1146), 0), 100000000, 0, -1145), 0, (("typing/env.mli", 92, 3535, 3535), ("typing/env.mli", 93, 3565, 3611), 0), 0, Tag1 ("Env", 51)), 0); (("find_ident_constructor", 1593), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -1144), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -1143), (Tag3 (Tag1 ((Tag2 ("Types")), "constructor_description"), 0, (0)), 100000000, 0, -1142), 0), 100000000, 0, -1141), 0), 100000000, 0, -1140), 0, (("typing/env.mli", 95, 3613, 3613), ("typing/env.mli", 95, 3613, 3680), 0), 0, Tag1 ("Env", 52)), 0); (("find_ident_label", 1594), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -1139), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -1138), (Tag3 (Tag1 ((Tag2 ("Types")), "label_description"), 0, (0)), 100000000, 0, -1137), 0), 100000000, 0, -1136), 0), 100000000, 0, -1135), 0, (("typing/env.mli", 96, 3681, 3681), ("typing/env.mli", 96, 3681, 3736), 0), 0, Tag1 ("Env", 53)), 0); (("find_type_expansion", 1595), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -1134), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -1133), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -1130)], (0)), 100000000, 0, -1129); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -1131); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1132)]), 100000000, 0, -1128), 0), 100000000, 0, -1127), 0), 100000000, 0, -1126), 0, (("typing/env.mli", 98, 3738, 3738), ("typing/env.mli", 99, 3763, 3814), 0), 0, Tag1 ("Env", 54)), 0); (("find_type_expansion_opt", 1596), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -1125), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -1124), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -1121)], (0)), 100000000, 0, -1120); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -1122); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1123)]), 100000000, 0, -1119), 0), 100000000, 0, -1118), 0), 100000000, 0, -1117), 0, (("typing/env.mli", 100, 3815, 3815), ("typing/env.mli", 101, 3844, 3895), 0), 0, Tag1 ("Env", 55)), 0); (("find_modtype_expansion", 1597), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -1116), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -1115), (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -1114), 0), 100000000, 0, -1113), 0), 100000000, 0, -1112), 0, (("typing/env.mli", 104, 4018, 4018), ("typing/env.mli", 104, 4018, 4072), 0), 0, Tag1 ("Env", 56)), 0); (("find_modtype_expansion_lazy", 1598), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -1111), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -1110), (Tag3 (Tag1 (Tag1 ((Tag2 ("Subst")), "Lazy"), "modtype"), 0, (0)), 100000000, 0, -1109), 0), 100000000, 0, -1108), 0), 100000000, 0, -1107), 0, (("typing/env.mli", 105, 4073, 4073), ("typing/env.mli", 105, 4073, 4139), 0), 0, Tag1 ("Env", 57)), 0); (("find_hash_type", 1599), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -1106), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -1105), (Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -1104), 0), 100000000, 0, -1103), 0), 100000000, 0, -1102), 0, (("typing/env.mli", 107, 4141, 4141), ("typing/env.mli", 107, 4141, 4192), 0), 0, Tag1 ("Env", 58)), 0); (("find_value_address", 1600), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -1101), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -1100), (Tag3 ((("address", 1571)), 0, (0)), 100000000, 0, -1099), 0), 100000000, 0, -1098), 0), 100000000, 0, -1097), 0, (("typing/env.mli", 110, 4242, 4242), ("typing/env.mli", 110, 4242, 4288), 0), 0, Tag1 ("Env", 59)), 0); (("find_module_address", 1601), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -1096), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -1095), (Tag3 ((("address", 1571)), 0, (0)), 100000000, 0, -1094), 0), 100000000, 0, -1093), 0), 100000000, 0, -1092), 0, (("typing/env.mli", 111, 4289, 4289), ("typing/env.mli", 111, 4289, 4336), 0), 0, Tag1 ("Env", 60)), 0); (("find_class_address", 1602), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -1091), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -1090), (Tag3 ((("address", 1571)), 0, (0)), 100000000, 0, -1089), 0), 100000000, 0, -1088), 0), 100000000, 0, -1087), 0, (("typing/env.mli", 112, 4337, 4337), ("typing/env.mli", 112, 4337, 4383), 0), 0, Tag1 ("Env", 61)), 0); (("find_constructor_address", 1603), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -1086), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -1085), (Tag3 ((("address", 1571)), 0, (0)), 100000000, 0, -1084), 0), 100000000, 0, -1083), 0), 100000000, 0, -1082), 0, (("typing/env.mli", 113, 4384, 4384), ("typing/env.mli", 113, 4384, 4436), 0), 0, Tag1 ("Env", 62)), 0); (("shape_of_path", 1604), ((Tag1 (("namespace"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Shape")), "Sig_component_kind"), "t"), 0, (0)), 100000000, 0, -1081), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -1080), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -1079), (Tag3 (Tag1 ((Tag2 ("Shape")), "t"), 0, (0)), 100000000, 0, -1078), 0), 100000000, 0, -1077), 0), 100000000, 0, -1076), 0), 100000000, 0, -1075), 0, (("typing/env.mli", 115, 4438, 4438), ("typing/env.mli", 116, 4457, 4521), 0), 0, Tag1 ("Env", 63)), 0); (("add_functor_arg", 1605), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -1074), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -1073), (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -1072), 0), 100000000, 0, -1071), 0), 100000000, 0, -1070), 0, (("typing/env.mli", 118, 4523, 4523), ("typing/env.mli", 118, 4523, 4561), 0), 0, Tag1 ("Env", 64)), 0); (("is_functor_arg", 1606), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -1069), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -1068), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1067), 0), 100000000, 0, -1066), 0), 100000000, 0, -1065), 0, (("typing/env.mli", 119, 4562, 4562), ("typing/env.mli", 119, 4562, 4601), 0), 0, Tag1 ("Env", 65)), 0); (("normalize_module_path", 1607), ((Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -1064)], (0)), 100000000, 0, -1063), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -1062), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -1061), (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -1060), 0), 100000000, 0, -1059), 0), 100000000, 0, -1058), 0), 100000000, 0, -1057), 0, (("typing/env.mli", 121, 4603, 4603), ("typing/env.mli", 121, 4603, 4672), 0), 0, Tag1 ("Env", 66)), 0); (("normalize_type_path", 1608), ((Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -1056)], (0)), 100000000, 0, -1055), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -1054), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -1053), (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -1052), 0), 100000000, 0, -1051), 0), 100000000, 0, -1050), 0), 100000000, 0, -1049), 0, (("typing/env.mli", 127, 4872, 4872), ("typing/env.mli", 127, 4872, 4939), 0), 0, Tag1 ("Env", 67)), 0); (("normalize_value_path", 1609), ((Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -1048)], (0)), 100000000, 0, -1047), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -1046), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -1045), (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -1044), 0), 100000000, 0, -1043), 0), 100000000, 0, -1042), 0), 100000000, 0, -1041), 0, (("typing/env.mli", 130, 4990, 4990), ("typing/env.mli", 130, 4990, 5058), 0), 0, Tag1 ("Env", 68)), 0); (("normalize_modtype_path", 1610), ((Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -1040), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -1039), (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -1038), 0), 100000000, 0, -1037), 0), 100000000, 0, -1036), 0, (("typing/env.mli", 133, 5110, 5110), ("typing/env.mli", 133, 5110, 5159), 0), 0, Tag1 ("Env", 69)), 0); (("reset_required_globals", 1611), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1035), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1034), 0), 100000000, 0, -1033), 0, (("typing/env.mli", 136, 5196, 5196), ("typing/env.mli", 136, 5196, 5236), 0), 0, Tag1 ("Env", 70)), 0); (("get_required_globals", 1612), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1032), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -1031)], (0)), 100000000, 0, -1030), 0), 100000000, 0, -1029), 0, (("typing/env.mli", 137, 5237, 5237), ("typing/env.mli", 137, 5237, 5283), 0), 0, Tag1 ("Env", 71)), 0); (("add_required_global", 1613), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -1028), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1027), 0), 100000000, 0, -1026), 0, (("typing/env.mli", 138, 5284, 5284), ("typing/env.mli", 138, 5284, 5324), 0), 0, Tag1 ("Env", 72)), 0); (("has_local_constraints", 1614), ((Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -1025), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1024), 0), 100000000, 0, -1023), 0, (("typing/env.mli", 140, 5326, 5326), ("typing/env.mli", 140, 5326, 5362), 0), 0, Tag1 ("Env", 73)), 0); (("mark_value_used", 1615), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Types")), "Uid"), "t"), 0, (0)), 100000000, 0, -1022), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1021), 0), 100000000, 0, -1020), 0, (("typing/env.mli", 143, 5395, 5395), ("typing/env.mli", 143, 5395, 5429), 0), 0, Tag1 ("Env", 74)), 0); (("mark_module_used", 1616), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Types")), "Uid"), "t"), 0, (0)), 100000000, 0, -1019), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1018), 0), 100000000, 0, -1017), 0, (("typing/env.mli", 144, 5430, 5430), ("typing/env.mli", 144, 5430, 5465), 0), 0, Tag1 ("Env", 75)), 0); (("mark_type_used", 1617), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Types")), "Uid"), "t"), 0, (0)), 100000000, 0, -1016), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1015), 0), 100000000, 0, -1014), 0, (("typing/env.mli", 145, 5466, 5466), ("typing/env.mli", 145, 5466, 5499), 0), 0, Tag1 ("Env", 76)), 0); Tag1 (("constructor_usage", 1618), (0, 0, Tag1 ([(("Positive", 983), (0), 0, (("typing/env.mli", 147, 5501, 5526), ("typing/env.mli", 147, 5501, 5534), 0), 0, Tag1 ("Env", 78)); (("Pattern", 984), (0), 0, (("typing/env.mli", 147, 5501, 5535), ("typing/env.mli", 147, 5501, 5544), 0), 0, Tag1 ("Env", 79)); (("Exported_private", 985), (0), 0, (("typing/env.mli", 147, 5501, 5545), ("typing/env.mli", 147, 5501, 5563), 0), 0, Tag1 ("Env", 80)); (("Exported", 986), (0), 0, (("typing/env.mli", 147, 5501, 5564), ("typing/env.mli", 147, 5501, 5574), 0), 0, Tag1 ("Env", 81))], 0), 1, 0, 0, 0, 0, 0, (("typing/env.mli", 147, 5501, 5501), ("typing/env.mli", 147, 5501, 5574), 0), 0, 1, 0, Tag1 ("Env", 77)), 1, 0); (("mark_constructor_used", 1619), ((Tag1 (0, (Tag3 ((("constructor_usage", 1618)), 0, (0)), 100000000, 0, -1013), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "constructor_declaration"), 0, (0)), 100000000, 0, -1012), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1011), 0), 100000000, 0, -1010), 0), 100000000, 0, -1009), 0, (("typing/env.mli", 148, 5575, 5575), ("typing/env.mli", 149, 5602, 5658), 0), 0, Tag1 ("Env", 82)), 0); (("mark_extension_used", 1620), ((Tag1 (0, (Tag3 ((("constructor_usage", 1618)), 0, (0)), 100000000, 0, -1008), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "extension_constructor"), 0, (0)), 100000000, 0, -1007), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1006), 0), 100000000, 0, -1005), 0), 100000000, 0, -1004), 0, (("typing/env.mli", 150, 5659, 5659), ("typing/env.mli", 151, 5684, 5738), 0), 0, Tag1 ("Env", 83)), 0); Tag1 (("label_usage", 1621), (0, 0, Tag1 ([(("Projection", 990), (0), 0, (("typing/env.mli", 154, 5759, 5763), ("typing/env.mli", 154, 5759, 5773), 0), 0, Tag1 ("Env", 85)); (("Mutation", 991), (0), 0, (("typing/env.mli", 154, 5759, 5774), ("typing/env.mli", 154, 5759, 5784), 0), 0, Tag1 ("Env", 86)); (("Construct", 992), (0), 0, (("typing/env.mli", 154, 5759, 5785), ("typing/env.mli", 154, 5759, 5796), 0), 0, Tag1 ("Env", 87)); (("Exported_private", 993), (0), 0, (("typing/env.mli", 154, 5759, 5797), ("typing/env.mli", 154, 5759, 5815), 0), 0, Tag1 ("Env", 88)); (("Exported", 994), (0), 0, (("typing/env.mli", 154, 5759, 5816), ("typing/env.mli", 154, 5759, 5826), 0), 0, Tag1 ("Env", 89))], 0), 1, 0, 0, 0, 0, 0, (("typing/env.mli", 153, 5740, 5740), ("typing/env.mli", 154, 5759, 5826), 0), 0, 1, 0, Tag1 ("Env", 84)), 1, 0); (("mark_label_used", 1622), ((Tag1 (0, (Tag3 ((("label_usage", 1621)), 0, (0)), 100000000, 0, -1003), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "label_declaration"), 0, (0)), 100000000, 0, -1002), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1001), 0), 100000000, 0, -1000), 0), 100000000, 0, -999), 0, (("typing/env.mli", 155, 5827, 5827), ("typing/env.mli", 156, 5848, 5892), 0), 0, Tag1 ("Env", 90)), 0); Tag1 (("unbound_value_hint", 1623), (0, 0, Tag1 ([(("No_hint", 997), (0), 0, (("typing/env.mli", 163, 5975, 5977), ("typing/env.mli", 163, 5975, 5986), 0), 0, Tag1 ("Env", 92)); (("Missing_rec", 998), ([(Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -998)]), 0, (("typing/env.mli", 164, 5987, 5989), ("typing/env.mli", 164, 5987, 6016), 0), 0, Tag1 ("Env", 93))], 0), 1, 0, 0, 0, 0, 0, (("typing/env.mli", 162, 5949, 5949), ("typing/env.mli", 164, 5987, 6016), 0), 0, 0, 0, Tag1 ("Env", 91)), 1, 0); Tag1 (("lookup_error", 1624), (0, 0, Tag1 ([(("Unbound_value", 1000), ([(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -977); (Tag3 ((("unbound_value_hint", 1623)), 0, (0)), 100000000, 0, -978)]), 0, (("typing/env.mli", 167, 6038, 6040), ("typing/env.mli", 167, 6038, 6091), 0), 0, Tag1 ("Env", 95)); (("Unbound_type", 1006), ([(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -979)]), 0, (("typing/env.mli", 168, 6092, 6094), ("typing/env.mli", 168, 6092, 6123), 0), 0, Tag1 ("Env", 96)); (("Unbound_constructor", 1007), ([(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -980)]), 0, (("typing/env.mli", 169, 6124, 6126), ("typing/env.mli", 169, 6124, 6162), 0), 0, Tag1 ("Env", 97)); (("Unbound_label", 1008), ([(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -981)]), 0, (("typing/env.mli", 170, 6163, 6165), ("typing/env.mli", 170, 6163, 6195), 0), 0, Tag1 ("Env", 98)); (("Unbound_module", 1009), ([(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -982)]), 0, (("typing/env.mli", 171, 6196, 6198), ("typing/env.mli", 171, 6196, 6229), 0), 0, Tag1 ("Env", 99)); (("Unbound_class", 1010), ([(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -983)]), 0, (("typing/env.mli", 172, 6230, 6232), ("typing/env.mli", 172, 6230, 6262), 0), 0, Tag1 ("Env", 100)); (("Unbound_modtype", 1011), ([(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -984)]), 0, (("typing/env.mli", 173, 6263, 6265), ("typing/env.mli", 173, 6263, 6297), 0), 0, Tag1 ("Env", 101)); (("Unbound_cltype", 1012), ([(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -985)]), 0, (("typing/env.mli", 174, 6298, 6300), ("typing/env.mli", 174, 6298, 6331), 0), 0, Tag1 ("Env", 102)); (("Unbound_instance_variable", 1013), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -986)]), 0, (("typing/env.mli", 175, 6332, 6334), ("typing/env.mli", 175, 6332, 6371), 0), 0, Tag1 ("Env", 103)); (("Not_an_instance_variable", 1014), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -987)]), 0, (("typing/env.mli", 176, 6372, 6374), ("typing/env.mli", 176, 6372, 6410), 0), 0, Tag1 ("Env", 104)); (("Masked_instance_variable", 1015), ([(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -988)]), 0, (("typing/env.mli", 177, 6411, 6413), ("typing/env.mli", 177, 6411, 6454), 0), 0, Tag1 ("Env", 105)); (("Masked_self_variable", 1016), ([(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -989)]), 0, (("typing/env.mli", 178, 6455, 6457), ("typing/env.mli", 178, 6455, 6494), 0), 0, Tag1 ("Env", 106)); (("Masked_ancestor_variable", 1017), ([(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -990)]), 0, (("typing/env.mli", 179, 6495, 6497), ("typing/env.mli", 179, 6495, 6538), 0), 0, Tag1 ("Env", 107)); (("Structure_used_as_functor", 1018), ([(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -991)]), 0, (("typing/env.mli", 180, 6539, 6541), ("typing/env.mli", 180, 6539, 6583), 0), 0, Tag1 ("Env", 108)); (("Abstract_used_as_functor", 1019), ([(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -992)]), 0, (("typing/env.mli", 181, 6584, 6586), ("typing/env.mli", 181, 6584, 6627), 0), 0, Tag1 ("Env", 109)); (("Functor_used_as_structure", 1020), ([(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -993)]), 0, (("typing/env.mli", 182, 6628, 6630), ("typing/env.mli", 182, 6628, 6672), 0), 0, Tag1 ("Env", 110)); (("Abstract_used_as_structure", 1021), ([(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -994)]), 0, (("typing/env.mli", 183, 6673, 6675), ("typing/env.mli", 183, 6673, 6718), 0), 0, Tag1 ("Env", 111)); (("Generative_used_as_applicative", 1022), ([(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -995)]), 0, (("typing/env.mli", 184, 6719, 6721), ("typing/env.mli", 184, 6719, 6768), 0), 0, Tag1 ("Env", 112)); (("Illegal_reference_to_recursive_module", 1023), (0), 0, (("typing/env.mli", 185, 6769, 6771), ("typing/env.mli", 185, 6769, 6810), 0), 0, Tag1 ("Env", 113)); (("Cannot_scrape_alias", 1024), ([(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -996); (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -997)]), 0, (("typing/env.mli", 186, 6811, 6813), ("typing/env.mli", 186, 6811, 6858), 0), 0, Tag1 ("Env", 114))], 0), 1, 0, 0, 0, 0, 0, (("typing/env.mli", 166, 6018, 6018), ("typing/env.mli", 186, 6811, 6858), 0), 0, 0, 0, Tag1 ("Env", 94)), 1, 0); (("lookup_error", 1625), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -976), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -975), (Tag1 (0, (Tag3 ((("lookup_error", 1624)), 0, (0)), 100000000, 0, -974), ((("a")), 100000000, 0, -973), 0), 100000000, 0, -972), 0), 100000000, 0, -971), 0), 100000000, 0, -970), 0, (("typing/env.mli", 188, 6860, 6860), ("typing/env.mli", 188, 6860, 6915), 0), 0, Tag1 ("Env", 115)), 0); (("lookup_value", 1626), ((Tag1 (Tag1 ("use"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -969)], (0)), 100000000, 0, -968), (Tag1 (("loc"), (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -967), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -966), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -965), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -963); (Tag3 (Tag1 ((Tag2 ("Types")), "value_description"), 0, (0)), 100000000, 0, -964)]), 100000000, 0, -962), 0), 100000000, 0, -961), 0), 100000000, 0, -960), 0), 100000000, 0, -959), 0), 100000000, 0, -958), 0, (("typing/env.mli", 202, 7443, 7443), ("typing/env.mli", 204, 7514, 7542), 0), 0, Tag1 ("Env", 116)), 0); (("lookup_type", 1627), ((Tag1 (Tag1 ("use"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -957)], (0)), 100000000, 0, -956), (Tag1 (("loc"), (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -955), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -954), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -953), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -951); (Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -952)]), 100000000, 0, -950), 0), 100000000, 0, -949), 0), 100000000, 0, -948), 0), 100000000, 0, -947), 0), 100000000, 0, -946), 0, (("typing/env.mli", 205, 7543, 7543), ("typing/env.mli", 207, 7613, 7640), 0), 0, Tag1 ("Env", 117)), 0); (("lookup_module", 1628), ((Tag1 (Tag1 ("use"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -945)], (0)), 100000000, 0, -944), (Tag1 (("loc"), (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -943), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -942), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -941), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -939); (Tag3 (Tag1 ((Tag2 ("Types")), "module_declaration"), 0, (0)), 100000000, 0, -940)]), 100000000, 0, -938), 0), 100000000, 0, -937), 0), 100000000, 0, -936), 0), 100000000, 0, -935), 0), 100000000, 0, -934), 0, (("typing/env.mli", 208, 7641, 7641), ("typing/env.mli", 210, 7713, 7742), 0), 0, Tag1 ("Env", 118)), 0); (("lookup_modtype", 1629), ((Tag1 (Tag1 ("use"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -933)], (0)), 100000000, 0, -932), (Tag1 (("loc"), (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -931), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -930), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -929), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -927); (Tag3 (Tag1 ((Tag2 ("Types")), "modtype_declaration"), 0, (0)), 100000000, 0, -928)]), 100000000, 0, -926), 0), 100000000, 0, -925), 0), 100000000, 0, -924), 0), 100000000, 0, -923), 0), 100000000, 0, -922), 0, (("typing/env.mli", 211, 7743, 7743), ("typing/env.mli", 213, 7816, 7846), 0), 0, Tag1 ("Env", 119)), 0); (("lookup_class", 1630), ((Tag1 (Tag1 ("use"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -921)], (0)), 100000000, 0, -920), (Tag1 (("loc"), (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -919), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -918), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -917), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -915); (Tag3 (Tag1 ((Tag2 ("Types")), "class_declaration"), 0, (0)), 100000000, 0, -916)]), 100000000, 0, -914), 0), 100000000, 0, -913), 0), 100000000, 0, -912), 0), 100000000, 0, -911), 0), 100000000, 0, -910), 0, (("typing/env.mli", 214, 7847, 7847), ("typing/env.mli", 216, 7918, 7946), 0), 0, Tag1 ("Env", 120)), 0); (("lookup_cltype", 1631), ((Tag1 (Tag1 ("use"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -909)], (0)), 100000000, 0, -908), (Tag1 (("loc"), (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -907), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -906), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -905), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -903); (Tag3 (Tag1 ((Tag2 ("Types")), "class_type_declaration"), 0, (0)), 100000000, 0, -904)]), 100000000, 0, -902), 0), 100000000, 0, -901), 0), 100000000, 0, -900), 0), 100000000, 0, -899), 0), 100000000, 0, -898), 0, (("typing/env.mli", 217, 7947, 7947), ("typing/env.mli", 219, 8019, 8052), 0), 0, Tag1 ("Env", 121)), 0); (("lookup_module_path", 1632), ((Tag1 (Tag1 ("use"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -897)], (0)), 100000000, 0, -896), (Tag1 (("loc"), (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -895), (Tag1 (("load"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -894), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -893), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -892), (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -891), 0), 100000000, 0, -890), 0), 100000000, 0, -889), 0), 100000000, 0, -888), 0), 100000000, 0, -887), 0), 100000000, 0, -886), 0, (("typing/env.mli", 221, 8054, 8054), ("typing/env.mli", 222, 8078, 8150), 0), 0, Tag1 ("Env", 122)), 0); (("lookup_modtype_path", 1633), ((Tag1 (Tag1 ("use"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -885)], (0)), 100000000, 0, -884), (Tag1 (("loc"), (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -883), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -882), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -881), (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -880), 0), 100000000, 0, -879), 0), 100000000, 0, -878), 0), 100000000, 0, -877), 0), 100000000, 0, -876), 0, (("typing/env.mli", 223, 8151, 8151), ("typing/env.mli", 224, 8176, 8235), 0), 0, Tag1 ("Env", 123)), 0); (("lookup_constructor", 1634), ((Tag1 (Tag1 ("use"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -875)], (0)), 100000000, 0, -874), (Tag1 (("loc"), (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -873), (Tag1 (0, (Tag3 ((("constructor_usage", 1618)), 0, (0)), 100000000, 0, -872), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -871), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -870), (Tag3 (Tag1 ((Tag2 ("Types")), "constructor_description"), 0, (0)), 100000000, 0, -869), 0), 100000000, 0, -868), 0), 100000000, 0, -867), 0), 100000000, 0, -866), 0), 100000000, 0, -865), 0), 100000000, 0, -864), 0, (("typing/env.mli", 226, 8237, 8237), ("typing/env.mli", 228, 8335, 8360), 0), 0, Tag1 ("Env", 124)), 0); (("lookup_all_constructors", 1635), ((Tag1 (Tag1 ("use"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -863)], (0)), 100000000, 0, -862), (Tag1 (("loc"), (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -861), (Tag1 (0, (Tag3 ((("constructor_usage", 1618)), 0, (0)), 100000000, 0, -860), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -859), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -858), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Types")), "constructor_description"), 0, (0)), 100000000, 0, -850); (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -853), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -852), 0), 100000000, 0, -851)]), 100000000, 0, -849)], (0)), 100000000, 0, -848); (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -855); (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -856); (Tag3 ((("lookup_error", 1624)), 0, (0)), 100000000, 0, -857)]), 100000000, 0, -854)], (0)), 100000000, 0, -847), 0), 100000000, 0, -846), 0), 100000000, 0, -845), 0), 100000000, 0, -844), 0), 100000000, 0, -843), 0), 100000000, 0, -842), 0, (("typing/env.mli", 229, 8361, 8361), ("typing/env.mli", 232, 8516, 8556), 0), 0, Tag1 ("Env", 125)), 0); (("lookup_all_constructors_from_type", 1636), ((Tag1 (Tag1 ("use"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -841)], (0)), 100000000, 0, -840), (Tag1 (("loc"), (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -839), (Tag1 (0, (Tag3 ((("constructor_usage", 1618)), 0, (0)), 100000000, 0, -838), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -837), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -836), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Types")), "constructor_description"), 0, (0)), 100000000, 0, -832); (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -835), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -834), 0), 100000000, 0, -833)]), 100000000, 0, -831)], (0)), 100000000, 0, -830), 0), 100000000, 0, -829), 0), 100000000, 0, -828), 0), 100000000, 0, -827), 0), 100000000, 0, -826), 0), 100000000, 0, -825), 0, (("typing/env.mli", 233, 8557, 8557), ("typing/env.mli", 235, 8665, 8714), 0), 0, Tag1 ("Env", 126)), 0); (("lookup_label", 1637), ((Tag1 (Tag1 ("use"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -824)], (0)), 100000000, 0, -823), (Tag1 (("loc"), (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -822), (Tag1 (0, (Tag3 ((("label_usage", 1621)), 0, (0)), 100000000, 0, -821), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -820), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -819), (Tag3 (Tag1 ((Tag2 ("Types")), "label_description"), 0, (0)), 100000000, 0, -818), 0), 100000000, 0, -817), 0), 100000000, 0, -816), 0), 100000000, 0, -815), 0), 100000000, 0, -814), 0), 100000000, 0, -813), 0, (("typing/env.mli", 237, 8716, 8716), ("typing/env.mli", 239, 8802, 8821), 0), 0, Tag1 ("Env", 127)), 0); (("lookup_all_labels", 1638), ((Tag1 (Tag1 ("use"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -812)], (0)), 100000000, 0, -811), (Tag1 (("loc"), (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -810), (Tag1 (0, (Tag3 ((("label_usage", 1621)), 0, (0)), 100000000, 0, -809), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -808), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -807), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Types")), "label_description"), 0, (0)), 100000000, 0, -799); (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -802), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -801), 0), 100000000, 0, -800)]), 100000000, 0, -798)], (0)), 100000000, 0, -797); (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -804); (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -805); (Tag3 ((("lookup_error", 1624)), 0, (0)), 100000000, 0, -806)]), 100000000, 0, -803)], (0)), 100000000, 0, -796), 0), 100000000, 0, -795), 0), 100000000, 0, -794), 0), 100000000, 0, -793), 0), 100000000, 0, -792), 0), 100000000, 0, -791), 0, (("typing/env.mli", 240, 8822, 8822), ("typing/env.mli", 243, 8959, 8999), 0), 0, Tag1 ("Env", 128)), 0); (("lookup_all_labels_from_type", 1639), ((Tag1 (Tag1 ("use"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -790)], (0)), 100000000, 0, -789), (Tag1 (("loc"), (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -788), (Tag1 (0, (Tag3 ((("label_usage", 1621)), 0, (0)), 100000000, 0, -787), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -786), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -785), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Types")), "label_description"), 0, (0)), 100000000, 0, -781); (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -784), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -783), 0), 100000000, 0, -782)]), 100000000, 0, -780)], (0)), 100000000, 0, -779), 0), 100000000, 0, -778), 0), 100000000, 0, -777), 0), 100000000, 0, -776), 0), 100000000, 0, -775), 0), 100000000, 0, -774), 0, (("typing/env.mli", 244, 9000, 9000), ("typing/env.mli", 246, 9096, 9139), 0), 0, Tag1 ("Env", 129)), 0); (("lookup_instance_variable", 1640), ((Tag1 (Tag1 ("use"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -773)], (0)), 100000000, 0, -772), (Tag1 (("loc"), (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -771), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -770), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -769), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -765); (Tag3 (Tag1 ((Tag2 ("Asttypes")), "mutable_flag"), 0, (0)), 100000000, 0, -766); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -767); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -768)]), 100000000, 0, -764), 0), 100000000, 0, -763), 0), 100000000, 0, -762), 0), 100000000, 0, -761), 0), 100000000, 0, -760), 0, (("typing/env.mli", 248, 9141, 9141), ("typing/env.mli", 250, 9219, 9272), 0), 0, Tag1 ("Env", 130)), 0); (("find_value_by_name", 1641), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -759), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -758), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -756); (Tag3 (Tag1 ((Tag2 ("Types")), "value_description"), 0, (0)), 100000000, 0, -757)]), 100000000, 0, -755), 0), 100000000, 0, -754), 0), 100000000, 0, -753), 0, (("typing/env.mli", 252, 9274, 9274), ("typing/env.mli", 253, 9298, 9346), 0), 0, Tag1 ("Env", 131)), 0); (("find_type_by_name", 1642), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -752), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -751), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -749); (Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -750)]), 100000000, 0, -748), 0), 100000000, 0, -747), 0), 100000000, 0, -746), 0, (("typing/env.mli", 254, 9347, 9347), ("typing/env.mli", 255, 9370, 9417), 0), 0, Tag1 ("Env", 132)), 0); (("find_module_by_name", 1643), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -745), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -744), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -742); (Tag3 (Tag1 ((Tag2 ("Types")), "module_declaration"), 0, (0)), 100000000, 0, -743)]), 100000000, 0, -741), 0), 100000000, 0, -740), 0), 100000000, 0, -739), 0, (("typing/env.mli", 256, 9418, 9418), ("typing/env.mli", 257, 9443, 9492), 0), 0, Tag1 ("Env", 133)), 0); (("find_modtype_by_name", 1644), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -738), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -737), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -735); (Tag3 (Tag1 ((Tag2 ("Types")), "modtype_declaration"), 0, (0)), 100000000, 0, -736)]), 100000000, 0, -734), 0), 100000000, 0, -733), 0), 100000000, 0, -732), 0, (("typing/env.mli", 258, 9493, 9493), ("typing/env.mli", 259, 9519, 9569), 0), 0, Tag1 ("Env", 134)), 0); (("find_class_by_name", 1645), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -731), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -730), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -728); (Tag3 (Tag1 ((Tag2 ("Types")), "class_declaration"), 0, (0)), 100000000, 0, -729)]), 100000000, 0, -727), 0), 100000000, 0, -726), 0), 100000000, 0, -725), 0, (("typing/env.mli", 260, 9570, 9570), ("typing/env.mli", 261, 9594, 9642), 0), 0, Tag1 ("Env", 135)), 0); (("find_cltype_by_name", 1646), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -724), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -723), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -721); (Tag3 (Tag1 ((Tag2 ("Types")), "class_type_declaration"), 0, (0)), 100000000, 0, -722)]), 100000000, 0, -720), 0), 100000000, 0, -719), 0), 100000000, 0, -718), 0, (("typing/env.mli", 262, 9643, 9643), ("typing/env.mli", 263, 9668, 9721), 0), 0, Tag1 ("Env", 136)), 0); (("find_constructor_by_name", 1647), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -717), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -716), (Tag3 (Tag1 ((Tag2 ("Types")), "constructor_description"), 0, (0)), 100000000, 0, -715), 0), 100000000, 0, -714), 0), 100000000, 0, -713), 0, (("typing/env.mli", 265, 9723, 9723), ("typing/env.mli", 266, 9753, 9798), 0), 0, Tag1 ("Env", 137)), 0); (("find_label_by_name", 1648), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -712), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -711), (Tag3 (Tag1 ((Tag2 ("Types")), "label_description"), 0, (0)), 100000000, 0, -710), 0), 100000000, 0, -709), 0), 100000000, 0, -708), 0, (("typing/env.mli", 267, 9799, 9799), ("typing/env.mli", 268, 9823, 9862), 0), 0, Tag1 ("Env", 138)), 0); (("find_value_index", 1649), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -707), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -706), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -705)], (0)), 100000000, 0, -704), 0), 100000000, 0, -703), 0), 100000000, 0, -702), 0, (("typing/env.mli", 278, 10362, 10362), ("typing/env.mli", 278, 10362, 10412), 0), 0, Tag1 ("Env", 139)), 0); (("find_type_index", 1650), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -701), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -700), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -699)], (0)), 100000000, 0, -698), 0), 100000000, 0, -697), 0), 100000000, 0, -696), 0, (("typing/env.mli", 279, 10413, 10413), ("typing/env.mli", 279, 10413, 10463), 0), 0, Tag1 ("Env", 140)), 0); (("find_module_index", 1651), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -695), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -694), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -693)], (0)), 100000000, 0, -692), 0), 100000000, 0, -691), 0), 100000000, 0, -690), 0, (("typing/env.mli", 280, 10464, 10464), ("typing/env.mli", 280, 10464, 10514), 0), 0, Tag1 ("Env", 141)), 0); (("find_modtype_index", 1652), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -689), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -688), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -687)], (0)), 100000000, 0, -686), 0), 100000000, 0, -685), 0), 100000000, 0, -684), 0, (("typing/env.mli", 281, 10515, 10515), ("typing/env.mli", 281, 10515, 10565), 0), 0, Tag1 ("Env", 142)), 0); (("find_class_index", 1653), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -683), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -682), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -681)], (0)), 100000000, 0, -680), 0), 100000000, 0, -679), 0), 100000000, 0, -678), 0, (("typing/env.mli", 282, 10566, 10566), ("typing/env.mli", 282, 10566, 10616), 0), 0, Tag1 ("Env", 143)), 0); (("find_cltype_index", 1654), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -677), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -676), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -675)], (0)), 100000000, 0, -674), 0), 100000000, 0, -673), 0), 100000000, 0, -672), 0, (("typing/env.mli", 283, 10617, 10617), ("typing/env.mli", 283, 10617, 10667), 0), 0, Tag1 ("Env", 144)), 0); (("bound_value", 1655), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -671), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -670), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -669), 0), 100000000, 0, -668), 0), 100000000, 0, -667), 0, (("typing/env.mli", 287, 10701, 10701), ("typing/env.mli", 287, 10701, 10737), 0), 0, Tag1 ("Env", 145)), 0); (("bound_module", 1656), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -666), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -665), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -664), 0), 100000000, 0, -663), 0), 100000000, 0, -662), 0, (("typing/env.mli", 288, 10738, 10738), ("typing/env.mli", 288, 10738, 10775), 0), 0, Tag1 ("Env", 146)), 0); (("bound_type", 1657), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -661), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -660), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -659), 0), 100000000, 0, -658), 0), 100000000, 0, -657), 0, (("typing/env.mli", 289, 10776, 10776), ("typing/env.mli", 289, 10776, 10811), 0), 0, Tag1 ("Env", 147)), 0); (("bound_modtype", 1658), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -656), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -655), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -654), 0), 100000000, 0, -653), 0), 100000000, 0, -652), 0, (("typing/env.mli", 290, 10812, 10812), ("typing/env.mli", 290, 10812, 10850), 0), 0, Tag1 ("Env", 148)), 0); (("bound_class", 1659), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -651), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -650), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -649), 0), 100000000, 0, -648), 0), 100000000, 0, -647), 0, (("typing/env.mli", 291, 10851, 10851), ("typing/env.mli", 291, 10851, 10887), 0), 0, Tag1 ("Env", 149)), 0); (("bound_cltype", 1660), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -646), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -645), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -644), 0), 100000000, 0, -643), 0), 100000000, 0, -642), 0, (("typing/env.mli", 292, 10888, 10888), ("typing/env.mli", 292, 10888, 10925), 0), 0, Tag1 ("Env", 150)), 0); (("make_copy_of_types", 1661), ((Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -641), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -640), (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -639), 0), 100000000, 0, -638), 0), 100000000, 0, -637), 0, (("typing/env.mli", 294, 10927, 10927), ("typing/env.mli", 294, 10927, 10964), 0), 0, Tag1 ("Env", 151)), 0); (("add_value", 1662), ((Tag1 (Tag1 ("check"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -636), (Tag3 (Tag1 ((Tag2 ("Warnings")), "t"), 0, (0)), 100000000, 0, -635), 0), 100000000, 0, -634)], (0)), 100000000, 0, -633), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -632), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "value_description"), 0, (0)), 100000000, 0, -631), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -630), (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -629), 0), 100000000, 0, -628), 0), 100000000, 0, -627), 0), 100000000, 0, -626), 0), 100000000, 0, -625), 0, (("typing/env.mli", 298, 10997, 10997), ("typing/env.mli", 299, 11012, 11087), 0), 0, Tag1 ("Env", 152)), 0); (("add_type", 1663), ((Tag1 (("check"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -624), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -623), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -622), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -621), (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -620), 0), 100000000, 0, -619), 0), 100000000, 0, -618), 0), 100000000, 0, -617), 0), 100000000, 0, -616), 0, (("typing/env.mli", 300, 11088, 11088), ("typing/env.mli", 300, 11088, 11153), 0), 0, Tag1 ("Env", 153)), 0); (("add_extension", 1664), ((Tag1 (("check"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -615), (Tag1 (("rebind"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -614), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -613), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "extension_constructor"), 0, (0)), 100000000, 0, -612), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -611), (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -610), 0), 100000000, 0, -609), 0), 100000000, 0, -608), 0), 100000000, 0, -607), 0), 100000000, 0, -606), 0), 100000000, 0, -605), 0, (("typing/env.mli", 301, 11154, 11154), ("typing/env.mli", 302, 11173, 11246), 0), 0, Tag1 ("Env", 154)), 0); (("add_module", 1665), ((Tag1 (Tag1 ("arg"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -604)], (0)), 100000000, 0, -603), (Tag1 (Tag1 ("shape"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Shape")), "t"), 0, (0)), 100000000, 0, -602)], (0)), 100000000, 0, -601), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -600), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_presence"), 0, (0)), 100000000, 0, -599), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -598), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -597), (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -596), 0), 100000000, 0, -595), 0), 100000000, 0, -594), 0), 100000000, 0, -593), 0), 100000000, 0, -592), 0), 100000000, 0, -591), 0), 100000000, 0, -590), 0, (("typing/env.mli", 303, 11247, 11247), ("typing/env.mli", 304, 11294, 11347), 0), 0, Tag1 ("Env", 155)), 0); (("add_module_lazy", 1666), ((Tag1 (("update_summary"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -589), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -588), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_presence"), 0, (0)), 100000000, 0, -587), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Subst")), "Lazy"), "modtype"), 0, (0)), 100000000, 0, -586), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -585), (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -584), 0), 100000000, 0, -583), 0), 100000000, 0, -582), 0), 100000000, 0, -581), 0), 100000000, 0, -580), 0), 100000000, 0, -579), 0, (("typing/env.mli", 305, 11348, 11348), ("typing/env.mli", 306, 11392, 11452), 0), 0, Tag1 ("Env", 156)), 0); (("add_module_declaration", 1667), ((Tag1 (Tag1 ("arg"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -578)], (0)), 100000000, 0, -577), (Tag1 (Tag1 ("shape"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Shape")), "t"), 0, (0)), 100000000, 0, -576)], (0)), 100000000, 0, -575), (Tag1 (("check"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -574), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -573), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_presence"), 0, (0)), 100000000, 0, -572), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_declaration"), 0, (0)), 100000000, 0, -571), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -570), (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -569), 0), 100000000, 0, -568), 0), 100000000, 0, -567), 0), 100000000, 0, -566), 0), 100000000, 0, -565), 0), 100000000, 0, -564), 0), 100000000, 0, -563), 0), 100000000, 0, -562), 0, (("typing/env.mli", 307, 11453, 11453), ("typing/env.mli", 308, 11526, 11586), 0), 0, Tag1 ("Env", 157)), 0); (("add_module_declaration_lazy", 1668), ((Tag1 (("update_summary"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -561), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -560), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_presence"), 0, (0)), 100000000, 0, -559), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Subst")), "Lazy"), "module_decl"), 0, (0)), 100000000, 0, -558), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -557), (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -556), 0), 100000000, 0, -555), 0), 100000000, 0, -554), 0), 100000000, 0, -553), 0), 100000000, 0, -552), 0), 100000000, 0, -551), 0, (("typing/env.mli", 309, 11587, 11587), ("typing/env.mli", 310, 11643, 11707), 0), 0, Tag1 ("Env", 158)), 0); (("add_modtype", 1669), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -550), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "modtype_declaration"), 0, (0)), 100000000, 0, -549), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -548), (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -547), 0), 100000000, 0, -546), 0), 100000000, 0, -545), 0), 100000000, 0, -544), 0, (("typing/env.mli", 311, 11708, 11708), ("typing/env.mli", 311, 11708, 11765), 0), 0, Tag1 ("Env", 159)), 0); (("add_modtype_lazy", 1670), ((Tag1 (("update_summary"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -543), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -542), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Subst")), "Lazy"), "modtype_declaration"), 0, (0)), 100000000, 0, -541), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -540), (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -539), 0), 100000000, 0, -538), 0), 100000000, 0, -537), 0), 100000000, 0, -536), 0), 100000000, 0, -535), 0, (("typing/env.mli", 312, 11766, 11766), ("typing/env.mli", 313, 11811, 11865), 0), 0, Tag1 ("Env", 160)), 0); (("add_class", 1671), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -534), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_declaration"), 0, (0)), 100000000, 0, -533), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -532), (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -531), 0), 100000000, 0, -530), 0), 100000000, 0, -529), 0), 100000000, 0, -528), 0, (("typing/env.mli", 314, 11866, 11866), ("typing/env.mli", 314, 11866, 11919), 0), 0, Tag1 ("Env", 161)), 0); (("add_cltype", 1672), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -527), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_type_declaration"), 0, (0)), 100000000, 0, -526), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -525), (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -524), 0), 100000000, 0, -523), 0), 100000000, 0, -522), 0), 100000000, 0, -521), 0, (("typing/env.mli", 315, 11920, 11920), ("typing/env.mli", 315, 11920, 11979), 0), 0, Tag1 ("Env", 162)), 0); (("add_local_type", 1673), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -520), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -519), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -518), (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -517), 0), 100000000, 0, -516), 0), 100000000, 0, -515), 0), 100000000, 0, -514), 0, (("typing/env.mli", 316, 11980, 11980), ("typing/env.mli", 316, 11980, 12036), 0), 0, Tag1 ("Env", 163)), 0); (("add_persistent_structure", 1674), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -513), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -512), (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -511), 0), 100000000, 0, -510), 0), 100000000, 0, -509), 0, (("typing/env.mli", 326, 12374, 12374), ("typing/env.mli", 326, 12374, 12422), 0), 0, Tag1 ("Env", 164)), 0); (("persistent_structures_of_dir", 1675), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Load_path")), "Dir"), "t"), 0, (0)), 100000000, 0, -508), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Misc")), "Stdlib"), "String"), "Set"), "t"), 0, (0)), 100000000, 0, -507), 0), 100000000, 0, -506), 0, (("typing/env.mli", 330, 12504, 12504), ("typing/env.mli", 330, 12504, 12582), 0), 0, Tag1 ("Env", 165)), 0); (("filter_non_loaded_persistent", 1676), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -505), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -504), 0), 100000000, 0, -503), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -502), (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -501), 0), 100000000, 0, -500), 0), 100000000, 0, -499), 0, (("typing/env.mli", 335, 12730, 12730), ("typing/env.mli", 335, 12730, 12792), 0), 0, Tag1 ("Env", 166)), 0); (("add_signature", 1677), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "signature"), 0, (0)), 100000000, 0, -498), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -497), (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -496), 0), 100000000, 0, -495), 0), 100000000, 0, -494), 0, (("typing/env.mli", 339, 12841, 12841), ("typing/env.mli", 339, 12841, 12879), 0), 0, Tag1 ("Env", 167)), 0); (("open_signature", 1678), ((Tag1 (Tag1 ("used_slot"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -493)], (0)), 100000000, 0, -492)], (0)), 100000000, 0, -491), (Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -490)], (0)), 100000000, 0, -489), (Tag1 (Tag1 ("toplevel"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -488)], (0)), 100000000, 0, -487), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "override_flag"), 0, (0)), 100000000, 0, -486), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -485), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -484), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -481); (Tag8 (([("Functor", (0)); ("Not_found", (0))], (0, 100000000, 0, -483), 1, 0, 0)), 100000000, 0, -482)], (0)), 100000000, 0, -480), 0), 100000000, 0, -479), 0), 100000000, 0, -478), 0), 100000000, 0, -477), 0), 100000000, 0, -476), 0), 100000000, 0, -475), 0), 100000000, 0, -474), 0, (("typing/env.mli", 344, 13048, 13048), ("typing/env.mli", 348, 13176, 13220), 0), 0, Tag1 ("Env", 168)), 0); (("open_pers_signature", 1679), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -473), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -472), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -469); (Tag8 (([("Not_found", (0))], (0, 100000000, 0, -471), 1, 0, 0)), 100000000, 0, -470)], (0)), 100000000, 0, -468), 0), 100000000, 0, -467), 0), 100000000, 0, -466), 0, (("typing/env.mli", 350, 13222, 13222), ("typing/env.mli", 350, 13222, 13286), 0), 0, Tag1 ("Env", 169)), 0); (("remove_last_open", 1680), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -465), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -464), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -463)], (0)), 100000000, 0, -462), 0), 100000000, 0, -461), 0), 100000000, 0, -460), 0, (("typing/env.mli", 352, 13288, 13288), ("typing/env.mli", 352, 13288, 13333), 0), 0, Tag1 ("Env", 170)), 0); (("enter_value", 1681), ((Tag1 (Tag1 ("check"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -459), (Tag3 (Tag1 ((Tag2 ("Warnings")), "t"), 0, (0)), 100000000, 0, -458), 0), 100000000, 0, -457)], (0)), 100000000, 0, -456), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -455), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "value_description"), 0, (0)), 100000000, 0, -454), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -453), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -451); (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -452)]), 100000000, 0, -450), 0), 100000000, 0, -449), 0), 100000000, 0, -448), 0), 100000000, 0, -447), 0), 100000000, 0, -446), 0, (("typing/env.mli", 356, 13360, 13360), ("typing/env.mli", 358, 13414, 13465), 0), 0, Tag1 ("Env", 171)), 0); (("enter_type", 1682), ((Tag1 (("scope"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -445), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -444), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -443), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -442), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -440); (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -441)]), 100000000, 0, -439), 0), 100000000, 0, -438), 0), 100000000, 0, -437), 0), 100000000, 0, -436), 0), 100000000, 0, -435), 0, (("typing/env.mli", 359, 13466, 13466), ("typing/env.mli", 359, 13466, 13541), 0), 0, Tag1 ("Env", 172)), 0); (("enter_extension", 1683), ((Tag1 (("scope"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -434), (Tag1 (("rebind"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -433), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -432), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "extension_constructor"), 0, (0)), 100000000, 0, -431), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -430), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -428); (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -429)]), 100000000, 0, -427), 0), 100000000, 0, -426), 0), 100000000, 0, -425), 0), 100000000, 0, -424), 0), 100000000, 0, -423), 0), 100000000, 0, -422), 0, (("typing/env.mli", 360, 13542, 13542), ("typing/env.mli", 362, 13603, 13646), 0), 0, Tag1 ("Env", 173)), 0); (("enter_module", 1684), ((Tag1 (("scope"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -421), (Tag1 (Tag1 ("arg"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -420)], (0)), 100000000, 0, -419), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -418), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_presence"), 0, (0)), 100000000, 0, -417), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -416), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -415), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -413); (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -414)]), 100000000, 0, -412), 0), 100000000, 0, -411), 0), 100000000, 0, -410), 0), 100000000, 0, -409), 0), 100000000, 0, -408), 0), 100000000, 0, -407), 0), 100000000, 0, -406), 0, (("typing/env.mli", 363, 13647, 13647), ("typing/env.mli", 365, 13722, 13755), 0), 0, Tag1 ("Env", 174)), 0); (("enter_module_declaration", 1685), ((Tag1 (("scope"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -405), (Tag1 (Tag1 ("arg"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -404)], (0)), 100000000, 0, -403), (Tag1 (Tag1 ("shape"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Shape")), "t"), 0, (0)), 100000000, 0, -402)], (0)), 100000000, 0, -401), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -400), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_presence"), 0, (0)), 100000000, 0, -399), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_declaration"), 0, (0)), 100000000, 0, -398), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -397), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -395); (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -396)]), 100000000, 0, -394), 0), 100000000, 0, -393), 0), 100000000, 0, -392), 0), 100000000, 0, -391), 0), 100000000, 0, -390), 0), 100000000, 0, -389), 0), 100000000, 0, -388), 0), 100000000, 0, -387), 0, (("typing/env.mli", 366, 13756, 13756), ("typing/env.mli", 368, 13861, 13901), 0), 0, Tag1 ("Env", 175)), 0); (("enter_modtype", 1686), ((Tag1 (("scope"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -386), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -385), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "modtype_declaration"), 0, (0)), 100000000, 0, -384), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -383), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -381); (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -382)]), 100000000, 0, -380), 0), 100000000, 0, -379), 0), 100000000, 0, -378), 0), 100000000, 0, -377), 0), 100000000, 0, -376), 0, (("typing/env.mli", 369, 13902, 13902), ("typing/env.mli", 370, 13921, 13985), 0), 0, Tag1 ("Env", 176)), 0); (("enter_class", 1687), ((Tag1 (("scope"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -375), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -374), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_declaration"), 0, (0)), 100000000, 0, -373), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -372), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -370); (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -371)]), 100000000, 0, -369), 0), 100000000, 0, -368), 0), 100000000, 0, -367), 0), 100000000, 0, -366), 0), 100000000, 0, -365), 0, (("typing/env.mli", 371, 13986, 13986), ("typing/env.mli", 371, 13986, 14063), 0), 0, Tag1 ("Env", 177)), 0); (("enter_cltype", 1688), ((Tag1 (("scope"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -364), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -363), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_type_declaration"), 0, (0)), 100000000, 0, -362), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -361), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Ident")), "t"), 0, (0)), 100000000, 0, -359); (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -360)]), 100000000, 0, -358), 0), 100000000, 0, -357), 0), 100000000, 0, -356), 0), 100000000, 0, -355), 0), 100000000, 0, -354), 0, (("typing/env.mli", 372, 14064, 14064), ("typing/env.mli", 373, 14082, 14149), 0), 0, Tag1 ("Env", 178)), 0); (("enter_signature", 1689), ((Tag1 (Tag1 ("mod_shape"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Shape")), "t"), 0, (0)), 100000000, 0, -353)], (0)), 100000000, 0, -352), (Tag1 (("scope"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -351), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "signature"), 0, (0)), 100000000, 0, -350), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -349), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Types")), "signature"), 0, (0)), 100000000, 0, -347); (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -348)]), 100000000, 0, -346), 0), 100000000, 0, -345), 0), 100000000, 0, -344), 0), 100000000, 0, -343), 0), 100000000, 0, -342), 0, (("typing/env.mli", 377, 14252, 14252), ("typing/env.mli", 378, 14326, 14341), 0), 0, Tag1 ("Env", 179)), 0); (("enter_signature_and_shape", 1690), ((Tag1 (("scope"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -341), (Tag1 (("parent_shape"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Shape")), "Map"), "t"), 0, (0)), 100000000, 0, -340), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Shape")), "t"), 0, (0)), 100000000, 0, -339), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "signature"), 0, (0)), 100000000, 0, -338), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -337), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Types")), "signature"), 0, (0)), 100000000, 0, -334); (Tag3 (Tag1 (Tag1 ((Tag2 ("Shape")), "Map"), "t"), 0, (0)), 100000000, 0, -335); (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -336)]), 100000000, 0, -333), 0), 100000000, 0, -332), 0), 100000000, 0, -331), 0), 100000000, 0, -330), 0), 100000000, 0, -329), 0), 100000000, 0, -328), 0, (("typing/env.mli", 383, 14525, 14525), ("typing/env.mli", 384, 14597, 14655), 0), 0, Tag1 ("Env", 180)), 0); (("enter_unbound_value", 1691), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -327), (Tag1 (0, (Tag3 ((("value_unbound_reason", 1568)), 0, (0)), 100000000, 0, -326), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -325), (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -324), 0), 100000000, 0, -323), 0), 100000000, 0, -322), 0), 100000000, 0, -321), 0, (("typing/env.mli", 386, 14657, 14657), ("typing/env.mli", 386, 14657, 14723), 0), 0, Tag1 ("Env", 181)), 0); (("enter_unbound_module", 1692), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -320), (Tag1 (0, (Tag3 ((("module_unbound_reason", 1569)), 0, (0)), 100000000, 0, -319), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -318), (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -317), 0), 100000000, 0, -316), 0), 100000000, 0, -315), 0), 100000000, 0, -314), 0, (("typing/env.mli", 388, 14725, 14725), ("typing/env.mli", 388, 14725, 14793), 0), 0, Tag1 ("Env", 182)), 0); (("reset_cache", 1693), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -313), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -312), 0), 100000000, 0, -311), 0, (("typing/env.mli", 391, 14852, 14852), ("typing/env.mli", 391, 14852, 14881), 0), 0, Tag1 ("Env", 183)), 0); (("reset_cache_toplevel", 1694), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -310), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -309), 0), 100000000, 0, -308), 0, (("typing/env.mli", 394, 14931, 14931), ("typing/env.mli", 394, 14931, 14969), 0), 0, Tag1 ("Env", 184)), 0); (("set_unit_name", 1695), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -307), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -306), 0), 100000000, 0, -305), 0, (("typing/env.mli", 397, 15028, 15028), ("typing/env.mli", 397, 15028, 15061), 0), 0, Tag1 ("Env", 185)), 0); (("get_unit_name", 1696), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -304), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -303), 0), 100000000, 0, -302), 0, (("typing/env.mli", 398, 15062, 15062), ("typing/env.mli", 398, 15062, 15095), 0), 0, Tag1 ("Env", 186)), 0); (("read_signature", 1697), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Misc")), "modname"), 0, (0)), 100000000, 0, -301), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Misc")), "filepath"), 0, (0)), 100000000, 0, -300), (Tag3 (Tag1 ((Tag2 ("Types")), "signature"), 0, (0)), 100000000, 0, -299), 0), 100000000, 0, -298), 0), 100000000, 0, -297), 0, (("typing/env.mli", 401, 15141, 15141), ("typing/env.mli", 401, 15141, 15193), 0), 0, Tag1 ("Env", 187)), 0); (("save_signature", 1698), ((Tag1 (("alerts"), (Tag3 (Tag1 ((Tag2 ("Misc")), "alerts"), 0, (0)), 100000000, 0, -296), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "signature"), 0, (0)), 100000000, 0, -295), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Misc")), "modname"), 0, (0)), 100000000, 0, -294), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Misc")), "filepath"), 0, (0)), 100000000, 0, -293), (Tag3 (Tag1 ((Tag2 ("Cmi_format")), "cmi_infos"), 0, (0)), 100000000, 0, -292), 0), 100000000, 0, -291), 0), 100000000, 0, -290), 0), 100000000, 0, -289), 0), 100000000, 0, -288), 0, (("typing/env.mli", 403, 15263, 15263), ("typing/env.mli", 405, 15335, 15360), 0), 0, Tag1 ("Env", 188)), 0); (("save_signature_with_imports", 1699), ((Tag1 (("alerts"), (Tag3 (Tag1 ((Tag2 ("Misc")), "alerts"), 0, (0)), 100000000, 0, -287), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "signature"), 0, (0)), 100000000, 0, -286), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Misc")), "modname"), 0, (0)), 100000000, 0, -285), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Misc")), "filepath"), 0, (0)), 100000000, 0, -284), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Misc")), "crcs"), 0, (0)), 100000000, 0, -283), (Tag3 (Tag1 ((Tag2 ("Cmi_format")), "cmi_infos"), 0, (0)), 100000000, 0, -282), 0), 100000000, 0, -281), 0), 100000000, 0, -280), 0), 100000000, 0, -279), 0), 100000000, 0, -278), 0), 100000000, 0, -277), 0, (("typing/env.mli", 407, 15421, 15421), ("typing/env.mli", 409, 15514, 15539), 0), 0, Tag1 ("Env", 189)), 0); (("crc_of_unit", 1700), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Misc")), "modname"), 0, (0)), 100000000, 0, -276), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Digest"), "t"), 0, (0)), 100000000, 0, -275), 0), 100000000, 0, -274), 0, (("typing/env.mli", 414, 15712, 15712), ("typing/env.mli", 414, 15712, 15748), 0), 0, Tag1 ("Env", 190)), 0); (("imports", 1701), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -273), (Tag3 (Tag1 ((Tag2 ("Misc")), "crcs"), 0, (0)), 100000000, 0, -272), 0), 100000000, 0, -271), 0, (("typing/env.mli", 417, 15817, 15817), ("typing/env.mli", 417, 15817, 15842), 0), 0, Tag1 ("Env", 191)), 0); (("import_crcs", 1702), ((Tag1 (("source"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -270), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Misc")), "crcs"), 0, (0)), 100000000, 0, -269), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -268), 0), 100000000, 0, -267), 0), 100000000, 0, -266), 0, (("typing/env.mli", 420, 15899, 15899), ("typing/env.mli", 420, 15899, 15945), 0), 0, Tag1 ("Env", 192)), 0); (("is_imported_opaque", 1703), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Misc")), "modname"), 0, (0)), 100000000, 0, -265), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -264), 0), 100000000, 0, -263), 0, (("typing/env.mli", 423, 16027, 16027), ("typing/env.mli", 423, 16027, 16066), 0), 0, Tag1 ("Env", 193)), 0); (("register_import_as_opaque", 1704), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Misc")), "modname"), 0, (0)), 100000000, 0, -262), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -261), 0), 100000000, 0, -260), 0, (("typing/env.mli", 426, 16149, 16149), ("typing/env.mli", 426, 16149, 16195), 0), 0, Tag1 ("Env", 194)), 0); (("summary", 1705), ((Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -259), (Tag3 ((("summary", 1570)), 0, (0)), 100000000, 0, -258), 0), 100000000, 0, -257), 0, (("typing/env.mli", 431, 16303, 16303), ("typing/env.mli", 431, 16303, 16328), 0), 0, Tag1 ("Env", 195)), 0); (("keep_only_summary", 1706), ((Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -256), (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -255), 0), 100000000, 0, -254), 0, (("typing/env.mli", 437, 16521, 16521), ("typing/env.mli", 437, 16521, 16551), 0), 0, Tag1 ("Env", 196)), 0); (("env_of_only_summary", 1707), ((Tag1 (0, (Tag1 (0, (Tag3 ((("summary", 1570)), 0, (0)), 100000000, 0, -253), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Subst")), "t"), 0, (0)), 100000000, 0, -252), (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -251), 0), 100000000, 0, -250), 0), 100000000, 0, -249), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -248), (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -247), 0), 100000000, 0, -246), 0), 100000000, 0, -245), 0, (("typing/env.mli", 438, 16552, 16552), ("typing/env.mli", 438, 16552, 16613), 0), 0, Tag1 ("Env", 197)), 0); Tag1 (("error", 1708), (0, 0, Tag1 ([(("Missing_module", 1182), ([(Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -237); (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -238); (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -239)]), 0, (("typing/env.mli", 443, 16648, 16650), ("typing/env.mli", 443, 16648, 16698), 0), 0, Tag1 ("Env", 199)); (("Illegal_value_name", 1183), ([(Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -240); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -241)]), 0, (("typing/env.mli", 444, 16699, 16701), ("typing/env.mli", 444, 16699, 16744), 0), 0, Tag1 ("Env", 200)); (("Lookup_error", 1184), ([(Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -242); (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -243); (Tag3 ((("lookup_error", 1624)), 0, (0)), 100000000, 0, -244)]), 0, (("typing/env.mli", 445, 16745, 16747), ("typing/env.mli", 445, 16745, 16794), 0), 0, Tag1 ("Env", 201))], 0), 1, 0, 0, 0, 0, 0, (("typing/env.mli", 442, 16635, 16635), ("typing/env.mli", 445, 16745, 16794), 0), 0, 0, 0, Tag1 ("Env", 198)), 1, 0); Tag2 (("Error", 1709), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((("error", 1708)), 0, (0)), 100000000, 0, -236)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Env", 202)), 2, 0); (("report_error", 1710), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -235), (Tag1 (0, (Tag3 ((("error", 1708)), 0, (0)), 100000000, 0, -234), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -233), 0), 100000000, 0, -232), 0), 100000000, 0, -231), 0, (("typing/env.mli", 451, 16835, 16835), ("typing/env.mli", 451, 16835, 16879), 0), 0, Tag1 ("Env", 203)), 0); (("report_lookup_error", 1711), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -230), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -229), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -228), (Tag1 (0, (Tag3 ((("lookup_error", 1624)), 0, (0)), 100000000, 0, -227), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -226), 0), 100000000, 0, -225), 0), 100000000, 0, -224), 0), 100000000, 0, -223), 0), 100000000, 0, -222), 0, (("typing/env.mli", 453, 16881, 16881), ("typing/env.mli", 453, 16881, 16958), 0), 0, Tag1 ("Env", 204)), 0); (("in_signature", 1712), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -221), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -220), (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -219), 0), 100000000, 0, -218), 0), 100000000, 0, -217), 0, (("typing/env.mli", 455, 16960, 16960), ("typing/env.mli", 455, 16960, 16992), 0), 0, Tag1 ("Env", 205)), 0); (("is_in_signature", 1713), ((Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -216), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -215), 0), 100000000, 0, -214), 0, (("typing/env.mli", 457, 16994, 16994), ("typing/env.mli", 457, 16994, 17024), 0), 0, Tag1 ("Env", 206)), 0); (("set_value_used_callback", 1714), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "value_description"), 0, (0)), 100000000, 0, -213), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -212), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -211), 0), 100000000, 0, -210), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -209), 0), 100000000, 0, -208), 0), 100000000, 0, -207), 0, (("typing/env.mli", 459, 17026, 17026), ("typing/env.mli", 460, 17055, 17102), 0), 0, Tag1 ("Env", 207)), 0); (("set_type_used_callback", 1715), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -206), (Tag1 (0, (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -205), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -204), 0), 100000000, 0, -203), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -202), 0), 100000000, 0, -201), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -200), 0), 100000000, 0, -199), 0), 100000000, 0, -198), 0, (("typing/env.mli", 461, 17103, 17103), ("typing/env.mli", 462, 17131, 17187), 0), 0, Tag1 ("Env", 208)), 0); (("check_functor_application", 1716), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag1 (("errors"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -197), (Tag1 (("loc"), (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -196), (Tag1 (("lid_whole_app"), (Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -195), (Tag1 (("f0_path"), (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -194), (Tag1 (("args"), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -192); (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -193)]), 100000000, 0, -191)], (0)), 100000000, 0, -190), (Tag1 (("arg_path"), (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -189), (Tag1 (("arg_mty"), (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -188), (Tag1 (("param_mty"), (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -187), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -186), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -185), 0), 100000000, 0, -184), 0), 100000000, 0, -183), 0), 100000000, 0, -182), 0), 100000000, 0, -181), 0), 100000000, 0, -180), 0), 100000000, 0, -179), 0), 100000000, 0, -178), 0), 100000000, 0, -177), 0), 100000000, 0, -176)], (0)), 100000000, 0, -175), 0, (("typing/env.mli", 465, 17258, 17258), ("typing/env.mli", 471, 17505, 17522), 0), 0, Tag1 ("Env", 209)), 0); (("check_well_formed_module", 1717), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -174), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -173), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -172), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -171), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -170), 0), 100000000, 0, -169), 0), 100000000, 0, -168), 0), 100000000, 0, -167), 0), 100000000, 0, -166)], (0)), 100000000, 0, -165), 0, (("typing/env.mli", 473, 17589, 17589), ("typing/env.mli", 474, 17619, 17677), 0), 0, Tag1 ("Env", 210)), 0); (("add_delayed_check_forward", 1718), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -164), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -163), 0), 100000000, 0, -162), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -161), 0), 100000000, 0, -160)], (0)), 100000000, 0, -159), 0, (("typing/env.mli", 476, 17745, 17745), ("typing/env.mli", 476, 17745, 17804), 0), 0, Tag1 ("Env", 211)), 0); (("strengthen", 1719), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag1 (("aliasable"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -158), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -157), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Subst")), "Lazy"), "modtype"), 0, (0)), 100000000, 0, -156), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -155), (Tag3 (Tag1 (Tag1 ((Tag2 ("Subst")), "Lazy"), "modtype"), 0, (0)), 100000000, 0, -154), 0), 100000000, 0, -153), 0), 100000000, 0, -152), 0), 100000000, 0, -151), 0), 100000000, 0, -150)], (0)), 100000000, 0, -149), 0, (("typing/env.mli", 478, 17869, 17869), ("typing/env.mli", 480, 17935, 17973), 0), 0, Tag1 ("Env", 212)), 0); (("same_constr", 1720), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -148), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -147), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -146), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -145), 0), 100000000, 0, -144), 0), 100000000, 0, -143), 0), 100000000, 0, -142)], (0)), 100000000, 0, -141), 0, (("typing/env.mli", 482, 18038, 18038), ("typing/env.mli", 482, 18038, 18096), 0), 0, Tag1 ("Env", 213)), 0); (("print_longident", 1721), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -140), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -139), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -138), 0), 100000000, 0, -137), 0), 100000000, 0, -136)], (0)), 100000000, 0, -135), 0, (("typing/env.mli", 484, 18164, 18164), ("typing/env.mli", 484, 18164, 18230), 0), 0, Tag1 ("Env", 214)), 0); (("print_path", 1722), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -134), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -133), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -132), 0), 100000000, 0, -131), 0), 100000000, 0, -130)], (0)), 100000000, 0, -129), 0, (("typing/env.mli", 486, 18298, 18298), ("typing/env.mli", 486, 18298, 18354), 0), 0, Tag1 ("Env", 215)), 0); (("fold_values", 1723), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -128), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -127), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "value_description"), 0, (0)), 100000000, 0, -126), (Tag1 (0, ((("a")), 100000000, 0, -118), ((("a")), 100000000, 0, -118), 0), 100000000, 0, -125), 0), 100000000, 0, -124), 0), 100000000, 0, -123), 0), 100000000, 0, -122), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -121)], (0)), 100000000, 0, -120), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -119), (Tag1 (0, ((("a")), 100000000, 0, -118), ((("a")), 100000000, 0, -118), 0), 100000000, 0, -117), 0), 100000000, 0, -116), 0), 100000000, 0, -115), 0), 100000000, 0, -114), 0, (("typing/env.mli", 491, 18371, 18371), ("typing/env.mli", 493, 18445, 18482), 0), 0, Tag1 ("Env", 216)), 0); (("fold_types", 1724), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -113), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -112), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_declaration"), 0, (0)), 100000000, 0, -111), (Tag1 (0, ((("a")), 100000000, 0, -103), ((("a")), 100000000, 0, -103), 0), 100000000, 0, -110), 0), 100000000, 0, -109), 0), 100000000, 0, -108), 0), 100000000, 0, -107), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -106)], (0)), 100000000, 0, -105), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -104), (Tag1 (0, ((("a")), 100000000, 0, -103), ((("a")), 100000000, 0, -103), 0), 100000000, 0, -102), 0), 100000000, 0, -101), 0), 100000000, 0, -100), 0), 100000000, 0, -99), 0, (("typing/env.mli", 494, 18483, 18483), ("typing/env.mli", 496, 18555, 18592), 0), 0, Tag1 ("Env", 217)), 0); (("fold_constructors", 1725), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "constructor_description"), 0, (0)), 100000000, 0, -98), (Tag1 (0, ((("a")), 100000000, 0, -92), ((("a")), 100000000, 0, -92), 0), 100000000, 0, -97), 0), 100000000, 0, -96), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -95)], (0)), 100000000, 0, -94), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -93), (Tag1 (0, ((("a")), 100000000, 0, -92), ((("a")), 100000000, 0, -92), 0), 100000000, 0, -91), 0), 100000000, 0, -90), 0), 100000000, 0, -89), 0), 100000000, 0, -88), 0, (("typing/env.mli", 497, 18593, 18593), ("typing/env.mli", 499, 18659, 18696), 0), 0, Tag1 ("Env", 218)), 0); (("fold_labels", 1726), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "label_description"), 0, (0)), 100000000, 0, -87), (Tag1 (0, ((("a")), 100000000, 0, -81), ((("a")), 100000000, 0, -81), 0), 100000000, 0, -86), 0), 100000000, 0, -85), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -84)], (0)), 100000000, 0, -83), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -82), (Tag1 (0, ((("a")), 100000000, 0, -81), ((("a")), 100000000, 0, -81), 0), 100000000, 0, -80), 0), 100000000, 0, -79), 0), 100000000, 0, -78), 0), 100000000, 0, -77), 0, (("typing/env.mli", 500, 18697, 18697), ("typing/env.mli", 502, 18751, 18788), 0), 0, Tag1 ("Env", 219)), 0); (("fold_modules", 1727), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -76), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -75), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_declaration"), 0, (0)), 100000000, 0, -74), (Tag1 (0, ((("a")), 100000000, 0, -66), ((("a")), 100000000, 0, -66), 0), 100000000, 0, -73), 0), 100000000, 0, -72), 0), 100000000, 0, -71), 0), 100000000, 0, -70), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -69)], (0)), 100000000, 0, -68), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -67), (Tag1 (0, ((("a")), 100000000, 0, -66), ((("a")), 100000000, 0, -66), 0), 100000000, 0, -65), 0), 100000000, 0, -64), 0), 100000000, 0, -63), 0), 100000000, 0, -62), 0, (("typing/env.mli", 505, 18866, 18866), ("typing/env.mli", 507, 18942, 18979), 0), 0, Tag1 ("Env", 220)), 0); (("fold_modtypes", 1728), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -61), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -60), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "modtype_declaration"), 0, (0)), 100000000, 0, -59), (Tag1 (0, ((("a")), 100000000, 0, -51), ((("a")), 100000000, 0, -51), 0), 100000000, 0, -58), 0), 100000000, 0, -57), 0), 100000000, 0, -56), 0), 100000000, 0, -55), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -54)], (0)), 100000000, 0, -53), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -52), (Tag1 (0, ((("a")), 100000000, 0, -51), ((("a")), 100000000, 0, -51), 0), 100000000, 0, -50), 0), 100000000, 0, -49), 0), 100000000, 0, -48), 0), 100000000, 0, -47), 0, (("typing/env.mli", 509, 18981, 18981), ("typing/env.mli", 511, 19059, 19096), 0), 0, Tag1 ("Env", 221)), 0); (("fold_classes", 1729), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -46), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -45), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_declaration"), 0, (0)), 100000000, 0, -44), (Tag1 (0, ((("a")), 100000000, 0, -36), ((("a")), 100000000, 0, -36), 0), 100000000, 0, -43), 0), 100000000, 0, -42), 0), 100000000, 0, -41), 0), 100000000, 0, -40), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -39)], (0)), 100000000, 0, -38), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -37), (Tag1 (0, ((("a")), 100000000, 0, -36), ((("a")), 100000000, 0, -36), 0), 100000000, 0, -35), 0), 100000000, 0, -34), 0), 100000000, 0, -33), 0), 100000000, 0, -32), 0, (("typing/env.mli", 512, 19097, 19097), ("typing/env.mli", 514, 19172, 19209), 0), 0, Tag1 ("Env", 222)), 0); (("fold_cltypes", 1730), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -31), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -30), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "class_type_declaration"), 0, (0)), 100000000, 0, -29), (Tag1 (0, ((("a")), 100000000, 0, -21), ((("a")), 100000000, 0, -21), 0), 100000000, 0, -28), 0), 100000000, 0, -27), 0), 100000000, 0, -26), 0), 100000000, 0, -25), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Longident")), "t"), 0, (0)), 100000000, 0, -24)], (0)), 100000000, 0, -23), (Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -22), (Tag1 (0, ((("a")), 100000000, 0, -21), ((("a")), 100000000, 0, -21), 0), 100000000, 0, -20), 0), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("typing/env.mli", 515, 19210, 19210), ("typing/env.mli", 517, 19290, 19327), 0), 0, Tag1 ("Env", 223)), 0); (("scrape_alias", 1731), ((Tag1 (0, (Tag3 ((("t", 1572)), 0, (0)), 100000000, 0, -16), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -15), (Tag3 (Tag1 ((Tag2 ("Types")), "module_type"), 0, (0)), 100000000, 0, -14), 0), 100000000, 0, -13), 0), 100000000, 0, -12), 0, (("typing/env.mli", 521, 19347, 19347), ("typing/env.mli", 521, 19347, 19396), 0), 0, Tag1 ("Env", 224)), 0); (("check_value_name", 1732), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -11), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -10), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0), 100000000, 0, -7), 0, (("typing/env.mli", 522, 19397, 19397), ("typing/env.mli", 522, 19397, 19447), 0), 0, Tag1 ("Env", 225)), 0); (("print_address", 1733), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -6), (Tag1 (0, (Tag3 ((("address", 1571)), 0, (0)), 100000000, 0, -5), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("typing/env.mli", 524, 19449, 19449), ("typing/env.mli", 524, 19449, 19504), 0), 0, Tag1 ("Env", 226)), 0)], "Env", [("Env", ("\021\n\181\142x\b\169j\227\"\017\248*\178\245\223")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Types", ("\177\238\029.\220\006\163!\230\015\006\182\133\155\194\166")); ("Type_immediacy", ("\"\127k\011Q\241\211\138\193;8\142\129\141#\251")); ("Subst", ("\021\031\148\223\127\186\189\135\027}\145r\216\143\177\156")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shape", ("\235\127Y\213\025\137=\244\218\181\248N\189\188\216p")); ("Primitive", ("}Shh\162\015|\220A\203\249\232\245G\213\019")); ("Path", ("\012\183\178\025\1298\228*\021r\185\160Y\252\n\026")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Outcometree", ("9\021%\234\211\206\210\004H\165\208\2014\234Q\142")); ("Misc", ("*\026\026\234c\191\131\161\\\203\183\012O\252\153\198")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Load_path", ("\012@\228l\230\164S\172h\1726X\020\252o}")); ("Identifiable", ("\004F\207\014\158GU\001\184\214\187%/#;\211")); ("Ident", ("\b9;!\187.\220\163(x\b\174\\\223\020\004")); ("Cmi_format", ("6\177\bU\139\"\023\152=\249\135\174\b\011Cg")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Build_path_prefix_map", ("y\028\167\207D\220\198\216\011\208\172\149\2416\bc")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216"))], [(0)])
val print_address : Format.formatter -> address -> unit

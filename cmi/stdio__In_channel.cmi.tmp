type t = in_channel
val equal : t Base__Equal.equal
val stdin : t
val create : ?binary:Base.bool -> Base.string -> t
val with_file : ?binary:Base.bool -> Base.string -> f:(t -> 'a) -> 'a
val close : t -> Base.unit
val input : t -> buf:Base.bytes -> pos:Base.int -> len:Base.int -> Base.int
val really_input :
  t ->
  buf:Base.bytes -> pos:Base.int -> len:Base.int -> Base.unit Base.option
val really_input_exn :
  t -> buf:Base.bytes -> pos:Base.int -> len:Base.int -> Base.unit
val input_char : t -> Base.char Base.option
val input_byte : t -> Base.int Base.option
val input_binary_int : t -> Base.int Base.option
val unsafe_input_value : t -> 'a Base.option
val input_buffer :
  t -> Base.Buffer.t -> len:Base.int -> Base.unit Base.option
val input_all : t -> Base.string
val input_line : ?fix_win_eol:Base.bool -> t -> Base.string Base.option
val input_line_exn : ?fix_win_eol:Base.bool -> t -> Base.string
val fold_lines :
  ?fix_win_eol:Base.bool -> t -> init:'a -> f:('a -> Base.string -> 'a) -> 'a
val input_lines : ?fix_win_eol:Base.bool -> t -> Base.string Base.list
val iter_lines :
  ?fix_win_eol:Base.bool -> t -> f:(Base.string -> Base.unit) -> Base.unit
val seek : t -> Base.int64 -> Base.unit
val pos : t -> Base.int64
val length : t -> Base.int64
val set_binary_mode : t -> Base.bool -> Base.unit
val read_lines :
  ?fix_win_eol:Base.bool -> Base.string -> Base.string Base.list
("DEBUG:rule", [Tag1 (("t", 1130), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "in_channel"), 0, (0)), 100000000, 0, -145)), 0, 0, 0, 0, (("src/in_channel.mli", 13, 427, 427), ("src/in_channel.mli", 13, 427, 453), 0), 0, 0, 0, Tag1 ("Stdio__In_channel", 0)), 1, 0); (("equal", 1131), ((Tag3 (Tag1 ((Tag2 ("Base__Equal")), "equal"), [(Tag3 ((("t", 1130)), 0, (0)), 100000000, 0, -144)], (0)), 100000000, 0, -143), 0, (("src/in_channel.mli", 15, 455, 463), ("src/in_channel.mli", 15, 455, 487), 0), 0, Tag1 ("Base__Equal", 3)), 0); (("stdin", 1132), ((Tag3 ((("t", 1130)), 0, (0)), 100000000, 0, -142), 0, (("src/in_channel.mli", 17, 489, 489), ("src/in_channel.mli", 17, 489, 502), 0), 0, Tag1 ("Stdio__In_channel", 2)), 0); (("create", 1133), ((Tag1 (Tag1 ("binary"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Base")), "bool"), 0, (0)), 100000000, 0, -141)], (0)), 100000000, 0, -140), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base")), "string"), 0, (0)), 100000000, 0, -139), (Tag3 ((("t", 1130)), 0, (0)), 100000000, 0, -138), 0), 100000000, 0, -137), 0), 100000000, 0, -136), 0, (("src/in_channel.mli", 23, 610, 610), ("src/in_channel.mli", 23, 610, 676), 0), 0, Tag1 ("Stdio__In_channel", 3)), 0); (("with_file", 1134), ((Tag1 (Tag1 ("binary"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Base")), "bool"), 0, (0)), 100000000, 0, -135)], (0)), 100000000, 0, -134), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base")), "string"), 0, (0)), 100000000, 0, -133), (Tag1 (("f"), (Tag1 (0, (Tag3 ((("t", 1130)), 0, (0)), 100000000, 0, -132), ((("a")), 100000000, 0, -130), 0), 100000000, 0, -131), ((("a")), 100000000, 0, -130), 0), 100000000, 0, -129), 0), 100000000, 0, -128), 0), 100000000, 0, -127), 0, (("src/in_channel.mli", 27, 784, 784), ("src/in_channel.mli", 27, 784, 869), 0), 0, Tag1 ("Stdio__In_channel", 4)), 0); (("close", 1135), ((Tag1 (0, (Tag3 ((("t", 1130)), 0, (0)), 100000000, 0, -126), (Tag3 (Tag1 ((Tag2 ("Base")), "unit"), 0, (0)), 100000000, 0, -125), 0), 100000000, 0, -124), 0, (("src/in_channel.mli", 32, 975, 975), ("src/in_channel.mli", 32, 975, 996), 0), 0, Tag1 ("Stdio__In_channel", 5)), 0); (("input", 1136), ((Tag1 (0, (Tag3 ((("t", 1130)), 0, (0)), 100000000, 0, -123), (Tag1 (("buf"), (Tag3 (Tag1 ((Tag2 ("Base")), "bytes"), 0, (0)), 100000000, 0, -122), (Tag1 (("pos"), (Tag3 (Tag1 ((Tag2 ("Base")), "int"), 0, (0)), 100000000, 0, -121), (Tag1 (("len"), (Tag3 (Tag1 ((Tag2 ("Base")), "int"), 0, (0)), 100000000, 0, -120), (Tag3 (Tag1 ((Tag2 ("Base")), "int"), 0, (0)), 100000000, 0, -119), 0), 100000000, 0, -118), 0), 100000000, 0, -117), 0), 100000000, 0, -116), 0), 100000000, 0, -115), 0, (("src/in_channel.mli", 34, 998, 998), ("src/in_channel.mli", 34, 998, 1053), 0), 0, Tag1 ("Stdio__In_channel", 6)), 0); (("really_input", 1137), ((Tag1 (0, (Tag3 ((("t", 1130)), 0, (0)), 100000000, 0, -114), (Tag1 (("buf"), (Tag3 (Tag1 ((Tag2 ("Base")), "bytes"), 0, (0)), 100000000, 0, -113), (Tag1 (("pos"), (Tag3 (Tag1 ((Tag2 ("Base")), "int"), 0, (0)), 100000000, 0, -112), (Tag1 (("len"), (Tag3 (Tag1 ((Tag2 ("Base")), "int"), 0, (0)), 100000000, 0, -111), (Tag3 (Tag1 ((Tag2 ("Base")), "option"), [(Tag3 (Tag1 ((Tag2 ("Base")), "unit"), 0, (0)), 100000000, 0, -110)], (0)), 100000000, 0, -109), 0), 100000000, 0, -108), 0), 100000000, 0, -107), 0), 100000000, 0, -106), 0), 100000000, 0, -105), 0, (("src/in_channel.mli", 36, 1055, 1055), ("src/in_channel.mli", 36, 1055, 1125), 0), 0, Tag1 ("Stdio__In_channel", 7)), 0); (("really_input_exn", 1138), ((Tag1 (0, (Tag3 ((("t", 1130)), 0, (0)), 100000000, 0, -104), (Tag1 (("buf"), (Tag3 (Tag1 ((Tag2 ("Base")), "bytes"), 0, (0)), 100000000, 0, -103), (Tag1 (("pos"), (Tag3 (Tag1 ((Tag2 ("Base")), "int"), 0, (0)), 100000000, 0, -102), (Tag1 (("len"), (Tag3 (Tag1 ((Tag2 ("Base")), "int"), 0, (0)), 100000000, 0, -101), (Tag3 (Tag1 ((Tag2 ("Base")), "unit"), 0, (0)), 100000000, 0, -100), 0), 100000000, 0, -99), 0), 100000000, 0, -98), 0), 100000000, 0, -97), 0), 100000000, 0, -96), 0, (("src/in_channel.mli", 39, 1197, 1197), ("src/in_channel.mli", 39, 1197, 1264), 0), 0, Tag1 ("Stdio__In_channel", 8)), 0); (("input_char", 1139), ((Tag1 (0, (Tag3 ((("t", 1130)), 0, (0)), 100000000, 0, -95), (Tag3 (Tag1 ((Tag2 ("Base")), "option"), [(Tag3 (Tag1 ((Tag2 ("Base")), "char"), 0, (0)), 100000000, 0, -94)], (0)), 100000000, 0, -93), 0), 100000000, 0, -92), 0, (("src/in_channel.mli", 44, 1383, 1383), ("src/in_channel.mli", 44, 1383, 1416), 0), 0, Tag1 ("Stdio__In_channel", 9)), 0); (("input_byte", 1140), ((Tag1 (0, (Tag3 ((("t", 1130)), 0, (0)), 100000000, 0, -91), (Tag3 (Tag1 ((Tag2 ("Base")), "option"), [(Tag3 (Tag1 ((Tag2 ("Base")), "int"), 0, (0)), 100000000, 0, -90)], (0)), 100000000, 0, -89), 0), 100000000, 0, -88), 0, (("src/in_channel.mli", 48, 1553, 1553), ("src/in_channel.mli", 48, 1553, 1585), 0), 0, Tag1 ("Stdio__In_channel", 10)), 0); (("input_binary_int", 1141), ((Tag1 (0, (Tag3 ((("t", 1130)), 0, (0)), 100000000, 0, -87), (Tag3 (Tag1 ((Tag2 ("Base")), "option"), [(Tag3 (Tag1 ((Tag2 ("Base")), "int"), 0, (0)), 100000000, 0, -86)], (0)), 100000000, 0, -85), 0), 100000000, 0, -84), 0, (("src/in_channel.mli", 53, 1805, 1805), ("src/in_channel.mli", 53, 1805, 1843), 0), 0, Tag1 ("Stdio__In_channel", 11)), 0); (("unsafe_input_value", 1142), ((Tag1 (0, (Tag3 ((("t", 1130)), 0, (0)), 100000000, 0, -83), (Tag3 (Tag1 ((Tag2 ("Base")), "option"), [((0), 100000000, 0, -82)], (0)), 100000000, 0, -81), 0), 100000000, 0, -80), 0, (("src/in_channel.mli", 56, 1884, 1884), ("src/in_channel.mli", 56, 1884, 1922), 0), 0, Tag1 ("Stdio__In_channel", 12)), 0); (("input_buffer", 1143), ((Tag1 (0, (Tag3 ((("t", 1130)), 0, (0)), 100000000, 0, -79), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base")), "Buffer"), "t"), 0, (0)), 100000000, 0, -78), (Tag1 (("len"), (Tag3 (Tag1 ((Tag2 ("Base")), "int"), 0, (0)), 100000000, 0, -77), (Tag3 (Tag1 ((Tag2 ("Base")), "option"), [(Tag3 (Tag1 ((Tag2 ("Base")), "unit"), 0, (0)), 100000000, 0, -76)], (0)), 100000000, 0, -75), 0), 100000000, 0, -74), 0), 100000000, 0, -73), 0), 100000000, 0, -72), 0, (("src/in_channel.mli", 63, 2229, 2229), ("src/in_channel.mli", 63, 2229, 2287), 0), 0, Tag1 ("Stdio__In_channel", 13)), 0); (("input_all", 1144), ((Tag1 (0, (Tag3 ((("t", 1130)), 0, (0)), 100000000, 0, -71), (Tag3 (Tag1 ((Tag2 ("Base")), "string"), 0, (0)), 100000000, 0, -70), 0), 100000000, 0, -69), 0, (("src/in_channel.mli", 65, 2289, 2289), ("src/in_channel.mli", 65, 2289, 2316), 0), 0, Tag1 ("Stdio__In_channel", 14)), 0); (("input_line", 1145), ((Tag1 (Tag1 ("fix_win_eol"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Base")), "bool"), 0, (0)), 100000000, 0, -68)], (0)), 100000000, 0, -67), (Tag1 (0, (Tag3 ((("t", 1130)), 0, (0)), 100000000, 0, -66), (Tag3 (Tag1 ((Tag2 ("Base")), "option"), [(Tag3 (Tag1 ((Tag2 ("Base")), "string"), 0, (0)), 100000000, 0, -65)], (0)), 100000000, 0, -64), 0), 100000000, 0, -63), 0), 100000000, 0, -62), 0, (("src/in_channel.mli", 71, 2502, 2502), ("src/in_channel.mli", 71, 2502, 2584), 0), 0, Tag1 ("Stdio__In_channel", 15)), 0); (("input_line_exn", 1146), ((Tag1 (Tag1 ("fix_win_eol"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Base")), "bool"), 0, (0)), 100000000, 0, -61)], (0)), 100000000, 0, -60), (Tag1 (0, (Tag3 ((("t", 1130)), 0, (0)), 100000000, 0, -59), (Tag3 (Tag1 ((Tag2 ("Base")), "string"), 0, (0)), 100000000, 0, -58), 0), 100000000, 0, -57), 0), 100000000, 0, -56), 0, (("src/in_channel.mli", 73, 2586, 2586), ("src/in_channel.mli", 73, 2586, 2665), 0), 0, Tag1 ("Stdio__In_channel", 16)), 0); (("fold_lines", 1147), ((Tag1 (Tag1 ("fix_win_eol"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Base")), "bool"), 0, (0)), 100000000, 0, -55)], (0)), 100000000, 0, -54), (Tag1 (0, (Tag3 ((("t", 1130)), 0, (0)), 100000000, 0, -53), (Tag1 (("init"), ((("a")), 100000000, 0, -49), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -49), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base")), "string"), 0, (0)), 100000000, 0, -52), ((("a")), 100000000, 0, -49), 0), 100000000, 0, -51), 0), 100000000, 0, -50), ((("a")), 100000000, 0, -49), 0), 100000000, 0, -48), 0), 100000000, 0, -47), 0), 100000000, 0, -46), 0), 100000000, 0, -45), 0, (("src/in_channel.mli", 78, 2842, 2842), ("src/in_channel.mli", 83, 2954, 2961), 0), 0, Tag1 ("Stdio__In_channel", 17)), 0); (("input_lines", 1148), ((Tag1 (Tag1 ("fix_win_eol"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Base")), "bool"), 0, (0)), 100000000, 0, -44)], (0)), 100000000, 0, -43), (Tag1 (0, (Tag3 ((("t", 1130)), 0, (0)), 100000000, 0, -42), (Tag3 (Tag1 ((Tag2 ("Base")), "list"), [(Tag3 (Tag1 ((Tag2 ("Base")), "string"), 0, (0)), 100000000, 0, -41)], (0)), 100000000, 0, -40), 0), 100000000, 0, -39), 0), 100000000, 0, -38), 0, (("src/in_channel.mli", 87, 3079, 3079), ("src/in_channel.mli", 87, 3079, 3160), 0), 0, Tag1 ("Stdio__In_channel", 18)), 0); (("iter_lines", 1149), ((Tag1 (Tag1 ("fix_win_eol"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Base")), "bool"), 0, (0)), 100000000, 0, -37)], (0)), 100000000, 0, -36), (Tag1 (0, (Tag3 ((("t", 1130)), 0, (0)), 100000000, 0, -35), (Tag1 (("f"), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base")), "string"), 0, (0)), 100000000, 0, -34), (Tag3 (Tag1 ((Tag2 ("Base")), "unit"), 0, (0)), 100000000, 0, -33), 0), 100000000, 0, -32), (Tag3 (Tag1 ((Tag2 ("Base")), "unit"), 0, (0)), 100000000, 0, -31), 0), 100000000, 0, -30), 0), 100000000, 0, -29), 0), 100000000, 0, -28), 0, (("src/in_channel.mli", 91, 3263, 3263), ("src/in_channel.mli", 95, 3358, 3367), 0), 0, Tag1 ("Stdio__In_channel", 19)), 0); (("seek", 1150), ((Tag1 (0, (Tag3 ((("t", 1130)), 0, (0)), 100000000, 0, -27), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base")), "int64"), 0, (0)), 100000000, 0, -26), (Tag3 (Tag1 ((Tag2 ("Base")), "unit"), 0, (0)), 100000000, 0, -25), 0), 100000000, 0, -24), 0), 100000000, 0, -23), 0, (("src/in_channel.mli", 99, 3470, 3470), ("src/in_channel.mli", 99, 3470, 3499), 0), 0, Tag1 ("Stdio__In_channel", 20)), 0); (("pos", 1151), ((Tag1 (0, (Tag3 ((("t", 1130)), 0, (0)), 100000000, 0, -22), (Tag3 (Tag1 ((Tag2 ("Base")), "int64"), 0, (0)), 100000000, 0, -21), 0), 100000000, 0, -20), 0, (("src/in_channel.mli", 101, 3501, 3501), ("src/in_channel.mli", 101, 3501, 3521), 0), 0, Tag1 ("Stdio__In_channel", 21)), 0); (("length", 1152), ((Tag1 (0, (Tag3 ((("t", 1130)), 0, (0)), 100000000, 0, -19), (Tag3 (Tag1 ((Tag2 ("Base")), "int64"), 0, (0)), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("src/in_channel.mli", 107, 3876, 3876), ("src/in_channel.mli", 107, 3876, 3899), 0), 0, Tag1 ("Stdio__In_channel", 22)), 0); (("set_binary_mode", 1153), ((Tag1 (0, (Tag3 ((("t", 1130)), 0, (0)), 100000000, 0, -16), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base")), "bool"), 0, (0)), 100000000, 0, -15), (Tag3 (Tag1 ((Tag2 ("Base")), "unit"), 0, (0)), 100000000, 0, -14), 0), 100000000, 0, -13), 0), 100000000, 0, -12), 0, (("src/in_channel.mli", 111, 4008, 4008), ("src/in_channel.mli", 111, 4008, 4047), 0), 0, Tag1 ("Stdio__In_channel", 23)), 0); (("read_lines", 1154), ((Tag1 (Tag1 ("fix_win_eol"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Base")), "bool"), 0, (0)), 100000000, 0, -11)], (0)), 100000000, 0, -10), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base")), "string"), 0, (0)), 100000000, 0, -9), (Tag3 (Tag1 ((Tag2 ("Base")), "list"), [(Tag3 (Tag1 ((Tag2 ("Base")), "string"), 0, (0)), 100000000, 0, -8)], (0)), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("src/in_channel.mli", 116, 4243, 4243), ("src/in_channel.mli", 116, 4243, 4302), 0), 0, Tag1 ("Stdio__In_channel", 24)), 0); (("read_all", 1155), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base")), "string"), 0, (0)), 100000000, 0, -4), (Tag3 (Tag1 ((Tag2 ("Base")), "string"), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/in_channel.mli", 121, 4494, 4494), ("src/in_channel.mli", 121, 4494, 4525), 0), 0, Tag1 ("Stdio__In_channel", 25)), 0)], "Stdio__In_channel", [("Stdio__In_channel", ("\191\174\140\254\020r\210\219\216\143&\213''L\197")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__StringLabels", ("\134F\024\226\216Is#\223\230\234\169Z\206Gc")); ("Stdlib__StdLabels", (".\193\n\229\139\017\212C-ZA\\kz-\128")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Printf", ("\215<\139]\021\142\224E\245m\198qc(W\229")); ("Stdlib__Printexc", ("\217u\168\235\179oi\167\235\255\025\017%d\192s")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__MoreLabels", ("\248\232\248\254`<\230\241\161U\193U\1466J\238")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__ListLabels", ("*\194\012\191\020%\170\249m\002\180\178hk\205\220")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Stdio__", ("\024\164\014\238bj\242xB\145\187+\201\248\2222")); ("Shadow_stdlib", ("\219zi\164\203\158e)\232\221\196\168\138x\142\018")); ("Sexplib0__Sexpable", ("\251${\207(\249/z\242\255\250^\141\156\210e")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv_error", ("kzv!\151~\198P\000\165\176d\007\251p\232")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Base_internalhash_types", ("0\148#2\226\223\018\135\173>!\020\237\017\255\149")); ("Base__Unit", ("\247\n\178\171]m\169\231\139\171\148\189\254\236l'")); ("Base__T", ("+t\159\169\027\152\205\235\003\237\133\177\024\n6'")); ("Base__Sys0", ("\206z\231\154s\\\136\2364\131\005\014\031\152m3")); ("Base__Stringable", ("\170\025\162\136\234\162\n\161\1491>\145\210@\237t")); ("Base__String0", ("\212\221L\220\245\255\162P\228\224\189\216\135H\149O")); ("Base__String", ("|q\181\r\14787\130\127\191\025\137\203\217\250\196")); ("Base__Staged", ("\203J\011+\249\0115\1338\023\209\142\159\240V.")); ("Base__Source_code_position0", ("_\003P6\254\029\206\005\130\136\180\019\145\230\000M")); ("Base__Sign_or_nan", ("\2287\251,\197\017qf\179Y\025h\190\131W%")); ("Base__Sign0", ("\152\138\204\175\244\128J\165\221\165\160\150y\1305i")); ("Base__Sign", ("^\255.Q;\215fi\134\192\182\241Z\2425l")); ("Base__Sexpable", ("\155?\169\178\246\242*\232\206\018Y\174\203h\217i")); ("Base__Sexp_with_comparable", ("\171\173\137y\1855\006y\146\248\141@@\191[W")); ("Base__Sexp", ("\154\187\171&\209=\153[\236\250!U\174`\190T")); ("Base__Sequence", ("{L\140\211\223\183\000\030\151\247FnY\196\210\201")); ("Base__Result", ("\204|\215\173FMa\2511<&\215T\194$\228")); ("Base__Ref", ("\250\254R\158s\203c\0025\029I6\149\179s\158")); ("Base__Random", (" \216\153fc\243\1430\155\211\169?\022\\\231\011")); ("Base__Printf", ("\000\196c,\214\127\226\174\220\190\253z!\242\028\250")); ("Base__Pretty_printer", ("\175\005\031\018\015a\159\220\154c'(a\239j\233")); ("Base__Ppx_hash_lib", ("\199\141\178\193\006\209L\007^\020(\131\224sn8")); ("Base__Ppx_enumerate_lib", ("G\171\178\012Em\142\235@\152fg\020\140~(")); ("Base__Ppx_compare_lib", ("\243\186~\233\228\199Ah\181.\223\004e\231\129S")); ("Base__Poly0", ("\230;\143\234\255.H\132KOe7\155\\\023f")); ("Base__Or_error", ("\193\133)\bO\210\2517\168*\203\148\143\200\127\177")); ("Base__Option", ("\242!\176\142\168\247\163Jg\0254\180\224\\A\210")); ("Base__Nativeint", ("\252/\181U\214\229\029?.\130\145\237\"qFj")); ("Base__Monad_intf", ("\208\203\163\152\184O\130?\012:\168\247}\018\253\155")); ("Base__Monad", ("!\244\168\2352=\137Lm\219\129K\216\199\145\\")); ("Base__List", ("}\029h\158/\153\229\161]0\224Y\003Z\250\210")); ("Base__Lazy", ("@`\165\196 \235)\136ANe:p\169$\185")); ("Base__Invariant_intf", ("\213\204\238\235\236[\198\145\028\2392\015\243\177S\249")); ("Base__Invariant", ("\135\153\136\\\129SD\228\202l\255\152\139\253\015\201")); ("Base__Intable", ("\028\249=Y\003]\231qd\238\172\004b\170\142\255")); ("Base__Int_intf", ("\238Q\2457\239\156\018\183J\015\240\178\193b\166@")); ("Base__Int64", ("\252B\186\239\245\155\209\227\136CIX@\189\003\029")); ("Base__Int63_emul", ("'\210s\232\177\204\254\024C\215\014\231\210\227n\235")); ("Base__Int63", ("\165\016\236\214m\014a\226A{\191\235@O\1695")); ("Base__Int32", ("\244*\172\133\227\025$@\180\027\024\132\195yO\027")); ("Base__Int0", ("N\1310\012\227\254\000\255_\222!\018\016\003\1779")); ("Base__Int", ("\165Z\179\140\230$\131\175\209\172\214\"\170\214{\250")); ("Base__Info_intf", ("\184\209'\173\251\219\167X|v\188]\190o5X")); ("Base__Info", ("-\011\149\203\248\030\2301\1907\1630\189\128\209\170")); ("Base__Indexed_container_intf", ("\179\2213\145j\\\136\tl2\240\006\188j$r")); ("Base__Indexed_container", ("\196\246\213\141\196d\130\002\232\162\144y\149\236\145\218")); ("Base__Import0", ("\156\129U\197Y[\\\153\017Ho\203\173\204\220\020")); ("Base__Import", ("\014\187\247\141\187\181\142g\176:s_,\181\219\209")); ("Base__Identifiable_intf", ("hK7}\187\129\022-r\233\241\192Q\161=j")); ("Base__Identifiable", ("L\020\162\189\228\217^\171\158H_\157\164c\130\242")); ("Base__Hashable_intf", ("\128\015G\244\135R\026\202\128F?)\193\004\195\181")); ("Base__Hashable", ("\027\187\158\245r}\018\193dbq\196\005\170g\252")); ("Base__Hash_intf", ("h\004P\218\1531G\127\212\208A\024\140\164iq")); ("Base__Hash", ("\206Rc\194\234{s3\248\165\024\162\203{\206\206")); ("Base__Globalize", ("<\243w~.\180\196t\159\193\174[\227\139\215G")); ("Base__Formatter", ("\193\149\030\140\154\1505b\162a`%\243\185'%")); ("Base__Floatable", ("\239\176\151\139\173ft(q\190\205\030C\170\197\177")); ("Base__Float", ("tR$\252\165\134g\024>\127\254\245\212-\018\141")); ("Base__Field", ("8In\234X\202\188G\186\208$\192\175\136\214v")); ("Base__Exn", ("?\191\202\221\228\185\154\127\240\191o\134\020\186b\173")); ("Base__Error", ("\199\218\231n\155/\159\156\146\247\148t\237\003\t\153")); ("Base__Equal", ("\193\217Z\127he\141N\000\1447\030\236%\131\b")); ("Base__Either0", ("!9-\011n\2077eZ\212\031c\227\029\206\t")); ("Base__Container_intf", ("\170vo*\208\209\141\219\196\168\236l\016\246\012c")); ("Base__Container", ("\191|>_\153W\235M\180uKz\214w`q")); ("Base__Comparisons", ("\196\196Y\"{\163~)\\G/\155:\004\141;")); ("Base__Comparator", ("\002\135z7b\025&\207\t\188\239&U3R\167")); ("Base__Comparable_intf", ("\252n\002\221\246\143r\235oJ\240\151\202\211\161\254")); ("Base__Comparable", (":\134'\156u#\215\225\129\191\162\229\200\185l\012")); ("Base__Char", ("\206\224\186\000'\157$\023\023\190\198{\250\141a\216")); ("Base__Bytes", ("\028\001\232X(\240\139\227s\152\156\138\023\030\r\188")); ("Base__Buffer_intf", ("\029\177op\168r\007\134\nj\217q\237%\167m")); ("Base__Buffer", ("\1347\241z\228\198Hz?\243\248\155\155\248\029I")); ("Base__Bool0", ("\177f\254p\023\143&\239\020\136\206\242~\018F\251")); ("Base__Bool", ("\162+\012Rx\183c\226\131\190@Z\016q\138@")); ("Base__Blit_intf", ("\171\129\t\214\130\131O\210\251F\228.\168\004Vo")); ("Base__Blit", ("}g\242\161\000\216\132\220\195\230C\002jg\234j")); ("Base__Binary_searchable_intf", ("/\213\237\209\200\192$w\158\234\169\148\012\221W\019")); ("Base__Binary_searchable", ("V\022B_\233\194\145K\248\233\025\175U\155i\197")); ("Base__Backtrace", ("\212~\253E\024|\228\141\015\169\012\006\022\0065\181")); ("Base__Array", ("P\252F\172\242{\241\226#uu\207\2068\218\015")); ("Base__Applicative_intf", ("J\176\203\159\235N(\235\027\232\198+\224\205*A")); ("Base__Applicative", ("\157\024\176\241a\165\204\133\003s3\214\007\131\244\n")); ("Base__", ("p\252\007\139\128\163W\025+\0225\001\246|P\158")); ("Base", ("\167SY\027Q9E\005r,\198\164\161\023\170\151"))], [(0)])
val read_all : Base.string -> Base.string

module type S =
  sig
    type t = Uchar.t [@@immediate]
    type utf_decode = Uchar.utf_decode [@@immediate]
    val utf_decode_is_valid : utf_decode -> bool
    val utf_decode_uchar : utf_decode -> t
    val utf_decode_length : utf_decode -> int
    val utf_decode : int -> t -> utf_decode
    val utf_decode_invalid : int -> utf_decode
    val utf_8_byte_length : t -> int
    val utf_16_byte_length : t -> int
    val bom : t
    val rep : t
    val min : t
    val max : t
    val succ : t -> t
    val pred : t -> t
    val is_valid : int -> bool
    val of_int : int -> t
    val unsafe_of_int : int -> t
    val to_int : t -> int
    val is_char : t -> bool
    val of_char : char -> t
    val to_char : t -> char
    val unsafe_to_char : t -> char
    val equal : t -> t -> bool
    val compare : t -> t -> int
    val hash : t -> int("DEBUG:rule", [Tag4 (("S", 374), ((Tag1 ([Tag1 (("t", 375), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Uchar"), "t"), 0, (0)), 100000000, 0, -73)), 0, 0, 0, 0, (("stdcompat__uchar_s.mli", 14, 86, 86), ("stdcompat__uchar_s.mli", 14, 86, 116), 0), [(("immediate", (("stdcompat__uchar_s.mli", 14, 86, 105), ("stdcompat__uchar_s.mli", 14, 86, 114), 0)), (0), (("stdcompat__uchar_s.mli", 14, 86, 102), ("stdcompat__uchar_s.mli", 14, 86, 116), 0))], 1, 0, Tag1 ("Stdcompat__uchar_s", 0)), 1, 0); Tag1 (("utf_decode", 376), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Uchar"), "utf_decode"), 0, (0)), 100000000, 0, -72)), 0, 0, 0, 0, (("stdcompat__uchar_s.mli", 62, 375, 375), ("stdcompat__uchar_s.mli", 62, 375, 423), 0), [(("immediate", (("stdcompat__uchar_s.mli", 62, 375, 412), ("stdcompat__uchar_s.mli", 62, 375, 421), 0)), (0), (("stdcompat__uchar_s.mli", 62, 375, 409), ("stdcompat__uchar_s.mli", 62, 375, 423), 0))], 1, 0, Tag1 ("Stdcompat__uchar_s", 1)), 1, 0); (("utf_decode_is_valid", 377), ((Tag1 (0, (Tag3 ((("utf_decode", 376)), 0, (0)), 100000000, 0, -71), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -70), 0), 100000000, 0, -69), 0, (("stdcompat__uchar_s.mli", 81, 583, 583), ("stdcompat__uchar_s.mli", 81, 583, 627), 0), 0, Tag1 ("Stdcompat__uchar_s", 2)), 0); (("utf_decode_uchar", 378), ((Tag1 (0, (Tag3 ((("utf_decode", 376)), 0, (0)), 100000000, 0, -68), (Tag3 ((("t", 375)), 0, (0)), 100000000, 0, -67), 0), 100000000, 0, -66), 0, (("stdcompat__uchar_s.mli", 84, 696, 696), ("stdcompat__uchar_s.mli", 84, 696, 734), 0), 0, Tag1 ("Stdcompat__uchar_s", 3)), 0); (("utf_decode_length", 379), ((Tag1 (0, (Tag3 ((("utf_decode", 376)), 0, (0)), 100000000, 0, -65), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -64), 0), 100000000, 0, -63), 0, (("stdcompat__uchar_s.mli", 87, 797, 797), ("stdcompat__uchar_s.mli", 87, 797, 838), 0), 0, Tag1 ("Stdcompat__uchar_s", 4)), 0); (("utf_decode", 380), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -62), (Tag1 (0, (Tag3 ((("t", 375)), 0, (0)), 100000000, 0, -61), (Tag3 ((("utf_decode", 376)), 0, (0)), 100000000, 0, -60), 0), 100000000, 0, -59), 0), 100000000, 0, -58), 0, (("stdcompat__uchar_s.mli", 90, 904, 904), ("stdcompat__uchar_s.mli", 90, 904, 943), 0), 0, Tag1 ("Stdcompat__uchar_s", 5)), 0); (("utf_decode_invalid", 381), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -57), (Tag3 ((("utf_decode", 376)), 0, (0)), 100000000, 0, -56), 0), 100000000, 0, -55), 0, (("stdcompat__uchar_s.mli", 93, 1007, 1007), ("stdcompat__uchar_s.mli", 93, 1007, 1049), 0), 0, Tag1 ("Stdcompat__uchar_s", 6)), 0); (("utf_8_byte_length", 382), ((Tag1 (0, (Tag3 ((("t", 375)), 0, (0)), 100000000, 0, -54), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -53), 0), 100000000, 0, -52), 0, (("stdcompat__uchar_s.mli", 96, 1116, 1116), ("stdcompat__uchar_s.mli", 96, 1116, 1148), 0), 0, Tag1 ("Stdcompat__uchar_s", 7)), 0); (("utf_16_byte_length", 383), ((Tag1 (0, (Tag3 ((("t", 375)), 0, (0)), 100000000, 0, -51), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -50), 0), 100000000, 0, -49), 0, (("stdcompat__uchar_s.mli", 99, 1205, 1205), ("stdcompat__uchar_s.mli", 99, 1205, 1238), 0), 0, Tag1 ("Stdcompat__uchar_s", 8)), 0); (("bom", 384), ((Tag3 ((("t", 375)), 0, (0)), 100000000, 0, -48), 0, (("stdcompat__uchar_s.mli", 102, 1296, 1296), ("stdcompat__uchar_s.mli", 102, 1296, 1307), 0), 0, Tag1 ("Stdcompat__uchar_s", 9)), 0); (("rep", 385), ((Tag3 ((("t", 375)), 0, (0)), 100000000, 0, -47), 0, (("stdcompat__uchar_s.mli", 105, 1343, 1343), ("stdcompat__uchar_s.mli", 105, 1343, 1354), 0), 0, Tag1 ("Stdcompat__uchar_s", 10)), 0); (("min", 386), ((Tag3 ((("t", 375)), 0, (0)), 100000000, 0, -46), 0, (("stdcompat__uchar_s.mli", 108, 1390, 1390), ("stdcompat__uchar_s.mli", 108, 1390, 1401), 0), 0, Tag1 ("Stdcompat__uchar_s", 11)), 0); (("max", 387), ((Tag3 ((("t", 375)), 0, (0)), 100000000, 0, -45), 0, (("stdcompat__uchar_s.mli", 111, 1437, 1437), ("stdcompat__uchar_s.mli", 111, 1437, 1448), 0), 0, Tag1 ("Stdcompat__uchar_s", 12)), 0); (("succ", 388), ((Tag1 (0, (Tag3 ((("t", 375)), 0, (0)), 100000000, 0, -44), (Tag3 ((("t", 375)), 0, (0)), 100000000, 0, -43), 0), 100000000, 0, -42), 0, (("stdcompat__uchar_s.mli", 114, 1484, 1484), ("stdcompat__uchar_s.mli", 114, 1484, 1501), 0), 0, Tag1 ("Stdcompat__uchar_s", 13)), 0); (("pred", 389), ((Tag1 (0, (Tag3 ((("t", 375)), 0, (0)), 100000000, 0, -41), (Tag3 ((("t", 375)), 0, (0)), 100000000, 0, -40), 0), 100000000, 0, -39), 0, (("stdcompat__uchar_s.mli", 117, 1543, 1543), ("stdcompat__uchar_s.mli", 117, 1543, 1560), 0), 0, Tag1 ("Stdcompat__uchar_s", 14)), 0); (("is_valid", 390), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -38), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -37), 0), 100000000, 0, -36), 0, (("stdcompat__uchar_s.mli", 120, 1602, 1602), ("stdcompat__uchar_s.mli", 120, 1602, 1628), 0), 0, Tag1 ("Stdcompat__uchar_s", 15)), 0); (("of_int", 391), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -35), (Tag3 ((("t", 375)), 0, (0)), 100000000, 0, -34), 0), 100000000, 0, -33), 0, (("stdcompat__uchar_s.mli", 123, 1679, 1679), ("stdcompat__uchar_s.mli", 123, 1679, 1700), 0), 0, Tag1 ("Stdcompat__uchar_s", 16)), 0); (("unsafe_of_int", 392), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -32), (Tag3 ((("t", 375)), 0, (0)), 100000000, 0, -31), 0), 100000000, 0, -30), 0, (("stdcompat__uchar_s.mli", 126, 1746, 1746), ("stdcompat__uchar_s.mli", 126, 1746, 1774), 0), 0, Tag1 ("Stdcompat__uchar_s", 17)), 0); (("to_int", 393), ((Tag1 (0, (Tag3 ((("t", 375)), 0, (0)), 100000000, 0, -29), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -28), 0), 100000000, 0, -27), 0, (("stdcompat__uchar_s.mli", 129, 1827, 1827), ("stdcompat__uchar_s.mli", 129, 1827, 1848), 0), 0, Tag1 ("Stdcompat__uchar_s", 18)), 0); (("is_char", 394), ((Tag1 (0, (Tag3 ((("t", 375)), 0, (0)), 100000000, 0, -26), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -25), 0), 100000000, 0, -24), 0, (("stdcompat__uchar_s.mli", 132, 1894, 1894), ("stdcompat__uchar_s.mli", 132, 1894, 1917), 0), 0, Tag1 ("Stdcompat__uchar_s", 19)), 0); (("of_char", 395), ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -23), (Tag3 ((("t", 375)), 0, (0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0, (("stdcompat__uchar_s.mli", 135, 1965, 1965), ("stdcompat__uchar_s.mli", 135, 1965, 1988), 0), 0, Tag1 ("Stdcompat__uchar_s", 20)), 0); (("to_char", 396), ((Tag1 (0, (Tag3 ((("t", 375)), 0, (0)), 100000000, 0, -20), (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -19), 0), 100000000, 0, -18), 0, (("stdcompat__uchar_s.mli", 138, 2036, 2036), ("stdcompat__uchar_s.mli", 138, 2036, 2059), 0), 0, Tag1 ("Stdcompat__uchar_s", 21)), 0); (("unsafe_to_char", 397), ((Tag1 (0, (Tag3 ((("t", 375)), 0, (0)), 100000000, 0, -17), (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -16), 0), 100000000, 0, -15), 0, (("stdcompat__uchar_s.mli", 141, 2107, 2107), ("stdcompat__uchar_s.mli", 141, 2107, 2137), 0), 0, Tag1 ("Stdcompat__uchar_s", 22)), 0); (("equal", 398), ((Tag1 (0, (Tag3 ((("t", 375)), 0, (0)), 100000000, 0, -14), (Tag1 (0, (Tag3 ((("t", 375)), 0, (0)), 100000000, 0, -13), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0), 100000000, 0, -10), 0, (("stdcompat__uchar_s.mli", 144, 2192, 2192), ("stdcompat__uchar_s.mli", 144, 2192, 2218), 0), 0, Tag1 ("Stdcompat__uchar_s", 23)), 0); (("compare", 399), ((Tag1 (0, (Tag3 ((("t", 375)), 0, (0)), 100000000, 0, -9), (Tag1 (0, (Tag3 ((("t", 375)), 0, (0)), 100000000, 0, -8), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("stdcompat__uchar_s.mli", 147, 2269, 2269), ("stdcompat__uchar_s.mli", 147, 2269, 2296), 0), 0, Tag1 ("Stdcompat__uchar_s", 24)), 0); (("hash", 400), ((Tag1 (0, (Tag3 ((("t", 375)), 0, (0)), 100000000, 0, -4), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("stdcompat__uchar_s.mli", 150, 2348, 2348), ("stdcompat__uchar_s.mli", 150, 2348, 2367), 0), 0, Tag1 ("Stdcompat__uchar_s", 25)), 0)])), 0, (("stdcompat__uchar_s.mli", 1, 0, 0), ("stdcompat__uchar_s.mli", 153, 2411, 2414), 0), Tag1 ("Stdcompat__uchar_s", 26)), 0)], "Stdcompat__uchar_s", [("Stdcompat__uchar_s", ("\194\157:\245\153M\184\155|4\1467\n\194%M")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

  end

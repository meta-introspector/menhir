type ('a, 'b) pointer = ('a, 'b) Ctypes_static.pointer
type 'a ptr = ('a, [ `C ]) pointer
type 'a ocaml = 'a Ctypes_static.ocaml
type 'a carray = 'a Ctypes_static.carray
type 'a bigarray_class = 'a Ctypes_static.bigarray_class
val genarray :
  < ba_repr : 'b; bigarray : ('a, 'b, 'l) Bigarray_compat.Genarray.t;
    carray : 'a carray; dims : int array; element : 'a; layout : 'l >
  bigarray_class
val array1 :
  < ba_repr : 'b; bigarray : ('a, 'b, 'l) Bigarray_compat.Array1.t;
    carray : 'a carray; dims : int; element : 'a; layout : 'l >
  bigarray_class
val array2 :
  < ba_repr : 'b; bigarray : ('a, 'b, 'l) Bigarray_compat.Array2.t;
    carray : 'a carray carray; dims : int * int; element : 'a; layout : 'l >
  bigarray_class
val array3 :
  < ba_repr : 'b; bigarray : ('a, 'b, 'l) Bigarray_compat.Array3.t;
    carray : 'a carray carray carray; dims : int * int * int; element : 'a;
    layout : 'l >
  bigarray_class
type ('a, 'kind) structured = ('a, 'kind) Ctypes_static.structured
type 'a structure = ('a, [ `Struct ]) structured
type 'a union = ('a, [ `Union ]) structured
type ('a, 't) field = ('a, 't) Ctypes_static.field
type 'a abstract = 'a Ctypes_static.abstract
type 'a typ = 'a Ctypes_static.typ
val void : unit typ
val char : char typ
val schar : int typ
val short : int typ
val int : int typ
val long : Signed.long typ
val llong : Signed.llong typ
val nativeint : nativeint typ
val int8_t : int typ
val int16_t : int typ
val int32_t : int32 typ
val int64_t : int64 typ
module Intptr : Signed.S
val intptr_t : Intptr.t typ
module Ptrdiff : Signed.S
val ptrdiff_t : Ptrdiff.t typ
val camlint : int typ
val uchar : Unsigned.uchar typ
val bool : bool typ
val uint8_t : Unsigned.uint8 typ
val uint16_t : Unsigned.uint16 typ
val uint32_t : Unsigned.uint32 typ
val uint64_t : Unsigned.uint64 typ
val size_t : Unsigned.size_t typ
val ushort : Unsigned.ushort typ
val sint : Signed.sint typ
val uint : Unsigned.uint typ
val ulong : Unsigned.ulong typ
val ullong : Unsigned.ullong typ
module Uintptr : Unsigned.S
val uintptr_t : Uintptr.t typ
val float : float typ
val double : float typ
val ldouble : LDouble.t typ
val complex32 : Complex.t typ
val complex64 : Complex.t typ
val complexld : ComplexL.t typ
val ptr : 'a typ -> 'a Ctypes_static.ptr typ
val ptr_opt : 'a typ -> 'a Ctypes_static.ptr option typ
val string : string typ
val string_opt : string option typ
val ocaml_string : string Ctypes_static.ocaml typ
val ocaml_bytes : bytes Ctypes_static.ocaml typ
val array : int -> 'a typ -> 'a Ctypes_static.carray typ
val bigarray :
  < ba_repr : 'b; bigarray : 'bigarray; carray : 'c; dims : 'dims;
    element : 'a; layout : Bigarray_compat.c_layout >
  Ctypes_static.bigarray_class ->
  'dims -> ('a, 'b) Bigarray_compat.kind -> 'bigarray typ
val fortran_bigarray :
  < ba_repr : 'b; bigarray : 'bigarray; carray : 'c; dims : 'dims;
    element : 'a; layout : Bigarray_compat.fortran_layout >
  Ctypes_static.bigarray_class ->
  'dims -> ('a, 'b) Bigarray_compat.kind -> 'bigarray typ
val typ_of_bigarray_kind : ('a, 'b) Bigarray_compat.kind -> 'a typ
val structure : string -> 's Ctypes_static.structure typ
val union : string -> 's Ctypes_static.union typ
val field :
  ('s, [< `Struct | `Union ] as 'b) Ctypes_static.structured typ ->
  string -> 'a typ -> ('a, ('s, 'b) Ctypes_static.structured) field
val seal : ('a, [< `Struct | `Union ]) Ctypes_static.structured typ -> unit
val view :
  ?format_typ:((Format.formatter -> unit) -> Format.formatter -> unit) ->
  ?format:(Format.formatter -> 'b -> unit) ->
  read:('a -> 'b) -> write:('b -> 'a) -> 'a typ -> 'b typ
val typedef : 'a typ -> string -> 'a typ
val abstract :
  name:string -> size:int -> alignment:int -> 'a Ctypes_static.abstract typ
val lift_typ : 'a Ctypes_static.typ -> 'a typ
type 'a fn = 'a Ctypes_static.fn
val ( @-> ) : 'a typ -> 'b fn -> ('a -> 'b) fn
val returning : 'a typ -> 'a fn
type 'a static_funptr = 'a Ctypes_static.static_funptr
val static_funptr : 'a fn -> 'a Ctypes_static.static_funptr typ
val sizeof : 'a typ -> int
val alignment : 'a typ -> int
val format_typ : ?name:string -> Format.formatter -> 'a typ -> unit
val format_fn : ?name:string -> Format.formatter -> 'a fn -> unit
val string_of_typ : ?name:string -> 'a typ -> string
val string_of_fn : ?name:string -> 'a fn -> string
val format : 'a typ -> Format.formatter -> 'a -> unit
val string_of : 'a typ -> 'a -> string
val null : unit ptr
val ( !@ ) : 'a ptr -> 'a
val ( <-@ ) : 'a ptr -> 'a -> unit
val ( +@ ) : ('a, 'b) pointer -> int -> ('a, 'b) pointer
val ( -@ ) : ('a, 'b) pointer -> int -> ('a, 'b) pointer
val ptr_diff : ('a, 'b) pointer -> ('a, 'b) pointer -> int
val from_voidp : 'a typ -> unit ptr -> 'a ptr
val to_voidp : 'a ptr -> unit ptr
val allocate : ?finalise:('a ptr -> unit) -> 'a typ -> 'a -> 'a ptr
val allocate_n : ?finalise:('a ptr -> unit) -> 'a typ -> count:int -> 'a ptr
val ptr_compare : 'a ptr -> 'a ptr -> int
val is_null : 'a ptr -> bool
val reference_type : 'a ptr -> 'a typ
val ptr_of_raw_address : nativeint -> unit ptr
val funptr_of_raw_address :
  nativeint -> (unit -> unit) Ctypes_static.static_funptr
val raw_address_of_ptr : unit ptr -> nativeint
val string_from_ptr : char ptr -> length:int -> string
val ocaml_string_start : string -> string ocaml
val ocaml_bytes_start : bytes -> bytes ocaml
module CArray :
  sig
    type 'a t = 'a carray
    val get : 'a t -> int -> 'a
    val set : 'a t -> int -> 'a -> unit
    val unsafe_get : 'a t -> int -> 'a
    val unsafe_set : 'a t -> int -> 'a -> unit
    val of_string : string -> char t
    val of_list : 'a typ -> 'a list -> 'a t
    val to_list : 'a t -> 'a list
    val iter : ('a -> unit) -> 'a t -> unit
    val map : 'b typ -> ('a -> 'b) -> 'a t -> 'b t
    val mapi : 'b typ -> (int -> 'a -> 'b) -> 'a t -> 'b t
    val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b t -> 'a
    val fold_right : ('b -> 'a -> 'a) -> 'b t -> 'a -> 'a
    val length : 'a t -> int
    val start : 'a t -> 'a ptr
    val from_ptr : 'a ptr -> int -> 'a t
    val make :
      ?finalise:('a t -> unit) -> 'a typ -> ?initial:'a -> int -> 'a t
    val copy : 'a t -> 'a t
    val sub : 'a t -> pos:int -> length:int -> 'a t
    val element_type : 'a t -> 'a typ
  end
val bigarray_start :
  < ba_repr : 'c; bigarray : 'b; carray : 'd; dims : 'e; element : 'a;
    layout : 'l >
  bigarray_class -> 'b -> 'a ptr
val bigarray_of_ptr :
  < ba_repr : 'f; bigarray : 'b; carray : 'c; dims : 'i; element : 'a;
    layout : Bigarray_compat.c_layout >
  bigarray_class -> 'i -> ('a, 'f) Bigarray_compat.kind -> 'a ptr -> 'b
val fortran_bigarray_of_ptr :
  < ba_repr : 'f; bigarray : 'b; carray : 'c; dims : 'i; element : 'a;
    layout : Bigarray_compat.fortran_layout >
  bigarray_class -> 'i -> ('a, 'f) Bigarray_compat.kind -> 'a ptr -> 'b
val array_of_bigarray :
  < ba_repr : 'a; bigarray : 'b; carray : 'c; dims : 'd; element : 'e;
    layout : Bigarray_compat.c_layout >
  bigarray_class -> 'b -> 'c
val bigarray_of_array :
  < ba_repr : 'f; bigarray : 'b; carray : 'c carray; dims : 'i; element : 'a;
    layout : Bigarray_compat.c_layout >
  bigarray_class -> ('a, 'f) Bigarray_compat.kind -> 'c carray -> 'b
val make :
  ?finalise:(('a, 'b) structured -> unit) ->
  ('a, 'b) structured typ -> ('a, 'b) structured
val setf :
  ('b, 'c) structured -> ('a, ('b, 'c) structured) field -> 'a -> unit
val getf : ('b, 'c) structured -> ('a, ('b, 'c) structured) field -> 'a
val ( @. ) : ('b, 'c) structured -> ('a, ('b, 'c) structured) field -> 'a ptr
val ( |-> ) :
  ('b, 'c) structured ptr -> ('a, ('b, 'c) structured) field -> 'a ptr
val offsetof : ('a, 'b structure) field -> int
val field_type : ('a, 'b) field -> 'a typ
val field_name : ('a, 'b) field -> string
val addr : ('a, 'b) structured -> ('a, 'b) structured ptr
val coerce : 'a typ -> 'b typ -> 'a -> 'b
val coerce_fn : 'a fn -> 'b fn -> 'a -> 'b
module type FOREIGN =
  sig
    type 'a fn
    type 'a return
    val ( @-> ) : 'a typ -> 'b fn -> ('a -> 'b) fn
    val returning : 'a typ -> 'a return fn
    type 'a result
    val foreign : string -> ('a -> 'b) fn -> ('a -> 'b) result
    val foreign_value : string -> 'a typ -> 'a ptr result
  end
module type TYPE =
  sig
    type 'a typ
    val void : unit typ
    val char : char typ
    val schar : int typ
    val short : int typ
    val int : int typ
    val long : Signed.long typ
    val llong : Signed.llong typ
    val nativeint : nativeint typ
    val int8_t : int typ
    val int16_t : int typ
    val int32_t : int32 typ
    val int64_t : int64 typ
    module Intptr : Signed.S
    val intptr_t : Intptr.t typ
    module Ptrdiff : Signed.S
    val ptrdiff_t : Ptrdiff.t typ
    val camlint : int typ
    val uchar : Unsigned.uchar typ
    val bool : bool typ
    val uint8_t : Unsigned.uint8 typ
    val uint16_t : Unsigned.uint16 typ
    val uint32_t : Unsigned.uint32 typ
    val uint64_t : Unsigned.uint64 typ
    val size_t : Unsigned.size_t typ
    val ushort : Unsigned.ushort typ
    val sint : Signed.sint typ
    val uint : Unsigned.uint typ
    val ulong : Unsigned.ulong typ
    val ullong : Unsigned.ullong typ
    module Uintptr : Unsigned.S
    val uintptr_t : Uintptr.t typ
    val float : float typ
    val double : float typ
    val ldouble : LDouble.t typ
    val complex32 : Complex.t typ
    val complex64 : Complex.t typ
    val complexld : ComplexL.t typ
    val ptr : 'a typ -> 'a Ctypes_static.ptr typ
    val ptr_opt : 'a typ -> 'a Ctypes_static.ptr option typ
    val string : string typ
    val string_opt : string option typ
    val ocaml_string : string Ctypes_static.ocaml typ
    val ocaml_bytes : bytes Ctypes_static.ocaml typ
    val array : int -> 'a typ -> 'a Ctypes_static.carray typ
    val bigarray :
      < ba_repr : 'b; bigarray : 'bigarray; carray : 'c; dims : 'dims;
        element : 'a; layout : Bigarray_compat.c_layout >
      Ctypes_static.bigarray_class ->
      'dims -> ('a, 'b) Bigarray_compat.kind -> 'bigarray typ
    val fortran_bigarray :
      < ba_repr : 'b; bigarray : 'bigarray; carray : 'c; dims : 'dims;
        element : 'a; layout : Bigarray_compat.fortran_layout >
      Ctypes_static.bigarray_class ->
      'dims -> ('a, 'b) Bigarray_compat.kind -> 'bigarray typ
    val typ_of_bigarray_kind : ('a, 'b) Bigarray_compat.kind -> 'a typ
    type ('a, 't) field
    val structure : string -> 's Ctypes_static.structure typ
    val union : string -> 's Ctypes_static.union typ
    val field :
      ('s, [< `Struct | `Union ] as 'b) Ctypes_static.structured typ ->
      string -> 'a typ -> ('a, ('s, 'b) Ctypes_static.structured) field
    val seal :
      ('a, [< `Struct | `Union ]) Ctypes_static.structured typ -> unit
    val view :
      ?format_typ:((Format.formatter -> unit) -> Format.formatter -> unit) ->
      ?format:(Format.formatter -> 'b -> unit) ->
      read:('a -> 'b) -> write:('b -> 'a) -> 'a typ -> 'b typ
    val typedef : 'a typ -> string -> 'a typ
    val abstract :
      name:string ->
      size:int -> alignment:int -> 'a Ctypes_static.abstract typ
    val lift_typ : 'a Ctypes_static.typ -> 'a typ
    type 'a fn = 'a Ctypes_static.fn
    val ( @-> ) : 'a typ -> 'b fn -> ('a -> 'b) fn
    val returning : 'a typ -> 'a fn
    type 'a static_funptr = 'a Ctypes_static.static_funptr
    val static_funptr : 'a fn -> 'a Ctypes_static.static_funptr typ
    type 'a const
    val constant : string -> 'a typ -> 'a const
    val enum :
      string ->
      ?typedef:bool ->
      ?unexpected:(int64 -> 'a) -> ('a * int64 const) list -> 'a typ
  end
module Root :
  sig
    val create : 'a -> unit ptr
    val get : unit ptr -> 'a
    val set : unit ptr -> 'a -> unit
    val release : unit ptr -> unit
  end
exception Unsupported of string
exception ModifyingSealedType of string
exception IncompleteType
type uncoercible_info("DEBUG:rule", [Tag1 (("pointer", 1245), ([((("a")), 100000000, 0, -737); ((("b")), 100000000, 0, -738)], 2, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "pointer"), [((("a")), 100000000, 0, -737); ((("b")), 100000000, 0, -738)], (0)), 100000000, 0, -736)), [63; 63], [0; 0], 0, 0, (("src/ctypes/ctypes.mli", 18, 479, 479), ("src/ctypes/ctypes.mli", 18, 479, 533), 0), 0, 0, 0, Tag1 ("Ctypes", 0)), 1, 0); Tag1 (("ptr", 1246), ([((("a")), 100000000, 0, -733)], 1, 0, 1, ((Tag3 ((("pointer", 1245)), [((("a")), 100000000, 0, -733); (Tag8 (([("C", (0))], (0, 100000000, 0, -735), 1, 0, 0)), 100000000, 0, -734)], (0)), 100000000, 0, -732)), [63], [0], 0, 0, (("src/ctypes/ctypes.mli", 25, 793, 793), ("src/ctypes/ctypes.mli", 25, 793, 825), 0), 0, 0, 0, Tag1 ("Ctypes", 1)), 1, 0); Tag1 (("ocaml", 1247), ([((("a")), 100000000, 0, -731)], 1, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "ocaml"), [((("a")), 100000000, 0, -731)], (0)), 100000000, 0, -730)), [63], [0], 0, 0, (("src/ctypes/ctypes.mli", 29, 978, 978), ("src/ctypes/ctypes.mli", 29, 978, 1016), 0), 0, 0, 0, Tag1 ("Ctypes", 2)), 1, 0); Tag1 (("carray", 1248), ([((("a")), 100000000, 0, -729)], 1, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "carray"), [((("a")), 100000000, 0, -729)], (0)), 100000000, 0, -728)), [63], [0], 0, 0, (("src/ctypes/ctypes.mli", 37, 1283, 1283), ("src/ctypes/ctypes.mli", 37, 1283, 1323), 0), 0, 0, 0, Tag1 ("Ctypes", 3)), 1, 0); Tag1 (("bigarray_class", 1249), ([((("a")), 100000000, 0, -727)], 1, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "bigarray_class"), [((("a")), 100000000, 0, -727)], (0)), 100000000, 0, -726)), [63], [0], 0, 0, (("src/ctypes/ctypes.mli", 43, 1485, 1485), ("src/ctypes/ctypes.mli", 43, 1485, 1541), 0), 0, 1, 0, Tag1 ("Ctypes", 4)), 1, 0); (("genarray", 1250), ((Tag3 ((("bigarray_class", 1249)), [(Tag4 ((Tag5 ("ba_repr", 1, (Tag10 (((("b")), 100000000, 0, -719), 0), 100000000, 0, -725), (Tag5 ("bigarray", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((Tag2 ("Bigarray_compat")), "Genarray"), "t"), [((("a")), 100000000, 0, -718); ((("b")), 100000000, 0, -719); ((("l")), 100000000, 0, -720)], (0)), 100000000, 0, -717), 0), 100000000, 0, -716), (Tag5 ("carray", 1, (Tag10 ((Tag3 ((("carray", 1248)), [((("a")), 100000000, 0, -718)], (0)), 100000000, 0, -722), 0), 100000000, 0, -721), (Tag5 ("dims", 1, (Tag10 ((Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -715)], (0)), 100000000, 0, -714), 0), 100000000, 0, -713), (Tag5 ("element", 1, (Tag10 (((("a")), 100000000, 0, -718), 0), 100000000, 0, -724), (Tag5 ("layout", 1, (Tag10 (((("l")), 100000000, 0, -720), 0), 100000000, 0, -723), (0, 100000000, 0, -712)), 100000000, 0, 40)), 100000000, 0, 41)), 100000000, 0, 42)), 100000000, 0, 43)), 100000000, 0, 44)), 100000000, 0, -706), (0)), 100000000, 0, -705)], (0)), 100000000, 0, -704), 0, (("src/ctypes/ctypes.mli", 47, 1652, 1652), ("src/ctypes/ctypes.mli", 53, 1795, 1831), 0), 0, Tag1 ("Ctypes", 5)), 0); (("array1", 1251), ((Tag3 ((("bigarray_class", 1249)), [(Tag4 ((Tag5 ("ba_repr", 1, (Tag10 (((("b")), 100000000, 0, -697), 0), 100000000, 0, -703), (Tag5 ("bigarray", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((Tag2 ("Bigarray_compat")), "Array1"), "t"), [((("a")), 100000000, 0, -696); ((("b")), 100000000, 0, -697); ((("l")), 100000000, 0, -698)], (0)), 100000000, 0, -695), 0), 100000000, 0, -694), (Tag5 ("carray", 1, (Tag10 ((Tag3 ((("carray", 1248)), [((("a")), 100000000, 0, -696)], (0)), 100000000, 0, -700), 0), 100000000, 0, -699), (Tag5 ("dims", 1, (Tag10 ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -693), 0), 100000000, 0, -692), (Tag5 ("element", 1, (Tag10 (((("a")), 100000000, 0, -696), 0), 100000000, 0, -702), (Tag5 ("layout", 1, (Tag10 (((("l")), 100000000, 0, -698), 0), 100000000, 0, -701), (0, 100000000, 0, -691)), 100000000, 0, 46)), 100000000, 0, 47)), 100000000, 0, 48)), 100000000, 0, 49)), 100000000, 0, 50)), 100000000, 0, -685), (0)), 100000000, 0, -684)], (0)), 100000000, 0, -683), 0, (("src/ctypes/ctypes.mli", 56, 1883, 1883), ("src/ctypes/ctypes.mli", 62, 2022, 2052), 0), 0, Tag1 ("Ctypes", 6)), 0); (("array2", 1252), ((Tag3 ((("bigarray_class", 1249)), [(Tag4 ((Tag5 ("ba_repr", 1, (Tag10 (((("b")), 100000000, 0, -675), 0), 100000000, 0, -682), (Tag5 ("bigarray", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((Tag2 ("Bigarray_compat")), "Array2"), "t"), [((("a")), 100000000, 0, -674); ((("b")), 100000000, 0, -675); ((("l")), 100000000, 0, -676)], (0)), 100000000, 0, -673), 0), 100000000, 0, -672), (Tag5 ("carray", 1, (Tag10 ((Tag3 ((("carray", 1248)), [(Tag3 ((("carray", 1248)), [((("a")), 100000000, 0, -674)], (0)), 100000000, 0, -679)], (0)), 100000000, 0, -678), 0), 100000000, 0, -677), (Tag5 ("dims", 1, (Tag10 ((Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -670); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -671)]), 100000000, 0, -669), 0), 100000000, 0, -668), (Tag5 ("element", 1, (Tag10 (((("a")), 100000000, 0, -674), 0), 100000000, 0, -681), (Tag5 ("layout", 1, (Tag10 (((("l")), 100000000, 0, -676), 0), 100000000, 0, -680), (0, 100000000, 0, -667)), 100000000, 0, 52)), 100000000, 0, 53)), 100000000, 0, 54)), 100000000, 0, 55)), 100000000, 0, 56)), 100000000, 0, -661), (0)), 100000000, 0, -660)], (0)), 100000000, 0, -659), 0, (("src/ctypes/ctypes.mli", 65, 2102, 2102), ("src/ctypes/ctypes.mli", 71, 2248, 2284), 0), 0, Tag1 ("Ctypes", 7)), 0); (("array3", 1253), ((Tag3 ((("bigarray_class", 1249)), [(Tag4 ((Tag5 ("ba_repr", 1, (Tag10 (((("b")), 100000000, 0, -650), 0), 100000000, 0, -658), (Tag5 ("bigarray", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((Tag2 ("Bigarray_compat")), "Array3"), "t"), [((("a")), 100000000, 0, -649); ((("b")), 100000000, 0, -650); ((("l")), 100000000, 0, -651)], (0)), 100000000, 0, -648), 0), 100000000, 0, -647), (Tag5 ("carray", 1, (Tag10 ((Tag3 ((("carray", 1248)), [(Tag3 ((("carray", 1248)), [(Tag3 ((("carray", 1248)), [((("a")), 100000000, 0, -649)], (0)), 100000000, 0, -655)], (0)), 100000000, 0, -654)], (0)), 100000000, 0, -653), 0), 100000000, 0, -652), (Tag5 ("dims", 1, (Tag10 ((Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -644); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -645); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -646)]), 100000000, 0, -643), 0), 100000000, 0, -642), (Tag5 ("element", 1, (Tag10 (((("a")), 100000000, 0, -649), 0), 100000000, 0, -657), (Tag5 ("layout", 1, (Tag10 (((("l")), 100000000, 0, -651), 0), 100000000, 0, -656), (0, 100000000, 0, -641)), 100000000, 0, 58)), 100000000, 0, 59)), 100000000, 0, 60)), 100000000, 0, 61)), 100000000, 0, 62)), 100000000, 0, -635), (0)), 100000000, 0, -634)], (0)), 100000000, 0, -633), 0, (("src/ctypes/ctypes.mli", 74, 2334, 2334), ("src/ctypes/ctypes.mli", 80, 2487, 2529), 0), 0, Tag1 ("Ctypes", 8)), 0); Tag1 (("structured", 1254), ([((("a")), 100000000, 0, -631); ((("kind")), 100000000, 0, -632)], 2, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "structured"), [((("a")), 100000000, 0, -631); ((("kind")), 100000000, 0, -632)], (0)), 100000000, 0, -630)), [63; 63], [0; 0], 0, 0, (("src/ctypes/ctypes.mli", 85, 2614, 2614), ("src/ctypes/ctypes.mli", 85, 2614, 2680), 0), 0, 0, 0, Tag1 ("Ctypes", 9)), 1, 0); Tag1 (("structure", 1255), ([((("a")), 100000000, 0, -627)], 1, 0, 1, ((Tag3 ((("structured", 1254)), [((("a")), 100000000, 0, -627); (Tag8 (([("Struct", (0))], (0, 100000000, 0, -629), 1, 0, 0)), 100000000, 0, -628)], (0)), 100000000, 0, -626)), [63], [0], 0, 0, (("src/ctypes/ctypes.mli", 90, 2896, 2896), ("src/ctypes/ctypes.mli", 90, 2896, 2942), 0), 0, 0, 0, Tag1 ("Ctypes", 10)), 1, 0); Tag1 (("union", 1256), ([((("a")), 100000000, 0, -623)], 1, 0, 1, ((Tag3 ((("structured", 1254)), [((("a")), 100000000, 0, -623); (Tag8 (([("Union", (0))], (0, 100000000, 0, -625), 1, 0, 0)), 100000000, 0, -624)], (0)), 100000000, 0, -622)), [63], [0], 0, 0, (("src/ctypes/ctypes.mli", 93, 2999, 2999), ("src/ctypes/ctypes.mli", 93, 2999, 3040), 0), 0, 0, 0, Tag1 ("Ctypes", 11)), 1, 0); Tag1 (("field", 1257), ([((("a")), 100000000, 0, -620); ((("t")), 100000000, 0, -621)], 2, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "field"), [((("a")), 100000000, 0, -620); ((("t")), 100000000, 0, -621)], (0)), 100000000, 0, -619)), [63; 8], [0; 0], 0, 0, (("src/ctypes/ctypes.mli", 96, 3096, 3096), ("src/ctypes/ctypes.mli", 96, 3096, 3146), 0), 0, 0, 0, Tag1 ("Ctypes", 12)), 1, 0); Tag1 (("abstract", 1258), ([((("a")), 100000000, 0, -618)], 1, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "abstract"), [((("a")), 100000000, 0, -618)], (0)), 100000000, 0, -617)), [63], [0], 0, 0, (("src/ctypes/ctypes.mli", 101, 3342, 3342), ("src/ctypes/ctypes.mli", 101, 3342, 3386), 0), 0, 0, 0, Tag1 ("Ctypes", 13)), 1, 0); Tag1 (("typ", 1259), ([((("a")), 100000000, 0, -616)], 1, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "typ"), [((("a")), 100000000, 0, -616)], (0)), 100000000, 0, -615)), [63], [0], 0, 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, 0, 0, Tag1 ("Ctypes", 14)), 1, 0); (("void", 1260), ((Tag3 ((("typ", 1259)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -614)], (0)), 100000000, 0, -613), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 1)), 0); (("char", 1261), ((Tag3 ((("typ", 1259)), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -612)], (0)), 100000000, 0, -611), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 2)), 0); (("schar", 1262), ((Tag3 ((("typ", 1259)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -610)], (0)), 100000000, 0, -609), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 3)), 0); (("short", 1263), ((Tag3 ((("typ", 1259)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -608)], (0)), 100000000, 0, -607), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 4)), 0); (("int", 1264), ((Tag3 ((("typ", 1259)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -606)], (0)), 100000000, 0, -605), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 5)), 0); (("long", 1265), ((Tag3 ((("typ", 1259)), [(Tag3 (Tag1 ((Tag2 ("Signed")), "long"), 0, (0)), 100000000, 0, -604)], (0)), 100000000, 0, -603), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 6)), 0); (("llong", 1266), ((Tag3 ((("typ", 1259)), [(Tag3 (Tag1 ((Tag2 ("Signed")), "llong"), 0, (0)), 100000000, 0, -602)], (0)), 100000000, 0, -601), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 7)), 0); (("nativeint", 1267), ((Tag3 ((("typ", 1259)), [(Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -600)], (0)), 100000000, 0, -599), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 8)), 0); (("int8_t", 1268), ((Tag3 ((("typ", 1259)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -598)], (0)), 100000000, 0, -597), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 9)), 0); (("int16_t", 1269), ((Tag3 ((("typ", 1259)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -596)], (0)), 100000000, 0, -595), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 10)), 0); (("int32_t", 1270), ((Tag3 ((("typ", 1259)), [(Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -594)], (0)), 100000000, 0, -593), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 11)), 0); (("int64_t", 1271), ((Tag3 ((("typ", 1259)), [(Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -592)], (0)), 100000000, 0, -591), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 12)), 0); Tag3 (("Intptr", 1272), 0, ((Tag1 ((Tag2 ("Signed")), "S")), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), Tag1 ("Ctypes_types", 13)), 0, 0); (("intptr_t", 1273), ((Tag3 ((("typ", 1259)), [(Tag3 (Tag1 ((("Intptr", 1272)), "t"), 0, (0)), 100000000, 0, -590)], (0)), 100000000, 0, -589), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 14)), 0); Tag3 (("Ptrdiff", 1274), 0, ((Tag1 ((Tag2 ("Signed")), "S")), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), Tag1 ("Ctypes_types", 15)), 0, 0); (("ptrdiff_t", 1275), ((Tag3 ((("typ", 1259)), [(Tag3 (Tag1 ((("Ptrdiff", 1274)), "t"), 0, (0)), 100000000, 0, -588)], (0)), 100000000, 0, -587), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 16)), 0); (("camlint", 1276), ((Tag3 ((("typ", 1259)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -586)], (0)), 100000000, 0, -585), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 17)), 0); (("uchar", 1277), ((Tag3 ((("typ", 1259)), [(Tag3 (Tag1 ((Tag2 ("Unsigned")), "uchar"), 0, (0)), 100000000, 0, -584)], (0)), 100000000, 0, -583), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 18)), 0); (("bool", 1278), ((Tag3 ((("typ", 1259)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -582)], (0)), 100000000, 0, -581), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 19)), 0); (("uint8_t", 1279), ((Tag3 ((("typ", 1259)), [(Tag3 (Tag1 ((Tag2 ("Unsigned")), "uint8"), 0, (0)), 100000000, 0, -580)], (0)), 100000000, 0, -579), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 20)), 0); (("uint16_t", 1280), ((Tag3 ((("typ", 1259)), [(Tag3 (Tag1 ((Tag2 ("Unsigned")), "uint16"), 0, (0)), 100000000, 0, -578)], (0)), 100000000, 0, -577), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 21)), 0); (("uint32_t", 1281), ((Tag3 ((("typ", 1259)), [(Tag3 (Tag1 ((Tag2 ("Unsigned")), "uint32"), 0, (0)), 100000000, 0, -576)], (0)), 100000000, 0, -575), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 22)), 0); (("uint64_t", 1282), ((Tag3 ((("typ", 1259)), [(Tag3 (Tag1 ((Tag2 ("Unsigned")), "uint64"), 0, (0)), 100000000, 0, -574)], (0)), 100000000, 0, -573), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 23)), 0); (("size_t", 1283), ((Tag3 ((("typ", 1259)), [(Tag3 (Tag1 ((Tag2 ("Unsigned")), "size_t"), 0, (0)), 100000000, 0, -572)], (0)), 100000000, 0, -571), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 24)), 0); (("ushort", 1284), ((Tag3 ((("typ", 1259)), [(Tag3 (Tag1 ((Tag2 ("Unsigned")), "ushort"), 0, (0)), 100000000, 0, -570)], (0)), 100000000, 0, -569), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 25)), 0); (("sint", 1285), ((Tag3 ((("typ", 1259)), [(Tag3 (Tag1 ((Tag2 ("Signed")), "sint"), 0, (0)), 100000000, 0, -568)], (0)), 100000000, 0, -567), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 26)), 0); (("uint", 1286), ((Tag3 ((("typ", 1259)), [(Tag3 (Tag1 ((Tag2 ("Unsigned")), "uint"), 0, (0)), 100000000, 0, -566)], (0)), 100000000, 0, -565), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 27)), 0); (("ulong", 1287), ((Tag3 ((("typ", 1259)), [(Tag3 (Tag1 ((Tag2 ("Unsigned")), "ulong"), 0, (0)), 100000000, 0, -564)], (0)), 100000000, 0, -563), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 28)), 0); (("ullong", 1288), ((Tag3 ((("typ", 1259)), [(Tag3 (Tag1 ((Tag2 ("Unsigned")), "ullong"), 0, (0)), 100000000, 0, -562)], (0)), 100000000, 0, -561), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 29)), 0); Tag3 (("Uintptr", 1289), 0, ((Tag1 ((Tag2 ("Unsigned")), "S")), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), Tag1 ("Ctypes_types", 30)), 0, 0); (("uintptr_t", 1290), ((Tag3 ((("typ", 1259)), [(Tag3 (Tag1 ((("Uintptr", 1289)), "t"), 0, (0)), 100000000, 0, -560)], (0)), 100000000, 0, -559), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 31)), 0); (("float", 1291), ((Tag3 ((("typ", 1259)), [(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -558)], (0)), 100000000, 0, -557), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 32)), 0); (("double", 1292), ((Tag3 ((("typ", 1259)), [(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -556)], (0)), 100000000, 0, -555), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 33)), 0); (("ldouble", 1293), ((Tag3 ((("typ", 1259)), [(Tag3 (Tag1 ((Tag2 ("LDouble")), "t"), 0, (0)), 100000000, 0, -554)], (0)), 100000000, 0, -553), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 34)), 0); (("complex32", 1294), ((Tag3 ((("typ", 1259)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Complex"), "t"), 0, (0)), 100000000, 0, -552)], (0)), 100000000, 0, -551), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 35)), 0); (("complex64", 1295), ((Tag3 ((("typ", 1259)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Complex"), "t"), 0, (0)), 100000000, 0, -550)], (0)), 100000000, 0, -549), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 36)), 0); (("complexld", 1296), ((Tag3 ((("typ", 1259)), [(Tag3 (Tag1 ((Tag2 ("ComplexL")), "t"), 0, (0)), 100000000, 0, -548)], (0)), 100000000, 0, -547), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 37)), 0); (("ptr", 1297), ((Tag1 (0, (Tag3 ((("typ", 1259)), [((("a")), 100000000, 0, -545)], (0)), 100000000, 0, -546), (Tag3 ((("typ", 1259)), [(Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "ptr"), [((("a")), 100000000, 0, -545)], (0)), 100000000, 0, -544)], (0)), 100000000, 0, -543), 0), 100000000, 0, -542), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 38)), 0); (("ptr_opt", 1298), ((Tag1 (0, (Tag3 ((("typ", 1259)), [((("a")), 100000000, 0, -540)], (0)), 100000000, 0, -541), (Tag3 ((("typ", 1259)), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "ptr"), [((("a")), 100000000, 0, -540)], (0)), 100000000, 0, -539)], (0)), 100000000, 0, -538)], (0)), 100000000, 0, -537), 0), 100000000, 0, -536), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 39)), 0); (("string", 1299), ((Tag3 ((("typ", 1259)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -535)], (0)), 100000000, 0, -534), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 40)), 0); (("string_opt", 1300), ((Tag3 ((("typ", 1259)), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -533)], (0)), 100000000, 0, -532)], (0)), 100000000, 0, -531), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 41)), 0); (("ocaml_string", 1301), ((Tag3 ((("typ", 1259)), [(Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "ocaml"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -530)], (0)), 100000000, 0, -529)], (0)), 100000000, 0, -528), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 42)), 0); (("ocaml_bytes", 1302), ((Tag3 ((("typ", 1259)), [(Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "ocaml"), [(Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -527)], (0)), 100000000, 0, -526)], (0)), 100000000, 0, -525), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 43)), 0); (("array", 1303), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -524), (Tag1 (0, (Tag3 ((("typ", 1259)), [((("a")), 100000000, 0, -522)], (0)), 100000000, 0, -523), (Tag3 ((("typ", 1259)), [(Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "carray"), [((("a")), 100000000, 0, -522)], (0)), 100000000, 0, -521)], (0)), 100000000, 0, -520), 0), 100000000, 0, -519), 0), 100000000, 0, -518), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 44)), 0); (("bigarray", 1304), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "bigarray_class"), [(Tag4 ((Tag5 ("ba_repr", 1, (Tag10 (((("b")), 100000000, 0, -499), 0), 100000000, 0, -517), (Tag5 ("bigarray", 1, (Tag10 (((("bigarray")), 100000000, 0, -496), 0), 100000000, 0, -511), (Tag5 ("carray", 1, (Tag10 (((0), 100000000, 0, -513), 0), 100000000, 0, -512), (Tag5 ("dims", 1, (Tag10 (((("dims")), 100000000, 0, -500), 0), 100000000, 0, -510), (Tag5 ("element", 1, (Tag10 (((("a")), 100000000, 0, -498), 0), 100000000, 0, -516), (Tag5 ("layout", 1, (Tag10 ((Tag3 (Tag1 ((Tag2 ("Bigarray_compat")), "c_layout"), 0, (0)), 100000000, 0, -515), 0), 100000000, 0, -514), (0, 100000000, 0, -509)), 100000000, 0, 64)), 100000000, 0, 65)), 100000000, 0, 66)), 100000000, 0, 67)), 100000000, 0, 68)), 100000000, 0, -503), (0)), 100000000, 0, -502)], (0)), 100000000, 0, -501), (Tag1 (0, ((("dims")), 100000000, 0, -500), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Bigarray_compat")), "kind"), [((("a")), 100000000, 0, -498); ((("b")), 100000000, 0, -499)], (0)), 100000000, 0, -497), (Tag3 ((("typ", 1259)), [((("bigarray")), 100000000, 0, -496)], (0)), 100000000, 0, -495), 0), 100000000, 0, -494), 0), 100000000, 0, -493), 0), 100000000, 0, -492), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 45)), 0); (("fortran_bigarray", 1305), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "bigarray_class"), [(Tag4 ((Tag5 ("ba_repr", 1, (Tag10 (((("b")), 100000000, 0, -473), 0), 100000000, 0, -491), (Tag5 ("bigarray", 1, (Tag10 (((("bigarray")), 100000000, 0, -470), 0), 100000000, 0, -485), (Tag5 ("carray", 1, (Tag10 (((0), 100000000, 0, -487), 0), 100000000, 0, -486), (Tag5 ("dims", 1, (Tag10 (((("dims")), 100000000, 0, -474), 0), 100000000, 0, -484), (Tag5 ("element", 1, (Tag10 (((("a")), 100000000, 0, -472), 0), 100000000, 0, -490), (Tag5 ("layout", 1, (Tag10 ((Tag3 (Tag1 ((Tag2 ("Bigarray_compat")), "fortran_layout"), 0, (0)), 100000000, 0, -489), 0), 100000000, 0, -488), (0, 100000000, 0, -483)), 100000000, 0, 70)), 100000000, 0, 71)), 100000000, 0, 72)), 100000000, 0, 73)), 100000000, 0, 74)), 100000000, 0, -477), (0)), 100000000, 0, -476)], (0)), 100000000, 0, -475), (Tag1 (0, ((("dims")), 100000000, 0, -474), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Bigarray_compat")), "kind"), [((("a")), 100000000, 0, -472); ((("b")), 100000000, 0, -473)], (0)), 100000000, 0, -471), (Tag3 ((("typ", 1259)), [((("bigarray")), 100000000, 0, -470)], (0)), 100000000, 0, -469), 0), 100000000, 0, -468), 0), 100000000, 0, -467), 0), 100000000, 0, -466), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 46)), 0); (("typ_of_bigarray_kind", 1306), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Bigarray_compat")), "kind"), [((("a")), 100000000, 0, -463); ((("b")), 100000000, 0, -465)], (0)), 100000000, 0, -464), (Tag3 ((("typ", 1259)), [((("a")), 100000000, 0, -463)], (0)), 100000000, 0, -462), 0), 100000000, 0, -461), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 47)), 0); (("structure", 1307), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -460), (Tag3 ((("typ", 1259)), [(Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "structure"), [((("s")), 100000000, 0, -459)], (0)), 100000000, 0, -458)], (0)), 100000000, 0, -457), 0), 100000000, 0, -456), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 49)), 0); (("union", 1308), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -455), (Tag3 ((("typ", 1259)), [(Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "union"), [((("s")), 100000000, 0, -454)], (0)), 100000000, 0, -453)], (0)), 100000000, 0, -452), 0), 100000000, 0, -451), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 50)), 0); (("field", 1309), ((Tag1 (0, (Tag3 ((("typ", 1259)), [(Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "structured"), [((("s")), 100000000, 0, -445); (Tag8 (([("Struct", Tag1 (1, 0, 0, (1))); ("Union", Tag1 (1, 0, 0, (1)))], ((0), 100000000, 0, -447), 1, 0, 0)), 100000000, 0, -446)], (0)), 100000000, 0, -444)], (0)), 100000000, 0, -450), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -449), (Tag1 (0, (Tag3 ((("typ", 1259)), [((("a")), 100000000, 0, -443)], (0)), 100000000, 0, -448), (Tag3 ((("field", 1257)), [((("a")), 100000000, 0, -443); (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "structured"), [((("s")), 100000000, 0, -445); (Tag8 (([("Struct", Tag1 (1, 0, 0, (1))); ("Union", Tag1 (1, 0, 0, (1)))], ((0), 100000000, 0, -447), 1, 0, 0)), 100000000, 0, -446)], (0)), 100000000, 0, -444)], (0)), 100000000, 0, -442), 0), 100000000, 0, -441), 0), 100000000, 0, -440), 0), 100000000, 0, -439), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 51)), 0); (("seal", 1310), ((Tag1 (0, (Tag3 ((("typ", 1259)), [(Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "structured"), [((0), 100000000, 0, -436); (Tag8 (([("Struct", Tag1 (1, 0, 0, (1))); ("Union", Tag1 (1, 0, 0, (1)))], ((0), 100000000, 0, -438), 1, 0, 0)), 100000000, 0, -437)], (0)), 100000000, 0, -435)], (0)), 100000000, 0, -434), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -433), 0), 100000000, 0, -432), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 52)), 0); (("view", 1311), ((Tag1 (Tag1 ("format_typ"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -431), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -430), 0), 100000000, 0, -429), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -428), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -427), 0), 100000000, 0, -426), 0), 100000000, 0, -425)], (0)), 100000000, 0, -424), (Tag1 (Tag1 ("format"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -423), (Tag1 (0, ((("b")), 100000000, 0, -414), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -422), 0), 100000000, 0, -421), 0), 100000000, 0, -420)], (0)), 100000000, 0, -419), (Tag1 (("read"), (Tag1 (0, ((("a")), 100000000, 0, -416), ((("b")), 100000000, 0, -414), 0), 100000000, 0, -418), (Tag1 (("write"), (Tag1 (0, ((("b")), 100000000, 0, -414), ((("a")), 100000000, 0, -416), 0), 100000000, 0, -417), (Tag1 (0, (Tag3 ((("typ", 1259)), [((("a")), 100000000, 0, -416)], (0)), 100000000, 0, -415), (Tag3 ((("typ", 1259)), [((("b")), 100000000, 0, -414)], (0)), 100000000, 0, -413), 0), 100000000, 0, -412), 0), 100000000, 0, -411), 0), 100000000, 0, -410), 0), 100000000, 0, -409), 0), 100000000, 0, -408), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 53)), 0); (("typedef", 1312), ((Tag1 (0, (Tag3 ((("typ", 1259)), [((("a")), 100000000, 0, -405)], (0)), 100000000, 0, -407), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -406), (Tag3 ((("typ", 1259)), [((("a")), 100000000, 0, -405)], (0)), 100000000, 0, -404), 0), 100000000, 0, -403), 0), 100000000, 0, -402), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 54)), 0); (("abstract", 1313), ((Tag1 (("name"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -401), (Tag1 (("size"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -400), (Tag1 (("alignment"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -399), (Tag3 ((("typ", 1259)), [(Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "abstract"), [((("a")), 100000000, 0, -398)], (0)), 100000000, 0, -397)], (0)), 100000000, 0, -396), 0), 100000000, 0, -395), 0), 100000000, 0, -394), 0), 100000000, 0, -393), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 55)), 0); (("lift_typ", 1314), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "typ"), [((("a")), 100000000, 0, -391)], (0)), 100000000, 0, -392), (Tag3 ((("typ", 1259)), [((("a")), 100000000, 0, -391)], (0)), 100000000, 0, -390), 0), 100000000, 0, -389), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 56)), 0); Tag1 (("fn", 1315), ([((("a")), 100000000, 0, -388)], 1, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "fn"), [((("a")), 100000000, 0, -388)], (0)), 100000000, 0, -387)), [63], [0], 0, 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, 0, 0, Tag1 ("Ctypes_types", 57)), 1, 0); (("@->", 1316), ((Tag1 (0, (Tag3 ((("typ", 1259)), [((("a")), 100000000, 0, -384)], (0)), 100000000, 0, -386), (Tag1 (0, (Tag3 ((("fn", 1315)), [((("b")), 100000000, 0, -383)], (0)), 100000000, 0, -385), (Tag3 ((("fn", 1315)), [(Tag1 (0, ((("a")), 100000000, 0, -384), ((("b")), 100000000, 0, -383), 0), 100000000, 0, -382)], (0)), 100000000, 0, -381), 0), 100000000, 0, -380), 0), 100000000, 0, -379), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 58)), 0); (("returning", 1317), ((Tag1 (0, (Tag3 ((("typ", 1259)), [((("a")), 100000000, 0, -377)], (0)), 100000000, 0, -378), (Tag3 ((("fn", 1315)), [((("a")), 100000000, 0, -377)], (0)), 100000000, 0, -376), 0), 100000000, 0, -375), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 59)), 0); Tag1 (("static_funptr", 1318), ([((("a")), 100000000, 0, -374)], 1, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "static_funptr"), [((("a")), 100000000, 0, -374)], (0)), 100000000, 0, -373)), [15], [0], 0, 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, 0, 0, Tag1 ("Ctypes_types", 60)), 1, 0); (("static_funptr", 1319), ((Tag1 (0, (Tag3 ((("fn", 1315)), [((("a")), 100000000, 0, -371)], (0)), 100000000, 0, -372), (Tag3 ((("typ", 1259)), [(Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "static_funptr"), [((("a")), 100000000, 0, -371)], (0)), 100000000, 0, -370)], (0)), 100000000, 0, -369), 0), 100000000, 0, -368), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 61)), 0); (("sizeof", 1320), ((Tag1 (0, (Tag3 ((("typ", 1259)), [((("a")), 100000000, 0, -367)], (0)), 100000000, 0, -366), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -365), 0), 100000000, 0, -364), 0, (("src/ctypes/ctypes.mli", 123, 4363, 4363), ("src/ctypes/ctypes.mli", 123, 4363, 4389), 0), 0, Tag1 ("Ctypes", 16)), 0); (("alignment", 1321), ((Tag1 (0, (Tag3 ((("typ", 1259)), [((("a")), 100000000, 0, -363)], (0)), 100000000, 0, -362), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -361), 0), 100000000, 0, -360), 0, (("src/ctypes/ctypes.mli", 127, 4522, 4522), ("src/ctypes/ctypes.mli", 127, 4522, 4551), 0), 0, Tag1 ("Ctypes", 17)), 0); (("format_typ", 1322), ((Tag1 (Tag1 ("name"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -359)], (0)), 100000000, 0, -358), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -357), (Tag1 (0, (Tag3 ((("typ", 1259)), [((("a")), 100000000, 0, -356)], (0)), 100000000, 0, -355), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -354), 0), 100000000, 0, -353), 0), 100000000, 0, -352), 0), 100000000, 0, -351), 0, (("src/ctypes/ctypes.mli", 131, 4696, 4696), ("src/ctypes/ctypes.mli", 131, 4696, 4763), 0), 0, Tag1 ("Ctypes", 18)), 0); (("format_fn", 1323), ((Tag1 (Tag1 ("name"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -350)], (0)), 100000000, 0, -349), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -348), (Tag1 (0, (Tag3 ((("fn", 1315)), [((("a")), 100000000, 0, -347)], (0)), 100000000, 0, -346), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -345), 0), 100000000, 0, -344), 0), 100000000, 0, -343), 0), 100000000, 0, -342), 0, (("src/ctypes/ctypes.mli", 134, 4844, 4844), ("src/ctypes/ctypes.mli", 134, 4844, 4909), 0), 0, Tag1 ("Ctypes", 19)), 0); (("string_of_typ", 1324), ((Tag1 (Tag1 ("name"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -341)], (0)), 100000000, 0, -340), (Tag1 (0, (Tag3 ((("typ", 1259)), [((("a")), 100000000, 0, -339)], (0)), 100000000, 0, -338), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -337), 0), 100000000, 0, -336), 0), 100000000, 0, -335), 0, (("src/ctypes/ctypes.mli", 138, 5003, 5003), ("src/ctypes/ctypes.mli", 138, 5003, 5055), 0), 0, Tag1 ("Ctypes", 20)), 0); (("string_of_fn", 1325), ((Tag1 (Tag1 ("name"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -334)], (0)), 100000000, 0, -333), (Tag1 (0, (Tag3 ((("fn", 1315)), [((("a")), 100000000, 0, -332)], (0)), 100000000, 0, -331), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -330), 0), 100000000, 0, -329), 0), 100000000, 0, -328), 0, (("src/ctypes/ctypes.mli", 141, 5103, 5103), ("src/ctypes/ctypes.mli", 141, 5103, 5153), 0), 0, Tag1 ("Ctypes", 21)), 0); (("format", 1326), ((Tag1 (0, (Tag3 ((("typ", 1259)), [((("a")), 100000000, 0, -325)], (0)), 100000000, 0, -327), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -326), (Tag1 (0, ((("a")), 100000000, 0, -325), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -324), 0), 100000000, 0, -323), 0), 100000000, 0, -322), 0), 100000000, 0, -321), 0, (("src/ctypes/ctypes.mli", 146, 5258, 5258), ("src/ctypes/ctypes.mli", 146, 5258, 5311), 0), 0, Tag1 ("Ctypes", 22)), 0); (("string_of", 1327), ((Tag1 (0, (Tag3 ((("typ", 1259)), [((("a")), 100000000, 0, -319)], (0)), 100000000, 0, -320), (Tag1 (0, ((("a")), 100000000, 0, -319), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -318), 0), 100000000, 0, -317), 0), 100000000, 0, -316), 0, (("src/ctypes/ctypes.mli", 149, 5393, 5393), ("src/ctypes/ctypes.mli", 149, 5393, 5431), 0), 0, Tag1 ("Ctypes", 23)), 0); (("null", 1328), ((Tag3 ((("ptr", 1246)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -315)], (0)), 100000000, 0, -314), 0, (("src/ctypes/ctypes.mli", 154, 5514, 5514), ("src/ctypes/ctypes.mli", 154, 5514, 5533), 0), 0, Tag1 ("Ctypes", 24)), 0); (("!@", 1329), ((Tag1 (0, (Tag3 ((("ptr", 1246)), [((("a")), 100000000, 0, -312)], (0)), 100000000, 0, -313), ((("a")), 100000000, 0, -312), 0), 100000000, 0, -311), 0, (("src/ctypes/ctypes.mli", 157, 5558, 5558), ("src/ctypes/ctypes.mli", 157, 5558, 5581), 0), 0, Tag1 ("Ctypes", 25)), 0); (("<-@", 1330), ((Tag1 (0, (Tag3 ((("ptr", 1246)), [((("a")), 100000000, 0, -309)], (0)), 100000000, 0, -310), (Tag1 (0, ((("a")), 100000000, 0, -309), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -308), 0), 100000000, 0, -307), 0), 100000000, 0, -306), 0, (("src/ctypes/ctypes.mli", 163, 5847, 5847), ("src/ctypes/ctypes.mli", 163, 5847, 5879), 0), 0, Tag1 ("Ctypes", 26)), 0); (("+@", 1331), ((Tag1 (0, (Tag3 ((("pointer", 1245)), [((("a")), 100000000, 0, -302); ((("b")), 100000000, 0, -303)], (0)), 100000000, 0, -305), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -304), (Tag3 ((("pointer", 1245)), [((("a")), 100000000, 0, -302); ((("b")), 100000000, 0, -303)], (0)), 100000000, 0, -301), 0), 100000000, 0, -300), 0), 100000000, 0, -299), 0, (("src/ctypes/ctypes.mli", 166, 5939, 5939), ("src/ctypes/ctypes.mli", 166, 5939, 5993), 0), 0, Tag1 ("Ctypes", 27)), 0); (("-@", 1332), ((Tag1 (0, (Tag3 ((("pointer", 1245)), [((("a")), 100000000, 0, -295); ((("b")), 100000000, 0, -296)], (0)), 100000000, 0, -298), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -297), (Tag3 ((("pointer", 1245)), [((("a")), 100000000, 0, -295); ((("b")), 100000000, 0, -296)], (0)), 100000000, 0, -294), 0), 100000000, 0, -293), 0), 100000000, 0, -292), 0, (("src/ctypes/ctypes.mli", 170, 6108, 6108), ("src/ctypes/ctypes.mli", 170, 6108, 6162), 0), 0, Tag1 ("Ctypes", 28)), 0); (("ptr_diff", 1333), ((Tag1 (0, (Tag3 ((("pointer", 1245)), [((("a")), 100000000, 0, -289); ((("b")), 100000000, 0, -290)], (0)), 100000000, 0, -291), (Tag1 (0, (Tag3 ((("pointer", 1245)), [((("a")), 100000000, 0, -289); ((("b")), 100000000, 0, -290)], (0)), 100000000, 0, -288), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -287), 0), 100000000, 0, -286), 0), 100000000, 0, -285), 0, (("src/ctypes/ctypes.mli", 174, 6279, 6279), ("src/ctypes/ctypes.mli", 174, 6279, 6337), 0), 0, Tag1 ("Ctypes", 29)), 0); (("from_voidp", 1334), ((Tag1 (0, (Tag3 ((("typ", 1259)), [((("a")), 100000000, 0, -281)], (0)), 100000000, 0, -284), (Tag1 (0, (Tag3 ((("ptr", 1246)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -283)], (0)), 100000000, 0, -282), (Tag3 ((("ptr", 1246)), [((("a")), 100000000, 0, -281)], (0)), 100000000, 0, -280), 0), 100000000, 0, -279), 0), 100000000, 0, -278), 0, (("src/ctypes/ctypes.mli", 179, 6530, 6530), ("src/ctypes/ctypes.mli", 179, 6530, 6575), 0), 0, Tag1 ("Ctypes", 30)), 0); (("to_voidp", 1335), ((Tag1 (0, (Tag3 ((("ptr", 1246)), [((0), 100000000, 0, -277)], (0)), 100000000, 0, -276), (Tag3 ((("ptr", 1246)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -275)], (0)), 100000000, 0, -274), 0), 100000000, 0, -273), 0, (("src/ctypes/ctypes.mli", 182, 6610, 6610), ("src/ctypes/ctypes.mli", 182, 6610, 6642), 0), 0, Tag1 ("Ctypes", 31)), 0); (("allocate", 1336), ((Tag1 (Tag1 ("finalise"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag3 ((("ptr", 1246)), [((("a")), 100000000, 0, -267)], (0)), 100000000, 0, -272), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -271), 0), 100000000, 0, -270)], (0)), 100000000, 0, -269), (Tag1 (0, (Tag3 ((("typ", 1259)), [((("a")), 100000000, 0, -267)], (0)), 100000000, 0, -268), (Tag1 (0, ((("a")), 100000000, 0, -267), (Tag3 ((("ptr", 1246)), [((("a")), 100000000, 0, -267)], (0)), 100000000, 0, -266), 0), 100000000, 0, -265), 0), 100000000, 0, -264), 0), 100000000, 0, -263), 0, (("src/ctypes/ctypes.mli", 185, 6675, 6675), ("src/ctypes/ctypes.mli", 185, 6675, 6742), 0), 0, Tag1 ("Ctypes", 32)), 0); (("allocate_n", 1337), ((Tag1 (Tag1 ("finalise"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag3 ((("ptr", 1246)), [((("a")), 100000000, 0, -256)], (0)), 100000000, 0, -262), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -261), 0), 100000000, 0, -260)], (0)), 100000000, 0, -259), (Tag1 (0, (Tag3 ((("typ", 1259)), [((("a")), 100000000, 0, -256)], (0)), 100000000, 0, -258), (Tag1 (("count"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -257), (Tag3 ((("ptr", 1246)), [((("a")), 100000000, 0, -256)], (0)), 100000000, 0, -255), 0), 100000000, 0, -254), 0), 100000000, 0, -253), 0), 100000000, 0, -252), 0, (("src/ctypes/ctypes.mli", 192, 7070, 7070), ("src/ctypes/ctypes.mli", 192, 7070, 7146), 0), 0, Tag1 ("Ctypes", 33)), 0); (("ptr_compare", 1338), ((Tag1 (0, (Tag3 ((("ptr", 1246)), [((("a")), 100000000, 0, -250)], (0)), 100000000, 0, -251), (Tag1 (0, (Tag3 ((("ptr", 1246)), [((("a")), 100000000, 0, -250)], (0)), 100000000, 0, -249), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -248), 0), 100000000, 0, -247), 0), 100000000, 0, -246), 0, (("src/ctypes/ctypes.mli", 201, 7576, 7576), ("src/ctypes/ctypes.mli", 201, 7576, 7617), 0), 0, Tag1 ("Ctypes", 34)), 0); (("is_null", 1339), ((Tag1 (0, (Tag3 ((("ptr", 1246)), [((("a")), 100000000, 0, -245)], (0)), 100000000, 0, -244), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -243), 0), 100000000, 0, -242), 0, (("src/ctypes/ctypes.mli", 207, 7890, 7890), ("src/ctypes/ctypes.mli", 207, 7890, 7918), 0), 0, Tag1 ("Ctypes", 35)), 0); (("reference_type", 1340), ((Tag1 (0, (Tag3 ((("ptr", 1246)), [((("a")), 100000000, 0, -240)], (0)), 100000000, 0, -241), (Tag3 ((("typ", 1259)), [((("a")), 100000000, 0, -240)], (0)), 100000000, 0, -239), 0), 100000000, 0, -238), 0, (("src/ctypes/ctypes.mli", 210, 7975, 7975), ("src/ctypes/ctypes.mli", 210, 7975, 8012), 0), 0, Tag1 ("Ctypes", 36)), 0); (("ptr_of_raw_address", 1341), ((Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -237), (Tag3 ((("ptr", 1246)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -236)], (0)), 100000000, 0, -235), 0), 100000000, 0, -234), 0, (("src/ctypes/ctypes.mli", 213, 8063, 8063), ("src/ctypes/ctypes.mli", 213, 8063, 8109), 0), 0, Tag1 ("Ctypes", 37)), 0); (("funptr_of_raw_address", 1342), ((Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -233), (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "static_funptr"), [(Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -232), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -231), 0), 100000000, 0, -230)], (0)), 100000000, 0, -229), 0), 100000000, 0, -228), 0, (("src/ctypes/ctypes.mli", 216, 8180, 8180), ("src/ctypes/ctypes.mli", 216, 8180, 8263), 0), 0, Tag1 ("Ctypes", 38)), 0); (("raw_address_of_ptr", 1343), ((Tag1 (0, (Tag3 ((("ptr", 1246)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -227)], (0)), 100000000, 0, -226), (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -225), 0), 100000000, 0, -224), 0, (("src/ctypes/ctypes.mli", 219, 8343, 8343), ("src/ctypes/ctypes.mli", 219, 8343, 8389), 0), 0, Tag1 ("Ctypes", 39)), 0); (("string_from_ptr", 1344), ((Tag1 (0, (Tag3 ((("ptr", 1246)), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -223)], (0)), 100000000, 0, -222), (Tag1 (("length"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -221), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -220), 0), 100000000, 0, -219), 0), 100000000, 0, -218), 0, (("src/ctypes/ctypes.mli", 227, 8746, 8746), ("src/ctypes/ctypes.mli", 227, 8746, 8800), 0), 0, Tag1 ("Ctypes", 40)), 0); (("ocaml_string_start", 1345), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -217), (Tag3 ((("ocaml", 1247)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -216)], (0)), 100000000, 0, -215), 0), 100000000, 0, -214), 0, (("src/ctypes/ctypes.mli", 234, 8999, 8999), ("src/ctypes/ctypes.mli", 234, 8999, 9046), 0), 0, Tag1 ("Ctypes", 41)), 0); (("ocaml_bytes_start", 1346), ((Tag1 (0, (Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -213), (Tag3 ((("ocaml", 1247)), [(Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -212)], (0)), 100000000, 0, -211), 0), 100000000, 0, -210), 0, (("src/ctypes/ctypes.mli", 238, 9168, 9168), ("src/ctypes/ctypes.mli", 238, 9168, 9212), 0), 0, Tag1 ("Ctypes", 42)), 0); Tag3 (("CArray", 1347), 0, (Tag1 ([Tag1 (("t", 1372), ([((("a")), 100000000, 0, -864)], 1, 0, 1, ((Tag3 ((("carray", 1248)), [((("a")), 100000000, 0, -864)], (0)), 100000000, 0, -863)), [63], [0], 0, 0, (("src/ctypes/ctypes.mli", 248, 9409, 9411), ("src/ctypes/ctypes.mli", 248, 9409, 9432), 0), 0, 0, 0, Tag1 ("Ctypes", 43)), 1, 0); (("get", 1373), ((Tag1 (0, (Tag3 ((("t", 1372)), [((("a")), 100000000, 0, -860)], (0)), 100000000, 0, -862), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -861), ((("a")), 100000000, 0, -860), 0), 100000000, 0, -859), 0), 100000000, 0, -858), 0, (("src/ctypes/ctypes.mli", 250, 9434, 9436), ("src/ctypes/ctypes.mli", 250, 9434, 9463), 0), 0, Tag1 ("Ctypes", 44)), 0); (("set", 1374), ((Tag1 (0, (Tag3 ((("t", 1372)), [((("a")), 100000000, 0, -855)], (0)), 100000000, 0, -857), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -856), (Tag1 (0, ((("a")), 100000000, 0, -855), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -854), 0), 100000000, 0, -853), 0), 100000000, 0, -852), 0), 100000000, 0, -851), 0, (("src/ctypes/ctypes.mli", 260, 9866, 9868), ("src/ctypes/ctypes.mli", 260, 9866, 9903), 0), 0, Tag1 ("Ctypes", 45)), 0); (("unsafe_get", 1375), ((Tag1 (0, (Tag3 ((("t", 1372)), [((("a")), 100000000, 0, -848)], (0)), 100000000, 0, -850), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -849), ((("a")), 100000000, 0, -848), 0), 100000000, 0, -847), 0), 100000000, 0, -846), 0, (("src/ctypes/ctypes.mli", 270, 10258, 10260), ("src/ctypes/ctypes.mli", 270, 10258, 10294), 0), 0, Tag1 ("Ctypes", 46)), 0); (("unsafe_set", 1376), ((Tag1 (0, (Tag3 ((("t", 1372)), [((("a")), 100000000, 0, -843)], (0)), 100000000, 0, -845), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -844), (Tag1 (0, ((("a")), 100000000, 0, -843), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -842), 0), 100000000, 0, -841), 0), 100000000, 0, -840), 0), 100000000, 0, -839), 0, (("src/ctypes/ctypes.mli", 274, 10440, 10442), ("src/ctypes/ctypes.mli", 274, 10440, 10484), 0), 0, Tag1 ("Ctypes", 47)), 0); (("of_string", 1377), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -838), (Tag3 ((("t", 1372)), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -837)], (0)), 100000000, 0, -836), 0), 100000000, 0, -835), 0, (("src/ctypes/ctypes.mli", 278, 10634, 10636), ("src/ctypes/ctypes.mli", 278, 10634, 10668), 0), 0, Tag1 ("Ctypes", 48)), 0); (("of_list", 1378), ((Tag1 (0, (Tag3 ((("typ", 1259)), [((("a")), 100000000, 0, -832)], (0)), 100000000, 0, -834), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -832)], (0)), 100000000, 0, -833), (Tag3 ((("t", 1372)), [((("a")), 100000000, 0, -832)], (0)), 100000000, 0, -831), 0), 100000000, 0, -830), 0), 100000000, 0, -829), 0, (("src/ctypes/ctypes.mli", 283, 10879, 10881), ("src/ctypes/ctypes.mli", 283, 10879, 10920), 0), 0, Tag1 ("Ctypes", 49)), 0); (("to_list", 1379), ((Tag1 (0, (Tag3 ((("t", 1372)), [((("a")), 100000000, 0, -827)], (0)), 100000000, 0, -828), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -827)], (0)), 100000000, 0, -826), 0), 100000000, 0, -825), 0, (("src/ctypes/ctypes.mli", 287, 11081, 11083), ("src/ctypes/ctypes.mli", 287, 11081, 11112), 0), 0, Tag1 ("Ctypes", 50)), 0); (("iter", 1380), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -822), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -824), 0), 100000000, 0, -823), (Tag1 (0, (Tag3 ((("t", 1372)), [((("a")), 100000000, 0, -822)], (0)), 100000000, 0, -821), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -820), 0), 100000000, 0, -819), 0), 100000000, 0, -818), 0, (("src/ctypes/ctypes.mli", 292, 11281, 11283), ("src/ctypes/ctypes.mli", 292, 11281, 11322), 0), 0, Tag1 ("Ctypes", 51)), 0); (("map", 1381), ((Tag1 (0, (Tag3 ((("typ", 1259)), [((("b")), 100000000, 0, -813)], (0)), 100000000, 0, -817), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -815), ((("b")), 100000000, 0, -813), 0), 100000000, 0, -816), (Tag1 (0, (Tag3 ((("t", 1372)), [((("a")), 100000000, 0, -815)], (0)), 100000000, 0, -814), (Tag3 ((("t", 1372)), [((("b")), 100000000, 0, -813)], (0)), 100000000, 0, -812), 0), 100000000, 0, -811), 0), 100000000, 0, -810), 0), 100000000, 0, -809), 0, (("src/ctypes/ctypes.mli", 296, 11435, 11437), ("src/ctypes/ctypes.mli", 296, 11435, 11483), 0), 0, Tag1 ("Ctypes", 52)), 0); (("mapi", 1382), ((Tag1 (0, (Tag3 ((("typ", 1259)), [((("b")), 100000000, 0, -802)], (0)), 100000000, 0, -808), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -807), (Tag1 (0, ((("a")), 100000000, 0, -804), ((("b")), 100000000, 0, -802), 0), 100000000, 0, -806), 0), 100000000, 0, -805), (Tag1 (0, (Tag3 ((("t", 1372)), [((("a")), 100000000, 0, -804)], (0)), 100000000, 0, -803), (Tag3 ((("t", 1372)), [((("b")), 100000000, 0, -802)], (0)), 100000000, 0, -801), 0), 100000000, 0, -800), 0), 100000000, 0, -799), 0), 100000000, 0, -798), 0, (("src/ctypes/ctypes.mli", 301, 11664, 11666), ("src/ctypes/ctypes.mli", 301, 11664, 11720), 0), 0, Tag1 ("Ctypes", 53)), 0); (("fold_left", 1383), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -793), (Tag1 (0, ((("b")), 100000000, 0, -795), ((("a")), 100000000, 0, -793), 0), 100000000, 0, -797), 0), 100000000, 0, -796), (Tag1 (0, ((("a")), 100000000, 0, -793), (Tag1 (0, (Tag3 ((("t", 1372)), [((("b")), 100000000, 0, -795)], (0)), 100000000, 0, -794), ((("a")), 100000000, 0, -793), 0), 100000000, 0, -792), 0), 100000000, 0, -791), 0), 100000000, 0, -790), 0, (("src/ctypes/ctypes.mli", 306, 11907, 11909), ("src/ctypes/ctypes.mli", 306, 11907, 11961), 0), 0, Tag1 ("Ctypes", 54)), 0); (("fold_right", 1384), ((Tag1 (0, (Tag1 (0, ((("b")), 100000000, 0, -787), (Tag1 (0, ((("a")), 100000000, 0, -785), ((("a")), 100000000, 0, -785), 0), 100000000, 0, -789), 0), 100000000, 0, -788), (Tag1 (0, (Tag3 ((("t", 1372)), [((("b")), 100000000, 0, -787)], (0)), 100000000, 0, -786), (Tag1 (0, ((("a")), 100000000, 0, -785), ((("a")), 100000000, 0, -785), 0), 100000000, 0, -784), 0), 100000000, 0, -783), 0), 100000000, 0, -782), 0, (("src/ctypes/ctypes.mli", 311, 12107, 12109), ("src/ctypes/ctypes.mli", 311, 12107, 12162), 0), 0, Tag1 ("Ctypes", 55)), 0); (("length", 1385), ((Tag1 (0, (Tag3 ((("t", 1372)), [((("a")), 100000000, 0, -781)], (0)), 100000000, 0, -780), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -779), 0), 100000000, 0, -778), 0, (("src/ctypes/ctypes.mli", 316, 12311, 12313), ("src/ctypes/ctypes.mli", 316, 12311, 12337), 0), 0, Tag1 ("Ctypes", 56)), 0); (("start", 1386), ((Tag1 (0, (Tag3 ((("t", 1372)), [((("a")), 100000000, 0, -776)], (0)), 100000000, 0, -777), (Tag3 ((("ptr", 1246)), [((("a")), 100000000, 0, -776)], (0)), 100000000, 0, -775), 0), 100000000, 0, -774), 0, (("src/ctypes/ctypes.mli", 319, 12398, 12400), ("src/ctypes/ctypes.mli", 319, 12398, 12426), 0), 0, Tag1 ("Ctypes", 57)), 0); (("from_ptr", 1387), ((Tag1 (0, (Tag3 ((("ptr", 1246)), [((("a")), 100000000, 0, -771)], (0)), 100000000, 0, -773), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -772), (Tag3 ((("t", 1372)), [((("a")), 100000000, 0, -771)], (0)), 100000000, 0, -770), 0), 100000000, 0, -769), 0), 100000000, 0, -768), 0, (("src/ctypes/ctypes.mli", 322, 12497, 12499), ("src/ctypes/ctypes.mli", 322, 12497, 12535), 0), 0, Tag1 ("Ctypes", 58)), 0); (("make", 1388), ((Tag1 (Tag1 ("finalise"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag3 ((("t", 1372)), [((("a")), 100000000, 0, -760)], (0)), 100000000, 0, -767), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -766), 0), 100000000, 0, -765)], (0)), 100000000, 0, -764), (Tag1 (0, (Tag3 ((("typ", 1259)), [((("a")), 100000000, 0, -760)], (0)), 100000000, 0, -763), (Tag1 (Tag1 ("initial"), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -760)], (0)), 100000000, 0, -762), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -761), (Tag3 ((("t", 1372)), [((("a")), 100000000, 0, -760)], (0)), 100000000, 0, -759), 0), 100000000, 0, -758), 0), 100000000, 0, -757), 0), 100000000, 0, -756), 0), 100000000, 0, -755), 0, (("src/ctypes/ctypes.mli", 326, 12635, 12637), ("src/ctypes/ctypes.mli", 326, 12635, 12712), 0), 0, Tag1 ("Ctypes", 59)), 0); (("copy", 1389), ((Tag1 (0, (Tag3 ((("t", 1372)), [((("a")), 100000000, 0, -753)], (0)), 100000000, 0, -754), (Tag3 ((("t", 1372)), [((("a")), 100000000, 0, -753)], (0)), 100000000, 0, -752), 0), 100000000, 0, -751), 0, (("src/ctypes/ctypes.mli", 332, 13013, 13015), ("src/ctypes/ctypes.mli", 332, 13013, 13038), 0), 0, Tag1 ("Ctypes", 60)), 0); (("sub", 1390), ((Tag1 (0, (Tag3 ((("t", 1372)), [((("a")), 100000000, 0, -747)], (0)), 100000000, 0, -750), (Tag1 (("pos"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -749), (Tag1 (("length"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -748), (Tag3 ((("t", 1372)), [((("a")), 100000000, 0, -747)], (0)), 100000000, 0, -746), 0), 100000000, 0, -745), 0), 100000000, 0, -744), 0), 100000000, 0, -743), 0, (("src/ctypes/ctypes.mli", 335, 13111, 13113), ("src/ctypes/ctypes.mli", 335, 13111, 13160), 0), 0, Tag1 ("Ctypes", 61)), 0); (("element_type", 1391), ((Tag1 (0, (Tag3 ((("t", 1372)), [((("a")), 100000000, 0, -741)], (0)), 100000000, 0, -742), (Tag3 ((("typ", 1259)), [((("a")), 100000000, 0, -741)], (0)), 100000000, 0, -740), 0), 100000000, 0, -739), 0, (("src/ctypes/ctypes.mli", 342, 13422, 13424), ("src/ctypes/ctypes.mli", 342, 13422, 13457), 0), 0, Tag1 ("Ctypes", 62)), 0)]), 0, (("src/ctypes/ctypes.mli", 246, 9389, 9389), ("src/ctypes/ctypes.mli", 344, 13506, 13509), 0), Tag1 ("Ctypes", 63)), 0, 0); (("bigarray_start", 1348), ((Tag1 (0, (Tag3 ((("bigarray_class", 1249)), [(Tag4 ((Tag5 ("ba_repr", 1, (Tag10 (((0), 100000000, 0, -209), 0), 100000000, 0, -208), (Tag5 ("bigarray", 1, (Tag10 (((("b")), 100000000, 0, -190), 0), 100000000, 0, -202), (Tag5 ("carray", 1, (Tag10 (((0), 100000000, 0, -204), 0), 100000000, 0, -203), (Tag5 ("dims", 1, (Tag10 (((0), 100000000, 0, -201), 0), 100000000, 0, -200), (Tag5 ("element", 1, (Tag10 (((("a")), 100000000, 0, -189), 0), 100000000, 0, -207), (Tag5 ("layout", 1, (Tag10 (((("l")), 100000000, 0, -206), 0), 100000000, 0, -205), (0, 100000000, 0, -199)), 100000000, 0, 76)), 100000000, 0, 77)), 100000000, 0, 78)), 100000000, 0, 79)), 100000000, 0, 80)), 100000000, 0, -193), (0)), 100000000, 0, -192)], (0)), 100000000, 0, -191), (Tag1 (0, ((("b")), 100000000, 0, -190), (Tag3 ((("ptr", 1246)), [((("a")), 100000000, 0, -189)], (0)), 100000000, 0, -188), 0), 100000000, 0, -187), 0), 100000000, 0, -186), 0, (("src/ctypes/ctypes.mli", 349, 13570, 13570), ("src/ctypes/ctypes.mli", 354, 13747, 13810), 0), 0, Tag1 ("Ctypes", 64)), 0); (("bigarray_of_ptr", 1349), ((Tag1 (0, (Tag3 ((("bigarray_class", 1249)), [(Tag4 ((Tag5 ("ba_repr", 1, (Tag10 (((("f")), 100000000, 0, -167), 0), 100000000, 0, -185), (Tag5 ("bigarray", 1, (Tag10 (((("b")), 100000000, 0, -163), 0), 100000000, 0, -179), (Tag5 ("carray", 1, (Tag10 (((0), 100000000, 0, -181), 0), 100000000, 0, -180), (Tag5 ("dims", 1, (Tag10 (((("i")), 100000000, 0, -168), 0), 100000000, 0, -178), (Tag5 ("element", 1, (Tag10 (((("a")), 100000000, 0, -165), 0), 100000000, 0, -184), (Tag5 ("layout", 1, (Tag10 ((Tag3 (Tag1 ((Tag2 ("Bigarray_compat")), "c_layout"), 0, (0)), 100000000, 0, -183), 0), 100000000, 0, -182), (0, 100000000, 0, -177)), 100000000, 0, 82)), 100000000, 0, 83)), 100000000, 0, 84)), 100000000, 0, 85)), 100000000, 0, 86)), 100000000, 0, -171), (0)), 100000000, 0, -170)], (0)), 100000000, 0, -169), (Tag1 (0, ((("i")), 100000000, 0, -168), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Bigarray_compat")), "kind"), [((("a")), 100000000, 0, -165); ((("f")), 100000000, 0, -167)], (0)), 100000000, 0, -166), (Tag1 (0, (Tag3 ((("ptr", 1246)), [((("a")), 100000000, 0, -165)], (0)), 100000000, 0, -164), ((("b")), 100000000, 0, -163), 0), 100000000, 0, -162), 0), 100000000, 0, -161), 0), 100000000, 0, -160), 0), 100000000, 0, -159), 0, (("src/ctypes/ctypes.mli", 357, 13888, 13888), ("src/ctypes/ctypes.mli", 363, 14146, 14201), 0), 0, Tag1 ("Ctypes", 65)), 0); (("fortran_bigarray_of_ptr", 1350), ((Tag1 (0, (Tag3 ((("bigarray_class", 1249)), [(Tag4 ((Tag5 ("ba_repr", 1, (Tag10 (((("f")), 100000000, 0, -140), 0), 100000000, 0, -158), (Tag5 ("bigarray", 1, (Tag10 (((("b")), 100000000, 0, -136), 0), 100000000, 0, -152), (Tag5 ("carray", 1, (Tag10 (((0), 100000000, 0, -154), 0), 100000000, 0, -153), (Tag5 ("dims", 1, (Tag10 (((("i")), 100000000, 0, -141), 0), 100000000, 0, -151), (Tag5 ("element", 1, (Tag10 (((("a")), 100000000, 0, -138), 0), 100000000, 0, -157), (Tag5 ("layout", 1, (Tag10 ((Tag3 (Tag1 ((Tag2 ("Bigarray_compat")), "fortran_layout"), 0, (0)), 100000000, 0, -156), 0), 100000000, 0, -155), (0, 100000000, 0, -150)), 100000000, 0, 88)), 100000000, 0, 89)), 100000000, 0, 90)), 100000000, 0, 91)), 100000000, 0, 92)), 100000000, 0, -144), (0)), 100000000, 0, -143)], (0)), 100000000, 0, -142), (Tag1 (0, ((("i")), 100000000, 0, -141), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Bigarray_compat")), "kind"), [((("a")), 100000000, 0, -138); ((("f")), 100000000, 0, -140)], (0)), 100000000, 0, -139), (Tag1 (0, (Tag3 ((("ptr", 1246)), [((("a")), 100000000, 0, -138)], (0)), 100000000, 0, -137), ((("b")), 100000000, 0, -136), 0), 100000000, 0, -135), 0), 100000000, 0, -134), 0), 100000000, 0, -133), 0), 100000000, 0, -132), 0, (("src/ctypes/ctypes.mli", 368, 14376, 14376), ("src/ctypes/ctypes.mli", 374, 14688, 14743), 0), 0, Tag1 ("Ctypes", 66)), 0); (("array_of_bigarray", 1351), ((Tag1 (0, (Tag3 ((("bigarray_class", 1249)), [(Tag4 ((Tag5 ("ba_repr", 1, (Tag10 (((0), 100000000, 0, -131), 0), 100000000, 0, -130), (Tag5 ("bigarray", 1, (Tag10 (((("b")), 100000000, 0, -112), 0), 100000000, 0, -124), (Tag5 ("carray", 1, (Tag10 (((("c")), 100000000, 0, -111), 0), 100000000, 0, -125), (Tag5 ("dims", 1, (Tag10 (((0), 100000000, 0, -123), 0), 100000000, 0, -122), (Tag5 ("element", 1, (Tag10 (((0), 100000000, 0, -129), 0), 100000000, 0, -128), (Tag5 ("layout", 1, (Tag10 ((Tag3 (Tag1 ((Tag2 ("Bigarray_compat")), "c_layout"), 0, (0)), 100000000, 0, -127), 0), 100000000, 0, -126), (0, 100000000, 0, -121)), 100000000, 0, 94)), 100000000, 0, 95)), 100000000, 0, 96)), 100000000, 0, 97)), 100000000, 0, 98)), 100000000, 0, -115), (0)), 100000000, 0, -114)], (0)), 100000000, 0, -113), (Tag1 (0, ((("b")), 100000000, 0, -112), ((("c")), 100000000, 0, -111), 0), 100000000, 0, -110), 0), 100000000, 0, -109), 0, (("src/ctypes/ctypes.mli", 379, 14932, 14932), ("src/ctypes/ctypes.mli", 384, 15146, 15208), 0), 0, Tag1 ("Ctypes", 67)), 0); (("bigarray_of_array", 1352), ((Tag1 (0, (Tag3 ((("bigarray_class", 1249)), [(Tag4 ((Tag5 ("ba_repr", 1, (Tag10 (((("f")), 100000000, 0, -90), 0), 100000000, 0, -108), (Tag5 ("bigarray", 1, (Tag10 (((("b")), 100000000, 0, -85), 0), 100000000, 0, -102), (Tag5 ("carray", 1, (Tag10 ((Tag3 ((("carray", 1248)), [((("c")), 100000000, 0, -87)], (0)), 100000000, 0, -104), 0), 100000000, 0, -103), (Tag5 ("dims", 1, (Tag10 (((("i")), 100000000, 0, -101), 0), 100000000, 0, -100), (Tag5 ("element", 1, (Tag10 (((("a")), 100000000, 0, -89), 0), 100000000, 0, -107), (Tag5 ("layout", 1, (Tag10 ((Tag3 (Tag1 ((Tag2 ("Bigarray_compat")), "c_layout"), 0, (0)), 100000000, 0, -106), 0), 100000000, 0, -105), (0, 100000000, 0, -99)), 100000000, 0, 100)), 100000000, 0, 101)), 100000000, 0, 102)), 100000000, 0, 103)), 100000000, 0, 104)), 100000000, 0, -93), (0)), 100000000, 0, -92)], (0)), 100000000, 0, -91), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Bigarray_compat")), "kind"), [((("a")), 100000000, 0, -89); ((("f")), 100000000, 0, -90)], (0)), 100000000, 0, -88), (Tag1 (0, (Tag3 ((("carray", 1248)), [((("c")), 100000000, 0, -87)], (0)), 100000000, 0, -86), ((("b")), 100000000, 0, -85), 0), 100000000, 0, -84), 0), 100000000, 0, -83), 0), 100000000, 0, -82), 0, (("src/ctypes/ctypes.mli", 391, 15422, 15422), ("src/ctypes/ctypes.mli", 397, 15700, 15752), 0), 0, Tag1 ("Ctypes", 68)), 0); (("make", 1353), ((Tag1 (Tag1 ("finalise"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag3 ((("structured", 1254)), [((0), 100000000, 0, -76); ((0), 100000000, 0, -77)], (0)), 100000000, 0, -75), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -81), 0), 100000000, 0, -80)], (0)), 100000000, 0, -79), (Tag1 (0, (Tag3 ((("typ", 1259)), [(Tag3 ((("structured", 1254)), [((0), 100000000, 0, -76); ((0), 100000000, 0, -77)], (0)), 100000000, 0, -75)], (0)), 100000000, 0, -78), (Tag3 ((("structured", 1254)), [((0), 100000000, 0, -76); ((0), 100000000, 0, -77)], (0)), 100000000, 0, -75), 0), 100000000, 0, -74), 0), 100000000, 0, -73), 0, (("src/ctypes/ctypes.mli", 404, 15958, 15958), ("src/ctypes/ctypes.mli", 404, 15958, 16030), 0), 0, Tag1 ("Ctypes", 69)), 0); (("setf", 1354), ((Tag1 (0, (Tag3 ((("structured", 1254)), [((0), 100000000, 0, -71); ((0), 100000000, 0, -72)], (0)), 100000000, 0, -70), (Tag1 (0, (Tag3 ((("field", 1257)), [((("a")), 100000000, 0, -68); (Tag3 ((("structured", 1254)), [((0), 100000000, 0, -71); ((0), 100000000, 0, -72)], (0)), 100000000, 0, -70)], (0)), 100000000, 0, -69), (Tag1 (0, ((("a")), 100000000, 0, -68), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -67), 0), 100000000, 0, -66), 0), 100000000, 0, -65), 0), 100000000, 0, -64), 0, (("src/ctypes/ctypes.mli", 409, 16203, 16203), ("src/ctypes/ctypes.mli", 409, 16203, 16271), 0), 0, Tag1 ("Ctypes", 70)), 0); (("getf", 1355), ((Tag1 (0, (Tag3 ((("structured", 1254)), [((0), 100000000, 0, -62); ((0), 100000000, 0, -63)], (0)), 100000000, 0, -61), (Tag1 (0, (Tag3 ((("field", 1257)), [((("a")), 100000000, 0, -59); (Tag3 ((("structured", 1254)), [((0), 100000000, 0, -62); ((0), 100000000, 0, -63)], (0)), 100000000, 0, -61)], (0)), 100000000, 0, -60), ((("a")), 100000000, 0, -59), 0), 100000000, 0, -58), 0), 100000000, 0, -57), 0, (("src/ctypes/ctypes.mli", 413, 16375, 16375), ("src/ctypes/ctypes.mli", 413, 16375, 16435), 0), 0, Tag1 ("Ctypes", 71)), 0); (("@.", 1356), ((Tag1 (0, (Tag3 ((("structured", 1254)), [((0), 100000000, 0, -55); ((0), 100000000, 0, -56)], (0)), 100000000, 0, -54), (Tag1 (0, (Tag3 ((("field", 1257)), [((("a")), 100000000, 0, -52); (Tag3 ((("structured", 1254)), [((0), 100000000, 0, -55); ((0), 100000000, 0, -56)], (0)), 100000000, 0, -54)], (0)), 100000000, 0, -53), (Tag3 ((("ptr", 1246)), [((("a")), 100000000, 0, -52)], (0)), 100000000, 0, -51), 0), 100000000, 0, -50), 0), 100000000, 0, -49), 0, (("src/ctypes/ctypes.mli", 418, 16599, 16599), ("src/ctypes/ctypes.mli", 418, 16599, 16663), 0), 0, Tag1 ("Ctypes", 72)), 0); (("|->", 1357), ((Tag1 (0, (Tag3 ((("ptr", 1246)), [(Tag3 ((("structured", 1254)), [((0), 100000000, 0, -46); ((0), 100000000, 0, -47)], (0)), 100000000, 0, -45)], (0)), 100000000, 0, -48), (Tag1 (0, (Tag3 ((("field", 1257)), [((("a")), 100000000, 0, -43); (Tag3 ((("structured", 1254)), [((0), 100000000, 0, -46); ((0), 100000000, 0, -47)], (0)), 100000000, 0, -45)], (0)), 100000000, 0, -44), (Tag3 ((("ptr", 1246)), [((("a")), 100000000, 0, -43)], (0)), 100000000, 0, -42), 0), 100000000, 0, -41), 0), 100000000, 0, -40), 0, (("src/ctypes/ctypes.mli", 422, 16760, 16760), ("src/ctypes/ctypes.mli", 422, 16760, 16829), 0), 0, Tag1 ("Ctypes", 73)), 0); (("offsetof", 1358), ((Tag1 (0, (Tag3 ((("field", 1257)), [((0), 100000000, 0, -37); (Tag3 ((("structure", 1255)), [((0), 100000000, 0, -39)], (0)), 100000000, 0, -38)], (0)), 100000000, 0, -36), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -35), 0), 100000000, 0, -34), 0, (("src/ctypes/ctypes.mli", 426, 16941, 16941), ("src/ctypes/ctypes.mli", 426, 16941, 16985), 0), 0, Tag1 ("Ctypes", 74)), 0); (("field_type", 1359), ((Tag1 (0, (Tag3 ((("field", 1257)), [((("a")), 100000000, 0, -31); ((0), 100000000, 0, -33)], (0)), 100000000, 0, -32), (Tag3 ((("typ", 1259)), [((("a")), 100000000, 0, -31)], (0)), 100000000, 0, -30), 0), 100000000, 0, -29), 0, (("src/ctypes/ctypes.mli", 430, 17108, 17108), ("src/ctypes/ctypes.mli", 430, 17108, 17148), 0), 0, Tag1 ("Ctypes", 75)), 0); (("field_name", 1360), ((Tag1 (0, (Tag3 ((("field", 1257)), [((0), 100000000, 0, -27); ((0), 100000000, 0, -28)], (0)), 100000000, 0, -26), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -25), 0), 100000000, 0, -24), 0, (("src/ctypes/ctypes.mli", 433, 17207, 17207), ("src/ctypes/ctypes.mli", 433, 17207, 17246), 0), 0, Tag1 ("Ctypes", 76)), 0); (("addr", 1361), ((Tag1 (0, (Tag3 ((("structured", 1254)), [((0), 100000000, 0, -22); ((0), 100000000, 0, -23)], (0)), 100000000, 0, -21), (Tag3 ((("ptr", 1246)), [(Tag3 ((("structured", 1254)), [((0), 100000000, 0, -22); ((0), 100000000, 0, -23)], (0)), 100000000, 0, -21)], (0)), 100000000, 0, -20), 0), 100000000, 0, -19), 0, (("src/ctypes/ctypes.mli", 436, 17305, 17305), ("src/ctypes/ctypes.mli", 436, 17305, 17351), 0), 0, Tag1 ("Ctypes", 77)), 0); (("coerce", 1362), ((Tag1 (0, (Tag3 ((("typ", 1259)), [((("a")), 100000000, 0, -16)], (0)), 100000000, 0, -18), (Tag1 (0, (Tag3 ((("typ", 1259)), [((("b")), 100000000, 0, -15)], (0)), 100000000, 0, -17), (Tag1 (0, ((("a")), 100000000, 0, -16), ((("b")), 100000000, 0, -15), 0), 100000000, 0, -14), 0), 100000000, 0, -13), 0), 100000000, 0, -12), 0, (("src/ctypes/ctypes.mli", 441, 17442, 17442), ("src/ctypes/ctypes.mli", 441, 17442, 17483), 0), 0, Tag1 ("Ctypes", 78)), 0); (("coerce_fn", 1363), ((Tag1 (0, (Tag3 ((("fn", 1315)), [((("a")), 100000000, 0, -9)], (0)), 100000000, 0, -11), (Tag1 (0, (Tag3 ((("fn", 1315)), [((("b")), 100000000, 0, -8)], (0)), 100000000, 0, -10), (Tag1 (0, ((("a")), 100000000, 0, -9), ((("b")), 100000000, 0, -8), 0), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("src/ctypes/ctypes.mli", 460, 18311, 18311), ("src/ctypes/ctypes.mli", 460, 18311, 18353), 0), 0, Tag1 ("Ctypes", 79)), 0); Tag4 (("FOREIGN", 1364), ((Tag1 ([Tag1 (("fn", 1392), ([((("a")), 100000000, 0, -896)], 1, 0, 1, 0, [7], [2], 0, 0, (("src/ctypes/ctypes.mli", 487, 19223, 19225), ("src/ctypes/ctypes.mli", 487, 19223, 19235), 0), 0, 0, 0, Tag1 ("Ctypes", 80)), 1, 0); Tag1 (("return", 1393), ([((("a")), 100000000, 0, -895)], 1, 0, 1, 0, [7], [2], 0, 0, (("src/ctypes/ctypes.mli", 488, 19236, 19238), ("src/ctypes/ctypes.mli", 488, 19236, 19252), 0), 0, 0, 0, Tag1 ("Ctypes", 81)), 1, 0); (("@->", 1394), ((Tag1 (0, (Tag3 ((("typ", 1259)), [((("a")), 100000000, 0, -892)], (0)), 100000000, 0, -894), (Tag1 (0, (Tag3 ((("fn", 1392)), [((("b")), 100000000, 0, -891)], (0)), 100000000, 0, -893), (Tag3 ((("fn", 1392)), [(Tag1 (0, ((("a")), 100000000, 0, -892), ((("b")), 100000000, 0, -891), 0), 100000000, 0, -890)], (0)), 100000000, 0, -889), 0), 100000000, 0, -888), 0), 100000000, 0, -887), 0, (("src/ctypes/ctypes.mli", 489, 19253, 19255), ("src/ctypes/ctypes.mli", 489, 19253, 19299), 0), 0, Tag1 ("Ctypes", 82)), 0); (("returning", 1395), ((Tag1 (0, (Tag3 ((("typ", 1259)), [((("a")), 100000000, 0, -885)], (0)), 100000000, 0, -886), (Tag3 ((("fn", 1392)), [(Tag3 ((("return", 1393)), [((("a")), 100000000, 0, -885)], (0)), 100000000, 0, -884)], (0)), 100000000, 0, -883), 0), 100000000, 0, -882), 0, (("src/ctypes/ctypes.mli", 490, 19300, 19302), ("src/ctypes/ctypes.mli", 490, 19300, 19340), 0), 0, Tag1 ("Ctypes", 83)), 0); Tag1 (("result", 1396), ([((("a")), 100000000, 0, -881)], 1, 0, 1, 0, [7], [2], 0, 0, (("src/ctypes/ctypes.mli", 492, 19342, 19344), ("src/ctypes/ctypes.mli", 492, 19342, 19358), 0), 0, 0, 0, Tag1 ("Ctypes", 84)), 1, 0); (("foreign", 1397), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -880), (Tag1 (0, (Tag3 ((("fn", 1392)), [(Tag1 (0, ((("a")), 100000000, 0, -877), ((("b")), 100000000, 0, -876), 0), 100000000, 0, -879)], (0)), 100000000, 0, -878), (Tag3 ((("result", 1396)), [(Tag1 (0, ((("a")), 100000000, 0, -877), ((("b")), 100000000, 0, -876), 0), 100000000, 0, -875)], (0)), 100000000, 0, -874), 0), 100000000, 0, -873), 0), 100000000, 0, -872), 0, (("src/ctypes/ctypes.mli", 493, 19359, 19361), ("src/ctypes/ctypes.mli", 493, 19359, 19419), 0), 0, Tag1 ("Ctypes", 85)), 0); (("foreign_value", 1398), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -871), (Tag1 (0, (Tag3 ((("typ", 1259)), [((("a")), 100000000, 0, -869)], (0)), 100000000, 0, -870), (Tag3 ((("result", 1396)), [(Tag3 ((("ptr", 1246)), [((("a")), 100000000, 0, -869)], (0)), 100000000, 0, -868)], (0)), 100000000, 0, -867), 0), 100000000, 0, -866), 0), 100000000, 0, -865), 0, (("src/ctypes/ctypes.mli", 494, 19420, 19422), ("src/ctypes/ctypes.mli", 494, 19420, 19475), 0), 0, Tag1 ("Ctypes", 86)), 0)])), 0, (("src/ctypes/ctypes.mli", 485, 19197, 19197), ("src/ctypes/ctypes.mli", 495, 19476, 19479), 0), Tag1 ("Ctypes", 87)), 0); Tag4 (("TYPE", 1365), ((Tag1 ([Tag1 (("typ", 1399), ([((("a")), 100000000, 0, -1169)], 1, 0, 1, 0, [7], [2], 0, 0, (("src/ctypes/ctypes_types.mli", 17, 304, 306), ("src/ctypes/ctypes_types.mli", 17, 304, 317), 0), 0, 0, 0, Tag1 ("Ctypes_types", 0)), 1, 0); (("void", 1400), ((Tag3 ((("typ", 1399)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1168)], (0)), 100000000, 0, -1167), 0, (("src/ctypes/ctypes_types.mli", 36, 1026, 1028), ("src/ctypes/ctypes_types.mli", 36, 1026, 1048), 0), 0, Tag1 ("Ctypes_types", 1)), 0); (("char", 1401), ((Tag3 ((("typ", 1399)), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -1166)], (0)), 100000000, 0, -1165), 0, (("src/ctypes/ctypes_types.mli", 60, 1868, 1870), ("src/ctypes/ctypes_types.mli", 60, 1868, 1889), 0), 0, Tag1 ("Ctypes_types", 2)), 0); (("schar", 1402), ((Tag3 ((("typ", 1399)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1164)], (0)), 100000000, 0, -1163), 0, (("src/ctypes/ctypes_types.mli", 65, 1973, 1975), ("src/ctypes/ctypes_types.mli", 65, 1973, 1994), 0), 0, Tag1 ("Ctypes_types", 3)), 0); (("short", 1403), ((Tag3 ((("typ", 1399)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1162)], (0)), 100000000, 0, -1161), 0, (("src/ctypes/ctypes_types.mli", 68, 2050, 2052), ("src/ctypes/ctypes_types.mli", 68, 2050, 2071), 0), 0, Tag1 ("Ctypes_types", 4)), 0); (("int", 1404), ((Tag3 ((("typ", 1399)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1160)], (0)), 100000000, 0, -1159), 0, (("src/ctypes/ctypes_types.mli", 71, 2132, 2134), ("src/ctypes/ctypes_types.mli", 71, 2132, 2153), 0), 0, Tag1 ("Ctypes_types", 5)), 0); (("long", 1405), ((Tag3 ((("typ", 1399)), [(Tag3 (Tag1 ((Tag2 ("Signed")), "long"), 0, (0)), 100000000, 0, -1158)], (0)), 100000000, 0, -1157), 0, (("src/ctypes/ctypes_types.mli", 74, 2212, 2214), ("src/ctypes/ctypes_types.mli", 74, 2212, 2234), 0), 0, Tag1 ("Ctypes_types", 6)), 0); (("llong", 1406), ((Tag3 ((("typ", 1399)), [(Tag3 (Tag1 ((Tag2 ("Signed")), "llong"), 0, (0)), 100000000, 0, -1156)], (0)), 100000000, 0, -1155), 0, (("src/ctypes/ctypes_types.mli", 77, 2294, 2296), ("src/ctypes/ctypes_types.mli", 77, 2294, 2318), 0), 0, Tag1 ("Ctypes_types", 7)), 0); (("nativeint", 1407), ((Tag3 ((("typ", 1399)), [(Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -1154)], (0)), 100000000, 0, -1153), 0, (("src/ctypes/ctypes_types.mli", 80, 2383, 2385), ("src/ctypes/ctypes_types.mli", 80, 2383, 2414), 0), 0, Tag1 ("Ctypes_types", 8)), 0); (("int8_t", 1408), ((Tag3 ((("typ", 1399)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1152)], (0)), 100000000, 0, -1151), 0, (("src/ctypes/ctypes_types.mli", 83, 2473, 2475), ("src/ctypes/ctypes_types.mli", 83, 2473, 2495), 0), 0, Tag1 ("Ctypes_types", 9)), 0); (("int16_t", 1409), ((Tag3 ((("typ", 1399)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1150)], (0)), 100000000, 0, -1149), 0, (("src/ctypes/ctypes_types.mli", 86, 2557, 2559), ("src/ctypes/ctypes_types.mli", 86, 2557, 2580), 0), 0, Tag1 ("Ctypes_types", 10)), 0); (("int32_t", 1410), ((Tag3 ((("typ", 1399)), [(Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -1148)], (0)), 100000000, 0, -1147), 0, (("src/ctypes/ctypes_types.mli", 89, 2642, 2644), ("src/ctypes/ctypes_types.mli", 89, 2642, 2667), 0), 0, Tag1 ("Ctypes_types", 11)), 0); (("int64_t", 1411), ((Tag3 ((("typ", 1399)), [(Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -1146)], (0)), 100000000, 0, -1145), 0, (("src/ctypes/ctypes_types.mli", 92, 2729, 2731), ("src/ctypes/ctypes_types.mli", 92, 2729, 2754), 0), 0, Tag1 ("Ctypes_types", 12)), 0); Tag3 (("Intptr", 1412), 0, ((Tag1 ((Tag2 ("Signed")), "S")), 0, (("src/ctypes/ctypes_types.mli", 95, 2816, 2818), ("src/ctypes/ctypes_types.mli", 95, 2816, 2842), 0), Tag1 ("Ctypes_types", 13)), 0, 0); (("intptr_t", 1413), ((Tag3 ((("typ", 1399)), [(Tag3 (Tag1 ((("Intptr", 1412)), "t"), 0, (0)), 100000000, 0, -1144)], (0)), 100000000, 0, -1143), 0, (("src/ctypes/ctypes_types.mli", 96, 2843, 2845), ("src/ctypes/ctypes_types.mli", 96, 2843, 2872), 0), 0, Tag1 ("Ctypes_types", 14)), 0); Tag3 (("Ptrdiff", 1414), 0, ((Tag1 ((Tag2 ("Signed")), "S")), 0, (("src/ctypes/ctypes_types.mli", 99, 2925, 2927), ("src/ctypes/ctypes_types.mli", 99, 2925, 2952), 0), Tag1 ("Ctypes_types", 15)), 0, 0); (("ptrdiff_t", 1415), ((Tag3 ((("typ", 1399)), [(Tag3 (Tag1 ((("Ptrdiff", 1414)), "t"), 0, (0)), 100000000, 0, -1142)], (0)), 100000000, 0, -1141), 0, (("src/ctypes/ctypes_types.mli", 100, 2953, 2955), ("src/ctypes/ctypes_types.mli", 100, 2953, 2984), 0), 0, Tag1 ("Ctypes_types", 16)), 0); (("camlint", 1416), ((Tag3 ((("typ", 1399)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1140)], (0)), 100000000, 0, -1139), 0, (("src/ctypes/ctypes_types.mli", 103, 3038, 3040), ("src/ctypes/ctypes_types.mli", 103, 3038, 3061), 0), 0, Tag1 ("Ctypes_types", 17)), 0); (("uchar", 1417), ((Tag3 ((("typ", 1399)), [(Tag3 (Tag1 ((Tag2 ("Unsigned")), "uchar"), 0, (0)), 100000000, 0, -1138)], (0)), 100000000, 0, -1137), 0, (("src/ctypes/ctypes_types.mli", 109, 3204, 3206), ("src/ctypes/ctypes_types.mli", 109, 3204, 3227), 0), 0, Tag1 ("Ctypes_types", 18)), 0); (("bool", 1418), ((Tag3 ((("typ", 1399)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1136)], (0)), 100000000, 0, -1135), 0, (("src/ctypes/ctypes_types.mli", 112, 3285, 3287), ("src/ctypes/ctypes_types.mli", 112, 3285, 3306), 0), 0, Tag1 ("Ctypes_types", 19)), 0); (("uint8_t", 1419), ((Tag3 ((("typ", 1399)), [(Tag3 (Tag1 ((Tag2 ("Unsigned")), "uint8"), 0, (0)), 100000000, 0, -1134)], (0)), 100000000, 0, -1133), 0, (("src/ctypes/ctypes_types.mli", 115, 3355, 3357), ("src/ctypes/ctypes_types.mli", 115, 3355, 3380), 0), 0, Tag1 ("Ctypes_types", 20)), 0); (("uint16_t", 1420), ((Tag3 ((("typ", 1399)), [(Tag3 (Tag1 ((Tag2 ("Unsigned")), "uint16"), 0, (0)), 100000000, 0, -1132)], (0)), 100000000, 0, -1131), 0, (("src/ctypes/ctypes_types.mli", 118, 3444, 3446), ("src/ctypes/ctypes_types.mli", 118, 3444, 3471), 0), 0, Tag1 ("Ctypes_types", 21)), 0); (("uint32_t", 1421), ((Tag3 ((("typ", 1399)), [(Tag3 (Tag1 ((Tag2 ("Unsigned")), "uint32"), 0, (0)), 100000000, 0, -1130)], (0)), 100000000, 0, -1129), 0, (("src/ctypes/ctypes_types.mli", 121, 3535, 3537), ("src/ctypes/ctypes_types.mli", 121, 3535, 3562), 0), 0, Tag1 ("Ctypes_types", 22)), 0); (("uint64_t", 1422), ((Tag3 ((("typ", 1399)), [(Tag3 (Tag1 ((Tag2 ("Unsigned")), "uint64"), 0, (0)), 100000000, 0, -1128)], (0)), 100000000, 0, -1127), 0, (("src/ctypes/ctypes_types.mli", 124, 3626, 3628), ("src/ctypes/ctypes_types.mli", 124, 3626, 3653), 0), 0, Tag1 ("Ctypes_types", 23)), 0); (("size_t", 1423), ((Tag3 ((("typ", 1399)), [(Tag3 (Tag1 ((Tag2 ("Unsigned")), "size_t"), 0, (0)), 100000000, 0, -1126)], (0)), 100000000, 0, -1125), 0, (("src/ctypes/ctypes_types.mli", 127, 3717, 3719), ("src/ctypes/ctypes_types.mli", 127, 3717, 3742), 0), 0, Tag1 ("Ctypes_types", 24)), 0); (("ushort", 1424), ((Tag3 ((("typ", 1399)), [(Tag3 (Tag1 ((Tag2 ("Unsigned")), "ushort"), 0, (0)), 100000000, 0, -1124)], (0)), 100000000, 0, -1123), 0, (("src/ctypes/ctypes_types.mli", 132, 3934, 3936), ("src/ctypes/ctypes_types.mli", 132, 3934, 3959), 0), 0, Tag1 ("Ctypes_types", 25)), 0); (("sint", 1425), ((Tag3 ((("typ", 1399)), [(Tag3 (Tag1 ((Tag2 ("Signed")), "sint"), 0, (0)), 100000000, 0, -1122)], (0)), 100000000, 0, -1121), 0, (("src/ctypes/ctypes_types.mli", 135, 4018, 4020), ("src/ctypes/ctypes_types.mli", 135, 4018, 4039), 0), 0, Tag1 ("Ctypes_types", 26)), 0); (("uint", 1426), ((Tag3 ((("typ", 1399)), [(Tag3 (Tag1 ((Tag2 ("Unsigned")), "uint"), 0, (0)), 100000000, 0, -1120)], (0)), 100000000, 0, -1119), 0, (("src/ctypes/ctypes_types.mli", 138, 4087, 4089), ("src/ctypes/ctypes_types.mli", 138, 4087, 4108), 0), 0, Tag1 ("Ctypes_types", 27)), 0); (("ulong", 1427), ((Tag3 ((("typ", 1399)), [(Tag3 (Tag1 ((Tag2 ("Unsigned")), "ulong"), 0, (0)), 100000000, 0, -1118)], (0)), 100000000, 0, -1117), 0, (("src/ctypes/ctypes_types.mli", 141, 4165, 4167), ("src/ctypes/ctypes_types.mli", 141, 4165, 4188), 0), 0, Tag1 ("Ctypes_types", 28)), 0); (("ullong", 1428), ((Tag3 ((("typ", 1399)), [(Tag3 (Tag1 ((Tag2 ("Unsigned")), "ullong"), 0, (0)), 100000000, 0, -1116)], (0)), 100000000, 0, -1115), 0, (("src/ctypes/ctypes_types.mli", 144, 4246, 4248), ("src/ctypes/ctypes_types.mli", 144, 4246, 4271), 0), 0, Tag1 ("Ctypes_types", 29)), 0); Tag3 (("Uintptr", 1429), 0, ((Tag1 ((Tag2 ("Unsigned")), "S")), 0, (("src/ctypes/ctypes_types.mli", 147, 4334, 4336), ("src/ctypes/ctypes_types.mli", 147, 4334, 4363), 0), Tag1 ("Ctypes_types", 30)), 0, 0); (("uintptr_t", 1430), ((Tag3 ((("typ", 1399)), [(Tag3 (Tag1 ((("Uintptr", 1429)), "t"), 0, (0)), 100000000, 0, -1114)], (0)), 100000000, 0, -1113), 0, (("src/ctypes/ctypes_types.mli", 148, 4364, 4366), ("src/ctypes/ctypes_types.mli", 148, 4364, 4395), 0), 0, Tag1 ("Ctypes_types", 31)), 0); (("float", 1431), ((Tag3 ((("typ", 1399)), [(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1112)], (0)), 100000000, 0, -1111), 0, (("src/ctypes/ctypes_types.mli", 153, 4478, 4480), ("src/ctypes/ctypes_types.mli", 153, 4478, 4501), 0), 0, Tag1 ("Ctypes_types", 32)), 0); (("double", 1432), ((Tag3 ((("typ", 1399)), [(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -1110)], (0)), 100000000, 0, -1109), 0, (("src/ctypes/ctypes_types.mli", 156, 4568, 4570), ("src/ctypes/ctypes_types.mli", 156, 4568, 4592), 0), 0, Tag1 ("Ctypes_types", 33)), 0); (("ldouble", 1433), ((Tag3 ((("typ", 1399)), [(Tag3 (Tag1 ((Tag2 ("LDouble")), "t"), 0, (0)), 100000000, 0, -1108)], (0)), 100000000, 0, -1107), 0, (("src/ctypes/ctypes_types.mli", 159, 4643, 4645), ("src/ctypes/ctypes_types.mli", 159, 4643, 4672), 0), 0, Tag1 ("Ctypes_types", 34)), 0); (("complex32", 1434), ((Tag3 ((("typ", 1399)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Complex"), "t"), 0, (0)), 100000000, 0, -1106)], (0)), 100000000, 0, -1105), 0, (("src/ctypes/ctypes_types.mli", 164, 4756, 4758), ("src/ctypes/ctypes_types.mli", 164, 4756, 4787), 0), 0, Tag1 ("Ctypes_types", 35)), 0); (("complex64", 1435), ((Tag3 ((("typ", 1399)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Complex"), "t"), 0, (0)), 100000000, 0, -1104)], (0)), 100000000, 0, -1103), 0, (("src/ctypes/ctypes_types.mli", 167, 4864, 4866), ("src/ctypes/ctypes_types.mli", 167, 4864, 4895), 0), 0, Tag1 ("Ctypes_types", 36)), 0); (("complexld", 1436), ((Tag3 ((("typ", 1399)), [(Tag3 (Tag1 ((Tag2 ("ComplexL")), "t"), 0, (0)), 100000000, 0, -1102)], (0)), 100000000, 0, -1101), 0, (("src/ctypes/ctypes_types.mli", 170, 4973, 4975), ("src/ctypes/ctypes_types.mli", 170, 4973, 5005), 0), 0, Tag1 ("Ctypes_types", 37)), 0); (("ptr", 1437), ((Tag1 (0, (Tag3 ((("typ", 1399)), [((("a")), 100000000, 0, -1099)], (0)), 100000000, 0, -1100), (Tag3 ((("typ", 1399)), [(Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "ptr"), [((("a")), 100000000, 0, -1099)], (0)), 100000000, 0, -1098)], (0)), 100000000, 0, -1097), 0), 100000000, 0, -1096), 0, (("src/ctypes/ctypes_types.mli", 177, 5171, 5173), ("src/ctypes/ctypes_types.mli", 177, 5171, 5217), 0), 0, Tag1 ("Ctypes_types", 38)), 0); (("ptr_opt", 1438), ((Tag1 (0, (Tag3 ((("typ", 1399)), [((("a")), 100000000, 0, -1094)], (0)), 100000000, 0, -1095), (Tag3 ((("typ", 1399)), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "ptr"), [((("a")), 100000000, 0, -1094)], (0)), 100000000, 0, -1093)], (0)), 100000000, 0, -1092)], (0)), 100000000, 0, -1091), 0), 100000000, 0, -1090), 0, (("src/ctypes/ctypes_types.mli", 181, 5315, 5317), ("src/ctypes/ctypes_types.mli", 181, 5315, 5372), 0), 0, Tag1 ("Ctypes_types", 39)), 0); (("string", 1439), ((Tag3 ((("typ", 1399)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1089)], (0)), 100000000, 0, -1088), 0, (("src/ctypes/ctypes_types.mli", 186, 5555, 5557), ("src/ctypes/ctypes_types.mli", 186, 5555, 5580), 0), 0, Tag1 ("Ctypes_types", 40)), 0); (("string_opt", 1440), ((Tag3 ((("typ", 1399)), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1087)], (0)), 100000000, 0, -1086)], (0)), 100000000, 0, -1085), 0, (("src/ctypes/ctypes_types.mli", 202, 6239, 6241), ("src/ctypes/ctypes_types.mli", 202, 6239, 6275), 0), 0, Tag1 ("Ctypes_types", 41)), 0); (("ocaml_string", 1441), ((Tag3 ((("typ", 1399)), [(Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "ocaml"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1084)], (0)), 100000000, 0, -1083)], (0)), 100000000, 0, -1082), 0, (("src/ctypes/ctypes_types.mli", 209, 6454, 6456), ("src/ctypes/ctypes_types.mli", 209, 6454, 6505), 0), 0, Tag1 ("Ctypes_types", 42)), 0); (("ocaml_bytes", 1442), ((Tag3 ((("typ", 1399)), [(Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "ocaml"), [(Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -1081)], (0)), 100000000, 0, -1080)], (0)), 100000000, 0, -1079), 0, (("src/ctypes/ctypes_types.mli", 212, 6583, 6585), ("src/ctypes/ctypes_types.mli", 212, 6583, 6632), 0), 0, Tag1 ("Ctypes_types", 43)), 0); (("array", 1443), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1078), (Tag1 (0, (Tag3 ((("typ", 1399)), [((("a")), 100000000, 0, -1076)], (0)), 100000000, 0, -1077), (Tag3 ((("typ", 1399)), [(Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "carray"), [((("a")), 100000000, 0, -1076)], (0)), 100000000, 0, -1075)], (0)), 100000000, 0, -1074), 0), 100000000, 0, -1073), 0), 100000000, 0, -1072), 0, (("src/ctypes/ctypes_types.mli", 219, 6768, 6770), ("src/ctypes/ctypes_types.mli", 219, 6768, 6826), 0), 0, Tag1 ("Ctypes_types", 44)), 0); (("bigarray", 1444), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "bigarray_class"), [(Tag4 ((Tag5 ("ba_repr", 1, (Tag10 (((("b")), 100000000, 0, -1053), 0), 100000000, 0, -1071), (Tag5 ("bigarray", 1, (Tag10 (((("bigarray")), 100000000, 0, -1050), 0), 100000000, 0, -1065), (Tag5 ("carray", 1, (Tag10 (((0), 100000000, 0, -1067), 0), 100000000, 0, -1066), (Tag5 ("dims", 1, (Tag10 (((("dims")), 100000000, 0, -1054), 0), 100000000, 0, -1064), (Tag5 ("element", 1, (Tag10 (((("a")), 100000000, 0, -1052), 0), 100000000, 0, -1070), (Tag5 ("layout", 1, (Tag10 ((Tag3 (Tag1 ((Tag2 ("Bigarray_compat")), "c_layout"), 0, (0)), 100000000, 0, -1069), 0), 100000000, 0, -1068), (0, 100000000, 0, -1063)), 100000000, 0, 106)), 100000000, 0, 107)), 100000000, 0, 108)), 100000000, 0, 109)), 100000000, 0, 110)), 100000000, 0, -1057), (0)), 100000000, 0, -1056)], (0)), 100000000, 0, -1055), (Tag1 (0, ((("dims")), 100000000, 0, -1054), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Bigarray_compat")), "kind"), [((("a")), 100000000, 0, -1052); ((("b")), 100000000, 0, -1053)], (0)), 100000000, 0, -1051), (Tag3 ((("typ", 1399)), [((("bigarray")), 100000000, 0, -1050)], (0)), 100000000, 0, -1049), 0), 100000000, 0, -1048), 0), 100000000, 0, -1047), 0), 100000000, 0, -1046), 0, (("src/ctypes/ctypes_types.mli", 225, 6967, 6969), ("src/ctypes/ctypes_types.mli", 232, 7158, 7218), 0), 0, Tag1 ("Ctypes_types", 45)), 0); (("fortran_bigarray", 1445), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "bigarray_class"), [(Tag4 ((Tag5 ("ba_repr", 1, (Tag10 (((("b")), 100000000, 0, -1027), 0), 100000000, 0, -1045), (Tag5 ("bigarray", 1, (Tag10 (((("bigarray")), 100000000, 0, -1024), 0), 100000000, 0, -1039), (Tag5 ("carray", 1, (Tag10 (((0), 100000000, 0, -1041), 0), 100000000, 0, -1040), (Tag5 ("dims", 1, (Tag10 (((("dims")), 100000000, 0, -1028), 0), 100000000, 0, -1038), (Tag5 ("element", 1, (Tag10 (((("a")), 100000000, 0, -1026), 0), 100000000, 0, -1044), (Tag5 ("layout", 1, (Tag10 ((Tag3 (Tag1 ((Tag2 ("Bigarray_compat")), "fortran_layout"), 0, (0)), 100000000, 0, -1043), 0), 100000000, 0, -1042), (0, 100000000, 0, -1037)), 100000000, 0, 112)), 100000000, 0, 113)), 100000000, 0, 114)), 100000000, 0, 115)), 100000000, 0, 116)), 100000000, 0, -1031), (0)), 100000000, 0, -1030)], (0)), 100000000, 0, -1029), (Tag1 (0, ((("dims")), 100000000, 0, -1028), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Bigarray_compat")), "kind"), [((("a")), 100000000, 0, -1026); ((("b")), 100000000, 0, -1027)], (0)), 100000000, 0, -1025), (Tag3 ((("typ", 1399)), [((("bigarray")), 100000000, 0, -1024)], (0)), 100000000, 0, -1023), 0), 100000000, 0, -1022), 0), 100000000, 0, -1021), 0), 100000000, 0, -1020), 0, (("src/ctypes/ctypes_types.mli", 236, 7363, 7365), ("src/ctypes/ctypes_types.mli", 243, 7568, 7628), 0), 0, Tag1 ("Ctypes_types", 46)), 0); (("typ_of_bigarray_kind", 1446), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Bigarray_compat")), "kind"), [((("a")), 100000000, 0, -1017); ((("b")), 100000000, 0, -1019)], (0)), 100000000, 0, -1018), (Tag3 ((("typ", 1399)), [((("a")), 100000000, 0, -1017)], (0)), 100000000, 0, -1016), 0), 100000000, 0, -1015), 0, (("src/ctypes/ctypes_types.mli", 247, 7779, 7781), ("src/ctypes/ctypes_types.mli", 247, 7779, 7847), 0), 0, Tag1 ("Ctypes_types", 47)), 0); Tag1 (("field", 1447), ([((("a")), 100000000, 0, -1013); ((("t")), 100000000, 0, -1014)], 2, 0, 1, 0, [7; 7], [2; 2], 0, 0, (("src/ctypes/ctypes_types.mli", 253, 7978, 7980), ("src/ctypes/ctypes_types.mli", 253, 7978, 7999), 0), 0, 0, 0, Tag1 ("Ctypes_types", 48)), 1, 0); (("structure", 1448), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1012), (Tag3 ((("typ", 1399)), [(Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "structure"), [((("s")), 100000000, 0, -1011)], (0)), 100000000, 0, -1010)], (0)), 100000000, 0, -1009), 0), 100000000, 0, -1008), 0, (("src/ctypes/ctypes_types.mli", 255, 8001, 8003), ("src/ctypes/ctypes_types.mli", 255, 8001, 8059), 0), 0, Tag1 ("Ctypes_types", 49)), 0); (("union", 1449), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1007), (Tag3 ((("typ", 1399)), [(Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "union"), [((("s")), 100000000, 0, -1006)], (0)), 100000000, 0, -1005)], (0)), 100000000, 0, -1004), 0), 100000000, 0, -1003), 0, (("src/ctypes/ctypes_types.mli", 270, 8659, 8661), ("src/ctypes/ctypes_types.mli", 270, 8659, 8709), 0), 0, Tag1 ("Ctypes_types", 50)), 0); (("field", 1450), ((Tag1 (0, (Tag3 ((("typ", 1399)), [(Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "structured"), [((("s")), 100000000, 0, -997); (Tag8 (([("Struct", Tag1 (1, 0, 0, (1))); ("Union", Tag1 (1, 0, 0, (1)))], ((0), 100000000, 0, -999), 1, 0, 0)), 100000000, 0, -998)], (0)), 100000000, 0, -996)], (0)), 100000000, 0, -1002), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1001), (Tag1 (0, (Tag3 ((("typ", 1399)), [((("a")), 100000000, 0, -995)], (0)), 100000000, 0, -1000), (Tag3 ((("field", 1447)), [((("a")), 100000000, 0, -995); (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "structured"), [((("s")), 100000000, 0, -997); (Tag8 (([("Struct", Tag1 (1, 0, 0, (1))); ("Union", Tag1 (1, 0, 0, (1)))], ((0), 100000000, 0, -999), 1, 0, 0)), 100000000, 0, -998)], (0)), 100000000, 0, -996)], (0)), 100000000, 0, -994), 0), 100000000, 0, -993), 0), 100000000, 0, -992), 0), 100000000, 0, -991), 0, (("src/ctypes/ctypes_types.mli", 274, 8829, 8831), ("src/ctypes/ctypes_types.mli", 275, 8873, 8947), 0), 0, Tag1 ("Ctypes_types", 51)), 0); (("seal", 1451), ((Tag1 (0, (Tag3 ((("typ", 1399)), [(Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "structured"), [((0), 100000000, 0, -988); (Tag8 (([("Struct", Tag1 (1, 0, 0, (1))); ("Union", Tag1 (1, 0, 0, (1)))], ((0), 100000000, 0, -990), 1, 0, 0)), 100000000, 0, -989)], (0)), 100000000, 0, -987)], (0)), 100000000, 0, -986), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -985), 0), 100000000, 0, -984), 0, (("src/ctypes/ctypes_types.mli", 284, 9356, 9358), ("src/ctypes/ctypes_types.mli", 284, 9356, 9431), 0), 0, Tag1 ("Ctypes_types", 52)), 0); (("view", 1452), ((Tag1 (Tag1 ("format_typ"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -983), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -982), 0), 100000000, 0, -981), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -980), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -979), 0), 100000000, 0, -978), 0), 100000000, 0, -977)], (0)), 100000000, 0, -976), (Tag1 (Tag1 ("format"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -975), (Tag1 (0, ((("b")), 100000000, 0, -966), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -974), 0), 100000000, 0, -973), 0), 100000000, 0, -972)], (0)), 100000000, 0, -971), (Tag1 (("read"), (Tag1 (0, ((("a")), 100000000, 0, -968), ((("b")), 100000000, 0, -966), 0), 100000000, 0, -970), (Tag1 (("write"), (Tag1 (0, ((("b")), 100000000, 0, -966), ((("a")), 100000000, 0, -968), 0), 100000000, 0, -969), (Tag1 (0, (Tag3 ((("typ", 1399)), [((("a")), 100000000, 0, -968)], (0)), 100000000, 0, -967), (Tag3 ((("typ", 1399)), [((("b")), 100000000, 0, -966)], (0)), 100000000, 0, -965), 0), 100000000, 0, -964), 0), 100000000, 0, -963), 0), 100000000, 0, -962), 0), 100000000, 0, -961), 0), 100000000, 0, -960), 0, (("src/ctypes/ctypes_types.mli", 292, 9750, 9752), ("src/ctypes/ctypes_types.mli", 294, 9892, 9960), 0), 0, Tag1 ("Ctypes_types", 53)), 0); (("typedef", 1453), ((Tag1 (0, (Tag3 ((("typ", 1399)), [((("a")), 100000000, 0, -957)], (0)), 100000000, 0, -959), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -958), (Tag3 ((("typ", 1399)), [((("a")), 100000000, 0, -957)], (0)), 100000000, 0, -956), 0), 100000000, 0, -955), 0), 100000000, 0, -954), 0, (("src/ctypes/ctypes_types.mli", 320, 11120, 11122), ("src/ctypes/ctypes_types.mli", 320, 11120, 11162), 0), 0, Tag1 ("Ctypes_types", 54)), 0); (("abstract", 1454), ((Tag1 (("name"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -953), (Tag1 (("size"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -952), (Tag1 (("alignment"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -951), (Tag3 ((("typ", 1399)), [(Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "abstract"), [((("a")), 100000000, 0, -950)], (0)), 100000000, 0, -949)], (0)), 100000000, 0, -948), 0), 100000000, 0, -947), 0), 100000000, 0, -946), 0), 100000000, 0, -945), 0, (("src/ctypes/ctypes_types.mli", 330, 11464, 11466), ("src/ctypes/ctypes_types.mli", 330, 11464, 11554), 0), 0, Tag1 ("Ctypes_types", 55)), 0); (("lift_typ", 1455), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "typ"), [((("a")), 100000000, 0, -943)], (0)), 100000000, 0, -944), (Tag3 ((("typ", 1399)), [((("a")), 100000000, 0, -943)], (0)), 100000000, 0, -942), 0), 100000000, 0, -941), 0, (("src/ctypes/ctypes_types.mli", 336, 11706, 11708), ("src/ctypes/ctypes_types.mli", 336, 11706, 11753), 0), 0, Tag1 ("Ctypes_types", 56)), 0); Tag1 (("fn", 1456), ([((("a")), 100000000, 0, -940)], 1, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "fn"), [((("a")), 100000000, 0, -940)], (0)), 100000000, 0, -939)), [63], [0], 0, 0, (("src/ctypes/ctypes_types.mli", 349, 12267, 12269), ("src/ctypes/ctypes_types.mli", 349, 12267, 12301), 0), 0, 0, 0, Tag1 ("Ctypes_types", 57)), 1, 0); (("@->", 1457), ((Tag1 (0, (Tag3 ((("typ", 1399)), [((("a")), 100000000, 0, -936)], (0)), 100000000, 0, -938), (Tag1 (0, (Tag3 ((("fn", 1456)), [((("b")), 100000000, 0, -935)], (0)), 100000000, 0, -937), (Tag3 ((("fn", 1456)), [(Tag1 (0, ((("a")), 100000000, 0, -936), ((("b")), 100000000, 0, -935), 0), 100000000, 0, -934)], (0)), 100000000, 0, -933), 0), 100000000, 0, -932), 0), 100000000, 0, -931), 0, (("src/ctypes/ctypes_types.mli", 354, 12486, 12488), ("src/ctypes/ctypes_types.mli", 354, 12486, 12534), 0), 0, Tag1 ("Ctypes_types", 58)), 0); (("returning", 1458), ((Tag1 (0, (Tag3 ((("typ", 1399)), [((("a")), 100000000, 0, -929)], (0)), 100000000, 0, -930), (Tag3 ((("fn", 1456)), [((("a")), 100000000, 0, -929)], (0)), 100000000, 0, -928), 0), 100000000, 0, -927), 0, (("src/ctypes/ctypes_types.mli", 365, 12890, 12892), ("src/ctypes/ctypes_types.mli", 365, 12890, 12923), 0), 0, Tag1 ("Ctypes_types", 59)), 0); Tag1 (("static_funptr", 1459), ([((("a")), 100000000, 0, -926)], 1, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "static_funptr"), [((("a")), 100000000, 0, -926)], (0)), 100000000, 0, -925)), [15], [0], 0, 0, (("src/ctypes/ctypes_types.mli", 371, 13141, 13143), ("src/ctypes/ctypes_types.mli", 371, 13141, 13197), 0), 0, 0, 0, Tag1 ("Ctypes_types", 60)), 1, 0); (("static_funptr", 1460), ((Tag1 (0, (Tag3 ((("fn", 1456)), [((("a")), 100000000, 0, -923)], (0)), 100000000, 0, -924), (Tag3 ((("typ", 1399)), [(Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "static_funptr"), [((("a")), 100000000, 0, -923)], (0)), 100000000, 0, -922)], (0)), 100000000, 0, -921), 0), 100000000, 0, -920), 0, (("src/ctypes/ctypes_types.mli", 374, 13266, 13268), ("src/ctypes/ctypes_types.mli", 374, 13266, 13331), 0), 0, Tag1 ("Ctypes_types", 61)), 0); Tag1 (("const", 1461), ([((("a")), 100000000, 0, -919)], 1, 0, 1, 0, [7], [2], 0, 0, (("src/ctypes/ctypes.mli", 504, 19632, 19634), ("src/ctypes/ctypes.mli", 504, 19632, 19647), 0), 0, 0, 0, Tag1 ("Ctypes", 88)), 1, 0); (("constant", 1462), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -918), (Tag1 (0, (Tag3 ((("typ", 1399)), [((("a")), 100000000, 0, -916)], (0)), 100000000, 0, -917), (Tag3 ((("const", 1461)), [((("a")), 100000000, 0, -916)], (0)), 100000000, 0, -915), 0), 100000000, 0, -914), 0), 100000000, 0, -913), 0, (("src/ctypes/ctypes.mli", 505, 19648, 19650), ("src/ctypes/ctypes.mli", 505, 19648, 19693), 0), 0, Tag1 ("Ctypes", 89)), 0); (("enum", 1463), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -912), (Tag1 (Tag1 ("typedef"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -911)], (0)), 100000000, 0, -910), (Tag1 (Tag1 ("unexpected"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -909), ((("a")), 100000000, 0, -902), 0), 100000000, 0, -908)], (0)), 100000000, 0, -907), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("a")), 100000000, 0, -902); (Tag3 ((("const", 1461)), [(Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -906)], (0)), 100000000, 0, -905)]), 100000000, 0, -904)], (0)), 100000000, 0, -903), (Tag3 ((("typ", 1399)), [((("a")), 100000000, 0, -902)], (0)), 100000000, 0, -901), 0), 100000000, 0, -900), 0), 100000000, 0, -899), 0), 100000000, 0, -898), 0), 100000000, 0, -897), 0, (("src/ctypes/ctypes.mli", 520, 20360, 20362), ("src/ctypes/ctypes.mli", 521, 20400, 20466), 0), 0, Tag1 ("Ctypes", 90)), 0)])), 0, (("src/ctypes/ctypes.mli", 500, 19580, 19580), ("src/ctypes/ctypes.mli", 567, 22015, 22018), 0), Tag1 ("Ctypes", 91)), 0); Tag3 (("Root", 1366), 0, (Tag1 ([(("create", 1464), ((Tag1 (0, ((("a")), 100000000, 0, -1187), (Tag3 ((("ptr", 1246)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1186)], (0)), 100000000, 0, -1185), 0), 100000000, 0, -1184), 0, (("src/ctypes/ctypes.mli", 572, 22093, 22095), ("src/ctypes/ctypes.mli", 572, 22093, 22122), 0), 0, Tag1 ("Ctypes", 92)), 0); (("get", 1465), ((Tag1 (0, (Tag3 ((("ptr", 1246)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1183)], (0)), 100000000, 0, -1182), ((("a")), 100000000, 0, -1181), 0), 100000000, 0, -1180), 0, (("src/ctypes/ctypes.mli", 576, 22266, 22268), ("src/ctypes/ctypes.mli", 576, 22266, 22292), 0), 0, Tag1 ("Ctypes", 93)), 0); (("set", 1466), ((Tag1 (0, (Tag3 ((("ptr", 1246)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1179)], (0)), 100000000, 0, -1178), (Tag1 (0, ((("a")), 100000000, 0, -1177), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1176), 0), 100000000, 0, -1175), 0), 100000000, 0, -1174), 0, (("src/ctypes/ctypes.mli", 579, 22369, 22371), ("src/ctypes/ctypes.mli", 579, 22369, 22403), 0), 0, Tag1 ("Ctypes", 94)), 0); (("release", 1467), ((Tag1 (0, (Tag3 ((("ptr", 1246)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1173)], (0)), 100000000, 0, -1172), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1171), 0), 100000000, 0, -1170), 0, (("src/ctypes/ctypes.mli", 582, 22473, 22475), ("src/ctypes/ctypes.mli", 582, 22473, 22505), 0), 0, Tag1 ("Ctypes", 95)), 0)]), 0, (("src/ctypes/ctypes.mli", 570, 22075, 22075), ("src/ctypes/ctypes.mli", 584, 22553, 22556), 0), Tag1 ("Ctypes", 96)), 0, 0); Tag2 (("Unsupported", 1367), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Ctypes", 97)), 2, 0); Tag2 (("ModifyingSealedType", 1368), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Ctypes", 98)), 2, 0); Tag2 (("IncompleteType", 1369), ((Tag3 ("exn", 7)), 0, (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Ctypes", 99)), 2, 0); Tag1 (("uncoercible_info", 1370), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/ctypes/ctypes.mli", 611, 23520, 23520), ("src/ctypes/ctypes.mli", 611, 23520, 23541), 0), 0, 0, 0, Tag1 ("Ctypes", 100)), 1, 0); Tag2 (("Uncoercible", 1371), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((("uncoercible_info", 1370)), 0, (0)), 100000000, 0, -2)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Ctypes", 101)), 2, 0)], "Ctypes", [("Ctypes", ("\201\151\139N\189F\151(\218n\234\177\197RtW")); ("Unsigned", ("cd\205\030\181\167\151\005!\134;\177\228\249\168+")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Signed", ("R\017i\"\030\024\134f\143\198\192\180>t\175\225")); ("LDouble", ("j\251\140\230^u\251\210\143\236T\207\022\147\011\211")); ("Ctypes_types", ("\140\014\176\188\187lo3aC\196\012\228vn+")); ("Ctypes_static", ("U\030\169\129GB\138P\158'd\012\131\157\202\018")); ("Ctypes_ptr", ("V\021o\161\007\161\245R\242\222:e\151\189\175\207")); ("Ctypes_primitive_types", ("\147\237\001\150\136\017Z\2308\137C\245\023\133\161\158")); ("Ctypes_bigarray", ("\146\0055mmn\243\187gd\185P\208J\254l")); ("ComplexL", ("\n\230\139\192\213\0226\203\176\242\200\205c\155ag")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Bigarray_compat", ("\150\219\208\188w\237\216\005\r[\152q'\006x\217"))], [(0)])

exception Uncoercible of uncoercible_info

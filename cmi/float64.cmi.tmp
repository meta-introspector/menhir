type t
val is_nan : t -> bool
val is_infinity : t -> bool
val is_neg_infinity : t -> bool
val of_string : string -> t
val to_hex_string : t -> string
val to_string : t -> string
val compile : t -> string
val of_float : float -> t
val to_float : t -> float
val sign : t -> bool
val opp : t -> t
val abs : t -> t
type float_comparison = FEq | FLt | FGt | FNotComparable
val eq : t -> t -> bool
val lt : t -> t -> bool
val le : t -> t -> bool
val compare : t -> t -> float_comparison
type float_class =
    PNormal
  | NNormal
  | PSubn
  | NSubn
  | PZero
  | NZero
  | PInf
  | NInf
  | NaN
val classify : t -> float_class
val mul : t -> t -> t
val add : t -> t -> t
val sub : t -> t -> t
val div : t -> t -> t
val sqrt : t -> t
val of_uint63 : Uint63.t -> t
val normfr_mantissa : t -> Uint63.t
val eshift : int
val frshiftexp : t -> t * Uint63.t
val ldshiftexp : t -> Uint63.t -> t
val next_up : t -> t
val next_down : t -> t
val equal : t -> t -> bool
val hash : t -> int
val total_compare : t -> t -> int("DEBUG:rule", [Tag1 (("t", 406), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("kernel/float64.mli", 15, 841, 841), ("kernel/float64.mli", 15, 841, 847), 0), 0, 0, 0, Tag1 ("Float64", 0)), 1, 0); (("is_nan", 407), ((Tag1 (0, (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -122), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -121), 0), 100000000, 0, -120), 0, (("kernel/float64.mli", 18, 918, 918), ("kernel/float64.mli", 18, 918, 940), 0), 0, Tag1 ("Float64", 1)), 0); (("is_infinity", 408), ((Tag1 (0, (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -119), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -118), 0), 100000000, 0, -117), 0, (("kernel/float64.mli", 19, 941, 941), ("kernel/float64.mli", 19, 941, 968), 0), 0, Tag1 ("Float64", 2)), 0); (("is_neg_infinity", 409), ((Tag1 (0, (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -116), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -115), 0), 100000000, 0, -114), 0, (("kernel/float64.mli", 20, 969, 969), ("kernel/float64.mli", 20, 969, 1000), 0), 0, Tag1 ("Float64", 3)), 0); (("of_string", 410), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -113), (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -112), 0), 100000000, 0, -111), 0, (("kernel/float64.mli", 22, 1002, 1002), ("kernel/float64.mli", 22, 1002, 1029), 0), 0, Tag1 ("Float64", 4)), 0); (("to_hex_string", 411), ((Tag1 (0, (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -110), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -109), 0), 100000000, 0, -108), 0, (("kernel/float64.mli", 27, 1178, 1178), ("kernel/float64.mli", 27, 1178, 1209), 0), 0, Tag1 ("Float64", 5)), 0); (("to_string", 412), ((Tag1 (0, (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -107), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -106), 0), 100000000, 0, -105), 0, (("kernel/float64.mli", 33, 1455, 1455), ("kernel/float64.mli", 33, 1455, 1482), 0), 0, Tag1 ("Float64", 6)), 0); (("compile", 413), ((Tag1 (0, (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -104), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -103), 0), 100000000, 0, -102), 0, (("kernel/float64.mli", 35, 1484, 1484), ("kernel/float64.mli", 35, 1484, 1509), 0), 0, Tag1 ("Float64", 7)), 0); (("of_float", 414), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -101), (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -100), 0), 100000000, 0, -99), 0, (("kernel/float64.mli", 37, 1511, 1511), ("kernel/float64.mli", 37, 1511, 1536), 0), 0, Tag1 ("Float64", 8)), 0); (("to_float", 415), ((Tag1 (0, (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -98), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -97), 0), 100000000, 0, -96), 0, (("kernel/float64.mli", 41, 1602, 1602), ("kernel/float64.mli", 41, 1602, 1627), 0), 0, Tag1 ("Float64", 9)), 0); (("sign", 416), ((Tag1 (0, (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -95), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -94), 0), 100000000, 0, -93), 0, (("kernel/float64.mli", 44, 1676, 1676), ("kernel/float64.mli", 44, 1676, 1696), 0), 0, Tag1 ("Float64", 10)), 0); (("opp", 417), ((Tag1 (0, (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -92), (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -91), 0), 100000000, 0, -90), 0, (("kernel/float64.mli", 46, 1698, 1698), ("kernel/float64.mli", 46, 1698, 1714), 0), 0, Tag1 ("Float64", 11)), 0); (("abs", 418), ((Tag1 (0, (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -89), (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -88), 0), 100000000, 0, -87), 0, (("kernel/float64.mli", 47, 1715, 1715), ("kernel/float64.mli", 47, 1715, 1731), 0), 0, Tag1 ("Float64", 12)), 0); Tag1 (("float_comparison", 419), (0, 0, Tag1 ([(("FEq", 283), (0), 0, (("kernel/float64.mli", 49, 1733, 1757), ("kernel/float64.mli", 49, 1733, 1760), 0), 0, Tag1 ("Float64", 14)); (("FLt", 284), (0), 0, (("kernel/float64.mli", 49, 1733, 1761), ("kernel/float64.mli", 49, 1733, 1766), 0), 0, Tag1 ("Float64", 15)); (("FGt", 285), (0), 0, (("kernel/float64.mli", 49, 1733, 1767), ("kernel/float64.mli", 49, 1733, 1772), 0), 0, Tag1 ("Float64", 16)); (("FNotComparable", 286), (0), 0, (("kernel/float64.mli", 49, 1733, 1773), ("kernel/float64.mli", 49, 1733, 1789), 0), 0, Tag1 ("Float64", 17))], 0), 1, 0, 0, 0, 0, 0, (("kernel/float64.mli", 49, 1733, 1733), ("kernel/float64.mli", 49, 1733, 1789), 0), 0, 1, 0, Tag1 ("Float64", 13)), 1, 0); (("eq", 420), ((Tag1 (0, (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -86), (Tag1 (0, (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -85), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -84), 0), 100000000, 0, -83), 0), 100000000, 0, -82), 0, (("kernel/float64.mli", 51, 1791, 1791), ("kernel/float64.mli", 51, 1791, 1814), 0), 0, Tag1 ("Float64", 18)), 0); (("lt", 421), ((Tag1 (0, (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -81), (Tag1 (0, (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -80), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -79), 0), 100000000, 0, -78), 0), 100000000, 0, -77), 0, (("kernel/float64.mli", 53, 1816, 1816), ("kernel/float64.mli", 53, 1816, 1839), 0), 0, Tag1 ("Float64", 19)), 0); (("le", 422), ((Tag1 (0, (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -76), (Tag1 (0, (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -75), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -74), 0), 100000000, 0, -73), 0), 100000000, 0, -72), 0, (("kernel/float64.mli", 55, 1841, 1841), ("kernel/float64.mli", 55, 1841, 1864), 0), 0, Tag1 ("Float64", 20)), 0); (("compare", 423), ((Tag1 (0, (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -71), (Tag1 (0, (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -70), (Tag3 ((("float_comparison", 419)), 0, (0)), 100000000, 0, -69), 0), 100000000, 0, -68), 0), 100000000, 0, -67), 0, (("kernel/float64.mli", 59, 1968, 1968), ("kernel/float64.mli", 60, 2009, 2032), 0), [(("ocaml.inline", (("kernel/float64.mli", 60, 2009, 2012), ("kernel/float64.mli", 60, 2009, 2024), 0)), ([([(((("always"), (("kernel/float64.mli", 60, 2009, 2025), ("kernel/float64.mli", 60, 2009, 2031), 0))), (("kernel/float64.mli", 60, 2009, 2025), ("kernel/float64.mli", 60, 2009, 2031), 0), 0, 0)], (("kernel/float64.mli", 60, 2009, 2025), ("kernel/float64.mli", 60, 2009, 2031), 0))]), (("kernel/float64.mli", 60, 2009, 2009), ("kernel/float64.mli", 60, 2009, 2032), 0))], Tag1 ("Float64", 21)), 0); Tag1 (("float_class", 424), (0, 0, Tag1 ([(("PNormal", 292), (0), 0, (("kernel/float64.mli", 63, 2053, 2055), ("kernel/float64.mli", 63, 2053, 2064), 0), 0, Tag1 ("Float64", 23)); (("NNormal", 293), (0), 0, (("kernel/float64.mli", 63, 2053, 2065), ("kernel/float64.mli", 63, 2053, 2074), 0), 0, Tag1 ("Float64", 24)); (("PSubn", 294), (0), 0, (("kernel/float64.mli", 63, 2053, 2075), ("kernel/float64.mli", 63, 2053, 2082), 0), 0, Tag1 ("Float64", 25)); (("NSubn", 295), (0), 0, (("kernel/float64.mli", 63, 2053, 2083), ("kernel/float64.mli", 63, 2053, 2090), 0), 0, Tag1 ("Float64", 26)); (("PZero", 296), (0), 0, (("kernel/float64.mli", 63, 2053, 2091), ("kernel/float64.mli", 63, 2053, 2098), 0), 0, Tag1 ("Float64", 27)); (("NZero", 297), (0), 0, (("kernel/float64.mli", 63, 2053, 2099), ("kernel/float64.mli", 63, 2053, 2106), 0), 0, Tag1 ("Float64", 28)); (("PInf", 298), (0), 0, (("kernel/float64.mli", 63, 2053, 2107), ("kernel/float64.mli", 63, 2053, 2113), 0), 0, Tag1 ("Float64", 29)); (("NInf", 299), (0), 0, (("kernel/float64.mli", 63, 2053, 2114), ("kernel/float64.mli", 63, 2053, 2120), 0), 0, Tag1 ("Float64", 30)); (("NaN", 300), (0), 0, (("kernel/float64.mli", 63, 2053, 2121), ("kernel/float64.mli", 63, 2053, 2126), 0), 0, Tag1 ("Float64", 31))], 0), 1, 0, 0, 0, 0, 0, (("kernel/float64.mli", 62, 2034, 2034), ("kernel/float64.mli", 63, 2053, 2126), 0), 0, 1, 0, Tag1 ("Float64", 22)), 1, 0); (("classify", 425), ((Tag1 (0, (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -66), (Tag3 ((("float_class", 424)), 0, (0)), 100000000, 0, -65), 0), 100000000, 0, -64), 0, (("kernel/float64.mli", 65, 2128, 2128), ("kernel/float64.mli", 66, 2160, 2183), 0), [(("ocaml.inline", (("kernel/float64.mli", 66, 2160, 2163), ("kernel/float64.mli", 66, 2160, 2175), 0)), ([([(((("always"), (("kernel/float64.mli", 66, 2160, 2176), ("kernel/float64.mli", 66, 2160, 2182), 0))), (("kernel/float64.mli", 66, 2160, 2176), ("kernel/float64.mli", 66, 2160, 2182), 0), 0, 0)], (("kernel/float64.mli", 66, 2160, 2176), ("kernel/float64.mli", 66, 2160, 2182), 0))]), (("kernel/float64.mli", 66, 2160, 2160), ("kernel/float64.mli", 66, 2160, 2183), 0))], Tag1 ("Float64", 32)), 0); (("mul", 426), ((Tag1 (0, (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -63), (Tag1 (0, (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -62), (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -61), 0), 100000000, 0, -60), 0), 100000000, 0, -59), 0, (("kernel/float64.mli", 68, 2185, 2185), ("kernel/float64.mli", 68, 2185, 2206), 0), 0, Tag1 ("Float64", 33)), 0); (("add", 427), ((Tag1 (0, (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -58), (Tag1 (0, (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -57), (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -56), 0), 100000000, 0, -55), 0), 100000000, 0, -54), 0, (("kernel/float64.mli", 70, 2208, 2208), ("kernel/float64.mli", 70, 2208, 2229), 0), 0, Tag1 ("Float64", 34)), 0); (("sub", 428), ((Tag1 (0, (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -53), (Tag1 (0, (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -52), (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -51), 0), 100000000, 0, -50), 0), 100000000, 0, -49), 0, (("kernel/float64.mli", 72, 2231, 2231), ("kernel/float64.mli", 72, 2231, 2252), 0), 0, Tag1 ("Float64", 35)), 0); (("div", 429), ((Tag1 (0, (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -48), (Tag1 (0, (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -47), (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -46), 0), 100000000, 0, -45), 0), 100000000, 0, -44), 0, (("kernel/float64.mli", 74, 2254, 2254), ("kernel/float64.mli", 74, 2254, 2275), 0), 0, Tag1 ("Float64", 36)), 0); (("sqrt", 430), ((Tag1 (0, (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -43), (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -42), 0), 100000000, 0, -41), 0, (("kernel/float64.mli", 76, 2277, 2277), ("kernel/float64.mli", 76, 2277, 2294), 0), 0, Tag1 ("Float64", 37)), 0); (("of_uint63", 431), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Uint63")), "t"), 0, (0)), 100000000, 0, -40), (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -39), 0), 100000000, 0, -38), 0, (("kernel/float64.mli", 79, 2322, 2322), ("kernel/float64.mli", 80, 2352, 2375), 0), [(("ocaml.inline", (("kernel/float64.mli", 80, 2352, 2355), ("kernel/float64.mli", 80, 2352, 2367), 0)), ([([(((("always"), (("kernel/float64.mli", 80, 2352, 2368), ("kernel/float64.mli", 80, 2352, 2374), 0))), (("kernel/float64.mli", 80, 2352, 2368), ("kernel/float64.mli", 80, 2352, 2374), 0), 0, 0)], (("kernel/float64.mli", 80, 2352, 2368), ("kernel/float64.mli", 80, 2352, 2374), 0))]), (("kernel/float64.mli", 80, 2352, 2352), ("kernel/float64.mli", 80, 2352, 2375), 0))], Tag1 ("Float64", 38)), 0); (("normfr_mantissa", 432), ((Tag1 (0, (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -37), (Tag3 (Tag1 ((Tag2 ("Uint63")), "t"), 0, (0)), 100000000, 0, -36), 0), 100000000, 0, -35), 0, (("kernel/float64.mli", 82, 2377, 2377), ("kernel/float64.mli", 83, 2413, 2436), 0), [(("ocaml.inline", (("kernel/float64.mli", 83, 2413, 2416), ("kernel/float64.mli", 83, 2413, 2428), 0)), ([([(((("always"), (("kernel/float64.mli", 83, 2413, 2429), ("kernel/float64.mli", 83, 2413, 2435), 0))), (("kernel/float64.mli", 83, 2413, 2429), ("kernel/float64.mli", 83, 2413, 2435), 0), 0, 0)], (("kernel/float64.mli", 83, 2413, 2429), ("kernel/float64.mli", 83, 2413, 2435), 0))]), (("kernel/float64.mli", 83, 2413, 2413), ("kernel/float64.mli", 83, 2413, 2436), 0))], Tag1 ("Float64", 39)), 0); (("eshift", 433), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -34), 0, (("kernel/float64.mli", 86, 2473, 2473), ("kernel/float64.mli", 86, 2473, 2489), 0), 0, Tag1 ("Float64", 40)), 0); (("frshiftexp", 434), ((Tag1 (0, (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -33), (Tag2 ([(Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -31); (Tag3 (Tag1 ((Tag2 ("Uint63")), "t"), 0, (0)), 100000000, 0, -32)]), 100000000, 0, -30), 0), 100000000, 0, -29), 0, (("kernel/float64.mli", 88, 2491, 2491), ("kernel/float64.mli", 89, 2566, 2589), 0), [(("ocaml.inline", (("kernel/float64.mli", 89, 2566, 2569), ("kernel/float64.mli", 89, 2566, 2581), 0)), ([([(((("always"), (("kernel/float64.mli", 89, 2566, 2582), ("kernel/float64.mli", 89, 2566, 2588), 0))), (("kernel/float64.mli", 89, 2566, 2582), ("kernel/float64.mli", 89, 2566, 2588), 0), 0, 0)], (("kernel/float64.mli", 89, 2566, 2582), ("kernel/float64.mli", 89, 2566, 2588), 0))]), (("kernel/float64.mli", 89, 2566, 2566), ("kernel/float64.mli", 89, 2566, 2589), 0))], Tag1 ("Float64", 41)), 0); (("ldshiftexp", 435), ((Tag1 (0, (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -28), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Uint63")), "t"), 0, (0)), 100000000, 0, -27), (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -26), 0), 100000000, 0, -25), 0), 100000000, 0, -24), 0, (("kernel/float64.mli", 91, 2591, 2591), ("kernel/float64.mli", 92, 2627, 2650), 0), [(("ocaml.inline", (("kernel/float64.mli", 92, 2627, 2630), ("kernel/float64.mli", 92, 2627, 2642), 0)), ([([(((("always"), (("kernel/float64.mli", 92, 2627, 2643), ("kernel/float64.mli", 92, 2627, 2649), 0))), (("kernel/float64.mli", 92, 2627, 2643), ("kernel/float64.mli", 92, 2627, 2649), 0), 0, 0)], (("kernel/float64.mli", 92, 2627, 2643), ("kernel/float64.mli", 92, 2627, 2649), 0))]), (("kernel/float64.mli", 92, 2627, 2627), ("kernel/float64.mli", 92, 2627, 2650), 0))], Tag1 ("Float64", 42)), 0); (("next_up", 436), ((Tag1 (0, (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -23), (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0, (("kernel/float64.mli", 94, 2652, 2652), ("kernel/float64.mli", 94, 2652, 2672), 0), 0, Tag1 ("Float64", 43)), 0); (("next_down", 437), ((Tag1 (0, (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -20), (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -19), 0), 100000000, 0, -18), 0, (("kernel/float64.mli", 96, 2674, 2674), ("kernel/float64.mli", 96, 2674, 2696), 0), 0, Tag1 ("Float64", 44)), 0); (("equal", 438), ((Tag1 (0, (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -17), (Tag1 (0, (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -16), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -15), 0), 100000000, 0, -14), 0), 100000000, 0, -13), 0, (("kernel/float64.mli", 100, 2782, 2782), ("kernel/float64.mli", 101, 2809, 2832), 0), [(("ocaml.inline", (("kernel/float64.mli", 101, 2809, 2812), ("kernel/float64.mli", 101, 2809, 2824), 0)), ([([(((("always"), (("kernel/float64.mli", 101, 2809, 2825), ("kernel/float64.mli", 101, 2809, 2831), 0))), (("kernel/float64.mli", 101, 2809, 2825), ("kernel/float64.mli", 101, 2809, 2831), 0), 0, 0)], (("kernel/float64.mli", 101, 2809, 2825), ("kernel/float64.mli", 101, 2809, 2831), 0))]), (("kernel/float64.mli", 101, 2809, 2809), ("kernel/float64.mli", 101, 2809, 2832), 0))], Tag1 ("Float64", 45)), 0); (("hash", 439), ((Tag1 (0, (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -12), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -11), 0), 100000000, 0, -10), 0, (("kernel/float64.mli", 103, 2834, 2834), ("kernel/float64.mli", 103, 2834, 2853), 0), 0, Tag1 ("Float64", 46)), 0); (("total_compare", 440), ((Tag1 (0, (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -9), (Tag1 (0, (Tag3 ((("t", 406)), 0, (0)), 100000000, 0, -8), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("kernel/float64.mli", 106, 2936, 2936), ("kernel/float64.mli", 106, 2936, 2969), 0), 0, Tag1 ("Float64", 47)), 0); (("is_float64", 441), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Obj"), "t"), 0, (0)), 100000000, 0, -4), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("kernel/float64.mli", 108, 2971, 2971), ("kernel/float64.mli", 109, 3002, 3025), 0), [(("ocaml.inline", (("kernel/float64.mli", 109, 3002, 3005), ("kernel/float64.mli", 109, 3002, 3017), 0)), ([([(((("always"), (("kernel/float64.mli", 109, 3002, 3018), ("kernel/float64.mli", 109, 3002, 3024), 0))), (("kernel/float64.mli", 109, 3002, 3018), ("kernel/float64.mli", 109, 3002, 3024), 0), 0, 0)], (("kernel/float64.mli", 109, 3002, 3018), ("kernel/float64.mli", 109, 3002, 3024), 0))]), (("kernel/float64.mli", 109, 3002, 3002), ("kernel/float64.mli", 109, 3002, 3025), 0))], Tag1 ("Float64", 48)), 0)], "Float64", [("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

val is_float64 : Obj.t -> bool

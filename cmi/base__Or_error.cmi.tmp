type 'a t = ('a, Base__.Error.t) Base__.Result.t
val compare :
  'a Base__Ppx_compare_lib.compare -> 'a t Base__Ppx_compare_lib.compare
val equal :
  'a Base__Ppx_compare_lib.equal -> 'a t Base__Ppx_compare_lib.equal
val hash_fold_t :
  'a Base__Ppx_hash_lib.hash_fold -> 'a t Base__Ppx_hash_lib.hash_fold
val t_of_sexp : (Sexplib0__.Sexp.t -> 'a) -> Sexplib0__.Sexp.t -> 'a t
val sexp_of_t : ('a -> Sexplib0__.Sexp.t) -> 'a t -> Sexplib0__.Sexp.t
val t_sexp_grammar :
  'a Sexplib0.Sexp_grammar.t -> 'a t Sexplib0.Sexp_grammar.t
val both : 'a t -> 'b t -> ('a * 'b) t
val ( <*> ) : ('a -> 'b) t -> 'a t -> 'b t
val ( <* ) : 'a t -> unit t -> 'a t
val ( *> ) : unit t -> 'a t -> 'a t
val apply : ('a -> 'b) t -> 'a t -> 'b t
val map2 : 'a t -> 'b t -> f:('a -> 'b -> 'c) -> 'c t
val map3 : 'a t -> 'b t -> 'c t -> f:('a -> 'b -> 'c -> 'd) -> 'd t
module Applicative_infix :
  sig
    val ( <*> ) : ('a -> 'b) t -> 'a t -> 'b t
    val ( <* ) : 'a t -> unit t -> 'a t
    val ( *> ) : unit t -> 'a t -> 'a t
    val ( >>| ) : 'a t -> ('a -> 'b) -> 'b t
  end
val invariant : 'a Base__Invariant_intf.inv -> 'a t Base__Invariant_intf.inv
val ( >>= ) : 'a t -> ('a -> 'b t) -> 'b t
val ( >>| ) : 'a t -> ('a -> 'b) -> 'b t
module Monad_infix :
  sig
    val ( >>= ) : 'a t -> ('a -> 'b t) -> 'b t
    val ( >>| ) : 'a t -> ('a -> 'b) -> 'b t
  end
val bind : 'a t -> f:('a -> 'b t) -> 'b t
val return : 'a -> 'a t
val join : 'a t t -> 'a t
val ignore_m : 'a t -> unit t
val all : 'a t list -> 'a list t
val all_unit : unit t list -> unit t
module Let_syntax :
  sig
    val return : 'a -> 'a t
    val ( >>= ) : 'a t -> ('a -> 'b t) -> 'b t
    val ( >>| ) : 'a t -> ('a -> 'b) -> 'b t
    module Let_syntax :
      sig
        val return : 'a -> 'a t
        val bind : 'a t -> f:('a -> 'b t) -> 'b t
        val map : 'a t -> f:('a -> 'b) -> 'b t
        val both : 'a t -> 'b t -> ('a * 'b) t
        module Open_on_rhs : sig end
      end
  end
val is_ok : 'a t -> bool
val is_error : 'a t -> bool
val try_with : ?backtrace:bool -> (unit -> 'a) -> 'a t
val try_with_join : ?backtrace:bool -> (unit -> 'a t) -> 'a t
val ok : 'ok t -> 'ok option
val ok_exn : 'a t -> 'a
val of_exn : ?backtrace:[ `Get | `This of string ] -> exn -> 'a t
val of_exn_result :
  ?backtrace:[ `Get | `This of string ] -> ('a, exn) Base__.Result.t -> 'a t
val error :
  ?here:Base__.Source_code_position0.t ->
  ?strict:unit -> string -> 'a -> ('a -> Base__.Sexp.t) -> 'b t
val error_s : Base__.Sexp.t -> 'a t
val error_string : string -> 'a t
val errorf : ('a, unit, string, 'b t) format4 -> 'a
val tag : 'a t -> tag:string -> 'a t
val tag_s : 'a t -> tag:Base__.Sexp.t -> 'a t
val tag_s_lazy : 'a t -> tag:Base__.Sexp.t Base__.Lazy.t -> 'a t
val tag_arg : 'a t -> string -> 'b -> ('b -> Base__.Sexp.t) -> 'a t
val unimplemented : string -> 'a t
val map : 'a t -> f:('a -> 'b) -> 'b t
val iter : 'a t -> f:('a -> unit) -> unit
val iter_error : 'a t -> f:(Base__.Error.t -> unit) -> unit
val combine_errors : 'a t list -> 'a list t
val combine_errors_unit : unit t list -> unit t
val filter_ok_at_least_one : 'a t list -> 'a list t
val find_ok : 'a t list -> 'a t
("DEBUG:rule", [Tag1 (("t", 2311), ([((("a")), 100000000, 0, -322)], 1, 0, 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Result"), "t"), [((("a")), 100000000, 0, -322); (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Error"), "t"), 0, (0)), 100000000, 0, -323)], (0)), 100000000, 0, -321)), [25], [0], 0, 0, (("src/or_error.mli", 12, 408, 408), ("src/or_error.mli", 13, 443, 503), 0), [(("deriving_inline", (("src/or_error.mli", 13, 443, 446), ("src/or_error.mli", 13, 443, 461), 0)), ([([(Tag8 ([(((("compare"), (("src/or_error.mli", 13, 443, 462), ("src/or_error.mli", 13, 443, 469), 0))), (("src/or_error.mli", 13, 443, 462), ("src/or_error.mli", 13, 443, 469), 0), 0, 0); (((("equal"), (("src/or_error.mli", 13, 443, 471), ("src/or_error.mli", 13, 443, 476), 0))), (("src/or_error.mli", 13, 443, 471), ("src/or_error.mli", 13, 443, 476), 0), 0, 0); (((("hash"), (("src/or_error.mli", 13, 443, 478), ("src/or_error.mli", 13, 443, 482), 0))), (("src/or_error.mli", 13, 443, 478), ("src/or_error.mli", 13, 443, 482), 0), 0, 0); (((("sexp"), (("src/or_error.mli", 13, 443, 484), ("src/or_error.mli", 13, 443, 488), 0))), (("src/or_error.mli", 13, 443, 484), ("src/or_error.mli", 13, 443, 488), 0), 0, 0); (((("sexp_grammar"), (("src/or_error.mli", 13, 443, 490), ("src/or_error.mli", 13, 443, 502), 0))), (("src/or_error.mli", 13, 443, 490), ("src/or_error.mli", 13, 443, 502), 0), 0, 0)]), (("src/or_error.mli", 13, 443, 462), ("src/or_error.mli", 13, 443, 502), 0), 0, 0)], (("src/or_error.mli", 13, 443, 462), ("src/or_error.mli", 13, 443, 502), 0))]), (("src/or_error.mli", 13, 443, 443), ("src/or_error.mli", 13, 443, 503), 0))], 0, 0, Tag1 ("Base__Or_error", 0)), 1, 0); (("compare", 2312), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "compare"), [((("a")), 100000000, 0, -319)], (0)), 100000000, 0, -320), (Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "compare"), [(Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -319)], (0)), 100000000, 0, -318)], (0)), 100000000, 0, -317), 0), 100000000, 0, -316), 0, (("src/or_error.mli", 15, 505, 513), ("src/or_error.mli", 15, 505, 565), 0), 0, Tag1 ("Base__Ppx_compare_lib", 8)), 0); (("equal", 2313), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "equal"), [((("a")), 100000000, 0, -314)], (0)), 100000000, 0, -315), (Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "equal"), [(Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -314)], (0)), 100000000, 0, -313)], (0)), 100000000, 0, -312), 0), 100000000, 0, -311), 0, (("src/or_error.mli", 16, 566, 574), ("src/or_error.mli", 16, 566, 621), 0), 0, Tag1 ("Base__Ppx_compare_lib", 21)), 0); (("hash_fold_t", 2314), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Ppx_hash_lib")), "hash_fold"), [((("a")), 100000000, 0, -309)], (0)), 100000000, 0, -310), (Tag3 (Tag1 ((Tag2 ("Base__Ppx_hash_lib")), "hash_fold"), [(Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -309)], (0)), 100000000, 0, -308)], (0)), 100000000, 0, -307), 0), 100000000, 0, -306), 0, (("src/or_error.mli", 17, 622, 630), ("src/or_error.mli", 17, 622, 677), 0), 0, Tag1 ("Base__Ppx_hash_lib", 8)), 0); (("t_of_sexp", 2315), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -305), ((("a")), 100000000, 0, -302), 0), 100000000, 0, -304), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -303), (Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -302)], (0)), 100000000, 0, -301), 0), 100000000, 0, -300), 0), 100000000, 0, -299), 0, (("src/or_error.mli", 18, 678, 686), ("src/or_error.mli", 18, 678, 729), 0), 0, Tag1 ("Sexplib0__Sexpable", 5)), 0); (("sexp_of_t", 2316), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -296), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -298), 0), 100000000, 0, -297), (Tag1 (0, (Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -296)], (0)), 100000000, 0, -295), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -294), 0), 100000000, 0, -293), 0), 100000000, 0, -292), 0, (("src/or_error.mli", 18, 678, 686), ("src/or_error.mli", 18, 678, 729), 0), 0, Tag1 ("Sexplib0__Sexpable", 6)), 0); (("t_sexp_grammar", 2317), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [((("a")), 100000000, 0, -290)], (0)), 100000000, 0, -291), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -290)], (0)), 100000000, 0, -289)], (0)), 100000000, 0, -288), 0), 100000000, 0, -287), 0, (("src/or_error.mli", 20, 731, 731), ("src/or_error.mli", 20, 731, 810), 0), 0, Tag1 ("Base__Or_error", 6)), 0); (("both", 2318), ((Tag1 (0, (Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -283)], (0)), 100000000, 0, -286), (Tag1 (0, (Tag3 ((("t", 2311)), [((("b")), 100000000, 0, -284)], (0)), 100000000, 0, -285), (Tag3 ((("t", 2311)), [(Tag2 ([((("a")), 100000000, 0, -283); ((("b")), 100000000, 0, -284)]), 100000000, 0, -282)], (0)), 100000000, 0, -281), 0), 100000000, 0, -280), 0), 100000000, 0, -279), 0, (("src/or_error.mli", 28, 1090, 1098), ("src/or_error.mli", 28, 1090, 1140), 0), 0, Tag1 ("Base__Applicative_intf", 36)), 0); (("<*>", 2319), ((Tag1 (0, (Tag3 ((("t", 2311)), [(Tag1 (0, ((("a")), 100000000, 0, -276), ((("b")), 100000000, 0, -274), 0), 100000000, 0, -278)], (0)), 100000000, 0, -277), (Tag1 (0, (Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -276)], (0)), 100000000, 0, -275), (Tag3 ((("t", 2311)), [((("b")), 100000000, 0, -274)], (0)), 100000000, 0, -273), 0), 100000000, 0, -272), 0), 100000000, 0, -271), 0, (("src/or_error.mli", 28, 1090, 1098), ("src/or_error.mli", 28, 1090, 1140), 0), 0, Tag1 ("Base__Applicative_intf", 22)), 0); (("<*", 2320), ((Tag1 (0, (Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -267)], (0)), 100000000, 0, -270), (Tag1 (0, (Tag3 ((("t", 2311)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -269)], (0)), 100000000, 0, -268), (Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -267)], (0)), 100000000, 0, -266), 0), 100000000, 0, -265), 0), 100000000, 0, -264), 0, (("src/or_error.mli", 28, 1090, 1098), ("src/or_error.mli", 28, 1090, 1140), 0), 0, Tag1 ("Base__Applicative_intf", 23)), 0); (("*>", 2321), ((Tag1 (0, (Tag3 ((("t", 2311)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -263)], (0)), 100000000, 0, -262), (Tag1 (0, (Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -260)], (0)), 100000000, 0, -261), (Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -260)], (0)), 100000000, 0, -259), 0), 100000000, 0, -258), 0), 100000000, 0, -257), 0, (("src/or_error.mli", 28, 1090, 1098), ("src/or_error.mli", 28, 1090, 1140), 0), 0, Tag1 ("Base__Applicative_intf", 24)), 0); (("apply", 2322), ((Tag1 (0, (Tag3 ((("t", 2311)), [(Tag1 (0, ((("a")), 100000000, 0, -254), ((("b")), 100000000, 0, -252), 0), 100000000, 0, -256)], (0)), 100000000, 0, -255), (Tag1 (0, (Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -254)], (0)), 100000000, 0, -253), (Tag3 ((("t", 2311)), [((("b")), 100000000, 0, -252)], (0)), 100000000, 0, -251), 0), 100000000, 0, -250), 0), 100000000, 0, -249), 0, (("src/or_error.mli", 28, 1090, 1098), ("src/or_error.mli", 28, 1090, 1140), 0), 0, Tag1 ("Base__Applicative_intf", 48)), 0); (("map2", 2323), ((Tag1 (0, (Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -246)], (0)), 100000000, 0, -248), (Tag1 (0, (Tag3 ((("t", 2311)), [((("b")), 100000000, 0, -245)], (0)), 100000000, 0, -247), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -246), (Tag1 (0, ((("b")), 100000000, 0, -245), ((("c")), 100000000, 0, -242), 0), 100000000, 0, -244), 0), 100000000, 0, -243), (Tag3 ((("t", 2311)), [((("c")), 100000000, 0, -242)], (0)), 100000000, 0, -241), 0), 100000000, 0, -240), 0), 100000000, 0, -239), 0), 100000000, 0, -238), 0, (("src/or_error.mli", 28, 1090, 1098), ("src/or_error.mli", 28, 1090, 1140), 0), 0, Tag1 ("Base__Applicative_intf", 49)), 0); (("map3", 2324), ((Tag1 (0, (Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -234)], (0)), 100000000, 0, -237), (Tag1 (0, (Tag3 ((("t", 2311)), [((("b")), 100000000, 0, -233)], (0)), 100000000, 0, -236), (Tag1 (0, (Tag3 ((("t", 2311)), [((("c")), 100000000, 0, -232)], (0)), 100000000, 0, -235), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -234), (Tag1 (0, ((("b")), 100000000, 0, -233), (Tag1 (0, ((("c")), 100000000, 0, -232), ((("d")), 100000000, 0, -228), 0), 100000000, 0, -231), 0), 100000000, 0, -230), 0), 100000000, 0, -229), (Tag3 ((("t", 2311)), [((("d")), 100000000, 0, -228)], (0)), 100000000, 0, -227), 0), 100000000, 0, -226), 0), 100000000, 0, -225), 0), 100000000, 0, -224), 0), 100000000, 0, -223), 0, (("src/or_error.mli", 28, 1090, 1098), ("src/or_error.mli", 28, 1090, 1140), 0), 0, Tag1 ("Base__Applicative_intf", 50)), 0); Tag3 (("Applicative_infix", 2325), 0, (Tag1 ([(("<*>", 2362), ((Tag1 (0, (Tag3 ((("t", 2311)), [(Tag1 (0, ((("a")), 100000000, 0, -350), ((("b")), 100000000, 0, -348), 0), 100000000, 0, -352)], (0)), 100000000, 0, -351), (Tag1 (0, (Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -350)], (0)), 100000000, 0, -349), (Tag3 ((("t", 2311)), [((("b")), 100000000, 0, -348)], (0)), 100000000, 0, -347), 0), 100000000, 0, -346), 0), 100000000, 0, -345), 0, (("src/or_error.mli", 28, 1090, 1098), ("src/or_error.mli", 28, 1090, 1140), 0), 0, Tag1 ("Base__Applicative_intf", 22)), 0); (("<*", 2363), ((Tag1 (0, (Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -341)], (0)), 100000000, 0, -344), (Tag1 (0, (Tag3 ((("t", 2311)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -343)], (0)), 100000000, 0, -342), (Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -341)], (0)), 100000000, 0, -340), 0), 100000000, 0, -339), 0), 100000000, 0, -338), 0, (("src/or_error.mli", 28, 1090, 1098), ("src/or_error.mli", 28, 1090, 1140), 0), 0, Tag1 ("Base__Applicative_intf", 23)), 0); (("*>", 2364), ((Tag1 (0, (Tag3 ((("t", 2311)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -337)], (0)), 100000000, 0, -336), (Tag1 (0, (Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -334)], (0)), 100000000, 0, -335), (Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -334)], (0)), 100000000, 0, -333), 0), 100000000, 0, -332), 0), 100000000, 0, -331), 0, (("src/or_error.mli", 28, 1090, 1098), ("src/or_error.mli", 28, 1090, 1140), 0), 0, Tag1 ("Base__Applicative_intf", 24)), 0); ((">>|", 2365), ((Tag1 (0, (Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -329)], (0)), 100000000, 0, -330), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -329), ((("b")), 100000000, 0, -327), 0), 100000000, 0, -328), (Tag3 ((("t", 2311)), [((("b")), 100000000, 0, -327)], (0)), 100000000, 0, -326), 0), 100000000, 0, -325), 0), 100000000, 0, -324), 0, (("src/or_error.mli", 28, 1090, 1098), ("src/or_error.mli", 28, 1090, 1140), 0), 0, Tag1 ("Base__Applicative_intf", 25)), 0)]), 0, (("src/or_error.mli", 28, 1090, 1098), ("src/or_error.mli", 28, 1090, 1140), 0), Tag1 ("Base__Applicative_intf", 55)), 0, 0); (("invariant", 2326), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Base__Invariant_intf")), "inv"), [((("a")), 100000000, 0, -221)], (0)), 100000000, 0, -222), (Tag3 (Tag1 ((Tag2 ("Base__Invariant_intf")), "inv"), [(Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -221)], (0)), 100000000, 0, -220)], (0)), 100000000, 0, -219), 0), 100000000, 0, -218), 0, (("src/or_error.mli", 30, 1142, 1150), ("src/or_error.mli", 30, 1142, 1185), 0), 0, Tag1 ("Base__Invariant_intf", 6)), 0); ((">>=", 2327), ((Tag1 (0, (Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -216)], (0)), 100000000, 0, -217), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -216), (Tag3 ((("t", 2311)), [((("b")), 100000000, 0, -213)], (0)), 100000000, 0, -215), 0), 100000000, 0, -214), (Tag3 ((("t", 2311)), [((("b")), 100000000, 0, -213)], (0)), 100000000, 0, -212), 0), 100000000, 0, -211), 0), 100000000, 0, -210), 0, (("src/or_error.mli", 31, 1186, 1194), ("src/or_error.mli", 31, 1186, 1230), 0), 0, Tag1 ("Base__Monad_intf", 12)), 0); ((">>|", 2328), ((Tag1 (0, (Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -208)], (0)), 100000000, 0, -209), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -208), ((("b")), 100000000, 0, -206), 0), 100000000, 0, -207), (Tag3 ((("t", 2311)), [((("b")), 100000000, 0, -206)], (0)), 100000000, 0, -205), 0), 100000000, 0, -204), 0), 100000000, 0, -203), 0, (("src/or_error.mli", 31, 1186, 1194), ("src/or_error.mli", 31, 1186, 1230), 0), 0, Tag1 ("Base__Monad_intf", 13)), 0); Tag3 (("Monad_infix", 2329), 0, (Tag1 ([((">>=", 2366), ((Tag1 (0, (Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -366)], (0)), 100000000, 0, -367), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -366), (Tag3 ((("t", 2311)), [((("b")), 100000000, 0, -363)], (0)), 100000000, 0, -365), 0), 100000000, 0, -364), (Tag3 ((("t", 2311)), [((("b")), 100000000, 0, -363)], (0)), 100000000, 0, -362), 0), 100000000, 0, -361), 0), 100000000, 0, -360), 0, (("src/or_error.mli", 31, 1186, 1194), ("src/or_error.mli", 31, 1186, 1230), 0), 0, Tag1 ("Base__Monad_intf", 12)), 0); ((">>|", 2367), ((Tag1 (0, (Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -358)], (0)), 100000000, 0, -359), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -358), ((("b")), 100000000, 0, -356), 0), 100000000, 0, -357), (Tag3 ((("t", 2311)), [((("b")), 100000000, 0, -356)], (0)), 100000000, 0, -355), 0), 100000000, 0, -354), 0), 100000000, 0, -353), 0, (("src/or_error.mli", 31, 1186, 1194), ("src/or_error.mli", 31, 1186, 1230), 0), 0, Tag1 ("Base__Monad_intf", 13)), 0)]), 0, (("src/or_error.mli", 31, 1186, 1194), ("src/or_error.mli", 31, 1186, 1230), 0), Tag1 ("Base__Monad_intf", 46)), 0, 0); (("bind", 2330), ((Tag1 (0, (Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -201)], (0)), 100000000, 0, -202), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -201), (Tag3 ((("t", 2311)), [((("b")), 100000000, 0, -198)], (0)), 100000000, 0, -200), 0), 100000000, 0, -199), (Tag3 ((("t", 2311)), [((("b")), 100000000, 0, -198)], (0)), 100000000, 0, -197), 0), 100000000, 0, -196), 0), 100000000, 0, -195), 0, (("src/or_error.mli", 31, 1186, 1194), ("src/or_error.mli", 31, 1186, 1230), 0), 0, Tag1 ("Base__Monad_intf", 47)), 0); (("return", 2331), ((Tag1 (0, ((("a")), 100000000, 0, -194), (Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -194)], (0)), 100000000, 0, -193), 0), 100000000, 0, -192), 0, (("src/or_error.mli", 31, 1186, 1194), ("src/or_error.mli", 31, 1186, 1230), 0), 0, Tag1 ("Base__Monad_intf", 48)), 0); (("join", 2332), ((Tag1 (0, (Tag3 ((("t", 2311)), [(Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -189)], (0)), 100000000, 0, -191)], (0)), 100000000, 0, -190), (Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -189)], (0)), 100000000, 0, -188), 0), 100000000, 0, -187), 0, (("src/or_error.mli", 31, 1186, 1194), ("src/or_error.mli", 31, 1186, 1230), 0), 0, Tag1 ("Base__Monad_intf", 50)), 0); (("ignore_m", 2333), ((Tag1 (0, (Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -186)], (0)), 100000000, 0, -185), (Tag3 ((("t", 2311)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -184)], (0)), 100000000, 0, -183), 0), 100000000, 0, -182), 0, (("src/or_error.mli", 31, 1186, 1194), ("src/or_error.mli", 31, 1186, 1230), 0), 0, Tag1 ("Base__Monad_intf", 51)), 0); (("all", 2334), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -179)], (0)), 100000000, 0, -181)], (0)), 100000000, 0, -180), (Tag3 ((("t", 2311)), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -179)], (0)), 100000000, 0, -178)], (0)), 100000000, 0, -177), 0), 100000000, 0, -176), 0, (("src/or_error.mli", 31, 1186, 1194), ("src/or_error.mli", 31, 1186, 1230), 0), 0, Tag1 ("Base__Monad_intf", 52)), 0); (("all_unit", 2335), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 2311)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -175)], (0)), 100000000, 0, -174)], (0)), 100000000, 0, -173), (Tag3 ((("t", 2311)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -172)], (0)), 100000000, 0, -171), 0), 100000000, 0, -170), 0, (("src/or_error.mli", 31, 1186, 1194), ("src/or_error.mli", 31, 1186, 1230), 0), 0, Tag1 ("Base__Monad_intf", 53)), 0); Tag3 (("Let_syntax", 2336), 0, (Tag1 ([(("return", 2368), ((Tag1 (0, ((("a")), 100000000, 0, -385), (Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -385)], (0)), 100000000, 0, -384), 0), 100000000, 0, -383), 0, (("src/or_error.mli", 31, 1186, 1194), ("src/or_error.mli", 31, 1186, 1230), 0), 0, Tag1 ("Base__Monad_intf", 22)), 0); ((">>=", 2369), ((Tag1 (0, (Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -381)], (0)), 100000000, 0, -382), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -381), (Tag3 ((("t", 2311)), [((("b")), 100000000, 0, -378)], (0)), 100000000, 0, -380), 0), 100000000, 0, -379), (Tag3 ((("t", 2311)), [((("b")), 100000000, 0, -378)], (0)), 100000000, 0, -377), 0), 100000000, 0, -376), 0), 100000000, 0, -375), 0, (("src/or_error.mli", 31, 1186, 1194), ("src/or_error.mli", 31, 1186, 1230), 0), 0, Tag1 ("Base__Monad_intf", 12)), 0); ((">>|", 2370), ((Tag1 (0, (Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -373)], (0)), 100000000, 0, -374), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -373), ((("b")), 100000000, 0, -371), 0), 100000000, 0, -372), (Tag3 ((("t", 2311)), [((("b")), 100000000, 0, -371)], (0)), 100000000, 0, -370), 0), 100000000, 0, -369), 0), 100000000, 0, -368), 0, (("src/or_error.mli", 31, 1186, 1194), ("src/or_error.mli", 31, 1186, 1230), 0), 0, Tag1 ("Base__Monad_intf", 13)), 0); Tag3 (("Let_syntax", 2371), 0, (Tag1 ([(("return", 2372), ((Tag1 (0, ((("a")), 100000000, 0, -411), (Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -411)], (0)), 100000000, 0, -410), 0), 100000000, 0, -409), 0, (("src/or_error.mli", 31, 1186, 1194), ("src/or_error.mli", 31, 1186, 1230), 0), 0, Tag1 ("Base__Monad_intf", 25)), 0); (("bind", 2373), ((Tag1 (0, (Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -407)], (0)), 100000000, 0, -408), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -407), (Tag3 ((("t", 2311)), [((("b")), 100000000, 0, -404)], (0)), 100000000, 0, -406), 0), 100000000, 0, -405), (Tag3 ((("t", 2311)), [((("b")), 100000000, 0, -404)], (0)), 100000000, 0, -403), 0), 100000000, 0, -402), 0), 100000000, 0, -401), 0, (("src/or_error.mli", 31, 1186, 1194), ("src/or_error.mli", 31, 1186, 1230), 0), 0, Tag1 ("Base__Monad_intf", 26)), 0); (("map", 2374), ((Tag1 (0, (Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -399)], (0)), 100000000, 0, -400), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -399), ((("b")), 100000000, 0, -397), 0), 100000000, 0, -398), (Tag3 ((("t", 2311)), [((("b")), 100000000, 0, -397)], (0)), 100000000, 0, -396), 0), 100000000, 0, -395), 0), 100000000, 0, -394), 0, (("src/or_error.mli", 31, 1186, 1194), ("src/or_error.mli", 31, 1186, 1230), 0), 0, Tag1 ("Base__Monad_intf", 27)), 0); (("both", 2375), ((Tag1 (0, (Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -390)], (0)), 100000000, 0, -393), (Tag1 (0, (Tag3 ((("t", 2311)), [((("b")), 100000000, 0, -391)], (0)), 100000000, 0, -392), (Tag3 ((("t", 2311)), [(Tag2 ([((("a")), 100000000, 0, -390); ((("b")), 100000000, 0, -391)]), 100000000, 0, -389)], (0)), 100000000, 0, -388), 0), 100000000, 0, -387), 0), 100000000, 0, -386), 0, (("src/or_error.mli", 31, 1186, 1194), ("src/or_error.mli", 31, 1186, 1230), 0), 0, Tag1 ("Base__Monad_intf", 28)), 0); Tag3 (("Open_on_rhs", 2376), 0, (Tag1 (0), 0, (("src/or_error.mli", 31, 1186, 1194), ("src/or_error.mli", 31, 1186, 1230), 0), Tag1 ("Base__Monad_intf", 29)), 0, 0)]), 0, (("src/or_error.mli", 31, 1186, 1194), ("src/or_error.mli", 31, 1186, 1230), 0), Tag1 ("Base__Monad_intf", 30)), 0, 0)]), 0, (("src/or_error.mli", 31, 1186, 1194), ("src/or_error.mli", 31, 1186, 1230), 0), Tag1 ("Base__Monad_intf", 31)), 0, 0); (("is_ok", 2337), ((Tag1 (0, (Tag3 ((("t", 2311)), [((0), 100000000, 0, -169)], (0)), 100000000, 0, -168), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -167), 0), 100000000, 0, -166), 0, (("src/or_error.mli", 33, 1232, 1232), ("src/or_error.mli", 33, 1232, 1255), 0), 0, Tag1 ("Base__Or_error", 10)), 0); (("is_error", 2338), ((Tag1 (0, (Tag3 ((("t", 2311)), [((0), 100000000, 0, -165)], (0)), 100000000, 0, -164), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -163), 0), 100000000, 0, -162), 0, (("src/or_error.mli", 34, 1256, 1256), ("src/or_error.mli", 34, 1256, 1282), 0), 0, Tag1 ("Base__Or_error", 11)), 0); (("try_with", 2339), ((Tag1 (Tag1 ("backtrace"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -161)], (0)), 100000000, 0, -160), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -159), ((("a")), 100000000, 0, -157), 0), 100000000, 0, -158), (Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -157)], (0)), 100000000, 0, -156), 0), 100000000, 0, -155), 0), 100000000, 0, -154), 0, (("src/or_error.mli", 40, 1593, 1593), ("src/or_error.mli", 43, 1682, 1691), 0), 0, Tag1 ("Base__Or_error", 12)), 0); (("try_with_join", 2340), ((Tag1 (Tag1 ("backtrace"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -153)], (0)), 100000000, 0, -152), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -151), (Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -148)], (0)), 100000000, 0, -150), 0), 100000000, 0, -149), (Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -148)], (0)), 100000000, 0, -147), 0), 100000000, 0, -146), 0), 100000000, 0, -145), 0, (("src/or_error.mli", 45, 1693, 1693), ("src/or_error.mli", 48, 1789, 1798), 0), 0, Tag1 ("Base__Or_error", 13)), 0); (("ok", 2341), ((Tag1 (0, (Tag3 ((("t", 2311)), [((("ok")), 100000000, 0, -143)], (0)), 100000000, 0, -144), (Tag3 ((Tag3 ("option", 10)), [((("ok")), 100000000, 0, -143)], (0)), 100000000, 0, -142), 0), 100000000, 0, -141), 0, (("src/or_error.mli", 52, 1915, 1915), ("src/or_error.mli", 52, 1915, 1943), 0), 0, Tag1 ("Base__Or_error", 14)), 0); (("ok_exn", 2342), ((Tag1 (0, (Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -139)], (0)), 100000000, 0, -140), ((("a")), 100000000, 0, -139), 0), 100000000, 0, -138), 0, (("src/or_error.mli", 56, 2069, 2069), ("src/or_error.mli", 56, 2069, 2092), 0), 0, Tag1 ("Base__Or_error", 15)), 0); (("of_exn", 2343), ((Tag1 (Tag1 ("backtrace"), (Tag3 ((Tag3 ("option", 10)), [(Tag8 (([("Get", (0)); ("This", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -137))))], (0, 100000000, 0, -136), 1, 0, 0)), 100000000, 0, -135)], (0)), 100000000, 0, -134), (Tag1 (0, (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -133), (Tag3 ((("t", 2311)), [((0), 100000000, 0, -132)], (0)), 100000000, 0, -131), 0), 100000000, 0, -130), 0), 100000000, 0, -129), 0, (("src/or_error.mli", 59, 2167, 2167), ("src/or_error.mli", 59, 2167, 2231), 0), 0, Tag1 ("Base__Or_error", 16)), 0); (("of_exn_result", 2344), ((Tag1 (Tag1 ("backtrace"), (Tag3 ((Tag3 ("option", 10)), [(Tag8 (([("Get", (0)); ("This", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -128))))], (0, 100000000, 0, -127), 1, 0, 0)), 100000000, 0, -126)], (0)), 100000000, 0, -125), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Result"), "t"), [((("a")), 100000000, 0, -122); (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -124)], (0)), 100000000, 0, -123), (Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -122)], (0)), 100000000, 0, -121), 0), 100000000, 0, -120), 0), 100000000, 0, -119), 0, (("src/or_error.mli", 64, 2349, 2349), ("src/or_error.mli", 64, 2349, 2436), 0), 0, Tag1 ("Base__Or_error", 17)), 0); (("error", 2345), ((Tag1 (Tag1 ("here"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Source_code_position0"), "t"), 0, (0)), 100000000, 0, -118)], (0)), 100000000, 0, -117), (Tag1 (Tag1 ("strict"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -116)], (0)), 100000000, 0, -115), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -114), (Tag1 (0, ((("a")), 100000000, 0, -113), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -113), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -112), 0), 100000000, 0, -111), (Tag3 ((("t", 2311)), [((0), 100000000, 0, -110)], (0)), 100000000, 0, -109), 0), 100000000, 0, -108), 0), 100000000, 0, -107), 0), 100000000, 0, -106), 0), 100000000, 0, -105), 0), 100000000, 0, -104), 0, (("src/or_error.mli", 77, 2918, 2918), ("src/or_error.mli", 83, 3021, 3029), 0), 0, Tag1 ("Base__Or_error", 18)), 0); (("error_s", 2346), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -103), (Tag3 ((("t", 2311)), [((0), 100000000, 0, -102)], (0)), 100000000, 0, -101), 0), 100000000, 0, -100), 0, (("src/or_error.mli", 85, 3031, 3031), ("src/or_error.mli", 85, 3031, 3058), 0), 0, Tag1 ("Base__Or_error", 19)), 0); (("error_string", 2347), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -99), (Tag3 ((("t", 2311)), [((0), 100000000, 0, -98)], (0)), 100000000, 0, -97), 0), 100000000, 0, -96), 0, (("src/or_error.mli", 88, 3128, 3128), ("src/or_error.mli", 88, 3128, 3160), 0), 0, Tag1 ("Base__Or_error", 20)), 0); (("errorf", 2348), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format4"), [((("a")), 100000000, 0, -90); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -92); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -93); (Tag3 ((("t", 2311)), [((0), 100000000, 0, -95)], (0)), 100000000, 0, -94)], (0)), 100000000, 0, -91), ((("a")), 100000000, 0, -90), 0), 100000000, 0, -89), 0, (("src/or_error.mli", 93, 3360, 3360), ("src/or_error.mli", 93, 3360, 3410), 0), 0, Tag1 ("Base__Or_error", 21)), 0); (("tag", 2349), ((Tag1 (0, (Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -86)], (0)), 100000000, 0, -88), (Tag1 (("tag"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -87), (Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -86)], (0)), 100000000, 0, -85), 0), 100000000, 0, -84), 0), 100000000, 0, -83), 0, (("src/or_error.mli", 96, 3477, 3477), ("src/or_error.mli", 96, 3477, 3513), 0), 0, Tag1 ("Base__Or_error", 22)), 0); (("tag_s", 2350), ((Tag1 (0, (Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -80)], (0)), 100000000, 0, -82), (Tag1 (("tag"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -81), (Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -80)], (0)), 100000000, 0, -79), 0), 100000000, 0, -78), 0), 100000000, 0, -77), 0, (("src/or_error.mli", 99, 3561, 3561), ("src/or_error.mli", 99, 3561, 3599), 0), 0, Tag1 ("Base__Or_error", 23)), 0); (("tag_s_lazy", 2351), ((Tag1 (0, (Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -73)], (0)), 100000000, 0, -76), (Tag1 (("tag"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Lazy"), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -75)], (0)), 100000000, 0, -74), (Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -73)], (0)), 100000000, 0, -72), 0), 100000000, 0, -71), 0), 100000000, 0, -70), 0, (("src/or_error.mli", 102, 3657, 3657), ("src/or_error.mli", 102, 3657, 3707), 0), 0, Tag1 ("Base__Or_error", 24)), 0); (("tag_arg", 2352), ((Tag1 (0, (Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -64)], (0)), 100000000, 0, -69), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -68), (Tag1 (0, ((("b")), 100000000, 0, -67), (Tag1 (0, (Tag1 (0, ((("b")), 100000000, 0, -67), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -66), 0), 100000000, 0, -65), (Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -64)], (0)), 100000000, 0, -63), 0), 100000000, 0, -62), 0), 100000000, 0, -61), 0), 100000000, 0, -60), 0), 100000000, 0, -59), 0, (("src/or_error.mli", 105, 3782, 3782), ("src/or_error.mli", 105, 3782, 3842), 0), 0, Tag1 ("Base__Or_error", 25)), 0); (("unimplemented", 2353), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -58), (Tag3 ((("t", 2311)), [((0), 100000000, 0, -57)], (0)), 100000000, 0, -56), 0), 100000000, 0, -55), 0, (("src/or_error.mli", 111, 4148, 4148), ("src/or_error.mli", 111, 4148, 4181), 0), 0, Tag1 ("Base__Or_error", 26)), 0); (("map", 2354), ((Tag1 (0, (Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -53)], (0)), 100000000, 0, -54), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -53), ((("b")), 100000000, 0, -51), 0), 100000000, 0, -52), (Tag3 ((("t", 2311)), [((("b")), 100000000, 0, -51)], (0)), 100000000, 0, -50), 0), 100000000, 0, -49), 0), 100000000, 0, -48), 0, (("src/or_error.mli", 113, 4183, 4183), ("src/or_error.mli", 113, 4183, 4231), 0), 0, Tag1 ("Base__Or_error", 27)), 0); (("iter", 2355), ((Tag1 (0, (Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -46)], (0)), 100000000, 0, -47), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -46), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -45), 0), 100000000, 0, -44), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -43), 0), 100000000, 0, -42), 0), 100000000, 0, -41), 0, (("src/or_error.mli", 114, 4232, 4232), ("src/or_error.mli", 114, 4232, 4283), 0), 0, Tag1 ("Base__Or_error", 28)), 0); (("iter_error", 2356), ((Tag1 (0, (Tag3 ((("t", 2311)), [((0), 100000000, 0, -40)], (0)), 100000000, 0, -39), (Tag1 (("f"), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Error"), "t"), 0, (0)), 100000000, 0, -38), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -37), 0), 100000000, 0, -36), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -35), 0), 100000000, 0, -34), 0), 100000000, 0, -33), 0, (("src/or_error.mli", 115, 4284, 4284), ("src/or_error.mli", 115, 4284, 4345), 0), 0, Tag1 ("Base__Or_error", 29)), 0); (("combine_errors", 2357), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -30)], (0)), 100000000, 0, -32)], (0)), 100000000, 0, -31), (Tag3 ((("t", 2311)), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -30)], (0)), 100000000, 0, -29)], (0)), 100000000, 0, -28), 0), 100000000, 0, -27), 0, (("src/or_error.mli", 123, 4668, 4668), ("src/or_error.mli", 123, 4668, 4711), 0), 0, Tag1 ("Base__Or_error", 30)), 0); (("combine_errors_unit", 2358), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 2311)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -26)], (0)), 100000000, 0, -25)], (0)), 100000000, 0, -24), (Tag3 ((("t", 2311)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -23)], (0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0, (("src/or_error.mli", 127, 4875, 4875), ("src/or_error.mli", 127, 4875, 4922), 0), 0, Tag1 ("Base__Or_error", 31)), 0); (("filter_ok_at_least_one", 2359), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -18)], (0)), 100000000, 0, -20)], (0)), 100000000, 0, -19), (Tag3 ((("t", 2311)), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -18)], (0)), 100000000, 0, -17)], (0)), 100000000, 0, -16), 0), 100000000, 0, -15), 0, (("src/or_error.mli", 131, 5090, 5090), ("src/or_error.mli", 131, 5090, 5141), 0), 0, Tag1 ("Base__Or_error", 32)), 0); (("find_ok", 2360), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -12)], (0)), 100000000, 0, -14)], (0)), 100000000, 0, -13), (Tag3 ((("t", 2311)), [((("a")), 100000000, 0, -12)], (0)), 100000000, 0, -11), 0), 100000000, 0, -10), 0, (("src/or_error.mli", 135, 5273, 5273), ("src/or_error.mli", 135, 5273, 5304), 0), 0, Tag1 ("Base__Or_error", 33)), 0); (("find_map_ok", 2361), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -8)], (0)), 100000000, 0, -9), (Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -8), (Tag3 ((("t", 2311)), [((("b")), 100000000, 0, -5)], (0)), 100000000, 0, -7), 0), 100000000, 0, -6), (Tag3 ((("t", 2311)), [((("b")), 100000000, 0, -5)], (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/or_error.mli", 139, 5468, 5468), ("src/or_error.mli", 139, 5468, 5529), 0), 0, Tag1 ("Base__Or_error", 34)), 0)], "Base__Or_error", [("Base__Or_error", ("\193\133)\bO\210\2517\168*\203\148\143\200\127\177")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__StringLabels", ("\134F\024\226\216Is#\223\230\234\169Z\206Gc")); ("Stdlib__StdLabels", (".\193\n\229\139\017\212C-ZA\\kz-\128")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Printf", ("\215<\139]\021\142\224E\245m\198qc(W\229")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__MoreLabels", ("\248\232\248\254`<\230\241\161U\193U\1466J\238")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__ListLabels", ("*\194\012\191\020%\170\249m\002\180\178hk\205\220")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shadow_stdlib", ("\219zi\164\203\158e)\232\221\196\168\138x\142\018")); ("Sexplib0__Sexpable", ("\251${\207(\249/z\242\255\250^\141\156\210e")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv_error", ("kzv!\151~\198P\000\165\176d\007\251p\232")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Base_internalhash_types", ("0\148#2\226\223\018\135\173>!\020\237\017\255\149")); ("Base__T", ("+t\159\169\027\152\205\235\003\237\133\177\024\n6'")); ("Base__Sys0", ("\206z\231\154s\\\136\2364\131\005\014\031\152m3")); ("Base__String0", ("\212\221L\220\245\255\162P\228\224\189\216\135H\149O")); ("Base__Source_code_position0", ("_\003P6\254\029\206\005\130\136\180\019\145\230\000M")); ("Base__Sexp", ("\154\187\171&\209=\153[\236\250!U\174`\190T")); ("Base__Result", ("\204|\215\173FMa\2511<&\215T\194$\228")); ("Base__Printf", ("\000\196c,\214\127\226\174\220\190\253z!\242\028\250")); ("Base__Ppx_hash_lib", ("\199\141\178\193\006\209L\007^\020(\131\224sn8")); ("Base__Ppx_compare_lib", ("\243\186~\233\228\199Ah\181.\223\004e\231\129S")); ("Base__Poly0", ("\230;\143\234\255.H\132KOe7\155\\\023f")); ("Base__Monad_intf", ("\208\203\163\152\184O\130?\012:\168\247}\018\253\155")); ("Base__Monad", ("!\244\168\2352=\137Lm\219\129K\216\199\145\\")); ("Base__Lazy", ("@`\165\196 \235)\136ANe:p\169$\185")); ("Base__Invariant_intf", ("\213\204\238\235\236[\198\145\028\2392\015\243\177S\249")); ("Base__Invariant", ("\135\153\136\\\129SD\228\202l\255\152\139\253\015\201")); ("Base__Int0", ("N\1310\012\227\254\000\255_\222!\018\016\003\1779")); ("Base__Info_intf", ("\184\209'\173\251\219\167X|v\188]\190o5X")); ("Base__Info", ("-\011\149\203\248\030\2301\1907\1630\189\128\209\170")); ("Base__Import0", ("\156\129U\197Y[\\\153\017Ho\203\173\204\220\020")); ("Base__Import", ("\014\187\247\141\187\181\142g\176:s_,\181\219\209")); ("Base__Hash_intf", ("h\004P\218\1531G\127\212\208A\024\140\164iq")); ("Base__Hash", ("\206Rc\194\234{s3\248\165\024\162\203{\206\206")); ("Base__Globalize", ("<\243w~.\180\196t\159\193\174[\227\139\215G")); ("Base__Formatter", ("\193\149\030\140\154\1505b\162a`%\243\185'%")); ("Base__Field", ("8In\234X\202\188G\186\208$\192\175\136\214v")); ("Base__Error", ("\199\218\231n\155/\159\156\146\247\148t\237\003\t\153")); ("Base__Either0", ("!9-\011n\2077eZ\212\031c\227\029\206\t")); ("Base__Comparator", ("\002\135z7b\025&\207\t\188\239&U3R\167")); ("Base__Bool0", ("\177f\254p\023\143&\239\020\136\206\242~\018F\251")); ("Base__Applicative_intf", ("J\176\203\159\235N(\235\027\232\198+\224\205*A")); ("Base__Applicative", ("\157\024\176\241a\165\204\133\003s3\214\007\131\244\n")); ("Base__", ("p\252\007\139\128\163W\025+\0225\001\246|P\158"))], [(0)])
val find_map_ok : 'a list -> f:('a -> 'b t) -> 'b t

type oracle
val empty : oracle
val oracle_order :
  ('a -> Names.Constant.t) ->
  oracle -> bool -> 'a Names.tableKey -> 'a Names.tableKey -> bool
type level = Expand | Level of int | Opaque
val pr_level : level -> Pp.t
val transparent : level
val is_transparent : level -> bool
val get_strategy : oracle -> Names.Constant.t Names.tableKey -> level
val set_strategy :
  oracle -> Names.Constant.t Names.tableKey -> level -> oracle
val fold_strategy :
  (Names.Constant.t Names.tableKey -> level -> 'a -> 'a) ->
  oracle -> 'a -> 'a("DEBUG:rule", [Tag1 (("oracle", 456), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("kernel/conv_oracle.mli", 13, 688, 688), ("kernel/conv_oracle.mli", 13, 688, 699), 0), 0, 0, 0, Tag1 ("Conv_oracle", 0)), 1, 0); (("empty", 457), ((Tag3 ((("oracle", 456)), 0, (0)), 100000000, 0, -51), 0, (("kernel/conv_oracle.mli", 15, 701, 701), ("kernel/conv_oracle.mli", 15, 701, 719), 0), 0, Tag1 ("Conv_oracle", 1)), 0); (("oracle_order", 458), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -45), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -50), 0), 100000000, 0, -49), (Tag1 (0, (Tag3 ((("oracle", 456)), 0, (0)), 100000000, 0, -48), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -47), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Names")), "tableKey"), [((("a")), 100000000, 0, -45)], (0)), 100000000, 0, -46), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Names")), "tableKey"), [((("a")), 100000000, 0, -45)], (0)), 100000000, 0, -44), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -43), 0), 100000000, 0, -42), 0), 100000000, 0, -41), 0), 100000000, 0, -40), 0), 100000000, 0, -39), 0), 100000000, 0, -38), 0, (("kernel/conv_oracle.mli", 21, 944, 944), ("kernel/conv_oracle.mli", 22, 1003, 1039), 0), 0, Tag1 ("Conv_oracle", 2)), 0); Tag1 (("level", 459), (0, 0, Tag1 ([(("Expand", 376), (0), 0, (("kernel/conv_oracle.mli", 29, 1281, 1294), ("kernel/conv_oracle.mli", 29, 1281, 1300), 0), 0, Tag1 ("Conv_oracle", 4)); (("Level", 377), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -37)]), 0, (("kernel/conv_oracle.mli", 29, 1281, 1301), ("kernel/conv_oracle.mli", 29, 1281, 1315), 0), 0, Tag1 ("Conv_oracle", 5)); (("Opaque", 378), (0), 0, (("kernel/conv_oracle.mli", 29, 1281, 1316), ("kernel/conv_oracle.mli", 29, 1281, 1324), 0), 0, Tag1 ("Conv_oracle", 6))], 0), 1, 0, 0, 0, 0, 0, (("kernel/conv_oracle.mli", 29, 1281, 1281), ("kernel/conv_oracle.mli", 29, 1281, 1324), 0), 0, 0, 0, Tag1 ("Conv_oracle", 3)), 1, 0); (("pr_level", 460), ((Tag1 (0, (Tag3 ((("level", 459)), 0, (0)), 100000000, 0, -36), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -35), 0), 100000000, 0, -34), 0, (("kernel/conv_oracle.mli", 30, 1325, 1325), ("kernel/conv_oracle.mli", 30, 1325, 1353), 0), 0, Tag1 ("Conv_oracle", 7)), 0); (("transparent", 461), ((Tag3 ((("level", 459)), 0, (0)), 100000000, 0, -33), 0, (("kernel/conv_oracle.mli", 31, 1354, 1354), ("kernel/conv_oracle.mli", 31, 1354, 1377), 0), 0, Tag1 ("Conv_oracle", 8)), 0); (("is_transparent", 462), ((Tag1 (0, (Tag3 ((("level", 459)), 0, (0)), 100000000, 0, -32), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -31), 0), 100000000, 0, -30), 0, (("kernel/conv_oracle.mli", 34, 1423, 1423), ("kernel/conv_oracle.mli", 34, 1423, 1457), 0), 0, Tag1 ("Conv_oracle", 9)), 0); (("get_strategy", 463), ((Tag1 (0, (Tag3 ((("oracle", 456)), 0, (0)), 100000000, 0, -29), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Names")), "tableKey"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -28)], (0)), 100000000, 0, -27), (Tag3 ((("level", 459)), 0, (0)), 100000000, 0, -26), 0), 100000000, 0, -25), 0), 100000000, 0, -24), 0, (("kernel/conv_oracle.mli", 36, 1459, 1459), ("kernel/conv_oracle.mli", 36, 1459, 1516), 0), 0, Tag1 ("Conv_oracle", 10)), 0); (("set_strategy", 464), ((Tag1 (0, (Tag3 ((("oracle", 456)), 0, (0)), 100000000, 0, -23), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Names")), "tableKey"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -22)], (0)), 100000000, 0, -21), (Tag1 (0, (Tag3 ((("level", 459)), 0, (0)), 100000000, 0, -20), (Tag3 ((("oracle", 456)), 0, (0)), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("kernel/conv_oracle.mli", 40, 1598, 1598), ("kernel/conv_oracle.mli", 40, 1598, 1665), 0), 0, Tag1 ("Conv_oracle", 11)), 0); (("fold_strategy", 465), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Names")), "tableKey"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -15)], (0)), 100000000, 0, -14), (Tag1 (0, (Tag3 ((("level", 459)), 0, (0)), 100000000, 0, -13), (Tag1 (0, ((("a")), 100000000, 0, -8), ((("a")), 100000000, 0, -8), 0), 100000000, 0, -12), 0), 100000000, 0, -11), 0), 100000000, 0, -10), (Tag1 (0, (Tag3 ((("oracle", 456)), 0, (0)), 100000000, 0, -9), (Tag1 (0, ((("a")), 100000000, 0, -8), ((("a")), 100000000, 0, -8), 0), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("kernel/conv_oracle.mli", 43, 1745, 1745), ("kernel/conv_oracle.mli", 43, 1745, 1829), 0), 0, Tag1 ("Conv_oracle", 12)), 0); (("get_transp_state", 466), ((Tag1 (0, (Tag3 ((("oracle", 456)), 0, (0)), 100000000, 0, -4), (Tag3 (Tag1 ((Tag2 ("TransparentState")), "t"), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("kernel/conv_oracle.mli", 45, 1831, 1831), ("kernel/conv_oracle.mli", 45, 1831, 1882), 0), 0, Tag1 ("Conv_oracle", 13)), 0)], "Conv_oracle", [("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150"))], [(0)])

val get_transp_state : oracle -> TransparentState.t

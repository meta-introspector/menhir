type token = RS | RC | R | LS | LC | L | EOF | COMMA | COLON | ATOM of string
exception Error
val main :
  ("DEBUG:rule", [Tag1 (("token", 352), (0, 0, Tag1 ([(("RS", 270), (0), 0, (("lib/sparser.mli", 5, 42, 44), ("lib/sparser.mli", 5, 42, 48), 0), 0, Tag1 ("Sparser", 1)); (("RC", 271), (0), 0, (("lib/sparser.mli", 6, 49, 51), ("lib/sparser.mli", 6, 49, 55), 0), 0, Tag1 ("Sparser", 2)); (("R", 272), (0), 0, (("lib/sparser.mli", 7, 56, 58), ("lib/sparser.mli", 7, 56, 61), 0), 0, Tag1 ("Sparser", 3)); (("LS", 273), (0), 0, (("lib/sparser.mli", 8, 62, 64), ("lib/sparser.mli", 8, 62, 68), 0), 0, Tag1 ("Sparser", 4)); (("LC", 274), (0), 0, (("lib/sparser.mli", 9, 69, 71), ("lib/sparser.mli", 9, 69, 75), 0), 0, Tag1 ("Sparser", 5)); (("L", 275), (0), 0, (("lib/sparser.mli", 10, 76, 78), ("lib/sparser.mli", 10, 76, 81), 0), 0, Tag1 ("Sparser", 6)); (("EOF", 276), (0), 0, (("lib/sparser.mli", 11, 82, 84), ("lib/sparser.mli", 11, 82, 89), 0), 0, Tag1 ("Sparser", 7)); (("COMMA", 277), (0), 0, (("lib/sparser.mli", 12, 90, 92), ("lib/sparser.mli", 12, 90, 99), 0), 0, Tag1 ("Sparser", 8)); (("COLON", 278), (0), 0, (("lib/sparser.mli", 13, 100, 102), ("lib/sparser.mli", 13, 100, 109), 0), 0, Tag1 ("Sparser", 9)); (("ATOM", 279), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -9)]), 0, (("lib/sparser.mli", 14, 110, 112), ("lib/sparser.mli", 14, 110, 130), 0), 0, Tag1 ("Sparser", 10))], 0), 1, 0, 0, 0, 0, 0, (("lib/sparser.mli", 4, 28, 28), ("lib/sparser.mli", 14, 110, 130), 0), 0, 0, 0, Tag1 ("Sparser", 0)), 1, 0); Tag2 (("Error", 353), ((Tag3 ("exn", 7)), 0, (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Sparser", 11)), 2, 0); (("main", 354), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -8), (Tag3 ((("token", 352)), 0, (0)), 100000000, 0, -7), 0), 100000000, 0, -6), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -5), (Tag3 (Tag1 (Tag1 ((Tag2 ("Schematic")), "Untyped"), "untyped"), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("lib/sparser.mli", 22, 241, 241), ("lib/sparser.mli", 22, 241, 323), 0), 0, Tag1 ("Sparser", 13)), 0)], "Sparser", [("Sparser", ("\001\234SW\1658MmN\212\142\139\157\n\139\241")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Schematic", ("\180\179\011\178\017I\241^\235\149h\161k\b\209\142")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
(Lexing.lexbuf -> token) -> Lexing.lexbuf -> Schematic.Untyped.untyped

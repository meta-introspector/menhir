type ('k, 'v) t = private
    Empty
  | Node of { mutable left : ('k, 'v) t; key : 'k; mutable value : 'v;
      mutable height : int; mutable right : ('k, 'v) t;
    }
  | Leaf of { key : 'k; mutable value : 'v; }
val empty : ('k, 'v) t
val is_empty : ('a, 'b) t -> bool
val invariant : ('k, 'v) t -> compare:('k -> 'k -> int) -> unit
val add :
  ('k, 'v) t ->
  replace:bool ->
  compare:('k -> 'k -> int) ->
  added:bool Base__.Import.ref -> key:'k -> data:'v -> ('k, 'v) t
val first : ('k, 'v) t -> ('k * 'v) option
val last : ('k, 'v) t -> ('k * 'v) option
val find : ('k, 'v) t -> compare:('k -> 'k -> int) -> 'k -> 'v option
val find_and_call :
  ('k, 'v) t ->
  compare:('k -> 'k -> int) ->
  'k -> if_found:('v -> 'a) -> if_not_found:('k -> 'a) -> 'a
val find_and_call1 :
  ('k, 'v) t ->
  compare:('k -> 'k -> int) ->
  'k ->
  a:'a -> if_found:('v -> 'a -> 'b) -> if_not_found:('k -> 'a -> 'b) -> 'b
val find_and_call2 :
  ('k, 'v) t ->
  compare:('k -> 'k -> int) ->
  'k ->
  a:'a ->
  b:'b ->
  if_found:('v -> 'a -> 'b -> 'c) ->
  if_not_found:('k -> 'a -> 'b -> 'c) -> 'c
val findi_and_call :
  ('k, 'v) t ->
  compare:('k -> 'k -> int) ->
  'k -> if_found:(key:'k -> data:'v -> 'a) -> if_not_found:('k -> 'a) -> 'a
val findi_and_call1 :
  ('k, 'v) t ->
  compare:('k -> 'k -> int) ->
  'k ->
  a:'a ->
  if_found:(key:'k -> data:'v -> 'a -> 'b) ->
  if_not_found:('k -> 'a -> 'b) -> 'b
val findi_and_call2 :
  ('k, 'v) t ->
  compare:('k -> 'k -> int) ->
  'k ->
  a:'a ->
  b:'b ->
  if_found:(key:'k -> data:'v -> 'a -> 'b -> 'c) ->
  if_not_found:('k -> 'a -> 'b -> 'c) -> 'c
val mem : ('k, 'v) t -> compare:('k -> 'k -> int) -> 'k -> bool
val remove :
  ('k, 'v) t ->
  removed:bool Base__.Import.ref ->
  compare:('k -> 'k -> int) -> 'k -> ('k, 'v) t
val fold :
  ('k, 'v) t -> init:'acc -> f:(key:'k -> data:'v -> 'acc -> 'acc) -> 'acc
val iter : ('k, 'v) t -> f:(key:'k -> data:'v -> unit) -> unit
val mapi_inplace : ('k, 'v) t -> f:(key:'k -> data:'v -> 'v) -> unit
("DEBUG:rule", [Tag1 (("t", 812), ([((("k")), 100000000, 0, -224); ((("v")), 100000000, 0, -225)], 2, Tag1 ([(("Empty", 783), (0), 0, (("src/avltree.mli", 41, 2366, 2368), ("src/avltree.mli", 41, 2366, 2375), 0), 0, Tag1 ("Base__Avltree", 1)); (("Node", 784), Tag1 ([(("left", 785), 1, (Tag3 ((("t", 812)), [((("k")), 100000000, 0, -224); ((("v")), 100000000, 0, -225)], (0)), 100000000, 0, -223), (("src/avltree.mli", 43, 2388, 2396), ("src/avltree.mli", 44, 2422, 2429), 0), 0, Tag1 ("Base__Avltree", 2)); (("key", 786), 0, ((("k")), 100000000, 0, -224), (("src/avltree.mli", 44, 2422, 2430), ("src/avltree.mli", 45, 2439, 2446), 0), 0, Tag1 ("Base__Avltree", 3)); (("value", 787), 1, ((("v")), 100000000, 0, -225), (("src/avltree.mli", 45, 2439, 2447), ("src/avltree.mli", 46, 2466, 2473), 0), 0, Tag1 ("Base__Avltree", 4)); (("height", 788), 1, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -226), (("src/avltree.mli", 46, 2466, 2474), ("src/avltree.mli", 47, 2495, 2502), 0), 0, Tag1 ("Base__Avltree", 5)); (("right", 789), 1, (Tag3 ((("t", 812)), [((("k")), 100000000, 0, -224); ((("v")), 100000000, 0, -225)], (0)), 100000000, 0, -227), (("src/avltree.mli", 47, 2495, 2503), ("src/avltree.mli", 47, 2495, 2529), 0), 0, Tag1 ("Base__Avltree", 6))]), 0, (("src/avltree.mli", 42, 2376, 2378), ("src/avltree.mli", 48, 2530, 2537), 0), 0, Tag1 ("Base__Avltree", 7)); (("Leaf", 790), Tag1 ([(("key", 791), 0, ((("k")), 100000000, 0, -224), (("src/avltree.mli", 50, 2550, 2558), ("src/avltree.mli", 51, 2567, 2574), 0), 0, Tag1 ("Base__Avltree", 8)); (("value", 792), 1, ((("v")), 100000000, 0, -225), (("src/avltree.mli", 51, 2567, 2575), ("src/avltree.mli", 51, 2567, 2593), 0), 0, Tag1 ("Base__Avltree", 9))]), 0, (("src/avltree.mli", 49, 2538, 2540), ("src/avltree.mli", 52, 2594, 2601), 0), 0, Tag1 ("Base__Avltree", 10))], 0), 0, 0, [63; 63], [0; 0], 0, 0, (("src/avltree.mli", 40, 2340, 2340), ("src/avltree.mli", 52, 2594, 2601), 0), 0, 0, 0, Tag1 ("Base__Avltree", 0)), 1, 0); (("empty", 813), ((Tag3 ((("t", 812)), [((("k")), 100000000, 0, -221); ((("v")), 100000000, 0, -222)], (0)), 100000000, 0, -220), 0, (("src/avltree.mli", 54, 2603, 2603), ("src/avltree.mli", 54, 2603, 2625), 0), 0, Tag1 ("Base__Avltree", 25)), 0); (("is_empty", 814), ((Tag1 (0, (Tag3 ((("t", 812)), [((0), 100000000, 0, -218); ((0), 100000000, 0, -219)], (0)), 100000000, 0, -217), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -216), 0), 100000000, 0, -215), 0, (("src/avltree.mli", 55, 2626, 2626), ("src/avltree.mli", 55, 2626, 2652), 0), 0, Tag1 ("Base__Avltree", 26)), 0); (("invariant", 815), ((Tag1 (0, (Tag3 ((("t", 812)), [((("k")), 100000000, 0, -212); ((("v")), 100000000, 0, -214)], (0)), 100000000, 0, -213), (Tag1 (("compare"), (Tag1 (0, ((("k")), 100000000, 0, -212), (Tag1 (0, ((("k")), 100000000, 0, -212), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -211), 0), 100000000, 0, -210), 0), 100000000, 0, -209), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -208), 0), 100000000, 0, -207), 0), 100000000, 0, -206), 0, (("src/avltree.mli", 58, 2725, 2725), ("src/avltree.mli", 58, 2725, 2788), 0), 0, Tag1 ("Base__Avltree", 27)), 0); (("add", 816), ((Tag1 (0, (Tag3 ((("t", 812)), [((("k")), 100000000, 0, -197); ((("v")), 100000000, 0, -198)], (0)), 100000000, 0, -205), (Tag1 (("replace"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -204), (Tag1 (("compare"), (Tag1 (0, ((("k")), 100000000, 0, -197), (Tag1 (0, ((("k")), 100000000, 0, -197), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -203), 0), 100000000, 0, -202), 0), 100000000, 0, -201), (Tag1 (("added"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Import"), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -200)], (0)), 100000000, 0, -199), (Tag1 (("key"), ((("k")), 100000000, 0, -197), (Tag1 (("data"), ((("v")), 100000000, 0, -198), (Tag3 ((("t", 812)), [((("k")), 100000000, 0, -197); ((("v")), 100000000, 0, -198)], (0)), 100000000, 0, -196), 0), 100000000, 0, -195), 0), 100000000, 0, -194), 0), 100000000, 0, -193), 0), 100000000, 0, -192), 0), 100000000, 0, -191), 0), 100000000, 0, -190), 0, (("src/avltree.mli", 71, 3476, 3476), ("src/avltree.mli", 78, 3614, 3629), 0), 0, Tag1 ("Base__Avltree", 28)), 0); (("first", 817), ((Tag1 (0, (Tag3 ((("t", 812)), [((("k")), 100000000, 0, -187); ((("v")), 100000000, 0, -188)], (0)), 100000000, 0, -189), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([((("k")), 100000000, 0, -187); ((("v")), 100000000, 0, -188)]), 100000000, 0, -186)], (0)), 100000000, 0, -185), 0), 100000000, 0, -184), 0, (("src/avltree.mli", 82, 3709, 3709), ("src/avltree.mli", 82, 3709, 3751), 0), 0, Tag1 ("Base__Avltree", 29)), 0); (("last", 818), ((Tag1 (0, (Tag3 ((("t", 812)), [((("k")), 100000000, 0, -181); ((("v")), 100000000, 0, -182)], (0)), 100000000, 0, -183), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([((("k")), 100000000, 0, -181); ((("v")), 100000000, 0, -182)]), 100000000, 0, -180)], (0)), 100000000, 0, -179), 0), 100000000, 0, -178), 0, (("src/avltree.mli", 83, 3752, 3752), ("src/avltree.mli", 83, 3752, 3793), 0), 0, Tag1 ("Base__Avltree", 30)), 0); (("find", 819), ((Tag1 (0, (Tag3 ((("t", 812)), [((("k")), 100000000, 0, -173); ((("v")), 100000000, 0, -172)], (0)), 100000000, 0, -177), (Tag1 (("compare"), (Tag1 (0, ((("k")), 100000000, 0, -173), (Tag1 (0, ((("k")), 100000000, 0, -173), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -176), 0), 100000000, 0, -175), 0), 100000000, 0, -174), (Tag1 (0, ((("k")), 100000000, 0, -173), (Tag3 ((Tag3 ("option", 10)), [((("v")), 100000000, 0, -172)], (0)), 100000000, 0, -171), 0), 100000000, 0, -170), 0), 100000000, 0, -169), 0), 100000000, 0, -168), 0, (("src/avltree.mli", 87, 3912, 3912), ("src/avltree.mli", 87, 3912, 3991), 0), 0, Tag1 ("Base__Avltree", 31)), 0); (("find_and_call", 820), ((Tag1 (0, (Tag3 ((("t", 812)), [((("k")), 100000000, 0, -161); ((("v")), 100000000, 0, -163)], (0)), 100000000, 0, -167), (Tag1 (("compare"), (Tag1 (0, ((("k")), 100000000, 0, -161), (Tag1 (0, ((("k")), 100000000, 0, -161), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -166), 0), 100000000, 0, -165), 0), 100000000, 0, -164), (Tag1 (0, ((("k")), 100000000, 0, -161), (Tag1 (("if_found"), (Tag1 (0, ((("v")), 100000000, 0, -163), ((("a")), 100000000, 0, -159), 0), 100000000, 0, -162), (Tag1 (("if_not_found"), (Tag1 (0, ((("k")), 100000000, 0, -161), ((("a")), 100000000, 0, -159), 0), 100000000, 0, -160), ((("a")), 100000000, 0, -159), 0), 100000000, 0, -158), 0), 100000000, 0, -157), 0), 100000000, 0, -156), 0), 100000000, 0, -155), 0), 100000000, 0, -154), 0, (("src/avltree.mli", 96, 4207, 4207), ("src/avltree.mli", 102, 4364, 4371), 0), 0, Tag1 ("Base__Avltree", 32)), 0); (("find_and_call1", 821), ((Tag1 (0, (Tag3 ((("t", 812)), [((("k")), 100000000, 0, -146); ((("v")), 100000000, 0, -149)], (0)), 100000000, 0, -153), (Tag1 (("compare"), (Tag1 (0, ((("k")), 100000000, 0, -146), (Tag1 (0, ((("k")), 100000000, 0, -146), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -152), 0), 100000000, 0, -151), 0), 100000000, 0, -150), (Tag1 (0, ((("k")), 100000000, 0, -146), (Tag1 (("a"), ((("a")), 100000000, 0, -145), (Tag1 (("if_found"), (Tag1 (0, ((("v")), 100000000, 0, -149), (Tag1 (0, ((("a")), 100000000, 0, -145), ((("b")), 100000000, 0, -142), 0), 100000000, 0, -148), 0), 100000000, 0, -147), (Tag1 (("if_not_found"), (Tag1 (0, ((("k")), 100000000, 0, -146), (Tag1 (0, ((("a")), 100000000, 0, -145), ((("b")), 100000000, 0, -142), 0), 100000000, 0, -144), 0), 100000000, 0, -143), ((("b")), 100000000, 0, -142), 0), 100000000, 0, -141), 0), 100000000, 0, -140), 0), 100000000, 0, -139), 0), 100000000, 0, -138), 0), 100000000, 0, -137), 0), 100000000, 0, -136), 0, (("src/avltree.mli", 104, 4373, 4373), ("src/avltree.mli", 111, 4553, 4560), 0), 0, Tag1 ("Base__Avltree", 33)), 0); (("find_and_call2", 822), ((Tag1 (0, (Tag3 ((("t", 812)), [((("k")), 100000000, 0, -127); ((("v")), 100000000, 0, -131)], (0)), 100000000, 0, -135), (Tag1 (("compare"), (Tag1 (0, ((("k")), 100000000, 0, -127), (Tag1 (0, ((("k")), 100000000, 0, -127), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -134), 0), 100000000, 0, -133), 0), 100000000, 0, -132), (Tag1 (0, ((("k")), 100000000, 0, -127), (Tag1 (("a"), ((("a")), 100000000, 0, -126), (Tag1 (("b"), ((("b")), 100000000, 0, -125), (Tag1 (("if_found"), (Tag1 (0, ((("v")), 100000000, 0, -131), (Tag1 (0, ((("a")), 100000000, 0, -126), (Tag1 (0, ((("b")), 100000000, 0, -125), ((("c")), 100000000, 0, -121), 0), 100000000, 0, -130), 0), 100000000, 0, -129), 0), 100000000, 0, -128), (Tag1 (("if_not_found"), (Tag1 (0, ((("k")), 100000000, 0, -127), (Tag1 (0, ((("a")), 100000000, 0, -126), (Tag1 (0, ((("b")), 100000000, 0, -125), ((("c")), 100000000, 0, -121), 0), 100000000, 0, -124), 0), 100000000, 0, -123), 0), 100000000, 0, -122), ((("c")), 100000000, 0, -121), 0), 100000000, 0, -120), 0), 100000000, 0, -119), 0), 100000000, 0, -118), 0), 100000000, 0, -117), 0), 100000000, 0, -116), 0), 100000000, 0, -115), 0), 100000000, 0, -114), 0, (("src/avltree.mli", 113, 4562, 4562), ("src/avltree.mli", 121, 4764, 4771), 0), 0, Tag1 ("Base__Avltree", 34)), 0); (("findi_and_call", 823), ((Tag1 (0, (Tag3 ((("t", 812)), [((("k")), 100000000, 0, -106); ((("v")), 100000000, 0, -109)], (0)), 100000000, 0, -113), (Tag1 (("compare"), (Tag1 (0, ((("k")), 100000000, 0, -106), (Tag1 (0, ((("k")), 100000000, 0, -106), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -112), 0), 100000000, 0, -111), 0), 100000000, 0, -110), (Tag1 (0, ((("k")), 100000000, 0, -106), (Tag1 (("if_found"), (Tag1 (("key"), ((("k")), 100000000, 0, -106), (Tag1 (("data"), ((("v")), 100000000, 0, -109), ((("a")), 100000000, 0, -104), 0), 100000000, 0, -108), 0), 100000000, 0, -107), (Tag1 (("if_not_found"), (Tag1 (0, ((("k")), 100000000, 0, -106), ((("a")), 100000000, 0, -104), 0), 100000000, 0, -105), ((("a")), 100000000, 0, -104), 0), 100000000, 0, -103), 0), 100000000, 0, -102), 0), 100000000, 0, -101), 0), 100000000, 0, -100), 0), 100000000, 0, -99), 0, (("src/avltree.mli", 123, 4773, 4773), ("src/avltree.mli", 129, 4946, 4953), 0), 0, Tag1 ("Base__Avltree", 35)), 0); (("findi_and_call1", 824), ((Tag1 (0, (Tag3 ((("t", 812)), [((("k")), 100000000, 0, -90); ((("v")), 100000000, 0, -94)], (0)), 100000000, 0, -98), (Tag1 (("compare"), (Tag1 (0, ((("k")), 100000000, 0, -90), (Tag1 (0, ((("k")), 100000000, 0, -90), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -97), 0), 100000000, 0, -96), 0), 100000000, 0, -95), (Tag1 (0, ((("k")), 100000000, 0, -90), (Tag1 (("a"), ((("a")), 100000000, 0, -89), (Tag1 (("if_found"), (Tag1 (("key"), ((("k")), 100000000, 0, -90), (Tag1 (("data"), ((("v")), 100000000, 0, -94), (Tag1 (0, ((("a")), 100000000, 0, -89), ((("b")), 100000000, 0, -86), 0), 100000000, 0, -93), 0), 100000000, 0, -92), 0), 100000000, 0, -91), (Tag1 (("if_not_found"), (Tag1 (0, ((("k")), 100000000, 0, -90), (Tag1 (0, ((("a")), 100000000, 0, -89), ((("b")), 100000000, 0, -86), 0), 100000000, 0, -88), 0), 100000000, 0, -87), ((("b")), 100000000, 0, -86), 0), 100000000, 0, -85), 0), 100000000, 0, -84), 0), 100000000, 0, -83), 0), 100000000, 0, -82), 0), 100000000, 0, -81), 0), 100000000, 0, -80), 0, (("src/avltree.mli", 131, 4955, 4955), ("src/avltree.mli", 138, 5151, 5158), 0), 0, Tag1 ("Base__Avltree", 36)), 0); (("findi_and_call2", 825), ((Tag1 (0, (Tag3 ((("t", 812)), [((("k")), 100000000, 0, -70); ((("v")), 100000000, 0, -75)], (0)), 100000000, 0, -79), (Tag1 (("compare"), (Tag1 (0, ((("k")), 100000000, 0, -70), (Tag1 (0, ((("k")), 100000000, 0, -70), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -78), 0), 100000000, 0, -77), 0), 100000000, 0, -76), (Tag1 (0, ((("k")), 100000000, 0, -70), (Tag1 (("a"), ((("a")), 100000000, 0, -69), (Tag1 (("b"), ((("b")), 100000000, 0, -68), (Tag1 (("if_found"), (Tag1 (("key"), ((("k")), 100000000, 0, -70), (Tag1 (("data"), ((("v")), 100000000, 0, -75), (Tag1 (0, ((("a")), 100000000, 0, -69), (Tag1 (0, ((("b")), 100000000, 0, -68), ((("c")), 100000000, 0, -64), 0), 100000000, 0, -74), 0), 100000000, 0, -73), 0), 100000000, 0, -72), 0), 100000000, 0, -71), (Tag1 (("if_not_found"), (Tag1 (0, ((("k")), 100000000, 0, -70), (Tag1 (0, ((("a")), 100000000, 0, -69), (Tag1 (0, ((("b")), 100000000, 0, -68), ((("c")), 100000000, 0, -64), 0), 100000000, 0, -67), 0), 100000000, 0, -66), 0), 100000000, 0, -65), ((("c")), 100000000, 0, -64), 0), 100000000, 0, -63), 0), 100000000, 0, -62), 0), 100000000, 0, -61), 0), 100000000, 0, -60), 0), 100000000, 0, -59), 0), 100000000, 0, -58), 0), 100000000, 0, -57), 0, (("src/avltree.mli", 140, 5160, 5160), ("src/avltree.mli", 148, 5378, 5385), 0), 0, Tag1 ("Base__Avltree", 37)), 0); (("mem", 826), ((Tag1 (0, (Tag3 ((("t", 812)), [((("k")), 100000000, 0, -51); ((("v")), 100000000, 0, -56)], (0)), 100000000, 0, -55), (Tag1 (("compare"), (Tag1 (0, ((("k")), 100000000, 0, -51), (Tag1 (0, ((("k")), 100000000, 0, -51), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -54), 0), 100000000, 0, -53), 0), 100000000, 0, -52), (Tag1 (0, ((("k")), 100000000, 0, -51), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -50), 0), 100000000, 0, -49), 0), 100000000, 0, -48), 0), 100000000, 0, -47), 0, (("src/avltree.mli", 151, 5459, 5459), ("src/avltree.mli", 151, 5459, 5532), 0), 0, Tag1 ("Base__Avltree", 38)), 0); (("remove", 827), ((Tag1 (0, (Tag3 ((("t", 812)), [((("k")), 100000000, 0, -39); ((("v")), 100000000, 0, -40)], (0)), 100000000, 0, -46), (Tag1 (("removed"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Import"), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -45)], (0)), 100000000, 0, -44), (Tag1 (("compare"), (Tag1 (0, ((("k")), 100000000, 0, -39), (Tag1 (0, ((("k")), 100000000, 0, -39), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -43), 0), 100000000, 0, -42), 0), 100000000, 0, -41), (Tag1 (0, ((("k")), 100000000, 0, -39), (Tag3 ((("t", 812)), [((("k")), 100000000, 0, -39); ((("v")), 100000000, 0, -40)], (0)), 100000000, 0, -38), 0), 100000000, 0, -37), 0), 100000000, 0, -36), 0), 100000000, 0, -35), 0), 100000000, 0, -34), 0, (("src/avltree.mli", 156, 5788, 5788), ("src/avltree.mli", 161, 5896, 5911), 0), 0, Tag1 ("Base__Avltree", 39)), 0); (("fold", 828), ((Tag1 (0, (Tag3 ((("t", 812)), [((("k")), 100000000, 0, -32); ((("v")), 100000000, 0, -31)], (0)), 100000000, 0, -33), (Tag1 (("init"), ((("acc")), 100000000, 0, -27), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -32), (Tag1 (("data"), ((("v")), 100000000, 0, -31), (Tag1 (0, ((("acc")), 100000000, 0, -27), ((("acc")), 100000000, 0, -27), 0), 100000000, 0, -30), 0), 100000000, 0, -29), 0), 100000000, 0, -28), ((("acc")), 100000000, 0, -27), 0), 100000000, 0, -26), 0), 100000000, 0, -25), 0), 100000000, 0, -24), 0, (("src/avltree.mli", 164, 5941, 5941), ("src/avltree.mli", 168, 6034, 6043), 0), 0, Tag1 ("Base__Avltree", 40)), 0); (("iter", 829), ((Tag1 (0, (Tag3 ((("t", 812)), [((("k")), 100000000, 0, -22); ((("v")), 100000000, 0, -21)], (0)), 100000000, 0, -23), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -22), (Tag1 (("data"), ((("v")), 100000000, 0, -21), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -20), 0), 100000000, 0, -19), 0), 100000000, 0, -18), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -17), 0), 100000000, 0, -16), 0), 100000000, 0, -15), 0, (("src/avltree.mli", 171, 6076, 6076), ("src/avltree.mli", 171, 6076, 6148), 0), 0, Tag1 ("Base__Avltree", 41)), 0); (("mapi_inplace", 830), ((Tag1 (0, (Tag3 ((("t", 812)), [((("k")), 100000000, 0, -13); ((("v")), 100000000, 0, -12)], (0)), 100000000, 0, -14), (Tag1 (("f"), (Tag1 (("key"), ((("k")), 100000000, 0, -13), (Tag1 (("data"), ((("v")), 100000000, 0, -12), ((("v")), 100000000, 0, -12), 0), 100000000, 0, -11), 0), 100000000, 0, -10), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0), 100000000, 0, -7), 0, (("src/avltree.mli", 174, 6208, 6208), ("src/avltree.mli", 174, 6208, 6286), 0), 0, Tag1 ("Base__Avltree", 42)), 0); (("choose_exn", 831), ((Tag1 (0, (Tag3 ((("t", 812)), [((("k")), 100000000, 0, -4); ((("v")), 100000000, 0, -5)], (0)), 100000000, 0, -6), (Tag2 ([((("k")), 100000000, 0, -4); ((("v")), 100000000, 0, -5)]), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/avltree.mli", 176, 6288, 6288), ("src/avltree.mli", 176, 6288, 6326), 0), 0, Tag1 ("Base__Avltree", 43)), 0)], "Base__Avltree", [("Base__Avltree", ("\248\022\031\021\180#\220f\143c\229\166\177-\201\212")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__StdLabels", (".\193\n\229\139\017\212C-ZA\\kz-\128")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__MoreLabels", ("\248\232\248\254`<\230\241\161U\193U\1466J\238")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shadow_stdlib", ("\219zi\164\203\158e)\232\221\196\168\138x\142\018")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Base_internalhash_types", ("0\148#2\226\223\018\135\173>!\020\237\017\255\149")); ("Base__Sexp", ("\154\187\171&\209=\153[\236\250!U\174`\190T")); ("Base__Ppx_hash_lib", ("\199\141\178\193\006\209L\007^\020(\131\224sn8")); ("Base__Ppx_compare_lib", ("\243\186~\233\228\199Ah\181.\223\004e\231\129S")); ("Base__Poly0", ("\230;\143\234\255.H\132KOe7\155\\\023f")); ("Base__Import0", ("\156\129U\197Y[\\\153\017Ho\203\173\204\220\020")); ("Base__Import", ("\014\187\247\141\187\181\142g\176:s_,\181\219\209")); ("Base__Hash_intf", ("h\004P\218\1531G\127\212\208A\024\140\164iq")); ("Base__Hash", ("\206Rc\194\234{s3\248\165\024\162\203{\206\206")); ("Base__Globalize", ("<\243w~.\180\196t\159\193\174[\227\139\215G")); ("Base__Bool0", ("\177f\254p\023\143&\239\020\136\206\242~\018F\251")); ("Base__", ("p\252\007\139\128\163W\025+\0225\001\246|P\158"))], [(0)])
val choose_exn : ('k, 'v) t -> 'k * 'v

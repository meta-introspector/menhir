val fp : Format.formatter -> ('a, Format.formatter, unit) format -> 'a
type 'a t = Format.formatter -> 'a -> unit
val s : ('a, Format.formatter, unit) format -> Format.formatter -> 'a
val const : string -> Format.formatter -> unit
val string : Format.formatter -> string -> unit
val estring : Format.formatter -> string -> unit
val std : Format.formatter
val err : Format.formatter
val p : ('a, Format.formatter, unit) format -> 'a
val e : ('a, Format.formatter, unit) format -> 'a
val list :
  ?pre:(Format.formatter -> unit) ->
  ?post:(Format.formatter -> unit) ->
  ?sep:(Format.formatter -> unit) ->
  (Format.formatter -> 'a -> unit) -> Format.formatter -> 'a list -> unit
val tlist :
  ?sep:(Format.formatter -> unit) ->
  (Format.formatter -> 'a -> unit) -> Format.formatter -> 'a list -> unit
val blist :
  (Format.formatter -> 'a -> unit) -> Format.formatter -> 'a list -> unit
val clist :
  (Format.formatter -> 'a -> unit) -> Format.formatter -> 'a list -> unit
val opt_list :
  ?pre:(Format.formatter -> unit) ->
  ?post:(Format.formatter -> unit) ->
  ?sep:(Format.formatter -> unit) ->
  (Format.formatter -> 'a -> unit) -> Format.formatter -> 'a list -> unit
val opt_list_0 :
  ?pre:(Format.formatter -> unit) ->
  ?post:(Format.formatter -> unit) ->
  ?sep:(Format.formatter -> unit) ->
  (Format.formatter -> 'a -> unit) -> Format.formatter -> 'a list -> unit
val in_text_list :
  (Format.formatter -> 'a -> unit) -> Format.formatter -> 'a list -> unit
val decorate :
  string ->
  string ->
  (Format.formatter -> 'a -> unit) -> Format.formatter -> 'a -> unit
val pair :
  ?sep:string ->
  (Format.formatter -> 'a -> unit) ->
  (Format.formatter -> 'b -> unit) -> Format.formatter -> 'a * 'b -> unit
val triple :
  ?sep:string ->
  (Format.formatter -> 'a -> unit) ->
  (Format.formatter -> 'b -> unit) ->
  (Format.formatter -> 'c -> unit) ->
  Format.formatter -> 'a * 'b * 'c -> unit
val snd :
  (Format.formatter -> 'a -> unit) -> Format.formatter -> 'b * 'a -> unit
val fst :
  (Format.formatter -> 'a -> unit) -> Format.formatter -> 'a * 'b -> unit
val opt :
  ?pre:string ->
  ?post:string ->
  ("DEBUG:rule", [(("fp", 627), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -275), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format"), [((("a")), 100000000, 0, -271); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -273); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -274)], (0)), 100000000, 0, -272), ((("a")), 100000000, 0, -271), 0), 100000000, 0, -270), 0), 100000000, 0, -269), 0, (("lib/pp.mli", 3, 45, 45), ("lib/pp.mli", 3, 45, 115), 0), 0, Tag1 ("Pp", 0)), 0); Tag1 (("t", 628), ([((("a")), 100000000, 0, -267)], 1, 0, 1, ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -268), (Tag1 (0, ((("a")), 100000000, 0, -267), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -266), 0), 100000000, 0, -265), 0), 100000000, 0, -264)), [46], [0], 0, 0, (("lib/pp.mli", 6, 140, 140), ("lib/pp.mli", 6, 140, 182), 0), 0, 0, 0, Tag1 ("Pp", 1)), 1, 0); (("s", 629), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format"), [((("a")), 100000000, 0, -259); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -262); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -263)], (0)), 100000000, 0, -261), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -260), ((("a")), 100000000, 0, -259), 0), 100000000, 0, -258), 0), 100000000, 0, -257), 0, (("lib/pp.mli", 7, 183, 183), ("lib/pp.mli", 7, 183, 252), 0), 0, Tag1 ("Pp", 2)), 0); (("const", 630), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -256), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -255), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -254), 0), 100000000, 0, -253), 0), 100000000, 0, -252), 0, (("lib/pp.mli", 8, 253, 253), ("lib/pp.mli", 8, 253, 299), 0), 0, Tag1 ("Pp", 3)), 0); (("string", 631), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -251), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -250), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -249), 0), 100000000, 0, -248), 0), 100000000, 0, -247), 0, (("lib/pp.mli", 9, 300, 300), ("lib/pp.mli", 9, 300, 347), 0), 0, Tag1 ("Pp", 4)), 0); (("estring", 632), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -246), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -245), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -244), 0), 100000000, 0, -243), 0), 100000000, 0, -242), 0, (("lib/pp.mli", 10, 348, 348), ("lib/pp.mli", 10, 348, 396), 0), 0, Tag1 ("Pp", 5)), 0); (("std", 633), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -241), 0, (("lib/pp.mli", 12, 398, 398), ("lib/pp.mli", 12, 398, 424), 0), 0, Tag1 ("Pp", 6)), 0); (("err", 634), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -240), 0, (("lib/pp.mli", 13, 425, 425), ("lib/pp.mli", 13, 425, 451), 0), 0, Tag1 ("Pp", 7)), 0); (("p", 635), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format"), [((("a")), 100000000, 0, -236); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -238); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -239)], (0)), 100000000, 0, -237), ((("a")), 100000000, 0, -236), 0), 100000000, 0, -235), 0, (("lib/pp.mli", 14, 452, 452), ("lib/pp.mli", 14, 452, 501), 0), 0, Tag1 ("Pp", 8)), 0); (("e", 636), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format"), [((("a")), 100000000, 0, -231); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -233); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -234)], (0)), 100000000, 0, -232), ((("a")), 100000000, 0, -231), 0), 100000000, 0, -230), 0, (("lib/pp.mli", 15, 502, 502), ("lib/pp.mli", 15, 502, 551), 0), 0, Tag1 ("Pp", 9)), 0); (("list", 637), ((Tag1 (Tag1 ("pre"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -229), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -228), 0), 100000000, 0, -227)], (0)), 100000000, 0, -226), (Tag1 (Tag1 ("post"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -225), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -224), 0), 100000000, 0, -223)], (0)), 100000000, 0, -222), (Tag1 (Tag1 ("sep"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -221), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -220), 0), 100000000, 0, -219)], (0)), 100000000, 0, -218), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -217), (Tag1 (0, ((("a")), 100000000, 0, -212), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -216), 0), 100000000, 0, -215), 0), 100000000, 0, -214), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -213), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -212)], (0)), 100000000, 0, -211), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -210), 0), 100000000, 0, -209), 0), 100000000, 0, -208), 0), 100000000, 0, -207), 0), 100000000, 0, -206), 0), 100000000, 0, -205), 0), 100000000, 0, -204), 0, (("lib/pp.mli", 19, 578, 578), ("lib/pp.mli", 23, 701, 774), 0), 0, Tag1 ("Pp", 10)), 0); (("tlist", 638), ((Tag1 (Tag1 ("sep"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -203), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -202), 0), 100000000, 0, -201)], (0)), 100000000, 0, -200), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -199), (Tag1 (0, ((("a")), 100000000, 0, -194), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -198), 0), 100000000, 0, -197), 0), 100000000, 0, -196), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -195), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -194)], (0)), 100000000, 0, -193), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -192), 0), 100000000, 0, -191), 0), 100000000, 0, -190), 0), 100000000, 0, -189), 0), 100000000, 0, -188), 0, (("lib/pp.mli", 24, 775, 775), ("lib/pp.mli", 26, 824, 897), 0), 0, Tag1 ("Pp", 11)), 0); (("blist", 639), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -187), (Tag1 (0, ((("a")), 100000000, 0, -182), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -186), 0), 100000000, 0, -185), 0), 100000000, 0, -184), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -183), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -182)], (0)), 100000000, 0, -181), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -180), 0), 100000000, 0, -179), 0), 100000000, 0, -178), 0), 100000000, 0, -177), 0, (("lib/pp.mli", 27, 898, 898), ("lib/pp.mli", 28, 910, 983), 0), 0, Tag1 ("Pp", 12)), 0); (("clist", 640), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -176), (Tag1 (0, ((("a")), 100000000, 0, -171), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -175), 0), 100000000, 0, -174), 0), 100000000, 0, -173), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -172), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -171)], (0)), 100000000, 0, -170), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -169), 0), 100000000, 0, -168), 0), 100000000, 0, -167), 0), 100000000, 0, -166), 0, (("lib/pp.mli", 29, 984, 984), ("lib/pp.mli", 30, 996, 1069), 0), 0, Tag1 ("Pp", 13)), 0); (("opt_list", 641), ((Tag1 (Tag1 ("pre"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -165), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -164), 0), 100000000, 0, -163)], (0)), 100000000, 0, -162), (Tag1 (Tag1 ("post"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -161), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -160), 0), 100000000, 0, -159)], (0)), 100000000, 0, -158), (Tag1 (Tag1 ("sep"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -157), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -156), 0), 100000000, 0, -155)], (0)), 100000000, 0, -154), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -153), (Tag1 (0, ((("a")), 100000000, 0, -148), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -152), 0), 100000000, 0, -151), 0), 100000000, 0, -150), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -149), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -148)], (0)), 100000000, 0, -147), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -146), 0), 100000000, 0, -145), 0), 100000000, 0, -144), 0), 100000000, 0, -143), 0), 100000000, 0, -142), 0), 100000000, 0, -141), 0), 100000000, 0, -140), 0, (("lib/pp.mli", 31, 1070, 1070), ("lib/pp.mli", 35, 1197, 1270), 0), 0, Tag1 ("Pp", 14)), 0); (("opt_list_0", 642), ((Tag1 (Tag1 ("pre"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -139), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -138), 0), 100000000, 0, -137)], (0)), 100000000, 0, -136), (Tag1 (Tag1 ("post"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -135), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -134), 0), 100000000, 0, -133)], (0)), 100000000, 0, -132), (Tag1 (Tag1 ("sep"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -131), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -130), 0), 100000000, 0, -129)], (0)), 100000000, 0, -128), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -127), (Tag1 (0, ((("a")), 100000000, 0, -122), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -126), 0), 100000000, 0, -125), 0), 100000000, 0, -124), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -123), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -122)], (0)), 100000000, 0, -121), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -120), 0), 100000000, 0, -119), 0), 100000000, 0, -118), 0), 100000000, 0, -117), 0), 100000000, 0, -116), 0), 100000000, 0, -115), 0), 100000000, 0, -114), 0, (("lib/pp.mli", 36, 1271, 1271), ("lib/pp.mli", 40, 1400, 1473), 0), 0, Tag1 ("Pp", 15)), 0); (("in_text_list", 643), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -113), (Tag1 (0, ((("a")), 100000000, 0, -108), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -112), 0), 100000000, 0, -111), 0), 100000000, 0, -110), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -109), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -108)], (0)), 100000000, 0, -107), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -106), 0), 100000000, 0, -105), 0), 100000000, 0, -104), 0), 100000000, 0, -103), 0, (("lib/pp.mli", 42, 1475, 1475), ("lib/pp.mli", 43, 1493, 1566), 0), 0, Tag1 ("Pp", 16)), 0); (("decorate", 644), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -102), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -101), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -100), (Tag1 (0, ((("a")), 100000000, 0, -95), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -99), 0), 100000000, 0, -98), 0), 100000000, 0, -97), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -96), (Tag1 (0, ((("a")), 100000000, 0, -95), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -94), 0), 100000000, 0, -93), 0), 100000000, 0, -92), 0), 100000000, 0, -91), 0), 100000000, 0, -90), 0), 100000000, 0, -89), 0, (("lib/pp.mli", 45, 1568, 1568), ("lib/pp.mli", 48, 1607, 1675), 0), 0, Tag1 ("Pp", 17)), 0); (("pair", 645), ((Tag1 (Tag1 ("sep"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -88)], (0)), 100000000, 0, -87), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -86), (Tag1 (0, ((("a")), 100000000, 0, -76), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -85), 0), 100000000, 0, -84), 0), 100000000, 0, -83), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -82), (Tag1 (0, ((("b")), 100000000, 0, -77), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -81), 0), 100000000, 0, -80), 0), 100000000, 0, -79), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -78), (Tag1 (0, (Tag2 ([((("a")), 100000000, 0, -76); ((("b")), 100000000, 0, -77)]), 100000000, 0, -75), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -74), 0), 100000000, 0, -73), 0), 100000000, 0, -72), 0), 100000000, 0, -71), 0), 100000000, 0, -70), 0), 100000000, 0, -69), 0, (("lib/pp.mli", 51, 1678, 1678), ("lib/pp.mli", 54, 1744, 1817), 0), 0, Tag1 ("Pp", 18)), 0); (("triple", 646), ((Tag1 (Tag1 ("sep"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -68)], (0)), 100000000, 0, -67), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -66), (Tag1 (0, ((("a")), 100000000, 0, -51), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -65), 0), 100000000, 0, -64), 0), 100000000, 0, -63), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -62), (Tag1 (0, ((("b")), 100000000, 0, -52), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -61), 0), 100000000, 0, -60), 0), 100000000, 0, -59), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -58), (Tag1 (0, ((("c")), 100000000, 0, -53), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -57), 0), 100000000, 0, -56), 0), 100000000, 0, -55), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -54), (Tag1 (0, (Tag2 ([((("a")), 100000000, 0, -51); ((("b")), 100000000, 0, -52); ((("c")), 100000000, 0, -53)]), 100000000, 0, -50), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -49), 0), 100000000, 0, -48), 0), 100000000, 0, -47), 0), 100000000, 0, -46), 0), 100000000, 0, -45), 0), 100000000, 0, -44), 0), 100000000, 0, -43), 0, (("lib/pp.mli", 56, 1819, 1819), ("lib/pp.mli", 61, 1963, 2005), 0), 0, Tag1 ("Pp", 19)), 0); (("snd", 647), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -42), (Tag1 (0, ((("a")), 100000000, 0, -37), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -41), 0), 100000000, 0, -40), 0), 100000000, 0, -39), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -38), (Tag1 (0, (Tag2 ([((("b")), 100000000, 0, -36); ((("a")), 100000000, 0, -37)]), 100000000, 0, -35), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -34), 0), 100000000, 0, -33), 0), 100000000, 0, -32), 0), 100000000, 0, -31), 0, (("lib/pp.mli", 64, 2008, 2008), ("lib/pp.mli", 65, 2018, 2091), 0), 0, Tag1 ("Pp", 20)), 0); (("fst", 648), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -30), (Tag1 (0, ((("a")), 100000000, 0, -24), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -29), 0), 100000000, 0, -28), 0), 100000000, 0, -27), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -26), (Tag1 (0, (Tag2 ([((("a")), 100000000, 0, -24); ((("b")), 100000000, 0, -25)]), 100000000, 0, -23), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0), 100000000, 0, -20), 0), 100000000, 0, -19), 0, (("lib/pp.mli", 67, 2093, 2093), ("lib/pp.mli", 68, 2103, 2176), 0), 0, Tag1 ("Pp", 21)), 0); (("opt", 649), ((Tag1 (Tag1 ("pre"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -18)], (0)), 100000000, 0, -17), (Tag1 (Tag1 ("post"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -16)], (0)), 100000000, 0, -15), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -14), (Tag1 (0, ((("a")), 100000000, 0, -9), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -13), 0), 100000000, 0, -12), 0), 100000000, 0, -11), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -10), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -9)], (0)), 100000000, 0, -8), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("lib/pp.mli", 70, 2178, 2178), ("lib/pp.mli", 73, 2223, 2298), 0), 0, Tag1 ("Pp", 22)), 0)], "Pp", [("Pp", ("\167zCQ\134\167\215\2517\247\158\219\250\223.\197")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
(Format.formatter -> 'a -> unit) -> Format.formatter -> 'a option -> unit

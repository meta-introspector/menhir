module Ast :
  sig
    type t = {
      name : Names.lident;
      is_coercion : Vernacexpr.coercion_flag;
      binders : Constrexpr.local_binder_expr list;
      cfs : (Vernacexpr.local_decl_expr * Vernacexpr.record_field_attr) list;
      idbuild : Names.Id.t;
      sort : Constrexpr.constr_expr option;
      default_inhabitant_id : Names.Id.t option;
    }
  end
val definition_structure :
  Constrexpr.cumul_univ_decl_expr option ->
  Vernacexpr.inductive_kind ->
  template:bool option ->
  cumulative:bool ->
  poly:bool ->
  primitive_proj:bool ->
  Declarations.recursivity_kind -> Ast.t list -> Names.GlobRef.t list
module Data :
  sig
    type projection_flags = {
      pf_coercion : bool;
      pf_reversible : bool;
      pf_instance : bool;
      pf_priority : int option;
      pf_locality : Goptions.option_locality;
      pf_canonical : bool;
    }
    type raw_data
    type t = {
      id : Names.Id.t;
      idbuild : Names.Id.t;
      is_coercion : bool;
      proj_flags : projection_flags list;
      rdata : raw_data;
      inhabitant_id : Names.Id.t;
    }
  end
module Record_decl :
  sig
    type t = {
      mie : Entries.mutual_inductive_entry;
      records : Data.t list;
      primitive_proj : bool;
      impls : DeclareInd.one_inductive_impls list;
      globnames : UState.named_universes_entry;
      global_univ_decls : Univ.ContextSet.t option;
      projunivs : Entries.universes_entry;
      ubinders : UnivNames.universe_binders;
      projections_kind : Decls.definition_object_kind;
      poly : bool;
      indlocs : Loc.t option list;
    }
  end
val interp_structure :
  Constrexpr.cumul_univ_decl_expr option ->
  Vernacexpr.inductive_kind ->
  template:bool option ->
  cumulative:bool ->
  poly:bool ->
  primitive_proj:bool ->
  Declarations.recursivity_kind -> Ast.t list -> Record_decl.t
val declare_existing_class : Names.GlobRef.t -> unit
module Internal :
  sig
    type projection_flags = {
      pf_coercion : bool;
      pf_reversible : bool;
      pf_instance : bool;
      pf_priority : int option;
      pf_locality : Goptions.option_locality;
      pf_canonical : bool;
    }
    val declare_projections :
      Names.inductive ->
      Entries.universes_entry * UnivNames.universe_binders ->
      ?kind:Decls.definition_object_kind ->
      Names.Id.t ->
      projection_flags list ->
      Impargs.manual_implicits list ->
      Constr.rel_context -> Structures.Structure.projection list
    val declare_structure_entry : Structures.Structure.t -> unit("DEBUG:rule", [Tag3 (("Ast", 1197), 0, (Tag1 ([Tag1 (("t", 1204), (0, 0, [[(("name", 478), 0, (Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -46), (("vernac/record.mli", 18, 764, 770), ("vernac/record.mli", 19, 790, 795), 0), 0, Tag1 ("Record", 1)); (("is_coercion", 479), 0, (Tag3 (Tag1 ((Tag2 ("Vernacexpr")), "coercion_flag"), 0, (0)), 100000000, 0, -47), (("vernac/record.mli", 19, 790, 796), ("vernac/record.mli", 20, 824, 829), 0), 0, Tag1 ("Record", 2)); (("binders", 480), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "local_binder_expr"), 0, (0)), 100000000, 0, -49)], (0)), 100000000, 0, -48), (("vernac/record.mli", 20, 824, 830), ("vernac/record.mli", 21, 862, 867), 0), 0, Tag1 ("Record", 3)); (("cfs", 481), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Vernacexpr")), "local_decl_expr"), 0, (0)), 100000000, 0, -52); (Tag3 (Tag1 ((Tag2 ("Vernacexpr")), "record_field_attr"), 0, (0)), 100000000, 0, -53)]), 100000000, 0, -51)], (0)), 100000000, 0, -50), (("vernac/record.mli", 21, 862, 868), ("vernac/record.mli", 22, 917, 922), 0), 0, Tag1 ("Record", 4)); (("idbuild", 498), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -54), (("vernac/record.mli", 22, 917, 923), ("vernac/record.mli", 23, 938, 943), 0), 0, Tag1 ("Record", 5)); (("sort", 499), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -56)], (0)), 100000000, 0, -55), (("vernac/record.mli", 23, 938, 944), ("vernac/record.mli", 24, 970, 975), 0), 0, Tag1 ("Record", 6)); (("default_inhabitant_id", 500), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -58)], (0)), 100000000, 0, -57), (("vernac/record.mli", 24, 970, 976), ("vernac/record.mli", 24, 970, 1011), 0), 0, Tag1 ("Record", 7))]], 1, 0, 0, 0, 0, 0, (("vernac/record.mli", 17, 753, 755), ("vernac/record.mli", 25, 1012, 1017), 0), 0, 0, 0, Tag1 ("Record", 0)), 1, 0)]), 0, (("vernac/record.mli", 16, 736, 736), ("vernac/record.mli", 26, 1018, 1021), 0), Tag1 ("Record", 8)), 0, 0); (("definition_structure", 1198), ((Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "cumul_univ_decl_expr"), 0, (0)), 100000000, 0, -45)], (0)), 100000000, 0, -44), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Vernacexpr")), "inductive_kind"), 0, (0)), 100000000, 0, -43), (Tag1 (("template"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -42)], (0)), 100000000, 0, -41), (Tag1 (("cumulative"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -40), (Tag1 (("poly"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -39), (Tag1 (("primitive_proj"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -38), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "recursivity_kind"), 0, (0)), 100000000, 0, -37), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Ast", 1197)), "t"), 0, (0)), 100000000, 0, -36)], (0)), 100000000, 0, -35), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -34)], (0)), 100000000, 0, -33), 0), 100000000, 0, -32), 0), 100000000, 0, -31), 0), 100000000, 0, -30), 0), 100000000, 0, -29), 0), 100000000, 0, -28), 0), 100000000, 0, -27), 0), 100000000, 0, -26), 0), 100000000, 0, -25), 0, (("vernac/record.mli", 28, 1023, 1023), ("vernac/record.mli", 37, 1239, 1258), 0), 0, Tag1 ("Record", 9)), 0); Tag3 (("Data", 1199), 0, (Tag1 ([Tag1 (("projection_flags", 1205), (0, 0, [[(("pf_coercion", 556), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -66), (("vernac/record.mli", 41, 1310, 1316), ("vernac/record.mli", 41, 1310, 1334), 0), 0, Tag1 ("Record", 11)); (("pf_reversible", 557), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -67), (("vernac/record.mli", 42, 1335, 1341), ("vernac/record.mli", 42, 1335, 1361), 0), 0, Tag1 ("Record", 12)); (("pf_instance", 558), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -68), (("vernac/record.mli", 43, 1362, 1368), ("vernac/record.mli", 43, 1362, 1386), 0), 0, Tag1 ("Record", 13)); (("pf_priority", 559), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -70)], (0)), 100000000, 0, -69), (("vernac/record.mli", 44, 1387, 1393), ("vernac/record.mli", 44, 1387, 1417), 0), 0, Tag1 ("Record", 14)); (("pf_locality", 605), 0, (Tag3 (Tag1 ((Tag2 ("Goptions")), "option_locality"), 0, (0)), 100000000, 0, -71), (("vernac/record.mli", 45, 1418, 1424), ("vernac/record.mli", 45, 1418, 1462), 0), 0, Tag1 ("Record", 15)); (("pf_canonical", 606), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -72), (("vernac/record.mli", 46, 1463, 1469), ("vernac/record.mli", 46, 1463, 1488), 0), 0, Tag1 ("Record", 16))]], 1, 0, 0, 0, 0, 0, (("vernac/record.mli", 40, 1280, 1284), ("vernac/record.mli", 47, 1489, 1494), 0), 0, 0, 0, Tag1 ("Record", 10)), 1, 0); Tag1 (("raw_data", 1206), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("vernac/record.mli", 48, 1495, 1499), ("vernac/record.mli", 48, 1495, 1512), 0), 0, 0, 0, Tag1 ("Record", 17)), 1, 0); Tag1 (("t", 1207), (0, 0, [[(("id", 609), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -59), (("vernac/record.mli", 50, 1526, 1534), ("vernac/record.mli", 51, 1544, 1551), 0), 0, Tag1 ("Record", 19)); (("idbuild", 610), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -60), (("vernac/record.mli", 51, 1544, 1552), ("vernac/record.mli", 52, 1567, 1574), 0), 0, Tag1 ("Record", 20)); (("is_coercion", 611), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -61), (("vernac/record.mli", 52, 1567, 1575), ("vernac/record.mli", 53, 1594, 1601), 0), 0, Tag1 ("Record", 21)); (("proj_flags", 612), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("projection_flags", 1205)), 0, (0)), 100000000, 0, -63)], (0)), 100000000, 0, -62), (("vernac/record.mli", 53, 1594, 1602), ("vernac/record.mli", 54, 1637, 1644), 0), 0, Tag1 ("Record", 22)); (("rdata", 613), 0, (Tag3 ((("raw_data", 1206)), 0, (0)), 100000000, 0, -64), (("vernac/record.mli", 54, 1637, 1645), ("vernac/record.mli", 55, 1662, 1669), 0), 0, Tag1 ("Record", 23)); (("inhabitant_id", 614), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -65), (("vernac/record.mli", 55, 1662, 1670), ("vernac/record.mli", 55, 1662, 1690), 0), 0, Tag1 ("Record", 24))]], 1, 0, 0, 0, 0, 0, (("vernac/record.mli", 49, 1513, 1517), ("vernac/record.mli", 56, 1691, 1698), 0), 0, 0, 0, Tag1 ("Record", 18)), 1, 0)]), 0, (("vernac/record.mli", 39, 1260, 1262), ("vernac/record.mli", 57, 1699, 1704), 0), Tag1 ("Record", 25)), 0, 0); Tag3 (("Record_decl", 1200), 0, (Tag1 ([Tag1 (("t", 1208), (0, 0, [[(("mie", 635), 0, (Tag3 (Tag1 ((Tag2 ("Entries")), "mutual_inductive_entry"), 0, (0)), 100000000, 0, -73), (("vernac/record.mli", 62, 1821, 1827), ("vernac/record.mli", 62, 1821, 1864), 0), 0, Tag1 ("Record", 28)); (("records", 636), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Data", 1199)), "t"), 0, (0)), 100000000, 0, -75)], (0)), 100000000, 0, -74), (("vernac/record.mli", 63, 1865, 1871), ("vernac/record.mli", 63, 1865, 1893), 0), 0, Tag1 ("Record", 29)); (("primitive_proj", 637), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -76), (("vernac/record.mli", 65, 1947, 1953), ("vernac/record.mli", 65, 1947, 1975), 0), 0, Tag1 ("Record", 30)); (("impls", 642), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("DeclareInd")), "one_inductive_impls"), 0, (0)), 100000000, 0, -78)], (0)), 100000000, 0, -77), (("vernac/record.mli", 66, 1976, 1982), ("vernac/record.mli", 66, 1976, 2026), 0), 0, Tag1 ("Record", 31)); (("globnames", 711), 0, (Tag3 (Tag1 ((Tag2 ("UState")), "named_universes_entry"), 0, (0)), 100000000, 0, -79), (("vernac/record.mli", 67, 2027, 2033), ("vernac/record.mli", 67, 2027, 2074), 0), 0, Tag1 ("Record", 32)); (("global_univ_decls", 785), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "ContextSet"), "t"), 0, (0)), 100000000, 0, -81)], (0)), 100000000, 0, -80), (("vernac/record.mli", 68, 2075, 2081), ("vernac/record.mli", 68, 2075, 2126), 0), 0, Tag1 ("Record", 33)); (("projunivs", 786), 0, (Tag3 (Tag1 ((Tag2 ("Entries")), "universes_entry"), 0, (0)), 100000000, 0, -82), (("vernac/record.mli", 69, 2127, 2133), ("vernac/record.mli", 69, 2127, 2169), 0), 0, Tag1 ("Record", 34)); (("ubinders", 792), 0, (Tag3 (Tag1 ((Tag2 ("UnivNames")), "universe_binders"), 0, (0)), 100000000, 0, -83), (("vernac/record.mli", 70, 2170, 2176), ("vernac/record.mli", 70, 2170, 2214), 0), 0, Tag1 ("Record", 35)); (("projections_kind", 803), 0, (Tag3 (Tag1 ((Tag2 ("Decls")), "definition_object_kind"), 0, (0)), 100000000, 0, -84), (("vernac/record.mli", 71, 2215, 2221), ("vernac/record.mli", 71, 2215, 2269), 0), 0, Tag1 ("Record", 36)); (("poly", 804), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -85), (("vernac/record.mli", 72, 2270, 2276), ("vernac/record.mli", 72, 2270, 2288), 0), 0, Tag1 ("Record", 37)); (("indlocs", 824), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -88)], (0)), 100000000, 0, -87)], (0)), 100000000, 0, -86), (("vernac/record.mli", 73, 2289, 2295), ("vernac/record.mli", 73, 2289, 2323), 0), 0, Tag1 ("Record", 38))]], 1, 0, 0, 0, 0, 0, (("vernac/record.mli", 61, 1806, 1810), ("vernac/record.mli", 74, 2324, 2329), 0), 0, 0, 0, Tag1 ("Record", 26)), 1, 0)]), 0, (("vernac/record.mli", 60, 1779, 1781), ("vernac/record.mli", 75, 2330, 2333), 0), Tag1 ("Record", 39)), 0, 0); (("interp_structure", 1201), ((Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "cumul_univ_decl_expr"), 0, (0)), 100000000, 0, -24)], (0)), 100000000, 0, -23), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Vernacexpr")), "inductive_kind"), 0, (0)), 100000000, 0, -22), (Tag1 (("template"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -21)], (0)), 100000000, 0, -20), (Tag1 (("cumulative"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -19), (Tag1 (("poly"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -18), (Tag1 (("primitive_proj"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -17), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "recursivity_kind"), 0, (0)), 100000000, 0, -16), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Ast", 1197)), "t"), 0, (0)), 100000000, 0, -15)], (0)), 100000000, 0, -14), (Tag3 (Tag1 ((("Record_decl", 1200)), "t"), 0, (0)), 100000000, 0, -13), 0), 100000000, 0, -12), 0), 100000000, 0, -11), 0), 100000000, 0, -10), 0), 100000000, 0, -9), 0), 100000000, 0, -8), 0), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("vernac/record.mli", 78, 2373, 2373), ("vernac/record.mli", 87, 2585, 2603), 0), 0, Tag1 ("Record", 40)), 0); (("declare_existing_class", 1202), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -4), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("vernac/record.mli", 90, 2606, 2606), ("vernac/record.mli", 90, 2606, 2652), 0), 0, Tag1 ("Record", 41)), 0); Tag3 (("Internal", 1203), 0, (Tag1 ([Tag1 (("projection_flags", 1209), (0, 0, [[(("pf_coercion", 1020), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -113), (("vernac/record.mli", 96, 2842, 2846), ("vernac/record.mli", 96, 2842, 2864), 0), 0, Tag1 ("Record", 43)); (("pf_reversible", 1021), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -114), (("vernac/record.mli", 97, 2865, 2869), ("vernac/record.mli", 97, 2865, 2889), 0), 0, Tag1 ("Record", 44)); (("pf_instance", 1022), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -115), (("vernac/record.mli", 98, 2890, 2894), ("vernac/record.mli", 98, 2890, 2912), 0), 0, Tag1 ("Record", 45)); (("pf_priority", 1023), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -117)], (0)), 100000000, 0, -116), (("vernac/record.mli", 99, 2913, 2917), ("vernac/record.mli", 99, 2913, 2941), 0), 0, Tag1 ("Record", 46)); (("pf_locality", 1024), 0, (Tag3 (Tag1 ((Tag2 ("Goptions")), "option_locality"), 0, (0)), 100000000, 0, -118), (("vernac/record.mli", 100, 2942, 2946), ("vernac/record.mli", 100, 2942, 2984), 0), 0, Tag1 ("Record", 47)); (("pf_canonical", 1025), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -119), (("vernac/record.mli", 101, 2985, 2989), ("vernac/record.mli", 101, 2985, 3008), 0), 0, Tag1 ("Record", 48))]], 1, 0, 0, 0, 0, 0, (("vernac/record.mli", 95, 2814, 2816), ("vernac/record.mli", 102, 3009, 3012), 0), 0, 0, 0, Tag1 ("Record", 42)), 1, 0); (("declare_projections", 1210), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -112), (Tag1 (0, (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Entries")), "universes_entry"), 0, (0)), 100000000, 0, -110); (Tag3 (Tag1 ((Tag2 ("UnivNames")), "universe_binders"), 0, (0)), 100000000, 0, -111)]), 100000000, 0, -109), (Tag1 (Tag1 ("kind"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Decls")), "definition_object_kind"), 0, (0)), 100000000, 0, -108)], (0)), 100000000, 0, -107), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -106), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("projection_flags", 1209)), 0, (0)), 100000000, 0, -105)], (0)), 100000000, 0, -104), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Impargs")), "manual_implicits"), 0, (0)), 100000000, 0, -103)], (0)), 100000000, 0, -102), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "rel_context"), 0, (0)), 100000000, 0, -101), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Structures")), "Structure"), "projection"), 0, (0)), 100000000, 0, -100)], (0)), 100000000, 0, -99), 0), 100000000, 0, -98), 0), 100000000, 0, -97), 0), 100000000, 0, -96), 0), 100000000, 0, -95), 0), 100000000, 0, -94), 0), 100000000, 0, -93), 0), 100000000, 0, -92), 0, (("vernac/record.mli", 104, 3014, 3016), ("vernac/record.mli", 112, 3274, 3306), 0), 0, Tag1 ("Record", 50)), 0); (("declare_structure_entry", 1211), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Structures")), "Structure"), "t"), 0, (0)), 100000000, 0, -91), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -90), 0), 100000000, 0, -89), 0, (("vernac/record.mli", 114, 3308, 3310), ("vernac/record.mli", 114, 3308, 3359), 0), 0, Tag1 ("Record", 51)), 0)]), 0, (("vernac/record.mli", 94, 2792, 2792), ("vernac/record.mli", 116, 3361, 3364), 0), Tag1 ("Record", 52)), 0, 0)], "Record", [("Record", ("\173\128\166W\149aq\160}C\024\170\190U\233\001")); ("Z", ("\253\196\2168\027\199O\134\220\218\031'\1484\233o")); ("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Vmemitcodes", ("wCd\138\165\158DD\241gH\236.\210\197\247")); ("Vmbytecodes", ("\025\021\151\137Dx\149W\236+[\143f\208\160\016")); ("Vernacexpr", ("Lu|g\028\024j\193\000\234\175\209&\211]\137")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Unix", (":B72R\011\005Sj\189)\011\239PH\254")); ("UnivSubst", ("\190qu\031mc\130\181\003G]\132\"\219m)")); ("UnivProblem", ("6'\161\018\181\001.\253\000\141a6\171\1727\155")); ("UnivNames", ("%\151_\209%+JM$n\001\232\194n\178N")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Unification", ("\017\027\157=\255\1914L\020\213h\154.\219\005\170")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UState", ("SD\203\215|\136\n\251\239\208\148\215C\n\167\005")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("Typeclasses", ("KO\1297x\192\210\231\001\1824l\135\192\160|")); ("Type_errors", ("7\157\162-\214M\206\196\228\191\005v\134\177\144\134")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Tactypes", ("\143E\135*\195\151\144H\151M\011($\017\159\203")); ("Tacred", ("\133d\143\1310z\030\237\232\002\001\025\147\140\215:")); ("Summary", ("\148G\135\226\024L3\246\021\028U\146\164`\253\250")); ("Structures", ("\012\140\238\148\207\217\148\148V\003`\211\\\239\022\205")); ("Store", ("/dT\252\145\179pq\216{\181\206\190K+U")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Random", ("\020\005Xq\171\026\218\152X\135\254\023\133zK\200")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("Section", ("\245\207\b\021\142v=\155#w\246}\"4b\006")); ("Safe_typing", (")\250?\164\145\132\241\127\186\152h+\145\"\237l")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("Reductionops", ("\179\023P\218\146Uh\014IS\196C\031q~#")); ("Range", ("\218\130\001r\237\r\144\171\164\021l\155\196\143sg")); ("Proofview_monad", ("\218\196\189S\147\216\129\221\231\224v\228O\024*\239")); ("Proofview", ("\245\140U\027\236\199\199&\242\156\199YG\250tA")); ("Proof_bullet", ("\249\179=\253g\211\149\212\t\217_0\179\197k\179")); ("Proof", ("\249\030\200g\248\164o&\tS\132\rTl\1736")); ("Primred", ("\158G\192\182\224\196\144*\174y_E\165\012\137C")); ("Pretype_errors", ("\155\229\201\176\163\234\203C\127\227\141\174j\199\200H")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Pattern", ("\195C\140Wb=\022\222\208\227^K\003\020\215X")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("NumTok", ("vd\023^\251\244B\166\145'\156\196-0\027\169")); ("Notationextern", ("\000\022b5`t\134]\192f4\131\187\192\152\160")); ("Notation_term", ("5\002\017\217b\193nc>\239\239\237\244\031\173?")); ("Notation", ("\243\219),\220\160v\230\t$\246\188\252\172\152\147")); ("Nativevalues", ("8:\007\025e\226c,\001\171\146#l\210\171\152")); ("Nativelib", ("V\239\205Y1\147E:,\176\196Hy\1483|")); ("Nativecode", ("\190\185\255\006m\012\210\163\138Rz\247\15283\183")); ("Nametab", ("1\018\163\254\225\2178\025DI\0271Q\198\134\140")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Namegen", ("\187\222\224T\255\020\1808-\212*\164\131\177\157x")); ("Monad", ("\244\171T\157\194p\187\160\149\195{\132\222\020\253\148")); ("Modintern", ("F\222V\246R\143{\n\240\004;;;\011\026\223")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Ltac_pretype", ("\224\"\167\018i:U\172>\188\128$\r\252\020T")); ("Logic_monad", ("\130\157\160Q\163vQ\137\184\2242\209\128\024\220i")); ("Locus", ("_\002\003W\246\181\225\242Uf\139\226\176\174\192I")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Libobject", ("\132}t\226hl\213L\210\172\167pc\012~\129")); ("Libnames", ("fp\0255\167\162\209\153\137\161\169#\246\193\003\198")); ("Lib", ("8\018\021\210\020\136$\149\164=\007\002\218\026RX")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Impargs", ("\021\197\1992>\rm\185\141\"iHY\133\138/")); ("Hook", ("\183\194\223\003\155\169',\187\240a;E\b\1396")); ("Hints", ("\007\130]H\\t(\131\000}\205\137H\148\250\166")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Gramlib__Stream", ("\248\\H\205_76\253\136\146\200\031\165\021=t")); ("Gramlib__Gramext", ("B\171oA\172\212\187>\175\233Q\145\"\176TM")); ("Gramlib", ("\154\143\210e\021i\246\176\224\194\220\217\007\145\139A")); ("Goptions", ("i>Rt=\183g\153\190\144\235u\248\247*e")); ("Goal_select", ("\235$\175\023t\178\194.Ivlz\005\211\173\n")); ("Globnames", ("W\004\172T\214\181H\220\232\160LSW\006\130\226")); ("Glob_term", ("\165=a\227\160\153.\021_$\232\209T\236\153O")); ("Genredexpr", ("rz\204\143\007`VgI\195P\168sO\198\012")); ("Genlambda", ("\170}\024\241\141\222\136S\169\219\2212i\134KI")); ("Geninterp", ("2S\151\191\189\159\004\188;\224d\199|U\004\028")); ("Genarg", ("\1434\015\001\152\196\005s\156\136\195\185\247\b3\t")); ("Ftactic", ("K\172\205\128\241\162\160\201\202\1561o\180L\206:")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Extend", ("\179&!W\163V\006\245\018\168\021\001\224s\168\234")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evd", ("\211\205p\193\216\129r\006\239oN\142ar\196\175")); ("Evarsolve", ("\000&\228\016}j\199\t\229\173\127\024\219\199\184\178")); ("Evar_kinds", ("\023L\186\132\218}\254\221\185\198\220\200h\003{\021")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Environ", ("\171b\1579\229<\003Z\147IL\225X\254\182\204")); ("Entries", ("\172\201\198\221Ap\027_{\174\141C\021\";p")); ("EConstr", ("\201aW\156\157;N\004\201V\208\006L\166\211)")); ("Dyn", ("\131z`\205v\2306\007x\027&K.?;\169")); ("Deprecation", ("\226:\146\245\190;\1929\254@\247a\218\244\134\189")); ("Decls", ("\140C{$\142?\215\153\180\186h;\153\139\187\129")); ("Declaremods", ("\019d|\168<\144\239o\017\222\248K^\157\198\179")); ("DeclareInd", ("\bv\192\176\247\164\000\164l\186\146\136\006\1528\144")); ("Declarations", ("\239\137n\019\030w$\182\166z^{\b\206\163\175")); ("DAst", ("\224/\200)\007\184ni\134\b\139\204\241\005w\212")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Conversion", ("\158\150&\195M\tv\127|\029\158RRK\211A")); ("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constrexpr", ("p'r\245\184chL\183\249\"\213]\1741\237")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("Coercionops", ("\238\240\220\191\201\bMazv\159\227\236?\147>")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CWarnings", ("\132\220\150\227\215\239t\217\132\220'JX\188\246c")); ("CUnix", ("\140Zl\153\167\011J\015\005|th\247OTu")); ("CString", ("\243~4C\023~\169\148x\206\165\207\195\177Q\184")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CEphemeron", ("\204I\179-\206(x4\173\229\250\001PkH\151")); ("CDebug", ("^4\210p7\239!3\138\138\213?\239`\250\157")); ("CClosure", ("\167\b\022\241V-\r\253\b\002\000j]\223%\142")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("Attributes", ("\2145\146P\224\163B1\135\232\204SD\129^\141")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])

  end

module Threshold :
  sig
    type t = Never_inline | Can_inline_if_no_larger_than of int
    val add : t -> t -> t
    val sub : t -> t -> t
    val min : t -> t -> t
    val equal : t -> t -> bool
  end
val can_inline : Flambda.t -> Threshold.t -> bonus:int -> bool
val can_try_inlining :
  Flambda.t ->
  Threshold.t ->
  number_of_arguments:int ->
  size_from_approximation:int option -> Threshold.t
module Benefit :
  sig
    type t
    val zero : t
    val ( + ) : t -> t -> t
    val max : round:int -> t -> t -> t
    val remove_call : t -> t
    val remove_alloc : t -> t
    val remove_prim : t -> t
    val remove_prims : t -> int -> t
    val remove_branch : t -> t
    val direct_call_of_indirect : t -> t
    val requested_inline : t -> size_of:Flambda.t -> t
    val remove_code : Flambda.t -> t -> t
    val remove_code_named : Flambda.named -> t -> t
    val remove_projection : Projection.t -> t -> t
    val add_code : Flambda.t -> t -> t
    val add_code_named : Flambda.named -> t -> t
    val add_projection : Projection.t -> t -> t
    val print : Format.formatter -> t -> unit
  end
module Whether_sufficient_benefit :
  sig
    type t
    val create :
      original:Flambda.t ->
      toplevel:bool ->
      branch_depth:int ->
      Flambda.t -> benefit:Benefit.t -> lifting:bool -> round:int -> t
    val create_estimate :
      original_size:int ->
      toplevel:bool ->
      branch_depth:int ->
      new_size:int -> benefit:Benefit.t -> lifting:bool -> round:int -> t
    val evaluate : t -> bool
    val to_string : t -> string
    val print_description :
      subfunctions:bool -> Format.formatter -> t -> unit
  end
val scale_inline_threshold_by : int
val default_toplevel_multiplier : int
val direct_call_size : int
val maximum_interesting_size_of_function_body : int -> int
val lambda_smaller' : Flambda.expr -> than:int -> int option
("DEBUG:rule", [Tag3 (("Threshold", 556), 0, (Tag1 ([Tag1 (("t", 567), (0, 0, Tag1 ([(("Never_inline", 270), (0), 0, (("middle_end/flambda/inlining_cost.mli", 27, 1469, 1473), ("middle_end/flambda/inlining_cost.mli", 27, 1469, 1487), 0), 0, Tag1 ("Inlining_cost", 1)); (("Can_inline_if_no_larger_than", 271), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -54)]), 0, (("middle_end/flambda/inlining_cost.mli", 28, 1488, 1492), ("middle_end/flambda/inlining_cost.mli", 28, 1488, 1529), 0), 0, Tag1 ("Inlining_cost", 2))], 0), 1, 0, 0, 0, 0, 0, (("middle_end/flambda/inlining_cost.mli", 26, 1458, 1460), ("middle_end/flambda/inlining_cost.mli", 28, 1488, 1529), 0), 0, 0, 0, Tag1 ("Inlining_cost", 0)), 1, 0); (("add", 568), ((Tag1 (0, (Tag3 ((("t", 567)), 0, (0)), 100000000, 0, -53), (Tag1 (0, (Tag3 ((("t", 567)), 0, (0)), 100000000, 0, -52), (Tag3 ((("t", 567)), 0, (0)), 100000000, 0, -51), 0), 100000000, 0, -50), 0), 100000000, 0, -49), 0, (("middle_end/flambda/inlining_cost.mli", 30, 1531, 1533), ("middle_end/flambda/inlining_cost.mli", 30, 1531, 1554), 0), 0, Tag1 ("Inlining_cost", 3)), 0); (("sub", 569), ((Tag1 (0, (Tag3 ((("t", 567)), 0, (0)), 100000000, 0, -48), (Tag1 (0, (Tag3 ((("t", 567)), 0, (0)), 100000000, 0, -47), (Tag3 ((("t", 567)), 0, (0)), 100000000, 0, -46), 0), 100000000, 0, -45), 0), 100000000, 0, -44), 0, (("middle_end/flambda/inlining_cost.mli", 31, 1555, 1557), ("middle_end/flambda/inlining_cost.mli", 31, 1555, 1578), 0), 0, Tag1 ("Inlining_cost", 4)), 0); (("min", 570), ((Tag1 (0, (Tag3 ((("t", 567)), 0, (0)), 100000000, 0, -43), (Tag1 (0, (Tag3 ((("t", 567)), 0, (0)), 100000000, 0, -42), (Tag3 ((("t", 567)), 0, (0)), 100000000, 0, -41), 0), 100000000, 0, -40), 0), 100000000, 0, -39), 0, (("middle_end/flambda/inlining_cost.mli", 32, 1579, 1581), ("middle_end/flambda/inlining_cost.mli", 32, 1579, 1602), 0), 0, Tag1 ("Inlining_cost", 5)), 0); (("equal", 571), ((Tag1 (0, (Tag3 ((("t", 567)), 0, (0)), 100000000, 0, -38), (Tag1 (0, (Tag3 ((("t", 567)), 0, (0)), 100000000, 0, -37), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -36), 0), 100000000, 0, -35), 0), 100000000, 0, -34), 0, (("middle_end/flambda/inlining_cost.mli", 33, 1603, 1605), ("middle_end/flambda/inlining_cost.mli", 33, 1603, 1631), 0), 0, Tag1 ("Inlining_cost", 6)), 0)]), 0, (("middle_end/flambda/inlining_cost.mli", 22, 1304, 1304), ("middle_end/flambda/inlining_cost.mli", 35, 1633, 1636), 0), Tag1 ("Inlining_cost", 7)), 0, 0); (("can_inline", 557), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Flambda")), "t"), 0, (0)), 100000000, 0, -33), (Tag1 (0, (Tag3 (Tag1 ((("Threshold", 556)), "t"), 0, (0)), 100000000, 0, -32), (Tag1 (("bonus"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -31), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -30), 0), 100000000, 0, -29), 0), 100000000, 0, -28), 0), 100000000, 0, -27), 0, (("middle_end/flambda/inlining_cost.mli", 40, 1840, 1840), ("middle_end/flambda/inlining_cost.mli", 44, 1903, 1912), 0), 0, Tag1 ("Inlining_cost", 8)), 0); (("can_try_inlining", 558), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Flambda")), "t"), 0, (0)), 100000000, 0, -26), (Tag1 (0, (Tag3 (Tag1 ((("Threshold", 556)), "t"), 0, (0)), 100000000, 0, -25), (Tag1 (("number_of_arguments"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -24), (Tag1 (("size_from_approximation"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -23)], (0)), 100000000, 0, -22), (Tag3 (Tag1 ((("Threshold", 556)), "t"), 0, (0)), 100000000, 0, -21), 0), 100000000, 0, -20), 0), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("middle_end/flambda/inlining_cost.mli", 54, 2448, 2448), ("middle_end/flambda/inlining_cost.mli", 59, 2571, 2587), 0), 0, Tag1 ("Inlining_cost", 9)), 0); Tag3 (("Benefit", 559), 0, (Tag1 ([Tag1 (("t", 572), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("middle_end/flambda/inlining_cost.mli", 67, 2854, 2856), ("middle_end/flambda/inlining_cost.mli", 67, 2854, 2862), 0), 0, 0, 0, Tag1 ("Inlining_cost", 10)), 1, 0); (("zero", 573), ((Tag3 ((("t", 572)), 0, (0)), 100000000, 0, -127), 0, (("middle_end/flambda/inlining_cost.mli", 69, 2864, 2866), ("middle_end/flambda/inlining_cost.mli", 69, 2864, 2878), 0), 0, Tag1 ("Inlining_cost", 11)), 0); (("+", 574), ((Tag1 (0, (Tag3 ((("t", 572)), 0, (0)), 100000000, 0, -126), (Tag1 (0, (Tag3 ((("t", 572)), 0, (0)), 100000000, 0, -125), (Tag3 ((("t", 572)), 0, (0)), 100000000, 0, -124), 0), 100000000, 0, -123), 0), 100000000, 0, -122), 0, (("middle_end/flambda/inlining_cost.mli", 70, 2879, 2881), ("middle_end/flambda/inlining_cost.mli", 70, 2879, 2902), 0), 0, Tag1 ("Inlining_cost", 12)), 0); (("max", 575), ((Tag1 (("round"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -121), (Tag1 (0, (Tag3 ((("t", 572)), 0, (0)), 100000000, 0, -120), (Tag1 (0, (Tag3 ((("t", 572)), 0, (0)), 100000000, 0, -119), (Tag3 ((("t", 572)), 0, (0)), 100000000, 0, -118), 0), 100000000, 0, -117), 0), 100000000, 0, -116), 0), 100000000, 0, -115), 0, (("middle_end/flambda/inlining_cost.mli", 71, 2903, 2905), ("middle_end/flambda/inlining_cost.mli", 71, 2903, 2939), 0), 0, Tag1 ("Inlining_cost", 13)), 0); (("remove_call", 576), ((Tag1 (0, (Tag3 ((("t", 572)), 0, (0)), 100000000, 0, -114), (Tag3 ((("t", 572)), 0, (0)), 100000000, 0, -113), 0), 100000000, 0, -112), 0, (("middle_end/flambda/inlining_cost.mli", 73, 2941, 2943), ("middle_end/flambda/inlining_cost.mli", 73, 2941, 2967), 0), 0, Tag1 ("Inlining_cost", 14)), 0); (("remove_alloc", 577), ((Tag1 (0, (Tag3 ((("t", 572)), 0, (0)), 100000000, 0, -111), (Tag3 ((("t", 572)), 0, (0)), 100000000, 0, -110), 0), 100000000, 0, -109), 0, (("middle_end/flambda/inlining_cost.mli", 76, 3098, 3100), ("middle_end/flambda/inlining_cost.mli", 76, 3098, 3125), 0), 0, Tag1 ("Inlining_cost", 15)), 0); (("remove_prim", 578), ((Tag1 (0, (Tag3 ((("t", 572)), 0, (0)), 100000000, 0, -108), (Tag3 ((("t", 572)), 0, (0)), 100000000, 0, -107), 0), 100000000, 0, -106), 0, (("middle_end/flambda/inlining_cost.mli", 77, 3126, 3128), ("middle_end/flambda/inlining_cost.mli", 77, 3126, 3152), 0), 0, Tag1 ("Inlining_cost", 16)), 0); (("remove_prims", 579), ((Tag1 (0, (Tag3 ((("t", 572)), 0, (0)), 100000000, 0, -105), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -104), (Tag3 ((("t", 572)), 0, (0)), 100000000, 0, -103), 0), 100000000, 0, -102), 0), 100000000, 0, -101), 0, (("middle_end/flambda/inlining_cost.mli", 78, 3153, 3155), ("middle_end/flambda/inlining_cost.mli", 78, 3153, 3187), 0), 0, Tag1 ("Inlining_cost", 17)), 0); (("remove_branch", 580), ((Tag1 (0, (Tag3 ((("t", 572)), 0, (0)), 100000000, 0, -100), (Tag3 ((("t", 572)), 0, (0)), 100000000, 0, -99), 0), 100000000, 0, -98), 0, (("middle_end/flambda/inlining_cost.mli", 79, 3188, 3190), ("middle_end/flambda/inlining_cost.mli", 79, 3188, 3216), 0), 0, Tag1 ("Inlining_cost", 18)), 0); (("direct_call_of_indirect", 581), ((Tag1 (0, (Tag3 ((("t", 572)), 0, (0)), 100000000, 0, -97), (Tag3 ((("t", 572)), 0, (0)), 100000000, 0, -96), 0), 100000000, 0, -95), 0, (("middle_end/flambda/inlining_cost.mli", 80, 3217, 3219), ("middle_end/flambda/inlining_cost.mli", 80, 3217, 3255), 0), 0, Tag1 ("Inlining_cost", 19)), 0); (("requested_inline", 582), ((Tag1 (0, (Tag3 ((("t", 572)), 0, (0)), 100000000, 0, -94), (Tag1 (("size_of"), (Tag3 (Tag1 ((Tag2 ("Flambda")), "t"), 0, (0)), 100000000, 0, -93), (Tag3 ((("t", 572)), 0, (0)), 100000000, 0, -92), 0), 100000000, 0, -91), 0), 100000000, 0, -90), 0, (("middle_end/flambda/inlining_cost.mli", 81, 3256, 3258), ("middle_end/flambda/inlining_cost.mli", 81, 3256, 3308), 0), 0, Tag1 ("Inlining_cost", 20)), 0); (("remove_code", 583), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Flambda")), "t"), 0, (0)), 100000000, 0, -89), (Tag1 (0, (Tag3 ((("t", 572)), 0, (0)), 100000000, 0, -88), (Tag3 ((("t", 572)), 0, (0)), 100000000, 0, -87), 0), 100000000, 0, -86), 0), 100000000, 0, -85), 0, (("middle_end/flambda/inlining_cost.mli", 83, 3310, 3312), ("middle_end/flambda/inlining_cost.mli", 83, 3310, 3349), 0), 0, Tag1 ("Inlining_cost", 21)), 0); (("remove_code_named", 584), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Flambda")), "named"), 0, (0)), 100000000, 0, -84), (Tag1 (0, (Tag3 ((("t", 572)), 0, (0)), 100000000, 0, -83), (Tag3 ((("t", 572)), 0, (0)), 100000000, 0, -82), 0), 100000000, 0, -81), 0), 100000000, 0, -80), 0, (("middle_end/flambda/inlining_cost.mli", 84, 3350, 3352), ("middle_end/flambda/inlining_cost.mli", 84, 3350, 3399), 0), 0, Tag1 ("Inlining_cost", 22)), 0); (("remove_projection", 585), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Projection")), "t"), 0, (0)), 100000000, 0, -79), (Tag1 (0, (Tag3 ((("t", 572)), 0, (0)), 100000000, 0, -78), (Tag3 ((("t", 572)), 0, (0)), 100000000, 0, -77), 0), 100000000, 0, -76), 0), 100000000, 0, -75), 0, (("middle_end/flambda/inlining_cost.mli", 85, 3400, 3402), ("middle_end/flambda/inlining_cost.mli", 85, 3400, 3448), 0), 0, Tag1 ("Inlining_cost", 23)), 0); (("add_code", 586), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Flambda")), "t"), 0, (0)), 100000000, 0, -74), (Tag1 (0, (Tag3 ((("t", 572)), 0, (0)), 100000000, 0, -73), (Tag3 ((("t", 572)), 0, (0)), 100000000, 0, -72), 0), 100000000, 0, -71), 0), 100000000, 0, -70), 0, (("middle_end/flambda/inlining_cost.mli", 87, 3450, 3452), ("middle_end/flambda/inlining_cost.mli", 87, 3450, 3486), 0), 0, Tag1 ("Inlining_cost", 24)), 0); (("add_code_named", 587), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Flambda")), "named"), 0, (0)), 100000000, 0, -69), (Tag1 (0, (Tag3 ((("t", 572)), 0, (0)), 100000000, 0, -68), (Tag3 ((("t", 572)), 0, (0)), 100000000, 0, -67), 0), 100000000, 0, -66), 0), 100000000, 0, -65), 0, (("middle_end/flambda/inlining_cost.mli", 88, 3487, 3489), ("middle_end/flambda/inlining_cost.mli", 88, 3487, 3533), 0), 0, Tag1 ("Inlining_cost", 25)), 0); (("add_projection", 588), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Projection")), "t"), 0, (0)), 100000000, 0, -64), (Tag1 (0, (Tag3 ((("t", 572)), 0, (0)), 100000000, 0, -63), (Tag3 ((("t", 572)), 0, (0)), 100000000, 0, -62), 0), 100000000, 0, -61), 0), 100000000, 0, -60), 0, (("middle_end/flambda/inlining_cost.mli", 89, 3534, 3536), ("middle_end/flambda/inlining_cost.mli", 89, 3534, 3579), 0), 0, Tag1 ("Inlining_cost", 26)), 0); (("print", 589), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -59), (Tag1 (0, (Tag3 ((("t", 572)), 0, (0)), 100000000, 0, -58), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -57), 0), 100000000, 0, -56), 0), 100000000, 0, -55), 0, (("middle_end/flambda/inlining_cost.mli", 91, 3581, 3583), ("middle_end/flambda/inlining_cost.mli", 91, 3581, 3624), 0), 0, Tag1 ("Inlining_cost", 27)), 0)]), 0, (("middle_end/flambda/inlining_cost.mli", 61, 2589, 2589), ("middle_end/flambda/inlining_cost.mli", 92, 3625, 3628), 0), Tag1 ("Inlining_cost", 28)), 0, 0); Tag3 (("Whether_sufficient_benefit", 560), 0, (Tag1 ([Tag1 (("t", 590), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("middle_end/flambda/inlining_cost.mli", 98, 3772, 3774), ("middle_end/flambda/inlining_cost.mli", 98, 3772, 3780), 0), 0, 0, 0, Tag1 ("Inlining_cost", 29)), 1, 0); (("create", 591), ((Tag1 (("original"), (Tag3 (Tag1 ((Tag2 ("Flambda")), "t"), 0, (0)), 100000000, 0, -170), (Tag1 (("toplevel"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -169), (Tag1 (("branch_depth"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -168), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Flambda")), "t"), 0, (0)), 100000000, 0, -167), (Tag1 (("benefit"), (Tag3 (Tag1 ((("Benefit", 559)), "t"), 0, (0)), 100000000, 0, -166), (Tag1 (("lifting"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -165), (Tag1 (("round"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -164), (Tag3 ((("t", 590)), 0, (0)), 100000000, 0, -163), 0), 100000000, 0, -162), 0), 100000000, 0, -161), 0), 100000000, 0, -160), 0), 100000000, 0, -159), 0), 100000000, 0, -158), 0), 100000000, 0, -157), 0), 100000000, 0, -156), 0, (("middle_end/flambda/inlining_cost.mli", 100, 3782, 3784), ("middle_end/flambda/inlining_cost.mli", 108, 3945, 3953), 0), 0, Tag1 ("Inlining_cost", 30)), 0); (("create_estimate", 592), ((Tag1 (("original_size"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -155), (Tag1 (("toplevel"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -154), (Tag1 (("branch_depth"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -153), (Tag1 (("new_size"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -152), (Tag1 (("benefit"), (Tag3 (Tag1 ((("Benefit", 559)), "t"), 0, (0)), 100000000, 0, -151), (Tag1 (("lifting"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -150), (Tag1 (("round"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -149), (Tag3 ((("t", 590)), 0, (0)), 100000000, 0, -148), 0), 100000000, 0, -147), 0), 100000000, 0, -146), 0), 100000000, 0, -145), 0), 100000000, 0, -144), 0), 100000000, 0, -143), 0), 100000000, 0, -142), 0), 100000000, 0, -141), 0, (("middle_end/flambda/inlining_cost.mli", 110, 3955, 3957), ("middle_end/flambda/inlining_cost.mli", 118, 4130, 4138), 0), 0, Tag1 ("Inlining_cost", 31)), 0); (("evaluate", 593), ((Tag1 (0, (Tag3 ((("t", 590)), 0, (0)), 100000000, 0, -140), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -139), 0), 100000000, 0, -138), 0, (("middle_end/flambda/inlining_cost.mli", 120, 4140, 4142), ("middle_end/flambda/inlining_cost.mli", 120, 4140, 4166), 0), 0, Tag1 ("Inlining_cost", 32)), 0); (("to_string", 594), ((Tag1 (0, (Tag3 ((("t", 590)), 0, (0)), 100000000, 0, -137), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -136), 0), 100000000, 0, -135), 0, (("middle_end/flambda/inlining_cost.mli", 122, 4168, 4170), ("middle_end/flambda/inlining_cost.mli", 122, 4168, 4197), 0), 0, Tag1 ("Inlining_cost", 33)), 0); (("print_description", 595), ((Tag1 (("subfunctions"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -134), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -133), (Tag1 (0, (Tag3 ((("t", 590)), 0, (0)), 100000000, 0, -132), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -131), 0), 100000000, 0, -130), 0), 100000000, 0, -129), 0), 100000000, 0, -128), 0, (("middle_end/flambda/inlining_cost.mli", 124, 4199, 4201), ("middle_end/flambda/inlining_cost.mli", 124, 4199, 4275), 0), 0, Tag1 ("Inlining_cost", 34)), 0)]), 0, (("middle_end/flambda/inlining_cost.mli", 94, 3630, 3630), ("middle_end/flambda/inlining_cost.mli", 125, 4276, 4279), 0), Tag1 ("Inlining_cost", 35)), 0, 0); (("scale_inline_threshold_by", 561), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -16), 0, (("middle_end/flambda/inlining_cost.mli", 127, 4281, 4281), ("middle_end/flambda/inlining_cost.mli", 127, 4281, 4316), 0), 0, Tag1 ("Inlining_cost", 36)), 0); (("default_toplevel_multiplier", 562), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -15), 0, (("middle_end/flambda/inlining_cost.mli", 129, 4318, 4318), ("middle_end/flambda/inlining_cost.mli", 129, 4318, 4355), 0), 0, Tag1 ("Inlining_cost", 37)), 0); (("direct_call_size", 563), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -14), 0, (("middle_end/flambda/inlining_cost.mli", 131, 4357, 4357), ("middle_end/flambda/inlining_cost.mli", 131, 4357, 4383), 0), 0, Tag1 ("Inlining_cost", 38)), 0); (("maximum_interesting_size_of_function_body", 564), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -13), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("middle_end/flambda/inlining_cost.mli", 135, 4506, 4506), ("middle_end/flambda/inlining_cost.mli", 135, 4506, 4564), 0), 0, Tag1 ("Inlining_cost", 39)), 0); (("lambda_smaller'", 565), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Flambda")), "expr"), 0, (0)), 100000000, 0, -10), (Tag1 (("than"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -9), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -8)], (0)), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("middle_end/flambda/inlining_cost.mli", 140, 4767, 4767), ("middle_end/flambda/inlining_cost.mli", 140, 4767, 4827), 0), 0, Tag1 ("Inlining_cost", 40)), 0); (("lambda_size", 566), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Flambda")), "expr"), 0, (0)), 100000000, 0, -4), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("middle_end/flambda/inlining_cost.mli", 142, 4829, 4829), ("middle_end/flambda/inlining_cost.mli", 142, 4829, 4866), 0), 0, Tag1 ("Inlining_cost", 41)), 0)], "Inlining_cost", [("Inlining_cost", ("\201\242\005^\174x14\154\227\239\214\167U\011\134")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Variable", ("\228'\154\1834\146\207\147+\193Aq\209h\190\220")); ("Var_within_closure", ("vQ\173\251u\026\012+}j\020C}T\151\220")); ("Types", ("\177\238\029.\220\006\163!\230\015\006\182\133\155\194\166")); ("Type_immediacy", ("\"\127k\011Q\241\211\138\193;8\142\129\141#\251")); ("Tag", ("\252\157\132\005\195\228\232\133\246\237\233\224\012\143\192\218")); ("Symbol", ("\179q\177\031_\169\139a\192\019\188\000V\236\232\t")); ("Subst", ("\021\031\148\223\127\186\189\135\027}\145r\216\143\177\156")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Static_exception", ("2{#\175\226\185\147\146\176\140\029O\023p\024\\")); ("Shape", ("\235\127Y\213\025\137=\244\218\181\248N\189\188\216p")); ("Set_of_closures_origin", ("$n\234\014\162\130\210K\171\btrA\244\254\195")); ("Set_of_closures_id", ("\178\228\011\028\027~\211\166\244\180\220-W\145_\243")); ("Projection", ("\250\207\030\021*\193\225\168\189!\224\228\192\212\236\224")); ("Primitive", ("}Shh\162\015|\220A\203\249\232\245G\213\019")); ("Path", ("\012\183\178\025\1298\228*\021r\185\160Y\252\n\026")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Parameter", ("*\152\238G\163\217\2377/\t\206\131\226\216K0")); ("Outcometree", ("9\021%\234\211\206\210\004H\165\208\2014\234Q\142")); ("Numbers", ("\004\020\227\212|\031Q6\146\217\211\156\221\234\254\195")); ("Mutable_variable", ("B^*^9`\212\152j\145_\017i.\128?")); ("Misc", ("*\026\026\234c\191\131\161\\\203\183\012O\252\153\198")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Load_path", ("\012@\228l\230\164S\172h\1726X\020\252o}")); ("Linkage_name", ("\023\000\172\166 s\214\ns\155s\156\005\252\154\207")); ("Lambda", ("\180\1419\236'\146K$\128\006\135q\135V\029\180")); ("Internal_variable_names", ("\024|\208(\224\206\012\006\179\203\020\000\179\228\154\218")); ("Identifiable", ("\004F\207\014\158GU\001\184\214\187%/#;\211")); ("Ident", ("\b9;!\187.\220\163(x\b\174\\\223\020\004")); ("Flambda", ("\195J|\022>U\206!\211\212\185N\180zh\241")); ("Env", ("\021\n\181\142x\b\169j\227\"\017\248*\178\245\223")); ("Debuginfo", ("\131\251\175\217P\194M\163\022\151\002\005\006\185:\185")); ("Compilation_unit", ("\007\240\020\003jK\000\210\174\021\189.8^\028K")); ("Cmi_format", ("6\177\bU\139\"\023\152=\249\135\174\b\011Cg")); ("Closure_origin", ("G\222\200`\213\247\022M|O\1488\194\030\187\229")); ("Closure_id", ("k\221yCH\015\186G\246]\003\233\198\179\217A")); ("Closure_element", ("a\194\018\239D1\143{\156A\011\219H#\149A")); ("Clambda_primitives", ("\199\176\237Hv\205\152\14717\179\017\246\221x`")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Build_path_prefix_map", ("y\028\167\207D\220\198\216\011\208\172\149\2416\bc")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216")); ("Allocated_const", ("\029\027.W\160\170!\199Q2\235\240\167\031,\004"))], [(0)])
val lambda_size : Flambda.expr -> int

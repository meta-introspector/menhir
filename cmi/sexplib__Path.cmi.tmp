type el = Pos of int | Match of string * int | Rec of string
type t = el list
val parse : string -> t
val get : ?path:t -> ?str:string -> Sexplib.Sexp.t -> Sexplib.Sexp.t
val replace :
  ?path:t ->
  ?str:string -> Sexplib.Sexp.t -> subst:Sexplib.Sexp.t -> Sexplib.Sexp.t
val replace_no_path :
  str:string -> Sexplib.Sexp.t -> subst:Sexplib.Sexp.t -> Sexplib.Sexp.t
val subst_path :
  Sexplib.Sexp.t -> t -> (Sexplib.Sexp.t -> Sexplib.Sexp.t) * Sexplib.Sexp.t
val extract_pos :
  int ->
  Sexplib.Sexp.t ->
  (Sexplib.Sexp.t option -> Sexplib.Sexp.t) * Sexplib.Sexp.t
val extract_match :
  string ->
  int ->
  Sexplib.Sexp.t ->
  (Sexplib.Sexp.t option -> Sexplib.Sexp.t) * Sexplib.Sexp.t
val extract_rec :
  string ->
  ("DEBUG:rule", [Tag1 (("el", 372), (0, 0, Tag1 ([(("Pos", 287), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -74)]), 0, (("src/path.mli", 7, 125, 127), ("src/path.mli", 7, 125, 139), 0), 0, Tag1 ("Sexplib__Path", 1)); (("Match", 288), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -75); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -76)]), 0, (("src/path.mli", 8, 188, 190), ("src/path.mli", 8, 188, 213), 0), 0, Tag1 ("Sexplib__Path", 2)); (("Rec", 289), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -77)]), 0, (("src/path.mli", 10, 285, 287), ("src/path.mli", 10, 285, 302), 0), 0, Tag1 ("Sexplib__Path", 3))], 0), 1, 0, 0, 0, 0, 0, (("src/path.mli", 6, 115, 115), ("src/path.mli", 10, 285, 302), 0), 0, 0, 0, Tag1 ("Sexplib__Path", 0)), 1, 0); Tag1 (("t", 373), (0, 0, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("el", 372)), 0, (0)), 100000000, 0, -73)], (0)), 100000000, 0, -72)), 0, 0, 0, 0, (("src/path.mli", 13, 395, 395), ("src/path.mli", 13, 395, 411), 0), 0, 0, 0, Tag1 ("Sexplib__Path", 4)), 1, 0); (("parse", 374), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -71), (Tag3 ((("t", 373)), 0, (0)), 100000000, 0, -70), 0), 100000000, 0, -69), 0, (("src/path.mli", 41, 1038, 1038), ("src/path.mli", 41, 1038, 1061), 0), 0, Tag1 ("Sexplib__Path", 5)), 0); (("get", 375), ((Tag1 (Tag1 ("path"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 373)), 0, (0)), 100000000, 0, -68)], (0)), 100000000, 0, -67), (Tag1 (Tag1 ("str"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -66)], (0)), 100000000, 0, -65), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -64), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -63), 0), 100000000, 0, -62), 0), 100000000, 0, -61), 0), 100000000, 0, -60), 0, (("src/path.mli", 51, 1439, 1439), ("src/path.mli", 51, 1439, 1491), 0), 0, Tag1 ("Sexplib__Path", 6)), 0); (("replace", 376), ((Tag1 (Tag1 ("path"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 373)), 0, (0)), 100000000, 0, -59)], (0)), 100000000, 0, -58), (Tag1 (Tag1 ("str"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -57)], (0)), 100000000, 0, -56), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -55), (Tag1 (("subst"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -54), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -53), 0), 100000000, 0, -52), 0), 100000000, 0, -51), 0), 100000000, 0, -50), 0), 100000000, 0, -49), 0, (("src/path.mli", 60, 1779, 1779), ("src/path.mli", 60, 1779, 1851), 0), 0, Tag1 ("Sexplib__Path", 7)), 0); (("replace_no_path", 377), ((Tag1 (("str"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -48), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -47), (Tag1 (("subst"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -46), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -45), 0), 100000000, 0, -44), 0), 100000000, 0, -43), 0), 100000000, 0, -42), 0, (("src/path.mli", 68, 2101, 2101), ("src/path.mli", 68, 2101, 2169), 0), 0, Tag1 ("Sexplib__Path", 8)), 0); (("subst_path", 378), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -41), (Tag1 (0, (Tag3 ((("t", 373)), 0, (0)), 100000000, 0, -40), (Tag2 ([(Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -38), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -37), 0), 100000000, 0, -36); (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -39)]), 100000000, 0, -35), 0), 100000000, 0, -34), 0), 100000000, 0, -33), 0, (("src/path.mli", 78, 2586, 2586), ("src/path.mli", 78, 2586, 2645), 0), 0, Tag1 ("Sexplib__Path", 9)), 0); (("extract_pos", 379), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -32), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -31), (Tag2 ([(Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -29)], (0)), 100000000, 0, -28), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -27), 0), 100000000, 0, -26); (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -30)]), 100000000, 0, -25), 0), 100000000, 0, -24), 0), 100000000, 0, -23), 0, (("src/path.mli", 93, 3217, 3217), ("src/path.mli", 93, 3217, 3286), 0), 0, Tag1 ("Sexplib__Path", 10)), 0); (("extract_match", 380), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -22), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -21), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -20), (Tag2 ([(Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -18)], (0)), 100000000, 0, -17), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -16), 0), 100000000, 0, -15); (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -19)]), 100000000, 0, -14), 0), 100000000, 0, -13), 0), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("src/path.mli", 105, 3813, 3813), ("src/path.mli", 105, 3813, 3894), 0), 0, Tag1 ("Sexplib__Path", 11)), 0); (("extract_rec", 381), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -9), (Tag2 ([(Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -7), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -6), 0), 100000000, 0, -5); (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Sexp"), "t"), 0, (0)), 100000000, 0, -8)]), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/path.mli", 115, 4290, 4290), ("src/path.mli", 115, 4290, 4355), 0), 0, Tag1 ("Sexplib__Path", 12)), 0)], "Sexplib__Path", [("Sexplib__Path", (":6\225\158\023\011\182\007\t\191\136v\"(b\148")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Random", ("\020\005Xq\171\026\218\152X\135\254\023\133zK\200")); ("Stdlib__Printf", ("\215<\139]\021\142\224E\245m\198qc(W\229")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Bytes", ("C\134\194)\175\222\137p\205\246\244\r\241\164P\209")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sexplib__Type_with_layout", ("Q\170\019\238\156\246\192\156\b`\250o[6g\024")); ("Sexplib__Type", ("\147\252\252\167_\149\137\235\001d\241\255`\173Cs")); ("Sexplib__Src_pos", ("\157\022\246\144K\127\174bk\214\128&E\nh\213")); ("Sexplib__Sexp_intf", ("\\\031Fc\157\000\226\253\208\151\241\218a\195\187w")); ("Sexplib__Sexp", ("b\191\237;\251D\001\027M=x\201\143\185:d")); ("Sexplib__Pre_sexp", ("))\b\146\225\144^\227\218\181;f\220\tA\006")); ("Sexplib__Parser_with_layout", ("W\155\134\171aBJ\251|G6\192'S\210<")); ("Sexplib__Parser", ("\203&3\188\178\148:\254\176\140\127\227\029jQL")); ("Sexplib__Lexer", ("M\181eW\204\2193X\225\170yM\228!\146s")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("Sexplib", ("\249\031\145\178\014\020\n\209\129\143\012\015<K\177\189")); ("Parsexp__Positions", ("BE\135\222xW\224\233\184\004o\169\248\bH\230")); ("Parsexp__Parsexp_intf", ("\006\239e\204\167\243e2&\192H\160\029XNm")); ("Parsexp__Parser_intf", ("\154\197J\002\004\252i\162\190\241\151\210\157\024\167e")); ("Parsexp__Parser", ("n\164F;=\199\178\019\150]\2502\176\014a\165")); ("Parsexp__Parse_error_intf", ("\011\229\182\179W\161\176\160P\249\165\214ef\011\229")); ("Parsexp__Parse_error", ("*\031\166\142M\171\026\030\\K7\157Y\232\208\234")); ("Parsexp__Old_parser_cont_state", ("\2535&90\136_\154\027}Oc0\138%X")); ("Parsexp__Of_sexp_error", ("\253\171Y\150\210\218\191\255\160\211\134d/l\132\228")); ("Parsexp__Import", ("\017\029\157\225\239\135p*0\207\146\197\020\128\195!")); ("Parsexp__Cst", (")\228;6o~\227\000pRf\153\216\244sD")); ("Parsexp__Conv_intf", ("\004r\193,k\2254\168\149\229+hmw\134\228")); ("Parsexp__Conv_error", ("\195Bo\140A|\220\136\210\137\165&!\164\134\021")); ("Parsexp__Conv", ("\238|^\141\226\177\185\022$*\023\188\020\002P\229")); ("Parsexp__Automaton_state_intf", ("\196\146]2\143u|+%\027\185v2\225\r\229")); ("Parsexp__Automaton_state", ("L#\030=\218R\022 \228<\188-\r\211\157_")); ("Parsexp__Automaton_stack_intf", ("\235\204\0296]\2449F\029\b:\006\217\162f\024")); ("Parsexp__Automaton_stack", ("\246/\135\251\031)\015r\003\237\254S$\181\243\201")); ("Parsexp__", ("\182\180\203\030\218\020\246\196\221\171_\030GE\171\192")); ("Parsexp", ("\023d\176\173 \b\181o\028\163R\205\005\226BE")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
Sexplib.Sexp.t -> (Sexplib.Sexp.t -> Sexplib.Sexp.t) * Sexplib.Sexp.t

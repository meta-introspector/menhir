type regexp
val chars : Sedlex_ppx.Sedlex_cset.t -> regexp
val seq : regexp -> regexp -> regexp
val alt : regexp -> regexp -> regexp
val rep : regexp -> regexp
val plus : regexp -> regexp
val eps : regexp
val compl : regexp -> regexp option
val subtract : regexp -> regexp -> regexp option
val intersection : regexp -> regexp -> regexp option
val compile :
  ("DEBUG:rule", [Tag1 (("regexp", 300), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/syntax/sedlex.mli", 5, 232, 232), ("src/syntax/sedlex.mli", 5, 232, 243), 0), 0, 0, 0, Tag1 ("Sedlex_ppx__Sedlex", 0)), 1, 0); (("chars", 301), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sedlex_ppx")), "Sedlex_cset"), "t"), 0, (0)), 100000000, 0, -48), (Tag3 ((("regexp", 300)), 0, (0)), 100000000, 0, -47), 0), 100000000, 0, -46), 0, (("src/syntax/sedlex.mli", 7, 245, 245), ("src/syntax/sedlex.mli", 7, 245, 280), 0), 0, Tag1 ("Sedlex_ppx__Sedlex", 1)), 0); (("seq", 302), ((Tag1 (0, (Tag3 ((("regexp", 300)), 0, (0)), 100000000, 0, -45), (Tag1 (0, (Tag3 ((("regexp", 300)), 0, (0)), 100000000, 0, -44), (Tag3 ((("regexp", 300)), 0, (0)), 100000000, 0, -43), 0), 100000000, 0, -42), 0), 100000000, 0, -41), 0, (("src/syntax/sedlex.mli", 8, 281, 281), ("src/syntax/sedlex.mli", 8, 281, 317), 0), 0, Tag1 ("Sedlex_ppx__Sedlex", 2)), 0); (("alt", 303), ((Tag1 (0, (Tag3 ((("regexp", 300)), 0, (0)), 100000000, 0, -40), (Tag1 (0, (Tag3 ((("regexp", 300)), 0, (0)), 100000000, 0, -39), (Tag3 ((("regexp", 300)), 0, (0)), 100000000, 0, -38), 0), 100000000, 0, -37), 0), 100000000, 0, -36), 0, (("src/syntax/sedlex.mli", 9, 318, 318), ("src/syntax/sedlex.mli", 9, 318, 354), 0), 0, Tag1 ("Sedlex_ppx__Sedlex", 3)), 0); (("rep", 304), ((Tag1 (0, (Tag3 ((("regexp", 300)), 0, (0)), 100000000, 0, -35), (Tag3 ((("regexp", 300)), 0, (0)), 100000000, 0, -34), 0), 100000000, 0, -33), 0, (("src/syntax/sedlex.mli", 10, 355, 355), ("src/syntax/sedlex.mli", 10, 355, 381), 0), 0, Tag1 ("Sedlex_ppx__Sedlex", 4)), 0); (("plus", 305), ((Tag1 (0, (Tag3 ((("regexp", 300)), 0, (0)), 100000000, 0, -32), (Tag3 ((("regexp", 300)), 0, (0)), 100000000, 0, -31), 0), 100000000, 0, -30), 0, (("src/syntax/sedlex.mli", 11, 382, 382), ("src/syntax/sedlex.mli", 11, 382, 409), 0), 0, Tag1 ("Sedlex_ppx__Sedlex", 5)), 0); (("eps", 306), ((Tag3 ((("regexp", 300)), 0, (0)), 100000000, 0, -29), 0, (("src/syntax/sedlex.mli", 12, 410, 410), ("src/syntax/sedlex.mli", 12, 410, 426), 0), 0, Tag1 ("Sedlex_ppx__Sedlex", 6)), 0); (("compl", 307), ((Tag1 (0, (Tag3 ((("regexp", 300)), 0, (0)), 100000000, 0, -28), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("regexp", 300)), 0, (0)), 100000000, 0, -27)], (0)), 100000000, 0, -26), 0), 100000000, 0, -25), 0, (("src/syntax/sedlex.mli", 13, 427, 427), ("src/syntax/sedlex.mli", 13, 427, 462), 0), 0, Tag1 ("Sedlex_ppx__Sedlex", 7)), 0); (("subtract", 308), ((Tag1 (0, (Tag3 ((("regexp", 300)), 0, (0)), 100000000, 0, -24), (Tag1 (0, (Tag3 ((("regexp", 300)), 0, (0)), 100000000, 0, -23), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("regexp", 300)), 0, (0)), 100000000, 0, -22)], (0)), 100000000, 0, -21), 0), 100000000, 0, -20), 0), 100000000, 0, -19), 0, (("src/syntax/sedlex.mli", 17, 595, 595), ("src/syntax/sedlex.mli", 17, 595, 643), 0), 0, Tag1 ("Sedlex_ppx__Sedlex", 8)), 0); (("intersection", 309), ((Tag1 (0, (Tag3 ((("regexp", 300)), 0, (0)), 100000000, 0, -18), (Tag1 (0, (Tag3 ((("regexp", 300)), 0, (0)), 100000000, 0, -17), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("regexp", 300)), 0, (0)), 100000000, 0, -16)], (0)), 100000000, 0, -15), 0), 100000000, 0, -14), 0), 100000000, 0, -13), 0, (("src/syntax/sedlex.mli", 21, 780, 780), ("src/syntax/sedlex.mli", 21, 780, 832), 0), 0, Tag1 ("Sedlex_ppx__Sedlex", 9)), 0); (("compile", 310), ((Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("regexp", 300)), 0, (0)), 100000000, 0, -12)], (0)), 100000000, 0, -11), (Tag3 ((Tag3 ("array", 8)), [(Tag2 ([(Tag3 ((Tag3 ("array", 8)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Sedlex_ppx")), "Sedlex_cset"), "t"), 0, (0)), 100000000, 0, -7); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -8)]), 100000000, 0, -6)], (0)), 100000000, 0, -5); (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -10)], (0)), 100000000, 0, -9)]), 100000000, 0, -4)], (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/syntax/sedlex.mli", 25, 968, 968), ("src/syntax/sedlex.mli", 25, 968, 1046), 0), 0, Tag1 ("Sedlex_ppx__Sedlex", 10)), 0)], "Sedlex_ppx__Sedlex", [("Sedlex_ppx__Sedlex", ("\233\248l\151r\151|\188DG\136\197\244Ga\207")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sedlex_utils__Cset", ("}d\168\131\017;\022\025jEk\164\007\219ht")); ("Sedlex_utils", ("J\240\251\142\216Q\237\167\022\002\162)L\1931\176")); ("Sedlex_ppx__Sedlex_cset", ("\006\246\224\163\161\245\146\012V\215\019\145\229J\228\190")); ("Sedlex_ppx", ("S\002c1\1701\027\154\142\163\005=\255\1750\019")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
regexp array -> ((Sedlex_ppx.Sedlex_cset.t * int) array * bool array) array

val is_function_type :
  Env.t -> Types.type_expr -> (Types.type_expr * Types.type_expr) option
val is_base_type : Env.t -> Types.type_expr -> Path.t -> bool
val maybe_pointer_type :
  Env.t -> Types.type_expr -> Lambda.immediate_or_pointer
val maybe_pointer : Typedtree.expression -> Lambda.immediate_or_pointer
val array_type_kind : Env.t -> Types.type_expr -> Lambda.array_kind
val array_kind : Typedtree.expression -> Lambda.array_kind
val array_pattern_kind : Typedtree.pattern -> Lambda.array_kind
val bigarray_type_kind_and_layout :
  Env.t -> Types.type_expr -> Lambda.bigarray_kind * Lambda.bigarray_layout
val value_kind : Env.t -> Types.type_expr -> Lambda.value_kind
val function_return_value_kind :
  Env.t -> Types.type_expr -> Lambda.value_kind
val classify_lazy_argument :
  Typedtree.expression ->
  [ `Constant_or_function
  | `Float_that_cannot_be_shortcut
  | `Identifier of [ `Forward_value | `Other ]
  | `Other ]
val value_kind_union :
  ("DEBUG:rule", [(("is_function_type", 749), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -63), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -62), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -60); (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -61)]), 100000000, 0, -59)], (0)), 100000000, 0, -58), 0), 100000000, 0, -57), 0), 100000000, 0, -56), 0, (("typing/typeopt.mli", 18, 1145, 1145), ("typing/typeopt.mli", 19, 1168, 1244), 0), 0, Tag1 ("Typeopt", 1)), 0); (("is_base_type", 750), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -55), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -54), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Path")), "t"), 0, (0)), 100000000, 0, -53), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -52), 0), 100000000, 0, -51), 0), 100000000, 0, -50), 0), 100000000, 0, -49), 0, (("typing/typeopt.mli", 20, 1245, 1245), ("typing/typeopt.mli", 20, 1245, 1306), 0), 0, Tag1 ("Typeopt", 2)), 0); (("maybe_pointer_type", 751), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -48), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -47), (Tag3 (Tag1 ((Tag2 ("Lambda")), "immediate_or_pointer"), 0, (0)), 100000000, 0, -46), 0), 100000000, 0, -45), 0), 100000000, 0, -44), 0, (("typing/typeopt.mli", 22, 1308, 1308), ("typing/typeopt.mli", 23, 1358, 1390), 0), 0, Tag1 ("Typeopt", 6)), 0); (("maybe_pointer", 752), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "expression"), 0, (0)), 100000000, 0, -43), (Tag3 (Tag1 ((Tag2 ("Lambda")), "immediate_or_pointer"), 0, (0)), 100000000, 0, -42), 0), 100000000, 0, -41), 0, (("typing/typeopt.mli", 24, 1391, 1391), ("typing/typeopt.mli", 24, 1391, 1462), 0), 0, Tag1 ("Typeopt", 10)), 0); (("array_type_kind", 753), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -40), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -39), (Tag3 (Tag1 ((Tag2 ("Lambda")), "array_kind"), 0, (0)), 100000000, 0, -38), 0), 100000000, 0, -37), 0), 100000000, 0, -36), 0, (("typing/typeopt.mli", 26, 1464, 1464), ("typing/typeopt.mli", 26, 1464, 1531), 0), 0, Tag1 ("Typeopt", 11)), 0); (("array_kind", 754), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "expression"), 0, (0)), 100000000, 0, -35), (Tag3 (Tag1 ((Tag2 ("Lambda")), "array_kind"), 0, (0)), 100000000, 0, -34), 0), 100000000, 0, -33), 0, (("typing/typeopt.mli", 27, 1532, 1532), ("typing/typeopt.mli", 27, 1532, 1590), 0), 0, Tag1 ("Typeopt", 12)), 0); (("array_pattern_kind", 755), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -32), (Tag3 (Tag1 ((Tag2 ("Lambda")), "array_kind"), 0, (0)), 100000000, 0, -31), 0), 100000000, 0, -30), 0, (("typing/typeopt.mli", 28, 1591, 1591), ("typing/typeopt.mli", 28, 1591, 1654), 0), 0, Tag1 ("Typeopt", 13)), 0); (("bigarray_type_kind_and_layout", 756), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -29), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -28), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Lambda")), "bigarray_kind"), 0, (0)), 100000000, 0, -26); (Tag3 (Tag1 ((Tag2 ("Lambda")), "bigarray_layout"), 0, (0)), 100000000, 0, -27)]), 100000000, 0, -25), 0), 100000000, 0, -24), 0), 100000000, 0, -23), 0, (("typing/typeopt.mli", 29, 1655, 1655), ("typing/typeopt.mli", 30, 1691, 1770), 0), 0, Tag1 ("Typeopt", 14)), 0); (("value_kind", 757), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -22), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -21), (Tag3 (Tag1 ((Tag2 ("Lambda")), "value_kind"), 0, (0)), 100000000, 0, -20), 0), 100000000, 0, -19), 0), 100000000, 0, -18), 0, (("typing/typeopt.mli", 31, 1771, 1771), ("typing/typeopt.mli", 31, 1771, 1833), 0), 0, Tag1 ("Typeopt", 15)), 0); (("function_return_value_kind", 758), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -17), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -16), (Tag3 (Tag1 ((Tag2 ("Lambda")), "value_kind"), 0, (0)), 100000000, 0, -15), 0), 100000000, 0, -14), 0), 100000000, 0, -13), 0, (("typing/typeopt.mli", 32, 1834, 1834), ("typing/typeopt.mli", 32, 1834, 1912), 0), 0, Tag1 ("Typeopt", 16)), 0); (("classify_lazy_argument", 759), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "expression"), 0, (0)), 100000000, 0, -12), (Tag8 (([("Constant_or_function", (0)); ("Float_that_cannot_be_shortcut", (0)); ("Identifier", (((Tag8 (([("Forward_value", (0)); ("Other", (0))], (0, 100000000, 0, -11), 1, 0, 0)), 100000000, 0, -10)))); ("Other", (0))], (0, 100000000, 0, -9), 1, 0, 0)), 100000000, 0, -8), 0), 100000000, 0, -7), 0, (("typing/typeopt.mli", 34, 1914, 1914), ("typing/typeopt.mli", 38, 2154, 2192), 0), 0, Tag1 ("Typeopt", 17)), 0); (("value_kind_union", 760), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Lambda")), "value_kind"), 0, (0)), 100000000, 0, -6), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Lambda")), "value_kind"), 0, (0)), 100000000, 0, -5), (Tag3 (Tag1 ((Tag2 ("Lambda")), "value_kind"), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("typing/typeopt.mli", 40, 2194, 2194), ("typing/typeopt.mli", 41, 2217, 2282), 0), 0, Tag1 ("Typeopt", 18)), 0)], "Typeopt", [("Typeopt", ("\204n(~\253\238\161\\@\184Y\205\2437\197\211")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Types", ("\177\238\029.\220\006\163!\230\015\006\182\133\155\194\166")); ("Typedtree", ("c5z\186\175w\146\254\018V\184\031\0038\004\227")); ("Type_immediacy", ("\"\127k\011Q\241\211\138\193;8\142\129\141#\251")); ("Subst", ("\021\031\148\223\127\186\189\135\027}\145r\216\143\177\156")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shape", ("\235\127Y\213\025\137=\244\218\181\248N\189\188\216p")); ("Primitive", ("}Shh\162\015|\220A\203\249\232\245G\213\019")); ("Path", ("\012\183\178\025\1298\228*\021r\185\160Y\252\n\026")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Outcometree", ("9\021%\234\211\206\210\004H\165\208\2014\234Q\142")); ("Misc", ("*\026\026\234c\191\131\161\\\203\183\012O\252\153\198")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Load_path", ("\012@\228l\230\164S\172h\1726X\020\252o}")); ("Lambda", ("\180\1419\236'\146K$\128\006\135q\135V\029\180")); ("Identifiable", ("\004F\207\014\158GU\001\184\214\187%/#;\211")); ("Ident", ("\b9;!\187.\220\163(x\b\174\\\223\020\004")); ("Env", ("\021\n\181\142x\b\169j\227\"\017\248*\178\245\223")); ("Debuginfo", ("\131\251\175\217P\194M\163\022\151\002\005\006\185:\185")); ("Cmi_format", ("6\177\bU\139\"\023\152=\249\135\174\b\011Cg")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Build_path_prefix_map", ("y\028\167\207D\220\198\216\011\208\172\149\2416\bc")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216"))], [(0)])
Lambda.value_kind -> Lambda.value_kind -> Lambda.value_kind

type pconstant = Names.Constant.t Univ.puniverses
type pinductive = Names.inductive Univ.puniverses
type pconstructor = Names.constructor Univ.puniverses
type metavariable = int
type case_style =
    LetStyle
  | IfStyle
  | LetPatternStyle
  | MatchStyle
  | RegularStyle
type case_printing = {
  ind_tags : bool list;
  cstr_tags : bool list array;
  style : case_style;
}
type case_info = {
  ci_ind : Names.inductive;
  ci_npar : int;
  ci_cstr_ndecls : int array;
  ci_cstr_nargs : int array;
  ci_relevance : Sorts.relevance;
  ci_pp_info : case_printing;
}
type 'constr pcase_invert =
    NoInvert
  | CaseInvert of { indices : 'constr array; }
type t
type constr = t
type types = constr
val mkRel : int -> constr
val mkVar : Names.Id.t -> constr
val mkInt : Uint63.t -> constr
val mkArray : Univ.Instance.t * constr array * constr * types -> constr
val mkFloat : Float64.t -> constr
val mkMeta : metavariable -> constr
type existential = Evar.t * constr SList.t
val mkEvar : existential -> constr
val mkSort : Sorts.t -> types
val mkSProp : types
val mkProp : types
val mkSet : types
val mkType : Univ.Universe.t -> types
type cast_kind = VMcast | NATIVEcast | DEFAULTcast
val mkCast : constr * cast_kind * constr -> constr
val mkProd : Names.Name.t Context.binder_annot * types * types -> types
val mkLambda : Names.Name.t Context.binder_annot * types * constr -> constr
val mkLetIn :
  Names.Name.t Context.binder_annot * constr * types * constr -> constr
val mkApp : constr * constr array -> constr
val map_puniverses : ('a -> 'b) -> 'a Univ.puniverses -> 'b Univ.puniverses
val mkConstU : pconstant -> constr
val mkProj : Names.Projection.t * constr -> constr
val mkIndU : pinductive -> constr
val mkConstructU : pconstructor -> constr
val mkConstructUi : pinductive * int -> constr
val mkRef : Names.GlobRef.t Univ.puniverses -> constr
module UnsafeMonomorphic :
  sig
    val mkConst : Names.Constant.t -> constr
    val mkInd : Names.inductive -> constr
    val mkConstruct : Names.constructor -> constr
  end
type 'constr pcase_branch = Names.Name.t Context.binder_annot array * 'constr
type 'types pcase_return = Names.Name.t Context.binder_annot array * 'types
type ('constr, 'types, 'univs) pcase =
    case_info * 'univs * 'constr array * 'types pcase_return *
    'constr pcase_invert * 'constr * 'constr pcase_branch array
type case_invert = constr pcase_invert
type case_return = types pcase_return
type case_branch = constr pcase_branch
type case = (constr, types, Univ.Instance.t) pcase
val mkCase : case -> constr
type ('constr, 'types) prec_declaration =
    Names.Name.t Context.binder_annot array * 'types array * 'constr array
type ('constr, 'types) pfixpoint =
    (int array * int) * ('constr, 'types) prec_declaration
type ('constr, 'types) pcofixpoint = int * ('constr, 'types) prec_declaration
type rec_declaration = (constr, types) prec_declaration
type fixpoint = (constr, types) pfixpoint
val mkFix : fixpoint -> constr
type cofixpoint = (constr, types) pcofixpoint
val mkCoFix : cofixpoint -> constr
type 'constr pexistential = Evar.t * 'constr SList.t
type ('constr, 'types, 'sort, 'univs) kind_of_term =
    Rel of int
  | Var of Names.Id.t
  | Meta of metavariable
  | Evar of 'constr pexistential
  | Sort of 'sort
  | Cast of 'constr * cast_kind * 'types
  | Prod of Names.Name.t Context.binder_annot * 'types * 'types
  | Lambda of Names.Name.t Context.binder_annot * 'types * 'constr
  | LetIn of Names.Name.t Context.binder_annot * 'constr * 'types * 'constr
  | App of 'constr * 'constr array
  | Const of (Names.Constant.t * 'univs)
  | Ind of (Names.inductive * 'univs)
  | Construct of (Names.constructor * 'univs)
  | Case of case_info * 'univs * 'constr array * 'types pcase_return *
      'constr pcase_invert * 'constr * 'constr pcase_branch array
  | Fix of ('constr, 'types) pfixpoint
  | CoFix of ('constr, 'types) pcofixpoint
  | Proj of Names.Projection.t * 'constr
  | Int of Uint63.t
  | Float of Float64.t
  | Array of 'univs * 'constr array * 'constr * 'types
val kind : constr -> (constr, types, Sorts.t, Univ.Instance.t) kind_of_term
val of_kind :
  (constr, types, Sorts.t, Univ.Instance.t) kind_of_term -> constr
val kind_nocast_gen :
  ('v -> ('v, 'v, 'sort, 'univs) kind_of_term) ->
  'v -> ('v, 'v, 'sort, 'univs) kind_of_term
val kind_nocast :
  constr -> (constr, types, Sorts.t, Univ.Instance.t) kind_of_term
val isRel : constr -> bool
val isRelN : int -> constr -> bool
val isVar : constr -> bool
val isVarId : Names.Id.t -> constr -> bool
val isRef : constr -> bool
val isRefX : Names.GlobRef.t -> constr -> bool
val isInd : constr -> bool
val isEvar : constr -> bool
val isMeta : constr -> bool
val isEvar_or_Meta : constr -> bool
val isSort : constr -> bool
val isCast : constr -> bool
val isApp : constr -> bool
val isLambda : constr -> bool
val isLetIn : constr -> bool
val isProd : constr -> bool
val isConst : constr -> bool
val isConstruct : constr -> bool
val isFix : constr -> bool
val isCoFix : constr -> bool
val isCase : constr -> bool
val isProj : constr -> bool
val is_Prop : constr -> bool
val is_Set : constr -> bool
val isprop : constr -> bool
val is_Type : constr -> bool
val iskind : constr -> bool
val is_small : Sorts.t -> bool
exception DestKO
val destRel : constr -> int
val destMeta : constr -> metavariable
val destVar : constr -> Names.Id.t
val destSort : constr -> Sorts.t
val destCast : constr -> constr * cast_kind * constr
val destProd : types -> Names.Name.t Context.binder_annot * types * types
val destLambda : constr -> Names.Name.t Context.binder_annot * types * constr
val destLetIn :
  constr -> Names.Name.t Context.binder_annot * constr * types * constr
val destApp : constr -> constr * constr array
val decompose_app_list : constr -> constr * constr list
val decompose_app : constr -> constr * constr array
val destConst : constr -> Names.Constant.t Univ.puniverses
val destEvar : constr -> existential
val destInd : constr -> Names.inductive Univ.puniverses
val destConstruct : constr -> Names.constructor Univ.puniverses
val destCase : constr -> case
val destProj : constr -> Names.Projection.t * constr
val destFix : constr -> fixpoint
val destCoFix : constr -> cofixpoint
val destRef : constr -> Names.GlobRef.t Univ.puniverses
val equal : constr -> constr -> bool
val eq_constr_univs : constr UGraph.check_function
val leq_constr_univs : constr UGraph.check_function
val eq_constr_nounivs : constr -> constr -> bool
val compare : constr -> constr -> int
type rel_declaration = (constr, types) Context.Rel.Declaration.pt
type named_declaration = (constr, types) Context.Named.Declaration.pt
type compacted_declaration = (constr, types) Context.Compacted.Declaration.pt
type rel_context = rel_declaration list
type named_context = named_declaration list
type compacted_context = compacted_declaration list
val exliftn : Esubst.lift -> constr -> constr
val liftn : int -> int -> constr -> constr
val lift : int -> constr -> constr
val map_branches :
  (constr -> constr) -> case_branch array -> case_branch array
val map_return_predicate : (constr -> constr) -> case_return -> case_return
val map_branches_with_binders :
  ('a -> 'a) ->
  ('a -> constr -> constr) -> 'a -> case_branch array -> case_branch array
val map_return_predicate_with_binders :
  ('a -> 'a) -> ('a -> constr -> constr) -> 'a -> case_return -> case_return
val fold : ('a -> constr -> 'a) -> 'a -> constr -> 'a
val fold_invert : ('a -> 'b -> 'a) -> 'a -> 'b pcase_invert -> 'a
val map : (constr -> constr) -> constr -> constr
val map_invert : ('a -> 'a) -> 'a pcase_invert -> 'a pcase_invert
val fold_map : ('a -> constr -> 'a * constr) -> 'a -> constr -> 'a * constr
val fold_map_invert :
  ('a -> 'b -> 'a * 'b) -> 'a -> 'b pcase_invert -> 'a * 'b pcase_invert
val map_with_binders :
  ('a -> 'a) -> ('a -> constr -> constr) -> 'a -> constr -> constr
val iter : (constr -> unit) -> constr -> unit
val iter_invert : ('a -> unit) -> 'a pcase_invert -> unit
val iter_with_binders :
  ('a -> 'a) -> ('a -> constr -> unit) -> 'a -> constr -> unit
val fold_constr_with_binders :
  ('a -> 'a) -> ('a -> 'b -> constr -> 'b) -> 'a -> 'b -> constr -> 'b
type 'constr constr_compare_fn = int -> 'constr -> 'constr -> bool
val compare_head :
  (existential -> existential -> bool) ->
  constr constr_compare_fn -> constr constr_compare_fn
type 'univs instance_compare_fn =
    (Names.GlobRef.t * int) option -> 'univs -> 'univs -> bool
val compare_head_gen :
  Univ.Instance.t instance_compare_fn ->
  (Sorts.t -> Sorts.t -> bool) ->
  (existential -> existential -> bool) ->
  constr constr_compare_fn -> constr constr_compare_fn
val compare_head_gen_leq_with :
  ('v -> ('v, 'v, 'sort, 'univs) kind_of_term) ->
  ('v -> ('v, 'v, 'sort, 'univs) kind_of_term) ->
  'univs instance_compare_fn ->
  ('sort -> 'sort -> bool) ->
  ('v pexistential -> 'v pexistential -> bool) ->
  'v constr_compare_fn -> 'v constr_compare_fn -> 'v constr_compare_fn
val compare_head_gen_with :
  ('v -> ('v, 'v, 'sort, 'univs) kind_of_term) ->
  ('v -> ('v, 'v, 'sort, 'univs) kind_of_term) ->
  'univs instance_compare_fn ->
  ('sort -> 'sort -> bool) ->
  ('v pexistential -> 'v pexistential -> bool) ->
  'v constr_compare_fn -> 'v constr_compare_fn
val compare_head_gen_leq :
  Univ.Instance.t instance_compare_fn ->
  (Sorts.t -> Sorts.t -> bool) ->
  (existential -> existential -> bool) ->
  constr constr_compare_fn ->
  constr constr_compare_fn -> constr constr_compare_fn
val eq_invert :
  ('a -> 'a -> bool) -> 'a pcase_invert -> 'a pcase_invert -> bool
type 'a evar_expansion =
    EvarDefined of 'a
  | EvarUndefined of Evar.t * 'a list
type 'constr evar_handler = {
  evar_expand : 'constr pexistential -> 'constr evar_expansion;
  evar_repack : Evar.t * 'constr list -> 'constr;
  evar_relevant : 'constr pexistential -> bool;
  qvar_relevant : Sorts.QVar.t -> bool;
}
val default_evar_handler : 'constr evar_handler
val hash : constr -> int
val case_info_hash : case_info -> int
val hcons : constr -> constr
val debug_print : constr -> Pp.t
val debug_print_fix : ('a -> Pp.t) -> ('a, 'a) pfixpoint -> Pp.t
val mkConst : Names.Constant.t -> constr
val mkInd : Names.inductive -> constr
("DEBUG:rule", [Tag1 (("pconstant", 1124), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Univ")), "puniverses"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -818)], (0)), 100000000, 0, -817)), 0, 0, 0, 0, (("kernel/constr.mli", 17, 863, 863), ("kernel/constr.mli", 17, 863, 906), 0), 0, 0, 0, Tag1 ("Constr", 0)), 1, 0); Tag1 (("pinductive", 1125), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Univ")), "puniverses"), [(Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -816)], (0)), 100000000, 0, -815)), 0, 0, 0, 0, (("kernel/constr.mli", 18, 907, 907), ("kernel/constr.mli", 18, 907, 950), 0), 0, 0, 0, Tag1 ("Constr", 1)), 1, 0); Tag1 (("pconstructor", 1126), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Univ")), "puniverses"), [(Tag3 (Tag1 ((Tag2 ("Names")), "constructor"), 0, (0)), 100000000, 0, -814)], (0)), 100000000, 0, -813)), 0, 0, 0, 0, (("kernel/constr.mli", 19, 951, 951), ("kernel/constr.mli", 19, 951, 998), 0), 0, 0, 0, Tag1 ("Constr", 2)), 1, 0); Tag1 (("metavariable", 1127), (0, 0, 0, 1, ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -812)), 0, 0, 0, 0, (("kernel/constr.mli", 22, 1034, 1034), ("kernel/constr.mli", 22, 1034, 1057), 0), 0, 1, 0, Tag1 ("Constr", 3)), 1, 0); Tag1 (("case_style", 1128), (0, 0, Tag1 ([(("LetStyle", 473), (0), 0, (("kernel/constr.mli", 25, 1087, 1105), ("kernel/constr.mli", 25, 1087, 1113), 0), 0, Tag1 ("Constr", 5)); (("IfStyle", 474), (0), 0, (("kernel/constr.mli", 25, 1087, 1114), ("kernel/constr.mli", 25, 1087, 1123), 0), 0, Tag1 ("Constr", 6)); (("LetPatternStyle", 475), (0), 0, (("kernel/constr.mli", 25, 1087, 1124), ("kernel/constr.mli", 25, 1087, 1141), 0), 0, Tag1 ("Constr", 7)); (("MatchStyle", 476), (0), 0, (("kernel/constr.mli", 25, 1087, 1142), ("kernel/constr.mli", 25, 1087, 1154), 0), 0, Tag1 ("Constr", 8)); (("RegularStyle", 477), (0), 0, (("kernel/constr.mli", 26, 1155, 1157), ("kernel/constr.mli", 26, 1155, 1171), 0), 0, Tag1 ("Constr", 9))], 0), 1, 0, 0, 0, 0, 0, (("kernel/constr.mli", 25, 1087, 1087), ("kernel/constr.mli", 26, 1155, 1171), 0), 0, 1, 0, Tag1 ("Constr", 4)), 1, 0); Tag1 (("case_printing", 1129), (0, 0, [[(("ind_tags", 479), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -807)], (0)), 100000000, 0, -806), (("kernel/constr.mli", 28, 1247, 1251), ("kernel/constr.mli", 28, 1247, 1272), 0), 0, Tag1 ("Constr", 11)); (("cstr_tags", 480), 0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -810)], (0)), 100000000, 0, -809)], (0)), 100000000, 0, -808), (("kernel/constr.mli", 29, 1344, 1348), ("kernel/constr.mli", 29, 1344, 1376), 0), 0, Tag1 ("Constr", 12)); (("style", 481), 0, (Tag3 ((("case_style", 1128)), 0, (0)), 100000000, 0, -811), (("kernel/constr.mli", 30, 1450, 1454), ("kernel/constr.mli", 30, 1450, 1476), 0), 0, Tag1 ("Constr", 13))]], 1, 0, 0, 0, 0, 0, (("kernel/constr.mli", 27, 1226, 1226), ("kernel/constr.mli", 30, 1450, 1478), 0), 0, 0, 0, Tag1 ("Constr", 10)), 1, 0); Tag1 (("case_info", 1130), (0, 0, [[(("ci_ind", 483), 0, (Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -798), (("kernel/constr.mli", 38, 1688, 1692), ("kernel/constr.mli", 38, 1688, 1718), 0), 0, Tag1 ("Constr", 15)); (("ci_npar", 484), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -799), (("kernel/constr.mli", 39, 1794, 1798), ("kernel/constr.mli", 39, 1794, 1818), 0), 0, Tag1 ("Constr", 16)); (("ci_cstr_ndecls", 485), 0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -801)], (0)), 100000000, 0, -800), (("kernel/constr.mli", 40, 1885, 1889), ("kernel/constr.mli", 40, 1885, 1916), 0), 0, Tag1 ("Constr", 17)); (("ci_cstr_nargs", 486), 0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -803)], (0)), 100000000, 0, -802), (("kernel/constr.mli", 43, 2202, 2206), ("kernel/constr.mli", 43, 2202, 2232), 0), 0, Tag1 ("Constr", 18)); (("ci_relevance", 519), 0, (Tag3 (Tag1 ((Tag2 ("Sorts")), "relevance"), 0, (0)), 100000000, 0, -804), (("kernel/constr.mli", 48, 2704, 2708), ("kernel/constr.mli", 48, 2704, 2739), 0), 0, Tag1 ("Constr", 19)); (("ci_pp_info", 520), 0, (Tag3 ((("case_printing", 1129)), 0, (0)), 100000000, 0, -805), (("kernel/constr.mli", 49, 2797, 2801), ("kernel/constr.mli", 49, 2797, 2830), 0), 0, Tag1 ("Constr", 20))]], 1, 0, 0, 0, 0, 0, (("kernel/constr.mli", 37, 1671, 1671), ("kernel/constr.mli", 50, 2869, 2872), 0), 0, 0, 0, Tag1 ("Constr", 14)), 1, 0); Tag1 (("pcase_invert", 1131), ([((("constr")), 100000000, 0, -797)], 1, Tag1 ([(("NoInvert", 522), (0), 0, (("kernel/constr.mli", 53, 2902, 2904), ("kernel/constr.mli", 53, 2902, 2914), 0), 0, Tag1 ("Constr", 22)); (("CaseInvert", 523), Tag1 ([(("indices", 524), 0, (Tag3 ((Tag3 ("array", 8)), [((("constr")), 100000000, 0, -797)], (0)), 100000000, 0, -796), (("kernel/constr.mli", 56, 2986, 3006), ("kernel/constr.mli", 56, 2986, 3030), 0), 0, Tag1 ("Constr", 23))]), 0, (("kernel/constr.mli", 56, 2986, 2988), ("kernel/constr.mli", 56, 2986, 3032), 0), 0, Tag1 ("Constr", 24))], 0), 1, 0, [63], [0], 0, 0, (("kernel/constr.mli", 52, 2874, 2874), ("kernel/constr.mli", 56, 2986, 3032), 0), 0, 0, 0, Tag1 ("Constr", 21)), 1, 0); Tag1 (("t", 1132), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("kernel/constr.mli", 62, 3177, 3177), ("kernel/constr.mli", 62, 3177, 3183), 0), 0, 0, 0, Tag1 ("Constr", 31)), 1, 0); Tag1 (("constr", 1133), (0, 0, 0, 1, ((Tag3 ((("t", 1132)), 0, (0)), 100000000, 0, -795)), 0, 0, 0, 0, (("kernel/constr.mli", 63, 3184, 3184), ("kernel/constr.mli", 63, 3184, 3199), 0), 0, 0, 0, Tag1 ("Constr", 32)), 1, 0); Tag1 (("types", 1134), (0, 0, 0, 1, ((Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -794)), 0, 0, 0, 0, (("kernel/constr.mli", 69, 3453, 3453), ("kernel/constr.mli", 69, 3453, 3472), 0), 0, 0, 0, Tag1 ("Constr", 33)), 1, 0); (("mkRel", 1135), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -793), (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -792), 0), 100000000, 0, -791), 0, (("kernel/constr.mli", 79, 3779, 3779), ("kernel/constr.mli", 79, 3779, 3804), 0), 0, Tag1 ("Constr", 34)), 0); (("mkVar", 1136), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -790), (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -789), 0), 100000000, 0, -788), 0, (("kernel/constr.mli", 82, 3835, 3835), ("kernel/constr.mli", 82, 3835, 3861), 0), 0, Tag1 ("Constr", 35)), 0); (("mkInt", 1137), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Uint63")), "t"), 0, (0)), 100000000, 0, -787), (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -786), 0), 100000000, 0, -785), 0, (("kernel/constr.mli", 85, 3899, 3899), ("kernel/constr.mli", 85, 3899, 3929), 0), 0, Tag1 ("Constr", 36)), 0); (("mkArray", 1138), ((Tag1 (0, (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Instance"), "t"), 0, (0)), 100000000, 0, -780); (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -782)], (0)), 100000000, 0, -781); (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -783); (Tag3 ((("types", 1134)), 0, (0)), 100000000, 0, -784)]), 100000000, 0, -779), (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -778), 0), 100000000, 0, -777), 0, (("kernel/constr.mli", 88, 3958, 3958), ("kernel/constr.mli", 88, 3958, 4029), 0), 0, Tag1 ("Constr", 37)), 0); (("mkFloat", 1139), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Float64")), "t"), 0, (0)), 100000000, 0, -776), (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -775), 0), 100000000, 0, -774), 0, (("kernel/constr.mli", 91, 4072, 4072), ("kernel/constr.mli", 91, 4072, 4105), 0), 0, Tag1 ("Constr", 38)), 0); (("mkMeta", 1140), ((Tag1 (0, (Tag3 ((("metavariable", 1127)), 0, (0)), 100000000, 0, -773), (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -772), 0), 100000000, 0, -771), 0, (("kernel/constr.mli", 94, 4146, 4146), ("kernel/constr.mli", 94, 4146, 4181), 0), 0, Tag1 ("Constr", 39)), 0); Tag1 (("existential", 1141), (0, 0, 0, 1, ((Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evar")), "t"), 0, (0)), 100000000, 0, -768); (Tag3 (Tag1 ((Tag2 ("SList")), "t"), [(Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -770)], (0)), 100000000, 0, -769)]), 100000000, 0, -767)), 0, 0, 0, 0, (("kernel/constr.mli", 97, 4225, 4225), ("kernel/constr.mli", 97, 4225, 4267), 0), 0, 0, 0, Tag1 ("Constr", 40)), 1, 0); (("mkEvar", 1142), ((Tag1 (0, (Tag3 ((("existential", 1141)), 0, (0)), 100000000, 0, -766), (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -765), 0), 100000000, 0, -764), 0, (("kernel/constr.mli", 98, 4268, 4268), ("kernel/constr.mli", 98, 4268, 4302), 0), 0, Tag1 ("Constr", 41)), 0); (("mkSort", 1143), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sorts")), "t"), 0, (0)), 100000000, 0, -763), (Tag3 ((("types", 1134)), 0, (0)), 100000000, 0, -762), 0), 100000000, 0, -761), 0, (("kernel/constr.mli", 101, 4328, 4328), ("kernel/constr.mli", 101, 4328, 4357), 0), 0, Tag1 ("Constr", 42)), 0); (("mkSProp", 1144), ((Tag3 ((("types", 1134)), 0, (0)), 100000000, 0, -760), 0, (("kernel/constr.mli", 102, 4358, 4358), ("kernel/constr.mli", 102, 4358, 4377), 0), 0, Tag1 ("Constr", 43)), 0); (("mkProp", 1145), ((Tag3 ((("types", 1134)), 0, (0)), 100000000, 0, -759), 0, (("kernel/constr.mli", 103, 4378, 4378), ("kernel/constr.mli", 103, 4378, 4396), 0), 0, Tag1 ("Constr", 44)), 0); (("mkSet", 1146), ((Tag3 ((("types", 1134)), 0, (0)), 100000000, 0, -758), 0, (("kernel/constr.mli", 104, 4397, 4397), ("kernel/constr.mli", 104, 4397, 4415), 0), 0, Tag1 ("Constr", 45)), 0); (("mkType", 1147), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Universe"), "t"), 0, (0)), 100000000, 0, -757), (Tag3 ((("types", 1134)), 0, (0)), 100000000, 0, -756), 0), 100000000, 0, -755), 0, (("kernel/constr.mli", 105, 4416, 4416), ("kernel/constr.mli", 105, 4416, 4453), 0), 0, Tag1 ("Constr", 46)), 0); Tag1 (("cast_kind", 1148), (0, 0, Tag1 ([(("VMcast", 687), (0), 0, (("kernel/constr.mli", 109, 4518, 4535), ("kernel/constr.mli", 109, 4518, 4541), 0), 0, Tag1 ("Constr", 48)); (("NATIVEcast", 688), (0), 0, (("kernel/constr.mli", 109, 4518, 4542), ("kernel/constr.mli", 109, 4518, 4554), 0), 0, Tag1 ("Constr", 49)); (("DEFAULTcast", 689), (0), 0, (("kernel/constr.mli", 109, 4518, 4555), ("kernel/constr.mli", 109, 4518, 4568), 0), 0, Tag1 ("Constr", 50))], 0), 1, 0, 0, 0, 0, 0, (("kernel/constr.mli", 109, 4518, 4518), ("kernel/constr.mli", 109, 4518, 4568), 0), 0, 1, 0, Tag1 ("Constr", 47)), 1, 0); (("mkCast", 1149), ((Tag1 (0, (Tag2 ([(Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -752); (Tag3 ((("cast_kind", 1148)), 0, (0)), 100000000, 0, -753); (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -754)]), 100000000, 0, -751), (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -750), 0), 100000000, 0, -749), 0, (("kernel/constr.mli", 113, 4706, 4706), ("kernel/constr.mli", 113, 4706, 4756), 0), 0, Tag1 ("Constr", 51)), 0); (("mkProd", 1150), ((Tag1 (0, (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -746)], (0)), 100000000, 0, -745); (Tag3 ((("types", 1134)), 0, (0)), 100000000, 0, -747); (Tag3 ((("types", 1134)), 0, (0)), 100000000, 0, -748)]), 100000000, 0, -744), (Tag3 ((("types", 1134)), 0, (0)), 100000000, 0, -743), 0), 100000000, 0, -742), 0, (("kernel/constr.mli", 116, 4799, 4799), ("kernel/constr.mli", 116, 4799, 4864), 0), 0, Tag1 ("Constr", 52)), 0); (("mkLambda", 1151), ((Tag1 (0, (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -739)], (0)), 100000000, 0, -738); (Tag3 ((("types", 1134)), 0, (0)), 100000000, 0, -740); (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -741)]), 100000000, 0, -737), (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -736), 0), 100000000, 0, -735), 0, (("kernel/constr.mli", 119, 4919, 4919), ("kernel/constr.mli", 119, 4919, 4988), 0), 0, Tag1 ("Constr", 53)), 0); (("mkLetIn", 1152), ((Tag1 (0, (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -731)], (0)), 100000000, 0, -730); (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -732); (Tag3 ((("types", 1134)), 0, (0)), 100000000, 0, -733); (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -734)]), 100000000, 0, -729), (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -728), 0), 100000000, 0, -727), 0, (("kernel/constr.mli", 122, 5044, 5044), ("kernel/constr.mli", 122, 5044, 5121), 0), 0, Tag1 ("Constr", 54)), 0); (("mkApp", 1153), ((Tag1 (0, (Tag2 ([(Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -724); (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -726)], (0)), 100000000, 0, -725)]), 100000000, 0, -723), (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -722), 0), 100000000, 0, -721), 0, (("kernel/constr.mli", 127, 5268, 5268), ("kernel/constr.mli", 127, 5268, 5311), 0), 0, Tag1 ("Constr", 55)), 0); (("map_puniverses", 1154), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -719), ((("b")), 100000000, 0, -717), 0), 100000000, 0, -720), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Univ")), "puniverses"), [((("a")), 100000000, 0, -719)], (0)), 100000000, 0, -718), (Tag3 (Tag1 ((Tag2 ("Univ")), "puniverses"), [((("b")), 100000000, 0, -717)], (0)), 100000000, 0, -716), 0), 100000000, 0, -715), 0), 100000000, 0, -714), 0, (("kernel/constr.mli", 129, 5313, 5313), ("kernel/constr.mli", 129, 5313, 5388), 0), 0, Tag1 ("Constr", 56)), 0); (("mkConstU", 1155), ((Tag1 (0, (Tag3 ((("pconstant", 1124)), 0, (0)), 100000000, 0, -713), (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -712), 0), 100000000, 0, -711), 0, (("kernel/constr.mli", 132, 5421, 5421), ("kernel/constr.mli", 132, 5421, 5455), 0), 0, Tag1 ("Constr", 57)), 0); (("mkProj", 1156), ((Tag1 (0, (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Projection"), "t"), 0, (0)), 100000000, 0, -709); (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -710)]), 100000000, 0, -708), (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -707), 0), 100000000, 0, -706), 0, (("kernel/constr.mli", 135, 5500, 5500), ("kernel/constr.mli", 135, 5500, 5546), 0), 0, Tag1 ("Constr", 58)), 0); (("mkIndU", 1157), ((Tag1 (0, (Tag3 ((("pinductive", 1125)), 0, (0)), 100000000, 0, -705), (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -704), 0), 100000000, 0, -703), 0, (("kernel/constr.mli", 140, 5639, 5639), ("kernel/constr.mli", 140, 5639, 5672), 0), 0, Tag1 ("Constr", 59)), 0); (("mkConstructU", 1158), ((Tag1 (0, (Tag3 ((("pconstructor", 1126)), 0, (0)), 100000000, 0, -702), (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -701), 0), 100000000, 0, -700), 0, (("kernel/constr.mli", 144, 5768, 5768), ("kernel/constr.mli", 144, 5768, 5809), 0), 0, Tag1 ("Constr", 60)), 0); (("mkConstructUi", 1159), ((Tag1 (0, (Tag2 ([(Tag3 ((("pinductive", 1125)), 0, (0)), 100000000, 0, -698); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -699)]), 100000000, 0, -697), (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -696), 0), 100000000, 0, -695), 0, (("kernel/constr.mli", 145, 5810, 5810), ("kernel/constr.mli", 145, 5810, 5856), 0), 0, Tag1 ("Constr", 61)), 0); (("mkRef", 1160), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Univ")), "puniverses"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -694)], (0)), 100000000, 0, -693), (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -692), 0), 100000000, 0, -691), 0, (("kernel/constr.mli", 148, 5918, 5918), ("kernel/constr.mli", 148, 5918, 5965), 0), 0, Tag1 ("Constr", 62)), 0); Tag3 (("UnsafeMonomorphic", 1161), 0, (Tag1 ([(("mkConst", 1281), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -827), (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -826), 0), 100000000, 0, -825), 0, (("kernel/constr.mli", 151, 5998, 6000), ("kernel/constr.mli", 151, 5998, 6034), 0), 0, Tag1 ("Constr", 63)), 0); (("mkInd", 1282), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -824), (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -823), 0), 100000000, 0, -822), 0, (("kernel/constr.mli", 152, 6035, 6037), ("kernel/constr.mli", 152, 6035, 6068), 0), 0, Tag1 ("Constr", 64)), 0); (("mkConstruct", 1283), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Names")), "constructor"), 0, (0)), 100000000, 0, -821), (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -820), 0), 100000000, 0, -819), 0, (("kernel/constr.mli", 153, 6069, 6071), ("kernel/constr.mli", 153, 6069, 6110), 0), 0, Tag1 ("Constr", 65)), 0)]), 0, (("kernel/constr.mli", 150, 5967, 5967), ("kernel/constr.mli", 154, 6111, 6114), 0), Tag1 ("Constr", 66)), 0, 0); Tag1 (("pcase_branch", 1162), ([((("constr")), 100000000, 0, -690)], 1, 0, 1, ((Tag2 ([(Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -689)], (0)), 100000000, 0, -688)], (0)), 100000000, 0, -687); ((("constr")), 100000000, 0, -690)]), 100000000, 0, -686)), [25], [0], 0, 0, (("kernel/constr.mli", 167, 6443, 6443), ("kernel/constr.mli", 167, 6443, 6514), 0), 0, 0, 0, Tag1 ("Constr", 67)), 1, 0); Tag1 (("pcase_return", 1163), ([((("types")), 100000000, 0, -685)], 1, 0, 1, ((Tag2 ([(Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -684)], (0)), 100000000, 0, -683)], (0)), 100000000, 0, -682); ((("types")), 100000000, 0, -685)]), 100000000, 0, -681)), [25], [0], 0, 0, (("kernel/constr.mli", 170, 6559, 6559), ("kernel/constr.mli", 170, 6559, 6628), 0), 0, 0, 0, Tag1 ("Constr", 68)), 1, 0); Tag1 (("pcase", 1164), ([((("constr")), 100000000, 0, -675); ((("types")), 100000000, 0, -677); ((("univs")), 100000000, 0, -673)], 3, 0, 1, ((Tag2 ([(Tag3 ((("case_info", 1130)), 0, (0)), 100000000, 0, -672); ((("univs")), 100000000, 0, -673); (Tag3 ((Tag3 ("array", 8)), [((("constr")), 100000000, 0, -675)], (0)), 100000000, 0, -674); (Tag3 ((("pcase_return", 1163)), [((("types")), 100000000, 0, -677)], (0)), 100000000, 0, -676); (Tag3 ((("pcase_invert", 1131)), [((("constr")), 100000000, 0, -675)], (0)), 100000000, 0, -678); ((("constr")), 100000000, 0, -675); (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("pcase_branch", 1162)), [((("constr")), 100000000, 0, -675)], (0)), 100000000, 0, -680)], (0)), 100000000, 0, -679)]), 100000000, 0, -671)), [63; 25; 25], [0; 0; 0], 0, 0, (("kernel/constr.mli", 173, 6659, 6659), ("kernel/constr.mli", 174, 6698, 6818), 0), 0, 0, 0, Tag1 ("Constr", 69)), 1, 0); Tag1 (("case_invert", 1165), (0, 0, 0, 1, ((Tag3 ((("pcase_invert", 1131)), [(Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -670)], (0)), 100000000, 0, -669)), 0, 0, 0, 0, (("kernel/constr.mli", 176, 6820, 6820), ("kernel/constr.mli", 176, 6820, 6858), 0), 0, 0, 0, Tag1 ("Constr", 70)), 1, 0); Tag1 (("case_return", 1166), (0, 0, 0, 1, ((Tag3 ((("pcase_return", 1163)), [(Tag3 ((("types", 1134)), 0, (0)), 100000000, 0, -668)], (0)), 100000000, 0, -667)), 0, 0, 0, 0, (("kernel/constr.mli", 177, 6859, 6859), ("kernel/constr.mli", 177, 6859, 6896), 0), 0, 0, 0, Tag1 ("Constr", 71)), 1, 0); Tag1 (("case_branch", 1167), (0, 0, 0, 1, ((Tag3 ((("pcase_branch", 1162)), [(Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -666)], (0)), 100000000, 0, -665)), 0, 0, 0, 0, (("kernel/constr.mli", 178, 6897, 6897), ("kernel/constr.mli", 178, 6897, 6935), 0), 0, 0, 0, Tag1 ("Constr", 72)), 1, 0); Tag1 (("case", 1168), (0, 0, 0, 1, ((Tag3 ((("pcase", 1164)), [(Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -662); (Tag3 ((("types", 1134)), 0, (0)), 100000000, 0, -663); (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Instance"), "t"), 0, (0)), 100000000, 0, -664)], (0)), 100000000, 0, -661)), 0, 0, 0, 0, (("kernel/constr.mli", 179, 6936, 6936), ("kernel/constr.mli", 179, 6936, 6986), 0), 0, 0, 0, Tag1 ("Constr", 73)), 1, 0); (("mkCase", 1169), ((Tag1 (0, (Tag3 ((("case", 1168)), 0, (0)), 100000000, 0, -660), (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -659), 0), 100000000, 0, -658), 0, (("kernel/constr.mli", 181, 6988, 6988), ("kernel/constr.mli", 181, 6988, 7015), 0), 0, Tag1 ("Constr", 74)), 0); Tag1 (("prec_declaration", 1170), ([((("constr")), 100000000, 0, -657); ((("types")), 100000000, 0, -655)], 2, 0, 1, ((Tag2 ([(Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -653)], (0)), 100000000, 0, -652)], (0)), 100000000, 0, -651); (Tag3 ((Tag3 ("array", 8)), [((("types")), 100000000, 0, -655)], (0)), 100000000, 0, -654); (Tag3 ((Tag3 ("array", 8)), [((("constr")), 100000000, 0, -657)], (0)), 100000000, 0, -656)]), 100000000, 0, -650)), [63; 63], [0; 0], 0, 0, (("kernel/constr.mli", 197, 7463, 7463), ("kernel/constr.mli", 198, 7505, 7573), 0), 0, 0, 0, Tag1 ("Constr", 75)), 1, 0); Tag1 (("pfixpoint", 1171), ([((("constr")), 100000000, 0, -648); ((("types")), 100000000, 0, -649)], 2, 0, 1, ((Tag2 ([(Tag2 ([(Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -645)], (0)), 100000000, 0, -644); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -646)]), 100000000, 0, -643); (Tag3 ((("prec_declaration", 1170)), [((("constr")), 100000000, 0, -648); ((("types")), 100000000, 0, -649)], (0)), 100000000, 0, -647)]), 100000000, 0, -642)), [63; 63], [0; 0], 0, 0, (("kernel/constr.mli", 199, 7574, 7574), ("kernel/constr.mli", 200, 7609, 7667), 0), 0, 0, 0, Tag1 ("Constr", 76)), 1, 0); Tag1 (("pcofixpoint", 1172), ([((("constr")), 100000000, 0, -640); ((("types")), 100000000, 0, -641)], 2, 0, 1, ((Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -638); (Tag3 ((("prec_declaration", 1170)), [((("constr")), 100000000, 0, -640); ((("types")), 100000000, 0, -641)], (0)), 100000000, 0, -639)]), 100000000, 0, -637)), [63; 63], [0; 0], 0, 0, (("kernel/constr.mli", 208, 8049, 8049), ("kernel/constr.mli", 209, 8086, 8130), 0), 0, 0, 0, Tag1 ("Constr", 77)), 1, 0); Tag1 (("rec_declaration", 1173), (0, 0, 0, 1, ((Tag3 ((("prec_declaration", 1170)), [(Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -635); (Tag3 ((("types", 1134)), 0, (0)), 100000000, 0, -636)], (0)), 100000000, 0, -634)), 0, 0, 0, 0, (("kernel/constr.mli", 213, 8223, 8223), ("kernel/constr.mli", 213, 8223, 8278), 0), 0, 0, 0, Tag1 ("Constr", 78)), 1, 0); Tag1 (("fixpoint", 1174), (0, 0, 0, 1, ((Tag3 ((("pfixpoint", 1171)), [(Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -632); (Tag3 ((("types", 1134)), 0, (0)), 100000000, 0, -633)], (0)), 100000000, 0, -631)), 0, 0, 0, 0, (("kernel/constr.mli", 215, 8280, 8280), ("kernel/constr.mli", 215, 8280, 8321), 0), 0, 0, 0, Tag1 ("Constr", 79)), 1, 0); (("mkFix", 1175), ((Tag1 (0, (Tag3 ((("fixpoint", 1174)), 0, (0)), 100000000, 0, -630), (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -629), 0), 100000000, 0, -628), 0, (("kernel/constr.mli", 216, 8322, 8322), ("kernel/constr.mli", 216, 8322, 8352), 0), 0, Tag1 ("Constr", 80)), 0); Tag1 (("cofixpoint", 1176), (0, 0, 0, 1, ((Tag3 ((("pcofixpoint", 1172)), [(Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -626); (Tag3 ((("types", 1134)), 0, (0)), 100000000, 0, -627)], (0)), 100000000, 0, -625)), 0, 0, 0, 0, (("kernel/constr.mli", 229, 8637, 8637), ("kernel/constr.mli", 229, 8637, 8682), 0), 0, 0, 0, Tag1 ("Constr", 81)), 1, 0); (("mkCoFix", 1177), ((Tag1 (0, (Tag3 ((("cofixpoint", 1176)), 0, (0)), 100000000, 0, -624), (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -623), 0), 100000000, 0, -622), 0, (("kernel/constr.mli", 230, 8683, 8683), ("kernel/constr.mli", 230, 8683, 8717), 0), 0, Tag1 ("Constr", 82)), 0); Tag1 (("pexistential", 1178), ([((("constr")), 100000000, 0, -621)], 1, 0, 1, ((Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evar")), "t"), 0, (0)), 100000000, 0, -619); (Tag3 (Tag1 ((Tag2 ("SList")), "t"), [((("constr")), 100000000, 0, -621)], (0)), 100000000, 0, -620)]), 100000000, 0, -618)), [25], [0], 0, 0, (("kernel/constr.mli", 237, 8898, 8898), ("kernel/constr.mli", 237, 8898, 8950), 0), 0, 0, 0, Tag1 ("Constr", 83)), 1, 0); Tag1 (("kind_of_term", 1179), ([((("constr")), 100000000, 0, -588); ((("types")), 100000000, 0, -591); ((("sort")), 100000000, 0, -589); ((("univs")), 100000000, 0, -601)], 4, Tag1 ([(("Rel", 781), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -584)]), 0, (("kernel/constr.mli", 240, 9005, 9007), ("kernel/constr.mli", 240, 9005, 9025), 0), 0, Tag1 ("Constr", 85)); (("Var", 782), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -585)]), 0, (("kernel/constr.mli", 242, 9112, 9114), ("kernel/constr.mli", 242, 9112, 9133), 0), 0, Tag1 ("Constr", 86)); (("Meta", 783), ([(Tag3 ((("metavariable", 1127)), 0, (0)), 100000000, 0, -586)]), 0, (("kernel/constr.mli", 246, 9301, 9303), ("kernel/constr.mli", 246, 9301, 9330), 0), 0, Tag1 ("Constr", 87)); (("Evar", 784), ([(Tag3 ((("pexistential", 1178)), [((("constr")), 100000000, 0, -588)], (0)), 100000000, 0, -587)]), 0, (("kernel/constr.mli", 247, 9331, 9333), ("kernel/constr.mli", 247, 9331, 9368), 0), 0, Tag1 ("Constr", 88)); (("Sort", 785), ([((("sort")), 100000000, 0, -589)]), 0, (("kernel/constr.mli", 248, 9369, 9371), ("kernel/constr.mli", 248, 9369, 9391), 0), 0, Tag1 ("Constr", 89)); (("Cast", 786), ([((("constr")), 100000000, 0, -588); (Tag3 ((("cast_kind", 1148)), 0, (0)), 100000000, 0, -590); ((("types")), 100000000, 0, -591)]), 0, (("kernel/constr.mli", 249, 9392, 9394), ("kernel/constr.mli", 249, 9392, 9437), 0), 0, Tag1 ("Constr", 90)); (("Prod", 787), ([(Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -593)], (0)), 100000000, 0, -592); ((("types")), 100000000, 0, -591); ((("types")), 100000000, 0, -591)]), 0, (("kernel/constr.mli", 250, 9438, 9440), ("kernel/constr.mli", 250, 9438, 9500), 0), 0, Tag1 ("Constr", 91)); (("Lambda", 788), ([(Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -595)], (0)), 100000000, 0, -594); ((("types")), 100000000, 0, -591); ((("constr")), 100000000, 0, -588)]), 0, (("kernel/constr.mli", 252, 9577, 9579), ("kernel/constr.mli", 252, 9577, 9640), 0), 0, Tag1 ("Constr", 92)); (("LetIn", 789), ([(Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -597)], (0)), 100000000, 0, -596); ((("constr")), 100000000, 0, -588); ((("types")), 100000000, 0, -591); ((("constr")), 100000000, 0, -588)]), 0, (("kernel/constr.mli", 254, 9720, 9722), ("kernel/constr.mli", 254, 9720, 9793), 0), 0, Tag1 ("Constr", 93)); (("App", 790), ([((("constr")), 100000000, 0, -588); (Tag3 ((Tag3 ("array", 8)), [((("constr")), 100000000, 0, -588)], (0)), 100000000, 0, -598)]), 0, (("kernel/constr.mli", 256, 9878, 9880), ("kernel/constr.mli", 256, 9878, 9918), 0), 0, Tag1 ("Constr", 94)); (("Const", 791), ([(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -600); ((("univs")), 100000000, 0, -601)]), 100000000, 0, -599)]), 0, (("kernel/constr.mli", 261, 10160, 10162), ("kernel/constr.mli", 261, 10160, 10198), 0), 0, Tag1 ("Constr", 95)); (("Ind", 792), ([(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -603); ((("univs")), 100000000, 0, -601)]), 100000000, 0, -602)]), 0, (("kernel/constr.mli", 265, 10380, 10382), ("kernel/constr.mli", 265, 10380, 10417), 0), 0, Tag1 ("Constr", 96)); (("Construct", 793), ([(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Names")), "constructor"), 0, (0)), 100000000, 0, -605); ((("univs")), 100000000, 0, -601)]), 100000000, 0, -604)]), 0, (("kernel/constr.mli", 268, 10527, 10529), ("kernel/constr.mli", 268, 10527, 10566), 0), 0, Tag1 ("Constr", 97)); (("Case", 794), ([(Tag3 ((("case_info", 1130)), 0, (0)), 100000000, 0, -606); ((("univs")), 100000000, 0, -601); (Tag3 ((Tag3 ("array", 8)), [((("constr")), 100000000, 0, -588)], (0)), 100000000, 0, -607); (Tag3 ((("pcase_return", 1163)), [((("types")), 100000000, 0, -591)], (0)), 100000000, 0, -608); (Tag3 ((("pcase_invert", 1131)), [((("constr")), 100000000, 0, -588)], (0)), 100000000, 0, -609); ((("constr")), 100000000, 0, -588); (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("pcase_branch", 1162)), [((("constr")), 100000000, 0, -588)], (0)), 100000000, 0, -611)], (0)), 100000000, 0, -610)]), 0, (("kernel/constr.mli", 271, 10683, 10685), ("kernel/constr.mli", 271, 10683, 10818), 0), 0, Tag1 ("Constr", 98)); (("Fix", 795), ([(Tag3 ((("pfixpoint", 1171)), [((("constr")), 100000000, 0, -588); ((("types")), 100000000, 0, -591)], (0)), 100000000, 0, -612)]), 0, (("kernel/constr.mli", 282, 11353, 11355), ("kernel/constr.mli", 282, 11353, 11397), 0), 0, Tag1 ("Constr", 99)); (("CoFix", 796), ([(Tag3 ((("pcofixpoint", 1172)), [((("constr")), 100000000, 0, -588); ((("types")), 100000000, 0, -591)], (0)), 100000000, 0, -613)]), 0, (("kernel/constr.mli", 283, 11398, 11400), ("kernel/constr.mli", 283, 11398, 11444), 0), 0, Tag1 ("Constr", 100)); (("Proj", 797), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Projection"), "t"), 0, (0)), 100000000, 0, -614); ((("constr")), 100000000, 0, -588)]), 0, (("kernel/constr.mli", 284, 11445, 11447), ("kernel/constr.mli", 284, 11445, 11484), 0), 0, Tag1 ("Constr", 101)); (("Int", 798), ([(Tag3 (Tag1 ((Tag2 ("Uint63")), "t"), 0, (0)), 100000000, 0, -615)]), 0, (("kernel/constr.mli", 285, 11485, 11487), ("kernel/constr.mli", 285, 11485, 11510), 0), 0, Tag1 ("Constr", 102)); (("Float", 799), ([(Tag3 (Tag1 ((Tag2 ("Float64")), "t"), 0, (0)), 100000000, 0, -616)]), 0, (("kernel/constr.mli", 286, 11511, 11513), ("kernel/constr.mli", 286, 11511, 11537), 0), 0, Tag1 ("Constr", 103)); (("Array", 800), ([((("univs")), 100000000, 0, -601); (Tag3 ((Tag3 ("array", 8)), [((("constr")), 100000000, 0, -588)], (0)), 100000000, 0, -617); ((("constr")), 100000000, 0, -588); ((("types")), 100000000, 0, -591)]), 0, (("kernel/constr.mli", 287, 11538, 11540), ("kernel/constr.mli", 287, 11538, 11596), 0), 0, Tag1 ("Constr", 104))], 0), 1, 0, [63; 63; 25; 25], [0; 0; 0; 0], 0, 0, (("kernel/constr.mli", 239, 8952, 8952), ("kernel/constr.mli", 287, 11538, 11596), 0), 0, 0, 0, Tag1 ("Constr", 84)), 1, 0); (("kind", 1180), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -583), (Tag3 ((("kind_of_term", 1179)), [(Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -579); (Tag3 ((("types", 1134)), 0, (0)), 100000000, 0, -580); (Tag3 (Tag1 ((Tag2 ("Sorts")), "t"), 0, (0)), 100000000, 0, -581); (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Instance"), "t"), 0, (0)), 100000000, 0, -582)], (0)), 100000000, 0, -578), 0), 100000000, 0, -577), 0, (("kernel/constr.mli", 295, 11874, 11874), ("kernel/constr.mli", 295, 11874, 11949), 0), 0, Tag1 ("Constr", 105)), 0); (("of_kind", 1181), ((Tag1 (0, (Tag3 ((("kind_of_term", 1179)), [(Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -573); (Tag3 ((("types", 1134)), 0, (0)), 100000000, 0, -574); (Tag3 (Tag1 ((Tag2 ("Sorts")), "t"), 0, (0)), 100000000, 0, -575); (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Instance"), "t"), 0, (0)), 100000000, 0, -576)], (0)), 100000000, 0, -572), (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -571), 0), 100000000, 0, -570), 0, (("kernel/constr.mli", 296, 11950, 11950), ("kernel/constr.mli", 296, 11950, 12028), 0), 0, Tag1 ("Constr", 106)), 0); (("kind_nocast_gen", 1182), ((Tag1 (0, (Tag1 (0, ((("v")), 100000000, 0, -565), (Tag3 ((("kind_of_term", 1179)), [((("v")), 100000000, 0, -565); ((("v")), 100000000, 0, -565); ((("sort")), 100000000, 0, -566); ((("univs")), 100000000, 0, -567)], (0)), 100000000, 0, -569), 0), 100000000, 0, -568), (Tag1 (0, ((("v")), 100000000, 0, -565), (Tag3 ((("kind_of_term", 1179)), [((("v")), 100000000, 0, -565); ((("v")), 100000000, 0, -565); ((("sort")), 100000000, 0, -566); ((("univs")), 100000000, 0, -567)], (0)), 100000000, 0, -564), 0), 100000000, 0, -563), 0), 100000000, 0, -562), 0, (("kernel/constr.mli", 298, 12030, 12030), ("kernel/constr.mli", 299, 12100, 12146), 0), 0, Tag1 ("Constr", 107)), 0); (("kind_nocast", 1183), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -561), (Tag3 ((("kind_of_term", 1179)), [(Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -557); (Tag3 ((("types", 1134)), 0, (0)), 100000000, 0, -558); (Tag3 (Tag1 ((Tag2 ("Sorts")), "t"), 0, (0)), 100000000, 0, -559); (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Instance"), "t"), 0, (0)), 100000000, 0, -560)], (0)), 100000000, 0, -556), 0), 100000000, 0, -555), 0, (("kernel/constr.mli", 301, 12148, 12148), ("kernel/constr.mli", 301, 12148, 12230), 0), 0, Tag1 ("Constr", 108)), 0); (("isRel", 1184), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -554), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -553), 0), 100000000, 0, -552), 0, (("kernel/constr.mli", 304, 12264, 12264), ("kernel/constr.mli", 304, 12264, 12291), 0), 0, Tag1 ("Constr", 109)), 0); (("isRelN", 1185), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -551), (Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -550), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -549), 0), 100000000, 0, -548), 0), 100000000, 0, -547), 0, (("kernel/constr.mli", 305, 12292, 12292), ("kernel/constr.mli", 305, 12292, 12326), 0), 0, Tag1 ("Constr", 110)), 0); (("isVar", 1186), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -546), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -545), 0), 100000000, 0, -544), 0, (("kernel/constr.mli", 306, 12327, 12327), ("kernel/constr.mli", 306, 12327, 12354), 0), 0, Tag1 ("Constr", 111)), 0); (("isVarId", 1187), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -543), (Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -542), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -541), 0), 100000000, 0, -540), 0), 100000000, 0, -539), 0, (("kernel/constr.mli", 307, 12355, 12355), ("kernel/constr.mli", 307, 12355, 12391), 0), 0, Tag1 ("Constr", 112)), 0); (("isRef", 1188), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -538), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -537), 0), 100000000, 0, -536), 0, (("kernel/constr.mli", 308, 12392, 12392), ("kernel/constr.mli", 308, 12392, 12418), 0), 0, Tag1 ("Constr", 113)), 0); (("isRefX", 1189), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -535), (Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -534), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -533), 0), 100000000, 0, -532), 0), 100000000, 0, -531), 0, (("kernel/constr.mli", 309, 12419, 12419), ("kernel/constr.mli", 309, 12419, 12459), 0), 0, Tag1 ("Constr", 114)), 0); (("isInd", 1190), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -530), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -529), 0), 100000000, 0, -528), 0, (("kernel/constr.mli", 310, 12460, 12460), ("kernel/constr.mli", 310, 12460, 12487), 0), 0, Tag1 ("Constr", 115)), 0); (("isEvar", 1191), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -527), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -526), 0), 100000000, 0, -525), 0, (("kernel/constr.mli", 311, 12488, 12488), ("kernel/constr.mli", 311, 12488, 12515), 0), 0, Tag1 ("Constr", 116)), 0); (("isMeta", 1192), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -524), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -523), 0), 100000000, 0, -522), 0, (("kernel/constr.mli", 312, 12516, 12516), ("kernel/constr.mli", 312, 12516, 12543), 0), 0, Tag1 ("Constr", 117)), 0); (("isEvar_or_Meta", 1193), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -521), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -520), 0), 100000000, 0, -519), 0, (("kernel/constr.mli", 313, 12544, 12544), ("kernel/constr.mli", 313, 12544, 12579), 0), 0, Tag1 ("Constr", 118)), 0); (("isSort", 1194), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -518), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -517), 0), 100000000, 0, -516), 0, (("kernel/constr.mli", 314, 12580, 12580), ("kernel/constr.mli", 314, 12580, 12607), 0), 0, Tag1 ("Constr", 119)), 0); (("isCast", 1195), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -515), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -514), 0), 100000000, 0, -513), 0, (("kernel/constr.mli", 315, 12608, 12608), ("kernel/constr.mli", 315, 12608, 12635), 0), 0, Tag1 ("Constr", 120)), 0); (("isApp", 1196), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -512), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -511), 0), 100000000, 0, -510), 0, (("kernel/constr.mli", 316, 12636, 12636), ("kernel/constr.mli", 316, 12636, 12662), 0), 0, Tag1 ("Constr", 121)), 0); (("isLambda", 1197), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -509), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -508), 0), 100000000, 0, -507), 0, (("kernel/constr.mli", 317, 12663, 12663), ("kernel/constr.mli", 317, 12663, 12692), 0), 0, Tag1 ("Constr", 122)), 0); (("isLetIn", 1198), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -506), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -505), 0), 100000000, 0, -504), 0, (("kernel/constr.mli", 318, 12693, 12693), ("kernel/constr.mli", 318, 12693, 12721), 0), 0, Tag1 ("Constr", 123)), 0); (("isProd", 1199), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -503), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -502), 0), 100000000, 0, -501), 0, (("kernel/constr.mli", 319, 12722, 12722), ("kernel/constr.mli", 319, 12722, 12749), 0), 0, Tag1 ("Constr", 124)), 0); (("isConst", 1200), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -500), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -499), 0), 100000000, 0, -498), 0, (("kernel/constr.mli", 320, 12750, 12750), ("kernel/constr.mli", 320, 12750, 12778), 0), 0, Tag1 ("Constr", 125)), 0); (("isConstruct", 1201), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -497), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -496), 0), 100000000, 0, -495), 0, (("kernel/constr.mli", 321, 12779, 12779), ("kernel/constr.mli", 321, 12779, 12811), 0), 0, Tag1 ("Constr", 126)), 0); (("isFix", 1202), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -494), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -493), 0), 100000000, 0, -492), 0, (("kernel/constr.mli", 322, 12812, 12812), ("kernel/constr.mli", 322, 12812, 12838), 0), 0, Tag1 ("Constr", 127)), 0); (("isCoFix", 1203), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -491), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -490), 0), 100000000, 0, -489), 0, (("kernel/constr.mli", 323, 12839, 12839), ("kernel/constr.mli", 323, 12839, 12867), 0), 0, Tag1 ("Constr", 128)), 0); (("isCase", 1204), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -488), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -487), 0), 100000000, 0, -486), 0, (("kernel/constr.mli", 324, 12868, 12868), ("kernel/constr.mli", 324, 12868, 12895), 0), 0, Tag1 ("Constr", 129)), 0); (("isProj", 1205), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -485), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -484), 0), 100000000, 0, -483), 0, (("kernel/constr.mli", 325, 12896, 12896), ("kernel/constr.mli", 325, 12896, 12923), 0), 0, Tag1 ("Constr", 130)), 0); (("is_Prop", 1206), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -482), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -481), 0), 100000000, 0, -480), 0, (("kernel/constr.mli", 327, 12925, 12925), ("kernel/constr.mli", 327, 12925, 12953), 0), 0, Tag1 ("Constr", 131)), 0); (("is_Set", 1207), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -479), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -478), 0), 100000000, 0, -477), 0, (("kernel/constr.mli", 328, 12954, 12954), ("kernel/constr.mli", 328, 12954, 12982), 0), 0, Tag1 ("Constr", 132)), 0); (("isprop", 1208), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -476), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -475), 0), 100000000, 0, -474), 0, (("kernel/constr.mli", 329, 12983, 12983), ("kernel/constr.mli", 329, 12983, 13010), 0), 0, Tag1 ("Constr", 133)), 0); (("is_Type", 1209), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -473), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -472), 0), 100000000, 0, -471), 0, (("kernel/constr.mli", 330, 13011, 13011), ("kernel/constr.mli", 330, 13011, 13039), 0), 0, Tag1 ("Constr", 134)), 0); (("iskind", 1210), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -470), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -469), 0), 100000000, 0, -468), 0, (("kernel/constr.mli", 331, 13040, 13040), ("kernel/constr.mli", 331, 13040, 13067), 0), 0, Tag1 ("Constr", 135)), 0); (("is_small", 1211), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sorts")), "t"), 0, (0)), 100000000, 0, -467), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -466), 0), 100000000, 0, -465), 0, (("kernel/constr.mli", 332, 13068, 13068), ("kernel/constr.mli", 332, 13068, 13098), 0), 0, Tag1 ("Constr", 136)), 0); Tag2 (("DestKO", 1212), ((Tag3 ("exn", 7)), 0, (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Constr", 137)), 2, 0); (("destRel", 1213), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -464), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -463), 0), 100000000, 0, -462), 0, (("kernel/constr.mli", 341, 13295, 13295), ("kernel/constr.mli", 341, 13295, 13322), 0), 0, Tag1 ("Constr", 138)), 0); (("destMeta", 1214), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -461), (Tag3 ((("metavariable", 1127)), 0, (0)), 100000000, 0, -460), 0), 100000000, 0, -459), 0, (("kernel/constr.mli", 344, 13365, 13365), ("kernel/constr.mli", 344, 13365, 13402), 0), 0, Tag1 ("Constr", 139)), 0); (("destVar", 1215), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -458), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -457), 0), 100000000, 0, -456), 0, (("kernel/constr.mli", 347, 13432, 13432), ("kernel/constr.mli", 347, 13432, 13460), 0), 0, Tag1 ("Constr", 140)), 0); (("destSort", 1216), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -455), (Tag3 (Tag1 ((Tag2 ("Sorts")), "t"), 0, (0)), 100000000, 0, -454), 0), 100000000, 0, -453), 0, (("kernel/constr.mli", 351, 13579, 13579), ("kernel/constr.mli", 351, 13579, 13611), 0), 0, Tag1 ("Constr", 141)), 0); (("destCast", 1217), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -452), (Tag2 ([(Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -449); (Tag3 ((("cast_kind", 1148)), 0, (0)), 100000000, 0, -450); (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -451)]), 100000000, 0, -448), 0), 100000000, 0, -447), 0, (("kernel/constr.mli", 354, 13644, 13644), ("kernel/constr.mli", 354, 13644, 13696), 0), 0, Tag1 ("Constr", 142)), 0); (("destProd", 1218), ((Tag1 (0, (Tag3 ((("types", 1134)), 0, (0)), 100000000, 0, -446), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -443)], (0)), 100000000, 0, -442); (Tag3 ((("types", 1134)), 0, (0)), 100000000, 0, -444); (Tag3 ((("types", 1134)), 0, (0)), 100000000, 0, -445)]), 100000000, 0, -441), 0), 100000000, 0, -440), 0, (("kernel/constr.mli", 357, 13752, 13752), ("kernel/constr.mli", 357, 13752, 13819), 0), 0, Tag1 ("Constr", 143)), 0); (("destLambda", 1219), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -439), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -436)], (0)), 100000000, 0, -435); (Tag3 ((("types", 1134)), 0, (0)), 100000000, 0, -437); (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -438)]), 100000000, 0, -434), 0), 100000000, 0, -433), 0, (("kernel/constr.mli", 360, 13879, 13879), ("kernel/constr.mli", 360, 13879, 13950), 0), 0, Tag1 ("Constr", 144)), 0); (("destLetIn", 1220), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -432), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -428)], (0)), 100000000, 0, -427); (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -429); (Tag3 ((("types", 1134)), 0, (0)), 100000000, 0, -430); (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -431)]), 100000000, 0, -426), 0), 100000000, 0, -425), 0, (("kernel/constr.mli", 363, 14005, 14005), ("kernel/constr.mli", 363, 14005, 14084), 0), 0, Tag1 ("Constr", 145)), 0); (("destApp", 1221), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -424), (Tag2 ([(Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -421); (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -423)], (0)), 100000000, 0, -422)]), 100000000, 0, -420), 0), 100000000, 0, -419), 0, (("kernel/constr.mli", 366, 14118, 14118), ("kernel/constr.mli", 366, 14118, 14163), 0), 0, Tag1 ("Constr", 146)), 0); (("decompose_app_list", 1222), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -418), (Tag2 ([(Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -415); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -417)], (0)), 100000000, 0, -416)]), 100000000, 0, -414), 0), 100000000, 0, -413), 0, (("kernel/constr.mli", 369, 14245, 14245), ("kernel/constr.mli", 369, 14245, 14300), 0), 0, Tag1 ("Constr", 147)), 0); (("decompose_app", 1223), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -412), (Tag2 ([(Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -409); (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -411)], (0)), 100000000, 0, -410)]), 100000000, 0, -408), 0), 100000000, 0, -407), 0, (("kernel/constr.mli", 372, 14356, 14356), ("kernel/constr.mli", 372, 14356, 14407), 0), 0, Tag1 ("Constr", 148)), 0); (("destConst", 1224), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -406), (Tag3 (Tag1 ((Tag2 ("Univ")), "puniverses"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -405)], (0)), 100000000, 0, -404), 0), 100000000, 0, -403), 0, (("kernel/constr.mli", 375, 14437, 14437), ("kernel/constr.mli", 375, 14437, 14489), 0), 0, Tag1 ("Constr", 149)), 0); (("destEvar", 1225), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -402), (Tag3 ((("existential", 1141)), 0, (0)), 100000000, 0, -401), 0), 100000000, 0, -400), 0, (("kernel/constr.mli", 378, 14532, 14532), ("kernel/constr.mli", 378, 14532, 14568), 0), 0, Tag1 ("Constr", 150)), 0); (("destInd", 1226), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -399), (Tag3 (Tag1 ((Tag2 ("Univ")), "puniverses"), [(Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -398)], (0)), 100000000, 0, -397), 0), 100000000, 0, -396), 0, (("kernel/constr.mli", 381, 14608, 14608), ("kernel/constr.mli", 381, 14608, 14657), 0), 0, Tag1 ("Constr", 151)), 0); (("destConstruct", 1227), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -395), (Tag3 (Tag1 ((Tag2 ("Univ")), "puniverses"), [(Tag3 (Tag1 ((Tag2 ("Names")), "constructor"), 0, (0)), 100000000, 0, -394)], (0)), 100000000, 0, -393), 0), 100000000, 0, -392), 0, (("kernel/constr.mli", 384, 14690, 14690), ("kernel/constr.mli", 384, 14690, 14747), 0), 0, Tag1 ("Constr", 152)), 0); (("destCase", 1228), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -391), (Tag3 ((("case", 1168)), 0, (0)), 100000000, 0, -390), 0), 100000000, 0, -389), 0, (("kernel/constr.mli", 391, 15032, 15032), ("kernel/constr.mli", 391, 15032, 15061), 0), 0, Tag1 ("Constr", 153)), 0); (("destProj", 1229), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -388), (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Projection"), "t"), 0, (0)), 100000000, 0, -386); (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -387)]), 100000000, 0, -385), 0), 100000000, 0, -384), 0, (("kernel/constr.mli", 394, 15093, 15093), ("kernel/constr.mli", 394, 15093, 15139), 0), 0, Tag1 ("Constr", 154)), 0); (("destFix", 1230), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -383), (Tag3 ((("fixpoint", 1174)), 0, (0)), 100000000, 0, -382), 0), 100000000, 0, -381), 0, (("kernel/constr.mli", 403, 15398, 15398), ("kernel/constr.mli", 403, 15398, 15430), 0), 0, Tag1 ("Constr", 155)), 0); (("destCoFix", 1231), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -380), (Tag3 ((("cofixpoint", 1176)), 0, (0)), 100000000, 0, -379), 0), 100000000, 0, -378), 0, (("kernel/constr.mli", 405, 15432, 15432), ("kernel/constr.mli", 405, 15432, 15468), 0), 0, Tag1 ("Constr", 156)), 0); (("destRef", 1232), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -377), (Tag3 (Tag1 ((Tag2 ("Univ")), "puniverses"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -376)], (0)), 100000000, 0, -375), 0), 100000000, 0, -374), 0, (("kernel/constr.mli", 407, 15470, 15470), ("kernel/constr.mli", 407, 15470, 15519), 0), 0, Tag1 ("Constr", 157)), 0); (("equal", 1233), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -373), (Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -372), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -371), 0), 100000000, 0, -370), 0), 100000000, 0, -369), 0, (("kernel/constr.mli", 413, 15636, 15636), ("kernel/constr.mli", 413, 15636, 15672), 0), 0, Tag1 ("Constr", 158)), 0); (("eq_constr_univs", 1234), ((Tag3 (Tag1 ((Tag2 ("UGraph")), "check_function"), [(Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -368)], (0)), 100000000, 0, -367), 0, (("kernel/constr.mli", 417, 15814, 15814), ("kernel/constr.mli", 417, 15814, 15864), 0), 0, Tag1 ("Constr", 159)), 0); (("leq_constr_univs", 1235), ((Tag3 (Tag1 ((Tag2 ("UGraph")), "check_function"), [(Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -366)], (0)), 100000000, 0, -365), 0, (("kernel/constr.mli", 421, 16021, 16021), ("kernel/constr.mli", 421, 16021, 16072), 0), 0, Tag1 ("Constr", 160)), 0); (("eq_constr_nounivs", 1236), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -364), (Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -363), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -362), 0), 100000000, 0, -361), 0), 100000000, 0, -360), 0, (("kernel/constr.mli", 425, 16209, 16209), ("kernel/constr.mli", 425, 16209, 16257), 0), 0, Tag1 ("Constr", 161)), 0); (("compare", 1237), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -359), (Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -358), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -357), 0), 100000000, 0, -356), 0), 100000000, 0, -355), 0, (("kernel/constr.mli", 428, 16305, 16305), ("kernel/constr.mli", 428, 16305, 16342), 0), 0, Tag1 ("Constr", 162)), 0); Tag1 (("rel_declaration", 1238), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Context")), "Rel"), "Declaration"), "pt"), [(Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -353); (Tag3 ((("types", 1134)), 0, (0)), 100000000, 0, -354)], (0)), 100000000, 0, -352)), 0, 0, 0, 0, (("kernel/constr.mli", 432, 16405, 16405), ("kernel/constr.mli", 432, 16405, 16470), 0), 0, 0, 0, Tag1 ("Constr", 163)), 1, 0); Tag1 (("named_declaration", 1239), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Context")), "Named"), "Declaration"), "pt"), [(Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -350); (Tag3 ((("types", 1134)), 0, (0)), 100000000, 0, -351)], (0)), 100000000, 0, -349)), 0, 0, 0, 0, (("kernel/constr.mli", 433, 16471, 16471), ("kernel/constr.mli", 433, 16471, 16540), 0), 0, 0, 0, Tag1 ("Constr", 164)), 1, 0); Tag1 (("compacted_declaration", 1240), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Context")), "Compacted"), "Declaration"), "pt"), [(Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -347); (Tag3 ((("types", 1134)), 0, (0)), 100000000, 0, -348)], (0)), 100000000, 0, -346)), 0, 0, 0, 0, (("kernel/constr.mli", 434, 16541, 16541), ("kernel/constr.mli", 434, 16541, 16618), 0), 0, 0, 0, Tag1 ("Constr", 165)), 1, 0); Tag1 (("rel_context", 1241), (0, 0, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("rel_declaration", 1238)), 0, (0)), 100000000, 0, -345)], (0)), 100000000, 0, -344)), 0, 0, 0, 0, (("kernel/constr.mli", 435, 16619, 16619), ("kernel/constr.mli", 435, 16619, 16658), 0), 0, 0, 0, Tag1 ("Constr", 166)), 1, 0); Tag1 (("named_context", 1242), (0, 0, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("named_declaration", 1239)), 0, (0)), 100000000, 0, -343)], (0)), 100000000, 0, -342)), 0, 0, 0, 0, (("kernel/constr.mli", 436, 16659, 16659), ("kernel/constr.mli", 436, 16659, 16702), 0), 0, 0, 0, Tag1 ("Constr", 167)), 1, 0); Tag1 (("compacted_context", 1243), (0, 0, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("compacted_declaration", 1240)), 0, (0)), 100000000, 0, -341)], (0)), 100000000, 0, -340)), 0, 0, 0, 0, (("kernel/constr.mli", 437, 16703, 16703), ("kernel/constr.mli", 437, 16703, 16754), 0), 0, 0, 0, Tag1 ("Constr", 168)), 1, 0); (("exliftn", 1244), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Esubst")), "lift"), 0, (0)), 100000000, 0, -339), (Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -338), (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -337), 0), 100000000, 0, -336), 0), 100000000, 0, -335), 0, (("kernel/constr.mli", 442, 16847, 16847), ("kernel/constr.mli", 442, 16847, 16892), 0), 0, Tag1 ("Constr", 169)), 0); (("liftn", 1245), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -334), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -333), (Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -332), (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -331), 0), 100000000, 0, -330), 0), 100000000, 0, -329), 0), 100000000, 0, -328), 0, (("kernel/constr.mli", 445, 16965, 16965), ("kernel/constr.mli", 445, 16965, 17007), 0), 0, Tag1 ("Constr", 170)), 0); (("lift", 1246), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -327), (Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -326), (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -325), 0), 100000000, 0, -324), 0), 100000000, 0, -323), 0, (("kernel/constr.mli", 448, 17068, 17068), ("kernel/constr.mli", 448, 17068, 17102), 0), 0, Tag1 ("Constr", 171)), 0); (("map_branches", 1247), ((Tag1 (0, (Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -322), (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -321), 0), 100000000, 0, -320), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("case_branch", 1167)), 0, (0)), 100000000, 0, -319)], (0)), 100000000, 0, -318), (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("case_branch", 1167)), 0, (0)), 100000000, 0, -317)], (0)), 100000000, 0, -316), 0), 100000000, 0, -315), 0), 100000000, 0, -314), 0, (("kernel/constr.mli", 460, 17616, 17616), ("kernel/constr.mli", 460, 17616, 17695), 0), 0, Tag1 ("Constr", 172)), 0); (("map_return_predicate", 1248), ((Tag1 (0, (Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -313), (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -312), 0), 100000000, 0, -311), (Tag1 (0, (Tag3 ((("case_return", 1166)), 0, (0)), 100000000, 0, -310), (Tag3 ((("case_return", 1166)), 0, (0)), 100000000, 0, -309), 0), 100000000, 0, -308), 0), 100000000, 0, -307), 0, (("kernel/constr.mli", 469, 18094, 18094), ("kernel/constr.mli", 469, 18094, 18169), 0), 0, Tag1 ("Constr", 173)), 0); (("map_branches_with_binders", 1249), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -301), ((("a")), 100000000, 0, -301), 0), 100000000, 0, -306), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -301), (Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -305), (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -304), 0), 100000000, 0, -303), 0), 100000000, 0, -302), (Tag1 (0, ((("a")), 100000000, 0, -301), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("case_branch", 1167)), 0, (0)), 100000000, 0, -300)], (0)), 100000000, 0, -299), (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("case_branch", 1167)), 0, (0)), 100000000, 0, -298)], (0)), 100000000, 0, -297), 0), 100000000, 0, -296), 0), 100000000, 0, -295), 0), 100000000, 0, -294), 0), 100000000, 0, -293), 0, (("kernel/constr.mli", 481, 18719, 18719), ("kernel/constr.mli", 481, 18719, 18837), 0), 0, Tag1 ("Constr", 174)), 0); (("map_return_predicate_with_binders", 1250), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -287), ((("a")), 100000000, 0, -287), 0), 100000000, 0, -292), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -287), (Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -291), (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -290), 0), 100000000, 0, -289), 0), 100000000, 0, -288), (Tag1 (0, ((("a")), 100000000, 0, -287), (Tag1 (0, (Tag3 ((("case_return", 1166)), 0, (0)), 100000000, 0, -286), (Tag3 ((("case_return", 1166)), 0, (0)), 100000000, 0, -285), 0), 100000000, 0, -284), 0), 100000000, 0, -283), 0), 100000000, 0, -282), 0), 100000000, 0, -281), 0, (("kernel/constr.mli", 493, 19396, 19396), ("kernel/constr.mli", 493, 19396, 19510), 0), 0, Tag1 ("Constr", 175)), 0); (("fold", 1251), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -276), (Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -280), ((("a")), 100000000, 0, -276), 0), 100000000, 0, -279), 0), 100000000, 0, -278), (Tag1 (0, ((("a")), 100000000, 0, -276), (Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -277), ((("a")), 100000000, 0, -276), 0), 100000000, 0, -275), 0), 100000000, 0, -274), 0), 100000000, 0, -273), 0, (("kernel/constr.mli", 501, 19794, 19794), ("kernel/constr.mli", 501, 19794, 19847), 0), 0, Tag1 ("Constr", 176)), 0); (("fold_invert", 1252), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -268), (Tag1 (0, ((("b")), 100000000, 0, -270), ((("a")), 100000000, 0, -268), 0), 100000000, 0, -272), 0), 100000000, 0, -271), (Tag1 (0, ((("a")), 100000000, 0, -268), (Tag1 (0, (Tag3 ((("pcase_invert", 1131)), [((("b")), 100000000, 0, -270)], (0)), 100000000, 0, -269), ((("a")), 100000000, 0, -268), 0), 100000000, 0, -267), 0), 100000000, 0, -266), 0), 100000000, 0, -265), 0, (("kernel/constr.mli", 503, 19849, 19849), ("kernel/constr.mli", 503, 19849, 19914), 0), 0, Tag1 ("Constr", 177)), 0); (("map", 1253), ((Tag1 (0, (Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -264), (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -263), 0), 100000000, 0, -262), (Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -261), (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -260), 0), 100000000, 0, -259), 0), 100000000, 0, -258), 0, (("kernel/constr.mli", 509, 20068, 20068), ("kernel/constr.mli", 509, 20068, 20116), 0), 0, Tag1 ("Constr", 178)), 0); (("map_invert", 1254), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -255), ((("a")), 100000000, 0, -255), 0), 100000000, 0, -257), (Tag1 (0, (Tag3 ((("pcase_invert", 1131)), [((("a")), 100000000, 0, -255)], (0)), 100000000, 0, -256), (Tag3 ((("pcase_invert", 1131)), [((("a")), 100000000, 0, -255)], (0)), 100000000, 0, -254), 0), 100000000, 0, -253), 0), 100000000, 0, -252), 0, (("kernel/constr.mli", 511, 20118, 20118), ("kernel/constr.mli", 511, 20118, 20183), 0), 0, Tag1 ("Constr", 179)), 0); (("fold_map", 1255), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -244), (Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -251), (Tag2 ([((("a")), 100000000, 0, -244); (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -250)]), 100000000, 0, -249), 0), 100000000, 0, -248), 0), 100000000, 0, -247), (Tag1 (0, ((("a")), 100000000, 0, -244), (Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -246), (Tag2 ([((("a")), 100000000, 0, -244); (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -245)]), 100000000, 0, -243), 0), 100000000, 0, -242), 0), 100000000, 0, -241), 0), 100000000, 0, -240), 0, (("kernel/constr.mli", 515, 20246, 20246), ("kernel/constr.mli", 515, 20246, 20321), 0), 0, Tag1 ("Constr", 180)), 0); (("fold_map_invert", 1256), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -233), (Tag1 (0, ((("b")), 100000000, 0, -235), (Tag2 ([((("a")), 100000000, 0, -233); ((("b")), 100000000, 0, -235)]), 100000000, 0, -239), 0), 100000000, 0, -238), 0), 100000000, 0, -237), (Tag1 (0, ((("a")), 100000000, 0, -233), (Tag1 (0, (Tag3 ((("pcase_invert", 1131)), [((("b")), 100000000, 0, -235)], (0)), 100000000, 0, -236), (Tag2 ([((("a")), 100000000, 0, -233); (Tag3 ((("pcase_invert", 1131)), [((("b")), 100000000, 0, -235)], (0)), 100000000, 0, -234)]), 100000000, 0, -232), 0), 100000000, 0, -231), 0), 100000000, 0, -230), 0), 100000000, 0, -229), 0, (("kernel/constr.mli", 517, 20323, 20323), ("kernel/constr.mli", 518, 20370, 20417), 0), 0, Tag1 ("Constr", 181)), 0); (("map_with_binders", 1257), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -223), ((("a")), 100000000, 0, -223), 0), 100000000, 0, -228), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -223), (Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -227), (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -226), 0), 100000000, 0, -225), 0), 100000000, 0, -224), (Tag1 (0, ((("a")), 100000000, 0, -223), (Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -222), (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -221), 0), 100000000, 0, -220), 0), 100000000, 0, -219), 0), 100000000, 0, -218), 0), 100000000, 0, -217), 0, (("kernel/constr.mli", 526, 20733, 20733), ("kernel/constr.mli", 527, 20756, 20822), 0), 0, Tag1 ("Constr", 182)), 0); (("iter", 1258), ((Tag1 (0, (Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -216), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -215), 0), 100000000, 0, -214), (Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -213), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -212), 0), 100000000, 0, -211), 0), 100000000, 0, -210), 0, (("kernel/constr.mli", 533, 20978, 20978), ("kernel/constr.mli", 533, 20978, 21023), 0), 0, Tag1 ("Constr", 183)), 0); (("iter_invert", 1259), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -207), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -209), 0), 100000000, 0, -208), (Tag1 (0, (Tag3 ((("pcase_invert", 1131)), [((("a")), 100000000, 0, -207)], (0)), 100000000, 0, -206), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -205), 0), 100000000, 0, -204), 0), 100000000, 0, -203), 0, (("kernel/constr.mli", 535, 21025, 21025), ("kernel/constr.mli", 535, 21025, 21082), 0), 0, Tag1 ("Constr", 184)), 0); (("iter_with_binders", 1260), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -197), ((("a")), 100000000, 0, -197), 0), 100000000, 0, -202), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -197), (Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -201), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -200), 0), 100000000, 0, -199), 0), 100000000, 0, -198), (Tag1 (0, ((("a")), 100000000, 0, -197), (Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -196), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -195), 0), 100000000, 0, -194), 0), 100000000, 0, -193), 0), 100000000, 0, -192), 0), 100000000, 0, -191), 0, (("kernel/constr.mli", 543, 21400, 21400), ("kernel/constr.mli", 544, 21424, 21486), 0), 0, Tag1 ("Constr", 185)), 0); (("fold_constr_with_binders", 1261), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -185), ((("a")), 100000000, 0, -185), 0), 100000000, 0, -190), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -185), (Tag1 (0, ((("b")), 100000000, 0, -183), (Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -189), ((("b")), 100000000, 0, -183), 0), 100000000, 0, -188), 0), 100000000, 0, -187), 0), 100000000, 0, -186), (Tag1 (0, ((("a")), 100000000, 0, -185), (Tag1 (0, ((("b")), 100000000, 0, -183), (Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -184), ((("b")), 100000000, 0, -183), 0), 100000000, 0, -182), 0), 100000000, 0, -181), 0), 100000000, 0, -180), 0), 100000000, 0, -179), 0), 100000000, 0, -178), 0, (("kernel/constr.mli", 552, 21804, 21804), ("kernel/constr.mli", 553, 21835, 21905), 0), 0, Tag1 ("Constr", 186)), 0); Tag1 (("constr_compare_fn", 1262), ([((("constr")), 100000000, 0, -176)], 1, 0, 1, ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -177), (Tag1 (0, ((("constr")), 100000000, 0, -176), (Tag1 (0, ((("constr")), 100000000, 0, -176), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -175), 0), 100000000, 0, -174), 0), 100000000, 0, -173), 0), 100000000, 0, -172)), [46], [0], 0, 0, (("kernel/constr.mli", 555, 21907, 21907), ("kernel/constr.mli", 555, 21907, 21973), 0), 0, 0, 0, Tag1 ("Constr", 187)), 1, 0); (("compare_head", 1263), ((Tag1 (0, (Tag1 (0, (Tag3 ((("existential", 1141)), 0, (0)), 100000000, 0, -171), (Tag1 (0, (Tag3 ((("existential", 1141)), 0, (0)), 100000000, 0, -170), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -169), 0), 100000000, 0, -168), 0), 100000000, 0, -167), (Tag1 (0, (Tag3 ((("constr_compare_fn", 1262)), [(Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -166)], (0)), 100000000, 0, -165), (Tag3 ((("constr_compare_fn", 1262)), [(Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -164)], (0)), 100000000, 0, -163), 0), 100000000, 0, -162), 0), 100000000, 0, -161), 0, (("kernel/constr.mli", 561, 22175, 22175), ("kernel/constr.mli", 561, 22175, 22286), 0), 0, Tag1 ("Constr", 188)), 0); Tag1 (("instance_compare_fn", 1264), ([((("univs")), 100000000, 0, -156)], 1, 0, 1, ((Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -159); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -160)]), 100000000, 0, -158)], (0)), 100000000, 0, -157), (Tag1 (0, ((("univs")), 100000000, 0, -156), (Tag1 (0, ((("univs")), 100000000, 0, -156), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -155), 0), 100000000, 0, -154), 0), 100000000, 0, -153), 0), 100000000, 0, -152)), [46], [0], 0, 0, (("kernel/constr.mli", 566, 22471, 22471), ("kernel/constr.mli", 567, 22533, 22559), 0), 0, 0, 0, Tag1 ("Constr", 189)), 1, 0); (("compare_head_gen", 1265), ((Tag1 (0, (Tag3 ((("instance_compare_fn", 1264)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Instance"), "t"), 0, (0)), 100000000, 0, -151)], (0)), 100000000, 0, -150), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sorts")), "t"), 0, (0)), 100000000, 0, -149), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sorts")), "t"), 0, (0)), 100000000, 0, -148), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -147), 0), 100000000, 0, -146), 0), 100000000, 0, -145), (Tag1 (0, (Tag1 (0, (Tag3 ((("existential", 1141)), 0, (0)), 100000000, 0, -144), (Tag1 (0, (Tag3 ((("existential", 1141)), 0, (0)), 100000000, 0, -143), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -142), 0), 100000000, 0, -141), 0), 100000000, 0, -140), (Tag1 (0, (Tag3 ((("constr_compare_fn", 1262)), [(Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -139)], (0)), 100000000, 0, -138), (Tag3 ((("constr_compare_fn", 1262)), [(Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -137)], (0)), 100000000, 0, -136), 0), 100000000, 0, -135), 0), 100000000, 0, -134), 0), 100000000, 0, -133), 0), 100000000, 0, -132), 0, (("kernel/constr.mli", 574, 22829, 22829), ("kernel/constr.mli", 578, 22997, 23023), 0), 0, Tag1 ("Constr", 190)), 0); (("compare_head_gen_leq_with", 1266), ((Tag1 (0, (Tag1 (0, ((("v")), 100000000, 0, -114), (Tag3 ((("kind_of_term", 1179)), [((("v")), 100000000, 0, -114); ((("v")), 100000000, 0, -114); ((("sort")), 100000000, 0, -125); ((("univs")), 100000000, 0, -127)], (0)), 100000000, 0, -131), 0), 100000000, 0, -130), (Tag1 (0, (Tag1 (0, ((("v")), 100000000, 0, -114), (Tag3 ((("kind_of_term", 1179)), [((("v")), 100000000, 0, -114); ((("v")), 100000000, 0, -114); ((("sort")), 100000000, 0, -125); ((("univs")), 100000000, 0, -127)], (0)), 100000000, 0, -129), 0), 100000000, 0, -128), (Tag1 (0, (Tag3 ((("instance_compare_fn", 1264)), [((("univs")), 100000000, 0, -127)], (0)), 100000000, 0, -126), (Tag1 (0, (Tag1 (0, ((("sort")), 100000000, 0, -125), (Tag1 (0, ((("sort")), 100000000, 0, -125), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -124), 0), 100000000, 0, -123), 0), 100000000, 0, -122), (Tag1 (0, (Tag1 (0, (Tag3 ((("pexistential", 1178)), [((("v")), 100000000, 0, -114)], (0)), 100000000, 0, -121), (Tag1 (0, (Tag3 ((("pexistential", 1178)), [((("v")), 100000000, 0, -114)], (0)), 100000000, 0, -120), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -119), 0), 100000000, 0, -118), 0), 100000000, 0, -117), (Tag1 (0, (Tag3 ((("constr_compare_fn", 1262)), [((("v")), 100000000, 0, -114)], (0)), 100000000, 0, -116), (Tag1 (0, (Tag3 ((("constr_compare_fn", 1262)), [((("v")), 100000000, 0, -114)], (0)), 100000000, 0, -115), (Tag3 ((("constr_compare_fn", 1262)), [((("v")), 100000000, 0, -114)], (0)), 100000000, 0, -113), 0), 100000000, 0, -112), 0), 100000000, 0, -111), 0), 100000000, 0, -110), 0), 100000000, 0, -109), 0), 100000000, 0, -108), 0), 100000000, 0, -107), 0), 100000000, 0, -106), 0, (("kernel/constr.mli", 580, 23025, 23025), ("kernel/constr.mli", 588, 23321, 23343), 0), 0, Tag1 ("Constr", 191)), 0); (("compare_head_gen_with", 1267), ((Tag1 (0, (Tag1 (0, ((("v")), 100000000, 0, -89), (Tag3 ((("kind_of_term", 1179)), [((("v")), 100000000, 0, -89); ((("v")), 100000000, 0, -89); ((("sort")), 100000000, 0, -99); ((("univs")), 100000000, 0, -101)], (0)), 100000000, 0, -105), 0), 100000000, 0, -104), (Tag1 (0, (Tag1 (0, ((("v")), 100000000, 0, -89), (Tag3 ((("kind_of_term", 1179)), [((("v")), 100000000, 0, -89); ((("v")), 100000000, 0, -89); ((("sort")), 100000000, 0, -99); ((("univs")), 100000000, 0, -101)], (0)), 100000000, 0, -103), 0), 100000000, 0, -102), (Tag1 (0, (Tag3 ((("instance_compare_fn", 1264)), [((("univs")), 100000000, 0, -101)], (0)), 100000000, 0, -100), (Tag1 (0, (Tag1 (0, ((("sort")), 100000000, 0, -99), (Tag1 (0, ((("sort")), 100000000, 0, -99), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -98), 0), 100000000, 0, -97), 0), 100000000, 0, -96), (Tag1 (0, (Tag1 (0, (Tag3 ((("pexistential", 1178)), [((("v")), 100000000, 0, -89)], (0)), 100000000, 0, -95), (Tag1 (0, (Tag3 ((("pexistential", 1178)), [((("v")), 100000000, 0, -89)], (0)), 100000000, 0, -94), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -93), 0), 100000000, 0, -92), 0), 100000000, 0, -91), (Tag1 (0, (Tag3 ((("constr_compare_fn", 1262)), [((("v")), 100000000, 0, -89)], (0)), 100000000, 0, -90), (Tag3 ((("constr_compare_fn", 1262)), [((("v")), 100000000, 0, -89)], (0)), 100000000, 0, -88), 0), 100000000, 0, -87), 0), 100000000, 0, -86), 0), 100000000, 0, -85), 0), 100000000, 0, -84), 0), 100000000, 0, -83), 0), 100000000, 0, -82), 0, (("kernel/constr.mli", 594, 23580, 23580), ("kernel/constr.mli", 601, 23846, 23868), 0), 0, Tag1 ("Constr", 192)), 0); (("compare_head_gen_leq", 1268), ((Tag1 (0, (Tag3 ((("instance_compare_fn", 1264)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Instance"), "t"), 0, (0)), 100000000, 0, -81)], (0)), 100000000, 0, -80), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sorts")), "t"), 0, (0)), 100000000, 0, -79), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sorts")), "t"), 0, (0)), 100000000, 0, -78), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -77), 0), 100000000, 0, -76), 0), 100000000, 0, -75), (Tag1 (0, (Tag1 (0, (Tag3 ((("existential", 1141)), 0, (0)), 100000000, 0, -74), (Tag1 (0, (Tag3 ((("existential", 1141)), 0, (0)), 100000000, 0, -73), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -72), 0), 100000000, 0, -71), 0), 100000000, 0, -70), (Tag1 (0, (Tag3 ((("constr_compare_fn", 1262)), [(Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -69)], (0)), 100000000, 0, -68), (Tag1 (0, (Tag3 ((("constr_compare_fn", 1262)), [(Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -67)], (0)), 100000000, 0, -66), (Tag3 ((("constr_compare_fn", 1262)), [(Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -65)], (0)), 100000000, 0, -64), 0), 100000000, 0, -63), 0), 100000000, 0, -62), 0), 100000000, 0, -61), 0), 100000000, 0, -60), 0), 100000000, 0, -59), 0, (("kernel/constr.mli", 610, 24261, 24261), ("kernel/constr.mli", 615, 24463, 24489), 0), 0, Tag1 ("Constr", 193)), 0); (("eq_invert", 1269), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -54), (Tag1 (0, ((("a")), 100000000, 0, -54), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -58), 0), 100000000, 0, -57), 0), 100000000, 0, -56), (Tag1 (0, (Tag3 ((("pcase_invert", 1131)), [((("a")), 100000000, 0, -54)], (0)), 100000000, 0, -55), (Tag1 (0, (Tag3 ((("pcase_invert", 1131)), [((("a")), 100000000, 0, -54)], (0)), 100000000, 0, -53), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -52), 0), 100000000, 0, -51), 0), 100000000, 0, -50), 0), 100000000, 0, -49), 0, (("kernel/constr.mli", 617, 24491, 24491), ("kernel/constr.mli", 618, 24526, 24573), 0), 0, Tag1 ("Constr", 194)), 0); Tag1 (("evar_expansion", 1270), ([((("a")), 100000000, 0, -46)], 1, Tag1 ([(("EvarDefined", 1039), ([((("a")), 100000000, 0, -46)]), 0, (("kernel/constr.mli", 621, 24600, 24600), ("kernel/constr.mli", 621, 24600, 24619), 0), 0, Tag1 ("Constr", 196)); (("EvarUndefined", 1040), ([(Tag3 (Tag1 ((Tag2 ("Evar")), "t"), 0, (0)), 100000000, 0, -47); (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -46)], (0)), 100000000, 0, -48)]), 0, (("kernel/constr.mli", 622, 24620, 24620), ("kernel/constr.mli", 622, 24620, 24655), 0), 0, Tag1 ("Constr", 197))], 0), 1, 0, [25], [0], 0, 0, (("kernel/constr.mli", 620, 24575, 24575), ("kernel/constr.mli", 622, 24620, 24655), 0), 0, 0, 0, Tag1 ("Constr", 195)), 1, 0); Tag1 (("evar_handler", 1271), ([((("constr")), 100000000, 0, -34)], 1, [[(("evar_expand", 1042), 0, (Tag1 (0, (Tag3 ((("pexistential", 1178)), [((("constr")), 100000000, 0, -34)], (0)), 100000000, 0, -35), (Tag3 ((("evar_expansion", 1270)), [((("constr")), 100000000, 0, -34)], (0)), 100000000, 0, -33), 0), 100000000, 0, -32), (("kernel/constr.mli", 625, 24687, 24689), ("kernel/constr.mli", 625, 24687, 24750), 0), 0, Tag1 ("Constr", 199)); (("evar_repack", 1043), 0, (Tag1 (0, (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evar")), "t"), 0, (0)), 100000000, 0, -38); (Tag3 ((Tag3 ("list", 9)), [((("constr")), 100000000, 0, -34)], (0)), 100000000, 0, -39)]), 100000000, 0, -37), ((("constr")), 100000000, 0, -34), 0), 100000000, 0, -36), (("kernel/constr.mli", 626, 24751, 24753), ("kernel/constr.mli", 626, 24751, 24800), 0), 0, Tag1 ("Constr", 200)); (("evar_relevant", 1044), 0, (Tag1 (0, (Tag3 ((("pexistential", 1178)), [((("constr")), 100000000, 0, -34)], (0)), 100000000, 0, -42), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -41), 0), 100000000, 0, -40), (("kernel/constr.mli", 627, 24801, 24803), ("kernel/constr.mli", 627, 24801, 24848), 0), 0, Tag1 ("Constr", 201)); (("qvar_relevant", 1052), 0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sorts")), "QVar"), "t"), 0, (0)), 100000000, 0, -45), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -44), 0), 100000000, 0, -43), (("kernel/constr.mli", 628, 24849, 24851), ("kernel/constr.mli", 628, 24849, 24888), 0), 0, Tag1 ("Constr", 202))]], 1, 0, [63], [0], 0, 0, (("kernel/constr.mli", 624, 24657, 24657), ("kernel/constr.mli", 629, 24889, 24890), 0), 0, 0, 0, Tag1 ("Constr", 198)), 1, 0); (("default_evar_handler", 1272), ((Tag3 ((("evar_handler", 1271)), [((("constr")), 100000000, 0, -31)], (0)), 100000000, 0, -30), 0, (("kernel/constr.mli", 631, 24892, 24892), ("kernel/constr.mli", 631, 24892, 24939), 0), 0, Tag1 ("Constr", 203)), 0); (("hash", 1273), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -29), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -28), 0), 100000000, 0, -27), 0, (("kernel/constr.mli", 635, 24965, 24965), ("kernel/constr.mli", 635, 24965, 24989), 0), 0, Tag1 ("Constr", 204)), 0); (("case_info_hash", 1274), ((Tag1 (0, (Tag3 ((("case_info", 1130)), 0, (0)), 100000000, 0, -26), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -25), 0), 100000000, 0, -24), 0, (("kernel/constr.mli", 636, 24990, 24990), ("kernel/constr.mli", 636, 24990, 25027), 0), 0, Tag1 ("Constr", 205)), 0); (("hcons", 1275), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -23), (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0, (("kernel/constr.mli", 640, 25102, 25102), ("kernel/constr.mli", 640, 25102, 25130), 0), 0, Tag1 ("Constr", 206)), 0); (("debug_print", 1276), ((Tag1 (0, (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -20), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -19), 0), 100000000, 0, -18), 0, (("kernel/constr.mli", 642, 25132, 25132), ("kernel/constr.mli", 642, 25132, 25164), 0), 0, Tag1 ("Constr", 207)), 0); (("debug_print_fix", 1277), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -15), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -17), 0), 100000000, 0, -16), (Tag1 (0, (Tag3 ((("pfixpoint", 1171)), [((("a")), 100000000, 0, -15); ((("a")), 100000000, 0, -15)], (0)), 100000000, 0, -14), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -13), 0), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("kernel/constr.mli", 643, 25165, 25165), ("kernel/constr.mli", 643, 25165, 25229), 0), 0, Tag1 ("Constr", 208)), 0); (("mkConst", 1278), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -10), (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("kernel/constr.mli", 645, 25231, 25231), ("kernel/constr.mli", 646, 25266, 25344), 0), [(("deprecated", (("kernel/constr.mli", 646, 25266, 25269), ("kernel/constr.mli", 646, 25266, 25279), 0)), ([([(Tag1 (Tag2 ("Use [mkConstU] or if truly needed [UnsafeMonomorphic.mkConst]", (("kernel/constr.mli", 646, 25266, 25281), ("kernel/constr.mli", 646, 25266, 25342), 0), 0)), (("kernel/constr.mli", 646, 25266, 25280), ("kernel/constr.mli", 646, 25266, 25343), 0), 0, 0)], (("kernel/constr.mli", 646, 25266, 25280), ("kernel/constr.mli", 646, 25266, 25343), 0))]), (("kernel/constr.mli", 646, 25266, 25266), ("kernel/constr.mli", 646, 25266, 25344), 0))], Tag1 ("Constr", 209)), 0); (("mkInd", 1279), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -7), (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("kernel/constr.mli", 648, 25346, 25346), ("kernel/constr.mli", 649, 25378, 25452), 0), [(("deprecated", (("kernel/constr.mli", 649, 25378, 25381), ("kernel/constr.mli", 649, 25378, 25391), 0)), ([([(Tag1 (Tag2 ("Use [mkIndU] or if truly needed [UnsafeMonomorphic.mkInd]", (("kernel/constr.mli", 649, 25378, 25393), ("kernel/constr.mli", 649, 25378, 25450), 0), 0)), (("kernel/constr.mli", 649, 25378, 25392), ("kernel/constr.mli", 649, 25378, 25451), 0), 0, 0)], (("kernel/constr.mli", 649, 25378, 25392), ("kernel/constr.mli", 649, 25378, 25451), 0))]), (("kernel/constr.mli", 649, 25378, 25378), ("kernel/constr.mli", 649, 25378, 25452), 0))], Tag1 ("Constr", 210)), 0); (("mkConstruct", 1280), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Names")), "constructor"), 0, (0)), 100000000, 0, -4), (Tag3 ((("constr", 1133)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("kernel/constr.mli", 651, 25454, 25454), ("kernel/constr.mli", 652, 25494, 25580), 0), [(("deprecated", (("kernel/constr.mli", 652, 25494, 25497), ("kernel/constr.mli", 652, 25494, 25507), 0)), ([([(Tag1 (Tag2 ("Use [mkConstructU] or if truly needed [UnsafeMonomorphic.mkConstruct]", (("kernel/constr.mli", 652, 25494, 25509), ("kernel/constr.mli", 652, 25494, 25578), 0), 0)), (("kernel/constr.mli", 652, 25494, 25508), ("kernel/constr.mli", 652, 25494, 25579), 0), 0, 0)], (("kernel/constr.mli", 652, 25494, 25508), ("kernel/constr.mli", 652, 25494, 25579), 0))]), (("kernel/constr.mli", 652, 25494, 25494), ("kernel/constr.mli", 652, 25494, 25580), 0))], Tag1 ("Constr", 211)), 0)], "Constr", [("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])
val mkConstruct : Names.constructor -> constr

type ('a, 'b) eq = ('a, 'b) Refl__Desc.eq = Eq : ('a, 'a) eq
type ('a, 'b, 'c) builtin_desc =
  ('a, 'b, 'c) Refl__Desc.builtin_desc =
    Bool : (bool, [ `Bool ], [> `Bool ]) builtin_desc
  | Bytes : (bytes, [ `Bytes ], [> `Bytes ]) builtin_desc
  | Char : (char, [ `Char ], [> `Char ]) builtin_desc
  | Float : (float, [ `Float ], [> `Float ]) builtin_desc
  | Int : (int, [ `Int ], [> `Int ]) builtin_desc
  | Int32 : (int32, [ `Int32 ], [> `Int32 ]) builtin_desc
  | Int64 : (int64, [ `Int64 ], [> `Int64 ]) builtin_desc
  | Nativeint : (nativeint, [ `Nativeint ], [> `Nativeint ]) builtin_desc
  | String : (string, [ `String ], [> `String ]) builtin_desc
type ('index, 'items, 'value, 'tail) selection =
  ('index, 'items, 'value, 'tail) Refl__Desc.selection =
    Start : ([ `Zero ], 'sequence, 'a, 'sequence) selection
  | Next :
      ('index, 'sequence, 'b, 'head * 'tail) selection -> ([ `Succ of 'index
                                                           ], 'sequence,
                                                           'head, 'tail)
                                                          selection
type ('index, 'items, 'value, 'tail) binary_selection =
  ('index, 'items, 'value, 'tail) Refl__Desc.binary_selection =
    BinaryStart : ([ `Start ], 'sequence, 'a, 'sequence) binary_selection
  | Zero :
      ('index, 'sequence, 'c, 'zero * 'one) binary_selection -> ([ `Zero of
                                                                    'index ],
                                                                 'sequence,
                                                                 'b, 'zero)
                                                                binary_selection
  | One :
      ('index, 'sequence, 'e, 'zero * 'one) binary_selection -> ([ `One of
                                                                    'index ],
                                                                 'sequence,
                                                                 'd, 'one)
                                                                binary_selection
  | Select :
      ('index, 'sequence, 'f, 'contents ref) binary_selection -> ([ `Select of
                                                                    'index ],
                                                                  'sequence,
                                                                  'contents,
                                                                  unit)
                                                                 binary_selection
type 'cases choice =
  'cases Refl__Desc.choice =
    CFirst : 'types -> ('types * 'a) choice
  | CNext : 'cases choice -> ('b * 'cases) choice
type 'cases binary_choice =
  'cases Refl__Desc.binary_choice =
    CEnd : 'types -> 'types ref binary_choice
  | CZero : 'cases binary_choice -> ('cases * 'a) binary_choice
  | COne : 'cases binary_choice -> ('b * 'cases) binary_choice
module type UnaryTypeS = Refl__Desc.UnaryTypeS
module Sequence = Refl__Desc.Sequence
module Delay = Refl__Desc.Delay
module Delays = Refl__Desc.Delays
type ('index, 'arity, 'a, 'positive, 'direct) variable =
  ('index, 'arity, 'a, 'positive, 'direct) Refl__Desc.variable =
    VFirst :
      ([ `Zero ], 'value * 'b, 'value, [ `Present ] * 'c, [ `Present ] * 'd)
      variable
  | VNext :
      ('index, 'sequence, 'value, 'positive, 'direct) variable -> ([ 
                                                                   `Succ of
                                                                    'index ],
                                                                   'e *
                                                                   'sequence,
                                                                   'value,
                                                                   'f *
                                                                   'positive,
                                                                   'g *
                                                                   'direct)
                                                                  variable
type ('count, 'types) length =
  ('count, 'types) Refl__Desc.length =
    Zero : ([ `Zero ], unit) length
  | Succ :
      ('length, 'types) length -> ([ `Succ of 'length ], 'a * 'types) length
type ('a, 'b, 'c) append =
  ('a, 'b, 'c) Refl__Desc.append =
    Nil : (unit, 'a, 'a) append
  | Add : ('a, 'b, 'c) append -> ('head * 'a, 'b, 'head * 'c) append
type ('global, 'local) presence =
  ('global, 'local) Refl__Desc.presence =
    Present : ([> `Present ], [ `Present ]) presence
  | Absent : ('a, [ `Absent ]) presence
type ('presence, 'directs) presences =
  ('presence, 'directs) Refl__Desc.presences =
    Presences : ('a, unit) presences
  | AddPresent :
      ('presence, 'directs) presences -> ([> `Present ] as 'presence,
                                          [ `Present ] * 'directs)
                                         presences
  | AddAbsent :
      ('presence, 'directs) presences -> ('presence, [ `Absent ] * 'directs)
                                         presences
type ('constraints, 'exists) gadt_constraints =
  ('constraints, 'exists) Refl__Desc.gadt_constraints = ..
type ('constraints, 'exists) gadt_constraints += NoConstraints
type ('gadt, 'sub_gadt) sub_gadt_ext =
  ('gadt, 'sub_gadt) Refl__Desc.sub_gadt_ext = ..
type ('gadt, 'sub_gadt) sub_gadt =
  ('gadt, 'sub_gadt) Refl__Desc.sub_gadt = {
  sub_gadt_ext : ('gadt, 'sub_gadt) sub_gadt_ext;
  sub_gadt_functional :
    'gadt0 'sub_gadt0 'sub_gadt1.
      ('gadt0, 'sub_gadt0) sub_gadt_ext ->
      ('gadt0, 'sub_gadt1) sub_gadt_ext -> ('sub_gadt0, 'sub_gadt1) eq;
}
type ('count, 'local, 'positive, 'negative, 'direct, 'positives, 'negatives,
      'directs, 'subpositive, 'subnegative, 'subdirect)
     subvariables =
  ('count, 'local, 'positive, 'negative, 'direct, 'positives, 'negatives,
   'directs, 'subpositive, 'subnegative, 'subdirect)
  Refl__Desc.subvariables = {
  presences : ('local, 'directs) presences;
  positive_count : ('count, 'positives) length;
  positive : ('positives, 'positive, 'subpositive) append;
  negative_count : ('count, 'negatives) length;
  negative : ('negatives, 'negative, 'subnegative) append;
  direct_count : ('count, 'directs) length;
  direct : ('directs, 'direct, 'subdirect) append;
}
module Kinds = Refl__Desc.Kinds
type ('a, 'arity, 'attribute) typed_attribute_kind =
  ('a, 'arity, 'attribute) Refl__Desc.typed_attribute_kind = ..
type 'a refl = 'a Refl__Desc.refl = ..
type ('source, 'sub, 'arg) transfer_argument =
  ('source, 'sub, 'arg) Refl__Desc.transfer_argument =
    Transfer : ('a, 'a, [ `Present ]) transfer_argument
  | Skip : ('b, 'c, [ `Absent ]) transfer_argument
type ('source, 'sub, 'arg) transfer_arguments =
  ('source, 'sub, 'arg) Refl__Desc.transfer_arguments =
    VTANil : (unit, 'a, unit) transfer_arguments
  | VTACons : { head : ('source, 'sub, 'arg) transfer_argument;
      tail : ('sources, 'sub, 'args) transfer_arguments;
    } -> ('source * 'sources, 'sub, 'arg * 'args) transfer_arguments
type ('p, 'n, 'sp, 'sn, 'ap, 'an) transfer_matrix =
  ('p, 'n, 'sp, 'sn, 'ap, 'an) Refl__Desc.transfer_matrix = {
  pp : ('p, 'sp, 'ap) transfer_arguments;
  pn : ('p, 'sn, 'an) transfer_arguments;
  np : ('n, 'sp, 'an) transfer_arguments;
  nn : ('n, 'sn, 'ap) transfer_arguments;
}
type ('positive, 'negative, 'direct, 'subpositive, 'subnegative, 'subdirect,
      'variables)
     transfer =
  ('positive, 'negative, 'direct, 'subpositive, 'subnegative, 'subdirect,
   'variables)
  Refl__Desc.transfer =
    VTNil : ('a, 'b, 'c, unit, unit, unit, unit) transfer
  | VTCons : {
      head :
        ('p, 'n, 'sp, 'sn, 'ap, 'an) transfer_matrix *
        ('d, 'sd, 'ad) transfer_arguments;
      tail : ('p, 'n, 'd, 'sps, 'sns, 'sds, 'variables) transfer;
    } -> ('p, 'n, 'd, 'sp * 'sps, 'sn * 'sns, 'sd * 'sds,
          ('ap * 'an * 'ad) * 'variables)
         transfer
type ('a, 'b) skip =
  ('a, 'b) Refl__Desc.skip =
    VKeep : ('a, 'a) skip
  | VSkip : ('a, [ `Absent ]) skip
type ('variables, 'skip_variables) skip_vector =
  ('variables, 'skip_variables) Refl__Desc.skip_vector =
    SKNil : (unit, unit) skip_vector
  | SKCons : { head : unit -> ('hd, 'skip_hd) skip;
      tail : ('a, 'b) skip_vector;
    } -> ('hd * 'a, 'skip_hd * 'b) skip_vector
type ('positive, 'negative, 'direct, 'skip_positive, 'skip_negative,
      'skip_direct, 'variables)
     transfer_skip =
  ('positive, 'negative, 'direct, 'skip_positive, 'skip_negative,
   'skip_direct, 'variables)
  Refl__Desc.transfer_skip =
    Transfer_skip : {
      transfer_vector :
        ('positive, 'negative, 'direct, 'subpositive, 'subnegative,
         'subdirect, 'variables)
        transfer;
      skip_positive : ('subpositive, 'skip_positive) skip_vector;
      skip_negative : ('subnegative, 'skip_negative) skip_vector;
      skip_direct : ('subdirect, 'skip_direct) skip_vector;
    } -> ('positive, 'negative, 'direct, 'skip_positive, 'skip_negative,
          'skip_direct, 'variables)
         transfer_skip
type ('a, 'structure, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
      'direct, 'gadt)
     desc =
  ('a, 'structure, 'arity, 'rec_group, 'kinds, 'positive, 'negative, 'direct,
   'gadt)
  Refl__Desc.desc =
    Variable :
      ('index, 'arity, 'a, 'positive, 'direct) variable -> ('a,
                                                            [ `Variable of
                                                                'index ],
                                                            'arity,
                                                            'rec_group,
                                                            [> `Variable ],
                                                            'positive, 'c,
                                                            'direct, 'd)
                                                           desc
  | Builtin :
      ('a, 'structure, 'kinds) builtin_desc -> ('a,
                                                [ `Builtin of 'structure ],
                                                'arity, 'rec_group, 'kinds,
                                                'e, 'f, 'g, 'h)
                                               desc
  | Array :
      ('a, 'structure, 'arity, 'rec_group, 'kinds, 'negative, 'positive,
       'negative, 'gadt)
      desc -> ('a array, [ `Array of 'structure ], 'arity, 'rec_group,
               [> `Array ] as 'kinds, 'negative, 'positive, 'negative, 'gadt)
              desc
  | Arrow : {
      parameter :
        ('a, 'a_structure, 'arity, 'rec_group, 'kinds, 'negative, 'positive,
         'negative, 'gadt)
        desc;
      result :
        ('b, 'b_structure, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
         'positive, 'gadt)
        desc;
    } -> ('a -> 'b, [ `Arrow of 'a_structure -> 'b_structure ], 'arity,
          'rec_group, [> `Arrow ] as 'kinds, 'positive, 'negative, 'i, 'gadt)
         desc
  | LabelledArrow : { label : string; optional : bool;
      parameter :
        ('a, 'a_structure, 'arity, 'rec_group, 'kinds, 'negative, 'positive,
         'negative, 'gadt)
        desc;
      result :
        ('b, 'b_structure, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
         'positive, 'gadt)
        desc;
      wrap : ('a -> 'b) -> 'arrow; unwrap : 'arrow -> 'a -> 'b;
    } -> ('arrow, [ `LabelledArrow of 'a_structure -> 'b_structure ], 'arity,
          'rec_group, [> `Arrow ] as 'kinds, 'positive, 'negative, 'j, 'gadt)
         desc
  | Constr : {
      constructors :
        ('cases, 'structures, 'arity, 'rec_group, 'kinds, 'positive,
         'negative, 'direct, 'gadt)
        constructors;
      construct : 'cases binary_choice -> 'a;
      destruct : 'a -> 'cases binary_choice;
    } -> ('a, [ `Constr of 'structures ], 'arity, 'rec_group,
          [> `Constr ] as 'kinds, 'positive, 'negative, 'direct, 'gadt)
         desc
  | Variant : {
      constructors :
        ('k * 'l, 'structures, 'arity, 'rec_group, 'kinds, 'positive,
         'negative, 'direct, 'gadt)
        variant_constructors;
      construct : ('k * 'l) choice -> 'a; destruct : 'a -> ('k * 'l) choice;
    } -> ('a, [ `Variant of 'structures ], 'arity, 'rec_group,
          [> `Variant ] as 'kinds, 'positive, 'negative, 'direct, 'gadt)
         desc
  | Tuple : {
      structure :
        ('m * ('n * 'o), 'structures, 'arity, 'rec_group, 'kinds, 'positive,
         'negative, 'direct, 'gadt)
        tuple_structure;
      construct : 'm * ('n * 'o) -> 'a; destruct : 'a -> 'm * ('n * 'o);
    } -> ('a, [ `Tuple of 'structures ], 'arity, 'rec_group,
          [> `Tuple ] as 'kinds, 'positive, 'negative, 'direct, 'gadt)
         desc
  | Record : {
      structure :
        ('p * 'q, 'structures, 'arity, 'rec_group, 'kinds, 'positive,
         'negative, 'direct, 'gadt)
        record_structure;
      construct : 'p * 'q -> 'a; destruct : 'a -> 'p * 'q;
    } -> ('a, [ `Record of 'structures ], 'arity, 'rec_group,
          [> `Record ] as 'kinds, 'positive, 'negative, 'direct, 'gadt)
         desc
  | Object : {
      methods :
        ('methods, 'structures, 'arity, 'rec_group, 'kinds, 'positive,
         'negative, 'direct, 'gadt)
        object_methods;
      construct : 'methods Delays.t -> 'a;
      destruct : 'a -> 'methods Delays.t;
    } -> (< .. > as 'a, [ `Object of 'structures ], 'arity, 'rec_group,
          [> `Object ] as 'kinds, 'positive, 'negative, 'direct, 'gadt)
         desc
  | Lazy :
      ('a, 'structure, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
       'direct, 'gadt)
      desc -> ('a Lazy.t, [ `Lazy of 'structure ], 'arity, 'rec_group,
               [> `Lazy ] as 'kinds, 'positive, 'negative, 'direct, 'gadt)
              desc
  | Apply : {
      arguments :
        ('types, 'structures, 'arity, 'rec_group, 'kinds, 'variables, 'gadt)
        vector;
      desc :
        ('a, 'structure, 'types, 'rec_group, 'kinds, 'subpositive,
         'subnegative, 'subdirect, 'gadt)
        desc;
      transfer :
        ('positive, 'negative, 'direct, 'subpositive, 'subnegative,
         'subdirect, 'variables)
        transfer_skip;
    } -> ('a,
          [ `Apply of
              'structure * 'structures * 'subpositive * 'subnegative *
              'subdirect * 'variables ],
          'arity, 'rec_group, 'kinds, 'positive, 'negative, 'direct, 'gadt)
         desc
  | MapOpaque : {
      desc :
        ('a, 'structure, 'arity, 'rec_group, Kinds.all, 'positive, 'negative,
         'direct, 'gadt)
        desc;
    } -> ('a, [ `MapOpaque of 'structure * 'direct ], 'arity, 'rec_group,
          [> `MapOpaque ], 'positive, 'negative, 'r, 'gadt)
         desc
  | Opaque :
      ([ `Succ of 'index ], 'gadt, 'a, 't) selection -> ('a,
                                                         [ `Opaque of 'index
                                                         ], 'arity,
                                                         'rec_group,
                                                         [> `Opaque ],
                                                         'positive,
                                                         'negative, 's,
                                                         'gadt)
                                                        desc
  | Rec : {
      index :
        ([ `Select of 'index ], 'rec_group, 'length * 'structure, 'u)
        binary_selection;
      desc :
        ('a, 'structure, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
         'direct, 'gadt)
        desc;
    } -> ('a, [ `Rec of 'index ], 'arity, 'rec_group, 'kinds, 'positive,
          'negative, 'direct, 'gadt)
         desc
  | RecGroup : {
      desc :
        ('a, 'structure, 'arity, 'new_rec_group, 'kinds, 'positive,
         'negative, 'direct, 'gadt)
        desc;
    } -> ('a, [ `RecGroup of 'structure * 'new_rec_group ], 'arity,
          'rec_group, 'kinds, 'positive, 'negative, 'direct, 'gadt)
         desc
  | SelectGADT : {
      index : ([ `Succ of 'index ], 'gadt, 'sub_gadt, 'v) selection;
      desc :
        ('a, 'structure, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
         'direct, 'sub_gadt)
        desc;
    } -> ('a, [ `SelectGADT of 'structure * 'index ], 'arity, 'rec_group,
          'kinds, 'positive, 'negative, 'direct, 'gadt)
         desc
  | SubGADT : { sub_gadt : ('gadt, 'sub_gadt) sub_gadt;
      desc :
        ('a, 'structure, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
         'direct, 'sub_gadt)
        desc;
    } -> ('a, [ `SubGADT of 'structure ], 'arity, 'rec_group, 'kinds,
          'positive, 'negative, 'direct, 'gadt)
         desc
  | Attributes : {
      attributes :
        ('a, 'arity, 'rec_group, 'kinds, 'positive, 'negative, 'direct,
         'gadt)
        attributes;
      desc :
        ('a, 'structure, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
         'direct, 'gadt)
        desc;
    } -> ('a, [ `Attributes of 'structure ], 'arity, 'rec_group,
          [> `Attributes ] as 'kinds, 'positive, 'negative, 'direct, 'gadt)
         desc
  | Name : { name : string; refl : 'a refl;
      desc :
        ('a, 'structure, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
         'direct, 'sub_gadt)
        desc;
    } -> ('a, [ `Name of 'structure ], 'arity, 'rec_group, 'kinds, 'positive,
          'negative, 'direct, 'sub_gadt)
         desc
and ('cases, 'structures, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
     'direct, 'gadt)
    constructors =
  ('cases, 'structures, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
   'direct, 'gadt)
  Refl__Desc.constructors =
    CLeaf :
      ('types_and_eqs, 'structure, 'arity, 'rec_group, 'kinds, 'positive,
       'negative, 'direct, 'gadt)
      constructor -> ('types_and_eqs ref, 'structure ref, 'arity, 'rec_group,
                      'kinds, 'positive, 'negative, 'direct, 'gadt)
                     constructors
  | CNode : {
      zero :
        ('cases0, 'structures0, 'arity, 'rec_group, 'kinds, 'positive,
         'negative, 'direct, 'gadt)
        constructors;
      one :
        ('cases1, 'structures1, 'arity, 'rec_group, 'kinds, 'positive,
         'negative, 'direct, 'gadt)
        constructors;
    } -> ('cases0 * 'cases1, 'structures0 * 'structures1, 'arity, 'rec_group,
          'kinds, 'positive, 'negative, 'direct, 'gadt)
         constructors
and ('types_and_eqs, 'structure, 'arity, 'rec_group, 'kinds, 'positive,
     'negative, 'direct, 'gadt)
    constructor =
  ('types_and_eqs, 'structure, 'arity, 'rec_group, 'kinds, 'positive,
   'negative, 'direct, 'gadt)
  Refl__Desc.constructor =
    Constructor : { name : string;
      kind :
        ('types, 'structure_types, 'arity, 'rec_group, 'kinds, 'positive,
         'negative, 'direct, 'gadt)
        constructor_kind;
      eqs : ('eqs, 'structure_eqs, 'kinds, 'gadt) constructor_eqs;
      attributes :
        ('types, 'arity, 'rec_group, 'kinds, 'positive, 'negative, 'direct,
         'gadt)
        attributes;
    } -> ('types * 'eqs,
          [ `Constructor of 'structure_types * 'structure_eqs ], 'arity,
          'rec_group, 'kinds, 'positive, 'negative, 'direct, 'gadt)
         constructor
  | Exists : { name : string;
      selection : ([ `Succ of 'index ], 'gadt, 'constraints, 'a) selection;
      presence : ('kinds, 'local) presence;
      variables :
        ('count, 'local, 'positive, 'negative, 'direct, 'positives,
         'negatives, 'directs, 'subpositive, 'subnegative, 'subdirect)
        subvariables;
      construct :
        'exists 'subarity.
          ('count, 'exists) length ->
          ('constraints, 'exists) gadt_constraints ->
          ('exists, 'arity, 'subarity) append ->
          ('value, 'structure, 'subarity, 'rec_group, 'kinds, 'subpositive,
           'subnegative, 'subdirect, 'gadt)
          exists_construct;
      destruct :
        'value ->
        ('count, 'constraints, 'value, 'structure, 'arity, 'rec_group,
         'kinds, 'subpositive, 'subnegative, 'subdirect, 'gadt)
        exists_destruct;
    } -> ('value,
          [ `Exists of
              'index * 'count * 'structure * 'local * 'positives *
              'negatives * 'directs ],
          'arity, 'rec_group, [> `Exists ] as 'kinds, 'positive, 'negative,
          'direct, 'gadt)
         constructor
and ('value, 'structure, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
     'direct, 'gadt)
    exists_construct =
  ('value, 'structure, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
   'direct, 'gadt)
  Refl__Desc.exists_construct =
    ExistsConstruct : {
      kind :
        ('types, 'structure, 'arity, 'rec_group, 'kinds, 'positive,
         'negative, 'direct, 'gadt)
        constructor_kind;
      construct : 'types -> 'value;
    } -> ('value, 'structure, 'arity, 'rec_group, 'kinds, 'positive,
          'negative, 'direct, 'gadt)
         exists_construct
and ('count, 'constraints, 'value, 'structure, 'arity, 'rec_group, 'kinds,
     'positive, 'negative, 'direct, 'gadt)
    exists_destruct =
  ('count, 'constraints, 'value, 'structure, 'arity, 'rec_group, 'kinds,
   'positive, 'negative, 'direct, 'gadt)
  Refl__Desc.exists_destruct =
    ExistsDestruct : { exists_count : ('count, 'exists) length;
      exists : ('exists, 'arity, 'subarity) append;
      constraints : ('constraints, 'exists) gadt_constraints;
      kind :
        ('types, 'structure, 'subarity, 'rec_group, 'kinds, 'positive,
         'negative, 'direct, 'gadt)
        constructor_kind;
      values : 'types;
    } -> ('count, 'constraints, 'value, 'structure, 'arity, 'rec_group,
          'kinds, 'positive, 'negative, 'direct, 'gadt)
         exists_destruct
and ('types, 'structure, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
     'direct, 'gadt)
    constructor_kind =
  ('types, 'structure, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
   'direct, 'gadt)
  Refl__Desc.constructor_kind =
    CTuple :
      ('types, 'structure, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
       'direct, 'gadt)
      tuple_structure -> ('types, [ `Tuple of 'structure ], 'arity,
                          'rec_group, 'kinds, 'positive, 'negative, 'direct,
                          'gadt)
                         constructor_kind
  | CRecord :
      ('types, 'structure, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
       'direct, 'gadt)
      record_structure -> ('types, [ `Record of 'structure ], 'arity,
                           'rec_group, 'kinds, 'positive, 'negative, 'direct,
                           'gadt)
                          constructor_kind
and ('types, 'structures, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
     'direct, 'gadt)
    tuple_structure =
  ('types, 'structures, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
   'direct, 'gadt)
  Refl__Desc.tuple_structure =
    TNil :
      (unit, unit, 'arity, 'rec_group, 'kinds, 'positive, 'negative, 'direct,
       'gadt)
      tuple_structure
  | TCons : {
      head :
        ('a, 'structure, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
         'direct, 'gadt)
        desc;
      tail :
        ('types, 'structures, 'arity, 'rec_group, 'kinds, 'positive,
         'negative, 'direct, 'gadt)
        tuple_structure;
    } -> ('a * 'types, 'structure * 'structures, 'arity, 'rec_group, 'kinds,
          'positive, 'negative, 'direct, 'gadt)
         tuple_structure
and ('types, 'structures, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
     'direct, 'gadt)
    record_structure =
  ('types, 'structures, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
   'direct, 'gadt)
  Refl__Desc.record_structure =
    RNil :
      (unit, unit, 'arity, 'rec_group, 'kinds, 'positive, 'negative, 'direct,
       'gadt)
      record_structure
  | RCons : {
      head :
        ('a, 'structure, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
         'direct, 'gadt)
        record_field;
      tail :
        ('types, 'structures, 'arity, 'rec_group, 'kinds, 'positive,
         'negative, 'direct, 'gadt)
        record_structure;
    } -> ('a * 'types, 'structure * 'structures, 'arity, 'rec_group, 'kinds,
          'positive, 'negative, 'direct, 'gadt)
         record_structure
and ('a, 'structure, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
     'direct, 'gadt)
    record_field =
  ('a, 'structure, 'arity, 'rec_group, 'kinds, 'positive, 'negative, 'direct,
   'gadt)
  Refl__Desc.record_field =
    Mono : { label : string;
      desc :
        ('a, 'structure, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
         'direct, 'gadt)
        desc;
      attributes :
        ('a, 'arity, 'rec_group, 'kinds, 'positive, 'negative, 'direct,
         'gadt)
        attributes;
    } -> ('a, [ `Mono of 'structure ], 'arity, 'rec_group, 'kinds, 'positive,
          'negative, 'direct, 'gadt)
         record_field
  | Poly : { label : string;
      variables :
        ('count, [ `Absent ], 'positive, 'negative, 'direct, 'positives,
         'negatives, 'directs, 'subpositive, 'subnegative, 'subdirect)
        subvariables;
      destruct :
        ('a, 'structure, 'arity, 'rec_group, 'kinds, 'subpositive,
         'subnegative, 'subdirect, 'gadt, 'count)
        forall_destruct;
      construct :
        ('a, 'structure, 'arity, 'rec_group, 'kinds, 'subpositive,
         'subnegative, 'subdirect, 'gadt, 'count)
        forall_construct -> 'a;
    } -> ('a,
          [ `Poly of 'structure * 'count * 'positives * 'negatives * 'directs
          ], 'arity, 'rec_group, [> `Poly ] as 'kinds, 'positive, 'negative,
          'direct, 'gadt)
         record_field
and ('a, 'structure, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
     'direct, 'gadt, 'count)
    forall_construct =
  ('a, 'structure, 'arity, 'rec_group, 'kinds, 'positive, 'negative, 'direct,
   'gadt, 'count)
  Refl__Desc.forall_construct = {
  forall_construct :
    'forall 'b 'subarity.
      ('count, 'forall) length ->
      ('forall, 'arity, 'subarity) append ->
      ('b, 'structure, 'subarity, 'rec_group, 'kinds, 'positive, 'negative,
       'direct, 'gadt)
      desc -> 'b;
}
and ('a, 'structure, 'arity, 'rec_group, 'kinds, 'subpositive, 'subnegative,
     'subdirect, 'gadt, 'count)
    forall_destruct =
  ('a, 'structure, 'arity, 'rec_group, 'kinds, 'subpositive, 'subnegative,
   'subdirect, 'gadt, 'count)
  Refl__Desc.forall_destruct = {
  forall_destruct :
    'forall 'subarity.
      ('count, 'forall) length ->
      ('forall, 'arity, 'subarity) append ->
      ('a, 'structure, 'subarity, 'rec_group, 'kinds, 'subpositive,
       'subnegative, 'subdirect, 'gadt)
      forall_destruct_result;
}
and ('a, 'structure, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
     'direct, 'gadt)
    forall_destruct_result =
  ('a, 'structure, 'arity, 'rec_group, 'kinds, 'positive, 'negative, 'direct,
   'gadt)
  Refl__Desc.forall_destruct_result =
    ForallDestruct : {
      desc :
        ('b, 'structure, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
         'direct, 'gadt)
        desc;
      destruct : 'a -> 'b;
    } -> ('a, 'structure, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
          'direct, 'gadt)
         forall_destruct_result
and ('cases, 'structures, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
     'direct, 'gadt)
    variant_constructors =
  ('cases, 'structures, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
   'direct, 'gadt)
  Refl__Desc.variant_constructors =
    VCNil :
      (unit, unit, 'arity, 'rec_group, 'kinds, 'positive, 'negative, 'direct,
       'gadt)
      variant_constructors
  | VCCons : {
      head :
        ('types, 'structure, 'arity, 'rec_group, 'kinds, 'positive,
         'negative, 'direct, 'gadt)
        variant_constructor;
      tail :
        ('cases, 'structures, 'arity, 'rec_group, 'kinds, 'positive,
         'negative, 'direct, 'gadt)
        variant_constructors;
    } -> ('types * 'cases, 'structure * 'structures, 'arity, 'rec_group,
          'kinds, 'positive, 'negative, 'direct, 'gadt)
         variant_constructors
and ('types, 'structure, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
     'direct, 'gadt)
    variant_constructor =
  ('types, 'structure, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
   'direct, 'gadt)
  Refl__Desc.variant_constructor =
    VConstructor : { name : string;
      argument :
        ('types, 'structures, 'arity, 'rec_group, 'kinds, 'positive,
         'negative, 'direct, 'gadt)
        variant_argument;
    } -> ('types, [ `Constr of 'structures ], 'arity, 'rec_group, 'kinds,
          'positive, 'negative, 'direct, 'gadt)
         variant_constructor
  | VInherit :
      ('a, 'structure, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
       'direct, 'gadt)
      desc -> ('a, [ `Inherit of 'structure ], 'arity, 'rec_group, 'kinds,
               'positive, 'negative, 'direct, 'gadt)
              variant_constructor
and ('types, 'structures, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
     'direct, 'gadt)
    variant_argument =
  ('types, 'structures, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
   'direct, 'gadt)
  Refl__Desc.variant_argument =
    VNone :
      (unit, unit, 'arity, 'rec_group, 'kinds, 'positive, 'negative, 'direct,
       'gadt)
      variant_argument
  | VSome :
      ('a, 'structure, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
       'direct, 'gadt)
      desc -> ('a * unit, 'structure * unit, 'arity, 'rec_group, 'kinds,
               'positive, 'negative, 'direct, 'gadt)
              variant_argument
and ('methods, 'structures, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
     'direct, 'gadt)
    object_methods =
  ('methods, 'structures, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
   'direct, 'gadt)
  Refl__Desc.object_methods =
    ONil :
      (unit, unit, 'arity, 'rec_group, 'kinds, 'positive, 'negative, 'direct,
       'gadt)
      object_methods
  | OCons : {
      head :
        ('a, 'structure, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
         'direct, 'gadt)
        object_method;
      tail :
        ('methods, 'structures, 'arity, 'rec_group, 'kinds, 'positive,
         'negative, 'direct, 'gadt)
        object_methods;
    } -> ('a * 'methods, 'structure * 'structures, 'arity, 'rec_group,
          'kinds, 'positive, 'negative, 'direct, 'gadt)
         object_methods
and ('types, 'structure, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
     'direct, 'gadt)
    object_method =
  ('types, 'structure, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
   'direct, 'gadt)
  Refl__Desc.object_method =
    OMethod : { name : string;
      desc :
        ('a, 'structures, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
         'direct, 'gadt)
        desc;
    } -> ('a, [ `Method of 'structures ], 'arity, 'rec_group, 'kinds,
          'positive, 'negative, 'direct, 'gadt)
         object_method
and ('types, 'structures, 'arity, 'rec_group, 'kinds, 'variables, 'gadt)
    vector =
  ('types, 'structures, 'arity, 'rec_group, 'kinds, 'variables, 'gadt)
  Refl__Desc.vector =
    VNil : (unit, unit, 'arity, 'rec_group, 'kinds, unit, 'gadt) vector
  | VCons : {
      head :
        ('a, 'structure, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
         'direct, 'gadt)
        desc;
      tail :
        ('types, 'structures, 'arity, 'rec_group, 'kinds, 'variables, 'gadt)
        vector;
    } -> ('a * 'types, 'structure * 'structures, 'arity, 'rec_group, 'kinds,
          ('positive * 'negative * 'direct) * 'variables, 'gadt)
         vector
and ('eqs, 'structure_eqs, 'kinds, 'gadt) constructor_eqs =
  ('eqs, 'structure_eqs, 'kinds, 'gadt) Refl__Desc.constructor_eqs =
    ENil : (unit, unit, 'kinds, 'gadt) constructor_eqs
  | ECons : { head : ([ `Succ of 'index ], 'gadt, 'eq, 'a) selection;
      tail : ('eqs, 'structure_eqs, 'kinds, 'gadt) constructor_eqs;
    } -> ('eq * 'eqs, 'index * 'structure_eqs, [> `GADT ] as 'kinds, 'gadt)
         constructor_eqs
and ('a, 'arity, 'rec_group, 'kinds, 'positive, 'negative, 'direct, 'gadt)
    attributes =
  ('a, 'arity, 'rec_group, 'kinds, 'positive, 'negative, 'direct, 'gadt)
  Refl__Desc.attributes = {
  typed :
    'attribute.
      ('a, 'arity, 'attribute) typed_attribute_kind -> 'attribute option;
}
module Builtins = Refl__.Builtins
module Tools = Refl__.Tools
exception Incompatible
val selection :
  ([ `Succ of 'index_a ], 'sequence, 'head_a, 'tail_a) Refl__.Desc.selection ->
  ([ `Succ of 'index_b ], 'sequence, 'head_b, 'tail_b) Refl__.Desc.selection ->
  ('head_a, 'head_b) Refl__.Desc.eq
val convert_eqs :
  ('a_eqs, 'structure_eqs_a, 'kinds_a, 'gadt) Refl__.Desc.constructor_eqs ->
  ('b_eqs, 'structure_eqs_b, 'kinds_b, 'gadt) Refl__.Desc.constructor_eqs ->
  'a_eqs -> 'b_eqs
val convert_presence :
  ('global_a, 'local_a) Refl__.Desc.presence ->
  ('global_b, 'local_b) Refl__.Desc.presence ->
  ('local_a, 'local_b) Refl__.Desc.eq
val convert_presences :
  ('global, 'local_a) Refl__.Desc.presences ->
  ('global, 'local_b) Refl__.Desc.presences ->
  ('local_a, 'local_b) Refl__.Desc.eq
module Converter = Refl__Convert.Converter
module Converters = Refl__Convert.Converters
type ('arity_a, 'arity_b) converters =
  ('arity_a, 'arity_b) Refl__Convert.converters =
    SameArity of ('arity_a, 'arity_b) Refl__.Desc.eq
  | Converters of ('arity_a, 'arity_b) Converters.t
type ('forall, 'arity_a, 'arity_b) make_variables =
  ('forall, 'arity_a, 'arity_b) Refl__Convert.make_variables =
    MakeVariables : {
      subarity_a : ('forall, 'arity_a, 'subarity_a) Refl__.Desc.append;
      subarity_b : ('forall, 'arity_b, 'subarity_b) Refl__.Desc.append;
      converters : ('subarity_a, 'subarity_b) converters;
    } -> ('forall, 'arity_a, 'arity_b) make_variables
val reverse :
  ('arity_a, 'arity_b) converters -> ('arity_b, 'arity_a) converters
val make_variables :
  ('count, 'forall) Refl__.Desc.length ->
  ('arity_a, 'arity_b) converters ->
  ('forall, 'arity_a, 'arity_b) make_variables
val convert :
  ('a_struct, 'structure_a, 'arity_a, 'rec_group_a, 'kinds_a, 'positive_a,
   'negative_a, 'direct_a, 'gadt_a)
  Refl__.Desc.desc ->
  ('b_struct, 'structure_b, 'arity_b, 'rec_group_b, 'kinds_b, 'positive_b,
   'negative_b, 'direct_b, 'gadt_b)
  Refl__.Desc.desc ->
  ('arity_a, 'arity_b) converters ->
  ('gadt_a, 'gadt_b) Refl__.Desc.eq option ->
  ('a_struct, 'b_struct) Converter.t
val transfer :
  ('a, 'structures_a, 'arity_a, 'rec_group_a, 'kinds_a, 'variables_a,
   'gadt_a)
  Refl__.Desc.vector ->
  ('b, 'structures_b, 'arity_b, 'rec_group_b, 'kinds_b, 'variables_b,
   'gadt_b)
  Refl__.Desc.vector ->
  ('arity_a, 'arity_b) converters ->
  ('gadt_a, 'gadt_b) Refl__.Desc.eq option -> ('a, 'b) Converters.t
val cast :
  ('a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i) Refl__.Desc.desc ->
  ('j, 'k, 'c, 'l, 'm, 'n, 'o, 'p, 'i) Refl__.Desc.desc -> 'a -> 'j
module Mapper = Refl__Map.Mapper
module Mappers = Refl__Map.Mappers
val map :
  ('a_struct, 'structure, 'a_arity, 'rec_group, 'kinds, 'positive, 'negative,
   'direct, 'gadt)
  Refl__.Desc.desc ->
  ('b_struct, 'structure, 'b_arity, 'rec_group, 'kinds, 'positive, 'negative,
   'direct, 'gadt)
  Refl__.Desc.desc ->
  ('a_arity, 'b_arity, 'positive, 'negative) Mappers.t ->
  ('a_struct, 'b_struct) Mapper.t
module Printer = Refl__Show.Printer
module Printers = Refl__Show.Printers
module PrinterSequence = Refl__Show.PrinterSequence
type ('a, 'arity, 'b) Refl__.Desc.typed_attribute_kind +=
    Attribute_printer :
      ('a, 'arity, 'a Printer.t) Refl__.Desc.typed_attribute_kind
  | Attribute_polyprinter :
      ('a, 'arity, 'arity PrinterSequence.t -> 'a Printer.t)
      Refl__.Desc.typed_attribute_kind
type 'kinds value =
  'kinds Refl__Show.value =
    Value : {
      desc :
        ('a, 'structure, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
         'direct, 'gadt)
        Refl__.Desc.desc;
      value : 'a; printers : ('arity, 'direct) Printers.t;
    } -> 'kinds value
val pp :
  ('a, 'structure, 'arity, 'rec_group,
   [> `Array
    | `Arrow
    | `Attributes
    | `Bool
    | `Bytes
    | `Char
    | `Constr
    | `Exists
    | `Float
    | `Int
    | `Int32
    | `Int64
    | `Lazy
    | `MapOpaque
    | `Nativeint
    | `Object
    | `Opaque
    | `Poly
    | `Record
    | `String
    | `Tuple
    | `Variable
    | `Variant ],
   'positive, 'negative, 'direct, 'gadt)
  Refl__.Desc.desc -> ('arity, 'direct) Printers.t -> 'a Printer.t
val show :
  ('a, 'b, 'c, 'd,
   [> `Array
    | `Arrow
    | `Attributes
    | `Bool
    | `Bytes
    | `Char
    | `Constr
    | `Exists
    | `Float
    | `Int
    | `Int32
    | `Int64
    | `Lazy
    | `MapOpaque
    | `Nativeint
    | `Object
    | `Opaque
    | `Poly
    | `Record
    | `String
    | `Tuple
    | `Variable
    | `Variant ],
   'e, 'f, 'g, 'h)
  Refl__.Desc.desc -> ('c, 'g) Printers.t -> 'a -> string
module Compare = Refl__.Compare
module Comparer = Compare.Comparer
module Comparers = Compare.Comparers
val compare_gen :
  ?hook:Compare.hook ->
  ('a, 'b, 'c, 'd,
   [< Refl__.Desc.Kinds.comparable
    > `Array `Attributes `Bool `Bytes `Char `Constr `Exists `Float `Int
      `Int32 `Int64 `Lazy `MapOpaque `Nativeint `Object `Opaque `Record
      `String `Tuple `Variable `Variant ]
   as 'e, 'f, 'g, 'h, 'i)
  Refl__.Desc.desc ->
  ('j, 'b, 'k, 'd, 'e, 'f, 'g, 'h, 'l) Refl__.Desc.desc ->
  ('c, 'i, 'k, 'l) Compare.poly ->
  ('c, 'k, 'h) Compare.Comparers.t -> ('a, 'j) Compare.Comparer.t
val compare_poly :
  ?hook:Compare.hook ->
  ('a, 'b, 'c, 'd,
   [< Refl__.Desc.Kinds.comparable
    > `Array `Attributes `Bool `Bytes `Char `Constr `Exists `Float `Int
      `Int32 `Int64 `Lazy `MapOpaque `Nativeint `Object `Opaque `Record
      `String `Tuple `Variable `Variant ]
   as 'e, 'f, 'g, 'h, 'i)
  Refl__.Desc.desc ->
  ('j, 'b, 'k, 'd, 'e, 'f, 'g, 'h, 'l) Refl__.Desc.desc ->
  ('c, 'k, 'h) Compare.Comparers.t -> ('a, 'j) Compare.Comparer.t
val compare :
  ?hook:Compare.hook ->
  ('a, 'b, 'c, 'd,
   [< Refl__.Desc.Kinds.comparable
    > `Array `Attributes `Bool `Bytes `Char `Constr `Exists `Float `Int
      `Int32 `Int64 `Lazy `MapOpaque `Nativeint `Object `Opaque `Record
      `String `Tuple `Variable `Variant ],
   'e, 'f, 'g, 'h)
  Refl__.Desc.desc ->
  ('c, 'c, 'g) Compare.Comparers.t -> ('a, 'a) Compare.Comparer.t
module Eq = Refl__.Eq
module Equaler = Eq.Equaler
module Equalers = Eq.Equalers
val equal_poly :
  ?hook:Eq.hook ->
  ('a, 'b, 'c, 'd,
   [< Refl__.Desc.Kinds.comparable
    > `Array `Attributes `Bool `Bytes `Char `Constr `Exists `Float `Int
      `Int32 `Int64 `Lazy `MapOpaque `Nativeint `Object `Opaque `Record
      `String `Tuple `Variable `Variant ]
   as 'e, 'f, 'g, 'h, 'i)
  Refl__.Desc.desc ->
  ('j, 'b, 'k, 'd, 'e, 'f, 'g, 'h, 'l) Refl__.Desc.desc ->
  ('c, 'k, 'h) Eq.Equalers.t -> ('a, 'j) Eq.Equaler.t
val equal :
  ?hook:Eq.hook ->
  ('a, 'b, 'c, 'd,
   [< Refl__.Desc.Kinds.comparable
    > `Array `Attributes `Bool `Bytes `Char `Constr `Exists `Float `Int
      `Int32 `Int64 `Lazy `MapOpaque `Nativeint `Object `Opaque `Record
      `String `Tuple `Variable `Variant ],
   'e, 'f, 'g, 'h)
  Refl__.Desc.desc -> ('c, 'c, 'g) Eq.Equalers.t -> ('a, 'a) Eq.Equaler.t
module Hash = Refl__.Hash
val hash :
  ('a, 'b, 'c, 'd,
   [< Refl__.Desc.Kinds.comparable
    > `Array `Attributes `Constr `Exists `Lazy `MapOpaque `Object `Opaque
      `Record `Tuple `Variable `Variant ],
   'e, 'f, 'g, 'h)
  Refl__.Desc.desc -> ('c, 'g) Hash.Hashers.t -> 'a Hash.Hasher.t
type ('a, 'arity, 'b) Refl__.Desc.typed_attribute_kind +=
    Attribute_value : ('a, 'arity, int) Refl__.Desc.typed_attribute_kind
val lift_zero :
  ('cases Refl__.Desc.binary_choice * int option) list ->
  (('cases * 'a) Refl__.Desc.binary_choice * int option) list
val lift_one :
  ('cases Refl__.Desc.binary_choice * int option) list ->
  (('a * 'cases) Refl__.Desc.binary_choice * int option) list
val merge : 'a list -> 'a list -> 'a list
val constructor_assoc :
  ('cases, 'structures, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
   'direct, 'gadt)
  Refl__.Desc.constructors ->
  ('cases Refl__.Desc.binary_choice * int option) list
val constructor_assoc_with_default_values :
  ('a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i) Refl__.Desc.constructors ->
  ('a Refl__.Desc.binary_choice * int) list
type ('a, 'b) enum_structure =
    [ `RecGroup of [ `Name of [ `Constr of 'a ] ] * 'b ]
val min :
  ('a, ('structures, 'b) enum_structure, 'arity, 'rec_group, [> `Constr ],
   'positive, 'negative, 'direct, 'gadt)
  Refl__.Desc.desc -> int
val max :
  ('a, ('structures, 'b) enum_structure, 'arity, 'rec_group, [> `Constr ],
   'positive, 'negative, 'direct, 'gadt)
  Refl__.Desc.desc -> int
val check_choice :
  'cases Refl__.Desc.binary_choice ->
  'cases Refl__.Desc.binary_choice * int -> bool
val check_value : int -> 'cases Refl__.Desc.binary_choice * int -> bool
val to_int_opt :
  ('a, ('structures, 'b) enum_structure, 'arity, 'rec_group, [> `Constr ],
   'positive, 'negative, 'direct, 'gadt)
  Refl__.Desc.desc -> 'a -> int option
val of_int_opt :
  ('a, ('structures, 'b) enum_structure, 'arity, 'rec_group, [> `Constr ],
   'positive, 'negative, 'direct, 'gadt)
  Refl__.Desc.desc -> int -> 'a option
val to_string :
  ('a, ('structures, 'b) enum_structure, 'arity, 'rec_group, [> `Constr ],
   'positive, 'negative, 'direct, 'gadt)
  Refl__.Desc.desc -> 'a -> string
val of_string_aux :
  ('cases, 'structures, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
   'direct, 'gadt)
  Refl__.Desc.constructors ->
  string -> 'cases Refl__.Desc.binary_choice option
val of_string_opt :
  ('a, ('structures, 'b) enum_structure, 'arity, 'rec_group, [> `Constr ],
   'positive, 'negative, 'direct, 'gadt)
  Refl__.Desc.desc -> string -> 'a option
module Iter = Refl__Iter.Iter
module Iters = Refl__Iter.Iters
val iter :
  ('a, 'structure, 'arity, 'rec_group,
   [> `Array
    | `Arrow
    | `Attributes
    | `Constr
    | `Exists
    | `Lazy
    | `MapOpaque
    | `Object
    | `Opaque
    | `Poly
    | `Record
    | `Tuple
    | `Variable
    | `Variant ],
   'positive, 'negative, 'direct, 'gadt)
  Refl__.Desc.desc -> ('arity, 'direct) Iters.t -> 'a Iter.t
module Fold = Refl__Fold.Fold
module Folds = Refl__Fold.Folds
val fold :
  ('a, 'structure, 'arity, 'rec_group,
   [> `Array
    | `Arrow
    | `Attributes
    | `Constr
    | `Exists
    | `Lazy
    | `MapOpaque
    | `Object
    | `Opaque
    | `Poly
    | `Record
    | `Tuple
    | `Variable
    | `Variant ],
   'positive, 'negative, 'direct, 'gadt)
  Refl__.Desc.desc -> ('arity, 'acc, 'direct) Folds.t -> ('a, 'acc) Fold.t
module StringMap = Refl__Make.StringMap
type ('a, 'arity, 'b) Refl__.Desc.typed_attribute_kind +=
    Attribute_default : ('a, 'arity, 'a) Refl__.Desc.typed_attribute_kind
type ('arity, 'rec_group, 'kinds, 'positive, 'negative, 'direct, 'gadt) field =
  ('arity, 'rec_group, 'kinds, 'positive, 'negative, 'direct, 'gadt)
  Refl__Make.field =
    F :
      ('a, 'structure, 'arity, 'rec_group, 'kinds, 'positive, 'negative,
       'direct, 'gadt)
      Refl__.Desc.desc *
      'a -> ('arity, 'rec_group, 'kinds, 'positive, 'negative, 'direct,
             'gadt)
            field
val make_fields :
  ('types, 'structures, 'arity, 'rec_group, [> `Poly ] as 'kinds, 'positive,
   'negative, 'direct, 'gadt)
  Refl__.Desc.record_structure ->
  ('arity, 'rec_group, 'kinds, 'positive, 'negative, 'direct, 'gadt) field
  StringMap.t -> 'types
type ('a, 'b) record_type_structure =
    [ `RecGroup of [ `Name of [ `Record of 'a ] ] * 'b ]
val make :
  ('a, ('structures, 'new_rec_group) record_type_structure, 'arity,
   'rec_group, [> `Poly | `Record ] as 'b, 'positive, 'negative, 'direct,
   'gadt)
  Refl__.Desc.desc ->
  ('arity, 'new_rec_group, 'b, 'positive, 'negative, 'direct, 'gadt) field
  StringMap.t -> 'a
module Lift = Refl__.Lift
module Visit = Refl__.Visit
module Ocaml_attributes :
  sig
    type ('a, 'arity, 'b) typed_attribute_kind +=
        Attribute_doc : ('a, 'arity, string) typed_attribute_kind("DEBUG:rule", [Tag1 (("eq", 1159), ([((("a")), 100000000, 0, -2073); ((("b")), 100000000, 0, -2074)], 2, Tag1 ([(("Eq", 285), (0), ((Tag3 ((("eq", 1159)), [((("a")), 100000000, 0, -2076); ((("a")), 100000000, 0, -2076)], (0)), 100000000, 0, -2075)), (("runtime/desc.ml", 2, 19, 21), ("runtime/desc.ml", 2, 19, 39), 0), 0, Tag1 ("Refl__Desc", 1))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Refl__Desc")), "eq"), [((("a")), 100000000, 0, -2073); ((("b")), 100000000, 0, -2074)], (0)), 100000000, 0, -2072)), [15; 15], [0; 0], 0, 0, (("runtime/desc.ml", 1, 0, 0), ("runtime/desc.ml", 2, 19, 39), 0), 0, 1, 0, Tag1 ("Refl__Desc", 0)), 1, 0); Tag1 (("builtin_desc", 1160), ([((("a")), 100000000, 0, -2015); ((("b")), 100000000, 0, -2016); ((("c")), 100000000, 0, -2017)], 3, Tag1 ([(("Bool", 287), (0), ((Tag3 ((("builtin_desc", 1160)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2019); (Tag8 (([("Bool", (0))], (0, 100000000, 0, -2021), 1, 0, 0)), 100000000, 0, -2020); (Tag8 (([("Bool", (0))], ((0), 100000000, 0, -2023), 0, 0, 0)), 100000000, 0, -2022)], (0)), 100000000, 0, -2018)), (("runtime/desc.ml", 5, 74, 76), ("runtime/desc.ml", 5, 74, 124), 0), 0, Tag1 ("Refl__Desc", 3)); (("Bytes", 288), (0), ((Tag3 ((("builtin_desc", 1160)), [(Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -2025); (Tag8 (([("Bytes", (0))], (0, 100000000, 0, -2027), 1, 0, 0)), 100000000, 0, -2026); (Tag8 (([("Bytes", (0))], ((0), 100000000, 0, -2029), 0, 0, 0)), 100000000, 0, -2028)], (0)), 100000000, 0, -2024)), (("runtime/desc.ml", 6, 125, 127), ("runtime/desc.ml", 6, 125, 179), 0), 0, Tag1 ("Refl__Desc", 4)); (("Char", 289), (0), ((Tag3 ((("builtin_desc", 1160)), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -2031); (Tag8 (([("Char", (0))], (0, 100000000, 0, -2033), 1, 0, 0)), 100000000, 0, -2032); (Tag8 (([("Char", (0))], ((0), 100000000, 0, -2035), 0, 0, 0)), 100000000, 0, -2034)], (0)), 100000000, 0, -2030)), (("runtime/desc.ml", 7, 180, 182), ("runtime/desc.ml", 7, 180, 230), 0), 0, Tag1 ("Refl__Desc", 5)); (("Float", 290), (0), ((Tag3 ((("builtin_desc", 1160)), [(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -2037); (Tag8 (([("Float", (0))], (0, 100000000, 0, -2039), 1, 0, 0)), 100000000, 0, -2038); (Tag8 (([("Float", (0))], ((0), 100000000, 0, -2041), 0, 0, 0)), 100000000, 0, -2040)], (0)), 100000000, 0, -2036)), (("runtime/desc.ml", 8, 231, 233), ("runtime/desc.ml", 8, 231, 285), 0), 0, Tag1 ("Refl__Desc", 6)); (("Int", 291), (0), ((Tag3 ((("builtin_desc", 1160)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -2043); (Tag8 (([("Int", (0))], (0, 100000000, 0, -2045), 1, 0, 0)), 100000000, 0, -2044); (Tag8 (([("Int", (0))], ((0), 100000000, 0, -2047), 0, 0, 0)), 100000000, 0, -2046)], (0)), 100000000, 0, -2042)), (("runtime/desc.ml", 9, 286, 288), ("runtime/desc.ml", 9, 286, 332), 0), 0, Tag1 ("Refl__Desc", 7)); (("Int32", 292), (0), ((Tag3 ((("builtin_desc", 1160)), [(Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -2049); (Tag8 (([("Int32", (0))], (0, 100000000, 0, -2051), 1, 0, 0)), 100000000, 0, -2050); (Tag8 (([("Int32", (0))], ((0), 100000000, 0, -2053), 0, 0, 0)), 100000000, 0, -2052)], (0)), 100000000, 0, -2048)), (("runtime/desc.ml", 10, 333, 335), ("runtime/desc.ml", 10, 333, 387), 0), 0, Tag1 ("Refl__Desc", 8)); (("Int64", 293), (0), ((Tag3 ((("builtin_desc", 1160)), [(Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -2055); (Tag8 (([("Int64", (0))], (0, 100000000, 0, -2057), 1, 0, 0)), 100000000, 0, -2056); (Tag8 (([("Int64", (0))], ((0), 100000000, 0, -2059), 0, 0, 0)), 100000000, 0, -2058)], (0)), 100000000, 0, -2054)), (("runtime/desc.ml", 11, 388, 390), ("runtime/desc.ml", 11, 388, 442), 0), 0, Tag1 ("Refl__Desc", 9)); (("Nativeint", 294), (0), ((Tag3 ((("builtin_desc", 1160)), [(Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -2061); (Tag8 (([("Nativeint", (0))], (0, 100000000, 0, -2063), 1, 0, 0)), 100000000, 0, -2062); (Tag8 (([("Nativeint", (0))], ((0), 100000000, 0, -2065), 0, 0, 0)), 100000000, 0, -2064)], (0)), 100000000, 0, -2060)), (("runtime/desc.ml", 12, 443, 445), ("runtime/desc.ml", 12, 443, 513), 0), 0, Tag1 ("Refl__Desc", 10)); (("String", 295), (0), ((Tag3 ((("builtin_desc", 1160)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2067); (Tag8 (([("String", (0))], (0, 100000000, 0, -2069), 1, 0, 0)), 100000000, 0, -2068); (Tag8 (([("String", (0))], ((0), 100000000, 0, -2071), 0, 0, 0)), 100000000, 0, -2070)], (0)), 100000000, 0, -2066)), (("runtime/desc.ml", 13, 514, 516), ("runtime/desc.ml", 13, 514, 572), 0), 0, Tag1 ("Refl__Desc", 11))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Refl__Desc")), "builtin_desc"), [((("a")), 100000000, 0, -2015); ((("b")), 100000000, 0, -2016); ((("c")), 100000000, 0, -2017)], (0)), 100000000, 0, -2014)), [63; 63; 63], [0; 0; 0], 0, 0, (("runtime/desc.ml", 4, 41, 41), ("runtime/desc.ml", 13, 514, 572), 0), 0, 1, 0, Tag1 ("Refl__Desc", 2)), 1, 0); Tag1 (("selection", 1161), ([((("index")), 100000000, 0, -1995); ((("items")), 100000000, 0, -1996); ((("value")), 100000000, 0, -1997); ((("tail")), 100000000, 0, -1998)], 4, Tag1 ([(("Start", 297), (0), ((Tag3 ((("selection", 1161)), [(Tag8 (([("Zero", (0))], (0, 100000000, 0, -2001), 1, 0, 0)), 100000000, 0, -2000); ((("sequence")), 100000000, 0, -2002); ((0), 100000000, 0, -2003); ((("sequence")), 100000000, 0, -2002)], (0)), 100000000, 0, -1999)), (("runtime/desc.ml", 16, 623, 625), ("runtime/desc.ml", 17, 635, 685), 0), 0, Tag1 ("Refl__Desc", 13)); (("Next", 298), ([(Tag3 ((("selection", 1161)), [((("index")), 100000000, 0, -2007); ((("sequence")), 100000000, 0, -2008); ((0), 100000000, 0, -2012); (Tag2 ([((("head")), 100000000, 0, -2009); ((("tail")), 100000000, 0, -2010)]), 100000000, 0, -2013)], (0)), 100000000, 0, -2011)]), ((Tag3 ((("selection", 1161)), [(Tag8 (([("Succ", ((((("index")), 100000000, 0, -2007))))], (0, 100000000, 0, -2006), 1, 0, 0)), 100000000, 0, -2005); ((("sequence")), 100000000, 0, -2008); ((("head")), 100000000, 0, -2009); ((("tail")), 100000000, 0, -2010)], (0)), 100000000, 0, -2004)), (("runtime/desc.ml", 18, 686, 688), ("runtime/desc.ml", 20, 754, 816), 0), 0, Tag1 ("Refl__Desc", 14))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Refl__Desc")), "selection"), [((("index")), 100000000, 0, -1995); ((("items")), 100000000, 0, -1996); ((("value")), 100000000, 0, -1997); ((("tail")), 100000000, 0, -1998)], (0)), 100000000, 0, -1994)), [63; 15; 15; 15], [0; 0; 0; 0], 0, 0, (("runtime/desc.ml", 15, 574, 574), ("runtime/desc.ml", 20, 754, 816), 0), 0, 0, 0, Tag1 ("Refl__Desc", 12)), 1, 0); Tag1 (("binary_selection", 1162), ([((("index")), 100000000, 0, -1953); ((("items")), 100000000, 0, -1954); ((("value")), 100000000, 0, -1955); ((("tail")), 100000000, 0, -1956)], 4, Tag1 ([(("BinaryStart", 300), (0), ((Tag3 ((("binary_selection", 1162)), [(Tag8 (([("Start", (0))], (0, 100000000, 0, -1959), 1, 0, 0)), 100000000, 0, -1958); ((("sequence")), 100000000, 0, -1960); ((0), 100000000, 0, -1961); ((("sequence")), 100000000, 0, -1960)], (0)), 100000000, 0, -1957)), (("runtime/desc.ml", 23, 874, 876), ("runtime/desc.ml", 24, 892, 950), 0), 0, Tag1 ("Refl__Desc", 16)); (("Zero", 301), ([(Tag3 ((("binary_selection", 1162)), [((("index")), 100000000, 0, -1965); ((("sequence")), 100000000, 0, -1966); ((0), 100000000, 0, -1970); (Tag2 ([((("zero")), 100000000, 0, -1968); ((("one")), 100000000, 0, -1972)]), 100000000, 0, -1971)], (0)), 100000000, 0, -1969)]), ((Tag3 ((("binary_selection", 1162)), [(Tag8 (([("Zero", ((((("index")), 100000000, 0, -1965))))], (0, 100000000, 0, -1964), 1, 0, 0)), 100000000, 0, -1963); ((("sequence")), 100000000, 0, -1966); ((0), 100000000, 0, -1967); ((("zero")), 100000000, 0, -1968)], (0)), 100000000, 0, -1962)), (("runtime/desc.ml", 25, 951, 953), ("runtime/desc.ml", 27, 1025, 1090), 0), 0, Tag1 ("Refl__Desc", 17)); (("One", 302), ([(Tag3 ((("binary_selection", 1162)), [((("index")), 100000000, 0, -1976); ((("sequence")), 100000000, 0, -1977); ((0), 100000000, 0, -1981); (Tag2 ([((("zero")), 100000000, 0, -1983); ((("one")), 100000000, 0, -1979)]), 100000000, 0, -1982)], (0)), 100000000, 0, -1980)]), ((Tag3 ((("binary_selection", 1162)), [(Tag8 (([("One", ((((("index")), 100000000, 0, -1976))))], (0, 100000000, 0, -1975), 1, 0, 0)), 100000000, 0, -1974); ((("sequence")), 100000000, 0, -1977); ((0), 100000000, 0, -1978); ((("one")), 100000000, 0, -1979)], (0)), 100000000, 0, -1973)), (("runtime/desc.ml", 28, 1091, 1093), ("runtime/desc.ml", 30, 1164, 1227), 0), 0, Tag1 ("Refl__Desc", 18)); (("Select", 303), ([(Tag3 ((("binary_selection", 1162)), [((("index")), 100000000, 0, -1987); ((("sequence")), 100000000, 0, -1988); ((0), 100000000, 0, -1992); (Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [((("contents")), 100000000, 0, -1989)], (0)), 100000000, 0, -1993)], (0)), 100000000, 0, -1991)]), ((Tag3 ((("binary_selection", 1162)), [(Tag8 (([("Select", ((((("index")), 100000000, 0, -1987))))], (0, 100000000, 0, -1986), 1, 0, 0)), 100000000, 0, -1985); ((("sequence")), 100000000, 0, -1988); ((("contents")), 100000000, 0, -1989); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1990)], (0)), 100000000, 0, -1984)), (("runtime/desc.ml", 31, 1228, 1230), ("runtime/desc.ml", 33, 1305, 1379), 0), 0, Tag1 ("Refl__Desc", 19))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Refl__Desc")), "binary_selection"), [((("index")), 100000000, 0, -1953); ((("items")), 100000000, 0, -1954); ((("value")), 100000000, 0, -1955); ((("tail")), 100000000, 0, -1956)], (0)), 100000000, 0, -1952)), [63; 15; 63; 63], [0; 0; 0; 0], 0, 0, (("runtime/desc.ml", 22, 818, 818), ("runtime/desc.ml", 33, 1305, 1379), 0), 0, 0, 0, Tag1 ("Refl__Desc", 15)), 1, 0); Tag1 (("choice", 1163), ([((("cases")), 100000000, 0, -1942)], 1, Tag1 ([(("CFirst", 305), ([((("types")), 100000000, 0, -1945)]), ((Tag3 ((("choice", 1163)), [(Tag2 ([((("types")), 100000000, 0, -1945); ((0), 100000000, 0, -1946)]), 100000000, 0, -1944)], (0)), 100000000, 0, -1943)), (("runtime/desc.ml", 36, 1402, 1404), ("runtime/desc.ml", 36, 1402, 1444), 0), 0, Tag1 ("Refl__Desc", 21)); (("CNext", 306), ([(Tag3 ((("choice", 1163)), [((("cases")), 100000000, 0, -1950)], (0)), 100000000, 0, -1951)]), ((Tag3 ((("choice", 1163)), [(Tag2 ([((0), 100000000, 0, -1949); ((("cases")), 100000000, 0, -1950)]), 100000000, 0, -1948)], (0)), 100000000, 0, -1947)), (("runtime/desc.ml", 37, 1445, 1447), ("runtime/desc.ml", 37, 1445, 1493), 0), 0, Tag1 ("Refl__Desc", 22))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Refl__Desc")), "choice"), [((("cases")), 100000000, 0, -1942)], (0)), 100000000, 0, -1941)), [63], [0], 0, 0, (("runtime/desc.ml", 35, 1381, 1381), ("runtime/desc.ml", 37, 1445, 1493), 0), 0, 0, 0, Tag1 ("Refl__Desc", 20)), 1, 0); Tag1 (("binary_choice", 1164), ([((("cases")), 100000000, 0, -1927)], 1, Tag1 ([(("CEnd", 308), ([((("types")), 100000000, 0, -1930)]), ((Tag3 ((("binary_choice", 1164)), [(Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [((("types")), 100000000, 0, -1930)], (0)), 100000000, 0, -1929)], (0)), 100000000, 0, -1928)), (("runtime/desc.ml", 40, 1523, 1525), ("runtime/desc.ml", 40, 1523, 1568), 0), 0, Tag1 ("Refl__Desc", 24)); (("CZero", 309), ([(Tag3 ((("binary_choice", 1164)), [((("cases")), 100000000, 0, -1933)], (0)), 100000000, 0, -1935)]), ((Tag3 ((("binary_choice", 1164)), [(Tag2 ([((("cases")), 100000000, 0, -1933); ((0), 100000000, 0, -1934)]), 100000000, 0, -1932)], (0)), 100000000, 0, -1931)), (("runtime/desc.ml", 41, 1569, 1571), ("runtime/desc.ml", 41, 1569, 1631), 0), 0, Tag1 ("Refl__Desc", 25)); (("COne", 310), ([(Tag3 ((("binary_choice", 1164)), [((("cases")), 100000000, 0, -1939)], (0)), 100000000, 0, -1940)]), ((Tag3 ((("binary_choice", 1164)), [(Tag2 ([((0), 100000000, 0, -1938); ((("cases")), 100000000, 0, -1939)]), 100000000, 0, -1937)], (0)), 100000000, 0, -1936)), (("runtime/desc.ml", 42, 1632, 1634), ("runtime/desc.ml", 42, 1632, 1693), 0), 0, Tag1 ("Refl__Desc", 26))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Refl__Desc")), "binary_choice"), [((("cases")), 100000000, 0, -1927)], (0)), 100000000, 0, -1926)), [63], [0], 0, 0, (("runtime/desc.ml", 39, 1495, 1495), ("runtime/desc.ml", 42, 1632, 1693), 0), 0, 0, 0, Tag1 ("Refl__Desc", 23)), 1, 0); Tag4 (("UnaryTypeS", 1165), (((Tag1 ((Tag2 ("Refl__Desc")), "UnaryTypeS"))), 0, (("runtime/desc.ml", 44, 1695, 1695), ("runtime/desc.ml", 46, 1736, 1739), 0), Tag1 ("Refl__Desc", 28)), 0); Tag3 (("Sequence", 1166), 0, (Tag3 (Tag1 ((Tag2 ("Refl__Desc")), "Sequence")), 0, (("runtime/desc.ml", 48, 1741, 1741), ("runtime/desc.ml", 52, 1868, 1871), 0), Tag1 ("Refl__Desc", 33)), 0, 0); Tag3 (("Delay", 1167), 0, (Tag3 (Tag1 ((Tag2 ("Refl__Desc")), "Delay")), 0, (("runtime/desc.ml", 54, 1873, 1873), ("runtime/desc.ml", 56, 1920, 1923), 0), Tag1 ("Refl__Desc", 35)), 0, 0); Tag3 (("Delays", 1168), 0, (Tag3 (Tag1 ((Tag2 ("Refl__Desc")), "Delays")), 0, (("runtime/desc.ml", 58, 1925, 1925), ("runtime/desc.ml", 58, 1925, 1957), 0), Tag1 ("Refl__Desc", 36)), 0, 0); Tag1 (("variable", 1169), ([((("index")), 100000000, 0, -1892); ((("arity")), 100000000, 0, -1893); ((("a")), 100000000, 0, -1894); ((("positive")), 100000000, 0, -1895); ((("direct")), 100000000, 0, -1896)], 5, Tag1 ([(("VFirst", 323), (0), ((Tag3 ((("variable", 1169)), [(Tag8 (([("Zero", (0))], (0, 100000000, 0, -1899), 1, 0, 0)), 100000000, 0, -1898); (Tag2 ([((("value")), 100000000, 0, -1901); ((0), 100000000, 0, -1902)]), 100000000, 0, -1900); ((("value")), 100000000, 0, -1901); (Tag2 ([(Tag8 (([("Present", (0))], (0, 100000000, 0, -1905), 1, 0, 0)), 100000000, 0, -1904); ((0), 100000000, 0, -1906)]), 100000000, 0, -1903); (Tag2 ([(Tag8 (([("Present", (0))], (0, 100000000, 0, -1909), 1, 0, 0)), 100000000, 0, -1908); ((0), 100000000, 0, -1910)]), 100000000, 0, -1907)], (0)), 100000000, 0, -1897)), (("runtime/desc.ml", 61, 2016, 2018), ("runtime/desc.ml", 62, 2029, 2105), 0), 0, Tag1 ("Refl__Desc", 38)); (("VNext", 324), ([(Tag3 ((("variable", 1169)), [((("index")), 100000000, 0, -1914); ((("sequence")), 100000000, 0, -1917); ((("value")), 100000000, 0, -1918); ((("positive")), 100000000, 0, -1921); ((("direct")), 100000000, 0, -1924)], (0)), 100000000, 0, -1925)]), ((Tag3 ((("variable", 1169)), [(Tag8 (([("Succ", ((((("index")), 100000000, 0, -1914))))], (0, 100000000, 0, -1913), 1, 0, 0)), 100000000, 0, -1912); (Tag2 ([((0), 100000000, 0, -1916); ((("sequence")), 100000000, 0, -1917)]), 100000000, 0, -1915); ((("value")), 100000000, 0, -1918); (Tag2 ([((0), 100000000, 0, -1920); ((("positive")), 100000000, 0, -1921)]), 100000000, 0, -1919); (Tag2 ([((0), 100000000, 0, -1923); ((("direct")), 100000000, 0, -1924)]), 100000000, 0, -1922)], (0)), 100000000, 0, -1911)), (("runtime/desc.ml", 63, 2106, 2108), ("runtime/desc.ml", 66, 2261, 2277), 0), 0, Tag1 ("Refl__Desc", 39))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Refl__Desc")), "variable"), [((("index")), 100000000, 0, -1892); ((("arity")), 100000000, 0, -1893); ((("a")), 100000000, 0, -1894); ((("positive")), 100000000, 0, -1895); ((("direct")), 100000000, 0, -1896)], (0)), 100000000, 0, -1891)), [63; 63; 15; 63; 63], [0; 0; 0; 0; 0], 0, 0, (("runtime/desc.ml", 60, 1959, 1959), ("runtime/desc.ml", 66, 2261, 2277), 0), 0, 0, 0, Tag1 ("Refl__Desc", 37)), 1, 0); Tag1 (("length", 1170), ([((("count")), 100000000, 0, -1877); ((("types")), 100000000, 0, -1878)], 2, Tag1 ([(("Zero", 326), (0), ((Tag3 ((("length", 1170)), [(Tag8 (([("Zero", (0))], (0, 100000000, 0, -1881), 1, 0, 0)), 100000000, 0, -1880); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1882)], (0)), 100000000, 0, -1879)), (("runtime/desc.ml", 69, 2310, 2312), ("runtime/desc.ml", 69, 2310, 2343), 0), 0, Tag1 ("Refl__Desc", 41)); (("Succ", 327), ([(Tag3 ((("length", 1170)), [((("length")), 100000000, 0, -1886); ((("types")), 100000000, 0, -1889)], (0)), 100000000, 0, -1890)]), ((Tag3 ((("length", 1170)), [(Tag8 (([("Succ", ((((("length")), 100000000, 0, -1886))))], (0, 100000000, 0, -1885), 1, 0, 0)), 100000000, 0, -1884); (Tag2 ([((0), 100000000, 0, -1888); ((("types")), 100000000, 0, -1889)]), 100000000, 0, -1887)], (0)), 100000000, 0, -1883)), (("runtime/desc.ml", 70, 2344, 2346), ("runtime/desc.ml", 70, 2344, 2422), 0), 0, Tag1 ("Refl__Desc", 42))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Refl__Desc")), "length"), [((("count")), 100000000, 0, -1877); ((("types")), 100000000, 0, -1878)], (0)), 100000000, 0, -1876)), [63; 63], [0; 0], 0, 0, (("runtime/desc.ml", 68, 2279, 2279), ("runtime/desc.ml", 70, 2344, 2422), 0), 0, 0, 0, Tag1 ("Refl__Desc", 40)), 1, 0); Tag1 (("append", 1171), ([((("a")), 100000000, 0, -1862); ((("b")), 100000000, 0, -1863); ((("c")), 100000000, 0, -1864)], 3, Tag1 ([(("Nil", 329), (0), ((Tag3 ((("append", 1171)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1866); ((("a")), 100000000, 0, -1867); ((("a")), 100000000, 0, -1867)], (0)), 100000000, 0, -1865)), (("runtime/desc.ml", 73, 2451, 2453), ("runtime/desc.ml", 73, 2451, 2482), 0), 0, Tag1 ("Refl__Desc", 44)); (("Add", 330), ([(Tag3 ((("append", 1171)), [((("a")), 100000000, 0, -1871); ((("b")), 100000000, 0, -1872); ((("c")), 100000000, 0, -1874)], (0)), 100000000, 0, -1875)]), ((Tag3 ((("append", 1171)), [(Tag2 ([((("head")), 100000000, 0, -1870); ((("a")), 100000000, 0, -1871)]), 100000000, 0, -1869); ((("b")), 100000000, 0, -1872); (Tag2 ([((("head")), 100000000, 0, -1870); ((("c")), 100000000, 0, -1874)]), 100000000, 0, -1873)], (0)), 100000000, 0, -1868)), (("runtime/desc.ml", 74, 2483, 2485), ("runtime/desc.ml", 76, 2522, 2565), 0), 0, Tag1 ("Refl__Desc", 45))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Refl__Desc")), "append"), [((("a")), 100000000, 0, -1862); ((("b")), 100000000, 0, -1863); ((("c")), 100000000, 0, -1864)], (0)), 100000000, 0, -1861)), [63; 15; 63], [0; 0; 0], 0, 0, (("runtime/desc.ml", 72, 2424, 2424), ("runtime/desc.ml", 76, 2522, 2565), 0), 0, 0, 0, Tag1 ("Refl__Desc", 43)), 1, 0); Tag1 (("presence", 1172), ([((("global")), 100000000, 0, -1850); ((("local")), 100000000, 0, -1851)], 2, Tag1 ([(("Present", 332), (0), ((Tag3 ((("presence", 1172)), [(Tag8 (([("Present", (0))], ((0), 100000000, 0, -1854), 0, 0, 0)), 100000000, 0, -1853); (Tag8 (([("Present", (0))], (0, 100000000, 0, -1856), 1, 0, 0)), 100000000, 0, -1855)], (0)), 100000000, 0, -1852)), (("runtime/desc.ml", 79, 2601, 2603), ("runtime/desc.ml", 79, 2601, 2650), 0), 0, Tag1 ("Refl__Desc", 47)); (("Absent", 333), (0), ((Tag3 ((("presence", 1172)), [((0), 100000000, 0, -1858); (Tag8 (([("Absent", (0))], (0, 100000000, 0, -1860), 1, 0, 0)), 100000000, 0, -1859)], (0)), 100000000, 0, -1857)), (("runtime/desc.ml", 80, 2651, 2653), ("runtime/desc.ml", 80, 2651, 2687), 0), 0, Tag1 ("Refl__Desc", 48))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Refl__Desc")), "presence"), [((("global")), 100000000, 0, -1850); ((("local")), 100000000, 0, -1851)], (0)), 100000000, 0, -1849)), [63; 63], [0; 0], 0, 0, (("runtime/desc.ml", 78, 2567, 2567), ("runtime/desc.ml", 80, 2651, 2687), 0), 0, 1, 0, Tag1 ("Refl__Desc", 46)), 1, 0); Tag1 (("presences", 1173), ([((("presence")), 100000000, 0, -1829); ((("directs")), 100000000, 0, -1830)], 2, Tag1 ([(("Presences", 335), (0), ((Tag3 ((("presences", 1173)), [((0), 100000000, 0, -1832); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1833)], (0)), 100000000, 0, -1831)), (("runtime/desc.ml", 83, 2728, 2730), ("runtime/desc.ml", 83, 2728, 2763), 0), 0, Tag1 ("Refl__Desc", 50)); (("AddPresent", 336), ([(Tag3 ((("presences", 1173)), [(Tag8 (([("Present", (0))], ((("presence")), 100000000, 0, -1836), 0, 0, 0)), 100000000, 0, -1835); ((("directs")), 100000000, 0, -1840)], (0)), 100000000, 0, -1841)]), ((Tag3 ((("presences", 1173)), [(Tag8 (([("Present", (0))], ((("presence")), 100000000, 0, -1836), 0, 0, 0)), 100000000, 0, -1835); (Tag2 ([(Tag8 (([("Present", (0))], (0, 100000000, 0, -1839), 1, 0, 0)), 100000000, 0, -1838); ((("directs")), 100000000, 0, -1840)]), 100000000, 0, -1837)], (0)), 100000000, 0, -1834)), (("runtime/desc.ml", 84, 2764, 2766), ("runtime/desc.ml", 86, 2822, 2888), 0), 0, Tag1 ("Refl__Desc", 51)); (("AddAbsent", 337), ([(Tag3 ((("presences", 1173)), [((("presence")), 100000000, 0, -1843); ((("directs")), 100000000, 0, -1847)], (0)), 100000000, 0, -1848)]), ((Tag3 ((("presences", 1173)), [((("presence")), 100000000, 0, -1843); (Tag2 ([(Tag8 (([("Absent", (0))], (0, 100000000, 0, -1846), 1, 0, 0)), 100000000, 0, -1845); ((("directs")), 100000000, 0, -1847)]), 100000000, 0, -1844)], (0)), 100000000, 0, -1842)), (("runtime/desc.ml", 87, 2889, 2891), ("runtime/desc.ml", 89, 2946, 2995), 0), 0, Tag1 ("Refl__Desc", 52))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Refl__Desc")), "presences"), [((("presence")), 100000000, 0, -1829); ((("directs")), 100000000, 0, -1830)], (0)), 100000000, 0, -1828)), [63; 63], [0; 0], 0, 0, (("runtime/desc.ml", 82, 2689, 2689), ("runtime/desc.ml", 89, 2946, 2995), 0), 0, 0, 0, Tag1 ("Refl__Desc", 49)), 1, 0); Tag1 (("gadt_constraints", 1174), ([((("constraints")), 100000000, 0, -1826); ((("exists")), 100000000, 0, -1827)], 2, 1, 1, ((Tag3 (Tag1 ((Tag2 ("Refl__Desc")), "gadt_constraints"), [((("constraints")), 100000000, 0, -1826); ((("exists")), 100000000, 0, -1827)], (0)), 100000000, 0, -1825)), [15; 15], [0; 0], 0, 0, (("runtime/desc.ml", 91, 2997, 2997), ("runtime/desc.ml", 91, 2997, 3047), 0), 0, 0, 0, Tag1 ("Refl__Desc", 53)), 1, 0); Tag2 (("NoConstraints", 1175), ((("gadt_constraints", 1174)), [((("constraints")), 100000000, 0, -1823); ((("exists")), 100000000, 0, -1824)], (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Refl__Desc", 54)), 0, 0); Tag1 (("sub_gadt_ext", 1176), ([((("gadt")), 100000000, 0, -1821); ((("sub_gadt")), 100000000, 0, -1822)], 2, 1, 1, ((Tag3 (Tag1 ((Tag2 ("Refl__Desc")), "sub_gadt_ext"), [((("gadt")), 100000000, 0, -1821); ((("sub_gadt")), 100000000, 0, -1822)], (0)), 100000000, 0, -1820)), [15; 15], [0; 0], 0, 0, (("runtime/desc.ml", 96, 3117, 3117), ("runtime/desc.ml", 96, 3117, 3158), 0), 0, 0, 0, Tag1 ("Refl__Desc", 55)), 1, 0); Tag1 (("sub_gadt", 1177), ([((("gadt")), 100000000, 0, -1808); ((("sub_gadt")), 100000000, 0, -1809)], 2, [[(("sub_gadt_ext", 342), 0, (Tag3 ((("sub_gadt_ext", 1176)), [((("gadt")), 100000000, 0, -1808); ((("sub_gadt")), 100000000, 0, -1809)], (0)), 100000000, 0, -1810), (("runtime/desc.ml", 99, 3197, 3201), ("runtime/desc.ml", 99, 3197, 3248), 0), 0, Tag1 ("Refl__Desc", 57)); (("sub_gadt_functional", 343), 0, (Tag10 ((Tag1 (0, (Tag3 ((("sub_gadt_ext", 1176)), [(Tag9 (("gadt")), 100000000, 0, -1812); (Tag9 (("sub_gadt0")), 100000000, 0, -1813)], (0)), 100000000, 0, -1819), (Tag1 (0, (Tag3 ((("sub_gadt_ext", 1176)), [(Tag9 (("gadt")), 100000000, 0, -1812); (Tag9 (("sub_gadt1")), 100000000, 0, -1814)], (0)), 100000000, 0, -1818), (Tag3 ((("eq", 1159)), [(Tag9 (("sub_gadt0")), 100000000, 0, -1813); (Tag9 (("sub_gadt1")), 100000000, 0, -1814)], (0)), 100000000, 0, -1817), 0), 100000000, 0, -1816), 0), 100000000, 0, -1815), [(Tag9 (("gadt")), 100000000, 0, -1812); (Tag9 (("sub_gadt0")), 100000000, 0, -1813); (Tag9 (("sub_gadt1")), 100000000, 0, -1814)]), 100000000, 0, -1811), (("runtime/desc.ml", 100, 3249, 3253), ("runtime/desc.ml", 102, 3383, 3417), 0), 0, Tag1 ("Refl__Desc", 58))]], 1, ((Tag3 (Tag1 ((Tag2 ("Refl__Desc")), "sub_gadt"), [((("gadt")), 100000000, 0, -1808); ((("sub_gadt")), 100000000, 0, -1809)], (0)), 100000000, 0, -1807)), [15; 15], [0; 0], 0, 0, (("runtime/desc.ml", 98, 3160, 3160), ("runtime/desc.ml", 103, 3418, 3421), 0), 0, 0, 0, Tag1 ("Refl__Desc", 56)), 1, 0); Tag1 (("subvariables", 1178), ([((("count")), 100000000, 0, -1789); ((("local")), 100000000, 0, -1790); ((("positive")), 100000000, 0, -1791); ((("negative")), 100000000, 0, -1792); ((("direct")), 100000000, 0, -1793); ((("positives")), 100000000, 0, -1794); ((("negatives")), 100000000, 0, -1795); ((("directs")), 100000000, 0, -1796); ((("subpositive")), 100000000, 0, -1797); ((("subnegative")), 100000000, 0, -1798); ((("subdirect")), 100000000, 0, -1799)], 11, [[(("presences", 345), 0, (Tag3 ((("presences", 1173)), [((("local")), 100000000, 0, -1790); ((("directs")), 100000000, 0, -1796)], (0)), 100000000, 0, -1800), (("runtime/desc.ml", 107, 3574, 3578), ("runtime/desc.ml", 107, 3574, 3619), 0), 0, Tag1 ("Refl__Desc", 60)); (("positive_count", 346), 0, (Tag3 ((("length", 1170)), [((("count")), 100000000, 0, -1789); ((("positives")), 100000000, 0, -1794)], (0)), 100000000, 0, -1801), (("runtime/desc.ml", 108, 3620, 3624), ("runtime/desc.ml", 108, 3620, 3669), 0), 0, Tag1 ("Refl__Desc", 61)); (("positive", 347), 0, (Tag3 ((("append", 1171)), [((("positives")), 100000000, 0, -1794); ((("positive")), 100000000, 0, -1791); ((("subpositive")), 100000000, 0, -1797)], (0)), 100000000, 0, -1802), (("runtime/desc.ml", 109, 3670, 3674), ("runtime/desc.ml", 109, 3670, 3730), 0), 0, Tag1 ("Refl__Desc", 62)); (("negative_count", 348), 0, (Tag3 ((("length", 1170)), [((("count")), 100000000, 0, -1789); ((("negatives")), 100000000, 0, -1795)], (0)), 100000000, 0, -1803), (("runtime/desc.ml", 110, 3731, 3735), ("runtime/desc.ml", 110, 3731, 3780), 0), 0, Tag1 ("Refl__Desc", 63)); (("negative", 349), 0, (Tag3 ((("append", 1171)), [((("negatives")), 100000000, 0, -1795); ((("negative")), 100000000, 0, -1792); ((("subnegative")), 100000000, 0, -1798)], (0)), 100000000, 0, -1804), (("runtime/desc.ml", 111, 3781, 3785), ("runtime/desc.ml", 111, 3781, 3841), 0), 0, Tag1 ("Refl__Desc", 64)); (("direct_count", 350), 0, (Tag3 ((("length", 1170)), [((("count")), 100000000, 0, -1789); ((("directs")), 100000000, 0, -1796)], (0)), 100000000, 0, -1805), (("runtime/desc.ml", 112, 3842, 3846), ("runtime/desc.ml", 112, 3842, 3887), 0), 0, Tag1 ("Refl__Desc", 65)); (("direct", 351), 0, (Tag3 ((("append", 1171)), [((("directs")), 100000000, 0, -1796); ((("direct")), 100000000, 0, -1793); ((("subdirect")), 100000000, 0, -1799)], (0)), 100000000, 0, -1806), (("runtime/desc.ml", 113, 3888, 3892), ("runtime/desc.ml", 113, 3888, 3940), 0), 0, Tag1 ("Refl__Desc", 66))]], 1, ((Tag3 (Tag1 ((Tag2 ("Refl__Desc")), "subvariables"), [((("count")), 100000000, 0, -1789); ((("local")), 100000000, 0, -1790); ((("positive")), 100000000, 0, -1791); ((("negative")), 100000000, 0, -1792); ((("direct")), 100000000, 0, -1793); ((("positives")), 100000000, 0, -1794); ((("negatives")), 100000000, 0, -1795); ((("directs")), 100000000, 0, -1796); ((("subpositive")), 100000000, 0, -1797); ((("subnegative")), 100000000, 0, -1798); ((("subdirect")), 100000000, 0, -1799)], (0)), 100000000, 0, -1788)), [63; 63; 15; 15; 15; 63; 63; 63; 63; 63; 63], [0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0], 0, 0, (("runtime/desc.ml", 105, 3423, 3423), ("runtime/desc.ml", 114, 3941, 3944), 0), 0, 0, 0, Tag1 ("Refl__Desc", 59)), 1, 0); Tag3 (("Kinds", 1179), 0, (Tag3 (Tag1 ((Tag2 ("Refl__Desc")), "Kinds")), 0, (("runtime/desc.ml", 116, 3946, 3946), ("runtime/desc.ml", 141, 4713, 4716), 0), Tag1 ("Refl__Desc", 76)), 0, 0); Tag1 (("typed_attribute_kind", 1180), ([((("a")), 100000000, 0, -1785); ((("arity")), 100000000, 0, -1786); ((("attribute")), 100000000, 0, -1787)], 3, 1, 1, ((Tag3 (Tag1 ((Tag2 ("Refl__Desc")), "typed_attribute_kind"), [((("a")), 100000000, 0, -1785); ((("arity")), 100000000, 0, -1786); ((("attribute")), 100000000, 0, -1787)], (0)), 100000000, 0, -1784)), [15; 15; 15], [0; 0; 0], 0, 0, (("runtime/desc.ml", 143, 4718, 4718), ("runtime/desc.ml", 143, 4718, 4773), 0), 0, 0, 0, Tag1 ("Refl__Desc", 77)), 1, 0); Tag1 (("refl", 1181), ([((0), 100000000, 0, -1783)], 1, 1, 1, ((Tag3 (Tag1 ((Tag2 ("Refl__Desc")), "refl"), [((0), 100000000, 0, -1783)], (0)), 100000000, 0, -1782)), [15], [0], 0, 0, (("runtime/desc.ml", 145, 4775, 4775), ("runtime/desc.ml", 145, 4775, 4791), 0), 0, 0, 0, Tag1 ("Refl__Desc", 78)), 1, 0); Tag1 (("transfer_argument", 1182), ([((("source")), 100000000, 0, -1770); ((("sub")), 100000000, 0, -1771); ((("arg")), 100000000, 0, -1772)], 3, Tag1 ([(("Transfer", 365), (0), ((Tag3 ((("transfer_argument", 1182)), [((("a")), 100000000, 0, -1774); ((("a")), 100000000, 0, -1774); (Tag8 (([("Present", (0))], (0, 100000000, 0, -1776), 1, 0, 0)), 100000000, 0, -1775)], (0)), 100000000, 0, -1773)), (("runtime/desc.ml", 148, 4840, 4842), ("runtime/desc.ml", 148, 4840, 4893), 0), 0, Tag1 ("Refl__Desc", 80)); (("Skip", 366), (0), ((Tag3 ((("transfer_argument", 1182)), [((0), 100000000, 0, -1778); ((0), 100000000, 0, -1779); (Tag8 (([("Absent", (0))], (0, 100000000, 0, -1781), 1, 0, 0)), 100000000, 0, -1780)], (0)), 100000000, 0, -1777)), (("runtime/desc.ml", 149, 4894, 4896), ("runtime/desc.ml", 149, 4894, 4940), 0), 0, Tag1 ("Refl__Desc", 81))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Refl__Desc")), "transfer_argument"), [((("source")), 100000000, 0, -1770); ((("sub")), 100000000, 0, -1771); ((("arg")), 100000000, 0, -1772)], (0)), 100000000, 0, -1769)), [15; 15; 63], [0; 0; 0], 0, 0, (("runtime/desc.ml", 147, 4793, 4793), ("runtime/desc.ml", 149, 4894, 4940), 0), 0, 1, 0, Tag1 ("Refl__Desc", 79)), 1, 0); Tag1 (("transfer_arguments", 1183), ([((("source")), 100000000, 0, -1752); ((("sub")), 100000000, 0, -1753); ((("arg")), 100000000, 0, -1754)], 3, Tag1 ([(("VTANil", 368), (0), ((Tag3 ((("transfer_arguments", 1183)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1756); ((0), 100000000, 0, -1757); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1758)], (0)), 100000000, 0, -1755)), (("runtime/desc.ml", 152, 4990, 4992), ("runtime/desc.ml", 152, 4990, 5037), 0), 0, Tag1 ("Refl__Desc", 83)); (("VTACons", 369), Tag1 ([(("head", 370), 0, (Tag3 ((("transfer_argument", 1182)), [((("source")), 100000000, 0, -1761); ((("sub")), 100000000, 0, -1763); ((("arg")), 100000000, 0, -1765)], (0)), 100000000, 0, -1767), (("runtime/desc.ml", 154, 5052, 5060), ("runtime/desc.ml", 154, 5052, 5107), 0), 0, Tag1 ("Refl__Desc", 84)); (("tail", 371), 0, (Tag3 ((("transfer_arguments", 1183)), [((("sources")), 100000000, 0, -1762); ((("sub")), 100000000, 0, -1763); ((("args")), 100000000, 0, -1766)], (0)), 100000000, 0, -1768), (("runtime/desc.ml", 155, 5108, 5116), ("runtime/desc.ml", 155, 5108, 5165), 0), 0, Tag1 ("Refl__Desc", 85))]), ((Tag3 ((("transfer_arguments", 1183)), [(Tag2 ([((("source")), 100000000, 0, -1761); ((("sources")), 100000000, 0, -1762)]), 100000000, 0, -1760); ((("sub")), 100000000, 0, -1763); (Tag2 ([((("arg")), 100000000, 0, -1765); ((("args")), 100000000, 0, -1766)]), 100000000, 0, -1764)], (0)), 100000000, 0, -1759)), (("runtime/desc.ml", 153, 5038, 5040), ("runtime/desc.ml", 156, 5171, 5238), 0), 0, Tag1 ("Refl__Desc", 86))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Refl__Desc")), "transfer_arguments"), [((("source")), 100000000, 0, -1752); ((("sub")), 100000000, 0, -1753); ((("arg")), 100000000, 0, -1754)], (0)), 100000000, 0, -1751)), [63; 15; 63], [0; 0; 0], 0, 0, (("runtime/desc.ml", 151, 4942, 4942), ("runtime/desc.ml", 156, 5171, 5238), 0), 0, 0, 0, Tag1 ("Refl__Desc", 82)), 1, 0); Tag1 (("transfer_matrix", 1184), ([((("p")), 100000000, 0, -1741); ((("n")), 100000000, 0, -1742); ((("sp")), 100000000, 0, -1743); ((("sn")), 100000000, 0, -1744); ((("ap")), 100000000, 0, -1745); ((("an")), 100000000, 0, -1746)], 6, [[(("pp", 373), 0, (Tag3 ((("transfer_arguments", 1183)), [((("p")), 100000000, 0, -1741); ((("sp")), 100000000, 0, -1743); ((("ap")), 100000000, 0, -1745)], (0)), 100000000, 0, -1747), (("runtime/desc.ml", 159, 5294, 5298), ("runtime/desc.ml", 159, 5294, 5337), 0), 0, Tag1 ("Refl__Desc", 94)); (("pn", 374), 0, (Tag3 ((("transfer_arguments", 1183)), [((("p")), 100000000, 0, -1741); ((("sn")), 100000000, 0, -1744); ((("an")), 100000000, 0, -1746)], (0)), 100000000, 0, -1748), (("runtime/desc.ml", 160, 5338, 5342), ("runtime/desc.ml", 160, 5338, 5381), 0), 0, Tag1 ("Refl__Desc", 95)); (("np", 375), 0, (Tag3 ((("transfer_arguments", 1183)), [((("n")), 100000000, 0, -1742); ((("sp")), 100000000, 0, -1743); ((("an")), 100000000, 0, -1746)], (0)), 100000000, 0, -1749), (("runtime/desc.ml", 161, 5382, 5386), ("runtime/desc.ml", 161, 5382, 5425), 0), 0, Tag1 ("Refl__Desc", 96)); (("nn", 376), 0, (Tag3 ((("transfer_arguments", 1183)), [((("n")), 100000000, 0, -1742); ((("sn")), 100000000, 0, -1744); ((("ap")), 100000000, 0, -1745)], (0)), 100000000, 0, -1750), (("runtime/desc.ml", 162, 5426, 5430), ("runtime/desc.ml", 162, 5426, 5469), 0), 0, Tag1 ("Refl__Desc", 97))]], 1, ((Tag3 (Tag1 ((Tag2 ("Refl__Desc")), "transfer_matrix"), [((("p")), 100000000, 0, -1741); ((("n")), 100000000, 0, -1742); ((("sp")), 100000000, 0, -1743); ((("sn")), 100000000, 0, -1744); ((("ap")), 100000000, 0, -1745); ((("an")), 100000000, 0, -1746)], (0)), 100000000, 0, -1740)), [63; 63; 15; 15; 63; 63], [0; 0; 0; 0; 0; 0], 0, 0, (("runtime/desc.ml", 158, 5240, 5240), ("runtime/desc.ml", 163, 5470, 5473), 0), 0, 0, 0, Tag1 ("Refl__Desc", 93)), 1, 0); Tag1 (("transfer", 1185), ([((("positive")), 100000000, 0, -1702); ((("negative")), 100000000, 0, -1703); ((("direct")), 100000000, 0, -1704); ((("subpositive")), 100000000, 0, -1705); ((("subnegative")), 100000000, 0, -1706); ((("subdirect")), 100000000, 0, -1707); ((("variables")), 100000000, 0, -1708)], 7, Tag1 ([(("VTNil", 378), (0), ((Tag3 ((("transfer", 1185)), [((0), 100000000, 0, -1710); ((0), 100000000, 0, -1711); ((0), 100000000, 0, -1712); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1713); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1714); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1715); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1716)], (0)), 100000000, 0, -1709)), (("runtime/desc.ml", 167, 5581, 5583), ("runtime/desc.ml", 167, 5581, 5635), 0), 0, Tag1 ("Refl__Desc", 99)); (("VTCons", 379), Tag1 ([(("head", 380), 0, (Tag2 ([(Tag3 ((("transfer_matrix", 1184)), [((("p")), 100000000, 0, -1718); ((("n")), 100000000, 0, -1719); ((("sp")), 100000000, 0, -1722); ((("sn")), 100000000, 0, -1725); ((("ap")), 100000000, 0, -1732); ((("an")), 100000000, 0, -1733)], (0)), 100000000, 0, -1737); (Tag3 ((("transfer_arguments", 1183)), [((("d")), 100000000, 0, -1720); ((("sd")), 100000000, 0, -1728); ((("ad")), 100000000, 0, -1734)], (0)), 100000000, 0, -1738)]), 100000000, 0, -1736), (("runtime/desc.ml", 169, 5649, 5657), ("runtime/desc.ml", 171, 5721, 5765), 0), 0, Tag1 ("Refl__Desc", 100)); (("tail", 381), 0, (Tag3 ((("transfer", 1185)), [((("p")), 100000000, 0, -1718); ((("n")), 100000000, 0, -1719); ((("d")), 100000000, 0, -1720); ((("sps")), 100000000, 0, -1723); ((("sns")), 100000000, 0, -1726); ((("sds")), 100000000, 0, -1729); ((("variables")), 100000000, 0, -1735)], (0)), 100000000, 0, -1739), (("runtime/desc.ml", 172, 5766, 5774), ("runtime/desc.ml", 173, 5781, 5842), 0), 0, Tag1 ("Refl__Desc", 101))]), ((Tag3 ((("transfer", 1185)), [((("p")), 100000000, 0, -1718); ((("n")), 100000000, 0, -1719); ((("d")), 100000000, 0, -1720); (Tag2 ([((("sp")), 100000000, 0, -1722); ((("sps")), 100000000, 0, -1723)]), 100000000, 0, -1721); (Tag2 ([((("sn")), 100000000, 0, -1725); ((("sns")), 100000000, 0, -1726)]), 100000000, 0, -1724); (Tag2 ([((("sd")), 100000000, 0, -1728); ((("sds")), 100000000, 0, -1729)]), 100000000, 0, -1727); (Tag2 ([(Tag2 ([((("ap")), 100000000, 0, -1732); ((("an")), 100000000, 0, -1733); ((("ad")), 100000000, 0, -1734)]), 100000000, 0, -1731); ((("variables")), 100000000, 0, -1735)]), 100000000, 0, -1730)], (0)), 100000000, 0, -1717)), (("runtime/desc.ml", 168, 5636, 5638), ("runtime/desc.ml", 175, 5903, 5951), 0), 0, Tag1 ("Refl__Desc", 102))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Refl__Desc")), "transfer"), [((("positive")), 100000000, 0, -1702); ((("negative")), 100000000, 0, -1703); ((("direct")), 100000000, 0, -1704); ((("subpositive")), 100000000, 0, -1705); ((("subnegative")), 100000000, 0, -1706); ((("subdirect")), 100000000, 0, -1707); ((("variables")), 100000000, 0, -1708)], (0)), 100000000, 0, -1701)), [63; 63; 63; 63; 63; 63; 63], [0; 0; 0; 0; 0; 0; 0], 0, 0, (("runtime/desc.ml", 165, 5475, 5475), ("runtime/desc.ml", 175, 5903, 5951), 0), 0, 0, 0, Tag1 ("Refl__Desc", 98)), 1, 0); Tag1 (("skip", 1186), ([((("a")), 100000000, 0, -1693); ((("b")), 100000000, 0, -1694)], 2, Tag1 ([(("VKeep", 383), (0), ((Tag3 ((("skip", 1186)), [((("a")), 100000000, 0, -1696); ((("a")), 100000000, 0, -1696)], (0)), 100000000, 0, -1695)), (("runtime/desc.ml", 178, 5974, 5976), ("runtime/desc.ml", 178, 5974, 5999), 0), 0, Tag1 ("Refl__Desc", 110)); (("VSkip", 384), (0), ((Tag3 ((("skip", 1186)), [((("a")), 100000000, 0, -1698); (Tag8 (([("Absent", (0))], (0, 100000000, 0, -1700), 1, 0, 0)), 100000000, 0, -1699)], (0)), 100000000, 0, -1697)), (("runtime/desc.ml", 179, 6000, 6002), ("runtime/desc.ml", 179, 6000, 6032), 0), 0, Tag1 ("Refl__Desc", 111))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Refl__Desc")), "skip"), [((("a")), 100000000, 0, -1693); ((("b")), 100000000, 0, -1694)], (0)), 100000000, 0, -1692)), [15; 63], [0; 0], 0, 0, (("runtime/desc.ml", 177, 5953, 5953), ("runtime/desc.ml", 179, 6000, 6032), 0), 0, 1, 0, Tag1 ("Refl__Desc", 109)), 1, 0); Tag1 (("skip_vector", 1187), ([((("variables")), 100000000, 0, -1676); ((("skip_variables")), 100000000, 0, -1677)], 2, Tag1 ([(("SKNil", 386), (0), ((Tag3 ((("skip_vector", 1187)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1679); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1680)], (0)), 100000000, 0, -1678)), (("runtime/desc.ml", 182, 6083, 6085), ("runtime/desc.ml", 182, 6083, 6119), 0), 0, Tag1 ("Refl__Desc", 113)); (("SKCons", 387), Tag1 ([(("head", 388), 0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1690), (Tag3 ((("skip", 1186)), [((("hd")), 100000000, 0, -1683); ((("skip_hd")), 100000000, 0, -1686)], (0)), 100000000, 0, -1689), 0), 100000000, 0, -1688), (("runtime/desc.ml", 184, 6133, 6141), ("runtime/desc.ml", 184, 6133, 6177), 0), 0, Tag1 ("Refl__Desc", 114)); (("tail", 389), 0, (Tag3 ((("skip_vector", 1187)), [((("a")), 100000000, 0, -1684); ((("b")), 100000000, 0, -1687)], (0)), 100000000, 0, -1691), (("runtime/desc.ml", 185, 6178, 6186), ("runtime/desc.ml", 185, 6178, 6213), 0), 0, Tag1 ("Refl__Desc", 115))]), ((Tag3 ((("skip_vector", 1187)), [(Tag2 ([((("hd")), 100000000, 0, -1683); ((("a")), 100000000, 0, -1684)]), 100000000, 0, -1682); (Tag2 ([((("skip_hd")), 100000000, 0, -1686); ((("b")), 100000000, 0, -1687)]), 100000000, 0, -1685)], (0)), 100000000, 0, -1681)), (("runtime/desc.ml", 183, 6120, 6122), ("runtime/desc.ml", 186, 6219, 6264), 0), 0, Tag1 ("Refl__Desc", 116))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Refl__Desc")), "skip_vector"), [((("variables")), 100000000, 0, -1676); ((("skip_variables")), 100000000, 0, -1677)], (0)), 100000000, 0, -1675)), [63; 63], [0; 0], 0, 0, (("runtime/desc.ml", 181, 6034, 6034), ("runtime/desc.ml", 186, 6219, 6264), 0), 0, 0, 0, Tag1 ("Refl__Desc", 112)), 1, 0); Tag1 (("transfer_skip", 1188), ([((("positive")), 100000000, 0, -1653); ((("negative")), 100000000, 0, -1654); ((("direct")), 100000000, 0, -1655); ((("skip_positive")), 100000000, 0, -1656); ((("skip_negative")), 100000000, 0, -1657); ((("skip_direct")), 100000000, 0, -1658); ((("variables")), 100000000, 0, -1659)], 7, Tag1 ([(("Transfer_skip", 391), Tag1 ([(("transfer_vector", 392), 0, (Tag3 ((("transfer", 1185)), [((("positive")), 100000000, 0, -1661); ((("negative")), 100000000, 0, -1662); ((("direct")), 100000000, 0, -1663); ((("subpositive")), 100000000, 0, -1669); ((("subnegative")), 100000000, 0, -1670); ((("subdirect")), 100000000, 0, -1671); ((("variables")), 100000000, 0, -1667)], (0)), 100000000, 0, -1668), (("runtime/desc.ml", 191, 6405, 6409), ("runtime/desc.ml", 193, 6505, 6533), 0), 0, Tag1 ("Refl__Desc", 124)); (("skip_positive", 393), 0, (Tag3 ((("skip_vector", 1187)), [((("subpositive")), 100000000, 0, -1669); ((("skip_positive")), 100000000, 0, -1664)], (0)), 100000000, 0, -1672), (("runtime/desc.ml", 194, 6534, 6538), ("runtime/desc.ml", 194, 6534, 6597), 0), 0, Tag1 ("Refl__Desc", 125)); (("skip_negative", 394), 0, (Tag3 ((("skip_vector", 1187)), [((("subnegative")), 100000000, 0, -1670); ((("skip_negative")), 100000000, 0, -1665)], (0)), 100000000, 0, -1673), (("runtime/desc.ml", 195, 6598, 6602), ("runtime/desc.ml", 195, 6598, 6661), 0), 0, Tag1 ("Refl__Desc", 126)); (("skip_direct", 395), 0, (Tag3 ((("skip_vector", 1187)), [((("subdirect")), 100000000, 0, -1671); ((("skip_direct")), 100000000, 0, -1666)], (0)), 100000000, 0, -1674), (("runtime/desc.ml", 196, 6662, 6666), ("runtime/desc.ml", 196, 6662, 6719), 0), 0, Tag1 ("Refl__Desc", 127))]), ((Tag3 ((("transfer_skip", 1188)), [((("positive")), 100000000, 0, -1661); ((("negative")), 100000000, 0, -1662); ((("direct")), 100000000, 0, -1663); ((("skip_positive")), 100000000, 0, -1664); ((("skip_negative")), 100000000, 0, -1665); ((("skip_direct")), 100000000, 0, -1666); ((("variables")), 100000000, 0, -1667)], (0)), 100000000, 0, -1660)), (("runtime/desc.ml", 190, 6383, 6385), ("runtime/desc.ml", 198, 6791, 6836), 0), 0, Tag1 ("Refl__Desc", 128))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Refl__Desc")), "transfer_skip"), [((("positive")), 100000000, 0, -1653); ((("negative")), 100000000, 0, -1654); ((("direct")), 100000000, 0, -1655); ((("skip_positive")), 100000000, 0, -1656); ((("skip_negative")), 100000000, 0, -1657); ((("skip_direct")), 100000000, 0, -1658); ((("variables")), 100000000, 0, -1659)], (0)), 100000000, 0, -1652)), [63; 63; 63; 63; 63; 63; 63], [0; 0; 0; 0; 0; 0; 0], 0, 0, (("runtime/desc.ml", 188, 6266, 6266), ("runtime/desc.ml", 198, 6791, 6836), 0), 0, 0, 0, Tag1 ("Refl__Desc", 123)), 1, 0); Tag1 (("desc", 1189), ([((("a")), 100000000, 0, -1287); ((("structure")), 100000000, 0, -1288); ((("arity")), 100000000, 0, -1289); ((("rec_group")), 100000000, 0, -1290); ((("kinds")), 100000000, 0, -1291); ((("positive")), 100000000, 0, -1292); ((("negative")), 100000000, 0, -1293); ((("direct")), 100000000, 0, -1294); ((("gadt")), 100000000, 0, -1295)], 9, Tag1 ([(("Variable", 416), ([(Tag3 ((("variable", 1169)), [((("index")), 100000000, 0, -1300); ((("arity")), 100000000, 0, -1301); ((("a")), 100000000, 0, -1297); ((("positive")), 100000000, 0, -1305); ((("direct")), 100000000, 0, -1307)], (0)), 100000000, 0, -1309)]), ((Tag3 ((("desc", 1189)), [((("a")), 100000000, 0, -1297); (Tag8 (([("Variable", ((((("index")), 100000000, 0, -1300))))], (0, 100000000, 0, -1299), 1, 0, 0)), 100000000, 0, -1298); ((("arity")), 100000000, 0, -1301); ((("rec_group")), 100000000, 0, -1302); (Tag8 (([("Variable", (0))], ((0), 100000000, 0, -1304), 0, 0, 0)), 100000000, 0, -1303); ((("positive")), 100000000, 0, -1305); ((0), 100000000, 0, -1306); ((("direct")), 100000000, 0, -1307); ((0), 100000000, 0, -1308)], (0)), 100000000, 0, -1296)), (("runtime/desc.ml", 203, 6939, 6941), ("runtime/desc.ml", 206, 7082, 7120), 0), 0, Tag1 ("Refl__Desc", 155)); (("Builtin", 417), ([(Tag3 ((("builtin_desc", 1160)), [((("a")), 100000000, 0, -1311); ((("structure")), 100000000, 0, -1314); ((("kinds")), 100000000, 0, -1317)], (0)), 100000000, 0, -1322)]), ((Tag3 ((("desc", 1189)), [((("a")), 100000000, 0, -1311); (Tag8 (([("Builtin", ((((("structure")), 100000000, 0, -1314))))], (0, 100000000, 0, -1313), 1, 0, 0)), 100000000, 0, -1312); ((("arity")), 100000000, 0, -1315); ((("rec_group")), 100000000, 0, -1316); ((("kinds")), 100000000, 0, -1317); ((0), 100000000, 0, -1318); ((0), 100000000, 0, -1319); ((0), 100000000, 0, -1320); ((0), 100000000, 0, -1321)], (0)), 100000000, 0, -1310)), (("runtime/desc.ml", 207, 7121, 7123), ("runtime/desc.ml", 210, 7259, 7271), 0), 0, Tag1 ("Refl__Desc", 156)); (("Array", 418), ([(Tag3 ((("desc", 1189)), [((("a")), 100000000, 0, -1325); ((("structure")), 100000000, 0, -1328); ((("arity")), 100000000, 0, -1329); ((("rec_group")), 100000000, 0, -1330); (Tag8 (([("Array", (0))], ((("kinds")), 100000000, 0, -1332), 0, 0, 0)), 100000000, 0, -1331); ((("negative")), 100000000, 0, -1333); ((("positive")), 100000000, 0, -1334); ((("negative")), 100000000, 0, -1333); ((("gadt")), 100000000, 0, -1335)], (0)), 100000000, 0, -1336)]), ((Tag3 ((("desc", 1189)), [(Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -1325)], (0)), 100000000, 0, -1324); (Tag8 (([("Array", ((((("structure")), 100000000, 0, -1328))))], (0, 100000000, 0, -1327), 1, 0, 0)), 100000000, 0, -1326); ((("arity")), 100000000, 0, -1329); ((("rec_group")), 100000000, 0, -1330); (Tag8 (([("Array", (0))], ((("kinds")), 100000000, 0, -1332), 0, 0, 0)), 100000000, 0, -1331); ((("negative")), 100000000, 0, -1333); ((("positive")), 100000000, 0, -1334); ((("negative")), 100000000, 0, -1333); ((("gadt")), 100000000, 0, -1335)], (0)), 100000000, 0, -1323)), (("runtime/desc.ml", 211, 7272, 7274), ("runtime/desc.ml", 215, 7452, 7526), 0), 0, Tag1 ("Refl__Desc", 157)); (("Arrow", 419), Tag1 ([(("parameter", 420), 0, (Tag3 ((("desc", 1189)), [((("a")), 100000000, 0, -1340); ((("a_structure")), 100000000, 0, -1345); ((("arity")), 100000000, 0, -1346); ((("rec_group")), 100000000, 0, -1347); (Tag8 (([("Arrow", (0))], ((("kinds")), 100000000, 0, -1349), 0, 0, 0)), 100000000, 0, -1348); ((("negative")), 100000000, 0, -1351); ((("positive")), 100000000, 0, -1350); ((("negative")), 100000000, 0, -1351); ((("gadt")), 100000000, 0, -1353)], (0)), 100000000, 0, -1354), (("runtime/desc.ml", 217, 7541, 7549), ("runtime/desc.ml", 219, 7640, 7675), 0), 0, Tag1 ("Refl__Desc", 158)); (("result", 421), 0, (Tag3 ((("desc", 1189)), [((("b")), 100000000, 0, -1339); ((("b_structure")), 100000000, 0, -1344); ((("arity")), 100000000, 0, -1346); ((("rec_group")), 100000000, 0, -1347); (Tag8 (([("Arrow", (0))], ((("kinds")), 100000000, 0, -1349), 0, 0, 0)), 100000000, 0, -1348); ((("positive")), 100000000, 0, -1350); ((("negative")), 100000000, 0, -1351); ((("positive")), 100000000, 0, -1350); ((("gadt")), 100000000, 0, -1353)], (0)), 100000000, 0, -1355), (("runtime/desc.ml", 220, 7676, 7684), ("runtime/desc.ml", 222, 7772, 7807), 0), 0, Tag1 ("Refl__Desc", 159))]), ((Tag3 ((("desc", 1189)), [(Tag1 (0, ((("a")), 100000000, 0, -1340), ((("b")), 100000000, 0, -1339), 0), 100000000, 0, -1338); (Tag8 (([("Arrow", (((Tag1 (0, ((("a_structure")), 100000000, 0, -1345), ((("b_structure")), 100000000, 0, -1344), 0), 100000000, 0, -1343))))], (0, 100000000, 0, -1342), 1, 0, 0)), 100000000, 0, -1341); ((("arity")), 100000000, 0, -1346); ((("rec_group")), 100000000, 0, -1347); (Tag8 (([("Arrow", (0))], ((("kinds")), 100000000, 0, -1349), 0, 0, 0)), 100000000, 0, -1348); ((("positive")), 100000000, 0, -1350); ((("negative")), 100000000, 0, -1351); ((0), 100000000, 0, -1352); ((("gadt")), 100000000, 0, -1353)], (0)), 100000000, 0, -1337)), (("runtime/desc.ml", 216, 7527, 7529), ("runtime/desc.ml", 226, 7964, 7978), 0), 0, Tag1 ("Refl__Desc", 160)); (("LabelledArrow", 422), Tag1 ([(("label", 423), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1371), (("runtime/desc.ml", 228, 8001, 8009), ("runtime/desc.ml", 228, 8001, 8024), 0), 0, Tag1 ("Refl__Desc", 161)); (("optional", 424), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1372), (("runtime/desc.ml", 229, 8025, 8033), ("runtime/desc.ml", 229, 8025, 8049), 0), 0, Tag1 ("Refl__Desc", 162)); (("parameter", 425), 0, (Tag3 ((("desc", 1189)), [((("a")), 100000000, 0, -1374); ((("a_structure")), 100000000, 0, -1362); ((("arity")), 100000000, 0, -1363); ((("rec_group")), 100000000, 0, -1364); (Tag8 (([("Arrow", (0))], ((("kinds")), 100000000, 0, -1366), 0, 0, 0)), 100000000, 0, -1365); ((("negative")), 100000000, 0, -1368); ((("positive")), 100000000, 0, -1367); ((("negative")), 100000000, 0, -1368); ((("gadt")), 100000000, 0, -1370)], (0)), 100000000, 0, -1373), (("runtime/desc.ml", 230, 8050, 8058), ("runtime/desc.ml", 232, 8149, 8184), 0), 0, Tag1 ("Refl__Desc", 163)); (("result", 426), 0, (Tag3 ((("desc", 1189)), [((("b")), 100000000, 0, -1376); ((("b_structure")), 100000000, 0, -1361); ((("arity")), 100000000, 0, -1363); ((("rec_group")), 100000000, 0, -1364); (Tag8 (([("Arrow", (0))], ((("kinds")), 100000000, 0, -1366), 0, 0, 0)), 100000000, 0, -1365); ((("positive")), 100000000, 0, -1367); ((("negative")), 100000000, 0, -1368); ((("positive")), 100000000, 0, -1367); ((("gadt")), 100000000, 0, -1370)], (0)), 100000000, 0, -1375), (("runtime/desc.ml", 233, 8185, 8193), ("runtime/desc.ml", 235, 8281, 8316), 0), 0, Tag1 ("Refl__Desc", 164)); (("wrap", 427), 0, (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -1374), ((("b")), 100000000, 0, -1376), 0), 100000000, 0, -1378), ((("arrow")), 100000000, 0, -1357), 0), 100000000, 0, -1377), (("runtime/desc.ml", 236, 8317, 8325), ("runtime/desc.ml", 236, 8317, 8355), 0), 0, Tag1 ("Refl__Desc", 165)); (("unwrap", 428), 0, (Tag1 (0, ((("arrow")), 100000000, 0, -1357), (Tag1 (0, ((("a")), 100000000, 0, -1374), ((("b")), 100000000, 0, -1376), 0), 100000000, 0, -1380), 0), 100000000, 0, -1379), (("runtime/desc.ml", 237, 8356, 8364), ("runtime/desc.ml", 237, 8356, 8396), 0), 0, Tag1 ("Refl__Desc", 166))]), ((Tag3 ((("desc", 1189)), [((("arrow")), 100000000, 0, -1357); (Tag8 (([("LabelledArrow", (((Tag1 (0, ((("a_structure")), 100000000, 0, -1362), ((("b_structure")), 100000000, 0, -1361), 0), 100000000, 0, -1360))))], (0, 100000000, 0, -1359), 1, 0, 0)), 100000000, 0, -1358); ((("arity")), 100000000, 0, -1363); ((("rec_group")), 100000000, 0, -1364); (Tag8 (([("Arrow", (0))], ((("kinds")), 100000000, 0, -1366), 0, 0, 0)), 100000000, 0, -1365); ((("positive")), 100000000, 0, -1367); ((("negative")), 100000000, 0, -1368); ((0), 100000000, 0, -1369); ((("gadt")), 100000000, 0, -1370)], (0)), 100000000, 0, -1356)), (("runtime/desc.ml", 227, 7979, 7981), ("runtime/desc.ml", 241, 8559, 8573), 0), 0, Tag1 ("Refl__Desc", 167)); (("Constr", 429), Tag1 ([(("constructors", 430), 0, (Tag3 ((("constructors", 1190)), [((("cases")), 100000000, 0, -1395); ((("structures")), 100000000, 0, -1385); ((("arity")), 100000000, 0, -1386); ((("rec_group")), 100000000, 0, -1387); (Tag8 (([("Constr", (0))], ((("kinds")), 100000000, 0, -1389), 0, 0, 0)), 100000000, 0, -1388); ((("positive")), 100000000, 0, -1390); ((("negative")), 100000000, 0, -1391); ((("direct")), 100000000, 0, -1392); ((("gadt")), 100000000, 0, -1393)], (0)), 100000000, 0, -1394), (("runtime/desc.ml", 243, 8589, 8597), ("runtime/desc.ml", 245, 8672, 8735), 0), 0, Tag1 ("Refl__Desc", 168)); (("construct", 431), 0, (Tag1 (0, (Tag3 ((("binary_choice", 1164)), [((("cases")), 100000000, 0, -1395)], (0)), 100000000, 0, -1397), ((("a")), 100000000, 0, -1382), 0), 100000000, 0, -1396), (("runtime/desc.ml", 246, 8736, 8744), ("runtime/desc.ml", 246, 8736, 8783), 0), 0, Tag1 ("Refl__Desc", 169)); (("destruct", 432), 0, (Tag1 (0, ((("a")), 100000000, 0, -1382), (Tag3 ((("binary_choice", 1164)), [((("cases")), 100000000, 0, -1395)], (0)), 100000000, 0, -1399), 0), 100000000, 0, -1398), (("runtime/desc.ml", 247, 8784, 8792), ("runtime/desc.ml", 247, 8784, 8830), 0), 0, Tag1 ("Refl__Desc", 170))]), ((Tag3 ((("desc", 1189)), [((("a")), 100000000, 0, -1382); (Tag8 (([("Constr", ((((("structures")), 100000000, 0, -1385))))], (0, 100000000, 0, -1384), 1, 0, 0)), 100000000, 0, -1383); ((("arity")), 100000000, 0, -1386); ((("rec_group")), 100000000, 0, -1387); (Tag8 (([("Constr", (0))], ((("kinds")), 100000000, 0, -1389), 0, 0, 0)), 100000000, 0, -1388); ((("positive")), 100000000, 0, -1390); ((("negative")), 100000000, 0, -1391); ((("direct")), 100000000, 0, -1392); ((("gadt")), 100000000, 0, -1393)], (0)), 100000000, 0, -1381)), (("runtime/desc.ml", 242, 8574, 8576), ("runtime/desc.ml", 250, 8901, 8976), 0), 0, Tag1 ("Refl__Desc", 171)); (("Variant", 433), Tag1 ([(("constructors", 434), 0, (Tag3 ((("variant_constructors", 1201)), [(Tag2 ([((0), 100000000, 0, -1415); ((0), 100000000, 0, -1416)]), 100000000, 0, -1414); ((("structures")), 100000000, 0, -1404); ((("arity")), 100000000, 0, -1405); ((("rec_group")), 100000000, 0, -1406); (Tag8 (([("Variant", (0))], ((("kinds")), 100000000, 0, -1408), 0, 0, 0)), 100000000, 0, -1407); ((("positive")), 100000000, 0, -1409); ((("negative")), 100000000, 0, -1410); ((("direct")), 100000000, 0, -1411); ((("gadt")), 100000000, 0, -1412)], (0)), 100000000, 0, -1413), (("runtime/desc.ml", 252, 8993, 9001), ("runtime/desc.ml", 254, 9087, 9158), 0), 0, Tag1 ("Refl__Desc", 172)); (("construct", 435), 0, (Tag1 (0, (Tag3 ((("choice", 1163)), [(Tag2 ([((0), 100000000, 0, -1415); ((0), 100000000, 0, -1416)]), 100000000, 0, -1414)], (0)), 100000000, 0, -1418), ((("a")), 100000000, 0, -1401), 0), 100000000, 0, -1417), (("runtime/desc.ml", 255, 9159, 9167), ("runtime/desc.ml", 255, 9159, 9199), 0), 0, Tag1 ("Refl__Desc", 173)); (("destruct", 436), 0, (Tag1 (0, ((("a")), 100000000, 0, -1401), (Tag3 ((("choice", 1163)), [(Tag2 ([((0), 100000000, 0, -1415); ((0), 100000000, 0, -1416)]), 100000000, 0, -1414)], (0)), 100000000, 0, -1420), 0), 100000000, 0, -1419), (("runtime/desc.ml", 256, 9200, 9208), ("runtime/desc.ml", 256, 9200, 9239), 0), 0, Tag1 ("Refl__Desc", 174))]), ((Tag3 ((("desc", 1189)), [((("a")), 100000000, 0, -1401); (Tag8 (([("Variant", ((((("structures")), 100000000, 0, -1404))))], (0, 100000000, 0, -1403), 1, 0, 0)), 100000000, 0, -1402); ((("arity")), 100000000, 0, -1405); ((("rec_group")), 100000000, 0, -1406); (Tag8 (([("Variant", (0))], ((("kinds")), 100000000, 0, -1408), 0, 0, 0)), 100000000, 0, -1407); ((("positive")), 100000000, 0, -1409); ((("negative")), 100000000, 0, -1410); ((("direct")), 100000000, 0, -1411); ((("gadt")), 100000000, 0, -1412)], (0)), 100000000, 0, -1400)), (("runtime/desc.ml", 251, 8977, 8979), ("runtime/desc.ml", 259, 9311, 9387), 0), 0, Tag1 ("Refl__Desc", 175)); (("Tuple", 437), Tag1 ([(("structure", 438), 0, (Tag3 ((("tuple_structure", 1195)), [(Tag2 ([((0), 100000000, 0, -1436); (Tag2 ([((0), 100000000, 0, -1438); ((0), 100000000, 0, -1439)]), 100000000, 0, -1437)]), 100000000, 0, -1435); ((("structures")), 100000000, 0, -1425); ((("arity")), 100000000, 0, -1426); ((("rec_group")), 100000000, 0, -1427); (Tag8 (([("Tuple", (0))], ((("kinds")), 100000000, 0, -1429), 0, 0, 0)), 100000000, 0, -1428); ((("positive")), 100000000, 0, -1430); ((("negative")), 100000000, 0, -1431); ((("direct")), 100000000, 0, -1432); ((("gadt")), 100000000, 0, -1433)], (0)), 100000000, 0, -1434), (("runtime/desc.ml", 261, 9402, 9410), ("runtime/desc.ml", 263, 9499, 9565), 0), 0, Tag1 ("Refl__Desc", 176)); (("construct", 439), 0, (Tag1 (0, (Tag2 ([((0), 100000000, 0, -1436); (Tag2 ([((0), 100000000, 0, -1438); ((0), 100000000, 0, -1439)]), 100000000, 0, -1437)]), 100000000, 0, -1435), ((("a")), 100000000, 0, -1422), 0), 100000000, 0, -1440), (("runtime/desc.ml", 264, 9566, 9574), ("runtime/desc.ml", 264, 9566, 9599), 0), 0, Tag1 ("Refl__Desc", 177)); (("destruct", 440), 0, (Tag1 (0, ((("a")), 100000000, 0, -1422), (Tag2 ([((0), 100000000, 0, -1436); (Tag2 ([((0), 100000000, 0, -1438); ((0), 100000000, 0, -1439)]), 100000000, 0, -1437)]), 100000000, 0, -1435), 0), 100000000, 0, -1441), (("runtime/desc.ml", 265, 9600, 9608), ("runtime/desc.ml", 265, 9600, 9632), 0), 0, Tag1 ("Refl__Desc", 178))]), ((Tag3 ((("desc", 1189)), [((("a")), 100000000, 0, -1422); (Tag8 (([("Tuple", ((((("structures")), 100000000, 0, -1425))))], (0, 100000000, 0, -1424), 1, 0, 0)), 100000000, 0, -1423); ((("arity")), 100000000, 0, -1426); ((("rec_group")), 100000000, 0, -1427); (Tag8 (([("Tuple", (0))], ((("kinds")), 100000000, 0, -1429), 0, 0, 0)), 100000000, 0, -1428); ((("positive")), 100000000, 0, -1430); ((("negative")), 100000000, 0, -1431); ((("direct")), 100000000, 0, -1432); ((("gadt")), 100000000, 0, -1433)], (0)), 100000000, 0, -1421)), (("runtime/desc.ml", 260, 9388, 9390), ("runtime/desc.ml", 268, 9702, 9776), 0), 0, Tag1 ("Refl__Desc", 179)); (("Record", 441), Tag1 ([(("structure", 442), 0, (Tag3 ((("record_structure", 1196)), [(Tag2 ([((0), 100000000, 0, -1457); ((0), 100000000, 0, -1458)]), 100000000, 0, -1456); ((("structures")), 100000000, 0, -1446); ((("arity")), 100000000, 0, -1447); ((("rec_group")), 100000000, 0, -1448); (Tag8 (([("Record", (0))], ((("kinds")), 100000000, 0, -1450), 0, 0, 0)), 100000000, 0, -1449); ((("positive")), 100000000, 0, -1451); ((("negative")), 100000000, 0, -1452); ((("direct")), 100000000, 0, -1453); ((("gadt")), 100000000, 0, -1454)], (0)), 100000000, 0, -1455), (("runtime/desc.ml", 270, 9792, 9800), ("runtime/desc.ml", 272, 9883, 9950), 0), 0, Tag1 ("Refl__Desc", 180)); (("construct", 443), 0, (Tag1 (0, (Tag2 ([((0), 100000000, 0, -1457); ((0), 100000000, 0, -1458)]), 100000000, 0, -1456), ((("a")), 100000000, 0, -1443), 0), 100000000, 0, -1459), (("runtime/desc.ml", 273, 9951, 9959), ("runtime/desc.ml", 273, 9951, 9984), 0), 0, Tag1 ("Refl__Desc", 181)); (("destruct", 444), 0, (Tag1 (0, ((("a")), 100000000, 0, -1443), (Tag2 ([((0), 100000000, 0, -1457); ((0), 100000000, 0, -1458)]), 100000000, 0, -1456), 0), 100000000, 0, -1460), (("runtime/desc.ml", 274, 9985, 9993), ("runtime/desc.ml", 274, 9985, 10017), 0), 0, Tag1 ("Refl__Desc", 182))]), ((Tag3 ((("desc", 1189)), [((("a")), 100000000, 0, -1443); (Tag8 (([("Record", ((((("structures")), 100000000, 0, -1446))))], (0, 100000000, 0, -1445), 1, 0, 0)), 100000000, 0, -1444); ((("arity")), 100000000, 0, -1447); ((("rec_group")), 100000000, 0, -1448); (Tag8 (([("Record", (0))], ((("kinds")), 100000000, 0, -1450), 0, 0, 0)), 100000000, 0, -1449); ((("positive")), 100000000, 0, -1451); ((("negative")), 100000000, 0, -1452); ((("direct")), 100000000, 0, -1453); ((("gadt")), 100000000, 0, -1454)], (0)), 100000000, 0, -1442)), (("runtime/desc.ml", 269, 9777, 9779), ("runtime/desc.ml", 277, 10088, 10163), 0), 0, Tag1 ("Refl__Desc", 183)); (("Object", 445), Tag1 ([(("methods", 446), 0, (Tag3 ((("object_methods", 1204)), [((("methods")), 100000000, 0, -1476); ((("structures")), 100000000, 0, -1466); ((("arity")), 100000000, 0, -1467); ((("rec_group")), 100000000, 0, -1468); (Tag8 (([("Object", (0))], ((("kinds")), 100000000, 0, -1470), 0, 0, 0)), 100000000, 0, -1469); ((("positive")), 100000000, 0, -1471); ((("negative")), 100000000, 0, -1472); ((("direct")), 100000000, 0, -1473); ((("gadt")), 100000000, 0, -1474)], (0)), 100000000, 0, -1475), (("runtime/desc.ml", 279, 10179, 10187), ("runtime/desc.ml", 281, 10270, 10324), 0), 0, Tag1 ("Refl__Desc", 184)); (("construct", 447), 0, (Tag1 (0, (Tag3 (Tag1 ((("Delays", 1168)), "t"), [((("methods")), 100000000, 0, -1476)], (0)), 100000000, 0, -1478), (Tag4 (((("a")), 100000000, 0, -1463), (0)), 100000000, 0, -1462), 0), 100000000, 0, -1477), (("runtime/desc.ml", 282, 10325, 10333), ("runtime/desc.ml", 282, 10325, 10369), 0), 0, Tag1 ("Refl__Desc", 185)); (("destruct", 448), 0, (Tag1 (0, (Tag4 (((("a")), 100000000, 0, -1463), (0)), 100000000, 0, -1462), (Tag3 (Tag1 ((("Delays", 1168)), "t"), [((("methods")), 100000000, 0, -1476)], (0)), 100000000, 0, -1480), 0), 100000000, 0, -1479), (("runtime/desc.ml", 283, 10370, 10378), ("runtime/desc.ml", 283, 10370, 10413), 0), 0, Tag1 ("Refl__Desc", 186))]), ((Tag3 ((("desc", 1189)), [(Tag4 (((("a")), 100000000, 0, -1463), (0)), 100000000, 0, -1462); (Tag8 (([("Object", ((((("structures")), 100000000, 0, -1466))))], (0, 100000000, 0, -1465), 1, 0, 0)), 100000000, 0, -1464); ((("arity")), 100000000, 0, -1467); ((("rec_group")), 100000000, 0, -1468); (Tag8 (([("Object", (0))], ((("kinds")), 100000000, 0, -1470), 0, 0, 0)), 100000000, 0, -1469); ((("positive")), 100000000, 0, -1471); ((("negative")), 100000000, 0, -1472); ((("direct")), 100000000, 0, -1473); ((("gadt")), 100000000, 0, -1474)], (0)), 100000000, 0, -1461)), (("runtime/desc.ml", 278, 10164, 10166), ("runtime/desc.ml", 286, 10494, 10569), 0), 0, Tag1 ("Refl__Desc", 187)); (("Lazy", 449), ([(Tag3 ((("desc", 1189)), [((("a")), 100000000, 0, -1483); ((("structure")), 100000000, 0, -1486); ((("arity")), 100000000, 0, -1487); ((("rec_group")), 100000000, 0, -1488); (Tag8 (([("Lazy", (0))], ((("kinds")), 100000000, 0, -1490), 0, 0, 0)), 100000000, 0, -1489); ((("positive")), 100000000, 0, -1491); ((("negative")), 100000000, 0, -1492); ((("direct")), 100000000, 0, -1493); ((("gadt")), 100000000, 0, -1494)], (0)), 100000000, 0, -1495)]), ((Tag3 ((("desc", 1189)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lazy"), "t"), [((("a")), 100000000, 0, -1483)], (0)), 100000000, 0, -1482); (Tag8 (([("Lazy", ((((("structure")), 100000000, 0, -1486))))], (0, 100000000, 0, -1485), 1, 0, 0)), 100000000, 0, -1484); ((("arity")), 100000000, 0, -1487); ((("rec_group")), 100000000, 0, -1488); (Tag8 (([("Lazy", (0))], ((("kinds")), 100000000, 0, -1490), 0, 0, 0)), 100000000, 0, -1489); ((("positive")), 100000000, 0, -1491); ((("negative")), 100000000, 0, -1492); ((("direct")), 100000000, 0, -1493); ((("gadt")), 100000000, 0, -1494)], (0)), 100000000, 0, -1481)), (("runtime/desc.ml", 287, 10570, 10572), ("runtime/desc.ml", 291, 10749, 10822), 0), 0, Tag1 ("Refl__Desc", 188)); (("Apply", 459), Tag1 ([(("arguments", 460), 0, (Tag3 ((("vector", 1206)), [((("types")), 100000000, 0, -1515); ((("structures")), 100000000, 0, -1502); ((("arity")), 100000000, 0, -1507); ((("rec_group")), 100000000, 0, -1508); ((("kinds")), 100000000, 0, -1509); ((("variables")), 100000000, 0, -1506); ((("gadt")), 100000000, 0, -1513)], (0)), 100000000, 0, -1514), (("runtime/desc.ml", 293, 10837, 10845), ("runtime/desc.ml", 295, 10929, 10955), 0), 0, Tag1 ("Refl__Desc", 189)); (("desc", 461), 0, (Tag3 ((("desc", 1189)), [((("a")), 100000000, 0, -1497); ((("structure")), 100000000, 0, -1501); ((("types")), 100000000, 0, -1515); ((("rec_group")), 100000000, 0, -1508); ((("kinds")), 100000000, 0, -1509); ((("subpositive")), 100000000, 0, -1503); ((("subnegative")), 100000000, 0, -1504); ((("subdirect")), 100000000, 0, -1505); ((("gadt")), 100000000, 0, -1513)], (0)), 100000000, 0, -1516), (("runtime/desc.ml", 296, 10956, 10964), ("runtime/desc.ml", 298, 11040, 11090), 0), 0, Tag1 ("Refl__Desc", 190)); (("transfer", 462), 0, (Tag3 ((("transfer_skip", 1188)), [((("positive")), 100000000, 0, -1510); ((("negative")), 100000000, 0, -1511); ((("direct")), 100000000, 0, -1512); ((("subpositive")), 100000000, 0, -1503); ((("subnegative")), 100000000, 0, -1504); ((("subdirect")), 100000000, 0, -1505); ((("variables")), 100000000, 0, -1506)], (0)), 100000000, 0, -1517), (("runtime/desc.ml", 299, 11091, 11099), ("runtime/desc.ml", 301, 11180, 11230), 0), 0, Tag1 ("Refl__Desc", 191))]), ((Tag3 ((("desc", 1189)), [((("a")), 100000000, 0, -1497); (Tag8 (([("Apply", (((Tag2 ([((("structure")), 100000000, 0, -1501); ((("structures")), 100000000, 0, -1502); ((("subpositive")), 100000000, 0, -1503); ((("subnegative")), 100000000, 0, -1504); ((("subdirect")), 100000000, 0, -1505); ((("variables")), 100000000, 0, -1506)]), 100000000, 0, -1500))))], (0, 100000000, 0, -1499), 1, 0, 0)), 100000000, 0, -1498); ((("arity")), 100000000, 0, -1507); ((("rec_group")), 100000000, 0, -1508); ((("kinds")), 100000000, 0, -1509); ((("positive")), 100000000, 0, -1510); ((("negative")), 100000000, 0, -1511); ((("direct")), 100000000, 0, -1512); ((("gadt")), 100000000, 0, -1513)], (0)), 100000000, 0, -1496)), (("runtime/desc.ml", 292, 10823, 10825), ("runtime/desc.ml", 307, 11447, 11461), 0), 0, Tag1 ("Refl__Desc", 192)); (("MapOpaque", 463), Tag1 ([(("desc", 464), 0, (Tag3 ((("desc", 1189)), [((("a")), 100000000, 0, -1519); ((("structure")), 100000000, 0, -1523); ((("arity")), 100000000, 0, -1525); ((("rec_group")), 100000000, 0, -1526); (Tag3 (Tag1 ((("Kinds", 1179)), "all"), 0, (0)), 100000000, 0, -1534); ((("positive")), 100000000, 0, -1529); ((("negative")), 100000000, 0, -1530); ((("direct")), 100000000, 0, -1524); ((("gadt")), 100000000, 0, -1532)], (0)), 100000000, 0, -1533), (("runtime/desc.ml", 309, 11480, 11488), ("runtime/desc.ml", 311, 11564, 11608), 0), 0, Tag1 ("Refl__Desc", 193))]), ((Tag3 ((("desc", 1189)), [((("a")), 100000000, 0, -1519); (Tag8 (([("MapOpaque", (((Tag2 ([((("structure")), 100000000, 0, -1523); ((("direct")), 100000000, 0, -1524)]), 100000000, 0, -1522))))], (0, 100000000, 0, -1521), 1, 0, 0)), 100000000, 0, -1520); ((("arity")), 100000000, 0, -1525); ((("rec_group")), 100000000, 0, -1526); (Tag8 (([("MapOpaque", (0))], ((0), 100000000, 0, -1528), 0, 0, 0)), 100000000, 0, -1527); ((("positive")), 100000000, 0, -1529); ((("negative")), 100000000, 0, -1530); ((0), 100000000, 0, -1531); ((("gadt")), 100000000, 0, -1532)], (0)), 100000000, 0, -1518)), (("runtime/desc.ml", 308, 11462, 11464), ("runtime/desc.ml", 314, 11679, 11753), 0), 0, Tag1 ("Refl__Desc", 194)); (("Opaque", 465), ([(Tag3 ((("selection", 1161)), [(Tag8 (([("Succ", ((((("index")), 100000000, 0, -1539))))], (0, 100000000, 0, -1550), 1, 0, 0)), 100000000, 0, -1549); ((("gadt")), 100000000, 0, -1547); ((("a")), 100000000, 0, -1536); ((0), 100000000, 0, -1551)], (0)), 100000000, 0, -1548)]), ((Tag3 ((("desc", 1189)), [((("a")), 100000000, 0, -1536); (Tag8 (([("Opaque", ((((("index")), 100000000, 0, -1539))))], (0, 100000000, 0, -1538), 1, 0, 0)), 100000000, 0, -1537); ((("arity")), 100000000, 0, -1540); ((("rec_group")), 100000000, 0, -1541); (Tag8 (([("Opaque", (0))], ((0), 100000000, 0, -1543), 0, 0, 0)), 100000000, 0, -1542); ((("positive")), 100000000, 0, -1544); ((("negative")), 100000000, 0, -1545); ((0), 100000000, 0, -1546); ((("gadt")), 100000000, 0, -1547)], (0)), 100000000, 0, -1535)), (("runtime/desc.ml", 315, 11754, 11756), ("runtime/desc.ml", 318, 11862, 11933), 0), 0, Tag1 ("Refl__Desc", 195)); (("Rec", 466), Tag1 ([(("index", 467), 0, (Tag3 ((("binary_selection", 1162)), [(Tag8 (([("Select", ((((("index")), 100000000, 0, -1556))))], (0, 100000000, 0, -1566), 1, 0, 0)), 100000000, 0, -1565); ((("rec_group")), 100000000, 0, -1558); (Tag2 ([((("length")), 100000000, 0, -1568); ((("structure")), 100000000, 0, -1569)]), 100000000, 0, -1567); ((0), 100000000, 0, -1570)], (0)), 100000000, 0, -1564), (("runtime/desc.ml", 320, 11946, 11954), ("runtime/desc.ml", 322, 12031, 12060), 0), 0, Tag1 ("Refl__Desc", 196)); (("desc", 468), 0, (Tag3 ((("desc", 1189)), [((("a")), 100000000, 0, -1553); ((("structure")), 100000000, 0, -1569); ((("arity")), 100000000, 0, -1557); ((("rec_group")), 100000000, 0, -1558); ((("kinds")), 100000000, 0, -1559); ((("positive")), 100000000, 0, -1560); ((("negative")), 100000000, 0, -1561); ((("direct")), 100000000, 0, -1562); ((("gadt")), 100000000, 0, -1563)], (0)), 100000000, 0, -1571), (("runtime/desc.ml", 323, 12061, 12069), ("runtime/desc.ml", 325, 12142, 12186), 0), 0, Tag1 ("Refl__Desc", 197))]), ((Tag3 ((("desc", 1189)), [((("a")), 100000000, 0, -1553); (Tag8 (([("Rec", ((((("index")), 100000000, 0, -1556))))], (0, 100000000, 0, -1555), 1, 0, 0)), 100000000, 0, -1554); ((("arity")), 100000000, 0, -1557); ((("rec_group")), 100000000, 0, -1558); ((("kinds")), 100000000, 0, -1559); ((("positive")), 100000000, 0, -1560); ((("negative")), 100000000, 0, -1561); ((("direct")), 100000000, 0, -1562); ((("gadt")), 100000000, 0, -1563)], (0)), 100000000, 0, -1552)), (("runtime/desc.ml", 319, 11934, 11936), ("runtime/desc.ml", 328, 12268, 12309), 0), 0, Tag1 ("Refl__Desc", 198)); (("RecGroup", 469), Tag1 ([(("desc", 470), 0, (Tag3 ((("desc", 1189)), [((("a")), 100000000, 0, -1573); ((("structure")), 100000000, 0, -1577); ((("arity")), 100000000, 0, -1579); ((("new_rec_group")), 100000000, 0, -1578); ((("kinds")), 100000000, 0, -1581); ((("positive")), 100000000, 0, -1582); ((("negative")), 100000000, 0, -1583); ((("direct")), 100000000, 0, -1584); ((("gadt")), 100000000, 0, -1585)], (0)), 100000000, 0, -1586), (("runtime/desc.ml", 330, 12327, 12335), ("runtime/desc.ml", 332, 12412, 12456), 0), 0, Tag1 ("Refl__Desc", 199))]), ((Tag3 ((("desc", 1189)), [((("a")), 100000000, 0, -1573); (Tag8 (([("RecGroup", (((Tag2 ([((("structure")), 100000000, 0, -1577); ((("new_rec_group")), 100000000, 0, -1578)]), 100000000, 0, -1576))))], (0, 100000000, 0, -1575), 1, 0, 0)), 100000000, 0, -1574); ((("arity")), 100000000, 0, -1579); ((("rec_group")), 100000000, 0, -1580); ((("kinds")), 100000000, 0, -1581); ((("positive")), 100000000, 0, -1582); ((("negative")), 100000000, 0, -1583); ((("direct")), 100000000, 0, -1584); ((("gadt")), 100000000, 0, -1585)], (0)), 100000000, 0, -1572)), (("runtime/desc.ml", 329, 12310, 12312), ("runtime/desc.ml", 338, 12605, 12679), 0), 0, Tag1 ("Refl__Desc", 200)); (("SelectGADT", 471), Tag1 ([(("index", 472), 0, (Tag3 ((("selection", 1161)), [(Tag8 (([("Succ", ((((("index")), 100000000, 0, -1593))))], (0, 100000000, 0, -1603), 1, 0, 0)), 100000000, 0, -1602); ((("gadt")), 100000000, 0, -1600); ((("sub_gadt")), 100000000, 0, -1604); ((0), 100000000, 0, -1605)], (0)), 100000000, 0, -1601), (("runtime/desc.ml", 340, 12699, 12707), ("runtime/desc.ml", 340, 12699, 12766), 0), 0, Tag1 ("Refl__Desc", 201)); (("desc", 473), 0, (Tag3 ((("desc", 1189)), [((("a")), 100000000, 0, -1588); ((("structure")), 100000000, 0, -1592); ((("arity")), 100000000, 0, -1594); ((("rec_group")), 100000000, 0, -1595); ((("kinds")), 100000000, 0, -1596); ((("positive")), 100000000, 0, -1597); ((("negative")), 100000000, 0, -1598); ((("direct")), 100000000, 0, -1599); ((("sub_gadt")), 100000000, 0, -1604)], (0)), 100000000, 0, -1606), (("runtime/desc.ml", 341, 12767, 12775), ("runtime/desc.ml", 343, 12848, 12896), 0), 0, Tag1 ("Refl__Desc", 202))]), ((Tag3 ((("desc", 1189)), [((("a")), 100000000, 0, -1588); (Tag8 (([("SelectGADT", (((Tag2 ([((("structure")), 100000000, 0, -1592); ((("index")), 100000000, 0, -1593)]), 100000000, 0, -1591))))], (0, 100000000, 0, -1590), 1, 0, 0)), 100000000, 0, -1589); ((("arity")), 100000000, 0, -1594); ((("rec_group")), 100000000, 0, -1595); ((("kinds")), 100000000, 0, -1596); ((("positive")), 100000000, 0, -1597); ((("negative")), 100000000, 0, -1598); ((("direct")), 100000000, 0, -1599); ((("gadt")), 100000000, 0, -1600)], (0)), 100000000, 0, -1587)), (("runtime/desc.ml", 339, 12680, 12682), ("runtime/desc.ml", 346, 12979, 13039), 0), 0, Tag1 ("Refl__Desc", 203)); (("SubGADT", 474), Tag1 ([(("sub_gadt", 475), 0, (Tag3 ((("sub_gadt", 1177)), [((("gadt")), 100000000, 0, -1618); ((("sub_gadt")), 100000000, 0, -1620)], (0)), 100000000, 0, -1619), (("runtime/desc.ml", 348, 13056, 13064), ("runtime/desc.ml", 348, 13056, 13103), 0), 0, Tag1 ("Refl__Desc", 204)); (("desc", 476), 0, (Tag3 ((("desc", 1189)), [((("a")), 100000000, 0, -1608); ((("structure")), 100000000, 0, -1611); ((("arity")), 100000000, 0, -1612); ((("rec_group")), 100000000, 0, -1613); ((("kinds")), 100000000, 0, -1614); ((("positive")), 100000000, 0, -1615); ((("negative")), 100000000, 0, -1616); ((("direct")), 100000000, 0, -1617); ((("sub_gadt")), 100000000, 0, -1620)], (0)), 100000000, 0, -1621), (("runtime/desc.ml", 349, 13104, 13112), ("runtime/desc.ml", 351, 13185, 13233), 0), 0, Tag1 ("Refl__Desc", 205))]), ((Tag3 ((("desc", 1189)), [((("a")), 100000000, 0, -1608); (Tag8 (([("SubGADT", ((((("structure")), 100000000, 0, -1611))))], (0, 100000000, 0, -1610), 1, 0, 0)), 100000000, 0, -1609); ((("arity")), 100000000, 0, -1612); ((("rec_group")), 100000000, 0, -1613); ((("kinds")), 100000000, 0, -1614); ((("positive")), 100000000, 0, -1615); ((("negative")), 100000000, 0, -1616); ((("direct")), 100000000, 0, -1617); ((("gadt")), 100000000, 0, -1618)], (0)), 100000000, 0, -1607)), (("runtime/desc.ml", 347, 13040, 13042), ("runtime/desc.ml", 354, 13304, 13364), 0), 0, Tag1 ("Refl__Desc", 206)); (("Attributes", 477), Tag1 ([(("attributes", 478), 0, (Tag3 ((("attributes", 1208)), [((("a")), 100000000, 0, -1623); ((("arity")), 100000000, 0, -1627); ((("rec_group")), 100000000, 0, -1628); (Tag8 (([("Attributes", (0))], ((("kinds")), 100000000, 0, -1630), 0, 0, 0)), 100000000, 0, -1629); ((("positive")), 100000000, 0, -1631); ((("negative")), 100000000, 0, -1632); ((("direct")), 100000000, 0, -1633); ((("gadt")), 100000000, 0, -1634)], (0)), 100000000, 0, -1635), (("runtime/desc.ml", 356, 13384, 13392), ("runtime/desc.ml", 358, 13459, 13509), 0), 0, Tag1 ("Refl__Desc", 207)); (("desc", 479), 0, (Tag3 ((("desc", 1189)), [((("a")), 100000000, 0, -1623); ((("structure")), 100000000, 0, -1626); ((("arity")), 100000000, 0, -1627); ((("rec_group")), 100000000, 0, -1628); (Tag8 (([("Attributes", (0))], ((("kinds")), 100000000, 0, -1630), 0, 0, 0)), 100000000, 0, -1629); ((("positive")), 100000000, 0, -1631); ((("negative")), 100000000, 0, -1632); ((("direct")), 100000000, 0, -1633); ((("gadt")), 100000000, 0, -1634)], (0)), 100000000, 0, -1636), (("runtime/desc.ml", 359, 13510, 13518), ("runtime/desc.ml", 361, 13591, 13635), 0), 0, Tag1 ("Refl__Desc", 208))]), ((Tag3 ((("desc", 1189)), [((("a")), 100000000, 0, -1623); (Tag8 (([("Attributes", ((((("structure")), 100000000, 0, -1626))))], (0, 100000000, 0, -1625), 1, 0, 0)), 100000000, 0, -1624); ((("arity")), 100000000, 0, -1627); ((("rec_group")), 100000000, 0, -1628); (Tag8 (([("Attributes", (0))], ((("kinds")), 100000000, 0, -1630), 0, 0, 0)), 100000000, 0, -1629); ((("positive")), 100000000, 0, -1631); ((("negative")), 100000000, 0, -1632); ((("direct")), 100000000, 0, -1633); ((("gadt")), 100000000, 0, -1634)], (0)), 100000000, 0, -1622)), (("runtime/desc.ml", 355, 13365, 13367), ("runtime/desc.ml", 364, 13709, 13788), 0), 0, Tag1 ("Refl__Desc", 209)); (("Name", 480), Tag1 ([(("name", 481), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1649), (("runtime/desc.ml", 366, 13802, 13810), ("runtime/desc.ml", 366, 13802, 13824), 0), 0, Tag1 ("Refl__Desc", 210)); (("refl", 482), 0, (Tag3 ((("refl", 1181)), [((("a")), 100000000, 0, -1638)], (0)), 100000000, 0, -1650), (("runtime/desc.ml", 367, 13825, 13833), ("runtime/desc.ml", 367, 13825, 13848), 0), 0, Tag1 ("Refl__Desc", 211)); (("desc", 483), 0, (Tag3 ((("desc", 1189)), [((("a")), 100000000, 0, -1638); ((("structure")), 100000000, 0, -1641); ((("arity")), 100000000, 0, -1642); ((("rec_group")), 100000000, 0, -1643); ((("kinds")), 100000000, 0, -1644); ((("positive")), 100000000, 0, -1645); ((("negative")), 100000000, 0, -1646); ((("direct")), 100000000, 0, -1647); ((("sub_gadt")), 100000000, 0, -1648)], (0)), 100000000, 0, -1651), (("runtime/desc.ml", 368, 13849, 13857), ("runtime/desc.ml", 370, 13930, 13978), 0), 0, Tag1 ("Refl__Desc", 212))]), ((Tag3 ((("desc", 1189)), [((("a")), 100000000, 0, -1638); (Tag8 (([("Name", ((((("structure")), 100000000, 0, -1641))))], (0, 100000000, 0, -1640), 1, 0, 0)), 100000000, 0, -1639); ((("arity")), 100000000, 0, -1642); ((("rec_group")), 100000000, 0, -1643); ((("kinds")), 100000000, 0, -1644); ((("positive")), 100000000, 0, -1645); ((("negative")), 100000000, 0, -1646); ((("direct")), 100000000, 0, -1647); ((("sub_gadt")), 100000000, 0, -1648)], (0)), 100000000, 0, -1637)), (("runtime/desc.ml", 365, 13789, 13791), ("runtime/desc.ml", 373, 14065, 14109), 0), 0, Tag1 ("Refl__Desc", 213))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Refl__Desc")), "desc"), [((("a")), 100000000, 0, -1287); ((("structure")), 100000000, 0, -1288); ((("arity")), 100000000, 0, -1289); ((("rec_group")), 100000000, 0, -1290); ((("kinds")), 100000000, 0, -1291); ((("positive")), 100000000, 0, -1292); ((("negative")), 100000000, 0, -1293); ((("direct")), 100000000, 0, -1294); ((("gadt")), 100000000, 0, -1295)], (0)), 100000000, 0, -1286)), [63; 63; 63; 15; 63; 63; 63; 63; 15], [0; 0; 0; 0; 0; 0; 0; 0; 0], 0, 0, (("runtime/desc.ml", 200, 6838, 6838), ("runtime/desc.ml", 373, 14065, 14109), 0), 0, 0, 0, Tag1 ("Refl__Desc", 135)), 1, 0); Tag1 (("constructors", 1190), ([((("cases")), 100000000, 0, -1248); ((("structures")), 100000000, 0, -1249); ((("arity")), 100000000, 0, -1250); ((("rec_group")), 100000000, 0, -1251); ((("kinds")), 100000000, 0, -1252); ((("positive")), 100000000, 0, -1253); ((("negative")), 100000000, 0, -1254); ((("direct")), 100000000, 0, -1255); ((("gadt")), 100000000, 0, -1256)], 9, Tag1 ([(("CLeaf", 484), ([(Tag3 ((("constructor", 1191)), [((("types_and_eqs")), 100000000, 0, -1259); ((("structure")), 100000000, 0, -1261); ((("arity")), 100000000, 0, -1262); ((("rec_group")), 100000000, 0, -1263); ((("kinds")), 100000000, 0, -1264); ((("positive")), 100000000, 0, -1265); ((("negative")), 100000000, 0, -1266); ((("direct")), 100000000, 0, -1267); ((("gadt")), 100000000, 0, -1268)], (0)), 100000000, 0, -1269)]), ((Tag3 ((("constructors", 1190)), [(Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [((("types_and_eqs")), 100000000, 0, -1259)], (0)), 100000000, 0, -1258); (Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [((("structure")), 100000000, 0, -1261)], (0)), 100000000, 0, -1260); ((("arity")), 100000000, 0, -1262); ((("rec_group")), 100000000, 0, -1263); ((("kinds")), 100000000, 0, -1264); ((("positive")), 100000000, 0, -1265); ((("negative")), 100000000, 0, -1266); ((("direct")), 100000000, 0, -1267); ((("gadt")), 100000000, 0, -1268)], (0)), 100000000, 0, -1257)), (("runtime/desc.ml", 377, 14224, 14226), ("runtime/desc.ml", 381, 14432, 14491), 0), 0, Tag1 ("Refl__Desc", 214)); (("CNode", 485), Tag1 ([(("zero", 486), 0, (Tag3 ((("constructors", 1190)), [((("cases0")), 100000000, 0, -1272); ((("structures0")), 100000000, 0, -1275); ((("arity")), 100000000, 0, -1277); ((("rec_group")), 100000000, 0, -1278); ((("kinds")), 100000000, 0, -1279); ((("positive")), 100000000, 0, -1280); ((("negative")), 100000000, 0, -1281); ((("direct")), 100000000, 0, -1282); ((("gadt")), 100000000, 0, -1283)], (0)), 100000000, 0, -1284), (("runtime/desc.ml", 383, 14506, 14514), ("runtime/desc.ml", 385, 14594, 14646), 0), 0, Tag1 ("Refl__Desc", 215)); (("one", 487), 0, (Tag3 ((("constructors", 1190)), [((("cases1")), 100000000, 0, -1273); ((("structures1")), 100000000, 0, -1276); ((("arity")), 100000000, 0, -1277); ((("rec_group")), 100000000, 0, -1278); ((("kinds")), 100000000, 0, -1279); ((("positive")), 100000000, 0, -1280); ((("negative")), 100000000, 0, -1281); ((("direct")), 100000000, 0, -1282); ((("gadt")), 100000000, 0, -1283)], (0)), 100000000, 0, -1285), (("runtime/desc.ml", 386, 14647, 14655), ("runtime/desc.ml", 388, 14734, 14786), 0), 0, Tag1 ("Refl__Desc", 216))]), ((Tag3 ((("constructors", 1190)), [(Tag2 ([((("cases0")), 100000000, 0, -1272); ((("cases1")), 100000000, 0, -1273)]), 100000000, 0, -1271); (Tag2 ([((("structures0")), 100000000, 0, -1275); ((("structures1")), 100000000, 0, -1276)]), 100000000, 0, -1274); ((("arity")), 100000000, 0, -1277); ((("rec_group")), 100000000, 0, -1278); ((("kinds")), 100000000, 0, -1279); ((("positive")), 100000000, 0, -1280); ((("negative")), 100000000, 0, -1281); ((("direct")), 100000000, 0, -1282); ((("gadt")), 100000000, 0, -1283)], (0)), 100000000, 0, -1270)), (("runtime/desc.ml", 382, 14492, 14494), ("runtime/desc.ml", 391, 14875, 14943), 0), 0, Tag1 ("Refl__Desc", 217))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Refl__Desc")), "constructors"), [((("cases")), 100000000, 0, -1248); ((("structures")), 100000000, 0, -1249); ((("arity")), 100000000, 0, -1250); ((("rec_group")), 100000000, 0, -1251); ((("kinds")), 100000000, 0, -1252); ((("positive")), 100000000, 0, -1253); ((("negative")), 100000000, 0, -1254); ((("direct")), 100000000, 0, -1255); ((("gadt")), 100000000, 0, -1256)], (0)), 100000000, 0, -1247)), [63; 63; 63; 15; 63; 63; 63; 63; 15], [0; 0; 0; 0; 0; 0; 0; 0; 0], 0, 0, (("runtime/desc.ml", 375, 14111, 14111), ("runtime/desc.ml", 391, 14875, 14943), 0), 0, 0, 0, Tag1 ("Refl__Desc", 136)), 2, 0); Tag1 (("constructor", 1191), ([((("types_and_eqs")), 100000000, 0, -1175); ((("structure")), 100000000, 0, -1176); ((("arity")), 100000000, 0, -1177); ((("rec_group")), 100000000, 0, -1178); ((("kinds")), 100000000, 0, -1179); ((("positive")), 100000000, 0, -1180); ((("negative")), 100000000, 0, -1181); ((("direct")), 100000000, 0, -1182); ((("gadt")), 100000000, 0, -1183)], 9, Tag1 ([(("Constructor", 488), Tag1 ([(("name", 489), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1200), (("runtime/desc.ml", 396, 15084, 15092), ("runtime/desc.ml", 396, 15084, 15106), 0), 0, Tag1 ("Refl__Desc", 218)); (("kind", 490), 0, (Tag3 ((("constructor_kind", 1194)), [((("types")), 100000000, 0, -1186); ((("structure_types")), 100000000, 0, -1191); ((("arity")), 100000000, 0, -1193); ((("rec_group")), 100000000, 0, -1194); ((("kinds")), 100000000, 0, -1195); ((("positive")), 100000000, 0, -1196); ((("negative")), 100000000, 0, -1197); ((("direct")), 100000000, 0, -1198); ((("gadt")), 100000000, 0, -1199)], (0)), 100000000, 0, -1201), (("runtime/desc.ml", 397, 15107, 15115), ("runtime/desc.ml", 399, 15198, 15254), 0), 0, Tag1 ("Refl__Desc", 219)); (("eqs", 491), 0, (Tag3 ((("constructor_eqs", 1207)), [((("eqs")), 100000000, 0, -1187); ((("structure_eqs")), 100000000, 0, -1192); ((("kinds")), 100000000, 0, -1195); ((("gadt")), 100000000, 0, -1199)], (0)), 100000000, 0, -1202), (("runtime/desc.ml", 400, 15255, 15263), ("runtime/desc.ml", 400, 15255, 15323), 0), 0, Tag1 ("Refl__Desc", 220)); (("attributes", 492), 0, (Tag3 ((("attributes", 1208)), [((("types")), 100000000, 0, -1186); ((("arity")), 100000000, 0, -1193); ((("rec_group")), 100000000, 0, -1194); ((("kinds")), 100000000, 0, -1195); ((("positive")), 100000000, 0, -1196); ((("negative")), 100000000, 0, -1197); ((("direct")), 100000000, 0, -1198); ((("gadt")), 100000000, 0, -1199)], (0)), 100000000, 0, -1203), (("runtime/desc.ml", 401, 15324, 15332), ("runtime/desc.ml", 403, 15403, 15453), 0), 0, Tag1 ("Refl__Desc", 221))]), ((Tag3 ((("constructor", 1191)), [(Tag2 ([((("types")), 100000000, 0, -1186); ((("eqs")), 100000000, 0, -1187)]), 100000000, 0, -1185); (Tag8 (([("Constructor", (((Tag2 ([((("structure_types")), 100000000, 0, -1191); ((("structure_eqs")), 100000000, 0, -1192)]), 100000000, 0, -1190))))], (0, 100000000, 0, -1189), 1, 0, 0)), 100000000, 0, -1188); ((("arity")), 100000000, 0, -1193); ((("rec_group")), 100000000, 0, -1194); ((("kinds")), 100000000, 0, -1195); ((("positive")), 100000000, 0, -1196); ((("negative")), 100000000, 0, -1197); ((("direct")), 100000000, 0, -1198); ((("gadt")), 100000000, 0, -1199)], (0)), 100000000, 0, -1184)), (("runtime/desc.ml", 395, 15064, 15066), ("runtime/desc.ml", 407, 15618, 15639), 0), 0, Tag1 ("Refl__Desc", 222)); (("Exists", 493), Tag1 ([(("name", 494), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1224), (("runtime/desc.ml", 409, 15655, 15663), ("runtime/desc.ml", 409, 15655, 15677), 0), 0, Tag1 ("Refl__Desc", 223)); (("selection", 495), 0, (Tag3 ((("selection", 1161)), [(Tag8 (([("Succ", ((((("index")), 100000000, 0, -1209))))], (0, 100000000, 0, -1227), 1, 0, 0)), 100000000, 0, -1226); ((("gadt")), 100000000, 0, -1223); ((("constraints")), 100000000, 0, -1228); ((0), 100000000, 0, -1229)], (0)), 100000000, 0, -1225), (("runtime/desc.ml", 410, 15678, 15686), ("runtime/desc.ml", 410, 15678, 15752), 0), 0, Tag1 ("Refl__Desc", 224)); (("presence", 496), 0, (Tag3 ((("presence", 1172)), [(Tag8 (([("Exists", (0))], ((("kinds")), 100000000, 0, -1219), 0, 0, 0)), 100000000, 0, -1218); ((("local")), 100000000, 0, -1212)], (0)), 100000000, 0, -1230), (("runtime/desc.ml", 411, 15753, 15761), ("runtime/desc.ml", 411, 15753, 15798), 0), 0, Tag1 ("Refl__Desc", 225)); (("variables", 497), 0, (Tag3 ((("subvariables", 1178)), [((("count")), 100000000, 0, -1210); ((("local")), 100000000, 0, -1212); ((("positive")), 100000000, 0, -1220); ((("negative")), 100000000, 0, -1221); ((("direct")), 100000000, 0, -1222); ((("positives")), 100000000, 0, -1213); ((("negatives")), 100000000, 0, -1214); ((("directs")), 100000000, 0, -1215); ((("subpositive")), 100000000, 0, -1232); ((("subnegative")), 100000000, 0, -1233); ((("subdirect")), 100000000, 0, -1234)], (0)), 100000000, 0, -1231), (("runtime/desc.ml", 412, 15799, 15807), ("runtime/desc.ml", 415, 15951, 15988), 0), 0, Tag1 ("Refl__Desc", 226)); (("construct", 498), 0, (Tag10 ((Tag1 (0, (Tag3 ((("length", 1170)), [((("count")), 100000000, 0, -1210); (Tag9 (("exists")), 100000000, 0, -1236)], (0)), 100000000, 0, -1244), (Tag1 (0, (Tag3 ((("gadt_constraints", 1174)), [((("constraints")), 100000000, 0, -1228); (Tag9 (("exists")), 100000000, 0, -1236)], (0)), 100000000, 0, -1243), (Tag1 (0, (Tag3 ((("append", 1171)), [(Tag9 (("exists")), 100000000, 0, -1236); ((("arity")), 100000000, 0, -1216); (Tag9 (("subarity")), 100000000, 0, -1237)], (0)), 100000000, 0, -1242), (Tag3 ((("exists_construct", 1192)), [((("value")), 100000000, 0, -1205); ((("structure")), 100000000, 0, -1211); (Tag9 (("subarity")), 100000000, 0, -1237); ((("rec_group")), 100000000, 0, -1217); (Tag8 (([("Exists", (0))], ((("kinds")), 100000000, 0, -1219), 0, 0, 0)), 100000000, 0, -1218); ((("subpositive")), 100000000, 0, -1232); ((("subnegative")), 100000000, 0, -1233); ((("subdirect")), 100000000, 0, -1234); ((("gadt")), 100000000, 0, -1223)], (0)), 100000000, 0, -1241), 0), 100000000, 0, -1240), 0), 100000000, 0, -1239), 0), 100000000, 0, -1238), [(Tag9 (("exists")), 100000000, 0, -1236); (Tag9 (("subarity")), 100000000, 0, -1237)]), 100000000, 0, -1235), (("runtime/desc.ml", 416, 15989, 15997), ("runtime/desc.ml", 423, 16301, 16332), 0), 0, Tag1 ("Refl__Desc", 227)); (("destruct", 499), 0, (Tag1 (0, ((("value")), 100000000, 0, -1205), (Tag3 ((("exists_destruct", 1193)), [((("count")), 100000000, 0, -1210); ((("constraints")), 100000000, 0, -1228); ((("value")), 100000000, 0, -1205); ((("structure")), 100000000, 0, -1211); ((("arity")), 100000000, 0, -1216); ((("rec_group")), 100000000, 0, -1217); (Tag8 (([("Exists", (0))], ((("kinds")), 100000000, 0, -1219), 0, 0, 0)), 100000000, 0, -1218); ((("subpositive")), 100000000, 0, -1232); ((("subnegative")), 100000000, 0, -1233); ((("subdirect")), 100000000, 0, -1234); ((("gadt")), 100000000, 0, -1223)], (0)), 100000000, 0, -1246), 0), 100000000, 0, -1245), (("runtime/desc.ml", 424, 16333, 16341), ("runtime/desc.ml", 427, 16453, 16528), 0), 0, Tag1 ("Refl__Desc", 228))]), ((Tag3 ((("constructor", 1191)), [((("value")), 100000000, 0, -1205); (Tag8 (([("Exists", (((Tag2 ([((("index")), 100000000, 0, -1209); ((("count")), 100000000, 0, -1210); ((("structure")), 100000000, 0, -1211); ((("local")), 100000000, 0, -1212); ((("positives")), 100000000, 0, -1213); ((("negatives")), 100000000, 0, -1214); ((("directs")), 100000000, 0, -1215)]), 100000000, 0, -1208))))], (0, 100000000, 0, -1207), 1, 0, 0)), 100000000, 0, -1206); ((("arity")), 100000000, 0, -1216); ((("rec_group")), 100000000, 0, -1217); (Tag8 (([("Exists", (0))], ((("kinds")), 100000000, 0, -1219), 0, 0, 0)), 100000000, 0, -1218); ((("positive")), 100000000, 0, -1220); ((("negative")), 100000000, 0, -1221); ((("direct")), 100000000, 0, -1222); ((("gadt")), 100000000, 0, -1223)], (0)), 100000000, 0, -1204)), (("runtime/desc.ml", 408, 15640, 15642), ("runtime/desc.ml", 433, 16724, 16770), 0), 0, Tag1 ("Refl__Desc", 229))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Refl__Desc")), "constructor"), [((("types_and_eqs")), 100000000, 0, -1175); ((("structure")), 100000000, 0, -1176); ((("arity")), 100000000, 0, -1177); ((("rec_group")), 100000000, 0, -1178); ((("kinds")), 100000000, 0, -1179); ((("positive")), 100000000, 0, -1180); ((("negative")), 100000000, 0, -1181); ((("direct")), 100000000, 0, -1182); ((("gadt")), 100000000, 0, -1183)], (0)), 100000000, 0, -1174)), [63; 63; 63; 15; 63; 63; 63; 63; 15], [0; 0; 0; 0; 0; 0; 0; 0; 0], 0, 0, (("runtime/desc.ml", 393, 14945, 14945), ("runtime/desc.ml", 433, 16724, 16770), 0), 0, 0, 0, Tag1 ("Refl__Desc", 137)), 2, 0); Tag1 (("exists_construct", 1192), ([((("value")), 100000000, 0, -1152); ((("structure")), 100000000, 0, -1153); ((("arity")), 100000000, 0, -1154); ((("rec_group")), 100000000, 0, -1155); ((("kinds")), 100000000, 0, -1156); ((("positive")), 100000000, 0, -1157); ((("negative")), 100000000, 0, -1158); ((("direct")), 100000000, 0, -1159); ((("gadt")), 100000000, 0, -1160)], 9, Tag1 ([(("ExistsConstruct", 500), Tag1 ([(("kind", 501), 0, (Tag3 ((("constructor_kind", 1194)), [((("types")), 100000000, 0, -1172); ((("structure")), 100000000, 0, -1163); ((("arity")), 100000000, 0, -1164); ((("rec_group")), 100000000, 0, -1165); ((("kinds")), 100000000, 0, -1166); ((("positive")), 100000000, 0, -1167); ((("negative")), 100000000, 0, -1168); ((("direct")), 100000000, 0, -1169); ((("gadt")), 100000000, 0, -1170)], (0)), 100000000, 0, -1171), (("runtime/desc.ml", 438, 16912, 16920), ("runtime/desc.ml", 439, 16987, 17041), 0), 0, Tag1 ("Refl__Desc", 230)); (("construct", 502), 0, (Tag1 (0, ((("types")), 100000000, 0, -1172), ((("value")), 100000000, 0, -1162), 0), 100000000, 0, -1173), (("runtime/desc.ml", 440, 17042, 17050), ("runtime/desc.ml", 440, 17042, 17079), 0), 0, Tag1 ("Refl__Desc", 231))]), ((Tag3 ((("exists_construct", 1192)), [((("value")), 100000000, 0, -1162); ((("structure")), 100000000, 0, -1163); ((("arity")), 100000000, 0, -1164); ((("rec_group")), 100000000, 0, -1165); ((("kinds")), 100000000, 0, -1166); ((("positive")), 100000000, 0, -1167); ((("negative")), 100000000, 0, -1168); ((("direct")), 100000000, 0, -1169); ((("gadt")), 100000000, 0, -1170)], (0)), 100000000, 0, -1161)), (("runtime/desc.ml", 437, 16888, 16890), ("runtime/desc.ml", 443, 17159, 17212), 0), 0, Tag1 ("Refl__Desc", 232))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Refl__Desc")), "exists_construct"), [((("value")), 100000000, 0, -1152); ((("structure")), 100000000, 0, -1153); ((("arity")), 100000000, 0, -1154); ((("rec_group")), 100000000, 0, -1155); ((("kinds")), 100000000, 0, -1156); ((("positive")), 100000000, 0, -1157); ((("negative")), 100000000, 0, -1158); ((("direct")), 100000000, 0, -1159); ((("gadt")), 100000000, 0, -1160)], (0)), 100000000, 0, -1151)), [31; 63; 63; 15; 63; 63; 63; 63; 15], [0; 0; 0; 0; 0; 0; 0; 0; 0], 0, 0, (("runtime/desc.ml", 435, 16772, 16772), ("runtime/desc.ml", 443, 17159, 17212), 0), 0, 0, 0, Tag1 ("Refl__Desc", 138)), 2, 0); Tag1 (("exists_destruct", 1193), ([((("count")), 100000000, 0, -1121); ((("constraints")), 100000000, 0, -1122); ((("value")), 100000000, 0, -1123); ((("structure")), 100000000, 0, -1124); ((("arity")), 100000000, 0, -1125); ((("rec_group")), 100000000, 0, -1126); ((("kinds")), 100000000, 0, -1127); ((("positive")), 100000000, 0, -1128); ((("negative")), 100000000, 0, -1129); ((("direct")), 100000000, 0, -1130); ((("gadt")), 100000000, 0, -1131)], 11, Tag1 ([(("ExistsDestruct", 503), Tag1 ([(("exists_count", 504), 0, (Tag3 ((("length", 1170)), [((("count")), 100000000, 0, -1133); ((("exists")), 100000000, 0, -1145)], (0)), 100000000, 0, -1144), (("runtime/desc.ml", 448, 17374, 17382), ("runtime/desc.ml", 448, 17374, 17422), 0), 0, Tag1 ("Refl__Desc", 233)); (("exists", 505), 0, (Tag3 ((("append", 1171)), [((("exists")), 100000000, 0, -1145); ((("arity")), 100000000, 0, -1137); ((("subarity")), 100000000, 0, -1147)], (0)), 100000000, 0, -1146), (("runtime/desc.ml", 449, 17423, 17431), ("runtime/desc.ml", 449, 17423, 17476), 0), 0, Tag1 ("Refl__Desc", 234)); (("constraints", 506), 0, (Tag3 ((("gadt_constraints", 1174)), [((("constraints")), 100000000, 0, -1134); ((("exists")), 100000000, 0, -1145)], (0)), 100000000, 0, -1148), (("runtime/desc.ml", 450, 17477, 17485), ("runtime/desc.ml", 450, 17477, 17540), 0), 0, Tag1 ("Refl__Desc", 235)); (("kind", 507), 0, (Tag3 ((("constructor_kind", 1194)), [((("types")), 100000000, 0, -1150); ((("structure")), 100000000, 0, -1136); ((("subarity")), 100000000, 0, -1147); ((("rec_group")), 100000000, 0, -1138); ((("kinds")), 100000000, 0, -1139); ((("positive")), 100000000, 0, -1140); ((("negative")), 100000000, 0, -1141); ((("direct")), 100000000, 0, -1142); ((("gadt")), 100000000, 0, -1143)], (0)), 100000000, 0, -1149), (("runtime/desc.ml", 451, 17541, 17549), ("runtime/desc.ml", 452, 17619, 17673), 0), 0, Tag1 ("Refl__Desc", 236)); (("values", 508), 0, ((("types")), 100000000, 0, -1150), (("runtime/desc.ml", 453, 17674, 17682), ("runtime/desc.ml", 453, 17674, 17698), 0), 0, Tag1 ("Refl__Desc", 237))]), ((Tag3 ((("exists_destruct", 1193)), [((("count")), 100000000, 0, -1133); ((("constraints")), 100000000, 0, -1134); ((("value")), 100000000, 0, -1135); ((("structure")), 100000000, 0, -1136); ((("arity")), 100000000, 0, -1137); ((("rec_group")), 100000000, 0, -1138); ((("kinds")), 100000000, 0, -1139); ((("positive")), 100000000, 0, -1140); ((("negative")), 100000000, 0, -1141); ((("direct")), 100000000, 0, -1142); ((("gadt")), 100000000, 0, -1143)], (0)), 100000000, 0, -1132)), (("runtime/desc.ml", 447, 17351, 17353), ("runtime/desc.ml", 456, 17789, 17852), 0), 0, Tag1 ("Refl__Desc", 238))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Refl__Desc")), "exists_destruct"), [((("count")), 100000000, 0, -1121); ((("constraints")), 100000000, 0, -1122); ((("value")), 100000000, 0, -1123); ((("structure")), 100000000, 0, -1124); ((("arity")), 100000000, 0, -1125); ((("rec_group")), 100000000, 0, -1126); ((("kinds")), 100000000, 0, -1127); ((("positive")), 100000000, 0, -1128); ((("negative")), 100000000, 0, -1129); ((("direct")), 100000000, 0, -1130); ((("gadt")), 100000000, 0, -1131)], (0)), 100000000, 0, -1120)), [63; 15; 15; 63; 15; 15; 63; 63; 63; 63; 15], [0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0], 0, 0, (("runtime/desc.ml", 445, 17214, 17214), ("runtime/desc.ml", 456, 17789, 17852), 0), 0, 0, 0, Tag1 ("Refl__Desc", 139)), 2, 0); Tag1 (("constructor_kind", 1194), ([((("types")), 100000000, 0, -1085); ((("structure")), 100000000, 0, -1086); ((("arity")), 100000000, 0, -1087); ((("rec_group")), 100000000, 0, -1088); ((("kinds")), 100000000, 0, -1089); ((("positive")), 100000000, 0, -1090); ((("negative")), 100000000, 0, -1091); ((("direct")), 100000000, 0, -1092); ((("gadt")), 100000000, 0, -1093)], 9, Tag1 ([(("CTuple", 509), ([(Tag3 ((("tuple_structure", 1195)), [((("types")), 100000000, 0, -1095); ((("structure")), 100000000, 0, -1098); ((("arity")), 100000000, 0, -1099); ((("rec_group")), 100000000, 0, -1100); ((("kinds")), 100000000, 0, -1101); ((("positive")), 100000000, 0, -1102); ((("negative")), 100000000, 0, -1103); ((("direct")), 100000000, 0, -1104); ((("gadt")), 100000000, 0, -1105)], (0)), 100000000, 0, -1106)]), ((Tag3 ((("constructor_kind", 1194)), [((("types")), 100000000, 0, -1095); (Tag8 (([("Tuple", ((((("structure")), 100000000, 0, -1098))))], (0, 100000000, 0, -1097), 1, 0, 0)), 100000000, 0, -1096); ((("arity")), 100000000, 0, -1099); ((("rec_group")), 100000000, 0, -1100); ((("kinds")), 100000000, 0, -1101); ((("positive")), 100000000, 0, -1102); ((("negative")), 100000000, 0, -1103); ((("direct")), 100000000, 0, -1104); ((("gadt")), 100000000, 0, -1105)], (0)), 100000000, 0, -1094)), (("runtime/desc.ml", 460, 17970, 17972), ("runtime/desc.ml", 466, 18224, 18248), 0), 0, Tag1 ("Refl__Desc", 239)); (("CRecord", 510), ([(Tag3 ((("record_structure", 1196)), [((("types")), 100000000, 0, -1108); ((("structure")), 100000000, 0, -1111); ((("arity")), 100000000, 0, -1112); ((("rec_group")), 100000000, 0, -1113); ((("kinds")), 100000000, 0, -1114); ((("positive")), 100000000, 0, -1115); ((("negative")), 100000000, 0, -1116); ((("direct")), 100000000, 0, -1117); ((("gadt")), 100000000, 0, -1118)], (0)), 100000000, 0, -1119)]), ((Tag3 ((("constructor_kind", 1194)), [((("types")), 100000000, 0, -1108); (Tag8 (([("Record", ((((("structure")), 100000000, 0, -1111))))], (0, 100000000, 0, -1110), 1, 0, 0)), 100000000, 0, -1109); ((("arity")), 100000000, 0, -1112); ((("rec_group")), 100000000, 0, -1113); ((("kinds")), 100000000, 0, -1114); ((("positive")), 100000000, 0, -1115); ((("negative")), 100000000, 0, -1116); ((("direct")), 100000000, 0, -1117); ((("gadt")), 100000000, 0, -1118)], (0)), 100000000, 0, -1107)), (("runtime/desc.ml", 467, 18249, 18251), ("runtime/desc.ml", 473, 18506, 18530), 0), 0, Tag1 ("Refl__Desc", 240))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Refl__Desc")), "constructor_kind"), [((("types")), 100000000, 0, -1085); ((("structure")), 100000000, 0, -1086); ((("arity")), 100000000, 0, -1087); ((("rec_group")), 100000000, 0, -1088); ((("kinds")), 100000000, 0, -1089); ((("positive")), 100000000, 0, -1090); ((("negative")), 100000000, 0, -1091); ((("direct")), 100000000, 0, -1092); ((("gadt")), 100000000, 0, -1093)], (0)), 100000000, 0, -1084)), [63; 63; 63; 15; 63; 63; 63; 63; 15], [0; 0; 0; 0; 0; 0; 0; 0; 0], 0, 0, (("runtime/desc.ml", 458, 17854, 17854), ("runtime/desc.ml", 473, 18506, 18530), 0), 0, 0, 0, Tag1 ("Refl__Desc", 140)), 2, 0); Tag1 (("tuple_structure", 1195), ([((("types")), 100000000, 0, -1049); ((("structures")), 100000000, 0, -1050); ((("arity")), 100000000, 0, -1051); ((("rec_group")), 100000000, 0, -1052); ((("kinds")), 100000000, 0, -1053); ((("positive")), 100000000, 0, -1054); ((("negative")), 100000000, 0, -1055); ((("direct")), 100000000, 0, -1056); ((("gadt")), 100000000, 0, -1057)], 9, Tag1 ([(("TNil", 511), (0), ((Tag3 ((("tuple_structure", 1195)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1059); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1060); ((("arity")), 100000000, 0, -1061); ((("rec_group")), 100000000, 0, -1062); ((("kinds")), 100000000, 0, -1063); ((("positive")), 100000000, 0, -1064); ((("negative")), 100000000, 0, -1065); ((("direct")), 100000000, 0, -1066); ((("gadt")), 100000000, 0, -1067)], (0)), 100000000, 0, -1058)), (("runtime/desc.ml", 478, 18654, 18656), ("runtime/desc.ml", 480, 18743, 18773), 0), 0, Tag1 ("Refl__Desc", 241)); (("TCons", 512), Tag1 ([(("head", 513), 0, (Tag3 ((("desc", 1189)), [((("a")), 100000000, 0, -1070); ((("structure")), 100000000, 0, -1073); ((("arity")), 100000000, 0, -1075); ((("rec_group")), 100000000, 0, -1076); ((("kinds")), 100000000, 0, -1077); ((("positive")), 100000000, 0, -1078); ((("negative")), 100000000, 0, -1079); ((("direct")), 100000000, 0, -1080); ((("gadt")), 100000000, 0, -1081)], (0)), 100000000, 0, -1082), (("runtime/desc.ml", 482, 18788, 18796), ("runtime/desc.ml", 484, 18880, 18912), 0), 0, Tag1 ("Refl__Desc", 242)); (("tail", 514), 0, (Tag3 ((("tuple_structure", 1195)), [((("types")), 100000000, 0, -1071); ((("structures")), 100000000, 0, -1074); ((("arity")), 100000000, 0, -1075); ((("rec_group")), 100000000, 0, -1076); ((("kinds")), 100000000, 0, -1077); ((("positive")), 100000000, 0, -1078); ((("negative")), 100000000, 0, -1079); ((("direct")), 100000000, 0, -1080); ((("gadt")), 100000000, 0, -1081)], (0)), 100000000, 0, -1083), (("runtime/desc.ml", 485, 18913, 18921), ("runtime/desc.ml", 487, 18999, 19054), 0), 0, Tag1 ("Refl__Desc", 243))]), ((Tag3 ((("tuple_structure", 1195)), [(Tag2 ([((("a")), 100000000, 0, -1070); ((("types")), 100000000, 0, -1071)]), 100000000, 0, -1069); (Tag2 ([((("structure")), 100000000, 0, -1073); ((("structures")), 100000000, 0, -1074)]), 100000000, 0, -1072); ((("arity")), 100000000, 0, -1075); ((("rec_group")), 100000000, 0, -1076); ((("kinds")), 100000000, 0, -1077); ((("positive")), 100000000, 0, -1078); ((("negative")), 100000000, 0, -1079); ((("direct")), 100000000, 0, -1080); ((("gadt")), 100000000, 0, -1081)], (0)), 100000000, 0, -1068)), (("runtime/desc.ml", 481, 18774, 18776), ("runtime/desc.ml", 490, 19134, 19205), 0), 0, Tag1 ("Refl__Desc", 244))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Refl__Desc")), "tuple_structure"), [((("types")), 100000000, 0, -1049); ((("structures")), 100000000, 0, -1050); ((("arity")), 100000000, 0, -1051); ((("rec_group")), 100000000, 0, -1052); ((("kinds")), 100000000, 0, -1053); ((("positive")), 100000000, 0, -1054); ((("negative")), 100000000, 0, -1055); ((("direct")), 100000000, 0, -1056); ((("gadt")), 100000000, 0, -1057)], (0)), 100000000, 0, -1048)), [63; 63; 63; 15; 63; 63; 63; 63; 15], [0; 0; 0; 0; 0; 0; 0; 0; 0], 0, 0, (("runtime/desc.ml", 475, 18532, 18532), ("runtime/desc.ml", 490, 19134, 19205), 0), 0, 0, 0, Tag1 ("Refl__Desc", 141)), 2, 0); Tag1 (("record_structure", 1196), ([((("types")), 100000000, 0, -1013); ((("structures")), 100000000, 0, -1014); ((("arity")), 100000000, 0, -1015); ((("rec_group")), 100000000, 0, -1016); ((("kinds")), 100000000, 0, -1017); ((("positive")), 100000000, 0, -1018); ((("negative")), 100000000, 0, -1019); ((("direct")), 100000000, 0, -1020); ((("gadt")), 100000000, 0, -1021)], 9, Tag1 ([(("RNil", 515), (0), ((Tag3 ((("record_structure", 1196)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1023); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1024); ((("arity")), 100000000, 0, -1025); ((("rec_group")), 100000000, 0, -1026); ((("kinds")), 100000000, 0, -1027); ((("positive")), 100000000, 0, -1028); ((("negative")), 100000000, 0, -1029); ((("direct")), 100000000, 0, -1030); ((("gadt")), 100000000, 0, -1031)], (0)), 100000000, 0, -1022)), (("runtime/desc.ml", 495, 19330, 19332), ("runtime/desc.ml", 497, 19419, 19450), 0), 0, Tag1 ("Refl__Desc", 245)); (("RCons", 516), Tag1 ([(("head", 517), 0, (Tag3 ((("record_field", 1197)), [((("a")), 100000000, 0, -1034); ((("structure")), 100000000, 0, -1037); ((("arity")), 100000000, 0, -1039); ((("rec_group")), 100000000, 0, -1040); ((("kinds")), 100000000, 0, -1041); ((("positive")), 100000000, 0, -1042); ((("negative")), 100000000, 0, -1043); ((("direct")), 100000000, 0, -1044); ((("gadt")), 100000000, 0, -1045)], (0)), 100000000, 0, -1046), (("runtime/desc.ml", 499, 19465, 19473), ("runtime/desc.ml", 501, 19557, 19598), 0), 0, Tag1 ("Refl__Desc", 246)); (("tail", 518), 0, (Tag3 ((("record_structure", 1196)), [((("types")), 100000000, 0, -1035); ((("structures")), 100000000, 0, -1038); ((("arity")), 100000000, 0, -1039); ((("rec_group")), 100000000, 0, -1040); ((("kinds")), 100000000, 0, -1041); ((("positive")), 100000000, 0, -1042); ((("negative")), 100000000, 0, -1043); ((("direct")), 100000000, 0, -1044); ((("gadt")), 100000000, 0, -1045)], (0)), 100000000, 0, -1047), (("runtime/desc.ml", 502, 19599, 19607), ("runtime/desc.ml", 504, 19685, 19741), 0), 0, Tag1 ("Refl__Desc", 247))]), ((Tag3 ((("record_structure", 1196)), [(Tag2 ([((("a")), 100000000, 0, -1034); ((("types")), 100000000, 0, -1035)]), 100000000, 0, -1033); (Tag2 ([((("structure")), 100000000, 0, -1037); ((("structures")), 100000000, 0, -1038)]), 100000000, 0, -1036); ((("arity")), 100000000, 0, -1039); ((("rec_group")), 100000000, 0, -1040); ((("kinds")), 100000000, 0, -1041); ((("positive")), 100000000, 0, -1042); ((("negative")), 100000000, 0, -1043); ((("direct")), 100000000, 0, -1044); ((("gadt")), 100000000, 0, -1045)], (0)), 100000000, 0, -1032)), (("runtime/desc.ml", 498, 19451, 19453), ("runtime/desc.ml", 507, 19821, 19893), 0), 0, Tag1 ("Refl__Desc", 248))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Refl__Desc")), "record_structure"), [((("types")), 100000000, 0, -1013); ((("structures")), 100000000, 0, -1014); ((("arity")), 100000000, 0, -1015); ((("rec_group")), 100000000, 0, -1016); ((("kinds")), 100000000, 0, -1017); ((("positive")), 100000000, 0, -1018); ((("negative")), 100000000, 0, -1019); ((("direct")), 100000000, 0, -1020); ((("gadt")), 100000000, 0, -1021)], (0)), 100000000, 0, -1012)), [63; 63; 63; 15; 63; 63; 63; 63; 15], [0; 0; 0; 0; 0; 0; 0; 0; 0], 0, 0, (("runtime/desc.ml", 492, 19207, 19207), ("runtime/desc.ml", 507, 19821, 19893), 0), 0, 0, 0, Tag1 ("Refl__Desc", 142)), 2, 0); Tag1 (("record_field", 1197), ([((("a")), 100000000, 0, -960); ((("structure")), 100000000, 0, -961); ((("arity")), 100000000, 0, -962); ((("rec_group")), 100000000, 0, -963); ((("kinds")), 100000000, 0, -964); ((("positive")), 100000000, 0, -965); ((("negative")), 100000000, 0, -966); ((("direct")), 100000000, 0, -967); ((("gadt")), 100000000, 0, -968)], 9, Tag1 ([(("Mono", 519), Tag1 ([(("label", 520), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -981), (("runtime/desc.ml", 512, 20016, 20024), ("runtime/desc.ml", 512, 20016, 20039), 0), 0, Tag1 ("Refl__Desc", 249)); (("desc", 521), 0, (Tag3 ((("desc", 1189)), [((("a")), 100000000, 0, -970); ((("structure")), 100000000, 0, -973); ((("arity")), 100000000, 0, -974); ((("rec_group")), 100000000, 0, -975); ((("kinds")), 100000000, 0, -976); ((("positive")), 100000000, 0, -977); ((("negative")), 100000000, 0, -978); ((("direct")), 100000000, 0, -979); ((("gadt")), 100000000, 0, -980)], (0)), 100000000, 0, -982), (("runtime/desc.ml", 513, 20040, 20048), ("runtime/desc.ml", 515, 20132, 20164), 0), 0, Tag1 ("Refl__Desc", 250)); (("attributes", 522), 0, (Tag3 ((("attributes", 1208)), [((("a")), 100000000, 0, -970); ((("arity")), 100000000, 0, -974); ((("rec_group")), 100000000, 0, -975); ((("kinds")), 100000000, 0, -976); ((("positive")), 100000000, 0, -977); ((("negative")), 100000000, 0, -978); ((("direct")), 100000000, 0, -979); ((("gadt")), 100000000, 0, -980)], (0)), 100000000, 0, -983), (("runtime/desc.ml", 516, 20165, 20173), ("runtime/desc.ml", 518, 20251, 20290), 0), 0, Tag1 ("Refl__Desc", 251))]), ((Tag3 ((("record_field", 1197)), [((("a")), 100000000, 0, -970); (Tag8 (([("Mono", ((((("structure")), 100000000, 0, -973))))], (0, 100000000, 0, -972), 1, 0, 0)), 100000000, 0, -971); ((("arity")), 100000000, 0, -974); ((("rec_group")), 100000000, 0, -975); ((("kinds")), 100000000, 0, -976); ((("positive")), 100000000, 0, -977); ((("negative")), 100000000, 0, -978); ((("direct")), 100000000, 0, -979); ((("gadt")), 100000000, 0, -980)], (0)), 100000000, 0, -969)), (("runtime/desc.ml", 511, 20003, 20005), ("runtime/desc.ml", 521, 20377, 20426), 0), 0, Tag1 ("Refl__Desc", 252)); (("Poly", 523), Tag1 ([(("label", 524), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1002), (("runtime/desc.ml", 523, 20440, 20448), ("runtime/desc.ml", 523, 20440, 20463), 0), 0, Tag1 ("Refl__Desc", 253)); (("variables", 525), 0, (Tag3 ((("subvariables", 1178)), [((("count")), 100000000, 0, -990); (Tag8 (([("Absent", (0))], (0, 100000000, 0, -1005), 1, 0, 0)), 100000000, 0, -1004); ((("positive")), 100000000, 0, -998); ((("negative")), 100000000, 0, -999); ((("direct")), 100000000, 0, -1000); ((("positives")), 100000000, 0, -991); ((("negatives")), 100000000, 0, -992); ((("directs")), 100000000, 0, -993); ((("subpositive")), 100000000, 0, -1006); ((("subnegative")), 100000000, 0, -1007); ((("subdirect")), 100000000, 0, -1008)], (0)), 100000000, 0, -1003), (("runtime/desc.ml", 524, 20464, 20472), ("runtime/desc.ml", 527, 20619, 20656), 0), 0, Tag1 ("Refl__Desc", 254)); (("destruct", 526), 0, (Tag3 ((("forall_destruct", 1199)), [((("a")), 100000000, 0, -985); ((("structure")), 100000000, 0, -989); ((("arity")), 100000000, 0, -994); ((("rec_group")), 100000000, 0, -995); (Tag8 (([("Poly", (0))], ((("kinds")), 100000000, 0, -997), 0, 0, 0)), 100000000, 0, -996); ((("subpositive")), 100000000, 0, -1006); ((("subnegative")), 100000000, 0, -1007); ((("subdirect")), 100000000, 0, -1008); ((("gadt")), 100000000, 0, -1001); ((("count")), 100000000, 0, -990)], (0)), 100000000, 0, -1009), (("runtime/desc.ml", 528, 20657, 20665), ("runtime/desc.ml", 530, 20745, 20814), 0), 0, Tag1 ("Refl__Desc", 255)); (("construct", 527), 0, (Tag1 (0, (Tag3 ((("forall_construct", 1198)), [((("a")), 100000000, 0, -985); ((("structure")), 100000000, 0, -989); ((("arity")), 100000000, 0, -994); ((("rec_group")), 100000000, 0, -995); (Tag8 (([("Poly", (0))], ((("kinds")), 100000000, 0, -997), 0, 0, 0)), 100000000, 0, -996); ((("subpositive")), 100000000, 0, -1006); ((("subnegative")), 100000000, 0, -1007); ((("subdirect")), 100000000, 0, -1008); ((("gadt")), 100000000, 0, -1001); ((("count")), 100000000, 0, -990)], (0)), 100000000, 0, -1011), ((("a")), 100000000, 0, -985), 0), 100000000, 0, -1010), (("runtime/desc.ml", 531, 20815, 20823), ("runtime/desc.ml", 534, 20977, 20989), 0), 0, Tag1 ("Refl__Desc", 256))]), ((Tag3 ((("record_field", 1197)), [((("a")), 100000000, 0, -985); (Tag8 (([("Poly", (((Tag2 ([((("structure")), 100000000, 0, -989); ((("count")), 100000000, 0, -990); ((("positives")), 100000000, 0, -991); ((("negatives")), 100000000, 0, -992); ((("directs")), 100000000, 0, -993)]), 100000000, 0, -988))))], (0, 100000000, 0, -987), 1, 0, 0)), 100000000, 0, -986); ((("arity")), 100000000, 0, -994); ((("rec_group")), 100000000, 0, -995); (Tag8 (([("Poly", (0))], ((("kinds")), 100000000, 0, -997), 0, 0, 0)), 100000000, 0, -996); ((("positive")), 100000000, 0, -998); ((("negative")), 100000000, 0, -999); ((("direct")), 100000000, 0, -1000); ((("gadt")), 100000000, 0, -1001)], (0)), 100000000, 0, -984)), (("runtime/desc.ml", 522, 20427, 20429), ("runtime/desc.ml", 539, 21166, 21204), 0), 0, Tag1 ("Refl__Desc", 257))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Refl__Desc")), "record_field"), [((("a")), 100000000, 0, -960); ((("structure")), 100000000, 0, -961); ((("arity")), 100000000, 0, -962); ((("rec_group")), 100000000, 0, -963); ((("kinds")), 100000000, 0, -964); ((("positive")), 100000000, 0, -965); ((("negative")), 100000000, 0, -966); ((("direct")), 100000000, 0, -967); ((("gadt")), 100000000, 0, -968)], (0)), 100000000, 0, -959)), [63; 63; 63; 15; 63; 63; 63; 63; 15], [0; 0; 0; 0; 0; 0; 0; 0; 0], 0, 0, (("runtime/desc.ml", 509, 19895, 19895), ("runtime/desc.ml", 539, 21166, 21204), 0), 0, 0, 0, Tag1 ("Refl__Desc", 143)), 2, 0); Tag1 (("forall_construct", 1198), ([((("a")), 100000000, 0, -939); ((("structure")), 100000000, 0, -940); ((("arity")), 100000000, 0, -941); ((("rec_group")), 100000000, 0, -942); ((("kinds")), 100000000, 0, -943); ((("positive")), 100000000, 0, -944); ((("negative")), 100000000, 0, -945); ((("direct")), 100000000, 0, -946); ((("gadt")), 100000000, 0, -947); ((("count")), 100000000, 0, -948)], 10, [[(("forall_construct", 528), 0, (Tag10 ((Tag1 (0, (Tag3 ((("length", 1170)), [((("count")), 100000000, 0, -948); (Tag9 (("forall")), 100000000, 0, -950)], (0)), 100000000, 0, -958), (Tag1 (0, (Tag3 ((("append", 1171)), [(Tag9 (("forall")), 100000000, 0, -950); ((("arity")), 100000000, 0, -941); (Tag9 (("subarity")), 100000000, 0, -952)], (0)), 100000000, 0, -957), (Tag1 (0, (Tag3 ((("desc", 1189)), [(Tag9 (("b")), 100000000, 0, -951); ((("structure")), 100000000, 0, -940); (Tag9 (("subarity")), 100000000, 0, -952); ((("rec_group")), 100000000, 0, -942); ((("kinds")), 100000000, 0, -943); ((("positive")), 100000000, 0, -944); ((("negative")), 100000000, 0, -945); ((("direct")), 100000000, 0, -946); ((("gadt")), 100000000, 0, -947)], (0)), 100000000, 0, -956), (Tag9 (("b")), 100000000, 0, -951), 0), 100000000, 0, -955), 0), 100000000, 0, -954), 0), 100000000, 0, -953), [(Tag9 (("forall")), 100000000, 0, -950); (Tag9 (("b")), 100000000, 0, -951); (Tag9 (("subarity")), 100000000, 0, -952)]), 100000000, 0, -949), (("runtime/desc.ml", 543, 21328, 21336), ("runtime/desc.ml", 549, 21591, 21604), 0), 0, Tag1 ("Refl__Desc", 258))]], 1, ((Tag3 (Tag1 ((Tag2 ("Refl__Desc")), "forall_construct"), [((("a")), 100000000, 0, -939); ((("structure")), 100000000, 0, -940); ((("arity")), 100000000, 0, -941); ((("rec_group")), 100000000, 0, -942); ((("kinds")), 100000000, 0, -943); ((("positive")), 100000000, 0, -944); ((("negative")), 100000000, 0, -945); ((("direct")), 100000000, 0, -946); ((("gadt")), 100000000, 0, -947); ((("count")), 100000000, 0, -948)], (0)), 100000000, 0, -938)), [8; 63; 15; 15; 63; 63; 63; 63; 15; 63], [0; 0; 0; 0; 0; 0; 0; 0; 0; 0], 0, 0, (("runtime/desc.ml", 541, 21206, 21206), ("runtime/desc.ml", 550, 21605, 21612), 0), 0, 0, 1, Tag1 ("Refl__Desc", 144)), 2, 0); Tag1 (("forall_destruct", 1199), ([((("a")), 100000000, 0, -920); ((("structure")), 100000000, 0, -921); ((("arity")), 100000000, 0, -922); ((("rec_group")), 100000000, 0, -923); ((("kinds")), 100000000, 0, -924); ((("subpositive")), 100000000, 0, -925); ((("subnegative")), 100000000, 0, -926); ((("subdirect")), 100000000, 0, -927); ((("gadt")), 100000000, 0, -928); ((("count")), 100000000, 0, -929)], 10, [[(("forall_destruct", 529), 0, (Tag10 ((Tag1 (0, (Tag3 ((("length", 1170)), [((("count")), 100000000, 0, -929); (Tag9 (("forall")), 100000000, 0, -931)], (0)), 100000000, 0, -937), (Tag1 (0, (Tag3 ((("append", 1171)), [(Tag9 (("forall")), 100000000, 0, -931); ((("arity")), 100000000, 0, -922); (Tag9 (("subarity")), 100000000, 0, -932)], (0)), 100000000, 0, -936), (Tag3 ((("forall_destruct_result", 1200)), [((("a")), 100000000, 0, -920); ((("structure")), 100000000, 0, -921); (Tag9 (("subarity")), 100000000, 0, -932); ((("rec_group")), 100000000, 0, -923); ((("kinds")), 100000000, 0, -924); ((("subpositive")), 100000000, 0, -925); ((("subnegative")), 100000000, 0, -926); ((("subdirect")), 100000000, 0, -927); ((("gadt")), 100000000, 0, -928)], (0)), 100000000, 0, -935), 0), 100000000, 0, -934), 0), 100000000, 0, -933), [(Tag9 (("forall")), 100000000, 0, -931); (Tag9 (("subarity")), 100000000, 0, -932)]), 100000000, 0, -930), (("runtime/desc.ml", 554, 21744, 21752), ("runtime/desc.ml", 559, 21959, 22027), 0), 0, Tag1 ("Refl__Desc", 259))]], 1, ((Tag3 (Tag1 ((Tag2 ("Refl__Desc")), "forall_destruct"), [((("a")), 100000000, 0, -920); ((("structure")), 100000000, 0, -921); ((("arity")), 100000000, 0, -922); ((("rec_group")), 100000000, 0, -923); ((("kinds")), 100000000, 0, -924); ((("subpositive")), 100000000, 0, -925); ((("subnegative")), 100000000, 0, -926); ((("subdirect")), 100000000, 0, -927); ((("gadt")), 100000000, 0, -928); ((("count")), 100000000, 0, -929)], (0)), 100000000, 0, -919)), [47; 63; 15; 15; 63; 63; 63; 63; 15; 63], [0; 0; 0; 0; 0; 0; 0; 0; 0; 0], 0, 0, (("runtime/desc.ml", 552, 21614, 21614), ("runtime/desc.ml", 560, 22028, 22035), 0), 0, 0, 1, Tag1 ("Refl__Desc", 145)), 2, 0); Tag1 (("forall_destruct_result", 1200), ([((("a")), 100000000, 0, -897); ((("structure")), 100000000, 0, -898); ((("arity")), 100000000, 0, -899); ((("rec_group")), 100000000, 0, -900); ((("kinds")), 100000000, 0, -901); ((("positive")), 100000000, 0, -902); ((("negative")), 100000000, 0, -903); ((("direct")), 100000000, 0, -904); ((("gadt")), 100000000, 0, -905)], 9, Tag1 ([(("ForallDestruct", 530), Tag1 ([(("desc", 531), 0, (Tag3 ((("desc", 1189)), [((("b")), 100000000, 0, -917); ((("structure")), 100000000, 0, -908); ((("arity")), 100000000, 0, -909); ((("rec_group")), 100000000, 0, -910); ((("kinds")), 100000000, 0, -911); ((("positive")), 100000000, 0, -912); ((("negative")), 100000000, 0, -913); ((("direct")), 100000000, 0, -914); ((("gadt")), 100000000, 0, -915)], (0)), 100000000, 0, -916), (("runtime/desc.ml", 565, 22178, 22186), ("runtime/desc.ml", 566, 22249, 22291), 0), 0, Tag1 ("Refl__Desc", 260)); (("destruct", 532), 0, (Tag1 (0, ((("a")), 100000000, 0, -907), ((("b")), 100000000, 0, -917), 0), 100000000, 0, -918), (("runtime/desc.ml", 567, 22292, 22300), ("runtime/desc.ml", 567, 22292, 22320), 0), 0, Tag1 ("Refl__Desc", 261))]), ((Tag3 ((("forall_destruct_result", 1200)), [((("a")), 100000000, 0, -907); ((("structure")), 100000000, 0, -908); ((("arity")), 100000000, 0, -909); ((("rec_group")), 100000000, 0, -910); ((("kinds")), 100000000, 0, -911); ((("positive")), 100000000, 0, -912); ((("negative")), 100000000, 0, -913); ((("direct")), 100000000, 0, -914); ((("gadt")), 100000000, 0, -915)], (0)), 100000000, 0, -906)), (("runtime/desc.ml", 564, 22155, 22157), ("runtime/desc.ml", 570, 22407, 22455), 0), 0, Tag1 ("Refl__Desc", 262))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Refl__Desc")), "forall_destruct_result"), [((("a")), 100000000, 0, -897); ((("structure")), 100000000, 0, -898); ((("arity")), 100000000, 0, -899); ((("rec_group")), 100000000, 0, -900); ((("kinds")), 100000000, 0, -901); ((("positive")), 100000000, 0, -902); ((("negative")), 100000000, 0, -903); ((("direct")), 100000000, 0, -904); ((("gadt")), 100000000, 0, -905)], (0)), 100000000, 0, -896)), [47; 63; 63; 15; 63; 63; 63; 63; 15], [0; 0; 0; 0; 0; 0; 0; 0; 0], 0, 0, (("runtime/desc.ml", 562, 22037, 22037), ("runtime/desc.ml", 570, 22407, 22455), 0), 0, 0, 0, Tag1 ("Refl__Desc", 146)), 2, 0); Tag1 (("variant_constructors", 1201), ([((("cases")), 100000000, 0, -861); ((("structures")), 100000000, 0, -862); ((("arity")), 100000000, 0, -863); ((("rec_group")), 100000000, 0, -864); ((("kinds")), 100000000, 0, -865); ((("positive")), 100000000, 0, -866); ((("negative")), 100000000, 0, -867); ((("direct")), 100000000, 0, -868); ((("gadt")), 100000000, 0, -869)], 9, Tag1 ([(("VCNil", 533), (0), ((Tag3 ((("variant_constructors", 1201)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -871); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -872); ((("arity")), 100000000, 0, -873); ((("rec_group")), 100000000, 0, -874); ((("kinds")), 100000000, 0, -875); ((("positive")), 100000000, 0, -876); ((("negative")), 100000000, 0, -877); ((("direct")), 100000000, 0, -878); ((("gadt")), 100000000, 0, -879)], (0)), 100000000, 0, -870)), (("runtime/desc.ml", 574, 22578, 22580), ("runtime/desc.ml", 576, 22668, 22703), 0), 0, Tag1 ("Refl__Desc", 263)); (("VCCons", 534), Tag1 ([(("head", 535), 0, (Tag3 ((("variant_constructor", 1202)), [((("types")), 100000000, 0, -882); ((("structure")), 100000000, 0, -885); ((("arity")), 100000000, 0, -887); ((("rec_group")), 100000000, 0, -888); ((("kinds")), 100000000, 0, -889); ((("positive")), 100000000, 0, -890); ((("negative")), 100000000, 0, -891); ((("direct")), 100000000, 0, -892); ((("gadt")), 100000000, 0, -893)], (0)), 100000000, 0, -894), (("runtime/desc.ml", 578, 22719, 22727), ("runtime/desc.ml", 580, 22804, 22863), 0), 0, Tag1 ("Refl__Desc", 264)); (("tail", 536), 0, (Tag3 ((("variant_constructors", 1201)), [((("cases")), 100000000, 0, -883); ((("structures")), 100000000, 0, -886); ((("arity")), 100000000, 0, -887); ((("rec_group")), 100000000, 0, -888); ((("kinds")), 100000000, 0, -889); ((("positive")), 100000000, 0, -890); ((("negative")), 100000000, 0, -891); ((("direct")), 100000000, 0, -892); ((("gadt")), 100000000, 0, -893)], (0)), 100000000, 0, -895), (("runtime/desc.ml", 581, 22864, 22872), ("runtime/desc.ml", 583, 22950, 23010), 0), 0, Tag1 ("Refl__Desc", 265))]), ((Tag3 ((("variant_constructors", 1201)), [(Tag2 ([((("types")), 100000000, 0, -882); ((("cases")), 100000000, 0, -883)]), 100000000, 0, -881); (Tag2 ([((("structure")), 100000000, 0, -885); ((("structures")), 100000000, 0, -886)]), 100000000, 0, -884); ((("arity")), 100000000, 0, -887); ((("rec_group")), 100000000, 0, -888); ((("kinds")), 100000000, 0, -889); ((("positive")), 100000000, 0, -890); ((("negative")), 100000000, 0, -891); ((("direct")), 100000000, 0, -892); ((("gadt")), 100000000, 0, -893)], (0)), 100000000, 0, -880)), (("runtime/desc.ml", 577, 22704, 22706), ("runtime/desc.ml", 586, 23094, 23170), 0), 0, Tag1 ("Refl__Desc", 266))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Refl__Desc")), "variant_constructors"), [((("cases")), 100000000, 0, -861); ((("structures")), 100000000, 0, -862); ((("arity")), 100000000, 0, -863); ((("rec_group")), 100000000, 0, -864); ((("kinds")), 100000000, 0, -865); ((("positive")), 100000000, 0, -866); ((("negative")), 100000000, 0, -867); ((("direct")), 100000000, 0, -868); ((("gadt")), 100000000, 0, -869)], (0)), 100000000, 0, -860)), [63; 63; 63; 15; 63; 63; 63; 63; 15], [0; 0; 0; 0; 0; 0; 0; 0; 0], 0, 0, (("runtime/desc.ml", 572, 22457, 22457), ("runtime/desc.ml", 586, 23094, 23170), 0), 0, 0, 0, Tag1 ("Refl__Desc", 147)), 2, 0); Tag1 (("variant_constructor", 1202), ([((("types")), 100000000, 0, -824); ((("structure")), 100000000, 0, -825); ((("arity")), 100000000, 0, -826); ((("rec_group")), 100000000, 0, -827); ((("kinds")), 100000000, 0, -828); ((("positive")), 100000000, 0, -829); ((("negative")), 100000000, 0, -830); ((("direct")), 100000000, 0, -831); ((("gadt")), 100000000, 0, -832)], 9, Tag1 ([(("VConstructor", 537), Tag1 ([(("name", 538), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -845), (("runtime/desc.ml", 591, 23312, 23320), ("runtime/desc.ml", 591, 23312, 23334), 0), 0, Tag1 ("Refl__Desc", 267)); (("argument", 539), 0, (Tag3 ((("variant_argument", 1203)), [((("types")), 100000000, 0, -834); ((("structures")), 100000000, 0, -837); ((("arity")), 100000000, 0, -838); ((("rec_group")), 100000000, 0, -839); ((("kinds")), 100000000, 0, -840); ((("positive")), 100000000, 0, -841); ((("negative")), 100000000, 0, -842); ((("direct")), 100000000, 0, -843); ((("gadt")), 100000000, 0, -844)], (0)), 100000000, 0, -846), (("runtime/desc.ml", 592, 23335, 23343), ("runtime/desc.ml", 594, 23425, 23481), 0), 0, Tag1 ("Refl__Desc", 268))]), ((Tag3 ((("variant_constructor", 1202)), [((("types")), 100000000, 0, -834); (Tag8 (([("Constr", ((((("structures")), 100000000, 0, -837))))], (0, 100000000, 0, -836), 1, 0, 0)), 100000000, 0, -835); ((("arity")), 100000000, 0, -838); ((("rec_group")), 100000000, 0, -839); ((("kinds")), 100000000, 0, -840); ((("positive")), 100000000, 0, -841); ((("negative")), 100000000, 0, -842); ((("direct")), 100000000, 0, -843); ((("gadt")), 100000000, 0, -844)], (0)), 100000000, 0, -833)), (("runtime/desc.ml", 590, 23291, 23293), ("runtime/desc.ml", 597, 23564, 23631), 0), 0, Tag1 ("Refl__Desc", 269)); (("VInherit", 540), ([(Tag3 ((("desc", 1189)), [((("a")), 100000000, 0, -848); ((("structure")), 100000000, 0, -851); ((("arity")), 100000000, 0, -852); ((("rec_group")), 100000000, 0, -853); ((("kinds")), 100000000, 0, -854); ((("positive")), 100000000, 0, -855); ((("negative")), 100000000, 0, -856); ((("direct")), 100000000, 0, -857); ((("gadt")), 100000000, 0, -858)], (0)), 100000000, 0, -859)]), ((Tag3 ((("variant_constructor", 1202)), [((("a")), 100000000, 0, -848); (Tag8 (([("Inherit", ((((("structure")), 100000000, 0, -851))))], (0, 100000000, 0, -850), 1, 0, 0)), 100000000, 0, -849); ((("arity")), 100000000, 0, -852); ((("rec_group")), 100000000, 0, -853); ((("kinds")), 100000000, 0, -854); ((("positive")), 100000000, 0, -855); ((("negative")), 100000000, 0, -856); ((("direct")), 100000000, 0, -857); ((("gadt")), 100000000, 0, -858)], (0)), 100000000, 0, -847)), (("runtime/desc.ml", 598, 23632, 23634), ("runtime/desc.ml", 602, 23819, 23886), 0), 0, Tag1 ("Refl__Desc", 270))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Refl__Desc")), "variant_constructor"), [((("types")), 100000000, 0, -824); ((("structure")), 100000000, 0, -825); ((("arity")), 100000000, 0, -826); ((("rec_group")), 100000000, 0, -827); ((("kinds")), 100000000, 0, -828); ((("positive")), 100000000, 0, -829); ((("negative")), 100000000, 0, -830); ((("direct")), 100000000, 0, -831); ((("gadt")), 100000000, 0, -832)], (0)), 100000000, 0, -823)), [63; 63; 63; 15; 63; 63; 63; 63; 15], [0; 0; 0; 0; 0; 0; 0; 0; 0], 0, 0, (("runtime/desc.ml", 588, 23172, 23172), ("runtime/desc.ml", 602, 23819, 23886), 0), 0, 0, 0, Tag1 ("Refl__Desc", 148)), 2, 0); Tag1 (("variant_argument", 1203), ([((("types")), 100000000, 0, -789); ((("structures")), 100000000, 0, -790); ((("arity")), 100000000, 0, -791); ((("rec_group")), 100000000, 0, -792); ((("kinds")), 100000000, 0, -793); ((("positive")), 100000000, 0, -794); ((("negative")), 100000000, 0, -795); ((("direct")), 100000000, 0, -796); ((("gadt")), 100000000, 0, -797)], 9, Tag1 ([(("VNone", 541), (0), ((Tag3 ((("variant_argument", 1203)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -799); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -800); ((("arity")), 100000000, 0, -801); ((("rec_group")), 100000000, 0, -802); ((("kinds")), 100000000, 0, -803); ((("positive")), 100000000, 0, -804); ((("negative")), 100000000, 0, -805); ((("direct")), 100000000, 0, -806); ((("gadt")), 100000000, 0, -807)], (0)), 100000000, 0, -798)), (("runtime/desc.ml", 606, 24005, 24007), ("runtime/desc.ml", 608, 24095, 24126), 0), 0, Tag1 ("Refl__Desc", 271)); (("VSome", 542), ([(Tag3 ((("desc", 1189)), [((("a")), 100000000, 0, -810); ((("structure")), 100000000, 0, -813); ((("arity")), 100000000, 0, -815); ((("rec_group")), 100000000, 0, -816); ((("kinds")), 100000000, 0, -817); ((("positive")), 100000000, 0, -818); ((("negative")), 100000000, 0, -819); ((("direct")), 100000000, 0, -820); ((("gadt")), 100000000, 0, -821)], (0)), 100000000, 0, -822)]), ((Tag3 ((("variant_argument", 1203)), [(Tag2 ([((("a")), 100000000, 0, -810); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -811)]), 100000000, 0, -809); (Tag2 ([((("structure")), 100000000, 0, -813); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -814)]), 100000000, 0, -812); ((("arity")), 100000000, 0, -815); ((("rec_group")), 100000000, 0, -816); ((("kinds")), 100000000, 0, -817); ((("positive")), 100000000, 0, -818); ((("negative")), 100000000, 0, -819); ((("direct")), 100000000, 0, -820); ((("gadt")), 100000000, 0, -821)], (0)), 100000000, 0, -808)), (("runtime/desc.ml", 609, 24127, 24129), ("runtime/desc.ml", 613, 24322, 24375), 0), 0, Tag1 ("Refl__Desc", 272))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Refl__Desc")), "variant_argument"), [((("types")), 100000000, 0, -789); ((("structures")), 100000000, 0, -790); ((("arity")), 100000000, 0, -791); ((("rec_group")), 100000000, 0, -792); ((("kinds")), 100000000, 0, -793); ((("positive")), 100000000, 0, -794); ((("negative")), 100000000, 0, -795); ((("direct")), 100000000, 0, -796); ((("gadt")), 100000000, 0, -797)], (0)), 100000000, 0, -788)), [63; 63; 63; 15; 63; 63; 63; 63; 15], [0; 0; 0; 0; 0; 0; 0; 0; 0], 0, 0, (("runtime/desc.ml", 604, 23888, 23888), ("runtime/desc.ml", 613, 24322, 24375), 0), 0, 0, 0, Tag1 ("Refl__Desc", 149)), 2, 0); Tag1 (("object_methods", 1204), ([((("methods")), 100000000, 0, -753); ((("structures")), 100000000, 0, -754); ((("arity")), 100000000, 0, -755); ((("rec_group")), 100000000, 0, -756); ((("kinds")), 100000000, 0, -757); ((("positive")), 100000000, 0, -758); ((("negative")), 100000000, 0, -759); ((("direct")), 100000000, 0, -760); ((("gadt")), 100000000, 0, -761)], 9, Tag1 ([(("ONil", 543), (0), ((Tag3 ((("object_methods", 1204)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -763); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -764); ((("arity")), 100000000, 0, -765); ((("rec_group")), 100000000, 0, -766); ((("kinds")), 100000000, 0, -767); ((("positive")), 100000000, 0, -768); ((("negative")), 100000000, 0, -769); ((("direct")), 100000000, 0, -770); ((("gadt")), 100000000, 0, -771)], (0)), 100000000, 0, -762)), (("runtime/desc.ml", 617, 24494, 24496), ("runtime/desc.ml", 619, 24583, 24612), 0), 0, Tag1 ("Refl__Desc", 273)); (("OCons", 544), Tag1 ([(("head", 545), 0, (Tag3 ((("object_method", 1205)), [((("a")), 100000000, 0, -774); ((("structure")), 100000000, 0, -777); ((("arity")), 100000000, 0, -779); ((("rec_group")), 100000000, 0, -780); ((("kinds")), 100000000, 0, -781); ((("positive")), 100000000, 0, -782); ((("negative")), 100000000, 0, -783); ((("direct")), 100000000, 0, -784); ((("gadt")), 100000000, 0, -785)], (0)), 100000000, 0, -786), (("runtime/desc.ml", 621, 24627, 24635), ("runtime/desc.ml", 623, 24708, 24761), 0), 0, Tag1 ("Refl__Desc", 274)); (("tail", 546), 0, (Tag3 ((("object_methods", 1204)), [((("methods")), 100000000, 0, -775); ((("structures")), 100000000, 0, -778); ((("arity")), 100000000, 0, -779); ((("rec_group")), 100000000, 0, -780); ((("kinds")), 100000000, 0, -781); ((("positive")), 100000000, 0, -782); ((("negative")), 100000000, 0, -783); ((("direct")), 100000000, 0, -784); ((("gadt")), 100000000, 0, -785)], (0)), 100000000, 0, -787), (("runtime/desc.ml", 624, 24762, 24770), ("runtime/desc.ml", 626, 24850, 24904), 0), 0, Tag1 ("Refl__Desc", 275))]), ((Tag3 ((("object_methods", 1204)), [(Tag2 ([((("a")), 100000000, 0, -774); ((("methods")), 100000000, 0, -775)]), 100000000, 0, -773); (Tag2 ([((("structure")), 100000000, 0, -777); ((("structures")), 100000000, 0, -778)]), 100000000, 0, -776); ((("arity")), 100000000, 0, -779); ((("rec_group")), 100000000, 0, -780); ((("kinds")), 100000000, 0, -781); ((("positive")), 100000000, 0, -782); ((("negative")), 100000000, 0, -783); ((("direct")), 100000000, 0, -784); ((("gadt")), 100000000, 0, -785)], (0)), 100000000, 0, -772)), (("runtime/desc.ml", 620, 24613, 24615), ("runtime/desc.ml", 629, 24986, 25056), 0), 0, Tag1 ("Refl__Desc", 276))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Refl__Desc")), "object_methods"), [((("methods")), 100000000, 0, -753); ((("structures")), 100000000, 0, -754); ((("arity")), 100000000, 0, -755); ((("rec_group")), 100000000, 0, -756); ((("kinds")), 100000000, 0, -757); ((("positive")), 100000000, 0, -758); ((("negative")), 100000000, 0, -759); ((("direct")), 100000000, 0, -760); ((("gadt")), 100000000, 0, -761)], (0)), 100000000, 0, -752)), [63; 63; 63; 15; 63; 63; 63; 63; 15], [0; 0; 0; 0; 0; 0; 0; 0; 0], 0, 0, (("runtime/desc.ml", 615, 24377, 24377), ("runtime/desc.ml", 629, 24986, 25056), 0), 0, 0, 0, Tag1 ("Refl__Desc", 150)), 2, 0); Tag1 (("object_method", 1205), ([((("types")), 100000000, 0, -729); ((("structure")), 100000000, 0, -730); ((("arity")), 100000000, 0, -731); ((("rec_group")), 100000000, 0, -732); ((("kinds")), 100000000, 0, -733); ((("positive")), 100000000, 0, -734); ((("negative")), 100000000, 0, -735); ((("direct")), 100000000, 0, -736); ((("gadt")), 100000000, 0, -737)], 9, Tag1 ([(("OMethod", 547), Tag1 ([(("name", 548), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -750), (("runtime/desc.ml", 634, 25187, 25195), ("runtime/desc.ml", 634, 25187, 25209), 0), 0, Tag1 ("Refl__Desc", 277)); (("desc", 549), 0, (Tag3 ((("desc", 1189)), [((("a")), 100000000, 0, -739); ((("structures")), 100000000, 0, -742); ((("arity")), 100000000, 0, -743); ((("rec_group")), 100000000, 0, -744); ((("kinds")), 100000000, 0, -745); ((("positive")), 100000000, 0, -746); ((("negative")), 100000000, 0, -747); ((("direct")), 100000000, 0, -748); ((("gadt")), 100000000, 0, -749)], (0)), 100000000, 0, -751), (("runtime/desc.ml", 635, 25210, 25218), ("runtime/desc.ml", 637, 25292, 25336), 0), 0, Tag1 ("Refl__Desc", 278))]), ((Tag3 ((("object_method", 1205)), [((("a")), 100000000, 0, -739); (Tag8 (([("Method", ((((("structures")), 100000000, 0, -742))))], (0, 100000000, 0, -741), 1, 0, 0)), 100000000, 0, -740); ((("arity")), 100000000, 0, -743); ((("rec_group")), 100000000, 0, -744); ((("kinds")), 100000000, 0, -745); ((("positive")), 100000000, 0, -746); ((("negative")), 100000000, 0, -747); ((("direct")), 100000000, 0, -748); ((("gadt")), 100000000, 0, -749)], (0)), 100000000, 0, -738)), (("runtime/desc.ml", 633, 25171, 25173), ("runtime/desc.ml", 640, 25415, 25476), 0), 0, Tag1 ("Refl__Desc", 279))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Refl__Desc")), "object_method"), [((("types")), 100000000, 0, -729); ((("structure")), 100000000, 0, -730); ((("arity")), 100000000, 0, -731); ((("rec_group")), 100000000, 0, -732); ((("kinds")), 100000000, 0, -733); ((("positive")), 100000000, 0, -734); ((("negative")), 100000000, 0, -735); ((("direct")), 100000000, 0, -736); ((("gadt")), 100000000, 0, -737)], (0)), 100000000, 0, -728)), [63; 63; 63; 15; 63; 63; 63; 63; 15], [0; 0; 0; 0; 0; 0; 0; 0; 0], 0, 0, (("runtime/desc.ml", 631, 25058, 25058), ("runtime/desc.ml", 640, 25415, 25476), 0), 0, 0, 0, Tag1 ("Refl__Desc", 151)), 2, 0); Tag1 (("vector", 1206), ([((("types")), 100000000, 0, -694); ((("structures")), 100000000, 0, -695); ((("arity")), 100000000, 0, -696); ((("rec_group")), 100000000, 0, -697); ((("kinds")), 100000000, 0, -698); ((("variables")), 100000000, 0, -699); ((("gadt")), 100000000, 0, -700)], 7, Tag1 ([(("VNil", 550), (0), ((Tag3 ((("vector", 1206)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -702); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -703); ((("arity")), 100000000, 0, -704); ((("rec_group")), 100000000, 0, -705); ((("kinds")), 100000000, 0, -706); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -707); ((("gadt")), 100000000, 0, -708)], (0)), 100000000, 0, -701)), (("runtime/desc.ml", 651, 25821, 25823), ("runtime/desc.ml", 651, 25821, 25892), 0), 0, Tag1 ("Refl__Desc", 280)); (("VCons", 551), Tag1 ([(("head", 552), 0, (Tag3 ((("desc", 1189)), [((("a")), 100000000, 0, -711); ((("structure")), 100000000, 0, -714); ((("arity")), 100000000, 0, -716); ((("rec_group")), 100000000, 0, -717); ((("kinds")), 100000000, 0, -718); ((("positive")), 100000000, 0, -721); ((("negative")), 100000000, 0, -722); ((("direct")), 100000000, 0, -723); ((("gadt")), 100000000, 0, -725)], (0)), 100000000, 0, -726), (("runtime/desc.ml", 653, 25907, 25915), ("runtime/desc.ml", 655, 25999, 26032), 0), 0, Tag1 ("Refl__Desc", 281)); (("tail", 553), 0, (Tag3 ((("vector", 1206)), [((("types")), 100000000, 0, -712); ((("structures")), 100000000, 0, -715); ((("arity")), 100000000, 0, -716); ((("rec_group")), 100000000, 0, -717); ((("kinds")), 100000000, 0, -718); ((("variables")), 100000000, 0, -724); ((("gadt")), 100000000, 0, -725)], (0)), 100000000, 0, -727), (("runtime/desc.ml", 656, 26033, 26041), ("runtime/desc.ml", 658, 26120, 26146), 0), 0, Tag1 ("Refl__Desc", 282))]), ((Tag3 ((("vector", 1206)), [(Tag2 ([((("a")), 100000000, 0, -711); ((("types")), 100000000, 0, -712)]), 100000000, 0, -710); (Tag2 ([((("structure")), 100000000, 0, -714); ((("structures")), 100000000, 0, -715)]), 100000000, 0, -713); ((("arity")), 100000000, 0, -716); ((("rec_group")), 100000000, 0, -717); ((("kinds")), 100000000, 0, -718); (Tag2 ([(Tag2 ([((("positive")), 100000000, 0, -721); ((("negative")), 100000000, 0, -722); ((("direct")), 100000000, 0, -723)]), 100000000, 0, -720); ((("variables")), 100000000, 0, -724)]), 100000000, 0, -719); ((("gadt")), 100000000, 0, -725)], (0)), 100000000, 0, -709)), (("runtime/desc.ml", 652, 25893, 25895), ("runtime/desc.ml", 662, 26299, 26315), 0), 0, Tag1 ("Refl__Desc", 283))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Refl__Desc")), "vector"), [((("types")), 100000000, 0, -694); ((("structures")), 100000000, 0, -695); ((("arity")), 100000000, 0, -696); ((("rec_group")), 100000000, 0, -697); ((("kinds")), 100000000, 0, -698); ((("variables")), 100000000, 0, -699); ((("gadt")), 100000000, 0, -700)], (0)), 100000000, 0, -693)), [63; 63; 63; 15; 63; 63; 15], [0; 0; 0; 0; 0; 0; 0], 0, 0, (("runtime/desc.ml", 649, 25733, 25733), ("runtime/desc.ml", 662, 26299, 26315), 0), 0, 0, 0, Tag1 ("Refl__Desc", 152)), 2, 0); Tag1 (("constructor_eqs", 1207), ([((("eqs")), 100000000, 0, -669); ((("structure_eqs")), 100000000, 0, -670); ((("kinds")), 100000000, 0, -671); ((("gadt")), 100000000, 0, -672)], 4, Tag1 ([(("ENil", 554), (0), ((Tag3 ((("constructor_eqs", 1207)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -674); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -675); ((("kinds")), 100000000, 0, -676); ((("gadt")), 100000000, 0, -677)], (0)), 100000000, 0, -673)), (("runtime/desc.ml", 665, 26377, 26379), ("runtime/desc.ml", 666, 26388, 26437), 0), 0, Tag1 ("Refl__Desc", 284)); (("ECons", 555), Tag1 ([(("head", 556), 0, (Tag3 ((("selection", 1161)), [(Tag8 (([("Succ", ((((("index")), 100000000, 0, -683))))], (0, 100000000, 0, -690), 1, 0, 0)), 100000000, 0, -689); ((("gadt")), 100000000, 0, -687); ((("eq")), 100000000, 0, -680); ((0), 100000000, 0, -691)], (0)), 100000000, 0, -688), (("runtime/desc.ml", 668, 26452, 26460), ("runtime/desc.ml", 668, 26452, 26512), 0), 0, Tag1 ("Refl__Desc", 285)); (("tail", 557), 0, (Tag3 ((("constructor_eqs", 1207)), [((("eqs")), 100000000, 0, -681); ((("structure_eqs")), 100000000, 0, -684); (Tag8 (([("GADT", (0))], ((("kinds")), 100000000, 0, -686), 0, 0, 0)), 100000000, 0, -685); ((("gadt")), 100000000, 0, -687)], (0)), 100000000, 0, -692), (("runtime/desc.ml", 669, 26513, 26521), ("runtime/desc.ml", 669, 26513, 26582), 0), 0, Tag1 ("Refl__Desc", 286))]), ((Tag3 ((("constructor_eqs", 1207)), [(Tag2 ([((("eq")), 100000000, 0, -680); ((("eqs")), 100000000, 0, -681)]), 100000000, 0, -679); (Tag2 ([((("index")), 100000000, 0, -683); ((("structure_eqs")), 100000000, 0, -684)]), 100000000, 0, -682); (Tag8 (([("GADT", (0))], ((("kinds")), 100000000, 0, -686), 0, 0, 0)), 100000000, 0, -685); ((("gadt")), 100000000, 0, -687)], (0)), 100000000, 0, -678)), (("runtime/desc.ml", 667, 26438, 26440), ("runtime/desc.ml", 672, 26670, 26697), 0), 0, Tag1 ("Refl__Desc", 287))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Refl__Desc")), "constructor_eqs"), [((("eqs")), 100000000, 0, -669); ((("structure_eqs")), 100000000, 0, -670); ((("kinds")), 100000000, 0, -671); ((("gadt")), 100000000, 0, -672)], (0)), 100000000, 0, -668)), [63; 63; 63; 15], [0; 0; 0; 0], 0, 0, (("runtime/desc.ml", 664, 26317, 26317), ("runtime/desc.ml", 672, 26670, 26697), 0), 0, 0, 0, Tag1 ("Refl__Desc", 153)), 2, 0); Tag1 (("attributes", 1208), ([((("a")), 100000000, 0, -655); ((("arity")), 100000000, 0, -656); ((("rec_group")), 100000000, 0, -657); ((("kinds")), 100000000, 0, -658); ((("positive")), 100000000, 0, -659); ((("negative")), 100000000, 0, -660); ((("direct")), 100000000, 0, -661); ((("gadt")), 100000000, 0, -662)], 8, [[(("typed", 558), 0, (Tag10 ((Tag1 (0, (Tag3 ((("typed_attribute_kind", 1180)), [((("a")), 100000000, 0, -655); ((("arity")), 100000000, 0, -656); (Tag9 (("attribute")), 100000000, 0, -664)], (0)), 100000000, 0, -667), (Tag3 ((Tag3 ("option", 10)), [(Tag9 (("attribute")), 100000000, 0, -664)], (0)), 100000000, 0, -666), 0), 100000000, 0, -665), [(Tag9 (("attribute")), 100000000, 0, -664)]), 100000000, 0, -663), (("runtime/desc.ml", 676, 26795, 26799), ("runtime/desc.ml", 678, 26826, 26899), 0), 0, Tag1 ("Refl__Desc", 288))]], 1, ((Tag3 (Tag1 ((Tag2 ("Refl__Desc")), "attributes"), [((("a")), 100000000, 0, -655); ((("arity")), 100000000, 0, -656); ((("rec_group")), 100000000, 0, -657); ((("kinds")), 100000000, 0, -658); ((("positive")), 100000000, 0, -659); ((("negative")), 100000000, 0, -660); ((("direct")), 100000000, 0, -661); ((("gadt")), 100000000, 0, -662)], (0)), 100000000, 0, -654)), [15; 15; 8; 8; 8; 8; 8; 8], [0; 0; 0; 0; 0; 0; 0; 0], 0, 0, (("runtime/desc.ml", 674, 26699, 26699), ("runtime/desc.ml", 679, 26900, 26903), 0), 0, 0, 1, Tag1 ("Refl__Desc", 154)), 2, 0); Tag3 (("Builtins", 1209), 1, (Tag3 (Tag1 ((Tag2 ("Refl__")), "Builtins")), 0, (("runtime/refl.ml", 3, 14, 14), ("runtime/refl.ml", 3, 14, 40), 0), Tag1 ("Refl", 35)), 0, 0); Tag3 (("Tools", 1210), 1, (Tag3 (Tag1 ((Tag2 ("Refl__")), "Tools")), 0, (("runtime/refl.ml", 5, 42, 42), ("runtime/refl.ml", 5, 42, 62), 0), Tag1 ("Refl", 36)), 0, 0); Tag2 (("Incompatible", 1211), ((Tag3 ("exn", 7)), 0, (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Refl__Convert", 37)), 2, 0); (("selection", 1212), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "selection"), [(Tag8 (([("Succ", ((((("index_a")), 100000000, 0, -652))))], (0, 100000000, 0, -651), 1, 0, 0)), 100000000, 0, -650); ((("sequence")), 100000000, 0, -647); ((("head_a")), 100000000, 0, -641); ((("tail_a")), 100000000, 0, -653)], (0)), 100000000, 0, -649), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "selection"), [(Tag8 (([("Succ", ((((("index_b")), 100000000, 0, -646))))], (0, 100000000, 0, -645), 1, 0, 0)), 100000000, 0, -644); ((("sequence")), 100000000, 0, -647); ((("head_b")), 100000000, 0, -642); ((("tail_b")), 100000000, 0, -648)], (0)), 100000000, 0, -643), (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "eq"), [((("head_a")), 100000000, 0, -641); ((("head_b")), 100000000, 0, -642)], (0)), 100000000, 0, -640), 0), 100000000, 0, -639), 0), 100000000, 0, -638), 0, (("runtime/convert.ml", 7, 47, 51), ("runtime/convert.ml", 7, 47, 60), 0), 0, Tag1 ("Refl__Convert", 38)), 0); (("convert_eqs", 1213), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "constructor_eqs"), [((("a_eqs")), 100000000, 0, -630); ((("structure_eqs_a")), 100000000, 0, -636); ((("kinds_a")), 100000000, 0, -637); ((("gadt")), 100000000, 0, -634)], (0)), 100000000, 0, -635), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "constructor_eqs"), [((("b_eqs")), 100000000, 0, -629); ((("structure_eqs_b")), 100000000, 0, -632); ((("kinds_b")), 100000000, 0, -633); ((("gadt")), 100000000, 0, -634)], (0)), 100000000, 0, -631), (Tag1 (0, ((("a_eqs")), 100000000, 0, -630), ((("b_eqs")), 100000000, 0, -629), 0), 100000000, 0, -628), 0), 100000000, 0, -627), 0), 100000000, 0, -626), 0, (("runtime/convert.ml", 19, 510, 518), ("runtime/convert.ml", 19, 510, 529), 0), 0, Tag1 ("Refl__Convert", 87)), 0); (("convert_presence", 1214), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "presence"), [((("global_a")), 100000000, 0, -625); ((("local_a")), 100000000, 0, -620)], (0)), 100000000, 0, -624), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "presence"), [((("global_b")), 100000000, 0, -623); ((("local_b")), 100000000, 0, -621)], (0)), 100000000, 0, -622), (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "eq"), [((("local_a")), 100000000, 0, -620); ((("local_b")), 100000000, 0, -621)], (0)), 100000000, 0, -619), 0), 100000000, 0, -618), 0), 100000000, 0, -617), 0, (("runtime/convert.ml", 34, 1049, 1053), ("runtime/convert.ml", 34, 1049, 1069), 0), 0, Tag1 ("Refl__Convert", 126)), 0); (("convert_presences", 1215), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "presences"), [((("global")), 100000000, 0, -615); ((("local_a")), 100000000, 0, -612)], (0)), 100000000, 0, -616), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "presences"), [((("global")), 100000000, 0, -615); ((("local_b")), 100000000, 0, -613)], (0)), 100000000, 0, -614), (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "eq"), [((("local_a")), 100000000, 0, -612); ((("local_b")), 100000000, 0, -613)], (0)), 100000000, 0, -611), 0), 100000000, 0, -610), 0), 100000000, 0, -609), 0, (("runtime/convert.ml", 45, 1355, 1363), ("runtime/convert.ml", 45, 1355, 1380), 0), 0, Tag1 ("Refl__Convert", 141)), 0); Tag3 (("Converter", 1216), 0, (Tag3 (Tag1 ((Tag2 ("Refl__Convert")), "Converter")), 0, (("runtime/convert.ml", 61, 1880, 1880), ("runtime/convert.ml", 63, 1935, 1938), 0), Tag1 ("Refl__Convert", 166)), 0, 0); Tag3 (("Converters", 1217), 0, (Tag3 (Tag1 ((Tag2 ("Refl__Convert")), "Converters")), 0, (("runtime/convert.ml", 65, 1940, 1940), ("runtime/convert.ml", 88, 2804, 2807), 0), Tag1 ("Refl__Convert", 298)), 0, 0); Tag1 (("converters", 1218), ([((("arity_a")), 100000000, 0, -605); ((("arity_b")), 100000000, 0, -606)], 2, Tag1 ([(("SameArity", 642), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "eq"), [((("arity_a")), 100000000, 0, -605); ((("arity_b")), 100000000, 0, -606)], (0)), 100000000, 0, -607)]), 0, (("runtime/convert.ml", 91, 2848, 2850), ("runtime/convert.ml", 91, 2848, 2888), 0), 0, Tag1 ("Refl__Convert", 300)); (("Converters", 643), ([(Tag3 (Tag1 ((("Converters", 1217)), "t"), [((("arity_a")), 100000000, 0, -605); ((("arity_b")), 100000000, 0, -606)], (0)), 100000000, 0, -608)]), 0, (("runtime/convert.ml", 92, 2889, 2891), ("runtime/convert.ml", 92, 2889, 2940), 0), 0, Tag1 ("Refl__Convert", 301))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Refl__Convert")), "converters"), [((("arity_a")), 100000000, 0, -605); ((("arity_b")), 100000000, 0, -606)], (0)), 100000000, 0, -604)), [63; 63], [0; 0], 0, 0, (("runtime/convert.ml", 90, 2809, 2809), ("runtime/convert.ml", 92, 2889, 2940), 0), 0, 0, 0, Tag1 ("Refl__Convert", 299)), 1, 0); Tag1 (("make_variables", 1219), ([((("forall")), 100000000, 0, -592); ((("arity_a")), 100000000, 0, -593); ((("arity_b")), 100000000, 0, -594)], 3, Tag1 ([(("MakeVariables", 645), Tag1 ([(("subarity_a", 646), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "append"), [((("forall")), 100000000, 0, -596); ((("arity_a")), 100000000, 0, -597); ((("subarity_a")), 100000000, 0, -600)], (0)), 100000000, 0, -599), (("runtime/convert.ml", 96, 3016, 3024), ("runtime/convert.ml", 96, 3016, 3077), 0), 0, Tag1 ("Refl__Convert", 303)); (("subarity_b", 647), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "append"), [((("forall")), 100000000, 0, -596); ((("arity_b")), 100000000, 0, -598); ((("subarity_b")), 100000000, 0, -602)], (0)), 100000000, 0, -601), (("runtime/convert.ml", 97, 3078, 3086), ("runtime/convert.ml", 97, 3078, 3139), 0), 0, Tag1 ("Refl__Convert", 304)); (("converters", 648), 0, (Tag3 ((("converters", 1218)), [((("subarity_a")), 100000000, 0, -600); ((("subarity_b")), 100000000, 0, -602)], (0)), 100000000, 0, -603), (("runtime/convert.ml", 98, 3140, 3148), ("runtime/convert.ml", 98, 3140, 3198), 0), 0, Tag1 ("Refl__Convert", 305))]), ((Tag3 ((("make_variables", 1219)), [((("forall")), 100000000, 0, -596); ((("arity_a")), 100000000, 0, -597); ((("arity_b")), 100000000, 0, -598)], (0)), 100000000, 0, -595)), (("runtime/convert.ml", 95, 2994, 2996), ("runtime/convert.ml", 99, 3199, 3254), 0), 0, Tag1 ("Refl__Convert", 306))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Refl__Convert")), "make_variables"), [((("forall")), 100000000, 0, -592); ((("arity_a")), 100000000, 0, -593); ((("arity_b")), 100000000, 0, -594)], (0)), 100000000, 0, -591)), [63; 15; 15], [0; 0; 0], 0, 0, (("runtime/convert.ml", 94, 2942, 2942), ("runtime/convert.ml", 99, 3199, 3254), 0), 0, 0, 0, Tag1 ("Refl__Convert", 302)), 1, 0); (("reverse", 1220), ((Tag1 (0, (Tag3 ((("converters", 1218)), [((("arity_a")), 100000000, 0, -589); ((("arity_b")), 100000000, 0, -588)], (0)), 100000000, 0, -590), (Tag3 ((("converters", 1218)), [((("arity_b")), 100000000, 0, -588); ((("arity_a")), 100000000, 0, -589)], (0)), 100000000, 0, -587), 0), 100000000, 0, -586), 0, (("runtime/convert.ml", 101, 3256, 3260), ("runtime/convert.ml", 101, 3256, 3267), 0), 0, Tag1 ("Refl__Convert", 313)), 0); (("make_variables", 1221), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "length"), [((("count")), 100000000, 0, -585); ((("forall")), 100000000, 0, -580)], (0)), 100000000, 0, -584), (Tag1 (0, (Tag3 ((("converters", 1218)), [((("arity_a")), 100000000, 0, -581); ((("arity_b")), 100000000, 0, -582)], (0)), 100000000, 0, -583), (Tag3 ((("make_variables", 1219)), [((("forall")), 100000000, 0, -580); ((("arity_a")), 100000000, 0, -581); ((("arity_b")), 100000000, 0, -582)], (0)), 100000000, 0, -579), 0), 100000000, 0, -578), 0), 100000000, 0, -577), 0, (("runtime/convert.ml", 110, 3512, 3520), ("runtime/convert.ml", 110, 3512, 3534), 0), 0, Tag1 ("Refl__Convert", 319)), 0); (("convert", 1222), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [((("a_struct")), 100000000, 0, -554); ((("structure_a")), 100000000, 0, -571); ((("arity_a")), 100000000, 0, -561); ((("rec_group_a")), 100000000, 0, -572); ((("kinds_a")), 100000000, 0, -573); ((("positive_a")), 100000000, 0, -574); ((("negative_a")), 100000000, 0, -575); ((("direct_a")), 100000000, 0, -576); ((("gadt_a")), 100000000, 0, -558)], (0)), 100000000, 0, -570), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [((("b_struct")), 100000000, 0, -555); ((("structure_b")), 100000000, 0, -564); ((("arity_b")), 100000000, 0, -562); ((("rec_group_b")), 100000000, 0, -565); ((("kinds_b")), 100000000, 0, -566); ((("positive_b")), 100000000, 0, -567); ((("negative_b")), 100000000, 0, -568); ((("direct_b")), 100000000, 0, -569); ((("gadt_b")), 100000000, 0, -559)], (0)), 100000000, 0, -563), (Tag1 (0, (Tag3 ((("converters", 1218)), [((("arity_a")), 100000000, 0, -561); ((("arity_b")), 100000000, 0, -562)], (0)), 100000000, 0, -560), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "eq"), [((("gadt_a")), 100000000, 0, -558); ((("gadt_b")), 100000000, 0, -559)], (0)), 100000000, 0, -557)], (0)), 100000000, 0, -556), (Tag3 (Tag1 ((("Converter", 1216)), "t"), [((("a_struct")), 100000000, 0, -554); ((("b_struct")), 100000000, 0, -555)], (0)), 100000000, 0, -553), 0), 100000000, 0, -552), 0), 100000000, 0, -551), 0), 100000000, 0, -550), 0), 100000000, 0, -549), 0, (("runtime/convert.ml", 131, 4244, 4252), ("runtime/convert.ml", 131, 4244, 4259), 0), 0, Tag1 ("Refl__Convert", 341)), 0); (("transfer", 1223), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "vector"), [((("a")), 100000000, 0, -530); ((("structures_a")), 100000000, 0, -545); ((("arity_a")), 100000000, 0, -537); ((("rec_group_a")), 100000000, 0, -546); ((("kinds_a")), 100000000, 0, -547); ((("variables_a")), 100000000, 0, -548); ((("gadt_a")), 100000000, 0, -534)], (0)), 100000000, 0, -544), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "vector"), [((("b")), 100000000, 0, -531); ((("structures_b")), 100000000, 0, -540); ((("arity_b")), 100000000, 0, -538); ((("rec_group_b")), 100000000, 0, -541); ((("kinds_b")), 100000000, 0, -542); ((("variables_b")), 100000000, 0, -543); ((("gadt_b")), 100000000, 0, -535)], (0)), 100000000, 0, -539), (Tag1 (0, (Tag3 ((("converters", 1218)), [((("arity_a")), 100000000, 0, -537); ((("arity_b")), 100000000, 0, -538)], (0)), 100000000, 0, -536), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "eq"), [((("gadt_a")), 100000000, 0, -534); ((("gadt_b")), 100000000, 0, -535)], (0)), 100000000, 0, -533)], (0)), 100000000, 0, -532), (Tag3 (Tag1 ((("Converters", 1217)), "t"), [((("a")), 100000000, 0, -530); ((("b")), 100000000, 0, -531)], (0)), 100000000, 0, -529), 0), 100000000, 0, -528), 0), 100000000, 0, -527), 0), 100000000, 0, -526), 0), 100000000, 0, -525), 0, (("runtime/convert.ml", 462, 18108, 18112), ("runtime/convert.ml", 462, 18108, 18120), 0), 0, Tag1 ("Refl__Convert", 342)), 0); (("cast", 1224), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [((0), 100000000, 0, -508); ((0), 100000000, 0, -519); ((0), 100000000, 0, -511); ((0), 100000000, 0, -520); ((0), 100000000, 0, -521); ((0), 100000000, 0, -522); ((0), 100000000, 0, -523); ((0), 100000000, 0, -524); ((0), 100000000, 0, -517)], (0)), 100000000, 0, -518), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [((0), 100000000, 0, -507); ((0), 100000000, 0, -510); ((0), 100000000, 0, -511); ((0), 100000000, 0, -512); ((0), 100000000, 0, -513); ((0), 100000000, 0, -514); ((0), 100000000, 0, -515); ((0), 100000000, 0, -516); ((0), 100000000, 0, -517)], (0)), 100000000, 0, -509), (Tag1 (0, ((0), 100000000, 0, -508), ((0), 100000000, 0, -507), 0), 100000000, 0, -506), 0), 100000000, 0, -505), 0), 100000000, 0, -504), 0, (("runtime/convert.ml", 484, 18950, 18954), ("runtime/convert.ml", 484, 18950, 18958), 0), 0, Tag1 ("Refl__Convert", 1237)), 0); Tag3 (("Mapper", 1225), 0, (Tag3 (Tag1 ((Tag2 ("Refl__Map")), "Mapper")), 0, (("runtime/map.ml", 5, 23, 23), ("runtime/map.ml", 7, 75, 78), 0), Tag1 ("Refl__Map", 38)), 0, 0); Tag3 (("Mappers", 1226), 0, (Tag3 (Tag1 ((Tag2 ("Refl__Map")), "Mappers")), 0, (("runtime/map.ml", 9, 80, 80), ("runtime/map.ml", 9, 80, 118), 0), Tag1 ("Refl__Map", 41)), 0, 0); (("map", 1227), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [((("a_struct")), 100000000, 0, -490); ((("structure")), 100000000, 0, -498); ((("a_arity")), 100000000, 0, -493); ((("rec_group")), 100000000, 0, -499); ((("kinds")), 100000000, 0, -500); ((("positive")), 100000000, 0, -495); ((("negative")), 100000000, 0, -496); ((("direct")), 100000000, 0, -501); ((("gadt")), 100000000, 0, -502)], (0)), 100000000, 0, -503), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [((("b_struct")), 100000000, 0, -491); ((("structure")), 100000000, 0, -498); ((("b_arity")), 100000000, 0, -494); ((("rec_group")), 100000000, 0, -499); ((("kinds")), 100000000, 0, -500); ((("positive")), 100000000, 0, -495); ((("negative")), 100000000, 0, -496); ((("direct")), 100000000, 0, -501); ((("gadt")), 100000000, 0, -502)], (0)), 100000000, 0, -497), (Tag1 (0, (Tag3 (Tag1 ((("Mappers", 1226)), "t"), [((("a_arity")), 100000000, 0, -493); ((("b_arity")), 100000000, 0, -494); ((("positive")), 100000000, 0, -495); ((("negative")), 100000000, 0, -496)], (0)), 100000000, 0, -492), (Tag3 (Tag1 ((("Mapper", 1225)), "t"), [((("a_struct")), 100000000, 0, -490); ((("b_struct")), 100000000, 0, -491)], (0)), 100000000, 0, -489), 0), 100000000, 0, -488), 0), 100000000, 0, -487), 0), 100000000, 0, -486), 0, (("runtime/map.ml", 11, 120, 128), ("runtime/map.ml", 11, 120, 131), 0), 0, Tag1 ("Refl__Map", 42)), 0); Tag3 (("Printer", 1228), 0, (Tag3 (Tag1 ((Tag2 ("Refl__Show")), "Printer")), 0, (("runtime/show.ml", 5, 23, 23), ("runtime/show.ml", 7, 92, 95), 0), Tag1 ("Refl__Show", 38)), 0, 0); Tag3 (("Printers", 1229), 0, (Tag3 (Tag1 ((Tag2 ("Refl__Show")), "Printers")), 0, (("runtime/show.ml", 9, 97, 97), ("runtime/show.ml", 9, 97, 131), 0), Tag1 ("Refl__Show", 76)), 0, 0); Tag3 (("PrinterSequence", 1230), 0, (Tag3 (Tag1 ((Tag2 ("Refl__Show")), "PrinterSequence")), 0, (("runtime/show.ml", 11, 133, 133), ("runtime/show.ml", 11, 133, 179), 0), Tag1 ("Refl__Show", 78)), 0, 0); Tag2 (("Attribute_printer", 1231), (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "typed_attribute_kind"), [((("a")), 100000000, 0, -479); ((("arity")), 100000000, 0, -480); ((("b")), 100000000, 0, -481)], (0), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "typed_attribute_kind"), [((("a")), 100000000, 0, -483); ((("arity")), 100000000, 0, -484); (Tag3 (Tag1 ((("Printer", 1228)), "t"), [((("a")), 100000000, 0, -483)], (0)), 100000000, 0, -485)], (0)), 100000000, 0, -482)), 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Refl__Show", 79)), 0, 0); Tag2 (("Attribute_polyprinter", 1232), (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "typed_attribute_kind"), [((("a")), 100000000, 0, -479); ((("arity")), 100000000, 0, -480); ((("b")), 100000000, 0, -481)], (0), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "typed_attribute_kind"), [((("a")), 100000000, 0, -474); ((("arity")), 100000000, 0, -475); (Tag1 (0, (Tag3 (Tag1 ((("PrinterSequence", 1230)), "t"), [((("arity")), 100000000, 0, -475)], (0)), 100000000, 0, -478), (Tag3 (Tag1 ((("Printer", 1228)), "t"), [((("a")), 100000000, 0, -474)], (0)), 100000000, 0, -477), 0), 100000000, 0, -476)], (0)), 100000000, 0, -473)), 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Refl__Show", 80)), 1, 0); Tag1 (("value", 1233), ([((("kinds")), 100000000, 0, -460)], 1, Tag1 ([(("Value", 832), Tag1 ([(("desc", 833), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [((("a")), 100000000, 0, -464); ((("structure")), 100000000, 0, -465); ((("arity")), 100000000, 0, -466); ((("rec_group")), 100000000, 0, -467); ((("kinds")), 100000000, 0, -462); ((("positive")), 100000000, 0, -468); ((("negative")), 100000000, 0, -469); ((("direct")), 100000000, 0, -470); ((("gadt")), 100000000, 0, -471)], (0)), 100000000, 0, -463), (("runtime/show.ml", 21, 450, 456), ("runtime/show.ml", 23, 538, 569), 0), 0, Tag1 ("Refl__Show", 82)); (("value", 834), 0, ((("a")), 100000000, 0, -464), (("runtime/show.ml", 24, 570, 576), ("runtime/show.ml", 24, 570, 587), 0), 0, Tag1 ("Refl__Show", 83)); (("printers", 835), 0, (Tag3 (Tag1 ((("Printers", 1229)), "t"), [((("arity")), 100000000, 0, -466); ((("direct")), 100000000, 0, -470)], (0)), 100000000, 0, -472), (("runtime/show.ml", 25, 588, 594), ("runtime/show.ml", 25, 588, 634), 0), 0, Tag1 ("Refl__Show", 84))]), ((Tag3 ((("value", 1233)), [((("kinds")), 100000000, 0, -462)], (0)), 100000000, 0, -461)), (("runtime/show.ml", 20, 436, 438), ("runtime/show.ml", 27, 644, 662), 0), 0, Tag1 ("Refl__Show", 85))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Refl__Show")), "value"), [((("kinds")), 100000000, 0, -460)], (0)), 100000000, 0, -459)), [63], [0], 0, 0, (("runtime/show.ml", 19, 416, 416), ("runtime/show.ml", 27, 644, 662), 0), 0, 0, 0, Tag1 ("Refl__Show", 81)), 1, 0); (("pp", 1234), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [((("a")), 100000000, 0, -447); ((("structure")), 100000000, 0, -452); ((("arity")), 100000000, 0, -449); ((("rec_group")), 100000000, 0, -453); (Tag8 (([("Array", (0)); ("Arrow", (0)); ("Attributes", (0)); ("Bool", (0)); ("Bytes", (0)); ("Char", (0)); ("Constr", (0)); ("Exists", (0)); ("Float", (0)); ("Int", (0)); ("Int32", (0)); ("Int64", (0)); ("Lazy", (0)); ("MapOpaque", (0)); ("Nativeint", (0)); ("Object", (0)); ("Opaque", (0)); ("Poly", (0)); ("Record", (0)); ("String", (0)); ("Tuple", (0)); ("Variable", (0)); ("Variant", (0))], ((0), 100000000, 0, -455), 0, 0, 0)), 100000000, 0, -454); ((("positive")), 100000000, 0, -456); ((("negative")), 100000000, 0, -457); ((("direct")), 100000000, 0, -450); ((("gadt")), 100000000, 0, -458)], (0)), 100000000, 0, -451), (Tag1 (0, (Tag3 (Tag1 ((("Printers", 1229)), "t"), [((("arity")), 100000000, 0, -449); ((("direct")), 100000000, 0, -450)], (0)), 100000000, 0, -448), (Tag3 (Tag1 ((("Printer", 1228)), "t"), [((("a")), 100000000, 0, -447)], (0)), 100000000, 0, -446), 0), 100000000, 0, -445), 0), 100000000, 0, -444), 0, (("runtime/show.ml", 29, 664, 672), ("runtime/show.ml", 29, 664, 674), 0), 0, Tag1 ("Refl__Show", 93)), 0); (("show", 1235), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [((0), 100000000, 0, -432); ((0), 100000000, 0, -437); ((0), 100000000, 0, -434); ((0), 100000000, 0, -438); (Tag8 (([("Array", (0)); ("Arrow", (0)); ("Attributes", (0)); ("Bool", (0)); ("Bytes", (0)); ("Char", (0)); ("Constr", (0)); ("Exists", (0)); ("Float", (0)); ("Int", (0)); ("Int32", (0)); ("Int64", (0)); ("Lazy", (0)); ("MapOpaque", (0)); ("Nativeint", (0)); ("Object", (0)); ("Opaque", (0)); ("Poly", (0)); ("Record", (0)); ("String", (0)); ("Tuple", (0)); ("Variable", (0)); ("Variant", (0))], ((0), 100000000, 0, -440), 0, 0, 0)), 100000000, 0, -439); ((0), 100000000, 0, -441); ((0), 100000000, 0, -442); ((0), 100000000, 0, -435); ((0), 100000000, 0, -443)], (0)), 100000000, 0, -436), (Tag1 (0, (Tag3 (Tag1 ((("Printers", 1229)), "t"), [((0), 100000000, 0, -434); ((0), 100000000, 0, -435)], (0)), 100000000, 0, -433), (Tag1 (0, ((0), 100000000, 0, -432), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -431), 0), 100000000, 0, -430), 0), 100000000, 0, -429), 0), 100000000, 0, -428), 0, (("runtime/show.ml", 314, 11115, 11119), ("runtime/show.ml", 314, 11115, 11123), 0), 0, Tag1 ("Refl__Show", 549)), 0); Tag3 (("Compare", 1236), 1, (Tag3 (Tag1 ((Tag2 ("Refl__")), "Compare")), 0, (("runtime/refl.ml", 13, 108, 108), ("runtime/refl.ml", 13, 108, 132), 0), Tag1 ("Refl", 39)), 0, 0); Tag3 (("Comparer", 1237), 1, (Tag3 (Tag1 ((("Compare", 1236)), "Comparer")), 0, (("runtime/refl.ml", 15, 134, 134), ("runtime/refl.ml", 15, 134, 168), 0), Tag1 ("Refl", 41)), 0, 0); Tag3 (("Comparers", 1238), 1, (Tag3 (Tag1 ((("Compare", 1236)), "Comparers")), 0, (("runtime/refl.ml", 17, 170, 170), ("runtime/refl.ml", 17, 170, 206), 0), Tag1 ("Refl", 42)), 0, 0); (("compare_gen", 1239), ((Tag1 (Tag1 ("hook"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("Compare", 1236)), "hook"), 0, (0)), 100000000, 0, -427)], (0)), 100000000, 0, -426), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [((0), 100000000, 0, -409); ((0), 100000000, 0, -419); ((0), 100000000, 0, -412); ((0), 100000000, 0, -420); (Tag8 (([("Absent", Tag1 (1, 0, 0, (1))); ("Array", (0)); ("Attributes", (0)); ("Bool", (0)); ("Bytes", (0)); ("Char", (0)); ("Constr", (0)); ("Exists", (0)); ("Float", (0)); ("GADT", Tag1 (1, 0, 0, (1))); ("Int", (0)); ("Int32", (0)); ("Int64", (0)); ("Lazy", (0)); ("MapOpaque", (0)); ("Name", Tag1 (1, 0, 0, (1))); ("Nativeint", (0)); ("Object", (0)); ("Opaque", (0)); ("Record", (0)); ("String", (0)); ("Tuple", (0)); ("Unit", Tag1 (1, 0, 0, (1))); ("Variable", (0)); ("Variant", (0))], ((0), 100000000, 0, -422), 1, 0, ([Tag1 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "Kinds"), "comparable")]))), 100000000, 0, -421); ((0), 100000000, 0, -423); ((0), 100000000, 0, -424); ((0), 100000000, 0, -414); ((0), 100000000, 0, -416)], (0)), 100000000, 0, -425), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [((0), 100000000, 0, -410); ((0), 100000000, 0, -419); ((0), 100000000, 0, -413); ((0), 100000000, 0, -420); (Tag8 (([("Absent", Tag1 (1, 0, 0, (1))); ("Array", (0)); ("Attributes", (0)); ("Bool", (0)); ("Bytes", (0)); ("Char", (0)); ("Constr", (0)); ("Exists", (0)); ("Float", (0)); ("GADT", Tag1 (1, 0, 0, (1))); ("Int", (0)); ("Int32", (0)); ("Int64", (0)); ("Lazy", (0)); ("MapOpaque", (0)); ("Name", Tag1 (1, 0, 0, (1))); ("Nativeint", (0)); ("Object", (0)); ("Opaque", (0)); ("Record", (0)); ("String", (0)); ("Tuple", (0)); ("Unit", Tag1 (1, 0, 0, (1))); ("Variable", (0)); ("Variant", (0))], ((0), 100000000, 0, -422), 1, 0, ([Tag1 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "Kinds"), "comparable")]))), 100000000, 0, -421); ((0), 100000000, 0, -423); ((0), 100000000, 0, -424); ((0), 100000000, 0, -414); ((0), 100000000, 0, -417)], (0)), 100000000, 0, -418), (Tag1 (0, (Tag3 (Tag1 ((("Compare", 1236)), "poly"), [((0), 100000000, 0, -412); ((0), 100000000, 0, -416); ((0), 100000000, 0, -413); ((0), 100000000, 0, -417)], (0)), 100000000, 0, -415), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((("Compare", 1236)), "Comparers"), "t"), [((0), 100000000, 0, -412); ((0), 100000000, 0, -413); ((0), 100000000, 0, -414)], (0)), 100000000, 0, -411), (Tag3 (Tag1 (Tag1 ((("Compare", 1236)), "Comparer"), "t"), [((0), 100000000, 0, -409); ((0), 100000000, 0, -410)], (0)), 100000000, 0, -408), 0), 100000000, 0, -407), 0), 100000000, 0, -406), 0), 100000000, 0, -405), 0), 100000000, 0, -404), 0), 100000000, 0, -403), 0, (("runtime/refl.ml", 19, 208, 212), ("runtime/refl.ml", 19, 208, 223), 0), 0, Tag1 ("Refl", 43)), 0); (("compare_poly", 1240), ((Tag1 (Tag1 ("hook"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("Compare", 1236)), "hook"), 0, (0)), 100000000, 0, -402)], (0)), 100000000, 0, -401), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [((0), 100000000, 0, -385); ((0), 100000000, 0, -392); ((0), 100000000, 0, -388); ((0), 100000000, 0, -393); (Tag8 (([("Absent", Tag1 (1, 0, 0, (1))); ("Array", (0)); ("Attributes", (0)); ("Bool", (0)); ("Bytes", (0)); ("Char", (0)); ("Constr", (0)); ("Exists", (0)); ("Float", (0)); ("GADT", Tag1 (1, 0, 0, (1))); ("Int", (0)); ("Int32", (0)); ("Int64", (0)); ("Lazy", (0)); ("MapOpaque", (0)); ("Name", Tag1 (1, 0, 0, (1))); ("Nativeint", (0)); ("Object", (0)); ("Opaque", (0)); ("Record", (0)); ("String", (0)); ("Tuple", (0)); ("Unit", Tag1 (1, 0, 0, (1))); ("Variable", (0)); ("Variant", (0))], ((0), 100000000, 0, -395), 1, 0, ([Tag1 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "Kinds"), "comparable")]))), 100000000, 0, -394); ((0), 100000000, 0, -396); ((0), 100000000, 0, -397); ((0), 100000000, 0, -390); ((0), 100000000, 0, -400)], (0)), 100000000, 0, -399), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [((0), 100000000, 0, -386); ((0), 100000000, 0, -392); ((0), 100000000, 0, -389); ((0), 100000000, 0, -393); (Tag8 (([("Absent", Tag1 (1, 0, 0, (1))); ("Array", (0)); ("Attributes", (0)); ("Bool", (0)); ("Bytes", (0)); ("Char", (0)); ("Constr", (0)); ("Exists", (0)); ("Float", (0)); ("GADT", Tag1 (1, 0, 0, (1))); ("Int", (0)); ("Int32", (0)); ("Int64", (0)); ("Lazy", (0)); ("MapOpaque", (0)); ("Name", Tag1 (1, 0, 0, (1))); ("Nativeint", (0)); ("Object", (0)); ("Opaque", (0)); ("Record", (0)); ("String", (0)); ("Tuple", (0)); ("Unit", Tag1 (1, 0, 0, (1))); ("Variable", (0)); ("Variant", (0))], ((0), 100000000, 0, -395), 1, 0, ([Tag1 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "Kinds"), "comparable")]))), 100000000, 0, -394); ((0), 100000000, 0, -396); ((0), 100000000, 0, -397); ((0), 100000000, 0, -390); ((0), 100000000, 0, -398)], (0)), 100000000, 0, -391), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((("Compare", 1236)), "Comparers"), "t"), [((0), 100000000, 0, -388); ((0), 100000000, 0, -389); ((0), 100000000, 0, -390)], (0)), 100000000, 0, -387), (Tag3 (Tag1 (Tag1 ((("Compare", 1236)), "Comparer"), "t"), [((0), 100000000, 0, -385); ((0), 100000000, 0, -386)], (0)), 100000000, 0, -384), 0), 100000000, 0, -383), 0), 100000000, 0, -382), 0), 100000000, 0, -381), 0), 100000000, 0, -380), 0, (("runtime/refl.ml", 21, 247, 251), ("runtime/refl.ml", 21, 247, 263), 0), 0, Tag1 ("Refl", 81)), 0); (("compare", 1241), ((Tag1 (Tag1 ("hook"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("Compare", 1236)), "hook"), 0, (0)), 100000000, 0, -379)], (0)), 100000000, 0, -378), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [((0), 100000000, 0, -366); ((0), 100000000, 0, -371); ((0), 100000000, 0, -368); ((0), 100000000, 0, -372); (Tag8 (([("Absent", Tag1 (1, 0, 0, (1))); ("Array", (0)); ("Attributes", (0)); ("Bool", (0)); ("Bytes", (0)); ("Char", (0)); ("Constr", (0)); ("Exists", (0)); ("Float", (0)); ("GADT", Tag1 (1, 0, 0, (1))); ("Int", (0)); ("Int32", (0)); ("Int64", (0)); ("Lazy", (0)); ("MapOpaque", (0)); ("Name", Tag1 (1, 0, 0, (1))); ("Nativeint", (0)); ("Object", (0)); ("Opaque", (0)); ("Record", (0)); ("String", (0)); ("Tuple", (0)); ("Unit", Tag1 (1, 0, 0, (1))); ("Variable", (0)); ("Variant", (0))], ((0), 100000000, 0, -374), 1, 0, ([Tag1 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "Kinds"), "comparable")]))), 100000000, 0, -373); ((0), 100000000, 0, -375); ((0), 100000000, 0, -376); ((0), 100000000, 0, -369); ((0), 100000000, 0, -377)], (0)), 100000000, 0, -370), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((("Compare", 1236)), "Comparers"), "t"), [((0), 100000000, 0, -368); ((0), 100000000, 0, -368); ((0), 100000000, 0, -369)], (0)), 100000000, 0, -367), (Tag3 (Tag1 (Tag1 ((("Compare", 1236)), "Comparer"), "t"), [((0), 100000000, 0, -366); ((0), 100000000, 0, -366)], (0)), 100000000, 0, -365), 0), 100000000, 0, -364), 0), 100000000, 0, -363), 0), 100000000, 0, -362), 0, (("runtime/refl.ml", 23, 288, 292), ("runtime/refl.ml", 23, 288, 299), 0), 0, Tag1 ("Refl", 82)), 0); Tag3 (("Eq", 1242), 1, (Tag3 (Tag1 ((Tag2 ("Refl__")), "Eq")), 0, (("runtime/refl.ml", 25, 319, 319), ("runtime/refl.ml", 25, 319, 333), 0), Tag1 ("Refl", 83)), 0, 0); Tag3 (("Equaler", 1243), 1, (Tag3 (Tag1 ((("Eq", 1242)), "Equaler")), 0, (("runtime/refl.ml", 27, 335, 335), ("runtime/refl.ml", 27, 335, 362), 0), Tag1 ("Refl", 84)), 0, 0); Tag3 (("Equalers", 1244), 1, (Tag3 (Tag1 ((("Eq", 1242)), "Equalers")), 0, (("runtime/refl.ml", 29, 364, 364), ("runtime/refl.ml", 29, 364, 393), 0), Tag1 ("Refl", 85)), 0, 0); (("equal_poly", 1245), ((Tag1 (Tag1 ("hook"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("Eq", 1242)), "hook"), 0, (0)), 100000000, 0, -361)], (0)), 100000000, 0, -360), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [((0), 100000000, 0, -344); ((0), 100000000, 0, -351); ((0), 100000000, 0, -347); ((0), 100000000, 0, -352); (Tag8 (([("Absent", Tag1 (1, 0, 0, (1))); ("Array", (0)); ("Attributes", (0)); ("Bool", (0)); ("Bytes", (0)); ("Char", (0)); ("Constr", (0)); ("Exists", (0)); ("Float", (0)); ("GADT", Tag1 (1, 0, 0, (1))); ("Int", (0)); ("Int32", (0)); ("Int64", (0)); ("Lazy", (0)); ("MapOpaque", (0)); ("Name", Tag1 (1, 0, 0, (1))); ("Nativeint", (0)); ("Object", (0)); ("Opaque", (0)); ("Record", (0)); ("String", (0)); ("Tuple", (0)); ("Unit", Tag1 (1, 0, 0, (1))); ("Variable", (0)); ("Variant", (0))], ((0), 100000000, 0, -354), 1, 0, ([Tag1 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "Kinds"), "comparable")]))), 100000000, 0, -353); ((0), 100000000, 0, -355); ((0), 100000000, 0, -356); ((0), 100000000, 0, -349); ((0), 100000000, 0, -359)], (0)), 100000000, 0, -358), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [((0), 100000000, 0, -345); ((0), 100000000, 0, -351); ((0), 100000000, 0, -348); ((0), 100000000, 0, -352); (Tag8 (([("Absent", Tag1 (1, 0, 0, (1))); ("Array", (0)); ("Attributes", (0)); ("Bool", (0)); ("Bytes", (0)); ("Char", (0)); ("Constr", (0)); ("Exists", (0)); ("Float", (0)); ("GADT", Tag1 (1, 0, 0, (1))); ("Int", (0)); ("Int32", (0)); ("Int64", (0)); ("Lazy", (0)); ("MapOpaque", (0)); ("Name", Tag1 (1, 0, 0, (1))); ("Nativeint", (0)); ("Object", (0)); ("Opaque", (0)); ("Record", (0)); ("String", (0)); ("Tuple", (0)); ("Unit", Tag1 (1, 0, 0, (1))); ("Variable", (0)); ("Variant", (0))], ((0), 100000000, 0, -354), 1, 0, ([Tag1 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "Kinds"), "comparable")]))), 100000000, 0, -353); ((0), 100000000, 0, -355); ((0), 100000000, 0, -356); ((0), 100000000, 0, -349); ((0), 100000000, 0, -357)], (0)), 100000000, 0, -350), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((("Eq", 1242)), "Equalers"), "t"), [((0), 100000000, 0, -347); ((0), 100000000, 0, -348); ((0), 100000000, 0, -349)], (0)), 100000000, 0, -346), (Tag3 (Tag1 (Tag1 ((("Eq", 1242)), "Equaler"), "t"), [((0), 100000000, 0, -344); ((0), 100000000, 0, -345)], (0)), 100000000, 0, -343), 0), 100000000, 0, -342), 0), 100000000, 0, -341), 0), 100000000, 0, -340), 0), 100000000, 0, -339), 0, (("runtime/refl.ml", 31, 395, 399), ("runtime/refl.ml", 31, 395, 409), 0), 0, Tag1 ("Refl", 86)), 0); (("equal", 1246), ((Tag1 (Tag1 ("hook"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("Eq", 1242)), "hook"), 0, (0)), 100000000, 0, -338)], (0)), 100000000, 0, -337), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [((0), 100000000, 0, -325); ((0), 100000000, 0, -330); ((0), 100000000, 0, -327); ((0), 100000000, 0, -331); (Tag8 (([("Absent", Tag1 (1, 0, 0, (1))); ("Array", (0)); ("Attributes", (0)); ("Bool", (0)); ("Bytes", (0)); ("Char", (0)); ("Constr", (0)); ("Exists", (0)); ("Float", (0)); ("GADT", Tag1 (1, 0, 0, (1))); ("Int", (0)); ("Int32", (0)); ("Int64", (0)); ("Lazy", (0)); ("MapOpaque", (0)); ("Name", Tag1 (1, 0, 0, (1))); ("Nativeint", (0)); ("Object", (0)); ("Opaque", (0)); ("Record", (0)); ("String", (0)); ("Tuple", (0)); ("Unit", Tag1 (1, 0, 0, (1))); ("Variable", (0)); ("Variant", (0))], ((0), 100000000, 0, -333), 1, 0, ([Tag1 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "Kinds"), "comparable")]))), 100000000, 0, -332); ((0), 100000000, 0, -334); ((0), 100000000, 0, -335); ((0), 100000000, 0, -328); ((0), 100000000, 0, -336)], (0)), 100000000, 0, -329), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((("Eq", 1242)), "Equalers"), "t"), [((0), 100000000, 0, -327); ((0), 100000000, 0, -327); ((0), 100000000, 0, -328)], (0)), 100000000, 0, -326), (Tag3 (Tag1 (Tag1 ((("Eq", 1242)), "Equaler"), "t"), [((0), 100000000, 0, -325); ((0), 100000000, 0, -325)], (0)), 100000000, 0, -324), 0), 100000000, 0, -323), 0), 100000000, 0, -322), 0), 100000000, 0, -321), 0, (("runtime/refl.ml", 33, 427, 431), ("runtime/refl.ml", 33, 427, 436), 0), 0, Tag1 ("Refl", 88)), 0); Tag3 (("Hash", 1247), 1, (Tag3 (Tag1 ((Tag2 ("Refl__")), "Hash")), 0, (("runtime/refl.ml", 35, 449, 449), ("runtime/refl.ml", 35, 449, 467), 0), Tag1 ("Refl", 89)), 0, 0); (("hash", 1248), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [((0), 100000000, 0, -309); ((0), 100000000, 0, -314); ((0), 100000000, 0, -311); ((0), 100000000, 0, -315); (Tag8 (([("Absent", Tag1 (1, 0, 0, (1))); ("Array", (0)); ("Attributes", (0)); ("Bool", Tag1 (1, 0, 0, (1))); ("Bytes", Tag1 (1, 0, 0, (1))); ("Char", Tag1 (1, 0, 0, (1))); ("Constr", (0)); ("Exists", (0)); ("Float", Tag1 (1, 0, 0, (1))); ("GADT", Tag1 (1, 0, 0, (1))); ("Int", Tag1 (1, 0, 0, (1))); ("Int32", Tag1 (1, 0, 0, (1))); ("Int64", Tag1 (1, 0, 0, (1))); ("Lazy", (0)); ("MapOpaque", (0)); ("Name", Tag1 (1, 0, 0, (1))); ("Nativeint", Tag1 (1, 0, 0, (1))); ("Object", (0)); ("Opaque", (0)); ("Record", (0)); ("String", Tag1 (1, 0, 0, (1))); ("Tuple", (0)); ("Unit", Tag1 (1, 0, 0, (1))); ("Variable", (0)); ("Variant", (0))], ((0), 100000000, 0, -317), 1, 0, ([Tag1 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "Kinds"), "comparable")]))), 100000000, 0, -316); ((0), 100000000, 0, -318); ((0), 100000000, 0, -319); ((0), 100000000, 0, -312); ((0), 100000000, 0, -320)], (0)), 100000000, 0, -313), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((("Hash", 1247)), "Hashers"), "t"), [((0), 100000000, 0, -311); ((0), 100000000, 0, -312)], (0)), 100000000, 0, -310), (Tag3 (Tag1 (Tag1 ((("Hash", 1247)), "Hasher"), "t"), [((0), 100000000, 0, -309)], (0)), 100000000, 0, -308), 0), 100000000, 0, -307), 0), 100000000, 0, -306), 0, (("runtime/refl.ml", 37, 469, 473), ("runtime/refl.ml", 37, 469, 477), 0), 0, Tag1 ("Refl", 90)), 0); Tag2 (("Attribute_value", 1249), (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "typed_attribute_kind"), [((("a")), 100000000, 0, -303); ((("arity")), 100000000, 0, -304); ((("b")), 100000000, 0, -305)], (0), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "typed_attribute_kind"), [((("a")), 100000000, 0, -300); ((("arity")), 100000000, 0, -301); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -302)], (0)), 100000000, 0, -299)), 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Refl__Enum", 37)), 0, 0); (("lift_zero", 1250), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "binary_choice"), [((("cases")), 100000000, 0, -290)], (0)), 100000000, 0, -296); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -298)], (0)), 100000000, 0, -297)]), 100000000, 0, -295)], (0)), 100000000, 0, -294), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "binary_choice"), [(Tag2 ([((("cases")), 100000000, 0, -290); ((0), 100000000, 0, -291)]), 100000000, 0, -289)], (0)), 100000000, 0, -288); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -293)], (0)), 100000000, 0, -292)]), 100000000, 0, -287)], (0)), 100000000, 0, -286), 0), 100000000, 0, -285), 0, (("runtime/enum.ml", 8, 131, 139), ("runtime/enum.ml", 8, 131, 148), 0), 0, Tag1 ("Refl__Enum", 38)), 0); (("lift_one", 1251), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "binary_choice"), [((("cases")), 100000000, 0, -277)], (0)), 100000000, 0, -282); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -284)], (0)), 100000000, 0, -283)]), 100000000, 0, -281)], (0)), 100000000, 0, -280), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "binary_choice"), [(Tag2 ([((0), 100000000, 0, -276); ((("cases")), 100000000, 0, -277)]), 100000000, 0, -275)], (0)), 100000000, 0, -274); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -279)], (0)), 100000000, 0, -278)]), 100000000, 0, -273)], (0)), 100000000, 0, -272), 0), 100000000, 0, -271), 0, (("runtime/enum.ml", 14, 347, 355), ("runtime/enum.ml", 14, 347, 363), 0), 0, Tag1 ("Refl__Enum", 78)), 0); (("merge", 1252), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -270)], (0)), 100000000, 0, -269), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -270)], (0)), 100000000, 0, -269), (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -270)], (0)), 100000000, 0, -269), 0), 100000000, 0, -268), 0), 100000000, 0, -267), 0, (("runtime/enum.ml", 20, 560, 568), ("runtime/enum.ml", 20, 560, 573), 0), 0, Tag1 ("Refl__Enum", 83)), 0); (("constructor_assoc", 1253), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "constructors"), [((("cases")), 100000000, 0, -255); ((("structures")), 100000000, 0, -259); ((("arity")), 100000000, 0, -260); ((("rec_group")), 100000000, 0, -261); ((("kinds")), 100000000, 0, -262); ((("positive")), 100000000, 0, -263); ((("negative")), 100000000, 0, -264); ((("direct")), 100000000, 0, -265); ((("gadt")), 100000000, 0, -266)], (0)), 100000000, 0, -258), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "binary_choice"), [((("cases")), 100000000, 0, -255)], (0)), 100000000, 0, -254); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -257)], (0)), 100000000, 0, -256)]), 100000000, 0, -253)], (0)), 100000000, 0, -252), 0), 100000000, 0, -251), 0, (("runtime/enum.ml", 26, 694, 702), ("runtime/enum.ml", 26, 694, 719), 0), 0, Tag1 ("Refl__Enum", 91)), 0); (("constructor_assoc_with_default_values", 1254), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "constructors"), [((0), 100000000, 0, -240); ((0), 100000000, 0, -243); ((0), 100000000, 0, -244); ((0), 100000000, 0, -245); ((0), 100000000, 0, -246); ((0), 100000000, 0, -247); ((0), 100000000, 0, -248); ((0), 100000000, 0, -249); ((0), 100000000, 0, -250)], (0)), 100000000, 0, -242), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "binary_choice"), [((0), 100000000, 0, -240)], (0)), 100000000, 0, -239); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -241)]), 100000000, 0, -238)], (0)), 100000000, 0, -237), 0), 100000000, 0, -236), 0, (("runtime/enum.ml", 44, 1295, 1299), ("runtime/enum.ml", 44, 1295, 1336), 0), 0, Tag1 ("Refl__Enum", 121)), 0); Tag1 (("enum_structure", 1255), ([((("a")), 100000000, 0, -234); ((("b")), 100000000, 0, -235)], 2, 0, 1, ((Tag8 (([("RecGroup", (((Tag2 ([(Tag8 (([("Name", (((Tag8 (([("Constr", ((((("a")), 100000000, 0, -234))))], (0, 100000000, 0, -233), 1, 0, 0)), 100000000, 0, -232))))], (0, 100000000, 0, -231), 1, 0, 0)), 100000000, 0, -230); ((("b")), 100000000, 0, -235)]), 100000000, 0, -229))))], (0, 100000000, 0, -228), 1, 0, 0)), 100000000, 0, -227)), [25; 25], [0; 0], 0, 0, (("runtime/enum.ml", 67, 2157, 2157), ("runtime/enum.ml", 68, 2188, 2238), 0), 0, 0, 0, Tag1 ("Refl__Enum", 387)), 1, 0); (("min", 1256), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [((("a")), 100000000, 0, -215); (Tag3 ((("enum_structure", 1255)), [((("structures")), 100000000, 0, -217); ((0), 100000000, 0, -218)], (0)), 100000000, 0, -216); ((("arity")), 100000000, 0, -219); ((("rec_group")), 100000000, 0, -220); (Tag8 (([("Constr", (0))], ((0), 100000000, 0, -222), 0, 0, 0)), 100000000, 0, -221); ((("positive")), 100000000, 0, -223); ((("negative")), 100000000, 0, -224); ((("direct")), 100000000, 0, -225); ((("gadt")), 100000000, 0, -226)], (0)), 100000000, 0, -214), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -213), 0), 100000000, 0, -212), 0, (("runtime/enum.ml", 70, 2240, 2244), ("runtime/enum.ml", 70, 2240, 2247), 0), 0, Tag1 ("Refl__Enum", 388)), 0); (("max", 1257), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [((("a")), 100000000, 0, -200); (Tag3 ((("enum_structure", 1255)), [((("structures")), 100000000, 0, -202); ((0), 100000000, 0, -203)], (0)), 100000000, 0, -201); ((("arity")), 100000000, 0, -204); ((("rec_group")), 100000000, 0, -205); (Tag8 (([("Constr", (0))], ((0), 100000000, 0, -207), 0, 0, 0)), 100000000, 0, -206); ((("positive")), 100000000, 0, -208); ((("negative")), 100000000, 0, -209); ((("direct")), 100000000, 0, -210); ((("gadt")), 100000000, 0, -211)], (0)), 100000000, 0, -199), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -198), 0), 100000000, 0, -197), 0, (("runtime/enum.ml", 78, 2431, 2435), ("runtime/enum.ml", 78, 2431, 2438), 0), 0, Tag1 ("Refl__Enum", 391)), 0); (("check_choice", 1258), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "binary_choice"), [((("cases")), 100000000, 0, -194)], (0)), 100000000, 0, -196), (Tag1 (0, (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "binary_choice"), [((("cases")), 100000000, 0, -194)], (0)), 100000000, 0, -193); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -195)]), 100000000, 0, -192), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -191), 0), 100000000, 0, -190), 0), 100000000, 0, -189), 0, (("runtime/enum.ml", 86, 2622, 2626), ("runtime/enum.ml", 86, 2622, 2638), 0), 0, Tag1 ("Refl__Enum", 394)), 0); (("check_value", 1259), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -188), (Tag1 (0, (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "binary_choice"), [((("cases")), 100000000, 0, -186)], (0)), 100000000, 0, -185); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -187)]), 100000000, 0, -184), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -183), 0), 100000000, 0, -182), 0), 100000000, 0, -181), 0, (("runtime/enum.ml", 90, 2747, 2751), ("runtime/enum.ml", 90, 2747, 2762), 0), 0, Tag1 ("Refl__Enum", 397)), 0); (("to_int_opt", 1260), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [((("a")), 100000000, 0, -168); (Tag3 ((("enum_structure", 1255)), [((("structures")), 100000000, 0, -171); ((0), 100000000, 0, -172)], (0)), 100000000, 0, -170); ((("arity")), 100000000, 0, -173); ((("rec_group")), 100000000, 0, -174); (Tag8 (([("Constr", (0))], ((0), 100000000, 0, -176), 0, 0, 0)), 100000000, 0, -175); ((("positive")), 100000000, 0, -177); ((("negative")), 100000000, 0, -178); ((("direct")), 100000000, 0, -179); ((("gadt")), 100000000, 0, -180)], (0)), 100000000, 0, -169), (Tag1 (0, ((("a")), 100000000, 0, -168), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -167)], (0)), 100000000, 0, -166), 0), 100000000, 0, -165), 0), 100000000, 0, -164), 0, (("runtime/enum.ml", 94, 2830, 2834), ("runtime/enum.ml", 94, 2830, 2844), 0), 0, Tag1 ("Refl__Enum", 400)), 0); (("of_int_opt", 1261), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [((("a")), 100000000, 0, -150); (Tag3 ((("enum_structure", 1255)), [((("structures")), 100000000, 0, -154); ((0), 100000000, 0, -155)], (0)), 100000000, 0, -153); ((("arity")), 100000000, 0, -156); ((("rec_group")), 100000000, 0, -157); (Tag8 (([("Constr", (0))], ((0), 100000000, 0, -159), 0, 0, 0)), 100000000, 0, -158); ((("positive")), 100000000, 0, -160); ((("negative")), 100000000, 0, -161); ((("direct")), 100000000, 0, -162); ((("gadt")), 100000000, 0, -163)], (0)), 100000000, 0, -152), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -151), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -150)], (0)), 100000000, 0, -149), 0), 100000000, 0, -148), 0), 100000000, 0, -147), 0, (("runtime/enum.ml", 107, 3284, 3288), ("runtime/enum.ml", 107, 3284, 3298), 0), 0, Tag1 ("Refl__Enum", 652)), 0); (("to_string", 1262), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [((("a")), 100000000, 0, -134); (Tag3 ((("enum_structure", 1255)), [((("structures")), 100000000, 0, -137); ((0), 100000000, 0, -138)], (0)), 100000000, 0, -136); ((("arity")), 100000000, 0, -139); ((("rec_group")), 100000000, 0, -140); (Tag8 (([("Constr", (0))], ((0), 100000000, 0, -142), 0, 0, 0)), 100000000, 0, -141); ((("positive")), 100000000, 0, -143); ((("negative")), 100000000, 0, -144); ((("direct")), 100000000, 0, -145); ((("gadt")), 100000000, 0, -146)], (0)), 100000000, 0, -135), (Tag1 (0, ((("a")), 100000000, 0, -134), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -133), 0), 100000000, 0, -132), 0), 100000000, 0, -131), 0, (("runtime/enum.ml", 120, 3759, 3763), ("runtime/enum.ml", 120, 3759, 3772), 0), 0, Tag1 ("Refl__Enum", 905)), 0); (("of_string_aux", 1263), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "constructors"), [((("cases")), 100000000, 0, -120); ((("structures")), 100000000, 0, -123); ((("arity")), 100000000, 0, -124); ((("rec_group")), 100000000, 0, -125); ((("kinds")), 100000000, 0, -126); ((("positive")), 100000000, 0, -127); ((("negative")), 100000000, 0, -128); ((("direct")), 100000000, 0, -129); ((("gadt")), 100000000, 0, -130)], (0)), 100000000, 0, -122), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -121), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "binary_choice"), [((("cases")), 100000000, 0, -120)], (0)), 100000000, 0, -119)], (0)), 100000000, 0, -118), 0), 100000000, 0, -117), 0), 100000000, 0, -116), 0, (("runtime/enum.ml", 133, 4172, 4180), ("runtime/enum.ml", 133, 4172, 4193), 0), 0, Tag1 ("Refl__Enum", 1175)), 0); (("of_string_opt", 1264), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [((("a")), 100000000, 0, -102); (Tag3 ((("enum_structure", 1255)), [((("structures")), 100000000, 0, -106); ((0), 100000000, 0, -107)], (0)), 100000000, 0, -105); ((("arity")), 100000000, 0, -108); ((("rec_group")), 100000000, 0, -109); (Tag8 (([("Constr", (0))], ((0), 100000000, 0, -111), 0, 0, 0)), 100000000, 0, -110); ((("positive")), 100000000, 0, -112); ((("negative")), 100000000, 0, -113); ((("direct")), 100000000, 0, -114); ((("gadt")), 100000000, 0, -115)], (0)), 100000000, 0, -104), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -103), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -102)], (0)), 100000000, 0, -101), 0), 100000000, 0, -100), 0), 100000000, 0, -99), 0, (("runtime/enum.ml", 154, 4841, 4845), ("runtime/enum.ml", 154, 4841, 4858), 0), 0, Tag1 ("Refl__Enum", 1208)), 0); Tag3 (("Iter", 1265), 0, (Tag3 (Tag1 ((Tag2 ("Refl__Iter")), "Iter")), 0, (("runtime/iter.ml", 5, 23, 23), ("runtime/iter.ml", 7, 69, 72), 0), Tag1 ("Refl__Iter", 38)), 0, 0); Tag3 (("Iters", 1266), 0, (Tag3 (Tag1 ((Tag2 ("Refl__Iter")), "Iters")), 0, (("runtime/iter.ml", 9, 74, 74), ("runtime/iter.ml", 9, 74, 102), 0), Tag1 ("Refl__Iter", 76)), 0, 0); (("iter", 1267), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [((("a")), 100000000, 0, -87); ((("structure")), 100000000, 0, -92); ((("arity")), 100000000, 0, -89); ((("rec_group")), 100000000, 0, -93); (Tag8 (([("Array", (0)); ("Arrow", (0)); ("Attributes", (0)); ("Constr", (0)); ("Exists", (0)); ("Lazy", (0)); ("MapOpaque", (0)); ("Object", (0)); ("Opaque", (0)); ("Poly", (0)); ("Record", (0)); ("Tuple", (0)); ("Variable", (0)); ("Variant", (0))], ((0), 100000000, 0, -95), 0, 0, 0)), 100000000, 0, -94); ((("positive")), 100000000, 0, -96); ((("negative")), 100000000, 0, -97); ((("direct")), 100000000, 0, -90); ((("gadt")), 100000000, 0, -98)], (0)), 100000000, 0, -91), (Tag1 (0, (Tag3 (Tag1 ((("Iters", 1266)), "t"), [((("arity")), 100000000, 0, -89); ((("direct")), 100000000, 0, -90)], (0)), 100000000, 0, -88), (Tag3 (Tag1 ((("Iter", 1265)), "t"), [((("a")), 100000000, 0, -87)], (0)), 100000000, 0, -86), 0), 100000000, 0, -85), 0), 100000000, 0, -84), 0, (("runtime/iter.ml", 11, 104, 112), ("runtime/iter.ml", 11, 104, 116), 0), 0, Tag1 ("Refl__Iter", 78)), 0); Tag3 (("Fold", 1268), 0, (Tag3 (Tag1 ((Tag2 ("Refl__Fold")), "Fold")), 0, (("runtime/fold.ml", 5, 23, 23), ("runtime/fold.ml", 7, 79, 82), 0), Tag1 ("Refl__Fold", 38)), 0, 0); Tag3 (("Folds", 1269), 0, (Tag3 (Tag1 ((Tag2 ("Refl__Fold")), "Folds")), 0, (("runtime/fold.ml", 9, 84, 84), ("runtime/fold.ml", 9, 84, 125), 0), Tag1 ("Refl__Fold", 41)), 0, 0); (("fold", 1270), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [((("a")), 100000000, 0, -71); ((("structure")), 100000000, 0, -77); ((("arity")), 100000000, 0, -74); ((("rec_group")), 100000000, 0, -78); (Tag8 (([("Array", (0)); ("Arrow", (0)); ("Attributes", (0)); ("Constr", (0)); ("Exists", (0)); ("Lazy", (0)); ("MapOpaque", (0)); ("Object", (0)); ("Opaque", (0)); ("Poly", (0)); ("Record", (0)); ("Tuple", (0)); ("Variable", (0)); ("Variant", (0))], ((0), 100000000, 0, -80), 0, 0, 0)), 100000000, 0, -79); ((("positive")), 100000000, 0, -81); ((("negative")), 100000000, 0, -82); ((("direct")), 100000000, 0, -75); ((("gadt")), 100000000, 0, -83)], (0)), 100000000, 0, -76), (Tag1 (0, (Tag3 (Tag1 ((("Folds", 1269)), "t"), [((("arity")), 100000000, 0, -74); ((("acc")), 100000000, 0, -72); ((("direct")), 100000000, 0, -75)], (0)), 100000000, 0, -73), (Tag3 (Tag1 ((("Fold", 1268)), "t"), [((("a")), 100000000, 0, -71); ((("acc")), 100000000, 0, -72)], (0)), 100000000, 0, -70), 0), 100000000, 0, -69), 0), 100000000, 0, -68), 0, (("runtime/fold.ml", 11, 127, 131), ("runtime/fold.ml", 11, 127, 135), 0), 0, Tag1 ("Refl__Fold", 42)), 0); Tag3 (("StringMap", 1271), 0, (Tag3 (Tag1 ((Tag2 ("Refl__Make")), "StringMap")), 0, (("runtime/make.ml", 3, 11, 11), ("runtime/make.ml", 3, 11, 57), 0), Tag1 ("Refl__Make", 35)), 0, 0); Tag2 (("Attribute_default", 1272), (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "typed_attribute_kind"), [((("a")), 100000000, 0, -65); ((("arity")), 100000000, 0, -66); ((("b")), 100000000, 0, -67)], (0), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "typed_attribute_kind"), [((("a")), 100000000, 0, -63); ((("arity")), 100000000, 0, -64); ((("a")), 100000000, 0, -63)], (0)), 100000000, 0, -62)), 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Refl__Make", 36)), 0, 0); Tag1 (("field", 1273), ([((("arity")), 100000000, 0, -44); ((("rec_group")), 100000000, 0, -45); ((("kinds")), 100000000, 0, -46); ((("positive")), 100000000, 0, -47); ((("negative")), 100000000, 0, -48); ((("direct")), 100000000, 0, -49); ((("gadt")), 100000000, 0, -50)], 7, Tag1 ([(("F", 776), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [((("a")), 100000000, 0, -60); ((("structure")), 100000000, 0, -61); ((("arity")), 100000000, 0, -52); ((("rec_group")), 100000000, 0, -53); ((("kinds")), 100000000, 0, -54); ((("positive")), 100000000, 0, -55); ((("negative")), 100000000, 0, -56); ((("direct")), 100000000, 0, -57); ((("gadt")), 100000000, 0, -58)], (0)), 100000000, 0, -59); ((("a")), 100000000, 0, -60)]), ((Tag3 ((("field", 1273)), [((("arity")), 100000000, 0, -52); ((("rec_group")), 100000000, 0, -53); ((("kinds")), 100000000, 0, -54); ((("positive")), 100000000, 0, -55); ((("negative")), 100000000, 0, -56); ((("direct")), 100000000, 0, -57); ((("gadt")), 100000000, 0, -58)], (0)), 100000000, 0, -51)), (("runtime/make.ml", 9, 248, 250), ("runtime/make.ml", 12, 364, 442), 0), 0, Tag1 ("Refl__Make", 38))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Refl__Make")), "field"), [((("arity")), 100000000, 0, -44); ((("rec_group")), 100000000, 0, -45); ((("kinds")), 100000000, 0, -46); ((("positive")), 100000000, 0, -47); ((("negative")), 100000000, 0, -48); ((("direct")), 100000000, 0, -49); ((("gadt")), 100000000, 0, -50)], (0)), 100000000, 0, -43)), [63; 15; 63; 63; 63; 63; 15], [0; 0; 0; 0; 0; 0; 0], 0, 0, (("runtime/make.ml", 8, 168, 168), ("runtime/make.ml", 12, 364, 442), 0), 0, 0, 0, Tag1 ("Refl__Make", 37)), 1, 0); (("make_fields", 1274), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "record_structure"), [((("types")), 100000000, 0, -30); ((("structures")), 100000000, 0, -42); ((("arity")), 100000000, 0, -33); ((("rec_group")), 100000000, 0, -34); (Tag8 (([("Poly", (0))], ((("kinds")), 100000000, 0, -36), 0, 0, 0)), 100000000, 0, -35); ((("positive")), 100000000, 0, -37); ((("negative")), 100000000, 0, -38); ((("direct")), 100000000, 0, -39); ((("gadt")), 100000000, 0, -40)], (0)), 100000000, 0, -41), (Tag1 (0, (Tag3 (Tag1 ((("StringMap", 1271)), "t"), [(Tag3 ((("field", 1273)), [((("arity")), 100000000, 0, -33); ((("rec_group")), 100000000, 0, -34); (Tag8 (([("Poly", (0))], ((("kinds")), 100000000, 0, -36), 0, 0, 0)), 100000000, 0, -35); ((("positive")), 100000000, 0, -37); ((("negative")), 100000000, 0, -38); ((("direct")), 100000000, 0, -39); ((("gadt")), 100000000, 0, -40)], (0)), 100000000, 0, -32)], (0)), 100000000, 0, -31), ((("types")), 100000000, 0, -30), 0), 100000000, 0, -29), 0), 100000000, 0, -28), 0, (("runtime/make.ml", 14, 444, 452), ("runtime/make.ml", 14, 444, 463), 0), 0, Tag1 ("Refl__Make", 74)), 0); Tag1 (("record_type_structure", 1275), ([((("a")), 100000000, 0, -26); ((("b")), 100000000, 0, -27)], 2, 0, 1, ((Tag8 (([("RecGroup", (((Tag2 ([(Tag8 (([("Name", (((Tag8 (([("Record", ((((("a")), 100000000, 0, -26))))], (0, 100000000, 0, -25), 1, 0, 0)), 100000000, 0, -24))))], (0, 100000000, 0, -23), 1, 0, 0)), 100000000, 0, -22); ((("b")), 100000000, 0, -27)]), 100000000, 0, -21))))], (0, 100000000, 0, -20), 1, 0, 0)), 100000000, 0, -19)), [25; 25], [0; 0], 0, 0, (("runtime/make.ml", 46, 1598, 1598), ("runtime/make.ml", 47, 1636, 1686), 0), 0, 0, 0, Tag1 ("Refl__Make", 114)), 1, 0); (("make", 1276), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [((("a")), 100000000, 0, -4); (Tag3 ((("record_type_structure", 1275)), [((("structures")), 100000000, 0, -17); ((("new_rec_group")), 100000000, 0, -8)], (0)), 100000000, 0, -16); ((("arity")), 100000000, 0, -7); ((("rec_group")), 100000000, 0, -18); (Tag8 (([("Poly", (0)); ("Record", (0))], ((0), 100000000, 0, -10), 0, 0, 0)), 100000000, 0, -9); ((("positive")), 100000000, 0, -11); ((("negative")), 100000000, 0, -12); ((("direct")), 100000000, 0, -13); ((("gadt")), 100000000, 0, -14)], (0)), 100000000, 0, -15), (Tag1 (0, (Tag3 (Tag1 ((("StringMap", 1271)), "t"), [(Tag3 ((("field", 1273)), [((("arity")), 100000000, 0, -7); ((("new_rec_group")), 100000000, 0, -8); (Tag8 (([("Poly", (0)); ("Record", (0))], ((0), 100000000, 0, -10), 0, 0, 0)), 100000000, 0, -9); ((("positive")), 100000000, 0, -11); ((("negative")), 100000000, 0, -12); ((("direct")), 100000000, 0, -13); ((("gadt")), 100000000, 0, -14)], (0)), 100000000, 0, -6)], (0)), 100000000, 0, -5), ((("a")), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("runtime/make.ml", 49, 1688, 1692), ("runtime/make.ml", 49, 1688, 1696), 0), 0, Tag1 ("Refl__Make", 115)), 0); Tag3 (("Lift", 1277), 1, (Tag3 (Tag1 ((Tag2 ("Refl__")), "Lift")), 0, (("runtime/refl.ml", 47, 547, 547), ("runtime/refl.ml", 47, 547, 565), 0), Tag1 ("Refl", 92)), 0, 0); Tag3 (("Visit", 1278), 1, (Tag3 (Tag1 ((Tag2 ("Refl__")), "Visit")), 0, (("runtime/refl.ml", 49, 567, 567), ("runtime/refl.ml", 49, 567, 587), 0), Tag1 ("Refl", 93)), 0, 0); Tag3 (("Ocaml_attributes", 1279), 0, (Tag1 ([Tag2 (("Attribute_doc", 1280), ((("typed_attribute_kind", 1180)), [((("a")), 100000000, 0, -2081); ((("arity")), 100000000, 0, -2082); ((("b")), 100000000, 0, -2083)], (0), ((Tag3 ((("typed_attribute_kind", 1180)), [((("a")), 100000000, 0, -2078); ((("arity")), 100000000, 0, -2079); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -2080)], (0)), 100000000, 0, -2077)), 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Refl", 94)), 0, 0)]), 0, (("runtime/refl.ml", 51, 589, 589), ("runtime/refl.ml", 54, 734, 737), 0), Tag1 ("Refl", 95)), 0, 0)], "Refl", [("Refl", ("\146\215\248m\226\220\233\012b\170o\2229\137\195\214")); ("Traverse__Values", ("}\239\001\023\024&\227\167Sl\002\148\026\190\180\025")); ("Traverse__Modules", ("=\175q\026#\242\139\b\202\252\139\207\195\170\254\202")); ("Traverse__Interface", ("\252\146\219\195\199\167\234\143+\145l\200\254\244s}")); ("Traverse__", ("y\220\011\221C%Ob7%t,\252N21")); ("Traverse", ("\019\209\190\177II\1552 \b\174\006\b\1643\152")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Printf", ("\215<\139]\021\142\224E\245m\198qc(W\229")); ("Stdlib__Option", ("^R\130\196\247\161\173\178\160\143)K\129\026\142\183")); ("Stdlib__Oo", ("\171\243\248\026\217y\205\024\145\173k|\254x3\005")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Fun", ("\234t\181\000iQ\251,\b\020$\224\233\160\142\210")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Bytes", ("C\134\194)\175\222\137p\205\246\244\r\241\164P\209")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Stdcompat__stdlib_s", ("?\143\027\238\145\138\139e`\216P\248\156\178=\206")); ("Stdcompat__init", ("r\254q\255\217]\232\239'\192d\165\222\016\157\133")); ("Stdcompat", ("\139\1989\181:\137\230\132\240\223\206\210Y\135S\\")); ("Refl__Tools", ("i\215\207\166d\225\190DU\241\194\224\137P\158e")); ("Refl__Show", ("]\014\128\185\233\015\194\164\184d\213a\223\161\135\236")); ("Refl__Map", ("\149,\025\000h\234\180\228Q\001\018\"\230\151\018_")); ("Refl__Make", ("\210\182N\227\212\019\025\249\199\131\193\222s\1559\135")); ("Refl__Iter", ("\168\210%\235\198\014\174>\2052\235\199\165%\252\004")); ("Refl__Hash", ("\237\225\164E\019!w\167RGv\156\135\198\229g")); ("Refl__Fold", ("4\162(!\134\150\227x\133a\237\235f1\240\186")); ("Refl__Eq", ("\222\211E\155\148\201\223\216\130PZ\185\160HH\207")); ("Refl__Enum", ("\225G\183\154sJ\001`>\254\138gKXSb")); ("Refl__Desc", ("\221\150mt\149.2\132\189\244\007\164&\203\225\172")); ("Refl__Convert", ("\1441\157\139\143\018\003\200:\012kp\r\163\135\250")); ("Refl__Compare", ("\239\237\162\183\159\027\247~J\142\238\137um2\223")); ("Refl__", ("i\003\196\150\161\159\229g\157\181\149\015g%\221\240")); ("CamlinternalOO", ("\161\236\205-\150\171\185\243\146\139if:\146\170q")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

  end

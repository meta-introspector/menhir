type backend_type =
  Base__.Import0.Stdlib.Sys.backend_type =
    Native
  | Bytecode
  | Other of string
val backend_type : Base__.Import0.Stdlib.Sys.backend_type
val interactive : bool ref
val os_type : string
val unix : bool
val win32 : bool
val cygwin : bool
val word_size_in_bits : int
val int_size_in_bits : int
val big_endian : bool
val max_string_length : int
val max_array_length : int
val runtime_variant : unit -> string
val runtime_parameters : unit -> string
val argv : string array
val get_argv : unit -> string array
val ocaml_version : string
val enable_runtime_warnings : bool -> unit
val runtime_warnings_enabled : unit -> bool
val getenv_exn : string -> string
val getenv : string -> string option
external opaque_identity : 'a -> 'a = "%opaque"
external opaque_identity_global : 'a -> 'a = "%opaque"("DEBUG:rule", [Tag1 (("backend_type", 1363), (0, 0, Tag1 ([(("Native", 646), (0), 0, (("src/sys0.ml", 13, 670, 672), ("src/sys0.ml", 13, 670, 680), 0), 0, Tag1 ("Base__Sys0", 1)); (("Bytecode", 647), (0), 0, (("src/sys0.ml", 14, 681, 683), ("src/sys0.ml", 14, 681, 693), 0), 0, Tag1 ("Base__Sys0", 2)); (("Other", 648), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -45)]), 0, (("src/sys0.ml", 15, 694, 696), ("src/sys0.ml", 15, 694, 713), 0), 0, Tag1 ("Base__Sys0", 3))], 0), 1, ((Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Import0"), "Stdlib"), "Sys"), "backend_type"), 0, (0)), 100000000, 0, -44)), 0, 0, 0, 0, (("src/sys0.ml", 12, 624, 624), ("src/sys0.ml", 15, 694, 713), 0), 0, 0, 0, Tag1 ("Base__Sys0", 0)), 1, 0); (("backend_type", 1364), ((Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Import0"), "Stdlib"), "Sys"), "backend_type"), 0, (0)), 100000000, 0, -43), 0, (("src/sys0.ml", 17, 715, 719), ("src/sys0.ml", 17, 715, 731), 0), 0, Tag1 ("Base__Sys0", 4)), 0); (("interactive", 1365), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -42)], (0)), 100000000, 0, -41), 0, (("src/sys0.ml", 18, 758, 762), ("src/sys0.ml", 18, 758, 773), 0), 0, Tag1 ("Base__Sys0", 5)), 0); (("os_type", 1366), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -40), 0, (("src/sys0.ml", 19, 799, 803), ("src/sys0.ml", 19, 799, 810), 0), 0, Tag1 ("Base__Sys0", 6)), 0); (("unix", 1367), ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -39), 0, (("src/sys0.ml", 20, 832, 836), ("src/sys0.ml", 20, 832, 840), 0), 0, Tag1 ("Base__Sys0", 7)), 0); (("win32", 1368), ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -38), 0, (("src/sys0.ml", 21, 859, 863), ("src/sys0.ml", 21, 859, 868), 0), 0, Tag1 ("Base__Sys0", 8)), 0); (("cygwin", 1369), ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -37), 0, (("src/sys0.ml", 22, 888, 892), ("src/sys0.ml", 22, 888, 898), 0), 0, Tag1 ("Base__Sys0", 9)), 0); (("word_size_in_bits", 1370), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -36), 0, (("src/sys0.ml", 23, 919, 923), ("src/sys0.ml", 23, 919, 940), 0), 0, Tag1 ("Base__Sys0", 10)), 0); (("int_size_in_bits", 1371), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -35), 0, (("src/sys0.ml", 24, 964, 968), ("src/sys0.ml", 24, 964, 984), 0), 0, Tag1 ("Base__Sys0", 11)), 0); (("big_endian", 1372), ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -34), 0, (("src/sys0.ml", 25, 1007, 1011), ("src/sys0.ml", 25, 1007, 1021), 0), 0, Tag1 ("Base__Sys0", 12)), 0); (("max_string_length", 1373), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -33), 0, (("src/sys0.ml", 26, 1046, 1050), ("src/sys0.ml", 26, 1046, 1067), 0), 0, Tag1 ("Base__Sys0", 13)), 0); (("max_array_length", 1374), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -32), 0, (("src/sys0.ml", 27, 1099, 1103), ("src/sys0.ml", 27, 1099, 1119), 0), 0, Tag1 ("Base__Sys0", 14)), 0); (("runtime_variant", 1375), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -31), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -30), 0), 100000000, 0, -29), 0, (("src/sys0.ml", 28, 1150, 1154), ("src/sys0.ml", 28, 1150, 1169), 0), 0, Tag1 ("Base__Sys0", 15)), 0); (("runtime_parameters", 1376), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -28), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -27), 0), 100000000, 0, -26), 0, (("src/sys0.ml", 29, 1199, 1203), ("src/sys0.ml", 29, 1199, 1221), 0), 0, Tag1 ("Base__Sys0", 16)), 0); (("argv", 1377), ((Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -25)], (0)), 100000000, 0, -24), 0, (("src/sys0.ml", 30, 1254, 1258), ("src/sys0.ml", 30, 1254, 1262), 0), 0, Tag1 ("Base__Sys0", 17)), 0); (("get_argv", 1378), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -23), (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -22)], (0)), 100000000, 0, -21), 0), 100000000, 0, -20), 0, (("src/sys0.ml", 31, 1281, 1285), ("src/sys0.ml", 31, 1281, 1293), 0), 0, Tag1 ("Base__Sys0", 18)), 0); (("ocaml_version", 1379), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -19), 0, (("src/sys0.ml", 32, 1315, 1319), ("src/sys0.ml", 32, 1315, 1332), 0), 0, Tag1 ("Base__Sys0", 19)), 0); (("enable_runtime_warnings", 1380), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -18), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("src/sys0.ml", 33, 1360, 1364), ("src/sys0.ml", 33, 1360, 1387), 0), 0, Tag1 ("Base__Sys0", 20)), 0); (("runtime_warnings_enabled", 1381), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -15), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -14), 0), 100000000, 0, -13), 0, (("src/sys0.ml", 34, 1425, 1429), ("src/sys0.ml", 34, 1425, 1453), 0), 0, Tag1 ("Base__Sys0", 21)), 0); (("getenv_exn", 1382), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -11), 0), 100000000, 0, -10), 0, (("src/sys0.ml", 36, 1493, 1497), ("src/sys0.ml", 36, 1493, 1507), 0), 0, Tag1 ("Base__Sys0", 22)), 0); (("getenv", 1383), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -9), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -8)], (0)), 100000000, 0, -7), 0), 100000000, 0, -6), 0, (("src/sys0.ml", 42, 1656, 1660), ("src/sys0.ml", 42, 1656, 1666), 0), 0, Tag1 ("Base__Sys0", 24)), 0); (("opaque_identity", 1384), ((Tag1 (0, ((("a")), 100000000, 0, -5), ((("a")), 100000000, 0, -5), 0), 100000000, 0, -4), (("%opaque", 1, 1, "", [0], 0)), (("src/sys0.ml", 48, 1767, 1767), ("src/sys0.ml", 48, 1767, 1842), 0), 0, Tag1 ("Base__Sys0", 27)), 0); (("opaque_identity_global", 1385), ((Tag1 (0, ((("a")), 100000000, 0, -3), ((("a")), 100000000, 0, -3), 0), 100000000, 0, -2), (("%opaque", 1, 1, "", [0], 0)), (("src/sys0.ml", 49, 1843, 1843), ("src/sys0.ml", 49, 1843, 1897), 0), 0, Tag1 ("Base__Sys0", 28)), 0); Tag2 (("Break", 1386), ((Tag3 ("exn", 7)), 0, (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Base__Sys0", 29)), 2, 0)], "Base__Sys0", [("Base__Sys0", ("\206z\231\154s\\\136\2364\131\005\014\031\152m3")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__StdLabels", (".\193\n\229\139\017\212C-ZA\\kz-\128")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__MoreLabels", ("\248\232\248\254`<\230\241\161U\193U\1466J\238")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shadow_stdlib", ("\219zi\164\203\158e)\232\221\196\168\138x\142\018")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Base__Printf", ("\000\196c,\214\127\226\174\220\190\253z!\242\028\250")); ("Base__Poly0", ("\230;\143\234\255.H\132KOe7\155\\\023f")); ("Base__Import0", ("\156\129U\197Y[\\\153\017Ho\203\173\204\220\020")); ("Base__Bool0", ("\177f\254p\023\143&\239\020\136\206\242~\018F\251")); ("Base__", ("p\252\007\139\128\163W\025+\0225\001\246|P\158"))], [(0)])

exception Break

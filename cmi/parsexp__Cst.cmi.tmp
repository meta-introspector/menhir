type t =
    Atom of { loc : Parsexp__.Positions.range; atom : string;
      unescaped : string option;
    }
  | List of { loc : Parsexp__.Positions.range; elements : t_or_comment list;
    }
and t_or_comment = Sexp of t | Comment of comment
and comment =
    Plain_comment of { loc : Parsexp__.Positions.range; comment : string; }
  | Sexp_comment of { hash_semi_pos : Parsexp__.Positions.pos;
      comments : comment list; sexp : t;
    }
val sexp_of_t : t -> Sexplib0.Sexp.t
val sexp_of_t_or_comment : t_or_comment -> Sexplib0.Sexp.t
val sexp_of_comment : comment -> Sexplib0.Sexp.t
val compare : t -> t -> int
val compare_t_or_comment : t_or_comment -> t_or_comment -> int
val compare_comment : comment -> comment -> int
module Forget :
  sig
    val t : t -> Parsexp__.Import.Ppx_sexp_conv_lib.Sexp.t
    val t_or_comment :
      t_or_comment -> Parsexp__.Import.Ppx_sexp_conv_lib.Sexp.t option
    val t_or_comments :
      t_or_comment list -> Parsexp__.Import.Ppx_sexp_conv_lib.Sexp.t list("DEBUG:rule", [Tag1 (("t", 551), (0, 0, Tag1 ([(("Atom", 370), Tag1 ([(("loc", 391), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Parsexp__")), "Positions"), "range"), 0, (0)), 100000000, 0, -34), (("src/cst.mli", 13, 271, 279), ("src/cst.mli", 14, 301, 308), 0), 0, Tag1 ("Parsexp__Cst", 3)); (("atom", 392), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -35), (("src/cst.mli", 14, 301, 309), ("src/cst.mli", 18, 528, 535), 0), 0, Tag1 ("Parsexp__Cst", 4)); (("unescaped", 393), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -37)], (0)), 100000000, 0, -36), (("src/cst.mli", 18, 528, 536), ("src/cst.mli", 18, 528, 561), 0), 0, Tag1 ("Parsexp__Cst", 5))]), 0, (("src/cst.mli", 12, 259, 261), ("src/cst.mli", 19, 562, 569), 0), 0, Tag1 ("Parsexp__Cst", 6)); (("List", 394), Tag1 ([(("loc", 395), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Parsexp__")), "Positions"), "range"), 0, (0)), 100000000, 0, -38), (("src/cst.mli", 21, 582, 590), ("src/cst.mli", 22, 612, 619), 0), 0, Tag1 ("Parsexp__Cst", 7)); (("elements", 396), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t_or_comment", 552)), 0, (0)), 100000000, 0, -40)], (0)), 100000000, 0, -39), (("src/cst.mli", 22, 612, 620), ("src/cst.mli", 22, 612, 648), 0), 0, Tag1 ("Parsexp__Cst", 8))]), 0, (("src/cst.mli", 20, 570, 572), ("src/cst.mli", 23, 649, 656), 0), 0, Tag1 ("Parsexp__Cst", 9))], 0), 1, 0, 0, 0, 0, 0, (("src/cst.mli", 11, 250, 250), ("src/cst.mli", 23, 649, 656), 0), 0, 0, 0, Tag1 ("Parsexp__Cst", 0)), 1, 0); Tag1 (("t_or_comment", 552), (0, 0, Tag1 ([(("Sexp", 397), ([(Tag3 ((("t", 551)), 0, (0)), 100000000, 0, -32)]), 0, (("src/cst.mli", 26, 677, 679), ("src/cst.mli", 26, 677, 690), 0), 0, Tag1 ("Parsexp__Cst", 10)); (("Comment", 398), ([(Tag3 ((("comment", 553)), 0, (0)), 100000000, 0, -33)]), 0, (("src/cst.mli", 27, 691, 693), ("src/cst.mli", 27, 691, 713), 0), 0, Tag1 ("Parsexp__Cst", 11))], 0), 1, 0, 0, 0, 0, 0, (("src/cst.mli", 25, 658, 658), ("src/cst.mli", 27, 691, 713), 0), 0, 0, 0, Tag1 ("Parsexp__Cst", 1)), 2, 0); Tag1 (("comment", 553), (0, 0, Tag1 ([(("Plain_comment", 399), Tag1 ([(("loc", 400), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Parsexp__")), "Positions"), "range"), 0, (0)), 100000000, 0, -26), (("src/cst.mli", 31, 750, 758), ("src/cst.mli", 32, 780, 787), 0), 0, Tag1 ("Parsexp__Cst", 12)); (("comment", 401), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -27), (("src/cst.mli", 32, 780, 788), ("src/cst.mli", 32, 780, 804), 0), 0, Tag1 ("Parsexp__Cst", 13))]), 0, (("src/cst.mli", 30, 729, 731), ("src/cst.mli", 33, 805, 812), 0), 0, Tag1 ("Parsexp__Cst", 14)); (("Sexp_comment", 402), Tag1 ([(("hash_semi_pos", 403), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Parsexp__")), "Positions"), "pos"), 0, (0)), 100000000, 0, -28), (("src/cst.mli", 35, 862, 870), ("src/cst.mli", 36, 900, 907), 0), 0, Tag1 ("Parsexp__Cst", 15)); (("comments", 404), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("comment", 553)), 0, (0)), 100000000, 0, -30)], (0)), 100000000, 0, -29), (("src/cst.mli", 36, 900, 908), ("src/cst.mli", 37, 932, 939), 0), 0, Tag1 ("Parsexp__Cst", 16)); (("sexp", 405), 0, (Tag3 ((("t", 551)), 0, (0)), 100000000, 0, -31), (("src/cst.mli", 37, 932, 940), ("src/cst.mli", 37, 932, 948), 0), 0, Tag1 ("Parsexp__Cst", 17))]), 0, (("src/cst.mli", 34, 842, 844), ("src/cst.mli", 38, 949, 956), 0), 0, Tag1 ("Parsexp__Cst", 18))], 0), 1, 0, 0, 0, 0, 0, (("src/cst.mli", 29, 715, 715), ("src/cst.mli", 39, 957, 984), 0), [(("deriving_inline", (("src/cst.mli", 39, 957, 960), ("src/cst.mli", 39, 957, 975), 0)), ([([(((("sexp_of"), (("src/cst.mli", 39, 957, 976), ("src/cst.mli", 39, 957, 983), 0))), (("src/cst.mli", 39, 957, 976), ("src/cst.mli", 39, 957, 983), 0), 0, 0)], (("src/cst.mli", 39, 957, 976), ("src/cst.mli", 39, 957, 983), 0))]), (("src/cst.mli", 39, 957, 957), ("src/cst.mli", 39, 957, 984), 0))], 0, 0, Tag1 ("Parsexp__Cst", 2)), 2, 0); (("sexp_of_t", 554), ((Tag1 (0, (Tag3 ((("t", 551)), 0, (0)), 100000000, 0, -25), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -24), 0), 100000000, 0, -23), 0, (("src/cst.mli", 44, 1026, 1028), ("src/cst.mli", 44, 1026, 1064), 0), 0, Tag1 ("Parsexp__Cst", 39)), 0); (("sexp_of_t_or_comment", 555), ((Tag1 (0, (Tag3 ((("t_or_comment", 552)), 0, (0)), 100000000, 0, -22), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -21), 0), 100000000, 0, -20), 0, (("src/cst.mli", 45, 1065, 1067), ("src/cst.mli", 45, 1065, 1125), 0), 0, Tag1 ("Parsexp__Cst", 40)), 0); (("sexp_of_comment", 556), ((Tag1 (0, (Tag3 ((("comment", 553)), 0, (0)), 100000000, 0, -19), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("src/cst.mli", 46, 1126, 1128), ("src/cst.mli", 46, 1126, 1176), 0), 0, Tag1 ("Parsexp__Cst", 41)), 0); (("compare", 557), ((Tag1 (0, (Tag3 ((("t", 551)), 0, (0)), 100000000, 0, -16), (Tag1 (0, (Tag3 ((("t", 551)), 0, (0)), 100000000, 0, -15), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -14), 0), 100000000, 0, -13), 0), 100000000, 0, -12), 0, (("src/cst.mli", 52, 1216, 1216), ("src/cst.mli", 52, 1216, 1243), 0), 0, Tag1 ("Parsexp__Cst", 42)), 0); (("compare_t_or_comment", 558), ((Tag1 (0, (Tag3 ((("t_or_comment", 552)), 0, (0)), 100000000, 0, -11), (Tag1 (0, (Tag3 ((("t_or_comment", 552)), 0, (0)), 100000000, 0, -10), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0), 100000000, 0, -7), 0, (("src/cst.mli", 53, 1244, 1244), ("src/cst.mli", 53, 1244, 1306), 0), 0, Tag1 ("Parsexp__Cst", 43)), 0); (("compare_comment", 559), ((Tag1 (0, (Tag3 ((("comment", 553)), 0, (0)), 100000000, 0, -6), (Tag1 (0, (Tag3 ((("comment", 553)), 0, (0)), 100000000, 0, -5), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/cst.mli", 54, 1307, 1307), ("src/cst.mli", 54, 1307, 1354), 0), 0, Tag1 ("Parsexp__Cst", 44)), 0); Tag3 (("Forget", 560), 0, (Tag1 ([(("t", 561), ((Tag1 (0, (Tag3 ((("t", 551)), 0, (0)), 100000000, 0, -52), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Parsexp__")), "Import"), "Ppx_sexp_conv_lib"), "Sexp"), "t"), 0, (0)), 100000000, 0, -51), 0), 100000000, 0, -50), 0, (("src/cst.mli", 57, 1376, 1378), ("src/cst.mli", 57, 1376, 1415), 0), 0, Tag1 ("Parsexp__Cst", 45)), 0); (("t_or_comment", 562), ((Tag1 (0, (Tag3 ((("t_or_comment", 552)), 0, (0)), 100000000, 0, -49), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Parsexp__")), "Import"), "Ppx_sexp_conv_lib"), "Sexp"), "t"), 0, (0)), 100000000, 0, -48)], (0)), 100000000, 0, -47), 0), 100000000, 0, -46), 0, (("src/cst.mli", 58, 1416, 1418), ("src/cst.mli", 58, 1416, 1484), 0), 0, Tag1 ("Parsexp__Cst", 46)), 0); (("t_or_comments", 563), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t_or_comment", 552)), 0, (0)), 100000000, 0, -45)], (0)), 100000000, 0, -44), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Parsexp__")), "Import"), "Ppx_sexp_conv_lib"), "Sexp"), "t"), 0, (0)), 100000000, 0, -43)], (0)), 100000000, 0, -42), 0), 100000000, 0, -41), 0, (("src/cst.mli", 59, 1485, 1487), ("src/cst.mli", 59, 1485, 1557), 0), 0, Tag1 ("Parsexp__Cst", 47)), 0)]), 0, (("src/cst.mli", 56, 1356, 1356), ("src/cst.mli", 60, 1558, 1561), 0), Tag1 ("Parsexp__Cst", 48)), 0, 0)], "Parsexp__Cst", [("Parsexp__Cst", (")\228;6o~\227\000pRf\153\216\244sD")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("Parsexp__Positions", ("BE\135\222xW\224\233\184\004o\169\248\bH\230")); ("Parsexp__Import", ("\017\029\157\225\239\135p*0\207\146\197\020\128\195!")); ("Parsexp__", ("\182\180\203\030\218\020\246\196\221\171_\030GE\171\192")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

  end

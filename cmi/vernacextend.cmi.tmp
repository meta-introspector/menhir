type vernac_keep_as = VtKeepAxiom | VtKeepDefined | VtKeepOpaque
type vernac_qed_type = VtKeep of vernac_keep_as | VtDrop
type vernac_when = VtNow | VtLater
type vernac_classification =
    VtStartProof of vernac_start
  | VtSideff of vernac_sideff_type
  | VtQed of vernac_qed_type
  | VtProofStep of { proof_block_detection : proof_block_name option; }
  | VtQuery
  | VtProofMode of Pvernac.proof_mode
  | VtMeta
and vernac_start = opacity_guarantee * Names.Id.t list
and vernac_sideff_type = Names.Id.t list * vernac_when
and opacity_guarantee = GuaranteesOpacity | Doesn'tGuaranteeOpacity
and solving_tac = bool
and anon_abstracting_tac = bool
and proof_block_name = string
module InProg :
  sig
    type _ t = Ignore : unit t | Use : Declare.OblState.t t
    val cast : Declare.OblState.t -> 'a t -> 'a
  end
module OutProg :
  sig
    type _ t = No : unit t | Yes : Declare.OblState.t t | Push | Pop
    val cast :
      'a ->
      'a t -> Declare.OblState.t NeList.t -> Declare.OblState.t NeList.t
  end
module InProof :
  sig
    type _ t =
        Ignore : unit t
      | Reject : unit t
      | Use : Declare.Proof.t t
      | UseOpt : Declare.Proof.t option t
    val cast : Declare.Proof.t option -> 'a t -> 'a
  end
module OutProof :
  sig
    type _ t =
        No : unit t
      | Close : unit t
      | Update : Declare.Proof.t t
      | New : Declare.Proof.t t
  end
type ('inprog, 'outprog, 'inproof, 'outproof) vernac_type = {
  inprog : 'inprog InProg.t;
  outprog : 'outprog InProg.t;
  inproof : 'inproof InProof.t;
  outproof : 'outproof OutProof.t;
}
type typed_vernac =
    TypedVernac : { inprog : 'inprog InProg.t; outprog : 'outprog OutProg.t;
      inproof : 'inproof InProof.t; outproof : 'outproof OutProof.t;
      run : pm:'inprog -> proof:'inproof -> 'outprog * 'outproof;
    } -> typed_vernac
val vtdefault : (unit -> unit) -> typed_vernac
val vtnoproof : (unit -> unit) -> typed_vernac
val vtcloseproof :
  (lemma:Declare.Proof.t -> pm:Declare.OblState.t -> Declare.OblState.t) ->
  typed_vernac
val vtopenproof : (unit -> Declare.Proof.t) -> typed_vernac
val vtmodifyproof :
  (pstate:Declare.Proof.t -> Declare.Proof.t) -> typed_vernac
val vtreadproofopt : (pstate:Declare.Proof.t option -> unit) -> typed_vernac
val vtreadproof : (pstate:Declare.Proof.t -> unit) -> typed_vernac
val vtreadprogram : (pm:Declare.OblState.t -> unit) -> typed_vernac
val vtmodifyprogram :
  (pm:Declare.OblState.t -> Declare.OblState.t) -> typed_vernac
val vtdeclareprogram :
  (pm:Declare.OblState.t -> Declare.Proof.t) -> typed_vernac
val vtopenproofprogram :
  (pm:Declare.OblState.t -> Declare.OblState.t * Declare.Proof.t) ->
  typed_vernac
type vernac_command =
    ?loc:Loc.t -> atts:Attributes.vernac_flags -> unit -> typed_vernac
type plugin_args = Genarg.raw_generic_argument list
val type_vernac : Vernacexpr.extend_name -> plugin_args -> vernac_command
type classifier = Genarg.raw_generic_argument list -> vernac_classification
type (_, _) ty_sig =
    TyNil : (vernac_command, vernac_classification) ty_sig
  | TyTerminal : string * ('r, 's) ty_sig -> ('r, 's) ty_sig
  | TyNonTerminal : ('a, 'b, 'c) Extend.ty_user_symbol *
      ('r, 's) ty_sig -> ('a -> 'r, 'a -> 's) ty_sig
type ty_ml = TyML : bool * ('r, 's) ty_sig * 'r * 's option -> ty_ml
val static_vernac_extend :
  plugin:string option ->
  command:string ->
  ?classifier:(string -> vernac_classification) ->
  ?entry:Vernacexpr.vernac_expr Pcoq.Entry.t -> ty_ml list -> unit
val static_linking_done : unit -> unit
val declare_dynamic_vernac_extend :
  command:string ->
  ?entry:Vernacexpr.vernac_expr Pcoq.Entry.t ->
  depr:bool -> 's -> ('r, 's) ty_sig -> 'r -> Vernacexpr.extend_name
type 'a argument_rule =
    Arg_alias of 'a Pcoq.Entry.t
  | Arg_rules of 'a Pcoq.Production.t list
type 'a vernac_argument = {
  arg_printer : Environ.env -> Evd.evar_map -> 'a -> Pp.t;
  arg_parsing : 'a argument_rule;
}
val vernac_argument_extend :
  plugin:string ->
  name:string ->
  'a vernac_argument -> ('a, unit, unit) Genarg.genarg_type * 'a Pcoq.Entry.t
val get_vernac_classifier : Vernacexpr.extend_name -> classifier
val classify_as_query : vernac_classification
val classify_as_sideeff : vernac_classification
("DEBUG:rule", [Tag1 (("vernac_keep_as", 1218), (0, 0, Tag1 ([(("VtKeepAxiom", 270), (0), 0, (("vernac/vernacextend.mli", 31, 1379, 1401), ("vernac/vernacextend.mli", 31, 1379, 1412), 0), 0, Tag1 ("Vernacextend", 1)); (("VtKeepDefined", 271), (0), 0, (("vernac/vernacextend.mli", 31, 1379, 1413), ("vernac/vernacextend.mli", 31, 1379, 1428), 0), 0, Tag1 ("Vernacextend", 2)); (("VtKeepOpaque", 272), (0), 0, (("vernac/vernacextend.mli", 31, 1379, 1429), ("vernac/vernacextend.mli", 31, 1379, 1443), 0), 0, Tag1 ("Vernacextend", 3))], 0), 1, 0, 0, 0, 0, 0, (("vernac/vernacextend.mli", 31, 1379, 1379), ("vernac/vernacextend.mli", 31, 1379, 1443), 0), 0, 1, 0, Tag1 ("Vernacextend", 0)), 1, 0); Tag1 (("vernac_qed_type", 1219), (0, 0, Tag1 ([(("VtKeep", 274), ([(Tag3 ((("vernac_keep_as", 1218)), 0, (0)), 100000000, 0, -210)]), 0, (("vernac/vernacextend.mli", 33, 1445, 1468), ("vernac/vernacextend.mli", 33, 1445, 1492), 0), 0, Tag1 ("Vernacextend", 5)); (("VtDrop", 275), (0), 0, (("vernac/vernacextend.mli", 33, 1445, 1493), ("vernac/vernacextend.mli", 33, 1445, 1501), 0), 0, Tag1 ("Vernacextend", 6))], 0), 1, 0, 0, 0, 0, 0, (("vernac/vernacextend.mli", 33, 1445, 1445), ("vernac/vernacextend.mli", 33, 1445, 1501), 0), 0, 0, 0, Tag1 ("Vernacextend", 4)), 1, 0); Tag1 (("vernac_when", 1220), (0, 0, Tag1 ([(("VtNow", 277), (0), 0, (("vernac/vernacextend.mli", 36, 1522, 1524), ("vernac/vernacextend.mli", 36, 1522, 1531), 0), 0, Tag1 ("Vernacextend", 8)); (("VtLater", 278), (0), 0, (("vernac/vernacextend.mli", 37, 1532, 1534), ("vernac/vernacextend.mli", 37, 1532, 1543), 0), 0, Tag1 ("Vernacextend", 9))], 0), 1, 0, 0, 0, 0, 0, (("vernac/vernacextend.mli", 35, 1503, 1503), ("vernac/vernacextend.mli", 37, 1532, 1543), 0), 0, 1, 0, Tag1 ("Vernacextend", 7)), 1, 0); Tag1 (("vernac_classification", 1221), (0, 0, Tag1 ([(("VtStartProof", 286), ([(Tag3 ((("vernac_start", 1222)), 0, (0)), 100000000, 0, -204)]), 0, (("vernac/vernacextend.mli", 41, 1599, 1601), ("vernac/vernacextend.mli", 41, 1599, 1631), 0), 0, Tag1 ("Vernacextend", 17)); (("VtSideff", 287), ([(Tag3 ((("vernac_sideff_type", 1223)), 0, (0)), 100000000, 0, -205)]), 0, (("vernac/vernacextend.mli", 44, 1709, 1711), ("vernac/vernacextend.mli", 44, 1709, 1743), 0), 0, Tag1 ("Vernacextend", 18)); (("VtQed", 288), ([(Tag3 ((("vernac_qed_type", 1219)), 0, (0)), 100000000, 0, -206)]), 0, (("vernac/vernacextend.mli", 46, 1767, 1769), ("vernac/vernacextend.mli", 46, 1767, 1795), 0), 0, Tag1 ("Vernacextend", 19)); (("VtProofStep", 289), Tag1 ([(("proof_block_detection", 290), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("proof_block_name", 1227)), 0, (0)), 100000000, 0, -208)], (0)), 100000000, 0, -207), (("vernac/vernacextend.mli", 49, 1838, 1844), ("vernac/vernacextend.mli", 49, 1838, 1891), 0), 0, Tag1 ("Vernacextend", 20))]), 0, (("vernac/vernacextend.mli", 48, 1817, 1819), ("vernac/vernacextend.mli", 50, 1892, 1897), 0), 0, Tag1 ("Vernacextend", 21)); (("VtQuery", 291), (0), 0, (("vernac/vernacextend.mli", 53, 2014, 2016), ("vernac/vernacextend.mli", 53, 2014, 2025), 0), 0, Tag1 ("Vernacextend", 22)); (("VtProofMode", 292), ([(Tag3 (Tag1 ((Tag2 ("Pvernac")), "proof_mode"), 0, (0)), 100000000, 0, -209)]), 0, (("vernac/vernacextend.mli", 55, 2078, 2080), ("vernac/vernacextend.mli", 55, 2078, 2115), 0), 0, Tag1 ("Vernacextend", 23)); (("VtMeta", 300), (0), 0, (("vernac/vernacextend.mli", 57, 2138, 2140), ("vernac/vernacextend.mli", 57, 2138, 2148), 0), 0, Tag1 ("Vernacextend", 24))], 0), 1, 0, 0, 0, 0, 0, (("vernac/vernacextend.mli", 39, 1545, 1545), ("vernac/vernacextend.mli", 57, 2138, 2148), 0), 0, 0, 0, Tag1 ("Vernacextend", 10)), 1, 0); Tag1 (("vernac_start", 1222), (0, 0, 0, 1, ((Tag2 ([(Tag3 ((("opacity_guarantee", 1224)), 0, (0)), 100000000, 0, -201); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -203)], (0)), 100000000, 0, -202)]), 100000000, 0, -200)), 0, 0, 0, 0, (("vernac/vernacextend.mli", 58, 2149, 2149), ("vernac/vernacextend.mli", 58, 2149, 2203), 0), 0, 0, 0, Tag1 ("Vernacextend", 11)), 2, 0); Tag1 (("vernac_sideff_type", 1223), (0, 0, 0, 1, ((Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -198)], (0)), 100000000, 0, -197); (Tag3 ((("vernac_when", 1220)), 0, (0)), 100000000, 0, -199)]), 100000000, 0, -196)), 0, 0, 0, 0, (("vernac/vernacextend.mli", 59, 2204, 2204), ("vernac/vernacextend.mli", 59, 2204, 2258), 0), 0, 0, 0, Tag1 ("Vernacextend", 12)), 2, 0); Tag1 (("opacity_guarantee", 1224), (0, 0, Tag1 ([(("GuaranteesOpacity", 402), (0), 0, (("vernac/vernacextend.mli", 61, 2283, 2285), ("vernac/vernacextend.mli", 61, 2283, 2304), 0), 0, Tag1 ("Vernacextend", 25)); (("Doesn'tGuaranteeOpacity", 403), (0), 0, (("vernac/vernacextend.mli", 62, 2349, 2351), ("vernac/vernacextend.mli", 62, 2349, 2376), 0), 0, Tag1 ("Vernacextend", 26))], 0), 1, 0, 0, 0, 0, 0, (("vernac/vernacextend.mli", 60, 2259, 2259), ("vernac/vernacextend.mli", 62, 2349, 2376), 0), 0, 1, 0, Tag1 ("Vernacextend", 13)), 2, 0); Tag1 (("solving_tac", 1225), (0, 0, 0, 1, ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -195)), 0, 0, 0, 0, (("vernac/vernacextend.mli", 64, 2432, 2432), ("vernac/vernacextend.mli", 64, 2432, 2454), 0), 0, 1, 0, Tag1 ("Vernacextend", 14)), 2, 0); Tag1 (("anon_abstracting_tac", 1226), (0, 0, 0, 1, ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -194)), 0, 0, 0, 0, (("vernac/vernacextend.mli", 66, 2476, 2476), ("vernac/vernacextend.mli", 66, 2476, 2507), 0), 0, 1, 0, Tag1 ("Vernacextend", 15)), 2, 0); Tag1 (("proof_block_name", 1227), (0, 0, 0, 1, ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -193)), 0, 0, 0, 0, (("vernac/vernacextend.mli", 68, 2551, 2551), ("vernac/vernacextend.mli", 68, 2551, 2580), 0), 0, 0, 0, Tag1 ("Vernacextend", 16)), 2, 0); Tag3 (("InProg", 1228), 0, (Tag1 ([Tag1 (("t", 1261), ([((("_")), 100000000, 0, -220)], 1, Tag1 ([(("Ignore", 405), (0), ((Tag3 ((("t", 1261)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -217)], (0)), 100000000, 0, -216)), (("vernac/vernacextend.mli", 74, 2697, 2701), ("vernac/vernacextend.mli", 74, 2697, 2718), 0), 0, Tag1 ("Vernacextend", 34)); (("Use", 406), (0), ((Tag3 ((("t", 1261)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Declare")), "OblState"), "t"), 0, (0)), 100000000, 0, -219)], (0)), 100000000, 0, -218)), (("vernac/vernacextend.mli", 75, 2719, 2723), ("vernac/vernacextend.mli", 75, 2719, 2751), 0), 0, Tag1 ("Vernacextend", 35))], 0), 1, 0, [63], [0], 0, 0, (("vernac/vernacextend.mli", 73, 2684, 2686), ("vernac/vernacextend.mli", 75, 2719, 2751), 0), 0, 1, 0, Tag1 ("Vernacextend", 33)), 1, 0); (("cast", 1262), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Declare")), "OblState"), "t"), 0, (0)), 100000000, 0, -215), (Tag1 (0, (Tag3 ((("t", 1261)), [((("a")), 100000000, 0, -213)], (0)), 100000000, 0, -214), ((("a")), 100000000, 0, -213), 0), 100000000, 0, -212), 0), 100000000, 0, -211), 0, (("vernac/vernacextend.mli", 77, 2753, 2755), ("vernac/vernacextend.mli", 77, 2753, 2798), 0), 0, Tag1 ("Vernacextend", 36)), 0)]), 0, (("vernac/vernacextend.mli", 72, 2664, 2664), ("vernac/vernacextend.mli", 78, 2799, 2802), 0), Tag1 ("Vernacextend", 37)), 0, 0); Tag3 (("OutProg", 1229), 0, (Tag1 ([Tag1 (("t", 1263), ([((("_")), 100000000, 0, -234)], 1, Tag1 ([(("No", 441), (0), ((Tag3 ((("t", 1263)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -231)], (0)), 100000000, 0, -230)), (("vernac/vernacextend.mli", 82, 2838, 2842), ("vernac/vernacextend.mli", 82, 2838, 2855), 0), 0, Tag1 ("Vernacextend", 39)); (("Yes", 442), (0), ((Tag3 ((("t", 1263)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Declare")), "OblState"), "t"), 0, (0)), 100000000, 0, -233)], (0)), 100000000, 0, -232)), (("vernac/vernacextend.mli", 83, 2856, 2860), ("vernac/vernacextend.mli", 83, 2856, 2888), 0), 0, Tag1 ("Vernacextend", 40)); (("Push", 443), (0), 0, (("vernac/vernacextend.mli", 84, 2889, 2893), ("vernac/vernacextend.mli", 84, 2889, 2899), 0), 0, Tag1 ("Vernacextend", 41)); (("Pop", 444), (0), 0, (("vernac/vernacextend.mli", 85, 2900, 2904), ("vernac/vernacextend.mli", 85, 2900, 2909), 0), 0, Tag1 ("Vernacextend", 42))], 0), 1, 0, [63], [0], 0, 0, (("vernac/vernacextend.mli", 81, 2825, 2827), ("vernac/vernacextend.mli", 85, 2900, 2909), 0), 0, 1, 0, Tag1 ("Vernacextend", 38)), 1, 0); (("cast", 1264), ((Tag1 (0, ((("a")), 100000000, 0, -229), (Tag1 (0, (Tag3 ((("t", 1263)), [((("a")), 100000000, 0, -229)], (0)), 100000000, 0, -228), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("NeList")), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Declare")), "OblState"), "t"), 0, (0)), 100000000, 0, -227)], (0)), 100000000, 0, -226), (Tag3 (Tag1 ((Tag2 ("NeList")), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Declare")), "OblState"), "t"), 0, (0)), 100000000, 0, -225)], (0)), 100000000, 0, -224), 0), 100000000, 0, -223), 0), 100000000, 0, -222), 0), 100000000, 0, -221), 0, (("vernac/vernacextend.mli", 87, 2911, 2913), ("vernac/vernacextend.mli", 87, 2911, 2996), 0), 0, Tag1 ("Vernacextend", 43)), 0)]), 0, (("vernac/vernacextend.mli", 80, 2804, 2804), ("vernac/vernacextend.mli", 88, 2997, 3000), 0), Tag1 ("Vernacextend", 44)), 0, 0); Tag3 (("InProof", 1230), 0, (Tag1 ([Tag1 (("t", 1265), ([((("_")), 100000000, 0, -250)], 1, Tag1 ([(("Ignore", 461), (0), ((Tag3 ((("t", 1265)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -242)], (0)), 100000000, 0, -241)), (("vernac/vernacextend.mli", 92, 3036, 3040), ("vernac/vernacextend.mli", 92, 3036, 3057), 0), 0, Tag1 ("Vernacextend", 46)); (("Reject", 462), (0), ((Tag3 ((("t", 1265)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -244)], (0)), 100000000, 0, -243)), (("vernac/vernacextend.mli", 93, 3058, 3062), ("vernac/vernacextend.mli", 93, 3058, 3079), 0), 0, Tag1 ("Vernacextend", 47)); (("Use", 463), (0), ((Tag3 ((("t", 1265)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Declare")), "Proof"), "t"), 0, (0)), 100000000, 0, -246)], (0)), 100000000, 0, -245)), (("vernac/vernacextend.mli", 94, 3080, 3084), ("vernac/vernacextend.mli", 94, 3080, 3109), 0), 0, Tag1 ("Vernacextend", 48)); (("UseOpt", 499), (0), ((Tag3 ((("t", 1265)), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Declare")), "Proof"), "t"), 0, (0)), 100000000, 0, -249)], (0)), 100000000, 0, -248)], (0)), 100000000, 0, -247)), (("vernac/vernacextend.mli", 95, 3110, 3114), ("vernac/vernacextend.mli", 95, 3110, 3149), 0), 0, Tag1 ("Vernacextend", 49))], 0), 1, 0, [63], [0], 0, 0, (("vernac/vernacextend.mli", 91, 3023, 3025), ("vernac/vernacextend.mli", 95, 3110, 3149), 0), 0, 1, 0, Tag1 ("Vernacextend", 45)), 1, 0); (("cast", 1266), ((Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Declare")), "Proof"), "t"), 0, (0)), 100000000, 0, -240)], (0)), 100000000, 0, -239), (Tag1 (0, (Tag3 ((("t", 1265)), [((("a")), 100000000, 0, -237)], (0)), 100000000, 0, -238), ((("a")), 100000000, 0, -237), 0), 100000000, 0, -236), 0), 100000000, 0, -235), 0, (("vernac/vernacextend.mli", 97, 3151, 3153), ("vernac/vernacextend.mli", 97, 3151, 3200), 0), 0, Tag1 ("Vernacextend", 50)), 0)]), 0, (("vernac/vernacextend.mli", 90, 3002, 3002), ("vernac/vernacextend.mli", 98, 3201, 3204), 0), Tag1 ("Vernacextend", 51)), 0, 0); Tag3 (("OutProof", 1231), 0, (Tag1 ([Tag1 (("t", 1267), ([((("_")), 100000000, 0, -259)], 1, Tag1 ([(("No", 503), (0), ((Tag3 ((("t", 1267)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -252)], (0)), 100000000, 0, -251)), (("vernac/vernacextend.mli", 103, 3242, 3246), ("vernac/vernacextend.mli", 103, 3242, 3259), 0), 0, Tag1 ("Vernacextend", 53)); (("Close", 504), (0), ((Tag3 ((("t", 1267)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -254)], (0)), 100000000, 0, -253)), (("vernac/vernacextend.mli", 104, 3260, 3264), ("vernac/vernacextend.mli", 104, 3260, 3280), 0), 0, Tag1 ("Vernacextend", 54)); (("Update", 505), (0), ((Tag3 ((("t", 1267)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Declare")), "Proof"), "t"), 0, (0)), 100000000, 0, -256)], (0)), 100000000, 0, -255)), (("vernac/vernacextend.mli", 105, 3281, 3285), ("vernac/vernacextend.mli", 105, 3281, 3313), 0), 0, Tag1 ("Vernacextend", 55)); (("New", 506), (0), ((Tag3 ((("t", 1267)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Declare")), "Proof"), "t"), 0, (0)), 100000000, 0, -258)], (0)), 100000000, 0, -257)), (("vernac/vernacextend.mli", 106, 3314, 3318), ("vernac/vernacextend.mli", 106, 3314, 3343), 0), 0, Tag1 ("Vernacextend", 56))], 0), 1, 0, [63], [0], 0, 0, (("vernac/vernacextend.mli", 102, 3229, 3231), ("vernac/vernacextend.mli", 106, 3314, 3343), 0), 0, 1, 0, Tag1 ("Vernacextend", 52)), 1, 0)]), 0, (("vernac/vernacextend.mli", 100, 3206, 3206), ("vernac/vernacextend.mli", 108, 3345, 3348), 0), Tag1 ("Vernacextend", 57)), 0, 0); Tag1 (("vernac_type", 1232), ([((("inprog")), 100000000, 0, -186); ((("outprog")), 100000000, 0, -188); ((("inproof")), 100000000, 0, -190); ((("outproof")), 100000000, 0, -192)], 4, [[(("inprog", 509), 0, (Tag3 (Tag1 ((("InProg", 1228)), "t"), [((("inprog")), 100000000, 0, -186)], (0)), 100000000, 0, -185), (("vernac/vernacextend.mli", 111, 3409, 3411), ("vernac/vernacextend.mli", 111, 3409, 3437), 0), 0, Tag1 ("Vernacextend", 59)); (("outprog", 510), 0, (Tag3 (Tag1 ((("InProg", 1228)), "t"), [((("outprog")), 100000000, 0, -188)], (0)), 100000000, 0, -187), (("vernac/vernacextend.mli", 112, 3438, 3440), ("vernac/vernacextend.mli", 112, 3438, 3468), 0), 0, Tag1 ("Vernacextend", 60)); (("inproof", 511), 0, (Tag3 (Tag1 ((("InProof", 1230)), "t"), [((("inproof")), 100000000, 0, -190)], (0)), 100000000, 0, -189), (("vernac/vernacextend.mli", 113, 3469, 3471), ("vernac/vernacextend.mli", 113, 3469, 3500), 0), 0, Tag1 ("Vernacextend", 61)); (("outproof", 512), 0, (Tag3 (Tag1 ((("OutProof", 1231)), "t"), [((("outproof")), 100000000, 0, -192)], (0)), 100000000, 0, -191), (("vernac/vernacextend.mli", 114, 3501, 3503), ("vernac/vernacextend.mli", 114, 3501, 3535), 0), 0, Tag1 ("Vernacextend", 62))]], 1, 0, [63; 63; 63; 63], [0; 0; 0; 0], 0, 0, (("vernac/vernacextend.mli", 110, 3350, 3350), ("vernac/vernacextend.mli", 115, 3536, 3537), 0), 0, 0, 0, Tag1 ("Vernacextend", 58)), 1, 0); Tag1 (("typed_vernac", 1233), (0, 0, Tag1 ([(("TypedVernac", 514), Tag1 ([(("inprog", 515), 0, (Tag3 (Tag1 ((("InProg", 1228)), "t"), [((("inprog")), 100000000, 0, -175)], (0)), 100000000, 0, -174), (("vernac/vernacextend.mli", 119, 3579, 3585), ("vernac/vernacextend.mli", 119, 3579, 3611), 0), 0, Tag1 ("Vernacextend", 64)); (("outprog", 516), 0, (Tag3 (Tag1 ((("OutProg", 1229)), "t"), [((("outprog")), 100000000, 0, -177)], (0)), 100000000, 0, -176), (("vernac/vernacextend.mli", 120, 3612, 3618), ("vernac/vernacextend.mli", 120, 3612, 3647), 0), 0, Tag1 ("Vernacextend", 65)); (("inproof", 517), 0, (Tag3 (Tag1 ((("InProof", 1230)), "t"), [((("inproof")), 100000000, 0, -179)], (0)), 100000000, 0, -178), (("vernac/vernacextend.mli", 121, 3648, 3654), ("vernac/vernacextend.mli", 121, 3648, 3683), 0), 0, Tag1 ("Vernacextend", 66)); (("outproof", 518), 0, (Tag3 (Tag1 ((("OutProof", 1231)), "t"), [((("outproof")), 100000000, 0, -181)], (0)), 100000000, 0, -180), (("vernac/vernacextend.mli", 122, 3684, 3690), ("vernac/vernacextend.mli", 122, 3684, 3722), 0), 0, Tag1 ("Vernacextend", 67)); (("run", 519), 0, (Tag1 (("pm"), ((("inprog")), 100000000, 0, -175), (Tag1 (("proof"), ((("inproof")), 100000000, 0, -179), (Tag2 ([((("outprog")), 100000000, 0, -177); ((("outproof")), 100000000, 0, -181)]), 100000000, 0, -184), 0), 100000000, 0, -183), 0), 100000000, 0, -182), (("vernac/vernacextend.mli", 123, 3723, 3729), ("vernac/vernacextend.mli", 123, 3723, 3788), 0), 0, Tag1 ("Vernacextend", 68))]), ((Tag3 ((("typed_vernac", 1233)), 0, (0)), 100000000, 0, -173)), (("vernac/vernacextend.mli", 118, 3559, 3563), ("vernac/vernacextend.mli", 124, 3789, 3810), 0), 0, Tag1 ("Vernacextend", 69))], 0), 1, 0, 0, 0, 0, 0, (("vernac/vernacextend.mli", 117, 3539, 3539), ("vernac/vernacextend.mli", 124, 3789, 3810), 0), 0, 0, 0, Tag1 ("Vernacextend", 63)), 1, 0); (("vtdefault", 1234), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -172), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -171), 0), 100000000, 0, -170), (Tag3 ((("typed_vernac", 1233)), 0, (0)), 100000000, 0, -169), 0), 100000000, 0, -168), 0, (("vernac/vernacextend.mli", 128, 3888, 3888), ("vernac/vernacextend.mli", 128, 3888, 3934), 0), 0, Tag1 ("Vernacextend", 75)), 0); (("vtnoproof", 1235), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -167), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -166), 0), 100000000, 0, -165), (Tag3 ((("typed_vernac", 1233)), 0, (0)), 100000000, 0, -164), 0), 100000000, 0, -163), 0, (("vernac/vernacextend.mli", 129, 3935, 3935), ("vernac/vernacextend.mli", 129, 3935, 3981), 0), 0, Tag1 ("Vernacextend", 76)), 0); (("vtcloseproof", 1236), ((Tag1 (0, (Tag1 (("lemma"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Declare")), "Proof"), "t"), 0, (0)), 100000000, 0, -162), (Tag1 (("pm"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Declare")), "OblState"), "t"), 0, (0)), 100000000, 0, -161), (Tag3 (Tag1 (Tag1 ((Tag2 ("Declare")), "OblState"), "t"), 0, (0)), 100000000, 0, -160), 0), 100000000, 0, -159), 0), 100000000, 0, -158), (Tag3 ((("typed_vernac", 1233)), 0, (0)), 100000000, 0, -157), 0), 100000000, 0, -156), 0, (("vernac/vernacextend.mli", 130, 3982, 3982), ("vernac/vernacextend.mli", 130, 3982, 4087), 0), 0, Tag1 ("Vernacextend", 77)), 0); (("vtopenproof", 1237), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -155), (Tag3 (Tag1 (Tag1 ((Tag2 ("Declare")), "Proof"), "t"), 0, (0)), 100000000, 0, -154), 0), 100000000, 0, -153), (Tag3 ((("typed_vernac", 1233)), 0, (0)), 100000000, 0, -152), 0), 100000000, 0, -151), 0, (("vernac/vernacextend.mli", 131, 4088, 4088), ("vernac/vernacextend.mli", 131, 4088, 4147), 0), 0, Tag1 ("Vernacextend", 78)), 0); (("vtmodifyproof", 1238), ((Tag1 (0, (Tag1 (("pstate"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Declare")), "Proof"), "t"), 0, (0)), 100000000, 0, -150), (Tag3 (Tag1 (Tag1 ((Tag2 ("Declare")), "Proof"), "t"), 0, (0)), 100000000, 0, -149), 0), 100000000, 0, -148), (Tag3 ((("typed_vernac", 1233)), 0, (0)), 100000000, 0, -147), 0), 100000000, 0, -146), 0, (("vernac/vernacextend.mli", 132, 4148, 4148), ("vernac/vernacextend.mli", 132, 4148, 4227), 0), 0, Tag1 ("Vernacextend", 79)), 0); (("vtreadproofopt", 1239), ((Tag1 (0, (Tag1 (("pstate"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Declare")), "Proof"), "t"), 0, (0)), 100000000, 0, -145)], (0)), 100000000, 0, -144), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -143), 0), 100000000, 0, -142), (Tag3 ((("typed_vernac", 1233)), 0, (0)), 100000000, 0, -141), 0), 100000000, 0, -140), 0, (("vernac/vernacextend.mli", 133, 4228, 4228), ("vernac/vernacextend.mli", 133, 4228, 4304), 0), 0, Tag1 ("Vernacextend", 80)), 0); (("vtreadproof", 1240), ((Tag1 (0, (Tag1 (("pstate"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Declare")), "Proof"), "t"), 0, (0)), 100000000, 0, -139), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -138), 0), 100000000, 0, -137), (Tag3 ((("typed_vernac", 1233)), 0, (0)), 100000000, 0, -136), 0), 100000000, 0, -135), 0, (("vernac/vernacextend.mli", 134, 4305, 4305), ("vernac/vernacextend.mli", 134, 4305, 4371), 0), 0, Tag1 ("Vernacextend", 81)), 0); (("vtreadprogram", 1241), ((Tag1 (0, (Tag1 (("pm"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Declare")), "OblState"), "t"), 0, (0)), 100000000, 0, -134), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -133), 0), 100000000, 0, -132), (Tag3 ((("typed_vernac", 1233)), 0, (0)), 100000000, 0, -131), 0), 100000000, 0, -130), 0, (("vernac/vernacextend.mli", 135, 4372, 4372), ("vernac/vernacextend.mli", 135, 4372, 4439), 0), 0, Tag1 ("Vernacextend", 82)), 0); (("vtmodifyprogram", 1242), ((Tag1 (0, (Tag1 (("pm"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Declare")), "OblState"), "t"), 0, (0)), 100000000, 0, -129), (Tag3 (Tag1 (Tag1 ((Tag2 ("Declare")), "OblState"), "t"), 0, (0)), 100000000, 0, -128), 0), 100000000, 0, -127), (Tag3 ((("typed_vernac", 1233)), 0, (0)), 100000000, 0, -126), 0), 100000000, 0, -125), 0, (("vernac/vernacextend.mli", 136, 4440, 4440), ("vernac/vernacextend.mli", 136, 4440, 4523), 0), 0, Tag1 ("Vernacextend", 83)), 0); (("vtdeclareprogram", 1243), ((Tag1 (0, (Tag1 (("pm"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Declare")), "OblState"), "t"), 0, (0)), 100000000, 0, -124), (Tag3 (Tag1 (Tag1 ((Tag2 ("Declare")), "Proof"), "t"), 0, (0)), 100000000, 0, -123), 0), 100000000, 0, -122), (Tag3 ((("typed_vernac", 1233)), 0, (0)), 100000000, 0, -121), 0), 100000000, 0, -120), 0, (("vernac/vernacextend.mli", 137, 4524, 4524), ("vernac/vernacextend.mli", 137, 4524, 4605), 0), 0, Tag1 ("Vernacextend", 84)), 0); (("vtopenproofprogram", 1244), ((Tag1 (0, (Tag1 (("pm"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Declare")), "OblState"), "t"), 0, (0)), 100000000, 0, -119), (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Declare")), "OblState"), "t"), 0, (0)), 100000000, 0, -117); (Tag3 (Tag1 (Tag1 ((Tag2 ("Declare")), "Proof"), "t"), 0, (0)), 100000000, 0, -118)]), 100000000, 0, -116), 0), 100000000, 0, -115), (Tag3 ((("typed_vernac", 1233)), 0, (0)), 100000000, 0, -114), 0), 100000000, 0, -113), 0, (("vernac/vernacextend.mli", 138, 4606, 4606), ("vernac/vernacextend.mli", 138, 4606, 4710), 0), 0, Tag1 ("Vernacextend", 85)), 0); Tag1 (("vernac_command", 1245), (0, 0, 0, 1, ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -112)], (0)), 100000000, 0, -111), (Tag1 (("atts"), (Tag3 (Tag1 ((Tag2 ("Attributes")), "vernac_flags"), 0, (0)), 100000000, 0, -110), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -109), (Tag3 ((("typed_vernac", 1233)), 0, (0)), 100000000, 0, -108), 0), 100000000, 0, -107), 0), 100000000, 0, -106), 0), 100000000, 0, -105)), 0, 0, 0, 0, (("vernac/vernacextend.mli", 140, 4712, 4712), ("vernac/vernacextend.mli", 140, 4712, 4800), 0), 0, 0, 0, Tag1 ("Vernacextend", 86)), 1, 0); Tag1 (("plugin_args", 1246), (0, 0, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Genarg")), "raw_generic_argument"), 0, (0)), 100000000, 0, -104)], (0)), 100000000, 0, -103)), 0, 0, 0, 0, (("vernac/vernacextend.mli", 142, 4802, 4802), ("vernac/vernacextend.mli", 142, 4802, 4853), 0), 0, 0, 0, Tag1 ("Vernacextend", 88)), 1, 0); (("type_vernac", 1247), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Vernacexpr")), "extend_name"), 0, (0)), 100000000, 0, -102), (Tag1 (0, (Tag3 ((("plugin_args", 1246)), 0, (0)), 100000000, 0, -101), (Tag3 ((("vernac_command", 1245)), 0, (0)), 100000000, 0, -100), 0), 100000000, 0, -99), 0), 100000000, 0, -98), 0, (("vernac/vernacextend.mli", 144, 4855, 4855), ("vernac/vernacextend.mli", 144, 4855, 4928), 0), 0, Tag1 ("Vernacextend", 89)), 0); Tag1 (("classifier", 1248), (0, 0, 0, 1, ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Genarg")), "raw_generic_argument"), 0, (0)), 100000000, 0, -97)], (0)), 100000000, 0, -96), (Tag3 ((("vernac_classification", 1221)), 0, (0)), 100000000, 0, -95), 0), 100000000, 0, -94)), 0, 0, 0, 0, (("vernac/vernacextend.mli", 148, 4956, 4956), ("vernac/vernacextend.mli", 148, 4956, 5031), 0), 0, 0, 0, Tag1 ("Vernacextend", 90)), 1, 0); Tag1 (("ty_sig", 1249), ([((("_")), 100000000, 0, -92); ((("_")), 100000000, 0, -93)], 2, Tag1 ([(("TyNil", 717), (0), ((Tag3 ((("ty_sig", 1249)), [(Tag3 ((("vernac_command", 1245)), 0, (0)), 100000000, 0, -75); (Tag3 ((("vernac_classification", 1221)), 0, (0)), 100000000, 0, -76)], (0)), 100000000, 0, -74)), (("vernac/vernacextend.mli", 151, 5054, 5054), ("vernac/vernacextend.mli", 151, 5054, 5110), 0), 0, Tag1 ("Vernacextend", 92)); (("TyTerminal", 718), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -80); (Tag3 ((("ty_sig", 1249)), [((("r")), 100000000, 0, -78); ((("s")), 100000000, 0, -79)], (0)), 100000000, 0, -81)]), ((Tag3 ((("ty_sig", 1249)), [((("r")), 100000000, 0, -78); ((("s")), 100000000, 0, -79)], (0)), 100000000, 0, -77)), (("vernac/vernacextend.mli", 152, 5111, 5111), ("vernac/vernacextend.mli", 152, 5111, 5169), 0), 0, Tag1 ("Vernacextend", 93)); (("TyNonTerminal", 719), ([(Tag3 (Tag1 ((Tag2 ("Extend")), "ty_user_symbol"), [((("a")), 100000000, 0, -85); ((("b")), 100000000, 0, -89); ((("c")), 100000000, 0, -90)], (0)), 100000000, 0, -88); (Tag3 ((("ty_sig", 1249)), [((("r")), 100000000, 0, -84); ((("s")), 100000000, 0, -87)], (0)), 100000000, 0, -91)]), ((Tag3 ((("ty_sig", 1249)), [(Tag1 (0, ((("a")), 100000000, 0, -85), ((("r")), 100000000, 0, -84), 0), 100000000, 0, -83); (Tag1 (0, ((("a")), 100000000, 0, -85), ((("s")), 100000000, 0, -87), 0), 100000000, 0, -86)], (0)), 100000000, 0, -82)), (("vernac/vernacextend.mli", 153, 5170, 5170), ("vernac/vernacextend.mli", 155, 5246, 5277), 0), 0, Tag1 ("Vernacextend", 94))], 0), 1, 0, [63; 63], [0; 0], 0, 0, (("vernac/vernacextend.mli", 150, 5033, 5033), ("vernac/vernacextend.mli", 155, 5246, 5277), 0), 0, 0, 0, Tag1 ("Vernacextend", 91)), 1, 0); Tag1 (("ty_ml", 1250), (0, 0, Tag1 ([(("TyML", 733), ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -69); (Tag3 ((("ty_sig", 1249)), [((("r")), 100000000, 0, -71); ((("s")), 100000000, 0, -72)], (0)), 100000000, 0, -70); ((("r")), 100000000, 0, -71); (Tag3 ((Tag3 ("option", 10)), [((("s")), 100000000, 0, -72)], (0)), 100000000, 0, -73)]), ((Tag3 ((("ty_ml", 1250)), 0, (0)), 100000000, 0, -68)), (("vernac/vernacextend.mli", 157, 5279, 5292), ("vernac/vernacextend.mli", 157, 5279, 5364), 0), 0, Tag1 ("Vernacextend", 96))], 0), 1, 0, 0, 0, 0, 0, (("vernac/vernacextend.mli", 157, 5279, 5279), ("vernac/vernacextend.mli", 157, 5279, 5364), 0), 0, 0, 0, Tag1 ("Vernacextend", 95)), 1, 0); (("static_vernac_extend", 1251), ((Tag1 (("plugin"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -67)], (0)), 100000000, 0, -66), (Tag1 (("command"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -65), (Tag1 (Tag1 ("classifier"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -64), (Tag3 ((("vernac_classification", 1221)), 0, (0)), 100000000, 0, -63), 0), 100000000, 0, -62)], (0)), 100000000, 0, -61), (Tag1 (Tag1 ("entry"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Pcoq")), "Entry"), "t"), [(Tag3 (Tag1 ((Tag2 ("Vernacexpr")), "vernac_expr"), 0, (0)), 100000000, 0, -60)], (0)), 100000000, 0, -59)], (0)), 100000000, 0, -58), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("ty_ml", 1250)), 0, (0)), 100000000, 0, -57)], (0)), 100000000, 0, -56), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -55), 0), 100000000, 0, -54), 0), 100000000, 0, -53), 0), 100000000, 0, -52), 0), 100000000, 0, -51), 0), 100000000, 0, -50), 0, (("vernac/vernacextend.mli", 170, 5834, 5834), ("vernac/vernacextend.mli", 175, 6006, 6026), 0), 0, Tag1 ("Vernacextend", 97)), 0); (("static_linking_done", 1252), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -49), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -48), 0), 100000000, 0, -47), 0, (("vernac/vernacextend.mli", 178, 6108, 6108), ("vernac/vernacextend.mli", 178, 6108, 6146), 0), 0, Tag1 ("Vernacextend", 98)), 0); (("declare_dynamic_vernac_extend", 1253), ((Tag1 (("command"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -46), (Tag1 (Tag1 ("entry"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Pcoq")), "Entry"), "t"), [(Tag3 (Tag1 ((Tag2 ("Vernacexpr")), "vernac_expr"), 0, (0)), 100000000, 0, -45)], (0)), 100000000, 0, -44)], (0)), 100000000, 0, -43), (Tag1 (("depr"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -42), (Tag1 (0, ((("s")), 100000000, 0, -41), (Tag1 (0, (Tag3 ((("ty_sig", 1249)), [((("r")), 100000000, 0, -39); ((("s")), 100000000, 0, -41)], (0)), 100000000, 0, -40), (Tag1 (0, ((("r")), 100000000, 0, -39), (Tag3 (Tag1 ((Tag2 ("Vernacexpr")), "extend_name"), 0, (0)), 100000000, 0, -38), 0), 100000000, 0, -37), 0), 100000000, 0, -36), 0), 100000000, 0, -35), 0), 100000000, 0, -34), 0), 100000000, 0, -33), 0), 100000000, 0, -32), 0, (("vernac/vernacextend.mli", 194, 6776, 6776), ("vernac/vernacextend.mli", 201, 6989, 7016), 0), 0, Tag1 ("Vernacextend", 99)), 0); Tag1 (("argument_rule", 1254), ([((("a")), 100000000, 0, -29)], 1, Tag1 ([(("Arg_alias", 793), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Pcoq")), "Entry"), "t"), [((("a")), 100000000, 0, -29)], (0)), 100000000, 0, -28)]), 0, (("vernac/vernacextend.mli", 206, 7077, 7077), ("vernac/vernacextend.mli", 206, 7077, 7107), 0), 0, Tag1 ("Vernacextend", 101)); (("Arg_rules", 794), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Pcoq")), "Production"), "t"), [((("a")), 100000000, 0, -29)], (0)), 100000000, 0, -31)], (0)), 100000000, 0, -30)]), 0, (("vernac/vernacextend.mli", 209, 7249, 7249), ("vernac/vernacextend.mli", 209, 7249, 7289), 0), 0, Tag1 ("Vernacextend", 102))], 0), 1, 0, [15], [0], 0, 0, (("vernac/vernacextend.mli", 205, 7053, 7053), ("vernac/vernacextend.mli", 209, 7249, 7289), 0), 0, 0, 0, Tag1 ("Vernacextend", 100)), 1, 0); Tag1 (("vernac_argument", 1255), ([((("a")), 100000000, 0, -24)], 1, [[(("arg_printer", 1211), 0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -26), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -25), (Tag1 (0, ((("a")), 100000000, 0, -24), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -23), 0), 100000000, 0, -22), 0), 100000000, 0, -21), 0), 100000000, 0, -20), (("vernac/vernacextend.mli", 214, 7467, 7469), ("vernac/vernacextend.mli", 214, 7467, 7525), 0), 0, Tag1 ("Vernacextend", 104)); (("arg_parsing", 1212), 0, (Tag3 ((("argument_rule", 1254)), [((("a")), 100000000, 0, -24)], (0)), 100000000, 0, -27), (("vernac/vernacextend.mli", 215, 7526, 7528), ("vernac/vernacextend.mli", 215, 7526, 7559), 0), 0, Tag1 ("Vernacextend", 105))]], 1, 0, [47], [0], 0, 0, (("vernac/vernacextend.mli", 213, 7439, 7439), ("vernac/vernacextend.mli", 216, 7560, 7561), 0), 0, 0, 0, Tag1 ("Vernacextend", 103)), 1, 0); (("vernac_argument_extend", 1256), ((Tag1 (("plugin"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -19), (Tag1 (("name"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -18), (Tag1 (0, (Tag3 ((("vernac_argument", 1255)), [((("a")), 100000000, 0, -13)], (0)), 100000000, 0, -17), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Genarg")), "genarg_type"), [((("a")), 100000000, 0, -13); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -14); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -15)], (0)), 100000000, 0, -12); (Tag3 (Tag1 (Tag1 ((Tag2 ("Pcoq")), "Entry"), "t"), [((("a")), 100000000, 0, -13)], (0)), 100000000, 0, -16)]), 100000000, 0, -11), 0), 100000000, 0, -10), 0), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("vernac/vernacextend.mli", 218, 7563, 7563), ("vernac/vernacextend.mli", 219, 7646, 7701), 0), 0, Tag1 ("Vernacextend", 106)), 0); (("get_vernac_classifier", 1257), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Vernacexpr")), "extend_name"), 0, (0)), 100000000, 0, -7), (Tag3 ((("classifier", 1248)), 0, (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("vernac/vernacextend.mli", 222, 7730, 7730), ("vernac/vernacextend.mli", 222, 7730, 7794), 0), 0, Tag1 ("Vernacextend", 107)), 0); (("classify_as_query", 1258), ((Tag3 ((("vernac_classification", 1221)), 0, (0)), 100000000, 0, -4), 0, (("vernac/vernacextend.mli", 225, 7833, 7833), ("vernac/vernacextend.mli", 225, 7833, 7878), 0), 0, Tag1 ("Vernacextend", 108)), 0); (("classify_as_sideeff", 1259), ((Tag3 ((("vernac_classification", 1221)), 0, (0)), 100000000, 0, -3), 0, (("vernac/vernacextend.mli", 226, 7879, 7879), ("vernac/vernacextend.mli", 226, 7879, 7926), 0), 0, Tag1 ("Vernacextend", 109)), 0); (("classify_as_proofstep", 1260), ((Tag3 ((("vernac_classification", 1221)), 0, (0)), 100000000, 0, -2), 0, (("vernac/vernacextend.mli", 227, 7927, 7927), ("vernac/vernacextend.mli", 227, 7927, 7976), 0), 0, Tag1 ("Vernacextend", 110)), 0)], "Vernacextend", [("Vernacextend", ("I\b\021\167O\210\166\190\253\025\018/\153\025\217\004")); ("Z", ("\253\196\2168\027\199O\134\220\218\031'\1484\233o")); ("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Vmemitcodes", ("wCd\138\165\158DD\241gH\236.\210\197\247")); ("Vmbytecodes", ("\025\021\151\137Dx\149W\236+[\143f\208\160\016")); ("Vernacexpr", ("Lu|g\028\024j\193\000\234\175\209&\211]\137")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Unix", (":B72R\011\005Sj\189)\011\239PH\254")); ("UnivSubst", ("\190qu\031mc\130\181\003G]\132\"\219m)")); ("UnivProblem", ("6'\161\018\181\001.\253\000\141a6\171\1727\155")); ("UnivNames", ("%\151_\209%+JM$n\001\232\194n\178N")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Unification", ("\017\027\157=\255\1914L\020\213h\154.\219\005\170")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UState", ("SD\203\215|\136\n\251\239\208\148\215C\n\167\005")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("Typeclasses", ("KO\1297x\192\210\231\001\1824l\135\192\160|")); ("Type_errors", ("7\157\162-\214M\206\196\228\191\005v\134\177\144\134")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Tok", ("\162\196\180\135\219\014\184\165;\207\025\215\176g\188\225")); ("Tactypes", ("\143E\135*\195\151\144H\151M\011($\017\159\203")); ("Tacred", ("\133d\143\1310z\030\237\232\002\001\025\147\140\215:")); ("Summary", ("\148G\135\226\024L3\246\021\028U\146\164`\253\250")); ("Store", ("/dT\252\145\179pq\216{\181\206\190K+U")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Random", ("\020\005Xq\171\026\218\152X\135\254\023\133zK\200")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Stateid", ("\183\165\247\166~\005\017.\179f.\178n\255(\137")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("Section", ("\245\207\b\021\142v=\155#w\246}\"4b\006")); ("Safe_typing", (")\250?\164\145\132\241\127\186\152h+\145\"\237l")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("RetrieveObl", ("\181(\0225\214z\024#d\246.M\015.i\210")); ("Reductionops", ("\179\023P\218\146Uh\014IS\196C\031q~#")); ("Range", ("\218\130\001r\237\r\144\171\164\021l\155\196\143sg")); ("Pvernac", ("\030z\016\002I\233\195\217\026PC5\147(\186\252")); ("Proofview_monad", ("\218\196\189S\147\216\129\221\231\224v\228O\024*\239")); ("Proofview", ("\245\140U\027\236\199\199&\242\156\199YG\250tA")); ("Proof_using", ("\015\162\022\031Y\152\208\231;\015\140;\163\177\251\196")); ("Proof_bullet", ("\249\179=\253g\211\149\212\t\217_0\179\197k\179")); ("Proof", ("\249\030\200g\248\164o&\tS\132\rTl\1736")); ("Primred", ("\158G\192\182\224\196\144*\174y_E\165\012\137C")); ("Pretyping", ("\151\160\191\149\149Ff\195\171g\189\156\r\166n\189")); ("Pretype_errors", ("\155\229\201\176\163\234\203C\127\227\141\174j\199\200H")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Pcoq", ("\231\158\223M\188\002_J\154\240\176\002\022p\243\154")); ("Pattern", ("\195C\140Wb=\022\222\208\227^K\003\020\215X")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("NumTok", ("vd\023^\251\244B\166\145'\156\196-0\027\169")); ("Notationextern", ("\000\022b5`t\134]\192f4\131\187\192\152\160")); ("Notation_term", ("5\002\017\217b\193nc>\239\239\237\244\031\173?")); ("Notation", ("\243\219),\220\160v\230\t$\246\188\252\172\152\147")); ("NeList", ("$\131M\175\196\245\161\207\129\012?\158\175\138\160\247")); ("Nativevalues", ("8:\007\025e\226c,\001\171\146#l\210\171\152")); ("Nativelib", ("V\239\205Y1\147E:,\176\196Hy\1483|")); ("Nativecode", ("\190\185\255\006m\012\210\163\138Rz\247\15283\183")); ("Nametab", ("1\018\163\254\225\2178\025DI\0271Q\198\134\140")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Namegen", ("\187\222\224T\255\020\1808-\212*\164\131\177\157x")); ("Monad", ("\244\171T\157\194p\187\160\149\195{\132\222\020\253\148")); ("Modintern", ("F\222V\246R\143{\n\240\004;;;\011\026\223")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Metasyntax", ("\177D\147\n?i\139\193\238 \018\030)\\\244\\")); ("Ltac_pretype", ("\224\"\167\018i:U\172>\188\128$\r\252\020T")); ("Logic_monad", ("\130\157\160Q\163vQ\137\184\2242\209\128\024\220i")); ("Locus", ("_\002\003W\246\181\225\242Uf\139\226\176\174\192I")); ("Locality", ("\204\134r\227\235'\016\197\215r\210\133\242\226U%")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Libobject", ("\132}t\226hl\213L\210\172\167pc\012~\129")); ("Libnames", ("fp\0255\167\162\209\153\137\161\169#\246\193\003\198")); ("Lib", ("8\018\021\210\020\136$\149\164=\007\002\218\026RX")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Impargs", ("\021\197\1992>\rm\185\141\"iHY\133\138/")); ("Hook", ("\183\194\223\003\155\169',\187\240a;E\b\1396")); ("Hints", ("\007\130]H\\t(\131\000}\205\137H\148\250\166")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Gramlib__Stream", ("\248\\H\205_76\253\136\146\200\031\165\021=t")); ("Gramlib__Plexing", ("\028\200j\003G\198\183\184f\243\148a\020\011\160\171")); ("Gramlib__LStream", ("B\143\148\148@\016M\192w\155\223\189\218\224\002\004")); ("Gramlib__Grammar", ("zuU\178r\159\234NC\015_hKT\240\151")); ("Gramlib__Gramext", ("B\171oA\172\212\187>\175\233Q\145\"\176TM")); ("Gramlib", ("\154\143\210e\021i\246\176\224\194\220\217\007\145\139A")); ("Goptions", ("i>Rt=\183g\153\190\144\235u\248\247*e")); ("Goal_select", ("\235$\175\023t\178\194.Ivlz\005\211\173\n")); ("Globnames", ("W\004\172T\214\181H\220\232\160LSW\006\130\226")); ("Glob_term", ("\165=a\227\160\153.\021_$\232\209T\236\153O")); ("GlobEnv", ("(\152\019ok\006R\183\193\145\137\133<\171\005\231")); ("Genredexpr", ("rz\204\143\007`VgI\195P\168sO\198\012")); ("Genlambda", ("\170}\024\241\141\222\136S\169\219\2212i\134KI")); ("Geninterp", ("2S\151\191\189\159\004\188;\224d\199|U\004\028")); ("Genintern", ("\152Ac\019=n\235\197\141\224T\162\192\148eg")); ("Genarg", ("\1434\015\001\152\196\005s\156\136\195\185\247\b3\t")); ("Future", ("\158b\028\190\203\016U\128\195O\140\249\240\129\252s")); ("Ftactic", ("K\172\205\128\241\162\160\201\202\1561o\180L\206:")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Extend", ("\179&!W\163V\006\245\018\168\021\001\224s\168\234")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evd", ("\211\205p\193\216\129r\006\239oN\142ar\196\175")); ("Evarutil", ("\005\175\132e\164O\223svi \252\232\138\022\137")); ("Evarsolve", ("\000&\228\016}j\199\t\229\173\127\024\219\199\184\178")); ("Evardefine", ("\178\167R\199\158\242\001Y\215<\151\020\206\153\227\019")); ("Evar_kinds", ("\023L\186\132\218}\254\221\185\198\220\200h\003{\021")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Environ", ("\171b\1579\229<\003Z\147IL\225X\254\182\204")); ("Entries", ("\172\201\198\221Ap\027_{\174\141C\021\";p")); ("EConstr", ("\201aW\156\157;N\004\201V\208\006L\166\211)")); ("Dyn", ("\131z`\205v\2306\007x\027&K.?;\169")); ("Deprecation", ("\226:\146\245\190;\1929\254@\247a\218\244\134\189")); ("Decls", ("\140C{$\142?\215\153\180\186h;\153\139\187\129")); ("Declaremods", ("\019d|\168<\144\239o\017\222\248K^\157\198\179")); ("Declare", ("\ndh\139\180\185\245\190\133\240\127A\190b\197\023")); ("Declarations", ("\239\137n\019\030w$\182\166z^{\b\206\163\175")); ("DAst", ("\224/\200)\007\184ni\134\b\139\204\241\005w\212")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Conversion", ("\158\150&\195M\tv\127|\029\158RRK\211A")); ("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constrintern", ("\221\031i\248\218\212\161/UQA\147\1348GM")); ("Constrexpr", ("p'r\245\184chL\183\249\"\213]\1741\237")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("Coercionops", ("\238\240\220\191\201\bMazv\159\227\236?\147>")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CWarnings", ("\132\220\150\227\215\239t\217\132\220'JX\188\246c")); ("CUnix", ("\140Zl\153\167\011J\015\005|th\247OTu")); ("CString", ("\243~4C\023~\169\148x\206\165\207\195\177Q\184")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CLexer", ("\158\155\242\159%gC\237\011\196\158\255\163\217\239G")); ("CEphemeron", ("\204I\179-\206(x4\173\229\250\001PkH\151")); ("CDebug", ("^4\210p7\239!3\138\138\213?\239`\250\157")); ("CClosure", ("\167\b\022\241V-\r\253\b\002\000j]\223%\142")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("Attributes", ("\2145\146P\224\163B1\135\232\204SD\129^\141")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])
val classify_as_proofstep : vernac_classification

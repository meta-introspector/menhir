type mapper = {
  attribute : mapper -> Parsetree.attribute -> Parsetree.attribute;
  attributes : mapper -> Parsetree.attribute list -> Parsetree.attribute list;
  binding_op : mapper -> Parsetree.binding_op -> Parsetree.binding_op;
  case : mapper -> Parsetree.case -> Parsetree.case;
  cases : mapper -> Parsetree.case list -> Parsetree.case list;
  class_declaration :
    mapper -> Parsetree.class_declaration -> Parsetree.class_declaration;
  class_description :
    mapper -> Parsetree.class_description -> Parsetree.class_description;
  class_expr : mapper -> Parsetree.class_expr -> Parsetree.class_expr;
  class_field : mapper -> Parsetree.class_field -> Parsetree.class_field;
  class_signature :
    mapper -> Parsetree.class_signature -> Parsetree.class_signature;
  class_structure :
    mapper -> Parsetree.class_structure -> Parsetree.class_structure;
  class_type : mapper -> Parsetree.class_type -> Parsetree.class_type;
  class_type_declaration :
    mapper ->
    Parsetree.class_type_declaration -> Parsetree.class_type_declaration;
  class_type_field :
    mapper -> Parsetree.class_type_field -> Parsetree.class_type_field;
  constant : mapper -> Parsetree.constant -> Parsetree.constant;
  constructor_declaration :
    mapper ->
    Parsetree.constructor_declaration -> Parsetree.constructor_declaration;
  expr : mapper -> Parsetree.expression -> Parsetree.expression;
  extension : mapper -> Parsetree.extension -> Parsetree.extension;
  extension_constructor :
    mapper ->
    Parsetree.extension_constructor -> Parsetree.extension_constructor;
  include_declaration :
    mapper -> Parsetree.include_declaration -> Parsetree.include_declaration;
  include_description :
    mapper -> Parsetree.include_description -> Parsetree.include_description;
  label_declaration :
    mapper -> Parsetree.label_declaration -> Parsetree.label_declaration;
  location : mapper -> Location.t -> Location.t;
  module_binding :
    mapper -> Parsetree.module_binding -> Parsetree.module_binding;
  module_declaration :
    mapper -> Parsetree.module_declaration -> Parsetree.module_declaration;
  module_substitution :
    mapper -> Parsetree.module_substitution -> Parsetree.module_substitution;
  module_expr : mapper -> Parsetree.module_expr -> Parsetree.module_expr;
  module_type : mapper -> Parsetree.module_type -> Parsetree.module_type;
  module_type_declaration :
    mapper ->
    Parsetree.module_type_declaration -> Parsetree.module_type_declaration;
  open_declaration :
    mapper -> Parsetree.open_declaration -> Parsetree.open_declaration;
  open_description :
    mapper -> Parsetree.open_description -> Parsetree.open_description;
  pat : mapper -> Parsetree.pattern -> Parsetree.pattern;
  payload : mapper -> Parsetree.payload -> Parsetree.payload;
  signature : mapper -> Parsetree.signature -> Parsetree.signature;
  signature_item :
    mapper -> Parsetree.signature_item -> Parsetree.signature_item;
  structure : mapper -> Parsetree.structure -> Parsetree.structure;
  structure_item :
    mapper -> Parsetree.structure_item -> Parsetree.structure_item;
  typ : mapper -> Parsetree.core_type -> Parsetree.core_type;
  type_declaration :
    mapper -> Parsetree.type_declaration -> Parsetree.type_declaration;
  type_extension :
    mapper -> Parsetree.type_extension -> Parsetree.type_extension;
  type_exception :
    mapper -> Parsetree.type_exception -> Parsetree.type_exception;
  type_kind : mapper -> Parsetree.type_kind -> Parsetree.type_kind;
  value_binding :
    mapper -> Parsetree.value_binding -> Parsetree.value_binding;
  value_description :
    mapper -> Parsetree.value_description -> Parsetree.value_description;
  with_constraint :
    mapper -> Parsetree.with_constraint -> Parsetree.with_constraint;
}
val default_mapper : mapper
val tool_name : unit -> string
val apply : source:string -> target:string -> mapper -> unit
val run_main : (string list -> mapper) -> unit
val register_function : (string -> (string list -> mapper) -> unit) ref
val register : string -> (string list -> mapper) -> unit
val map_opt : ('a -> 'b) -> 'a option -> 'b option
val extension_of_error : Location.error -> Parsetree.extension
val attribute_of_warning : Location.t -> string -> Parsetree.attribute
val add_ppx_context_str :
  tool_name:string -> Parsetree.structure -> Parsetree.structure
val add_ppx_context_sig :
  tool_name:string -> Parsetree.signature -> Parsetree.signature
val drop_ppx_context_str :
  restore:bool -> Parsetree.structure -> Parsetree.structure
val drop_ppx_context_sig :
  restore:bool -> Parsetree.signature -> Parsetree.signature
val set_cookie : string -> Parsetree.expression -> unit
("DEBUG:rule", [Tag1 (("mapper", 514), (0, 0, [[(("attribute", 343), 0, (Tag1 (0, (Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -84), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "attribute"), 0, (0)), 100000000, 0, -83), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "attribute"), 0, (0)), 100000000, 0, -82), 0), 100000000, 0, -81), 0), 100000000, 0, -80), (("parsing/ast_mapper.mli", 59, 2388, 2390), ("parsing/ast_mapper.mli", 59, 2388, 2434), 0), 0, Tag1 ("Ast_mapper", 3)); (("attributes", 344), 0, (Tag1 (0, (Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -91), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Parsetree")), "attribute"), 0, (0)), 100000000, 0, -90)], (0)), 100000000, 0, -89), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Parsetree")), "attribute"), 0, (0)), 100000000, 0, -88)], (0)), 100000000, 0, -87), 0), 100000000, 0, -86), 0), 100000000, 0, -85), (("parsing/ast_mapper.mli", 60, 2435, 2437), ("parsing/ast_mapper.mli", 60, 2435, 2492), 0), 0, Tag1 ("Ast_mapper", 4)); (("binding_op", 345), 0, (Tag1 (0, (Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -96), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "binding_op"), 0, (0)), 100000000, 0, -95), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "binding_op"), 0, (0)), 100000000, 0, -94), 0), 100000000, 0, -93), 0), 100000000, 0, -92), (("parsing/ast_mapper.mli", 61, 2493, 2495), ("parsing/ast_mapper.mli", 61, 2493, 2542), 0), 0, Tag1 ("Ast_mapper", 5)); (("case", 346), 0, (Tag1 (0, (Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -101), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "case"), 0, (0)), 100000000, 0, -100), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "case"), 0, (0)), 100000000, 0, -99), 0), 100000000, 0, -98), 0), 100000000, 0, -97), (("parsing/ast_mapper.mli", 62, 2543, 2545), ("parsing/ast_mapper.mli", 62, 2543, 2574), 0), 0, Tag1 ("Ast_mapper", 6)); (("cases", 347), 0, (Tag1 (0, (Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -108), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Parsetree")), "case"), 0, (0)), 100000000, 0, -107)], (0)), 100000000, 0, -106), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Parsetree")), "case"), 0, (0)), 100000000, 0, -105)], (0)), 100000000, 0, -104), 0), 100000000, 0, -103), 0), 100000000, 0, -102), (("parsing/ast_mapper.mli", 63, 2575, 2577), ("parsing/ast_mapper.mli", 63, 2575, 2617), 0), 0, Tag1 ("Ast_mapper", 7)); (("class_declaration", 348), 0, (Tag1 (0, (Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -113), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "class_declaration"), 0, (0)), 100000000, 0, -112), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "class_declaration"), 0, (0)), 100000000, 0, -111), 0), 100000000, 0, -110), 0), 100000000, 0, -109), (("parsing/ast_mapper.mli", 64, 2618, 2620), ("parsing/ast_mapper.mli", 64, 2618, 2688), 0), 0, Tag1 ("Ast_mapper", 8)); (("class_description", 349), 0, (Tag1 (0, (Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -118), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "class_description"), 0, (0)), 100000000, 0, -117), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "class_description"), 0, (0)), 100000000, 0, -116), 0), 100000000, 0, -115), 0), 100000000, 0, -114), (("parsing/ast_mapper.mli", 65, 2689, 2691), ("parsing/ast_mapper.mli", 65, 2689, 2759), 0), 0, Tag1 ("Ast_mapper", 9)); (("class_expr", 350), 0, (Tag1 (0, (Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -123), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "class_expr"), 0, (0)), 100000000, 0, -122), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "class_expr"), 0, (0)), 100000000, 0, -121), 0), 100000000, 0, -120), 0), 100000000, 0, -119), (("parsing/ast_mapper.mli", 66, 2760, 2762), ("parsing/ast_mapper.mli", 66, 2760, 2809), 0), 0, Tag1 ("Ast_mapper", 10)); (("class_field", 351), 0, (Tag1 (0, (Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -128), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "class_field"), 0, (0)), 100000000, 0, -127), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "class_field"), 0, (0)), 100000000, 0, -126), 0), 100000000, 0, -125), 0), 100000000, 0, -124), (("parsing/ast_mapper.mli", 67, 2810, 2812), ("parsing/ast_mapper.mli", 67, 2810, 2862), 0), 0, Tag1 ("Ast_mapper", 11)); (("class_signature", 352), 0, (Tag1 (0, (Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -133), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "class_signature"), 0, (0)), 100000000, 0, -132), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "class_signature"), 0, (0)), 100000000, 0, -131), 0), 100000000, 0, -130), 0), 100000000, 0, -129), (("parsing/ast_mapper.mli", 68, 2863, 2865), ("parsing/ast_mapper.mli", 68, 2863, 2927), 0), 0, Tag1 ("Ast_mapper", 12)); (("class_structure", 353), 0, (Tag1 (0, (Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -138), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "class_structure"), 0, (0)), 100000000, 0, -137), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "class_structure"), 0, (0)), 100000000, 0, -136), 0), 100000000, 0, -135), 0), 100000000, 0, -134), (("parsing/ast_mapper.mli", 69, 2928, 2930), ("parsing/ast_mapper.mli", 69, 2928, 2992), 0), 0, Tag1 ("Ast_mapper", 13)); (("class_type", 354), 0, (Tag1 (0, (Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -143), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "class_type"), 0, (0)), 100000000, 0, -142), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "class_type"), 0, (0)), 100000000, 0, -141), 0), 100000000, 0, -140), 0), 100000000, 0, -139), (("parsing/ast_mapper.mli", 70, 2993, 2995), ("parsing/ast_mapper.mli", 70, 2993, 3042), 0), 0, Tag1 ("Ast_mapper", 14)); (("class_type_declaration", 355), 0, (Tag1 (0, (Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -148), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "class_type_declaration"), 0, (0)), 100000000, 0, -147), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "class_type_declaration"), 0, (0)), 100000000, 0, -146), 0), 100000000, 0, -145), 0), 100000000, 0, -144), (("parsing/ast_mapper.mli", 71, 3043, 3045), ("parsing/ast_mapper.mli", 72, 3102, 3154), 0), 0, Tag1 ("Ast_mapper", 15)); (("class_type_field", 356), 0, (Tag1 (0, (Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -153), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "class_type_field"), 0, (0)), 100000000, 0, -152), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "class_type_field"), 0, (0)), 100000000, 0, -151), 0), 100000000, 0, -150), 0), 100000000, 0, -149), (("parsing/ast_mapper.mli", 73, 3155, 3157), ("parsing/ast_mapper.mli", 73, 3155, 3222), 0), 0, Tag1 ("Ast_mapper", 16)); (("constant", 357), 0, (Tag1 (0, (Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -158), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "constant"), 0, (0)), 100000000, 0, -157), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "constant"), 0, (0)), 100000000, 0, -156), 0), 100000000, 0, -155), 0), 100000000, 0, -154), (("parsing/ast_mapper.mli", 74, 3223, 3225), ("parsing/ast_mapper.mli", 74, 3223, 3266), 0), 0, Tag1 ("Ast_mapper", 17)); (("constructor_declaration", 358), 0, (Tag1 (0, (Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -163), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "constructor_declaration"), 0, (0)), 100000000, 0, -162), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "constructor_declaration"), 0, (0)), 100000000, 0, -161), 0), 100000000, 0, -160), 0), 100000000, 0, -159), (("parsing/ast_mapper.mli", 75, 3267, 3269), ("parsing/ast_mapper.mli", 76, 3328, 3382), 0), 0, Tag1 ("Ast_mapper", 18)); (("expr", 359), 0, (Tag1 (0, (Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -168), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "expression"), 0, (0)), 100000000, 0, -167), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "expression"), 0, (0)), 100000000, 0, -166), 0), 100000000, 0, -165), 0), 100000000, 0, -164), (("parsing/ast_mapper.mli", 77, 3383, 3385), ("parsing/ast_mapper.mli", 77, 3383, 3426), 0), 0, Tag1 ("Ast_mapper", 19)); (("extension", 360), 0, (Tag1 (0, (Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -173), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "extension"), 0, (0)), 100000000, 0, -172), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "extension"), 0, (0)), 100000000, 0, -171), 0), 100000000, 0, -170), 0), 100000000, 0, -169), (("parsing/ast_mapper.mli", 78, 3427, 3429), ("parsing/ast_mapper.mli", 78, 3427, 3473), 0), 0, Tag1 ("Ast_mapper", 20)); (("extension_constructor", 361), 0, (Tag1 (0, (Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -178), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "extension_constructor"), 0, (0)), 100000000, 0, -177), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "extension_constructor"), 0, (0)), 100000000, 0, -176), 0), 100000000, 0, -175), 0), 100000000, 0, -174), (("parsing/ast_mapper.mli", 79, 3474, 3476), ("parsing/ast_mapper.mli", 80, 3531, 3581), 0), 0, Tag1 ("Ast_mapper", 21)); (("include_declaration", 362), 0, (Tag1 (0, (Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -183), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "include_declaration"), 0, (0)), 100000000, 0, -182), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "include_declaration"), 0, (0)), 100000000, 0, -181), 0), 100000000, 0, -180), 0), 100000000, 0, -179), (("parsing/ast_mapper.mli", 81, 3582, 3584), ("parsing/ast_mapper.mli", 81, 3582, 3658), 0), 0, Tag1 ("Ast_mapper", 22)); (("include_description", 363), 0, (Tag1 (0, (Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -188), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "include_description"), 0, (0)), 100000000, 0, -187), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "include_description"), 0, (0)), 100000000, 0, -186), 0), 100000000, 0, -185), 0), 100000000, 0, -184), (("parsing/ast_mapper.mli", 82, 3659, 3661), ("parsing/ast_mapper.mli", 82, 3659, 3735), 0), 0, Tag1 ("Ast_mapper", 23)); (("label_declaration", 364), 0, (Tag1 (0, (Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -193), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "label_declaration"), 0, (0)), 100000000, 0, -192), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "label_declaration"), 0, (0)), 100000000, 0, -191), 0), 100000000, 0, -190), 0), 100000000, 0, -189), (("parsing/ast_mapper.mli", 83, 3736, 3738), ("parsing/ast_mapper.mli", 83, 3736, 3806), 0), 0, Tag1 ("Ast_mapper", 24)); (("location", 431), 0, (Tag1 (0, (Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -198), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -197), (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -196), 0), 100000000, 0, -195), 0), 100000000, 0, -194), (("parsing/ast_mapper.mli", 84, 3807, 3809), ("parsing/ast_mapper.mli", 84, 3807, 3854), 0), 0, Tag1 ("Ast_mapper", 25)); (("module_binding", 432), 0, (Tag1 (0, (Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -203), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "module_binding"), 0, (0)), 100000000, 0, -202), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "module_binding"), 0, (0)), 100000000, 0, -201), 0), 100000000, 0, -200), 0), 100000000, 0, -199), (("parsing/ast_mapper.mli", 85, 3855, 3857), ("parsing/ast_mapper.mli", 85, 3855, 3916), 0), 0, Tag1 ("Ast_mapper", 26)); (("module_declaration", 433), 0, (Tag1 (0, (Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -208), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "module_declaration"), 0, (0)), 100000000, 0, -207), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "module_declaration"), 0, (0)), 100000000, 0, -206), 0), 100000000, 0, -205), 0), 100000000, 0, -204), (("parsing/ast_mapper.mli", 86, 3917, 3919), ("parsing/ast_mapper.mli", 86, 3917, 3990), 0), 0, Tag1 ("Ast_mapper", 27)); (("module_substitution", 434), 0, (Tag1 (0, (Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -213), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "module_substitution"), 0, (0)), 100000000, 0, -212), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "module_substitution"), 0, (0)), 100000000, 0, -211), 0), 100000000, 0, -210), 0), 100000000, 0, -209), (("parsing/ast_mapper.mli", 87, 3991, 3993), ("parsing/ast_mapper.mli", 87, 3991, 4067), 0), 0, Tag1 ("Ast_mapper", 28)); (("module_expr", 435), 0, (Tag1 (0, (Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -218), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "module_expr"), 0, (0)), 100000000, 0, -217), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "module_expr"), 0, (0)), 100000000, 0, -216), 0), 100000000, 0, -215), 0), 100000000, 0, -214), (("parsing/ast_mapper.mli", 88, 4068, 4070), ("parsing/ast_mapper.mli", 88, 4068, 4120), 0), 0, Tag1 ("Ast_mapper", 29)); (("module_type", 436), 0, (Tag1 (0, (Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -223), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "module_type"), 0, (0)), 100000000, 0, -222), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "module_type"), 0, (0)), 100000000, 0, -221), 0), 100000000, 0, -220), 0), 100000000, 0, -219), (("parsing/ast_mapper.mli", 89, 4121, 4123), ("parsing/ast_mapper.mli", 89, 4121, 4173), 0), 0, Tag1 ("Ast_mapper", 30)); (("module_type_declaration", 437), 0, (Tag1 (0, (Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -228), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "module_type_declaration"), 0, (0)), 100000000, 0, -227), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "module_type_declaration"), 0, (0)), 100000000, 0, -226), 0), 100000000, 0, -225), 0), 100000000, 0, -224), (("parsing/ast_mapper.mli", 90, 4174, 4176), ("parsing/ast_mapper.mli", 91, 4235, 4289), 0), 0, Tag1 ("Ast_mapper", 31)); (("open_declaration", 438), 0, (Tag1 (0, (Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -233), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "open_declaration"), 0, (0)), 100000000, 0, -232), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "open_declaration"), 0, (0)), 100000000, 0, -231), 0), 100000000, 0, -230), 0), 100000000, 0, -229), (("parsing/ast_mapper.mli", 92, 4290, 4292), ("parsing/ast_mapper.mli", 92, 4290, 4357), 0), 0, Tag1 ("Ast_mapper", 32)); (("open_description", 439), 0, (Tag1 (0, (Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -238), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "open_description"), 0, (0)), 100000000, 0, -237), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "open_description"), 0, (0)), 100000000, 0, -236), 0), 100000000, 0, -235), 0), 100000000, 0, -234), (("parsing/ast_mapper.mli", 93, 4358, 4360), ("parsing/ast_mapper.mli", 93, 4358, 4425), 0), 0, Tag1 ("Ast_mapper", 33)); (("pat", 440), 0, (Tag1 (0, (Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -243), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "pattern"), 0, (0)), 100000000, 0, -242), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "pattern"), 0, (0)), 100000000, 0, -241), 0), 100000000, 0, -240), 0), 100000000, 0, -239), (("parsing/ast_mapper.mli", 94, 4426, 4428), ("parsing/ast_mapper.mli", 94, 4426, 4462), 0), 0, Tag1 ("Ast_mapper", 34)); (("payload", 441), 0, (Tag1 (0, (Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -248), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "payload"), 0, (0)), 100000000, 0, -247), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "payload"), 0, (0)), 100000000, 0, -246), 0), 100000000, 0, -245), 0), 100000000, 0, -244), (("parsing/ast_mapper.mli", 95, 4463, 4465), ("parsing/ast_mapper.mli", 95, 4463, 4503), 0), 0, Tag1 ("Ast_mapper", 35)); (("signature", 442), 0, (Tag1 (0, (Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -253), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "signature"), 0, (0)), 100000000, 0, -252), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "signature"), 0, (0)), 100000000, 0, -251), 0), 100000000, 0, -250), 0), 100000000, 0, -249), (("parsing/ast_mapper.mli", 96, 4504, 4506), ("parsing/ast_mapper.mli", 96, 4504, 4550), 0), 0, Tag1 ("Ast_mapper", 36)); (("signature_item", 443), 0, (Tag1 (0, (Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -258), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "signature_item"), 0, (0)), 100000000, 0, -257), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "signature_item"), 0, (0)), 100000000, 0, -256), 0), 100000000, 0, -255), 0), 100000000, 0, -254), (("parsing/ast_mapper.mli", 97, 4551, 4553), ("parsing/ast_mapper.mli", 97, 4551, 4612), 0), 0, Tag1 ("Ast_mapper", 37)); (("structure", 444), 0, (Tag1 (0, (Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -263), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "structure"), 0, (0)), 100000000, 0, -262), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "structure"), 0, (0)), 100000000, 0, -261), 0), 100000000, 0, -260), 0), 100000000, 0, -259), (("parsing/ast_mapper.mli", 98, 4613, 4615), ("parsing/ast_mapper.mli", 98, 4613, 4659), 0), 0, Tag1 ("Ast_mapper", 38)); (("structure_item", 445), 0, (Tag1 (0, (Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -268), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "structure_item"), 0, (0)), 100000000, 0, -267), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "structure_item"), 0, (0)), 100000000, 0, -266), 0), 100000000, 0, -265), 0), 100000000, 0, -264), (("parsing/ast_mapper.mli", 99, 4660, 4662), ("parsing/ast_mapper.mli", 99, 4660, 4721), 0), 0, Tag1 ("Ast_mapper", 39)); (("typ", 446), 0, (Tag1 (0, (Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -273), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "core_type"), 0, (0)), 100000000, 0, -272), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "core_type"), 0, (0)), 100000000, 0, -271), 0), 100000000, 0, -270), 0), 100000000, 0, -269), (("parsing/ast_mapper.mli", 100, 4722, 4724), ("parsing/ast_mapper.mli", 100, 4722, 4762), 0), 0, Tag1 ("Ast_mapper", 40)); (("type_declaration", 447), 0, (Tag1 (0, (Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -278), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "type_declaration"), 0, (0)), 100000000, 0, -277), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "type_declaration"), 0, (0)), 100000000, 0, -276), 0), 100000000, 0, -275), 0), 100000000, 0, -274), (("parsing/ast_mapper.mli", 101, 4763, 4765), ("parsing/ast_mapper.mli", 101, 4763, 4830), 0), 0, Tag1 ("Ast_mapper", 41)); (("type_extension", 448), 0, (Tag1 (0, (Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -283), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "type_extension"), 0, (0)), 100000000, 0, -282), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "type_extension"), 0, (0)), 100000000, 0, -281), 0), 100000000, 0, -280), 0), 100000000, 0, -279), (("parsing/ast_mapper.mli", 102, 4831, 4833), ("parsing/ast_mapper.mli", 102, 4831, 4892), 0), 0, Tag1 ("Ast_mapper", 42)); (("type_exception", 449), 0, (Tag1 (0, (Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -288), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "type_exception"), 0, (0)), 100000000, 0, -287), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "type_exception"), 0, (0)), 100000000, 0, -286), 0), 100000000, 0, -285), 0), 100000000, 0, -284), (("parsing/ast_mapper.mli", 103, 4893, 4895), ("parsing/ast_mapper.mli", 103, 4893, 4954), 0), 0, Tag1 ("Ast_mapper", 43)); (("type_kind", 450), 0, (Tag1 (0, (Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -293), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "type_kind"), 0, (0)), 100000000, 0, -292), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "type_kind"), 0, (0)), 100000000, 0, -291), 0), 100000000, 0, -290), 0), 100000000, 0, -289), (("parsing/ast_mapper.mli", 104, 4955, 4957), ("parsing/ast_mapper.mli", 104, 4955, 5001), 0), 0, Tag1 ("Ast_mapper", 44)); (("value_binding", 451), 0, (Tag1 (0, (Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -298), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "value_binding"), 0, (0)), 100000000, 0, -297), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "value_binding"), 0, (0)), 100000000, 0, -296), 0), 100000000, 0, -295), 0), 100000000, 0, -294), (("parsing/ast_mapper.mli", 105, 5002, 5004), ("parsing/ast_mapper.mli", 105, 5002, 5060), 0), 0, Tag1 ("Ast_mapper", 45)); (("value_description", 452), 0, (Tag1 (0, (Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -303), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "value_description"), 0, (0)), 100000000, 0, -302), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "value_description"), 0, (0)), 100000000, 0, -301), 0), 100000000, 0, -300), 0), 100000000, 0, -299), (("parsing/ast_mapper.mli", 106, 5061, 5063), ("parsing/ast_mapper.mli", 106, 5061, 5131), 0), 0, Tag1 ("Ast_mapper", 46)); (("with_constraint", 453), 0, (Tag1 (0, (Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -308), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "with_constraint"), 0, (0)), 100000000, 0, -307), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "with_constraint"), 0, (0)), 100000000, 0, -306), 0), 100000000, 0, -305), 0), 100000000, 0, -304), (("parsing/ast_mapper.mli", 107, 5132, 5134), ("parsing/ast_mapper.mli", 107, 5132, 5196), 0), 0, Tag1 ("Ast_mapper", 47))]], 1, 0, 0, 0, 0, 0, (("parsing/ast_mapper.mli", 58, 2372, 2372), ("parsing/ast_mapper.mli", 108, 5197, 5198), 0), 0, 0, 0, Tag1 ("Ast_mapper", 2)), 1, 0); (("default_mapper", 515), ((Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -79), 0, (("parsing/ast_mapper.mli", 114, 5411, 5411), ("parsing/ast_mapper.mli", 114, 5411, 5437), 0), 0, Tag1 ("Ast_mapper", 48)), 0); (("tool_name", 516), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -78), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -77), 0), 100000000, 0, -76), 0, (("parsing/ast_mapper.mli", 119, 5555, 5555), ("parsing/ast_mapper.mli", 119, 5555, 5584), 0), 0, Tag1 ("Ast_mapper", 49)), 0); (("apply", 517), ((Tag1 (("source"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -75), (Tag1 (("target"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -74), (Tag1 (0, (Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -73), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -72), 0), 100000000, 0, -71), 0), 100000000, 0, -70), 0), 100000000, 0, -69), 0, (("parsing/ast_mapper.mli", 129, 6003, 6003), ("parsing/ast_mapper.mli", 129, 6003, 6062), 0), 0, Tag1 ("Ast_mapper", 50)), 0); (("run_main", 518), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -68)], (0)), 100000000, 0, -67), (Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -66), 0), 100000000, 0, -65), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -64), 0), 100000000, 0, -63), 0, (("parsing/ast_mapper.mli", 135, 6319, 6319), ("parsing/ast_mapper.mli", 135, 6319, 6364), 0), 0, Tag1 ("Ast_mapper", 51)), 0); (("register_function", 519), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -62), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -61)], (0)), 100000000, 0, -60), (Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -59), 0), 100000000, 0, -58), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -57), 0), 100000000, 0, -56), 0), 100000000, 0, -55)], (0)), 100000000, 0, -54), 0, (("parsing/ast_mapper.mli", 144, 6679, 6679), ("parsing/ast_mapper.mli", 144, 6679, 6749), 0), 0, Tag1 ("Ast_mapper", 52)), 0); (("register", 520), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -53), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -52)], (0)), 100000000, 0, -51), (Tag3 ((("mapper", 514)), 0, (0)), 100000000, 0, -50), 0), 100000000, 0, -49), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -48), 0), 100000000, 0, -47), 0), 100000000, 0, -46), 0, (("parsing/ast_mapper.mli", 146, 6751, 6751), ("parsing/ast_mapper.mli", 146, 6751, 6806), 0), 0, Tag1 ("Ast_mapper", 53)), 0); (("map_opt", 521), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -44), ((("b")), 100000000, 0, -42), 0), 100000000, 0, -45), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -44)], (0)), 100000000, 0, -43), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -42)], (0)), 100000000, 0, -41), 0), 100000000, 0, -40), 0), 100000000, 0, -39), 0, (("parsing/ast_mapper.mli", 166, 7642, 7642), ("parsing/ast_mapper.mli", 166, 7642, 7691), 0), 0, Tag1 ("Ast_mapper", 54)), 0); (("extension_of_error", 522), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Location")), "error"), 0, (0)), 100000000, 0, -38), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "extension"), 0, (0)), 100000000, 0, -37), 0), 100000000, 0, -36), 0, (("parsing/ast_mapper.mli", 168, 7693, 7693), ("parsing/ast_mapper.mli", 168, 7693, 7744), 0), 0, Tag1 ("Ast_mapper", 55)), 0); (("attribute_of_warning", 523), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -35), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -34), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "attribute"), 0, (0)), 100000000, 0, -33), 0), 100000000, 0, -32), 0), 100000000, 0, -31), 0, (("parsing/ast_mapper.mli", 173, 7921, 7921), ("parsing/ast_mapper.mli", 173, 7921, 7980), 0), 0, Tag1 ("Ast_mapper", 56)), 0); (("add_ppx_context_str", 524), ((Tag1 (("tool_name"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -30), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "structure"), 0, (0)), 100000000, 0, -29), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "structure"), 0, (0)), 100000000, 0, -28), 0), 100000000, 0, -27), 0), 100000000, 0, -26), 0, (("parsing/ast_mapper.mli", 180, 8221, 8221), ("parsing/ast_mapper.mli", 181, 8246, 8312), 0), 0, Tag1 ("Ast_mapper", 57)), 0); (("add_ppx_context_sig", 525), ((Tag1 (("tool_name"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -25), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "signature"), 0, (0)), 100000000, 0, -24), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "signature"), 0, (0)), 100000000, 0, -23), 0), 100000000, 0, -22), 0), 100000000, 0, -21), 0, (("parsing/ast_mapper.mli", 187, 8523, 8523), ("parsing/ast_mapper.mli", 188, 8548, 8614), 0), 0, Tag1 ("Ast_mapper", 58)), 0); (("drop_ppx_context_str", 526), ((Tag1 (("restore"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -20), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "structure"), 0, (0)), 100000000, 0, -19), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "structure"), 0, (0)), 100000000, 0, -18), 0), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("parsing/ast_mapper.mli", 191, 8674, 8674), ("parsing/ast_mapper.mli", 192, 8700, 8762), 0), 0, Tag1 ("Ast_mapper", 59)), 0); (("drop_ppx_context_sig", 527), ((Tag1 (("restore"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -15), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "signature"), 0, (0)), 100000000, 0, -14), (Tag3 (Tag1 ((Tag2 ("Parsetree")), "signature"), 0, (0)), 100000000, 0, -13), 0), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("parsing/ast_mapper.mli", 197, 8914, 8914), ("parsing/ast_mapper.mli", 198, 8940, 9002), 0), 0, Tag1 ("Ast_mapper", 60)), 0); (("set_cookie", 528), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "expression"), 0, (0)), 100000000, 0, -9), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8), 0), 100000000, 0, -7), 0), 100000000, 0, -6), 0, (("parsing/ast_mapper.mli", 207, 9267, 9267), ("parsing/ast_mapper.mli", 207, 9267, 9321), 0), 0, Tag1 ("Ast_mapper", 61)), 0); (("get_cookie", 529), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Parsetree")), "expression"), 0, (0)), 100000000, 0, -4)], (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("parsing/ast_mapper.mli", 208, 9322, 9322), ("parsing/ast_mapper.mli", 208, 9322, 9375), 0), 0, Tag1 ("Ast_mapper", 62)), 0)], "Ast_mapper", [("Ast_mapper", ("q\017\160\185<3\025\0255\252\031\189\014\236\204\027")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216"))], [(0)])
val get_cookie : string -> Parsetree.expression option

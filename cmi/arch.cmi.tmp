val command_line_options : (string * Arg.spec * string) list
type addressing_mode =
    Ibased of string * int
  | Iindexed of int
  | Iindexed2 of int
  | Iscaled of int * int
  | Iindexed2scaled of int * int
type specific_operation =
    Ilea of addressing_mode
  | Istore_int of nativeint * addressing_mode * bool
  | Ioffset_loc of int * addressing_mode
  | Ifloatarithmem of float_operation * addressing_mode
  | Ibswap of int
  | Isqrtf
  | Ifloatsqrtf of addressing_mode
  | Isextend32
  | Izextend32
and float_operation = Ifloatadd | Ifloatsub | Ifloatmul | Ifloatdiv
val big_endian : bool
val size_addr : int
val size_int : int
val size_float : int
val allow_unaligned_access : bool
val division_crashes_on_overflow : bool
val identity_addressing : addressing_mode
val offset_addressing : addressing_mode -> int -> addressing_mode
val num_args_addressing : addressing_mode -> int
val print_addressing :
  (Format.formatter -> 'a -> unit) ->
  addressing_mode -> Format.formatter -> 'a array -> unit
val print_specific_operation :
  (Format.formatter -> 'a -> unit) ->
  specific_operation -> Format.formatter -> 'a array -> unit
val win64 : bool
val operation_is_pure : specific_operation -> bool
val operation_can_raise : specific_operation -> bool
val float_cond_and_need_swap :
  ("DEBUG:rule", [(("command_line_options", 575), ((Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -75); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Arg"), "spec"), 0, (0)), 100000000, 0, -76); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -77)]), 100000000, 0, -74)], (0)), 100000000, 0, -73), 0, (("asmcomp/amd64/arch.mli", 19, 1153, 1153), ("asmcomp/amd64/arch.mli", 19, 1153, 1213), 0), 0, Tag1 ("Arch", 0)), 0); Tag1 (("addressing_mode", 576), (0, 0, Tag1 ([(("Ibased", 292), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -65); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -66)]), 0, (("asmcomp/amd64/arch.mli", 24, 1289, 1293), ("asmcomp/amd64/arch.mli", 24, 1289, 1315), 0), 0, Tag1 ("Arch", 2)); (("Iindexed", 293), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -67)]), 0, (("asmcomp/amd64/arch.mli", 25, 1350, 1352), ("asmcomp/amd64/arch.mli", 25, 1350, 1369), 0), 0, Tag1 ("Arch", 3)); (("Iindexed2", 294), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -68)]), 0, (("asmcomp/amd64/arch.mli", 26, 1408, 1410), ("asmcomp/amd64/arch.mli", 26, 1408, 1428), 0), 0, Tag1 ("Arch", 4)); (("Iscaled", 295), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -69); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -70)]), 0, (("asmcomp/amd64/arch.mli", 27, 1472, 1474), ("asmcomp/amd64/arch.mli", 27, 1472, 1496), 0), 0, Tag1 ("Arch", 5)); (("Iindexed2scaled", 296), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -71); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -72)]), 0, (("asmcomp/amd64/arch.mli", 28, 1538, 1540), ("asmcomp/amd64/arch.mli", 28, 1538, 1570), 0), 0, Tag1 ("Arch", 6))], 0), 1, 0, 0, 0, 0, 0, (("asmcomp/amd64/arch.mli", 23, 1266, 1266), ("asmcomp/amd64/arch.mli", 28, 1538, 1570), 0), 0, 0, 0, Tag1 ("Arch", 1)), 1, 0); Tag1 (("specific_operation", 577), (0, 0, Tag1 ([(("Ilea", 299), ([(Tag3 ((("addressing_mode", 576)), 0, (0)), 100000000, 0, -55)]), 0, (("asmcomp/amd64/arch.mli", 31, 1637, 1641), ("asmcomp/amd64/arch.mli", 31, 1637, 1664), 0), 0, Tag1 ("Arch", 9)); (("Istore_int", 300), ([(Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -56); (Tag3 ((("addressing_mode", 576)), 0, (0)), 100000000, 0, -57); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -58)]), 0, (("asmcomp/amd64/arch.mli", 32, 1707, 1709), ("asmcomp/amd64/arch.mli", 32, 1707, 1759), 0), 0, Tag1 ("Arch", 10)); (("Ioffset_loc", 301), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -59); (Tag3 ((("addressing_mode", 576)), 0, (0)), 100000000, 0, -60)]), 0, (("asmcomp/amd64/arch.mli", 34, 1832, 1834), ("asmcomp/amd64/arch.mli", 34, 1832, 1872), 0), 0, Tag1 ("Arch", 11)); (("Ifloatarithmem", 302), ([(Tag3 ((("float_operation", 578)), 0, (0)), 100000000, 0, -61); (Tag3 ((("addressing_mode", 576)), 0, (0)), 100000000, 0, -62)]), 0, (("asmcomp/amd64/arch.mli", 35, 1908, 1910), ("asmcomp/amd64/arch.mli", 35, 1908, 1963), 0), 0, Tag1 ("Arch", 12)); (("Ibswap", 303), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -63)]), 0, (("asmcomp/amd64/arch.mli", 37, 2043, 2045), ("asmcomp/amd64/arch.mli", 37, 2043, 2060), 0), 0, Tag1 ("Arch", 13)); (("Isqrtf", 304), (0), 0, (("asmcomp/amd64/arch.mli", 38, 2110, 2112), ("asmcomp/amd64/arch.mli", 38, 2110, 2120), 0), 0, Tag1 ("Arch", 14)); (("Ifloatsqrtf", 305), ([(Tag3 ((("addressing_mode", 576)), 0, (0)), 100000000, 0, -64)]), 0, (("asmcomp/amd64/arch.mli", 39, 2173, 2175), ("asmcomp/amd64/arch.mli", 39, 2173, 2207), 0), 0, Tag1 ("Arch", 15)); (("Isextend32", 306), (0), 0, (("asmcomp/amd64/arch.mli", 40, 2248, 2250), ("asmcomp/amd64/arch.mli", 40, 2248, 2262), 0), 0, Tag1 ("Arch", 16)); (("Izextend32", 307), (0), 0, (("asmcomp/amd64/arch.mli", 42, 2379, 2381), ("asmcomp/amd64/arch.mli", 42, 2379, 2393), 0), 0, Tag1 ("Arch", 17))], 0), 1, 0, 0, 0, 0, 0, (("asmcomp/amd64/arch.mli", 30, 1611, 1611), ("asmcomp/amd64/arch.mli", 42, 2379, 2393), 0), 0, 0, 0, Tag1 ("Arch", 7)), 1, 0); Tag1 (("float_operation", 578), (0, 0, Tag1 ([(("Ifloatadd", 308), (0), 0, (("asmcomp/amd64/arch.mli", 46, 2533, 2537), ("asmcomp/amd64/arch.mli", 46, 2533, 2546), 0), 0, Tag1 ("Arch", 18)); (("Ifloatsub", 309), (0), 0, (("asmcomp/amd64/arch.mli", 46, 2533, 2547), ("asmcomp/amd64/arch.mli", 46, 2533, 2558), 0), 0, Tag1 ("Arch", 19)); (("Ifloatmul", 310), (0), 0, (("asmcomp/amd64/arch.mli", 46, 2533, 2559), ("asmcomp/amd64/arch.mli", 46, 2533, 2570), 0), 0, Tag1 ("Arch", 20)); (("Ifloatdiv", 311), (0), 0, (("asmcomp/amd64/arch.mli", 46, 2533, 2571), ("asmcomp/amd64/arch.mli", 46, 2533, 2582), 0), 0, Tag1 ("Arch", 21))], 0), 1, 0, 0, 0, 0, 0, (("asmcomp/amd64/arch.mli", 45, 2511, 2511), ("asmcomp/amd64/arch.mli", 46, 2533, 2582), 0), 0, 1, 0, Tag1 ("Arch", 8)), 2, 0); (("big_endian", 579), ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -54), 0, (("asmcomp/amd64/arch.mli", 48, 2584, 2584), ("asmcomp/amd64/arch.mli", 48, 2584, 2605), 0), 0, Tag1 ("Arch", 22)), 0); (("size_addr", 580), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -53), 0, (("asmcomp/amd64/arch.mli", 50, 2607, 2607), ("asmcomp/amd64/arch.mli", 50, 2607, 2626), 0), 0, Tag1 ("Arch", 23)), 0); (("size_int", 581), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -52), 0, (("asmcomp/amd64/arch.mli", 52, 2628, 2628), ("asmcomp/amd64/arch.mli", 52, 2628, 2646), 0), 0, Tag1 ("Arch", 24)), 0); (("size_float", 582), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -51), 0, (("asmcomp/amd64/arch.mli", 54, 2648, 2648), ("asmcomp/amd64/arch.mli", 54, 2648, 2668), 0), 0, Tag1 ("Arch", 25)), 0); (("allow_unaligned_access", 583), ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -50), 0, (("asmcomp/amd64/arch.mli", 56, 2670, 2670), ("asmcomp/amd64/arch.mli", 56, 2670, 2703), 0), 0, Tag1 ("Arch", 26)), 0); (("division_crashes_on_overflow", 584), ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -49), 0, (("asmcomp/amd64/arch.mli", 58, 2705, 2705), ("asmcomp/amd64/arch.mli", 58, 2705, 2744), 0), 0, Tag1 ("Arch", 27)), 0); (("identity_addressing", 585), ((Tag3 ((("addressing_mode", 576)), 0, (0)), 100000000, 0, -48), 0, (("asmcomp/amd64/arch.mli", 60, 2746, 2746), ("asmcomp/amd64/arch.mli", 60, 2746, 2787), 0), 0, Tag1 ("Arch", 28)), 0); (("offset_addressing", 586), ((Tag1 (0, (Tag3 ((("addressing_mode", 576)), 0, (0)), 100000000, 0, -47), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -46), (Tag3 ((("addressing_mode", 576)), 0, (0)), 100000000, 0, -45), 0), 100000000, 0, -44), 0), 100000000, 0, -43), 0, (("asmcomp/amd64/arch.mli", 62, 2789, 2789), ("asmcomp/amd64/arch.mli", 62, 2789, 2854), 0), 0, Tag1 ("Arch", 29)), 0); (("num_args_addressing", 587), ((Tag1 (0, (Tag3 ((("addressing_mode", 576)), 0, (0)), 100000000, 0, -42), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -41), 0), 100000000, 0, -40), 0, (("asmcomp/amd64/arch.mli", 64, 2856, 2856), ("asmcomp/amd64/arch.mli", 64, 2856, 2904), 0), 0, Tag1 ("Arch", 30)), 0); (("print_addressing", 588), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -39), (Tag1 (0, ((("a")), 100000000, 0, -33), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -38), 0), 100000000, 0, -37), 0), 100000000, 0, -36), (Tag1 (0, (Tag3 ((("addressing_mode", 576)), 0, (0)), 100000000, 0, -35), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -34), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -33)], (0)), 100000000, 0, -32), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -31), 0), 100000000, 0, -30), 0), 100000000, 0, -29), 0), 100000000, 0, -28), 0), 100000000, 0, -27), 0, (("asmcomp/amd64/arch.mli", 66, 2906, 2906), ("asmcomp/amd64/arch.mli", 68, 2986, 3024), 0), 0, Tag1 ("Arch", 31)), 0); (("print_specific_operation", 589), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -26), (Tag1 (0, ((("a")), 100000000, 0, -20), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -25), 0), 100000000, 0, -24), 0), 100000000, 0, -23), (Tag1 (0, (Tag3 ((("specific_operation", 577)), 0, (0)), 100000000, 0, -22), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -21), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -20)], (0)), 100000000, 0, -19), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -18), 0), 100000000, 0, -17), 0), 100000000, 0, -16), 0), 100000000, 0, -15), 0), 100000000, 0, -14), 0, (("asmcomp/amd64/arch.mli", 70, 3026, 3026), ("asmcomp/amd64/arch.mli", 72, 3117, 3155), 0), 0, Tag1 ("Arch", 32)), 0); (("win64", 590), ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -13), 0, (("asmcomp/amd64/arch.mli", 74, 3157, 3157), ("asmcomp/amd64/arch.mli", 74, 3157, 3173), 0), 0, Tag1 ("Arch", 33)), 0); (("operation_is_pure", 591), ((Tag1 (0, (Tag3 ((("specific_operation", 577)), 0, (0)), 100000000, 0, -12), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -11), 0), 100000000, 0, -10), 0, (("asmcomp/amd64/arch.mli", 76, 3175, 3175), ("asmcomp/amd64/arch.mli", 76, 3175, 3225), 0), 0, Tag1 ("Arch", 34)), 0); (("operation_can_raise", 592), ((Tag1 (0, (Tag3 ((("specific_operation", 577)), 0, (0)), 100000000, 0, -9), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -8), 0), 100000000, 0, -7), 0, (("asmcomp/amd64/arch.mli", 78, 3227, 3227), ("asmcomp/amd64/arch.mli", 78, 3227, 3279), 0), 0, Tag1 ("Arch", 35)), 0); (("float_cond_and_need_swap", 593), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Lambda")), "float_comparison"), 0, (0)), 100000000, 0, -6), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("X86_ast")), "float_condition"), 0, (0)), 100000000, 0, -4); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -5)]), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("asmcomp/amd64/arch.mli", 80, 3281, 3281), ("asmcomp/amd64/arch.mli", 81, 3310, 3372), 0), 0, Tag1 ("Arch", 39)), 0)], "Arch", [("Arch", ("9\221>\185\204\181\224\2279\164\221\212\213\028qT")); ("X86_ast", ("_J}e\221\174\027(J\165T\180=\151\227n")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Types", ("\177\238\029.\220\006\163!\230\015\006\182\133\155\194\166")); ("Type_immediacy", ("\"\127k\011Q\241\211\138\193;8\142\129\141#\251")); ("Subst", ("\021\031\148\223\127\186\189\135\027}\145r\216\143\177\156")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Arg", ("\024%=\206\198p\149Y\007\004\216,&\254#\207")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shape", ("\235\127Y\213\025\137=\244\218\181\248N\189\188\216p")); ("Primitive", ("}Shh\162\015|\220A\203\249\232\245G\213\019")); ("Path", ("\012\183\178\025\1298\228*\021r\185\160Y\252\n\026")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Outcometree", ("9\021%\234\211\206\210\004H\165\208\2014\234Q\142")); ("Misc", ("*\026\026\234c\191\131\161\\\203\183\012O\252\153\198")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Load_path", ("\012@\228l\230\164S\172h\1726X\020\252o}")); ("Lambda", ("\180\1419\236'\146K$\128\006\135q\135V\029\180")); ("Identifiable", ("\004F\207\014\158GU\001\184\214\187%/#;\211")); ("Ident", ("\b9;!\187.\220\163(x\b\174\\\223\020\004")); ("Env", ("\021\n\181\142x\b\169j\227\"\017\248*\178\245\223")); ("Debuginfo", ("\131\251\175\217P\194M\163\022\151\002\005\006\185:\185")); ("Cmi_format", ("6\177\bU\139\"\023\152=\249\135\174\b\011Cg")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Build_path_prefix_map", ("y\028\167\207D\220\198\216\011\208\172\149\2416\bc")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216"))], [(0)])
Lambda.float_comparison -> X86_ast.float_condition * bool

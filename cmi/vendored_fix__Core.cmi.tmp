module Make :
  functor (M : Vendored_fix__.Sigs.IMPERATIVE_MAPS)
    (P : Vendored_fix__.Sigs.PROPERTY) ->
    sig
      type variable = M.key
      type property = P.property
      type valuation = variable -> property
      type rhs = valuation -> property
      type equations = variable -> rhs
      val lfp : equations -> valuation
    end
module ForOrderedType :
  functor (T : Vendored_fix__.Sigs.OrderedType)
    (P : Vendored_fix__.Sigs.PROPERTY) ->
    sig
      type variable = T.t
      type property = P.property
      type valuation = variable -> property
      type rhs = valuation -> property
      type equations = variable -> rhs
      val lfp : equations -> valuation
    end
module ForHashedType :
  functor (T : Vendored_fix__.Sigs.HashedType)
    (P : Vendored_fix__.Sigs.PROPERTY) ->
    sig
      type variable = T.t
      type property = P.property
      type valuation = variable -> property
      type rhs = valuation -> property
      type equations = variable -> rhs
      val lfp : equations -> valuation
    end
module ForType :
  functor (T : Vendored_fix__.Sigs.TYPE) (P : Vendored_fix__.Sigs.PROPERTY)
    ->
    sig
      type variable = T.t
      type property = P.property
      type valuation = variable -> property
      type rhs = valuation -> property
      type equations = variable -> rhs
      val lfp : equations -> valuation("DEBUG:rule", [Tag3 (("Make", 489), 0, (Tag2 (((("M", 499)), (Tag1 (Tag1 ((Tag2 ("Vendored_fix__")), "Sigs"), "IMPERATIVE_MAPS"))), Tag2 (((("P", 500)), (Tag1 (Tag1 ((Tag2 ("Vendored_fix__")), "Sigs"), "PROPERTY"))), Tag1 ([Tag1 (("variable", 501), (0, 0, 0, 1, ((Tag3 (Tag1 ((("M", 499)), "key"), 0, (0)), 100000000, 0, -15)), 0, 0, 0, 0, (("fix/src/Core.mli", 31, 1678, 1690), ("fix/src/Core.mli", 31, 1678, 1711), 0), 0, 0, 0, Tag1 ("Vendored_fix__Core", 2)), 1, 0); Tag1 (("property", 502), (0, 0, 0, 1, ((Tag3 (Tag1 ((("P", 500)), "property"), 0, (0)), 100000000, 0, -14)), 0, 0, 0, 0, (("fix/src/Core.mli", 32, 1712, 1724), ("fix/src/Core.mli", 32, 1712, 1750), 0), 0, 0, 0, Tag1 ("Vendored_fix__Core", 3)), 1, 0); Tag1 (("valuation", 503), (0, 0, 0, 1, ((Tag1 (0, (Tag3 ((("variable", 501)), 0, (0)), 100000000, 0, -13), (Tag3 ((("property", 502)), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11)), 0, 0, 0, 0, (("fix/src/Sigs.ml", 209, 7470, 7472), ("fix/src/Sigs.ml", 209, 7470, 7509), 0), 0, 0, 0, Tag1 ("Vendored_fix__Sigs", 50)), 1, 0); Tag1 (("rhs", 504), (0, 0, 0, 1, ((Tag1 (0, (Tag3 ((("valuation", 503)), 0, (0)), 100000000, 0, -10), (Tag3 ((("property", 502)), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8)), 0, 0, 0, 0, (("fix/src/Sigs.ml", 215, 7737, 7739), ("fix/src/Sigs.ml", 215, 7737, 7771), 0), 0, 0, 0, Tag1 ("Vendored_fix__Sigs", 51)), 1, 0); Tag1 (("equations", 505), (0, 0, 0, 1, ((Tag1 (0, (Tag3 ((("variable", 501)), 0, (0)), 100000000, 0, -7), (Tag3 ((("rhs", 504)), 0, (0)), 100000000, 0, -6), 0), 100000000, 0, -5)), 0, 0, 0, 0, (("fix/src/Sigs.ml", 219, 7855, 7857), ("fix/src/Sigs.ml", 219, 7855, 7889), 0), 0, 0, 0, Tag1 ("Vendored_fix__Sigs", 52)), 1, 0); (("lfp", 506), ((Tag1 (0, (Tag3 ((("equations", 505)), 0, (0)), 100000000, 0, -4), (Tag3 ((("valuation", 503)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("fix/src/Sigs.ml", 234, 8631, 8633), ("fix/src/Sigs.ml", 234, 8631, 8664), 0), 0, Tag1 ("Vendored_fix__Sigs", 53)), 0)]))), 0, (("fix/src/Core.mli", 27, 1611, 1611), ("fix/src/Core.mli", 32, 1712, 1750), 0), Tag1 ("Vendored_fix__Core", 4)), 0, 0); Tag3 (("ForOrderedType", 490), 0, (Tag2 (((("T", 497)), (Tag1 (Tag1 ((Tag2 ("Vendored_fix__")), "Sigs"), "OrderedType"))), Tag2 (((("P", 498)), (Tag1 (Tag1 ((Tag2 ("Vendored_fix__")), "Sigs"), "PROPERTY"))), Tag1 ([Tag1 (("variable", 507), (0, 0, 0, 1, ((Tag3 (Tag1 ((("T", 497)), "t"), 0, (0)), 100000000, 0, -29)), 0, 0, 0, 0, (("fix/src/Core.mli", 43, 2019, 2031), ("fix/src/Core.mli", 43, 2019, 2050), 0), 0, 0, 0, Tag1 ("Vendored_fix__Core", 7)), 1, 0); Tag1 (("property", 508), (0, 0, 0, 1, ((Tag3 (Tag1 ((("P", 498)), "property"), 0, (0)), 100000000, 0, -28)), 0, 0, 0, 0, (("fix/src/Core.mli", 44, 2051, 2063), ("fix/src/Core.mli", 44, 2051, 2089), 0), 0, 0, 0, Tag1 ("Vendored_fix__Core", 8)), 1, 0); Tag1 (("valuation", 509), (0, 0, 0, 1, ((Tag1 (0, (Tag3 ((("variable", 507)), 0, (0)), 100000000, 0, -27), (Tag3 ((("property", 508)), 0, (0)), 100000000, 0, -26), 0), 100000000, 0, -25)), 0, 0, 0, 0, (("fix/src/Sigs.ml", 209, 7470, 7472), ("fix/src/Sigs.ml", 209, 7470, 7509), 0), 0, 0, 0, Tag1 ("Vendored_fix__Sigs", 50)), 1, 0); Tag1 (("rhs", 510), (0, 0, 0, 1, ((Tag1 (0, (Tag3 ((("valuation", 509)), 0, (0)), 100000000, 0, -24), (Tag3 ((("property", 508)), 0, (0)), 100000000, 0, -23), 0), 100000000, 0, -22)), 0, 0, 0, 0, (("fix/src/Sigs.ml", 215, 7737, 7739), ("fix/src/Sigs.ml", 215, 7737, 7771), 0), 0, 0, 0, Tag1 ("Vendored_fix__Sigs", 51)), 1, 0); Tag1 (("equations", 511), (0, 0, 0, 1, ((Tag1 (0, (Tag3 ((("variable", 507)), 0, (0)), 100000000, 0, -21), (Tag3 ((("rhs", 510)), 0, (0)), 100000000, 0, -20), 0), 100000000, 0, -19)), 0, 0, 0, 0, (("fix/src/Sigs.ml", 219, 7855, 7857), ("fix/src/Sigs.ml", 219, 7855, 7889), 0), 0, 0, 0, Tag1 ("Vendored_fix__Sigs", 52)), 1, 0); (("lfp", 512), ((Tag1 (0, (Tag3 ((("equations", 511)), 0, (0)), 100000000, 0, -18), (Tag3 ((("valuation", 509)), 0, (0)), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("fix/src/Sigs.ml", 234, 8631, 8633), ("fix/src/Sigs.ml", 234, 8631, 8664), 0), 0, Tag1 ("Vendored_fix__Sigs", 53)), 0)]))), 0, (("fix/src/Core.mli", 39, 1946, 1946), ("fix/src/Core.mli", 44, 2051, 2089), 0), Tag1 ("Vendored_fix__Core", 9)), 0, 0); Tag3 (("ForHashedType", 491), 0, (Tag2 (((("T", 495)), (Tag1 (Tag1 ((Tag2 ("Vendored_fix__")), "Sigs"), "HashedType"))), Tag2 (((("P", 496)), (Tag1 (Tag1 ((Tag2 ("Vendored_fix__")), "Sigs"), "PROPERTY"))), Tag1 ([Tag1 (("variable", 513), (0, 0, 0, 1, ((Tag3 (Tag1 ((("T", 495)), "t"), 0, (0)), 100000000, 0, -43)), 0, 0, 0, 0, (("fix/src/Core.mli", 54, 2331, 2343), ("fix/src/Core.mli", 54, 2331, 2362), 0), 0, 0, 0, Tag1 ("Vendored_fix__Core", 12)), 1, 0); Tag1 (("property", 514), (0, 0, 0, 1, ((Tag3 (Tag1 ((("P", 496)), "property"), 0, (0)), 100000000, 0, -42)), 0, 0, 0, 0, (("fix/src/Core.mli", 55, 2363, 2375), ("fix/src/Core.mli", 55, 2363, 2401), 0), 0, 0, 0, Tag1 ("Vendored_fix__Core", 13)), 1, 0); Tag1 (("valuation", 515), (0, 0, 0, 1, ((Tag1 (0, (Tag3 ((("variable", 513)), 0, (0)), 100000000, 0, -41), (Tag3 ((("property", 514)), 0, (0)), 100000000, 0, -40), 0), 100000000, 0, -39)), 0, 0, 0, 0, (("fix/src/Sigs.ml", 209, 7470, 7472), ("fix/src/Sigs.ml", 209, 7470, 7509), 0), 0, 0, 0, Tag1 ("Vendored_fix__Sigs", 50)), 1, 0); Tag1 (("rhs", 516), (0, 0, 0, 1, ((Tag1 (0, (Tag3 ((("valuation", 515)), 0, (0)), 100000000, 0, -38), (Tag3 ((("property", 514)), 0, (0)), 100000000, 0, -37), 0), 100000000, 0, -36)), 0, 0, 0, 0, (("fix/src/Sigs.ml", 215, 7737, 7739), ("fix/src/Sigs.ml", 215, 7737, 7771), 0), 0, 0, 0, Tag1 ("Vendored_fix__Sigs", 51)), 1, 0); Tag1 (("equations", 517), (0, 0, 0, 1, ((Tag1 (0, (Tag3 ((("variable", 513)), 0, (0)), 100000000, 0, -35), (Tag3 ((("rhs", 516)), 0, (0)), 100000000, 0, -34), 0), 100000000, 0, -33)), 0, 0, 0, 0, (("fix/src/Sigs.ml", 219, 7855, 7857), ("fix/src/Sigs.ml", 219, 7855, 7889), 0), 0, 0, 0, Tag1 ("Vendored_fix__Sigs", 52)), 1, 0); (("lfp", 518), ((Tag1 (0, (Tag3 ((("equations", 517)), 0, (0)), 100000000, 0, -32), (Tag3 ((("valuation", 515)), 0, (0)), 100000000, 0, -31), 0), 100000000, 0, -30), 0, (("fix/src/Sigs.ml", 234, 8631, 8633), ("fix/src/Sigs.ml", 234, 8631, 8664), 0), 0, Tag1 ("Vendored_fix__Sigs", 53)), 0)]))), 0, (("fix/src/Core.mli", 50, 2260, 2260), ("fix/src/Core.mli", 55, 2363, 2401), 0), Tag1 ("Vendored_fix__Core", 14)), 0, 0); Tag3 (("ForType", 492), 0, (Tag2 (((("T", 493)), (Tag1 (Tag1 ((Tag2 ("Vendored_fix__")), "Sigs"), "TYPE"))), Tag2 (((("P", 494)), (Tag1 (Tag1 ((Tag2 ("Vendored_fix__")), "Sigs"), "PROPERTY"))), Tag1 ([Tag1 (("variable", 519), (0, 0, 0, 1, ((Tag3 (Tag1 ((("T", 493)), "t"), 0, (0)), 100000000, 0, -57)), 0, 0, 0, 0, (("fix/src/Core.mli", 66, 2695, 2707), ("fix/src/Core.mli", 66, 2695, 2726), 0), 0, 0, 0, Tag1 ("Vendored_fix__Core", 17)), 1, 0); Tag1 (("property", 520), (0, 0, 0, 1, ((Tag3 (Tag1 ((("P", 494)), "property"), 0, (0)), 100000000, 0, -56)), 0, 0, 0, 0, (("fix/src/Core.mli", 67, 2727, 2739), ("fix/src/Core.mli", 67, 2727, 2765), 0), 0, 0, 0, Tag1 ("Vendored_fix__Core", 18)), 1, 0); Tag1 (("valuation", 521), (0, 0, 0, 1, ((Tag1 (0, (Tag3 ((("variable", 519)), 0, (0)), 100000000, 0, -55), (Tag3 ((("property", 520)), 0, (0)), 100000000, 0, -54), 0), 100000000, 0, -53)), 0, 0, 0, 0, (("fix/src/Sigs.ml", 209, 7470, 7472), ("fix/src/Sigs.ml", 209, 7470, 7509), 0), 0, 0, 0, Tag1 ("Vendored_fix__Sigs", 50)), 1, 0); Tag1 (("rhs", 522), (0, 0, 0, 1, ((Tag1 (0, (Tag3 ((("valuation", 521)), 0, (0)), 100000000, 0, -52), (Tag3 ((("property", 520)), 0, (0)), 100000000, 0, -51), 0), 100000000, 0, -50)), 0, 0, 0, 0, (("fix/src/Sigs.ml", 215, 7737, 7739), ("fix/src/Sigs.ml", 215, 7737, 7771), 0), 0, 0, 0, Tag1 ("Vendored_fix__Sigs", 51)), 1, 0); Tag1 (("equations", 523), (0, 0, 0, 1, ((Tag1 (0, (Tag3 ((("variable", 519)), 0, (0)), 100000000, 0, -49), (Tag3 ((("rhs", 522)), 0, (0)), 100000000, 0, -48), 0), 100000000, 0, -47)), 0, 0, 0, 0, (("fix/src/Sigs.ml", 219, 7855, 7857), ("fix/src/Sigs.ml", 219, 7855, 7889), 0), 0, 0, 0, Tag1 ("Vendored_fix__Sigs", 52)), 1, 0); (("lfp", 524), ((Tag1 (0, (Tag3 ((("equations", 523)), 0, (0)), 100000000, 0, -46), (Tag3 ((("valuation", 521)), 0, (0)), 100000000, 0, -45), 0), 100000000, 0, -44), 0, (("fix/src/Sigs.ml", 234, 8631, 8633), ("fix/src/Sigs.ml", 234, 8631, 8664), 0), 0, Tag1 ("Vendored_fix__Sigs", 53)), 0)]))), 0, (("fix/src/Core.mli", 62, 2636, 2636), ("fix/src/Core.mli", 67, 2727, 2765), 0), Tag1 ("Vendored_fix__Core", 19)), 0, 0)], "Vendored_fix__Core", [("Vendored_fix__Core", ("\214\127\018A\245\025\b\249\146\254pi\185\243\149\133")); ("Vendored_fix__Sigs", ("a{\193\210\184\138\163\252\132\135.\2156meu")); ("Vendored_fix__", ("\r\196g\002\180\221\139\252\200\240t\184\171.K\020")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

    end

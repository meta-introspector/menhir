module type ZArith =
  sig
    type t
    val zero : t
    val one : t
    val two : t
    val add : t -> t -> t
    val sub : t -> t -> t
    val mul : t -> t -> t
    val div : t -> t -> t
    val neg : t -> t
    val sign : t -> int
    val equal : t -> t -> bool
    val compare : t -> t -> int
    val power_int : t -> int -> t
    val quomod : t -> t -> t * t
    val ppcm : t -> t -> t
    val gcd : t -> t -> t
    val lcm : t -> t -> t
    val to_string : t -> string
  end
module type QArith =
  sig
    module Z : ZArith
    type t
    val of_int : int -> t
    val zero : t
    val one : t
    val two : t
    val ten : t
    val minus_one : t
    module Notations :
      sig
        val ( // ) : t -> t -> t
        val ( +/ ) : t -> t -> t
        val ( -/ ) : t -> t -> t
        val ( */ ) : t -> t -> t
        val ( =/ ) : t -> t -> bool
        val ( <>/ ) : t -> t -> bool
        val ( >/ ) : t -> t -> bool
        val ( >=/ ) : t -> t -> bool
        val ( </ ) : t -> t -> bool
        val ( <=/ ) : t -> t -> bool
      end
    val compare : t -> t -> int
    val make : Z.t -> Z.t -> t
    val den : t -> Z.t
    val num : t -> Z.t
    val of_bigint : Z.t -> t
    val to_bigint : t -> Z.t
    val neg : t -> t
    val max : t -> t -> t
    val min : t -> t -> t
    val sign : t -> int
    val abs : t -> t
    val mod_ : t -> t -> t
    val floor : t -> t
    val ceiling : t -> t
    val round : t -> t
    val pow2 : int -> t
    val pow10 : int -> t
    val power : int -> t -> t
    val to_string : t -> string
    val of_string : string -> t
    val to_float : t -> float
  end
module Z : ZArith
module Q :
  sig
    module Z :
      sig
        type t = Z.t
        val zero : t
        val one : t
        val two : t
        val add : t -> t -> t
        val sub : t -> t -> t
        val mul : t -> t -> t
        val div : t -> t -> t
        val neg : t -> t
        val sign : t -> int
        val equal : t -> t -> bool
        val compare : t -> t -> int
        val power_int : t -> int -> t
        val quomod : t -> t -> t * t
        val ppcm : t -> t -> t
        val gcd : t -> t -> t
        val lcm : t -> t -> t
        val to_string : t -> string
      end
    type t
    val of_int : int -> t
    val zero : t
    val one : t
    val two : t
    val ten : t
    val minus_one : t
    module Notations :
      sig
        val ( // ) : t -> t -> t
        val ( +/ ) : t -> t -> t
        val ( -/ ) : t -> t -> t
        val ( */ ) : t -> t -> t
        val ( =/ ) : t -> t -> bool
        val ( <>/ ) : t -> t -> bool
        val ( >/ ) : t -> t -> bool
        val ( >=/ ) : t -> t -> bool
        val ( </ ) : t -> t -> bool
        val ( <=/ ) : t -> t -> bool
      end
    val compare : t -> t -> int
    val make : Z.t -> Z.t -> t
    val den : t -> Z.t
    val num : t -> Z.t
    val of_bigint : Z.t -> t
    val to_bigint : t -> Z.t
    val neg : t -> t
    val max : t -> t -> t
    val min : t -> t -> t
    val sign : t -> int
    val abs : t -> t
    val mod_ : t -> t -> t
    val floor : t -> t
    val ceiling : t -> t
    val round : t -> t
    val pow2 : int -> t
    val pow10 : int -> t
    val power : int -> t -> t
    val to_string : t -> string
    val of_string : string -> t
    val to_float : t -> float("DEBUG:rule", [Tag4 (("ZArith", 490), ((Tag1 ([Tag1 (("t", 494), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("plugins/micromega/numCompat.mli", 12, 701, 703), ("plugins/micromega/numCompat.mli", 12, 701, 709), 0), 0, 0, 0, Tag1 ("Micromega_plugin__NumCompat", 0)), 1, 0); (("zero", 495), ((Tag3 ((("t", 494)), 0, (0)), 100000000, 0, -70), 0, (("plugins/micromega/numCompat.mli", 14, 711, 713), ("plugins/micromega/numCompat.mli", 14, 711, 725), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 1)), 0); (("one", 496), ((Tag3 ((("t", 494)), 0, (0)), 100000000, 0, -69), 0, (("plugins/micromega/numCompat.mli", 15, 726, 728), ("plugins/micromega/numCompat.mli", 15, 726, 739), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 2)), 0); (("two", 497), ((Tag3 ((("t", 494)), 0, (0)), 100000000, 0, -68), 0, (("plugins/micromega/numCompat.mli", 16, 740, 742), ("plugins/micromega/numCompat.mli", 16, 740, 753), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 3)), 0); (("add", 498), ((Tag1 (0, (Tag3 ((("t", 494)), 0, (0)), 100000000, 0, -67), (Tag1 (0, (Tag3 ((("t", 494)), 0, (0)), 100000000, 0, -66), (Tag3 ((("t", 494)), 0, (0)), 100000000, 0, -65), 0), 100000000, 0, -64), 0), 100000000, 0, -63), 0, (("plugins/micromega/numCompat.mli", 17, 754, 756), ("plugins/micromega/numCompat.mli", 17, 754, 777), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 4)), 0); (("sub", 499), ((Tag1 (0, (Tag3 ((("t", 494)), 0, (0)), 100000000, 0, -62), (Tag1 (0, (Tag3 ((("t", 494)), 0, (0)), 100000000, 0, -61), (Tag3 ((("t", 494)), 0, (0)), 100000000, 0, -60), 0), 100000000, 0, -59), 0), 100000000, 0, -58), 0, (("plugins/micromega/numCompat.mli", 18, 778, 780), ("plugins/micromega/numCompat.mli", 18, 778, 801), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 5)), 0); (("mul", 500), ((Tag1 (0, (Tag3 ((("t", 494)), 0, (0)), 100000000, 0, -57), (Tag1 (0, (Tag3 ((("t", 494)), 0, (0)), 100000000, 0, -56), (Tag3 ((("t", 494)), 0, (0)), 100000000, 0, -55), 0), 100000000, 0, -54), 0), 100000000, 0, -53), 0, (("plugins/micromega/numCompat.mli", 19, 802, 804), ("plugins/micromega/numCompat.mli", 19, 802, 825), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 6)), 0); (("div", 501), ((Tag1 (0, (Tag3 ((("t", 494)), 0, (0)), 100000000, 0, -52), (Tag1 (0, (Tag3 ((("t", 494)), 0, (0)), 100000000, 0, -51), (Tag3 ((("t", 494)), 0, (0)), 100000000, 0, -50), 0), 100000000, 0, -49), 0), 100000000, 0, -48), 0, (("plugins/micromega/numCompat.mli", 20, 826, 828), ("plugins/micromega/numCompat.mli", 20, 826, 849), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 7)), 0); (("neg", 502), ((Tag1 (0, (Tag3 ((("t", 494)), 0, (0)), 100000000, 0, -47), (Tag3 ((("t", 494)), 0, (0)), 100000000, 0, -46), 0), 100000000, 0, -45), 0, (("plugins/micromega/numCompat.mli", 21, 850, 852), ("plugins/micromega/numCompat.mli", 21, 850, 868), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 8)), 0); (("sign", 503), ((Tag1 (0, (Tag3 ((("t", 494)), 0, (0)), 100000000, 0, -44), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -43), 0), 100000000, 0, -42), 0, (("plugins/micromega/numCompat.mli", 22, 869, 871), ("plugins/micromega/numCompat.mli", 22, 869, 890), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 9)), 0); (("equal", 504), ((Tag1 (0, (Tag3 ((("t", 494)), 0, (0)), 100000000, 0, -41), (Tag1 (0, (Tag3 ((("t", 494)), 0, (0)), 100000000, 0, -40), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -39), 0), 100000000, 0, -38), 0), 100000000, 0, -37), 0, (("plugins/micromega/numCompat.mli", 23, 891, 893), ("plugins/micromega/numCompat.mli", 23, 891, 919), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 10)), 0); (("compare", 505), ((Tag1 (0, (Tag3 ((("t", 494)), 0, (0)), 100000000, 0, -36), (Tag1 (0, (Tag3 ((("t", 494)), 0, (0)), 100000000, 0, -35), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -34), 0), 100000000, 0, -33), 0), 100000000, 0, -32), 0, (("plugins/micromega/numCompat.mli", 24, 920, 922), ("plugins/micromega/numCompat.mli", 24, 920, 949), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 11)), 0); (("power_int", 506), ((Tag1 (0, (Tag3 ((("t", 494)), 0, (0)), 100000000, 0, -31), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -30), (Tag3 ((("t", 494)), 0, (0)), 100000000, 0, -29), 0), 100000000, 0, -28), 0), 100000000, 0, -27), 0, (("plugins/micromega/numCompat.mli", 25, 950, 952), ("plugins/micromega/numCompat.mli", 25, 950, 981), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 12)), 0); (("quomod", 507), ((Tag1 (0, (Tag3 ((("t", 494)), 0, (0)), 100000000, 0, -26), (Tag1 (0, (Tag3 ((("t", 494)), 0, (0)), 100000000, 0, -25), (Tag2 ([(Tag3 ((("t", 494)), 0, (0)), 100000000, 0, -23); (Tag3 ((("t", 494)), 0, (0)), 100000000, 0, -24)]), 100000000, 0, -22), 0), 100000000, 0, -21), 0), 100000000, 0, -20), 0, (("plugins/micromega/numCompat.mli", 26, 982, 984), ("plugins/micromega/numCompat.mli", 26, 982, 1012), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 13)), 0); (("ppcm", 508), ((Tag1 (0, (Tag3 ((("t", 494)), 0, (0)), 100000000, 0, -19), (Tag1 (0, (Tag3 ((("t", 494)), 0, (0)), 100000000, 0, -18), (Tag3 ((("t", 494)), 0, (0)), 100000000, 0, -17), 0), 100000000, 0, -16), 0), 100000000, 0, -15), 0, (("plugins/micromega/numCompat.mli", 27, 1013, 1015), ("plugins/micromega/numCompat.mli", 27, 1013, 1037), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 14)), 0); (("gcd", 509), ((Tag1 (0, (Tag3 ((("t", 494)), 0, (0)), 100000000, 0, -14), (Tag1 (0, (Tag3 ((("t", 494)), 0, (0)), 100000000, 0, -13), (Tag3 ((("t", 494)), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0), 100000000, 0, -10), 0, (("plugins/micromega/numCompat.mli", 31, 1125, 1127), ("plugins/micromega/numCompat.mli", 31, 1125, 1148), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 15)), 0); (("lcm", 510), ((Tag1 (0, (Tag3 ((("t", 494)), 0, (0)), 100000000, 0, -9), (Tag1 (0, (Tag3 ((("t", 494)), 0, (0)), 100000000, 0, -8), (Tag3 ((("t", 494)), 0, (0)), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("plugins/micromega/numCompat.mli", 35, 1236, 1238), ("plugins/micromega/numCompat.mli", 35, 1236, 1259), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 16)), 0); (("to_string", 511), ((Tag1 (0, (Tag3 ((("t", 494)), 0, (0)), 100000000, 0, -4), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("plugins/micromega/numCompat.mli", 37, 1261, 1263), ("plugins/micromega/numCompat.mli", 37, 1261, 1290), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 17)), 0)])), 0, (("plugins/micromega/numCompat.mli", 11, 676, 676), ("plugins/micromega/numCompat.mli", 38, 1291, 1294), 0), Tag1 ("Micromega_plugin__NumCompat", 18)), 0); Tag4 (("QArith", 491), ((Tag1 ([Tag3 (("Z", 512), 0, (((("ZArith", 490))), 0, (("plugins/micromega/numCompat.mli", 41, 1321, 1323), ("plugins/micromega/numCompat.mli", 41, 1321, 1340), 0), Tag1 ("Micromega_plugin__NumCompat", 19)), 0, 0); Tag1 (("t", 513), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("plugins/micromega/numCompat.mli", 43, 1342, 1344), ("plugins/micromega/numCompat.mli", 43, 1342, 1350), 0), 0, 0, 0, Tag1 ("Micromega_plugin__NumCompat", 20)), 1, 0); (("of_int", 514), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -153), (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -152), 0), 100000000, 0, -151), 0, (("plugins/micromega/numCompat.mli", 45, 1352, 1354), ("plugins/micromega/numCompat.mli", 45, 1352, 1375), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 21)), 0); (("zero", 515), ((Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -150), 0, (("plugins/micromega/numCompat.mli", 46, 1376, 1378), ("plugins/micromega/numCompat.mli", 46, 1376, 1390), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 22)), 0); (("one", 516), ((Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -149), 0, (("plugins/micromega/numCompat.mli", 47, 1391, 1393), ("plugins/micromega/numCompat.mli", 47, 1391, 1404), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 23)), 0); (("two", 517), ((Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -148), 0, (("plugins/micromega/numCompat.mli", 48, 1405, 1407), ("plugins/micromega/numCompat.mli", 48, 1405, 1418), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 24)), 0); (("ten", 518), ((Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -147), 0, (("plugins/micromega/numCompat.mli", 49, 1419, 1421), ("plugins/micromega/numCompat.mli", 49, 1419, 1432), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 25)), 0); (("minus_one", 519), ((Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -146), 0, (("plugins/micromega/numCompat.mli", 52, 1456, 1458), ("plugins/micromega/numCompat.mli", 52, 1456, 1475), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 26)), 0); Tag3 (("Notations", 520), 0, (Tag1 ([(("//", 542), ((Tag1 (0, (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -203), (Tag1 (0, (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -202), (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -201), 0), 100000000, 0, -200), 0), 100000000, 0, -199), 0, (("plugins/micromega/numCompat.mli", 55, 1502, 1506), ("plugins/micromega/numCompat.mli", 55, 1502, 1530), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 27)), 0); (("+/", 543), ((Tag1 (0, (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -198), (Tag1 (0, (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -197), (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -196), 0), 100000000, 0, -195), 0), 100000000, 0, -194), 0, (("plugins/micromega/numCompat.mli", 56, 1531, 1535), ("plugins/micromega/numCompat.mli", 56, 1531, 1559), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 28)), 0); (("-/", 544), ((Tag1 (0, (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -193), (Tag1 (0, (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -192), (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -191), 0), 100000000, 0, -190), 0), 100000000, 0, -189), 0, (("plugins/micromega/numCompat.mli", 57, 1560, 1564), ("plugins/micromega/numCompat.mli", 57, 1560, 1588), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 29)), 0); (("*/", 545), ((Tag1 (0, (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -188), (Tag1 (0, (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -187), (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -186), 0), 100000000, 0, -185), 0), 100000000, 0, -184), 0, (("plugins/micromega/numCompat.mli", 58, 1589, 1593), ("plugins/micromega/numCompat.mli", 58, 1589, 1617), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 30)), 0); (("=/", 546), ((Tag1 (0, (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -183), (Tag1 (0, (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -182), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -181), 0), 100000000, 0, -180), 0), 100000000, 0, -179), 0, (("plugins/micromega/numCompat.mli", 59, 1618, 1622), ("plugins/micromega/numCompat.mli", 59, 1618, 1649), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 31)), 0); (("<>/", 547), ((Tag1 (0, (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -178), (Tag1 (0, (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -177), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -176), 0), 100000000, 0, -175), 0), 100000000, 0, -174), 0, (("plugins/micromega/numCompat.mli", 60, 1650, 1654), ("plugins/micromega/numCompat.mli", 60, 1650, 1682), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 32)), 0); ((">/", 548), ((Tag1 (0, (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -173), (Tag1 (0, (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -172), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -171), 0), 100000000, 0, -170), 0), 100000000, 0, -169), 0, (("plugins/micromega/numCompat.mli", 61, 1683, 1687), ("plugins/micromega/numCompat.mli", 61, 1683, 1714), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 33)), 0); ((">=/", 549), ((Tag1 (0, (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -168), (Tag1 (0, (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -167), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -166), 0), 100000000, 0, -165), 0), 100000000, 0, -164), 0, (("plugins/micromega/numCompat.mli", 62, 1715, 1719), ("plugins/micromega/numCompat.mli", 62, 1715, 1747), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 34)), 0); (("</", 550), ((Tag1 (0, (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -163), (Tag1 (0, (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -162), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -161), 0), 100000000, 0, -160), 0), 100000000, 0, -159), 0, (("plugins/micromega/numCompat.mli", 63, 1748, 1752), ("plugins/micromega/numCompat.mli", 63, 1748, 1779), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 35)), 0); (("<=/", 551), ((Tag1 (0, (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -158), (Tag1 (0, (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -157), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -156), 0), 100000000, 0, -155), 0), 100000000, 0, -154), 0, (("plugins/micromega/numCompat.mli", 64, 1780, 1784), ("plugins/micromega/numCompat.mli", 64, 1780, 1812), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 36)), 0)]), 0, (("plugins/micromega/numCompat.mli", 54, 1477, 1479), ("plugins/micromega/numCompat.mli", 65, 1813, 1818), 0), Tag1 ("Micromega_plugin__NumCompat", 37)), 0, 0); (("compare", 521), ((Tag1 (0, (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -145), (Tag1 (0, (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -144), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -143), 0), 100000000, 0, -142), 0), 100000000, 0, -141), 0, (("plugins/micromega/numCompat.mli", 67, 1820, 1822), ("plugins/micromega/numCompat.mli", 67, 1820, 1849), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 38)), 0); (("make", 522), ((Tag1 (0, (Tag3 (Tag1 ((("Z", 512)), "t"), 0, (0)), 100000000, 0, -140), (Tag1 (0, (Tag3 (Tag1 ((("Z", 512)), "t"), 0, (0)), 100000000, 0, -139), (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -138), 0), 100000000, 0, -137), 0), 100000000, 0, -136), 0, (("plugins/micromega/numCompat.mli", 68, 1850, 1852), ("plugins/micromega/numCompat.mli", 68, 1850, 1878), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 39)), 0); (("den", 523), ((Tag1 (0, (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -135), (Tag3 (Tag1 ((("Z", 512)), "t"), 0, (0)), 100000000, 0, -134), 0), 100000000, 0, -133), 0, (("plugins/micromega/numCompat.mli", 69, 1879, 1881), ("plugins/micromega/numCompat.mli", 69, 1879, 1899), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 40)), 0); (("num", 524), ((Tag1 (0, (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -132), (Tag3 (Tag1 ((("Z", 512)), "t"), 0, (0)), 100000000, 0, -131), 0), 100000000, 0, -130), 0, (("plugins/micromega/numCompat.mli", 70, 1900, 1902), ("plugins/micromega/numCompat.mli", 70, 1900, 1920), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 41)), 0); (("of_bigint", 525), ((Tag1 (0, (Tag3 (Tag1 ((("Z", 512)), "t"), 0, (0)), 100000000, 0, -129), (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -128), 0), 100000000, 0, -127), 0, (("plugins/micromega/numCompat.mli", 71, 1921, 1923), ("plugins/micromega/numCompat.mli", 71, 1921, 1947), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 42)), 0); (("to_bigint", 526), ((Tag1 (0, (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -126), (Tag3 (Tag1 ((("Z", 512)), "t"), 0, (0)), 100000000, 0, -125), 0), 100000000, 0, -124), 0, (("plugins/micromega/numCompat.mli", 72, 1948, 1950), ("plugins/micromega/numCompat.mli", 72, 1948, 1974), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 43)), 0); (("neg", 527), ((Tag1 (0, (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -123), (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -122), 0), 100000000, 0, -121), 0, (("plugins/micromega/numCompat.mli", 73, 1975, 1977), ("plugins/micromega/numCompat.mli", 73, 1975, 1993), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 44)), 0); (("max", 528), ((Tag1 (0, (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -120), (Tag1 (0, (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -119), (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -118), 0), 100000000, 0, -117), 0), 100000000, 0, -116), 0, (("plugins/micromega/numCompat.mli", 77, 2021, 2023), ("plugins/micromega/numCompat.mli", 77, 2021, 2044), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 45)), 0); (("min", 529), ((Tag1 (0, (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -115), (Tag1 (0, (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -114), (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -113), 0), 100000000, 0, -112), 0), 100000000, 0, -111), 0, (("plugins/micromega/numCompat.mli", 78, 2045, 2047), ("plugins/micromega/numCompat.mli", 78, 2045, 2068), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 46)), 0); (("sign", 530), ((Tag1 (0, (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -110), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -109), 0), 100000000, 0, -108), 0, (("plugins/micromega/numCompat.mli", 79, 2069, 2071), ("plugins/micromega/numCompat.mli", 79, 2069, 2090), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 47)), 0); (("abs", 531), ((Tag1 (0, (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -107), (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -106), 0), 100000000, 0, -105), 0, (("plugins/micromega/numCompat.mli", 80, 2091, 2093), ("plugins/micromega/numCompat.mli", 80, 2091, 2109), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 48)), 0); (("mod_", 532), ((Tag1 (0, (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -104), (Tag1 (0, (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -103), (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -102), 0), 100000000, 0, -101), 0), 100000000, 0, -100), 0, (("plugins/micromega/numCompat.mli", 81, 2110, 2112), ("plugins/micromega/numCompat.mli", 81, 2110, 2134), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 49)), 0); (("floor", 533), ((Tag1 (0, (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -99), (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -98), 0), 100000000, 0, -97), 0, (("plugins/micromega/numCompat.mli", 82, 2135, 2137), ("plugins/micromega/numCompat.mli", 82, 2135, 2155), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 50)), 0); (("ceiling", 534), ((Tag1 (0, (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -96), (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -95), 0), 100000000, 0, -94), 0, (("plugins/micromega/numCompat.mli", 83, 2156, 2158), ("plugins/micromega/numCompat.mli", 83, 2156, 2178), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 51)), 0); (("round", 535), ((Tag1 (0, (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -93), (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -92), 0), 100000000, 0, -91), 0, (("plugins/micromega/numCompat.mli", 84, 2179, 2181), ("plugins/micromega/numCompat.mli", 84, 2179, 2199), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 52)), 0); (("pow2", 536), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -90), (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -89), 0), 100000000, 0, -88), 0, (("plugins/micromega/numCompat.mli", 85, 2200, 2202), ("plugins/micromega/numCompat.mli", 85, 2200, 2221), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 53)), 0); (("pow10", 537), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -87), (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -86), 0), 100000000, 0, -85), 0, (("plugins/micromega/numCompat.mli", 86, 2222, 2224), ("plugins/micromega/numCompat.mli", 86, 2222, 2244), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 54)), 0); (("power", 538), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -84), (Tag1 (0, (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -83), (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -82), 0), 100000000, 0, -81), 0), 100000000, 0, -80), 0, (("plugins/micromega/numCompat.mli", 87, 2245, 2247), ("plugins/micromega/numCompat.mli", 87, 2245, 2272), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 55)), 0); (("to_string", 539), ((Tag1 (0, (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -79), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -78), 0), 100000000, 0, -77), 0, (("plugins/micromega/numCompat.mli", 88, 2273, 2275), ("plugins/micromega/numCompat.mli", 88, 2273, 2302), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 56)), 0); (("of_string", 540), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -76), (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -75), 0), 100000000, 0, -74), 0, (("plugins/micromega/numCompat.mli", 89, 2303, 2305), ("plugins/micromega/numCompat.mli", 89, 2303, 2332), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 57)), 0); (("to_float", 541), ((Tag1 (0, (Tag3 ((("t", 513)), 0, (0)), 100000000, 0, -73), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -72), 0), 100000000, 0, -71), 0, (("plugins/micromega/numCompat.mli", 90, 2333, 2335), ("plugins/micromega/numCompat.mli", 90, 2333, 2360), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 58)), 0)])), 0, (("plugins/micromega/numCompat.mli", 40, 1296, 1296), ("plugins/micromega/numCompat.mli", 91, 2361, 2364), 0), Tag1 ("Micromega_plugin__NumCompat", 59)), 0); Tag3 (("Z", 492), 0, (((("ZArith", 490))), 0, (("plugins/micromega/numCompat.mli", 93, 2366, 2366), ("plugins/micromega/numCompat.mli", 93, 2366, 2383), 0), Tag1 ("Micromega_plugin__NumCompat", 60)), 0, 0); Tag3 (("Q", 493), 0, (Tag1 ([Tag3 (("Z", 552), 0, (Tag1 ([Tag1 (("t", 582), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Z", 492)), "t"), 0, (0)), 100000000, 0, -356)), 0, 0, 0, 0, (("plugins/micromega/numCompat.mli", 12, 701, 703), ("plugins/micromega/numCompat.mli", 12, 701, 709), 0), 0, 0, 0, Tag1 ("Micromega_plugin__NumCompat", 0)), 1, 0); (("zero", 583), ((Tag3 ((("t", 582)), 0, (0)), 100000000, 0, -355), 0, (("plugins/micromega/numCompat.mli", 14, 711, 713), ("plugins/micromega/numCompat.mli", 14, 711, 725), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 1)), 0); (("one", 584), ((Tag3 ((("t", 582)), 0, (0)), 100000000, 0, -354), 0, (("plugins/micromega/numCompat.mli", 15, 726, 728), ("plugins/micromega/numCompat.mli", 15, 726, 739), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 2)), 0); (("two", 585), ((Tag3 ((("t", 582)), 0, (0)), 100000000, 0, -353), 0, (("plugins/micromega/numCompat.mli", 16, 740, 742), ("plugins/micromega/numCompat.mli", 16, 740, 753), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 3)), 0); (("add", 586), ((Tag1 (0, (Tag3 ((("t", 582)), 0, (0)), 100000000, 0, -352), (Tag1 (0, (Tag3 ((("t", 582)), 0, (0)), 100000000, 0, -351), (Tag3 ((("t", 582)), 0, (0)), 100000000, 0, -350), 0), 100000000, 0, -349), 0), 100000000, 0, -348), 0, (("plugins/micromega/numCompat.mli", 17, 754, 756), ("plugins/micromega/numCompat.mli", 17, 754, 777), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 4)), 0); (("sub", 587), ((Tag1 (0, (Tag3 ((("t", 582)), 0, (0)), 100000000, 0, -347), (Tag1 (0, (Tag3 ((("t", 582)), 0, (0)), 100000000, 0, -346), (Tag3 ((("t", 582)), 0, (0)), 100000000, 0, -345), 0), 100000000, 0, -344), 0), 100000000, 0, -343), 0, (("plugins/micromega/numCompat.mli", 18, 778, 780), ("plugins/micromega/numCompat.mli", 18, 778, 801), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 5)), 0); (("mul", 588), ((Tag1 (0, (Tag3 ((("t", 582)), 0, (0)), 100000000, 0, -342), (Tag1 (0, (Tag3 ((("t", 582)), 0, (0)), 100000000, 0, -341), (Tag3 ((("t", 582)), 0, (0)), 100000000, 0, -340), 0), 100000000, 0, -339), 0), 100000000, 0, -338), 0, (("plugins/micromega/numCompat.mli", 19, 802, 804), ("plugins/micromega/numCompat.mli", 19, 802, 825), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 6)), 0); (("div", 589), ((Tag1 (0, (Tag3 ((("t", 582)), 0, (0)), 100000000, 0, -337), (Tag1 (0, (Tag3 ((("t", 582)), 0, (0)), 100000000, 0, -336), (Tag3 ((("t", 582)), 0, (0)), 100000000, 0, -335), 0), 100000000, 0, -334), 0), 100000000, 0, -333), 0, (("plugins/micromega/numCompat.mli", 20, 826, 828), ("plugins/micromega/numCompat.mli", 20, 826, 849), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 7)), 0); (("neg", 590), ((Tag1 (0, (Tag3 ((("t", 582)), 0, (0)), 100000000, 0, -332), (Tag3 ((("t", 582)), 0, (0)), 100000000, 0, -331), 0), 100000000, 0, -330), 0, (("plugins/micromega/numCompat.mli", 21, 850, 852), ("plugins/micromega/numCompat.mli", 21, 850, 868), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 8)), 0); (("sign", 591), ((Tag1 (0, (Tag3 ((("t", 582)), 0, (0)), 100000000, 0, -329), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -328), 0), 100000000, 0, -327), 0, (("plugins/micromega/numCompat.mli", 22, 869, 871), ("plugins/micromega/numCompat.mli", 22, 869, 890), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 9)), 0); (("equal", 592), ((Tag1 (0, (Tag3 ((("t", 582)), 0, (0)), 100000000, 0, -326), (Tag1 (0, (Tag3 ((("t", 582)), 0, (0)), 100000000, 0, -325), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -324), 0), 100000000, 0, -323), 0), 100000000, 0, -322), 0, (("plugins/micromega/numCompat.mli", 23, 891, 893), ("plugins/micromega/numCompat.mli", 23, 891, 919), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 10)), 0); (("compare", 593), ((Tag1 (0, (Tag3 ((("t", 582)), 0, (0)), 100000000, 0, -321), (Tag1 (0, (Tag3 ((("t", 582)), 0, (0)), 100000000, 0, -320), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -319), 0), 100000000, 0, -318), 0), 100000000, 0, -317), 0, (("plugins/micromega/numCompat.mli", 24, 920, 922), ("plugins/micromega/numCompat.mli", 24, 920, 949), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 11)), 0); (("power_int", 594), ((Tag1 (0, (Tag3 ((("t", 582)), 0, (0)), 100000000, 0, -316), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -315), (Tag3 ((("t", 582)), 0, (0)), 100000000, 0, -314), 0), 100000000, 0, -313), 0), 100000000, 0, -312), 0, (("plugins/micromega/numCompat.mli", 25, 950, 952), ("plugins/micromega/numCompat.mli", 25, 950, 981), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 12)), 0); (("quomod", 595), ((Tag1 (0, (Tag3 ((("t", 582)), 0, (0)), 100000000, 0, -311), (Tag1 (0, (Tag3 ((("t", 582)), 0, (0)), 100000000, 0, -310), (Tag2 ([(Tag3 ((("t", 582)), 0, (0)), 100000000, 0, -308); (Tag3 ((("t", 582)), 0, (0)), 100000000, 0, -309)]), 100000000, 0, -307), 0), 100000000, 0, -306), 0), 100000000, 0, -305), 0, (("plugins/micromega/numCompat.mli", 26, 982, 984), ("plugins/micromega/numCompat.mli", 26, 982, 1012), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 13)), 0); (("ppcm", 596), ((Tag1 (0, (Tag3 ((("t", 582)), 0, (0)), 100000000, 0, -304), (Tag1 (0, (Tag3 ((("t", 582)), 0, (0)), 100000000, 0, -303), (Tag3 ((("t", 582)), 0, (0)), 100000000, 0, -302), 0), 100000000, 0, -301), 0), 100000000, 0, -300), 0, (("plugins/micromega/numCompat.mli", 27, 1013, 1015), ("plugins/micromega/numCompat.mli", 27, 1013, 1037), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 14)), 0); (("gcd", 597), ((Tag1 (0, (Tag3 ((("t", 582)), 0, (0)), 100000000, 0, -299), (Tag1 (0, (Tag3 ((("t", 582)), 0, (0)), 100000000, 0, -298), (Tag3 ((("t", 582)), 0, (0)), 100000000, 0, -297), 0), 100000000, 0, -296), 0), 100000000, 0, -295), 0, (("plugins/micromega/numCompat.mli", 31, 1125, 1127), ("plugins/micromega/numCompat.mli", 31, 1125, 1148), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 15)), 0); (("lcm", 598), ((Tag1 (0, (Tag3 ((("t", 582)), 0, (0)), 100000000, 0, -294), (Tag1 (0, (Tag3 ((("t", 582)), 0, (0)), 100000000, 0, -293), (Tag3 ((("t", 582)), 0, (0)), 100000000, 0, -292), 0), 100000000, 0, -291), 0), 100000000, 0, -290), 0, (("plugins/micromega/numCompat.mli", 35, 1236, 1238), ("plugins/micromega/numCompat.mli", 35, 1236, 1259), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 16)), 0); (("to_string", 599), ((Tag1 (0, (Tag3 ((("t", 582)), 0, (0)), 100000000, 0, -289), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -288), 0), 100000000, 0, -287), 0, (("plugins/micromega/numCompat.mli", 37, 1261, 1263), ("plugins/micromega/numCompat.mli", 37, 1261, 1290), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 17)), 0)]), 0, (("plugins/micromega/numCompat.mli", 93, 2366, 2366), ("plugins/micromega/numCompat.mli", 93, 2366, 2383), 0), Tag1 ("Micromega_plugin__NumCompat", 60)), 0, 0); Tag1 (("t", 553), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("plugins/micromega/numCompat.mli", 43, 1342, 1344), ("plugins/micromega/numCompat.mli", 43, 1342, 1350), 0), 0, 0, 0, Tag1 ("Micromega_plugin__NumCompat", 20)), 1, 0); (("of_int", 554), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -286), (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -285), 0), 100000000, 0, -284), 0, (("plugins/micromega/numCompat.mli", 45, 1352, 1354), ("plugins/micromega/numCompat.mli", 45, 1352, 1375), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 21)), 0); (("zero", 555), ((Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -283), 0, (("plugins/micromega/numCompat.mli", 46, 1376, 1378), ("plugins/micromega/numCompat.mli", 46, 1376, 1390), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 22)), 0); (("one", 556), ((Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -282), 0, (("plugins/micromega/numCompat.mli", 47, 1391, 1393), ("plugins/micromega/numCompat.mli", 47, 1391, 1404), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 23)), 0); (("two", 557), ((Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -281), 0, (("plugins/micromega/numCompat.mli", 48, 1405, 1407), ("plugins/micromega/numCompat.mli", 48, 1405, 1418), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 24)), 0); (("ten", 558), ((Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -280), 0, (("plugins/micromega/numCompat.mli", 49, 1419, 1421), ("plugins/micromega/numCompat.mli", 49, 1419, 1432), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 25)), 0); (("minus_one", 559), ((Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -279), 0, (("plugins/micromega/numCompat.mli", 52, 1456, 1458), ("plugins/micromega/numCompat.mli", 52, 1456, 1475), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 26)), 0); Tag3 (("Notations", 560), 0, (Tag1 ([(("//", 600), ((Tag1 (0, (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -406), (Tag1 (0, (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -405), (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -404), 0), 100000000, 0, -403), 0), 100000000, 0, -402), 0, (("plugins/micromega/numCompat.mli", 55, 1502, 1506), ("plugins/micromega/numCompat.mli", 55, 1502, 1530), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 27)), 0); (("+/", 601), ((Tag1 (0, (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -401), (Tag1 (0, (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -400), (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -399), 0), 100000000, 0, -398), 0), 100000000, 0, -397), 0, (("plugins/micromega/numCompat.mli", 56, 1531, 1535), ("plugins/micromega/numCompat.mli", 56, 1531, 1559), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 28)), 0); (("-/", 602), ((Tag1 (0, (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -396), (Tag1 (0, (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -395), (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -394), 0), 100000000, 0, -393), 0), 100000000, 0, -392), 0, (("plugins/micromega/numCompat.mli", 57, 1560, 1564), ("plugins/micromega/numCompat.mli", 57, 1560, 1588), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 29)), 0); (("*/", 603), ((Tag1 (0, (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -391), (Tag1 (0, (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -390), (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -389), 0), 100000000, 0, -388), 0), 100000000, 0, -387), 0, (("plugins/micromega/numCompat.mli", 58, 1589, 1593), ("plugins/micromega/numCompat.mli", 58, 1589, 1617), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 30)), 0); (("=/", 604), ((Tag1 (0, (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -386), (Tag1 (0, (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -385), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -384), 0), 100000000, 0, -383), 0), 100000000, 0, -382), 0, (("plugins/micromega/numCompat.mli", 59, 1618, 1622), ("plugins/micromega/numCompat.mli", 59, 1618, 1649), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 31)), 0); (("<>/", 605), ((Tag1 (0, (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -381), (Tag1 (0, (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -380), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -379), 0), 100000000, 0, -378), 0), 100000000, 0, -377), 0, (("plugins/micromega/numCompat.mli", 60, 1650, 1654), ("plugins/micromega/numCompat.mli", 60, 1650, 1682), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 32)), 0); ((">/", 606), ((Tag1 (0, (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -376), (Tag1 (0, (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -375), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -374), 0), 100000000, 0, -373), 0), 100000000, 0, -372), 0, (("plugins/micromega/numCompat.mli", 61, 1683, 1687), ("plugins/micromega/numCompat.mli", 61, 1683, 1714), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 33)), 0); ((">=/", 607), ((Tag1 (0, (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -371), (Tag1 (0, (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -370), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -369), 0), 100000000, 0, -368), 0), 100000000, 0, -367), 0, (("plugins/micromega/numCompat.mli", 62, 1715, 1719), ("plugins/micromega/numCompat.mli", 62, 1715, 1747), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 34)), 0); (("</", 608), ((Tag1 (0, (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -366), (Tag1 (0, (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -365), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -364), 0), 100000000, 0, -363), 0), 100000000, 0, -362), 0, (("plugins/micromega/numCompat.mli", 63, 1748, 1752), ("plugins/micromega/numCompat.mli", 63, 1748, 1779), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 35)), 0); (("<=/", 609), ((Tag1 (0, (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -361), (Tag1 (0, (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -360), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -359), 0), 100000000, 0, -358), 0), 100000000, 0, -357), 0, (("plugins/micromega/numCompat.mli", 64, 1780, 1784), ("plugins/micromega/numCompat.mli", 64, 1780, 1812), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 36)), 0)]), 0, (("plugins/micromega/numCompat.mli", 54, 1477, 1479), ("plugins/micromega/numCompat.mli", 65, 1813, 1818), 0), Tag1 ("Micromega_plugin__NumCompat", 37)), 0, 0); (("compare", 561), ((Tag1 (0, (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -278), (Tag1 (0, (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -277), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -276), 0), 100000000, 0, -275), 0), 100000000, 0, -274), 0, (("plugins/micromega/numCompat.mli", 67, 1820, 1822), ("plugins/micromega/numCompat.mli", 67, 1820, 1849), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 38)), 0); (("make", 562), ((Tag1 (0, (Tag3 (Tag1 ((("Z", 552)), "t"), 0, (0)), 100000000, 0, -273), (Tag1 (0, (Tag3 (Tag1 ((("Z", 552)), "t"), 0, (0)), 100000000, 0, -272), (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -271), 0), 100000000, 0, -270), 0), 100000000, 0, -269), 0, (("plugins/micromega/numCompat.mli", 68, 1850, 1852), ("plugins/micromega/numCompat.mli", 68, 1850, 1878), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 39)), 0); (("den", 563), ((Tag1 (0, (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -268), (Tag3 (Tag1 ((("Z", 552)), "t"), 0, (0)), 100000000, 0, -267), 0), 100000000, 0, -266), 0, (("plugins/micromega/numCompat.mli", 69, 1879, 1881), ("plugins/micromega/numCompat.mli", 69, 1879, 1899), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 40)), 0); (("num", 564), ((Tag1 (0, (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -265), (Tag3 (Tag1 ((("Z", 552)), "t"), 0, (0)), 100000000, 0, -264), 0), 100000000, 0, -263), 0, (("plugins/micromega/numCompat.mli", 70, 1900, 1902), ("plugins/micromega/numCompat.mli", 70, 1900, 1920), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 41)), 0); (("of_bigint", 565), ((Tag1 (0, (Tag3 (Tag1 ((("Z", 552)), "t"), 0, (0)), 100000000, 0, -262), (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -261), 0), 100000000, 0, -260), 0, (("plugins/micromega/numCompat.mli", 71, 1921, 1923), ("plugins/micromega/numCompat.mli", 71, 1921, 1947), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 42)), 0); (("to_bigint", 566), ((Tag1 (0, (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -259), (Tag3 (Tag1 ((("Z", 552)), "t"), 0, (0)), 100000000, 0, -258), 0), 100000000, 0, -257), 0, (("plugins/micromega/numCompat.mli", 72, 1948, 1950), ("plugins/micromega/numCompat.mli", 72, 1948, 1974), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 43)), 0); (("neg", 567), ((Tag1 (0, (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -256), (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -255), 0), 100000000, 0, -254), 0, (("plugins/micromega/numCompat.mli", 73, 1975, 1977), ("plugins/micromega/numCompat.mli", 73, 1975, 1993), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 44)), 0); (("max", 568), ((Tag1 (0, (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -253), (Tag1 (0, (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -252), (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -251), 0), 100000000, 0, -250), 0), 100000000, 0, -249), 0, (("plugins/micromega/numCompat.mli", 77, 2021, 2023), ("plugins/micromega/numCompat.mli", 77, 2021, 2044), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 45)), 0); (("min", 569), ((Tag1 (0, (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -248), (Tag1 (0, (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -247), (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -246), 0), 100000000, 0, -245), 0), 100000000, 0, -244), 0, (("plugins/micromega/numCompat.mli", 78, 2045, 2047), ("plugins/micromega/numCompat.mli", 78, 2045, 2068), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 46)), 0); (("sign", 570), ((Tag1 (0, (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -243), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -242), 0), 100000000, 0, -241), 0, (("plugins/micromega/numCompat.mli", 79, 2069, 2071), ("plugins/micromega/numCompat.mli", 79, 2069, 2090), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 47)), 0); (("abs", 571), ((Tag1 (0, (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -240), (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -239), 0), 100000000, 0, -238), 0, (("plugins/micromega/numCompat.mli", 80, 2091, 2093), ("plugins/micromega/numCompat.mli", 80, 2091, 2109), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 48)), 0); (("mod_", 572), ((Tag1 (0, (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -237), (Tag1 (0, (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -236), (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -235), 0), 100000000, 0, -234), 0), 100000000, 0, -233), 0, (("plugins/micromega/numCompat.mli", 81, 2110, 2112), ("plugins/micromega/numCompat.mli", 81, 2110, 2134), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 49)), 0); (("floor", 573), ((Tag1 (0, (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -232), (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -231), 0), 100000000, 0, -230), 0, (("plugins/micromega/numCompat.mli", 82, 2135, 2137), ("plugins/micromega/numCompat.mli", 82, 2135, 2155), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 50)), 0); (("ceiling", 574), ((Tag1 (0, (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -229), (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -228), 0), 100000000, 0, -227), 0, (("plugins/micromega/numCompat.mli", 83, 2156, 2158), ("plugins/micromega/numCompat.mli", 83, 2156, 2178), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 51)), 0); (("round", 575), ((Tag1 (0, (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -226), (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -225), 0), 100000000, 0, -224), 0, (("plugins/micromega/numCompat.mli", 84, 2179, 2181), ("plugins/micromega/numCompat.mli", 84, 2179, 2199), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 52)), 0); (("pow2", 576), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -223), (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -222), 0), 100000000, 0, -221), 0, (("plugins/micromega/numCompat.mli", 85, 2200, 2202), ("plugins/micromega/numCompat.mli", 85, 2200, 2221), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 53)), 0); (("pow10", 577), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -220), (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -219), 0), 100000000, 0, -218), 0, (("plugins/micromega/numCompat.mli", 86, 2222, 2224), ("plugins/micromega/numCompat.mli", 86, 2222, 2244), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 54)), 0); (("power", 578), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -217), (Tag1 (0, (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -216), (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -215), 0), 100000000, 0, -214), 0), 100000000, 0, -213), 0, (("plugins/micromega/numCompat.mli", 87, 2245, 2247), ("plugins/micromega/numCompat.mli", 87, 2245, 2272), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 55)), 0); (("to_string", 579), ((Tag1 (0, (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -212), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -211), 0), 100000000, 0, -210), 0, (("plugins/micromega/numCompat.mli", 88, 2273, 2275), ("plugins/micromega/numCompat.mli", 88, 2273, 2302), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 56)), 0); (("of_string", 580), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -209), (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -208), 0), 100000000, 0, -207), 0, (("plugins/micromega/numCompat.mli", 89, 2303, 2305), ("plugins/micromega/numCompat.mli", 89, 2303, 2332), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 57)), 0); (("to_float", 581), ((Tag1 (0, (Tag3 ((("t", 553)), 0, (0)), 100000000, 0, -206), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -205), 0), 100000000, 0, -204), 0, (("plugins/micromega/numCompat.mli", 90, 2333, 2335), ("plugins/micromega/numCompat.mli", 90, 2333, 2360), 0), 0, Tag1 ("Micromega_plugin__NumCompat", 58)), 0)]), 0, (("plugins/micromega/numCompat.mli", 94, 2384, 2384), ("plugins/micromega/numCompat.mli", 94, 2384, 2419), 0), Tag1 ("Micromega_plugin__NumCompat", 61)), 0, 0)], "Micromega_plugin__NumCompat", [("Micromega_plugin__NumCompat", ("\167R)~D\225*6\249\146\173\\\233F6m")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Micromega_plugin", ("-|C6\194\020\193\204\234h\242\238\191\214'\193")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

  end

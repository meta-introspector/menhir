module type Full = Base__Hash_intf.Full
module type S = Base__Hash_intf.S
module F :
  functor (Hash : S) ->
    sig
      val description : string
      type state = Hash.state
      val fold_int : state -> int -> state
      val fold_int64 : state -> int64 -> state
      val fold_float : state -> float -> state
      val fold_string : state -> string -> state
      type seed = Hash.seed
      val alloc : unit -> state
      val reset : ?seed:seed -> state -> state
      type hash_value = Hash.hash_value
      val get_hash_value : state -> hash_value
      module For_tests :
        sig
          val compare_state : state -> state -> int
          val state_to_string : state -> string
        end
      type 'a folder = state -> 'a -> state
      val create : ?seed:seed -> unit -> state
      val of_fold : (state -> 'a -> state) -> 'a -> hash_value
      module Builtin :
        sig
          val hash_fold_nativeint : nativeint folder
          val hash_fold_int64 : int64 folder
          val hash_fold_int32 : int32 folder
          val hash_fold_char : char folder
          val hash_fold_int : int folder
          val hash_fold_bool : bool folder
          val hash_fold_string : string folder
          val hash_fold_float : float folder
          val hash_fold_unit : unit folder
          val hash_fold_option : 'a folder -> 'a option folder
          val hash_fold_list : 'a folder -> 'a list folder
          val hash_fold_lazy_t : 'a folder -> 'a lazy_t folder
          val hash_fold_ref_frozen :
            'a folder -> 'a Base__.Import0.ref folder
          val hash_fold_array_frozen : 'a folder -> 'a array folder
          val hash_nativeint : nativeint -> hash_value
          val hash_int64 : int64 -> hash_value
          val hash_int32 : int32 -> hash_value
          val hash_char : char -> hash_value
          val hash_int : int -> hash_value
          val hash_bool : bool -> hash_value
          val hash_string : string -> hash_value
          val hash_float : float -> hash_value
          val hash_unit : unit -> hash_value
        end
      val run : ?seed:seed -> 'a folder -> 'a -> hash_value
    end
val description : string
type state = Base_internalhash_types.state
val fold_int : state -> int -> state
val fold_int64 : state -> int64 -> state
val fold_float : state -> float -> state
val fold_string : state -> string -> state
type seed = Base_internalhash_types.seed
val alloc : unit -> state
val reset : ?seed:seed -> state -> state
type hash_value = Base_internalhash_types.hash_value
val get_hash_value : state -> hash_value
module For_tests :
  sig
    val compare_state : state -> state -> int
    val state_to_string : state -> string
  end
type 'a folder = state -> 'a -> state
val create : ?seed:seed -> unit -> state
val of_fold : (state -> 'a -> state) -> 'a -> hash_value
module Builtin :
  sig
    val hash_fold_nativeint : nativeint folder
    val hash_fold_int64 : int64 folder
    val hash_fold_int32 : int32 folder
    val hash_fold_char : char folder
    val hash_fold_int : int folder
    val hash_fold_bool : bool folder
    val hash_fold_string : string folder
    val hash_fold_float : float folder
    val hash_fold_unit : unit folder
    val hash_fold_option : 'a folder -> 'a option folder
    val hash_fold_list : 'a folder -> 'a list folder
    val hash_fold_lazy_t : 'a folder -> 'a lazy_t folder
    val hash_fold_ref_frozen : 'a folder -> 'a Base__.Import0.ref folder
    val hash_fold_array_frozen : 'a folder -> 'a array folder
    val hash_nativeint : nativeint -> hash_value
    val hash_int64 : int64 -> hash_value
    val hash_int32 : int32 -> hash_value
    val hash_char : char -> hash_value
    val hash_int : int -> hash_value
    val hash_bool : bool -> hash_value
    val hash_string : string -> hash_value
    val hash_float : float -> hash_value
    val hash_unit : unit -> hash_value
  end("DEBUG:rule", [Tag4 (("Full", 855), (((Tag1 ((Tag2 ("Base__Hash_intf")), "Full"))), 0, (("src/hash_intf.ml", 145, 5223, 5225), ("src/hash_intf.ml", 145, 5223, 5248), 0), Tag1 ("Base__Hash_intf", 53)), 0); Tag4 (("S", 856), (((Tag1 ((Tag2 ("Base__Hash_intf")), "S"))), 0, (("src/hash_intf.ml", 146, 5249, 5251), ("src/hash_intf.ml", 146, 5249, 5268), 0), Tag1 ("Base__Hash_intf", 54)), 0); Tag3 (("F", 857), 0, (Tag2 (((("Hash", 875)), ((("S", 856)))), Tag1 ([(("description", 876), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -127), 0, (("src/hash_intf.ml", 31, 1329, 1331), ("src/hash_intf.ml", 31, 1329, 1355), 0), 0, Tag1 ("Base__Hash_intf", 0)), 0); Tag1 (("state", 877), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Hash", 875)), "state"), 0, (0)), 100000000, 0, -126)), 0, 0, 0, 0, (("src/hash_intf.ml", 151, 5346, 5355), ("src/hash_intf.ml", 151, 5346, 5378), 0), 0, 0, 0, Tag1 ("Base__Hash_intf", 57)), 1, 0); (("fold_int", 878), ((Tag1 (0, (Tag3 ((("state", 877)), 0, (0)), 100000000, 0, -125), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -124), (Tag3 ((("state", 877)), 0, (0)), 100000000, 0, -123), 0), 100000000, 0, -122), 0), 100000000, 0, -121), 0, (("src/hash_intf.ml", 40, 1760, 1762), ("src/hash_intf.ml", 40, 1760, 1798), 0), 0, Tag1 ("Base__Hash_intf", 2)), 0); (("fold_int64", 879), ((Tag1 (0, (Tag3 ((("state", 877)), 0, (0)), 100000000, 0, -120), (Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -119), (Tag3 ((("state", 877)), 0, (0)), 100000000, 0, -118), 0), 100000000, 0, -117), 0), 100000000, 0, -116), 0, (("src/hash_intf.ml", 42, 1800, 1802), ("src/hash_intf.ml", 42, 1800, 1842), 0), 0, Tag1 ("Base__Hash_intf", 3)), 0); (("fold_float", 880), ((Tag1 (0, (Tag3 ((("state", 877)), 0, (0)), 100000000, 0, -115), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -114), (Tag3 ((("state", 877)), 0, (0)), 100000000, 0, -113), 0), 100000000, 0, -112), 0), 100000000, 0, -111), 0, (("src/hash_intf.ml", 43, 1843, 1845), ("src/hash_intf.ml", 43, 1843, 1885), 0), 0, Tag1 ("Base__Hash_intf", 4)), 0); (("fold_string", 881), ((Tag1 (0, (Tag3 ((("state", 877)), 0, (0)), 100000000, 0, -110), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -109), (Tag3 ((("state", 877)), 0, (0)), 100000000, 0, -108), 0), 100000000, 0, -107), 0), 100000000, 0, -106), 0, (("src/hash_intf.ml", 44, 1886, 1888), ("src/hash_intf.ml", 44, 1886, 1930), 0), 0, Tag1 ("Base__Hash_intf", 5)), 0); Tag1 (("seed", 882), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Hash", 875)), "seed"), 0, (0)), 100000000, 0, -105)), 0, 0, 0, 0, (("src/hash_intf.ml", 152, 5379, 5388), ("src/hash_intf.ml", 152, 5379, 5409), 0), 0, 0, 0, Tag1 ("Base__Hash_intf", 58)), 1, 0); (("alloc", 883), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -104), (Tag3 ((("state", 877)), 0, (0)), 100000000, 0, -103), 0), 100000000, 0, -102), 0, (("src/hash_intf.ml", 50, 2087, 2089), ("src/hash_intf.ml", 50, 2087, 2114), 0), 0, Tag1 ("Base__Hash_intf", 7)), 0); (("reset", 884), ((Tag1 (Tag1 ("seed"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("seed", 882)), 0, (0)), 100000000, 0, -101)], (0)), 100000000, 0, -100), (Tag1 (0, (Tag3 ((("state", 877)), 0, (0)), 100000000, 0, -99), (Tag3 ((("state", 877)), 0, (0)), 100000000, 0, -98), 0), 100000000, 0, -97), 0), 100000000, 0, -96), 0, (("src/hash_intf.ml", 54, 2284, 2286), ("src/hash_intf.ml", 54, 2284, 2326), 0), 0, Tag1 ("Base__Hash_intf", 8)), 0); Tag1 (("hash_value", 885), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Hash", 875)), "hash_value"), 0, (0)), 100000000, 0, -95)), 0, 0, 0, 0, (("src/hash_intf.ml", 150, 5303, 5312), ("src/hash_intf.ml", 150, 5303, 5345), 0), 0, 0, 0, Tag1 ("Base__Hash_intf", 56)), 1, 0); (("get_hash_value", 886), ((Tag1 (0, (Tag3 ((("state", 877)), 0, (0)), 100000000, 0, -94), (Tag3 ((("hash_value", 885)), 0, (0)), 100000000, 0, -93), 0), 100000000, 0, -92), 0, (("src/hash_intf.ml", 60, 2493, 2495), ("src/hash_intf.ml", 60, 2493, 2535), 0), 0, Tag1 ("Base__Hash_intf", 10)), 0); Tag3 (("For_tests", 887), 0, (Tag1 ([(("compare_state", 893), ((Tag1 (0, (Tag3 ((("state", 877)), 0, (0)), 100000000, 0, -135), (Tag1 (0, (Tag3 ((("state", 877)), 0, (0)), 100000000, 0, -134), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -133), 0), 100000000, 0, -132), 0), 100000000, 0, -131), 0, (("src/hash_intf.ml", 63, 2562, 2566), ("src/hash_intf.ml", 63, 2562, 2607), 0), 0, Tag1 ("Base__Hash_intf", 11)), 0); (("state_to_string", 894), ((Tag1 (0, (Tag3 ((("state", 877)), 0, (0)), 100000000, 0, -130), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -129), 0), 100000000, 0, -128), 0, (("src/hash_intf.ml", 64, 2608, 2612), ("src/hash_intf.ml", 64, 2608, 2649), 0), 0, Tag1 ("Base__Hash_intf", 12)), 0)]), 0, (("src/hash_intf.ml", 62, 2537, 2539), ("src/hash_intf.ml", 65, 2650, 2655), 0), Tag1 ("Base__Hash_intf", 13)), 0, 0); Tag1 (("folder", 888), ([((("a")), 100000000, 0, -90)], 1, 0, 1, ((Tag1 (0, (Tag3 ((("state", 877)), 0, (0)), 100000000, 0, -91), (Tag1 (0, ((("a")), 100000000, 0, -90), (Tag3 ((("state", 877)), 0, (0)), 100000000, 0, -89), 0), 100000000, 0, -88), 0), 100000000, 0, -87)), [46], [0], 0, 0, (("src/hash_intf.ml", 120, 4367, 4369), ("src/hash_intf.ml", 120, 4367, 4406), 0), 0, 0, 0, Tag1 ("Base__Hash_intf", 44)), 1, 0); (("create", 889), ((Tag1 (Tag1 ("seed"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("seed", 882)), 0, (0)), 100000000, 0, -86)], (0)), 100000000, 0, -85), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -84), (Tag3 ((("state", 877)), 0, (0)), 100000000, 0, -83), 0), 100000000, 0, -82), 0), 100000000, 0, -81), 0, (("src/hash_intf.ml", 123, 4494, 4496), ("src/hash_intf.ml", 123, 4494, 4536), 0), 0, Tag1 ("Base__Hash_intf", 45)), 0); (("of_fold", 890), ((Tag1 (0, (Tag1 (0, (Tag3 ((("state", 877)), 0, (0)), 100000000, 0, -80), (Tag1 (0, ((("a")), 100000000, 0, -76), (Tag3 ((("state", 877)), 0, (0)), 100000000, 0, -79), 0), 100000000, 0, -78), 0), 100000000, 0, -77), (Tag1 (0, ((("a")), 100000000, 0, -76), (Tag3 ((("hash_value", 885)), 0, (0)), 100000000, 0, -75), 0), 100000000, 0, -74), 0), 100000000, 0, -73), 0, (("src/hash_intf.ml", 127, 4636, 4638), ("src/hash_intf.ml", 127, 4636, 4694), 0), 0, Tag1 ("Base__Hash_intf", 46)), 0); Tag3 (("Builtin", 891), 0, (Tag1 ([(("hash_fold_nativeint", 895), ((Tag3 ((("folder", 888)), [(Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -205)], (0)), 100000000, 0, -204), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 17)), 0); (("hash_fold_int64", 896), ((Tag3 ((("folder", 888)), [(Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -203)], (0)), 100000000, 0, -202), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 18)), 0); (("hash_fold_int32", 897), ((Tag3 ((("folder", 888)), [(Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -201)], (0)), 100000000, 0, -200), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 19)), 0); (("hash_fold_char", 898), ((Tag3 ((("folder", 888)), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -199)], (0)), 100000000, 0, -198), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 20)), 0); (("hash_fold_int", 899), ((Tag3 ((("folder", 888)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -197)], (0)), 100000000, 0, -196), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 21)), 0); (("hash_fold_bool", 900), ((Tag3 ((("folder", 888)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -195)], (0)), 100000000, 0, -194), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 22)), 0); (("hash_fold_string", 901), ((Tag3 ((("folder", 888)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -193)], (0)), 100000000, 0, -192), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 23)), 0); (("hash_fold_float", 902), ((Tag3 ((("folder", 888)), [(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -191)], (0)), 100000000, 0, -190), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 24)), 0); (("hash_fold_unit", 903), ((Tag3 ((("folder", 888)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -189)], (0)), 100000000, 0, -188), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 25)), 0); (("hash_fold_option", 904), ((Tag1 (0, (Tag3 ((("folder", 888)), [((("a")), 100000000, 0, -186)], (0)), 100000000, 0, -187), (Tag3 ((("folder", 888)), [(Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -186)], (0)), 100000000, 0, -185)], (0)), 100000000, 0, -184), 0), 100000000, 0, -183), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 26)), 0); (("hash_fold_list", 905), ((Tag1 (0, (Tag3 ((("folder", 888)), [((("a")), 100000000, 0, -181)], (0)), 100000000, 0, -182), (Tag3 ((("folder", 888)), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -181)], (0)), 100000000, 0, -180)], (0)), 100000000, 0, -179), 0), 100000000, 0, -178), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 27)), 0); (("hash_fold_lazy_t", 906), ((Tag1 (0, (Tag3 ((("folder", 888)), [((("a")), 100000000, 0, -176)], (0)), 100000000, 0, -177), (Tag3 ((("folder", 888)), [(Tag3 ((Tag3 ("lazy_t", 14)), [((("a")), 100000000, 0, -176)], (0)), 100000000, 0, -175)], (0)), 100000000, 0, -174), 0), 100000000, 0, -173), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 28)), 0); (("hash_fold_ref_frozen", 907), ((Tag1 (0, (Tag3 ((("folder", 888)), [((("a")), 100000000, 0, -171)], (0)), 100000000, 0, -172), (Tag3 ((("folder", 888)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Import0"), "ref"), [((("a")), 100000000, 0, -171)], (0)), 100000000, 0, -170)], (0)), 100000000, 0, -169), 0), 100000000, 0, -168), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 29)), 0); (("hash_fold_array_frozen", 908), ((Tag1 (0, (Tag3 ((("folder", 888)), [((("a")), 100000000, 0, -166)], (0)), 100000000, 0, -167), (Tag3 ((("folder", 888)), [(Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -166)], (0)), 100000000, 0, -165)], (0)), 100000000, 0, -164), 0), 100000000, 0, -163), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 30)), 0); (("hash_nativeint", 909), ((Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -162), (Tag3 ((("hash_value", 885)), 0, (0)), 100000000, 0, -161), 0), 100000000, 0, -160), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 33)), 0); (("hash_int64", 910), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -159), (Tag3 ((("hash_value", 885)), 0, (0)), 100000000, 0, -158), 0), 100000000, 0, -157), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 34)), 0); (("hash_int32", 911), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -156), (Tag3 ((("hash_value", 885)), 0, (0)), 100000000, 0, -155), 0), 100000000, 0, -154), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 35)), 0); (("hash_char", 912), ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -153), (Tag3 ((("hash_value", 885)), 0, (0)), 100000000, 0, -152), 0), 100000000, 0, -151), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 36)), 0); (("hash_int", 913), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -150), (Tag3 ((("hash_value", 885)), 0, (0)), 100000000, 0, -149), 0), 100000000, 0, -148), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 37)), 0); (("hash_bool", 914), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -147), (Tag3 ((("hash_value", 885)), 0, (0)), 100000000, 0, -146), 0), 100000000, 0, -145), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 38)), 0); (("hash_string", 915), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -144), (Tag3 ((("hash_value", 885)), 0, (0)), 100000000, 0, -143), 0), 100000000, 0, -142), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 39)), 0); (("hash_float", 916), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -141), (Tag3 ((("hash_value", 885)), 0, (0)), 100000000, 0, -140), 0), 100000000, 0, -139), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 40)), 0); (("hash_unit", 917), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -138), (Tag3 ((("hash_value", 885)), 0, (0)), 100000000, 0, -137), 0), 100000000, 0, -136), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 41)), 0)]), 0, (("src/hash_intf.ml", 129, 4696, 4698), ("src/hash_intf.ml", 133, 4798, 4836), 0), Tag1 ("Base__Hash_intf", 50)), 0, 0); (("run", 892), ((Tag1 (Tag1 ("seed"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("seed", 882)), 0, (0)), 100000000, 0, -72)], (0)), 100000000, 0, -71), (Tag1 (0, (Tag3 ((("folder", 888)), [((("a")), 100000000, 0, -69)], (0)), 100000000, 0, -70), (Tag1 (0, ((("a")), 100000000, 0, -69), (Tag3 ((("hash_value", 885)), 0, (0)), 100000000, 0, -68), 0), 100000000, 0, -67), 0), 100000000, 0, -66), 0), 100000000, 0, -65), 0, (("src/hash_intf.ml", 141, 5139, 5141), ("src/hash_intf.ml", 141, 5139, 5194), 0), 0, Tag1 ("Base__Hash_intf", 51)), 0)])), 0, (("src/hash_intf.ml", 148, 5270, 5272), ("src/hash_intf.ml", 152, 5379, 5409), 0), Tag1 ("Base__Hash_intf", 59)), 0, 0); (("description", 858), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -64), 0, (("src/hash_intf.ml", 31, 1329, 1331), ("src/hash_intf.ml", 31, 1329, 1355), 0), 0, Tag1 ("Base__Hash_intf", 0)), 0); Tag1 (("state", 859), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Base_internalhash_types")), "state"), 0, (0)), 100000000, 0, -63)), 0, 0, 0, 0, (("src/hash_intf.ml", 192, 7449, 7458), ("src/hash_intf.ml", 192, 7449, 7500), 0), 0, 1, 0, Tag1 ("Base__Hash_intf", 60)), 1, 0); (("fold_int", 860), ((Tag1 (0, (Tag3 ((("state", 859)), 0, (0)), 100000000, 0, -62), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -61), (Tag3 ((("state", 859)), 0, (0)), 100000000, 0, -60), 0), 100000000, 0, -59), 0), 100000000, 0, -58), 0, (("src/hash_intf.ml", 40, 1760, 1762), ("src/hash_intf.ml", 40, 1760, 1798), 0), 0, Tag1 ("Base__Hash_intf", 2)), 0); (("fold_int64", 861), ((Tag1 (0, (Tag3 ((("state", 859)), 0, (0)), 100000000, 0, -57), (Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -56), (Tag3 ((("state", 859)), 0, (0)), 100000000, 0, -55), 0), 100000000, 0, -54), 0), 100000000, 0, -53), 0, (("src/hash_intf.ml", 42, 1800, 1802), ("src/hash_intf.ml", 42, 1800, 1842), 0), 0, Tag1 ("Base__Hash_intf", 3)), 0); (("fold_float", 862), ((Tag1 (0, (Tag3 ((("state", 859)), 0, (0)), 100000000, 0, -52), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -51), (Tag3 ((("state", 859)), 0, (0)), 100000000, 0, -50), 0), 100000000, 0, -49), 0), 100000000, 0, -48), 0, (("src/hash_intf.ml", 43, 1843, 1845), ("src/hash_intf.ml", 43, 1843, 1885), 0), 0, Tag1 ("Base__Hash_intf", 4)), 0); (("fold_string", 863), ((Tag1 (0, (Tag3 ((("state", 859)), 0, (0)), 100000000, 0, -47), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -46), (Tag3 ((("state", 859)), 0, (0)), 100000000, 0, -45), 0), 100000000, 0, -44), 0), 100000000, 0, -43), 0, (("src/hash_intf.ml", 44, 1886, 1888), ("src/hash_intf.ml", 44, 1886, 1930), 0), 0, Tag1 ("Base__Hash_intf", 5)), 0); Tag1 (("seed", 864), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Base_internalhash_types")), "seed"), 0, (0)), 100000000, 0, -42)), 0, 0, 0, 0, (("src/hash_intf.ml", 193, 7501, 7510), ("src/hash_intf.ml", 193, 7501, 7550), 0), 0, 1, 0, Tag1 ("Base__Hash_intf", 61)), 1, 0); (("alloc", 865), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -41), (Tag3 ((("state", 859)), 0, (0)), 100000000, 0, -40), 0), 100000000, 0, -39), 0, (("src/hash_intf.ml", 50, 2087, 2089), ("src/hash_intf.ml", 50, 2087, 2114), 0), 0, Tag1 ("Base__Hash_intf", 7)), 0); (("reset", 866), ((Tag1 (Tag1 ("seed"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("seed", 864)), 0, (0)), 100000000, 0, -38)], (0)), 100000000, 0, -37), (Tag1 (0, (Tag3 ((("state", 859)), 0, (0)), 100000000, 0, -36), (Tag3 ((("state", 859)), 0, (0)), 100000000, 0, -35), 0), 100000000, 0, -34), 0), 100000000, 0, -33), 0, (("src/hash_intf.ml", 54, 2284, 2286), ("src/hash_intf.ml", 54, 2284, 2326), 0), 0, Tag1 ("Base__Hash_intf", 8)), 0); Tag1 (("hash_value", 867), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Base_internalhash_types")), "hash_value"), 0, (0)), 100000000, 0, -32)), 0, 0, 0, 0, (("src/hash_intf.ml", 194, 7551, 7560), ("src/hash_intf.ml", 194, 7551, 7612), 0), 0, 1, 0, Tag1 ("Base__Hash_intf", 62)), 1, 0); (("get_hash_value", 868), ((Tag1 (0, (Tag3 ((("state", 859)), 0, (0)), 100000000, 0, -31), (Tag3 ((("hash_value", 867)), 0, (0)), 100000000, 0, -30), 0), 100000000, 0, -29), 0, (("src/hash_intf.ml", 60, 2493, 2495), ("src/hash_intf.ml", 60, 2493, 2535), 0), 0, Tag1 ("Base__Hash_intf", 10)), 0); Tag3 (("For_tests", 869), 0, (Tag1 ([(("compare_state", 918), ((Tag1 (0, (Tag3 ((("state", 859)), 0, (0)), 100000000, 0, -213), (Tag1 (0, (Tag3 ((("state", 859)), 0, (0)), 100000000, 0, -212), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -211), 0), 100000000, 0, -210), 0), 100000000, 0, -209), 0, (("src/hash_intf.ml", 63, 2562, 2566), ("src/hash_intf.ml", 63, 2562, 2607), 0), 0, Tag1 ("Base__Hash_intf", 11)), 0); (("state_to_string", 919), ((Tag1 (0, (Tag3 ((("state", 859)), 0, (0)), 100000000, 0, -208), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -207), 0), 100000000, 0, -206), 0, (("src/hash_intf.ml", 64, 2608, 2612), ("src/hash_intf.ml", 64, 2608, 2649), 0), 0, Tag1 ("Base__Hash_intf", 12)), 0)]), 0, (("src/hash_intf.ml", 62, 2537, 2539), ("src/hash_intf.ml", 65, 2650, 2655), 0), Tag1 ("Base__Hash_intf", 13)), 0, 0); Tag1 (("folder", 870), ([((("a")), 100000000, 0, -27)], 1, 0, 1, ((Tag1 (0, (Tag3 ((("state", 859)), 0, (0)), 100000000, 0, -28), (Tag1 (0, ((("a")), 100000000, 0, -27), (Tag3 ((("state", 859)), 0, (0)), 100000000, 0, -26), 0), 100000000, 0, -25), 0), 100000000, 0, -24)), [46], [0], 0, 0, (("src/hash_intf.ml", 120, 4367, 4369), ("src/hash_intf.ml", 120, 4367, 4406), 0), 0, 0, 0, Tag1 ("Base__Hash_intf", 44)), 1, 0); (("create", 871), ((Tag1 (Tag1 ("seed"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("seed", 864)), 0, (0)), 100000000, 0, -23)], (0)), 100000000, 0, -22), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -21), (Tag3 ((("state", 859)), 0, (0)), 100000000, 0, -20), 0), 100000000, 0, -19), 0), 100000000, 0, -18), 0, (("src/hash_intf.ml", 123, 4494, 4496), ("src/hash_intf.ml", 123, 4494, 4536), 0), 0, Tag1 ("Base__Hash_intf", 45)), 0); (("of_fold", 872), ((Tag1 (0, (Tag1 (0, (Tag3 ((("state", 859)), 0, (0)), 100000000, 0, -17), (Tag1 (0, ((("a")), 100000000, 0, -13), (Tag3 ((("state", 859)), 0, (0)), 100000000, 0, -16), 0), 100000000, 0, -15), 0), 100000000, 0, -14), (Tag1 (0, ((("a")), 100000000, 0, -13), (Tag3 ((("hash_value", 867)), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0), 100000000, 0, -10), 0, (("src/hash_intf.ml", 127, 4636, 4638), ("src/hash_intf.ml", 127, 4636, 4694), 0), 0, Tag1 ("Base__Hash_intf", 46)), 0); Tag3 (("Builtin", 873), 0, (Tag1 ([(("hash_fold_nativeint", 920), ((Tag3 ((("folder", 870)), [(Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -283)], (0)), 100000000, 0, -282), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 17)), 0); (("hash_fold_int64", 921), ((Tag3 ((("folder", 870)), [(Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -281)], (0)), 100000000, 0, -280), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 18)), 0); (("hash_fold_int32", 922), ((Tag3 ((("folder", 870)), [(Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -279)], (0)), 100000000, 0, -278), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 19)), 0); (("hash_fold_char", 923), ((Tag3 ((("folder", 870)), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -277)], (0)), 100000000, 0, -276), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 20)), 0); (("hash_fold_int", 924), ((Tag3 ((("folder", 870)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -275)], (0)), 100000000, 0, -274), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 21)), 0); (("hash_fold_bool", 925), ((Tag3 ((("folder", 870)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -273)], (0)), 100000000, 0, -272), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 22)), 0); (("hash_fold_string", 926), ((Tag3 ((("folder", 870)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -271)], (0)), 100000000, 0, -270), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 23)), 0); (("hash_fold_float", 927), ((Tag3 ((("folder", 870)), [(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -269)], (0)), 100000000, 0, -268), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 24)), 0); (("hash_fold_unit", 928), ((Tag3 ((("folder", 870)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -267)], (0)), 100000000, 0, -266), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 25)), 0); (("hash_fold_option", 929), ((Tag1 (0, (Tag3 ((("folder", 870)), [((("a")), 100000000, 0, -264)], (0)), 100000000, 0, -265), (Tag3 ((("folder", 870)), [(Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -264)], (0)), 100000000, 0, -263)], (0)), 100000000, 0, -262), 0), 100000000, 0, -261), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 26)), 0); (("hash_fold_list", 930), ((Tag1 (0, (Tag3 ((("folder", 870)), [((("a")), 100000000, 0, -259)], (0)), 100000000, 0, -260), (Tag3 ((("folder", 870)), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -259)], (0)), 100000000, 0, -258)], (0)), 100000000, 0, -257), 0), 100000000, 0, -256), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 27)), 0); (("hash_fold_lazy_t", 931), ((Tag1 (0, (Tag3 ((("folder", 870)), [((("a")), 100000000, 0, -254)], (0)), 100000000, 0, -255), (Tag3 ((("folder", 870)), [(Tag3 ((Tag3 ("lazy_t", 14)), [((("a")), 100000000, 0, -254)], (0)), 100000000, 0, -253)], (0)), 100000000, 0, -252), 0), 100000000, 0, -251), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 28)), 0); (("hash_fold_ref_frozen", 932), ((Tag1 (0, (Tag3 ((("folder", 870)), [((("a")), 100000000, 0, -249)], (0)), 100000000, 0, -250), (Tag3 ((("folder", 870)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Import0"), "ref"), [((("a")), 100000000, 0, -249)], (0)), 100000000, 0, -248)], (0)), 100000000, 0, -247), 0), 100000000, 0, -246), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 29)), 0); (("hash_fold_array_frozen", 933), ((Tag1 (0, (Tag3 ((("folder", 870)), [((("a")), 100000000, 0, -244)], (0)), 100000000, 0, -245), (Tag3 ((("folder", 870)), [(Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -244)], (0)), 100000000, 0, -243)], (0)), 100000000, 0, -242), 0), 100000000, 0, -241), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 30)), 0); (("hash_nativeint", 934), ((Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -240), (Tag3 ((("hash_value", 867)), 0, (0)), 100000000, 0, -239), 0), 100000000, 0, -238), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 33)), 0); (("hash_int64", 935), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -237), (Tag3 ((("hash_value", 867)), 0, (0)), 100000000, 0, -236), 0), 100000000, 0, -235), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 34)), 0); (("hash_int32", 936), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -234), (Tag3 ((("hash_value", 867)), 0, (0)), 100000000, 0, -233), 0), 100000000, 0, -232), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 35)), 0); (("hash_char", 937), ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -231), (Tag3 ((("hash_value", 867)), 0, (0)), 100000000, 0, -230), 0), 100000000, 0, -229), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 36)), 0); (("hash_int", 938), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -228), (Tag3 ((("hash_value", 867)), 0, (0)), 100000000, 0, -227), 0), 100000000, 0, -226), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 37)), 0); (("hash_bool", 939), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -225), (Tag3 ((("hash_value", 867)), 0, (0)), 100000000, 0, -224), 0), 100000000, 0, -223), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 38)), 0); (("hash_string", 940), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -222), (Tag3 ((("hash_value", 867)), 0, (0)), 100000000, 0, -221), 0), 100000000, 0, -220), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 39)), 0); (("hash_float", 941), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -219), (Tag3 ((("hash_value", 867)), 0, (0)), 100000000, 0, -218), 0), 100000000, 0, -217), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 40)), 0); (("hash_unit", 942), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -216), (Tag3 ((("hash_value", 867)), 0, (0)), 100000000, 0, -215), 0), 100000000, 0, -214), 0, (("src/hash_intf.ml", 130, 4715, 4719), ("src/hash_intf.ml", 133, 4798, 4836), 0), 0, Tag1 ("Base__Hash_intf", 41)), 0)]), 0, (("src/hash_intf.ml", 129, 4696, 4698), ("src/hash_intf.ml", 133, 4798, 4836), 0), Tag1 ("Base__Hash_intf", 50)), 0, 0); (("run", 874), ((Tag1 (Tag1 ("seed"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("seed", 864)), 0, (0)), 100000000, 0, -9)], (0)), 100000000, 0, -8), (Tag1 (0, (Tag3 ((("folder", 870)), [((("a")), 100000000, 0, -6)], (0)), 100000000, 0, -7), (Tag1 (0, ((("a")), 100000000, 0, -6), (Tag3 ((("hash_value", 867)), 0, (0)), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/hash_intf.ml", 141, 5139, 5141), ("src/hash_intf.ml", 141, 5139, 5194), 0), 0, Tag1 ("Base__Hash_intf", 51)), 0)], "Base__Hash", [("Base__Hash", ("\206Rc\194\234{s3\248\165\024\162\203{\206\206")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__StdLabels", (".\193\n\229\139\017\212C-ZA\\kz-\128")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__MoreLabels", ("\248\232\248\254`<\230\241\161U\193U\1466J\238")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shadow_stdlib", ("\219zi\164\203\158e)\232\221\196\168\138x\142\018")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Base_internalhash_types", ("0\148#2\226\223\018\135\173>!\020\237\017\255\149")); ("Base__Poly0", ("\230;\143\234\255.H\132KOe7\155\\\023f")); ("Base__Import0", ("\156\129U\197Y[\\\153\017Ho\203\173\204\220\020")); ("Base__Hash_intf", ("h\004P\218\1531G\127\212\208A\024\140\164iq")); ("Base__Bool0", ("\177f\254p\023\143&\239\020\136\206\242~\018F\251")); ("Base__", ("p\252\007\139\128\163W\025+\0225\001\246|P\158"))], [(0)])

val run : ?seed:seed -> 'a folder -> 'a -> hash_value

type ('a, 'b) pointer = ('a, 'b) Ctypes_static.pointer
type 'a ptr = ('a, [ `C ]) pointer
type 'a ocaml = 'a Ctypes_static.ocaml
type 'a carray = 'a Ctypes_static.carray
type 'a bigarray_class = 'a Ctypes_static.bigarray_class
val genarray :
  < ba_repr : 'b; bigarray : ('a, 'b, 'l) Bigarray_compat.Genarray.t;
    carray : 'a carray; dims : int array; element : 'a; layout : 'l >
  bigarray_class
val array1 :
  < ba_repr : 'b; bigarray : ('a, 'b, 'l) Bigarray_compat.Array1.t;
    carray : 'a carray; dims : int; element : 'a; layout : 'l >
  bigarray_class
val array2 :
  < ba_repr : 'b; bigarray : ('a, 'b, 'l) Bigarray_compat.Array2.t;
    carray : 'a carray carray; dims : int * int; element : 'a; layout : 'l >
  bigarray_class
val array3 :
  < ba_repr : 'b; bigarray : ('a, 'b, 'l) Bigarray_compat.Array3.t;
    carray : 'a carray carray carray; dims : int * int * int; element : 'a;
    layout : 'l >
  bigarray_class
type ('a, 'kind) structured = ('a, 'kind) Ctypes_static.structured
type 'a structure = ('a, [ `Struct ]) structured
type 'a union = ('a, [ `Union ]) structured
type ('a, 't) field = ('a, 't) Ctypes_static.field
type 'a abstract = 'a Ctypes_static.abstract
type 'a typ = 'a Ctypes_static.typ
val void : unit typ
val char : char typ
val schar : int typ
val short : int typ
val int : int typ
val long : Signed.long typ
val llong : Signed.llong typ
val nativeint : nativeint typ
val int8_t : int typ
val int16_t : int typ
val int32_t : int32 typ
val int64_t : int64 typ
module Intptr = Ctypes.Intptr
val intptr_t : Intptr.t typ
module Ptrdiff = Ctypes.Ptrdiff
val ptrdiff_t : Ptrdiff.t typ
val camlint : int typ
val uchar : Unsigned.uchar typ
val bool : bool typ
val uint8_t : Unsigned.uint8 typ
val uint16_t : Unsigned.uint16 typ
val uint32_t : Unsigned.uint32 typ
val uint64_t : Unsigned.uint64 typ
val size_t : Unsigned.size_t typ
val ushort : Unsigned.ushort typ
val sint : Signed.sint typ
val uint : Unsigned.uint typ
val ulong : Unsigned.ulong typ
val ullong : Unsigned.ullong typ
module Uintptr = Ctypes.Uintptr
val uintptr_t : Uintptr.t typ
val float : float typ
val double : float typ
val ldouble : LDouble.t typ
val complex32 : Complex.t typ
val complex64 : Complex.t typ
val complexld : ComplexL.t typ
val ptr : 'a typ -> 'a Ctypes_static.ptr typ
val ptr_opt : 'a typ -> 'a Ctypes_static.ptr option typ
val string : string typ
val string_opt : string option typ
val ocaml_string : string Ctypes_static.ocaml typ
val ocaml_bytes : bytes Ctypes_static.ocaml typ
val array : int -> 'a typ -> 'a Ctypes_static.carray typ
val bigarray :
  < ba_repr : 'b; bigarray : 'bigarray; carray : 'c; dims : 'dims;
    element : 'a; layout : Bigarray_compat.c_layout >
  Ctypes_static.bigarray_class ->
  'dims -> ('a, 'b) Bigarray_compat.kind -> 'bigarray typ
val fortran_bigarray :
  < ba_repr : 'b; bigarray : 'bigarray; carray : 'c; dims : 'dims;
    element : 'a; layout : Bigarray_compat.fortran_layout >
  Ctypes_static.bigarray_class ->
  'dims -> ('a, 'b) Bigarray_compat.kind -> 'bigarray typ
val typ_of_bigarray_kind : ('a, 'b) Bigarray_compat.kind -> 'a typ
val structure : string -> 's Ctypes_static.structure typ
val union : string -> 's Ctypes_static.union typ
val view :
  ?format_typ:((Format.formatter -> unit) -> Format.formatter -> unit) ->
  ?format:(Format.formatter -> 'b -> unit) ->
  read:('a -> 'b) -> write:('b -> 'a) -> 'a typ -> 'b typ
val typedef : 'a typ -> string -> 'a typ
val abstract :
  name:string -> size:int -> alignment:int -> 'a Ctypes_static.abstract typ
val lift_typ : 'a Ctypes_static.typ -> 'a typ
type 'a fn = 'a Ctypes_static.fn
val ( @-> ) : 'a typ -> 'b fn -> ('a -> 'b) fn
val returning : 'a typ -> 'a fn
type 'a static_funptr = 'a Ctypes_static.static_funptr
val static_funptr : 'a fn -> 'a Ctypes_static.static_funptr typ
val sizeof : 'a typ -> int
val alignment : 'a typ -> int
val format_typ : ?name:string -> Format.formatter -> 'a typ -> unit
val format_fn : ?name:string -> Format.formatter -> 'a fn -> unit
val string_of_typ : ?name:string -> 'a typ -> string
val string_of_fn : ?name:string -> 'a fn -> string
val format : 'a typ -> Format.formatter -> 'a -> unit
val string_of : 'a typ -> 'a -> string
val null : unit ptr
val ( !@ ) : 'a ptr -> 'a
val ( <-@ ) : 'a ptr -> 'a -> unit
val ( +@ ) : ('a, 'b) pointer -> int -> ('a, 'b) pointer
val ( -@ ) : ('a, 'b) pointer -> int -> ('a, 'b) pointer
val ptr_diff : ('a, 'b) pointer -> ('a, 'b) pointer -> int
val from_voidp : 'a typ -> unit ptr -> 'a ptr
val to_voidp : 'a ptr -> unit ptr
val allocate : ?finalise:('a ptr -> unit) -> 'a typ -> 'a -> 'a ptr
val allocate_n : ?finalise:('a ptr -> unit) -> 'a typ -> count:int -> 'a ptr
val ptr_compare : 'a ptr -> 'a ptr -> int
val is_null : 'a ptr -> bool
val reference_type : 'a ptr -> 'a typ
val ptr_of_raw_address : nativeint -> unit ptr
val funptr_of_raw_address :
  nativeint -> (unit -> unit) Ctypes_static.static_funptr
val raw_address_of_ptr : unit ptr -> nativeint
val string_from_ptr : char ptr -> length:int -> string
val ocaml_string_start : string -> string ocaml
val ocaml_bytes_start : bytes -> bytes ocaml
module CArray = Ctypes.CArray
val bigarray_start :
  < ba_repr : 'c; bigarray : 'b; carray : 'd; dims : 'e; element : 'a;
    layout : 'l >
  bigarray_class -> 'b -> 'a ptr
val bigarray_of_ptr :
  < ba_repr : 'f; bigarray : 'b; carray : 'c; dims : 'i; element : 'a;
    layout : Bigarray_compat.c_layout >
  bigarray_class -> 'i -> ('a, 'f) Bigarray_compat.kind -> 'a ptr -> 'b
val fortran_bigarray_of_ptr :
  < ba_repr : 'f; bigarray : 'b; carray : 'c; dims : 'i; element : 'a;
    layout : Bigarray_compat.fortran_layout >
  bigarray_class -> 'i -> ('a, 'f) Bigarray_compat.kind -> 'a ptr -> 'b
val array_of_bigarray :
  < ba_repr : 'a; bigarray : 'b; carray : 'c; dims : 'd; element : 'e;
    layout : Bigarray_compat.c_layout >
  bigarray_class -> 'b -> 'c
val bigarray_of_array :
  < ba_repr : 'f; bigarray : 'b; carray : 'c carray; dims : 'i; element : 'a;
    layout : Bigarray_compat.c_layout >
  bigarray_class -> ('a, 'f) Bigarray_compat.kind -> 'c carray -> 'b
val make :
  ?finalise:(('a, 'b) structured -> unit) ->
  ('a, 'b) structured typ -> ('a, 'b) structured
val setf :
  ('b, 'c) structured -> ('a, ('b, 'c) structured) field -> 'a -> unit
val getf : ('b, 'c) structured -> ('a, ('b, 'c) structured) field -> 'a
val ( @. ) : ('b, 'c) structured -> ('a, ('b, 'c) structured) field -> 'a ptr
val ( |-> ) :
  ('b, 'c) structured ptr -> ('a, ('b, 'c) structured) field -> 'a ptr
val offsetof : ('a, 'b structure) field -> int
val field_type : ('a, 'b) field -> 'a typ
val field_name : ('a, 'b) field -> string
val addr : ('a, 'b) structured -> ('a, 'b) structured ptr
val coerce : 'a typ -> 'b typ -> 'a -> 'b
val coerce_fn : 'a fn -> 'b fn -> 'a -> 'b
module type FOREIGN = Ctypes.FOREIGN
module type TYPE = Ctypes.TYPE
module Root = Ctypes.Root
exception Unsupported of string
exception ModifyingSealedType of string
exception IncompleteType
type uncoercible_info = Ctypes.uncoercible_info
exception Uncoercible of uncoercible_info
val lift : 'a -> 'a
val field :
  't Ctypes_static.typ ->
  string -> 'a Ctypes_static.typ -> ('a, 't) Ctypes_static.field
val seal : 'a Ctypes_static.typ -> unit
type 'a const = 'a
val constant : string -> 't Ctypes_static.typ -> 't
val enum :
  string ->
  ?typedef:bool ->
  ("DEBUG:rule", [Tag1 (("pointer", 1363), ([((("a")), 100000000, 0, -755); ((("b")), 100000000, 0, -756)], 2, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "pointer"), [((("a")), 100000000, 0, -755); ((("b")), 100000000, 0, -756)], (0)), 100000000, 0, -754)), [63; 63], [0; 0], 0, 0, (("src/ctypes/ctypes.mli", 18, 479, 479), ("src/ctypes/ctypes.mli", 18, 479, 533), 0), 0, 0, 0, Tag1 ("Ctypes", 0)), 1, 0); Tag1 (("ptr", 1364), ([((("a")), 100000000, 0, -751)], 1, 0, 1, ((Tag3 ((("pointer", 1363)), [((("a")), 100000000, 0, -751); (Tag8 (([("C", (0))], (0, 100000000, 0, -753), 1, 0, 0)), 100000000, 0, -752)], (0)), 100000000, 0, -750)), [63], [0], 0, 0, (("src/ctypes/ctypes.mli", 25, 793, 793), ("src/ctypes/ctypes.mli", 25, 793, 825), 0), 0, 0, 0, Tag1 ("Ctypes", 1)), 1, 0); Tag1 (("ocaml", 1365), ([((("a")), 100000000, 0, -749)], 1, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "ocaml"), [((("a")), 100000000, 0, -749)], (0)), 100000000, 0, -748)), [63], [0], 0, 0, (("src/ctypes/ctypes.mli", 29, 978, 978), ("src/ctypes/ctypes.mli", 29, 978, 1016), 0), 0, 0, 0, Tag1 ("Ctypes", 2)), 1, 0); Tag1 (("carray", 1366), ([((("a")), 100000000, 0, -747)], 1, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "carray"), [((("a")), 100000000, 0, -747)], (0)), 100000000, 0, -746)), [63], [0], 0, 0, (("src/ctypes/ctypes.mli", 37, 1283, 1283), ("src/ctypes/ctypes.mli", 37, 1283, 1323), 0), 0, 0, 0, Tag1 ("Ctypes", 3)), 1, 0); Tag1 (("bigarray_class", 1367), ([((("a")), 100000000, 0, -745)], 1, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "bigarray_class"), [((("a")), 100000000, 0, -745)], (0)), 100000000, 0, -744)), [63], [0], 0, 0, (("src/ctypes/ctypes.mli", 43, 1485, 1485), ("src/ctypes/ctypes.mli", 43, 1485, 1541), 0), 0, 1, 0, Tag1 ("Ctypes", 4)), 1, 0); (("genarray", 1368), ((Tag3 ((("bigarray_class", 1367)), [(Tag4 ((Tag5 ("ba_repr", 1, (Tag10 (((("b")), 100000000, 0, -742), 0), 100000000, 0, -743), (Tag5 ("bigarray", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((Tag2 ("Bigarray_compat")), "Genarray"), "t"), [((("a")), 100000000, 0, -734); ((("b")), 100000000, 0, -742); ((("l")), 100000000, 0, -732)], (0)), 100000000, 0, -741), 0), 100000000, 0, -740), (Tag5 ("carray", 1, (Tag10 ((Tag3 ((("carray", 1366)), [((("a")), 100000000, 0, -734)], (0)), 100000000, 0, -739), 0), 100000000, 0, -738), (Tag5 ("dims", 1, (Tag10 ((Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -737)], (0)), 100000000, 0, -736), 0), 100000000, 0, -735), (Tag5 ("element", 1, (Tag10 (((("a")), 100000000, 0, -734), 0), 100000000, 0, -733), (Tag5 ("layout", 1, (Tag10 (((("l")), 100000000, 0, -732), 0), 100000000, 0, -731), (0, 100000000, 0, -730)), 100000000, 0, 40)), 100000000, 0, 41)), 100000000, 0, 42)), 100000000, 0, 43)), 100000000, 0, 44)), 100000000, 0, -724), (0)), 100000000, 0, -723)], (0)), 100000000, 0, -722), 0, (("src/ctypes/ctypes.mli", 47, 1652, 1652), ("src/ctypes/ctypes.mli", 53, 1795, 1831), 0), 0, Tag1 ("Ctypes", 5)), 0); (("array1", 1369), ((Tag3 ((("bigarray_class", 1367)), [(Tag4 ((Tag5 ("ba_repr", 1, (Tag10 (((("b")), 100000000, 0, -720), 0), 100000000, 0, -721), (Tag5 ("bigarray", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((Tag2 ("Bigarray_compat")), "Array1"), "t"), [((("a")), 100000000, 0, -713); ((("b")), 100000000, 0, -720); ((("l")), 100000000, 0, -711)], (0)), 100000000, 0, -719), 0), 100000000, 0, -718), (Tag5 ("carray", 1, (Tag10 ((Tag3 ((("carray", 1366)), [((("a")), 100000000, 0, -713)], (0)), 100000000, 0, -717), 0), 100000000, 0, -716), (Tag5 ("dims", 1, (Tag10 ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -715), 0), 100000000, 0, -714), (Tag5 ("element", 1, (Tag10 (((("a")), 100000000, 0, -713), 0), 100000000, 0, -712), (Tag5 ("layout", 1, (Tag10 (((("l")), 100000000, 0, -711), 0), 100000000, 0, -710), (0, 100000000, 0, -709)), 100000000, 0, 46)), 100000000, 0, 47)), 100000000, 0, 48)), 100000000, 0, 49)), 100000000, 0, 50)), 100000000, 0, -703), (0)), 100000000, 0, -702)], (0)), 100000000, 0, -701), 0, (("src/ctypes/ctypes.mli", 56, 1883, 1883), ("src/ctypes/ctypes.mli", 62, 2022, 2052), 0), 0, Tag1 ("Ctypes", 6)), 0); (("array2", 1370), ((Tag3 ((("bigarray_class", 1367)), [(Tag4 ((Tag5 ("ba_repr", 1, (Tag10 (((("b")), 100000000, 0, -699), 0), 100000000, 0, -700), (Tag5 ("bigarray", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((Tag2 ("Bigarray_compat")), "Array2"), "t"), [((("a")), 100000000, 0, -689); ((("b")), 100000000, 0, -699); ((("l")), 100000000, 0, -687)], (0)), 100000000, 0, -698), 0), 100000000, 0, -697), (Tag5 ("carray", 1, (Tag10 ((Tag3 ((("carray", 1366)), [(Tag3 ((("carray", 1366)), [((("a")), 100000000, 0, -689)], (0)), 100000000, 0, -696)], (0)), 100000000, 0, -695), 0), 100000000, 0, -694), (Tag5 ("dims", 1, (Tag10 ((Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -692); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -693)]), 100000000, 0, -691), 0), 100000000, 0, -690), (Tag5 ("element", 1, (Tag10 (((("a")), 100000000, 0, -689), 0), 100000000, 0, -688), (Tag5 ("layout", 1, (Tag10 (((("l")), 100000000, 0, -687), 0), 100000000, 0, -686), (0, 100000000, 0, -685)), 100000000, 0, 52)), 100000000, 0, 53)), 100000000, 0, 54)), 100000000, 0, 55)), 100000000, 0, 56)), 100000000, 0, -679), (0)), 100000000, 0, -678)], (0)), 100000000, 0, -677), 0, (("src/ctypes/ctypes.mli", 65, 2102, 2102), ("src/ctypes/ctypes.mli", 71, 2248, 2284), 0), 0, Tag1 ("Ctypes", 7)), 0); (("array3", 1371), ((Tag3 ((("bigarray_class", 1367)), [(Tag4 ((Tag5 ("ba_repr", 1, (Tag10 (((("b")), 100000000, 0, -675), 0), 100000000, 0, -676), (Tag5 ("bigarray", 1, (Tag10 ((Tag3 (Tag1 (Tag1 ((Tag2 ("Bigarray_compat")), "Array3"), "t"), [((("a")), 100000000, 0, -663); ((("b")), 100000000, 0, -675); ((("l")), 100000000, 0, -661)], (0)), 100000000, 0, -674), 0), 100000000, 0, -673), (Tag5 ("carray", 1, (Tag10 ((Tag3 ((("carray", 1366)), [(Tag3 ((("carray", 1366)), [(Tag3 ((("carray", 1366)), [((("a")), 100000000, 0, -663)], (0)), 100000000, 0, -672)], (0)), 100000000, 0, -671)], (0)), 100000000, 0, -670), 0), 100000000, 0, -669), (Tag5 ("dims", 1, (Tag10 ((Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -666); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -667); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -668)]), 100000000, 0, -665), 0), 100000000, 0, -664), (Tag5 ("element", 1, (Tag10 (((("a")), 100000000, 0, -663), 0), 100000000, 0, -662), (Tag5 ("layout", 1, (Tag10 (((("l")), 100000000, 0, -661), 0), 100000000, 0, -660), (0, 100000000, 0, -659)), 100000000, 0, 58)), 100000000, 0, 59)), 100000000, 0, 60)), 100000000, 0, 61)), 100000000, 0, 62)), 100000000, 0, -653), (0)), 100000000, 0, -652)], (0)), 100000000, 0, -651), 0, (("src/ctypes/ctypes.mli", 74, 2334, 2334), ("src/ctypes/ctypes.mli", 80, 2487, 2529), 0), 0, Tag1 ("Ctypes", 8)), 0); Tag1 (("structured", 1372), ([((("a")), 100000000, 0, -649); ((("kind")), 100000000, 0, -650)], 2, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "structured"), [((("a")), 100000000, 0, -649); ((("kind")), 100000000, 0, -650)], (0)), 100000000, 0, -648)), [63; 63], [0; 0], 0, 0, (("src/ctypes/ctypes.mli", 85, 2614, 2614), ("src/ctypes/ctypes.mli", 85, 2614, 2680), 0), 0, 0, 0, Tag1 ("Ctypes", 9)), 1, 0); Tag1 (("structure", 1373), ([((("a")), 100000000, 0, -645)], 1, 0, 1, ((Tag3 ((("structured", 1372)), [((("a")), 100000000, 0, -645); (Tag8 (([("Struct", (0))], (0, 100000000, 0, -647), 1, 0, 0)), 100000000, 0, -646)], (0)), 100000000, 0, -644)), [63], [0], 0, 0, (("src/ctypes/ctypes.mli", 90, 2896, 2896), ("src/ctypes/ctypes.mli", 90, 2896, 2942), 0), 0, 0, 0, Tag1 ("Ctypes", 10)), 1, 0); Tag1 (("union", 1374), ([((("a")), 100000000, 0, -641)], 1, 0, 1, ((Tag3 ((("structured", 1372)), [((("a")), 100000000, 0, -641); (Tag8 (([("Union", (0))], (0, 100000000, 0, -643), 1, 0, 0)), 100000000, 0, -642)], (0)), 100000000, 0, -640)), [63], [0], 0, 0, (("src/ctypes/ctypes.mli", 93, 2999, 2999), ("src/ctypes/ctypes.mli", 93, 2999, 3040), 0), 0, 0, 0, Tag1 ("Ctypes", 11)), 1, 0); Tag1 (("field", 1375), ([((("a")), 100000000, 0, -638); ((("t")), 100000000, 0, -639)], 2, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "field"), [((("a")), 100000000, 0, -638); ((("t")), 100000000, 0, -639)], (0)), 100000000, 0, -637)), [63; 8], [0; 0], 0, 0, (("src/ctypes/ctypes.mli", 96, 3096, 3096), ("src/ctypes/ctypes.mli", 96, 3096, 3146), 0), 0, 0, 0, Tag1 ("Ctypes", 12)), 1, 0); Tag1 (("abstract", 1376), ([((("a")), 100000000, 0, -636)], 1, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "abstract"), [((("a")), 100000000, 0, -636)], (0)), 100000000, 0, -635)), [63], [0], 0, 0, (("src/ctypes/ctypes.mli", 101, 3342, 3342), ("src/ctypes/ctypes.mli", 101, 3342, 3386), 0), 0, 0, 0, Tag1 ("Ctypes", 13)), 1, 0); Tag1 (("typ", 1377), ([((("a")), 100000000, 0, -634)], 1, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "typ"), [((("a")), 100000000, 0, -634)], (0)), 100000000, 0, -633)), [63], [0], 0, 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, 0, 0, Tag1 ("Ctypes", 14)), 1, 0); (("void", 1378), ((Tag3 ((("typ", 1377)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -632)], (0)), 100000000, 0, -631), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 1)), 0); (("char", 1379), ((Tag3 ((("typ", 1377)), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -630)], (0)), 100000000, 0, -629), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 2)), 0); (("schar", 1380), ((Tag3 ((("typ", 1377)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -628)], (0)), 100000000, 0, -627), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 3)), 0); (("short", 1381), ((Tag3 ((("typ", 1377)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -626)], (0)), 100000000, 0, -625), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 4)), 0); (("int", 1382), ((Tag3 ((("typ", 1377)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -624)], (0)), 100000000, 0, -623), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 5)), 0); (("long", 1383), ((Tag3 ((("typ", 1377)), [(Tag3 (Tag1 ((Tag2 ("Signed")), "long"), 0, (0)), 100000000, 0, -622)], (0)), 100000000, 0, -621), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 6)), 0); (("llong", 1384), ((Tag3 ((("typ", 1377)), [(Tag3 (Tag1 ((Tag2 ("Signed")), "llong"), 0, (0)), 100000000, 0, -620)], (0)), 100000000, 0, -619), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 7)), 0); (("nativeint", 1385), ((Tag3 ((("typ", 1377)), [(Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -618)], (0)), 100000000, 0, -617), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 8)), 0); (("int8_t", 1386), ((Tag3 ((("typ", 1377)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -616)], (0)), 100000000, 0, -615), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 9)), 0); (("int16_t", 1387), ((Tag3 ((("typ", 1377)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -614)], (0)), 100000000, 0, -613), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 10)), 0); (("int32_t", 1388), ((Tag3 ((("typ", 1377)), [(Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -612)], (0)), 100000000, 0, -611), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 11)), 0); (("int64_t", 1389), ((Tag3 ((("typ", 1377)), [(Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -610)], (0)), 100000000, 0, -609), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 12)), 0); Tag3 (("Intptr", 1390), 0, (Tag3 (Tag1 ((Tag2 ("Ctypes")), "Intptr")), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), Tag1 ("Ctypes_types", 13)), 0, 0); (("intptr_t", 1391), ((Tag3 ((("typ", 1377)), [(Tag3 (Tag1 ((("Intptr", 1390)), "t"), 0, (0)), 100000000, 0, -608)], (0)), 100000000, 0, -607), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 14)), 0); Tag3 (("Ptrdiff", 1392), 0, (Tag3 (Tag1 ((Tag2 ("Ctypes")), "Ptrdiff")), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), Tag1 ("Ctypes_types", 15)), 0, 0); (("ptrdiff_t", 1393), ((Tag3 ((("typ", 1377)), [(Tag3 (Tag1 ((("Ptrdiff", 1392)), "t"), 0, (0)), 100000000, 0, -606)], (0)), 100000000, 0, -605), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 16)), 0); (("camlint", 1394), ((Tag3 ((("typ", 1377)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -604)], (0)), 100000000, 0, -603), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 17)), 0); (("uchar", 1395), ((Tag3 ((("typ", 1377)), [(Tag3 (Tag1 ((Tag2 ("Unsigned")), "uchar"), 0, (0)), 100000000, 0, -602)], (0)), 100000000, 0, -601), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 18)), 0); (("bool", 1396), ((Tag3 ((("typ", 1377)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -600)], (0)), 100000000, 0, -599), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 19)), 0); (("uint8_t", 1397), ((Tag3 ((("typ", 1377)), [(Tag3 (Tag1 ((Tag2 ("Unsigned")), "uint8"), 0, (0)), 100000000, 0, -598)], (0)), 100000000, 0, -597), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 20)), 0); (("uint16_t", 1398), ((Tag3 ((("typ", 1377)), [(Tag3 (Tag1 ((Tag2 ("Unsigned")), "uint16"), 0, (0)), 100000000, 0, -596)], (0)), 100000000, 0, -595), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 21)), 0); (("uint32_t", 1399), ((Tag3 ((("typ", 1377)), [(Tag3 (Tag1 ((Tag2 ("Unsigned")), "uint32"), 0, (0)), 100000000, 0, -594)], (0)), 100000000, 0, -593), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 22)), 0); (("uint64_t", 1400), ((Tag3 ((("typ", 1377)), [(Tag3 (Tag1 ((Tag2 ("Unsigned")), "uint64"), 0, (0)), 100000000, 0, -592)], (0)), 100000000, 0, -591), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 23)), 0); (("size_t", 1401), ((Tag3 ((("typ", 1377)), [(Tag3 (Tag1 ((Tag2 ("Unsigned")), "size_t"), 0, (0)), 100000000, 0, -590)], (0)), 100000000, 0, -589), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 24)), 0); (("ushort", 1402), ((Tag3 ((("typ", 1377)), [(Tag3 (Tag1 ((Tag2 ("Unsigned")), "ushort"), 0, (0)), 100000000, 0, -588)], (0)), 100000000, 0, -587), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 25)), 0); (("sint", 1403), ((Tag3 ((("typ", 1377)), [(Tag3 (Tag1 ((Tag2 ("Signed")), "sint"), 0, (0)), 100000000, 0, -586)], (0)), 100000000, 0, -585), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 26)), 0); (("uint", 1404), ((Tag3 ((("typ", 1377)), [(Tag3 (Tag1 ((Tag2 ("Unsigned")), "uint"), 0, (0)), 100000000, 0, -584)], (0)), 100000000, 0, -583), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 27)), 0); (("ulong", 1405), ((Tag3 ((("typ", 1377)), [(Tag3 (Tag1 ((Tag2 ("Unsigned")), "ulong"), 0, (0)), 100000000, 0, -582)], (0)), 100000000, 0, -581), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 28)), 0); (("ullong", 1406), ((Tag3 ((("typ", 1377)), [(Tag3 (Tag1 ((Tag2 ("Unsigned")), "ullong"), 0, (0)), 100000000, 0, -580)], (0)), 100000000, 0, -579), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 29)), 0); Tag3 (("Uintptr", 1407), 0, (Tag3 (Tag1 ((Tag2 ("Ctypes")), "Uintptr")), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), Tag1 ("Ctypes_types", 30)), 0, 0); (("uintptr_t", 1408), ((Tag3 ((("typ", 1377)), [(Tag3 (Tag1 ((("Uintptr", 1407)), "t"), 0, (0)), 100000000, 0, -578)], (0)), 100000000, 0, -577), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 31)), 0); (("float", 1409), ((Tag3 ((("typ", 1377)), [(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -576)], (0)), 100000000, 0, -575), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 32)), 0); (("double", 1410), ((Tag3 ((("typ", 1377)), [(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -574)], (0)), 100000000, 0, -573), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 33)), 0); (("ldouble", 1411), ((Tag3 ((("typ", 1377)), [(Tag3 (Tag1 ((Tag2 ("LDouble")), "t"), 0, (0)), 100000000, 0, -572)], (0)), 100000000, 0, -571), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 34)), 0); (("complex32", 1412), ((Tag3 ((("typ", 1377)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Complex"), "t"), 0, (0)), 100000000, 0, -570)], (0)), 100000000, 0, -569), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 35)), 0); (("complex64", 1413), ((Tag3 ((("typ", 1377)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Complex"), "t"), 0, (0)), 100000000, 0, -568)], (0)), 100000000, 0, -567), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 36)), 0); (("complexld", 1414), ((Tag3 ((("typ", 1377)), [(Tag3 (Tag1 ((Tag2 ("ComplexL")), "t"), 0, (0)), 100000000, 0, -566)], (0)), 100000000, 0, -565), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 37)), 0); (("ptr", 1415), ((Tag1 (0, (Tag3 ((("typ", 1377)), [((("a")), 100000000, 0, -563)], (0)), 100000000, 0, -564), (Tag3 ((("typ", 1377)), [(Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "ptr"), [((("a")), 100000000, 0, -563)], (0)), 100000000, 0, -562)], (0)), 100000000, 0, -561), 0), 100000000, 0, -560), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 38)), 0); (("ptr_opt", 1416), ((Tag1 (0, (Tag3 ((("typ", 1377)), [((("a")), 100000000, 0, -558)], (0)), 100000000, 0, -559), (Tag3 ((("typ", 1377)), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "ptr"), [((("a")), 100000000, 0, -558)], (0)), 100000000, 0, -557)], (0)), 100000000, 0, -556)], (0)), 100000000, 0, -555), 0), 100000000, 0, -554), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 39)), 0); (("string", 1417), ((Tag3 ((("typ", 1377)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -553)], (0)), 100000000, 0, -552), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 40)), 0); (("string_opt", 1418), ((Tag3 ((("typ", 1377)), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -551)], (0)), 100000000, 0, -550)], (0)), 100000000, 0, -549), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 41)), 0); (("ocaml_string", 1419), ((Tag3 ((("typ", 1377)), [(Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "ocaml"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -548)], (0)), 100000000, 0, -547)], (0)), 100000000, 0, -546), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 42)), 0); (("ocaml_bytes", 1420), ((Tag3 ((("typ", 1377)), [(Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "ocaml"), [(Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -545)], (0)), 100000000, 0, -544)], (0)), 100000000, 0, -543), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 43)), 0); (("array", 1421), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -542), (Tag1 (0, (Tag3 ((("typ", 1377)), [((("a")), 100000000, 0, -540)], (0)), 100000000, 0, -541), (Tag3 ((("typ", 1377)), [(Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "carray"), [((("a")), 100000000, 0, -540)], (0)), 100000000, 0, -539)], (0)), 100000000, 0, -538), 0), 100000000, 0, -537), 0), 100000000, 0, -536), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 44)), 0); (("bigarray", 1422), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "bigarray_class"), [(Tag4 ((Tag5 ("ba_repr", 1, (Tag10 (((("b")), 100000000, 0, -517), 0), 100000000, 0, -535), (Tag5 ("bigarray", 1, (Tag10 (((("bigarray")), 100000000, 0, -514), 0), 100000000, 0, -534), (Tag5 ("carray", 1, (Tag10 (((0), 100000000, 0, -533), 0), 100000000, 0, -532), (Tag5 ("dims", 1, (Tag10 (((("dims")), 100000000, 0, -518), 0), 100000000, 0, -531), (Tag5 ("element", 1, (Tag10 (((("a")), 100000000, 0, -516), 0), 100000000, 0, -530), (Tag5 ("layout", 1, (Tag10 ((Tag3 (Tag1 ((Tag2 ("Bigarray_compat")), "c_layout"), 0, (0)), 100000000, 0, -529), 0), 100000000, 0, -528), (0, 100000000, 0, -527)), 100000000, 0, 64)), 100000000, 0, 65)), 100000000, 0, 66)), 100000000, 0, 67)), 100000000, 0, 68)), 100000000, 0, -521), (0)), 100000000, 0, -520)], (0)), 100000000, 0, -519), (Tag1 (0, ((("dims")), 100000000, 0, -518), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Bigarray_compat")), "kind"), [((("a")), 100000000, 0, -516); ((("b")), 100000000, 0, -517)], (0)), 100000000, 0, -515), (Tag3 ((("typ", 1377)), [((("bigarray")), 100000000, 0, -514)], (0)), 100000000, 0, -513), 0), 100000000, 0, -512), 0), 100000000, 0, -511), 0), 100000000, 0, -510), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 45)), 0); (("fortran_bigarray", 1423), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "bigarray_class"), [(Tag4 ((Tag5 ("ba_repr", 1, (Tag10 (((("b")), 100000000, 0, -491), 0), 100000000, 0, -509), (Tag5 ("bigarray", 1, (Tag10 (((("bigarray")), 100000000, 0, -488), 0), 100000000, 0, -508), (Tag5 ("carray", 1, (Tag10 (((0), 100000000, 0, -507), 0), 100000000, 0, -506), (Tag5 ("dims", 1, (Tag10 (((("dims")), 100000000, 0, -492), 0), 100000000, 0, -505), (Tag5 ("element", 1, (Tag10 (((("a")), 100000000, 0, -490), 0), 100000000, 0, -504), (Tag5 ("layout", 1, (Tag10 ((Tag3 (Tag1 ((Tag2 ("Bigarray_compat")), "fortran_layout"), 0, (0)), 100000000, 0, -503), 0), 100000000, 0, -502), (0, 100000000, 0, -501)), 100000000, 0, 70)), 100000000, 0, 71)), 100000000, 0, 72)), 100000000, 0, 73)), 100000000, 0, 74)), 100000000, 0, -495), (0)), 100000000, 0, -494)], (0)), 100000000, 0, -493), (Tag1 (0, ((("dims")), 100000000, 0, -492), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Bigarray_compat")), "kind"), [((("a")), 100000000, 0, -490); ((("b")), 100000000, 0, -491)], (0)), 100000000, 0, -489), (Tag3 ((("typ", 1377)), [((("bigarray")), 100000000, 0, -488)], (0)), 100000000, 0, -487), 0), 100000000, 0, -486), 0), 100000000, 0, -485), 0), 100000000, 0, -484), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 46)), 0); (("typ_of_bigarray_kind", 1424), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Bigarray_compat")), "kind"), [((("a")), 100000000, 0, -481); ((("b")), 100000000, 0, -483)], (0)), 100000000, 0, -482), (Tag3 ((("typ", 1377)), [((("a")), 100000000, 0, -481)], (0)), 100000000, 0, -480), 0), 100000000, 0, -479), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 47)), 0); (("structure", 1425), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -478), (Tag3 ((("typ", 1377)), [(Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "structure"), [((("s")), 100000000, 0, -477)], (0)), 100000000, 0, -476)], (0)), 100000000, 0, -475), 0), 100000000, 0, -474), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 49)), 0); (("union", 1426), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -473), (Tag3 ((("typ", 1377)), [(Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "union"), [((("s")), 100000000, 0, -472)], (0)), 100000000, 0, -471)], (0)), 100000000, 0, -470), 0), 100000000, 0, -469), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 50)), 0); (("view", 1427), ((Tag1 (Tag1 ("format_typ"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -468), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -467), 0), 100000000, 0, -466), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -465), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -464), 0), 100000000, 0, -463), 0), 100000000, 0, -462)], (0)), 100000000, 0, -461), (Tag1 (Tag1 ("format"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -460), (Tag1 (0, ((("b")), 100000000, 0, -451), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -459), 0), 100000000, 0, -458), 0), 100000000, 0, -457)], (0)), 100000000, 0, -456), (Tag1 (("read"), (Tag1 (0, ((("a")), 100000000, 0, -453), ((("b")), 100000000, 0, -451), 0), 100000000, 0, -455), (Tag1 (("write"), (Tag1 (0, ((("b")), 100000000, 0, -451), ((("a")), 100000000, 0, -453), 0), 100000000, 0, -454), (Tag1 (0, (Tag3 ((("typ", 1377)), [((("a")), 100000000, 0, -453)], (0)), 100000000, 0, -452), (Tag3 ((("typ", 1377)), [((("b")), 100000000, 0, -451)], (0)), 100000000, 0, -450), 0), 100000000, 0, -449), 0), 100000000, 0, -448), 0), 100000000, 0, -447), 0), 100000000, 0, -446), 0), 100000000, 0, -445), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 53)), 0); (("typedef", 1428), ((Tag1 (0, (Tag3 ((("typ", 1377)), [((("a")), 100000000, 0, -442)], (0)), 100000000, 0, -444), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -443), (Tag3 ((("typ", 1377)), [((("a")), 100000000, 0, -442)], (0)), 100000000, 0, -441), 0), 100000000, 0, -440), 0), 100000000, 0, -439), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 54)), 0); (("abstract", 1429), ((Tag1 (("name"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -438), (Tag1 (("size"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -437), (Tag1 (("alignment"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -436), (Tag3 ((("typ", 1377)), [(Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "abstract"), [((("a")), 100000000, 0, -435)], (0)), 100000000, 0, -434)], (0)), 100000000, 0, -433), 0), 100000000, 0, -432), 0), 100000000, 0, -431), 0), 100000000, 0, -430), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 55)), 0); (("lift_typ", 1430), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "typ"), [((("a")), 100000000, 0, -428)], (0)), 100000000, 0, -429), (Tag3 ((("typ", 1377)), [((("a")), 100000000, 0, -428)], (0)), 100000000, 0, -427), 0), 100000000, 0, -426), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 56)), 0); Tag1 (("fn", 1431), ([((("a")), 100000000, 0, -425)], 1, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "fn"), [((("a")), 100000000, 0, -425)], (0)), 100000000, 0, -424)), [63], [0], 0, 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, 0, 0, Tag1 ("Ctypes_types", 57)), 1, 0); (("@->", 1432), ((Tag1 (0, (Tag3 ((("typ", 1377)), [((("a")), 100000000, 0, -421)], (0)), 100000000, 0, -423), (Tag1 (0, (Tag3 ((("fn", 1431)), [((("b")), 100000000, 0, -420)], (0)), 100000000, 0, -422), (Tag3 ((("fn", 1431)), [(Tag1 (0, ((("a")), 100000000, 0, -421), ((("b")), 100000000, 0, -420), 0), 100000000, 0, -419)], (0)), 100000000, 0, -418), 0), 100000000, 0, -417), 0), 100000000, 0, -416), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 58)), 0); (("returning", 1433), ((Tag1 (0, (Tag3 ((("typ", 1377)), [((("a")), 100000000, 0, -414)], (0)), 100000000, 0, -415), (Tag3 ((("fn", 1431)), [((("a")), 100000000, 0, -414)], (0)), 100000000, 0, -413), 0), 100000000, 0, -412), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 59)), 0); Tag1 (("static_funptr", 1434), ([((("a")), 100000000, 0, -411)], 1, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "static_funptr"), [((("a")), 100000000, 0, -411)], (0)), 100000000, 0, -410)), [15], [0], 0, 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, 0, 0, Tag1 ("Ctypes_types", 60)), 1, 0); (("static_funptr", 1435), ((Tag1 (0, (Tag3 ((("fn", 1431)), [((("a")), 100000000, 0, -408)], (0)), 100000000, 0, -409), (Tag3 ((("typ", 1377)), [(Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "static_funptr"), [((("a")), 100000000, 0, -408)], (0)), 100000000, 0, -407)], (0)), 100000000, 0, -406), 0), 100000000, 0, -405), 0, (("src/ctypes/ctypes.mli", 117, 4219, 4227), ("src/ctypes/ctypes.mli", 119, 4286, 4329), 0), 0, Tag1 ("Ctypes_types", 61)), 0); (("sizeof", 1436), ((Tag1 (0, (Tag3 ((("typ", 1377)), [((("a")), 100000000, 0, -404)], (0)), 100000000, 0, -403), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -402), 0), 100000000, 0, -401), 0, (("src/ctypes/ctypes.mli", 123, 4363, 4363), ("src/ctypes/ctypes.mli", 123, 4363, 4389), 0), 0, Tag1 ("Ctypes", 16)), 0); (("alignment", 1437), ((Tag1 (0, (Tag3 ((("typ", 1377)), [((("a")), 100000000, 0, -400)], (0)), 100000000, 0, -399), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -398), 0), 100000000, 0, -397), 0, (("src/ctypes/ctypes.mli", 127, 4522, 4522), ("src/ctypes/ctypes.mli", 127, 4522, 4551), 0), 0, Tag1 ("Ctypes", 17)), 0); (("format_typ", 1438), ((Tag1 (Tag1 ("name"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -396)], (0)), 100000000, 0, -395), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -394), (Tag1 (0, (Tag3 ((("typ", 1377)), [((("a")), 100000000, 0, -393)], (0)), 100000000, 0, -392), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -391), 0), 100000000, 0, -390), 0), 100000000, 0, -389), 0), 100000000, 0, -388), 0, (("src/ctypes/ctypes.mli", 131, 4696, 4696), ("src/ctypes/ctypes.mli", 131, 4696, 4763), 0), 0, Tag1 ("Ctypes", 18)), 0); (("format_fn", 1439), ((Tag1 (Tag1 ("name"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -387)], (0)), 100000000, 0, -386), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -385), (Tag1 (0, (Tag3 ((("fn", 1431)), [((("a")), 100000000, 0, -384)], (0)), 100000000, 0, -383), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -382), 0), 100000000, 0, -381), 0), 100000000, 0, -380), 0), 100000000, 0, -379), 0, (("src/ctypes/ctypes.mli", 134, 4844, 4844), ("src/ctypes/ctypes.mli", 134, 4844, 4909), 0), 0, Tag1 ("Ctypes", 19)), 0); (("string_of_typ", 1440), ((Tag1 (Tag1 ("name"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -378)], (0)), 100000000, 0, -377), (Tag1 (0, (Tag3 ((("typ", 1377)), [((("a")), 100000000, 0, -376)], (0)), 100000000, 0, -375), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -374), 0), 100000000, 0, -373), 0), 100000000, 0, -372), 0, (("src/ctypes/ctypes.mli", 138, 5003, 5003), ("src/ctypes/ctypes.mli", 138, 5003, 5055), 0), 0, Tag1 ("Ctypes", 20)), 0); (("string_of_fn", 1441), ((Tag1 (Tag1 ("name"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -371)], (0)), 100000000, 0, -370), (Tag1 (0, (Tag3 ((("fn", 1431)), [((("a")), 100000000, 0, -369)], (0)), 100000000, 0, -368), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -367), 0), 100000000, 0, -366), 0), 100000000, 0, -365), 0, (("src/ctypes/ctypes.mli", 141, 5103, 5103), ("src/ctypes/ctypes.mli", 141, 5103, 5153), 0), 0, Tag1 ("Ctypes", 21)), 0); (("format", 1442), ((Tag1 (0, (Tag3 ((("typ", 1377)), [((("a")), 100000000, 0, -362)], (0)), 100000000, 0, -364), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -363), (Tag1 (0, ((("a")), 100000000, 0, -362), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -361), 0), 100000000, 0, -360), 0), 100000000, 0, -359), 0), 100000000, 0, -358), 0, (("src/ctypes/ctypes.mli", 146, 5258, 5258), ("src/ctypes/ctypes.mli", 146, 5258, 5311), 0), 0, Tag1 ("Ctypes", 22)), 0); (("string_of", 1443), ((Tag1 (0, (Tag3 ((("typ", 1377)), [((("a")), 100000000, 0, -356)], (0)), 100000000, 0, -357), (Tag1 (0, ((("a")), 100000000, 0, -356), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -355), 0), 100000000, 0, -354), 0), 100000000, 0, -353), 0, (("src/ctypes/ctypes.mli", 149, 5393, 5393), ("src/ctypes/ctypes.mli", 149, 5393, 5431), 0), 0, Tag1 ("Ctypes", 23)), 0); (("null", 1444), ((Tag3 ((("ptr", 1364)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -352)], (0)), 100000000, 0, -351), 0, (("src/ctypes/ctypes.mli", 154, 5514, 5514), ("src/ctypes/ctypes.mli", 154, 5514, 5533), 0), 0, Tag1 ("Ctypes", 24)), 0); (("!@", 1445), ((Tag1 (0, (Tag3 ((("ptr", 1364)), [((("a")), 100000000, 0, -349)], (0)), 100000000, 0, -350), ((("a")), 100000000, 0, -349), 0), 100000000, 0, -348), 0, (("src/ctypes/ctypes.mli", 157, 5558, 5558), ("src/ctypes/ctypes.mli", 157, 5558, 5581), 0), 0, Tag1 ("Ctypes", 25)), 0); (("<-@", 1446), ((Tag1 (0, (Tag3 ((("ptr", 1364)), [((("a")), 100000000, 0, -346)], (0)), 100000000, 0, -347), (Tag1 (0, ((("a")), 100000000, 0, -346), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -345), 0), 100000000, 0, -344), 0), 100000000, 0, -343), 0, (("src/ctypes/ctypes.mli", 163, 5847, 5847), ("src/ctypes/ctypes.mli", 163, 5847, 5879), 0), 0, Tag1 ("Ctypes", 26)), 0); (("+@", 1447), ((Tag1 (0, (Tag3 ((("pointer", 1363)), [((("a")), 100000000, 0, -339); ((("b")), 100000000, 0, -340)], (0)), 100000000, 0, -342), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -341), (Tag3 ((("pointer", 1363)), [((("a")), 100000000, 0, -339); ((("b")), 100000000, 0, -340)], (0)), 100000000, 0, -338), 0), 100000000, 0, -337), 0), 100000000, 0, -336), 0, (("src/ctypes/ctypes.mli", 166, 5939, 5939), ("src/ctypes/ctypes.mli", 166, 5939, 5993), 0), 0, Tag1 ("Ctypes", 27)), 0); (("-@", 1448), ((Tag1 (0, (Tag3 ((("pointer", 1363)), [((("a")), 100000000, 0, -332); ((("b")), 100000000, 0, -333)], (0)), 100000000, 0, -335), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -334), (Tag3 ((("pointer", 1363)), [((("a")), 100000000, 0, -332); ((("b")), 100000000, 0, -333)], (0)), 100000000, 0, -331), 0), 100000000, 0, -330), 0), 100000000, 0, -329), 0, (("src/ctypes/ctypes.mli", 170, 6108, 6108), ("src/ctypes/ctypes.mli", 170, 6108, 6162), 0), 0, Tag1 ("Ctypes", 28)), 0); (("ptr_diff", 1449), ((Tag1 (0, (Tag3 ((("pointer", 1363)), [((("a")), 100000000, 0, -326); ((("b")), 100000000, 0, -327)], (0)), 100000000, 0, -328), (Tag1 (0, (Tag3 ((("pointer", 1363)), [((("a")), 100000000, 0, -326); ((("b")), 100000000, 0, -327)], (0)), 100000000, 0, -325), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -324), 0), 100000000, 0, -323), 0), 100000000, 0, -322), 0, (("src/ctypes/ctypes.mli", 174, 6279, 6279), ("src/ctypes/ctypes.mli", 174, 6279, 6337), 0), 0, Tag1 ("Ctypes", 29)), 0); (("from_voidp", 1450), ((Tag1 (0, (Tag3 ((("typ", 1377)), [((("a")), 100000000, 0, -318)], (0)), 100000000, 0, -321), (Tag1 (0, (Tag3 ((("ptr", 1364)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -320)], (0)), 100000000, 0, -319), (Tag3 ((("ptr", 1364)), [((("a")), 100000000, 0, -318)], (0)), 100000000, 0, -317), 0), 100000000, 0, -316), 0), 100000000, 0, -315), 0, (("src/ctypes/ctypes.mli", 179, 6530, 6530), ("src/ctypes/ctypes.mli", 179, 6530, 6575), 0), 0, Tag1 ("Ctypes", 30)), 0); (("to_voidp", 1451), ((Tag1 (0, (Tag3 ((("ptr", 1364)), [((0), 100000000, 0, -314)], (0)), 100000000, 0, -313), (Tag3 ((("ptr", 1364)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -312)], (0)), 100000000, 0, -311), 0), 100000000, 0, -310), 0, (("src/ctypes/ctypes.mli", 182, 6610, 6610), ("src/ctypes/ctypes.mli", 182, 6610, 6642), 0), 0, Tag1 ("Ctypes", 31)), 0); (("allocate", 1452), ((Tag1 (Tag1 ("finalise"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag3 ((("ptr", 1364)), [((("a")), 100000000, 0, -304)], (0)), 100000000, 0, -309), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -308), 0), 100000000, 0, -307)], (0)), 100000000, 0, -306), (Tag1 (0, (Tag3 ((("typ", 1377)), [((("a")), 100000000, 0, -304)], (0)), 100000000, 0, -305), (Tag1 (0, ((("a")), 100000000, 0, -304), (Tag3 ((("ptr", 1364)), [((("a")), 100000000, 0, -304)], (0)), 100000000, 0, -303), 0), 100000000, 0, -302), 0), 100000000, 0, -301), 0), 100000000, 0, -300), 0, (("src/ctypes/ctypes.mli", 185, 6675, 6675), ("src/ctypes/ctypes.mli", 185, 6675, 6742), 0), 0, Tag1 ("Ctypes", 32)), 0); (("allocate_n", 1453), ((Tag1 (Tag1 ("finalise"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag3 ((("ptr", 1364)), [((("a")), 100000000, 0, -293)], (0)), 100000000, 0, -299), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -298), 0), 100000000, 0, -297)], (0)), 100000000, 0, -296), (Tag1 (0, (Tag3 ((("typ", 1377)), [((("a")), 100000000, 0, -293)], (0)), 100000000, 0, -295), (Tag1 (("count"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -294), (Tag3 ((("ptr", 1364)), [((("a")), 100000000, 0, -293)], (0)), 100000000, 0, -292), 0), 100000000, 0, -291), 0), 100000000, 0, -290), 0), 100000000, 0, -289), 0, (("src/ctypes/ctypes.mli", 192, 7070, 7070), ("src/ctypes/ctypes.mli", 192, 7070, 7146), 0), 0, Tag1 ("Ctypes", 33)), 0); (("ptr_compare", 1454), ((Tag1 (0, (Tag3 ((("ptr", 1364)), [((("a")), 100000000, 0, -287)], (0)), 100000000, 0, -288), (Tag1 (0, (Tag3 ((("ptr", 1364)), [((("a")), 100000000, 0, -287)], (0)), 100000000, 0, -286), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -285), 0), 100000000, 0, -284), 0), 100000000, 0, -283), 0, (("src/ctypes/ctypes.mli", 201, 7576, 7576), ("src/ctypes/ctypes.mli", 201, 7576, 7617), 0), 0, Tag1 ("Ctypes", 34)), 0); (("is_null", 1455), ((Tag1 (0, (Tag3 ((("ptr", 1364)), [((("a")), 100000000, 0, -282)], (0)), 100000000, 0, -281), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -280), 0), 100000000, 0, -279), 0, (("src/ctypes/ctypes.mli", 207, 7890, 7890), ("src/ctypes/ctypes.mli", 207, 7890, 7918), 0), 0, Tag1 ("Ctypes", 35)), 0); (("reference_type", 1456), ((Tag1 (0, (Tag3 ((("ptr", 1364)), [((("a")), 100000000, 0, -277)], (0)), 100000000, 0, -278), (Tag3 ((("typ", 1377)), [((("a")), 100000000, 0, -277)], (0)), 100000000, 0, -276), 0), 100000000, 0, -275), 0, (("src/ctypes/ctypes.mli", 210, 7975, 7975), ("src/ctypes/ctypes.mli", 210, 7975, 8012), 0), 0, Tag1 ("Ctypes", 36)), 0); (("ptr_of_raw_address", 1457), ((Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -274), (Tag3 ((("ptr", 1364)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -273)], (0)), 100000000, 0, -272), 0), 100000000, 0, -271), 0, (("src/ctypes/ctypes.mli", 213, 8063, 8063), ("src/ctypes/ctypes.mli", 213, 8063, 8109), 0), 0, Tag1 ("Ctypes", 37)), 0); (("funptr_of_raw_address", 1458), ((Tag1 (0, (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -270), (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "static_funptr"), [(Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -269), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -268), 0), 100000000, 0, -267)], (0)), 100000000, 0, -266), 0), 100000000, 0, -265), 0, (("src/ctypes/ctypes.mli", 216, 8180, 8180), ("src/ctypes/ctypes.mli", 216, 8180, 8263), 0), 0, Tag1 ("Ctypes", 38)), 0); (("raw_address_of_ptr", 1459), ((Tag1 (0, (Tag3 ((("ptr", 1364)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -264)], (0)), 100000000, 0, -263), (Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -262), 0), 100000000, 0, -261), 0, (("src/ctypes/ctypes.mli", 219, 8343, 8343), ("src/ctypes/ctypes.mli", 219, 8343, 8389), 0), 0, Tag1 ("Ctypes", 39)), 0); (("string_from_ptr", 1460), ((Tag1 (0, (Tag3 ((("ptr", 1364)), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -260)], (0)), 100000000, 0, -259), (Tag1 (("length"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -258), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -257), 0), 100000000, 0, -256), 0), 100000000, 0, -255), 0, (("src/ctypes/ctypes.mli", 227, 8746, 8746), ("src/ctypes/ctypes.mli", 227, 8746, 8800), 0), 0, Tag1 ("Ctypes", 40)), 0); (("ocaml_string_start", 1461), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -254), (Tag3 ((("ocaml", 1365)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -253)], (0)), 100000000, 0, -252), 0), 100000000, 0, -251), 0, (("src/ctypes/ctypes.mli", 234, 8999, 8999), ("src/ctypes/ctypes.mli", 234, 8999, 9046), 0), 0, Tag1 ("Ctypes", 41)), 0); (("ocaml_bytes_start", 1462), ((Tag1 (0, (Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -250), (Tag3 ((("ocaml", 1365)), [(Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -249)], (0)), 100000000, 0, -248), 0), 100000000, 0, -247), 0, (("src/ctypes/ctypes.mli", 238, 9168, 9168), ("src/ctypes/ctypes.mli", 238, 9168, 9212), 0), 0, Tag1 ("Ctypes", 42)), 0); Tag3 (("CArray", 1463), 0, (Tag3 (Tag1 ((Tag2 ("Ctypes")), "CArray")), 0, (("src/ctypes/ctypes.mli", 246, 9389, 9389), ("src/ctypes/ctypes.mli", 344, 13506, 13509), 0), Tag1 ("Ctypes", 63)), 0, 0); (("bigarray_start", 1464), ((Tag1 (0, (Tag3 ((("bigarray_class", 1367)), [(Tag4 ((Tag5 ("ba_repr", 1, (Tag10 (((0), 100000000, 0, -246), 0), 100000000, 0, -245), (Tag5 ("bigarray", 1, (Tag10 (((("b")), 100000000, 0, -227), 0), 100000000, 0, -244), (Tag5 ("carray", 1, (Tag10 (((0), 100000000, 0, -243), 0), 100000000, 0, -242), (Tag5 ("dims", 1, (Tag10 (((0), 100000000, 0, -241), 0), 100000000, 0, -240), (Tag5 ("element", 1, (Tag10 (((("a")), 100000000, 0, -226), 0), 100000000, 0, -239), (Tag5 ("layout", 1, (Tag10 (((("l")), 100000000, 0, -238), 0), 100000000, 0, -237), (0, 100000000, 0, -236)), 100000000, 0, 76)), 100000000, 0, 77)), 100000000, 0, 78)), 100000000, 0, 79)), 100000000, 0, 80)), 100000000, 0, -230), (0)), 100000000, 0, -229)], (0)), 100000000, 0, -228), (Tag1 (0, ((("b")), 100000000, 0, -227), (Tag3 ((("ptr", 1364)), [((("a")), 100000000, 0, -226)], (0)), 100000000, 0, -225), 0), 100000000, 0, -224), 0), 100000000, 0, -223), 0, (("src/ctypes/ctypes.mli", 349, 13570, 13570), ("src/ctypes/ctypes.mli", 354, 13747, 13810), 0), 0, Tag1 ("Ctypes", 64)), 0); (("bigarray_of_ptr", 1465), ((Tag1 (0, (Tag3 ((("bigarray_class", 1367)), [(Tag4 ((Tag5 ("ba_repr", 1, (Tag10 (((("f")), 100000000, 0, -204), 0), 100000000, 0, -222), (Tag5 ("bigarray", 1, (Tag10 (((("b")), 100000000, 0, -200), 0), 100000000, 0, -221), (Tag5 ("carray", 1, (Tag10 (((0), 100000000, 0, -220), 0), 100000000, 0, -219), (Tag5 ("dims", 1, (Tag10 (((("i")), 100000000, 0, -205), 0), 100000000, 0, -218), (Tag5 ("element", 1, (Tag10 (((("a")), 100000000, 0, -202), 0), 100000000, 0, -217), (Tag5 ("layout", 1, (Tag10 ((Tag3 (Tag1 ((Tag2 ("Bigarray_compat")), "c_layout"), 0, (0)), 100000000, 0, -216), 0), 100000000, 0, -215), (0, 100000000, 0, -214)), 100000000, 0, 82)), 100000000, 0, 83)), 100000000, 0, 84)), 100000000, 0, 85)), 100000000, 0, 86)), 100000000, 0, -208), (0)), 100000000, 0, -207)], (0)), 100000000, 0, -206), (Tag1 (0, ((("i")), 100000000, 0, -205), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Bigarray_compat")), "kind"), [((("a")), 100000000, 0, -202); ((("f")), 100000000, 0, -204)], (0)), 100000000, 0, -203), (Tag1 (0, (Tag3 ((("ptr", 1364)), [((("a")), 100000000, 0, -202)], (0)), 100000000, 0, -201), ((("b")), 100000000, 0, -200), 0), 100000000, 0, -199), 0), 100000000, 0, -198), 0), 100000000, 0, -197), 0), 100000000, 0, -196), 0, (("src/ctypes/ctypes.mli", 357, 13888, 13888), ("src/ctypes/ctypes.mli", 363, 14146, 14201), 0), 0, Tag1 ("Ctypes", 65)), 0); (("fortran_bigarray_of_ptr", 1466), ((Tag1 (0, (Tag3 ((("bigarray_class", 1367)), [(Tag4 ((Tag5 ("ba_repr", 1, (Tag10 (((("f")), 100000000, 0, -177), 0), 100000000, 0, -195), (Tag5 ("bigarray", 1, (Tag10 (((("b")), 100000000, 0, -173), 0), 100000000, 0, -194), (Tag5 ("carray", 1, (Tag10 (((0), 100000000, 0, -193), 0), 100000000, 0, -192), (Tag5 ("dims", 1, (Tag10 (((("i")), 100000000, 0, -178), 0), 100000000, 0, -191), (Tag5 ("element", 1, (Tag10 (((("a")), 100000000, 0, -175), 0), 100000000, 0, -190), (Tag5 ("layout", 1, (Tag10 ((Tag3 (Tag1 ((Tag2 ("Bigarray_compat")), "fortran_layout"), 0, (0)), 100000000, 0, -189), 0), 100000000, 0, -188), (0, 100000000, 0, -187)), 100000000, 0, 88)), 100000000, 0, 89)), 100000000, 0, 90)), 100000000, 0, 91)), 100000000, 0, 92)), 100000000, 0, -181), (0)), 100000000, 0, -180)], (0)), 100000000, 0, -179), (Tag1 (0, ((("i")), 100000000, 0, -178), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Bigarray_compat")), "kind"), [((("a")), 100000000, 0, -175); ((("f")), 100000000, 0, -177)], (0)), 100000000, 0, -176), (Tag1 (0, (Tag3 ((("ptr", 1364)), [((("a")), 100000000, 0, -175)], (0)), 100000000, 0, -174), ((("b")), 100000000, 0, -173), 0), 100000000, 0, -172), 0), 100000000, 0, -171), 0), 100000000, 0, -170), 0), 100000000, 0, -169), 0, (("src/ctypes/ctypes.mli", 368, 14376, 14376), ("src/ctypes/ctypes.mli", 374, 14688, 14743), 0), 0, Tag1 ("Ctypes", 66)), 0); (("array_of_bigarray", 1467), ((Tag1 (0, (Tag3 ((("bigarray_class", 1367)), [(Tag4 ((Tag5 ("ba_repr", 1, (Tag10 (((0), 100000000, 0, -168), 0), 100000000, 0, -167), (Tag5 ("bigarray", 1, (Tag10 (((("b")), 100000000, 0, -149), 0), 100000000, 0, -166), (Tag5 ("carray", 1, (Tag10 (((("c")), 100000000, 0, -148), 0), 100000000, 0, -165), (Tag5 ("dims", 1, (Tag10 (((0), 100000000, 0, -164), 0), 100000000, 0, -163), (Tag5 ("element", 1, (Tag10 (((0), 100000000, 0, -162), 0), 100000000, 0, -161), (Tag5 ("layout", 1, (Tag10 ((Tag3 (Tag1 ((Tag2 ("Bigarray_compat")), "c_layout"), 0, (0)), 100000000, 0, -160), 0), 100000000, 0, -159), (0, 100000000, 0, -158)), 100000000, 0, 94)), 100000000, 0, 95)), 100000000, 0, 96)), 100000000, 0, 97)), 100000000, 0, 98)), 100000000, 0, -152), (0)), 100000000, 0, -151)], (0)), 100000000, 0, -150), (Tag1 (0, ((("b")), 100000000, 0, -149), ((("c")), 100000000, 0, -148), 0), 100000000, 0, -147), 0), 100000000, 0, -146), 0, (("src/ctypes/ctypes.mli", 379, 14932, 14932), ("src/ctypes/ctypes.mli", 384, 15146, 15208), 0), 0, Tag1 ("Ctypes", 67)), 0); (("bigarray_of_array", 1468), ((Tag1 (0, (Tag3 ((("bigarray_class", 1367)), [(Tag4 ((Tag5 ("ba_repr", 1, (Tag10 (((("f")), 100000000, 0, -127), 0), 100000000, 0, -145), (Tag5 ("bigarray", 1, (Tag10 (((("b")), 100000000, 0, -122), 0), 100000000, 0, -144), (Tag5 ("carray", 1, (Tag10 ((Tag3 ((("carray", 1366)), [((("c")), 100000000, 0, -124)], (0)), 100000000, 0, -143), 0), 100000000, 0, -142), (Tag5 ("dims", 1, (Tag10 (((("i")), 100000000, 0, -141), 0), 100000000, 0, -140), (Tag5 ("element", 1, (Tag10 (((("a")), 100000000, 0, -126), 0), 100000000, 0, -139), (Tag5 ("layout", 1, (Tag10 ((Tag3 (Tag1 ((Tag2 ("Bigarray_compat")), "c_layout"), 0, (0)), 100000000, 0, -138), 0), 100000000, 0, -137), (0, 100000000, 0, -136)), 100000000, 0, 100)), 100000000, 0, 101)), 100000000, 0, 102)), 100000000, 0, 103)), 100000000, 0, 104)), 100000000, 0, -130), (0)), 100000000, 0, -129)], (0)), 100000000, 0, -128), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Bigarray_compat")), "kind"), [((("a")), 100000000, 0, -126); ((("f")), 100000000, 0, -127)], (0)), 100000000, 0, -125), (Tag1 (0, (Tag3 ((("carray", 1366)), [((("c")), 100000000, 0, -124)], (0)), 100000000, 0, -123), ((("b")), 100000000, 0, -122), 0), 100000000, 0, -121), 0), 100000000, 0, -120), 0), 100000000, 0, -119), 0, (("src/ctypes/ctypes.mli", 391, 15422, 15422), ("src/ctypes/ctypes.mli", 397, 15700, 15752), 0), 0, Tag1 ("Ctypes", 68)), 0); (("make", 1469), ((Tag1 (Tag1 ("finalise"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag3 ((("structured", 1372)), [((0), 100000000, 0, -113); ((0), 100000000, 0, -114)], (0)), 100000000, 0, -112), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -118), 0), 100000000, 0, -117)], (0)), 100000000, 0, -116), (Tag1 (0, (Tag3 ((("typ", 1377)), [(Tag3 ((("structured", 1372)), [((0), 100000000, 0, -113); ((0), 100000000, 0, -114)], (0)), 100000000, 0, -112)], (0)), 100000000, 0, -115), (Tag3 ((("structured", 1372)), [((0), 100000000, 0, -113); ((0), 100000000, 0, -114)], (0)), 100000000, 0, -112), 0), 100000000, 0, -111), 0), 100000000, 0, -110), 0, (("src/ctypes/ctypes.mli", 404, 15958, 15958), ("src/ctypes/ctypes.mli", 404, 15958, 16030), 0), 0, Tag1 ("Ctypes", 69)), 0); (("setf", 1470), ((Tag1 (0, (Tag3 ((("structured", 1372)), [((0), 100000000, 0, -108); ((0), 100000000, 0, -109)], (0)), 100000000, 0, -107), (Tag1 (0, (Tag3 ((("field", 1375)), [((("a")), 100000000, 0, -105); (Tag3 ((("structured", 1372)), [((0), 100000000, 0, -108); ((0), 100000000, 0, -109)], (0)), 100000000, 0, -107)], (0)), 100000000, 0, -106), (Tag1 (0, ((("a")), 100000000, 0, -105), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -104), 0), 100000000, 0, -103), 0), 100000000, 0, -102), 0), 100000000, 0, -101), 0, (("src/ctypes/ctypes.mli", 409, 16203, 16203), ("src/ctypes/ctypes.mli", 409, 16203, 16271), 0), 0, Tag1 ("Ctypes", 70)), 0); (("getf", 1471), ((Tag1 (0, (Tag3 ((("structured", 1372)), [((0), 100000000, 0, -99); ((0), 100000000, 0, -100)], (0)), 100000000, 0, -98), (Tag1 (0, (Tag3 ((("field", 1375)), [((("a")), 100000000, 0, -96); (Tag3 ((("structured", 1372)), [((0), 100000000, 0, -99); ((0), 100000000, 0, -100)], (0)), 100000000, 0, -98)], (0)), 100000000, 0, -97), ((("a")), 100000000, 0, -96), 0), 100000000, 0, -95), 0), 100000000, 0, -94), 0, (("src/ctypes/ctypes.mli", 413, 16375, 16375), ("src/ctypes/ctypes.mli", 413, 16375, 16435), 0), 0, Tag1 ("Ctypes", 71)), 0); (("@.", 1472), ((Tag1 (0, (Tag3 ((("structured", 1372)), [((0), 100000000, 0, -92); ((0), 100000000, 0, -93)], (0)), 100000000, 0, -91), (Tag1 (0, (Tag3 ((("field", 1375)), [((("a")), 100000000, 0, -89); (Tag3 ((("structured", 1372)), [((0), 100000000, 0, -92); ((0), 100000000, 0, -93)], (0)), 100000000, 0, -91)], (0)), 100000000, 0, -90), (Tag3 ((("ptr", 1364)), [((("a")), 100000000, 0, -89)], (0)), 100000000, 0, -88), 0), 100000000, 0, -87), 0), 100000000, 0, -86), 0, (("src/ctypes/ctypes.mli", 418, 16599, 16599), ("src/ctypes/ctypes.mli", 418, 16599, 16663), 0), 0, Tag1 ("Ctypes", 72)), 0); (("|->", 1473), ((Tag1 (0, (Tag3 ((("ptr", 1364)), [(Tag3 ((("structured", 1372)), [((0), 100000000, 0, -83); ((0), 100000000, 0, -84)], (0)), 100000000, 0, -82)], (0)), 100000000, 0, -85), (Tag1 (0, (Tag3 ((("field", 1375)), [((("a")), 100000000, 0, -80); (Tag3 ((("structured", 1372)), [((0), 100000000, 0, -83); ((0), 100000000, 0, -84)], (0)), 100000000, 0, -82)], (0)), 100000000, 0, -81), (Tag3 ((("ptr", 1364)), [((("a")), 100000000, 0, -80)], (0)), 100000000, 0, -79), 0), 100000000, 0, -78), 0), 100000000, 0, -77), 0, (("src/ctypes/ctypes.mli", 422, 16760, 16760), ("src/ctypes/ctypes.mli", 422, 16760, 16829), 0), 0, Tag1 ("Ctypes", 73)), 0); (("offsetof", 1474), ((Tag1 (0, (Tag3 ((("field", 1375)), [((0), 100000000, 0, -74); (Tag3 ((("structure", 1373)), [((0), 100000000, 0, -76)], (0)), 100000000, 0, -75)], (0)), 100000000, 0, -73), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -72), 0), 100000000, 0, -71), 0, (("src/ctypes/ctypes.mli", 426, 16941, 16941), ("src/ctypes/ctypes.mli", 426, 16941, 16985), 0), 0, Tag1 ("Ctypes", 74)), 0); (("field_type", 1475), ((Tag1 (0, (Tag3 ((("field", 1375)), [((("a")), 100000000, 0, -68); ((0), 100000000, 0, -70)], (0)), 100000000, 0, -69), (Tag3 ((("typ", 1377)), [((("a")), 100000000, 0, -68)], (0)), 100000000, 0, -67), 0), 100000000, 0, -66), 0, (("src/ctypes/ctypes.mli", 430, 17108, 17108), ("src/ctypes/ctypes.mli", 430, 17108, 17148), 0), 0, Tag1 ("Ctypes", 75)), 0); (("field_name", 1476), ((Tag1 (0, (Tag3 ((("field", 1375)), [((0), 100000000, 0, -64); ((0), 100000000, 0, -65)], (0)), 100000000, 0, -63), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -62), 0), 100000000, 0, -61), 0, (("src/ctypes/ctypes.mli", 433, 17207, 17207), ("src/ctypes/ctypes.mli", 433, 17207, 17246), 0), 0, Tag1 ("Ctypes", 76)), 0); (("addr", 1477), ((Tag1 (0, (Tag3 ((("structured", 1372)), [((0), 100000000, 0, -59); ((0), 100000000, 0, -60)], (0)), 100000000, 0, -58), (Tag3 ((("ptr", 1364)), [(Tag3 ((("structured", 1372)), [((0), 100000000, 0, -59); ((0), 100000000, 0, -60)], (0)), 100000000, 0, -58)], (0)), 100000000, 0, -57), 0), 100000000, 0, -56), 0, (("src/ctypes/ctypes.mli", 436, 17305, 17305), ("src/ctypes/ctypes.mli", 436, 17305, 17351), 0), 0, Tag1 ("Ctypes", 77)), 0); (("coerce", 1478), ((Tag1 (0, (Tag3 ((("typ", 1377)), [((("a")), 100000000, 0, -53)], (0)), 100000000, 0, -55), (Tag1 (0, (Tag3 ((("typ", 1377)), [((("b")), 100000000, 0, -52)], (0)), 100000000, 0, -54), (Tag1 (0, ((("a")), 100000000, 0, -53), ((("b")), 100000000, 0, -52), 0), 100000000, 0, -51), 0), 100000000, 0, -50), 0), 100000000, 0, -49), 0, (("src/ctypes/ctypes.mli", 441, 17442, 17442), ("src/ctypes/ctypes.mli", 441, 17442, 17483), 0), 0, Tag1 ("Ctypes", 78)), 0); (("coerce_fn", 1479), ((Tag1 (0, (Tag3 ((("fn", 1431)), [((("a")), 100000000, 0, -46)], (0)), 100000000, 0, -48), (Tag1 (0, (Tag3 ((("fn", 1431)), [((("b")), 100000000, 0, -45)], (0)), 100000000, 0, -47), (Tag1 (0, ((("a")), 100000000, 0, -46), ((("b")), 100000000, 0, -45), 0), 100000000, 0, -44), 0), 100000000, 0, -43), 0), 100000000, 0, -42), 0, (("src/ctypes/ctypes.mli", 460, 18311, 18311), ("src/ctypes/ctypes.mli", 460, 18311, 18353), 0), 0, Tag1 ("Ctypes", 79)), 0); Tag4 (("FOREIGN", 1480), (((Tag1 ((Tag2 ("Ctypes")), "FOREIGN"))), 0, (("src/ctypes/ctypes.mli", 485, 19197, 19197), ("src/ctypes/ctypes.mli", 495, 19476, 19479), 0), Tag1 ("Ctypes", 87)), 0); Tag4 (("TYPE", 1481), (((Tag1 ((Tag2 ("Ctypes")), "TYPE"))), 0, (("src/ctypes/ctypes.mli", 500, 19580, 19580), ("src/ctypes/ctypes.mli", 567, 22015, 22018), 0), Tag1 ("Ctypes", 91)), 0); Tag3 (("Root", 1482), 0, (Tag3 (Tag1 ((Tag2 ("Ctypes")), "Root")), 0, (("src/ctypes/ctypes.mli", 570, 22075, 22075), ("src/ctypes/ctypes.mli", 584, 22553, 22556), 0), Tag1 ("Ctypes", 96)), 0, 0); Tag2 (("Unsupported", 1483), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -41)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Ctypes", 97)), 2, 0); Tag2 (("ModifyingSealedType", 1484), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -40)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Ctypes", 98)), 2, 0); Tag2 (("IncompleteType", 1485), ((Tag3 ("exn", 7)), 0, (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Ctypes", 99)), 2, 0); Tag1 (("uncoercible_info", 1486), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Ctypes")), "uncoercible_info"), 0, (0)), 100000000, 0, -39)), 0, 0, 0, 0, (("src/ctypes/ctypes.mli", 611, 23520, 23520), ("src/ctypes/ctypes.mli", 611, 23520, 23541), 0), 0, 0, 0, Tag1 ("Ctypes", 100)), 1, 0); Tag2 (("Uncoercible", 1487), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((("uncoercible_info", 1486)), 0, (0)), 100000000, 0, -38)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Ctypes", 101)), 2, 0); (("lift", 1488), ((Tag1 (0, ((0), 100000000, 0, -37), ((0), 100000000, 0, -37), 0), 100000000, 0, -36), 0, (("types/lib/g.ml", 3, 36, 40), ("types/lib/g.ml", 3, 36, 44), 0), 0, Tag1 ("Yaml_types__G", 0)), 0); (("field", 1489), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "typ"), [((("t")), 100000000, 0, -32)], (0)), 100000000, 0, -35), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -34), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "typ"), [((("a")), 100000000, 0, -31)], (0)), 100000000, 0, -33), (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "field"), [((("a")), 100000000, 0, -31); ((("t")), 100000000, 0, -32)], (0)), 100000000, 0, -30), 0), 100000000, 0, -29), 0), 100000000, 0, -28), 0), 100000000, 0, -27), 0, (("types/lib/g.ml", 6, 71, 79), ("types/lib/g.ml", 6, 71, 84), 0), 0, Tag1 ("Yaml_types__G", 2)), 0); (("seal", 1490), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "typ"), [((("a")), 100000000, 0, -26)], (0)), 100000000, 0, -25), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -24), 0), 100000000, 0, -23), 0, (("types/lib/g.ml", 199, 10002, 10010), ("types/lib/g.ml", 199, 10002, 10014), 0), 0, Tag1 ("Yaml_types__G", 386)), 0); Tag1 (("const", 1491), ([((("a")), 100000000, 0, -22)], 1, 0, 1, (((("a")), 100000000, 0, -22)), [25], [1], 0, 0, (("types/lib/g.ml", 252, 12989, 12989), ("types/lib/g.ml", 252, 12989, 13007), 0), 0, 0, 0, Tag1 ("Yaml_types__G", 511)), 1, 0); (("constant", 1492), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -21), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "typ"), [((("t")), 100000000, 0, -19)], (0)), 100000000, 0, -20), ((("t")), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("types/lib/g.ml", 253, 13008, 13012), ("types/lib/g.ml", 253, 13008, 13020), 0), 0, Tag1 ("Yaml_types__G", 512)), 0); (("enum", 1493), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -16), (Tag1 (Tag1 ("typedef"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -15)], (0)), 100000000, 0, -14), (Tag1 (Tag1 ("unexpected"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -13), ((("a")), 100000000, 0, -7), 0), 100000000, 0, -12)], (0)), 100000000, 0, -11), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((("a")), 100000000, 0, -7); (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -10)]), 100000000, 0, -9)], (0)), 100000000, 0, -8), (Tag3 (Tag1 ((Tag2 ("Cstubs_internals")), "typ"), [((("a")), 100000000, 0, -7)], (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("types/lib/g.ml", 368, 18099, 18103), ("types/lib/g.ml", 368, 18099, 18107), 0), 0, Tag1 ("Yaml_types__G", 629)), 0)], "Yaml_types__G", [("Yaml_types__G", ("\163=W\139\173\250so\158\0286\169(\142\248\164")); ("Yaml_types", ("1\228 \234\129F\222\197\236\163j\155\233y\129>")); ("Unsigned", ("cd\205\030\181\167\151\005!\134;\177\228\249\168+")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Signed", ("R\017i\"\030\024\134f\143\198\192\180>t\175\225")); ("LDouble", ("j\251\140\230^u\251\210\143\236T\207\022\147\011\211")); ("Ctypes_types", ("\140\014\176\188\187lo3aC\196\012\228vn+")); ("Ctypes_static", ("U\030\169\129GB\138P\158'd\012\131\157\202\018")); ("Ctypes_ptr", ("V\021o\161\007\161\245R\242\222:e\151\189\175\207")); ("Ctypes_primitive_types", ("\147\237\001\150\136\017Z\2308\137C\245\023\133\161\158")); ("Ctypes_memory_stubs", ("\016\229\020F\227\153LZ\166P\204(\249\139u\191")); ("Ctypes_bigarray", ("\146\0055mmn\243\187gd\185P\208J\254l")); ("Ctypes", ("\201\151\139N\189F\151(\218n\234\177\197RtW")); ("Cstubs_internals", ("/(\163Z9\154B\252\172\182\224\144\152'\227H")); ("ComplexL", ("\n\230\139\192\213\0226\203\176\242\200\205c\155ag")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Bigarray_compat", ("\150\219\208\188w\237\216\005\r[\152q'\006x\217"))], [(0)])
?unexpected:(int64 -> 'a) -> ('a * int64) list -> 'a Cstubs_internals.typ

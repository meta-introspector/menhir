type t = float
val globalize : t -> t
val t_sexp_grammar : t Sexplib0.Sexp_grammar.t
val of_float : float -> t
val to_float : t -> float
val hash_fold_t : t Base__Ppx_hash_lib.hash_fold
val hash : t -> Base__Ppx_hash_lib.Std.Hash.hash_value
val t_of_sexp : Sexplib0__.Sexp.t -> t
val sexp_of_t : t -> Sexplib0__.Sexp.t
val of_string : string -> t
val ( >= ) : t -> t -> bool
val ( <= ) : t -> t -> bool
val ( = ) : t -> t -> bool
val ( > ) : t -> t -> bool
val ( < ) : t -> t -> bool
val ( <> ) : t -> t -> bool
val equal : t -> t -> bool
val compare : t -> t -> int
val min : t -> t -> t
val max : t -> t -> t
val ascending : t -> t -> int
val descending : t -> t -> int
val between : t -> low:t -> high:t -> bool
val clamp_exn : t -> min:t -> max:t -> t
val clamp : t -> min:t -> max:t -> t Base__.Or_error.t
type comparator_witness
val comparator : (t, comparator_witness) Base__Comparator.comparator
val pp : Base__.Formatter.t -> t -> unit
val hashable : t Base__.Hashable.t
val of_string_opt : string -> t option
val is_positive : t -> bool
val is_non_negative : t -> bool
val is_negative : t -> bool
val is_non_positive : t -> bool
val invariant : t Base__Invariant_intf.inv
val nan : t
val infinity : t
val neg_infinity : t
val max_value : t
val min_value : t
val zero : t
val one : t
val minus_one : t
val pi : t
val sqrt_pi : t
val sqrt_2pi : t
val euler : t
val epsilon_float : t
val max_finite_value : t
val min_positive_subnormal_value : t
val min_positive_normal_value : t
val to_int64_preserve_order : t -> int64 option
val to_int64_preserve_order_exn : t -> int64
val of_int64_preserve_order : int64 -> t
val one_ulp : [ `Down | `Up ] -> t -> t
val of_int : int -> t
val to_int : t -> int
val of_int63 : Base__.Int63.t -> t
val of_int64 : int64 -> t
val to_int64 : t -> int64
val round : ?dir:[ `Down | `Nearest | `Up | `Zero ] -> t -> t
val iround : ?dir:[ `Down | `Nearest | `Up | `Zero ] -> t -> int option
val iround_exn : ?dir:[ `Down | `Nearest | `Up | `Zero ] -> t -> int
val round_towards_zero : t -> t
val round_down : t -> t
val round_up : t -> t
val round_nearest : t -> t
val round_nearest_half_to_even : t -> t
val iround_towards_zero : t -> int option
val iround_down : t -> int option
val iround_up : t -> int option
val iround_nearest : t -> int option
val iround_towards_zero_exn : t -> int
val iround_down_exn : t -> int
val iround_up_exn : t -> int
val iround_nearest_exn : t -> int
val int63_round_down_exn : t -> Base__.Int63.t
val int63_round_up_exn : t -> Base__.Int63.t
val int63_round_nearest_exn : t -> Base__.Int63.t
val iround_lbound : t
val iround_ubound : t
val int63_round_lbound : t
val int63_round_ubound : t
val round_significant : float -> significant_digits:int -> float
val round_decimal : float -> decimal_digits:int -> float
val is_nan : t -> bool
val is_inf : t -> bool
val is_finite : t -> bool
val is_integer : t -> bool
val min_inan : t -> t -> t
val max_inan : t -> t -> t
val ( + ) : t -> t -> t
val ( - ) : t -> t -> t
val ( / ) : t -> t -> t
val ( % ) : t -> t -> t
val ( * ) : t -> t -> t
val ( ** ) : t -> t -> t
val ( ~- ) : t -> t
module Parts :
  sig type t val fractional : t -> t/2 val integral : t -> t/2 end
val modf : t -> Parts.t
val mod_float : t -> t -> t
val add : t -> t -> t
val sub : t -> t -> t
val neg : t -> t
val scale : t -> t -> t
val abs : t -> t
module O :
  sig
    val ( + ) : t -> t -> t
    val ( - ) : t -> t -> t
    val ( * ) : t -> t -> t
    val ( / ) : t -> t -> t
    val ( % ) : t -> t -> t
    val ( ** ) : t -> t -> t
    val ( ~- ) : t -> t
    val ( >= ) : t -> t -> bool
    val ( <= ) : t -> t -> bool
    val ( = ) : t -> t -> bool
    val ( > ) : t -> t -> bool
    val ( < ) : t -> t -> bool
    val ( <> ) : t -> t -> bool
    val abs : t -> t
    val neg : t -> t
    val zero : t
    val of_int : int -> t
    val of_float : float -> t
  end
module O_dot :
  sig
    val ( +. ) : t -> t -> t
    val ( -. ) : t -> t -> t
    val ( *. ) : t -> t -> t
    val ( /. ) : t -> t -> t
    val ( %. ) : t -> t -> t
    val ( **. ) : t -> t -> t
    val ( ~-. ) : t -> t
  end
val to_string : t -> string
val to_string_hum :
  ?delimiter:char ->
  ?decimals:int -> ?strip_zero:bool -> ?explicit_plus:bool -> t -> string
val to_padded_compact_string : t -> string
val to_padded_compact_string_custom :
  t ->
  ?prefix:string ->
  kilo:string ->
  mega:string -> giga:string -> tera:string -> ?peta:string -> unit -> string
val int_pow : t -> int -> t
val square : t -> t
val ldexp : t -> int -> t
val frexp : t -> t * int
external log10 : t -> t = "caml_log10_float" "log10" [@@unboxed] [@@noalloc]
external expm1 : t -> t = "caml_expm1_float" "caml_expm1" [@@unboxed]
  [@@noalloc]
external log1p : t -> t = "caml_log1p_float" "caml_log1p" [@@unboxed]
  [@@noalloc]
external copysign : t -> t -> t = "caml_copysign_float" "caml_copysign"
  [@@unboxed] [@@noalloc]
external cos : t -> t = "caml_cos_float" "cos" [@@unboxed] [@@noalloc]
external sin : t -> t = "caml_sin_float" "sin" [@@unboxed] [@@noalloc]
external tan : t -> t = "caml_tan_float" "tan" [@@unboxed] [@@noalloc]
external acos : t -> t = "caml_acos_float" "acos" [@@unboxed] [@@noalloc]
external asin : t -> t = "caml_asin_float" "asin" [@@unboxed] [@@noalloc]
external atan : t -> t = "caml_atan_float" "atan" [@@unboxed] [@@noalloc]
external atan2 : t -> t -> t = "caml_atan2_float" "atan2" [@@unboxed]
  [@@noalloc]
external hypot : t -> t -> t = "caml_hypot_float" "caml_hypot" [@@unboxed]
  [@@noalloc]
external cosh : t -> t = "caml_cosh_float" "cosh" [@@unboxed] [@@noalloc]
external sinh : t -> t = "caml_sinh_float" "sinh" [@@unboxed] [@@noalloc]
external tanh : t -> t = "caml_tanh_float" "tanh" [@@unboxed] [@@noalloc]
external acosh : float -> float = "caml_acosh_float" "caml_acosh" [@@unboxed]
  [@@noalloc]
external asinh : float -> float = "caml_asinh_float" "caml_asinh" [@@unboxed]
  [@@noalloc]
external atanh : float -> float = "caml_atanh_float" "caml_atanh" [@@unboxed]
  [@@noalloc]
external sqrt : t -> t = "caml_sqrt_float" "sqrt" [@@unboxed] [@@noalloc]
external exp : t -> t = "caml_exp_float" "exp" [@@unboxed] [@@noalloc]
external log : t -> t = "caml_log_float" "log" [@@unboxed] [@@noalloc]
module Class :
  sig
    type t = Infinite | Nan | Normal | Subnormal | Zero
    val compare : t Base__Ppx_compare_lib.compare
    val all : t list
    val t_of_sexp : Sexplib0__.Sexp.t -> t
    val sexp_of_t : t -> Sexplib0__.Sexp.t
    val t_sexp_grammar : t Sexplib0.Sexp_grammar.t
    val of_string : string -> t
    val to_string : t -> string
  end
val classify : t -> Class.t
val sign : t -> Base__.Sign.t
val sign_exn : t -> Base__.Sign.t
val sign_or_nan : t -> Base__.Sign_or_nan.t
val create_ieee :
  negative:bool ->
  exponent:int -> mantissa:Base__.Int63.t -> t Base__.Or_error.t
val create_ieee_exn :
  negative:bool -> exponent:int -> mantissa:Base__.Int63.t -> t
val ieee_negative : t -> bool
val ieee_exponent : t -> int
val ieee_mantissa : t -> Base__.Int63.t
module Terse :
  sig
    type nonrec t = t
    val t_of_sexp : Sexplib0__.Sexp.t -> t
    val sexp_of_t : t -> Sexplib0__.Sexp.t
    val t_sexp_grammar : t Sexplib0.Sexp_grammar.t
    val of_string : string -> t
    val to_string : t -> string
  end
module Private :
  sig
    val box : t -> t
    val clamp_unchecked : t -> min:t -> max:t -> t
    val lower_bound_for_int : int -> t
    val upper_bound_for_int : int -> t
    val specialized_hash : t -> int
    val one_ulp_less_than_half : t
    val int63_round_nearest_portable_alloc_exn : t -> Base__.Int63.t
    val int63_round_nearest_arch64_noalloc_exn : t -> Base__.Int63.t
    val iround_nearest_exn_64 : t -> int("DEBUG:rule", [Tag1 (("t", 2222), (0, 0, 0, 1, ((Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -519)), 0, 0, 0, 0, (("src/float.mli", 11, 480, 480), ("src/float.mli", 11, 480, 538), 0), [(("deriving_inline", (("src/float.mli", 11, 480, 498), ("src/float.mli", 11, 480, 513), 0)), ([([(Tag8 ([(((("globalize"), (("src/float.mli", 11, 480, 514), ("src/float.mli", 11, 480, 523), 0))), (("src/float.mli", 11, 480, 514), ("src/float.mli", 11, 480, 523), 0), 0, 0); (((("sexp_grammar"), (("src/float.mli", 11, 480, 525), ("src/float.mli", 11, 480, 537), 0))), (("src/float.mli", 11, 480, 525), ("src/float.mli", 11, 480, 537), 0), 0, 0)]), (("src/float.mli", 11, 480, 514), ("src/float.mli", 11, 480, 537), 0), 0, 0)], (("src/float.mli", 11, 480, 514), ("src/float.mli", 11, 480, 537), 0))]), (("src/float.mli", 11, 480, 495), ("src/float.mli", 11, 480, 538), 0))], 0, 0, Tag1 ("Base__Float", 0)), 1, 0); (("globalize", 2223), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -518), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -517), 0), 100000000, 0, -516), 0, (("src/float.mli", 13, 540, 540), ("src/float.mli", 13, 540, 578), 0), 0, Tag1 ("Base__Float", 1)), 0); (("t_sexp_grammar", 2224), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -515)], (0)), 100000000, 0, -514), 0, (("src/float.mli", 14, 579, 579), ("src/float.mli", 14, 579, 625), 0), 0, Tag1 ("Base__Float", 3)), 0); (("of_float", 2225), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -513), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -512), 0), 100000000, 0, -511), 0, (("src/float.mli", 18, 637, 645), ("src/float.mli", 18, 637, 673), 0), 0, Tag1 ("Base__Floatable", 1)), 0); (("to_float", 2226), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -510), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -509), 0), 100000000, 0, -508), 0, (("src/float.mli", 18, 637, 645), ("src/float.mli", 18, 637, 673), 0), 0, Tag1 ("Base__Floatable", 2)), 0); (("hash_fold_t", 2227), ((Tag3 (Tag1 ((Tag2 ("Base__Ppx_hash_lib")), "hash_fold"), [(Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -507)], (0)), 100000000, 0, -506), 0, (("src/float.mli", 23, 818, 826), ("src/float.mli", 23, 818, 857), 0), 0, Tag1 ("Base__Ppx_hash_lib", 4)), 0); (("hash", 2228), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -505), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__Ppx_hash_lib")), "Std"), "Hash"), "hash_value"), 0, (0)), 100000000, 0, -504), 0), 100000000, 0, -503), 0, (("src/float.mli", 23, 818, 826), ("src/float.mli", 23, 818, 857), 0), 0, Tag1 ("Base__Ppx_hash_lib", 5)), 0); (("t_of_sexp", 2229), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -502), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -501), 0), 100000000, 0, -500), 0, (("src/float.mli", 23, 818, 826), ("src/float.mli", 23, 818, 857), 0), 0, Tag1 ("Sexplib0__Sexpable", 1)), 0); (("sexp_of_t", 2230), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -499), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -498), 0), 100000000, 0, -497), 0, (("src/float.mli", 23, 818, 826), ("src/float.mli", 23, 818, 857), 0), 0, Tag1 ("Sexplib0__Sexpable", 2)), 0); (("of_string", 2231), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -496), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -495), 0), 100000000, 0, -494), 0, (("src/float.mli", 23, 818, 826), ("src/float.mli", 23, 818, 857), 0), 0, Tag1 ("Base__Stringable", 1)), 0); ((">=", 2232), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -493), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -492), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -491), 0), 100000000, 0, -490), 0), 100000000, 0, -489), 0, (("src/float.mli", 23, 818, 826), ("src/float.mli", 23, 818, 857), 0), 0, Tag1 ("Base__Comparisons", 1)), 0); (("<=", 2233), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -488), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -487), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -486), 0), 100000000, 0, -485), 0), 100000000, 0, -484), 0, (("src/float.mli", 23, 818, 826), ("src/float.mli", 23, 818, 857), 0), 0, Tag1 ("Base__Comparisons", 2)), 0); (("=", 2234), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -483), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -482), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -481), 0), 100000000, 0, -480), 0), 100000000, 0, -479), 0, (("src/float.mli", 23, 818, 826), ("src/float.mli", 23, 818, 857), 0), 0, Tag1 ("Base__Comparisons", 3)), 0); ((">", 2235), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -478), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -477), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -476), 0), 100000000, 0, -475), 0), 100000000, 0, -474), 0, (("src/float.mli", 23, 818, 826), ("src/float.mli", 23, 818, 857), 0), 0, Tag1 ("Base__Comparisons", 4)), 0); (("<", 2236), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -473), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -472), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -471), 0), 100000000, 0, -470), 0), 100000000, 0, -469), 0, (("src/float.mli", 23, 818, 826), ("src/float.mli", 23, 818, 857), 0), 0, Tag1 ("Base__Comparisons", 5)), 0); (("<>", 2237), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -468), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -467), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -466), 0), 100000000, 0, -465), 0), 100000000, 0, -464), 0, (("src/float.mli", 23, 818, 826), ("src/float.mli", 23, 818, 857), 0), 0, Tag1 ("Base__Comparisons", 6)), 0); (("equal", 2238), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -463), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -462), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -461), 0), 100000000, 0, -460), 0), 100000000, 0, -459), 0, (("src/float.mli", 23, 818, 826), ("src/float.mli", 23, 818, 857), 0), 0, Tag1 ("Base__Comparisons", 8)), 0); (("compare", 2239), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -458), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -457), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -456), 0), 100000000, 0, -455), 0), 100000000, 0, -454), 0, (("src/float.mli", 23, 818, 826), ("src/float.mli", 23, 818, 857), 0), 0, Tag1 ("Base__Comparisons", 9)), 0); (("min", 2240), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -453), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -452), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -451), 0), 100000000, 0, -450), 0), 100000000, 0, -449), 0, (("src/float.mli", 23, 818, 826), ("src/float.mli", 23, 818, 857), 0), 0, Tag1 ("Base__Comparisons", 10)), 0); (("max", 2241), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -448), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -447), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -446), 0), 100000000, 0, -445), 0), 100000000, 0, -444), 0, (("src/float.mli", 23, 818, 826), ("src/float.mli", 23, 818, 857), 0), 0, Tag1 ("Base__Comparisons", 11)), 0); (("ascending", 2242), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -443), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -442), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -441), 0), 100000000, 0, -440), 0), 100000000, 0, -439), 0, (("src/float.mli", 23, 818, 826), ("src/float.mli", 23, 818, 857), 0), 0, Tag1 ("Base__Comparable_intf", 19)), 0); (("descending", 2243), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -438), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -437), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -436), 0), 100000000, 0, -435), 0), 100000000, 0, -434), 0, (("src/float.mli", 23, 818, 826), ("src/float.mli", 23, 818, 857), 0), 0, Tag1 ("Base__Comparable_intf", 20)), 0); (("between", 2244), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -433), (Tag1 (("low"), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -432), (Tag1 (("high"), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -431), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -430), 0), 100000000, 0, -429), 0), 100000000, 0, -428), 0), 100000000, 0, -427), 0, (("src/float.mli", 23, 818, 826), ("src/float.mli", 23, 818, 857), 0), 0, Tag1 ("Base__Comparable_intf", 21)), 0); (("clamp_exn", 2245), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -426), (Tag1 (("min"), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -425), (Tag1 (("max"), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -424), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -423), 0), 100000000, 0, -422), 0), 100000000, 0, -421), 0), 100000000, 0, -420), 0, (("src/float.mli", 23, 818, 826), ("src/float.mli", 23, 818, 857), 0), 0, Tag1 ("Base__Comparable_intf", 22)), 0); (("clamp", 2246), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -419), (Tag1 (("min"), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -418), (Tag1 (("max"), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -417), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -416)], (0)), 100000000, 0, -415), 0), 100000000, 0, -414), 0), 100000000, 0, -413), 0), 100000000, 0, -412), 0, (("src/float.mli", 23, 818, 826), ("src/float.mli", 23, 818, 857), 0), 0, Tag1 ("Base__Comparable_intf", 23)), 0); Tag1 (("comparator_witness", 2247), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/float.mli", 23, 818, 826), ("src/float.mli", 23, 818, 857), 0), 0, 0, 0, Tag1 ("Base__Comparator", 5)), 1, 0); (("comparator", 2248), ((Tag3 (Tag1 ((Tag2 ("Base__Comparator")), "comparator"), [(Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -410); (Tag3 ((("comparator_witness", 2247)), 0, (0)), 100000000, 0, -411)], (0)), 100000000, 0, -409), 0, (("src/float.mli", 23, 818, 826), ("src/float.mli", 23, 818, 857), 0), 0, Tag1 ("Base__Comparator", 6)), 0); (("pp", 2249), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Formatter"), "t"), 0, (0)), 100000000, 0, -408), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -407), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -406), 0), 100000000, 0, -405), 0), 100000000, 0, -404), 0, (("src/float.mli", 23, 818, 826), ("src/float.mli", 23, 818, 857), 0), 0, Tag1 ("Base__Pretty_printer", 2)), 0); (("hashable", 2250), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Hashable"), "t"), [(Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -403)], (0)), 100000000, 0, -402), 0, (("src/float.mli", 23, 818, 826), ("src/float.mli", 23, 818, 857), 0), 0, Tag1 ("Base__Identifiable_intf", 15)), 0); (("of_string_opt", 2251), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -401), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -400)], (0)), 100000000, 0, -399), 0), 100000000, 0, -398), 0, (("src/float.mli", 25, 859, 859), ("src/float.mli", 25, 859, 897), 0), 0, Tag1 ("Base__Float", 6)), 0); (("is_positive", 2252), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -397), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -396), 0), 100000000, 0, -395), 0, (("src/float.mli", 27, 899, 907), ("src/float.mli", 27, 899, 944), 0), 0, Tag1 ("Base__Comparable_intf", 13)), 0); (("is_non_negative", 2253), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -394), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -393), 0), 100000000, 0, -392), 0, (("src/float.mli", 27, 899, 907), ("src/float.mli", 27, 899, 944), 0), 0, Tag1 ("Base__Comparable_intf", 14)), 0); (("is_negative", 2254), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -391), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -390), 0), 100000000, 0, -389), 0, (("src/float.mli", 27, 899, 907), ("src/float.mli", 27, 899, 944), 0), 0, Tag1 ("Base__Comparable_intf", 15)), 0); (("is_non_positive", 2255), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -388), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -387), 0), 100000000, 0, -386), 0, (("src/float.mli", 27, 899, 907), ("src/float.mli", 27, 899, 944), 0), 0, Tag1 ("Base__Comparable_intf", 16)), 0); (("invariant", 2256), ((Tag3 (Tag1 ((Tag2 ("Base__Invariant_intf")), "inv"), [(Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -385)], (0)), 100000000, 0, -384), 0, (("src/float.mli", 28, 945, 953), ("src/float.mli", 28, 945, 981), 0), 0, Tag1 ("Base__Invariant_intf", 3)), 0); (("nan", 2257), ((Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -383), 0, (("src/float.mli", 30, 983, 983), ("src/float.mli", 30, 983, 994), 0), 0, Tag1 ("Base__Float", 9)), 0); (("infinity", 2258), ((Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -382), 0, (("src/float.mli", 31, 995, 995), ("src/float.mli", 31, 995, 1011), 0), 0, Tag1 ("Base__Float", 10)), 0); (("neg_infinity", 2259), ((Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -381), 0, (("src/float.mli", 32, 1012, 1012), ("src/float.mli", 32, 1012, 1032), 0), 0, Tag1 ("Base__Float", 11)), 0); (("max_value", 2260), ((Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -380), 0, (("src/float.mli", 35, 1062, 1062), ("src/float.mli", 35, 1062, 1079), 0), 0, Tag1 ("Base__Float", 12)), 0); (("min_value", 2261), ((Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -379), 0, (("src/float.mli", 38, 1113, 1113), ("src/float.mli", 38, 1113, 1130), 0), 0, Tag1 ("Base__Float", 13)), 0); (("zero", 2262), ((Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -378), 0, (("src/float.mli", 40, 1132, 1132), ("src/float.mli", 40, 1132, 1144), 0), 0, Tag1 ("Base__Float", 14)), 0); (("one", 2263), ((Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -377), 0, (("src/float.mli", 41, 1145, 1145), ("src/float.mli", 41, 1145, 1156), 0), 0, Tag1 ("Base__Float", 15)), 0); (("minus_one", 2264), ((Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -376), 0, (("src/float.mli", 42, 1157, 1157), ("src/float.mli", 42, 1157, 1174), 0), 0, Tag1 ("Base__Float", 16)), 0); (("pi", 2265), ((Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -375), 0, (("src/float.mli", 45, 1200, 1200), ("src/float.mli", 45, 1200, 1210), 0), 0, Tag1 ("Base__Float", 17)), 0); (("sqrt_pi", 2266), ((Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -374), 0, (("src/float.mli", 48, 1242, 1242), ("src/float.mli", 48, 1242, 1257), 0), 0, Tag1 ("Base__Float", 18)), 0); (("sqrt_2pi", 2267), ((Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -373), 0, (("src/float.mli", 51, 1293, 1293), ("src/float.mli", 51, 1293, 1309), 0), 0, Tag1 ("Base__Float", 19)), 0); (("euler", 2268), ((Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -372), 0, (("src/float.mli", 54, 1350, 1350), ("src/float.mli", 54, 1350, 1363), 0), 0, Tag1 ("Base__Float", 20)), 0); (("epsilon_float", 2269), ((Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -371), 0, (("src/float.mli", 66, 1788, 1788), ("src/float.mli", 66, 1788, 1809), 0), 0, Tag1 ("Base__Float", 21)), 0); (("max_finite_value", 2270), ((Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -370), 0, (("src/float.mli", 68, 1811, 1811), ("src/float.mli", 68, 1811, 1835), 0), 0, Tag1 ("Base__Float", 22)), 0); (("min_positive_subnormal_value", 2271), ((Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -369), 0, (("src/float.mli", 74, 1943, 1943), ("src/float.mli", 74, 1943, 1979), 0), 0, Tag1 ("Base__Float", 23)), 0); (("min_positive_normal_value", 2272), ((Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -368), 0, (("src/float.mli", 75, 1980, 1980), ("src/float.mli", 75, 1980, 2013), 0), 0, Tag1 ("Base__Float", 24)), 0); (("to_int64_preserve_order", 2273), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -367), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -366)], (0)), 100000000, 0, -365), 0), 100000000, 0, -364), 0, (("src/float.mli", 80, 2206, 2206), ("src/float.mli", 80, 2206, 2253), 0), 0, Tag1 ("Base__Float", 25)), 0); (("to_int64_preserve_order_exn", 2274), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -363), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -362), 0), 100000000, 0, -361), 0, (("src/float.mli", 82, 2255, 2255), ("src/float.mli", 82, 2255, 2299), 0), 0, Tag1 ("Base__Float", 26)), 0); (("of_int64_preserve_order", 2275), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -360), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -359), 0), 100000000, 0, -358), 0, (("src/float.mli", 85, 2374, 2374), ("src/float.mli", 85, 2374, 2414), 0), 0, Tag1 ("Base__Float", 27)), 0); (("one_ulp", 2276), ((Tag1 (0, (Tag8 (([("Down", (0)); ("Up", (0))], (0, 100000000, 0, -357), 1, 0, 0)), 100000000, 0, -356), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -355), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -354), 0), 100000000, 0, -353), 0), 100000000, 0, -352), 0, (("src/float.mli", 90, 2643, 2643), ("src/float.mli", 90, 2643, 2682), 0), 0, Tag1 ("Base__Float", 28)), 0); (("of_int", 2277), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -351), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -350), 0), 100000000, 0, -349), 0, (("src/float.mli", 94, 2814, 2814), ("src/float.mli", 94, 2814, 2835), 0), 0, Tag1 ("Base__Float", 29)), 0); (("to_int", 2278), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -348), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -347), 0), 100000000, 0, -346), 0, (("src/float.mli", 96, 2837, 2837), ("src/float.mli", 96, 2837, 2858), 0), 0, Tag1 ("Base__Float", 30)), 0); (("of_int63", 2279), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Int63"), "t"), 0, (0)), 100000000, 0, -345), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -344), 0), 100000000, 0, -343), 0, (("src/float.mli", 97, 2859, 2859), ("src/float.mli", 97, 2859, 2886), 0), 0, Tag1 ("Base__Float", 31)), 0); (("of_int64", 2280), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -342), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -341), 0), 100000000, 0, -340), 0, (("src/float.mli", 98, 2887, 2887), ("src/float.mli", 98, 2887, 2912), 0), 0, Tag1 ("Base__Float", 32)), 0); (("to_int64", 2281), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -339), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -338), 0), 100000000, 0, -337), 0, (("src/float.mli", 99, 2913, 2913), ("src/float.mli", 99, 2913, 2938), 0), 0, Tag1 ("Base__Float", 33)), 0); (("round", 2282), ((Tag1 (Tag1 ("dir"), (Tag3 ((Tag3 ("option", 10)), [(Tag8 (([("Down", (0)); ("Nearest", (0)); ("Up", (0)); ("Zero", (0))], (0, 100000000, 0, -336), 1, 0, 0)), 100000000, 0, -335)], (0)), 100000000, 0, -334), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -333), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -332), 0), 100000000, 0, -331), 0), 100000000, 0, -330), 0, (("src/float.mli", 137, 4602, 4602), ("src/float.mli", 137, 4602, 4663), 0), 0, Tag1 ("Base__Float", 34)), 0); (("iround", 2283), ((Tag1 (Tag1 ("dir"), (Tag3 ((Tag3 ("option", 10)), [(Tag8 (([("Down", (0)); ("Nearest", (0)); ("Up", (0)); ("Zero", (0))], (0, 100000000, 0, -329), 1, 0, 0)), 100000000, 0, -328)], (0)), 100000000, 0, -327), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -326), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -325)], (0)), 100000000, 0, -324), 0), 100000000, 0, -323), 0), 100000000, 0, -322), 0, (("src/float.mli", 139, 4665, 4665), ("src/float.mli", 139, 4665, 4736), 0), 0, Tag1 ("Base__Float", 35)), 0); (("iround_exn", 2284), ((Tag1 (Tag1 ("dir"), (Tag3 ((Tag3 ("option", 10)), [(Tag8 (([("Down", (0)); ("Nearest", (0)); ("Up", (0)); ("Zero", (0))], (0, 100000000, 0, -321), 1, 0, 0)), 100000000, 0, -320)], (0)), 100000000, 0, -319), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -318), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -317), 0), 100000000, 0, -316), 0), 100000000, 0, -315), 0, (("src/float.mli", 140, 4737, 4737), ("src/float.mli", 140, 4737, 4805), 0), 0, Tag1 ("Base__Float", 36)), 0); (("round_towards_zero", 2285), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -314), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -313), 0), 100000000, 0, -312), 0, (("src/float.mli", 141, 4806, 4806), ("src/float.mli", 141, 4806, 4837), 0), 0, Tag1 ("Base__Float", 37)), 0); (("round_down", 2286), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -311), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -310), 0), 100000000, 0, -309), 0, (("src/float.mli", 142, 4838, 4838), ("src/float.mli", 142, 4838, 4861), 0), 0, Tag1 ("Base__Float", 38)), 0); (("round_up", 2287), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -308), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -307), 0), 100000000, 0, -306), 0, (("src/float.mli", 143, 4862, 4862), ("src/float.mli", 143, 4862, 4883), 0), 0, Tag1 ("Base__Float", 39)), 0); (("round_nearest", 2288), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -305), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -304), 0), 100000000, 0, -303), 0, (("src/float.mli", 146, 4917, 4917), ("src/float.mli", 146, 4917, 4943), 0), 0, Tag1 ("Base__Float", 40)), 0); (("round_nearest_half_to_even", 2289), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -302), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -301), 0), 100000000, 0, -300), 0, (("src/float.mli", 149, 4994, 4994), ("src/float.mli", 149, 4994, 5033), 0), 0, Tag1 ("Base__Float", 41)), 0); (("iround_towards_zero", 2290), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -299), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -298)], (0)), 100000000, 0, -297), 0), 100000000, 0, -296), 0, (("src/float.mli", 151, 5035, 5035), ("src/float.mli", 151, 5035, 5076), 0), 0, Tag1 ("Base__Float", 42)), 0); (("iround_down", 2291), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -295), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -294)], (0)), 100000000, 0, -293), 0), 100000000, 0, -292), 0, (("src/float.mli", 152, 5077, 5077), ("src/float.mli", 152, 5077, 5110), 0), 0, Tag1 ("Base__Float", 43)), 0); (("iround_up", 2292), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -291), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -290)], (0)), 100000000, 0, -289), 0), 100000000, 0, -288), 0, (("src/float.mli", 153, 5111, 5111), ("src/float.mli", 153, 5111, 5142), 0), 0, Tag1 ("Base__Float", 44)), 0); (("iround_nearest", 2293), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -287), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -286)], (0)), 100000000, 0, -285), 0), 100000000, 0, -284), 0, (("src/float.mli", 154, 5143, 5143), ("src/float.mli", 154, 5143, 5179), 0), 0, Tag1 ("Base__Float", 45)), 0); (("iround_towards_zero_exn", 2294), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -283), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -282), 0), 100000000, 0, -281), 0, (("src/float.mli", 155, 5180, 5180), ("src/float.mli", 155, 5180, 5218), 0), 0, Tag1 ("Base__Float", 46)), 0); (("iround_down_exn", 2295), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -280), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -279), 0), 100000000, 0, -278), 0, (("src/float.mli", 156, 5219, 5219), ("src/float.mli", 156, 5219, 5249), 0), 0, Tag1 ("Base__Float", 47)), 0); (("iround_up_exn", 2296), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -277), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -276), 0), 100000000, 0, -275), 0, (("src/float.mli", 157, 5250, 5250), ("src/float.mli", 157, 5250, 5278), 0), 0, Tag1 ("Base__Float", 48)), 0); (("iround_nearest_exn", 2297), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -274), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -273), 0), 100000000, 0, -272), 0, (("src/float.mli", 158, 5279, 5279), ("src/float.mli", 158, 5279, 5312), 0), 0, Tag1 ("Base__Float", 49)), 0); (("int63_round_down_exn", 2298), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -271), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Int63"), "t"), 0, (0)), 100000000, 0, -270), 0), 100000000, 0, -269), 0, (("src/float.mli", 159, 5313, 5313), ("src/float.mli", 159, 5313, 5352), 0), 0, Tag1 ("Base__Float", 50)), 0); (("int63_round_up_exn", 2299), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -268), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Int63"), "t"), 0, (0)), 100000000, 0, -267), 0), 100000000, 0, -266), 0, (("src/float.mli", 160, 5353, 5353), ("src/float.mli", 160, 5353, 5390), 0), 0, Tag1 ("Base__Float", 51)), 0); (("int63_round_nearest_exn", 2300), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -265), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Int63"), "t"), 0, (0)), 100000000, 0, -264), 0), 100000000, 0, -263), 0, (("src/float.mli", 161, 5391, 5391), ("src/float.mli", 161, 5391, 5433), 0), 0, Tag1 ("Base__Float", 52)), 0); (("iround_lbound", 2301), ((Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -262), 0, (("src/float.mli", 165, 5586, 5586), ("src/float.mli", 165, 5586, 5607), 0), 0, Tag1 ("Base__Float", 53)), 0); (("iround_ubound", 2302), ((Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -261), 0, (("src/float.mli", 167, 5609, 5609), ("src/float.mli", 167, 5609, 5630), 0), 0, Tag1 ("Base__Float", 54)), 0); (("int63_round_lbound", 2303), ((Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -260), 0, (("src/float.mli", 168, 5631, 5631), ("src/float.mli", 168, 5631, 5657), 0), 0, Tag1 ("Base__Float", 55)), 0); (("int63_round_ubound", 2304), ((Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -259), 0, (("src/float.mli", 169, 5658, 5658), ("src/float.mli", 169, 5658, 5684), 0), 0, Tag1 ("Base__Float", 56)), 0); (("round_significant", 2305), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -258), (Tag1 (("significant_digits"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -257), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -256), 0), 100000000, 0, -255), 0), 100000000, 0, -254), 0, (("src/float.mli", 232, 7781, 7781), ("src/float.mli", 232, 7781, 7845), 0), 0, Tag1 ("Base__Float", 57)), 0); (("round_decimal", 2306), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -253), (Tag1 (("decimal_digits"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -252), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -251), 0), 100000000, 0, -250), 0), 100000000, 0, -249), 0, (("src/float.mli", 241, 8150, 8150), ("src/float.mli", 241, 8150, 8206), 0), 0, Tag1 ("Base__Float", 58)), 0); (("is_nan", 2307), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -248), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -247), 0), 100000000, 0, -246), 0, (("src/float.mli", 244, 8209, 8209), ("src/float.mli", 244, 8209, 8231), 0), 0, Tag1 ("Base__Float", 59)), 0); (("is_inf", 2308), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -245), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -244), 0), 100000000, 0, -243), 0, (("src/float.mli", 247, 8308, 8308), ("src/float.mli", 247, 8308, 8330), 0), 0, Tag1 ("Base__Float", 60)), 0); (("is_finite", 2309), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -242), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -241), 0), 100000000, 0, -240), 0, (("src/float.mli", 250, 8401, 8401), ("src/float.mli", 250, 8401, 8426), 0), 0, Tag1 ("Base__Float", 61)), 0); (("is_integer", 2310), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -239), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -238), 0), 100000000, 0, -237), 0, (("src/float.mli", 253, 8494, 8494), ("src/float.mli", 253, 8494, 8520), 0), 0, Tag1 ("Base__Float", 62)), 0); (("min_inan", 2311), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -236), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -235), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -234), 0), 100000000, 0, -233), 0), 100000000, 0, -232), 0, (("src/float.mli", 259, 8751, 8751), ("src/float.mli", 259, 8751, 8777), 0), 0, Tag1 ("Base__Float", 63)), 0); (("max_inan", 2312), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -231), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -230), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -229), 0), 100000000, 0, -228), 0), 100000000, 0, -227), 0, (("src/float.mli", 260, 8778, 8778), ("src/float.mli", 260, 8778, 8804), 0), 0, Tag1 ("Base__Float", 64)), 0); (("+", 2313), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -226), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -225), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -224), 0), 100000000, 0, -223), 0), 100000000, 0, -222), 0, (("src/float.mli", 261, 8805, 8805), ("src/float.mli", 261, 8805, 8828), 0), 0, Tag1 ("Base__Float", 65)), 0); (("-", 2314), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -221), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -220), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -219), 0), 100000000, 0, -218), 0), 100000000, 0, -217), 0, (("src/float.mli", 262, 8829, 8829), ("src/float.mli", 262, 8829, 8852), 0), 0, Tag1 ("Base__Float", 66)), 0); (("/", 2315), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -216), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -215), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -214), 0), 100000000, 0, -213), 0), 100000000, 0, -212), 0, (("src/float.mli", 263, 8853, 8853), ("src/float.mli", 263, 8853, 8876), 0), 0, Tag1 ("Base__Float", 67)), 0); (("%", 2316), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -211), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -210), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -209), 0), 100000000, 0, -208), 0), 100000000, 0, -207), 0, (("src/float.mli", 273, 9228, 9228), ("src/float.mli", 273, 9228, 9251), 0), 0, Tag1 ("Base__Float", 68)), 0); (("*", 2317), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -206), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -205), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -204), 0), 100000000, 0, -203), 0), 100000000, 0, -202), 0, (("src/float.mli", 275, 9253, 9253), ("src/float.mli", 275, 9253, 9276), 0), 0, Tag1 ("Base__Float", 69)), 0); (("**", 2318), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -201), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -200), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -199), 0), 100000000, 0, -198), 0), 100000000, 0, -197), 0, (("src/float.mli", 276, 9277, 9277), ("src/float.mli", 276, 9277, 9301), 0), 0, Tag1 ("Base__Float", 70)), 0); (("~-", 2319), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -196), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -195), 0), 100000000, 0, -194), 0, (("src/float.mli", 277, 9302, 9302), ("src/float.mli", 277, 9302, 9321), 0), 0, Tag1 ("Base__Float", 71)), 0); Tag3 (("Parts", 2320), 0, (Tag1 ([Tag1 (("t", 2371), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/float.mli", 281, 9477, 9492), ("src/float.mli", 288, 9581, 9601), 0), 0, 0, 0, Tag1 ("Base__Float", 73)), 1, 0); (("fractional", 2372), ((Tag1 (0, (Tag3 ((("t", 2371)), 0, (0)), 100000000, 0, -525), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -524), 0), 100000000, 0, -523), 0, (("src/float.mli", 281, 9477, 9492), ("src/float.mli", 288, 9581, 9601), 0), 0, Tag1 ("Base__Float", 74)), 0); (("integral", 2373), ((Tag1 (0, (Tag3 ((("t", 2371)), 0, (0)), 100000000, 0, -522), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -521), 0), 100000000, 0, -520), 0, (("src/float.mli", 281, 9477, 9492), ("src/float.mli", 288, 9581, 9601), 0), 0, Tag1 ("Base__Float", 75)), 0)]), 0, (("src/float.mli", 281, 9477, 9477), ("src/float.mli", 288, 9581, 9601), 0), Tag1 ("Base__Float", 77)), 0, 0); (("modf", 2321), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -193), (Tag3 (Tag1 ((("Parts", 2320)), "t"), 0, (0)), 100000000, 0, -192), 0), 100000000, 0, -191), 0, (("src/float.mli", 290, 9603, 9603), ("src/float.mli", 290, 9603, 9626), 0), 0, Tag1 ("Base__Float", 78)), 0); (("mod_float", 2322), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -190), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -189), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -188), 0), 100000000, 0, -187), 0), 100000000, 0, -186), 0, (("src/float.mli", 302, 9935, 9935), ("src/float.mli", 302, 9935, 9962), 0), 0, Tag1 ("Base__Float", 79)), 0); (("add", 2323), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -185), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -184), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -183), 0), 100000000, 0, -182), 0), 100000000, 0, -181), 0, (("src/float.mli", 308, 10121, 10121), ("src/float.mli", 308, 10121, 10142), 0), 0, Tag1 ("Base__Float", 80)), 0); (("sub", 2324), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -180), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -179), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -178), 0), 100000000, 0, -177), 0), 100000000, 0, -176), 0, (("src/float.mli", 310, 10144, 10144), ("src/float.mli", 310, 10144, 10165), 0), 0, Tag1 ("Base__Float", 81)), 0); (("neg", 2325), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -175), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -174), 0), 100000000, 0, -173), 0, (("src/float.mli", 311, 10166, 10166), ("src/float.mli", 311, 10166, 10182), 0), 0, Tag1 ("Base__Float", 82)), 0); (("scale", 2326), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -172), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -171), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -170), 0), 100000000, 0, -169), 0), 100000000, 0, -168), 0, (("src/float.mli", 312, 10183, 10183), ("src/float.mli", 312, 10183, 10206), 0), 0, Tag1 ("Base__Float", 83)), 0); (("abs", 2327), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -167), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -166), 0), 100000000, 0, -165), 0, (("src/float.mli", 313, 10207, 10207), ("src/float.mli", 313, 10207, 10223), 0), 0, Tag1 ("Base__Float", 84)), 0); Tag3 (("O", 2328), 0, (Tag1 ([(("+", 2374), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -601), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -600), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -599), 0), 100000000, 0, -598), 0), 100000000, 0, -597), 0, (("src/float.mli", 318, 10329, 10331), ("src/float.mli", 318, 10329, 10354), 0), 0, Tag1 ("Base__Float", 85)), 0); (("-", 2375), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -596), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -595), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -594), 0), 100000000, 0, -593), 0), 100000000, 0, -592), 0, (("src/float.mli", 319, 10355, 10357), ("src/float.mli", 319, 10355, 10380), 0), 0, Tag1 ("Base__Float", 86)), 0); (("*", 2376), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -591), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -590), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -589), 0), 100000000, 0, -588), 0), 100000000, 0, -587), 0, (("src/float.mli", 320, 10381, 10383), ("src/float.mli", 320, 10381, 10406), 0), 0, Tag1 ("Base__Float", 87)), 0); (("/", 2377), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -586), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -585), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -584), 0), 100000000, 0, -583), 0), 100000000, 0, -582), 0, (("src/float.mli", 321, 10407, 10409), ("src/float.mli", 321, 10407, 10432), 0), 0, Tag1 ("Base__Float", 88)), 0); (("%", 2378), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -581), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -580), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -579), 0), 100000000, 0, -578), 0), 100000000, 0, -577), 0, (("src/float.mli", 322, 10433, 10435), ("src/float.mli", 322, 10433, 10458), 0), 0, Tag1 ("Base__Float", 89)), 0); (("**", 2379), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -576), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -575), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -574), 0), 100000000, 0, -573), 0), 100000000, 0, -572), 0, (("src/float.mli", 323, 10459, 10461), ("src/float.mli", 323, 10459, 10485), 0), 0, Tag1 ("Base__Float", 90)), 0); (("~-", 2380), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -571), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -570), 0), 100000000, 0, -569), 0, (("src/float.mli", 324, 10486, 10488), ("src/float.mli", 324, 10486, 10507), 0), 0, Tag1 ("Base__Float", 91)), 0); ((">=", 2381), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -568), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -567), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -566), 0), 100000000, 0, -565), 0), 100000000, 0, -564), 0, (("src/float.mli", 326, 10509, 10519), ("src/float.mli", 326, 10509, 10553), 0), 0, Tag1 ("Base__Comparisons", 1)), 0); (("<=", 2382), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -563), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -562), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -561), 0), 100000000, 0, -560), 0), 100000000, 0, -559), 0, (("src/float.mli", 326, 10509, 10519), ("src/float.mli", 326, 10509, 10553), 0), 0, Tag1 ("Base__Comparisons", 2)), 0); (("=", 2383), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -558), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -557), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -556), 0), 100000000, 0, -555), 0), 100000000, 0, -554), 0, (("src/float.mli", 326, 10509, 10519), ("src/float.mli", 326, 10509, 10553), 0), 0, Tag1 ("Base__Comparisons", 3)), 0); ((">", 2384), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -553), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -552), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -551), 0), 100000000, 0, -550), 0), 100000000, 0, -549), 0, (("src/float.mli", 326, 10509, 10519), ("src/float.mli", 326, 10509, 10553), 0), 0, Tag1 ("Base__Comparisons", 4)), 0); (("<", 2385), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -548), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -547), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -546), 0), 100000000, 0, -545), 0), 100000000, 0, -544), 0, (("src/float.mli", 326, 10509, 10519), ("src/float.mli", 326, 10509, 10553), 0), 0, Tag1 ("Base__Comparisons", 5)), 0); (("<>", 2386), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -543), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -542), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -541), 0), 100000000, 0, -540), 0), 100000000, 0, -539), 0, (("src/float.mli", 326, 10509, 10519), ("src/float.mli", 326, 10509, 10553), 0), 0, Tag1 ("Base__Comparisons", 6)), 0); (("abs", 2387), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -538), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -537), 0), 100000000, 0, -536), 0, (("src/float.mli", 328, 10555, 10557), ("src/float.mli", 328, 10555, 10573), 0), 0, Tag1 ("Base__Float", 93)), 0); (("neg", 2388), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -535), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -534), 0), 100000000, 0, -533), 0, (("src/float.mli", 329, 10574, 10576), ("src/float.mli", 329, 10574, 10592), 0), 0, Tag1 ("Base__Float", 94)), 0); (("zero", 2389), ((Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -532), 0, (("src/float.mli", 330, 10593, 10595), ("src/float.mli", 330, 10593, 10607), 0), 0, Tag1 ("Base__Float", 95)), 0); (("of_int", 2390), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -531), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -530), 0), 100000000, 0, -529), 0, (("src/float.mli", 331, 10608, 10610), ("src/float.mli", 331, 10608, 10631), 0), 0, Tag1 ("Base__Float", 96)), 0); (("of_float", 2391), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -528), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -527), 0), 100000000, 0, -526), 0, (("src/float.mli", 332, 10632, 10634), ("src/float.mli", 332, 10632, 10659), 0), 0, Tag1 ("Base__Float", 97)), 0)]), 0, (("src/float.mli", 317, 10314, 10314), ("src/float.mli", 333, 10660, 10663), 0), Tag1 ("Base__Float", 98)), 0, 0); Tag3 (("O_dot", 2329), 0, (Tag1 ([(("+.", 2392), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -634), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -633), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -632), 0), 100000000, 0, -631), 0), 100000000, 0, -630), 0, (("src/float.mli", 338, 10833, 10835), ("src/float.mli", 338, 10833, 10859), 0), 0, Tag1 ("Base__Float", 99)), 0); (("-.", 2393), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -629), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -628), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -627), 0), 100000000, 0, -626), 0), 100000000, 0, -625), 0, (("src/float.mli", 339, 10860, 10862), ("src/float.mli", 339, 10860, 10886), 0), 0, Tag1 ("Base__Float", 100)), 0); (("*.", 2394), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -624), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -623), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -622), 0), 100000000, 0, -621), 0), 100000000, 0, -620), 0, (("src/float.mli", 340, 10887, 10889), ("src/float.mli", 340, 10887, 10913), 0), 0, Tag1 ("Base__Float", 101)), 0); (("/.", 2395), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -619), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -618), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -617), 0), 100000000, 0, -616), 0), 100000000, 0, -615), 0, (("src/float.mli", 341, 10914, 10916), ("src/float.mli", 341, 10914, 10940), 0), 0, Tag1 ("Base__Float", 102)), 0); (("%.", 2396), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -614), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -613), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -612), 0), 100000000, 0, -611), 0), 100000000, 0, -610), 0, (("src/float.mli", 342, 10941, 10943), ("src/float.mli", 342, 10941, 10967), 0), 0, Tag1 ("Base__Float", 103)), 0); (("**.", 2397), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -609), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -608), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -607), 0), 100000000, 0, -606), 0), 100000000, 0, -605), 0, (("src/float.mli", 343, 10968, 10970), ("src/float.mli", 343, 10968, 10995), 0), 0, Tag1 ("Base__Float", 104)), 0); (("~-.", 2398), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -604), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -603), 0), 100000000, 0, -602), 0, (("src/float.mli", 344, 10996, 10998), ("src/float.mli", 344, 10996, 11018), 0), 0, Tag1 ("Base__Float", 105)), 0)]), 0, (("src/float.mli", 337, 10814, 10814), ("src/float.mli", 345, 11019, 11022), 0), Tag1 ("Base__Float", 106)), 0, 0); (("to_string", 2330), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -164), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -163), 0), 100000000, 0, -162), 0, (("src/float.mli", 354, 11473, 11473), ("src/float.mli", 354, 11473, 11500), 0), 0, Tag1 ("Base__Float", 107)), 0); (("to_string_hum", 2331), ((Tag1 (Tag1 ("delimiter"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -161)], (0)), 100000000, 0, -160), (Tag1 (Tag1 ("decimals"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -159)], (0)), 100000000, 0, -158), (Tag1 (Tag1 ("strip_zero"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -157)], (0)), 100000000, 0, -156), (Tag1 (Tag1 ("explicit_plus"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -155)], (0)), 100000000, 0, -154), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -153), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -152), 0), 100000000, 0, -151), 0), 100000000, 0, -150), 0), 100000000, 0, -149), 0), 100000000, 0, -148), 0), 100000000, 0, -147), 0, (("src/float.mli", 359, 11727, 11727), ("src/float.mli", 367, 11993, 12004), 0), 0, Tag1 ("Base__Float", 108)), 0); (("to_padded_compact_string", 2332), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -146), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -145), 0), 100000000, 0, -144), 0, (("src/float.mli", 419, 14290, 14290), ("src/float.mli", 419, 14290, 14332), 0), 0, Tag1 ("Base__Float", 109)), 0); (("to_padded_compact_string_custom", 2333), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -143), (Tag1 (Tag1 ("prefix"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -142)], (0)), 100000000, 0, -141), (Tag1 (("kilo"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -140), (Tag1 (("mega"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -139), (Tag1 (("giga"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -138), (Tag1 (("tera"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -137), (Tag1 (Tag1 ("peta"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -136)], (0)), 100000000, 0, -135), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -134), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -133), 0), 100000000, 0, -132), 0), 100000000, 0, -131), 0), 100000000, 0, -130), 0), 100000000, 0, -129), 0), 100000000, 0, -128), 0), 100000000, 0, -127), 0), 100000000, 0, -126), 0), 100000000, 0, -125), 0, (("src/float.mli", 425, 14531, 14531), ("src/float.mli", 434, 14690, 14701), 0), 0, Tag1 ("Base__Float", 110)), 0); (("int_pow", 2334), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -124), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -123), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -122), 0), 100000000, 0, -121), 0), 100000000, 0, -120), 0, (("src/float.mli", 457, 15766, 15766), ("src/float.mli", 457, 15766, 15793), 0), 0, Tag1 ("Base__Float", 111)), 0); (("square", 2335), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -119), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -118), 0), 100000000, 0, -117), 0, (("src/float.mli", 460, 15831, 15831), ("src/float.mli", 460, 15831, 15850), 0), 0, Tag1 ("Base__Float", 112)), 0); (("ldexp", 2336), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -116), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -115), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -114), 0), 100000000, 0, -113), 0), 100000000, 0, -112), 0, (("src/float.mli", 463, 15893, 15893), ("src/float.mli", 463, 15893, 15918), 0), 0, Tag1 ("Base__Float", 113)), 0); (("frexp", 2337), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -111), (Tag2 ([(Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -109); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -110)]), 100000000, 0, -108), 0), 100000000, 0, -107), 0, (("src/float.mli", 468, 16173, 16173), ("src/float.mli", 468, 16173, 16197), 0), 0, Tag1 ("Base__Float", 114)), 0); (("log10", 2338), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -106), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -105), 0), 100000000, 0, -104), (("caml_log10_float", 1, 0, "log10", [1], 1)), (("src/float.mli", 471, 16225, 16225), ("src/float.mli", 472, 16278, 16301), 0), [(("unboxed", (("src/float.mli", 472, 16278, 16281), ("src/float.mli", 472, 16278, 16288), 0)), (0), (("src/float.mli", 472, 16278, 16278), ("src/float.mli", 472, 16278, 16289), 0)); (("noalloc", (("src/float.mli", 472, 16278, 16293), ("src/float.mli", 472, 16278, 16300), 0)), (0), (("src/float.mli", 472, 16278, 16290), ("src/float.mli", 472, 16278, 16301), 0))], Tag1 ("Base__Float", 115)), 0); (("expm1", 2339), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -103), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -102), 0), 100000000, 0, -101), (("caml_expm1_float", 1, 0, "caml_expm1", [1], 1)), (("src/float.mli", 476, 16416, 16416), ("src/float.mli", 477, 16474, 16497), 0), [(("unboxed", (("src/float.mli", 477, 16474, 16477), ("src/float.mli", 477, 16474, 16484), 0)), (0), (("src/float.mli", 477, 16474, 16474), ("src/float.mli", 477, 16474, 16485), 0)); (("noalloc", (("src/float.mli", 477, 16474, 16489), ("src/float.mli", 477, 16474, 16496), 0)), (0), (("src/float.mli", 477, 16474, 16486), ("src/float.mli", 477, 16474, 16497), 0))], Tag1 ("Base__Float", 116)), 0); (("log1p", 2340), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -100), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -99), 0), 100000000, 0, -98), (("caml_log1p_float", 1, 0, "caml_log1p", [1], 1)), (("src/float.mli", 481, 16633, 16633), ("src/float.mli", 482, 16691, 16714), 0), [(("unboxed", (("src/float.mli", 482, 16691, 16694), ("src/float.mli", 482, 16691, 16701), 0)), (0), (("src/float.mli", 482, 16691, 16691), ("src/float.mli", 482, 16691, 16702), 0)); (("noalloc", (("src/float.mli", 482, 16691, 16706), ("src/float.mli", 482, 16691, 16713), 0)), (0), (("src/float.mli", 482, 16691, 16703), ("src/float.mli", 482, 16691, 16714), 0))], Tag1 ("Base__Float", 117)), 0); (("copysign", 2341), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -97), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -96), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -95), 0), 100000000, 0, -94), 0), 100000000, 0, -93), (("caml_copysign_float", 2, 0, "caml_copysign", [1; 1], 1)), (("src/float.mli", 487, 16941, 16941), ("src/float.mli", 488, 17013, 17036), 0), [(("unboxed", (("src/float.mli", 488, 17013, 17016), ("src/float.mli", 488, 17013, 17023), 0)), (0), (("src/float.mli", 488, 17013, 17013), ("src/float.mli", 488, 17013, 17024), 0)); (("noalloc", (("src/float.mli", 488, 17013, 17028), ("src/float.mli", 488, 17013, 17035), 0)), (0), (("src/float.mli", 488, 17013, 17025), ("src/float.mli", 488, 17013, 17036), 0))], Tag1 ("Base__Float", 118)), 0); (("cos", 2342), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -92), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -91), 0), 100000000, 0, -90), (("caml_cos_float", 1, 0, "cos", [1], 1)), (("src/float.mli", 491, 17078, 17078), ("src/float.mli", 492, 17125, 17148), 0), [(("unboxed", (("src/float.mli", 492, 17125, 17128), ("src/float.mli", 492, 17125, 17135), 0)), (0), (("src/float.mli", 492, 17125, 17125), ("src/float.mli", 492, 17125, 17136), 0)); (("noalloc", (("src/float.mli", 492, 17125, 17140), ("src/float.mli", 492, 17125, 17147), 0)), (0), (("src/float.mli", 492, 17125, 17137), ("src/float.mli", 492, 17125, 17148), 0))], Tag1 ("Base__Float", 119)), 0); (("sin", 2343), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -89), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -88), 0), 100000000, 0, -87), (("caml_sin_float", 1, 0, "sin", [1], 1)), (("src/float.mli", 495, 17188, 17188), ("src/float.mli", 496, 17235, 17258), 0), [(("unboxed", (("src/float.mli", 496, 17235, 17238), ("src/float.mli", 496, 17235, 17245), 0)), (0), (("src/float.mli", 496, 17235, 17235), ("src/float.mli", 496, 17235, 17246), 0)); (("noalloc", (("src/float.mli", 496, 17235, 17250), ("src/float.mli", 496, 17235, 17257), 0)), (0), (("src/float.mli", 496, 17235, 17247), ("src/float.mli", 496, 17235, 17258), 0))], Tag1 ("Base__Float", 120)), 0); (("tan", 2344), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -86), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -85), 0), 100000000, 0, -84), (("caml_tan_float", 1, 0, "tan", [1], 1)), (("src/float.mli", 499, 17301, 17301), ("src/float.mli", 500, 17348, 17371), 0), [(("unboxed", (("src/float.mli", 500, 17348, 17351), ("src/float.mli", 500, 17348, 17358), 0)), (0), (("src/float.mli", 500, 17348, 17348), ("src/float.mli", 500, 17348, 17359), 0)); (("noalloc", (("src/float.mli", 500, 17348, 17363), ("src/float.mli", 500, 17348, 17370), 0)), (0), (("src/float.mli", 500, 17348, 17360), ("src/float.mli", 500, 17348, 17371), 0))], Tag1 ("Base__Float", 121)), 0); (("acos", 2345), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -83), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -82), 0), 100000000, 0, -81), (("caml_acos_float", 1, 0, "acos", [1], 1)), (("src/float.mli", 504, 17505, 17505), ("src/float.mli", 505, 17555, 17578), 0), [(("unboxed", (("src/float.mli", 505, 17555, 17558), ("src/float.mli", 505, 17555, 17565), 0)), (0), (("src/float.mli", 505, 17555, 17555), ("src/float.mli", 505, 17555, 17566), 0)); (("noalloc", (("src/float.mli", 505, 17555, 17570), ("src/float.mli", 505, 17555, 17577), 0)), (0), (("src/float.mli", 505, 17555, 17567), ("src/float.mli", 505, 17555, 17578), 0))], Tag1 ("Base__Float", 122)), 0); (("asin", 2346), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -80), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -79), 0), 100000000, 0, -78), (("caml_asin_float", 1, 0, "asin", [1], 1)), (("src/float.mli", 509, 17714, 17714), ("src/float.mli", 510, 17764, 17787), 0), [(("unboxed", (("src/float.mli", 510, 17764, 17767), ("src/float.mli", 510, 17764, 17774), 0)), (0), (("src/float.mli", 510, 17764, 17764), ("src/float.mli", 510, 17764, 17775), 0)); (("noalloc", (("src/float.mli", 510, 17764, 17779), ("src/float.mli", 510, 17764, 17786), 0)), (0), (("src/float.mli", 510, 17764, 17776), ("src/float.mli", 510, 17764, 17787), 0))], Tag1 ("Base__Float", 123)), 0); (("atan", 2347), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -77), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -76), 0), 100000000, 0, -75), (("caml_atan_float", 1, 0, "atan", [1], 1)), (("src/float.mli", 513, 17866, 17866), ("src/float.mli", 514, 17916, 17939), 0), [(("unboxed", (("src/float.mli", 514, 17916, 17919), ("src/float.mli", 514, 17916, 17926), 0)), (0), (("src/float.mli", 514, 17916, 17916), ("src/float.mli", 514, 17916, 17927), 0)); (("noalloc", (("src/float.mli", 514, 17916, 17931), ("src/float.mli", 514, 17916, 17938), 0)), (0), (("src/float.mli", 514, 17916, 17928), ("src/float.mli", 514, 17916, 17939), 0))], Tag1 ("Base__Float", 124)), 0); (("atan2", 2348), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -74), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -73), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -72), 0), 100000000, 0, -71), 0), 100000000, 0, -70), (("caml_atan2_float", 2, 0, "atan2", [1; 1], 1)), (("src/float.mli", 519, 18134, 18134), ("src/float.mli", 520, 18192, 18215), 0), [(("unboxed", (("src/float.mli", 520, 18192, 18195), ("src/float.mli", 520, 18192, 18202), 0)), (0), (("src/float.mli", 520, 18192, 18192), ("src/float.mli", 520, 18192, 18203), 0)); (("noalloc", (("src/float.mli", 520, 18192, 18207), ("src/float.mli", 520, 18192, 18214), 0)), (0), (("src/float.mli", 520, 18192, 18204), ("src/float.mli", 520, 18192, 18215), 0))], Tag1 ("Base__Float", 125)), 0); (("hypot", 2349), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -69), (Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -68), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -67), 0), 100000000, 0, -66), 0), 100000000, 0, -65), (("caml_hypot_float", 2, 0, "caml_hypot", [1; 1], 1)), (("src/float.mli", 525, 18439, 18439), ("src/float.mli", 526, 18502, 18525), 0), [(("unboxed", (("src/float.mli", 526, 18502, 18505), ("src/float.mli", 526, 18502, 18512), 0)), (0), (("src/float.mli", 526, 18502, 18502), ("src/float.mli", 526, 18502, 18513), 0)); (("noalloc", (("src/float.mli", 526, 18502, 18517), ("src/float.mli", 526, 18502, 18524), 0)), (0), (("src/float.mli", 526, 18502, 18514), ("src/float.mli", 526, 18502, 18525), 0))], Tag1 ("Base__Float", 126)), 0); (("cosh", 2350), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -64), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -63), 0), 100000000, 0, -62), (("caml_cosh_float", 1, 0, "cosh", [1], 1)), (("src/float.mli", 529, 18578, 18578), ("src/float.mli", 530, 18628, 18651), 0), [(("unboxed", (("src/float.mli", 530, 18628, 18631), ("src/float.mli", 530, 18628, 18638), 0)), (0), (("src/float.mli", 530, 18628, 18628), ("src/float.mli", 530, 18628, 18639), 0)); (("noalloc", (("src/float.mli", 530, 18628, 18643), ("src/float.mli", 530, 18628, 18650), 0)), (0), (("src/float.mli", 530, 18628, 18640), ("src/float.mli", 530, 18628, 18651), 0))], Tag1 ("Base__Float", 127)), 0); (("sinh", 2351), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -61), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -60), 0), 100000000, 0, -59), (("caml_sinh_float", 1, 0, "sinh", [1], 1)), (("src/float.mli", 533, 18702, 18702), ("src/float.mli", 534, 18752, 18775), 0), [(("unboxed", (("src/float.mli", 534, 18752, 18755), ("src/float.mli", 534, 18752, 18762), 0)), (0), (("src/float.mli", 534, 18752, 18752), ("src/float.mli", 534, 18752, 18763), 0)); (("noalloc", (("src/float.mli", 534, 18752, 18767), ("src/float.mli", 534, 18752, 18774), 0)), (0), (("src/float.mli", 534, 18752, 18764), ("src/float.mli", 534, 18752, 18775), 0))], Tag1 ("Base__Float", 128)), 0); (("tanh", 2352), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -58), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -57), 0), 100000000, 0, -56), (("caml_tanh_float", 1, 0, "tanh", [1], 1)), (("src/float.mli", 537, 18829, 18829), ("src/float.mli", 538, 18879, 18902), 0), [(("unboxed", (("src/float.mli", 538, 18879, 18882), ("src/float.mli", 538, 18879, 18889), 0)), (0), (("src/float.mli", 538, 18879, 18879), ("src/float.mli", 538, 18879, 18890), 0)); (("noalloc", (("src/float.mli", 538, 18879, 18894), ("src/float.mli", 538, 18879, 18901), 0)), (0), (("src/float.mli", 538, 18879, 18891), ("src/float.mli", 538, 18879, 18902), 0))], Tag1 ("Base__Float", 129)), 0); (("acosh", 2353), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -55), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -54), 0), 100000000, 0, -53), (("caml_acosh_float", 1, 0, "caml_acosh", [1], 1)), (("src/float.mli", 544, 19050, 19050), ("src/float.mli", 545, 19116, 19139), 0), [(("unboxed", (("src/float.mli", 545, 19116, 19119), ("src/float.mli", 545, 19116, 19126), 0)), (0), (("src/float.mli", 545, 19116, 19116), ("src/float.mli", 545, 19116, 19127), 0)); (("noalloc", (("src/float.mli", 545, 19116, 19131), ("src/float.mli", 545, 19116, 19138), 0)), (0), (("src/float.mli", 545, 19116, 19128), ("src/float.mli", 545, 19116, 19139), 0))], Tag1 ("Base__Float", 130)), 0); (("asinh", 2354), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -52), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -51), 0), 100000000, 0, -50), (("caml_asinh_float", 1, 0, "caml_asinh", [1], 1)), (("src/float.mli", 551, 19257, 19257), ("src/float.mli", 552, 19323, 19346), 0), [(("unboxed", (("src/float.mli", 552, 19323, 19326), ("src/float.mli", 552, 19323, 19333), 0)), (0), (("src/float.mli", 552, 19323, 19323), ("src/float.mli", 552, 19323, 19334), 0)); (("noalloc", (("src/float.mli", 552, 19323, 19338), ("src/float.mli", 552, 19323, 19345), 0)), (0), (("src/float.mli", 552, 19323, 19335), ("src/float.mli", 552, 19323, 19346), 0))], Tag1 ("Base__Float", 131)), 0); (("atanh", 2355), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -49), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -48), 0), 100000000, 0, -47), (("caml_atanh_float", 1, 0, "caml_atanh", [1], 1)), (("src/float.mli", 558, 19502, 19502), ("src/float.mli", 559, 19568, 19591), 0), [(("unboxed", (("src/float.mli", 559, 19568, 19571), ("src/float.mli", 559, 19568, 19578), 0)), (0), (("src/float.mli", 559, 19568, 19568), ("src/float.mli", 559, 19568, 19579), 0)); (("noalloc", (("src/float.mli", 559, 19568, 19583), ("src/float.mli", 559, 19568, 19590), 0)), (0), (("src/float.mli", 559, 19568, 19580), ("src/float.mli", 559, 19568, 19591), 0))], Tag1 ("Base__Float", 132)), 0); (("sqrt", 2356), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -46), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -45), 0), 100000000, 0, -44), (("caml_sqrt_float", 1, 0, "sqrt", [1], 1)), (("src/float.mli", 562, 19613, 19613), ("src/float.mli", 563, 19663, 19686), 0), [(("unboxed", (("src/float.mli", 563, 19663, 19666), ("src/float.mli", 563, 19663, 19673), 0)), (0), (("src/float.mli", 563, 19663, 19663), ("src/float.mli", 563, 19663, 19674), 0)); (("noalloc", (("src/float.mli", 563, 19663, 19678), ("src/float.mli", 563, 19663, 19685), 0)), (0), (("src/float.mli", 563, 19663, 19675), ("src/float.mli", 563, 19663, 19686), 0))], Tag1 ("Base__Float", 133)), 0); (("exp", 2357), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -43), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -42), 0), 100000000, 0, -41), (("caml_exp_float", 1, 0, "exp", [1], 1)), (("src/float.mli", 566, 19708, 19708), ("src/float.mli", 566, 19708, 19778), 0), [(("unboxed", (("src/float.mli", 566, 19708, 19758), ("src/float.mli", 566, 19708, 19765), 0)), (0), (("src/float.mli", 566, 19708, 19755), ("src/float.mli", 566, 19708, 19766), 0)); (("noalloc", (("src/float.mli", 566, 19708, 19770), ("src/float.mli", 566, 19708, 19777), 0)), (0), (("src/float.mli", 566, 19708, 19767), ("src/float.mli", 566, 19708, 19778), 0))], Tag1 ("Base__Float", 134)), 0); (("log", 2358), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -40), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -39), 0), 100000000, 0, -38), (("caml_log_float", 1, 0, "log", [1], 1)), (("src/float.mli", 569, 19806, 19806), ("src/float.mli", 570, 19853, 19876), 0), [(("unboxed", (("src/float.mli", 570, 19853, 19856), ("src/float.mli", 570, 19853, 19863), 0)), (0), (("src/float.mli", 570, 19853, 19853), ("src/float.mli", 570, 19853, 19864), 0)); (("noalloc", (("src/float.mli", 570, 19853, 19868), ("src/float.mli", 570, 19853, 19875), 0)), (0), (("src/float.mli", 570, 19853, 19865), ("src/float.mli", 570, 19853, 19876), 0))], Tag1 ("Base__Float", 135)), 0); Tag3 (("Class", 2359), 0, (Tag1 ([Tag1 (("t", 2399), (0, 0, Tag1 ([(("Infinite", 1353), (0), 0, (("src/float.mli", 585, 20388, 20392), ("src/float.mli", 585, 20388, 20402), 0), 0, Tag1 ("Base__Float", 137)); (("Nan", 1354), (0), 0, (("src/float.mli", 586, 20403, 20407), ("src/float.mli", 586, 20403, 20412), 0), 0, Tag1 ("Base__Float", 138)); (("Normal", 1355), (0), 0, (("src/float.mli", 587, 20413, 20417), ("src/float.mli", 587, 20413, 20425), 0), 0, Tag1 ("Base__Float", 139)); (("Subnormal", 1356), (0), 0, (("src/float.mli", 588, 20426, 20430), ("src/float.mli", 588, 20426, 20441), 0), 0, Tag1 ("Base__Float", 140)); (("Zero", 1357), (0), 0, (("src/float.mli", 589, 20442, 20446), ("src/float.mli", 589, 20442, 20452), 0), 0, Tag1 ("Base__Float", 141))], 0), 1, 0, 0, 0, 0, 0, (("src/float.mli", 584, 20377, 20379), ("src/float.mli", 590, 20453, 20513), 0), [(("deriving_inline", (("src/float.mli", 590, 20453, 20458), ("src/float.mli", 590, 20453, 20473), 0)), ([([(Tag8 ([(((("compare"), (("src/float.mli", 590, 20453, 20474), ("src/float.mli", 590, 20453, 20481), 0))), (("src/float.mli", 590, 20453, 20474), ("src/float.mli", 590, 20453, 20481), 0), 0, 0); (((("enumerate"), (("src/float.mli", 590, 20453, 20483), ("src/float.mli", 590, 20453, 20492), 0))), (("src/float.mli", 590, 20453, 20483), ("src/float.mli", 590, 20453, 20492), 0), 0, 0); (((("sexp"), (("src/float.mli", 590, 20453, 20494), ("src/float.mli", 590, 20453, 20498), 0))), (("src/float.mli", 590, 20453, 20494), ("src/float.mli", 590, 20453, 20498), 0), 0, 0); (((("sexp_grammar"), (("src/float.mli", 590, 20453, 20500), ("src/float.mli", 590, 20453, 20512), 0))), (("src/float.mli", 590, 20453, 20500), ("src/float.mli", 590, 20453, 20512), 0), 0, 0)]), (("src/float.mli", 590, 20453, 20474), ("src/float.mli", 590, 20453, 20512), 0), 0, 0)], (("src/float.mli", 590, 20453, 20474), ("src/float.mli", 590, 20453, 20512), 0))]), (("src/float.mli", 590, 20453, 20455), ("src/float.mli", 590, 20453, 20513), 0))], 1, 0, Tag1 ("Base__Float", 136)), 1, 0); (("compare", 2400), ((Tag3 (Tag1 ((Tag2 ("Base__Ppx_compare_lib")), "compare"), [(Tag3 ((("t", 2399)), 0, (0)), 100000000, 0, -652)], (0)), 100000000, 0, -651), 0, (("src/float.mli", 592, 20515, 20525), ("src/float.mli", 592, 20515, 20570), 0), 0, Tag1 ("Base__Ppx_compare_lib", 5)), 0); (("all", 2401), ((Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 2399)), 0, (0)), 100000000, 0, -650)], (0)), 100000000, 0, -649), 0, (("src/float.mli", 593, 20571, 20581), ("src/float.mli", 593, 20571, 20628), 0), 0, Tag1 ("Base__Ppx_enumerate_lib", 2)), 0); (("t_of_sexp", 2402), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -648), (Tag3 ((("t", 2399)), 0, (0)), 100000000, 0, -647), 0), 100000000, 0, -646), 0, (("src/float.mli", 594, 20629, 20639), ("src/float.mli", 594, 20629, 20675), 0), 0, Tag1 ("Sexplib0__Sexpable", 1)), 0); (("sexp_of_t", 2403), ((Tag1 (0, (Tag3 ((("t", 2399)), 0, (0)), 100000000, 0, -645), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -644), 0), 100000000, 0, -643), 0, (("src/float.mli", 594, 20629, 20639), ("src/float.mli", 594, 20629, 20675), 0), 0, Tag1 ("Sexplib0__Sexpable", 2)), 0); (("t_sexp_grammar", 2404), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("t", 2399)), 0, (0)), 100000000, 0, -642)], (0)), 100000000, 0, -641), 0, (("src/float.mli", 596, 20677, 20679), ("src/float.mli", 596, 20677, 20725), 0), 0, Tag1 ("Base__Float", 145)), 0); (("of_string", 2405), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -640), (Tag3 ((("t", 2399)), 0, (0)), 100000000, 0, -639), 0), 100000000, 0, -638), 0, (("src/float.mli", 600, 20739, 20749), ("src/float.mli", 600, 20739, 20778), 0), 0, Tag1 ("Base__Stringable", 1)), 0); (("to_string", 2406), ((Tag1 (0, (Tag3 ((("t", 2399)), 0, (0)), 100000000, 0, -637), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -636), 0), 100000000, 0, -635), 0, (("src/float.mli", 600, 20739, 20749), ("src/float.mli", 600, 20739, 20778), 0), 0, Tag1 ("Base__Stringable", 2)), 0)]), 0, (("src/float.mli", 583, 20358, 20358), ("src/float.mli", 601, 20779, 20782), 0), Tag1 ("Base__Float", 147)), 0, 0); (("classify", 2360), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -37), (Tag3 (Tag1 ((("Class", 2359)), "t"), 0, (0)), 100000000, 0, -36), 0), 100000000, 0, -35), 0, (("src/float.mli", 603, 20784, 20784), ("src/float.mli", 603, 20784, 20811), 0), 0, Tag1 ("Base__Float", 148)), 0); (("sign", 2361), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -34), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sign"), "t"), 0, (0)), 100000000, 0, -33), 0), 100000000, 0, -32), 0, (("src/float.mli", 608, 20918, 20918), ("src/float.mli", 609, 20941, 21021), 0), [(("deprecated", (("src/float.mli", 609, 20941, 20944), ("src/float.mli", 609, 20941, 20954), 0)), ([([(Tag1 (Tag2 ("[since 2016-01] Replace [sign] with [robust_sign] or [sign_exn]", (("src/float.mli", 609, 20941, 20956), ("src/float.mli", 609, 20941, 21019), 0), 0)), (("src/float.mli", 609, 20941, 20955), ("src/float.mli", 609, 20941, 21020), 0), 0, 0)], (("src/float.mli", 609, 20941, 20955), ("src/float.mli", 609, 20941, 21020), 0))]), (("src/float.mli", 609, 20941, 20941), ("src/float.mli", 609, 20941, 21021), 0))], Tag1 ("Base__Float", 149)), 0); (("sign_exn", 2362), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -31), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sign"), "t"), 0, (0)), 100000000, 0, -30), 0), 100000000, 0, -29), 0, (("src/float.mli", 613, 21148, 21148), ("src/float.mli", 613, 21148, 21174), 0), 0, Tag1 ("Base__Float", 150)), 0); (("sign_or_nan", 2363), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -28), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sign_or_nan"), "t"), 0, (0)), 100000000, 0, -27), 0), 100000000, 0, -26), 0, (("src/float.mli", 617, 21335, 21335), ("src/float.mli", 617, 21335, 21371), 0), 0, Tag1 ("Base__Float", 151)), 0); (("create_ieee", 2364), ((Tag1 (("negative"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -25), (Tag1 (("exponent"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -24), (Tag1 (("mantissa"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Int63"), "t"), 0, (0)), 100000000, 0, -23), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Or_error"), "t"), [(Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -22)], (0)), 100000000, 0, -21), 0), 100000000, 0, -20), 0), 100000000, 0, -19), 0), 100000000, 0, -18), 0, (("src/float.mli", 631, 21915, 21915), ("src/float.mli", 631, 21915, 21998), 0), 0, Tag1 ("Base__Float", 152)), 0); (("create_ieee_exn", 2365), ((Tag1 (("negative"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -17), (Tag1 (("exponent"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -16), (Tag1 (("mantissa"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Int63"), "t"), 0, (0)), 100000000, 0, -15), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -14), 0), 100000000, 0, -13), 0), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("src/float.mli", 633, 22000, 22000), ("src/float.mli", 633, 22000, 22076), 0), 0, Tag1 ("Base__Float", 153)), 0); (("ieee_negative", 2366), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -10), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("src/float.mli", 634, 22077, 22077), ("src/float.mli", 634, 22077, 22106), 0), 0, Tag1 ("Base__Float", 154)), 0); (("ieee_exponent", 2367), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -7), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("src/float.mli", 635, 22107, 22107), ("src/float.mli", 635, 22107, 22135), 0), 0, Tag1 ("Base__Float", 155)), 0); (("ieee_mantissa", 2368), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -4), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Int63"), "t"), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/float.mli", 636, 22136, 22136), ("src/float.mli", 636, 22136, 22168), 0), 0, Tag1 ("Base__Float", 156)), 0); Tag3 (("Terse", 2369), 0, (Tag1 ([Tag1 (("t", 2407), (0, 0, 0, 1, ((Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -667)), 0, 0, 0, 0, (("src/float.mli", 640, 22248, 22250), ("src/float.mli", 640, 22248, 22306), 0), [(("deriving_inline", (("src/float.mli", 640, 22248, 22271), ("src/float.mli", 640, 22248, 22286), 0)), ([([(Tag8 ([(((("sexp"), (("src/float.mli", 640, 22248, 22287), ("src/float.mli", 640, 22248, 22291), 0))), (("src/float.mli", 640, 22248, 22287), ("src/float.mli", 640, 22248, 22291), 0), 0, 0); (((("sexp_grammar"), (("src/float.mli", 640, 22248, 22293), ("src/float.mli", 640, 22248, 22305), 0))), (("src/float.mli", 640, 22248, 22293), ("src/float.mli", 640, 22248, 22305), 0), 0, 0)]), (("src/float.mli", 640, 22248, 22287), ("src/float.mli", 640, 22248, 22305), 0), 0, 0)], (("src/float.mli", 640, 22248, 22287), ("src/float.mli", 640, 22248, 22305), 0))]), (("src/float.mli", 640, 22248, 22268), ("src/float.mli", 640, 22248, 22306), 0))], 0, 0, Tag1 ("Base__Float", 157)), 0, 0); (("t_of_sexp", 2408), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -666), (Tag3 ((("t", 2407)), 0, (0)), 100000000, 0, -665), 0), 100000000, 0, -664), 0, (("src/float.mli", 642, 22308, 22318), ("src/float.mli", 642, 22308, 22354), 0), 0, Tag1 ("Sexplib0__Sexpable", 1)), 0); (("sexp_of_t", 2409), ((Tag1 (0, (Tag3 ((("t", 2407)), 0, (0)), 100000000, 0, -663), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -662), 0), 100000000, 0, -661), 0, (("src/float.mli", 642, 22308, 22318), ("src/float.mli", 642, 22308, 22354), 0), 0, Tag1 ("Sexplib0__Sexpable", 2)), 0); (("t_sexp_grammar", 2410), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp_grammar"), "t"), [(Tag3 ((("t", 2407)), 0, (0)), 100000000, 0, -660)], (0)), 100000000, 0, -659), 0, (("src/float.mli", 644, 22356, 22358), ("src/float.mli", 644, 22356, 22404), 0), 0, Tag1 ("Base__Float", 159)), 0); (("of_string", 2411), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -658), (Tag3 ((("t", 2407)), 0, (0)), 100000000, 0, -657), 0), 100000000, 0, -656), 0, (("src/float.mli", 648, 22418, 22428), ("src/float.mli", 648, 22418, 22457), 0), 0, Tag1 ("Base__Stringable", 1)), 0); (("to_string", 2412), ((Tag1 (0, (Tag3 ((("t", 2407)), 0, (0)), 100000000, 0, -655), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -654), 0), 100000000, 0, -653), 0, (("src/float.mli", 648, 22418, 22428), ("src/float.mli", 648, 22418, 22457), 0), 0, Tag1 ("Base__Stringable", 2)), 0)]), 0, (("src/float.mli", 639, 22229, 22229), ("src/float.mli", 649, 22458, 22461), 0), Tag1 ("Base__Float", 161)), 0, 0); Tag3 (("Private", 2370), 0, (Tag1 ([(("box", 2413), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -696), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -695), 0), 100000000, 0, -694), 0, (("src/float.mli", 657, 22643, 22645), ("src/float.mli", 657, 22643, 22661), 0), 0, Tag1 ("Base__Float", 162)), 0); (("clamp_unchecked", 2414), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -693), (Tag1 (("min"), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -692), (Tag1 (("max"), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -691), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -690), 0), 100000000, 0, -689), 0), 100000000, 0, -688), 0), 100000000, 0, -687), 0, (("src/float.mli", 658, 22662, 22664), ("src/float.mli", 658, 22662, 22710), 0), 0, Tag1 ("Base__Float", 163)), 0); (("lower_bound_for_int", 2415), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -686), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -685), 0), 100000000, 0, -684), 0, (("src/float.mli", 659, 22711, 22713), ("src/float.mli", 659, 22711, 22747), 0), 0, Tag1 ("Base__Float", 164)), 0); (("upper_bound_for_int", 2416), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -683), (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -682), 0), 100000000, 0, -681), 0, (("src/float.mli", 660, 22748, 22750), ("src/float.mli", 660, 22748, 22784), 0), 0, Tag1 ("Base__Float", 165)), 0); (("specialized_hash", 2417), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -680), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -679), 0), 100000000, 0, -678), 0, (("src/float.mli", 661, 22785, 22787), ("src/float.mli", 661, 22785, 22818), 0), 0, Tag1 ("Base__Float", 166)), 0); (("one_ulp_less_than_half", 2418), ((Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -677), 0, (("src/float.mli", 662, 22819, 22821), ("src/float.mli", 662, 22819, 22851), 0), 0, Tag1 ("Base__Float", 167)), 0); (("int63_round_nearest_portable_alloc_exn", 2419), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -676), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Int63"), "t"), 0, (0)), 100000000, 0, -675), 0), 100000000, 0, -674), 0, (("src/float.mli", 663, 22852, 22854), ("src/float.mli", 663, 22852, 22911), 0), 0, Tag1 ("Base__Float", 168)), 0); (("int63_round_nearest_arch64_noalloc_exn", 2420), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -673), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Int63"), "t"), 0, (0)), 100000000, 0, -672), 0), 100000000, 0, -671), 0, (("src/float.mli", 664, 22912, 22914), ("src/float.mli", 664, 22912, 22971), 0), 0, Tag1 ("Base__Float", 169)), 0); (("iround_nearest_exn_64", 2421), ((Tag1 (0, (Tag3 ((("t", 2222)), 0, (0)), 100000000, 0, -670), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -669), 0), 100000000, 0, -668), 0, (("src/float.mli", 665, 22972, 22974), ("src/float.mli", 665, 22972, 23010), 0), 0, Tag1 ("Base__Float", 170)), 0)]), 0, (("src/float.mli", 656, 22622, 22622), ("src/float.mli", 666, 23011, 23014), 0), Tag1 ("Base__Float", 171)), 0, 0)], "Base__Float", [("Base__Float", ("tR$\252\165\134g\024>\127\254\245\212-\018\141")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__StringLabels", ("\134F\024\226\216Is#\223\230\234\169Z\206Gc")); ("Stdlib__StdLabels", (".\193\n\229\139\017\212C-ZA\\kz-\128")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Printf", ("\215<\139]\021\142\224E\245m\198qc(W\229")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__MoreLabels", ("\248\232\248\254`<\230\241\161U\193U\1466J\238")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__ListLabels", ("*\194\012\191\020%\170\249m\002\180\178hk\205\220")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shadow_stdlib", ("\219zi\164\203\158e)\232\221\196\168\138x\142\018")); ("Sexplib0__Sexpable", ("\251${\207(\249/z\242\255\250^\141\156\210e")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv_error", ("kzv!\151~\198P\000\165\176d\007\251p\232")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Base_internalhash_types", ("0\148#2\226\223\018\135\173>!\020\237\017\255\149")); ("Base__T", ("+t\159\169\027\152\205\235\003\237\133\177\024\n6'")); ("Base__Sys0", ("\206z\231\154s\\\136\2364\131\005\014\031\152m3")); ("Base__Stringable", ("\170\025\162\136\234\162\n\161\1491>\145\210@\237t")); ("Base__String0", ("\212\221L\220\245\255\162P\228\224\189\216\135H\149O")); ("Base__Source_code_position0", ("_\003P6\254\029\206\005\130\136\180\019\145\230\000M")); ("Base__Sign_or_nan", ("\2287\251,\197\017qf\179Y\025h\190\131W%")); ("Base__Sign0", ("\152\138\204\175\244\128J\165\221\165\160\150y\1305i")); ("Base__Sign", ("^\255.Q;\215fi\134\192\182\241Z\2425l")); ("Base__Sexp", ("\154\187\171&\209=\153[\236\250!U\174`\190T")); ("Base__Result", ("\204|\215\173FMa\2511<&\215T\194$\228")); ("Base__Random", (" \216\153fc\243\1430\155\211\169?\022\\\231\011")); ("Base__Printf", ("\000\196c,\214\127\226\174\220\190\253z!\242\028\250")); ("Base__Pretty_printer", ("\175\005\031\018\015a\159\220\154c'(a\239j\233")); ("Base__Ppx_hash_lib", ("\199\141\178\193\006\209L\007^\020(\131\224sn8")); ("Base__Ppx_enumerate_lib", ("G\171\178\012Em\142\235@\152fg\020\140~(")); ("Base__Ppx_compare_lib", ("\243\186~\233\228\199Ah\181.\223\004e\231\129S")); ("Base__Poly0", ("\230;\143\234\255.H\132KOe7\155\\\023f")); ("Base__Or_error", ("\193\133)\bO\210\2517\168*\203\148\143\200\127\177")); ("Base__Monad_intf", ("\208\203\163\152\184O\130?\012:\168\247}\018\253\155")); ("Base__Monad", ("!\244\168\2352=\137Lm\219\129K\216\199\145\\")); ("Base__Lazy", ("@`\165\196 \235)\136ANe:p\169$\185")); ("Base__Invariant_intf", ("\213\204\238\235\236[\198\145\028\2392\015\243\177S\249")); ("Base__Invariant", ("\135\153\136\\\129SD\228\202l\255\152\139\253\015\201")); ("Base__Intable", ("\028\249=Y\003]\231qd\238\172\004b\170\142\255")); ("Base__Int_intf", ("\238Q\2457\239\156\018\183J\015\240\178\193b\166@")); ("Base__Int64", ("\252B\186\239\245\155\209\227\136CIX@\189\003\029")); ("Base__Int63_emul", ("'\210s\232\177\204\254\024C\215\014\231\210\227n\235")); ("Base__Int63", ("\165\016\236\214m\014a\226A{\191\235@O\1695")); ("Base__Int32", ("\244*\172\133\227\025$@\180\027\024\132\195yO\027")); ("Base__Int0", ("N\1310\012\227\254\000\255_\222!\018\016\003\1779")); ("Base__Info_intf", ("\184\209'\173\251\219\167X|v\188]\190o5X")); ("Base__Info", ("-\011\149\203\248\030\2301\1907\1630\189\128\209\170")); ("Base__Import0", ("\156\129U\197Y[\\\153\017Ho\203\173\204\220\020")); ("Base__Import", ("\014\187\247\141\187\181\142g\176:s_,\181\219\209")); ("Base__Identifiable_intf", ("hK7}\187\129\022-r\233\241\192Q\161=j")); ("Base__Identifiable", ("L\020\162\189\228\217^\171\158H_\157\164c\130\242")); ("Base__Hashable_intf", ("\128\015G\244\135R\026\202\128F?)\193\004\195\181")); ("Base__Hashable", ("\027\187\158\245r}\018\193dbq\196\005\170g\252")); ("Base__Hash_intf", ("h\004P\218\1531G\127\212\208A\024\140\164iq")); ("Base__Hash", ("\206Rc\194\234{s3\248\165\024\162\203{\206\206")); ("Base__Globalize", ("<\243w~.\180\196t\159\193\174[\227\139\215G")); ("Base__Formatter", ("\193\149\030\140\154\1505b\162a`%\243\185'%")); ("Base__Floatable", ("\239\176\151\139\173ft(q\190\205\030C\170\197\177")); ("Base__Field", ("8In\234X\202\188G\186\208$\192\175\136\214v")); ("Base__Error", ("\199\218\231n\155/\159\156\146\247\148t\237\003\t\153")); ("Base__Either0", ("!9-\011n\2077eZ\212\031c\227\029\206\t")); ("Base__Comparisons", ("\196\196Y\"{\163~)\\G/\155:\004\141;")); ("Base__Comparator", ("\002\135z7b\025&\207\t\188\239&U3R\167")); ("Base__Comparable_intf", ("\252n\002\221\246\143r\235oJ\240\151\202\211\161\254")); ("Base__Comparable", (":\134'\156u#\215\225\129\191\162\229\200\185l\012")); ("Base__Bool0", ("\177f\254p\023\143&\239\020\136\206\242~\018F\251")); ("Base__Applicative_intf", ("J\176\203\159\235N(\235\027\232\198+\224\205*A")); ("Base__Applicative", ("\157\024\176\241a\165\204\133\003s3\214\007\131\244\n")); ("Base__", ("p\252\007\139\128\163W\025+\0225\001\246|P\158"))], [(0)])

  end

type formatter = Format.formatter
type geometry = Format.geometry = { max_indent : int; margin : int; }
type stag = Format.stag = ..
type formatter_out_functions =
  Format.formatter_out_functions = {
  out_string : string -> int -> int -> unit;
  out_flush : unit -> unit;
  out_newline : unit -> unit;
  out_spaces : int -> unit;
  out_indent : int -> unit;
}
type formatter_stag_functions =
  Format.formatter_stag_functions = {
  mark_open_stag : stag -> string;
  mark_close_stag : stag -> string;
  print_open_stag : stag -> unit;
  print_close_stag : stag -> unit;
}
type symbolic_output_item =
  Format.symbolic_output_item =
    Output_flush
  | Output_newline
  | Output_string of string
  | Output_spaces of int
  | Output_indent of int
type symbolic_output_buffer = Format.symbolic_output_buffer
val pp_print_bytes : formatter -> bytes -> unit
val print_bytes : bytes -> unit
val pp_print_either :
  left:(formatter -> 'a -> unit) ->
  right:(formatter -> 'b -> unit) -> formatter -> ('a, 'b) Either.t -> unit
val pp_print_seq :
  ?pp_sep:(formatter -> unit -> unit) ->
  (formatter -> 'a -> unit) -> formatter -> 'a Seq.t -> unit
val pp_update_geometry : formatter -> (geometry -> geometry) -> unit
val update_geometry : (geometry -> geometry) -> unit
val pp_print_custom_break :
  formatter ->
  fits:string * int * string -> breaks:string * int * string -> unit
val check_geometry : geometry -> bool
val pp_set_geometry : formatter -> max_indent:int -> margin:int -> unit
val set_geometry : max_indent:int -> margin:int -> unit
val pp_safe_set_geometry : formatter -> max_indent:int -> margin:int -> unit
val safe_set_geometry : max_indent:int -> margin:int -> unit
val pp_get_geometry : formatter -> unit -> geometry
val get_geometry : unit -> geometry
val pp_open_stag : formatter -> stag -> unit
val open_stag : stag -> unit
val pp_close_stag : formatter -> unit -> unit
val close_stag : unit -> unit
val pp_set_formatter_stag_functions :
  formatter -> formatter_stag_functions -> unit
val set_formatter_stag_functions : formatter_stag_functions -> unit
val pp_get_formatter_stag_functions :
  formatter -> unit -> formatter_stag_functions
val get_formatter_stag_functions : unit -> formatter_stag_functions
val pp_print_option :
  ?none:(formatter -> unit -> unit) ->
  (formatter -> 'a -> unit) -> formatter -> 'a option -> unit
val pp_print_result :
  ok:(formatter -> 'a -> unit) ->
  error:(formatter -> 'e -> unit) -> formatter -> ('a, 'e) result -> unit
val dprintf : ('a, formatter, unit, formatter -> unit) format4 -> 'a
val kdprintf :
  ((formatter -> unit) -> 'a) -> ('b, formatter, unit, 'a) format4 -> 'b
val formatter_of_out_functions : formatter_out_functions -> formatter
val make_symbolic_output_buffer : unit -> symbolic_output_buffer
val clear_symbolic_output_buffer : symbolic_output_buffer -> unit
val get_symbolic_output_buffer :
  symbolic_output_buffer -> symbolic_output_item list
val flush_symbolic_output_buffer :
  symbolic_output_buffer -> symbolic_output_item list
val add_symbolic_output_item :
  symbolic_output_buffer -> symbolic_output_item -> unit
val formatter_of_symbolic_output_buffer : symbolic_output_buffer -> formatter
val kasprintf : (string -> 'a) -> ('b, formatter, unit, 'a) format4 -> 'b
val pp_print_list :
  ?pp_sep:(formatter -> unit -> unit) ->
  (formatter -> 'a -> unit) -> formatter -> 'a list -> unit
val pp_print_text : formatter -> string -> unit
val pp_set_formatter_out_functions :
  formatter -> formatter_out_functions -> unit
val set_formatter_out_functions : formatter_out_functions -> unit
val pp_get_formatter_out_functions :
  formatter -> unit -> formatter_out_functions
val get_formatter_out_functions : unit -> formatter_out_functions
val asprintf : ('a, formatter, unit, string) format4 -> 'a
val ikfprintf :
  (formatter -> 'a) -> formatter -> ('b, formatter, unit, 'a) format4 -> 'b
val ifprintf : formatter -> ('a, formatter, unit) format -> 'a
val kfprintf :
  (formatter -> 'a) -> formatter -> ('b, formatter, unit, 'a) format4 -> 'b
val ksprintf : (string -> 'a) -> ('b, unit, string, 'a) format4 -> 'b
val pp_open_box : formatter -> int -> unit
val open_box : int -> unit
val pp_close_box : formatter -> unit -> unit
val close_box : unit -> unit
val pp_open_hbox : formatter -> unit -> unit
val open_hbox : unit -> unit
val pp_open_vbox : formatter -> int -> unit
val open_vbox : int -> unit
val pp_open_hvbox : formatter -> int -> unit
val open_hvbox : int -> unit
val pp_open_hovbox : formatter -> int -> unit
val open_hovbox : int -> unit
val pp_print_string : formatter -> string -> unit
val print_string : string -> unit
val pp_print_as : formatter -> int -> string -> unit
val print_as : int -> string -> unit
val pp_print_int : formatter -> int -> unit
val print_int : int -> unit
val pp_print_float : formatter -> float -> unit
val print_float : float -> unit
val pp_print_char : formatter -> char -> unit
val print_char : char -> unit
val pp_print_bool : formatter -> bool -> unit
val print_bool : bool -> unit
val pp_print_space : formatter -> unit -> unit
val print_space : unit -> unit
val pp_print_cut : formatter -> unit -> unit
val print_cut : unit -> unit
val pp_print_break : formatter -> int -> int -> unit
val print_break : int -> int -> unit
val pp_force_newline : formatter -> unit -> unit
val force_newline : unit -> unit
val pp_print_if_newline : formatter -> unit -> unit
val print_if_newline : unit -> unit
val pp_print_flush : formatter -> unit -> unit
val print_flush : unit -> unit
val pp_print_newline : formatter -> unit -> unit
val print_newline : unit -> unit
val pp_set_margin : formatter -> int -> unit
val set_margin : int -> unit
val pp_get_margin : formatter -> unit -> int
val get_margin : unit -> int
val pp_set_max_indent : formatter -> int -> unit
val set_max_indent : int -> unit
val pp_get_max_indent : formatter -> unit -> int
val get_max_indent : unit -> int
val pp_set_max_boxes : formatter -> int -> unit
val set_max_boxes : int -> unit
val pp_get_max_boxes : formatter -> unit -> int
val get_max_boxes : unit -> int
val pp_over_max_boxes : formatter -> unit -> bool
val over_max_boxes : unit -> bool
val pp_open_tbox : formatter -> unit -> unit
val open_tbox : unit -> unit
val pp_close_tbox : formatter -> unit -> unit
val close_tbox : unit -> unit
val pp_set_tab : formatter -> unit -> unit
val set_tab : unit -> unit
val pp_print_tab : formatter -> unit -> unit
val print_tab : unit -> unit
val pp_print_tbreak : formatter -> int -> int -> unit
val print_tbreak : int -> int -> unit
val pp_set_ellipsis_text : formatter -> string -> unit
val set_ellipsis_text : string -> unit
val pp_get_ellipsis_text : formatter -> unit -> string
val get_ellipsis_text : unit -> string
val pp_set_tags : formatter -> bool -> unit
val set_tags : bool -> unit
val pp_set_print_tags : formatter -> bool -> unit
val set_print_tags : bool -> unit
val pp_set_mark_tags : formatter -> bool -> unit
val set_mark_tags : bool -> unit
val pp_get_print_tags : formatter -> unit -> bool
val get_print_tags : unit -> bool
val pp_get_mark_tags : formatter -> unit -> bool
val get_mark_tags : unit -> bool
val pp_set_formatter_out_channel : formatter -> out_channel -> unit
val set_formatter_out_channel : out_channel -> unit
val pp_set_formatter_output_functions :
  formatter -> (string -> int -> int -> unit) -> (unit -> unit) -> unit
val set_formatter_output_functions :
  (string -> int -> int -> unit) -> (unit -> unit) -> unit
val pp_get_formatter_output_functions :
  formatter -> unit -> (string -> int -> int -> unit) * (unit -> unit)
val get_formatter_output_functions :
  unit -> (string -> int -> int -> unit) * (unit -> unit)
val formatter_of_out_channel : out_channel -> formatter
val std_formatter : formatter
val err_formatter : formatter
val formatter_of_buffer : Buffer.t -> formatter
val stdbuf : Buffer.t
val str_formatter : formatter
val flush_str_formatter : unit -> string
val make_formatter :
  (string -> int -> int -> unit) -> (unit -> unit) -> formatter
val fprintf : formatter -> ('a, formatter, unit) format -> 'a
val printf : ('a, formatter, unit) format -> 'a
val eprintf : ('a, formatter, unit) format -> 'a
("DEBUG:rule", [Tag1 (("formatter", 1049), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -778)), 0, 0, 0, 0, (("stdcompat__format_s.mli", 2, 20, 20), ("stdcompat__format_s.mli", 2, 20, 53), 0), 0, 0, 0, Tag1 ("Stdcompat__format_s", 0)), 1, 0); Tag1 (("geometry", 1050), (0, 0, [[(("max_indent", 583), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -776), (("stdcompat__format_s.mli", 7, 129, 131), ("stdcompat__format_s.mli", 7, 129, 148), 0), 0, Tag1 ("Stdcompat__format_s", 2)); (("margin", 584), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -777), (("stdcompat__format_s.mli", 8, 149, 151), ("stdcompat__format_s.mli", 8, 149, 162), 0), 0, Tag1 ("Stdcompat__format_s", 3))]], 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "geometry"), 0, (0)), 100000000, 0, -775)), 0, 0, 0, 0, (("stdcompat__format_s.mli", 6, 93, 93), ("stdcompat__format_s.mli", 8, 149, 164), 0), 0, 0, 0, Tag1 ("Stdcompat__format_s", 1)), 1, 0); Tag1 (("stag", 1051), (0, 0, 1, 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "stag"), 0, (0)), 100000000, 0, -774)), 0, 0, 0, 0, (("stdcompat__format_s.mli", 22, 344, 344), ("stdcompat__format_s.mli", 22, 344, 372), 0), 0, 0, 0, Tag1 ("Stdcompat__format_s", 4)), 1, 0); Tag1 (("formatter_out_functions", 1052), (0, 0, [[(("out_string", 587), 0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -761), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -760), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -759), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -758), 0), 100000000, 0, -757), 0), 100000000, 0, -756), 0), 100000000, 0, -755), (("stdcompat__format_s.mli", 48, 609, 611), ("stdcompat__format_s.mli", 48, 609, 653), 0), 0, Tag1 ("Stdcompat__format_s", 6)); (("out_flush", 588), 0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -764), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -763), 0), 100000000, 0, -762), (("stdcompat__format_s.mli", 49, 654, 656), ("stdcompat__format_s.mli", 49, 654, 681), 0), 0, Tag1 ("Stdcompat__format_s", 7)); (("out_newline", 589), 0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -767), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -766), 0), 100000000, 0, -765), (("stdcompat__format_s.mli", 50, 682, 684), ("stdcompat__format_s.mli", 50, 682, 711), 0), 0, Tag1 ("Stdcompat__format_s", 8)); (("out_spaces", 590), 0, (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -770), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -769), 0), 100000000, 0, -768), (("stdcompat__format_s.mli", 51, 712, 714), ("stdcompat__format_s.mli", 51, 712, 739), 0), 0, Tag1 ("Stdcompat__format_s", 9)); (("out_indent", 591), 0, (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -773), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -772), 0), 100000000, 0, -771), (("stdcompat__format_s.mli", 52, 740, 742), ("stdcompat__format_s.mli", 52, 740, 765), 0), 0, Tag1 ("Stdcompat__format_s", 10))]], 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter_out_functions"), 0, (0)), 100000000, 0, -754)), 0, 0, 0, 0, (("stdcompat__format_s.mli", 46, 541, 541), ("stdcompat__format_s.mli", 52, 740, 767), 0), 0, 0, 0, Tag1 ("Stdcompat__format_s", 5)), 1, 0); Tag1 (("formatter_stag_functions", 1053), (0, 0, [[(("mark_open_stag", 593), 0, (Tag1 (0, (Tag3 ((("stag", 1051)), 0, (0)), 100000000, 0, -744), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -743), 0), 100000000, 0, -742), (("stdcompat__format_s.mli", 76, 1286, 1288), ("stdcompat__format_s.mli", 76, 1286, 1320), 0), 0, Tag1 ("Stdcompat__format_s", 12)); (("mark_close_stag", 594), 0, (Tag1 (0, (Tag3 ((("stag", 1051)), 0, (0)), 100000000, 0, -747), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -746), 0), 100000000, 0, -745), (("stdcompat__format_s.mli", 77, 1321, 1323), ("stdcompat__format_s.mli", 77, 1321, 1356), 0), 0, Tag1 ("Stdcompat__format_s", 13)); (("print_open_stag", 595), 0, (Tag1 (0, (Tag3 ((("stag", 1051)), 0, (0)), 100000000, 0, -750), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -749), 0), 100000000, 0, -748), (("stdcompat__format_s.mli", 78, 1357, 1359), ("stdcompat__format_s.mli", 78, 1357, 1390), 0), 0, Tag1 ("Stdcompat__format_s", 14)); (("print_close_stag", 596), 0, (Tag1 (0, (Tag3 ((("stag", 1051)), 0, (0)), 100000000, 0, -753), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -752), 0), 100000000, 0, -751), (("stdcompat__format_s.mli", 79, 1391, 1393), ("stdcompat__format_s.mli", 79, 1391, 1423), 0), 0, Tag1 ("Stdcompat__format_s", 15))]], 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter_stag_functions"), 0, (0)), 100000000, 0, -741)), 0, 0, 0, 0, (("stdcompat__format_s.mli", 74, 1216, 1216), ("stdcompat__format_s.mli", 79, 1391, 1425), 0), 0, 0, 0, Tag1 ("Stdcompat__format_s", 11)), 1, 0); Tag1 (("symbolic_output_item", 1054), (0, 0, Tag1 ([(("Output_flush", 598), (0), 0, (("stdcompat__format_s.mli", 100, 1892, 1894), ("stdcompat__format_s.mli", 100, 1892, 1908), 0), 0, Tag1 ("Stdcompat__format_s", 17)); (("Output_newline", 599), (0), 0, (("stdcompat__format_s.mli", 101, 1910, 1912), ("stdcompat__format_s.mli", 101, 1910, 1928), 0), 0, Tag1 ("Stdcompat__format_s", 18)); (("Output_string", 600), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -738)]), 0, (("stdcompat__format_s.mli", 102, 1930, 1932), ("stdcompat__format_s.mli", 102, 1930, 1957), 0), 0, Tag1 ("Stdcompat__format_s", 19)); (("Output_spaces", 601), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -739)]), 0, (("stdcompat__format_s.mli", 103, 1959, 1961), ("stdcompat__format_s.mli", 103, 1959, 1983), 0), 0, Tag1 ("Stdcompat__format_s", 20)); (("Output_indent", 602), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -740)]), 0, (("stdcompat__format_s.mli", 104, 1985, 1987), ("stdcompat__format_s.mli", 104, 1985, 2009), 0), 0, Tag1 ("Stdcompat__format_s", 21))], 0), 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "symbolic_output_item"), 0, (0)), 100000000, 0, -737)), 0, 0, 0, 0, (("stdcompat__format_s.mli", 99, 1834, 1834), ("stdcompat__format_s.mli", 104, 1985, 2009), 0), 0, 0, 0, Tag1 ("Stdcompat__format_s", 16)), 1, 0); Tag1 (("symbolic_output_buffer", 1055), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "symbolic_output_buffer"), 0, (0)), 100000000, 0, -736)), 0, 0, 0, 0, (("stdcompat__format_s.mli", 124, 2361, 2361), ("stdcompat__format_s.mli", 124, 2361, 2420), 0), 0, 0, 0, Tag1 ("Stdcompat__format_s", 22)), 1, 0); (("pp_print_bytes", 1056), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -735), (Tag1 (0, (Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -734), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -733), 0), 100000000, 0, -732), 0), 100000000, 0, -731), 0, (("stdcompat__format_s.mli", 143, 2767, 2767), ("stdcompat__format_s.mli", 143, 2767, 2814), 0), 0, Tag1 ("Stdcompat__format_s", 23)), 0); (("print_bytes", 1057), ((Tag1 (0, (Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -730), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -729), 0), 100000000, 0, -728), 0, (("stdcompat__format_s.mli", 152, 2959, 2959), ("stdcompat__format_s.mli", 152, 2959, 2990), 0), 0, Tag1 ("Stdcompat__format_s", 24)), 0); (("pp_print_either", 1058), ((Tag1 (("left"), (Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -727), (Tag1 (0, ((("a")), 100000000, 0, -717), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -726), 0), 100000000, 0, -725), 0), 100000000, 0, -724), (Tag1 (("right"), (Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -723), (Tag1 (0, ((("b")), 100000000, 0, -718), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -722), 0), 100000000, 0, -721), 0), 100000000, 0, -720), (Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -719), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Either"), "t"), [((("a")), 100000000, 0, -717); ((("b")), 100000000, 0, -718)], (0)), 100000000, 0, -716), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -715), 0), 100000000, 0, -714), 0), 100000000, 0, -713), 0), 100000000, 0, -712), 0), 100000000, 0, -711), 0, (("stdcompat__format_s.mli", 161, 3103, 3103), ("stdcompat__format_s.mli", 163, 3161, 3238), 0), 0, Tag1 ("Stdcompat__format_s", 25)), 0); (("pp_print_seq", 1059), ((Tag1 (Tag1 ("pp_sep"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -710), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -709), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -708), 0), 100000000, 0, -707), 0), 100000000, 0, -706)], (0)), 100000000, 0, -705), (Tag1 (0, (Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -704), (Tag1 (0, ((("a")), 100000000, 0, -699), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -703), 0), 100000000, 0, -702), 0), 100000000, 0, -701), (Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -700), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [((("a")), 100000000, 0, -699)], (0)), 100000000, 0, -698), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -697), 0), 100000000, 0, -696), 0), 100000000, 0, -695), 0), 100000000, 0, -694), 0), 100000000, 0, -693), 0, (("stdcompat__format_s.mli", 179, 3582, 3582), ("stdcompat__format_s.mli", 181, 3642, 3704), 0), 0, Tag1 ("Stdcompat__format_s", 26)), 0); (("pp_update_geometry", 1060), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -692), (Tag1 (0, (Tag1 (0, (Tag3 ((("geometry", 1050)), 0, (0)), 100000000, 0, -691), (Tag3 ((("geometry", 1050)), 0, (0)), 100000000, 0, -690), 0), 100000000, 0, -689), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -688), 0), 100000000, 0, -687), 0), 100000000, 0, -686), 0, (("stdcompat__format_s.mli", 194, 4005, 4005), ("stdcompat__format_s.mli", 194, 4005, 4073), 0), 0, Tag1 ("Stdcompat__format_s", 27)), 0); (("update_geometry", 1061), ((Tag1 (0, (Tag1 (0, (Tag3 ((("geometry", 1050)), 0, (0)), 100000000, 0, -685), (Tag3 ((("geometry", 1050)), 0, (0)), 100000000, 0, -684), 0), 100000000, 0, -683), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -682), 0), 100000000, 0, -681), 0, (("stdcompat__format_s.mli", 198, 4170, 4170), ("stdcompat__format_s.mli", 198, 4170, 4222), 0), 0, Tag1 ("Stdcompat__format_s", 28)), 0); (("pp_print_custom_break", 1062), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -680), (Tag1 (("fits"), (Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -677); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -678); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -679)]), 100000000, 0, -676), (Tag1 (("breaks"), (Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -673); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -674); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -675)]), 100000000, 0, -672), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -671), 0), 100000000, 0, -670), 0), 100000000, 0, -669), 0), 100000000, 0, -668), 0, (("stdcompat__format_s.mli", 201, 4299, 4299), ("stdcompat__format_s.mli", 203, 4342, 4416), 0), 0, Tag1 ("Stdcompat__format_s", 29)), 0); (("check_geometry", 1063), ((Tag1 (0, (Tag3 ((("geometry", 1050)), 0, (0)), 100000000, 0, -667), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -666), 0), 100000000, 0, -665), 0, (("stdcompat__format_s.mli", 210, 4580, 4580), ("stdcompat__format_s.mli", 210, 4580, 4617), 0), 0, Tag1 ("Stdcompat__format_s", 30)), 0); (("pp_set_geometry", 1064), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -664), (Tag1 (("max_indent"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -663), (Tag1 (("margin"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -662), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -661), 0), 100000000, 0, -660), 0), 100000000, 0, -659), 0), 100000000, 0, -658), 0, (("stdcompat__format_s.mli", 213, 4679, 4679), ("stdcompat__format_s.mli", 213, 4679, 4750), 0), 0, Tag1 ("Stdcompat__format_s", 31)), 0); (("set_geometry", 1065), ((Tag1 (("max_indent"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -657), (Tag1 (("margin"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -656), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -655), 0), 100000000, 0, -654), 0), 100000000, 0, -653), 0, (("stdcompat__format_s.mli", 217, 4850, 4850), ("stdcompat__format_s.mli", 217, 4850, 4905), 0), 0, Tag1 ("Stdcompat__format_s", 32)), 0); (("pp_safe_set_geometry", 1066), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -652), (Tag1 (("max_indent"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -651), (Tag1 (("margin"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -650), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -649), 0), 100000000, 0, -648), 0), 100000000, 0, -647), 0), 100000000, 0, -646), 0, (("stdcompat__format_s.mli", 220, 4985, 4985), ("stdcompat__format_s.mli", 220, 4985, 5061), 0), 0, Tag1 ("Stdcompat__format_s", 33)), 0); (("safe_set_geometry", 1067), ((Tag1 (("max_indent"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -645), (Tag1 (("margin"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -644), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -643), 0), 100000000, 0, -642), 0), 100000000, 0, -641), 0, (("stdcompat__format_s.mli", 225, 5172, 5172), ("stdcompat__format_s.mli", 225, 5172, 5232), 0), 0, Tag1 ("Stdcompat__format_s", 34)), 0); (("pp_get_geometry", 1068), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -640), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -639), (Tag3 ((("geometry", 1050)), 0, (0)), 100000000, 0, -638), 0), 100000000, 0, -637), 0), 100000000, 0, -636), 0, (("stdcompat__format_s.mli", 229, 5321, 5321), ("stdcompat__format_s.mli", 229, 5321, 5372), 0), 0, Tag1 ("Stdcompat__format_s", 35)), 0); (("get_geometry", 1069), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -635), (Tag3 ((("geometry", 1050)), 0, (0)), 100000000, 0, -634), 0), 100000000, 0, -633), 0, (("stdcompat__format_s.mli", 232, 5448, 5448), ("stdcompat__format_s.mli", 232, 5448, 5483), 0), 0, Tag1 ("Stdcompat__format_s", 36)), 0); (("pp_open_stag", 1070), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -632), (Tag1 (0, (Tag3 ((("stag", 1051)), 0, (0)), 100000000, 0, -631), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -630), 0), 100000000, 0, -629), 0), 100000000, 0, -628), 0, (("stdcompat__format_s.mli", 235, 5543, 5543), ("stdcompat__format_s.mli", 235, 5543, 5587), 0), 0, Tag1 ("Stdcompat__format_s", 37)), 0); (("open_stag", 1071), ((Tag1 (0, (Tag3 ((("stag", 1051)), 0, (0)), 100000000, 0, -627), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -626), 0), 100000000, 0, -625), 0, (("stdcompat__format_s.mli", 238, 5656, 5656), ("stdcompat__format_s.mli", 238, 5656, 5684), 0), 0, Tag1 ("Stdcompat__format_s", 38)), 0); (("pp_close_stag", 1072), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -624), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -623), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -622), 0), 100000000, 0, -621), 0), 100000000, 0, -620), 0, (("stdcompat__format_s.mli", 241, 5737, 5737), ("stdcompat__format_s.mli", 241, 5737, 5782), 0), 0, Tag1 ("Stdcompat__format_s", 39)), 0); (("close_stag", 1073), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -619), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -618), 0), 100000000, 0, -617), 0, (("stdcompat__format_s.mli", 244, 5852, 5852), ("stdcompat__format_s.mli", 244, 5852, 5881), 0), 0, Tag1 ("Stdcompat__format_s", 40)), 0); (("pp_set_formatter_stag_functions", 1074), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -616), (Tag1 (0, (Tag3 ((("formatter_stag_functions", 1053)), 0, (0)), 100000000, 0, -615), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -614), 0), 100000000, 0, -613), 0), 100000000, 0, -612), 0, (("stdcompat__format_s.mli", 247, 5935, 5935), ("stdcompat__format_s.mli", 248, 5973, 6020), 0), 0, Tag1 ("Stdcompat__format_s", 41)), 0); (("set_formatter_stag_functions", 1075), ((Tag1 (0, (Tag3 ((("formatter_stag_functions", 1053)), 0, (0)), 100000000, 0, -611), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -610), 0), 100000000, 0, -609), 0, (("stdcompat__format_s.mli", 253, 6138, 6138), ("stdcompat__format_s.mli", 253, 6138, 6205), 0), 0, Tag1 ("Stdcompat__format_s", 42)), 0); (("pp_get_formatter_stag_functions", 1076), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -608), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -607), (Tag3 ((("formatter_stag_functions", 1053)), 0, (0)), 100000000, 0, -606), 0), 100000000, 0, -605), 0), 100000000, 0, -604), 0, (("stdcompat__format_s.mli", 257, 6301, 6301), ("stdcompat__format_s.mli", 258, 6339, 6386), 0), 0, Tag1 ("Stdcompat__format_s", 43)), 0); (("get_formatter_stag_functions", 1077), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -603), (Tag3 ((("formatter_stag_functions", 1053)), 0, (0)), 100000000, 0, -602), 0), 100000000, 0, -601), 0, (("stdcompat__format_s.mli", 263, 6504, 6504), ("stdcompat__format_s.mli", 263, 6504, 6571), 0), 0, Tag1 ("Stdcompat__format_s", 44)), 0); (("pp_print_option", 1078), ((Tag1 (Tag1 ("none"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -600), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -599), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -598), 0), 100000000, 0, -597), 0), 100000000, 0, -596)], (0)), 100000000, 0, -595), (Tag1 (0, (Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -594), (Tag1 (0, ((("a")), 100000000, 0, -589), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -593), 0), 100000000, 0, -592), 0), 100000000, 0, -591), (Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -590), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -589)], (0)), 100000000, 0, -588), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -587), 0), 100000000, 0, -586), 0), 100000000, 0, -585), 0), 100000000, 0, -584), 0), 100000000, 0, -583), 0, (("stdcompat__format_s.mli", 267, 6667, 6667), ("stdcompat__format_s.mli", 269, 6728, 6791), 0), 0, Tag1 ("Stdcompat__format_s", 45)), 0); (("pp_print_result", 1079), ((Tag1 (("ok"), (Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -582), (Tag1 (0, ((("a")), 100000000, 0, -572), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -581), 0), 100000000, 0, -580), 0), 100000000, 0, -579), (Tag1 (("error"), (Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -578), (Tag1 (0, ((("e")), 100000000, 0, -573), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -577), 0), 100000000, 0, -576), 0), 100000000, 0, -575), (Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -574), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [((("a")), 100000000, 0, -572); ((("e")), 100000000, 0, -573)], (0)), 100000000, 0, -571), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -570), 0), 100000000, 0, -569), 0), 100000000, 0, -568), 0), 100000000, 0, -567), 0), 100000000, 0, -566), 0, (("stdcompat__format_s.mli", 276, 6953, 6953), ("stdcompat__format_s.mli", 278, 7009, 7084), 0), 0, Tag1 ("Stdcompat__format_s", 46)), 0); (("dprintf", 1080), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format4"), [((("a")), 100000000, 0, -559); (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -561); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -562); (Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -565), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -564), 0), 100000000, 0, -563)], (0)), 100000000, 0, -560), ((("a")), 100000000, 0, -559), 0), 100000000, 0, -558), 0, (("stdcompat__format_s.mli", 293, 7430, 7430), ("stdcompat__format_s.mli", 293, 7430, 7498), 0), 0, Tag1 ("Stdcompat__format_s", 47)), 0); (("kdprintf", 1081), ((Tag1 (0, (Tag1 (0, (Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -557), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -556), 0), 100000000, 0, -555), ((("a")), 100000000, 0, -553), 0), 100000000, 0, -554), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format4"), [((("b")), 100000000, 0, -549); (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -551); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -552); ((("a")), 100000000, 0, -553)], (0)), 100000000, 0, -550), ((("b")), 100000000, 0, -549), 0), 100000000, 0, -548), 0), 100000000, 0, -547), 0, (("stdcompat__format_s.mli", 297, 7595, 7595), ("stdcompat__format_s.mli", 298, 7610, 7682), 0), 0, Tag1 ("Stdcompat__format_s", 48)), 0); (("formatter_of_out_functions", 1082), ((Tag1 (0, (Tag3 ((("formatter_out_functions", 1052)), 0, (0)), 100000000, 0, -546), (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -545), 0), 100000000, 0, -544), 0, (("stdcompat__format_s.mli", 308, 7917, 7917), ("stdcompat__format_s.mli", 308, 7917, 7986), 0), 0, Tag1 ("Stdcompat__format_s", 49)), 0); (("make_symbolic_output_buffer", 1083), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -543), (Tag3 ((("symbolic_output_buffer", 1055)), 0, (0)), 100000000, 0, -542), 0), 100000000, 0, -541), 0, (("stdcompat__format_s.mli", 312, 8084, 8084), ("stdcompat__format_s.mli", 312, 8084, 8148), 0), 0, Tag1 ("Stdcompat__format_s", 50)), 0); (("clear_symbolic_output_buffer", 1084), ((Tag1 (0, (Tag3 ((("symbolic_output_buffer", 1055)), 0, (0)), 100000000, 0, -540), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -539), 0), 100000000, 0, -538), 0, (("stdcompat__format_s.mli", 316, 8241, 8241), ("stdcompat__format_s.mli", 316, 8241, 8306), 0), 0, Tag1 ("Stdcompat__format_s", 51)), 0); (("get_symbolic_output_buffer", 1085), ((Tag1 (0, (Tag3 ((("symbolic_output_buffer", 1055)), 0, (0)), 100000000, 0, -537), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("symbolic_output_item", 1054)), 0, (0)), 100000000, 0, -536)], (0)), 100000000, 0, -535), 0), 100000000, 0, -534), 0, (("stdcompat__format_s.mli", 320, 8400, 8400), ("stdcompat__format_s.mli", 321, 8433, 8486), 0), 0, Tag1 ("Stdcompat__format_s", 52)), 0); (("flush_symbolic_output_buffer", 1086), ((Tag1 (0, (Tag3 ((("symbolic_output_buffer", 1055)), 0, (0)), 100000000, 0, -533), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("symbolic_output_item", 1054)), 0, (0)), 100000000, 0, -532)], (0)), 100000000, 0, -531), 0), 100000000, 0, -530), 0, (("stdcompat__format_s.mli", 326, 8605, 8605), ("stdcompat__format_s.mli", 327, 8640, 8693), 0), 0, Tag1 ("Stdcompat__format_s", 53)), 0); (("add_symbolic_output_item", 1087), ((Tag1 (0, (Tag3 ((("symbolic_output_buffer", 1055)), 0, (0)), 100000000, 0, -529), (Tag1 (0, (Tag3 ((("symbolic_output_item", 1054)), 0, (0)), 100000000, 0, -528), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -527), 0), 100000000, 0, -526), 0), 100000000, 0, -525), 0, (("stdcompat__format_s.mli", 332, 8814, 8814), ("stdcompat__format_s.mli", 333, 8845, 8901), 0), 0, Tag1 ("Stdcompat__format_s", 54)), 0); (("formatter_of_symbolic_output_buffer", 1088), ((Tag1 (0, (Tag3 ((("symbolic_output_buffer", 1055)), 0, (0)), 100000000, 0, -524), (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -523), 0), 100000000, 0, -522), 0, (("stdcompat__format_s.mli", 338, 9021, 9021), ("stdcompat__format_s.mli", 338, 9021, 9098), 0), 0, Tag1 ("Stdcompat__format_s", 55)), 0); (("kasprintf", 1089), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -521), ((("a")), 100000000, 0, -519), 0), 100000000, 0, -520), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format4"), [((("b")), 100000000, 0, -515); (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -517); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -518); ((("a")), 100000000, 0, -519)], (0)), 100000000, 0, -516), ((("b")), 100000000, 0, -515), 0), 100000000, 0, -514), 0), 100000000, 0, -513), 0, (("stdcompat__format_s.mli", 343, 9210, 9210), ("stdcompat__format_s.mli", 343, 9210, 9283), 0), 0, Tag1 ("Stdcompat__format_s", 56)), 0); (("pp_print_list", 1090), ((Tag1 (Tag1 ("pp_sep"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -512), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -511), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -510), 0), 100000000, 0, -509), 0), 100000000, 0, -508)], (0)), 100000000, 0, -507), (Tag1 (0, (Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -506), (Tag1 (0, ((("a")), 100000000, 0, -501), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -505), 0), 100000000, 0, -504), 0), 100000000, 0, -503), (Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -502), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -501)], (0)), 100000000, 0, -500), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -499), 0), 100000000, 0, -498), 0), 100000000, 0, -497), 0), 100000000, 0, -496), 0), 100000000, 0, -495), 0, (("stdcompat__format_s.mli", 347, 9385, 9385), ("stdcompat__format_s.mli", 349, 9446, 9507), 0), 0, Tag1 ("Stdcompat__format_s", 57)), 0); (("pp_print_text", 1091), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -494), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -493), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -492), 0), 100000000, 0, -491), 0), 100000000, 0, -490), 0, (("stdcompat__format_s.mli", 355, 9666, 9666), ("stdcompat__format_s.mli", 355, 9666, 9713), 0), 0, Tag1 ("Stdcompat__format_s", 58)), 0); (("pp_set_formatter_out_functions", 1092), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -489), (Tag1 (0, (Tag3 ((("formatter_out_functions", 1052)), 0, (0)), 100000000, 0, -488), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -487), 0), 100000000, 0, -486), 0), 100000000, 0, -485), 0, (("stdcompat__format_s.mli", 358, 9785, 9785), ("stdcompat__format_s.mli", 359, 9822, 9868), 0), 0, Tag1 ("Stdcompat__format_s", 59)), 0); (("set_formatter_out_functions", 1093), ((Tag1 (0, (Tag3 ((("formatter_out_functions", 1052)), 0, (0)), 100000000, 0, -484), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -483), 0), 100000000, 0, -482), 0, (("stdcompat__format_s.mli", 364, 9984, 9984), ("stdcompat__format_s.mli", 364, 9984, 10049), 0), 0, Tag1 ("Stdcompat__format_s", 60)), 0); (("pp_get_formatter_out_functions", 1094), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -481), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -480), (Tag3 ((("formatter_out_functions", 1052)), 0, (0)), 100000000, 0, -479), 0), 100000000, 0, -478), 0), 100000000, 0, -477), 0, (("stdcompat__format_s.mli", 368, 10143, 10143), ("stdcompat__format_s.mli", 369, 10180, 10226), 0), 0, Tag1 ("Stdcompat__format_s", 61)), 0); (("get_formatter_out_functions", 1095), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -476), (Tag3 ((("formatter_out_functions", 1052)), 0, (0)), 100000000, 0, -475), 0), 100000000, 0, -474), 0, (("stdcompat__format_s.mli", 374, 10342, 10342), ("stdcompat__format_s.mli", 374, 10342, 10407), 0), 0, Tag1 ("Stdcompat__format_s", 62)), 0); (("asprintf", 1096), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format4"), [((("a")), 100000000, 0, -469); (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -471); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -472); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -473)], (0)), 100000000, 0, -470), ((("a")), 100000000, 0, -469), 0), 100000000, 0, -468), 0, (("stdcompat__format_s.mli", 378, 10501, 10501), ("stdcompat__format_s.mli", 378, 10501, 10559), 0), 0, Tag1 ("Stdcompat__format_s", 63)), 0); (("ikfprintf", 1097), ((Tag1 (0, (Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -467), ((("a")), 100000000, 0, -464), 0), 100000000, 0, -466), (Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -465), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format4"), [((("b")), 100000000, 0, -460); (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -462); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -463); ((("a")), 100000000, 0, -464)], (0)), 100000000, 0, -461), ((("b")), 100000000, 0, -460), 0), 100000000, 0, -459), 0), 100000000, 0, -458), 0), 100000000, 0, -457), 0, (("stdcompat__format_s.mli", 381, 10642, 10642), ("stdcompat__format_s.mli", 382, 10658, 10733), 0), 0, Tag1 ("Stdcompat__format_s", 64)), 0); (("ifprintf", 1098), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -456), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format"), [((("a")), 100000000, 0, -452); (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -454); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -455)], (0)), 100000000, 0, -453), ((("a")), 100000000, 0, -452), 0), 100000000, 0, -451), 0), 100000000, 0, -450), 0, (("stdcompat__format_s.mli", 388, 10865, 10865), ("stdcompat__format_s.mli", 388, 10865, 10927), 0), 0, Tag1 ("Stdcompat__format_s", 65)), 0); (("kfprintf", 1099), ((Tag1 (0, (Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -449), ((("a")), 100000000, 0, -446), 0), 100000000, 0, -448), (Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -447), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format4"), [((("b")), 100000000, 0, -442); (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -444); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -445); ((("a")), 100000000, 0, -446)], (0)), 100000000, 0, -443), ((("b")), 100000000, 0, -442), 0), 100000000, 0, -441), 0), 100000000, 0, -440), 0), 100000000, 0, -439), 0, (("stdcompat__format_s.mli", 392, 11018, 11018), ("stdcompat__format_s.mli", 393, 11033, 11108), 0), 0, Tag1 ("Stdcompat__format_s", 66)), 0); (("ksprintf", 1100), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -438), ((("a")), 100000000, 0, -436), 0), 100000000, 0, -437), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format4"), [((("b")), 100000000, 0, -432); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -434); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -435); ((("a")), 100000000, 0, -436)], (0)), 100000000, 0, -433), ((("b")), 100000000, 0, -432), 0), 100000000, 0, -431), 0), 100000000, 0, -430), 0, (("stdcompat__format_s.mli", 399, 11239, 11239), ("stdcompat__format_s.mli", 399, 11239, 11308), 0), 0, Tag1 ("Stdcompat__format_s", 67)), 0); (("pp_open_box", 1101), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -429), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -428), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -427), 0), 100000000, 0, -426), 0), 100000000, 0, -425), 0, (("stdcompat__format_s.mli", 403, 11406, 11406), ("stdcompat__format_s.mli", 403, 11406, 11448), 0), 0, Tag1 ("Stdcompat__format_s", 68)), 0); (("open_box", 1102), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -424), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -423), 0), 100000000, 0, -422), 0, (("stdcompat__format_s.mli", 406, 11489, 11489), ("stdcompat__format_s.mli", 406, 11489, 11515), 0), 0, Tag1 ("Stdcompat__format_s", 69)), 0); (("pp_close_box", 1103), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -421), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -420), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -419), 0), 100000000, 0, -418), 0), 100000000, 0, -417), 0, (("stdcompat__format_s.mli", 409, 11553, 11553), ("stdcompat__format_s.mli", 409, 11553, 11597), 0), 0, Tag1 ("Stdcompat__format_s", 70)), 0); (("close_box", 1104), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -416), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -415), 0), 100000000, 0, -414), 0, (("stdcompat__format_s.mli", 412, 11639, 11639), ("stdcompat__format_s.mli", 412, 11639, 11667), 0), 0, Tag1 ("Stdcompat__format_s", 71)), 0); (("pp_open_hbox", 1105), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -413), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -412), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -411), 0), 100000000, 0, -410), 0), 100000000, 0, -409), 0, (("stdcompat__format_s.mli", 415, 11706, 11706), ("stdcompat__format_s.mli", 415, 11706, 11750), 0), 0, Tag1 ("Stdcompat__format_s", 72)), 0); (("open_hbox", 1106), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -408), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -407), 0), 100000000, 0, -406), 0, (("stdcompat__format_s.mli", 418, 11792, 11792), ("stdcompat__format_s.mli", 418, 11792, 11820), 0), 0, Tag1 ("Stdcompat__format_s", 73)), 0); (("pp_open_vbox", 1107), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -405), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -404), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -403), 0), 100000000, 0, -402), 0), 100000000, 0, -401), 0, (("stdcompat__format_s.mli", 421, 11859, 11859), ("stdcompat__format_s.mli", 421, 11859, 11902), 0), 0, Tag1 ("Stdcompat__format_s", 74)), 0); (("open_vbox", 1108), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -400), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -399), 0), 100000000, 0, -398), 0, (("stdcompat__format_s.mli", 424, 11944, 11944), ("stdcompat__format_s.mli", 424, 11944, 11971), 0), 0, Tag1 ("Stdcompat__format_s", 75)), 0); (("pp_open_hvbox", 1109), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -397), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -396), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -395), 0), 100000000, 0, -394), 0), 100000000, 0, -393), 0, (("stdcompat__format_s.mli", 427, 12010, 12010), ("stdcompat__format_s.mli", 427, 12010, 12054), 0), 0, Tag1 ("Stdcompat__format_s", 76)), 0); (("open_hvbox", 1110), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -392), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -391), 0), 100000000, 0, -390), 0, (("stdcompat__format_s.mli", 430, 12097, 12097), ("stdcompat__format_s.mli", 430, 12097, 12125), 0), 0, Tag1 ("Stdcompat__format_s", 77)), 0); (("pp_open_hovbox", 1111), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -389), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -388), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -387), 0), 100000000, 0, -386), 0), 100000000, 0, -385), 0, (("stdcompat__format_s.mli", 433, 12165, 12165), ("stdcompat__format_s.mli", 433, 12165, 12210), 0), 0, Tag1 ("Stdcompat__format_s", 78)), 0); (("open_hovbox", 1112), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -384), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -383), 0), 100000000, 0, -382), 0, (("stdcompat__format_s.mli", 436, 12254, 12254), ("stdcompat__format_s.mli", 436, 12254, 12283), 0), 0, Tag1 ("Stdcompat__format_s", 79)), 0); (("pp_print_string", 1113), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -381), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -380), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -379), 0), 100000000, 0, -378), 0), 100000000, 0, -377), 0, (("stdcompat__format_s.mli", 439, 12324, 12324), ("stdcompat__format_s.mli", 439, 12324, 12373), 0), 0, Tag1 ("Stdcompat__format_s", 80)), 0); (("print_string", 1114), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -376), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -375), 0), 100000000, 0, -374), 0, (("stdcompat__format_s.mli", 442, 12418, 12418), ("stdcompat__format_s.mli", 442, 12418, 12451), 0), 0, Tag1 ("Stdcompat__format_s", 81)), 0); (("pp_print_as", 1115), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -373), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -372), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -371), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -370), 0), 100000000, 0, -369), 0), 100000000, 0, -368), 0), 100000000, 0, -367), 0, (("stdcompat__format_s.mli", 445, 12493, 12493), ("stdcompat__format_s.mli", 445, 12493, 12545), 0), 0, Tag1 ("Stdcompat__format_s", 82)), 0); (("print_as", 1116), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -366), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -365), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -364), 0), 100000000, 0, -363), 0), 100000000, 0, -362), 0, (("stdcompat__format_s.mli", 448, 12586, 12586), ("stdcompat__format_s.mli", 448, 12586, 12622), 0), 0, Tag1 ("Stdcompat__format_s", 83)), 0); (("pp_print_int", 1117), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -361), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -360), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -359), 0), 100000000, 0, -358), 0), 100000000, 0, -357), 0, (("stdcompat__format_s.mli", 451, 12660, 12660), ("stdcompat__format_s.mli", 451, 12660, 12703), 0), 0, Tag1 ("Stdcompat__format_s", 84)), 0); (("print_int", 1118), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -356), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -355), 0), 100000000, 0, -354), 0, (("stdcompat__format_s.mli", 454, 12745, 12745), ("stdcompat__format_s.mli", 454, 12745, 12772), 0), 0, Tag1 ("Stdcompat__format_s", 85)), 0); (("pp_print_float", 1119), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -353), (Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -352), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -351), 0), 100000000, 0, -350), 0), 100000000, 0, -349), 0, (("stdcompat__format_s.mli", 457, 12811, 12811), ("stdcompat__format_s.mli", 457, 12811, 12858), 0), 0, Tag1 ("Stdcompat__format_s", 86)), 0); (("print_float", 1120), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -348), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -347), 0), 100000000, 0, -346), 0, (("stdcompat__format_s.mli", 460, 12902, 12902), ("stdcompat__format_s.mli", 460, 12902, 12933), 0), 0, Tag1 ("Stdcompat__format_s", 87)), 0); (("pp_print_char", 1121), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -345), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -344), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -343), 0), 100000000, 0, -342), 0), 100000000, 0, -341), 0, (("stdcompat__format_s.mli", 463, 12974, 12974), ("stdcompat__format_s.mli", 463, 12974, 13019), 0), 0, Tag1 ("Stdcompat__format_s", 88)), 0); (("print_char", 1122), ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -340), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -339), 0), 100000000, 0, -338), 0, (("stdcompat__format_s.mli", 466, 13062, 13062), ("stdcompat__format_s.mli", 466, 13062, 13091), 0), 0, Tag1 ("Stdcompat__format_s", 89)), 0); (("pp_print_bool", 1123), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -337), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -336), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -335), 0), 100000000, 0, -334), 0), 100000000, 0, -333), 0, (("stdcompat__format_s.mli", 469, 13131, 13131), ("stdcompat__format_s.mli", 469, 13131, 13176), 0), 0, Tag1 ("Stdcompat__format_s", 90)), 0); (("print_bool", 1124), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -332), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -331), 0), 100000000, 0, -330), 0, (("stdcompat__format_s.mli", 472, 13219, 13219), ("stdcompat__format_s.mli", 472, 13219, 13248), 0), 0, Tag1 ("Stdcompat__format_s", 91)), 0); (("pp_print_space", 1125), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -329), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -328), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -327), 0), 100000000, 0, -326), 0), 100000000, 0, -325), 0, (("stdcompat__format_s.mli", 475, 13288, 13288), ("stdcompat__format_s.mli", 475, 13288, 13334), 0), 0, Tag1 ("Stdcompat__format_s", 92)), 0); (("print_space", 1126), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -324), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -323), 0), 100000000, 0, -322), 0, (("stdcompat__format_s.mli", 478, 13378, 13378), ("stdcompat__format_s.mli", 478, 13378, 13408), 0), 0, Tag1 ("Stdcompat__format_s", 93)), 0); (("pp_print_cut", 1127), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -321), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -320), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -319), 0), 100000000, 0, -318), 0), 100000000, 0, -317), 0, (("stdcompat__format_s.mli", 481, 13449, 13449), ("stdcompat__format_s.mli", 481, 13449, 13493), 0), 0, Tag1 ("Stdcompat__format_s", 94)), 0); (("print_cut", 1128), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -316), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -315), 0), 100000000, 0, -314), 0, (("stdcompat__format_s.mli", 484, 13535, 13535), ("stdcompat__format_s.mli", 484, 13535, 13563), 0), 0, Tag1 ("Stdcompat__format_s", 95)), 0); (("pp_print_break", 1129), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -313), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -312), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -311), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -310), 0), 100000000, 0, -309), 0), 100000000, 0, -308), 0), 100000000, 0, -307), 0, (("stdcompat__format_s.mli", 487, 13602, 13602), ("stdcompat__format_s.mli", 487, 13602, 13654), 0), 0, Tag1 ("Stdcompat__format_s", 96)), 0); (("print_break", 1130), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -306), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -305), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -304), 0), 100000000, 0, -303), 0), 100000000, 0, -302), 0, (("stdcompat__format_s.mli", 490, 13698, 13698), ("stdcompat__format_s.mli", 490, 13698, 13734), 0), 0, Tag1 ("Stdcompat__format_s", 97)), 0); (("pp_force_newline", 1131), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -301), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -300), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -299), 0), 100000000, 0, -298), 0), 100000000, 0, -297), 0, (("stdcompat__format_s.mli", 493, 13775, 13775), ("stdcompat__format_s.mli", 493, 13775, 13823), 0), 0, Tag1 ("Stdcompat__format_s", 98)), 0); (("force_newline", 1132), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -296), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -295), 0), 100000000, 0, -294), 0, (("stdcompat__format_s.mli", 496, 13869, 13869), ("stdcompat__format_s.mli", 496, 13869, 13901), 0), 0, Tag1 ("Stdcompat__format_s", 99)), 0); (("pp_print_if_newline", 1133), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -293), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -292), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -291), 0), 100000000, 0, -290), 0), 100000000, 0, -289), 0, (("stdcompat__format_s.mli", 499, 13944, 13944), ("stdcompat__format_s.mli", 499, 13944, 13995), 0), 0, Tag1 ("Stdcompat__format_s", 100)), 0); (("print_if_newline", 1134), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -288), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -287), 0), 100000000, 0, -286), 0, (("stdcompat__format_s.mli", 502, 14044, 14044), ("stdcompat__format_s.mli", 502, 14044, 14079), 0), 0, Tag1 ("Stdcompat__format_s", 101)), 0); (("pp_print_flush", 1135), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -285), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -284), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -283), 0), 100000000, 0, -282), 0), 100000000, 0, -281), 0, (("stdcompat__format_s.mli", 505, 14125, 14125), ("stdcompat__format_s.mli", 505, 14125, 14171), 0), 0, Tag1 ("Stdcompat__format_s", 102)), 0); (("print_flush", 1136), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -280), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -279), 0), 100000000, 0, -278), 0, (("stdcompat__format_s.mli", 508, 14215, 14215), ("stdcompat__format_s.mli", 508, 14215, 14245), 0), 0, Tag1 ("Stdcompat__format_s", 103)), 0); (("pp_print_newline", 1137), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -277), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -276), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -275), 0), 100000000, 0, -274), 0), 100000000, 0, -273), 0, (("stdcompat__format_s.mli", 511, 14286, 14286), ("stdcompat__format_s.mli", 511, 14286, 14334), 0), 0, Tag1 ("Stdcompat__format_s", 104)), 0); (("print_newline", 1138), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -272), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -271), 0), 100000000, 0, -270), 0, (("stdcompat__format_s.mli", 514, 14380, 14380), ("stdcompat__format_s.mli", 514, 14380, 14412), 0), 0, Tag1 ("Stdcompat__format_s", 105)), 0); (("pp_set_margin", 1139), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -269), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -268), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -267), 0), 100000000, 0, -266), 0), 100000000, 0, -265), 0, (("stdcompat__format_s.mli", 517, 14455, 14455), ("stdcompat__format_s.mli", 517, 14455, 14499), 0), 0, Tag1 ("Stdcompat__format_s", 106)), 0); (("set_margin", 1140), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -264), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -263), 0), 100000000, 0, -262), 0, (("stdcompat__format_s.mli", 520, 14542, 14542), ("stdcompat__format_s.mli", 520, 14542, 14570), 0), 0, Tag1 ("Stdcompat__format_s", 107)), 0); (("pp_get_margin", 1141), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -261), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -260), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -259), 0), 100000000, 0, -258), 0), 100000000, 0, -257), 0, (("stdcompat__format_s.mli", 523, 14610, 14610), ("stdcompat__format_s.mli", 523, 14610, 14654), 0), 0, Tag1 ("Stdcompat__format_s", 108)), 0); (("get_margin", 1142), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -256), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -255), 0), 100000000, 0, -254), 0, (("stdcompat__format_s.mli", 526, 14697, 14697), ("stdcompat__format_s.mli", 526, 14697, 14725), 0), 0, Tag1 ("Stdcompat__format_s", 109)), 0); (("pp_set_max_indent", 1143), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -253), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -252), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -251), 0), 100000000, 0, -250), 0), 100000000, 0, -249), 0, (("stdcompat__format_s.mli", 529, 14765, 14765), ("stdcompat__format_s.mli", 529, 14765, 14813), 0), 0, Tag1 ("Stdcompat__format_s", 110)), 0); (("set_max_indent", 1144), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -248), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -247), 0), 100000000, 0, -246), 0, (("stdcompat__format_s.mli", 532, 14860, 14860), ("stdcompat__format_s.mli", 532, 14860, 14892), 0), 0, Tag1 ("Stdcompat__format_s", 111)), 0); (("pp_get_max_indent", 1145), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -245), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -244), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -243), 0), 100000000, 0, -242), 0), 100000000, 0, -241), 0, (("stdcompat__format_s.mli", 535, 14936, 14936), ("stdcompat__format_s.mli", 535, 14936, 14984), 0), 0, Tag1 ("Stdcompat__format_s", 112)), 0); (("get_max_indent", 1146), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -240), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -239), 0), 100000000, 0, -238), 0, (("stdcompat__format_s.mli", 538, 15031, 15031), ("stdcompat__format_s.mli", 538, 15031, 15063), 0), 0, Tag1 ("Stdcompat__format_s", 113)), 0); (("pp_set_max_boxes", 1147), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -237), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -236), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -235), 0), 100000000, 0, -234), 0), 100000000, 0, -233), 0, (("stdcompat__format_s.mli", 541, 15107, 15107), ("stdcompat__format_s.mli", 541, 15107, 15154), 0), 0, Tag1 ("Stdcompat__format_s", 114)), 0); (("set_max_boxes", 1148), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -232), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -231), 0), 100000000, 0, -230), 0, (("stdcompat__format_s.mli", 544, 15200, 15200), ("stdcompat__format_s.mli", 544, 15200, 15231), 0), 0, Tag1 ("Stdcompat__format_s", 115)), 0); (("pp_get_max_boxes", 1149), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -229), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -228), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -227), 0), 100000000, 0, -226), 0), 100000000, 0, -225), 0, (("stdcompat__format_s.mli", 547, 15274, 15274), ("stdcompat__format_s.mli", 547, 15274, 15321), 0), 0, Tag1 ("Stdcompat__format_s", 116)), 0); (("get_max_boxes", 1150), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -224), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -223), 0), 100000000, 0, -222), 0, (("stdcompat__format_s.mli", 550, 15367, 15367), ("stdcompat__format_s.mli", 550, 15367, 15398), 0), 0, Tag1 ("Stdcompat__format_s", 117)), 0); (("pp_over_max_boxes", 1151), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -221), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -220), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -219), 0), 100000000, 0, -218), 0), 100000000, 0, -217), 0, (("stdcompat__format_s.mli", 553, 15441, 15441), ("stdcompat__format_s.mli", 553, 15441, 15490), 0), 0, Tag1 ("Stdcompat__format_s", 118)), 0); (("over_max_boxes", 1152), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -216), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -215), 0), 100000000, 0, -214), 0, (("stdcompat__format_s.mli", 556, 15537, 15537), ("stdcompat__format_s.mli", 556, 15537, 15570), 0), 0, Tag1 ("Stdcompat__format_s", 119)), 0); (("pp_open_tbox", 1153), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -213), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -212), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -211), 0), 100000000, 0, -210), 0), 100000000, 0, -209), 0, (("stdcompat__format_s.mli", 560, 15615, 15615), ("stdcompat__format_s.mli", 560, 15615, 15659), 0), 0, Tag1 ("Stdcompat__format_s", 120)), 0); (("open_tbox", 1154), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -208), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -207), 0), 100000000, 0, -206), 0, (("stdcompat__format_s.mli", 580, 16182, 16182), ("stdcompat__format_s.mli", 580, 16182, 16210), 0), 0, Tag1 ("Stdcompat__format_s", 121)), 0); (("pp_close_tbox", 1155), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -205), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -204), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -203), 0), 100000000, 0, -202), 0), 100000000, 0, -201), 0, (("stdcompat__format_s.mli", 600, 16621, 16621), ("stdcompat__format_s.mli", 600, 16621, 16666), 0), 0, Tag1 ("Stdcompat__format_s", 122)), 0); (("close_tbox", 1156), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -200), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -199), 0), 100000000, 0, -198), 0, (("stdcompat__format_s.mli", 620, 17196, 17196), ("stdcompat__format_s.mli", 620, 17196, 17225), 0), 0, Tag1 ("Stdcompat__format_s", 123)), 0); (("pp_set_tab", 1157), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -197), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -196), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -195), 0), 100000000, 0, -194), 0), 100000000, 0, -193), 0, (("stdcompat__format_s.mli", 640, 17643, 17643), ("stdcompat__format_s.mli", 640, 17643, 17685), 0), 0, Tag1 ("Stdcompat__format_s", 124)), 0); (("set_tab", 1158), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -192), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -191), 0), 100000000, 0, -190), 0, (("stdcompat__format_s.mli", 660, 18194, 18194), ("stdcompat__format_s.mli", 660, 18194, 18220), 0), 0, Tag1 ("Stdcompat__format_s", 125)), 0); (("pp_print_tab", 1159), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -189), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -188), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -187), 0), 100000000, 0, -186), 0), 100000000, 0, -185), 0, (("stdcompat__format_s.mli", 680, 18617, 18617), ("stdcompat__format_s.mli", 680, 18617, 18661), 0), 0, Tag1 ("Stdcompat__format_s", 126)), 0); (("print_tab", 1160), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -184), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -183), 0), 100000000, 0, -182), 0, (("stdcompat__format_s.mli", 700, 19184, 19184), ("stdcompat__format_s.mli", 700, 19184, 19212), 0), 0, Tag1 ("Stdcompat__format_s", 127)), 0); (("pp_print_tbreak", 1161), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -181), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -180), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -179), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -178), 0), 100000000, 0, -177), 0), 100000000, 0, -176), 0), 100000000, 0, -175), 0, (("stdcompat__format_s.mli", 720, 19623, 19623), ("stdcompat__format_s.mli", 720, 19623, 19676), 0), 0, Tag1 ("Stdcompat__format_s", 128)), 0); (("print_tbreak", 1162), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -174), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -173), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -172), 0), 100000000, 0, -171), 0), 100000000, 0, -170), 0, (("stdcompat__format_s.mli", 740, 20262, 20262), ("stdcompat__format_s.mli", 740, 20262, 20299), 0), 0, Tag1 ("Stdcompat__format_s", 129)), 0); (("pp_set_ellipsis_text", 1163), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -169), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -168), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -167), 0), 100000000, 0, -166), 0), 100000000, 0, -165), 0, (("stdcompat__format_s.mli", 759, 20772, 20772), ("stdcompat__format_s.mli", 759, 20772, 20826), 0), 0, Tag1 ("Stdcompat__format_s", 130)), 0); (("set_ellipsis_text", 1164), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -164), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -163), 0), 100000000, 0, -162), 0, (("stdcompat__format_s.mli", 762, 20876, 20876), ("stdcompat__format_s.mli", 762, 20876, 20914), 0), 0, Tag1 ("Stdcompat__format_s", 131)), 0); (("pp_get_ellipsis_text", 1165), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -161), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -160), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -159), 0), 100000000, 0, -158), 0), 100000000, 0, -157), 0, (("stdcompat__format_s.mli", 765, 20961, 20961), ("stdcompat__format_s.mli", 765, 20961, 21015), 0), 0, Tag1 ("Stdcompat__format_s", 132)), 0); (("get_ellipsis_text", 1166), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -156), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -155), 0), 100000000, 0, -154), 0, (("stdcompat__format_s.mli", 768, 21065, 21065), ("stdcompat__format_s.mli", 768, 21065, 21103), 0), 0, Tag1 ("Stdcompat__format_s", 133)), 0); (("pp_set_tags", 1167), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -153), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -152), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -151), 0), 100000000, 0, -150), 0), 100000000, 0, -149), 0, (("stdcompat__format_s.mli", 771, 21150, 21150), ("stdcompat__format_s.mli", 771, 21150, 21193), 0), 0, Tag1 ("Stdcompat__format_s", 134)), 0); (("set_tags", 1168), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -148), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -147), 0), 100000000, 0, -146), 0, (("stdcompat__format_s.mli", 774, 21234, 21234), ("stdcompat__format_s.mli", 774, 21234, 21261), 0), 0, Tag1 ("Stdcompat__format_s", 135)), 0); (("pp_set_print_tags", 1169), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -145), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -144), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -143), 0), 100000000, 0, -142), 0), 100000000, 0, -141), 0, (("stdcompat__format_s.mli", 777, 21299, 21299), ("stdcompat__format_s.mli", 777, 21299, 21348), 0), 0, Tag1 ("Stdcompat__format_s", 136)), 0); (("set_print_tags", 1170), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -140), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -139), 0), 100000000, 0, -138), 0, (("stdcompat__format_s.mli", 780, 21395, 21395), ("stdcompat__format_s.mli", 780, 21395, 21428), 0), 0, Tag1 ("Stdcompat__format_s", 137)), 0); (("pp_set_mark_tags", 1171), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -137), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -136), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -135), 0), 100000000, 0, -134), 0), 100000000, 0, -133), 0, (("stdcompat__format_s.mli", 783, 21472, 21472), ("stdcompat__format_s.mli", 783, 21472, 21520), 0), 0, Tag1 ("Stdcompat__format_s", 138)), 0); (("set_mark_tags", 1172), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -132), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -131), 0), 100000000, 0, -130), 0, (("stdcompat__format_s.mli", 786, 21566, 21566), ("stdcompat__format_s.mli", 786, 21566, 21598), 0), 0, Tag1 ("Stdcompat__format_s", 139)), 0); (("pp_get_print_tags", 1173), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -129), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -128), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -127), 0), 100000000, 0, -126), 0), 100000000, 0, -125), 0, (("stdcompat__format_s.mli", 789, 21641, 21641), ("stdcompat__format_s.mli", 789, 21641, 21690), 0), 0, Tag1 ("Stdcompat__format_s", 140)), 0); (("get_print_tags", 1174), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -124), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -123), 0), 100000000, 0, -122), 0, (("stdcompat__format_s.mli", 792, 21737, 21737), ("stdcompat__format_s.mli", 792, 21737, 21770), 0), 0, Tag1 ("Stdcompat__format_s", 141)), 0); (("pp_get_mark_tags", 1175), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -121), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -120), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -119), 0), 100000000, 0, -118), 0), 100000000, 0, -117), 0, (("stdcompat__format_s.mli", 795, 21814, 21814), ("stdcompat__format_s.mli", 795, 21814, 21862), 0), 0, Tag1 ("Stdcompat__format_s", 142)), 0); (("get_mark_tags", 1176), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -116), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -115), 0), 100000000, 0, -114), 0, (("stdcompat__format_s.mli", 798, 21908, 21908), ("stdcompat__format_s.mli", 798, 21908, 21940), 0), 0, Tag1 ("Stdcompat__format_s", 143)), 0); (("pp_set_formatter_out_channel", 1177), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -113), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -112), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -111), 0), 100000000, 0, -110), 0), 100000000, 0, -109), 0, (("stdcompat__format_s.mli", 801, 21983, 21983), ("stdcompat__format_s.mli", 801, 21983, 22050), 0), 0, Tag1 ("Stdcompat__format_s", 144)), 0); (("set_formatter_out_channel", 1178), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -108), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -107), 0), 100000000, 0, -106), 0, (("stdcompat__format_s.mli", 804, 22108, 22108), ("stdcompat__format_s.mli", 804, 22108, 22159), 0), 0, Tag1 ("Stdcompat__format_s", 145)), 0); (("pp_set_formatter_output_functions", 1179), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -105), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -104), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -103), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -102), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -101), 0), 100000000, 0, -100), 0), 100000000, 0, -99), 0), 100000000, 0, -98), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -97), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -96), 0), 100000000, 0, -95), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -94), 0), 100000000, 0, -93), 0), 100000000, 0, -92), 0), 100000000, 0, -91), 0, (("stdcompat__format_s.mli", 807, 22214, 22214), ("stdcompat__format_s.mli", 808, 22254, 22325), 0), 0, Tag1 ("Stdcompat__format_s", 146)), 0); (("set_formatter_output_functions", 1180), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -90), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -89), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -88), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -87), 0), 100000000, 0, -86), 0), 100000000, 0, -85), 0), 100000000, 0, -84), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -83), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -82), 0), 100000000, 0, -81), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -80), 0), 100000000, 0, -79), 0), 100000000, 0, -78), 0, (("stdcompat__format_s.mli", 811, 22388, 22388), ("stdcompat__format_s.mli", 812, 22425, 22483), 0), 0, Tag1 ("Stdcompat__format_s", 147)), 0); (("pp_get_formatter_output_functions", 1181), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -77), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -76), (Tag2 ([(Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -72), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -71), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -70), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -69), 0), 100000000, 0, -68), 0), 100000000, 0, -67), 0), 100000000, 0, -66); (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -75), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -74), 0), 100000000, 0, -73)]), 100000000, 0, -65), 0), 100000000, 0, -64), 0), 100000000, 0, -63), 0, (("stdcompat__format_s.mli", 815, 22543, 22543), ("stdcompat__format_s.mli", 816, 22583, 22655), 0), 0, Tag1 ("Stdcompat__format_s", 148)), 0); (("get_formatter_output_functions", 1182), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -62), (Tag2 ([(Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -58), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -57), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -56), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -55), 0), 100000000, 0, -54), 0), 100000000, 0, -53), 0), 100000000, 0, -52); (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -61), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -60), 0), 100000000, 0, -59)]), 100000000, 0, -51), 0), 100000000, 0, -50), 0, (("stdcompat__format_s.mli", 819, 22718, 22718), ("stdcompat__format_s.mli", 820, 22755, 22814), 0), 0, Tag1 ("Stdcompat__format_s", 149)), 0); (("formatter_of_out_channel", 1183), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -49), (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -48), 0), 100000000, 0, -47), 0, (("stdcompat__format_s.mli", 823, 22874, 22874), ("stdcompat__format_s.mli", 823, 22874, 22929), 0), 0, Tag1 ("Stdcompat__format_s", 150)), 0); (("std_formatter", 1184), ((Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -46), 0, (("stdcompat__format_s.mli", 826, 22983, 22983), ("stdcompat__format_s.mli", 826, 22983, 23012), 0), 0, Tag1 ("Stdcompat__format_s", 151)), 0); (("err_formatter", 1185), ((Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -45), 0, (("stdcompat__format_s.mli", 829, 23055, 23055), ("stdcompat__format_s.mli", 829, 23055, 23084), 0), 0, Tag1 ("Stdcompat__format_s", 152)), 0); (("formatter_of_buffer", 1186), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Buffer"), "t"), 0, (0)), 100000000, 0, -44), (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -43), 0), 100000000, 0, -42), 0, (("stdcompat__format_s.mli", 832, 23127, 23127), ("stdcompat__format_s.mli", 832, 23127, 23174), 0), 0, Tag1 ("Stdcompat__format_s", 153)), 0); (("stdbuf", 1187), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Buffer"), "t"), 0, (0)), 100000000, 0, -41), 0, (("stdcompat__format_s.mli", 835, 23223, 23223), ("stdcompat__format_s.mli", 835, 23223, 23244), 0), 0, Tag1 ("Stdcompat__format_s", 154)), 0); (("str_formatter", 1188), ((Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -40), 0, (("stdcompat__format_s.mli", 838, 23280, 23280), ("stdcompat__format_s.mli", 838, 23280, 23309), 0), 0, Tag1 ("Stdcompat__format_s", 155)), 0); (("flush_str_formatter", 1189), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -39), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -38), 0), 100000000, 0, -37), 0, (("stdcompat__format_s.mli", 841, 23352, 23352), ("stdcompat__format_s.mli", 841, 23352, 23392), 0), 0, Tag1 ("Stdcompat__format_s", 156)), 0); (("make_formatter", 1190), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -36), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -35), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -34), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -33), 0), 100000000, 0, -32), 0), 100000000, 0, -31), 0), 100000000, 0, -30), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -29), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -28), 0), 100000000, 0, -27), (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -26), 0), 100000000, 0, -25), 0), 100000000, 0, -24), 0, (("stdcompat__format_s.mli", 844, 23441, 23441), ("stdcompat__format_s.mli", 845, 23462, 23525), 0), 0, Tag1 ("Stdcompat__format_s", 157)), 0); (("fprintf", 1191), ((Tag1 (0, (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -23), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format"), [((("a")), 100000000, 0, -19); (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -21); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -22)], (0)), 100000000, 0, -20), ((("a")), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("stdcompat__format_s.mli", 848, 23569, 23569), ("stdcompat__format_s.mli", 848, 23569, 23630), 0), 0, Tag1 ("Stdcompat__format_s", 158)), 0); (("printf", 1192), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format"), [((("a")), 100000000, 0, -13); (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -15); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -16)], (0)), 100000000, 0, -14), ((("a")), 100000000, 0, -13), 0), 100000000, 0, -12), 0, (("stdcompat__format_s.mli", 851, 23667, 23667), ("stdcompat__format_s.mli", 851, 23667, 23714), 0), 0, Tag1 ("Stdcompat__format_s", 159)), 0); (("eprintf", 1193), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format"), [((("a")), 100000000, 0, -8); (Tag3 ((("formatter", 1049)), 0, (0)), 100000000, 0, -10); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -11)], (0)), 100000000, 0, -9), ((("a")), 100000000, 0, -8), 0), 100000000, 0, -7), 0, (("stdcompat__format_s.mli", 854, 23750, 23750), ("stdcompat__format_s.mli", 854, 23750, 23798), 0), 0, Tag1 ("Stdcompat__format_s", 160)), 0); (("sprintf", 1194), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format"), [((("a")), 100000000, 0, -3); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6)], (0)), 100000000, 0, -4), ((("a")), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("stdcompat__format_s.mli", 857, 23835, 23835), ("stdcompat__format_s.mli", 857, 23835, 23880), 0), 0, Tag1 ("Stdcompat__format_s", 161)), 0)], "Stdcompat__format", [("Stdcompat__format", ("\200\233\004\235\015\192\129jM\225\1482\167\231\178\234")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Stdcompat__format_s", ("@\191u0\210\166eW5'\240\bwF\027\139")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
val sprintf : ('a, unit, string) format -> 'a

val binary_search :
  ?pos:int ->
  ?len:int ->
  't ->
  length:('t -> int) ->
  get:('t -> int -> 'elt) ->
  compare:('elt -> 'key -> int) ->
  [ `First_equal_to
  | `First_greater_than_or_equal_to
  | `First_strictly_greater_than
  | `Last_equal_to
  | `Last_less_than_or_equal_to
  | `Last_strictly_less_than ] -> 'key -> int option
val binary_search_segmented :
  ?pos:int ->
  ?len:int ->
  't ->
  length:('t -> int) ->
  get:('t -> int -> 'elt) ->
  segment_of:('elt -> [ `Left | `Right ]) ->
  ("DEBUG:rule", [(("binary_search", 784), ((Tag1 (Tag1 ("pos"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -53)], (0)), 100000000, 0, -52), (Tag1 (Tag1 ("len"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -51)], (0)), 100000000, 0, -50), (Tag1 (0, ((("t")), 100000000, 0, -47), (Tag1 (("length"), (Tag1 (0, ((("t")), 100000000, 0, -47), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -49), 0), 100000000, 0, -48), (Tag1 (("get"), (Tag1 (0, ((("t")), 100000000, 0, -47), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -46), ((("elt")), 100000000, 0, -43), 0), 100000000, 0, -45), 0), 100000000, 0, -44), (Tag1 (("compare"), (Tag1 (0, ((("elt")), 100000000, 0, -43), (Tag1 (0, ((("key")), 100000000, 0, -37), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -42), 0), 100000000, 0, -41), 0), 100000000, 0, -40), (Tag1 (0, (Tag8 (([("First_equal_to", (0)); ("First_greater_than_or_equal_to", (0)); ("First_strictly_greater_than", (0)); ("Last_equal_to", (0)); ("Last_less_than_or_equal_to", (0)); ("Last_strictly_less_than", (0))], (0, 100000000, 0, -39), 1, 0, 0)), 100000000, 0, -38), (Tag1 (0, ((("key")), 100000000, 0, -37), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -36)], (0)), 100000000, 0, -35), 0), 100000000, 0, -34), 0), 100000000, 0, -33), 0), 100000000, 0, -32), 0), 100000000, 0, -31), 0), 100000000, 0, -30), 0), 100000000, 0, -29), 0), 100000000, 0, -28), 0), 100000000, 0, -27), 0, (("src/binary_search.mli", 43, 1716, 1716), ("src/binary_search.mli", 58, 2421, 2436), 0), 0, Tag1 ("Base__Binary_search", 0)), 0); (("binary_search_segmented", 785), ((Tag1 (Tag1 ("pos"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -26)], (0)), 100000000, 0, -25), (Tag1 (Tag1 ("len"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -24)], (0)), 100000000, 0, -23), (Tag1 (0, ((("t")), 100000000, 0, -20), (Tag1 (("length"), (Tag1 (0, ((("t")), 100000000, 0, -20), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -22), 0), 100000000, 0, -21), (Tag1 (("get"), (Tag1 (0, ((("t")), 100000000, 0, -20), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -19), ((("elt")), 100000000, 0, -16), 0), 100000000, 0, -18), 0), 100000000, 0, -17), (Tag1 (("segment_of"), (Tag1 (0, ((("elt")), 100000000, 0, -16), (Tag8 (([("Left", (0)); ("Right", (0))], (0, 100000000, 0, -15), 1, 0, 0)), 100000000, 0, -14), 0), 100000000, 0, -13), (Tag1 (0, (Tag8 (([("First_on_right", (0)); ("Last_on_left", (0))], (0, 100000000, 0, -12), 1, 0, 0)), 100000000, 0, -11), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -10)], (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/binary_search.mli", 78, 3359, 3359), ("src/binary_search.mli", 86, 3592, 3607), 0), 0, Tag1 ("Base__Binary_search", 1)), 0)], "Base__Binary_search", [("Base__Binary_search", ("\201\145\196n\014\246D\144\152\213\209\222\173\022!*")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__StdLabels", (".\193\n\229\139\017\212C-ZA\\kz-\128")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__MoreLabels", ("\248\232\248\254`<\230\241\161U\193U\1466J\238")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shadow_stdlib", ("\219zi\164\203\158e)\232\221\196\168\138x\142\018")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Base_internalhash_types", ("0\148#2\226\223\018\135\173>!\020\237\017\255\149")); ("Base__Sexp", ("\154\187\171&\209=\153[\236\250!U\174`\190T")); ("Base__Ppx_hash_lib", ("\199\141\178\193\006\209L\007^\020(\131\224sn8")); ("Base__Ppx_compare_lib", ("\243\186~\233\228\199Ah\181.\223\004e\231\129S")); ("Base__Poly0", ("\230;\143\234\255.H\132KOe7\155\\\023f")); ("Base__Import0", ("\156\129U\197Y[\\\153\017Ho\203\173\204\220\020")); ("Base__Import", ("\014\187\247\141\187\181\142g\176:s_,\181\219\209")); ("Base__Hash_intf", ("h\004P\218\1531G\127\212\208A\024\140\164iq")); ("Base__Hash", ("\206Rc\194\234{s3\248\165\024\162\203{\206\206")); ("Base__Globalize", ("<\243w~.\180\196t\159\193\174[\227\139\215G")); ("Base__Bool0", ("\177f\254p\023\143&\239\020\136\206\242~\018F\251")); ("Base__", ("p\252\007\139\128\163W\025+\0225\001\246|P\158"))], [(0)])
[ `First_on_right | `Last_on_left ] -> int option

type token =
    END
  | Title of (int * string option)
  | BOLD
  | EMP
  | CENTER
  | LEFT
  | RIGHT
  | ITALIC
  | CUSTOM of string
  | LIST
  | ENUM
  | ITEM
  | LINK
  | CODE
  | END_CODE
  | CODE_PRE
  | END_CODE_PRE
  | VERB
  | END_VERB
  | LATEX
  | Target of string
  | END_TARGET
  | LBRACE
  | ELE_REF
  | VAL_REF
  | TYP_REF
  | EXT_REF
  | EXC_REF
  | MOD_REF
  | MODT_REF
  | CLA_REF
  | CLT_REF
  | ATT_REF
  | MET_REF
  | SEC_REF
  | RECF_REF
  | CONST_REF
  | MOD_LIST_REF
  | INDEX_LIST
  | SUPERSCRIPT
  | SUBSCRIPT
  | BEGIN_SHORTCUT_LIST_ITEM
  | BEGIN_SHORTCUT_ENUM_ITEM
  | SHORTCUT_LIST_ITEM
  | SHORTCUT_ENUM_ITEM
  | END_SHORTCUT_LIST
  | BLANK_LINE
  | EOF
  | Char of string
val main : (Lexing.lexbuf -> token) -> Lexing.lexbuf -> Odoc_types.text
val located_element_list :
  (Lexing.lexbuf -> token) ->
  ("DEBUG:rule", [Tag1 (("token", 364), (0, 0, Tag1 ([(("END", 270), (0), 0, (("odoc_text_parser.mli", 2, 13, 15), ("odoc_text_parser.mli", 2, 13, 20), 0), 0, Tag1 ("Odoc_text_parser", 1)); (("Title", 271), ([(Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -21); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -23)], (0)), 100000000, 0, -22)]), 100000000, 0, -20)]), 0, (("odoc_text_parser.mli", 3, 21, 23), ("odoc_text_parser.mli", 7, 119, 120), 0), 0, Tag1 ("Odoc_text_parser", 2)); (("BOLD", 272), (0), 0, (("odoc_text_parser.mli", 8, 121, 123), ("odoc_text_parser.mli", 8, 121, 129), 0), 0, Tag1 ("Odoc_text_parser", 3)); (("EMP", 273), (0), 0, (("odoc_text_parser.mli", 9, 130, 132), ("odoc_text_parser.mli", 9, 130, 137), 0), 0, Tag1 ("Odoc_text_parser", 4)); (("CENTER", 274), (0), 0, (("odoc_text_parser.mli", 10, 138, 140), ("odoc_text_parser.mli", 10, 138, 148), 0), 0, Tag1 ("Odoc_text_parser", 5)); (("LEFT", 275), (0), 0, (("odoc_text_parser.mli", 11, 149, 151), ("odoc_text_parser.mli", 11, 149, 157), 0), 0, Tag1 ("Odoc_text_parser", 6)); (("RIGHT", 276), (0), 0, (("odoc_text_parser.mli", 12, 158, 160), ("odoc_text_parser.mli", 12, 158, 167), 0), 0, Tag1 ("Odoc_text_parser", 7)); (("ITALIC", 277), (0), 0, (("odoc_text_parser.mli", 13, 168, 170), ("odoc_text_parser.mli", 13, 168, 178), 0), 0, Tag1 ("Odoc_text_parser", 8)); (("CUSTOM", 278), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -24)]), 0, (("odoc_text_parser.mli", 14, 179, 181), ("odoc_text_parser.mli", 18, 266, 267), 0), 0, Tag1 ("Odoc_text_parser", 9)); (("LIST", 279), (0), 0, (("odoc_text_parser.mli", 19, 268, 270), ("odoc_text_parser.mli", 19, 268, 276), 0), 0, Tag1 ("Odoc_text_parser", 10)); (("ENUM", 280), (0), 0, (("odoc_text_parser.mli", 20, 277, 279), ("odoc_text_parser.mli", 20, 277, 285), 0), 0, Tag1 ("Odoc_text_parser", 11)); (("ITEM", 281), (0), 0, (("odoc_text_parser.mli", 21, 286, 288), ("odoc_text_parser.mli", 21, 286, 294), 0), 0, Tag1 ("Odoc_text_parser", 12)); (("LINK", 282), (0), 0, (("odoc_text_parser.mli", 22, 295, 297), ("odoc_text_parser.mli", 22, 295, 303), 0), 0, Tag1 ("Odoc_text_parser", 13)); (("CODE", 283), (0), 0, (("odoc_text_parser.mli", 23, 304, 306), ("odoc_text_parser.mli", 23, 304, 312), 0), 0, Tag1 ("Odoc_text_parser", 14)); (("END_CODE", 284), (0), 0, (("odoc_text_parser.mli", 24, 313, 315), ("odoc_text_parser.mli", 24, 313, 325), 0), 0, Tag1 ("Odoc_text_parser", 15)); (("CODE_PRE", 285), (0), 0, (("odoc_text_parser.mli", 25, 326, 328), ("odoc_text_parser.mli", 25, 326, 338), 0), 0, Tag1 ("Odoc_text_parser", 16)); (("END_CODE_PRE", 286), (0), 0, (("odoc_text_parser.mli", 26, 339, 341), ("odoc_text_parser.mli", 26, 339, 355), 0), 0, Tag1 ("Odoc_text_parser", 17)); (("VERB", 287), (0), 0, (("odoc_text_parser.mli", 27, 356, 358), ("odoc_text_parser.mli", 27, 356, 364), 0), 0, Tag1 ("Odoc_text_parser", 18)); (("END_VERB", 288), (0), 0, (("odoc_text_parser.mli", 28, 365, 367), ("odoc_text_parser.mli", 28, 365, 377), 0), 0, Tag1 ("Odoc_text_parser", 19)); (("LATEX", 289), (0), 0, (("odoc_text_parser.mli", 29, 378, 380), ("odoc_text_parser.mli", 29, 378, 387), 0), 0, Tag1 ("Odoc_text_parser", 20)); (("Target", 290), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -25)]), 0, (("odoc_text_parser.mli", 30, 388, 390), ("odoc_text_parser.mli", 34, 475, 476), 0), 0, Tag1 ("Odoc_text_parser", 21)); (("END_TARGET", 291), (0), 0, (("odoc_text_parser.mli", 35, 477, 479), ("odoc_text_parser.mli", 35, 477, 491), 0), 0, Tag1 ("Odoc_text_parser", 22)); (("LBRACE", 292), (0), 0, (("odoc_text_parser.mli", 36, 492, 494), ("odoc_text_parser.mli", 36, 492, 502), 0), 0, Tag1 ("Odoc_text_parser", 23)); (("ELE_REF", 293), (0), 0, (("odoc_text_parser.mli", 37, 503, 505), ("odoc_text_parser.mli", 37, 503, 514), 0), 0, Tag1 ("Odoc_text_parser", 24)); (("VAL_REF", 294), (0), 0, (("odoc_text_parser.mli", 38, 515, 517), ("odoc_text_parser.mli", 38, 515, 526), 0), 0, Tag1 ("Odoc_text_parser", 25)); (("TYP_REF", 295), (0), 0, (("odoc_text_parser.mli", 39, 527, 529), ("odoc_text_parser.mli", 39, 527, 538), 0), 0, Tag1 ("Odoc_text_parser", 26)); (("EXT_REF", 296), (0), 0, (("odoc_text_parser.mli", 40, 539, 541), ("odoc_text_parser.mli", 40, 539, 550), 0), 0, Tag1 ("Odoc_text_parser", 27)); (("EXC_REF", 297), (0), 0, (("odoc_text_parser.mli", 41, 551, 553), ("odoc_text_parser.mli", 41, 551, 562), 0), 0, Tag1 ("Odoc_text_parser", 28)); (("MOD_REF", 298), (0), 0, (("odoc_text_parser.mli", 42, 563, 565), ("odoc_text_parser.mli", 42, 563, 574), 0), 0, Tag1 ("Odoc_text_parser", 29)); (("MODT_REF", 299), (0), 0, (("odoc_text_parser.mli", 43, 575, 577), ("odoc_text_parser.mli", 43, 575, 587), 0), 0, Tag1 ("Odoc_text_parser", 30)); (("CLA_REF", 300), (0), 0, (("odoc_text_parser.mli", 44, 588, 590), ("odoc_text_parser.mli", 44, 588, 599), 0), 0, Tag1 ("Odoc_text_parser", 31)); (("CLT_REF", 301), (0), 0, (("odoc_text_parser.mli", 45, 600, 602), ("odoc_text_parser.mli", 45, 600, 611), 0), 0, Tag1 ("Odoc_text_parser", 32)); (("ATT_REF", 302), (0), 0, (("odoc_text_parser.mli", 46, 612, 614), ("odoc_text_parser.mli", 46, 612, 623), 0), 0, Tag1 ("Odoc_text_parser", 33)); (("MET_REF", 303), (0), 0, (("odoc_text_parser.mli", 47, 624, 626), ("odoc_text_parser.mli", 47, 624, 635), 0), 0, Tag1 ("Odoc_text_parser", 34)); (("SEC_REF", 304), (0), 0, (("odoc_text_parser.mli", 48, 636, 638), ("odoc_text_parser.mli", 48, 636, 647), 0), 0, Tag1 ("Odoc_text_parser", 35)); (("RECF_REF", 305), (0), 0, (("odoc_text_parser.mli", 49, 648, 650), ("odoc_text_parser.mli", 49, 648, 660), 0), 0, Tag1 ("Odoc_text_parser", 36)); (("CONST_REF", 306), (0), 0, (("odoc_text_parser.mli", 50, 661, 663), ("odoc_text_parser.mli", 50, 661, 674), 0), 0, Tag1 ("Odoc_text_parser", 37)); (("MOD_LIST_REF", 307), (0), 0, (("odoc_text_parser.mli", 51, 675, 677), ("odoc_text_parser.mli", 51, 675, 691), 0), 0, Tag1 ("Odoc_text_parser", 38)); (("INDEX_LIST", 308), (0), 0, (("odoc_text_parser.mli", 52, 692, 694), ("odoc_text_parser.mli", 52, 692, 706), 0), 0, Tag1 ("Odoc_text_parser", 39)); (("SUPERSCRIPT", 309), (0), 0, (("odoc_text_parser.mli", 53, 707, 709), ("odoc_text_parser.mli", 53, 707, 722), 0), 0, Tag1 ("Odoc_text_parser", 40)); (("SUBSCRIPT", 310), (0), 0, (("odoc_text_parser.mli", 54, 723, 725), ("odoc_text_parser.mli", 54, 723, 736), 0), 0, Tag1 ("Odoc_text_parser", 41)); (("BEGIN_SHORTCUT_LIST_ITEM", 311), (0), 0, (("odoc_text_parser.mli", 55, 737, 739), ("odoc_text_parser.mli", 55, 737, 765), 0), 0, Tag1 ("Odoc_text_parser", 42)); (("BEGIN_SHORTCUT_ENUM_ITEM", 312), (0), 0, (("odoc_text_parser.mli", 56, 766, 768), ("odoc_text_parser.mli", 56, 766, 794), 0), 0, Tag1 ("Odoc_text_parser", 43)); (("SHORTCUT_LIST_ITEM", 313), (0), 0, (("odoc_text_parser.mli", 57, 795, 797), ("odoc_text_parser.mli", 57, 795, 817), 0), 0, Tag1 ("Odoc_text_parser", 44)); (("SHORTCUT_ENUM_ITEM", 314), (0), 0, (("odoc_text_parser.mli", 58, 818, 820), ("odoc_text_parser.mli", 58, 818, 840), 0), 0, Tag1 ("Odoc_text_parser", 45)); (("END_SHORTCUT_LIST", 315), (0), 0, (("odoc_text_parser.mli", 59, 841, 843), ("odoc_text_parser.mli", 59, 841, 862), 0), 0, Tag1 ("Odoc_text_parser", 46)); (("BLANK_LINE", 316), (0), 0, (("odoc_text_parser.mli", 60, 863, 865), ("odoc_text_parser.mli", 60, 863, 877), 0), 0, Tag1 ("Odoc_text_parser", 47)); (("EOF", 317), (0), 0, (("odoc_text_parser.mli", 61, 878, 880), ("odoc_text_parser.mli", 61, 878, 885), 0), 0, Tag1 ("Odoc_text_parser", 48)); (("Char", 318), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -26)]), 0, (("odoc_text_parser.mli", 62, 886, 888), ("odoc_text_parser.mli", 66, 971, 972), 0), 0, Tag1 ("Odoc_text_parser", 49))], 0), 1, 0, 0, 0, 0, 0, (("odoc_text_parser.mli", 1, 0, 0), ("odoc_text_parser.mli", 66, 971, 972), 0), 0, 0, 0, Tag1 ("Odoc_text_parser", 0)), 1, 0); (("main", 365), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -19), (Tag3 ((("token", 364)), 0, (0)), 100000000, 0, -18), 0), 100000000, 0, -17), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -16), (Tag3 (Tag1 ((Tag2 ("Odoc_types")), "text"), 0, (0)), 100000000, 0, -15), 0), 100000000, 0, -14), 0), 100000000, 0, -13), 0, (("odoc_text_parser.mli", 68, 974, 974), ("odoc_text_parser.mli", 69, 985, 1048), 0), 0, Tag1 ("Odoc_text_parser", 50)), 0); (("located_element_list", 366), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -12), (Tag3 ((("token", 364)), 0, (0)), 100000000, 0, -11), 0), 100000000, 0, -10), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -9), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -6); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -7); (Tag3 (Tag1 ((Tag2 ("Odoc_types")), "text_element"), 0, (0)), 100000000, 0, -8)]), 100000000, 0, -5)], (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("odoc_text_parser.mli", 70, 1049, 1049), ("odoc_text_parser.mli", 71, 1076, 1166), 0), 0, Tag1 ("Odoc_text_parser", 51)), 0)], "Odoc_text_parser", [("Odoc_text_parser", ("\007y\238\251\1658\242Qe\200\165#8\171\019\176")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Odoc_types", ("<k{\137\201\170z%E\221\170\147\151\127\189\015")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
Lexing.lexbuf -> (int * int * Odoc_types.text_element) list

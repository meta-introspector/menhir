type error =
    Unclosed of Location.t * string * Location.t * string
  | Expecting of Location.t * string
  | Not_expecting of Location.t * string
  | Applicative_path of Location.t
  | Variable_in_scope of Location.t * string
  | Other of Location.t
  | Ill_formed_ast of Location.t * string
  | Invalid_package_type of Location.t * string
  | Removed_string_set of Location.t
exception Error of error
exception Escape_error
val location_of_error : error -> Location.t
("DEBUG:rule", [Tag1 (("error", 376), (0, 0, Tag1 ([(("Unclosed", 270), ([(Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -11); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12); (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -13); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -14)]), 0, (("parsing/syntaxerr.mli", 24, 1231, 1235), ("parsing/syntaxerr.mli", 24, 1231, 1288), 0), 0, Tag1 ("Syntaxerr", 1)); (("Expecting", 337), ([(Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -15); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -16)]), 0, (("parsing/syntaxerr.mli", 25, 1289, 1291), ("parsing/syntaxerr.mli", 25, 1289, 1325), 0), 0, Tag1 ("Syntaxerr", 2)); (("Not_expecting", 338), ([(Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -17); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -18)]), 0, (("parsing/syntaxerr.mli", 26, 1326, 1328), ("parsing/syntaxerr.mli", 26, 1326, 1366), 0), 0, Tag1 ("Syntaxerr", 3)); (("Applicative_path", 339), ([(Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -19)]), 0, (("parsing/syntaxerr.mli", 27, 1367, 1369), ("parsing/syntaxerr.mli", 27, 1367, 1401), 0), 0, Tag1 ("Syntaxerr", 4)); (("Variable_in_scope", 340), ([(Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -20); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -21)]), 0, (("parsing/syntaxerr.mli", 28, 1402, 1404), ("parsing/syntaxerr.mli", 28, 1402, 1446), 0), 0, Tag1 ("Syntaxerr", 5)); (("Other", 341), ([(Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -22)]), 0, (("parsing/syntaxerr.mli", 29, 1447, 1449), ("parsing/syntaxerr.mli", 29, 1447, 1470), 0), 0, Tag1 ("Syntaxerr", 6)); (("Ill_formed_ast", 342), ([(Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -23); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -24)]), 0, (("parsing/syntaxerr.mli", 30, 1471, 1473), ("parsing/syntaxerr.mli", 30, 1471, 1512), 0), 0, Tag1 ("Syntaxerr", 7)); (("Invalid_package_type", 343), ([(Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -25); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -26)]), 0, (("parsing/syntaxerr.mli", 31, 1513, 1515), ("parsing/syntaxerr.mli", 31, 1513, 1560), 0), 0, Tag1 ("Syntaxerr", 8)); (("Removed_string_set", 344), ([(Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -27)]), 0, (("parsing/syntaxerr.mli", 32, 1561, 1563), ("parsing/syntaxerr.mli", 32, 1561, 1597), 0), 0, Tag1 ("Syntaxerr", 9))], 0), 1, 0, 0, 0, 0, 0, (("parsing/syntaxerr.mli", 23, 1218, 1218), ("parsing/syntaxerr.mli", 32, 1561, 1597), 0), 0, 0, 0, Tag1 ("Syntaxerr", 0)), 1, 0); Tag2 (("Error", 377), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((("error", 376)), 0, (0)), 100000000, 0, -10)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Syntaxerr", 10)), 2, 0); Tag2 (("Escape_error", 378), ((Tag3 ("exn", 7)), 0, (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Syntaxerr", 11)), 2, 0); (("location_of_error", 379), ((Tag1 (0, (Tag3 ((("error", 376)), 0, (0)), 100000000, 0, -9), (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -8), 0), 100000000, 0, -7), 0, (("parsing/syntaxerr.mli", 37, 1648, 1648), ("parsing/syntaxerr.mli", 37, 1648, 1690), 0), 0, Tag1 ("Syntaxerr", 12)), 0); (("ill_formed_ast", 380), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -6), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5), ((("a")), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("parsing/syntaxerr.mli", 38, 1691, 1691), ("parsing/syntaxerr.mli", 38, 1691, 1737), 0), 0, Tag1 ("Syntaxerr", 13)), 0)], "Syntaxerr", [("Syntaxerr", ("\219y W\156\199S\188\018+\196\144>\187\159f")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
val ill_formed_ast : Location.t -> string -> 'a

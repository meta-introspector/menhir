val mk_rel_id : Names.Id.t -> Names.Id.t
val mk_correct_id : Names.Id.t -> Names.Id.t
val mk_complete_id : Names.Id.t -> Names.Id.t
val mk_equation_id : Names.Id.t -> Names.Id.t
val fresh_id : Names.Id.t list -> string -> Names.Id.t
val fresh_name : Names.Id.t list -> string -> Names.Name.t
val get_name :
  Names.Id.t list -> ?default:string -> Names.Name.t -> Names.Name.t
val array_get_start : 'a array -> 'a array
val locate_ind : Libnames.qualid -> Names.inductive
val locate_constant : Libnames.qualid -> Names.Constant.t
val locate_with_msg :
  Pp.t -> (Libnames.qualid -> 'a) -> Libnames.qualid -> 'a
val filter_map : ('a -> bool) -> ('a -> 'b) -> 'a list -> 'b list
val list_union_eq : ('a -> 'a -> bool) -> 'a list -> 'a list -> 'a list
val list_add_set_eq : ('a -> 'a -> bool) -> 'a -> 'a list -> 'a list
val chop_rlambda_n :
  int ->
  Glob_term.glob_constr ->
  (Names.Name.t * Glob_term.glob_constr * Glob_term.glob_constr option) list *
  Glob_term.glob_constr
val chop_rprod_n :
  int ->
  Glob_term.glob_constr ->
  (Names.Name.t * Glob_term.glob_constr) list * Glob_term.glob_constr
val eq : EConstr.constr Lazy.t
val refl_equal : EConstr.constr Lazy.t
val jmeq : unit -> EConstr.constr
val jmeq_refl : unit -> EConstr.constr
val make_eq : unit -> EConstr.constr
val with_full_print : ('a -> 'b) -> 'a -> 'b
type function_info = {
  function_constant : Names.Constant.t;
  graph_ind : Names.inductive;
  equation_lemma : Names.Constant.t option;
  correctness_lemma : Names.Constant.t option;
  completeness_lemma : Names.Constant.t option;
  rect_lemma : Names.Constant.t option;
  rec_lemma : Names.Constant.t option;
  prop_lemma : Names.Constant.t option;
  sprop_lemma : Names.Constant.t option;
  is_general : bool;
}
val find_Function_infos : Names.Constant.t -> function_info option
val find_Function_of_graph : Names.inductive -> function_info option
val add_Function : bool -> Names.Constant.t -> unit
val update_Function : function_info -> unit
val pr_info : Environ.env -> Evd.evar_map -> function_info -> Pp.t
val pr_table : Environ.env -> Evd.evar_map -> Pp.t
val observe_tac :
  header:Pp.t ->
  (Environ.env -> Evd.evar_map -> Pp.t) ->
  unit Proofview.tactic -> unit Proofview.tactic
val observe : Pp.t -> unit
val do_observe : unit -> bool
val do_rewrite_dependent : unit -> bool
exception Building_graph of exn
exception Defining_principle of exn
exception ToShow of exn
val is_strict_tcc : unit -> bool
val h_intros : Names.Id.t list -> unit Proofview.tactic
val h_id : Names.Id.t
val hrec_id : Names.Id.t
val acc_inv_id : EConstr.constr Util.delayed
val ltof_ref : Names.GlobRef.t Util.delayed
val well_founded_ltof : EConstr.constr Util.delayed
val acc_rel : EConstr.constr Util.delayed
val well_founded : EConstr.constr Util.delayed
val evaluable_of_global_reference :
  Names.GlobRef.t -> Tacred.evaluable_global_reference
val list_rewrite :
  bool -> (EConstr.constr * bool) list -> unit Proofview.tactic
val decompose_lambda_n :
  Evd.evar_map ->
  int ->
  EConstr.t ->
  (Names.Name.t Context.binder_annot * EConstr.t) list * EConstr.t
val compose_lam :
  (Names.Name.t Context.binder_annot * EConstr.t) list ->
  EConstr.t -> EConstr.t
val compose_prod :
  (Names.Name.t Context.binder_annot * EConstr.t) list ->
  EConstr.t -> EConstr.t
type tcc_lemma_value = Undefined | Value of Constr.t | Not_needed
("DEBUG:rule", [(("mk_rel_id", 1539), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -260), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -259), 0), 100000000, 0, -258), 0, (("plugins/funind/indfun_common.mli", 7, 127, 127), ("plugins/funind/indfun_common.mli", 7, 127, 155), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 0)), 0); (("mk_correct_id", 1540), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -257), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -256), 0), 100000000, 0, -255), 0, (("plugins/funind/indfun_common.mli", 8, 156, 156), ("plugins/funind/indfun_common.mli", 8, 156, 188), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 1)), 0); (("mk_complete_id", 1541), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -254), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -253), 0), 100000000, 0, -252), 0, (("plugins/funind/indfun_common.mli", 9, 189, 189), ("plugins/funind/indfun_common.mli", 9, 189, 222), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 2)), 0); (("mk_equation_id", 1542), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -251), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -250), 0), 100000000, 0, -249), 0, (("plugins/funind/indfun_common.mli", 10, 223, 223), ("plugins/funind/indfun_common.mli", 10, 223, 256), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 3)), 0); (("fresh_id", 1543), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -248)], (0)), 100000000, 0, -247), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -246), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -245), 0), 100000000, 0, -244), 0), 100000000, 0, -243), 0, (("plugins/funind/indfun_common.mli", 11, 257, 257), ("plugins/funind/indfun_common.mli", 11, 257, 299), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 4)), 0); (("fresh_name", 1544), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -242)], (0)), 100000000, 0, -241), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -240), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -239), 0), 100000000, 0, -238), 0), 100000000, 0, -237), 0, (("plugins/funind/indfun_common.mli", 12, 300, 300), ("plugins/funind/indfun_common.mli", 12, 300, 346), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 5)), 0); (("get_name", 1545), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -236)], (0)), 100000000, 0, -235), (Tag1 (Tag1 ("default"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -234)], (0)), 100000000, 0, -233), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -232), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -231), 0), 100000000, 0, -230), 0), 100000000, 0, -229), 0), 100000000, 0, -228), 0, (("plugins/funind/indfun_common.mli", 13, 347, 347), ("plugins/funind/indfun_common.mli", 13, 347, 410), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 6)), 0); (("array_get_start", 1546), ((Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -226)], (0)), 100000000, 0, -227), (Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -226)], (0)), 100000000, 0, -225), 0), 100000000, 0, -224), 0, (("plugins/funind/indfun_common.mli", 14, 411, 411), ("plugins/funind/indfun_common.mli", 14, 411, 453), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 7)), 0); (("locate_ind", 1547), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -223), (Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -222), 0), 100000000, 0, -221), 0, (("plugins/funind/indfun_common.mli", 15, 454, 454), ("plugins/funind/indfun_common.mli", 15, 454, 499), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 8)), 0); (("locate_constant", 1548), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -220), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -219), 0), 100000000, 0, -218), 0, (("plugins/funind/indfun_common.mli", 16, 500, 500), ("plugins/funind/indfun_common.mli", 16, 500, 551), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 9)), 0); (("locate_with_msg", 1549), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -217), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -216), ((("a")), 100000000, 0, -213), 0), 100000000, 0, -215), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -214), ((("a")), 100000000, 0, -213), 0), 100000000, 0, -212), 0), 100000000, 0, -211), 0), 100000000, 0, -210), 0, (("plugins/funind/indfun_common.mli", 17, 552, 552), ("plugins/funind/indfun_common.mli", 17, 552, 630), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 10)), 0); (("filter_map", 1550), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -206), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -209), 0), 100000000, 0, -208), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -206), ((("b")), 100000000, 0, -204), 0), 100000000, 0, -207), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -206)], (0)), 100000000, 0, -205), (Tag3 ((Tag3 ("list", 9)), [((("b")), 100000000, 0, -204)], (0)), 100000000, 0, -203), 0), 100000000, 0, -202), 0), 100000000, 0, -201), 0), 100000000, 0, -200), 0, (("plugins/funind/indfun_common.mli", 18, 631, 631), ("plugins/funind/indfun_common.mli", 18, 631, 696), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 11)), 0); (("list_union_eq", 1551), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -194), (Tag1 (0, ((("a")), 100000000, 0, -194), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -199), 0), 100000000, 0, -198), 0), 100000000, 0, -197), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -194)], (0)), 100000000, 0, -196), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -194)], (0)), 100000000, 0, -195), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -194)], (0)), 100000000, 0, -193), 0), 100000000, 0, -192), 0), 100000000, 0, -191), 0), 100000000, 0, -190), 0, (("plugins/funind/indfun_common.mli", 19, 697, 697), ("plugins/funind/indfun_common.mli", 19, 697, 768), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 12)), 0); (("list_add_set_eq", 1552), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -185), (Tag1 (0, ((("a")), 100000000, 0, -185), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -189), 0), 100000000, 0, -188), 0), 100000000, 0, -187), (Tag1 (0, ((("a")), 100000000, 0, -185), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -185)], (0)), 100000000, 0, -186), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -185)], (0)), 100000000, 0, -184), 0), 100000000, 0, -183), 0), 100000000, 0, -182), 0), 100000000, 0, -181), 0, (("plugins/funind/indfun_common.mli", 20, 769, 769), ("plugins/funind/indfun_common.mli", 20, 769, 837), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 13)), 0); (("chop_rlambda_n", 1553), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -180), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -179), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -174); (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -175); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -177)], (0)), 100000000, 0, -176)]), 100000000, 0, -173)], (0)), 100000000, 0, -172); (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -178)]), 100000000, 0, -171), 0), 100000000, 0, -170), 0), 100000000, 0, -169), 0, (("plugins/funind/indfun_common.mli", 22, 839, 839), ("plugins/funind/indfun_common.mli", 26, 970, 998), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 15)), 0); (("chop_rprod_n", 1554), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -168), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -167), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -164); (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -165)]), 100000000, 0, -163)], (0)), 100000000, 0, -162); (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -166)]), 100000000, 0, -161), 0), 100000000, 0, -160), 0), 100000000, 0, -159), 0, (("plugins/funind/indfun_common.mli", 28, 1000, 1000), ("plugins/funind/indfun_common.mli", 31, 1055, 1121), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 16)), 0); (("eq", 1555), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lazy"), "t"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -158)], (0)), 100000000, 0, -157), 0, (("plugins/funind/indfun_common.mli", 33, 1123, 1123), ("plugins/funind/indfun_common.mli", 33, 1123, 1153), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 17)), 0); (("refl_equal", 1556), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lazy"), "t"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -156)], (0)), 100000000, 0, -155), 0, (("plugins/funind/indfun_common.mli", 34, 1154, 1154), ("plugins/funind/indfun_common.mli", 34, 1154, 1192), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 18)), 0); (("jmeq", 1557), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -154), (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -153), 0), 100000000, 0, -152), 0, (("plugins/funind/indfun_common.mli", 35, 1193, 1193), ("plugins/funind/indfun_common.mli", 35, 1193, 1226), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 19)), 0); (("jmeq_refl", 1558), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -151), (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -150), 0), 100000000, 0, -149), 0, (("plugins/funind/indfun_common.mli", 36, 1227, 1227), ("plugins/funind/indfun_common.mli", 36, 1227, 1265), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 20)), 0); (("make_eq", 1559), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -148), (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -147), 0), 100000000, 0, -146), 0, (("plugins/funind/indfun_common.mli", 37, 1266, 1266), ("plugins/funind/indfun_common.mli", 37, 1266, 1302), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 21)), 0); (("with_full_print", 1560), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -144), ((("b")), 100000000, 0, -143), 0), 100000000, 0, -145), (Tag1 (0, ((("a")), 100000000, 0, -144), ((("b")), 100000000, 0, -143), 0), 100000000, 0, -142), 0), 100000000, 0, -141), 0, (("plugins/funind/indfun_common.mli", 43, 1428, 1428), ("plugins/funind/indfun_common.mli", 43, 1428, 1472), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 22)), 0); Tag1 (("function_info", 1561), (0, 0, [[(("function_constant", 779), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -124), (("plugins/funind/indfun_common.mli", 48, 1516, 1520), ("plugins/funind/indfun_common.mli", 49, 1551, 1554), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 24)); (("graph_ind", 780), 0, (Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -125), (("plugins/funind/indfun_common.mli", 49, 1551, 1555), ("plugins/funind/indfun_common.mli", 50, 1577, 1580), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 25)); (("equation_lemma", 781), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -127)], (0)), 100000000, 0, -126), (("plugins/funind/indfun_common.mli", 50, 1577, 1581), ("plugins/funind/indfun_common.mli", 51, 1616, 1619), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 26)); (("correctness_lemma", 782), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -129)], (0)), 100000000, 0, -128), (("plugins/funind/indfun_common.mli", 51, 1616, 1620), ("plugins/funind/indfun_common.mli", 52, 1658, 1661), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 27)); (("completeness_lemma", 783), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -131)], (0)), 100000000, 0, -130), (("plugins/funind/indfun_common.mli", 52, 1658, 1662), ("plugins/funind/indfun_common.mli", 53, 1701, 1704), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 28)); (("rect_lemma", 784), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -133)], (0)), 100000000, 0, -132), (("plugins/funind/indfun_common.mli", 53, 1701, 1705), ("plugins/funind/indfun_common.mli", 54, 1736, 1739), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 29)); (("rec_lemma", 785), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -135)], (0)), 100000000, 0, -134), (("plugins/funind/indfun_common.mli", 54, 1736, 1740), ("plugins/funind/indfun_common.mli", 55, 1770, 1773), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 30)); (("prop_lemma", 786), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -137)], (0)), 100000000, 0, -136), (("plugins/funind/indfun_common.mli", 55, 1770, 1774), ("plugins/funind/indfun_common.mli", 56, 1805, 1808), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 31)); (("sprop_lemma", 787), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -139)], (0)), 100000000, 0, -138), (("plugins/funind/indfun_common.mli", 56, 1805, 1809), ("plugins/funind/indfun_common.mli", 57, 1841, 1844), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 32)); (("is_general", 788), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -140), (("plugins/funind/indfun_common.mli", 57, 1841, 1845), ("plugins/funind/indfun_common.mli", 57, 1841, 1862), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 33))]], 1, 0, 0, 0, 0, 0, (("plugins/funind/indfun_common.mli", 47, 1495, 1495), ("plugins/funind/indfun_common.mli", 57, 1841, 1864), 0), 0, 0, 0, Tag1 ("Funind_plugin__Indfun_common", 23)), 1, 0); (("find_Function_infos", 1562), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -123), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("function_info", 1561)), 0, (0)), 100000000, 0, -122)], (0)), 100000000, 0, -121), 0), 100000000, 0, -120), 0, (("plugins/funind/indfun_common.mli", 59, 1866, 1866), ("plugins/funind/indfun_common.mli", 59, 1866, 1926), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 34)), 0); (("find_Function_of_graph", 1563), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -119), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("function_info", 1561)), 0, (0)), 100000000, 0, -118)], (0)), 100000000, 0, -117), 0), 100000000, 0, -116), 0, (("plugins/funind/indfun_common.mli", 60, 1927, 1927), ("plugins/funind/indfun_common.mli", 60, 1927, 1989), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 35)), 0); (("add_Function", 1564), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -115), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -114), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -113), 0), 100000000, 0, -112), 0), 100000000, 0, -111), 0, (("plugins/funind/indfun_common.mli", 63, 2053, 2053), ("plugins/funind/indfun_common.mli", 63, 2053, 2098), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 36)), 0); (("update_Function", 1565), ((Tag1 (0, (Tag3 ((("function_info", 1561)), 0, (0)), 100000000, 0, -110), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -109), 0), 100000000, 0, -108), 0, (("plugins/funind/indfun_common.mli", 64, 2099, 2099), ("plugins/funind/indfun_common.mli", 64, 2099, 2142), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 37)), 0); (("pr_info", 1566), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -107), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -106), (Tag1 (0, (Tag3 ((("function_info", 1561)), 0, (0)), 100000000, 0, -105), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -104), 0), 100000000, 0, -103), 0), 100000000, 0, -102), 0), 100000000, 0, -101), 0, (("plugins/funind/indfun_common.mli", 67, 2161, 2161), ("plugins/funind/indfun_common.mli", 67, 2161, 2227), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 38)), 0); (("pr_table", 1567), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -100), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -99), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -98), 0), 100000000, 0, -97), 0), 100000000, 0, -96), 0, (("plugins/funind/indfun_common.mli", 69, 2229, 2229), ("plugins/funind/indfun_common.mli", 69, 2229, 2279), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 39)), 0); (("observe_tac", 1568), ((Tag1 (("header"), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -95), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -94), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -93), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -92), 0), 100000000, 0, -91), 0), 100000000, 0, -90), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -89)], (0)), 100000000, 0, -88), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -87)], (0)), 100000000, 0, -86), 0), 100000000, 0, -85), 0), 100000000, 0, -84), 0), 100000000, 0, -83), 0, (("plugins/funind/indfun_common.mli", 71, 2281, 2281), ("plugins/funind/indfun_common.mli", 75, 2383, 2409), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 40)), 0); (("observe", 1569), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -82), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -81), 0), 100000000, 0, -80), 0, (("plugins/funind/indfun_common.mli", 78, 2448, 2448), ("plugins/funind/indfun_common.mli", 78, 2448, 2474), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 41)), 0); (("do_observe", 1570), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -79), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -78), 0), 100000000, 0, -77), 0, (("plugins/funind/indfun_common.mli", 79, 2475, 2475), ("plugins/funind/indfun_common.mli", 79, 2475, 2504), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 42)), 0); (("do_rewrite_dependent", 1571), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -76), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -75), 0), 100000000, 0, -74), 0, (("plugins/funind/indfun_common.mli", 80, 2505, 2505), ("plugins/funind/indfun_common.mli", 80, 2505, 2544), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 43)), 0); Tag2 (("Building_graph", 1572), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -73)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Funind_plugin__Indfun_common", 44)), 2, 0); Tag2 (("Defining_principle", 1573), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -72)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Funind_plugin__Indfun_common", 45)), 2, 0); Tag2 (("ToShow", 1574), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -71)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Funind_plugin__Indfun_common", 46)), 2, 0); (("is_strict_tcc", 1575), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -70), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -69), 0), 100000000, 0, -68), 0, (("plugins/funind/indfun_common.mli", 87, 2660, 2660), ("plugins/funind/indfun_common.mli", 87, 2660, 2692), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 47)), 0); (("h_intros", 1576), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -67)], (0)), 100000000, 0, -66), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -65)], (0)), 100000000, 0, -64), 0), 100000000, 0, -63), 0, (("plugins/funind/indfun_common.mli", 88, 2693, 2693), ("plugins/funind/indfun_common.mli", 88, 2693, 2748), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 48)), 0); (("h_id", 1577), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -62), 0, (("plugins/funind/indfun_common.mli", 89, 2749, 2749), ("plugins/funind/indfun_common.mli", 89, 2749, 2770), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 49)), 0); (("hrec_id", 1578), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -61), 0, (("plugins/funind/indfun_common.mli", 90, 2771, 2771), ("plugins/funind/indfun_common.mli", 90, 2771, 2795), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 50)), 0); (("acc_inv_id", 1579), ((Tag3 (Tag1 ((Tag2 ("Util")), "delayed"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -60)], (0)), 100000000, 0, -59), 0, (("plugins/funind/indfun_common.mli", 91, 2796, 2796), ("plugins/funind/indfun_common.mli", 91, 2796, 2840), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 51)), 0); (("ltof_ref", 1580), ((Tag3 (Tag1 ((Tag2 ("Util")), "delayed"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -58)], (0)), 100000000, 0, -57), 0, (("plugins/funind/indfun_common.mli", 92, 2841, 2841), ("plugins/funind/indfun_common.mli", 92, 2841, 2878), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 52)), 0); (("well_founded_ltof", 1581), ((Tag3 (Tag1 ((Tag2 ("Util")), "delayed"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -56)], (0)), 100000000, 0, -55), 0, (("plugins/funind/indfun_common.mli", 93, 2879, 2879), ("plugins/funind/indfun_common.mli", 93, 2879, 2930), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 53)), 0); (("acc_rel", 1582), ((Tag3 (Tag1 ((Tag2 ("Util")), "delayed"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -54)], (0)), 100000000, 0, -53), 0, (("plugins/funind/indfun_common.mli", 94, 2931, 2931), ("plugins/funind/indfun_common.mli", 94, 2931, 2972), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 54)), 0); (("well_founded", 1583), ((Tag3 (Tag1 ((Tag2 ("Util")), "delayed"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -52)], (0)), 100000000, 0, -51), 0, (("plugins/funind/indfun_common.mli", 95, 2973, 2973), ("plugins/funind/indfun_common.mli", 95, 2973, 3019), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 55)), 0); (("evaluable_of_global_reference", 1584), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -50), (Tag3 (Tag1 ((Tag2 ("Tacred")), "evaluable_global_reference"), 0, (0)), 100000000, 0, -49), 0), 100000000, 0, -48), 0, (("plugins/funind/indfun_common.mli", 97, 3021, 3021), ("plugins/funind/indfun_common.mli", 98, 3057, 3105), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 56)), 0); (("list_rewrite", 1585), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -47), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -45); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -46)]), 100000000, 0, -44)], (0)), 100000000, 0, -43), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -42)], (0)), 100000000, 0, -41), 0), 100000000, 0, -40), 0), 100000000, 0, -39), 0, (("plugins/funind/indfun_common.mli", 100, 3107, 3107), ("plugins/funind/indfun_common.mli", 100, 3107, 3187), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 57)), 0); (("decompose_lambda_n", 1586), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -38), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -37), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -36), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -33)], (0)), 100000000, 0, -32); (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -34)]), 100000000, 0, -31)], (0)), 100000000, 0, -30); (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -35)]), 100000000, 0, -29), 0), 100000000, 0, -28), 0), 100000000, 0, -27), 0), 100000000, 0, -26), 0, (("plugins/funind/indfun_common.mli", 102, 3189, 3189), ("plugins/funind/indfun_common.mli", 106, 3256, 3325), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 58)), 0); (("compose_lam", 1587), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -24)], (0)), 100000000, 0, -23); (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -25)]), 100000000, 0, -22)], (0)), 100000000, 0, -21), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -20), (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("plugins/funind/indfun_common.mli", 108, 3327, 3327), ("plugins/funind/indfun_common.mli", 109, 3345, 3425), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 59)), 0); (("compose_prod", 1588), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Context")), "binder_annot"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -15)], (0)), 100000000, 0, -14); (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -16)]), 100000000, 0, -13)], (0)), 100000000, 0, -12), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -11), (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -10), 0), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("plugins/funind/indfun_common.mli", 111, 3427, 3427), ("plugins/funind/indfun_common.mli", 112, 3446, 3526), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 60)), 0); Tag1 (("tcc_lemma_value", 1589), (0, 0, Tag1 ([(("Undefined", 1374), (0), 0, (("plugins/funind/indfun_common.mli", 114, 3528, 3551), ("plugins/funind/indfun_common.mli", 114, 3528, 3560), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 62)); (("Value", 1375), ([(Tag3 (Tag1 ((Tag2 ("Constr")), "t"), 0, (0)), 100000000, 0, -7)]), 0, (("plugins/funind/indfun_common.mli", 114, 3528, 3561), ("plugins/funind/indfun_common.mli", 114, 3528, 3580), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 64)); (("Not_needed", 1533), (0), 0, (("plugins/funind/indfun_common.mli", 114, 3528, 3581), ("plugins/funind/indfun_common.mli", 114, 3528, 3593), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 65))], 0), 1, 0, 0, 0, 0, 0, (("plugins/funind/indfun_common.mli", 114, 3528, 3528), ("plugins/funind/indfun_common.mli", 114, 3528, 3593), 0), 0, 0, 0, Tag1 ("Funind_plugin__Indfun_common", 61)), 1, 0); (("funind_purify", 1590), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -5), ((("b")), 100000000, 0, -4), 0), 100000000, 0, -6), (Tag1 (0, ((("a")), 100000000, 0, -5), ((("b")), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("plugins/funind/indfun_common.mli", 116, 3595, 3595), ("plugins/funind/indfun_common.mli", 116, 3595, 3637), 0), 0, Tag1 ("Funind_plugin__Indfun_common", 66)), 0)], "Funind_plugin__Indfun_common", [("Funind_plugin__Indfun_common", ("q\243\127>;\000i\142\031~,H\251\240\027j")); ("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Vmemitcodes", ("wCd\138\165\158DD\241gH\236.\210\197\247")); ("Vmbytecodes", ("\025\021\151\137Dx\149W\236+[\143f\208\160\016")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Unix", (":B72R\011\005Sj\189)\011\239PH\254")); ("UnivSubst", ("\190qu\031mc\130\181\003G]\132\"\219m)")); ("UnivProblem", ("6'\161\018\181\001.\253\000\141a6\171\1727\155")); ("UnivNames", ("%\151_\209%+JM$n\001\232\194n\178N")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UState", ("SD\203\215|\136\n\251\239\208\148\215C\n\167\005")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("Type_errors", ("7\157\162-\214M\206\196\228\191\005v\134\177\144\134")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Tacred", ("\133d\143\1310z\030\237\232\002\001\025\147\140\215:")); ("Summary", ("\148G\135\226\024L3\246\021\028U\146\164`\253\250")); ("Store", ("/dT\252\145\179pq\216{\181\206\190K+U")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("Section", ("\245\207\b\021\142v=\155#w\246}\"4b\006")); ("Safe_typing", (")\250?\164\145\132\241\127\186\152h+\145\"\237l")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("Reductionops", ("\179\023P\218\146Uh\014IS\196C\031q~#")); ("Range", ("\218\130\001r\237\r\144\171\164\021l\155\196\143sg")); ("Proofview_monad", ("\218\196\189S\147\216\129\221\231\224v\228O\024*\239")); ("Proofview", ("\245\140U\027\236\199\199&\242\156\199YG\250tA")); ("Primred", ("\158G\192\182\224\196\144*\174y_E\165\012\137C")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Pattern", ("\195C\140Wb=\022\222\208\227^K\003\020\215X")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("Nativevalues", ("8:\007\025e\226c,\001\171\146#l\210\171\152")); ("Nativelib", ("V\239\205Y1\147E:,\176\196Hy\1483|")); ("Nativecode", ("\190\185\255\006m\012\210\163\138Rz\247\15283\183")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Namegen", ("\187\222\224T\255\020\1808-\212*\164\131\177\157x")); ("Monad", ("\244\171T\157\194p\187\160\149\195{\132\222\020\253\148")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Ltac_pretype", ("\224\"\167\018i:U\172>\188\128$\r\252\020T")); ("Logic_monad", ("\130\157\160Q\163vQ\137\184\2242\209\128\024\220i")); ("Locus", ("_\002\003W\246\181\225\242Uf\139\226\176\174\192I")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Libnames", ("fp\0255\167\162\209\153\137\161\169#\246\193\003\198")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hook", ("\183\194\223\003\155\169',\187\240a;E\b\1396")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Glob_term", ("\165=a\227\160\153.\021_$\232\209T\236\153O")); ("Genlambda", ("\170}\024\241\141\222\136S\169\219\2212i\134KI")); ("Geninterp", ("2S\151\191\189\159\004\188;\224d\199|U\004\028")); ("Genarg", ("\1434\015\001\152\196\005s\156\136\195\185\247\b3\t")); ("Funind_plugin", ("\\j\002\143\228\130\246U7\002\198\214\253\240\139\242")); ("Ftactic", ("K\172\205\128\241\162\160\201\202\1561o\180L\206:")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evd", ("\211\205p\193\216\129r\006\239oN\142ar\196\175")); ("Evar_kinds", ("\023L\186\132\218}\254\221\185\198\220\200h\003{\021")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Environ", ("\171b\1579\229<\003Z\147IL\225X\254\182\204")); ("Entries", ("\172\201\198\221Ap\027_{\174\141C\021\";p")); ("EConstr", ("\201aW\156\157;N\004\201V\208\006L\166\211)")); ("Dyn", ("\131z`\205v\2306\007x\027&K.?;\169")); ("Declarations", ("\239\137n\019\030w$\182\166z^{\b\206\163\175")); ("DAst", ("\224/\200)\007\184ni\134\b\139\204\241\005w\212")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Conversion", ("\158\150&\195M\tv\127|\029\158RRK\211A")); ("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CUnix", ("\140Zl\153\167\011J\015\005|th\247OTu")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CEphemeron", ("\204I\179-\206(x4\173\229\250\001PkH\151")); ("CDebug", ("^4\210p7\239!3\138\138\213?\239`\250\157")); ("CClosure", ("\167\b\022\241V-\r\253\b\002\000j]\223%\142")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])
val funind_purify : ('a -> 'b) -> 'a -> 'b

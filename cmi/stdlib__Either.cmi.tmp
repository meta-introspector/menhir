type ('a, 'b) t = Left of 'a | Right of 'b
val left : 'a -> ('a, 'b) t
val right : 'b -> ('a, 'b) t
val is_left : ('a, 'b) t -> bool
val is_right : ('a, 'b) t -> bool
val find_left : ('a, 'b) t -> 'a option
val find_right : ('a, 'b) t -> 'b option
val map_left : ('a1 -> 'a2) -> ('a1, 'b) t -> ('a2, 'b) t
val map_right : ('b1 -> 'b2) -> ('a, 'b1) t -> ('a, 'b2) t
val map :
  left:('a1 -> 'a2) -> right:('b1 -> 'b2) -> ('a1, 'b1) t -> ('a2, 'b2) t
val fold : left:('a -> 'c) -> right:('b -> 'c) -> ('a, 'b) t -> 'c
val iter : left:('a -> unit) -> right:('b -> unit) -> ('a, 'b) t -> unit
val for_all : left:('a -> bool) -> right:('b -> bool) -> ('a, 'b) t -> bool
val equal :
  left:('a -> 'a -> bool) ->
  right:('b -> 'b -> bool) -> ('a, 'b) t -> ('a, 'b) t -> bool
val compare :
  left:('a -> 'a -> int) ->
  ("DEBUG:rule", [Tag1 (("t", 286), ([((("a")), 100000000, 0, -118); ((("b")), 100000000, 0, -119)], 2, Tag1 ([(("Left", 270), ([((("a")), 100000000, 0, -118)]), 0, (("either.mli", 56, 2488, 2506), ("either.mli", 56, 2488, 2516), 0), 0, Tag1 ("Stdlib__Either", 1)); (("Right", 271), ([((("b")), 100000000, 0, -119)]), 0, (("either.mli", 56, 2488, 2517), ("either.mli", 56, 2488, 2530), 0), 0, Tag1 ("Stdlib__Either", 2))], 0), 1, 0, [25; 25], [0; 0], 0, 0, (("either.mli", 56, 2488, 2488), ("either.mli", 56, 2488, 2530), 0), 0, 0, 0, Tag1 ("Stdlib__Either", 0)), 1, 0); (("left", 287), ((Tag1 (0, ((("a")), 100000000, 0, -116), (Tag3 ((("t", 286)), [((("a")), 100000000, 0, -116); ((("b")), 100000000, 0, -117)], (0)), 100000000, 0, -115), 0), 100000000, 0, -114), 0, (("either.mli", 60, 2631, 2631), ("either.mli", 60, 2631, 2658), 0), 0, Tag1 ("Stdlib__Either", 3)), 0); (("right", 288), ((Tag1 (0, ((("b")), 100000000, 0, -113), (Tag3 ((("t", 286)), [((("a")), 100000000, 0, -112); ((("b")), 100000000, 0, -113)], (0)), 100000000, 0, -111), 0), 100000000, 0, -110), 0, (("either.mli", 63, 2689, 2689), ("either.mli", 63, 2689, 2717), 0), 0, Tag1 ("Stdlib__Either", 4)), 0); (("is_left", 289), ((Tag1 (0, (Tag3 ((("t", 286)), [((("a")), 100000000, 0, -108); ((("b")), 100000000, 0, -109)], (0)), 100000000, 0, -107), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -106), 0), 100000000, 0, -105), 0, (("either.mli", 66, 2750, 2750), ("either.mli", 66, 2750, 2782), 0), 0, Tag1 ("Stdlib__Either", 5)), 0); (("is_right", 290), ((Tag1 (0, (Tag3 ((("t", 286)), [((("a")), 100000000, 0, -103); ((("b")), 100000000, 0, -104)], (0)), 100000000, 0, -102), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -101), 0), 100000000, 0, -100), 0, (("either.mli", 69, 2853, 2853), ("either.mli", 69, 2853, 2886), 0), 0, Tag1 ("Stdlib__Either", 6)), 0); (("find_left", 291), ((Tag1 (0, (Tag3 ((("t", 286)), [((("a")), 100000000, 0, -97); ((("b")), 100000000, 0, -99)], (0)), 100000000, 0, -98), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -97)], (0)), 100000000, 0, -96), 0), 100000000, 0, -95), 0, (("either.mli", 72, 2959, 2959), ("either.mli", 72, 2959, 2998), 0), 0, Tag1 ("Stdlib__Either", 7)), 0); (("find_right", 292), ((Tag1 (0, (Tag3 ((("t", 286)), [((("a")), 100000000, 0, -94); ((("b")), 100000000, 0, -92)], (0)), 100000000, 0, -93), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -92)], (0)), 100000000, 0, -91), 0), 100000000, 0, -90), 0, (("either.mli", 75, 3073, 3073), ("either.mli", 75, 3073, 3113), 0), 0, Tag1 ("Stdlib__Either", 8)), 0); (("map_left", 293), ((Tag1 (0, (Tag1 (0, ((("a1")), 100000000, 0, -88), ((("a2")), 100000000, 0, -85), 0), 100000000, 0, -89), (Tag1 (0, (Tag3 ((("t", 286)), [((("a1")), 100000000, 0, -88); ((("b")), 100000000, 0, -86)], (0)), 100000000, 0, -87), (Tag3 ((("t", 286)), [((("a2")), 100000000, 0, -85); ((("b")), 100000000, 0, -86)], (0)), 100000000, 0, -84), 0), 100000000, 0, -83), 0), 100000000, 0, -82), 0, (("either.mli", 78, 3190, 3190), ("either.mli", 78, 3190, 3247), 0), 0, Tag1 ("Stdlib__Either", 9)), 0); (("map_right", 294), ((Tag1 (0, (Tag1 (0, ((("b1")), 100000000, 0, -80), ((("b2")), 100000000, 0, -78), 0), 100000000, 0, -81), (Tag1 (0, (Tag3 ((("t", 286)), [((("a")), 100000000, 0, -77); ((("b1")), 100000000, 0, -80)], (0)), 100000000, 0, -79), (Tag3 ((("t", 286)), [((("a")), 100000000, 0, -77); ((("b2")), 100000000, 0, -78)], (0)), 100000000, 0, -76), 0), 100000000, 0, -75), 0), 100000000, 0, -74), 0, (("either.mli", 82, 3339, 3339), ("either.mli", 82, 3339, 3397), 0), 0, Tag1 ("Stdlib__Either", 10)), 0); (("map", 295), ((Tag1 (("left"), (Tag1 (0, ((("a1")), 100000000, 0, -70), ((("a2")), 100000000, 0, -67), 0), 100000000, 0, -73), (Tag1 (("right"), (Tag1 (0, ((("b1")), 100000000, 0, -71), ((("b2")), 100000000, 0, -68), 0), 100000000, 0, -72), (Tag1 (0, (Tag3 ((("t", 286)), [((("a1")), 100000000, 0, -70); ((("b1")), 100000000, 0, -71)], (0)), 100000000, 0, -69), (Tag3 ((("t", 286)), [((("a2")), 100000000, 0, -67); ((("b2")), 100000000, 0, -68)], (0)), 100000000, 0, -66), 0), 100000000, 0, -65), 0), 100000000, 0, -64), 0), 100000000, 0, -63), 0, (("either.mli", 86, 3491, 3491), ("either.mli", 87, 3501, 3574), 0), 0, Tag1 ("Stdlib__Either", 11)), 0); (("fold", 296), ((Tag1 (("left"), (Tag1 (0, ((("a")), 100000000, 0, -59), ((("c")), 100000000, 0, -57), 0), 100000000, 0, -62), (Tag1 (("right"), (Tag1 (0, ((("b")), 100000000, 0, -60), ((("c")), 100000000, 0, -57), 0), 100000000, 0, -61), (Tag1 (0, (Tag3 ((("t", 286)), [((("a")), 100000000, 0, -59); ((("b")), 100000000, 0, -60)], (0)), 100000000, 0, -58), ((("c")), 100000000, 0, -57), 0), 100000000, 0, -56), 0), 100000000, 0, -55), 0), 100000000, 0, -54), 0, (("either.mli", 91, 3686, 3686), ("either.mli", 91, 3686, 3752), 0), 0, Tag1 ("Stdlib__Either", 12)), 0); (("iter", 297), ((Tag1 (("left"), (Tag1 (0, ((("a")), 100000000, 0, -48), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -53), 0), 100000000, 0, -52), (Tag1 (("right"), (Tag1 (0, ((("b")), 100000000, 0, -49), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -51), 0), 100000000, 0, -50), (Tag1 (0, (Tag3 ((("t", 286)), [((("a")), 100000000, 0, -48); ((("b")), 100000000, 0, -49)], (0)), 100000000, 0, -47), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -46), 0), 100000000, 0, -45), 0), 100000000, 0, -44), 0), 100000000, 0, -43), 0, (("either.mli", 95, 3855, 3855), ("either.mli", 95, 3855, 3927), 0), 0, Tag1 ("Stdlib__Either", 13)), 0); (("for_all", 298), ((Tag1 (("left"), (Tag1 (0, ((("a")), 100000000, 0, -37), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -42), 0), 100000000, 0, -41), (Tag1 (("right"), (Tag1 (0, ((("b")), 100000000, 0, -38), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -40), 0), 100000000, 0, -39), (Tag1 (0, (Tag3 ((("t", 286)), [((("a")), 100000000, 0, -37); ((("b")), 100000000, 0, -38)], (0)), 100000000, 0, -36), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -35), 0), 100000000, 0, -34), 0), 100000000, 0, -33), 0), 100000000, 0, -32), 0, (("either.mli", 99, 4030, 4030), ("either.mli", 99, 4030, 4105), 0), 0, Tag1 ("Stdlib__Either", 14)), 0); (("equal", 299), ((Tag1 (("left"), (Tag1 (0, ((("a")), 100000000, 0, -23), (Tag1 (0, ((("a")), 100000000, 0, -23), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -31), 0), 100000000, 0, -30), 0), 100000000, 0, -29), (Tag1 (("right"), (Tag1 (0, ((("b")), 100000000, 0, -24), (Tag1 (0, ((("b")), 100000000, 0, -24), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -28), 0), 100000000, 0, -27), 0), 100000000, 0, -26), (Tag1 (0, (Tag3 ((("t", 286)), [((("a")), 100000000, 0, -23); ((("b")), 100000000, 0, -24)], (0)), 100000000, 0, -25), (Tag1 (0, (Tag3 ((("t", 286)), [((("a")), 100000000, 0, -23); ((("b")), 100000000, 0, -24)], (0)), 100000000, 0, -22), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -21), 0), 100000000, 0, -20), 0), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("either.mli", 103, 4214, 4214), ("either.mli", 105, 4283, 4317), 0), 0, Tag1 ("Stdlib__Either", 15)), 0); (("compare", 300), ((Tag1 (("left"), (Tag1 (0, ((("a")), 100000000, 0, -8), (Tag1 (0, ((("a")), 100000000, 0, -8), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -16), 0), 100000000, 0, -15), 0), 100000000, 0, -14), (Tag1 (("right"), (Tag1 (0, ((("b")), 100000000, 0, -9), (Tag1 (0, ((("b")), 100000000, 0, -9), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -13), 0), 100000000, 0, -12), 0), 100000000, 0, -11), (Tag1 (0, (Tag3 ((("t", 286)), [((("a")), 100000000, 0, -8); ((("b")), 100000000, 0, -9)], (0)), 100000000, 0, -10), (Tag1 (0, (Tag3 ((("t", 286)), [((("a")), 100000000, 0, -8); ((("b")), 100000000, 0, -9)], (0)), 100000000, 0, -7), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("either.mli", 110, 4484, 4484), ("either.mli", 112, 4553, 4586), 0), 0, Tag1 ("Stdlib__Either", 16)), 0)], "Stdlib__Either", [("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
right:('b -> 'b -> int) -> ('a, 'b) t -> ('a, 'b) t -> int

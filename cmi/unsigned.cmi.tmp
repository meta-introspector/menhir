module type Infix =
  sig
    type t
    val ( + ) : t -> t -> t
    val ( - ) : t -> t -> t
    val ( * ) : t -> t -> t
    val ( / ) : t -> t -> t
    val ( mod ) : t -> t -> t
    val ( land ) : t -> t -> t
    val ( lor ) : t -> t -> t
    val ( lxor ) : t -> t -> t
    val ( lsl ) : t -> int -> t
    val ( lsr ) : t -> int -> t
  end
module type S =
  sig
    type t
    val add : t -> t -> t
    val sub : t -> t -> t
    val mul : t -> t -> t
    val div : t -> t -> t
    val rem : t -> t -> t
    val max_int : t
    val logand : t -> t -> t
    val logor : t -> t -> t
    val logxor : t -> t -> t
    val shift_left : t -> int -> t
    val shift_right : t -> int -> t
    val of_int : int -> t
    val to_int : t -> int
    val of_int64 : int64 -> t
    val to_int64 : t -> int64
    val of_string : string -> t
    val to_string : t -> string
    val to_hexstring : t -> string
    val zero : t
    val one : t
    val lognot : t -> t
    val succ : t -> t
    val pred : t -> t
    val compare : t -> t -> int
    val equal : t -> t -> bool
    val max : t -> t -> t
    val min : t -> t -> t
    val of_string_opt : string -> t option
    val pp : Format.formatter -> t -> unit
    val pp_hex : Format.formatter -> t -> unit
    module Infix :
      sig
        val ( + ) : t -> t -> t
        val ( - ) : t -> t -> t
        val ( * ) : t -> t -> t
        val ( / ) : t -> t -> t
        val ( mod ) : t -> t -> t
        val ( land ) : t -> t -> t
        val ( lor ) : t -> t -> t
        val ( lxor ) : t -> t -> t
        val ( lsl ) : t -> int -> t
        val ( lsr ) : t -> int -> t
      end
  end
module UChar :
  sig
    type t = private int
    val add : t -> t -> t
    val sub : t -> t -> t
    val mul : t -> t -> t
    val div : t -> t -> t
    val rem : t -> t -> t
    val max_int : t
    val logand : t -> t -> t
    val logor : t -> t -> t
    val logxor : t -> t -> t
    val shift_left : t -> int -> t
    val shift_right : t -> int -> t
    val of_int : int -> t
    val to_int : t -> int
    val of_int64 : int64 -> t
    val to_int64 : t -> int64
    val of_string : string -> t
    val to_string : t -> string
    val to_hexstring : t -> string
    val zero : t
    val one : t
    val lognot : t -> t
    val succ : t -> t
    val pred : t -> t
    val compare : t -> t -> int
    val equal : t -> t -> bool
    val max : t -> t -> t
    val min : t -> t -> t
    val of_string_opt : string -> t option
    val pp : Format.formatter -> t -> unit
    val pp_hex : Format.formatter -> t -> unit
    module Infix :
      sig
        val ( + ) : t -> t -> t
        val ( - ) : t -> t -> t
        val ( * ) : t -> t -> t
        val ( / ) : t -> t -> t
        val ( mod ) : t -> t -> t
        val ( land ) : t -> t -> t
        val ( lor ) : t -> t -> t
        val ( lxor ) : t -> t -> t
        val ( lsl ) : t -> int -> t
        val ( lsr ) : t -> int -> t
      end
  end
module UInt8 :
  sig
    type t = private int
    val add : t -> t -> t
    val sub : t -> t -> t
    val mul : t -> t -> t
    val div : t -> t -> t
    val rem : t -> t -> t
    val max_int : t
    val logand : t -> t -> t
    val logor : t -> t -> t
    val logxor : t -> t -> t
    val shift_left : t -> int -> t
    val shift_right : t -> int -> t
    val of_int : int -> t
    val to_int : t -> int
    val of_int64 : int64 -> t
    val to_int64 : t -> int64
    val of_string : string -> t
    val to_string : t -> string
    val to_hexstring : t -> string
    val zero : t
    val one : t
    val lognot : t -> t
    val succ : t -> t
    val pred : t -> t
    val compare : t -> t -> int
    val equal : t -> t -> bool
    val max : t -> t -> t
    val min : t -> t -> t
    val of_string_opt : string -> t option
    val pp : Format.formatter -> t -> unit
    val pp_hex : Format.formatter -> t -> unit
    module Infix :
      sig
        val ( + ) : t -> t -> t
        val ( - ) : t -> t -> t
        val ( * ) : t -> t -> t
        val ( / ) : t -> t -> t
        val ( mod ) : t -> t -> t
        val ( land ) : t -> t -> t
        val ( lor ) : t -> t -> t
        val ( lxor ) : t -> t -> t
        val ( lsl ) : t -> int -> t
        val ( lsr ) : t -> int -> t
      end
  end
module UInt16 :
  sig
    type t = private int
    val add : t -> t -> t
    val sub : t -> t -> t
    val mul : t -> t -> t
    val div : t -> t -> t
    val rem : t -> t -> t
    val max_int : t
    val logand : t -> t -> t
    val logor : t -> t -> t
    val logxor : t -> t -> t
    val shift_left : t -> int -> t
    val shift_right : t -> int -> t
    val of_int : int -> t
    val to_int : t -> int
    val of_int64 : int64 -> t
    val to_int64 : t -> int64
    val of_string : string -> t
    val to_string : t -> string
    val to_hexstring : t -> string
    val zero : t
    val one : t
    val lognot : t -> t
    val succ : t -> t
    val pred : t -> t
    val compare : t -> t -> int
    val equal : t -> t -> bool
    val max : t -> t -> t
    val min : t -> t -> t
    val of_string_opt : string -> t option
    val pp : Format.formatter -> t -> unit
    val pp_hex : Format.formatter -> t -> unit
    module Infix :
      sig
        val ( + ) : t -> t -> t
        val ( - ) : t -> t -> t
        val ( * ) : t -> t -> t
        val ( / ) : t -> t -> t
        val ( mod ) : t -> t -> t
        val ( land ) : t -> t -> t
        val ( lor ) : t -> t -> t
        val ( lxor ) : t -> t -> t
        val ( lsl ) : t -> int -> t
        val ( lsr ) : t -> int -> t
      end
  end
module UInt32 :
  sig
    type t
    val add : t -> t -> t
    val sub : t -> t -> t
    val mul : t -> t -> t
    val div : t -> t -> t
    val rem : t -> t -> t
    val max_int : t
    val logand : t -> t -> t
    val logor : t -> t -> t
    val logxor : t -> t -> t
    val shift_left : t -> int -> t
    val shift_right : t -> int -> t
    val of_int : int -> t
    val to_int : t -> int
    val of_int64 : int64 -> t
    val to_int64 : t -> int64
    val of_string : string -> t
    val to_string : t -> string
    val to_hexstring : t -> string
    val zero : t
    val one : t
    val lognot : t -> t
    val succ : t -> t
    val pred : t -> t
    val compare : t -> t -> int
    val equal : t -> t -> bool
    val max : t -> t -> t
    val min : t -> t -> t
    val of_string_opt : string -> t option
    val pp : Format.formatter -> t -> unit
    val pp_hex : Format.formatter -> t -> unit
    module Infix :
      sig
        val ( + ) : t -> t -> t
        val ( - ) : t -> t -> t
        val ( * ) : t -> t -> t
        val ( / ) : t -> t -> t
        val ( mod ) : t -> t -> t
        val ( land ) : t -> t -> t
        val ( lor ) : t -> t -> t
        val ( lxor ) : t -> t -> t
        val ( lsl ) : t -> int -> t
        val ( lsr ) : t -> int -> t
      end
    val of_int32 : int32 -> t
    val to_int32 : t -> int32
  end
module UInt64 :
  sig
    type t
    val add : t -> t -> t
    val sub : t -> t -> t
    val mul : t -> t -> t
    val div : t -> t -> t
    val rem : t -> t -> t
    val max_int : t
    val logand : t -> t -> t
    val logor : t -> t -> t
    val logxor : t -> t -> t
    val shift_left : t -> int -> t
    val shift_right : t -> int -> t
    val of_int : int -> t
    val to_int : t -> int
    val of_string : string -> t
    val to_string : t -> string
    val to_hexstring : t -> string
    val zero : t
    val one : t
    val lognot : t -> t
    val succ : t -> t
    val pred : t -> t
    val compare : t -> t -> int
    val equal : t -> t -> bool
    val max : t -> t -> t
    val min : t -> t -> t
    val of_string_opt : string -> t option
    val pp : Format.formatter -> t -> unit
    val pp_hex : Format.formatter -> t -> unit
    module Infix :
      sig
        val ( + ) : t -> t -> t
        val ( - ) : t -> t -> t
        val ( * ) : t -> t -> t
        val ( / ) : t -> t -> t
        val ( mod ) : t -> t -> t
        val ( land ) : t -> t -> t
        val ( lor ) : t -> t -> t
        val ( lxor ) : t -> t -> t
        val ( lsl ) : t -> int -> t
        val ( lsr ) : t -> int -> t
      end
    val of_int64 : int64 -> t
    val to_int64 : t -> int64
    val of_uint32 : UInt32.t -> t
    val to_uint32 : t -> UInt32.t
  end
module Size_t : S
module UShort : S
module UInt : S
module ULong : S
module ULLong : S
type uchar = UChar.t
type uint8 = UInt8.t
type uint16 = UInt16.t
type uint32 = UInt32.t
type uint64 = UInt64.t
type size_t = Size_t.t
type ushort = UShort.t
type uint = UInt.t
type ulong = ULong.t
type ullong = ULLong.t("DEBUG:rule", [Tag4 (("Infix", 866), ((Tag1 ([Tag1 (("t", 889), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/unsigned.mli", 12, 260, 262), ("src/unsigned.mli", 12, 260, 268), 0), 0, 0, 0, Tag1 ("Unsigned", 0)), 1, 0); (("+", 890), ((Tag1 (0, (Tag3 ((("t", 889)), 0, (0)), 100000000, 0, -64), (Tag1 (0, (Tag3 ((("t", 889)), 0, (0)), 100000000, 0, -63), (Tag3 ((("t", 889)), 0, (0)), 100000000, 0, -62), 0), 100000000, 0, -61), 0), 100000000, 0, -60), 0, (("src/unsigned.mli", 14, 270, 272), ("src/unsigned.mli", 14, 270, 293), 0), 0, Tag1 ("Unsigned", 1)), 0); (("-", 891), ((Tag1 (0, (Tag3 ((("t", 889)), 0, (0)), 100000000, 0, -59), (Tag1 (0, (Tag3 ((("t", 889)), 0, (0)), 100000000, 0, -58), (Tag3 ((("t", 889)), 0, (0)), 100000000, 0, -57), 0), 100000000, 0, -56), 0), 100000000, 0, -55), 0, (("src/unsigned.mli", 17, 327, 329), ("src/unsigned.mli", 17, 327, 350), 0), 0, Tag1 ("Unsigned", 2)), 0); (("*", 892), ((Tag1 (0, (Tag3 ((("t", 889)), 0, (0)), 100000000, 0, -54), (Tag1 (0, (Tag3 ((("t", 889)), 0, (0)), 100000000, 0, -53), (Tag3 ((("t", 889)), 0, (0)), 100000000, 0, -52), 0), 100000000, 0, -51), 0), 100000000, 0, -50), 0, (("src/unsigned.mli", 20, 386, 388), ("src/unsigned.mli", 20, 386, 411), 0), 0, Tag1 ("Unsigned", 3)), 0); (("/", 893), ((Tag1 (0, (Tag3 ((("t", 889)), 0, (0)), 100000000, 0, -49), (Tag1 (0, (Tag3 ((("t", 889)), 0, (0)), 100000000, 0, -48), (Tag3 ((("t", 889)), 0, (0)), 100000000, 0, -47), 0), 100000000, 0, -46), 0), 100000000, 0, -45), 0, (("src/unsigned.mli", 23, 450, 452), ("src/unsigned.mli", 23, 450, 473), 0), 0, Tag1 ("Unsigned", 4)), 0); (("mod", 894), ((Tag1 (0, (Tag3 ((("t", 889)), 0, (0)), 100000000, 0, -44), (Tag1 (0, (Tag3 ((("t", 889)), 0, (0)), 100000000, 0, -43), (Tag3 ((("t", 889)), 0, (0)), 100000000, 0, -42), 0), 100000000, 0, -41), 0), 100000000, 0, -40), 0, (("src/unsigned.mli", 26, 506, 508), ("src/unsigned.mli", 26, 506, 531), 0), 0, Tag1 ("Unsigned", 5)), 0); (("land", 895), ((Tag1 (0, (Tag3 ((("t", 889)), 0, (0)), 100000000, 0, -39), (Tag1 (0, (Tag3 ((("t", 889)), 0, (0)), 100000000, 0, -38), (Tag3 ((("t", 889)), 0, (0)), 100000000, 0, -37), 0), 100000000, 0, -36), 0), 100000000, 0, -35), 0, (("src/unsigned.mli", 29, 574, 576), ("src/unsigned.mli", 29, 574, 600), 0), 0, Tag1 ("Unsigned", 6)), 0); (("lor", 896), ((Tag1 (0, (Tag3 ((("t", 889)), 0, (0)), 100000000, 0, -34), (Tag1 (0, (Tag3 ((("t", 889)), 0, (0)), 100000000, 0, -33), (Tag3 ((("t", 889)), 0, (0)), 100000000, 0, -32), 0), 100000000, 0, -31), 0), 100000000, 0, -30), 0, (("src/unsigned.mli", 32, 648, 650), ("src/unsigned.mli", 32, 648, 673), 0), 0, Tag1 ("Unsigned", 7)), 0); (("lxor", 897), ((Tag1 (0, (Tag3 ((("t", 889)), 0, (0)), 100000000, 0, -29), (Tag1 (0, (Tag3 ((("t", 889)), 0, (0)), 100000000, 0, -28), (Tag3 ((("t", 889)), 0, (0)), 100000000, 0, -27), 0), 100000000, 0, -26), 0), 100000000, 0, -25), 0, (("src/unsigned.mli", 35, 719, 721), ("src/unsigned.mli", 35, 719, 745), 0), 0, Tag1 ("Unsigned", 8)), 0); (("lsl", 898), ((Tag1 (0, (Tag3 ((("t", 889)), 0, (0)), 100000000, 0, -24), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -23), (Tag3 ((("t", 889)), 0, (0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0), 100000000, 0, -20), 0, (("src/unsigned.mli", 38, 802, 804), ("src/unsigned.mli", 38, 802, 829), 0), 0, Tag1 ("Unsigned", 9)), 0); (("lsr", 899), ((Tag1 (0, (Tag3 ((("t", 889)), 0, (0)), 100000000, 0, -19), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -18), (Tag3 ((("t", 889)), 0, (0)), 100000000, 0, -17), 0), 100000000, 0, -16), 0), 100000000, 0, -15), 0, (("src/unsigned.mli", 41, 906, 908), ("src/unsigned.mli", 41, 906, 933), 0), 0, Tag1 ("Unsigned", 10)), 0)])), 0, (("src/unsigned.mli", 11, 236, 236), ("src/unsigned.mli", 43, 1011, 1014), 0), Tag1 ("Unsigned", 11)), 0); Tag4 (("S", 867), ((Tag1 ([Tag1 (("t", 900), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/unsigned.mli", 48, 1093, 1095), ("src/unsigned.mli", 48, 1093, 1101), 0), 0, 0, 0, Tag1 ("Unsigned", 12)), 1, 0); (("add", 901), ((Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -181), (Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -180), (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -179), 0), 100000000, 0, -178), 0), 100000000, 0, -177), 0, (("src/unsigned.mli", 50, 1103, 1105), ("src/unsigned.mli", 50, 1103, 1126), 0), 0, Tag1 ("Unsigned", 13)), 0); (("sub", 902), ((Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -176), (Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -175), (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -174), 0), 100000000, 0, -173), 0), 100000000, 0, -172), 0, (("src/unsigned.mli", 53, 1147, 1149), ("src/unsigned.mli", 53, 1147, 1170), 0), 0, Tag1 ("Unsigned", 14)), 0); (("mul", 903), ((Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -171), (Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -170), (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -169), 0), 100000000, 0, -168), 0), 100000000, 0, -167), 0, (("src/unsigned.mli", 56, 1194, 1196), ("src/unsigned.mli", 56, 1194, 1217), 0), 0, Tag1 ("Unsigned", 15)), 0); (("div", 904), ((Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -166), (Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -165), (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -164), 0), 100000000, 0, -163), 0), 100000000, 0, -162), 0, (("src/unsigned.mli", 59, 1244, 1246), ("src/unsigned.mli", 59, 1244, 1267), 0), 0, Tag1 ("Unsigned", 16)), 0); (("rem", 905), ((Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -161), (Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -160), (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -159), 0), 100000000, 0, -158), 0), 100000000, 0, -157), 0, (("src/unsigned.mli", 62, 1347, 1349), ("src/unsigned.mli", 62, 1347, 1370), 0), 0, Tag1 ("Unsigned", 17)), 0); (("max_int", 906), ((Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -156), 0, (("src/unsigned.mli", 66, 1465, 1467), ("src/unsigned.mli", 66, 1465, 1482), 0), 0, Tag1 ("Unsigned", 18)), 0); (("logand", 907), ((Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -155), (Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -154), (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -153), 0), 100000000, 0, -152), 0), 100000000, 0, -151), 0, (("src/unsigned.mli", 69, 1529, 1531), ("src/unsigned.mli", 69, 1529, 1555), 0), 0, Tag1 ("Unsigned", 19)), 0); (("logor", 908), ((Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -150), (Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -149), (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -148), 0), 100000000, 0, -147), 0), 100000000, 0, -146), 0, (("src/unsigned.mli", 72, 1587, 1589), ("src/unsigned.mli", 72, 1587, 1612), 0), 0, Tag1 ("Unsigned", 20)), 0); (("logxor", 909), ((Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -145), (Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -144), (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -143), 0), 100000000, 0, -142), 0), 100000000, 0, -141), 0, (("src/unsigned.mli", 75, 1643, 1645), ("src/unsigned.mli", 75, 1643, 1669), 0), 0, Tag1 ("Unsigned", 21)), 0); (("shift_left", 910), ((Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -140), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -139), (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -138), 0), 100000000, 0, -137), 0), 100000000, 0, -136), 0, (("src/unsigned.mli", 78, 1710, 1712), ("src/unsigned.mli", 78, 1710, 1742), 0), 0, Tag1 ("Unsigned", 22)), 0); (("shift_right", 911), ((Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -135), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -134), (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -133), 0), 100000000, 0, -132), 0), 100000000, 0, -131), 0, (("src/unsigned.mli", 81, 1811, 1813), ("src/unsigned.mli", 81, 1811, 1844), 0), 0, Tag1 ("Unsigned", 23)), 0); (("of_int", 912), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -130), (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -129), 0), 100000000, 0, -128), 0, (("src/unsigned.mli", 84, 1915, 1917), ("src/unsigned.mli", 84, 1915, 1938), 0), 0, Tag1 ("Unsigned", 24)), 0); (("to_int", 913), ((Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -127), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -126), 0), 100000000, 0, -125), 0, (("src/unsigned.mli", 87, 2001, 2003), ("src/unsigned.mli", 87, 2001, 2024), 0), 0, Tag1 ("Unsigned", 25)), 0); (("of_int64", 914), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -124), (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -123), 0), 100000000, 0, -122), 0, (("src/unsigned.mli", 90, 2087, 2089), ("src/unsigned.mli", 90, 2087, 2114), 0), 0, Tag1 ("Unsigned", 26)), 0); (("to_int64", 915), ((Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -121), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -120), 0), 100000000, 0, -119), 0, (("src/unsigned.mli", 93, 2179, 2181), ("src/unsigned.mli", 93, 2179, 2206), 0), 0, Tag1 ("Unsigned", 27)), 0); (("of_string", 916), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -118), (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -117), 0), 100000000, 0, -116), 0, (("src/unsigned.mli", 96, 2271, 2273), ("src/unsigned.mli", 96, 2271, 2300), 0), 0, Tag1 ("Unsigned", 28)), 0); (("to_string", 917), ((Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -115), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -114), 0), 100000000, 0, -113), 0, (("src/unsigned.mli", 101, 2464, 2466), ("src/unsigned.mli", 101, 2464, 2493), 0), 0, Tag1 ("Unsigned", 29)), 0); (("to_hexstring", 918), ((Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -112), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -111), 0), 100000000, 0, -110), 0, (("src/unsigned.mli", 104, 2554, 2556), ("src/unsigned.mli", 104, 2554, 2586), 0), 0, Tag1 ("Unsigned", 30)), 0); (("zero", 919), ((Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -109), 0, (("src/unsigned.mli", 107, 2659, 2661), ("src/unsigned.mli", 107, 2659, 2673), 0), 0, Tag1 ("Unsigned", 31)), 0); (("one", 920), ((Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -108), 0, (("src/unsigned.mli", 110, 2699, 2701), ("src/unsigned.mli", 110, 2699, 2712), 0), 0, Tag1 ("Unsigned", 32)), 0); (("lognot", 921), ((Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -107), (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -106), 0), 100000000, 0, -105), 0, (("src/unsigned.mli", 113, 2738, 2740), ("src/unsigned.mli", 113, 2738, 2759), 0), 0, Tag1 ("Unsigned", 33)), 0); (("succ", 922), ((Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -104), (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -103), 0), 100000000, 0, -102), 0, (("src/unsigned.mli", 116, 2796, 2798), ("src/unsigned.mli", 116, 2796, 2815), 0), 0, Tag1 ("Unsigned", 34)), 0); (("pred", 923), ((Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -101), (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -100), 0), 100000000, 0, -99), 0, (("src/unsigned.mli", 119, 2837, 2839), ("src/unsigned.mli", 119, 2837, 2856), 0), 0, Tag1 ("Unsigned", 35)), 0); (("compare", 924), ((Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -98), (Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -97), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -96), 0), 100000000, 0, -95), 0), 100000000, 0, -94), 0, (("src/unsigned.mli", 122, 2880, 2882), ("src/unsigned.mli", 122, 2880, 2909), 0), 0, Tag1 ("Unsigned", 36)), 0); (("equal", 925), ((Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -93), (Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -92), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -91), 0), 100000000, 0, -90), 0), 100000000, 0, -89), 0, (("src/unsigned.mli", 126, 3023, 3025), ("src/unsigned.mli", 126, 3023, 3051), 0), 0, Tag1 ("Unsigned", 37)), 0); (("max", 926), ((Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -88), (Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -87), (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -86), 0), 100000000, 0, -85), 0), 100000000, 0, -84), 0, (("src/unsigned.mli", 129, 3128, 3130), ("src/unsigned.mli", 129, 3128, 3151), 0), 0, Tag1 ("Unsigned", 38)), 0); (("min", 927), ((Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -83), (Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -82), (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -81), 0), 100000000, 0, -80), 0), 100000000, 0, -79), 0, (("src/unsigned.mli", 132, 3202, 3204), ("src/unsigned.mli", 132, 3202, 3225), 0), 0, Tag1 ("Unsigned", 39)), 0); (("of_string_opt", 928), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -78), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -77)], (0)), 100000000, 0, -76), 0), 100000000, 0, -75), 0, (("src/unsigned.mli", 135, 3275, 3277), ("src/unsigned.mli", 135, 3275, 3315), 0), 0, Tag1 ("Unsigned", 40)), 0); (("pp", 929), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -74), (Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -73), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -72), 0), 100000000, 0, -71), 0), 100000000, 0, -70), 0, (("src/unsigned.mli", 139, 3470, 3472), ("src/unsigned.mli", 139, 3470, 3510), 0), 0, Tag1 ("Unsigned", 41)), 0); (("pp_hex", 930), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -69), (Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -68), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -67), 0), 100000000, 0, -66), 0), 100000000, 0, -65), 0, (("src/unsigned.mli", 142, 3571, 3573), ("src/unsigned.mli", 142, 3571, 3615), 0), 0, Tag1 ("Unsigned", 42)), 0); Tag3 (("Infix", 931), 0, (Tag1 ([(("+", 932), ((Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -231), (Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -230), (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -229), 0), 100000000, 0, -228), 0), 100000000, 0, -227), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 1)), 0); (("-", 933), ((Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -226), (Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -225), (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -224), 0), 100000000, 0, -223), 0), 100000000, 0, -222), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 2)), 0); (("*", 934), ((Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -221), (Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -220), (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -219), 0), 100000000, 0, -218), 0), 100000000, 0, -217), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 3)), 0); (("/", 935), ((Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -216), (Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -215), (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -214), 0), 100000000, 0, -213), 0), 100000000, 0, -212), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 4)), 0); (("mod", 936), ((Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -211), (Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -210), (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -209), 0), 100000000, 0, -208), 0), 100000000, 0, -207), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 5)), 0); (("land", 937), ((Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -206), (Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -205), (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -204), 0), 100000000, 0, -203), 0), 100000000, 0, -202), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 6)), 0); (("lor", 938), ((Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -201), (Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -200), (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -199), 0), 100000000, 0, -198), 0), 100000000, 0, -197), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 7)), 0); (("lxor", 939), ((Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -196), (Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -195), (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -194), 0), 100000000, 0, -193), 0), 100000000, 0, -192), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 8)), 0); (("lsl", 940), ((Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -191), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -190), (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -189), 0), 100000000, 0, -188), 0), 100000000, 0, -187), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 9)), 0); (("lsr", 941), ((Tag1 (0, (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -186), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -185), (Tag3 ((("t", 900)), 0, (0)), 100000000, 0, -184), 0), 100000000, 0, -183), 0), 100000000, 0, -182), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 10)), 0)]), 0, (("src/unsigned.mli", 145, 3679, 3681), ("src/unsigned.mli", 145, 3679, 3718), 0), Tag1 ("Unsigned", 44)), 0, 0)])), 0, (("src/unsigned.mli", 47, 1073, 1073), ("src/unsigned.mli", 146, 3719, 3722), 0), Tag1 ("Unsigned", 45)), 0); Tag3 (("UChar", 868), 0, (Tag1 ([Tag1 (("t", 942), (0, 0, 0, 0, ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -349)), 0, 0, 0, 0, (("src/unsigned.mli", 149, 3760, 3782), ("src/unsigned.mli", 149, 3760, 3802), 0), 0, 1, 0, Tag1 ("Unsigned", 46)), 1, 0); (("add", 943), ((Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -348), (Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -347), (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -346), 0), 100000000, 0, -345), 0), 100000000, 0, -344), 0, (("src/unsigned.mli", 50, 1103, 1105), ("src/unsigned.mli", 50, 1103, 1126), 0), 0, Tag1 ("Unsigned", 13)), 0); (("sub", 944), ((Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -343), (Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -342), (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -341), 0), 100000000, 0, -340), 0), 100000000, 0, -339), 0, (("src/unsigned.mli", 53, 1147, 1149), ("src/unsigned.mli", 53, 1147, 1170), 0), 0, Tag1 ("Unsigned", 14)), 0); (("mul", 945), ((Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -338), (Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -337), (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -336), 0), 100000000, 0, -335), 0), 100000000, 0, -334), 0, (("src/unsigned.mli", 56, 1194, 1196), ("src/unsigned.mli", 56, 1194, 1217), 0), 0, Tag1 ("Unsigned", 15)), 0); (("div", 946), ((Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -333), (Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -332), (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -331), 0), 100000000, 0, -330), 0), 100000000, 0, -329), 0, (("src/unsigned.mli", 59, 1244, 1246), ("src/unsigned.mli", 59, 1244, 1267), 0), 0, Tag1 ("Unsigned", 16)), 0); (("rem", 947), ((Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -328), (Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -327), (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -326), 0), 100000000, 0, -325), 0), 100000000, 0, -324), 0, (("src/unsigned.mli", 62, 1347, 1349), ("src/unsigned.mli", 62, 1347, 1370), 0), 0, Tag1 ("Unsigned", 17)), 0); (("max_int", 948), ((Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -323), 0, (("src/unsigned.mli", 66, 1465, 1467), ("src/unsigned.mli", 66, 1465, 1482), 0), 0, Tag1 ("Unsigned", 18)), 0); (("logand", 949), ((Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -322), (Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -321), (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -320), 0), 100000000, 0, -319), 0), 100000000, 0, -318), 0, (("src/unsigned.mli", 69, 1529, 1531), ("src/unsigned.mli", 69, 1529, 1555), 0), 0, Tag1 ("Unsigned", 19)), 0); (("logor", 950), ((Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -317), (Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -316), (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -315), 0), 100000000, 0, -314), 0), 100000000, 0, -313), 0, (("src/unsigned.mli", 72, 1587, 1589), ("src/unsigned.mli", 72, 1587, 1612), 0), 0, Tag1 ("Unsigned", 20)), 0); (("logxor", 951), ((Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -312), (Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -311), (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -310), 0), 100000000, 0, -309), 0), 100000000, 0, -308), 0, (("src/unsigned.mli", 75, 1643, 1645), ("src/unsigned.mli", 75, 1643, 1669), 0), 0, Tag1 ("Unsigned", 21)), 0); (("shift_left", 952), ((Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -307), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -306), (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -305), 0), 100000000, 0, -304), 0), 100000000, 0, -303), 0, (("src/unsigned.mli", 78, 1710, 1712), ("src/unsigned.mli", 78, 1710, 1742), 0), 0, Tag1 ("Unsigned", 22)), 0); (("shift_right", 953), ((Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -302), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -301), (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -300), 0), 100000000, 0, -299), 0), 100000000, 0, -298), 0, (("src/unsigned.mli", 81, 1811, 1813), ("src/unsigned.mli", 81, 1811, 1844), 0), 0, Tag1 ("Unsigned", 23)), 0); (("of_int", 954), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -297), (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -296), 0), 100000000, 0, -295), 0, (("src/unsigned.mli", 84, 1915, 1917), ("src/unsigned.mli", 84, 1915, 1938), 0), 0, Tag1 ("Unsigned", 24)), 0); (("to_int", 955), ((Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -294), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -293), 0), 100000000, 0, -292), 0, (("src/unsigned.mli", 87, 2001, 2003), ("src/unsigned.mli", 87, 2001, 2024), 0), 0, Tag1 ("Unsigned", 25)), 0); (("of_int64", 956), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -291), (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -290), 0), 100000000, 0, -289), 0, (("src/unsigned.mli", 90, 2087, 2089), ("src/unsigned.mli", 90, 2087, 2114), 0), 0, Tag1 ("Unsigned", 26)), 0); (("to_int64", 957), ((Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -288), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -287), 0), 100000000, 0, -286), 0, (("src/unsigned.mli", 93, 2179, 2181), ("src/unsigned.mli", 93, 2179, 2206), 0), 0, Tag1 ("Unsigned", 27)), 0); (("of_string", 958), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -285), (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -284), 0), 100000000, 0, -283), 0, (("src/unsigned.mli", 96, 2271, 2273), ("src/unsigned.mli", 96, 2271, 2300), 0), 0, Tag1 ("Unsigned", 28)), 0); (("to_string", 959), ((Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -282), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -281), 0), 100000000, 0, -280), 0, (("src/unsigned.mli", 101, 2464, 2466), ("src/unsigned.mli", 101, 2464, 2493), 0), 0, Tag1 ("Unsigned", 29)), 0); (("to_hexstring", 960), ((Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -279), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -278), 0), 100000000, 0, -277), 0, (("src/unsigned.mli", 104, 2554, 2556), ("src/unsigned.mli", 104, 2554, 2586), 0), 0, Tag1 ("Unsigned", 30)), 0); (("zero", 961), ((Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -276), 0, (("src/unsigned.mli", 107, 2659, 2661), ("src/unsigned.mli", 107, 2659, 2673), 0), 0, Tag1 ("Unsigned", 31)), 0); (("one", 962), ((Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -275), 0, (("src/unsigned.mli", 110, 2699, 2701), ("src/unsigned.mli", 110, 2699, 2712), 0), 0, Tag1 ("Unsigned", 32)), 0); (("lognot", 963), ((Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -274), (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -273), 0), 100000000, 0, -272), 0, (("src/unsigned.mli", 113, 2738, 2740), ("src/unsigned.mli", 113, 2738, 2759), 0), 0, Tag1 ("Unsigned", 33)), 0); (("succ", 964), ((Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -271), (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -270), 0), 100000000, 0, -269), 0, (("src/unsigned.mli", 116, 2796, 2798), ("src/unsigned.mli", 116, 2796, 2815), 0), 0, Tag1 ("Unsigned", 34)), 0); (("pred", 965), ((Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -268), (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -267), 0), 100000000, 0, -266), 0, (("src/unsigned.mli", 119, 2837, 2839), ("src/unsigned.mli", 119, 2837, 2856), 0), 0, Tag1 ("Unsigned", 35)), 0); (("compare", 966), ((Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -265), (Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -264), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -263), 0), 100000000, 0, -262), 0), 100000000, 0, -261), 0, (("src/unsigned.mli", 122, 2880, 2882), ("src/unsigned.mli", 122, 2880, 2909), 0), 0, Tag1 ("Unsigned", 36)), 0); (("equal", 967), ((Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -260), (Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -259), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -258), 0), 100000000, 0, -257), 0), 100000000, 0, -256), 0, (("src/unsigned.mli", 126, 3023, 3025), ("src/unsigned.mli", 126, 3023, 3051), 0), 0, Tag1 ("Unsigned", 37)), 0); (("max", 968), ((Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -255), (Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -254), (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -253), 0), 100000000, 0, -252), 0), 100000000, 0, -251), 0, (("src/unsigned.mli", 129, 3128, 3130), ("src/unsigned.mli", 129, 3128, 3151), 0), 0, Tag1 ("Unsigned", 38)), 0); (("min", 969), ((Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -250), (Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -249), (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -248), 0), 100000000, 0, -247), 0), 100000000, 0, -246), 0, (("src/unsigned.mli", 132, 3202, 3204), ("src/unsigned.mli", 132, 3202, 3225), 0), 0, Tag1 ("Unsigned", 39)), 0); (("of_string_opt", 970), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -245), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -244)], (0)), 100000000, 0, -243), 0), 100000000, 0, -242), 0, (("src/unsigned.mli", 135, 3275, 3277), ("src/unsigned.mli", 135, 3275, 3315), 0), 0, Tag1 ("Unsigned", 40)), 0); (("pp", 971), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -241), (Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -240), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -239), 0), 100000000, 0, -238), 0), 100000000, 0, -237), 0, (("src/unsigned.mli", 139, 3470, 3472), ("src/unsigned.mli", 139, 3470, 3510), 0), 0, Tag1 ("Unsigned", 41)), 0); (("pp_hex", 972), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -236), (Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -235), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -234), 0), 100000000, 0, -233), 0), 100000000, 0, -232), 0, (("src/unsigned.mli", 142, 3571, 3573), ("src/unsigned.mli", 142, 3571, 3615), 0), 0, Tag1 ("Unsigned", 42)), 0); Tag3 (("Infix", 973), 0, (Tag1 ([(("+", 974), ((Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -399), (Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -398), (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -397), 0), 100000000, 0, -396), 0), 100000000, 0, -395), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 1)), 0); (("-", 975), ((Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -394), (Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -393), (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -392), 0), 100000000, 0, -391), 0), 100000000, 0, -390), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 2)), 0); (("*", 976), ((Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -389), (Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -388), (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -387), 0), 100000000, 0, -386), 0), 100000000, 0, -385), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 3)), 0); (("/", 977), ((Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -384), (Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -383), (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -382), 0), 100000000, 0, -381), 0), 100000000, 0, -380), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 4)), 0); (("mod", 978), ((Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -379), (Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -378), (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -377), 0), 100000000, 0, -376), 0), 100000000, 0, -375), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 5)), 0); (("land", 979), ((Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -374), (Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -373), (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -372), 0), 100000000, 0, -371), 0), 100000000, 0, -370), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 6)), 0); (("lor", 980), ((Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -369), (Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -368), (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -367), 0), 100000000, 0, -366), 0), 100000000, 0, -365), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 7)), 0); (("lxor", 981), ((Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -364), (Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -363), (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -362), 0), 100000000, 0, -361), 0), 100000000, 0, -360), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 8)), 0); (("lsl", 982), ((Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -359), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -358), (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -357), 0), 100000000, 0, -356), 0), 100000000, 0, -355), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 9)), 0); (("lsr", 983), ((Tag1 (0, (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -354), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -353), (Tag3 ((("t", 942)), 0, (0)), 100000000, 0, -352), 0), 100000000, 0, -351), 0), 100000000, 0, -350), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 10)), 0)]), 0, (("src/unsigned.mli", 145, 3679, 3681), ("src/unsigned.mli", 145, 3679, 3718), 0), Tag1 ("Unsigned", 44)), 0, 0)]), 0, (("src/unsigned.mli", 149, 3760, 3760), ("src/unsigned.mli", 149, 3760, 3802), 0), Tag1 ("Unsigned", 47)), 0, 0); Tag3 (("UInt8", 869), 0, (Tag1 ([Tag1 (("t", 984), (0, 0, 0, 0, ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -517)), 0, 0, 0, 0, (("src/unsigned.mli", 152, 3846, 3868), ("src/unsigned.mli", 152, 3846, 3888), 0), 0, 1, 0, Tag1 ("Unsigned", 48)), 1, 0); (("add", 985), ((Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -516), (Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -515), (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -514), 0), 100000000, 0, -513), 0), 100000000, 0, -512), 0, (("src/unsigned.mli", 50, 1103, 1105), ("src/unsigned.mli", 50, 1103, 1126), 0), 0, Tag1 ("Unsigned", 13)), 0); (("sub", 986), ((Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -511), (Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -510), (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -509), 0), 100000000, 0, -508), 0), 100000000, 0, -507), 0, (("src/unsigned.mli", 53, 1147, 1149), ("src/unsigned.mli", 53, 1147, 1170), 0), 0, Tag1 ("Unsigned", 14)), 0); (("mul", 987), ((Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -506), (Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -505), (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -504), 0), 100000000, 0, -503), 0), 100000000, 0, -502), 0, (("src/unsigned.mli", 56, 1194, 1196), ("src/unsigned.mli", 56, 1194, 1217), 0), 0, Tag1 ("Unsigned", 15)), 0); (("div", 988), ((Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -501), (Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -500), (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -499), 0), 100000000, 0, -498), 0), 100000000, 0, -497), 0, (("src/unsigned.mli", 59, 1244, 1246), ("src/unsigned.mli", 59, 1244, 1267), 0), 0, Tag1 ("Unsigned", 16)), 0); (("rem", 989), ((Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -496), (Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -495), (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -494), 0), 100000000, 0, -493), 0), 100000000, 0, -492), 0, (("src/unsigned.mli", 62, 1347, 1349), ("src/unsigned.mli", 62, 1347, 1370), 0), 0, Tag1 ("Unsigned", 17)), 0); (("max_int", 990), ((Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -491), 0, (("src/unsigned.mli", 66, 1465, 1467), ("src/unsigned.mli", 66, 1465, 1482), 0), 0, Tag1 ("Unsigned", 18)), 0); (("logand", 991), ((Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -490), (Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -489), (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -488), 0), 100000000, 0, -487), 0), 100000000, 0, -486), 0, (("src/unsigned.mli", 69, 1529, 1531), ("src/unsigned.mli", 69, 1529, 1555), 0), 0, Tag1 ("Unsigned", 19)), 0); (("logor", 992), ((Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -485), (Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -484), (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -483), 0), 100000000, 0, -482), 0), 100000000, 0, -481), 0, (("src/unsigned.mli", 72, 1587, 1589), ("src/unsigned.mli", 72, 1587, 1612), 0), 0, Tag1 ("Unsigned", 20)), 0); (("logxor", 993), ((Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -480), (Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -479), (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -478), 0), 100000000, 0, -477), 0), 100000000, 0, -476), 0, (("src/unsigned.mli", 75, 1643, 1645), ("src/unsigned.mli", 75, 1643, 1669), 0), 0, Tag1 ("Unsigned", 21)), 0); (("shift_left", 994), ((Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -475), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -474), (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -473), 0), 100000000, 0, -472), 0), 100000000, 0, -471), 0, (("src/unsigned.mli", 78, 1710, 1712), ("src/unsigned.mli", 78, 1710, 1742), 0), 0, Tag1 ("Unsigned", 22)), 0); (("shift_right", 995), ((Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -470), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -469), (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -468), 0), 100000000, 0, -467), 0), 100000000, 0, -466), 0, (("src/unsigned.mli", 81, 1811, 1813), ("src/unsigned.mli", 81, 1811, 1844), 0), 0, Tag1 ("Unsigned", 23)), 0); (("of_int", 996), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -465), (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -464), 0), 100000000, 0, -463), 0, (("src/unsigned.mli", 84, 1915, 1917), ("src/unsigned.mli", 84, 1915, 1938), 0), 0, Tag1 ("Unsigned", 24)), 0); (("to_int", 997), ((Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -462), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -461), 0), 100000000, 0, -460), 0, (("src/unsigned.mli", 87, 2001, 2003), ("src/unsigned.mli", 87, 2001, 2024), 0), 0, Tag1 ("Unsigned", 25)), 0); (("of_int64", 998), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -459), (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -458), 0), 100000000, 0, -457), 0, (("src/unsigned.mli", 90, 2087, 2089), ("src/unsigned.mli", 90, 2087, 2114), 0), 0, Tag1 ("Unsigned", 26)), 0); (("to_int64", 999), ((Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -456), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -455), 0), 100000000, 0, -454), 0, (("src/unsigned.mli", 93, 2179, 2181), ("src/unsigned.mli", 93, 2179, 2206), 0), 0, Tag1 ("Unsigned", 27)), 0); (("of_string", 1000), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -453), (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -452), 0), 100000000, 0, -451), 0, (("src/unsigned.mli", 96, 2271, 2273), ("src/unsigned.mli", 96, 2271, 2300), 0), 0, Tag1 ("Unsigned", 28)), 0); (("to_string", 1001), ((Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -450), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -449), 0), 100000000, 0, -448), 0, (("src/unsigned.mli", 101, 2464, 2466), ("src/unsigned.mli", 101, 2464, 2493), 0), 0, Tag1 ("Unsigned", 29)), 0); (("to_hexstring", 1002), ((Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -447), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -446), 0), 100000000, 0, -445), 0, (("src/unsigned.mli", 104, 2554, 2556), ("src/unsigned.mli", 104, 2554, 2586), 0), 0, Tag1 ("Unsigned", 30)), 0); (("zero", 1003), ((Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -444), 0, (("src/unsigned.mli", 107, 2659, 2661), ("src/unsigned.mli", 107, 2659, 2673), 0), 0, Tag1 ("Unsigned", 31)), 0); (("one", 1004), ((Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -443), 0, (("src/unsigned.mli", 110, 2699, 2701), ("src/unsigned.mli", 110, 2699, 2712), 0), 0, Tag1 ("Unsigned", 32)), 0); (("lognot", 1005), ((Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -442), (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -441), 0), 100000000, 0, -440), 0, (("src/unsigned.mli", 113, 2738, 2740), ("src/unsigned.mli", 113, 2738, 2759), 0), 0, Tag1 ("Unsigned", 33)), 0); (("succ", 1006), ((Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -439), (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -438), 0), 100000000, 0, -437), 0, (("src/unsigned.mli", 116, 2796, 2798), ("src/unsigned.mli", 116, 2796, 2815), 0), 0, Tag1 ("Unsigned", 34)), 0); (("pred", 1007), ((Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -436), (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -435), 0), 100000000, 0, -434), 0, (("src/unsigned.mli", 119, 2837, 2839), ("src/unsigned.mli", 119, 2837, 2856), 0), 0, Tag1 ("Unsigned", 35)), 0); (("compare", 1008), ((Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -433), (Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -432), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -431), 0), 100000000, 0, -430), 0), 100000000, 0, -429), 0, (("src/unsigned.mli", 122, 2880, 2882), ("src/unsigned.mli", 122, 2880, 2909), 0), 0, Tag1 ("Unsigned", 36)), 0); (("equal", 1009), ((Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -428), (Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -427), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -426), 0), 100000000, 0, -425), 0), 100000000, 0, -424), 0, (("src/unsigned.mli", 126, 3023, 3025), ("src/unsigned.mli", 126, 3023, 3051), 0), 0, Tag1 ("Unsigned", 37)), 0); (("max", 1010), ((Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -423), (Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -422), (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -421), 0), 100000000, 0, -420), 0), 100000000, 0, -419), 0, (("src/unsigned.mli", 129, 3128, 3130), ("src/unsigned.mli", 129, 3128, 3151), 0), 0, Tag1 ("Unsigned", 38)), 0); (("min", 1011), ((Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -418), (Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -417), (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -416), 0), 100000000, 0, -415), 0), 100000000, 0, -414), 0, (("src/unsigned.mli", 132, 3202, 3204), ("src/unsigned.mli", 132, 3202, 3225), 0), 0, Tag1 ("Unsigned", 39)), 0); (("of_string_opt", 1012), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -413), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -412)], (0)), 100000000, 0, -411), 0), 100000000, 0, -410), 0, (("src/unsigned.mli", 135, 3275, 3277), ("src/unsigned.mli", 135, 3275, 3315), 0), 0, Tag1 ("Unsigned", 40)), 0); (("pp", 1013), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -409), (Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -408), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -407), 0), 100000000, 0, -406), 0), 100000000, 0, -405), 0, (("src/unsigned.mli", 139, 3470, 3472), ("src/unsigned.mli", 139, 3470, 3510), 0), 0, Tag1 ("Unsigned", 41)), 0); (("pp_hex", 1014), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -404), (Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -403), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -402), 0), 100000000, 0, -401), 0), 100000000, 0, -400), 0, (("src/unsigned.mli", 142, 3571, 3573), ("src/unsigned.mli", 142, 3571, 3615), 0), 0, Tag1 ("Unsigned", 42)), 0); Tag3 (("Infix", 1015), 0, (Tag1 ([(("+", 1016), ((Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -567), (Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -566), (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -565), 0), 100000000, 0, -564), 0), 100000000, 0, -563), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 1)), 0); (("-", 1017), ((Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -562), (Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -561), (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -560), 0), 100000000, 0, -559), 0), 100000000, 0, -558), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 2)), 0); (("*", 1018), ((Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -557), (Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -556), (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -555), 0), 100000000, 0, -554), 0), 100000000, 0, -553), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 3)), 0); (("/", 1019), ((Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -552), (Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -551), (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -550), 0), 100000000, 0, -549), 0), 100000000, 0, -548), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 4)), 0); (("mod", 1020), ((Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -547), (Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -546), (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -545), 0), 100000000, 0, -544), 0), 100000000, 0, -543), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 5)), 0); (("land", 1021), ((Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -542), (Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -541), (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -540), 0), 100000000, 0, -539), 0), 100000000, 0, -538), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 6)), 0); (("lor", 1022), ((Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -537), (Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -536), (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -535), 0), 100000000, 0, -534), 0), 100000000, 0, -533), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 7)), 0); (("lxor", 1023), ((Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -532), (Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -531), (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -530), 0), 100000000, 0, -529), 0), 100000000, 0, -528), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 8)), 0); (("lsl", 1024), ((Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -527), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -526), (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -525), 0), 100000000, 0, -524), 0), 100000000, 0, -523), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 9)), 0); (("lsr", 1025), ((Tag1 (0, (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -522), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -521), (Tag3 ((("t", 984)), 0, (0)), 100000000, 0, -520), 0), 100000000, 0, -519), 0), 100000000, 0, -518), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 10)), 0)]), 0, (("src/unsigned.mli", 145, 3679, 3681), ("src/unsigned.mli", 145, 3679, 3718), 0), Tag1 ("Unsigned", 44)), 0, 0)]), 0, (("src/unsigned.mli", 152, 3846, 3846), ("src/unsigned.mli", 152, 3846, 3888), 0), Tag1 ("Unsigned", 49)), 0, 0); Tag3 (("UInt16", 870), 0, (Tag1 ([Tag1 (("t", 1026), (0, 0, 0, 0, ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -685)), 0, 0, 0, 0, (("src/unsigned.mli", 155, 3941, 3964), ("src/unsigned.mli", 155, 3941, 3984), 0), 0, 1, 0, Tag1 ("Unsigned", 50)), 1, 0); (("add", 1027), ((Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -684), (Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -683), (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -682), 0), 100000000, 0, -681), 0), 100000000, 0, -680), 0, (("src/unsigned.mli", 50, 1103, 1105), ("src/unsigned.mli", 50, 1103, 1126), 0), 0, Tag1 ("Unsigned", 13)), 0); (("sub", 1028), ((Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -679), (Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -678), (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -677), 0), 100000000, 0, -676), 0), 100000000, 0, -675), 0, (("src/unsigned.mli", 53, 1147, 1149), ("src/unsigned.mli", 53, 1147, 1170), 0), 0, Tag1 ("Unsigned", 14)), 0); (("mul", 1029), ((Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -674), (Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -673), (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -672), 0), 100000000, 0, -671), 0), 100000000, 0, -670), 0, (("src/unsigned.mli", 56, 1194, 1196), ("src/unsigned.mli", 56, 1194, 1217), 0), 0, Tag1 ("Unsigned", 15)), 0); (("div", 1030), ((Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -669), (Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -668), (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -667), 0), 100000000, 0, -666), 0), 100000000, 0, -665), 0, (("src/unsigned.mli", 59, 1244, 1246), ("src/unsigned.mli", 59, 1244, 1267), 0), 0, Tag1 ("Unsigned", 16)), 0); (("rem", 1031), ((Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -664), (Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -663), (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -662), 0), 100000000, 0, -661), 0), 100000000, 0, -660), 0, (("src/unsigned.mli", 62, 1347, 1349), ("src/unsigned.mli", 62, 1347, 1370), 0), 0, Tag1 ("Unsigned", 17)), 0); (("max_int", 1032), ((Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -659), 0, (("src/unsigned.mli", 66, 1465, 1467), ("src/unsigned.mli", 66, 1465, 1482), 0), 0, Tag1 ("Unsigned", 18)), 0); (("logand", 1033), ((Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -658), (Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -657), (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -656), 0), 100000000, 0, -655), 0), 100000000, 0, -654), 0, (("src/unsigned.mli", 69, 1529, 1531), ("src/unsigned.mli", 69, 1529, 1555), 0), 0, Tag1 ("Unsigned", 19)), 0); (("logor", 1034), ((Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -653), (Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -652), (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -651), 0), 100000000, 0, -650), 0), 100000000, 0, -649), 0, (("src/unsigned.mli", 72, 1587, 1589), ("src/unsigned.mli", 72, 1587, 1612), 0), 0, Tag1 ("Unsigned", 20)), 0); (("logxor", 1035), ((Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -648), (Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -647), (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -646), 0), 100000000, 0, -645), 0), 100000000, 0, -644), 0, (("src/unsigned.mli", 75, 1643, 1645), ("src/unsigned.mli", 75, 1643, 1669), 0), 0, Tag1 ("Unsigned", 21)), 0); (("shift_left", 1036), ((Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -643), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -642), (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -641), 0), 100000000, 0, -640), 0), 100000000, 0, -639), 0, (("src/unsigned.mli", 78, 1710, 1712), ("src/unsigned.mli", 78, 1710, 1742), 0), 0, Tag1 ("Unsigned", 22)), 0); (("shift_right", 1037), ((Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -638), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -637), (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -636), 0), 100000000, 0, -635), 0), 100000000, 0, -634), 0, (("src/unsigned.mli", 81, 1811, 1813), ("src/unsigned.mli", 81, 1811, 1844), 0), 0, Tag1 ("Unsigned", 23)), 0); (("of_int", 1038), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -633), (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -632), 0), 100000000, 0, -631), 0, (("src/unsigned.mli", 84, 1915, 1917), ("src/unsigned.mli", 84, 1915, 1938), 0), 0, Tag1 ("Unsigned", 24)), 0); (("to_int", 1039), ((Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -630), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -629), 0), 100000000, 0, -628), 0, (("src/unsigned.mli", 87, 2001, 2003), ("src/unsigned.mli", 87, 2001, 2024), 0), 0, Tag1 ("Unsigned", 25)), 0); (("of_int64", 1040), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -627), (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -626), 0), 100000000, 0, -625), 0, (("src/unsigned.mli", 90, 2087, 2089), ("src/unsigned.mli", 90, 2087, 2114), 0), 0, Tag1 ("Unsigned", 26)), 0); (("to_int64", 1041), ((Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -624), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -623), 0), 100000000, 0, -622), 0, (("src/unsigned.mli", 93, 2179, 2181), ("src/unsigned.mli", 93, 2179, 2206), 0), 0, Tag1 ("Unsigned", 27)), 0); (("of_string", 1042), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -621), (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -620), 0), 100000000, 0, -619), 0, (("src/unsigned.mli", 96, 2271, 2273), ("src/unsigned.mli", 96, 2271, 2300), 0), 0, Tag1 ("Unsigned", 28)), 0); (("to_string", 1043), ((Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -618), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -617), 0), 100000000, 0, -616), 0, (("src/unsigned.mli", 101, 2464, 2466), ("src/unsigned.mli", 101, 2464, 2493), 0), 0, Tag1 ("Unsigned", 29)), 0); (("to_hexstring", 1044), ((Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -615), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -614), 0), 100000000, 0, -613), 0, (("src/unsigned.mli", 104, 2554, 2556), ("src/unsigned.mli", 104, 2554, 2586), 0), 0, Tag1 ("Unsigned", 30)), 0); (("zero", 1045), ((Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -612), 0, (("src/unsigned.mli", 107, 2659, 2661), ("src/unsigned.mli", 107, 2659, 2673), 0), 0, Tag1 ("Unsigned", 31)), 0); (("one", 1046), ((Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -611), 0, (("src/unsigned.mli", 110, 2699, 2701), ("src/unsigned.mli", 110, 2699, 2712), 0), 0, Tag1 ("Unsigned", 32)), 0); (("lognot", 1047), ((Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -610), (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -609), 0), 100000000, 0, -608), 0, (("src/unsigned.mli", 113, 2738, 2740), ("src/unsigned.mli", 113, 2738, 2759), 0), 0, Tag1 ("Unsigned", 33)), 0); (("succ", 1048), ((Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -607), (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -606), 0), 100000000, 0, -605), 0, (("src/unsigned.mli", 116, 2796, 2798), ("src/unsigned.mli", 116, 2796, 2815), 0), 0, Tag1 ("Unsigned", 34)), 0); (("pred", 1049), ((Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -604), (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -603), 0), 100000000, 0, -602), 0, (("src/unsigned.mli", 119, 2837, 2839), ("src/unsigned.mli", 119, 2837, 2856), 0), 0, Tag1 ("Unsigned", 35)), 0); (("compare", 1050), ((Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -601), (Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -600), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -599), 0), 100000000, 0, -598), 0), 100000000, 0, -597), 0, (("src/unsigned.mli", 122, 2880, 2882), ("src/unsigned.mli", 122, 2880, 2909), 0), 0, Tag1 ("Unsigned", 36)), 0); (("equal", 1051), ((Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -596), (Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -595), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -594), 0), 100000000, 0, -593), 0), 100000000, 0, -592), 0, (("src/unsigned.mli", 126, 3023, 3025), ("src/unsigned.mli", 126, 3023, 3051), 0), 0, Tag1 ("Unsigned", 37)), 0); (("max", 1052), ((Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -591), (Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -590), (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -589), 0), 100000000, 0, -588), 0), 100000000, 0, -587), 0, (("src/unsigned.mli", 129, 3128, 3130), ("src/unsigned.mli", 129, 3128, 3151), 0), 0, Tag1 ("Unsigned", 38)), 0); (("min", 1053), ((Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -586), (Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -585), (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -584), 0), 100000000, 0, -583), 0), 100000000, 0, -582), 0, (("src/unsigned.mli", 132, 3202, 3204), ("src/unsigned.mli", 132, 3202, 3225), 0), 0, Tag1 ("Unsigned", 39)), 0); (("of_string_opt", 1054), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -581), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -580)], (0)), 100000000, 0, -579), 0), 100000000, 0, -578), 0, (("src/unsigned.mli", 135, 3275, 3277), ("src/unsigned.mli", 135, 3275, 3315), 0), 0, Tag1 ("Unsigned", 40)), 0); (("pp", 1055), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -577), (Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -576), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -575), 0), 100000000, 0, -574), 0), 100000000, 0, -573), 0, (("src/unsigned.mli", 139, 3470, 3472), ("src/unsigned.mli", 139, 3470, 3510), 0), 0, Tag1 ("Unsigned", 41)), 0); (("pp_hex", 1056), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -572), (Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -571), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -570), 0), 100000000, 0, -569), 0), 100000000, 0, -568), 0, (("src/unsigned.mli", 142, 3571, 3573), ("src/unsigned.mli", 142, 3571, 3615), 0), 0, Tag1 ("Unsigned", 42)), 0); Tag3 (("Infix", 1057), 0, (Tag1 ([(("+", 1058), ((Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -735), (Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -734), (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -733), 0), 100000000, 0, -732), 0), 100000000, 0, -731), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 1)), 0); (("-", 1059), ((Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -730), (Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -729), (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -728), 0), 100000000, 0, -727), 0), 100000000, 0, -726), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 2)), 0); (("*", 1060), ((Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -725), (Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -724), (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -723), 0), 100000000, 0, -722), 0), 100000000, 0, -721), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 3)), 0); (("/", 1061), ((Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -720), (Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -719), (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -718), 0), 100000000, 0, -717), 0), 100000000, 0, -716), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 4)), 0); (("mod", 1062), ((Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -715), (Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -714), (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -713), 0), 100000000, 0, -712), 0), 100000000, 0, -711), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 5)), 0); (("land", 1063), ((Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -710), (Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -709), (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -708), 0), 100000000, 0, -707), 0), 100000000, 0, -706), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 6)), 0); (("lor", 1064), ((Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -705), (Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -704), (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -703), 0), 100000000, 0, -702), 0), 100000000, 0, -701), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 7)), 0); (("lxor", 1065), ((Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -700), (Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -699), (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -698), 0), 100000000, 0, -697), 0), 100000000, 0, -696), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 8)), 0); (("lsl", 1066), ((Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -695), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -694), (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -693), 0), 100000000, 0, -692), 0), 100000000, 0, -691), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 9)), 0); (("lsr", 1067), ((Tag1 (0, (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -690), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -689), (Tag3 ((("t", 1026)), 0, (0)), 100000000, 0, -688), 0), 100000000, 0, -687), 0), 100000000, 0, -686), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 10)), 0)]), 0, (("src/unsigned.mli", 145, 3679, 3681), ("src/unsigned.mli", 145, 3679, 3718), 0), Tag1 ("Unsigned", 44)), 0, 0)]), 0, (("src/unsigned.mli", 155, 3941, 3941), ("src/unsigned.mli", 155, 3941, 3984), 0), Tag1 ("Unsigned", 51)), 0, 0); Tag3 (("UInt32", 871), 0, (Tag1 ([Tag1 (("t", 1068), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/unsigned.mli", 48, 1093, 1095), ("src/unsigned.mli", 48, 1093, 1101), 0), 0, 0, 0, Tag1 ("Unsigned", 12)), 1, 0); (("add", 1069), ((Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -858), (Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -857), (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -856), 0), 100000000, 0, -855), 0), 100000000, 0, -854), 0, (("src/unsigned.mli", 50, 1103, 1105), ("src/unsigned.mli", 50, 1103, 1126), 0), 0, Tag1 ("Unsigned", 13)), 0); (("sub", 1070), ((Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -853), (Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -852), (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -851), 0), 100000000, 0, -850), 0), 100000000, 0, -849), 0, (("src/unsigned.mli", 53, 1147, 1149), ("src/unsigned.mli", 53, 1147, 1170), 0), 0, Tag1 ("Unsigned", 14)), 0); (("mul", 1071), ((Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -848), (Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -847), (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -846), 0), 100000000, 0, -845), 0), 100000000, 0, -844), 0, (("src/unsigned.mli", 56, 1194, 1196), ("src/unsigned.mli", 56, 1194, 1217), 0), 0, Tag1 ("Unsigned", 15)), 0); (("div", 1072), ((Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -843), (Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -842), (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -841), 0), 100000000, 0, -840), 0), 100000000, 0, -839), 0, (("src/unsigned.mli", 59, 1244, 1246), ("src/unsigned.mli", 59, 1244, 1267), 0), 0, Tag1 ("Unsigned", 16)), 0); (("rem", 1073), ((Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -838), (Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -837), (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -836), 0), 100000000, 0, -835), 0), 100000000, 0, -834), 0, (("src/unsigned.mli", 62, 1347, 1349), ("src/unsigned.mli", 62, 1347, 1370), 0), 0, Tag1 ("Unsigned", 17)), 0); (("max_int", 1074), ((Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -833), 0, (("src/unsigned.mli", 66, 1465, 1467), ("src/unsigned.mli", 66, 1465, 1482), 0), 0, Tag1 ("Unsigned", 18)), 0); (("logand", 1075), ((Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -832), (Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -831), (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -830), 0), 100000000, 0, -829), 0), 100000000, 0, -828), 0, (("src/unsigned.mli", 69, 1529, 1531), ("src/unsigned.mli", 69, 1529, 1555), 0), 0, Tag1 ("Unsigned", 19)), 0); (("logor", 1076), ((Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -827), (Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -826), (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -825), 0), 100000000, 0, -824), 0), 100000000, 0, -823), 0, (("src/unsigned.mli", 72, 1587, 1589), ("src/unsigned.mli", 72, 1587, 1612), 0), 0, Tag1 ("Unsigned", 20)), 0); (("logxor", 1077), ((Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -822), (Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -821), (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -820), 0), 100000000, 0, -819), 0), 100000000, 0, -818), 0, (("src/unsigned.mli", 75, 1643, 1645), ("src/unsigned.mli", 75, 1643, 1669), 0), 0, Tag1 ("Unsigned", 21)), 0); (("shift_left", 1078), ((Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -817), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -816), (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -815), 0), 100000000, 0, -814), 0), 100000000, 0, -813), 0, (("src/unsigned.mli", 78, 1710, 1712), ("src/unsigned.mli", 78, 1710, 1742), 0), 0, Tag1 ("Unsigned", 22)), 0); (("shift_right", 1079), ((Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -812), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -811), (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -810), 0), 100000000, 0, -809), 0), 100000000, 0, -808), 0, (("src/unsigned.mli", 81, 1811, 1813), ("src/unsigned.mli", 81, 1811, 1844), 0), 0, Tag1 ("Unsigned", 23)), 0); (("of_int", 1080), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -807), (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -806), 0), 100000000, 0, -805), 0, (("src/unsigned.mli", 84, 1915, 1917), ("src/unsigned.mli", 84, 1915, 1938), 0), 0, Tag1 ("Unsigned", 24)), 0); (("to_int", 1081), ((Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -804), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -803), 0), 100000000, 0, -802), 0, (("src/unsigned.mli", 87, 2001, 2003), ("src/unsigned.mli", 87, 2001, 2024), 0), 0, Tag1 ("Unsigned", 25)), 0); (("of_int64", 1082), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -801), (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -800), 0), 100000000, 0, -799), 0, (("src/unsigned.mli", 90, 2087, 2089), ("src/unsigned.mli", 90, 2087, 2114), 0), 0, Tag1 ("Unsigned", 26)), 0); (("to_int64", 1083), ((Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -798), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -797), 0), 100000000, 0, -796), 0, (("src/unsigned.mli", 93, 2179, 2181), ("src/unsigned.mli", 93, 2179, 2206), 0), 0, Tag1 ("Unsigned", 27)), 0); (("of_string", 1084), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -795), (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -794), 0), 100000000, 0, -793), 0, (("src/unsigned.mli", 96, 2271, 2273), ("src/unsigned.mli", 96, 2271, 2300), 0), 0, Tag1 ("Unsigned", 28)), 0); (("to_string", 1085), ((Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -792), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -791), 0), 100000000, 0, -790), 0, (("src/unsigned.mli", 101, 2464, 2466), ("src/unsigned.mli", 101, 2464, 2493), 0), 0, Tag1 ("Unsigned", 29)), 0); (("to_hexstring", 1086), ((Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -789), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -788), 0), 100000000, 0, -787), 0, (("src/unsigned.mli", 104, 2554, 2556), ("src/unsigned.mli", 104, 2554, 2586), 0), 0, Tag1 ("Unsigned", 30)), 0); (("zero", 1087), ((Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -786), 0, (("src/unsigned.mli", 107, 2659, 2661), ("src/unsigned.mli", 107, 2659, 2673), 0), 0, Tag1 ("Unsigned", 31)), 0); (("one", 1088), ((Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -785), 0, (("src/unsigned.mli", 110, 2699, 2701), ("src/unsigned.mli", 110, 2699, 2712), 0), 0, Tag1 ("Unsigned", 32)), 0); (("lognot", 1089), ((Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -784), (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -783), 0), 100000000, 0, -782), 0, (("src/unsigned.mli", 113, 2738, 2740), ("src/unsigned.mli", 113, 2738, 2759), 0), 0, Tag1 ("Unsigned", 33)), 0); (("succ", 1090), ((Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -781), (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -780), 0), 100000000, 0, -779), 0, (("src/unsigned.mli", 116, 2796, 2798), ("src/unsigned.mli", 116, 2796, 2815), 0), 0, Tag1 ("Unsigned", 34)), 0); (("pred", 1091), ((Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -778), (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -777), 0), 100000000, 0, -776), 0, (("src/unsigned.mli", 119, 2837, 2839), ("src/unsigned.mli", 119, 2837, 2856), 0), 0, Tag1 ("Unsigned", 35)), 0); (("compare", 1092), ((Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -775), (Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -774), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -773), 0), 100000000, 0, -772), 0), 100000000, 0, -771), 0, (("src/unsigned.mli", 122, 2880, 2882), ("src/unsigned.mli", 122, 2880, 2909), 0), 0, Tag1 ("Unsigned", 36)), 0); (("equal", 1093), ((Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -770), (Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -769), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -768), 0), 100000000, 0, -767), 0), 100000000, 0, -766), 0, (("src/unsigned.mli", 126, 3023, 3025), ("src/unsigned.mli", 126, 3023, 3051), 0), 0, Tag1 ("Unsigned", 37)), 0); (("max", 1094), ((Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -765), (Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -764), (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -763), 0), 100000000, 0, -762), 0), 100000000, 0, -761), 0, (("src/unsigned.mli", 129, 3128, 3130), ("src/unsigned.mli", 129, 3128, 3151), 0), 0, Tag1 ("Unsigned", 38)), 0); (("min", 1095), ((Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -760), (Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -759), (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -758), 0), 100000000, 0, -757), 0), 100000000, 0, -756), 0, (("src/unsigned.mli", 132, 3202, 3204), ("src/unsigned.mli", 132, 3202, 3225), 0), 0, Tag1 ("Unsigned", 39)), 0); (("of_string_opt", 1096), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -755), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -754)], (0)), 100000000, 0, -753), 0), 100000000, 0, -752), 0, (("src/unsigned.mli", 135, 3275, 3277), ("src/unsigned.mli", 135, 3275, 3315), 0), 0, Tag1 ("Unsigned", 40)), 0); (("pp", 1097), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -751), (Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -750), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -749), 0), 100000000, 0, -748), 0), 100000000, 0, -747), 0, (("src/unsigned.mli", 139, 3470, 3472), ("src/unsigned.mli", 139, 3470, 3510), 0), 0, Tag1 ("Unsigned", 41)), 0); (("pp_hex", 1098), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -746), (Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -745), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -744), 0), 100000000, 0, -743), 0), 100000000, 0, -742), 0, (("src/unsigned.mli", 142, 3571, 3573), ("src/unsigned.mli", 142, 3571, 3615), 0), 0, Tag1 ("Unsigned", 42)), 0); Tag3 (("Infix", 1099), 0, (Tag1 ([(("+", 1102), ((Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -908), (Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -907), (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -906), 0), 100000000, 0, -905), 0), 100000000, 0, -904), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 1)), 0); (("-", 1103), ((Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -903), (Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -902), (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -901), 0), 100000000, 0, -900), 0), 100000000, 0, -899), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 2)), 0); (("*", 1104), ((Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -898), (Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -897), (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -896), 0), 100000000, 0, -895), 0), 100000000, 0, -894), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 3)), 0); (("/", 1105), ((Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -893), (Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -892), (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -891), 0), 100000000, 0, -890), 0), 100000000, 0, -889), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 4)), 0); (("mod", 1106), ((Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -888), (Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -887), (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -886), 0), 100000000, 0, -885), 0), 100000000, 0, -884), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 5)), 0); (("land", 1107), ((Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -883), (Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -882), (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -881), 0), 100000000, 0, -880), 0), 100000000, 0, -879), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 6)), 0); (("lor", 1108), ((Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -878), (Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -877), (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -876), 0), 100000000, 0, -875), 0), 100000000, 0, -874), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 7)), 0); (("lxor", 1109), ((Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -873), (Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -872), (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -871), 0), 100000000, 0, -870), 0), 100000000, 0, -869), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 8)), 0); (("lsl", 1110), ((Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -868), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -867), (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -866), 0), 100000000, 0, -865), 0), 100000000, 0, -864), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 9)), 0); (("lsr", 1111), ((Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -863), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -862), (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -861), 0), 100000000, 0, -860), 0), 100000000, 0, -859), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 10)), 0)]), 0, (("src/unsigned.mli", 145, 3679, 3681), ("src/unsigned.mli", 145, 3679, 3718), 0), Tag1 ("Unsigned", 44)), 0, 0); (("of_int32", 1100), ((Tag1 (0, (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -741), (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -740), 0), 100000000, 0, -739), 0, (("src/unsigned.mli", 160, 4070, 4072), ("src/unsigned.mli", 160, 4070, 4097), 0), 0, Tag1 ("Unsigned", 52)), 0); (("to_int32", 1101), ((Tag1 (0, (Tag3 ((("t", 1068)), 0, (0)), 100000000, 0, -738), (Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -737), 0), 100000000, 0, -736), 0, (("src/unsigned.mli", 171, 4596, 4598), ("src/unsigned.mli", 171, 4596, 4623), 0), 0, Tag1 ("Unsigned", 53)), 0)]), 0, (("src/unsigned.mli", 158, 4038, 4038), ("src/unsigned.mli", 181, 5134, 5137), 0), Tag1 ("Unsigned", 54)), 0, 0); Tag3 (("UInt64", 872), 0, (Tag1 ([Tag1 (("t", 1112), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/unsigned.mli", 48, 1093, 1095), ("src/unsigned.mli", 48, 1093, 1101), 0), 0, 0, 0, Tag1 ("Unsigned", 12)), 1, 0); (("add", 1113), ((Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -1031), (Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -1030), (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -1029), 0), 100000000, 0, -1028), 0), 100000000, 0, -1027), 0, (("src/unsigned.mli", 50, 1103, 1105), ("src/unsigned.mli", 50, 1103, 1126), 0), 0, Tag1 ("Unsigned", 13)), 0); (("sub", 1114), ((Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -1026), (Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -1025), (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -1024), 0), 100000000, 0, -1023), 0), 100000000, 0, -1022), 0, (("src/unsigned.mli", 53, 1147, 1149), ("src/unsigned.mli", 53, 1147, 1170), 0), 0, Tag1 ("Unsigned", 14)), 0); (("mul", 1115), ((Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -1021), (Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -1020), (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -1019), 0), 100000000, 0, -1018), 0), 100000000, 0, -1017), 0, (("src/unsigned.mli", 56, 1194, 1196), ("src/unsigned.mli", 56, 1194, 1217), 0), 0, Tag1 ("Unsigned", 15)), 0); (("div", 1116), ((Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -1016), (Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -1015), (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -1014), 0), 100000000, 0, -1013), 0), 100000000, 0, -1012), 0, (("src/unsigned.mli", 59, 1244, 1246), ("src/unsigned.mli", 59, 1244, 1267), 0), 0, Tag1 ("Unsigned", 16)), 0); (("rem", 1117), ((Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -1011), (Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -1010), (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -1009), 0), 100000000, 0, -1008), 0), 100000000, 0, -1007), 0, (("src/unsigned.mli", 62, 1347, 1349), ("src/unsigned.mli", 62, 1347, 1370), 0), 0, Tag1 ("Unsigned", 17)), 0); (("max_int", 1118), ((Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -1006), 0, (("src/unsigned.mli", 66, 1465, 1467), ("src/unsigned.mli", 66, 1465, 1482), 0), 0, Tag1 ("Unsigned", 18)), 0); (("logand", 1119), ((Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -1005), (Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -1004), (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -1003), 0), 100000000, 0, -1002), 0), 100000000, 0, -1001), 0, (("src/unsigned.mli", 69, 1529, 1531), ("src/unsigned.mli", 69, 1529, 1555), 0), 0, Tag1 ("Unsigned", 19)), 0); (("logor", 1120), ((Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -1000), (Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -999), (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -998), 0), 100000000, 0, -997), 0), 100000000, 0, -996), 0, (("src/unsigned.mli", 72, 1587, 1589), ("src/unsigned.mli", 72, 1587, 1612), 0), 0, Tag1 ("Unsigned", 20)), 0); (("logxor", 1121), ((Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -995), (Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -994), (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -993), 0), 100000000, 0, -992), 0), 100000000, 0, -991), 0, (("src/unsigned.mli", 75, 1643, 1645), ("src/unsigned.mli", 75, 1643, 1669), 0), 0, Tag1 ("Unsigned", 21)), 0); (("shift_left", 1122), ((Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -990), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -989), (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -988), 0), 100000000, 0, -987), 0), 100000000, 0, -986), 0, (("src/unsigned.mli", 78, 1710, 1712), ("src/unsigned.mli", 78, 1710, 1742), 0), 0, Tag1 ("Unsigned", 22)), 0); (("shift_right", 1123), ((Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -985), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -984), (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -983), 0), 100000000, 0, -982), 0), 100000000, 0, -981), 0, (("src/unsigned.mli", 81, 1811, 1813), ("src/unsigned.mli", 81, 1811, 1844), 0), 0, Tag1 ("Unsigned", 23)), 0); (("of_int", 1124), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -980), (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -979), 0), 100000000, 0, -978), 0, (("src/unsigned.mli", 84, 1915, 1917), ("src/unsigned.mli", 84, 1915, 1938), 0), 0, Tag1 ("Unsigned", 24)), 0); (("to_int", 1125), ((Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -977), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -976), 0), 100000000, 0, -975), 0, (("src/unsigned.mli", 87, 2001, 2003), ("src/unsigned.mli", 87, 2001, 2024), 0), 0, Tag1 ("Unsigned", 25)), 0); (("of_string", 1126), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -974), (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -973), 0), 100000000, 0, -972), 0, (("src/unsigned.mli", 96, 2271, 2273), ("src/unsigned.mli", 96, 2271, 2300), 0), 0, Tag1 ("Unsigned", 28)), 0); (("to_string", 1127), ((Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -971), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -970), 0), 100000000, 0, -969), 0, (("src/unsigned.mli", 101, 2464, 2466), ("src/unsigned.mli", 101, 2464, 2493), 0), 0, Tag1 ("Unsigned", 29)), 0); (("to_hexstring", 1128), ((Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -968), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -967), 0), 100000000, 0, -966), 0, (("src/unsigned.mli", 104, 2554, 2556), ("src/unsigned.mli", 104, 2554, 2586), 0), 0, Tag1 ("Unsigned", 30)), 0); (("zero", 1129), ((Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -965), 0, (("src/unsigned.mli", 107, 2659, 2661), ("src/unsigned.mli", 107, 2659, 2673), 0), 0, Tag1 ("Unsigned", 31)), 0); (("one", 1130), ((Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -964), 0, (("src/unsigned.mli", 110, 2699, 2701), ("src/unsigned.mli", 110, 2699, 2712), 0), 0, Tag1 ("Unsigned", 32)), 0); (("lognot", 1131), ((Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -963), (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -962), 0), 100000000, 0, -961), 0, (("src/unsigned.mli", 113, 2738, 2740), ("src/unsigned.mli", 113, 2738, 2759), 0), 0, Tag1 ("Unsigned", 33)), 0); (("succ", 1132), ((Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -960), (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -959), 0), 100000000, 0, -958), 0, (("src/unsigned.mli", 116, 2796, 2798), ("src/unsigned.mli", 116, 2796, 2815), 0), 0, Tag1 ("Unsigned", 34)), 0); (("pred", 1133), ((Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -957), (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -956), 0), 100000000, 0, -955), 0, (("src/unsigned.mli", 119, 2837, 2839), ("src/unsigned.mli", 119, 2837, 2856), 0), 0, Tag1 ("Unsigned", 35)), 0); (("compare", 1134), ((Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -954), (Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -953), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -952), 0), 100000000, 0, -951), 0), 100000000, 0, -950), 0, (("src/unsigned.mli", 122, 2880, 2882), ("src/unsigned.mli", 122, 2880, 2909), 0), 0, Tag1 ("Unsigned", 36)), 0); (("equal", 1135), ((Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -949), (Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -948), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -947), 0), 100000000, 0, -946), 0), 100000000, 0, -945), 0, (("src/unsigned.mli", 126, 3023, 3025), ("src/unsigned.mli", 126, 3023, 3051), 0), 0, Tag1 ("Unsigned", 37)), 0); (("max", 1136), ((Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -944), (Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -943), (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -942), 0), 100000000, 0, -941), 0), 100000000, 0, -940), 0, (("src/unsigned.mli", 129, 3128, 3130), ("src/unsigned.mli", 129, 3128, 3151), 0), 0, Tag1 ("Unsigned", 38)), 0); (("min", 1137), ((Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -939), (Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -938), (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -937), 0), 100000000, 0, -936), 0), 100000000, 0, -935), 0, (("src/unsigned.mli", 132, 3202, 3204), ("src/unsigned.mli", 132, 3202, 3225), 0), 0, Tag1 ("Unsigned", 39)), 0); (("of_string_opt", 1138), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -934), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -933)], (0)), 100000000, 0, -932), 0), 100000000, 0, -931), 0, (("src/unsigned.mli", 135, 3275, 3277), ("src/unsigned.mli", 135, 3275, 3315), 0), 0, Tag1 ("Unsigned", 40)), 0); (("pp", 1139), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -930), (Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -929), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -928), 0), 100000000, 0, -927), 0), 100000000, 0, -926), 0, (("src/unsigned.mli", 139, 3470, 3472), ("src/unsigned.mli", 139, 3470, 3510), 0), 0, Tag1 ("Unsigned", 41)), 0); (("pp_hex", 1140), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -925), (Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -924), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -923), 0), 100000000, 0, -922), 0), 100000000, 0, -921), 0, (("src/unsigned.mli", 142, 3571, 3573), ("src/unsigned.mli", 142, 3571, 3615), 0), 0, Tag1 ("Unsigned", 42)), 0); Tag3 (("Infix", 1141), 0, (Tag1 ([(("+", 1146), ((Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -1081), (Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -1080), (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -1079), 0), 100000000, 0, -1078), 0), 100000000, 0, -1077), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 1)), 0); (("-", 1147), ((Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -1076), (Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -1075), (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -1074), 0), 100000000, 0, -1073), 0), 100000000, 0, -1072), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 2)), 0); (("*", 1148), ((Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -1071), (Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -1070), (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -1069), 0), 100000000, 0, -1068), 0), 100000000, 0, -1067), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 3)), 0); (("/", 1149), ((Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -1066), (Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -1065), (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -1064), 0), 100000000, 0, -1063), 0), 100000000, 0, -1062), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 4)), 0); (("mod", 1150), ((Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -1061), (Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -1060), (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -1059), 0), 100000000, 0, -1058), 0), 100000000, 0, -1057), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 5)), 0); (("land", 1151), ((Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -1056), (Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -1055), (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -1054), 0), 100000000, 0, -1053), 0), 100000000, 0, -1052), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 6)), 0); (("lor", 1152), ((Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -1051), (Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -1050), (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -1049), 0), 100000000, 0, -1048), 0), 100000000, 0, -1047), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 7)), 0); (("lxor", 1153), ((Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -1046), (Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -1045), (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -1044), 0), 100000000, 0, -1043), 0), 100000000, 0, -1042), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 8)), 0); (("lsl", 1154), ((Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -1041), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1040), (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -1039), 0), 100000000, 0, -1038), 0), 100000000, 0, -1037), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 9)), 0); (("lsr", 1155), ((Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -1036), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1035), (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -1034), 0), 100000000, 0, -1033), 0), 100000000, 0, -1032), 0, (("src/unsigned.mli", 145, 3679, 3696), ("src/unsigned.mli", 145, 3679, 3718), 0), 0, Tag1 ("Unsigned", 10)), 0)]), 0, (("src/unsigned.mli", 145, 3679, 3681), ("src/unsigned.mli", 145, 3679, 3718), 0), Tag1 ("Unsigned", 44)), 0, 0); (("of_int64", 1142), ((Tag1 (0, (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -920), (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -919), 0), 100000000, 0, -918), 0, (("src/unsigned.mli", 187, 5224, 5226), ("src/unsigned.mli", 187, 5224, 5251), 0), 0, Tag1 ("Unsigned", 55)), 0); (("to_int64", 1143), ((Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -917), (Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -916), 0), 100000000, 0, -915), 0, (("src/unsigned.mli", 198, 5750, 5752), ("src/unsigned.mli", 198, 5750, 5777), 0), 0, Tag1 ("Unsigned", 56)), 0); (("of_uint32", 1144), ((Tag1 (0, (Tag3 (Tag1 ((("UInt32", 871)), "t"), 0, (0)), 100000000, 0, -914), (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -913), 0), 100000000, 0, -912), 0, (("src/unsigned.mli", 209, 6289, 6291), ("src/unsigned.mli", 209, 6289, 6320), 0), 0, Tag1 ("Unsigned", 57)), 0); (("to_uint32", 1145), ((Tag1 (0, (Tag3 ((("t", 1112)), 0, (0)), 100000000, 0, -911), (Tag3 (Tag1 ((("UInt32", 871)), "t"), 0, (0)), 100000000, 0, -910), 0), 100000000, 0, -909), 0, (("src/unsigned.mli", 213, 6409, 6411), ("src/unsigned.mli", 213, 6409, 6440), 0), 0, Tag1 ("Unsigned", 58)), 0)]), 0, (("src/unsigned.mli", 184, 5191, 5191), ("src/unsigned.mli", 217, 6640, 6643), 0), Tag1 ("Unsigned", 59)), 0, 0); Tag3 (("Size_t", 873), 0, (((("S", 867))), 0, (("src/unsigned.mli", 220, 6697, 6697), ("src/unsigned.mli", 220, 6697, 6714), 0), Tag1 ("Unsigned", 60)), 0, 0); Tag3 (("UShort", 874), 0, (((("S", 867))), 0, (("src/unsigned.mli", 223, 6772, 6772), ("src/unsigned.mli", 223, 6772, 6789), 0), Tag1 ("Unsigned", 61)), 0, 0); Tag3 (("UInt", 875), 0, (((("S", 867))), 0, (("src/unsigned.mli", 226, 6846, 6846), ("src/unsigned.mli", 226, 6846, 6861), 0), Tag1 ("Unsigned", 62)), 0, 0); Tag3 (("ULong", 876), 0, (((("S", 867))), 0, (("src/unsigned.mli", 229, 6908, 6908), ("src/unsigned.mli", 229, 6908, 6924), 0), Tag1 ("Unsigned", 63)), 0, 0); Tag3 (("ULLong", 877), 0, (((("S", 867))), 0, (("src/unsigned.mli", 232, 6980, 6980), ("src/unsigned.mli", 232, 6980, 6997), 0), Tag1 ("Unsigned", 64)), 0, 0); Tag1 (("uchar", 878), (0, 0, 0, 1, ((Tag3 (Tag1 ((("UChar", 868)), "t"), 0, (0)), 100000000, 0, -14)), 0, 0, 0, 0, (("src/unsigned.mli", 236, 7059, 7059), ("src/unsigned.mli", 236, 7059, 7079), 0), 0, 1, 0, Tag1 ("Unsigned", 65)), 1, 0); Tag1 (("uint8", 879), (0, 0, 0, 1, ((Tag3 (Tag1 ((("UInt8", 869)), "t"), 0, (0)), 100000000, 0, -13)), 0, 0, 0, 0, (("src/unsigned.mli", 239, 7112, 7112), ("src/unsigned.mli", 239, 7112, 7132), 0), 0, 1, 0, Tag1 ("Unsigned", 66)), 1, 0); Tag1 (("uint16", 880), (0, 0, 0, 1, ((Tag3 (Tag1 ((("UInt16", 870)), "t"), 0, (0)), 100000000, 0, -12)), 0, 0, 0, 0, (("src/unsigned.mli", 242, 7170, 7170), ("src/unsigned.mli", 242, 7170, 7192), 0), 0, 1, 0, Tag1 ("Unsigned", 67)), 1, 0); Tag1 (("uint32", 881), (0, 0, 0, 1, ((Tag3 (Tag1 ((("UInt32", 871)), "t"), 0, (0)), 100000000, 0, -11)), 0, 0, 0, 0, (("src/unsigned.mli", 245, 7231, 7231), ("src/unsigned.mli", 245, 7231, 7253), 0), 0, 0, 0, Tag1 ("Unsigned", 68)), 1, 0); Tag1 (("uint64", 882), (0, 0, 0, 1, ((Tag3 (Tag1 ((("UInt64", 872)), "t"), 0, (0)), 100000000, 0, -10)), 0, 0, 0, 0, (("src/unsigned.mli", 248, 7292, 7292), ("src/unsigned.mli", 248, 7292, 7314), 0), 0, 0, 0, Tag1 ("Unsigned", 69)), 1, 0); Tag1 (("size_t", 883), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Size_t", 873)), "t"), 0, (0)), 100000000, 0, -9)), 0, 0, 0, 0, (("src/unsigned.mli", 251, 7353, 7353), ("src/unsigned.mli", 251, 7353, 7375), 0), 0, 0, 0, Tag1 ("Unsigned", 70)), 1, 0); Tag1 (("ushort", 884), (0, 0, 0, 1, ((Tag3 (Tag1 ((("UShort", 874)), "t"), 0, (0)), 100000000, 0, -8)), 0, 0, 0, 0, (("src/unsigned.mli", 254, 7418, 7418), ("src/unsigned.mli", 254, 7418, 7440), 0), 0, 0, 0, Tag1 ("Unsigned", 71)), 1, 0); Tag1 (("uint", 885), (0, 0, 0, 1, ((Tag3 (Tag1 ((("UInt", 875)), "t"), 0, (0)), 100000000, 0, -7)), 0, 0, 0, 0, (("src/unsigned.mli", 257, 7491, 7491), ("src/unsigned.mli", 257, 7491, 7509), 0), 0, 0, 0, Tag1 ("Unsigned", 72)), 1, 0); Tag1 (("ulong", 886), (0, 0, 0, 1, ((Tag3 (Tag1 ((("ULong", 876)), "t"), 0, (0)), 100000000, 0, -6)), 0, 0, 0, 0, (("src/unsigned.mli", 260, 7541, 7541), ("src/unsigned.mli", 260, 7541, 7561), 0), 0, 0, 0, Tag1 ("Unsigned", 73)), 1, 0); Tag1 (("ullong", 887), (0, 0, 0, 1, ((Tag3 (Tag1 ((("ULLong", 877)), "t"), 0, (0)), 100000000, 0, -5)), 0, 0, 0, 0, (("src/unsigned.mli", 263, 7602, 7602), ("src/unsigned.mli", 263, 7602, 7624), 0), 0, 0, 0, Tag1 ("Unsigned", 74)), 1, 0); (("of_byte_size", 888), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -4), (Tag11 ((("S", 867)), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/unsigned.mli", 266, 7670, 7670), ("src/unsigned.mli", 266, 7670, 7706), 0), 0, Tag1 ("Unsigned", 75)), 0)], "Unsigned", [("Unsigned", ("cd\205\030\181\167\151\005!\134;\177\228\249\168+")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

val of_byte_size : int -> (module S)

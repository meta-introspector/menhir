module type TYPE =
  sig
    type 'a typ
    val void : unit typ
    val char : char typ
    val schar : int typ
    val short : int typ
    val int : int typ
    val long : Signed.long typ
    val llong : Signed.llong typ
    val nativeint : nativeint typ
    val int8_t : int typ
    val int16_t : int typ
    val int32_t : int32 typ
    val int64_t : int64 typ
    module Intptr : Signed.S
    val intptr_t : Intptr.t typ
    module Ptrdiff : Signed.S
    val ptrdiff_t : Ptrdiff.t typ
    val camlint : int typ
    val uchar : Unsigned.uchar typ
    val bool : bool typ
    val uint8_t : Unsigned.uint8 typ
    val uint16_t : Unsigned.uint16 typ
    val uint32_t : Unsigned.uint32 typ
    val uint64_t : Unsigned.uint64 typ
    val size_t : Unsigned.size_t typ
    val ushort : Unsigned.ushort typ
    val sint : Signed.sint typ
    val uint : Unsigned.uint typ
    val ulong : Unsigned.ulong typ
    val ullong : Unsigned.ullong typ
    module Uintptr : Unsigned.S
    val uintptr_t : Uintptr.t typ
    val float : float typ
    val double : float typ
    val ldouble : LDouble.t typ
    val complex32 : Complex.t typ
    val complex64 : Complex.t typ
    val complexld : ComplexL.t typ
    val ptr : 'a typ -> 'a Ctypes_static.ptr typ
    val ptr_opt : 'a typ -> 'a Ctypes_static.ptr option typ
    val string : string typ
    val string_opt : string option typ
    val ocaml_string : string Ctypes_static.ocaml typ
    val ocaml_bytes : bytes Ctypes_static.ocaml typ
    val array : int -> 'a typ -> 'a Ctypes_static.carray typ
    val bigarray :
      < ba_repr : 'b; bigarray : 'bigarray; carray : 'c; dims : 'dims;
        element : 'a; layout : Bigarray_compat.c_layout >
      Ctypes_static.bigarray_class ->
      'dims -> ('a, 'b) Bigarray_compat.kind -> 'bigarray typ
    val fortran_bigarray :
      < ba_repr : 'b; bigarray : 'bigarray; carray : 'c; dims : 'dims;
        element : 'a; layout : Bigarray_compat.fortran_layout >
      Ctypes_static.bigarray_class ->
      'dims -> ('a, 'b) Bigarray_compat.kind -> 'bigarray typ
    val typ_of_bigarray_kind : ('a, 'b) Bigarray_compat.kind -> 'a typ
    type ('a, 't) field
    val structure : string -> 's Ctypes_static.structure typ
    val union : string -> 's Ctypes_static.union typ
    val field :
      ('s, [< `Struct | `Union ] as 'b) Ctypes_static.structured typ ->
      string -> 'a typ -> ('a, ('s, 'b) Ctypes_static.structured) field
    val seal :
      ('a, [< `Struct | `Union ]) Ctypes_static.structured typ -> unit
    val view :
      ?format_typ:((Format.formatter -> unit) -> Format.formatter -> unit) ->
      ?format:(Format.formatter -> 'b -> unit) ->
      read:('a -> 'b) -> write:('b -> 'a) -> 'a typ -> 'b typ
    val typedef : 'a typ -> string -> 'a typ
    val abstract :
      name:string ->
      size:int -> alignment:int -> 'a Ctypes_static.abstract typ
    val lift_typ : 'a Ctypes_static.typ -> 'a typ
    type 'a fn = 'a Ctypes_static.fn
    val ( @-> ) : 'a typ -> 'b fn -> ('a -> 'b) fn
    val returning : 'a typ -> 'a fn
    type 'a static_funptr = 'a Ctypes_static.static_funptr
    val static_funptr : 'a fn -> 'a Ctypes_static.static_funptr typ("DEBUG:rule", [Tag4 (("TYPE", 933), ((Tag1 ([Tag1 (("typ", 934), ([((("a")), 100000000, 0, -251)], 1, 0, 1, 0, [7], [2], 0, 0, (("src/ctypes/ctypes_types.mli", 17, 304, 306), ("src/ctypes/ctypes_types.mli", 17, 304, 317), 0), 0, 0, 0, Tag1 ("Ctypes_types", 0)), 1, 0); (("void", 935), ((Tag3 ((("typ", 934)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -250)], (0)), 100000000, 0, -249), 0, (("src/ctypes/ctypes_types.mli", 36, 1026, 1028), ("src/ctypes/ctypes_types.mli", 36, 1026, 1048), 0), 0, Tag1 ("Ctypes_types", 1)), 0); (("char", 936), ((Tag3 ((("typ", 934)), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -248)], (0)), 100000000, 0, -247), 0, (("src/ctypes/ctypes_types.mli", 60, 1868, 1870), ("src/ctypes/ctypes_types.mli", 60, 1868, 1889), 0), 0, Tag1 ("Ctypes_types", 2)), 0); (("schar", 937), ((Tag3 ((("typ", 934)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -246)], (0)), 100000000, 0, -245), 0, (("src/ctypes/ctypes_types.mli", 65, 1973, 1975), ("src/ctypes/ctypes_types.mli", 65, 1973, 1994), 0), 0, Tag1 ("Ctypes_types", 3)), 0); (("short", 938), ((Tag3 ((("typ", 934)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -244)], (0)), 100000000, 0, -243), 0, (("src/ctypes/ctypes_types.mli", 68, 2050, 2052), ("src/ctypes/ctypes_types.mli", 68, 2050, 2071), 0), 0, Tag1 ("Ctypes_types", 4)), 0); (("int", 939), ((Tag3 ((("typ", 934)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -242)], (0)), 100000000, 0, -241), 0, (("src/ctypes/ctypes_types.mli", 71, 2132, 2134), ("src/ctypes/ctypes_types.mli", 71, 2132, 2153), 0), 0, Tag1 ("Ctypes_types", 5)), 0); (("long", 940), ((Tag3 ((("typ", 934)), [(Tag3 (Tag1 ((Tag2 ("Signed")), "long"), 0, (0)), 100000000, 0, -240)], (0)), 100000000, 0, -239), 0, (("src/ctypes/ctypes_types.mli", 74, 2212, 2214), ("src/ctypes/ctypes_types.mli", 74, 2212, 2234), 0), 0, Tag1 ("Ctypes_types", 6)), 0); (("llong", 941), ((Tag3 ((("typ", 934)), [(Tag3 (Tag1 ((Tag2 ("Signed")), "llong"), 0, (0)), 100000000, 0, -238)], (0)), 100000000, 0, -237), 0, (("src/ctypes/ctypes_types.mli", 77, 2294, 2296), ("src/ctypes/ctypes_types.mli", 77, 2294, 2318), 0), 0, Tag1 ("Ctypes_types", 7)), 0); (("nativeint", 942), ((Tag3 ((("typ", 934)), [(Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -236)], (0)), 100000000, 0, -235), 0, (("src/ctypes/ctypes_types.mli", 80, 2383, 2385), ("src/ctypes/ctypes_types.mli", 80, 2383, 2414), 0), 0, Tag1 ("Ctypes_types", 8)), 0); (("int8_t", 943), ((Tag3 ((("typ", 934)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -234)], (0)), 100000000, 0, -233), 0, (("src/ctypes/ctypes_types.mli", 83, 2473, 2475), ("src/ctypes/ctypes_types.mli", 83, 2473, 2495), 0), 0, Tag1 ("Ctypes_types", 9)), 0); (("int16_t", 944), ((Tag3 ((("typ", 934)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -232)], (0)), 100000000, 0, -231), 0, (("src/ctypes/ctypes_types.mli", 86, 2557, 2559), ("src/ctypes/ctypes_types.mli", 86, 2557, 2580), 0), 0, Tag1 ("Ctypes_types", 10)), 0); (("int32_t", 945), ((Tag3 ((("typ", 934)), [(Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -230)], (0)), 100000000, 0, -229), 0, (("src/ctypes/ctypes_types.mli", 89, 2642, 2644), ("src/ctypes/ctypes_types.mli", 89, 2642, 2667), 0), 0, Tag1 ("Ctypes_types", 11)), 0); (("int64_t", 946), ((Tag3 ((("typ", 934)), [(Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -228)], (0)), 100000000, 0, -227), 0, (("src/ctypes/ctypes_types.mli", 92, 2729, 2731), ("src/ctypes/ctypes_types.mli", 92, 2729, 2754), 0), 0, Tag1 ("Ctypes_types", 12)), 0); Tag3 (("Intptr", 947), 0, ((Tag1 ((Tag2 ("Signed")), "S")), 0, (("src/ctypes/ctypes_types.mli", 95, 2816, 2818), ("src/ctypes/ctypes_types.mli", 95, 2816, 2842), 0), Tag1 ("Ctypes_types", 13)), 0, 0); (("intptr_t", 948), ((Tag3 ((("typ", 934)), [(Tag3 (Tag1 ((("Intptr", 947)), "t"), 0, (0)), 100000000, 0, -226)], (0)), 100000000, 0, -225), 0, (("src/ctypes/ctypes_types.mli", 96, 2843, 2845), ("src/ctypes/ctypes_types.mli", 96, 2843, 2872), 0), 0, Tag1 ("Ctypes_types", 14)), 0); Tag3 (("Ptrdiff", 949), 0, ((Tag1 ((Tag2 ("Signed")), "S")), 0, (("src/ctypes/ctypes_types.mli", 99, 2925, 2927), ("src/ctypes/ctypes_types.mli", 99, 2925, 2952), 0), Tag1 ("Ctypes_types", 15)), 0, 0); (("ptrdiff_t", 950), ((Tag3 ((("typ", 934)), [(Tag3 (Tag1 ((("Ptrdiff", 949)), "t"), 0, (0)), 100000000, 0, -224)], (0)), 100000000, 0, -223), 0, (("src/ctypes/ctypes_types.mli", 100, 2953, 2955), ("src/ctypes/ctypes_types.mli", 100, 2953, 2984), 0), 0, Tag1 ("Ctypes_types", 16)), 0); (("camlint", 951), ((Tag3 ((("typ", 934)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -222)], (0)), 100000000, 0, -221), 0, (("src/ctypes/ctypes_types.mli", 103, 3038, 3040), ("src/ctypes/ctypes_types.mli", 103, 3038, 3061), 0), 0, Tag1 ("Ctypes_types", 17)), 0); (("uchar", 952), ((Tag3 ((("typ", 934)), [(Tag3 (Tag1 ((Tag2 ("Unsigned")), "uchar"), 0, (0)), 100000000, 0, -220)], (0)), 100000000, 0, -219), 0, (("src/ctypes/ctypes_types.mli", 109, 3204, 3206), ("src/ctypes/ctypes_types.mli", 109, 3204, 3227), 0), 0, Tag1 ("Ctypes_types", 18)), 0); (("bool", 953), ((Tag3 ((("typ", 934)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -218)], (0)), 100000000, 0, -217), 0, (("src/ctypes/ctypes_types.mli", 112, 3285, 3287), ("src/ctypes/ctypes_types.mli", 112, 3285, 3306), 0), 0, Tag1 ("Ctypes_types", 19)), 0); (("uint8_t", 954), ((Tag3 ((("typ", 934)), [(Tag3 (Tag1 ((Tag2 ("Unsigned")), "uint8"), 0, (0)), 100000000, 0, -216)], (0)), 100000000, 0, -215), 0, (("src/ctypes/ctypes_types.mli", 115, 3355, 3357), ("src/ctypes/ctypes_types.mli", 115, 3355, 3380), 0), 0, Tag1 ("Ctypes_types", 20)), 0); (("uint16_t", 955), ((Tag3 ((("typ", 934)), [(Tag3 (Tag1 ((Tag2 ("Unsigned")), "uint16"), 0, (0)), 100000000, 0, -214)], (0)), 100000000, 0, -213), 0, (("src/ctypes/ctypes_types.mli", 118, 3444, 3446), ("src/ctypes/ctypes_types.mli", 118, 3444, 3471), 0), 0, Tag1 ("Ctypes_types", 21)), 0); (("uint32_t", 956), ((Tag3 ((("typ", 934)), [(Tag3 (Tag1 ((Tag2 ("Unsigned")), "uint32"), 0, (0)), 100000000, 0, -212)], (0)), 100000000, 0, -211), 0, (("src/ctypes/ctypes_types.mli", 121, 3535, 3537), ("src/ctypes/ctypes_types.mli", 121, 3535, 3562), 0), 0, Tag1 ("Ctypes_types", 22)), 0); (("uint64_t", 957), ((Tag3 ((("typ", 934)), [(Tag3 (Tag1 ((Tag2 ("Unsigned")), "uint64"), 0, (0)), 100000000, 0, -210)], (0)), 100000000, 0, -209), 0, (("src/ctypes/ctypes_types.mli", 124, 3626, 3628), ("src/ctypes/ctypes_types.mli", 124, 3626, 3653), 0), 0, Tag1 ("Ctypes_types", 23)), 0); (("size_t", 958), ((Tag3 ((("typ", 934)), [(Tag3 (Tag1 ((Tag2 ("Unsigned")), "size_t"), 0, (0)), 100000000, 0, -208)], (0)), 100000000, 0, -207), 0, (("src/ctypes/ctypes_types.mli", 127, 3717, 3719), ("src/ctypes/ctypes_types.mli", 127, 3717, 3742), 0), 0, Tag1 ("Ctypes_types", 24)), 0); (("ushort", 959), ((Tag3 ((("typ", 934)), [(Tag3 (Tag1 ((Tag2 ("Unsigned")), "ushort"), 0, (0)), 100000000, 0, -206)], (0)), 100000000, 0, -205), 0, (("src/ctypes/ctypes_types.mli", 132, 3934, 3936), ("src/ctypes/ctypes_types.mli", 132, 3934, 3959), 0), 0, Tag1 ("Ctypes_types", 25)), 0); (("sint", 960), ((Tag3 ((("typ", 934)), [(Tag3 (Tag1 ((Tag2 ("Signed")), "sint"), 0, (0)), 100000000, 0, -204)], (0)), 100000000, 0, -203), 0, (("src/ctypes/ctypes_types.mli", 135, 4018, 4020), ("src/ctypes/ctypes_types.mli", 135, 4018, 4039), 0), 0, Tag1 ("Ctypes_types", 26)), 0); (("uint", 961), ((Tag3 ((("typ", 934)), [(Tag3 (Tag1 ((Tag2 ("Unsigned")), "uint"), 0, (0)), 100000000, 0, -202)], (0)), 100000000, 0, -201), 0, (("src/ctypes/ctypes_types.mli", 138, 4087, 4089), ("src/ctypes/ctypes_types.mli", 138, 4087, 4108), 0), 0, Tag1 ("Ctypes_types", 27)), 0); (("ulong", 962), ((Tag3 ((("typ", 934)), [(Tag3 (Tag1 ((Tag2 ("Unsigned")), "ulong"), 0, (0)), 100000000, 0, -200)], (0)), 100000000, 0, -199), 0, (("src/ctypes/ctypes_types.mli", 141, 4165, 4167), ("src/ctypes/ctypes_types.mli", 141, 4165, 4188), 0), 0, Tag1 ("Ctypes_types", 28)), 0); (("ullong", 963), ((Tag3 ((("typ", 934)), [(Tag3 (Tag1 ((Tag2 ("Unsigned")), "ullong"), 0, (0)), 100000000, 0, -198)], (0)), 100000000, 0, -197), 0, (("src/ctypes/ctypes_types.mli", 144, 4246, 4248), ("src/ctypes/ctypes_types.mli", 144, 4246, 4271), 0), 0, Tag1 ("Ctypes_types", 29)), 0); Tag3 (("Uintptr", 964), 0, ((Tag1 ((Tag2 ("Unsigned")), "S")), 0, (("src/ctypes/ctypes_types.mli", 147, 4334, 4336), ("src/ctypes/ctypes_types.mli", 147, 4334, 4363), 0), Tag1 ("Ctypes_types", 30)), 0, 0); (("uintptr_t", 965), ((Tag3 ((("typ", 934)), [(Tag3 (Tag1 ((("Uintptr", 964)), "t"), 0, (0)), 100000000, 0, -196)], (0)), 100000000, 0, -195), 0, (("src/ctypes/ctypes_types.mli", 148, 4364, 4366), ("src/ctypes/ctypes_types.mli", 148, 4364, 4395), 0), 0, Tag1 ("Ctypes_types", 31)), 0); (("float", 966), ((Tag3 ((("typ", 934)), [(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -194)], (0)), 100000000, 0, -193), 0, (("src/ctypes/ctypes_types.mli", 153, 4478, 4480), ("src/ctypes/ctypes_types.mli", 153, 4478, 4501), 0), 0, Tag1 ("Ctypes_types", 32)), 0); (("double", 967), ((Tag3 ((("typ", 934)), [(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -192)], (0)), 100000000, 0, -191), 0, (("src/ctypes/ctypes_types.mli", 156, 4568, 4570), ("src/ctypes/ctypes_types.mli", 156, 4568, 4592), 0), 0, Tag1 ("Ctypes_types", 33)), 0); (("ldouble", 968), ((Tag3 ((("typ", 934)), [(Tag3 (Tag1 ((Tag2 ("LDouble")), "t"), 0, (0)), 100000000, 0, -190)], (0)), 100000000, 0, -189), 0, (("src/ctypes/ctypes_types.mli", 159, 4643, 4645), ("src/ctypes/ctypes_types.mli", 159, 4643, 4672), 0), 0, Tag1 ("Ctypes_types", 34)), 0); (("complex32", 969), ((Tag3 ((("typ", 934)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Complex"), "t"), 0, (0)), 100000000, 0, -188)], (0)), 100000000, 0, -187), 0, (("src/ctypes/ctypes_types.mli", 164, 4756, 4758), ("src/ctypes/ctypes_types.mli", 164, 4756, 4787), 0), 0, Tag1 ("Ctypes_types", 35)), 0); (("complex64", 970), ((Tag3 ((("typ", 934)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Complex"), "t"), 0, (0)), 100000000, 0, -186)], (0)), 100000000, 0, -185), 0, (("src/ctypes/ctypes_types.mli", 167, 4864, 4866), ("src/ctypes/ctypes_types.mli", 167, 4864, 4895), 0), 0, Tag1 ("Ctypes_types", 36)), 0); (("complexld", 971), ((Tag3 ((("typ", 934)), [(Tag3 (Tag1 ((Tag2 ("ComplexL")), "t"), 0, (0)), 100000000, 0, -184)], (0)), 100000000, 0, -183), 0, (("src/ctypes/ctypes_types.mli", 170, 4973, 4975), ("src/ctypes/ctypes_types.mli", 170, 4973, 5005), 0), 0, Tag1 ("Ctypes_types", 37)), 0); (("ptr", 972), ((Tag1 (0, (Tag3 ((("typ", 934)), [((("a")), 100000000, 0, -181)], (0)), 100000000, 0, -182), (Tag3 ((("typ", 934)), [(Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "ptr"), [((("a")), 100000000, 0, -181)], (0)), 100000000, 0, -180)], (0)), 100000000, 0, -179), 0), 100000000, 0, -178), 0, (("src/ctypes/ctypes_types.mli", 177, 5171, 5173), ("src/ctypes/ctypes_types.mli", 177, 5171, 5217), 0), 0, Tag1 ("Ctypes_types", 38)), 0); (("ptr_opt", 973), ((Tag1 (0, (Tag3 ((("typ", 934)), [((("a")), 100000000, 0, -176)], (0)), 100000000, 0, -177), (Tag3 ((("typ", 934)), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "ptr"), [((("a")), 100000000, 0, -176)], (0)), 100000000, 0, -175)], (0)), 100000000, 0, -174)], (0)), 100000000, 0, -173), 0), 100000000, 0, -172), 0, (("src/ctypes/ctypes_types.mli", 181, 5315, 5317), ("src/ctypes/ctypes_types.mli", 181, 5315, 5372), 0), 0, Tag1 ("Ctypes_types", 39)), 0); (("string", 974), ((Tag3 ((("typ", 934)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -171)], (0)), 100000000, 0, -170), 0, (("src/ctypes/ctypes_types.mli", 186, 5555, 5557), ("src/ctypes/ctypes_types.mli", 186, 5555, 5580), 0), 0, Tag1 ("Ctypes_types", 40)), 0); (("string_opt", 975), ((Tag3 ((("typ", 934)), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -169)], (0)), 100000000, 0, -168)], (0)), 100000000, 0, -167), 0, (("src/ctypes/ctypes_types.mli", 202, 6239, 6241), ("src/ctypes/ctypes_types.mli", 202, 6239, 6275), 0), 0, Tag1 ("Ctypes_types", 41)), 0); (("ocaml_string", 976), ((Tag3 ((("typ", 934)), [(Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "ocaml"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -166)], (0)), 100000000, 0, -165)], (0)), 100000000, 0, -164), 0, (("src/ctypes/ctypes_types.mli", 209, 6454, 6456), ("src/ctypes/ctypes_types.mli", 209, 6454, 6505), 0), 0, Tag1 ("Ctypes_types", 42)), 0); (("ocaml_bytes", 977), ((Tag3 ((("typ", 934)), [(Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "ocaml"), [(Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -163)], (0)), 100000000, 0, -162)], (0)), 100000000, 0, -161), 0, (("src/ctypes/ctypes_types.mli", 212, 6583, 6585), ("src/ctypes/ctypes_types.mli", 212, 6583, 6632), 0), 0, Tag1 ("Ctypes_types", 43)), 0); (("array", 978), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -160), (Tag1 (0, (Tag3 ((("typ", 934)), [((("a")), 100000000, 0, -158)], (0)), 100000000, 0, -159), (Tag3 ((("typ", 934)), [(Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "carray"), [((("a")), 100000000, 0, -158)], (0)), 100000000, 0, -157)], (0)), 100000000, 0, -156), 0), 100000000, 0, -155), 0), 100000000, 0, -154), 0, (("src/ctypes/ctypes_types.mli", 219, 6768, 6770), ("src/ctypes/ctypes_types.mli", 219, 6768, 6826), 0), 0, Tag1 ("Ctypes_types", 44)), 0); (("bigarray", 979), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "bigarray_class"), [(Tag4 ((Tag5 ("ba_repr", 1, (Tag10 (((("b")), 100000000, 0, -135), 0), 100000000, 0, -153), (Tag5 ("bigarray", 1, (Tag10 (((("bigarray")), 100000000, 0, -132), 0), 100000000, 0, -147), (Tag5 ("carray", 1, (Tag10 (((0), 100000000, 0, -149), 0), 100000000, 0, -148), (Tag5 ("dims", 1, (Tag10 (((("dims")), 100000000, 0, -136), 0), 100000000, 0, -146), (Tag5 ("element", 1, (Tag10 (((("a")), 100000000, 0, -134), 0), 100000000, 0, -152), (Tag5 ("layout", 1, (Tag10 ((Tag3 (Tag1 ((Tag2 ("Bigarray_compat")), "c_layout"), 0, (0)), 100000000, 0, -151), 0), 100000000, 0, -150), (0, 100000000, 0, -145)), 100000000, 0, 40)), 100000000, 0, 41)), 100000000, 0, 42)), 100000000, 0, 43)), 100000000, 0, 44)), 100000000, 0, -139), (0)), 100000000, 0, -138)], (0)), 100000000, 0, -137), (Tag1 (0, ((("dims")), 100000000, 0, -136), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Bigarray_compat")), "kind"), [((("a")), 100000000, 0, -134); ((("b")), 100000000, 0, -135)], (0)), 100000000, 0, -133), (Tag3 ((("typ", 934)), [((("bigarray")), 100000000, 0, -132)], (0)), 100000000, 0, -131), 0), 100000000, 0, -130), 0), 100000000, 0, -129), 0), 100000000, 0, -128), 0, (("src/ctypes/ctypes_types.mli", 225, 6967, 6969), ("src/ctypes/ctypes_types.mli", 232, 7158, 7218), 0), 0, Tag1 ("Ctypes_types", 45)), 0); (("fortran_bigarray", 980), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "bigarray_class"), [(Tag4 ((Tag5 ("ba_repr", 1, (Tag10 (((("b")), 100000000, 0, -109), 0), 100000000, 0, -127), (Tag5 ("bigarray", 1, (Tag10 (((("bigarray")), 100000000, 0, -106), 0), 100000000, 0, -121), (Tag5 ("carray", 1, (Tag10 (((0), 100000000, 0, -123), 0), 100000000, 0, -122), (Tag5 ("dims", 1, (Tag10 (((("dims")), 100000000, 0, -110), 0), 100000000, 0, -120), (Tag5 ("element", 1, (Tag10 (((("a")), 100000000, 0, -108), 0), 100000000, 0, -126), (Tag5 ("layout", 1, (Tag10 ((Tag3 (Tag1 ((Tag2 ("Bigarray_compat")), "fortran_layout"), 0, (0)), 100000000, 0, -125), 0), 100000000, 0, -124), (0, 100000000, 0, -119)), 100000000, 0, 46)), 100000000, 0, 47)), 100000000, 0, 48)), 100000000, 0, 49)), 100000000, 0, 50)), 100000000, 0, -113), (0)), 100000000, 0, -112)], (0)), 100000000, 0, -111), (Tag1 (0, ((("dims")), 100000000, 0, -110), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Bigarray_compat")), "kind"), [((("a")), 100000000, 0, -108); ((("b")), 100000000, 0, -109)], (0)), 100000000, 0, -107), (Tag3 ((("typ", 934)), [((("bigarray")), 100000000, 0, -106)], (0)), 100000000, 0, -105), 0), 100000000, 0, -104), 0), 100000000, 0, -103), 0), 100000000, 0, -102), 0, (("src/ctypes/ctypes_types.mli", 236, 7363, 7365), ("src/ctypes/ctypes_types.mli", 243, 7568, 7628), 0), 0, Tag1 ("Ctypes_types", 46)), 0); (("typ_of_bigarray_kind", 981), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Bigarray_compat")), "kind"), [((("a")), 100000000, 0, -99); ((("b")), 100000000, 0, -101)], (0)), 100000000, 0, -100), (Tag3 ((("typ", 934)), [((("a")), 100000000, 0, -99)], (0)), 100000000, 0, -98), 0), 100000000, 0, -97), 0, (("src/ctypes/ctypes_types.mli", 247, 7779, 7781), ("src/ctypes/ctypes_types.mli", 247, 7779, 7847), 0), 0, Tag1 ("Ctypes_types", 47)), 0); Tag1 (("field", 982), ([((("a")), 100000000, 0, -95); ((("t")), 100000000, 0, -96)], 2, 0, 1, 0, [7; 7], [2; 2], 0, 0, (("src/ctypes/ctypes_types.mli", 253, 7978, 7980), ("src/ctypes/ctypes_types.mli", 253, 7978, 7999), 0), 0, 0, 0, Tag1 ("Ctypes_types", 48)), 1, 0); (("structure", 983), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -94), (Tag3 ((("typ", 934)), [(Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "structure"), [((("s")), 100000000, 0, -93)], (0)), 100000000, 0, -92)], (0)), 100000000, 0, -91), 0), 100000000, 0, -90), 0, (("src/ctypes/ctypes_types.mli", 255, 8001, 8003), ("src/ctypes/ctypes_types.mli", 255, 8001, 8059), 0), 0, Tag1 ("Ctypes_types", 49)), 0); (("union", 984), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -89), (Tag3 ((("typ", 934)), [(Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "union"), [((("s")), 100000000, 0, -88)], (0)), 100000000, 0, -87)], (0)), 100000000, 0, -86), 0), 100000000, 0, -85), 0, (("src/ctypes/ctypes_types.mli", 270, 8659, 8661), ("src/ctypes/ctypes_types.mli", 270, 8659, 8709), 0), 0, Tag1 ("Ctypes_types", 50)), 0); (("field", 985), ((Tag1 (0, (Tag3 ((("typ", 934)), [(Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "structured"), [((("s")), 100000000, 0, -79); (Tag8 (([("Struct", Tag1 (1, 0, 0, (1))); ("Union", Tag1 (1, 0, 0, (1)))], ((0), 100000000, 0, -81), 1, 0, 0)), 100000000, 0, -80)], (0)), 100000000, 0, -78)], (0)), 100000000, 0, -84), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -83), (Tag1 (0, (Tag3 ((("typ", 934)), [((("a")), 100000000, 0, -77)], (0)), 100000000, 0, -82), (Tag3 ((("field", 982)), [((("a")), 100000000, 0, -77); (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "structured"), [((("s")), 100000000, 0, -79); (Tag8 (([("Struct", Tag1 (1, 0, 0, (1))); ("Union", Tag1 (1, 0, 0, (1)))], ((0), 100000000, 0, -81), 1, 0, 0)), 100000000, 0, -80)], (0)), 100000000, 0, -78)], (0)), 100000000, 0, -76), 0), 100000000, 0, -75), 0), 100000000, 0, -74), 0), 100000000, 0, -73), 0, (("src/ctypes/ctypes_types.mli", 274, 8829, 8831), ("src/ctypes/ctypes_types.mli", 275, 8873, 8947), 0), 0, Tag1 ("Ctypes_types", 51)), 0); (("seal", 986), ((Tag1 (0, (Tag3 ((("typ", 934)), [(Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "structured"), [((0), 100000000, 0, -70); (Tag8 (([("Struct", Tag1 (1, 0, 0, (1))); ("Union", Tag1 (1, 0, 0, (1)))], ((0), 100000000, 0, -72), 1, 0, 0)), 100000000, 0, -71)], (0)), 100000000, 0, -69)], (0)), 100000000, 0, -68), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -67), 0), 100000000, 0, -66), 0, (("src/ctypes/ctypes_types.mli", 284, 9356, 9358), ("src/ctypes/ctypes_types.mli", 284, 9356, 9431), 0), 0, Tag1 ("Ctypes_types", 52)), 0); (("view", 987), ((Tag1 (Tag1 ("format_typ"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -65), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -64), 0), 100000000, 0, -63), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -62), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -61), 0), 100000000, 0, -60), 0), 100000000, 0, -59)], (0)), 100000000, 0, -58), (Tag1 (Tag1 ("format"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -57), (Tag1 (0, ((("b")), 100000000, 0, -48), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -56), 0), 100000000, 0, -55), 0), 100000000, 0, -54)], (0)), 100000000, 0, -53), (Tag1 (("read"), (Tag1 (0, ((("a")), 100000000, 0, -50), ((("b")), 100000000, 0, -48), 0), 100000000, 0, -52), (Tag1 (("write"), (Tag1 (0, ((("b")), 100000000, 0, -48), ((("a")), 100000000, 0, -50), 0), 100000000, 0, -51), (Tag1 (0, (Tag3 ((("typ", 934)), [((("a")), 100000000, 0, -50)], (0)), 100000000, 0, -49), (Tag3 ((("typ", 934)), [((("b")), 100000000, 0, -48)], (0)), 100000000, 0, -47), 0), 100000000, 0, -46), 0), 100000000, 0, -45), 0), 100000000, 0, -44), 0), 100000000, 0, -43), 0), 100000000, 0, -42), 0, (("src/ctypes/ctypes_types.mli", 292, 9750, 9752), ("src/ctypes/ctypes_types.mli", 294, 9892, 9960), 0), 0, Tag1 ("Ctypes_types", 53)), 0); (("typedef", 988), ((Tag1 (0, (Tag3 ((("typ", 934)), [((("a")), 100000000, 0, -39)], (0)), 100000000, 0, -41), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -40), (Tag3 ((("typ", 934)), [((("a")), 100000000, 0, -39)], (0)), 100000000, 0, -38), 0), 100000000, 0, -37), 0), 100000000, 0, -36), 0, (("src/ctypes/ctypes_types.mli", 320, 11120, 11122), ("src/ctypes/ctypes_types.mli", 320, 11120, 11162), 0), 0, Tag1 ("Ctypes_types", 54)), 0); (("abstract", 989), ((Tag1 (("name"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -35), (Tag1 (("size"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -34), (Tag1 (("alignment"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -33), (Tag3 ((("typ", 934)), [(Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "abstract"), [((("a")), 100000000, 0, -32)], (0)), 100000000, 0, -31)], (0)), 100000000, 0, -30), 0), 100000000, 0, -29), 0), 100000000, 0, -28), 0), 100000000, 0, -27), 0, (("src/ctypes/ctypes_types.mli", 330, 11464, 11466), ("src/ctypes/ctypes_types.mli", 330, 11464, 11554), 0), 0, Tag1 ("Ctypes_types", 55)), 0); (("lift_typ", 990), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "typ"), [((("a")), 100000000, 0, -25)], (0)), 100000000, 0, -26), (Tag3 ((("typ", 934)), [((("a")), 100000000, 0, -25)], (0)), 100000000, 0, -24), 0), 100000000, 0, -23), 0, (("src/ctypes/ctypes_types.mli", 336, 11706, 11708), ("src/ctypes/ctypes_types.mli", 336, 11706, 11753), 0), 0, Tag1 ("Ctypes_types", 56)), 0); Tag1 (("fn", 991), ([((("a")), 100000000, 0, -22)], 1, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "fn"), [((("a")), 100000000, 0, -22)], (0)), 100000000, 0, -21)), [63], [0], 0, 0, (("src/ctypes/ctypes_types.mli", 349, 12267, 12269), ("src/ctypes/ctypes_types.mli", 349, 12267, 12301), 0), 0, 0, 0, Tag1 ("Ctypes_types", 57)), 1, 0); (("@->", 992), ((Tag1 (0, (Tag3 ((("typ", 934)), [((("a")), 100000000, 0, -18)], (0)), 100000000, 0, -20), (Tag1 (0, (Tag3 ((("fn", 991)), [((("b")), 100000000, 0, -17)], (0)), 100000000, 0, -19), (Tag3 ((("fn", 991)), [(Tag1 (0, ((("a")), 100000000, 0, -18), ((("b")), 100000000, 0, -17), 0), 100000000, 0, -16)], (0)), 100000000, 0, -15), 0), 100000000, 0, -14), 0), 100000000, 0, -13), 0, (("src/ctypes/ctypes_types.mli", 354, 12486, 12488), ("src/ctypes/ctypes_types.mli", 354, 12486, 12534), 0), 0, Tag1 ("Ctypes_types", 58)), 0); (("returning", 993), ((Tag1 (0, (Tag3 ((("typ", 934)), [((("a")), 100000000, 0, -11)], (0)), 100000000, 0, -12), (Tag3 ((("fn", 991)), [((("a")), 100000000, 0, -11)], (0)), 100000000, 0, -10), 0), 100000000, 0, -9), 0, (("src/ctypes/ctypes_types.mli", 365, 12890, 12892), ("src/ctypes/ctypes_types.mli", 365, 12890, 12923), 0), 0, Tag1 ("Ctypes_types", 59)), 0); Tag1 (("static_funptr", 994), ([((("a")), 100000000, 0, -8)], 1, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "static_funptr"), [((("a")), 100000000, 0, -8)], (0)), 100000000, 0, -7)), [15], [0], 0, 0, (("src/ctypes/ctypes_types.mli", 371, 13141, 13143), ("src/ctypes/ctypes_types.mli", 371, 13141, 13197), 0), 0, 0, 0, Tag1 ("Ctypes_types", 60)), 1, 0); (("static_funptr", 995), ((Tag1 (0, (Tag3 ((("fn", 991)), [((("a")), 100000000, 0, -5)], (0)), 100000000, 0, -6), (Tag3 ((("typ", 934)), [(Tag3 (Tag1 ((Tag2 ("Ctypes_static")), "static_funptr"), [((("a")), 100000000, 0, -5)], (0)), 100000000, 0, -4)], (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/ctypes/ctypes_types.mli", 374, 13266, 13268), ("src/ctypes/ctypes_types.mli", 374, 13266, 13331), 0), 0, Tag1 ("Ctypes_types", 61)), 0)])), 0, (("src/ctypes/ctypes_types.mli", 13, 233, 233), ("src/ctypes/ctypes_types.mli", 377, 13446, 13449), 0), Tag1 ("Ctypes_types", 62)), 0)], "Ctypes_types", [("Ctypes_types", ("\140\014\176\188\187lo3aC\196\012\228vn+")); ("Unsigned", ("cd\205\030\181\167\151\005!\134;\177\228\249\168+")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Signed", ("R\017i\"\030\024\134f\143\198\192\180>t\175\225")); ("LDouble", ("j\251\140\230^u\251\210\143\236T\207\022\147\011\211")); ("Ctypes_static", ("U\030\169\129GB\138P\158'd\012\131\157\202\018")); ("Ctypes_ptr", ("V\021o\161\007\161\245R\242\222:e\151\189\175\207")); ("Ctypes_primitive_types", ("\147\237\001\150\136\017Z\2308\137C\245\023\133\161\158")); ("Ctypes_bigarray", ("\146\0055mmn\243\187gd\185P\208J\254l")); ("ComplexL", ("\n\230\139\192\213\0226\203\176\242\200\205c\155ag")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Bigarray_compat", ("\150\219\208\188w\237\216\005\r[\152q'\006x\217"))], [1; (0)])

  end

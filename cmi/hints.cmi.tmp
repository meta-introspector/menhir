exception Bound
val decompose_app_bound :
  Evd.evar_map -> EConstr.constr -> Names.GlobRef.t * EConstr.constr array
type debug = Debug | Info | Off
val secvars_of_hyps : ('c, 't) Context.Named.pt -> Names.Id.Pred.t
val empty_hint_info : 'a Typeclasses.hint_info_gen
val hint_cat : Libobject.category
type 'a hint_ast =
    Res_pf of 'a
  | ERes_pf of 'a
  | Give_exact of 'a
  | Res_pf_THEN_trivial_fail of 'a
  | Unfold_nth of Tacred.evaluable_global_reference
  | Extern of Pattern.constr_pattern option * Genarg.glob_generic_argument
type hint
val hint_as_term : hint -> Univ.ContextSet.t option * EConstr.constr
type 'a hints_path_atom_gen = PathHints of 'a list | PathAny
type hints_path_atom = Names.GlobRef.t hints_path_atom_gen
type hint_db_name = string
module FullHint :
  sig
    type t
    val priority : t -> int
    val pattern : t -> Pattern.constr_pattern option
    val database : t -> string option
    val run :
      t -> (hint hint_ast -> 'r Proofview.tactic) -> 'r Proofview.tactic
    val name : t -> hints_path_atom
    val print : Environ.env -> Evd.evar_map -> t -> Pp.t
    val subgoals : t -> int option
    val repr : t -> hint hint_ast
  end
type hint_mode = ModeInput | ModeNoHeadEvar | ModeOutput
type 'a hints_transparency_target =
    HintsVariables
  | HintsConstants
  | HintsReferences of 'a list
type 'a hints_path_gen =
    PathAtom of 'a hints_path_atom_gen
  | PathStar of 'a hints_path_gen
  | PathSeq of 'a hints_path_gen * 'a hints_path_gen
  | PathOr of 'a hints_path_gen * 'a hints_path_gen
  | PathEmpty
  | PathEpsilon
type pre_hints_path = Libnames.qualid hints_path_gen
type hints_path = Names.GlobRef.t hints_path_gen
val normalize_path : hints_path -> hints_path
val path_matches : hints_path -> hints_path_atom list -> bool
val path_derivate : hints_path -> hints_path_atom -> hints_path
val pp_hints_path_gen : ('a -> Pp.t) -> 'a hints_path_gen -> Pp.t
val pp_hints_path_atom : ('a -> Pp.t) -> 'a hints_path_atom_gen -> Pp.t
val pp_hints_path : hints_path -> Pp.t
val pp_hint_mode : hint_mode -> Pp.t
val glob_hints_path_atom :
  Libnames.qualid hints_path_atom_gen -> Names.GlobRef.t hints_path_atom_gen
val glob_hints_path :
  Libnames.qualid hints_path_gen -> Names.GlobRef.t hints_path_gen
type mode_match = NoMode | WithMode of hint_mode array
type 'a with_mode = ModeMatch of mode_match * 'a | ModeMismatch
module Hint_db :
  sig
    type t
    val empty : ?name:hint_db_name -> TransparentState.t -> bool -> t
    val map_none : secvars:Names.Id.Pred.t -> t -> FullHint.t list
    val map_all :
      secvars:Names.Id.Pred.t -> Names.GlobRef.t -> t -> FullHint.t list
    val map_eauto :
      Environ.env ->
      Evd.evar_map ->
      secvars:Names.Id.Pred.t ->
      Names.GlobRef.t * EConstr.constr array ->
      EConstr.constr -> t -> FullHint.t list with_mode
    val map_auto :
      Environ.env ->
      Evd.evar_map ->
      secvars:Names.Id.Pred.t ->
      Names.GlobRef.t * EConstr.constr array ->
      EConstr.constr -> t -> FullHint.t list
    val remove_one : Environ.env -> Names.GlobRef.t -> t -> t
    val remove_list : Environ.env -> Names.GlobRef.t list -> t -> t
    val iter :
      (Names.GlobRef.t option ->
       hint_mode array list -> FullHint.t list -> unit) ->
      t -> unit
    val fold :
      (Names.GlobRef.t option ->
       hint_mode array list -> FullHint.t list -> 'a -> 'a) ->
      t -> 'a -> 'a
    val use_dn : t -> bool
    val transparent_state : t -> TransparentState.t
    val set_transparent_state : t -> TransparentState.t -> t
    val add_cut : hints_path -> t -> t
    val cut : t -> hints_path
    val unfolds : t -> Names.Id.Set.t * Names.Cset.t
    val add_modes : hint_mode array list Names.GlobRef.Map.t -> t -> t
    val modes : t -> hint_mode array list Names.GlobRef.Map.t
  end
type hint_db = Hint_db.t
type hnf = bool
type hint_term
type hints_entry =
    HintsResolveEntry of
      (Typeclasses.hint_info * hnf * hints_path_atom * hint_term) list
  | HintsImmediateEntry of (hints_path_atom * hint_term) list
  | HintsCutEntry of hints_path
  | HintsUnfoldEntry of Tacred.evaluable_global_reference list
  | HintsTransparencyEntry of
      Tacred.evaluable_global_reference hints_transparency_target * bool
  | HintsModeEntry of Names.GlobRef.t * hint_mode list
  | HintsExternEntry of Typeclasses.hint_info * Genarg.glob_generic_argument
val searchtable_map : hint_db_name -> hint_db
val searchtable_add : hint_db_name * hint_db -> unit
type hint_locality = Local | Export | SuperGlobal
val default_hint_locality : unit -> hint_locality
val create_hint_db :
  bool -> hint_db_name -> TransparentState.t -> bool -> unit
val remove_hints :
  locality:hint_locality -> hint_db_name list -> Names.GlobRef.t list -> unit
val current_db_names : unit -> Util.String.Set.t
val current_pure_db : unit -> hint_db list
val add_hints :
  locality:hint_locality -> hint_db_name list -> hints_entry -> unit
val hint_globref : Names.GlobRef.t -> hint_term
val hint_constr : EConstr.constr * Univ.ContextSet.t option -> hint_term
val push_resolves :
  Environ.env -> Evd.evar_map -> Names.GlobRef.t -> Hint_db.t -> Hint_db.t
val push_resolve_hyp :
  Environ.env -> Evd.evar_map -> Names.Id.t -> Hint_db.t -> Hint_db.t
val make_local_hint_db :
  Environ.env ->
  Evd.evar_map ->
  ?ts:TransparentState.t ->
  bool -> Tactypes.delayed_open_constr list -> hint_db
val make_db_list : hint_db_name list -> hint_db list
val wrap_hint_warning : 'a Proofview.tactic -> 'a Proofview.tactic
val wrap_hint_warning_fun :
  Environ.env ->
  Evd.evar_map -> (Evd.evar_map -> 'a * Evd.evar_map) -> 'a * Evd.evar_map
val fresh_hint :
  Environ.env -> Evd.evar_map -> hint -> Evd.evar_map * EConstr.constr
val hint_res_pf :
  ?with_evars:bool ->
  ?with_classes:bool ->
  ?flags:Unification.unify_flags -> hint -> unit Proofview.tactic
val pr_searchtable : Environ.env -> Evd.evar_map -> Pp.t
val pr_applicable_hint : Proof.t -> Pp.t
val pr_hint_ref : Environ.env -> Evd.evar_map -> Names.GlobRef.t -> Pp.t
val pr_hint_db_by_name : Environ.env -> Evd.evar_map -> hint_db_name -> Pp.t
("DEBUG:rule", [Tag2 (("Bound", 2012), ((Tag3 ("exn", 7)), 0, (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Hints", 0)), 2, 0); (("decompose_app_bound", 2013), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -273), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -272), (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -269); (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -271)], (0)), 100000000, 0, -270)]), 100000000, 0, -268), 0), 100000000, 0, -267), 0), 100000000, 0, -266), 0, (("tactics/hints.mli", 23, 813, 813), ("tactics/hints.mli", 23, 813, 885), 0), 0, Tag1 ("Hints", 1)), 0); Tag1 (("debug", 2014), (0, 0, Tag1 ([(("Debug", 1015), (0), 0, (("tactics/hints.mli", 25, 887, 900), ("tactics/hints.mli", 25, 887, 905), 0), 0, Tag1 ("Hints", 3)); (("Info", 1016), (0), 0, (("tactics/hints.mli", 25, 887, 906), ("tactics/hints.mli", 25, 887, 912), 0), 0, Tag1 ("Hints", 4)); (("Off", 1017), (0), 0, (("tactics/hints.mli", 25, 887, 913), ("tactics/hints.mli", 25, 887, 918), 0), 0, Tag1 ("Hints", 5))], 0), 1, 0, 0, 0, 0, 0, (("tactics/hints.mli", 25, 887, 887), ("tactics/hints.mli", 25, 887, 918), 0), 0, 1, 0, Tag1 ("Hints", 2)), 1, 0); (("secvars_of_hyps", 2015), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Context")), "Named"), "pt"), [((("c")), 100000000, 0, -264); ((("t")), 100000000, 0, -265)], (0)), 100000000, 0, -263), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "Pred"), "t"), 0, (0)), 100000000, 0, -262), 0), 100000000, 0, -261), 0, (("tactics/hints.mli", 27, 920, 920), ("tactics/hints.mli", 27, 920, 980), 0), 0, Tag1 ("Hints", 6)), 0); (("empty_hint_info", 2016), ((Tag3 (Tag1 ((Tag2 ("Typeclasses")), "hint_info_gen"), [((("a")), 100000000, 0, -260)], (0)), 100000000, 0, -259), 0, (("tactics/hints.mli", 29, 982, 982), ("tactics/hints.mli", 29, 982, 1032), 0), 0, Tag1 ("Hints", 7)), 0); (("hint_cat", 2017), ((Tag3 (Tag1 ((Tag2 ("Libobject")), "category"), 0, (0)), 100000000, 0, -258), 0, (("tactics/hints.mli", 31, 1034, 1034), ("tactics/hints.mli", 31, 1034, 1067), 0), 0, Tag1 ("Hints", 9)), 0); Tag1 (("hint_ast", 2018), ([((("a")), 100000000, 0, -253)], 1, Tag1 ([(("Res_pf", 1124), ([((("a")), 100000000, 0, -253)]), 0, (("tactics/hints.mli", 36, 1123, 1125), ("tactics/hints.mli", 36, 1123, 1143), 0), 0, Tag1 ("Hints", 11)); (("ERes_pf", 1125), ([((("a")), 100000000, 0, -253)]), 0, (("tactics/hints.mli", 37, 1161, 1163), ("tactics/hints.mli", 37, 1161, 1181), 0), 0, Tag1 ("Hints", 12)); (("Give_exact", 1126), ([((("a")), 100000000, 0, -253)]), 0, (("tactics/hints.mli", 38, 1200, 1202), ("tactics/hints.mli", 38, 1200, 1220), 0), 0, Tag1 ("Hints", 13)); (("Res_pf_THEN_trivial_fail", 1127), ([((("a")), 100000000, 0, -253)]), 0, (("tactics/hints.mli", 39, 1221, 1223), ("tactics/hints.mli", 39, 1221, 1255), 0), 0, Tag1 ("Hints", 14)); (("Unfold_nth", 1128), ([(Tag3 (Tag1 ((Tag2 ("Tacred")), "evaluable_global_reference"), 0, (0)), 100000000, 0, -254)]), 0, (("tactics/hints.mli", 40, 1277, 1279), ("tactics/hints.mli", 40, 1277, 1328), 0), 0, Tag1 ("Hints", 15)); (("Extern", 1163), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Pattern")), "constr_pattern"), 0, (0)), 100000000, 0, -256)], (0)), 100000000, 0, -255); (Tag3 (Tag1 ((Tag2 ("Genarg")), "glob_generic_argument"), 0, (0)), 100000000, 0, -257)]), 0, (("tactics/hints.mli", 41, 1353, 1355), ("tactics/hints.mli", 41, 1353, 1431), 0), 0, Tag1 ("Hints", 16))], 0), 1, 0, [25], [0], 0, 0, (("tactics/hints.mli", 35, 1104, 1104), ("tactics/hints.mli", 41, 1353, 1431), 0), 0, 0, 0, Tag1 ("Hints", 10)), 1, 0); Tag1 (("hint", 2019), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("tactics/hints.mli", 43, 1457, 1457), ("tactics/hints.mli", 43, 1457, 1466), 0), 0, 0, 0, Tag1 ("Hints", 17)), 1, 0); (("hint_as_term", 2020), ((Tag1 (0, (Tag3 ((("hint", 2019)), 0, (0)), 100000000, 0, -252), (Tag2 ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "ContextSet"), "t"), 0, (0)), 100000000, 0, -250)], (0)), 100000000, 0, -249); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -251)]), 100000000, 0, -248), 0), 100000000, 0, -247), 0, (("tactics/hints.mli", 45, 1468, 1468), ("tactics/hints.mli", 45, 1468, 1528), 0), 0, Tag1 ("Hints", 18)), 0); Tag1 (("hints_path_atom_gen", 2021), ([((("a")), 100000000, 0, -246)], 1, Tag1 ([(("PathHints", 1280), ([(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -246)], (0)), 100000000, 0, -245)]), 0, (("tactics/hints.mli", 48, 1560, 1562), ("tactics/hints.mli", 48, 1560, 1584), 0), 0, Tag1 ("Hints", 20)); (("PathAny", 1281), (0), 0, (("tactics/hints.mli", 50, 1651, 1653), ("tactics/hints.mli", 50, 1651, 1662), 0), 0, Tag1 ("Hints", 21))], 0), 1, 0, [25], [0], 0, 0, (("tactics/hints.mli", 47, 1530, 1530), ("tactics/hints.mli", 50, 1651, 1662), 0), 0, 0, 0, Tag1 ("Hints", 19)), 1, 0); Tag1 (("hints_path_atom", 2022), (0, 0, 0, 1, ((Tag3 ((("hints_path_atom_gen", 2021)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -244)], (0)), 100000000, 0, -243)), 0, 0, 0, 0, (("tactics/hints.mli", 52, 1664, 1664), ("tactics/hints.mli", 52, 1664, 1716), 0), 0, 0, 0, Tag1 ("Hints", 22)), 1, 0); Tag1 (("hint_db_name", 2023), (0, 0, 0, 1, ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -242)), 0, 0, 0, 0, (("tactics/hints.mli", 53, 1717, 1717), ("tactics/hints.mli", 53, 1717, 1743), 0), 0, 0, 0, Tag1 ("Hints", 23)), 1, 0); Tag3 (("FullHint", 2024), 0, (Tag1 ([Tag1 (("t", 2070), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("tactics/hints.mli", 57, 1767, 1769), ("tactics/hints.mli", 57, 1767, 1775), 0), 0, 0, 0, Tag1 ("Hints", 24)), 1, 0); (("priority", 2071), ((Tag1 (0, (Tag3 ((("t", 2070)), 0, (0)), 100000000, 0, -311), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -310), 0), 100000000, 0, -309), 0, (("tactics/hints.mli", 58, 1776, 1778), ("tactics/hints.mli", 58, 1776, 1801), 0), 0, Tag1 ("Hints", 25)), 0); (("pattern", 2072), ((Tag1 (0, (Tag3 ((("t", 2070)), 0, (0)), 100000000, 0, -308), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Pattern")), "constr_pattern"), 0, (0)), 100000000, 0, -307)], (0)), 100000000, 0, -306), 0), 100000000, 0, -305), 0, (("tactics/hints.mli", 59, 1802, 1804), ("tactics/hints.mli", 59, 1802, 1852), 0), 0, Tag1 ("Hints", 26)), 0); (("database", 2073), ((Tag1 (0, (Tag3 ((("t", 2070)), 0, (0)), 100000000, 0, -304), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -303)], (0)), 100000000, 0, -302), 0), 100000000, 0, -301), 0, (("tactics/hints.mli", 60, 1853, 1855), ("tactics/hints.mli", 60, 1853, 1888), 0), 0, Tag1 ("Hints", 27)), 0); (("run", 2074), ((Tag1 (0, (Tag3 ((("t", 2070)), 0, (0)), 100000000, 0, -300), (Tag1 (0, (Tag1 (0, (Tag3 ((("hint_ast", 2018)), [(Tag3 ((("hint", 2019)), 0, (0)), 100000000, 0, -299)], (0)), 100000000, 0, -298), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [((("r")), 100000000, 0, -295)], (0)), 100000000, 0, -297), 0), 100000000, 0, -296), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [((("r")), 100000000, 0, -295)], (0)), 100000000, 0, -294), 0), 100000000, 0, -293), 0), 100000000, 0, -292), 0, (("tactics/hints.mli", 61, 1889, 1891), ("tactics/hints.mli", 61, 1889, 1967), 0), 0, Tag1 ("Hints", 28)), 0); (("name", 2075), ((Tag1 (0, (Tag3 ((("t", 2070)), 0, (0)), 100000000, 0, -291), (Tag3 ((("hints_path_atom", 2022)), 0, (0)), 100000000, 0, -290), 0), 100000000, 0, -289), 0, (("tactics/hints.mli", 62, 1968, 1970), ("tactics/hints.mli", 62, 1968, 2001), 0), 0, Tag1 ("Hints", 29)), 0); (("print", 2076), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -288), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -287), (Tag1 (0, (Tag3 ((("t", 2070)), 0, (0)), 100000000, 0, -286), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -285), 0), 100000000, 0, -284), 0), 100000000, 0, -283), 0), 100000000, 0, -282), 0, (("tactics/hints.mli", 63, 2002, 2004), ("tactics/hints.mli", 63, 2002, 2044), 0), 0, Tag1 ("Hints", 30)), 0); (("subgoals", 2077), ((Tag1 (0, (Tag3 ((("t", 2070)), 0, (0)), 100000000, 0, -281), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -280)], (0)), 100000000, 0, -279), 0), 100000000, 0, -278), 0, (("tactics/hints.mli", 64, 2045, 2047), ("tactics/hints.mli", 64, 2045, 2077), 0), 0, Tag1 ("Hints", 31)), 0); (("repr", 2078), ((Tag1 (0, (Tag3 ((("t", 2070)), 0, (0)), 100000000, 0, -277), (Tag3 ((("hint_ast", 2018)), [(Tag3 ((("hint", 2019)), 0, (0)), 100000000, 0, -276)], (0)), 100000000, 0, -275), 0), 100000000, 0, -274), 0, (("tactics/hints.mli", 68, 2176, 2178), ("tactics/hints.mli", 68, 2176, 2207), 0), 0, Tag1 ("Hints", 32)), 0)]), 0, (("tactics/hints.mli", 55, 1745, 1745), ("tactics/hints.mli", 69, 2208, 2211), 0), Tag1 ("Hints", 33)), 0, 0); Tag1 (("hint_mode", 2025), (0, 0, Tag1 ([(("ModeInput", 1436), (0), 0, (("tactics/hints.mli", 74, 2265, 2267), ("tactics/hints.mli", 74, 2265, 2278), 0), 0, Tag1 ("Hints", 35)); (("ModeNoHeadEvar", 1437), (0), 0, (("tactics/hints.mli", 75, 2294, 2296), ("tactics/hints.mli", 75, 2294, 2312), 0), 0, Tag1 ("Hints", 36)); (("ModeOutput", 1438), (0), 0, (("tactics/hints.mli", 76, 2339, 2341), ("tactics/hints.mli", 76, 2339, 2353), 0), 0, Tag1 ("Hints", 37))], 0), 1, 0, 0, 0, 0, 0, (("tactics/hints.mli", 73, 2248, 2248), ("tactics/hints.mli", 76, 2339, 2353), 0), 0, 1, 0, Tag1 ("Hints", 34)), 1, 0); Tag1 (("hints_transparency_target", 2026), ([((("a")), 100000000, 0, -241)], 1, Tag1 ([(("HintsVariables", 1440), (0), 0, (("tactics/hints.mli", 79, 2406, 2408), ("tactics/hints.mli", 79, 2406, 2424), 0), 0, Tag1 ("Hints", 39)); (("HintsConstants", 1441), (0), 0, (("tactics/hints.mli", 80, 2425, 2427), ("tactics/hints.mli", 80, 2425, 2443), 0), 0, Tag1 ("Hints", 40)); (("HintsReferences", 1442), ([(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -241)], (0)), 100000000, 0, -240)]), 0, (("tactics/hints.mli", 81, 2444, 2446), ("tactics/hints.mli", 81, 2444, 2474), 0), 0, Tag1 ("Hints", 41))], 0), 1, 0, [25], [0], 0, 0, (("tactics/hints.mli", 78, 2370, 2370), ("tactics/hints.mli", 81, 2444, 2474), 0), 0, 0, 0, Tag1 ("Hints", 38)), 1, 0); Tag1 (("hints_path_gen", 2027), ([((("a")), 100000000, 0, -234)], 1, Tag1 ([(("PathAtom", 1444), ([(Tag3 ((("hints_path_atom_gen", 2021)), [((("a")), 100000000, 0, -234)], (0)), 100000000, 0, -233)]), 0, (("tactics/hints.mli", 84, 2501, 2503), ("tactics/hints.mli", 84, 2501, 2539), 0), 0, Tag1 ("Hints", 43)); (("PathStar", 1445), ([(Tag3 ((("hints_path_gen", 2027)), [((("a")), 100000000, 0, -234)], (0)), 100000000, 0, -235)]), 0, (("tactics/hints.mli", 85, 2540, 2542), ("tactics/hints.mli", 85, 2540, 2573), 0), 0, Tag1 ("Hints", 44)); (("PathSeq", 1446), ([(Tag3 ((("hints_path_gen", 2027)), [((("a")), 100000000, 0, -234)], (0)), 100000000, 0, -236); (Tag3 ((("hints_path_gen", 2027)), [((("a")), 100000000, 0, -234)], (0)), 100000000, 0, -237)]), 0, (("tactics/hints.mli", 86, 2574, 2576), ("tactics/hints.mli", 86, 2574, 2626), 0), 0, Tag1 ("Hints", 45)); (("PathOr", 1447), ([(Tag3 ((("hints_path_gen", 2027)), [((("a")), 100000000, 0, -234)], (0)), 100000000, 0, -238); (Tag3 ((("hints_path_gen", 2027)), [((("a")), 100000000, 0, -234)], (0)), 100000000, 0, -239)]), 0, (("tactics/hints.mli", 87, 2627, 2629), ("tactics/hints.mli", 87, 2627, 2678), 0), 0, Tag1 ("Hints", 46)); (("PathEmpty", 1448), (0), 0, (("tactics/hints.mli", 88, 2679, 2681), ("tactics/hints.mli", 88, 2679, 2692), 0), 0, Tag1 ("Hints", 47)); (("PathEpsilon", 1449), (0), 0, (("tactics/hints.mli", 89, 2693, 2695), ("tactics/hints.mli", 89, 2693, 2708), 0), 0, Tag1 ("Hints", 48))], 0), 1, 0, [25], [0], 0, 0, (("tactics/hints.mli", 83, 2476, 2476), ("tactics/hints.mli", 89, 2693, 2708), 0), 0, 0, 0, Tag1 ("Hints", 42)), 1, 0); Tag1 (("pre_hints_path", 2028), (0, 0, 0, 1, ((Tag3 ((("hints_path_gen", 2027)), [(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -232)], (0)), 100000000, 0, -231)), 0, 0, 0, 0, (("tactics/hints.mli", 91, 2710, 2710), ("tactics/hints.mli", 91, 2710, 2762), 0), 0, 0, 0, Tag1 ("Hints", 49)), 1, 0); Tag1 (("hints_path", 2029), (0, 0, 0, 1, ((Tag3 ((("hints_path_gen", 2027)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -230)], (0)), 100000000, 0, -229)), 0, 0, 0, 0, (("tactics/hints.mli", 92, 2763, 2763), ("tactics/hints.mli", 92, 2763, 2805), 0), 0, 0, 0, Tag1 ("Hints", 50)), 1, 0); (("normalize_path", 2030), ((Tag1 (0, (Tag3 ((("hints_path", 2029)), 0, (0)), 100000000, 0, -228), (Tag3 ((("hints_path", 2029)), 0, (0)), 100000000, 0, -227), 0), 100000000, 0, -226), 0, (("tactics/hints.mli", 94, 2807, 2807), ("tactics/hints.mli", 94, 2807, 2852), 0), 0, Tag1 ("Hints", 51)), 0); (("path_matches", 2031), ((Tag1 (0, (Tag3 ((("hints_path", 2029)), 0, (0)), 100000000, 0, -225), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("hints_path_atom", 2022)), 0, (0)), 100000000, 0, -224)], (0)), 100000000, 0, -223), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -222), 0), 100000000, 0, -221), 0), 100000000, 0, -220), 0, (("tactics/hints.mli", 95, 2853, 2853), ("tactics/hints.mli", 95, 2853, 2914), 0), 0, Tag1 ("Hints", 52)), 0); (("path_derivate", 2032), ((Tag1 (0, (Tag3 ((("hints_path", 2029)), 0, (0)), 100000000, 0, -219), (Tag1 (0, (Tag3 ((("hints_path_atom", 2022)), 0, (0)), 100000000, 0, -218), (Tag3 ((("hints_path", 2029)), 0, (0)), 100000000, 0, -217), 0), 100000000, 0, -216), 0), 100000000, 0, -215), 0, (("tactics/hints.mli", 96, 2915, 2915), ("tactics/hints.mli", 96, 2915, 2978), 0), 0, Tag1 ("Hints", 53)), 0); (("pp_hints_path_gen", 2033), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -212), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -214), 0), 100000000, 0, -213), (Tag1 (0, (Tag3 ((("hints_path_gen", 2027)), [((("a")), 100000000, 0, -212)], (0)), 100000000, 0, -211), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -210), 0), 100000000, 0, -209), 0), 100000000, 0, -208), 0, (("tactics/hints.mli", 97, 2979, 2979), ("tactics/hints.mli", 97, 2979, 3044), 0), 0, Tag1 ("Hints", 54)), 0); (("pp_hints_path_atom", 2034), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -205), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -207), 0), 100000000, 0, -206), (Tag1 (0, (Tag3 ((("hints_path_atom_gen", 2021)), [((("a")), 100000000, 0, -205)], (0)), 100000000, 0, -204), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -203), 0), 100000000, 0, -202), 0), 100000000, 0, -201), 0, (("tactics/hints.mli", 98, 3045, 3045), ("tactics/hints.mli", 98, 3045, 3116), 0), 0, Tag1 ("Hints", 55)), 0); (("pp_hints_path", 2035), ((Tag1 (0, (Tag3 ((("hints_path", 2029)), 0, (0)), 100000000, 0, -200), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -199), 0), 100000000, 0, -198), 0, (("tactics/hints.mli", 99, 3117, 3117), ("tactics/hints.mli", 99, 3117, 3155), 0), 0, Tag1 ("Hints", 56)), 0); (("pp_hint_mode", 2036), ((Tag1 (0, (Tag3 ((("hint_mode", 2025)), 0, (0)), 100000000, 0, -197), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -196), 0), 100000000, 0, -195), 0, (("tactics/hints.mli", 100, 3156, 3156), ("tactics/hints.mli", 100, 3156, 3192), 0), 0, Tag1 ("Hints", 57)), 0); (("glob_hints_path_atom", 2037), ((Tag1 (0, (Tag3 ((("hints_path_atom_gen", 2021)), [(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -194)], (0)), 100000000, 0, -193), (Tag3 ((("hints_path_atom_gen", 2021)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -192)], (0)), 100000000, 0, -191), 0), 100000000, 0, -190), 0, (("tactics/hints.mli", 101, 3193, 3193), ("tactics/hints.mli", 102, 3220, 3290), 0), 0, Tag1 ("Hints", 58)), 0); (("glob_hints_path", 2038), ((Tag1 (0, (Tag3 ((("hints_path_gen", 2027)), [(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -189)], (0)), 100000000, 0, -188), (Tag3 ((("hints_path_gen", 2027)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -187)], (0)), 100000000, 0, -186), 0), 100000000, 0, -185), 0, (("tactics/hints.mli", 103, 3291, 3291), ("tactics/hints.mli", 104, 3313, 3373), 0), 0, Tag1 ("Hints", 59)), 0); Tag1 (("mode_match", 2039), (0, 0, Tag1 ([(("NoMode", 1512), (0), 0, (("tactics/hints.mli", 107, 3393, 3395), ("tactics/hints.mli", 107, 3393, 3403), 0), 0, Tag1 ("Hints", 61)); (("WithMode", 1513), ([(Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("hint_mode", 2025)), 0, (0)), 100000000, 0, -184)], (0)), 100000000, 0, -183)]), 0, (("tactics/hints.mli", 108, 3404, 3406), ("tactics/hints.mli", 108, 3404, 3435), 0), 0, Tag1 ("Hints", 62))], 0), 1, 0, 0, 0, 0, 0, (("tactics/hints.mli", 106, 3375, 3375), ("tactics/hints.mli", 108, 3404, 3435), 0), 0, 0, 0, Tag1 ("Hints", 60)), 1, 0); Tag1 (("with_mode", 2040), ([((("a")), 100000000, 0, -182)], 1, Tag1 ([(("ModeMatch", 1515), ([(Tag3 ((("mode_match", 2039)), 0, (0)), 100000000, 0, -181); ((("a")), 100000000, 0, -182)]), 0, (("tactics/hints.mli", 111, 3457, 3459), ("tactics/hints.mli", 111, 3457, 3489), 0), 0, Tag1 ("Hints", 64)); (("ModeMismatch", 1516), (0), 0, (("tactics/hints.mli", 112, 3490, 3492), ("tactics/hints.mli", 112, 3490, 3506), 0), 0, Tag1 ("Hints", 65))], 0), 1, 0, [25], [0], 0, 0, (("tactics/hints.mli", 110, 3437, 3437), ("tactics/hints.mli", 112, 3490, 3506), 0), 0, 0, 0, Tag1 ("Hints", 63)), 1, 0); Tag3 (("Hint_db", 2041), 0, (Tag1 ([Tag1 (("t", 2079), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("tactics/hints.mli", 116, 3531, 3535), ("tactics/hints.mli", 116, 3531, 3541), 0), 0, 0, 0, Tag1 ("Hints", 66)), 1, 0); (("empty", 2080), ((Tag1 (Tag1 ("name"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("hint_db_name", 2023)), 0, (0)), 100000000, 0, -452)], (0)), 100000000, 0, -451), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("TransparentState")), "t"), 0, (0)), 100000000, 0, -450), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -449), (Tag3 ((("t", 2079)), 0, (0)), 100000000, 0, -448), 0), 100000000, 0, -447), 0), 100000000, 0, -446), 0), 100000000, 0, -445), 0, (("tactics/hints.mli", 117, 3542, 3546), ("tactics/hints.mli", 117, 3542, 3611), 0), 0, Tag1 ("Hints", 67)), 0); (("map_none", 2081), ((Tag1 (("secvars"), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "Pred"), "t"), 0, (0)), 100000000, 0, -444), (Tag1 (0, (Tag3 ((("t", 2079)), 0, (0)), 100000000, 0, -443), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("FullHint", 2024)), "t"), 0, (0)), 100000000, 0, -442)], (0)), 100000000, 0, -441), 0), 100000000, 0, -440), 0), 100000000, 0, -439), 0, (("tactics/hints.mli", 122, 3750, 3754), ("tactics/hints.mli", 122, 3750, 3810), 0), 0, Tag1 ("Hints", 68)), 0); (("map_all", 2082), ((Tag1 (("secvars"), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "Pred"), "t"), 0, (0)), 100000000, 0, -438), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -437), (Tag1 (0, (Tag3 ((("t", 2079)), 0, (0)), 100000000, 0, -436), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("FullHint", 2024)), "t"), 0, (0)), 100000000, 0, -435)], (0)), 100000000, 0, -434), 0), 100000000, 0, -433), 0), 100000000, 0, -432), 0), 100000000, 0, -431), 0, (("tactics/hints.mli", 125, 3861, 3865), ("tactics/hints.mli", 125, 3861, 3933), 0), 0, Tag1 ("Hints", 69)), 0); (("map_eauto", 2083), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -430), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -429), (Tag1 (("secvars"), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "Pred"), "t"), 0, (0)), 100000000, 0, -428), (Tag1 (0, (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -425); (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -427)], (0)), 100000000, 0, -426)]), 100000000, 0, -424), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -423), (Tag1 (0, (Tag3 ((("t", 2079)), 0, (0)), 100000000, 0, -422), (Tag3 ((("with_mode", 2040)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("FullHint", 2024)), "t"), 0, (0)), 100000000, 0, -421)], (0)), 100000000, 0, -420)], (0)), 100000000, 0, -419), 0), 100000000, 0, -418), 0), 100000000, 0, -417), 0), 100000000, 0, -416), 0), 100000000, 0, -415), 0), 100000000, 0, -414), 0), 100000000, 0, -413), 0, (("tactics/hints.mli", 130, 4156, 4160), ("tactics/hints.mli", 130, 4156, 4286), 0), 0, Tag1 ("Hints", 70)), 0); (("map_auto", 2084), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -412), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -411), (Tag1 (("secvars"), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "Pred"), "t"), 0, (0)), 100000000, 0, -410), (Tag1 (0, (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -407); (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -409)], (0)), 100000000, 0, -408)]), 100000000, 0, -406), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -405), (Tag1 (0, (Tag3 ((("t", 2079)), 0, (0)), 100000000, 0, -404), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("FullHint", 2024)), "t"), 0, (0)), 100000000, 0, -403)], (0)), 100000000, 0, -402), 0), 100000000, 0, -401), 0), 100000000, 0, -400), 0), 100000000, 0, -399), 0), 100000000, 0, -398), 0), 100000000, 0, -397), 0), 100000000, 0, -396), 0, (("tactics/hints.mli", 135, 4434, 4438), ("tactics/hints.mli", 136, 4493, 4560), 0), 0, Tag1 ("Hints", 71)), 0); (("remove_one", 2085), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -395), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -394), (Tag1 (0, (Tag3 ((("t", 2079)), 0, (0)), 100000000, 0, -393), (Tag3 ((("t", 2079)), 0, (0)), 100000000, 0, -392), 0), 100000000, 0, -391), 0), 100000000, 0, -390), 0), 100000000, 0, -389), 0, (("tactics/hints.mli", 138, 4562, 4566), ("tactics/hints.mli", 138, 4562, 4617), 0), 0, Tag1 ("Hints", 72)), 0); (("remove_list", 2086), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -388), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -387)], (0)), 100000000, 0, -386), (Tag1 (0, (Tag3 ((("t", 2079)), 0, (0)), 100000000, 0, -385), (Tag3 ((("t", 2079)), 0, (0)), 100000000, 0, -384), 0), 100000000, 0, -383), 0), 100000000, 0, -382), 0), 100000000, 0, -381), 0, (("tactics/hints.mli", 139, 4618, 4622), ("tactics/hints.mli", 139, 4618, 4679), 0), 0, Tag1 ("Hints", 73)), 0); (("iter", 2087), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -380)], (0)), 100000000, 0, -379), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("hint_mode", 2025)), 0, (0)), 100000000, 0, -378)], (0)), 100000000, 0, -377)], (0)), 100000000, 0, -376), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("FullHint", 2024)), "t"), 0, (0)), 100000000, 0, -375)], (0)), 100000000, 0, -374), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -373), 0), 100000000, 0, -372), 0), 100000000, 0, -371), 0), 100000000, 0, -370), (Tag1 (0, (Tag3 ((("t", 2079)), 0, (0)), 100000000, 0, -369), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -368), 0), 100000000, 0, -367), 0), 100000000, 0, -366), 0, (("tactics/hints.mli", 140, 4680, 4684), ("tactics/hints.mli", 141, 4716, 4793), 0), 0, Tag1 ("Hints", 74)), 0); (("fold", 2088), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -365)], (0)), 100000000, 0, -364), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("hint_mode", 2025)), 0, (0)), 100000000, 0, -363)], (0)), 100000000, 0, -362)], (0)), 100000000, 0, -361), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("FullHint", 2024)), "t"), 0, (0)), 100000000, 0, -360)], (0)), 100000000, 0, -359), (Tag1 (0, ((("a")), 100000000, 0, -353), ((("a")), 100000000, 0, -353), 0), 100000000, 0, -358), 0), 100000000, 0, -357), 0), 100000000, 0, -356), 0), 100000000, 0, -355), (Tag1 (0, (Tag3 ((("t", 2079)), 0, (0)), 100000000, 0, -354), (Tag1 (0, ((("a")), 100000000, 0, -353), ((("a")), 100000000, 0, -353), 0), 100000000, 0, -352), 0), 100000000, 0, -351), 0), 100000000, 0, -350), 0, (("tactics/hints.mli", 143, 4795, 4799), ("tactics/hints.mli", 143, 4795, 4900), 0), 0, Tag1 ("Hints", 75)), 0); (("use_dn", 2089), ((Tag1 (0, (Tag3 ((("t", 2079)), 0, (0)), 100000000, 0, -349), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -348), 0), 100000000, 0, -347), 0, (("tactics/hints.mli", 145, 4902, 4906), ("tactics/hints.mli", 145, 4902, 4928), 0), 0, Tag1 ("Hints", 76)), 0); (("transparent_state", 2090), ((Tag1 (0, (Tag3 ((("t", 2079)), 0, (0)), 100000000, 0, -346), (Tag3 (Tag1 ((Tag2 ("TransparentState")), "t"), 0, (0)), 100000000, 0, -345), 0), 100000000, 0, -344), 0, (("tactics/hints.mli", 146, 4929, 4933), ("tactics/hints.mli", 146, 4929, 4980), 0), 0, Tag1 ("Hints", 77)), 0); (("set_transparent_state", 2091), ((Tag1 (0, (Tag3 ((("t", 2079)), 0, (0)), 100000000, 0, -343), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("TransparentState")), "t"), 0, (0)), 100000000, 0, -342), (Tag3 ((("t", 2079)), 0, (0)), 100000000, 0, -341), 0), 100000000, 0, -340), 0), 100000000, 0, -339), 0, (("tactics/hints.mli", 147, 4981, 4985), ("tactics/hints.mli", 147, 4981, 5041), 0), 0, Tag1 ("Hints", 78)), 0); (("add_cut", 2092), ((Tag1 (0, (Tag3 ((("hints_path", 2029)), 0, (0)), 100000000, 0, -338), (Tag1 (0, (Tag3 ((("t", 2079)), 0, (0)), 100000000, 0, -337), (Tag3 ((("t", 2079)), 0, (0)), 100000000, 0, -336), 0), 100000000, 0, -335), 0), 100000000, 0, -334), 0, (("tactics/hints.mli", 149, 5043, 5047), ("tactics/hints.mli", 149, 5043, 5081), 0), 0, Tag1 ("Hints", 79)), 0); (("cut", 2093), ((Tag1 (0, (Tag3 ((("t", 2079)), 0, (0)), 100000000, 0, -333), (Tag3 ((("hints_path", 2029)), 0, (0)), 100000000, 0, -332), 0), 100000000, 0, -331), 0, (("tactics/hints.mli", 150, 5082, 5086), ("tactics/hints.mli", 150, 5082, 5111), 0), 0, Tag1 ("Hints", 80)), 0); (("unfolds", 2094), ((Tag1 (0, (Tag3 ((("t", 2079)), 0, (0)), 100000000, 0, -330), (Tag2 ([(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "Set"), "t"), 0, (0)), 100000000, 0, -328); (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Cset"), "t"), 0, (0)), 100000000, 0, -329)]), 100000000, 0, -327), 0), 100000000, 0, -326), 0, (("tactics/hints.mli", 152, 5113, 5117), ("tactics/hints.mli", 152, 5113, 5153), 0), 0, Tag1 ("Hints", 81)), 0); (("add_modes", 2095), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "Map"), "t"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("hint_mode", 2025)), 0, (0)), 100000000, 0, -325)], (0)), 100000000, 0, -324)], (0)), 100000000, 0, -323)], (0)), 100000000, 0, -322), (Tag1 (0, (Tag3 ((("t", 2079)), 0, (0)), 100000000, 0, -321), (Tag3 ((("t", 2079)), 0, (0)), 100000000, 0, -320), 0), 100000000, 0, -319), 0), 100000000, 0, -318), 0, (("tactics/hints.mli", 154, 5155, 5159), ("tactics/hints.mli", 154, 5155, 5219), 0), 0, Tag1 ("Hints", 82)), 0); (("modes", 2096), ((Tag1 (0, (Tag3 ((("t", 2079)), 0, (0)), 100000000, 0, -317), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "Map"), "t"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("hint_mode", 2025)), 0, (0)), 100000000, 0, -316)], (0)), 100000000, 0, -315)], (0)), 100000000, 0, -314)], (0)), 100000000, 0, -313), 0), 100000000, 0, -312), 0, (("tactics/hints.mli", 155, 5220, 5224), ("tactics/hints.mli", 155, 5220, 5275), 0), 0, Tag1 ("Hints", 83)), 0)]), 0, (("tactics/hints.mli", 114, 3508, 3508), ("tactics/hints.mli", 156, 5276, 5281), 0), Tag1 ("Hints", 84)), 0, 0); Tag1 (("hint_db", 2042), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Hint_db", 2041)), "t"), 0, (0)), 100000000, 0, -180)), 0, 0, 0, 0, (("tactics/hints.mli", 158, 5283, 5283), ("tactics/hints.mli", 158, 5283, 5307), 0), 0, 0, 0, Tag1 ("Hints", 85)), 1, 0); Tag1 (("hnf", 2043), (0, 0, 0, 1, ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -179)), 0, 0, 0, 0, (("tactics/hints.mli", 160, 5309, 5309), ("tactics/hints.mli", 160, 5309, 5324), 0), 0, 1, 0, Tag1 ("Hints", 86)), 1, 0); Tag1 (("hint_term", 2044), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("tactics/hints.mli", 162, 5326, 5326), ("tactics/hints.mli", 162, 5326, 5340), 0), 0, 0, 0, Tag1 ("Hints", 87)), 1, 0); Tag1 (("hints_entry", 2045), (0, 0, Tag1 ([(("HintsResolveEntry", 1664), ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Typeclasses")), "hint_info"), 0, (0)), 100000000, 0, -160); (Tag3 ((("hnf", 2043)), 0, (0)), 100000000, 0, -161); (Tag3 ((("hints_path_atom", 2022)), 0, (0)), 100000000, 0, -162); (Tag3 ((("hint_term", 2044)), 0, (0)), 100000000, 0, -163)]), 100000000, 0, -159)], (0)), 100000000, 0, -158)]), 0, (("tactics/hints.mli", 165, 5361, 5363), ("tactics/hints.mli", 165, 5361, 5438), 0), 0, Tag1 ("Hints", 89)); (("HintsImmediateEntry", 1665), ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("hints_path_atom", 2022)), 0, (0)), 100000000, 0, -166); (Tag3 ((("hint_term", 2044)), 0, (0)), 100000000, 0, -167)]), 100000000, 0, -165)], (0)), 100000000, 0, -164)]), 0, (("tactics/hints.mli", 166, 5439, 5441), ("tactics/hints.mli", 166, 5439, 5500), 0), 0, Tag1 ("Hints", 90)); (("HintsCutEntry", 1666), ([(Tag3 ((("hints_path", 2029)), 0, (0)), 100000000, 0, -168)]), 0, (("tactics/hints.mli", 167, 5501, 5503), ("tactics/hints.mli", 167, 5501, 5532), 0), 0, Tag1 ("Hints", 91)); (("HintsUnfoldEntry", 1667), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Tacred")), "evaluable_global_reference"), 0, (0)), 100000000, 0, -170)], (0)), 100000000, 0, -169)]), 0, (("tactics/hints.mli", 168, 5533, 5535), ("tactics/hints.mli", 168, 5533, 5595), 0), 0, Tag1 ("Hints", 92)); (("HintsTransparencyEntry", 1668), ([(Tag3 ((("hints_transparency_target", 2026)), [(Tag3 (Tag1 ((Tag2 ("Tacred")), "evaluable_global_reference"), 0, (0)), 100000000, 0, -172)], (0)), 100000000, 0, -171); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -173)]), 0, (("tactics/hints.mli", 169, 5596, 5598), ("tactics/hints.mli", 169, 5596, 5692), 0), 0, Tag1 ("Hints", 93)); (("HintsModeEntry", 1669), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -174); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("hint_mode", 2025)), 0, (0)), 100000000, 0, -176)], (0)), 100000000, 0, -175)]), 0, (("tactics/hints.mli", 170, 5693, 5695), ("tactics/hints.mli", 170, 5693, 5741), 0), 0, Tag1 ("Hints", 94)); (("HintsExternEntry", 1670), ([(Tag3 (Tag1 ((Tag2 ("Typeclasses")), "hint_info"), 0, (0)), 100000000, 0, -177); (Tag3 (Tag1 ((Tag2 ("Genarg")), "glob_generic_argument"), 0, (0)), 100000000, 0, -178)]), 0, (("tactics/hints.mli", 171, 5742, 5744), ("tactics/hints.mli", 171, 5742, 5806), 0), 0, Tag1 ("Hints", 95))], 0), 1, 0, 0, 0, 0, 0, (("tactics/hints.mli", 164, 5342, 5342), ("tactics/hints.mli", 171, 5742, 5806), 0), 0, 0, 0, Tag1 ("Hints", 88)), 1, 0); (("searchtable_map", 2046), ((Tag1 (0, (Tag3 ((("hint_db_name", 2023)), 0, (0)), 100000000, 0, -157), (Tag3 ((("hint_db", 2042)), 0, (0)), 100000000, 0, -156), 0), 100000000, 0, -155), 0, (("tactics/hints.mli", 173, 5808, 5808), ("tactics/hints.mli", 173, 5808, 5853), 0), 0, Tag1 ("Hints", 96)), 0); (("searchtable_add", 2047), ((Tag1 (0, (Tag2 ([(Tag3 ((("hint_db_name", 2023)), 0, (0)), 100000000, 0, -153); (Tag3 ((("hint_db", 2042)), 0, (0)), 100000000, 0, -154)]), 100000000, 0, -152), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -151), 0), 100000000, 0, -150), 0, (("tactics/hints.mli", 175, 5855, 5855), ("tactics/hints.mli", 175, 5855, 5909), 0), 0, Tag1 ("Hints", 97)), 0); Tag1 (("hint_locality", 2048), (0, 0, Tag1 ([(("Local", 1674), (0), 0, (("tactics/hints.mli", 177, 5911, 5932), ("tactics/hints.mli", 177, 5911, 5937), 0), 0, Tag1 ("Hints", 99)); (("Export", 1675), (0), 0, (("tactics/hints.mli", 177, 5911, 5938), ("tactics/hints.mli", 177, 5911, 5946), 0), 0, Tag1 ("Hints", 100)); (("SuperGlobal", 1676), (0), 0, (("tactics/hints.mli", 177, 5911, 5947), ("tactics/hints.mli", 177, 5911, 5960), 0), 0, Tag1 ("Hints", 101))], 0), 1, 0, 0, 0, 0, 0, (("tactics/hints.mli", 177, 5911, 5911), ("tactics/hints.mli", 177, 5911, 5960), 0), 0, 1, 0, Tag1 ("Hints", 98)), 1, 0); (("default_hint_locality", 2049), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -149), (Tag3 ((("hint_locality", 2048)), 0, (0)), 100000000, 0, -148), 0), 100000000, 0, -147), 0, (("tactics/hints.mli", 179, 5962, 5962), ("tactics/hints.mli", 179, 5962, 6011), 0), 0, Tag1 ("Hints", 102)), 0); (("create_hint_db", 2050), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -146), (Tag1 (0, (Tag3 ((("hint_db_name", 2023)), 0, (0)), 100000000, 0, -145), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("TransparentState")), "t"), 0, (0)), 100000000, 0, -144), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -143), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -142), 0), 100000000, 0, -141), 0), 100000000, 0, -140), 0), 100000000, 0, -139), 0), 100000000, 0, -138), 0, (("tactics/hints.mli", 187, 6221, 6221), ("tactics/hints.mli", 187, 6221, 6300), 0), 0, Tag1 ("Hints", 103)), 0); (("remove_hints", 2051), ((Tag1 (("locality"), (Tag3 ((("hint_locality", 2048)), 0, (0)), 100000000, 0, -137), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("hint_db_name", 2023)), 0, (0)), 100000000, 0, -136)], (0)), 100000000, 0, -135), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -134)], (0)), 100000000, 0, -133), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -132), 0), 100000000, 0, -131), 0), 100000000, 0, -130), 0), 100000000, 0, -129), 0, (("tactics/hints.mli", 189, 6302, 6302), ("tactics/hints.mli", 189, 6302, 6390), 0), 0, Tag1 ("Hints", 104)), 0); (("current_db_names", 2052), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -128), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Util")), "String"), "Set"), "t"), 0, (0)), 100000000, 0, -127), 0), 100000000, 0, -126), 0, (("tactics/hints.mli", 191, 6392, 6392), ("tactics/hints.mli", 191, 6392, 6435), 0), 0, Tag1 ("Hints", 105)), 0); (("current_pure_db", 2053), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -125), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("hint_db", 2042)), 0, (0)), 100000000, 0, -124)], (0)), 100000000, 0, -123), 0), 100000000, 0, -122), 0, (("tactics/hints.mli", 193, 6437, 6437), ("tactics/hints.mli", 193, 6437, 6479), 0), 0, Tag1 ("Hints", 106)), 0); (("add_hints", 2054), ((Tag1 (("locality"), (Tag3 ((("hint_locality", 2048)), 0, (0)), 100000000, 0, -121), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("hint_db_name", 2023)), 0, (0)), 100000000, 0, -120)], (0)), 100000000, 0, -119), (Tag1 (0, (Tag3 ((("hints_entry", 2045)), 0, (0)), 100000000, 0, -118), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -117), 0), 100000000, 0, -116), 0), 100000000, 0, -115), 0), 100000000, 0, -114), 0, (("tactics/hints.mli", 195, 6481, 6481), ("tactics/hints.mli", 195, 6481, 6563), 0), 0, Tag1 ("Hints", 107)), 0); (("hint_globref", 2055), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -113), (Tag3 ((("hint_term", 2044)), 0, (0)), 100000000, 0, -112), 0), 100000000, 0, -111), 0, (("tactics/hints.mli", 197, 6565, 6565), ("tactics/hints.mli", 197, 6565, 6606), 0), 0, Tag1 ("Hints", 108)), 0); (("hint_constr", 2056), ((Tag1 (0, (Tag2 ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -108); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "ContextSet"), "t"), 0, (0)), 100000000, 0, -110)], (0)), 100000000, 0, -109)]), 100000000, 0, -107), (Tag3 ((("hint_term", 2044)), 0, (0)), 100000000, 0, -106), 0), 100000000, 0, -105), 0, (("tactics/hints.mli", 199, 6608, 6608), ("tactics/hints.mli", 200, 6673, 6726), 0), 0, Tag1 ("Hints", 109)), 0); (("push_resolves", 2057), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -104), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -103), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -102), (Tag1 (0, (Tag3 (Tag1 ((("Hint_db", 2041)), "t"), 0, (0)), 100000000, 0, -101), (Tag3 (Tag1 ((("Hint_db", 2041)), "t"), 0, (0)), 100000000, 0, -100), 0), 100000000, 0, -99), 0), 100000000, 0, -98), 0), 100000000, 0, -97), 0), 100000000, 0, -96), 0, (("tactics/hints.mli", 209, 7032, 7032), ("tactics/hints.mli", 210, 7052, 7108), 0), 0, Tag1 ("Hints", 110)), 0); (("push_resolve_hyp", 2058), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -95), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -94), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -93), (Tag1 (0, (Tag3 (Tag1 ((("Hint_db", 2041)), "t"), 0, (0)), 100000000, 0, -92), (Tag3 (Tag1 ((("Hint_db", 2041)), "t"), 0, (0)), 100000000, 0, -91), 0), 100000000, 0, -90), 0), 100000000, 0, -89), 0), 100000000, 0, -88), 0), 100000000, 0, -87), 0, (("tactics/hints.mli", 217, 7300, 7300), ("tactics/hints.mli", 218, 7323, 7374), 0), 0, Tag1 ("Hints", 111)), 0); (("make_local_hint_db", 2059), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -86), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -85), (Tag1 (Tag1 ("ts"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("TransparentState")), "t"), 0, (0)), 100000000, 0, -84)], (0)), 100000000, 0, -83), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -82), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Tactypes")), "delayed_open_constr"), 0, (0)), 100000000, 0, -81)], (0)), 100000000, 0, -80), (Tag3 ((("hint_db", 2042)), 0, (0)), 100000000, 0, -79), 0), 100000000, 0, -78), 0), 100000000, 0, -77), 0), 100000000, 0, -76), 0), 100000000, 0, -75), 0), 100000000, 0, -74), 0, (("tactics/hints.mli", 224, 7544, 7544), ("tactics/hints.mli", 224, 7544, 7657), 0), 0, Tag1 ("Hints", 112)), 0); (("make_db_list", 2060), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("hint_db_name", 2023)), 0, (0)), 100000000, 0, -73)], (0)), 100000000, 0, -72), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("hint_db", 2042)), 0, (0)), 100000000, 0, -71)], (0)), 100000000, 0, -70), 0), 100000000, 0, -69), 0, (("tactics/hints.mli", 226, 7659, 7659), ("tactics/hints.mli", 226, 7659, 7711), 0), 0, Tag1 ("Hints", 113)), 0); (("wrap_hint_warning", 2061), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [((("a")), 100000000, 0, -67)], (0)), 100000000, 0, -68), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [((("a")), 100000000, 0, -67)], (0)), 100000000, 0, -66), 0), 100000000, 0, -65), 0, (("tactics/hints.mli", 228, 7713, 7713), ("tactics/hints.mli", 228, 7713, 7779), 0), 0, Tag1 ("Hints", 114)), 0); (("wrap_hint_warning_fun", 2062), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -64), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -63), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -62), (Tag2 ([((("a")), 100000000, 0, -57); (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -61)]), 100000000, 0, -60), 0), 100000000, 0, -59), (Tag2 ([((("a")), 100000000, 0, -57); (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -58)]), 100000000, 0, -56), 0), 100000000, 0, -55), 0), 100000000, 0, -54), 0), 100000000, 0, -53), 0, (("tactics/hints.mli", 233, 7947, 7947), ("tactics/hints.mli", 234, 7994, 8040), 0), 0, Tag1 ("Hints", 115)), 0); (("fresh_hint", 2063), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -52), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -51), (Tag1 (0, (Tag3 ((("hint", 2019)), 0, (0)), 100000000, 0, -50), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -48); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -49)]), 100000000, 0, -47), 0), 100000000, 0, -46), 0), 100000000, 0, -45), 0), 100000000, 0, -44), 0, (("tactics/hints.mli", 237, 8086, 8086), ("tactics/hints.mli", 237, 8086, 8147), 0), 0, Tag1 ("Hints", 116)), 0); (("hint_res_pf", 2064), ((Tag1 (Tag1 ("with_evars"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -43)], (0)), 100000000, 0, -42), (Tag1 (Tag1 ("with_classes"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -41)], (0)), 100000000, 0, -40), (Tag1 (Tag1 ("flags"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Unification")), "unify_flags"), 0, (0)), 100000000, 0, -39)], (0)), 100000000, 0, -38), (Tag1 (0, (Tag3 ((("hint", 2019)), 0, (0)), 100000000, 0, -37), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -36)], (0)), 100000000, 0, -35), 0), 100000000, 0, -34), 0), 100000000, 0, -33), 0), 100000000, 0, -32), 0), 100000000, 0, -31), 0, (("tactics/hints.mli", 239, 8149, 8149), ("tactics/hints.mli", 240, 8209, 8274), 0), 0, Tag1 ("Hints", 117)), 0); (("pr_searchtable", 2065), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -30), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -29), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -28), 0), 100000000, 0, -27), 0), 100000000, 0, -26), 0, (("tactics/hints.mli", 244, 8300, 8300), ("tactics/hints.mli", 244, 8300, 8344), 0), 0, Tag1 ("Hints", 118)), 0); (("pr_applicable_hint", 2066), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proof")), "t"), 0, (0)), 100000000, 0, -25), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -24), 0), 100000000, 0, -23), 0, (("tactics/hints.mli", 245, 8345, 8345), ("tactics/hints.mli", 245, 8345, 8385), 0), 0, Tag1 ("Hints", 119)), 0); (("pr_hint_ref", 2067), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -22), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -21), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -20), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("tactics/hints.mli", 246, 8386, 8386), ("tactics/hints.mli", 246, 8386, 8440), 0), 0, Tag1 ("Hints", 120)), 0); (("pr_hint_db_by_name", 2068), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -15), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -14), (Tag1 (0, (Tag3 ((("hint_db_name", 2023)), 0, (0)), 100000000, 0, -13), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0), 100000000, 0, -10), 0), 100000000, 0, -9), 0, (("tactics/hints.mli", 247, 8441, 8441), ("tactics/hints.mli", 247, 8441, 8505), 0), 0, Tag1 ("Hints", 121)), 0); (("pr_hint_db_env", 2069), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -8), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -7), (Tag1 (0, (Tag3 (Tag1 ((("Hint_db", 2041)), "t"), 0, (0)), 100000000, 0, -6), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("tactics/hints.mli", 248, 8506, 8506), ("tactics/hints.mli", 248, 8506, 8563), 0), 0, Tag1 ("Hints", 122)), 0)], "Hints", [("Hints", ("\007\130]H\\t(\131\000}\205\137H\148\250\166")); ("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Vmemitcodes", ("wCd\138\165\158DD\241gH\236.\210\197\247")); ("Vmbytecodes", ("\025\021\151\137Dx\149W\236+[\143f\208\160\016")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Unix", (":B72R\011\005Sj\189)\011\239PH\254")); ("UnivSubst", ("\190qu\031mc\130\181\003G]\132\"\219m)")); ("UnivProblem", ("6'\161\018\181\001.\253\000\141a6\171\1727\155")); ("UnivNames", ("%\151_\209%+JM$n\001\232\194n\178N")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Unification", ("\017\027\157=\255\1914L\020\213h\154.\219\005\170")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UState", ("SD\203\215|\136\n\251\239\208\148\215C\n\167\005")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("Typeclasses", ("KO\1297x\192\210\231\001\1824l\135\192\160|")); ("Type_errors", ("7\157\162-\214M\206\196\228\191\005v\134\177\144\134")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Tactypes", ("\143E\135*\195\151\144H\151M\011($\017\159\203")); ("Tacred", ("\133d\143\1310z\030\237\232\002\001\025\147\140\215:")); ("Summary", ("\148G\135\226\024L3\246\021\028U\146\164`\253\250")); ("Store", ("/dT\252\145\179pq\216{\181\206\190K+U")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("Section", ("\245\207\b\021\142v=\155#w\246}\"4b\006")); ("Safe_typing", (")\250?\164\145\132\241\127\186\152h+\145\"\237l")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("Reductionops", ("\179\023P\218\146Uh\014IS\196C\031q~#")); ("Range", ("\218\130\001r\237\r\144\171\164\021l\155\196\143sg")); ("Proofview_monad", ("\218\196\189S\147\216\129\221\231\224v\228O\024*\239")); ("Proofview", ("\245\140U\027\236\199\199&\242\156\199YG\250tA")); ("Proof", ("\249\030\200g\248\164o&\tS\132\rTl\1736")); ("Primred", ("\158G\192\182\224\196\144*\174y_E\165\012\137C")); ("Pretype_errors", ("\155\229\201\176\163\234\203C\127\227\141\174j\199\200H")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Pattern", ("\195C\140Wb=\022\222\208\227^K\003\020\215X")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("Nativevalues", ("8:\007\025e\226c,\001\171\146#l\210\171\152")); ("Nativelib", ("V\239\205Y1\147E:,\176\196Hy\1483|")); ("Nativecode", ("\190\185\255\006m\012\210\163\138Rz\247\15283\183")); ("Nametab", ("1\018\163\254\225\2178\025DI\0271Q\198\134\140")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Namegen", ("\187\222\224T\255\020\1808-\212*\164\131\177\157x")); ("Monad", ("\244\171T\157\194p\187\160\149\195{\132\222\020\253\148")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Ltac_pretype", ("\224\"\167\018i:U\172>\188\128$\r\252\020T")); ("Logic_monad", ("\130\157\160Q\163vQ\137\184\2242\209\128\024\220i")); ("Locus", ("_\002\003W\246\181\225\242Uf\139\226\176\174\192I")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Libobject", ("\132}t\226hl\213L\210\172\167pc\012~\129")); ("Libnames", ("fp\0255\167\162\209\153\137\161\169#\246\193\003\198")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hook", ("\183\194\223\003\155\169',\187\240a;E\b\1396")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Goal_select", ("\235$\175\023t\178\194.Ivlz\005\211\173\n")); ("Globnames", ("W\004\172T\214\181H\220\232\160LSW\006\130\226")); ("Glob_term", ("\165=a\227\160\153.\021_$\232\209T\236\153O")); ("Genlambda", ("\170}\024\241\141\222\136S\169\219\2212i\134KI")); ("Geninterp", ("2S\151\191\189\159\004\188;\224d\199|U\004\028")); ("Genarg", ("\1434\015\001\152\196\005s\156\136\195\185\247\b3\t")); ("Ftactic", ("K\172\205\128\241\162\160\201\202\1561o\180L\206:")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evd", ("\211\205p\193\216\129r\006\239oN\142ar\196\175")); ("Evarsolve", ("\000&\228\016}j\199\t\229\173\127\024\219\199\184\178")); ("Evar_kinds", ("\023L\186\132\218}\254\221\185\198\220\200h\003{\021")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Environ", ("\171b\1579\229<\003Z\147IL\225X\254\182\204")); ("Entries", ("\172\201\198\221Ap\027_{\174\141C\021\";p")); ("EConstr", ("\201aW\156\157;N\004\201V\208\006L\166\211)")); ("Dyn", ("\131z`\205v\2306\007x\027&K.?;\169")); ("Deprecation", ("\226:\146\245\190;\1929\254@\247a\218\244\134\189")); ("Declarations", ("\239\137n\019\030w$\182\166z^{\b\206\163\175")); ("DAst", ("\224/\200)\007\184ni\134\b\139\204\241\005w\212")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Conversion", ("\158\150&\195M\tv\127|\029\158RRK\211A")); ("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CWarnings", ("\132\220\150\227\215\239t\217\132\220'JX\188\246c")); ("CUnix", ("\140Zl\153\167\011J\015\005|th\247OTu")); ("CString", ("\243~4C\023~\169\148x\206\165\207\195\177Q\184")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CEphemeron", ("\204I\179-\206(x4\173\229\250\001PkH\151")); ("CDebug", ("^4\210p7\239!3\138\138\213?\239`\250\157")); ("CClosure", ("\167\b\022\241V-\r\253\b\002\000j]\223%\142")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])
val pr_hint_db_env : Environ.env -> Evd.evar_map -> Hint_db.t -> Pp.t

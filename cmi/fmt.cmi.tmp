val stdout : Format.formatter
val stderr : Format.formatter
val pf : Format.formatter -> ('a, Format.formatter, unit) format -> 'a
val pr : ('a, Format.formatter, unit) format -> 'a
val epr : ('a, Format.formatter, unit) format -> 'a
val str : ('a, Format.formatter, unit, string) format4 -> 'a
val kpf :
  (Format.formatter -> 'a) ->
  Format.formatter -> ('b, Format.formatter, unit, 'a) format4 -> 'b
val kstr : (string -> 'a) -> ('b, Format.formatter, unit, 'a) format4 -> 'b
val str_like :
  Format.formatter -> ('a, Format.formatter, unit, string) format4 -> 'a
val with_buffer : ?like:Format.formatter -> Buffer.t -> Format.formatter
val failwith : ('a, Format.formatter, unit, 'b) format4 -> 'a
val failwith_notrace : ('a, Format.formatter, unit, 'b) format4 -> 'a
val invalid_arg : ('a, Format.formatter, unit, 'b) format4 -> 'a
val error : ('b, Format.formatter, unit, ('a, string) result) format4 -> 'b
val error_msg :
  ('b, Format.formatter, unit, ('a, [> `Msg of string ]) result) format4 ->
  'b
type 'a t = Format.formatter -> 'a -> unit
val flush : 'a t
val nop : 'a t
val any : (unit, Format.formatter, unit) format -> 'a t
val using : ('a -> 'b) -> 'b t -> 'a t
val const : 'a t -> 'a -> 'b t
val fmt : ('a, Format.formatter, unit) format -> Format.formatter -> 'a
val cut : 'a t
val sp : 'a t
val sps : int -> 'a t
val comma : 'a t
val semi : 'a t
val append : 'a t -> 'a t -> 'a t
val ( ++ ) : 'a t -> 'a t -> 'a t
val concat : ?sep:unit t -> 'a t list -> 'a t
val iter : ?sep:unit t -> (('a -> unit) -> 'b -> unit) -> 'a t -> 'b t
val iter_bindings :
  ?sep:unit t -> (('a -> 'b -> unit) -> 'c -> unit) -> ('a * 'b) t -> 'c t
val box : ?indent:int -> 'a t -> 'a t
val hbox : 'a t -> 'a t
val vbox : ?indent:int -> 'a t -> 'a t
val hvbox : ?indent:int -> 'a t -> 'a t
val hovbox : ?indent:int -> 'a t -> 'a t
val parens : 'a t -> 'a t
val brackets : 'a t -> 'a t
val braces : 'a t -> 'a t
val quote : ?mark:string -> 'a t -> 'a t
val id : 'a -> 'a
val field :
  ?label:string t -> ?sep:unit t -> string -> ('b -> 'a) -> 'a t -> 'b t
val record : ?sep:unit t -> 'a t list -> 'a t
val bool : bool t
val int : int t
val nativeint : nativeint t
val int32 : int32 t
val int64 : int64 t
val uint : int t
val unativeint : nativeint t
val uint32 : int32 t
val uint64 : int64 t
val float : float t
val float_dfrac : int -> float t
val float_dsig : int -> float t
val char : char t
val string : string t
val buffer : Buffer.t t
val exn : exn t
val exn_backtrace : (exn * Printexc.raw_backtrace) t
val pair : ?sep:unit t -> 'a t -> 'b t -> ('a * 'b) t
val option : ?none:unit t -> 'a t -> 'a option t
val result : ok:'a t -> error:'b t -> ('a, 'b) result t
val list : ?sep:unit t -> 'a t -> 'a list t
val array : ?sep:unit t -> 'a t -> 'a array t
val seq : ?sep:unit t -> 'a t -> 'a Seq.t t
val hashtbl : ?sep:unit t -> ('a * 'b) t -> ('a, 'b) Hashtbl.t t
val queue : ?sep:unit t -> 'a t -> 'a Queue.t t
val stack : ?sep:unit t -> 'a t -> 'a Stack.t t
module Dump :
  sig
    val signal : int t
    val uchar : Uchar.t t
    val string : string t
    val pair : 'a t -> 'b t -> ('a * 'b) t
    val option : 'a t -> 'a option t
    val result : ok:'a t -> error:'b t -> ('a, 'b) result t
    val list : 'a t -> 'a list t
    val array : 'a t -> 'a array t
    val seq : 'a t -> 'a Seq.t t
    val hashtbl : 'a t -> 'b t -> ('a, 'b) Hashtbl.t t
    val queue : 'a t -> 'a Queue.t t
    val stack : 'a t -> 'a Stack.t t
    val field : ?label:string t -> string -> ('b -> 'a) -> 'a t -> 'b t
    val record : 'a t list -> 'a t
    val iter : (('a -> unit) -> 'b -> unit) -> 'b t -> 'a t -> 'b t
    val iter_bindings :
      (('a -> 'b -> unit) -> 'c -> unit) -> 'c t -> 'a t -> 'b t -> 'c t
  end
val si_size : scale:int -> string -> int t
val byte_size : int t
val bi_byte_size : int t
val uint64_ns_span : int64 t
type 'a vec = int * (int -> 'a)
val on_bytes : char vec t -> bytes t
val on_string : char vec t -> string t
val ascii : ?w:int -> ?subst:unit t -> unit -> char vec t
val octets : ?w:int -> ?sep:unit t -> unit -> char vec t
val addresses : ?addr:int t -> ?w:int -> 'a vec t -> 'a vec t
val hex : ?w:int -> unit -> char vec t
val words : string t
val paragraphs : string t
val text : string t
val lines : string t
val truncated : max:int -> string t
val text_loc : ((int * int) * (int * int)) t
val one_of : ?empty:unit t -> 'a t -> 'a list t
val did_you_mean :
  ?pre:unit t -> ?post:unit t -> kind:string -> 'a t -> ('a * 'a list) t
val if_utf_8 : 'a t -> 'a t -> 'a t
val utf_8 : Format.formatter -> bool
val set_utf_8 : Format.formatter -> bool -> unit
type color =
    [ `Black | `Blue | `Cyan | `Green | `Magenta | `Red | `White | `Yellow ]
type style =
    [ `Bg of
        [ `Black
        | `Blue
        | `Cyan
        | `Green
        | `Hi of color
        | `Magenta
        | `Red
        | `White
        | `Yellow ]
    | `Black
    | `Blue
    | `Bold
    | `Cyan
    | `Faint
    | `Fg of
        [ `Black
        | `Blue
        | `Cyan
        | `Green
        | `Hi of color
        | `Magenta
        | `Red
        | `White
        | `Yellow ]
    | `Green
    | `Italic
    | `Magenta
    | `None
    | `Red
    | `Reverse
    | `Underline
    | `White
    | `Yellow ]
val styled : style -> 'a t -> 'a t
type style_renderer = [ `Ansi_tty | `None ]
val style_renderer : Format.formatter -> style_renderer
val set_style_renderer : Format.formatter -> style_renderer -> unit
val of_to_string : ('a -> string) -> 'a t
val to_to_string : 'a t -> 'a -> string
val strf : ('a, Format.formatter, unit, string) format4 -> 'a
val kstrf : (string -> 'a) -> ('b, Format.formatter, unit, 'a) format4 -> 'b
val strf_like :
  Format.formatter -> ('a, Format.formatter, unit, string) format4 -> 'a
val always : (unit, Format.formatter, unit) format -> 'a t
val unit : (unit, Format.formatter, unit) format -> unit t
val prefix : unit t -> 'a t -> 'a t
val suffix : unit t -> 'a t -> 'a t
("DEBUG:rule", [(("stdout", 1110), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -631), 0, (("src/fmt.mli", 18, 633, 633), ("src/fmt.mli", 18, 633, 662), 0), 0, Tag1 ("Fmt", 0)), 0); (("stderr", 1111), ((Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -630), 0, (("src/fmt.mli", 21, 714, 714), ("src/fmt.mli", 21, 714, 743), 0), 0, Tag1 ("Fmt", 1)), 0); (("pf", 1112), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -629), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format"), [((("a")), 100000000, 0, -625); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -627); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -628)], (0)), 100000000, 0, -626), ((("a")), 100000000, 0, -625), 0), 100000000, 0, -624), 0), 100000000, 0, -623), 0, (("src/fmt.mli", 26, 828, 828), ("src/fmt.mli", 26, 828, 905), 0), 0, Tag1 ("Fmt", 2)), 0); (("pr", 1113), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format"), [((("a")), 100000000, 0, -619); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -621); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -622)], (0)), 100000000, 0, -620), ((("a")), 100000000, 0, -619), 0), 100000000, 0, -618), 0, (("src/fmt.mli", 29, 941, 941), ("src/fmt.mli", 29, 941, 991), 0), 0, Tag1 ("Fmt", 3)), 0); (("epr", 1114), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format"), [((("a")), 100000000, 0, -614); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -616); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -617)], (0)), 100000000, 0, -615), ((("a")), 100000000, 0, -614), 0), 100000000, 0, -613), 0, (("src/fmt.mli", 32, 1021, 1021), ("src/fmt.mli", 32, 1021, 1072), 0), 0, Tag1 ("Fmt", 4)), 0); (("str", 1115), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format4"), [((("a")), 100000000, 0, -608); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -610); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -611); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -612)], (0)), 100000000, 0, -609), ((("a")), 100000000, 0, -608), 0), 100000000, 0, -607), 0, (("src/fmt.mli", 35, 1103, 1103), ("src/fmt.mli", 35, 1103, 1163), 0), 0, Tag1 ("Fmt", 5)), 0); (("kpf", 1116), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -606), ((("a")), 100000000, 0, -603), 0), 100000000, 0, -605), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -604), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format4"), [((("b")), 100000000, 0, -599); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -601); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -602); ((("a")), 100000000, 0, -603)], (0)), 100000000, 0, -600), ((("b")), 100000000, 0, -599), 0), 100000000, 0, -598), 0), 100000000, 0, -597), 0), 100000000, 0, -596), 0, (("src/fmt.mli", 42, 1349, 1349), ("src/fmt.mli", 43, 1407, 1462), 0), 0, Tag1 ("Fmt", 6)), 0); (("kstr", 1117), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -595), ((("a")), 100000000, 0, -593), 0), 100000000, 0, -594), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format4"), [((("b")), 100000000, 0, -589); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -591); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -592); ((("a")), 100000000, 0, -593)], (0)), 100000000, 0, -590), ((("b")), 100000000, 0, -589), 0), 100000000, 0, -588), 0), 100000000, 0, -587), 0, (("src/fmt.mli", 46, 1500, 1500), ("src/fmt.mli", 47, 1511, 1577), 0), 0, Tag1 ("Fmt", 7)), 0); (("str_like", 1118), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -586), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format4"), [((("a")), 100000000, 0, -581); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -583); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -584); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -585)], (0)), 100000000, 0, -582), ((("a")), 100000000, 0, -581), 0), 100000000, 0, -580), 0), 100000000, 0, -579), 0, (("src/fmt.mli", 50, 1632, 1632), ("src/fmt.mli", 51, 1647, 1719), 0), 0, Tag1 ("Fmt", 8)), 0); (("with_buffer", 1119), ((Tag1 (Tag1 ("like"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -578)], (0)), 100000000, 0, -577), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Buffer"), "t"), 0, (0)), 100000000, 0, -576), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -575), 0), 100000000, 0, -574), 0), 100000000, 0, -573), 0, (("src/fmt.mli", 55, 1837, 1837), ("src/fmt.mli", 55, 1837, 1909), 0), 0, Tag1 ("Fmt", 9)), 0); (("failwith", 1120), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format4"), [((("a")), 100000000, 0, -568); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -570); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -571); ((("b")), 100000000, 0, -572)], (0)), 100000000, 0, -569), ((("a")), 100000000, 0, -568), 0), 100000000, 0, -567), 0, (("src/fmt.mli", 60, 2060, 2060), ("src/fmt.mli", 60, 2060, 2121), 0), 0, Tag1 ("Fmt", 10)), 0); (("failwith_notrace", 1121), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format4"), [((("a")), 100000000, 0, -562); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -564); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -565); ((("b")), 100000000, 0, -566)], (0)), 100000000, 0, -563), ((("a")), 100000000, 0, -562), 0), 100000000, 0, -561), 0, (("src/fmt.mli", 64, 2229, 2229), ("src/fmt.mli", 64, 2229, 2298), 0), 0, Tag1 ("Fmt", 11)), 0); (("invalid_arg", 1122), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format4"), [((("a")), 100000000, 0, -556); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -558); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -559); ((("b")), 100000000, 0, -560)], (0)), 100000000, 0, -557), ((("a")), 100000000, 0, -556), 0), 100000000, 0, -555), 0, (("src/fmt.mli", 67, 2380, 2380), ("src/fmt.mli", 67, 2380, 2444), 0), 0, Tag1 ("Fmt", 12)), 0); (("error", 1123), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format4"), [((("b")), 100000000, 0, -548); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -550); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -551); (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [((("a")), 100000000, 0, -553); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -554)], (0)), 100000000, 0, -552)], (0)), 100000000, 0, -549), ((("b")), 100000000, 0, -548), 0), 100000000, 0, -547), 0, (("src/fmt.mli", 71, 2567, 2567), ("src/fmt.mli", 71, 2567, 2643), 0), 0, Tag1 ("Fmt", 13)), 0); (("error_msg", 1124), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format4"), [((("b")), 100000000, 0, -538); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -540); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -541); (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [((("a")), 100000000, 0, -543); (Tag8 (([("Msg", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -546))))], ((0), 100000000, 0, -545), 0, 0, 0)), 100000000, 0, -544)], (0)), 100000000, 0, -542)], (0)), 100000000, 0, -539), ((("b")), 100000000, 0, -538), 0), 100000000, 0, -537), 0, (("src/fmt.mli", 74, 2705, 2705), ("src/fmt.mli", 75, 2721, 2799), 0), 0, Tag1 ("Fmt", 14)), 0); Tag1 (("t", 1125), ([((("a")), 100000000, 0, -535)], 1, 0, 1, ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -536), (Tag1 (0, ((("a")), 100000000, 0, -535), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -534), 0), 100000000, 0, -533), 0), 100000000, 0, -532)), [46], [0], 0, 0, (("src/fmt.mli", 80, 2895, 2895), ("src/fmt.mli", 80, 2895, 2937), 0), 0, 0, 0, Tag1 ("Fmt", 15)), 1, 0); (("flush", 1126), ((Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -531)], (0)), 100000000, 0, -530), 0, (("src/fmt.mli", 83, 2994, 2994), ("src/fmt.mli", 83, 2994, 3010), 0), 0, Tag1 ("Fmt", 16)), 0); (("nop", 1127), ((Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -529)], (0)), 100000000, 0, -528), 0, (("src/fmt.mli", 86, 3070, 3070), ("src/fmt.mli", 86, 3070, 3084), 0), 0, Tag1 ("Fmt", 17)), 0); (("any", 1128), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -525); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -526); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -527)], (0)), 100000000, 0, -524), (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -523)], (0)), 100000000, 0, -522), 0), 100000000, 0, -521), 0, (("src/fmt.mli", 89, 3116, 3116), ("src/fmt.mli", 89, 3116, 3178), 0), 0, Tag1 ("Fmt", 18)), 0); (("using", 1129), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -517), ((("b")), 100000000, 0, -519), 0), 100000000, 0, -520), (Tag1 (0, (Tag3 ((("t", 1125)), [((("b")), 100000000, 0, -519)], (0)), 100000000, 0, -518), (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -517)], (0)), 100000000, 0, -516), 0), 100000000, 0, -515), 0), 100000000, 0, -514), 0, (("src/fmt.mli", 92, 3253, 3253), ("src/fmt.mli", 92, 3253, 3291), 0), 0, Tag1 ("Fmt", 19)), 0); (("const", 1130), ((Tag1 (0, (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -512)], (0)), 100000000, 0, -513), (Tag1 (0, ((("a")), 100000000, 0, -512), (Tag3 ((("t", 1125)), [((("b")), 100000000, 0, -511)], (0)), 100000000, 0, -510), 0), 100000000, 0, -509), 0), 100000000, 0, -508), 0, (("src/fmt.mli", 95, 3336, 3336), ("src/fmt.mli", 95, 3336, 3366), 0), 0, Tag1 ("Fmt", 20)), 0); (("fmt", 1131), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format"), [((("a")), 100000000, 0, -503); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -506); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -507)], (0)), 100000000, 0, -505), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -504), ((("a")), 100000000, 0, -503), 0), 100000000, 0, -502), 0), 100000000, 0, -501), 0, (("src/fmt.mli", 98, 3423, 3423), ("src/fmt.mli", 98, 3423, 3501), 0), 0, Tag1 ("Fmt", 21)), 0); (("cut", 1132), ((Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -500)], (0)), 100000000, 0, -499), 0, (("src/fmt.mli", 105, 3675, 3675), ("src/fmt.mli", 105, 3675, 3689), 0), 0, Tag1 ("Fmt", 22)), 0); (("sp", 1133), ((Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -498)], (0)), 100000000, 0, -497), 0, (("src/fmt.mli", 108, 3746, 3746), ("src/fmt.mli", 108, 3746, 3759), 0), 0, Tag1 ("Fmt", 23)), 0); (("sps", 1134), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -496), (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -495)], (0)), 100000000, 0, -494), 0), 100000000, 0, -493), 0, (("src/fmt.mli", 111, 3817, 3817), ("src/fmt.mli", 111, 3817, 3838), 0), 0, Tag1 ("Fmt", 24)), 0); (("comma", 1135), ((Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -492)], (0)), 100000000, 0, -491), 0, (("src/fmt.mli", 114, 3905, 3905), ("src/fmt.mli", 114, 3905, 3921), 0), 0, Tag1 ("Fmt", 25)), 0); (("semi", 1136), ((Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -490)], (0)), 100000000, 0, -489), 0, (("src/fmt.mli", 117, 3961, 3961), ("src/fmt.mli", 117, 3961, 3976), 0), 0, Tag1 ("Fmt", 26)), 0); (("append", 1137), ((Tag1 (0, (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -486)], (0)), 100000000, 0, -488), (Tag1 (0, (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -486)], (0)), 100000000, 0, -487), (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -486)], (0)), 100000000, 0, -485), 0), 100000000, 0, -484), 0), 100000000, 0, -483), 0, (("src/fmt.mli", 122, 4042, 4042), ("src/fmt.mli", 122, 4042, 4075), 0), 0, Tag1 ("Fmt", 27)), 0); (("++", 1138), ((Tag1 (0, (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -480)], (0)), 100000000, 0, -482), (Tag1 (0, (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -480)], (0)), 100000000, 0, -481), (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -480)], (0)), 100000000, 0, -479), 0), 100000000, 0, -478), 0), 100000000, 0, -477), 0, (("src/fmt.mli", 125, 4142, 4142), ("src/fmt.mli", 125, 4142, 4175), 0), 0, Tag1 ("Fmt", 28)), 0); (("concat", 1139), ((Tag1 (Tag1 ("sep"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -476)], (0)), 100000000, 0, -475)], (0)), 100000000, 0, -474), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -471)], (0)), 100000000, 0, -473)], (0)), 100000000, 0, -472), (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -471)], (0)), 100000000, 0, -470), 0), 100000000, 0, -469), 0), 100000000, 0, -468), 0, (("src/fmt.mli", 128, 4207, 4207), ("src/fmt.mli", 128, 4207, 4252), 0), 0, Tag1 ("Fmt", 29)), 0); (("iter", 1140), ((Tag1 (Tag1 ("sep"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -467)], (0)), 100000000, 0, -466)], (0)), 100000000, 0, -465), (Tag1 (0, (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -459), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -464), 0), 100000000, 0, -463), (Tag1 (0, ((("b")), 100000000, 0, -457), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -462), 0), 100000000, 0, -461), 0), 100000000, 0, -460), (Tag1 (0, (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -459)], (0)), 100000000, 0, -458), (Tag3 ((("t", 1125)), [((("b")), 100000000, 0, -457)], (0)), 100000000, 0, -456), 0), 100000000, 0, -455), 0), 100000000, 0, -454), 0), 100000000, 0, -453), 0, (("src/fmt.mli", 132, 4384, 4384), ("src/fmt.mli", 132, 4384, 4454), 0), 0, Tag1 ("Fmt", 30)), 0); (("iter_bindings", 1141), ((Tag1 (Tag1 ("sep"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -452)], (0)), 100000000, 0, -451)], (0)), 100000000, 0, -450), (Tag1 (0, (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -442), (Tag1 (0, ((("b")), 100000000, 0, -443), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -449), 0), 100000000, 0, -448), 0), 100000000, 0, -447), (Tag1 (0, ((("c")), 100000000, 0, -439), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -446), 0), 100000000, 0, -445), 0), 100000000, 0, -444), (Tag1 (0, (Tag3 ((("t", 1125)), [(Tag2 ([((("a")), 100000000, 0, -442); ((("b")), 100000000, 0, -443)]), 100000000, 0, -441)], (0)), 100000000, 0, -440), (Tag3 ((("t", 1125)), [((("c")), 100000000, 0, -439)], (0)), 100000000, 0, -438), 0), 100000000, 0, -437), 0), 100000000, 0, -436), 0), 100000000, 0, -435), 0, (("src/fmt.mli", 137, 4613, 4613), ("src/fmt.mli", 138, 4686, 4707), 0), 0, Tag1 ("Fmt", 31)), 0); (("box", 1142), ((Tag1 (Tag1 ("indent"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -434)], (0)), 100000000, 0, -433), (Tag1 (0, (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -431)], (0)), 100000000, 0, -432), (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -431)], (0)), 100000000, 0, -430), 0), 100000000, 0, -429), 0), 100000000, 0, -428), 0, (("src/fmt.mli", 145, 4907, 4907), ("src/fmt.mli", 145, 4907, 4944), 0), 0, Tag1 ("Fmt", 32)), 0); (("hbox", 1143), ((Tag1 (0, (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -426)], (0)), 100000000, 0, -427), (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -426)], (0)), 100000000, 0, -425), 0), 100000000, 0, -424), 0, (("src/fmt.mli", 151, 5241, 5241), ("src/fmt.mli", 151, 5241, 5264), 0), 0, Tag1 ("Fmt", 33)), 0); (("vbox", 1144), ((Tag1 (Tag1 ("indent"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -423)], (0)), 100000000, 0, -422), (Tag1 (0, (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -420)], (0)), 100000000, 0, -421), (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -420)], (0)), 100000000, 0, -419), 0), 100000000, 0, -418), 0), 100000000, 0, -417), 0, (("src/fmt.mli", 155, 5413, 5413), ("src/fmt.mli", 155, 5413, 5451), 0), 0, Tag1 ("Fmt", 34)), 0); (("hvbox", 1145), ((Tag1 (Tag1 ("indent"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -416)], (0)), 100000000, 0, -415), (Tag1 (0, (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -413)], (0)), 100000000, 0, -414), (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -413)], (0)), 100000000, 0, -412), 0), 100000000, 0, -411), 0), 100000000, 0, -410), 0, (("src/fmt.mli", 160, 5644, 5644), ("src/fmt.mli", 160, 5644, 5683), 0), 0, Tag1 ("Fmt", 35)), 0); (("hovbox", 1146), ((Tag1 (Tag1 ("indent"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -409)], (0)), 100000000, 0, -408), (Tag1 (0, (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -406)], (0)), 100000000, 0, -407), (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -406)], (0)), 100000000, 0, -405), 0), 100000000, 0, -404), 0), 100000000, 0, -403), 0, (("src/fmt.mli", 164, 5805, 5805), ("src/fmt.mli", 164, 5805, 5845), 0), 0, Tag1 ("Fmt", 36)), 0); (("parens", 1147), ((Tag1 (0, (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -401)], (0)), 100000000, 0, -402), (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -401)], (0)), 100000000, 0, -400), 0), 100000000, 0, -399), 0, (("src/fmt.mli", 169, 5944, 5944), ("src/fmt.mli", 169, 5944, 5969), 0), 0, Tag1 ("Fmt", 37)), 0); (("brackets", 1148), ((Tag1 (0, (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -397)], (0)), 100000000, 0, -398), (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -397)], (0)), 100000000, 0, -396), 0), 100000000, 0, -395), 0, (("src/fmt.mli", 172, 6024, 6024), ("src/fmt.mli", 172, 6024, 6051), 0), 0, Tag1 ("Fmt", 38)), 0); (("braces", 1149), ((Tag1 (0, (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -393)], (0)), 100000000, 0, -394), (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -393)], (0)), 100000000, 0, -392), 0), 100000000, 0, -391), 0, (("src/fmt.mli", 175, 6108, 6108), ("src/fmt.mli", 175, 6108, 6133), 0), 0, Tag1 ("Fmt", 39)), 0); (("quote", 1150), ((Tag1 (Tag1 ("mark"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -390)], (0)), 100000000, 0, -389), (Tag1 (0, (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -387)], (0)), 100000000, 0, -388), (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -387)], (0)), 100000000, 0, -386), 0), 100000000, 0, -385), 0), 100000000, 0, -384), 0, (("src/fmt.mli", 178, 6188, 6188), ("src/fmt.mli", 178, 6188, 6228), 0), 0, Tag1 ("Fmt", 40)), 0); (("id", 1151), ((Tag1 (0, ((("a")), 100000000, 0, -383), ((("a")), 100000000, 0, -383), 0), 100000000, 0, -382), 0, (("src/fmt.mli", 185, 6460, 6460), ("src/fmt.mli", 185, 6460, 6477), 0), 0, Tag1 ("Fmt", 41)), 0); (("field", 1152), ((Tag1 (Tag1 ("label"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -381)], (0)), 100000000, 0, -380)], (0)), 100000000, 0, -379), (Tag1 (Tag1 ("sep"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -378)], (0)), 100000000, 0, -377)], (0)), 100000000, 0, -376), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -375), (Tag1 (0, (Tag1 (0, ((("b")), 100000000, 0, -371), ((("a")), 100000000, 0, -373), 0), 100000000, 0, -374), (Tag1 (0, (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -373)], (0)), 100000000, 0, -372), (Tag3 ((("t", 1125)), [((("b")), 100000000, 0, -371)], (0)), 100000000, 0, -370), 0), 100000000, 0, -369), 0), 100000000, 0, -368), 0), 100000000, 0, -367), 0), 100000000, 0, -366), 0), 100000000, 0, -365), 0, (("src/fmt.mli", 188, 6505, 6505), ("src/fmt.mli", 189, 6517, 6589), 0), 0, Tag1 ("Fmt", 42)), 0); (("record", 1153), ((Tag1 (Tag1 ("sep"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -364)], (0)), 100000000, 0, -363)], (0)), 100000000, 0, -362), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -359)], (0)), 100000000, 0, -361)], (0)), 100000000, 0, -360), (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -359)], (0)), 100000000, 0, -358), 0), 100000000, 0, -357), 0), 100000000, 0, -356), 0, (("src/fmt.mli", 194, 6801, 6801), ("src/fmt.mli", 194, 6801, 6846), 0), 0, Tag1 ("Fmt", 43)), 0); (("bool", 1154), ((Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -355)], (0)), 100000000, 0, -354), 0, (("src/fmt.mli", 206, 7265, 7265), ("src/fmt.mli", 206, 7265, 7282), 0), 0, Tag1 ("Fmt", 44)), 0); (("int", 1155), ((Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -353)], (0)), 100000000, 0, -352), 0, (("src/fmt.mli", 209, 7326, 7326), ("src/fmt.mli", 209, 7326, 7341), 0), 0, Tag1 ("Fmt", 45)), 0); (("nativeint", 1156), ((Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -351)], (0)), 100000000, 0, -350), 0, (("src/fmt.mli", 212, 7378, 7378), ("src/fmt.mli", 212, 7378, 7405), 0), 0, Tag1 ("Fmt", 46)), 0); (("int32", 1157), ((Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -349)], (0)), 100000000, 0, -348), 0, (("src/fmt.mli", 215, 7449, 7449), ("src/fmt.mli", 215, 7449, 7468), 0), 0, Tag1 ("Fmt", 47)), 0); (("int64", 1158), ((Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -347)], (0)), 100000000, 0, -346), 0, (("src/fmt.mli", 218, 7508, 7508), ("src/fmt.mli", 218, 7508, 7527), 0), 0, Tag1 ("Fmt", 48)), 0); (("uint", 1159), ((Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -345)], (0)), 100000000, 0, -344), 0, (("src/fmt.mli", 221, 7567, 7567), ("src/fmt.mli", 221, 7567, 7583), 0), 0, Tag1 ("Fmt", 49)), 0); (("unativeint", 1160), ((Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -343)], (0)), 100000000, 0, -342), 0, (("src/fmt.mli", 224, 7621, 7621), ("src/fmt.mli", 224, 7621, 7649), 0), 0, Tag1 ("Fmt", 50)), 0); (("uint32", 1161), ((Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("int32", 12)), 0, (0)), 100000000, 0, -341)], (0)), 100000000, 0, -340), 0, (("src/fmt.mli", 227, 7694, 7694), ("src/fmt.mli", 227, 7694, 7714), 0), 0, Tag1 ("Fmt", 51)), 0); (("uint64", 1162), ((Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -339)], (0)), 100000000, 0, -338), 0, (("src/fmt.mli", 230, 7755, 7755), ("src/fmt.mli", 230, 7755, 7775), 0), 0, Tag1 ("Fmt", 52)), 0); (("float", 1163), ((Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -337)], (0)), 100000000, 0, -336), 0, (("src/fmt.mli", 233, 7816, 7816), ("src/fmt.mli", 233, 7816, 7835), 0), 0, Tag1 ("Fmt", 53)), 0); (("float_dfrac", 1164), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -335), (Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -334)], (0)), 100000000, 0, -333), 0), 100000000, 0, -332), 0, (("src/fmt.mli", 236, 7874, 7874), ("src/fmt.mli", 236, 7874, 7906), 0), 0, Tag1 ("Fmt", 54)), 0); (("float_dsig", 1165), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -331), (Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -330)], (0)), 100000000, 0, -329), 0), 100000000, 0, -328), 0, (("src/fmt.mli", 242, 8129, 8129), ("src/fmt.mli", 242, 8129, 8160), 0), 0, Tag1 ("Fmt", 55)), 0); (("char", 1166), ((Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -327)], (0)), 100000000, 0, -326), 0, (("src/fmt.mli", 252, 8530, 8530), ("src/fmt.mli", 252, 8530, 8547), 0), 0, Tag1 ("Fmt", 56)), 0); (("string", 1167), ((Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -325)], (0)), 100000000, 0, -324), 0, (("src/fmt.mli", 255, 8591, 8591), ("src/fmt.mli", 255, 8591, 8612), 0), 0, Tag1 ("Fmt", 57)), 0); (("buffer", 1168), ((Tag3 ((("t", 1125)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Buffer"), "t"), 0, (0)), 100000000, 0, -323)], (0)), 100000000, 0, -322), 0, (("src/fmt.mli", 258, 8660, 8660), ("src/fmt.mli", 258, 8660, 8683), 0), 0, Tag1 ("Fmt", 58)), 0); (("exn", 1169), ((Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -321)], (0)), 100000000, 0, -320), 0, (("src/fmt.mli", 261, 8749, 8749), ("src/fmt.mli", 261, 8749, 8764), 0), 0, Tag1 ("Fmt", 59)), 0); (("exn_backtrace", 1170), ((Tag3 ((("t", 1125)), [(Tag2 ([(Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -318); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Printexc"), "raw_backtrace"), 0, (0)), 100000000, 0, -319)]), 100000000, 0, -317)], (0)), 100000000, 0, -316), 0, (("src/fmt.mli", 264, 8801, 8801), ("src/fmt.mli", 264, 8801, 8853), 0), 0, Tag1 ("Fmt", 60)), 0); (("pair", 1171), ((Tag1 (Tag1 ("sep"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -315)], (0)), 100000000, 0, -314)], (0)), 100000000, 0, -313), (Tag1 (0, (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -309)], (0)), 100000000, 0, -312), (Tag1 (0, (Tag3 ((("t", 1125)), [((("b")), 100000000, 0, -310)], (0)), 100000000, 0, -311), (Tag3 ((("t", 1125)), [(Tag2 ([((("a")), 100000000, 0, -309); ((("b")), 100000000, 0, -310)]), 100000000, 0, -308)], (0)), 100000000, 0, -307), 0), 100000000, 0, -306), 0), 100000000, 0, -305), 0), 100000000, 0, -304), 0, (("src/fmt.mli", 267, 8910, 8910), ("src/fmt.mli", 267, 8910, 8963), 0), 0, Tag1 ("Fmt", 61)), 0); (("option", 1172), ((Tag1 (Tag1 ("none"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -303)], (0)), 100000000, 0, -302)], (0)), 100000000, 0, -301), (Tag1 (0, (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -299)], (0)), 100000000, 0, -300), (Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -299)], (0)), 100000000, 0, -298)], (0)), 100000000, 0, -297), 0), 100000000, 0, -296), 0), 100000000, 0, -295), 0, (("src/fmt.mli", 272, 9145, 9145), ("src/fmt.mli", 272, 9145, 9193), 0), 0, Tag1 ("Fmt", 62)), 0); (("result", 1173), ((Tag1 (("ok"), (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -291)], (0)), 100000000, 0, -294), (Tag1 (("error"), (Tag3 ((("t", 1125)), [((("b")), 100000000, 0, -292)], (0)), 100000000, 0, -293), (Tag3 ((("t", 1125)), [(Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [((("a")), 100000000, 0, -291); ((("b")), 100000000, 0, -292)], (0)), 100000000, 0, -290)], (0)), 100000000, 0, -289), 0), 100000000, 0, -288), 0), 100000000, 0, -287), 0, (("src/fmt.mli", 276, 9326, 9326), ("src/fmt.mli", 276, 9326, 9381), 0), 0, Tag1 ("Fmt", 63)), 0); (("list", 1174), ((Tag1 (Tag1 ("sep"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -286)], (0)), 100000000, 0, -285)], (0)), 100000000, 0, -284), (Tag1 (0, (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -282)], (0)), 100000000, 0, -283), (Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -282)], (0)), 100000000, 0, -281)], (0)), 100000000, 0, -280), 0), 100000000, 0, -279), 0), 100000000, 0, -278), 0, (("src/fmt.mli", 280, 9500, 9500), ("src/fmt.mli", 280, 9500, 9543), 0), 0, Tag1 ("Fmt", 64)), 0); (("array", 1175), ((Tag1 (Tag1 ("sep"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -277)], (0)), 100000000, 0, -276)], (0)), 100000000, 0, -275), (Tag1 (0, (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -273)], (0)), 100000000, 0, -274), (Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -273)], (0)), 100000000, 0, -272)], (0)), 100000000, 0, -271), 0), 100000000, 0, -270), 0), 100000000, 0, -269), 0, (("src/fmt.mli", 285, 9751, 9751), ("src/fmt.mli", 285, 9751, 9796), 0), 0, Tag1 ("Fmt", 65)), 0); (("seq", 1176), ((Tag1 (Tag1 ("sep"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -268)], (0)), 100000000, 0, -267)], (0)), 100000000, 0, -266), (Tag1 (0, (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -264)], (0)), 100000000, 0, -265), (Tag3 ((("t", 1125)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [((("a")), 100000000, 0, -264)], (0)), 100000000, 0, -263)], (0)), 100000000, 0, -262), 0), 100000000, 0, -261), 0), 100000000, 0, -260), 0, (("src/fmt.mli", 290, 10008, 10008), ("src/fmt.mli", 290, 10008, 10051), 0), 0, Tag1 ("Fmt", 66)), 0); (("hashtbl", 1177), ((Tag1 (Tag1 ("sep"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -259)], (0)), 100000000, 0, -258)], (0)), 100000000, 0, -257), (Tag1 (0, (Tag3 ((("t", 1125)), [(Tag2 ([((("a")), 100000000, 0, -253); ((("b")), 100000000, 0, -254)]), 100000000, 0, -256)], (0)), 100000000, 0, -255), (Tag3 ((("t", 1125)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Hashtbl"), "t"), [((("a")), 100000000, 0, -253); ((("b")), 100000000, 0, -254)], (0)), 100000000, 0, -252)], (0)), 100000000, 0, -251), 0), 100000000, 0, -250), 0), 100000000, 0, -249), 0, (("src/fmt.mli", 295, 10270, 10270), ("src/fmt.mli", 295, 10270, 10334), 0), 0, Tag1 ("Fmt", 67)), 0); (("queue", 1178), ((Tag1 (Tag1 ("sep"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -248)], (0)), 100000000, 0, -247)], (0)), 100000000, 0, -246), (Tag1 (0, (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -244)], (0)), 100000000, 0, -245), (Tag3 ((("t", 1125)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Queue"), "t"), [((("a")), 100000000, 0, -244)], (0)), 100000000, 0, -243)], (0)), 100000000, 0, -242), 0), 100000000, 0, -241), 0), 100000000, 0, -240), 0, (("src/fmt.mli", 303, 10694, 10694), ("src/fmt.mli", 303, 10694, 10741), 0), 0, Tag1 ("Fmt", 68)), 0); (("stack", 1179), ((Tag1 (Tag1 ("sep"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -239)], (0)), 100000000, 0, -238)], (0)), 100000000, 0, -237), (Tag1 (0, (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -235)], (0)), 100000000, 0, -236), (Tag3 ((("t", 1125)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Stack"), "t"), [((("a")), 100000000, 0, -235)], (0)), 100000000, 0, -234)], (0)), 100000000, 0, -233), 0), 100000000, 0, -232), 0), 100000000, 0, -231), 0, (("src/fmt.mli", 309, 10979, 10979), ("src/fmt.mli", 309, 10979, 11026), 0), 0, Tag1 ("Fmt", 69)), 0); Tag3 (("Dump", 1180), 0, (Tag1 ([(("signal", 1219), ((Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -739)], (0)), 100000000, 0, -738), 0, (("src/fmt.mli", 324, 11541, 11543), ("src/fmt.mli", 324, 11541, 11561), 0), 0, Tag1 ("Fmt", 70)), 0); (("uchar", 1220), ((Tag3 ((("t", 1125)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Uchar"), "t"), 0, (0)), 100000000, 0, -737)], (0)), 100000000, 0, -736), 0, (("src/fmt.mli", 330, 11789, 11791), ("src/fmt.mli", 330, 11789, 11812), 0), 0, Tag1 ("Fmt", 71)), 0); (("string", 1221), ((Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -735)], (0)), 100000000, 0, -734), 0, (("src/fmt.mli", 336, 12038, 12040), ("src/fmt.mli", 336, 12038, 12061), 0), 0, Tag1 ("Fmt", 72)), 0); (("pair", 1222), ((Tag1 (0, (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -730)], (0)), 100000000, 0, -733), (Tag1 (0, (Tag3 ((("t", 1125)), [((("b")), 100000000, 0, -731)], (0)), 100000000, 0, -732), (Tag3 ((("t", 1125)), [(Tag2 ([((("a")), 100000000, 0, -730); ((("b")), 100000000, 0, -731)]), 100000000, 0, -729)], (0)), 100000000, 0, -728), 0), 100000000, 0, -727), 0), 100000000, 0, -726), 0, (("src/fmt.mli", 339, 12099, 12101), ("src/fmt.mli", 339, 12099, 12139), 0), 0, Tag1 ("Fmt", 73)), 0); (("option", 1223), ((Tag1 (0, (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -724)], (0)), 100000000, 0, -725), (Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -724)], (0)), 100000000, 0, -723)], (0)), 100000000, 0, -722), 0), 100000000, 0, -721), 0, (("src/fmt.mli", 343, 12264, 12266), ("src/fmt.mli", 343, 12264, 12298), 0), 0, Tag1 ("Fmt", 74)), 0); (("result", 1224), ((Tag1 (("ok"), (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -717)], (0)), 100000000, 0, -720), (Tag1 (("error"), (Tag3 ((("t", 1125)), [((("b")), 100000000, 0, -718)], (0)), 100000000, 0, -719), (Tag3 ((("t", 1125)), [(Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [((("a")), 100000000, 0, -717); ((("b")), 100000000, 0, -718)], (0)), 100000000, 0, -716)], (0)), 100000000, 0, -715), 0), 100000000, 0, -714), 0), 100000000, 0, -713), 0, (("src/fmt.mli", 347, 12413, 12415), ("src/fmt.mli", 347, 12413, 12470), 0), 0, Tag1 ("Fmt", 75)), 0); (("list", 1225), ((Tag1 (0, (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -711)], (0)), 100000000, 0, -712), (Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -711)], (0)), 100000000, 0, -710)], (0)), 100000000, 0, -709), 0), 100000000, 0, -708), 0, (("src/fmt.mli", 352, 12638, 12640), ("src/fmt.mli", 352, 12638, 12668), 0), 0, Tag1 ("Fmt", 76)), 0); (("array", 1226), ((Tag1 (0, (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -706)], (0)), 100000000, 0, -707), (Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -706)], (0)), 100000000, 0, -705)], (0)), 100000000, 0, -704), 0), 100000000, 0, -703), 0, (("src/fmt.mli", 356, 12755, 12757), ("src/fmt.mli", 356, 12755, 12787), 0), 0, Tag1 ("Fmt", 77)), 0); (("seq", 1227), ((Tag1 (0, (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -701)], (0)), 100000000, 0, -702), (Tag3 ((("t", 1125)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [((("a")), 100000000, 0, -701)], (0)), 100000000, 0, -700)], (0)), 100000000, 0, -699), 0), 100000000, 0, -698), 0, (("src/fmt.mli", 360, 12877, 12879), ("src/fmt.mli", 360, 12877, 12907), 0), 0, Tag1 ("Fmt", 78)), 0); (("hashtbl", 1228), ((Tag1 (0, (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -694)], (0)), 100000000, 0, -697), (Tag1 (0, (Tag3 ((("t", 1125)), [((("b")), 100000000, 0, -695)], (0)), 100000000, 0, -696), (Tag3 ((("t", 1125)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Hashtbl"), "t"), [((("a")), 100000000, 0, -694); ((("b")), 100000000, 0, -695)], (0)), 100000000, 0, -693)], (0)), 100000000, 0, -692), 0), 100000000, 0, -691), 0), 100000000, 0, -690), 0, (("src/fmt.mli", 364, 13001, 13003), ("src/fmt.mli", 364, 13001, 13053), 0), 0, Tag1 ("Fmt", 79)), 0); (("queue", 1229), ((Tag1 (0, (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -688)], (0)), 100000000, 0, -689), (Tag3 ((("t", 1125)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Queue"), "t"), [((("a")), 100000000, 0, -688)], (0)), 100000000, 0, -687)], (0)), 100000000, 0, -686), 0), 100000000, 0, -685), 0, (("src/fmt.mli", 371, 13352, 13354), ("src/fmt.mli", 371, 13352, 13386), 0), 0, Tag1 ("Fmt", 80)), 0); (("stack", 1230), ((Tag1 (0, (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -683)], (0)), 100000000, 0, -684), (Tag3 ((("t", 1125)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Stack"), "t"), [((("a")), 100000000, 0, -683)], (0)), 100000000, 0, -682)], (0)), 100000000, 0, -681), 0), 100000000, 0, -680), 0, (("src/fmt.mli", 376, 13546, 13548), ("src/fmt.mli", 376, 13546, 13580), 0), 0, Tag1 ("Fmt", 81)), 0); (("field", 1231), ((Tag1 (Tag1 ("label"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -679)], (0)), 100000000, 0, -678)], (0)), 100000000, 0, -677), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -676), (Tag1 (0, (Tag1 (0, ((("b")), 100000000, 0, -672), ((("a")), 100000000, 0, -674), 0), 100000000, 0, -675), (Tag1 (0, (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -674)], (0)), 100000000, 0, -673), (Tag3 ((("t", 1125)), [((("b")), 100000000, 0, -672)], (0)), 100000000, 0, -671), 0), 100000000, 0, -670), 0), 100000000, 0, -669), 0), 100000000, 0, -668), 0), 100000000, 0, -667), 0, (("src/fmt.mli", 382, 13755, 13757), ("src/fmt.mli", 382, 13755, 13824), 0), 0, Tag1 ("Fmt", 82)), 0); (("record", 1232), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -664)], (0)), 100000000, 0, -666)], (0)), 100000000, 0, -665), (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -664)], (0)), 100000000, 0, -663), 0), 100000000, 0, -662), 0, (("src/fmt.mli", 387, 14010, 14012), ("src/fmt.mli", 387, 14010, 14042), 0), 0, Tag1 ("Fmt", 83)), 0); (("iter", 1233), ((Tag1 (0, (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -655), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -661), 0), 100000000, 0, -660), (Tag1 (0, ((("b")), 100000000, 0, -653), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -659), 0), 100000000, 0, -658), 0), 100000000, 0, -657), (Tag1 (0, (Tag3 ((("t", 1125)), [((("b")), 100000000, 0, -653)], (0)), 100000000, 0, -656), (Tag1 (0, (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -655)], (0)), 100000000, 0, -654), (Tag3 ((("t", 1125)), [((("b")), 100000000, 0, -653)], (0)), 100000000, 0, -652), 0), 100000000, 0, -651), 0), 100000000, 0, -650), 0), 100000000, 0, -649), 0, (("src/fmt.mli", 397, 14347, 14349), ("src/fmt.mli", 397, 14347, 14412), 0), 0, Tag1 ("Fmt", 84)), 0); (("iter_bindings", 1234), ((Tag1 (0, (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -641), (Tag1 (0, ((("b")), 100000000, 0, -639), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -648), 0), 100000000, 0, -647), 0), 100000000, 0, -646), (Tag1 (0, ((("c")), 100000000, 0, -637), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -645), 0), 100000000, 0, -644), 0), 100000000, 0, -643), (Tag1 (0, (Tag3 ((("t", 1125)), [((("c")), 100000000, 0, -637)], (0)), 100000000, 0, -642), (Tag1 (0, (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -641)], (0)), 100000000, 0, -640), (Tag1 (0, (Tag3 ((("t", 1125)), [((("b")), 100000000, 0, -639)], (0)), 100000000, 0, -638), (Tag3 ((("t", 1125)), [((("c")), 100000000, 0, -637)], (0)), 100000000, 0, -636), 0), 100000000, 0, -635), 0), 100000000, 0, -634), 0), 100000000, 0, -633), 0), 100000000, 0, -632), 0, (("src/fmt.mli", 402, 14594, 14596), ("src/fmt.mli", 403, 14667, 14686), 0), 0, Tag1 ("Fmt", 85)), 0)]), 0, (("src/fmt.mli", 320, 11488, 11488), ("src/fmt.mli", 408, 14899, 14902), 0), Tag1 ("Fmt", 86)), 0, 0); (("si_size", 1181), ((Tag1 (("scale"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -230), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -229), (Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -228)], (0)), 100000000, 0, -227), 0), 100000000, 0, -226), 0), 100000000, 0, -225), 0, (("src/fmt.mli", 412, 14931, 14931), ("src/fmt.mli", 412, 14931, 14973), 0), 0, Tag1 ("Fmt", 87)), 0); (("byte_size", 1182), ((Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -224)], (0)), 100000000, 0, -223), 0, (("src/fmt.mli", 430, 15789, 15789), ("src/fmt.mli", 430, 15789, 15810), 0), 0, Tag1 ("Fmt", 88)), 0); (("bi_byte_size", 1183), ((Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -222)], (0)), 100000000, 0, -221), 0, (("src/fmt.mli", 433, 15858, 15858), ("src/fmt.mli", 433, 15858, 15882), 0), 0, Tag1 ("Fmt", 89)), 0); (("uint64_ns_span", 1184), ((Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("int64", 13)), 0, (0)), 100000000, 0, -220)], (0)), 100000000, 0, -219), 0, (("src/fmt.mli", 438, 16058, 16058), ("src/fmt.mli", 438, 16058, 16086), 0), 0, Tag1 ("Fmt", 90)), 0); Tag1 (("vec", 1185), ([((("a")), 100000000, 0, -217)], 1, 0, 1, ((Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -215); (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -218), ((("a")), 100000000, 0, -217), 0), 100000000, 0, -216)]), 100000000, 0, -214)), [25], [0], 0, 0, (("src/fmt.mli", 451, 16672, 16672), ("src/fmt.mli", 451, 16672, 16703), 0), 0, 0, 0, Tag1 ("Fmt", 91)), 1, 0); (("on_bytes", 1186), ((Tag1 (0, (Tag3 ((("t", 1125)), [(Tag3 ((("vec", 1185)), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -213)], (0)), 100000000, 0, -212)], (0)), 100000000, 0, -211), (Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -210)], (0)), 100000000, 0, -209), 0), 100000000, 0, -208), 0, (("src/fmt.mli", 455, 16827, 16827), ("src/fmt.mli", 455, 16827, 16863), 0), 0, Tag1 ("Fmt", 92)), 0); (("on_string", 1187), ((Tag1 (0, (Tag3 ((("t", 1125)), [(Tag3 ((("vec", 1185)), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -207)], (0)), 100000000, 0, -206)], (0)), 100000000, 0, -205), (Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -204)], (0)), 100000000, 0, -203), 0), 100000000, 0, -202), 0, (("src/fmt.mli", 458, 16930, 16930), ("src/fmt.mli", 458, 16930, 16968), 0), 0, Tag1 ("Fmt", 93)), 0); (("ascii", 1188), ((Tag1 (Tag1 ("w"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -201)], (0)), 100000000, 0, -200), (Tag1 (Tag1 ("subst"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -199)], (0)), 100000000, 0, -198)], (0)), 100000000, 0, -197), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -196), (Tag3 ((("t", 1125)), [(Tag3 ((("vec", 1185)), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -195)], (0)), 100000000, 0, -194)], (0)), 100000000, 0, -193), 0), 100000000, 0, -192), 0), 100000000, 0, -191), 0), 100000000, 0, -190), 0, (("src/fmt.mli", 461, 17038, 17038), ("src/fmt.mli", 461, 17038, 17095), 0), 0, Tag1 ("Fmt", 94)), 0); (("octets", 1189), ((Tag1 (Tag1 ("w"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -189)], (0)), 100000000, 0, -188), (Tag1 (Tag1 ("sep"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -187)], (0)), 100000000, 0, -186)], (0)), 100000000, 0, -185), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -184), (Tag3 ((("t", 1125)), [(Tag3 ((("vec", 1185)), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -183)], (0)), 100000000, 0, -182)], (0)), 100000000, 0, -181), 0), 100000000, 0, -180), 0), 100000000, 0, -179), 0), 100000000, 0, -178), 0, (("src/fmt.mli", 468, 17431, 17431), ("src/fmt.mli", 468, 17431, 17487), 0), 0, Tag1 ("Fmt", 95)), 0); (("addresses", 1190), ((Tag1 (Tag1 ("addr"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -177)], (0)), 100000000, 0, -176)], (0)), 100000000, 0, -175), (Tag1 (Tag1 ("w"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -174)], (0)), 100000000, 0, -173), (Tag1 (0, (Tag3 ((("t", 1125)), [(Tag3 ((("vec", 1185)), [((("a")), 100000000, 0, -170)], (0)), 100000000, 0, -172)], (0)), 100000000, 0, -171), (Tag3 ((("t", 1125)), [(Tag3 ((("vec", 1185)), [((("a")), 100000000, 0, -170)], (0)), 100000000, 0, -169)], (0)), 100000000, 0, -168), 0), 100000000, 0, -167), 0), 100000000, 0, -166), 0), 100000000, 0, -165), 0, (("src/fmt.mli", 475, 17815, 17815), ("src/fmt.mli", 475, 17815, 17876), 0), 0, Tag1 ("Fmt", 96)), 0); (("hex", 1191), ((Tag1 (Tag1 ("w"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -164)], (0)), 100000000, 0, -163), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -162), (Tag3 ((("t", 1125)), [(Tag3 ((("vec", 1185)), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -161)], (0)), 100000000, 0, -160)], (0)), 100000000, 0, -159), 0), 100000000, 0, -158), 0), 100000000, 0, -157), 0, (("src/fmt.mli", 481, 18092, 18092), ("src/fmt.mli", 481, 18092, 18130), 0), 0, Tag1 ("Fmt", 97)), 0); (("words", 1192), ((Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -156)], (0)), 100000000, 0, -155), 0, (("src/fmt.mli", 498, 18833, 18833), ("src/fmt.mli", 498, 18833, 18853), 0), 0, Tag1 ("Fmt", 98)), 0); (("paragraphs", 1193), ((Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -154)], (0)), 100000000, 0, -153), 0, (("src/fmt.mli", 503, 19018, 19018), ("src/fmt.mli", 503, 19018, 19043), 0), 0, Tag1 ("Fmt", 99)), 0); (("text", 1194), ((Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -152)], (0)), 100000000, 0, -151), 0, (("src/fmt.mli", 509, 19323, 19323), ("src/fmt.mli", 509, 19323, 19342), 0), 0, Tag1 ("Fmt", 100)), 0); (("lines", 1195), ((Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -150)], (0)), 100000000, 0, -149), 0, (("src/fmt.mli", 513, 19497, 19497), ("src/fmt.mli", 513, 19497, 19517), 0), 0, Tag1 ("Fmt", 101)), 0); (("truncated", 1196), ((Tag1 (("max"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -148), (Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -147)], (0)), 100000000, 0, -146), 0), 100000000, 0, -145), 0, (("src/fmt.mli", 517, 19639, 19639), ("src/fmt.mli", 517, 19639, 19674), 0), 0, Tag1 ("Fmt", 102)), 0); (("text_loc", 1197), ((Tag3 ((("t", 1125)), [(Tag2 ([(Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -140); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -141)]), 100000000, 0, -139); (Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -143); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -144)]), 100000000, 0, -142)]), 100000000, 0, -138)], (0)), 100000000, 0, -137), 0, (("src/fmt.mli", 522, 19868, 19868), ("src/fmt.mli", 522, 19868, 19912), 0), 0, Tag1 ("Fmt", 103)), 0); (("one_of", 1198), ((Tag1 (Tag1 ("empty"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -136)], (0)), 100000000, 0, -135)], (0)), 100000000, 0, -134), (Tag1 (0, (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -132)], (0)), 100000000, 0, -133), (Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -132)], (0)), 100000000, 0, -131)], (0)), 100000000, 0, -130), 0), 100000000, 0, -129), 0), 100000000, 0, -128), 0, (("src/fmt.mli", 529, 20094, 20094), ("src/fmt.mli", 529, 20094, 20141), 0), 0, Tag1 ("Fmt", 104)), 0); (("did_you_mean", 1199), ((Tag1 (Tag1 ("pre"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -127)], (0)), 100000000, 0, -126)], (0)), 100000000, 0, -125), (Tag1 (Tag1 ("post"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -124)], (0)), 100000000, 0, -123)], (0)), 100000000, 0, -122), (Tag1 (("kind"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -121), (Tag1 (0, (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -118)], (0)), 100000000, 0, -120), (Tag3 ((("t", 1125)), [(Tag2 ([((("a")), 100000000, 0, -118); (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -118)], (0)), 100000000, 0, -119)]), 100000000, 0, -117)], (0)), 100000000, 0, -116), 0), 100000000, 0, -115), 0), 100000000, 0, -114), 0), 100000000, 0, -113), 0), 100000000, 0, -112), 0, (("src/fmt.mli", 537, 20455, 20455), ("src/fmt.mli", 538, 20474, 20546), 0), 0, Tag1 ("Fmt", 105)), 0); (("if_utf_8", 1200), ((Tag1 (0, (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -109)], (0)), 100000000, 0, -111), (Tag1 (0, (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -109)], (0)), 100000000, 0, -110), (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -109)], (0)), 100000000, 0, -108), 0), 100000000, 0, -107), 0), 100000000, 0, -106), 0, (("src/fmt.mli", 554, 21200, 21200), ("src/fmt.mli", 554, 21200, 21235), 0), 0, Tag1 ("Fmt", 106)), 0); (("utf_8", 1201), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -105), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -104), 0), 100000000, 0, -103), 0, (("src/fmt.mli", 560, 21359, 21359), ("src/fmt.mli", 560, 21359, 21395), 0), 0, Tag1 ("Fmt", 107)), 0); (("set_utf_8", 1202), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -102), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -101), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -100), 0), 100000000, 0, -99), 0), 100000000, 0, -98), 0, (("src/fmt.mli", 564, 21527, 21527), ("src/fmt.mli", 564, 21527, 21575), 0), 0, Tag1 ("Fmt", 108)), 0); Tag1 (("color", 1203), (0, 0, 0, 1, ((Tag8 (([("Black", (0)); ("Blue", (0)); ("Cyan", (0)); ("Green", (0)); ("Magenta", (0)); ("Red", (0)); ("White", (0)); ("Yellow", (0))], (0, 100000000, 0, -97), 1, 0, 0)), 100000000, 0, -96)), 0, 0, 0, 0, (("src/fmt.mli", 573, 21803, 21803), ("src/fmt.mli", 574, 21816, 21890), 0), 0, 1, 0, Tag1 ("Fmt", 109)), 1, 0); Tag1 (("style", 1204), (0, 0, 0, 1, ((Tag8 (([("Bg", (((Tag8 (([("Black", (0)); ("Blue", (0)); ("Cyan", (0)); ("Green", (0)); ("Hi", (((Tag3 ((("color", 1203)), 0, (0)), 100000000, 0, -95)))); ("Magenta", (0)); ("Red", (0)); ("White", (0)); ("Yellow", (0))], (0, 100000000, 0, -94), 1, 0, 0)), 100000000, 0, -93)))); ("Black", (0)); ("Blue", (0)); ("Bold", (0)); ("Cyan", (0)); ("Faint", (0)); ("Fg", (((Tag8 (([("Black", (0)); ("Blue", (0)); ("Cyan", (0)); ("Green", (0)); ("Hi", (((Tag3 ((("color", 1203)), 0, (0)), 100000000, 0, -92)))); ("Magenta", (0)); ("Red", (0)); ("White", (0)); ("Yellow", (0))], (0, 100000000, 0, -91), 1, 0, 0)), 100000000, 0, -90)))); ("Green", (0)); ("Italic", (0)); ("Magenta", (0)); ("None", (0)); ("Red", (0)); ("Reverse", (0)); ("Underline", (0)); ("White", (0)); ("Yellow", (0))], (0, 100000000, 0, -89), 1, 0, 0)), 100000000, 0, -88)), 0, 0, 0, 0, (("src/fmt.mli", 577, 21920, 21920), ("src/fmt.mli", 581, 22067, 22096), 0), 0, 0, 0, Tag1 ("Fmt", 110)), 1, 0); (("styled", 1205), ((Tag1 (0, (Tag3 ((("style", 1204)), 0, (0)), 100000000, 0, -87), (Tag1 (0, (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -85)], (0)), 100000000, 0, -86), (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -85)], (0)), 100000000, 0, -84), 0), 100000000, 0, -83), 0), 100000000, 0, -82), 0, (("src/fmt.mli", 592, 22511, 22511), ("src/fmt.mli", 592, 22511, 22545), 0), 0, Tag1 ("Fmt", 111)), 0); Tag1 (("style_renderer", 1206), (0, 0, 0, 1, ((Tag8 (([("Ansi_tty", (0)); ("None", (0))], (0, 100000000, 0, -81), 1, 0, 0)), 100000000, 0, -80)), 0, 0, 0, 0, (("src/fmt.mli", 597, 22643, 22643), ("src/fmt.mli", 597, 22643, 22686), 0), 0, 1, 0, Tag1 ("Fmt", 112)), 1, 0); (("style_renderer", 1207), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -79), (Tag3 ((("style_renderer", 1206)), 0, (0)), 100000000, 0, -78), 0), 100000000, 0, -77), 0, (("src/fmt.mli", 605, 22937, 22937), ("src/fmt.mli", 605, 22937, 22993), 0), 0, Tag1 ("Fmt", 113)), 0); (("set_style_renderer", 1208), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -76), (Tag1 (0, (Tag3 ((("style_renderer", 1206)), 0, (0)), 100000000, 0, -75), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -74), 0), 100000000, 0, -73), 0), 100000000, 0, -72), 0, (("src/fmt.mli", 610, 23142, 23142), ("src/fmt.mli", 610, 23142, 23209), 0), 0, Tag1 ("Fmt", 114)), 0); (("of_to_string", 1209), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -69), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -71), 0), 100000000, 0, -70), (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -69)], (0)), 100000000, 0, -68), 0), 100000000, 0, -67), 0, (("src/fmt.mli", 618, 23457, 23457), ("src/fmt.mli", 618, 23457, 23498), 0), 0, Tag1 ("Fmt", 115)), 0); (("to_to_string", 1210), ((Tag1 (0, (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -65)], (0)), 100000000, 0, -66), (Tag1 (0, ((("a")), 100000000, 0, -65), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -64), 0), 100000000, 0, -63), 0), 100000000, 0, -62), 0, (("src/fmt.mli", 621, 23553, 23553), ("src/fmt.mli", 621, 23553, 23592), 0), 0, Tag1 ("Fmt", 116)), 0); (("strf", 1211), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format4"), [((("a")), 100000000, 0, -57); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -59); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -60); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -61)], (0)), 100000000, 0, -58), ((("a")), 100000000, 0, -57), 0), 100000000, 0, -56), 0, (("src/fmt.mli", 626, 23680, 23680), ("src/fmt.mli", 627, 23742, 23785), 0), [(("ocaml.deprecated", (("src/fmt.mli", 627, 23742, 23745), ("src/fmt.mli", 627, 23742, 23761), 0)), ([([(Tag1 (Tag2 ("use Fmt.str instead.", (("src/fmt.mli", 627, 23742, 23763), ("src/fmt.mli", 627, 23742, 23783), 0), 0)), (("src/fmt.mli", 627, 23742, 23762), ("src/fmt.mli", 627, 23742, 23784), 0), 0, 0)], (("src/fmt.mli", 627, 23742, 23762), ("src/fmt.mli", 627, 23742, 23784), 0))]), (("src/fmt.mli", 627, 23742, 23742), ("src/fmt.mli", 627, 23742, 23785), 0))], Tag1 ("Fmt", 117)), 0); (("kstrf", 1212), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -55), ((("a")), 100000000, 0, -53), 0), 100000000, 0, -54), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format4"), [((("b")), 100000000, 0, -49); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -51); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -52); ((("a")), 100000000, 0, -53)], (0)), 100000000, 0, -50), ((("b")), 100000000, 0, -49), 0), 100000000, 0, -48), 0), 100000000, 0, -47), 0, (("src/fmt.mli", 630, 23826, 23826), ("src/fmt.mli", 631, 23903, 23947), 0), [(("ocaml.deprecated", (("src/fmt.mli", 631, 23903, 23906), ("src/fmt.mli", 631, 23903, 23922), 0)), ([([(Tag1 (Tag2 ("use Fmt.kstr instead.", (("src/fmt.mli", 631, 23903, 23924), ("src/fmt.mli", 631, 23903, 23945), 0), 0)), (("src/fmt.mli", 631, 23903, 23923), ("src/fmt.mli", 631, 23903, 23946), 0), 0, 0)], (("src/fmt.mli", 631, 23903, 23923), ("src/fmt.mli", 631, 23903, 23946), 0))]), (("src/fmt.mli", 631, 23903, 23903), ("src/fmt.mli", 631, 23903, 23947), 0))], Tag1 ("Fmt", 118)), 0); (("strf_like", 1213), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -46), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format4"), [((("a")), 100000000, 0, -41); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -43); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -44); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -45)], (0)), 100000000, 0, -42), ((("a")), 100000000, 0, -41), 0), 100000000, 0, -40), 0), 100000000, 0, -39), 0, (("src/fmt.mli", 634, 23989, 23989), ("src/fmt.mli", 636, 24078, 24126), 0), [(("ocaml.deprecated", (("src/fmt.mli", 636, 24078, 24081), ("src/fmt.mli", 636, 24078, 24097), 0)), ([([(Tag1 (Tag2 ("use Fmt.str_like instead.", (("src/fmt.mli", 636, 24078, 24099), ("src/fmt.mli", 636, 24078, 24124), 0), 0)), (("src/fmt.mli", 636, 24078, 24098), ("src/fmt.mli", 636, 24078, 24125), 0), 0, 0)], (("src/fmt.mli", 636, 24078, 24098), ("src/fmt.mli", 636, 24078, 24125), 0))]), (("src/fmt.mli", 636, 24078, 24078), ("src/fmt.mli", 636, 24078, 24126), 0))], Tag1 ("Fmt", 119)), 0); (("always", 1214), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -36); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -37); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -38)], (0)), 100000000, 0, -35), (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -34)], (0)), 100000000, 0, -33), 0), 100000000, 0, -32), 0, (("src/fmt.mli", 639, 24172, 24172), ("src/fmt.mli", 640, 24238, 24281), 0), [(("ocaml.deprecated", (("src/fmt.mli", 640, 24238, 24241), ("src/fmt.mli", 640, 24238, 24257), 0)), ([([(Tag1 (Tag2 ("use Fmt.any instead.", (("src/fmt.mli", 640, 24238, 24259), ("src/fmt.mli", 640, 24238, 24279), 0), 0)), (("src/fmt.mli", 640, 24238, 24258), ("src/fmt.mli", 640, 24238, 24280), 0), 0, 0)], (("src/fmt.mli", 640, 24238, 24258), ("src/fmt.mli", 640, 24238, 24280), 0))]), (("src/fmt.mli", 640, 24238, 24238), ("src/fmt.mli", 640, 24238, 24281), 0))], Tag1 ("Fmt", 120)), 0); (("unit", 1215), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -29); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -30); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -31)], (0)), 100000000, 0, -28), (Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -27)], (0)), 100000000, 0, -26), 0), 100000000, 0, -25), 0, (("src/fmt.mli", 643, 24322, 24322), ("src/fmt.mli", 644, 24388, 24431), 0), [(("ocaml.deprecated", (("src/fmt.mli", 644, 24388, 24391), ("src/fmt.mli", 644, 24388, 24407), 0)), ([([(Tag1 (Tag2 ("use Fmt.any instead.", (("src/fmt.mli", 644, 24388, 24409), ("src/fmt.mli", 644, 24388, 24429), 0), 0)), (("src/fmt.mli", 644, 24388, 24408), ("src/fmt.mli", 644, 24388, 24430), 0), 0, 0)], (("src/fmt.mli", 644, 24388, 24408), ("src/fmt.mli", 644, 24388, 24430), 0))]), (("src/fmt.mli", 644, 24388, 24388), ("src/fmt.mli", 644, 24388, 24431), 0))], Tag1 ("Fmt", 121)), 0); (("prefix", 1216), ((Tag1 (0, (Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -24)], (0)), 100000000, 0, -23), (Tag1 (0, (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -21)], (0)), 100000000, 0, -22), (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -21)], (0)), 100000000, 0, -20), 0), 100000000, 0, -19), 0), 100000000, 0, -18), 0, (("src/fmt.mli", 647, 24464, 24464), ("src/fmt.mli", 648, 24500, 24544), 0), [(("ocaml.deprecated", (("src/fmt.mli", 648, 24500, 24503), ("src/fmt.mli", 648, 24500, 24519), 0)), ([([(Tag1 (Tag2 ("use Fmt.(++) instead.", (("src/fmt.mli", 648, 24500, 24521), ("src/fmt.mli", 648, 24500, 24542), 0), 0)), (("src/fmt.mli", 648, 24500, 24520), ("src/fmt.mli", 648, 24500, 24543), 0), 0, 0)], (("src/fmt.mli", 648, 24500, 24520), ("src/fmt.mli", 648, 24500, 24543), 0))]), (("src/fmt.mli", 648, 24500, 24500), ("src/fmt.mli", 648, 24500, 24544), 0))], Tag1 ("Fmt", 122)), 0); (("suffix", 1217), ((Tag1 (0, (Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -17)], (0)), 100000000, 0, -16), (Tag1 (0, (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -14)], (0)), 100000000, 0, -15), (Tag3 ((("t", 1125)), [((("a")), 100000000, 0, -14)], (0)), 100000000, 0, -13), 0), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("src/fmt.mli", 651, 24580, 24580), ("src/fmt.mli", 652, 24616, 24660), 0), [(("ocaml.deprecated", (("src/fmt.mli", 652, 24616, 24619), ("src/fmt.mli", 652, 24616, 24635), 0)), ([([(Tag1 (Tag2 ("use Fmt.(++) instead.", (("src/fmt.mli", 652, 24616, 24637), ("src/fmt.mli", 652, 24616, 24658), 0), 0)), (("src/fmt.mli", 652, 24616, 24636), ("src/fmt.mli", 652, 24616, 24659), 0), 0, 0)], (("src/fmt.mli", 652, 24616, 24636), ("src/fmt.mli", 652, 24616, 24659), 0))]), (("src/fmt.mli", 652, 24616, 24616), ("src/fmt.mli", 652, 24616, 24660), 0))], Tag1 ("Fmt", 123)), 0); (("styled_unit", 1218), ((Tag1 (0, (Tag3 ((("style", 1204)), 0, (0)), 100000000, 0, -10), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -8); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -9)], (0)), 100000000, 0, -6), (Tag3 ((("t", 1125)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5)], (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/fmt.mli", 655, 24696, 24696), ("src/fmt.mli", 657, 24780, 24840), 0), [(("ocaml.deprecated", (("src/fmt.mli", 657, 24780, 24783), ("src/fmt.mli", 657, 24780, 24799), 0)), ([([(Tag1 (Tag2 ("use Fmt.(styled s (any fmt)) instead.", (("src/fmt.mli", 657, 24780, 24801), ("src/fmt.mli", 657, 24780, 24838), 0), 0)), (("src/fmt.mli", 657, 24780, 24800), ("src/fmt.mli", 657, 24780, 24839), 0), 0, 0)], (("src/fmt.mli", 657, 24780, 24800), ("src/fmt.mli", 657, 24780, 24839), 0))]), (("src/fmt.mli", 657, 24780, 24780), ("src/fmt.mli", 657, 24780, 24840), 0))], Tag1 ("Fmt", 124)), 0)], "Fmt", [("Fmt", ("I\228\239\131\1484\017Q\171\227C\149\246\174\149\247")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Stack", ("M\151\017\159\208\222\164[\025\219g\175\160\242T\229")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Queue", ("E\187(\001]E;(\021\n~\137\191\026\\\152")); ("Stdlib__Printexc", ("\217u\168\235\179oi\167\235\255\025\017%d\192s")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
val styled_unit : style -> (unit, Format.formatter, unit) format -> unit t

module type Key = Base__.Hashable_intf.Key
module type Hashable = Base__.Hashable_intf.Hashable
type 'a t =
  'a Base__Hashable_intf.Hashable.t = {
  hash : 'a -> int;
  compare : 'a -> 'a -> int;
  sexp_of_t : 'a -> Base__.Sexp.t;
}
val equal : 'a t -> 'a t -> bool
val poly : 'a t
val of_key : (module Base__Hashable_intf.Key with type t = 'a) -> 'a t
val to_key : 'a t -> (module Base__Hashable_intf.Key with type t = 'a)
val hash_param : int -> int -> 'a -> int("DEBUG:rule", [Tag4 (("Key", 829), (((Tag1 (Tag1 ((Tag2 ("Base__")), "Hashable_intf"), "Key"))), 0, (("src/hashable.mli", 3, 14, 14), ("src/hashable.mli", 3, 14, 49), 0), Tag1 ("Base__Hashable", 0)), 0); Tag4 (("Hashable", 830), (((Tag1 (Tag1 ((Tag2 ("Base__")), "Hashable_intf"), "Hashable"))), 0, (("src/hashable.mli", 4, 50, 50), ("src/hashable.mli", 4, 50, 95), 0), Tag1 ("Base__Hashable", 1)), 0); Tag1 (("t", 831), ([((("a")), 100000000, 0, -29)], 1, [[(("hash", 1516), 0, (Tag1 (0, ((("a")), 100000000, 0, -29), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -31), 0), 100000000, 0, -30), (("src/hashable_intf.ml", 74, 1981, 1987), ("src/hashable_intf.ml", 75, 2004, 2009), 0), 0, Tag1 ("Base__Hashable_intf", 32)); (("compare", 1517), 0, (Tag1 (0, ((("a")), 100000000, 0, -29), (Tag1 (0, ((("a")), 100000000, 0, -29), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -34), 0), 100000000, 0, -33), 0), 100000000, 0, -32), (("src/hashable_intf.ml", 75, 2004, 2010), ("src/hashable_intf.ml", 76, 2036, 2041), 0), 0, Tag1 ("Base__Hashable_intf", 33)); (("sexp_of_t", 1518), 0, (Tag1 (0, ((("a")), 100000000, 0, -29), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -36), 0), 100000000, 0, -35), (("src/hashable_intf.ml", 76, 2036, 2042), ("src/hashable_intf.ml", 76, 2036, 2066), 0), 0, Tag1 ("Base__Hashable_intf", 34))]], 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Base__Hashable_intf")), "Hashable"), "t"), [((("a")), 100000000, 0, -29)], (0)), 100000000, 0, -28)), [46], [0], 0, 0, (("src/hashable_intf.ml", 73, 1951, 1953), ("src/hashable_intf.ml", 77, 2067, 2072), 0), 0, 0, 0, Tag1 ("Base__Hashable_intf", 31)), 1, 0); (("equal", 832), ((Tag1 (0, (Tag3 ((("t", 831)), [((("a")), 100000000, 0, -26)], (0)), 100000000, 0, -27), (Tag1 (0, (Tag3 ((("t", 831)), [((("a")), 100000000, 0, -26)], (0)), 100000000, 0, -25), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -24), 0), 100000000, 0, -23), 0), 100000000, 0, -22), 0, (("src/hashable_intf.ml", 79, 2074, 2076), ("src/hashable_intf.ml", 79, 2074, 2108), 0), 0, Tag1 ("Base__Hashable_intf", 35)), 0); (("poly", 833), ((Tag3 ((("t", 831)), [((("a")), 100000000, 0, -21)], (0)), 100000000, 0, -20), 0, (("src/hashable_intf.ml", 80, 2109, 2111), ("src/hashable_intf.ml", 80, 2109, 2126), 0), 0, Tag1 ("Base__Hashable_intf", 36)), 0); (("of_key", 834), ((Tag1 (0, (Tag11 (Tag1 ((Tag2 ("Base__Hashable_intf")), "Key"), [(("t"), ((("a")), 100000000, 0, -18))]), 100000000, 0, -19), (Tag3 ((("t", 831)), [((("a")), 100000000, 0, -18)], (0)), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("src/hashable_intf.ml", 81, 2127, 2129), ("src/hashable_intf.ml", 81, 2127, 2179), 0), 0, Tag1 ("Base__Hashable_intf", 38)), 0); (("to_key", 835), ((Tag1 (0, (Tag3 ((("t", 831)), [((("a")), 100000000, 0, -14)], (0)), 100000000, 0, -15), (Tag11 (Tag1 ((Tag2 ("Base__Hashable_intf")), "Key"), [(("t"), ((("a")), 100000000, 0, -14))]), 100000000, 0, -13), 0), 100000000, 0, -12), 0, (("src/hashable_intf.ml", 82, 2180, 2182), ("src/hashable_intf.ml", 82, 2180, 2232), 0), 0, Tag1 ("Base__Hashable_intf", 40)), 0); (("hash_param", 836), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -11), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -10), (Tag1 (0, ((("a")), 100000000, 0, -9), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -8), 0), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("src/hashable_intf.ml", 83, 2233, 2235), ("src/hashable_intf.ml", 83, 2233, 2275), 0), 0, Tag1 ("Base__Hashable_intf", 41)), 0); (("hash", 837), ((Tag1 (0, ((("a")), 100000000, 0, -4), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/hashable_intf.ml", 84, 2276, 2278), ("src/hashable_intf.ml", 84, 2276, 2298), 0), 0, Tag1 ("Base__Hashable_intf", 42)), 0)], "Base__Hashable", [("Base__Hashable", ("\027\187\158\245r}\018\193dbq\196\005\170g\252")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__StdLabels", (".\193\n\229\139\017\212C-ZA\\kz-\128")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__MoreLabels", ("\248\232\248\254`<\230\241\161U\193U\1466J\238")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shadow_stdlib", ("\219zi\164\203\158e)\232\221\196\168\138x\142\018")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Base_internalhash_types", ("0\148#2\226\223\018\135\173>!\020\237\017\255\149")); ("Base__Sexp", ("\154\187\171&\209=\153[\236\250!U\174`\190T")); ("Base__Ppx_hash_lib", ("\199\141\178\193\006\209L\007^\020(\131\224sn8")); ("Base__Ppx_compare_lib", ("\243\186~\233\228\199Ah\181.\223\004e\231\129S")); ("Base__Poly0", ("\230;\143\234\255.H\132KOe7\155\\\023f")); ("Base__Import0", ("\156\129U\197Y[\\\153\017Ho\203\173\204\220\020")); ("Base__Import", ("\014\187\247\141\187\181\142g\176:s_,\181\219\209")); ("Base__Hashable_intf", ("\128\015G\244\135R\026\202\128F?)\193\004\195\181")); ("Base__Hash_intf", ("h\004P\218\1531G\127\212\208A\024\140\164iq")); ("Base__Hash", ("\206Rc\194\234{s3\248\165\024\162\203{\206\206")); ("Base__Globalize", ("<\243w~.\180\196t\159\193\174[\227\139\215G")); ("Base__Bool0", ("\177f\254p\023\143&\239\020\136\206\242~\018F\251")); ("Base__", ("p\252\007\139\128\163W\025+\0225\001\246|P\158"))], [(0)])

val hash : 'a -> int

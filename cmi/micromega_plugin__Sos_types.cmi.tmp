type vname = string
type term =
    Zero
  | Const of Micromega_plugin.NumCompat.Q.t
  | Var of vname
  | Opp of term
  | Add of (term * term)
  | Sub of (term * term)
  | Mul of (term * term)
  | Pow of (term * int)
val output_term : out_channel -> term -> unit
type positivstellensatz =
    Axiom_eq of int
  | Axiom_le of int
  | Axiom_lt of int
  | Rational_eq of Micromega_plugin.NumCompat.Q.t
  | Rational_le of Micromega_plugin.NumCompat.Q.t
  | Rational_lt of Micromega_plugin.NumCompat.Q.t
  | Square of term
  | Monoid of int list
  | Eqmul of term * positivstellensatz
  | Sum of positivstellensatz * positivstellensatz
  | Product of positivstellensatz * positivstellensatz
("DEBUG:rule", [Tag1 (("vname", 376), (0, 0, 0, 1, ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -42)), 0, 0, 0, 0, (("plugins/micromega/sos_types.mli", 15, 762, 762), ("plugins/micromega/sos_types.mli", 15, 762, 781), 0), 0, 0, 0, Tag1 ("Micromega_plugin__Sos_types", 0)), 1, 0); Tag1 (("term", 377), (0, 0, Tag1 ([(("Zero", 290), (0), 0, (("plugins/micromega/sos_types.mli", 18, 795, 797), ("plugins/micromega/sos_types.mli", 18, 795, 803), 0), 0, Tag1 ("Micromega_plugin__Sos_types", 2)); (("Const", 291), ([(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -27)]), 0, (("plugins/micromega/sos_types.mli", 19, 804, 806), ("plugins/micromega/sos_types.mli", 19, 804, 820), 0), 0, Tag1 ("Micromega_plugin__Sos_types", 3)); (("Var", 326), ([(Tag3 ((("vname", 376)), 0, (0)), 100000000, 0, -28)]), 0, (("plugins/micromega/sos_types.mli", 20, 821, 823), ("plugins/micromega/sos_types.mli", 20, 821, 837), 0), 0, Tag1 ("Micromega_plugin__Sos_types", 4)); (("Opp", 327), ([(Tag3 ((("term", 377)), 0, (0)), 100000000, 0, -29)]), 0, (("plugins/micromega/sos_types.mli", 21, 838, 840), ("plugins/micromega/sos_types.mli", 21, 838, 853), 0), 0, Tag1 ("Micromega_plugin__Sos_types", 5)); (("Add", 328), ([(Tag2 ([(Tag3 ((("term", 377)), 0, (0)), 100000000, 0, -31); (Tag3 ((("term", 377)), 0, (0)), 100000000, 0, -32)]), 100000000, 0, -30)]), 0, (("plugins/micromega/sos_types.mli", 22, 854, 856), ("plugins/micromega/sos_types.mli", 22, 854, 878), 0), 0, Tag1 ("Micromega_plugin__Sos_types", 6)); (("Sub", 329), ([(Tag2 ([(Tag3 ((("term", 377)), 0, (0)), 100000000, 0, -34); (Tag3 ((("term", 377)), 0, (0)), 100000000, 0, -35)]), 100000000, 0, -33)]), 0, (("plugins/micromega/sos_types.mli", 23, 879, 881), ("plugins/micromega/sos_types.mli", 23, 879, 903), 0), 0, Tag1 ("Micromega_plugin__Sos_types", 7)); (("Mul", 330), ([(Tag2 ([(Tag3 ((("term", 377)), 0, (0)), 100000000, 0, -37); (Tag3 ((("term", 377)), 0, (0)), 100000000, 0, -38)]), 100000000, 0, -36)]), 0, (("plugins/micromega/sos_types.mli", 24, 904, 906), ("plugins/micromega/sos_types.mli", 24, 904, 928), 0), 0, Tag1 ("Micromega_plugin__Sos_types", 8)); (("Pow", 331), ([(Tag2 ([(Tag3 ((("term", 377)), 0, (0)), 100000000, 0, -40); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -41)]), 100000000, 0, -39)]), 0, (("plugins/micromega/sos_types.mli", 25, 929, 931), ("plugins/micromega/sos_types.mli", 25, 929, 952), 0), 0, Tag1 ("Micromega_plugin__Sos_types", 9))], 0), 1, 0, 0, 0, 0, 0, (("plugins/micromega/sos_types.mli", 17, 783, 783), ("plugins/micromega/sos_types.mli", 25, 929, 952), 0), 0, 0, 0, Tag1 ("Micromega_plugin__Sos_types", 1)), 1, 0); (("output_term", 378), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -26), (Tag1 (0, (Tag3 ((("term", 377)), 0, (0)), 100000000, 0, -25), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -24), 0), 100000000, 0, -23), 0), 100000000, 0, -22), 0, (("plugins/micromega/sos_types.mli", 27, 954, 954), ("plugins/micromega/sos_types.mli", 27, 954, 999), 0), 0, Tag1 ("Micromega_plugin__Sos_types", 10)), 0); Tag1 (("positivstellensatz", 379), (0, 0, Tag1 ([(("Axiom_eq", 364), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -7)]), 0, (("plugins/micromega/sos_types.mli", 30, 1027, 1029), ("plugins/micromega/sos_types.mli", 30, 1027, 1046), 0), 0, Tag1 ("Micromega_plugin__Sos_types", 12)); (("Axiom_le", 365), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -8)]), 0, (("plugins/micromega/sos_types.mli", 31, 1047, 1049), ("plugins/micromega/sos_types.mli", 31, 1047, 1066), 0), 0, Tag1 ("Micromega_plugin__Sos_types", 13)); (("Axiom_lt", 366), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -9)]), 0, (("plugins/micromega/sos_types.mli", 32, 1067, 1069), ("plugins/micromega/sos_types.mli", 32, 1067, 1086), 0), 0, Tag1 ("Micromega_plugin__Sos_types", 14)); (("Rational_eq", 367), ([(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -10)]), 0, (("plugins/micromega/sos_types.mli", 33, 1087, 1089), ("plugins/micromega/sos_types.mli", 33, 1087, 1109), 0), 0, Tag1 ("Micromega_plugin__Sos_types", 15)); (("Rational_le", 368), ([(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -11)]), 0, (("plugins/micromega/sos_types.mli", 34, 1110, 1112), ("plugins/micromega/sos_types.mli", 34, 1110, 1132), 0), 0, Tag1 ("Micromega_plugin__Sos_types", 16)); (("Rational_lt", 369), ([(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Micromega_plugin")), "NumCompat"), "Q"), "t"), 0, (0)), 100000000, 0, -12)]), 0, (("plugins/micromega/sos_types.mli", 35, 1133, 1135), ("plugins/micromega/sos_types.mli", 35, 1133, 1155), 0), 0, Tag1 ("Micromega_plugin__Sos_types", 17)); (("Square", 370), ([(Tag3 ((("term", 377)), 0, (0)), 100000000, 0, -13)]), 0, (("plugins/micromega/sos_types.mli", 36, 1156, 1158), ("plugins/micromega/sos_types.mli", 36, 1156, 1174), 0), 0, Tag1 ("Micromega_plugin__Sos_types", 18)); (("Monoid", 371), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -15)], (0)), 100000000, 0, -14)]), 0, (("plugins/micromega/sos_types.mli", 37, 1175, 1177), ("plugins/micromega/sos_types.mli", 37, 1175, 1197), 0), 0, Tag1 ("Micromega_plugin__Sos_types", 19)); (("Eqmul", 372), ([(Tag3 ((("term", 377)), 0, (0)), 100000000, 0, -16); (Tag3 ((("positivstellensatz", 379)), 0, (0)), 100000000, 0, -17)]), 0, (("plugins/micromega/sos_types.mli", 38, 1198, 1200), ("plugins/micromega/sos_types.mli", 38, 1198, 1236), 0), 0, Tag1 ("Micromega_plugin__Sos_types", 20)); (("Sum", 373), ([(Tag3 ((("positivstellensatz", 379)), 0, (0)), 100000000, 0, -18); (Tag3 ((("positivstellensatz", 379)), 0, (0)), 100000000, 0, -19)]), 0, (("plugins/micromega/sos_types.mli", 39, 1237, 1239), ("plugins/micromega/sos_types.mli", 39, 1237, 1287), 0), 0, Tag1 ("Micromega_plugin__Sos_types", 21)); (("Product", 374), ([(Tag3 ((("positivstellensatz", 379)), 0, (0)), 100000000, 0, -20); (Tag3 ((("positivstellensatz", 379)), 0, (0)), 100000000, 0, -21)]), 0, (("plugins/micromega/sos_types.mli", 40, 1288, 1290), ("plugins/micromega/sos_types.mli", 40, 1288, 1342), 0), 0, Tag1 ("Micromega_plugin__Sos_types", 22))], 0), 1, 0, 0, 0, 0, 0, (("plugins/micromega/sos_types.mli", 29, 1001, 1001), ("plugins/micromega/sos_types.mli", 40, 1288, 1342), 0), 0, 0, 0, Tag1 ("Micromega_plugin__Sos_types", 11)), 1, 0); (("output_psatz", 380), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -6), (Tag1 (0, (Tag3 ((("positivstellensatz", 379)), 0, (0)), 100000000, 0, -5), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("plugins/micromega/sos_types.mli", 42, 1344, 1344), ("plugins/micromega/sos_types.mli", 42, 1344, 1404), 0), 0, Tag1 ("Micromega_plugin__Sos_types", 23)), 0)], "Micromega_plugin__Sos_types", [("Micromega_plugin__Sos_types", ("3\003\150\178\148x\180\210\199\024\228d\169Y\199\132")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Micromega_plugin__NumCompat", ("\167R)~D\225*6\249\146\173\\\233F6m")); ("Micromega_plugin", ("-|C6\194\020\193\204\234h\242\238\191\214'\193")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
val output_psatz : out_channel -> positivstellensatz -> unit

module Make :
  functor (SChunk : Sek__.PrivateSignatures.SCHUNK)
    (Settings : sig
                  val capacity :
                    Sek__.PublicTypeAbbreviations.depth ->
                    Sek__.PublicTypeAbbreviations.capacity
                  val check_iterator_validity : bool
                end)
    (SSeq : sig
              type 'a schunk = 'a SChunk.t
              type 'a measure =
                'a SChunk.measure =
                  MUnit : 'b measure
                | MSWeight : 'c schunk measure
              type 'a t =
                  Zero of { default : 'a; }
                | One of { default : 'a; x : 'a; }
                | Short of { default : 'a; a : 'a array; }
                | Level of { weight : Sek__PrivateSignatures.weight;
                    front : 'a schunk; middle : 'a schunk t;
                    back : 'a schunk;
                  }
              val create : 'a -> 'a t
              val make :
                'a ->
                Sek__.PublicTypeAbbreviations.length ->
                'a -> Sek__PrivateSignatures.owner -> 'a t
              val init :
                'a ->
                Sek__.PublicTypeAbbreviations.length ->
                (Sek__.PublicTypeAbbreviations.index -> 'a) ->
                Sek__PrivateSignatures.owner -> 'a t
              val nonempty_level :
                Sek__PrivateSignatures.pov ->
                Sek__PrivateSignatures.weight ->
                'a schunk -> 'a schunk t -> 'a schunk -> 'a t
              val create_middle : 'a -> 'a schunk t
              val default : 'a t -> 'a
              val weight : 'a t -> Sek__PrivateSignatures.weight
              val is_empty : 'a t -> bool
              val dummy : 'a t -> 'a schunk
              val check :
                'a t ->
                'a measure ->
                Sek__PrivateSignatures.owner ->
                Sek__.PublicTypeAbbreviations.depth -> unit
              val check_middle :
                'a schunk t ->
                'a measure ->
                Sek__PrivateSignatures.owner ->
                Sek__.PublicTypeAbbreviations.depth -> unit
              val push :
                Sek__PrivateSignatures.pov ->
                'a t ->
                'a ->
                'a measure ->
                Sek__PrivateSignatures.owner ->
                Sek__.PublicTypeAbbreviations.depth -> 'a t
              val pop :
                Sek__PrivateSignatures.pov ->
                'a t ->
                'a measure -> Sek__PrivateSignatures.owner -> 'a * 'a t
              val peek : Sek__PrivateSignatures.pov -> 'a t -> 'a
              val get :
                'a t ->
                Sek__PrivateSignatures.weight ->
                'a measure -> Sek__PrivateSignatures.weight * 'a
              val set :
                'a t ->
                Sek__PrivateSignatures.weight ->
                'a measure -> Sek__PrivateSignatures.owner -> 'a -> 'a t
              val update :
                'a measure ->
                Sek__PrivateSignatures.owner ->
                'a Sek__PrivateSignatures.update ->
                'a t Sek__PrivateSignatures.update
              val fuse_back :
                'a schunk t ->
                'a schunk ->
                Sek__PrivateSignatures.owner ->
                Sek__.PublicTypeAbbreviations.depth -> 'a schunk t
              val fuse :
                'a schunk t ->
                'a schunk t ->
                Sek__PrivateSignatures.owner ->
                Sek__.PublicTypeAbbreviations.depth -> 'a schunk t
              val concat :
                'a t ->
                'a t ->
                Sek__PrivateSignatures.owner ->
                Sek__.PublicTypeAbbreviations.depth -> 'a t
              val three_way_split :
                'a t ->
                Sek__PrivateSignatures.weight ->
                'a measure ->
                Sek__PrivateSignatures.owner -> 'a t * 'a * 'a t
              val take :
                'a t ->
                Sek__PrivateSignatures.weight ->
                'a measure -> Sek__PrivateSignatures.owner -> 'a t * 'a
              val drop :
                'a t ->
                Sek__PrivateSignatures.weight ->
                'a measure -> Sek__PrivateSignatures.owner -> 'a * 'a t
              val to_array : 'a t -> 'a array
              val of_array_segment :
                'a ->
                'a array ->
                Sek__.PublicTypeAbbreviations.index ->
                Sek__.PublicTypeAbbreviations.length ->
                Sek__PrivateSignatures.owner -> 'a t
              val iter :
                Sek__PrivateSignatures.pov -> ('a -> unit) -> 'a t -> unit
              val iter_segments :
                Sek__PrivateSignatures.pov ->
                'a t -> 'a Sek__.PublicTypeAbbreviations.segments
              val print :
                'a measure ->
                ('a -> PPrint.document) -> 'a t -> PPrint.document
            end)
    (M : sig
           type 'a measure = 'a SChunk.measure
           type 'a t = 'a SSeq.t
           type 'a iter
           val create :
             Sek__PrivateSignatures.pov -> 'a t -> 'a measure -> 'a iter
           val reset :
             Sek__PrivateSignatures.pov -> 'a iter -> 'a measure -> unit
           val copy : 'a iter -> 'a iter
           val sequence : 'a iter -> 'a t
           val weight : 'a iter -> Sek__PrivateSignatures.weight
           val windex :
             'a iter -> 'a measure -> Sek__PrivateSignatures.weight
           val finished : 'a iter -> 'a measure -> bool
           val get : 'a iter -> 'a measure -> 'a
           val set : 'a iter -> 'a measure -> 'a -> unit
           val move :
             Sek__PrivateSignatures.pov -> 'a iter -> 'a measure -> unit
           val jump :
             Sek__PrivateSignatures.pov ->
             'a iter -> int -> 'a measure -> unit
           val get_segment :
             Sek__PrivateSignatures.pov ->
             'a iter ->
             'a measure -> 'a Sek__.PublicTypeAbbreviations.segment
           val get_writable_segment :
             Sek__PrivateSignatures.pov ->
             'a iter ->
             'a measure -> 'a Sek__.PublicTypeAbbreviations.segment
           val reach :
             'a iter -> Sek__PrivateSignatures.weight -> 'a measure -> unit
           val check : 'a iter -> 'a measure -> unit
           val print :
             ('a -> PPrint.document) ->
             'a iter -> 'a measure -> PPrint.document
           val reach_inside :
             'a iter -> Sek__PrivateSignatures.weight -> 'a measure -> unit
           val create_at_sentinel :
             Sek__PrivateSignatures.pov -> 'a t -> 'a measure -> 'a iter
           val is_at_weight :
             'a iter -> 'a measure -> Sek__PrivateSignatures.weight -> bool
           val unchecked_get : 'a iter -> 'a measure -> 'a
           val is_valid : 'a iter -> bool
         end)
    ->
    sig
      type 'a t
      val create : 'a -> 'a t
      val make : 'a -> Sek__.PublicTypeAbbreviations.length -> 'a -> 'a t
      val init :
        'a ->
        Sek__.PublicTypeAbbreviations.length ->
        (Sek__.PublicTypeAbbreviations.index -> 'a) -> 'a t
      val default : 'a t -> 'a
      val length : 'a t -> int
      val is_empty : 'a t -> bool
      val clear : 'a t -> unit
      val shallow_copy : 'a t -> 'a t
      val assign : 'a t -> 'a t -> unit
      val push : Sek__.PrivateSignatures.pov -> 'a t -> 'a -> unit
      val pop : Sek__.PrivateSignatures.pov -> 'a t -> 'a
      val peek : Sek__.PrivateSignatures.pov -> 'a t -> 'a
      val get : 'a t -> Sek__.PublicTypeAbbreviations.index -> 'a
      val set : 'a t -> Sek__.PublicTypeAbbreviations.index -> 'a -> unit
      val concat : 'a t -> 'a t -> 'a t
      val append : Sek__.PrivateSignatures.pov -> 'a t -> 'a t -> unit
      val split : 'a t -> Sek__.PublicTypeAbbreviations.index -> 'a t * 'a t
      val carve :
        Sek__.PrivateSignatures.pov ->
        'a t -> Sek__.PublicTypeAbbreviations.length -> 'a t
      val take : 'a t -> Sek__.PublicTypeAbbreviations.length -> unit
      val drop : 'a t -> Sek__.PublicTypeAbbreviations.length -> unit
      val iter_segments :
        Sek__.PrivateSignatures.pov ->
        'a t -> 'a Sek__.PublicTypeAbbreviations.segments
      val to_list : 'a t -> 'a list
      val to_array : 'a t -> 'a array
      val of_array_segment :
        'a ->
        'a array ->
        Sek__.PublicTypeAbbreviations.index ->
        Sek__.PublicTypeAbbreviations.length -> 'a t
      val snapshot_and_clear : 'a t -> 'a SSeq.t
      val edit : 'a SSeq.t -> 'a t
      val format : PPrint.ToFormatter.channel -> int t -> unit
      val check : 'a t -> unit
      module Hooks :
        sig
          type nonrec 'a t = 'a t
          val weight : 'a t -> Sek__.PrivateSignatures.weight
          val dummy : 'a t -> 'a SChunk.t
          val front : 'a t -> 'a SChunk.t
          val middle : 'a t -> 'a SChunk.t M.t
          val back : 'a t -> 'a SChunk.t
          val weight_front : 'a t -> Sek__.PrivateSignatures.weight
          val schunk_uniquely_owned : 'a t -> 'a SChunk.t -> bool
          val ensure_schunk_uniquely_owned :
            'a t ->
            Sek__.PublicTypeAbbreviations.index -> 'a SChunk.t -> unit
          type birth
          val iterator_is_born : 'a t -> birth
          val is_valid : 'a t -> birth -> bool
          val invalidate_iterators : 'a t -> unit
          val invalidate_iterators_except : 'a t -> birth
        end("DEBUG:rule", [Tag3 (("Make", 1479), 0, (Tag2 (((("SChunk", 1480)), (Tag1 (Tag1 ((Tag2 ("Sek__")), "PrivateSignatures"), "SCHUNK"))), Tag2 (((("Settings", 1481)), Tag1 ([(("capacity", 1484), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "depth"), 0, (0)), 100000000, 0, -5), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "capacity"), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0, (("src/PublicSettings.ml", 42, 2103, 2105), ("src/PublicSettings.ml", 42, 2103, 2137), 0), 0, Tag1 ("Sek__PublicSettings", 0)), 0); (("check_iterator_validity", 1485), ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -2), 0, (("src/PublicSettings.ml", 105, 4835, 4837), ("src/PublicSettings.ml", 105, 4835, 4871), 0), 0, Tag1 ("Sek__PublicSettings", 6)), 0)])), Tag2 (((("SSeq", 1482)), Tag1 ([Tag1 (("schunk", 1486), ([((("a")), 100000000, 0, -261)], 1, 0, 1, ((Tag3 (Tag1 ((("SChunk", 1480)), "t"), [((("a")), 100000000, 0, -261)], (0)), 100000000, 0, -260)), [7], [2], 0, 0, (("src/EphemeralSequence.mli", 30, 1449, 1469), ("src/EphemeralSequence.mli", 30, 1449, 1497), 0), 0, 0, 0, Tag1 ("Sek__EphemeralSequence", 6)), 1, 0); Tag1 (("measure", 1487), ([((("a")), 100000000, 0, -254)], 1, Tag1 ([(("MUnit", 547), (0), ((Tag3 ((("measure", 1487)), [((0), 100000000, 0, -256)], (0)), 100000000, 0, -255)), (("src/PrivateSignatures.ml", 627, 28583, 28585), ("src/PrivateSignatures.ml", 627, 28583, 28613), 0), 0, Tag1 ("Sek__PrivateSignatures", 128)); (("MSWeight", 548), (0), ((Tag3 ((("measure", 1487)), [(Tag3 ((("schunk", 1486)), [((0), 100000000, 0, -259)], (0)), 100000000, 0, -258)], (0)), 100000000, 0, -257)), (("src/PrivateSignatures.ml", 628, 28614, 28616), ("src/PrivateSignatures.ml", 628, 28614, 28646), 0), 0, Tag1 ("Sek__PrivateSignatures", 129))], 0), 1, ((Tag3 (Tag1 ((("SChunk", 1480)), "measure"), [((("a")), 100000000, 0, -254)], (0)), 100000000, 0, -253)), [63], [0], 0, 0, (("src/EphemeralSequence.mli", 31, 1498, 1518), ("src/EphemeralSequence.mli", 31, 1498, 1553), 0), 0, 1, 0, Tag1 ("Sek__EphemeralSequence", 15)), 1, 0); Tag1 (("t", 1488), ([((("a")), 100000000, 0, -246)], 1, Tag1 ([(("Zero", 550), Tag1 ([(("default", 551), 0, ((("a")), 100000000, 0, -246), (("src/PrivateSignatures.ml", 632, 28718, 28735), ("src/PrivateSignatures.ml", 632, 28718, 28748), 0), 0, Tag1 ("Sek__PrivateSignatures", 131))]), 0, (("src/PrivateSignatures.ml", 632, 28718, 28722), ("src/PrivateSignatures.ml", 632, 28718, 28750), 0), 0, Tag1 ("Sek__PrivateSignatures", 132)); (("One", 552), Tag1 ([(("default", 553), 0, ((("a")), 100000000, 0, -246), (("src/PrivateSignatures.ml", 633, 28751, 28768), ("src/PrivateSignatures.ml", 633, 28751, 28781), 0), 0, Tag1 ("Sek__PrivateSignatures", 133)); (("x", 554), 0, ((("a")), 100000000, 0, -246), (("src/PrivateSignatures.ml", 633, 28751, 28782), ("src/PrivateSignatures.ml", 633, 28751, 28788), 0), 0, Tag1 ("Sek__PrivateSignatures", 134))]), 0, (("src/PrivateSignatures.ml", 633, 28751, 28755), ("src/PrivateSignatures.ml", 633, 28751, 28790), 0), 0, Tag1 ("Sek__PrivateSignatures", 135)); (("Short", 555), Tag1 ([(("default", 556), 0, ((("a")), 100000000, 0, -246), (("src/PrivateSignatures.ml", 634, 28791, 28808), ("src/PrivateSignatures.ml", 634, 28791, 28821), 0), 0, Tag1 ("Sek__PrivateSignatures", 136)); (("a", 557), 0, (Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -246)], (0)), 100000000, 0, -247), (("src/PrivateSignatures.ml", 634, 28791, 28822), ("src/PrivateSignatures.ml", 634, 28791, 28834), 0), 0, Tag1 ("Sek__PrivateSignatures", 137))]), 0, (("src/PrivateSignatures.ml", 634, 28791, 28795), ("src/PrivateSignatures.ml", 634, 28791, 28836), 0), 0, Tag1 ("Sek__PrivateSignatures", 138)); (("Level", 558), Tag1 ([(("weight", 559), 0, (Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "weight"), 0, (0)), 100000000, 0, -248), (("src/PrivateSignatures.ml", 636, 28854, 28862), ("src/PrivateSignatures.ml", 636, 28854, 28878), 0), 0, Tag1 ("Sek__PrivateSignatures", 139)); (("front", 560), 0, (Tag3 ((("schunk", 1486)), [((("a")), 100000000, 0, -246)], (0)), 100000000, 0, -249), (("src/PrivateSignatures.ml", 637, 28879, 28887), ("src/PrivateSignatures.ml", 637, 28879, 28905), 0), 0, Tag1 ("Sek__PrivateSignatures", 140)); (("middle", 561), 0, (Tag3 ((("t", 1488)), [(Tag3 ((("schunk", 1486)), [((("a")), 100000000, 0, -246)], (0)), 100000000, 0, -251)], (0)), 100000000, 0, -250), (("src/PrivateSignatures.ml", 638, 28906, 28914), ("src/PrivateSignatures.ml", 638, 28906, 28935), 0), 0, Tag1 ("Sek__PrivateSignatures", 141)); (("back", 562), 0, (Tag3 ((("schunk", 1486)), [((("a")), 100000000, 0, -246)], (0)), 100000000, 0, -252), (("src/PrivateSignatures.ml", 639, 28936, 28944), ("src/PrivateSignatures.ml", 639, 28936, 28961), 0), 0, Tag1 ("Sek__PrivateSignatures", 142))]), 0, (("src/PrivateSignatures.ml", 635, 28837, 28841), ("src/PrivateSignatures.ml", 640, 28962, 28969), 0), 0, Tag1 ("Sek__PrivateSignatures", 143))], 0), 1, 0, [63], [0], 0, 0, (("src/PrivateSignatures.ml", 631, 28704, 28706), ("src/PrivateSignatures.ml", 640, 28962, 28969), 0), 0, 0, 0, Tag1 ("Sek__PrivateSignatures", 130)), 1, 0); (("create", 1489), ((Tag1 (0, ((("a")), 100000000, 0, -245), (Tag3 ((("t", 1488)), [((("a")), 100000000, 0, -245)], (0)), 100000000, 0, -244), 0), 100000000, 0, -243), 0, (("src/PrivateSignatures.ml", 652, 29515, 29517), ("src/PrivateSignatures.ml", 652, 29515, 29540), 0), 0, Tag1 ("Sek__PrivateSignatures", 168)), 0); (("make", 1490), ((Tag1 (0, ((("a")), 100000000, 0, -240), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "length"), 0, (0)), 100000000, 0, -242), (Tag1 (0, ((("a")), 100000000, 0, -240), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "owner"), 0, (0)), 100000000, 0, -241), (Tag3 ((("t", 1488)), [((("a")), 100000000, 0, -240)], (0)), 100000000, 0, -239), 0), 100000000, 0, -238), 0), 100000000, 0, -237), 0), 100000000, 0, -236), 0), 100000000, 0, -235), 0, (("src/PrivateSignatures.ml", 656, 29672, 29674), ("src/PrivateSignatures.ml", 656, 29672, 29720), 0), 0, Tag1 ("Sek__PrivateSignatures", 169)), 0); (("init", 1491), ((Tag1 (0, ((("a")), 100000000, 0, -230), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "length"), 0, (0)), 100000000, 0, -234), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "index"), 0, (0)), 100000000, 0, -233), ((("a")), 100000000, 0, -230), 0), 100000000, 0, -232), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "owner"), 0, (0)), 100000000, 0, -231), (Tag3 ((("t", 1488)), [((("a")), 100000000, 0, -230)], (0)), 100000000, 0, -229), 0), 100000000, 0, -228), 0), 100000000, 0, -227), 0), 100000000, 0, -226), 0), 100000000, 0, -225), 0, (("src/PrivateSignatures.ml", 661, 29906, 29908), ("src/PrivateSignatures.ml", 661, 29906, 29965), 0), 0, Tag1 ("Sek__PrivateSignatures", 170)), 0); (("nonempty_level", 1492), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "pov"), 0, (0)), 100000000, 0, -224), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "weight"), 0, (0)), 100000000, 0, -223), (Tag1 (0, (Tag3 ((("schunk", 1486)), [((("a")), 100000000, 0, -218)], (0)), 100000000, 0, -222), (Tag1 (0, (Tag3 ((("t", 1488)), [(Tag3 ((("schunk", 1486)), [((("a")), 100000000, 0, -218)], (0)), 100000000, 0, -221)], (0)), 100000000, 0, -220), (Tag1 (0, (Tag3 ((("schunk", 1486)), [((("a")), 100000000, 0, -218)], (0)), 100000000, 0, -219), (Tag3 ((("t", 1488)), [((("a")), 100000000, 0, -218)], (0)), 100000000, 0, -217), 0), 100000000, 0, -216), 0), 100000000, 0, -215), 0), 100000000, 0, -214), 0), 100000000, 0, -213), 0), 100000000, 0, -212), 0, (("src/PrivateSignatures.ml", 667, 30260, 30262), ("src/PrivateSignatures.ml", 668, 30283, 30349), 0), 0, Tag1 ("Sek__PrivateSignatures", 171)), 0); (("create_middle", 1493), ((Tag1 (0, ((("a")), 100000000, 0, -211), (Tag3 ((("t", 1488)), [(Tag3 ((("schunk", 1486)), [((("a")), 100000000, 0, -211)], (0)), 100000000, 0, -210)], (0)), 100000000, 0, -209), 0), 100000000, 0, -208), 0, (("src/PrivateSignatures.ml", 672, 30483, 30485), ("src/PrivateSignatures.ml", 672, 30483, 30522), 0), 0, Tag1 ("Sek__PrivateSignatures", 172)), 0); (("default", 1494), ((Tag1 (0, (Tag3 ((("t", 1488)), [((("a")), 100000000, 0, -206)], (0)), 100000000, 0, -207), ((("a")), 100000000, 0, -206), 0), 100000000, 0, -205), 0, (("src/PrivateSignatures.ml", 677, 30703, 30705), ("src/PrivateSignatures.ml", 677, 30703, 30729), 0), 0, Tag1 ("Sek__PrivateSignatures", 173)), 0); (("weight", 1495), ((Tag1 (0, (Tag3 ((("t", 1488)), [((("a")), 100000000, 0, -204)], (0)), 100000000, 0, -203), (Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "weight"), 0, (0)), 100000000, 0, -202), 0), 100000000, 0, -201), 0, (("src/PrivateSignatures.ml", 680, 30808, 30810), ("src/PrivateSignatures.ml", 680, 30808, 30837), 0), 0, Tag1 ("Sek__PrivateSignatures", 174)), 0); (("is_empty", 1496), ((Tag1 (0, (Tag3 ((("t", 1488)), [((("a")), 100000000, 0, -200)], (0)), 100000000, 0, -199), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -198), 0), 100000000, 0, -197), 0, (("src/PrivateSignatures.ml", 683, 30907, 30909), ("src/PrivateSignatures.ml", 683, 30907, 30936), 0), 0, Tag1 ("Sek__PrivateSignatures", 175)), 0); (("dummy", 1497), ((Tag1 (0, (Tag3 ((("t", 1488)), [((("a")), 100000000, 0, -195)], (0)), 100000000, 0, -196), (Tag3 ((("schunk", 1486)), [((("a")), 100000000, 0, -195)], (0)), 100000000, 0, -194), 0), 100000000, 0, -193), 0, (("src/PrivateSignatures.ml", 687, 31047, 31049), ("src/PrivateSignatures.ml", 687, 31047, 31078), 0), 0, Tag1 ("Sek__PrivateSignatures", 176)), 0); (("check", 1498), ((Tag1 (0, (Tag3 ((("t", 1488)), [((("a")), 100000000, 0, -191)], (0)), 100000000, 0, -192), (Tag1 (0, (Tag3 ((("measure", 1487)), [((("a")), 100000000, 0, -191)], (0)), 100000000, 0, -190), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "owner"), 0, (0)), 100000000, 0, -189), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "depth"), 0, (0)), 100000000, 0, -188), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -187), 0), 100000000, 0, -186), 0), 100000000, 0, -185), 0), 100000000, 0, -184), 0), 100000000, 0, -183), 0, (("src/PrivateSignatures.ml", 691, 31214, 31216), ("src/PrivateSignatures.ml", 691, 31214, 31272), 0), 0, Tag1 ("Sek__PrivateSignatures", 177)), 0); (("check_middle", 1499), ((Tag1 (0, (Tag3 ((("t", 1488)), [(Tag3 ((("schunk", 1486)), [((("a")), 100000000, 0, -180)], (0)), 100000000, 0, -182)], (0)), 100000000, 0, -181), (Tag1 (0, (Tag3 ((("measure", 1487)), [((("a")), 100000000, 0, -180)], (0)), 100000000, 0, -179), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "owner"), 0, (0)), 100000000, 0, -178), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "depth"), 0, (0)), 100000000, 0, -177), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -176), 0), 100000000, 0, -175), 0), 100000000, 0, -174), 0), 100000000, 0, -173), 0), 100000000, 0, -172), 0, (("src/PrivateSignatures.ml", 697, 31582, 31584), ("src/PrivateSignatures.ml", 697, 31582, 31654), 0), 0, Tag1 ("Sek__PrivateSignatures", 178)), 0); (("push", 1500), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "pov"), 0, (0)), 100000000, 0, -171), (Tag1 (0, (Tag3 ((("t", 1488)), [((("a")), 100000000, 0, -166)], (0)), 100000000, 0, -170), (Tag1 (0, ((("a")), 100000000, 0, -166), (Tag1 (0, (Tag3 ((("measure", 1487)), [((("a")), 100000000, 0, -166)], (0)), 100000000, 0, -169), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "owner"), 0, (0)), 100000000, 0, -168), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "depth"), 0, (0)), 100000000, 0, -167), (Tag3 ((("t", 1488)), [((("a")), 100000000, 0, -166)], (0)), 100000000, 0, -165), 0), 100000000, 0, -164), 0), 100000000, 0, -163), 0), 100000000, 0, -162), 0), 100000000, 0, -161), 0), 100000000, 0, -160), 0), 100000000, 0, -159), 0, (("src/PrivateSignatures.ml", 701, 31818, 31820), ("src/PrivateSignatures.ml", 701, 31818, 31888), 0), 0, Tag1 ("Sek__PrivateSignatures", 179)), 0); (("pop", 1501), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "pov"), 0, (0)), 100000000, 0, -158), (Tag1 (0, (Tag3 ((("t", 1488)), [((("a")), 100000000, 0, -153)], (0)), 100000000, 0, -157), (Tag1 (0, (Tag3 ((("measure", 1487)), [((("a")), 100000000, 0, -153)], (0)), 100000000, 0, -156), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "owner"), 0, (0)), 100000000, 0, -155), (Tag2 ([((("a")), 100000000, 0, -153); (Tag3 ((("t", 1488)), [((("a")), 100000000, 0, -153)], (0)), 100000000, 0, -154)]), 100000000, 0, -152), 0), 100000000, 0, -151), 0), 100000000, 0, -150), 0), 100000000, 0, -149), 0), 100000000, 0, -148), 0, (("src/PrivateSignatures.ml", 707, 32160, 32162), ("src/PrivateSignatures.ml", 707, 32160, 32219), 0), 0, Tag1 ("Sek__PrivateSignatures", 180)), 0); (("peek", 1502), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "pov"), 0, (0)), 100000000, 0, -147), (Tag1 (0, (Tag3 ((("t", 1488)), [((("a")), 100000000, 0, -145)], (0)), 100000000, 0, -146), ((("a")), 100000000, 0, -145), 0), 100000000, 0, -144), 0), 100000000, 0, -143), 0, (("src/PrivateSignatures.ml", 712, 32446, 32448), ("src/PrivateSignatures.ml", 712, 32446, 32476), 0), 0, Tag1 ("Sek__PrivateSignatures", 181)), 0); (("get", 1503), ((Tag1 (0, (Tag3 ((("t", 1488)), [((("a")), 100000000, 0, -139)], (0)), 100000000, 0, -142), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "weight"), 0, (0)), 100000000, 0, -141), (Tag1 (0, (Tag3 ((("measure", 1487)), [((("a")), 100000000, 0, -139)], (0)), 100000000, 0, -140), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "weight"), 0, (0)), 100000000, 0, -138); ((("a")), 100000000, 0, -139)]), 100000000, 0, -137), 0), 100000000, 0, -136), 0), 100000000, 0, -135), 0), 100000000, 0, -134), 0, (("src/PrivateSignatures.ml", 719, 32766, 32768), ("src/PrivateSignatures.ml", 719, 32766, 32821), 0), 0, Tag1 ("Sek__PrivateSignatures", 182)), 0); (("set", 1504), ((Tag1 (0, (Tag3 ((("t", 1488)), [((("a")), 100000000, 0, -129)], (0)), 100000000, 0, -133), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "weight"), 0, (0)), 100000000, 0, -132), (Tag1 (0, (Tag3 ((("measure", 1487)), [((("a")), 100000000, 0, -129)], (0)), 100000000, 0, -131), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "owner"), 0, (0)), 100000000, 0, -130), (Tag1 (0, ((("a")), 100000000, 0, -129), (Tag3 ((("t", 1488)), [((("a")), 100000000, 0, -129)], (0)), 100000000, 0, -128), 0), 100000000, 0, -127), 0), 100000000, 0, -126), 0), 100000000, 0, -125), 0), 100000000, 0, -124), 0), 100000000, 0, -123), 0, (("src/PrivateSignatures.ml", 724, 33028, 33030), ("src/PrivateSignatures.ml", 724, 33028, 33091), 0), 0, Tag1 ("Sek__PrivateSignatures", 183)), 0); (("update", 1505), ((Tag1 (0, (Tag3 ((("measure", 1487)), [((("a")), 100000000, 0, -119)], (0)), 100000000, 0, -122), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "owner"), 0, (0)), 100000000, 0, -121), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "update"), [((("a")), 100000000, 0, -119)], (0)), 100000000, 0, -120), (Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "update"), [(Tag3 ((("t", 1488)), [((("a")), 100000000, 0, -119)], (0)), 100000000, 0, -118)], (0)), 100000000, 0, -117), 0), 100000000, 0, -116), 0), 100000000, 0, -115), 0), 100000000, 0, -114), 0, (("src/PrivateSignatures.ml", 729, 33306, 33308), ("src/PrivateSignatures.ml", 729, 33306, 33368), 0), 0, Tag1 ("Sek__PrivateSignatures", 184)), 0); (("fuse_back", 1506), ((Tag1 (0, (Tag3 ((("t", 1488)), [(Tag3 ((("schunk", 1486)), [((("a")), 100000000, 0, -108)], (0)), 100000000, 0, -113)], (0)), 100000000, 0, -112), (Tag1 (0, (Tag3 ((("schunk", 1486)), [((("a")), 100000000, 0, -108)], (0)), 100000000, 0, -111), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "owner"), 0, (0)), 100000000, 0, -110), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "depth"), 0, (0)), 100000000, 0, -109), (Tag3 ((("t", 1488)), [(Tag3 ((("schunk", 1486)), [((("a")), 100000000, 0, -108)], (0)), 100000000, 0, -107)], (0)), 100000000, 0, -106), 0), 100000000, 0, -105), 0), 100000000, 0, -104), 0), 100000000, 0, -103), 0), 100000000, 0, -102), 0, (("src/PrivateSignatures.ml", 736, 33695, 33697), ("src/PrivateSignatures.ml", 736, 33695, 33770), 0), 0, Tag1 ("Sek__PrivateSignatures", 185)), 0); (("fuse", 1507), ((Tag1 (0, (Tag3 ((("t", 1488)), [(Tag3 ((("schunk", 1486)), [((("a")), 100000000, 0, -95)], (0)), 100000000, 0, -101)], (0)), 100000000, 0, -100), (Tag1 (0, (Tag3 ((("t", 1488)), [(Tag3 ((("schunk", 1486)), [((("a")), 100000000, 0, -95)], (0)), 100000000, 0, -99)], (0)), 100000000, 0, -98), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "owner"), 0, (0)), 100000000, 0, -97), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "depth"), 0, (0)), 100000000, 0, -96), (Tag3 ((("t", 1488)), [(Tag3 ((("schunk", 1486)), [((("a")), 100000000, 0, -95)], (0)), 100000000, 0, -94)], (0)), 100000000, 0, -93), 0), 100000000, 0, -92), 0), 100000000, 0, -91), 0), 100000000, 0, -90), 0), 100000000, 0, -89), 0, (("src/PrivateSignatures.ml", 743, 34093, 34095), ("src/PrivateSignatures.ml", 743, 34093, 34165), 0), 0, Tag1 ("Sek__PrivateSignatures", 186)), 0); (("concat", 1508), ((Tag1 (0, (Tag3 ((("t", 1488)), [((("a")), 100000000, 0, -84)], (0)), 100000000, 0, -88), (Tag1 (0, (Tag3 ((("t", 1488)), [((("a")), 100000000, 0, -84)], (0)), 100000000, 0, -87), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "owner"), 0, (0)), 100000000, 0, -86), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "depth"), 0, (0)), 100000000, 0, -85), (Tag3 ((("t", 1488)), [((("a")), 100000000, 0, -84)], (0)), 100000000, 0, -83), 0), 100000000, 0, -82), 0), 100000000, 0, -81), 0), 100000000, 0, -80), 0), 100000000, 0, -79), 0, (("src/PrivateSignatures.ml", 746, 34241, 34243), ("src/PrivateSignatures.ml", 746, 34241, 34294), 0), 0, Tag1 ("Sek__PrivateSignatures", 187)), 0); (("three_way_split", 1509), ((Tag1 (0, (Tag3 ((("t", 1488)), [((("a")), 100000000, 0, -73)], (0)), 100000000, 0, -78), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "weight"), 0, (0)), 100000000, 0, -77), (Tag1 (0, (Tag3 ((("measure", 1487)), [((("a")), 100000000, 0, -73)], (0)), 100000000, 0, -76), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "owner"), 0, (0)), 100000000, 0, -75), (Tag2 ([(Tag3 ((("t", 1488)), [((("a")), 100000000, 0, -73)], (0)), 100000000, 0, -72); ((("a")), 100000000, 0, -73); (Tag3 ((("t", 1488)), [((("a")), 100000000, 0, -73)], (0)), 100000000, 0, -74)]), 100000000, 0, -71), 0), 100000000, 0, -70), 0), 100000000, 0, -69), 0), 100000000, 0, -68), 0), 100000000, 0, -67), 0, (("src/PrivateSignatures.ml", 753, 34651, 34653), ("src/PrivateSignatures.ml", 754, 34675, 34736), 0), 0, Tag1 ("Sek__PrivateSignatures", 188)), 0); (("take", 1510), ((Tag1 (0, (Tag3 ((("t", 1488)), [((("a")), 100000000, 0, -62)], (0)), 100000000, 0, -66), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "weight"), 0, (0)), 100000000, 0, -65), (Tag1 (0, (Tag3 ((("measure", 1487)), [((("a")), 100000000, 0, -62)], (0)), 100000000, 0, -64), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "owner"), 0, (0)), 100000000, 0, -63), (Tag2 ([(Tag3 ((("t", 1488)), [((("a")), 100000000, 0, -62)], (0)), 100000000, 0, -61); ((("a")), 100000000, 0, -62)]), 100000000, 0, -60), 0), 100000000, 0, -59), 0), 100000000, 0, -58), 0), 100000000, 0, -57), 0), 100000000, 0, -56), 0, (("src/PrivateSignatures.ml", 758, 34877, 34879), ("src/PrivateSignatures.ml", 758, 34877, 34940), 0), 0, Tag1 ("Sek__PrivateSignatures", 189)), 0); (("drop", 1511), ((Tag1 (0, (Tag3 ((("t", 1488)), [((("a")), 100000000, 0, -50)], (0)), 100000000, 0, -55), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "weight"), 0, (0)), 100000000, 0, -54), (Tag1 (0, (Tag3 ((("measure", 1487)), [((("a")), 100000000, 0, -50)], (0)), 100000000, 0, -53), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "owner"), 0, (0)), 100000000, 0, -52), (Tag2 ([((("a")), 100000000, 0, -50); (Tag3 ((("t", 1488)), [((("a")), 100000000, 0, -50)], (0)), 100000000, 0, -51)]), 100000000, 0, -49), 0), 100000000, 0, -48), 0), 100000000, 0, -47), 0), 100000000, 0, -46), 0), 100000000, 0, -45), 0, (("src/PrivateSignatures.ml", 762, 35081, 35083), ("src/PrivateSignatures.ml", 762, 35081, 35144), 0), 0, Tag1 ("Sek__PrivateSignatures", 190)), 0); (("to_array", 1512), ((Tag1 (0, (Tag3 ((("t", 1488)), [((("a")), 100000000, 0, -43)], (0)), 100000000, 0, -44), (Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -43)], (0)), 100000000, 0, -42), 0), 100000000, 0, -41), 0, (("src/PrivateSignatures.ml", 766, 35249, 35251), ("src/PrivateSignatures.ml", 766, 35249, 35282), 0), 0, Tag1 ("Sek__PrivateSignatures", 191)), 0); (("of_array_segment", 1513), ((Tag1 (0, ((("a")), 100000000, 0, -36), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -36)], (0)), 100000000, 0, -40), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "index"), 0, (0)), 100000000, 0, -39), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "length"), 0, (0)), 100000000, 0, -38), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "owner"), 0, (0)), 100000000, 0, -37), (Tag3 ((("t", 1488)), [((("a")), 100000000, 0, -36)], (0)), 100000000, 0, -35), 0), 100000000, 0, -34), 0), 100000000, 0, -33), 0), 100000000, 0, -32), 0), 100000000, 0, -31), 0), 100000000, 0, -30), 0, (("src/PrivateSignatures.ml", 771, 35506, 35508), ("src/PrivateSignatures.ml", 771, 35506, 35581), 0), 0, Tag1 ("Sek__PrivateSignatures", 192)), 0); (("iter", 1514), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "pov"), 0, (0)), 100000000, 0, -29), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -26), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -28), 0), 100000000, 0, -27), (Tag1 (0, (Tag3 ((("t", 1488)), [((("a")), 100000000, 0, -26)], (0)), 100000000, 0, -25), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -24), 0), 100000000, 0, -23), 0), 100000000, 0, -22), 0), 100000000, 0, -21), 0, (("src/PrivateSignatures.ml", 775, 35735, 35737), ("src/PrivateSignatures.ml", 775, 35735, 35783), 0), 0, Tag1 ("Sek__PrivateSignatures", 193)), 0); (("iter_segments", 1515), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "pov"), 0, (0)), 100000000, 0, -20), (Tag1 (0, (Tag3 ((("t", 1488)), [((("a")), 100000000, 0, -18)], (0)), 100000000, 0, -19), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "segments"), [((("a")), 100000000, 0, -18)], (0)), 100000000, 0, -17), 0), 100000000, 0, -16), 0), 100000000, 0, -15), 0, (("src/PrivateSignatures.ml", 779, 35900, 35902), ("src/PrivateSignatures.ml", 779, 35900, 35948), 0), 0, Tag1 ("Sek__PrivateSignatures", 194)), 0); (("print", 1516), ((Tag1 (0, (Tag3 ((("measure", 1487)), [((("a")), 100000000, 0, -11)], (0)), 100000000, 0, -14), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -11), (Tag3 (Tag1 ((Tag2 ("PPrint")), "document"), 0, (0)), 100000000, 0, -13), 0), 100000000, 0, -12), (Tag1 (0, (Tag3 ((("t", 1488)), [((("a")), 100000000, 0, -11)], (0)), 100000000, 0, -10), (Tag3 (Tag1 ((Tag2 ("PPrint")), "document"), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0), 100000000, 0, -7), 0), 100000000, 0, -6), 0, (("src/PrivateSignatures.ml", 783, 36083, 36085), ("src/PrivateSignatures.ml", 783, 36083, 36161), 0), 0, Tag1 ("Sek__PrivateSignatures", 195)), 0)])), Tag2 (((("M", 1483)), Tag1 ([Tag1 (("measure", 1517), ([((("a")), 100000000, 0, -408)], 1, 0, 1, ((Tag3 (Tag1 ((("SChunk", 1480)), "measure"), [((("a")), 100000000, 0, -408)], (0)), 100000000, 0, -407)), [63], [0], 0, 0, (("src/EphemeralSequence.mli", 33, 1595, 1613), ("src/EphemeralSequence.mli", 33, 1595, 1648), 0), 0, 1, 0, Tag1 ("Sek__EphemeralSequence", 26)), 1, 0); Tag1 (("t", 1518), ([((("a")), 100000000, 0, -406)], 1, 0, 1, ((Tag3 (Tag1 ((("SSeq", 1482)), "t"), [((("a")), 100000000, 0, -406)], (0)), 100000000, 0, -405)), [63], [0], 0, 0, (("src/EphemeralSequence.mli", 32, 1555, 1573), ("src/EphemeralSequence.mli", 32, 1555, 1594), 0), 0, 0, 0, Tag1 ("Sek__EphemeralSequence", 25)), 1, 0); Tag1 (("iter", 1519), ([((("a")), 100000000, 0, -404)], 1, 0, 1, 0, [7], [2], 0, 0, (("src/PrivateSignatures.ml", 796, 36497, 36499), ("src/PrivateSignatures.ml", 796, 36497, 36511), 0), 0, 0, 0, Tag1 ("Sek__PrivateSignatures", 199)), 1, 0); (("create", 1520), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "pov"), 0, (0)), 100000000, 0, -403), (Tag1 (0, (Tag3 ((("t", 1518)), [((("a")), 100000000, 0, -400)], (0)), 100000000, 0, -402), (Tag1 (0, (Tag3 ((("measure", 1517)), [((("a")), 100000000, 0, -400)], (0)), 100000000, 0, -401), (Tag3 ((("iter", 1519)), [((("a")), 100000000, 0, -400)], (0)), 100000000, 0, -399), 0), 100000000, 0, -398), 0), 100000000, 0, -397), 0), 100000000, 0, -396), 0, (("src/PrivateSignatures.ml", 797, 36512, 36514), ("src/PrivateSignatures.ml", 797, 36512, 36563), 0), 0, Tag1 ("Sek__PrivateSignatures", 200)), 0); (("reset", 1521), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "pov"), 0, (0)), 100000000, 0, -395), (Tag1 (0, (Tag3 ((("iter", 1519)), [((("a")), 100000000, 0, -393)], (0)), 100000000, 0, -394), (Tag1 (0, (Tag3 ((("measure", 1517)), [((("a")), 100000000, 0, -393)], (0)), 100000000, 0, -392), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -391), 0), 100000000, 0, -390), 0), 100000000, 0, -389), 0), 100000000, 0, -388), 0, (("src/PrivateSignatures.ml", 798, 36564, 36566), ("src/PrivateSignatures.ml", 798, 36564, 36614), 0), 0, Tag1 ("Sek__PrivateSignatures", 201)), 0); (("copy", 1522), ((Tag1 (0, (Tag3 ((("iter", 1519)), [((("a")), 100000000, 0, -386)], (0)), 100000000, 0, -387), (Tag3 ((("iter", 1519)), [((("a")), 100000000, 0, -386)], (0)), 100000000, 0, -385), 0), 100000000, 0, -384), 0, (("src/PrivateSignatures.ml", 799, 36615, 36617), ("src/PrivateSignatures.ml", 799, 36615, 36646), 0), 0, Tag1 ("Sek__PrivateSignatures", 202)), 0); (("sequence", 1523), ((Tag1 (0, (Tag3 ((("iter", 1519)), [((("a")), 100000000, 0, -382)], (0)), 100000000, 0, -383), (Tag3 ((("t", 1518)), [((("a")), 100000000, 0, -382)], (0)), 100000000, 0, -381), 0), 100000000, 0, -380), 0, (("src/PrivateSignatures.ml", 800, 36647, 36649), ("src/PrivateSignatures.ml", 800, 36647, 36678), 0), 0, Tag1 ("Sek__PrivateSignatures", 203)), 0); (("weight", 1524), ((Tag1 (0, (Tag3 ((("iter", 1519)), [((("a")), 100000000, 0, -379)], (0)), 100000000, 0, -378), (Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "weight"), 0, (0)), 100000000, 0, -377), 0), 100000000, 0, -376), 0, (("src/PrivateSignatures.ml", 801, 36679, 36681), ("src/PrivateSignatures.ml", 801, 36679, 36711), 0), 0, Tag1 ("Sek__PrivateSignatures", 204)), 0); (("windex", 1525), ((Tag1 (0, (Tag3 ((("iter", 1519)), [((("a")), 100000000, 0, -374)], (0)), 100000000, 0, -375), (Tag1 (0, (Tag3 ((("measure", 1517)), [((("a")), 100000000, 0, -374)], (0)), 100000000, 0, -373), (Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "weight"), 0, (0)), 100000000, 0, -372), 0), 100000000, 0, -371), 0), 100000000, 0, -370), 0, (("src/PrivateSignatures.ml", 802, 36712, 36714), ("src/PrivateSignatures.ml", 802, 36712, 36758), 0), 0, Tag1 ("Sek__PrivateSignatures", 205)), 0); (("finished", 1526), ((Tag1 (0, (Tag3 ((("iter", 1519)), [((("a")), 100000000, 0, -368)], (0)), 100000000, 0, -369), (Tag1 (0, (Tag3 ((("measure", 1517)), [((("a")), 100000000, 0, -368)], (0)), 100000000, 0, -367), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -366), 0), 100000000, 0, -365), 0), 100000000, 0, -364), 0, (("src/PrivateSignatures.ml", 803, 36759, 36761), ("src/PrivateSignatures.ml", 803, 36759, 36805), 0), 0, Tag1 ("Sek__PrivateSignatures", 206)), 0); (("get", 1527), ((Tag1 (0, (Tag3 ((("iter", 1519)), [((("a")), 100000000, 0, -361)], (0)), 100000000, 0, -363), (Tag1 (0, (Tag3 ((("measure", 1517)), [((("a")), 100000000, 0, -361)], (0)), 100000000, 0, -362), ((("a")), 100000000, 0, -361), 0), 100000000, 0, -360), 0), 100000000, 0, -359), 0, (("src/PrivateSignatures.ml", 804, 36806, 36808), ("src/PrivateSignatures.ml", 804, 36806, 36845), 0), 0, Tag1 ("Sek__PrivateSignatures", 207)), 0); (("set", 1528), ((Tag1 (0, (Tag3 ((("iter", 1519)), [((("a")), 100000000, 0, -356)], (0)), 100000000, 0, -358), (Tag1 (0, (Tag3 ((("measure", 1517)), [((("a")), 100000000, 0, -356)], (0)), 100000000, 0, -357), (Tag1 (0, ((("a")), 100000000, 0, -356), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -355), 0), 100000000, 0, -354), 0), 100000000, 0, -353), 0), 100000000, 0, -352), 0, (("src/PrivateSignatures.ml", 805, 36846, 36848), ("src/PrivateSignatures.ml", 805, 36846, 36893), 0), 0, Tag1 ("Sek__PrivateSignatures", 208)), 0); (("move", 1529), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "pov"), 0, (0)), 100000000, 0, -351), (Tag1 (0, (Tag3 ((("iter", 1519)), [((("a")), 100000000, 0, -349)], (0)), 100000000, 0, -350), (Tag1 (0, (Tag3 ((("measure", 1517)), [((("a")), 100000000, 0, -349)], (0)), 100000000, 0, -348), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -347), 0), 100000000, 0, -346), 0), 100000000, 0, -345), 0), 100000000, 0, -344), 0, (("src/PrivateSignatures.ml", 806, 36894, 36896), ("src/PrivateSignatures.ml", 806, 36894, 36943), 0), 0, Tag1 ("Sek__PrivateSignatures", 209)), 0); (("jump", 1530), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "pov"), 0, (0)), 100000000, 0, -343), (Tag1 (0, (Tag3 ((("iter", 1519)), [((("a")), 100000000, 0, -340)], (0)), 100000000, 0, -342), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -341), (Tag1 (0, (Tag3 ((("measure", 1517)), [((("a")), 100000000, 0, -340)], (0)), 100000000, 0, -339), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -338), 0), 100000000, 0, -337), 0), 100000000, 0, -336), 0), 100000000, 0, -335), 0), 100000000, 0, -334), 0, (("src/PrivateSignatures.ml", 807, 36944, 36946), ("src/PrivateSignatures.ml", 807, 36944, 37000), 0), 0, Tag1 ("Sek__PrivateSignatures", 210)), 0); (("get_segment", 1531), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "pov"), 0, (0)), 100000000, 0, -333), (Tag1 (0, (Tag3 ((("iter", 1519)), [((("a")), 100000000, 0, -330)], (0)), 100000000, 0, -332), (Tag1 (0, (Tag3 ((("measure", 1517)), [((("a")), 100000000, 0, -330)], (0)), 100000000, 0, -331), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "segment"), [((("a")), 100000000, 0, -330)], (0)), 100000000, 0, -329), 0), 100000000, 0, -328), 0), 100000000, 0, -327), 0), 100000000, 0, -326), 0, (("src/PrivateSignatures.ml", 808, 37001, 37003), ("src/PrivateSignatures.ml", 808, 37001, 37063), 0), 0, Tag1 ("Sek__PrivateSignatures", 211)), 0); (("get_writable_segment", 1532), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "pov"), 0, (0)), 100000000, 0, -325), (Tag1 (0, (Tag3 ((("iter", 1519)), [((("a")), 100000000, 0, -322)], (0)), 100000000, 0, -324), (Tag1 (0, (Tag3 ((("measure", 1517)), [((("a")), 100000000, 0, -322)], (0)), 100000000, 0, -323), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "segment"), [((("a")), 100000000, 0, -322)], (0)), 100000000, 0, -321), 0), 100000000, 0, -320), 0), 100000000, 0, -319), 0), 100000000, 0, -318), 0, (("src/PrivateSignatures.ml", 809, 37064, 37066), ("src/PrivateSignatures.ml", 809, 37064, 37135), 0), 0, Tag1 ("Sek__PrivateSignatures", 212)), 0); (("reach", 1533), ((Tag1 (0, (Tag3 ((("iter", 1519)), [((("a")), 100000000, 0, -315)], (0)), 100000000, 0, -317), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "weight"), 0, (0)), 100000000, 0, -316), (Tag1 (0, (Tag3 ((("measure", 1517)), [((("a")), 100000000, 0, -315)], (0)), 100000000, 0, -314), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -313), 0), 100000000, 0, -312), 0), 100000000, 0, -311), 0), 100000000, 0, -310), 0, (("src/PrivateSignatures.ml", 810, 37136, 37138), ("src/PrivateSignatures.ml", 810, 37136, 37189), 0), 0, Tag1 ("Sek__PrivateSignatures", 213)), 0); (("check", 1534), ((Tag1 (0, (Tag3 ((("iter", 1519)), [((("a")), 100000000, 0, -308)], (0)), 100000000, 0, -309), (Tag1 (0, (Tag3 ((("measure", 1517)), [((("a")), 100000000, 0, -308)], (0)), 100000000, 0, -307), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -306), 0), 100000000, 0, -305), 0), 100000000, 0, -304), 0, (("src/PrivateSignatures.ml", 811, 37190, 37192), ("src/PrivateSignatures.ml", 811, 37190, 37232), 0), 0, Tag1 ("Sek__PrivateSignatures", 214)), 0); (("print", 1535), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -300), (Tag3 (Tag1 ((Tag2 ("PPrint")), "document"), 0, (0)), 100000000, 0, -303), 0), 100000000, 0, -302), (Tag1 (0, (Tag3 ((("iter", 1519)), [((("a")), 100000000, 0, -300)], (0)), 100000000, 0, -301), (Tag1 (0, (Tag3 ((("measure", 1517)), [((("a")), 100000000, 0, -300)], (0)), 100000000, 0, -299), (Tag3 (Tag1 ((Tag2 ("PPrint")), "document"), 0, (0)), 100000000, 0, -298), 0), 100000000, 0, -297), 0), 100000000, 0, -296), 0), 100000000, 0, -295), 0, (("src/PrivateSignatures.ml", 812, 37233, 37235), ("src/PrivateSignatures.ml", 812, 37233, 37313), 0), 0, Tag1 ("Sek__PrivateSignatures", 215)), 0); (("reach_inside", 1536), ((Tag1 (0, (Tag3 ((("iter", 1519)), [((("a")), 100000000, 0, -292)], (0)), 100000000, 0, -294), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "weight"), 0, (0)), 100000000, 0, -293), (Tag1 (0, (Tag3 ((("measure", 1517)), [((("a")), 100000000, 0, -292)], (0)), 100000000, 0, -291), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -290), 0), 100000000, 0, -289), 0), 100000000, 0, -288), 0), 100000000, 0, -287), 0, (("src/PrivateSignatures.ml", 814, 37354, 37356), ("src/PrivateSignatures.ml", 814, 37354, 37414), 0), 0, Tag1 ("Sek__PrivateSignatures", 216)), 0); (("create_at_sentinel", 1537), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "pov"), 0, (0)), 100000000, 0, -286), (Tag1 (0, (Tag3 ((("t", 1518)), [((("a")), 100000000, 0, -283)], (0)), 100000000, 0, -285), (Tag1 (0, (Tag3 ((("measure", 1517)), [((("a")), 100000000, 0, -283)], (0)), 100000000, 0, -284), (Tag3 ((("iter", 1519)), [((("a")), 100000000, 0, -283)], (0)), 100000000, 0, -282), 0), 100000000, 0, -281), 0), 100000000, 0, -280), 0), 100000000, 0, -279), 0, (("src/PrivateSignatures.ml", 815, 37415, 37417), ("src/PrivateSignatures.ml", 815, 37415, 37478), 0), 0, Tag1 ("Sek__PrivateSignatures", 217)), 0); (("is_at_weight", 1538), ((Tag1 (0, (Tag3 ((("iter", 1519)), [((("a")), 100000000, 0, -277)], (0)), 100000000, 0, -278), (Tag1 (0, (Tag3 ((("measure", 1517)), [((("a")), 100000000, 0, -277)], (0)), 100000000, 0, -276), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sek__PrivateSignatures")), "weight"), 0, (0)), 100000000, 0, -275), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -274), 0), 100000000, 0, -273), 0), 100000000, 0, -272), 0), 100000000, 0, -271), 0, (("src/PrivateSignatures.ml", 816, 37479, 37481), ("src/PrivateSignatures.ml", 816, 37479, 37539), 0), 0, Tag1 ("Sek__PrivateSignatures", 218)), 0); (("unchecked_get", 1539), ((Tag1 (0, (Tag3 ((("iter", 1519)), [((("a")), 100000000, 0, -268)], (0)), 100000000, 0, -270), (Tag1 (0, (Tag3 ((("measure", 1517)), [((("a")), 100000000, 0, -268)], (0)), 100000000, 0, -269), ((("a")), 100000000, 0, -268), 0), 100000000, 0, -267), 0), 100000000, 0, -266), 0, (("src/PrivateSignatures.ml", 817, 37540, 37542), ("src/PrivateSignatures.ml", 817, 37540, 37589), 0), 0, Tag1 ("Sek__PrivateSignatures", 219)), 0); (("is_valid", 1540), ((Tag1 (0, (Tag3 ((("iter", 1519)), [((("a")), 100000000, 0, -265)], (0)), 100000000, 0, -264), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -263), 0), 100000000, 0, -262), 0, (("src/PrivateSignatures.ml", 818, 37590, 37592), ("src/PrivateSignatures.ml", 818, 37590, 37622), 0), 0, Tag1 ("Sek__PrivateSignatures", 220)), 0)])), Tag1 ([Tag1 (("t", 1541), ([((("a")), 100000000, 0, -563)], 1, 0, 1, 0, [7], [2], 0, 0, (("src/EphemeralSequence.mli", 35, 1656, 1658), ("src/EphemeralSequence.mli", 35, 1656, 1667), 0), 0, 0, 0, Tag1 ("Sek__EphemeralSequence", 28)), 1, 0); (("create", 1542), ((Tag1 (0, ((("a")), 100000000, 0, -562), (Tag3 ((("t", 1541)), [((("a")), 100000000, 0, -562)], (0)), 100000000, 0, -561), 0), 100000000, 0, -560), 0, (("src/EphemeralSequence.mli", 36, 1668, 1670), ("src/EphemeralSequence.mli", 36, 1668, 1693), 0), 0, Tag1 ("Sek__EphemeralSequence", 29)), 0); (("make", 1543), ((Tag1 (0, ((("a")), 100000000, 0, -558), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "length"), 0, (0)), 100000000, 0, -559), (Tag1 (0, ((("a")), 100000000, 0, -558), (Tag3 ((("t", 1541)), [((("a")), 100000000, 0, -558)], (0)), 100000000, 0, -557), 0), 100000000, 0, -556), 0), 100000000, 0, -555), 0), 100000000, 0, -554), 0, (("src/EphemeralSequence.mli", 37, 1694, 1696), ("src/EphemeralSequence.mli", 37, 1694, 1733), 0), 0, Tag1 ("Sek__EphemeralSequence", 30)), 0); (("init", 1544), ((Tag1 (0, ((("a")), 100000000, 0, -550), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "length"), 0, (0)), 100000000, 0, -553), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "index"), 0, (0)), 100000000, 0, -552), ((("a")), 100000000, 0, -550), 0), 100000000, 0, -551), (Tag3 ((("t", 1541)), [((("a")), 100000000, 0, -550)], (0)), 100000000, 0, -549), 0), 100000000, 0, -548), 0), 100000000, 0, -547), 0), 100000000, 0, -546), 0, (("src/EphemeralSequence.mli", 38, 1734, 1736), ("src/EphemeralSequence.mli", 38, 1734, 1784), 0), 0, Tag1 ("Sek__EphemeralSequence", 31)), 0); (("default", 1545), ((Tag1 (0, (Tag3 ((("t", 1541)), [((("a")), 100000000, 0, -544)], (0)), 100000000, 0, -545), ((("a")), 100000000, 0, -544), 0), 100000000, 0, -543), 0, (("src/EphemeralSequence.mli", 39, 1785, 1787), ("src/EphemeralSequence.mli", 39, 1785, 1811), 0), 0, Tag1 ("Sek__EphemeralSequence", 32)), 0); (("length", 1546), ((Tag1 (0, (Tag3 ((("t", 1541)), [((("a")), 100000000, 0, -542)], (0)), 100000000, 0, -541), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -540), 0), 100000000, 0, -539), 0, (("src/EphemeralSequence.mli", 40, 1812, 1814), ("src/EphemeralSequence.mli", 40, 1812, 1838), 0), 0, Tag1 ("Sek__EphemeralSequence", 33)), 0); (("is_empty", 1547), ((Tag1 (0, (Tag3 ((("t", 1541)), [((("a")), 100000000, 0, -538)], (0)), 100000000, 0, -537), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -536), 0), 100000000, 0, -535), 0, (("src/EphemeralSequence.mli", 41, 1839, 1841), ("src/EphemeralSequence.mli", 41, 1839, 1868), 0), 0, Tag1 ("Sek__EphemeralSequence", 34)), 0); (("clear", 1548), ((Tag1 (0, (Tag3 ((("t", 1541)), [((("a")), 100000000, 0, -534)], (0)), 100000000, 0, -533), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -532), 0), 100000000, 0, -531), 0, (("src/EphemeralSequence.mli", 42, 1869, 1871), ("src/EphemeralSequence.mli", 42, 1869, 1895), 0), 0, Tag1 ("Sek__EphemeralSequence", 35)), 0); (("shallow_copy", 1549), ((Tag1 (0, (Tag3 ((("t", 1541)), [((("a")), 100000000, 0, -529)], (0)), 100000000, 0, -530), (Tag3 ((("t", 1541)), [((("a")), 100000000, 0, -529)], (0)), 100000000, 0, -528), 0), 100000000, 0, -527), 0, (("src/EphemeralSequence.mli", 43, 1896, 1898), ("src/EphemeralSequence.mli", 43, 1896, 1929), 0), 0, Tag1 ("Sek__EphemeralSequence", 36)), 0); (("assign", 1550), ((Tag1 (0, (Tag3 ((("t", 1541)), [((("a")), 100000000, 0, -525)], (0)), 100000000, 0, -526), (Tag1 (0, (Tag3 ((("t", 1541)), [((("a")), 100000000, 0, -525)], (0)), 100000000, 0, -524), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -523), 0), 100000000, 0, -522), 0), 100000000, 0, -521), 0, (("src/EphemeralSequence.mli", 44, 1930, 1932), ("src/EphemeralSequence.mli", 44, 1930, 1964), 0), 0, Tag1 ("Sek__EphemeralSequence", 37)), 0); (("push", 1551), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PrivateSignatures"), "pov"), 0, (0)), 100000000, 0, -520), (Tag1 (0, (Tag3 ((("t", 1541)), [((("a")), 100000000, 0, -518)], (0)), 100000000, 0, -519), (Tag1 (0, ((("a")), 100000000, 0, -518), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -517), 0), 100000000, 0, -516), 0), 100000000, 0, -515), 0), 100000000, 0, -514), 0, (("src/EphemeralSequence.mli", 45, 1965, 1967), ("src/EphemeralSequence.mli", 45, 1965, 2003), 0), 0, Tag1 ("Sek__EphemeralSequence", 38)), 0); (("pop", 1552), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PrivateSignatures"), "pov"), 0, (0)), 100000000, 0, -513), (Tag1 (0, (Tag3 ((("t", 1541)), [((("a")), 100000000, 0, -511)], (0)), 100000000, 0, -512), ((("a")), 100000000, 0, -511), 0), 100000000, 0, -510), 0), 100000000, 0, -509), 0, (("src/EphemeralSequence.mli", 46, 2004, 2006), ("src/EphemeralSequence.mli", 46, 2004, 2033), 0), 0, Tag1 ("Sek__EphemeralSequence", 39)), 0); (("peek", 1553), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PrivateSignatures"), "pov"), 0, (0)), 100000000, 0, -508), (Tag1 (0, (Tag3 ((("t", 1541)), [((("a")), 100000000, 0, -506)], (0)), 100000000, 0, -507), ((("a")), 100000000, 0, -506), 0), 100000000, 0, -505), 0), 100000000, 0, -504), 0, (("src/EphemeralSequence.mli", 47, 2034, 2036), ("src/EphemeralSequence.mli", 47, 2034, 2064), 0), 0, Tag1 ("Sek__EphemeralSequence", 40)), 0); (("get", 1554), ((Tag1 (0, (Tag3 ((("t", 1541)), [((("a")), 100000000, 0, -501)], (0)), 100000000, 0, -503), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "index"), 0, (0)), 100000000, 0, -502), ((("a")), 100000000, 0, -501), 0), 100000000, 0, -500), 0), 100000000, 0, -499), 0, (("src/EphemeralSequence.mli", 48, 2065, 2067), ("src/EphemeralSequence.mli", 48, 2065, 2096), 0), 0, Tag1 ("Sek__EphemeralSequence", 41)), 0); (("set", 1555), ((Tag1 (0, (Tag3 ((("t", 1541)), [((("a")), 100000000, 0, -496)], (0)), 100000000, 0, -498), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "index"), 0, (0)), 100000000, 0, -497), (Tag1 (0, ((("a")), 100000000, 0, -496), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -495), 0), 100000000, 0, -494), 0), 100000000, 0, -493), 0), 100000000, 0, -492), 0, (("src/EphemeralSequence.mli", 49, 2097, 2099), ("src/EphemeralSequence.mli", 49, 2097, 2136), 0), 0, Tag1 ("Sek__EphemeralSequence", 42)), 0); (("concat", 1556), ((Tag1 (0, (Tag3 ((("t", 1541)), [((("a")), 100000000, 0, -489)], (0)), 100000000, 0, -491), (Tag1 (0, (Tag3 ((("t", 1541)), [((("a")), 100000000, 0, -489)], (0)), 100000000, 0, -490), (Tag3 ((("t", 1541)), [((("a")), 100000000, 0, -489)], (0)), 100000000, 0, -488), 0), 100000000, 0, -487), 0), 100000000, 0, -486), 0, (("src/EphemeralSequence.mli", 50, 2137, 2139), ("src/EphemeralSequence.mli", 50, 2137, 2172), 0), 0, Tag1 ("Sek__EphemeralSequence", 43)), 0); (("append", 1557), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PrivateSignatures"), "pov"), 0, (0)), 100000000, 0, -485), (Tag1 (0, (Tag3 ((("t", 1541)), [((("a")), 100000000, 0, -483)], (0)), 100000000, 0, -484), (Tag1 (0, (Tag3 ((("t", 1541)), [((("a")), 100000000, 0, -483)], (0)), 100000000, 0, -482), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -481), 0), 100000000, 0, -480), 0), 100000000, 0, -479), 0), 100000000, 0, -478), 0, (("src/EphemeralSequence.mli", 51, 2173, 2175), ("src/EphemeralSequence.mli", 51, 2173, 2215), 0), 0, Tag1 ("Sek__EphemeralSequence", 44)), 0); (("split", 1558), ((Tag1 (0, (Tag3 ((("t", 1541)), [((("a")), 100000000, 0, -474)], (0)), 100000000, 0, -477), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "index"), 0, (0)), 100000000, 0, -476), (Tag2 ([(Tag3 ((("t", 1541)), [((("a")), 100000000, 0, -474)], (0)), 100000000, 0, -473); (Tag3 ((("t", 1541)), [((("a")), 100000000, 0, -474)], (0)), 100000000, 0, -475)]), 100000000, 0, -472), 0), 100000000, 0, -471), 0), 100000000, 0, -470), 0, (("src/EphemeralSequence.mli", 52, 2216, 2218), ("src/EphemeralSequence.mli", 52, 2216, 2258), 0), 0, Tag1 ("Sek__EphemeralSequence", 45)), 0); (("carve", 1559), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PrivateSignatures"), "pov"), 0, (0)), 100000000, 0, -469), (Tag1 (0, (Tag3 ((("t", 1541)), [((("a")), 100000000, 0, -466)], (0)), 100000000, 0, -468), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "length"), 0, (0)), 100000000, 0, -467), (Tag3 ((("t", 1541)), [((("a")), 100000000, 0, -466)], (0)), 100000000, 0, -465), 0), 100000000, 0, -464), 0), 100000000, 0, -463), 0), 100000000, 0, -462), 0, (("src/EphemeralSequence.mli", 53, 2259, 2261), ("src/EphemeralSequence.mli", 53, 2259, 2302), 0), 0, Tag1 ("Sek__EphemeralSequence", 46)), 0); (("take", 1560), ((Tag1 (0, (Tag3 ((("t", 1541)), [((("a")), 100000000, 0, -461)], (0)), 100000000, 0, -460), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "length"), 0, (0)), 100000000, 0, -459), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -458), 0), 100000000, 0, -457), 0), 100000000, 0, -456), 0, (("src/EphemeralSequence.mli", 54, 2303, 2305), ("src/EphemeralSequence.mli", 54, 2303, 2338), 0), 0, Tag1 ("Sek__EphemeralSequence", 47)), 0); (("drop", 1561), ((Tag1 (0, (Tag3 ((("t", 1541)), [((("a")), 100000000, 0, -455)], (0)), 100000000, 0, -454), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "length"), 0, (0)), 100000000, 0, -453), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -452), 0), 100000000, 0, -451), 0), 100000000, 0, -450), 0, (("src/EphemeralSequence.mli", 55, 2339, 2341), ("src/EphemeralSequence.mli", 55, 2339, 2374), 0), 0, Tag1 ("Sek__EphemeralSequence", 48)), 0); (("iter_segments", 1562), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PrivateSignatures"), "pov"), 0, (0)), 100000000, 0, -449), (Tag1 (0, (Tag3 ((("t", 1541)), [((("a")), 100000000, 0, -447)], (0)), 100000000, 0, -448), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "segments"), [((("a")), 100000000, 0, -447)], (0)), 100000000, 0, -446), 0), 100000000, 0, -445), 0), 100000000, 0, -444), 0, (("src/EphemeralSequence.mli", 56, 2375, 2377), ("src/EphemeralSequence.mli", 56, 2375, 2423), 0), 0, Tag1 ("Sek__EphemeralSequence", 49)), 0); (("to_list", 1563), ((Tag1 (0, (Tag3 ((("t", 1541)), [((("a")), 100000000, 0, -442)], (0)), 100000000, 0, -443), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -442)], (0)), 100000000, 0, -441), 0), 100000000, 0, -440), 0, (("src/EphemeralSequence.mli", 57, 2424, 2426), ("src/EphemeralSequence.mli", 57, 2424, 2455), 0), 0, Tag1 ("Sek__EphemeralSequence", 50)), 0); (("to_array", 1564), ((Tag1 (0, (Tag3 ((("t", 1541)), [((("a")), 100000000, 0, -438)], (0)), 100000000, 0, -439), (Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -438)], (0)), 100000000, 0, -437), 0), 100000000, 0, -436), 0, (("src/EphemeralSequence.mli", 58, 2456, 2458), ("src/EphemeralSequence.mli", 58, 2456, 2489), 0), 0, Tag1 ("Sek__EphemeralSequence", 51)), 0); (("of_array_segment", 1565), ((Tag1 (0, ((("a")), 100000000, 0, -432), (Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [((("a")), 100000000, 0, -432)], (0)), 100000000, 0, -435), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "index"), 0, (0)), 100000000, 0, -434), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "length"), 0, (0)), 100000000, 0, -433), (Tag3 ((("t", 1541)), [((("a")), 100000000, 0, -432)], (0)), 100000000, 0, -431), 0), 100000000, 0, -430), 0), 100000000, 0, -429), 0), 100000000, 0, -428), 0), 100000000, 0, -427), 0, (("src/EphemeralSequence.mli", 59, 2490, 2492), ("src/EphemeralSequence.mli", 59, 2490, 2556), 0), 0, Tag1 ("Sek__EphemeralSequence", 52)), 0); (("snapshot_and_clear", 1566), ((Tag1 (0, (Tag3 ((("t", 1541)), [((("a")), 100000000, 0, -425)], (0)), 100000000, 0, -426), (Tag3 (Tag1 ((("SSeq", 1482)), "t"), [((("a")), 100000000, 0, -425)], (0)), 100000000, 0, -424), 0), 100000000, 0, -423), 0, (("src/EphemeralSequence.mli", 60, 2557, 2559), ("src/EphemeralSequence.mli", 60, 2557, 2601), 0), 0, Tag1 ("Sek__EphemeralSequence", 53)), 0); (("edit", 1567), ((Tag1 (0, (Tag3 (Tag1 ((("SSeq", 1482)), "t"), [((("a")), 100000000, 0, -421)], (0)), 100000000, 0, -422), (Tag3 ((("t", 1541)), [((("a")), 100000000, 0, -421)], (0)), 100000000, 0, -420), 0), 100000000, 0, -419), 0, (("src/EphemeralSequence.mli", 61, 2602, 2604), ("src/EphemeralSequence.mli", 61, 2602, 2632), 0), 0, Tag1 ("Sek__EphemeralSequence", 54)), 0); (("format", 1568), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("PPrint")), "ToFormatter"), "channel"), 0, (0)), 100000000, 0, -418), (Tag1 (0, (Tag3 ((("t", 1541)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -417)], (0)), 100000000, 0, -416), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -415), 0), 100000000, 0, -414), 0), 100000000, 0, -413), 0, (("src/EphemeralSequence.mli", 62, 2633, 2635), ("src/EphemeralSequence.mli", 62, 2633, 2691), 0), 0, Tag1 ("Sek__EphemeralSequence", 55)), 0); (("check", 1569), ((Tag1 (0, (Tag3 ((("t", 1541)), [((("a")), 100000000, 0, -412)], (0)), 100000000, 0, -411), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -410), 0), 100000000, 0, -409), 0, (("src/EphemeralSequence.mli", 63, 2692, 2694), ("src/EphemeralSequence.mli", 63, 2692, 2718), 0), 0, Tag1 ("Sek__EphemeralSequence", 56)), 0); Tag3 (("Hooks", 1570), 0, (Tag1 ([Tag1 (("t", 1571), ([((("a")), 100000000, 0, -622)], 1, 0, 1, ((Tag3 ((("t", 1541)), [((("a")), 100000000, 0, -622)], (0)), 100000000, 0, -621)), [7], [2], 0, 0, (("src/EphemeralSequence.mli", 66, 2783, 2787), ("src/EphemeralSequence.mli", 66, 2783, 2810), 0), 0, 0, 0, Tag1 ("Sek__EphemeralSequence", 57)), 0, 0); (("weight", 1572), ((Tag1 (0, (Tag3 ((("t", 1571)), [((("a")), 100000000, 0, -620)], (0)), 100000000, 0, -619), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PrivateSignatures"), "weight"), 0, (0)), 100000000, 0, -618), 0), 100000000, 0, -617), 0, (("src/EphemeralSequence.mli", 67, 2811, 2815), ("src/EphemeralSequence.mli", 67, 2811, 2842), 0), 0, Tag1 ("Sek__EphemeralSequence", 58)), 0); (("dummy", 1573), ((Tag1 (0, (Tag3 ((("t", 1571)), [((("a")), 100000000, 0, -615)], (0)), 100000000, 0, -616), (Tag3 (Tag1 ((("SChunk", 1480)), "t"), [((("a")), 100000000, 0, -615)], (0)), 100000000, 0, -614), 0), 100000000, 0, -613), 0, (("src/EphemeralSequence.mli", 68, 2843, 2847), ("src/EphemeralSequence.mli", 68, 2843, 2878), 0), 0, Tag1 ("Sek__EphemeralSequence", 59)), 0); (("front", 1574), ((Tag1 (0, (Tag3 ((("t", 1571)), [((("a")), 100000000, 0, -611)], (0)), 100000000, 0, -612), (Tag3 (Tag1 ((("SChunk", 1480)), "t"), [((("a")), 100000000, 0, -611)], (0)), 100000000, 0, -610), 0), 100000000, 0, -609), 0, (("src/EphemeralSequence.mli", 69, 2879, 2883), ("src/EphemeralSequence.mli", 69, 2879, 2914), 0), 0, Tag1 ("Sek__EphemeralSequence", 60)), 0); (("middle", 1575), ((Tag1 (0, (Tag3 ((("t", 1571)), [((("a")), 100000000, 0, -607)], (0)), 100000000, 0, -608), (Tag3 (Tag1 ((("M", 1483)), "t"), [(Tag3 (Tag1 ((("SChunk", 1480)), "t"), [((("a")), 100000000, 0, -607)], (0)), 100000000, 0, -606)], (0)), 100000000, 0, -605), 0), 100000000, 0, -604), 0, (("src/EphemeralSequence.mli", 70, 2915, 2919), ("src/EphemeralSequence.mli", 70, 2915, 2955), 0), 0, Tag1 ("Sek__EphemeralSequence", 61)), 0); (("back", 1576), ((Tag1 (0, (Tag3 ((("t", 1571)), [((("a")), 100000000, 0, -602)], (0)), 100000000, 0, -603), (Tag3 (Tag1 ((("SChunk", 1480)), "t"), [((("a")), 100000000, 0, -602)], (0)), 100000000, 0, -601), 0), 100000000, 0, -600), 0, (("src/EphemeralSequence.mli", 71, 2956, 2960), ("src/EphemeralSequence.mli", 71, 2956, 2990), 0), 0, Tag1 ("Sek__EphemeralSequence", 62)), 0); (("weight_front", 1577), ((Tag1 (0, (Tag3 ((("t", 1571)), [((("a")), 100000000, 0, -599)], (0)), 100000000, 0, -598), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PrivateSignatures"), "weight"), 0, (0)), 100000000, 0, -597), 0), 100000000, 0, -596), 0, (("src/EphemeralSequence.mli", 72, 2991, 2995), ("src/EphemeralSequence.mli", 72, 2991, 3028), 0), 0, Tag1 ("Sek__EphemeralSequence", 63)), 0); (("schunk_uniquely_owned", 1578), ((Tag1 (0, (Tag3 ((("t", 1571)), [((("a")), 100000000, 0, -594)], (0)), 100000000, 0, -595), (Tag1 (0, (Tag3 (Tag1 ((("SChunk", 1480)), "t"), [((("a")), 100000000, 0, -594)], (0)), 100000000, 0, -593), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -592), 0), 100000000, 0, -591), 0), 100000000, 0, -590), 0, (("src/EphemeralSequence.mli", 73, 3029, 3033), ("src/EphemeralSequence.mli", 73, 3029, 3088), 0), 0, Tag1 ("Sek__EphemeralSequence", 64)), 0); (("ensure_schunk_uniquely_owned", 1579), ((Tag1 (0, (Tag3 ((("t", 1571)), [((("a")), 100000000, 0, -587)], (0)), 100000000, 0, -589), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sek__")), "PublicTypeAbbreviations"), "index"), 0, (0)), 100000000, 0, -588), (Tag1 (0, (Tag3 (Tag1 ((("SChunk", 1480)), "t"), [((("a")), 100000000, 0, -587)], (0)), 100000000, 0, -586), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -585), 0), 100000000, 0, -584), 0), 100000000, 0, -583), 0), 100000000, 0, -582), 0, (("src/EphemeralSequence.mli", 74, 3089, 3093), ("src/EphemeralSequence.mli", 74, 3089, 3164), 0), 0, Tag1 ("Sek__EphemeralSequence", 65)), 0); Tag1 (("birth", 1580), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/EphemeralSequence.mli", 75, 3165, 3169), ("src/EphemeralSequence.mli", 75, 3165, 3179), 0), 0, 0, 0, Tag1 ("Sek__EphemeralSequence", 66)), 1, 0); (("iterator_is_born", 1581), ((Tag1 (0, (Tag3 ((("t", 1571)), [((("a")), 100000000, 0, -581)], (0)), 100000000, 0, -580), (Tag3 ((("birth", 1580)), 0, (0)), 100000000, 0, -579), 0), 100000000, 0, -578), 0, (("src/EphemeralSequence.mli", 76, 3180, 3184), ("src/EphemeralSequence.mli", 76, 3180, 3220), 0), 0, Tag1 ("Sek__EphemeralSequence", 67)), 0); (("is_valid", 1582), ((Tag1 (0, (Tag3 ((("t", 1571)), [((("a")), 100000000, 0, -577)], (0)), 100000000, 0, -576), (Tag1 (0, (Tag3 ((("birth", 1580)), 0, (0)), 100000000, 0, -575), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -574), 0), 100000000, 0, -573), 0), 100000000, 0, -572), 0, (("src/EphemeralSequence.mli", 77, 3221, 3225), ("src/EphemeralSequence.mli", 77, 3221, 3261), 0), 0, Tag1 ("Sek__EphemeralSequence", 68)), 0); (("invalidate_iterators", 1583), ((Tag1 (0, (Tag3 ((("t", 1571)), [((("a")), 100000000, 0, -571)], (0)), 100000000, 0, -570), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -569), 0), 100000000, 0, -568), 0, (("src/EphemeralSequence.mli", 78, 3262, 3266), ("src/EphemeralSequence.mli", 78, 3262, 3305), 0), 0, Tag1 ("Sek__EphemeralSequence", 69)), 0); (("invalidate_iterators_except", 1584), ((Tag1 (0, (Tag3 ((("t", 1571)), [((("a")), 100000000, 0, -567)], (0)), 100000000, 0, -566), (Tag3 ((("birth", 1580)), 0, (0)), 100000000, 0, -565), 0), 100000000, 0, -564), 0, (("src/EphemeralSequence.mli", 79, 3306, 3310), ("src/EphemeralSequence.mli", 79, 3306, 3357), 0), 0, Tag1 ("Sek__EphemeralSequence", 70)), 0)]), 0, (("src/EphemeralSequence.mli", 65, 2762, 2764), ("src/EphemeralSequence.mli", 80, 3358, 3363), 0), Tag1 ("Sek__EphemeralSequence", 71)), 0, 0)]))))), 0, (("src/EphemeralSequence.mli", 25, 1332, 1332), ("src/EphemeralSequence.mli", 81, 3364, 3367), 0), Tag1 ("Sek__EphemeralSequence", 72)), 0, 0)], "Sek__EphemeralSequence", [("Sek__EphemeralSequence", ("\177\001\252%Py;\190>\142\220\241^8\023\b")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sek__PublicTypeAbbreviations", ("\201\251\244\167\199\157\227\233\251\227b\132\146]>\232")); ("Sek__PublicSettings", ("\133\220\011\157jd\181\\V\002\146\022t\166u\149")); ("Sek__PrivateSignatures", ("\187[j\006\197\232[2-\184F\232V~a\184")); ("Sek__Owner", ("\228~\155T\164\209\210ZNr\165\246\165\216\130-")); ("Sek__", ("b\188\017\179d|~L\019\214\028\188\145y\210\250")); ("PPrintEngine", ("V_\162\193\202\031c\185\nQ\232bL\0299\195")); ("PPrint", ("a\179\180\0030=\b^\136P\234\220\171\0210A")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

    end

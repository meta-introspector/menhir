type kind = Interface | Implementation | Signature
type info = { format : Read.format; kind : kind; }
val ml : info
val mli : info
val classic : info -> Read.kind option
type synonyms = info Name.Map.t
type task = {
  files : (info * string * Namespaced.t option) list;
  seeds : Namespaced.t list;
  invisibles : Namespaced.Set.t;
  libs : Name.t list;
  opens : Paths.S.t list;
}
val expand_dir : string -> string
val make_abs : bool -> Pkg.t -> Pkg.t
val is_stdlib_pkg : Name.t -> bool
("DEBUG:rule", [Tag1 (("kind", 496), (0, 0, Tag1 ([(("Interface", 270), (0), 0, (("core/common.mli", 3, 30, 42), ("core/common.mli", 3, 30, 51), 0), 0, Tag1 ("Common", 1)); (("Implementation", 271), (0), 0, (("core/common.mli", 3, 30, 52), ("core/common.mli", 3, 30, 68), 0), 0, Tag1 ("Common", 2)); (("Signature", 272), (0), 0, (("core/common.mli", 3, 30, 69), ("core/common.mli", 3, 30, 80), 0), 0, Tag1 ("Common", 3))], 0), 1, 0, 0, 0, 0, 0, (("core/common.mli", 3, 30, 30), ("core/common.mli", 3, 30, 80), 0), 0, 1, 0, Tag1 ("Common", 0)), 1, 0); Tag1 (("info", 497), (0, 0, [[(("format", 280), 0, (Tag3 (Tag1 ((Tag2 ("Read")), "format"), 0, (0)), 100000000, 0, -43), (("core/common.mli", 4, 81, 95), ("core/common.mli", 4, 81, 115), 0), 0, Tag1 ("Common", 5)); (("kind", 281), 0, (Tag3 ((("kind", 496)), 0, (0)), 100000000, 0, -44), (("core/common.mli", 4, 81, 116), ("core/common.mli", 4, 81, 127), 0), 0, Tag1 ("Common", 6))]], 1, 0, 0, 0, 0, 0, (("core/common.mli", 4, 81, 81), ("core/common.mli", 4, 81, 129), 0), 0, 0, 0, Tag1 ("Common", 4)), 1, 0); (("ml", 498), ((Tag3 ((("info", 497)), 0, (0)), 100000000, 0, -42), 0, (("core/common.mli", 7, 159, 159), ("core/common.mli", 7, 159, 171), 0), 0, Tag1 ("Common", 7)), 0); (("mli", 499), ((Tag3 ((("info", 497)), 0, (0)), 100000000, 0, -41), 0, (("core/common.mli", 8, 172, 172), ("core/common.mli", 8, 172, 185), 0), 0, Tag1 ("Common", 8)), 0); (("classic", 500), ((Tag1 (0, (Tag3 ((("info", 497)), 0, (0)), 100000000, 0, -40), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Read")), "kind"), 0, (0)), 100000000, 0, -39)], (0)), 100000000, 0, -38), 0), 100000000, 0, -37), 0, (("core/common.mli", 11, 224, 224), ("core/common.mli", 11, 224, 261), 0), 0, Tag1 ("Common", 9)), 0); Tag1 (("synonyms", 501), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Name")), "Map"), "t"), [(Tag3 ((("info", 497)), 0, (0)), 100000000, 0, -36)], (0)), 100000000, 0, -35)), 0, 0, 0, 0, (("core/common.mli", 14, 310, 310), ("core/common.mli", 14, 310, 342), 0), 0, 0, 0, Tag1 ("Common", 10)), 1, 0); Tag1 (("task", 502), (0, 0, [[(("files", 366), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("info", 497)), 0, (0)), 100000000, 0, -24); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -25); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Namespaced")), "t"), 0, (0)), 100000000, 0, -27)], (0)), 100000000, 0, -26)]), 100000000, 0, -23)], (0)), 100000000, 0, -22), (("core/common.mli", 19, 378, 382), ("core/common.mli", 19, 378, 432), 0), 0, Tag1 ("Common", 12)); (("seeds", 367), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Namespaced")), "t"), 0, (0)), 100000000, 0, -29)], (0)), 100000000, 0, -28), (("core/common.mli", 21, 465, 469), ("core/common.mli", 21, 465, 494), 0), 0, Tag1 ("Common", 13)); (("invisibles", 415), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Namespaced")), "Set"), "t"), 0, (0)), 100000000, 0, -30), (("core/common.mli", 23, 554, 558), ("core/common.mli", 23, 554, 587), 0), 0, Tag1 ("Common", 14)); (("libs", 416), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Name")), "t"), 0, (0)), 100000000, 0, -32)], (0)), 100000000, 0, -31), (("core/common.mli", 24, 625, 629), ("core/common.mli", 24, 625, 647), 0), 0, Tag1 ("Common", 15)); (("opens", 437), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Paths")), "S"), "t"), 0, (0)), 100000000, 0, -34)], (0)), 100000000, 0, -33), (("core/common.mli", 25, 692, 696), ("core/common.mli", 25, 692, 717), 0), 0, Tag1 ("Common", 16))]], 1, 0, 0, 0, 0, 0, (("core/common.mli", 17, 362, 362), ("core/common.mli", 26, 771, 774), 0), 0, 0, 0, Tag1 ("Common", 11)), 1, 0); (("expand_dir", 503), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -21), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -20), 0), 100000000, 0, -19), 0, (("core/common.mli", 30, 844, 844), ("core/common.mli", 30, 844, 876), 0), 0, Tag1 ("Common", 17)), 0); (("make_abs", 504), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -18), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Pkg")), "t"), 0, (0)), 100000000, 0, -17), (Tag3 (Tag1 ((Tag2 ("Pkg")), "t"), 0, (0)), 100000000, 0, -16), 0), 100000000, 0, -15), 0), 100000000, 0, -14), 0, (("core/common.mli", 33, 949, 949), ("core/common.mli", 33, 949, 985), 0), 0, Tag1 ("Common", 18)), 0); (("is_stdlib_pkg", 505), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Name")), "t"), 0, (0)), 100000000, 0, -13), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("core/common.mli", 37, 1079, 1079), ("core/common.mli", 37, 1079, 1112), 0), 0, Tag1 ("Common", 19)), 0); (("classify", 506), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Fault")), "Policy"), "t"), 0, (0)), 100000000, 0, -10), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Name")), "map"), [(Tag3 ((("info", 497)), 0, (0)), 100000000, 0, -9)], (0)), 100000000, 0, -8), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -7), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("info", 497)), 0, (0)), 100000000, 0, -6)], (0)), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("core/common.mli", 41, 1221, 1221), ("core/common.mli", 41, 1221, 1291), 0), 0, Tag1 ("Common", 20)), 0)], "Common", [("Common", ("\142K\127m\162\172Ac\028XFp(\185\181\007")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Unitname", ("\155n\201\211\249\229\028$\220J\172\018<\249\171\158")); ("Uloc", ("\172\208h 6@\178[\156\249\206\172%\133\167\239")); ("Syntaxerr", ("\219y W\156\199S\188\018+\196\144>\187\159f")); ("Support", ("YA;\029\006a\255\202R\137\181\133\184\209)\005")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Schematic", ("\180\179\011\178\017I\241^\235\149h\161k\b\209\142")); ("Read", ("\252*\146t'\236>\158\170\160=\012nNp\144")); ("Pp", ("\167zCQ\134\167\215\2517\247\158\219\250\223.\197")); ("Pkg", ("SneaP\023\210\210\240\218\128bA\te\239")); ("Paths", ("\000\152\242H\139l\222\245\245Ndb\202P^\175")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Parser", ("7'\1782\253\248\214\163]8\227\231&\145\183;")); ("Namespaced", ("%\208\253;3\161W$\236\1838K\195z\1493")); ("Name", ("4? \167\131n\184\000\214\031\017\027\153\002]^")); ("Module", ("2_s\200\188\137\247\158>\168\195\023\195\n\011V")); ("Modname", ("v\160\183\003\212\232\177\007\228-\002\145i\230\255\248")); ("M2l", ("\208\241\201a\199\212\172v;\135t\185\027\196~\029")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Loc", ("ax\213\152\006\175?\212%\0014\238\021S\218=")); ("Lexer", ("d\166[g\003\193p\201\147\190pL\152^\136A")); ("Id", ("w\207`(\179n\181\161\155\252\243\195\006\139NO")); ("Fault", ("\232\144\144(K\139\181-h!\017\212@?\127\199")); ("Docstrings", ("\216\171\176\031*\203\162\186%\175\201qq\189\139U")); ("Deps", ("%\164\252&\165z\218\221\023\182\235\223+\147\145\195")); ("CamlinternalMenhirLib", ("\171m\238\135\252\210\222v\200\202\178\241L\143\025\153")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216"))], [(0)])
val classify : Fault.Policy.t -> info Name.map -> string -> info option

type pattern_matching_error =
    BadPattern of Names.constructor * EConstr.constr
  | BadConstructor of Names.constructor * Names.inductive
  | WrongNumargConstructor of { cstr : Names.constructor; expanded : bool;
      nargs : int; expected_nassums : int; expected_ndecls : int;
    }
  | WrongNumargInductive of { ind : Names.inductive; expanded : bool;
      nargs : int; expected_nassums : int; expected_ndecls : int;
    }
  | UnusedClause of Glob_term.cases_pattern list
  | NonExhaustive of Glob_term.cases_pattern list
  | CannotInferPredicate of (EConstr.constr * EConstr.types) array
exception PatternMatchingError of Environ.env * Evd.evar_map *
            pattern_matching_error
val error_wrong_numarg_constructor :
  ?loc:Loc.t ->
  Environ.env ->
  cstr:Names.constructor ->
  expanded:bool ->
  nargs:int -> expected_nassums:int -> expected_ndecls:int -> 'a
val error_wrong_numarg_inductive :
  ?loc:Loc.t ->
  Environ.env ->
  ind:Names.inductive ->
  expanded:bool ->
  nargs:int -> expected_nassums:int -> expected_ndecls:int -> 'a
val irrefutable : Environ.env -> Glob_term.cases_pattern -> bool
val compile_cases :
  ?loc:Loc.t ->
  program_mode:bool ->
  Constr.case_style ->
  (Evardefine.type_constraint ->
   GlobEnv.t ->
   Evd.evar_map ->
   Glob_term.glob_constr -> Evd.evar_map * EConstr.unsafe_judgment) *
  Evd.evar_map ->
  Evardefine.type_constraint ->
  GlobEnv.t ->
  Glob_term.glob_constr option * Glob_term.tomatch_tuples *
  Glob_term.cases_clauses -> Evd.evar_map * EConstr.unsafe_judgment
val constr_of_pat :
  Environ.env ->
  Evd.evar_map ->
  EConstr.rel_context ->
  Glob_term.cases_pattern ->
  Names.Id.Set.t ->
  Evd.evar_map * Glob_term.cases_pattern *
  (EConstr.rel_context * EConstr.constr *
   (EConstr.types * EConstr.constr list) * Glob_term.cases_pattern) *
  Names.Id.Set.t
type 'a rhs = {
  rhs_env : GlobEnv.t;
  rhs_vars : Names.Id.Set.t;
  avoid_ids : Names.Id.Set.t;
  it : 'a option;
}
type 'a equation = {
  patterns : Glob_term.cases_pattern list;
  rhs : 'a rhs;
  alias_stack : Names.Name.t list;
  eqn_loc : Loc.t option;
  orig : int option;
  catch_all_vars : Names.Id.t CAst.t list;
}
type 'a matrix = 'a equation list
type tomatch_type =
    IsInd of EConstr.types * Inductiveops.inductive_type * Names.Name.t list
  | NotInd of EConstr.constr option * EConstr.types
type tomatch_status =
    Pushed of
      (bool * ((EConstr.constr * tomatch_type) * int list * Names.Name.t))
  | Alias of
      (bool *
       (Names.Name.t * EConstr.constr * (EConstr.constr * EConstr.types)))
  | NonDepAlias
  | Abstract of int * EConstr.rel_declaration
type tomatch_stack = tomatch_status list
type pattern_history =
    Top
  | MakeConstructor of Names.constructor * pattern_continuation
and pattern_continuation =
    Continuation of int * Glob_term.cases_pattern list * pattern_history
  | Result of Glob_term.cases_pattern list
type 'a pattern_matching_problem = {
  env : GlobEnv.t;
  pred : EConstr.constr;
  tomatch : tomatch_stack;
  history : pattern_continuation;
  mat : 'a matrix;
  caseloc : Loc.t option;
  casestyle : Constr.case_style;
  typing_function :
    Evardefine.type_constraint ->
    GlobEnv.t ->
    Evd.evar_map -> 'a option -> Evd.evar_map * EConstr.unsafe_judgment;
}
val compile :
  program_mode:bool ->
  Evd.evar_map ->
  'a pattern_matching_problem ->
  (int option * Names.Id.t CAst.t list) list * Evd.evar_map *
  EConstr.unsafe_judgment
val prepare_predicate :
  ?loc:Loc.t ->
  program_mode:bool ->
  (Evardefine.type_constraint ->
   GlobEnv.t ->
   Evd.evar_map ->
   Glob_term.glob_constr -> Evd.evar_map * EConstr.unsafe_judgment) ->
  GlobEnv.t ->
  Evd.evar_map ->
  (EConstr.types * tomatch_type) list ->
  EConstr.rel_context list ->
  EConstr.constr option ->
  Glob_term.glob_constr option ->
  (Evd.evar_map * (Names.Name.t * Names.Name.t list) list * EConstr.constr)
  list
val make_return_predicate_ltac_lvar :
  GlobEnv.t ->
  Evd.evar_map ->
  ("DEBUG:rule", [Tag1 (("pattern_matching_error", 1480), (0, 0, Tag1 ([(("BadPattern", 1206), ([(Tag3 (Tag1 ((Tag2 ("Names")), "constructor"), 0, (0)), 100000000, 0, -247); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -248)]), 0, (("pretyping/cases.mli", 24, 895, 897), ("pretyping/cases.mli", 24, 895, 933), 0), 0, Tag1 ("Cases", 3)); (("BadConstructor", 1207), ([(Tag3 (Tag1 ((Tag2 ("Names")), "constructor"), 0, (0)), 100000000, 0, -249); (Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -250)]), 0, (("pretyping/cases.mli", 25, 934, 936), ("pretyping/cases.mli", 25, 934, 979), 0), 0, Tag1 ("Cases", 4)); (("WrongNumargConstructor", 1208), Tag1 ([(("cstr", 1209), 0, (Tag3 (Tag1 ((Tag2 ("Names")), "constructor"), 0, (0)), 100000000, 0, -251), (("pretyping/cases.mli", 27, 1010, 1017), ("pretyping/cases.mli", 27, 1010, 1034), 0), 0, Tag1 ("Cases", 5)); (("expanded", 1210), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -252), (("pretyping/cases.mli", 27, 1010, 1035), ("pretyping/cases.mli", 27, 1010, 1049), 0), 0, Tag1 ("Cases", 6)); (("nargs", 1211), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -253), (("pretyping/cases.mli", 27, 1010, 1050), ("pretyping/cases.mli", 27, 1010, 1060), 0), 0, Tag1 ("Cases", 7)); (("expected_nassums", 1212), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -254), (("pretyping/cases.mli", 27, 1010, 1061), ("pretyping/cases.mli", 27, 1010, 1082), 0), 0, Tag1 ("Cases", 8)); (("expected_ndecls", 1213), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -255), (("pretyping/cases.mli", 27, 1010, 1083), ("pretyping/cases.mli", 27, 1010, 1102), 0), 0, Tag1 ("Cases", 9))]), 0, (("pretyping/cases.mli", 26, 980, 982), ("pretyping/cases.mli", 27, 1010, 1103), 0), 0, Tag1 ("Cases", 10)); (("WrongNumargInductive", 1214), Tag1 ([(("ind", 1215), 0, (Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -256), (("pretyping/cases.mli", 29, 1132, 1139), ("pretyping/cases.mli", 29, 1132, 1153), 0), 0, Tag1 ("Cases", 11)); (("expanded", 1216), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -257), (("pretyping/cases.mli", 29, 1132, 1154), ("pretyping/cases.mli", 29, 1132, 1168), 0), 0, Tag1 ("Cases", 12)); (("nargs", 1217), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -258), (("pretyping/cases.mli", 29, 1132, 1169), ("pretyping/cases.mli", 29, 1132, 1179), 0), 0, Tag1 ("Cases", 13)); (("expected_nassums", 1218), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -259), (("pretyping/cases.mli", 29, 1132, 1180), ("pretyping/cases.mli", 29, 1132, 1201), 0), 0, Tag1 ("Cases", 14)); (("expected_ndecls", 1219), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -260), (("pretyping/cases.mli", 29, 1132, 1202), ("pretyping/cases.mli", 29, 1132, 1221), 0), 0, Tag1 ("Cases", 15))]), 0, (("pretyping/cases.mli", 28, 1104, 1106), ("pretyping/cases.mli", 29, 1132, 1222), 0), 0, Tag1 ("Cases", 16)); (("UnusedClause", 1220), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Glob_term")), "cases_pattern"), 0, (0)), 100000000, 0, -262)], (0)), 100000000, 0, -261)]), 0, (("pretyping/cases.mli", 30, 1223, 1225), ("pretyping/cases.mli", 30, 1223, 1261), 0), 0, Tag1 ("Cases", 17)); (("NonExhaustive", 1221), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Glob_term")), "cases_pattern"), 0, (0)), 100000000, 0, -264)], (0)), 100000000, 0, -263)]), 0, (("pretyping/cases.mli", 31, 1262, 1264), ("pretyping/cases.mli", 31, 1262, 1301), 0), 0, Tag1 ("Cases", 18)); (("CannotInferPredicate", 1222), ([(Tag3 ((Tag3 ("array", 8)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -267); (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -268)]), 100000000, 0, -266)], (0)), 100000000, 0, -265)]), 0, (("pretyping/cases.mli", 32, 1302, 1304), ("pretyping/cases.mli", 32, 1302, 1352), 0), 0, Tag1 ("Cases", 19))], 0), 1, 0, 0, 0, 0, 0, (("pretyping/cases.mli", 23, 865, 865), ("pretyping/cases.mli", 32, 1302, 1352), 0), 0, 0, 0, Tag1 ("Cases", 2)), 1, 0); Tag2 (("PatternMatchingError", 1481), ((Tag3 ("exn", 7)), 0, ([(Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -244); (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -245); (Tag3 ((("pattern_matching_error", 1480)), 0, (0)), 100000000, 0, -246)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Cases", 30)), 2, 0); (("error_wrong_numarg_constructor", 1482), ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -243)], (0)), 100000000, 0, -242), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -241), (Tag1 (("cstr"), (Tag3 (Tag1 ((Tag2 ("Names")), "constructor"), 0, (0)), 100000000, 0, -240), (Tag1 (("expanded"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -239), (Tag1 (("nargs"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -238), (Tag1 (("expected_nassums"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -237), (Tag1 (("expected_ndecls"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -236), ((("a")), 100000000, 0, -235), 0), 100000000, 0, -234), 0), 100000000, 0, -233), 0), 100000000, 0, -232), 0), 100000000, 0, -231), 0), 100000000, 0, -230), 0), 100000000, 0, -229), 0), 100000000, 0, -228), 0, (("pretyping/cases.mli", 36, 1429, 1429), ("pretyping/cases.mli", 37, 1466, 1588), 0), 0, Tag1 ("Cases", 32)), 0); (("error_wrong_numarg_inductive", 1483), ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -227)], (0)), 100000000, 0, -226), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -225), (Tag1 (("ind"), (Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -224), (Tag1 (("expanded"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -223), (Tag1 (("nargs"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -222), (Tag1 (("expected_nassums"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -221), (Tag1 (("expected_ndecls"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -220), ((("a")), 100000000, 0, -219), 0), 100000000, 0, -218), 0), 100000000, 0, -217), 0), 100000000, 0, -216), 0), 100000000, 0, -215), 0), 100000000, 0, -214), 0), 100000000, 0, -213), 0), 100000000, 0, -212), 0, (("pretyping/cases.mli", 39, 1590, 1590), ("pretyping/cases.mli", 40, 1625, 1744), 0), 0, Tag1 ("Cases", 33)), 0); (("irrefutable", 1484), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -211), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Glob_term")), "cases_pattern"), 0, (0)), 100000000, 0, -210), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -209), 0), 100000000, 0, -208), 0), 100000000, 0, -207), 0, (("pretyping/cases.mli", 42, 1746, 1746), ("pretyping/cases.mli", 42, 1746, 1792), 0), 0, Tag1 ("Cases", 34)), 0); (("compile_cases", 1485), ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -206)], (0)), 100000000, 0, -205), (Tag1 (("program_mode"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -204), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "case_style"), 0, (0)), 100000000, 0, -203), (Tag1 (0, (Tag2 ([(Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evardefine")), "type_constraint"), 0, (0)), 100000000, 0, -201), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("GlobEnv")), "t"), 0, (0)), 100000000, 0, -200), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -199), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -198), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -196); (Tag3 (Tag1 ((Tag2 ("EConstr")), "unsafe_judgment"), 0, (0)), 100000000, 0, -197)]), 100000000, 0, -195), 0), 100000000, 0, -194), 0), 100000000, 0, -193), 0), 100000000, 0, -192), 0), 100000000, 0, -191); (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -202)]), 100000000, 0, -190), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evardefine")), "type_constraint"), 0, (0)), 100000000, 0, -189), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("GlobEnv")), "t"), 0, (0)), 100000000, 0, -188), (Tag1 (0, (Tag2 ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -185)], (0)), 100000000, 0, -184); (Tag3 (Tag1 ((Tag2 ("Glob_term")), "tomatch_tuples"), 0, (0)), 100000000, 0, -186); (Tag3 (Tag1 ((Tag2 ("Glob_term")), "cases_clauses"), 0, (0)), 100000000, 0, -187)]), 100000000, 0, -183), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -181); (Tag3 (Tag1 ((Tag2 ("EConstr")), "unsafe_judgment"), 0, (0)), 100000000, 0, -182)]), 100000000, 0, -180), 0), 100000000, 0, -179), 0), 100000000, 0, -178), 0), 100000000, 0, -177), 0), 100000000, 0, -176), 0), 100000000, 0, -175), 0), 100000000, 0, -174), 0), 100000000, 0, -173), 0, (("pretyping/cases.mli", 46, 1830, 1830), ("pretyping/cases.mli", 51, 2096, 2124), 0), 0, Tag1 ("Cases", 35)), 0); (("constr_of_pat", 1486), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -172), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -171), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "rel_context"), 0, (0)), 100000000, 0, -170), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Glob_term")), "cases_pattern"), 0, (0)), 100000000, 0, -169), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "Set"), "t"), 0, (0)), 100000000, 0, -168), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -157); (Tag3 (Tag1 ((Tag2 ("Glob_term")), "cases_pattern"), 0, (0)), 100000000, 0, -158); (Tag2 ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "rel_context"), 0, (0)), 100000000, 0, -160); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -161); (Tag2 ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -163); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -165)], (0)), 100000000, 0, -164)]), 100000000, 0, -162); (Tag3 (Tag1 ((Tag2 ("Glob_term")), "cases_pattern"), 0, (0)), 100000000, 0, -166)]), 100000000, 0, -159); (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "Set"), "t"), 0, (0)), 100000000, 0, -167)]), 100000000, 0, -156), 0), 100000000, 0, -155), 0), 100000000, 0, -154), 0), 100000000, 0, -153), 0), 100000000, 0, -152), 0), 100000000, 0, -151), 0, (("pretyping/cases.mli", 53, 2126, 2126), ("pretyping/cases.mli", 62, 2442, 2467), 0), 0, Tag1 ("Cases", 36)), 0); Tag1 (("rhs", 1487), ([((("a")), 100000000, 0, -150)], 1, [[(("rhs_env", 1375), 0, (Tag3 (Tag1 ((Tag2 ("GlobEnv")), "t"), 0, (0)), 100000000, 0, -146), (("pretyping/cases.mli", 65, 2483, 2489), ("pretyping/cases.mli", 65, 2483, 2512), 0), 0, Tag1 ("Cases", 38)); (("rhs_vars", 1376), 0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "Set"), "t"), 0, (0)), 100000000, 0, -147), (("pretyping/cases.mli", 66, 2513, 2519), ("pretyping/cases.mli", 66, 2513, 2541), 0), 0, Tag1 ("Cases", 39)); (("avoid_ids", 1377), 0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "Set"), "t"), 0, (0)), 100000000, 0, -148), (("pretyping/cases.mli", 67, 2542, 2548), ("pretyping/cases.mli", 67, 2542, 2570), 0), 0, Tag1 ("Cases", 40)); (("it", 1378), 0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -150)], (0)), 100000000, 0, -149), (("pretyping/cases.mli", 68, 2571, 2577), ("pretyping/cases.mli", 68, 2571, 2599), 0), 0, Tag1 ("Cases", 41))]], 1, 0, [25], [0], 0, 0, (("pretyping/cases.mli", 64, 2469, 2469), ("pretyping/cases.mli", 68, 2571, 2600), 0), 0, 0, 0, Tag1 ("Cases", 37)), 1, 0); Tag1 (("equation", 1488), ([((("a")), 100000000, 0, -136)], 1, [[(("patterns", 1380), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Glob_term")), "cases_pattern"), 0, (0)), 100000000, 0, -134)], (0)), 100000000, 0, -133), (("pretyping/cases.mli", 71, 2621, 2627), ("pretyping/cases.mli", 71, 2621, 2661), 0), 0, Tag1 ("Cases", 43)); (("rhs", 1381), 0, (Tag3 ((("rhs", 1487)), [((("a")), 100000000, 0, -136)], (0)), 100000000, 0, -135), (("pretyping/cases.mli", 72, 2662, 2668), ("pretyping/cases.mli", 72, 2662, 2690), 0), 0, Tag1 ("Cases", 44)); (("alias_stack", 1391), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -138)], (0)), 100000000, 0, -137), (("pretyping/cases.mli", 73, 2691, 2697), ("pretyping/cases.mli", 73, 2691, 2724), 0), 0, Tag1 ("Cases", 45)); (("eqn_loc", 1392), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -140)], (0)), 100000000, 0, -139), (("pretyping/cases.mli", 74, 2725, 2731), ("pretyping/cases.mli", 74, 2725, 2759), 0), 0, Tag1 ("Cases", 46)); (("orig", 1393), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -142)], (0)), 100000000, 0, -141), (("pretyping/cases.mli", 75, 2760, 2766), ("pretyping/cases.mli", 75, 2760, 2792), 0), 0, Tag1 ("Cases", 47)); (("catch_all_vars", 1394), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -145)], (0)), 100000000, 0, -144)], (0)), 100000000, 0, -143), (("pretyping/cases.mli", 76, 2793, 2799), ("pretyping/cases.mli", 76, 2793, 2832), 0), 0, Tag1 ("Cases", 48))]], 1, 0, [25], [0], 0, 0, (("pretyping/cases.mli", 70, 2602, 2602), ("pretyping/cases.mli", 76, 2793, 2834), 0), 0, 0, 0, Tag1 ("Cases", 42)), 1, 0); Tag1 (("matrix", 1489), ([((("a")), 100000000, 0, -132)], 1, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("equation", 1488)), [((("a")), 100000000, 0, -132)], (0)), 100000000, 0, -131)], (0)), 100000000, 0, -130)), [25], [0], 0, 0, (("pretyping/cases.mli", 78, 2836, 2836), ("pretyping/cases.mli", 78, 2836, 2869), 0), 0, 0, 0, Tag1 ("Cases", 49)), 1, 0); Tag1 (("tomatch_type", 1490), (0, 0, Tag1 ([(("IsInd", 1397), ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -123); (Tag3 (Tag1 ((Tag2 ("Inductiveops")), "inductive_type"), 0, (0)), 100000000, 0, -124); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -126)], (0)), 100000000, 0, -125)]), 0, (("pretyping/cases.mli", 82, 2969, 2971), ("pretyping/cases.mli", 82, 2969, 3018), 0), 0, Tag1 ("Cases", 51)); (("NotInd", 1398), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -128)], (0)), 100000000, 0, -127); (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -129)]), 0, (("pretyping/cases.mli", 83, 3019, 3021), ("pretyping/cases.mli", 83, 3019, 3054), 0), 0, Tag1 ("Cases", 52))], 0), 1, 0, 0, 0, 0, 0, (("pretyping/cases.mli", 81, 2949, 2949), ("pretyping/cases.mli", 83, 3019, 3054), 0), 0, 0, 0, Tag1 ("Cases", 50)), 1, 0); Tag1 (("tomatch_status", 1491), (0, 0, Tag1 ([(("Pushed", 1400), ([(Tag2 ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -105); (Tag2 ([(Tag2 ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -108); (Tag3 ((("tomatch_type", 1490)), 0, (0)), 100000000, 0, -109)]), 100000000, 0, -107); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -111)], (0)), 100000000, 0, -110); (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -112)]), 100000000, 0, -106)]), 100000000, 0, -104)]), 0, (("pretyping/cases.mli", 92, 3430, 3432), ("pretyping/cases.mli", 92, 3430, 3496), 0), 0, Tag1 ("Cases", 54)); (("Alias", 1401), ([(Tag2 ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -114); (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -116); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -117); (Tag2 ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -119); (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -120)]), 100000000, 0, -118)]), 100000000, 0, -115)]), 100000000, 0, -113)]), 0, (("pretyping/cases.mli", 93, 3497, 3499), ("pretyping/cases.mli", 93, 3497, 3555), 0), 0, Tag1 ("Cases", 55)); (("NonDepAlias", 1402), (0), 0, (("pretyping/cases.mli", 94, 3556, 3558), ("pretyping/cases.mli", 94, 3556, 3571), 0), 0, Tag1 ("Cases", 56)); (("Abstract", 1403), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -121); (Tag3 (Tag1 ((Tag2 ("EConstr")), "rel_declaration"), 0, (0)), 100000000, 0, -122)]), 0, (("pretyping/cases.mli", 95, 3572, 3574), ("pretyping/cases.mli", 95, 3572, 3609), 0), 0, Tag1 ("Cases", 57))], 0), 1, 0, 0, 0, 0, 0, (("pretyping/cases.mli", 91, 3408, 3408), ("pretyping/cases.mli", 95, 3572, 3609), 0), 0, 0, 0, Tag1 ("Cases", 53)), 1, 0); Tag1 (("tomatch_stack", 1492), (0, 0, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("tomatch_status", 1491)), 0, (0)), 100000000, 0, -103)], (0)), 100000000, 0, -102)), 0, 0, 0, 0, (("pretyping/cases.mli", 97, 3611, 3611), ("pretyping/cases.mli", 97, 3611, 3651), 0), 0, 0, 0, Tag1 ("Cases", 58)), 1, 0); Tag1 (("pattern_history", 1493), (0, 0, Tag1 ([(("Top", 1464), (0), 0, (("pretyping/cases.mli", 102, 3750, 3752), ("pretyping/cases.mli", 102, 3750, 3757), 0), 0, Tag1 ("Cases", 61)); (("MakeConstructor", 1465), ([(Tag3 (Tag1 ((Tag2 ("Names")), "constructor"), 0, (0)), 100000000, 0, -100); (Tag3 ((("pattern_continuation", 1494)), 0, (0)), 100000000, 0, -101)]), 0, (("pretyping/cases.mli", 103, 3758, 3760), ("pretyping/cases.mli", 103, 3758, 3815), 0), 0, Tag1 ("Cases", 62))], 0), 1, 0, 0, 0, 0, 0, (("pretyping/cases.mli", 101, 3727, 3727), ("pretyping/cases.mli", 103, 3758, 3815), 0), 0, 0, 0, Tag1 ("Cases", 59)), 1, 0); Tag1 (("pattern_continuation", 1494), (0, 0, Tag1 ([(("Continuation", 1466), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -94); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Glob_term")), "cases_pattern"), 0, (0)), 100000000, 0, -96)], (0)), 100000000, 0, -95); (Tag3 ((("pattern_history", 1493)), 0, (0)), 100000000, 0, -97)]), 0, (("pretyping/cases.mli", 106, 3844, 3846), ("pretyping/cases.mli", 106, 3844, 3906), 0), 0, Tag1 ("Cases", 63)); (("Result", 1467), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Glob_term")), "cases_pattern"), 0, (0)), 100000000, 0, -99)], (0)), 100000000, 0, -98)]), 0, (("pretyping/cases.mli", 107, 3907, 3909), ("pretyping/cases.mli", 107, 3907, 3939), 0), 0, Tag1 ("Cases", 64))], 0), 1, 0, 0, 0, 0, 0, (("pretyping/cases.mli", 105, 3817, 3817), ("pretyping/cases.mli", 107, 3907, 3939), 0), 0, 0, 0, Tag1 ("Cases", 60)), 2, 0); Tag1 (("pattern_matching_problem", 1495), ([((("a")), 100000000, 0, -79)], 1, [[(("env", 1469), 0, (Tag3 (Tag1 ((Tag2 ("GlobEnv")), "t"), 0, (0)), 100000000, 0, -74), (("pretyping/cases.mli", 110, 3976, 3982), ("pretyping/cases.mli", 110, 3976, 4004), 0), 0, Tag1 ("Cases", 66)); (("pred", 1470), 0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -75), (("pretyping/cases.mli", 111, 4005, 4011), ("pretyping/cases.mli", 111, 4005, 4030), 0), 0, Tag1 ("Cases", 67)); (("tomatch", 1471), 0, (Tag3 ((("tomatch_stack", 1492)), 0, (0)), 100000000, 0, -76), (("pretyping/cases.mli", 112, 4031, 4037), ("pretyping/cases.mli", 112, 4031, 4063), 0), 0, Tag1 ("Cases", 68)); (("history", 1472), 0, (Tag3 ((("pattern_continuation", 1494)), 0, (0)), 100000000, 0, -77), (("pretyping/cases.mli", 113, 4064, 4070), ("pretyping/cases.mli", 113, 4064, 4103), 0), 0, Tag1 ("Cases", 69)); (("mat", 1473), 0, (Tag3 ((("matrix", 1489)), [((("a")), 100000000, 0, -79)], (0)), 100000000, 0, -78), (("pretyping/cases.mli", 114, 4104, 4110), ("pretyping/cases.mli", 114, 4104, 4132), 0), 0, Tag1 ("Cases", 70)); (("caseloc", 1474), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -81)], (0)), 100000000, 0, -80), (("pretyping/cases.mli", 115, 4133, 4139), ("pretyping/cases.mli", 115, 4133, 4164), 0), 0, Tag1 ("Cases", 71)); (("casestyle", 1475), 0, (Tag3 (Tag1 ((Tag2 ("Constr")), "case_style"), 0, (0)), 100000000, 0, -82), (("pretyping/cases.mli", 116, 4165, 4171), ("pretyping/cases.mli", 116, 4165, 4194), 0), 0, Tag1 ("Cases", 72)); (("typing_function", 1476), 0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evardefine")), "type_constraint"), 0, (0)), 100000000, 0, -93), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("GlobEnv")), "t"), 0, (0)), 100000000, 0, -92), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -91), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -79)], (0)), 100000000, 0, -90), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -88); (Tag3 (Tag1 ((Tag2 ("EConstr")), "unsafe_judgment"), 0, (0)), 100000000, 0, -89)]), 100000000, 0, -87), 0), 100000000, 0, -86), 0), 100000000, 0, -85), 0), 100000000, 0, -84), 0), 100000000, 0, -83), (("pretyping/cases.mli", 117, 4195, 4201), ("pretyping/cases.mli", 117, 4195, 4301), 0), 0, Tag1 ("Cases", 73))]], 1, 0, [63], [0], 0, 0, (("pretyping/cases.mli", 109, 3941, 3941), ("pretyping/cases.mli", 117, 4195, 4303), 0), 0, 0, 0, Tag1 ("Cases", 65)), 1, 0); (("compile", 1496), ((Tag1 (("program_mode"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -73), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -72), (Tag1 (0, (Tag3 ((("pattern_matching_problem", 1495)), [((("a")), 100000000, 0, -71)], (0)), 100000000, 0, -70), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -64)], (0)), 100000000, 0, -63); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -67)], (0)), 100000000, 0, -66)], (0)), 100000000, 0, -65)]), 100000000, 0, -62)], (0)), 100000000, 0, -61); (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -68); (Tag3 (Tag1 ((Tag2 ("EConstr")), "unsafe_judgment"), 0, (0)), 100000000, 0, -69)]), 100000000, 0, -60), 0), 100000000, 0, -59), 0), 100000000, 0, -58), 0), 100000000, 0, -57), 0, (("pretyping/cases.mli", 119, 4305, 4305), ("pretyping/cases.mli", 120, 4383, 4456), 0), 0, Tag1 ("Cases", 74)), 0); (("prepare_predicate", 1497), ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -56)], (0)), 100000000, 0, -55), (Tag1 (("program_mode"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -54), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evardefine")), "type_constraint"), 0, (0)), 100000000, 0, -53), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("GlobEnv")), "t"), 0, (0)), 100000000, 0, -52), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -51), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -50), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -48); (Tag3 (Tag1 ((Tag2 ("EConstr")), "unsafe_judgment"), 0, (0)), 100000000, 0, -49)]), 100000000, 0, -47), 0), 100000000, 0, -46), 0), 100000000, 0, -45), 0), 100000000, 0, -44), 0), 100000000, 0, -43), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("GlobEnv")), "t"), 0, (0)), 100000000, 0, -42), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -41), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -39); (Tag3 ((("tomatch_type", 1490)), 0, (0)), 100000000, 0, -40)]), 100000000, 0, -38)], (0)), 100000000, 0, -37), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "rel_context"), 0, (0)), 100000000, 0, -36)], (0)), 100000000, 0, -35), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -34)], (0)), 100000000, 0, -33), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -32)], (0)), 100000000, 0, -31), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -24); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -27); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -29)], (0)), 100000000, 0, -28)]), 100000000, 0, -26)], (0)), 100000000, 0, -25); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -30)]), 100000000, 0, -23)], (0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0), 100000000, 0, -20), 0), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), 0), 100000000, 0, -16), 0), 100000000, 0, -15), 0), 100000000, 0, -14), 0), 100000000, 0, -13), 0, (("pretyping/cases.mli", 122, 4458, 4458), ("pretyping/cases.mli", 130, 4791, 4882), 0), 0, Tag1 ("Cases", 75)), 0); (("make_return_predicate_ltac_lvar", 1498), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("GlobEnv")), "t"), 0, (0)), 100000000, 0, -12), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -11), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -10), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -9), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -8), (Tag3 (Tag1 ((Tag2 ("GlobEnv")), "t"), 0, (0)), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("pretyping/cases.mli", 132, 4884, 4884), ("pretyping/cases.mli", 133, 4961, 5007), 0), 0, Tag1 ("Cases", 76)), 0)], "Cases", [("Cases", (",:\150.@\155\158&\133\143\142&\012O\169v")); ("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Vmemitcodes", ("wCd\138\165\158DD\241gH\236.\210\197\247")); ("Vmbytecodes", ("\025\021\151\137Dx\149W\236+[\143f\208\160\016")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Unix", (":B72R\011\005Sj\189)\011\239PH\254")); ("UnivSubst", ("\190qu\031mc\130\181\003G]\132\"\219m)")); ("UnivProblem", ("6'\161\018\181\001.\253\000\141a6\171\1727\155")); ("UnivNames", ("%\151_\209%+JM$n\001\232\194n\178N")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UState", ("SD\203\215|\136\n\251\239\208\148\215C\n\167\005")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Summary", ("\148G\135\226\024L3\246\021\028U\146\164`\253\250")); ("Store", ("/dT\252\145\179pq\216{\181\206\190K+U")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("Section", ("\245\207\b\021\142v=\155#w\246}\"4b\006")); ("Safe_typing", (")\250?\164\145\132\241\127\186\152h+\145\"\237l")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("Range", ("\218\130\001r\237\r\144\171\164\021l\155\196\143sg")); ("Proofview_monad", ("\218\196\189S\147\216\129\221\231\224v\228O\024*\239")); ("Proofview", ("\245\140U\027\236\199\199&\242\156\199YG\250tA")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("Nativevalues", ("8:\007\025e\226c,\001\171\146#l\210\171\152")); ("Nativelib", ("V\239\205Y1\147E:,\176\196Hy\1483|")); ("Nativecode", ("\190\185\255\006m\012\210\163\138Rz\247\15283\183")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Namegen", ("\187\222\224T\255\020\1808-\212*\164\131\177\157x")); ("Monad", ("\244\171T\157\194p\187\160\149\195{\132\222\020\253\148")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Ltac_pretype", ("\224\"\167\018i:U\172>\188\128$\r\252\020T")); ("Logic_monad", ("\130\157\160Q\163vQ\137\184\2242\209\128\024\220i")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Libnames", ("fp\0255\167\162\209\153\137\161\169#\246\193\003\198")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Inductiveops", ("\016\171\162\024\021\024\029\166n\158\161\222d\005\229}")); ("Hook", ("\183\194\223\003\155\169',\187\240a;E\b\1396")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Glob_term", ("\165=a\227\160\153.\021_$\232\209T\236\153O")); ("GlobEnv", ("(\152\019ok\006R\183\193\145\137\133<\171\005\231")); ("Genlambda", ("\170}\024\241\141\222\136S\169\219\2212i\134KI")); ("Geninterp", ("2S\151\191\189\159\004\188;\224d\199|U\004\028")); ("Genarg", ("\1434\015\001\152\196\005s\156\136\195\185\247\b3\t")); ("Ftactic", ("K\172\205\128\241\162\160\201\202\1561o\180L\206:")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evd", ("\211\205p\193\216\129r\006\239oN\142ar\196\175")); ("Evarutil", ("\005\175\132e\164O\223svi \252\232\138\022\137")); ("Evardefine", ("\178\167R\199\158\242\001Y\215<\151\020\206\153\227\019")); ("Evar_kinds", ("\023L\186\132\218}\254\221\185\198\220\200h\003{\021")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Environ", ("\171b\1579\229<\003Z\147IL\225X\254\182\204")); ("Entries", ("\172\201\198\221Ap\027_{\174\141C\021\";p")); ("EConstr", ("\201aW\156\157;N\004\201V\208\006L\166\211)")); ("Dyn", ("\131z`\205v\2306\007x\027&K.?;\169")); ("Declarations", ("\239\137n\019\030w$\182\166z^{\b\206\163\175")); ("DAst", ("\224/\200)\007\184ni\134\b\139\204\241\005w\212")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Conversion", ("\158\150&\195M\tv\127|\029\158RRK\211A")); ("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CUnix", ("\140Zl\153\167\011J\015\005|th\247OTu")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CEphemeron", ("\204I\179-\206(x4\173\229\250\001PkH\151")); ("CDebug", ("^4\210p7\239!3\138\138\213?\239`\250\157")); ("CClosure", ("\167\b\022\241V-\r\253\b\002\000j]\223%\142")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])
Names.Name.t -> Glob_term.glob_constr -> EConstr.constr -> GlobEnv.t

module Name = Odoc_name
type private_flag = Asttypes.private_flag = Private | Public
type record_field = {
  rf_name : string;
  rf_mutable : bool;
  rf_type : Types.type_expr;
  mutable rf_text : Odoc_types.info option;
}
type constructor_args =
    Cstr_record of record_field list
  | Cstr_tuple of Types.type_expr list
type variant_constructor = {
  vc_name : string;
  vc_args : constructor_args;
  vc_ret : Types.type_expr option;
  mutable vc_text : Odoc_types.info option;
}
type type_kind =
    Type_abstract
  | Type_variant of variant_constructor list
  | Type_record of record_field list
  | Type_open
type object_field = {
  of_name : string;
  of_type : Types.type_expr;
  mutable of_text : Odoc_types.info option;
}
type type_manifest =
    Other of Types.type_expr
  | Object_type of object_field list
type t_type = {
  ty_name : Name.t;
  mutable ty_info : Odoc_types.info option;
  ty_parameters : (Types.type_expr * Types.Variance.t) list;
  ty_kind : type_kind;
  ty_private : private_flag;
  ty_manifest : type_manifest option;
  mutable ty_loc : Odoc_types.location;
  mutable ty_code : string option;("DEBUG:rule", [Tag3 (("Name", 484), 1, (Tag3 ((Tag2 ("Odoc_name"))), 0, (("odoc_type.mli", 22, 1349, 1349), ("odoc_type.mli", 22, 1349, 1372), 0), Tag1 ("Odoc_type", 0)), 0, 0); Tag1 (("private_flag", 485), (0, 0, Tag1 ([(("Private", 271), (0), 0, (("odoc_type.mli", 24, 1374, 1418), ("odoc_type.mli", 24, 1374, 1425), 0), 0, Tag1 ("Odoc_type", 2)); (("Public", 272), (0), 0, (("odoc_type.mli", 24, 1374, 1426), ("odoc_type.mli", 24, 1374, 1434), 0), 0, Tag1 ("Odoc_type", 3))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Asttypes")), "private_flag"), 0, (0)), 100000000, 0, -42)), 0, 0, 0, 0, (("odoc_type.mli", 24, 1374, 1374), ("odoc_type.mli", 24, 1374, 1434), 0), 0, 1, 0, Tag1 ("Odoc_type", 1)), 1, 0); Tag1 (("record_field", 486), (0, 0, [[(("rf_name", 287), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -37), (("odoc_type.mli", 27, 1458, 1460), ("odoc_type.mli", 27, 1458, 1477), 0), 0, Tag1 ("Odoc_type", 6)); (("rf_mutable", 288), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -38), (("odoc_type.mli", 28, 1478, 1480), ("odoc_type.mli", 28, 1478, 1498), 0), 0, Tag1 ("Odoc_type", 7)); (("rf_type", 395), 0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -39), (("odoc_type.mli", 29, 1499, 1501), ("odoc_type.mli", 29, 1499, 1527), 0), 0, Tag1 ("Odoc_type", 8)); (("rf_text", 415), 1, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Odoc_types")), "info"), 0, (0)), 100000000, 0, -41)], (0)), 100000000, 0, -40), (("odoc_type.mli", 30, 1528, 1530), ("odoc_type.mli", 30, 1528, 1571), 0), 0, Tag1 ("Odoc_type", 9))]], 1, 0, 0, 0, 0, 0, (("odoc_type.mli", 26, 1436, 1436), ("odoc_type.mli", 31, 1572, 1573), 0), 0, 0, 0, Tag1 ("Odoc_type", 4)), 1, 0); Tag1 (("constructor_args", 487), (0, 0, Tag1 ([(("Cstr_record", 417), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("record_field", 486)), 0, (0)), 100000000, 0, -34)], (0)), 100000000, 0, -33)]), 0, (("odoc_type.mli", 35, 1642, 1646), ("odoc_type.mli", 35, 1642, 1678), 0), 0, Tag1 ("Odoc_type", 11)); (("Cstr_tuple", 418), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -36)], (0)), 100000000, 0, -35)]), 0, (("odoc_type.mli", 36, 1679, 1681), ("odoc_type.mli", 36, 1679, 1717), 0), 0, Tag1 ("Odoc_type", 12))], 0), 1, 0, 0, 0, 0, 0, (("odoc_type.mli", 34, 1618, 1618), ("odoc_type.mli", 36, 1679, 1717), 0), 0, 0, 0, Tag1 ("Odoc_type", 10)), 1, 0); Tag1 (("variant_constructor", 488), (0, 0, [[(("vc_name", 420), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -27), (("odoc_type.mli", 39, 1748, 1750), ("odoc_type.mli", 39, 1748, 1767), 0), 0, Tag1 ("Odoc_type", 14)); (("vc_args", 421), 0, (Tag3 ((("constructor_args", 487)), 0, (0)), 100000000, 0, -28), (("odoc_type.mli", 40, 1768, 1770), ("odoc_type.mli", 40, 1768, 1797), 0), 0, Tag1 ("Odoc_type", 15)); (("vc_ret", 422), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -30)], (0)), 100000000, 0, -29), (("odoc_type.mli", 41, 1798, 1800), ("odoc_type.mli", 41, 1798, 1832), 0), 0, Tag1 ("Odoc_type", 16)); (("vc_text", 423), 1, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Odoc_types")), "info"), 0, (0)), 100000000, 0, -32)], (0)), 100000000, 0, -31), (("odoc_type.mli", 42, 1833, 1835), ("odoc_type.mli", 42, 1833, 1876), 0), 0, Tag1 ("Odoc_type", 17))]], 1, 0, 0, 0, 0, 0, (("odoc_type.mli", 38, 1719, 1719), ("odoc_type.mli", 43, 1877, 1878), 0), 0, 0, 0, Tag1 ("Odoc_type", 13)), 1, 0); Tag1 (("type_kind", 489), (0, 0, Tag1 ([(("Type_abstract", 425), (0), 0, (("odoc_type.mli", 47, 1947, 1951), ("odoc_type.mli", 47, 1947, 1964), 0), 0, Tag1 ("Odoc_type", 19)); (("Type_variant", 426), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("variant_constructor", 488)), 0, (0)), 100000000, 0, -24)], (0)), 100000000, 0, -23)]), 0, (("odoc_type.mli", 48, 1965, 1967), ("odoc_type.mli", 48, 1965, 2009), 0), 0, Tag1 ("Odoc_type", 20)); (("Type_record", 427), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("record_field", 486)), 0, (0)), 100000000, 0, -26)], (0)), 100000000, 0, -25)]), 0, (("odoc_type.mli", 49, 2010, 2012), ("odoc_type.mli", 49, 2010, 2046), 0), 0, Tag1 ("Odoc_type", 21)); (("Type_open", 428), (0), 0, (("odoc_type.mli", 50, 2047, 2049), ("odoc_type.mli", 50, 2047, 2060), 0), 0, Tag1 ("Odoc_type", 22))], 0), 1, 0, 0, 0, 0, 0, (("odoc_type.mli", 46, 1930, 1930), ("odoc_type.mli", 50, 2047, 2060), 0), 0, 0, 0, Tag1 ("Odoc_type", 18)), 1, 0); Tag1 (("object_field", 490), (0, 0, [[(("of_name", 430), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -19), (("odoc_type.mli", 54, 2118, 2120), ("odoc_type.mli", 54, 2118, 2137), 0), 0, Tag1 ("Odoc_type", 24)); (("of_type", 431), 0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -20), (("odoc_type.mli", 55, 2138, 2140), ("odoc_type.mli", 55, 2138, 2166), 0), 0, Tag1 ("Odoc_type", 25)); (("of_text", 432), 1, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Odoc_types")), "info"), 0, (0)), 100000000, 0, -22)], (0)), 100000000, 0, -21), (("odoc_type.mli", 56, 2167, 2169), ("odoc_type.mli", 56, 2167, 2210), 0), 0, Tag1 ("Odoc_type", 26))]], 1, 0, 0, 0, 0, 0, (("odoc_type.mli", 53, 2096, 2096), ("odoc_type.mli", 57, 2211, 2212), 0), 0, 0, 0, Tag1 ("Odoc_type", 23)), 1, 0); Tag1 (("type_manifest", 491), (0, 0, Tag1 ([(("Other", 434), ([(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -16)]), 0, (("odoc_type.mli", 60, 2235, 2239), ("odoc_type.mli", 60, 2235, 2263), 0), 0, Tag1 ("Odoc_type", 28)); (("Object_type", 435), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("object_field", 490)), 0, (0)), 100000000, 0, -18)], (0)), 100000000, 0, -17)]), 0, (("odoc_type.mli", 61, 2264, 2266), ("odoc_type.mli", 61, 2264, 2300), 0), 0, Tag1 ("Odoc_type", 29))], 0), 1, 0, 0, 0, 0, 0, (("odoc_type.mli", 59, 2214, 2214), ("odoc_type.mli", 61, 2264, 2300), 0), 0, 0, 0, Tag1 ("Odoc_type", 27)), 1, 0); Tag1 (("t_type", 492), (0, 0, [[(("ty_name", 457), 0, (Tag3 (Tag1 ((("Name", 484)), "t"), 0, (0)), 100000000, 0, -2), (("odoc_type.mli", 64, 2318, 2320), ("odoc_type.mli", 64, 2318, 2337), 0), 0, Tag1 ("Odoc_type", 31)); (("ty_info", 458), 1, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Odoc_types")), "info"), 0, (0)), 100000000, 0, -4)], (0)), 100000000, 0, -3), (("odoc_type.mli", 65, 2338, 2340), ("odoc_type.mli", 65, 2338, 2381), 0), 0, Tag1 ("Odoc_type", 32)); (("ty_parameters", 478), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -7); (Tag3 (Tag1 (Tag1 ((Tag2 ("Types")), "Variance"), "t"), 0, (0)), 100000000, 0, -8)]), 100000000, 0, -6)], (0)), 100000000, 0, -5), (("odoc_type.mli", 66, 2382, 2384), ("odoc_type.mli", 66, 2382, 2442), 0), 0, Tag1 ("Odoc_type", 33)); (("ty_kind", 479), 0, (Tag3 ((("type_kind", 489)), 0, (0)), 100000000, 0, -9), (("odoc_type.mli", 67, 2443, 2445), ("odoc_type.mli", 67, 2443, 2465), 0), 0, Tag1 ("Odoc_type", 34)); (("ty_private", 480), 0, (Tag3 ((("private_flag", 485)), 0, (0)), 100000000, 0, -10), (("odoc_type.mli", 68, 2466, 2468), ("odoc_type.mli", 68, 2466, 2494), 0), 0, Tag1 ("Odoc_type", 35)); (("ty_manifest", 481), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("type_manifest", 491)), 0, (0)), 100000000, 0, -12)], (0)), 100000000, 0, -11), (("odoc_type.mli", 69, 2495, 2497), ("odoc_type.mli", 69, 2495, 2532), 0), 0, Tag1 ("Odoc_type", 36)); (("ty_loc", 482), 1, (Tag3 (Tag1 ((Tag2 ("Odoc_types")), "location"), 0, (0)), 100000000, 0, -13), (("odoc_type.mli", 70, 2533, 2535), ("odoc_type.mli", 70, 2533, 2572), 0), 0, Tag1 ("Odoc_type", 37)); (("ty_code", 483), 1, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -15)], (0)), 100000000, 0, -14), (("odoc_type.mli", 71, 2573, 2575), ("odoc_type.mli", 71, 2573, 2607), 0), 0, Tag1 ("Odoc_type", 38))]], 1, 0, 0, 0, 0, 0, (("odoc_type.mli", 63, 2302, 2302), ("odoc_type.mli", 72, 2608, 2609), 0), 0, 0, 0, Tag1 ("Odoc_type", 30)), 1, 0)], "Odoc_type", [("Odoc_type", ("\236\128j}\240\188\1487q\214\192oj\158\133\170")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Types", ("\177\238\029.\220\006\163!\230\015\006\182\133\155\194\166")); ("Type_immediacy", ("\"\127k\011Q\241\211\138\193;8\142\129\141#\251")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shape", ("\235\127Y\213\025\137=\244\218\181\248N\189\188\216p")); ("Primitive", ("}Shh\162\015|\220A\203\249\232\245G\213\019")); ("Path", ("\012\183\178\025\1298\228*\021r\185\160Y\252\n\026")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Outcometree", ("9\021%\234\211\206\210\004H\165\208\2014\234Q\142")); ("Odoc_types", ("<k{\137\201\170z%E\221\170\147\151\127\189\015")); ("Odoc_name", ("\248'\1872Z\r\160\146\012'\180V\240\1577f")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Identifiable", ("\004F\207\014\158GU\001\184\214\187%/#;\211")); ("Ident", ("\b9;!\187.\220\163(x\b\174\\\223\020\004")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216"))], [(0)])

}

val add_ppx_context_str :
  tool_name:string ->
  Parsetree.structure_item list -> Parsetree.structure_item list
val drop_ppx_context_str :
  restore:bool ->
  Parsetree.structure_item list -> Parsetree.structure_item list
val add_ppx_context_sig :
  tool_name:string ->
  Parsetree.signature_item list -> Parsetree.signature_item list
val drop_ppx_context_sig :
  restore:bool ->
  Parsetree.signature_item list -> Parsetree.signature_item list
val tool_name : unit -> string
val set_cookie : string -> Parsetree.expression -> unit
("DEBUG:rule", [(("add_ppx_context_str", 400), ((Tag1 (("tool_name"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -41), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Parsetree")), "structure_item"), 0, (0)), 100000000, 0, -40)], (0)), 100000000, 0, -39), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Parsetree")), "structure_item"), 0, (0)), 100000000, 0, -38)], (0)), 100000000, 0, -37), 0), 100000000, 0, -36), 0), 100000000, 0, -35), 0, (("astlib/ast_metadata.mli", 3, 85, 85), ("astlib/ast_metadata.mli", 6, 168, 199), 0), 0, Tag1 ("Astlib__Ast_metadata", 2)), 0); (("drop_ppx_context_str", 401), ((Tag1 (("restore"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -34), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Parsetree")), "structure_item"), 0, (0)), 100000000, 0, -33)], (0)), 100000000, 0, -32), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Parsetree")), "structure_item"), 0, (0)), 100000000, 0, -31)], (0)), 100000000, 0, -30), 0), 100000000, 0, -29), 0), 100000000, 0, -28), 0, (("astlib/ast_metadata.mli", 11, 406, 406), ("astlib/ast_metadata.mli", 12, 433, 513), 0), 0, Tag1 ("Astlib__Ast_metadata", 3)), 0); (("add_ppx_context_sig", 402), ((Tag1 (("tool_name"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -27), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Parsetree")), "signature_item"), 0, (0)), 100000000, 0, -26)], (0)), 100000000, 0, -25), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Parsetree")), "signature_item"), 0, (0)), 100000000, 0, -24)], (0)), 100000000, 0, -23), 0), 100000000, 0, -22), 0), 100000000, 0, -21), 0, (("astlib/ast_metadata.mli", 16, 660, 660), ("astlib/ast_metadata.mli", 19, 743, 774), 0), 0, Tag1 ("Astlib__Ast_metadata", 4)), 0); (("drop_ppx_context_sig", 403), ((Tag1 (("restore"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -20), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Parsetree")), "signature_item"), 0, (0)), 100000000, 0, -19)], (0)), 100000000, 0, -18), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Parsetree")), "signature_item"), 0, (0)), 100000000, 0, -17)], (0)), 100000000, 0, -16), 0), 100000000, 0, -15), 0), 100000000, 0, -14), 0, (("astlib/ast_metadata.mli", 22, 834, 834), ("astlib/ast_metadata.mli", 23, 861, 941), 0), 0, Tag1 ("Astlib__Ast_metadata", 5)), 0); (("tool_name", 404), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -13), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("astlib/ast_metadata.mli", 26, 1002, 1002), ("astlib/ast_metadata.mli", 26, 1002, 1032), 0), 0, Tag1 ("Astlib__Ast_metadata", 6)), 0); (("set_cookie", 405), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Parsetree")), "expression"), 0, (0)), 100000000, 0, -9), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8), 0), 100000000, 0, -7), 0), 100000000, 0, -6), 0, (("astlib/ast_metadata.mli", 36, 1389, 1389), ("astlib/ast_metadata.mli", 36, 1389, 1444), 0), 0, Tag1 ("Astlib__Ast_metadata", 7)), 0); (("get_cookie", 406), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Parsetree")), "expression"), 0, (0)), 100000000, 0, -4)], (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("astlib/ast_metadata.mli", 39, 1529, 1529), ("astlib/ast_metadata.mli", 39, 1529, 1583), 0), 0, Tag1 ("Astlib__Ast_metadata", 8)), 0)], "Astlib__Ast_metadata", [("Astlib__Ast_metadata", ("\027\2261\228\239!jR\240>?}JPh\154")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216")); ("Astlib__", ("\246\155.n\143$\1435\bi\005\019C\219\191A"))], [(0)])
val get_cookie : string -> Parsetree.expression option

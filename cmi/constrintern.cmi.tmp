type var_internalization_type = Inductive | Recursive | Method | Variable
type var_internalization_data
type internalization_env = var_internalization_data Names.Id.Map.t
val empty_internalization_env : internalization_env
val compute_internalization_data :
  Environ.env ->
  Evd.evar_map ->
  Names.Id.t ->
  var_internalization_type ->
  EConstr.types -> Impargs.manual_implicits -> var_internalization_data
val compute_internalization_env :
  Environ.env ->
  Evd.evar_map ->
  ?impls:internalization_env ->
  var_internalization_type ->
  Names.Id.t list ->
  EConstr.types list -> Impargs.manual_implicits list -> internalization_env
val extend_internalization_data :
  var_internalization_data ->
  Impargs.implicit_status ->
  Notation_term.scope_name list -> var_internalization_data
type ltac_sign = {
  ltac_vars : Names.Id.Set.t;
  ltac_bound : Names.Id.Set.t;
  ltac_extra : Genintern.Store.t;
}
val empty_ltac_sign : ltac_sign
val intern_constr :
  Environ.env ->
  Evd.evar_map -> Constrexpr.constr_expr -> Glob_term.glob_constr
val intern_type :
  Environ.env ->
  Evd.evar_map -> Constrexpr.constr_expr -> Glob_term.glob_constr
val intern_gen :
  Pretyping.typing_constraint ->
  Environ.env ->
  Evd.evar_map ->
  ?impls:internalization_env ->
  ?strict_check:bool ->
  ?pattern_mode:bool ->
  ?ltacvars:ltac_sign -> Constrexpr.constr_expr -> Glob_term.glob_constr
val intern_unknown_if_term_or_type :
  Environ.env ->
  Evd.evar_map -> Constrexpr.constr_expr -> Glob_term.glob_constr
val intern_pattern :
  Environ.env ->
  Constrexpr.cases_pattern_expr ->
  Names.lident list *
  (Names.Id.t Names.Id.Map.t * Glob_term.cases_pattern) list
val intern_context :
  Environ.env ->
  bound_univs:UnivNames.universe_binders ->
  internalization_env ->
  Constrexpr.local_binder_expr list ->
  internalization_env * Glob_term.glob_decl list
val interp_constr :
  ?flags:Pretyping.inference_flags ->
  ?expected_type:Pretyping.typing_constraint ->
  Environ.env ->
  Evd.evar_map ->
  ?impls:internalization_env ->
  Constrexpr.constr_expr -> EConstr.constr Evd.in_evar_universe_context
val interp_casted_constr :
  ?flags:Pretyping.inference_flags ->
  Environ.env ->
  Evd.evar_map ->
  ?impls:internalization_env ->
  Constrexpr.constr_expr ->
  EConstr.types -> EConstr.constr Evd.in_evar_universe_context
val interp_type :
  ?flags:Pretyping.inference_flags ->
  Environ.env ->
  Evd.evar_map ->
  ?impls:internalization_env ->
  Constrexpr.constr_expr -> EConstr.types Evd.in_evar_universe_context
val interp_open_constr :
  ?expected_type:Pretyping.typing_constraint ->
  Environ.env ->
  Evd.evar_map -> Constrexpr.constr_expr -> Evd.evar_map * EConstr.constr
val interp_constr_evars :
  ?program_mode:bool ->
  Environ.env ->
  Evd.evar_map ->
  ?impls:internalization_env ->
  Constrexpr.constr_expr -> Evd.evar_map * EConstr.constr
val interp_casted_constr_evars :
  ?program_mode:bool ->
  Environ.env ->
  Evd.evar_map ->
  ?impls:internalization_env ->
  Constrexpr.constr_expr -> EConstr.types -> Evd.evar_map * EConstr.constr
val interp_type_evars :
  ?program_mode:bool ->
  Environ.env ->
  Evd.evar_map ->
  ?impls:internalization_env ->
  Constrexpr.constr_expr -> Evd.evar_map * EConstr.types
val interp_constr_evars_impls :
  ?program_mode:bool ->
  Environ.env ->
  Evd.evar_map ->
  ?impls:internalization_env ->
  Constrexpr.constr_expr ->
  Evd.evar_map * (EConstr.constr * Impargs.manual_implicits)
val interp_casted_constr_evars_impls :
  ?program_mode:bool ->
  Environ.env ->
  Evd.evar_map ->
  ?impls:internalization_env ->
  Constrexpr.constr_expr ->
  EConstr.types -> Evd.evar_map * (EConstr.constr * Impargs.manual_implicits)
val interp_type_evars_impls :
  ?flags:Pretyping.inference_flags ->
  Environ.env ->
  Evd.evar_map ->
  ?impls:internalization_env ->
  Constrexpr.constr_expr ->
  Evd.evar_map * (EConstr.types * Impargs.manual_implicits)
val intern_constr_pattern :
  Environ.env ->
  Evd.evar_map ->
  ?as_type:bool ->
  ?strict_check:bool ->
  ?ltacvars:ltac_sign ->
  Constrexpr.constr_pattern_expr -> Names.Id.Set.t * Pattern.constr_pattern
val intern_reference : Libnames.qualid -> Names.GlobRef.t option
val intern_name_alias :
  Constrexpr.constr_expr ->
  (Names.GlobRef.t * Glob_term.glob_level list option) option
val interp_reference : ltac_sign -> Libnames.qualid -> Glob_term.glob_constr
val interp_binder :
  Environ.env ->
  Evd.evar_map ->
  Names.Name.t ->
  Constrexpr.constr_expr -> EConstr.types Evd.in_evar_universe_context
val interp_binder_evars :
  Environ.env ->
  Evd.evar_map ->
  Names.Name.t -> Constrexpr.constr_expr -> Evd.evar_map * EConstr.types
val interp_context_evars :
  ?program_mode:bool ->
  ?impl_env:internalization_env ->
  Environ.env ->
  Evd.evar_map ->
  Constrexpr.local_binder_expr list ->
  Evd.evar_map *
  (internalization_env *
   ((Environ.env * EConstr.rel_context) * Impargs.manual_implicits))
val interp_named_context_evars :
  ?program_mode:bool ->
  ?impl_env:internalization_env ->
  Environ.env ->
  Evd.evar_map ->
  Constrexpr.local_binder_expr list ->
  Evd.evar_map *
  (internalization_env *
   ((Environ.env * EConstr.named_context) * Impargs.manual_implicits))
val locate_reference : Libnames.qualid -> Names.GlobRef.t option
val is_global : Names.Id.t -> bool
val interp_notation_constr :
  Environ.env ->
  ?impls:internalization_env ->
  Notation_term.notation_interp_env ->
  Constrexpr.constr_expr ->
  (bool * Notation_term.subscopes) Names.Id.Map.t *
  Notation_term.notation_constr * Notation_term.reversibility_status
val intern_core :
  Pretyping.typing_constraint ->
  Environ.env ->
  Evd.evar_map ->
  ?strict_check:bool ->
  ?pattern_mode:bool ->
  ?ltacvars:ltac_sign ->
  Genintern.intern_variable_status ->
  Constrexpr.constr_expr -> Glob_term.glob_constr
val parsing_explicit : bool ref
val get_asymmetric_patterns : unit -> bool
val check_duplicate :
  ?loc:Loc.t -> (Libnames.qualid * Constrexpr.constr_expr) list -> unit
val interp_univ_constraint :
  Evd.evar_map ->
  Constrexpr.sort_name_expr * Univ.constraint_type *
  Constrexpr.sort_name_expr -> Univ.univ_constraint
val interp_univ_decl :
  Environ.env ->
  Constrexpr.universe_decl_expr -> Evd.evar_map * UState.universe_decl
val interp_univ_decl_opt :
  Environ.env ->
  Constrexpr.universe_decl_expr option -> Evd.evar_map * UState.universe_decl
val interp_cumul_univ_decl_opt :
  Environ.env ->
  Constrexpr.cumul_univ_decl_expr option ->
  ("DEBUG:rule", [Tag1 (("var_internalization_type", 1490), (0, 0, Tag1 ([(("Inductive", 1070), (0), 0, (("interp/constrintern.mli", 41, 1505, 1507), ("interp/constrintern.mli", 41, 1505, 1518), 0), 0, Tag1 ("Constrintern", 2)); (("Recursive", 1071), (0), 0, (("interp/constrintern.mli", 42, 1519, 1521), ("interp/constrintern.mli", 42, 1519, 1532), 0), 0, Tag1 ("Constrintern", 3)); (("Method", 1072), (0), 0, (("interp/constrintern.mli", 43, 1533, 1535), ("interp/constrintern.mli", 43, 1533, 1543), 0), 0, Tag1 ("Constrintern", 4)); (("Variable", 1073), (0), 0, (("interp/constrintern.mli", 44, 1544, 1546), ("interp/constrintern.mli", 44, 1544, 1556), 0), 0, Tag1 ("Constrintern", 5))], 0), 1, 0, 0, 0, 0, 0, (("interp/constrintern.mli", 40, 1473, 1473), ("interp/constrintern.mli", 44, 1544, 1556), 0), 0, 1, 0, Tag1 ("Constrintern", 1)), 1, 0); Tag1 (("var_internalization_data", 1491), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("interp/constrintern.mli", 51, 1880, 1880), ("interp/constrintern.mli", 51, 1880, 1909), 0), 0, 0, 0, Tag1 ("Constrintern", 6)), 1, 0); Tag1 (("internalization_env", 1492), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "Map"), "t"), [(Tag3 ((("var_internalization_data", 1491)), 0, (0)), 100000000, 0, -463)], (0)), 100000000, 0, -462)), 0, 0, 0, 0, (("interp/constrintern.mli", 54, 1981, 1981), ("interp/constrintern.mli", 54, 1981, 2041), 0), 0, 0, 0, Tag1 ("Constrintern", 7)), 1, 0); (("empty_internalization_env", 1493), ((Tag3 ((("internalization_env", 1492)), 0, (0)), 100000000, 0, -461), 0, (("interp/constrintern.mli", 56, 2043, 2043), ("interp/constrintern.mli", 56, 2043, 2094), 0), 0, Tag1 ("Constrintern", 8)), 0); (("compute_internalization_data", 1494), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -460), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -459), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -458), (Tag1 (0, (Tag3 ((("var_internalization_type", 1490)), 0, (0)), 100000000, 0, -457), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -456), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Impargs")), "manual_implicits"), 0, (0)), 100000000, 0, -455), (Tag3 ((("var_internalization_data", 1491)), 0, (0)), 100000000, 0, -454), 0), 100000000, 0, -453), 0), 100000000, 0, -452), 0), 100000000, 0, -451), 0), 100000000, 0, -450), 0), 100000000, 0, -449), 0), 100000000, 0, -448), 0, (("interp/constrintern.mli", 58, 2096, 2096), ("interp/constrintern.mli", 59, 2186, 2249), 0), 0, Tag1 ("Constrintern", 9)), 0); (("compute_internalization_env", 1495), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -447), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -446), (Tag1 (Tag1 ("impls"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("internalization_env", 1492)), 0, (0)), 100000000, 0, -445)], (0)), 100000000, 0, -444), (Tag1 (0, (Tag3 ((("var_internalization_type", 1490)), 0, (0)), 100000000, 0, -443), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -442)], (0)), 100000000, 0, -441), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -440)], (0)), 100000000, 0, -439), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Impargs")), "manual_implicits"), 0, (0)), 100000000, 0, -438)], (0)), 100000000, 0, -437), (Tag3 ((("internalization_env", 1492)), 0, (0)), 100000000, 0, -436), 0), 100000000, 0, -435), 0), 100000000, 0, -434), 0), 100000000, 0, -433), 0), 100000000, 0, -432), 0), 100000000, 0, -431), 0), 100000000, 0, -430), 0), 100000000, 0, -429), 0, (("interp/constrintern.mli", 61, 2251, 2251), ("interp/constrintern.mli", 63, 2424, 2445), 0), 0, Tag1 ("Constrintern", 10)), 0); (("extend_internalization_data", 1496), ((Tag1 (0, (Tag3 ((("var_internalization_data", 1491)), 0, (0)), 100000000, 0, -428), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Impargs")), "implicit_status"), 0, (0)), 100000000, 0, -427), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Notation_term")), "scope_name"), 0, (0)), 100000000, 0, -426)], (0)), 100000000, 0, -425), (Tag3 ((("var_internalization_data", 1491)), 0, (0)), 100000000, 0, -424), 0), 100000000, 0, -423), 0), 100000000, 0, -422), 0), 100000000, 0, -421), 0, (("interp/constrintern.mli", 65, 2447, 2447), ("interp/constrintern.mli", 66, 2481, 2581), 0), 0, Tag1 ("Constrintern", 11)), 0); Tag1 (("ltac_sign", 1497), (0, 0, [[(("ltac_vars", 1237), 0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "Set"), "t"), 0, (0)), 100000000, 0, -418), (("interp/constrintern.mli", 69, 2602, 2604), ("interp/constrintern.mli", 69, 2602, 2625), 0), 0, Tag1 ("Constrintern", 13)); (("ltac_bound", 1238), 0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "Set"), "t"), 0, (0)), 100000000, 0, -419), (("interp/constrintern.mli", 71, 2682, 2684), ("interp/constrintern.mli", 71, 2682, 2706), 0), 0, Tag1 ("Constrintern", 14)); (("ltac_extra", 1267), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Genintern")), "Store"), "t"), 0, (0)), 100000000, 0, -420), (("interp/constrintern.mli", 73, 2740, 2742), ("interp/constrintern.mli", 73, 2740, 2773), 0), 0, Tag1 ("Constrintern", 15))]], 1, 0, 0, 0, 0, 0, (("interp/constrintern.mli", 68, 2583, 2583), ("interp/constrintern.mli", 75, 2801, 2802), 0), 0, 0, 0, Tag1 ("Constrintern", 12)), 1, 0); (("empty_ltac_sign", 1498), ((Tag3 ((("ltac_sign", 1497)), 0, (0)), 100000000, 0, -417), 0, (("interp/constrintern.mli", 77, 2804, 2804), ("interp/constrintern.mli", 77, 2804, 2835), 0), 0, Tag1 ("Constrintern", 16)), 0); (("intern_constr", 1499), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -416), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -415), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -414), (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -413), 0), 100000000, 0, -412), 0), 100000000, 0, -411), 0), 100000000, 0, -410), 0, (("interp/constrintern.mli", 81, 2920, 2920), ("interp/constrintern.mli", 81, 2920, 2985), 0), 0, Tag1 ("Constrintern", 17)), 0); (("intern_type", 1500), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -409), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -408), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -407), (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -406), 0), 100000000, 0, -405), 0), 100000000, 0, -404), 0), 100000000, 0, -403), 0, (("interp/constrintern.mli", 82, 2986, 2986), ("interp/constrintern.mli", 82, 2986, 3049), 0), 0, Tag1 ("Constrintern", 18)), 0); (("intern_gen", 1501), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Pretyping")), "typing_constraint"), 0, (0)), 100000000, 0, -402), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -401), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -400), (Tag1 (Tag1 ("impls"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("internalization_env", 1492)), 0, (0)), 100000000, 0, -399)], (0)), 100000000, 0, -398), (Tag1 (Tag1 ("strict_check"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -397)], (0)), 100000000, 0, -396), (Tag1 (Tag1 ("pattern_mode"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -395)], (0)), 100000000, 0, -394), (Tag1 (Tag1 ("ltacvars"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("ltac_sign", 1497)), 0, (0)), 100000000, 0, -393)], (0)), 100000000, 0, -392), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -391), (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -390), 0), 100000000, 0, -389), 0), 100000000, 0, -388), 0), 100000000, 0, -387), 0), 100000000, 0, -386), 0), 100000000, 0, -385), 0), 100000000, 0, -384), 0), 100000000, 0, -383), 0), 100000000, 0, -382), 0, (("interp/constrintern.mli", 84, 3051, 3051), ("interp/constrintern.mli", 86, 3207, 3235), 0), 0, Tag1 ("Constrintern", 19)), 0); (("intern_unknown_if_term_or_type", 1502), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -381), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -380), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -379), (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -378), 0), 100000000, 0, -377), 0), 100000000, 0, -376), 0), 100000000, 0, -375), 0, (("interp/constrintern.mli", 88, 3237, 3237), ("interp/constrintern.mli", 88, 3237, 3319), 0), 0, Tag1 ("Constrintern", 20)), 0); (("intern_pattern", 1503), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -374), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "cases_pattern_expr"), 0, (0)), 100000000, 0, -373), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -367)], (0)), 100000000, 0, -366); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "Map"), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -371)], (0)), 100000000, 0, -370); (Tag3 (Tag1 ((Tag2 ("Glob_term")), "cases_pattern"), 0, (0)), 100000000, 0, -372)]), 100000000, 0, -369)], (0)), 100000000, 0, -368)]), 100000000, 0, -365), 0), 100000000, 0, -364), 0), 100000000, 0, -363), 0, (("interp/constrintern.mli", 90, 3321, 3321), ("interp/constrintern.mli", 91, 3371, 3423), 0), 0, Tag1 ("Constrintern", 21)), 0); (("intern_context", 1504), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -362), (Tag1 (("bound_univs"), (Tag3 (Tag1 ((Tag2 ("UnivNames")), "universe_binders"), 0, (0)), 100000000, 0, -361), (Tag1 (0, (Tag3 ((("internalization_env", 1492)), 0, (0)), 100000000, 0, -360), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "local_binder_expr"), 0, (0)), 100000000, 0, -359)], (0)), 100000000, 0, -358), (Tag2 ([(Tag3 ((("internalization_env", 1492)), 0, (0)), 100000000, 0, -355); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_decl"), 0, (0)), 100000000, 0, -357)], (0)), 100000000, 0, -356)]), 100000000, 0, -354), 0), 100000000, 0, -353), 0), 100000000, 0, -352), 0), 100000000, 0, -351), 0), 100000000, 0, -350), 0, (("interp/constrintern.mli", 93, 3425, 3425), ("interp/constrintern.mli", 94, 3495, 3582), 0), 0, Tag1 ("Constrintern", 22)), 0); (("interp_constr", 1505), ((Tag1 (Tag1 ("flags"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Pretyping")), "inference_flags"), 0, (0)), 100000000, 0, -349)], (0)), 100000000, 0, -348), (Tag1 (Tag1 ("expected_type"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Pretyping")), "typing_constraint"), 0, (0)), 100000000, 0, -347)], (0)), 100000000, 0, -346), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -345), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -344), (Tag1 (Tag1 ("impls"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("internalization_env", 1492)), 0, (0)), 100000000, 0, -343)], (0)), 100000000, 0, -342), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -341), (Tag3 (Tag1 ((Tag2 ("Evd")), "in_evar_universe_context"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -340)], (0)), 100000000, 0, -339), 0), 100000000, 0, -338), 0), 100000000, 0, -337), 0), 100000000, 0, -336), 0), 100000000, 0, -335), 0), 100000000, 0, -334), 0), 100000000, 0, -333), 0, (("interp/constrintern.mli", 101, 3782, 3782), ("interp/constrintern.mli", 102, 3913, 3965), 0), 0, Tag1 ("Constrintern", 23)), 0); (("interp_casted_constr", 1506), ((Tag1 (Tag1 ("flags"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Pretyping")), "inference_flags"), 0, (0)), 100000000, 0, -332)], (0)), 100000000, 0, -331), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -330), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -329), (Tag1 (Tag1 ("impls"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("internalization_env", 1492)), 0, (0)), 100000000, 0, -328)], (0)), 100000000, 0, -327), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -326), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -325), (Tag3 (Tag1 ((Tag2 ("Evd")), "in_evar_universe_context"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -324)], (0)), 100000000, 0, -323), 0), 100000000, 0, -322), 0), 100000000, 0, -321), 0), 100000000, 0, -320), 0), 100000000, 0, -319), 0), 100000000, 0, -318), 0), 100000000, 0, -317), 0, (("interp/constrintern.mli", 104, 3967, 3967), ("interp/constrintern.mli", 105, 4069, 4130), 0), 0, Tag1 ("Constrintern", 24)), 0); (("interp_type", 1507), ((Tag1 (Tag1 ("flags"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Pretyping")), "inference_flags"), 0, (0)), 100000000, 0, -316)], (0)), 100000000, 0, -315), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -314), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -313), (Tag1 (Tag1 ("impls"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("internalization_env", 1492)), 0, (0)), 100000000, 0, -312)], (0)), 100000000, 0, -311), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -310), (Tag3 (Tag1 ((Tag2 ("Evd")), "in_evar_universe_context"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -309)], (0)), 100000000, 0, -308), 0), 100000000, 0, -307), 0), 100000000, 0, -306), 0), 100000000, 0, -305), 0), 100000000, 0, -304), 0), 100000000, 0, -303), 0, (("interp/constrintern.mli", 107, 4132, 4132), ("interp/constrintern.mli", 108, 4225, 4276), 0), 0, Tag1 ("Constrintern", 25)), 0); (("interp_open_constr", 1508), ((Tag1 (Tag1 ("expected_type"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Pretyping")), "typing_constraint"), 0, (0)), 100000000, 0, -302)], (0)), 100000000, 0, -301), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -300), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -299), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -298), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -296); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -297)]), 100000000, 0, -295), 0), 100000000, 0, -294), 0), 100000000, 0, -293), 0), 100000000, 0, -292), 0), 100000000, 0, -291), 0, (("interp/constrintern.mli", 113, 4396, 4396), ("interp/constrintern.mli", 113, 4396, 4508), 0), 0, Tag1 ("Constrintern", 26)), 0); (("interp_constr_evars", 1509), ((Tag1 (Tag1 ("program_mode"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -290)], (0)), 100000000, 0, -289), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -288), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -287), (Tag1 (Tag1 ("impls"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("internalization_env", 1492)), 0, (0)), 100000000, 0, -286)], (0)), 100000000, 0, -285), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -284), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -282); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -283)]), 100000000, 0, -281), 0), 100000000, 0, -280), 0), 100000000, 0, -279), 0), 100000000, 0, -278), 0), 100000000, 0, -277), 0), 100000000, 0, -276), 0, (("interp/constrintern.mli", 117, 4545, 4545), ("interp/constrintern.mli", 118, 4612, 4676), 0), 0, Tag1 ("Constrintern", 27)), 0); (("interp_casted_constr_evars", 1510), ((Tag1 (Tag1 ("program_mode"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -275)], (0)), 100000000, 0, -274), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -273), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -272), (Tag1 (Tag1 ("impls"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("internalization_env", 1492)), 0, (0)), 100000000, 0, -271)], (0)), 100000000, 0, -270), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -269), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -268), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -266); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -267)]), 100000000, 0, -265), 0), 100000000, 0, -264), 0), 100000000, 0, -263), 0), 100000000, 0, -262), 0), 100000000, 0, -261), 0), 100000000, 0, -260), 0), 100000000, 0, -259), 0, (("interp/constrintern.mli", 120, 4678, 4678), ("interp/constrintern.mli", 121, 4752, 4825), 0), 0, Tag1 ("Constrintern", 28)), 0); (("interp_type_evars", 1511), ((Tag1 (Tag1 ("program_mode"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -258)], (0)), 100000000, 0, -257), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -256), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -255), (Tag1 (Tag1 ("impls"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("internalization_env", 1492)), 0, (0)), 100000000, 0, -254)], (0)), 100000000, 0, -253), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -252), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -250); (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -251)]), 100000000, 0, -249), 0), 100000000, 0, -248), 0), 100000000, 0, -247), 0), 100000000, 0, -246), 0), 100000000, 0, -245), 0), 100000000, 0, -244), 0, (("interp/constrintern.mli", 123, 4827, 4827), ("interp/constrintern.mli", 124, 4892, 4955), 0), 0, Tag1 ("Constrintern", 29)), 0); (("interp_constr_evars_impls", 1512), ((Tag1 (Tag1 ("program_mode"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -243)], (0)), 100000000, 0, -242), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -241), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -240), (Tag1 (Tag1 ("impls"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("internalization_env", 1492)), 0, (0)), 100000000, 0, -239)], (0)), 100000000, 0, -238), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -237), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -233); (Tag2 ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -235); (Tag3 (Tag1 ((Tag2 ("Impargs")), "manual_implicits"), 0, (0)), 100000000, 0, -236)]), 100000000, 0, -234)]), 100000000, 0, -232), 0), 100000000, 0, -231), 0), 100000000, 0, -230), 0), 100000000, 0, -229), 0), 100000000, 0, -228), 0), 100000000, 0, -227), 0, (("interp/constrintern.mli", 128, 5038, 5038), ("interp/constrintern.mli", 130, 5158, 5206), 0), 0, Tag1 ("Constrintern", 30)), 0); (("interp_casted_constr_evars_impls", 1513), ((Tag1 (Tag1 ("program_mode"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -226)], (0)), 100000000, 0, -225), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -224), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -223), (Tag1 (Tag1 ("impls"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("internalization_env", 1492)), 0, (0)), 100000000, 0, -222)], (0)), 100000000, 0, -221), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -220), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -219), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -215); (Tag2 ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -217); (Tag3 (Tag1 ((Tag2 ("Impargs")), "manual_implicits"), 0, (0)), 100000000, 0, -218)]), 100000000, 0, -216)]), 100000000, 0, -214), 0), 100000000, 0, -213), 0), 100000000, 0, -212), 0), 100000000, 0, -211), 0), 100000000, 0, -210), 0), 100000000, 0, -209), 0), 100000000, 0, -208), 0, (("interp/constrintern.mli", 132, 5208, 5208), ("interp/constrintern.mli", 134, 5344, 5392), 0), 0, Tag1 ("Constrintern", 31)), 0); (("interp_type_evars_impls", 1514), ((Tag1 (Tag1 ("flags"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Pretyping")), "inference_flags"), 0, (0)), 100000000, 0, -207)], (0)), 100000000, 0, -206), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -205), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -204), (Tag1 (Tag1 ("impls"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("internalization_env", 1492)), 0, (0)), 100000000, 0, -203)], (0)), 100000000, 0, -202), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -201), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -197); (Tag2 ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -199); (Tag3 (Tag1 ((Tag2 ("Impargs")), "manual_implicits"), 0, (0)), 100000000, 0, -200)]), 100000000, 0, -198)]), 100000000, 0, -196), 0), 100000000, 0, -195), 0), 100000000, 0, -194), 0), 100000000, 0, -193), 0), 100000000, 0, -192), 0), 100000000, 0, -191), 0, (("interp/constrintern.mli", 136, 5394, 5394), ("interp/constrintern.mli", 138, 5516, 5563), 0), 0, Tag1 ("Constrintern", 32)), 0); (("intern_constr_pattern", 1515), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -190), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -189), (Tag1 (Tag1 ("as_type"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -188)], (0)), 100000000, 0, -187), (Tag1 (Tag1 ("strict_check"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -186)], (0)), 100000000, 0, -185), (Tag1 (Tag1 ("ltacvars"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("ltac_sign", 1497)), 0, (0)), 100000000, 0, -184)], (0)), 100000000, 0, -183), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_pattern_expr"), 0, (0)), 100000000, 0, -182), (Tag2 ([(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "Set"), "t"), 0, (0)), 100000000, 0, -180); (Tag3 (Tag1 ((Tag2 ("Pattern")), "constr_pattern"), 0, (0)), 100000000, 0, -181)]), 100000000, 0, -179), 0), 100000000, 0, -178), 0), 100000000, 0, -177), 0), 100000000, 0, -176), 0), 100000000, 0, -175), 0), 100000000, 0, -174), 0), 100000000, 0, -173), 0, (("interp/constrintern.mli", 143, 5622, 5622), ("interp/constrintern.mli", 145, 5733, 5785), 0), 0, Tag1 ("Constrintern", 33)), 0); (("intern_reference", 1516), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -172), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -171)], (0)), 100000000, 0, -170), 0), 100000000, 0, -169), 0, (("interp/constrintern.mli", 149, 5888, 5888), ("interp/constrintern.mli", 149, 5888, 5937), 0), 0, Tag1 ("Constrintern", 34)), 0); (("intern_name_alias", 1517), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -168), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -164); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_level"), 0, (0)), 100000000, 0, -167)], (0)), 100000000, 0, -166)], (0)), 100000000, 0, -165)]), 100000000, 0, -163)], (0)), 100000000, 0, -162), 0), 100000000, 0, -161), 0, (("interp/constrintern.mli", 152, 6010, 6010), ("interp/constrintern.mli", 153, 6034, 6104), 0), 0, Tag1 ("Constrintern", 35)), 0); (("interp_reference", 1518), ((Tag1 (0, (Tag3 ((("ltac_sign", 1497)), 0, (0)), 100000000, 0, -160), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -159), (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -158), 0), 100000000, 0, -157), 0), 100000000, 0, -156), 0, (("interp/constrintern.mli", 156, 6167, 6167), ("interp/constrintern.mli", 156, 6167, 6224), 0), 0, Tag1 ("Constrintern", 36)), 0); (("interp_binder", 1519), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -155), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -154), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -153), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -152), (Tag3 (Tag1 ((Tag2 ("Evd")), "in_evar_universe_context"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -151)], (0)), 100000000, 0, -150), 0), 100000000, 0, -149), 0), 100000000, 0, -148), 0), 100000000, 0, -147), 0), 100000000, 0, -146), 0, (("interp/constrintern.mli", 160, 6252, 6252), ("interp/constrintern.mli", 161, 6317, 6353), 0), 0, Tag1 ("Constrintern", 37)), 0); (("interp_binder_evars", 1520), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -145), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -144), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -143), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -142), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -140); (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -141)]), 100000000, 0, -139), 0), 100000000, 0, -138), 0), 100000000, 0, -137), 0), 100000000, 0, -136), 0), 100000000, 0, -135), 0, (("interp/constrintern.mli", 163, 6355, 6355), ("interp/constrintern.mli", 163, 6355, 6441), 0), 0, Tag1 ("Constrintern", 38)), 0); (("interp_context_evars", 1521), ((Tag1 (Tag1 ("program_mode"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -134)], (0)), 100000000, 0, -133), (Tag1 (Tag1 ("impl_env"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("internalization_env", 1492)), 0, (0)), 100000000, 0, -132)], (0)), 100000000, 0, -131), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -130), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -129), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "local_binder_expr"), 0, (0)), 100000000, 0, -128)], (0)), 100000000, 0, -127), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -119); (Tag2 ([(Tag3 ((("internalization_env", 1492)), 0, (0)), 100000000, 0, -121); (Tag2 ([(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -124); (Tag3 (Tag1 ((Tag2 ("EConstr")), "rel_context"), 0, (0)), 100000000, 0, -125)]), 100000000, 0, -123); (Tag3 (Tag1 ((Tag2 ("Impargs")), "manual_implicits"), 0, (0)), 100000000, 0, -126)]), 100000000, 0, -122)]), 100000000, 0, -120)]), 100000000, 0, -118), 0), 100000000, 0, -117), 0), 100000000, 0, -116), 0), 100000000, 0, -115), 0), 100000000, 0, -114), 0), 100000000, 0, -113), 0, (("interp/constrintern.mli", 167, 6504, 6504), ("interp/constrintern.mli", 170, 6635, 6720), 0), 0, Tag1 ("Constrintern", 39)), 0); (("interp_named_context_evars", 1522), ((Tag1 (Tag1 ("program_mode"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -112)], (0)), 100000000, 0, -111), (Tag1 (Tag1 ("impl_env"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("internalization_env", 1492)), 0, (0)), 100000000, 0, -110)], (0)), 100000000, 0, -109), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -108), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -107), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "local_binder_expr"), 0, (0)), 100000000, 0, -106)], (0)), 100000000, 0, -105), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -97); (Tag2 ([(Tag3 ((("internalization_env", 1492)), 0, (0)), 100000000, 0, -99); (Tag2 ([(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -102); (Tag3 (Tag1 ((Tag2 ("EConstr")), "named_context"), 0, (0)), 100000000, 0, -103)]), 100000000, 0, -101); (Tag3 (Tag1 ((Tag2 ("Impargs")), "manual_implicits"), 0, (0)), 100000000, 0, -104)]), 100000000, 0, -100)]), 100000000, 0, -98)]), 100000000, 0, -96), 0), 100000000, 0, -95), 0), 100000000, 0, -94), 0), 100000000, 0, -93), 0), 100000000, 0, -92), 0), 100000000, 0, -91), 0, (("interp/constrintern.mli", 174, 6772, 6772), ("interp/constrintern.mli", 177, 6909, 6996), 0), 0, Tag1 ("Constrintern", 40)), 0); (("locate_reference", 1523), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -90), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -89)], (0)), 100000000, 0, -88), 0), 100000000, 0, -87), 0, (("interp/constrintern.mli", 182, 7129, 7129), ("interp/constrintern.mli", 182, 7129, 7188), 0), 0, Tag1 ("Constrintern", 41)), 0); (("is_global", 1524), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -86), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -85), 0), 100000000, 0, -84), 0, (("interp/constrintern.mli", 183, 7189, 7189), ("interp/constrintern.mli", 183, 7189, 7217), 0), 0, Tag1 ("Constrintern", 42)), 0); (("interp_notation_constr", 1525), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -83), (Tag1 (Tag1 ("impls"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("internalization_env", 1492)), 0, (0)), 100000000, 0, -82)], (0)), 100000000, 0, -81), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Notation_term")), "notation_interp_env"), 0, (0)), 100000000, 0, -80), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -79), (Tag2 ([(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "Map"), "t"), [(Tag2 ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -75); (Tag3 (Tag1 ((Tag2 ("Notation_term")), "subscopes"), 0, (0)), 100000000, 0, -76)]), 100000000, 0, -74)], (0)), 100000000, 0, -73); (Tag3 (Tag1 ((Tag2 ("Notation_term")), "notation_constr"), 0, (0)), 100000000, 0, -77); (Tag3 (Tag1 ((Tag2 ("Notation_term")), "reversibility_status"), 0, (0)), 100000000, 0, -78)]), 100000000, 0, -72), 0), 100000000, 0, -71), 0), 100000000, 0, -70), 0), 100000000, 0, -69), 0), 100000000, 0, -68), 0, (("interp/constrintern.mli", 187, 7358, 7358), ("interp/constrintern.mli", 189, 7464, 7534), 0), 0, Tag1 ("Constrintern", 43)), 0); (("intern_core", 1526), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Pretyping")), "typing_constraint"), 0, (0)), 100000000, 0, -67), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -66), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -65), (Tag1 (Tag1 ("strict_check"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -64)], (0)), 100000000, 0, -63), (Tag1 (Tag1 ("pattern_mode"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -62)], (0)), 100000000, 0, -61), (Tag1 (Tag1 ("ltacvars"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("ltac_sign", 1497)), 0, (0)), 100000000, 0, -60)], (0)), 100000000, 0, -59), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Genintern")), "intern_variable_status"), 0, (0)), 100000000, 0, -58), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -57), (Tag3 (Tag1 ((Tag2 ("Glob_term")), "glob_constr"), 0, (0)), 100000000, 0, -56), 0), 100000000, 0, -55), 0), 100000000, 0, -54), 0), 100000000, 0, -53), 0), 100000000, 0, -52), 0), 100000000, 0, -51), 0), 100000000, 0, -50), 0), 100000000, 0, -49), 0), 100000000, 0, -48), 0, (("interp/constrintern.mli", 193, 7594, 7594), ("interp/constrintern.mli", 196, 7774, 7787), 0), 0, Tag1 ("Constrintern", 44)), 0); (("parsing_explicit", 1527), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -47)], (0)), 100000000, 0, -46), 0, (("interp/constrintern.mli", 199, 7818, 7818), ("interp/constrintern.mli", 199, 7818, 7849), 0), 0, Tag1 ("Constrintern", 45)), 0); (("get_asymmetric_patterns", 1528), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -45), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -44), 0), 100000000, 0, -43), 0, (("interp/constrintern.mli", 202, 7920, 7920), ("interp/constrintern.mli", 202, 7920, 7962), 0), 0, Tag1 ("Constrintern", 46)), 0); (("check_duplicate", 1529), ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -42)], (0)), 100000000, 0, -41), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -39); (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -40)]), 100000000, 0, -38)], (0)), 100000000, 0, -37), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -36), 0), 100000000, 0, -35), 0), 100000000, 0, -34), 0, (("interp/constrintern.mli", 204, 7964, 7964), ("interp/constrintern.mli", 204, 7964, 8035), 0), 0, Tag1 ("Constrintern", 48)), 0); (("interp_univ_constraint", 1530), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -33), (Tag1 (0, (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "sort_name_expr"), 0, (0)), 100000000, 0, -30); (Tag3 (Tag1 ((Tag2 ("Univ")), "constraint_type"), 0, (0)), 100000000, 0, -31); (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "sort_name_expr"), 0, (0)), 100000000, 0, -32)]), 100000000, 0, -29), (Tag3 (Tag1 ((Tag2 ("Univ")), "univ_constraint"), 0, (0)), 100000000, 0, -28), 0), 100000000, 0, -27), 0), 100000000, 0, -26), 0, (("interp/constrintern.mli", 208, 8122, 8122), ("interp/constrintern.mli", 211, 8226, 8251), 0), 0, Tag1 ("Constrintern", 49)), 0); (("interp_univ_decl", 1531), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -25), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "universe_decl_expr"), 0, (0)), 100000000, 0, -24), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -22); (Tag3 (Tag1 ((Tag2 ("UState")), "universe_decl"), 0, (0)), 100000000, 0, -23)]), 100000000, 0, -21), 0), 100000000, 0, -20), 0), 100000000, 0, -19), 0, (("interp/constrintern.mli", 214, 8304, 8304), ("interp/constrintern.mli", 215, 8364, 8422), 0), 0, Tag1 ("Constrintern", 50)), 0); (("interp_univ_decl_opt", 1532), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -18), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "universe_decl_expr"), 0, (0)), 100000000, 0, -17)], (0)), 100000000, 0, -16), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -14); (Tag3 (Tag1 ((Tag2 ("UState")), "universe_decl"), 0, (0)), 100000000, 0, -15)]), 100000000, 0, -13), 0), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("interp/constrintern.mli", 217, 8424, 8424), ("interp/constrintern.mli", 218, 8495, 8553), 0), 0, Tag1 ("Constrintern", 51)), 0); (("interp_cumul_univ_decl_opt", 1533), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -10), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Constrexpr")), "cumul_univ_decl_expr"), 0, (0)), 100000000, 0, -9)], (0)), 100000000, 0, -8), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -5); (Tag3 (Tag1 ((Tag2 ("UState")), "universe_decl"), 0, (0)), 100000000, 0, -6); (Tag3 (Tag1 ((Tag2 ("Entries")), "variance_entry"), 0, (0)), 100000000, 0, -7)]), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("interp/constrintern.mli", 220, 8555, 8555), ("interp/constrintern.mli", 221, 8634, 8696), 0), 0, Tag1 ("Constrintern", 52)), 0)], "Constrintern", [("Constrintern", ("\221\031i\248\218\212\161/UQA\147\1348GM")); ("Z", ("\253\196\2168\027\199O\134\220\218\031'\1484\233o")); ("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Vmemitcodes", ("wCd\138\165\158DD\241gH\236.\210\197\247")); ("Vmbytecodes", ("\025\021\151\137Dx\149W\236+[\143f\208\160\016")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Unix", (":B72R\011\005Sj\189)\011\239PH\254")); ("UnivSubst", ("\190qu\031mc\130\181\003G]\132\"\219m)")); ("UnivProblem", ("6'\161\018\181\001.\253\000\141a6\171\1727\155")); ("UnivNames", ("%\151_\209%+JM$n\001\232\194n\178N")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UState", ("SD\203\215|\136\n\251\239\208\148\215C\n\167\005")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Summary", ("\148G\135\226\024L3\246\021\028U\146\164`\253\250")); ("Store", ("/dT\252\145\179pq\216{\181\206\190K+U")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Random", ("\020\005Xq\171\026\218\152X\135\254\023\133zK\200")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("Section", ("\245\207\b\021\142v=\155#w\246}\"4b\006")); ("Safe_typing", (")\250?\164\145\132\241\127\186\152h+\145\"\237l")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("Range", ("\218\130\001r\237\r\144\171\164\021l\155\196\143sg")); ("Proofview_monad", ("\218\196\189S\147\216\129\221\231\224v\228O\024*\239")); ("Proofview", ("\245\140U\027\236\199\199&\242\156\199YG\250tA")); ("Pretyping", ("\151\160\191\149\149Ff\195\171g\189\156\r\166n\189")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Pattern", ("\195C\140Wb=\022\222\208\227^K\003\020\215X")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("NumTok", ("vd\023^\251\244B\166\145'\156\196-0\027\169")); ("Notation_term", ("5\002\017\217b\193nc>\239\239\237\244\031\173?")); ("Nativevalues", ("8:\007\025e\226c,\001\171\146#l\210\171\152")); ("Nativelib", ("V\239\205Y1\147E:,\176\196Hy\1483|")); ("Nativecode", ("\190\185\255\006m\012\210\163\138Rz\247\15283\183")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Namegen", ("\187\222\224T\255\020\1808-\212*\164\131\177\157x")); ("Monad", ("\244\171T\157\194p\187\160\149\195{\132\222\020\253\148")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Ltac_pretype", ("\224\"\167\018i:U\172>\188\128$\r\252\020T")); ("Logic_monad", ("\130\157\160Q\163vQ\137\184\2242\209\128\024\220i")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Libnames", ("fp\0255\167\162\209\153\137\161\169#\246\193\003\198")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Impargs", ("\021\197\1992>\rm\185\141\"iHY\133\138/")); ("Hook", ("\183\194\223\003\155\169',\187\240a;E\b\1396")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Gramlib__Stream", ("\248\\H\205_76\253\136\146\200\031\165\021=t")); ("Gramlib", ("\154\143\210e\021i\246\176\224\194\220\217\007\145\139A")); ("Glob_term", ("\165=a\227\160\153.\021_$\232\209T\236\153O")); ("GlobEnv", ("(\152\019ok\006R\183\193\145\137\133<\171\005\231")); ("Genlambda", ("\170}\024\241\141\222\136S\169\219\2212i\134KI")); ("Geninterp", ("2S\151\191\189\159\004\188;\224d\199|U\004\028")); ("Genintern", ("\152Ac\019=n\235\197\141\224T\162\192\148eg")); ("Genarg", ("\1434\015\001\152\196\005s\156\136\195\185\247\b3\t")); ("Ftactic", ("K\172\205\128\241\162\160\201\202\1561o\180L\206:")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evd", ("\211\205p\193\216\129r\006\239oN\142ar\196\175")); ("Evarutil", ("\005\175\132e\164O\223svi \252\232\138\022\137")); ("Evardefine", ("\178\167R\199\158\242\001Y\215<\151\020\206\153\227\019")); ("Evar_kinds", ("\023L\186\132\218}\254\221\185\198\220\200h\003{\021")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Environ", ("\171b\1579\229<\003Z\147IL\225X\254\182\204")); ("Entries", ("\172\201\198\221Ap\027_{\174\141C\021\";p")); ("EConstr", ("\201aW\156\157;N\004\201V\208\006L\166\211)")); ("Dyn", ("\131z`\205v\2306\007x\027&K.?;\169")); ("Declarations", ("\239\137n\019\030w$\182\166z^{\b\206\163\175")); ("DAst", ("\224/\200)\007\184ni\134\b\139\204\241\005w\212")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Conversion", ("\158\150&\195M\tv\127|\029\158RRK\211A")); ("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constrexpr", ("p'r\245\184chL\183\249\"\213]\1741\237")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CUnix", ("\140Zl\153\167\011J\015\005|th\247OTu")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CEphemeron", ("\204I\179-\206(x4\173\229\250\001PkH\151")); ("CDebug", ("^4\210p7\239!3\138\138\213?\239`\250\157")); ("CClosure", ("\167\b\022\241V-\r\253\b\002\000j]\223%\142")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])
Evd.evar_map * UState.universe_decl * Entries.variance_entry

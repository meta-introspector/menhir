type error =
    Subcommand_failed
  | Subcommand_got_signal
  | Io_error
  | Exceptionl_condition
val execute :
  ?max_jobs:int ->
  ?ticker:(unit -> unit) ->
  ?period:float ->
  ?display:((out_channel -> unit) -> unit) ->
  exit:(error -> unit) ->
  ("DEBUG:rule", [Tag1 (("error", 275), (0, 0, Tag1 ([(("Subcommand_failed", 270), (0), 0, (("plugin-lib/ocamlbuild_executor.mli", 21, 1065, 1067), ("plugin-lib/ocamlbuild_executor.mli", 21, 1065, 1086), 0), 0, Tag1 ("Ocamlbuild_executor", 1)); (("Subcommand_got_signal", 271), (0), 0, (("plugin-lib/ocamlbuild_executor.mli", 22, 1087, 1089), ("plugin-lib/ocamlbuild_executor.mli", 22, 1087, 1112), 0), 0, Tag1 ("Ocamlbuild_executor", 2)); (("Io_error", 272), (0), 0, (("plugin-lib/ocamlbuild_executor.mli", 23, 1113, 1115), ("plugin-lib/ocamlbuild_executor.mli", 23, 1113, 1125), 0), 0, Tag1 ("Ocamlbuild_executor", 3)); (("Exceptionl_condition", 273), (0), 0, (("plugin-lib/ocamlbuild_executor.mli", 24, 1126, 1128), ("plugin-lib/ocamlbuild_executor.mli", 24, 1126, 1150), 0), 0, Tag1 ("Ocamlbuild_executor", 4))], 0), 1, 0, 0, 0, 0, 0, (("plugin-lib/ocamlbuild_executor.mli", 20, 1052, 1052), ("plugin-lib/ocamlbuild_executor.mli", 24, 1126, 1150), 0), 0, 1, 0, Tag1 ("Ocamlbuild_executor", 0)), 1, 0); (("execute", 276), ((Tag1 (Tag1 ("max_jobs"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -34)], (0)), 100000000, 0, -33), (Tag1 (Tag1 ("ticker"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -32), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -31), 0), 100000000, 0, -30)], (0)), 100000000, 0, -29), (Tag1 (Tag1 ("period"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -28)], (0)), 100000000, 0, -27), (Tag1 (Tag1 ("display"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -26), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -25), 0), 100000000, 0, -24), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -23), 0), 100000000, 0, -22)], (0)), 100000000, 0, -21), (Tag1 (("exit"), (Tag1 (0, (Tag3 ((("error", 275)), 0, (0)), 100000000, 0, -20), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -19), 0), 100000000, 0, -18), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("list", 9)), [(Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -17), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -16), 0), 100000000, 0, -15)], (0)), 100000000, 0, -14)], (0)), 100000000, 0, -13), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -11)], (0)), 100000000, 0, -10); (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -12)]), 100000000, 0, -9)], (0)), 100000000, 0, -8), 0), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("plugin-lib/ocamlbuild_executor.mli", 49, 2261, 2261), ("plugin-lib/ocamlbuild_executor.mli", 56, 2450, 2478), 0), 0, Tag1 ("Ocamlbuild_executor", 5)), 0)], "Ocamlbuild_executor", [("Ocamlbuild_executor", ("N;@\176\030\023\001\170Tv\255x\b\141]\243")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
(unit -> string) list list -> (bool list * exn) option

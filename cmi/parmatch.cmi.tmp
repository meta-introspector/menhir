val const_compare : Asttypes.constant -> Asttypes.constant -> int
val le_pat : Typedtree.pattern -> Typedtree.pattern -> bool
val le_pats : Typedtree.pattern list -> Typedtree.pattern list -> bool
module Compat :
  sig
    val equal :
      Types.constructor_description -> Types.constructor_description -> bool
  end ->
    sig
      val compat : Typedtree.pattern -> Typedtree.pattern -> bool
      val compats : Typedtree.pattern list -> Typedtree.pattern list -> bool
    end
exception Empty
val lub : Typedtree.pattern -> Typedtree.pattern -> Typedtree.pattern
val lubs :
  Typedtree.pattern list -> Typedtree.pattern list -> Typedtree.pattern list
val get_mins : ('a -> 'a -> bool) -> 'a list -> 'a list
val set_args :
  Typedtree.pattern -> Typedtree.pattern list -> Typedtree.pattern list
val set_args_erase_mutable :
  Typedtree.pattern -> Typedtree.pattern list -> Typedtree.pattern list
val pat_of_constr :
  Typedtree.pattern -> Types.constructor_description -> Typedtree.pattern
val complete_constrs :
  Types.constructor_description Typedtree.pattern_data ->
  Types.constructor_description list -> Types.constructor_description list
val pats_of_type : Env.t -> Types.type_expr -> Typedtree.pattern list
val pressure_variants : Env.t -> Typedtree.pattern list -> unit
val pressure_variants_in_computation_pattern :
  Env.t -> Typedtree.computation Typedtree.general_pattern list -> unit
val check_partial :
  (Typedtree.pattern -> Typedtree.pattern option) ->
  Location.t -> Typedtree.value Typedtree.case list -> Typedtree.partial
val check_unused :
  (bool -> Typedtree.pattern -> Typedtree.pattern option) ->
  Typedtree.value Typedtree.case list -> unit
val irrefutable : Typedtree.pattern -> bool
val inactive : partial:Typedtree.partial -> Typedtree.pattern -> bool
val check_ambiguous_bindings : Typedtree.value Typedtree.case list -> unit
("DEBUG:rule", [(("const_compare", 748), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "constant"), 0, (0)), 100000000, 0, -123), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "constant"), 0, (0)), 100000000, 0, -122), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -121), 0), 100000000, 0, -120), 0), 100000000, 0, -119), 0, (("typing/parmatch.mli", 22, 1181, 1181), ("typing/parmatch.mli", 22, 1181, 1228), 0), 0, Tag1 ("Parmatch", 4)), 0); (("le_pat", 749), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -118), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -117), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -116), 0), 100000000, 0, -115), 0), 100000000, 0, -114), 0, (("typing/parmatch.mli", 29, 1413, 1413), ("typing/parmatch.mli", 29, 1413, 1452), 0), 0, Tag1 ("Parmatch", 5)), 0); (("le_pats", 750), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -113)], (0)), 100000000, 0, -112), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -111)], (0)), 100000000, 0, -110), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -109), 0), 100000000, 0, -108), 0), 100000000, 0, -107), 0, (("typing/parmatch.mli", 32, 1525, 1525), ("typing/parmatch.mli", 32, 1525, 1575), 0), 0, Tag1 ("Parmatch", 6)), 0); Tag3 (("Compat", 751), 0, (Tag2 ((0, Tag1 ([(("equal", 769), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "constructor_description"), 0, (0)), 100000000, 0, -128), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "constructor_description"), 0, (0)), 100000000, 0, -127), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -126), 0), 100000000, 0, -125), 0), 100000000, 0, -124), 0, (("typing/parmatch.mli", 39, 1768, 1774), ("typing/parmatch.mli", 42, 1874, 1892), 0), 0, Tag1 ("Parmatch", 7)), 0)])), Tag1 ([(("compat", 770), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -140), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -139), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -138), 0), 100000000, 0, -137), 0), 100000000, 0, -136), 0, (("typing/parmatch.mli", 44, 1910, 1917), ("typing/parmatch.mli", 44, 1910, 1956), 0), 0, Tag1 ("Parmatch", 8)), 0); (("compats", 771), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -135)], (0)), 100000000, 0, -134), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -133)], (0)), 100000000, 0, -132), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -131), 0), 100000000, 0, -130), 0), 100000000, 0, -129), 0, (("typing/parmatch.mli", 45, 1957, 1964), ("typing/parmatch.mli", 45, 1957, 2014), 0), 0, Tag1 ("Parmatch", 9)), 0)])), 0, (("typing/parmatch.mli", 36, 1729, 1729), ("typing/parmatch.mli", 46, 2015, 2023), 0), Tag1 ("Parmatch", 10)), 0, 0); Tag2 (("Empty", 752), ((Tag3 ("exn", 7)), 0, (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Parmatch", 11)), 2, 0); (("lub", 753), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -106), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -105), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -104), 0), 100000000, 0, -103), 0), 100000000, 0, -102), 0, (("typing/parmatch.mli", 50, 2042, 2042), ("typing/parmatch.mli", 50, 2042, 2081), 0), 0, Tag1 ("Parmatch", 12)), 0); (("lubs", 754), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -101)], (0)), 100000000, 0, -100), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -99)], (0)), 100000000, 0, -98), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -97)], (0)), 100000000, 0, -96), 0), 100000000, 0, -95), 0), 100000000, 0, -94), 0, (("typing/parmatch.mli", 54, 2221, 2221), ("typing/parmatch.mli", 54, 2221, 2276), 0), 0, Tag1 ("Parmatch", 13)), 0); (("get_mins", 755), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -89), (Tag1 (0, ((("a")), 100000000, 0, -89), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -93), 0), 100000000, 0, -92), 0), 100000000, 0, -91), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -89)], (0)), 100000000, 0, -90), (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -89)], (0)), 100000000, 0, -88), 0), 100000000, 0, -87), 0), 100000000, 0, -86), 0, (("typing/parmatch.mli", 58, 2375, 2375), ("typing/parmatch.mli", 58, 2375, 2430), 0), 0, Tag1 ("Parmatch", 14)), 0); (("set_args", 756), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -85), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -84)], (0)), 100000000, 0, -83), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -82)], (0)), 100000000, 0, -81), 0), 100000000, 0, -80), 0), 100000000, 0, -79), 0, (("typing/parmatch.mli", 65, 2617, 2617), ("typing/parmatch.mli", 65, 2617, 2671), 0), 0, Tag1 ("Parmatch", 15)), 0); (("set_args_erase_mutable", 757), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -78), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -77)], (0)), 100000000, 0, -76), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -75)], (0)), 100000000, 0, -74), 0), 100000000, 0, -73), 0), 100000000, 0, -72), 0, (("typing/parmatch.mli", 66, 2672, 2672), ("typing/parmatch.mli", 66, 2672, 2740), 0), 0, Tag1 ("Parmatch", 16)), 0); (("pat_of_constr", 758), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -71), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "constructor_description"), 0, (0)), 100000000, 0, -70), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -69), 0), 100000000, 0, -68), 0), 100000000, 0, -67), 0, (("typing/parmatch.mli", 68, 2742, 2742), ("typing/parmatch.mli", 68, 2742, 2807), 0), 0, Tag1 ("Parmatch", 17)), 0); (("complete_constrs", 759), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern_data"), [(Tag3 (Tag1 ((Tag2 ("Types")), "constructor_description"), 0, (0)), 100000000, 0, -66)], (0)), 100000000, 0, -65), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "constructor_description"), 0, (0)), 100000000, 0, -64)], (0)), 100000000, 0, -63), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Types")), "constructor_description"), 0, (0)), 100000000, 0, -62)], (0)), 100000000, 0, -61), 0), 100000000, 0, -60), 0), 100000000, 0, -59), 0, (("typing/parmatch.mli", 69, 2808, 2808), ("typing/parmatch.mli", 72, 2911, 2943), 0), 0, Tag1 ("Parmatch", 18)), 0); (("pats_of_type", 760), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -58), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Types")), "type_expr"), 0, (0)), 100000000, 0, -57), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -56)], (0)), 100000000, 0, -55), 0), 100000000, 0, -54), 0), 100000000, 0, -53), 0, (("typing/parmatch.mli", 85, 3408, 3408), ("typing/parmatch.mli", 85, 3408, 3461), 0), 0, Tag1 ("Parmatch", 19)), 0); (("pressure_variants", 761), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -52), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -51)], (0)), 100000000, 0, -50), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -49), 0), 100000000, 0, -48), 0), 100000000, 0, -47), 0, (("typing/parmatch.mli", 87, 3463, 3463), ("typing/parmatch.mli", 88, 3486, 3517), 0), 0, Tag1 ("Parmatch", 20)), 0); (("pressure_variants_in_computation_pattern", 762), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Env")), "t"), 0, (0)), 100000000, 0, -46), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "general_pattern"), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "computation"), 0, (0)), 100000000, 0, -45)], (0)), 100000000, 0, -44)], (0)), 100000000, 0, -43), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -42), 0), 100000000, 0, -41), 0), 100000000, 0, -40), 0, (("typing/parmatch.mli", 89, 3518, 3518), ("typing/parmatch.mli", 90, 3564, 3615), 0), 0, Tag1 ("Parmatch", 21)), 0); (("check_partial", 763), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -39), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -38)], (0)), 100000000, 0, -37), 0), 100000000, 0, -36), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Location")), "t"), 0, (0)), 100000000, 0, -35), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "case"), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "value"), 0, (0)), 100000000, 0, -34)], (0)), 100000000, 0, -33)], (0)), 100000000, 0, -32), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "partial"), 0, (0)), 100000000, 0, -31), 0), 100000000, 0, -30), 0), 100000000, 0, -29), 0), 100000000, 0, -28), 0, (("typing/parmatch.mli", 99, 4022, 4022), ("typing/parmatch.mli", 100, 4041, 4116), 0), 0, Tag1 ("Parmatch", 22)), 0); (("check_unused", 764), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -27), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -26), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -25)], (0)), 100000000, 0, -24), 0), 100000000, 0, -23), 0), 100000000, 0, -22), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "case"), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "value"), 0, (0)), 100000000, 0, -21)], (0)), 100000000, 0, -20)], (0)), 100000000, 0, -19), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -18), 0), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("typing/parmatch.mli", 101, 4117, 4117), ("typing/parmatch.mli", 102, 4135, 4201), 0), 0, Tag1 ("Parmatch", 23)), 0); (("irrefutable", 765), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -15), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -14), 0), 100000000, 0, -13), 0, (("typing/parmatch.mli", 105, 4230, 4230), ("typing/parmatch.mli", 105, 4230, 4263), 0), 0, Tag1 ("Parmatch", 24)), 0); (("inactive", 766), ((Tag1 (("partial"), (Tag3 (Tag1 ((Tag2 ("Typedtree")), "partial"), 0, (0)), 100000000, 0, -12), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Typedtree")), "pattern"), 0, (0)), 100000000, 0, -11), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -10), 0), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("typing/parmatch.mli", 111, 4512, 4512), ("typing/parmatch.mli", 111, 4512, 4561), 0), 0, Tag1 ("Parmatch", 25)), 0); (("check_ambiguous_bindings", 767), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "case"), [(Tag3 (Tag1 ((Tag2 ("Typedtree")), "value"), 0, (0)), 100000000, 0, -7)], (0)), 100000000, 0, -6)], (0)), 100000000, 0, -5), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0, (("typing/parmatch.mli", 114, 4588, 4588), ("typing/parmatch.mli", 114, 4588, 4642), 0), 0, Tag1 ("Parmatch", 26)), 0); (("some_private_tag", 768), ((Tag3 (Tag1 ((Tag2 ("Asttypes")), "label"), 0, (0)), 100000000, 0, -2), 0, (("typing/parmatch.mli", 117, 4719, 4719), ("typing/parmatch.mli", 117, 4719, 4747), 0), 0, Tag1 ("Parmatch", 27)), 0)], "Parmatch", [("Parmatch", ("\127I\188\158\152t\232U\154A\na\166\188\015\218")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Types", ("\177\238\029.\220\006\163!\230\015\006\182\133\155\194\166")); ("Typedtree", ("c5z\186\175w\146\254\018V\184\031\0038\004\227")); ("Type_immediacy", ("\"\127k\011Q\241\211\138\193;8\142\129\141#\251")); ("Subst", ("\021\031\148\223\127\186\189\135\027}\145r\216\143\177\156")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shape", ("\235\127Y\213\025\137=\244\218\181\248N\189\188\216p")); ("Primitive", ("}Shh\162\015|\220A\203\249\232\245G\213\019")); ("Path", ("\012\183\178\025\1298\228*\021r\185\160Y\252\n\026")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Outcometree", ("9\021%\234\211\206\210\004H\165\208\2014\234Q\142")); ("Misc", ("*\026\026\234c\191\131\161\\\203\183\012O\252\153\198")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Load_path", ("\012@\228l\230\164S\172h\1726X\020\252o}")); ("Identifiable", ("\004F\207\014\158GU\001\184\214\187%/#;\211")); ("Ident", ("\b9;!\187.\220\163(x\b\174\\\223\020\004")); ("Env", ("\021\n\181\142x\b\169j\227\"\017\248*\178\245\223")); ("Cmi_format", ("6\177\bU\139\"\023\152=\249\135\174\b\011Cg")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Build_path_prefix_map", ("y\028\167\207D\220\198\216\011\208\172\149\2416\bc")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216"))], [(0)])
val some_private_tag : Asttypes.label

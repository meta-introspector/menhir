type ratio
val null_denominator : ratio -> bool
val numerator_ratio : ratio -> Big_int.big_int
val denominator_ratio : ratio -> Big_int.big_int
val sign_ratio : ratio -> int
val normalize_ratio : ratio -> ratio
val cautious_normalize_ratio : ratio -> ratio
val cautious_normalize_ratio_when_printing : ratio -> ratio
val create_ratio : Big_int.big_int -> Big_int.big_int -> ratio
val create_normalized_ratio : Big_int.big_int -> Big_int.big_int -> ratio
val is_normalized_ratio : ratio -> bool
val report_sign_ratio : ratio -> Big_int.big_int -> Big_int.big_int
val abs_ratio : ratio -> ratio
val is_integer_ratio : ratio -> bool
val add_ratio : ratio -> ratio -> ratio
val minus_ratio : ratio -> ratio
val add_int_ratio : int -> ratio -> ratio
val add_big_int_ratio : Big_int.big_int -> ratio -> ratio
val sub_ratio : ratio -> ratio -> ratio
val mult_ratio : ratio -> ratio -> ratio
val mult_int_ratio : int -> ratio -> ratio
val mult_big_int_ratio : Big_int.big_int -> ratio -> ratio
val square_ratio : ratio -> ratio
val inverse_ratio : ratio -> ratio
val div_ratio : ratio -> ratio -> ratio
val integer_ratio : ratio -> Big_int.big_int
val floor_ratio : ratio -> Big_int.big_int
val round_ratio : ratio -> Big_int.big_int
val ceiling_ratio : ratio -> Big_int.big_int
val eq_ratio : ratio -> ratio -> bool
val compare_ratio : ratio -> ratio -> int
val lt_ratio : ratio -> ratio -> bool
val le_ratio : ratio -> ratio -> bool
val gt_ratio : ratio -> ratio -> bool
val ge_ratio : ratio -> ratio -> bool
val max_ratio : ratio -> ratio -> ratio
val min_ratio : ratio -> ratio -> ratio
val eq_big_int_ratio : Big_int.big_int -> ratio -> bool
val compare_big_int_ratio : Big_int.big_int -> ratio -> int
val lt_big_int_ratio : Big_int.big_int -> ratio -> bool
val le_big_int_ratio : Big_int.big_int -> ratio -> bool
val gt_big_int_ratio : Big_int.big_int -> ratio -> bool
val ge_big_int_ratio : Big_int.big_int -> ratio -> bool
val int_of_ratio : ratio -> int
val ratio_of_int : int -> ratio
val ratio_of_nat : Nat.nat -> ratio
val nat_of_ratio : ratio -> Nat.nat
val ratio_of_big_int : Big_int.big_int -> ratio
val big_int_of_ratio : ratio -> Big_int.big_int
val div_int_ratio : int -> ratio -> ratio
val div_ratio_int : ratio -> int -> ratio
val div_big_int_ratio : Big_int.big_int -> ratio -> ratio
val div_ratio_big_int : ratio -> Big_int.big_int -> ratio
val approx_ratio_fix : int -> ratio -> string
val approx_ratio_exp : int -> ratio -> string
val float_of_rational_string : ratio -> string
val string_of_ratio : ratio -> string
val ratio_of_string : string -> ratio
val float_of_ratio : ratio -> float
val power_ratio_positive_int : ratio -> int -> ratio
("DEBUG:rule", [Tag1 (("ratio", 446), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("ratio.mli", 29, 1516, 1516), ("ratio.mli", 29, 1516, 1526), 0), 0, 0, 0, Tag1 ("Ratio", 0)), 1, 0); (("null_denominator", 447), ((Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -247), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -246), 0), 100000000, 0, -245), 0, (("ratio.mli", 33, 1537, 1537), ("ratio.mli", 33, 1537, 1573), 0), 0, Tag1 ("Ratio", 1)), 0); (("numerator_ratio", 448), ((Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -244), (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -243), 0), 100000000, 0, -242), 0, (("ratio.mli", 34, 1574, 1574), ("ratio.mli", 34, 1574, 1612), 0), 0, Tag1 ("Ratio", 2)), 0); (("denominator_ratio", 449), ((Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -241), (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -240), 0), 100000000, 0, -239), 0, (("ratio.mli", 35, 1613, 1613), ("ratio.mli", 35, 1613, 1653), 0), 0, Tag1 ("Ratio", 3)), 0); (("sign_ratio", 450), ((Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -238), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -237), 0), 100000000, 0, -236), 0, (("ratio.mli", 36, 1654, 1654), ("ratio.mli", 36, 1654, 1683), 0), 0, Tag1 ("Ratio", 4)), 0); (("normalize_ratio", 451), ((Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -235), (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -234), 0), 100000000, 0, -233), 0, (("ratio.mli", 37, 1684, 1684), ("ratio.mli", 37, 1684, 1720), 0), 0, Tag1 ("Ratio", 5)), 0); (("cautious_normalize_ratio", 452), ((Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -232), (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -231), 0), 100000000, 0, -230), 0, (("ratio.mli", 38, 1721, 1721), ("ratio.mli", 38, 1721, 1766), 0), 0, Tag1 ("Ratio", 6)), 0); (("cautious_normalize_ratio_when_printing", 453), ((Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -229), (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -228), 0), 100000000, 0, -227), 0, (("ratio.mli", 39, 1767, 1767), ("ratio.mli", 39, 1767, 1826), 0), 0, Tag1 ("Ratio", 7)), 0); (("create_ratio", 454), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -226), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -225), (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -224), 0), 100000000, 0, -223), 0), 100000000, 0, -222), 0, (("ratio.mli", 40, 1827, 1827), ("ratio.mli", 40, 1827, 1873), 0), 0, Tag1 ("Ratio", 8)), 0); (("create_normalized_ratio", 455), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -221), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -220), (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -219), 0), 100000000, 0, -218), 0), 100000000, 0, -217), 0, (("ratio.mli", 41, 1896, 1896), ("ratio.mli", 41, 1896, 1953), 0), 0, Tag1 ("Ratio", 9)), 0); (("is_normalized_ratio", 456), ((Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -216), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -215), 0), 100000000, 0, -214), 0, (("ratio.mli", 43, 2018, 2018), ("ratio.mli", 43, 2018, 2057), 0), 0, Tag1 ("Ratio", 10)), 0); (("report_sign_ratio", 457), ((Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -213), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -212), (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -211), 0), 100000000, 0, -210), 0), 100000000, 0, -209), 0, (("ratio.mli", 44, 2058, 2058), ("ratio.mli", 44, 2058, 2109), 0), 0, Tag1 ("Ratio", 11)), 0); (("abs_ratio", 458), ((Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -208), (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -207), 0), 100000000, 0, -206), 0, (("ratio.mli", 45, 2110, 2110), ("ratio.mli", 45, 2110, 2140), 0), 0, Tag1 ("Ratio", 12)), 0); (("is_integer_ratio", 459), ((Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -205), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -204), 0), 100000000, 0, -203), 0, (("ratio.mli", 46, 2141, 2141), ("ratio.mli", 46, 2141, 2177), 0), 0, Tag1 ("Ratio", 13)), 0); (("add_ratio", 460), ((Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -202), (Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -201), (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -200), 0), 100000000, 0, -199), 0), 100000000, 0, -198), 0, (("ratio.mli", 47, 2178, 2178), ("ratio.mli", 47, 2178, 2217), 0), 0, Tag1 ("Ratio", 14)), 0); (("minus_ratio", 461), ((Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -197), (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -196), 0), 100000000, 0, -195), 0, (("ratio.mli", 48, 2218, 2218), ("ratio.mli", 48, 2218, 2250), 0), 0, Tag1 ("Ratio", 15)), 0); (("add_int_ratio", 462), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -194), (Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -193), (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -192), 0), 100000000, 0, -191), 0), 100000000, 0, -190), 0, (("ratio.mli", 49, 2251, 2251), ("ratio.mli", 49, 2251, 2292), 0), 0, Tag1 ("Ratio", 16)), 0); (("add_big_int_ratio", 463), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -189), (Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -188), (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -187), 0), 100000000, 0, -186), 0), 100000000, 0, -185), 0, (("ratio.mli", 50, 2293, 2293), ("ratio.mli", 50, 2293, 2342), 0), 0, Tag1 ("Ratio", 17)), 0); (("sub_ratio", 464), ((Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -184), (Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -183), (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -182), 0), 100000000, 0, -181), 0), 100000000, 0, -180), 0, (("ratio.mli", 51, 2343, 2343), ("ratio.mli", 51, 2343, 2382), 0), 0, Tag1 ("Ratio", 18)), 0); (("mult_ratio", 465), ((Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -179), (Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -178), (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -177), 0), 100000000, 0, -176), 0), 100000000, 0, -175), 0, (("ratio.mli", 52, 2383, 2383), ("ratio.mli", 52, 2383, 2423), 0), 0, Tag1 ("Ratio", 19)), 0); (("mult_int_ratio", 466), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -174), (Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -173), (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -172), 0), 100000000, 0, -171), 0), 100000000, 0, -170), 0, (("ratio.mli", 53, 2424, 2424), ("ratio.mli", 53, 2424, 2466), 0), 0, Tag1 ("Ratio", 20)), 0); (("mult_big_int_ratio", 467), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -169), (Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -168), (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -167), 0), 100000000, 0, -166), 0), 100000000, 0, -165), 0, (("ratio.mli", 54, 2467, 2467), ("ratio.mli", 54, 2467, 2517), 0), 0, Tag1 ("Ratio", 21)), 0); (("square_ratio", 468), ((Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -164), (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -163), 0), 100000000, 0, -162), 0, (("ratio.mli", 55, 2518, 2518), ("ratio.mli", 55, 2518, 2551), 0), 0, Tag1 ("Ratio", 22)), 0); (("inverse_ratio", 469), ((Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -161), (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -160), 0), 100000000, 0, -159), 0, (("ratio.mli", 56, 2552, 2552), ("ratio.mli", 56, 2552, 2586), 0), 0, Tag1 ("Ratio", 23)), 0); (("div_ratio", 470), ((Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -158), (Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -157), (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -156), 0), 100000000, 0, -155), 0), 100000000, 0, -154), 0, (("ratio.mli", 57, 2587, 2587), ("ratio.mli", 57, 2587, 2626), 0), 0, Tag1 ("Ratio", 24)), 0); (("integer_ratio", 471), ((Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -153), (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -152), 0), 100000000, 0, -151), 0, (("ratio.mli", 58, 2627, 2627), ("ratio.mli", 58, 2627, 2663), 0), 0, Tag1 ("Ratio", 25)), 0); (("floor_ratio", 472), ((Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -150), (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -149), 0), 100000000, 0, -148), 0, (("ratio.mli", 59, 2664, 2664), ("ratio.mli", 59, 2664, 2698), 0), 0, Tag1 ("Ratio", 26)), 0); (("round_ratio", 473), ((Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -147), (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -146), 0), 100000000, 0, -145), 0, (("ratio.mli", 60, 2699, 2699), ("ratio.mli", 60, 2699, 2733), 0), 0, Tag1 ("Ratio", 27)), 0); (("ceiling_ratio", 474), ((Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -144), (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -143), 0), 100000000, 0, -142), 0, (("ratio.mli", 61, 2734, 2734), ("ratio.mli", 61, 2734, 2770), 0), 0, Tag1 ("Ratio", 28)), 0); (("eq_ratio", 475), ((Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -141), (Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -140), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -139), 0), 100000000, 0, -138), 0), 100000000, 0, -137), 0, (("ratio.mli", 62, 2771, 2771), ("ratio.mli", 62, 2771, 2808), 0), 0, Tag1 ("Ratio", 29)), 0); (("compare_ratio", 476), ((Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -136), (Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -135), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -134), 0), 100000000, 0, -133), 0), 100000000, 0, -132), 0, (("ratio.mli", 63, 2809, 2809), ("ratio.mli", 63, 2809, 2850), 0), 0, Tag1 ("Ratio", 30)), 0); (("lt_ratio", 477), ((Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -131), (Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -130), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -129), 0), 100000000, 0, -128), 0), 100000000, 0, -127), 0, (("ratio.mli", 64, 2851, 2851), ("ratio.mli", 64, 2851, 2888), 0), 0, Tag1 ("Ratio", 31)), 0); (("le_ratio", 478), ((Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -126), (Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -125), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -124), 0), 100000000, 0, -123), 0), 100000000, 0, -122), 0, (("ratio.mli", 65, 2889, 2889), ("ratio.mli", 65, 2889, 2926), 0), 0, Tag1 ("Ratio", 32)), 0); (("gt_ratio", 479), ((Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -121), (Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -120), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -119), 0), 100000000, 0, -118), 0), 100000000, 0, -117), 0, (("ratio.mli", 66, 2927, 2927), ("ratio.mli", 66, 2927, 2964), 0), 0, Tag1 ("Ratio", 33)), 0); (("ge_ratio", 480), ((Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -116), (Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -115), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -114), 0), 100000000, 0, -113), 0), 100000000, 0, -112), 0, (("ratio.mli", 67, 2965, 2965), ("ratio.mli", 67, 2965, 3002), 0), 0, Tag1 ("Ratio", 34)), 0); (("max_ratio", 481), ((Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -111), (Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -110), (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -109), 0), 100000000, 0, -108), 0), 100000000, 0, -107), 0, (("ratio.mli", 68, 3003, 3003), ("ratio.mli", 68, 3003, 3042), 0), 0, Tag1 ("Ratio", 35)), 0); (("min_ratio", 482), ((Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -106), (Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -105), (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -104), 0), 100000000, 0, -103), 0), 100000000, 0, -102), 0, (("ratio.mli", 69, 3043, 3043), ("ratio.mli", 69, 3043, 3082), 0), 0, Tag1 ("Ratio", 36)), 0); (("eq_big_int_ratio", 483), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -101), (Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -100), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -99), 0), 100000000, 0, -98), 0), 100000000, 0, -97), 0, (("ratio.mli", 70, 3083, 3083), ("ratio.mli", 70, 3083, 3130), 0), 0, Tag1 ("Ratio", 37)), 0); (("compare_big_int_ratio", 484), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -96), (Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -95), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -94), 0), 100000000, 0, -93), 0), 100000000, 0, -92), 0, (("ratio.mli", 71, 3131, 3131), ("ratio.mli", 71, 3131, 3182), 0), 0, Tag1 ("Ratio", 38)), 0); (("lt_big_int_ratio", 485), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -91), (Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -90), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -89), 0), 100000000, 0, -88), 0), 100000000, 0, -87), 0, (("ratio.mli", 72, 3183, 3183), ("ratio.mli", 72, 3183, 3230), 0), 0, Tag1 ("Ratio", 39)), 0); (("le_big_int_ratio", 486), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -86), (Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -85), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -84), 0), 100000000, 0, -83), 0), 100000000, 0, -82), 0, (("ratio.mli", 73, 3231, 3231), ("ratio.mli", 73, 3231, 3278), 0), 0, Tag1 ("Ratio", 40)), 0); (("gt_big_int_ratio", 487), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -81), (Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -80), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -79), 0), 100000000, 0, -78), 0), 100000000, 0, -77), 0, (("ratio.mli", 74, 3279, 3279), ("ratio.mli", 74, 3279, 3326), 0), 0, Tag1 ("Ratio", 41)), 0); (("ge_big_int_ratio", 488), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -76), (Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -75), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -74), 0), 100000000, 0, -73), 0), 100000000, 0, -72), 0, (("ratio.mli", 75, 3327, 3327), ("ratio.mli", 75, 3327, 3374), 0), 0, Tag1 ("Ratio", 42)), 0); (("int_of_ratio", 489), ((Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -71), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -70), 0), 100000000, 0, -69), 0, (("ratio.mli", 76, 3375, 3375), ("ratio.mli", 76, 3375, 3406), 0), 0, Tag1 ("Ratio", 43)), 0); (("ratio_of_int", 490), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -68), (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -67), 0), 100000000, 0, -66), 0, (("ratio.mli", 77, 3407, 3407), ("ratio.mli", 77, 3407, 3438), 0), 0, Tag1 ("Ratio", 44)), 0); (("ratio_of_nat", 491), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Nat")), "nat"), 0, (0)), 100000000, 0, -65), (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -64), 0), 100000000, 0, -63), 0, (("ratio.mli", 78, 3439, 3439), ("ratio.mli", 78, 3439, 3470), 0), 0, Tag1 ("Ratio", 45)), 0); (("nat_of_ratio", 492), ((Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -62), (Tag3 (Tag1 ((Tag2 ("Nat")), "nat"), 0, (0)), 100000000, 0, -61), 0), 100000000, 0, -60), 0, (("ratio.mli", 79, 3471, 3471), ("ratio.mli", 79, 3471, 3502), 0), 0, Tag1 ("Ratio", 46)), 0); (("ratio_of_big_int", 493), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -59), (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -58), 0), 100000000, 0, -57), 0, (("ratio.mli", 80, 3503, 3503), ("ratio.mli", 80, 3503, 3542), 0), 0, Tag1 ("Ratio", 47)), 0); (("big_int_of_ratio", 494), ((Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -56), (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -55), 0), 100000000, 0, -54), 0, (("ratio.mli", 81, 3543, 3543), ("ratio.mli", 81, 3543, 3582), 0), 0, Tag1 ("Ratio", 48)), 0); (("div_int_ratio", 495), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -53), (Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -52), (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -51), 0), 100000000, 0, -50), 0), 100000000, 0, -49), 0, (("ratio.mli", 82, 3583, 3583), ("ratio.mli", 82, 3583, 3624), 0), 0, Tag1 ("Ratio", 49)), 0); (("div_ratio_int", 496), ((Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -48), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -47), (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -46), 0), 100000000, 0, -45), 0), 100000000, 0, -44), 0, (("ratio.mli", 83, 3625, 3625), ("ratio.mli", 83, 3625, 3666), 0), 0, Tag1 ("Ratio", 50)), 0); (("div_big_int_ratio", 497), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -43), (Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -42), (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -41), 0), 100000000, 0, -40), 0), 100000000, 0, -39), 0, (("ratio.mli", 84, 3667, 3667), ("ratio.mli", 84, 3667, 3716), 0), 0, Tag1 ("Ratio", 51)), 0); (("div_ratio_big_int", 498), ((Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -38), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -37), (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -36), 0), 100000000, 0, -35), 0), 100000000, 0, -34), 0, (("ratio.mli", 85, 3717, 3717), ("ratio.mli", 85, 3717, 3766), 0), 0, Tag1 ("Ratio", 52)), 0); (("approx_ratio_fix", 499), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -33), (Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -32), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -31), 0), 100000000, 0, -30), 0), 100000000, 0, -29), 0, (("ratio.mli", 86, 3767, 3767), ("ratio.mli", 86, 3767, 3812), 0), 0, Tag1 ("Ratio", 53)), 0); (("approx_ratio_exp", 500), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -28), (Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -27), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -26), 0), 100000000, 0, -25), 0), 100000000, 0, -24), 0, (("ratio.mli", 87, 3813, 3813), ("ratio.mli", 87, 3813, 3858), 0), 0, Tag1 ("Ratio", 54)), 0); (("float_of_rational_string", 501), ((Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -23), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0, (("ratio.mli", 88, 3859, 3859), ("ratio.mli", 88, 3859, 3905), 0), 0, Tag1 ("Ratio", 55)), 0); (("string_of_ratio", 502), ((Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -20), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -19), 0), 100000000, 0, -18), 0, (("ratio.mli", 89, 3906, 3906), ("ratio.mli", 89, 3906, 3943), 0), 0, Tag1 ("Ratio", 56)), 0); (("ratio_of_string", 503), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -17), (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -16), 0), 100000000, 0, -15), 0, (("ratio.mli", 90, 3944, 3944), ("ratio.mli", 90, 3944, 3981), 0), 0, Tag1 ("Ratio", 57)), 0); (("float_of_ratio", 504), ((Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -14), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -13), 0), 100000000, 0, -12), 0, (("ratio.mli", 91, 3982, 3982), ("ratio.mli", 91, 3982, 4017), 0), 0, Tag1 ("Ratio", 58)), 0); (("power_ratio_positive_int", 505), ((Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -11), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -10), (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0), 100000000, 0, -7), 0, (("ratio.mli", 92, 4018, 4018), ("ratio.mli", 92, 4018, 4070), 0), 0, Tag1 ("Ratio", 59)), 0); (("power_ratio_positive_big_int", 506), ((Tag1 (0, (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -6), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Big_int")), "big_int"), 0, (0)), 100000000, 0, -5), (Tag3 ((("ratio", 446)), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("ratio.mli", 93, 4071, 4071), ("ratio.mli", 93, 4071, 4131), 0), 0, Tag1 ("Ratio", 60)), 0)], "Ratio", [("Ratio", ("\133\177\241\180\127#AW\127v\180\025\250\143\018W")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Nat", ("\158\218\202\184\174E)\133)>\025\209\140\204/Z")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Big_int", ("t\020\020^p\161P\198\185\167\t\215\248\017\232\207"))], [(0)])
val power_ratio_positive_big_int : ratio -> Big_int.big_int -> ratio

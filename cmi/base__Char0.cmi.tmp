val failwithf : ('a, unit, string, unit -> 'b) format4 -> 'a
val escaped : char -> string
val lowercase : char -> char
val to_int : char -> int
val unsafe_of_int : int -> char
val uppercase : char -> char
val int_is_ok : int -> bool
val min_value : char
val max_value : char
val of_int : int -> char option
val of_int_exn : int -> char("DEBUG:rule", [(("failwithf", 1224), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format4"), [((0), 100000000, 0, -35); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -37); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -38); (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -41), ((0), 100000000, 0, -40), 0), 100000000, 0, -39)], (0)), 100000000, 0, -36), ((0), 100000000, 0, -35), 0), 100000000, 0, -34), 0, (("src/char0.ml", 11, 630, 634), ("src/char0.ml", 11, 630, 643), 0), 0, Tag1 ("Base__Char0", 0)), 0); (("escaped", 1225), ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -33), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -32), 0), 100000000, 0, -31), 0, (("src/char0.ml", 12, 663, 667), ("src/char0.ml", 12, 663, 674), 0), 0, Tag1 ("Base__Char0", 1)), 0); (("lowercase", 1226), ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -30), (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -29), 0), 100000000, 0, -28), 0, (("src/char0.ml", 13, 697, 701), ("src/char0.ml", 13, 697, 710), 0), 0, Tag1 ("Base__Char0", 2)), 0); (("to_int", 1227), ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -27), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -26), 0), 100000000, 0, -25), 0, (("src/char0.ml", 14, 741, 745), ("src/char0.ml", 14, 741, 751), 0), 0, Tag1 ("Base__Char0", 3)), 0); (("unsafe_of_int", 1228), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -24), (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -23), 0), 100000000, 0, -22), 0, (("src/char0.ml", 15, 771, 775), ("src/char0.ml", 15, 771, 788), 0), 0, Tag1 ("Base__Char0", 4)), 0); (("uppercase", 1229), ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -21), (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -20), 0), 100000000, 0, -19), 0, (("src/char0.ml", 16, 814, 818), ("src/char0.ml", 16, 814, 827), 0), 0, Tag1 ("Base__Char0", 5)), 0); (("int_is_ok", 1230), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -18), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("src/char0.ml", 21, 1098, 1102), ("src/char0.ml", 21, 1098, 1111), 0), 0, Tag1 ("Base__Char0", 6)), 0); (("min_value", 1231), ((Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -15), 0, (("src/char0.ml", 22, 1135, 1139), ("src/char0.ml", 22, 1135, 1148), 0), 0, Tag1 ("Base__Char0", 8)), 0); (("max_value", 1232), ((Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -14), 0, (("src/char0.ml", 23, 1167, 1171), ("src/char0.ml", 23, 1167, 1180), 0), 0, Tag1 ("Base__Char0", 9)), 0); (("of_int", 1233), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -13), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -12)], (0)), 100000000, 0, -11), 0), 100000000, 0, -10), 0, (("src/char0.ml", 24, 1201, 1205), ("src/char0.ml", 24, 1201, 1211), 0), 0, Tag1 ("Base__Char0", 10)), 0); (("of_int_exn", 1234), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -9), (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -8), 0), 100000000, 0, -7), 0, (("src/char0.ml", 26, 1270, 1274), ("src/char0.ml", 26, 1270, 1284), 0), 0, Tag1 ("Base__Char0", 12)), 0); (("equal", 1235), ((Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -6), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -5), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/char0.ml", 32, 1402, 1406), ("src/char0.ml", 32, 1402, 1411), 0), 0, Tag1 ("Base__Char0", 14)), 0)], "Base__Char0", [("Base__Char0", ("w\027\180\175\145\144B\018\216\249\221\175\239-\224y")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__StdLabels", (".\193\n\229\139\017\212C-ZA\\kz-\128")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__MoreLabels", ("\248\232\248\254`<\230\241\161U\193U\1466J\238")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Char", ("\1794\1468\190\138\150g\231\240\140d\191.\212e")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shadow_stdlib", ("\219zi\164\203\158e)\232\221\196\168\138x\142\018")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Base__Printf", ("\000\196c,\214\127\226\174\220\190\253z!\242\028\250")); ("Base__Poly0", ("\230;\143\234\255.H\132KOe7\155\\\023f")); ("Base__Import0", ("\156\129U\197Y[\\\153\017Ho\203\173\204\220\020")); ("Base__Bool0", ("\177f\254p\023\143&\239\020\136\206\242~\018F\251")); ("Base__", ("p\252\007\139\128\163W\025+\0225\001\246|P\158"))], [(0)])

val equal : char -> char -> bool

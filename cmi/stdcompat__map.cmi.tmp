module type OrderedType = sig type t val compare : t -> t -> int end
module type S =
  sig
    type key
    type +!'a t
    val empty : 'a t
    val is_empty : 'a t -> bool
    val mem : key -> 'a t -> bool
    val add : key -> 'a -> 'a t -> 'a t
    val update : key -> ('a option -> 'a option) -> 'a t -> 'a t
    val singleton : key -> 'a -> 'a t
    val remove : key -> 'a t -> 'a t
    val merge :
      (key -> 'a option -> 'b option -> 'c option) -> 'a t -> 'b t -> 'c t
    val union : (key -> 'a -> 'a -> 'a option) -> 'a t -> 'a t -> 'a t
    val compare : ('a -> 'a -> int) -> 'a t -> 'a t -> int
    val equal : ('a -> 'a -> bool) -> 'a t -> 'a t -> bool
    val iter : (key -> 'a -> unit) -> 'a t -> unit
    val fold : (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b
    val for_all : (key -> 'a -> bool) -> 'a t -> bool
    val exists : (key -> 'a -> bool) -> 'a t -> bool
    val filter : (key -> 'a -> bool) -> 'a t -> 'a t
    val filter_map : (key -> 'a -> 'b option) -> 'a t -> 'b t
    val partition : (key -> 'a -> bool) -> 'a t -> 'a t * 'a t
    val cardinal : 'a t -> int
    val bindings : 'a t -> (key * 'a) list
    val min_binding : 'a t -> key * 'a
    val min_binding_opt : 'a t -> (key * 'a) option
    val max_binding : 'a t -> key * 'a
    val max_binding_opt : 'a t -> (key * 'a) option
    val choose : 'a t -> key * 'a
    val choose_opt : 'a t -> (key * 'a) option
    val split : key -> 'a t -> 'a t * 'a option * 'a t
    val find : key -> 'a t -> 'a
    val find_opt : key -> 'a t -> 'a option
    val find_first : (key -> bool) -> 'a t -> key * 'a
    val find_first_opt : (key -> bool) -> 'a t -> (key * 'a) option
    val find_last : (key -> bool) -> 'a t -> key * 'a
    val find_last_opt : (key -> bool) -> 'a t -> (key * 'a) option
    val map : ('a -> 'b) -> 'a t -> 'b t
    val mapi : (key -> 'a -> 'b) -> 'a t -> 'b t
    val to_seq : 'a t -> (key * 'a) Seq.t
    val to_rev_seq : 'a t -> (key * 'a) Seq.t
    val to_seq_from : key -> 'a t -> (key * 'a) Seq.t
    val add_seq : (key * 'a) Seq.t -> 'a t -> 'a t
    val of_seq : (key * 'a) Seq.t -> 'a t
  end("DEBUG:rule", [Tag4 (("OrderedType", 530), ((Tag1 ([Tag1 (("t", 533), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("stdcompat__map_s.mli", 2, 20, 50), ("stdcompat__map_s.mli", 2, 20, 56), 0), 0, 0, 0, Tag1 ("Stdcompat__map_s", 0)), 1, 0); (("compare", 534), ((Tag1 (0, (Tag3 ((("t", 533)), 0, (0)), 100000000, 0, -6), (Tag1 (0, (Tag3 ((("t", 533)), 0, (0)), 100000000, 0, -5), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("stdcompat__map_s.mli", 2, 20, 57), ("stdcompat__map_s.mli", 2, 20, 84), 0), 0, Tag1 ("Stdcompat__map_s", 1)), 0)])), 0, (("stdcompat__map_s.mli", 2, 20, 20), ("stdcompat__map_s.mli", 2, 20, 88), 0), Tag1 ("Stdcompat__map_s", 2)), 0); Tag4 (("S", 531), ((Tag1 ([Tag1 (("key", 535), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("stdcompat__map_s.mli", 7, 143, 147), ("stdcompat__map_s.mli", 7, 143, 155), 0), 0, 0, 0, Tag1 ("Stdcompat__map_s", 3)), 1, 0); Tag1 (("t", 536), ([((("a")), 100000000, 0, -313)], 1, 0, 1, 0, [9], [2], 0, 0, (("stdcompat__map_s.mli", 9, 157, 157), ("stdcompat__map_s.mli", 9, 157, 168), 0), 0, 0, 0, Tag1 ("Stdcompat__map_s", 4)), 1, 0); (("empty", 537), ((Tag3 ((("t", 536)), [((("a")), 100000000, 0, -312)], (0)), 100000000, 0, -311), 0, (("stdcompat__map_s.mli", 14, 185, 188), ("stdcompat__map_s.mli", 14, 185, 204), 0), 0, Tag1 ("Stdcompat__map_s", 5)), 0); (("is_empty", 538), ((Tag1 (0, (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -310)], (0)), 100000000, 0, -309), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -308), 0), 100000000, 0, -307), 0, (("stdcompat__map_s.mli", 14, 185, 205), ("stdcompat__map_s.mli", 14, 185, 232), 0), 0, Tag1 ("Stdcompat__map_s", 6)), 0); (("mem", 539), ((Tag1 (0, (Tag3 ((("key", 535)), 0, (0)), 100000000, 0, -306), (Tag1 (0, (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -305)], (0)), 100000000, 0, -304), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -303), 0), 100000000, 0, -302), 0), 100000000, 0, -301), 0, (("stdcompat__map_s.mli", 15, 233, 233), ("stdcompat__map_s.mli", 15, 233, 262), 0), 0, Tag1 ("Stdcompat__map_s", 7)), 0); (("add", 540), ((Tag1 (0, (Tag3 ((("key", 535)), 0, (0)), 100000000, 0, -300), (Tag1 (0, ((("a")), 100000000, 0, -298), (Tag1 (0, (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -298)], (0)), 100000000, 0, -299), (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -298)], (0)), 100000000, 0, -297), 0), 100000000, 0, -296), 0), 100000000, 0, -295), 0), 100000000, 0, -294), 0, (("stdcompat__map_s.mli", 15, 233, 263), ("stdcompat__map_s.mli", 15, 233, 298), 0), 0, Tag1 ("Stdcompat__map_s", 8)), 0); (("update", 541), ((Tag1 (0, (Tag3 ((("key", 535)), 0, (0)), 100000000, 0, -293), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -288)], (0)), 100000000, 0, -292), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -288)], (0)), 100000000, 0, -291), 0), 100000000, 0, -290), (Tag1 (0, (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -288)], (0)), 100000000, 0, -289), (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -288)], (0)), 100000000, 0, -287), 0), 100000000, 0, -286), 0), 100000000, 0, -285), 0), 100000000, 0, -284), 0, (("stdcompat__map_s.mli", 16, 299, 299), ("stdcompat__map_s.mli", 16, 299, 359), 0), 0, Tag1 ("Stdcompat__map_s", 9)), 0); (("singleton", 542), ((Tag1 (0, (Tag3 ((("key", 535)), 0, (0)), 100000000, 0, -283), (Tag1 (0, ((("a")), 100000000, 0, -282), (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -282)], (0)), 100000000, 0, -281), 0), 100000000, 0, -280), 0), 100000000, 0, -279), 0, (("stdcompat__map_s.mli", 17, 360, 360), ("stdcompat__map_s.mli", 17, 360, 393), 0), 0, Tag1 ("Stdcompat__map_s", 10)), 0); (("remove", 543), ((Tag1 (0, (Tag3 ((("key", 535)), 0, (0)), 100000000, 0, -278), (Tag1 (0, (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -276)], (0)), 100000000, 0, -277), (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -276)], (0)), 100000000, 0, -275), 0), 100000000, 0, -274), 0), 100000000, 0, -273), 0, (("stdcompat__map_s.mli", 17, 360, 394), ("stdcompat__map_s.mli", 17, 360, 426), 0), 0, Tag1 ("Stdcompat__map_s", 11)), 0); (("merge", 544), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 535)), 0, (0)), 100000000, 0, -272), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -265)], (0)), 100000000, 0, -271), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -263)], (0)), 100000000, 0, -270), (Tag3 ((Tag3 ("option", 10)), [((("c")), 100000000, 0, -261)], (0)), 100000000, 0, -269), 0), 100000000, 0, -268), 0), 100000000, 0, -267), 0), 100000000, 0, -266), (Tag1 (0, (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -265)], (0)), 100000000, 0, -264), (Tag1 (0, (Tag3 ((("t", 536)), [((("b")), 100000000, 0, -263)], (0)), 100000000, 0, -262), (Tag3 ((("t", 536)), [((("c")), 100000000, 0, -261)], (0)), 100000000, 0, -260), 0), 100000000, 0, -259), 0), 100000000, 0, -258), 0), 100000000, 0, -257), 0, (("stdcompat__map_s.mli", 18, 427, 427), ("stdcompat__map_s.mli", 19, 439, 509), 0), 0, Tag1 ("Stdcompat__map_s", 12)), 0); (("union", 545), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 535)), 0, (0)), 100000000, 0, -256), (Tag1 (0, ((("a")), 100000000, 0, -249), (Tag1 (0, ((("a")), 100000000, 0, -249), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -249)], (0)), 100000000, 0, -255), 0), 100000000, 0, -254), 0), 100000000, 0, -253), 0), 100000000, 0, -252), (Tag1 (0, (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -249)], (0)), 100000000, 0, -251), (Tag1 (0, (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -249)], (0)), 100000000, 0, -250), (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -249)], (0)), 100000000, 0, -248), 0), 100000000, 0, -247), 0), 100000000, 0, -246), 0), 100000000, 0, -245), 0, (("stdcompat__map_s.mli", 20, 510, 510), ("stdcompat__map_s.mli", 20, 510, 576), 0), 0, Tag1 ("Stdcompat__map_s", 13)), 0); (("compare", 546), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -240), (Tag1 (0, ((("a")), 100000000, 0, -240), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -244), 0), 100000000, 0, -243), 0), 100000000, 0, -242), (Tag1 (0, (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -240)], (0)), 100000000, 0, -241), (Tag1 (0, (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -240)], (0)), 100000000, 0, -239), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -238), 0), 100000000, 0, -237), 0), 100000000, 0, -236), 0), 100000000, 0, -235), 0, (("stdcompat__map_s.mli", 21, 577, 577), ("stdcompat__map_s.mli", 21, 577, 631), 0), 0, Tag1 ("Stdcompat__map_s", 14)), 0); (("equal", 547), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -230), (Tag1 (0, ((("a")), 100000000, 0, -230), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -234), 0), 100000000, 0, -233), 0), 100000000, 0, -232), (Tag1 (0, (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -230)], (0)), 100000000, 0, -231), (Tag1 (0, (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -230)], (0)), 100000000, 0, -229), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -228), 0), 100000000, 0, -227), 0), 100000000, 0, -226), 0), 100000000, 0, -225), 0, (("stdcompat__map_s.mli", 22, 632, 632), ("stdcompat__map_s.mli", 22, 632, 686), 0), 0, Tag1 ("Stdcompat__map_s", 15)), 0); (("iter", 548), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 535)), 0, (0)), 100000000, 0, -224), (Tag1 (0, ((("a")), 100000000, 0, -220), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -223), 0), 100000000, 0, -222), 0), 100000000, 0, -221), (Tag1 (0, (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -220)], (0)), 100000000, 0, -219), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -218), 0), 100000000, 0, -217), 0), 100000000, 0, -216), 0, (("stdcompat__map_s.mli", 23, 687, 687), ("stdcompat__map_s.mli", 23, 687, 733), 0), 0, Tag1 ("Stdcompat__map_s", 16)), 0); (("fold", 549), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 535)), 0, (0)), 100000000, 0, -215), (Tag1 (0, ((("a")), 100000000, 0, -211), (Tag1 (0, ((("b")), 100000000, 0, -209), ((("b")), 100000000, 0, -209), 0), 100000000, 0, -214), 0), 100000000, 0, -213), 0), 100000000, 0, -212), (Tag1 (0, (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -211)], (0)), 100000000, 0, -210), (Tag1 (0, ((("b")), 100000000, 0, -209), ((("b")), 100000000, 0, -209), 0), 100000000, 0, -208), 0), 100000000, 0, -207), 0), 100000000, 0, -206), 0, (("stdcompat__map_s.mli", 24, 734, 734), ("stdcompat__map_s.mli", 24, 734, 788), 0), 0, Tag1 ("Stdcompat__map_s", 17)), 0); (("for_all", 550), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 535)), 0, (0)), 100000000, 0, -205), (Tag1 (0, ((("a")), 100000000, 0, -201), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -204), 0), 100000000, 0, -203), 0), 100000000, 0, -202), (Tag1 (0, (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -201)], (0)), 100000000, 0, -200), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -199), 0), 100000000, 0, -198), 0), 100000000, 0, -197), 0, (("stdcompat__map_s.mli", 25, 789, 789), ("stdcompat__map_s.mli", 25, 789, 838), 0), 0, Tag1 ("Stdcompat__map_s", 18)), 0); (("exists", 551), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 535)), 0, (0)), 100000000, 0, -196), (Tag1 (0, ((("a")), 100000000, 0, -192), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -195), 0), 100000000, 0, -194), 0), 100000000, 0, -193), (Tag1 (0, (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -192)], (0)), 100000000, 0, -191), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -190), 0), 100000000, 0, -189), 0), 100000000, 0, -188), 0, (("stdcompat__map_s.mli", 26, 839, 839), ("stdcompat__map_s.mli", 26, 839, 887), 0), 0, Tag1 ("Stdcompat__map_s", 19)), 0); (("filter", 552), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 535)), 0, (0)), 100000000, 0, -187), (Tag1 (0, ((("a")), 100000000, 0, -182), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -186), 0), 100000000, 0, -185), 0), 100000000, 0, -184), (Tag1 (0, (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -182)], (0)), 100000000, 0, -183), (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -182)], (0)), 100000000, 0, -181), 0), 100000000, 0, -180), 0), 100000000, 0, -179), 0, (("stdcompat__map_s.mli", 27, 888, 888), ("stdcompat__map_s.mli", 27, 888, 936), 0), 0, Tag1 ("Stdcompat__map_s", 20)), 0); (("filter_map", 553), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 535)), 0, (0)), 100000000, 0, -178), (Tag1 (0, ((("a")), 100000000, 0, -174), (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -172)], (0)), 100000000, 0, -177), 0), 100000000, 0, -176), 0), 100000000, 0, -175), (Tag1 (0, (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -174)], (0)), 100000000, 0, -173), (Tag3 ((("t", 536)), [((("b")), 100000000, 0, -172)], (0)), 100000000, 0, -171), 0), 100000000, 0, -170), 0), 100000000, 0, -169), 0, (("stdcompat__map_s.mli", 28, 937, 937), ("stdcompat__map_s.mli", 28, 937, 994), 0), 0, Tag1 ("Stdcompat__map_s", 21)), 0); (("partition", 554), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 535)), 0, (0)), 100000000, 0, -168), (Tag1 (0, ((("a")), 100000000, 0, -162), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -167), 0), 100000000, 0, -166), 0), 100000000, 0, -165), (Tag1 (0, (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -162)], (0)), 100000000, 0, -164), (Tag2 ([(Tag3 ((("t", 536)), [((("a")), 100000000, 0, -162)], (0)), 100000000, 0, -161); (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -162)], (0)), 100000000, 0, -163)]), 100000000, 0, -160), 0), 100000000, 0, -159), 0), 100000000, 0, -158), 0, (("stdcompat__map_s.mli", 29, 995, 995), ("stdcompat__map_s.mli", 29, 995, 1055), 0), 0, Tag1 ("Stdcompat__map_s", 22)), 0); (("cardinal", 555), ((Tag1 (0, (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -157)], (0)), 100000000, 0, -156), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -155), 0), 100000000, 0, -154), 0, (("stdcompat__map_s.mli", 30, 1056, 1056), ("stdcompat__map_s.mli", 30, 1056, 1082), 0), 0, Tag1 ("Stdcompat__map_s", 23)), 0); (("bindings", 556), ((Tag1 (0, (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -152)], (0)), 100000000, 0, -153), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("key", 535)), 0, (0)), 100000000, 0, -151); ((("a")), 100000000, 0, -152)]), 100000000, 0, -150)], (0)), 100000000, 0, -149), 0), 100000000, 0, -148), 0, (("stdcompat__map_s.mli", 30, 1056, 1083), ("stdcompat__map_s.mli", 30, 1056, 1121), 0), 0, Tag1 ("Stdcompat__map_s", 24)), 0); (("min_binding", 557), ((Tag1 (0, (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -146)], (0)), 100000000, 0, -147), (Tag2 ([(Tag3 ((("key", 535)), 0, (0)), 100000000, 0, -145); ((("a")), 100000000, 0, -146)]), 100000000, 0, -144), 0), 100000000, 0, -143), 0, (("stdcompat__map_s.mli", 31, 1122, 1122), ("stdcompat__map_s.mli", 31, 1122, 1158), 0), 0, Tag1 ("Stdcompat__map_s", 25)), 0); (("min_binding_opt", 558), ((Tag1 (0, (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -141)], (0)), 100000000, 0, -142), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("key", 535)), 0, (0)), 100000000, 0, -140); ((("a")), 100000000, 0, -141)]), 100000000, 0, -139)], (0)), 100000000, 0, -138), 0), 100000000, 0, -137), 0, (("stdcompat__map_s.mli", 32, 1159, 1159), ("stdcompat__map_s.mli", 32, 1159, 1206), 0), 0, Tag1 ("Stdcompat__map_s", 26)), 0); (("max_binding", 559), ((Tag1 (0, (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -135)], (0)), 100000000, 0, -136), (Tag2 ([(Tag3 ((("key", 535)), 0, (0)), 100000000, 0, -134); ((("a")), 100000000, 0, -135)]), 100000000, 0, -133), 0), 100000000, 0, -132), 0, (("stdcompat__map_s.mli", 33, 1207, 1207), ("stdcompat__map_s.mli", 33, 1207, 1243), 0), 0, Tag1 ("Stdcompat__map_s", 27)), 0); (("max_binding_opt", 560), ((Tag1 (0, (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -130)], (0)), 100000000, 0, -131), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("key", 535)), 0, (0)), 100000000, 0, -129); ((("a")), 100000000, 0, -130)]), 100000000, 0, -128)], (0)), 100000000, 0, -127), 0), 100000000, 0, -126), 0, (("stdcompat__map_s.mli", 34, 1244, 1244), ("stdcompat__map_s.mli", 34, 1244, 1291), 0), 0, Tag1 ("Stdcompat__map_s", 28)), 0); (("choose", 561), ((Tag1 (0, (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -124)], (0)), 100000000, 0, -125), (Tag2 ([(Tag3 ((("key", 535)), 0, (0)), 100000000, 0, -123); ((("a")), 100000000, 0, -124)]), 100000000, 0, -122), 0), 100000000, 0, -121), 0, (("stdcompat__map_s.mli", 35, 1292, 1292), ("stdcompat__map_s.mli", 35, 1292, 1323), 0), 0, Tag1 ("Stdcompat__map_s", 29)), 0); (("choose_opt", 562), ((Tag1 (0, (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -119)], (0)), 100000000, 0, -120), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("key", 535)), 0, (0)), 100000000, 0, -118); ((("a")), 100000000, 0, -119)]), 100000000, 0, -117)], (0)), 100000000, 0, -116), 0), 100000000, 0, -115), 0, (("stdcompat__map_s.mli", 35, 1292, 1324), ("stdcompat__map_s.mli", 35, 1292, 1366), 0), 0, Tag1 ("Stdcompat__map_s", 30)), 0); (("split", 563), ((Tag1 (0, (Tag3 ((("key", 535)), 0, (0)), 100000000, 0, -114), (Tag1 (0, (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -110)], (0)), 100000000, 0, -113), (Tag2 ([(Tag3 ((("t", 536)), [((("a")), 100000000, 0, -110)], (0)), 100000000, 0, -109); (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -110)], (0)), 100000000, 0, -111); (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -110)], (0)), 100000000, 0, -112)]), 100000000, 0, -108), 0), 100000000, 0, -107), 0), 100000000, 0, -106), 0, (("stdcompat__map_s.mli", 36, 1367, 1367), ("stdcompat__map_s.mli", 36, 1367, 1419), 0), 0, Tag1 ("Stdcompat__map_s", 31)), 0); (("find", 564), ((Tag1 (0, (Tag3 ((("key", 535)), 0, (0)), 100000000, 0, -105), (Tag1 (0, (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -103)], (0)), 100000000, 0, -104), ((("a")), 100000000, 0, -103), 0), 100000000, 0, -102), 0), 100000000, 0, -101), 0, (("stdcompat__map_s.mli", 37, 1420, 1420), ("stdcompat__map_s.mli", 37, 1420, 1448), 0), 0, Tag1 ("Stdcompat__map_s", 32)), 0); (("find_opt", 565), ((Tag1 (0, (Tag3 ((("key", 535)), 0, (0)), 100000000, 0, -100), (Tag1 (0, (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -98)], (0)), 100000000, 0, -99), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -98)], (0)), 100000000, 0, -97), 0), 100000000, 0, -96), 0), 100000000, 0, -95), 0, (("stdcompat__map_s.mli", 37, 1420, 1449), ("stdcompat__map_s.mli", 37, 1420, 1488), 0), 0, Tag1 ("Stdcompat__map_s", 33)), 0); (("find_first", 566), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 535)), 0, (0)), 100000000, 0, -94), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -93), 0), 100000000, 0, -92), (Tag1 (0, (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -90)], (0)), 100000000, 0, -91), (Tag2 ([(Tag3 ((("key", 535)), 0, (0)), 100000000, 0, -89); ((("a")), 100000000, 0, -90)]), 100000000, 0, -88), 0), 100000000, 0, -87), 0), 100000000, 0, -86), 0, (("stdcompat__map_s.mli", 38, 1489, 1489), ("stdcompat__map_s.mli", 38, 1489, 1541), 0), 0, Tag1 ("Stdcompat__map_s", 34)), 0); (("find_first_opt", 567), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 535)), 0, (0)), 100000000, 0, -85), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -84), 0), 100000000, 0, -83), (Tag1 (0, (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -81)], (0)), 100000000, 0, -82), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("key", 535)), 0, (0)), 100000000, 0, -80); ((("a")), 100000000, 0, -81)]), 100000000, 0, -79)], (0)), 100000000, 0, -78), 0), 100000000, 0, -77), 0), 100000000, 0, -76), 0, (("stdcompat__map_s.mli", 39, 1542, 1542), ("stdcompat__map_s.mli", 39, 1542, 1605), 0), 0, Tag1 ("Stdcompat__map_s", 35)), 0); (("find_last", 568), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 535)), 0, (0)), 100000000, 0, -75), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -74), 0), 100000000, 0, -73), (Tag1 (0, (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -71)], (0)), 100000000, 0, -72), (Tag2 ([(Tag3 ((("key", 535)), 0, (0)), 100000000, 0, -70); ((("a")), 100000000, 0, -71)]), 100000000, 0, -69), 0), 100000000, 0, -68), 0), 100000000, 0, -67), 0, (("stdcompat__map_s.mli", 40, 1606, 1606), ("stdcompat__map_s.mli", 40, 1606, 1657), 0), 0, Tag1 ("Stdcompat__map_s", 36)), 0); (("find_last_opt", 569), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 535)), 0, (0)), 100000000, 0, -66), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -65), 0), 100000000, 0, -64), (Tag1 (0, (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -62)], (0)), 100000000, 0, -63), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("key", 535)), 0, (0)), 100000000, 0, -61); ((("a")), 100000000, 0, -62)]), 100000000, 0, -60)], (0)), 100000000, 0, -59), 0), 100000000, 0, -58), 0), 100000000, 0, -57), 0, (("stdcompat__map_s.mli", 41, 1658, 1658), ("stdcompat__map_s.mli", 41, 1658, 1720), 0), 0, Tag1 ("Stdcompat__map_s", 37)), 0); (("map", 570), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -55), ((("b")), 100000000, 0, -53), 0), 100000000, 0, -56), (Tag1 (0, (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -55)], (0)), 100000000, 0, -54), (Tag3 ((("t", 536)), [((("b")), 100000000, 0, -53)], (0)), 100000000, 0, -52), 0), 100000000, 0, -51), 0), 100000000, 0, -50), 0, (("stdcompat__map_s.mli", 42, 1721, 1721), ("stdcompat__map_s.mli", 42, 1721, 1757), 0), 0, Tag1 ("Stdcompat__map_s", 38)), 0); (("mapi", 571), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 535)), 0, (0)), 100000000, 0, -49), (Tag1 (0, ((("a")), 100000000, 0, -46), ((("b")), 100000000, 0, -44), 0), 100000000, 0, -48), 0), 100000000, 0, -47), (Tag1 (0, (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -46)], (0)), 100000000, 0, -45), (Tag3 ((("t", 536)), [((("b")), 100000000, 0, -44)], (0)), 100000000, 0, -43), 0), 100000000, 0, -42), 0), 100000000, 0, -41), 0, (("stdcompat__map_s.mli", 43, 1758, 1758), ("stdcompat__map_s.mli", 43, 1758, 1802), 0), 0, Tag1 ("Stdcompat__map_s", 39)), 0); (("to_seq", 572), ((Tag1 (0, (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -39)], (0)), 100000000, 0, -40), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 535)), 0, (0)), 100000000, 0, -38); ((("a")), 100000000, 0, -39)]), 100000000, 0, -37)], (0)), 100000000, 0, -36), 0), 100000000, 0, -35), 0, (("stdcompat__map_s.mli", 44, 1803, 1803), ("stdcompat__map_s.mli", 44, 1803, 1840), 0), 0, Tag1 ("Stdcompat__map_s", 40)), 0); (("to_rev_seq", 573), ((Tag1 (0, (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -33)], (0)), 100000000, 0, -34), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 535)), 0, (0)), 100000000, 0, -32); ((("a")), 100000000, 0, -33)]), 100000000, 0, -31)], (0)), 100000000, 0, -30), 0), 100000000, 0, -29), 0, (("stdcompat__map_s.mli", 45, 1841, 1841), ("stdcompat__map_s.mli", 45, 1841, 1882), 0), 0, Tag1 ("Stdcompat__map_s", 41)), 0); (("to_seq_from", 574), ((Tag1 (0, (Tag3 ((("key", 535)), 0, (0)), 100000000, 0, -28), (Tag1 (0, (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -26)], (0)), 100000000, 0, -27), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 535)), 0, (0)), 100000000, 0, -25); ((("a")), 100000000, 0, -26)]), 100000000, 0, -24)], (0)), 100000000, 0, -23), 0), 100000000, 0, -22), 0), 100000000, 0, -21), 0, (("stdcompat__map_s.mli", 46, 1883, 1883), ("stdcompat__map_s.mli", 46, 1883, 1932), 0), 0, Tag1 ("Stdcompat__map_s", 42)), 0); (("add_seq", 575), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 535)), 0, (0)), 100000000, 0, -20); ((("a")), 100000000, 0, -16)]), 100000000, 0, -19)], (0)), 100000000, 0, -18), (Tag1 (0, (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -16)], (0)), 100000000, 0, -17), (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -16)], (0)), 100000000, 0, -15), 0), 100000000, 0, -14), 0), 100000000, 0, -13), 0, (("stdcompat__map_s.mli", 47, 1933, 1933), ("stdcompat__map_s.mli", 47, 1933, 1979), 0), 0, Tag1 ("Stdcompat__map_s", 43)), 0); (("of_seq", 576), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag2 ([(Tag3 ((("key", 535)), 0, (0)), 100000000, 0, -12); ((("a")), 100000000, 0, -9)]), 100000000, 0, -11)], (0)), 100000000, 0, -10), (Tag3 ((("t", 536)), [((("a")), 100000000, 0, -9)], (0)), 100000000, 0, -8), 0), 100000000, 0, -7), 0, (("stdcompat__map_s.mli", 48, 1980, 1980), ("stdcompat__map_s.mli", 48, 1980, 2017), 0), 0, Tag1 ("Stdcompat__map_s", 44)), 0)])), 0, (("stdcompat__map_s.mli", 6, 127, 127), ("stdcompat__map_s.mli", 48, 1980, 2021), 0), Tag1 ("Stdcompat__map_s", 45)), 0); Tag3 (("Make", 532), 1, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Map"), "Make")), 0, (("stdcompat__map_s.mli", 139, 6231, 6231), ("stdcompat__map_s.mli", 139, 6231, 6253), 0), Tag1 ("Stdcompat__map_s", 46)), 0, 0)], "Stdcompat__map", [("Stdcompat__map", ("\137\184n\143\182\000\186P\203\182\0007k\229g\247")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Stdcompat__map_s", ("R\244;\245w>Y\147\tL\238\242\154:\028\000")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

module Make = Map.Make

module Refset' :
  sig
    type elt = Names.GlobRef.t
    type t
    val empty : t
    val is_empty : t -> bool
    val mem : elt -> t -> bool
    val add : elt -> t -> t
    val singleton : elt -> t
    val remove : elt -> t -> t
    val union : t -> t -> t
    val inter : t -> t -> t
    val diff : t -> t -> t
    val compare : t -> t -> int
    val equal : t -> t -> bool
    val subset : t -> t -> bool
    val iter : (elt -> unit) -> t -> unit
    val fold : (elt -> 'a -> 'a) -> t -> 'a -> 'a
    val for_all : (elt -> bool) -> t -> bool
    val exists : (elt -> bool) -> t -> bool
    val filter : (elt -> bool) -> t -> t
    val partition : (elt -> bool) -> t -> t * t
    val cardinal : t -> int
    val elements : t -> elt list
    val min_elt : t -> elt
    val max_elt : t -> elt
    val choose : t -> elt
    val split : elt -> t -> t * bool * t
  end
module Refmap' :
  sig
    type key = Names.GlobRef.t
    type +'a t
    val empty : 'a t
    val is_empty : 'a t -> bool
    val mem : key -> 'a t -> bool
    val add : key -> 'a -> 'a t -> 'a t
    val update : key -> ('a option -> 'a option) -> 'a t -> 'a t
    val singleton : key -> 'a -> 'a t
    val remove : key -> 'a t -> 'a t
    val merge :
      (key -> 'a option -> 'b option -> 'c option) -> 'a t -> 'b t -> 'c t
    val union : (key -> 'a -> 'a -> 'a option) -> 'a t -> 'a t -> 'a t
    val compare : ('a -> 'a -> int) -> 'a t -> 'a t -> int
    val equal : ('a -> 'a -> bool) -> 'a t -> 'a t -> bool
    val iter : (key -> 'a -> unit) -> 'a t -> unit
    val fold : (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b
    val for_all : (key -> 'a -> bool) -> 'a t -> bool
    val exists : (key -> 'a -> bool) -> 'a t -> bool
    val filter : (key -> 'a -> bool) -> 'a t -> 'a t
    val partition : (key -> 'a -> bool) -> 'a t -> 'a t * 'a t
    val cardinal : 'a t -> int
    val bindings : 'a t -> (key * 'a) list
    val min_binding : 'a t -> key * 'a
    val max_binding : 'a t -> key * 'a
    val choose : 'a t -> key * 'a
    val choose_opt : 'a t -> (key * 'a) option
    val split : key -> 'a t -> 'a t * 'a option * 'a t
    val find : key -> 'a t -> 'a
    val find_opt : key -> 'a t -> 'a option
    val map : ('a -> 'b) -> 'a t -> 'b t
    val mapi : (key -> 'a -> 'b) -> 'a t -> 'b t
  end
val safe_basename_of_global : Names.GlobRef.t -> Names.Id.t
val warning_axioms : unit -> unit
val warning_opaques : bool -> unit
val warning_ambiguous_name :
  ?loc:Loc.t -> Libnames.qualid * Names.ModPath.t * Names.GlobRef.t -> unit
val warning_id : string -> unit
val error_axiom_scheme : ?loc:Loc.t -> Names.GlobRef.t -> int -> 'a
val error_constant : ?loc:Loc.t -> Names.GlobRef.t -> 'a
val error_inductive : ?loc:Loc.t -> Names.GlobRef.t -> 'a
val error_nb_cons : unit -> 'a
val error_module_clash : Names.ModPath.t -> Names.ModPath.t -> 'a
val error_no_module_expr : Names.ModPath.t -> 'a
val error_singleton_become_prop : Names.Id.t -> Names.GlobRef.t option -> 'a
val error_unknown_module : ?loc:Loc.t -> Libnames.qualid -> 'a
val error_scheme : unit -> 'a
val error_not_visible : Names.GlobRef.t -> 'a
val error_MPfile_as_mod : Names.ModPath.t -> bool -> 'a
val check_inside_section : unit -> unit
val check_loaded_modfile : Names.ModPath.t -> unit
val msg_of_implicit : Extraction_plugin.Miniml.kill_reason -> string
val err_or_warn_remaining_implicit :
  Extraction_plugin.Miniml.kill_reason -> unit
val info_file : string -> unit
val occur_kn_in_ref : Names.MutInd.t -> Names.GlobRef.t -> bool
val repr_of_r : Names.GlobRef.t -> Names.KerName.t
val modpath_of_r : Names.GlobRef.t -> Names.ModPath.t
val label_of_r : Names.GlobRef.t -> Names.Label.t
val base_mp : Names.ModPath.t -> Names.ModPath.t
val is_modfile : Names.ModPath.t -> bool
val string_of_modfile : Names.ModPath.t -> string
val file_of_modfile : Names.ModPath.t -> string
val is_toplevel : Names.ModPath.t -> bool
val at_toplevel : Names.ModPath.t -> bool
val mp_length : Names.ModPath.t -> int
val prefixes_mp : Names.ModPath.t -> Names.MPset.t
val common_prefix_from_list :
  Names.ModPath.t -> Names.ModPath.t list -> Names.ModPath.t option
val get_nth_label_mp : int -> Names.ModPath.t -> Names.Label.t
val labels_of_ref : Names.GlobRef.t -> Names.ModPath.t * Names.Label.t list
val add_typedef :
  Names.Constant.t ->
  Declarations.constant_body -> Extraction_plugin.Miniml.ml_type -> unit
val lookup_typedef :
  Names.Constant.t ->
  Declarations.constant_body -> Extraction_plugin.Miniml.ml_type option
val add_cst_type :
  Names.Constant.t ->
  Declarations.constant_body -> Extraction_plugin.Miniml.ml_schema -> unit
val lookup_cst_type :
  Names.Constant.t ->
  Declarations.constant_body -> Extraction_plugin.Miniml.ml_schema option
val add_ind :
  Names.MutInd.t ->
  Declarations.mutual_inductive_body ->
  Extraction_plugin.Miniml.ml_ind -> unit
val lookup_ind :
  Names.MutInd.t ->
  Declarations.mutual_inductive_body ->
  Extraction_plugin.Miniml.ml_ind option
val add_inductive_kind :
  Names.MutInd.t -> Extraction_plugin.Miniml.inductive_kind -> unit
val is_coinductive : Names.GlobRef.t -> bool
val is_coinductive_type : Extraction_plugin.Miniml.ml_type -> bool
val get_record_fields : Names.GlobRef.t -> Names.GlobRef.t option list
val record_fields_of_type :
  Extraction_plugin.Miniml.ml_type -> Names.GlobRef.t option list
val add_recursors : Environ.env -> Names.MutInd.t -> unit
val is_recursor : Names.GlobRef.t -> bool
val add_projection : int -> Names.Constant.t -> Names.inductive -> unit
val is_projection : Names.GlobRef.t -> bool
val projection_arity : Names.GlobRef.t -> int
val projection_info : Names.GlobRef.t -> Names.inductive * int
val add_info_axiom : Names.GlobRef.t -> unit
val remove_info_axiom : Names.GlobRef.t -> unit
val add_log_axiom : Names.GlobRef.t -> unit
val add_opaque : Names.GlobRef.t -> unit
val remove_opaque : Names.GlobRef.t -> unit
val reset_tables : unit -> unit
val access_opaque : unit -> bool
val auto_inline : unit -> bool
val type_expand : unit -> bool
val keep_singleton : unit -> bool
type opt_flag = {
  opt_kill_dum : bool;
  opt_fix_fun : bool;
  opt_case_iot : bool;
  opt_case_idr : bool;
  opt_case_idg : bool;
  opt_case_cst : bool;
  opt_case_fun : bool;
  opt_case_app : bool;
  opt_let_app : bool;
  opt_lin_let : bool;
  opt_lin_beta : bool;
}
val optims : unit -> opt_flag
val conservative_types : unit -> bool
val file_comment : unit -> string
type lang = Ocaml | Haskell | Scheme | JSON
val lang : unit -> lang
val set_modular : bool -> unit
val modular : unit -> bool
val set_library : bool -> unit
val library : unit -> bool
val set_extrcompute : bool -> unit
val is_extrcompute : unit -> bool
val to_inline : Names.GlobRef.t -> bool
val to_keep : Names.GlobRef.t -> bool
val implicits_of_global : Names.GlobRef.t -> Int.Set.t
val type_scheme_nb_args_hook : (Environ.env -> Constr.t -> int) Hook.t
val is_custom : Names.GlobRef.t -> bool
val is_inline_custom : Names.GlobRef.t -> bool
val find_custom : Names.GlobRef.t -> string
val find_type_custom : Names.GlobRef.t -> string list * string
val is_custom_match : Extraction_plugin.Miniml.ml_branch array -> bool
val find_custom_match : Extraction_plugin.Miniml.ml_branch array -> string
val extraction_language : lang -> unit
val extraction_inline : bool -> Libnames.qualid list -> unit
val print_extraction_inline : unit -> Pp.t
val reset_extraction_inline : unit -> unit
val extract_constant_inline :
  bool -> Libnames.qualid -> string list -> string -> unit
val extract_inductive :
  Libnames.qualid -> string -> string list -> string option -> unit
type int_or_id = ArgInt of int | ArgId of Names.Id.t
val extraction_implicit : Libnames.qualid -> int_or_id list -> unit
val extraction_blacklist : string list -> unit
val reset_extraction_blacklist : unit -> unit
("DEBUG:rule", [Tag3 (("Refset'", 1282), 0, (Tag1 ([Tag1 (("elt", 1380), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -518)), 0, 0, 0, 0, (("plugins/extraction/table.mli", 16, 732, 764), ("plugins/extraction/table.mli", 16, 732, 784), 0), 0, 0, 0, Tag1 ("Extraction_plugin__Table", 0)), 1, 0); Tag1 (("t", 1381), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("clib/cSig.mli", 24, 947, 951), ("clib/cSig.mli", 24, 947, 957), 0), 0, 0, 0, Tag1 ("CSig", 9)), 1, 0); (("empty", 1382), ((Tag3 ((("t", 1381)), 0, (0)), 100000000, 0, -517), 0, (("clib/cSig.mli", 25, 958, 962), ("clib/cSig.mli", 25, 958, 974), 0), 0, Tag1 ("CSig", 10)), 0); (("is_empty", 1383), ((Tag1 (0, (Tag3 ((("t", 1381)), 0, (0)), 100000000, 0, -516), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -515), 0), 100000000, 0, -514), 0, (("clib/cSig.mli", 26, 975, 979), ("clib/cSig.mli", 26, 975, 1002), 0), 0, Tag1 ("CSig", 11)), 0); (("mem", 1384), ((Tag1 (0, (Tag3 ((("elt", 1380)), 0, (0)), 100000000, 0, -513), (Tag1 (0, (Tag3 ((("t", 1381)), 0, (0)), 100000000, 0, -512), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -511), 0), 100000000, 0, -510), 0), 100000000, 0, -509), 0, (("clib/cSig.mli", 27, 1003, 1007), ("clib/cSig.mli", 27, 1003, 1032), 0), 0, Tag1 ("CSig", 12)), 0); (("add", 1385), ((Tag1 (0, (Tag3 ((("elt", 1380)), 0, (0)), 100000000, 0, -508), (Tag1 (0, (Tag3 ((("t", 1381)), 0, (0)), 100000000, 0, -507), (Tag3 ((("t", 1381)), 0, (0)), 100000000, 0, -506), 0), 100000000, 0, -505), 0), 100000000, 0, -504), 0, (("clib/cSig.mli", 28, 1033, 1037), ("clib/cSig.mli", 28, 1033, 1059), 0), 0, Tag1 ("CSig", 13)), 0); (("singleton", 1386), ((Tag1 (0, (Tag3 ((("elt", 1380)), 0, (0)), 100000000, 0, -503), (Tag3 ((("t", 1381)), 0, (0)), 100000000, 0, -502), 0), 100000000, 0, -501), 0, (("clib/cSig.mli", 29, 1060, 1064), ("clib/cSig.mli", 29, 1060, 1087), 0), 0, Tag1 ("CSig", 14)), 0); (("remove", 1387), ((Tag1 (0, (Tag3 ((("elt", 1380)), 0, (0)), 100000000, 0, -500), (Tag1 (0, (Tag3 ((("t", 1381)), 0, (0)), 100000000, 0, -499), (Tag3 ((("t", 1381)), 0, (0)), 100000000, 0, -498), 0), 100000000, 0, -497), 0), 100000000, 0, -496), 0, (("clib/cSig.mli", 30, 1088, 1092), ("clib/cSig.mli", 30, 1088, 1117), 0), 0, Tag1 ("CSig", 15)), 0); (("union", 1388), ((Tag1 (0, (Tag3 ((("t", 1381)), 0, (0)), 100000000, 0, -495), (Tag1 (0, (Tag3 ((("t", 1381)), 0, (0)), 100000000, 0, -494), (Tag3 ((("t", 1381)), 0, (0)), 100000000, 0, -493), 0), 100000000, 0, -492), 0), 100000000, 0, -491), 0, (("clib/cSig.mli", 31, 1118, 1122), ("clib/cSig.mli", 31, 1118, 1144), 0), 0, Tag1 ("CSig", 16)), 0); (("inter", 1389), ((Tag1 (0, (Tag3 ((("t", 1381)), 0, (0)), 100000000, 0, -490), (Tag1 (0, (Tag3 ((("t", 1381)), 0, (0)), 100000000, 0, -489), (Tag3 ((("t", 1381)), 0, (0)), 100000000, 0, -488), 0), 100000000, 0, -487), 0), 100000000, 0, -486), 0, (("clib/cSig.mli", 32, 1145, 1149), ("clib/cSig.mli", 32, 1145, 1171), 0), 0, Tag1 ("CSig", 17)), 0); (("diff", 1390), ((Tag1 (0, (Tag3 ((("t", 1381)), 0, (0)), 100000000, 0, -485), (Tag1 (0, (Tag3 ((("t", 1381)), 0, (0)), 100000000, 0, -484), (Tag3 ((("t", 1381)), 0, (0)), 100000000, 0, -483), 0), 100000000, 0, -482), 0), 100000000, 0, -481), 0, (("clib/cSig.mli", 33, 1172, 1176), ("clib/cSig.mli", 33, 1172, 1197), 0), 0, Tag1 ("CSig", 18)), 0); (("compare", 1391), ((Tag1 (0, (Tag3 ((("t", 1381)), 0, (0)), 100000000, 0, -480), (Tag1 (0, (Tag3 ((("t", 1381)), 0, (0)), 100000000, 0, -479), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -478), 0), 100000000, 0, -477), 0), 100000000, 0, -476), 0, (("clib/cSig.mli", 34, 1198, 1202), ("clib/cSig.mli", 34, 1198, 1228), 0), 0, Tag1 ("CSig", 19)), 0); (("equal", 1392), ((Tag1 (0, (Tag3 ((("t", 1381)), 0, (0)), 100000000, 0, -475), (Tag1 (0, (Tag3 ((("t", 1381)), 0, (0)), 100000000, 0, -474), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -473), 0), 100000000, 0, -472), 0), 100000000, 0, -471), 0, (("clib/cSig.mli", 35, 1229, 1233), ("clib/cSig.mli", 35, 1229, 1258), 0), 0, Tag1 ("CSig", 20)), 0); (("subset", 1393), ((Tag1 (0, (Tag3 ((("t", 1381)), 0, (0)), 100000000, 0, -470), (Tag1 (0, (Tag3 ((("t", 1381)), 0, (0)), 100000000, 0, -469), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -468), 0), 100000000, 0, -467), 0), 100000000, 0, -466), 0, (("clib/cSig.mli", 36, 1259, 1263), ("clib/cSig.mli", 36, 1259, 1289), 0), 0, Tag1 ("CSig", 21)), 0); (("iter", 1394), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1380)), 0, (0)), 100000000, 0, -465), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -464), 0), 100000000, 0, -463), (Tag1 (0, (Tag3 ((("t", 1381)), 0, (0)), 100000000, 0, -462), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -461), 0), 100000000, 0, -460), 0), 100000000, 0, -459), 0, (("clib/cSig.mli", 37, 1290, 1294), ("clib/cSig.mli", 37, 1290, 1330), 0), 0, Tag1 ("CSig", 22)), 0); (("fold", 1395), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1380)), 0, (0)), 100000000, 0, -458), (Tag1 (0, ((("a")), 100000000, 0, -454), ((("a")), 100000000, 0, -454), 0), 100000000, 0, -457), 0), 100000000, 0, -456), (Tag1 (0, (Tag3 ((("t", 1381)), 0, (0)), 100000000, 0, -455), (Tag1 (0, ((("a")), 100000000, 0, -454), ((("a")), 100000000, 0, -454), 0), 100000000, 0, -453), 0), 100000000, 0, -452), 0), 100000000, 0, -451), 0, (("clib/cSig.mli", 38, 1331, 1335), ("clib/cSig.mli", 38, 1331, 1379), 0), 0, Tag1 ("CSig", 23)), 0); (("for_all", 1396), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1380)), 0, (0)), 100000000, 0, -450), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -449), 0), 100000000, 0, -448), (Tag1 (0, (Tag3 ((("t", 1381)), 0, (0)), 100000000, 0, -447), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -446), 0), 100000000, 0, -445), 0), 100000000, 0, -444), 0, (("clib/cSig.mli", 39, 1380, 1384), ("clib/cSig.mli", 39, 1380, 1423), 0), 0, Tag1 ("CSig", 24)), 0); (("exists", 1397), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1380)), 0, (0)), 100000000, 0, -443), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -442), 0), 100000000, 0, -441), (Tag1 (0, (Tag3 ((("t", 1381)), 0, (0)), 100000000, 0, -440), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -439), 0), 100000000, 0, -438), 0), 100000000, 0, -437), 0, (("clib/cSig.mli", 40, 1424, 1428), ("clib/cSig.mli", 40, 1424, 1466), 0), 0, Tag1 ("CSig", 25)), 0); (("filter", 1398), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1380)), 0, (0)), 100000000, 0, -436), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -435), 0), 100000000, 0, -434), (Tag1 (0, (Tag3 ((("t", 1381)), 0, (0)), 100000000, 0, -433), (Tag3 ((("t", 1381)), 0, (0)), 100000000, 0, -432), 0), 100000000, 0, -431), 0), 100000000, 0, -430), 0, (("clib/cSig.mli", 41, 1467, 1471), ("clib/cSig.mli", 41, 1467, 1506), 0), 0, Tag1 ("CSig", 26)), 0); (("partition", 1399), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1380)), 0, (0)), 100000000, 0, -429), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -428), 0), 100000000, 0, -427), (Tag1 (0, (Tag3 ((("t", 1381)), 0, (0)), 100000000, 0, -426), (Tag2 ([(Tag3 ((("t", 1381)), 0, (0)), 100000000, 0, -424); (Tag3 ((("t", 1381)), 0, (0)), 100000000, 0, -425)]), 100000000, 0, -423), 0), 100000000, 0, -422), 0), 100000000, 0, -421), 0, (("clib/cSig.mli", 42, 1507, 1511), ("clib/cSig.mli", 42, 1507, 1553), 0), 0, Tag1 ("CSig", 27)), 0); (("cardinal", 1400), ((Tag1 (0, (Tag3 ((("t", 1381)), 0, (0)), 100000000, 0, -420), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -419), 0), 100000000, 0, -418), 0, (("clib/cSig.mli", 43, 1554, 1558), ("clib/cSig.mli", 43, 1554, 1580), 0), 0, Tag1 ("CSig", 28)), 0); (("elements", 1401), ((Tag1 (0, (Tag3 ((("t", 1381)), 0, (0)), 100000000, 0, -417), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 1380)), 0, (0)), 100000000, 0, -416)], (0)), 100000000, 0, -415), 0), 100000000, 0, -414), 0, (("clib/cSig.mli", 44, 1581, 1585), ("clib/cSig.mli", 44, 1581, 1612), 0), 0, Tag1 ("CSig", 29)), 0); (("min_elt", 1402), ((Tag1 (0, (Tag3 ((("t", 1381)), 0, (0)), 100000000, 0, -413), (Tag3 ((("elt", 1380)), 0, (0)), 100000000, 0, -412), 0), 100000000, 0, -411), 0, (("clib/cSig.mli", 45, 1613, 1617), ("clib/cSig.mli", 45, 1613, 1638), 0), 0, Tag1 ("CSig", 30)), 0); (("max_elt", 1403), ((Tag1 (0, (Tag3 ((("t", 1381)), 0, (0)), 100000000, 0, -410), (Tag3 ((("elt", 1380)), 0, (0)), 100000000, 0, -409), 0), 100000000, 0, -408), 0, (("clib/cSig.mli", 46, 1639, 1643), ("clib/cSig.mli", 46, 1639, 1664), 0), 0, Tag1 ("CSig", 31)), 0); (("choose", 1404), ((Tag1 (0, (Tag3 ((("t", 1381)), 0, (0)), 100000000, 0, -407), (Tag3 ((("elt", 1380)), 0, (0)), 100000000, 0, -406), 0), 100000000, 0, -405), 0, (("clib/cSig.mli", 47, 1665, 1669), ("clib/cSig.mli", 47, 1665, 1689), 0), 0, Tag1 ("CSig", 32)), 0); (("split", 1405), ((Tag1 (0, (Tag3 ((("elt", 1380)), 0, (0)), 100000000, 0, -404), (Tag1 (0, (Tag3 ((("t", 1381)), 0, (0)), 100000000, 0, -403), (Tag2 ([(Tag3 ((("t", 1381)), 0, (0)), 100000000, 0, -400); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -401); (Tag3 ((("t", 1381)), 0, (0)), 100000000, 0, -402)]), 100000000, 0, -399), 0), 100000000, 0, -398), 0), 100000000, 0, -397), 0, (("clib/cSig.mli", 48, 1690, 1694), ("clib/cSig.mli", 48, 1690, 1729), 0), 0, Tag1 ("CSig", 33)), 0)]), 0, (("plugins/extraction/table.mli", 16, 732, 732), ("plugins/extraction/table.mli", 16, 732, 784), 0), Tag1 ("Extraction_plugin__Table", 1)), 0, 0); Tag3 (("Refmap'", 1283), 0, (Tag1 ([Tag1 (("key", 1406), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -732)), 0, 0, 0, 0, (("plugins/extraction/table.mli", 17, 785, 817), ("plugins/extraction/table.mli", 17, 785, 837), 0), 0, 0, 0, Tag1 ("Extraction_plugin__Table", 2)), 1, 0); Tag1 (("t", 1407), ([((("a")), 100000000, 0, -731)], 1, 0, 1, 0, [1], [2], 0, 0, (("clib/cSig.mli", 56, 1893, 1897), ("clib/cSig.mli", 56, 1893, 1909), 0), 0, 0, 0, Tag1 ("CSig", 36)), 1, 0); (("empty", 1408), ((Tag3 ((("t", 1407)), [((("a")), 100000000, 0, -730)], (0)), 100000000, 0, -729), 0, (("clib/cSig.mli", 57, 1910, 1914), ("clib/cSig.mli", 57, 1910, 1929), 0), 0, Tag1 ("CSig", 37)), 0); (("is_empty", 1409), ((Tag1 (0, (Tag3 ((("t", 1407)), [((("a")), 100000000, 0, -728)], (0)), 100000000, 0, -727), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -726), 0), 100000000, 0, -725), 0, (("clib/cSig.mli", 58, 1930, 1934), ("clib/cSig.mli", 58, 1930, 1960), 0), 0, Tag1 ("CSig", 38)), 0); (("mem", 1410), ((Tag1 (0, (Tag3 ((("key", 1406)), 0, (0)), 100000000, 0, -724), (Tag1 (0, (Tag3 ((("t", 1407)), [((("a")), 100000000, 0, -723)], (0)), 100000000, 0, -722), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -721), 0), 100000000, 0, -720), 0), 100000000, 0, -719), 0, (("clib/cSig.mli", 59, 1961, 1965), ("clib/cSig.mli", 59, 1961, 1993), 0), 0, Tag1 ("CSig", 39)), 0); (("add", 1411), ((Tag1 (0, (Tag3 ((("key", 1406)), 0, (0)), 100000000, 0, -718), (Tag1 (0, ((("a")), 100000000, 0, -716), (Tag1 (0, (Tag3 ((("t", 1407)), [((("a")), 100000000, 0, -716)], (0)), 100000000, 0, -717), (Tag3 ((("t", 1407)), [((("a")), 100000000, 0, -716)], (0)), 100000000, 0, -715), 0), 100000000, 0, -714), 0), 100000000, 0, -713), 0), 100000000, 0, -712), 0, (("clib/cSig.mli", 60, 1994, 1998), ("clib/cSig.mli", 60, 1994, 2032), 0), 0, Tag1 ("CSig", 40)), 0); (("update", 1412), ((Tag1 (0, (Tag3 ((("key", 1406)), 0, (0)), 100000000, 0, -711), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -706)], (0)), 100000000, 0, -710), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -706)], (0)), 100000000, 0, -709), 0), 100000000, 0, -708), (Tag1 (0, (Tag3 ((("t", 1407)), [((("a")), 100000000, 0, -706)], (0)), 100000000, 0, -707), (Tag3 ((("t", 1407)), [((("a")), 100000000, 0, -706)], (0)), 100000000, 0, -705), 0), 100000000, 0, -704), 0), 100000000, 0, -703), 0), 100000000, 0, -702), 0, (("clib/cSig.mli", 61, 2033, 2037), ("clib/cSig.mli", 61, 2033, 2097), 0), 0, Tag1 ("CSig", 41)), 0); (("singleton", 1413), ((Tag1 (0, (Tag3 ((("key", 1406)), 0, (0)), 100000000, 0, -701), (Tag1 (0, ((("a")), 100000000, 0, -700), (Tag3 ((("t", 1407)), [((("a")), 100000000, 0, -700)], (0)), 100000000, 0, -699), 0), 100000000, 0, -698), 0), 100000000, 0, -697), 0, (("clib/cSig.mli", 62, 2098, 2102), ("clib/cSig.mli", 62, 2098, 2134), 0), 0, Tag1 ("CSig", 42)), 0); (("remove", 1414), ((Tag1 (0, (Tag3 ((("key", 1406)), 0, (0)), 100000000, 0, -696), (Tag1 (0, (Tag3 ((("t", 1407)), [((("a")), 100000000, 0, -694)], (0)), 100000000, 0, -695), (Tag3 ((("t", 1407)), [((("a")), 100000000, 0, -694)], (0)), 100000000, 0, -693), 0), 100000000, 0, -692), 0), 100000000, 0, -691), 0, (("clib/cSig.mli", 63, 2135, 2139), ("clib/cSig.mli", 63, 2135, 2170), 0), 0, Tag1 ("CSig", 43)), 0); (("merge", 1415), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1406)), 0, (0)), 100000000, 0, -690), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -683)], (0)), 100000000, 0, -689), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -681)], (0)), 100000000, 0, -688), (Tag3 ((Tag3 ("option", 10)), [((("c")), 100000000, 0, -679)], (0)), 100000000, 0, -687), 0), 100000000, 0, -686), 0), 100000000, 0, -685), 0), 100000000, 0, -684), (Tag1 (0, (Tag3 ((("t", 1407)), [((("a")), 100000000, 0, -683)], (0)), 100000000, 0, -682), (Tag1 (0, (Tag3 ((("t", 1407)), [((("b")), 100000000, 0, -681)], (0)), 100000000, 0, -680), (Tag3 ((("t", 1407)), [((("c")), 100000000, 0, -679)], (0)), 100000000, 0, -678), 0), 100000000, 0, -677), 0), 100000000, 0, -676), 0), 100000000, 0, -675), 0, (("clib/cSig.mli", 64, 2171, 2175), ("clib/cSig.mli", 65, 2186, 2263), 0), 0, Tag1 ("CSig", 44)), 0); (("union", 1416), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1406)), 0, (0)), 100000000, 0, -674), (Tag1 (0, ((("a")), 100000000, 0, -667), (Tag1 (0, ((("a")), 100000000, 0, -667), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -667)], (0)), 100000000, 0, -673), 0), 100000000, 0, -672), 0), 100000000, 0, -671), 0), 100000000, 0, -670), (Tag1 (0, (Tag3 ((("t", 1407)), [((("a")), 100000000, 0, -667)], (0)), 100000000, 0, -669), (Tag1 (0, (Tag3 ((("t", 1407)), [((("a")), 100000000, 0, -667)], (0)), 100000000, 0, -668), (Tag3 ((("t", 1407)), [((("a")), 100000000, 0, -667)], (0)), 100000000, 0, -666), 0), 100000000, 0, -665), 0), 100000000, 0, -664), 0), 100000000, 0, -663), 0, (("clib/cSig.mli", 66, 2264, 2268), ("clib/cSig.mli", 67, 2279, 2339), 0), 0, Tag1 ("CSig", 45)), 0); (("compare", 1417), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -658), (Tag1 (0, ((("a")), 100000000, 0, -658), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -662), 0), 100000000, 0, -661), 0), 100000000, 0, -660), (Tag1 (0, (Tag3 ((("t", 1407)), [((("a")), 100000000, 0, -658)], (0)), 100000000, 0, -659), (Tag1 (0, (Tag3 ((("t", 1407)), [((("a")), 100000000, 0, -658)], (0)), 100000000, 0, -657), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -656), 0), 100000000, 0, -655), 0), 100000000, 0, -654), 0), 100000000, 0, -653), 0, (("clib/cSig.mli", 68, 2340, 2344), ("clib/cSig.mli", 68, 2340, 2397), 0), 0, Tag1 ("CSig", 46)), 0); (("equal", 1418), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -648), (Tag1 (0, ((("a")), 100000000, 0, -648), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -652), 0), 100000000, 0, -651), 0), 100000000, 0, -650), (Tag1 (0, (Tag3 ((("t", 1407)), [((("a")), 100000000, 0, -648)], (0)), 100000000, 0, -649), (Tag1 (0, (Tag3 ((("t", 1407)), [((("a")), 100000000, 0, -648)], (0)), 100000000, 0, -647), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -646), 0), 100000000, 0, -645), 0), 100000000, 0, -644), 0), 100000000, 0, -643), 0, (("clib/cSig.mli", 69, 2398, 2402), ("clib/cSig.mli", 69, 2398, 2455), 0), 0, Tag1 ("CSig", 47)), 0); (("iter", 1419), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1406)), 0, (0)), 100000000, 0, -642), (Tag1 (0, ((("a")), 100000000, 0, -638), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -641), 0), 100000000, 0, -640), 0), 100000000, 0, -639), (Tag1 (0, (Tag3 ((("t", 1407)), [((("a")), 100000000, 0, -638)], (0)), 100000000, 0, -637), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -636), 0), 100000000, 0, -635), 0), 100000000, 0, -634), 0, (("clib/cSig.mli", 70, 2456, 2460), ("clib/cSig.mli", 70, 2456, 2505), 0), 0, Tag1 ("CSig", 48)), 0); (("fold", 1420), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1406)), 0, (0)), 100000000, 0, -633), (Tag1 (0, ((("a")), 100000000, 0, -629), (Tag1 (0, ((("b")), 100000000, 0, -627), ((("b")), 100000000, 0, -627), 0), 100000000, 0, -632), 0), 100000000, 0, -631), 0), 100000000, 0, -630), (Tag1 (0, (Tag3 ((("t", 1407)), [((("a")), 100000000, 0, -629)], (0)), 100000000, 0, -628), (Tag1 (0, ((("b")), 100000000, 0, -627), ((("b")), 100000000, 0, -627), 0), 100000000, 0, -626), 0), 100000000, 0, -625), 0), 100000000, 0, -624), 0, (("clib/cSig.mli", 71, 2506, 2510), ("clib/cSig.mli", 71, 2506, 2563), 0), 0, Tag1 ("CSig", 49)), 0); (("for_all", 1421), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1406)), 0, (0)), 100000000, 0, -623), (Tag1 (0, ((("a")), 100000000, 0, -619), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -622), 0), 100000000, 0, -621), 0), 100000000, 0, -620), (Tag1 (0, (Tag3 ((("t", 1407)), [((("a")), 100000000, 0, -619)], (0)), 100000000, 0, -618), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -617), 0), 100000000, 0, -616), 0), 100000000, 0, -615), 0, (("clib/cSig.mli", 72, 2564, 2568), ("clib/cSig.mli", 72, 2564, 2616), 0), 0, Tag1 ("CSig", 50)), 0); (("exists", 1422), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1406)), 0, (0)), 100000000, 0, -614), (Tag1 (0, ((("a")), 100000000, 0, -610), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -613), 0), 100000000, 0, -612), 0), 100000000, 0, -611), (Tag1 (0, (Tag3 ((("t", 1407)), [((("a")), 100000000, 0, -610)], (0)), 100000000, 0, -609), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -608), 0), 100000000, 0, -607), 0), 100000000, 0, -606), 0, (("clib/cSig.mli", 73, 2617, 2621), ("clib/cSig.mli", 73, 2617, 2668), 0), 0, Tag1 ("CSig", 51)), 0); (("filter", 1423), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1406)), 0, (0)), 100000000, 0, -605), (Tag1 (0, ((("a")), 100000000, 0, -600), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -604), 0), 100000000, 0, -603), 0), 100000000, 0, -602), (Tag1 (0, (Tag3 ((("t", 1407)), [((("a")), 100000000, 0, -600)], (0)), 100000000, 0, -601), (Tag3 ((("t", 1407)), [((("a")), 100000000, 0, -600)], (0)), 100000000, 0, -599), 0), 100000000, 0, -598), 0), 100000000, 0, -597), 0, (("clib/cSig.mli", 74, 2669, 2673), ("clib/cSig.mli", 74, 2669, 2720), 0), 0, Tag1 ("CSig", 52)), 0); (("partition", 1424), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1406)), 0, (0)), 100000000, 0, -596), (Tag1 (0, ((("a")), 100000000, 0, -590), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -595), 0), 100000000, 0, -594), 0), 100000000, 0, -593), (Tag1 (0, (Tag3 ((("t", 1407)), [((("a")), 100000000, 0, -590)], (0)), 100000000, 0, -592), (Tag2 ([(Tag3 ((("t", 1407)), [((("a")), 100000000, 0, -590)], (0)), 100000000, 0, -589); (Tag3 ((("t", 1407)), [((("a")), 100000000, 0, -590)], (0)), 100000000, 0, -591)]), 100000000, 0, -588), 0), 100000000, 0, -587), 0), 100000000, 0, -586), 0, (("clib/cSig.mli", 75, 2721, 2725), ("clib/cSig.mli", 75, 2721, 2782), 0), 0, Tag1 ("CSig", 53)), 0); (("cardinal", 1425), ((Tag1 (0, (Tag3 ((("t", 1407)), [((("a")), 100000000, 0, -585)], (0)), 100000000, 0, -584), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -583), 0), 100000000, 0, -582), 0, (("clib/cSig.mli", 76, 2783, 2787), ("clib/cSig.mli", 76, 2783, 2812), 0), 0, Tag1 ("CSig", 54)), 0); (("bindings", 1426), ((Tag1 (0, (Tag3 ((("t", 1407)), [((("a")), 100000000, 0, -580)], (0)), 100000000, 0, -581), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("key", 1406)), 0, (0)), 100000000, 0, -579); ((("a")), 100000000, 0, -580)]), 100000000, 0, -578)], (0)), 100000000, 0, -577), 0), 100000000, 0, -576), 0, (("clib/cSig.mli", 77, 2813, 2817), ("clib/cSig.mli", 77, 2813, 2854), 0), 0, Tag1 ("CSig", 55)), 0); (("min_binding", 1427), ((Tag1 (0, (Tag3 ((("t", 1407)), [((("a")), 100000000, 0, -574)], (0)), 100000000, 0, -575), (Tag2 ([(Tag3 ((("key", 1406)), 0, (0)), 100000000, 0, -573); ((("a")), 100000000, 0, -574)]), 100000000, 0, -572), 0), 100000000, 0, -571), 0, (("clib/cSig.mli", 78, 2855, 2859), ("clib/cSig.mli", 78, 2855, 2894), 0), 0, Tag1 ("CSig", 56)), 0); (("max_binding", 1428), ((Tag1 (0, (Tag3 ((("t", 1407)), [((("a")), 100000000, 0, -569)], (0)), 100000000, 0, -570), (Tag2 ([(Tag3 ((("key", 1406)), 0, (0)), 100000000, 0, -568); ((("a")), 100000000, 0, -569)]), 100000000, 0, -567), 0), 100000000, 0, -566), 0, (("clib/cSig.mli", 79, 2895, 2899), ("clib/cSig.mli", 79, 2895, 2934), 0), 0, Tag1 ("CSig", 57)), 0); (("choose", 1429), ((Tag1 (0, (Tag3 ((("t", 1407)), [((("a")), 100000000, 0, -564)], (0)), 100000000, 0, -565), (Tag2 ([(Tag3 ((("key", 1406)), 0, (0)), 100000000, 0, -563); ((("a")), 100000000, 0, -564)]), 100000000, 0, -562), 0), 100000000, 0, -561), 0, (("clib/cSig.mli", 80, 2935, 2939), ("clib/cSig.mli", 80, 2935, 2969), 0), 0, Tag1 ("CSig", 58)), 0); (("choose_opt", 1430), ((Tag1 (0, (Tag3 ((("t", 1407)), [((("a")), 100000000, 0, -559)], (0)), 100000000, 0, -560), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("key", 1406)), 0, (0)), 100000000, 0, -558); ((("a")), 100000000, 0, -559)]), 100000000, 0, -557)], (0)), 100000000, 0, -556), 0), 100000000, 0, -555), 0, (("clib/cSig.mli", 81, 2970, 2974), ("clib/cSig.mli", 81, 2970, 3015), 0), 0, Tag1 ("CSig", 59)), 0); (("split", 1431), ((Tag1 (0, (Tag3 ((("key", 1406)), 0, (0)), 100000000, 0, -554), (Tag1 (0, (Tag3 ((("t", 1407)), [((("a")), 100000000, 0, -550)], (0)), 100000000, 0, -553), (Tag2 ([(Tag3 ((("t", 1407)), [((("a")), 100000000, 0, -550)], (0)), 100000000, 0, -549); (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -550)], (0)), 100000000, 0, -551); (Tag3 ((("t", 1407)), [((("a")), 100000000, 0, -550)], (0)), 100000000, 0, -552)]), 100000000, 0, -548), 0), 100000000, 0, -547), 0), 100000000, 0, -546), 0, (("clib/cSig.mli", 82, 3016, 3020), ("clib/cSig.mli", 82, 3016, 3069), 0), 0, Tag1 ("CSig", 60)), 0); (("find", 1432), ((Tag1 (0, (Tag3 ((("key", 1406)), 0, (0)), 100000000, 0, -545), (Tag1 (0, (Tag3 ((("t", 1407)), [((("a")), 100000000, 0, -543)], (0)), 100000000, 0, -544), ((("a")), 100000000, 0, -543), 0), 100000000, 0, -542), 0), 100000000, 0, -541), 0, (("clib/cSig.mli", 83, 3070, 3074), ("clib/cSig.mli", 83, 3070, 3101), 0), 0, Tag1 ("CSig", 61)), 0); (("find_opt", 1433), ((Tag1 (0, (Tag3 ((("key", 1406)), 0, (0)), 100000000, 0, -540), (Tag1 (0, (Tag3 ((("t", 1407)), [((("a")), 100000000, 0, -538)], (0)), 100000000, 0, -539), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -538)], (0)), 100000000, 0, -537), 0), 100000000, 0, -536), 0), 100000000, 0, -535), 0, (("clib/cSig.mli", 84, 3102, 3106), ("clib/cSig.mli", 84, 3102, 3145), 0), 0, Tag1 ("CSig", 62)), 0); (("map", 1434), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -533), ((("b")), 100000000, 0, -531), 0), 100000000, 0, -534), (Tag1 (0, (Tag3 ((("t", 1407)), [((("a")), 100000000, 0, -533)], (0)), 100000000, 0, -532), (Tag3 ((("t", 1407)), [((("b")), 100000000, 0, -531)], (0)), 100000000, 0, -530), 0), 100000000, 0, -529), 0), 100000000, 0, -528), 0, (("clib/cSig.mli", 85, 3146, 3150), ("clib/cSig.mli", 85, 3146, 3185), 0), 0, Tag1 ("CSig", 63)), 0); (("mapi", 1435), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 1406)), 0, (0)), 100000000, 0, -527), (Tag1 (0, ((("a")), 100000000, 0, -524), ((("b")), 100000000, 0, -522), 0), 100000000, 0, -526), 0), 100000000, 0, -525), (Tag1 (0, (Tag3 ((("t", 1407)), [((("a")), 100000000, 0, -524)], (0)), 100000000, 0, -523), (Tag3 ((("t", 1407)), [((("b")), 100000000, 0, -522)], (0)), 100000000, 0, -521), 0), 100000000, 0, -520), 0), 100000000, 0, -519), 0, (("clib/cSig.mli", 86, 3186, 3190), ("clib/cSig.mli", 86, 3186, 3233), 0), 0, Tag1 ("CSig", 64)), 0)]), 0, (("plugins/extraction/table.mli", 17, 785, 785), ("plugins/extraction/table.mli", 17, 785, 837), 0), Tag1 ("Extraction_plugin__Table", 3)), 0, 0); (("safe_basename_of_global", 1284), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -396), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -395), 0), 100000000, 0, -394), 0, (("plugins/extraction/table.mli", 19, 839, 839), ("plugins/extraction/table.mli", 19, 839, 886), 0), 0, Tag1 ("Extraction_plugin__Table", 4)), 0); (("warning_axioms", 1285), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -393), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -392), 0), 100000000, 0, -391), 0, (("plugins/extraction/table.mli", 23, 924, 924), ("plugins/extraction/table.mli", 23, 924, 957), 0), 0, Tag1 ("Extraction_plugin__Table", 5)), 0); (("warning_opaques", 1286), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -390), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -389), 0), 100000000, 0, -388), 0, (("plugins/extraction/table.mli", 24, 958, 958), ("plugins/extraction/table.mli", 24, 958, 992), 0), 0, Tag1 ("Extraction_plugin__Table", 6)), 0); (("warning_ambiguous_name", 1287), ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -387)], (0)), 100000000, 0, -386), (Tag1 (0, (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -383); (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -384); (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -385)]), 100000000, 0, -382), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -381), 0), 100000000, 0, -380), 0), 100000000, 0, -379), 0, (("plugins/extraction/table.mli", 25, 993, 993), ("plugins/extraction/table.mli", 25, 993, 1074), 0), 0, Tag1 ("Extraction_plugin__Table", 8)), 0); (("warning_id", 1288), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -378), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -377), 0), 100000000, 0, -376), 0, (("plugins/extraction/table.mli", 26, 1075, 1075), ("plugins/extraction/table.mli", 26, 1075, 1106), 0), 0, Tag1 ("Extraction_plugin__Table", 9)), 0); (("error_axiom_scheme", 1289), ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -375)], (0)), 100000000, 0, -374), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -373), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -372), ((("a")), 100000000, 0, -371), 0), 100000000, 0, -370), 0), 100000000, 0, -369), 0), 100000000, 0, -368), 0, (("plugins/extraction/table.mli", 27, 1107, 1107), ("plugins/extraction/table.mli", 27, 1107, 1168), 0), 0, Tag1 ("Extraction_plugin__Table", 10)), 0); (("error_constant", 1290), ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -367)], (0)), 100000000, 0, -366), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -365), ((("a")), 100000000, 0, -364), 0), 100000000, 0, -363), 0), 100000000, 0, -362), 0, (("plugins/extraction/table.mli", 28, 1169, 1169), ("plugins/extraction/table.mli", 28, 1169, 1219), 0), 0, Tag1 ("Extraction_plugin__Table", 11)), 0); (("error_inductive", 1291), ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -361)], (0)), 100000000, 0, -360), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -359), ((("a")), 100000000, 0, -358), 0), 100000000, 0, -357), 0), 100000000, 0, -356), 0, (("plugins/extraction/table.mli", 29, 1220, 1220), ("plugins/extraction/table.mli", 29, 1220, 1271), 0), 0, Tag1 ("Extraction_plugin__Table", 12)), 0); (("error_nb_cons", 1292), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -355), ((("a")), 100000000, 0, -354), 0), 100000000, 0, -353), 0, (("plugins/extraction/table.mli", 30, 1272, 1272), ("plugins/extraction/table.mli", 30, 1272, 1302), 0), 0, Tag1 ("Extraction_plugin__Table", 13)), 0); (("error_module_clash", 1293), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -352), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -351), ((("a")), 100000000, 0, -350), 0), 100000000, 0, -349), 0), 100000000, 0, -348), 0, (("plugins/extraction/table.mli", 31, 1303, 1303), ("plugins/extraction/table.mli", 31, 1303, 1356), 0), 0, Tag1 ("Extraction_plugin__Table", 14)), 0); (("error_no_module_expr", 1294), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -347), ((("a")), 100000000, 0, -346), 0), 100000000, 0, -345), 0, (("plugins/extraction/table.mli", 32, 1357, 1357), ("plugins/extraction/table.mli", 32, 1357, 1399), 0), 0, Tag1 ("Extraction_plugin__Table", 15)), 0); (("error_singleton_become_prop", 1295), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -344), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -343)], (0)), 100000000, 0, -342), ((("a")), 100000000, 0, -341), 0), 100000000, 0, -340), 0), 100000000, 0, -339), 0, (("plugins/extraction/table.mli", 33, 1400, 1400), ("plugins/extraction/table.mli", 33, 1400, 1464), 0), 0, Tag1 ("Extraction_plugin__Table", 16)), 0); (("error_unknown_module", 1296), ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -338)], (0)), 100000000, 0, -337), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -336), ((("a")), 100000000, 0, -335), 0), 100000000, 0, -334), 0), 100000000, 0, -333), 0, (("plugins/extraction/table.mli", 34, 1465, 1465), ("plugins/extraction/table.mli", 34, 1465, 1518), 0), 0, Tag1 ("Extraction_plugin__Table", 17)), 0); (("error_scheme", 1297), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -332), ((("a")), 100000000, 0, -331), 0), 100000000, 0, -330), 0, (("plugins/extraction/table.mli", 35, 1519, 1519), ("plugins/extraction/table.mli", 35, 1519, 1548), 0), 0, Tag1 ("Extraction_plugin__Table", 18)), 0); (("error_not_visible", 1298), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -329), ((("a")), 100000000, 0, -328), 0), 100000000, 0, -327), 0, (("plugins/extraction/table.mli", 36, 1549, 1549), ("plugins/extraction/table.mli", 36, 1549, 1588), 0), 0, Tag1 ("Extraction_plugin__Table", 19)), 0); (("error_MPfile_as_mod", 1299), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -326), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -325), ((("a")), 100000000, 0, -324), 0), 100000000, 0, -323), 0), 100000000, 0, -322), 0, (("plugins/extraction/table.mli", 37, 1589, 1589), ("plugins/extraction/table.mli", 37, 1589, 1638), 0), 0, Tag1 ("Extraction_plugin__Table", 20)), 0); (("check_inside_section", 1300), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -321), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -320), 0), 100000000, 0, -319), 0, (("plugins/extraction/table.mli", 38, 1639, 1639), ("plugins/extraction/table.mli", 38, 1639, 1678), 0), 0, Tag1 ("Extraction_plugin__Table", 21)), 0); (("check_loaded_modfile", 1301), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -318), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -317), 0), 100000000, 0, -316), 0, (("plugins/extraction/table.mli", 39, 1679, 1679), ("plugins/extraction/table.mli", 39, 1679, 1723), 0), 0, Tag1 ("Extraction_plugin__Table", 22)), 0); (("msg_of_implicit", 1302), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "kill_reason"), 0, (0)), 100000000, 0, -315), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -314), 0), 100000000, 0, -313), 0, (("plugins/extraction/table.mli", 40, 1724, 1724), ("plugins/extraction/table.mli", 40, 1724, 1767), 0), 0, Tag1 ("Extraction_plugin__Table", 23)), 0); (("err_or_warn_remaining_implicit", 1303), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "kill_reason"), 0, (0)), 100000000, 0, -312), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -311), 0), 100000000, 0, -310), 0, (("plugins/extraction/table.mli", 41, 1768, 1768), ("plugins/extraction/table.mli", 41, 1768, 1824), 0), 0, Tag1 ("Extraction_plugin__Table", 24)), 0); (("info_file", 1304), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -309), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -308), 0), 100000000, 0, -307), 0, (("plugins/extraction/table.mli", 43, 1826, 1826), ("plugins/extraction/table.mli", 43, 1826, 1856), 0), 0, Tag1 ("Extraction_plugin__Table", 25)), 0); (("occur_kn_in_ref", 1305), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "MutInd"), "t"), 0, (0)), 100000000, 0, -306), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -305), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -304), 0), 100000000, 0, -303), 0), 100000000, 0, -302), 0, (("plugins/extraction/table.mli", 47, 1931, 1931), ("plugins/extraction/table.mli", 47, 1931, 1982), 0), 0, Tag1 ("Extraction_plugin__Table", 26)), 0); (("repr_of_r", 1306), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -301), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "KerName"), "t"), 0, (0)), 100000000, 0, -300), 0), 100000000, 0, -299), 0, (("plugins/extraction/table.mli", 48, 1983, 1983), ("plugins/extraction/table.mli", 48, 1983, 2021), 0), 0, Tag1 ("Extraction_plugin__Table", 27)), 0); (("modpath_of_r", 1307), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -298), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -297), 0), 100000000, 0, -296), 0, (("plugins/extraction/table.mli", 49, 2022, 2022), ("plugins/extraction/table.mli", 49, 2022, 2063), 0), 0, Tag1 ("Extraction_plugin__Table", 28)), 0); (("label_of_r", 1308), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -295), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Label"), "t"), 0, (0)), 100000000, 0, -294), 0), 100000000, 0, -293), 0, (("plugins/extraction/table.mli", 50, 2064, 2064), ("plugins/extraction/table.mli", 50, 2064, 2101), 0), 0, Tag1 ("Extraction_plugin__Table", 29)), 0); (("base_mp", 1309), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -292), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -291), 0), 100000000, 0, -290), 0, (("plugins/extraction/table.mli", 51, 2102, 2102), ("plugins/extraction/table.mli", 51, 2102, 2138), 0), 0, Tag1 ("Extraction_plugin__Table", 30)), 0); (("is_modfile", 1310), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -289), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -288), 0), 100000000, 0, -287), 0, (("plugins/extraction/table.mli", 52, 2139, 2139), ("plugins/extraction/table.mli", 52, 2139, 2173), 0), 0, Tag1 ("Extraction_plugin__Table", 31)), 0); (("string_of_modfile", 1311), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -286), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -285), 0), 100000000, 0, -284), 0, (("plugins/extraction/table.mli", 53, 2174, 2174), ("plugins/extraction/table.mli", 53, 2174, 2217), 0), 0, Tag1 ("Extraction_plugin__Table", 32)), 0); (("file_of_modfile", 1312), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -283), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -282), 0), 100000000, 0, -281), 0, (("plugins/extraction/table.mli", 54, 2218, 2218), ("plugins/extraction/table.mli", 54, 2218, 2259), 0), 0, Tag1 ("Extraction_plugin__Table", 33)), 0); (("is_toplevel", 1313), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -280), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -279), 0), 100000000, 0, -278), 0, (("plugins/extraction/table.mli", 55, 2260, 2260), ("plugins/extraction/table.mli", 55, 2260, 2295), 0), 0, Tag1 ("Extraction_plugin__Table", 34)), 0); (("at_toplevel", 1314), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -277), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -276), 0), 100000000, 0, -275), 0, (("plugins/extraction/table.mli", 56, 2296, 2296), ("plugins/extraction/table.mli", 56, 2296, 2331), 0), 0, Tag1 ("Extraction_plugin__Table", 35)), 0); (("mp_length", 1315), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -274), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -273), 0), 100000000, 0, -272), 0, (("plugins/extraction/table.mli", 57, 2332, 2332), ("plugins/extraction/table.mli", 57, 2332, 2364), 0), 0, Tag1 ("Extraction_plugin__Table", 36)), 0); (("prefixes_mp", 1316), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -271), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "MPset"), "t"), 0, (0)), 100000000, 0, -270), 0), 100000000, 0, -269), 0, (("plugins/extraction/table.mli", 58, 2365, 2365), ("plugins/extraction/table.mli", 58, 2365, 2403), 0), 0, Tag1 ("Extraction_plugin__Table", 37)), 0); (("common_prefix_from_list", 1317), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -268), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -267)], (0)), 100000000, 0, -266), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -265)], (0)), 100000000, 0, -264), 0), 100000000, 0, -263), 0), 100000000, 0, -262), 0, (("plugins/extraction/table.mli", 59, 2404, 2404), ("plugins/extraction/table.mli", 60, 2434, 2483), 0), 0, Tag1 ("Extraction_plugin__Table", 38)), 0); (("get_nth_label_mp", 1318), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -261), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -260), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Label"), "t"), 0, (0)), 100000000, 0, -259), 0), 100000000, 0, -258), 0), 100000000, 0, -257), 0, (("plugins/extraction/table.mli", 61, 2484, 2484), ("plugins/extraction/table.mli", 61, 2484, 2534), 0), 0, Tag1 ("Extraction_plugin__Table", 39)), 0); (("labels_of_ref", 1319), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -256), (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -253); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Label"), "t"), 0, (0)), 100000000, 0, -255)], (0)), 100000000, 0, -254)]), 100000000, 0, -252), 0), 100000000, 0, -251), 0, (("plugins/extraction/table.mli", 62, 2535, 2535), ("plugins/extraction/table.mli", 62, 2535, 2592), 0), 0, Tag1 ("Extraction_plugin__Table", 40)), 0); (("add_typedef", 1320), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -250), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "constant_body"), 0, (0)), 100000000, 0, -249), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_type"), 0, (0)), 100000000, 0, -248), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -247), 0), 100000000, 0, -246), 0), 100000000, 0, -245), 0), 100000000, 0, -244), 0, (("plugins/extraction/table.mli", 74, 3078, 3078), ("plugins/extraction/table.mli", 74, 3078, 3142), 0), 0, Tag1 ("Extraction_plugin__Table", 41)), 0); (("lookup_typedef", 1321), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -243), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "constant_body"), 0, (0)), 100000000, 0, -242), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_type"), 0, (0)), 100000000, 0, -241)], (0)), 100000000, 0, -240), 0), 100000000, 0, -239), 0), 100000000, 0, -238), 0, (("plugins/extraction/table.mli", 75, 3143, 3143), ("plugins/extraction/table.mli", 75, 3143, 3209), 0), 0, Tag1 ("Extraction_plugin__Table", 42)), 0); (("add_cst_type", 1322), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -237), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "constant_body"), 0, (0)), 100000000, 0, -236), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_schema"), 0, (0)), 100000000, 0, -235), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -234), 0), 100000000, 0, -233), 0), 100000000, 0, -232), 0), 100000000, 0, -231), 0, (("plugins/extraction/table.mli", 77, 3211, 3211), ("plugins/extraction/table.mli", 77, 3211, 3278), 0), 0, Tag1 ("Extraction_plugin__Table", 43)), 0); (("lookup_cst_type", 1323), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -230), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "constant_body"), 0, (0)), 100000000, 0, -229), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_schema"), 0, (0)), 100000000, 0, -228)], (0)), 100000000, 0, -227), 0), 100000000, 0, -226), 0), 100000000, 0, -225), 0, (("plugins/extraction/table.mli", 78, 3279, 3279), ("plugins/extraction/table.mli", 78, 3279, 3348), 0), 0, Tag1 ("Extraction_plugin__Table", 44)), 0); (("add_ind", 1324), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "MutInd"), "t"), 0, (0)), 100000000, 0, -224), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "mutual_inductive_body"), 0, (0)), 100000000, 0, -223), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ind"), 0, (0)), 100000000, 0, -222), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -221), 0), 100000000, 0, -220), 0), 100000000, 0, -219), 0), 100000000, 0, -218), 0, (("plugins/extraction/table.mli", 80, 3350, 3350), ("plugins/extraction/table.mli", 80, 3350, 3415), 0), 0, Tag1 ("Extraction_plugin__Table", 45)), 0); (("lookup_ind", 1325), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "MutInd"), "t"), 0, (0)), 100000000, 0, -217), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "mutual_inductive_body"), 0, (0)), 100000000, 0, -216), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_ind"), 0, (0)), 100000000, 0, -215)], (0)), 100000000, 0, -214), 0), 100000000, 0, -213), 0), 100000000, 0, -212), 0, (("plugins/extraction/table.mli", 81, 3416, 3416), ("plugins/extraction/table.mli", 81, 3416, 3483), 0), 0, Tag1 ("Extraction_plugin__Table", 46)), 0); (("add_inductive_kind", 1326), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "MutInd"), "t"), 0, (0)), 100000000, 0, -211), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "inductive_kind"), 0, (0)), 100000000, 0, -210), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -209), 0), 100000000, 0, -208), 0), 100000000, 0, -207), 0, (("plugins/extraction/table.mli", 83, 3485, 3485), ("plugins/extraction/table.mli", 83, 3485, 3544), 0), 0, Tag1 ("Extraction_plugin__Table", 47)), 0); (("is_coinductive", 1327), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -206), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -205), 0), 100000000, 0, -204), 0, (("plugins/extraction/table.mli", 84, 3545, 3545), ("plugins/extraction/table.mli", 84, 3545, 3583), 0), 0, Tag1 ("Extraction_plugin__Table", 48)), 0); (("is_coinductive_type", 1328), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_type"), 0, (0)), 100000000, 0, -203), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -202), 0), 100000000, 0, -201), 0, (("plugins/extraction/table.mli", 85, 3584, 3584), ("plugins/extraction/table.mli", 85, 3584, 3625), 0), 0, Tag1 ("Extraction_plugin__Table", 49)), 0); (("get_record_fields", 1329), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -200), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -199)], (0)), 100000000, 0, -198)], (0)), 100000000, 0, -197), 0), 100000000, 0, -196), 0, (("plugins/extraction/table.mli", 87, 3689, 3689), ("plugins/extraction/table.mli", 88, 3713, 3749), 0), 0, Tag1 ("Extraction_plugin__Table", 50)), 0); (("record_fields_of_type", 1330), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_type"), 0, (0)), 100000000, 0, -195), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -194)], (0)), 100000000, 0, -193)], (0)), 100000000, 0, -192), 0), 100000000, 0, -191), 0, (("plugins/extraction/table.mli", 89, 3750, 3750), ("plugins/extraction/table.mli", 89, 3750, 3810), 0), 0, Tag1 ("Extraction_plugin__Table", 51)), 0); (("add_recursors", 1331), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -190), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "MutInd"), "t"), 0, (0)), 100000000, 0, -189), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -188), 0), 100000000, 0, -187), 0), 100000000, 0, -186), 0, (("plugins/extraction/table.mli", 91, 3812, 3812), ("plugins/extraction/table.mli", 91, 3812, 3863), 0), 0, Tag1 ("Extraction_plugin__Table", 52)), 0); (("is_recursor", 1332), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -185), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -184), 0), 100000000, 0, -183), 0, (("plugins/extraction/table.mli", 92, 3864, 3864), ("plugins/extraction/table.mli", 92, 3864, 3899), 0), 0, Tag1 ("Extraction_plugin__Table", 53)), 0); (("add_projection", 1333), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -182), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -181), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -180), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -179), 0), 100000000, 0, -178), 0), 100000000, 0, -177), 0), 100000000, 0, -176), 0, (("plugins/extraction/table.mli", 94, 3901, 3901), ("plugins/extraction/table.mli", 94, 3901, 3960), 0), 0, Tag1 ("Extraction_plugin__Table", 54)), 0); (("is_projection", 1334), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -175), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -174), 0), 100000000, 0, -173), 0, (("plugins/extraction/table.mli", 95, 3961, 3961), ("plugins/extraction/table.mli", 95, 3961, 3998), 0), 0, Tag1 ("Extraction_plugin__Table", 55)), 0); (("projection_arity", 1335), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -172), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -171), 0), 100000000, 0, -170), 0, (("plugins/extraction/table.mli", 96, 3999, 3999), ("plugins/extraction/table.mli", 96, 3999, 4038), 0), 0, Tag1 ("Extraction_plugin__Table", 56)), 0); (("projection_info", 1336), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -169), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -167); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -168)]), 100000000, 0, -166), 0), 100000000, 0, -165), 0, (("plugins/extraction/table.mli", 97, 4039, 4039), ("plugins/extraction/table.mli", 97, 4039, 4089), 0), 0, Tag1 ("Extraction_plugin__Table", 57)), 0); (("add_info_axiom", 1337), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -164), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -163), 0), 100000000, 0, -162), 0, (("plugins/extraction/table.mli", 99, 4103, 4103), ("plugins/extraction/table.mli", 99, 4103, 4141), 0), 0, Tag1 ("Extraction_plugin__Table", 58)), 0); (("remove_info_axiom", 1338), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -161), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -160), 0), 100000000, 0, -159), 0, (("plugins/extraction/table.mli", 100, 4142, 4142), ("plugins/extraction/table.mli", 100, 4142, 4183), 0), 0, Tag1 ("Extraction_plugin__Table", 59)), 0); (("add_log_axiom", 1339), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -158), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -157), 0), 100000000, 0, -156), 0, (("plugins/extraction/table.mli", 101, 4184, 4184), ("plugins/extraction/table.mli", 101, 4184, 4221), 0), 0, Tag1 ("Extraction_plugin__Table", 60)), 0); (("add_opaque", 1340), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -155), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -154), 0), 100000000, 0, -153), 0, (("plugins/extraction/table.mli", 103, 4223, 4223), ("plugins/extraction/table.mli", 103, 4223, 4257), 0), 0, Tag1 ("Extraction_plugin__Table", 61)), 0); (("remove_opaque", 1341), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -152), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -151), 0), 100000000, 0, -150), 0, (("plugins/extraction/table.mli", 104, 4258, 4258), ("plugins/extraction/table.mli", 104, 4258, 4295), 0), 0, Tag1 ("Extraction_plugin__Table", 62)), 0); (("reset_tables", 1342), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -149), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -148), 0), 100000000, 0, -147), 0, (("plugins/extraction/table.mli", 106, 4297, 4297), ("plugins/extraction/table.mli", 106, 4297, 4328), 0), 0, Tag1 ("Extraction_plugin__Table", 63)), 0); (("access_opaque", 1343), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -146), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -145), 0), 100000000, 0, -144), 0, (("plugins/extraction/table.mli", 110, 4361, 4361), ("plugins/extraction/table.mli", 110, 4361, 4393), 0), 0, Tag1 ("Extraction_plugin__Table", 64)), 0); (("auto_inline", 1344), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -143), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -142), 0), 100000000, 0, -141), 0, (("plugins/extraction/table.mli", 114, 4424, 4424), ("plugins/extraction/table.mli", 114, 4424, 4454), 0), 0, Tag1 ("Extraction_plugin__Table", 65)), 0); (("type_expand", 1345), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -140), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -139), 0), 100000000, 0, -138), 0, (("plugins/extraction/table.mli", 118, 4485, 4485), ("plugins/extraction/table.mli", 118, 4485, 4515), 0), 0, Tag1 ("Extraction_plugin__Table", 66)), 0); (("keep_singleton", 1346), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -137), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -136), 0), 100000000, 0, -135), 0, (("plugins/extraction/table.mli", 122, 4549, 4549), ("plugins/extraction/table.mli", 122, 4549, 4582), 0), 0, Tag1 ("Extraction_plugin__Table", 67)), 0); Tag1 (("opt_flag", 1347), (0, 0, [[(("opt_kill_dum", 955), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -124), (("plugins/extraction/table.mli", 127, 4627, 4633), ("plugins/extraction/table.mli", 127, 4627, 4653), 0), 0, Tag1 ("Extraction_plugin__Table", 69)); (("opt_fix_fun", 956), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -125), (("plugins/extraction/table.mli", 128, 4662, 4668), ("plugins/extraction/table.mli", 128, 4662, 4687), 0), 0, Tag1 ("Extraction_plugin__Table", 70)); (("opt_case_iot", 957), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -126), (("plugins/extraction/table.mli", 129, 4698, 4704), ("plugins/extraction/table.mli", 129, 4698, 4724), 0), 0, Tag1 ("Extraction_plugin__Table", 71)); (("opt_case_idr", 958), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -127), (("plugins/extraction/table.mli", 130, 4734, 4740), ("plugins/extraction/table.mli", 130, 4734, 4760), 0), 0, Tag1 ("Extraction_plugin__Table", 72)); (("opt_case_idg", 959), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -128), (("plugins/extraction/table.mli", 131, 4770, 4776), ("plugins/extraction/table.mli", 131, 4770, 4796), 0), 0, Tag1 ("Extraction_plugin__Table", 73)); (("opt_case_cst", 960), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -129), (("plugins/extraction/table.mli", 132, 4807, 4813), ("plugins/extraction/table.mli", 132, 4807, 4833), 0), 0, Tag1 ("Extraction_plugin__Table", 74)); (("opt_case_fun", 961), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -130), (("plugins/extraction/table.mli", 133, 4844, 4850), ("plugins/extraction/table.mli", 133, 4844, 4870), 0), 0, Tag1 ("Extraction_plugin__Table", 75)); (("opt_case_app", 962), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -131), (("plugins/extraction/table.mli", 134, 4881, 4887), ("plugins/extraction/table.mli", 134, 4881, 4907), 0), 0, Tag1 ("Extraction_plugin__Table", 76)); (("opt_let_app", 963), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -132), (("plugins/extraction/table.mli", 135, 4919, 4925), ("plugins/extraction/table.mli", 135, 4919, 4944), 0), 0, Tag1 ("Extraction_plugin__Table", 77)); (("opt_lin_let", 964), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -133), (("plugins/extraction/table.mli", 136, 4957, 4963), ("plugins/extraction/table.mli", 136, 4957, 4982), 0), 0, Tag1 ("Extraction_plugin__Table", 78)); (("opt_lin_beta", 965), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -134), (("plugins/extraction/table.mli", 137, 4995, 5001), ("plugins/extraction/table.mli", 137, 4995, 5020), 0), 0, Tag1 ("Extraction_plugin__Table", 79))]], 1, 0, 0, 0, 0, 0, (("plugins/extraction/table.mli", 126, 4611, 4611), ("plugins/extraction/table.mli", 137, 4995, 5022), 0), 0, 0, 0, Tag1 ("Extraction_plugin__Table", 68)), 1, 0); (("optims", 1348), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -123), (Tag3 ((("opt_flag", 1347)), 0, (0)), 100000000, 0, -122), 0), 100000000, 0, -121), 0, (("plugins/extraction/table.mli", 139, 5035, 5035), ("plugins/extraction/table.mli", 139, 5035, 5065), 0), 0, Tag1 ("Extraction_plugin__Table", 80)), 0); (("conservative_types", 1349), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -120), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -119), 0), 100000000, 0, -118), 0, (("plugins/extraction/table.mli", 143, 5117, 5117), ("plugins/extraction/table.mli", 143, 5117, 5154), 0), 0, Tag1 ("Extraction_plugin__Table", 81)), 0); (("file_comment", 1350), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -117), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -116), 0), 100000000, 0, -115), 0, (("plugins/extraction/table.mli", 147, 5213, 5213), ("plugins/extraction/table.mli", 147, 5213, 5246), 0), 0, Tag1 ("Extraction_plugin__Table", 82)), 0); Tag1 (("lang", 1351), (0, 0, Tag1 ([(("Ocaml", 970), (0), 0, (("plugins/extraction/table.mli", 151, 5273, 5285), ("plugins/extraction/table.mli", 151, 5273, 5290), 0), 0, Tag1 ("Extraction_plugin__Table", 84)); (("Haskell", 971), (0), 0, (("plugins/extraction/table.mli", 151, 5273, 5291), ("plugins/extraction/table.mli", 151, 5273, 5300), 0), 0, Tag1 ("Extraction_plugin__Table", 85)); (("Scheme", 972), (0), 0, (("plugins/extraction/table.mli", 151, 5273, 5301), ("plugins/extraction/table.mli", 151, 5273, 5309), 0), 0, Tag1 ("Extraction_plugin__Table", 86)); (("JSON", 973), (0), 0, (("plugins/extraction/table.mli", 151, 5273, 5310), ("plugins/extraction/table.mli", 151, 5273, 5316), 0), 0, Tag1 ("Extraction_plugin__Table", 87))], 0), 1, 0, 0, 0, 0, 0, (("plugins/extraction/table.mli", 151, 5273, 5273), ("plugins/extraction/table.mli", 151, 5273, 5316), 0), 0, 1, 0, Tag1 ("Extraction_plugin__Table", 83)), 1, 0); (("lang", 1352), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -114), (Tag3 ((("lang", 1351)), 0, (0)), 100000000, 0, -113), 0), 100000000, 0, -112), 0, (("plugins/extraction/table.mli", 152, 5317, 5317), ("plugins/extraction/table.mli", 152, 5317, 5340), 0), 0, Tag1 ("Extraction_plugin__Table", 88)), 0); (("set_modular", 1353), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -111), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -110), 0), 100000000, 0, -109), 0, (("plugins/extraction/table.mli", 162, 5548, 5548), ("plugins/extraction/table.mli", 162, 5548, 5578), 0), 0, Tag1 ("Extraction_plugin__Table", 89)), 0); (("modular", 1354), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -108), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -107), 0), 100000000, 0, -106), 0, (("plugins/extraction/table.mli", 163, 5579, 5579), ("plugins/extraction/table.mli", 163, 5579, 5605), 0), 0, Tag1 ("Extraction_plugin__Table", 90)), 0); (("set_library", 1355), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -105), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -104), 0), 100000000, 0, -103), 0, (("plugins/extraction/table.mli", 165, 5607, 5607), ("plugins/extraction/table.mli", 165, 5607, 5637), 0), 0, Tag1 ("Extraction_plugin__Table", 91)), 0); (("library", 1356), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -102), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -101), 0), 100000000, 0, -100), 0, (("plugins/extraction/table.mli", 166, 5638, 5638), ("plugins/extraction/table.mli", 166, 5638, 5664), 0), 0, Tag1 ("Extraction_plugin__Table", 92)), 0); (("set_extrcompute", 1357), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -99), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -98), 0), 100000000, 0, -97), 0, (("plugins/extraction/table.mli", 168, 5666, 5666), ("plugins/extraction/table.mli", 168, 5666, 5700), 0), 0, Tag1 ("Extraction_plugin__Table", 93)), 0); (("is_extrcompute", 1358), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -96), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -95), 0), 100000000, 0, -94), 0, (("plugins/extraction/table.mli", 169, 5701, 5701), ("plugins/extraction/table.mli", 169, 5701, 5734), 0), 0, Tag1 ("Extraction_plugin__Table", 94)), 0); (("to_inline", 1359), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -93), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -92), 0), 100000000, 0, -91), 0, (("plugins/extraction/table.mli", 173, 5770, 5770), ("plugins/extraction/table.mli", 173, 5770, 5803), 0), 0, Tag1 ("Extraction_plugin__Table", 95)), 0); (("to_keep", 1360), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -90), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -89), 0), 100000000, 0, -88), 0, (("plugins/extraction/table.mli", 174, 5804, 5804), ("plugins/extraction/table.mli", 174, 5804, 5835), 0), 0, Tag1 ("Extraction_plugin__Table", 96)), 0); (("implicits_of_global", 1361), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -87), (Tag3 (Tag1 (Tag1 ((Tag2 ("Int")), "Set"), "t"), 0, (0)), 100000000, 0, -86), 0), 100000000, 0, -85), 0, (("plugins/extraction/table.mli", 178, 5875, 5875), ("plugins/extraction/table.mli", 178, 5875, 5923), 0), 0, Tag1 ("Extraction_plugin__Table", 97)), 0); (("type_scheme_nb_args_hook", 1362), ((Tag3 (Tag1 ((Tag2 ("Hook")), "t"), [(Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -84), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "t"), 0, (0)), 100000000, 0, -83), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -82), 0), 100000000, 0, -81), 0), 100000000, 0, -80)], (0)), 100000000, 0, -79), 0, (("plugins/extraction/table.mli", 183, 6048, 6048), ("plugins/extraction/table.mli", 183, 6048, 6118), 0), 0, Tag1 ("Extraction_plugin__Table", 99)), 0); (("is_custom", 1363), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -78), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -77), 0), 100000000, 0, -76), 0, (("plugins/extraction/table.mli", 185, 6120, 6120), ("plugins/extraction/table.mli", 185, 6120, 6153), 0), 0, Tag1 ("Extraction_plugin__Table", 100)), 0); (("is_inline_custom", 1364), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -75), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -74), 0), 100000000, 0, -73), 0, (("plugins/extraction/table.mli", 186, 6154, 6154), ("plugins/extraction/table.mli", 186, 6154, 6194), 0), 0, Tag1 ("Extraction_plugin__Table", 101)), 0); (("find_custom", 1365), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -72), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -71), 0), 100000000, 0, -70), 0, (("plugins/extraction/table.mli", 187, 6195, 6195), ("plugins/extraction/table.mli", 187, 6195, 6232), 0), 0, Tag1 ("Extraction_plugin__Table", 102)), 0); (("find_type_custom", 1366), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -69), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -67)], (0)), 100000000, 0, -66); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -68)]), 100000000, 0, -65), 0), 100000000, 0, -64), 0, (("plugins/extraction/table.mli", 188, 6233, 6233), ("plugins/extraction/table.mli", 188, 6233, 6289), 0), 0, Tag1 ("Extraction_plugin__Table", 103)), 0); (("is_custom_match", 1367), ((Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_branch"), 0, (0)), 100000000, 0, -63)], (0)), 100000000, 0, -62), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -61), 0), 100000000, 0, -60), 0, (("plugins/extraction/table.mli", 190, 6291, 6291), ("plugins/extraction/table.mli", 190, 6291, 6336), 0), 0, Tag1 ("Extraction_plugin__Table", 104)), 0); (("find_custom_match", 1368), ((Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Extraction_plugin")), "Miniml"), "ml_branch"), 0, (0)), 100000000, 0, -59)], (0)), 100000000, 0, -58), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -57), 0), 100000000, 0, -56), 0, (("plugins/extraction/table.mli", 191, 6337, 6337), ("plugins/extraction/table.mli", 191, 6337, 6386), 0), 0, Tag1 ("Extraction_plugin__Table", 105)), 0); (("extraction_language", 1369), ((Tag1 (0, (Tag3 ((("lang", 1351)), 0, (0)), 100000000, 0, -55), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -54), 0), 100000000, 0, -53), 0, (("plugins/extraction/table.mli", 195, 6417, 6417), ("plugins/extraction/table.mli", 195, 6417, 6455), 0), 0, Tag1 ("Extraction_plugin__Table", 106)), 0); (("extraction_inline", 1370), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -52), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -51)], (0)), 100000000, 0, -50), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -49), 0), 100000000, 0, -48), 0), 100000000, 0, -47), 0, (("plugins/extraction/table.mli", 196, 6456, 6456), ("plugins/extraction/table.mli", 196, 6456, 6507), 0), 0, Tag1 ("Extraction_plugin__Table", 107)), 0); (("print_extraction_inline", 1371), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -46), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -45), 0), 100000000, 0, -44), 0, (("plugins/extraction/table.mli", 197, 6508, 6508), ("plugins/extraction/table.mli", 197, 6508, 6550), 0), 0, Tag1 ("Extraction_plugin__Table", 108)), 0); (("reset_extraction_inline", 1372), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -43), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -42), 0), 100000000, 0, -41), 0, (("plugins/extraction/table.mli", 198, 6551, 6551), ("plugins/extraction/table.mli", 198, 6551, 6593), 0), 0, Tag1 ("Extraction_plugin__Table", 109)), 0); (("extract_constant_inline", 1373), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -40), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -39), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -38)], (0)), 100000000, 0, -37), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -36), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -35), 0), 100000000, 0, -34), 0), 100000000, 0, -33), 0), 100000000, 0, -32), 0), 100000000, 0, -31), 0, (("plugins/extraction/table.mli", 199, 6594, 6594), ("plugins/extraction/table.mli", 200, 6624, 6673), 0), 0, Tag1 ("Extraction_plugin__Table", 110)), 0); (("extract_inductive", 1374), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -30), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -29), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -28)], (0)), 100000000, 0, -27), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -26)], (0)), 100000000, 0, -25), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -24), 0), 100000000, 0, -23), 0), 100000000, 0, -22), 0), 100000000, 0, -21), 0), 100000000, 0, -20), 0, (("plugins/extraction/table.mli", 201, 6674, 6674), ("plugins/extraction/table.mli", 202, 6698, 6756), 0), 0, Tag1 ("Extraction_plugin__Table", 111)), 0); Tag1 (("int_or_id", 1375), (0, 0, Tag1 ([(("ArgInt", 1276), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -18)]), 0, (("plugins/extraction/table.mli", 205, 6759, 6776), ("plugins/extraction/table.mli", 205, 6759, 6789), 0), 0, Tag1 ("Extraction_plugin__Table", 113)); (("ArgId", 1277), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -19)]), 0, (("plugins/extraction/table.mli", 205, 6759, 6790), ("plugins/extraction/table.mli", 205, 6759, 6805), 0), 0, Tag1 ("Extraction_plugin__Table", 114))], 0), 1, 0, 0, 0, 0, 0, (("plugins/extraction/table.mli", 205, 6759, 6759), ("plugins/extraction/table.mli", 205, 6759, 6805), 0), 0, 0, 0, Tag1 ("Extraction_plugin__Table", 112)), 1, 0); (("extraction_implicit", 1376), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -17), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("int_or_id", 1375)), 0, (0)), 100000000, 0, -16)], (0)), 100000000, 0, -15), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -14), 0), 100000000, 0, -13), 0), 100000000, 0, -12), 0, (("plugins/extraction/table.mli", 206, 6806, 6806), ("plugins/extraction/table.mli", 206, 6806, 6864), 0), 0, Tag1 ("Extraction_plugin__Table", 115)), 0); (("extraction_blacklist", 1377), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -11)], (0)), 100000000, 0, -10), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("plugins/extraction/table.mli", 210, 6905, 6905), ("plugins/extraction/table.mli", 210, 6905, 6951), 0), 0, Tag1 ("Extraction_plugin__Table", 116)), 0); (("reset_extraction_blacklist", 1378), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("plugins/extraction/table.mli", 211, 6952, 6952), ("plugins/extraction/table.mli", 211, 6952, 6997), 0), 0, Tag1 ("Extraction_plugin__Table", 117)), 0); (("print_extraction_blacklist", 1379), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("plugins/extraction/table.mli", 212, 6998, 6998), ("plugins/extraction/table.mli", 212, 6998, 7043), 0), 0, Tag1 ("Extraction_plugin__Table", 118)), 0)], "Extraction_plugin__Table", [("Extraction_plugin__Table", ("w\141\237\219\249\230m\252D)\247s1\205f\154")); ("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Vmemitcodes", ("wCd\138\165\158DD\241gH\236.\210\197\247")); ("Vmbytecodes", ("\025\021\151\137Dx\149W\236+[\143f\208\160\016")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("Range", ("\218\130\001r\237\r\144\171\164\021l\155\196\143sg")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Libnames", ("fp\0255\167\162\209\153\137\161\169#\246\193\003\198")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hook", ("\183\194\223\003\155\169',\187\240a;E\b\1396")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Extraction_plugin__Miniml", ("\130\229}\135\140\233\017o.s\132\238\240\155\168f")); ("Extraction_plugin", ("o,\156$\195_6\238J\232\255\189\197B\169\n")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Environ", ("\171b\1579\229<\003Z\147IL\225X\254\182\204")); ("Declarations", ("\239\137n\019\030w$\182\166z^{\b\206\163\175")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CEphemeron", ("\204I\179-\206(x4\173\229\250\001PkH\151")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])
val print_extraction_blacklist : unit -> Pp.t

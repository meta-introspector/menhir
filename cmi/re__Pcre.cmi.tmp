exception Parse_error
exception Not_supported
type regexp = Re__.Core.re
type flag = [ `ANCHORED | `CASELESS | `DOTALL | `MULTILINE ]
type groups = Re__.Core.Group.t
type split_result =
    Text of string
  | Delim of string
  | Group of int * string
  | NoGroup
val re : ?flags:flag list -> string -> Re__.Core.t
val regexp : ?flags:flag list -> string -> regexp
val extract : rex:regexp -> string -> string array
val exec : rex:regexp -> ?pos:int -> string -> groups
val get_substring : groups -> int -> string
val names : regexp -> string array
val get_named_substring : regexp -> string -> groups -> string
val get_substring_ofs : groups -> int -> int * int
val pmatch : rex:regexp -> string -> bool
val substitute :
  rex:Re__.Core.re -> subst:(string -> string) -> string -> string
val full_split : ?max:int -> rex:regexp -> string -> split_result list
val split : rex:regexp -> string -> string list
val quote : string -> string("DEBUG:rule", [Tag2 (("Parse_error", 547), ((Tag3 ("exn", 7)), 0, (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Re__Pcre", 0)), 2, 0); Tag2 (("Not_supported", 548), ((Tag3 ("exn", 7)), 0, (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Re__Pcre", 1)), 2, 0); Tag1 (("regexp", 549), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Re__")), "Core"), "re"), 0, (0)), 100000000, 0, -93)), 0, 0, 0, 0, (("lib/pcre.mli", 4, 47, 47), ("lib/pcre.mli", 4, 47, 68), 0), 0, 0, 0, Tag1 ("Re__Pcre", 2)), 1, 0); Tag1 (("flag", 550), (0, 0, 0, 1, ((Tag8 (([("ANCHORED", (0)); ("CASELESS", (0)); ("DOTALL", (0)); ("MULTILINE", (0))], (0, 100000000, 0, -92), 1, 0, 0)), 100000000, 0, -91)), 0, 0, 0, 0, (("lib/pcre.mli", 6, 70, 70), ("lib/pcre.mli", 6, 70, 130), 0), 0, 1, 0, Tag1 ("Re__Pcre", 3)), 1, 0); Tag1 (("groups", 551), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Re__")), "Core"), "Group"), "t"), 0, (0)), 100000000, 0, -90)), 0, 0, 0, 0, (("lib/pcre.mli", 8, 132, 132), ("lib/pcre.mli", 8, 132, 158), 0), 0, 0, 0, Tag1 ("Re__Pcre", 4)), 1, 0); Tag1 (("split_result", 552), (0, 0, Tag1 ([(("Text", 507), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -86)]), 0, (("lib/pcre.mli", 12, 218, 220), ("lib/pcre.mli", 12, 218, 237), 0), 0, Tag1 ("Re__Pcre", 6)); (("Delim", 508), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -87)]), 0, (("lib/pcre.mli", 13, 280, 282), ("lib/pcre.mli", 13, 280, 299), 0), 0, Tag1 ("Re__Pcre", 7)); (("Group", 509), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -88); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -89)]), 0, (("lib/pcre.mli", 14, 347, 349), ("lib/pcre.mli", 14, 347, 372), 0), 0, Tag1 ("Re__Pcre", 8)); (("NoGroup", 510), (0), 0, (("lib/pcre.mli", 15, 438, 440), ("lib/pcre.mli", 15, 438, 449), 0), 0, Tag1 ("Re__Pcre", 9))], 0), 1, 0, 0, 0, 0, 0, (("lib/pcre.mli", 11, 198, 198), ("lib/pcre.mli", 15, 438, 449), 0), 0, 0, 0, Tag1 ("Re__Pcre", 5)), 1, 0); (("re", 553), ((Tag1 (Tag1 ("flags"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("flag", 550)), 0, (0)), 100000000, 0, -85)], (0)), 100000000, 0, -84)], (0)), 100000000, 0, -83), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -82), (Tag3 (Tag1 (Tag1 ((Tag2 ("Re__")), "Core"), "t"), 0, (0)), 100000000, 0, -81), 0), 100000000, 0, -80), 0), 100000000, 0, -79), 0, (("lib/pcre.mli", 17, 491, 491), ("lib/pcre.mli", 17, 491, 538), 0), 0, Tag1 ("Re__Pcre", 10)), 0); (("regexp", 554), ((Tag1 (Tag1 ("flags"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("flag", 550)), 0, (0)), 100000000, 0, -78)], (0)), 100000000, 0, -77)], (0)), 100000000, 0, -76), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -75), (Tag3 ((("regexp", 549)), 0, (0)), 100000000, 0, -74), 0), 100000000, 0, -73), 0), 100000000, 0, -72), 0, (("lib/pcre.mli", 20, 607, 607), ("lib/pcre.mli", 20, 607, 658), 0), 0, Tag1 ("Re__Pcre", 11)), 0); (("extract", 555), ((Tag1 (("rex"), (Tag3 ((("regexp", 549)), 0, (0)), 100000000, 0, -71), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -70), (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -69)], (0)), 100000000, 0, -68), 0), 100000000, 0, -67), 0), 100000000, 0, -66), 0, (("lib/pcre.mli", 23, 728, 728), ("lib/pcre.mli", 23, 728, 778), 0), 0, Tag1 ("Re__Pcre", 12)), 0); (("exec", 556), ((Tag1 (("rex"), (Tag3 ((("regexp", 549)), 0, (0)), 100000000, 0, -65), (Tag1 (Tag1 ("pos"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -64)], (0)), 100000000, 0, -63), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -62), (Tag3 ((("groups", 551)), 0, (0)), 100000000, 0, -61), 0), 100000000, 0, -60), 0), 100000000, 0, -59), 0), 100000000, 0, -58), 0, (("lib/pcre.mli", 26, 859, 859), ("lib/pcre.mli", 26, 859, 912), 0), 0, Tag1 ("Re__Pcre", 13)), 0); (("get_substring", 557), ((Tag1 (0, (Tag3 ((("groups", 551)), 0, (0)), 100000000, 0, -57), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -56), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -55), 0), 100000000, 0, -54), 0), 100000000, 0, -53), 0, (("lib/pcre.mli", 29, 949, 949), ("lib/pcre.mli", 29, 949, 992), 0), 0, Tag1 ("Re__Pcre", 14)), 0); (("names", 558), ((Tag1 (0, (Tag3 ((("regexp", 549)), 0, (0)), 100000000, 0, -52), (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -51)], (0)), 100000000, 0, -50), 0), 100000000, 0, -49), 0, (("lib/pcre.mli", 32, 1034, 1034), ("lib/pcre.mli", 32, 1034, 1068), 0), 0, Tag1 ("Re__Pcre", 15)), 0); (("get_named_substring", 559), ((Tag1 (0, (Tag3 ((("regexp", 549)), 0, (0)), 100000000, 0, -48), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -47), (Tag1 (0, (Tag3 ((("groups", 551)), 0, (0)), 100000000, 0, -46), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -45), 0), 100000000, 0, -44), 0), 100000000, 0, -43), 0), 100000000, 0, -42), 0, (("lib/pcre.mli", 35, 1111, 1111), ("lib/pcre.mli", 35, 1111, 1173), 0), 0, Tag1 ("Re__Pcre", 16)), 0); (("get_substring_ofs", 560), ((Tag1 (0, (Tag3 ((("groups", 551)), 0, (0)), 100000000, 0, -41), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -40), (Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -38); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -39)]), 100000000, 0, -37), 0), 100000000, 0, -36), 0), 100000000, 0, -35), 0, (("lib/pcre.mli", 38, 1242, 1242), ("lib/pcre.mli", 38, 1242, 1292), 0), 0, Tag1 ("Re__Pcre", 17)), 0); (("pmatch", 561), ((Tag1 (("rex"), (Tag3 ((("regexp", 549)), 0, (0)), 100000000, 0, -34), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -33), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -32), 0), 100000000, 0, -31), 0), 100000000, 0, -30), 0, (("lib/pcre.mli", 41, 1337, 1337), ("lib/pcre.mli", 41, 1337, 1378), 0), 0, Tag1 ("Re__Pcre", 18)), 0); (("substitute", 562), ((Tag1 (("rex"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Re__")), "Core"), "re"), 0, (0)), 100000000, 0, -29), (Tag1 (("subst"), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -28), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -27), 0), 100000000, 0, -26), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -25), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -24), 0), 100000000, 0, -23), 0), 100000000, 0, -22), 0), 100000000, 0, -21), 0, (("lib/pcre.mli", 44, 1416, 1416), ("lib/pcre.mli", 44, 1416, 1492), 0), 0, Tag1 ("Re__Pcre", 19)), 0); (("full_split", 563), ((Tag1 (Tag1 ("max"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -20)], (0)), 100000000, 0, -19), (Tag1 (("rex"), (Tag3 ((("regexp", 549)), 0, (0)), 100000000, 0, -18), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -17), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("split_result", 552)), 0, (0)), 100000000, 0, -16)], (0)), 100000000, 0, -15), 0), 100000000, 0, -14), 0), 100000000, 0, -13), 0), 100000000, 0, -12), 0, (("lib/pcre.mli", 46, 1494, 1494), ("lib/pcre.mli", 46, 1494, 1564), 0), 0, Tag1 ("Re__Pcre", 20)), 0); (("split", 564), ((Tag1 (("rex"), (Tag3 ((("regexp", 549)), 0, (0)), 100000000, 0, -11), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -10), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -9)], (0)), 100000000, 0, -8), 0), 100000000, 0, -7), 0), 100000000, 0, -6), 0, (("lib/pcre.mli", 48, 1566, 1566), ("lib/pcre.mli", 48, 1566, 1613), 0), 0, Tag1 ("Re__Pcre", 21)), 0); (("quote", 565), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0, (("lib/pcre.mli", 50, 1615, 1615), ("lib/pcre.mli", 50, 1615, 1643), 0), 0, Tag1 ("Re__Pcre", 22)), 0); Tag1 (("substrings", 566), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Re__")), "Group"), "t"), 0, (0)), 100000000, 0, -2)), 0, 0, 0, 0, (("lib/pcre.mli", 54, 1668, 1668), ("lib/pcre.mli", 54, 1668, 1693), 0), 0, 0, 0, Tag1 ("Re__Pcre", 23)), 1, 0)], "Re__Pcre", [("Re__Pcre", ("\175\003F$\184gZ\180\151\173l\011U\207\2440")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Re__Pmark", ("\165ks<XZ[\223&\136\255\140G\016\025p")); ("Re__Group", ("\169\027s\209\158LV\024\180\151\183\186\152\145\127\240")); ("Re__Cset", ("\225r\195\178\225\254S\020 \207H\235\1795\0213")); ("Re__Core", ("u\184\236\029t\183=\150\227\183\016\196\129\199\174\130")); ("Re__Category", ("\212tx\171G\0000\176\132_\219\135_o\135\016")); ("Re__Automata", ("\228y\t\192\135)\001\027\154pU\252\\wv\141")); ("Re__", ("\0062t\168b\007\236c5\231\253,\210\160Z\n")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

type substrings = Re__.Group.t

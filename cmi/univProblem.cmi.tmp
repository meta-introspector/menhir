type t =
    ULe of Sorts.t * Sorts.t
  | UEq of Sorts.t * Sorts.t
  | ULub of Univ.Level.t * Univ.Level.t
  | UWeak of Univ.Level.t * Univ.Level.t
val is_trivial : t -> bool
val check : UGraph.t -> t -> bool
val check_eq_level : UGraph.t -> Univ.Level.t -> Univ.Level.t -> bool
module Set :
  sig
    type elt = t
    type t
    val empty : t
    val add : elt -> t -> t
    val singleton : elt -> t
    val remove : elt -> t -> t
    val union : t -> t -> t
    val inter : t -> t -> t
    val disjoint : t -> t -> bool
    val diff : t -> t -> t
    val cardinal : t -> int
    val elements : t -> elt list
    val min_elt : t -> elt
    val min_elt_opt : t -> elt option
    val max_elt : t -> elt
    val max_elt_opt : t -> elt option
    val choose : t -> elt
    val choose_opt : t -> elt option
    val find : elt -> t -> elt
    val find_opt : elt -> t -> elt option
    val find_first : (elt -> bool) -> t -> elt
    val find_first_opt : (elt -> bool) -> t -> elt option
    val find_last : (elt -> bool) -> t -> elt
    val find_last_opt : (elt -> bool) -> t -> elt option
    val iter : (elt -> unit) -> t -> unit
    val fold : (elt -> 'acc -> 'acc) -> t -> 'acc -> 'acc
    val map : (elt -> elt) -> t -> t
    val filter : (elt -> bool) -> t -> t
    val filter_map : (elt -> elt option) -> t -> t
    val partition : (elt -> bool) -> t -> t * t
    val split : elt -> t -> t * bool * t
    val is_empty : t -> bool
    val mem : elt -> t -> bool
    val equal : t -> t -> bool
    val compare : t -> t -> int
    val subset : t -> t -> bool
    val for_all : (elt -> bool) -> t -> bool
    val exists : (elt -> bool) -> t -> bool
    val to_list : t -> elt list
    val of_list : elt list -> t
    val to_seq_from : elt -> t -> elt Seq.t
    val to_seq : t -> elt Seq.t
    val to_rev_seq : t -> elt Seq.t
    val add_seq : elt Seq.t -> t -> t
    val of_seq : elt Seq.t -> t
    val pr : t -> Pp.t
    val force : t -> t
    val check : UGraph.t -> t -> bool
  end
type 'a constraint_function = 'a -> 'a -> Set.t -> Set.t
("DEBUG:rule", [Tag1 (("t", 765), (0, 0, Tag1 ([(("ULe", 326), ([(Tag3 (Tag1 ((Tag2 ("Sorts")), "t"), 0, (0)), 100000000, 0, -27); (Tag3 (Tag1 ((Tag2 ("Sorts")), "t"), 0, (0)), 100000000, 0, -28)]), 0, (("engine/univProblem.mli", 23, 1034, 1036), ("engine/univProblem.mli", 23, 1034, 1062), 0), 0, Tag1 ("UnivProblem", 1)); (("UEq", 359), ([(Tag3 (Tag1 ((Tag2 ("Sorts")), "t"), 0, (0)), 100000000, 0, -29); (Tag3 (Tag1 ((Tag2 ("Sorts")), "t"), 0, (0)), 100000000, 0, -30)]), 0, (("engine/univProblem.mli", 24, 1063, 1065), ("engine/univProblem.mli", 24, 1063, 1091), 0), 0, Tag1 ("UnivProblem", 2)); (("ULub", 360), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Level"), "t"), 0, (0)), 100000000, 0, -31); (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Level"), "t"), 0, (0)), 100000000, 0, -32)]), 0, (("engine/univProblem.mli", 25, 1092, 1094), ("engine/univProblem.mli", 25, 1092, 1121), 0), 0, Tag1 ("UnivProblem", 3)); (("UWeak", 376), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Level"), "t"), 0, (0)), 100000000, 0, -33); (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Level"), "t"), 0, (0)), 100000000, 0, -34)]), 0, (("engine/univProblem.mli", 26, 1122, 1124), ("engine/univProblem.mli", 26, 1122, 1152), 0), 0, Tag1 ("UnivProblem", 4))], 0), 1, 0, 0, 0, 0, 0, (("engine/univProblem.mli", 22, 1025, 1025), ("engine/univProblem.mli", 26, 1122, 1152), 0), 0, 0, 0, Tag1 ("UnivProblem", 0)), 1, 0); (("is_trivial", 766), ((Tag1 (0, (Tag3 ((("t", 765)), 0, (0)), 100000000, 0, -26), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -25), 0), 100000000, 0, -24), 0, (("engine/univProblem.mli", 28, 1154, 1154), ("engine/univProblem.mli", 28, 1154, 1180), 0), 0, Tag1 ("UnivProblem", 5)), 0); (("check", 767), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("UGraph")), "t"), 0, (0)), 100000000, 0, -23), (Tag1 (0, (Tag3 ((("t", 765)), 0, (0)), 100000000, 0, -22), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -21), 0), 100000000, 0, -20), 0), 100000000, 0, -19), 0, (("engine/univProblem.mli", 30, 1182, 1182), ("engine/univProblem.mli", 30, 1182, 1215), 0), 0, Tag1 ("UnivProblem", 6)), 0); (("check_eq_level", 768), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("UGraph")), "t"), 0, (0)), 100000000, 0, -18), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Level"), "t"), 0, (0)), 100000000, 0, -17), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Level"), "t"), 0, (0)), 100000000, 0, -16), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -15), 0), 100000000, 0, -14), 0), 100000000, 0, -13), 0), 100000000, 0, -12), 0, (("engine/univProblem.mli", 33, 1274, 1274), ("engine/univProblem.mli", 33, 1274, 1333), 0), 0, Tag1 ("UnivProblem", 7)), 0); Tag3 (("Set", 769), 0, (Tag1 ([Tag1 (("elt", 772), (0, 0, 0, 1, ((Tag3 ((("t", 765)), 0, (0)), 100000000, 0, -272)), 0, 0, 0, 0, (("engine/univProblem.mli", 36, 1352, 1373), ("engine/univProblem.mli", 36, 1352, 1385), 0), 0, 0, 0, Tag1 ("UnivProblem", 8)), 1, 0); Tag1 (("t", 773), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("set.mli", 74, 2901, 2905), ("set.mli", 74, 2901, 2911), 0), 0, 0, 0, Tag1 ("Stdlib__Set", 4)), 1, 0); (("empty", 774), ((Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -271), 0, (("set.mli", 77, 2942, 2946), ("set.mli", 77, 2942, 2958), 0), 0, Tag1 ("Stdlib__Set", 5)), 0); (("add", 775), ((Tag1 (0, (Tag3 ((("elt", 772)), 0, (0)), 100000000, 0, -270), (Tag1 (0, (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -269), (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -268), 0), 100000000, 0, -267), 0), 100000000, 0, -266), 0, (("set.mli", 80, 2986, 2990), ("set.mli", 80, 2986, 3012), 0), 0, Tag1 ("Stdlib__Set", 6)), 0); (("singleton", 776), ((Tag1 (0, (Tag3 ((("elt", 772)), 0, (0)), 100000000, 0, -265), (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -264), 0), 100000000, 0, -263), 0, (("set.mli", 86, 3278, 3282), ("set.mli", 86, 3278, 3305), 0), 0, Tag1 ("Stdlib__Set", 7)), 0); (("remove", 777), ((Tag1 (0, (Tag3 ((("elt", 772)), 0, (0)), 100000000, 0, -262), (Tag1 (0, (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -261), (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -260), 0), 100000000, 0, -259), 0), 100000000, 0, -258), 0, (("set.mli", 89, 3381, 3385), ("set.mli", 89, 3381, 3410), 0), 0, Tag1 ("Stdlib__Set", 8)), 0); (("union", 778), ((Tag1 (0, (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -257), (Tag1 (0, (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -256), (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -255), 0), 100000000, 0, -254), 0), 100000000, 0, -253), 0, (("set.mli", 95, 3677, 3681), ("set.mli", 95, 3677, 3703), 0), 0, Tag1 ("Stdlib__Set", 9)), 0); (("inter", 779), ((Tag1 (0, (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -252), (Tag1 (0, (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -251), (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -250), 0), 100000000, 0, -249), 0), 100000000, 0, -248), 0, (("set.mli", 98, 3727, 3731), ("set.mli", 98, 3727, 3753), 0), 0, Tag1 ("Stdlib__Set", 10)), 0); (("disjoint", 780), ((Tag1 (0, (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -247), (Tag1 (0, (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -246), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -245), 0), 100000000, 0, -244), 0), 100000000, 0, -243), 0, (("set.mli", 101, 3784, 3788), ("set.mli", 101, 3784, 3816), 0), 0, Tag1 ("Stdlib__Set", 11)), 0); (("diff", 781), ((Tag1 (0, (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -242), (Tag1 (0, (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -241), (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -240), 0), 100000000, 0, -239), 0), 100000000, 0, -238), 0, (("set.mli", 105, 3880, 3884), ("set.mli", 105, 3880, 3905), 0), 0, Tag1 ("Stdlib__Set", 12)), 0); (("cardinal", 782), ((Tag1 (0, (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -237), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -236), 0), 100000000, 0, -235), 0, (("set.mli", 109, 4007, 4011), ("set.mli", 109, 4007, 4033), 0), 0, Tag1 ("Stdlib__Set", 13)), 0); (("elements", 783), ((Tag1 (0, (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -234), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 772)), 0, (0)), 100000000, 0, -233)], (0)), 100000000, 0, -232), 0), 100000000, 0, -231), 0, (("set.mli", 114, 4120, 4124), ("set.mli", 114, 4120, 4151), 0), 0, Tag1 ("Stdlib__Set", 14)), 0); (("min_elt", 784), ((Tag1 (0, (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -230), (Tag3 ((("elt", 772)), 0, (0)), 100000000, 0, -229), 0), 100000000, 0, -228), 0, (("set.mli", 120, 4380, 4384), ("set.mli", 120, 4380, 4405), 0), 0, Tag1 ("Stdlib__Set", 15)), 0); (("min_elt_opt", 785), ((Tag1 (0, (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -227), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 772)), 0, (0)), 100000000, 0, -226)], (0)), 100000000, 0, -225), 0), 100000000, 0, -224), 0, (("set.mli", 125, 4567, 4571), ("set.mli", 125, 4567, 4603), 0), 0, Tag1 ("Stdlib__Set", 16)), 0); (("max_elt", 786), ((Tag1 (0, (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -223), (Tag3 ((("elt", 772)), 0, (0)), 100000000, 0, -222), 0), 100000000, 0, -221), 0, (("set.mli", 131, 4774, 4778), ("set.mli", 131, 4774, 4799), 0), 0, Tag1 ("Stdlib__Set", 17)), 0); (("max_elt_opt", 787), ((Tag1 (0, (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -220), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 772)), 0, (0)), 100000000, 0, -219)], (0)), 100000000, 0, -218), 0), 100000000, 0, -217), 0, (("set.mli", 135, 4890, 4894), ("set.mli", 135, 4890, 4926), 0), 0, Tag1 ("Stdlib__Set", 18)), 0); (("choose", 788), ((Tag1 (0, (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -216), (Tag3 ((("elt", 772)), 0, (0)), 100000000, 0, -215), 0), 100000000, 0, -214), 0, (("set.mli", 140, 5041, 5045), ("set.mli", 140, 5041, 5065), 0), 0, Tag1 ("Stdlib__Set", 19)), 0); (("choose_opt", 789), ((Tag1 (0, (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -213), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 772)), 0, (0)), 100000000, 0, -212)], (0)), 100000000, 0, -211), 0), 100000000, 0, -210), 0, (("set.mli", 145, 5263, 5267), ("set.mli", 145, 5263, 5298), 0), 0, Tag1 ("Stdlib__Set", 20)), 0); (("find", 790), ((Tag1 (0, (Tag3 ((("elt", 772)), 0, (0)), 100000000, 0, -209), (Tag1 (0, (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -208), (Tag3 ((("elt", 772)), 0, (0)), 100000000, 0, -207), 0), 100000000, 0, -206), 0), 100000000, 0, -205), 0, (("set.mli", 153, 5541, 5549), ("set.mli", 153, 5541, 5574), 0), 0, Tag1 ("Stdlib__Set", 21)), 0); (("find_opt", 791), ((Tag1 (0, (Tag3 ((("elt", 772)), 0, (0)), 100000000, 0, -204), (Tag1 (0, (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -203), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 772)), 0, (0)), 100000000, 0, -202)], (0)), 100000000, 0, -201), 0), 100000000, 0, -200), 0), 100000000, 0, -199), 0, (("set.mli", 159, 5752, 5756), ("set.mli", 159, 5752, 5792), 0), 0, Tag1 ("Stdlib__Set", 22)), 0); (("find_first", 792), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 772)), 0, (0)), 100000000, 0, -198), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -197), 0), 100000000, 0, -196), (Tag1 (0, (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -195), (Tag3 ((("elt", 772)), 0, (0)), 100000000, 0, -194), 0), 100000000, 0, -193), 0), 100000000, 0, -192), 0, (("set.mli", 165, 5963, 5967), ("set.mli", 165, 5963, 6008), 0), 0, Tag1 ("Stdlib__Set", 23)), 0); (("find_first_opt", 793), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 772)), 0, (0)), 100000000, 0, -191), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -190), 0), 100000000, 0, -189), (Tag1 (0, (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -188), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 772)), 0, (0)), 100000000, 0, -187)], (0)), 100000000, 0, -186), 0), 100000000, 0, -185), 0), 100000000, 0, -184), 0, (("set.mli", 177, 6482, 6486), ("set.mli", 177, 6482, 6538), 0), 0, Tag1 ("Stdlib__Set", 24)), 0); (("find_last", 794), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 772)), 0, (0)), 100000000, 0, -183), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -182), 0), 100000000, 0, -181), (Tag1 (0, (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -180), (Tag3 ((("elt", 772)), 0, (0)), 100000000, 0, -179), 0), 100000000, 0, -178), 0), 100000000, 0, -177), 0, (("set.mli", 184, 6779, 6783), ("set.mli", 184, 6779, 6823), 0), 0, Tag1 ("Stdlib__Set", 25)), 0); (("find_last_opt", 795), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 772)), 0, (0)), 100000000, 0, -176), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -175), 0), 100000000, 0, -174), (Tag1 (0, (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -173), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 772)), 0, (0)), 100000000, 0, -172)], (0)), 100000000, 0, -171), 0), 100000000, 0, -170), 0), 100000000, 0, -169), 0, (("set.mli", 190, 7044, 7048), ("set.mli", 190, 7044, 7099), 0), 0, Tag1 ("Stdlib__Set", 26)), 0); (("iter", 796), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 772)), 0, (0)), 100000000, 0, -168), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -167), 0), 100000000, 0, -166), (Tag1 (0, (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -165), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -164), 0), 100000000, 0, -163), 0), 100000000, 0, -162), 0, (("set.mli", 198, 7371, 7375), ("set.mli", 198, 7371, 7411), 0), 0, Tag1 ("Stdlib__Set", 27)), 0); (("fold", 797), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 772)), 0, (0)), 100000000, 0, -161), (Tag1 (0, ((("acc")), 100000000, 0, -157), ((("acc")), 100000000, 0, -157), 0), 100000000, 0, -160), 0), 100000000, 0, -159), (Tag1 (0, (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -158), (Tag1 (0, ((("acc")), 100000000, 0, -157), ((("acc")), 100000000, 0, -157), 0), 100000000, 0, -156), 0), 100000000, 0, -155), 0), 100000000, 0, -154), 0, (("set.mli", 203, 7616, 7620), ("set.mli", 203, 7616, 7672), 0), 0, Tag1 ("Stdlib__Set", 28)), 0); (("map", 798), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 772)), 0, (0)), 100000000, 0, -153), (Tag3 ((("elt", 772)), 0, (0)), 100000000, 0, -152), 0), 100000000, 0, -151), (Tag1 (0, (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -150), (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -149), 0), 100000000, 0, -148), 0), 100000000, 0, -147), 0, (("set.mli", 209, 7860, 7864), ("set.mli", 209, 7860, 7895), 0), 0, Tag1 ("Stdlib__Set", 29)), 0); (("filter", 799), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 772)), 0, (0)), 100000000, 0, -146), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -145), 0), 100000000, 0, -144), (Tag1 (0, (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -143), (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -142), 0), 100000000, 0, -141), 0), 100000000, 0, -140), 0, (("set.mli", 221, 8372, 8376), ("set.mli", 221, 8372, 8411), 0), 0, Tag1 ("Stdlib__Set", 30)), 0); (("filter_map", 800), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 772)), 0, (0)), 100000000, 0, -139), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 772)), 0, (0)), 100000000, 0, -138)], (0)), 100000000, 0, -137), 0), 100000000, 0, -136), (Tag1 (0, (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -135), (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -134), 0), 100000000, 0, -133), 0), 100000000, 0, -132), 0, (("set.mli", 228, 8710, 8714), ("set.mli", 228, 8710, 8759), 0), 0, Tag1 ("Stdlib__Set", 31)), 0); (("partition", 801), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 772)), 0, (0)), 100000000, 0, -131), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -130), 0), 100000000, 0, -129), (Tag1 (0, (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -128), (Tag2 ([(Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -126); (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -127)]), 100000000, 0, -125), 0), 100000000, 0, -124), 0), 100000000, 0, -123), 0, (("set.mli", 243, 9275, 9279), ("set.mli", 243, 9275, 9321), 0), 0, Tag1 ("Stdlib__Set", 32)), 0); (("split", 802), ((Tag1 (0, (Tag3 ((("elt", 772)), 0, (0)), 100000000, 0, -122), (Tag1 (0, (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -121), (Tag2 ([(Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -118); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -119); (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -120)]), 100000000, 0, -117), 0), 100000000, 0, -116), 0), 100000000, 0, -115), 0, (("set.mli", 249, 9562, 9566), ("set.mli", 249, 9562, 9601), 0), 0, Tag1 ("Stdlib__Set", 33)), 0); (("is_empty", 803), ((Tag1 (0, (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -114), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -113), 0), 100000000, 0, -112), 0, (("set.mli", 260, 10020, 10024), ("set.mli", 260, 10020, 10047), 0), 0, Tag1 ("Stdlib__Set", 34)), 0); (("mem", 804), ((Tag1 (0, (Tag3 ((("elt", 772)), 0, (0)), 100000000, 0, -111), (Tag1 (0, (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -110), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -109), 0), 100000000, 0, -108), 0), 100000000, 0, -107), 0, (("set.mli", 263, 10096, 10100), ("set.mli", 263, 10096, 10125), 0), 0, Tag1 ("Stdlib__Set", 35)), 0); (("equal", 805), ((Tag1 (0, (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -106), (Tag1 (0, (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -105), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -104), 0), 100000000, 0, -103), 0), 100000000, 0, -102), 0, (("set.mli", 266, 10190, 10194), ("set.mli", 266, 10190, 10219), 0), 0, Tag1 ("Stdlib__Set", 36)), 0); (("compare", 806), ((Tag1 (0, (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -101), (Tag1 (0, (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -100), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -99), 0), 100000000, 0, -98), 0), 100000000, 0, -97), 0, (("set.mli", 270, 10335, 10339), ("set.mli", 270, 10335, 10365), 0), 0, Tag1 ("Stdlib__Set", 37)), 0); (("subset", 807), ((Tag1 (0, (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -96), (Tag1 (0, (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -95), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -94), 0), 100000000, 0, -93), 0), 100000000, 0, -92), 0, (("set.mli", 274, 10476, 10480), ("set.mli", 274, 10476, 10506), 0), 0, Tag1 ("Stdlib__Set", 38)), 0); (("for_all", 808), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 772)), 0, (0)), 100000000, 0, -91), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -90), 0), 100000000, 0, -89), (Tag1 (0, (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -88), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -87), 0), 100000000, 0, -86), 0), 100000000, 0, -85), 0, (("set.mli", 278, 10598, 10602), ("set.mli", 278, 10598, 10641), 0), 0, Tag1 ("Stdlib__Set", 39)), 0); (("exists", 809), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 772)), 0, (0)), 100000000, 0, -84), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -83), 0), 100000000, 0, -82), (Tag1 (0, (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -81), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -80), 0), 100000000, 0, -79), 0), 100000000, 0, -78), 0, (("set.mli", 282, 10737, 10741), ("set.mli", 282, 10737, 10779), 0), 0, Tag1 ("Stdlib__Set", 40)), 0); (("to_list", 810), ((Tag1 (0, (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -77), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 772)), 0, (0)), 100000000, 0, -76)], (0)), 100000000, 0, -75), 0), 100000000, 0, -74), 0, (("set.mli", 288, 10922, 10926), ("set.mli", 288, 10922, 10953), 0), 0, Tag1 ("Stdlib__Set", 41)), 0); (("of_list", 811), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 772)), 0, (0)), 100000000, 0, -73)], (0)), 100000000, 0, -72), (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -71), 0), 100000000, 0, -70), 0, (("set.mli", 292, 11017, 11021), ("set.mli", 292, 11017, 11047), 0), 0, Tag1 ("Stdlib__Set", 42)), 0); (("to_seq_from", 812), ((Tag1 (0, (Tag3 ((("elt", 772)), 0, (0)), 100000000, 0, -69), (Tag1 (0, (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -68), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 772)), 0, (0)), 100000000, 0, -67)], (0)), 100000000, 0, -66), 0), 100000000, 0, -65), 0), 100000000, 0, -64), 0, (("set.mli", 298, 11268, 11272), ("set.mli", 298, 11268, 11311), 0), 0, Tag1 ("Stdlib__Set", 43)), 0); (("to_seq", 813), ((Tag1 (0, (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -63), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 772)), 0, (0)), 100000000, 0, -62)], (0)), 100000000, 0, -61), 0), 100000000, 0, -60), 0, (("set.mli", 303, 11453, 11457), ("set.mli", 303, 11453, 11484), 0), 0, Tag1 ("Stdlib__Set", 44)), 0); (("to_rev_seq", 814), ((Tag1 (0, (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -59), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 772)), 0, (0)), 100000000, 0, -58)], (0)), 100000000, 0, -57), 0), 100000000, 0, -56), 0, (("set.mli", 307, 11562, 11566), ("set.mli", 307, 11562, 11597), 0), 0, Tag1 ("Stdlib__Set", 45)), 0); (("add_seq", 815), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 772)), 0, (0)), 100000000, 0, -55)], (0)), 100000000, 0, -54), (Tag1 (0, (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -53), (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -52), 0), 100000000, 0, -51), 0), 100000000, 0, -50), 0, (("set.mli", 311, 11676, 11680), ("set.mli", 311, 11676, 11713), 0), 0, Tag1 ("Stdlib__Set", 46)), 0); (("of_seq", 816), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 772)), 0, (0)), 100000000, 0, -49)], (0)), 100000000, 0, -48), (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -47), 0), 100000000, 0, -46), 0, (("set.mli", 315, 11791, 11795), ("set.mli", 315, 11791, 11822), 0), 0, Tag1 ("Stdlib__Set", 47)), 0); (("pr", 817), ((Tag1 (0, (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -45), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -44), 0), 100000000, 0, -43), 0, (("engine/univProblem.mli", 38, 1387, 1389), ("engine/univProblem.mli", 38, 1387, 1407), 0), 0, Tag1 ("UnivProblem", 9)), 0); (("force", 818), ((Tag1 (0, (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -42), (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -41), 0), 100000000, 0, -40), 0, (("engine/univProblem.mli", 41, 1450, 1452), ("engine/univProblem.mli", 41, 1450, 1470), 0), 0, Tag1 ("UnivProblem", 10)), 0); (("check", 819), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("UGraph")), "t"), 0, (0)), 100000000, 0, -39), (Tag1 (0, (Tag3 ((("t", 773)), 0, (0)), 100000000, 0, -38), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -37), 0), 100000000, 0, -36), 0), 100000000, 0, -35), 0, (("engine/univProblem.mli", 43, 1472, 1474), ("engine/univProblem.mli", 43, 1472, 1507), 0), 0, Tag1 ("UnivProblem", 11)), 0)]), 0, (("engine/univProblem.mli", 35, 1335, 1335), ("engine/univProblem.mli", 44, 1508, 1511), 0), Tag1 ("UnivProblem", 12)), 0, 0); Tag1 (("constraint_function", 770), ([((("a")), 100000000, 0, -11)], 1, 0, 1, ((Tag1 (0, ((("a")), 100000000, 0, -11), (Tag1 (0, ((("a")), 100000000, 0, -11), (Tag1 (0, (Tag3 (Tag1 ((("Set", 769)), "t"), 0, (0)), 100000000, 0, -10), (Tag3 (Tag1 ((("Set", 769)), "t"), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0), 100000000, 0, -7), 0), 100000000, 0, -6)), [46], [0], 0, 0, (("engine/univProblem.mli", 46, 1513, 1513), ("engine/univProblem.mli", 46, 1513, 1569), 0), 0, 0, 0, Tag1 ("UnivProblem", 13)), 1, 0); (("enforce_eq_instances_univs", 771), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -5), (Tag3 ((("constraint_function", 770)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Instance"), "t"), 0, (0)), 100000000, 0, -4)], (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("engine/univProblem.mli", 48, 1571, 1571), ("engine/univProblem.mli", 48, 1571, 1642), 0), 0, Tag1 ("UnivProblem", 14)), 0)], "UnivProblem", [("UnivProblem", ("6'\161\018\181\001.\253\000\141a6\171\1727\155")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])
val enforce_eq_instances_univs : bool -> Univ.Instance.t constraint_function

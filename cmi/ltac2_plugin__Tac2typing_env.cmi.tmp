module TVar :
  sig
    type t
    val equal : t -> t -> bool
    module Map :
      sig
        type key = t
        type +'a t
        val empty : 'a t
        val is_empty : 'a t -> bool
        val mem : key -> 'a t -> bool
        val add : key -> 'a -> 'a t -> 'a t
        val update : key -> ('a option -> 'a option) -> 'a t -> 'a t
        val singleton : key -> 'a -> 'a t
        val remove : key -> 'a t -> 'a t
        val merge :
          (key -> 'a option -> 'b option -> 'c option) ->
          'a t -> 'b t -> 'c t
        val union : (key -> 'a -> 'a -> 'a option) -> 'a t -> 'a t -> 'a t
        val compare : ('a -> 'a -> int) -> 'a t -> 'a t -> int
        val equal : ('a -> 'a -> bool) -> 'a t -> 'a t -> bool
        val iter : (key -> 'a -> unit) -> 'a t -> unit
        val fold : (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b
        val for_all : (key -> 'a -> bool) -> 'a t -> bool
        val exists : (key -> 'a -> bool) -> 'a t -> bool
        val filter : (key -> 'a -> bool) -> 'a t -> 'a t
        val partition : (key -> 'a -> bool) -> 'a t -> 'a t * 'a t
        val cardinal : 'a t -> int
        val bindings : 'a t -> (key * 'a) list
        val min_binding : 'a t -> key * 'a
        val max_binding : 'a t -> key * 'a
        val choose : 'a t -> key * 'a
        val choose_opt : 'a t -> (key * 'a) option
        val split : key -> 'a t -> 'a t * 'a option * 'a t
        val find : key -> 'a t -> 'a
        val find_opt : key -> 'a t -> 'a option
        val map : ('a -> 'b) -> 'a t -> 'b t
        val mapi : (key -> 'a -> 'b) -> 'a t -> 'b t
      end
  end
type t
val empty_env : ?strict:bool -> unit -> t
val set_rec : (Names.KerName.t * int) Names.Id.Map.t -> t -> t
val reject_unbound_tvar : t -> t
val env_strict : t -> bool
val env_name : t -> TVar.t -> string
val fresh_id : t -> TVar.t
val get_alias : Names.lident -> t -> TVar.t
val find_rec_var : Names.Id.t -> t -> (Names.KerName.t * int) option
type mix_var = GVar of TVar.t | LVar of int
type mix_type_scheme = int * mix_var Ltac2_plugin.Tac2expr.glb_typexpr
val mem_var : Names.Id.t -> t -> bool
val find_var : Names.Id.t -> t -> mix_type_scheme
val bound_vars : t -> Names.Id.Set.t
val get_variable0 :
  (Names.Id.t -> bool) ->
  Ltac2_plugin.Tac2expr.tacref Ltac2_plugin.Tac2expr.or_relid ->
  Ltac2_plugin.Tac2expr.tacref Locus.or_var
val get_variable :
  t ->
  Ltac2_plugin.Tac2expr.tacref Ltac2_plugin.Tac2expr.or_relid ->
  Ltac2_plugin.Tac2expr.tacref Locus.or_var
val kind :
  t ->
  TVar.t Ltac2_plugin.Tac2expr.glb_typexpr ->
  TVar.t Ltac2_plugin.Tac2expr.glb_typexpr
val pr_glbtype : t -> TVar.t Ltac2_plugin.Tac2expr.glb_typexpr -> Pp.t
val eq_or_tuple :
  ('a -> 'b -> bool) ->
  'a Ltac2_plugin.Tac2expr.or_tuple ->
  'b Ltac2_plugin.Tac2expr.or_tuple -> bool
exception CannotUnify of TVar.t Ltac2_plugin.Tac2expr.glb_typexpr *
            TVar.t Ltac2_plugin.Tac2expr.glb_typexpr
val unify0 :
  t ->
  TVar.t Ltac2_plugin.Tac2expr.glb_typexpr ->
  TVar.t Ltac2_plugin.Tac2expr.glb_typexpr -> unit
val unify :
  ?loc:Loc.t ->
  t ->
  TVar.t Ltac2_plugin.Tac2expr.glb_typexpr ->
  TVar.t Ltac2_plugin.Tac2expr.glb_typexpr -> unit
val unify_arrow :
  ?loc:Loc.t ->
  t ->
  TVar.t Ltac2_plugin.Tac2expr.glb_typexpr ->
  (Loc.t option * TVar.t Ltac2_plugin.Tac2expr.glb_typexpr) list ->
  TVar.t Ltac2_plugin.Tac2expr.glb_typexpr
val abstract_var :
  t -> TVar.t Ltac2_plugin.Tac2expr.glb_typexpr -> mix_type_scheme
val monomorphic : TVar.t Ltac2_plugin.Tac2expr.glb_typexpr -> mix_type_scheme
val polymorphic : Ltac2_plugin.Tac2expr.type_scheme -> mix_type_scheme
val push_name : Names.Name.t -> mix_type_scheme -> t -> t
val push_ids : mix_type_scheme Names.Id.Map.t -> t -> t
val subst_type :
  ('a -> 'b Ltac2_plugin.Tac2expr.glb_typexpr) ->
  'a Ltac2_plugin.Tac2expr.glb_typexpr ->
  'b Ltac2_plugin.Tac2expr.glb_typexpr
val normalize :
  t ->
  int ref * int Ltac2_plugin.Tac2expr.glb_typexpr TVar.Map.t ref ->
  TVar.t Ltac2_plugin.Tac2expr.glb_typexpr ->
  ("DEBUG:rule", [Tag3 (("TVar", 814), 0, (Tag1 ([Tag1 (("t", 845), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("plugins/ltac2/tac2typing_env.mli", 15, 720, 722), ("plugins/ltac2/tac2typing_env.mli", 15, 720, 728), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2typing_env", 0)), 1, 0); (("equal", 846), ((Tag1 (0, (Tag3 ((("t", 845)), 0, (0)), 100000000, 0, -197), (Tag1 (0, (Tag3 ((("t", 845)), 0, (0)), 100000000, 0, -196), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -195), 0), 100000000, 0, -194), 0), 100000000, 0, -193), 0, (("plugins/ltac2/tac2typing_env.mli", 17, 730, 732), ("plugins/ltac2/tac2typing_env.mli", 17, 730, 758), 0), 0, Tag1 ("Ltac2_plugin__Tac2typing_env", 1)), 0); Tag3 (("Map", 847), 0, (Tag1 ([Tag1 (("key", 848), (0, 0, 0, 1, ((Tag3 ((("t", 845)), 0, (0)), 100000000, 0, -411)), 0, 0, 0, 0, (("plugins/ltac2/tac2typing_env.mli", 19, 760, 790), ("plugins/ltac2/tac2typing_env.mli", 19, 760, 802), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2typing_env", 2)), 1, 0); Tag1 (("t", 849), ([((("a")), 100000000, 0, -410)], 1, 0, 1, 0, [1], [2], 0, 0, (("clib/cSig.mli", 56, 1893, 1897), ("clib/cSig.mli", 56, 1893, 1909), 0), 0, 0, 0, Tag1 ("CSig", 36)), 1, 0); (("empty", 850), ((Tag3 ((("t", 849)), [((("a")), 100000000, 0, -409)], (0)), 100000000, 0, -408), 0, (("clib/cSig.mli", 57, 1910, 1914), ("clib/cSig.mli", 57, 1910, 1929), 0), 0, Tag1 ("CSig", 37)), 0); (("is_empty", 851), ((Tag1 (0, (Tag3 ((("t", 849)), [((("a")), 100000000, 0, -407)], (0)), 100000000, 0, -406), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -405), 0), 100000000, 0, -404), 0, (("clib/cSig.mli", 58, 1930, 1934), ("clib/cSig.mli", 58, 1930, 1960), 0), 0, Tag1 ("CSig", 38)), 0); (("mem", 852), ((Tag1 (0, (Tag3 ((("key", 848)), 0, (0)), 100000000, 0, -403), (Tag1 (0, (Tag3 ((("t", 849)), [((("a")), 100000000, 0, -402)], (0)), 100000000, 0, -401), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -400), 0), 100000000, 0, -399), 0), 100000000, 0, -398), 0, (("clib/cSig.mli", 59, 1961, 1965), ("clib/cSig.mli", 59, 1961, 1993), 0), 0, Tag1 ("CSig", 39)), 0); (("add", 853), ((Tag1 (0, (Tag3 ((("key", 848)), 0, (0)), 100000000, 0, -397), (Tag1 (0, ((("a")), 100000000, 0, -395), (Tag1 (0, (Tag3 ((("t", 849)), [((("a")), 100000000, 0, -395)], (0)), 100000000, 0, -396), (Tag3 ((("t", 849)), [((("a")), 100000000, 0, -395)], (0)), 100000000, 0, -394), 0), 100000000, 0, -393), 0), 100000000, 0, -392), 0), 100000000, 0, -391), 0, (("clib/cSig.mli", 60, 1994, 1998), ("clib/cSig.mli", 60, 1994, 2032), 0), 0, Tag1 ("CSig", 40)), 0); (("update", 854), ((Tag1 (0, (Tag3 ((("key", 848)), 0, (0)), 100000000, 0, -390), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -385)], (0)), 100000000, 0, -389), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -385)], (0)), 100000000, 0, -388), 0), 100000000, 0, -387), (Tag1 (0, (Tag3 ((("t", 849)), [((("a")), 100000000, 0, -385)], (0)), 100000000, 0, -386), (Tag3 ((("t", 849)), [((("a")), 100000000, 0, -385)], (0)), 100000000, 0, -384), 0), 100000000, 0, -383), 0), 100000000, 0, -382), 0), 100000000, 0, -381), 0, (("clib/cSig.mli", 61, 2033, 2037), ("clib/cSig.mli", 61, 2033, 2097), 0), 0, Tag1 ("CSig", 41)), 0); (("singleton", 855), ((Tag1 (0, (Tag3 ((("key", 848)), 0, (0)), 100000000, 0, -380), (Tag1 (0, ((("a")), 100000000, 0, -379), (Tag3 ((("t", 849)), [((("a")), 100000000, 0, -379)], (0)), 100000000, 0, -378), 0), 100000000, 0, -377), 0), 100000000, 0, -376), 0, (("clib/cSig.mli", 62, 2098, 2102), ("clib/cSig.mli", 62, 2098, 2134), 0), 0, Tag1 ("CSig", 42)), 0); (("remove", 856), ((Tag1 (0, (Tag3 ((("key", 848)), 0, (0)), 100000000, 0, -375), (Tag1 (0, (Tag3 ((("t", 849)), [((("a")), 100000000, 0, -373)], (0)), 100000000, 0, -374), (Tag3 ((("t", 849)), [((("a")), 100000000, 0, -373)], (0)), 100000000, 0, -372), 0), 100000000, 0, -371), 0), 100000000, 0, -370), 0, (("clib/cSig.mli", 63, 2135, 2139), ("clib/cSig.mli", 63, 2135, 2170), 0), 0, Tag1 ("CSig", 43)), 0); (("merge", 857), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 848)), 0, (0)), 100000000, 0, -369), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -362)], (0)), 100000000, 0, -368), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("b")), 100000000, 0, -360)], (0)), 100000000, 0, -367), (Tag3 ((Tag3 ("option", 10)), [((("c")), 100000000, 0, -358)], (0)), 100000000, 0, -366), 0), 100000000, 0, -365), 0), 100000000, 0, -364), 0), 100000000, 0, -363), (Tag1 (0, (Tag3 ((("t", 849)), [((("a")), 100000000, 0, -362)], (0)), 100000000, 0, -361), (Tag1 (0, (Tag3 ((("t", 849)), [((("b")), 100000000, 0, -360)], (0)), 100000000, 0, -359), (Tag3 ((("t", 849)), [((("c")), 100000000, 0, -358)], (0)), 100000000, 0, -357), 0), 100000000, 0, -356), 0), 100000000, 0, -355), 0), 100000000, 0, -354), 0, (("clib/cSig.mli", 64, 2171, 2175), ("clib/cSig.mli", 65, 2186, 2263), 0), 0, Tag1 ("CSig", 44)), 0); (("union", 858), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 848)), 0, (0)), 100000000, 0, -353), (Tag1 (0, ((("a")), 100000000, 0, -346), (Tag1 (0, ((("a")), 100000000, 0, -346), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -346)], (0)), 100000000, 0, -352), 0), 100000000, 0, -351), 0), 100000000, 0, -350), 0), 100000000, 0, -349), (Tag1 (0, (Tag3 ((("t", 849)), [((("a")), 100000000, 0, -346)], (0)), 100000000, 0, -348), (Tag1 (0, (Tag3 ((("t", 849)), [((("a")), 100000000, 0, -346)], (0)), 100000000, 0, -347), (Tag3 ((("t", 849)), [((("a")), 100000000, 0, -346)], (0)), 100000000, 0, -345), 0), 100000000, 0, -344), 0), 100000000, 0, -343), 0), 100000000, 0, -342), 0, (("clib/cSig.mli", 66, 2264, 2268), ("clib/cSig.mli", 67, 2279, 2339), 0), 0, Tag1 ("CSig", 45)), 0); (("compare", 859), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -337), (Tag1 (0, ((("a")), 100000000, 0, -337), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -341), 0), 100000000, 0, -340), 0), 100000000, 0, -339), (Tag1 (0, (Tag3 ((("t", 849)), [((("a")), 100000000, 0, -337)], (0)), 100000000, 0, -338), (Tag1 (0, (Tag3 ((("t", 849)), [((("a")), 100000000, 0, -337)], (0)), 100000000, 0, -336), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -335), 0), 100000000, 0, -334), 0), 100000000, 0, -333), 0), 100000000, 0, -332), 0, (("clib/cSig.mli", 68, 2340, 2344), ("clib/cSig.mli", 68, 2340, 2397), 0), 0, Tag1 ("CSig", 46)), 0); (("equal", 860), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -327), (Tag1 (0, ((("a")), 100000000, 0, -327), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -331), 0), 100000000, 0, -330), 0), 100000000, 0, -329), (Tag1 (0, (Tag3 ((("t", 849)), [((("a")), 100000000, 0, -327)], (0)), 100000000, 0, -328), (Tag1 (0, (Tag3 ((("t", 849)), [((("a")), 100000000, 0, -327)], (0)), 100000000, 0, -326), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -325), 0), 100000000, 0, -324), 0), 100000000, 0, -323), 0), 100000000, 0, -322), 0, (("clib/cSig.mli", 69, 2398, 2402), ("clib/cSig.mli", 69, 2398, 2455), 0), 0, Tag1 ("CSig", 47)), 0); (("iter", 861), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 848)), 0, (0)), 100000000, 0, -321), (Tag1 (0, ((("a")), 100000000, 0, -317), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -320), 0), 100000000, 0, -319), 0), 100000000, 0, -318), (Tag1 (0, (Tag3 ((("t", 849)), [((("a")), 100000000, 0, -317)], (0)), 100000000, 0, -316), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -315), 0), 100000000, 0, -314), 0), 100000000, 0, -313), 0, (("clib/cSig.mli", 70, 2456, 2460), ("clib/cSig.mli", 70, 2456, 2505), 0), 0, Tag1 ("CSig", 48)), 0); (("fold", 862), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 848)), 0, (0)), 100000000, 0, -312), (Tag1 (0, ((("a")), 100000000, 0, -308), (Tag1 (0, ((("b")), 100000000, 0, -306), ((("b")), 100000000, 0, -306), 0), 100000000, 0, -311), 0), 100000000, 0, -310), 0), 100000000, 0, -309), (Tag1 (0, (Tag3 ((("t", 849)), [((("a")), 100000000, 0, -308)], (0)), 100000000, 0, -307), (Tag1 (0, ((("b")), 100000000, 0, -306), ((("b")), 100000000, 0, -306), 0), 100000000, 0, -305), 0), 100000000, 0, -304), 0), 100000000, 0, -303), 0, (("clib/cSig.mli", 71, 2506, 2510), ("clib/cSig.mli", 71, 2506, 2563), 0), 0, Tag1 ("CSig", 49)), 0); (("for_all", 863), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 848)), 0, (0)), 100000000, 0, -302), (Tag1 (0, ((("a")), 100000000, 0, -298), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -301), 0), 100000000, 0, -300), 0), 100000000, 0, -299), (Tag1 (0, (Tag3 ((("t", 849)), [((("a")), 100000000, 0, -298)], (0)), 100000000, 0, -297), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -296), 0), 100000000, 0, -295), 0), 100000000, 0, -294), 0, (("clib/cSig.mli", 72, 2564, 2568), ("clib/cSig.mli", 72, 2564, 2616), 0), 0, Tag1 ("CSig", 50)), 0); (("exists", 864), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 848)), 0, (0)), 100000000, 0, -293), (Tag1 (0, ((("a")), 100000000, 0, -289), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -292), 0), 100000000, 0, -291), 0), 100000000, 0, -290), (Tag1 (0, (Tag3 ((("t", 849)), [((("a")), 100000000, 0, -289)], (0)), 100000000, 0, -288), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -287), 0), 100000000, 0, -286), 0), 100000000, 0, -285), 0, (("clib/cSig.mli", 73, 2617, 2621), ("clib/cSig.mli", 73, 2617, 2668), 0), 0, Tag1 ("CSig", 51)), 0); (("filter", 865), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 848)), 0, (0)), 100000000, 0, -284), (Tag1 (0, ((("a")), 100000000, 0, -279), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -283), 0), 100000000, 0, -282), 0), 100000000, 0, -281), (Tag1 (0, (Tag3 ((("t", 849)), [((("a")), 100000000, 0, -279)], (0)), 100000000, 0, -280), (Tag3 ((("t", 849)), [((("a")), 100000000, 0, -279)], (0)), 100000000, 0, -278), 0), 100000000, 0, -277), 0), 100000000, 0, -276), 0, (("clib/cSig.mli", 74, 2669, 2673), ("clib/cSig.mli", 74, 2669, 2720), 0), 0, Tag1 ("CSig", 52)), 0); (("partition", 866), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 848)), 0, (0)), 100000000, 0, -275), (Tag1 (0, ((("a")), 100000000, 0, -269), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -274), 0), 100000000, 0, -273), 0), 100000000, 0, -272), (Tag1 (0, (Tag3 ((("t", 849)), [((("a")), 100000000, 0, -269)], (0)), 100000000, 0, -271), (Tag2 ([(Tag3 ((("t", 849)), [((("a")), 100000000, 0, -269)], (0)), 100000000, 0, -268); (Tag3 ((("t", 849)), [((("a")), 100000000, 0, -269)], (0)), 100000000, 0, -270)]), 100000000, 0, -267), 0), 100000000, 0, -266), 0), 100000000, 0, -265), 0, (("clib/cSig.mli", 75, 2721, 2725), ("clib/cSig.mli", 75, 2721, 2782), 0), 0, Tag1 ("CSig", 53)), 0); (("cardinal", 867), ((Tag1 (0, (Tag3 ((("t", 849)), [((("a")), 100000000, 0, -264)], (0)), 100000000, 0, -263), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -262), 0), 100000000, 0, -261), 0, (("clib/cSig.mli", 76, 2783, 2787), ("clib/cSig.mli", 76, 2783, 2812), 0), 0, Tag1 ("CSig", 54)), 0); (("bindings", 868), ((Tag1 (0, (Tag3 ((("t", 849)), [((("a")), 100000000, 0, -259)], (0)), 100000000, 0, -260), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("key", 848)), 0, (0)), 100000000, 0, -258); ((("a")), 100000000, 0, -259)]), 100000000, 0, -257)], (0)), 100000000, 0, -256), 0), 100000000, 0, -255), 0, (("clib/cSig.mli", 77, 2813, 2817), ("clib/cSig.mli", 77, 2813, 2854), 0), 0, Tag1 ("CSig", 55)), 0); (("min_binding", 869), ((Tag1 (0, (Tag3 ((("t", 849)), [((("a")), 100000000, 0, -253)], (0)), 100000000, 0, -254), (Tag2 ([(Tag3 ((("key", 848)), 0, (0)), 100000000, 0, -252); ((("a")), 100000000, 0, -253)]), 100000000, 0, -251), 0), 100000000, 0, -250), 0, (("clib/cSig.mli", 78, 2855, 2859), ("clib/cSig.mli", 78, 2855, 2894), 0), 0, Tag1 ("CSig", 56)), 0); (("max_binding", 870), ((Tag1 (0, (Tag3 ((("t", 849)), [((("a")), 100000000, 0, -248)], (0)), 100000000, 0, -249), (Tag2 ([(Tag3 ((("key", 848)), 0, (0)), 100000000, 0, -247); ((("a")), 100000000, 0, -248)]), 100000000, 0, -246), 0), 100000000, 0, -245), 0, (("clib/cSig.mli", 79, 2895, 2899), ("clib/cSig.mli", 79, 2895, 2934), 0), 0, Tag1 ("CSig", 57)), 0); (("choose", 871), ((Tag1 (0, (Tag3 ((("t", 849)), [((("a")), 100000000, 0, -243)], (0)), 100000000, 0, -244), (Tag2 ([(Tag3 ((("key", 848)), 0, (0)), 100000000, 0, -242); ((("a")), 100000000, 0, -243)]), 100000000, 0, -241), 0), 100000000, 0, -240), 0, (("clib/cSig.mli", 80, 2935, 2939), ("clib/cSig.mli", 80, 2935, 2969), 0), 0, Tag1 ("CSig", 58)), 0); (("choose_opt", 872), ((Tag1 (0, (Tag3 ((("t", 849)), [((("a")), 100000000, 0, -238)], (0)), 100000000, 0, -239), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("key", 848)), 0, (0)), 100000000, 0, -237); ((("a")), 100000000, 0, -238)]), 100000000, 0, -236)], (0)), 100000000, 0, -235), 0), 100000000, 0, -234), 0, (("clib/cSig.mli", 81, 2970, 2974), ("clib/cSig.mli", 81, 2970, 3015), 0), 0, Tag1 ("CSig", 59)), 0); (("split", 873), ((Tag1 (0, (Tag3 ((("key", 848)), 0, (0)), 100000000, 0, -233), (Tag1 (0, (Tag3 ((("t", 849)), [((("a")), 100000000, 0, -229)], (0)), 100000000, 0, -232), (Tag2 ([(Tag3 ((("t", 849)), [((("a")), 100000000, 0, -229)], (0)), 100000000, 0, -228); (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -229)], (0)), 100000000, 0, -230); (Tag3 ((("t", 849)), [((("a")), 100000000, 0, -229)], (0)), 100000000, 0, -231)]), 100000000, 0, -227), 0), 100000000, 0, -226), 0), 100000000, 0, -225), 0, (("clib/cSig.mli", 82, 3016, 3020), ("clib/cSig.mli", 82, 3016, 3069), 0), 0, Tag1 ("CSig", 60)), 0); (("find", 874), ((Tag1 (0, (Tag3 ((("key", 848)), 0, (0)), 100000000, 0, -224), (Tag1 (0, (Tag3 ((("t", 849)), [((("a")), 100000000, 0, -222)], (0)), 100000000, 0, -223), ((("a")), 100000000, 0, -222), 0), 100000000, 0, -221), 0), 100000000, 0, -220), 0, (("clib/cSig.mli", 83, 3070, 3074), ("clib/cSig.mli", 83, 3070, 3101), 0), 0, Tag1 ("CSig", 61)), 0); (("find_opt", 875), ((Tag1 (0, (Tag3 ((("key", 848)), 0, (0)), 100000000, 0, -219), (Tag1 (0, (Tag3 ((("t", 849)), [((("a")), 100000000, 0, -217)], (0)), 100000000, 0, -218), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -217)], (0)), 100000000, 0, -216), 0), 100000000, 0, -215), 0), 100000000, 0, -214), 0, (("clib/cSig.mli", 84, 3102, 3106), ("clib/cSig.mli", 84, 3102, 3145), 0), 0, Tag1 ("CSig", 62)), 0); (("map", 876), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -212), ((("b")), 100000000, 0, -210), 0), 100000000, 0, -213), (Tag1 (0, (Tag3 ((("t", 849)), [((("a")), 100000000, 0, -212)], (0)), 100000000, 0, -211), (Tag3 ((("t", 849)), [((("b")), 100000000, 0, -210)], (0)), 100000000, 0, -209), 0), 100000000, 0, -208), 0), 100000000, 0, -207), 0, (("clib/cSig.mli", 85, 3146, 3150), ("clib/cSig.mli", 85, 3146, 3185), 0), 0, Tag1 ("CSig", 63)), 0); (("mapi", 877), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 848)), 0, (0)), 100000000, 0, -206), (Tag1 (0, ((("a")), 100000000, 0, -203), ((("b")), 100000000, 0, -201), 0), 100000000, 0, -205), 0), 100000000, 0, -204), (Tag1 (0, (Tag3 ((("t", 849)), [((("a")), 100000000, 0, -203)], (0)), 100000000, 0, -202), (Tag3 ((("t", 849)), [((("b")), 100000000, 0, -201)], (0)), 100000000, 0, -200), 0), 100000000, 0, -199), 0), 100000000, 0, -198), 0, (("clib/cSig.mli", 86, 3186, 3190), ("clib/cSig.mli", 86, 3186, 3233), 0), 0, Tag1 ("CSig", 64)), 0)]), 0, (("plugins/ltac2/tac2typing_env.mli", 19, 760, 762), ("plugins/ltac2/tac2typing_env.mli", 19, 760, 802), 0), Tag1 ("Ltac2_plugin__Tac2typing_env", 3)), 0, 0)]), 0, (("plugins/ltac2/tac2typing_env.mli", 14, 702, 702), ("plugins/ltac2/tac2typing_env.mli", 20, 803, 806), 0), Tag1 ("Ltac2_plugin__Tac2typing_env", 4)), 0, 0); Tag1 (("t", 815), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("plugins/ltac2/tac2typing_env.mli", 22, 808, 808), ("plugins/ltac2/tac2typing_env.mli", 22, 808, 814), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2typing_env", 5)), 1, 0); (("empty_env", 816), ((Tag1 (Tag1 ("strict"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -192)], (0)), 100000000, 0, -191), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -190), (Tag3 ((("t", 815)), 0, (0)), 100000000, 0, -189), 0), 100000000, 0, -188), 0), 100000000, 0, -187), 0, (("plugins/ltac2/tac2typing_env.mli", 25, 843, 843), ("plugins/ltac2/tac2typing_env.mli", 25, 843, 884), 0), 0, Tag1 ("Ltac2_plugin__Tac2typing_env", 6)), 0); (("set_rec", 817), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "Map"), "t"), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "KerName"), "t"), 0, (0)), 100000000, 0, -185); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -186)]), 100000000, 0, -184)], (0)), 100000000, 0, -183), (Tag1 (0, (Tag3 ((("t", 815)), 0, (0)), 100000000, 0, -182), (Tag3 ((("t", 815)), 0, (0)), 100000000, 0, -181), 0), 100000000, 0, -180), 0), 100000000, 0, -179), 0, (("plugins/ltac2/tac2typing_env.mli", 27, 886, 886), ("plugins/ltac2/tac2typing_env.mli", 27, 886, 936), 0), 0, Tag1 ("Ltac2_plugin__Tac2typing_env", 7)), 0); (("reject_unbound_tvar", 818), ((Tag1 (0, (Tag3 ((("t", 815)), 0, (0)), 100000000, 0, -178), (Tag3 ((("t", 815)), 0, (0)), 100000000, 0, -177), 0), 100000000, 0, -176), 0, (("plugins/ltac2/tac2typing_env.mli", 29, 938, 938), ("plugins/ltac2/tac2typing_env.mli", 29, 938, 970), 0), 0, Tag1 ("Ltac2_plugin__Tac2typing_env", 8)), 0); (("env_strict", 819), ((Tag1 (0, (Tag3 ((("t", 815)), 0, (0)), 100000000, 0, -175), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -174), 0), 100000000, 0, -173), 0, (("plugins/ltac2/tac2typing_env.mli", 31, 972, 972), ("plugins/ltac2/tac2typing_env.mli", 31, 972, 998), 0), 0, Tag1 ("Ltac2_plugin__Tac2typing_env", 9)), 0); (("env_name", 820), ((Tag1 (0, (Tag3 ((("t", 815)), 0, (0)), 100000000, 0, -172), (Tag1 (0, (Tag3 (Tag1 ((("TVar", 814)), "t"), 0, (0)), 100000000, 0, -171), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -170), 0), 100000000, 0, -169), 0), 100000000, 0, -168), 0, (("plugins/ltac2/tac2typing_env.mli", 33, 1000, 1000), ("plugins/ltac2/tac2typing_env.mli", 33, 1000, 1036), 0), 0, Tag1 ("Ltac2_plugin__Tac2typing_env", 10)), 0); (("fresh_id", 821), ((Tag1 (0, (Tag3 ((("t", 815)), 0, (0)), 100000000, 0, -167), (Tag3 (Tag1 ((("TVar", 814)), "t"), 0, (0)), 100000000, 0, -166), 0), 100000000, 0, -165), 0, (("plugins/ltac2/tac2typing_env.mli", 35, 1038, 1038), ("plugins/ltac2/tac2typing_env.mli", 35, 1038, 1064), 0), 0, Tag1 ("Ltac2_plugin__Tac2typing_env", 11)), 0); (("get_alias", 822), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -164), (Tag1 (0, (Tag3 ((("t", 815)), 0, (0)), 100000000, 0, -163), (Tag3 (Tag1 ((("TVar", 814)), "t"), 0, (0)), 100000000, 0, -162), 0), 100000000, 0, -161), 0), 100000000, 0, -160), 0, (("plugins/ltac2/tac2typing_env.mli", 37, 1066, 1066), ("plugins/ltac2/tac2typing_env.mli", 37, 1066, 1103), 0), 0, Tag1 ("Ltac2_plugin__Tac2typing_env", 12)), 0); (("find_rec_var", 823), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -159), (Tag1 (0, (Tag3 ((("t", 815)), 0, (0)), 100000000, 0, -158), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "KerName"), "t"), 0, (0)), 100000000, 0, -156); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -157)]), 100000000, 0, -155)], (0)), 100000000, 0, -154), 0), 100000000, 0, -153), 0), 100000000, 0, -152), 0, (("plugins/ltac2/tac2typing_env.mli", 39, 1105, 1105), ("plugins/ltac2/tac2typing_env.mli", 39, 1105, 1161), 0), 0, Tag1 ("Ltac2_plugin__Tac2typing_env", 13)), 0); Tag1 (("mix_var", 824), (0, 0, Tag1 ([(("GVar", 569), ([(Tag3 (Tag1 ((("TVar", 814)), "t"), 0, (0)), 100000000, 0, -150)]), 0, (("plugins/ltac2/tac2typing_env.mli", 42, 1178, 1178), ("plugins/ltac2/tac2typing_env.mli", 42, 1178, 1194), 0), 0, Tag1 ("Ltac2_plugin__Tac2typing_env", 15)); (("LVar", 570), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -151)]), 0, (("plugins/ltac2/tac2typing_env.mli", 43, 1195, 1195), ("plugins/ltac2/tac2typing_env.mli", 43, 1195, 1208), 0), 0, Tag1 ("Ltac2_plugin__Tac2typing_env", 16))], 0), 1, 0, 0, 0, 0, 0, (("plugins/ltac2/tac2typing_env.mli", 41, 1163, 1163), ("plugins/ltac2/tac2typing_env.mli", 43, 1195, 1208), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2typing_env", 14)), 1, 0); Tag1 (("mix_type_scheme", 825), (0, 0, 0, 1, ((Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -147); (Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac2_plugin")), "Tac2expr"), "glb_typexpr"), [(Tag3 ((("mix_var", 824)), 0, (0)), 100000000, 0, -149)], (0)), 100000000, 0, -148)]), 100000000, 0, -146)), 0, 0, 0, 0, (("plugins/ltac2/tac2typing_env.mli", 45, 1210, 1210), ("plugins/ltac2/tac2typing_env.mli", 45, 1210, 1258), 0), 0, 0, 0, Tag1 ("Ltac2_plugin__Tac2typing_env", 17)), 1, 0); (("mem_var", 826), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -145), (Tag1 (0, (Tag3 ((("t", 815)), 0, (0)), 100000000, 0, -144), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -143), 0), 100000000, 0, -142), 0), 100000000, 0, -141), 0, (("plugins/ltac2/tac2typing_env.mli", 47, 1260, 1260), ("plugins/ltac2/tac2typing_env.mli", 47, 1260, 1291), 0), 0, Tag1 ("Ltac2_plugin__Tac2typing_env", 18)), 0); (("find_var", 827), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -140), (Tag1 (0, (Tag3 ((("t", 815)), 0, (0)), 100000000, 0, -139), (Tag3 ((("mix_type_scheme", 825)), 0, (0)), 100000000, 0, -138), 0), 100000000, 0, -137), 0), 100000000, 0, -136), 0, (("plugins/ltac2/tac2typing_env.mli", 49, 1293, 1293), ("plugins/ltac2/tac2typing_env.mli", 49, 1293, 1336), 0), 0, Tag1 ("Ltac2_plugin__Tac2typing_env", 19)), 0); (("bound_vars", 828), ((Tag1 (0, (Tag3 ((("t", 815)), 0, (0)), 100000000, 0, -135), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "Set"), "t"), 0, (0)), 100000000, 0, -134), 0), 100000000, 0, -133), 0, (("plugins/ltac2/tac2typing_env.mli", 51, 1338, 1338), ("plugins/ltac2/tac2typing_env.mli", 51, 1338, 1368), 0), 0, Tag1 ("Ltac2_plugin__Tac2typing_env", 20)), 0); (("get_variable0", 829), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -132), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -131), 0), 100000000, 0, -130), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac2_plugin")), "Tac2expr"), "or_relid"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac2_plugin")), "Tac2expr"), "tacref"), 0, (0)), 100000000, 0, -129)], (0)), 100000000, 0, -128), (Tag3 (Tag1 ((Tag2 ("Locus")), "or_var"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac2_plugin")), "Tac2expr"), "tacref"), 0, (0)), 100000000, 0, -127)], (0)), 100000000, 0, -126), 0), 100000000, 0, -125), 0), 100000000, 0, -124), 0, (("plugins/ltac2/tac2typing_env.mli", 53, 1370, 1370), ("plugins/ltac2/tac2typing_env.mli", 53, 1370, 1446), 0), 0, Tag1 ("Ltac2_plugin__Tac2typing_env", 21)), 0); (("get_variable", 830), ((Tag1 (0, (Tag3 ((("t", 815)), 0, (0)), 100000000, 0, -123), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac2_plugin")), "Tac2expr"), "or_relid"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac2_plugin")), "Tac2expr"), "tacref"), 0, (0)), 100000000, 0, -122)], (0)), 100000000, 0, -121), (Tag3 (Tag1 ((Tag2 ("Locus")), "or_var"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac2_plugin")), "Tac2expr"), "tacref"), 0, (0)), 100000000, 0, -120)], (0)), 100000000, 0, -119), 0), 100000000, 0, -118), 0), 100000000, 0, -117), 0, (("plugins/ltac2/tac2typing_env.mli", 55, 1448, 1448), ("plugins/ltac2/tac2typing_env.mli", 55, 1448, 1510), 0), 0, Tag1 ("Ltac2_plugin__Tac2typing_env", 22)), 0); (("kind", 831), ((Tag1 (0, (Tag3 ((("t", 815)), 0, (0)), 100000000, 0, -116), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac2_plugin")), "Tac2expr"), "glb_typexpr"), [(Tag3 (Tag1 ((("TVar", 814)), "t"), 0, (0)), 100000000, 0, -115)], (0)), 100000000, 0, -114), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac2_plugin")), "Tac2expr"), "glb_typexpr"), [(Tag3 (Tag1 ((("TVar", 814)), "t"), 0, (0)), 100000000, 0, -113)], (0)), 100000000, 0, -112), 0), 100000000, 0, -111), 0), 100000000, 0, -110), 0, (("plugins/ltac2/tac2typing_env.mli", 58, 1569, 1569), ("plugins/ltac2/tac2typing_env.mli", 58, 1569, 1625), 0), 0, Tag1 ("Ltac2_plugin__Tac2typing_env", 23)), 0); (("pr_glbtype", 832), ((Tag1 (0, (Tag3 ((("t", 815)), 0, (0)), 100000000, 0, -109), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac2_plugin")), "Tac2expr"), "glb_typexpr"), [(Tag3 (Tag1 ((("TVar", 814)), "t"), 0, (0)), 100000000, 0, -108)], (0)), 100000000, 0, -107), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -106), 0), 100000000, 0, -105), 0), 100000000, 0, -104), 0, (("plugins/ltac2/tac2typing_env.mli", 60, 1627, 1627), ("plugins/ltac2/tac2typing_env.mli", 60, 1627, 1675), 0), 0, Tag1 ("Ltac2_plugin__Tac2typing_env", 24)), 0); (("eq_or_tuple", 833), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -100), (Tag1 (0, ((("b")), 100000000, 0, -98), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -103), 0), 100000000, 0, -102), 0), 100000000, 0, -101), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac2_plugin")), "Tac2expr"), "or_tuple"), [((("a")), 100000000, 0, -100)], (0)), 100000000, 0, -99), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac2_plugin")), "Tac2expr"), "or_tuple"), [((("b")), 100000000, 0, -98)], (0)), 100000000, 0, -97), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -96), 0), 100000000, 0, -95), 0), 100000000, 0, -94), 0), 100000000, 0, -93), 0, (("plugins/ltac2/tac2typing_env.mli", 62, 1677, 1677), ("plugins/ltac2/tac2typing_env.mli", 62, 1677, 1751), 0), 0, Tag1 ("Ltac2_plugin__Tac2typing_env", 25)), 0); Tag2 (("CannotUnify", 834), ((Tag3 ("exn", 7)), 0, ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac2_plugin")), "Tac2expr"), "glb_typexpr"), [(Tag3 (Tag1 ((("TVar", 814)), "t"), 0, (0)), 100000000, 0, -90)], (0)), 100000000, 0, -89); (Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac2_plugin")), "Tac2expr"), "glb_typexpr"), [(Tag3 (Tag1 ((("TVar", 814)), "t"), 0, (0)), 100000000, 0, -92)], (0)), 100000000, 0, -91)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Ltac2_plugin__Tac2typing_env", 26)), 2, 0); (("unify0", 835), ((Tag1 (0, (Tag3 ((("t", 815)), 0, (0)), 100000000, 0, -88), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac2_plugin")), "Tac2expr"), "glb_typexpr"), [(Tag3 (Tag1 ((("TVar", 814)), "t"), 0, (0)), 100000000, 0, -87)], (0)), 100000000, 0, -86), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac2_plugin")), "Tac2expr"), "glb_typexpr"), [(Tag3 (Tag1 ((("TVar", 814)), "t"), 0, (0)), 100000000, 0, -85)], (0)), 100000000, 0, -84), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -83), 0), 100000000, 0, -82), 0), 100000000, 0, -81), 0), 100000000, 0, -80), 0, (("plugins/ltac2/tac2typing_env.mli", 67, 1876, 1876), ("plugins/ltac2/tac2typing_env.mli", 67, 1876, 1942), 0), 0, Tag1 ("Ltac2_plugin__Tac2typing_env", 27)), 0); (("unify", 836), ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -79)], (0)), 100000000, 0, -78), (Tag1 (0, (Tag3 ((("t", 815)), 0, (0)), 100000000, 0, -77), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac2_plugin")), "Tac2expr"), "glb_typexpr"), [(Tag3 (Tag1 ((("TVar", 814)), "t"), 0, (0)), 100000000, 0, -76)], (0)), 100000000, 0, -75), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac2_plugin")), "Tac2expr"), "glb_typexpr"), [(Tag3 (Tag1 ((("TVar", 814)), "t"), 0, (0)), 100000000, 0, -74)], (0)), 100000000, 0, -73), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -72), 0), 100000000, 0, -71), 0), 100000000, 0, -70), 0), 100000000, 0, -69), 0), 100000000, 0, -68), 0, (("plugins/ltac2/tac2typing_env.mli", 69, 1944, 1944), ("plugins/ltac2/tac2typing_env.mli", 69, 1944, 2023), 0), 0, Tag1 ("Ltac2_plugin__Tac2typing_env", 29)), 0); (("unify_arrow", 837), ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -67)], (0)), 100000000, 0, -66), (Tag1 (0, (Tag3 ((("t", 815)), 0, (0)), 100000000, 0, -65), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac2_plugin")), "Tac2expr"), "glb_typexpr"), [(Tag3 (Tag1 ((("TVar", 814)), "t"), 0, (0)), 100000000, 0, -64)], (0)), 100000000, 0, -63), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -60)], (0)), 100000000, 0, -59); (Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac2_plugin")), "Tac2expr"), "glb_typexpr"), [(Tag3 (Tag1 ((("TVar", 814)), "t"), 0, (0)), 100000000, 0, -62)], (0)), 100000000, 0, -61)]), 100000000, 0, -58)], (0)), 100000000, 0, -57), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac2_plugin")), "Tac2expr"), "glb_typexpr"), [(Tag3 (Tag1 ((("TVar", 814)), "t"), 0, (0)), 100000000, 0, -56)], (0)), 100000000, 0, -55), 0), 100000000, 0, -54), 0), 100000000, 0, -53), 0), 100000000, 0, -52), 0), 100000000, 0, -51), 0, (("plugins/ltac2/tac2typing_env.mli", 71, 2025, 2025), ("plugins/ltac2/tac2typing_env.mli", 74, 2129, 2152), 0), 0, Tag1 ("Ltac2_plugin__Tac2typing_env", 30)), 0); (("abstract_var", 838), ((Tag1 (0, (Tag3 ((("t", 815)), 0, (0)), 100000000, 0, -50), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac2_plugin")), "Tac2expr"), "glb_typexpr"), [(Tag3 (Tag1 ((("TVar", 814)), "t"), 0, (0)), 100000000, 0, -49)], (0)), 100000000, 0, -48), (Tag3 ((("mix_type_scheme", 825)), 0, (0)), 100000000, 0, -47), 0), 100000000, 0, -46), 0), 100000000, 0, -45), 0, (("plugins/ltac2/tac2typing_env.mli", 76, 2154, 2154), ("plugins/ltac2/tac2typing_env.mli", 76, 2154, 2215), 0), 0, Tag1 ("Ltac2_plugin__Tac2typing_env", 31)), 0); (("monomorphic", 839), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac2_plugin")), "Tac2expr"), "glb_typexpr"), [(Tag3 (Tag1 ((("TVar", 814)), "t"), 0, (0)), 100000000, 0, -44)], (0)), 100000000, 0, -43), (Tag3 ((("mix_type_scheme", 825)), 0, (0)), 100000000, 0, -42), 0), 100000000, 0, -41), 0, (("plugins/ltac2/tac2typing_env.mli", 78, 2217, 2217), ("plugins/ltac2/tac2typing_env.mli", 78, 2217, 2272), 0), 0, Tag1 ("Ltac2_plugin__Tac2typing_env", 32)), 0); (("polymorphic", 840), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac2_plugin")), "Tac2expr"), "type_scheme"), 0, (0)), 100000000, 0, -40), (Tag3 ((("mix_type_scheme", 825)), 0, (0)), 100000000, 0, -39), 0), 100000000, 0, -38), 0, (("plugins/ltac2/tac2typing_env.mli", 80, 2274, 2274), ("plugins/ltac2/tac2typing_env.mli", 80, 2274, 2322), 0), 0, Tag1 ("Ltac2_plugin__Tac2typing_env", 33)), 0); (("push_name", 841), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -37), (Tag1 (0, (Tag3 ((("mix_type_scheme", 825)), 0, (0)), 100000000, 0, -36), (Tag1 (0, (Tag3 ((("t", 815)), 0, (0)), 100000000, 0, -35), (Tag3 ((("t", 815)), 0, (0)), 100000000, 0, -34), 0), 100000000, 0, -33), 0), 100000000, 0, -32), 0), 100000000, 0, -31), 0, (("plugins/ltac2/tac2typing_env.mli", 82, 2324, 2324), ("plugins/ltac2/tac2typing_env.mli", 82, 2324, 2375), 0), 0, Tag1 ("Ltac2_plugin__Tac2typing_env", 34)), 0); (("push_ids", 842), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "Map"), "t"), [(Tag3 ((("mix_type_scheme", 825)), 0, (0)), 100000000, 0, -30)], (0)), 100000000, 0, -29), (Tag1 (0, (Tag3 ((("t", 815)), 0, (0)), 100000000, 0, -28), (Tag3 ((("t", 815)), 0, (0)), 100000000, 0, -27), 0), 100000000, 0, -26), 0), 100000000, 0, -25), 0, (("plugins/ltac2/tac2typing_env.mli", 84, 2377, 2377), ("plugins/ltac2/tac2typing_env.mli", 84, 2377, 2426), 0), 0, Tag1 ("Ltac2_plugin__Tac2typing_env", 35)), 0); (("subst_type", 843), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -22), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac2_plugin")), "Tac2expr"), "glb_typexpr"), [((("b")), 100000000, 0, -20)], (0)), 100000000, 0, -24), 0), 100000000, 0, -23), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac2_plugin")), "Tac2expr"), "glb_typexpr"), [((("a")), 100000000, 0, -22)], (0)), 100000000, 0, -21), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac2_plugin")), "Tac2expr"), "glb_typexpr"), [((("b")), 100000000, 0, -20)], (0)), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("plugins/ltac2/tac2typing_env.mli", 86, 2428, 2428), ("plugins/ltac2/tac2typing_env.mli", 86, 2428, 2503), 0), 0, Tag1 ("Ltac2_plugin__Tac2typing_env", 36)), 0); (("normalize", 844), ((Tag1 (0, (Tag3 ((("t", 815)), 0, (0)), 100000000, 0, -16), (Tag1 (0, (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -11)], (0)), 100000000, 0, -10); (Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 (Tag1 (Tag1 ((("TVar", 814)), "Map"), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac2_plugin")), "Tac2expr"), "glb_typexpr"), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -15)], (0)), 100000000, 0, -14)], (0)), 100000000, 0, -13)], (0)), 100000000, 0, -12)]), 100000000, 0, -9), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac2_plugin")), "Tac2expr"), "glb_typexpr"), [(Tag3 (Tag1 ((("TVar", 814)), "t"), 0, (0)), 100000000, 0, -8)], (0)), 100000000, 0, -7), (Tag3 (Tag1 (Tag1 ((Tag2 ("Ltac2_plugin")), "Tac2expr"), "glb_typexpr"), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -6)], (0)), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("plugins/ltac2/tac2typing_env.mli", 88, 2505, 2505), ("plugins/ltac2/tac2typing_env.mli", 91, 2596, 2613), 0), 0, Tag1 ("Ltac2_plugin__Tac2typing_env", 37)), 0)], "Ltac2_plugin__Tac2typing_env", [("Ltac2_plugin__Tac2typing_env", (":?Fq9OYU\246\129\159\195\169\002\221\177")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Ltac2_plugin__Tac2expr", ("T\154\246\018\232\196\182\229\012\167v}\1367|\157")); ("Ltac2_plugin__Tac2dyn", ("\003M~\173\240\228^\184[\135\224\206\1576\163 ")); ("Ltac2_plugin", ("\165R\230\016\178\131\154\196w\014@m\191\218\194\020")); ("Locus", ("_\002\003W\246\181\225\242Uf\139\226\176\174\192I")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Libnames", ("fp\0255\167\162\209\153\137\161\169#\246\193\003\198")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Dyn", ("\131z`\205v\2306\007x\027&K.?;\169")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150"))], [(0)])
int Ltac2_plugin.Tac2expr.glb_typexpr

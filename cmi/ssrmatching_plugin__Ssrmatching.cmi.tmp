type ssrtermkind = InParens | WithAt | NoFlag | Cpattern
type cpattern = {
  kind : ssrtermkind;
  pattern : Genintern.glob_constr_and_expr;
  interpretation : Geninterp.interp_sign option;
}
val pr_cpattern : cpattern -> Pp.t
exception NoMatch
exception NoProgress
type ('ident, 'term) ssrpattern =
    T of 'term
  | In_T of 'term
  | X_In_T of 'ident * 'term
  | In_X_In_T of 'ident * 'term
  | E_In_X_In_T of 'term * 'ident * 'term
  | E_As_X_In_T of 'term * 'ident * 'term
type pattern = {
  pat_sigma : Evd.evar_map;
  pat_pat : (EConstr.existential, EConstr.t) ssrpattern;
}
val pp_pattern : Environ.env -> pattern -> Pp.t
type rpattern = (cpattern, cpattern) ssrpattern
val pr_rpattern : rpattern -> Pp.t
val redex_of_pattern : pattern -> (Evd.evar_map * EConstr.t) option
val interp_rpattern : Environ.env -> Evd.evar_map -> rpattern -> pattern
val interp_cpattern :
  Environ.env ->
  Evd.evar_map ->
  cpattern ->
  (Genintern.glob_constr_and_expr * Geninterp.interp_sign) option -> pattern
type occ = (bool * int list) option
type subst = Environ.env -> EConstr.t -> EConstr.t -> int -> EConstr.t
val eval_pattern :
  ?raise_NoMatch:bool ->
  Environ.env ->
  Evd.evar_map -> EConstr.t -> pattern option -> occ -> subst -> EConstr.t
val fill_occ_pattern :
  ?raise_NoMatch:bool ->
  Environ.env ->
  Evd.evar_map ->
  EConstr.t ->
  pattern -> occ -> int -> EConstr.t Evd.in_evar_universe_context * EConstr.t
val fill_rel_occ_pattern :
  Environ.env ->
  Evd.evar_map ->
  EConstr.t -> pattern -> occ -> Evd.evar_map * EConstr.t * EConstr.t
type ssrdir = L2R | R2L
val pr_dir_side : ssrdir -> Pp.t
type tpatterns
val empty_tpatterns : Evd.evar_map -> tpatterns
val mk_tpattern :
  ?p_origin:ssrdir * EConstr.t ->
  ?ok:(EConstr.t -> Evd.evar_map -> bool) ->
  rigid:(Evar.t -> bool) ->
  Environ.env -> EConstr.t -> ssrdir -> EConstr.t -> tpatterns -> tpatterns
type find_P = Environ.env -> EConstr.t -> int -> k:subst -> EConstr.t
type conclude =
    unit -> EConstr.t * ssrdir * (bool * Evd.evar_map * UState.t * EConstr.t)
val mk_tpattern_matcher :
  ?all_instances:bool ->
  ?raise_NoMatch:bool ->
  ?upats_origin:ssrdir * EConstr.t ->
  Evd.evar_map -> occ -> tpatterns -> find_P * conclude
val fill_occ_term :
  Environ.env ->
  Evd.evar_map ->
  EConstr.t -> occ -> Evd.evar_map * EConstr.t -> EConstr.t * EConstr.t
val do_once : 'a option ref -> (unit -> 'a) -> unit
val assert_done : 'a option ref -> 'a
val unify_HO :
  Environ.env ->
  Evd.evar_map -> EConstr.constr -> EConstr.constr -> Evd.evar_map
val tag_of_cpattern : cpattern -> ssrtermkind
val loc_of_cpattern : cpattern -> Loc.t option
val id_of_pattern : Evd.evar_map -> pattern -> Names.Id.t option
val is_wildcard : cpattern -> bool
val cpattern_of_id : Names.Id.t -> cpattern
val pr_constr_pat : Environ.env -> Evd.evar_map -> Constr.constr -> Pp.t
val pr_econstr_pat : Environ.env -> Evd.evar_map -> Evd.econstr -> Pp.t
val debug : bool -> unit
val ssrinstancesof : cpattern -> unit Proofview.tactic
module Internal :
  sig
    val wit_rpatternty : (rpattern, rpattern, rpattern) Genarg.genarg_type
    val glob_rpattern : Genintern.glob_sign -> rpattern -> rpattern
    val subst_rpattern : Mod_subst.substitution -> rpattern -> rpattern
    val interp_rpattern :
      Geninterp.interp_sign ->
      Environ.env -> Evd.evar_map -> rpattern -> rpattern
    val pr_rpattern : rpattern -> Pp.t
    val mk_rpattern : (cpattern, cpattern) ssrpattern -> rpattern
    val mk_lterm :
      Constrexpr.constr_expr -> Geninterp.interp_sign option -> cpattern
    val mk_term :
      ssrtermkind ->
      Constrexpr.constr_expr -> Geninterp.interp_sign option -> cpattern
    val glob_cpattern : Genintern.glob_sign -> cpattern -> cpattern
    val subst_ssrterm : Mod_subst.substitution -> cpattern -> cpattern
    val interp_ssrterm :
      Geninterp.interp_sign ->
      Environ.env -> Evd.evar_map -> cpattern -> cpattern
    val pr_ssrterm : cpattern -> Pp.t("DEBUG:rule", [Tag1 (("ssrtermkind", 1615), (0, 0, Tag1 ([(("InParens", 798), (0), 0, (("plugins/ssrmatching/ssrmatching.mli", 22, 913, 932), ("plugins/ssrmatching/ssrmatching.mli", 22, 913, 942), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 2)); (("WithAt", 799), (0), 0, (("plugins/ssrmatching/ssrmatching.mli", 22, 913, 943), ("plugins/ssrmatching/ssrmatching.mli", 22, 913, 951), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 3)); (("NoFlag", 800), (0), 0, (("plugins/ssrmatching/ssrmatching.mli", 22, 913, 952), ("plugins/ssrmatching/ssrmatching.mli", 22, 913, 960), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 4)); (("Cpattern", 801), (0), 0, (("plugins/ssrmatching/ssrmatching.mli", 22, 913, 961), ("plugins/ssrmatching/ssrmatching.mli", 22, 913, 971), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 5))], 0), 1, 0, 0, 0, 0, 0, (("plugins/ssrmatching/ssrmatching.mli", 22, 913, 913), ("plugins/ssrmatching/ssrmatching.mli", 22, 913, 971), 0), 0, 1, 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 1)), 1, 0); Tag1 (("cpattern", 1616), (0, 0, [[(("kind", 803), 0, (Tag3 ((("ssrtermkind", 1615)), 0, (0)), 100000000, 0, -259), (("plugins/ssrmatching/ssrmatching.mli", 27, 1133, 1137), ("plugins/ssrmatching/ssrmatching.mli", 28, 1156, 1159), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 7)); (("pattern", 804), 0, (Tag3 (Tag1 ((Tag2 ("Genintern")), "glob_constr_and_expr"), 0, (0)), 100000000, 0, -260), (("plugins/ssrmatching/ssrmatching.mli", 28, 1156, 1160), ("plugins/ssrmatching/ssrmatching.mli", 29, 1201, 1204), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 8)); (("interpretation", 816), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Geninterp")), "interp_sign"), 0, (0)), 100000000, 0, -262)], (0)), 100000000, 0, -261), (("plugins/ssrmatching/ssrmatching.mli", 29, 1201, 1205), ("plugins/ssrmatching/ssrmatching.mli", 29, 1201, 1250), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 9))]], 1, 0, 0, 0, 0, 0, (("plugins/ssrmatching/ssrmatching.mli", 26, 1117, 1117), ("plugins/ssrmatching/ssrmatching.mli", 29, 1201, 1252), 0), 0, 0, 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 6)), 1, 0); (("pr_cpattern", 1617), ((Tag1 (0, (Tag3 ((("cpattern", 1616)), 0, (0)), 100000000, 0, -258), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -257), 0), 100000000, 0, -256), 0, (("plugins/ssrmatching/ssrmatching.mli", 30, 1253, 1253), ("plugins/ssrmatching/ssrmatching.mli", 30, 1253, 1287), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 11)), 0); Tag2 (("NoMatch", 1618), ((Tag3 ("exn", 7)), 0, (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 12)), 2, 0); Tag2 (("NoProgress", 1619), ((Tag3 ("exn", 7)), 0, (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 13)), 2, 0); Tag1 (("ssrpattern", 1620), ([((("ident")), 100000000, 0, -255); ((("term")), 100000000, 0, -254)], 2, Tag1 ([(("T", 985), ([((("term")), 100000000, 0, -254)]), 0, (("plugins/ssrmatching/ssrmatching.mli", 39, 1463, 1465), ("plugins/ssrmatching/ssrmatching.mli", 39, 1463, 1477), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 15)); (("In_T", 986), ([((("term")), 100000000, 0, -254)]), 0, (("plugins/ssrmatching/ssrmatching.mli", 40, 1478, 1480), ("plugins/ssrmatching/ssrmatching.mli", 40, 1478, 1495), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 16)); (("X_In_T", 987), ([((("ident")), 100000000, 0, -255); ((("term")), 100000000, 0, -254)]), 0, (("plugins/ssrmatching/ssrmatching.mli", 41, 1496, 1498), ("plugins/ssrmatching/ssrmatching.mli", 41, 1496, 1524), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 17)); (("In_X_In_T", 988), ([((("ident")), 100000000, 0, -255); ((("term")), 100000000, 0, -254)]), 0, (("plugins/ssrmatching/ssrmatching.mli", 42, 1525, 1527), ("plugins/ssrmatching/ssrmatching.mli", 42, 1525, 1556), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 18)); (("E_In_X_In_T", 989), ([((("term")), 100000000, 0, -254); ((("ident")), 100000000, 0, -255); ((("term")), 100000000, 0, -254)]), 0, (("plugins/ssrmatching/ssrmatching.mli", 43, 1557, 1559), ("plugins/ssrmatching/ssrmatching.mli", 43, 1557, 1598), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 19)); (("E_As_X_In_T", 990), ([((("term")), 100000000, 0, -254); ((("ident")), 100000000, 0, -255); ((("term")), 100000000, 0, -254)]), 0, (("plugins/ssrmatching/ssrmatching.mli", 44, 1599, 1601), ("plugins/ssrmatching/ssrmatching.mli", 44, 1599, 1640), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 20))], 0), 1, 0, [25; 25], [0; 0], 0, 0, (("plugins/ssrmatching/ssrmatching.mli", 38, 1429, 1429), ("plugins/ssrmatching/ssrmatching.mli", 44, 1599, 1640), 0), 0, 0, 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 14)), 1, 0); Tag1 (("pattern", 1621), (0, 0, [[(("pat_sigma", 992), 0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -250), (("plugins/ssrmatching/ssrmatching.mli", 47, 1659, 1661), ("plugins/ssrmatching/ssrmatching.mli", 47, 1659, 1686), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 22)); (("pat_pat", 1193), 0, (Tag3 ((("ssrpattern", 1620)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "existential"), 0, (0)), 100000000, 0, -252); (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -253)], (0)), 100000000, 0, -251), (("plugins/ssrmatching/ssrmatching.mli", 48, 1687, 1689), ("plugins/ssrmatching/ssrmatching.mli", 48, 1687, 1743), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 23))]], 1, 0, 0, 0, 0, 0, (("plugins/ssrmatching/ssrmatching.mli", 46, 1642, 1642), ("plugins/ssrmatching/ssrmatching.mli", 49, 1744, 1745), 0), 0, 0, 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 21)), 1, 0); (("pp_pattern", 1622), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -249), (Tag1 (0, (Tag3 ((("pattern", 1621)), 0, (0)), 100000000, 0, -248), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -247), 0), 100000000, 0, -246), 0), 100000000, 0, -245), 0, (("plugins/ssrmatching/ssrmatching.mli", 51, 1747, 1747), ("plugins/ssrmatching/ssrmatching.mli", 51, 1747, 1786), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 24)), 0); Tag1 (("rpattern", 1623), (0, 0, 0, 1, ((Tag3 ((("ssrpattern", 1620)), [(Tag3 ((("cpattern", 1616)), 0, (0)), 100000000, 0, -243); (Tag3 ((("cpattern", 1616)), 0, (0)), 100000000, 0, -244)], (0)), 100000000, 0, -242)), 0, 0, 0, 0, (("plugins/ssrmatching/ssrmatching.mli", 56, 1971, 1971), ("plugins/ssrmatching/ssrmatching.mli", 56, 1971, 2018), 0), 0, 0, 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 25)), 1, 0); (("pr_rpattern", 1624), ((Tag1 (0, (Tag3 ((("rpattern", 1623)), 0, (0)), 100000000, 0, -241), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -240), 0), 100000000, 0, -239), 0, (("plugins/ssrmatching/ssrmatching.mli", 57, 2019, 2019), ("plugins/ssrmatching/ssrmatching.mli", 57, 2019, 2053), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 26)), 0); (("redex_of_pattern", 1625), ((Tag1 (0, (Tag3 ((("pattern", 1621)), 0, (0)), 100000000, 0, -238), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -236); (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -237)]), 100000000, 0, -235)], (0)), 100000000, 0, -234), 0), 100000000, 0, -233), 0, (("plugins/ssrmatching/ssrmatching.mli", 61, 2189, 2189), ("plugins/ssrmatching/ssrmatching.mli", 62, 2212, 2258), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 27)), 0); (("interp_rpattern", 1626), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -232), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -231), (Tag1 (0, (Tag3 ((("rpattern", 1623)), 0, (0)), 100000000, 0, -230), (Tag3 ((("pattern", 1621)), 0, (0)), 100000000, 0, -229), 0), 100000000, 0, -228), 0), 100000000, 0, -227), 0), 100000000, 0, -226), 0, (("plugins/ssrmatching/ssrmatching.mli", 66, 2414, 2414), ("plugins/ssrmatching/ssrmatching.mli", 69, 2483, 2494), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 28)), 0); (("interp_cpattern", 1627), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -225), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -224), (Tag1 (0, (Tag3 ((("cpattern", 1616)), 0, (0)), 100000000, 0, -223), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Genintern")), "glob_constr_and_expr"), 0, (0)), 100000000, 0, -221); (Tag3 (Tag1 ((Tag2 ("Geninterp")), "interp_sign"), 0, (0)), 100000000, 0, -222)]), 100000000, 0, -220)], (0)), 100000000, 0, -219), (Tag3 ((("pattern", 1621)), 0, (0)), 100000000, 0, -218), 0), 100000000, 0, -217), 0), 100000000, 0, -216), 0), 100000000, 0, -215), 0), 100000000, 0, -214), 0, (("plugins/ssrmatching/ssrmatching.mli", 74, 2708, 2708), ("plugins/ssrmatching/ssrmatching.mli", 77, 2834, 2845), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 29)), 0); Tag1 (("occ", 1628), (0, 0, 0, 1, ((Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -211); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -213)], (0)), 100000000, 0, -212)]), 100000000, 0, -210)], (0)), 100000000, 0, -209)), 0, 0, 0, 0, (("plugins/ssrmatching/ssrmatching.mli", 81, 2976, 2976), ("plugins/ssrmatching/ssrmatching.mli", 81, 2976, 3011), 0), 0, 0, 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 30)), 1, 0); Tag1 (("subst", 1629), (0, 0, 0, 1, ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -208), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -207), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -206), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -205), (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -204), 0), 100000000, 0, -203), 0), 100000000, 0, -202), 0), 100000000, 0, -201), 0), 100000000, 0, -200)), 0, 0, 0, 0, (("plugins/ssrmatching/ssrmatching.mli", 85, 3139, 3139), ("plugins/ssrmatching/ssrmatching.mli", 85, 3139, 3209), 0), 0, 0, 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 31)), 1, 0); (("eval_pattern", 1630), ((Tag1 (Tag1 ("raise_NoMatch"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -199)], (0)), 100000000, 0, -198), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -197), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -196), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -195), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("pattern", 1621)), 0, (0)), 100000000, 0, -194)], (0)), 100000000, 0, -193), (Tag1 (0, (Tag3 ((("occ", 1628)), 0, (0)), 100000000, 0, -192), (Tag1 (0, (Tag3 ((("subst", 1629)), 0, (0)), 100000000, 0, -191), (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -190), 0), 100000000, 0, -189), 0), 100000000, 0, -188), 0), 100000000, 0, -187), 0), 100000000, 0, -186), 0), 100000000, 0, -185), 0), 100000000, 0, -184), 0), 100000000, 0, -183), 0, (("plugins/ssrmatching/ssrmatching.mli", 95, 3711, 3711), ("plugins/ssrmatching/ssrmatching.mli", 99, 3825, 3838), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 32)), 0); (("fill_occ_pattern", 1631), ((Tag1 (Tag1 ("raise_NoMatch"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -182)], (0)), 100000000, 0, -181), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -180), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -179), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -178), (Tag1 (0, (Tag3 ((("pattern", 1621)), 0, (0)), 100000000, 0, -177), (Tag1 (0, (Tag3 ((("occ", 1628)), 0, (0)), 100000000, 0, -176), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -175), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "in_evar_universe_context"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -173)], (0)), 100000000, 0, -172); (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -174)]), 100000000, 0, -171), 0), 100000000, 0, -170), 0), 100000000, 0, -169), 0), 100000000, 0, -168), 0), 100000000, 0, -167), 0), 100000000, 0, -166), 0), 100000000, 0, -165), 0), 100000000, 0, -164), 0, (("plugins/ssrmatching/ssrmatching.mli", 109, 4298, 4298), ("plugins/ssrmatching/ssrmatching.mli", 113, 4407, 4461), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 33)), 0); (("fill_rel_occ_pattern", 1632), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -163), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -162), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -161), (Tag1 (0, (Tag3 ((("pattern", 1621)), 0, (0)), 100000000, 0, -160), (Tag1 (0, (Tag3 ((("occ", 1628)), 0, (0)), 100000000, 0, -159), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -156); (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -157); (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -158)]), 100000000, 0, -155), 0), 100000000, 0, -154), 0), 100000000, 0, -153), 0), 100000000, 0, -152), 0), 100000000, 0, -151), 0), 100000000, 0, -150), 0, (("plugins/ssrmatching/ssrmatching.mli", 117, 4588, 4588), ("plugins/ssrmatching/ssrmatching.mli", 119, 4667, 4703), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 34)), 0); Tag1 (("ssrdir", 1633), (0, 0, Tag1 ([(("L2R", 1231), (0), 0, (("plugins/ssrmatching/ssrmatching.mli", 126, 4934, 4948), ("plugins/ssrmatching/ssrmatching.mli", 126, 4934, 4951), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 36)); (("R2L", 1232), (0), 0, (("plugins/ssrmatching/ssrmatching.mli", 126, 4934, 4952), ("plugins/ssrmatching/ssrmatching.mli", 126, 4934, 4957), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 37))], 0), 1, 0, 0, 0, 0, 0, (("plugins/ssrmatching/ssrmatching.mli", 126, 4934, 4934), ("plugins/ssrmatching/ssrmatching.mli", 126, 4934, 4957), 0), 0, 1, 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 35)), 1, 0); (("pr_dir_side", 1634), ((Tag1 (0, (Tag3 ((("ssrdir", 1633)), 0, (0)), 100000000, 0, -149), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -148), 0), 100000000, 0, -147), 0, (("plugins/ssrmatching/ssrmatching.mli", 127, 4958, 4958), ("plugins/ssrmatching/ssrmatching.mli", 127, 4958, 4990), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 38)), 0); Tag1 (("tpatterns", 1635), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("plugins/ssrmatching/ssrmatching.mli", 130, 5034, 5034), ("plugins/ssrmatching/ssrmatching.mli", 130, 5034, 5048), 0), 0, 0, 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 39)), 1, 0); (("empty_tpatterns", 1636), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -146), (Tag3 ((("tpatterns", 1635)), 0, (0)), 100000000, 0, -145), 0), 100000000, 0, -144), 0, (("plugins/ssrmatching/ssrmatching.mli", 132, 5050, 5050), ("plugins/ssrmatching/ssrmatching.mli", 132, 5050, 5097), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 40)), 0); (("mk_tpattern", 1637), ((Tag1 (Tag1 ("p_origin"), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("ssrdir", 1633)), 0, (0)), 100000000, 0, -142); (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -143)]), 100000000, 0, -141)], (0)), 100000000, 0, -140), (Tag1 (Tag1 ("ok"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -139), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -138), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -137), 0), 100000000, 0, -136), 0), 100000000, 0, -135)], (0)), 100000000, 0, -134), (Tag1 (("rigid"), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evar")), "t"), 0, (0)), 100000000, 0, -133), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -132), 0), 100000000, 0, -131), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -130), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -129), (Tag1 (0, (Tag3 ((("ssrdir", 1633)), 0, (0)), 100000000, 0, -128), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -127), (Tag1 (0, (Tag3 ((("tpatterns", 1635)), 0, (0)), 100000000, 0, -126), (Tag3 ((("tpatterns", 1635)), 0, (0)), 100000000, 0, -125), 0), 100000000, 0, -124), 0), 100000000, 0, -123), 0), 100000000, 0, -122), 0), 100000000, 0, -121), 0), 100000000, 0, -120), 0), 100000000, 0, -119), 0), 100000000, 0, -118), 0), 100000000, 0, -117), 0, (("plugins/ssrmatching/ssrmatching.mli", 140, 5475, 5475), ("plugins/ssrmatching/ssrmatching.mli", 147, 5645, 5669), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 41)), 0); Tag1 (("find_P", 1638), (0, 0, 0, 1, ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -116), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -115), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -114), (Tag1 (("k"), (Tag3 ((("subst", 1629)), 0, (0)), 100000000, 0, -113), (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -112), 0), 100000000, 0, -111), 0), 100000000, 0, -110), 0), 100000000, 0, -109), 0), 100000000, 0, -108)), 0, 0, 0, 0, (("plugins/ssrmatching/ssrmatching.mli", 159, 6297, 6297), ("plugins/ssrmatching/ssrmatching.mli", 160, 6311, 6368), 0), 0, 0, 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 42)), 1, 0); Tag1 (("conclude", 1639), (0, 0, 0, 1, ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -107), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -100); (Tag3 ((("ssrdir", 1633)), 0, (0)), 100000000, 0, -101); (Tag2 ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -103); (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -104); (Tag3 (Tag1 ((Tag2 ("UState")), "t"), 0, (0)), 100000000, 0, -105); (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -106)]), 100000000, 0, -102)]), 100000000, 0, -99), 0), 100000000, 0, -98)), 0, 0, 0, 0, (("plugins/ssrmatching/ssrmatching.mli", 166, 6649, 6649), ("plugins/ssrmatching/ssrmatching.mli", 167, 6665, 6736), 0), 0, 0, 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 43)), 1, 0); (("mk_tpattern_matcher", 1640), ((Tag1 (Tag1 ("all_instances"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -97)], (0)), 100000000, 0, -96), (Tag1 (Tag1 ("raise_NoMatch"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -95)], (0)), 100000000, 0, -94), (Tag1 (Tag1 ("upats_origin"), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((("ssrdir", 1633)), 0, (0)), 100000000, 0, -92); (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -93)]), 100000000, 0, -91)], (0)), 100000000, 0, -90), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -89), (Tag1 (0, (Tag3 ((("occ", 1628)), 0, (0)), 100000000, 0, -88), (Tag1 (0, (Tag3 ((("tpatterns", 1635)), 0, (0)), 100000000, 0, -87), (Tag2 ([(Tag3 ((("find_P", 1638)), 0, (0)), 100000000, 0, -85); (Tag3 ((("conclude", 1639)), 0, (0)), 100000000, 0, -86)]), 100000000, 0, -84), 0), 100000000, 0, -83), 0), 100000000, 0, -82), 0), 100000000, 0, -81), 0), 100000000, 0, -80), 0), 100000000, 0, -79), 0), 100000000, 0, -78), 0, (("plugins/ssrmatching/ssrmatching.mli", 175, 7156, 7156), ("plugins/ssrmatching/ssrmatching.mli", 179, 7270, 7321), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 44)), 0); (("fill_occ_term", 1641), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -77), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -76), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -75), (Tag1 (0, (Tag3 ((("occ", 1628)), 0, (0)), 100000000, 0, -74), (Tag1 (0, (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -72); (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -73)]), 100000000, 0, -71), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -69); (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -70)]), 100000000, 0, -68), 0), 100000000, 0, -67), 0), 100000000, 0, -66), 0), 100000000, 0, -65), 0), 100000000, 0, -64), 0), 100000000, 0, -63), 0, (("plugins/ssrmatching/ssrmatching.mli", 210, 8611, 8611), ("plugins/ssrmatching/ssrmatching.mli", 210, 8611, 8727), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 45)), 0); (("do_once", 1642), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -59)], (0)), 100000000, 0, -62)], (0)), 100000000, 0, -61), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -60), ((("a")), 100000000, 0, -59), 0), 100000000, 0, -58), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -57), 0), 100000000, 0, -56), 0), 100000000, 0, -55), 0, (("plugins/ssrmatching/ssrmatching.mli", 220, 9195, 9195), ("plugins/ssrmatching/ssrmatching.mli", 220, 9195, 9246), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 46)), 0); (("assert_done", 1643), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -52)], (0)), 100000000, 0, -54)], (0)), 100000000, 0, -53), ((("a")), 100000000, 0, -52), 0), 100000000, 0, -51), 0, (("plugins/ssrmatching/ssrmatching.mli", 224, 9330, 9330), ("plugins/ssrmatching/ssrmatching.mli", 224, 9330, 9367), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 47)), 0); (("unify_HO", 1644), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -50), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -49), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -48), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -47), (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -46), 0), 100000000, 0, -45), 0), 100000000, 0, -44), 0), 100000000, 0, -43), 0), 100000000, 0, -42), 0, (("plugins/ssrmatching/ssrmatching.mli", 231, 9547, 9547), ("plugins/ssrmatching/ssrmatching.mli", 231, 9547, 9625), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 48)), 0); (("tag_of_cpattern", 1645), ((Tag1 (0, (Tag3 ((("cpattern", 1616)), 0, (0)), 100000000, 0, -41), (Tag3 ((("ssrtermkind", 1615)), 0, (0)), 100000000, 0, -40), 0), 100000000, 0, -39), 0, (("plugins/ssrmatching/ssrmatching.mli", 235, 9736, 9736), ("plugins/ssrmatching/ssrmatching.mli", 235, 9736, 9781), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 49)), 0); (("loc_of_cpattern", 1646), ((Tag1 (0, (Tag3 ((("cpattern", 1616)), 0, (0)), 100000000, 0, -38), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -37)], (0)), 100000000, 0, -36), 0), 100000000, 0, -35), 0, (("plugins/ssrmatching/ssrmatching.mli", 236, 9782, 9782), ("plugins/ssrmatching/ssrmatching.mli", 236, 9782, 9828), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 51)), 0); (("id_of_pattern", 1647), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -34), (Tag1 (0, (Tag3 ((("pattern", 1621)), 0, (0)), 100000000, 0, -33), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -32)], (0)), 100000000, 0, -31), 0), 100000000, 0, -30), 0), 100000000, 0, -29), 0, (("plugins/ssrmatching/ssrmatching.mli", 237, 9829, 9829), ("plugins/ssrmatching/ssrmatching.mli", 237, 9829, 9889), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 52)), 0); (("is_wildcard", 1648), ((Tag1 (0, (Tag3 ((("cpattern", 1616)), 0, (0)), 100000000, 0, -28), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -27), 0), 100000000, 0, -26), 0, (("plugins/ssrmatching/ssrmatching.mli", 238, 9890, 9890), ("plugins/ssrmatching/ssrmatching.mli", 238, 9890, 9924), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 53)), 0); (("cpattern_of_id", 1649), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -25), (Tag3 ((("cpattern", 1616)), 0, (0)), 100000000, 0, -24), 0), 100000000, 0, -23), 0, (("plugins/ssrmatching/ssrmatching.mli", 239, 9925, 9925), ("plugins/ssrmatching/ssrmatching.mli", 239, 9925, 9968), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 54)), 0); (("pr_constr_pat", 1650), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -22), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -21), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -20), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("plugins/ssrmatching/ssrmatching.mli", 240, 9969, 9969), ("plugins/ssrmatching/ssrmatching.mli", 240, 9969, 10022), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 55)), 0); (("pr_econstr_pat", 1651), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -15), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -14), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "econstr"), 0, (0)), 100000000, 0, -13), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0), 100000000, 0, -10), 0), 100000000, 0, -9), 0, (("plugins/ssrmatching/ssrmatching.mli", 241, 10023, 10023), ("plugins/ssrmatching/ssrmatching.mli", 241, 10023, 10078), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 56)), 0); (("debug", 1652), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -8), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7), 0), 100000000, 0, -6), 0, (("plugins/ssrmatching/ssrmatching.mli", 244, 10132, 10132), ("plugins/ssrmatching/ssrmatching.mli", 244, 10132, 10156), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 57)), 0); (("ssrinstancesof", 1653), ((Tag1 (0, (Tag3 ((("cpattern", 1616)), 0, (0)), 100000000, 0, -5), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4)], (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("plugins/ssrmatching/ssrmatching.mli", 246, 10158, 10158), ("plugins/ssrmatching/ssrmatching.mli", 246, 10158, 10212), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 58)), 0); Tag3 (("Internal", 1654), 0, (Tag1 ([(("wit_rpatternty", 1655), ((Tag3 (Tag1 ((Tag2 ("Genarg")), "genarg_type"), [(Tag3 ((("rpattern", 1623)), 0, (0)), 100000000, 0, -327); (Tag3 ((("rpattern", 1623)), 0, (0)), 100000000, 0, -328); (Tag3 ((("rpattern", 1623)), 0, (0)), 100000000, 0, -329)], (0)), 100000000, 0, -326), 0, (("plugins/ssrmatching/ssrmatching.mli", 252, 10295, 10297), ("plugins/ssrmatching/ssrmatching.mli", 252, 10295, 10367), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 59)), 0); (("glob_rpattern", 1656), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Genintern")), "glob_sign"), 0, (0)), 100000000, 0, -325), (Tag1 (0, (Tag3 ((("rpattern", 1623)), 0, (0)), 100000000, 0, -324), (Tag3 ((("rpattern", 1623)), 0, (0)), 100000000, 0, -323), 0), 100000000, 0, -322), 0), 100000000, 0, -321), 0, (("plugins/ssrmatching/ssrmatching.mli", 253, 10368, 10370), ("plugins/ssrmatching/ssrmatching.mli", 253, 10368, 10433), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 60)), 0); (("subst_rpattern", 1657), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Mod_subst")), "substitution"), 0, (0)), 100000000, 0, -320), (Tag1 (0, (Tag3 ((("rpattern", 1623)), 0, (0)), 100000000, 0, -319), (Tag3 ((("rpattern", 1623)), 0, (0)), 100000000, 0, -318), 0), 100000000, 0, -317), 0), 100000000, 0, -316), 0, (("plugins/ssrmatching/ssrmatching.mli", 254, 10434, 10436), ("plugins/ssrmatching/ssrmatching.mli", 254, 10434, 10503), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 61)), 0); (("interp_rpattern", 1658), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Geninterp")), "interp_sign"), 0, (0)), 100000000, 0, -315), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -314), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -313), (Tag1 (0, (Tag3 ((("rpattern", 1623)), 0, (0)), 100000000, 0, -312), (Tag3 ((("rpattern", 1623)), 0, (0)), 100000000, 0, -311), 0), 100000000, 0, -310), 0), 100000000, 0, -309), 0), 100000000, 0, -308), 0), 100000000, 0, -307), 0, (("plugins/ssrmatching/ssrmatching.mli", 255, 10504, 10506), ("plugins/ssrmatching/ssrmatching.mli", 255, 10504, 10592), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 62)), 0); (("pr_rpattern", 1659), ((Tag1 (0, (Tag3 ((("rpattern", 1623)), 0, (0)), 100000000, 0, -306), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -305), 0), 100000000, 0, -304), 0, (("plugins/ssrmatching/ssrmatching.mli", 256, 10593, 10595), ("plugins/ssrmatching/ssrmatching.mli", 256, 10593, 10629), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 63)), 0); (("mk_rpattern", 1660), ((Tag1 (0, (Tag3 ((("ssrpattern", 1620)), [(Tag3 ((("cpattern", 1616)), 0, (0)), 100000000, 0, -302); (Tag3 ((("cpattern", 1616)), 0, (0)), 100000000, 0, -303)], (0)), 100000000, 0, -301), (Tag3 ((("rpattern", 1623)), 0, (0)), 100000000, 0, -300), 0), 100000000, 0, -299), 0, (("plugins/ssrmatching/ssrmatching.mli", 257, 10630, 10632), ("plugins/ssrmatching/ssrmatching.mli", 257, 10630, 10693), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 64)), 0); (("mk_lterm", 1661), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -298), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Geninterp")), "interp_sign"), 0, (0)), 100000000, 0, -297)], (0)), 100000000, 0, -296), (Tag3 ((("cpattern", 1616)), 0, (0)), 100000000, 0, -295), 0), 100000000, 0, -294), 0), 100000000, 0, -293), 0, (("plugins/ssrmatching/ssrmatching.mli", 258, 10694, 10696), ("plugins/ssrmatching/ssrmatching.mli", 258, 10694, 10777), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 65)), 0); (("mk_term", 1662), ((Tag1 (0, (Tag3 ((("ssrtermkind", 1615)), 0, (0)), 100000000, 0, -292), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -291), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Geninterp")), "interp_sign"), 0, (0)), 100000000, 0, -290)], (0)), 100000000, 0, -289), (Tag3 ((("cpattern", 1616)), 0, (0)), 100000000, 0, -288), 0), 100000000, 0, -287), 0), 100000000, 0, -286), 0), 100000000, 0, -285), 0, (("plugins/ssrmatching/ssrmatching.mli", 259, 10778, 10780), ("plugins/ssrmatching/ssrmatching.mli", 259, 10778, 10875), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 66)), 0); (("glob_cpattern", 1663), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Genintern")), "glob_sign"), 0, (0)), 100000000, 0, -284), (Tag1 (0, (Tag3 ((("cpattern", 1616)), 0, (0)), 100000000, 0, -283), (Tag3 ((("cpattern", 1616)), 0, (0)), 100000000, 0, -282), 0), 100000000, 0, -281), 0), 100000000, 0, -280), 0, (("plugins/ssrmatching/ssrmatching.mli", 261, 10877, 10879), ("plugins/ssrmatching/ssrmatching.mli", 261, 10877, 10942), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 67)), 0); (("subst_ssrterm", 1664), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Mod_subst")), "substitution"), 0, (0)), 100000000, 0, -279), (Tag1 (0, (Tag3 ((("cpattern", 1616)), 0, (0)), 100000000, 0, -278), (Tag3 ((("cpattern", 1616)), 0, (0)), 100000000, 0, -277), 0), 100000000, 0, -276), 0), 100000000, 0, -275), 0, (("plugins/ssrmatching/ssrmatching.mli", 262, 10943, 10945), ("plugins/ssrmatching/ssrmatching.mli", 262, 10943, 11011), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 68)), 0); (("interp_ssrterm", 1665), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Geninterp")), "interp_sign"), 0, (0)), 100000000, 0, -274), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -273), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -272), (Tag1 (0, (Tag3 ((("cpattern", 1616)), 0, (0)), 100000000, 0, -271), (Tag3 ((("cpattern", 1616)), 0, (0)), 100000000, 0, -270), 0), 100000000, 0, -269), 0), 100000000, 0, -268), 0), 100000000, 0, -267), 0), 100000000, 0, -266), 0, (("plugins/ssrmatching/ssrmatching.mli", 263, 11012, 11014), ("plugins/ssrmatching/ssrmatching.mli", 263, 11012, 11099), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 69)), 0); (("pr_ssrterm", 1666), ((Tag1 (0, (Tag3 ((("cpattern", 1616)), 0, (0)), 100000000, 0, -265), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -264), 0), 100000000, 0, -263), 0, (("plugins/ssrmatching/ssrmatching.mli", 264, 11100, 11102), ("plugins/ssrmatching/ssrmatching.mli", 264, 11100, 11135), 0), 0, Tag1 ("Ssrmatching_plugin__Ssrmatching", 70)), 0)]), 0, (("plugins/ssrmatching/ssrmatching.mli", 250, 10273, 10273), ("plugins/ssrmatching/ssrmatching.mli", 265, 11136, 11139), 0), Tag1 ("Ssrmatching_plugin__Ssrmatching", 71)), 0, 0)], "Ssrmatching_plugin__Ssrmatching", [("Ssrmatching_plugin__Ssrmatching", ("\179w\221\183\206\226D\143q\135,U\132/XF")); ("Z", ("\253\196\2168\027\199O\134\220\218\031'\1484\233o")); ("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Vmemitcodes", ("wCd\138\165\158DD\241gH\236.\210\197\247")); ("Vmbytecodes", ("\025\021\151\137Dx\149W\236+[\143f\208\160\016")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Unix", (":B72R\011\005Sj\189)\011\239PH\254")); ("UnivSubst", ("\190qu\031mc\130\181\003G]\132\"\219m)")); ("UnivProblem", ("6'\161\018\181\001.\253\000\141a6\171\1727\155")); ("UnivNames", ("%\151_\209%+JM$n\001\232\194n\178N")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UState", ("SD\203\215|\136\n\251\239\208\148\215C\n\167\005")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Summary", ("\148G\135\226\024L3\246\021\028U\146\164`\253\250")); ("Store", ("/dT\252\145\179pq\216{\181\206\190K+U")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Random", ("\020\005Xq\171\026\218\152X\135\254\023\133zK\200")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Ssrmatching_plugin", ("\252\165\024\163\228\161\025W>W\211\000y\230d\014")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("Section", ("\245\207\b\021\142v=\155#w\246}\"4b\006")); ("Safe_typing", (")\250?\164\145\132\241\127\186\152h+\145\"\237l")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("Range", ("\218\130\001r\237\r\144\171\164\021l\155\196\143sg")); ("Proofview_monad", ("\218\196\189S\147\216\129\221\231\224v\228O\024*\239")); ("Proofview", ("\245\140U\027\236\199\199&\242\156\199YG\250tA")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Pattern", ("\195C\140Wb=\022\222\208\227^K\003\020\215X")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("NumTok", ("vd\023^\251\244B\166\145'\156\196-0\027\169")); ("Notation_term", ("5\002\017\217b\193nc>\239\239\237\244\031\173?")); ("Nativevalues", ("8:\007\025e\226c,\001\171\146#l\210\171\152")); ("Nativelib", ("V\239\205Y1\147E:,\176\196Hy\1483|")); ("Nativecode", ("\190\185\255\006m\012\210\163\138Rz\247\15283\183")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Namegen", ("\187\222\224T\255\020\1808-\212*\164\131\177\157x")); ("Monad", ("\244\171T\157\194p\187\160\149\195{\132\222\020\253\148")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Logic_monad", ("\130\157\160Q\163vQ\137\184\2242\209\128\024\220i")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Libnames", ("fp\0255\167\162\209\153\137\161\169#\246\193\003\198")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hook", ("\183\194\223\003\155\169',\187\240a;E\b\1396")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Gramlib__Stream", ("\248\\H\205_76\253\136\146\200\031\165\021=t")); ("Gramlib", ("\154\143\210e\021i\246\176\224\194\220\217\007\145\139A")); ("Glob_term", ("\165=a\227\160\153.\021_$\232\209T\236\153O")); ("Genlambda", ("\170}\024\241\141\222\136S\169\219\2212i\134KI")); ("Geninterp", ("2S\151\191\189\159\004\188;\224d\199|U\004\028")); ("Genintern", ("\152Ac\019=n\235\197\141\224T\162\192\148eg")); ("Genarg", ("\1434\015\001\152\196\005s\156\136\195\185\247\b3\t")); ("Ftactic", ("K\172\205\128\241\162\160\201\202\1561o\180L\206:")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evd", ("\211\205p\193\216\129r\006\239oN\142ar\196\175")); ("Evar_kinds", ("\023L\186\132\218}\254\221\185\198\220\200h\003{\021")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Environ", ("\171b\1579\229<\003Z\147IL\225X\254\182\204")); ("Entries", ("\172\201\198\221Ap\027_{\174\141C\021\";p")); ("EConstr", ("\201aW\156\157;N\004\201V\208\006L\166\211)")); ("Dyn", ("\131z`\205v\2306\007x\027&K.?;\169")); ("Declarations", ("\239\137n\019\030w$\182\166z^{\b\206\163\175")); ("DAst", ("\224/\200)\007\184ni\134\b\139\204\241\005w\212")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Conversion", ("\158\150&\195M\tv\127|\029\158RRK\211A")); ("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constrexpr", ("p'r\245\184chL\183\249\"\213]\1741\237")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CUnix", ("\140Zl\153\167\011J\015\005|th\247OTu")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CEphemeron", ("\204I\179-\206(x4\173\229\250\001PkH\151")); ("CDebug", ("^4\210p7\239!3\138\138\213?\239`\250\157")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])

  end

val push : exn -> Exninfo.iexn
val anomaly : ?loc:Loc.t -> ?info:Exninfo.info -> ?label:string -> Pp.t -> 'a
val is_anomaly : exn -> bool
exception UserError of Pp.t
val user_err : ?loc:Loc.t -> ?info:Exninfo.info -> Pp.t -> 'a
exception Timeout
val register_handler : (exn -> Pp.t option) -> unit
val print : exn -> Pp.t
val iprint : Exninfo.iexn -> Pp.t
val print_no_report : exn -> Pp.t
val iprint_no_report : Exninfo.iexn -> Pp.t
val noncritical : exn -> bool
("DEBUG:rule", [(("push", 378), ((Tag1 (0, (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -56), (Tag3 (Tag1 ((Tag2 ("Exninfo")), "iexn"), 0, (0)), 100000000, 0, -55), 0), 100000000, 0, -54), 0, (("lib/cErrors.mli", 16, 800, 800), ("lib/cErrors.mli", 17, 831, 882), 0), [(("ocaml.deprecated", (("lib/cErrors.mli", 17, 831, 834), ("lib/cErrors.mli", 17, 831, 850), 0)), ([([(Tag1 (Tag2 ("please use [Exninfo.capture]", (("lib/cErrors.mli", 17, 831, 852), ("lib/cErrors.mli", 17, 831, 880), 0), 0)), (("lib/cErrors.mli", 17, 831, 851), ("lib/cErrors.mli", 17, 831, 881), 0), 0, 0)], (("lib/cErrors.mli", 17, 831, 851), ("lib/cErrors.mli", 17, 831, 881), 0))]), (("lib/cErrors.mli", 17, 831, 831), ("lib/cErrors.mli", 17, 831, 882), 0))], Tag1 ("CErrors", 0)), 0); (("anomaly", 379), ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -53)], (0)), 100000000, 0, -52), (Tag1 (Tag1 ("info"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Exninfo")), "info"), 0, (0)), 100000000, 0, -51)], (0)), 100000000, 0, -50), (Tag1 (Tag1 ("label"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -49)], (0)), 100000000, 0, -48), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -47), ((("a")), 100000000, 0, -46), 0), 100000000, 0, -45), 0), 100000000, 0, -44), 0), 100000000, 0, -43), 0), 100000000, 0, -42), 0, (("lib/cErrors.mli", 24, 990, 990), ("lib/cErrors.mli", 24, 990, 1067), 0), 0, Tag1 ("CErrors", 2)), 0); (("is_anomaly", 380), ((Tag1 (0, (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -41), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -40), 0), 100000000, 0, -39), 0, (("lib/cErrors.mli", 28, 1171, 1171), ("lib/cErrors.mli", 28, 1171, 1199), 0), 0, Tag1 ("CErrors", 3)), 0); Tag2 (("UserError", 381), ((Tag3 ("exn", 7)), 0, ([(Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -38)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("CErrors", 4)), 2, 0); (("user_err", 382), ((Tag1 (Tag1 ("loc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Loc")), "t"), 0, (0)), 100000000, 0, -37)], (0)), 100000000, 0, -36), (Tag1 (Tag1 ("info"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Exninfo")), "info"), 0, (0)), 100000000, 0, -35)], (0)), 100000000, 0, -34), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -33), ((("a")), 100000000, 0, -32), 0), 100000000, 0, -31), 0), 100000000, 0, -30), 0), 100000000, 0, -29), 0, (("lib/cErrors.mli", 37, 1521, 1521), ("lib/cErrors.mli", 37, 1521, 1582), 0), 0, Tag1 ("CErrors", 5)), 0); Tag2 (("Timeout", 383), ((Tag3 ("exn", 7)), 0, (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("CErrors", 6)), 2, 0); (("register_handler", 384), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -28), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -27)], (0)), 100000000, 0, -26), 0), 100000000, 0, -25), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -24), 0), 100000000, 0, -23), 0, (("lib/cErrors.mli", 56, 2189, 2189), ("lib/cErrors.mli", 56, 2189, 2240), 0), 0, Tag1 ("CErrors", 7)), 0); (("print", 385), ((Tag1 (0, (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -22), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -21), 0), 100000000, 0, -20), 0, (("lib/cErrors.mli", 59, 2280, 2280), ("lib/cErrors.mli", 59, 2280, 2303), 0), 0, Tag1 ("CErrors", 8)), 0); (("iprint", 386), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Exninfo")), "iexn"), 0, (0)), 100000000, 0, -19), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("lib/cErrors.mli", 60, 2304, 2304), ("lib/cErrors.mli", 60, 2304, 2337), 0), 0, Tag1 ("CErrors", 9)), 0); (("print_no_report", 387), ((Tag1 (0, (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -16), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -15), 0), 100000000, 0, -14), 0, (("lib/cErrors.mli", 64, 2458, 2458), ("lib/cErrors.mli", 64, 2458, 2491), 0), 0, Tag1 ("CErrors", 10)), 0); (("iprint_no_report", 388), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Exninfo")), "iexn"), 0, (0)), 100000000, 0, -13), (Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("lib/cErrors.mli", 65, 2492, 2492), ("lib/cErrors.mli", 65, 2492, 2535), 0), 0, Tag1 ("CErrors", 11)), 0); (("noncritical", 389), ((Tag1 (0, (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -10), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("lib/cErrors.mli", 72, 2822, 2822), ("lib/cErrors.mli", 72, 2822, 2851), 0), 0, Tag1 ("CErrors", 12)), 0); (("register_additional_error_info", 390), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Exninfo")), "info"), 0, (0)), 100000000, 0, -7), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -6)], (0)), 100000000, 0, -5), 0), 100000000, 0, -4), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("lib/cErrors.mli", 77, 3002, 3002), ("lib/cErrors.mli", 79, 3072, 3081), 0), 0, Tag1 ("CErrors", 13)), 0)], "CErrors", [("CErrors", ("\191\rO\167\181\140\161\238!}7\226\157\139\151\224")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
val register_additional_error_info : (Exninfo.info -> Pp.t option) -> unit

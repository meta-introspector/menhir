module Debug :
  sig
    type t
    type force = Before | After | No
    val create : include_cmis:bool -> bool -> t
    val find_loc :
      t ->
      ?force:force ->
      Js_of_ocaml_compiler.Code.loc ->
      Js_of_ocaml_compiler.Parse_info.t option
    val is_empty : t -> bool
    val paths :
      t ->
      units:Js_of_ocaml_compiler.Stdlib.StringSet.t ->
      Js_of_ocaml_compiler.Stdlib.StringSet.t
  end
type one = {
  code : Js_of_ocaml_compiler.Code.program;
  cmis : Js_of_ocaml_compiler.Stdlib.StringSet.t;
  debug : Debug.t;
}
module Toc : sig type t val read : in_channel -> t end
val read_primitives : Toc.t -> in_channel -> string list
val from_exe :
  ?includes:string list ->
  linkall:bool ->
  link_info:bool ->
  include_cmis:bool ->
  ?exported_unit:string list -> ?debug:bool -> in_channel -> one
val from_cmo :
  ?includes:string list ->
  ?include_cmis:bool ->
  ?debug:bool -> Cmo_format.compilation_unit -> in_channel -> one
val from_cma :
  ?includes:string list ->
  ?include_cmis:bool ->
  ?debug:bool -> Cmo_format.library -> in_channel -> one
val from_channel :
  in_channel ->
  [ `Cma of Cmo_format.library | `Cmo of Cmo_format.compilation_unit | `Exe ]
val from_string :
  prims:string array ->
  debug:Instruct.debug_event list array ->
  string -> Js_of_ocaml_compiler.Code.program * Debug.t
val predefined_exceptions :
  unit ->
  Js_of_ocaml_compiler.Code.program * Js_of_ocaml_compiler.Unit_info.t
val link_info :
  symtable:Js_of_ocaml_compiler.Ocaml_compiler.Symtable.GlobalMap.t ->
  primitives:string list ->
  ("DEBUG:rule", [Tag3 (("Debug", 724), 0, (Tag1 ([Tag1 (("t", 735), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("compiler/lib/parse_bytecode.mli", 24, 956, 958), ("compiler/lib/parse_bytecode.mli", 24, 956, 964), 0), 0, 0, 0, Tag1 ("Js_of_ocaml_compiler__Parse_bytecode", 0)), 1, 0); Tag1 (("force", 736), (0, 0, Tag1 ([(("Before", 387), (0), 0, (("compiler/lib/parse_bytecode.mli", 27, 981, 985), ("compiler/lib/parse_bytecode.mli", 27, 981, 993), 0), 0, Tag1 ("Js_of_ocaml_compiler__Parse_bytecode", 2)); (("After", 388), (0), 0, (("compiler/lib/parse_bytecode.mli", 28, 994, 998), ("compiler/lib/parse_bytecode.mli", 28, 994, 1005), 0), 0, Tag1 ("Js_of_ocaml_compiler__Parse_bytecode", 3)); (("No", 389), (0), 0, (("compiler/lib/parse_bytecode.mli", 29, 1006, 1010), ("compiler/lib/parse_bytecode.mli", 29, 1006, 1014), 0), 0, Tag1 ("Js_of_ocaml_compiler__Parse_bytecode", 4))], 0), 1, 0, 0, 0, 0, 0, (("compiler/lib/parse_bytecode.mli", 26, 966, 968), ("compiler/lib/parse_bytecode.mli", 29, 1006, 1014), 0), 0, 1, 0, Tag1 ("Js_of_ocaml_compiler__Parse_bytecode", 1)), 1, 0); (("create", 737), ((Tag1 (("include_cmis"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -117), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -116), (Tag3 ((("t", 735)), 0, (0)), 100000000, 0, -115), 0), 100000000, 0, -114), 0), 100000000, 0, -113), 0, (("compiler/lib/parse_bytecode.mli", 31, 1016, 1018), ("compiler/lib/parse_bytecode.mli", 31, 1016, 1061), 0), 0, Tag1 ("Js_of_ocaml_compiler__Parse_bytecode", 5)), 0); (("find_loc", 738), ((Tag1 (0, (Tag3 ((("t", 735)), 0, (0)), 100000000, 0, -112), (Tag1 (Tag1 ("force"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("force", 736)), 0, (0)), 100000000, 0, -111)], (0)), 100000000, 0, -110), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Js_of_ocaml_compiler")), "Code"), "loc"), 0, (0)), 100000000, 0, -109), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Js_of_ocaml_compiler")), "Parse_info"), "t"), 0, (0)), 100000000, 0, -108)], (0)), 100000000, 0, -107), 0), 100000000, 0, -106), 0), 100000000, 0, -105), 0), 100000000, 0, -104), 0, (("compiler/lib/parse_bytecode.mli", 33, 1063, 1065), ("compiler/lib/parse_bytecode.mli", 33, 1063, 1132), 0), 0, Tag1 ("Js_of_ocaml_compiler__Parse_bytecode", 7)), 0); (("is_empty", 739), ((Tag1 (0, (Tag3 ((("t", 735)), 0, (0)), 100000000, 0, -103), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -102), 0), 100000000, 0, -101), 0, (("compiler/lib/parse_bytecode.mli", 35, 1134, 1136), ("compiler/lib/parse_bytecode.mli", 35, 1134, 1160), 0), 0, Tag1 ("Js_of_ocaml_compiler__Parse_bytecode", 8)), 0); (("paths", 740), ((Tag1 (0, (Tag3 ((("t", 735)), 0, (0)), 100000000, 0, -100), (Tag1 (("units"), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Js_of_ocaml_compiler")), "Stdlib"), "StringSet"), "t"), 0, (0)), 100000000, 0, -99), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Js_of_ocaml_compiler")), "Stdlib"), "StringSet"), "t"), 0, (0)), 100000000, 0, -98), 0), 100000000, 0, -97), 0), 100000000, 0, -96), 0, (("compiler/lib/parse_bytecode.mli", 37, 1162, 1164), ("compiler/lib/parse_bytecode.mli", 37, 1162, 1213), 0), 0, Tag1 ("Js_of_ocaml_compiler__Parse_bytecode", 9)), 0)]), 0, (("compiler/lib/parse_bytecode.mli", 23, 937, 937), ("compiler/lib/parse_bytecode.mli", 38, 1214, 1217), 0), Tag1 ("Js_of_ocaml_compiler__Parse_bytecode", 10)), 0, 0); Tag1 (("one", 725), (0, 0, [[(("code", 527), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Js_of_ocaml_compiler")), "Code"), "program"), 0, (0)), 100000000, 0, -93), (("compiler/lib/parse_bytecode.mli", 41, 1230, 1234), ("compiler/lib/parse_bytecode.mli", 42, 1254, 1257), 0), 0, Tag1 ("Js_of_ocaml_compiler__Parse_bytecode", 12)); (("cmis", 528), 0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Js_of_ocaml_compiler")), "Stdlib"), "StringSet"), "t"), 0, (0)), 100000000, 0, -94), (("compiler/lib/parse_bytecode.mli", 42, 1254, 1258), ("compiler/lib/parse_bytecode.mli", 43, 1277, 1280), 0), 0, Tag1 ("Js_of_ocaml_compiler__Parse_bytecode", 13)); (("debug", 529), 0, (Tag3 (Tag1 ((("Debug", 724)), "t"), 0, (0)), 100000000, 0, -95), (("compiler/lib/parse_bytecode.mli", 43, 1277, 1281), ("compiler/lib/parse_bytecode.mli", 43, 1277, 1296), 0), 0, Tag1 ("Js_of_ocaml_compiler__Parse_bytecode", 14))]], 1, 0, 0, 0, 0, 0, (("compiler/lib/parse_bytecode.mli", 40, 1219, 1219), ("compiler/lib/parse_bytecode.mli", 44, 1297, 1300), 0), 0, 0, 0, Tag1 ("Js_of_ocaml_compiler__Parse_bytecode", 11)), 1, 0); Tag3 (("Toc", 726), 0, (Tag1 ([Tag1 (("t", 741), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("compiler/lib/parse_bytecode.mli", 47, 1319, 1321), ("compiler/lib/parse_bytecode.mli", 47, 1319, 1327), 0), 0, 0, 0, Tag1 ("Js_of_ocaml_compiler__Parse_bytecode", 16)), 1, 0); (("read", 742), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "in_channel"), 0, (0)), 100000000, 0, -120), (Tag3 ((("t", 741)), 0, (0)), 100000000, 0, -119), 0), 100000000, 0, -118), 0, (("compiler/lib/parse_bytecode.mli", 49, 1329, 1331), ("compiler/lib/parse_bytecode.mli", 49, 1329, 1357), 0), 0, Tag1 ("Js_of_ocaml_compiler__Parse_bytecode", 17)), 0)]), 0, (("compiler/lib/parse_bytecode.mli", 46, 1302, 1302), ("compiler/lib/parse_bytecode.mli", 50, 1358, 1361), 0), Tag1 ("Js_of_ocaml_compiler__Parse_bytecode", 18)), 0, 0); (("read_primitives", 727), ((Tag1 (0, (Tag3 (Tag1 ((("Toc", 726)), "t"), 0, (0)), 100000000, 0, -92), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "in_channel"), 0, (0)), 100000000, 0, -91), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -90)], (0)), 100000000, 0, -89), 0), 100000000, 0, -88), 0), 100000000, 0, -87), 0, (("compiler/lib/parse_bytecode.mli", 52, 1363, 1363), ("compiler/lib/parse_bytecode.mli", 52, 1363, 1419), 0), 0, Tag1 ("Js_of_ocaml_compiler__Parse_bytecode", 19)), 0); (("from_exe", 728), ((Tag1 (Tag1 ("includes"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -86)], (0)), 100000000, 0, -85)], (0)), 100000000, 0, -84), (Tag1 (("linkall"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -83), (Tag1 (("link_info"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -82), (Tag1 (("include_cmis"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -81), (Tag1 (Tag1 ("exported_unit"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -80)], (0)), 100000000, 0, -79)], (0)), 100000000, 0, -78), (Tag1 (Tag1 ("debug"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -77)], (0)), 100000000, 0, -76), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "in_channel"), 0, (0)), 100000000, 0, -75), (Tag3 ((("one", 725)), 0, (0)), 100000000, 0, -74), 0), 100000000, 0, -73), 0), 100000000, 0, -72), 0), 100000000, 0, -71), 0), 100000000, 0, -70), 0), 100000000, 0, -69), 0), 100000000, 0, -68), 0), 100000000, 0, -67), 0, (("compiler/lib/parse_bytecode.mli", 54, 1421, 1421), ("compiler/lib/parse_bytecode.mli", 62, 1589, 1597), 0), 0, Tag1 ("Js_of_ocaml_compiler__Parse_bytecode", 20)), 0); (("from_cmo", 729), ((Tag1 (Tag1 ("includes"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -66)], (0)), 100000000, 0, -65)], (0)), 100000000, 0, -64), (Tag1 (Tag1 ("include_cmis"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -63)], (0)), 100000000, 0, -62), (Tag1 (Tag1 ("debug"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -61)], (0)), 100000000, 0, -60), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Cmo_format")), "compilation_unit"), 0, (0)), 100000000, 0, -59), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "in_channel"), 0, (0)), 100000000, 0, -58), (Tag3 ((("one", 725)), 0, (0)), 100000000, 0, -57), 0), 100000000, 0, -56), 0), 100000000, 0, -55), 0), 100000000, 0, -54), 0), 100000000, 0, -53), 0), 100000000, 0, -52), 0, (("compiler/lib/parse_bytecode.mli", 64, 1599, 1599), ("compiler/lib/parse_bytecode.mli", 70, 1731, 1739), 0), 0, Tag1 ("Js_of_ocaml_compiler__Parse_bytecode", 21)), 0); (("from_cma", 730), ((Tag1 (Tag1 ("includes"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -51)], (0)), 100000000, 0, -50)], (0)), 100000000, 0, -49), (Tag1 (Tag1 ("include_cmis"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -48)], (0)), 100000000, 0, -47), (Tag1 (Tag1 ("debug"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -46)], (0)), 100000000, 0, -45), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Cmo_format")), "library"), 0, (0)), 100000000, 0, -44), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "in_channel"), 0, (0)), 100000000, 0, -43), (Tag3 ((("one", 725)), 0, (0)), 100000000, 0, -42), 0), 100000000, 0, -41), 0), 100000000, 0, -40), 0), 100000000, 0, -39), 0), 100000000, 0, -38), 0), 100000000, 0, -37), 0, (("compiler/lib/parse_bytecode.mli", 72, 1741, 1741), ("compiler/lib/parse_bytecode.mli", 78, 1864, 1872), 0), 0, Tag1 ("Js_of_ocaml_compiler__Parse_bytecode", 22)), 0); (("from_channel", 731), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "in_channel"), 0, (0)), 100000000, 0, -36), (Tag8 (([("Cma", (((Tag3 (Tag1 ((Tag2 ("Cmo_format")), "library"), 0, (0)), 100000000, 0, -34)))); ("Cmo", (((Tag3 (Tag1 ((Tag2 ("Cmo_format")), "compilation_unit"), 0, (0)), 100000000, 0, -35)))); ("Exe", (0))], (0, 100000000, 0, -33), 1, 0, 0)), 100000000, 0, -32), 0), 100000000, 0, -31), 0, (("compiler/lib/parse_bytecode.mli", 80, 1874, 1874), ("compiler/lib/parse_bytecode.mli", 82, 1909, 1989), 0), 0, Tag1 ("Js_of_ocaml_compiler__Parse_bytecode", 23)), 0); (("from_string", 732), ((Tag1 (("prims"), (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -30)], (0)), 100000000, 0, -29), (Tag1 (("debug"), (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Instruct")), "debug_event"), 0, (0)), 100000000, 0, -28)], (0)), 100000000, 0, -27)], (0)), 100000000, 0, -26), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -25), (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Js_of_ocaml_compiler")), "Code"), "program"), 0, (0)), 100000000, 0, -23); (Tag3 (Tag1 ((("Debug", 724)), "t"), 0, (0)), 100000000, 0, -24)]), 100000000, 0, -22), 0), 100000000, 0, -21), 0), 100000000, 0, -20), 0), 100000000, 0, -19), 0, (("compiler/lib/parse_bytecode.mli", 84, 1991, 1991), ("compiler/lib/parse_bytecode.mli", 88, 2088, 2115), 0), 0, Tag1 ("Js_of_ocaml_compiler__Parse_bytecode", 24)), 0); (("predefined_exceptions", 733), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -18), (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Js_of_ocaml_compiler")), "Code"), "program"), 0, (0)), 100000000, 0, -16); (Tag3 (Tag1 (Tag1 ((Tag2 ("Js_of_ocaml_compiler")), "Unit_info"), "t"), 0, (0)), 100000000, 0, -17)]), 100000000, 0, -15), 0), 100000000, 0, -14), 0, (("compiler/lib/parse_bytecode.mli", 90, 2117, 2117), ("compiler/lib/parse_bytecode.mli", 90, 2117, 2179), 0), 0, Tag1 ("Js_of_ocaml_compiler__Parse_bytecode", 25)), 0); (("link_info", 734), ((Tag1 (("symtable"), (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Js_of_ocaml_compiler")), "Ocaml_compiler"), "Symtable"), "GlobalMap"), "t"), 0, (0)), 100000000, 0, -13), (Tag1 (("primitives"), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12)], (0)), 100000000, 0, -11), (Tag1 (("crcs"), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -8); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Digest"), "t"), 0, (0)), 100000000, 0, -10)], (0)), 100000000, 0, -9)]), 100000000, 0, -7)], (0)), 100000000, 0, -6), (Tag3 (Tag1 (Tag1 ((Tag2 ("Js_of_ocaml_compiler")), "Code"), "program"), 0, (0)), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("compiler/lib/parse_bytecode.mli", 92, 2181, 2181), ("compiler/lib/parse_bytecode.mli", 96, 2317, 2334), 0), 0, Tag1 ("Js_of_ocaml_compiler__Parse_bytecode", 26)), 0)], "Js_of_ocaml_compiler__Parse_bytecode", [("Js_of_ocaml_compiler__Parse_bytecode", ("3\017\023\1793/\134\194\025\225\151\029P\020\022{")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Types", ("\177\238\029.\220\006\163!\230\015\006\182\133\155\194\166")); ("Type_immediacy", ("\"\127k\011Q\241\211\138\193;8\142\129\141#\251")); ("Subst", ("\021\031\148\223\127\186\189\135\027}\145r\216\143\177\156")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__StringLabels", ("\134F\024\226\216Is#\223\230\234\169Z\206Gc")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Random", ("\020\005Xq\171\026\218\152X\135\254\023\133zK\200")); ("Stdlib__Printf", ("\215<\139]\021\142\224E\245m\198qc(W\229")); ("Stdlib__Printexc", ("\217u\168\235\179oi\167\235\255\025\017%d\192s")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__ListLabels", ("*\194\012\191\020%\170\249m\002\180\178hk\205\220")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Fun", ("\234t\181\000iQ\251,\b\020$\224\233\160\142\210")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Filename", ("z\163\210n\195\247\255\129\029SI\180\152\141h ")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Char", ("\1794\1468\190\138\150g\231\240\140d\191.\212e")); ("Stdlib__BytesLabels", ("\145\128\000\239\186Z.\0310^\247\201\174\\\137R")); ("Stdlib__Bytes", ("C\134\194)\175\222\137p\205\246\244\r\241\164P\209")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__ArrayLabels", ("\029\143d\025\218v\003\007\212jC\235/\205\006\198")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shape", ("\235\127Y\213\025\137=\244\218\181\248N\189\188\216p")); ("Primitive", ("}Shh\162\015|\220A\203\249\232\245G\213\019")); ("Path", ("\012\183\178\025\1298\228*\021r\185\160Y\252\n\026")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Outcometree", ("9\021%\234\211\206\210\004H\165\208\2014\234Q\142")); ("Misc", ("*\026\026\234c\191\131\161\\\203\183\012O\252\153\198")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Load_path", ("\012@\228l\230\164S\172h\1726X\020\252o}")); ("Lambda", ("\180\1419\236'\146K$\128\006\135q\135V\029\180")); ("Js_of_ocaml_compiler__Unit_info", ("J\239\004\150\r1N\2186\238\169VF\230\160\155")); ("Js_of_ocaml_compiler__Stdlib", ("\162;P\232\137\003\012\252\217E\227\201\001\204\163j")); ("Js_of_ocaml_compiler__Parse_info", ("`+\018\231C(v\197\016 .\222N\n\219\229")); ("Js_of_ocaml_compiler__Ocaml_compiler", ("\016\222\131\238\254jX\229\194\173\191\004si\137\141")); ("Js_of_ocaml_compiler__Code", ("\016a\196PfGPO\142UB\129\019g#\027")); ("Js_of_ocaml_compiler", ("\140\150\022\231\129$!^\139\156\170\236r\184~q")); ("Instruct", ("\027\235\000\228\206D>\207TL\254\206\156\193\159\224")); ("Identifiable", ("\004F\207\014\158GU\001\184\214\187%/#;\211")); ("Ident", ("\b9;!\187.\220\163(x\b\174\\\223\020\004")); ("Env", ("\021\n\181\142x\b\169j\227\"\017\248*\178\245\223")); ("Debuginfo", ("\131\251\175\217P\194M\163\022\151\002\005\006\185:\185")); ("Cmo_format", ("\243\160\175b\220T\220\2471\234x\017\158\187\\(")); ("Cmi_format", ("6\177\bU\139\"\023\152=\249\135\174\b\011Cg")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Build_path_prefix_map", ("y\028\167\207D\220\198\216\011\208\172\149\2416\bc")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216"))], [(0)])
crcs:(string * Digest.t option) list -> Js_of_ocaml_compiler.Code.program

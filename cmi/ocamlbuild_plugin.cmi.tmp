module Pathname :
  sig
    type t = string
    val concat : t -> t -> t
    val compare : t -> t -> int
    val equal : t -> t -> bool
    val exists : t -> bool
    val mk : string -> t
    val define_context : string -> string list -> unit
    val include_dirs_of : string -> string list
    val copy : t -> t -> unit
    val to_string : t -> string
    val print : Format.formatter -> t -> unit
    val current_dir_name : t
    val parent_dir_name : t
    val read : t -> string
    val same_contents : t -> t -> bool
    val basename : t -> t
    val dirname : t -> t
    val is_relative : t -> bool
    val readlink : t -> t
    val readdir : t -> t array
    val is_link : t -> bool
    val is_directory : t -> bool
    val add_extension : string -> t -> t
    val check_extension : t -> string -> bool
    val get_extension : t -> string
    val remove_extension : t -> t
    val update_extension : string -> t -> t
    val get_extensions : t -> string
    val remove_extensions : t -> t
    val update_extensions : string -> t -> t
    val print_path_list : Format.formatter -> t list -> unit
    val pwd : t
    val parent : t -> t
    val is_prefix : t -> t -> bool
    val is_implicit : t -> bool
    module Operators :
      sig val ( / ) : t -> t -> t val ( -.- ) : t -> string -> t end
    val link_to_dir : t -> t -> bool
    val normalize : t -> t
  end
module Tags :
  sig
    type elt = string
    type t = Ocamlbuild_pack.Tags.t
    val empty : t
    val add : elt -> t -> t
    val singleton : elt -> t
    val remove : elt -> t -> t
    val union : t -> t -> t
    val inter : t -> t -> t
    val disjoint : t -> t -> bool
    val diff : t -> t -> t
    val cardinal : t -> int
    val elements : t -> elt list
    val min_elt : t -> elt
    val min_elt_opt : t -> elt option
    val max_elt : t -> elt
    val max_elt_opt : t -> elt option
    val choose : t -> elt
    val choose_opt : t -> elt option
    val find : elt -> t -> elt
    val find_opt : elt -> t -> elt option
    val find_first : (elt -> bool) -> t -> elt
    val find_first_opt : (elt -> bool) -> t -> elt option
    val find_last : (elt -> bool) -> t -> elt
    val find_last_opt : (elt -> bool) -> t -> elt option
    val iter : (elt -> unit) -> t -> unit
    val fold : (elt -> 'acc -> 'acc) -> t -> 'acc -> 'acc
    val map : (elt -> elt) -> t -> t
    val filter : (elt -> bool) -> t -> t
    val filter_map : (elt -> elt option) -> t -> t
    val partition : (elt -> bool) -> t -> t * t
    val split : elt -> t -> t * bool * t
    val is_empty : t -> bool
    val mem : elt -> t -> bool
    val equal : t -> t -> bool
    val compare : t -> t -> int
    val subset : t -> t -> bool
    val for_all : (elt -> bool) -> t -> bool
    val exists : (elt -> bool) -> t -> bool
    val to_list : t -> elt list
    val to_seq_from : elt -> t -> elt Seq.t
    val to_seq : t -> elt Seq.t
    val to_rev_seq : t -> elt Seq.t
    val add_seq : elt Seq.t -> t -> t
    val of_seq : elt Seq.t -> t
    val of_list : string list -> t
    val print : Format.formatter -> t -> unit
    val does_match : t -> t -> bool
    module Operators :
      sig
        val ( ++ ) : t -> elt -> t
        val ( -- ) : t -> elt -> t
        val ( +++ ) : t -> elt option -> t
        val ( --- ) : t -> elt option -> t
      end
  end
module Command :
  sig
    type tags = Ocamlbuild_pack.Tags.t
    type pathname = string
    type t =
      Ocamlbuild_pack.Command.t =
        Seq of t list
      | Cmd of spec
      | Echo of string list * pathname
      | Nop
    and spec =
      Ocamlbuild_pack.Command.spec =
        N
      | S of spec list
      | A of string
      | P of pathname
      | Px of pathname
      | Sh of string
      | T of tags
      | V of string
      | Quote of spec
    val atomize : string list -> spec
    val atomize_paths : string list -> spec
    val execute : ?quiet:bool -> ?pretend:bool -> t -> unit
    val execute_many :
      ?quiet:bool -> ?pretend:bool -> t list -> (bool list * exn) option
    val setup_virtual_command_solver : string -> (unit -> spec) -> unit
    val search_in_path : string -> string
    val reduce : spec -> spec
    val print : Format.formatter -> t -> unit
    val to_string : t -> string
    val string_of_command_spec : spec -> string
    val string_target_and_tags_of_command_spec :
      spec -> string * string * Ocamlbuild_pack.Tags.t
    val iter_tags : (Ocamlbuild_pack.Tags.t -> unit) -> t -> unit
    val fold_pathnames : (pathname -> 'a -> 'a) -> t -> 'a -> 'a
    val digest : t -> Digest.t
    val jobs : int ref
    val tag_handler : (Ocamlbuild_pack.Tags.t -> spec) ref
    val dump_parallel_stats : unit -> unit
    val deps_of_tags : Ocamlbuild_pack.Tags.t -> pathname list
    val dep : Ocamlbuild_pack.Tags.elt list -> pathname list -> unit
    val pdep :
      Ocamlbuild_pack.Tags.elt list ->
      Ocamlbuild_pack.Tags.elt -> (string -> pathname list) -> unit
    val list_all_deps : unit -> (Ocamlbuild_pack.Tags.t * pathname list) list
    val file_or_exe_exists : string -> bool
  end
module Outcome :
  sig
    type ('a, 'b) t =
      ('a, 'b) Ocamlbuild_pack.My_std.Outcome.t =
        Good of 'a
      | Bad of 'b
    val wrap : ('a -> 'b) -> 'a -> ('b, exn) t
    val ignore_good : ('a, exn) t -> unit
    val good : ('a, exn) t -> 'a
  end
module String : Ocamlbuild_pack.Signatures.STRING
module List : Ocamlbuild_pack.Signatures.LIST
module StringSet :
  sig
    type elt = String.t
    type t
    val empty : t
    val add : elt -> t -> t
    val singleton : elt -> t
    val remove : elt -> t -> t
    val union : t -> t -> t
    val inter : t -> t -> t
    val disjoint : t -> t -> bool
    val diff : t -> t -> t
    val cardinal : t -> int
    val elements : t -> elt list
    val min_elt : t -> elt
    val min_elt_opt : t -> elt option
    val max_elt : t -> elt
    val max_elt_opt : t -> elt option
    val choose : t -> elt
    val choose_opt : t -> elt option
    val find : elt -> t -> elt
    val find_opt : elt -> t -> elt option
    val find_first : (elt -> bool) -> t -> elt
    val find_first_opt : (elt -> bool) -> t -> elt option
    val find_last : (elt -> bool) -> t -> elt
    val find_last_opt : (elt -> bool) -> t -> elt option
    val iter : (elt -> unit) -> t -> unit
    val fold : (elt -> 'acc -> 'acc) -> t -> 'acc -> 'acc
    val map : (elt -> elt) -> t -> t
    val filter : (elt -> bool) -> t -> t
    val filter_map : (elt -> elt option) -> t -> t
    val partition : (elt -> bool) -> t -> t * t
    val split : elt -> t -> t * bool * t
    val is_empty : t -> bool
    val mem : elt -> t -> bool
    val equal : t -> t -> bool
    val compare : t -> t -> int
    val subset : t -> t -> bool
    val for_all : (elt -> bool) -> t -> bool
    val exists : (elt -> bool) -> t -> bool
    val to_list : t -> elt list
    val of_list : elt list -> t
    val to_seq_from : elt -> t -> elt Seq.t
    val to_seq : t -> elt Seq.t
    val to_rev_seq : t -> elt Seq.t
    val add_seq : elt Seq.t -> t -> t
    val of_seq : elt Seq.t -> t
  end
module Options :
  sig
    type command_spec = Command.spec
    val build_dir : string ref
    val include_dirs : string list ref
    val exclude_dirs : string list ref
    val nothing_should_be_rebuilt : bool ref
    val ocamlc : command_spec ref
    val plugin_ocamlc : command_spec ref
    val ocamlopt : command_spec ref
    val plugin_ocamlopt : command_spec ref
    val ocamldep : command_spec ref
    val ocamldoc : command_spec ref
    val ocamlyacc : command_spec ref
    val ocamllex : command_spec ref
    val ocamlrun : command_spec ref
    val ocamlmklib : command_spec ref
    val ocamlmktop : command_spec ref
    val hygiene : bool ref
    val sanitize : bool ref
    val sanitization_script : string ref
    val ignore_auto : bool ref
    val plugin : bool ref
    val just_plugin : bool ref
    val native_plugin : bool ref
    val make_links : bool ref
    val nostdlib : bool ref
    val program_to_execute : bool ref
    val must_clean : bool ref
    val catch_errors : bool ref
    val use_menhir : bool ref
    val show_documentation : bool ref
    val recursive : bool ref
    val use_ocamlfind : bool ref
    val plugin_use_ocamlfind : bool ref
    val targets : string list ref
    val ocaml_libs : string list ref
    val ocaml_mods : string list ref
    val ocaml_pkgs : string list ref
    val ocaml_syntax : string option ref
    val ocaml_cflags : string list ref
    val ocaml_lflags : string list ref
    val ocaml_ppflags : string list ref
    val ocaml_docflags : string list ref
    val ocaml_yaccflags : string list ref
    val ocaml_lexflags : string list ref
    val program_args : string list ref
    val ignore_list : string list ref
    val tags : string list ref
    val tag_lines : string list ref
    val show_tags : string list ref
    val ext_obj : string ref
    val ext_lib : string ref
    val ext_dll : string ref
    val exe : string ref
    val add : Arg.key * Arg.spec * Arg.doc -> unit
  end
module Arch : Ocamlbuild_pack.Signatures.ARCH
module Findlib :
  sig
    type command_spec = Command.spec
    type error =
        Cannot_run_ocamlfind
      | Dependency_not_found of string * string
      | Package_not_found of string
      | Cannot_parse_query of string * string
    exception Findlib_error of error
    val string_of_error : error -> string
    val report_error : error -> 'a
    type package = {
      name : string;
      description : string;
      version : string;
      archives_byte : string;
      archives_native : string;
      link_options : string;
      location : string;
      dependencies : package list;
    }
    val query : string -> package
    val list : unit -> string list
    val topological_closure : package list -> package list
    val include_flags : package list -> command_spec
    val compile_flags_byte : package list -> command_spec
    val compile_flags_native : package list -> command_spec
    val link_flags_byte : package list -> command_spec
    val link_flags_native : package list -> command_spec
  end
val opt_print :
  (Format.formatter -> 'a -> unit) -> Format.formatter -> 'a option -> unit
val the : 'a option -> 'a
val getenv : ?default:string -> string -> string
val with_input_file : ?bin:bool -> string -> (in_channel -> 'a) -> 'a
val with_output_file : ?bin:bool -> string -> (out_channel -> 'a) -> 'a
val with_temp_file : string -> string -> (string -> 'a) -> 'a
val read_file : string -> string
val copy_chan : in_channel -> out_channel -> unit
val copy_file : string -> string -> unit
val print_string_list : Format.formatter -> string list -> unit
val ( !* ) : 'a Lazy.t -> 'a
val ( & ) : ('a -> 'b) -> 'a -> 'b
val ( |> ) : 'a -> ('a -> 'b) -> 'b
val ( @:= ) : 'a list ref -> 'a list -> unit
val memo : ('a -> 'b) -> 'a -> 'b
val memo2 : ('a -> 'b -> 'c) -> 'a -> 'b -> 'c
val memo3 : ('a -> 'b -> 'c -> 'd) -> 'a -> 'b -> 'c -> 'd
type command =
  Command.t =
    Seq of command list
  | Cmd of spec
  | Echo of string list * Pathname.t
  | Nop
and spec =
  Command.spec =
    N
  | S of spec list
  | A of string
  | P of string
  | Px of string
  | Sh of string
  | T of Tags.t
  | V of string
  | Quote of spec
val ( / ) : Pathname.t -> Pathname.t -> Pathname.t
val ( -.- ) : Pathname.t -> string -> Pathname.t
val ( ++ ) : Tags.t -> Tags.elt -> Tags.t
val ( -- ) : Tags.t -> Tags.elt -> Tags.t
val ( +++ ) : Tags.t -> Tags.elt option -> Tags.t
val ( --- ) : Tags.t -> Tags.elt option -> Tags.t
type env = Pathname.t -> Pathname.t
type builder = Pathname.t list list -> (Pathname.t, exn) Outcome.t list
type action = env -> builder -> Command.t
val rule :
  string ->
  ?tags:string list ->
  ?prods:string list ->
  ?deps:string list ->
  ?prod:string ->
  ?dep:string ->
  ?stamp:string ->
  ?insert:[ `after of string | `before of string | `bottom | `top ] ->
  ?doc:string -> action -> unit
val copy_rule :
  string ->
  ?insert:[ `after of string | `before of string | `bottom | `top ] ->
  string -> string -> unit
val clear_rules : unit -> unit
val dep : Tags.elt list -> Pathname.t list -> unit
val pdep : Tags.elt list -> Tags.elt -> (string -> Pathname.t list) -> unit
val flag : Tags.elt list -> Command.spec -> unit
val pflag : Tags.elt list -> Tags.elt -> (string -> Command.spec) -> unit
val flag_and_dep : Tags.elt list -> Command.spec -> unit
val pflag_and_dep :
  Tags.elt list -> Tags.elt -> (string -> Command.spec) -> unit
val mark_tag_used : Tags.elt -> unit
val non_dependency : Pathname.t -> string -> unit
val use_lib : Pathname.t -> Pathname.t -> unit
val ocaml_lib :
  ?extern:bool ->
  ?byte:bool ->
  ?native:bool -> ?dir:Pathname.t -> ?tag_name:string -> Pathname.t -> unit
val expand_module :
  Pathname.t list -> Pathname.t -> string list -> Pathname.t list
val string_list_of_file : Pathname.t -> string list
val module_name_of_pathname : Pathname.t -> string
val mv : Pathname.t -> Pathname.t -> Command.t
val cp : Pathname.t -> Pathname.t -> Command.t
val ln_f : Pathname.t -> Pathname.t -> Command.t
val ln_s : Pathname.t -> Pathname.t -> Command.t
val rm_f : Pathname.t -> Command.t
val chmod : Command.spec -> Pathname.t -> Command.t
val cmp : Pathname.t -> Pathname.t -> Command.t
val hide_package_contents : string -> unit
val tag_file : Pathname.t -> Tags.elt list -> unit
val tag_any : Tags.elt list -> unit
val tags_of_pathname : Pathname.t -> Tags.t
val run_and_read : string -> string
type hook =
    Before_hygiene
  | After_hygiene
  | Before_options
  | After_options
  | Before_rules
  | After_rules("DEBUG:rule", [Tag3 (("Pathname", 1685), 0, (Tag1 ([Tag1 (("t", 1753), (0, 0, 0, 1, ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -516)), 0, 0, 0, 0, (("src/signatures.mli", 121, 4602, 4604), ("src/signatures.mli", 121, 4602, 4619), 0), 0, 0, 0, Tag1 ("Signatures", 42)), 1, 0); (("concat", 1754), ((Tag1 (0, (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -515), (Tag1 (0, (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -514), (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -513), 0), 100000000, 0, -512), 0), 100000000, 0, -511), 0, (("src/signatures.mli", 122, 4620, 4622), ("src/signatures.mli", 122, 4620, 4646), 0), 0, Tag1 ("Signatures", 43)), 0); (("compare", 1755), ((Tag1 (0, (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -510), (Tag1 (0, (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -509), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -508), 0), 100000000, 0, -507), 0), 100000000, 0, -506), 0, (("src/signatures.mli", 123, 4647, 4649), ("src/signatures.mli", 123, 4647, 4676), 0), 0, Tag1 ("Signatures", 44)), 0); (("equal", 1756), ((Tag1 (0, (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -505), (Tag1 (0, (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -504), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -503), 0), 100000000, 0, -502), 0), 100000000, 0, -501), 0, (("src/signatures.mli", 124, 4677, 4679), ("src/signatures.mli", 124, 4677, 4705), 0), 0, Tag1 ("Signatures", 45)), 0); (("exists", 1757), ((Tag1 (0, (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -500), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -499), 0), 100000000, 0, -498), 0, (("src/signatures.mli", 125, 4706, 4708), ("src/signatures.mli", 125, 4706, 4730), 0), 0, Tag1 ("Signatures", 46)), 0); (("mk", 1758), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -497), (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -496), 0), 100000000, 0, -495), 0, (("src/signatures.mli", 126, 4731, 4733), ("src/signatures.mli", 126, 4731, 4753), 0), 0, Tag1 ("Signatures", 47)), 0); (("define_context", 1759), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -494), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -493)], (0)), 100000000, 0, -492), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -491), 0), 100000000, 0, -490), 0), 100000000, 0, -489), 0, (("src/signatures.mli", 127, 4754, 4756), ("src/signatures.mli", 127, 4754, 4806), 0), 0, Tag1 ("Signatures", 48)), 0); (("include_dirs_of", 1760), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -488), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -487)], (0)), 100000000, 0, -486), 0), 100000000, 0, -485), 0, (("src/signatures.mli", 128, 4807, 4809), ("src/signatures.mli", 128, 4807, 4852), 0), 0, Tag1 ("Signatures", 49)), 0); (("copy", 1761), ((Tag1 (0, (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -484), (Tag1 (0, (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -483), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -482), 0), 100000000, 0, -481), 0), 100000000, 0, -480), 0, (("src/signatures.mli", 129, 4853, 4855), ("src/signatures.mli", 129, 4853, 4880), 0), 0, Tag1 ("Signatures", 50)), 0); (("to_string", 1762), ((Tag1 (0, (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -479), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -478), 0), 100000000, 0, -477), 0, (("src/signatures.mli", 130, 4881, 4883), ("src/signatures.mli", 130, 4881, 4910), 0), 0, Tag1 ("Signatures", 51)), 0); (("print", 1763), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -476), (Tag1 (0, (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -475), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -474), 0), 100000000, 0, -473), 0), 100000000, 0, -472), 0, (("src/signatures.mli", 131, 4911, 4913), ("src/signatures.mli", 131, 4911, 4954), 0), 0, Tag1 ("Signatures", 52)), 0); (("current_dir_name", 1764), ((Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -471), 0, (("src/signatures.mli", 132, 4955, 4957), ("src/signatures.mli", 132, 4955, 4981), 0), 0, Tag1 ("Signatures", 53)), 0); (("parent_dir_name", 1765), ((Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -470), 0, (("src/signatures.mli", 133, 4982, 4984), ("src/signatures.mli", 133, 4982, 5007), 0), 0, Tag1 ("Signatures", 54)), 0); (("read", 1766), ((Tag1 (0, (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -469), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -468), 0), 100000000, 0, -467), 0, (("src/signatures.mli", 134, 5008, 5010), ("src/signatures.mli", 134, 5008, 5032), 0), 0, Tag1 ("Signatures", 55)), 0); (("same_contents", 1767), ((Tag1 (0, (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -466), (Tag1 (0, (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -465), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -464), 0), 100000000, 0, -463), 0), 100000000, 0, -462), 0, (("src/signatures.mli", 135, 5033, 5035), ("src/signatures.mli", 135, 5033, 5069), 0), 0, Tag1 ("Signatures", 56)), 0); (("basename", 1768), ((Tag1 (0, (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -461), (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -460), 0), 100000000, 0, -459), 0, (("src/signatures.mli", 136, 5070, 5072), ("src/signatures.mli", 136, 5070, 5093), 0), 0, Tag1 ("Signatures", 57)), 0); (("dirname", 1769), ((Tag1 (0, (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -458), (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -457), 0), 100000000, 0, -456), 0, (("src/signatures.mli", 137, 5094, 5096), ("src/signatures.mli", 137, 5094, 5116), 0), 0, Tag1 ("Signatures", 58)), 0); (("is_relative", 1770), ((Tag1 (0, (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -455), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -454), 0), 100000000, 0, -453), 0, (("src/signatures.mli", 138, 5117, 5119), ("src/signatures.mli", 138, 5117, 5146), 0), 0, Tag1 ("Signatures", 59)), 0); (("readlink", 1771), ((Tag1 (0, (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -452), (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -451), 0), 100000000, 0, -450), 0, (("src/signatures.mli", 139, 5147, 5149), ("src/signatures.mli", 139, 5147, 5170), 0), 0, Tag1 ("Signatures", 60)), 0); (("readdir", 1772), ((Tag1 (0, (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -449), (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -448)], (0)), 100000000, 0, -447), 0), 100000000, 0, -446), 0, (("src/signatures.mli", 140, 5171, 5173), ("src/signatures.mli", 140, 5171, 5199), 0), 0, Tag1 ("Signatures", 61)), 0); (("is_link", 1773), ((Tag1 (0, (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -445), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -444), 0), 100000000, 0, -443), 0, (("src/signatures.mli", 141, 5200, 5202), ("src/signatures.mli", 141, 5200, 5225), 0), 0, Tag1 ("Signatures", 62)), 0); (("is_directory", 1774), ((Tag1 (0, (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -442), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -441), 0), 100000000, 0, -440), 0, (("src/signatures.mli", 142, 5226, 5228), ("src/signatures.mli", 142, 5226, 5256), 0), 0, Tag1 ("Signatures", 63)), 0); (("add_extension", 1775), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -439), (Tag1 (0, (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -438), (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -437), 0), 100000000, 0, -436), 0), 100000000, 0, -435), 0, (("src/signatures.mli", 144, 5258, 5260), ("src/signatures.mli", 144, 5258, 5296), 0), 0, Tag1 ("Signatures", 64)), 0); (("check_extension", 1776), ((Tag1 (0, (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -434), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -433), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -432), 0), 100000000, 0, -431), 0), 100000000, 0, -430), 0, (("src/signatures.mli", 145, 5297, 5299), ("src/signatures.mli", 145, 5297, 5340), 0), 0, Tag1 ("Signatures", 65)), 0); (("get_extension", 1777), ((Tag1 (0, (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -429), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -428), 0), 100000000, 0, -427), 0, (("src/signatures.mli", 147, 5342, 5344), ("src/signatures.mli", 147, 5342, 5375), 0), 0, Tag1 ("Signatures", 66)), 0); (("remove_extension", 1778), ((Tag1 (0, (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -426), (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -425), 0), 100000000, 0, -424), 0, (("src/signatures.mli", 148, 5376, 5378), ("src/signatures.mli", 148, 5376, 5407), 0), 0, Tag1 ("Signatures", 67)), 0); (("update_extension", 1779), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -423), (Tag1 (0, (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -422), (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -421), 0), 100000000, 0, -420), 0), 100000000, 0, -419), 0, (("src/signatures.mli", 149, 5408, 5410), ("src/signatures.mli", 149, 5408, 5449), 0), 0, Tag1 ("Signatures", 68)), 0); (("get_extensions", 1780), ((Tag1 (0, (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -418), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -417), 0), 100000000, 0, -416), 0, (("src/signatures.mli", 151, 5451, 5453), ("src/signatures.mli", 151, 5451, 5485), 0), 0, Tag1 ("Signatures", 69)), 0); (("remove_extensions", 1781), ((Tag1 (0, (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -415), (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -414), 0), 100000000, 0, -413), 0, (("src/signatures.mli", 152, 5486, 5488), ("src/signatures.mli", 152, 5486, 5518), 0), 0, Tag1 ("Signatures", 70)), 0); (("update_extensions", 1782), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -412), (Tag1 (0, (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -411), (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -410), 0), 100000000, 0, -409), 0), 100000000, 0, -408), 0, (("src/signatures.mli", 153, 5519, 5521), ("src/signatures.mli", 153, 5519, 5561), 0), 0, Tag1 ("Signatures", 71)), 0); (("print_path_list", 1783), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -407), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -406)], (0)), 100000000, 0, -405), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -404), 0), 100000000, 0, -403), 0), 100000000, 0, -402), 0, (("src/signatures.mli", 155, 5563, 5565), ("src/signatures.mli", 155, 5563, 5621), 0), 0, Tag1 ("Signatures", 72)), 0); (("pwd", 1784), ((Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -401), 0, (("src/signatures.mli", 156, 5622, 5624), ("src/signatures.mli", 156, 5622, 5635), 0), 0, Tag1 ("Signatures", 73)), 0); (("parent", 1785), ((Tag1 (0, (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -400), (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -399), 0), 100000000, 0, -398), 0, (("src/signatures.mli", 157, 5636, 5638), ("src/signatures.mli", 157, 5636, 5657), 0), 0, Tag1 ("Signatures", 74)), 0); (("is_prefix", 1786), ((Tag1 (0, (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -397), (Tag1 (0, (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -396), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -395), 0), 100000000, 0, -394), 0), 100000000, 0, -393), 0, (("src/signatures.mli", 159, 5715, 5717), ("src/signatures.mli", 159, 5715, 5747), 0), 0, Tag1 ("Signatures", 75)), 0); (("is_implicit", 1787), ((Tag1 (0, (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -392), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -391), 0), 100000000, 0, -390), 0, (("src/signatures.mli", 160, 5748, 5750), ("src/signatures.mli", 160, 5748, 5777), 0), 0, Tag1 ("Signatures", 76)), 0); Tag3 (("Operators", 1788), 0, (Tag1 ([(("/", 1791), ((Tag1 (0, (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -526), (Tag1 (0, (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -525), (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -524), 0), 100000000, 0, -523), 0), 100000000, 0, -522), 0, (("src/signatures.mli", 162, 5803, 5807), ("src/signatures.mli", 162, 5803, 5830), 0), 0, Tag1 ("Signatures", 77)), 0); (("-.-", 1792), ((Tag1 (0, (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -521), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -520), (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -519), 0), 100000000, 0, -518), 0), 100000000, 0, -517), 0, (("src/signatures.mli", 163, 5831, 5835), ("src/signatures.mli", 163, 5831, 5865), 0), 0, Tag1 ("Signatures", 78)), 0)]), 0, (("src/signatures.mli", 161, 5778, 5780), ("src/signatures.mli", 164, 5866, 5871), 0), Tag1 ("Signatures", 79)), 0, 0); (("link_to_dir", 1789), ((Tag1 (0, (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -389), (Tag1 (0, (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -388), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -387), 0), 100000000, 0, -386), 0), 100000000, 0, -385), 0, (("src/pathname.mli", 17, 959, 959), ("src/pathname.mli", 17, 959, 991), 0), 0, Tag1 ("Pathname", 0)), 0); (("normalize", 1790), ((Tag1 (0, (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -384), (Tag3 ((("t", 1753)), 0, (0)), 100000000, 0, -383), 0), 100000000, 0, -382), 0, (("src/pathname.mli", 18, 992, 992), ("src/pathname.mli", 18, 992, 1014), 0), 0, Tag1 ("Pathname", 1)), 0)]), 0, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), Tag1 ("", 21)), 0, 0); Tag3 (("Tags", 1686), 0, (Tag1 ([Tag1 (("elt", 1793), (0, 0, 0, 1, ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -764)), 0, 0, 0, 0, (("src/signatures.mli", 102, 3902, 3923), ("src/signatures.mli", 102, 3902, 3940), 0), 0, 0, 0, Tag1 ("Signatures", 32)), 1, 0); Tag1 (("t", 1794), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ocamlbuild_pack")), "Tags"), "t"), 0, (0)), 100000000, 0, -763)), 0, 0, 0, 0, (("set.mli", 74, 2901, 2905), ("set.mli", 74, 2901, 2911), 0), 0, 0, 0, Tag1 ("Stdlib__Set", 4)), 1, 0); (("empty", 1795), ((Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -762), 0, (("set.mli", 77, 2942, 2946), ("set.mli", 77, 2942, 2958), 0), 0, Tag1 ("Stdlib__Set", 5)), 0); (("add", 1796), ((Tag1 (0, (Tag3 ((("elt", 1793)), 0, (0)), 100000000, 0, -761), (Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -760), (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -759), 0), 100000000, 0, -758), 0), 100000000, 0, -757), 0, (("set.mli", 80, 2986, 2990), ("set.mli", 80, 2986, 3012), 0), 0, Tag1 ("Stdlib__Set", 6)), 0); (("singleton", 1797), ((Tag1 (0, (Tag3 ((("elt", 1793)), 0, (0)), 100000000, 0, -756), (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -755), 0), 100000000, 0, -754), 0, (("set.mli", 86, 3278, 3282), ("set.mli", 86, 3278, 3305), 0), 0, Tag1 ("Stdlib__Set", 7)), 0); (("remove", 1798), ((Tag1 (0, (Tag3 ((("elt", 1793)), 0, (0)), 100000000, 0, -753), (Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -752), (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -751), 0), 100000000, 0, -750), 0), 100000000, 0, -749), 0, (("set.mli", 89, 3381, 3385), ("set.mli", 89, 3381, 3410), 0), 0, Tag1 ("Stdlib__Set", 8)), 0); (("union", 1799), ((Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -748), (Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -747), (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -746), 0), 100000000, 0, -745), 0), 100000000, 0, -744), 0, (("set.mli", 95, 3677, 3681), ("set.mli", 95, 3677, 3703), 0), 0, Tag1 ("Stdlib__Set", 9)), 0); (("inter", 1800), ((Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -743), (Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -742), (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -741), 0), 100000000, 0, -740), 0), 100000000, 0, -739), 0, (("set.mli", 98, 3727, 3731), ("set.mli", 98, 3727, 3753), 0), 0, Tag1 ("Stdlib__Set", 10)), 0); (("disjoint", 1801), ((Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -738), (Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -737), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -736), 0), 100000000, 0, -735), 0), 100000000, 0, -734), 0, (("set.mli", 101, 3784, 3788), ("set.mli", 101, 3784, 3816), 0), 0, Tag1 ("Stdlib__Set", 11)), 0); (("diff", 1802), ((Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -733), (Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -732), (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -731), 0), 100000000, 0, -730), 0), 100000000, 0, -729), 0, (("set.mli", 105, 3880, 3884), ("set.mli", 105, 3880, 3905), 0), 0, Tag1 ("Stdlib__Set", 12)), 0); (("cardinal", 1803), ((Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -728), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -727), 0), 100000000, 0, -726), 0, (("set.mli", 109, 4007, 4011), ("set.mli", 109, 4007, 4033), 0), 0, Tag1 ("Stdlib__Set", 13)), 0); (("elements", 1804), ((Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -725), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 1793)), 0, (0)), 100000000, 0, -724)], (0)), 100000000, 0, -723), 0), 100000000, 0, -722), 0, (("set.mli", 114, 4120, 4124), ("set.mli", 114, 4120, 4151), 0), 0, Tag1 ("Stdlib__Set", 14)), 0); (("min_elt", 1805), ((Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -721), (Tag3 ((("elt", 1793)), 0, (0)), 100000000, 0, -720), 0), 100000000, 0, -719), 0, (("set.mli", 120, 4380, 4384), ("set.mli", 120, 4380, 4405), 0), 0, Tag1 ("Stdlib__Set", 15)), 0); (("min_elt_opt", 1806), ((Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -718), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1793)), 0, (0)), 100000000, 0, -717)], (0)), 100000000, 0, -716), 0), 100000000, 0, -715), 0, (("set.mli", 125, 4567, 4571), ("set.mli", 125, 4567, 4603), 0), 0, Tag1 ("Stdlib__Set", 16)), 0); (("max_elt", 1807), ((Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -714), (Tag3 ((("elt", 1793)), 0, (0)), 100000000, 0, -713), 0), 100000000, 0, -712), 0, (("set.mli", 131, 4774, 4778), ("set.mli", 131, 4774, 4799), 0), 0, Tag1 ("Stdlib__Set", 17)), 0); (("max_elt_opt", 1808), ((Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -711), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1793)), 0, (0)), 100000000, 0, -710)], (0)), 100000000, 0, -709), 0), 100000000, 0, -708), 0, (("set.mli", 135, 4890, 4894), ("set.mli", 135, 4890, 4926), 0), 0, Tag1 ("Stdlib__Set", 18)), 0); (("choose", 1809), ((Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -707), (Tag3 ((("elt", 1793)), 0, (0)), 100000000, 0, -706), 0), 100000000, 0, -705), 0, (("set.mli", 140, 5041, 5045), ("set.mli", 140, 5041, 5065), 0), 0, Tag1 ("Stdlib__Set", 19)), 0); (("choose_opt", 1810), ((Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -704), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1793)), 0, (0)), 100000000, 0, -703)], (0)), 100000000, 0, -702), 0), 100000000, 0, -701), 0, (("set.mli", 145, 5263, 5267), ("set.mli", 145, 5263, 5298), 0), 0, Tag1 ("Stdlib__Set", 20)), 0); (("find", 1811), ((Tag1 (0, (Tag3 ((("elt", 1793)), 0, (0)), 100000000, 0, -700), (Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -699), (Tag3 ((("elt", 1793)), 0, (0)), 100000000, 0, -698), 0), 100000000, 0, -697), 0), 100000000, 0, -696), 0, (("set.mli", 153, 5541, 5549), ("set.mli", 153, 5541, 5574), 0), 0, Tag1 ("Stdlib__Set", 21)), 0); (("find_opt", 1812), ((Tag1 (0, (Tag3 ((("elt", 1793)), 0, (0)), 100000000, 0, -695), (Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -694), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1793)), 0, (0)), 100000000, 0, -693)], (0)), 100000000, 0, -692), 0), 100000000, 0, -691), 0), 100000000, 0, -690), 0, (("set.mli", 159, 5752, 5756), ("set.mli", 159, 5752, 5792), 0), 0, Tag1 ("Stdlib__Set", 22)), 0); (("find_first", 1813), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1793)), 0, (0)), 100000000, 0, -689), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -688), 0), 100000000, 0, -687), (Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -686), (Tag3 ((("elt", 1793)), 0, (0)), 100000000, 0, -685), 0), 100000000, 0, -684), 0), 100000000, 0, -683), 0, (("set.mli", 165, 5963, 5967), ("set.mli", 165, 5963, 6008), 0), 0, Tag1 ("Stdlib__Set", 23)), 0); (("find_first_opt", 1814), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1793)), 0, (0)), 100000000, 0, -682), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -681), 0), 100000000, 0, -680), (Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -679), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1793)), 0, (0)), 100000000, 0, -678)], (0)), 100000000, 0, -677), 0), 100000000, 0, -676), 0), 100000000, 0, -675), 0, (("set.mli", 177, 6482, 6486), ("set.mli", 177, 6482, 6538), 0), 0, Tag1 ("Stdlib__Set", 24)), 0); (("find_last", 1815), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1793)), 0, (0)), 100000000, 0, -674), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -673), 0), 100000000, 0, -672), (Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -671), (Tag3 ((("elt", 1793)), 0, (0)), 100000000, 0, -670), 0), 100000000, 0, -669), 0), 100000000, 0, -668), 0, (("set.mli", 184, 6779, 6783), ("set.mli", 184, 6779, 6823), 0), 0, Tag1 ("Stdlib__Set", 25)), 0); (("find_last_opt", 1816), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1793)), 0, (0)), 100000000, 0, -667), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -666), 0), 100000000, 0, -665), (Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -664), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1793)), 0, (0)), 100000000, 0, -663)], (0)), 100000000, 0, -662), 0), 100000000, 0, -661), 0), 100000000, 0, -660), 0, (("set.mli", 190, 7044, 7048), ("set.mli", 190, 7044, 7099), 0), 0, Tag1 ("Stdlib__Set", 26)), 0); (("iter", 1817), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1793)), 0, (0)), 100000000, 0, -659), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -658), 0), 100000000, 0, -657), (Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -656), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -655), 0), 100000000, 0, -654), 0), 100000000, 0, -653), 0, (("set.mli", 198, 7371, 7375), ("set.mli", 198, 7371, 7411), 0), 0, Tag1 ("Stdlib__Set", 27)), 0); (("fold", 1818), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1793)), 0, (0)), 100000000, 0, -652), (Tag1 (0, ((("acc")), 100000000, 0, -648), ((("acc")), 100000000, 0, -648), 0), 100000000, 0, -651), 0), 100000000, 0, -650), (Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -649), (Tag1 (0, ((("acc")), 100000000, 0, -648), ((("acc")), 100000000, 0, -648), 0), 100000000, 0, -647), 0), 100000000, 0, -646), 0), 100000000, 0, -645), 0, (("set.mli", 203, 7616, 7620), ("set.mli", 203, 7616, 7672), 0), 0, Tag1 ("Stdlib__Set", 28)), 0); (("map", 1819), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1793)), 0, (0)), 100000000, 0, -644), (Tag3 ((("elt", 1793)), 0, (0)), 100000000, 0, -643), 0), 100000000, 0, -642), (Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -641), (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -640), 0), 100000000, 0, -639), 0), 100000000, 0, -638), 0, (("set.mli", 209, 7860, 7864), ("set.mli", 209, 7860, 7895), 0), 0, Tag1 ("Stdlib__Set", 29)), 0); (("filter", 1820), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1793)), 0, (0)), 100000000, 0, -637), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -636), 0), 100000000, 0, -635), (Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -634), (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -633), 0), 100000000, 0, -632), 0), 100000000, 0, -631), 0, (("set.mli", 221, 8372, 8376), ("set.mli", 221, 8372, 8411), 0), 0, Tag1 ("Stdlib__Set", 30)), 0); (("filter_map", 1821), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1793)), 0, (0)), 100000000, 0, -630), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1793)), 0, (0)), 100000000, 0, -629)], (0)), 100000000, 0, -628), 0), 100000000, 0, -627), (Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -626), (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -625), 0), 100000000, 0, -624), 0), 100000000, 0, -623), 0, (("set.mli", 228, 8710, 8714), ("set.mli", 228, 8710, 8759), 0), 0, Tag1 ("Stdlib__Set", 31)), 0); (("partition", 1822), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1793)), 0, (0)), 100000000, 0, -622), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -621), 0), 100000000, 0, -620), (Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -619), (Tag2 ([(Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -617); (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -618)]), 100000000, 0, -616), 0), 100000000, 0, -615), 0), 100000000, 0, -614), 0, (("set.mli", 243, 9275, 9279), ("set.mli", 243, 9275, 9321), 0), 0, Tag1 ("Stdlib__Set", 32)), 0); (("split", 1823), ((Tag1 (0, (Tag3 ((("elt", 1793)), 0, (0)), 100000000, 0, -613), (Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -612), (Tag2 ([(Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -609); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -610); (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -611)]), 100000000, 0, -608), 0), 100000000, 0, -607), 0), 100000000, 0, -606), 0, (("set.mli", 249, 9562, 9566), ("set.mli", 249, 9562, 9601), 0), 0, Tag1 ("Stdlib__Set", 33)), 0); (("is_empty", 1824), ((Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -605), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -604), 0), 100000000, 0, -603), 0, (("set.mli", 260, 10020, 10024), ("set.mli", 260, 10020, 10047), 0), 0, Tag1 ("Stdlib__Set", 34)), 0); (("mem", 1825), ((Tag1 (0, (Tag3 ((("elt", 1793)), 0, (0)), 100000000, 0, -602), (Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -601), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -600), 0), 100000000, 0, -599), 0), 100000000, 0, -598), 0, (("set.mli", 263, 10096, 10100), ("set.mli", 263, 10096, 10125), 0), 0, Tag1 ("Stdlib__Set", 35)), 0); (("equal", 1826), ((Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -597), (Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -596), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -595), 0), 100000000, 0, -594), 0), 100000000, 0, -593), 0, (("set.mli", 266, 10190, 10194), ("set.mli", 266, 10190, 10219), 0), 0, Tag1 ("Stdlib__Set", 36)), 0); (("compare", 1827), ((Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -592), (Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -591), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -590), 0), 100000000, 0, -589), 0), 100000000, 0, -588), 0, (("set.mli", 270, 10335, 10339), ("set.mli", 270, 10335, 10365), 0), 0, Tag1 ("Stdlib__Set", 37)), 0); (("subset", 1828), ((Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -587), (Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -586), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -585), 0), 100000000, 0, -584), 0), 100000000, 0, -583), 0, (("set.mli", 274, 10476, 10480), ("set.mli", 274, 10476, 10506), 0), 0, Tag1 ("Stdlib__Set", 38)), 0); (("for_all", 1829), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1793)), 0, (0)), 100000000, 0, -582), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -581), 0), 100000000, 0, -580), (Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -579), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -578), 0), 100000000, 0, -577), 0), 100000000, 0, -576), 0, (("set.mli", 278, 10598, 10602), ("set.mli", 278, 10598, 10641), 0), 0, Tag1 ("Stdlib__Set", 39)), 0); (("exists", 1830), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1793)), 0, (0)), 100000000, 0, -575), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -574), 0), 100000000, 0, -573), (Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -572), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -571), 0), 100000000, 0, -570), 0), 100000000, 0, -569), 0, (("set.mli", 282, 10737, 10741), ("set.mli", 282, 10737, 10779), 0), 0, Tag1 ("Stdlib__Set", 40)), 0); (("to_list", 1831), ((Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -568), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 1793)), 0, (0)), 100000000, 0, -567)], (0)), 100000000, 0, -566), 0), 100000000, 0, -565), 0, (("set.mli", 288, 10922, 10926), ("set.mli", 288, 10922, 10953), 0), 0, Tag1 ("Stdlib__Set", 41)), 0); (("to_seq_from", 1832), ((Tag1 (0, (Tag3 ((("elt", 1793)), 0, (0)), 100000000, 0, -564), (Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -563), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 1793)), 0, (0)), 100000000, 0, -562)], (0)), 100000000, 0, -561), 0), 100000000, 0, -560), 0), 100000000, 0, -559), 0, (("set.mli", 298, 11268, 11272), ("set.mli", 298, 11268, 11311), 0), 0, Tag1 ("Stdlib__Set", 43)), 0); (("to_seq", 1833), ((Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -558), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 1793)), 0, (0)), 100000000, 0, -557)], (0)), 100000000, 0, -556), 0), 100000000, 0, -555), 0, (("set.mli", 303, 11453, 11457), ("set.mli", 303, 11453, 11484), 0), 0, Tag1 ("Stdlib__Set", 44)), 0); (("to_rev_seq", 1834), ((Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -554), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 1793)), 0, (0)), 100000000, 0, -553)], (0)), 100000000, 0, -552), 0), 100000000, 0, -551), 0, (("set.mli", 307, 11562, 11566), ("set.mli", 307, 11562, 11597), 0), 0, Tag1 ("Stdlib__Set", 45)), 0); (("add_seq", 1835), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 1793)), 0, (0)), 100000000, 0, -550)], (0)), 100000000, 0, -549), (Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -548), (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -547), 0), 100000000, 0, -546), 0), 100000000, 0, -545), 0, (("set.mli", 311, 11676, 11680), ("set.mli", 311, 11676, 11713), 0), 0, Tag1 ("Stdlib__Set", 46)), 0); (("of_seq", 1836), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 1793)), 0, (0)), 100000000, 0, -544)], (0)), 100000000, 0, -543), (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -542), 0), 100000000, 0, -541), 0, (("set.mli", 315, 11791, 11795), ("set.mli", 315, 11791, 11822), 0), 0, Tag1 ("Stdlib__Set", 47)), 0); (("of_list", 1837), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -540)], (0)), 100000000, 0, -539), (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -538), 0), 100000000, 0, -537), 0, (("src/signatures.mli", 109, 4288, 4290), ("src/signatures.mli", 109, 4288, 4320), 0), 0, Tag1 ("Signatures", 33)), 0); (("print", 1838), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -536), (Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -535), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -534), 0), 100000000, 0, -533), 0), 100000000, 0, -532), 0, (("src/signatures.mli", 110, 4321, 4323), ("src/signatures.mli", 110, 4321, 4364), 0), 0, Tag1 ("Signatures", 34)), 0); (("does_match", 1839), ((Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -531), (Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -530), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -529), 0), 100000000, 0, -528), 0), 100000000, 0, -527), 0, (("src/signatures.mli", 111, 4365, 4367), ("src/signatures.mli", 111, 4365, 4398), 0), 0, Tag1 ("Signatures", 35)), 0); Tag3 (("Operators", 1840), 0, (Tag1 ([(("++", 1841), ((Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -786), (Tag1 (0, (Tag3 ((("elt", 1793)), 0, (0)), 100000000, 0, -785), (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -784), 0), 100000000, 0, -783), 0), 100000000, 0, -782), 0, (("src/signatures.mli", 113, 4424, 4428), ("src/signatures.mli", 113, 4424, 4454), 0), 0, Tag1 ("Signatures", 36)), 0); (("--", 1842), ((Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -781), (Tag1 (0, (Tag3 ((("elt", 1793)), 0, (0)), 100000000, 0, -780), (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -779), 0), 100000000, 0, -778), 0), 100000000, 0, -777), 0, (("src/signatures.mli", 114, 4455, 4459), ("src/signatures.mli", 114, 4455, 4485), 0), 0, Tag1 ("Signatures", 37)), 0); (("+++", 1843), ((Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -776), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1793)), 0, (0)), 100000000, 0, -775)], (0)), 100000000, 0, -774), (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -773), 0), 100000000, 0, -772), 0), 100000000, 0, -771), 0, (("src/signatures.mli", 115, 4486, 4490), ("src/signatures.mli", 115, 4486, 4524), 0), 0, Tag1 ("Signatures", 38)), 0); (("---", 1844), ((Tag1 (0, (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -770), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1793)), 0, (0)), 100000000, 0, -769)], (0)), 100000000, 0, -768), (Tag3 ((("t", 1794)), 0, (0)), 100000000, 0, -767), 0), 100000000, 0, -766), 0), 100000000, 0, -765), 0, (("src/signatures.mli", 116, 4525, 4529), ("src/signatures.mli", 116, 4525, 4563), 0), 0, Tag1 ("Signatures", 39)), 0)]), 0, (("src/signatures.mli", 112, 4399, 4401), ("src/signatures.mli", 117, 4564, 4569), 0), Tag1 ("Signatures", 40)), 0, 0)]), 0, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), Tag1 ("", 6)), 0, 0); Tag3 (("Command", 1687), 0, (Tag1 ([Tag1 (("tags", 1845), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ocamlbuild_pack")), "Tags"), "t"), 0, (0)), 100000000, 0, -925)), 0, 0, 0, 0, (("src/command.mli", 20, 1062, 1094), ("src/command.mli", 20, 1062, 1112), 0), 0, 0, 0, Tag1 ("Command", 0)), 1, 0); Tag1 (("pathname", 1846), (0, 0, 0, 1, ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -924)), 0, 0, 0, 0, (("src/command.mli", 20, 1062, 1117), ("src/command.mli", 20, 1062, 1139), 0), 0, 0, 0, Tag1 ("Command", 1)), 1, 0); Tag1 (("t", 1847), (0, 0, Tag1 ([(("Seq", 969), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 1847)), 0, (0)), 100000000, 0, -919)], (0)), 100000000, 0, -918)]), 0, (("src/signatures.mli", 176, 6206, 6210), ("src/signatures.mli", 176, 6206, 6225), 0), 0, Tag1 ("Signatures", 85)); (("Cmd", 970), ([(Tag3 ((("spec", 1848)), 0, (0)), 100000000, 0, -920)]), 0, (("src/signatures.mli", 177, 6280, 6284), ("src/signatures.mli", 177, 6280, 6297), 0), 0, Tag1 ("Signatures", 86)); (("Echo", 971), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -922)], (0)), 100000000, 0, -921); (Tag3 ((("pathname", 1846)), 0, (0)), 100000000, 0, -923)]), 0, (("src/signatures.mli", 178, 6360, 6364), ("src/signatures.mli", 178, 6360, 6396), 0), 0, Tag1 ("Signatures", 87)); (("Nop", 972), (0), 0, (("src/signatures.mli", 180, 6481, 6485), ("src/signatures.mli", 180, 6481, 6490), 0), 0, Tag1 ("Signatures", 88))], 0), 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ocamlbuild_pack")), "Command"), "t"), 0, (0)), 100000000, 0, -917)), 0, 0, 0, 0, (("src/signatures.mli", 175, 6195, 6197), ("src/signatures.mli", 180, 6481, 6490), 0), 0, 0, 0, Tag1 ("Signatures", 83)), 1, 0); Tag1 (("spec", 1848), (0, 0, Tag1 ([(("N", 973), (0), 0, (("src/signatures.mli", 184, 6625, 6629), ("src/signatures.mli", 184, 6625, 6632), 0), 0, Tag1 ("Signatures", 89)); (("S", 974), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("spec", 1848)), 0, (0)), 100000000, 0, -909)], (0)), 100000000, 0, -908)]), 0, (("src/signatures.mli", 185, 6667, 6671), ("src/signatures.mli", 185, 6667, 6687), 0), 0, Tag1 ("Signatures", 90)); (("A", 975), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -910)]), 0, (("src/signatures.mli", 186, 6747, 6751), ("src/signatures.mli", 186, 6747, 6764), 0), 0, Tag1 ("Signatures", 91)); (("P", 976), ([(Tag3 ((("pathname", 1846)), 0, (0)), 100000000, 0, -911)]), 0, (("src/signatures.mli", 187, 6784, 6788), ("src/signatures.mli", 187, 6784, 6803), 0), 0, Tag1 ("Signatures", 92)); (("Px", 977), ([(Tag3 ((("pathname", 1846)), 0, (0)), 100000000, 0, -912)]), 0, (("src/signatures.mli", 188, 6824, 6828), ("src/signatures.mli", 188, 6824, 6844), 0), 0, Tag1 ("Signatures", 93)); (("Sh", 978), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -913)]), 0, (("src/signatures.mli", 190, 6943, 6947), ("src/signatures.mli", 190, 6943, 6961), 0), 0, Tag1 ("Signatures", 94)); (("T", 979), ([(Tag3 ((("tags", 1845)), 0, (0)), 100000000, 0, -914)]), 0, (("src/signatures.mli", 191, 7022, 7026), ("src/signatures.mli", 191, 7022, 7037), 0), 0, Tag1 ("Signatures", 95)); (("V", 980), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -915)]), 0, (("src/signatures.mli", 196, 7319, 7323), ("src/signatures.mli", 196, 7319, 7336), 0), 0, Tag1 ("Signatures", 96)); (("Quote", 981), ([(Tag3 ((("spec", 1848)), 0, (0)), 100000000, 0, -916)]), 0, (("src/signatures.mli", 198, 7451, 7455), ("src/signatures.mli", 198, 7451, 7470), 0), 0, Tag1 ("Signatures", 97))], 0), 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Ocamlbuild_pack")), "Command"), "spec"), 0, (0)), 100000000, 0, -907)), 0, 0, 0, 0, (("src/signatures.mli", 183, 6612, 6614), ("src/signatures.mli", 198, 7451, 7470), 0), 0, 0, 0, Tag1 ("Signatures", 84)), 2, 0); (("atomize", 1849), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -906)], (0)), 100000000, 0, -905), (Tag3 ((("spec", 1848)), 0, (0)), 100000000, 0, -904), 0), 100000000, 0, -903), 0, (("src/signatures.mli", 217, 7996, 7998), ("src/signatures.mli", 217, 7996, 8031), 0), 0, Tag1 ("Signatures", 98)), 0); (("atomize_paths", 1850), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -902)], (0)), 100000000, 0, -901), (Tag3 ((("spec", 1848)), 0, (0)), 100000000, 0, -900), 0), 100000000, 0, -899), 0, (("src/signatures.mli", 220, 8116, 8118), ("src/signatures.mli", 220, 8116, 8157), 0), 0, Tag1 ("Signatures", 99)), 0); (("execute", 1851), ((Tag1 (Tag1 ("quiet"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -898)], (0)), 100000000, 0, -897), (Tag1 (Tag1 ("pretend"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -896)], (0)), 100000000, 0, -895), (Tag1 (0, (Tag3 ((("t", 1847)), 0, (0)), 100000000, 0, -894), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -893), 0), 100000000, 0, -892), 0), 100000000, 0, -891), 0), 100000000, 0, -890), 0, (("src/signatures.mli", 223, 8185, 8187), ("src/signatures.mli", 223, 8185, 8242), 0), 0, Tag1 ("Signatures", 100)), 0); (("execute_many", 1852), ((Tag1 (Tag1 ("quiet"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -889)], (0)), 100000000, 0, -888), (Tag1 (Tag1 ("pretend"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -887)], (0)), 100000000, 0, -886), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t", 1847)), 0, (0)), 100000000, 0, -885)], (0)), 100000000, 0, -884), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -882)], (0)), 100000000, 0, -881); (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -883)]), 100000000, 0, -880)], (0)), 100000000, 0, -879), 0), 100000000, 0, -878), 0), 100000000, 0, -877), 0), 100000000, 0, -876), 0, (("src/signatures.mli", 227, 8358, 8360), ("src/signatures.mli", 227, 8358, 8445), 0), 0, Tag1 ("Signatures", 101)), 0); (("setup_virtual_command_solver", 1853), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -875), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -874), (Tag3 ((("spec", 1848)), 0, (0)), 100000000, 0, -873), 0), 100000000, 0, -872), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -871), 0), 100000000, 0, -870), 0), 100000000, 0, -869), 0, (("src/signatures.mli", 232, 8625, 8627), ("src/signatures.mli", 232, 8625, 8694), 0), 0, Tag1 ("Signatures", 102)), 0); (("search_in_path", 1854), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -868), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -867), 0), 100000000, 0, -866), 0, (("src/signatures.mli", 236, 8790, 8792), ("src/signatures.mli", 236, 8790, 8829), 0), 0, Tag1 ("Signatures", 103)), 0); (("reduce", 1855), ((Tag1 (0, (Tag3 ((("spec", 1848)), 0, (0)), 100000000, 0, -865), (Tag3 ((("spec", 1848)), 0, (0)), 100000000, 0, -864), 0), 100000000, 0, -863), 0, (("src/signatures.mli", 240, 8943, 8945), ("src/signatures.mli", 240, 8943, 8970), 0), 0, Tag1 ("Signatures", 104)), 0); (("print", 1856), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -862), (Tag1 (0, (Tag3 ((("t", 1847)), 0, (0)), 100000000, 0, -861), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -860), 0), 100000000, 0, -859), 0), 100000000, 0, -858), 0, (("src/signatures.mli", 243, 9050, 9052), ("src/signatures.mli", 243, 9050, 9093), 0), 0, Tag1 ("Signatures", 105)), 0); (("to_string", 1857), ((Tag1 (0, (Tag3 ((("t", 1847)), 0, (0)), 100000000, 0, -857), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -856), 0), 100000000, 0, -855), 0, (("src/signatures.mli", 246, 9158, 9160), ("src/signatures.mli", 246, 9158, 9187), 0), 0, Tag1 ("Signatures", 106)), 0); (("string_of_command_spec", 1858), ((Tag1 (0, (Tag3 ((("spec", 1848)), 0, (0)), 100000000, 0, -854), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -853), 0), 100000000, 0, -852), 0, (("src/signatures.mli", 250, 9287, 9289), ("src/signatures.mli", 250, 9287, 9332), 0), 0, Tag1 ("Signatures", 107)), 0); (("string_target_and_tags_of_command_spec", 1859), ((Tag1 (0, (Tag3 ((("spec", 1848)), 0, (0)), 100000000, 0, -851), (Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -848); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -849); (Tag3 (Tag1 (Tag1 ((Tag2 ("Ocamlbuild_pack")), "Tags"), "t"), 0, (0)), 100000000, 0, -850)]), 100000000, 0, -847), 0), 100000000, 0, -846), 0, (("src/command.mli", 24, 1198, 1198), ("src/command.mli", 24, 1198, 1275), 0), 0, Tag1 ("Command", 2)), 0); (("iter_tags", 1860), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ocamlbuild_pack")), "Tags"), "t"), 0, (0)), 100000000, 0, -845), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -844), 0), 100000000, 0, -843), (Tag1 (0, (Tag3 ((("t", 1847)), 0, (0)), 100000000, 0, -842), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -841), 0), 100000000, 0, -840), 0), 100000000, 0, -839), 0, (("src/command.mli", 26, 1277, 1277), ("src/command.mli", 26, 1277, 1322), 0), 0, Tag1 ("Command", 3)), 0); (("fold_pathnames", 1861), ((Tag1 (0, (Tag1 (0, (Tag3 ((("pathname", 1846)), 0, (0)), 100000000, 0, -838), (Tag1 (0, ((("a")), 100000000, 0, -834), ((("a")), 100000000, 0, -834), 0), 100000000, 0, -837), 0), 100000000, 0, -836), (Tag1 (0, (Tag3 ((("t", 1847)), 0, (0)), 100000000, 0, -835), (Tag1 (0, ((("a")), 100000000, 0, -834), ((("a")), 100000000, 0, -834), 0), 100000000, 0, -833), 0), 100000000, 0, -832), 0), 100000000, 0, -831), 0, (("src/command.mli", 28, 1324, 1324), ("src/command.mli", 28, 1324, 1384), 0), 0, Tag1 ("Command", 4)), 0); (("digest", 1862), ((Tag1 (0, (Tag3 ((("t", 1847)), 0, (0)), 100000000, 0, -830), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Digest"), "t"), 0, (0)), 100000000, 0, -829), 0), 100000000, 0, -828), 0, (("src/command.mli", 31, 1419, 1419), ("src/command.mli", 31, 1419, 1445), 0), 0, Tag1 ("Command", 5)), 0); (("jobs", 1863), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -827)], (0)), 100000000, 0, -826), 0, (("src/command.mli", 34, 1487, 1487), ("src/command.mli", 34, 1487, 1505), 0), 0, Tag1 ("Command", 6)), 0); (("tag_handler", 1864), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ocamlbuild_pack")), "Tags"), "t"), 0, (0)), 100000000, 0, -825), (Tag3 ((("spec", 1848)), 0, (0)), 100000000, 0, -824), 0), 100000000, 0, -823)], (0)), 100000000, 0, -822), 0, (("src/command.mli", 38, 1651, 1651), ("src/command.mli", 38, 1651, 1689), 0), 0, Tag1 ("Command", 7)), 0); (("dump_parallel_stats", 1865), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -821), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -820), 0), 100000000, 0, -819), 0, (("src/command.mli", 41, 1718, 1718), ("src/command.mli", 41, 1718, 1756), 0), 0, Tag1 ("Command", 8)), 0); (("deps_of_tags", 1866), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ocamlbuild_pack")), "Tags"), "t"), 0, (0)), 100000000, 0, -818), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("pathname", 1846)), 0, (0)), 100000000, 0, -817)], (0)), 100000000, 0, -816), 0), 100000000, 0, -815), 0, (("src/command.mli", 43, 1758, 1758), ("src/command.mli", 43, 1758, 1800), 0), 0, Tag1 ("Command", 9)), 0); (("dep", 1867), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ocamlbuild_pack")), "Tags"), "elt"), 0, (0)), 100000000, 0, -814)], (0)), 100000000, 0, -813), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("pathname", 1846)), 0, (0)), 100000000, 0, -812)], (0)), 100000000, 0, -811), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -810), 0), 100000000, 0, -809), 0), 100000000, 0, -808), 0, (("src/command.mli", 46, 1874, 1874), ("src/command.mli", 46, 1874, 1922), 0), 0, Tag1 ("Command", 10)), 0); (("pdep", 1868), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Ocamlbuild_pack")), "Tags"), "elt"), 0, (0)), 100000000, 0, -807)], (0)), 100000000, 0, -806), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Ocamlbuild_pack")), "Tags"), "elt"), 0, (0)), 100000000, 0, -805), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -804), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("pathname", 1846)), 0, (0)), 100000000, 0, -803)], (0)), 100000000, 0, -802), 0), 100000000, 0, -801), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -800), 0), 100000000, 0, -799), 0), 100000000, 0, -798), 0), 100000000, 0, -797), 0, (("src/command.mli", 48, 1924, 1924), ("src/command.mli", 48, 1924, 1997), 0), 0, Tag1 ("Command", 11)), 0); (("list_all_deps", 1869), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -796), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Ocamlbuild_pack")), "Tags"), "t"), 0, (0)), 100000000, 0, -793); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("pathname", 1846)), 0, (0)), 100000000, 0, -795)], (0)), 100000000, 0, -794)]), 100000000, 0, -792)], (0)), 100000000, 0, -791), 0), 100000000, 0, -790), 0, (("src/command.mli", 50, 1999, 1999), ("src/command.mli", 50, 1999, 2056), 0), 0, Tag1 ("Command", 12)), 0); (("file_or_exe_exists", 1870), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -789), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -788), 0), 100000000, 0, -787), 0, (("src/command.mli", 52, 2058, 2058), ("src/command.mli", 52, 2058, 2096), 0), 0, Tag1 ("Command", 13)), 0)]), 0, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), Tag1 ("", 16)), 0, 0); Tag3 (("Outcome", 1688), 0, (Tag1 ([Tag1 (("t", 1871), ([((("a")), 100000000, 0, -943); ((("b")), 100000000, 0, -944)], 2, Tag1 ([(("Good", 1005), ([((("a")), 100000000, 0, -943)]), 0, (("src/signatures.mli", 332, 13659, 13663), ("src/signatures.mli", 332, 13659, 13675), 0), 0, Tag1 ("Signatures", 121)); (("Bad", 1006), ([((("b")), 100000000, 0, -944)]), 0, (("src/signatures.mli", 333, 13676, 13680), ("src/signatures.mli", 333, 13676, 13691), 0), 0, Tag1 ("Signatures", 122))], 0), 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Ocamlbuild_pack")), "My_std"), "Outcome"), "t"), [((("a")), 100000000, 0, -943); ((("b")), 100000000, 0, -944)], (0)), 100000000, 0, -942)), [25; 25], [0; 0], 0, 0, (("src/signatures.mli", 331, 13640, 13642), ("src/signatures.mli", 333, 13676, 13691), 0), 0, 0, 0, Tag1 ("Signatures", 120)), 1, 0); (("wrap", 1872), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -940), ((("b")), 100000000, 0, -938), 0), 100000000, 0, -941), (Tag1 (0, ((("a")), 100000000, 0, -940), (Tag3 ((("t", 1871)), [((("b")), 100000000, 0, -938); (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -939)], (0)), 100000000, 0, -937), 0), 100000000, 0, -936), 0), 100000000, 0, -935), 0, (("src/signatures.mli", 335, 13693, 13695), ("src/signatures.mli", 335, 13693, 13737), 0), 0, Tag1 ("Signatures", 123)), 0); (("ignore_good", 1873), ((Tag1 (0, (Tag3 ((("t", 1871)), [((("a")), 100000000, 0, -933); (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -934)], (0)), 100000000, 0, -932), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -931), 0), 100000000, 0, -930), 0, (("src/signatures.mli", 336, 13738, 13740), ("src/signatures.mli", 336, 13738, 13777), 0), 0, Tag1 ("Signatures", 124)), 0); (("good", 1874), ((Tag1 (0, (Tag3 ((("t", 1871)), [((("a")), 100000000, 0, -927); (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -929)], (0)), 100000000, 0, -928), ((("a")), 100000000, 0, -927), 0), 100000000, 0, -926), 0, (("src/signatures.mli", 337, 13778, 13780), ("src/signatures.mli", 337, 13778, 13808), 0), 0, Tag1 ("Signatures", 125)), 0)]), 0, (("src/my_std.mli", 26, 1170, 1170), ("src/my_std.mli", 26, 1170, 1205), 0), Tag1 ("My_std", 5)), 0, 0); Tag3 (("String", 1689), 0, ((Tag1 (Tag1 ((Tag2 ("Ocamlbuild_pack")), "Signatures"), "STRING")), 0, (("src/signatures.mli", 544, 20604, 20606), ("src/signatures.mli", 544, 20604, 20631), 0), Tag1 ("Signatures", 254)), 0, 0); Tag3 (("List", 1690), 0, ((Tag1 (Tag1 ((Tag2 ("Ocamlbuild_pack")), "Signatures"), "LIST")), 0, (("src/signatures.mli", 545, 20632, 20634), ("src/signatures.mli", 545, 20632, 20657), 0), Tag1 ("Signatures", 255)), 0, 0); Tag3 (("StringSet", 1691), 0, (Tag1 ([Tag1 (("elt", 1875), (0, 0, 0, 1, ((Tag3 (Tag1 ((("String", 1689)), "t"), 0, (0)), 100000000, 0, -1171)), 0, 0, 0, 0, (("src/signatures.mli", 546, 20658, 20690), ("src/signatures.mli", 546, 20658, 20709), 0), 0, 0, 0, Tag1 ("Signatures", 256)), 1, 0); Tag1 (("t", 1876), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("set.mli", 74, 2901, 2905), ("set.mli", 74, 2901, 2911), 0), 0, 0, 0, Tag1 ("Stdlib__Set", 4)), 1, 0); (("empty", 1877), ((Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1170), 0, (("set.mli", 77, 2942, 2946), ("set.mli", 77, 2942, 2958), 0), 0, Tag1 ("Stdlib__Set", 5)), 0); (("add", 1878), ((Tag1 (0, (Tag3 ((("elt", 1875)), 0, (0)), 100000000, 0, -1169), (Tag1 (0, (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1168), (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1167), 0), 100000000, 0, -1166), 0), 100000000, 0, -1165), 0, (("set.mli", 80, 2986, 2990), ("set.mli", 80, 2986, 3012), 0), 0, Tag1 ("Stdlib__Set", 6)), 0); (("singleton", 1879), ((Tag1 (0, (Tag3 ((("elt", 1875)), 0, (0)), 100000000, 0, -1164), (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1163), 0), 100000000, 0, -1162), 0, (("set.mli", 86, 3278, 3282), ("set.mli", 86, 3278, 3305), 0), 0, Tag1 ("Stdlib__Set", 7)), 0); (("remove", 1880), ((Tag1 (0, (Tag3 ((("elt", 1875)), 0, (0)), 100000000, 0, -1161), (Tag1 (0, (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1160), (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1159), 0), 100000000, 0, -1158), 0), 100000000, 0, -1157), 0, (("set.mli", 89, 3381, 3385), ("set.mli", 89, 3381, 3410), 0), 0, Tag1 ("Stdlib__Set", 8)), 0); (("union", 1881), ((Tag1 (0, (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1156), (Tag1 (0, (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1155), (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1154), 0), 100000000, 0, -1153), 0), 100000000, 0, -1152), 0, (("set.mli", 95, 3677, 3681), ("set.mli", 95, 3677, 3703), 0), 0, Tag1 ("Stdlib__Set", 9)), 0); (("inter", 1882), ((Tag1 (0, (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1151), (Tag1 (0, (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1150), (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1149), 0), 100000000, 0, -1148), 0), 100000000, 0, -1147), 0, (("set.mli", 98, 3727, 3731), ("set.mli", 98, 3727, 3753), 0), 0, Tag1 ("Stdlib__Set", 10)), 0); (("disjoint", 1883), ((Tag1 (0, (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1146), (Tag1 (0, (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1145), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1144), 0), 100000000, 0, -1143), 0), 100000000, 0, -1142), 0, (("set.mli", 101, 3784, 3788), ("set.mli", 101, 3784, 3816), 0), 0, Tag1 ("Stdlib__Set", 11)), 0); (("diff", 1884), ((Tag1 (0, (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1141), (Tag1 (0, (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1140), (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1139), 0), 100000000, 0, -1138), 0), 100000000, 0, -1137), 0, (("set.mli", 105, 3880, 3884), ("set.mli", 105, 3880, 3905), 0), 0, Tag1 ("Stdlib__Set", 12)), 0); (("cardinal", 1885), ((Tag1 (0, (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1136), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1135), 0), 100000000, 0, -1134), 0, (("set.mli", 109, 4007, 4011), ("set.mli", 109, 4007, 4033), 0), 0, Tag1 ("Stdlib__Set", 13)), 0); (("elements", 1886), ((Tag1 (0, (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1133), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 1875)), 0, (0)), 100000000, 0, -1132)], (0)), 100000000, 0, -1131), 0), 100000000, 0, -1130), 0, (("set.mli", 114, 4120, 4124), ("set.mli", 114, 4120, 4151), 0), 0, Tag1 ("Stdlib__Set", 14)), 0); (("min_elt", 1887), ((Tag1 (0, (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1129), (Tag3 ((("elt", 1875)), 0, (0)), 100000000, 0, -1128), 0), 100000000, 0, -1127), 0, (("set.mli", 120, 4380, 4384), ("set.mli", 120, 4380, 4405), 0), 0, Tag1 ("Stdlib__Set", 15)), 0); (("min_elt_opt", 1888), ((Tag1 (0, (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1126), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1875)), 0, (0)), 100000000, 0, -1125)], (0)), 100000000, 0, -1124), 0), 100000000, 0, -1123), 0, (("set.mli", 125, 4567, 4571), ("set.mli", 125, 4567, 4603), 0), 0, Tag1 ("Stdlib__Set", 16)), 0); (("max_elt", 1889), ((Tag1 (0, (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1122), (Tag3 ((("elt", 1875)), 0, (0)), 100000000, 0, -1121), 0), 100000000, 0, -1120), 0, (("set.mli", 131, 4774, 4778), ("set.mli", 131, 4774, 4799), 0), 0, Tag1 ("Stdlib__Set", 17)), 0); (("max_elt_opt", 1890), ((Tag1 (0, (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1119), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1875)), 0, (0)), 100000000, 0, -1118)], (0)), 100000000, 0, -1117), 0), 100000000, 0, -1116), 0, (("set.mli", 135, 4890, 4894), ("set.mli", 135, 4890, 4926), 0), 0, Tag1 ("Stdlib__Set", 18)), 0); (("choose", 1891), ((Tag1 (0, (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1115), (Tag3 ((("elt", 1875)), 0, (0)), 100000000, 0, -1114), 0), 100000000, 0, -1113), 0, (("set.mli", 140, 5041, 5045), ("set.mli", 140, 5041, 5065), 0), 0, Tag1 ("Stdlib__Set", 19)), 0); (("choose_opt", 1892), ((Tag1 (0, (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1112), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1875)), 0, (0)), 100000000, 0, -1111)], (0)), 100000000, 0, -1110), 0), 100000000, 0, -1109), 0, (("set.mli", 145, 5263, 5267), ("set.mli", 145, 5263, 5298), 0), 0, Tag1 ("Stdlib__Set", 20)), 0); (("find", 1893), ((Tag1 (0, (Tag3 ((("elt", 1875)), 0, (0)), 100000000, 0, -1108), (Tag1 (0, (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1107), (Tag3 ((("elt", 1875)), 0, (0)), 100000000, 0, -1106), 0), 100000000, 0, -1105), 0), 100000000, 0, -1104), 0, (("set.mli", 153, 5541, 5549), ("set.mli", 153, 5541, 5574), 0), 0, Tag1 ("Stdlib__Set", 21)), 0); (("find_opt", 1894), ((Tag1 (0, (Tag3 ((("elt", 1875)), 0, (0)), 100000000, 0, -1103), (Tag1 (0, (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1102), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1875)), 0, (0)), 100000000, 0, -1101)], (0)), 100000000, 0, -1100), 0), 100000000, 0, -1099), 0), 100000000, 0, -1098), 0, (("set.mli", 159, 5752, 5756), ("set.mli", 159, 5752, 5792), 0), 0, Tag1 ("Stdlib__Set", 22)), 0); (("find_first", 1895), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1875)), 0, (0)), 100000000, 0, -1097), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1096), 0), 100000000, 0, -1095), (Tag1 (0, (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1094), (Tag3 ((("elt", 1875)), 0, (0)), 100000000, 0, -1093), 0), 100000000, 0, -1092), 0), 100000000, 0, -1091), 0, (("set.mli", 165, 5963, 5967), ("set.mli", 165, 5963, 6008), 0), 0, Tag1 ("Stdlib__Set", 23)), 0); (("find_first_opt", 1896), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1875)), 0, (0)), 100000000, 0, -1090), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1089), 0), 100000000, 0, -1088), (Tag1 (0, (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1087), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1875)), 0, (0)), 100000000, 0, -1086)], (0)), 100000000, 0, -1085), 0), 100000000, 0, -1084), 0), 100000000, 0, -1083), 0, (("set.mli", 177, 6482, 6486), ("set.mli", 177, 6482, 6538), 0), 0, Tag1 ("Stdlib__Set", 24)), 0); (("find_last", 1897), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1875)), 0, (0)), 100000000, 0, -1082), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1081), 0), 100000000, 0, -1080), (Tag1 (0, (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1079), (Tag3 ((("elt", 1875)), 0, (0)), 100000000, 0, -1078), 0), 100000000, 0, -1077), 0), 100000000, 0, -1076), 0, (("set.mli", 184, 6779, 6783), ("set.mli", 184, 6779, 6823), 0), 0, Tag1 ("Stdlib__Set", 25)), 0); (("find_last_opt", 1898), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1875)), 0, (0)), 100000000, 0, -1075), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1074), 0), 100000000, 0, -1073), (Tag1 (0, (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1072), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1875)), 0, (0)), 100000000, 0, -1071)], (0)), 100000000, 0, -1070), 0), 100000000, 0, -1069), 0), 100000000, 0, -1068), 0, (("set.mli", 190, 7044, 7048), ("set.mli", 190, 7044, 7099), 0), 0, Tag1 ("Stdlib__Set", 26)), 0); (("iter", 1899), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1875)), 0, (0)), 100000000, 0, -1067), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1066), 0), 100000000, 0, -1065), (Tag1 (0, (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1064), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1063), 0), 100000000, 0, -1062), 0), 100000000, 0, -1061), 0, (("set.mli", 198, 7371, 7375), ("set.mli", 198, 7371, 7411), 0), 0, Tag1 ("Stdlib__Set", 27)), 0); (("fold", 1900), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1875)), 0, (0)), 100000000, 0, -1060), (Tag1 (0, ((("acc")), 100000000, 0, -1056), ((("acc")), 100000000, 0, -1056), 0), 100000000, 0, -1059), 0), 100000000, 0, -1058), (Tag1 (0, (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1057), (Tag1 (0, ((("acc")), 100000000, 0, -1056), ((("acc")), 100000000, 0, -1056), 0), 100000000, 0, -1055), 0), 100000000, 0, -1054), 0), 100000000, 0, -1053), 0, (("set.mli", 203, 7616, 7620), ("set.mli", 203, 7616, 7672), 0), 0, Tag1 ("Stdlib__Set", 28)), 0); (("map", 1901), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1875)), 0, (0)), 100000000, 0, -1052), (Tag3 ((("elt", 1875)), 0, (0)), 100000000, 0, -1051), 0), 100000000, 0, -1050), (Tag1 (0, (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1049), (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1048), 0), 100000000, 0, -1047), 0), 100000000, 0, -1046), 0, (("set.mli", 209, 7860, 7864), ("set.mli", 209, 7860, 7895), 0), 0, Tag1 ("Stdlib__Set", 29)), 0); (("filter", 1902), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1875)), 0, (0)), 100000000, 0, -1045), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1044), 0), 100000000, 0, -1043), (Tag1 (0, (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1042), (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1041), 0), 100000000, 0, -1040), 0), 100000000, 0, -1039), 0, (("set.mli", 221, 8372, 8376), ("set.mli", 221, 8372, 8411), 0), 0, Tag1 ("Stdlib__Set", 30)), 0); (("filter_map", 1903), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1875)), 0, (0)), 100000000, 0, -1038), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("elt", 1875)), 0, (0)), 100000000, 0, -1037)], (0)), 100000000, 0, -1036), 0), 100000000, 0, -1035), (Tag1 (0, (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1034), (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1033), 0), 100000000, 0, -1032), 0), 100000000, 0, -1031), 0, (("set.mli", 228, 8710, 8714), ("set.mli", 228, 8710, 8759), 0), 0, Tag1 ("Stdlib__Set", 31)), 0); (("partition", 1904), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1875)), 0, (0)), 100000000, 0, -1030), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1029), 0), 100000000, 0, -1028), (Tag1 (0, (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1027), (Tag2 ([(Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1025); (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1026)]), 100000000, 0, -1024), 0), 100000000, 0, -1023), 0), 100000000, 0, -1022), 0, (("set.mli", 243, 9275, 9279), ("set.mli", 243, 9275, 9321), 0), 0, Tag1 ("Stdlib__Set", 32)), 0); (("split", 1905), ((Tag1 (0, (Tag3 ((("elt", 1875)), 0, (0)), 100000000, 0, -1021), (Tag1 (0, (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1020), (Tag2 ([(Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1017); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1018); (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1019)]), 100000000, 0, -1016), 0), 100000000, 0, -1015), 0), 100000000, 0, -1014), 0, (("set.mli", 249, 9562, 9566), ("set.mli", 249, 9562, 9601), 0), 0, Tag1 ("Stdlib__Set", 33)), 0); (("is_empty", 1906), ((Tag1 (0, (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1013), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1012), 0), 100000000, 0, -1011), 0, (("set.mli", 260, 10020, 10024), ("set.mli", 260, 10020, 10047), 0), 0, Tag1 ("Stdlib__Set", 34)), 0); (("mem", 1907), ((Tag1 (0, (Tag3 ((("elt", 1875)), 0, (0)), 100000000, 0, -1010), (Tag1 (0, (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1009), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1008), 0), 100000000, 0, -1007), 0), 100000000, 0, -1006), 0, (("set.mli", 263, 10096, 10100), ("set.mli", 263, 10096, 10125), 0), 0, Tag1 ("Stdlib__Set", 35)), 0); (("equal", 1908), ((Tag1 (0, (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1005), (Tag1 (0, (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1004), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1003), 0), 100000000, 0, -1002), 0), 100000000, 0, -1001), 0, (("set.mli", 266, 10190, 10194), ("set.mli", 266, 10190, 10219), 0), 0, Tag1 ("Stdlib__Set", 36)), 0); (("compare", 1909), ((Tag1 (0, (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -1000), (Tag1 (0, (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -999), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -998), 0), 100000000, 0, -997), 0), 100000000, 0, -996), 0, (("set.mli", 270, 10335, 10339), ("set.mli", 270, 10335, 10365), 0), 0, Tag1 ("Stdlib__Set", 37)), 0); (("subset", 1910), ((Tag1 (0, (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -995), (Tag1 (0, (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -994), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -993), 0), 100000000, 0, -992), 0), 100000000, 0, -991), 0, (("set.mli", 274, 10476, 10480), ("set.mli", 274, 10476, 10506), 0), 0, Tag1 ("Stdlib__Set", 38)), 0); (("for_all", 1911), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1875)), 0, (0)), 100000000, 0, -990), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -989), 0), 100000000, 0, -988), (Tag1 (0, (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -987), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -986), 0), 100000000, 0, -985), 0), 100000000, 0, -984), 0, (("set.mli", 278, 10598, 10602), ("set.mli", 278, 10598, 10641), 0), 0, Tag1 ("Stdlib__Set", 39)), 0); (("exists", 1912), ((Tag1 (0, (Tag1 (0, (Tag3 ((("elt", 1875)), 0, (0)), 100000000, 0, -983), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -982), 0), 100000000, 0, -981), (Tag1 (0, (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -980), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -979), 0), 100000000, 0, -978), 0), 100000000, 0, -977), 0, (("set.mli", 282, 10737, 10741), ("set.mli", 282, 10737, 10779), 0), 0, Tag1 ("Stdlib__Set", 40)), 0); (("to_list", 1913), ((Tag1 (0, (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -976), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 1875)), 0, (0)), 100000000, 0, -975)], (0)), 100000000, 0, -974), 0), 100000000, 0, -973), 0, (("set.mli", 288, 10922, 10926), ("set.mli", 288, 10922, 10953), 0), 0, Tag1 ("Stdlib__Set", 41)), 0); (("of_list", 1914), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("elt", 1875)), 0, (0)), 100000000, 0, -972)], (0)), 100000000, 0, -971), (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -970), 0), 100000000, 0, -969), 0, (("set.mli", 292, 11017, 11021), ("set.mli", 292, 11017, 11047), 0), 0, Tag1 ("Stdlib__Set", 42)), 0); (("to_seq_from", 1915), ((Tag1 (0, (Tag3 ((("elt", 1875)), 0, (0)), 100000000, 0, -968), (Tag1 (0, (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -967), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 1875)), 0, (0)), 100000000, 0, -966)], (0)), 100000000, 0, -965), 0), 100000000, 0, -964), 0), 100000000, 0, -963), 0, (("set.mli", 298, 11268, 11272), ("set.mli", 298, 11268, 11311), 0), 0, Tag1 ("Stdlib__Set", 43)), 0); (("to_seq", 1916), ((Tag1 (0, (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -962), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 1875)), 0, (0)), 100000000, 0, -961)], (0)), 100000000, 0, -960), 0), 100000000, 0, -959), 0, (("set.mli", 303, 11453, 11457), ("set.mli", 303, 11453, 11484), 0), 0, Tag1 ("Stdlib__Set", 44)), 0); (("to_rev_seq", 1917), ((Tag1 (0, (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -958), (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 1875)), 0, (0)), 100000000, 0, -957)], (0)), 100000000, 0, -956), 0), 100000000, 0, -955), 0, (("set.mli", 307, 11562, 11566), ("set.mli", 307, 11562, 11597), 0), 0, Tag1 ("Stdlib__Set", 45)), 0); (("add_seq", 1918), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 1875)), 0, (0)), 100000000, 0, -954)], (0)), 100000000, 0, -953), (Tag1 (0, (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -952), (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -951), 0), 100000000, 0, -950), 0), 100000000, 0, -949), 0, (("set.mli", 311, 11676, 11680), ("set.mli", 311, 11676, 11713), 0), 0, Tag1 ("Stdlib__Set", 46)), 0); (("of_seq", 1919), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Seq"), "t"), [(Tag3 ((("elt", 1875)), 0, (0)), 100000000, 0, -948)], (0)), 100000000, 0, -947), (Tag3 ((("t", 1876)), 0, (0)), 100000000, 0, -946), 0), 100000000, 0, -945), 0, (("set.mli", 315, 11791, 11795), ("set.mli", 315, 11791, 11822), 0), 0, Tag1 ("Stdlib__Set", 47)), 0)]), 0, (("src/signatures.mli", 546, 20658, 20660), ("src/signatures.mli", 546, 20658, 20709), 0), Tag1 ("Signatures", 257)), 0, 0); Tag3 (("Options", 1692), 0, (Tag1 ([Tag1 (("command_spec", 1920), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Command", 1687)), "spec"), 0, (0)), 100000000, 0, -1300)), 0, 0, 0, 0, (("src/signatures.mli", 547, 20710, 20744), ("src/signatures.mli", 547, 20710, 20776), 0), 0, 0, 0, Tag1 ("Signatures", 258)), 1, 0); (("build_dir", 1921), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1299)], (0)), 100000000, 0, -1298), 0, (("src/signatures.mli", 380, 15246, 15248), ("src/signatures.mli", 380, 15246, 15274), 0), 0, Tag1 ("Signatures", 146)), 0); (("include_dirs", 1922), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1297)], (0)), 100000000, 0, -1296)], (0)), 100000000, 0, -1295), 0, (("src/signatures.mli", 381, 15275, 15277), ("src/signatures.mli", 381, 15275, 15311), 0), 0, Tag1 ("Signatures", 147)), 0); (("exclude_dirs", 1923), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1294)], (0)), 100000000, 0, -1293)], (0)), 100000000, 0, -1292), 0, (("src/signatures.mli", 382, 15312, 15314), ("src/signatures.mli", 382, 15312, 15348), 0), 0, Tag1 ("Signatures", 148)), 0); (("nothing_should_be_rebuilt", 1924), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1291)], (0)), 100000000, 0, -1290), 0, (("src/signatures.mli", 383, 15349, 15351), ("src/signatures.mli", 383, 15349, 15391), 0), 0, Tag1 ("Signatures", 149)), 0); (("ocamlc", 1925), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 1920)), 0, (0)), 100000000, 0, -1289)], (0)), 100000000, 0, -1288), 0, (("src/signatures.mli", 384, 15392, 15394), ("src/signatures.mli", 384, 15392, 15423), 0), 0, Tag1 ("Signatures", 150)), 0); (("plugin_ocamlc", 1926), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 1920)), 0, (0)), 100000000, 0, -1287)], (0)), 100000000, 0, -1286), 0, (("src/signatures.mli", 385, 15424, 15426), ("src/signatures.mli", 385, 15424, 15462), 0), 0, Tag1 ("Signatures", 151)), 0); (("ocamlopt", 1927), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 1920)), 0, (0)), 100000000, 0, -1285)], (0)), 100000000, 0, -1284), 0, (("src/signatures.mli", 386, 15463, 15465), ("src/signatures.mli", 386, 15463, 15496), 0), 0, Tag1 ("Signatures", 152)), 0); (("plugin_ocamlopt", 1928), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 1920)), 0, (0)), 100000000, 0, -1283)], (0)), 100000000, 0, -1282), 0, (("src/signatures.mli", 387, 15497, 15499), ("src/signatures.mli", 387, 15497, 15537), 0), 0, Tag1 ("Signatures", 153)), 0); (("ocamldep", 1929), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 1920)), 0, (0)), 100000000, 0, -1281)], (0)), 100000000, 0, -1280), 0, (("src/signatures.mli", 388, 15538, 15540), ("src/signatures.mli", 388, 15538, 15571), 0), 0, Tag1 ("Signatures", 154)), 0); (("ocamldoc", 1930), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 1920)), 0, (0)), 100000000, 0, -1279)], (0)), 100000000, 0, -1278), 0, (("src/signatures.mli", 389, 15572, 15574), ("src/signatures.mli", 389, 15572, 15605), 0), 0, Tag1 ("Signatures", 155)), 0); (("ocamlyacc", 1931), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 1920)), 0, (0)), 100000000, 0, -1277)], (0)), 100000000, 0, -1276), 0, (("src/signatures.mli", 390, 15606, 15608), ("src/signatures.mli", 390, 15606, 15640), 0), 0, Tag1 ("Signatures", 156)), 0); (("ocamllex", 1932), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 1920)), 0, (0)), 100000000, 0, -1275)], (0)), 100000000, 0, -1274), 0, (("src/signatures.mli", 391, 15641, 15643), ("src/signatures.mli", 391, 15641, 15674), 0), 0, Tag1 ("Signatures", 157)), 0); (("ocamlrun", 1933), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 1920)), 0, (0)), 100000000, 0, -1273)], (0)), 100000000, 0, -1272), 0, (("src/signatures.mli", 392, 15675, 15677), ("src/signatures.mli", 392, 15675, 15708), 0), 0, Tag1 ("Signatures", 158)), 0); (("ocamlmklib", 1934), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 1920)), 0, (0)), 100000000, 0, -1271)], (0)), 100000000, 0, -1270), 0, (("src/signatures.mli", 393, 15709, 15711), ("src/signatures.mli", 393, 15709, 15744), 0), 0, Tag1 ("Signatures", 159)), 0); (("ocamlmktop", 1935), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("command_spec", 1920)), 0, (0)), 100000000, 0, -1269)], (0)), 100000000, 0, -1268), 0, (("src/signatures.mli", 394, 15745, 15747), ("src/signatures.mli", 394, 15745, 15780), 0), 0, Tag1 ("Signatures", 160)), 0); (("hygiene", 1936), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1267)], (0)), 100000000, 0, -1266), 0, (("src/signatures.mli", 395, 15781, 15783), ("src/signatures.mli", 395, 15781, 15805), 0), 0, Tag1 ("Signatures", 161)), 0); (("sanitize", 1937), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1265)], (0)), 100000000, 0, -1264), 0, (("src/signatures.mli", 396, 15806, 15808), ("src/signatures.mli", 396, 15806, 15831), 0), 0, Tag1 ("Signatures", 162)), 0); (("sanitization_script", 1938), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1263)], (0)), 100000000, 0, -1262), 0, (("src/signatures.mli", 397, 15832, 15834), ("src/signatures.mli", 397, 15832, 15870), 0), 0, Tag1 ("Signatures", 163)), 0); (("ignore_auto", 1939), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1261)], (0)), 100000000, 0, -1260), 0, (("src/signatures.mli", 398, 15871, 15873), ("src/signatures.mli", 398, 15871, 15899), 0), 0, Tag1 ("Signatures", 164)), 0); (("plugin", 1940), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1259)], (0)), 100000000, 0, -1258), 0, (("src/signatures.mli", 399, 15900, 15902), ("src/signatures.mli", 399, 15900, 15923), 0), 0, Tag1 ("Signatures", 165)), 0); (("just_plugin", 1941), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1257)], (0)), 100000000, 0, -1256), 0, (("src/signatures.mli", 400, 15924, 15926), ("src/signatures.mli", 400, 15924, 15952), 0), 0, Tag1 ("Signatures", 166)), 0); (("native_plugin", 1942), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1255)], (0)), 100000000, 0, -1254), 0, (("src/signatures.mli", 401, 15953, 15955), ("src/signatures.mli", 401, 15953, 15983), 0), 0, Tag1 ("Signatures", 167)), 0); (("make_links", 1943), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1253)], (0)), 100000000, 0, -1252), 0, (("src/signatures.mli", 402, 15984, 15986), ("src/signatures.mli", 402, 15984, 16011), 0), 0, Tag1 ("Signatures", 168)), 0); (("nostdlib", 1944), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1251)], (0)), 100000000, 0, -1250), 0, (("src/signatures.mli", 403, 16012, 16014), ("src/signatures.mli", 403, 16012, 16037), 0), 0, Tag1 ("Signatures", 169)), 0); (("program_to_execute", 1945), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1249)], (0)), 100000000, 0, -1248), 0, (("src/signatures.mli", 404, 16038, 16040), ("src/signatures.mli", 404, 16038, 16073), 0), 0, Tag1 ("Signatures", 170)), 0); (("must_clean", 1946), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1247)], (0)), 100000000, 0, -1246), 0, (("src/signatures.mli", 405, 16074, 16076), ("src/signatures.mli", 405, 16074, 16101), 0), 0, Tag1 ("Signatures", 171)), 0); (("catch_errors", 1947), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1245)], (0)), 100000000, 0, -1244), 0, (("src/signatures.mli", 406, 16102, 16104), ("src/signatures.mli", 406, 16102, 16131), 0), 0, Tag1 ("Signatures", 172)), 0); (("use_menhir", 1948), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1243)], (0)), 100000000, 0, -1242), 0, (("src/signatures.mli", 407, 16132, 16134), ("src/signatures.mli", 407, 16132, 16159), 0), 0, Tag1 ("Signatures", 173)), 0); (("show_documentation", 1949), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1241)], (0)), 100000000, 0, -1240), 0, (("src/signatures.mli", 408, 16160, 16162), ("src/signatures.mli", 408, 16160, 16195), 0), 0, Tag1 ("Signatures", 174)), 0); (("recursive", 1950), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1239)], (0)), 100000000, 0, -1238), 0, (("src/signatures.mli", 409, 16196, 16198), ("src/signatures.mli", 409, 16196, 16222), 0), 0, Tag1 ("Signatures", 175)), 0); (("use_ocamlfind", 1951), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1237)], (0)), 100000000, 0, -1236), 0, (("src/signatures.mli", 410, 16223, 16225), ("src/signatures.mli", 410, 16223, 16253), 0), 0, Tag1 ("Signatures", 176)), 0); (("plugin_use_ocamlfind", 1952), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1235)], (0)), 100000000, 0, -1234), 0, (("src/signatures.mli", 411, 16254, 16256), ("src/signatures.mli", 411, 16254, 16291), 0), 0, Tag1 ("Signatures", 177)), 0); (("targets", 1953), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1233)], (0)), 100000000, 0, -1232)], (0)), 100000000, 0, -1231), 0, (("src/signatures.mli", 413, 16293, 16295), ("src/signatures.mli", 413, 16293, 16324), 0), 0, Tag1 ("Signatures", 178)), 0); (("ocaml_libs", 1954), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1230)], (0)), 100000000, 0, -1229)], (0)), 100000000, 0, -1228), 0, (("src/signatures.mli", 414, 16325, 16327), ("src/signatures.mli", 414, 16325, 16359), 0), 0, Tag1 ("Signatures", 179)), 0); (("ocaml_mods", 1955), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1227)], (0)), 100000000, 0, -1226)], (0)), 100000000, 0, -1225), 0, (("src/signatures.mli", 415, 16360, 16362), ("src/signatures.mli", 415, 16360, 16394), 0), 0, Tag1 ("Signatures", 180)), 0); (("ocaml_pkgs", 1956), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1224)], (0)), 100000000, 0, -1223)], (0)), 100000000, 0, -1222), 0, (("src/signatures.mli", 416, 16395, 16397), ("src/signatures.mli", 416, 16395, 16429), 0), 0, Tag1 ("Signatures", 181)), 0); (("ocaml_syntax", 1957), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1221)], (0)), 100000000, 0, -1220)], (0)), 100000000, 0, -1219), 0, (("src/signatures.mli", 417, 16430, 16432), ("src/signatures.mli", 417, 16430, 16468), 0), 0, Tag1 ("Signatures", 182)), 0); (("ocaml_cflags", 1958), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1218)], (0)), 100000000, 0, -1217)], (0)), 100000000, 0, -1216), 0, (("src/signatures.mli", 418, 16469, 16471), ("src/signatures.mli", 418, 16469, 16505), 0), 0, Tag1 ("Signatures", 183)), 0); (("ocaml_lflags", 1959), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1215)], (0)), 100000000, 0, -1214)], (0)), 100000000, 0, -1213), 0, (("src/signatures.mli", 419, 16506, 16508), ("src/signatures.mli", 419, 16506, 16542), 0), 0, Tag1 ("Signatures", 184)), 0); (("ocaml_ppflags", 1960), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1212)], (0)), 100000000, 0, -1211)], (0)), 100000000, 0, -1210), 0, (("src/signatures.mli", 420, 16543, 16545), ("src/signatures.mli", 420, 16543, 16580), 0), 0, Tag1 ("Signatures", 185)), 0); (("ocaml_docflags", 1961), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1209)], (0)), 100000000, 0, -1208)], (0)), 100000000, 0, -1207), 0, (("src/signatures.mli", 421, 16581, 16583), ("src/signatures.mli", 421, 16581, 16619), 0), 0, Tag1 ("Signatures", 186)), 0); (("ocaml_yaccflags", 1962), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1206)], (0)), 100000000, 0, -1205)], (0)), 100000000, 0, -1204), 0, (("src/signatures.mli", 422, 16620, 16622), ("src/signatures.mli", 422, 16620, 16659), 0), 0, Tag1 ("Signatures", 187)), 0); (("ocaml_lexflags", 1963), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1203)], (0)), 100000000, 0, -1202)], (0)), 100000000, 0, -1201), 0, (("src/signatures.mli", 423, 16660, 16662), ("src/signatures.mli", 423, 16660, 16698), 0), 0, Tag1 ("Signatures", 188)), 0); (("program_args", 1964), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1200)], (0)), 100000000, 0, -1199)], (0)), 100000000, 0, -1198), 0, (("src/signatures.mli", 424, 16699, 16701), ("src/signatures.mli", 424, 16699, 16735), 0), 0, Tag1 ("Signatures", 189)), 0); (("ignore_list", 1965), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1197)], (0)), 100000000, 0, -1196)], (0)), 100000000, 0, -1195), 0, (("src/signatures.mli", 425, 16736, 16738), ("src/signatures.mli", 425, 16736, 16771), 0), 0, Tag1 ("Signatures", 190)), 0); (("tags", 1966), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1194)], (0)), 100000000, 0, -1193)], (0)), 100000000, 0, -1192), 0, (("src/signatures.mli", 426, 16772, 16774), ("src/signatures.mli", 426, 16772, 16800), 0), 0, Tag1 ("Signatures", 191)), 0); (("tag_lines", 1967), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1191)], (0)), 100000000, 0, -1190)], (0)), 100000000, 0, -1189), 0, (("src/signatures.mli", 427, 16801, 16803), ("src/signatures.mli", 427, 16801, 16834), 0), 0, Tag1 ("Signatures", 192)), 0); (("show_tags", 1968), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1188)], (0)), 100000000, 0, -1187)], (0)), 100000000, 0, -1186), 0, (("src/signatures.mli", 428, 16835, 16837), ("src/signatures.mli", 428, 16835, 16868), 0), 0, Tag1 ("Signatures", 193)), 0); (("ext_obj", 1969), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1185)], (0)), 100000000, 0, -1184), 0, (("src/signatures.mli", 430, 16870, 16872), ("src/signatures.mli", 430, 16870, 16896), 0), 0, Tag1 ("Signatures", 194)), 0); (("ext_lib", 1970), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1183)], (0)), 100000000, 0, -1182), 0, (("src/signatures.mli", 431, 16897, 16899), ("src/signatures.mli", 431, 16897, 16923), 0), 0, Tag1 ("Signatures", 195)), 0); (("ext_dll", 1971), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1181)], (0)), 100000000, 0, -1180), 0, (("src/signatures.mli", 432, 16924, 16926), ("src/signatures.mli", 432, 16924, 16950), 0), 0, Tag1 ("Signatures", 196)), 0); (("exe", 1972), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1179)], (0)), 100000000, 0, -1178), 0, (("src/signatures.mli", 433, 16951, 16953), ("src/signatures.mli", 433, 16951, 16973), 0), 0, Tag1 ("Signatures", 197)), 0); (("add", 1973), ((Tag1 (0, (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Arg"), "key"), 0, (0)), 100000000, 0, -1175); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Arg"), "spec"), 0, (0)), 100000000, 0, -1176); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Arg"), "doc"), 0, (0)), 100000000, 0, -1177)]), 100000000, 0, -1174), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1173), 0), 100000000, 0, -1172), 0, (("src/signatures.mli", 435, 16975, 16977), ("src/signatures.mli", 435, 16975, 17023), 0), 0, Tag1 ("Signatures", 198)), 0)]), 0, (("src/signatures.mli", 547, 20710, 20712), ("src/signatures.mli", 547, 20710, 20776), 0), Tag1 ("Signatures", 259)), 0, 0); Tag3 (("Arch", 1693), 0, ((Tag1 (Tag1 ((Tag2 ("Ocamlbuild_pack")), "Signatures"), "ARCH")), 0, (("src/signatures.mli", 548, 20777, 20779), ("src/signatures.mli", 548, 20777, 20802), 0), Tag1 ("Signatures", 260)), 0, 0); Tag3 (("Findlib", 1694), 0, (Tag1 ([Tag1 (("command_spec", 1974), (0, 0, 0, 1, ((Tag3 (Tag1 ((("Command", 1687)), "spec"), 0, (0)), 100000000, 0, -1354)), 0, 0, 0, 0, (("src/signatures.mli", 549, 20803, 20837), ("src/signatures.mli", 549, 20803, 20869), 0), 0, 0, 0, Tag1 ("Signatures", 261)), 1, 0); Tag1 (("error", 1975), (0, 0, Tag1 ([(("Cannot_run_ocamlfind", 1176), (0), 0, (("src/signatures.mli", 477, 18184, 18188), ("src/signatures.mli", 477, 18184, 18210), 0), 0, Tag1 ("Signatures", 223)); (("Dependency_not_found", 1177), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1349); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1350)]), 0, (("src/signatures.mli", 478, 18211, 18215), ("src/signatures.mli", 478, 18211, 18256), 0), 0, Tag1 ("Signatures", 224)); (("Package_not_found", 1178), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1351)]), 0, (("src/signatures.mli", 479, 18283, 18287), ("src/signatures.mli", 479, 18283, 18316), 0), 0, Tag1 ("Signatures", 225)); (("Cannot_parse_query", 1179), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1352); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1353)]), 0, (("src/signatures.mli", 480, 18317, 18321), ("src/signatures.mli", 480, 18317, 18360), 0), 0, Tag1 ("Signatures", 226))], 0), 1, 0, 0, 0, 0, 0, (("src/signatures.mli", 476, 18169, 18171), ("src/signatures.mli", 480, 18317, 18360), 0), 0, 0, 0, Tag1 ("Signatures", 222)), 1, 0); Tag2 (("Findlib_error", 1976), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((("error", 1975)), 0, (0)), 100000000, 0, -1348)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Signatures", 227)), 2, 0); (("string_of_error", 1977), ((Tag1 (0, (Tag3 ((("error", 1975)), 0, (0)), 100000000, 0, -1347), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1346), 0), 100000000, 0, -1345), 0, (("src/signatures.mli", 484, 18425, 18427), ("src/signatures.mli", 484, 18425, 18463), 0), 0, Tag1 ("Signatures", 228)), 0); (("report_error", 1978), ((Tag1 (0, (Tag3 ((("error", 1975)), 0, (0)), 100000000, 0, -1344), ((("a")), 100000000, 0, -1343), 0), 100000000, 0, -1342), 0, (("src/signatures.mli", 487, 18521, 18523), ("src/signatures.mli", 487, 18521, 18552), 0), 0, Tag1 ("Signatures", 229)), 0); Tag1 (("package", 1979), (0, 0, [[(("name", 1184), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1333), (("src/signatures.mli", 491, 18644, 18648), ("src/signatures.mli", 491, 18644, 18661), 0), 0, Tag1 ("Signatures", 231)); (("description", 1185), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1334), (("src/signatures.mli", 492, 18662, 18666), ("src/signatures.mli", 492, 18662, 18686), 0), 0, Tag1 ("Signatures", 232)); (("version", 1186), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1335), (("src/signatures.mli", 493, 18687, 18691), ("src/signatures.mli", 493, 18687, 18707), 0), 0, Tag1 ("Signatures", 233)); (("archives_byte", 1187), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1336), (("src/signatures.mli", 494, 18708, 18712), ("src/signatures.mli", 494, 18708, 18734), 0), 0, Tag1 ("Signatures", 234)); (("archives_native", 1188), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1337), (("src/signatures.mli", 496, 18815, 18819), ("src/signatures.mli", 496, 18815, 18843), 0), 0, Tag1 ("Signatures", 235)); (("link_options", 1189), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1338), (("src/signatures.mli", 498, 18925, 18929), ("src/signatures.mli", 498, 18925, 18950), 0), 0, Tag1 ("Signatures", 236)); (("location", 1190), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1339), (("src/signatures.mli", 499, 18951, 18955), ("src/signatures.mli", 499, 18951, 18972), 0), 0, Tag1 ("Signatures", 237)); (("dependencies", 1191), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("package", 1979)), 0, (0)), 100000000, 0, -1341)], (0)), 100000000, 0, -1340), (("src/signatures.mli", 500, 18973, 18977), ("src/signatures.mli", 500, 18973, 19004), 0), 0, Tag1 ("Signatures", 238))]], 1, 0, 0, 0, 0, 0, (("src/signatures.mli", 490, 18625, 18627), ("src/signatures.mli", 502, 19075, 19078), 0), 0, 0, 0, Tag1 ("Signatures", 230)), 1, 0); (("query", 1980), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1332), (Tag3 ((("package", 1979)), 0, (0)), 100000000, 0, -1331), 0), 100000000, 0, -1330), 0, (("src/signatures.mli", 505, 19112, 19114), ("src/signatures.mli", 505, 19112, 19142), 0), 0, Tag1 ("Signatures", 239)), 0); (("list", 1981), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1329), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -1328)], (0)), 100000000, 0, -1327), 0), 100000000, 0, -1326), 0, (("src/signatures.mli", 509, 19229, 19231), ("src/signatures.mli", 509, 19229, 19260), 0), 0, Tag1 ("Signatures", 240)), 0); (("topological_closure", 1982), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("package", 1979)), 0, (0)), 100000000, 0, -1325)], (0)), 100000000, 0, -1324), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("package", 1979)), 0, (0)), 100000000, 0, -1323)], (0)), 100000000, 0, -1322), 0), 100000000, 0, -1321), 0, (("src/signatures.mli", 512, 19313, 19315), ("src/signatures.mli", 512, 19313, 19368), 0), 0, Tag1 ("Signatures", 241)), 0); (("include_flags", 1983), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("package", 1979)), 0, (0)), 100000000, 0, -1320)], (0)), 100000000, 0, -1319), (Tag3 ((("command_spec", 1974)), 0, (0)), 100000000, 0, -1318), 0), 100000000, 0, -1317), 0, (("src/signatures.mli", 519, 19659, 19661), ("src/signatures.mli", 519, 19659, 19708), 0), 0, Tag1 ("Signatures", 242)), 0); (("compile_flags_byte", 1984), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("package", 1979)), 0, (0)), 100000000, 0, -1316)], (0)), 100000000, 0, -1315), (Tag3 ((("command_spec", 1974)), 0, (0)), 100000000, 0, -1314), 0), 100000000, 0, -1313), 0, (("src/signatures.mli", 522, 19761, 19763), ("src/signatures.mli", 522, 19761, 19815), 0), 0, Tag1 ("Signatures", 243)), 0); (("compile_flags_native", 1985), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("package", 1979)), 0, (0)), 100000000, 0, -1312)], (0)), 100000000, 0, -1311), (Tag3 ((("command_spec", 1974)), 0, (0)), 100000000, 0, -1310), 0), 100000000, 0, -1309), 0, (("src/signatures.mli", 526, 19903, 19905), ("src/signatures.mli", 526, 19903, 19959), 0), 0, Tag1 ("Signatures", 244)), 0); (("link_flags_byte", 1986), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("package", 1979)), 0, (0)), 100000000, 0, -1308)], (0)), 100000000, 0, -1307), (Tag3 ((("command_spec", 1974)), 0, (0)), 100000000, 0, -1306), 0), 100000000, 0, -1305), 0, (("src/signatures.mli", 529, 20022, 20024), ("src/signatures.mli", 529, 20022, 20073), 0), 0, Tag1 ("Signatures", 245)), 0); (("link_flags_native", 1987), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("package", 1979)), 0, (0)), 100000000, 0, -1304)], (0)), 100000000, 0, -1303), (Tag3 ((("command_spec", 1974)), 0, (0)), 100000000, 0, -1302), 0), 100000000, 0, -1301), 0, (("src/signatures.mli", 533, 20207, 20209), ("src/signatures.mli", 533, 20207, 20260), 0), 0, Tag1 ("Signatures", 246)), 0)]), 0, (("src/signatures.mli", 549, 20803, 20805), ("src/signatures.mli", 549, 20803, 20869), 0), Tag1 ("Signatures", 262)), 0, 0); (("opt_print", 1695), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -381), (Tag1 (0, ((("a")), 100000000, 0, -376), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -380), 0), 100000000, 0, -379), 0), 100000000, 0, -378), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -377), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -376)], (0)), 100000000, 0, -375), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -374), 0), 100000000, 0, -373), 0), 100000000, 0, -372), 0), 100000000, 0, -371), 0, (("src/signatures.mli", 341, 13837, 13839), ("src/signatures.mli", 342, 13855, 13932), 0), 0, Tag1 ("Signatures", 127)), 0); (("the", 1696), ((Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -369)], (0)), 100000000, 0, -370), ((("a")), 100000000, 0, -369), 0), 100000000, 0, -368), 0, (("src/signatures.mli", 343, 13933, 13935), ("src/signatures.mli", 343, 13933, 13960), 0), 0, Tag1 ("Signatures", 128)), 0); (("getenv", 1697), ((Tag1 (Tag1 ("default"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -367)], (0)), 100000000, 0, -366), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -365), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -364), 0), 100000000, 0, -363), 0), 100000000, 0, -362), 0, (("src/signatures.mli", 344, 13961, 13963), ("src/signatures.mli", 344, 13961, 14011), 0), 0, Tag1 ("Signatures", 129)), 0); (("with_input_file", 1698), ((Tag1 (Tag1 ("bin"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -361)], (0)), 100000000, 0, -360), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -359), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "in_channel"), 0, (0)), 100000000, 0, -358), ((("a")), 100000000, 0, -356), 0), 100000000, 0, -357), ((("a")), 100000000, 0, -356), 0), 100000000, 0, -355), 0), 100000000, 0, -354), 0), 100000000, 0, -353), 0, (("src/signatures.mli", 345, 14012, 14014), ("src/signatures.mli", 345, 14012, 14083), 0), 0, Tag1 ("Signatures", 130)), 0); (("with_output_file", 1699), ((Tag1 (Tag1 ("bin"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -352)], (0)), 100000000, 0, -351), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -350), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -349), ((("a")), 100000000, 0, -347), 0), 100000000, 0, -348), ((("a")), 100000000, 0, -347), 0), 100000000, 0, -346), 0), 100000000, 0, -345), 0), 100000000, 0, -344), 0, (("src/signatures.mli", 346, 14084, 14086), ("src/signatures.mli", 346, 14084, 14157), 0), 0, Tag1 ("Signatures", 131)), 0); (("with_temp_file", 1700), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -343), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -342), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -341), ((("a")), 100000000, 0, -339), 0), 100000000, 0, -340), ((("a")), 100000000, 0, -339), 0), 100000000, 0, -338), 0), 100000000, 0, -337), 0), 100000000, 0, -336), 0, (("src/signatures.mli", 347, 14158, 14160), ("src/signatures.mli", 347, 14158, 14221), 0), 0, Tag1 ("Signatures", 132)), 0); (("read_file", 1701), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -335), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -334), 0), 100000000, 0, -333), 0, (("src/signatures.mli", 348, 14222, 14224), ("src/signatures.mli", 348, 14222, 14256), 0), 0, Tag1 ("Signatures", 133)), 0); (("copy_chan", 1702), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "in_channel"), 0, (0)), 100000000, 0, -332), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "out_channel"), 0, (0)), 100000000, 0, -331), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -330), 0), 100000000, 0, -329), 0), 100000000, 0, -328), 0, (("src/signatures.mli", 349, 14257, 14259), ("src/signatures.mli", 349, 14257, 14308), 0), 0, Tag1 ("Signatures", 134)), 0); (("copy_file", 1703), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -327), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -326), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -325), 0), 100000000, 0, -324), 0), 100000000, 0, -323), 0, (("src/signatures.mli", 350, 14309, 14311), ("src/signatures.mli", 350, 14309, 14351), 0), 0, Tag1 ("Signatures", 135)), 0); (("print_string_list", 1704), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -322), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -321)], (0)), 100000000, 0, -320), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -319), 0), 100000000, 0, -318), 0), 100000000, 0, -317), 0, (("src/signatures.mli", 351, 14352, 14354), ("src/signatures.mli", 351, 14352, 14417), 0), 0, Tag1 ("Signatures", 136)), 0); (("!*", 1705), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lazy"), "t"), [((("a")), 100000000, 0, -315)], (0)), 100000000, 0, -316), ((("a")), 100000000, 0, -315), 0), 100000000, 0, -314), 0, (("src/signatures.mli", 354, 14479, 14481), ("src/signatures.mli", 354, 14479, 14509), 0), 0, Tag1 ("Signatures", 137)), 0); (("&", 1706), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -312), ((("b")), 100000000, 0, -311), 0), 100000000, 0, -313), (Tag1 (0, ((("a")), 100000000, 0, -312), ((("b")), 100000000, 0, -311), 0), 100000000, 0, -310), 0), 100000000, 0, -309), 0, (("src/signatures.mli", 360, 14705, 14707), ("src/signatures.mli", 360, 14705, 14741), 0), 0, Tag1 ("Signatures", 138)), 0); (("|>", 1707), ((Tag1 (0, ((("a")), 100000000, 0, -308), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -308), ((("b")), 100000000, 0, -306), 0), 100000000, 0, -307), ((("b")), 100000000, 0, -306), 0), 100000000, 0, -305), 0), 100000000, 0, -304), 0, (("src/signatures.mli", 365, 14903, 14905), ("src/signatures.mli", 365, 14903, 14940), 0), 0, Tag1 ("Signatures", 139)), 0); (("@:=", 1708), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -301)], (0)), 100000000, 0, -303)], (0)), 100000000, 0, -302), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((("a")), 100000000, 0, -301)], (0)), 100000000, 0, -300), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -299), 0), 100000000, 0, -298), 0), 100000000, 0, -297), 0, (("src/signatures.mli", 368, 14992, 14994), ("src/signatures.mli", 368, 14992, 15038), 0), 0, Tag1 ("Signatures", 140)), 0); (("memo", 1709), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -295), ((("b")), 100000000, 0, -294), 0), 100000000, 0, -296), (Tag1 (0, ((("a")), 100000000, 0, -295), ((("b")), 100000000, 0, -294), 0), 100000000, 0, -293), 0), 100000000, 0, -292), 0, (("src/signatures.mli", 370, 15040, 15042), ("src/signatures.mli", 370, 15040, 15077), 0), 0, Tag1 ("Signatures", 141)), 0); (("memo2", 1710), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -289), (Tag1 (0, ((("b")), 100000000, 0, -288), ((("c")), 100000000, 0, -287), 0), 100000000, 0, -291), 0), 100000000, 0, -290), (Tag1 (0, ((("a")), 100000000, 0, -289), (Tag1 (0, ((("b")), 100000000, 0, -288), ((("c")), 100000000, 0, -287), 0), 100000000, 0, -286), 0), 100000000, 0, -285), 0), 100000000, 0, -284), 0, (("src/signatures.mli", 372, 15079, 15081), ("src/signatures.mli", 372, 15079, 15129), 0), 0, Tag1 ("Signatures", 142)), 0); (("memo3", 1711), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -280), (Tag1 (0, ((("b")), 100000000, 0, -279), (Tag1 (0, ((("c")), 100000000, 0, -278), ((("d")), 100000000, 0, -277), 0), 100000000, 0, -283), 0), 100000000, 0, -282), 0), 100000000, 0, -281), (Tag1 (0, ((("a")), 100000000, 0, -280), (Tag1 (0, ((("b")), 100000000, 0, -279), (Tag1 (0, ((("c")), 100000000, 0, -278), ((("d")), 100000000, 0, -277), 0), 100000000, 0, -276), 0), 100000000, 0, -275), 0), 100000000, 0, -274), 0), 100000000, 0, -273), 0, (("src/signatures.mli", 374, 15131, 15133), ("src/signatures.mli", 374, 15131, 15193), 0), 0, Tag1 ("Signatures", 143)), 0); Tag1 (("command", 1712), (0, 0, Tag1 ([(("Seq", 1362), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("command", 1712)), 0, (0)), 100000000, 0, -268)], (0)), 100000000, 0, -267)]), 0, (("src/signatures.mli", 554, 20975, 20979), ("src/signatures.mli", 554, 20975, 21000), 0), 0, Tag1 ("Signatures", 265)); (("Cmd", 1363), ([(Tag3 ((("spec", 1713)), 0, (0)), 100000000, 0, -269)]), 0, (("src/signatures.mli", 555, 21001, 21005), ("src/signatures.mli", 555, 21001, 21018), 0), 0, Tag1 ("Signatures", 266)); (("Echo", 1364), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -271)], (0)), 100000000, 0, -270); (Tag3 (Tag1 ((("Pathname", 1685)), "t"), 0, (0)), 100000000, 0, -272)]), 0, (("src/signatures.mli", 556, 21019, 21023), ("src/signatures.mli", 556, 21019, 21057), 0), 0, Tag1 ("Signatures", 267)); (("Nop", 1365), (0), 0, (("src/signatures.mli", 557, 21058, 21062), ("src/signatures.mli", 557, 21058, 21067), 0), 0, Tag1 ("Signatures", 268))], 0), 1, ((Tag3 (Tag1 ((("Command", 1687)), "t"), 0, (0)), 100000000, 0, -266)), 0, 0, 0, 0, (("src/signatures.mli", 553, 20946, 20948), ("src/signatures.mli", 557, 21058, 21067), 0), 0, 0, 0, Tag1 ("Signatures", 263)), 1, 0); Tag1 (("spec", 1713), (0, 0, Tag1 ([(("N", 1366), (0), 0, (("src/signatures.mli", 561, 21160, 21164), ("src/signatures.mli", 561, 21160, 21167), 0), 0, Tag1 ("Signatures", 269)); (("S", 1367), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("spec", 1713)), 0, (0)), 100000000, 0, -258)], (0)), 100000000, 0, -257)]), 0, (("src/signatures.mli", 561, 21160, 21168), ("src/signatures.mli", 561, 21160, 21184), 0), 0, Tag1 ("Signatures", 270)); (("A", 1368), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -259)]), 0, (("src/signatures.mli", 561, 21160, 21185), ("src/signatures.mli", 561, 21160, 21198), 0), 0, Tag1 ("Signatures", 271)); (("P", 1369), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -260)]), 0, (("src/signatures.mli", 561, 21160, 21199), ("src/signatures.mli", 561, 21160, 21212), 0), 0, Tag1 ("Signatures", 272)); (("Px", 1370), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -261)]), 0, (("src/signatures.mli", 561, 21160, 21213), ("src/signatures.mli", 561, 21160, 21227), 0), 0, Tag1 ("Signatures", 273)); (("Sh", 1371), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -262)]), 0, (("src/signatures.mli", 562, 21228, 21232), ("src/signatures.mli", 562, 21228, 21246), 0), 0, Tag1 ("Signatures", 274)); (("T", 1372), ([(Tag3 (Tag1 ((("Tags", 1686)), "t"), 0, (0)), 100000000, 0, -263)]), 0, (("src/signatures.mli", 562, 21228, 21247), ("src/signatures.mli", 562, 21228, 21260), 0), 0, Tag1 ("Signatures", 275)); (("V", 1373), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -264)]), 0, (("src/signatures.mli", 562, 21228, 21261), ("src/signatures.mli", 562, 21228, 21274), 0), 0, Tag1 ("Signatures", 276)); (("Quote", 1374), ([(Tag3 ((("spec", 1713)), 0, (0)), 100000000, 0, -265)]), 0, (("src/signatures.mli", 562, 21228, 21275), ("src/signatures.mli", 562, 21228, 21290), 0), 0, Tag1 ("Signatures", 277))], 0), 1, ((Tag3 (Tag1 ((("Command", 1687)), "spec"), 0, (0)), 100000000, 0, -256)), 0, 0, 0, 0, (("src/signatures.mli", 560, 21132, 21134), ("src/signatures.mli", 562, 21228, 21290), 0), 0, 0, 0, Tag1 ("Signatures", 264)), 2, 0); (("/", 1714), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1685)), "t"), 0, (0)), 100000000, 0, -255), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1685)), "t"), 0, (0)), 100000000, 0, -254), (Tag3 (Tag1 ((("Pathname", 1685)), "t"), 0, (0)), 100000000, 0, -253), 0), 100000000, 0, -252), 0), 100000000, 0, -251), 0, (("src/signatures.mli", 565, 21342, 21344), ("src/signatures.mli", 565, 21342, 21394), 0), 0, Tag1 ("Signatures", 278)), 0); (("-.-", 1715), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1685)), "t"), 0, (0)), 100000000, 0, -250), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -249), (Tag3 (Tag1 ((("Pathname", 1685)), "t"), 0, (0)), 100000000, 0, -248), 0), 100000000, 0, -247), 0), 100000000, 0, -246), 0, (("src/signatures.mli", 568, 21471, 21473), ("src/signatures.mli", 568, 21471, 21521), 0), 0, Tag1 ("Signatures", 279)), 0); (("++", 1716), ((Tag1 (0, (Tag3 (Tag1 ((("Tags", 1686)), "t"), 0, (0)), 100000000, 0, -245), (Tag1 (0, (Tag3 (Tag1 ((("Tags", 1686)), "elt"), 0, (0)), 100000000, 0, -244), (Tag3 (Tag1 ((("Tags", 1686)), "t"), 0, (0)), 100000000, 0, -243), 0), 100000000, 0, -242), 0), 100000000, 0, -241), 0, (("src/signatures.mli", 571, 21588, 21590), ("src/signatures.mli", 571, 21588, 21631), 0), 0, Tag1 ("Signatures", 280)), 0); (("--", 1717), ((Tag1 (0, (Tag3 (Tag1 ((("Tags", 1686)), "t"), 0, (0)), 100000000, 0, -240), (Tag1 (0, (Tag3 (Tag1 ((("Tags", 1686)), "elt"), 0, (0)), 100000000, 0, -239), (Tag3 (Tag1 ((("Tags", 1686)), "t"), 0, (0)), 100000000, 0, -238), 0), 100000000, 0, -237), 0), 100000000, 0, -236), 0, (("src/signatures.mli", 574, 21701, 21703), ("src/signatures.mli", 574, 21701, 21744), 0), 0, Tag1 ("Signatures", 281)), 0); (("+++", 1718), ((Tag1 (0, (Tag3 (Tag1 ((("Tags", 1686)), "t"), 0, (0)), 100000000, 0, -235), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("Tags", 1686)), "elt"), 0, (0)), 100000000, 0, -234)], (0)), 100000000, 0, -233), (Tag3 (Tag1 ((("Tags", 1686)), "t"), 0, (0)), 100000000, 0, -232), 0), 100000000, 0, -231), 0), 100000000, 0, -230), 0, (("src/signatures.mli", 578, 21864, 21866), ("src/signatures.mli", 578, 21864, 21915), 0), 0, Tag1 ("Signatures", 282)), 0); (("---", 1719), ((Tag1 (0, (Tag3 (Tag1 ((("Tags", 1686)), "t"), 0, (0)), 100000000, 0, -229), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("Tags", 1686)), "elt"), 0, (0)), 100000000, 0, -228)], (0)), 100000000, 0, -227), (Tag3 (Tag1 ((("Tags", 1686)), "t"), 0, (0)), 100000000, 0, -226), 0), 100000000, 0, -225), 0), 100000000, 0, -224), 0, (("src/signatures.mli", 582, 22038, 22040), ("src/signatures.mli", 582, 22038, 22089), 0), 0, Tag1 ("Signatures", 283)), 0); Tag1 (("env", 1720), (0, 0, 0, 1, ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1685)), "t"), 0, (0)), 100000000, 0, -223), (Tag3 (Tag1 ((("Pathname", 1685)), "t"), 0, (0)), 100000000, 0, -222), 0), 100000000, 0, -221)), 0, 0, 0, 0, (("src/signatures.mli", 598, 22801, 22803), ("src/signatures.mli", 598, 22801, 22838), 0), 0, 0, 0, Tag1 ("Signatures", 284)), 1, 0); Tag1 (("builder", 1721), (0, 0, 0, 1, ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Pathname", 1685)), "t"), 0, (0)), 100000000, 0, -220)], (0)), 100000000, 0, -219)], (0)), 100000000, 0, -218), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Outcome", 1688)), "t"), [(Tag3 (Tag1 ((("Pathname", 1685)), "t"), 0, (0)), 100000000, 0, -216); (Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -217)], (0)), 100000000, 0, -215)], (0)), 100000000, 0, -214), 0), 100000000, 0, -213)), 0, 0, 0, 0, (("src/signatures.mli", 614, 23547, 23549), ("src/signatures.mli", 614, 23547, 23620), 0), 0, 0, 0, Tag1 ("Signatures", 285)), 1, 0); Tag1 (("action", 1722), (0, 0, 0, 1, ((Tag1 (0, (Tag3 ((("env", 1720)), 0, (0)), 100000000, 0, -212), (Tag1 (0, (Tag3 ((("builder", 1721)), 0, (0)), 100000000, 0, -211), (Tag3 (Tag1 ((("Command", 1687)), "t"), 0, (0)), 100000000, 0, -210), 0), 100000000, 0, -209), 0), 100000000, 0, -208)), 0, 0, 0, 0, (("src/signatures.mli", 654, 25151, 25153), ("src/signatures.mli", 654, 25151, 25194), 0), 0, 0, 0, Tag1 ("Signatures", 286)), 1, 0); (("rule", 1723), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -207), (Tag1 (Tag1 ("tags"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -206)], (0)), 100000000, 0, -205)], (0)), 100000000, 0, -204), (Tag1 (Tag1 ("prods"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -203)], (0)), 100000000, 0, -202)], (0)), 100000000, 0, -201), (Tag1 (Tag1 ("deps"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -200)], (0)), 100000000, 0, -199)], (0)), 100000000, 0, -198), (Tag1 (Tag1 ("prod"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -197)], (0)), 100000000, 0, -196), (Tag1 (Tag1 ("dep"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -195)], (0)), 100000000, 0, -194), (Tag1 (Tag1 ("stamp"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -193)], (0)), 100000000, 0, -192), (Tag1 (Tag1 ("insert"), (Tag3 ((Tag3 ("option", 10)), [(Tag8 (([("after", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -190)))); ("before", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -191)))); ("bottom", (0)); ("top", (0))], (0, 100000000, 0, -189), 1, 0, 0)), 100000000, 0, -188)], (0)), 100000000, 0, -187), (Tag1 (Tag1 ("doc"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -186)], (0)), 100000000, 0, -185), (Tag1 (0, (Tag3 ((("action", 1722)), 0, (0)), 100000000, 0, -184), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -183), 0), 100000000, 0, -182), 0), 100000000, 0, -181), 0), 100000000, 0, -180), 0), 100000000, 0, -179), 0), 100000000, 0, -178), 0), 100000000, 0, -177), 0), 100000000, 0, -176), 0), 100000000, 0, -175), 0), 100000000, 0, -174), 0), 100000000, 0, -173), 0, (("src/signatures.mli", 715, 27895, 27897), ("src/signatures.mli", 724, 28144, 28162), 0), 0, Tag1 ("Signatures", 287)), 0); (("copy_rule", 1724), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -172), (Tag1 (Tag1 ("insert"), (Tag3 ((Tag3 ("option", 10)), [(Tag8 (([("after", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -170)))); ("before", (((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -171)))); ("bottom", (0)); ("top", (0))], (0, 100000000, 0, -169), 1, 0, 0)), 100000000, 0, -168)], (0)), 100000000, 0, -167), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -166), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -165), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -164), 0), 100000000, 0, -163), 0), 100000000, 0, -162), 0), 100000000, 0, -161), 0), 100000000, 0, -160), 0, (("src/signatures.mli", 727, 28217, 28219), ("src/signatures.mli", 729, 28316, 28344), 0), 0, Tag1 ("Signatures", 288)), 0); (("clear_rules", 1725), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -159), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -158), 0), 100000000, 0, -157), 0, (("src/signatures.mli", 732, 28407, 28409), ("src/signatures.mli", 732, 28407, 28439), 0), 0, Tag1 ("Signatures", 289)), 0); (("dep", 1726), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Tags", 1686)), "elt"), 0, (0)), 100000000, 0, -156)], (0)), 100000000, 0, -155), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Pathname", 1685)), "t"), 0, (0)), 100000000, 0, -154)], (0)), 100000000, 0, -153), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -152), 0), 100000000, 0, -151), 0), 100000000, 0, -150), 0, (("src/signatures.mli", 737, 28640, 28642), ("src/signatures.mli", 737, 28640, 28692), 0), 0, Tag1 ("Signatures", 290)), 0); (("pdep", 1727), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Tags", 1686)), "elt"), 0, (0)), 100000000, 0, -149)], (0)), 100000000, 0, -148), (Tag1 (0, (Tag3 (Tag1 ((("Tags", 1686)), "elt"), 0, (0)), 100000000, 0, -147), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -146), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Pathname", 1685)), "t"), 0, (0)), 100000000, 0, -145)], (0)), 100000000, 0, -144), 0), 100000000, 0, -143), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -142), 0), 100000000, 0, -141), 0), 100000000, 0, -140), 0), 100000000, 0, -139), 0, (("src/signatures.mli", 747, 29122, 29124), ("src/signatures.mli", 747, 29122, 29199), 0), 0, Tag1 ("Signatures", 291)), 0); (("flag", 1728), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Tags", 1686)), "elt"), 0, (0)), 100000000, 0, -138)], (0)), 100000000, 0, -137), (Tag1 (0, (Tag3 (Tag1 ((("Command", 1687)), "spec"), 0, (0)), 100000000, 0, -136), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -135), 0), 100000000, 0, -134), 0), 100000000, 0, -133), 0, (("src/signatures.mli", 753, 29453, 29455), ("src/signatures.mli", 753, 29453, 29503), 0), 0, Tag1 ("Signatures", 292)), 0); (("pflag", 1729), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Tags", 1686)), "elt"), 0, (0)), 100000000, 0, -132)], (0)), 100000000, 0, -131), (Tag1 (0, (Tag3 (Tag1 ((("Tags", 1686)), "elt"), 0, (0)), 100000000, 0, -130), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -129), (Tag3 (Tag1 ((("Command", 1687)), "spec"), 0, (0)), 100000000, 0, -128), 0), 100000000, 0, -127), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -126), 0), 100000000, 0, -125), 0), 100000000, 0, -124), 0), 100000000, 0, -123), 0, (("src/signatures.mli", 762, 29825, 29827), ("src/signatures.mli", 762, 29825, 29900), 0), 0, Tag1 ("Signatures", 293)), 0); (("flag_and_dep", 1730), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Tags", 1686)), "elt"), 0, (0)), 100000000, 0, -122)], (0)), 100000000, 0, -121), (Tag1 (0, (Tag3 (Tag1 ((("Command", 1687)), "spec"), 0, (0)), 100000000, 0, -120), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -119), 0), 100000000, 0, -118), 0), 100000000, 0, -117), 0, (("src/signatures.mli", 770, 30255, 30257), ("src/signatures.mli", 770, 30255, 30313), 0), 0, Tag1 ("Signatures", 294)), 0); (("pflag_and_dep", 1731), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Tags", 1686)), "elt"), 0, (0)), 100000000, 0, -116)], (0)), 100000000, 0, -115), (Tag1 (0, (Tag3 (Tag1 ((("Tags", 1686)), "elt"), 0, (0)), 100000000, 0, -114), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -113), (Tag3 (Tag1 ((("Command", 1687)), "spec"), 0, (0)), 100000000, 0, -112), 0), 100000000, 0, -111), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -110), 0), 100000000, 0, -109), 0), 100000000, 0, -108), 0), 100000000, 0, -107), 0, (("src/signatures.mli", 774, 30406, 30408), ("src/signatures.mli", 775, 30457, 30493), 0), 0, Tag1 ("Signatures", 295)), 0); (("mark_tag_used", 1732), ((Tag1 (0, (Tag3 (Tag1 ((("Tags", 1686)), "elt"), 0, (0)), 100000000, 0, -106), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -105), 0), 100000000, 0, -104), 0, (("src/signatures.mli", 788, 30948, 30950), ("src/signatures.mli", 788, 30948, 30986), 0), 0, Tag1 ("Signatures", 296)), 0); (("non_dependency", 1733), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1685)), "t"), 0, (0)), 100000000, 0, -103), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -102), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -101), 0), 100000000, 0, -100), 0), 100000000, 0, -99), 0, (("src/signatures.mli", 795, 31192, 31194), ("src/signatures.mli", 795, 31192, 31243), 0), 0, Tag1 ("Signatures", 297)), 0); (("use_lib", 1734), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1685)), "t"), 0, (0)), 100000000, 0, -98), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1685)), "t"), 0, (0)), 100000000, 0, -97), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -96), 0), 100000000, 0, -95), 0), 100000000, 0, -94), 0, (("src/signatures.mli", 798, 31284, 31286), ("src/signatures.mli", 798, 31284, 31332), 0), 0, Tag1 ("Signatures", 298)), 0); (("ocaml_lib", 1735), ((Tag1 (Tag1 ("extern"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -93)], (0)), 100000000, 0, -92), (Tag1 (Tag1 ("byte"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -91)], (0)), 100000000, 0, -90), (Tag1 (Tag1 ("native"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -89)], (0)), 100000000, 0, -88), (Tag1 (Tag1 ("dir"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((("Pathname", 1685)), "t"), 0, (0)), 100000000, 0, -87)], (0)), 100000000, 0, -86), (Tag1 (Tag1 ("tag_name"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -85)], (0)), 100000000, 0, -84), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1685)), "t"), 0, (0)), 100000000, 0, -83), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -82), 0), 100000000, 0, -81), 0), 100000000, 0, -80), 0), 100000000, 0, -79), 0), 100000000, 0, -78), 0), 100000000, 0, -77), 0), 100000000, 0, -76), 0, (("src/signatures.mli", 815, 32136, 32138), ("src/signatures.mli", 821, 32259, 32281), 0), 0, Tag1 ("Signatures", 299)), 0); (("expand_module", 1736), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Pathname", 1685)), "t"), 0, (0)), 100000000, 0, -75)], (0)), 100000000, 0, -74), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1685)), "t"), 0, (0)), 100000000, 0, -73), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -72)], (0)), 100000000, 0, -71), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Pathname", 1685)), "t"), 0, (0)), 100000000, 0, -70)], (0)), 100000000, 0, -69), 0), 100000000, 0, -68), 0), 100000000, 0, -67), 0), 100000000, 0, -66), 0, (("src/signatures.mli", 829, 32592, 32594), ("src/signatures.mli", 830, 32614, 32681), 0), 0, Tag1 ("Signatures", 300)), 0); (("string_list_of_file", 1737), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1685)), "t"), 0, (0)), 100000000, 0, -65), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -64)], (0)), 100000000, 0, -63), 0), 100000000, 0, -62), 0, (("src/signatures.mli", 834, 32818, 32820), ("src/signatures.mli", 834, 32818, 32871), 0), 0, Tag1 ("Signatures", 301)), 0); (("module_name_of_pathname", 1738), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1685)), "t"), 0, (0)), 100000000, 0, -61), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -60), 0), 100000000, 0, -59), 0, (("src/signatures.mli", 838, 33024, 33026), ("src/signatures.mli", 838, 33024, 33076), 0), 0, Tag1 ("Signatures", 302)), 0); (("mv", 1739), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1685)), "t"), 0, (0)), 100000000, 0, -58), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1685)), "t"), 0, (0)), 100000000, 0, -57), (Tag3 (Tag1 ((("Command", 1687)), "t"), 0, (0)), 100000000, 0, -56), 0), 100000000, 0, -55), 0), 100000000, 0, -54), 0, (("src/signatures.mli", 841, 33108, 33110), ("src/signatures.mli", 841, 33108, 33156), 0), 0, Tag1 ("Signatures", 303)), 0); (("cp", 1740), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1685)), "t"), 0, (0)), 100000000, 0, -53), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1685)), "t"), 0, (0)), 100000000, 0, -52), (Tag3 (Tag1 ((("Command", 1687)), "t"), 0, (0)), 100000000, 0, -51), 0), 100000000, 0, -50), 0), 100000000, 0, -49), 0, (("src/signatures.mli", 844, 33188, 33190), ("src/signatures.mli", 844, 33188, 33236), 0), 0, Tag1 ("Signatures", 304)), 0); (("ln_f", 1741), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1685)), "t"), 0, (0)), 100000000, 0, -48), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1685)), "t"), 0, (0)), 100000000, 0, -47), (Tag3 (Tag1 ((("Command", 1687)), "t"), 0, (0)), 100000000, 0, -46), 0), 100000000, 0, -45), 0), 100000000, 0, -44), 0, (("src/signatures.mli", 847, 33271, 33273), ("src/signatures.mli", 847, 33271, 33321), 0), 0, Tag1 ("Signatures", 305)), 0); (("ln_s", 1742), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1685)), "t"), 0, (0)), 100000000, 0, -43), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1685)), "t"), 0, (0)), 100000000, 0, -42), (Tag3 (Tag1 ((("Command", 1687)), "t"), 0, (0)), 100000000, 0, -41), 0), 100000000, 0, -40), 0), 100000000, 0, -39), 0, (("src/signatures.mli", 850, 33356, 33358), ("src/signatures.mli", 850, 33356, 33406), 0), 0, Tag1 ("Signatures", 306)), 0); (("rm_f", 1743), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1685)), "t"), 0, (0)), 100000000, 0, -38), (Tag3 (Tag1 ((("Command", 1687)), "t"), 0, (0)), 100000000, 0, -37), 0), 100000000, 0, -36), 0, (("src/signatures.mli", 853, 33441, 33443), ("src/signatures.mli", 853, 33441, 33477), 0), 0, Tag1 ("Signatures", 307)), 0); (("chmod", 1744), ((Tag1 (0, (Tag3 (Tag1 ((("Command", 1687)), "spec"), 0, (0)), 100000000, 0, -35), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1685)), "t"), 0, (0)), 100000000, 0, -34), (Tag3 (Tag1 ((("Command", 1687)), "t"), 0, (0)), 100000000, 0, -33), 0), 100000000, 0, -32), 0), 100000000, 0, -31), 0, (("src/signatures.mli", 856, 33532, 33534), ("src/signatures.mli", 856, 33532, 33585), 0), 0, Tag1 ("Signatures", 308)), 0); (("cmp", 1745), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1685)), "t"), 0, (0)), 100000000, 0, -30), (Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1685)), "t"), 0, (0)), 100000000, 0, -29), (Tag3 (Tag1 ((("Command", 1687)), "t"), 0, (0)), 100000000, 0, -28), 0), 100000000, 0, -27), 0), 100000000, 0, -26), 0, (("src/signatures.mli", 859, 33638, 33640), ("src/signatures.mli", 859, 33638, 33687), 0), 0, Tag1 ("Signatures", 309)), 0); (("hide_package_contents", 1746), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -25), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -24), 0), 100000000, 0, -23), 0, (("src/signatures.mli", 865, 33897, 33899), ("src/signatures.mli", 865, 33897, 33941), 0), 0, Tag1 ("Signatures", 310)), 0); (("tag_file", 1747), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1685)), "t"), 0, (0)), 100000000, 0, -22), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Tags", 1686)), "elt"), 0, (0)), 100000000, 0, -21)], (0)), 100000000, 0, -20), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("src/signatures.mli", 873, 34323, 34325), ("src/signatures.mli", 873, 34323, 34375), 0), 0, Tag1 ("Signatures", 311)), 0); (("tag_any", 1748), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("Tags", 1686)), "elt"), 0, (0)), 100000000, 0, -16)], (0)), 100000000, 0, -15), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -14), 0), 100000000, 0, -13), 0, (("src/signatures.mli", 876, 34439, 34441), ("src/signatures.mli", 876, 34439, 34476), 0), 0, Tag1 ("Signatures", 312)), 0); (("tags_of_pathname", 1749), ((Tag1 (0, (Tag3 (Tag1 ((("Pathname", 1685)), "t"), 0, (0)), 100000000, 0, -12), (Tag3 (Tag1 ((("Tags", 1686)), "t"), 0, (0)), 100000000, 0, -11), 0), 100000000, 0, -10), 0, (("src/signatures.mli", 879, 34547, 34549), ("src/signatures.mli", 879, 34547, 34592), 0), 0, Tag1 ("Signatures", 313)), 0); (("run_and_read", 1750), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -9), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -8), 0), 100000000, 0, -7), 0, (("src/signatures.mli", 882, 34662, 34664), ("src/signatures.mli", 882, 34662, 34699), 0), 0, Tag1 ("Signatures", 314)), 0); Tag1 (("hook", 1751), (0, 0, Tag1 ([(("Before_hygiene", 1413), (0), 0, (("src/signatures.mli", 888, 34903, 34907), ("src/signatures.mli", 888, 34903, 34923), 0), 0, Tag1 ("Signatures", 316)); (("After_hygiene", 1414), (0), 0, (("src/signatures.mli", 889, 34924, 34928), ("src/signatures.mli", 889, 34924, 34943), 0), 0, Tag1 ("Signatures", 317)); (("Before_options", 1415), (0), 0, (("src/signatures.mli", 890, 34944, 34948), ("src/signatures.mli", 890, 34944, 34964), 0), 0, Tag1 ("Signatures", 318)); (("After_options", 1416), (0), 0, (("src/signatures.mli", 891, 34965, 34969), ("src/signatures.mli", 891, 34965, 34984), 0), 0, Tag1 ("Signatures", 319)); (("Before_rules", 1417), (0), 0, (("src/signatures.mli", 892, 34985, 34989), ("src/signatures.mli", 892, 34985, 35003), 0), 0, Tag1 ("Signatures", 320)); (("After_rules", 1418), (0), 0, (("src/signatures.mli", 893, 35004, 35008), ("src/signatures.mli", 893, 35004, 35021), 0), 0, Tag1 ("Signatures", 321))], 0), 1, 0, 0, 0, 0, 0, (("src/signatures.mli", 887, 34889, 34891), ("src/signatures.mli", 893, 35004, 35021), 0), 0, 1, 0, Tag1 ("Signatures", 315)), 1, 0); (("dispatch", 1752), ((Tag1 (0, (Tag1 (0, (Tag3 ((("hook", 1751)), 0, (0)), 100000000, 0, -6), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5), 0), 100000000, 0, -4), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/signatures.mli", 898, 35202, 35204), ("src/signatures.mli", 898, 35202, 35241), 0), 0, Tag1 ("Signatures", 322)), 0)], "Ocamlbuild_plugin", [("Ocamlbuild_plugin", ("^\029\170:\133\195\026\020\rA$\139~\22409")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Arg", ("\024%=\206\198p\149Y\007\004\216,&\254#\207")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Ocamlbuild_pack", ("\160\191!\247'\176\014z9\226\031M%\003N5")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

val dispatch : (hook -> unit) -> unit

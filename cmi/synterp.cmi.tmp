val module_locality : bool Attributes.attribute
val with_locality :
  atts:Attributes.vernac_flags -> (local:bool option -> 'a) -> 'a
val with_module_locality :
  atts:Attributes.vernac_flags -> (module_local:bool -> 'a) -> 'a
val with_generic_atts :
  check:bool ->
  Attributes.vernac_flags -> (atts:Attributes.vernac_flags -> 'a) -> 'a
type module_entry =
    Modintern.module_struct_expr * Names.ModPath.t * Modintern.module_kind *
    Entries.inline
type control_entry =
    ControlTime of { synterp_duration : System.duration; }
  | ControlRedirect of string
  | ControlTimeout of { remaining : float; }
  | ControlFail of { st : Vernacstate.Synterp.t; }
  | ControlSucceed of { st : Vernacstate.Synterp.t; }
type synterp_entry =
    EVernacNoop
  | EVernacNotation of { local : bool;
      decl : Metasyntax.notation_interpretation_decl;
    }
  | EVernacBeginSection of Names.lident
  | EVernacEndSegment of Names.lident
  | EVernacRequire of Library.library_t list * Names.DirPath.t list *
      Vernacexpr.export_with_cats option *
      (Libnames.qualid * Vernacexpr.import_filter_expr) list
  | EVernacImport of (Vernacexpr.export_flag * Libobject.open_filter) *
      (Names.ModPath.t CAst.t * Vernacexpr.import_filter_expr) list
  | EVernacDeclareModule of Lib.export * Names.lident *
      Declaremods.module_params_expr * module_entry
  | EVernacDefineModule of Lib.export * Names.lident *
      Declaremods.module_params_expr *
      ((Vernacexpr.export_flag * Libobject.open_filter) * Names.ModPath.t)
      list * module_entry Declaremods.module_signature * module_entry list
  | EVernacDeclareModuleType of Names.lident *
      Declaremods.module_params_expr *
      ((Vernacexpr.export_flag * Libobject.open_filter) * Names.ModPath.t)
      list * module_entry list * module_entry list
  | EVernacInclude of Declaremods.module_expr list
  | EVernacSetOption of { export : bool; key : Goptions.option_name;
      value : Vernacexpr.option_setting;
    }
  | EVernacLoad of Vernacexpr.verbose_flag *
      (vernac_control_entry * Vernacstate.Synterp.t) list
  | EVernacExtend of Vernacextend.typed_vernac
and vernac_entry = synterp_entry Vernacexpr.vernac_expr_gen
and vernac_control_entry =
    (control_entry, synterp_entry) Vernacexpr.vernac_control_gen_r CAst.t
exception UnmappedLibrary of Names.DirPath.t option * Libnames.qualid
exception NotFoundLibrary of Names.DirPath.t option * Libnames.qualid
val synterp_require :
  Libnames.qualid option ->
  Vernacexpr.export_with_cats option ->
  (Libnames.qualid * Vernacexpr.import_filter_expr) list ->
  Library.library_t list * Names.DirPath.t list
val synterp_control : Vernacexpr.vernac_control -> vernac_control_entry
val get_default_proof_mode : unit -> Pvernac.proof_mode
val proof_mode_opt_name : string list("DEBUG:rule", [(("module_locality", 1128), ((Tag3 (Tag1 ((Tag2 ("Attributes")), "attribute"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -134)], (0)), 100000000, 0, -133), 0, (("vernac/synterp.mli", 18, 896, 896), ("vernac/synterp.mli", 18, 896, 943), 0), 0, Tag1 ("Synterp", 0)), 0); (("with_locality", 1129), ((Tag1 (("atts"), (Tag3 (Tag1 ((Tag2 ("Attributes")), "vernac_flags"), 0, (0)), 100000000, 0, -132), (Tag1 (0, (Tag1 (("local"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -131)], (0)), 100000000, 0, -130), ((("a")), 100000000, 0, -128), 0), 100000000, 0, -129), ((("a")), 100000000, 0, -128), 0), 100000000, 0, -127), 0), 100000000, 0, -126), 0, (("vernac/synterp.mli", 20, 945, 945), ("vernac/synterp.mli", 20, 945, 1028), 0), 0, Tag1 ("Synterp", 1)), 0); (("with_module_locality", 1130), ((Tag1 (("atts"), (Tag3 (Tag1 ((Tag2 ("Attributes")), "vernac_flags"), 0, (0)), 100000000, 0, -125), (Tag1 (0, (Tag1 (("module_local"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -124), ((("a")), 100000000, 0, -122), 0), 100000000, 0, -123), ((("a")), 100000000, 0, -122), 0), 100000000, 0, -121), 0), 100000000, 0, -120), 0, (("vernac/synterp.mli", 22, 1030, 1030), ("vernac/synterp.mli", 23, 1057, 1122), 0), 0, Tag1 ("Synterp", 2)), 0); (("with_generic_atts", 1131), ((Tag1 (("check"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -119), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Attributes")), "vernac_flags"), 0, (0)), 100000000, 0, -118), (Tag1 (0, (Tag1 (("atts"), (Tag3 (Tag1 ((Tag2 ("Attributes")), "vernac_flags"), 0, (0)), 100000000, 0, -117), ((("a")), 100000000, 0, -115), 0), 100000000, 0, -116), ((("a")), 100000000, 0, -115), 0), 100000000, 0, -114), 0), 100000000, 0, -113), 0), 100000000, 0, -112), 0, (("vernac/synterp.mli", 25, 1124, 1124), ("vernac/synterp.mli", 26, 1148, 1233), 0), 0, Tag1 ("Synterp", 3)), 0); Tag1 (("module_entry", 1132), (0, 0, 0, 1, ((Tag2 ([(Tag3 (Tag1 ((Tag2 ("Modintern")), "module_struct_expr"), 0, (0)), 100000000, 0, -108); (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -109); (Tag3 (Tag1 ((Tag2 ("Modintern")), "module_kind"), 0, (0)), 100000000, 0, -110); (Tag3 (Tag1 ((Tag2 ("Entries")), "inline"), 0, (0)), 100000000, 0, -111)]), 100000000, 0, -107)), 0, 0, 0, 0, (("vernac/synterp.mli", 28, 1235, 1235), ("vernac/synterp.mli", 28, 1235, 1342), 0), 0, 0, 0, Tag1 ("Synterp", 4)), 1, 0); Tag1 (("control_entry", 1133), (0, 0, Tag1 ([(("ControlTime", 707), Tag1 ([(("synterp_duration", 747), 0, (Tag3 (Tag1 ((Tag2 ("System")), "duration"), 0, (0)), 100000000, 0, -102), (("vernac/synterp.mli", 31, 1365, 1386), ("vernac/synterp.mli", 31, 1365, 1419), 0), 0, Tag1 ("Synterp", 6))]), 0, (("vernac/synterp.mli", 31, 1365, 1367), ("vernac/synterp.mli", 31, 1365, 1421), 0), 0, Tag1 ("Synterp", 7)); (("ControlRedirect", 748), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -103)]), 0, (("vernac/synterp.mli", 32, 1422, 1424), ("vernac/synterp.mli", 32, 1422, 1451), 0), 0, Tag1 ("Synterp", 8)); (("ControlTimeout", 749), Tag1 ([(("remaining", 750), 0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -104), (("vernac/synterp.mli", 33, 1452, 1476), ("vernac/synterp.mli", 33, 1452, 1493), 0), 0, Tag1 ("Synterp", 9))]), 0, (("vernac/synterp.mli", 33, 1452, 1454), ("vernac/synterp.mli", 33, 1452, 1495), 0), 0, Tag1 ("Synterp", 10)); (("ControlFail", 751), Tag1 ([(("st", 766), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Vernacstate")), "Synterp"), "t"), 0, (0)), 100000000, 0, -105), (("vernac/synterp.mli", 34, 1496, 1517), ("vernac/synterp.mli", 34, 1496, 1543), 0), 0, Tag1 ("Synterp", 11))]), 0, (("vernac/synterp.mli", 34, 1496, 1498), ("vernac/synterp.mli", 34, 1496, 1545), 0), 0, Tag1 ("Synterp", 12)); (("ControlSucceed", 767), Tag1 ([(("st", 768), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Vernacstate")), "Synterp"), "t"), 0, (0)), 100000000, 0, -106), (("vernac/synterp.mli", 35, 1546, 1570), ("vernac/synterp.mli", 35, 1546, 1596), 0), 0, Tag1 ("Synterp", 13))]), 0, (("vernac/synterp.mli", 35, 1546, 1548), ("vernac/synterp.mli", 35, 1546, 1598), 0), 0, Tag1 ("Synterp", 14))], 0), 1, 0, 0, 0, 0, 0, (("vernac/synterp.mli", 30, 1344, 1344), ("vernac/synterp.mli", 35, 1546, 1598), 0), 0, 0, 0, Tag1 ("Synterp", 5)), 1, 0); Tag1 (("synterp_entry", 1134), (0, 0, Tag1 ([(("EVernacNoop", 772), (0), 0, (("vernac/synterp.mli", 39, 1622, 1624), ("vernac/synterp.mli", 39, 1622, 1637), 0), 0, Tag1 ("Synterp", 38)); (("EVernacNotation", 773), Tag1 ([(("local", 774), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -40), (("vernac/synterp.mli", 40, 1638, 1663), ("vernac/synterp.mli", 40, 1638, 1676), 0), 0, Tag1 ("Synterp", 39)); (("decl", 797), 0, (Tag3 (Tag1 ((Tag2 ("Metasyntax")), "notation_interpretation_decl"), 0, (0)), 100000000, 0, -41), (("vernac/synterp.mli", 40, 1638, 1677), ("vernac/synterp.mli", 40, 1638, 1723), 0), 0, Tag1 ("Synterp", 40))]), 0, (("vernac/synterp.mli", 40, 1638, 1640), ("vernac/synterp.mli", 40, 1638, 1725), 0), 0, Tag1 ("Synterp", 41)); (("EVernacBeginSection", 798), ([(Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -42)]), 0, (("vernac/synterp.mli", 41, 1726, 1728), ("vernac/synterp.mli", 41, 1726, 1765), 0), 0, Tag1 ("Synterp", 42)); (("EVernacEndSegment", 799), ([(Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -43)]), 0, (("vernac/synterp.mli", 42, 1766, 1768), ("vernac/synterp.mli", 42, 1766, 1803), 0), 0, Tag1 ("Synterp", 43)); (("EVernacRequire", 800), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Library")), "library_t"), 0, (0)), 100000000, 0, -45)], (0)), 100000000, 0, -44); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "DirPath"), "t"), 0, (0)), 100000000, 0, -47)], (0)), 100000000, 0, -46); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Vernacexpr")), "export_with_cats"), 0, (0)), 100000000, 0, -49)], (0)), 100000000, 0, -48); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -52); (Tag3 (Tag1 ((Tag2 ("Vernacexpr")), "import_filter_expr"), 0, (0)), 100000000, 0, -53)]), 100000000, 0, -51)], (0)), 100000000, 0, -50)]), 0, (("vernac/synterp.mli", 43, 1804, 1806), ("vernac/synterp.mli", 44, 1826, 1956), 0), 0, Tag1 ("Synterp", 44)); (("EVernacImport", 902), ([(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Vernacexpr")), "export_flag"), 0, (0)), 100000000, 0, -55); (Tag3 (Tag1 ((Tag2 ("Libobject")), "open_filter"), 0, (0)), 100000000, 0, -56)]), 100000000, 0, -54); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -60)], (0)), 100000000, 0, -59); (Tag3 (Tag1 ((Tag2 ("Vernacexpr")), "import_filter_expr"), 0, (0)), 100000000, 0, -61)]), 100000000, 0, -58)], (0)), 100000000, 0, -57)]), 0, (("vernac/synterp.mli", 45, 1957, 1959), ("vernac/synterp.mli", 46, 2029, 2096), 0), 0, Tag1 ("Synterp", 46)); (("EVernacDeclareModule", 942), ([(Tag3 (Tag1 ((Tag2 ("Lib")), "export"), 0, (0)), 100000000, 0, -62); (Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -63); (Tag3 (Tag1 ((Tag2 ("Declaremods")), "module_params_expr"), 0, (0)), 100000000, 0, -64); (Tag3 ((("module_entry", 1132)), 0, (0)), 100000000, 0, -65)]), 0, (("vernac/synterp.mli", 47, 2097, 2099), ("vernac/synterp.mli", 49, 2186, 2204), 0), 0, Tag1 ("Synterp", 47)); (("EVernacDefineModule", 1008), ([(Tag3 (Tag1 ((Tag2 ("Lib")), "export"), 0, (0)), 100000000, 0, -66); (Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -67); (Tag3 (Tag1 ((Tag2 ("Declaremods")), "module_params_expr"), 0, (0)), 100000000, 0, -68); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Vernacexpr")), "export_flag"), 0, (0)), 100000000, 0, -72); (Tag3 (Tag1 ((Tag2 ("Libobject")), "open_filter"), 0, (0)), 100000000, 0, -73)]), 100000000, 0, -71); (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -74)]), 100000000, 0, -70)], (0)), 100000000, 0, -69); (Tag3 (Tag1 ((Tag2 ("Declaremods")), "module_signature"), [(Tag3 ((("module_entry", 1132)), 0, (0)), 100000000, 0, -76)], (0)), 100000000, 0, -75); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("module_entry", 1132)), 0, (0)), 100000000, 0, -78)], (0)), 100000000, 0, -77)]), 0, (("vernac/synterp.mli", 50, 2205, 2207), ("vernac/synterp.mli", 54, 2425, 2448), 0), 0, Tag1 ("Synterp", 48)); (("EVernacDeclareModuleType", 1009), ([(Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -79); (Tag3 (Tag1 ((Tag2 ("Declaremods")), "module_params_expr"), 0, (0)), 100000000, 0, -80); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Vernacexpr")), "export_flag"), 0, (0)), 100000000, 0, -84); (Tag3 (Tag1 ((Tag2 ("Libobject")), "open_filter"), 0, (0)), 100000000, 0, -85)]), 100000000, 0, -83); (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -86)]), 100000000, 0, -82)], (0)), 100000000, 0, -81); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("module_entry", 1132)), 0, (0)), 100000000, 0, -88)], (0)), 100000000, 0, -87); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("module_entry", 1132)), 0, (0)), 100000000, 0, -90)], (0)), 100000000, 0, -89)]), 0, (("vernac/synterp.mli", 55, 2449, 2451), ("vernac/synterp.mli", 59, 2637, 2660), 0), 0, Tag1 ("Synterp", 49)); (("EVernacInclude", 1010), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Declaremods")), "module_expr"), 0, (0)), 100000000, 0, -92)], (0)), 100000000, 0, -91)]), 0, (("vernac/synterp.mli", 60, 2661, 2663), ("vernac/synterp.mli", 60, 2661, 2711), 0), 0, Tag1 ("Synterp", 50)); (("EVernacSetOption", 1011), Tag1 ([(("export", 1012), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -93), (("vernac/synterp.mli", 61, 2712, 2738), ("vernac/synterp.mli", 61, 2712, 2752), 0), 0, Tag1 ("Synterp", 51)); (("key", 1058), 0, (Tag3 (Tag1 ((Tag2 ("Goptions")), "option_name"), 0, (0)), 100000000, 0, -94), (("vernac/synterp.mli", 61, 2712, 2753), ("vernac/synterp.mli", 61, 2712, 2780), 0), 0, Tag1 ("Synterp", 52)); (("value", 1059), 0, (Tag3 (Tag1 ((Tag2 ("Vernacexpr")), "option_setting"), 0, (0)), 100000000, 0, -95), (("vernac/synterp.mli", 61, 2712, 2781), ("vernac/synterp.mli", 61, 2712, 2814), 0), 0, Tag1 ("Synterp", 53))]), 0, (("vernac/synterp.mli", 61, 2712, 2714), ("vernac/synterp.mli", 61, 2712, 2816), 0), 0, Tag1 ("Synterp", 54)); (("EVernacLoad", 1060), ([(Tag3 (Tag1 ((Tag2 ("Vernacexpr")), "verbose_flag"), 0, (0)), 100000000, 0, -96); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("vernac_control_entry", 1136)), 0, (0)), 100000000, 0, -99); (Tag3 (Tag1 (Tag1 ((Tag2 ("Vernacstate")), "Synterp"), "t"), 0, (0)), 100000000, 0, -100)]), 100000000, 0, -98)], (0)), 100000000, 0, -97)]), 0, (("vernac/synterp.mli", 62, 2817, 2819), ("vernac/synterp.mli", 62, 2817, 2913), 0), 0, Tag1 ("Synterp", 55)); (("EVernacExtend", 1061), ([(Tag3 (Tag1 ((Tag2 ("Vernacextend")), "typed_vernac"), 0, (0)), 100000000, 0, -101)]), 0, (("vernac/synterp.mli", 63, 2914, 2916), ("vernac/synterp.mli", 63, 2914, 2960), 0), 0, Tag1 ("Synterp", 58))], 0), 1, 0, 0, 0, 0, 0, (("vernac/synterp.mli", 38, 1601, 1601), ("vernac/synterp.mli", 63, 2914, 2960), 0), 0, 0, 0, Tag1 ("Synterp", 35)), 1, 0); Tag1 (("vernac_entry", 1135), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Vernacexpr")), "vernac_expr_gen"), [(Tag3 ((("synterp_entry", 1134)), 0, (0)), 100000000, 0, -39)], (0)), 100000000, 0, -38)), 0, 0, 0, 0, (("vernac/synterp.mli", 65, 2962, 2962), ("vernac/synterp.mli", 65, 2962, 3021), 0), 0, 0, 0, Tag1 ("Synterp", 36)), 2, 0); Tag1 (("vernac_control_entry", 1136), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 (Tag1 ((Tag2 ("Vernacexpr")), "vernac_control_gen_r"), [(Tag3 ((("control_entry", 1133)), 0, (0)), 100000000, 0, -36); (Tag3 ((("synterp_entry", 1134)), 0, (0)), 100000000, 0, -37)], (0)), 100000000, 0, -35)], (0)), 100000000, 0, -34)), 0, 0, 0, 0, (("vernac/synterp.mli", 69, 3172, 3172), ("vernac/synterp.mli", 69, 3172, 3268), 0), 0, 0, 0, Tag1 ("Synterp", 37)), 2, 0); Tag2 (("UnmappedLibrary", 1137), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "DirPath"), "t"), 0, (0)), 100000000, 0, -32)], (0)), 100000000, 0, -31); (Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -33)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Synterp", 69)), 2, 0); Tag2 (("NotFoundLibrary", 1138), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "DirPath"), "t"), 0, (0)), 100000000, 0, -29)], (0)), 100000000, 0, -28); (Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -30)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Synterp", 70)), 2, 0); (("synterp_require", 1139), ((Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -27)], (0)), 100000000, 0, -26), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Vernacexpr")), "export_with_cats"), 0, (0)), 100000000, 0, -25)], (0)), 100000000, 0, -24), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Libnames")), "qualid"), 0, (0)), 100000000, 0, -22); (Tag3 (Tag1 ((Tag2 ("Vernacexpr")), "import_filter_expr"), 0, (0)), 100000000, 0, -23)]), 100000000, 0, -21)], (0)), 100000000, 0, -20), (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Library")), "library_t"), 0, (0)), 100000000, 0, -17)], (0)), 100000000, 0, -16); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "DirPath"), "t"), 0, (0)), 100000000, 0, -19)], (0)), 100000000, 0, -18)]), 100000000, 0, -15), 0), 100000000, 0, -14), 0), 100000000, 0, -13), 0), 100000000, 0, -12), 0, (("vernac/synterp.mli", 76, 3506, 3506), ("vernac/synterp.mli", 80, 3656, 3697), 0), 0, Tag1 ("Synterp", 71)), 0); (("synterp_control", 1140), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Vernacexpr")), "vernac_control"), 0, (0)), 100000000, 0, -11), (Tag3 ((("vernac_control_entry", 1136)), 0, (0)), 100000000, 0, -10), 0), 100000000, 0, -9), 0, (("vernac/synterp.mli", 83, 3786, 3786), ("vernac/synterp.mli", 85, 3839, 3861), 0), 0, Tag1 ("Synterp", 72)), 0); (("get_default_proof_mode", 1141), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8), (Tag3 (Tag1 ((Tag2 ("Pvernac")), "proof_mode"), 0, (0)), 100000000, 0, -7), 0), 100000000, 0, -6), 0, (("vernac/synterp.mli", 88, 3910, 3910), ("vernac/synterp.mli", 88, 3910, 3965), 0), 0, Tag1 ("Synterp", 73)), 0); (("proof_mode_opt_name", 1142), ((Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -5)], (0)), 100000000, 0, -4), 0, (("vernac/synterp.mli", 89, 3966, 3966), ("vernac/synterp.mli", 89, 3966, 4003), 0), 0, Tag1 ("Synterp", 74)), 0); (("test_mode", 1143), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3)], (0)), 100000000, 0, -2), 0, (("vernac/synterp.mli", 93, 4114, 4114), ("vernac/synterp.mli", 93, 4114, 4138), 0), 0, Tag1 ("Synterp", 75)), 0)], "Synterp", [("Synterp", ("\233\162\158!\149\152l!\235\004\225\178E\131\209S")); ("Z", ("\253\196\2168\027\199O\134\220\218\031'\1484\233o")); ("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Vmemitcodes", ("wCd\138\165\158DD\241gH\236.\210\197\247")); ("Vmbytecodes", ("\025\021\151\137Dx\149W\236+[\143f\208\160\016")); ("Vernacstate", ("P!\165X.5\141gX\168%\138\215%f\026")); ("Vernacextend", ("I\b\021\167O\210\166\190\253\025\018/\153\025\217\004")); ("Vernacexpr", ("Lu|g\028\024j\193\000\234\175\209&\211]\137")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Unix", (":B72R\011\005Sj\189)\011\239PH\254")); ("UnivSubst", ("\190qu\031mc\130\181\003G]\132\"\219m)")); ("UnivProblem", ("6'\161\018\181\001.\253\000\141a6\171\1727\155")); ("UnivNames", ("%\151_\209%+JM$n\001\232\194n\178N")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Unification", ("\017\027\157=\255\1914L\020\213h\154.\219\005\170")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UState", ("SD\203\215|\136\n\251\239\208\148\215C\n\167\005")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("Typeclasses", ("KO\1297x\192\210\231\001\1824l\135\192\160|")); ("Type_errors", ("7\157\162-\214M\206\196\228\191\005v\134\177\144\134")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Tok", ("\162\196\180\135\219\014\184\165;\207\025\215\176g\188\225")); ("Tactypes", ("\143E\135*\195\151\144H\151M\011($\017\159\203")); ("Tacred", ("\133d\143\1310z\030\237\232\002\001\025\147\140\215:")); ("System", ("q\188\133!\021\022\187\170z\001\015I\244\181\2488")); ("Summary", ("\148G\135\226\024L3\246\021\028U\146\164`\253\250")); ("Store", ("/dT\252\145\179pq\216{\181\206\190K+U")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Result", ("\247h\157\021\029a\144\199*\186Z\162\225\241\160>")); ("Stdlib__Random", ("\020\005Xq\171\026\218\152X\135\254\023\133zK\200")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Stateid", ("\183\165\247\166~\005\017.\179f.\178n\255(\137")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("Section", ("\245\207\b\021\142v=\155#w\246}\"4b\006")); ("Safe_typing", (")\250?\164\145\132\241\127\186\152h+\145\"\237l")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("RetrieveObl", ("\181(\0225\214z\024#d\246.M\015.i\210")); ("Reductionops", ("\179\023P\218\146Uh\014IS\196C\031q~#")); ("Range", ("\218\130\001r\237\r\144\171\164\021l\155\196\143sg")); ("Pvernac", ("\030z\016\002I\233\195\217\026PC5\147(\186\252")); ("Proofview_monad", ("\218\196\189S\147\216\129\221\231\224v\228O\024*\239")); ("Proofview", ("\245\140U\027\236\199\199&\242\156\199YG\250tA")); ("Proof_using", ("\015\162\022\031Y\152\208\231;\015\140;\163\177\251\196")); ("Proof_bullet", ("\249\179=\253g\211\149\212\t\217_0\179\197k\179")); ("Proof", ("\249\030\200g\248\164o&\tS\132\rTl\1736")); ("Primred", ("\158G\192\182\224\196\144*\174y_E\165\012\137C")); ("Pretyping", ("\151\160\191\149\149Ff\195\171g\189\156\r\166n\189")); ("Pretype_errors", ("\155\229\201\176\163\234\203C\127\227\141\174j\199\200H")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Pcoq", ("\231\158\223M\188\002_J\154\240\176\002\022p\243\154")); ("Pattern", ("\195C\140Wb=\022\222\208\227^K\003\020\215X")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Opaques", ("\205<\224j\004\217\188\215Ljj\246\229\186\1559")); ("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("NumTok", ("vd\023^\251\244B\166\145'\156\196-0\027\169")); ("Notationextern", ("\000\022b5`t\134]\192f4\131\187\192\152\160")); ("Notation_term", ("5\002\017\217b\193nc>\239\239\237\244\031\173?")); ("Notation", ("\243\219),\220\160v\230\t$\246\188\252\172\152\147")); ("NeList", ("$\131M\175\196\245\161\207\129\012?\158\175\138\160\247")); ("Nativevalues", ("8:\007\025e\226c,\001\171\146#l\210\171\152")); ("Nativelib", ("V\239\205Y1\147E:,\176\196Hy\1483|")); ("Nativecode", ("\190\185\255\006m\012\210\163\138Rz\247\15283\183")); ("Nametab", ("1\018\163\254\225\2178\025DI\0271Q\198\134\140")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Namegen", ("\187\222\224T\255\020\1808-\212*\164\131\177\157x")); ("Monad", ("\244\171T\157\194p\187\160\149\195{\132\222\020\253\148")); ("Modintern", ("F\222V\246R\143{\n\240\004;;;\011\026\223")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Metasyntax", ("\177D\147\n?i\139\193\238 \018\030)\\\244\\")); ("Ltac_pretype", ("\224\"\167\018i:U\172>\188\128$\r\252\020T")); ("Logic_monad", ("\130\157\160Q\163vQ\137\184\2242\209\128\024\220i")); ("Locus", ("_\002\003W\246\181\225\242Uf\139\226\176\174\192I")); ("Locality", ("\204\134r\227\235'\016\197\215r\210\133\242\226U%")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Library", ("\130\217D\167v\0148pPO\128s'\179\185\252")); ("Libobject", ("\132}t\226hl\213L\210\172\167pc\012~\129")); ("Libnames", ("fp\0255\167\162\209\153\137\161\169#\246\193\003\198")); ("Lib", ("8\018\021\210\020\136$\149\164=\007\002\218\026RX")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Impargs", ("\021\197\1992>\rm\185\141\"iHY\133\138/")); ("Hook", ("\183\194\223\003\155\169',\187\240a;E\b\1396")); ("Hints", ("\007\130]H\\t(\131\000}\205\137H\148\250\166")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Gramlib__Stream", ("\248\\H\205_76\253\136\146\200\031\165\021=t")); ("Gramlib__Plexing", ("\028\200j\003G\198\183\184f\243\148a\020\011\160\171")); ("Gramlib__LStream", ("B\143\148\148@\016M\192w\155\223\189\218\224\002\004")); ("Gramlib__Grammar", ("zuU\178r\159\234NC\015_hKT\240\151")); ("Gramlib__Gramext", ("B\171oA\172\212\187>\175\233Q\145\"\176TM")); ("Gramlib", ("\154\143\210e\021i\246\176\224\194\220\217\007\145\139A")); ("Goptions", ("i>Rt=\183g\153\190\144\235u\248\247*e")); ("Goal_select", ("\235$\175\023t\178\194.Ivlz\005\211\173\n")); ("Globnames", ("W\004\172T\214\181H\220\232\160LSW\006\130\226")); ("Global", ("?#\156=\176F\165q\189\209\160d\155\128\162f")); ("Glob_term", ("\165=a\227\160\153.\021_$\232\209T\236\153O")); ("GlobEnv", ("(\152\019ok\006R\183\193\145\137\133<\171\005\231")); ("Genredexpr", ("rz\204\143\007`VgI\195P\168sO\198\012")); ("Genlambda", ("\170}\024\241\141\222\136S\169\219\2212i\134KI")); ("Geninterp", ("2S\151\191\189\159\004\188;\224d\199|U\004\028")); ("Genintern", ("\152Ac\019=n\235\197\141\224T\162\192\148eg")); ("Genarg", ("\1434\015\001\152\196\005s\156\136\195\185\247\b3\t")); ("Future", ("\158b\028\190\203\016U\128\195O\140\249\240\129\252s")); ("Ftactic", ("K\172\205\128\241\162\160\201\202\1561o\180L\206:")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Extend", ("\179&!W\163V\006\245\018\168\021\001\224s\168\234")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evd", ("\211\205p\193\216\129r\006\239oN\142ar\196\175")); ("Evarutil", ("\005\175\132e\164O\223svi \252\232\138\022\137")); ("Evarsolve", ("\000&\228\016}j\199\t\229\173\127\024\219\199\184\178")); ("Evardefine", ("\178\167R\199\158\242\001Y\215<\151\020\206\153\227\019")); ("Evar_kinds", ("\023L\186\132\218}\254\221\185\198\220\200h\003{\021")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Environ", ("\171b\1579\229<\003Z\147IL\225X\254\182\204")); ("Entries", ("\172\201\198\221Ap\027_{\174\141C\021\";p")); ("EConstr", ("\201aW\156\157;N\004\201V\208\006L\166\211)")); ("Dyn", ("\131z`\205v\2306\007x\027&K.?;\169")); ("Deprecation", ("\226:\146\245\190;\1929\254@\247a\218\244\134\189")); ("Decls", ("\140C{$\142?\215\153\180\186h;\153\139\187\129")); ("Declaremods", ("\019d|\168<\144\239o\017\222\248K^\157\198\179")); ("Declare", ("\ndh\139\180\185\245\190\133\240\127A\190b\197\023")); ("Declarations", ("\239\137n\019\030w$\182\166z^{\b\206\163\175")); ("DAst", ("\224/\200)\007\184ni\134\b\139\204\241\005w\212")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Conversion", ("\158\150&\195M\tv\127|\029\158RRK\211A")); ("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constrintern", ("\221\031i\248\218\212\161/UQA\147\1348GM")); ("Constrexpr", ("p'r\245\184chL\183\249\"\213]\1741\237")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("Coercionops", ("\238\240\220\191\201\bMazv\159\227\236?\147>")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CWarnings", ("\132\220\150\227\215\239t\217\132\220'JX\188\246c")); ("CUnix", ("\140Zl\153\167\011J\015\005|th\247OTu")); ("CString", ("\243~4C\023~\169\148x\206\165\207\195\177Q\184")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CLexer", ("\158\155\242\159%gC\237\011\196\158\255\163\217\239G")); ("CEphemeron", ("\204I\179-\206(x4\173\229\250\001PkH\151")); ("CDebug", ("^4\210p7\239!3\138\138\213?\239`\250\157")); ("CClosure", ("\167\b\022\241V-\r\253\b\002\000j]\223%\142")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("Attributes", ("\2145\146P\224\163B1\135\232\204SD\129^\141")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])

val test_mode : bool ref

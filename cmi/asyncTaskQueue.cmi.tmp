val async_proofs_flags_for_workers : string list ref
module type Task =
  sig
    type task
    type competence
    type worker_status = Fresh | Old of competence
    type request
    type response
    val name : string
    val extra_env : unit -> string array
    val request_of_task : worker_status -> task -> request option
    val task_match : worker_status -> task -> bool
    val use_response :
      worker_status ->
      task -> response -> [ `End | `Stay of competence * task list ]
    val on_marshal_error : string -> task -> unit
    val on_task_cancellation_or_expiration_or_slave_death :
      task option -> unit
    val forward_feedback : Feedback.feedback -> unit
    val perform : request -> response
    val name_of_task : task -> string
    val name_of_request : request -> string
  end
type cancel_switch = bool ref
module MakeQueue :
  functor (T : Task) () ->
    sig
      type queue
      val create : int -> CoqworkmgrApi.priority -> queue
      val destroy : queue -> unit
      val n_workers : queue -> int
      val enqueue_task :
        queue -> T.task -> cancel_switch:cancel_switch -> unit
      val join : queue -> unit
      val cancel_all : queue -> unit
      val cancel_worker : queue -> WorkerPool.worker_id -> unit
      val set_order : queue -> (T.task -> T.task -> int) -> unit
      val broadcast : queue -> unit
      val snapshot : queue -> T.task list
      val clear : queue -> unit
      val with_n_workers :
        int -> CoqworkmgrApi.priority -> (queue -> 'a) -> 'a
    end
module MakeWorker :
  functor (T : Task) () ->
    sig val init_stdout : unit -> unit val main_loop : unit -> unit end
("DEBUG:rule", [(("async_proofs_flags_for_workers", 430), ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -7)], (0)), 100000000, 0, -6)], (0)), 100000000, 0, -5), 0, (("stm/asyncTaskQueue.mli", 12, 708, 708), ("stm/asyncTaskQueue.mli", 12, 708, 760), 0), 0, Tag1 ("AsyncTaskQueue", 0)), 0); Tag4 (("Task", 431), ((Tag1 ([Tag1 (("task", 438), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("stm/asyncTaskQueue.mli", 42, 1672, 1674), ("stm/asyncTaskQueue.mli", 42, 1672, 1683), 0), 0, 0, 0, Tag1 ("AsyncTaskQueue", 1)), 1, 0); Tag1 (("competence", 439), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("stm/asyncTaskQueue.mli", 46, 1800, 1802), ("stm/asyncTaskQueue.mli", 46, 1800, 1817), 0), 0, 0, 0, Tag1 ("AsyncTaskQueue", 2)), 1, 0); Tag1 (("worker_status", 440), (0, 0, Tag1 ([(("Fresh", 273), (0), 0, (("stm/asyncTaskQueue.mli", 62, 2473, 2496), ("stm/asyncTaskQueue.mli", 62, 2473, 2501), 0), 0, Tag1 ("AsyncTaskQueue", 4)); (("Old", 274), ([(Tag3 ((("competence", 439)), 0, (0)), 100000000, 0, -57)]), 0, (("stm/asyncTaskQueue.mli", 62, 2473, 2502), ("stm/asyncTaskQueue.mli", 62, 2473, 2521), 0), 0, Tag1 ("AsyncTaskQueue", 5))], 0), 1, 0, 0, 0, 0, 0, (("stm/asyncTaskQueue.mli", 62, 2473, 2475), ("stm/asyncTaskQueue.mli", 62, 2473, 2521), 0), 0, 0, 0, Tag1 ("AsyncTaskQueue", 3)), 1, 0); Tag1 (("request", 441), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("stm/asyncTaskQueue.mli", 68, 2667, 2669), ("stm/asyncTaskQueue.mli", 68, 2667, 2681), 0), 0, 0, 0, Tag1 ("AsyncTaskQueue", 6)), 1, 0); Tag1 (("response", 442), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("stm/asyncTaskQueue.mli", 69, 2682, 2684), ("stm/asyncTaskQueue.mli", 69, 2682, 2697), 0), 0, 0, 0, Tag1 ("AsyncTaskQueue", 7)), 1, 0); (("name", 443), ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -56), 0, (("stm/asyncTaskQueue.mli", 72, 2729, 2731), ("stm/asyncTaskQueue.mli", 72, 2729, 2748), 0), 0, Tag1 ("AsyncTaskQueue", 8)), 0); (("extra_env", 444), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -55), (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -54)], (0)), 100000000, 0, -53), 0), 100000000, 0, -52), 0, (("stm/asyncTaskQueue.mli", 75, 2792, 2794), ("stm/asyncTaskQueue.mli", 75, 2792, 2830), 0), 0, Tag1 ("AsyncTaskQueue", 9)), 0); (("request_of_task", 445), ((Tag1 (0, (Tag3 ((("worker_status", 440)), 0, (0)), 100000000, 0, -51), (Tag1 (0, (Tag3 ((("task", 438)), 0, (0)), 100000000, 0, -50), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("request", 441)), 0, (0)), 100000000, 0, -49)], (0)), 100000000, 0, -48), 0), 100000000, 0, -47), 0), 100000000, 0, -46), 0, (("stm/asyncTaskQueue.mli", 82, 3096, 3098), ("stm/asyncTaskQueue.mli", 82, 3096, 3159), 0), 0, Tag1 ("AsyncTaskQueue", 10)), 0); (("task_match", 446), ((Tag1 (0, (Tag3 ((("worker_status", 440)), 0, (0)), 100000000, 0, -45), (Tag1 (0, (Tag3 ((("task", 438)), 0, (0)), 100000000, 0, -44), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -43), 0), 100000000, 0, -42), 0), 100000000, 0, -41), 0, (("stm/asyncTaskQueue.mli", 86, 3253, 3255), ("stm/asyncTaskQueue.mli", 86, 3253, 3301), 0), 0, Tag1 ("AsyncTaskQueue", 11)), 0); (("use_response", 447), ((Tag1 (0, (Tag3 ((("worker_status", 440)), 0, (0)), 100000000, 0, -40), (Tag1 (0, (Tag3 ((("task", 438)), 0, (0)), 100000000, 0, -39), (Tag1 (0, (Tag3 ((("response", 442)), 0, (0)), 100000000, 0, -38), (Tag8 (([("End", (0)); ("Stay", (((Tag2 ([(Tag3 ((("competence", 439)), 0, (0)), 100000000, 0, -35); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("task", 438)), 0, (0)), 100000000, 0, -37)], (0)), 100000000, 0, -36)]), 100000000, 0, -34))))], (0, 100000000, 0, -33), 1, 0, 0)), 100000000, 0, -32), 0), 100000000, 0, -31), 0), 100000000, 0, -30), 0), 100000000, 0, -29), 0, (("stm/asyncTaskQueue.mli", 102, 3875, 3877), ("stm/asyncTaskQueue.mli", 103, 3933, 3979), 0), 0, Tag1 ("AsyncTaskQueue", 12)), 0); (("on_marshal_error", 448), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -28), (Tag1 (0, (Tag3 ((("task", 438)), 0, (0)), 100000000, 0, -27), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -26), 0), 100000000, 0, -25), 0), 100000000, 0, -24), 0, (("stm/asyncTaskQueue.mli", 106, 4053, 4055), ("stm/asyncTaskQueue.mli", 106, 4053, 4100), 0), 0, Tag1 ("AsyncTaskQueue", 13)), 0); (("on_task_cancellation_or_expiration_or_slave_death", 449), ((Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("task", 438)), 0, (0)), 100000000, 0, -23)], (0)), 100000000, 0, -22), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -21), 0), 100000000, 0, -20), 0, (("stm/asyncTaskQueue.mli", 117, 4563, 4565), ("stm/asyncTaskQueue.mli", 117, 4563, 4640), 0), 0, Tag1 ("AsyncTaskQueue", 14)), 0); (("forward_feedback", 450), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Feedback")), "feedback"), 0, (0)), 100000000, 0, -19), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("stm/asyncTaskQueue.mli", 120, 4702, 4704), ("stm/asyncTaskQueue.mli", 120, 4702, 4752), 0), 0, Tag1 ("AsyncTaskQueue", 15)), 0); (("perform", 451), ((Tag1 (0, (Tag3 ((("request", 441)), 0, (0)), 100000000, 0, -16), (Tag3 ((("response", 442)), 0, (0)), 100000000, 0, -15), 0), 100000000, 0, -14), 0, (("stm/asyncTaskQueue.mli", 126, 4897, 4899), ("stm/asyncTaskQueue.mli", 126, 4897, 4932), 0), 0, Tag1 ("AsyncTaskQueue", 16)), 0); (("name_of_task", 452), ((Tag1 (0, (Tag3 ((("task", 438)), 0, (0)), 100000000, 0, -13), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("stm/asyncTaskQueue.mli", 129, 4953, 4955), ("stm/asyncTaskQueue.mli", 129, 4953, 4988), 0), 0, Tag1 ("AsyncTaskQueue", 17)), 0); (("name_of_request", 453), ((Tag1 (0, (Tag3 ((("request", 441)), 0, (0)), 100000000, 0, -10), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("stm/asyncTaskQueue.mli", 130, 4989, 4991), ("stm/asyncTaskQueue.mli", 130, 4989, 5030), 0), 0, Tag1 ("AsyncTaskQueue", 18)), 0)])), 0, (("stm/asyncTaskQueue.mli", 37, 1523, 1523), ("stm/asyncTaskQueue.mli", 132, 5032, 5035), 0), Tag1 ("AsyncTaskQueue", 19)), 0); Tag1 (("cancel_switch", 432), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -4)], (0)), 100000000, 0, -3)), 0, 0, 0, 0, (("stm/asyncTaskQueue.mli", 139, 5283, 5283), ("stm/asyncTaskQueue.mli", 139, 5283, 5312), 0), 0, 0, 0, Tag1 ("AsyncTaskQueue", 20)), 1, 0); Tag3 (("MakeQueue", 433), 0, (Tag2 (((("T", 437)), ((("Task", 431)))), Tag2 (0, Tag1 ([Tag1 (("queue", 454), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("stm/asyncTaskQueue.mli", 145, 5473, 5475), ("stm/asyncTaskQueue.mli", 145, 5473, 5485), 0), 0, 0, 0, Tag1 ("AsyncTaskQueue", 22)), 1, 0); (("create", 455), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -113), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("CoqworkmgrApi")), "priority"), 0, (0)), 100000000, 0, -112), (Tag3 ((("queue", 454)), 0, (0)), 100000000, 0, -111), 0), 100000000, 0, -110), 0), 100000000, 0, -109), 0, (("stm/asyncTaskQueue.mli", 150, 5699, 5701), ("stm/asyncTaskQueue.mli", 150, 5699, 5752), 0), 0, Tag1 ("AsyncTaskQueue", 23)), 0); (("destroy", 456), ((Tag1 (0, (Tag3 ((("queue", 454)), 0, (0)), 100000000, 0, -108), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -107), 0), 100000000, 0, -106), 0, (("stm/asyncTaskQueue.mli", 153, 5822, 5824), ("stm/asyncTaskQueue.mli", 153, 5822, 5851), 0), 0, Tag1 ("AsyncTaskQueue", 24)), 0); (("n_workers", 457), ((Tag1 (0, (Tag3 ((("queue", 454)), 0, (0)), 100000000, 0, -105), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -104), 0), 100000000, 0, -103), 0, (("stm/asyncTaskQueue.mli", 156, 5913, 5915), ("stm/asyncTaskQueue.mli", 156, 5913, 5943), 0), 0, Tag1 ("AsyncTaskQueue", 25)), 0); (("enqueue_task", 458), ((Tag1 (0, (Tag3 ((("queue", 454)), 0, (0)), 100000000, 0, -102), (Tag1 (0, (Tag3 (Tag1 ((("T", 437)), "task"), 0, (0)), 100000000, 0, -101), (Tag1 (("cancel_switch"), (Tag3 ((("cancel_switch", 432)), 0, (0)), 100000000, 0, -100), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -99), 0), 100000000, 0, -98), 0), 100000000, 0, -97), 0), 100000000, 0, -96), 0, (("stm/asyncTaskQueue.mli", 160, 6089, 6091), ("stm/asyncTaskQueue.mli", 160, 6089, 6164), 0), 0, Tag1 ("AsyncTaskQueue", 26)), 0); (("join", 459), ((Tag1 (0, (Tag3 ((("queue", 454)), 0, (0)), 100000000, 0, -95), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -94), 0), 100000000, 0, -93), 0, (("stm/asyncTaskQueue.mli", 163, 6221, 6223), ("stm/asyncTaskQueue.mli", 163, 6221, 6247), 0), 0, Tag1 ("AsyncTaskQueue", 27)), 0); (("cancel_all", 460), ((Tag1 (0, (Tag3 ((("queue", 454)), 0, (0)), 100000000, 0, -92), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -91), 0), 100000000, 0, -90), 0, (("stm/asyncTaskQueue.mli", 166, 6291, 6293), ("stm/asyncTaskQueue.mli", 166, 6291, 6323), 0), 0, Tag1 ("AsyncTaskQueue", 28)), 0); (("cancel_worker", 461), ((Tag1 (0, (Tag3 ((("queue", 454)), 0, (0)), 100000000, 0, -89), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("WorkerPool")), "worker_id"), 0, (0)), 100000000, 0, -88), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -87), 0), 100000000, 0, -86), 0), 100000000, 0, -85), 0, (("stm/asyncTaskQueue.mli", 169, 6390, 6392), ("stm/asyncTaskQueue.mli", 169, 6390, 6449), 0), 0, Tag1 ("AsyncTaskQueue", 29)), 0); (("set_order", 462), ((Tag1 (0, (Tag3 ((("queue", 454)), 0, (0)), 100000000, 0, -84), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((("T", 437)), "task"), 0, (0)), 100000000, 0, -83), (Tag1 (0, (Tag3 (Tag1 ((("T", 437)), "task"), 0, (0)), 100000000, 0, -82), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -81), 0), 100000000, 0, -80), 0), 100000000, 0, -79), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -78), 0), 100000000, 0, -77), 0), 100000000, 0, -76), 0, (("stm/asyncTaskQueue.mli", 172, 6512, 6514), ("stm/asyncTaskQueue.mli", 172, 6512, 6572), 0), 0, Tag1 ("AsyncTaskQueue", 30)), 0); (("broadcast", 463), ((Tag1 (0, (Tag3 ((("queue", 454)), 0, (0)), 100000000, 0, -75), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -74), 0), 100000000, 0, -73), 0, (("stm/asyncTaskQueue.mli", 197, 7554, 7556), ("stm/asyncTaskQueue.mli", 197, 7554, 7585), 0), 0, Tag1 ("AsyncTaskQueue", 31)), 0); (("snapshot", 464), ((Tag1 (0, (Tag3 ((("queue", 454)), 0, (0)), 100000000, 0, -72), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("T", 437)), "task"), 0, (0)), 100000000, 0, -71)], (0)), 100000000, 0, -70), 0), 100000000, 0, -69), 0, (("stm/asyncTaskQueue.mli", 201, 7691, 7693), ("stm/asyncTaskQueue.mli", 201, 7691, 7728), 0), 0, Tag1 ("AsyncTaskQueue", 32)), 0); (("clear", 465), ((Tag1 (0, (Tag3 ((("queue", 454)), 0, (0)), 100000000, 0, -68), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -67), 0), 100000000, 0, -66), 0, (("stm/asyncTaskQueue.mli", 204, 7795, 7797), ("stm/asyncTaskQueue.mli", 204, 7795, 7822), 0), 0, Tag1 ("AsyncTaskQueue", 33)), 0); (("with_n_workers", 466), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -65), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("CoqworkmgrApi")), "priority"), 0, (0)), 100000000, 0, -64), (Tag1 (0, (Tag1 (0, (Tag3 ((("queue", 454)), 0, (0)), 100000000, 0, -63), ((("a")), 100000000, 0, -61), 0), 100000000, 0, -62), ((("a")), 100000000, 0, -61), 0), 100000000, 0, -60), 0), 100000000, 0, -59), 0), 100000000, 0, -58), 0, (("stm/asyncTaskQueue.mli", 208, 7946, 7948), ("stm/asyncTaskQueue.mli", 208, 7946, 8021), 0), 0, Tag1 ("AsyncTaskQueue", 34)), 0)]))), 0, (("stm/asyncTaskQueue.mli", 142, 5391, 5391), ("stm/asyncTaskQueue.mli", 210, 8023, 8026), 0), Tag1 ("AsyncTaskQueue", 35)), 0, 0); Tag3 (("MakeWorker", 434), 0, (Tag2 (((("T", 436)), ((("Task", 431)))), Tag2 (0, Tag1 ([(("init_stdout", 467), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -119), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -118), 0), 100000000, 0, -117), 0, (("stm/asyncTaskQueue.mli", 217, 8216, 8218), ("stm/asyncTaskQueue.mli", 217, 8216, 8248), 0), 0, Tag1 ("AsyncTaskQueue", 37)), 0); (("main_loop", 468), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -116), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -115), 0), 100000000, 0, -114), 0, (("stm/asyncTaskQueue.mli", 220, 8314, 8316), ("stm/asyncTaskQueue.mli", 220, 8314, 8344), 0), 0, Tag1 ("AsyncTaskQueue", 38)), 0)]))), 0, (("stm/asyncTaskQueue.mli", 214, 8111, 8111), ("stm/asyncTaskQueue.mli", 222, 8346, 8349), 0), Tag1 ("AsyncTaskQueue", 39)), 0, 0); Tag2 (("RemoteException", 435), ((Tag3 ("exn", 7)), 0, ([(Tag3 (Tag1 ((Tag2 ("Pp")), "t"), 0, (0)), 100000000, 0, -2)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("AsyncTaskQueue", 40)), 2, 0)], "AsyncTaskQueue", [("AsyncTaskQueue", ("\127\151\232l\227\195\242\139\158|$\025G\0155G")); ("Xml_datatype", ("\200_,.\243\247\166\156\210\247\226\250Oey\171")); ("WorkerPool", ("\210\236dD\187Bu\159\205\193\153I\252,\232\012")); ("Unix", (":B72R\011\005Sj\189)\011\239PH\254")); ("Thread", ("q\0258z^I\139\141\195\247qk\255\176\212\018")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Mutex", ("\168\133?\146'\239J\190R\226\n}Z\213\b\191")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Bytes", ("C\134\194)\175\222\137p\205\246\244\r\241\164P\209")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Stateid", ("\183\165\247\166~\005\017.\179f.\178n\255(\137")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Feedback", ("a\178\127\150\142\2521\161\147\142V7\248\191\028\219")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("CoqworkmgrApi", ("\139.\203-\030\232\208s\224\250\222\159tE&\183")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CThread", ("\216\178\194\195l\164\022S_\250\024=\167\215\208%"))], [(0)])
exception RemoteException of Pp.t

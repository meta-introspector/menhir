module List :
  sig
    val iter : 'a list -> f:('a -> unit) -> unit
    val map : 'a list -> f:('a -> 'b) -> 'b list
  end
module Make = Sexplib__Type_with_layout.Make
module Parsed = Sexplib__Type_with_layout.Parsed
type t =
  Sexplib__Type_with_layout.t =
    Atom of Sexplib.Src_pos.Relative.t * string * string option
  | List of Sexplib.Src_pos.Relative.t * t_or_comment list *
      Sexplib.Src_pos.Relative.t
and t_or_comment =
  Sexplib__Type_with_layout.t_or_comment =
    Sexp of t
  | Comment of comment
and comment =
  Sexplib__Type_with_layout.comment =
    Plain_comment of Sexplib.Src_pos.Relative.t * string
  | Sexp_comment of Sexplib.Src_pos.Relative.t * comment list * t
val sexp_of_t : t -> Sexplib.Type.t
val sexp_of_comment : comment -> Sexplib.Type.t
val sexp_of_t_or_comment : t_or_comment -> Sexplib.Type.t
val relativize : Parsed.t_or_comment -> t_or_comment
type pos = Sexplib.Src_pos.Relative.t = { row : int; col : int; }
val sexp_of_pos : Sexplib.Src_pos.Relative.t -> Sexplib.Type.t
module Lexer :
  sig
    val main :
      ?buf:Buffer.t -> Lexing.lexbuf -> Sexplib.Parser_with_layout.token
  end
module Parser = Sexplib.Parser_with_layout
module Render :
  sig
    module Rel_pos = Sexplib.Src_pos.Relative
    module Abs_pos = Sexplib.Src_pos.Absolute
    type last_atom = { immed_after : Abs_pos.t; unescaped : bool; }
    type state = {
      mutable row_shift : Rel_pos.t;
      mutable current : Abs_pos.t;
      mutable last_atom : last_atom option;
      mutable last_comment_row : int;
    }
    type 'a t = (char -> unit) -> state -> 'a
    val return : 'a -> 'b -> 'c -> 'a
    val bind : ('a -> 'b -> 'c) -> f:('c -> 'a -> 'b -> 'd) -> 'a -> 'b -> 'd
    val run : 'a -> ('a -> state -> 'b) -> 'b
    val emit_char : (char -> 'a) -> state -> char -> unit
    val emit_string : (char -> 'a) -> state -> string -> unit
    val emit_chars : (char -> 'a) -> state -> char -> n:int -> unit
    val advance :
      (char -> 'a) ->
      anchor:Abs_pos.t ->
      state ->
      by:Sexplib__Src_pos.Relative.t ->
      unescaped_atom:bool -> line_comment:bool -> unit
    val render_t : (char -> 'a) -> anchor:Abs_pos.t -> state -> t/2 -> unit
    val render_toc :
      (char -> 'a) -> anchor:Abs_pos.t -> state -> t_or_comment -> unit
    val render_c :
      (char -> 'a) -> anchor:Abs_pos.t -> state -> comment -> unit
    val render : t_or_comment -> (char -> 'a) -> state -> unit
    val sexp : t_or_comment -> (char -> 'a) -> state -> unit
  end
module Forget :
  sig
    module Cps :
      sig
        val forget_t : t -> (Sexplib.Type.t -> 'r) -> 'r
        val forget_toc : t_or_comment -> (Sexplib.Type.t option -> 'r) -> 'r
        val forget_tocs :
          t_or_comment list -> (Sexplib.Type.t list -> 'r) -> 'r
      end
    val t : t -> Sexplib.Type.t
    val t_or_comment : t_or_comment -> Sexplib.Type.t option
    val t_or_comments : t_or_comment list -> Sexplib.Type.t list("DEBUG:rule", [Tag3 (("List", 812), 0, (Tag1 ([(("iter", 828), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -51)], (0)), 100000000, 0, -52), (Tag1 (("f"), (Tag1 (0, ((0), 100000000, 0, -51), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -50), 0), 100000000, 0, -49), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -48), 0), 100000000, 0, -47), 0), 100000000, 0, -46), 0, (("src/sexp_with_layout.ml", 4, 66, 72), ("src/sexp_with_layout.ml", 4, 66, 76), 0), 0, Tag1 ("Sexplib__Sexp_with_layout", 0)), 0); (("map", 829), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -44)], (0)), 100000000, 0, -45), (Tag1 (("f"), (Tag1 (0, ((0), 100000000, 0, -44), ((0), 100000000, 0, -42), 0), 100000000, 0, -43), (Tag3 ((Tag3 ("list", 9)), [((0), 100000000, 0, -42)], (0)), 100000000, 0, -41), 0), 100000000, 0, -40), 0), 100000000, 0, -39), 0, (("src/sexp_with_layout.ml", 5, 98, 104), ("src/sexp_with_layout.ml", 5, 98, 107), 0), 0, Tag1 ("Sexplib__Sexp_with_layout", 3)), 0)]), 0, (("src/sexp_with_layout.ml", 3, 45, 45), ("src/sexp_with_layout.ml", 6, 143, 146), 0), Tag1 ("Sexplib__Sexp_with_layout", 6)), 0, 0); Tag3 (("Make", 813), 0, (Tag3 (Tag1 ((Tag2 ("Sexplib__Type_with_layout")), "Make")), 0, (("src/type_with_layout.mli", 3, 76, 76), ("src/type_with_layout.mli", 29, 808, 811), 0), Tag1 ("Sexplib__Type_with_layout", 16)), 0, 0); Tag3 (("Parsed", 814), 0, (Tag3 (Tag1 ((Tag2 ("Sexplib__Type_with_layout")), "Parsed")), 0, (("src/type_with_layout.mli", 32, 856, 856), ("src/type_with_layout.mli", 32, 856, 896), 0), Tag1 ("Sexplib__Type_with_layout", 17)), 0, 0); Tag1 (("t", 815), (0, 0, Tag1 ([(("Atom", 293), ([(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Src_pos"), "Relative"), "t"), 0, (0)), 100000000, 0, -31); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -32); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -34)], (0)), 100000000, 0, -33)]), 0, (("src/type_with_layout.mli", 11, 270, 276), ("src/type_with_layout.mli", 11, 270, 316), 0), 0, Tag1 ("Sexplib__Type_with_layout", 6)); (("List", 294), ([(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Src_pos"), "Relative"), "t"), 0, (0)), 100000000, 0, -35); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t_or_comment", 816)), 0, (0)), 100000000, 0, -37)], (0)), 100000000, 0, -36); (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Src_pos"), "Relative"), "t"), 0, (0)), 100000000, 0, -38)]), 0, (("src/type_with_layout.mli", 12, 354, 360), ("src/type_with_layout.mli", 12, 354, 403), 0), 0, Tag1 ("Sexplib__Type_with_layout", 7))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Sexplib__Type_with_layout")), "t"), 0, (0)), 100000000, 0, -30)), 0, 0, 0, 0, (("src/type_with_layout.mli", 10, 257, 261), ("src/type_with_layout.mli", 12, 354, 403), 0), 0, 0, 0, Tag1 ("Sexplib__Type_with_layout", 3)), 1, 0); Tag1 (("t_or_comment", 816), (0, 0, Tag1 ([(("Sexp", 295), ([(Tag3 ((("t", 815)), 0, (0)), 100000000, 0, -28)]), 0, (("src/type_with_layout.mli", 16, 467, 473), ("src/type_with_layout.mli", 16, 467, 484), 0), 0, Tag1 ("Sexplib__Type_with_layout", 8)); (("Comment", 296), ([(Tag3 ((("comment", 817)), 0, (0)), 100000000, 0, -29)]), 0, (("src/type_with_layout.mli", 17, 485, 491), ("src/type_with_layout.mli", 17, 485, 511), 0), 0, Tag1 ("Sexplib__Type_with_layout", 9))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Sexplib__Type_with_layout")), "t_or_comment"), 0, (0)), 100000000, 0, -27)), 0, 0, 0, 0, (("src/type_with_layout.mli", 15, 444, 448), ("src/type_with_layout.mli", 17, 485, 511), 0), 0, 0, 0, Tag1 ("Sexplib__Type_with_layout", 4)), 2, 0); Tag1 (("comment", 817), (0, 0, Tag1 ([(("Plain_comment", 297), ([(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Src_pos"), "Relative"), "t"), 0, (0)), 100000000, 0, -21); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -22)]), 0, (("src/type_with_layout.mli", 20, 531, 537), ("src/type_with_layout.mli", 20, 531, 570), 0), 0, Tag1 ("Sexplib__Type_with_layout", 10)); (("Sexp_comment", 298), ([(Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Src_pos"), "Relative"), "t"), 0, (0)), 100000000, 0, -23); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("comment", 817)), 0, (0)), 100000000, 0, -25)], (0)), 100000000, 0, -24); (Tag3 ((("t", 815)), 0, (0)), 100000000, 0, -26)]), 0, (("src/type_with_layout.mli", 21, 599, 605), ("src/type_with_layout.mli", 21, 599, 647), 0), 0, Tag1 ("Sexplib__Type_with_layout", 11))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Sexplib__Type_with_layout")), "comment"), 0, (0)), 100000000, 0, -20)), 0, 0, 0, 0, (("src/type_with_layout.mli", 19, 513, 517), ("src/type_with_layout.mli", 21, 599, 647), 0), 0, 0, 0, Tag1 ("Sexplib__Type_with_layout", 5)), 2, 0); (("sexp_of_t", 818), ((Tag1 (0, (Tag3 ((("t", 815)), 0, (0)), 100000000, 0, -19), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Type"), "t"), 0, (0)), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("src/type_with_layout.mli", 25, 672, 676), ("src/type_with_layout.mli", 25, 672, 703), 0), 0, Tag1 ("Sexplib__Type_with_layout", 12)), 0); (("sexp_of_comment", 819), ((Tag1 (0, (Tag3 ((("comment", 817)), 0, (0)), 100000000, 0, -16), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Type"), "t"), 0, (0)), 100000000, 0, -15), 0), 100000000, 0, -14), 0, (("src/type_with_layout.mli", 26, 704, 708), ("src/type_with_layout.mli", 26, 704, 747), 0), 0, Tag1 ("Sexplib__Type_with_layout", 13)), 0); (("sexp_of_t_or_comment", 820), ((Tag1 (0, (Tag3 ((("t_or_comment", 816)), 0, (0)), 100000000, 0, -13), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Type"), "t"), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("src/type_with_layout.mli", 27, 748, 752), ("src/type_with_layout.mli", 27, 748, 801), 0), 0, Tag1 ("Sexplib__Type_with_layout", 14)), 0); (("relativize", 821), ((Tag1 (0, (Tag3 (Tag1 ((("Parsed", 814)), "t_or_comment"), 0, (0)), 100000000, 0, -10), (Tag3 ((("t_or_comment", 816)), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("src/type_with_layout.mli", 36, 983, 983), ("src/type_with_layout.mli", 36, 983, 1035), 0), 0, Tag1 ("Sexplib__Type_with_layout", 18)), 0); Tag1 (("pos", 822), (0, 0, [[(("row", 381), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -6), (("src/sexp_with_layout.ml", 11, 206, 210), ("src/sexp_with_layout.ml", 12, 220, 223), 0), 0, Tag1 ("Sexplib__Sexp_with_layout", 8)); (("col", 382), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -7), (("src/sexp_with_layout.ml", 12, 220, 224), ("src/sexp_with_layout.ml", 12, 220, 233), 0), 0, Tag1 ("Sexplib__Sexp_with_layout", 9))]], 1, ((Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Src_pos"), "Relative"), "t"), 0, (0)), 100000000, 0, -5)), 0, 0, 0, 0, (("src/sexp_with_layout.ml", 10, 174, 174), ("src/sexp_with_layout.ml", 13, 234, 237), 0), 0, 0, 0, Tag1 ("Sexplib__Sexp_with_layout", 7)), 1, 0); (("sexp_of_pos", 823), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Src_pos"), "Relative"), "t"), 0, (0)), 100000000, 0, -4), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Type"), "t"), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/sexp_with_layout.ml", 15, 239, 243), ("src/sexp_with_layout.ml", 15, 239, 254), 0), 0, Tag1 ("Sexplib__Sexp_with_layout", 10)), 0); Tag3 (("Lexer", 824), 0, (Tag1 ([(("main", 830), ((Tag1 (Tag1 ("buf"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Buffer"), "t"), 0, (0)), 100000000, 0, -58)], (0)), 100000000, 0, -57), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -56), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Parser_with_layout"), "token"), 0, (0)), 100000000, 0, -55), 0), 100000000, 0, -54), 0), 100000000, 0, -53), 0, (("src/sexp_with_layout.ml", 18, 307, 313), ("src/sexp_with_layout.ml", 18, 307, 317), 0), 0, Tag1 ("Sexplib__Sexp_with_layout", 11)), 0)]), 0, (("src/sexp_with_layout.ml", 17, 285, 285), ("src/sexp_with_layout.ml", 19, 343, 346), 0), Tag1 ("Sexplib__Sexp_with_layout", 12)), 0, 0); Tag3 (("Parser", 825), 1, (Tag3 (Tag1 ((Tag2 ("Sexplib")), "Parser_with_layout")), 0, (("src/sexp_with_layout.ml", 21, 348, 348), ("src/sexp_with_layout.ml", 21, 348, 382), 0), Tag1 ("Sexplib__Sexp_with_layout", 13)), 0, 0); Tag3 (("Render", 826), 0, (Tag1 ([Tag3 (("Rel_pos", 831), 1, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Src_pos"), "Relative")), 0, (("src/sexp_with_layout.ml", 24, 407, 409), ("src/sexp_with_layout.ml", 24, 407, 442), 0), Tag1 ("Sexplib__Sexp_with_layout", 14)), 0, 0); Tag3 (("Abs_pos", 832), 1, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Src_pos"), "Absolute")), 0, (("src/sexp_with_layout.ml", 25, 443, 445), ("src/sexp_with_layout.ml", 25, 443, 478), 0), Tag1 ("Sexplib__Sexp_with_layout", 15)), 0, 0); Tag1 (("last_atom", 833), (0, 0, [[(("immed_after", 414), 0, (Tag3 (Tag1 ((("Abs_pos", 832)), "t"), 0, (0)), 100000000, 0, -179), (("src/sexp_with_layout.ml", 28, 499, 505), ("src/sexp_with_layout.ml", 29, 529, 534), 0), 0, Tag1 ("Sexplib__Sexp_with_layout", 17)); (("unescaped", 415), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -180), (("src/sexp_with_layout.ml", 29, 529, 535), ("src/sexp_with_layout.ml", 29, 529, 551), 0), 0, Tag1 ("Sexplib__Sexp_with_layout", 18))]], 1, 0, 0, 0, 0, 0, (("src/sexp_with_layout.ml", 27, 480, 482), ("src/sexp_with_layout.ml", 30, 552, 557), 0), 0, 0, 0, Tag1 ("Sexplib__Sexp_with_layout", 16)), 1, 0); Tag1 (("state", 834), (0, 0, [[(("row_shift", 425), 1, (Tag3 (Tag1 ((("Rel_pos", 831)), "t"), 0, (0)), 100000000, 0, -174), (("src/sexp_with_layout.ml", 33, 574, 580), ("src/sexp_with_layout.ml", 34, 610, 615), 0), 0, Tag1 ("Sexplib__Sexp_with_layout", 20)); (("current", 426), 1, (Tag3 (Tag1 ((("Abs_pos", 832)), "t"), 0, (0)), 100000000, 0, -175), (("src/sexp_with_layout.ml", 34, 610, 616), ("src/sexp_with_layout.ml", 35, 644, 649), 0), 0, Tag1 ("Sexplib__Sexp_with_layout", 21)); (("last_atom", 427), 1, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("last_atom", 833)), 0, (0)), 100000000, 0, -177)], (0)), 100000000, 0, -176), (("src/sexp_with_layout.ml", 35, 644, 650), ("src/sexp_with_layout.ml", 36, 687, 692), 0), 0, Tag1 ("Sexplib__Sexp_with_layout", 22)); (("last_comment_row", 428), 1, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -178), (("src/sexp_with_layout.ml", 36, 687, 693), ("src/sexp_with_layout.ml", 36, 687, 723), 0), 0, Tag1 ("Sexplib__Sexp_with_layout", 23))]], 1, 0, 0, 0, 0, 0, (("src/sexp_with_layout.ml", 32, 559, 561), ("src/sexp_with_layout.ml", 37, 724, 729), 0), 0, 0, 0, Tag1 ("Sexplib__Sexp_with_layout", 19)), 1, 0); Tag1 (("t", 835), ([((("a")), 100000000, 0, -169)], 1, 0, 1, ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -173), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -172), 0), 100000000, 0, -171), (Tag1 (0, (Tag3 ((("state", 834)), 0, (0)), 100000000, 0, -170), ((("a")), 100000000, 0, -169), 0), 100000000, 0, -168), 0), 100000000, 0, -167)), [25], [0], 0, 0, (("src/sexp_with_layout.ml", 42, 857, 859), ("src/sexp_with_layout.ml", 42, 857, 900), 0), 0, 0, 0, Tag1 ("Sexplib__Sexp_with_layout", 24)), 1, 0); (("return", 836), ((Tag1 (0, ((0), 100000000, 0, -164), (Tag1 (0, ((0), 100000000, 0, -166), (Tag1 (0, ((0), 100000000, 0, -165), ((0), 100000000, 0, -164), 0), 100000000, 0, -163), 0), 100000000, 0, -162), 0), 100000000, 0, -161), 0, (("src/sexp_with_layout.ml", 44, 902, 908), ("src/sexp_with_layout.ml", 44, 902, 914), 0), 0, Tag1 ("Sexplib__Sexp_with_layout", 25)), 0); (("bind", 837), ((Tag1 (0, (Tag1 (0, ((0), 100000000, 0, -154), (Tag1 (0, ((0), 100000000, 0, -153), ((0), 100000000, 0, -158), (1)), 100000000, 0, -160), (1)), 100000000, 0, -159), (Tag1 (("f"), (Tag1 (0, ((0), 100000000, 0, -158), (Tag1 (0, ((0), 100000000, 0, -154), (Tag1 (0, ((0), 100000000, 0, -153), ((0), 100000000, 0, -152), (1)), 100000000, 0, -157), (1)), 100000000, 0, -156), (1)), 100000000, 0, -155), (Tag1 (0, ((0), 100000000, 0, -154), (Tag1 (0, ((0), 100000000, 0, -153), ((0), 100000000, 0, -152), 0), 100000000, 0, -151), 0), 100000000, 0, -150), 0), 100000000, 0, -149), 0), 100000000, 0, -148), 0, (("src/sexp_with_layout.ml", 45, 931, 937), ("src/sexp_with_layout.ml", 45, 931, 941), 0), 0, Tag1 ("Sexplib__Sexp_with_layout", 29)), 0); (("run", 838), ((Tag1 (0, ((0), 100000000, 0, -147), (Tag1 (0, (Tag1 (0, ((0), 100000000, 0, -147), (Tag1 (0, (Tag3 ((("state", 834)), 0, (0)), 100000000, 0, -146), ((0), 100000000, 0, -143), (1)), 100000000, 0, -145), (1)), 100000000, 0, -144), ((0), 100000000, 0, -143), 0), 100000000, 0, -142), 0), 100000000, 0, -141), 0, (("src/sexp_with_layout.ml", 47, 980, 986), ("src/sexp_with_layout.ml", 47, 980, 989), 0), 0, Tag1 ("Sexplib__Sexp_with_layout", 34)), 0); (("emit_char", 839), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -137), ((0), 100000000, 0, -140), (1)), 100000000, 0, -139), (Tag1 (0, (Tag3 ((("state", 834)), 0, (0)), 100000000, 0, -138), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -137), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -136), 0), 100000000, 0, -135), 0), 100000000, 0, -134), 0), 100000000, 0, -133), 0, (("src/sexp_with_layout.ml", 57, 1179, 1185), ("src/sexp_with_layout.ml", 57, 1179, 1194), 0), 0, Tag1 ("Sexplib__Sexp_with_layout", 37)), 0); (("emit_string", 840), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -132), ((0), 100000000, 0, -131), (1)), 100000000, 0, -130), (Tag1 (0, (Tag3 ((("state", 834)), 0, (0)), 100000000, 0, -129), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -128), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -127), 0), 100000000, 0, -126), 0), 100000000, 0, -125), 0), 100000000, 0, -124), 0, (("src/sexp_with_layout.ml", 65, 1398, 1404), ("src/sexp_with_layout.ml", 65, 1398, 1415), 0), 0, Tag1 ("Sexplib__Sexp_with_layout", 43)), 0); (("emit_chars", 841), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -123), ((0), 100000000, 0, -122), (1)), 100000000, 0, -121), (Tag1 (0, (Tag3 ((("state", 834)), 0, (0)), 100000000, 0, -120), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -119), (Tag1 (("n"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -118), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -117), 0), 100000000, 0, -116), 0), 100000000, 0, -115), 0), 100000000, 0, -114), 0), 100000000, 0, -113), 0, (("src/sexp_with_layout.ml", 72, 1536, 1542), ("src/sexp_with_layout.ml", 72, 1536, 1552), 0), 0, Tag1 ("Sexplib__Sexp_with_layout", 49)), 0); (("advance", 842), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -112), ((0), 100000000, 0, -111), (1)), 100000000, 0, -110), (Tag1 (("anchor"), (Tag3 (Tag1 ((("Abs_pos", 832)), "t"), 0, (0)), 100000000, 0, -109), (Tag1 (0, (Tag3 ((("state", 834)), 0, (0)), 100000000, 0, -108), (Tag1 (("by"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib__Src_pos")), "Relative"), "t"), 0, (0)), 100000000, 0, -107), (Tag1 (("unescaped_atom"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -106), (Tag1 (("line_comment"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -105), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -104), 0), 100000000, 0, -103), 0), 100000000, 0, -102), 0), 100000000, 0, -101), 0), 100000000, 0, -100), 0), 100000000, 0, -99), 0), 100000000, 0, -98), 0, (("src/sexp_with_layout.ml", 74, 1607, 1613), ("src/sexp_with_layout.ml", 74, 1607, 1620), 0), 0, Tag1 ("Sexplib__Sexp_with_layout", 54)), 0); (("render_t", 843), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -87), ((0), 100000000, 0, -86), (1)), 100000000, 0, -85), (Tag1 (("anchor"), (Tag3 (Tag1 ((("Abs_pos", 832)), "t"), 0, (0)), 100000000, 0, -84), (Tag1 (0, (Tag3 ((("state", 834)), 0, (0)), 100000000, 0, -83), (Tag1 (0, (Tag3 ((("t", 815)), 0, (0)), 100000000, 0, -97), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -81), 0), 100000000, 0, -96), 0), 100000000, 0, -95), 0), 100000000, 0, -94), 0), 100000000, 0, -93), 0, (("src/sexp_with_layout.ml", 115, 3291, 3301), ("src/sexp_with_layout.ml", 115, 3291, 3309), 0), 0, Tag1 ("Sexplib__Sexp_with_layout", 73)), 0); (("render_toc", 844), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -87), ((0), 100000000, 0, -86), (1)), 100000000, 0, -85), (Tag1 (("anchor"), (Tag3 (Tag1 ((("Abs_pos", 832)), "t"), 0, (0)), 100000000, 0, -84), (Tag1 (0, (Tag3 ((("state", 834)), 0, (0)), 100000000, 0, -83), (Tag1 (0, (Tag3 ((("t_or_comment", 816)), 0, (0)), 100000000, 0, -92), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -81), 0), 100000000, 0, -91), 0), 100000000, 0, -90), 0), 100000000, 0, -89), 0), 100000000, 0, -88), 0, (("src/sexp_with_layout.ml", 136, 4212, 4218), ("src/sexp_with_layout.ml", 136, 4212, 4228), 0), 0, Tag1 ("Sexplib__Sexp_with_layout", 74)), 0); (("render_c", 845), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -87), ((0), 100000000, 0, -86), (1)), 100000000, 0, -85), (Tag1 (("anchor"), (Tag3 (Tag1 ((("Abs_pos", 832)), "t"), 0, (0)), 100000000, 0, -84), (Tag1 (0, (Tag3 ((("state", 834)), 0, (0)), 100000000, 0, -83), (Tag1 (0, (Tag3 ((("comment", 817)), 0, (0)), 100000000, 0, -82), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -81), 0), 100000000, 0, -80), 0), 100000000, 0, -79), 0), 100000000, 0, -78), 0), 100000000, 0, -77), 0, (("src/sexp_with_layout.ml", 140, 4346, 4352), ("src/sexp_with_layout.ml", 140, 4346, 4360), 0), 0, Tag1 ("Sexplib__Sexp_with_layout", 75)), 0); (("render", 846), ((Tag1 (0, (Tag3 ((("t_or_comment", 816)), 0, (0)), 100000000, 0, -76), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -75), ((0), 100000000, 0, -74), (1)), 100000000, 0, -73), (Tag1 (0, (Tag3 ((("state", 834)), 0, (0)), 100000000, 0, -72), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -71), 0), 100000000, 0, -70), 0), 100000000, 0, -69), 0), 100000000, 0, -68), 0, (("src/sexp_with_layout.ml", 152, 4843, 4849), ("src/sexp_with_layout.ml", 152, 4843, 4855), 0), 0, Tag1 ("Sexplib__Sexp_with_layout", 105)), 0); (("sexp", 847), ((Tag1 (0, (Tag3 ((("t_or_comment", 816)), 0, (0)), 100000000, 0, -67), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -66), ((0), 100000000, 0, -65), (1)), 100000000, 0, -64), (Tag1 (0, (Tag3 ((("state", 834)), 0, (0)), 100000000, 0, -63), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -62), 0), 100000000, 0, -61), 0), 100000000, 0, -60), 0), 100000000, 0, -59), 0, (("src/sexp_with_layout.ml", 153, 4920, 4926), ("src/sexp_with_layout.ml", 153, 4920, 4930), 0), 0, Tag1 ("Sexplib__Sexp_with_layout", 109)), 0)]), 0, (("src/sexp_with_layout.ml", 23, 384, 384), ("src/sexp_with_layout.ml", 154, 4940, 4943), 0), Tag1 ("Sexplib__Sexp_with_layout", 110)), 0, 0); Tag3 (("Forget", 827), 0, (Tag1 ([Tag3 (("Cps", 848), 0, (Tag1 ([(("forget_t", 852), ((Tag1 (0, (Tag3 ((("t", 815)), 0, (0)), 100000000, 0, -213), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Type"), "t"), 0, (0)), 100000000, 0, -212), ((("r")), 100000000, 0, -210), 0), 100000000, 0, -211), ((("r")), 100000000, 0, -210), 0), 100000000, 0, -209), 0), 100000000, 0, -208), 0, (("src/sexp_with_layout.ml", 161, 5143, 5147), ("src/sexp_with_layout.ml", 161, 5143, 5187), 0), 0, Tag1 ("Sexplib__Sexp_with_layout", 129)), 0); (("forget_toc", 853), ((Tag1 (0, (Tag3 ((("t_or_comment", 816)), 0, (0)), 100000000, 0, -207), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Type"), "t"), 0, (0)), 100000000, 0, -206)], (0)), 100000000, 0, -205), ((("r")), 100000000, 0, -203), 0), 100000000, 0, -204), ((("r")), 100000000, 0, -203), 0), 100000000, 0, -202), 0), 100000000, 0, -201), 0, (("src/sexp_with_layout.ml", 162, 5188, 5192), ("src/sexp_with_layout.ml", 162, 5188, 5252), 0), 0, Tag1 ("Sexplib__Sexp_with_layout", 130)), 0); (("forget_tocs", 854), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t_or_comment", 816)), 0, (0)), 100000000, 0, -200)], (0)), 100000000, 0, -199), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Type"), "t"), 0, (0)), 100000000, 0, -198)], (0)), 100000000, 0, -197), ((("r")), 100000000, 0, -195), 0), 100000000, 0, -196), ((("r")), 100000000, 0, -195), 0), 100000000, 0, -194), 0), 100000000, 0, -193), 0, (("src/sexp_with_layout.ml", 163, 5253, 5257), ("src/sexp_with_layout.ml", 163, 5253, 5321), 0), 0, Tag1 ("Sexplib__Sexp_with_layout", 131)), 0)]), 0, (("src/sexp_with_layout.ml", 160, 5124, 5126), ("src/sexp_with_layout.ml", 183, 5865, 5870), 0), Tag1 ("Sexplib__Sexp_with_layout", 132)), 0, 0); (("t", 849), ((Tag1 (0, (Tag3 ((("t", 815)), 0, (0)), 100000000, 0, -192), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Type"), "t"), 0, (0)), 100000000, 0, -191), 0), 100000000, 0, -190), 0, (("src/sexp_with_layout.ml", 185, 5872, 5878), ("src/sexp_with_layout.ml", 185, 5872, 5879), 0), 0, Tag1 ("Sexplib__Sexp_with_layout", 133)), 0); (("t_or_comment", 850), ((Tag1 (0, (Tag3 ((("t_or_comment", 816)), 0, (0)), 100000000, 0, -189), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Type"), "t"), 0, (0)), 100000000, 0, -188)], (0)), 100000000, 0, -187), 0), 100000000, 0, -186), 0, (("src/sexp_with_layout.ml", 186, 5912, 5918), ("src/sexp_with_layout.ml", 186, 5912, 5930), 0), 0, Tag1 ("Sexplib__Sexp_with_layout", 136)), 0); (("t_or_comments", 851), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("t_or_comment", 816)), 0, (0)), 100000000, 0, -185)], (0)), 100000000, 0, -184), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib")), "Type"), "t"), 0, (0)), 100000000, 0, -183)], (0)), 100000000, 0, -182), 0), 100000000, 0, -181), 0, (("src/sexp_with_layout.ml", 187, 5965, 5971), ("src/sexp_with_layout.ml", 187, 5965, 5984), 0), 0, Tag1 ("Sexplib__Sexp_with_layout", 139)), 0)]), 0, (("src/sexp_with_layout.ml", 156, 4945, 4945), ("src/sexp_with_layout.ml", 188, 6020, 6023), 0), Tag1 ("Sexplib__Sexp_with_layout", 142)), 0, 0)], "Sexplib__Sexp_with_layout", [("Sexplib__Sexp_with_layout", ("\196\210\167\226\202\017\247\153\001\157\150\155\146q\142\166")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Random", ("\020\005Xq\171\026\218\152X\135\254\023\133zK\200")); ("Stdlib__Printf", ("\215<\139]\021\142\224E\245m\198qc(W\229")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Bytes", ("C\134\194)\175\222\137p\205\246\244\r\241\164P\209")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sexplib__Type_with_layout", ("Q\170\019\238\156\246\192\156\b`\250o[6g\024")); ("Sexplib__Type", ("\147\252\252\167_\149\137\235\001d\241\255`\173Cs")); ("Sexplib__Src_pos", ("\157\022\246\144K\127\174bk\214\128&E\nh\213")); ("Sexplib__Pre_sexp", ("))\b\146\225\144^\227\218\181;f\220\tA\006")); ("Sexplib__Parser_with_layout", ("W\155\134\171aBJ\251|G6\192'S\210<")); ("Sexplib__Parser", ("\203&3\188\178\148:\254\176\140\127\227\029jQL")); ("Sexplib__Lexer", ("M\181eW\204\2193X\225\170yM\228!\146s")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("Sexplib", ("\249\031\145\178\014\020\n\209\129\143\012\015<K\177\189")); ("Parsexp__Positions", ("BE\135\222xW\224\233\184\004o\169\248\bH\230")); ("Parsexp__Parsexp_intf", ("\006\239e\204\167\243e2&\192H\160\029XNm")); ("Parsexp__Parser_intf", ("\154\197J\002\004\252i\162\190\241\151\210\157\024\167e")); ("Parsexp__Parser", ("n\164F;=\199\178\019\150]\2502\176\014a\165")); ("Parsexp__Parse_error_intf", ("\011\229\182\179W\161\176\160P\249\165\214ef\011\229")); ("Parsexp__Parse_error", ("*\031\166\142M\171\026\030\\K7\157Y\232\208\234")); ("Parsexp__Old_parser_cont_state", ("\2535&90\136_\154\027}Oc0\138%X")); ("Parsexp__Of_sexp_error", ("\253\171Y\150\210\218\191\255\160\211\134d/l\132\228")); ("Parsexp__Import", ("\017\029\157\225\239\135p*0\207\146\197\020\128\195!")); ("Parsexp__Cst", (")\228;6o~\227\000pRf\153\216\244sD")); ("Parsexp__Conv_intf", ("\004r\193,k\2254\168\149\229+hmw\134\228")); ("Parsexp__Conv_error", ("\195Bo\140A|\220\136\210\137\165&!\164\134\021")); ("Parsexp__Conv", ("\238|^\141\226\177\185\022$*\023\188\020\002P\229")); ("Parsexp__Automaton_state_intf", ("\196\146]2\143u|+%\027\185v2\225\r\229")); ("Parsexp__Automaton_state", ("L#\030=\218R\022 \228<\188-\r\211\157_")); ("Parsexp__Automaton_stack_intf", ("\235\204\0296]\2449F\029\b:\006\217\162f\024")); ("Parsexp__Automaton_stack", ("\246/\135\251\031)\015r\003\237\254S$\181\243\201")); ("Parsexp__", ("\182\180\203\030\218\020\246\196\221\171_\030GE\171\192")); ("Parsexp", ("\023d\176\173 \b\181o\028\163R\205\005\226BE")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

  end

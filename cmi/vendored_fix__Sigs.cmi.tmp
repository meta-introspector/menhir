module type TYPE = sig type t end
module type OrderedType = Map.OrderedType
module type HashedType = Hashtbl.HashedType
module type FINITE_TYPE = sig type t val foreach : (t -> unit) -> unit end
module type PERSISTENT_MAPS =
  sig
    type key
    type 'data t
    val empty : 'data t
    val add : key -> 'data -> 'data t -> 'data t
    val find : key -> 'data t -> 'data
    val iter : (key -> 'data -> unit) -> 'data t -> unit
  end
module type MINIMAL_IMPERATIVE_MAPS =
  sig
    type key
    type 'data t
    val create : unit -> 'data t
    val add : key -> 'data -> 'data t -> unit
    val find : key -> 'data t -> 'data
  end
module type IMPERATIVE_MAPS =
  sig
    type key
    type 'data t
    val create : unit -> 'data t
    val add : key -> 'data -> 'data t -> unit
    val find : key -> 'data t -> 'data
    val clear : 'data t -> unit
    val iter : (key -> 'data -> unit) -> 'data t -> unit
  end
module type PROPERTY =
  sig
    type property
    val bottom : property
    val equal : property -> property -> bool
    val is_maximal : property -> bool
  end
module type SEMI_LATTICE =
  sig
    type property
    val leq : property -> property -> bool
    val join : property -> property -> property
  end
module type MINIMAL_SEMI_LATTICE =
  sig type property val leq_join : property -> property -> property end
type 'a fix = ('a -> 'a) -> 'a
module type MEMOIZER =
  sig
    type key
    val memoize : (key -> 'a) -> key -> 'a
    type 'a t
    val visibly_memoize : (key -> 'a) -> (key -> 'a) * 'a t
    val fix : (key -> 'a) fix
    exception Cycle of key list * key
    val defensive_fix : (key -> 'a) fix
    val curried : ('a * 'b -> 'c) fix -> ('a -> 'b -> 'c) fix
  end
module type TABULATOR =
  sig type key val tabulate : (key -> 'a) -> key -> 'a end
module type SOLVER =
  sig
    type variable
    type property
    type valuation = variable -> property
    type rhs = valuation -> property
    type equations = variable -> rhs
    val lfp : equations -> valuation
  end
module type SOLUTION =
  sig type variable type property val solution : variable -> property end
module type GRAPH =
  sig
    type t
    val foreach_root : (t -> unit) -> unit
    val foreach_successor : t -> (t -> unit) -> unit
  end
module type DATA_FLOW_GRAPH =
  sig
    type variable
    type property
    val foreach_root : (variable -> property -> unit) -> unit
    val foreach_successor :
      variable -> property -> (variable -> property -> unit) -> unit
  end
module type ONGOING_NUMBERING =
  sig
    type t
    val encode : t -> int
    val current : unit -> int
    val has_been_encoded : t -> bool
  end
module type NUMBERING =
  sig type t val n : int val encode : t -> int val decode : int -> t end
module type TWO_PHASE_NUMBERING =
  sig
    type t
    val encode : t -> int
    val current : unit -> int
    val has_been_encoded : t -> bool
    module Done :
      functor () ->
        sig
          type t = t/2
          val n : int
          val encode : t -> int
          val decode : int -> t
        end
  end("DEBUG:rule", [Tag4 (("TYPE", 548), ((Tag1 ([Tag1 (("t", 569), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("fix/src/Sigs.ml", 18, 1019, 1021), ("fix/src/Sigs.ml", 18, 1019, 1027), 0), 0, 0, 0, Tag1 ("Vendored_fix__Sigs", 0)), 1, 0)])), 0, (("fix/src/Sigs.ml", 17, 996, 996), ("fix/src/Sigs.ml", 19, 1028, 1031), 0), Tag1 ("Vendored_fix__Sigs", 1)), 0); Tag4 (("OrderedType", 549), (((Tag1 (Tag1 ((Tag2 ("Stdlib")), "Map"), "OrderedType"))), 0, (("fix/src/Sigs.ml", 25, 1182, 1182), ("fix/src/Sigs.ml", 26, 1208, 1225), 0), Tag1 ("Vendored_fix__Sigs", 2)), 0); Tag4 (("HashedType", 550), (((Tag1 (Tag1 ((Tag2 ("Stdlib")), "Hashtbl"), "HashedType"))), 0, (("fix/src/Sigs.ml", 28, 1227, 1227), ("fix/src/Sigs.ml", 29, 1252, 1272), 0), Tag1 ("Vendored_fix__Sigs", 3)), 0); Tag4 (("FINITE_TYPE", 551), ((Tag1 ([Tag1 (("t", 570), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("fix/src/Sigs.ml", 36, 1434, 1436), ("fix/src/Sigs.ml", 36, 1434, 1442), 0), 0, 0, 0, Tag1 ("Vendored_fix__Sigs", 4)), 1, 0); (("foreach", 571), ((Tag1 (0, (Tag1 (0, (Tag3 ((("t", 570)), 0, (0)), 100000000, 0, -9), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -8), 0), 100000000, 0, -7), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("fix/src/Sigs.ml", 37, 1443, 1445), ("fix/src/Sigs.ml", 37, 1443, 1477), 0), 0, Tag1 ("Vendored_fix__Sigs", 5)), 0)])), 0, (("fix/src/Sigs.ml", 35, 1404, 1404), ("fix/src/Sigs.ml", 38, 1478, 1481), 0), Tag1 ("Vendored_fix__Sigs", 6)), 0); Tag4 (("PERSISTENT_MAPS", 552), ((Tag1 ([Tag1 (("key", 572), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("fix/src/Sigs.ml", 53, 1960, 1962), ("fix/src/Sigs.ml", 53, 1960, 1970), 0), 0, 0, 0, Tag1 ("Vendored_fix__Sigs", 7)), 1, 0); Tag1 (("t", 573), ([((("data")), 100000000, 0, -33)], 1, 0, 1, 0, [7], [2], 0, 0, (("fix/src/Sigs.ml", 54, 1971, 1973), ("fix/src/Sigs.ml", 54, 1971, 1985), 0), 0, 0, 0, Tag1 ("Vendored_fix__Sigs", 8)), 1, 0); (("empty", 574), ((Tag3 ((("t", 573)), [((("data")), 100000000, 0, -32)], (0)), 100000000, 0, -31), 0, (("fix/src/Sigs.ml", 55, 1986, 1988), ("fix/src/Sigs.ml", 55, 1986, 2006), 0), 0, Tag1 ("Vendored_fix__Sigs", 9)), 0); (("add", 575), ((Tag1 (0, (Tag3 ((("key", 572)), 0, (0)), 100000000, 0, -30), (Tag1 (0, ((("data")), 100000000, 0, -28), (Tag1 (0, (Tag3 ((("t", 573)), [((("data")), 100000000, 0, -28)], (0)), 100000000, 0, -29), (Tag3 ((("t", 573)), [((("data")), 100000000, 0, -28)], (0)), 100000000, 0, -27), 0), 100000000, 0, -26), 0), 100000000, 0, -25), 0), 100000000, 0, -24), 0, (("fix/src/Sigs.ml", 56, 2007, 2009), ("fix/src/Sigs.ml", 56, 2007, 2052), 0), 0, Tag1 ("Vendored_fix__Sigs", 10)), 0); (("find", 576), ((Tag1 (0, (Tag3 ((("key", 572)), 0, (0)), 100000000, 0, -23), (Tag1 (0, (Tag3 ((("t", 573)), [((("data")), 100000000, 0, -21)], (0)), 100000000, 0, -22), ((("data")), 100000000, 0, -21), 0), 100000000, 0, -20), 0), 100000000, 0, -19), 0, (("fix/src/Sigs.ml", 57, 2053, 2055), ("fix/src/Sigs.ml", 57, 2053, 2088), 0), 0, Tag1 ("Vendored_fix__Sigs", 11)), 0); (("iter", 577), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 572)), 0, (0)), 100000000, 0, -18), (Tag1 (0, ((("data")), 100000000, 0, -14), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -17), 0), 100000000, 0, -16), 0), 100000000, 0, -15), (Tag1 (0, (Tag3 ((("t", 573)), [((("data")), 100000000, 0, -14)], (0)), 100000000, 0, -13), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0), 100000000, 0, -10), 0, (("fix/src/Sigs.ml", 58, 2089, 2091), ("fix/src/Sigs.ml", 58, 2089, 2142), 0), 0, Tag1 ("Vendored_fix__Sigs", 12)), 0)])), 0, (("fix/src/Sigs.ml", 52, 1926, 1926), ("fix/src/Sigs.ml", 59, 2143, 2146), 0), Tag1 ("Vendored_fix__Sigs", 13)), 0); Tag4 (("MINIMAL_IMPERATIVE_MAPS", 553), ((Tag1 ([Tag1 (("key", 578), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("fix/src/Sigs.ml", 70, 2523, 2525), ("fix/src/Sigs.ml", 70, 2523, 2533), 0), 0, 0, 0, Tag1 ("Vendored_fix__Sigs", 14)), 1, 0); Tag1 (("t", 579), ([((("data")), 100000000, 0, -50)], 1, 0, 1, 0, [7], [2], 0, 0, (("fix/src/Sigs.ml", 71, 2534, 2536), ("fix/src/Sigs.ml", 71, 2534, 2548), 0), 0, 0, 0, Tag1 ("Vendored_fix__Sigs", 15)), 1, 0); (("create", 580), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -49), (Tag3 ((("t", 579)), [((("data")), 100000000, 0, -48)], (0)), 100000000, 0, -47), 0), 100000000, 0, -46), 0, (("fix/src/Sigs.ml", 72, 2549, 2551), ("fix/src/Sigs.ml", 72, 2549, 2578), 0), 0, Tag1 ("Vendored_fix__Sigs", 16)), 0); (("add", 581), ((Tag1 (0, (Tag3 ((("key", 578)), 0, (0)), 100000000, 0, -45), (Tag1 (0, ((("data")), 100000000, 0, -44), (Tag1 (0, (Tag3 ((("t", 579)), [((("data")), 100000000, 0, -44)], (0)), 100000000, 0, -43), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -42), 0), 100000000, 0, -41), 0), 100000000, 0, -40), 0), 100000000, 0, -39), 0, (("fix/src/Sigs.ml", 73, 2579, 2581), ("fix/src/Sigs.ml", 73, 2579, 2621), 0), 0, Tag1 ("Vendored_fix__Sigs", 17)), 0); (("find", 582), ((Tag1 (0, (Tag3 ((("key", 578)), 0, (0)), 100000000, 0, -38), (Tag1 (0, (Tag3 ((("t", 579)), [((("data")), 100000000, 0, -36)], (0)), 100000000, 0, -37), ((("data")), 100000000, 0, -36), 0), 100000000, 0, -35), 0), 100000000, 0, -34), 0, (("fix/src/Sigs.ml", 74, 2622, 2624), ("fix/src/Sigs.ml", 74, 2622, 2657), 0), 0, Tag1 ("Vendored_fix__Sigs", 18)), 0)])), 0, (("fix/src/Sigs.ml", 69, 2481, 2481), ("fix/src/Sigs.ml", 75, 2658, 2661), 0), Tag1 ("Vendored_fix__Sigs", 19)), 0); Tag4 (("IMPERATIVE_MAPS", 554), ((Tag1 ([Tag1 (("key", 583), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("fix/src/Sigs.ml", 70, 2523, 2525), ("fix/src/Sigs.ml", 70, 2523, 2533), 0), 0, 0, 0, Tag1 ("Vendored_fix__Sigs", 14)), 1, 0); Tag1 (("t", 584), ([((("data")), 100000000, 0, -80)], 1, 0, 1, 0, [7], [2], 0, 0, (("fix/src/Sigs.ml", 71, 2534, 2536), ("fix/src/Sigs.ml", 71, 2534, 2548), 0), 0, 0, 0, Tag1 ("Vendored_fix__Sigs", 15)), 1, 0); (("create", 585), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -79), (Tag3 ((("t", 584)), [((("data")), 100000000, 0, -78)], (0)), 100000000, 0, -77), 0), 100000000, 0, -76), 0, (("fix/src/Sigs.ml", 72, 2549, 2551), ("fix/src/Sigs.ml", 72, 2549, 2578), 0), 0, Tag1 ("Vendored_fix__Sigs", 16)), 0); (("add", 586), ((Tag1 (0, (Tag3 ((("key", 583)), 0, (0)), 100000000, 0, -75), (Tag1 (0, ((("data")), 100000000, 0, -74), (Tag1 (0, (Tag3 ((("t", 584)), [((("data")), 100000000, 0, -74)], (0)), 100000000, 0, -73), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -72), 0), 100000000, 0, -71), 0), 100000000, 0, -70), 0), 100000000, 0, -69), 0, (("fix/src/Sigs.ml", 73, 2579, 2581), ("fix/src/Sigs.ml", 73, 2579, 2621), 0), 0, Tag1 ("Vendored_fix__Sigs", 17)), 0); (("find", 587), ((Tag1 (0, (Tag3 ((("key", 583)), 0, (0)), 100000000, 0, -68), (Tag1 (0, (Tag3 ((("t", 584)), [((("data")), 100000000, 0, -66)], (0)), 100000000, 0, -67), ((("data")), 100000000, 0, -66), 0), 100000000, 0, -65), 0), 100000000, 0, -64), 0, (("fix/src/Sigs.ml", 74, 2622, 2624), ("fix/src/Sigs.ml", 74, 2622, 2657), 0), 0, Tag1 ("Vendored_fix__Sigs", 18)), 0); (("clear", 588), ((Tag1 (0, (Tag3 ((("t", 584)), [((("data")), 100000000, 0, -63)], (0)), 100000000, 0, -62), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -61), 0), 100000000, 0, -60), 0, (("fix/src/Sigs.ml", 79, 2731, 2733), ("fix/src/Sigs.ml", 79, 2731, 2759), 0), 0, Tag1 ("Vendored_fix__Sigs", 20)), 0); (("iter", 589), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 583)), 0, (0)), 100000000, 0, -59), (Tag1 (0, ((("data")), 100000000, 0, -55), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -58), 0), 100000000, 0, -57), 0), 100000000, 0, -56), (Tag1 (0, (Tag3 ((("t", 584)), [((("data")), 100000000, 0, -55)], (0)), 100000000, 0, -54), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -53), 0), 100000000, 0, -52), 0), 100000000, 0, -51), 0, (("fix/src/Sigs.ml", 80, 2760, 2762), ("fix/src/Sigs.ml", 80, 2760, 2813), 0), 0, Tag1 ("Vendored_fix__Sigs", 21)), 0)])), 0, (("fix/src/Sigs.ml", 77, 2663, 2663), ("fix/src/Sigs.ml", 81, 2814, 2817), 0), Tag1 ("Vendored_fix__Sigs", 22)), 0); Tag4 (("PROPERTY", 555), ((Tag1 ([Tag1 (("property", 590), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("fix/src/Sigs.ml", 103, 3855, 3857), ("fix/src/Sigs.ml", 103, 3855, 3870), 0), 0, 0, 0, Tag1 ("Vendored_fix__Sigs", 23)), 1, 0); (("bottom", 591), ((Tag3 ((("property", 590)), 0, (0)), 100000000, 0, -89), 0, (("fix/src/Sigs.ml", 104, 3871, 3873), ("fix/src/Sigs.ml", 104, 3871, 3893), 0), 0, Tag1 ("Vendored_fix__Sigs", 24)), 0); (("equal", 592), ((Tag1 (0, (Tag3 ((("property", 590)), 0, (0)), 100000000, 0, -88), (Tag1 (0, (Tag3 ((("property", 590)), 0, (0)), 100000000, 0, -87), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -86), 0), 100000000, 0, -85), 0), 100000000, 0, -84), 0, (("fix/src/Sigs.ml", 105, 3894, 3896), ("fix/src/Sigs.ml", 105, 3894, 3935), 0), 0, Tag1 ("Vendored_fix__Sigs", 25)), 0); (("is_maximal", 593), ((Tag1 (0, (Tag3 ((("property", 590)), 0, (0)), 100000000, 0, -83), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -82), 0), 100000000, 0, -81), 0, (("fix/src/Sigs.ml", 106, 3936, 3938), ("fix/src/Sigs.ml", 106, 3936, 3970), 0), 0, Tag1 ("Vendored_fix__Sigs", 26)), 0)])), 0, (("fix/src/Sigs.ml", 102, 3828, 3828), ("fix/src/Sigs.ml", 107, 3971, 3974), 0), Tag1 ("Vendored_fix__Sigs", 27)), 0); Tag4 (("SEMI_LATTICE", 556), ((Tag1 ([Tag1 (("property", 594), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("fix/src/Sigs.ml", 116, 4293, 4295), ("fix/src/Sigs.ml", 116, 4293, 4308), 0), 0, 0, 0, Tag1 ("Vendored_fix__Sigs", 28)), 1, 0); (("leq", 595), ((Tag1 (0, (Tag3 ((("property", 594)), 0, (0)), 100000000, 0, -99), (Tag1 (0, (Tag3 ((("property", 594)), 0, (0)), 100000000, 0, -98), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -97), 0), 100000000, 0, -96), 0), 100000000, 0, -95), 0, (("fix/src/Sigs.ml", 117, 4309, 4311), ("fix/src/Sigs.ml", 117, 4309, 4348), 0), 0, Tag1 ("Vendored_fix__Sigs", 29)), 0); (("join", 596), ((Tag1 (0, (Tag3 ((("property", 594)), 0, (0)), 100000000, 0, -94), (Tag1 (0, (Tag3 ((("property", 594)), 0, (0)), 100000000, 0, -93), (Tag3 ((("property", 594)), 0, (0)), 100000000, 0, -92), 0), 100000000, 0, -91), 0), 100000000, 0, -90), 0, (("fix/src/Sigs.ml", 118, 4349, 4351), ("fix/src/Sigs.ml", 118, 4349, 4393), 0), 0, Tag1 ("Vendored_fix__Sigs", 30)), 0)])), 0, (("fix/src/Sigs.ml", 115, 4262, 4262), ("fix/src/Sigs.ml", 119, 4394, 4397), 0), Tag1 ("Vendored_fix__Sigs", 31)), 0); Tag4 (("MINIMAL_SEMI_LATTICE", 557), ((Tag1 ([Tag1 (("property", 597), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("fix/src/Sigs.ml", 124, 4509, 4511), ("fix/src/Sigs.ml", 124, 4509, 4524), 0), 0, 0, 0, Tag1 ("Vendored_fix__Sigs", 32)), 1, 0); (("leq_join", 598), ((Tag1 (0, (Tag3 ((("property", 597)), 0, (0)), 100000000, 0, -104), (Tag1 (0, (Tag3 ((("property", 597)), 0, (0)), 100000000, 0, -103), (Tag3 ((("property", 597)), 0, (0)), 100000000, 0, -102), 0), 100000000, 0, -101), 0), 100000000, 0, -100), 0, (("fix/src/Sigs.ml", 129, 4741, 4743), ("fix/src/Sigs.ml", 129, 4741, 4789), 0), 0, Tag1 ("Vendored_fix__Sigs", 33)), 0)])), 0, (("fix/src/Sigs.ml", 123, 4470, 4470), ("fix/src/Sigs.ml", 130, 4790, 4793), 0), Tag1 ("Vendored_fix__Sigs", 34)), 0); Tag1 (("fix", 558), ([((("a")), 100000000, 0, -3)], 1, 0, 1, ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -3), ((("a")), 100000000, 0, -3), 0), 100000000, 0, -4), ((("a")), 100000000, 0, -3), 0), 100000000, 0, -2)), [63], [0], 0, 0, (("fix/src/Sigs.ml", 137, 4963, 4963), ("fix/src/Sigs.ml", 138, 4977, 4995), 0), 0, 0, 0, Tag1 ("Vendored_fix__Sigs", 35)), 1, 0); Tag4 (("MEMOIZER", 559), ((Tag1 ([Tag1 (("key", 599), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("fix/src/Sigs.ml", 147, 5210, 5212), ("fix/src/Sigs.ml", 147, 5210, 5220), 0), 0, 0, 0, Tag1 ("Vendored_fix__Sigs", 36)), 1, 0); (("memoize", 600), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 599)), 0, (0)), 100000000, 0, -140), ((("a")), 100000000, 0, -137), 0), 100000000, 0, -139), (Tag1 (0, (Tag3 ((("key", 599)), 0, (0)), 100000000, 0, -138), ((("a")), 100000000, 0, -137), 0), 100000000, 0, -136), 0), 100000000, 0, -135), 0, (("fix/src/Sigs.ml", 150, 5270, 5272), ("fix/src/Sigs.ml", 150, 5270, 5311), 0), 0, Tag1 ("Vendored_fix__Sigs", 37)), 0); Tag1 (("t", 601), ([((("a")), 100000000, 0, -134)], 1, 0, 1, 0, [7], [2], 0, 0, (("fix/src/Sigs.ml", 153, 5386, 5388), ("fix/src/Sigs.ml", 153, 5386, 5397), 0), 0, 0, 0, Tag1 ("Vendored_fix__Sigs", 38)), 1, 0); (("visibly_memoize", 602), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 599)), 0, (0)), 100000000, 0, -133), ((("a")), 100000000, 0, -129), 0), 100000000, 0, -132), (Tag2 ([(Tag1 (0, (Tag3 ((("key", 599)), 0, (0)), 100000000, 0, -130), ((("a")), 100000000, 0, -129), 0), 100000000, 0, -128); (Tag3 ((("t", 601)), [((("a")), 100000000, 0, -129)], (0)), 100000000, 0, -131)]), 100000000, 0, -127), 0), 100000000, 0, -126), 0, (("fix/src/Sigs.ml", 154, 5398, 5400), ("fix/src/Sigs.ml", 154, 5398, 5454), 0), 0, Tag1 ("Vendored_fix__Sigs", 39)), 0); (("fix", 603), ((Tag3 ((("fix", 558)), [(Tag1 (0, (Tag3 ((("key", 599)), 0, (0)), 100000000, 0, -125), ((("a")), 100000000, 0, -124), 0), 100000000, 0, -123)], (0)), 100000000, 0, -122), 0, (("fix/src/Sigs.ml", 157, 5500, 5502), ("fix/src/Sigs.ml", 157, 5500, 5526), 0), 0, Tag1 ("Vendored_fix__Sigs", 40)), 0); Tag2 (("Cycle", 604), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("key", 599)), 0, (0)), 100000000, 0, -120)], (0)), 100000000, 0, -119); (Tag3 ((("key", 599)), 0, (0)), 100000000, 0, -121)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Vendored_fix__Sigs", 41)), 2, 0); (("defensive_fix", 605), ((Tag3 ((("fix", 558)), [(Tag1 (0, (Tag3 ((("key", 599)), 0, (0)), 100000000, 0, -118), ((("a")), 100000000, 0, -117), 0), 100000000, 0, -116)], (0)), 100000000, 0, -115), 0, (("fix/src/Sigs.ml", 169, 6192, 6194), ("fix/src/Sigs.ml", 169, 6192, 6228), 0), 0, Tag1 ("Vendored_fix__Sigs", 42)), 0); (("curried", 606), ((Tag1 (0, (Tag3 ((("fix", 558)), [(Tag1 (0, (Tag2 ([((("a")), 100000000, 0, -111); ((("b")), 100000000, 0, -110)]), 100000000, 0, -114), ((("c")), 100000000, 0, -109), 0), 100000000, 0, -113)], (0)), 100000000, 0, -112), (Tag3 ((("fix", 558)), [(Tag1 (0, ((("a")), 100000000, 0, -111), (Tag1 (0, ((("b")), 100000000, 0, -110), ((("c")), 100000000, 0, -109), 0), 100000000, 0, -108), 0), 100000000, 0, -107)], (0)), 100000000, 0, -106), 0), 100000000, 0, -105), 0, (("fix/src/Sigs.ml", 174, 6395, 6397), ("fix/src/Sigs.ml", 174, 6395, 6453), 0), 0, Tag1 ("Vendored_fix__Sigs", 43)), 0)])), 0, (("fix/src/Sigs.ml", 144, 5158, 5158), ("fix/src/Sigs.ml", 176, 6455, 6458), 0), Tag1 ("Vendored_fix__Sigs", 44)), 0); Tag4 (("TABULATOR", 560), ((Tag1 ([Tag1 (("key", 607), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("fix/src/Sigs.ml", 191, 7051, 7053), ("fix/src/Sigs.ml", 191, 7051, 7061), 0), 0, 0, 0, Tag1 ("Vendored_fix__Sigs", 45)), 1, 0); (("tabulate", 608), ((Tag1 (0, (Tag1 (0, (Tag3 ((("key", 607)), 0, (0)), 100000000, 0, -146), ((("a")), 100000000, 0, -143), 0), 100000000, 0, -145), (Tag1 (0, (Tag3 ((("key", 607)), 0, (0)), 100000000, 0, -144), ((("a")), 100000000, 0, -143), 0), 100000000, 0, -142), 0), 100000000, 0, -141), 0, (("fix/src/Sigs.ml", 194, 7110, 7112), ("fix/src/Sigs.ml", 194, 7110, 7152), 0), 0, Tag1 ("Vendored_fix__Sigs", 46)), 0)])), 0, (("fix/src/Sigs.ml", 188, 6998, 6998), ("fix/src/Sigs.ml", 196, 7154, 7157), 0), Tag1 ("Vendored_fix__Sigs", 47)), 0); Tag4 (("SOLVER", 561), ((Tag1 ([Tag1 (("variable", 609), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("fix/src/Sigs.ml", 205, 7376, 7378), ("fix/src/Sigs.ml", 205, 7376, 7391), 0), 0, 0, 0, Tag1 ("Vendored_fix__Sigs", 48)), 1, 0); Tag1 (("property", 610), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("fix/src/Sigs.ml", 206, 7392, 7394), ("fix/src/Sigs.ml", 206, 7392, 7407), 0), 0, 0, 0, Tag1 ("Vendored_fix__Sigs", 49)), 1, 0); Tag1 (("valuation", 611), (0, 0, 0, 1, ((Tag1 (0, (Tag3 ((("variable", 609)), 0, (0)), 100000000, 0, -158), (Tag3 ((("property", 610)), 0, (0)), 100000000, 0, -157), 0), 100000000, 0, -156)), 0, 0, 0, 0, (("fix/src/Sigs.ml", 209, 7470, 7472), ("fix/src/Sigs.ml", 209, 7470, 7509), 0), 0, 0, 0, Tag1 ("Vendored_fix__Sigs", 50)), 1, 0); Tag1 (("rhs", 612), (0, 0, 0, 1, ((Tag1 (0, (Tag3 ((("valuation", 611)), 0, (0)), 100000000, 0, -155), (Tag3 ((("property", 610)), 0, (0)), 100000000, 0, -154), 0), 100000000, 0, -153)), 0, 0, 0, 0, (("fix/src/Sigs.ml", 215, 7737, 7739), ("fix/src/Sigs.ml", 215, 7737, 7771), 0), 0, 0, 0, Tag1 ("Vendored_fix__Sigs", 51)), 1, 0); Tag1 (("equations", 613), (0, 0, 0, 1, ((Tag1 (0, (Tag3 ((("variable", 609)), 0, (0)), 100000000, 0, -152), (Tag3 ((("rhs", 612)), 0, (0)), 100000000, 0, -151), 0), 100000000, 0, -150)), 0, 0, 0, 0, (("fix/src/Sigs.ml", 219, 7855, 7857), ("fix/src/Sigs.ml", 219, 7855, 7889), 0), 0, 0, 0, Tag1 ("Vendored_fix__Sigs", 52)), 1, 0); (("lfp", 614), ((Tag1 (0, (Tag3 ((("equations", 613)), 0, (0)), 100000000, 0, -149), (Tag3 ((("valuation", 611)), 0, (0)), 100000000, 0, -148), 0), 100000000, 0, -147), 0, (("fix/src/Sigs.ml", 234, 8631, 8633), ("fix/src/Sigs.ml", 234, 8631, 8664), 0), 0, Tag1 ("Vendored_fix__Sigs", 53)), 0)])), 0, (("fix/src/Sigs.ml", 203, 7350, 7350), ("fix/src/Sigs.ml", 236, 8666, 8669), 0), Tag1 ("Vendored_fix__Sigs", 54)), 0); Tag4 (("SOLUTION", 562), ((Tag1 ([Tag1 (("variable", 615), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("fix/src/Sigs.ml", 244, 8866, 8868), ("fix/src/Sigs.ml", 244, 8866, 8881), 0), 0, 0, 0, Tag1 ("Vendored_fix__Sigs", 55)), 1, 0); Tag1 (("property", 616), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("fix/src/Sigs.ml", 245, 8882, 8884), ("fix/src/Sigs.ml", 245, 8882, 8897), 0), 0, 0, 0, Tag1 ("Vendored_fix__Sigs", 56)), 1, 0); (("solution", 617), ((Tag1 (0, (Tag3 ((("variable", 615)), 0, (0)), 100000000, 0, -161), (Tag3 ((("property", 616)), 0, (0)), 100000000, 0, -160), 0), 100000000, 0, -159), 0, (("fix/src/Sigs.ml", 246, 8898, 8900), ("fix/src/Sigs.ml", 246, 8898, 8934), 0), 0, Tag1 ("Vendored_fix__Sigs", 57)), 0)])), 0, (("fix/src/Sigs.ml", 243, 8839, 8839), ("fix/src/Sigs.ml", 247, 8935, 8938), 0), Tag1 ("Vendored_fix__Sigs", 58)), 0); Tag4 (("GRAPH", 563), ((Tag1 ([Tag1 (("t", 618), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("fix/src/Sigs.ml", 254, 9078, 9080), ("fix/src/Sigs.ml", 254, 9078, 9086), 0), 0, 0, 0, Tag1 ("Vendored_fix__Sigs", 59)), 1, 0); (("foreach_root", 619), ((Tag1 (0, (Tag1 (0, (Tag3 ((("t", 618)), 0, (0)), 100000000, 0, -173), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -172), 0), 100000000, 0, -171), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -170), 0), 100000000, 0, -169), 0, (("fix/src/Sigs.ml", 255, 9087, 9089), ("fix/src/Sigs.ml", 255, 9087, 9126), 0), 0, Tag1 ("Vendored_fix__Sigs", 60)), 0); (("foreach_successor", 620), ((Tag1 (0, (Tag3 ((("t", 618)), 0, (0)), 100000000, 0, -168), (Tag1 (0, (Tag1 (0, (Tag3 ((("t", 618)), 0, (0)), 100000000, 0, -167), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -166), 0), 100000000, 0, -165), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -164), 0), 100000000, 0, -163), 0), 100000000, 0, -162), 0, (("fix/src/Sigs.ml", 256, 9127, 9129), ("fix/src/Sigs.ml", 256, 9127, 9176), 0), 0, Tag1 ("Vendored_fix__Sigs", 61)), 0)])), 0, (("fix/src/Sigs.ml", 253, 9054, 9054), ("fix/src/Sigs.ml", 257, 9177, 9180), 0), Tag1 ("Vendored_fix__Sigs", 62)), 0); Tag4 (("DATA_FLOW_GRAPH", 564), ((Tag1 ([Tag1 (("variable", 621), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("fix/src/Sigs.ml", 273, 9883, 9885), ("fix/src/Sigs.ml", 273, 9883, 9898), 0), 0, 0, 0, Tag1 ("Vendored_fix__Sigs", 63)), 1, 0); Tag1 (("property", 622), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("fix/src/Sigs.ml", 274, 9899, 9901), ("fix/src/Sigs.ml", 274, 9899, 9914), 0), 0, 0, 0, Tag1 ("Vendored_fix__Sigs", 64)), 1, 0); (("foreach_root", 623), ((Tag1 (0, (Tag1 (0, (Tag3 ((("variable", 621)), 0, (0)), 100000000, 0, -191), (Tag1 (0, (Tag3 ((("property", 622)), 0, (0)), 100000000, 0, -190), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -189), 0), 100000000, 0, -188), 0), 100000000, 0, -187), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -186), 0), 100000000, 0, -185), 0, (("fix/src/Sigs.ml", 275, 9915, 9917), ("fix/src/Sigs.ml", 276, 9935, 9977), 0), 0, Tag1 ("Vendored_fix__Sigs", 65)), 0); (("foreach_successor", 624), ((Tag1 (0, (Tag3 ((("variable", 621)), 0, (0)), 100000000, 0, -184), (Tag1 (0, (Tag3 ((("property", 622)), 0, (0)), 100000000, 0, -183), (Tag1 (0, (Tag1 (0, (Tag3 ((("variable", 621)), 0, (0)), 100000000, 0, -182), (Tag1 (0, (Tag3 ((("property", 622)), 0, (0)), 100000000, 0, -181), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -180), 0), 100000000, 0, -179), 0), 100000000, 0, -178), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -177), 0), 100000000, 0, -176), 0), 100000000, 0, -175), 0), 100000000, 0, -174), 0, (("fix/src/Sigs.ml", 277, 9978, 9980), ("fix/src/Sigs.ml", 279, 10031, 10073), 0), 0, Tag1 ("Vendored_fix__Sigs", 66)), 0)])), 0, (("fix/src/Sigs.ml", 272, 9849, 9849), ("fix/src/Sigs.ml", 280, 10074, 10077), 0), Tag1 ("Vendored_fix__Sigs", 67)), 0); Tag4 (("ONGOING_NUMBERING", 565), ((Tag1 ([Tag1 (("t", 625), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("fix/src/Sigs.ml", 295, 10724, 10726), ("fix/src/Sigs.ml", 295, 10724, 10732), 0), 0, 0, 0, Tag1 ("Vendored_fix__Sigs", 68)), 1, 0); (("encode", 626), ((Tag1 (0, (Tag3 ((("t", 625)), 0, (0)), 100000000, 0, -200), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -199), 0), 100000000, 0, -198), 0, (("fix/src/Sigs.ml", 296, 10733, 10735), ("fix/src/Sigs.ml", 296, 10733, 10755), 0), 0, Tag1 ("Vendored_fix__Sigs", 69)), 0); (("current", 627), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -197), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -196), 0), 100000000, 0, -195), 0, (("fix/src/Sigs.ml", 297, 10756, 10758), ("fix/src/Sigs.ml", 297, 10756, 10782), 0), 0, Tag1 ("Vendored_fix__Sigs", 70)), 0); (("has_been_encoded", 628), ((Tag1 (0, (Tag3 ((("t", 625)), 0, (0)), 100000000, 0, -194), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -193), 0), 100000000, 0, -192), 0, (("fix/src/Sigs.ml", 298, 10783, 10785), ("fix/src/Sigs.ml", 298, 10783, 10816), 0), 0, Tag1 ("Vendored_fix__Sigs", 71)), 0)])), 0, (("fix/src/Sigs.ml", 294, 10688, 10688), ("fix/src/Sigs.ml", 299, 10817, 10820), 0), Tag1 ("Vendored_fix__Sigs", 72)), 0); Tag4 (("NUMBERING", 566), ((Tag1 ([Tag1 (("t", 629), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("fix/src/Sigs.ml", 306, 11059, 11061), ("fix/src/Sigs.ml", 306, 11059, 11067), 0), 0, 0, 0, Tag1 ("Vendored_fix__Sigs", 73)), 1, 0); (("n", 630), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -207), 0, (("fix/src/Sigs.ml", 307, 11068, 11070), ("fix/src/Sigs.ml", 307, 11068, 11080), 0), 0, Tag1 ("Vendored_fix__Sigs", 74)), 0); (("encode", 631), ((Tag1 (0, (Tag3 ((("t", 629)), 0, (0)), 100000000, 0, -206), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -205), 0), 100000000, 0, -204), 0, (("fix/src/Sigs.ml", 308, 11081, 11083), ("fix/src/Sigs.ml", 308, 11081, 11103), 0), 0, Tag1 ("Vendored_fix__Sigs", 75)), 0); (("decode", 632), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -203), (Tag3 ((("t", 629)), 0, (0)), 100000000, 0, -202), 0), 100000000, 0, -201), 0, (("fix/src/Sigs.ml", 309, 11104, 11106), ("fix/src/Sigs.ml", 309, 11104, 11126), 0), 0, Tag1 ("Vendored_fix__Sigs", 76)), 0)])), 0, (("fix/src/Sigs.ml", 305, 11031, 11031), ("fix/src/Sigs.ml", 310, 11127, 11130), 0), Tag1 ("Vendored_fix__Sigs", 77)), 0); Tag4 (("TWO_PHASE_NUMBERING", 567), ((Tag1 ([Tag1 (("t", 633), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("fix/src/Sigs.ml", 295, 10724, 10726), ("fix/src/Sigs.ml", 295, 10724, 10732), 0), 0, 0, 0, Tag1 ("Vendored_fix__Sigs", 68)), 1, 0); (("encode", 634), ((Tag1 (0, (Tag3 ((("t", 633)), 0, (0)), 100000000, 0, -216), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -215), 0), 100000000, 0, -214), 0, (("fix/src/Sigs.ml", 296, 10733, 10735), ("fix/src/Sigs.ml", 296, 10733, 10755), 0), 0, Tag1 ("Vendored_fix__Sigs", 69)), 0); (("current", 635), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -213), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -212), 0), 100000000, 0, -211), 0, (("fix/src/Sigs.ml", 297, 10756, 10758), ("fix/src/Sigs.ml", 297, 10756, 10782), 0), 0, Tag1 ("Vendored_fix__Sigs", 70)), 0); (("has_been_encoded", 636), ((Tag1 (0, (Tag3 ((("t", 633)), 0, (0)), 100000000, 0, -210), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -209), 0), 100000000, 0, -208), 0, (("fix/src/Sigs.ml", 298, 10783, 10785), ("fix/src/Sigs.ml", 298, 10783, 10816), 0), 0, Tag1 ("Vendored_fix__Sigs", 71)), 0); Tag3 (("Done", 637), 0, (Tag2 (0, Tag1 ([Tag1 (("t", 638), (0, 0, 0, 1, ((Tag3 ((("t", 633)), 0, (0)), 100000000, 0, -224)), 0, 0, 0, 0, (("fix/src/Sigs.ml", 321, 11625, 11659), ("fix/src/Sigs.ml", 321, 11625, 11669), 0), 0, 0, 0, Tag1 ("Vendored_fix__Sigs", 78)), 1, 0); (("n", 639), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -223), 0, (("fix/src/Sigs.ml", 307, 11068, 11070), ("fix/src/Sigs.ml", 307, 11068, 11080), 0), 0, Tag1 ("Vendored_fix__Sigs", 74)), 0); (("encode", 640), ((Tag1 (0, (Tag3 ((("t", 638)), 0, (0)), 100000000, 0, -222), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -221), 0), 100000000, 0, -220), 0, (("fix/src/Sigs.ml", 308, 11081, 11083), ("fix/src/Sigs.ml", 308, 11081, 11103), 0), 0, Tag1 ("Vendored_fix__Sigs", 75)), 0); (("decode", 641), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -219), (Tag3 ((("t", 638)), 0, (0)), 100000000, 0, -218), 0), 100000000, 0, -217), 0, (("fix/src/Sigs.ml", 309, 11104, 11106), ("fix/src/Sigs.ml", 309, 11104, 11126), 0), 0, Tag1 ("Vendored_fix__Sigs", 76)), 0)])), 0, (("fix/src/Sigs.ml", 321, 11625, 11627), ("fix/src/Sigs.ml", 321, 11625, 11669), 0), Tag1 ("Vendored_fix__Sigs", 79)), 0, 0)])), 0, (("fix/src/Sigs.ml", 319, 11559, 11559), ("fix/src/Sigs.ml", 322, 11670, 11673), 0), Tag1 ("Vendored_fix__Sigs", 80)), 0); Tag4 (("INJECTION", 568), ((Tag1 ([Tag1 (("t", 642), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("fix/src/Sigs.ml", 333, 11984, 11986), ("fix/src/Sigs.ml", 333, 11984, 11992), 0), 0, 0, 0, Tag1 ("Vendored_fix__Sigs", 81)), 1, 0); Tag1 (("u", 643), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("fix/src/Sigs.ml", 334, 11993, 11995), ("fix/src/Sigs.ml", 334, 11993, 12001), 0), 0, 0, 0, Tag1 ("Vendored_fix__Sigs", 82)), 1, 0); (("encode", 644), ((Tag1 (0, (Tag3 ((("t", 642)), 0, (0)), 100000000, 0, -227), (Tag3 ((("u", 643)), 0, (0)), 100000000, 0, -226), 0), 100000000, 0, -225), 0, (("fix/src/Sigs.ml", 335, 12002, 12004), ("fix/src/Sigs.ml", 335, 12002, 12022), 0), 0, Tag1 ("Vendored_fix__Sigs", 83)), 0)])), 0, (("fix/src/Sigs.ml", 332, 11956, 11956), ("fix/src/Sigs.ml", 336, 12023, 12026), 0), Tag1 ("Vendored_fix__Sigs", 84)), 0)], "Vendored_fix__Sigs", [("Vendored_fix__Sigs", ("a{\193\210\184\138\163\252\132\135.\2156meu")); ("Vendored_fix__", ("\r\196g\002\180\221\139\252\200\240t\184\171.K\020")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

module type INJECTION = sig type t type u val encode : t -> u end

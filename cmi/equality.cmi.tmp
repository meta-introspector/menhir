type dep_proof_flag = bool
type freeze_evars_flag = bool
type orientation = bool
type conditions = Naive | FirstSolved | AllMatches
val eq_elimination_ref :
  orientation -> Sorts.family -> Names.GlobRef.t option
val rewriteLR : EConstr.constr -> unit Proofview.tactic
val rewriteRL : EConstr.constr -> unit Proofview.tactic
val general_setoid_rewrite_clause :
  (Names.Id.t option ->
   orientation ->
   Locus.occurrences ->
   EConstr.constr Tactypes.with_bindings ->
   new_goals:EConstr.constr list -> unit Proofview.tactic)
  Hook.t
val general_rewrite :
  where:Names.Id.t option ->
  l2r:orientation ->
  Locus.occurrences ->
  freeze:freeze_evars_flag ->
  dep:dep_proof_flag ->
  with_evars:Tactics.evars_flag ->
  ?tac:unit Proofview.tactic * conditions ->
  EConstr.constr Tactypes.with_bindings -> unit Proofview.tactic
type multi = Precisely of int | UpTo of int | RepeatStar | RepeatPlus
val general_multi_rewrite :
  Tactics.evars_flag ->
  (bool * multi * Tactics.clear_flag *
   Tactypes.delayed_open_constr_with_bindings)
  list ->
  Locus.clause ->
  (unit Proofview.tactic * conditions) option -> unit Proofview.tactic
val replace_in_clause_maybe_by :
  EConstr.constr ->
  EConstr.constr ->
  Locus.clause -> unit Proofview.tactic option -> unit Proofview.tactic
val replace : EConstr.constr -> EConstr.constr -> unit Proofview.tactic
val replace_by :
  EConstr.constr ->
  EConstr.constr -> unit Proofview.tactic -> unit Proofview.tactic
type inj_flags = {
  keep_proof_equalities : bool;
  injection_pattern_l2r_order : bool;
}
val discr :
  Tactics.evars_flag ->
  EConstr.constr Tactypes.with_bindings -> unit Proofview.tactic
val discrConcl : unit Proofview.tactic
val discrHyp : Names.Id.t -> unit Proofview.tactic
val discrEverywhere : Tactics.evars_flag -> unit Proofview.tactic
val discr_tac :
  Tactics.evars_flag ->
  EConstr.constr Tactypes.with_bindings Tactics.destruction_arg option ->
  unit Proofview.tactic
exception NothingToInject
val inj :
  inj_flags option ->
  ?injection_in_context:bool ->
  Tactypes.intro_patterns option ->
  Tactics.evars_flag ->
  Tactics.clear_flag ->
  EConstr.constr Tactypes.with_bindings -> unit Proofview.tactic
val injClause :
  inj_flags option ->
  ?injection_in_context:bool ->
  Tactypes.intro_patterns option ->
  Tactics.evars_flag ->
  EConstr.constr Tactypes.with_bindings Tactics.destruction_arg option ->
  unit Proofview.tactic
val injHyp :
  inj_flags option ->
  ?injection_in_context:bool ->
  Tactics.clear_flag -> Names.Id.t -> unit Proofview.tactic
val injConcl :
  inj_flags option ->
  ?injection_in_context:bool -> unit -> unit Proofview.tactic
val simpleInjClause :
  inj_flags option ->
  Tactics.evars_flag ->
  EConstr.constr Tactypes.with_bindings Tactics.destruction_arg option ->
  unit Proofview.tactic
val dEq :
  keep_proofs:bool option ->
  Tactics.evars_flag ->
  EConstr.constr Tactypes.with_bindings Tactics.destruction_arg option ->
  unit Proofview.tactic
val dEqThen :
  keep_proofs:bool option ->
  Tactics.evars_flag ->
  (int -> unit Proofview.tactic) ->
  EConstr.constr Tactypes.with_bindings Tactics.destruction_arg option ->
  unit Proofview.tactic
val make_iterated_tuple :
  Environ.env ->
  Evd.evar_map ->
  EConstr.constr ->
  EConstr.constr * EConstr.types ->
  Evd.evar_map * (EConstr.constr * EConstr.constr * EConstr.constr)
val cutRewriteInHyp :
  bool -> EConstr.types -> Names.Id.t -> unit Proofview.tactic
val cutRewriteInConcl : bool -> EConstr.constr -> unit Proofview.tactic
val rewriteInHyp :
  bool -> EConstr.constr -> Names.Id.t -> unit Proofview.tactic
val rewriteInConcl : bool -> EConstr.constr -> unit Proofview.tactic
val set_keep_equality : Names.inductive -> bool -> unit
type subst_tactic_flags = {
  only_leibniz : bool;
  rewrite_dependent_proof : bool;
}
val subst_gen : bool -> Names.Id.t list -> unit Proofview.tactic
val subst : Names.Id.t list -> unit Proofview.tactic
val subst_all : ?flags:subst_tactic_flags -> unit -> unit Proofview.tactic
val replace_term :
  bool option -> EConstr.constr -> Locus.clause -> unit Proofview.tactic
val set_eq_dec_scheme_kind : Ind_tables.mutual Ind_tables.scheme_kind -> unit
val build_selector :
  Environ.env ->
  Evd.evar_map ->
  int ->
  EConstr.constr ->
  ("DEBUG:rule", [Tag1 (("dep_proof_flag", 1318), (0, 0, 0, 1, ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -331)), 0, 0, 0, 0, (("tactics/equality.mli", 22, 789, 789), ("tactics/equality.mli", 22, 789, 815), 0), 0, 1, 0, Tag1 ("Equality", 0)), 1, 0); Tag1 (("freeze_evars_flag", 1319), (0, 0, 0, 1, ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -330)), 0, 0, 0, 0, (("tactics/equality.mli", 23, 864, 864), ("tactics/equality.mli", 23, 864, 893), 0), 0, 1, 0, Tag1 ("Equality", 1)), 1, 0); Tag1 (("orientation", 1320), (0, 0, 0, 1, ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -329)), 0, 0, 0, 0, (("tactics/equality.mli", 25, 941, 941), ("tactics/equality.mli", 25, 941, 964), 0), 0, 1, 0, Tag1 ("Equality", 2)), 1, 0); Tag1 (("conditions", 1321), (0, 0, Tag1 ([(("Naive", 1127), (0), 0, (("tactics/equality.mli", 28, 984, 986), ("tactics/equality.mli", 28, 984, 993), 0), 0, Tag1 ("Equality", 4)); (("FirstSolved", 1128), (0), 0, (("tactics/equality.mli", 29, 1053, 1055), ("tactics/equality.mli", 29, 1053, 1068), 0), 0, Tag1 ("Equality", 5)); (("AllMatches", 1129), (0), 0, (("tactics/equality.mli", 30, 1128, 1130), ("tactics/equality.mli", 30, 1128, 1142), 0), 0, Tag1 ("Equality", 6))], 0), 1, 0, 0, 0, 0, 0, (("tactics/equality.mli", 27, 966, 966), ("tactics/equality.mli", 30, 1128, 1142), 0), 0, 1, 0, Tag1 ("Equality", 3)), 1, 0); (("eq_elimination_ref", 1322), ((Tag1 (0, (Tag3 ((("orientation", 1320)), 0, (0)), 100000000, 0, -328), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Sorts")), "family"), 0, (0)), 100000000, 0, -327), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -326)], (0)), 100000000, 0, -325), 0), 100000000, 0, -324), 0), 100000000, 0, -323), 0, (("tactics/equality.mli", 32, 1203, 1203), ("tactics/equality.mli", 32, 1203, 1275), 0), 0, Tag1 ("Equality", 7)), 0); (("rewriteLR", 1323), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -322), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -321)], (0)), 100000000, 0, -320), 0), 100000000, 0, -319), 0, (("tactics/equality.mli", 35, 1319, 1319), ("tactics/equality.mli", 35, 1319, 1366), 0), 0, Tag1 ("Equality", 8)), 0); (("rewriteRL", 1324), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -318), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -317)], (0)), 100000000, 0, -316), 0), 100000000, 0, -315), 0, (("tactics/equality.mli", 36, 1367, 1367), ("tactics/equality.mli", 36, 1367, 1415), 0), 0, Tag1 ("Equality", 9)), 0); (("general_setoid_rewrite_clause", 1325), ((Tag3 (Tag1 ((Tag2 ("Hook")), "t"), [(Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -314)], (0)), 100000000, 0, -313), (Tag1 (0, (Tag3 ((("orientation", 1320)), 0, (0)), 100000000, 0, -312), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Locus")), "occurrences"), 0, (0)), 100000000, 0, -311), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Tactypes")), "with_bindings"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -310)], (0)), 100000000, 0, -309), (Tag1 (("new_goals"), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -308)], (0)), 100000000, 0, -307), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -306)], (0)), 100000000, 0, -305), 0), 100000000, 0, -304), 0), 100000000, 0, -303), 0), 100000000, 0, -302), 0), 100000000, 0, -301), 0), 100000000, 0, -300)], (0)), 100000000, 0, -299), 0, (("tactics/equality.mli", 40, 1495, 1495), ("tactics/equality.mli", 42, 1603, 1660), 0), 0, Tag1 ("Equality", 10)), 0); (("general_rewrite", 1326), ((Tag1 (("where"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -298)], (0)), 100000000, 0, -297), (Tag1 (("l2r"), (Tag3 ((("orientation", 1320)), 0, (0)), 100000000, 0, -296), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Locus")), "occurrences"), 0, (0)), 100000000, 0, -295), (Tag1 (("freeze"), (Tag3 ((("freeze_evars_flag", 1319)), 0, (0)), 100000000, 0, -294), (Tag1 (("dep"), (Tag3 ((("dep_proof_flag", 1318)), 0, (0)), 100000000, 0, -293), (Tag1 (("with_evars"), (Tag3 (Tag1 ((Tag2 ("Tactics")), "evars_flag"), 0, (0)), 100000000, 0, -292), (Tag1 (Tag1 ("tac"), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -290)], (0)), 100000000, 0, -289); (Tag3 ((("conditions", 1321)), 0, (0)), 100000000, 0, -291)]), 100000000, 0, -288)], (0)), 100000000, 0, -287), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Tactypes")), "with_bindings"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -286)], (0)), 100000000, 0, -285), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -284)], (0)), 100000000, 0, -283), 0), 100000000, 0, -282), 0), 100000000, 0, -281), 0), 100000000, 0, -280), 0), 100000000, 0, -279), 0), 100000000, 0, -278), 0), 100000000, 0, -277), 0), 100000000, 0, -276), 0), 100000000, 0, -275), 0, (("tactics/equality.mli", 44, 1662, 1662), ("tactics/equality.mli", 46, 1816, 1908), 0), 0, Tag1 ("Equality", 11)), 0); Tag1 (("multi", 1327), (0, 0, Tag1 ([(("Precisely", 1279), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -273)]), 0, (("tactics/equality.mli", 49, 1923, 1925), ("tactics/equality.mli", 49, 1923, 1943), 0), 0, Tag1 ("Equality", 13)); (("UpTo", 1280), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -274)]), 0, (("tactics/equality.mli", 50, 1944, 1946), ("tactics/equality.mli", 50, 1944, 1959), 0), 0, Tag1 ("Equality", 14)); (("RepeatStar", 1281), (0), 0, (("tactics/equality.mli", 51, 1960, 1962), ("tactics/equality.mli", 51, 1960, 1974), 0), 0, Tag1 ("Equality", 15)); (("RepeatPlus", 1282), (0), 0, (("tactics/equality.mli", 52, 1975, 1977), ("tactics/equality.mli", 52, 1975, 1989), 0), 0, Tag1 ("Equality", 16))], 0), 1, 0, 0, 0, 0, 0, (("tactics/equality.mli", 48, 1910, 1910), ("tactics/equality.mli", 52, 1975, 1989), 0), 0, 0, 0, Tag1 ("Equality", 12)), 1, 0); (("general_multi_rewrite", 1328), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Tactics")), "evars_flag"), 0, (0)), 100000000, 0, -272), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -268); (Tag3 ((("multi", 1327)), 0, (0)), 100000000, 0, -269); (Tag3 (Tag1 ((Tag2 ("Tactics")), "clear_flag"), 0, (0)), 100000000, 0, -270); (Tag3 (Tag1 ((Tag2 ("Tactypes")), "delayed_open_constr_with_bindings"), 0, (0)), 100000000, 0, -271)]), 100000000, 0, -267)], (0)), 100000000, 0, -266), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Locus")), "clause"), 0, (0)), 100000000, 0, -265), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -263)], (0)), 100000000, 0, -262); (Tag3 ((("conditions", 1321)), 0, (0)), 100000000, 0, -264)]), 100000000, 0, -261)], (0)), 100000000, 0, -260), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -259)], (0)), 100000000, 0, -258), 0), 100000000, 0, -257), 0), 100000000, 0, -256), 0), 100000000, 0, -255), 0), 100000000, 0, -254), 0, (("tactics/equality.mli", 54, 1991, 1991), ("tactics/equality.mli", 56, 2107, 2189), 0), 0, Tag1 ("Equality", 17)), 0); (("replace_in_clause_maybe_by", 1329), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -253), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -252), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Locus")), "clause"), 0, (0)), 100000000, 0, -251), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -250)], (0)), 100000000, 0, -249)], (0)), 100000000, 0, -248), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -247)], (0)), 100000000, 0, -246), 0), 100000000, 0, -245), 0), 100000000, 0, -244), 0), 100000000, 0, -243), 0), 100000000, 0, -242), 0, (("tactics/equality.mli", 58, 2191, 2191), ("tactics/equality.mli", 58, 2191, 2307), 0), 0, Tag1 ("Equality", 18)), 0); (("replace", 1330), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -241), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -240), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -239)], (0)), 100000000, 0, -238), 0), 100000000, 0, -237), 0), 100000000, 0, -236), 0, (("tactics/equality.mli", 59, 2308, 2308), ("tactics/equality.mli", 59, 2308, 2366), 0), 0, Tag1 ("Equality", 19)), 0); (("replace_by", 1331), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -235), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -234), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -233)], (0)), 100000000, 0, -232), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -231)], (0)), 100000000, 0, -230), 0), 100000000, 0, -229), 0), 100000000, 0, -228), 0), 100000000, 0, -227), 0, (("tactics/equality.mli", 60, 2367, 2367), ("tactics/equality.mli", 60, 2367, 2450), 0), 0, Tag1 ("Equality", 20)), 0); Tag1 (("inj_flags", 1332), (0, 0, [[(("keep_proof_equalities", 1288), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -225), (("tactics/equality.mli", 63, 2471, 2475), ("tactics/equality.mli", 63, 2471, 2504), 0), 0, Tag1 ("Equality", 22)); (("injection_pattern_l2r_order", 1289), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -226), (("tactics/equality.mli", 64, 2534, 2538), ("tactics/equality.mli", 64, 2534, 2573), 0), 0, Tag1 ("Equality", 23))]], 1, 0, 0, 0, 0, 0, (("tactics/equality.mli", 62, 2452, 2452), ("tactics/equality.mli", 65, 2627, 2630), 0), 0, 0, 0, Tag1 ("Equality", 21)), 1, 0); (("discr", 1333), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Tactics")), "evars_flag"), 0, (0)), 100000000, 0, -224), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Tactypes")), "with_bindings"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -223)], (0)), 100000000, 0, -222), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -221)], (0)), 100000000, 0, -220), 0), 100000000, 0, -219), 0), 100000000, 0, -218), 0, (("tactics/equality.mli", 67, 2632, 2632), ("tactics/equality.mli", 67, 2632, 2710), 0), 0, Tag1 ("Equality", 24)), 0); (("discrConcl", 1334), ((Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -217)], (0)), 100000000, 0, -216), 0, (("tactics/equality.mli", 68, 2711, 2711), ("tactics/equality.mli", 68, 2711, 2751), 0), 0, Tag1 ("Equality", 25)), 0); (("discrHyp", 1335), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -215), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -214)], (0)), 100000000, 0, -213), 0), 100000000, 0, -212), 0, (("tactics/equality.mli", 69, 2752, 2752), ("tactics/equality.mli", 69, 2752, 2800), 0), 0, Tag1 ("Equality", 26)), 0); (("discrEverywhere", 1336), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Tactics")), "evars_flag"), 0, (0)), 100000000, 0, -211), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -210)], (0)), 100000000, 0, -209), 0), 100000000, 0, -208), 0, (("tactics/equality.mli", 70, 2801, 2801), ("tactics/equality.mli", 70, 2801, 2858), 0), 0, Tag1 ("Equality", 27)), 0); (("discr_tac", 1337), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Tactics")), "evars_flag"), 0, (0)), 100000000, 0, -207), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Tactics")), "destruction_arg"), [(Tag3 (Tag1 ((Tag2 ("Tactypes")), "with_bindings"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -206)], (0)), 100000000, 0, -205)], (0)), 100000000, 0, -204)], (0)), 100000000, 0, -203), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -202)], (0)), 100000000, 0, -201), 0), 100000000, 0, -200), 0), 100000000, 0, -199), 0, (("tactics/equality.mli", 71, 2859, 2859), ("tactics/equality.mli", 72, 2892, 2970), 0), 0, Tag1 ("Equality", 28)), 0); Tag2 (("NothingToInject", 1338), ((Tag3 ("exn", 7)), 0, (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Equality", 29)), 2, 0); (("inj", 1339), ((Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("inj_flags", 1332)), 0, (0)), 100000000, 0, -198)], (0)), 100000000, 0, -197), (Tag1 (Tag1 ("injection_in_context"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -196)], (0)), 100000000, 0, -195), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Tactypes")), "intro_patterns"), 0, (0)), 100000000, 0, -194)], (0)), 100000000, 0, -193), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Tactics")), "evars_flag"), 0, (0)), 100000000, 0, -192), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Tactics")), "clear_flag"), 0, (0)), 100000000, 0, -191), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Tactypes")), "with_bindings"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -190)], (0)), 100000000, 0, -189), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -188)], (0)), 100000000, 0, -187), 0), 100000000, 0, -186), 0), 100000000, 0, -185), 0), 100000000, 0, -184), 0), 100000000, 0, -183), 0), 100000000, 0, -182), 0), 100000000, 0, -181), 0, (("tactics/equality.mli", 76, 3086, 3086), ("tactics/equality.mli", 77, 3194, 3255), 0), 0, Tag1 ("Equality", 30)), 0); (("injClause", 1340), ((Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("inj_flags", 1332)), 0, (0)), 100000000, 0, -180)], (0)), 100000000, 0, -179), (Tag1 (Tag1 ("injection_in_context"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -178)], (0)), 100000000, 0, -177), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Tactypes")), "intro_patterns"), 0, (0)), 100000000, 0, -176)], (0)), 100000000, 0, -175), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Tactics")), "evars_flag"), 0, (0)), 100000000, 0, -174), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Tactics")), "destruction_arg"), [(Tag3 (Tag1 ((Tag2 ("Tactypes")), "with_bindings"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -173)], (0)), 100000000, 0, -172)], (0)), 100000000, 0, -171)], (0)), 100000000, 0, -170), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -169)], (0)), 100000000, 0, -168), 0), 100000000, 0, -167), 0), 100000000, 0, -166), 0), 100000000, 0, -165), 0), 100000000, 0, -164), 0), 100000000, 0, -163), 0, (("tactics/equality.mli", 78, 3256, 3256), ("tactics/equality.mli", 79, 3364, 3442), 0), 0, Tag1 ("Equality", 31)), 0); (("injHyp", 1341), ((Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("inj_flags", 1332)), 0, (0)), 100000000, 0, -162)], (0)), 100000000, 0, -161), (Tag1 (Tag1 ("injection_in_context"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -160)], (0)), 100000000, 0, -159), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Tactics")), "clear_flag"), 0, (0)), 100000000, 0, -158), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -157), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -156)], (0)), 100000000, 0, -155), 0), 100000000, 0, -154), 0), 100000000, 0, -153), 0), 100000000, 0, -152), 0), 100000000, 0, -151), 0, (("tactics/equality.mli", 80, 3443, 3443), ("tactics/equality.mli", 80, 3443, 3555), 0), 0, Tag1 ("Equality", 32)), 0); (("injConcl", 1342), ((Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("inj_flags", 1332)), 0, (0)), 100000000, 0, -150)], (0)), 100000000, 0, -149), (Tag1 (Tag1 ("injection_in_context"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -148)], (0)), 100000000, 0, -147), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -146), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -145)], (0)), 100000000, 0, -144), 0), 100000000, 0, -143), 0), 100000000, 0, -142), 0), 100000000, 0, -141), 0, (("tactics/equality.mli", 81, 3556, 3556), ("tactics/equality.mli", 81, 3556, 3654), 0), 0, Tag1 ("Equality", 33)), 0); (("simpleInjClause", 1343), ((Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("inj_flags", 1332)), 0, (0)), 100000000, 0, -140)], (0)), 100000000, 0, -139), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Tactics")), "evars_flag"), 0, (0)), 100000000, 0, -138), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Tactics")), "destruction_arg"), [(Tag3 (Tag1 ((Tag2 ("Tactypes")), "with_bindings"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -137)], (0)), 100000000, 0, -136)], (0)), 100000000, 0, -135)], (0)), 100000000, 0, -134), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -133)], (0)), 100000000, 0, -132), 0), 100000000, 0, -131), 0), 100000000, 0, -130), 0), 100000000, 0, -129), 0, (("tactics/equality.mli", 82, 3655, 3655), ("tactics/equality.mli", 83, 3711, 3789), 0), 0, Tag1 ("Equality", 34)), 0); (("dEq", 1344), ((Tag1 (("keep_proofs"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -128)], (0)), 100000000, 0, -127), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Tactics")), "evars_flag"), 0, (0)), 100000000, 0, -126), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Tactics")), "destruction_arg"), [(Tag3 (Tag1 ((Tag2 ("Tactypes")), "with_bindings"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -125)], (0)), 100000000, 0, -124)], (0)), 100000000, 0, -123)], (0)), 100000000, 0, -122), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -121)], (0)), 100000000, 0, -120), 0), 100000000, 0, -119), 0), 100000000, 0, -118), 0), 100000000, 0, -117), 0, (("tactics/equality.mli", 85, 3791, 3791), ("tactics/equality.mli", 85, 3791, 3920), 0), 0, Tag1 ("Equality", 35)), 0); (("dEqThen", 1345), ((Tag1 (("keep_proofs"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -116)], (0)), 100000000, 0, -115), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Tactics")), "evars_flag"), 0, (0)), 100000000, 0, -114), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -113), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -112)], (0)), 100000000, 0, -111), 0), 100000000, 0, -110), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Tactics")), "destruction_arg"), [(Tag3 (Tag1 ((Tag2 ("Tactypes")), "with_bindings"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -109)], (0)), 100000000, 0, -108)], (0)), 100000000, 0, -107)], (0)), 100000000, 0, -106), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -105)], (0)), 100000000, 0, -104), 0), 100000000, 0, -103), 0), 100000000, 0, -102), 0), 100000000, 0, -101), 0), 100000000, 0, -100), 0, (("tactics/equality.mli", 86, 3921, 3921), ("tactics/equality.mli", 86, 3921, 4088), 0), 0, Tag1 ("Equality", 36)), 0); (("make_iterated_tuple", 1346), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -99), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -98), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -97), (Tag1 (0, (Tag2 ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -95); (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -96)]), 100000000, 0, -94), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -89); (Tag2 ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -91); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -92); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -93)]), 100000000, 0, -90)]), 100000000, 0, -88), 0), 100000000, 0, -87), 0), 100000000, 0, -86), 0), 100000000, 0, -85), 0), 100000000, 0, -84), 0, (("tactics/equality.mli", 88, 4090, 4090), ("tactics/equality.mli", 89, 4116, 4204), 0), 0, Tag1 ("Equality", 37)), 0); (("cutRewriteInHyp", 1347), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -83), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -82), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -81), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -80)], (0)), 100000000, 0, -79), 0), 100000000, 0, -78), 0), 100000000, 0, -77), 0), 100000000, 0, -76), 0, (("tactics/equality.mli", 92, 4265, 4265), ("tactics/equality.mli", 92, 4265, 4333), 0), 0, Tag1 ("Equality", 38)), 0); (("cutRewriteInConcl", 1348), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -75), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -74), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -73)], (0)), 100000000, 0, -72), 0), 100000000, 0, -71), 0), 100000000, 0, -70), 0, (("tactics/equality.mli", 93, 4334, 4334), ("tactics/equality.mli", 93, 4334, 4397), 0), 0, Tag1 ("Equality", 39)), 0); (("rewriteInHyp", 1349), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -69), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -68), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -67), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -66)], (0)), 100000000, 0, -65), 0), 100000000, 0, -64), 0), 100000000, 0, -63), 0), 100000000, 0, -62), 0, (("tactics/equality.mli", 96, 4458, 4458), ("tactics/equality.mli", 96, 4458, 4524), 0), 0, Tag1 ("Equality", 40)), 0); (("rewriteInConcl", 1350), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -61), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -60), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -59)], (0)), 100000000, 0, -58), 0), 100000000, 0, -57), 0), 100000000, 0, -56), 0, (("tactics/equality.mli", 97, 4525, 4525), ("tactics/equality.mli", 97, 4525, 4585), 0), 0, Tag1 ("Equality", 41)), 0); (("set_keep_equality", 1351), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -55), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -54), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -53), 0), 100000000, 0, -52), 0), 100000000, 0, -51), 0, (("tactics/equality.mli", 99, 4587, 4587), ("tactics/equality.mli", 99, 4587, 4636), 0), 0, Tag1 ("Equality", 42)), 0); Tag1 (("subst_tactic_flags", 1352), (0, 0, [[(("only_leibniz", 1310), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -49), (("tactics/equality.mli", 106, 4719, 4721), ("tactics/equality.mli", 106, 4719, 4741), 0), 0, Tag1 ("Equality", 44)); (("rewrite_dependent_proof", 1311), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -50), (("tactics/equality.mli", 107, 4742, 4744), ("tactics/equality.mli", 107, 4742, 4774), 0), 0, Tag1 ("Equality", 45))]], 1, 0, 0, 0, 0, 0, (("tactics/equality.mli", 105, 4691, 4691), ("tactics/equality.mli", 108, 4775, 4776), 0), 0, 0, 0, Tag1 ("Equality", 43)), 1, 0); (("subst_gen", 1353), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -48), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -47)], (0)), 100000000, 0, -46), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -45)], (0)), 100000000, 0, -44), 0), 100000000, 0, -43), 0), 100000000, 0, -42), 0, (("tactics/equality.mli", 109, 4777, 4777), ("tactics/equality.mli", 109, 4777, 4835), 0), 0, Tag1 ("Equality", 46)), 0); (("subst", 1354), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -41)], (0)), 100000000, 0, -40), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -39)], (0)), 100000000, 0, -38), 0), 100000000, 0, -37), 0, (("tactics/equality.mli", 110, 4836, 4836), ("tactics/equality.mli", 110, 4836, 4882), 0), 0, Tag1 ("Equality", 47)), 0); (("subst_all", 1355), ((Tag1 (Tag1 ("flags"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("subst_tactic_flags", 1352)), 0, (0)), 100000000, 0, -36)], (0)), 100000000, 0, -35), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -34), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -33)], (0)), 100000000, 0, -32), 0), 100000000, 0, -31), 0), 100000000, 0, -30), 0, (("tactics/equality.mli", 111, 4883, 4883), ("tactics/equality.mli", 111, 4883, 4957), 0), 0, Tag1 ("Equality", 48)), 0); (("replace_term", 1356), ((Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -29)], (0)), 100000000, 0, -28), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -27), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Locus")), "clause"), 0, (0)), 100000000, 0, -26), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -25)], (0)), 100000000, 0, -24), 0), 100000000, 0, -23), 0), 100000000, 0, -22), 0), 100000000, 0, -21), 0, (("tactics/equality.mli", 118, 5161, 5161), ("tactics/equality.mli", 118, 5161, 5236), 0), 0, Tag1 ("Equality", 49)), 0); (("set_eq_dec_scheme_kind", 1357), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ind_tables")), "scheme_kind"), [(Tag3 (Tag1 ((Tag2 ("Ind_tables")), "mutual"), 0, (0)), 100000000, 0, -20)], (0)), 100000000, 0, -19), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("tactics/equality.mli", 120, 5238, 5238), ("tactics/equality.mli", 120, 5238, 5293), 0), 0, Tag1 ("Equality", 50)), 0); (("build_selector", 1358), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -16), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -15), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -14), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -13), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -12), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -11), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -10), (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("tactics/equality.mli", 124, 5424, 5424), ("tactics/equality.mli", 125, 5490, 5518), 0), 0, Tag1 ("Equality", 51)), 0)], "Equality", [("Equality", ("M\157\199R]=\020;\029s@\210\1789y\163")); ("Z", ("\253\196\2168\027\199O\134\220\218\031'\1484\233o")); ("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Vmemitcodes", ("wCd\138\165\158DD\241gH\236.\210\197\247")); ("Vmbytecodes", ("\025\021\151\137Dx\149W\236+[\143f\208\160\016")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Unix", (":B72R\011\005Sj\189)\011\239PH\254")); ("UnivSubst", ("\190qu\031mc\130\181\003G]\132\"\219m)")); ("UnivProblem", ("6'\161\018\181\001.\253\000\141a6\171\1727\155")); ("UnivNames", ("%\151_\209%+JM$n\001\232\194n\178N")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Unification", ("\017\027\157=\255\1914L\020\213h\154.\219\005\170")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UState", ("SD\203\215|\136\n\251\239\208\148\215C\n\167\005")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("Type_errors", ("7\157\162-\214M\206\196\228\191\005v\134\177\144\134")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Tactypes", ("\143E\135*\195\151\144H\151M\011($\017\159\203")); ("Tactics", ("7\154?u\169\241\190R\245\187\153\020GE\029\215")); ("Tacred", ("\133d\143\1310z\030\237\232\002\001\025\147\140\215:")); ("Summary", ("\148G\135\226\024L3\246\021\028U\146\164`\253\250")); ("Store", ("/dT\252\145\179pq\216{\181\206\190K+U")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Random", ("\020\005Xq\171\026\218\152X\135\254\023\133zK\200")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("Section", ("\245\207\b\021\142v=\155#w\246}\"4b\006")); ("Safe_typing", (")\250?\164\145\132\241\127\186\152h+\145\"\237l")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("Reductionops", ("\179\023P\218\146Uh\014IS\196C\031q~#")); ("Redexpr", ("\181\250o\134\007\001\242+$\149)\204\226\"\0240")); ("Range", ("\218\130\001r\237\r\144\171\164\021l\155\196\143sg")); ("Proofview_monad", ("\218\196\189S\147\216\129\221\231\224v\228O\024*\239")); ("Proofview", ("\245\140U\027\236\199\199&\242\156\199YG\250tA")); ("Primred", ("\158G\192\182\224\196\144*\174y_E\165\012\137C")); ("Pretyping", ("\151\160\191\149\149Ff\195\171g\189\156\r\166n\189")); ("Pretype_errors", ("\155\229\201\176\163\234\203C\127\227\141\174j\199\200H")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Pattern", ("\195C\140Wb=\022\222\208\227^K\003\020\215X")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("NumTok", ("vd\023^\251\244B\166\145'\156\196-0\027\169")); ("Notation_term", ("5\002\017\217b\193nc>\239\239\237\244\031\173?")); ("Nativevalues", ("8:\007\025e\226c,\001\171\146#l\210\171\152")); ("Nativelib", ("V\239\205Y1\147E:,\176\196Hy\1483|")); ("Nativecode", ("\190\185\255\006m\012\210\163\138Rz\247\15283\183")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Namegen", ("\187\222\224T\255\020\1808-\212*\164\131\177\157x")); ("Monad", ("\244\171T\157\194p\187\160\149\195{\132\222\020\253\148")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Ltac_pretype", ("\224\"\167\018i:U\172>\188\128$\r\252\020T")); ("Logic_monad", ("\130\157\160Q\163vQ\137\184\2242\209\128\024\220i")); ("Logic", ("\214\234\234\223\014\197\147\165\158f.$\163\164\245Z")); ("Locus", ("_\002\003W\246\181\225\242Uf\139\226\176\174\192I")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Libnames", ("fp\0255\167\162\209\153\137\161\169#\246\193\003\198")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Ind_tables", ("\1586xu\131C\135\176\222\242\178r\031D,\196")); ("Hook", ("\183\194\223\003\155\169',\187\240a;E\b\1396")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Gramlib__Stream", ("\248\\H\205_76\253\136\146\200\031\165\021=t")); ("Gramlib", ("\154\143\210e\021i\246\176\224\194\220\217\007\145\139A")); ("Glob_term", ("\165=a\227\160\153.\021_$\232\209T\236\153O")); ("GlobEnv", ("(\152\019ok\006R\183\193\145\137\133<\171\005\231")); ("Genredexpr", ("rz\204\143\007`VgI\195P\168sO\198\012")); ("Genlambda", ("\170}\024\241\141\222\136S\169\219\2212i\134KI")); ("Geninterp", ("2S\151\191\189\159\004\188;\224d\199|U\004\028")); ("Genintern", ("\152Ac\019=n\235\197\141\224T\162\192\148eg")); ("Genarg", ("\1434\015\001\152\196\005s\156\136\195\185\247\b3\t")); ("Ftactic", ("K\172\205\128\241\162\160\201\202\1561o\180L\206:")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evd", ("\211\205p\193\216\129r\006\239oN\142ar\196\175")); ("Evarutil", ("\005\175\132e\164O\223svi \252\232\138\022\137")); ("Evarsolve", ("\000&\228\016}j\199\t\229\173\127\024\219\199\184\178")); ("Evardefine", ("\178\167R\199\158\242\001Y\215<\151\020\206\153\227\019")); ("Evar_kinds", ("\023L\186\132\218}\254\221\185\198\220\200h\003{\021")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Environ", ("\171b\1579\229<\003Z\147IL\225X\254\182\204")); ("Entries", ("\172\201\198\221Ap\027_{\174\141C\021\";p")); ("EConstr", ("\201aW\156\157;N\004\201V\208\006L\166\211)")); ("Dyn", ("\131z`\205v\2306\007x\027&K.?;\169")); ("Declarations", ("\239\137n\019\030w$\182\166z^{\b\206\163\175")); ("DAst", ("\224/\200)\007\184ni\134\b\139\204\241\005w\212")); ("Coqlib", ("'\226\164\143\129\221\158\224\247\247\160\190~\171\191\198")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Conversion", ("\158\150&\195M\tv\127|\029\158RRK\211A")); ("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constrexpr", ("p'r\245\184chL\183\249\"\213]\1741\237")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CUnix", ("\140Zl\153\167\011J\015\005|th\247OTu")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CEphemeron", ("\204I\179-\206(x4\173\229\250\001PkH\151")); ("CDebug", ("^4\210p7\239!3\138\138\213?\239`\250\157")); ("CClosure", ("\167\b\022\241V-\r\253\b\002\000j]\223%\142")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])
EConstr.types -> EConstr.constr -> EConstr.constr -> EConstr.constr

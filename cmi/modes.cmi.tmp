type filter = Inner | Extern | Lib | Dep
type variant = Standard | Nl
type t =
    Dot
  | Export of Name.t
  | Modules of variant * filter
  | Info
  | Deps of Schematic.format option
  | Signature
  | Sort
type mode =
    string ->
    Io.writer ->
    Format.formatter -> Params.t -> Unit.r list Unit.pair -> unit
val eval : t -> mode
val dot : mode
val sort : mode
val export : Name.t -> mode
val info : mode
val structured : Schematic.format option -> mode
val modules : ?filter:(Deps.dep -> bool) -> mode
val line_modules : ?filter:(Deps.dep -> bool) -> mode("DEBUG:rule", [Tag1 (("filter", 706), (0, 0, Tag1 ([(("Inner", 270), (0), 0, (("core/modes.mli", 4, 42, 44), ("core/modes.mli", 4, 42, 51), 0), 0, Tag1 ("Modes", 1)); (("Extern", 271), (0), 0, (("core/modes.mli", 5, 52, 54), ("core/modes.mli", 5, 52, 62), 0), 0, Tag1 ("Modes", 2)); (("Lib", 272), (0), 0, (("core/modes.mli", 6, 63, 65), ("core/modes.mli", 6, 63, 70), 0), 0, Tag1 ("Modes", 3)); (("Dep", 273), (0), 0, (("core/modes.mli", 7, 71, 73), ("core/modes.mli", 7, 71, 78), 0), 0, Tag1 ("Modes", 4))], 0), 1, 0, 0, 0, 0, 0, (("core/modes.mli", 3, 28, 28), ("core/modes.mli", 7, 71, 78), 0), 0, 1, 0, Tag1 ("Modes", 0)), 1, 0); Tag1 (("variant", 707), (0, 0, Tag1 ([(("Standard", 275), (0), 0, (("core/modes.mli", 10, 95, 97), ("core/modes.mli", 10, 95, 107), 0), 0, Tag1 ("Modes", 6)); (("Nl", 276), (0), 0, (("core/modes.mli", 11, 108, 110), ("core/modes.mli", 11, 108, 114), 0), 0, Tag1 ("Modes", 7))], 0), 1, 0, 0, 0, 0, 0, (("core/modes.mli", 9, 80, 80), ("core/modes.mli", 11, 108, 114), 0), 0, 1, 0, Tag1 ("Modes", 5)), 1, 0); Tag1 (("t", 708), (0, 0, Tag1 ([(("Dot", 278), (0), 0, (("core/modes.mli", 14, 125, 127), ("core/modes.mli", 14, 125, 132), 0), 0, Tag1 ("Modes", 9)); (("Export", 279), ([(Tag3 (Tag1 ((Tag2 ("Name")), "t"), 0, (0)), 100000000, 0, -41)]), 0, (("core/modes.mli", 15, 133, 135), ("core/modes.mli", 15, 133, 153), 0), 0, Tag1 ("Modes", 10)); (("Modules", 288), ([(Tag3 ((("variant", 707)), 0, (0)), 100000000, 0, -42); (Tag3 ((("filter", 706)), 0, (0)), 100000000, 0, -43)]), 0, (("core/modes.mli", 16, 154, 156), ("core/modes.mli", 16, 154, 185), 0), 0, Tag1 ("Modes", 11)); (("Info", 289), (0), 0, (("core/modes.mli", 17, 186, 188), ("core/modes.mli", 17, 186, 194), 0), 0, Tag1 ("Modes", 12)); (("Deps", 290), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Schematic")), "format"), 0, (0)), 100000000, 0, -45)], (0)), 100000000, 0, -44)]), 0, (("core/modes.mli", 18, 195, 197), ("core/modes.mli", 18, 195, 230), 0), 0, Tag1 ("Modes", 14)); (("Signature", 335), (0), 0, (("core/modes.mli", 19, 231, 233), ("core/modes.mli", 19, 231, 244), 0), 0, Tag1 ("Modes", 15)); (("Sort", 336), (0), 0, (("core/modes.mli", 20, 245, 247), ("core/modes.mli", 20, 245, 253), 0), 0, Tag1 ("Modes", 16))], 0), 1, 0, 0, 0, 0, 0, (("core/modes.mli", 13, 116, 116), ("core/modes.mli", 20, 245, 253), 0), 0, 0, 0, Tag1 ("Modes", 8)), 1, 0); Tag1 (("mode", 709), (0, 0, 0, 1, ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -40), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Io")), "writer"), 0, (0)), 100000000, 0, -39), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -38), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Params")), "t"), 0, (0)), 100000000, 0, -37), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Unit")), "pair"), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Unit")), "r"), 0, (0)), 100000000, 0, -36)], (0)), 100000000, 0, -35)], (0)), 100000000, 0, -34), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -33), 0), 100000000, 0, -32), 0), 100000000, 0, -31), 0), 100000000, 0, -30), 0), 100000000, 0, -29), 0), 100000000, 0, -28)), 0, 0, 0, 0, (("core/modes.mli", 23, 256, 256), ("core/modes.mli", 24, 308, 354), 0), 0, 0, 0, Tag1 ("Modes", 17)), 1, 0); (("eval", 710), ((Tag1 (0, (Tag3 ((("t", 708)), 0, (0)), 100000000, 0, -27), (Tag3 ((("mode", 709)), 0, (0)), 100000000, 0, -26), 0), 100000000, 0, -25), 0, (("core/modes.mli", 26, 356, 356), ("core/modes.mli", 26, 356, 375), 0), 0, Tag1 ("Modes", 18)), 0); (("dot", 711), ((Tag3 ((("mode", 709)), 0, (0)), 100000000, 0, -24), 0, (("core/modes.mli", 29, 459, 459), ("core/modes.mli", 29, 459, 472), 0), 0, Tag1 ("Modes", 19)), 0); (("sort", 712), ((Tag3 ((("mode", 709)), 0, (0)), 100000000, 0, -23), 0, (("core/modes.mli", 33, 572, 572), ("core/modes.mli", 33, 572, 586), 0), 0, Tag1 ("Modes", 20)), 0); (("export", 713), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Name")), "t"), 0, (0)), 100000000, 0, -22), (Tag3 ((("mode", 709)), 0, (0)), 100000000, 0, -21), 0), 100000000, 0, -20), 0, (("core/modes.mli", 36, 645, 645), ("core/modes.mli", 36, 645, 671), 0), 0, Tag1 ("Modes", 21)), 0); (("info", 714), ((Tag3 ((("mode", 709)), 0, (0)), 100000000, 0, -19), 0, (("core/modes.mli", 39, 741, 741), ("core/modes.mli", 39, 741, 755), 0), 0, Tag1 ("Modes", 22)), 0); (("structured", 715), ((Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Schematic")), "format"), 0, (0)), 100000000, 0, -18)], (0)), 100000000, 0, -17), (Tag3 ((("mode", 709)), 0, (0)), 100000000, 0, -16), 0), 100000000, 0, -15), 0, (("core/modes.mli", 42, 808, 808), ("core/modes.mli", 42, 808, 855), 0), 0, Tag1 ("Modes", 23)), 0); (("modules", 716), ((Tag1 (Tag1 ("filter"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Deps")), "dep"), 0, (0)), 100000000, 0, -14), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -13), 0), 100000000, 0, -12)], (0)), 100000000, 0, -11), (Tag3 ((("mode", 709)), 0, (0)), 100000000, 0, -10), 0), 100000000, 0, -9), 0, (("core/modes.mli", 46, 962, 962), ("core/modes.mli", 46, 962, 1010), 0), 0, Tag1 ("Modes", 24)), 0); (("line_modules", 717), ((Tag1 (Tag1 ("filter"), (Tag3 ((Tag3 ("option", 10)), [(Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Deps")), "dep"), 0, (0)), 100000000, 0, -8), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -7), 0), 100000000, 0, -6)], (0)), 100000000, 0, -5), (Tag3 ((("mode", 709)), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0, (("core/modes.mli", 49, 1091, 1091), ("core/modes.mli", 49, 1091, 1143), 0), 0, Tag1 ("Modes", 25)), 0); (("signature", 718), ((Tag3 ((("mode", 709)), 0, (0)), 100000000, 0, -2), 0, (("core/modes.mli", 53, 1263, 1263), ("core/modes.mli", 53, 1263, 1282), 0), 0, Tag1 ("Modes", 26)), 0)], "Modes", [("Modes", ("\198\178\136\149\0065\031\168\150)\158\219C\172l\198")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Unitname", ("\155n\201\211\249\229\028$\220J\172\018<\249\171\158")); ("Unit", ("\012`/\204$\176\199(O\017F\167@\231@\242")); ("Uloc", ("\172\208h 6@\178[\156\249\206\172%\133\167\239")); ("Transforms", ("\247\177\132M&\202\192\164\018Ng6Wu\007\018")); ("Syntaxerr", ("\219y W\156\199S\188\018+\196\144>\187\159f")); ("Support", ("YA;\029\006a\255\202R\137\181\133\184\209)\005")); ("Summary", ("\243\022s.\187>\205\012\161)\1369wh\247p")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Stage", ("\224\018\196\1757\168\209wr\235\232\015z\144\206V")); ("Schematic", ("\180\179\011\178\017I\241^\235\149h\161k\b\209\142")); ("Read", ("\252*\146t'\236>\158\170\160=\012nNp\144")); ("Pp", ("\167zCQ\134\167\215\2517\247\158\219\250\223.\197")); ("Pkg", ("SneaP\023\210\210\240\218\128bA\te\239")); ("Paths", ("\000\152\242H\139l\222\245\245Ndb\202P^\175")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Parser", ("7'\1782\253\248\214\163]8\227\231&\145\183;")); ("Params", ("3\184\019g\146&\246\151\137\193\253aW\227Q\166")); ("Namespaced", ("%\208\253;3\161W$\236\1838K\195z\1493")); ("Name", ("4? \167\131n\184\000\214\031\017\027\153\002]^")); ("Module", ("2_s\200\188\137\247\158>\168\195\023\195\n\011V")); ("Modname", ("v\160\183\003\212\232\177\007\228-\002\145i\230\255\248")); ("Makefile", ("\213\228\147\183l\166wd\026\168 \246'\226\166y")); ("M2l", ("\208\241\201a\199\212\172v;\135t\185\027\196~\029")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Loc", ("ax\213\152\006\175?\212%\0014\238\021S\218=")); ("Lexer", ("d\166[g\003\193p\201\147\190pL\152^\136A")); ("Io", ("ON\202f?;1\160\1714{M;\140D\193")); ("Id", ("w\207`(\179n\181\161\155\252\243\195\006\139NO")); ("Findlib", ("\011\234\164\220\235\189\218\r\022\216\002\196\250,\138/")); ("Fault", ("\232\144\144(K\139\181-h!\017\212@?\127\199")); ("Docstrings", ("\216\171\176\031*\203\162\186%\175\201qq\189\139U")); ("Deps", ("%\164\252&\165z\218\221\023\182\235\223+\147\145\195")); ("Common", ("\142K\127m\162\172Ac\028XFp(\185\181\007")); ("CamlinternalMenhirLib", ("\171m\238\135\252\210\222v\200\202\178\241L\143\025\153")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216")); ("Analysis", ("a\168c\169G\176+\007\240C\171\243\229\017\168\239"))], [(0)])

val signature : mode

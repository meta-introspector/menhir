module Run :
  functor
    (G : sig
           type node
           val n : int
           val index : node -> int
           val successors : (node -> unit) -> node -> unit
           val iter : (node -> unit) -> unit
         end)
    ->
    sig
      val representative : G.node -> G.node
      val scc : G.node -> G.node list
      val iter : (G.node -> G.node list -> unit) -> unit
      val rev_topological_iter : (G.node -> G.node list -> unit) -> unit("DEBUG:rule", [Tag3 (("Run", 413), 0, (Tag2 (((("G", 414)), Tag1 ([Tag1 (("node", 415), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/tarjan.mli", 23, 1319, 1321), ("src/tarjan.mli", 23, 1319, 1330), 0), 0, 0, 0, Tag1 ("Dune__exe__Tarjan", 0)), 1, 0); (("n", 416), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -17), 0, (("src/tarjan.mli", 28, 1471, 1473), ("src/tarjan.mli", 28, 1471, 1483), 0), 0, Tag1 ("Dune__exe__Tarjan", 1)), 0); (("index", 417), ((Tag1 (0, (Tag3 ((("node", 415)), 0, (0)), 100000000, 0, -16), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -15), 0), 100000000, 0, -14), 0, (("src/tarjan.mli", 29, 1484, 1486), ("src/tarjan.mli", 29, 1484, 1508), 0), 0, Tag1 ("Dune__exe__Tarjan", 2)), 0); (("successors", 418), ((Tag1 (0, (Tag1 (0, (Tag3 ((("node", 415)), 0, (0)), 100000000, 0, -13), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), (Tag1 (0, (Tag3 ((("node", 415)), 0, (0)), 100000000, 0, -10), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0), 100000000, 0, -7), 0, (("src/tarjan.mli", 33, 1565, 1567), ("src/tarjan.mli", 33, 1565, 1613), 0), 0, Tag1 ("Dune__exe__Tarjan", 3)), 0); (("iter", 419), ((Tag1 (0, (Tag1 (0, (Tag3 ((("node", 415)), 0, (0)), 100000000, 0, -6), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5), 0), 100000000, 0, -4), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/tarjan.mli", 37, 1650, 1652), ("src/tarjan.mli", 37, 1650, 1684), 0), 0, Tag1 ("Dune__exe__Tarjan", 4)), 0)])), Tag1 ([(("representative", 420), ((Tag1 (0, (Tag3 (Tag1 ((("G", 414)), "node"), 0, (0)), 100000000, 0, -40), (Tag3 (Tag1 ((("G", 414)), "node"), 0, (0)), 100000000, 0, -39), 0), 100000000, 0, -38), 0, (("src/tarjan.mli", 46, 1797, 1799), ("src/tarjan.mli", 46, 1797, 1831), 0), 0, Tag1 ("Dune__exe__Tarjan", 6)), 0); (("scc", 421), ((Tag1 (0, (Tag3 (Tag1 ((("G", 414)), "node"), 0, (0)), 100000000, 0, -37), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("G", 414)), "node"), 0, (0)), 100000000, 0, -36)], (0)), 100000000, 0, -35), 0), 100000000, 0, -34), 0, (("src/tarjan.mli", 52, 1999, 2001), ("src/tarjan.mli", 52, 1999, 2027), 0), 0, Tag1 ("Dune__exe__Tarjan", 7)), 0); (("iter", 422), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((("G", 414)), "node"), 0, (0)), 100000000, 0, -33), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("G", 414)), "node"), 0, (0)), 100000000, 0, -32)], (0)), 100000000, 0, -31), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -30), 0), 100000000, 0, -29), 0), 100000000, 0, -28), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -27), 0), 100000000, 0, -26), 0, (("src/tarjan.mli", 60, 2392, 2394), ("src/tarjan.mli", 60, 2392, 2439), 0), 0, Tag1 ("Dune__exe__Tarjan", 8)), 0); (("rev_topological_iter", 423), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((("G", 414)), "node"), 0, (0)), 100000000, 0, -25), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((("G", 414)), "node"), 0, (0)), 100000000, 0, -24)], (0)), 100000000, 0, -23), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0), 100000000, 0, -20), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -19), 0), 100000000, 0, -18), 0, (("src/tarjan.mli", 69, 2838, 2840), ("src/tarjan.mli", 69, 2838, 2901), 0), 0, Tag1 ("Dune__exe__Tarjan", 9)), 0)])), 0, (("src/tarjan.mli", 21, 1298, 1298), ("src/tarjan.mli", 71, 2903, 2906), 0), Tag1 ("Dune__exe__Tarjan", 10)), 0, 0)], "Dune__exe__Tarjan", [("Dune__exe__Tarjan", ("?\208\218\150\252\130|\189\217\255qx\167M\"\t")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("MenhirSdk", ("F\232\012\196l\143\145[\255\2193U\197\027\176\139")); ("Dune__exe", ("\137\000\197\175$\007]\218\141\248\172\212\146c\153\212")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [1; (0)])

    end
